Binary Function "_Z11test_memcmpIh23forloop_unroll64_memcmpEvPKT_S3_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x7140
  Size        : 0x309
  MaxSize     : 0x310
  Offset      : 0x7140
  Section     : .text
  Orc Section : .local.text._Z11test_memcmpIh23forloop_unroll64_memcmpEvPKT_S3_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%ecx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	xorl	%r13d, %r13d
    00000010: 	pushq	%r12
    00000012: 	movslq	%edx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	movq	%r12, %r14
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rdi, %rbx
    00000020: 	subq	$0x28, %rsp
    00000024: 	movq	%r8, (%rsp)
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0x18(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	callq	clock@PLT # Offset: 56
    0000003d: 	movl	iterations(%rip), %ecx
    00000043: 	movq	%rax, start_time(%rip)
    0000004a: 	movq	%rbx, %rax
    0000004d: 	andl	$0x7, %eax
    00000050: 	movq	%rax, 0x8(%rsp)
    00000055: 	testl	%ecx, %ecx
    00000057: 	jle	.Ltmp531 # Offset: 87
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp538:
    00000060: 	xorl	%eax, %eax
    00000062: 	cmpq	$0x1f, %r12
    00000066: 	jbe	.Ltmp532 # Offset: 102
    0000006c: 	testq	%r12, %r12
    0000006f: 	jle	.Ltmp533 # Offset: 111
    00000075: 	cmpq	$0x0, 0x8(%rsp)
    0000007b: 	jne	.Ltmp534 # Offset: 123
    0000007d: 	jmp	.Ltmp535 # Offset: 125
    00000082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp536:
    00000088: 	addq	$0x1, %rax
    0000008c: 	cmpq	%rax, %r12
    0000008f: 	je	.Ltmp533 # Offset: 143
    00000095: 	leaq	(%rbx,%rax), %rdx
    00000099: 	andl	$0x7, %edx
    0000009c: 	je	.Ltmp535 # Offset: 156
.Ltmp534:
    000000a2: 	movzbl	(%rbp,%rax), %edi
    000000a7: 	cmpb	%dil, (%rbx,%rax)
    000000ab: 	je	.Ltmp536 # Offset: 171
.Ltmp547:
    000000ad: 	movl	$0x1, %r8d
    000000b3: 	cmpb	%r8b, %r15b
    000000b6: 	jne	.Ltmp537 # Offset: 182
.Ltmp549:
    000000bc: 	addl	$0x1, %r13d
    000000c0: 	cmpl	%ecx, %r13d
    000000c3: 	jl	.Ltmp538 # Offset: 195
.Ltmp531:
    000000c5: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000cc: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    000000d3: 	subq	$0x20, %rax
    000000d7: 	cmpq	%rax, %rbx
    000000da: 	je	.Ltmp539 # Offset: 218
    000000e0: 	movq	(%rsp), %rax
    000000e4: 	leaq	0x10(%rbx), %rdi
    000000e8: 	movq	%rdi, (%rbx)
    000000eb: 	movq	(%rax), %rbp
    000000ee: 	movq	0x8(%rax), %r12
    000000f2: 	movq	%rbp, %rax
    000000f5: 	addq	%r12, %rax
    000000f8: 	je	.Ltmp540 # Offset: 248
    000000fa: 	testq	%rbp, %rbp
    000000fd: 	je	.Ltmp541 # Offset: 253
.Ltmp540:
    00000103: 	movq	%r12, 0x10(%rsp)
    00000108: 	cmpq	$0xf, %r12
    0000010c: 	ja	.Ltmp542 # Offset: 268
    00000112: 	cmpq	$0x1, %r12
    00000116: 	jne	.Ltmp543 # Offset: 278
    0000011c: 	movzbl	(%rbp), %eax
    00000120: 	movb	%al, 0x10(%rbx)
.Ltmp552:
    00000123: 	movq	%r12, 0x8(%rbx)
    00000127: 	movb	$0x0, (%rdi,%r12)
    0000012c: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000133: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000013a: 	addq	$0x20, %rax
    0000013e: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000145: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    0000014c: 	je	.Ltmp544 # Offset: 332
.Ltmp553:
    00000152: 	movq	-0x20(%rax), %rbp
    00000156: 	callq	clock@PLT # Offset: 342
    0000015b: 	movq	%rax, end_time(%rip)
    00000162: 	movq	0x18(%rsp), %rdx
    00000167: 	subq	%fs:0x28, %rdx
    00000170: 	jne	.Ltmp545 # Offset: 368
    00000176: 	subq	start_time(%rip), %rax
    0000017d: 	pxor	%xmm0, %xmm0
    00000181: 	movq	%rbp, %rdi
    00000184: 	cvtsi2sd	%rax, %xmm0
    00000189: 	divsd	DATAat0x8758(%rip), %xmm0
    00000191: 	addq	$0x28, %rsp
    00000195: 	popq	%rbx
    00000196: 	popq	%rbp
    00000197: 	popq	%r12
    00000199: 	popq	%r13
    0000019b: 	popq	%r14
    0000019d: 	popq	%r15
    0000019f: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 415
    000001a4: 	nopl	(%rax) # Size: 4
.Ltmp535:
    000001a8: 	leaq	-0x1f(%r12), %rdx
    000001ad: 	cmpq	%rdx, %rax
    000001b0: 	jl	.Ltmp546 # Offset: 432
    000001b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp548:
    000001c0: 	movzbl	(%rbp,%rax), %esi
    000001c5: 	cmpb	%sil, (%rbx,%rax)
    000001c9: 	jne	.Ltmp547 # Offset: 457
    000001cf: 	addq	$0x1, %rax
.Ltmp532:
    000001d3: 	cmpq	%rax, %r12
    000001d6: 	jg	.Ltmp548 # Offset: 470
.Ltmp550:
    000001d8: 	xorl	%r8d, %r8d
    000001db: 	cmpb	%r8b, %r15b
    000001de: 	je	.Ltmp549 # Offset: 478
.Ltmp537:
    000001e4: 	movq	(%rsp), %rax
    000001e8: 	movl	%r14d, %ecx
    000001eb: 	movzbl	%r15b, %r9d
    000001ef: 	andl	$0x1, %r8d
    000001f3: 	leaq	DATAat0x8690(%rip), %rsi
    000001fa: 	movl	$0x1, %edi
    000001ff: 	addl	$0x1, %r13d
    00000203: 	movq	(%rax), %rdx
    00000206: 	xorl	%eax, %eax
    00000208: 	callq	__printf_chk@PLT # Offset: 520
    0000020d: 	movl	iterations(%rip), %ecx
    00000213: 	cmpl	%r13d, %ecx
    00000216: 	jg	.Ltmp538 # Offset: 534
    0000021c: 	jmp	.Ltmp531 # Offset: 540
    00000221: 	nopl	(%rax) # Size: 7
.Ltmp533:
    00000228: 	leaq	-0x1f(%r12), %rdx
    0000022d: 	cmpq	%rdx, %rax
    00000230: 	jl	.Ltmp546 # Offset: 560
    00000232: 	jmp	.Ltmp550 # Offset: 562
    00000234: 	nopl	(%rax) # Size: 4
.Ltmp551:
    00000238: 	movq	0x8(%rbp,%rax), %rsi
    0000023d: 	cmpq	%rsi, 0x8(%rbx,%rax)
    00000242: 	jne	.Ltmp532 # Offset: 578
    00000244: 	movq	0x10(%rbp,%rax), %rdi
    00000249: 	cmpq	%rdi, 0x10(%rbx,%rax)
    0000024e: 	jne	.Ltmp532 # Offset: 590
    00000250: 	movq	0x18(%rbp,%rax), %rsi
    00000255: 	cmpq	%rsi, 0x18(%rbx,%rax)
    0000025a: 	jne	.Ltmp532 # Offset: 602
    00000260: 	addq	$0x20, %rax
    00000264: 	cmpq	%rax, %rdx
    00000267: 	jle	.Ltmp532 # Offset: 615
.Ltmp546:
    0000026d: 	movq	(%rbp,%rax), %rdi
    00000272: 	cmpq	%rdi, (%rbx,%rax)
    00000276: 	je	.Ltmp551 # Offset: 630
    00000278: 	jmp	.Ltmp532 # Offset: 632
.Ltmp542:
    0000027d: 	movq	%rbx, %rdi
    00000280: 	leaq	0x10(%rsp), %rsi
    00000285: 	xorl	%edx, %edx
    00000287: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 647
    0000028c: 	movq	%rax, (%rbx)
    0000028f: 	movq	%rax, %rdi
    00000292: 	movq	0x10(%rsp), %rax
    00000297: 	movq	%rax, 0x10(%rbx)
.Ltmp554:
    0000029b: 	movq	%r12, %rdx
    0000029e: 	movq	%rbp, %rsi
    000002a1: 	callq	memcpy@PLT # Offset: 673
    000002a6: 	movq	0x10(%rsp), %r12
    000002ab: 	movq	(%rbx), %rdi
    000002ae: 	jmp	.Ltmp552 # Offset: 686
.Ltmp539:
    000002b3: 	movq	(%rsp), %rsi
    000002b7: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000002be: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 702
    000002c3: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000002ca: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000002d1: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000002d8: 	jne	.Ltmp553 # Offset: 728
.Ltmp544:
    000002de: 	movq	-0x8(%rdx), %rax
    000002e2: 	addq	$0x200, %rax
    000002e8: 	jmp	.Ltmp553 # Offset: 744
.Ltmp543:
    000002ed: 	testq	%r12, %r12
    000002f0: 	je	.Ltmp552 # Offset: 752
    000002f6: 	jmp	.Ltmp554 # Offset: 758
.Ltmp545:
    000002f8: 	callq	__stack_chk_fail@PLT # Offset: 760
.Ltmp541:
    000002fd: 	leaq	DATAat0x8008(%rip), %rdi
    00000304: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 772
DWARF CFI Instructions:
    <empty>
End of Function "_Z11test_memcmpIh23forloop_unroll64_memcmpEvPKT_S3_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"