BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0x3e028, which lies outside .bss
BOLT-WARNING: split function detected on input : _GLOBAL__sub_I_results.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x3dff0(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 3
  State       : disassembled
  Address     : 0x1410
  Size        : 0x10d
  MaxSize     : 0x110
  Offset      : 0x1410
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB02:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	pushq	%rbx
    0000000c: 	testl	%edi, %edi
    0000000e: 	jle	.Ltmp1 # Offset: 14
    00000014: 	leal	-0x1(%rdi), %eax
    00000017: 	movl	%edi, %r13d
    0000001a: 	movq	%rsi, %r14
    0000001d: 	movq	%rsi, %rbx
    00000020: 	leaq	0x8(%rsi,%rax,8), %r12
    00000025: 	leaq	DATAat0x38150(%rip), %rbp
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp2:
    00000030: 	movq	(%rbx), %rdx
    00000033: 	movq	%rbp, %rsi
    00000036: 	movl	$0x1, %edi
    0000003b: 	xorl	%eax, %eax
    0000003d: 	addq	$0x8, %rbx
    00000041: 	callq	__printf_chk@PLT # Offset: 65
    00000046: 	cmpq	%r12, %rbx
    00000049: 	jne	.Ltmp2 # Offset: 73
    0000004b: 	xorl	%eax, %eax
    0000004d: 	leaq	DATAat0x38136(%rip), %rsi
    00000054: 	movl	$0x1, %edi
    00000059: 	callq	__printf_chk@PLT # Offset: 89
    0000005e: 	cmpl	$0x1, %r13d
    00000062: 	jg	.Ltmp3 # Offset: 98
.Ltmp4:
    00000064: 	callq	_Z15TestOneTypeConvIhtEvv # Offset: 100
    00000069: 	callq	_Z15TestOneTypeConvIsiEvv # Offset: 105
    0000006e: 	callq	_Z15TestOneTypeConvIilEvv # Offset: 110
    00000073: 	callq	_Z15TestOneTypeConvIddEvv # Offset: 115
    00000078: 	callq	_Z11TestOneTypeIhEvv # Offset: 120
    0000007d: 	callq	_Z11TestOneTypeIsEvv # Offset: 125
    00000082: 	movl	iterations(%rip), %edx
    00000088: 	movl	%edx, %eax
    0000008a: 	shrl	$0x1f, %eax
    0000008d: 	addl	%edx, %eax
    0000008f: 	sarl	%eax
    00000091: 	movl	%eax, iterations(%rip)
    00000097: 	callq	_Z11TestOneTypeIiEvv # Offset: 151
    0000009c: 	movl	iterations(%rip), %edx
    000000a2: 	movl	%edx, %eax
    000000a4: 	shrl	$0x1f, %eax
    000000a7: 	addl	%edx, %eax
    000000a9: 	sarl	%eax
    000000ab: 	movl	%eax, iterations(%rip)
    000000b1: 	callq	_Z11TestOneTypeIdEvv # Offset: 177
    000000b6: 	popq	%rbx
    000000b7: 	xorl	%eax, %eax
    000000b9: 	popq	%rbp
    000000ba: 	popq	%r12
    000000bc: 	popq	%r13
    000000be: 	popq	%r14
    000000c0: 	retq # Offset: 192
.Ltmp3:
    000000c1: 	movq	0x8(%r14), %rdi
    000000c5: 	movl	$0xa, %edx
    000000ca: 	xorl	%esi, %esi
    000000cc: 	callq	strtol@PLT # Offset: 204
    000000d1: 	movl	%eax, iterations(%rip)
    000000d7: 	cmpl	$0x2, %r13d
    000000db: 	jle	.Ltmp4 # Offset: 219
    000000dd: 	movq	0x10(%r14), %rdi
    000000e1: 	xorl	%esi, %esi
    000000e3: 	callq	strtod@PLT # Offset: 227
    000000e8: 	movsd	%xmm0, init_value(%rip)
    000000f0: 	jmp	.Ltmp4 # Offset: 240
.Ltmp1:
    000000f5: 	leaq	DATAat0x38136(%rip), %rsi
    000000fc: 	movl	$0x1, %edi
    00000101: 	xorl	%eax, %eax
    00000103: 	callq	__printf_chk@PLT # Offset: 259
    00000108: 	jmp	.Ltmp4 # Offset: 264
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 5
  State       : disassembled
  Address     : 0x1600
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x1600
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x3dfe0(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x1630
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x1630
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp5 # Offset: 17
    00000013: 	movq	DATAat0x3dfe8(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp5 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp5:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x1660
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1660
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp6 # Offset: 34
    00000024: 	movq	DATAat0x3dff8(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp6 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x16a0
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x16a0
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp7 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp8 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp8:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp7:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 9
  State       : disassembled
  Address     : 0x16e0
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x16e0
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 10
  State       : disassembled
  Address     : 0x16f0
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x16f0
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp9 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp10 # Offset: 38
.Ltmp9:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp11 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp10:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp11:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x38008(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 11
  State       : disassembled
  Address     : 0x1790
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x1790
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp12 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp13 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp14:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp14 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp27:
    00000069: 	leaq	DATAat0x38152(%rip), %rbp
    00000070: 	leaq	DATAat0x38028(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x38068(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp15 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x38a50(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x38098(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x38a48(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp16 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp20:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp17 # Offset: 244
    000000fa: 	movq	DATAat0x38a40(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp21:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x38a40(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp18 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp18:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x38137(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x38a50(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp19 # Offset: 398
.Ltmp16:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp20 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp21 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp17:
    000001c8: 	movq	DATAat0x38a38(%rip), %rsi
    000001cf: 	movq	DATAat0x38a40(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp18 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp19:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp15 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp22 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp23:
    00000210: 	addq	$0x10, %rax
.Ltmp22:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp23 # Offset: 542
.Ltmp28:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x380c8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp24 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp25 # Offset: 592
.Ltmp24:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp12:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp25:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp26:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp26 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x38112(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp12 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp13:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp27 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp15:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp28 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x1ac0
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x1ac0
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp29 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp30 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp31:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp31 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp36:
    0000006a: 	leaq	DATAat0x38152(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x380f0(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x38138(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x38152(%rip), %r8
    000000a1: 	leaq	DATAat0x38126(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp32 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp33:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x38137(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp33 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp32 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp34 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp35:
    00000140: 	addq	$0x10, %rax
.Ltmp34:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp35 # Offset: 334
.Ltmp37:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x380c8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp29:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp30:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp36 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp32:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp37 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x1c70
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x1c70
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x1c90
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x1c90
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x38a48(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x1cd0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1cd0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f38, %edx
    00000017: 	movl	$0x746e6975, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x1d00
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1d00
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3631746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x1d30
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1d30
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3233746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x1d60
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1d60
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3436746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x1d90
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1d90
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x1dc0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1dc0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x1df0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1df0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f36, %edx
    00000017: 	movl	$0x31746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x1e20
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1e20
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f32, %edx
    00000017: 	movl	$0x33746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x1e50
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1e50
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f34, %edx
    00000017: 	movl	$0x36746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x1e80
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x1e80
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x14(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x616f6c66, 0x10(%rdi)
    00000019: 	movq	$0x5, 0x8(%rdi)
    00000021: 	movb	$0x0, 0x15(%rdi)
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x1eb0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1eb0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x62756f64, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x656c, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x1ee0
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0x1ee0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x65, 0x1a(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movl	$0x6c62, %edx
    00000021: 	movq	%rcx, 0x10(%rdi)
    00000025: 	movw	%dx, 0x18(%rdi)
    00000029: 	movq	$0xb, 0x8(%rdi)
    00000031: 	movb	$0x0, 0x1b(%rdi)
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x1f20
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1f20
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f38746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x1f50
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x1f50
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3631746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x1f80
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x1f80
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3233746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x1fb0
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x1fb0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3436746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x1fe0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1fe0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x745f, %edx
    00000017: 	movl	$0x38746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x2010
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2010
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3631746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x2040
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2040
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3233746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x2070
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2070
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3436746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x20a0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x20a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x616f6c66, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x2a74, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x20d0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x20d0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x656c, %edx
    00000017: 	movl	$0x62756f64, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x2100
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x2100
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x0, 0x1c(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movl	$0x2a656c62, 0x18(%rdi)
    00000027: 	movq	$0xc, 0x8(%rdi)
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_Z17test_for_loop_optIhET_PKS0_iS0_" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x2130
  Size        : 0x10f
  MaxSize     : 0x110
  Offset      : 0x2130
  Section     : .text
  Orc Section : .local.text._Z17test_for_loop_optIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp38 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0xe, %eax
    00000014: 	jbe	.Ltmp39 # Offset: 20
    0000001a: 	movl	%esi, %ecx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	pxor	%xmm0, %xmm0
    00000023: 	shrl	$0x4, %ecx
    00000026: 	subl	$0x1, %ecx
    00000029: 	shlq	$0x4, %rcx
    0000002d: 	leaq	0x10(%rdi,%rcx), %rcx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp40:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddb	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp40 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%edx, %esi
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x10, %esi
    00000057: 	paddb	%xmm1, %xmm0
    0000005b: 	pxor	%xmm1, %xmm1
    0000005f: 	movl	%esi, %ecx
    00000061: 	psadbw	%xmm1, %xmm0
    00000065: 	movd	%xmm0, %eax
    00000069: 	cmpl	%esi, %edx
    0000006b: 	je	.Ltmp41 # Offset: 107
.Ltmp44:
    00000071: 	movl	%edx, %r8d
    00000074: 	subl	%esi, %r8d
    00000077: 	leal	-0x1(%r8), %r9d
    0000007b: 	cmpl	$0x6, %r9d
    0000007f: 	jbe	.Ltmp42 # Offset: 127
    00000081: 	movq	(%rdi,%rsi), %xmm1
    00000086: 	pxor	%xmm0, %xmm0
    0000008a: 	movdqa	%xmm1, %xmm3
    0000008e: 	psadbw	%xmm0, %xmm3
    00000092: 	movq	%xmm3, %rsi
    00000097: 	addl	%esi, %eax
    00000099: 	movl	%r8d, %esi
    0000009c: 	andl	$-0x8, %esi
    0000009f: 	addl	%esi, %ecx
    000000a1: 	cmpl	%esi, %r8d
    000000a4: 	je	.Ltmp43 # Offset: 164
.Ltmp42:
    000000a6: 	movslq	%ecx, %rsi
    000000a9: 	addb	(%rdi,%rsi), %al
    000000ac: 	leal	0x1(%rcx), %esi
    000000af: 	cmpl	%esi, %edx
    000000b1: 	jle	.Ltmp43 # Offset: 177
    000000b3: 	movslq	%esi, %rsi
    000000b6: 	addb	(%rdi,%rsi), %al
    000000b9: 	leal	0x2(%rcx), %esi
    000000bc: 	cmpl	%edx, %esi
    000000be: 	jge	.Ltmp43 # Offset: 190
    000000c0: 	movslq	%esi, %rsi
    000000c3: 	addb	(%rdi,%rsi), %al
    000000c6: 	leal	0x3(%rcx), %esi
    000000c9: 	cmpl	%esi, %edx
    000000cb: 	jle	.Ltmp43 # Offset: 203
    000000cd: 	movslq	%esi, %rsi
    000000d0: 	addb	(%rdi,%rsi), %al
    000000d3: 	leal	0x4(%rcx), %esi
    000000d6: 	cmpl	%esi, %edx
    000000d8: 	jle	.Ltmp43 # Offset: 216
    000000da: 	movslq	%esi, %rsi
    000000dd: 	addb	(%rdi,%rsi), %al
    000000e0: 	leal	0x5(%rcx), %esi
    000000e3: 	cmpl	%esi, %edx
    000000e5: 	jle	.Ltmp43 # Offset: 229
    000000e7: 	movslq	%esi, %rsi
    000000ea: 	addl	$0x6, %ecx
    000000ed: 	addb	(%rdi,%rsi), %al
    000000f0: 	cmpl	%ecx, %edx
    000000f2: 	jle	.Ltmp43 # Offset: 242
    000000f4: 	movslq	%ecx, %rcx
    000000f7: 	addb	(%rdi,%rcx), %al
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp38:
    00000100: 	xorl	%eax, %eax
.Ltmp43:
    00000102: 	retq # Offset: 258
.Ltmp39:
    00000103: 	xorl	%esi, %esi
    00000105: 	xorl	%ecx, %ecx
    00000107: 	xorl	%eax, %eax
    00000109: 	jmp	.Ltmp44 # Offset: 265
.Ltmp41:
    0000010e: 	retq # Offset: 270
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_for_loop_optIhET_PKS0_iS0_"

Binary Function "_Z19test_while_loop_optIhET_PKS0_iS0_" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x2240
  Size        : 0x10f
  MaxSize     : 0x110
  Offset      : 0x2240
  Section     : .text
  Orc Section : .local.text._Z19test_while_loop_optIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp45 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0xe, %eax
    00000014: 	jbe	.Ltmp46 # Offset: 20
    0000001a: 	movl	%esi, %ecx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	pxor	%xmm0, %xmm0
    00000023: 	shrl	$0x4, %ecx
    00000026: 	subl	$0x1, %ecx
    00000029: 	shlq	$0x4, %rcx
    0000002d: 	leaq	0x10(%rdi,%rcx), %rcx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp47:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddb	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp47 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%edx, %esi
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x10, %esi
    00000057: 	paddb	%xmm1, %xmm0
    0000005b: 	pxor	%xmm1, %xmm1
    0000005f: 	movl	%esi, %ecx
    00000061: 	psadbw	%xmm1, %xmm0
    00000065: 	movd	%xmm0, %eax
    00000069: 	cmpl	%esi, %edx
    0000006b: 	je	.Ltmp48 # Offset: 107
.Ltmp51:
    00000071: 	movl	%edx, %r8d
    00000074: 	subl	%esi, %r8d
    00000077: 	leal	-0x1(%r8), %r9d
    0000007b: 	cmpl	$0x6, %r9d
    0000007f: 	jbe	.Ltmp49 # Offset: 127
    00000081: 	movq	(%rdi,%rsi), %xmm1
    00000086: 	pxor	%xmm0, %xmm0
    0000008a: 	movdqa	%xmm1, %xmm3
    0000008e: 	psadbw	%xmm0, %xmm3
    00000092: 	movq	%xmm3, %rsi
    00000097: 	addl	%esi, %eax
    00000099: 	movl	%r8d, %esi
    0000009c: 	andl	$-0x8, %esi
    0000009f: 	addl	%esi, %ecx
    000000a1: 	cmpl	%esi, %r8d
    000000a4: 	je	.Ltmp50 # Offset: 164
.Ltmp49:
    000000a6: 	movslq	%ecx, %rsi
    000000a9: 	addb	(%rdi,%rsi), %al
    000000ac: 	leal	0x1(%rcx), %esi
    000000af: 	cmpl	%esi, %edx
    000000b1: 	jle	.Ltmp50 # Offset: 177
    000000b3: 	movslq	%esi, %rsi
    000000b6: 	addb	(%rdi,%rsi), %al
    000000b9: 	leal	0x2(%rcx), %esi
    000000bc: 	cmpl	%edx, %esi
    000000be: 	jge	.Ltmp50 # Offset: 190
    000000c0: 	movslq	%esi, %rsi
    000000c3: 	addb	(%rdi,%rsi), %al
    000000c6: 	leal	0x3(%rcx), %esi
    000000c9: 	cmpl	%esi, %edx
    000000cb: 	jle	.Ltmp50 # Offset: 203
    000000cd: 	movslq	%esi, %rsi
    000000d0: 	addb	(%rdi,%rsi), %al
    000000d3: 	leal	0x4(%rcx), %esi
    000000d6: 	cmpl	%esi, %edx
    000000d8: 	jle	.Ltmp50 # Offset: 216
    000000da: 	movslq	%esi, %rsi
    000000dd: 	addb	(%rdi,%rsi), %al
    000000e0: 	leal	0x5(%rcx), %esi
    000000e3: 	cmpl	%esi, %edx
    000000e5: 	jle	.Ltmp50 # Offset: 229
    000000e7: 	movslq	%esi, %rsi
    000000ea: 	addl	$0x6, %ecx
    000000ed: 	addb	(%rdi,%rsi), %al
    000000f0: 	cmpl	%ecx, %edx
    000000f2: 	jle	.Ltmp50 # Offset: 242
    000000f4: 	movslq	%ecx, %rcx
    000000f7: 	addb	(%rdi,%rcx), %al
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp45:
    00000100: 	xorl	%eax, %eax
.Ltmp50:
    00000102: 	retq # Offset: 258
.Ltmp46:
    00000103: 	xorl	%esi, %esi
    00000105: 	xorl	%ecx, %ecx
    00000107: 	xorl	%eax, %eax
    00000109: 	jmp	.Ltmp51 # Offset: 265
.Ltmp48:
    0000010e: 	retq # Offset: 270
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_while_loop_optIhET_PKS0_iS0_"

Binary Function "_Z16test_do_loop_optIhET_PKS0_iS0_" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x2350
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x2350
  Section     : .text
  Orc Section : .local.text._Z16test_do_loop_optIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp52 # Offset: 13
    00000013: 	leal	-0x1(%rsi), %esi
    00000016: 	cmpl	$0xe, %esi
    00000019: 	jbe	.Ltmp53 # Offset: 25
    0000001f: 	movl	%edx, %esi
    00000021: 	movq	%rdi, %rax
    00000024: 	pxor	%xmm0, %xmm0
    00000028: 	shrl	$0x4, %esi
    0000002b: 	subl	$0x1, %esi
    0000002e: 	shlq	$0x4, %rsi
    00000032: 	leaq	0x10(%rdi,%rsi), %rsi
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp54:
    00000040: 	movdqu	(%rax), %xmm2
    00000044: 	addq	$0x10, %rax
    00000048: 	paddb	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rsi
    0000004f: 	jne	.Ltmp54 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%edx, %edi
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x10, %edi
    0000005f: 	paddb	%xmm1, %xmm0
    00000063: 	pxor	%xmm1, %xmm1
    00000067: 	movl	%edi, %esi
    00000069: 	psadbw	%xmm1, %xmm0
    0000006d: 	movd	%xmm0, %eax
    00000071: 	cmpl	%edi, %edx
    00000073: 	je	.Ltmp55 # Offset: 115
.Ltmp57:
    00000079: 	movl	%edx, %r8d
    0000007c: 	subl	%edi, %r8d
    0000007f: 	leal	-0x1(%r8), %r9d
    00000083: 	cmpl	$0x6, %r9d
    00000087: 	jbe	.Ltmp56 # Offset: 135
    00000089: 	movq	(%rcx,%rdi), %xmm1
    0000008e: 	pxor	%xmm0, %xmm0
    00000092: 	movdqa	%xmm1, %xmm3
    00000096: 	psadbw	%xmm0, %xmm3
    0000009a: 	movq	%xmm3, %rdi
    0000009f: 	addl	%edi, %eax
    000000a1: 	movl	%r8d, %edi
    000000a4: 	andl	$-0x8, %edi
    000000a7: 	addl	%edi, %esi
    000000a9: 	cmpl	%edi, %r8d
    000000ac: 	je	.Ltmp52 # Offset: 172
.Ltmp56:
    000000ae: 	movslq	%esi, %rdi
    000000b1: 	addb	(%rcx,%rdi), %al
    000000b4: 	leal	0x1(%rsi), %edi
    000000b7: 	cmpl	%edi, %edx
    000000b9: 	jle	.Ltmp52 # Offset: 185
    000000bb: 	movslq	%edi, %rdi
    000000be: 	addb	(%rcx,%rdi), %al
    000000c1: 	leal	0x2(%rsi), %edi
    000000c4: 	cmpl	%edi, %edx
    000000c6: 	jle	.Ltmp52 # Offset: 198
    000000c8: 	movslq	%edi, %rdi
    000000cb: 	addb	(%rcx,%rdi), %al
    000000ce: 	leal	0x3(%rsi), %edi
    000000d1: 	cmpl	%edi, %edx
    000000d3: 	jle	.Ltmp52 # Offset: 211
    000000d5: 	movslq	%edi, %rdi
    000000d8: 	addb	(%rcx,%rdi), %al
    000000db: 	leal	0x4(%rsi), %edi
    000000de: 	cmpl	%edi, %edx
    000000e0: 	jle	.Ltmp52 # Offset: 224
    000000e2: 	movslq	%edi, %rdi
    000000e5: 	addb	(%rcx,%rdi), %al
    000000e8: 	leal	0x5(%rsi), %edi
    000000eb: 	cmpl	%edi, %edx
    000000ed: 	jle	.Ltmp52 # Offset: 237
    000000ef: 	movslq	%edi, %rdi
    000000f2: 	addl	$0x6, %esi
    000000f5: 	addb	(%rcx,%rdi), %al
    000000f8: 	cmpl	%esi, %edx
    000000fa: 	jle	.Ltmp52 # Offset: 250
    000000fc: 	movslq	%esi, %rsi
    000000ff: 	addb	(%rcx,%rsi), %al
.Ltmp52:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp53:
    00000108: 	xorl	%edi, %edi
    0000010a: 	xorl	%esi, %esi
    0000010c: 	jmp	.Ltmp57 # Offset: 268
.Ltmp55:
    00000111: 	retq # Offset: 273
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_do_loop_optIhET_PKS0_iS0_"

Binary Function "_Z18test_goto_loop_optIhET_PKS0_iS0_" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x2470
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x2470
  Section     : .text
  Orc Section : .local.text._Z18test_goto_loop_optIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp58 # Offset: 13
    00000013: 	leal	-0x1(%rsi), %esi
    00000016: 	cmpl	$0xe, %esi
    00000019: 	jbe	.Ltmp59 # Offset: 25
    0000001f: 	movl	%edx, %esi
    00000021: 	movq	%rdi, %rax
    00000024: 	pxor	%xmm0, %xmm0
    00000028: 	shrl	$0x4, %esi
    0000002b: 	subl	$0x1, %esi
    0000002e: 	shlq	$0x4, %rsi
    00000032: 	leaq	0x10(%rdi,%rsi), %rsi
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp60:
    00000040: 	movdqu	(%rax), %xmm2
    00000044: 	addq	$0x10, %rax
    00000048: 	paddb	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rsi
    0000004f: 	jne	.Ltmp60 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%edx, %edi
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x10, %edi
    0000005f: 	paddb	%xmm1, %xmm0
    00000063: 	pxor	%xmm1, %xmm1
    00000067: 	movl	%edi, %esi
    00000069: 	psadbw	%xmm1, %xmm0
    0000006d: 	movd	%xmm0, %eax
    00000071: 	cmpl	%edi, %edx
    00000073: 	je	.Ltmp61 # Offset: 115
.Ltmp63:
    00000079: 	movl	%edx, %r8d
    0000007c: 	subl	%edi, %r8d
    0000007f: 	leal	-0x1(%r8), %r9d
    00000083: 	cmpl	$0x6, %r9d
    00000087: 	jbe	.Ltmp62 # Offset: 135
    00000089: 	movq	(%rcx,%rdi), %xmm1
    0000008e: 	pxor	%xmm0, %xmm0
    00000092: 	movdqa	%xmm1, %xmm3
    00000096: 	psadbw	%xmm0, %xmm3
    0000009a: 	movq	%xmm3, %rdi
    0000009f: 	addl	%edi, %eax
    000000a1: 	movl	%r8d, %edi
    000000a4: 	andl	$-0x8, %edi
    000000a7: 	addl	%edi, %esi
    000000a9: 	cmpl	%edi, %r8d
    000000ac: 	je	.Ltmp58 # Offset: 172
.Ltmp62:
    000000ae: 	movslq	%esi, %rdi
    000000b1: 	addb	(%rcx,%rdi), %al
    000000b4: 	leal	0x1(%rsi), %edi
    000000b7: 	cmpl	%edi, %edx
    000000b9: 	jle	.Ltmp58 # Offset: 185
    000000bb: 	movslq	%edi, %rdi
    000000be: 	addb	(%rcx,%rdi), %al
    000000c1: 	leal	0x2(%rsi), %edi
    000000c4: 	cmpl	%edi, %edx
    000000c6: 	jle	.Ltmp58 # Offset: 198
    000000c8: 	movslq	%edi, %rdi
    000000cb: 	addb	(%rcx,%rdi), %al
    000000ce: 	leal	0x3(%rsi), %edi
    000000d1: 	cmpl	%edi, %edx
    000000d3: 	jle	.Ltmp58 # Offset: 211
    000000d5: 	movslq	%edi, %rdi
    000000d8: 	addb	(%rcx,%rdi), %al
    000000db: 	leal	0x4(%rsi), %edi
    000000de: 	cmpl	%edi, %edx
    000000e0: 	jle	.Ltmp58 # Offset: 224
    000000e2: 	movslq	%edi, %rdi
    000000e5: 	addb	(%rcx,%rdi), %al
    000000e8: 	leal	0x5(%rsi), %edi
    000000eb: 	cmpl	%edi, %edx
    000000ed: 	jle	.Ltmp58 # Offset: 237
    000000ef: 	movslq	%edi, %rdi
    000000f2: 	addl	$0x6, %esi
    000000f5: 	addb	(%rcx,%rdi), %al
    000000f8: 	cmpl	%esi, %edx
    000000fa: 	jle	.Ltmp58 # Offset: 250
    000000fc: 	movslq	%esi, %rsi
    000000ff: 	addb	(%rcx,%rsi), %al
.Ltmp58:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp59:
    00000108: 	xorl	%edi, %edi
    0000010a: 	xorl	%esi, %esi
    0000010c: 	jmp	.Ltmp63 # Offset: 268
.Ltmp61:
    00000111: 	retq # Offset: 273
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_goto_loop_optIhET_PKS0_iS0_"

Binary Function "_Z19test_for_loop_paramIhET_PKS0_iS0_" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x2590
  Size        : 0x10f
  MaxSize     : 0x110
  Offset      : 0x2590
  Section     : .text
  Orc Section : .local.text._Z19test_for_loop_paramIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp64 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0xe, %eax
    00000014: 	jbe	.Ltmp65 # Offset: 20
    0000001a: 	movl	%esi, %ecx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	pxor	%xmm0, %xmm0
    00000023: 	shrl	$0x4, %ecx
    00000026: 	subl	$0x1, %ecx
    00000029: 	shlq	$0x4, %rcx
    0000002d: 	leaq	0x10(%rdi,%rcx), %rcx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp66:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddb	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp66 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%edx, %esi
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x10, %esi
    00000057: 	paddb	%xmm1, %xmm0
    0000005b: 	pxor	%xmm1, %xmm1
    0000005f: 	movl	%esi, %ecx
    00000061: 	psadbw	%xmm1, %xmm0
    00000065: 	movd	%xmm0, %eax
    00000069: 	cmpl	%esi, %edx
    0000006b: 	je	.Ltmp67 # Offset: 107
.Ltmp70:
    00000071: 	movl	%edx, %r8d
    00000074: 	subl	%esi, %r8d
    00000077: 	leal	-0x1(%r8), %r9d
    0000007b: 	cmpl	$0x6, %r9d
    0000007f: 	jbe	.Ltmp68 # Offset: 127
    00000081: 	movq	(%rdi,%rsi), %xmm1
    00000086: 	pxor	%xmm0, %xmm0
    0000008a: 	movdqa	%xmm1, %xmm3
    0000008e: 	psadbw	%xmm0, %xmm3
    00000092: 	movq	%xmm3, %rsi
    00000097: 	addl	%esi, %eax
    00000099: 	movl	%r8d, %esi
    0000009c: 	andl	$-0x8, %esi
    0000009f: 	addl	%esi, %ecx
    000000a1: 	cmpl	%esi, %r8d
    000000a4: 	je	.Ltmp69 # Offset: 164
.Ltmp68:
    000000a6: 	movslq	%ecx, %rsi
    000000a9: 	addb	(%rdi,%rsi), %al
    000000ac: 	leal	0x1(%rcx), %esi
    000000af: 	cmpl	%esi, %edx
    000000b1: 	jle	.Ltmp69 # Offset: 177
    000000b3: 	movslq	%esi, %rsi
    000000b6: 	addb	(%rdi,%rsi), %al
    000000b9: 	leal	0x2(%rcx), %esi
    000000bc: 	cmpl	%edx, %esi
    000000be: 	jge	.Ltmp69 # Offset: 190
    000000c0: 	movslq	%esi, %rsi
    000000c3: 	addb	(%rdi,%rsi), %al
    000000c6: 	leal	0x3(%rcx), %esi
    000000c9: 	cmpl	%esi, %edx
    000000cb: 	jle	.Ltmp69 # Offset: 203
    000000cd: 	movslq	%esi, %rsi
    000000d0: 	addb	(%rdi,%rsi), %al
    000000d3: 	leal	0x4(%rcx), %esi
    000000d6: 	cmpl	%esi, %edx
    000000d8: 	jle	.Ltmp69 # Offset: 216
    000000da: 	movslq	%esi, %rsi
    000000dd: 	addb	(%rdi,%rsi), %al
    000000e0: 	leal	0x5(%rcx), %esi
    000000e3: 	cmpl	%esi, %edx
    000000e5: 	jle	.Ltmp69 # Offset: 229
    000000e7: 	movslq	%esi, %rsi
    000000ea: 	addl	$0x6, %ecx
    000000ed: 	addb	(%rdi,%rsi), %al
    000000f0: 	cmpl	%ecx, %edx
    000000f2: 	jle	.Ltmp69 # Offset: 242
    000000f4: 	movslq	%ecx, %rcx
    000000f7: 	addb	(%rdi,%rcx), %al
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp64:
    00000100: 	xorl	%eax, %eax
.Ltmp69:
    00000102: 	retq # Offset: 258
.Ltmp65:
    00000103: 	xorl	%esi, %esi
    00000105: 	xorl	%ecx, %ecx
    00000107: 	xorl	%eax, %eax
    00000109: 	jmp	.Ltmp70 # Offset: 265
.Ltmp67:
    0000010e: 	retq # Offset: 270
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_for_loop_paramIhET_PKS0_iS0_"

Binary Function "_Z20test_for_loop_param2IhET_PKS0_iS0_" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0x26a0
  Size        : 0x10f
  MaxSize     : 0x110
  Offset      : 0x26a0
  Section     : .text
  Orc Section : .local.text._Z20test_for_loop_param2IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp71 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0xe, %eax
    00000014: 	jbe	.Ltmp72 # Offset: 20
    0000001a: 	movl	%esi, %ecx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	pxor	%xmm0, %xmm0
    00000023: 	shrl	$0x4, %ecx
    00000026: 	subl	$0x1, %ecx
    00000029: 	shlq	$0x4, %rcx
    0000002d: 	leaq	0x10(%rdi,%rcx), %rcx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp73:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddb	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp73 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%edx, %esi
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x10, %esi
    00000057: 	paddb	%xmm1, %xmm0
    0000005b: 	pxor	%xmm1, %xmm1
    0000005f: 	movl	%esi, %ecx
    00000061: 	psadbw	%xmm1, %xmm0
    00000065: 	movd	%xmm0, %eax
    00000069: 	cmpl	%esi, %edx
    0000006b: 	je	.Ltmp74 # Offset: 107
.Ltmp77:
    00000071: 	movl	%edx, %r8d
    00000074: 	subl	%esi, %r8d
    00000077: 	leal	-0x1(%r8), %r9d
    0000007b: 	cmpl	$0x6, %r9d
    0000007f: 	jbe	.Ltmp75 # Offset: 127
    00000081: 	movq	(%rdi,%rsi), %xmm1
    00000086: 	pxor	%xmm0, %xmm0
    0000008a: 	movdqa	%xmm1, %xmm3
    0000008e: 	psadbw	%xmm0, %xmm3
    00000092: 	movq	%xmm3, %rsi
    00000097: 	addl	%esi, %eax
    00000099: 	movl	%r8d, %esi
    0000009c: 	andl	$-0x8, %esi
    0000009f: 	addl	%esi, %ecx
    000000a1: 	cmpl	%esi, %r8d
    000000a4: 	je	.Ltmp76 # Offset: 164
.Ltmp75:
    000000a6: 	movslq	%ecx, %rsi
    000000a9: 	addb	(%rdi,%rsi), %al
    000000ac: 	leal	0x1(%rcx), %esi
    000000af: 	cmpl	%esi, %edx
    000000b1: 	jle	.Ltmp76 # Offset: 177
    000000b3: 	movslq	%esi, %rsi
    000000b6: 	addb	(%rdi,%rsi), %al
    000000b9: 	leal	0x2(%rcx), %esi
    000000bc: 	cmpl	%edx, %esi
    000000be: 	jge	.Ltmp76 # Offset: 190
    000000c0: 	movslq	%esi, %rsi
    000000c3: 	addb	(%rdi,%rsi), %al
    000000c6: 	leal	0x3(%rcx), %esi
    000000c9: 	cmpl	%esi, %edx
    000000cb: 	jle	.Ltmp76 # Offset: 203
    000000cd: 	movslq	%esi, %rsi
    000000d0: 	addb	(%rdi,%rsi), %al
    000000d3: 	leal	0x4(%rcx), %esi
    000000d6: 	cmpl	%esi, %edx
    000000d8: 	jle	.Ltmp76 # Offset: 216
    000000da: 	movslq	%esi, %rsi
    000000dd: 	addb	(%rdi,%rsi), %al
    000000e0: 	leal	0x5(%rcx), %esi
    000000e3: 	cmpl	%esi, %edx
    000000e5: 	jle	.Ltmp76 # Offset: 229
    000000e7: 	movslq	%esi, %rsi
    000000ea: 	addl	$0x6, %ecx
    000000ed: 	addb	(%rdi,%rsi), %al
    000000f0: 	cmpl	%ecx, %edx
    000000f2: 	jle	.Ltmp76 # Offset: 242
    000000f4: 	movslq	%ecx, %rcx
    000000f7: 	addb	(%rdi,%rcx), %al
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp71:
    00000100: 	xorl	%eax, %eax
.Ltmp76:
    00000102: 	retq # Offset: 258
.Ltmp72:
    00000103: 	xorl	%esi, %esi
    00000105: 	xorl	%ecx, %ecx
    00000107: 	xorl	%eax, %eax
    00000109: 	jmp	.Ltmp77 # Offset: 265
.Ltmp74:
    0000010e: 	retq # Offset: 270
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_for_loop_param2IhET_PKS0_iS0_"

Binary Function "_Z20test_for_loop_param3IhET_PKS0_iS0_" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0x27b0
  Size        : 0x10f
  MaxSize     : 0x110
  Offset      : 0x27b0
  Section     : .text
  Orc Section : .local.text._Z20test_for_loop_param3IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp78 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0xe, %eax
    00000014: 	jbe	.Ltmp79 # Offset: 20
    0000001a: 	movl	%esi, %ecx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	pxor	%xmm0, %xmm0
    00000023: 	shrl	$0x4, %ecx
    00000026: 	subl	$0x1, %ecx
    00000029: 	shlq	$0x4, %rcx
    0000002d: 	leaq	0x10(%rdi,%rcx), %rcx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp80:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddb	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp80 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%edx, %esi
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x10, %esi
    00000057: 	paddb	%xmm1, %xmm0
    0000005b: 	pxor	%xmm1, %xmm1
    0000005f: 	movl	%esi, %ecx
    00000061: 	psadbw	%xmm1, %xmm0
    00000065: 	movd	%xmm0, %eax
    00000069: 	cmpl	%esi, %edx
    0000006b: 	je	.Ltmp81 # Offset: 107
.Ltmp84:
    00000071: 	movl	%edx, %r8d
    00000074: 	subl	%esi, %r8d
    00000077: 	leal	-0x1(%r8), %r9d
    0000007b: 	cmpl	$0x6, %r9d
    0000007f: 	jbe	.Ltmp82 # Offset: 127
    00000081: 	movq	(%rdi,%rsi), %xmm1
    00000086: 	pxor	%xmm0, %xmm0
    0000008a: 	movdqa	%xmm1, %xmm3
    0000008e: 	psadbw	%xmm0, %xmm3
    00000092: 	movq	%xmm3, %rsi
    00000097: 	addl	%esi, %eax
    00000099: 	movl	%r8d, %esi
    0000009c: 	andl	$-0x8, %esi
    0000009f: 	addl	%esi, %ecx
    000000a1: 	cmpl	%esi, %r8d
    000000a4: 	je	.Ltmp83 # Offset: 164
.Ltmp82:
    000000a6: 	movslq	%ecx, %rsi
    000000a9: 	addb	(%rdi,%rsi), %al
    000000ac: 	leal	0x1(%rcx), %esi
    000000af: 	cmpl	%esi, %edx
    000000b1: 	jle	.Ltmp83 # Offset: 177
    000000b3: 	movslq	%esi, %rsi
    000000b6: 	addb	(%rdi,%rsi), %al
    000000b9: 	leal	0x2(%rcx), %esi
    000000bc: 	cmpl	%edx, %esi
    000000be: 	jge	.Ltmp83 # Offset: 190
    000000c0: 	movslq	%esi, %rsi
    000000c3: 	addb	(%rdi,%rsi), %al
    000000c6: 	leal	0x3(%rcx), %esi
    000000c9: 	cmpl	%esi, %edx
    000000cb: 	jle	.Ltmp83 # Offset: 203
    000000cd: 	movslq	%esi, %rsi
    000000d0: 	addb	(%rdi,%rsi), %al
    000000d3: 	leal	0x4(%rcx), %esi
    000000d6: 	cmpl	%esi, %edx
    000000d8: 	jle	.Ltmp83 # Offset: 216
    000000da: 	movslq	%esi, %rsi
    000000dd: 	addb	(%rdi,%rsi), %al
    000000e0: 	leal	0x5(%rcx), %esi
    000000e3: 	cmpl	%esi, %edx
    000000e5: 	jle	.Ltmp83 # Offset: 229
    000000e7: 	movslq	%esi, %rsi
    000000ea: 	addl	$0x6, %ecx
    000000ed: 	addb	(%rdi,%rsi), %al
    000000f0: 	cmpl	%ecx, %edx
    000000f2: 	jle	.Ltmp83 # Offset: 242
    000000f4: 	movslq	%ecx, %rcx
    000000f7: 	addb	(%rdi,%rcx), %al
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp78:
    00000100: 	xorl	%eax, %eax
.Ltmp83:
    00000102: 	retq # Offset: 258
.Ltmp79:
    00000103: 	xorl	%esi, %esi
    00000105: 	xorl	%ecx, %ecx
    00000107: 	xorl	%eax, %eax
    00000109: 	jmp	.Ltmp84 # Offset: 265
.Ltmp81:
    0000010e: 	retq # Offset: 270
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_for_loop_param3IhET_PKS0_iS0_"

Binary Function "_Z21test_while_loop_paramIhET_PKS0_iS0_" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0x28c0
  Size        : 0x10f
  MaxSize     : 0x110
  Offset      : 0x28c0
  Section     : .text
  Orc Section : .local.text._Z21test_while_loop_paramIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp85 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0xe, %eax
    00000014: 	jbe	.Ltmp86 # Offset: 20
    0000001a: 	movl	%esi, %ecx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	pxor	%xmm0, %xmm0
    00000023: 	shrl	$0x4, %ecx
    00000026: 	subl	$0x1, %ecx
    00000029: 	shlq	$0x4, %rcx
    0000002d: 	leaq	0x10(%rdi,%rcx), %rcx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp87:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddb	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp87 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%edx, %esi
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x10, %esi
    00000057: 	paddb	%xmm1, %xmm0
    0000005b: 	pxor	%xmm1, %xmm1
    0000005f: 	movl	%esi, %ecx
    00000061: 	psadbw	%xmm1, %xmm0
    00000065: 	movd	%xmm0, %eax
    00000069: 	cmpl	%esi, %edx
    0000006b: 	je	.Ltmp88 # Offset: 107
.Ltmp91:
    00000071: 	movl	%edx, %r8d
    00000074: 	subl	%esi, %r8d
    00000077: 	leal	-0x1(%r8), %r9d
    0000007b: 	cmpl	$0x6, %r9d
    0000007f: 	jbe	.Ltmp89 # Offset: 127
    00000081: 	movq	(%rdi,%rsi), %xmm1
    00000086: 	pxor	%xmm0, %xmm0
    0000008a: 	movdqa	%xmm1, %xmm3
    0000008e: 	psadbw	%xmm0, %xmm3
    00000092: 	movq	%xmm3, %rsi
    00000097: 	addl	%esi, %eax
    00000099: 	movl	%r8d, %esi
    0000009c: 	andl	$-0x8, %esi
    0000009f: 	addl	%esi, %ecx
    000000a1: 	cmpl	%esi, %r8d
    000000a4: 	je	.Ltmp90 # Offset: 164
.Ltmp89:
    000000a6: 	movslq	%ecx, %rsi
    000000a9: 	addb	(%rdi,%rsi), %al
    000000ac: 	leal	0x1(%rcx), %esi
    000000af: 	cmpl	%esi, %edx
    000000b1: 	jle	.Ltmp90 # Offset: 177
    000000b3: 	movslq	%esi, %rsi
    000000b6: 	addb	(%rdi,%rsi), %al
    000000b9: 	leal	0x2(%rcx), %esi
    000000bc: 	cmpl	%edx, %esi
    000000be: 	jge	.Ltmp90 # Offset: 190
    000000c0: 	movslq	%esi, %rsi
    000000c3: 	addb	(%rdi,%rsi), %al
    000000c6: 	leal	0x3(%rcx), %esi
    000000c9: 	cmpl	%esi, %edx
    000000cb: 	jle	.Ltmp90 # Offset: 203
    000000cd: 	movslq	%esi, %rsi
    000000d0: 	addb	(%rdi,%rsi), %al
    000000d3: 	leal	0x4(%rcx), %esi
    000000d6: 	cmpl	%esi, %edx
    000000d8: 	jle	.Ltmp90 # Offset: 216
    000000da: 	movslq	%esi, %rsi
    000000dd: 	addb	(%rdi,%rsi), %al
    000000e0: 	leal	0x5(%rcx), %esi
    000000e3: 	cmpl	%esi, %edx
    000000e5: 	jle	.Ltmp90 # Offset: 229
    000000e7: 	movslq	%esi, %rsi
    000000ea: 	addl	$0x6, %ecx
    000000ed: 	addb	(%rdi,%rsi), %al
    000000f0: 	cmpl	%ecx, %edx
    000000f2: 	jle	.Ltmp90 # Offset: 242
    000000f4: 	movslq	%ecx, %rcx
    000000f7: 	addb	(%rdi,%rcx), %al
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp85:
    00000100: 	xorl	%eax, %eax
.Ltmp90:
    00000102: 	retq # Offset: 258
.Ltmp86:
    00000103: 	xorl	%esi, %esi
    00000105: 	xorl	%ecx, %ecx
    00000107: 	xorl	%eax, %eax
    00000109: 	jmp	.Ltmp91 # Offset: 265
.Ltmp88:
    0000010e: 	retq # Offset: 270
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_while_loop_paramIhET_PKS0_iS0_"

Binary Function "_Z22test_while_loop_param2IhET_PKS0_iS0_" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0x29d0
  Size        : 0x10f
  MaxSize     : 0x110
  Offset      : 0x29d0
  Section     : .text
  Orc Section : .local.text._Z22test_while_loop_param2IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp92 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0xe, %eax
    00000014: 	jbe	.Ltmp93 # Offset: 20
    0000001a: 	movl	%esi, %ecx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	pxor	%xmm0, %xmm0
    00000023: 	shrl	$0x4, %ecx
    00000026: 	subl	$0x1, %ecx
    00000029: 	shlq	$0x4, %rcx
    0000002d: 	leaq	0x10(%rdi,%rcx), %rcx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp94:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddb	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp94 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%edx, %esi
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x10, %esi
    00000057: 	paddb	%xmm1, %xmm0
    0000005b: 	pxor	%xmm1, %xmm1
    0000005f: 	movl	%esi, %ecx
    00000061: 	psadbw	%xmm1, %xmm0
    00000065: 	movd	%xmm0, %eax
    00000069: 	cmpl	%esi, %edx
    0000006b: 	je	.Ltmp95 # Offset: 107
.Ltmp98:
    00000071: 	movl	%edx, %r8d
    00000074: 	subl	%esi, %r8d
    00000077: 	leal	-0x1(%r8), %r9d
    0000007b: 	cmpl	$0x6, %r9d
    0000007f: 	jbe	.Ltmp96 # Offset: 127
    00000081: 	movq	(%rdi,%rsi), %xmm1
    00000086: 	pxor	%xmm0, %xmm0
    0000008a: 	movdqa	%xmm1, %xmm3
    0000008e: 	psadbw	%xmm0, %xmm3
    00000092: 	movq	%xmm3, %rsi
    00000097: 	addl	%esi, %eax
    00000099: 	movl	%r8d, %esi
    0000009c: 	andl	$-0x8, %esi
    0000009f: 	addl	%esi, %ecx
    000000a1: 	cmpl	%esi, %r8d
    000000a4: 	je	.Ltmp97 # Offset: 164
.Ltmp96:
    000000a6: 	movslq	%ecx, %rsi
    000000a9: 	addb	(%rdi,%rsi), %al
    000000ac: 	leal	0x1(%rcx), %esi
    000000af: 	cmpl	%esi, %edx
    000000b1: 	jle	.Ltmp97 # Offset: 177
    000000b3: 	movslq	%esi, %rsi
    000000b6: 	addb	(%rdi,%rsi), %al
    000000b9: 	leal	0x2(%rcx), %esi
    000000bc: 	cmpl	%edx, %esi
    000000be: 	jge	.Ltmp97 # Offset: 190
    000000c0: 	movslq	%esi, %rsi
    000000c3: 	addb	(%rdi,%rsi), %al
    000000c6: 	leal	0x3(%rcx), %esi
    000000c9: 	cmpl	%esi, %edx
    000000cb: 	jle	.Ltmp97 # Offset: 203
    000000cd: 	movslq	%esi, %rsi
    000000d0: 	addb	(%rdi,%rsi), %al
    000000d3: 	leal	0x4(%rcx), %esi
    000000d6: 	cmpl	%esi, %edx
    000000d8: 	jle	.Ltmp97 # Offset: 216
    000000da: 	movslq	%esi, %rsi
    000000dd: 	addb	(%rdi,%rsi), %al
    000000e0: 	leal	0x5(%rcx), %esi
    000000e3: 	cmpl	%esi, %edx
    000000e5: 	jle	.Ltmp97 # Offset: 229
    000000e7: 	movslq	%esi, %rsi
    000000ea: 	addl	$0x6, %ecx
    000000ed: 	addb	(%rdi,%rsi), %al
    000000f0: 	cmpl	%ecx, %edx
    000000f2: 	jle	.Ltmp97 # Offset: 242
    000000f4: 	movslq	%ecx, %rcx
    000000f7: 	addb	(%rdi,%rcx), %al
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp92:
    00000100: 	xorl	%eax, %eax
.Ltmp97:
    00000102: 	retq # Offset: 258
.Ltmp93:
    00000103: 	xorl	%esi, %esi
    00000105: 	xorl	%ecx, %ecx
    00000107: 	xorl	%eax, %eax
    00000109: 	jmp	.Ltmp98 # Offset: 265
.Ltmp95:
    0000010e: 	retq # Offset: 270
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_while_loop_param2IhET_PKS0_iS0_"

Binary Function "_Z22test_while_loop_param3IhET_PKS0_iS0_" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0x2ae0
  Size        : 0x10f
  MaxSize     : 0x110
  Offset      : 0x2ae0
  Section     : .text
  Orc Section : .local.text._Z22test_while_loop_param3IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp99 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0xe, %eax
    00000014: 	jbe	.Ltmp100 # Offset: 20
    0000001a: 	movl	%esi, %ecx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	pxor	%xmm0, %xmm0
    00000023: 	shrl	$0x4, %ecx
    00000026: 	subl	$0x1, %ecx
    00000029: 	shlq	$0x4, %rcx
    0000002d: 	leaq	0x10(%rdi,%rcx), %rcx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp101:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddb	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp101 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%edx, %esi
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x10, %esi
    00000057: 	paddb	%xmm1, %xmm0
    0000005b: 	pxor	%xmm1, %xmm1
    0000005f: 	movl	%esi, %ecx
    00000061: 	psadbw	%xmm1, %xmm0
    00000065: 	movd	%xmm0, %eax
    00000069: 	cmpl	%esi, %edx
    0000006b: 	je	.Ltmp102 # Offset: 107
.Ltmp105:
    00000071: 	movl	%edx, %r8d
    00000074: 	subl	%esi, %r8d
    00000077: 	leal	-0x1(%r8), %r9d
    0000007b: 	cmpl	$0x6, %r9d
    0000007f: 	jbe	.Ltmp103 # Offset: 127
    00000081: 	movq	(%rdi,%rsi), %xmm1
    00000086: 	pxor	%xmm0, %xmm0
    0000008a: 	movdqa	%xmm1, %xmm3
    0000008e: 	psadbw	%xmm0, %xmm3
    00000092: 	movq	%xmm3, %rsi
    00000097: 	addl	%esi, %eax
    00000099: 	movl	%r8d, %esi
    0000009c: 	andl	$-0x8, %esi
    0000009f: 	addl	%esi, %ecx
    000000a1: 	cmpl	%esi, %r8d
    000000a4: 	je	.Ltmp104 # Offset: 164
.Ltmp103:
    000000a6: 	movslq	%ecx, %rsi
    000000a9: 	addb	(%rdi,%rsi), %al
    000000ac: 	leal	0x1(%rcx), %esi
    000000af: 	cmpl	%esi, %edx
    000000b1: 	jle	.Ltmp104 # Offset: 177
    000000b3: 	movslq	%esi, %rsi
    000000b6: 	addb	(%rdi,%rsi), %al
    000000b9: 	leal	0x2(%rcx), %esi
    000000bc: 	cmpl	%edx, %esi
    000000be: 	jge	.Ltmp104 # Offset: 190
    000000c0: 	movslq	%esi, %rsi
    000000c3: 	addb	(%rdi,%rsi), %al
    000000c6: 	leal	0x3(%rcx), %esi
    000000c9: 	cmpl	%esi, %edx
    000000cb: 	jle	.Ltmp104 # Offset: 203
    000000cd: 	movslq	%esi, %rsi
    000000d0: 	addb	(%rdi,%rsi), %al
    000000d3: 	leal	0x4(%rcx), %esi
    000000d6: 	cmpl	%esi, %edx
    000000d8: 	jle	.Ltmp104 # Offset: 216
    000000da: 	movslq	%esi, %rsi
    000000dd: 	addb	(%rdi,%rsi), %al
    000000e0: 	leal	0x5(%rcx), %esi
    000000e3: 	cmpl	%esi, %edx
    000000e5: 	jle	.Ltmp104 # Offset: 229
    000000e7: 	movslq	%esi, %rsi
    000000ea: 	addl	$0x6, %ecx
    000000ed: 	addb	(%rdi,%rsi), %al
    000000f0: 	cmpl	%ecx, %edx
    000000f2: 	jle	.Ltmp104 # Offset: 242
    000000f4: 	movslq	%ecx, %rcx
    000000f7: 	addb	(%rdi,%rcx), %al
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp99:
    00000100: 	xorl	%eax, %eax
.Ltmp104:
    00000102: 	retq # Offset: 258
.Ltmp100:
    00000103: 	xorl	%esi, %esi
    00000105: 	xorl	%ecx, %ecx
    00000107: 	xorl	%eax, %eax
    00000109: 	jmp	.Ltmp105 # Offset: 265
.Ltmp102:
    0000010e: 	retq # Offset: 270
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_while_loop_param3IhET_PKS0_iS0_"

Binary Function "_Z18test_do_loop_paramIhET_PKS0_iS0_" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0x2bf0
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x2bf0
  Section     : .text
  Orc Section : .local.text._Z18test_do_loop_paramIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp106 # Offset: 13
    00000013: 	leal	-0x1(%rsi), %esi
    00000016: 	cmpl	$0xe, %esi
    00000019: 	jbe	.Ltmp107 # Offset: 25
    0000001f: 	movl	%edx, %esi
    00000021: 	movq	%rdi, %rax
    00000024: 	pxor	%xmm0, %xmm0
    00000028: 	shrl	$0x4, %esi
    0000002b: 	subl	$0x1, %esi
    0000002e: 	shlq	$0x4, %rsi
    00000032: 	leaq	0x10(%rdi,%rsi), %rsi
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp108:
    00000040: 	movdqu	(%rax), %xmm2
    00000044: 	addq	$0x10, %rax
    00000048: 	paddb	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rsi
    0000004f: 	jne	.Ltmp108 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%edx, %edi
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x10, %edi
    0000005f: 	paddb	%xmm1, %xmm0
    00000063: 	pxor	%xmm1, %xmm1
    00000067: 	movl	%edi, %esi
    00000069: 	psadbw	%xmm1, %xmm0
    0000006d: 	movd	%xmm0, %eax
    00000071: 	cmpl	%edi, %edx
    00000073: 	je	.Ltmp109 # Offset: 115
.Ltmp111:
    00000079: 	movl	%edx, %r8d
    0000007c: 	subl	%edi, %r8d
    0000007f: 	leal	-0x1(%r8), %r9d
    00000083: 	cmpl	$0x6, %r9d
    00000087: 	jbe	.Ltmp110 # Offset: 135
    00000089: 	movq	(%rcx,%rdi), %xmm1
    0000008e: 	pxor	%xmm0, %xmm0
    00000092: 	movdqa	%xmm1, %xmm3
    00000096: 	psadbw	%xmm0, %xmm3
    0000009a: 	movq	%xmm3, %rdi
    0000009f: 	addl	%edi, %eax
    000000a1: 	movl	%r8d, %edi
    000000a4: 	andl	$-0x8, %edi
    000000a7: 	addl	%edi, %esi
    000000a9: 	cmpl	%edi, %r8d
    000000ac: 	je	.Ltmp106 # Offset: 172
.Ltmp110:
    000000ae: 	movslq	%esi, %rdi
    000000b1: 	addb	(%rcx,%rdi), %al
    000000b4: 	leal	0x1(%rsi), %edi
    000000b7: 	cmpl	%edi, %edx
    000000b9: 	jle	.Ltmp106 # Offset: 185
    000000bb: 	movslq	%edi, %rdi
    000000be: 	addb	(%rcx,%rdi), %al
    000000c1: 	leal	0x2(%rsi), %edi
    000000c4: 	cmpl	%edi, %edx
    000000c6: 	jle	.Ltmp106 # Offset: 198
    000000c8: 	movslq	%edi, %rdi
    000000cb: 	addb	(%rcx,%rdi), %al
    000000ce: 	leal	0x3(%rsi), %edi
    000000d1: 	cmpl	%edi, %edx
    000000d3: 	jle	.Ltmp106 # Offset: 211
    000000d5: 	movslq	%edi, %rdi
    000000d8: 	addb	(%rcx,%rdi), %al
    000000db: 	leal	0x4(%rsi), %edi
    000000de: 	cmpl	%edi, %edx
    000000e0: 	jle	.Ltmp106 # Offset: 224
    000000e2: 	movslq	%edi, %rdi
    000000e5: 	addb	(%rcx,%rdi), %al
    000000e8: 	leal	0x5(%rsi), %edi
    000000eb: 	cmpl	%edi, %edx
    000000ed: 	jle	.Ltmp106 # Offset: 237
    000000ef: 	movslq	%edi, %rdi
    000000f2: 	addl	$0x6, %esi
    000000f5: 	addb	(%rcx,%rdi), %al
    000000f8: 	cmpl	%esi, %edx
    000000fa: 	jle	.Ltmp106 # Offset: 250
    000000fc: 	movslq	%esi, %rsi
    000000ff: 	addb	(%rcx,%rsi), %al
.Ltmp106:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp107:
    00000108: 	xorl	%edi, %edi
    0000010a: 	xorl	%esi, %esi
    0000010c: 	jmp	.Ltmp111 # Offset: 268
.Ltmp109:
    00000111: 	retq # Offset: 273
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_do_loop_paramIhET_PKS0_iS0_"

Binary Function "_Z19test_do_loop_param2IhET_PKS0_iS0_" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0x2d10
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x2d10
  Section     : .text
  Orc Section : .local.text._Z19test_do_loop_param2IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp112 # Offset: 13
    00000013: 	leal	-0x1(%rsi), %esi
    00000016: 	cmpl	$0xe, %esi
    00000019: 	jbe	.Ltmp113 # Offset: 25
    0000001f: 	movl	%edx, %esi
    00000021: 	movq	%rdi, %rax
    00000024: 	pxor	%xmm0, %xmm0
    00000028: 	shrl	$0x4, %esi
    0000002b: 	subl	$0x1, %esi
    0000002e: 	shlq	$0x4, %rsi
    00000032: 	leaq	0x10(%rdi,%rsi), %rsi
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp114:
    00000040: 	movdqu	(%rax), %xmm2
    00000044: 	addq	$0x10, %rax
    00000048: 	paddb	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rsi
    0000004f: 	jne	.Ltmp114 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%edx, %edi
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x10, %edi
    0000005f: 	paddb	%xmm1, %xmm0
    00000063: 	pxor	%xmm1, %xmm1
    00000067: 	movl	%edi, %esi
    00000069: 	psadbw	%xmm1, %xmm0
    0000006d: 	movd	%xmm0, %eax
    00000071: 	cmpl	%edi, %edx
    00000073: 	je	.Ltmp115 # Offset: 115
.Ltmp117:
    00000079: 	movl	%edx, %r8d
    0000007c: 	subl	%edi, %r8d
    0000007f: 	leal	-0x1(%r8), %r9d
    00000083: 	cmpl	$0x6, %r9d
    00000087: 	jbe	.Ltmp116 # Offset: 135
    00000089: 	movq	(%rcx,%rdi), %xmm1
    0000008e: 	pxor	%xmm0, %xmm0
    00000092: 	movdqa	%xmm1, %xmm3
    00000096: 	psadbw	%xmm0, %xmm3
    0000009a: 	movq	%xmm3, %rdi
    0000009f: 	addl	%edi, %eax
    000000a1: 	movl	%r8d, %edi
    000000a4: 	andl	$-0x8, %edi
    000000a7: 	addl	%edi, %esi
    000000a9: 	cmpl	%edi, %r8d
    000000ac: 	je	.Ltmp112 # Offset: 172
.Ltmp116:
    000000ae: 	movslq	%esi, %rdi
    000000b1: 	addb	(%rcx,%rdi), %al
    000000b4: 	leal	0x1(%rsi), %edi
    000000b7: 	cmpl	%edi, %edx
    000000b9: 	jle	.Ltmp112 # Offset: 185
    000000bb: 	movslq	%edi, %rdi
    000000be: 	addb	(%rcx,%rdi), %al
    000000c1: 	leal	0x2(%rsi), %edi
    000000c4: 	cmpl	%edi, %edx
    000000c6: 	jle	.Ltmp112 # Offset: 198
    000000c8: 	movslq	%edi, %rdi
    000000cb: 	addb	(%rcx,%rdi), %al
    000000ce: 	leal	0x3(%rsi), %edi
    000000d1: 	cmpl	%edi, %edx
    000000d3: 	jle	.Ltmp112 # Offset: 211
    000000d5: 	movslq	%edi, %rdi
    000000d8: 	addb	(%rcx,%rdi), %al
    000000db: 	leal	0x4(%rsi), %edi
    000000de: 	cmpl	%edi, %edx
    000000e0: 	jle	.Ltmp112 # Offset: 224
    000000e2: 	movslq	%edi, %rdi
    000000e5: 	addb	(%rcx,%rdi), %al
    000000e8: 	leal	0x5(%rsi), %edi
    000000eb: 	cmpl	%edi, %edx
    000000ed: 	jle	.Ltmp112 # Offset: 237
    000000ef: 	movslq	%edi, %rdi
    000000f2: 	addl	$0x6, %esi
    000000f5: 	addb	(%rcx,%rdi), %al
    000000f8: 	cmpl	%esi, %edx
    000000fa: 	jle	.Ltmp112 # Offset: 250
    000000fc: 	movslq	%esi, %rsi
    000000ff: 	addb	(%rcx,%rsi), %al
.Ltmp112:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp113:
    00000108: 	xorl	%edi, %edi
    0000010a: 	xorl	%esi, %esi
    0000010c: 	jmp	.Ltmp117 # Offset: 268
.Ltmp115:
    00000111: 	retq # Offset: 273
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_do_loop_param2IhET_PKS0_iS0_"

Binary Function "_Z19test_do_loop_param3IhET_PKS0_iS0_" after disassembly {
  Number      : 50
  State       : disassembled
  Address     : 0x2e30
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x2e30
  Section     : .text
  Orc Section : .local.text._Z19test_do_loop_param3IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp118 # Offset: 13
    00000013: 	leal	-0x1(%rsi), %esi
    00000016: 	cmpl	$0xe, %esi
    00000019: 	jbe	.Ltmp119 # Offset: 25
    0000001f: 	movl	%edx, %esi
    00000021: 	movq	%rdi, %rax
    00000024: 	pxor	%xmm0, %xmm0
    00000028: 	shrl	$0x4, %esi
    0000002b: 	subl	$0x1, %esi
    0000002e: 	shlq	$0x4, %rsi
    00000032: 	leaq	0x10(%rdi,%rsi), %rsi
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp120:
    00000040: 	movdqu	(%rax), %xmm2
    00000044: 	addq	$0x10, %rax
    00000048: 	paddb	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rsi
    0000004f: 	jne	.Ltmp120 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%edx, %edi
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x10, %edi
    0000005f: 	paddb	%xmm1, %xmm0
    00000063: 	pxor	%xmm1, %xmm1
    00000067: 	movl	%edi, %esi
    00000069: 	psadbw	%xmm1, %xmm0
    0000006d: 	movd	%xmm0, %eax
    00000071: 	cmpl	%edi, %edx
    00000073: 	je	.Ltmp121 # Offset: 115
.Ltmp123:
    00000079: 	movl	%edx, %r8d
    0000007c: 	subl	%edi, %r8d
    0000007f: 	leal	-0x1(%r8), %r9d
    00000083: 	cmpl	$0x6, %r9d
    00000087: 	jbe	.Ltmp122 # Offset: 135
    00000089: 	movq	(%rcx,%rdi), %xmm1
    0000008e: 	pxor	%xmm0, %xmm0
    00000092: 	movdqa	%xmm1, %xmm3
    00000096: 	psadbw	%xmm0, %xmm3
    0000009a: 	movq	%xmm3, %rdi
    0000009f: 	addl	%edi, %eax
    000000a1: 	movl	%r8d, %edi
    000000a4: 	andl	$-0x8, %edi
    000000a7: 	addl	%edi, %esi
    000000a9: 	cmpl	%edi, %r8d
    000000ac: 	je	.Ltmp118 # Offset: 172
.Ltmp122:
    000000ae: 	movslq	%esi, %rdi
    000000b1: 	addb	(%rcx,%rdi), %al
    000000b4: 	leal	0x1(%rsi), %edi
    000000b7: 	cmpl	%edi, %edx
    000000b9: 	jle	.Ltmp118 # Offset: 185
    000000bb: 	movslq	%edi, %rdi
    000000be: 	addb	(%rcx,%rdi), %al
    000000c1: 	leal	0x2(%rsi), %edi
    000000c4: 	cmpl	%edi, %edx
    000000c6: 	jle	.Ltmp118 # Offset: 198
    000000c8: 	movslq	%edi, %rdi
    000000cb: 	addb	(%rcx,%rdi), %al
    000000ce: 	leal	0x3(%rsi), %edi
    000000d1: 	cmpl	%edi, %edx
    000000d3: 	jle	.Ltmp118 # Offset: 211
    000000d5: 	movslq	%edi, %rdi
    000000d8: 	addb	(%rcx,%rdi), %al
    000000db: 	leal	0x4(%rsi), %edi
    000000de: 	cmpl	%edi, %edx
    000000e0: 	jle	.Ltmp118 # Offset: 224
    000000e2: 	movslq	%edi, %rdi
    000000e5: 	addb	(%rcx,%rdi), %al
    000000e8: 	leal	0x5(%rsi), %edi
    000000eb: 	cmpl	%edi, %edx
    000000ed: 	jle	.Ltmp118 # Offset: 237
    000000ef: 	movslq	%edi, %rdi
    000000f2: 	addl	$0x6, %esi
    000000f5: 	addb	(%rcx,%rdi), %al
    000000f8: 	cmpl	%esi, %edx
    000000fa: 	jle	.Ltmp118 # Offset: 250
    000000fc: 	movslq	%esi, %rsi
    000000ff: 	addb	(%rcx,%rsi), %al
.Ltmp118:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp119:
    00000108: 	xorl	%edi, %edi
    0000010a: 	xorl	%esi, %esi
    0000010c: 	jmp	.Ltmp123 # Offset: 268
.Ltmp121:
    00000111: 	retq # Offset: 273
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_do_loop_param3IhET_PKS0_iS0_"

Binary Function "_Z20test_goto_loop_paramIhET_PKS0_iS0_" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0x2f50
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x2f50
  Section     : .text
  Orc Section : .local.text._Z20test_goto_loop_paramIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp124 # Offset: 13
    00000013: 	leal	-0x1(%rsi), %esi
    00000016: 	cmpl	$0xe, %esi
    00000019: 	jbe	.Ltmp125 # Offset: 25
    0000001f: 	movl	%edx, %esi
    00000021: 	movq	%rdi, %rax
    00000024: 	pxor	%xmm0, %xmm0
    00000028: 	shrl	$0x4, %esi
    0000002b: 	subl	$0x1, %esi
    0000002e: 	shlq	$0x4, %rsi
    00000032: 	leaq	0x10(%rdi,%rsi), %rsi
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp126:
    00000040: 	movdqu	(%rax), %xmm2
    00000044: 	addq	$0x10, %rax
    00000048: 	paddb	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rsi
    0000004f: 	jne	.Ltmp126 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%edx, %edi
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x10, %edi
    0000005f: 	paddb	%xmm1, %xmm0
    00000063: 	pxor	%xmm1, %xmm1
    00000067: 	movl	%edi, %esi
    00000069: 	psadbw	%xmm1, %xmm0
    0000006d: 	movd	%xmm0, %eax
    00000071: 	cmpl	%edi, %edx
    00000073: 	je	.Ltmp127 # Offset: 115
.Ltmp129:
    00000079: 	movl	%edx, %r8d
    0000007c: 	subl	%edi, %r8d
    0000007f: 	leal	-0x1(%r8), %r9d
    00000083: 	cmpl	$0x6, %r9d
    00000087: 	jbe	.Ltmp128 # Offset: 135
    00000089: 	movq	(%rcx,%rdi), %xmm1
    0000008e: 	pxor	%xmm0, %xmm0
    00000092: 	movdqa	%xmm1, %xmm3
    00000096: 	psadbw	%xmm0, %xmm3
    0000009a: 	movq	%xmm3, %rdi
    0000009f: 	addl	%edi, %eax
    000000a1: 	movl	%r8d, %edi
    000000a4: 	andl	$-0x8, %edi
    000000a7: 	addl	%edi, %esi
    000000a9: 	cmpl	%edi, %r8d
    000000ac: 	je	.Ltmp124 # Offset: 172
.Ltmp128:
    000000ae: 	movslq	%esi, %rdi
    000000b1: 	addb	(%rcx,%rdi), %al
    000000b4: 	leal	0x1(%rsi), %edi
    000000b7: 	cmpl	%edi, %edx
    000000b9: 	jle	.Ltmp124 # Offset: 185
    000000bb: 	movslq	%edi, %rdi
    000000be: 	addb	(%rcx,%rdi), %al
    000000c1: 	leal	0x2(%rsi), %edi
    000000c4: 	cmpl	%edi, %edx
    000000c6: 	jle	.Ltmp124 # Offset: 198
    000000c8: 	movslq	%edi, %rdi
    000000cb: 	addb	(%rcx,%rdi), %al
    000000ce: 	leal	0x3(%rsi), %edi
    000000d1: 	cmpl	%edi, %edx
    000000d3: 	jle	.Ltmp124 # Offset: 211
    000000d5: 	movslq	%edi, %rdi
    000000d8: 	addb	(%rcx,%rdi), %al
    000000db: 	leal	0x4(%rsi), %edi
    000000de: 	cmpl	%edi, %edx
    000000e0: 	jle	.Ltmp124 # Offset: 224
    000000e2: 	movslq	%edi, %rdi
    000000e5: 	addb	(%rcx,%rdi), %al
    000000e8: 	leal	0x5(%rsi), %edi
    000000eb: 	cmpl	%edi, %edx
    000000ed: 	jle	.Ltmp124 # Offset: 237
    000000ef: 	movslq	%edi, %rdi
    000000f2: 	addl	$0x6, %esi
    000000f5: 	addb	(%rcx,%rdi), %al
    000000f8: 	cmpl	%esi, %edx
    000000fa: 	jle	.Ltmp124 # Offset: 250
    000000fc: 	movslq	%esi, %rsi
    000000ff: 	addb	(%rcx,%rsi), %al
.Ltmp124:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp125:
    00000108: 	xorl	%edi, %edi
    0000010a: 	xorl	%esi, %esi
    0000010c: 	jmp	.Ltmp129 # Offset: 268
.Ltmp127:
    00000111: 	retq # Offset: 273
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_goto_loop_paramIhET_PKS0_iS0_"

Binary Function "_Z21test_goto_loop_param2IhET_PKS0_iS0_" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0x3070
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x3070
  Section     : .text
  Orc Section : .local.text._Z21test_goto_loop_param2IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp130 # Offset: 13
    00000013: 	leal	-0x1(%rsi), %esi
    00000016: 	cmpl	$0xe, %esi
    00000019: 	jbe	.Ltmp131 # Offset: 25
    0000001f: 	movl	%edx, %esi
    00000021: 	movq	%rdi, %rax
    00000024: 	pxor	%xmm0, %xmm0
    00000028: 	shrl	$0x4, %esi
    0000002b: 	subl	$0x1, %esi
    0000002e: 	shlq	$0x4, %rsi
    00000032: 	leaq	0x10(%rdi,%rsi), %rsi
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp132:
    00000040: 	movdqu	(%rax), %xmm2
    00000044: 	addq	$0x10, %rax
    00000048: 	paddb	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rsi
    0000004f: 	jne	.Ltmp132 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%edx, %edi
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x10, %edi
    0000005f: 	paddb	%xmm1, %xmm0
    00000063: 	pxor	%xmm1, %xmm1
    00000067: 	movl	%edi, %esi
    00000069: 	psadbw	%xmm1, %xmm0
    0000006d: 	movd	%xmm0, %eax
    00000071: 	cmpl	%edi, %edx
    00000073: 	je	.Ltmp133 # Offset: 115
.Ltmp135:
    00000079: 	movl	%edx, %r8d
    0000007c: 	subl	%edi, %r8d
    0000007f: 	leal	-0x1(%r8), %r9d
    00000083: 	cmpl	$0x6, %r9d
    00000087: 	jbe	.Ltmp134 # Offset: 135
    00000089: 	movq	(%rcx,%rdi), %xmm1
    0000008e: 	pxor	%xmm0, %xmm0
    00000092: 	movdqa	%xmm1, %xmm3
    00000096: 	psadbw	%xmm0, %xmm3
    0000009a: 	movq	%xmm3, %rdi
    0000009f: 	addl	%edi, %eax
    000000a1: 	movl	%r8d, %edi
    000000a4: 	andl	$-0x8, %edi
    000000a7: 	addl	%edi, %esi
    000000a9: 	cmpl	%edi, %r8d
    000000ac: 	je	.Ltmp130 # Offset: 172
.Ltmp134:
    000000ae: 	movslq	%esi, %rdi
    000000b1: 	addb	(%rcx,%rdi), %al
    000000b4: 	leal	0x1(%rsi), %edi
    000000b7: 	cmpl	%edi, %edx
    000000b9: 	jle	.Ltmp130 # Offset: 185
    000000bb: 	movslq	%edi, %rdi
    000000be: 	addb	(%rcx,%rdi), %al
    000000c1: 	leal	0x2(%rsi), %edi
    000000c4: 	cmpl	%edi, %edx
    000000c6: 	jle	.Ltmp130 # Offset: 198
    000000c8: 	movslq	%edi, %rdi
    000000cb: 	addb	(%rcx,%rdi), %al
    000000ce: 	leal	0x3(%rsi), %edi
    000000d1: 	cmpl	%edi, %edx
    000000d3: 	jle	.Ltmp130 # Offset: 211
    000000d5: 	movslq	%edi, %rdi
    000000d8: 	addb	(%rcx,%rdi), %al
    000000db: 	leal	0x4(%rsi), %edi
    000000de: 	cmpl	%edi, %edx
    000000e0: 	jle	.Ltmp130 # Offset: 224
    000000e2: 	movslq	%edi, %rdi
    000000e5: 	addb	(%rcx,%rdi), %al
    000000e8: 	leal	0x5(%rsi), %edi
    000000eb: 	cmpl	%edi, %edx
    000000ed: 	jle	.Ltmp130 # Offset: 237
    000000ef: 	movslq	%edi, %rdi
    000000f2: 	addl	$0x6, %esi
    000000f5: 	addb	(%rcx,%rdi), %al
    000000f8: 	cmpl	%esi, %edx
    000000fa: 	jle	.Ltmp130 # Offset: 250
    000000fc: 	movslq	%esi, %rsi
    000000ff: 	addb	(%rcx,%rsi), %al
.Ltmp130:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp131:
    00000108: 	xorl	%edi, %edi
    0000010a: 	xorl	%esi, %esi
    0000010c: 	jmp	.Ltmp135 # Offset: 268
.Ltmp133:
    00000111: 	retq # Offset: 273
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_goto_loop_param2IhET_PKS0_iS0_"

Binary Function "_Z21test_goto_loop_param3IhET_PKS0_iS0_" after disassembly {
  Number      : 53
  State       : disassembled
  Address     : 0x3190
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x3190
  Section     : .text
  Orc Section : .local.text._Z21test_goto_loop_param3IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp136 # Offset: 13
    00000013: 	leal	-0x1(%rsi), %esi
    00000016: 	cmpl	$0xe, %esi
    00000019: 	jbe	.Ltmp137 # Offset: 25
    0000001f: 	movl	%edx, %esi
    00000021: 	movq	%rdi, %rax
    00000024: 	pxor	%xmm0, %xmm0
    00000028: 	shrl	$0x4, %esi
    0000002b: 	subl	$0x1, %esi
    0000002e: 	shlq	$0x4, %rsi
    00000032: 	leaq	0x10(%rdi,%rsi), %rsi
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp138:
    00000040: 	movdqu	(%rax), %xmm2
    00000044: 	addq	$0x10, %rax
    00000048: 	paddb	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rsi
    0000004f: 	jne	.Ltmp138 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%edx, %edi
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x10, %edi
    0000005f: 	paddb	%xmm1, %xmm0
    00000063: 	pxor	%xmm1, %xmm1
    00000067: 	movl	%edi, %esi
    00000069: 	psadbw	%xmm1, %xmm0
    0000006d: 	movd	%xmm0, %eax
    00000071: 	cmpl	%edi, %edx
    00000073: 	je	.Ltmp139 # Offset: 115
.Ltmp141:
    00000079: 	movl	%edx, %r8d
    0000007c: 	subl	%edi, %r8d
    0000007f: 	leal	-0x1(%r8), %r9d
    00000083: 	cmpl	$0x6, %r9d
    00000087: 	jbe	.Ltmp140 # Offset: 135
    00000089: 	movq	(%rcx,%rdi), %xmm1
    0000008e: 	pxor	%xmm0, %xmm0
    00000092: 	movdqa	%xmm1, %xmm3
    00000096: 	psadbw	%xmm0, %xmm3
    0000009a: 	movq	%xmm3, %rdi
    0000009f: 	addl	%edi, %eax
    000000a1: 	movl	%r8d, %edi
    000000a4: 	andl	$-0x8, %edi
    000000a7: 	addl	%edi, %esi
    000000a9: 	cmpl	%edi, %r8d
    000000ac: 	je	.Ltmp136 # Offset: 172
.Ltmp140:
    000000ae: 	movslq	%esi, %rdi
    000000b1: 	addb	(%rcx,%rdi), %al
    000000b4: 	leal	0x1(%rsi), %edi
    000000b7: 	cmpl	%edi, %edx
    000000b9: 	jle	.Ltmp136 # Offset: 185
    000000bb: 	movslq	%edi, %rdi
    000000be: 	addb	(%rcx,%rdi), %al
    000000c1: 	leal	0x2(%rsi), %edi
    000000c4: 	cmpl	%edi, %edx
    000000c6: 	jle	.Ltmp136 # Offset: 198
    000000c8: 	movslq	%edi, %rdi
    000000cb: 	addb	(%rcx,%rdi), %al
    000000ce: 	leal	0x3(%rsi), %edi
    000000d1: 	cmpl	%edi, %edx
    000000d3: 	jle	.Ltmp136 # Offset: 211
    000000d5: 	movslq	%edi, %rdi
    000000d8: 	addb	(%rcx,%rdi), %al
    000000db: 	leal	0x4(%rsi), %edi
    000000de: 	cmpl	%edi, %edx
    000000e0: 	jle	.Ltmp136 # Offset: 224
    000000e2: 	movslq	%edi, %rdi
    000000e5: 	addb	(%rcx,%rdi), %al
    000000e8: 	leal	0x5(%rsi), %edi
    000000eb: 	cmpl	%edi, %edx
    000000ed: 	jle	.Ltmp136 # Offset: 237
    000000ef: 	movslq	%edi, %rdi
    000000f2: 	addl	$0x6, %esi
    000000f5: 	addb	(%rcx,%rdi), %al
    000000f8: 	cmpl	%esi, %edx
    000000fa: 	jle	.Ltmp136 # Offset: 250
    000000fc: 	movslq	%esi, %rsi
    000000ff: 	addb	(%rcx,%rsi), %al
.Ltmp136:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp137:
    00000108: 	xorl	%edi, %edi
    0000010a: 	xorl	%esi, %esi
    0000010c: 	jmp	.Ltmp141 # Offset: 268
.Ltmp139:
    00000111: 	retq # Offset: 273
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_goto_loop_param3IhET_PKS0_iS0_"

Binary Function "_Z20test_for_loop_globalIhET_PKS0_iS0_" after disassembly {
  Number      : 54
  State       : disassembled
  Address     : 0x32b0
  Size        : 0x10f
  MaxSize     : 0x110
  Offset      : 0x32b0
  Section     : .text
  Orc Section : .local.text._Z20test_for_loop_globalIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp142 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0xe, %eax
    00000014: 	jbe	.Ltmp143 # Offset: 20
    0000001a: 	movl	%esi, %ecx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	pxor	%xmm0, %xmm0
    00000023: 	shrl	$0x4, %ecx
    00000026: 	subl	$0x1, %ecx
    00000029: 	shlq	$0x4, %rcx
    0000002d: 	leaq	0x10(%rdi,%rcx), %rcx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp144:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddb	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp144 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%edx, %esi
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x10, %esi
    00000057: 	paddb	%xmm1, %xmm0
    0000005b: 	pxor	%xmm1, %xmm1
    0000005f: 	movl	%esi, %ecx
    00000061: 	psadbw	%xmm1, %xmm0
    00000065: 	movd	%xmm0, %eax
    00000069: 	cmpl	%esi, %edx
    0000006b: 	je	.Ltmp145 # Offset: 107
.Ltmp148:
    00000071: 	movl	%edx, %r8d
    00000074: 	subl	%esi, %r8d
    00000077: 	leal	-0x1(%r8), %r9d
    0000007b: 	cmpl	$0x6, %r9d
    0000007f: 	jbe	.Ltmp146 # Offset: 127
    00000081: 	movq	(%rdi,%rsi), %xmm1
    00000086: 	pxor	%xmm0, %xmm0
    0000008a: 	movdqa	%xmm1, %xmm3
    0000008e: 	psadbw	%xmm0, %xmm3
    00000092: 	movq	%xmm3, %rsi
    00000097: 	addl	%esi, %eax
    00000099: 	movl	%r8d, %esi
    0000009c: 	andl	$-0x8, %esi
    0000009f: 	addl	%esi, %ecx
    000000a1: 	cmpl	%esi, %r8d
    000000a4: 	je	.Ltmp147 # Offset: 164
.Ltmp146:
    000000a6: 	movslq	%ecx, %rsi
    000000a9: 	addb	(%rdi,%rsi), %al
    000000ac: 	leal	0x1(%rcx), %esi
    000000af: 	cmpl	%esi, %edx
    000000b1: 	jle	.Ltmp147 # Offset: 177
    000000b3: 	movslq	%esi, %rsi
    000000b6: 	addb	(%rdi,%rsi), %al
    000000b9: 	leal	0x2(%rcx), %esi
    000000bc: 	cmpl	%edx, %esi
    000000be: 	jge	.Ltmp147 # Offset: 190
    000000c0: 	movslq	%esi, %rsi
    000000c3: 	addb	(%rdi,%rsi), %al
    000000c6: 	leal	0x3(%rcx), %esi
    000000c9: 	cmpl	%esi, %edx
    000000cb: 	jle	.Ltmp147 # Offset: 203
    000000cd: 	movslq	%esi, %rsi
    000000d0: 	addb	(%rdi,%rsi), %al
    000000d3: 	leal	0x4(%rcx), %esi
    000000d6: 	cmpl	%esi, %edx
    000000d8: 	jle	.Ltmp147 # Offset: 216
    000000da: 	movslq	%esi, %rsi
    000000dd: 	addb	(%rdi,%rsi), %al
    000000e0: 	leal	0x5(%rcx), %esi
    000000e3: 	cmpl	%esi, %edx
    000000e5: 	jle	.Ltmp147 # Offset: 229
    000000e7: 	movslq	%esi, %rsi
    000000ea: 	addl	$0x6, %ecx
    000000ed: 	addb	(%rdi,%rsi), %al
    000000f0: 	cmpl	%ecx, %edx
    000000f2: 	jle	.Ltmp147 # Offset: 242
    000000f4: 	movslq	%ecx, %rcx
    000000f7: 	addb	(%rdi,%rcx), %al
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp142:
    00000100: 	xorl	%eax, %eax
.Ltmp147:
    00000102: 	retq # Offset: 258
.Ltmp143:
    00000103: 	xorl	%esi, %esi
    00000105: 	xorl	%ecx, %ecx
    00000107: 	xorl	%eax, %eax
    00000109: 	jmp	.Ltmp148 # Offset: 265
.Ltmp145:
    0000010e: 	retq # Offset: 270
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_for_loop_globalIhET_PKS0_iS0_"

Binary Function "_Z21test_for_loop_global2IhET_PKS0_iS0_" after disassembly {
  Number      : 55
  State       : disassembled
  Address     : 0x33c0
  Size        : 0x10f
  MaxSize     : 0x110
  Offset      : 0x33c0
  Section     : .text
  Orc Section : .local.text._Z21test_for_loop_global2IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp149 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0xe, %eax
    00000014: 	jbe	.Ltmp150 # Offset: 20
    0000001a: 	movl	%esi, %ecx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	pxor	%xmm0, %xmm0
    00000023: 	shrl	$0x4, %ecx
    00000026: 	subl	$0x1, %ecx
    00000029: 	shlq	$0x4, %rcx
    0000002d: 	leaq	0x10(%rdi,%rcx), %rcx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp151:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddb	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp151 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%edx, %esi
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x10, %esi
    00000057: 	paddb	%xmm1, %xmm0
    0000005b: 	pxor	%xmm1, %xmm1
    0000005f: 	movl	%esi, %ecx
    00000061: 	psadbw	%xmm1, %xmm0
    00000065: 	movd	%xmm0, %eax
    00000069: 	cmpl	%esi, %edx
    0000006b: 	je	.Ltmp152 # Offset: 107
.Ltmp155:
    00000071: 	movl	%edx, %r8d
    00000074: 	subl	%esi, %r8d
    00000077: 	leal	-0x1(%r8), %r9d
    0000007b: 	cmpl	$0x6, %r9d
    0000007f: 	jbe	.Ltmp153 # Offset: 127
    00000081: 	movq	(%rdi,%rsi), %xmm1
    00000086: 	pxor	%xmm0, %xmm0
    0000008a: 	movdqa	%xmm1, %xmm3
    0000008e: 	psadbw	%xmm0, %xmm3
    00000092: 	movq	%xmm3, %rsi
    00000097: 	addl	%esi, %eax
    00000099: 	movl	%r8d, %esi
    0000009c: 	andl	$-0x8, %esi
    0000009f: 	addl	%esi, %ecx
    000000a1: 	cmpl	%esi, %r8d
    000000a4: 	je	.Ltmp154 # Offset: 164
.Ltmp153:
    000000a6: 	movslq	%ecx, %rsi
    000000a9: 	addb	(%rdi,%rsi), %al
    000000ac: 	leal	0x1(%rcx), %esi
    000000af: 	cmpl	%esi, %edx
    000000b1: 	jle	.Ltmp154 # Offset: 177
    000000b3: 	movslq	%esi, %rsi
    000000b6: 	addb	(%rdi,%rsi), %al
    000000b9: 	leal	0x2(%rcx), %esi
    000000bc: 	cmpl	%edx, %esi
    000000be: 	jge	.Ltmp154 # Offset: 190
    000000c0: 	movslq	%esi, %rsi
    000000c3: 	addb	(%rdi,%rsi), %al
    000000c6: 	leal	0x3(%rcx), %esi
    000000c9: 	cmpl	%esi, %edx
    000000cb: 	jle	.Ltmp154 # Offset: 203
    000000cd: 	movslq	%esi, %rsi
    000000d0: 	addb	(%rdi,%rsi), %al
    000000d3: 	leal	0x4(%rcx), %esi
    000000d6: 	cmpl	%esi, %edx
    000000d8: 	jle	.Ltmp154 # Offset: 216
    000000da: 	movslq	%esi, %rsi
    000000dd: 	addb	(%rdi,%rsi), %al
    000000e0: 	leal	0x5(%rcx), %esi
    000000e3: 	cmpl	%esi, %edx
    000000e5: 	jle	.Ltmp154 # Offset: 229
    000000e7: 	movslq	%esi, %rsi
    000000ea: 	addl	$0x6, %ecx
    000000ed: 	addb	(%rdi,%rsi), %al
    000000f0: 	cmpl	%ecx, %edx
    000000f2: 	jle	.Ltmp154 # Offset: 242
    000000f4: 	movslq	%ecx, %rcx
    000000f7: 	addb	(%rdi,%rcx), %al
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp149:
    00000100: 	xorl	%eax, %eax
.Ltmp154:
    00000102: 	retq # Offset: 258
.Ltmp150:
    00000103: 	xorl	%esi, %esi
    00000105: 	xorl	%ecx, %ecx
    00000107: 	xorl	%eax, %eax
    00000109: 	jmp	.Ltmp155 # Offset: 265
.Ltmp152:
    0000010e: 	retq # Offset: 270
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_for_loop_global2IhET_PKS0_iS0_"

Binary Function "_Z21test_for_loop_global3IhET_PKS0_iS0_" after disassembly {
  Number      : 56
  State       : disassembled
  Address     : 0x34d0
  Size        : 0x10f
  MaxSize     : 0x110
  Offset      : 0x34d0
  Section     : .text
  Orc Section : .local.text._Z21test_for_loop_global3IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp156 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0xe, %eax
    00000014: 	jbe	.Ltmp157 # Offset: 20
    0000001a: 	movl	%esi, %ecx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	pxor	%xmm0, %xmm0
    00000023: 	shrl	$0x4, %ecx
    00000026: 	subl	$0x1, %ecx
    00000029: 	shlq	$0x4, %rcx
    0000002d: 	leaq	0x10(%rdi,%rcx), %rcx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp158:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddb	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp158 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%edx, %esi
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x10, %esi
    00000057: 	paddb	%xmm1, %xmm0
    0000005b: 	pxor	%xmm1, %xmm1
    0000005f: 	movl	%esi, %ecx
    00000061: 	psadbw	%xmm1, %xmm0
    00000065: 	movd	%xmm0, %eax
    00000069: 	cmpl	%esi, %edx
    0000006b: 	je	.Ltmp159 # Offset: 107
.Ltmp162:
    00000071: 	movl	%edx, %r8d
    00000074: 	subl	%esi, %r8d
    00000077: 	leal	-0x1(%r8), %r9d
    0000007b: 	cmpl	$0x6, %r9d
    0000007f: 	jbe	.Ltmp160 # Offset: 127
    00000081: 	movq	(%rdi,%rsi), %xmm1
    00000086: 	pxor	%xmm0, %xmm0
    0000008a: 	movdqa	%xmm1, %xmm3
    0000008e: 	psadbw	%xmm0, %xmm3
    00000092: 	movq	%xmm3, %rsi
    00000097: 	addl	%esi, %eax
    00000099: 	movl	%r8d, %esi
    0000009c: 	andl	$-0x8, %esi
    0000009f: 	addl	%esi, %ecx
    000000a1: 	cmpl	%esi, %r8d
    000000a4: 	je	.Ltmp161 # Offset: 164
.Ltmp160:
    000000a6: 	movslq	%ecx, %rsi
    000000a9: 	addb	(%rdi,%rsi), %al
    000000ac: 	leal	0x1(%rcx), %esi
    000000af: 	cmpl	%esi, %edx
    000000b1: 	jle	.Ltmp161 # Offset: 177
    000000b3: 	movslq	%esi, %rsi
    000000b6: 	addb	(%rdi,%rsi), %al
    000000b9: 	leal	0x2(%rcx), %esi
    000000bc: 	cmpl	%edx, %esi
    000000be: 	jge	.Ltmp161 # Offset: 190
    000000c0: 	movslq	%esi, %rsi
    000000c3: 	addb	(%rdi,%rsi), %al
    000000c6: 	leal	0x3(%rcx), %esi
    000000c9: 	cmpl	%esi, %edx
    000000cb: 	jle	.Ltmp161 # Offset: 203
    000000cd: 	movslq	%esi, %rsi
    000000d0: 	addb	(%rdi,%rsi), %al
    000000d3: 	leal	0x4(%rcx), %esi
    000000d6: 	cmpl	%esi, %edx
    000000d8: 	jle	.Ltmp161 # Offset: 216
    000000da: 	movslq	%esi, %rsi
    000000dd: 	addb	(%rdi,%rsi), %al
    000000e0: 	leal	0x5(%rcx), %esi
    000000e3: 	cmpl	%esi, %edx
    000000e5: 	jle	.Ltmp161 # Offset: 229
    000000e7: 	movslq	%esi, %rsi
    000000ea: 	addl	$0x6, %ecx
    000000ed: 	addb	(%rdi,%rsi), %al
    000000f0: 	cmpl	%ecx, %edx
    000000f2: 	jle	.Ltmp161 # Offset: 242
    000000f4: 	movslq	%ecx, %rcx
    000000f7: 	addb	(%rdi,%rcx), %al
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp156:
    00000100: 	xorl	%eax, %eax
.Ltmp161:
    00000102: 	retq # Offset: 258
.Ltmp157:
    00000103: 	xorl	%esi, %esi
    00000105: 	xorl	%ecx, %ecx
    00000107: 	xorl	%eax, %eax
    00000109: 	jmp	.Ltmp162 # Offset: 265
.Ltmp159:
    0000010e: 	retq # Offset: 270
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_for_loop_global3IhET_PKS0_iS0_"

Binary Function "_Z22test_while_loop_globalIhET_PKS0_iS0_" after disassembly {
  Number      : 57
  State       : disassembled
  Address     : 0x35e0
  Size        : 0x10f
  MaxSize     : 0x110
  Offset      : 0x35e0
  Section     : .text
  Orc Section : .local.text._Z22test_while_loop_globalIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp163 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0xe, %eax
    00000014: 	jbe	.Ltmp164 # Offset: 20
    0000001a: 	movl	%esi, %ecx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	pxor	%xmm0, %xmm0
    00000023: 	shrl	$0x4, %ecx
    00000026: 	subl	$0x1, %ecx
    00000029: 	shlq	$0x4, %rcx
    0000002d: 	leaq	0x10(%rdi,%rcx), %rcx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp165:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddb	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp165 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%edx, %esi
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x10, %esi
    00000057: 	paddb	%xmm1, %xmm0
    0000005b: 	pxor	%xmm1, %xmm1
    0000005f: 	movl	%esi, %ecx
    00000061: 	psadbw	%xmm1, %xmm0
    00000065: 	movd	%xmm0, %eax
    00000069: 	cmpl	%esi, %edx
    0000006b: 	je	.Ltmp166 # Offset: 107
.Ltmp169:
    00000071: 	movl	%edx, %r8d
    00000074: 	subl	%esi, %r8d
    00000077: 	leal	-0x1(%r8), %r9d
    0000007b: 	cmpl	$0x6, %r9d
    0000007f: 	jbe	.Ltmp167 # Offset: 127
    00000081: 	movq	(%rdi,%rsi), %xmm1
    00000086: 	pxor	%xmm0, %xmm0
    0000008a: 	movdqa	%xmm1, %xmm3
    0000008e: 	psadbw	%xmm0, %xmm3
    00000092: 	movq	%xmm3, %rsi
    00000097: 	addl	%esi, %eax
    00000099: 	movl	%r8d, %esi
    0000009c: 	andl	$-0x8, %esi
    0000009f: 	addl	%esi, %ecx
    000000a1: 	cmpl	%esi, %r8d
    000000a4: 	je	.Ltmp168 # Offset: 164
.Ltmp167:
    000000a6: 	movslq	%ecx, %rsi
    000000a9: 	addb	(%rdi,%rsi), %al
    000000ac: 	leal	0x1(%rcx), %esi
    000000af: 	cmpl	%esi, %edx
    000000b1: 	jle	.Ltmp168 # Offset: 177
    000000b3: 	movslq	%esi, %rsi
    000000b6: 	addb	(%rdi,%rsi), %al
    000000b9: 	leal	0x2(%rcx), %esi
    000000bc: 	cmpl	%edx, %esi
    000000be: 	jge	.Ltmp168 # Offset: 190
    000000c0: 	movslq	%esi, %rsi
    000000c3: 	addb	(%rdi,%rsi), %al
    000000c6: 	leal	0x3(%rcx), %esi
    000000c9: 	cmpl	%esi, %edx
    000000cb: 	jle	.Ltmp168 # Offset: 203
    000000cd: 	movslq	%esi, %rsi
    000000d0: 	addb	(%rdi,%rsi), %al
    000000d3: 	leal	0x4(%rcx), %esi
    000000d6: 	cmpl	%esi, %edx
    000000d8: 	jle	.Ltmp168 # Offset: 216
    000000da: 	movslq	%esi, %rsi
    000000dd: 	addb	(%rdi,%rsi), %al
    000000e0: 	leal	0x5(%rcx), %esi
    000000e3: 	cmpl	%esi, %edx
    000000e5: 	jle	.Ltmp168 # Offset: 229
    000000e7: 	movslq	%esi, %rsi
    000000ea: 	addl	$0x6, %ecx
    000000ed: 	addb	(%rdi,%rsi), %al
    000000f0: 	cmpl	%ecx, %edx
    000000f2: 	jle	.Ltmp168 # Offset: 242
    000000f4: 	movslq	%ecx, %rcx
    000000f7: 	addb	(%rdi,%rcx), %al
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp163:
    00000100: 	xorl	%eax, %eax
.Ltmp168:
    00000102: 	retq # Offset: 258
.Ltmp164:
    00000103: 	xorl	%esi, %esi
    00000105: 	xorl	%ecx, %ecx
    00000107: 	xorl	%eax, %eax
    00000109: 	jmp	.Ltmp169 # Offset: 265
.Ltmp166:
    0000010e: 	retq # Offset: 270
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_while_loop_globalIhET_PKS0_iS0_"

Binary Function "_Z23test_while_loop_global2IhET_PKS0_iS0_" after disassembly {
  Number      : 58
  State       : disassembled
  Address     : 0x36f0
  Size        : 0x10f
  MaxSize     : 0x110
  Offset      : 0x36f0
  Section     : .text
  Orc Section : .local.text._Z23test_while_loop_global2IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp170 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0xe, %eax
    00000014: 	jbe	.Ltmp171 # Offset: 20
    0000001a: 	movl	%esi, %ecx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	pxor	%xmm0, %xmm0
    00000023: 	shrl	$0x4, %ecx
    00000026: 	subl	$0x1, %ecx
    00000029: 	shlq	$0x4, %rcx
    0000002d: 	leaq	0x10(%rdi,%rcx), %rcx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp172:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddb	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp172 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%edx, %esi
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x10, %esi
    00000057: 	paddb	%xmm1, %xmm0
    0000005b: 	pxor	%xmm1, %xmm1
    0000005f: 	movl	%esi, %ecx
    00000061: 	psadbw	%xmm1, %xmm0
    00000065: 	movd	%xmm0, %eax
    00000069: 	cmpl	%esi, %edx
    0000006b: 	je	.Ltmp173 # Offset: 107
.Ltmp176:
    00000071: 	movl	%edx, %r8d
    00000074: 	subl	%esi, %r8d
    00000077: 	leal	-0x1(%r8), %r9d
    0000007b: 	cmpl	$0x6, %r9d
    0000007f: 	jbe	.Ltmp174 # Offset: 127
    00000081: 	movq	(%rdi,%rsi), %xmm1
    00000086: 	pxor	%xmm0, %xmm0
    0000008a: 	movdqa	%xmm1, %xmm3
    0000008e: 	psadbw	%xmm0, %xmm3
    00000092: 	movq	%xmm3, %rsi
    00000097: 	addl	%esi, %eax
    00000099: 	movl	%r8d, %esi
    0000009c: 	andl	$-0x8, %esi
    0000009f: 	addl	%esi, %ecx
    000000a1: 	cmpl	%esi, %r8d
    000000a4: 	je	.Ltmp175 # Offset: 164
.Ltmp174:
    000000a6: 	movslq	%ecx, %rsi
    000000a9: 	addb	(%rdi,%rsi), %al
    000000ac: 	leal	0x1(%rcx), %esi
    000000af: 	cmpl	%esi, %edx
    000000b1: 	jle	.Ltmp175 # Offset: 177
    000000b3: 	movslq	%esi, %rsi
    000000b6: 	addb	(%rdi,%rsi), %al
    000000b9: 	leal	0x2(%rcx), %esi
    000000bc: 	cmpl	%edx, %esi
    000000be: 	jge	.Ltmp175 # Offset: 190
    000000c0: 	movslq	%esi, %rsi
    000000c3: 	addb	(%rdi,%rsi), %al
    000000c6: 	leal	0x3(%rcx), %esi
    000000c9: 	cmpl	%esi, %edx
    000000cb: 	jle	.Ltmp175 # Offset: 203
    000000cd: 	movslq	%esi, %rsi
    000000d0: 	addb	(%rdi,%rsi), %al
    000000d3: 	leal	0x4(%rcx), %esi
    000000d6: 	cmpl	%esi, %edx
    000000d8: 	jle	.Ltmp175 # Offset: 216
    000000da: 	movslq	%esi, %rsi
    000000dd: 	addb	(%rdi,%rsi), %al
    000000e0: 	leal	0x5(%rcx), %esi
    000000e3: 	cmpl	%esi, %edx
    000000e5: 	jle	.Ltmp175 # Offset: 229
    000000e7: 	movslq	%esi, %rsi
    000000ea: 	addl	$0x6, %ecx
    000000ed: 	addb	(%rdi,%rsi), %al
    000000f0: 	cmpl	%ecx, %edx
    000000f2: 	jle	.Ltmp175 # Offset: 242
    000000f4: 	movslq	%ecx, %rcx
    000000f7: 	addb	(%rdi,%rcx), %al
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp170:
    00000100: 	xorl	%eax, %eax
.Ltmp175:
    00000102: 	retq # Offset: 258
.Ltmp171:
    00000103: 	xorl	%esi, %esi
    00000105: 	xorl	%ecx, %ecx
    00000107: 	xorl	%eax, %eax
    00000109: 	jmp	.Ltmp176 # Offset: 265
.Ltmp173:
    0000010e: 	retq # Offset: 270
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_while_loop_global2IhET_PKS0_iS0_"

Binary Function "_Z23test_while_loop_global3IhET_PKS0_iS0_" after disassembly {
  Number      : 59
  State       : disassembled
  Address     : 0x3800
  Size        : 0x10f
  MaxSize     : 0x110
  Offset      : 0x3800
  Section     : .text
  Orc Section : .local.text._Z23test_while_loop_global3IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp177 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0xe, %eax
    00000014: 	jbe	.Ltmp178 # Offset: 20
    0000001a: 	movl	%esi, %ecx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	pxor	%xmm0, %xmm0
    00000023: 	shrl	$0x4, %ecx
    00000026: 	subl	$0x1, %ecx
    00000029: 	shlq	$0x4, %rcx
    0000002d: 	leaq	0x10(%rdi,%rcx), %rcx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp179:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddb	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp179 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%edx, %esi
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x10, %esi
    00000057: 	paddb	%xmm1, %xmm0
    0000005b: 	pxor	%xmm1, %xmm1
    0000005f: 	movl	%esi, %ecx
    00000061: 	psadbw	%xmm1, %xmm0
    00000065: 	movd	%xmm0, %eax
    00000069: 	cmpl	%esi, %edx
    0000006b: 	je	.Ltmp180 # Offset: 107
.Ltmp183:
    00000071: 	movl	%edx, %r8d
    00000074: 	subl	%esi, %r8d
    00000077: 	leal	-0x1(%r8), %r9d
    0000007b: 	cmpl	$0x6, %r9d
    0000007f: 	jbe	.Ltmp181 # Offset: 127
    00000081: 	movq	(%rdi,%rsi), %xmm1
    00000086: 	pxor	%xmm0, %xmm0
    0000008a: 	movdqa	%xmm1, %xmm3
    0000008e: 	psadbw	%xmm0, %xmm3
    00000092: 	movq	%xmm3, %rsi
    00000097: 	addl	%esi, %eax
    00000099: 	movl	%r8d, %esi
    0000009c: 	andl	$-0x8, %esi
    0000009f: 	addl	%esi, %ecx
    000000a1: 	cmpl	%esi, %r8d
    000000a4: 	je	.Ltmp182 # Offset: 164
.Ltmp181:
    000000a6: 	movslq	%ecx, %rsi
    000000a9: 	addb	(%rdi,%rsi), %al
    000000ac: 	leal	0x1(%rcx), %esi
    000000af: 	cmpl	%esi, %edx
    000000b1: 	jle	.Ltmp182 # Offset: 177
    000000b3: 	movslq	%esi, %rsi
    000000b6: 	addb	(%rdi,%rsi), %al
    000000b9: 	leal	0x2(%rcx), %esi
    000000bc: 	cmpl	%edx, %esi
    000000be: 	jge	.Ltmp182 # Offset: 190
    000000c0: 	movslq	%esi, %rsi
    000000c3: 	addb	(%rdi,%rsi), %al
    000000c6: 	leal	0x3(%rcx), %esi
    000000c9: 	cmpl	%esi, %edx
    000000cb: 	jle	.Ltmp182 # Offset: 203
    000000cd: 	movslq	%esi, %rsi
    000000d0: 	addb	(%rdi,%rsi), %al
    000000d3: 	leal	0x4(%rcx), %esi
    000000d6: 	cmpl	%esi, %edx
    000000d8: 	jle	.Ltmp182 # Offset: 216
    000000da: 	movslq	%esi, %rsi
    000000dd: 	addb	(%rdi,%rsi), %al
    000000e0: 	leal	0x5(%rcx), %esi
    000000e3: 	cmpl	%esi, %edx
    000000e5: 	jle	.Ltmp182 # Offset: 229
    000000e7: 	movslq	%esi, %rsi
    000000ea: 	addl	$0x6, %ecx
    000000ed: 	addb	(%rdi,%rsi), %al
    000000f0: 	cmpl	%ecx, %edx
    000000f2: 	jle	.Ltmp182 # Offset: 242
    000000f4: 	movslq	%ecx, %rcx
    000000f7: 	addb	(%rdi,%rcx), %al
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp177:
    00000100: 	xorl	%eax, %eax
.Ltmp182:
    00000102: 	retq # Offset: 258
.Ltmp178:
    00000103: 	xorl	%esi, %esi
    00000105: 	xorl	%ecx, %ecx
    00000107: 	xorl	%eax, %eax
    00000109: 	jmp	.Ltmp183 # Offset: 265
.Ltmp180:
    0000010e: 	retq # Offset: 270
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_while_loop_global3IhET_PKS0_iS0_"

Binary Function "_Z19test_do_loop_globalIhET_PKS0_iS0_" after disassembly {
  Number      : 60
  State       : disassembled
  Address     : 0x3910
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x3910
  Section     : .text
  Orc Section : .local.text._Z19test_do_loop_globalIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp184 # Offset: 13
    00000013: 	leal	-0x1(%rsi), %esi
    00000016: 	cmpl	$0xe, %esi
    00000019: 	jbe	.Ltmp185 # Offset: 25
    0000001f: 	movl	%edx, %esi
    00000021: 	movq	%rdi, %rax
    00000024: 	pxor	%xmm0, %xmm0
    00000028: 	shrl	$0x4, %esi
    0000002b: 	subl	$0x1, %esi
    0000002e: 	shlq	$0x4, %rsi
    00000032: 	leaq	0x10(%rdi,%rsi), %rsi
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp186:
    00000040: 	movdqu	(%rax), %xmm2
    00000044: 	addq	$0x10, %rax
    00000048: 	paddb	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rsi
    0000004f: 	jne	.Ltmp186 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%edx, %edi
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x10, %edi
    0000005f: 	paddb	%xmm1, %xmm0
    00000063: 	pxor	%xmm1, %xmm1
    00000067: 	movl	%edi, %esi
    00000069: 	psadbw	%xmm1, %xmm0
    0000006d: 	movd	%xmm0, %eax
    00000071: 	cmpl	%edi, %edx
    00000073: 	je	.Ltmp187 # Offset: 115
.Ltmp189:
    00000079: 	movl	%edx, %r8d
    0000007c: 	subl	%edi, %r8d
    0000007f: 	leal	-0x1(%r8), %r9d
    00000083: 	cmpl	$0x6, %r9d
    00000087: 	jbe	.Ltmp188 # Offset: 135
    00000089: 	movq	(%rcx,%rdi), %xmm1
    0000008e: 	pxor	%xmm0, %xmm0
    00000092: 	movdqa	%xmm1, %xmm3
    00000096: 	psadbw	%xmm0, %xmm3
    0000009a: 	movq	%xmm3, %rdi
    0000009f: 	addl	%edi, %eax
    000000a1: 	movl	%r8d, %edi
    000000a4: 	andl	$-0x8, %edi
    000000a7: 	addl	%edi, %esi
    000000a9: 	cmpl	%edi, %r8d
    000000ac: 	je	.Ltmp184 # Offset: 172
.Ltmp188:
    000000ae: 	movslq	%esi, %rdi
    000000b1: 	addb	(%rcx,%rdi), %al
    000000b4: 	leal	0x1(%rsi), %edi
    000000b7: 	cmpl	%edi, %edx
    000000b9: 	jle	.Ltmp184 # Offset: 185
    000000bb: 	movslq	%edi, %rdi
    000000be: 	addb	(%rcx,%rdi), %al
    000000c1: 	leal	0x2(%rsi), %edi
    000000c4: 	cmpl	%edi, %edx
    000000c6: 	jle	.Ltmp184 # Offset: 198
    000000c8: 	movslq	%edi, %rdi
    000000cb: 	addb	(%rcx,%rdi), %al
    000000ce: 	leal	0x3(%rsi), %edi
    000000d1: 	cmpl	%edi, %edx
    000000d3: 	jle	.Ltmp184 # Offset: 211
    000000d5: 	movslq	%edi, %rdi
    000000d8: 	addb	(%rcx,%rdi), %al
    000000db: 	leal	0x4(%rsi), %edi
    000000de: 	cmpl	%edi, %edx
    000000e0: 	jle	.Ltmp184 # Offset: 224
    000000e2: 	movslq	%edi, %rdi
    000000e5: 	addb	(%rcx,%rdi), %al
    000000e8: 	leal	0x5(%rsi), %edi
    000000eb: 	cmpl	%edi, %edx
    000000ed: 	jle	.Ltmp184 # Offset: 237
    000000ef: 	movslq	%edi, %rdi
    000000f2: 	addl	$0x6, %esi
    000000f5: 	addb	(%rcx,%rdi), %al
    000000f8: 	cmpl	%esi, %edx
    000000fa: 	jle	.Ltmp184 # Offset: 250
    000000fc: 	movslq	%esi, %rsi
    000000ff: 	addb	(%rcx,%rsi), %al
.Ltmp184:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp185:
    00000108: 	xorl	%edi, %edi
    0000010a: 	xorl	%esi, %esi
    0000010c: 	jmp	.Ltmp189 # Offset: 268
.Ltmp187:
    00000111: 	retq # Offset: 273
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_do_loop_globalIhET_PKS0_iS0_"

Binary Function "_Z20test_do_loop_global2IhET_PKS0_iS0_" after disassembly {
  Number      : 61
  State       : disassembled
  Address     : 0x3a30
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x3a30
  Section     : .text
  Orc Section : .local.text._Z20test_do_loop_global2IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp190 # Offset: 13
    00000013: 	leal	-0x1(%rsi), %esi
    00000016: 	cmpl	$0xe, %esi
    00000019: 	jbe	.Ltmp191 # Offset: 25
    0000001f: 	movl	%edx, %esi
    00000021: 	movq	%rdi, %rax
    00000024: 	pxor	%xmm0, %xmm0
    00000028: 	shrl	$0x4, %esi
    0000002b: 	subl	$0x1, %esi
    0000002e: 	shlq	$0x4, %rsi
    00000032: 	leaq	0x10(%rdi,%rsi), %rsi
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp192:
    00000040: 	movdqu	(%rax), %xmm2
    00000044: 	addq	$0x10, %rax
    00000048: 	paddb	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rsi
    0000004f: 	jne	.Ltmp192 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%edx, %edi
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x10, %edi
    0000005f: 	paddb	%xmm1, %xmm0
    00000063: 	pxor	%xmm1, %xmm1
    00000067: 	movl	%edi, %esi
    00000069: 	psadbw	%xmm1, %xmm0
    0000006d: 	movd	%xmm0, %eax
    00000071: 	cmpl	%edi, %edx
    00000073: 	je	.Ltmp193 # Offset: 115
.Ltmp195:
    00000079: 	movl	%edx, %r8d
    0000007c: 	subl	%edi, %r8d
    0000007f: 	leal	-0x1(%r8), %r9d
    00000083: 	cmpl	$0x6, %r9d
    00000087: 	jbe	.Ltmp194 # Offset: 135
    00000089: 	movq	(%rcx,%rdi), %xmm1
    0000008e: 	pxor	%xmm0, %xmm0
    00000092: 	movdqa	%xmm1, %xmm3
    00000096: 	psadbw	%xmm0, %xmm3
    0000009a: 	movq	%xmm3, %rdi
    0000009f: 	addl	%edi, %eax
    000000a1: 	movl	%r8d, %edi
    000000a4: 	andl	$-0x8, %edi
    000000a7: 	addl	%edi, %esi
    000000a9: 	cmpl	%edi, %r8d
    000000ac: 	je	.Ltmp190 # Offset: 172
.Ltmp194:
    000000ae: 	movslq	%esi, %rdi
    000000b1: 	addb	(%rcx,%rdi), %al
    000000b4: 	leal	0x1(%rsi), %edi
    000000b7: 	cmpl	%edi, %edx
    000000b9: 	jle	.Ltmp190 # Offset: 185
    000000bb: 	movslq	%edi, %rdi
    000000be: 	addb	(%rcx,%rdi), %al
    000000c1: 	leal	0x2(%rsi), %edi
    000000c4: 	cmpl	%edi, %edx
    000000c6: 	jle	.Ltmp190 # Offset: 198
    000000c8: 	movslq	%edi, %rdi
    000000cb: 	addb	(%rcx,%rdi), %al
    000000ce: 	leal	0x3(%rsi), %edi
    000000d1: 	cmpl	%edi, %edx
    000000d3: 	jle	.Ltmp190 # Offset: 211
    000000d5: 	movslq	%edi, %rdi
    000000d8: 	addb	(%rcx,%rdi), %al
    000000db: 	leal	0x4(%rsi), %edi
    000000de: 	cmpl	%edi, %edx
    000000e0: 	jle	.Ltmp190 # Offset: 224
    000000e2: 	movslq	%edi, %rdi
    000000e5: 	addb	(%rcx,%rdi), %al
    000000e8: 	leal	0x5(%rsi), %edi
    000000eb: 	cmpl	%edi, %edx
    000000ed: 	jle	.Ltmp190 # Offset: 237
    000000ef: 	movslq	%edi, %rdi
    000000f2: 	addl	$0x6, %esi
    000000f5: 	addb	(%rcx,%rdi), %al
    000000f8: 	cmpl	%esi, %edx
    000000fa: 	jle	.Ltmp190 # Offset: 250
    000000fc: 	movslq	%esi, %rsi
    000000ff: 	addb	(%rcx,%rsi), %al
.Ltmp190:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp191:
    00000108: 	xorl	%edi, %edi
    0000010a: 	xorl	%esi, %esi
    0000010c: 	jmp	.Ltmp195 # Offset: 268
.Ltmp193:
    00000111: 	retq # Offset: 273
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_do_loop_global2IhET_PKS0_iS0_"

Binary Function "_Z20test_do_loop_global3IhET_PKS0_iS0_" after disassembly {
  Number      : 62
  State       : disassembled
  Address     : 0x3b50
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x3b50
  Section     : .text
  Orc Section : .local.text._Z20test_do_loop_global3IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp196 # Offset: 13
    00000013: 	leal	-0x1(%rsi), %esi
    00000016: 	cmpl	$0xe, %esi
    00000019: 	jbe	.Ltmp197 # Offset: 25
    0000001f: 	movl	%edx, %esi
    00000021: 	movq	%rdi, %rax
    00000024: 	pxor	%xmm0, %xmm0
    00000028: 	shrl	$0x4, %esi
    0000002b: 	subl	$0x1, %esi
    0000002e: 	shlq	$0x4, %rsi
    00000032: 	leaq	0x10(%rdi,%rsi), %rsi
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp198:
    00000040: 	movdqu	(%rax), %xmm2
    00000044: 	addq	$0x10, %rax
    00000048: 	paddb	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rsi
    0000004f: 	jne	.Ltmp198 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%edx, %edi
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x10, %edi
    0000005f: 	paddb	%xmm1, %xmm0
    00000063: 	pxor	%xmm1, %xmm1
    00000067: 	movl	%edi, %esi
    00000069: 	psadbw	%xmm1, %xmm0
    0000006d: 	movd	%xmm0, %eax
    00000071: 	cmpl	%edi, %edx
    00000073: 	je	.Ltmp199 # Offset: 115
.Ltmp201:
    00000079: 	movl	%edx, %r8d
    0000007c: 	subl	%edi, %r8d
    0000007f: 	leal	-0x1(%r8), %r9d
    00000083: 	cmpl	$0x6, %r9d
    00000087: 	jbe	.Ltmp200 # Offset: 135
    00000089: 	movq	(%rcx,%rdi), %xmm1
    0000008e: 	pxor	%xmm0, %xmm0
    00000092: 	movdqa	%xmm1, %xmm3
    00000096: 	psadbw	%xmm0, %xmm3
    0000009a: 	movq	%xmm3, %rdi
    0000009f: 	addl	%edi, %eax
    000000a1: 	movl	%r8d, %edi
    000000a4: 	andl	$-0x8, %edi
    000000a7: 	addl	%edi, %esi
    000000a9: 	cmpl	%edi, %r8d
    000000ac: 	je	.Ltmp196 # Offset: 172
.Ltmp200:
    000000ae: 	movslq	%esi, %rdi
    000000b1: 	addb	(%rcx,%rdi), %al
    000000b4: 	leal	0x1(%rsi), %edi
    000000b7: 	cmpl	%edi, %edx
    000000b9: 	jle	.Ltmp196 # Offset: 185
    000000bb: 	movslq	%edi, %rdi
    000000be: 	addb	(%rcx,%rdi), %al
    000000c1: 	leal	0x2(%rsi), %edi
    000000c4: 	cmpl	%edi, %edx
    000000c6: 	jle	.Ltmp196 # Offset: 198
    000000c8: 	movslq	%edi, %rdi
    000000cb: 	addb	(%rcx,%rdi), %al
    000000ce: 	leal	0x3(%rsi), %edi
    000000d1: 	cmpl	%edi, %edx
    000000d3: 	jle	.Ltmp196 # Offset: 211
    000000d5: 	movslq	%edi, %rdi
    000000d8: 	addb	(%rcx,%rdi), %al
    000000db: 	leal	0x4(%rsi), %edi
    000000de: 	cmpl	%edi, %edx
    000000e0: 	jle	.Ltmp196 # Offset: 224
    000000e2: 	movslq	%edi, %rdi
    000000e5: 	addb	(%rcx,%rdi), %al
    000000e8: 	leal	0x5(%rsi), %edi
    000000eb: 	cmpl	%edi, %edx
    000000ed: 	jle	.Ltmp196 # Offset: 237
    000000ef: 	movslq	%edi, %rdi
    000000f2: 	addl	$0x6, %esi
    000000f5: 	addb	(%rcx,%rdi), %al
    000000f8: 	cmpl	%esi, %edx
    000000fa: 	jle	.Ltmp196 # Offset: 250
    000000fc: 	movslq	%esi, %rsi
    000000ff: 	addb	(%rcx,%rsi), %al
.Ltmp196:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp197:
    00000108: 	xorl	%edi, %edi
    0000010a: 	xorl	%esi, %esi
    0000010c: 	jmp	.Ltmp201 # Offset: 268
.Ltmp199:
    00000111: 	retq # Offset: 273
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_do_loop_global3IhET_PKS0_iS0_"

Binary Function "_Z21test_goto_loop_globalIhET_PKS0_iS0_" after disassembly {
  Number      : 63
  State       : disassembled
  Address     : 0x3c70
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x3c70
  Section     : .text
  Orc Section : .local.text._Z21test_goto_loop_globalIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp202 # Offset: 13
    00000013: 	leal	-0x1(%rsi), %esi
    00000016: 	cmpl	$0xe, %esi
    00000019: 	jbe	.Ltmp203 # Offset: 25
    0000001f: 	movl	%edx, %esi
    00000021: 	movq	%rdi, %rax
    00000024: 	pxor	%xmm0, %xmm0
    00000028: 	shrl	$0x4, %esi
    0000002b: 	subl	$0x1, %esi
    0000002e: 	shlq	$0x4, %rsi
    00000032: 	leaq	0x10(%rdi,%rsi), %rsi
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp204:
    00000040: 	movdqu	(%rax), %xmm2
    00000044: 	addq	$0x10, %rax
    00000048: 	paddb	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rsi
    0000004f: 	jne	.Ltmp204 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%edx, %edi
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x10, %edi
    0000005f: 	paddb	%xmm1, %xmm0
    00000063: 	pxor	%xmm1, %xmm1
    00000067: 	movl	%edi, %esi
    00000069: 	psadbw	%xmm1, %xmm0
    0000006d: 	movd	%xmm0, %eax
    00000071: 	cmpl	%edi, %edx
    00000073: 	je	.Ltmp205 # Offset: 115
.Ltmp207:
    00000079: 	movl	%edx, %r8d
    0000007c: 	subl	%edi, %r8d
    0000007f: 	leal	-0x1(%r8), %r9d
    00000083: 	cmpl	$0x6, %r9d
    00000087: 	jbe	.Ltmp206 # Offset: 135
    00000089: 	movq	(%rcx,%rdi), %xmm1
    0000008e: 	pxor	%xmm0, %xmm0
    00000092: 	movdqa	%xmm1, %xmm3
    00000096: 	psadbw	%xmm0, %xmm3
    0000009a: 	movq	%xmm3, %rdi
    0000009f: 	addl	%edi, %eax
    000000a1: 	movl	%r8d, %edi
    000000a4: 	andl	$-0x8, %edi
    000000a7: 	addl	%edi, %esi
    000000a9: 	cmpl	%edi, %r8d
    000000ac: 	je	.Ltmp202 # Offset: 172
.Ltmp206:
    000000ae: 	movslq	%esi, %rdi
    000000b1: 	addb	(%rcx,%rdi), %al
    000000b4: 	leal	0x1(%rsi), %edi
    000000b7: 	cmpl	%edi, %edx
    000000b9: 	jle	.Ltmp202 # Offset: 185
    000000bb: 	movslq	%edi, %rdi
    000000be: 	addb	(%rcx,%rdi), %al
    000000c1: 	leal	0x2(%rsi), %edi
    000000c4: 	cmpl	%edi, %edx
    000000c6: 	jle	.Ltmp202 # Offset: 198
    000000c8: 	movslq	%edi, %rdi
    000000cb: 	addb	(%rcx,%rdi), %al
    000000ce: 	leal	0x3(%rsi), %edi
    000000d1: 	cmpl	%edi, %edx
    000000d3: 	jle	.Ltmp202 # Offset: 211
    000000d5: 	movslq	%edi, %rdi
    000000d8: 	addb	(%rcx,%rdi), %al
    000000db: 	leal	0x4(%rsi), %edi
    000000de: 	cmpl	%edi, %edx
    000000e0: 	jle	.Ltmp202 # Offset: 224
    000000e2: 	movslq	%edi, %rdi
    000000e5: 	addb	(%rcx,%rdi), %al
    000000e8: 	leal	0x5(%rsi), %edi
    000000eb: 	cmpl	%edi, %edx
    000000ed: 	jle	.Ltmp202 # Offset: 237
    000000ef: 	movslq	%edi, %rdi
    000000f2: 	addl	$0x6, %esi
    000000f5: 	addb	(%rcx,%rdi), %al
    000000f8: 	cmpl	%esi, %edx
    000000fa: 	jle	.Ltmp202 # Offset: 250
    000000fc: 	movslq	%esi, %rsi
    000000ff: 	addb	(%rcx,%rsi), %al
.Ltmp202:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp203:
    00000108: 	xorl	%edi, %edi
    0000010a: 	xorl	%esi, %esi
    0000010c: 	jmp	.Ltmp207 # Offset: 268
.Ltmp205:
    00000111: 	retq # Offset: 273
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_goto_loop_globalIhET_PKS0_iS0_"

Binary Function "_Z22test_goto_loop_global2IhET_PKS0_iS0_" after disassembly {
  Number      : 64
  State       : disassembled
  Address     : 0x3d90
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x3d90
  Section     : .text
  Orc Section : .local.text._Z22test_goto_loop_global2IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB063:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp208 # Offset: 13
    00000013: 	leal	-0x1(%rsi), %esi
    00000016: 	cmpl	$0xe, %esi
    00000019: 	jbe	.Ltmp209 # Offset: 25
    0000001f: 	movl	%edx, %esi
    00000021: 	movq	%rdi, %rax
    00000024: 	pxor	%xmm0, %xmm0
    00000028: 	shrl	$0x4, %esi
    0000002b: 	subl	$0x1, %esi
    0000002e: 	shlq	$0x4, %rsi
    00000032: 	leaq	0x10(%rdi,%rsi), %rsi
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp210:
    00000040: 	movdqu	(%rax), %xmm2
    00000044: 	addq	$0x10, %rax
    00000048: 	paddb	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rsi
    0000004f: 	jne	.Ltmp210 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%edx, %edi
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x10, %edi
    0000005f: 	paddb	%xmm1, %xmm0
    00000063: 	pxor	%xmm1, %xmm1
    00000067: 	movl	%edi, %esi
    00000069: 	psadbw	%xmm1, %xmm0
    0000006d: 	movd	%xmm0, %eax
    00000071: 	cmpl	%edi, %edx
    00000073: 	je	.Ltmp211 # Offset: 115
.Ltmp213:
    00000079: 	movl	%edx, %r8d
    0000007c: 	subl	%edi, %r8d
    0000007f: 	leal	-0x1(%r8), %r9d
    00000083: 	cmpl	$0x6, %r9d
    00000087: 	jbe	.Ltmp212 # Offset: 135
    00000089: 	movq	(%rcx,%rdi), %xmm1
    0000008e: 	pxor	%xmm0, %xmm0
    00000092: 	movdqa	%xmm1, %xmm3
    00000096: 	psadbw	%xmm0, %xmm3
    0000009a: 	movq	%xmm3, %rdi
    0000009f: 	addl	%edi, %eax
    000000a1: 	movl	%r8d, %edi
    000000a4: 	andl	$-0x8, %edi
    000000a7: 	addl	%edi, %esi
    000000a9: 	cmpl	%edi, %r8d
    000000ac: 	je	.Ltmp208 # Offset: 172
.Ltmp212:
    000000ae: 	movslq	%esi, %rdi
    000000b1: 	addb	(%rcx,%rdi), %al
    000000b4: 	leal	0x1(%rsi), %edi
    000000b7: 	cmpl	%edi, %edx
    000000b9: 	jle	.Ltmp208 # Offset: 185
    000000bb: 	movslq	%edi, %rdi
    000000be: 	addb	(%rcx,%rdi), %al
    000000c1: 	leal	0x2(%rsi), %edi
    000000c4: 	cmpl	%edi, %edx
    000000c6: 	jle	.Ltmp208 # Offset: 198
    000000c8: 	movslq	%edi, %rdi
    000000cb: 	addb	(%rcx,%rdi), %al
    000000ce: 	leal	0x3(%rsi), %edi
    000000d1: 	cmpl	%edi, %edx
    000000d3: 	jle	.Ltmp208 # Offset: 211
    000000d5: 	movslq	%edi, %rdi
    000000d8: 	addb	(%rcx,%rdi), %al
    000000db: 	leal	0x4(%rsi), %edi
    000000de: 	cmpl	%edi, %edx
    000000e0: 	jle	.Ltmp208 # Offset: 224
    000000e2: 	movslq	%edi, %rdi
    000000e5: 	addb	(%rcx,%rdi), %al
    000000e8: 	leal	0x5(%rsi), %edi
    000000eb: 	cmpl	%edi, %edx
    000000ed: 	jle	.Ltmp208 # Offset: 237
    000000ef: 	movslq	%edi, %rdi
    000000f2: 	addl	$0x6, %esi
    000000f5: 	addb	(%rcx,%rdi), %al
    000000f8: 	cmpl	%esi, %edx
    000000fa: 	jle	.Ltmp208 # Offset: 250
    000000fc: 	movslq	%esi, %rsi
    000000ff: 	addb	(%rcx,%rsi), %al
.Ltmp208:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp209:
    00000108: 	xorl	%edi, %edi
    0000010a: 	xorl	%esi, %esi
    0000010c: 	jmp	.Ltmp213 # Offset: 268
.Ltmp211:
    00000111: 	retq # Offset: 273
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_goto_loop_global2IhET_PKS0_iS0_"

Binary Function "_Z22test_goto_loop_global3IhET_PKS0_iS0_" after disassembly {
  Number      : 65
  State       : disassembled
  Address     : 0x3eb0
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x3eb0
  Section     : .text
  Orc Section : .local.text._Z22test_goto_loop_global3IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB064:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp214 # Offset: 13
    00000013: 	leal	-0x1(%rsi), %esi
    00000016: 	cmpl	$0xe, %esi
    00000019: 	jbe	.Ltmp215 # Offset: 25
    0000001f: 	movl	%edx, %esi
    00000021: 	movq	%rdi, %rax
    00000024: 	pxor	%xmm0, %xmm0
    00000028: 	shrl	$0x4, %esi
    0000002b: 	subl	$0x1, %esi
    0000002e: 	shlq	$0x4, %rsi
    00000032: 	leaq	0x10(%rdi,%rsi), %rsi
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp216:
    00000040: 	movdqu	(%rax), %xmm2
    00000044: 	addq	$0x10, %rax
    00000048: 	paddb	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rsi
    0000004f: 	jne	.Ltmp216 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%edx, %edi
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x10, %edi
    0000005f: 	paddb	%xmm1, %xmm0
    00000063: 	pxor	%xmm1, %xmm1
    00000067: 	movl	%edi, %esi
    00000069: 	psadbw	%xmm1, %xmm0
    0000006d: 	movd	%xmm0, %eax
    00000071: 	cmpl	%edi, %edx
    00000073: 	je	.Ltmp217 # Offset: 115
.Ltmp219:
    00000079: 	movl	%edx, %r8d
    0000007c: 	subl	%edi, %r8d
    0000007f: 	leal	-0x1(%r8), %r9d
    00000083: 	cmpl	$0x6, %r9d
    00000087: 	jbe	.Ltmp218 # Offset: 135
    00000089: 	movq	(%rcx,%rdi), %xmm1
    0000008e: 	pxor	%xmm0, %xmm0
    00000092: 	movdqa	%xmm1, %xmm3
    00000096: 	psadbw	%xmm0, %xmm3
    0000009a: 	movq	%xmm3, %rdi
    0000009f: 	addl	%edi, %eax
    000000a1: 	movl	%r8d, %edi
    000000a4: 	andl	$-0x8, %edi
    000000a7: 	addl	%edi, %esi
    000000a9: 	cmpl	%edi, %r8d
    000000ac: 	je	.Ltmp214 # Offset: 172
.Ltmp218:
    000000ae: 	movslq	%esi, %rdi
    000000b1: 	addb	(%rcx,%rdi), %al
    000000b4: 	leal	0x1(%rsi), %edi
    000000b7: 	cmpl	%edi, %edx
    000000b9: 	jle	.Ltmp214 # Offset: 185
    000000bb: 	movslq	%edi, %rdi
    000000be: 	addb	(%rcx,%rdi), %al
    000000c1: 	leal	0x2(%rsi), %edi
    000000c4: 	cmpl	%edi, %edx
    000000c6: 	jle	.Ltmp214 # Offset: 198
    000000c8: 	movslq	%edi, %rdi
    000000cb: 	addb	(%rcx,%rdi), %al
    000000ce: 	leal	0x3(%rsi), %edi
    000000d1: 	cmpl	%edi, %edx
    000000d3: 	jle	.Ltmp214 # Offset: 211
    000000d5: 	movslq	%edi, %rdi
    000000d8: 	addb	(%rcx,%rdi), %al
    000000db: 	leal	0x4(%rsi), %edi
    000000de: 	cmpl	%edi, %edx
    000000e0: 	jle	.Ltmp214 # Offset: 224
    000000e2: 	movslq	%edi, %rdi
    000000e5: 	addb	(%rcx,%rdi), %al
    000000e8: 	leal	0x5(%rsi), %edi
    000000eb: 	cmpl	%edi, %edx
    000000ed: 	jle	.Ltmp214 # Offset: 237
    000000ef: 	movslq	%edi, %rdi
    000000f2: 	addl	$0x6, %esi
    000000f5: 	addb	(%rcx,%rdi), %al
    000000f8: 	cmpl	%esi, %edx
    000000fa: 	jle	.Ltmp214 # Offset: 250
    000000fc: 	movslq	%esi, %rsi
    000000ff: 	addb	(%rcx,%rsi), %al
.Ltmp214:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp215:
    00000108: 	xorl	%edi, %edi
    0000010a: 	xorl	%esi, %esi
    0000010c: 	jmp	.Ltmp219 # Offset: 268
.Ltmp217:
    00000111: 	retq # Offset: 273
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_goto_loop_global3IhET_PKS0_iS0_"

Binary Function "_Z20test_for_loop2_paramIhET_PKS0_iS0_" after disassembly {
  Number      : 66
  State       : disassembled
  Address     : 0x3fd0
  Size        : 0x10f
  MaxSize     : 0x110
  Offset      : 0x3fd0
  Section     : .text
  Orc Section : .local.text._Z20test_for_loop2_paramIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB065:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp220 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0xe, %eax
    00000014: 	jbe	.Ltmp221 # Offset: 20
    0000001a: 	movl	%esi, %ecx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	pxor	%xmm0, %xmm0
    00000023: 	shrl	$0x4, %ecx
    00000026: 	subl	$0x1, %ecx
    00000029: 	shlq	$0x4, %rcx
    0000002d: 	leaq	0x10(%rdi,%rcx), %rcx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp222:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddb	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp222 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%edx, %esi
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x10, %esi
    00000057: 	paddb	%xmm1, %xmm0
    0000005b: 	pxor	%xmm1, %xmm1
    0000005f: 	movl	%esi, %ecx
    00000061: 	psadbw	%xmm1, %xmm0
    00000065: 	movd	%xmm0, %eax
    00000069: 	cmpl	%esi, %edx
    0000006b: 	je	.Ltmp223 # Offset: 107
.Ltmp226:
    00000071: 	movl	%edx, %r8d
    00000074: 	subl	%esi, %r8d
    00000077: 	leal	-0x1(%r8), %r9d
    0000007b: 	cmpl	$0x6, %r9d
    0000007f: 	jbe	.Ltmp224 # Offset: 127
    00000081: 	movq	(%rdi,%rsi), %xmm1
    00000086: 	pxor	%xmm0, %xmm0
    0000008a: 	movdqa	%xmm1, %xmm3
    0000008e: 	psadbw	%xmm0, %xmm3
    00000092: 	movq	%xmm3, %rsi
    00000097: 	addl	%esi, %eax
    00000099: 	movl	%r8d, %esi
    0000009c: 	andl	$-0x8, %esi
    0000009f: 	addl	%esi, %ecx
    000000a1: 	cmpl	%esi, %r8d
    000000a4: 	je	.Ltmp225 # Offset: 164
.Ltmp224:
    000000a6: 	movslq	%ecx, %rsi
    000000a9: 	addb	(%rdi,%rsi), %al
    000000ac: 	leal	0x1(%rcx), %esi
    000000af: 	cmpl	%esi, %edx
    000000b1: 	jle	.Ltmp225 # Offset: 177
    000000b3: 	movslq	%esi, %rsi
    000000b6: 	addb	(%rdi,%rsi), %al
    000000b9: 	leal	0x2(%rcx), %esi
    000000bc: 	cmpl	%edx, %esi
    000000be: 	jge	.Ltmp225 # Offset: 190
    000000c0: 	movslq	%esi, %rsi
    000000c3: 	addb	(%rdi,%rsi), %al
    000000c6: 	leal	0x3(%rcx), %esi
    000000c9: 	cmpl	%esi, %edx
    000000cb: 	jle	.Ltmp225 # Offset: 203
    000000cd: 	movslq	%esi, %rsi
    000000d0: 	addb	(%rdi,%rsi), %al
    000000d3: 	leal	0x4(%rcx), %esi
    000000d6: 	cmpl	%esi, %edx
    000000d8: 	jle	.Ltmp225 # Offset: 216
    000000da: 	movslq	%esi, %rsi
    000000dd: 	addb	(%rdi,%rsi), %al
    000000e0: 	leal	0x5(%rcx), %esi
    000000e3: 	cmpl	%esi, %edx
    000000e5: 	jle	.Ltmp225 # Offset: 229
    000000e7: 	movslq	%esi, %rsi
    000000ea: 	addl	$0x6, %ecx
    000000ed: 	addb	(%rdi,%rsi), %al
    000000f0: 	cmpl	%ecx, %edx
    000000f2: 	jle	.Ltmp225 # Offset: 242
    000000f4: 	movslq	%ecx, %rcx
    000000f7: 	addb	(%rdi,%rcx), %al
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp220:
    00000100: 	xorl	%eax, %eax
.Ltmp225:
    00000102: 	retq # Offset: 258
.Ltmp221:
    00000103: 	xorl	%esi, %esi
    00000105: 	xorl	%ecx, %ecx
    00000107: 	xorl	%eax, %eax
    00000109: 	jmp	.Ltmp226 # Offset: 265
.Ltmp223:
    0000010e: 	retq # Offset: 270
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_for_loop2_paramIhET_PKS0_iS0_"

Binary Function "_Z21test_for_loop2_param2IhET_PKS0_iS0_" after disassembly {
  Number      : 67
  State       : disassembled
  Address     : 0x40e0
  Size        : 0x10f
  MaxSize     : 0x110
  Offset      : 0x40e0
  Section     : .text
  Orc Section : .local.text._Z21test_for_loop2_param2IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB066:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp227 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0xe, %eax
    00000014: 	jbe	.Ltmp228 # Offset: 20
    0000001a: 	movl	%esi, %ecx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	pxor	%xmm0, %xmm0
    00000023: 	shrl	$0x4, %ecx
    00000026: 	subl	$0x1, %ecx
    00000029: 	shlq	$0x4, %rcx
    0000002d: 	leaq	0x10(%rdi,%rcx), %rcx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp229:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddb	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp229 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%edx, %esi
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x10, %esi
    00000057: 	paddb	%xmm1, %xmm0
    0000005b: 	pxor	%xmm1, %xmm1
    0000005f: 	movl	%esi, %ecx
    00000061: 	psadbw	%xmm1, %xmm0
    00000065: 	movd	%xmm0, %eax
    00000069: 	cmpl	%esi, %edx
    0000006b: 	je	.Ltmp230 # Offset: 107
.Ltmp233:
    00000071: 	movl	%edx, %r8d
    00000074: 	subl	%esi, %r8d
    00000077: 	leal	-0x1(%r8), %r9d
    0000007b: 	cmpl	$0x6, %r9d
    0000007f: 	jbe	.Ltmp231 # Offset: 127
    00000081: 	movq	(%rdi,%rsi), %xmm1
    00000086: 	pxor	%xmm0, %xmm0
    0000008a: 	movdqa	%xmm1, %xmm3
    0000008e: 	psadbw	%xmm0, %xmm3
    00000092: 	movq	%xmm3, %rsi
    00000097: 	addl	%esi, %eax
    00000099: 	movl	%r8d, %esi
    0000009c: 	andl	$-0x8, %esi
    0000009f: 	addl	%esi, %ecx
    000000a1: 	cmpl	%esi, %r8d
    000000a4: 	je	.Ltmp232 # Offset: 164
.Ltmp231:
    000000a6: 	movslq	%ecx, %rsi
    000000a9: 	addb	(%rdi,%rsi), %al
    000000ac: 	leal	0x1(%rcx), %esi
    000000af: 	cmpl	%esi, %edx
    000000b1: 	jle	.Ltmp232 # Offset: 177
    000000b3: 	movslq	%esi, %rsi
    000000b6: 	addb	(%rdi,%rsi), %al
    000000b9: 	leal	0x2(%rcx), %esi
    000000bc: 	cmpl	%edx, %esi
    000000be: 	jge	.Ltmp232 # Offset: 190
    000000c0: 	movslq	%esi, %rsi
    000000c3: 	addb	(%rdi,%rsi), %al
    000000c6: 	leal	0x3(%rcx), %esi
    000000c9: 	cmpl	%esi, %edx
    000000cb: 	jle	.Ltmp232 # Offset: 203
    000000cd: 	movslq	%esi, %rsi
    000000d0: 	addb	(%rdi,%rsi), %al
    000000d3: 	leal	0x4(%rcx), %esi
    000000d6: 	cmpl	%esi, %edx
    000000d8: 	jle	.Ltmp232 # Offset: 216
    000000da: 	movslq	%esi, %rsi
    000000dd: 	addb	(%rdi,%rsi), %al
    000000e0: 	leal	0x5(%rcx), %esi
    000000e3: 	cmpl	%esi, %edx
    000000e5: 	jle	.Ltmp232 # Offset: 229
    000000e7: 	movslq	%esi, %rsi
    000000ea: 	addl	$0x6, %ecx
    000000ed: 	addb	(%rdi,%rsi), %al
    000000f0: 	cmpl	%ecx, %edx
    000000f2: 	jle	.Ltmp232 # Offset: 242
    000000f4: 	movslq	%ecx, %rcx
    000000f7: 	addb	(%rdi,%rcx), %al
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp227:
    00000100: 	xorl	%eax, %eax
.Ltmp232:
    00000102: 	retq # Offset: 258
.Ltmp228:
    00000103: 	xorl	%esi, %esi
    00000105: 	xorl	%ecx, %ecx
    00000107: 	xorl	%eax, %eax
    00000109: 	jmp	.Ltmp233 # Offset: 265
.Ltmp230:
    0000010e: 	retq # Offset: 270
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_for_loop2_param2IhET_PKS0_iS0_"

Binary Function "_Z22test_while_loop2_paramIhET_PKS0_iS0_" after disassembly {
  Number      : 68
  State       : disassembled
  Address     : 0x41f0
  Size        : 0x10f
  MaxSize     : 0x110
  Offset      : 0x41f0
  Section     : .text
  Orc Section : .local.text._Z22test_while_loop2_paramIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB067:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp234 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0xe, %eax
    00000014: 	jbe	.Ltmp235 # Offset: 20
    0000001a: 	movl	%esi, %ecx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	pxor	%xmm0, %xmm0
    00000023: 	shrl	$0x4, %ecx
    00000026: 	subl	$0x1, %ecx
    00000029: 	shlq	$0x4, %rcx
    0000002d: 	leaq	0x10(%rdi,%rcx), %rcx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp236:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddb	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp236 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%edx, %esi
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x10, %esi
    00000057: 	paddb	%xmm1, %xmm0
    0000005b: 	pxor	%xmm1, %xmm1
    0000005f: 	movl	%esi, %ecx
    00000061: 	psadbw	%xmm1, %xmm0
    00000065: 	movd	%xmm0, %eax
    00000069: 	cmpl	%esi, %edx
    0000006b: 	je	.Ltmp237 # Offset: 107
.Ltmp240:
    00000071: 	movl	%edx, %r8d
    00000074: 	subl	%esi, %r8d
    00000077: 	leal	-0x1(%r8), %r9d
    0000007b: 	cmpl	$0x6, %r9d
    0000007f: 	jbe	.Ltmp238 # Offset: 127
    00000081: 	movq	(%rdi,%rsi), %xmm1
    00000086: 	pxor	%xmm0, %xmm0
    0000008a: 	movdqa	%xmm1, %xmm3
    0000008e: 	psadbw	%xmm0, %xmm3
    00000092: 	movq	%xmm3, %rsi
    00000097: 	addl	%esi, %eax
    00000099: 	movl	%r8d, %esi
    0000009c: 	andl	$-0x8, %esi
    0000009f: 	addl	%esi, %ecx
    000000a1: 	cmpl	%esi, %r8d
    000000a4: 	je	.Ltmp239 # Offset: 164
.Ltmp238:
    000000a6: 	movslq	%ecx, %rsi
    000000a9: 	addb	(%rdi,%rsi), %al
    000000ac: 	leal	0x1(%rcx), %esi
    000000af: 	cmpl	%esi, %edx
    000000b1: 	jle	.Ltmp239 # Offset: 177
    000000b3: 	movslq	%esi, %rsi
    000000b6: 	addb	(%rdi,%rsi), %al
    000000b9: 	leal	0x2(%rcx), %esi
    000000bc: 	cmpl	%edx, %esi
    000000be: 	jge	.Ltmp239 # Offset: 190
    000000c0: 	movslq	%esi, %rsi
    000000c3: 	addb	(%rdi,%rsi), %al
    000000c6: 	leal	0x3(%rcx), %esi
    000000c9: 	cmpl	%esi, %edx
    000000cb: 	jle	.Ltmp239 # Offset: 203
    000000cd: 	movslq	%esi, %rsi
    000000d0: 	addb	(%rdi,%rsi), %al
    000000d3: 	leal	0x4(%rcx), %esi
    000000d6: 	cmpl	%esi, %edx
    000000d8: 	jle	.Ltmp239 # Offset: 216
    000000da: 	movslq	%esi, %rsi
    000000dd: 	addb	(%rdi,%rsi), %al
    000000e0: 	leal	0x5(%rcx), %esi
    000000e3: 	cmpl	%esi, %edx
    000000e5: 	jle	.Ltmp239 # Offset: 229
    000000e7: 	movslq	%esi, %rsi
    000000ea: 	addl	$0x6, %ecx
    000000ed: 	addb	(%rdi,%rsi), %al
    000000f0: 	cmpl	%ecx, %edx
    000000f2: 	jle	.Ltmp239 # Offset: 242
    000000f4: 	movslq	%ecx, %rcx
    000000f7: 	addb	(%rdi,%rcx), %al
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp234:
    00000100: 	xorl	%eax, %eax
.Ltmp239:
    00000102: 	retq # Offset: 258
.Ltmp235:
    00000103: 	xorl	%esi, %esi
    00000105: 	xorl	%ecx, %ecx
    00000107: 	xorl	%eax, %eax
    00000109: 	jmp	.Ltmp240 # Offset: 265
.Ltmp237:
    0000010e: 	retq # Offset: 270
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_while_loop2_paramIhET_PKS0_iS0_"

Binary Function "_Z23test_while_loop2_param2IhET_PKS0_iS0_" after disassembly {
  Number      : 69
  State       : disassembled
  Address     : 0x4300
  Size        : 0x10f
  MaxSize     : 0x110
  Offset      : 0x4300
  Section     : .text
  Orc Section : .local.text._Z23test_while_loop2_param2IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB068:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp241 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0xe, %eax
    00000014: 	jbe	.Ltmp242 # Offset: 20
    0000001a: 	movl	%esi, %ecx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	pxor	%xmm0, %xmm0
    00000023: 	shrl	$0x4, %ecx
    00000026: 	subl	$0x1, %ecx
    00000029: 	shlq	$0x4, %rcx
    0000002d: 	leaq	0x10(%rdi,%rcx), %rcx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp243:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddb	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp243 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%edx, %esi
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x10, %esi
    00000057: 	paddb	%xmm1, %xmm0
    0000005b: 	pxor	%xmm1, %xmm1
    0000005f: 	movl	%esi, %ecx
    00000061: 	psadbw	%xmm1, %xmm0
    00000065: 	movd	%xmm0, %eax
    00000069: 	cmpl	%esi, %edx
    0000006b: 	je	.Ltmp244 # Offset: 107
.Ltmp247:
    00000071: 	movl	%edx, %r8d
    00000074: 	subl	%esi, %r8d
    00000077: 	leal	-0x1(%r8), %r9d
    0000007b: 	cmpl	$0x6, %r9d
    0000007f: 	jbe	.Ltmp245 # Offset: 127
    00000081: 	movq	(%rdi,%rsi), %xmm1
    00000086: 	pxor	%xmm0, %xmm0
    0000008a: 	movdqa	%xmm1, %xmm3
    0000008e: 	psadbw	%xmm0, %xmm3
    00000092: 	movq	%xmm3, %rsi
    00000097: 	addl	%esi, %eax
    00000099: 	movl	%r8d, %esi
    0000009c: 	andl	$-0x8, %esi
    0000009f: 	addl	%esi, %ecx
    000000a1: 	cmpl	%esi, %r8d
    000000a4: 	je	.Ltmp246 # Offset: 164
.Ltmp245:
    000000a6: 	movslq	%ecx, %rsi
    000000a9: 	addb	(%rdi,%rsi), %al
    000000ac: 	leal	0x1(%rcx), %esi
    000000af: 	cmpl	%esi, %edx
    000000b1: 	jle	.Ltmp246 # Offset: 177
    000000b3: 	movslq	%esi, %rsi
    000000b6: 	addb	(%rdi,%rsi), %al
    000000b9: 	leal	0x2(%rcx), %esi
    000000bc: 	cmpl	%edx, %esi
    000000be: 	jge	.Ltmp246 # Offset: 190
    000000c0: 	movslq	%esi, %rsi
    000000c3: 	addb	(%rdi,%rsi), %al
    000000c6: 	leal	0x3(%rcx), %esi
    000000c9: 	cmpl	%esi, %edx
    000000cb: 	jle	.Ltmp246 # Offset: 203
    000000cd: 	movslq	%esi, %rsi
    000000d0: 	addb	(%rdi,%rsi), %al
    000000d3: 	leal	0x4(%rcx), %esi
    000000d6: 	cmpl	%esi, %edx
    000000d8: 	jle	.Ltmp246 # Offset: 216
    000000da: 	movslq	%esi, %rsi
    000000dd: 	addb	(%rdi,%rsi), %al
    000000e0: 	leal	0x5(%rcx), %esi
    000000e3: 	cmpl	%esi, %edx
    000000e5: 	jle	.Ltmp246 # Offset: 229
    000000e7: 	movslq	%esi, %rsi
    000000ea: 	addl	$0x6, %ecx
    000000ed: 	addb	(%rdi,%rsi), %al
    000000f0: 	cmpl	%ecx, %edx
    000000f2: 	jle	.Ltmp246 # Offset: 242
    000000f4: 	movslq	%ecx, %rcx
    000000f7: 	addb	(%rdi,%rcx), %al
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp241:
    00000100: 	xorl	%eax, %eax
.Ltmp246:
    00000102: 	retq # Offset: 258
.Ltmp242:
    00000103: 	xorl	%esi, %esi
    00000105: 	xorl	%ecx, %ecx
    00000107: 	xorl	%eax, %eax
    00000109: 	jmp	.Ltmp247 # Offset: 265
.Ltmp244:
    0000010e: 	retq # Offset: 270
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_while_loop2_param2IhET_PKS0_iS0_"

Binary Function "_Z19test_do_loop2_paramIhET_PKS0_iS0_" after disassembly {
  Number      : 70
  State       : disassembled
  Address     : 0x4410
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x4410
  Section     : .text
  Orc Section : .local.text._Z19test_do_loop2_paramIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB069:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp248 # Offset: 13
    00000013: 	leal	-0x1(%rsi), %esi
    00000016: 	cmpl	$0xe, %esi
    00000019: 	jbe	.Ltmp249 # Offset: 25
    0000001f: 	movl	%edx, %esi
    00000021: 	movq	%rdi, %rax
    00000024: 	pxor	%xmm0, %xmm0
    00000028: 	shrl	$0x4, %esi
    0000002b: 	subl	$0x1, %esi
    0000002e: 	shlq	$0x4, %rsi
    00000032: 	leaq	0x10(%rdi,%rsi), %rsi
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp250:
    00000040: 	movdqu	(%rax), %xmm2
    00000044: 	addq	$0x10, %rax
    00000048: 	paddb	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rsi
    0000004f: 	jne	.Ltmp250 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%edx, %edi
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x10, %edi
    0000005f: 	paddb	%xmm1, %xmm0
    00000063: 	pxor	%xmm1, %xmm1
    00000067: 	movl	%edi, %esi
    00000069: 	psadbw	%xmm1, %xmm0
    0000006d: 	movd	%xmm0, %eax
    00000071: 	cmpl	%edi, %edx
    00000073: 	je	.Ltmp251 # Offset: 115
.Ltmp253:
    00000079: 	movl	%edx, %r8d
    0000007c: 	subl	%edi, %r8d
    0000007f: 	leal	-0x1(%r8), %r9d
    00000083: 	cmpl	$0x6, %r9d
    00000087: 	jbe	.Ltmp252 # Offset: 135
    00000089: 	movq	(%rcx,%rdi), %xmm1
    0000008e: 	pxor	%xmm0, %xmm0
    00000092: 	movdqa	%xmm1, %xmm3
    00000096: 	psadbw	%xmm0, %xmm3
    0000009a: 	movq	%xmm3, %rdi
    0000009f: 	addl	%edi, %eax
    000000a1: 	movl	%r8d, %edi
    000000a4: 	andl	$-0x8, %edi
    000000a7: 	addl	%edi, %esi
    000000a9: 	cmpl	%edi, %r8d
    000000ac: 	je	.Ltmp248 # Offset: 172
.Ltmp252:
    000000ae: 	movslq	%esi, %rdi
    000000b1: 	addb	(%rcx,%rdi), %al
    000000b4: 	leal	0x1(%rsi), %edi
    000000b7: 	cmpl	%edi, %edx
    000000b9: 	jle	.Ltmp248 # Offset: 185
    000000bb: 	movslq	%edi, %rdi
    000000be: 	addb	(%rcx,%rdi), %al
    000000c1: 	leal	0x2(%rsi), %edi
    000000c4: 	cmpl	%edi, %edx
    000000c6: 	jle	.Ltmp248 # Offset: 198
    000000c8: 	movslq	%edi, %rdi
    000000cb: 	addb	(%rcx,%rdi), %al
    000000ce: 	leal	0x3(%rsi), %edi
    000000d1: 	cmpl	%edi, %edx
    000000d3: 	jle	.Ltmp248 # Offset: 211
    000000d5: 	movslq	%edi, %rdi
    000000d8: 	addb	(%rcx,%rdi), %al
    000000db: 	leal	0x4(%rsi), %edi
    000000de: 	cmpl	%edi, %edx
    000000e0: 	jle	.Ltmp248 # Offset: 224
    000000e2: 	movslq	%edi, %rdi
    000000e5: 	addb	(%rcx,%rdi), %al
    000000e8: 	leal	0x5(%rsi), %edi
    000000eb: 	cmpl	%edi, %edx
    000000ed: 	jle	.Ltmp248 # Offset: 237
    000000ef: 	movslq	%edi, %rdi
    000000f2: 	addl	$0x6, %esi
    000000f5: 	addb	(%rcx,%rdi), %al
    000000f8: 	cmpl	%esi, %edx
    000000fa: 	jle	.Ltmp248 # Offset: 250
    000000fc: 	movslq	%esi, %rsi
    000000ff: 	addb	(%rcx,%rsi), %al
.Ltmp248:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp249:
    00000108: 	xorl	%edi, %edi
    0000010a: 	xorl	%esi, %esi
    0000010c: 	jmp	.Ltmp253 # Offset: 268
.Ltmp251:
    00000111: 	retq # Offset: 273
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_do_loop2_paramIhET_PKS0_iS0_"

Binary Function "_Z20test_do_loop2_param2IhET_PKS0_iS0_" after disassembly {
  Number      : 71
  State       : disassembled
  Address     : 0x4530
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x4530
  Section     : .text
  Orc Section : .local.text._Z20test_do_loop2_param2IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB070:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp254 # Offset: 13
    00000013: 	leal	-0x1(%rsi), %esi
    00000016: 	cmpl	$0xe, %esi
    00000019: 	jbe	.Ltmp255 # Offset: 25
    0000001f: 	movl	%edx, %esi
    00000021: 	movq	%rdi, %rax
    00000024: 	pxor	%xmm0, %xmm0
    00000028: 	shrl	$0x4, %esi
    0000002b: 	subl	$0x1, %esi
    0000002e: 	shlq	$0x4, %rsi
    00000032: 	leaq	0x10(%rdi,%rsi), %rsi
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp256:
    00000040: 	movdqu	(%rax), %xmm2
    00000044: 	addq	$0x10, %rax
    00000048: 	paddb	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rsi
    0000004f: 	jne	.Ltmp256 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%edx, %edi
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x10, %edi
    0000005f: 	paddb	%xmm1, %xmm0
    00000063: 	pxor	%xmm1, %xmm1
    00000067: 	movl	%edi, %esi
    00000069: 	psadbw	%xmm1, %xmm0
    0000006d: 	movd	%xmm0, %eax
    00000071: 	cmpl	%edi, %edx
    00000073: 	je	.Ltmp257 # Offset: 115
.Ltmp259:
    00000079: 	movl	%edx, %r8d
    0000007c: 	subl	%edi, %r8d
    0000007f: 	leal	-0x1(%r8), %r9d
    00000083: 	cmpl	$0x6, %r9d
    00000087: 	jbe	.Ltmp258 # Offset: 135
    00000089: 	movq	(%rcx,%rdi), %xmm1
    0000008e: 	pxor	%xmm0, %xmm0
    00000092: 	movdqa	%xmm1, %xmm3
    00000096: 	psadbw	%xmm0, %xmm3
    0000009a: 	movq	%xmm3, %rdi
    0000009f: 	addl	%edi, %eax
    000000a1: 	movl	%r8d, %edi
    000000a4: 	andl	$-0x8, %edi
    000000a7: 	addl	%edi, %esi
    000000a9: 	cmpl	%edi, %r8d
    000000ac: 	je	.Ltmp254 # Offset: 172
.Ltmp258:
    000000ae: 	movslq	%esi, %rdi
    000000b1: 	addb	(%rcx,%rdi), %al
    000000b4: 	leal	0x1(%rsi), %edi
    000000b7: 	cmpl	%edi, %edx
    000000b9: 	jle	.Ltmp254 # Offset: 185
    000000bb: 	movslq	%edi, %rdi
    000000be: 	addb	(%rcx,%rdi), %al
    000000c1: 	leal	0x2(%rsi), %edi
    000000c4: 	cmpl	%edi, %edx
    000000c6: 	jle	.Ltmp254 # Offset: 198
    000000c8: 	movslq	%edi, %rdi
    000000cb: 	addb	(%rcx,%rdi), %al
    000000ce: 	leal	0x3(%rsi), %edi
    000000d1: 	cmpl	%edi, %edx
    000000d3: 	jle	.Ltmp254 # Offset: 211
    000000d5: 	movslq	%edi, %rdi
    000000d8: 	addb	(%rcx,%rdi), %al
    000000db: 	leal	0x4(%rsi), %edi
    000000de: 	cmpl	%edi, %edx
    000000e0: 	jle	.Ltmp254 # Offset: 224
    000000e2: 	movslq	%edi, %rdi
    000000e5: 	addb	(%rcx,%rdi), %al
    000000e8: 	leal	0x5(%rsi), %edi
    000000eb: 	cmpl	%edi, %edx
    000000ed: 	jle	.Ltmp254 # Offset: 237
    000000ef: 	movslq	%edi, %rdi
    000000f2: 	addl	$0x6, %esi
    000000f5: 	addb	(%rcx,%rdi), %al
    000000f8: 	cmpl	%esi, %edx
    000000fa: 	jle	.Ltmp254 # Offset: 250
    000000fc: 	movslq	%esi, %rsi
    000000ff: 	addb	(%rcx,%rsi), %al
.Ltmp254:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp255:
    00000108: 	xorl	%edi, %edi
    0000010a: 	xorl	%esi, %esi
    0000010c: 	jmp	.Ltmp259 # Offset: 268
.Ltmp257:
    00000111: 	retq # Offset: 273
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_do_loop2_param2IhET_PKS0_iS0_"

Binary Function "_Z21test_goto_loop2_paramIhET_PKS0_iS0_" after disassembly {
  Number      : 72
  State       : disassembled
  Address     : 0x4650
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x4650
  Section     : .text
  Orc Section : .local.text._Z21test_goto_loop2_paramIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB071:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp260 # Offset: 13
    00000013: 	leal	-0x1(%rsi), %esi
    00000016: 	cmpl	$0xe, %esi
    00000019: 	jbe	.Ltmp261 # Offset: 25
    0000001f: 	movl	%edx, %esi
    00000021: 	movq	%rdi, %rax
    00000024: 	pxor	%xmm0, %xmm0
    00000028: 	shrl	$0x4, %esi
    0000002b: 	subl	$0x1, %esi
    0000002e: 	shlq	$0x4, %rsi
    00000032: 	leaq	0x10(%rdi,%rsi), %rsi
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp262:
    00000040: 	movdqu	(%rax), %xmm2
    00000044: 	addq	$0x10, %rax
    00000048: 	paddb	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rsi
    0000004f: 	jne	.Ltmp262 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%edx, %edi
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x10, %edi
    0000005f: 	paddb	%xmm1, %xmm0
    00000063: 	pxor	%xmm1, %xmm1
    00000067: 	movl	%edi, %esi
    00000069: 	psadbw	%xmm1, %xmm0
    0000006d: 	movd	%xmm0, %eax
    00000071: 	cmpl	%edi, %edx
    00000073: 	je	.Ltmp263 # Offset: 115
.Ltmp265:
    00000079: 	movl	%edx, %r8d
    0000007c: 	subl	%edi, %r8d
    0000007f: 	leal	-0x1(%r8), %r9d
    00000083: 	cmpl	$0x6, %r9d
    00000087: 	jbe	.Ltmp264 # Offset: 135
    00000089: 	movq	(%rcx,%rdi), %xmm1
    0000008e: 	pxor	%xmm0, %xmm0
    00000092: 	movdqa	%xmm1, %xmm3
    00000096: 	psadbw	%xmm0, %xmm3
    0000009a: 	movq	%xmm3, %rdi
    0000009f: 	addl	%edi, %eax
    000000a1: 	movl	%r8d, %edi
    000000a4: 	andl	$-0x8, %edi
    000000a7: 	addl	%edi, %esi
    000000a9: 	cmpl	%edi, %r8d
    000000ac: 	je	.Ltmp260 # Offset: 172
.Ltmp264:
    000000ae: 	movslq	%esi, %rdi
    000000b1: 	addb	(%rcx,%rdi), %al
    000000b4: 	leal	0x1(%rsi), %edi
    000000b7: 	cmpl	%edi, %edx
    000000b9: 	jle	.Ltmp260 # Offset: 185
    000000bb: 	movslq	%edi, %rdi
    000000be: 	addb	(%rcx,%rdi), %al
    000000c1: 	leal	0x2(%rsi), %edi
    000000c4: 	cmpl	%edi, %edx
    000000c6: 	jle	.Ltmp260 # Offset: 198
    000000c8: 	movslq	%edi, %rdi
    000000cb: 	addb	(%rcx,%rdi), %al
    000000ce: 	leal	0x3(%rsi), %edi
    000000d1: 	cmpl	%edi, %edx
    000000d3: 	jle	.Ltmp260 # Offset: 211
    000000d5: 	movslq	%edi, %rdi
    000000d8: 	addb	(%rcx,%rdi), %al
    000000db: 	leal	0x4(%rsi), %edi
    000000de: 	cmpl	%edi, %edx
    000000e0: 	jle	.Ltmp260 # Offset: 224
    000000e2: 	movslq	%edi, %rdi
    000000e5: 	addb	(%rcx,%rdi), %al
    000000e8: 	leal	0x5(%rsi), %edi
    000000eb: 	cmpl	%edi, %edx
    000000ed: 	jle	.Ltmp260 # Offset: 237
    000000ef: 	movslq	%edi, %rdi
    000000f2: 	addl	$0x6, %esi
    000000f5: 	addb	(%rcx,%rdi), %al
    000000f8: 	cmpl	%esi, %edx
    000000fa: 	jle	.Ltmp260 # Offset: 250
    000000fc: 	movslq	%esi, %rsi
    000000ff: 	addb	(%rcx,%rsi), %al
.Ltmp260:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp261:
    00000108: 	xorl	%edi, %edi
    0000010a: 	xorl	%esi, %esi
    0000010c: 	jmp	.Ltmp265 # Offset: 268
.Ltmp263:
    00000111: 	retq # Offset: 273
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_goto_loop2_paramIhET_PKS0_iS0_"

Binary Function "_Z22test_goto_loop2_param2IhET_PKS0_iS0_" after disassembly {
  Number      : 73
  State       : disassembled
  Address     : 0x4770
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x4770
  Section     : .text
  Orc Section : .local.text._Z22test_goto_loop2_param2IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB072:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp266 # Offset: 13
    00000013: 	leal	-0x1(%rsi), %esi
    00000016: 	cmpl	$0xe, %esi
    00000019: 	jbe	.Ltmp267 # Offset: 25
    0000001f: 	movl	%edx, %esi
    00000021: 	movq	%rdi, %rax
    00000024: 	pxor	%xmm0, %xmm0
    00000028: 	shrl	$0x4, %esi
    0000002b: 	subl	$0x1, %esi
    0000002e: 	shlq	$0x4, %rsi
    00000032: 	leaq	0x10(%rdi,%rsi), %rsi
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp268:
    00000040: 	movdqu	(%rax), %xmm2
    00000044: 	addq	$0x10, %rax
    00000048: 	paddb	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rsi
    0000004f: 	jne	.Ltmp268 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%edx, %edi
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x10, %edi
    0000005f: 	paddb	%xmm1, %xmm0
    00000063: 	pxor	%xmm1, %xmm1
    00000067: 	movl	%edi, %esi
    00000069: 	psadbw	%xmm1, %xmm0
    0000006d: 	movd	%xmm0, %eax
    00000071: 	cmpl	%edi, %edx
    00000073: 	je	.Ltmp269 # Offset: 115
.Ltmp271:
    00000079: 	movl	%edx, %r8d
    0000007c: 	subl	%edi, %r8d
    0000007f: 	leal	-0x1(%r8), %r9d
    00000083: 	cmpl	$0x6, %r9d
    00000087: 	jbe	.Ltmp270 # Offset: 135
    00000089: 	movq	(%rcx,%rdi), %xmm1
    0000008e: 	pxor	%xmm0, %xmm0
    00000092: 	movdqa	%xmm1, %xmm3
    00000096: 	psadbw	%xmm0, %xmm3
    0000009a: 	movq	%xmm3, %rdi
    0000009f: 	addl	%edi, %eax
    000000a1: 	movl	%r8d, %edi
    000000a4: 	andl	$-0x8, %edi
    000000a7: 	addl	%edi, %esi
    000000a9: 	cmpl	%edi, %r8d
    000000ac: 	je	.Ltmp266 # Offset: 172
.Ltmp270:
    000000ae: 	movslq	%esi, %rdi
    000000b1: 	addb	(%rcx,%rdi), %al
    000000b4: 	leal	0x1(%rsi), %edi
    000000b7: 	cmpl	%edi, %edx
    000000b9: 	jle	.Ltmp266 # Offset: 185
    000000bb: 	movslq	%edi, %rdi
    000000be: 	addb	(%rcx,%rdi), %al
    000000c1: 	leal	0x2(%rsi), %edi
    000000c4: 	cmpl	%edi, %edx
    000000c6: 	jle	.Ltmp266 # Offset: 198
    000000c8: 	movslq	%edi, %rdi
    000000cb: 	addb	(%rcx,%rdi), %al
    000000ce: 	leal	0x3(%rsi), %edi
    000000d1: 	cmpl	%edi, %edx
    000000d3: 	jle	.Ltmp266 # Offset: 211
    000000d5: 	movslq	%edi, %rdi
    000000d8: 	addb	(%rcx,%rdi), %al
    000000db: 	leal	0x4(%rsi), %edi
    000000de: 	cmpl	%edi, %edx
    000000e0: 	jle	.Ltmp266 # Offset: 224
    000000e2: 	movslq	%edi, %rdi
    000000e5: 	addb	(%rcx,%rdi), %al
    000000e8: 	leal	0x5(%rsi), %edi
    000000eb: 	cmpl	%edi, %edx
    000000ed: 	jle	.Ltmp266 # Offset: 237
    000000ef: 	movslq	%edi, %rdi
    000000f2: 	addl	$0x6, %esi
    000000f5: 	addb	(%rcx,%rdi), %al
    000000f8: 	cmpl	%esi, %edx
    000000fa: 	jle	.Ltmp266 # Offset: 250
    000000fc: 	movslq	%esi, %rsi
    000000ff: 	addb	(%rcx,%rsi), %al
.Ltmp266:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp267:
    00000108: 	xorl	%edi, %edi
    0000010a: 	xorl	%esi, %esi
    0000010c: 	jmp	.Ltmp271 # Offset: 268
.Ltmp269:
    00000111: 	retq # Offset: 273
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_goto_loop2_param2IhET_PKS0_iS0_"

Binary Function "_Z21test_for_loop2_globalIhET_PKS0_iS0_" after disassembly {
  Number      : 74
  State       : disassembled
  Address     : 0x4890
  Size        : 0x10f
  MaxSize     : 0x110
  Offset      : 0x4890
  Section     : .text
  Orc Section : .local.text._Z21test_for_loop2_globalIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB073:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp272 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0xe, %eax
    00000014: 	jbe	.Ltmp273 # Offset: 20
    0000001a: 	movl	%esi, %ecx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	pxor	%xmm0, %xmm0
    00000023: 	shrl	$0x4, %ecx
    00000026: 	subl	$0x1, %ecx
    00000029: 	shlq	$0x4, %rcx
    0000002d: 	leaq	0x10(%rdi,%rcx), %rcx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp274:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddb	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp274 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%edx, %esi
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x10, %esi
    00000057: 	paddb	%xmm1, %xmm0
    0000005b: 	pxor	%xmm1, %xmm1
    0000005f: 	movl	%esi, %ecx
    00000061: 	psadbw	%xmm1, %xmm0
    00000065: 	movd	%xmm0, %eax
    00000069: 	cmpl	%esi, %edx
    0000006b: 	je	.Ltmp275 # Offset: 107
.Ltmp278:
    00000071: 	movl	%edx, %r8d
    00000074: 	subl	%esi, %r8d
    00000077: 	leal	-0x1(%r8), %r9d
    0000007b: 	cmpl	$0x6, %r9d
    0000007f: 	jbe	.Ltmp276 # Offset: 127
    00000081: 	movq	(%rdi,%rsi), %xmm1
    00000086: 	pxor	%xmm0, %xmm0
    0000008a: 	movdqa	%xmm1, %xmm3
    0000008e: 	psadbw	%xmm0, %xmm3
    00000092: 	movq	%xmm3, %rsi
    00000097: 	addl	%esi, %eax
    00000099: 	movl	%r8d, %esi
    0000009c: 	andl	$-0x8, %esi
    0000009f: 	addl	%esi, %ecx
    000000a1: 	cmpl	%esi, %r8d
    000000a4: 	je	.Ltmp277 # Offset: 164
.Ltmp276:
    000000a6: 	movslq	%ecx, %rsi
    000000a9: 	addb	(%rdi,%rsi), %al
    000000ac: 	leal	0x1(%rcx), %esi
    000000af: 	cmpl	%esi, %edx
    000000b1: 	jle	.Ltmp277 # Offset: 177
    000000b3: 	movslq	%esi, %rsi
    000000b6: 	addb	(%rdi,%rsi), %al
    000000b9: 	leal	0x2(%rcx), %esi
    000000bc: 	cmpl	%edx, %esi
    000000be: 	jge	.Ltmp277 # Offset: 190
    000000c0: 	movslq	%esi, %rsi
    000000c3: 	addb	(%rdi,%rsi), %al
    000000c6: 	leal	0x3(%rcx), %esi
    000000c9: 	cmpl	%esi, %edx
    000000cb: 	jle	.Ltmp277 # Offset: 203
    000000cd: 	movslq	%esi, %rsi
    000000d0: 	addb	(%rdi,%rsi), %al
    000000d3: 	leal	0x4(%rcx), %esi
    000000d6: 	cmpl	%esi, %edx
    000000d8: 	jle	.Ltmp277 # Offset: 216
    000000da: 	movslq	%esi, %rsi
    000000dd: 	addb	(%rdi,%rsi), %al
    000000e0: 	leal	0x5(%rcx), %esi
    000000e3: 	cmpl	%esi, %edx
    000000e5: 	jle	.Ltmp277 # Offset: 229
    000000e7: 	movslq	%esi, %rsi
    000000ea: 	addl	$0x6, %ecx
    000000ed: 	addb	(%rdi,%rsi), %al
    000000f0: 	cmpl	%ecx, %edx
    000000f2: 	jle	.Ltmp277 # Offset: 242
    000000f4: 	movslq	%ecx, %rcx
    000000f7: 	addb	(%rdi,%rcx), %al
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp272:
    00000100: 	xorl	%eax, %eax
.Ltmp277:
    00000102: 	retq # Offset: 258
.Ltmp273:
    00000103: 	xorl	%esi, %esi
    00000105: 	xorl	%ecx, %ecx
    00000107: 	xorl	%eax, %eax
    00000109: 	jmp	.Ltmp278 # Offset: 265
.Ltmp275:
    0000010e: 	retq # Offset: 270
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_for_loop2_globalIhET_PKS0_iS0_"

Binary Function "_Z22test_for_loop2_global2IhET_PKS0_iS0_" after disassembly {
  Number      : 75
  State       : disassembled
  Address     : 0x49a0
  Size        : 0x10f
  MaxSize     : 0x110
  Offset      : 0x49a0
  Section     : .text
  Orc Section : .local.text._Z22test_for_loop2_global2IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB074:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp279 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0xe, %eax
    00000014: 	jbe	.Ltmp280 # Offset: 20
    0000001a: 	movl	%esi, %ecx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	pxor	%xmm0, %xmm0
    00000023: 	shrl	$0x4, %ecx
    00000026: 	subl	$0x1, %ecx
    00000029: 	shlq	$0x4, %rcx
    0000002d: 	leaq	0x10(%rdi,%rcx), %rcx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp281:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddb	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp281 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%edx, %esi
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x10, %esi
    00000057: 	paddb	%xmm1, %xmm0
    0000005b: 	pxor	%xmm1, %xmm1
    0000005f: 	movl	%esi, %ecx
    00000061: 	psadbw	%xmm1, %xmm0
    00000065: 	movd	%xmm0, %eax
    00000069: 	cmpl	%esi, %edx
    0000006b: 	je	.Ltmp282 # Offset: 107
.Ltmp285:
    00000071: 	movl	%edx, %r8d
    00000074: 	subl	%esi, %r8d
    00000077: 	leal	-0x1(%r8), %r9d
    0000007b: 	cmpl	$0x6, %r9d
    0000007f: 	jbe	.Ltmp283 # Offset: 127
    00000081: 	movq	(%rdi,%rsi), %xmm1
    00000086: 	pxor	%xmm0, %xmm0
    0000008a: 	movdqa	%xmm1, %xmm3
    0000008e: 	psadbw	%xmm0, %xmm3
    00000092: 	movq	%xmm3, %rsi
    00000097: 	addl	%esi, %eax
    00000099: 	movl	%r8d, %esi
    0000009c: 	andl	$-0x8, %esi
    0000009f: 	addl	%esi, %ecx
    000000a1: 	cmpl	%esi, %r8d
    000000a4: 	je	.Ltmp284 # Offset: 164
.Ltmp283:
    000000a6: 	movslq	%ecx, %rsi
    000000a9: 	addb	(%rdi,%rsi), %al
    000000ac: 	leal	0x1(%rcx), %esi
    000000af: 	cmpl	%esi, %edx
    000000b1: 	jle	.Ltmp284 # Offset: 177
    000000b3: 	movslq	%esi, %rsi
    000000b6: 	addb	(%rdi,%rsi), %al
    000000b9: 	leal	0x2(%rcx), %esi
    000000bc: 	cmpl	%edx, %esi
    000000be: 	jge	.Ltmp284 # Offset: 190
    000000c0: 	movslq	%esi, %rsi
    000000c3: 	addb	(%rdi,%rsi), %al
    000000c6: 	leal	0x3(%rcx), %esi
    000000c9: 	cmpl	%esi, %edx
    000000cb: 	jle	.Ltmp284 # Offset: 203
    000000cd: 	movslq	%esi, %rsi
    000000d0: 	addb	(%rdi,%rsi), %al
    000000d3: 	leal	0x4(%rcx), %esi
    000000d6: 	cmpl	%esi, %edx
    000000d8: 	jle	.Ltmp284 # Offset: 216
    000000da: 	movslq	%esi, %rsi
    000000dd: 	addb	(%rdi,%rsi), %al
    000000e0: 	leal	0x5(%rcx), %esi
    000000e3: 	cmpl	%esi, %edx
    000000e5: 	jle	.Ltmp284 # Offset: 229
    000000e7: 	movslq	%esi, %rsi
    000000ea: 	addl	$0x6, %ecx
    000000ed: 	addb	(%rdi,%rsi), %al
    000000f0: 	cmpl	%ecx, %edx
    000000f2: 	jle	.Ltmp284 # Offset: 242
    000000f4: 	movslq	%ecx, %rcx
    000000f7: 	addb	(%rdi,%rcx), %al
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp279:
    00000100: 	xorl	%eax, %eax
.Ltmp284:
    00000102: 	retq # Offset: 258
.Ltmp280:
    00000103: 	xorl	%esi, %esi
    00000105: 	xorl	%ecx, %ecx
    00000107: 	xorl	%eax, %eax
    00000109: 	jmp	.Ltmp285 # Offset: 265
.Ltmp282:
    0000010e: 	retq # Offset: 270
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_for_loop2_global2IhET_PKS0_iS0_"

Binary Function "_Z23test_while_loop2_globalIhET_PKS0_iS0_" after disassembly {
  Number      : 76
  State       : disassembled
  Address     : 0x4ab0
  Size        : 0x10f
  MaxSize     : 0x110
  Offset      : 0x4ab0
  Section     : .text
  Orc Section : .local.text._Z23test_while_loop2_globalIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB075:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp286 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0xe, %eax
    00000014: 	jbe	.Ltmp287 # Offset: 20
    0000001a: 	movl	%esi, %ecx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	pxor	%xmm0, %xmm0
    00000023: 	shrl	$0x4, %ecx
    00000026: 	subl	$0x1, %ecx
    00000029: 	shlq	$0x4, %rcx
    0000002d: 	leaq	0x10(%rdi,%rcx), %rcx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp288:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddb	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp288 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%edx, %esi
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x10, %esi
    00000057: 	paddb	%xmm1, %xmm0
    0000005b: 	pxor	%xmm1, %xmm1
    0000005f: 	movl	%esi, %ecx
    00000061: 	psadbw	%xmm1, %xmm0
    00000065: 	movd	%xmm0, %eax
    00000069: 	cmpl	%esi, %edx
    0000006b: 	je	.Ltmp289 # Offset: 107
.Ltmp292:
    00000071: 	movl	%edx, %r8d
    00000074: 	subl	%esi, %r8d
    00000077: 	leal	-0x1(%r8), %r9d
    0000007b: 	cmpl	$0x6, %r9d
    0000007f: 	jbe	.Ltmp290 # Offset: 127
    00000081: 	movq	(%rdi,%rsi), %xmm1
    00000086: 	pxor	%xmm0, %xmm0
    0000008a: 	movdqa	%xmm1, %xmm3
    0000008e: 	psadbw	%xmm0, %xmm3
    00000092: 	movq	%xmm3, %rsi
    00000097: 	addl	%esi, %eax
    00000099: 	movl	%r8d, %esi
    0000009c: 	andl	$-0x8, %esi
    0000009f: 	addl	%esi, %ecx
    000000a1: 	cmpl	%esi, %r8d
    000000a4: 	je	.Ltmp291 # Offset: 164
.Ltmp290:
    000000a6: 	movslq	%ecx, %rsi
    000000a9: 	addb	(%rdi,%rsi), %al
    000000ac: 	leal	0x1(%rcx), %esi
    000000af: 	cmpl	%esi, %edx
    000000b1: 	jle	.Ltmp291 # Offset: 177
    000000b3: 	movslq	%esi, %rsi
    000000b6: 	addb	(%rdi,%rsi), %al
    000000b9: 	leal	0x2(%rcx), %esi
    000000bc: 	cmpl	%edx, %esi
    000000be: 	jge	.Ltmp291 # Offset: 190
    000000c0: 	movslq	%esi, %rsi
    000000c3: 	addb	(%rdi,%rsi), %al
    000000c6: 	leal	0x3(%rcx), %esi
    000000c9: 	cmpl	%esi, %edx
    000000cb: 	jle	.Ltmp291 # Offset: 203
    000000cd: 	movslq	%esi, %rsi
    000000d0: 	addb	(%rdi,%rsi), %al
    000000d3: 	leal	0x4(%rcx), %esi
    000000d6: 	cmpl	%esi, %edx
    000000d8: 	jle	.Ltmp291 # Offset: 216
    000000da: 	movslq	%esi, %rsi
    000000dd: 	addb	(%rdi,%rsi), %al
    000000e0: 	leal	0x5(%rcx), %esi
    000000e3: 	cmpl	%esi, %edx
    000000e5: 	jle	.Ltmp291 # Offset: 229
    000000e7: 	movslq	%esi, %rsi
    000000ea: 	addl	$0x6, %ecx
    000000ed: 	addb	(%rdi,%rsi), %al
    000000f0: 	cmpl	%ecx, %edx
    000000f2: 	jle	.Ltmp291 # Offset: 242
    000000f4: 	movslq	%ecx, %rcx
    000000f7: 	addb	(%rdi,%rcx), %al
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp286:
    00000100: 	xorl	%eax, %eax
.Ltmp291:
    00000102: 	retq # Offset: 258
.Ltmp287:
    00000103: 	xorl	%esi, %esi
    00000105: 	xorl	%ecx, %ecx
    00000107: 	xorl	%eax, %eax
    00000109: 	jmp	.Ltmp292 # Offset: 265
.Ltmp289:
    0000010e: 	retq # Offset: 270
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_while_loop2_globalIhET_PKS0_iS0_"

Binary Function "_Z24test_while_loop2_global2IhET_PKS0_iS0_" after disassembly {
  Number      : 77
  State       : disassembled
  Address     : 0x4bc0
  Size        : 0x10f
  MaxSize     : 0x110
  Offset      : 0x4bc0
  Section     : .text
  Orc Section : .local.text._Z24test_while_loop2_global2IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB076:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp293 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0xe, %eax
    00000014: 	jbe	.Ltmp294 # Offset: 20
    0000001a: 	movl	%esi, %ecx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	pxor	%xmm0, %xmm0
    00000023: 	shrl	$0x4, %ecx
    00000026: 	subl	$0x1, %ecx
    00000029: 	shlq	$0x4, %rcx
    0000002d: 	leaq	0x10(%rdi,%rcx), %rcx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp295:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddb	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp295 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%edx, %esi
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x10, %esi
    00000057: 	paddb	%xmm1, %xmm0
    0000005b: 	pxor	%xmm1, %xmm1
    0000005f: 	movl	%esi, %ecx
    00000061: 	psadbw	%xmm1, %xmm0
    00000065: 	movd	%xmm0, %eax
    00000069: 	cmpl	%esi, %edx
    0000006b: 	je	.Ltmp296 # Offset: 107
.Ltmp299:
    00000071: 	movl	%edx, %r8d
    00000074: 	subl	%esi, %r8d
    00000077: 	leal	-0x1(%r8), %r9d
    0000007b: 	cmpl	$0x6, %r9d
    0000007f: 	jbe	.Ltmp297 # Offset: 127
    00000081: 	movq	(%rdi,%rsi), %xmm1
    00000086: 	pxor	%xmm0, %xmm0
    0000008a: 	movdqa	%xmm1, %xmm3
    0000008e: 	psadbw	%xmm0, %xmm3
    00000092: 	movq	%xmm3, %rsi
    00000097: 	addl	%esi, %eax
    00000099: 	movl	%r8d, %esi
    0000009c: 	andl	$-0x8, %esi
    0000009f: 	addl	%esi, %ecx
    000000a1: 	cmpl	%esi, %r8d
    000000a4: 	je	.Ltmp298 # Offset: 164
.Ltmp297:
    000000a6: 	movslq	%ecx, %rsi
    000000a9: 	addb	(%rdi,%rsi), %al
    000000ac: 	leal	0x1(%rcx), %esi
    000000af: 	cmpl	%esi, %edx
    000000b1: 	jle	.Ltmp298 # Offset: 177
    000000b3: 	movslq	%esi, %rsi
    000000b6: 	addb	(%rdi,%rsi), %al
    000000b9: 	leal	0x2(%rcx), %esi
    000000bc: 	cmpl	%edx, %esi
    000000be: 	jge	.Ltmp298 # Offset: 190
    000000c0: 	movslq	%esi, %rsi
    000000c3: 	addb	(%rdi,%rsi), %al
    000000c6: 	leal	0x3(%rcx), %esi
    000000c9: 	cmpl	%esi, %edx
    000000cb: 	jle	.Ltmp298 # Offset: 203
    000000cd: 	movslq	%esi, %rsi
    000000d0: 	addb	(%rdi,%rsi), %al
    000000d3: 	leal	0x4(%rcx), %esi
    000000d6: 	cmpl	%esi, %edx
    000000d8: 	jle	.Ltmp298 # Offset: 216
    000000da: 	movslq	%esi, %rsi
    000000dd: 	addb	(%rdi,%rsi), %al
    000000e0: 	leal	0x5(%rcx), %esi
    000000e3: 	cmpl	%esi, %edx
    000000e5: 	jle	.Ltmp298 # Offset: 229
    000000e7: 	movslq	%esi, %rsi
    000000ea: 	addl	$0x6, %ecx
    000000ed: 	addb	(%rdi,%rsi), %al
    000000f0: 	cmpl	%ecx, %edx
    000000f2: 	jle	.Ltmp298 # Offset: 242
    000000f4: 	movslq	%ecx, %rcx
    000000f7: 	addb	(%rdi,%rcx), %al
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp293:
    00000100: 	xorl	%eax, %eax
.Ltmp298:
    00000102: 	retq # Offset: 258
.Ltmp294:
    00000103: 	xorl	%esi, %esi
    00000105: 	xorl	%ecx, %ecx
    00000107: 	xorl	%eax, %eax
    00000109: 	jmp	.Ltmp299 # Offset: 265
.Ltmp296:
    0000010e: 	retq # Offset: 270
DWARF CFI Instructions:
    <empty>
End of Function "_Z24test_while_loop2_global2IhET_PKS0_iS0_"

Binary Function "_Z20test_do_loop2_globalIhET_PKS0_iS0_" after disassembly {
  Number      : 78
  State       : disassembled
  Address     : 0x4cd0
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x4cd0
  Section     : .text
  Orc Section : .local.text._Z20test_do_loop2_globalIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB077:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp300 # Offset: 13
    00000013: 	leal	-0x1(%rsi), %esi
    00000016: 	cmpl	$0xe, %esi
    00000019: 	jbe	.Ltmp301 # Offset: 25
    0000001f: 	movl	%edx, %esi
    00000021: 	movq	%rdi, %rax
    00000024: 	pxor	%xmm0, %xmm0
    00000028: 	shrl	$0x4, %esi
    0000002b: 	subl	$0x1, %esi
    0000002e: 	shlq	$0x4, %rsi
    00000032: 	leaq	0x10(%rdi,%rsi), %rsi
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp302:
    00000040: 	movdqu	(%rax), %xmm2
    00000044: 	addq	$0x10, %rax
    00000048: 	paddb	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rsi
    0000004f: 	jne	.Ltmp302 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%edx, %edi
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x10, %edi
    0000005f: 	paddb	%xmm1, %xmm0
    00000063: 	pxor	%xmm1, %xmm1
    00000067: 	movl	%edi, %esi
    00000069: 	psadbw	%xmm1, %xmm0
    0000006d: 	movd	%xmm0, %eax
    00000071: 	cmpl	%edi, %edx
    00000073: 	je	.Ltmp303 # Offset: 115
.Ltmp305:
    00000079: 	movl	%edx, %r8d
    0000007c: 	subl	%edi, %r8d
    0000007f: 	leal	-0x1(%r8), %r9d
    00000083: 	cmpl	$0x6, %r9d
    00000087: 	jbe	.Ltmp304 # Offset: 135
    00000089: 	movq	(%rcx,%rdi), %xmm1
    0000008e: 	pxor	%xmm0, %xmm0
    00000092: 	movdqa	%xmm1, %xmm3
    00000096: 	psadbw	%xmm0, %xmm3
    0000009a: 	movq	%xmm3, %rdi
    0000009f: 	addl	%edi, %eax
    000000a1: 	movl	%r8d, %edi
    000000a4: 	andl	$-0x8, %edi
    000000a7: 	addl	%edi, %esi
    000000a9: 	cmpl	%edi, %r8d
    000000ac: 	je	.Ltmp300 # Offset: 172
.Ltmp304:
    000000ae: 	movslq	%esi, %rdi
    000000b1: 	addb	(%rcx,%rdi), %al
    000000b4: 	leal	0x1(%rsi), %edi
    000000b7: 	cmpl	%edi, %edx
    000000b9: 	jle	.Ltmp300 # Offset: 185
    000000bb: 	movslq	%edi, %rdi
    000000be: 	addb	(%rcx,%rdi), %al
    000000c1: 	leal	0x2(%rsi), %edi
    000000c4: 	cmpl	%edi, %edx
    000000c6: 	jle	.Ltmp300 # Offset: 198
    000000c8: 	movslq	%edi, %rdi
    000000cb: 	addb	(%rcx,%rdi), %al
    000000ce: 	leal	0x3(%rsi), %edi
    000000d1: 	cmpl	%edi, %edx
    000000d3: 	jle	.Ltmp300 # Offset: 211
    000000d5: 	movslq	%edi, %rdi
    000000d8: 	addb	(%rcx,%rdi), %al
    000000db: 	leal	0x4(%rsi), %edi
    000000de: 	cmpl	%edi, %edx
    000000e0: 	jle	.Ltmp300 # Offset: 224
    000000e2: 	movslq	%edi, %rdi
    000000e5: 	addb	(%rcx,%rdi), %al
    000000e8: 	leal	0x5(%rsi), %edi
    000000eb: 	cmpl	%edi, %edx
    000000ed: 	jle	.Ltmp300 # Offset: 237
    000000ef: 	movslq	%edi, %rdi
    000000f2: 	addl	$0x6, %esi
    000000f5: 	addb	(%rcx,%rdi), %al
    000000f8: 	cmpl	%esi, %edx
    000000fa: 	jle	.Ltmp300 # Offset: 250
    000000fc: 	movslq	%esi, %rsi
    000000ff: 	addb	(%rcx,%rsi), %al
.Ltmp300:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp301:
    00000108: 	xorl	%edi, %edi
    0000010a: 	xorl	%esi, %esi
    0000010c: 	jmp	.Ltmp305 # Offset: 268
.Ltmp303:
    00000111: 	retq # Offset: 273
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_do_loop2_globalIhET_PKS0_iS0_"

Binary Function "_Z21test_do_loop2_global2IhET_PKS0_iS0_" after disassembly {
  Number      : 79
  State       : disassembled
  Address     : 0x4df0
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x4df0
  Section     : .text
  Orc Section : .local.text._Z21test_do_loop2_global2IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB078:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp306 # Offset: 13
    00000013: 	leal	-0x1(%rsi), %esi
    00000016: 	cmpl	$0xe, %esi
    00000019: 	jbe	.Ltmp307 # Offset: 25
    0000001f: 	movl	%edx, %esi
    00000021: 	movq	%rdi, %rax
    00000024: 	pxor	%xmm0, %xmm0
    00000028: 	shrl	$0x4, %esi
    0000002b: 	subl	$0x1, %esi
    0000002e: 	shlq	$0x4, %rsi
    00000032: 	leaq	0x10(%rdi,%rsi), %rsi
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp308:
    00000040: 	movdqu	(%rax), %xmm2
    00000044: 	addq	$0x10, %rax
    00000048: 	paddb	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rsi
    0000004f: 	jne	.Ltmp308 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%edx, %edi
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x10, %edi
    0000005f: 	paddb	%xmm1, %xmm0
    00000063: 	pxor	%xmm1, %xmm1
    00000067: 	movl	%edi, %esi
    00000069: 	psadbw	%xmm1, %xmm0
    0000006d: 	movd	%xmm0, %eax
    00000071: 	cmpl	%edi, %edx
    00000073: 	je	.Ltmp309 # Offset: 115
.Ltmp311:
    00000079: 	movl	%edx, %r8d
    0000007c: 	subl	%edi, %r8d
    0000007f: 	leal	-0x1(%r8), %r9d
    00000083: 	cmpl	$0x6, %r9d
    00000087: 	jbe	.Ltmp310 # Offset: 135
    00000089: 	movq	(%rcx,%rdi), %xmm1
    0000008e: 	pxor	%xmm0, %xmm0
    00000092: 	movdqa	%xmm1, %xmm3
    00000096: 	psadbw	%xmm0, %xmm3
    0000009a: 	movq	%xmm3, %rdi
    0000009f: 	addl	%edi, %eax
    000000a1: 	movl	%r8d, %edi
    000000a4: 	andl	$-0x8, %edi
    000000a7: 	addl	%edi, %esi
    000000a9: 	cmpl	%edi, %r8d
    000000ac: 	je	.Ltmp306 # Offset: 172
.Ltmp310:
    000000ae: 	movslq	%esi, %rdi
    000000b1: 	addb	(%rcx,%rdi), %al
    000000b4: 	leal	0x1(%rsi), %edi
    000000b7: 	cmpl	%edi, %edx
    000000b9: 	jle	.Ltmp306 # Offset: 185
    000000bb: 	movslq	%edi, %rdi
    000000be: 	addb	(%rcx,%rdi), %al
    000000c1: 	leal	0x2(%rsi), %edi
    000000c4: 	cmpl	%edi, %edx
    000000c6: 	jle	.Ltmp306 # Offset: 198
    000000c8: 	movslq	%edi, %rdi
    000000cb: 	addb	(%rcx,%rdi), %al
    000000ce: 	leal	0x3(%rsi), %edi
    000000d1: 	cmpl	%edi, %edx
    000000d3: 	jle	.Ltmp306 # Offset: 211
    000000d5: 	movslq	%edi, %rdi
    000000d8: 	addb	(%rcx,%rdi), %al
    000000db: 	leal	0x4(%rsi), %edi
    000000de: 	cmpl	%edi, %edx
    000000e0: 	jle	.Ltmp306 # Offset: 224
    000000e2: 	movslq	%edi, %rdi
    000000e5: 	addb	(%rcx,%rdi), %al
    000000e8: 	leal	0x5(%rsi), %edi
    000000eb: 	cmpl	%edi, %edx
    000000ed: 	jle	.Ltmp306 # Offset: 237
    000000ef: 	movslq	%edi, %rdi
    000000f2: 	addl	$0x6, %esi
    000000f5: 	addb	(%rcx,%rdi), %al
    000000f8: 	cmpl	%esi, %edx
    000000fa: 	jle	.Ltmp306 # Offset: 250
    000000fc: 	movslq	%esi, %rsi
    000000ff: 	addb	(%rcx,%rsi), %al
.Ltmp306:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp307:
    00000108: 	xorl	%edi, %edi
    0000010a: 	xorl	%esi, %esi
    0000010c: 	jmp	.Ltmp311 # Offset: 268
.Ltmp309:
    00000111: 	retq # Offset: 273
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_do_loop2_global2IhET_PKS0_iS0_"

Binary Function "_Z22test_goto_loop2_globalIhET_PKS0_iS0_" after disassembly {
  Number      : 80
  State       : disassembled
  Address     : 0x4f10
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x4f10
  Section     : .text
  Orc Section : .local.text._Z22test_goto_loop2_globalIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB079:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp312 # Offset: 13
    00000013: 	leal	-0x1(%rsi), %esi
    00000016: 	cmpl	$0xe, %esi
    00000019: 	jbe	.Ltmp313 # Offset: 25
    0000001f: 	movl	%edx, %esi
    00000021: 	movq	%rdi, %rax
    00000024: 	pxor	%xmm0, %xmm0
    00000028: 	shrl	$0x4, %esi
    0000002b: 	subl	$0x1, %esi
    0000002e: 	shlq	$0x4, %rsi
    00000032: 	leaq	0x10(%rdi,%rsi), %rsi
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp314:
    00000040: 	movdqu	(%rax), %xmm2
    00000044: 	addq	$0x10, %rax
    00000048: 	paddb	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rsi
    0000004f: 	jne	.Ltmp314 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%edx, %edi
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x10, %edi
    0000005f: 	paddb	%xmm1, %xmm0
    00000063: 	pxor	%xmm1, %xmm1
    00000067: 	movl	%edi, %esi
    00000069: 	psadbw	%xmm1, %xmm0
    0000006d: 	movd	%xmm0, %eax
    00000071: 	cmpl	%edi, %edx
    00000073: 	je	.Ltmp315 # Offset: 115
.Ltmp317:
    00000079: 	movl	%edx, %r8d
    0000007c: 	subl	%edi, %r8d
    0000007f: 	leal	-0x1(%r8), %r9d
    00000083: 	cmpl	$0x6, %r9d
    00000087: 	jbe	.Ltmp316 # Offset: 135
    00000089: 	movq	(%rcx,%rdi), %xmm1
    0000008e: 	pxor	%xmm0, %xmm0
    00000092: 	movdqa	%xmm1, %xmm3
    00000096: 	psadbw	%xmm0, %xmm3
    0000009a: 	movq	%xmm3, %rdi
    0000009f: 	addl	%edi, %eax
    000000a1: 	movl	%r8d, %edi
    000000a4: 	andl	$-0x8, %edi
    000000a7: 	addl	%edi, %esi
    000000a9: 	cmpl	%edi, %r8d
    000000ac: 	je	.Ltmp312 # Offset: 172
.Ltmp316:
    000000ae: 	movslq	%esi, %rdi
    000000b1: 	addb	(%rcx,%rdi), %al
    000000b4: 	leal	0x1(%rsi), %edi
    000000b7: 	cmpl	%edi, %edx
    000000b9: 	jle	.Ltmp312 # Offset: 185
    000000bb: 	movslq	%edi, %rdi
    000000be: 	addb	(%rcx,%rdi), %al
    000000c1: 	leal	0x2(%rsi), %edi
    000000c4: 	cmpl	%edi, %edx
    000000c6: 	jle	.Ltmp312 # Offset: 198
    000000c8: 	movslq	%edi, %rdi
    000000cb: 	addb	(%rcx,%rdi), %al
    000000ce: 	leal	0x3(%rsi), %edi
    000000d1: 	cmpl	%edi, %edx
    000000d3: 	jle	.Ltmp312 # Offset: 211
    000000d5: 	movslq	%edi, %rdi
    000000d8: 	addb	(%rcx,%rdi), %al
    000000db: 	leal	0x4(%rsi), %edi
    000000de: 	cmpl	%edi, %edx
    000000e0: 	jle	.Ltmp312 # Offset: 224
    000000e2: 	movslq	%edi, %rdi
    000000e5: 	addb	(%rcx,%rdi), %al
    000000e8: 	leal	0x5(%rsi), %edi
    000000eb: 	cmpl	%edi, %edx
    000000ed: 	jle	.Ltmp312 # Offset: 237
    000000ef: 	movslq	%edi, %rdi
    000000f2: 	addl	$0x6, %esi
    000000f5: 	addb	(%rcx,%rdi), %al
    000000f8: 	cmpl	%esi, %edx
    000000fa: 	jle	.Ltmp312 # Offset: 250
    000000fc: 	movslq	%esi, %rsi
    000000ff: 	addb	(%rcx,%rsi), %al
.Ltmp312:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp313:
    00000108: 	xorl	%edi, %edi
    0000010a: 	xorl	%esi, %esi
    0000010c: 	jmp	.Ltmp317 # Offset: 268
.Ltmp315:
    00000111: 	retq # Offset: 273
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_goto_loop2_globalIhET_PKS0_iS0_"

Binary Function "_Z23test_goto_loop2_global2IhET_PKS0_iS0_" after disassembly {
  Number      : 81
  State       : disassembled
  Address     : 0x5030
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x5030
  Section     : .text
  Orc Section : .local.text._Z23test_goto_loop2_global2IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB080:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp318 # Offset: 13
    00000013: 	leal	-0x1(%rsi), %esi
    00000016: 	cmpl	$0xe, %esi
    00000019: 	jbe	.Ltmp319 # Offset: 25
    0000001f: 	movl	%edx, %esi
    00000021: 	movq	%rdi, %rax
    00000024: 	pxor	%xmm0, %xmm0
    00000028: 	shrl	$0x4, %esi
    0000002b: 	subl	$0x1, %esi
    0000002e: 	shlq	$0x4, %rsi
    00000032: 	leaq	0x10(%rdi,%rsi), %rsi
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp320:
    00000040: 	movdqu	(%rax), %xmm2
    00000044: 	addq	$0x10, %rax
    00000048: 	paddb	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rsi
    0000004f: 	jne	.Ltmp320 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%edx, %edi
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x10, %edi
    0000005f: 	paddb	%xmm1, %xmm0
    00000063: 	pxor	%xmm1, %xmm1
    00000067: 	movl	%edi, %esi
    00000069: 	psadbw	%xmm1, %xmm0
    0000006d: 	movd	%xmm0, %eax
    00000071: 	cmpl	%edi, %edx
    00000073: 	je	.Ltmp321 # Offset: 115
.Ltmp323:
    00000079: 	movl	%edx, %r8d
    0000007c: 	subl	%edi, %r8d
    0000007f: 	leal	-0x1(%r8), %r9d
    00000083: 	cmpl	$0x6, %r9d
    00000087: 	jbe	.Ltmp322 # Offset: 135
    00000089: 	movq	(%rcx,%rdi), %xmm1
    0000008e: 	pxor	%xmm0, %xmm0
    00000092: 	movdqa	%xmm1, %xmm3
    00000096: 	psadbw	%xmm0, %xmm3
    0000009a: 	movq	%xmm3, %rdi
    0000009f: 	addl	%edi, %eax
    000000a1: 	movl	%r8d, %edi
    000000a4: 	andl	$-0x8, %edi
    000000a7: 	addl	%edi, %esi
    000000a9: 	cmpl	%edi, %r8d
    000000ac: 	je	.Ltmp318 # Offset: 172
.Ltmp322:
    000000ae: 	movslq	%esi, %rdi
    000000b1: 	addb	(%rcx,%rdi), %al
    000000b4: 	leal	0x1(%rsi), %edi
    000000b7: 	cmpl	%edi, %edx
    000000b9: 	jle	.Ltmp318 # Offset: 185
    000000bb: 	movslq	%edi, %rdi
    000000be: 	addb	(%rcx,%rdi), %al
    000000c1: 	leal	0x2(%rsi), %edi
    000000c4: 	cmpl	%edi, %edx
    000000c6: 	jle	.Ltmp318 # Offset: 198
    000000c8: 	movslq	%edi, %rdi
    000000cb: 	addb	(%rcx,%rdi), %al
    000000ce: 	leal	0x3(%rsi), %edi
    000000d1: 	cmpl	%edi, %edx
    000000d3: 	jle	.Ltmp318 # Offset: 211
    000000d5: 	movslq	%edi, %rdi
    000000d8: 	addb	(%rcx,%rdi), %al
    000000db: 	leal	0x4(%rsi), %edi
    000000de: 	cmpl	%edi, %edx
    000000e0: 	jle	.Ltmp318 # Offset: 224
    000000e2: 	movslq	%edi, %rdi
    000000e5: 	addb	(%rcx,%rdi), %al
    000000e8: 	leal	0x5(%rsi), %edi
    000000eb: 	cmpl	%edi, %edx
    000000ed: 	jle	.Ltmp318 # Offset: 237
    000000ef: 	movslq	%edi, %rdi
    000000f2: 	addl	$0x6, %esi
    000000f5: 	addb	(%rcx,%rdi), %al
    000000f8: 	cmpl	%esi, %edx
    000000fa: 	jle	.Ltmp318 # Offset: 250
    000000fc: 	movslq	%esi, %rsi
    000000ff: 	addb	(%rcx,%rsi), %al
.Ltmp318:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp319:
    00000108: 	xorl	%edi, %edi
    0000010a: 	xorl	%esi, %esi
    0000010c: 	jmp	.Ltmp323 # Offset: 268
.Ltmp321:
    00000111: 	retq # Offset: 273
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_goto_loop2_global2IhET_PKS0_iS0_"

Binary Function "_Z18test_for_loop3_optIhET_PKS0_iS0_" after disassembly {
  Number      : 82
  State       : disassembled
  Address     : 0x5150
  Size        : 0x513
  MaxSize     : 0x520
  Offset      : 0x5150
  Section     : .text
  Orc Section : .local.text._Z18test_for_loop3_optIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB081:
    00000000: 	endbr64
    00000004: 	movzbl	%dl, %edx
    00000007: 	movslq	%esi, %r8
    0000000a: 	leal	(%rdx,%rdx), %eax
    0000000d: 	cmpl	%r8d, %eax
    00000010: 	jle	.Ltmp324 # Offset: 16
    00000016: 	testl	%edx, %edx
    00000018: 	je	.Ltmp325 # Offset: 24
    0000001e: 	testl	%r8d, %r8d
    00000021: 	jle	.Ltmp325 # Offset: 33
    00000027: 	cmpl	%r8d, %edx
    0000002a: 	movl	$0x1, %ecx
    0000002f: 	cmovgq	%r8, %rdx
    00000033: 	testl	%edx, %edx
    00000035: 	cmovgl	%edx, %ecx
    00000038: 	cmpl	$0xf, %edx
    0000003b: 	jle	.Ltmp326 # Offset: 59
    00000041: 	movdqa	DATAat0x38840(%rip), %xmm1
    00000049: 	movdqu	(%rdi), %xmm0
    0000004d: 	movl	%ecx, %eax
    0000004f: 	shrl	$0x4, %eax
    00000052: 	paddb	%xmm1, %xmm0
    00000056: 	cmpl	$0x1, %eax
    00000059: 	je	.Ltmp327 # Offset: 89
    0000005f: 	movdqu	0x10(%rdi), %xmm7
    00000064: 	paddb	%xmm7, %xmm0
    00000068: 	paddb	%xmm1, %xmm0
    0000006c: 	cmpl	$0x2, %eax
    0000006f: 	je	.Ltmp327 # Offset: 111
    00000075: 	movdqu	0x20(%rdi), %xmm2
    0000007a: 	paddb	%xmm1, %xmm2
    0000007e: 	paddb	%xmm2, %xmm0
    00000082: 	cmpl	$0x3, %eax
    00000085: 	je	.Ltmp327 # Offset: 133
    0000008b: 	movdqu	0x30(%rdi), %xmm2
    00000090: 	paddb	%xmm1, %xmm2
    00000094: 	paddb	%xmm2, %xmm0
    00000098: 	cmpl	$0x4, %eax
    0000009b: 	je	.Ltmp327 # Offset: 155
    000000a1: 	movdqu	0x40(%rdi), %xmm2
    000000a6: 	paddb	%xmm1, %xmm2
    000000aa: 	paddb	%xmm2, %xmm0
    000000ae: 	cmpl	$0x5, %eax
    000000b1: 	je	.Ltmp327 # Offset: 177
    000000b7: 	movdqu	0x50(%rdi), %xmm2
    000000bc: 	paddb	%xmm1, %xmm2
    000000c0: 	paddb	%xmm2, %xmm0
    000000c4: 	cmpl	$0x6, %eax
    000000c7: 	je	.Ltmp327 # Offset: 199
    000000cd: 	movdqu	0x60(%rdi), %xmm2
    000000d2: 	paddb	%xmm1, %xmm2
    000000d6: 	paddb	%xmm2, %xmm0
    000000da: 	cmpl	$0x7, %eax
    000000dd: 	je	.Ltmp327 # Offset: 221
    000000e3: 	movdqu	0x70(%rdi), %xmm2
    000000e8: 	paddb	%xmm1, %xmm2
    000000ec: 	paddb	%xmm2, %xmm0
    000000f0: 	cmpl	$0x8, %eax
    000000f3: 	je	.Ltmp327 # Offset: 243
    000000f9: 	movdqu	0x80(%rdi), %xmm2
    00000101: 	paddb	%xmm1, %xmm2
    00000105: 	paddb	%xmm2, %xmm0
    00000109: 	cmpl	$0x9, %eax
    0000010c: 	je	.Ltmp327 # Offset: 268
    00000112: 	movdqu	0x90(%rdi), %xmm2
    0000011a: 	paddb	%xmm1, %xmm2
    0000011e: 	paddb	%xmm2, %xmm0
    00000122: 	cmpl	$0xa, %eax
    00000125: 	je	.Ltmp327 # Offset: 293
    00000127: 	movdqu	0xa0(%rdi), %xmm2
    0000012f: 	paddb	%xmm1, %xmm2
    00000133: 	paddb	%xmm2, %xmm0
    00000137: 	cmpl	$0xb, %eax
    0000013a: 	je	.Ltmp327 # Offset: 314
    0000013c: 	movdqu	0xb0(%rdi), %xmm2
    00000144: 	paddb	%xmm1, %xmm2
    00000148: 	paddb	%xmm2, %xmm0
    0000014c: 	cmpl	$0xc, %eax
    0000014f: 	je	.Ltmp327 # Offset: 335
    00000151: 	movdqu	0xc0(%rdi), %xmm2
    00000159: 	paddb	%xmm1, %xmm2
    0000015d: 	paddb	%xmm2, %xmm0
    00000161: 	cmpl	$0xd, %eax
    00000164: 	je	.Ltmp327 # Offset: 356
    00000166: 	movdqu	0xd0(%rdi), %xmm2
    0000016e: 	paddb	%xmm1, %xmm2
    00000172: 	paddb	%xmm2, %xmm0
    00000176: 	cmpl	$0xf, %eax
    00000179: 	jne	.Ltmp327 # Offset: 377
    0000017b: 	movdqu	0xe0(%rdi), %xmm7
    00000183: 	paddb	%xmm7, %xmm1
    00000187: 	paddb	%xmm1, %xmm0
    0000018b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp327:
    00000190: 	movdqa	%xmm0, %xmm1
    00000194: 	movl	%ecx, %esi
    00000196: 	psrldq	$0x8, %xmm1
    0000019b: 	andl	$-0x10, %esi
    0000019e: 	paddb	%xmm1, %xmm0
    000001a2: 	pxor	%xmm1, %xmm1
    000001a6: 	movl	%esi, %r9d
    000001a9: 	psadbw	%xmm1, %xmm0
    000001ad: 	movd	%xmm0, %eax
    000001b1: 	cmpl	%esi, %ecx
    000001b3: 	je	.Ltmp328 # Offset: 435
.Ltmp342:
    000001b9: 	subl	%esi, %ecx
    000001bb: 	leal	-0x1(%rcx), %r10d
    000001bf: 	cmpl	$0x6, %r10d
    000001c3: 	jbe	.Ltmp329 # Offset: 451
    000001c5: 	movq	DATAat0x38840(%rip), %xmm1
    000001cd: 	movq	(%rdi,%rsi), %xmm0
    000001d2: 	paddb	%xmm0, %xmm1
    000001d6: 	pxor	%xmm0, %xmm0
    000001da: 	movdqa	%xmm1, %xmm4
    000001de: 	psadbw	%xmm0, %xmm4
    000001e2: 	movq	%xmm4, %rsi
    000001e7: 	movq	%xmm4, -0x18(%rsp)
    000001ed: 	movl	%esi, %r10d
    000001f0: 	movl	%ecx, %esi
    000001f2: 	andl	$-0x8, %esi
    000001f5: 	addl	%r10d, %eax
    000001f8: 	addl	%esi, %r9d
    000001fb: 	cmpl	%esi, %ecx
    000001fd: 	je	.Ltmp328 # Offset: 509
.Ltmp329:
    000001ff: 	movslq	%r9d, %rcx
    00000202: 	movzbl	(%rdi,%rcx), %ecx
    00000206: 	leal	0x1(%rax,%rcx), %eax
    0000020a: 	leal	0x1(%r9), %ecx
    0000020e: 	cmpl	%ecx, %edx
    00000210: 	jle	.Ltmp328 # Offset: 528
    00000212: 	movslq	%ecx, %rcx
    00000215: 	movzbl	(%rdi,%rcx), %ecx
    00000219: 	leal	0x1(%rax,%rcx), %eax
    0000021d: 	leal	0x2(%r9), %ecx
    00000221: 	cmpl	%ecx, %edx
    00000223: 	jle	.Ltmp328 # Offset: 547
    00000225: 	movslq	%ecx, %rcx
    00000228: 	movzbl	(%rdi,%rcx), %ecx
    0000022c: 	leal	0x1(%rax,%rcx), %eax
    00000230: 	leal	0x3(%r9), %ecx
    00000234: 	cmpl	%ecx, %edx
    00000236: 	jle	.Ltmp328 # Offset: 566
    00000238: 	movslq	%ecx, %rcx
    0000023b: 	movzbl	(%rdi,%rcx), %ecx
    0000023f: 	leal	0x1(%rax,%rcx), %eax
    00000243: 	leal	0x4(%r9), %ecx
    00000247: 	cmpl	%ecx, %edx
    00000249: 	jle	.Ltmp328 # Offset: 585
    0000024b: 	movslq	%ecx, %rcx
    0000024e: 	movzbl	(%rdi,%rcx), %ecx
    00000252: 	leal	0x1(%rax,%rcx), %eax
    00000256: 	leal	0x5(%r9), %ecx
    0000025a: 	cmpl	%ecx, %edx
    0000025c: 	jle	.Ltmp328 # Offset: 604
    0000025e: 	movslq	%ecx, %rcx
    00000261: 	movzbl	(%rdi,%rcx), %ecx
    00000265: 	leal	0x1(%rax,%rcx), %eax
    00000269: 	leal	0x6(%r9), %ecx
    0000026d: 	cmpl	%ecx, %edx
    0000026f: 	jle	.Ltmp328 # Offset: 623
    00000271: 	movslq	%ecx, %rcx
    00000274: 	movzbl	(%rdi,%rcx), %ecx
    00000278: 	leal	0x1(%rax,%rcx), %eax
.Ltmp328:
    0000027c: 	cmpl	%edx, %r8d
    0000027f: 	jle	.Ltmp330 # Offset: 639
    00000285: 	movl	%r8d, %r10d
    00000288: 	subl	%edx, %r10d
    0000028b: 	leal	-0x1(%r10), %ecx
    0000028f: 	cmpl	$0xe, %ecx
    00000292: 	jbe	.Ltmp331 # Offset: 658
    00000298: 	movl	%r10d, %ecx
    0000029b: 	pxor	%xmm1, %xmm1
    0000029f: 	pcmpeqd	%xmm2, %xmm2
    000002a3: 	movslq	%edx, %rsi
    000002a6: 	shrl	$0x4, %ecx
    000002a9: 	addq	%rdi, %rsi
    000002ac: 	leal	-0x1(%rcx), %r9d
    000002b0: 	leaq	0x10(%rsi), %rcx
    000002b4: 	shlq	$0x4, %r9
    000002b8: 	addq	%rcx, %r9
    000002bb: 	jmp	.Ltmp332 # Offset: 699
    000002bd: 	nopl	(%rax) # Size: 3
.Ltmp333:
    000002c0: 	addq	$0x10, %rcx
.Ltmp332:
    000002c4: 	movdqu	(%rsi), %xmm0
    000002c8: 	movq	%rcx, %rsi
    000002cb: 	paddb	%xmm2, %xmm0
    000002cf: 	paddb	%xmm0, %xmm1
    000002d3: 	cmpq	%r9, %rcx
    000002d6: 	jne	.Ltmp333 # Offset: 726
    000002d8: 	movdqa	%xmm1, %xmm0
    000002dc: 	psrldq	$0x8, %xmm0
    000002e1: 	paddb	%xmm0, %xmm1
    000002e5: 	pxor	%xmm0, %xmm0
    000002e9: 	psadbw	%xmm0, %xmm1
    000002ed: 	movd	%xmm1, %ecx
    000002f1: 	addl	%ecx, %eax
    000002f3: 	movl	%r10d, %ecx
    000002f6: 	andl	$-0x10, %ecx
    000002f9: 	leal	(%rcx,%rdx), %esi
    000002fc: 	cmpl	%ecx, %r10d
    000002ff: 	je	.Ltmp334 # Offset: 767
.Ltmp341:
    00000305: 	subl	%ecx, %r10d
    00000308: 	leal	-0x1(%r10), %r9d
    0000030c: 	cmpl	$0x6, %r9d
    00000310: 	jbe	.Ltmp335 # Offset: 784
    00000312: 	movq	DATAat0x38a10(%rip), %xmm1
    0000031a: 	addq	%rdi, %rdx
    0000031d: 	movq	(%rdx,%rcx), %xmm0
    00000322: 	movl	%r10d, %edx
    00000325: 	andl	$-0x8, %edx
    00000328: 	paddb	%xmm0, %xmm1
    0000032c: 	pxor	%xmm0, %xmm0
    00000330: 	addl	%edx, %esi
    00000332: 	movdqa	%xmm1, %xmm5
    00000336: 	psadbw	%xmm0, %xmm5
    0000033a: 	movq	%xmm5, %rcx
    0000033f: 	addl	%ecx, %eax
    00000341: 	cmpl	%edx, %r10d
    00000344: 	je	.Ltmp330 # Offset: 836
.Ltmp335:
    0000034a: 	movslq	%esi, %rdx
    0000034d: 	movzbl	(%rdi,%rdx), %edx
    00000351: 	leal	-0x1(%rax,%rdx), %eax
    00000355: 	leal	0x1(%rsi), %edx
    00000358: 	cmpl	%edx, %r8d
    0000035b: 	jle	.Ltmp330 # Offset: 859
    00000361: 	movslq	%edx, %rdx
    00000364: 	movzbl	(%rdi,%rdx), %edx
    00000368: 	leal	-0x1(%rax,%rdx), %eax
    0000036c: 	leal	0x2(%rsi), %edx
    0000036f: 	cmpl	%edx, %r8d
    00000372: 	jle	.Ltmp330 # Offset: 882
    00000378: 	movslq	%edx, %rdx
    0000037b: 	movzbl	(%rdi,%rdx), %edx
    0000037f: 	leal	-0x1(%rax,%rdx), %eax
    00000383: 	leal	0x3(%rsi), %edx
    00000386: 	cmpl	%edx, %r8d
    00000389: 	jle	.Ltmp330 # Offset: 905
    0000038f: 	movslq	%edx, %rdx
    00000392: 	movzbl	(%rdi,%rdx), %edx
    00000396: 	leal	-0x1(%rax,%rdx), %eax
    0000039a: 	leal	0x4(%rsi), %edx
    0000039d: 	cmpl	%edx, %r8d
    000003a0: 	jle	.Ltmp330 # Offset: 928
    000003a6: 	movslq	%edx, %rdx
    000003a9: 	movzbl	(%rdi,%rdx), %edx
    000003ad: 	leal	-0x1(%rax,%rdx), %eax
    000003b1: 	leal	0x5(%rsi), %edx
    000003b4: 	cmpl	%edx, %r8d
    000003b7: 	jle	.Ltmp330 # Offset: 951
    000003bd: 	movslq	%edx, %rdx
    000003c0: 	movzbl	(%rdi,%rdx), %edx
    000003c4: 	leal	-0x1(%rax,%rdx), %eax
    000003c8: 	leal	0x6(%rsi), %edx
    000003cb: 	cmpl	%edx, %r8d
    000003ce: 	jle	.Ltmp330 # Offset: 974
    000003d4: 	movslq	%edx, %rdx
    000003d7: 	movzbl	(%rdi,%rdx), %edx
    000003db: 	leal	-0x1(%rax,%rdx), %eax
    000003df: 	retq # Offset: 991
.Ltmp324:
    000003e0: 	testl	%r8d, %r8d
    000003e3: 	je	.Ltmp336 # Offset: 995
    000003e9: 	leal	-0x1(%r8), %eax
    000003ed: 	cmpl	$0xe, %eax
    000003f0: 	jbe	.Ltmp337 # Offset: 1008
    000003f6: 	movl	%r8d, %edx
    000003f9: 	movq	%rdi, %rax
    000003fc: 	pxor	%xmm0, %xmm0
    00000400: 	shrl	$0x4, %edx
    00000403: 	subl	$0x1, %edx
    00000406: 	shlq	$0x4, %rdx
    0000040a: 	leaq	0x10(%rdi,%rdx), %rdx
    0000040f: 	nop # Size: 1
.Ltmp338:
    00000410: 	movdqu	(%rax), %xmm3
    00000414: 	addq	$0x10, %rax
    00000418: 	paddb	%xmm3, %xmm0
    0000041c: 	cmpq	%rdx, %rax
    0000041f: 	jne	.Ltmp338 # Offset: 1055
    00000421: 	movdqa	%xmm0, %xmm1
    00000425: 	movl	%r8d, %ecx
    00000428: 	psrldq	$0x8, %xmm1
    0000042d: 	andl	$-0x10, %ecx
    00000430: 	paddb	%xmm1, %xmm0
    00000434: 	pxor	%xmm1, %xmm1
    00000438: 	movl	%ecx, %edx
    0000043a: 	psadbw	%xmm1, %xmm0
    0000043e: 	movd	%xmm0, %eax
    00000442: 	cmpl	%r8d, %ecx
    00000445: 	je	.Ltmp339 # Offset: 1093
.Ltmp343:
    0000044b: 	movl	%r8d, %esi
    0000044e: 	subl	%ecx, %esi
    00000450: 	leal	-0x1(%rsi), %r9d
    00000454: 	cmpl	$0x6, %r9d
    00000458: 	jbe	.Ltmp340 # Offset: 1112
    0000045a: 	movq	(%rdi,%rcx), %xmm1
    0000045f: 	pxor	%xmm0, %xmm0
    00000463: 	movdqa	%xmm1, %xmm6
    00000467: 	psadbw	%xmm0, %xmm6
    0000046b: 	movq	%xmm6, %rcx
    00000470: 	addl	%ecx, %eax
    00000472: 	movl	%esi, %ecx
    00000474: 	andl	$-0x8, %ecx
    00000477: 	addl	%ecx, %edx
    00000479: 	cmpl	%esi, %ecx
    0000047b: 	je	.Ltmp330 # Offset: 1147
.Ltmp340:
    0000047d: 	movslq	%edx, %rcx
    00000480: 	addb	(%rdi,%rcx), %al
    00000483: 	leal	0x1(%rdx), %ecx
    00000486: 	cmpl	%ecx, %r8d
    00000489: 	jle	.Ltmp330 # Offset: 1161
    0000048b: 	movslq	%ecx, %rcx
    0000048e: 	addb	(%rdi,%rcx), %al
    00000491: 	leal	0x2(%rdx), %ecx
    00000494: 	cmpl	%ecx, %r8d
    00000497: 	jle	.Ltmp330 # Offset: 1175
    00000499: 	movslq	%ecx, %rcx
    0000049c: 	addb	(%rdi,%rcx), %al
    0000049f: 	leal	0x3(%rdx), %ecx
    000004a2: 	cmpl	%ecx, %r8d
    000004a5: 	jle	.Ltmp330 # Offset: 1189
    000004a7: 	movslq	%ecx, %rcx
    000004aa: 	addb	(%rdi,%rcx), %al
    000004ad: 	leal	0x4(%rdx), %ecx
    000004b0: 	cmpl	%ecx, %r8d
    000004b3: 	jle	.Ltmp330 # Offset: 1203
    000004b5: 	movslq	%ecx, %rcx
    000004b8: 	addb	(%rdi,%rcx), %al
    000004bb: 	leal	0x5(%rdx), %ecx
    000004be: 	cmpl	%r8d, %ecx
    000004c1: 	jge	.Ltmp330 # Offset: 1217
    000004c3: 	movslq	%ecx, %rcx
    000004c6: 	addl	$0x6, %edx
    000004c9: 	addb	(%rdi,%rcx), %al
    000004cc: 	cmpl	%edx, %r8d
    000004cf: 	jle	.Ltmp330 # Offset: 1231
    000004d1: 	movslq	%edx, %rdx
    000004d4: 	addb	(%rdi,%rdx), %al
    000004d7: 	retq # Offset: 1239
    000004d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp336:
    000004e0: 	xorl	%eax, %eax
.Ltmp330:
    000004e2: 	retq # Offset: 1250
    000004e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp325:
    000004e8: 	xorl	%edx, %edx
    000004ea: 	xorl	%eax, %eax
    000004ec: 	jmp	.Ltmp328 # Offset: 1260
.Ltmp331:
    000004f1: 	movl	%edx, %esi
    000004f3: 	xorl	%ecx, %ecx
    000004f5: 	jmp	.Ltmp341 # Offset: 1269
.Ltmp326:
    000004fa: 	xorl	%esi, %esi
    000004fc: 	xorl	%r9d, %r9d
    000004ff: 	xorl	%eax, %eax
    00000501: 	jmp	.Ltmp342 # Offset: 1281
.Ltmp337:
    00000506: 	xorl	%ecx, %ecx
    00000508: 	xorl	%edx, %edx
    0000050a: 	xorl	%eax, %eax
    0000050c: 	jmp	.Ltmp343 # Offset: 1292
.Ltmp339:
    00000511: 	retq # Offset: 1297
.Ltmp334:
    00000512: 	retq # Offset: 1298
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_for_loop3_optIhET_PKS0_iS0_"

Binary Function "_Z22test_for_loop3_halfoptIhET_PKS0_iS0_" after disassembly {
  Number      : 83
  State       : disassembled
  Address     : 0x5670
  Size        : 0x51b
  MaxSize     : 0x520
  Offset      : 0x5670
  Section     : .text
  Orc Section : .local.text._Z22test_for_loop3_halfoptIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB082:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %r8
    00000007: 	movzbl	%dl, %edx
    0000000a: 	testl	%r8d, %r8d
    0000000d: 	jle	.Ltmp344 # Offset: 13
    00000013: 	testl	%edx, %edx
    00000015: 	je	.Ltmp344 # Offset: 21
    0000001b: 	cmpl	%edx, %r8d
    0000001e: 	movslq	%edx, %rsi
    00000021: 	movl	$0x1, %ecx
    00000026: 	cmovleq	%r8, %rsi
    0000002a: 	testl	%esi, %esi
    0000002c: 	cmovgl	%esi, %ecx
    0000002f: 	cmpl	$0xf, %esi
    00000032: 	jle	.Ltmp345 # Offset: 50
    00000038: 	movdqa	DATAat0x38840(%rip), %xmm1
    00000040: 	movdqu	(%rdi), %xmm0
    00000044: 	movl	%ecx, %eax
    00000046: 	shrl	$0x4, %eax
    00000049: 	paddb	%xmm1, %xmm0
    0000004d: 	cmpl	$0x1, %eax
    00000050: 	je	.Ltmp346 # Offset: 80
    00000056: 	movdqu	0x10(%rdi), %xmm6
    0000005b: 	paddb	%xmm6, %xmm0
    0000005f: 	paddb	%xmm1, %xmm0
    00000063: 	cmpl	$0x2, %eax
    00000066: 	je	.Ltmp346 # Offset: 102
    0000006c: 	movdqu	0x20(%rdi), %xmm2
    00000071: 	paddb	%xmm1, %xmm2
    00000075: 	paddb	%xmm2, %xmm0
    00000079: 	cmpl	$0x3, %eax
    0000007c: 	je	.Ltmp346 # Offset: 124
    00000082: 	movdqu	0x30(%rdi), %xmm2
    00000087: 	paddb	%xmm1, %xmm2
    0000008b: 	paddb	%xmm2, %xmm0
    0000008f: 	cmpl	$0x4, %eax
    00000092: 	je	.Ltmp346 # Offset: 146
    00000098: 	movdqu	0x40(%rdi), %xmm2
    0000009d: 	paddb	%xmm1, %xmm2
    000000a1: 	paddb	%xmm2, %xmm0
    000000a5: 	cmpl	$0x5, %eax
    000000a8: 	je	.Ltmp346 # Offset: 168
    000000ae: 	movdqu	0x50(%rdi), %xmm2
    000000b3: 	paddb	%xmm1, %xmm2
    000000b7: 	paddb	%xmm2, %xmm0
    000000bb: 	cmpl	$0x6, %eax
    000000be: 	je	.Ltmp346 # Offset: 190
    000000c4: 	movdqu	0x60(%rdi), %xmm2
    000000c9: 	paddb	%xmm1, %xmm2
    000000cd: 	paddb	%xmm2, %xmm0
    000000d1: 	cmpl	$0x7, %eax
    000000d4: 	je	.Ltmp346 # Offset: 212
    000000da: 	movdqu	0x70(%rdi), %xmm2
    000000df: 	paddb	%xmm1, %xmm2
    000000e3: 	paddb	%xmm2, %xmm0
    000000e7: 	cmpl	$0x8, %eax
    000000ea: 	je	.Ltmp346 # Offset: 234
    000000f0: 	movdqu	0x80(%rdi), %xmm2
    000000f8: 	paddb	%xmm1, %xmm2
    000000fc: 	paddb	%xmm2, %xmm0
    00000100: 	cmpl	$0x9, %eax
    00000103: 	je	.Ltmp346 # Offset: 259
    00000105: 	movdqu	0x90(%rdi), %xmm2
    0000010d: 	paddb	%xmm1, %xmm2
    00000111: 	paddb	%xmm2, %xmm0
    00000115: 	cmpl	$0xa, %eax
    00000118: 	je	.Ltmp346 # Offset: 280
    0000011a: 	movdqu	0xa0(%rdi), %xmm2
    00000122: 	paddb	%xmm1, %xmm2
    00000126: 	paddb	%xmm2, %xmm0
    0000012a: 	cmpl	$0xb, %eax
    0000012d: 	je	.Ltmp346 # Offset: 301
    0000012f: 	movdqu	0xb0(%rdi), %xmm2
    00000137: 	paddb	%xmm1, %xmm2
    0000013b: 	paddb	%xmm2, %xmm0
    0000013f: 	cmpl	$0xc, %eax
    00000142: 	je	.Ltmp346 # Offset: 322
    00000144: 	movdqu	0xc0(%rdi), %xmm2
    0000014c: 	paddb	%xmm1, %xmm2
    00000150: 	paddb	%xmm2, %xmm0
    00000154: 	cmpl	$0xd, %eax
    00000157: 	je	.Ltmp346 # Offset: 343
    00000159: 	movdqu	0xd0(%rdi), %xmm2
    00000161: 	paddb	%xmm1, %xmm2
    00000165: 	paddb	%xmm2, %xmm0
    00000169: 	cmpl	$0xf, %eax
    0000016c: 	jne	.Ltmp346 # Offset: 364
    0000016e: 	movdqu	0xe0(%rdi), %xmm7
    00000176: 	paddb	%xmm7, %xmm1
    0000017a: 	paddb	%xmm1, %xmm0
    0000017e: 	nop # Size: 2
.Ltmp346:
    00000180: 	movdqa	%xmm0, %xmm1
    00000184: 	movl	%ecx, %r9d
    00000187: 	psrldq	$0x8, %xmm1
    0000018c: 	andl	$-0x10, %r9d
    00000190: 	paddb	%xmm1, %xmm0
    00000194: 	pxor	%xmm1, %xmm1
    00000198: 	movl	%r9d, %r10d
    0000019b: 	psadbw	%xmm1, %xmm0
    0000019f: 	movd	%xmm0, %eax
    000001a3: 	cmpl	%r9d, %ecx
    000001a6: 	je	.Ltmp347 # Offset: 422
.Ltmp362:
    000001ac: 	subl	%r9d, %ecx
    000001af: 	leal	-0x1(%rcx), %r11d
    000001b3: 	cmpl	$0x6, %r11d
    000001b7: 	jbe	.Ltmp348 # Offset: 439
    000001b9: 	movq	DATAat0x38840(%rip), %xmm1
    000001c1: 	movq	(%rdi,%r9), %xmm0
    000001c7: 	paddb	%xmm0, %xmm1
    000001cb: 	pxor	%xmm0, %xmm0
    000001cf: 	movdqa	%xmm1, %xmm3
    000001d3: 	psadbw	%xmm0, %xmm3
    000001d7: 	movq	%xmm3, %r9
    000001dc: 	movq	%xmm3, -0x10(%rsp)
    000001e2: 	movl	%r9d, %r11d
    000001e5: 	movl	%ecx, %r9d
    000001e8: 	andl	$-0x8, %r9d
    000001ec: 	addl	%r11d, %eax
    000001ef: 	addl	%r9d, %r10d
    000001f2: 	cmpl	%r9d, %ecx
    000001f5: 	je	.Ltmp347 # Offset: 501
.Ltmp348:
    000001f7: 	movslq	%r10d, %rcx
    000001fa: 	movzbl	(%rdi,%rcx), %ecx
    000001fe: 	leal	0x1(%rax,%rcx), %eax
    00000202: 	leal	0x1(%r10), %ecx
    00000206: 	cmpl	%ecx, %esi
    00000208: 	jle	.Ltmp347 # Offset: 520
    0000020a: 	movslq	%ecx, %rcx
    0000020d: 	movzbl	(%rdi,%rcx), %ecx
    00000211: 	leal	0x1(%rax,%rcx), %eax
    00000215: 	leal	0x2(%r10), %ecx
    00000219: 	cmpl	%ecx, %esi
    0000021b: 	jle	.Ltmp347 # Offset: 539
    0000021d: 	movslq	%ecx, %rcx
    00000220: 	movzbl	(%rdi,%rcx), %ecx
    00000224: 	leal	0x1(%rax,%rcx), %eax
    00000228: 	leal	0x3(%r10), %ecx
    0000022c: 	cmpl	%ecx, %esi
    0000022e: 	jle	.Ltmp347 # Offset: 558
    00000230: 	movslq	%ecx, %rcx
    00000233: 	movzbl	(%rdi,%rcx), %ecx
    00000237: 	leal	0x1(%rax,%rcx), %eax
    0000023b: 	leal	0x4(%r10), %ecx
    0000023f: 	cmpl	%ecx, %esi
    00000241: 	jle	.Ltmp347 # Offset: 577
    00000243: 	movslq	%ecx, %rcx
    00000246: 	movzbl	(%rdi,%rcx), %ecx
    0000024a: 	leal	0x1(%rax,%rcx), %eax
    0000024e: 	leal	0x5(%r10), %ecx
    00000252: 	cmpl	%ecx, %esi
    00000254: 	jle	.Ltmp347 # Offset: 596
    00000256: 	movslq	%ecx, %rcx
    00000259: 	movzbl	(%rdi,%rcx), %ecx
    0000025d: 	leal	0x1(%rax,%rcx), %eax
    00000261: 	leal	0x6(%r10), %ecx
    00000265: 	cmpl	%ecx, %esi
    00000267: 	jle	.Ltmp347 # Offset: 615
    00000269: 	movslq	%ecx, %rcx
    0000026c: 	movzbl	(%rdi,%rcx), %ecx
    00000270: 	leal	0x1(%rax,%rcx), %eax
.Ltmp347:
    00000274: 	addl	%edx, %edx
    00000276: 	cmpl	%r8d, %edx
    00000279: 	cmovgl	%r8d, %edx
    0000027d: 	cmpl	%esi, %edx
    0000027f: 	jle	.Ltmp349 # Offset: 639
    00000285: 	movl	%edx, %r11d
    00000288: 	subl	%esi, %r11d
    0000028b: 	leal	-0x1(%r11), %ecx
    0000028f: 	cmpl	$0xe, %ecx
    00000292: 	jbe	.Ltmp350 # Offset: 658
    00000298: 	movl	%r11d, %ecx
    0000029b: 	pxor	%xmm1, %xmm1
    0000029f: 	pcmpeqd	%xmm2, %xmm2
    000002a3: 	movslq	%esi, %r9
    000002a6: 	shrl	$0x4, %ecx
    000002a9: 	addq	%rdi, %r9
    000002ac: 	leal	-0x1(%rcx), %r10d
    000002b0: 	leaq	0x10(%r9), %rcx
    000002b4: 	shlq	$0x4, %r10
    000002b8: 	addq	%rcx, %r10
    000002bb: 	jmp	.Ltmp351 # Offset: 699
    000002bd: 	nopl	(%rax) # Size: 3
.Ltmp352:
    000002c0: 	addq	$0x10, %rcx
.Ltmp351:
    000002c4: 	movdqu	(%r9), %xmm0
    000002c9: 	movq	%rcx, %r9
    000002cc: 	paddb	%xmm2, %xmm0
    000002d0: 	paddb	%xmm0, %xmm1
    000002d4: 	cmpq	%r10, %rcx
    000002d7: 	jne	.Ltmp352 # Offset: 727
    000002d9: 	movdqa	%xmm1, %xmm0
    000002dd: 	movl	%r11d, %r9d
    000002e0: 	psrldq	$0x8, %xmm0
    000002e5: 	andl	$-0x10, %r9d
    000002e9: 	paddb	%xmm0, %xmm1
    000002ed: 	pxor	%xmm0, %xmm0
    000002f1: 	leal	(%r9,%rsi), %r10d
    000002f5: 	psadbw	%xmm0, %xmm1
    000002f9: 	movd	%xmm1, %ecx
    000002fd: 	addl	%ecx, %eax
    000002ff: 	cmpl	%r9d, %r11d
    00000302: 	je	.Ltmp353 # Offset: 770
.Ltmp361:
    00000308: 	subl	%r9d, %r11d
    0000030b: 	leal	-0x1(%r11), %ecx
    0000030f: 	cmpl	$0x6, %ecx
    00000312: 	jbe	.Ltmp354 # Offset: 786
    00000314: 	movq	DATAat0x38a10(%rip), %xmm1
    0000031c: 	addq	%rdi, %rsi
    0000031f: 	movq	(%rsi,%r9), %xmm0
    00000325: 	paddb	%xmm0, %xmm1
    00000329: 	pxor	%xmm0, %xmm0
    0000032d: 	movdqa	%xmm1, %xmm4
    00000331: 	psadbw	%xmm0, %xmm4
    00000335: 	movq	%xmm4, %rcx
    0000033a: 	movq	%xmm4, -0x18(%rsp)
    00000340: 	movl	%ecx, %esi
    00000342: 	movl	%r11d, %ecx
    00000345: 	andl	$-0x8, %ecx
    00000348: 	addl	%esi, %eax
    0000034a: 	addl	%ecx, %r10d
    0000034d: 	cmpl	%ecx, %r11d
    00000350: 	je	.Ltmp353 # Offset: 848
.Ltmp354:
    00000352: 	movslq	%r10d, %rcx
    00000355: 	movzbl	(%rdi,%rcx), %ecx
    00000359: 	leal	-0x1(%rax,%rcx), %eax
    0000035d: 	leal	0x1(%r10), %ecx
    00000361: 	cmpl	%ecx, %edx
    00000363: 	jle	.Ltmp353 # Offset: 867
    00000365: 	movslq	%ecx, %rcx
    00000368: 	movzbl	(%rdi,%rcx), %ecx
    0000036c: 	leal	-0x1(%rax,%rcx), %eax
    00000370: 	leal	0x2(%r10), %ecx
    00000374: 	cmpl	%ecx, %edx
    00000376: 	jle	.Ltmp353 # Offset: 886
    00000378: 	movslq	%ecx, %rcx
    0000037b: 	movzbl	(%rdi,%rcx), %ecx
    0000037f: 	leal	-0x1(%rax,%rcx), %eax
    00000383: 	leal	0x3(%r10), %ecx
    00000387: 	cmpl	%ecx, %edx
    00000389: 	jle	.Ltmp353 # Offset: 905
    0000038b: 	movslq	%ecx, %rcx
    0000038e: 	movzbl	(%rdi,%rcx), %ecx
    00000392: 	leal	-0x1(%rax,%rcx), %eax
    00000396: 	leal	0x4(%r10), %ecx
    0000039a: 	cmpl	%ecx, %edx
    0000039c: 	jle	.Ltmp353 # Offset: 924
    0000039e: 	movslq	%ecx, %rcx
    000003a1: 	movzbl	(%rdi,%rcx), %ecx
    000003a5: 	leal	-0x1(%rax,%rcx), %eax
    000003a9: 	leal	0x5(%r10), %ecx
    000003ad: 	cmpl	%ecx, %edx
    000003af: 	jle	.Ltmp353 # Offset: 943
    000003b1: 	movslq	%ecx, %rcx
    000003b4: 	movzbl	(%rdi,%rcx), %ecx
    000003b8: 	leal	-0x1(%rax,%rcx), %eax
    000003bc: 	leal	0x6(%r10), %ecx
    000003c0: 	cmpl	%ecx, %edx
    000003c2: 	jle	.Ltmp353 # Offset: 962
    000003c4: 	movslq	%ecx, %rcx
    000003c7: 	movzbl	(%rdi,%rcx), %ecx
    000003cb: 	leal	-0x1(%rax,%rcx), %eax
.Ltmp353:
    000003cf: 	cmpl	%edx, %r8d
    000003d2: 	jle	.Ltmp355 # Offset: 978
    000003d8: 	movl	%r8d, %r9d
    000003db: 	subl	%edx, %r9d
    000003de: 	leal	-0x1(%r9), %ecx
    000003e2: 	cmpl	$0xe, %ecx
    000003e5: 	jbe	.Ltmp356 # Offset: 997
    000003eb: 	movl	%r9d, %ecx
    000003ee: 	movslq	%edx, %rsi
    000003f1: 	pxor	%xmm0, %xmm0
    000003f5: 	shrl	$0x4, %ecx
    000003f8: 	addq	%rdi, %rsi
    000003fb: 	leal	-0x1(%rcx), %r10d
    000003ff: 	leaq	0x10(%rsi), %rcx
    00000403: 	shlq	$0x4, %r10
    00000407: 	addq	%rcx, %r10
    0000040a: 	jmp	.Ltmp357 # Offset: 1034
    0000040c: 	nopl	(%rax) # Size: 4
.Ltmp358:
    00000410: 	addq	$0x10, %rcx
.Ltmp357:
    00000414: 	movdqu	(%rsi), %xmm1
    00000418: 	movq	%rcx, %rsi
    0000041b: 	paddb	%xmm1, %xmm0
    0000041f: 	cmpq	%r10, %rcx
    00000422: 	jne	.Ltmp358 # Offset: 1058
    00000424: 	movdqa	%xmm0, %xmm1
    00000428: 	psrldq	$0x8, %xmm1
    0000042d: 	paddb	%xmm1, %xmm0
    00000431: 	pxor	%xmm1, %xmm1
    00000435: 	psadbw	%xmm1, %xmm0
    00000439: 	movd	%xmm0, %ecx
    0000043d: 	addl	%ecx, %eax
    0000043f: 	movl	%r9d, %ecx
    00000442: 	andl	$-0x10, %ecx
    00000445: 	leal	(%rcx,%rdx), %esi
    00000448: 	cmpl	%r9d, %ecx
    0000044b: 	je	.Ltmp359 # Offset: 1099
.Ltmp363:
    00000451: 	subl	%ecx, %r9d
    00000454: 	leal	-0x1(%r9), %r10d
    00000458: 	cmpl	$0x6, %r10d
    0000045c: 	jbe	.Ltmp360 # Offset: 1116
    0000045e: 	movslq	%edx, %rdx
    00000461: 	pxor	%xmm0, %xmm0
    00000465: 	addq	%rdi, %rdx
    00000468: 	movq	(%rdx,%rcx), %xmm1
    0000046d: 	movl	%r9d, %edx
    00000470: 	andl	$-0x8, %edx
    00000473: 	movdqa	%xmm1, %xmm5
    00000477: 	addl	%edx, %esi
    00000479: 	psadbw	%xmm0, %xmm5
    0000047d: 	movq	%xmm5, %rcx
    00000482: 	addl	%ecx, %eax
    00000484: 	cmpl	%edx, %r9d
    00000487: 	je	.Ltmp355 # Offset: 1159
.Ltmp360:
    00000489: 	movslq	%esi, %rdx
    0000048c: 	addb	(%rdi,%rdx), %al
    0000048f: 	leal	0x1(%rsi), %edx
    00000492: 	cmpl	%edx, %r8d
    00000495: 	jle	.Ltmp355 # Offset: 1173
    00000497: 	movslq	%edx, %rdx
    0000049a: 	addb	(%rdi,%rdx), %al
    0000049d: 	leal	0x2(%rsi), %edx
    000004a0: 	cmpl	%edx, %r8d
    000004a3: 	jle	.Ltmp355 # Offset: 1187
    000004a5: 	movslq	%edx, %rdx
    000004a8: 	addb	(%rdi,%rdx), %al
    000004ab: 	leal	0x3(%rsi), %edx
    000004ae: 	cmpl	%r8d, %edx
    000004b1: 	jge	.Ltmp355 # Offset: 1201
    000004b3: 	movslq	%edx, %rdx
    000004b6: 	addb	(%rdi,%rdx), %al
    000004b9: 	leal	0x4(%rsi), %edx
    000004bc: 	cmpl	%edx, %r8d
    000004bf: 	jle	.Ltmp355 # Offset: 1215
    000004c1: 	movslq	%edx, %rdx
    000004c4: 	addb	(%rdi,%rdx), %al
    000004c7: 	leal	0x5(%rsi), %edx
    000004ca: 	cmpl	%edx, %r8d
    000004cd: 	jle	.Ltmp355 # Offset: 1229
    000004cf: 	movslq	%edx, %rdx
    000004d2: 	addb	(%rdi,%rdx), %al
    000004d5: 	leal	0x6(%rsi), %edx
    000004d8: 	cmpl	%edx, %r8d
    000004db: 	jle	.Ltmp355 # Offset: 1243
    000004dd: 	movslq	%edx, %rdx
    000004e0: 	addb	(%rdi,%rdx), %al
.Ltmp355:
    000004e3: 	retq # Offset: 1251
    000004e4: 	nopl	(%rax) # Size: 4
.Ltmp349:
    000004e8: 	movl	%esi, %edx
    000004ea: 	jmp	.Ltmp353 # Offset: 1258
    000004ef: 	nop # Size: 1
.Ltmp344:
    000004f0: 	xorl	%esi, %esi
    000004f2: 	xorl	%eax, %eax
    000004f4: 	jmp	.Ltmp347 # Offset: 1268
.Ltmp350:
    000004f9: 	movl	%esi, %r10d
    000004fc: 	xorl	%r9d, %r9d
    000004ff: 	jmp	.Ltmp361 # Offset: 1279
.Ltmp345:
    00000504: 	xorl	%r9d, %r9d
    00000507: 	xorl	%r10d, %r10d
    0000050a: 	xorl	%eax, %eax
    0000050c: 	jmp	.Ltmp362 # Offset: 1292
.Ltmp356:
    00000511: 	movl	%edx, %esi
    00000513: 	xorl	%ecx, %ecx
    00000515: 	jmp	.Ltmp363 # Offset: 1301
.Ltmp359:
    0000051a: 	retq # Offset: 1306
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_for_loop3_halfoptIhET_PKS0_iS0_"

Binary Function "_Z20test_while_loop3_optIhET_PKS0_iS0_" after disassembly {
  Number      : 84
  State       : disassembled
  Address     : 0x5b90
  Size        : 0x513
  MaxSize     : 0x520
  Offset      : 0x5b90
  Section     : .text
  Orc Section : .local.text._Z20test_while_loop3_optIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB083:
    00000000: 	endbr64
    00000004: 	movzbl	%dl, %edx
    00000007: 	movslq	%esi, %r8
    0000000a: 	leal	(%rdx,%rdx), %eax
    0000000d: 	cmpl	%r8d, %eax
    00000010: 	jle	.Ltmp364 # Offset: 16
    00000016: 	testl	%edx, %edx
    00000018: 	je	.Ltmp365 # Offset: 24
    0000001e: 	testl	%r8d, %r8d
    00000021: 	jle	.Ltmp365 # Offset: 33
    00000027: 	cmpl	%r8d, %edx
    0000002a: 	movl	$0x1, %ecx
    0000002f: 	cmovgq	%r8, %rdx
    00000033: 	testl	%edx, %edx
    00000035: 	cmovgl	%edx, %ecx
    00000038: 	cmpl	$0xf, %edx
    0000003b: 	jle	.Ltmp366 # Offset: 59
    00000041: 	movdqa	DATAat0x38840(%rip), %xmm1
    00000049: 	movdqu	(%rdi), %xmm0
    0000004d: 	movl	%ecx, %eax
    0000004f: 	shrl	$0x4, %eax
    00000052: 	paddb	%xmm1, %xmm0
    00000056: 	cmpl	$0x1, %eax
    00000059: 	je	.Ltmp367 # Offset: 89
    0000005f: 	movdqu	0x10(%rdi), %xmm7
    00000064: 	paddb	%xmm7, %xmm0
    00000068: 	paddb	%xmm1, %xmm0
    0000006c: 	cmpl	$0x2, %eax
    0000006f: 	je	.Ltmp367 # Offset: 111
    00000075: 	movdqu	0x20(%rdi), %xmm2
    0000007a: 	paddb	%xmm1, %xmm2
    0000007e: 	paddb	%xmm2, %xmm0
    00000082: 	cmpl	$0x3, %eax
    00000085: 	je	.Ltmp367 # Offset: 133
    0000008b: 	movdqu	0x30(%rdi), %xmm2
    00000090: 	paddb	%xmm1, %xmm2
    00000094: 	paddb	%xmm2, %xmm0
    00000098: 	cmpl	$0x4, %eax
    0000009b: 	je	.Ltmp367 # Offset: 155
    000000a1: 	movdqu	0x40(%rdi), %xmm2
    000000a6: 	paddb	%xmm1, %xmm2
    000000aa: 	paddb	%xmm2, %xmm0
    000000ae: 	cmpl	$0x5, %eax
    000000b1: 	je	.Ltmp367 # Offset: 177
    000000b7: 	movdqu	0x50(%rdi), %xmm2
    000000bc: 	paddb	%xmm1, %xmm2
    000000c0: 	paddb	%xmm2, %xmm0
    000000c4: 	cmpl	$0x6, %eax
    000000c7: 	je	.Ltmp367 # Offset: 199
    000000cd: 	movdqu	0x60(%rdi), %xmm2
    000000d2: 	paddb	%xmm1, %xmm2
    000000d6: 	paddb	%xmm2, %xmm0
    000000da: 	cmpl	$0x7, %eax
    000000dd: 	je	.Ltmp367 # Offset: 221
    000000e3: 	movdqu	0x70(%rdi), %xmm2
    000000e8: 	paddb	%xmm1, %xmm2
    000000ec: 	paddb	%xmm2, %xmm0
    000000f0: 	cmpl	$0x8, %eax
    000000f3: 	je	.Ltmp367 # Offset: 243
    000000f9: 	movdqu	0x80(%rdi), %xmm2
    00000101: 	paddb	%xmm1, %xmm2
    00000105: 	paddb	%xmm2, %xmm0
    00000109: 	cmpl	$0x9, %eax
    0000010c: 	je	.Ltmp367 # Offset: 268
    00000112: 	movdqu	0x90(%rdi), %xmm2
    0000011a: 	paddb	%xmm1, %xmm2
    0000011e: 	paddb	%xmm2, %xmm0
    00000122: 	cmpl	$0xa, %eax
    00000125: 	je	.Ltmp367 # Offset: 293
    00000127: 	movdqu	0xa0(%rdi), %xmm2
    0000012f: 	paddb	%xmm1, %xmm2
    00000133: 	paddb	%xmm2, %xmm0
    00000137: 	cmpl	$0xb, %eax
    0000013a: 	je	.Ltmp367 # Offset: 314
    0000013c: 	movdqu	0xb0(%rdi), %xmm2
    00000144: 	paddb	%xmm1, %xmm2
    00000148: 	paddb	%xmm2, %xmm0
    0000014c: 	cmpl	$0xc, %eax
    0000014f: 	je	.Ltmp367 # Offset: 335
    00000151: 	movdqu	0xc0(%rdi), %xmm2
    00000159: 	paddb	%xmm1, %xmm2
    0000015d: 	paddb	%xmm2, %xmm0
    00000161: 	cmpl	$0xd, %eax
    00000164: 	je	.Ltmp367 # Offset: 356
    00000166: 	movdqu	0xd0(%rdi), %xmm2
    0000016e: 	paddb	%xmm1, %xmm2
    00000172: 	paddb	%xmm2, %xmm0
    00000176: 	cmpl	$0xf, %eax
    00000179: 	jne	.Ltmp367 # Offset: 377
    0000017b: 	movdqu	0xe0(%rdi), %xmm7
    00000183: 	paddb	%xmm7, %xmm1
    00000187: 	paddb	%xmm1, %xmm0
    0000018b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp367:
    00000190: 	movdqa	%xmm0, %xmm1
    00000194: 	movl	%ecx, %esi
    00000196: 	psrldq	$0x8, %xmm1
    0000019b: 	andl	$-0x10, %esi
    0000019e: 	paddb	%xmm1, %xmm0
    000001a2: 	pxor	%xmm1, %xmm1
    000001a6: 	movl	%esi, %r9d
    000001a9: 	psadbw	%xmm1, %xmm0
    000001ad: 	movd	%xmm0, %eax
    000001b1: 	cmpl	%esi, %ecx
    000001b3: 	je	.Ltmp368 # Offset: 435
.Ltmp382:
    000001b9: 	subl	%esi, %ecx
    000001bb: 	leal	-0x1(%rcx), %r10d
    000001bf: 	cmpl	$0x6, %r10d
    000001c3: 	jbe	.Ltmp369 # Offset: 451
    000001c5: 	movq	DATAat0x38840(%rip), %xmm1
    000001cd: 	movq	(%rdi,%rsi), %xmm0
    000001d2: 	paddb	%xmm0, %xmm1
    000001d6: 	pxor	%xmm0, %xmm0
    000001da: 	movdqa	%xmm1, %xmm4
    000001de: 	psadbw	%xmm0, %xmm4
    000001e2: 	movq	%xmm4, %rsi
    000001e7: 	movq	%xmm4, -0x18(%rsp)
    000001ed: 	movl	%esi, %r10d
    000001f0: 	movl	%ecx, %esi
    000001f2: 	andl	$-0x8, %esi
    000001f5: 	addl	%r10d, %eax
    000001f8: 	addl	%esi, %r9d
    000001fb: 	cmpl	%esi, %ecx
    000001fd: 	je	.Ltmp368 # Offset: 509
.Ltmp369:
    000001ff: 	movslq	%r9d, %rcx
    00000202: 	movzbl	(%rdi,%rcx), %ecx
    00000206: 	leal	0x1(%rax,%rcx), %eax
    0000020a: 	leal	0x1(%r9), %ecx
    0000020e: 	cmpl	%ecx, %edx
    00000210: 	jle	.Ltmp368 # Offset: 528
    00000212: 	movslq	%ecx, %rcx
    00000215: 	movzbl	(%rdi,%rcx), %ecx
    00000219: 	leal	0x1(%rax,%rcx), %eax
    0000021d: 	leal	0x2(%r9), %ecx
    00000221: 	cmpl	%ecx, %edx
    00000223: 	jle	.Ltmp368 # Offset: 547
    00000225: 	movslq	%ecx, %rcx
    00000228: 	movzbl	(%rdi,%rcx), %ecx
    0000022c: 	leal	0x1(%rax,%rcx), %eax
    00000230: 	leal	0x3(%r9), %ecx
    00000234: 	cmpl	%ecx, %edx
    00000236: 	jle	.Ltmp368 # Offset: 566
    00000238: 	movslq	%ecx, %rcx
    0000023b: 	movzbl	(%rdi,%rcx), %ecx
    0000023f: 	leal	0x1(%rax,%rcx), %eax
    00000243: 	leal	0x4(%r9), %ecx
    00000247: 	cmpl	%ecx, %edx
    00000249: 	jle	.Ltmp368 # Offset: 585
    0000024b: 	movslq	%ecx, %rcx
    0000024e: 	movzbl	(%rdi,%rcx), %ecx
    00000252: 	leal	0x1(%rax,%rcx), %eax
    00000256: 	leal	0x5(%r9), %ecx
    0000025a: 	cmpl	%ecx, %edx
    0000025c: 	jle	.Ltmp368 # Offset: 604
    0000025e: 	movslq	%ecx, %rcx
    00000261: 	movzbl	(%rdi,%rcx), %ecx
    00000265: 	leal	0x1(%rax,%rcx), %eax
    00000269: 	leal	0x6(%r9), %ecx
    0000026d: 	cmpl	%ecx, %edx
    0000026f: 	jle	.Ltmp368 # Offset: 623
    00000271: 	movslq	%ecx, %rcx
    00000274: 	movzbl	(%rdi,%rcx), %ecx
    00000278: 	leal	0x1(%rax,%rcx), %eax
.Ltmp368:
    0000027c: 	cmpl	%edx, %r8d
    0000027f: 	jle	.Ltmp370 # Offset: 639
    00000285: 	movl	%r8d, %r10d
    00000288: 	subl	%edx, %r10d
    0000028b: 	leal	-0x1(%r10), %ecx
    0000028f: 	cmpl	$0xe, %ecx
    00000292: 	jbe	.Ltmp371 # Offset: 658
    00000298: 	movl	%r10d, %ecx
    0000029b: 	pxor	%xmm1, %xmm1
    0000029f: 	pcmpeqd	%xmm2, %xmm2
    000002a3: 	movslq	%edx, %rsi
    000002a6: 	shrl	$0x4, %ecx
    000002a9: 	addq	%rdi, %rsi
    000002ac: 	leal	-0x1(%rcx), %r9d
    000002b0: 	leaq	0x10(%rsi), %rcx
    000002b4: 	shlq	$0x4, %r9
    000002b8: 	addq	%rcx, %r9
    000002bb: 	jmp	.Ltmp372 # Offset: 699
    000002bd: 	nopl	(%rax) # Size: 3
.Ltmp373:
    000002c0: 	addq	$0x10, %rcx
.Ltmp372:
    000002c4: 	movdqu	(%rsi), %xmm0
    000002c8: 	movq	%rcx, %rsi
    000002cb: 	paddb	%xmm2, %xmm0
    000002cf: 	paddb	%xmm0, %xmm1
    000002d3: 	cmpq	%r9, %rcx
    000002d6: 	jne	.Ltmp373 # Offset: 726
    000002d8: 	movdqa	%xmm1, %xmm0
    000002dc: 	psrldq	$0x8, %xmm0
    000002e1: 	paddb	%xmm0, %xmm1
    000002e5: 	pxor	%xmm0, %xmm0
    000002e9: 	psadbw	%xmm0, %xmm1
    000002ed: 	movd	%xmm1, %ecx
    000002f1: 	addl	%ecx, %eax
    000002f3: 	movl	%r10d, %ecx
    000002f6: 	andl	$-0x10, %ecx
    000002f9: 	leal	(%rcx,%rdx), %esi
    000002fc: 	cmpl	%ecx, %r10d
    000002ff: 	je	.Ltmp374 # Offset: 767
.Ltmp381:
    00000305: 	subl	%ecx, %r10d
    00000308: 	leal	-0x1(%r10), %r9d
    0000030c: 	cmpl	$0x6, %r9d
    00000310: 	jbe	.Ltmp375 # Offset: 784
    00000312: 	movq	DATAat0x38a10(%rip), %xmm1
    0000031a: 	addq	%rdi, %rdx
    0000031d: 	movq	(%rdx,%rcx), %xmm0
    00000322: 	movl	%r10d, %edx
    00000325: 	andl	$-0x8, %edx
    00000328: 	paddb	%xmm0, %xmm1
    0000032c: 	pxor	%xmm0, %xmm0
    00000330: 	addl	%edx, %esi
    00000332: 	movdqa	%xmm1, %xmm5
    00000336: 	psadbw	%xmm0, %xmm5
    0000033a: 	movq	%xmm5, %rcx
    0000033f: 	addl	%ecx, %eax
    00000341: 	cmpl	%edx, %r10d
    00000344: 	je	.Ltmp370 # Offset: 836
.Ltmp375:
    0000034a: 	movslq	%esi, %rdx
    0000034d: 	movzbl	(%rdi,%rdx), %edx
    00000351: 	leal	-0x1(%rax,%rdx), %eax
    00000355: 	leal	0x1(%rsi), %edx
    00000358: 	cmpl	%edx, %r8d
    0000035b: 	jle	.Ltmp370 # Offset: 859
    00000361: 	movslq	%edx, %rdx
    00000364: 	movzbl	(%rdi,%rdx), %edx
    00000368: 	leal	-0x1(%rax,%rdx), %eax
    0000036c: 	leal	0x2(%rsi), %edx
    0000036f: 	cmpl	%edx, %r8d
    00000372: 	jle	.Ltmp370 # Offset: 882
    00000378: 	movslq	%edx, %rdx
    0000037b: 	movzbl	(%rdi,%rdx), %edx
    0000037f: 	leal	-0x1(%rax,%rdx), %eax
    00000383: 	leal	0x3(%rsi), %edx
    00000386: 	cmpl	%edx, %r8d
    00000389: 	jle	.Ltmp370 # Offset: 905
    0000038f: 	movslq	%edx, %rdx
    00000392: 	movzbl	(%rdi,%rdx), %edx
    00000396: 	leal	-0x1(%rax,%rdx), %eax
    0000039a: 	leal	0x4(%rsi), %edx
    0000039d: 	cmpl	%edx, %r8d
    000003a0: 	jle	.Ltmp370 # Offset: 928
    000003a6: 	movslq	%edx, %rdx
    000003a9: 	movzbl	(%rdi,%rdx), %edx
    000003ad: 	leal	-0x1(%rax,%rdx), %eax
    000003b1: 	leal	0x5(%rsi), %edx
    000003b4: 	cmpl	%edx, %r8d
    000003b7: 	jle	.Ltmp370 # Offset: 951
    000003bd: 	movslq	%edx, %rdx
    000003c0: 	movzbl	(%rdi,%rdx), %edx
    000003c4: 	leal	-0x1(%rax,%rdx), %eax
    000003c8: 	leal	0x6(%rsi), %edx
    000003cb: 	cmpl	%edx, %r8d
    000003ce: 	jle	.Ltmp370 # Offset: 974
    000003d4: 	movslq	%edx, %rdx
    000003d7: 	movzbl	(%rdi,%rdx), %edx
    000003db: 	leal	-0x1(%rax,%rdx), %eax
    000003df: 	retq # Offset: 991
.Ltmp364:
    000003e0: 	testl	%r8d, %r8d
    000003e3: 	je	.Ltmp376 # Offset: 995
    000003e9: 	leal	-0x1(%r8), %eax
    000003ed: 	cmpl	$0xe, %eax
    000003f0: 	jbe	.Ltmp377 # Offset: 1008
    000003f6: 	movl	%r8d, %edx
    000003f9: 	movq	%rdi, %rax
    000003fc: 	pxor	%xmm0, %xmm0
    00000400: 	shrl	$0x4, %edx
    00000403: 	subl	$0x1, %edx
    00000406: 	shlq	$0x4, %rdx
    0000040a: 	leaq	0x10(%rdi,%rdx), %rdx
    0000040f: 	nop # Size: 1
.Ltmp378:
    00000410: 	movdqu	(%rax), %xmm3
    00000414: 	addq	$0x10, %rax
    00000418: 	paddb	%xmm3, %xmm0
    0000041c: 	cmpq	%rdx, %rax
    0000041f: 	jne	.Ltmp378 # Offset: 1055
    00000421: 	movdqa	%xmm0, %xmm1
    00000425: 	movl	%r8d, %ecx
    00000428: 	psrldq	$0x8, %xmm1
    0000042d: 	andl	$-0x10, %ecx
    00000430: 	paddb	%xmm1, %xmm0
    00000434: 	pxor	%xmm1, %xmm1
    00000438: 	movl	%ecx, %edx
    0000043a: 	psadbw	%xmm1, %xmm0
    0000043e: 	movd	%xmm0, %eax
    00000442: 	cmpl	%r8d, %ecx
    00000445: 	je	.Ltmp379 # Offset: 1093
.Ltmp383:
    0000044b: 	movl	%r8d, %esi
    0000044e: 	subl	%ecx, %esi
    00000450: 	leal	-0x1(%rsi), %r9d
    00000454: 	cmpl	$0x6, %r9d
    00000458: 	jbe	.Ltmp380 # Offset: 1112
    0000045a: 	movq	(%rdi,%rcx), %xmm1
    0000045f: 	pxor	%xmm0, %xmm0
    00000463: 	movdqa	%xmm1, %xmm6
    00000467: 	psadbw	%xmm0, %xmm6
    0000046b: 	movq	%xmm6, %rcx
    00000470: 	addl	%ecx, %eax
    00000472: 	movl	%esi, %ecx
    00000474: 	andl	$-0x8, %ecx
    00000477: 	addl	%ecx, %edx
    00000479: 	cmpl	%esi, %ecx
    0000047b: 	je	.Ltmp370 # Offset: 1147
.Ltmp380:
    0000047d: 	movslq	%edx, %rcx
    00000480: 	addb	(%rdi,%rcx), %al
    00000483: 	leal	0x1(%rdx), %ecx
    00000486: 	cmpl	%ecx, %r8d
    00000489: 	jle	.Ltmp370 # Offset: 1161
    0000048b: 	movslq	%ecx, %rcx
    0000048e: 	addb	(%rdi,%rcx), %al
    00000491: 	leal	0x2(%rdx), %ecx
    00000494: 	cmpl	%ecx, %r8d
    00000497: 	jle	.Ltmp370 # Offset: 1175
    00000499: 	movslq	%ecx, %rcx
    0000049c: 	addb	(%rdi,%rcx), %al
    0000049f: 	leal	0x3(%rdx), %ecx
    000004a2: 	cmpl	%ecx, %r8d
    000004a5: 	jle	.Ltmp370 # Offset: 1189
    000004a7: 	movslq	%ecx, %rcx
    000004aa: 	addb	(%rdi,%rcx), %al
    000004ad: 	leal	0x4(%rdx), %ecx
    000004b0: 	cmpl	%ecx, %r8d
    000004b3: 	jle	.Ltmp370 # Offset: 1203
    000004b5: 	movslq	%ecx, %rcx
    000004b8: 	addb	(%rdi,%rcx), %al
    000004bb: 	leal	0x5(%rdx), %ecx
    000004be: 	cmpl	%r8d, %ecx
    000004c1: 	jge	.Ltmp370 # Offset: 1217
    000004c3: 	movslq	%ecx, %rcx
    000004c6: 	addl	$0x6, %edx
    000004c9: 	addb	(%rdi,%rcx), %al
    000004cc: 	cmpl	%edx, %r8d
    000004cf: 	jle	.Ltmp370 # Offset: 1231
    000004d1: 	movslq	%edx, %rdx
    000004d4: 	addb	(%rdi,%rdx), %al
    000004d7: 	retq # Offset: 1239
    000004d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp376:
    000004e0: 	xorl	%eax, %eax
.Ltmp370:
    000004e2: 	retq # Offset: 1250
    000004e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp365:
    000004e8: 	xorl	%edx, %edx
    000004ea: 	xorl	%eax, %eax
    000004ec: 	jmp	.Ltmp368 # Offset: 1260
.Ltmp371:
    000004f1: 	movl	%edx, %esi
    000004f3: 	xorl	%ecx, %ecx
    000004f5: 	jmp	.Ltmp381 # Offset: 1269
.Ltmp366:
    000004fa: 	xorl	%esi, %esi
    000004fc: 	xorl	%r9d, %r9d
    000004ff: 	xorl	%eax, %eax
    00000501: 	jmp	.Ltmp382 # Offset: 1281
.Ltmp377:
    00000506: 	xorl	%ecx, %ecx
    00000508: 	xorl	%edx, %edx
    0000050a: 	xorl	%eax, %eax
    0000050c: 	jmp	.Ltmp383 # Offset: 1292
.Ltmp379:
    00000511: 	retq # Offset: 1297
.Ltmp374:
    00000512: 	retq # Offset: 1298
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_while_loop3_optIhET_PKS0_iS0_"

Binary Function "_Z24test_while_loop3_halfoptIhET_PKS0_iS0_" after disassembly {
  Number      : 85
  State       : disassembled
  Address     : 0x60b0
  Size        : 0x51b
  MaxSize     : 0x520
  Offset      : 0x60b0
  Section     : .text
  Orc Section : .local.text._Z24test_while_loop3_halfoptIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB084:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %r8
    00000007: 	movzbl	%dl, %edx
    0000000a: 	testl	%r8d, %r8d
    0000000d: 	jle	.Ltmp384 # Offset: 13
    00000013: 	testl	%edx, %edx
    00000015: 	je	.Ltmp384 # Offset: 21
    0000001b: 	cmpl	%edx, %r8d
    0000001e: 	movslq	%edx, %rsi
    00000021: 	movl	$0x1, %ecx
    00000026: 	cmovleq	%r8, %rsi
    0000002a: 	testl	%esi, %esi
    0000002c: 	cmovgl	%esi, %ecx
    0000002f: 	cmpl	$0xf, %esi
    00000032: 	jle	.Ltmp385 # Offset: 50
    00000038: 	movdqa	DATAat0x38840(%rip), %xmm1
    00000040: 	movdqu	(%rdi), %xmm0
    00000044: 	movl	%ecx, %eax
    00000046: 	shrl	$0x4, %eax
    00000049: 	paddb	%xmm1, %xmm0
    0000004d: 	cmpl	$0x1, %eax
    00000050: 	je	.Ltmp386 # Offset: 80
    00000056: 	movdqu	0x10(%rdi), %xmm6
    0000005b: 	paddb	%xmm6, %xmm0
    0000005f: 	paddb	%xmm1, %xmm0
    00000063: 	cmpl	$0x2, %eax
    00000066: 	je	.Ltmp386 # Offset: 102
    0000006c: 	movdqu	0x20(%rdi), %xmm2
    00000071: 	paddb	%xmm1, %xmm2
    00000075: 	paddb	%xmm2, %xmm0
    00000079: 	cmpl	$0x3, %eax
    0000007c: 	je	.Ltmp386 # Offset: 124
    00000082: 	movdqu	0x30(%rdi), %xmm2
    00000087: 	paddb	%xmm1, %xmm2
    0000008b: 	paddb	%xmm2, %xmm0
    0000008f: 	cmpl	$0x4, %eax
    00000092: 	je	.Ltmp386 # Offset: 146
    00000098: 	movdqu	0x40(%rdi), %xmm2
    0000009d: 	paddb	%xmm1, %xmm2
    000000a1: 	paddb	%xmm2, %xmm0
    000000a5: 	cmpl	$0x5, %eax
    000000a8: 	je	.Ltmp386 # Offset: 168
    000000ae: 	movdqu	0x50(%rdi), %xmm2
    000000b3: 	paddb	%xmm1, %xmm2
    000000b7: 	paddb	%xmm2, %xmm0
    000000bb: 	cmpl	$0x6, %eax
    000000be: 	je	.Ltmp386 # Offset: 190
    000000c4: 	movdqu	0x60(%rdi), %xmm2
    000000c9: 	paddb	%xmm1, %xmm2
    000000cd: 	paddb	%xmm2, %xmm0
    000000d1: 	cmpl	$0x7, %eax
    000000d4: 	je	.Ltmp386 # Offset: 212
    000000da: 	movdqu	0x70(%rdi), %xmm2
    000000df: 	paddb	%xmm1, %xmm2
    000000e3: 	paddb	%xmm2, %xmm0
    000000e7: 	cmpl	$0x8, %eax
    000000ea: 	je	.Ltmp386 # Offset: 234
    000000f0: 	movdqu	0x80(%rdi), %xmm2
    000000f8: 	paddb	%xmm1, %xmm2
    000000fc: 	paddb	%xmm2, %xmm0
    00000100: 	cmpl	$0x9, %eax
    00000103: 	je	.Ltmp386 # Offset: 259
    00000105: 	movdqu	0x90(%rdi), %xmm2
    0000010d: 	paddb	%xmm1, %xmm2
    00000111: 	paddb	%xmm2, %xmm0
    00000115: 	cmpl	$0xa, %eax
    00000118: 	je	.Ltmp386 # Offset: 280
    0000011a: 	movdqu	0xa0(%rdi), %xmm2
    00000122: 	paddb	%xmm1, %xmm2
    00000126: 	paddb	%xmm2, %xmm0
    0000012a: 	cmpl	$0xb, %eax
    0000012d: 	je	.Ltmp386 # Offset: 301
    0000012f: 	movdqu	0xb0(%rdi), %xmm2
    00000137: 	paddb	%xmm1, %xmm2
    0000013b: 	paddb	%xmm2, %xmm0
    0000013f: 	cmpl	$0xc, %eax
    00000142: 	je	.Ltmp386 # Offset: 322
    00000144: 	movdqu	0xc0(%rdi), %xmm2
    0000014c: 	paddb	%xmm1, %xmm2
    00000150: 	paddb	%xmm2, %xmm0
    00000154: 	cmpl	$0xd, %eax
    00000157: 	je	.Ltmp386 # Offset: 343
    00000159: 	movdqu	0xd0(%rdi), %xmm2
    00000161: 	paddb	%xmm1, %xmm2
    00000165: 	paddb	%xmm2, %xmm0
    00000169: 	cmpl	$0xf, %eax
    0000016c: 	jne	.Ltmp386 # Offset: 364
    0000016e: 	movdqu	0xe0(%rdi), %xmm7
    00000176: 	paddb	%xmm7, %xmm1
    0000017a: 	paddb	%xmm1, %xmm0
    0000017e: 	nop # Size: 2
.Ltmp386:
    00000180: 	movdqa	%xmm0, %xmm1
    00000184: 	movl	%ecx, %r9d
    00000187: 	psrldq	$0x8, %xmm1
    0000018c: 	andl	$-0x10, %r9d
    00000190: 	paddb	%xmm1, %xmm0
    00000194: 	pxor	%xmm1, %xmm1
    00000198: 	movl	%r9d, %r10d
    0000019b: 	psadbw	%xmm1, %xmm0
    0000019f: 	movd	%xmm0, %eax
    000001a3: 	cmpl	%r9d, %ecx
    000001a6: 	je	.Ltmp387 # Offset: 422
.Ltmp402:
    000001ac: 	subl	%r9d, %ecx
    000001af: 	leal	-0x1(%rcx), %r11d
    000001b3: 	cmpl	$0x6, %r11d
    000001b7: 	jbe	.Ltmp388 # Offset: 439
    000001b9: 	movq	DATAat0x38840(%rip), %xmm1
    000001c1: 	movq	(%rdi,%r9), %xmm0
    000001c7: 	paddb	%xmm0, %xmm1
    000001cb: 	pxor	%xmm0, %xmm0
    000001cf: 	movdqa	%xmm1, %xmm3
    000001d3: 	psadbw	%xmm0, %xmm3
    000001d7: 	movq	%xmm3, %r9
    000001dc: 	movq	%xmm3, -0x10(%rsp)
    000001e2: 	movl	%r9d, %r11d
    000001e5: 	movl	%ecx, %r9d
    000001e8: 	andl	$-0x8, %r9d
    000001ec: 	addl	%r11d, %eax
    000001ef: 	addl	%r9d, %r10d
    000001f2: 	cmpl	%r9d, %ecx
    000001f5: 	je	.Ltmp387 # Offset: 501
.Ltmp388:
    000001f7: 	movslq	%r10d, %rcx
    000001fa: 	movzbl	(%rdi,%rcx), %ecx
    000001fe: 	leal	0x1(%rax,%rcx), %eax
    00000202: 	leal	0x1(%r10), %ecx
    00000206: 	cmpl	%ecx, %esi
    00000208: 	jle	.Ltmp387 # Offset: 520
    0000020a: 	movslq	%ecx, %rcx
    0000020d: 	movzbl	(%rdi,%rcx), %ecx
    00000211: 	leal	0x1(%rax,%rcx), %eax
    00000215: 	leal	0x2(%r10), %ecx
    00000219: 	cmpl	%ecx, %esi
    0000021b: 	jle	.Ltmp387 # Offset: 539
    0000021d: 	movslq	%ecx, %rcx
    00000220: 	movzbl	(%rdi,%rcx), %ecx
    00000224: 	leal	0x1(%rax,%rcx), %eax
    00000228: 	leal	0x3(%r10), %ecx
    0000022c: 	cmpl	%ecx, %esi
    0000022e: 	jle	.Ltmp387 # Offset: 558
    00000230: 	movslq	%ecx, %rcx
    00000233: 	movzbl	(%rdi,%rcx), %ecx
    00000237: 	leal	0x1(%rax,%rcx), %eax
    0000023b: 	leal	0x4(%r10), %ecx
    0000023f: 	cmpl	%ecx, %esi
    00000241: 	jle	.Ltmp387 # Offset: 577
    00000243: 	movslq	%ecx, %rcx
    00000246: 	movzbl	(%rdi,%rcx), %ecx
    0000024a: 	leal	0x1(%rax,%rcx), %eax
    0000024e: 	leal	0x5(%r10), %ecx
    00000252: 	cmpl	%ecx, %esi
    00000254: 	jle	.Ltmp387 # Offset: 596
    00000256: 	movslq	%ecx, %rcx
    00000259: 	movzbl	(%rdi,%rcx), %ecx
    0000025d: 	leal	0x1(%rax,%rcx), %eax
    00000261: 	leal	0x6(%r10), %ecx
    00000265: 	cmpl	%ecx, %esi
    00000267: 	jle	.Ltmp387 # Offset: 615
    00000269: 	movslq	%ecx, %rcx
    0000026c: 	movzbl	(%rdi,%rcx), %ecx
    00000270: 	leal	0x1(%rax,%rcx), %eax
.Ltmp387:
    00000274: 	addl	%edx, %edx
    00000276: 	cmpl	%r8d, %edx
    00000279: 	cmovgl	%r8d, %edx
    0000027d: 	cmpl	%esi, %edx
    0000027f: 	jle	.Ltmp389 # Offset: 639
    00000285: 	movl	%edx, %r11d
    00000288: 	subl	%esi, %r11d
    0000028b: 	leal	-0x1(%r11), %ecx
    0000028f: 	cmpl	$0xe, %ecx
    00000292: 	jbe	.Ltmp390 # Offset: 658
    00000298: 	movl	%r11d, %ecx
    0000029b: 	pxor	%xmm1, %xmm1
    0000029f: 	pcmpeqd	%xmm2, %xmm2
    000002a3: 	movslq	%esi, %r9
    000002a6: 	shrl	$0x4, %ecx
    000002a9: 	addq	%rdi, %r9
    000002ac: 	leal	-0x1(%rcx), %r10d
    000002b0: 	leaq	0x10(%r9), %rcx
    000002b4: 	shlq	$0x4, %r10
    000002b8: 	addq	%rcx, %r10
    000002bb: 	jmp	.Ltmp391 # Offset: 699
    000002bd: 	nopl	(%rax) # Size: 3
.Ltmp392:
    000002c0: 	addq	$0x10, %rcx
.Ltmp391:
    000002c4: 	movdqu	(%r9), %xmm0
    000002c9: 	movq	%rcx, %r9
    000002cc: 	paddb	%xmm2, %xmm0
    000002d0: 	paddb	%xmm0, %xmm1
    000002d4: 	cmpq	%r10, %rcx
    000002d7: 	jne	.Ltmp392 # Offset: 727
    000002d9: 	movdqa	%xmm1, %xmm0
    000002dd: 	movl	%r11d, %r9d
    000002e0: 	psrldq	$0x8, %xmm0
    000002e5: 	andl	$-0x10, %r9d
    000002e9: 	paddb	%xmm0, %xmm1
    000002ed: 	pxor	%xmm0, %xmm0
    000002f1: 	leal	(%r9,%rsi), %r10d
    000002f5: 	psadbw	%xmm0, %xmm1
    000002f9: 	movd	%xmm1, %ecx
    000002fd: 	addl	%ecx, %eax
    000002ff: 	cmpl	%r9d, %r11d
    00000302: 	je	.Ltmp393 # Offset: 770
.Ltmp401:
    00000308: 	subl	%r9d, %r11d
    0000030b: 	leal	-0x1(%r11), %ecx
    0000030f: 	cmpl	$0x6, %ecx
    00000312: 	jbe	.Ltmp394 # Offset: 786
    00000314: 	movq	DATAat0x38a10(%rip), %xmm1
    0000031c: 	addq	%rdi, %rsi
    0000031f: 	movq	(%rsi,%r9), %xmm0
    00000325: 	paddb	%xmm0, %xmm1
    00000329: 	pxor	%xmm0, %xmm0
    0000032d: 	movdqa	%xmm1, %xmm4
    00000331: 	psadbw	%xmm0, %xmm4
    00000335: 	movq	%xmm4, %rcx
    0000033a: 	movq	%xmm4, -0x18(%rsp)
    00000340: 	movl	%ecx, %esi
    00000342: 	movl	%r11d, %ecx
    00000345: 	andl	$-0x8, %ecx
    00000348: 	addl	%esi, %eax
    0000034a: 	addl	%ecx, %r10d
    0000034d: 	cmpl	%ecx, %r11d
    00000350: 	je	.Ltmp393 # Offset: 848
.Ltmp394:
    00000352: 	movslq	%r10d, %rcx
    00000355: 	movzbl	(%rdi,%rcx), %ecx
    00000359: 	leal	-0x1(%rax,%rcx), %eax
    0000035d: 	leal	0x1(%r10), %ecx
    00000361: 	cmpl	%ecx, %edx
    00000363: 	jle	.Ltmp393 # Offset: 867
    00000365: 	movslq	%ecx, %rcx
    00000368: 	movzbl	(%rdi,%rcx), %ecx
    0000036c: 	leal	-0x1(%rax,%rcx), %eax
    00000370: 	leal	0x2(%r10), %ecx
    00000374: 	cmpl	%ecx, %edx
    00000376: 	jle	.Ltmp393 # Offset: 886
    00000378: 	movslq	%ecx, %rcx
    0000037b: 	movzbl	(%rdi,%rcx), %ecx
    0000037f: 	leal	-0x1(%rax,%rcx), %eax
    00000383: 	leal	0x3(%r10), %ecx
    00000387: 	cmpl	%ecx, %edx
    00000389: 	jle	.Ltmp393 # Offset: 905
    0000038b: 	movslq	%ecx, %rcx
    0000038e: 	movzbl	(%rdi,%rcx), %ecx
    00000392: 	leal	-0x1(%rax,%rcx), %eax
    00000396: 	leal	0x4(%r10), %ecx
    0000039a: 	cmpl	%ecx, %edx
    0000039c: 	jle	.Ltmp393 # Offset: 924
    0000039e: 	movslq	%ecx, %rcx
    000003a1: 	movzbl	(%rdi,%rcx), %ecx
    000003a5: 	leal	-0x1(%rax,%rcx), %eax
    000003a9: 	leal	0x5(%r10), %ecx
    000003ad: 	cmpl	%ecx, %edx
    000003af: 	jle	.Ltmp393 # Offset: 943
    000003b1: 	movslq	%ecx, %rcx
    000003b4: 	movzbl	(%rdi,%rcx), %ecx
    000003b8: 	leal	-0x1(%rax,%rcx), %eax
    000003bc: 	leal	0x6(%r10), %ecx
    000003c0: 	cmpl	%ecx, %edx
    000003c2: 	jle	.Ltmp393 # Offset: 962
    000003c4: 	movslq	%ecx, %rcx
    000003c7: 	movzbl	(%rdi,%rcx), %ecx
    000003cb: 	leal	-0x1(%rax,%rcx), %eax
.Ltmp393:
    000003cf: 	cmpl	%edx, %r8d
    000003d2: 	jle	.Ltmp395 # Offset: 978
    000003d8: 	movl	%r8d, %r9d
    000003db: 	subl	%edx, %r9d
    000003de: 	leal	-0x1(%r9), %ecx
    000003e2: 	cmpl	$0xe, %ecx
    000003e5: 	jbe	.Ltmp396 # Offset: 997
    000003eb: 	movl	%r9d, %ecx
    000003ee: 	movslq	%edx, %rsi
    000003f1: 	pxor	%xmm0, %xmm0
    000003f5: 	shrl	$0x4, %ecx
    000003f8: 	addq	%rdi, %rsi
    000003fb: 	leal	-0x1(%rcx), %r10d
    000003ff: 	leaq	0x10(%rsi), %rcx
    00000403: 	shlq	$0x4, %r10
    00000407: 	addq	%rcx, %r10
    0000040a: 	jmp	.Ltmp397 # Offset: 1034
    0000040c: 	nopl	(%rax) # Size: 4
.Ltmp398:
    00000410: 	addq	$0x10, %rcx
.Ltmp397:
    00000414: 	movdqu	(%rsi), %xmm1
    00000418: 	movq	%rcx, %rsi
    0000041b: 	paddb	%xmm1, %xmm0
    0000041f: 	cmpq	%r10, %rcx
    00000422: 	jne	.Ltmp398 # Offset: 1058
    00000424: 	movdqa	%xmm0, %xmm1
    00000428: 	psrldq	$0x8, %xmm1
    0000042d: 	paddb	%xmm1, %xmm0
    00000431: 	pxor	%xmm1, %xmm1
    00000435: 	psadbw	%xmm1, %xmm0
    00000439: 	movd	%xmm0, %ecx
    0000043d: 	addl	%ecx, %eax
    0000043f: 	movl	%r9d, %ecx
    00000442: 	andl	$-0x10, %ecx
    00000445: 	leal	(%rcx,%rdx), %esi
    00000448: 	cmpl	%r9d, %ecx
    0000044b: 	je	.Ltmp399 # Offset: 1099
.Ltmp403:
    00000451: 	subl	%ecx, %r9d
    00000454: 	leal	-0x1(%r9), %r10d
    00000458: 	cmpl	$0x6, %r10d
    0000045c: 	jbe	.Ltmp400 # Offset: 1116
    0000045e: 	movslq	%edx, %rdx
    00000461: 	pxor	%xmm0, %xmm0
    00000465: 	addq	%rdi, %rdx
    00000468: 	movq	(%rdx,%rcx), %xmm1
    0000046d: 	movl	%r9d, %edx
    00000470: 	andl	$-0x8, %edx
    00000473: 	movdqa	%xmm1, %xmm5
    00000477: 	addl	%edx, %esi
    00000479: 	psadbw	%xmm0, %xmm5
    0000047d: 	movq	%xmm5, %rcx
    00000482: 	addl	%ecx, %eax
    00000484: 	cmpl	%edx, %r9d
    00000487: 	je	.Ltmp395 # Offset: 1159
.Ltmp400:
    00000489: 	movslq	%esi, %rdx
    0000048c: 	addb	(%rdi,%rdx), %al
    0000048f: 	leal	0x1(%rsi), %edx
    00000492: 	cmpl	%edx, %r8d
    00000495: 	jle	.Ltmp395 # Offset: 1173
    00000497: 	movslq	%edx, %rdx
    0000049a: 	addb	(%rdi,%rdx), %al
    0000049d: 	leal	0x2(%rsi), %edx
    000004a0: 	cmpl	%edx, %r8d
    000004a3: 	jle	.Ltmp395 # Offset: 1187
    000004a5: 	movslq	%edx, %rdx
    000004a8: 	addb	(%rdi,%rdx), %al
    000004ab: 	leal	0x3(%rsi), %edx
    000004ae: 	cmpl	%r8d, %edx
    000004b1: 	jge	.Ltmp395 # Offset: 1201
    000004b3: 	movslq	%edx, %rdx
    000004b6: 	addb	(%rdi,%rdx), %al
    000004b9: 	leal	0x4(%rsi), %edx
    000004bc: 	cmpl	%edx, %r8d
    000004bf: 	jle	.Ltmp395 # Offset: 1215
    000004c1: 	movslq	%edx, %rdx
    000004c4: 	addb	(%rdi,%rdx), %al
    000004c7: 	leal	0x5(%rsi), %edx
    000004ca: 	cmpl	%edx, %r8d
    000004cd: 	jle	.Ltmp395 # Offset: 1229
    000004cf: 	movslq	%edx, %rdx
    000004d2: 	addb	(%rdi,%rdx), %al
    000004d5: 	leal	0x6(%rsi), %edx
    000004d8: 	cmpl	%edx, %r8d
    000004db: 	jle	.Ltmp395 # Offset: 1243
    000004dd: 	movslq	%edx, %rdx
    000004e0: 	addb	(%rdi,%rdx), %al
.Ltmp395:
    000004e3: 	retq # Offset: 1251
    000004e4: 	nopl	(%rax) # Size: 4
.Ltmp389:
    000004e8: 	movl	%esi, %edx
    000004ea: 	jmp	.Ltmp393 # Offset: 1258
    000004ef: 	nop # Size: 1
.Ltmp384:
    000004f0: 	xorl	%esi, %esi
    000004f2: 	xorl	%eax, %eax
    000004f4: 	jmp	.Ltmp387 # Offset: 1268
.Ltmp390:
    000004f9: 	movl	%esi, %r10d
    000004fc: 	xorl	%r9d, %r9d
    000004ff: 	jmp	.Ltmp401 # Offset: 1279
.Ltmp385:
    00000504: 	xorl	%r9d, %r9d
    00000507: 	xorl	%r10d, %r10d
    0000050a: 	xorl	%eax, %eax
    0000050c: 	jmp	.Ltmp402 # Offset: 1292
.Ltmp396:
    00000511: 	movl	%edx, %esi
    00000513: 	xorl	%ecx, %ecx
    00000515: 	jmp	.Ltmp403 # Offset: 1301
.Ltmp399:
    0000051a: 	retq # Offset: 1306
DWARF CFI Instructions:
    <empty>
End of Function "_Z24test_while_loop3_halfoptIhET_PKS0_iS0_"

Binary Function "_Z17test_do_loop3_optIhET_PKS0_iS0_" after disassembly {
  Number      : 86
  State       : disassembled
  Address     : 0x65d0
  Size        : 0x570
  MaxSize     : 0x570
  Offset      : 0x65d0
  Section     : .text
  Orc Section : .local.text._Z17test_do_loop3_optIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB085:
    00000000: 	endbr64
    00000004: 	movzbl	%dl, %ecx
    00000007: 	leal	(%rcx,%rcx), %r10d
    0000000b: 	cmpl	%esi, %r10d
    0000000e: 	jg	.Ltmp404 # Offset: 14
    00000014: 	testl	%esi, %esi
    00000016: 	movl	$0x1, %edx
    0000001b: 	cmovgl	%esi, %edx
    0000001e: 	cmpl	$0xf, %esi
    00000021: 	jle	.Ltmp405 # Offset: 33
    00000027: 	movl	%edx, %ecx
    00000029: 	pxor	%xmm0, %xmm0
    0000002d: 	movq	%rdi, %rax
    00000030: 	shrl	$0x4, %ecx
    00000033: 	subl	$0x1, %ecx
    00000036: 	shlq	$0x4, %rcx
    0000003a: 	leaq	0x10(%rdi,%rcx), %rcx
    0000003f: 	nop # Size: 1
.Ltmp406:
    00000040: 	movdqu	(%rax), %xmm3
    00000044: 	addq	$0x10, %rax
    00000048: 	paddb	%xmm3, %xmm0
    0000004c: 	cmpq	%rcx, %rax
    0000004f: 	jne	.Ltmp406 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%edx, %r8d
    00000058: 	psrldq	$0x8, %xmm1
    0000005d: 	andl	$-0x10, %r8d
    00000061: 	paddb	%xmm1, %xmm0
    00000065: 	pxor	%xmm1, %xmm1
    00000069: 	movl	%r8d, %ecx
    0000006c: 	psadbw	%xmm1, %xmm0
    00000070: 	movd	%xmm0, %eax
    00000074: 	cmpl	%edx, %r8d
    00000077: 	je	.Ltmp407 # Offset: 119
.Ltmp424:
    0000007d: 	subl	%r8d, %edx
    00000080: 	leal	-0x1(%rdx), %r9d
    00000084: 	cmpl	$0x6, %r9d
    00000088: 	jbe	.Ltmp408 # Offset: 136
    0000008a: 	movq	(%rdi,%r8), %xmm1
    00000090: 	pxor	%xmm0, %xmm0
    00000094: 	movdqa	%xmm1, %xmm4
    00000098: 	psadbw	%xmm0, %xmm4
    0000009c: 	movq	%xmm4, %r8
    000000a1: 	addl	%r8d, %eax
    000000a4: 	movl	%edx, %r8d
    000000a7: 	andl	$-0x8, %r8d
    000000ab: 	addl	%r8d, %ecx
    000000ae: 	cmpl	%r8d, %edx
    000000b1: 	je	.Ltmp409 # Offset: 177
.Ltmp408:
    000000b7: 	movslq	%ecx, %rdx
    000000ba: 	addb	(%rdi,%rdx), %al
    000000bd: 	leal	0x1(%rcx), %edx
    000000c0: 	cmpl	%edx, %esi
    000000c2: 	jle	.Ltmp409 # Offset: 194
    000000c8: 	movslq	%edx, %rdx
    000000cb: 	addb	(%rdi,%rdx), %al
    000000ce: 	leal	0x2(%rcx), %edx
    000000d1: 	cmpl	%edx, %esi
    000000d3: 	jle	.Ltmp409 # Offset: 211
    000000d9: 	movslq	%edx, %rdx
    000000dc: 	addb	(%rdi,%rdx), %al
    000000df: 	leal	0x3(%rcx), %edx
    000000e2: 	cmpl	%edx, %esi
    000000e4: 	jle	.Ltmp409 # Offset: 228
    000000ea: 	movslq	%edx, %rdx
    000000ed: 	addb	(%rdi,%rdx), %al
    000000f0: 	leal	0x4(%rcx), %edx
    000000f3: 	cmpl	%edx, %esi
    000000f5: 	jle	.Ltmp409 # Offset: 245
    000000fb: 	movslq	%edx, %rdx
    000000fe: 	addb	(%rdi,%rdx), %al
    00000101: 	leal	0x5(%rcx), %edx
    00000104: 	cmpl	%edx, %esi
    00000106: 	jle	.Ltmp409 # Offset: 262
    0000010c: 	movslq	%edx, %rdx
    0000010f: 	addl	$0x6, %ecx
    00000112: 	addb	(%rdi,%rdx), %al
    00000115: 	cmpl	%ecx, %esi
    00000117: 	jle	.Ltmp409 # Offset: 279
    0000011d: 	movslq	%ecx, %rcx
    00000120: 	addb	(%rdi,%rcx), %al
    00000123: 	retq # Offset: 291
    00000124: 	nopl	(%rax) # Size: 4
.Ltmp404:
    00000128: 	testb	%dl, %dl
    0000012a: 	movl	%edx, %r11d
    0000012d: 	movl	$0x1, %edx
    00000132: 	pushq	%rbx
    00000133: 	cmovnel	%ecx, %edx
    00000136: 	cmpb	$0xf, %r11b
    0000013a: 	jbe	.Ltmp410 # Offset: 314
    00000140: 	movl	%edx, %r8d
    00000143: 	movdqa	DATAat0x38840(%rip), %xmm2
    0000014b: 	pxor	%xmm1, %xmm1
    0000014f: 	movq	%rdi, %rax
    00000152: 	shrl	$0x4, %r8d
    00000156: 	subl	$0x1, %r8d
    0000015a: 	shlq	$0x4, %r8
    0000015e: 	leaq	0x10(%rdi,%r8), %r8
    00000163: 	nopl	(%rax,%rax) # Size: 5
.Ltmp411:
    00000168: 	movdqu	(%rax), %xmm0
    0000016c: 	addq	$0x10, %rax
    00000170: 	paddb	%xmm2, %xmm0
    00000174: 	paddb	%xmm0, %xmm1
    00000178: 	cmpq	%r8, %rax
    0000017b: 	jne	.Ltmp411 # Offset: 379
    0000017d: 	movdqa	%xmm1, %xmm0
    00000181: 	movl	%edx, %r8d
    00000184: 	psrldq	$0x8, %xmm0
    00000189: 	andl	$-0x10, %r8d
    0000018d: 	paddb	%xmm0, %xmm1
    00000191: 	pxor	%xmm0, %xmm0
    00000195: 	movl	%r8d, %r9d
    00000198: 	psadbw	%xmm0, %xmm1
    0000019c: 	movd	%xmm1, %eax
    000001a0: 	cmpl	%r8d, %edx
    000001a3: 	je	.Ltmp412 # Offset: 419
.Ltmp425:
    000001a9: 	subl	%r8d, %edx
    000001ac: 	leal	-0x1(%rdx), %ebx
    000001af: 	cmpl	$0x6, %ebx
    000001b2: 	jbe	.Ltmp413 # Offset: 434
    000001b4: 	movq	DATAat0x38840(%rip), %xmm1
    000001bc: 	movq	(%rdi,%r8), %xmm0
    000001c2: 	paddb	%xmm0, %xmm1
    000001c6: 	pxor	%xmm0, %xmm0
    000001ca: 	movdqa	%xmm1, %xmm5
    000001ce: 	psadbw	%xmm0, %xmm5
    000001d2: 	movq	%xmm5, %r8
    000001d7: 	movq	%xmm5, -0x10(%rsp)
    000001dd: 	movl	%r8d, %ebx
    000001e0: 	movl	%edx, %r8d
    000001e3: 	andl	$-0x8, %r8d
    000001e7: 	addl	%ebx, %eax
    000001e9: 	addl	%r8d, %r9d
    000001ec: 	cmpl	%r8d, %edx
    000001ef: 	je	.Ltmp412 # Offset: 495
.Ltmp413:
    000001f1: 	movslq	%r9d, %rdx
    000001f4: 	movzbl	(%rdi,%rdx), %edx
    000001f8: 	leal	0x1(%rax,%rdx), %eax
    000001fc: 	leal	0x1(%r9), %edx
    00000200: 	cmpl	%edx, %ecx
    00000202: 	jle	.Ltmp412 # Offset: 514
    00000204: 	movslq	%edx, %rdx
    00000207: 	movzbl	(%rdi,%rdx), %edx
    0000020b: 	leal	0x1(%rax,%rdx), %eax
    0000020f: 	leal	0x2(%r9), %edx
    00000213: 	cmpl	%edx, %ecx
    00000215: 	jle	.Ltmp412 # Offset: 533
    00000217: 	movslq	%edx, %rdx
    0000021a: 	movzbl	(%rdi,%rdx), %edx
    0000021e: 	leal	0x1(%rax,%rdx), %eax
    00000222: 	leal	0x3(%r9), %edx
    00000226: 	cmpl	%edx, %ecx
    00000228: 	jle	.Ltmp412 # Offset: 552
    0000022a: 	movslq	%edx, %rdx
    0000022d: 	movzbl	(%rdi,%rdx), %edx
    00000231: 	leal	0x1(%rax,%rdx), %eax
    00000235: 	leal	0x4(%r9), %edx
    00000239: 	cmpl	%edx, %ecx
    0000023b: 	jle	.Ltmp412 # Offset: 571
    0000023d: 	movslq	%edx, %rdx
    00000240: 	movzbl	(%rdi,%rdx), %edx
    00000244: 	leal	0x1(%rax,%rdx), %eax
    00000248: 	leal	0x5(%r9), %edx
    0000024c: 	cmpl	%edx, %ecx
    0000024e: 	jle	.Ltmp412 # Offset: 590
    00000250: 	movslq	%edx, %rdx
    00000253: 	movzbl	(%rdi,%rdx), %edx
    00000257: 	leal	0x1(%rax,%rdx), %eax
    0000025b: 	leal	0x6(%r9), %edx
    0000025f: 	cmpl	%edx, %ecx
    00000261: 	jle	.Ltmp412 # Offset: 609
    00000263: 	movslq	%edx, %rdx
    00000266: 	movzbl	(%rdi,%rdx), %edx
    0000026a: 	leal	0x1(%rax,%rdx), %eax
.Ltmp412:
    0000026e: 	testb	%r11b, %r11b
    00000271: 	movl	$0x1, %r9d
    00000277: 	movl	%r10d, %r11d
    0000027a: 	cmovel	%r9d, %ecx
    0000027e: 	subl	%ecx, %r11d
    00000281: 	cmpl	%ecx, %r10d
    00000284: 	cmovgl	%r11d, %r9d
    00000288: 	subl	$0x1, %r11d
    0000028c: 	cmpl	%ecx, %r10d
    0000028f: 	jle	.Ltmp414 # Offset: 655
    00000295: 	cmpl	$0xe, %r11d
    00000299: 	jbe	.Ltmp414 # Offset: 665
    0000029f: 	movl	%r9d, %edx
    000002a2: 	pxor	%xmm1, %xmm1
    000002a6: 	pcmpeqd	%xmm2, %xmm2
    000002aa: 	movslq	%ecx, %r8
    000002ad: 	shrl	$0x4, %edx
    000002b0: 	addq	%rdi, %r8
    000002b3: 	leal	-0x1(%rdx), %ebx
    000002b6: 	leaq	0x10(%r8), %rdx
    000002ba: 	shlq	$0x4, %rbx
    000002be: 	addq	%rdx, %rbx
    000002c1: 	jmp	.Ltmp415 # Offset: 705
    000002c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp416:
    000002c8: 	addq	$0x10, %rdx
.Ltmp415:
    000002cc: 	movdqu	(%r8), %xmm0
    000002d1: 	movq	%rdx, %r8
    000002d4: 	paddb	%xmm2, %xmm0
    000002d8: 	paddb	%xmm0, %xmm1
    000002dc: 	cmpq	%rdx, %rbx
    000002df: 	jne	.Ltmp416 # Offset: 735
    000002e1: 	movdqa	%xmm1, %xmm0
    000002e5: 	movl	%r9d, %ebx
    000002e8: 	psrldq	$0x8, %xmm0
    000002ed: 	andl	$-0x10, %ebx
    000002f0: 	paddb	%xmm0, %xmm1
    000002f4: 	pxor	%xmm0, %xmm0
    000002f8: 	leal	(%rbx,%rcx), %r8d
    000002fc: 	psadbw	%xmm0, %xmm1
    00000300: 	movd	%xmm1, %edx
    00000304: 	addl	%edx, %eax
    00000306: 	cmpl	%ebx, %r9d
    00000309: 	je	.Ltmp417 # Offset: 777
.Ltmp426:
    0000030f: 	subl	%ebx, %r9d
    00000312: 	leal	-0x1(%r9), %edx
    00000316: 	cmpl	$0x6, %edx
    00000319: 	jbe	.Ltmp418 # Offset: 793
    0000031b: 	movq	DATAat0x38a10(%rip), %xmm1
    00000323: 	movslq	%ecx, %rdx
    00000326: 	addq	%rdi, %rdx
    00000329: 	movq	(%rdx,%rbx), %xmm0
    0000032e: 	paddb	%xmm0, %xmm1
    00000332: 	pxor	%xmm0, %xmm0
    00000336: 	movdqa	%xmm1, %xmm6
    0000033a: 	psadbw	%xmm0, %xmm6
    0000033e: 	movq	%xmm6, %rdx
    00000343: 	movq	%xmm6, -0x18(%rsp)
    00000349: 	movl	%edx, %ebx
    0000034b: 	movl	%r9d, %edx
    0000034e: 	andl	$-0x8, %edx
    00000351: 	addl	%ebx, %eax
    00000353: 	addl	%edx, %r8d
    00000356: 	cmpl	%edx, %r9d
    00000359: 	je	.Ltmp417 # Offset: 857
.Ltmp418:
    0000035f: 	movslq	%r8d, %rdx
    00000362: 	movzbl	(%rdi,%rdx), %edx
    00000366: 	leal	-0x1(%rax,%rdx), %eax
    0000036a: 	leal	0x1(%r8), %edx
    0000036e: 	cmpl	%edx, %r10d
    00000371: 	jle	.Ltmp417 # Offset: 881
    00000373: 	movslq	%edx, %rdx
    00000376: 	movzbl	(%rdi,%rdx), %edx
    0000037a: 	leal	-0x1(%rax,%rdx), %eax
    0000037e: 	leal	0x2(%r8), %edx
    00000382: 	cmpl	%edx, %r10d
    00000385: 	jle	.Ltmp417 # Offset: 901
    00000387: 	movslq	%edx, %rdx
    0000038a: 	movzbl	(%rdi,%rdx), %edx
    0000038e: 	leal	-0x1(%rax,%rdx), %eax
    00000392: 	leal	0x3(%r8), %edx
    00000396: 	cmpl	%edx, %r10d
    00000399: 	jle	.Ltmp417 # Offset: 921
    0000039b: 	movslq	%edx, %rdx
    0000039e: 	movzbl	(%rdi,%rdx), %edx
    000003a2: 	leal	-0x1(%rax,%rdx), %eax
    000003a6: 	leal	0x4(%r8), %edx
    000003aa: 	cmpl	%edx, %r10d
    000003ad: 	jle	.Ltmp417 # Offset: 941
    000003af: 	movslq	%edx, %rdx
    000003b2: 	movzbl	(%rdi,%rdx), %edx
    000003b6: 	leal	-0x1(%rax,%rdx), %eax
    000003ba: 	leal	0x5(%r8), %edx
    000003be: 	cmpl	%edx, %r10d
    000003c1: 	jle	.Ltmp417 # Offset: 961
    000003c3: 	movslq	%edx, %rdx
    000003c6: 	addl	$0x6, %r8d
    000003ca: 	movzbl	(%rdi,%rdx), %edx
    000003ce: 	leal	-0x1(%rax,%rdx), %eax
    000003d2: 	cmpl	%r8d, %r10d
    000003d5: 	jle	.Ltmp417 # Offset: 981
    000003d7: 	movslq	%r8d, %r8
    000003da: 	movzbl	(%rdi,%r8), %edx
    000003df: 	leal	-0x1(%rax,%rdx), %eax
.Ltmp417:
    000003e3: 	xorl	%edx, %edx
    000003e5: 	cmpl	%ecx, %r10d
    000003e8: 	leal	0x1(%rcx), %r9d
    000003ec: 	movl	$0x1, %r10d
    000003f2: 	cmovlel	%edx, %r11d
    000003f6: 	movl	%esi, %edx
    000003f8: 	leal	(%r11,%r9), %r8d
    000003fc: 	subl	%r8d, %edx
    000003ff: 	cmpl	%r8d, %esi
    00000402: 	cmovgl	%edx, %r10d
    00000406: 	subl	$0x1, %edx
    00000409: 	cmpl	$0xe, %edx
    0000040c: 	jbe	.Ltmp419 # Offset: 1036
    00000412: 	cmpl	%r8d, %esi
    00000415: 	jle	.Ltmp419 # Offset: 1045
    0000041b: 	movslq	%r11d, %rdx
    0000041e: 	movslq	%r9d, %rcx
    00000421: 	pxor	%xmm0, %xmm0
    00000425: 	addq	%rdx, %rcx
    00000428: 	movl	%r10d, %edx
    0000042b: 	shrl	$0x4, %edx
    0000042e: 	addq	%rdi, %rcx
    00000431: 	leal	-0x1(%rdx), %ebx
    00000434: 	leaq	0x10(%rcx), %rdx
    00000438: 	shlq	$0x4, %rbx
    0000043c: 	addq	%rdx, %rbx
    0000043f: 	jmp	.Ltmp420 # Offset: 1087
    00000441: 	nopl	(%rax) # Size: 7
.Ltmp421:
    00000448: 	addq	$0x10, %rdx
.Ltmp420:
    0000044c: 	movdqu	(%rcx), %xmm1
    00000450: 	movq	%rdx, %rcx
    00000453: 	paddb	%xmm1, %xmm0
    00000457: 	cmpq	%rbx, %rdx
    0000045a: 	jne	.Ltmp421 # Offset: 1114
    0000045c: 	movdqa	%xmm0, %xmm1
    00000460: 	psrldq	$0x8, %xmm1
    00000465: 	paddb	%xmm1, %xmm0
    00000469: 	pxor	%xmm1, %xmm1
    0000046d: 	psadbw	%xmm1, %xmm0
    00000471: 	movd	%xmm0, %edx
    00000475: 	addl	%edx, %eax
    00000477: 	movl	%r10d, %edx
    0000047a: 	andl	$-0x10, %edx
    0000047d: 	addl	%edx, %r8d
    00000480: 	cmpl	%edx, %r10d
    00000483: 	je	.Ltmp422 # Offset: 1155
.Ltmp427:
    00000489: 	subl	%edx, %r10d
    0000048c: 	leal	-0x1(%r10), %ecx
    00000490: 	cmpl	$0x6, %ecx
    00000493: 	jbe	.Ltmp423 # Offset: 1171
    00000495: 	movslq	%r9d, %r9
    00000498: 	movslq	%r11d, %r11
    0000049b: 	pxor	%xmm0, %xmm0
    0000049f: 	addq	%rdi, %r9
    000004a2: 	addq	%r11, %r9
    000004a5: 	movq	(%r9,%rdx), %xmm1
    000004ab: 	movdqa	%xmm1, %xmm7
    000004af: 	psadbw	%xmm0, %xmm7
    000004b3: 	movq	%xmm7, %rdx
    000004b8: 	addl	%edx, %eax
    000004ba: 	movl	%r10d, %edx
    000004bd: 	andl	$-0x8, %edx
    000004c0: 	addl	%edx, %r8d
    000004c3: 	cmpl	%edx, %r10d
    000004c6: 	je	.Ltmp422 # Offset: 1222
.Ltmp423:
    000004c8: 	movslq	%r8d, %rdx
    000004cb: 	addb	(%rdi,%rdx), %al
    000004ce: 	leal	0x1(%r8), %edx
    000004d2: 	cmpl	%edx, %esi
    000004d4: 	jle	.Ltmp422 # Offset: 1236
    000004d6: 	movslq	%edx, %rdx
    000004d9: 	addb	(%rdi,%rdx), %al
    000004dc: 	leal	0x2(%r8), %edx
    000004e0: 	cmpl	%edx, %esi
    000004e2: 	jle	.Ltmp422 # Offset: 1250
    000004e4: 	movslq	%edx, %rdx
    000004e7: 	addb	(%rdi,%rdx), %al
    000004ea: 	leal	0x3(%r8), %edx
    000004ee: 	cmpl	%edx, %esi
    000004f0: 	jle	.Ltmp422 # Offset: 1264
    000004f2: 	movslq	%edx, %rdx
    000004f5: 	addb	(%rdi,%rdx), %al
    000004f8: 	leal	0x4(%r8), %edx
    000004fc: 	cmpl	%edx, %esi
    000004fe: 	jle	.Ltmp422 # Offset: 1278
    00000500: 	movslq	%edx, %rdx
    00000503: 	addb	(%rdi,%rdx), %al
    00000506: 	leal	0x5(%r8), %edx
    0000050a: 	cmpl	%edx, %esi
    0000050c: 	jle	.Ltmp422 # Offset: 1292
    0000050e: 	movslq	%edx, %rdx
    00000511: 	addl	$0x6, %r8d
    00000515: 	addb	(%rdi,%rdx), %al
    00000518: 	cmpl	%r8d, %esi
    0000051b: 	jle	.Ltmp422 # Offset: 1307
    0000051d: 	movslq	%r8d, %r8
    00000520: 	addb	(%rdi,%r8), %al
.Ltmp422:
    00000524: 	popq	%rbx
    00000525: 	retq # Offset: 1317
    00000526: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp409:
    00000530: 	retq # Offset: 1328
    00000531: 	nopl	(%rax) # Size: 7
.Ltmp405:
    00000538: 	xorl	%r8d, %r8d
    0000053b: 	xorl	%ecx, %ecx
    0000053d: 	xorl	%eax, %eax
    0000053f: 	jmp	.Ltmp424 # Offset: 1343
    00000544: 	nopl	(%rax) # Size: 4
.Ltmp410:
    00000548: 	xorl	%r8d, %r8d
    0000054b: 	xorl	%r9d, %r9d
    0000054e: 	xorl	%eax, %eax
    00000550: 	jmp	.Ltmp425 # Offset: 1360
    00000555: 	nopl	(%rax) # Size: 3
.Ltmp414:
    00000558: 	movl	%ecx, %r8d
    0000055b: 	xorl	%ebx, %ebx
    0000055d: 	jmp	.Ltmp426 # Offset: 1373
    00000562: 	nopw	(%rax,%rax) # Size: 6
.Ltmp419:
    00000568: 	xorl	%edx, %edx
    0000056a: 	jmp	.Ltmp427 # Offset: 1386
.Ltmp407:
    0000056f: 	retq # Offset: 1391
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_do_loop3_optIhET_PKS0_iS0_"

Binary Function "_Z23test_goto_loop3_halfoptIhET_PKS0_iS0_" after disassembly {
  Number      : 87
  State       : disassembled
  Address     : 0x6b40
  Size        : 0x187
  MaxSize     : 0x190
  Offset      : 0x6b40
  Section     : .text
  Orc Section : .local.text._Z23test_goto_loop3_halfoptIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB086:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	testl	%esi, %esi
    00000009: 	jle	.Ltmp428 # Offset: 9
    0000000f: 	movzbl	%dl, %edx
    00000012: 	movl	$0x1, %ecx
    00000017: 	cmpl	%edx, %esi
    00000019: 	movl	%edx, %r9d
    0000001c: 	cmovlel	%esi, %r9d
.Ltmp429:
    00000020: 	movzbl	-0x1(%rdi,%rcx), %eax
    00000025: 	leal	0x1(%r8,%rax), %r8d
    0000002a: 	movl	%ecx, %eax
    0000002c: 	addq	$0x1, %rcx
    00000030: 	cmpl	%r9d, %eax
    00000033: 	jl	.Ltmp429 # Offset: 51
    00000035: 	cmpl	%eax, %esi
    00000037: 	jle	.Ltmp428 # Offset: 55
    0000003d: 	leal	(%rdx,%rdx), %ecx
    00000040: 	addl	$0x1, %eax
    00000043: 	cmpl	%esi, %ecx
    00000045: 	cltq
    00000047: 	cmovgl	%esi, %ecx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp430:
    00000050: 	movzbl	-0x1(%rdi,%rax), %edx
    00000055: 	leal	-0x1(%r8,%rdx), %r8d
    0000005a: 	movslq	%eax, %rdx
    0000005d: 	addq	$0x1, %rax
    00000061: 	cmpl	%ecx, %edx
    00000063: 	jl	.Ltmp430 # Offset: 99
    00000065: 	cmpl	%edx, %esi
    00000067: 	jle	.Ltmp428 # Offset: 103
    0000006d: 	movl	%esi, %r9d
    00000070: 	subl	%edx, %r9d
    00000073: 	leal	-0x1(%r9), %eax
    00000077: 	cmpl	$0xe, %eax
    0000007a: 	jbe	.Ltmp431 # Offset: 122
    00000080: 	movl	%r9d, %eax
    00000083: 	movslq	%edx, %rcx
    00000086: 	pxor	%xmm0, %xmm0
    0000008a: 	shrl	$0x4, %eax
    0000008d: 	addq	%rdi, %rcx
    00000090: 	leal	-0x1(%rax), %r10d
    00000094: 	leaq	0x10(%rcx), %rax
    00000098: 	shlq	$0x4, %r10
    0000009c: 	addq	%rax, %r10
    0000009f: 	jmp	.Ltmp432 # Offset: 159
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp433:
    000000a8: 	addq	$0x10, %rax
.Ltmp432:
    000000ac: 	movdqu	(%rcx), %xmm1
    000000b0: 	movq	%rax, %rcx
    000000b3: 	paddb	%xmm1, %xmm0
    000000b7: 	cmpq	%r10, %rax
    000000ba: 	jne	.Ltmp433 # Offset: 186
    000000bc: 	movdqa	%xmm0, %xmm1
    000000c0: 	movl	%r9d, %ecx
    000000c3: 	psrldq	$0x8, %xmm1
    000000c8: 	andl	$-0x10, %ecx
    000000cb: 	paddb	%xmm1, %xmm0
    000000cf: 	pxor	%xmm1, %xmm1
    000000d3: 	psadbw	%xmm1, %xmm0
    000000d7: 	movd	%xmm0, %eax
    000000db: 	addl	%eax, %r8d
    000000de: 	leal	(%rcx,%rdx), %eax
    000000e1: 	cmpl	%r9d, %ecx
    000000e4: 	je	.Ltmp428 # Offset: 228
.Ltmp435:
    000000ea: 	subl	%ecx, %r9d
    000000ed: 	leal	-0x1(%r9), %r10d
    000000f1: 	cmpl	$0x6, %r10d
    000000f5: 	jbe	.Ltmp434 # Offset: 245
    000000f7: 	addq	%rdi, %rdx
    000000fa: 	pxor	%xmm0, %xmm0
    000000fe: 	movq	(%rdx,%rcx), %xmm1
    00000103: 	movdqa	%xmm1, %xmm2
    00000107: 	psadbw	%xmm0, %xmm2
    0000010b: 	movq	%xmm2, %rdx
    00000110: 	addl	%edx, %r8d
    00000113: 	movl	%r9d, %edx
    00000116: 	andl	$-0x8, %edx
    00000119: 	addl	%edx, %eax
    0000011b: 	cmpl	%edx, %r9d
    0000011e: 	je	.Ltmp428 # Offset: 286
.Ltmp434:
    00000120: 	movslq	%eax, %rdx
    00000123: 	addb	(%rdi,%rdx), %r8b
    00000127: 	leal	0x1(%rax), %edx
    0000012a: 	cmpl	%edx, %esi
    0000012c: 	jle	.Ltmp428 # Offset: 300
    0000012e: 	movslq	%edx, %rdx
    00000131: 	addb	(%rdi,%rdx), %r8b
    00000135: 	leal	0x2(%rax), %edx
    00000138: 	cmpl	%edx, %esi
    0000013a: 	jle	.Ltmp428 # Offset: 314
    0000013c: 	movslq	%edx, %rdx
    0000013f: 	addb	(%rdi,%rdx), %r8b
    00000143: 	leal	0x3(%rax), %edx
    00000146: 	cmpl	%edx, %esi
    00000148: 	jle	.Ltmp428 # Offset: 328
    0000014a: 	movslq	%edx, %rdx
    0000014d: 	addb	(%rdi,%rdx), %r8b
    00000151: 	leal	0x4(%rax), %edx
    00000154: 	cmpl	%edx, %esi
    00000156: 	jle	.Ltmp428 # Offset: 342
    00000158: 	movslq	%edx, %rdx
    0000015b: 	addb	(%rdi,%rdx), %r8b
    0000015f: 	leal	0x5(%rax), %edx
    00000162: 	cmpl	%edx, %esi
    00000164: 	jle	.Ltmp428 # Offset: 356
    00000166: 	movslq	%edx, %rdx
    00000169: 	addl	$0x6, %eax
    0000016c: 	addb	(%rdi,%rdx), %r8b
    00000170: 	cmpl	%eax, %esi
    00000172: 	jle	.Ltmp428 # Offset: 370
    00000174: 	cltq
    00000176: 	addb	(%rdi,%rax), %r8b
.Ltmp428:
    0000017a: 	movl	%r8d, %eax
    0000017d: 	retq # Offset: 381
.Ltmp431:
    0000017e: 	movl	%edx, %eax
    00000180: 	xorl	%ecx, %ecx
    00000182: 	jmp	.Ltmp435 # Offset: 386
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_goto_loop3_halfoptIhET_PKS0_iS0_"

Binary Function "_Z20test_for_loop3_paramIhET_PKS0_iS0_" after disassembly {
  Number      : 88
  State       : disassembled
  Address     : 0x6cd0
  Size        : 0x204
  MaxSize     : 0x210
  Offset      : 0x6cd0
  Section     : .text
  Orc Section : .local.text._Z20test_for_loop3_paramIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB087:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp436 # Offset: 6
    0000000c: 	movzbl	%dl, %eax
    0000000f: 	leal	(%rax,%rax), %r8d
    00000013: 	testl	%eax, %eax
    00000015: 	je	.Ltmp437 # Offset: 21
    0000001b: 	cmpl	%esi, %eax
    0000001d: 	movl	$0x1, %ecx
    00000022: 	cmovgl	%esi, %eax
    00000025: 	testl	%eax, %eax
    00000027: 	movl	%eax, %r10d
    0000002a: 	cmovgl	%eax, %ecx
    0000002d: 	cmpl	$0xf, %eax
    00000030: 	jle	.Ltmp438 # Offset: 48
    00000036: 	movl	%ecx, %edx
    00000038: 	movdqa	DATAat0x38850(%rip), %xmm3
    00000040: 	movdqa	DATAat0x38860(%rip), %xmm6
    00000048: 	movq	%rdi, %rax
    0000004b: 	shrl	$0x4, %edx
    0000004e: 	movdqa	DATAat0x38840(%rip), %xmm5
    00000056: 	movdqa	DATAat0x38870(%rip), %xmm4
    0000005e: 	pxor	%xmm2, %xmm2
    00000062: 	subl	$0x1, %edx
    00000065: 	shlq	$0x4, %rdx
    00000069: 	leaq	0x10(%rdi,%rdx), %rdx
    0000006e: 	nop # Size: 2
.Ltmp439:
    00000070: 	movdqu	(%rax), %xmm0
    00000074: 	movdqa	%xmm3, %xmm1
    00000078: 	addq	$0x10, %rax
    0000007c: 	paddd	%xmm6, %xmm3
    00000080: 	paddd	%xmm4, %xmm1
    00000084: 	paddb	%xmm5, %xmm0
    00000088: 	paddb	%xmm0, %xmm2
    0000008c: 	cmpq	%rdx, %rax
    0000008f: 	jne	.Ltmp439 # Offset: 143
    00000091: 	movdqa	%xmm2, %xmm0
    00000095: 	movl	%ecx, %edx
    00000097: 	pshufd	$0xff, %xmm1, %xmm1
    0000009c: 	psrldq	$0x8, %xmm0
    000000a1: 	andl	$-0x10, %edx
    000000a4: 	movd	%xmm1, %eax
    000000a8: 	paddb	%xmm0, %xmm2
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	movl	%edx, %r11d
    000000b3: 	psadbw	%xmm0, %xmm2
    000000b7: 	movd	%xmm2, %r9d
    000000bc: 	cmpl	%edx, %ecx
    000000be: 	je	.Ltmp440 # Offset: 190
.Ltmp445:
    000000c4: 	subl	%edx, %ecx
    000000c6: 	leal	-0x1(%rcx), %eax
    000000c9: 	cmpl	$0x6, %eax
    000000cc: 	jbe	.Ltmp441 # Offset: 204
    000000ce: 	leal	0x1(%r11), %eax
    000000d2: 	movd	%r11d, %xmm0
    000000d7: 	movq	DATAat0x38a18(%rip), %xmm1
    000000df: 	movd	%eax, %xmm4
    000000e3: 	punpckldq	%xmm4, %xmm0
    000000e7: 	paddd	%xmm1, %xmm0
    000000eb: 	movq	DATAat0x38840(%rip), %xmm1
    000000f3: 	pshufd	$0xe5, %xmm0, %xmm5
    000000f8: 	movq	(%rdi,%rdx), %xmm0
    000000fd: 	movd	%xmm5, %eax
    00000101: 	paddb	%xmm0, %xmm1
    00000105: 	pxor	%xmm0, %xmm0
    00000109: 	movdqa	%xmm1, %xmm7
    0000010d: 	psadbw	%xmm0, %xmm7
    00000111: 	movq	%xmm7, %rdx
    00000116: 	addl	%edx, %r9d
    00000119: 	movl	%ecx, %edx
    0000011b: 	andl	$-0x8, %edx
    0000011e: 	addl	%edx, %r11d
    00000121: 	cmpl	%edx, %ecx
    00000123: 	je	.Ltmp440 # Offset: 291
.Ltmp441:
    00000129: 	movslq	%r11d, %rax
    0000012c: 	movzbl	(%rdi,%rax), %eax
    00000130: 	leal	0x1(%r9,%rax), %r9d
    00000135: 	leal	0x1(%r11), %eax
    00000139: 	cmpl	%eax, %r10d
    0000013c: 	jle	.Ltmp440 # Offset: 316
    0000013e: 	cltq
    00000140: 	addb	(%rdi,%rax), %r9b
    00000144: 	leal	0x2(%r11), %eax
    00000148: 	addl	$0x1, %r9d
    0000014c: 	cmpl	%eax, %r10d
    0000014f: 	jle	.Ltmp440 # Offset: 335
    00000151: 	cltq
    00000153: 	movzbl	(%rdi,%rax), %eax
    00000157: 	leal	0x1(%r9,%rax), %r9d
    0000015c: 	leal	0x3(%r11), %eax
    00000160: 	cmpl	%eax, %r10d
    00000163: 	jle	.Ltmp440 # Offset: 355
    00000165: 	cltq
    00000167: 	movzbl	(%rdi,%rax), %eax
    0000016b: 	leal	0x1(%r9,%rax), %r9d
    00000170: 	leal	0x4(%r11), %eax
    00000174: 	cmpl	%eax, %r10d
    00000177: 	jle	.Ltmp440 # Offset: 375
    00000179: 	cltq
    0000017b: 	movzbl	(%rdi,%rax), %eax
    0000017f: 	leal	0x1(%r9,%rax), %r9d
    00000184: 	leal	0x5(%r11), %eax
    00000188: 	cmpl	%eax, %r10d
    0000018b: 	jle	.Ltmp440 # Offset: 395
    0000018d: 	cltq
    0000018f: 	movzbl	(%rdi,%rax), %eax
    00000193: 	leal	0x1(%r9,%rax), %r9d
    00000198: 	leal	0x6(%r11), %eax
    0000019c: 	cmpl	%eax, %r10d
    0000019f: 	jle	.Ltmp440 # Offset: 415
    000001a1: 	cltq
    000001a3: 	movzbl	(%rdi,%rax), %eax
    000001a7: 	leal	0x1(%r9,%rax), %r9d
    000001ac: 	leal	0x7(%r11), %eax
.Ltmp440:
    000001b0: 	cmpl	%eax, %esi
    000001b2: 	jle	.Ltmp442 # Offset: 434
.Ltmp444:
    000001b4: 	cltq
    000001b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp443:
    000001c0: 	movzbl	(%rdi,%rax), %edx
    000001c4: 	cmpl	%eax, %r8d
    000001c7: 	leal	(%r9,%rdx), %ecx
    000001cb: 	leal	-0x1(%rdx,%r9), %edx
    000001d0: 	cmovgl	%edx, %ecx
    000001d3: 	addq	$0x1, %rax
    000001d7: 	movl	%ecx, %r9d
    000001da: 	cmpl	%eax, %esi
    000001dc: 	jg	.Ltmp443 # Offset: 476
.Ltmp442:
    000001de: 	movl	%r9d, %eax
    000001e1: 	retq # Offset: 481
    000001e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp437:
    000001e8: 	xorl	%r9d, %r9d
    000001eb: 	jmp	.Ltmp444 # Offset: 491
    000001ed: 	nopl	(%rax) # Size: 3
.Ltmp436:
    000001f0: 	xorl	%r9d, %r9d
    000001f3: 	movl	%r9d, %eax
    000001f6: 	retq # Offset: 502
.Ltmp438:
    000001f7: 	xorl	%edx, %edx
    000001f9: 	xorl	%r11d, %r11d
    000001fc: 	xorl	%r9d, %r9d
    000001ff: 	jmp	.Ltmp445 # Offset: 511
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_for_loop3_paramIhET_PKS0_iS0_"

Binary Function "_Z22test_while_loop3_paramIhET_PKS0_iS0_" after disassembly {
  Number      : 89
  State       : disassembled
  Address     : 0x6ee0
  Size        : 0x204
  MaxSize     : 0x210
  Offset      : 0x6ee0
  Section     : .text
  Orc Section : .local.text._Z22test_while_loop3_paramIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB088:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp446 # Offset: 6
    0000000c: 	movzbl	%dl, %eax
    0000000f: 	leal	(%rax,%rax), %r8d
    00000013: 	testl	%eax, %eax
    00000015: 	je	.Ltmp447 # Offset: 21
    0000001b: 	cmpl	%esi, %eax
    0000001d: 	movl	$0x1, %ecx
    00000022: 	cmovgl	%esi, %eax
    00000025: 	testl	%eax, %eax
    00000027: 	movl	%eax, %r10d
    0000002a: 	cmovgl	%eax, %ecx
    0000002d: 	cmpl	$0xf, %eax
    00000030: 	jle	.Ltmp448 # Offset: 48
    00000036: 	movl	%ecx, %edx
    00000038: 	movdqa	DATAat0x38850(%rip), %xmm3
    00000040: 	movdqa	DATAat0x38860(%rip), %xmm6
    00000048: 	movq	%rdi, %rax
    0000004b: 	shrl	$0x4, %edx
    0000004e: 	movdqa	DATAat0x38840(%rip), %xmm5
    00000056: 	movdqa	DATAat0x38870(%rip), %xmm4
    0000005e: 	pxor	%xmm2, %xmm2
    00000062: 	subl	$0x1, %edx
    00000065: 	shlq	$0x4, %rdx
    00000069: 	leaq	0x10(%rdi,%rdx), %rdx
    0000006e: 	nop # Size: 2
.Ltmp449:
    00000070: 	movdqu	(%rax), %xmm0
    00000074: 	movdqa	%xmm3, %xmm1
    00000078: 	addq	$0x10, %rax
    0000007c: 	paddd	%xmm6, %xmm3
    00000080: 	paddd	%xmm4, %xmm1
    00000084: 	paddb	%xmm5, %xmm0
    00000088: 	paddb	%xmm0, %xmm2
    0000008c: 	cmpq	%rdx, %rax
    0000008f: 	jne	.Ltmp449 # Offset: 143
    00000091: 	movdqa	%xmm2, %xmm0
    00000095: 	movl	%ecx, %edx
    00000097: 	pshufd	$0xff, %xmm1, %xmm1
    0000009c: 	psrldq	$0x8, %xmm0
    000000a1: 	andl	$-0x10, %edx
    000000a4: 	movd	%xmm1, %eax
    000000a8: 	paddb	%xmm0, %xmm2
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	movl	%edx, %r11d
    000000b3: 	psadbw	%xmm0, %xmm2
    000000b7: 	movd	%xmm2, %r9d
    000000bc: 	cmpl	%edx, %ecx
    000000be: 	je	.Ltmp450 # Offset: 190
.Ltmp455:
    000000c4: 	subl	%edx, %ecx
    000000c6: 	leal	-0x1(%rcx), %eax
    000000c9: 	cmpl	$0x6, %eax
    000000cc: 	jbe	.Ltmp451 # Offset: 204
    000000ce: 	leal	0x1(%r11), %eax
    000000d2: 	movd	%r11d, %xmm0
    000000d7: 	movq	DATAat0x38a18(%rip), %xmm1
    000000df: 	movd	%eax, %xmm4
    000000e3: 	punpckldq	%xmm4, %xmm0
    000000e7: 	paddd	%xmm1, %xmm0
    000000eb: 	movq	DATAat0x38840(%rip), %xmm1
    000000f3: 	pshufd	$0xe5, %xmm0, %xmm5
    000000f8: 	movq	(%rdi,%rdx), %xmm0
    000000fd: 	movd	%xmm5, %eax
    00000101: 	paddb	%xmm0, %xmm1
    00000105: 	pxor	%xmm0, %xmm0
    00000109: 	movdqa	%xmm1, %xmm7
    0000010d: 	psadbw	%xmm0, %xmm7
    00000111: 	movq	%xmm7, %rdx
    00000116: 	addl	%edx, %r9d
    00000119: 	movl	%ecx, %edx
    0000011b: 	andl	$-0x8, %edx
    0000011e: 	addl	%edx, %r11d
    00000121: 	cmpl	%edx, %ecx
    00000123: 	je	.Ltmp450 # Offset: 291
.Ltmp451:
    00000129: 	movslq	%r11d, %rax
    0000012c: 	movzbl	(%rdi,%rax), %eax
    00000130: 	leal	0x1(%r9,%rax), %r9d
    00000135: 	leal	0x1(%r11), %eax
    00000139: 	cmpl	%eax, %r10d
    0000013c: 	jle	.Ltmp450 # Offset: 316
    0000013e: 	cltq
    00000140: 	addb	(%rdi,%rax), %r9b
    00000144: 	leal	0x2(%r11), %eax
    00000148: 	addl	$0x1, %r9d
    0000014c: 	cmpl	%eax, %r10d
    0000014f: 	jle	.Ltmp450 # Offset: 335
    00000151: 	cltq
    00000153: 	movzbl	(%rdi,%rax), %eax
    00000157: 	leal	0x1(%r9,%rax), %r9d
    0000015c: 	leal	0x3(%r11), %eax
    00000160: 	cmpl	%eax, %r10d
    00000163: 	jle	.Ltmp450 # Offset: 355
    00000165: 	cltq
    00000167: 	movzbl	(%rdi,%rax), %eax
    0000016b: 	leal	0x1(%r9,%rax), %r9d
    00000170: 	leal	0x4(%r11), %eax
    00000174: 	cmpl	%eax, %r10d
    00000177: 	jle	.Ltmp450 # Offset: 375
    00000179: 	cltq
    0000017b: 	movzbl	(%rdi,%rax), %eax
    0000017f: 	leal	0x1(%r9,%rax), %r9d
    00000184: 	leal	0x5(%r11), %eax
    00000188: 	cmpl	%eax, %r10d
    0000018b: 	jle	.Ltmp450 # Offset: 395
    0000018d: 	cltq
    0000018f: 	movzbl	(%rdi,%rax), %eax
    00000193: 	leal	0x1(%r9,%rax), %r9d
    00000198: 	leal	0x6(%r11), %eax
    0000019c: 	cmpl	%eax, %r10d
    0000019f: 	jle	.Ltmp450 # Offset: 415
    000001a1: 	cltq
    000001a3: 	movzbl	(%rdi,%rax), %eax
    000001a7: 	leal	0x1(%r9,%rax), %r9d
    000001ac: 	leal	0x7(%r11), %eax
.Ltmp450:
    000001b0: 	cmpl	%eax, %esi
    000001b2: 	jle	.Ltmp452 # Offset: 434
.Ltmp454:
    000001b4: 	cltq
    000001b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp453:
    000001c0: 	movzbl	(%rdi,%rax), %edx
    000001c4: 	cmpl	%eax, %r8d
    000001c7: 	leal	(%r9,%rdx), %ecx
    000001cb: 	leal	-0x1(%rdx,%r9), %edx
    000001d0: 	cmovgl	%edx, %ecx
    000001d3: 	addq	$0x1, %rax
    000001d7: 	movl	%ecx, %r9d
    000001da: 	cmpl	%eax, %esi
    000001dc: 	jg	.Ltmp453 # Offset: 476
.Ltmp452:
    000001de: 	movl	%r9d, %eax
    000001e1: 	retq # Offset: 481
    000001e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp447:
    000001e8: 	xorl	%r9d, %r9d
    000001eb: 	jmp	.Ltmp454 # Offset: 491
    000001ed: 	nopl	(%rax) # Size: 3
.Ltmp446:
    000001f0: 	xorl	%r9d, %r9d
    000001f3: 	movl	%r9d, %eax
    000001f6: 	retq # Offset: 502
.Ltmp448:
    000001f7: 	xorl	%edx, %edx
    000001f9: 	xorl	%r11d, %r11d
    000001fc: 	xorl	%r9d, %r9d
    000001ff: 	jmp	.Ltmp455 # Offset: 511
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_while_loop3_paramIhET_PKS0_iS0_"

Binary Function "_Z17test_for_loop_optIsET_PKS0_iS0_" after disassembly {
  Number      : 90
  State       : disassembled
  Address     : 0x70f0
  Size        : 0xef
  MaxSize     : 0xf0
  Offset      : 0x70f0
  Section     : .text
  Orc Section : .local.text._Z17test_for_loop_optIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB089:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movl	%esi, %edx
    00000009: 	testl	%esi, %esi
    0000000b: 	jle	.Ltmp456 # Offset: 11
    00000011: 	leal	-0x1(%rsi), %eax
    00000014: 	cmpl	$0x6, %eax
    00000017: 	jbe	.Ltmp457 # Offset: 23
    0000001d: 	movl	%esi, %ecx
    0000001f: 	movq	%rdi, %rax
    00000022: 	pxor	%xmm0, %xmm0
    00000026: 	shrl	$0x3, %ecx
    00000029: 	subl	$0x1, %ecx
    0000002c: 	shlq	$0x4, %rcx
    00000030: 	leaq	0x10(%rdi,%rcx), %rcx
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp458:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rcx, %rax
    00000047: 	jne	.Ltmp458 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%edx, %ecx
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x8, %ecx
    00000057: 	paddw	%xmm1, %xmm0
    0000005b: 	movdqa	%xmm0, %xmm1
    0000005f: 	psrldq	$0x4, %xmm1
    00000064: 	paddw	%xmm1, %xmm0
    00000068: 	movdqa	%xmm0, %xmm1
    0000006c: 	psrldq	$0x2, %xmm1
    00000071: 	paddw	%xmm1, %xmm0
    00000075: 	pextrw	$0x0, %xmm0, %eax
    0000007a: 	testb	$0x7, %dl
    0000007d: 	je	.Ltmp459 # Offset: 125
.Ltmp461:
    0000007f: 	movslq	%ecx, %rdi
    00000082: 	leaq	(%rdi,%rdi), %rsi
    00000086: 	addw	(%r8,%rdi,2), %ax
    0000008b: 	leal	0x1(%rcx), %edi
    0000008e: 	cmpl	%edi, %edx
    00000090: 	jle	.Ltmp460 # Offset: 144
    00000092: 	leal	0x2(%rcx), %edi
    00000095: 	addw	0x2(%r8,%rsi), %ax
    0000009b: 	cmpl	%edi, %edx
    0000009d: 	jle	.Ltmp460 # Offset: 157
    0000009f: 	leal	0x3(%rcx), %edi
    000000a2: 	addw	0x4(%r8,%rsi), %ax
    000000a8: 	cmpl	%edi, %edx
    000000aa: 	jle	.Ltmp460 # Offset: 170
    000000ac: 	leal	0x4(%rcx), %edi
    000000af: 	addw	0x6(%r8,%rsi), %ax
    000000b5: 	cmpl	%edi, %edx
    000000b7: 	jle	.Ltmp460 # Offset: 183
    000000b9: 	leal	0x5(%rcx), %edi
    000000bc: 	addw	0x8(%r8,%rsi), %ax
    000000c2: 	cmpl	%edi, %edx
    000000c4: 	jle	.Ltmp460 # Offset: 196
    000000c6: 	addl	$0x6, %ecx
    000000c9: 	addw	0xa(%r8,%rsi), %ax
    000000cf: 	cmpl	%ecx, %edx
    000000d1: 	jle	.Ltmp460 # Offset: 209
    000000d3: 	addw	0xc(%r8,%rsi), %ax
    000000d9: 	retq # Offset: 217
    000000da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp456:
    000000e0: 	xorl	%eax, %eax
.Ltmp460:
    000000e2: 	retq # Offset: 226
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp459:
    000000e8: 	retq # Offset: 232
.Ltmp457:
    000000e9: 	xorl	%ecx, %ecx
    000000eb: 	xorl	%eax, %eax
    000000ed: 	jmp	.Ltmp461 # Offset: 237
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_for_loop_optIsET_PKS0_iS0_"

Binary Function "_Z19test_while_loop_optIsET_PKS0_iS0_" after disassembly {
  Number      : 91
  State       : disassembled
  Address     : 0x71e0
  Size        : 0xef
  MaxSize     : 0xf0
  Offset      : 0x71e0
  Section     : .text
  Orc Section : .local.text._Z19test_while_loop_optIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB090:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movl	%esi, %edx
    00000009: 	testl	%esi, %esi
    0000000b: 	jle	.Ltmp462 # Offset: 11
    00000011: 	leal	-0x1(%rsi), %eax
    00000014: 	cmpl	$0x6, %eax
    00000017: 	jbe	.Ltmp463 # Offset: 23
    0000001d: 	movl	%esi, %ecx
    0000001f: 	movq	%rdi, %rax
    00000022: 	pxor	%xmm0, %xmm0
    00000026: 	shrl	$0x3, %ecx
    00000029: 	subl	$0x1, %ecx
    0000002c: 	shlq	$0x4, %rcx
    00000030: 	leaq	0x10(%rdi,%rcx), %rcx
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp464:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rcx, %rax
    00000047: 	jne	.Ltmp464 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%edx, %ecx
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x8, %ecx
    00000057: 	paddw	%xmm1, %xmm0
    0000005b: 	movdqa	%xmm0, %xmm1
    0000005f: 	psrldq	$0x4, %xmm1
    00000064: 	paddw	%xmm1, %xmm0
    00000068: 	movdqa	%xmm0, %xmm1
    0000006c: 	psrldq	$0x2, %xmm1
    00000071: 	paddw	%xmm1, %xmm0
    00000075: 	pextrw	$0x0, %xmm0, %eax
    0000007a: 	testb	$0x7, %dl
    0000007d: 	je	.Ltmp465 # Offset: 125
.Ltmp467:
    0000007f: 	movslq	%ecx, %rdi
    00000082: 	leaq	(%rdi,%rdi), %rsi
    00000086: 	addw	(%r8,%rdi,2), %ax
    0000008b: 	leal	0x1(%rcx), %edi
    0000008e: 	cmpl	%edi, %edx
    00000090: 	jle	.Ltmp466 # Offset: 144
    00000092: 	leal	0x2(%rcx), %edi
    00000095: 	addw	0x2(%r8,%rsi), %ax
    0000009b: 	cmpl	%edi, %edx
    0000009d: 	jle	.Ltmp466 # Offset: 157
    0000009f: 	leal	0x3(%rcx), %edi
    000000a2: 	addw	0x4(%r8,%rsi), %ax
    000000a8: 	cmpl	%edi, %edx
    000000aa: 	jle	.Ltmp466 # Offset: 170
    000000ac: 	leal	0x4(%rcx), %edi
    000000af: 	addw	0x6(%r8,%rsi), %ax
    000000b5: 	cmpl	%edi, %edx
    000000b7: 	jle	.Ltmp466 # Offset: 183
    000000b9: 	leal	0x5(%rcx), %edi
    000000bc: 	addw	0x8(%r8,%rsi), %ax
    000000c2: 	cmpl	%edi, %edx
    000000c4: 	jle	.Ltmp466 # Offset: 196
    000000c6: 	addl	$0x6, %ecx
    000000c9: 	addw	0xa(%r8,%rsi), %ax
    000000cf: 	cmpl	%ecx, %edx
    000000d1: 	jle	.Ltmp466 # Offset: 209
    000000d3: 	addw	0xc(%r8,%rsi), %ax
    000000d9: 	retq # Offset: 217
    000000da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp462:
    000000e0: 	xorl	%eax, %eax
.Ltmp466:
    000000e2: 	retq # Offset: 226
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp465:
    000000e8: 	retq # Offset: 232
.Ltmp463:
    000000e9: 	xorl	%ecx, %ecx
    000000eb: 	xorl	%eax, %eax
    000000ed: 	jmp	.Ltmp467 # Offset: 237
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_while_loop_optIsET_PKS0_iS0_"

Binary Function "_Z16test_do_loop_optIsET_PKS0_iS0_" after disassembly {
  Number      : 92
  State       : disassembled
  Address     : 0x72d0
  Size        : 0xec
  MaxSize     : 0xf0
  Offset      : 0x72d0
  Section     : .text
  Orc Section : .local.text._Z16test_do_loop_optIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB091:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	xorl	%eax, %eax
    00000008: 	testl	%esi, %esi
    0000000a: 	jle	.Ltmp468 # Offset: 10
    00000010: 	leal	-0x1(%rsi), %ecx
    00000013: 	cmpl	$0x6, %ecx
    00000016: 	jbe	.Ltmp469 # Offset: 22
    0000001c: 	movl	%esi, %ecx
    0000001e: 	movq	%rdi, %rax
    00000021: 	pxor	%xmm0, %xmm0
    00000025: 	shrl	$0x3, %ecx
    00000028: 	subl	$0x1, %ecx
    0000002b: 	shlq	$0x4, %rcx
    0000002f: 	leaq	0x10(%rdi,%rcx), %rcx
    00000034: 	nopl	(%rax) # Size: 4
.Ltmp470:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rcx, %rax
    00000047: 	jne	.Ltmp470 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%edx, %ecx
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x8, %ecx
    00000057: 	paddw	%xmm1, %xmm0
    0000005b: 	movdqa	%xmm0, %xmm1
    0000005f: 	psrldq	$0x4, %xmm1
    00000064: 	paddw	%xmm1, %xmm0
    00000068: 	movdqa	%xmm0, %xmm1
    0000006c: 	psrldq	$0x2, %xmm1
    00000071: 	paddw	%xmm1, %xmm0
    00000075: 	pextrw	$0x0, %xmm0, %eax
    0000007a: 	testb	$0x7, %dl
    0000007d: 	je	.Ltmp471 # Offset: 125
.Ltmp472:
    0000007f: 	movslq	%ecx, %r8
    00000082: 	leaq	(%r8,%r8), %rsi
    00000086: 	addw	(%rdi,%r8,2), %ax
    0000008b: 	leal	0x1(%rcx), %r8d
    0000008f: 	cmpl	%r8d, %edx
    00000092: 	jle	.Ltmp468 # Offset: 146
    00000094: 	leal	0x2(%rcx), %r8d
    00000098: 	addw	0x2(%rdi,%rsi), %ax
    0000009d: 	cmpl	%r8d, %edx
    000000a0: 	jle	.Ltmp468 # Offset: 160
    000000a2: 	leal	0x3(%rcx), %r8d
    000000a6: 	addw	0x4(%rdi,%rsi), %ax
    000000ab: 	cmpl	%r8d, %edx
    000000ae: 	jle	.Ltmp468 # Offset: 174
    000000b0: 	leal	0x4(%rcx), %r8d
    000000b4: 	addw	0x6(%rdi,%rsi), %ax
    000000b9: 	cmpl	%r8d, %edx
    000000bc: 	jle	.Ltmp468 # Offset: 188
    000000be: 	leal	0x5(%rcx), %r8d
    000000c2: 	addw	0x8(%rdi,%rsi), %ax
    000000c7: 	cmpl	%r8d, %edx
    000000ca: 	jle	.Ltmp468 # Offset: 202
    000000cc: 	addl	$0x6, %ecx
    000000cf: 	addw	0xa(%rdi,%rsi), %ax
    000000d4: 	cmpl	%ecx, %edx
    000000d6: 	jle	.Ltmp468 # Offset: 214
    000000d8: 	addw	0xc(%rdi,%rsi), %ax
.Ltmp468:
    000000dd: 	retq # Offset: 221
    000000de: 	nop # Size: 2
.Ltmp471:
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp469:
    000000e8: 	xorl	%ecx, %ecx
    000000ea: 	jmp	.Ltmp472 # Offset: 234
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_do_loop_optIsET_PKS0_iS0_"

Binary Function "_Z18test_goto_loop_optIsET_PKS0_iS0_" after disassembly {
  Number      : 93
  State       : disassembled
  Address     : 0x73c0
  Size        : 0xec
  MaxSize     : 0xf0
  Offset      : 0x73c0
  Section     : .text
  Orc Section : .local.text._Z18test_goto_loop_optIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB092:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	xorl	%eax, %eax
    00000008: 	testl	%esi, %esi
    0000000a: 	jle	.Ltmp473 # Offset: 10
    00000010: 	leal	-0x1(%rsi), %ecx
    00000013: 	cmpl	$0x6, %ecx
    00000016: 	jbe	.Ltmp474 # Offset: 22
    0000001c: 	movl	%esi, %ecx
    0000001e: 	movq	%rdi, %rax
    00000021: 	pxor	%xmm0, %xmm0
    00000025: 	shrl	$0x3, %ecx
    00000028: 	subl	$0x1, %ecx
    0000002b: 	shlq	$0x4, %rcx
    0000002f: 	leaq	0x10(%rdi,%rcx), %rcx
    00000034: 	nopl	(%rax) # Size: 4
.Ltmp475:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rcx, %rax
    00000047: 	jne	.Ltmp475 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%edx, %ecx
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x8, %ecx
    00000057: 	paddw	%xmm1, %xmm0
    0000005b: 	movdqa	%xmm0, %xmm1
    0000005f: 	psrldq	$0x4, %xmm1
    00000064: 	paddw	%xmm1, %xmm0
    00000068: 	movdqa	%xmm0, %xmm1
    0000006c: 	psrldq	$0x2, %xmm1
    00000071: 	paddw	%xmm1, %xmm0
    00000075: 	pextrw	$0x0, %xmm0, %eax
    0000007a: 	testb	$0x7, %dl
    0000007d: 	je	.Ltmp476 # Offset: 125
.Ltmp477:
    0000007f: 	movslq	%ecx, %r8
    00000082: 	leaq	(%r8,%r8), %rsi
    00000086: 	addw	(%rdi,%r8,2), %ax
    0000008b: 	leal	0x1(%rcx), %r8d
    0000008f: 	cmpl	%r8d, %edx
    00000092: 	jle	.Ltmp473 # Offset: 146
    00000094: 	leal	0x2(%rcx), %r8d
    00000098: 	addw	0x2(%rdi,%rsi), %ax
    0000009d: 	cmpl	%r8d, %edx
    000000a0: 	jle	.Ltmp473 # Offset: 160
    000000a2: 	leal	0x3(%rcx), %r8d
    000000a6: 	addw	0x4(%rdi,%rsi), %ax
    000000ab: 	cmpl	%r8d, %edx
    000000ae: 	jle	.Ltmp473 # Offset: 174
    000000b0: 	leal	0x4(%rcx), %r8d
    000000b4: 	addw	0x6(%rdi,%rsi), %ax
    000000b9: 	cmpl	%r8d, %edx
    000000bc: 	jle	.Ltmp473 # Offset: 188
    000000be: 	leal	0x5(%rcx), %r8d
    000000c2: 	addw	0x8(%rdi,%rsi), %ax
    000000c7: 	cmpl	%r8d, %edx
    000000ca: 	jle	.Ltmp473 # Offset: 202
    000000cc: 	addl	$0x6, %ecx
    000000cf: 	addw	0xa(%rdi,%rsi), %ax
    000000d4: 	cmpl	%ecx, %edx
    000000d6: 	jle	.Ltmp473 # Offset: 214
    000000d8: 	addw	0xc(%rdi,%rsi), %ax
.Ltmp473:
    000000dd: 	retq # Offset: 221
    000000de: 	nop # Size: 2
.Ltmp476:
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp474:
    000000e8: 	xorl	%ecx, %ecx
    000000ea: 	jmp	.Ltmp477 # Offset: 234
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_goto_loop_optIsET_PKS0_iS0_"

Binary Function "_Z19test_for_loop_paramIsET_PKS0_iS0_" after disassembly {
  Number      : 94
  State       : disassembled
  Address     : 0x74b0
  Size        : 0x399
  MaxSize     : 0x3a0
  Offset      : 0x74b0
  Section     : .text
  Orc Section : .local.text._Z19test_for_loop_paramIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB093:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp478 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	testw	%dx, %dx
    00000014: 	js	.Ltmp479 # Offset: 20
    0000001a: 	cmpl	$0x6, %eax
    0000001d: 	jbe	.Ltmp480 # Offset: 29
    00000023: 	movl	%esi, %edx
    00000025: 	movq	%rdi, %rax
    00000028: 	pxor	%xmm0, %xmm0
    0000002c: 	shrl	$0x3, %edx
    0000002f: 	subl	$0x1, %edx
    00000032: 	shlq	$0x4, %rdx
    00000036: 	leaq	0x10(%rdi,%rdx), %rdx
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp481:
    00000040: 	movdqu	(%rax), %xmm7
    00000044: 	addq	$0x10, %rax
    00000048: 	paddw	%xmm7, %xmm0
    0000004c: 	cmpq	%rdx, %rax
    0000004f: 	jne	.Ltmp481 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%ecx, %edx
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x8, %edx
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x4, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	movdqa	%xmm0, %xmm1
    00000074: 	psrldq	$0x2, %xmm1
    00000079: 	paddw	%xmm1, %xmm0
    0000007d: 	pextrw	$0x0, %xmm0, %eax
    00000082: 	testb	$0x7, %cl
    00000085: 	je	.Ltmp482 # Offset: 133
.Ltmp487:
    0000008b: 	movslq	%edx, %r8
    0000008e: 	leaq	(%r8,%r8), %rsi
    00000092: 	addw	(%rdi,%r8,2), %ax
    00000097: 	leal	0x1(%rdx), %r8d
    0000009b: 	cmpl	%ecx, %r8d
    0000009e: 	jge	.Ltmp483 # Offset: 158
    000000a0: 	leal	0x2(%rdx), %r8d
    000000a4: 	addw	0x2(%rdi,%rsi), %ax
    000000a9: 	cmpl	%r8d, %ecx
    000000ac: 	jle	.Ltmp483 # Offset: 172
    000000ae: 	leal	0x3(%rdx), %r8d
    000000b2: 	addw	0x4(%rdi,%rsi), %ax
    000000b7: 	cmpl	%ecx, %r8d
    000000ba: 	jge	.Ltmp483 # Offset: 186
    000000bc: 	leal	0x4(%rdx), %r8d
    000000c0: 	addw	0x6(%rdi,%rsi), %ax
    000000c5: 	cmpl	%r8d, %ecx
    000000c8: 	jle	.Ltmp483 # Offset: 200
    000000ca: 	leal	0x5(%rdx), %r8d
    000000ce: 	addw	0x8(%rdi,%rsi), %ax
    000000d3: 	cmpl	%r8d, %ecx
    000000d6: 	jle	.Ltmp483 # Offset: 214
    000000d8: 	addl	$0x6, %edx
    000000db: 	addw	0xa(%rdi,%rsi), %ax
    000000e0: 	cmpl	%edx, %ecx
    000000e2: 	jle	.Ltmp483 # Offset: 226
    000000e4: 	addw	0xc(%rdi,%rsi), %ax
    000000e9: 	retq # Offset: 233
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp478:
    000000f0: 	xorl	%eax, %eax
.Ltmp483:
    000000f2: 	retq # Offset: 242
    000000f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp479:
    000000f8: 	cmpl	$0x6, %eax
    000000fb: 	jbe	.Ltmp484 # Offset: 251
    00000101: 	movl	%esi, %edx
    00000103: 	movdqa	DATAat0x38880(%rip), %xmm6
    0000010b: 	movq	%rdi, %rax
    0000010e: 	pxor	%xmm3, %xmm3
    00000112: 	shrl	$0x3, %edx
    00000115: 	movdqa	DATAat0x38890(%rip), %xmm5
    0000011d: 	subl	$0x1, %edx
    00000120: 	shlq	$0x4, %rdx
    00000124: 	leaq	0x10(%rdi,%rdx), %rdx
    00000129: 	nopl	(%rax) # Size: 7
.Ltmp485:
    00000130: 	movdqu	(%rax), %xmm1
    00000134: 	addq	$0x10, %rax
    00000138: 	movdqa	%xmm1, %xmm0
    0000013c: 	movdqa	%xmm1, %xmm2
    00000140: 	movdqa	%xmm1, %xmm4
    00000144: 	pmulhw	%xmm6, %xmm0
    00000148: 	pmulhw	%xmm5, %xmm2
    0000014c: 	paddw	%xmm1, %xmm3
    00000150: 	psraw	$0xf, %xmm4
    00000155: 	paddw	%xmm1, %xmm0
    00000159: 	psraw	$0x1, %xmm2
    0000015e: 	psraw	$0x6, %xmm0
    00000163: 	psubw	%xmm4, %xmm2
    00000167: 	psubw	%xmm4, %xmm0
    0000016b: 	paddw	%xmm2, %xmm0
    0000016f: 	paddw	%xmm0, %xmm3
    00000173: 	cmpq	%rdx, %rax
    00000176: 	jne	.Ltmp485 # Offset: 374
    00000178: 	movdqa	%xmm3, %xmm0
    0000017c: 	movl	%ecx, %r8d
    0000017f: 	psrldq	$0x8, %xmm0
    00000184: 	andl	$-0x8, %r8d
    00000188: 	paddw	%xmm0, %xmm3
    0000018c: 	movdqa	%xmm3, %xmm0
    00000190: 	psrldq	$0x4, %xmm0
    00000195: 	paddw	%xmm0, %xmm3
    00000199: 	movdqa	%xmm3, %xmm0
    0000019d: 	psrldq	$0x2, %xmm0
    000001a2: 	paddw	%xmm0, %xmm3
    000001a6: 	pextrw	$0x0, %xmm3, %eax
    000001ab: 	testb	$0x7, %cl
    000001ae: 	je	.Ltmp486 # Offset: 430
.Ltmp488:
    000001b4: 	movslq	%r8d, %rdx
    000001b7: 	movswl	(%rdi,%rdx,2), %esi
    000001bb: 	leaq	(%rdx,%rdx), %r10
    000001bf: 	imull	$0xffff8889, %esi, %edx
    000001c5: 	movl	%esi, %r9d
    000001c8: 	movl	%esi, %r11d
    000001cb: 	sarw	$0xf, %r11w
    000001d0: 	addl	%eax, %r9d
    000001d3: 	shrl	$0x10, %edx
    000001d6: 	addl	%esi, %edx
    000001d8: 	imull	$0x6667, %esi, %esi
    000001de: 	sarw	$0x6, %dx
    000001e2: 	subl	%r11d, %edx
    000001e5: 	sarl	$0x11, %esi
    000001e8: 	movswl	%dx, %edx
    000001eb: 	subl	%r11d, %esi
    000001ee: 	movswl	%si, %esi
    000001f1: 	addl	%esi, %edx
    000001f3: 	leal	(%r9,%rdx), %eax
    000001f7: 	leal	0x1(%r8), %edx
    000001fb: 	cmpl	%edx, %ecx
    000001fd: 	jle	.Ltmp483 # Offset: 509
    00000203: 	movswl	0x2(%rdi,%r10), %esi
    00000209: 	imull	$0xffff8889, %esi, %edx
    0000020f: 	movl	%esi, %r9d
    00000212: 	movl	%esi, %r11d
    00000215: 	sarw	$0xf, %r11w
    0000021a: 	shrl	$0x10, %edx
    0000021d: 	addl	%esi, %edx
    0000021f: 	imull	$0x6667, %esi, %esi
    00000225: 	sarw	$0x6, %dx
    00000229: 	subl	%r11d, %edx
    0000022c: 	sarl	$0x11, %esi
    0000022f: 	addl	%eax, %edx
    00000231: 	subl	%r11d, %esi
    00000234: 	addl	%edx, %esi
    00000236: 	leal	0x2(%r8), %edx
    0000023a: 	leal	(%rsi,%r9), %eax
    0000023e: 	cmpl	%edx, %ecx
    00000240: 	jle	.Ltmp483 # Offset: 576
    00000246: 	movswl	0x4(%rdi,%r10), %edx
    0000024c: 	imull	$0xffff8889, %edx, %esi
    00000252: 	movl	%edx, %r9d
    00000255: 	movl	%edx, %r11d
    00000258: 	sarw	$0xf, %r11w
    0000025d: 	shrl	$0x10, %esi
    00000260: 	addl	%edx, %esi
    00000262: 	imull	$0x6667, %edx, %edx
    00000268: 	sarw	$0x6, %si
    0000026c: 	subl	%r11d, %esi
    0000026f: 	sarl	$0x11, %edx
    00000272: 	addl	%esi, %r9d
    00000275: 	subl	%r11d, %edx
    00000278: 	addl	%r9d, %edx
    0000027b: 	addl	%edx, %eax
    0000027d: 	leal	0x3(%r8), %edx
    00000281: 	cmpl	%edx, %ecx
    00000283: 	jle	.Ltmp483 # Offset: 643
    00000289: 	movswl	0x6(%rdi,%r10), %edx
    0000028f: 	imull	$0xffff8889, %edx, %esi
    00000295: 	movl	%edx, %r9d
    00000298: 	movl	%edx, %r11d
    0000029b: 	sarw	$0xf, %r11w
    000002a0: 	shrl	$0x10, %esi
    000002a3: 	addl	%edx, %esi
    000002a5: 	imull	$0x6667, %edx, %edx
    000002ab: 	sarw	$0x6, %si
    000002af: 	subl	%r11d, %esi
    000002b2: 	sarl	$0x11, %edx
    000002b5: 	addl	%esi, %r9d
    000002b8: 	subl	%r11d, %edx
    000002bb: 	addl	%r9d, %edx
    000002be: 	addl	%edx, %eax
    000002c0: 	leal	0x4(%r8), %edx
    000002c4: 	cmpl	%edx, %ecx
    000002c6: 	jle	.Ltmp483 # Offset: 710
    000002cc: 	movswl	0x8(%rdi,%r10), %edx
    000002d2: 	imull	$0xffff8889, %edx, %esi
    000002d8: 	movl	%edx, %r9d
    000002db: 	movl	%edx, %r11d
    000002de: 	sarw	$0xf, %r11w
    000002e3: 	shrl	$0x10, %esi
    000002e6: 	addl	%edx, %esi
    000002e8: 	imull	$0x6667, %edx, %edx
    000002ee: 	sarw	$0x6, %si
    000002f2: 	subl	%r11d, %esi
    000002f5: 	sarl	$0x11, %edx
    000002f8: 	addl	%esi, %r9d
    000002fb: 	subl	%r11d, %edx
    000002fe: 	addl	%r9d, %edx
    00000301: 	addl	%edx, %eax
    00000303: 	leal	0x5(%r8), %edx
    00000307: 	cmpl	%edx, %ecx
    00000309: 	jle	.Ltmp483 # Offset: 777
    0000030f: 	movswl	0xa(%rdi,%r10), %edx
    00000315: 	addl	$0x6, %r8d
    00000319: 	imull	$0xffff8889, %edx, %esi
    0000031f: 	movl	%edx, %r9d
    00000322: 	movl	%edx, %r11d
    00000325: 	sarw	$0xf, %r11w
    0000032a: 	shrl	$0x10, %esi
    0000032d: 	addl	%edx, %esi
    0000032f: 	imull	$0x6667, %edx, %edx
    00000335: 	sarw	$0x6, %si
    00000339: 	subl	%r11d, %esi
    0000033c: 	sarl	$0x11, %edx
    0000033f: 	addl	%esi, %r9d
    00000342: 	subl	%r11d, %edx
    00000345: 	addl	%r9d, %edx
    00000348: 	addl	%edx, %eax
    0000034a: 	cmpl	%r8d, %ecx
    0000034d: 	jle	.Ltmp483 # Offset: 845
    00000353: 	movswl	0xc(%rdi,%r10), %edx
    00000359: 	imull	$0xffff8889, %edx, %ecx
    0000035f: 	movl	%edx, %esi
    00000361: 	movl	%edx, %edi
    00000363: 	sarw	$0xf, %di
    00000367: 	shrl	$0x10, %ecx
    0000036a: 	addl	%edx, %ecx
    0000036c: 	imull	$0x6667, %edx, %edx
    00000372: 	sarw	$0x6, %cx
    00000376: 	subl	%edi, %ecx
    00000378: 	sarl	$0x11, %edx
    0000037b: 	addl	%ecx, %esi
    0000037d: 	subl	%edi, %edx
    0000037f: 	addl	%esi, %edx
    00000381: 	addl	%edx, %eax
    00000383: 	retq # Offset: 899
.Ltmp480:
    00000384: 	xorl	%edx, %edx
    00000386: 	xorl	%eax, %eax
    00000388: 	jmp	.Ltmp487 # Offset: 904
.Ltmp482:
    0000038d: 	retq # Offset: 909
.Ltmp486:
    0000038e: 	retq # Offset: 910
.Ltmp484:
    0000038f: 	xorl	%r8d, %r8d
    00000392: 	xorl	%eax, %eax
    00000394: 	jmp	.Ltmp488 # Offset: 916
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_for_loop_paramIsET_PKS0_iS0_"

Binary Function "_Z20test_for_loop_param2IsET_PKS0_iS0_" after disassembly {
  Number      : 95
  State       : disassembled
  Address     : 0x7850
  Size        : 0x2d3
  MaxSize     : 0x2e0
  Offset      : 0x7850
  Section     : .text
  Orc Section : .local.text._Z20test_for_loop_param2IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB094:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp489 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	testw	%dx, %dx
    00000014: 	js	.Ltmp490 # Offset: 20
    0000001a: 	cmpl	$0x6, %eax
    0000001d: 	jbe	.Ltmp491 # Offset: 29
    00000023: 	movl	%esi, %edx
    00000025: 	movq	%rdi, %rax
    00000028: 	pxor	%xmm0, %xmm0
    0000002c: 	shrl	$0x3, %edx
    0000002f: 	subl	$0x1, %edx
    00000032: 	shlq	$0x4, %rdx
    00000036: 	leaq	0x10(%rdi,%rdx), %rdx
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp492:
    00000040: 	movdqu	(%rax), %xmm5
    00000044: 	addq	$0x10, %rax
    00000048: 	paddw	%xmm5, %xmm0
    0000004c: 	cmpq	%rdx, %rax
    0000004f: 	jne	.Ltmp492 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%ecx, %edx
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x8, %edx
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x4, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	movdqa	%xmm0, %xmm1
    00000074: 	psrldq	$0x2, %xmm1
    00000079: 	paddw	%xmm1, %xmm0
    0000007d: 	pextrw	$0x0, %xmm0, %eax
    00000082: 	testb	$0x7, %cl
    00000085: 	je	.Ltmp493 # Offset: 133
.Ltmp498:
    0000008b: 	movslq	%edx, %r8
    0000008e: 	leaq	(%r8,%r8), %rsi
    00000092: 	addw	(%rdi,%r8,2), %ax
    00000097: 	leal	0x1(%rdx), %r8d
    0000009b: 	cmpl	%ecx, %r8d
    0000009e: 	jge	.Ltmp494 # Offset: 158
    000000a0: 	leal	0x2(%rdx), %r8d
    000000a4: 	addw	0x2(%rdi,%rsi), %ax
    000000a9: 	cmpl	%r8d, %ecx
    000000ac: 	jle	.Ltmp494 # Offset: 172
    000000ae: 	leal	0x3(%rdx), %r8d
    000000b2: 	addw	0x4(%rdi,%rsi), %ax
    000000b7: 	cmpl	%r8d, %ecx
    000000ba: 	jle	.Ltmp494 # Offset: 186
    000000bc: 	leal	0x4(%rdx), %r8d
    000000c0: 	addw	0x6(%rdi,%rsi), %ax
    000000c5: 	cmpl	%r8d, %ecx
    000000c8: 	jle	.Ltmp494 # Offset: 200
    000000ca: 	leal	0x5(%rdx), %r8d
    000000ce: 	addw	0x8(%rdi,%rsi), %ax
    000000d3: 	cmpl	%r8d, %ecx
    000000d6: 	jle	.Ltmp494 # Offset: 214
    000000d8: 	addl	$0x6, %edx
    000000db: 	addw	0xa(%rdi,%rsi), %ax
    000000e0: 	cmpl	%edx, %ecx
    000000e2: 	jle	.Ltmp494 # Offset: 226
    000000e4: 	addw	0xc(%rdi,%rsi), %ax
    000000e9: 	retq # Offset: 233
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp489:
    000000f0: 	xorl	%eax, %eax
.Ltmp494:
    000000f2: 	retq # Offset: 242
    000000f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp490:
    000000f8: 	cmpl	$0x6, %eax
    000000fb: 	jbe	.Ltmp495 # Offset: 251
    00000101: 	movl	%esi, %edx
    00000103: 	movdqa	DATAat0x38890(%rip), %xmm4
    0000010b: 	movq	%rdi, %rax
    0000010e: 	pxor	%xmm1, %xmm1
    00000112: 	shrl	$0x3, %edx
    00000115: 	subl	$0x1, %edx
    00000118: 	shlq	$0x4, %rdx
    0000011c: 	leaq	0x10(%rdi,%rdx), %rdx
    00000121: 	nopl	(%rax) # Size: 7
.Ltmp496:
    00000128: 	movdqu	(%rax), %xmm2
    0000012c: 	addq	$0x10, %rax
    00000130: 	movdqa	%xmm2, %xmm0
    00000134: 	movdqa	%xmm2, %xmm3
    00000138: 	paddw	%xmm2, %xmm1
    0000013c: 	pmulhw	%xmm4, %xmm0
    00000140: 	psraw	$0xf, %xmm3
    00000145: 	psraw	$0x1, %xmm0
    0000014a: 	psubw	%xmm3, %xmm0
    0000014e: 	paddw	%xmm0, %xmm1
    00000152: 	cmpq	%rax, %rdx
    00000155: 	jne	.Ltmp496 # Offset: 341
    00000157: 	movdqa	%xmm1, %xmm0
    0000015b: 	movl	%ecx, %esi
    0000015d: 	psrldq	$0x8, %xmm0
    00000162: 	andl	$-0x8, %esi
    00000165: 	paddw	%xmm0, %xmm1
    00000169: 	movdqa	%xmm1, %xmm0
    0000016d: 	psrldq	$0x4, %xmm0
    00000172: 	paddw	%xmm0, %xmm1
    00000176: 	movdqa	%xmm1, %xmm0
    0000017a: 	psrldq	$0x2, %xmm0
    0000017f: 	paddw	%xmm0, %xmm1
    00000183: 	pextrw	$0x0, %xmm1, %eax
    00000188: 	testb	$0x7, %cl
    0000018b: 	je	.Ltmp497 # Offset: 395
.Ltmp499:
    00000191: 	movslq	%esi, %rdx
    00000194: 	leaq	(%rdx,%rdx), %r8
    00000198: 	movswl	(%rdi,%rdx,2), %edx
    0000019c: 	movl	%edx, %r9d
    0000019f: 	addl	%edx, %eax
    000001a1: 	imull	$0x6667, %edx, %edx
    000001a7: 	sarw	$0xf, %r9w
    000001ac: 	sarl	$0x11, %edx
    000001af: 	subl	%r9d, %edx
    000001b2: 	addl	%edx, %eax
    000001b4: 	leal	0x1(%rsi), %edx
    000001b7: 	cmpl	%edx, %ecx
    000001b9: 	jle	.Ltmp494 # Offset: 441
    000001bf: 	movswl	0x2(%rdi,%r8), %edx
    000001c5: 	movl	%edx, %r9d
    000001c8: 	imull	$0x6667, %edx, %edx
    000001ce: 	movl	%r9d, %r10d
    000001d1: 	sarw	$0xf, %r10w
    000001d6: 	sarl	$0x11, %edx
    000001d9: 	subl	%r10d, %edx
    000001dc: 	addl	%eax, %edx
    000001de: 	leal	(%rdx,%r9), %eax
    000001e2: 	leal	0x2(%rsi), %edx
    000001e5: 	cmpl	%edx, %ecx
    000001e7: 	jle	.Ltmp494 # Offset: 487
    000001ed: 	movswl	0x4(%rdi,%r8), %edx
    000001f3: 	movl	%edx, %r9d
    000001f6: 	imull	$0x6667, %edx, %edx
    000001fc: 	movl	%r9d, %r10d
    000001ff: 	sarw	$0xf, %r10w
    00000204: 	sarl	$0x11, %edx
    00000207: 	subl	%r10d, %edx
    0000020a: 	addl	%r9d, %edx
    0000020d: 	addl	%edx, %eax
    0000020f: 	leal	0x3(%rsi), %edx
    00000212: 	cmpl	%edx, %ecx
    00000214: 	jle	.Ltmp494 # Offset: 532
    0000021a: 	movswl	0x6(%rdi,%r8), %edx
    00000220: 	movl	%edx, %r9d
    00000223: 	imull	$0x6667, %edx, %edx
    00000229: 	movl	%r9d, %r10d
    0000022c: 	sarw	$0xf, %r10w
    00000231: 	sarl	$0x11, %edx
    00000234: 	subl	%r10d, %edx
    00000237: 	addl	%r9d, %edx
    0000023a: 	addl	%edx, %eax
    0000023c: 	leal	0x4(%rsi), %edx
    0000023f: 	cmpl	%edx, %ecx
    00000241: 	jle	.Ltmp494 # Offset: 577
    00000247: 	movswl	0x8(%rdi,%r8), %edx
    0000024d: 	movl	%edx, %r9d
    00000250: 	imull	$0x6667, %edx, %edx
    00000256: 	movl	%r9d, %r10d
    00000259: 	sarw	$0xf, %r10w
    0000025e: 	sarl	$0x11, %edx
    00000261: 	subl	%r10d, %edx
    00000264: 	addl	%r9d, %edx
    00000267: 	addl	%edx, %eax
    00000269: 	leal	0x5(%rsi), %edx
    0000026c: 	cmpl	%edx, %ecx
    0000026e: 	jle	.Ltmp494 # Offset: 622
    00000274: 	movswl	0xa(%rdi,%r8), %edx
    0000027a: 	addl	$0x6, %esi
    0000027d: 	movl	%edx, %r9d
    00000280: 	imull	$0x6667, %edx, %edx
    00000286: 	movl	%r9d, %r10d
    00000289: 	sarw	$0xf, %r10w
    0000028e: 	sarl	$0x11, %edx
    00000291: 	subl	%r10d, %edx
    00000294: 	addl	%r9d, %edx
    00000297: 	addl	%edx, %eax
    00000299: 	cmpl	%esi, %ecx
    0000029b: 	jle	.Ltmp494 # Offset: 667
    000002a1: 	movswl	0xc(%rdi,%r8), %edx
    000002a7: 	movl	%edx, %ecx
    000002a9: 	imull	$0x6667, %edx, %edx
    000002af: 	movl	%ecx, %esi
    000002b1: 	sarw	$0xf, %si
    000002b5: 	sarl	$0x11, %edx
    000002b8: 	subl	%esi, %edx
    000002ba: 	addl	%ecx, %edx
    000002bc: 	addl	%edx, %eax
    000002be: 	retq # Offset: 702
.Ltmp491:
    000002bf: 	xorl	%edx, %edx
    000002c1: 	xorl	%eax, %eax
    000002c3: 	jmp	.Ltmp498 # Offset: 707
.Ltmp493:
    000002c8: 	retq # Offset: 712
.Ltmp497:
    000002c9: 	retq # Offset: 713
.Ltmp495:
    000002ca: 	xorl	%esi, %esi
    000002cc: 	xorl	%eax, %eax
    000002ce: 	jmp	.Ltmp499 # Offset: 718
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_for_loop_param2IsET_PKS0_iS0_"

Binary Function "_Z20test_for_loop_param3IsET_PKS0_iS0_" after disassembly {
  Number      : 96
  State       : disassembled
  Address     : 0x7b30
  Size        : 0x2d7
  MaxSize     : 0x2e0
  Offset      : 0x7b30
  Section     : .text
  Orc Section : .local.text._Z20test_for_loop_param3IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB095:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	testw	%dx, %dx
    00000009: 	js	.Ltmp500 # Offset: 9
    0000000f: 	xorl	%r8d, %r8d
    00000012: 	testl	%esi, %esi
    00000014: 	jle	.Ltmp501 # Offset: 20
.Ltmp508:
    0000001a: 	testl	%ecx, %ecx
    0000001c: 	movl	$0x1, %esi
    00000021: 	cmovgl	%ecx, %esi
    00000024: 	cmpl	$0x7, %ecx
    00000027: 	jle	.Ltmp502 # Offset: 39
    0000002d: 	leaq	0x10(%rdi), %r9
.Ltmp510:
    00000031: 	movl	%esi, %edx
    00000033: 	movq	%rdi, %rax
    00000036: 	pxor	%xmm0, %xmm0
    0000003a: 	shrl	$0x3, %edx
    0000003d: 	subl	$0x1, %edx
    00000040: 	shlq	$0x4, %rdx
    00000044: 	addq	%r9, %rdx
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp503:
    00000050: 	movdqu	(%rax), %xmm4
    00000054: 	addq	$0x10, %rax
    00000058: 	paddw	%xmm4, %xmm0
    0000005c: 	cmpq	%rdx, %rax
    0000005f: 	jne	.Ltmp503 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	psrldq	$0x8, %xmm1
    0000006a: 	paddw	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x4, %xmm1
    00000077: 	paddw	%xmm1, %xmm0
    0000007b: 	movdqa	%xmm0, %xmm1
    0000007f: 	psrldq	$0x2, %xmm1
    00000084: 	paddw	%xmm1, %xmm0
    00000088: 	pextrw	$0x0, %xmm0, %eax
    0000008d: 	addl	%eax, %r8d
    00000090: 	movl	%esi, %eax
    00000092: 	andl	$-0x8, %eax
    00000095: 	andl	$0x7, %esi
    00000098: 	je	.Ltmp501 # Offset: 152
.Ltmp509:
    0000009a: 	movslq	%eax, %rsi
    0000009d: 	leaq	(%rsi,%rsi), %rdx
    000000a1: 	addw	(%rdi,%rsi,2), %r8w
    000000a6: 	leal	0x1(%rax), %esi
    000000a9: 	cmpl	%esi, %ecx
    000000ab: 	jle	.Ltmp501 # Offset: 171
    000000ad: 	leal	0x2(%rax), %esi
    000000b0: 	addw	0x2(%rdi,%rdx), %r8w
    000000b6: 	cmpl	%ecx, %esi
    000000b8: 	jge	.Ltmp501 # Offset: 184
    000000ba: 	leal	0x3(%rax), %esi
    000000bd: 	addw	0x4(%rdi,%rdx), %r8w
    000000c3: 	cmpl	%esi, %ecx
    000000c5: 	jle	.Ltmp501 # Offset: 197
    000000c7: 	leal	0x4(%rax), %esi
    000000ca: 	addw	0x6(%rdi,%rdx), %r8w
    000000d0: 	cmpl	%esi, %ecx
    000000d2: 	jle	.Ltmp501 # Offset: 210
    000000d4: 	leal	0x5(%rax), %esi
    000000d7: 	addw	0x8(%rdi,%rdx), %r8w
    000000dd: 	cmpl	%esi, %ecx
    000000df: 	jle	.Ltmp501 # Offset: 223
    000000e1: 	addl	$0x6, %eax
    000000e4: 	addw	0xa(%rdi,%rdx), %r8w
    000000ea: 	cmpl	%eax, %ecx
    000000ec: 	jle	.Ltmp501 # Offset: 236
    000000ee: 	addw	0xc(%rdi,%rdx), %r8w
.Ltmp501:
    000000f4: 	movl	%r8d, %eax
    000000f7: 	retq # Offset: 247
    000000f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp500:
    00000100: 	testl	%esi, %esi
    00000102: 	jle	.Ltmp504 # Offset: 258
    00000108: 	leal	-0x1(%rsi), %eax
    0000010b: 	cmpl	$0x6, %eax
    0000010e: 	jbe	.Ltmp505 # Offset: 270
    00000114: 	movl	%esi, %edx
    00000116: 	leaq	0x10(%rdi), %r9
    0000011a: 	pxor	%xmm2, %xmm2
    0000011e: 	movq	%rdi, %rax
    00000121: 	shrl	$0x3, %edx
    00000124: 	movdqa	DATAat0x38890(%rip), %xmm3
    0000012c: 	subl	$0x1, %edx
    0000012f: 	shlq	$0x4, %rdx
    00000133: 	addq	%r9, %rdx
    00000136: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp506:
    00000140: 	movdqu	(%rax), %xmm0
    00000144: 	movdqu	(%rax), %xmm1
    00000148: 	addq	$0x10, %rax
    0000014c: 	pmulhw	%xmm3, %xmm0
    00000150: 	psraw	$0xf, %xmm1
    00000155: 	psraw	$0x1, %xmm0
    0000015a: 	psubw	%xmm1, %xmm0
    0000015e: 	paddw	%xmm0, %xmm2
    00000162: 	cmpq	%rax, %rdx
    00000165: 	jne	.Ltmp506 # Offset: 357
    00000167: 	movdqa	%xmm2, %xmm0
    0000016b: 	movl	%ecx, %eax
    0000016d: 	psrldq	$0x8, %xmm0
    00000172: 	andl	$-0x8, %eax
    00000175: 	paddw	%xmm0, %xmm2
    00000179: 	movdqa	%xmm2, %xmm0
    0000017d: 	psrldq	$0x4, %xmm0
    00000182: 	paddw	%xmm0, %xmm2
    00000186: 	movdqa	%xmm2, %xmm0
    0000018a: 	psrldq	$0x2, %xmm0
    0000018f: 	paddw	%xmm0, %xmm2
    00000193: 	pextrw	$0x0, %xmm2, %r8d
    00000199: 	cmpl	%eax, %ecx
    0000019b: 	je	.Ltmp507 # Offset: 411
.Ltmp511:
    000001a1: 	movslq	%eax, %rdx
    000001a4: 	leaq	(%rdx,%rdx), %rsi
    000001a8: 	movswl	(%rdi,%rdx,2), %edx
    000001ac: 	movl	%edx, %r9d
    000001af: 	imull	$0x6667, %edx, %edx
    000001b5: 	sarw	$0xf, %r9w
    000001ba: 	sarl	$0x11, %edx
    000001bd: 	subl	%r9d, %edx
    000001c0: 	addl	%edx, %r8d
    000001c3: 	leal	0x1(%rax), %edx
    000001c6: 	cmpl	%edx, %ecx
    000001c8: 	jle	.Ltmp508 # Offset: 456
    000001ce: 	movswl	0x2(%rdi,%rsi), %edx
    000001d3: 	movl	%edx, %r9d
    000001d6: 	imull	$0x6667, %edx, %edx
    000001dc: 	sarw	$0xf, %r9w
    000001e1: 	sarl	$0x11, %edx
    000001e4: 	subl	%r9d, %edx
    000001e7: 	addl	%edx, %r8d
    000001ea: 	leal	0x2(%rax), %edx
    000001ed: 	cmpl	%edx, %ecx
    000001ef: 	jle	.Ltmp508 # Offset: 495
    000001f5: 	movswl	0x4(%rdi,%rsi), %edx
    000001fa: 	movl	%edx, %r9d
    000001fd: 	imull	$0x6667, %edx, %edx
    00000203: 	sarw	$0xf, %r9w
    00000208: 	sarl	$0x11, %edx
    0000020b: 	subl	%r9d, %edx
    0000020e: 	addl	%edx, %r8d
    00000211: 	leal	0x3(%rax), %edx
    00000214: 	cmpl	%edx, %ecx
    00000216: 	jle	.Ltmp508 # Offset: 534
    0000021c: 	movswl	0x6(%rdi,%rsi), %edx
    00000221: 	movl	%edx, %r9d
    00000224: 	imull	$0x6667, %edx, %edx
    0000022a: 	sarw	$0xf, %r9w
    0000022f: 	sarl	$0x11, %edx
    00000232: 	subl	%r9d, %edx
    00000235: 	addl	%edx, %r8d
    00000238: 	leal	0x4(%rax), %edx
    0000023b: 	cmpl	%edx, %ecx
    0000023d: 	jle	.Ltmp508 # Offset: 573
    00000243: 	movswl	0x8(%rdi,%rsi), %edx
    00000248: 	movl	%edx, %r9d
    0000024b: 	imull	$0x6667, %edx, %edx
    00000251: 	sarw	$0xf, %r9w
    00000256: 	sarl	$0x11, %edx
    00000259: 	subl	%r9d, %edx
    0000025c: 	addl	%edx, %r8d
    0000025f: 	leal	0x5(%rax), %edx
    00000262: 	cmpl	%edx, %ecx
    00000264: 	jle	.Ltmp508 # Offset: 612
    0000026a: 	movswl	0xa(%rdi,%rsi), %edx
    0000026f: 	addl	$0x6, %eax
    00000272: 	movl	%edx, %r9d
    00000275: 	imull	$0x6667, %edx, %edx
    0000027b: 	sarw	$0xf, %r9w
    00000280: 	sarl	$0x11, %edx
    00000283: 	subl	%r9d, %edx
    00000286: 	addl	%edx, %r8d
    00000289: 	cmpl	%eax, %ecx
    0000028b: 	jle	.Ltmp508 # Offset: 651
    00000291: 	movswl	0xc(%rdi,%rsi), %eax
    00000296: 	movl	%eax, %edx
    00000298: 	imull	$0x6667, %eax, %eax
    0000029e: 	sarw	$0xf, %dx
    000002a2: 	sarl	$0x11, %eax
    000002a5: 	subl	%edx, %eax
    000002a7: 	addl	%eax, %r8d
    000002aa: 	jmp	.Ltmp508 # Offset: 682
.Ltmp502:
    000002af: 	xorl	%eax, %eax
    000002b1: 	jmp	.Ltmp509 # Offset: 689
.Ltmp504:
    000002b6: 	xorl	%r8d, %r8d
    000002b9: 	jmp	.Ltmp501 # Offset: 697
.Ltmp507:
    000002be: 	testl	%ecx, %ecx
    000002c0: 	movl	$0x1, %esi
    000002c5: 	cmovgl	%ecx, %esi
    000002c8: 	jmp	.Ltmp510 # Offset: 712
.Ltmp505:
    000002cd: 	xorl	%eax, %eax
    000002cf: 	xorl	%r8d, %r8d
    000002d2: 	jmp	.Ltmp511 # Offset: 722
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_for_loop_param3IsET_PKS0_iS0_"

Binary Function "_Z21test_while_loop_paramIsET_PKS0_iS0_" after disassembly {
  Number      : 97
  State       : disassembled
  Address     : 0x7e10
  Size        : 0x399
  MaxSize     : 0x3a0
  Offset      : 0x7e10
  Section     : .text
  Orc Section : .local.text._Z21test_while_loop_paramIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB096:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp512 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	testw	%dx, %dx
    00000014: 	js	.Ltmp513 # Offset: 20
    0000001a: 	cmpl	$0x6, %eax
    0000001d: 	jbe	.Ltmp514 # Offset: 29
    00000023: 	movl	%esi, %edx
    00000025: 	movq	%rdi, %rax
    00000028: 	pxor	%xmm0, %xmm0
    0000002c: 	shrl	$0x3, %edx
    0000002f: 	subl	$0x1, %edx
    00000032: 	shlq	$0x4, %rdx
    00000036: 	leaq	0x10(%rdi,%rdx), %rdx
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp515:
    00000040: 	movdqu	(%rax), %xmm7
    00000044: 	addq	$0x10, %rax
    00000048: 	paddw	%xmm7, %xmm0
    0000004c: 	cmpq	%rdx, %rax
    0000004f: 	jne	.Ltmp515 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%ecx, %edx
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x8, %edx
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x4, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	movdqa	%xmm0, %xmm1
    00000074: 	psrldq	$0x2, %xmm1
    00000079: 	paddw	%xmm1, %xmm0
    0000007d: 	pextrw	$0x0, %xmm0, %eax
    00000082: 	testb	$0x7, %cl
    00000085: 	je	.Ltmp516 # Offset: 133
.Ltmp521:
    0000008b: 	movslq	%edx, %r8
    0000008e: 	leaq	(%r8,%r8), %rsi
    00000092: 	addw	(%rdi,%r8,2), %ax
    00000097: 	leal	0x1(%rdx), %r8d
    0000009b: 	cmpl	%ecx, %r8d
    0000009e: 	jge	.Ltmp517 # Offset: 158
    000000a0: 	leal	0x2(%rdx), %r8d
    000000a4: 	addw	0x2(%rdi,%rsi), %ax
    000000a9: 	cmpl	%r8d, %ecx
    000000ac: 	jle	.Ltmp517 # Offset: 172
    000000ae: 	leal	0x3(%rdx), %r8d
    000000b2: 	addw	0x4(%rdi,%rsi), %ax
    000000b7: 	cmpl	%ecx, %r8d
    000000ba: 	jge	.Ltmp517 # Offset: 186
    000000bc: 	leal	0x4(%rdx), %r8d
    000000c0: 	addw	0x6(%rdi,%rsi), %ax
    000000c5: 	cmpl	%r8d, %ecx
    000000c8: 	jle	.Ltmp517 # Offset: 200
    000000ca: 	leal	0x5(%rdx), %r8d
    000000ce: 	addw	0x8(%rdi,%rsi), %ax
    000000d3: 	cmpl	%r8d, %ecx
    000000d6: 	jle	.Ltmp517 # Offset: 214
    000000d8: 	addl	$0x6, %edx
    000000db: 	addw	0xa(%rdi,%rsi), %ax
    000000e0: 	cmpl	%edx, %ecx
    000000e2: 	jle	.Ltmp517 # Offset: 226
    000000e4: 	addw	0xc(%rdi,%rsi), %ax
    000000e9: 	retq # Offset: 233
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp512:
    000000f0: 	xorl	%eax, %eax
.Ltmp517:
    000000f2: 	retq # Offset: 242
    000000f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp513:
    000000f8: 	cmpl	$0x6, %eax
    000000fb: 	jbe	.Ltmp518 # Offset: 251
    00000101: 	movl	%esi, %edx
    00000103: 	movdqa	DATAat0x38880(%rip), %xmm6
    0000010b: 	movq	%rdi, %rax
    0000010e: 	pxor	%xmm3, %xmm3
    00000112: 	shrl	$0x3, %edx
    00000115: 	movdqa	DATAat0x38890(%rip), %xmm5
    0000011d: 	subl	$0x1, %edx
    00000120: 	shlq	$0x4, %rdx
    00000124: 	leaq	0x10(%rdi,%rdx), %rdx
    00000129: 	nopl	(%rax) # Size: 7
.Ltmp519:
    00000130: 	movdqu	(%rax), %xmm1
    00000134: 	addq	$0x10, %rax
    00000138: 	movdqa	%xmm1, %xmm0
    0000013c: 	movdqa	%xmm1, %xmm2
    00000140: 	movdqa	%xmm1, %xmm4
    00000144: 	pmulhw	%xmm6, %xmm0
    00000148: 	pmulhw	%xmm5, %xmm2
    0000014c: 	paddw	%xmm1, %xmm3
    00000150: 	psraw	$0xf, %xmm4
    00000155: 	paddw	%xmm1, %xmm0
    00000159: 	psraw	$0x1, %xmm2
    0000015e: 	psraw	$0x6, %xmm0
    00000163: 	psubw	%xmm4, %xmm2
    00000167: 	psubw	%xmm4, %xmm0
    0000016b: 	paddw	%xmm2, %xmm0
    0000016f: 	paddw	%xmm0, %xmm3
    00000173: 	cmpq	%rdx, %rax
    00000176: 	jne	.Ltmp519 # Offset: 374
    00000178: 	movdqa	%xmm3, %xmm0
    0000017c: 	movl	%ecx, %r8d
    0000017f: 	psrldq	$0x8, %xmm0
    00000184: 	andl	$-0x8, %r8d
    00000188: 	paddw	%xmm0, %xmm3
    0000018c: 	movdqa	%xmm3, %xmm0
    00000190: 	psrldq	$0x4, %xmm0
    00000195: 	paddw	%xmm0, %xmm3
    00000199: 	movdqa	%xmm3, %xmm0
    0000019d: 	psrldq	$0x2, %xmm0
    000001a2: 	paddw	%xmm0, %xmm3
    000001a6: 	pextrw	$0x0, %xmm3, %eax
    000001ab: 	testb	$0x7, %cl
    000001ae: 	je	.Ltmp520 # Offset: 430
.Ltmp522:
    000001b4: 	movslq	%r8d, %rdx
    000001b7: 	movswl	(%rdi,%rdx,2), %esi
    000001bb: 	leaq	(%rdx,%rdx), %r10
    000001bf: 	imull	$0xffff8889, %esi, %edx
    000001c5: 	movl	%esi, %r9d
    000001c8: 	movl	%esi, %r11d
    000001cb: 	sarw	$0xf, %r11w
    000001d0: 	addl	%eax, %r9d
    000001d3: 	shrl	$0x10, %edx
    000001d6: 	addl	%esi, %edx
    000001d8: 	imull	$0x6667, %esi, %esi
    000001de: 	sarw	$0x6, %dx
    000001e2: 	subl	%r11d, %edx
    000001e5: 	sarl	$0x11, %esi
    000001e8: 	movswl	%dx, %edx
    000001eb: 	subl	%r11d, %esi
    000001ee: 	movswl	%si, %esi
    000001f1: 	addl	%esi, %edx
    000001f3: 	leal	(%r9,%rdx), %eax
    000001f7: 	leal	0x1(%r8), %edx
    000001fb: 	cmpl	%edx, %ecx
    000001fd: 	jle	.Ltmp517 # Offset: 509
    00000203: 	movswl	0x2(%rdi,%r10), %esi
    00000209: 	imull	$0xffff8889, %esi, %edx
    0000020f: 	movl	%esi, %r9d
    00000212: 	movl	%esi, %r11d
    00000215: 	sarw	$0xf, %r11w
    0000021a: 	shrl	$0x10, %edx
    0000021d: 	addl	%esi, %edx
    0000021f: 	imull	$0x6667, %esi, %esi
    00000225: 	sarw	$0x6, %dx
    00000229: 	subl	%r11d, %edx
    0000022c: 	sarl	$0x11, %esi
    0000022f: 	addl	%eax, %edx
    00000231: 	subl	%r11d, %esi
    00000234: 	addl	%edx, %esi
    00000236: 	leal	0x2(%r8), %edx
    0000023a: 	leal	(%rsi,%r9), %eax
    0000023e: 	cmpl	%edx, %ecx
    00000240: 	jle	.Ltmp517 # Offset: 576
    00000246: 	movswl	0x4(%rdi,%r10), %edx
    0000024c: 	imull	$0xffff8889, %edx, %esi
    00000252: 	movl	%edx, %r9d
    00000255: 	movl	%edx, %r11d
    00000258: 	sarw	$0xf, %r11w
    0000025d: 	shrl	$0x10, %esi
    00000260: 	addl	%edx, %esi
    00000262: 	imull	$0x6667, %edx, %edx
    00000268: 	sarw	$0x6, %si
    0000026c: 	subl	%r11d, %esi
    0000026f: 	sarl	$0x11, %edx
    00000272: 	addl	%esi, %r9d
    00000275: 	subl	%r11d, %edx
    00000278: 	addl	%r9d, %edx
    0000027b: 	addl	%edx, %eax
    0000027d: 	leal	0x3(%r8), %edx
    00000281: 	cmpl	%edx, %ecx
    00000283: 	jle	.Ltmp517 # Offset: 643
    00000289: 	movswl	0x6(%rdi,%r10), %edx
    0000028f: 	imull	$0xffff8889, %edx, %esi
    00000295: 	movl	%edx, %r9d
    00000298: 	movl	%edx, %r11d
    0000029b: 	sarw	$0xf, %r11w
    000002a0: 	shrl	$0x10, %esi
    000002a3: 	addl	%edx, %esi
    000002a5: 	imull	$0x6667, %edx, %edx
    000002ab: 	sarw	$0x6, %si
    000002af: 	subl	%r11d, %esi
    000002b2: 	sarl	$0x11, %edx
    000002b5: 	addl	%esi, %r9d
    000002b8: 	subl	%r11d, %edx
    000002bb: 	addl	%r9d, %edx
    000002be: 	addl	%edx, %eax
    000002c0: 	leal	0x4(%r8), %edx
    000002c4: 	cmpl	%edx, %ecx
    000002c6: 	jle	.Ltmp517 # Offset: 710
    000002cc: 	movswl	0x8(%rdi,%r10), %edx
    000002d2: 	imull	$0xffff8889, %edx, %esi
    000002d8: 	movl	%edx, %r9d
    000002db: 	movl	%edx, %r11d
    000002de: 	sarw	$0xf, %r11w
    000002e3: 	shrl	$0x10, %esi
    000002e6: 	addl	%edx, %esi
    000002e8: 	imull	$0x6667, %edx, %edx
    000002ee: 	sarw	$0x6, %si
    000002f2: 	subl	%r11d, %esi
    000002f5: 	sarl	$0x11, %edx
    000002f8: 	addl	%esi, %r9d
    000002fb: 	subl	%r11d, %edx
    000002fe: 	addl	%r9d, %edx
    00000301: 	addl	%edx, %eax
    00000303: 	leal	0x5(%r8), %edx
    00000307: 	cmpl	%edx, %ecx
    00000309: 	jle	.Ltmp517 # Offset: 777
    0000030f: 	movswl	0xa(%rdi,%r10), %edx
    00000315: 	addl	$0x6, %r8d
    00000319: 	imull	$0xffff8889, %edx, %esi
    0000031f: 	movl	%edx, %r9d
    00000322: 	movl	%edx, %r11d
    00000325: 	sarw	$0xf, %r11w
    0000032a: 	shrl	$0x10, %esi
    0000032d: 	addl	%edx, %esi
    0000032f: 	imull	$0x6667, %edx, %edx
    00000335: 	sarw	$0x6, %si
    00000339: 	subl	%r11d, %esi
    0000033c: 	sarl	$0x11, %edx
    0000033f: 	addl	%esi, %r9d
    00000342: 	subl	%r11d, %edx
    00000345: 	addl	%r9d, %edx
    00000348: 	addl	%edx, %eax
    0000034a: 	cmpl	%r8d, %ecx
    0000034d: 	jle	.Ltmp517 # Offset: 845
    00000353: 	movswl	0xc(%rdi,%r10), %edx
    00000359: 	imull	$0xffff8889, %edx, %ecx
    0000035f: 	movl	%edx, %esi
    00000361: 	movl	%edx, %edi
    00000363: 	sarw	$0xf, %di
    00000367: 	shrl	$0x10, %ecx
    0000036a: 	addl	%edx, %ecx
    0000036c: 	imull	$0x6667, %edx, %edx
    00000372: 	sarw	$0x6, %cx
    00000376: 	subl	%edi, %ecx
    00000378: 	sarl	$0x11, %edx
    0000037b: 	addl	%ecx, %esi
    0000037d: 	subl	%edi, %edx
    0000037f: 	addl	%esi, %edx
    00000381: 	addl	%edx, %eax
    00000383: 	retq # Offset: 899
.Ltmp514:
    00000384: 	xorl	%edx, %edx
    00000386: 	xorl	%eax, %eax
    00000388: 	jmp	.Ltmp521 # Offset: 904
.Ltmp516:
    0000038d: 	retq # Offset: 909
.Ltmp520:
    0000038e: 	retq # Offset: 910
.Ltmp518:
    0000038f: 	xorl	%r8d, %r8d
    00000392: 	xorl	%eax, %eax
    00000394: 	jmp	.Ltmp522 # Offset: 916
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_while_loop_paramIsET_PKS0_iS0_"

Binary Function "_Z22test_while_loop_param2IsET_PKS0_iS0_" after disassembly {
  Number      : 98
  State       : disassembled
  Address     : 0x81b0
  Size        : 0x2d3
  MaxSize     : 0x2e0
  Offset      : 0x81b0
  Section     : .text
  Orc Section : .local.text._Z22test_while_loop_param2IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB097:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp523 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	testw	%dx, %dx
    00000014: 	js	.Ltmp524 # Offset: 20
    0000001a: 	cmpl	$0x6, %eax
    0000001d: 	jbe	.Ltmp525 # Offset: 29
    00000023: 	movl	%esi, %edx
    00000025: 	movq	%rdi, %rax
    00000028: 	pxor	%xmm0, %xmm0
    0000002c: 	shrl	$0x3, %edx
    0000002f: 	subl	$0x1, %edx
    00000032: 	shlq	$0x4, %rdx
    00000036: 	leaq	0x10(%rdi,%rdx), %rdx
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp526:
    00000040: 	movdqu	(%rax), %xmm5
    00000044: 	addq	$0x10, %rax
    00000048: 	paddw	%xmm5, %xmm0
    0000004c: 	cmpq	%rdx, %rax
    0000004f: 	jne	.Ltmp526 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%ecx, %edx
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x8, %edx
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x4, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	movdqa	%xmm0, %xmm1
    00000074: 	psrldq	$0x2, %xmm1
    00000079: 	paddw	%xmm1, %xmm0
    0000007d: 	pextrw	$0x0, %xmm0, %eax
    00000082: 	testb	$0x7, %cl
    00000085: 	je	.Ltmp527 # Offset: 133
.Ltmp532:
    0000008b: 	movslq	%edx, %r8
    0000008e: 	leaq	(%r8,%r8), %rsi
    00000092: 	addw	(%rdi,%r8,2), %ax
    00000097: 	leal	0x1(%rdx), %r8d
    0000009b: 	cmpl	%ecx, %r8d
    0000009e: 	jge	.Ltmp528 # Offset: 158
    000000a0: 	leal	0x2(%rdx), %r8d
    000000a4: 	addw	0x2(%rdi,%rsi), %ax
    000000a9: 	cmpl	%r8d, %ecx
    000000ac: 	jle	.Ltmp528 # Offset: 172
    000000ae: 	leal	0x3(%rdx), %r8d
    000000b2: 	addw	0x4(%rdi,%rsi), %ax
    000000b7: 	cmpl	%r8d, %ecx
    000000ba: 	jle	.Ltmp528 # Offset: 186
    000000bc: 	leal	0x4(%rdx), %r8d
    000000c0: 	addw	0x6(%rdi,%rsi), %ax
    000000c5: 	cmpl	%r8d, %ecx
    000000c8: 	jle	.Ltmp528 # Offset: 200
    000000ca: 	leal	0x5(%rdx), %r8d
    000000ce: 	addw	0x8(%rdi,%rsi), %ax
    000000d3: 	cmpl	%r8d, %ecx
    000000d6: 	jle	.Ltmp528 # Offset: 214
    000000d8: 	addl	$0x6, %edx
    000000db: 	addw	0xa(%rdi,%rsi), %ax
    000000e0: 	cmpl	%edx, %ecx
    000000e2: 	jle	.Ltmp528 # Offset: 226
    000000e4: 	addw	0xc(%rdi,%rsi), %ax
    000000e9: 	retq # Offset: 233
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp523:
    000000f0: 	xorl	%eax, %eax
.Ltmp528:
    000000f2: 	retq # Offset: 242
    000000f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp524:
    000000f8: 	cmpl	$0x6, %eax
    000000fb: 	jbe	.Ltmp529 # Offset: 251
    00000101: 	movl	%esi, %edx
    00000103: 	movdqa	DATAat0x38890(%rip), %xmm4
    0000010b: 	movq	%rdi, %rax
    0000010e: 	pxor	%xmm1, %xmm1
    00000112: 	shrl	$0x3, %edx
    00000115: 	subl	$0x1, %edx
    00000118: 	shlq	$0x4, %rdx
    0000011c: 	leaq	0x10(%rdi,%rdx), %rdx
    00000121: 	nopl	(%rax) # Size: 7
.Ltmp530:
    00000128: 	movdqu	(%rax), %xmm2
    0000012c: 	addq	$0x10, %rax
    00000130: 	movdqa	%xmm2, %xmm0
    00000134: 	movdqa	%xmm2, %xmm3
    00000138: 	paddw	%xmm2, %xmm1
    0000013c: 	pmulhw	%xmm4, %xmm0
    00000140: 	psraw	$0xf, %xmm3
    00000145: 	psraw	$0x1, %xmm0
    0000014a: 	psubw	%xmm3, %xmm0
    0000014e: 	paddw	%xmm0, %xmm1
    00000152: 	cmpq	%rax, %rdx
    00000155: 	jne	.Ltmp530 # Offset: 341
    00000157: 	movdqa	%xmm1, %xmm0
    0000015b: 	movl	%ecx, %esi
    0000015d: 	psrldq	$0x8, %xmm0
    00000162: 	andl	$-0x8, %esi
    00000165: 	paddw	%xmm0, %xmm1
    00000169: 	movdqa	%xmm1, %xmm0
    0000016d: 	psrldq	$0x4, %xmm0
    00000172: 	paddw	%xmm0, %xmm1
    00000176: 	movdqa	%xmm1, %xmm0
    0000017a: 	psrldq	$0x2, %xmm0
    0000017f: 	paddw	%xmm0, %xmm1
    00000183: 	pextrw	$0x0, %xmm1, %eax
    00000188: 	testb	$0x7, %cl
    0000018b: 	je	.Ltmp531 # Offset: 395
.Ltmp533:
    00000191: 	movslq	%esi, %rdx
    00000194: 	leaq	(%rdx,%rdx), %r8
    00000198: 	movswl	(%rdi,%rdx,2), %edx
    0000019c: 	movl	%edx, %r9d
    0000019f: 	addl	%edx, %eax
    000001a1: 	imull	$0x6667, %edx, %edx
    000001a7: 	sarw	$0xf, %r9w
    000001ac: 	sarl	$0x11, %edx
    000001af: 	subl	%r9d, %edx
    000001b2: 	addl	%edx, %eax
    000001b4: 	leal	0x1(%rsi), %edx
    000001b7: 	cmpl	%edx, %ecx
    000001b9: 	jle	.Ltmp528 # Offset: 441
    000001bf: 	movswl	0x2(%rdi,%r8), %edx
    000001c5: 	movl	%edx, %r9d
    000001c8: 	imull	$0x6667, %edx, %edx
    000001ce: 	movl	%r9d, %r10d
    000001d1: 	sarw	$0xf, %r10w
    000001d6: 	sarl	$0x11, %edx
    000001d9: 	subl	%r10d, %edx
    000001dc: 	addl	%eax, %edx
    000001de: 	leal	(%rdx,%r9), %eax
    000001e2: 	leal	0x2(%rsi), %edx
    000001e5: 	cmpl	%edx, %ecx
    000001e7: 	jle	.Ltmp528 # Offset: 487
    000001ed: 	movswl	0x4(%rdi,%r8), %edx
    000001f3: 	movl	%edx, %r9d
    000001f6: 	imull	$0x6667, %edx, %edx
    000001fc: 	movl	%r9d, %r10d
    000001ff: 	sarw	$0xf, %r10w
    00000204: 	sarl	$0x11, %edx
    00000207: 	subl	%r10d, %edx
    0000020a: 	addl	%r9d, %edx
    0000020d: 	addl	%edx, %eax
    0000020f: 	leal	0x3(%rsi), %edx
    00000212: 	cmpl	%edx, %ecx
    00000214: 	jle	.Ltmp528 # Offset: 532
    0000021a: 	movswl	0x6(%rdi,%r8), %edx
    00000220: 	movl	%edx, %r9d
    00000223: 	imull	$0x6667, %edx, %edx
    00000229: 	movl	%r9d, %r10d
    0000022c: 	sarw	$0xf, %r10w
    00000231: 	sarl	$0x11, %edx
    00000234: 	subl	%r10d, %edx
    00000237: 	addl	%r9d, %edx
    0000023a: 	addl	%edx, %eax
    0000023c: 	leal	0x4(%rsi), %edx
    0000023f: 	cmpl	%edx, %ecx
    00000241: 	jle	.Ltmp528 # Offset: 577
    00000247: 	movswl	0x8(%rdi,%r8), %edx
    0000024d: 	movl	%edx, %r9d
    00000250: 	imull	$0x6667, %edx, %edx
    00000256: 	movl	%r9d, %r10d
    00000259: 	sarw	$0xf, %r10w
    0000025e: 	sarl	$0x11, %edx
    00000261: 	subl	%r10d, %edx
    00000264: 	addl	%r9d, %edx
    00000267: 	addl	%edx, %eax
    00000269: 	leal	0x5(%rsi), %edx
    0000026c: 	cmpl	%edx, %ecx
    0000026e: 	jle	.Ltmp528 # Offset: 622
    00000274: 	movswl	0xa(%rdi,%r8), %edx
    0000027a: 	addl	$0x6, %esi
    0000027d: 	movl	%edx, %r9d
    00000280: 	imull	$0x6667, %edx, %edx
    00000286: 	movl	%r9d, %r10d
    00000289: 	sarw	$0xf, %r10w
    0000028e: 	sarl	$0x11, %edx
    00000291: 	subl	%r10d, %edx
    00000294: 	addl	%r9d, %edx
    00000297: 	addl	%edx, %eax
    00000299: 	cmpl	%esi, %ecx
    0000029b: 	jle	.Ltmp528 # Offset: 667
    000002a1: 	movswl	0xc(%rdi,%r8), %edx
    000002a7: 	movl	%edx, %ecx
    000002a9: 	imull	$0x6667, %edx, %edx
    000002af: 	movl	%ecx, %esi
    000002b1: 	sarw	$0xf, %si
    000002b5: 	sarl	$0x11, %edx
    000002b8: 	subl	%esi, %edx
    000002ba: 	addl	%ecx, %edx
    000002bc: 	addl	%edx, %eax
    000002be: 	retq # Offset: 702
.Ltmp525:
    000002bf: 	xorl	%edx, %edx
    000002c1: 	xorl	%eax, %eax
    000002c3: 	jmp	.Ltmp532 # Offset: 707
.Ltmp527:
    000002c8: 	retq # Offset: 712
.Ltmp531:
    000002c9: 	retq # Offset: 713
.Ltmp529:
    000002ca: 	xorl	%esi, %esi
    000002cc: 	xorl	%eax, %eax
    000002ce: 	jmp	.Ltmp533 # Offset: 718
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_while_loop_param2IsET_PKS0_iS0_"

Binary Function "_Z22test_while_loop_param3IsET_PKS0_iS0_" after disassembly {
  Number      : 99
  State       : disassembled
  Address     : 0x8490
  Size        : 0x2d7
  MaxSize     : 0x2e0
  Offset      : 0x8490
  Section     : .text
  Orc Section : .local.text._Z22test_while_loop_param3IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB098:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	testw	%dx, %dx
    00000009: 	js	.Ltmp534 # Offset: 9
    0000000f: 	xorl	%r8d, %r8d
    00000012: 	testl	%esi, %esi
    00000014: 	jle	.Ltmp535 # Offset: 20
.Ltmp542:
    0000001a: 	testl	%ecx, %ecx
    0000001c: 	movl	$0x1, %esi
    00000021: 	cmovgl	%ecx, %esi
    00000024: 	cmpl	$0x7, %ecx
    00000027: 	jle	.Ltmp536 # Offset: 39
    0000002d: 	leaq	0x10(%rdi), %r9
.Ltmp544:
    00000031: 	movl	%esi, %edx
    00000033: 	movq	%rdi, %rax
    00000036: 	pxor	%xmm0, %xmm0
    0000003a: 	shrl	$0x3, %edx
    0000003d: 	subl	$0x1, %edx
    00000040: 	shlq	$0x4, %rdx
    00000044: 	addq	%r9, %rdx
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp537:
    00000050: 	movdqu	(%rax), %xmm4
    00000054: 	addq	$0x10, %rax
    00000058: 	paddw	%xmm4, %xmm0
    0000005c: 	cmpq	%rdx, %rax
    0000005f: 	jne	.Ltmp537 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	psrldq	$0x8, %xmm1
    0000006a: 	paddw	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x4, %xmm1
    00000077: 	paddw	%xmm1, %xmm0
    0000007b: 	movdqa	%xmm0, %xmm1
    0000007f: 	psrldq	$0x2, %xmm1
    00000084: 	paddw	%xmm1, %xmm0
    00000088: 	pextrw	$0x0, %xmm0, %eax
    0000008d: 	addl	%eax, %r8d
    00000090: 	movl	%esi, %eax
    00000092: 	andl	$-0x8, %eax
    00000095: 	andl	$0x7, %esi
    00000098: 	je	.Ltmp535 # Offset: 152
.Ltmp543:
    0000009a: 	movslq	%eax, %rsi
    0000009d: 	leaq	(%rsi,%rsi), %rdx
    000000a1: 	addw	(%rdi,%rsi,2), %r8w
    000000a6: 	leal	0x1(%rax), %esi
    000000a9: 	cmpl	%esi, %ecx
    000000ab: 	jle	.Ltmp535 # Offset: 171
    000000ad: 	leal	0x2(%rax), %esi
    000000b0: 	addw	0x2(%rdi,%rdx), %r8w
    000000b6: 	cmpl	%ecx, %esi
    000000b8: 	jge	.Ltmp535 # Offset: 184
    000000ba: 	leal	0x3(%rax), %esi
    000000bd: 	addw	0x4(%rdi,%rdx), %r8w
    000000c3: 	cmpl	%esi, %ecx
    000000c5: 	jle	.Ltmp535 # Offset: 197
    000000c7: 	leal	0x4(%rax), %esi
    000000ca: 	addw	0x6(%rdi,%rdx), %r8w
    000000d0: 	cmpl	%esi, %ecx
    000000d2: 	jle	.Ltmp535 # Offset: 210
    000000d4: 	leal	0x5(%rax), %esi
    000000d7: 	addw	0x8(%rdi,%rdx), %r8w
    000000dd: 	cmpl	%esi, %ecx
    000000df: 	jle	.Ltmp535 # Offset: 223
    000000e1: 	addl	$0x6, %eax
    000000e4: 	addw	0xa(%rdi,%rdx), %r8w
    000000ea: 	cmpl	%eax, %ecx
    000000ec: 	jle	.Ltmp535 # Offset: 236
    000000ee: 	addw	0xc(%rdi,%rdx), %r8w
.Ltmp535:
    000000f4: 	movl	%r8d, %eax
    000000f7: 	retq # Offset: 247
    000000f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp534:
    00000100: 	testl	%esi, %esi
    00000102: 	jle	.Ltmp538 # Offset: 258
    00000108: 	leal	-0x1(%rsi), %eax
    0000010b: 	cmpl	$0x6, %eax
    0000010e: 	jbe	.Ltmp539 # Offset: 270
    00000114: 	movl	%esi, %edx
    00000116: 	leaq	0x10(%rdi), %r9
    0000011a: 	pxor	%xmm2, %xmm2
    0000011e: 	movq	%rdi, %rax
    00000121: 	shrl	$0x3, %edx
    00000124: 	movdqa	DATAat0x38890(%rip), %xmm3
    0000012c: 	subl	$0x1, %edx
    0000012f: 	shlq	$0x4, %rdx
    00000133: 	addq	%r9, %rdx
    00000136: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp540:
    00000140: 	movdqu	(%rax), %xmm0
    00000144: 	movdqu	(%rax), %xmm1
    00000148: 	addq	$0x10, %rax
    0000014c: 	pmulhw	%xmm3, %xmm0
    00000150: 	psraw	$0xf, %xmm1
    00000155: 	psraw	$0x1, %xmm0
    0000015a: 	psubw	%xmm1, %xmm0
    0000015e: 	paddw	%xmm0, %xmm2
    00000162: 	cmpq	%rax, %rdx
    00000165: 	jne	.Ltmp540 # Offset: 357
    00000167: 	movdqa	%xmm2, %xmm0
    0000016b: 	movl	%ecx, %eax
    0000016d: 	psrldq	$0x8, %xmm0
    00000172: 	andl	$-0x8, %eax
    00000175: 	paddw	%xmm0, %xmm2
    00000179: 	movdqa	%xmm2, %xmm0
    0000017d: 	psrldq	$0x4, %xmm0
    00000182: 	paddw	%xmm0, %xmm2
    00000186: 	movdqa	%xmm2, %xmm0
    0000018a: 	psrldq	$0x2, %xmm0
    0000018f: 	paddw	%xmm0, %xmm2
    00000193: 	pextrw	$0x0, %xmm2, %r8d
    00000199: 	cmpl	%eax, %ecx
    0000019b: 	je	.Ltmp541 # Offset: 411
.Ltmp545:
    000001a1: 	movslq	%eax, %rdx
    000001a4: 	leaq	(%rdx,%rdx), %rsi
    000001a8: 	movswl	(%rdi,%rdx,2), %edx
    000001ac: 	movl	%edx, %r9d
    000001af: 	imull	$0x6667, %edx, %edx
    000001b5: 	sarw	$0xf, %r9w
    000001ba: 	sarl	$0x11, %edx
    000001bd: 	subl	%r9d, %edx
    000001c0: 	addl	%edx, %r8d
    000001c3: 	leal	0x1(%rax), %edx
    000001c6: 	cmpl	%edx, %ecx
    000001c8: 	jle	.Ltmp542 # Offset: 456
    000001ce: 	movswl	0x2(%rdi,%rsi), %edx
    000001d3: 	movl	%edx, %r9d
    000001d6: 	imull	$0x6667, %edx, %edx
    000001dc: 	sarw	$0xf, %r9w
    000001e1: 	sarl	$0x11, %edx
    000001e4: 	subl	%r9d, %edx
    000001e7: 	addl	%edx, %r8d
    000001ea: 	leal	0x2(%rax), %edx
    000001ed: 	cmpl	%edx, %ecx
    000001ef: 	jle	.Ltmp542 # Offset: 495
    000001f5: 	movswl	0x4(%rdi,%rsi), %edx
    000001fa: 	movl	%edx, %r9d
    000001fd: 	imull	$0x6667, %edx, %edx
    00000203: 	sarw	$0xf, %r9w
    00000208: 	sarl	$0x11, %edx
    0000020b: 	subl	%r9d, %edx
    0000020e: 	addl	%edx, %r8d
    00000211: 	leal	0x3(%rax), %edx
    00000214: 	cmpl	%edx, %ecx
    00000216: 	jle	.Ltmp542 # Offset: 534
    0000021c: 	movswl	0x6(%rdi,%rsi), %edx
    00000221: 	movl	%edx, %r9d
    00000224: 	imull	$0x6667, %edx, %edx
    0000022a: 	sarw	$0xf, %r9w
    0000022f: 	sarl	$0x11, %edx
    00000232: 	subl	%r9d, %edx
    00000235: 	addl	%edx, %r8d
    00000238: 	leal	0x4(%rax), %edx
    0000023b: 	cmpl	%edx, %ecx
    0000023d: 	jle	.Ltmp542 # Offset: 573
    00000243: 	movswl	0x8(%rdi,%rsi), %edx
    00000248: 	movl	%edx, %r9d
    0000024b: 	imull	$0x6667, %edx, %edx
    00000251: 	sarw	$0xf, %r9w
    00000256: 	sarl	$0x11, %edx
    00000259: 	subl	%r9d, %edx
    0000025c: 	addl	%edx, %r8d
    0000025f: 	leal	0x5(%rax), %edx
    00000262: 	cmpl	%edx, %ecx
    00000264: 	jle	.Ltmp542 # Offset: 612
    0000026a: 	movswl	0xa(%rdi,%rsi), %edx
    0000026f: 	addl	$0x6, %eax
    00000272: 	movl	%edx, %r9d
    00000275: 	imull	$0x6667, %edx, %edx
    0000027b: 	sarw	$0xf, %r9w
    00000280: 	sarl	$0x11, %edx
    00000283: 	subl	%r9d, %edx
    00000286: 	addl	%edx, %r8d
    00000289: 	cmpl	%eax, %ecx
    0000028b: 	jle	.Ltmp542 # Offset: 651
    00000291: 	movswl	0xc(%rdi,%rsi), %eax
    00000296: 	movl	%eax, %edx
    00000298: 	imull	$0x6667, %eax, %eax
    0000029e: 	sarw	$0xf, %dx
    000002a2: 	sarl	$0x11, %eax
    000002a5: 	subl	%edx, %eax
    000002a7: 	addl	%eax, %r8d
    000002aa: 	jmp	.Ltmp542 # Offset: 682
.Ltmp536:
    000002af: 	xorl	%eax, %eax
    000002b1: 	jmp	.Ltmp543 # Offset: 689
.Ltmp538:
    000002b6: 	xorl	%r8d, %r8d
    000002b9: 	jmp	.Ltmp535 # Offset: 697
.Ltmp541:
    000002be: 	testl	%ecx, %ecx
    000002c0: 	movl	$0x1, %esi
    000002c5: 	cmovgl	%ecx, %esi
    000002c8: 	jmp	.Ltmp544 # Offset: 712
.Ltmp539:
    000002cd: 	xorl	%eax, %eax
    000002cf: 	xorl	%r8d, %r8d
    000002d2: 	jmp	.Ltmp545 # Offset: 722
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_while_loop_param3IsET_PKS0_iS0_"

Binary Function "_Z19test_do_loop_param3IsET_PKS0_iS0_" after disassembly {
  Number      : 100
  State       : disassembled
  Address     : 0x8770
  Size        : 0x2cd
  MaxSize     : 0x2d0
  Offset      : 0x8770
  Section     : .text
  Orc Section : .local.text._Z19test_do_loop_param3IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB099:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	xorl	%r8d, %r8d
    00000009: 	testw	%dx, %dx
    0000000c: 	js	.Ltmp546 # Offset: 12
    00000012: 	testl	%esi, %esi
    00000014: 	jle	.Ltmp547 # Offset: 20
.Ltmp553:
    0000001a: 	testl	%ecx, %ecx
    0000001c: 	movl	$0x1, %esi
    00000021: 	cmovgl	%ecx, %esi
    00000024: 	cmpl	$0x7, %ecx
    00000027: 	jle	.Ltmp548 # Offset: 39
    0000002d: 	leaq	0x10(%rdi), %r9
.Ltmp555:
    00000031: 	movl	%esi, %edx
    00000033: 	movq	%rdi, %rax
    00000036: 	pxor	%xmm0, %xmm0
    0000003a: 	shrl	$0x3, %edx
    0000003d: 	subl	$0x1, %edx
    00000040: 	shlq	$0x4, %rdx
    00000044: 	addq	%r9, %rdx
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp549:
    00000050: 	movdqu	(%rax), %xmm4
    00000054: 	addq	$0x10, %rax
    00000058: 	paddw	%xmm4, %xmm0
    0000005c: 	cmpq	%rdx, %rax
    0000005f: 	jne	.Ltmp549 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	psrldq	$0x8, %xmm1
    0000006a: 	paddw	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x4, %xmm1
    00000077: 	paddw	%xmm1, %xmm0
    0000007b: 	movdqa	%xmm0, %xmm1
    0000007f: 	psrldq	$0x2, %xmm1
    00000084: 	paddw	%xmm1, %xmm0
    00000088: 	pextrw	$0x0, %xmm0, %eax
    0000008d: 	addl	%eax, %r8d
    00000090: 	movl	%esi, %eax
    00000092: 	andl	$-0x8, %eax
    00000095: 	andl	$0x7, %esi
    00000098: 	je	.Ltmp547 # Offset: 152
.Ltmp554:
    0000009a: 	movslq	%eax, %rsi
    0000009d: 	leaq	(%rsi,%rsi), %rdx
    000000a1: 	addw	(%rdi,%rsi,2), %r8w
    000000a6: 	leal	0x1(%rax), %esi
    000000a9: 	cmpl	%esi, %ecx
    000000ab: 	jle	.Ltmp547 # Offset: 171
    000000ad: 	leal	0x2(%rax), %esi
    000000b0: 	addw	0x2(%rdi,%rdx), %r8w
    000000b6: 	cmpl	%ecx, %esi
    000000b8: 	jge	.Ltmp547 # Offset: 184
    000000ba: 	leal	0x3(%rax), %esi
    000000bd: 	addw	0x4(%rdi,%rdx), %r8w
    000000c3: 	cmpl	%esi, %ecx
    000000c5: 	jle	.Ltmp547 # Offset: 197
    000000c7: 	leal	0x4(%rax), %esi
    000000ca: 	addw	0x6(%rdi,%rdx), %r8w
    000000d0: 	cmpl	%esi, %ecx
    000000d2: 	jle	.Ltmp547 # Offset: 210
    000000d4: 	leal	0x5(%rax), %esi
    000000d7: 	addw	0x8(%rdi,%rdx), %r8w
    000000dd: 	cmpl	%esi, %ecx
    000000df: 	jle	.Ltmp547 # Offset: 223
    000000e1: 	addl	$0x6, %eax
    000000e4: 	addw	0xa(%rdi,%rdx), %r8w
    000000ea: 	cmpl	%eax, %ecx
    000000ec: 	jle	.Ltmp547 # Offset: 236
    000000ee: 	addw	0xc(%rdi,%rdx), %r8w
.Ltmp547:
    000000f4: 	movl	%r8d, %eax
    000000f7: 	retq # Offset: 247
    000000f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp546:
    00000100: 	testl	%esi, %esi
    00000102: 	jle	.Ltmp547 # Offset: 258
    00000104: 	leal	-0x1(%rsi), %eax
    00000107: 	cmpl	$0x6, %eax
    0000010a: 	jbe	.Ltmp550 # Offset: 266
    00000110: 	movl	%esi, %edx
    00000112: 	leaq	0x10(%rdi), %r9
    00000116: 	pxor	%xmm2, %xmm2
    0000011a: 	movq	%rdi, %rax
    0000011d: 	shrl	$0x3, %edx
    00000120: 	movdqa	DATAat0x38890(%rip), %xmm3
    00000128: 	subl	$0x1, %edx
    0000012b: 	shlq	$0x4, %rdx
    0000012f: 	addq	%r9, %rdx
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp551:
    00000138: 	movdqu	(%rax), %xmm0
    0000013c: 	movdqu	(%rax), %xmm1
    00000140: 	addq	$0x10, %rax
    00000144: 	pmulhw	%xmm3, %xmm0
    00000148: 	psraw	$0xf, %xmm1
    0000014d: 	psraw	$0x1, %xmm0
    00000152: 	psubw	%xmm1, %xmm0
    00000156: 	paddw	%xmm0, %xmm2
    0000015a: 	cmpq	%rax, %rdx
    0000015d: 	jne	.Ltmp551 # Offset: 349
    0000015f: 	movdqa	%xmm2, %xmm0
    00000163: 	movl	%ecx, %eax
    00000165: 	psrldq	$0x8, %xmm0
    0000016a: 	andl	$-0x8, %eax
    0000016d: 	paddw	%xmm0, %xmm2
    00000171: 	movdqa	%xmm2, %xmm0
    00000175: 	psrldq	$0x4, %xmm0
    0000017a: 	paddw	%xmm0, %xmm2
    0000017e: 	movdqa	%xmm2, %xmm0
    00000182: 	psrldq	$0x2, %xmm0
    00000187: 	paddw	%xmm0, %xmm2
    0000018b: 	pextrw	$0x0, %xmm2, %r8d
    00000191: 	cmpl	%eax, %ecx
    00000193: 	je	.Ltmp552 # Offset: 403
.Ltmp556:
    00000199: 	movslq	%eax, %rdx
    0000019c: 	leaq	(%rdx,%rdx), %rsi
    000001a0: 	movswl	(%rdi,%rdx,2), %edx
    000001a4: 	movl	%edx, %r9d
    000001a7: 	imull	$0x6667, %edx, %edx
    000001ad: 	sarw	$0xf, %r9w
    000001b2: 	sarl	$0x11, %edx
    000001b5: 	subl	%r9d, %edx
    000001b8: 	addl	%edx, %r8d
    000001bb: 	leal	0x1(%rax), %edx
    000001be: 	cmpl	%edx, %ecx
    000001c0: 	jle	.Ltmp553 # Offset: 448
    000001c6: 	movswl	0x2(%rdi,%rsi), %edx
    000001cb: 	movl	%edx, %r9d
    000001ce: 	imull	$0x6667, %edx, %edx
    000001d4: 	sarw	$0xf, %r9w
    000001d9: 	sarl	$0x11, %edx
    000001dc: 	subl	%r9d, %edx
    000001df: 	addl	%edx, %r8d
    000001e2: 	leal	0x2(%rax), %edx
    000001e5: 	cmpl	%edx, %ecx
    000001e7: 	jle	.Ltmp553 # Offset: 487
    000001ed: 	movswl	0x4(%rdi,%rsi), %edx
    000001f2: 	movl	%edx, %r9d
    000001f5: 	imull	$0x6667, %edx, %edx
    000001fb: 	sarw	$0xf, %r9w
    00000200: 	sarl	$0x11, %edx
    00000203: 	subl	%r9d, %edx
    00000206: 	addl	%edx, %r8d
    00000209: 	leal	0x3(%rax), %edx
    0000020c: 	cmpl	%edx, %ecx
    0000020e: 	jle	.Ltmp553 # Offset: 526
    00000214: 	movswl	0x6(%rdi,%rsi), %edx
    00000219: 	movl	%edx, %r9d
    0000021c: 	imull	$0x6667, %edx, %edx
    00000222: 	sarw	$0xf, %r9w
    00000227: 	sarl	$0x11, %edx
    0000022a: 	subl	%r9d, %edx
    0000022d: 	addl	%edx, %r8d
    00000230: 	leal	0x4(%rax), %edx
    00000233: 	cmpl	%edx, %ecx
    00000235: 	jle	.Ltmp553 # Offset: 565
    0000023b: 	movswl	0x8(%rdi,%rsi), %edx
    00000240: 	movl	%edx, %r9d
    00000243: 	imull	$0x6667, %edx, %edx
    00000249: 	sarw	$0xf, %r9w
    0000024e: 	sarl	$0x11, %edx
    00000251: 	subl	%r9d, %edx
    00000254: 	addl	%edx, %r8d
    00000257: 	leal	0x5(%rax), %edx
    0000025a: 	cmpl	%edx, %ecx
    0000025c: 	jle	.Ltmp553 # Offset: 604
    00000262: 	movswl	0xa(%rdi,%rsi), %edx
    00000267: 	addl	$0x6, %eax
    0000026a: 	movl	%edx, %r9d
    0000026d: 	imull	$0x6667, %edx, %edx
    00000273: 	sarw	$0xf, %r9w
    00000278: 	sarl	$0x11, %edx
    0000027b: 	subl	%r9d, %edx
    0000027e: 	addl	%edx, %r8d
    00000281: 	cmpl	%eax, %ecx
    00000283: 	jle	.Ltmp553 # Offset: 643
    00000289: 	movswl	0xc(%rdi,%rsi), %eax
    0000028e: 	movl	%eax, %edx
    00000290: 	imull	$0x6667, %eax, %eax
    00000296: 	sarw	$0xf, %dx
    0000029a: 	sarl	$0x11, %eax
    0000029d: 	subl	%edx, %eax
    0000029f: 	addl	%eax, %r8d
    000002a2: 	jmp	.Ltmp553 # Offset: 674
    000002a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp548:
    000002b0: 	xorl	%eax, %eax
    000002b2: 	jmp	.Ltmp554 # Offset: 690
.Ltmp552:
    000002b7: 	testl	%ecx, %ecx
    000002b9: 	movl	$0x1, %esi
    000002be: 	cmovgl	%ecx, %esi
    000002c1: 	jmp	.Ltmp555 # Offset: 705
.Ltmp550:
    000002c6: 	xorl	%eax, %eax
    000002c8: 	jmp	.Ltmp556 # Offset: 712
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_do_loop_param3IsET_PKS0_iS0_"

Binary Function "_Z21test_goto_loop_param3IsET_PKS0_iS0_" after disassembly {
  Number      : 101
  State       : disassembled
  Address     : 0x8a40
  Size        : 0x2cd
  MaxSize     : 0x2d0
  Offset      : 0x8a40
  Section     : .text
  Orc Section : .local.text._Z21test_goto_loop_param3IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0100:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	xorl	%r8d, %r8d
    00000009: 	testw	%dx, %dx
    0000000c: 	js	.Ltmp557 # Offset: 12
    00000012: 	testl	%esi, %esi
    00000014: 	jle	.Ltmp558 # Offset: 20
.Ltmp564:
    0000001a: 	testl	%ecx, %ecx
    0000001c: 	movl	$0x1, %esi
    00000021: 	cmovgl	%ecx, %esi
    00000024: 	cmpl	$0x7, %ecx
    00000027: 	jle	.Ltmp559 # Offset: 39
    0000002d: 	leaq	0x10(%rdi), %r9
.Ltmp566:
    00000031: 	movl	%esi, %edx
    00000033: 	movq	%rdi, %rax
    00000036: 	pxor	%xmm0, %xmm0
    0000003a: 	shrl	$0x3, %edx
    0000003d: 	subl	$0x1, %edx
    00000040: 	shlq	$0x4, %rdx
    00000044: 	addq	%r9, %rdx
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp560:
    00000050: 	movdqu	(%rax), %xmm4
    00000054: 	addq	$0x10, %rax
    00000058: 	paddw	%xmm4, %xmm0
    0000005c: 	cmpq	%rdx, %rax
    0000005f: 	jne	.Ltmp560 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	psrldq	$0x8, %xmm1
    0000006a: 	paddw	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x4, %xmm1
    00000077: 	paddw	%xmm1, %xmm0
    0000007b: 	movdqa	%xmm0, %xmm1
    0000007f: 	psrldq	$0x2, %xmm1
    00000084: 	paddw	%xmm1, %xmm0
    00000088: 	pextrw	$0x0, %xmm0, %eax
    0000008d: 	addl	%eax, %r8d
    00000090: 	movl	%esi, %eax
    00000092: 	andl	$-0x8, %eax
    00000095: 	andl	$0x7, %esi
    00000098: 	je	.Ltmp558 # Offset: 152
.Ltmp565:
    0000009a: 	movslq	%eax, %rsi
    0000009d: 	leaq	(%rsi,%rsi), %rdx
    000000a1: 	addw	(%rdi,%rsi,2), %r8w
    000000a6: 	leal	0x1(%rax), %esi
    000000a9: 	cmpl	%esi, %ecx
    000000ab: 	jle	.Ltmp558 # Offset: 171
    000000ad: 	leal	0x2(%rax), %esi
    000000b0: 	addw	0x2(%rdi,%rdx), %r8w
    000000b6: 	cmpl	%ecx, %esi
    000000b8: 	jge	.Ltmp558 # Offset: 184
    000000ba: 	leal	0x3(%rax), %esi
    000000bd: 	addw	0x4(%rdi,%rdx), %r8w
    000000c3: 	cmpl	%esi, %ecx
    000000c5: 	jle	.Ltmp558 # Offset: 197
    000000c7: 	leal	0x4(%rax), %esi
    000000ca: 	addw	0x6(%rdi,%rdx), %r8w
    000000d0: 	cmpl	%esi, %ecx
    000000d2: 	jle	.Ltmp558 # Offset: 210
    000000d4: 	leal	0x5(%rax), %esi
    000000d7: 	addw	0x8(%rdi,%rdx), %r8w
    000000dd: 	cmpl	%esi, %ecx
    000000df: 	jle	.Ltmp558 # Offset: 223
    000000e1: 	addl	$0x6, %eax
    000000e4: 	addw	0xa(%rdi,%rdx), %r8w
    000000ea: 	cmpl	%eax, %ecx
    000000ec: 	jle	.Ltmp558 # Offset: 236
    000000ee: 	addw	0xc(%rdi,%rdx), %r8w
.Ltmp558:
    000000f4: 	movl	%r8d, %eax
    000000f7: 	retq # Offset: 247
    000000f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp557:
    00000100: 	testl	%esi, %esi
    00000102: 	jle	.Ltmp558 # Offset: 258
    00000104: 	leal	-0x1(%rsi), %eax
    00000107: 	cmpl	$0x6, %eax
    0000010a: 	jbe	.Ltmp561 # Offset: 266
    00000110: 	movl	%esi, %edx
    00000112: 	leaq	0x10(%rdi), %r9
    00000116: 	pxor	%xmm2, %xmm2
    0000011a: 	movq	%rdi, %rax
    0000011d: 	shrl	$0x3, %edx
    00000120: 	movdqa	DATAat0x38890(%rip), %xmm3
    00000128: 	subl	$0x1, %edx
    0000012b: 	shlq	$0x4, %rdx
    0000012f: 	addq	%r9, %rdx
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp562:
    00000138: 	movdqu	(%rax), %xmm0
    0000013c: 	movdqu	(%rax), %xmm1
    00000140: 	addq	$0x10, %rax
    00000144: 	pmulhw	%xmm3, %xmm0
    00000148: 	psraw	$0xf, %xmm1
    0000014d: 	psraw	$0x1, %xmm0
    00000152: 	psubw	%xmm1, %xmm0
    00000156: 	paddw	%xmm0, %xmm2
    0000015a: 	cmpq	%rax, %rdx
    0000015d: 	jne	.Ltmp562 # Offset: 349
    0000015f: 	movdqa	%xmm2, %xmm0
    00000163: 	movl	%ecx, %eax
    00000165: 	psrldq	$0x8, %xmm0
    0000016a: 	andl	$-0x8, %eax
    0000016d: 	paddw	%xmm0, %xmm2
    00000171: 	movdqa	%xmm2, %xmm0
    00000175: 	psrldq	$0x4, %xmm0
    0000017a: 	paddw	%xmm0, %xmm2
    0000017e: 	movdqa	%xmm2, %xmm0
    00000182: 	psrldq	$0x2, %xmm0
    00000187: 	paddw	%xmm0, %xmm2
    0000018b: 	pextrw	$0x0, %xmm2, %r8d
    00000191: 	cmpl	%eax, %ecx
    00000193: 	je	.Ltmp563 # Offset: 403
.Ltmp567:
    00000199: 	movslq	%eax, %rdx
    0000019c: 	leaq	(%rdx,%rdx), %rsi
    000001a0: 	movswl	(%rdi,%rdx,2), %edx
    000001a4: 	movl	%edx, %r9d
    000001a7: 	imull	$0x6667, %edx, %edx
    000001ad: 	sarw	$0xf, %r9w
    000001b2: 	sarl	$0x11, %edx
    000001b5: 	subl	%r9d, %edx
    000001b8: 	addl	%edx, %r8d
    000001bb: 	leal	0x1(%rax), %edx
    000001be: 	cmpl	%edx, %ecx
    000001c0: 	jle	.Ltmp564 # Offset: 448
    000001c6: 	movswl	0x2(%rdi,%rsi), %edx
    000001cb: 	movl	%edx, %r9d
    000001ce: 	imull	$0x6667, %edx, %edx
    000001d4: 	sarw	$0xf, %r9w
    000001d9: 	sarl	$0x11, %edx
    000001dc: 	subl	%r9d, %edx
    000001df: 	addl	%edx, %r8d
    000001e2: 	leal	0x2(%rax), %edx
    000001e5: 	cmpl	%edx, %ecx
    000001e7: 	jle	.Ltmp564 # Offset: 487
    000001ed: 	movswl	0x4(%rdi,%rsi), %edx
    000001f2: 	movl	%edx, %r9d
    000001f5: 	imull	$0x6667, %edx, %edx
    000001fb: 	sarw	$0xf, %r9w
    00000200: 	sarl	$0x11, %edx
    00000203: 	subl	%r9d, %edx
    00000206: 	addl	%edx, %r8d
    00000209: 	leal	0x3(%rax), %edx
    0000020c: 	cmpl	%edx, %ecx
    0000020e: 	jle	.Ltmp564 # Offset: 526
    00000214: 	movswl	0x6(%rdi,%rsi), %edx
    00000219: 	movl	%edx, %r9d
    0000021c: 	imull	$0x6667, %edx, %edx
    00000222: 	sarw	$0xf, %r9w
    00000227: 	sarl	$0x11, %edx
    0000022a: 	subl	%r9d, %edx
    0000022d: 	addl	%edx, %r8d
    00000230: 	leal	0x4(%rax), %edx
    00000233: 	cmpl	%edx, %ecx
    00000235: 	jle	.Ltmp564 # Offset: 565
    0000023b: 	movswl	0x8(%rdi,%rsi), %edx
    00000240: 	movl	%edx, %r9d
    00000243: 	imull	$0x6667, %edx, %edx
    00000249: 	sarw	$0xf, %r9w
    0000024e: 	sarl	$0x11, %edx
    00000251: 	subl	%r9d, %edx
    00000254: 	addl	%edx, %r8d
    00000257: 	leal	0x5(%rax), %edx
    0000025a: 	cmpl	%edx, %ecx
    0000025c: 	jle	.Ltmp564 # Offset: 604
    00000262: 	movswl	0xa(%rdi,%rsi), %edx
    00000267: 	addl	$0x6, %eax
    0000026a: 	movl	%edx, %r9d
    0000026d: 	imull	$0x6667, %edx, %edx
    00000273: 	sarw	$0xf, %r9w
    00000278: 	sarl	$0x11, %edx
    0000027b: 	subl	%r9d, %edx
    0000027e: 	addl	%edx, %r8d
    00000281: 	cmpl	%eax, %ecx
    00000283: 	jle	.Ltmp564 # Offset: 643
    00000289: 	movswl	0xc(%rdi,%rsi), %eax
    0000028e: 	movl	%eax, %edx
    00000290: 	imull	$0x6667, %eax, %eax
    00000296: 	sarw	$0xf, %dx
    0000029a: 	sarl	$0x11, %eax
    0000029d: 	subl	%edx, %eax
    0000029f: 	addl	%eax, %r8d
    000002a2: 	jmp	.Ltmp564 # Offset: 674
    000002a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp559:
    000002b0: 	xorl	%eax, %eax
    000002b2: 	jmp	.Ltmp565 # Offset: 690
.Ltmp563:
    000002b7: 	testl	%ecx, %ecx
    000002b9: 	movl	$0x1, %esi
    000002be: 	cmovgl	%ecx, %esi
    000002c1: 	jmp	.Ltmp566 # Offset: 705
.Ltmp561:
    000002c6: 	xorl	%eax, %eax
    000002c8: 	jmp	.Ltmp567 # Offset: 712
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_goto_loop_param3IsET_PKS0_iS0_"

Binary Function "_Z20test_for_loop_globalIsET_PKS0_iS0_" after disassembly {
  Number      : 102
  State       : disassembled
  Address     : 0x8d10
  Size        : 0x399
  MaxSize     : 0x3a0
  Offset      : 0x8d10
  Section     : .text
  Orc Section : .local.text._Z20test_for_loop_globalIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0101:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edx
    00000009: 	testl	%esi, %esi
    0000000b: 	jle	.Ltmp568 # Offset: 11
    00000011: 	cvttsd2si	init_value(%rip), %eax
    00000019: 	testw	%ax, %ax
    0000001c: 	leal	-0x1(%rsi), %eax
    0000001f: 	js	.Ltmp569 # Offset: 31
    00000025: 	cmpl	$0x6, %eax
    00000028: 	jbe	.Ltmp570 # Offset: 40
    0000002e: 	shrl	$0x3, %esi
    00000031: 	movq	%rdi, %rax
    00000034: 	pxor	%xmm0, %xmm0
    00000038: 	subl	$0x1, %esi
    0000003b: 	shlq	$0x4, %rsi
    0000003f: 	leaq	0x10(%rdi,%rsi), %rsi
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp571:
    00000048: 	movdqu	(%rax), %xmm7
    0000004c: 	addq	$0x10, %rax
    00000050: 	paddw	%xmm7, %xmm0
    00000054: 	cmpq	%rsi, %rax
    00000057: 	jne	.Ltmp571 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	movl	%edx, %esi
    0000005f: 	psrldq	$0x8, %xmm1
    00000064: 	andl	$-0x8, %esi
    00000067: 	paddw	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	psrldq	$0x4, %xmm1
    00000074: 	paddw	%xmm1, %xmm0
    00000078: 	movdqa	%xmm0, %xmm1
    0000007c: 	psrldq	$0x2, %xmm1
    00000081: 	paddw	%xmm1, %xmm0
    00000085: 	pextrw	$0x0, %xmm0, %eax
    0000008a: 	testb	$0x7, %dl
    0000008d: 	je	.Ltmp572 # Offset: 141
.Ltmp577:
    00000093: 	movslq	%esi, %r8
    00000096: 	leaq	(%r8,%r8), %rdi
    0000009a: 	addw	(%rcx,%r8,2), %ax
    0000009f: 	leal	0x1(%rsi), %r8d
    000000a3: 	cmpl	%r8d, %edx
    000000a6: 	jle	.Ltmp573 # Offset: 166
    000000a8: 	leal	0x2(%rsi), %r8d
    000000ac: 	addw	0x2(%rcx,%rdi), %ax
    000000b1: 	cmpl	%edx, %r8d
    000000b4: 	jge	.Ltmp573 # Offset: 180
    000000b6: 	leal	0x3(%rsi), %r8d
    000000ba: 	addw	0x4(%rcx,%rdi), %ax
    000000bf: 	cmpl	%edx, %r8d
    000000c2: 	jge	.Ltmp573 # Offset: 194
    000000c4: 	leal	0x4(%rsi), %r8d
    000000c8: 	addw	0x6(%rcx,%rdi), %ax
    000000cd: 	cmpl	%r8d, %edx
    000000d0: 	jle	.Ltmp573 # Offset: 208
    000000d2: 	leal	0x5(%rsi), %r8d
    000000d6: 	addw	0x8(%rcx,%rdi), %ax
    000000db: 	cmpl	%r8d, %edx
    000000de: 	jle	.Ltmp573 # Offset: 222
    000000e0: 	addl	$0x6, %esi
    000000e3: 	addw	0xa(%rcx,%rdi), %ax
    000000e8: 	cmpl	%esi, %edx
    000000ea: 	jle	.Ltmp573 # Offset: 234
    000000ec: 	addw	0xc(%rcx,%rdi), %ax
    000000f1: 	retq # Offset: 241
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp568:
    000000f8: 	xorl	%eax, %eax
.Ltmp573:
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp569:
    00000100: 	cmpl	$0x6, %eax
    00000103: 	jbe	.Ltmp574 # Offset: 259
    00000109: 	shrl	$0x3, %esi
    0000010c: 	movdqa	DATAat0x38880(%rip), %xmm6
    00000114: 	movq	%rdi, %rax
    00000117: 	pxor	%xmm3, %xmm3
    0000011b: 	subl	$0x1, %esi
    0000011e: 	movdqa	DATAat0x38890(%rip), %xmm5
    00000126: 	shlq	$0x4, %rsi
    0000012a: 	leaq	0x10(%rdi,%rsi), %rsi
    0000012f: 	nop # Size: 1
.Ltmp575:
    00000130: 	movdqu	(%rax), %xmm1
    00000134: 	addq	$0x10, %rax
    00000138: 	movdqa	%xmm1, %xmm0
    0000013c: 	movdqa	%xmm1, %xmm2
    00000140: 	movdqa	%xmm1, %xmm4
    00000144: 	pmulhw	%xmm6, %xmm0
    00000148: 	pmulhw	%xmm5, %xmm2
    0000014c: 	paddw	%xmm1, %xmm3
    00000150: 	psraw	$0xf, %xmm4
    00000155: 	paddw	%xmm1, %xmm0
    00000159: 	psraw	$0x1, %xmm2
    0000015e: 	psraw	$0x6, %xmm0
    00000163: 	psubw	%xmm4, %xmm2
    00000167: 	psubw	%xmm4, %xmm0
    0000016b: 	paddw	%xmm2, %xmm0
    0000016f: 	paddw	%xmm0, %xmm3
    00000173: 	cmpq	%rsi, %rax
    00000176: 	jne	.Ltmp575 # Offset: 374
    00000178: 	movdqa	%xmm3, %xmm0
    0000017c: 	movl	%edx, %r8d
    0000017f: 	psrldq	$0x8, %xmm0
    00000184: 	andl	$-0x8, %r8d
    00000188: 	paddw	%xmm0, %xmm3
    0000018c: 	movdqa	%xmm3, %xmm0
    00000190: 	psrldq	$0x4, %xmm0
    00000195: 	paddw	%xmm0, %xmm3
    00000199: 	movdqa	%xmm3, %xmm0
    0000019d: 	psrldq	$0x2, %xmm0
    000001a2: 	paddw	%xmm0, %xmm3
    000001a6: 	pextrw	$0x0, %xmm3, %eax
    000001ab: 	testb	$0x7, %dl
    000001ae: 	je	.Ltmp576 # Offset: 430
.Ltmp578:
    000001b4: 	movslq	%r8d, %rsi
    000001b7: 	movswl	(%rcx,%rsi,2), %edi
    000001bb: 	leaq	(%rsi,%rsi), %r10
    000001bf: 	imull	$0xffff8889, %edi, %esi
    000001c5: 	movl	%edi, %r9d
    000001c8: 	movl	%edi, %r11d
    000001cb: 	sarw	$0xf, %r11w
    000001d0: 	addl	%eax, %r9d
    000001d3: 	shrl	$0x10, %esi
    000001d6: 	addl	%edi, %esi
    000001d8: 	imull	$0x6667, %edi, %edi
    000001de: 	sarw	$0x6, %si
    000001e2: 	subl	%r11d, %esi
    000001e5: 	sarl	$0x11, %edi
    000001e8: 	movswl	%si, %esi
    000001eb: 	subl	%r11d, %edi
    000001ee: 	movswl	%di, %edi
    000001f1: 	addl	%edi, %esi
    000001f3: 	leal	(%r9,%rsi), %eax
    000001f7: 	leal	0x1(%r8), %esi
    000001fb: 	cmpl	%esi, %edx
    000001fd: 	jle	.Ltmp573 # Offset: 509
    00000203: 	movswl	0x2(%rcx,%r10), %edi
    00000209: 	imull	$0xffff8889, %edi, %esi
    0000020f: 	movl	%edi, %r9d
    00000212: 	movl	%edi, %r11d
    00000215: 	sarw	$0xf, %r11w
    0000021a: 	shrl	$0x10, %esi
    0000021d: 	addl	%edi, %esi
    0000021f: 	imull	$0x6667, %edi, %edi
    00000225: 	sarw	$0x6, %si
    00000229: 	subl	%r11d, %esi
    0000022c: 	sarl	$0x11, %edi
    0000022f: 	addl	%eax, %esi
    00000231: 	subl	%r11d, %edi
    00000234: 	addl	%esi, %edi
    00000236: 	leal	0x2(%r8), %esi
    0000023a: 	leal	(%rdi,%r9), %eax
    0000023e: 	cmpl	%esi, %edx
    00000240: 	jle	.Ltmp573 # Offset: 576
    00000246: 	movswl	0x4(%rcx,%r10), %esi
    0000024c: 	imull	$0xffff8889, %esi, %edi
    00000252: 	movl	%esi, %r9d
    00000255: 	movl	%esi, %r11d
    00000258: 	sarw	$0xf, %r11w
    0000025d: 	shrl	$0x10, %edi
    00000260: 	addl	%esi, %edi
    00000262: 	imull	$0x6667, %esi, %esi
    00000268: 	sarw	$0x6, %di
    0000026c: 	subl	%r11d, %edi
    0000026f: 	sarl	$0x11, %esi
    00000272: 	addl	%edi, %r9d
    00000275: 	subl	%r11d, %esi
    00000278: 	addl	%r9d, %esi
    0000027b: 	addl	%esi, %eax
    0000027d: 	leal	0x3(%r8), %esi
    00000281: 	cmpl	%esi, %edx
    00000283: 	jle	.Ltmp573 # Offset: 643
    00000289: 	movswl	0x6(%rcx,%r10), %esi
    0000028f: 	imull	$0xffff8889, %esi, %edi
    00000295: 	movl	%esi, %r9d
    00000298: 	movl	%esi, %r11d
    0000029b: 	sarw	$0xf, %r11w
    000002a0: 	shrl	$0x10, %edi
    000002a3: 	addl	%esi, %edi
    000002a5: 	imull	$0x6667, %esi, %esi
    000002ab: 	sarw	$0x6, %di
    000002af: 	subl	%r11d, %edi
    000002b2: 	sarl	$0x11, %esi
    000002b5: 	addl	%edi, %r9d
    000002b8: 	subl	%r11d, %esi
    000002bb: 	addl	%r9d, %esi
    000002be: 	addl	%esi, %eax
    000002c0: 	leal	0x4(%r8), %esi
    000002c4: 	cmpl	%esi, %edx
    000002c6: 	jle	.Ltmp573 # Offset: 710
    000002cc: 	movswl	0x8(%rcx,%r10), %esi
    000002d2: 	imull	$0xffff8889, %esi, %edi
    000002d8: 	movl	%esi, %r9d
    000002db: 	movl	%esi, %r11d
    000002de: 	sarw	$0xf, %r11w
    000002e3: 	shrl	$0x10, %edi
    000002e6: 	addl	%esi, %edi
    000002e8: 	imull	$0x6667, %esi, %esi
    000002ee: 	sarw	$0x6, %di
    000002f2: 	subl	%r11d, %edi
    000002f5: 	sarl	$0x11, %esi
    000002f8: 	addl	%edi, %r9d
    000002fb: 	subl	%r11d, %esi
    000002fe: 	addl	%r9d, %esi
    00000301: 	addl	%esi, %eax
    00000303: 	leal	0x5(%r8), %esi
    00000307: 	cmpl	%esi, %edx
    00000309: 	jle	.Ltmp573 # Offset: 777
    0000030f: 	movswl	0xa(%rcx,%r10), %esi
    00000315: 	addl	$0x6, %r8d
    00000319: 	imull	$0xffff8889, %esi, %edi
    0000031f: 	movl	%esi, %r9d
    00000322: 	movl	%esi, %r11d
    00000325: 	sarw	$0xf, %r11w
    0000032a: 	shrl	$0x10, %edi
    0000032d: 	addl	%esi, %edi
    0000032f: 	imull	$0x6667, %esi, %esi
    00000335: 	sarw	$0x6, %di
    00000339: 	subl	%r11d, %edi
    0000033c: 	sarl	$0x11, %esi
    0000033f: 	addl	%edi, %r9d
    00000342: 	subl	%r11d, %esi
    00000345: 	addl	%r9d, %esi
    00000348: 	addl	%esi, %eax
    0000034a: 	cmpl	%r8d, %edx
    0000034d: 	jle	.Ltmp573 # Offset: 845
    00000353: 	movswl	0xc(%rcx,%r10), %edx
    00000359: 	imull	$0xffff8889, %edx, %ecx
    0000035f: 	movl	%edx, %esi
    00000361: 	movl	%edx, %edi
    00000363: 	sarw	$0xf, %di
    00000367: 	shrl	$0x10, %ecx
    0000036a: 	addl	%edx, %ecx
    0000036c: 	imull	$0x6667, %edx, %edx
    00000372: 	sarw	$0x6, %cx
    00000376: 	subl	%edi, %ecx
    00000378: 	sarl	$0x11, %edx
    0000037b: 	addl	%ecx, %esi
    0000037d: 	subl	%edi, %edx
    0000037f: 	addl	%esi, %edx
    00000381: 	addl	%edx, %eax
    00000383: 	retq # Offset: 899
.Ltmp570:
    00000384: 	xorl	%esi, %esi
    00000386: 	xorl	%eax, %eax
    00000388: 	jmp	.Ltmp577 # Offset: 904
.Ltmp572:
    0000038d: 	retq # Offset: 909
.Ltmp576:
    0000038e: 	retq # Offset: 910
.Ltmp574:
    0000038f: 	xorl	%r8d, %r8d
    00000392: 	xorl	%eax, %eax
    00000394: 	jmp	.Ltmp578 # Offset: 916
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_for_loop_globalIsET_PKS0_iS0_"

Binary Function "_Z21test_for_loop_global2IsET_PKS0_iS0_" after disassembly {
  Number      : 103
  State       : disassembled
  Address     : 0x90b0
  Size        : 0x2db
  MaxSize     : 0x2e0
  Offset      : 0x90b0
  Section     : .text
  Orc Section : .local.text._Z21test_for_loop_global2IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0102:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edx
    00000009: 	testl	%esi, %esi
    0000000b: 	jle	.Ltmp579 # Offset: 11
    00000011: 	cvttsd2si	init_value(%rip), %eax
    00000019: 	testw	%ax, %ax
    0000001c: 	leal	-0x1(%rsi), %eax
    0000001f: 	js	.Ltmp580 # Offset: 31
    00000025: 	cmpl	$0x6, %eax
    00000028: 	jbe	.Ltmp581 # Offset: 40
    0000002e: 	shrl	$0x3, %esi
    00000031: 	movq	%rdi, %rax
    00000034: 	pxor	%xmm0, %xmm0
    00000038: 	subl	$0x1, %esi
    0000003b: 	shlq	$0x4, %rsi
    0000003f: 	leaq	0x10(%rdi,%rsi), %rsi
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp582:
    00000048: 	movdqu	(%rax), %xmm5
    0000004c: 	addq	$0x10, %rax
    00000050: 	paddw	%xmm5, %xmm0
    00000054: 	cmpq	%rsi, %rax
    00000057: 	jne	.Ltmp582 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	movl	%edx, %esi
    0000005f: 	psrldq	$0x8, %xmm1
    00000064: 	andl	$-0x8, %esi
    00000067: 	paddw	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	psrldq	$0x4, %xmm1
    00000074: 	paddw	%xmm1, %xmm0
    00000078: 	movdqa	%xmm0, %xmm1
    0000007c: 	psrldq	$0x2, %xmm1
    00000081: 	paddw	%xmm1, %xmm0
    00000085: 	pextrw	$0x0, %xmm0, %eax
    0000008a: 	testb	$0x7, %dl
    0000008d: 	je	.Ltmp583 # Offset: 141
.Ltmp588:
    00000093: 	movslq	%esi, %r8
    00000096: 	leaq	(%r8,%r8), %rdi
    0000009a: 	addw	(%rcx,%r8,2), %ax
    0000009f: 	leal	0x1(%rsi), %r8d
    000000a3: 	cmpl	%r8d, %edx
    000000a6: 	jle	.Ltmp584 # Offset: 166
    000000a8: 	leal	0x2(%rsi), %r8d
    000000ac: 	addw	0x2(%rcx,%rdi), %ax
    000000b1: 	cmpl	%edx, %r8d
    000000b4: 	jge	.Ltmp584 # Offset: 180
    000000b6: 	leal	0x3(%rsi), %r8d
    000000ba: 	addw	0x4(%rcx,%rdi), %ax
    000000bf: 	cmpl	%r8d, %edx
    000000c2: 	jle	.Ltmp584 # Offset: 194
    000000c4: 	leal	0x4(%rsi), %r8d
    000000c8: 	addw	0x6(%rcx,%rdi), %ax
    000000cd: 	cmpl	%r8d, %edx
    000000d0: 	jle	.Ltmp584 # Offset: 208
    000000d2: 	leal	0x5(%rsi), %r8d
    000000d6: 	addw	0x8(%rcx,%rdi), %ax
    000000db: 	cmpl	%r8d, %edx
    000000de: 	jle	.Ltmp584 # Offset: 222
    000000e0: 	addl	$0x6, %esi
    000000e3: 	addw	0xa(%rcx,%rdi), %ax
    000000e8: 	cmpl	%esi, %edx
    000000ea: 	jle	.Ltmp584 # Offset: 234
    000000ec: 	addw	0xc(%rcx,%rdi), %ax
    000000f1: 	retq # Offset: 241
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp579:
    000000f8: 	xorl	%eax, %eax
.Ltmp584:
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp580:
    00000100: 	cmpl	$0x6, %eax
    00000103: 	jbe	.Ltmp585 # Offset: 259
    00000109: 	shrl	$0x3, %esi
    0000010c: 	movdqa	DATAat0x38890(%rip), %xmm4
    00000114: 	movq	%rdi, %rax
    00000117: 	pxor	%xmm1, %xmm1
    0000011b: 	subl	$0x1, %esi
    0000011e: 	shlq	$0x4, %rsi
    00000122: 	leaq	0x10(%rdi,%rsi), %rsi
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp586:
    00000130: 	movdqu	(%rax), %xmm2
    00000134: 	addq	$0x10, %rax
    00000138: 	movdqa	%xmm2, %xmm0
    0000013c: 	movdqa	%xmm2, %xmm3
    00000140: 	paddw	%xmm2, %xmm1
    00000144: 	pmulhw	%xmm4, %xmm0
    00000148: 	psraw	$0xf, %xmm3
    0000014d: 	psraw	$0x1, %xmm0
    00000152: 	psubw	%xmm3, %xmm0
    00000156: 	paddw	%xmm0, %xmm1
    0000015a: 	cmpq	%rax, %rsi
    0000015d: 	jne	.Ltmp586 # Offset: 349
    0000015f: 	movdqa	%xmm1, %xmm0
    00000163: 	movl	%edx, %edi
    00000165: 	psrldq	$0x8, %xmm0
    0000016a: 	andl	$-0x8, %edi
    0000016d: 	paddw	%xmm0, %xmm1
    00000171: 	movdqa	%xmm1, %xmm0
    00000175: 	psrldq	$0x4, %xmm0
    0000017a: 	paddw	%xmm0, %xmm1
    0000017e: 	movdqa	%xmm1, %xmm0
    00000182: 	psrldq	$0x2, %xmm0
    00000187: 	paddw	%xmm0, %xmm1
    0000018b: 	pextrw	$0x0, %xmm1, %eax
    00000190: 	testb	$0x7, %dl
    00000193: 	je	.Ltmp587 # Offset: 403
.Ltmp589:
    00000199: 	movslq	%edi, %rsi
    0000019c: 	leaq	(%rsi,%rsi), %r8
    000001a0: 	movswl	(%rcx,%rsi,2), %esi
    000001a4: 	movl	%esi, %r9d
    000001a7: 	addl	%esi, %eax
    000001a9: 	imull	$0x6667, %esi, %esi
    000001af: 	sarw	$0xf, %r9w
    000001b4: 	sarl	$0x11, %esi
    000001b7: 	subl	%r9d, %esi
    000001ba: 	addl	%esi, %eax
    000001bc: 	leal	0x1(%rdi), %esi
    000001bf: 	cmpl	%esi, %edx
    000001c1: 	jle	.Ltmp584 # Offset: 449
    000001c7: 	movswl	0x2(%rcx,%r8), %esi
    000001cd: 	movl	%esi, %r9d
    000001d0: 	imull	$0x6667, %esi, %esi
    000001d6: 	movl	%r9d, %r10d
    000001d9: 	sarw	$0xf, %r10w
    000001de: 	sarl	$0x11, %esi
    000001e1: 	subl	%r10d, %esi
    000001e4: 	addl	%eax, %esi
    000001e6: 	leal	(%rsi,%r9), %eax
    000001ea: 	leal	0x2(%rdi), %esi
    000001ed: 	cmpl	%esi, %edx
    000001ef: 	jle	.Ltmp584 # Offset: 495
    000001f5: 	movswl	0x4(%rcx,%r8), %esi
    000001fb: 	movl	%esi, %r9d
    000001fe: 	imull	$0x6667, %esi, %esi
    00000204: 	movl	%r9d, %r10d
    00000207: 	sarw	$0xf, %r10w
    0000020c: 	sarl	$0x11, %esi
    0000020f: 	subl	%r10d, %esi
    00000212: 	addl	%r9d, %esi
    00000215: 	addl	%esi, %eax
    00000217: 	leal	0x3(%rdi), %esi
    0000021a: 	cmpl	%esi, %edx
    0000021c: 	jle	.Ltmp584 # Offset: 540
    00000222: 	movswl	0x6(%rcx,%r8), %esi
    00000228: 	movl	%esi, %r9d
    0000022b: 	imull	$0x6667, %esi, %esi
    00000231: 	movl	%r9d, %r10d
    00000234: 	sarw	$0xf, %r10w
    00000239: 	sarl	$0x11, %esi
    0000023c: 	subl	%r10d, %esi
    0000023f: 	addl	%r9d, %esi
    00000242: 	addl	%esi, %eax
    00000244: 	leal	0x4(%rdi), %esi
    00000247: 	cmpl	%esi, %edx
    00000249: 	jle	.Ltmp584 # Offset: 585
    0000024f: 	movswl	0x8(%rcx,%r8), %esi
    00000255: 	movl	%esi, %r9d
    00000258: 	imull	$0x6667, %esi, %esi
    0000025e: 	movl	%r9d, %r10d
    00000261: 	sarw	$0xf, %r10w
    00000266: 	sarl	$0x11, %esi
    00000269: 	subl	%r10d, %esi
    0000026c: 	addl	%r9d, %esi
    0000026f: 	addl	%esi, %eax
    00000271: 	leal	0x5(%rdi), %esi
    00000274: 	cmpl	%esi, %edx
    00000276: 	jle	.Ltmp584 # Offset: 630
    0000027c: 	movswl	0xa(%rcx,%r8), %esi
    00000282: 	addl	$0x6, %edi
    00000285: 	movl	%esi, %r9d
    00000288: 	imull	$0x6667, %esi, %esi
    0000028e: 	movl	%r9d, %r10d
    00000291: 	sarw	$0xf, %r10w
    00000296: 	sarl	$0x11, %esi
    00000299: 	subl	%r10d, %esi
    0000029c: 	addl	%r9d, %esi
    0000029f: 	addl	%esi, %eax
    000002a1: 	cmpl	%edi, %edx
    000002a3: 	jle	.Ltmp584 # Offset: 675
    000002a9: 	movswl	0xc(%rcx,%r8), %edx
    000002af: 	movl	%edx, %ecx
    000002b1: 	imull	$0x6667, %edx, %edx
    000002b7: 	movl	%ecx, %esi
    000002b9: 	sarw	$0xf, %si
    000002bd: 	sarl	$0x11, %edx
    000002c0: 	subl	%esi, %edx
    000002c2: 	addl	%ecx, %edx
    000002c4: 	addl	%edx, %eax
    000002c6: 	retq # Offset: 710
.Ltmp581:
    000002c7: 	xorl	%esi, %esi
    000002c9: 	xorl	%eax, %eax
    000002cb: 	jmp	.Ltmp588 # Offset: 715
.Ltmp583:
    000002d0: 	retq # Offset: 720
.Ltmp587:
    000002d1: 	retq # Offset: 721
.Ltmp585:
    000002d2: 	xorl	%edi, %edi
    000002d4: 	xorl	%eax, %eax
    000002d6: 	jmp	.Ltmp589 # Offset: 726
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_for_loop_global2IsET_PKS0_iS0_"

Binary Function "_Z21test_for_loop_global3IsET_PKS0_iS0_" after disassembly {
  Number      : 104
  State       : disassembled
  Address     : 0x9390
  Size        : 0x2cf
  MaxSize     : 0x2d0
  Offset      : 0x9390
  Section     : .text
  Orc Section : .local.text._Z21test_for_loop_global3IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0103:
    00000000: 	endbr64
    00000004: 	cvttsd2si	init_value(%rip), %eax
    0000000c: 	movq	%rdi, %rcx
    0000000f: 	movl	%esi, %edx
    00000011: 	testw	%ax, %ax
    00000014: 	js	.Ltmp590 # Offset: 20
    0000001a: 	xorl	%r8d, %r8d
    0000001d: 	testl	%esi, %esi
    0000001f: 	jle	.Ltmp591 # Offset: 31
.Ltmp598:
    00000025: 	testl	%edx, %edx
    00000027: 	movl	$0x1, %edi
    0000002c: 	cmovgl	%edx, %edi
    0000002f: 	cmpl	$0x7, %edx
    00000032: 	jle	.Ltmp592 # Offset: 50
    00000038: 	leaq	0x10(%rcx), %r9
.Ltmp600:
    0000003c: 	movl	%edi, %esi
    0000003e: 	movq	%rcx, %rax
    00000041: 	pxor	%xmm0, %xmm0
    00000045: 	shrl	$0x3, %esi
    00000048: 	subl	$0x1, %esi
    0000004b: 	shlq	$0x4, %rsi
    0000004f: 	addq	%r9, %rsi
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp593:
    00000058: 	movdqu	(%rax), %xmm4
    0000005c: 	addq	$0x10, %rax
    00000060: 	paddw	%xmm4, %xmm0
    00000064: 	cmpq	%rsi, %rax
    00000067: 	jne	.Ltmp593 # Offset: 103
    00000069: 	movdqa	%xmm0, %xmm1
    0000006d: 	psrldq	$0x8, %xmm1
    00000072: 	paddw	%xmm1, %xmm0
    00000076: 	movdqa	%xmm0, %xmm1
    0000007a: 	psrldq	$0x4, %xmm1
    0000007f: 	paddw	%xmm1, %xmm0
    00000083: 	movdqa	%xmm0, %xmm1
    00000087: 	psrldq	$0x2, %xmm1
    0000008c: 	paddw	%xmm1, %xmm0
    00000090: 	pextrw	$0x0, %xmm0, %eax
    00000095: 	addl	%eax, %r8d
    00000098: 	movl	%edi, %eax
    0000009a: 	andl	$-0x8, %eax
    0000009d: 	andl	$0x7, %edi
    000000a0: 	je	.Ltmp591 # Offset: 160
.Ltmp599:
    000000a2: 	movslq	%eax, %rdi
    000000a5: 	leaq	(%rdi,%rdi), %rsi
    000000a9: 	addw	(%rcx,%rdi,2), %r8w
    000000ae: 	leal	0x1(%rax), %edi
    000000b1: 	cmpl	%edi, %edx
    000000b3: 	jle	.Ltmp591 # Offset: 179
    000000b5: 	leal	0x2(%rax), %edi
    000000b8: 	addw	0x2(%rcx,%rsi), %r8w
    000000be: 	cmpl	%edx, %edi
    000000c0: 	jge	.Ltmp591 # Offset: 192
    000000c2: 	leal	0x3(%rax), %edi
    000000c5: 	addw	0x4(%rcx,%rsi), %r8w
    000000cb: 	cmpl	%edi, %edx
    000000cd: 	jle	.Ltmp591 # Offset: 205
    000000cf: 	leal	0x4(%rax), %edi
    000000d2: 	addw	0x6(%rcx,%rsi), %r8w
    000000d8: 	cmpl	%edi, %edx
    000000da: 	jle	.Ltmp591 # Offset: 218
    000000dc: 	leal	0x5(%rax), %edi
    000000df: 	addw	0x8(%rcx,%rsi), %r8w
    000000e5: 	cmpl	%edi, %edx
    000000e7: 	jle	.Ltmp591 # Offset: 231
    000000e9: 	addl	$0x6, %eax
    000000ec: 	addw	0xa(%rcx,%rsi), %r8w
    000000f2: 	cmpl	%eax, %edx
    000000f4: 	jle	.Ltmp591 # Offset: 244
    000000f6: 	addw	0xc(%rcx,%rsi), %r8w
.Ltmp591:
    000000fc: 	movl	%r8d, %eax
    000000ff: 	retq # Offset: 255
.Ltmp590:
    00000100: 	testl	%esi, %esi
    00000102: 	jle	.Ltmp594 # Offset: 258
    00000108: 	leal	-0x1(%rsi), %eax
    0000010b: 	cmpl	$0x6, %eax
    0000010e: 	jbe	.Ltmp595 # Offset: 270
    00000114: 	shrl	$0x3, %esi
    00000117: 	leaq	0x10(%rdi), %r9
    0000011b: 	pxor	%xmm2, %xmm2
    0000011f: 	movq	%rdi, %rax
    00000122: 	subl	$0x1, %esi
    00000125: 	movdqa	DATAat0x38890(%rip), %xmm3
    0000012d: 	shlq	$0x4, %rsi
    00000131: 	addq	%r9, %rsi
    00000134: 	nopl	(%rax) # Size: 4
.Ltmp596:
    00000138: 	movdqu	(%rax), %xmm0
    0000013c: 	movdqu	(%rax), %xmm1
    00000140: 	addq	$0x10, %rax
    00000144: 	pmulhw	%xmm3, %xmm0
    00000148: 	psraw	$0xf, %xmm1
    0000014d: 	psraw	$0x1, %xmm0
    00000152: 	psubw	%xmm1, %xmm0
    00000156: 	paddw	%xmm0, %xmm2
    0000015a: 	cmpq	%rax, %rsi
    0000015d: 	jne	.Ltmp596 # Offset: 349
    0000015f: 	movdqa	%xmm2, %xmm0
    00000163: 	movl	%edx, %eax
    00000165: 	psrldq	$0x8, %xmm0
    0000016a: 	andl	$-0x8, %eax
    0000016d: 	paddw	%xmm0, %xmm2
    00000171: 	movdqa	%xmm2, %xmm0
    00000175: 	psrldq	$0x4, %xmm0
    0000017a: 	paddw	%xmm0, %xmm2
    0000017e: 	movdqa	%xmm2, %xmm0
    00000182: 	psrldq	$0x2, %xmm0
    00000187: 	paddw	%xmm0, %xmm2
    0000018b: 	pextrw	$0x0, %xmm2, %r8d
    00000191: 	cmpl	%eax, %edx
    00000193: 	je	.Ltmp597 # Offset: 403
.Ltmp601:
    00000199: 	movslq	%eax, %rsi
    0000019c: 	leaq	(%rsi,%rsi), %rdi
    000001a0: 	movswl	(%rcx,%rsi,2), %esi
    000001a4: 	movl	%esi, %r9d
    000001a7: 	imull	$0x6667, %esi, %esi
    000001ad: 	sarw	$0xf, %r9w
    000001b2: 	sarl	$0x11, %esi
    000001b5: 	subl	%r9d, %esi
    000001b8: 	addl	%esi, %r8d
    000001bb: 	leal	0x1(%rax), %esi
    000001be: 	cmpl	%esi, %edx
    000001c0: 	jle	.Ltmp598 # Offset: 448
    000001c6: 	movswl	0x2(%rcx,%rdi), %esi
    000001cb: 	movl	%esi, %r9d
    000001ce: 	imull	$0x6667, %esi, %esi
    000001d4: 	sarw	$0xf, %r9w
    000001d9: 	sarl	$0x11, %esi
    000001dc: 	subl	%r9d, %esi
    000001df: 	addl	%esi, %r8d
    000001e2: 	leal	0x2(%rax), %esi
    000001e5: 	cmpl	%esi, %edx
    000001e7: 	jle	.Ltmp598 # Offset: 487
    000001ed: 	movswl	0x4(%rcx,%rdi), %esi
    000001f2: 	movl	%esi, %r9d
    000001f5: 	imull	$0x6667, %esi, %esi
    000001fb: 	sarw	$0xf, %r9w
    00000200: 	sarl	$0x11, %esi
    00000203: 	subl	%r9d, %esi
    00000206: 	addl	%esi, %r8d
    00000209: 	leal	0x3(%rax), %esi
    0000020c: 	cmpl	%esi, %edx
    0000020e: 	jle	.Ltmp598 # Offset: 526
    00000214: 	movswl	0x6(%rcx,%rdi), %esi
    00000219: 	movl	%esi, %r9d
    0000021c: 	imull	$0x6667, %esi, %esi
    00000222: 	sarw	$0xf, %r9w
    00000227: 	sarl	$0x11, %esi
    0000022a: 	subl	%r9d, %esi
    0000022d: 	addl	%esi, %r8d
    00000230: 	leal	0x4(%rax), %esi
    00000233: 	cmpl	%esi, %edx
    00000235: 	jle	.Ltmp598 # Offset: 565
    0000023b: 	movswl	0x8(%rcx,%rdi), %esi
    00000240: 	movl	%esi, %r9d
    00000243: 	imull	$0x6667, %esi, %esi
    00000249: 	sarw	$0xf, %r9w
    0000024e: 	sarl	$0x11, %esi
    00000251: 	subl	%r9d, %esi
    00000254: 	addl	%esi, %r8d
    00000257: 	leal	0x5(%rax), %esi
    0000025a: 	cmpl	%esi, %edx
    0000025c: 	jle	.Ltmp598 # Offset: 604
    00000262: 	movswl	0xa(%rcx,%rdi), %esi
    00000267: 	addl	$0x6, %eax
    0000026a: 	movl	%esi, %r9d
    0000026d: 	imull	$0x6667, %esi, %esi
    00000273: 	sarw	$0xf, %r9w
    00000278: 	sarl	$0x11, %esi
    0000027b: 	subl	%r9d, %esi
    0000027e: 	addl	%esi, %r8d
    00000281: 	cmpl	%eax, %edx
    00000283: 	jle	.Ltmp598 # Offset: 643
    00000289: 	movswl	0xc(%rcx,%rdi), %eax
    0000028e: 	movl	%eax, %esi
    00000290: 	imull	$0x6667, %eax, %eax
    00000296: 	sarw	$0xf, %si
    0000029a: 	sarl	$0x11, %eax
    0000029d: 	subl	%esi, %eax
    0000029f: 	addl	%eax, %r8d
    000002a2: 	jmp	.Ltmp598 # Offset: 674
.Ltmp592:
    000002a7: 	xorl	%eax, %eax
    000002a9: 	jmp	.Ltmp599 # Offset: 681
.Ltmp594:
    000002ae: 	xorl	%r8d, %r8d
    000002b1: 	jmp	.Ltmp591 # Offset: 689
.Ltmp597:
    000002b6: 	testl	%edx, %edx
    000002b8: 	movl	$0x1, %edi
    000002bd: 	cmovgl	%edx, %edi
    000002c0: 	jmp	.Ltmp600 # Offset: 704
.Ltmp595:
    000002c5: 	xorl	%eax, %eax
    000002c7: 	xorl	%r8d, %r8d
    000002ca: 	jmp	.Ltmp601 # Offset: 714
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_for_loop_global3IsET_PKS0_iS0_"

Binary Function "_Z22test_while_loop_globalIsET_PKS0_iS0_" after disassembly {
  Number      : 105
  State       : disassembled
  Address     : 0x9660
  Size        : 0x399
  MaxSize     : 0x3a0
  Offset      : 0x9660
  Section     : .text
  Orc Section : .local.text._Z22test_while_loop_globalIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0104:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edx
    00000009: 	testl	%esi, %esi
    0000000b: 	jle	.Ltmp602 # Offset: 11
    00000011: 	cvttsd2si	init_value(%rip), %eax
    00000019: 	testw	%ax, %ax
    0000001c: 	leal	-0x1(%rsi), %eax
    0000001f: 	js	.Ltmp603 # Offset: 31
    00000025: 	cmpl	$0x6, %eax
    00000028: 	jbe	.Ltmp604 # Offset: 40
    0000002e: 	shrl	$0x3, %esi
    00000031: 	movq	%rdi, %rax
    00000034: 	pxor	%xmm0, %xmm0
    00000038: 	subl	$0x1, %esi
    0000003b: 	shlq	$0x4, %rsi
    0000003f: 	leaq	0x10(%rdi,%rsi), %rsi
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp605:
    00000048: 	movdqu	(%rax), %xmm7
    0000004c: 	addq	$0x10, %rax
    00000050: 	paddw	%xmm7, %xmm0
    00000054: 	cmpq	%rsi, %rax
    00000057: 	jne	.Ltmp605 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	movl	%edx, %esi
    0000005f: 	psrldq	$0x8, %xmm1
    00000064: 	andl	$-0x8, %esi
    00000067: 	paddw	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	psrldq	$0x4, %xmm1
    00000074: 	paddw	%xmm1, %xmm0
    00000078: 	movdqa	%xmm0, %xmm1
    0000007c: 	psrldq	$0x2, %xmm1
    00000081: 	paddw	%xmm1, %xmm0
    00000085: 	pextrw	$0x0, %xmm0, %eax
    0000008a: 	testb	$0x7, %dl
    0000008d: 	je	.Ltmp606 # Offset: 141
.Ltmp611:
    00000093: 	movslq	%esi, %r8
    00000096: 	leaq	(%r8,%r8), %rdi
    0000009a: 	addw	(%rcx,%r8,2), %ax
    0000009f: 	leal	0x1(%rsi), %r8d
    000000a3: 	cmpl	%r8d, %edx
    000000a6: 	jle	.Ltmp607 # Offset: 166
    000000a8: 	leal	0x2(%rsi), %r8d
    000000ac: 	addw	0x2(%rcx,%rdi), %ax
    000000b1: 	cmpl	%edx, %r8d
    000000b4: 	jge	.Ltmp607 # Offset: 180
    000000b6: 	leal	0x3(%rsi), %r8d
    000000ba: 	addw	0x4(%rcx,%rdi), %ax
    000000bf: 	cmpl	%edx, %r8d
    000000c2: 	jge	.Ltmp607 # Offset: 194
    000000c4: 	leal	0x4(%rsi), %r8d
    000000c8: 	addw	0x6(%rcx,%rdi), %ax
    000000cd: 	cmpl	%r8d, %edx
    000000d0: 	jle	.Ltmp607 # Offset: 208
    000000d2: 	leal	0x5(%rsi), %r8d
    000000d6: 	addw	0x8(%rcx,%rdi), %ax
    000000db: 	cmpl	%r8d, %edx
    000000de: 	jle	.Ltmp607 # Offset: 222
    000000e0: 	addl	$0x6, %esi
    000000e3: 	addw	0xa(%rcx,%rdi), %ax
    000000e8: 	cmpl	%esi, %edx
    000000ea: 	jle	.Ltmp607 # Offset: 234
    000000ec: 	addw	0xc(%rcx,%rdi), %ax
    000000f1: 	retq # Offset: 241
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp602:
    000000f8: 	xorl	%eax, %eax
.Ltmp607:
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp603:
    00000100: 	cmpl	$0x6, %eax
    00000103: 	jbe	.Ltmp608 # Offset: 259
    00000109: 	shrl	$0x3, %esi
    0000010c: 	movdqa	DATAat0x38880(%rip), %xmm6
    00000114: 	movq	%rdi, %rax
    00000117: 	pxor	%xmm3, %xmm3
    0000011b: 	subl	$0x1, %esi
    0000011e: 	movdqa	DATAat0x38890(%rip), %xmm5
    00000126: 	shlq	$0x4, %rsi
    0000012a: 	leaq	0x10(%rdi,%rsi), %rsi
    0000012f: 	nop # Size: 1
.Ltmp609:
    00000130: 	movdqu	(%rax), %xmm1
    00000134: 	addq	$0x10, %rax
    00000138: 	movdqa	%xmm1, %xmm0
    0000013c: 	movdqa	%xmm1, %xmm2
    00000140: 	movdqa	%xmm1, %xmm4
    00000144: 	pmulhw	%xmm6, %xmm0
    00000148: 	pmulhw	%xmm5, %xmm2
    0000014c: 	paddw	%xmm1, %xmm3
    00000150: 	psraw	$0xf, %xmm4
    00000155: 	paddw	%xmm1, %xmm0
    00000159: 	psraw	$0x1, %xmm2
    0000015e: 	psraw	$0x6, %xmm0
    00000163: 	psubw	%xmm4, %xmm2
    00000167: 	psubw	%xmm4, %xmm0
    0000016b: 	paddw	%xmm2, %xmm0
    0000016f: 	paddw	%xmm0, %xmm3
    00000173: 	cmpq	%rsi, %rax
    00000176: 	jne	.Ltmp609 # Offset: 374
    00000178: 	movdqa	%xmm3, %xmm0
    0000017c: 	movl	%edx, %r8d
    0000017f: 	psrldq	$0x8, %xmm0
    00000184: 	andl	$-0x8, %r8d
    00000188: 	paddw	%xmm0, %xmm3
    0000018c: 	movdqa	%xmm3, %xmm0
    00000190: 	psrldq	$0x4, %xmm0
    00000195: 	paddw	%xmm0, %xmm3
    00000199: 	movdqa	%xmm3, %xmm0
    0000019d: 	psrldq	$0x2, %xmm0
    000001a2: 	paddw	%xmm0, %xmm3
    000001a6: 	pextrw	$0x0, %xmm3, %eax
    000001ab: 	testb	$0x7, %dl
    000001ae: 	je	.Ltmp610 # Offset: 430
.Ltmp612:
    000001b4: 	movslq	%r8d, %rsi
    000001b7: 	movswl	(%rcx,%rsi,2), %edi
    000001bb: 	leaq	(%rsi,%rsi), %r10
    000001bf: 	imull	$0xffff8889, %edi, %esi
    000001c5: 	movl	%edi, %r9d
    000001c8: 	movl	%edi, %r11d
    000001cb: 	sarw	$0xf, %r11w
    000001d0: 	addl	%eax, %r9d
    000001d3: 	shrl	$0x10, %esi
    000001d6: 	addl	%edi, %esi
    000001d8: 	imull	$0x6667, %edi, %edi
    000001de: 	sarw	$0x6, %si
    000001e2: 	subl	%r11d, %esi
    000001e5: 	sarl	$0x11, %edi
    000001e8: 	movswl	%si, %esi
    000001eb: 	subl	%r11d, %edi
    000001ee: 	movswl	%di, %edi
    000001f1: 	addl	%edi, %esi
    000001f3: 	leal	(%r9,%rsi), %eax
    000001f7: 	leal	0x1(%r8), %esi
    000001fb: 	cmpl	%esi, %edx
    000001fd: 	jle	.Ltmp607 # Offset: 509
    00000203: 	movswl	0x2(%rcx,%r10), %edi
    00000209: 	imull	$0xffff8889, %edi, %esi
    0000020f: 	movl	%edi, %r9d
    00000212: 	movl	%edi, %r11d
    00000215: 	sarw	$0xf, %r11w
    0000021a: 	shrl	$0x10, %esi
    0000021d: 	addl	%edi, %esi
    0000021f: 	imull	$0x6667, %edi, %edi
    00000225: 	sarw	$0x6, %si
    00000229: 	subl	%r11d, %esi
    0000022c: 	sarl	$0x11, %edi
    0000022f: 	addl	%eax, %esi
    00000231: 	subl	%r11d, %edi
    00000234: 	addl	%esi, %edi
    00000236: 	leal	0x2(%r8), %esi
    0000023a: 	leal	(%rdi,%r9), %eax
    0000023e: 	cmpl	%esi, %edx
    00000240: 	jle	.Ltmp607 # Offset: 576
    00000246: 	movswl	0x4(%rcx,%r10), %esi
    0000024c: 	imull	$0xffff8889, %esi, %edi
    00000252: 	movl	%esi, %r9d
    00000255: 	movl	%esi, %r11d
    00000258: 	sarw	$0xf, %r11w
    0000025d: 	shrl	$0x10, %edi
    00000260: 	addl	%esi, %edi
    00000262: 	imull	$0x6667, %esi, %esi
    00000268: 	sarw	$0x6, %di
    0000026c: 	subl	%r11d, %edi
    0000026f: 	sarl	$0x11, %esi
    00000272: 	addl	%edi, %r9d
    00000275: 	subl	%r11d, %esi
    00000278: 	addl	%r9d, %esi
    0000027b: 	addl	%esi, %eax
    0000027d: 	leal	0x3(%r8), %esi
    00000281: 	cmpl	%esi, %edx
    00000283: 	jle	.Ltmp607 # Offset: 643
    00000289: 	movswl	0x6(%rcx,%r10), %esi
    0000028f: 	imull	$0xffff8889, %esi, %edi
    00000295: 	movl	%esi, %r9d
    00000298: 	movl	%esi, %r11d
    0000029b: 	sarw	$0xf, %r11w
    000002a0: 	shrl	$0x10, %edi
    000002a3: 	addl	%esi, %edi
    000002a5: 	imull	$0x6667, %esi, %esi
    000002ab: 	sarw	$0x6, %di
    000002af: 	subl	%r11d, %edi
    000002b2: 	sarl	$0x11, %esi
    000002b5: 	addl	%edi, %r9d
    000002b8: 	subl	%r11d, %esi
    000002bb: 	addl	%r9d, %esi
    000002be: 	addl	%esi, %eax
    000002c0: 	leal	0x4(%r8), %esi
    000002c4: 	cmpl	%esi, %edx
    000002c6: 	jle	.Ltmp607 # Offset: 710
    000002cc: 	movswl	0x8(%rcx,%r10), %esi
    000002d2: 	imull	$0xffff8889, %esi, %edi
    000002d8: 	movl	%esi, %r9d
    000002db: 	movl	%esi, %r11d
    000002de: 	sarw	$0xf, %r11w
    000002e3: 	shrl	$0x10, %edi
    000002e6: 	addl	%esi, %edi
    000002e8: 	imull	$0x6667, %esi, %esi
    000002ee: 	sarw	$0x6, %di
    000002f2: 	subl	%r11d, %edi
    000002f5: 	sarl	$0x11, %esi
    000002f8: 	addl	%edi, %r9d
    000002fb: 	subl	%r11d, %esi
    000002fe: 	addl	%r9d, %esi
    00000301: 	addl	%esi, %eax
    00000303: 	leal	0x5(%r8), %esi
    00000307: 	cmpl	%esi, %edx
    00000309: 	jle	.Ltmp607 # Offset: 777
    0000030f: 	movswl	0xa(%rcx,%r10), %esi
    00000315: 	addl	$0x6, %r8d
    00000319: 	imull	$0xffff8889, %esi, %edi
    0000031f: 	movl	%esi, %r9d
    00000322: 	movl	%esi, %r11d
    00000325: 	sarw	$0xf, %r11w
    0000032a: 	shrl	$0x10, %edi
    0000032d: 	addl	%esi, %edi
    0000032f: 	imull	$0x6667, %esi, %esi
    00000335: 	sarw	$0x6, %di
    00000339: 	subl	%r11d, %edi
    0000033c: 	sarl	$0x11, %esi
    0000033f: 	addl	%edi, %r9d
    00000342: 	subl	%r11d, %esi
    00000345: 	addl	%r9d, %esi
    00000348: 	addl	%esi, %eax
    0000034a: 	cmpl	%r8d, %edx
    0000034d: 	jle	.Ltmp607 # Offset: 845
    00000353: 	movswl	0xc(%rcx,%r10), %edx
    00000359: 	imull	$0xffff8889, %edx, %ecx
    0000035f: 	movl	%edx, %esi
    00000361: 	movl	%edx, %edi
    00000363: 	sarw	$0xf, %di
    00000367: 	shrl	$0x10, %ecx
    0000036a: 	addl	%edx, %ecx
    0000036c: 	imull	$0x6667, %edx, %edx
    00000372: 	sarw	$0x6, %cx
    00000376: 	subl	%edi, %ecx
    00000378: 	sarl	$0x11, %edx
    0000037b: 	addl	%ecx, %esi
    0000037d: 	subl	%edi, %edx
    0000037f: 	addl	%esi, %edx
    00000381: 	addl	%edx, %eax
    00000383: 	retq # Offset: 899
.Ltmp604:
    00000384: 	xorl	%esi, %esi
    00000386: 	xorl	%eax, %eax
    00000388: 	jmp	.Ltmp611 # Offset: 904
.Ltmp606:
    0000038d: 	retq # Offset: 909
.Ltmp610:
    0000038e: 	retq # Offset: 910
.Ltmp608:
    0000038f: 	xorl	%r8d, %r8d
    00000392: 	xorl	%eax, %eax
    00000394: 	jmp	.Ltmp612 # Offset: 916
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_while_loop_globalIsET_PKS0_iS0_"

Binary Function "_Z23test_while_loop_global2IsET_PKS0_iS0_" after disassembly {
  Number      : 106
  State       : disassembled
  Address     : 0x9a00
  Size        : 0x2db
  MaxSize     : 0x2e0
  Offset      : 0x9a00
  Section     : .text
  Orc Section : .local.text._Z23test_while_loop_global2IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0105:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edx
    00000009: 	testl	%esi, %esi
    0000000b: 	jle	.Ltmp613 # Offset: 11
    00000011: 	cvttsd2si	init_value(%rip), %eax
    00000019: 	testw	%ax, %ax
    0000001c: 	leal	-0x1(%rsi), %eax
    0000001f: 	js	.Ltmp614 # Offset: 31
    00000025: 	cmpl	$0x6, %eax
    00000028: 	jbe	.Ltmp615 # Offset: 40
    0000002e: 	shrl	$0x3, %esi
    00000031: 	movq	%rdi, %rax
    00000034: 	pxor	%xmm0, %xmm0
    00000038: 	subl	$0x1, %esi
    0000003b: 	shlq	$0x4, %rsi
    0000003f: 	leaq	0x10(%rdi,%rsi), %rsi
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp616:
    00000048: 	movdqu	(%rax), %xmm5
    0000004c: 	addq	$0x10, %rax
    00000050: 	paddw	%xmm5, %xmm0
    00000054: 	cmpq	%rsi, %rax
    00000057: 	jne	.Ltmp616 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	movl	%edx, %esi
    0000005f: 	psrldq	$0x8, %xmm1
    00000064: 	andl	$-0x8, %esi
    00000067: 	paddw	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	psrldq	$0x4, %xmm1
    00000074: 	paddw	%xmm1, %xmm0
    00000078: 	movdqa	%xmm0, %xmm1
    0000007c: 	psrldq	$0x2, %xmm1
    00000081: 	paddw	%xmm1, %xmm0
    00000085: 	pextrw	$0x0, %xmm0, %eax
    0000008a: 	testb	$0x7, %dl
    0000008d: 	je	.Ltmp617 # Offset: 141
.Ltmp622:
    00000093: 	movslq	%esi, %r8
    00000096: 	leaq	(%r8,%r8), %rdi
    0000009a: 	addw	(%rcx,%r8,2), %ax
    0000009f: 	leal	0x1(%rsi), %r8d
    000000a3: 	cmpl	%r8d, %edx
    000000a6: 	jle	.Ltmp618 # Offset: 166
    000000a8: 	leal	0x2(%rsi), %r8d
    000000ac: 	addw	0x2(%rcx,%rdi), %ax
    000000b1: 	cmpl	%edx, %r8d
    000000b4: 	jge	.Ltmp618 # Offset: 180
    000000b6: 	leal	0x3(%rsi), %r8d
    000000ba: 	addw	0x4(%rcx,%rdi), %ax
    000000bf: 	cmpl	%r8d, %edx
    000000c2: 	jle	.Ltmp618 # Offset: 194
    000000c4: 	leal	0x4(%rsi), %r8d
    000000c8: 	addw	0x6(%rcx,%rdi), %ax
    000000cd: 	cmpl	%r8d, %edx
    000000d0: 	jle	.Ltmp618 # Offset: 208
    000000d2: 	leal	0x5(%rsi), %r8d
    000000d6: 	addw	0x8(%rcx,%rdi), %ax
    000000db: 	cmpl	%r8d, %edx
    000000de: 	jle	.Ltmp618 # Offset: 222
    000000e0: 	addl	$0x6, %esi
    000000e3: 	addw	0xa(%rcx,%rdi), %ax
    000000e8: 	cmpl	%esi, %edx
    000000ea: 	jle	.Ltmp618 # Offset: 234
    000000ec: 	addw	0xc(%rcx,%rdi), %ax
    000000f1: 	retq # Offset: 241
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp613:
    000000f8: 	xorl	%eax, %eax
.Ltmp618:
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp614:
    00000100: 	cmpl	$0x6, %eax
    00000103: 	jbe	.Ltmp619 # Offset: 259
    00000109: 	shrl	$0x3, %esi
    0000010c: 	movdqa	DATAat0x38890(%rip), %xmm4
    00000114: 	movq	%rdi, %rax
    00000117: 	pxor	%xmm1, %xmm1
    0000011b: 	subl	$0x1, %esi
    0000011e: 	shlq	$0x4, %rsi
    00000122: 	leaq	0x10(%rdi,%rsi), %rsi
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp620:
    00000130: 	movdqu	(%rax), %xmm2
    00000134: 	addq	$0x10, %rax
    00000138: 	movdqa	%xmm2, %xmm0
    0000013c: 	movdqa	%xmm2, %xmm3
    00000140: 	paddw	%xmm2, %xmm1
    00000144: 	pmulhw	%xmm4, %xmm0
    00000148: 	psraw	$0xf, %xmm3
    0000014d: 	psraw	$0x1, %xmm0
    00000152: 	psubw	%xmm3, %xmm0
    00000156: 	paddw	%xmm0, %xmm1
    0000015a: 	cmpq	%rax, %rsi
    0000015d: 	jne	.Ltmp620 # Offset: 349
    0000015f: 	movdqa	%xmm1, %xmm0
    00000163: 	movl	%edx, %edi
    00000165: 	psrldq	$0x8, %xmm0
    0000016a: 	andl	$-0x8, %edi
    0000016d: 	paddw	%xmm0, %xmm1
    00000171: 	movdqa	%xmm1, %xmm0
    00000175: 	psrldq	$0x4, %xmm0
    0000017a: 	paddw	%xmm0, %xmm1
    0000017e: 	movdqa	%xmm1, %xmm0
    00000182: 	psrldq	$0x2, %xmm0
    00000187: 	paddw	%xmm0, %xmm1
    0000018b: 	pextrw	$0x0, %xmm1, %eax
    00000190: 	testb	$0x7, %dl
    00000193: 	je	.Ltmp621 # Offset: 403
.Ltmp623:
    00000199: 	movslq	%edi, %rsi
    0000019c: 	leaq	(%rsi,%rsi), %r8
    000001a0: 	movswl	(%rcx,%rsi,2), %esi
    000001a4: 	movl	%esi, %r9d
    000001a7: 	addl	%esi, %eax
    000001a9: 	imull	$0x6667, %esi, %esi
    000001af: 	sarw	$0xf, %r9w
    000001b4: 	sarl	$0x11, %esi
    000001b7: 	subl	%r9d, %esi
    000001ba: 	addl	%esi, %eax
    000001bc: 	leal	0x1(%rdi), %esi
    000001bf: 	cmpl	%esi, %edx
    000001c1: 	jle	.Ltmp618 # Offset: 449
    000001c7: 	movswl	0x2(%rcx,%r8), %esi
    000001cd: 	movl	%esi, %r9d
    000001d0: 	imull	$0x6667, %esi, %esi
    000001d6: 	movl	%r9d, %r10d
    000001d9: 	sarw	$0xf, %r10w
    000001de: 	sarl	$0x11, %esi
    000001e1: 	subl	%r10d, %esi
    000001e4: 	addl	%eax, %esi
    000001e6: 	leal	(%rsi,%r9), %eax
    000001ea: 	leal	0x2(%rdi), %esi
    000001ed: 	cmpl	%esi, %edx
    000001ef: 	jle	.Ltmp618 # Offset: 495
    000001f5: 	movswl	0x4(%rcx,%r8), %esi
    000001fb: 	movl	%esi, %r9d
    000001fe: 	imull	$0x6667, %esi, %esi
    00000204: 	movl	%r9d, %r10d
    00000207: 	sarw	$0xf, %r10w
    0000020c: 	sarl	$0x11, %esi
    0000020f: 	subl	%r10d, %esi
    00000212: 	addl	%r9d, %esi
    00000215: 	addl	%esi, %eax
    00000217: 	leal	0x3(%rdi), %esi
    0000021a: 	cmpl	%esi, %edx
    0000021c: 	jle	.Ltmp618 # Offset: 540
    00000222: 	movswl	0x6(%rcx,%r8), %esi
    00000228: 	movl	%esi, %r9d
    0000022b: 	imull	$0x6667, %esi, %esi
    00000231: 	movl	%r9d, %r10d
    00000234: 	sarw	$0xf, %r10w
    00000239: 	sarl	$0x11, %esi
    0000023c: 	subl	%r10d, %esi
    0000023f: 	addl	%r9d, %esi
    00000242: 	addl	%esi, %eax
    00000244: 	leal	0x4(%rdi), %esi
    00000247: 	cmpl	%esi, %edx
    00000249: 	jle	.Ltmp618 # Offset: 585
    0000024f: 	movswl	0x8(%rcx,%r8), %esi
    00000255: 	movl	%esi, %r9d
    00000258: 	imull	$0x6667, %esi, %esi
    0000025e: 	movl	%r9d, %r10d
    00000261: 	sarw	$0xf, %r10w
    00000266: 	sarl	$0x11, %esi
    00000269: 	subl	%r10d, %esi
    0000026c: 	addl	%r9d, %esi
    0000026f: 	addl	%esi, %eax
    00000271: 	leal	0x5(%rdi), %esi
    00000274: 	cmpl	%esi, %edx
    00000276: 	jle	.Ltmp618 # Offset: 630
    0000027c: 	movswl	0xa(%rcx,%r8), %esi
    00000282: 	addl	$0x6, %edi
    00000285: 	movl	%esi, %r9d
    00000288: 	imull	$0x6667, %esi, %esi
    0000028e: 	movl	%r9d, %r10d
    00000291: 	sarw	$0xf, %r10w
    00000296: 	sarl	$0x11, %esi
    00000299: 	subl	%r10d, %esi
    0000029c: 	addl	%r9d, %esi
    0000029f: 	addl	%esi, %eax
    000002a1: 	cmpl	%edi, %edx
    000002a3: 	jle	.Ltmp618 # Offset: 675
    000002a9: 	movswl	0xc(%rcx,%r8), %edx
    000002af: 	movl	%edx, %ecx
    000002b1: 	imull	$0x6667, %edx, %edx
    000002b7: 	movl	%ecx, %esi
    000002b9: 	sarw	$0xf, %si
    000002bd: 	sarl	$0x11, %edx
    000002c0: 	subl	%esi, %edx
    000002c2: 	addl	%ecx, %edx
    000002c4: 	addl	%edx, %eax
    000002c6: 	retq # Offset: 710
.Ltmp615:
    000002c7: 	xorl	%esi, %esi
    000002c9: 	xorl	%eax, %eax
    000002cb: 	jmp	.Ltmp622 # Offset: 715
.Ltmp617:
    000002d0: 	retq # Offset: 720
.Ltmp621:
    000002d1: 	retq # Offset: 721
.Ltmp619:
    000002d2: 	xorl	%edi, %edi
    000002d4: 	xorl	%eax, %eax
    000002d6: 	jmp	.Ltmp623 # Offset: 726
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_while_loop_global2IsET_PKS0_iS0_"

Binary Function "_Z23test_while_loop_global3IsET_PKS0_iS0_" after disassembly {
  Number      : 107
  State       : disassembled
  Address     : 0x9ce0
  Size        : 0x2cf
  MaxSize     : 0x2d0
  Offset      : 0x9ce0
  Section     : .text
  Orc Section : .local.text._Z23test_while_loop_global3IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0106:
    00000000: 	endbr64
    00000004: 	cvttsd2si	init_value(%rip), %eax
    0000000c: 	movq	%rdi, %rcx
    0000000f: 	movl	%esi, %edx
    00000011: 	testw	%ax, %ax
    00000014: 	js	.Ltmp624 # Offset: 20
    0000001a: 	xorl	%r8d, %r8d
    0000001d: 	testl	%esi, %esi
    0000001f: 	jle	.Ltmp625 # Offset: 31
.Ltmp632:
    00000025: 	testl	%edx, %edx
    00000027: 	movl	$0x1, %edi
    0000002c: 	cmovgl	%edx, %edi
    0000002f: 	cmpl	$0x7, %edx
    00000032: 	jle	.Ltmp626 # Offset: 50
    00000038: 	leaq	0x10(%rcx), %r9
.Ltmp634:
    0000003c: 	movl	%edi, %esi
    0000003e: 	movq	%rcx, %rax
    00000041: 	pxor	%xmm0, %xmm0
    00000045: 	shrl	$0x3, %esi
    00000048: 	subl	$0x1, %esi
    0000004b: 	shlq	$0x4, %rsi
    0000004f: 	addq	%r9, %rsi
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp627:
    00000058: 	movdqu	(%rax), %xmm4
    0000005c: 	addq	$0x10, %rax
    00000060: 	paddw	%xmm4, %xmm0
    00000064: 	cmpq	%rsi, %rax
    00000067: 	jne	.Ltmp627 # Offset: 103
    00000069: 	movdqa	%xmm0, %xmm1
    0000006d: 	psrldq	$0x8, %xmm1
    00000072: 	paddw	%xmm1, %xmm0
    00000076: 	movdqa	%xmm0, %xmm1
    0000007a: 	psrldq	$0x4, %xmm1
    0000007f: 	paddw	%xmm1, %xmm0
    00000083: 	movdqa	%xmm0, %xmm1
    00000087: 	psrldq	$0x2, %xmm1
    0000008c: 	paddw	%xmm1, %xmm0
    00000090: 	pextrw	$0x0, %xmm0, %eax
    00000095: 	addl	%eax, %r8d
    00000098: 	movl	%edi, %eax
    0000009a: 	andl	$-0x8, %eax
    0000009d: 	andl	$0x7, %edi
    000000a0: 	je	.Ltmp625 # Offset: 160
.Ltmp633:
    000000a2: 	movslq	%eax, %rdi
    000000a5: 	leaq	(%rdi,%rdi), %rsi
    000000a9: 	addw	(%rcx,%rdi,2), %r8w
    000000ae: 	leal	0x1(%rax), %edi
    000000b1: 	cmpl	%edi, %edx
    000000b3: 	jle	.Ltmp625 # Offset: 179
    000000b5: 	leal	0x2(%rax), %edi
    000000b8: 	addw	0x2(%rcx,%rsi), %r8w
    000000be: 	cmpl	%edx, %edi
    000000c0: 	jge	.Ltmp625 # Offset: 192
    000000c2: 	leal	0x3(%rax), %edi
    000000c5: 	addw	0x4(%rcx,%rsi), %r8w
    000000cb: 	cmpl	%edi, %edx
    000000cd: 	jle	.Ltmp625 # Offset: 205
    000000cf: 	leal	0x4(%rax), %edi
    000000d2: 	addw	0x6(%rcx,%rsi), %r8w
    000000d8: 	cmpl	%edi, %edx
    000000da: 	jle	.Ltmp625 # Offset: 218
    000000dc: 	leal	0x5(%rax), %edi
    000000df: 	addw	0x8(%rcx,%rsi), %r8w
    000000e5: 	cmpl	%edi, %edx
    000000e7: 	jle	.Ltmp625 # Offset: 231
    000000e9: 	addl	$0x6, %eax
    000000ec: 	addw	0xa(%rcx,%rsi), %r8w
    000000f2: 	cmpl	%eax, %edx
    000000f4: 	jle	.Ltmp625 # Offset: 244
    000000f6: 	addw	0xc(%rcx,%rsi), %r8w
.Ltmp625:
    000000fc: 	movl	%r8d, %eax
    000000ff: 	retq # Offset: 255
.Ltmp624:
    00000100: 	testl	%esi, %esi
    00000102: 	jle	.Ltmp628 # Offset: 258
    00000108: 	leal	-0x1(%rsi), %eax
    0000010b: 	cmpl	$0x6, %eax
    0000010e: 	jbe	.Ltmp629 # Offset: 270
    00000114: 	shrl	$0x3, %esi
    00000117: 	leaq	0x10(%rdi), %r9
    0000011b: 	pxor	%xmm2, %xmm2
    0000011f: 	movq	%rdi, %rax
    00000122: 	subl	$0x1, %esi
    00000125: 	movdqa	DATAat0x38890(%rip), %xmm3
    0000012d: 	shlq	$0x4, %rsi
    00000131: 	addq	%r9, %rsi
    00000134: 	nopl	(%rax) # Size: 4
.Ltmp630:
    00000138: 	movdqu	(%rax), %xmm0
    0000013c: 	movdqu	(%rax), %xmm1
    00000140: 	addq	$0x10, %rax
    00000144: 	pmulhw	%xmm3, %xmm0
    00000148: 	psraw	$0xf, %xmm1
    0000014d: 	psraw	$0x1, %xmm0
    00000152: 	psubw	%xmm1, %xmm0
    00000156: 	paddw	%xmm0, %xmm2
    0000015a: 	cmpq	%rax, %rsi
    0000015d: 	jne	.Ltmp630 # Offset: 349
    0000015f: 	movdqa	%xmm2, %xmm0
    00000163: 	movl	%edx, %eax
    00000165: 	psrldq	$0x8, %xmm0
    0000016a: 	andl	$-0x8, %eax
    0000016d: 	paddw	%xmm0, %xmm2
    00000171: 	movdqa	%xmm2, %xmm0
    00000175: 	psrldq	$0x4, %xmm0
    0000017a: 	paddw	%xmm0, %xmm2
    0000017e: 	movdqa	%xmm2, %xmm0
    00000182: 	psrldq	$0x2, %xmm0
    00000187: 	paddw	%xmm0, %xmm2
    0000018b: 	pextrw	$0x0, %xmm2, %r8d
    00000191: 	cmpl	%eax, %edx
    00000193: 	je	.Ltmp631 # Offset: 403
.Ltmp635:
    00000199: 	movslq	%eax, %rsi
    0000019c: 	leaq	(%rsi,%rsi), %rdi
    000001a0: 	movswl	(%rcx,%rsi,2), %esi
    000001a4: 	movl	%esi, %r9d
    000001a7: 	imull	$0x6667, %esi, %esi
    000001ad: 	sarw	$0xf, %r9w
    000001b2: 	sarl	$0x11, %esi
    000001b5: 	subl	%r9d, %esi
    000001b8: 	addl	%esi, %r8d
    000001bb: 	leal	0x1(%rax), %esi
    000001be: 	cmpl	%esi, %edx
    000001c0: 	jle	.Ltmp632 # Offset: 448
    000001c6: 	movswl	0x2(%rcx,%rdi), %esi
    000001cb: 	movl	%esi, %r9d
    000001ce: 	imull	$0x6667, %esi, %esi
    000001d4: 	sarw	$0xf, %r9w
    000001d9: 	sarl	$0x11, %esi
    000001dc: 	subl	%r9d, %esi
    000001df: 	addl	%esi, %r8d
    000001e2: 	leal	0x2(%rax), %esi
    000001e5: 	cmpl	%esi, %edx
    000001e7: 	jle	.Ltmp632 # Offset: 487
    000001ed: 	movswl	0x4(%rcx,%rdi), %esi
    000001f2: 	movl	%esi, %r9d
    000001f5: 	imull	$0x6667, %esi, %esi
    000001fb: 	sarw	$0xf, %r9w
    00000200: 	sarl	$0x11, %esi
    00000203: 	subl	%r9d, %esi
    00000206: 	addl	%esi, %r8d
    00000209: 	leal	0x3(%rax), %esi
    0000020c: 	cmpl	%esi, %edx
    0000020e: 	jle	.Ltmp632 # Offset: 526
    00000214: 	movswl	0x6(%rcx,%rdi), %esi
    00000219: 	movl	%esi, %r9d
    0000021c: 	imull	$0x6667, %esi, %esi
    00000222: 	sarw	$0xf, %r9w
    00000227: 	sarl	$0x11, %esi
    0000022a: 	subl	%r9d, %esi
    0000022d: 	addl	%esi, %r8d
    00000230: 	leal	0x4(%rax), %esi
    00000233: 	cmpl	%esi, %edx
    00000235: 	jle	.Ltmp632 # Offset: 565
    0000023b: 	movswl	0x8(%rcx,%rdi), %esi
    00000240: 	movl	%esi, %r9d
    00000243: 	imull	$0x6667, %esi, %esi
    00000249: 	sarw	$0xf, %r9w
    0000024e: 	sarl	$0x11, %esi
    00000251: 	subl	%r9d, %esi
    00000254: 	addl	%esi, %r8d
    00000257: 	leal	0x5(%rax), %esi
    0000025a: 	cmpl	%esi, %edx
    0000025c: 	jle	.Ltmp632 # Offset: 604
    00000262: 	movswl	0xa(%rcx,%rdi), %esi
    00000267: 	addl	$0x6, %eax
    0000026a: 	movl	%esi, %r9d
    0000026d: 	imull	$0x6667, %esi, %esi
    00000273: 	sarw	$0xf, %r9w
    00000278: 	sarl	$0x11, %esi
    0000027b: 	subl	%r9d, %esi
    0000027e: 	addl	%esi, %r8d
    00000281: 	cmpl	%eax, %edx
    00000283: 	jle	.Ltmp632 # Offset: 643
    00000289: 	movswl	0xc(%rcx,%rdi), %eax
    0000028e: 	movl	%eax, %esi
    00000290: 	imull	$0x6667, %eax, %eax
    00000296: 	sarw	$0xf, %si
    0000029a: 	sarl	$0x11, %eax
    0000029d: 	subl	%esi, %eax
    0000029f: 	addl	%eax, %r8d
    000002a2: 	jmp	.Ltmp632 # Offset: 674
.Ltmp626:
    000002a7: 	xorl	%eax, %eax
    000002a9: 	jmp	.Ltmp633 # Offset: 681
.Ltmp628:
    000002ae: 	xorl	%r8d, %r8d
    000002b1: 	jmp	.Ltmp625 # Offset: 689
.Ltmp631:
    000002b6: 	testl	%edx, %edx
    000002b8: 	movl	$0x1, %edi
    000002bd: 	cmovgl	%edx, %edi
    000002c0: 	jmp	.Ltmp634 # Offset: 704
.Ltmp629:
    000002c5: 	xorl	%eax, %eax
    000002c7: 	xorl	%r8d, %r8d
    000002ca: 	jmp	.Ltmp635 # Offset: 714
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_while_loop_global3IsET_PKS0_iS0_"

Binary Function "_Z20test_do_loop_global3IsET_PKS0_iS0_" after disassembly {
  Number      : 108
  State       : disassembled
  Address     : 0x9fb0
  Size        : 0x2bd
  MaxSize     : 0x2c0
  Offset      : 0x9fb0
  Section     : .text
  Orc Section : .local.text._Z20test_do_loop_global3IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0107:
    00000000: 	endbr64
    00000004: 	cvttsd2si	init_value(%rip), %eax
    0000000c: 	movq	%rdi, %rcx
    0000000f: 	movl	%esi, %edx
    00000011: 	xorl	%r8d, %r8d
    00000014: 	testw	%ax, %ax
    00000017: 	js	.Ltmp636 # Offset: 23
    0000001d: 	testl	%esi, %esi
    0000001f: 	jle	.Ltmp637 # Offset: 31
.Ltmp643:
    00000025: 	testl	%edx, %edx
    00000027: 	movl	$0x1, %edi
    0000002c: 	cmovgl	%edx, %edi
    0000002f: 	cmpl	$0x7, %edx
    00000032: 	jle	.Ltmp638 # Offset: 50
    00000038: 	leaq	0x10(%rcx), %r9
.Ltmp645:
    0000003c: 	movl	%edi, %esi
    0000003e: 	movq	%rcx, %rax
    00000041: 	pxor	%xmm0, %xmm0
    00000045: 	shrl	$0x3, %esi
    00000048: 	subl	$0x1, %esi
    0000004b: 	shlq	$0x4, %rsi
    0000004f: 	addq	%r9, %rsi
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp639:
    00000058: 	movdqu	(%rax), %xmm4
    0000005c: 	addq	$0x10, %rax
    00000060: 	paddw	%xmm4, %xmm0
    00000064: 	cmpq	%rsi, %rax
    00000067: 	jne	.Ltmp639 # Offset: 103
    00000069: 	movdqa	%xmm0, %xmm1
    0000006d: 	psrldq	$0x8, %xmm1
    00000072: 	paddw	%xmm1, %xmm0
    00000076: 	movdqa	%xmm0, %xmm1
    0000007a: 	psrldq	$0x4, %xmm1
    0000007f: 	paddw	%xmm1, %xmm0
    00000083: 	movdqa	%xmm0, %xmm1
    00000087: 	psrldq	$0x2, %xmm1
    0000008c: 	paddw	%xmm1, %xmm0
    00000090: 	pextrw	$0x0, %xmm0, %eax
    00000095: 	addl	%eax, %r8d
    00000098: 	movl	%edi, %eax
    0000009a: 	andl	$-0x8, %eax
    0000009d: 	andl	$0x7, %edi
    000000a0: 	je	.Ltmp637 # Offset: 160
.Ltmp644:
    000000a2: 	movslq	%eax, %rdi
    000000a5: 	leaq	(%rdi,%rdi), %rsi
    000000a9: 	addw	(%rcx,%rdi,2), %r8w
    000000ae: 	leal	0x1(%rax), %edi
    000000b1: 	cmpl	%edi, %edx
    000000b3: 	jle	.Ltmp637 # Offset: 179
    000000b5: 	leal	0x2(%rax), %edi
    000000b8: 	addw	0x2(%rcx,%rsi), %r8w
    000000be: 	cmpl	%edx, %edi
    000000c0: 	jge	.Ltmp637 # Offset: 192
    000000c2: 	leal	0x3(%rax), %edi
    000000c5: 	addw	0x4(%rcx,%rsi), %r8w
    000000cb: 	cmpl	%edi, %edx
    000000cd: 	jle	.Ltmp637 # Offset: 205
    000000cf: 	leal	0x4(%rax), %edi
    000000d2: 	addw	0x6(%rcx,%rsi), %r8w
    000000d8: 	cmpl	%edi, %edx
    000000da: 	jle	.Ltmp637 # Offset: 218
    000000dc: 	leal	0x5(%rax), %edi
    000000df: 	addw	0x8(%rcx,%rsi), %r8w
    000000e5: 	cmpl	%edi, %edx
    000000e7: 	jle	.Ltmp637 # Offset: 231
    000000e9: 	addl	$0x6, %eax
    000000ec: 	addw	0xa(%rcx,%rsi), %r8w
    000000f2: 	cmpl	%eax, %edx
    000000f4: 	jle	.Ltmp637 # Offset: 244
    000000f6: 	addw	0xc(%rcx,%rsi), %r8w
.Ltmp637:
    000000fc: 	movl	%r8d, %eax
    000000ff: 	retq # Offset: 255
.Ltmp636:
    00000100: 	testl	%esi, %esi
    00000102: 	jle	.Ltmp637 # Offset: 258
    00000104: 	leal	-0x1(%rsi), %eax
    00000107: 	cmpl	$0x6, %eax
    0000010a: 	jbe	.Ltmp640 # Offset: 266
    00000110: 	shrl	$0x3, %esi
    00000113: 	leaq	0x10(%rdi), %r9
    00000117: 	pxor	%xmm2, %xmm2
    0000011b: 	movq	%rdi, %rax
    0000011e: 	subl	$0x1, %esi
    00000121: 	movdqa	DATAat0x38890(%rip), %xmm3
    00000129: 	shlq	$0x4, %rsi
    0000012d: 	addq	%r9, %rsi
.Ltmp641:
    00000130: 	movdqu	(%rax), %xmm0
    00000134: 	movdqu	(%rax), %xmm1
    00000138: 	addq	$0x10, %rax
    0000013c: 	pmulhw	%xmm3, %xmm0
    00000140: 	psraw	$0xf, %xmm1
    00000145: 	psraw	$0x1, %xmm0
    0000014a: 	psubw	%xmm1, %xmm0
    0000014e: 	paddw	%xmm0, %xmm2
    00000152: 	cmpq	%rax, %rsi
    00000155: 	jne	.Ltmp641 # Offset: 341
    00000157: 	movdqa	%xmm2, %xmm0
    0000015b: 	movl	%edx, %eax
    0000015d: 	psrldq	$0x8, %xmm0
    00000162: 	andl	$-0x8, %eax
    00000165: 	paddw	%xmm0, %xmm2
    00000169: 	movdqa	%xmm2, %xmm0
    0000016d: 	psrldq	$0x4, %xmm0
    00000172: 	paddw	%xmm0, %xmm2
    00000176: 	movdqa	%xmm2, %xmm0
    0000017a: 	psrldq	$0x2, %xmm0
    0000017f: 	paddw	%xmm0, %xmm2
    00000183: 	pextrw	$0x0, %xmm2, %r8d
    00000189: 	cmpl	%eax, %edx
    0000018b: 	je	.Ltmp642 # Offset: 395
.Ltmp646:
    00000191: 	movslq	%eax, %rsi
    00000194: 	leaq	(%rsi,%rsi), %rdi
    00000198: 	movswl	(%rcx,%rsi,2), %esi
    0000019c: 	movl	%esi, %r9d
    0000019f: 	imull	$0x6667, %esi, %esi
    000001a5: 	sarw	$0xf, %r9w
    000001aa: 	sarl	$0x11, %esi
    000001ad: 	subl	%r9d, %esi
    000001b0: 	addl	%esi, %r8d
    000001b3: 	leal	0x1(%rax), %esi
    000001b6: 	cmpl	%esi, %edx
    000001b8: 	jle	.Ltmp643 # Offset: 440
    000001be: 	movswl	0x2(%rcx,%rdi), %esi
    000001c3: 	movl	%esi, %r9d
    000001c6: 	imull	$0x6667, %esi, %esi
    000001cc: 	sarw	$0xf, %r9w
    000001d1: 	sarl	$0x11, %esi
    000001d4: 	subl	%r9d, %esi
    000001d7: 	addl	%esi, %r8d
    000001da: 	leal	0x2(%rax), %esi
    000001dd: 	cmpl	%esi, %edx
    000001df: 	jle	.Ltmp643 # Offset: 479
    000001e5: 	movswl	0x4(%rcx,%rdi), %esi
    000001ea: 	movl	%esi, %r9d
    000001ed: 	imull	$0x6667, %esi, %esi
    000001f3: 	sarw	$0xf, %r9w
    000001f8: 	sarl	$0x11, %esi
    000001fb: 	subl	%r9d, %esi
    000001fe: 	addl	%esi, %r8d
    00000201: 	leal	0x3(%rax), %esi
    00000204: 	cmpl	%esi, %edx
    00000206: 	jle	.Ltmp643 # Offset: 518
    0000020c: 	movswl	0x6(%rcx,%rdi), %esi
    00000211: 	movl	%esi, %r9d
    00000214: 	imull	$0x6667, %esi, %esi
    0000021a: 	sarw	$0xf, %r9w
    0000021f: 	sarl	$0x11, %esi
    00000222: 	subl	%r9d, %esi
    00000225: 	addl	%esi, %r8d
    00000228: 	leal	0x4(%rax), %esi
    0000022b: 	cmpl	%esi, %edx
    0000022d: 	jle	.Ltmp643 # Offset: 557
    00000233: 	movswl	0x8(%rcx,%rdi), %esi
    00000238: 	movl	%esi, %r9d
    0000023b: 	imull	$0x6667, %esi, %esi
    00000241: 	sarw	$0xf, %r9w
    00000246: 	sarl	$0x11, %esi
    00000249: 	subl	%r9d, %esi
    0000024c: 	addl	%esi, %r8d
    0000024f: 	leal	0x5(%rax), %esi
    00000252: 	cmpl	%esi, %edx
    00000254: 	jle	.Ltmp643 # Offset: 596
    0000025a: 	movswl	0xa(%rcx,%rdi), %esi
    0000025f: 	addl	$0x6, %eax
    00000262: 	movl	%esi, %r9d
    00000265: 	imull	$0x6667, %esi, %esi
    0000026b: 	sarw	$0xf, %r9w
    00000270: 	sarl	$0x11, %esi
    00000273: 	subl	%r9d, %esi
    00000276: 	addl	%esi, %r8d
    00000279: 	cmpl	%eax, %edx
    0000027b: 	jle	.Ltmp643 # Offset: 635
    00000281: 	movswl	0xc(%rcx,%rdi), %eax
    00000286: 	movl	%eax, %esi
    00000288: 	imull	$0x6667, %eax, %eax
    0000028e: 	sarw	$0xf, %si
    00000292: 	sarl	$0x11, %eax
    00000295: 	subl	%esi, %eax
    00000297: 	addl	%eax, %r8d
    0000029a: 	jmp	.Ltmp643 # Offset: 666
    0000029f: 	nop # Size: 1
.Ltmp638:
    000002a0: 	xorl	%eax, %eax
    000002a2: 	jmp	.Ltmp644 # Offset: 674
.Ltmp642:
    000002a7: 	testl	%edx, %edx
    000002a9: 	movl	$0x1, %edi
    000002ae: 	cmovgl	%edx, %edi
    000002b1: 	jmp	.Ltmp645 # Offset: 689
.Ltmp640:
    000002b6: 	xorl	%eax, %eax
    000002b8: 	jmp	.Ltmp646 # Offset: 696
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_do_loop_global3IsET_PKS0_iS0_"

Binary Function "_Z22test_goto_loop_global3IsET_PKS0_iS0_" after disassembly {
  Number      : 109
  State       : disassembled
  Address     : 0xa270
  Size        : 0x2bd
  MaxSize     : 0x2c0
  Offset      : 0xa270
  Section     : .text
  Orc Section : .local.text._Z22test_goto_loop_global3IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0108:
    00000000: 	endbr64
    00000004: 	cvttsd2si	init_value(%rip), %eax
    0000000c: 	movq	%rdi, %rcx
    0000000f: 	movl	%esi, %edx
    00000011: 	xorl	%r8d, %r8d
    00000014: 	testw	%ax, %ax
    00000017: 	js	.Ltmp647 # Offset: 23
    0000001d: 	testl	%esi, %esi
    0000001f: 	jle	.Ltmp648 # Offset: 31
.Ltmp654:
    00000025: 	testl	%edx, %edx
    00000027: 	movl	$0x1, %edi
    0000002c: 	cmovgl	%edx, %edi
    0000002f: 	cmpl	$0x7, %edx
    00000032: 	jle	.Ltmp649 # Offset: 50
    00000038: 	leaq	0x10(%rcx), %r9
.Ltmp656:
    0000003c: 	movl	%edi, %esi
    0000003e: 	movq	%rcx, %rax
    00000041: 	pxor	%xmm0, %xmm0
    00000045: 	shrl	$0x3, %esi
    00000048: 	subl	$0x1, %esi
    0000004b: 	shlq	$0x4, %rsi
    0000004f: 	addq	%r9, %rsi
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp650:
    00000058: 	movdqu	(%rax), %xmm4
    0000005c: 	addq	$0x10, %rax
    00000060: 	paddw	%xmm4, %xmm0
    00000064: 	cmpq	%rsi, %rax
    00000067: 	jne	.Ltmp650 # Offset: 103
    00000069: 	movdqa	%xmm0, %xmm1
    0000006d: 	psrldq	$0x8, %xmm1
    00000072: 	paddw	%xmm1, %xmm0
    00000076: 	movdqa	%xmm0, %xmm1
    0000007a: 	psrldq	$0x4, %xmm1
    0000007f: 	paddw	%xmm1, %xmm0
    00000083: 	movdqa	%xmm0, %xmm1
    00000087: 	psrldq	$0x2, %xmm1
    0000008c: 	paddw	%xmm1, %xmm0
    00000090: 	pextrw	$0x0, %xmm0, %eax
    00000095: 	addl	%eax, %r8d
    00000098: 	movl	%edi, %eax
    0000009a: 	andl	$-0x8, %eax
    0000009d: 	andl	$0x7, %edi
    000000a0: 	je	.Ltmp648 # Offset: 160
.Ltmp655:
    000000a2: 	movslq	%eax, %rdi
    000000a5: 	leaq	(%rdi,%rdi), %rsi
    000000a9: 	addw	(%rcx,%rdi,2), %r8w
    000000ae: 	leal	0x1(%rax), %edi
    000000b1: 	cmpl	%edi, %edx
    000000b3: 	jle	.Ltmp648 # Offset: 179
    000000b5: 	leal	0x2(%rax), %edi
    000000b8: 	addw	0x2(%rcx,%rsi), %r8w
    000000be: 	cmpl	%edx, %edi
    000000c0: 	jge	.Ltmp648 # Offset: 192
    000000c2: 	leal	0x3(%rax), %edi
    000000c5: 	addw	0x4(%rcx,%rsi), %r8w
    000000cb: 	cmpl	%edi, %edx
    000000cd: 	jle	.Ltmp648 # Offset: 205
    000000cf: 	leal	0x4(%rax), %edi
    000000d2: 	addw	0x6(%rcx,%rsi), %r8w
    000000d8: 	cmpl	%edi, %edx
    000000da: 	jle	.Ltmp648 # Offset: 218
    000000dc: 	leal	0x5(%rax), %edi
    000000df: 	addw	0x8(%rcx,%rsi), %r8w
    000000e5: 	cmpl	%edi, %edx
    000000e7: 	jle	.Ltmp648 # Offset: 231
    000000e9: 	addl	$0x6, %eax
    000000ec: 	addw	0xa(%rcx,%rsi), %r8w
    000000f2: 	cmpl	%eax, %edx
    000000f4: 	jle	.Ltmp648 # Offset: 244
    000000f6: 	addw	0xc(%rcx,%rsi), %r8w
.Ltmp648:
    000000fc: 	movl	%r8d, %eax
    000000ff: 	retq # Offset: 255
.Ltmp647:
    00000100: 	testl	%esi, %esi
    00000102: 	jle	.Ltmp648 # Offset: 258
    00000104: 	leal	-0x1(%rsi), %eax
    00000107: 	cmpl	$0x6, %eax
    0000010a: 	jbe	.Ltmp651 # Offset: 266
    00000110: 	shrl	$0x3, %esi
    00000113: 	leaq	0x10(%rdi), %r9
    00000117: 	pxor	%xmm2, %xmm2
    0000011b: 	movq	%rdi, %rax
    0000011e: 	subl	$0x1, %esi
    00000121: 	movdqa	DATAat0x38890(%rip), %xmm3
    00000129: 	shlq	$0x4, %rsi
    0000012d: 	addq	%r9, %rsi
.Ltmp652:
    00000130: 	movdqu	(%rax), %xmm0
    00000134: 	movdqu	(%rax), %xmm1
    00000138: 	addq	$0x10, %rax
    0000013c: 	pmulhw	%xmm3, %xmm0
    00000140: 	psraw	$0xf, %xmm1
    00000145: 	psraw	$0x1, %xmm0
    0000014a: 	psubw	%xmm1, %xmm0
    0000014e: 	paddw	%xmm0, %xmm2
    00000152: 	cmpq	%rax, %rsi
    00000155: 	jne	.Ltmp652 # Offset: 341
    00000157: 	movdqa	%xmm2, %xmm0
    0000015b: 	movl	%edx, %eax
    0000015d: 	psrldq	$0x8, %xmm0
    00000162: 	andl	$-0x8, %eax
    00000165: 	paddw	%xmm0, %xmm2
    00000169: 	movdqa	%xmm2, %xmm0
    0000016d: 	psrldq	$0x4, %xmm0
    00000172: 	paddw	%xmm0, %xmm2
    00000176: 	movdqa	%xmm2, %xmm0
    0000017a: 	psrldq	$0x2, %xmm0
    0000017f: 	paddw	%xmm0, %xmm2
    00000183: 	pextrw	$0x0, %xmm2, %r8d
    00000189: 	cmpl	%eax, %edx
    0000018b: 	je	.Ltmp653 # Offset: 395
.Ltmp657:
    00000191: 	movslq	%eax, %rsi
    00000194: 	leaq	(%rsi,%rsi), %rdi
    00000198: 	movswl	(%rcx,%rsi,2), %esi
    0000019c: 	movl	%esi, %r9d
    0000019f: 	imull	$0x6667, %esi, %esi
    000001a5: 	sarw	$0xf, %r9w
    000001aa: 	sarl	$0x11, %esi
    000001ad: 	subl	%r9d, %esi
    000001b0: 	addl	%esi, %r8d
    000001b3: 	leal	0x1(%rax), %esi
    000001b6: 	cmpl	%esi, %edx
    000001b8: 	jle	.Ltmp654 # Offset: 440
    000001be: 	movswl	0x2(%rcx,%rdi), %esi
    000001c3: 	movl	%esi, %r9d
    000001c6: 	imull	$0x6667, %esi, %esi
    000001cc: 	sarw	$0xf, %r9w
    000001d1: 	sarl	$0x11, %esi
    000001d4: 	subl	%r9d, %esi
    000001d7: 	addl	%esi, %r8d
    000001da: 	leal	0x2(%rax), %esi
    000001dd: 	cmpl	%esi, %edx
    000001df: 	jle	.Ltmp654 # Offset: 479
    000001e5: 	movswl	0x4(%rcx,%rdi), %esi
    000001ea: 	movl	%esi, %r9d
    000001ed: 	imull	$0x6667, %esi, %esi
    000001f3: 	sarw	$0xf, %r9w
    000001f8: 	sarl	$0x11, %esi
    000001fb: 	subl	%r9d, %esi
    000001fe: 	addl	%esi, %r8d
    00000201: 	leal	0x3(%rax), %esi
    00000204: 	cmpl	%esi, %edx
    00000206: 	jle	.Ltmp654 # Offset: 518
    0000020c: 	movswl	0x6(%rcx,%rdi), %esi
    00000211: 	movl	%esi, %r9d
    00000214: 	imull	$0x6667, %esi, %esi
    0000021a: 	sarw	$0xf, %r9w
    0000021f: 	sarl	$0x11, %esi
    00000222: 	subl	%r9d, %esi
    00000225: 	addl	%esi, %r8d
    00000228: 	leal	0x4(%rax), %esi
    0000022b: 	cmpl	%esi, %edx
    0000022d: 	jle	.Ltmp654 # Offset: 557
    00000233: 	movswl	0x8(%rcx,%rdi), %esi
    00000238: 	movl	%esi, %r9d
    0000023b: 	imull	$0x6667, %esi, %esi
    00000241: 	sarw	$0xf, %r9w
    00000246: 	sarl	$0x11, %esi
    00000249: 	subl	%r9d, %esi
    0000024c: 	addl	%esi, %r8d
    0000024f: 	leal	0x5(%rax), %esi
    00000252: 	cmpl	%esi, %edx
    00000254: 	jle	.Ltmp654 # Offset: 596
    0000025a: 	movswl	0xa(%rcx,%rdi), %esi
    0000025f: 	addl	$0x6, %eax
    00000262: 	movl	%esi, %r9d
    00000265: 	imull	$0x6667, %esi, %esi
    0000026b: 	sarw	$0xf, %r9w
    00000270: 	sarl	$0x11, %esi
    00000273: 	subl	%r9d, %esi
    00000276: 	addl	%esi, %r8d
    00000279: 	cmpl	%eax, %edx
    0000027b: 	jle	.Ltmp654 # Offset: 635
    00000281: 	movswl	0xc(%rcx,%rdi), %eax
    00000286: 	movl	%eax, %esi
    00000288: 	imull	$0x6667, %eax, %eax
    0000028e: 	sarw	$0xf, %si
    00000292: 	sarl	$0x11, %eax
    00000295: 	subl	%esi, %eax
    00000297: 	addl	%eax, %r8d
    0000029a: 	jmp	.Ltmp654 # Offset: 666
    0000029f: 	nop # Size: 1
.Ltmp649:
    000002a0: 	xorl	%eax, %eax
    000002a2: 	jmp	.Ltmp655 # Offset: 674
.Ltmp653:
    000002a7: 	testl	%edx, %edx
    000002a9: 	movl	$0x1, %edi
    000002ae: 	cmovgl	%edx, %edi
    000002b1: 	jmp	.Ltmp656 # Offset: 689
.Ltmp651:
    000002b6: 	xorl	%eax, %eax
    000002b8: 	jmp	.Ltmp657 # Offset: 696
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_goto_loop_global3IsET_PKS0_iS0_"

Binary Function "_Z20test_for_loop2_paramIsET_PKS0_iS0_" after disassembly {
  Number      : 110
  State       : disassembled
  Address     : 0xa530
  Size        : 0x6b
  MaxSize     : 0x70
  Offset      : 0xa530
  Section     : .text
  Orc Section : .local.text._Z20test_for_loop2_paramIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0109:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp658 # Offset: 6
    00000008: 	leal	-0x1(%rsi), %eax
    0000000b: 	shrw	$0xf, %dx
    0000000f: 	leaq	0x2(%rdi,%rax,2), %r8
    00000014: 	xorl	%eax, %eax
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp661:
    00000020: 	movzwl	(%rdi), %ecx
    00000023: 	addl	%ecx, %eax
    00000025: 	cmpw	$0x77, %cx
    00000029: 	jle	.Ltmp659 # Offset: 41
    0000002b: 	testb	%dl, %dl
    0000002d: 	jne	.Ltmp660 # Offset: 45
.Ltmp659:
    0000002f: 	addq	$0x2, %rdi
    00000033: 	cmpq	%rdi, %r8
    00000036: 	jne	.Ltmp661 # Offset: 54
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp660:
    00000040: 	movswl	%cx, %esi
    00000043: 	addq	$0x2, %rdi
    00000047: 	imull	$0xffff8889, %esi, %esi
    0000004d: 	shrl	$0x10, %esi
    00000050: 	addl	%ecx, %esi
    00000052: 	sarw	$0xf, %cx
    00000056: 	sarw	$0x6, %si
    0000005a: 	subl	%ecx, %esi
    0000005c: 	leal	(%rax,%rsi,2), %eax
    0000005f: 	cmpq	%rdi, %r8
    00000062: 	jne	.Ltmp661 # Offset: 98
    00000064: 	retq # Offset: 100
    00000065: 	nopl	(%rax) # Size: 3
.Ltmp658:
    00000068: 	xorl	%eax, %eax
    0000006a: 	retq # Offset: 106
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_for_loop2_paramIsET_PKS0_iS0_"

Binary Function "_Z21test_for_loop2_param2IsET_PKS0_iS0_" after disassembly {
  Number      : 111
  State       : disassembled
  Address     : 0xa5a0
  Size        : 0x6b
  MaxSize     : 0x70
  Offset      : 0xa5a0
  Section     : .text
  Orc Section : .local.text._Z21test_for_loop2_param2IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0110:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp662 # Offset: 6
    00000008: 	leal	-0x1(%rsi), %eax
    0000000b: 	shrw	$0xf, %dx
    0000000f: 	leaq	0x2(%rdi,%rax,2), %r8
    00000014: 	xorl	%eax, %eax
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp665:
    00000020: 	movzwl	(%rdi), %ecx
    00000023: 	addl	%ecx, %eax
    00000025: 	cmpw	$0x77, %cx
    00000029: 	jle	.Ltmp663 # Offset: 41
    0000002b: 	testb	%dl, %dl
    0000002d: 	jne	.Ltmp664 # Offset: 45
.Ltmp663:
    0000002f: 	addq	$0x2, %rdi
    00000033: 	cmpq	%rdi, %r8
    00000036: 	jne	.Ltmp665 # Offset: 54
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp664:
    00000040: 	movswl	%cx, %esi
    00000043: 	addq	$0x2, %rdi
    00000047: 	imull	$0xffff8889, %esi, %esi
    0000004d: 	shrl	$0x10, %esi
    00000050: 	addl	%ecx, %esi
    00000052: 	sarw	$0xf, %cx
    00000056: 	sarw	$0x6, %si
    0000005a: 	subl	%ecx, %esi
    0000005c: 	addl	%esi, %eax
    0000005e: 	cmpq	%rdi, %r8
    00000061: 	jne	.Ltmp665 # Offset: 97
    00000063: 	retq # Offset: 99
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp662:
    00000068: 	xorl	%eax, %eax
    0000006a: 	retq # Offset: 106
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_for_loop2_param2IsET_PKS0_iS0_"

Binary Function "_Z22test_while_loop2_paramIsET_PKS0_iS0_" after disassembly {
  Number      : 112
  State       : disassembled
  Address     : 0xa610
  Size        : 0x83
  MaxSize     : 0x90
  Offset      : 0xa610
  Section     : .text
  Orc Section : .local.text._Z22test_while_loop2_paramIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0111:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp666 # Offset: 6
    00000008: 	leal	-0x1(%rsi), %eax
    0000000b: 	shrw	$0xf, %dx
    0000000f: 	leaq	0x2(%rdi,%rax,2), %r9
    00000014: 	xorl	%eax, %eax
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp669:
    00000020: 	movzwl	(%rdi), %ecx
    00000023: 	addl	%ecx, %eax
    00000025: 	cmpw	$0x77, %cx
    00000029: 	jle	.Ltmp667 # Offset: 41
    0000002b: 	testb	%dl, %dl
    0000002d: 	jne	.Ltmp668 # Offset: 45
.Ltmp667:
    0000002f: 	addq	$0x2, %rdi
    00000033: 	cmpq	%rdi, %r9
    00000036: 	jne	.Ltmp669 # Offset: 54
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp668:
    00000040: 	movswl	%cx, %esi
    00000043: 	movl	%ecx, %r10d
    00000046: 	addq	$0x2, %rdi
    0000004a: 	imull	$0x6667, %esi, %r8d
    00000051: 	sarw	$0xf, %r10w
    00000056: 	imull	$0xffff8889, %esi, %esi
    0000005c: 	sarl	$0x11, %r8d
    00000060: 	shrl	$0x10, %esi
    00000063: 	subl	%r10d, %r8d
    00000066: 	addl	%esi, %ecx
    00000068: 	addl	%r8d, %eax
    0000006b: 	sarw	$0x6, %cx
    0000006f: 	subl	%r10d, %ecx
    00000072: 	addl	%ecx, %eax
    00000074: 	cmpq	%rdi, %r9
    00000077: 	jne	.Ltmp669 # Offset: 119
    00000079: 	retq # Offset: 121
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp666:
    00000080: 	xorl	%eax, %eax
    00000082: 	retq # Offset: 130
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_while_loop2_paramIsET_PKS0_iS0_"

Binary Function "_Z23test_while_loop2_param2IsET_PKS0_iS0_" after disassembly {
  Number      : 113
  State       : disassembled
  Address     : 0xa6a0
  Size        : 0x63
  MaxSize     : 0x70
  Offset      : 0xa6a0
  Section     : .text
  Orc Section : .local.text._Z23test_while_loop2_param2IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0112:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp670 # Offset: 6
    00000008: 	leal	-0x1(%rsi), %eax
    0000000b: 	shrw	$0xf, %dx
    0000000f: 	leaq	0x2(%rdi,%rax,2), %r8
    00000014: 	xorl	%eax, %eax
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp673:
    00000020: 	movzwl	(%rdi), %ecx
    00000023: 	addl	%ecx, %eax
    00000025: 	cmpw	$0x77, %cx
    00000029: 	jle	.Ltmp671 # Offset: 41
    0000002b: 	testb	%dl, %dl
    0000002d: 	jne	.Ltmp672 # Offset: 45
.Ltmp671:
    0000002f: 	addq	$0x2, %rdi
    00000033: 	cmpq	%rdi, %r8
    00000036: 	jne	.Ltmp673 # Offset: 54
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp672:
    00000040: 	movswl	%cx, %esi
    00000043: 	sarw	$0xf, %cx
    00000047: 	addq	$0x2, %rdi
    0000004b: 	imull	$0x6667, %esi, %esi
    00000051: 	sarl	$0x11, %esi
    00000054: 	subl	%ecx, %esi
    00000056: 	addl	%esi, %eax
    00000058: 	cmpq	%rdi, %r8
    0000005b: 	jne	.Ltmp673 # Offset: 91
    0000005d: 	retq # Offset: 93
    0000005e: 	nop # Size: 2
.Ltmp670:
    00000060: 	xorl	%eax, %eax
    00000062: 	retq # Offset: 98
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_while_loop2_param2IsET_PKS0_iS0_"

Binary Function "_Z21test_for_loop2_globalIsET_PKS0_iS0_" after disassembly {
  Number      : 114
  State       : disassembled
  Address     : 0xa710
  Size        : 0x14a
  MaxSize     : 0x150
  Offset      : 0xa710
  Section     : .text
  Orc Section : .local.text._Z21test_for_loop2_globalIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0113:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rdx
    00000007: 	movl	%esi, %ecx
    00000009: 	testl	%esi, %esi
    0000000b: 	jle	.Ltmp674 # Offset: 11
    00000011: 	cvttsd2si	init_value(%rip), %eax
    00000019: 	testw	%ax, %ax
    0000001c: 	js	.Ltmp675 # Offset: 28
    00000022: 	leal	-0x1(%rsi), %eax
    00000025: 	cmpl	$0x6, %eax
    00000028: 	jbe	.Ltmp676 # Offset: 40
    0000002e: 	shrl	$0x3, %esi
    00000031: 	movq	%rdi, %rax
    00000034: 	pxor	%xmm0, %xmm0
    00000038: 	subl	$0x1, %esi
    0000003b: 	shlq	$0x4, %rsi
    0000003f: 	leaq	0x10(%rdi,%rsi), %rsi
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp677:
    00000048: 	movdqu	(%rax), %xmm2
    0000004c: 	addq	$0x10, %rax
    00000050: 	paddw	%xmm2, %xmm0
    00000054: 	cmpq	%rsi, %rax
    00000057: 	jne	.Ltmp677 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	movl	%ecx, %esi
    0000005f: 	psrldq	$0x8, %xmm1
    00000064: 	andl	$-0x8, %esi
    00000067: 	paddw	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	psrldq	$0x4, %xmm1
    00000074: 	paddw	%xmm1, %xmm0
    00000078: 	movdqa	%xmm0, %xmm1
    0000007c: 	psrldq	$0x2, %xmm1
    00000081: 	paddw	%xmm1, %xmm0
    00000085: 	pextrw	$0x0, %xmm0, %eax
    0000008a: 	testb	$0x7, %cl
    0000008d: 	je	.Ltmp678 # Offset: 141
.Ltmp682:
    00000093: 	movslq	%esi, %r8
    00000096: 	leaq	(%r8,%r8), %rdi
    0000009a: 	addw	(%rdx,%r8,2), %ax
    0000009f: 	leal	0x1(%rsi), %r8d
    000000a3: 	cmpl	%r8d, %ecx
    000000a6: 	jle	.Ltmp679 # Offset: 166
    000000a8: 	leal	0x2(%rsi), %r8d
    000000ac: 	addw	0x2(%rdx,%rdi), %ax
    000000b1: 	cmpl	%ecx, %r8d
    000000b4: 	jge	.Ltmp679 # Offset: 180
    000000b6: 	leal	0x3(%rsi), %r8d
    000000ba: 	addw	0x4(%rdx,%rdi), %ax
    000000bf: 	cmpl	%r8d, %ecx
    000000c2: 	jle	.Ltmp679 # Offset: 194
    000000c4: 	leal	0x4(%rsi), %r8d
    000000c8: 	addw	0x6(%rdx,%rdi), %ax
    000000cd: 	cmpl	%r8d, %ecx
    000000d0: 	jle	.Ltmp679 # Offset: 208
    000000d2: 	leal	0x5(%rsi), %r8d
    000000d6: 	addw	0x8(%rdx,%rdi), %ax
    000000db: 	cmpl	%r8d, %ecx
    000000de: 	jle	.Ltmp679 # Offset: 222
    000000e0: 	addl	$0x6, %esi
    000000e3: 	addw	0xa(%rdx,%rdi), %ax
    000000e8: 	cmpl	%esi, %ecx
    000000ea: 	jle	.Ltmp679 # Offset: 234
    000000ec: 	addw	0xc(%rdx,%rdi), %ax
    000000f1: 	retq # Offset: 241
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp674:
    000000f8: 	xorl	%eax, %eax
.Ltmp679:
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp675:
    00000100: 	leal	-0x1(%rsi), %eax
    00000103: 	leaq	0x2(%rdi,%rax,2), %rdi
    00000108: 	xorl	%eax, %eax
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp681:
    00000110: 	movzwl	(%rdx), %ecx
    00000113: 	addl	%ecx, %eax
    00000115: 	cmpw	$0x77, %cx
    00000119: 	jle	.Ltmp680 # Offset: 281
    0000011b: 	movswl	%cx, %esi
    0000011e: 	imull	$0xffff8889, %esi, %esi
    00000124: 	shrl	$0x10, %esi
    00000127: 	addl	%ecx, %esi
    00000129: 	sarw	$0xf, %cx
    0000012d: 	sarw	$0x6, %si
    00000131: 	subl	%ecx, %esi
    00000133: 	leal	(%rax,%rsi,2), %eax
.Ltmp680:
    00000136: 	addq	$0x2, %rdx
    0000013a: 	cmpq	%rdx, %rdi
    0000013d: 	jne	.Ltmp681 # Offset: 317
    0000013f: 	retq # Offset: 319
.Ltmp676:
    00000140: 	xorl	%esi, %esi
    00000142: 	xorl	%eax, %eax
    00000144: 	jmp	.Ltmp682 # Offset: 324
.Ltmp678:
    00000149: 	retq # Offset: 329
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_for_loop2_globalIsET_PKS0_iS0_"

Binary Function "_Z22test_for_loop2_global2IsET_PKS0_iS0_" after disassembly {
  Number      : 115
  State       : disassembled
  Address     : 0xa860
  Size        : 0x149
  MaxSize     : 0x150
  Offset      : 0xa860
  Section     : .text
  Orc Section : .local.text._Z22test_for_loop2_global2IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0114:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rdx
    00000007: 	movl	%esi, %ecx
    00000009: 	testl	%esi, %esi
    0000000b: 	jle	.Ltmp683 # Offset: 11
    00000011: 	cvttsd2si	init_value(%rip), %eax
    00000019: 	testw	%ax, %ax
    0000001c: 	js	.Ltmp684 # Offset: 28
    00000022: 	leal	-0x1(%rsi), %eax
    00000025: 	cmpl	$0x6, %eax
    00000028: 	jbe	.Ltmp685 # Offset: 40
    0000002e: 	shrl	$0x3, %esi
    00000031: 	movq	%rdi, %rax
    00000034: 	pxor	%xmm0, %xmm0
    00000038: 	subl	$0x1, %esi
    0000003b: 	shlq	$0x4, %rsi
    0000003f: 	leaq	0x10(%rdi,%rsi), %rsi
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp686:
    00000048: 	movdqu	(%rax), %xmm2
    0000004c: 	addq	$0x10, %rax
    00000050: 	paddw	%xmm2, %xmm0
    00000054: 	cmpq	%rsi, %rax
    00000057: 	jne	.Ltmp686 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	movl	%ecx, %esi
    0000005f: 	psrldq	$0x8, %xmm1
    00000064: 	andl	$-0x8, %esi
    00000067: 	paddw	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	psrldq	$0x4, %xmm1
    00000074: 	paddw	%xmm1, %xmm0
    00000078: 	movdqa	%xmm0, %xmm1
    0000007c: 	psrldq	$0x2, %xmm1
    00000081: 	paddw	%xmm1, %xmm0
    00000085: 	pextrw	$0x0, %xmm0, %eax
    0000008a: 	testb	$0x7, %cl
    0000008d: 	je	.Ltmp687 # Offset: 141
.Ltmp691:
    00000093: 	movslq	%esi, %r8
    00000096: 	leaq	(%r8,%r8), %rdi
    0000009a: 	addw	(%rdx,%r8,2), %ax
    0000009f: 	leal	0x1(%rsi), %r8d
    000000a3: 	cmpl	%ecx, %r8d
    000000a6: 	jge	.Ltmp688 # Offset: 166
    000000a8: 	leal	0x2(%rsi), %r8d
    000000ac: 	addw	0x2(%rdx,%rdi), %ax
    000000b1: 	cmpl	%ecx, %r8d
    000000b4: 	jge	.Ltmp688 # Offset: 180
    000000b6: 	leal	0x3(%rsi), %r8d
    000000ba: 	addw	0x4(%rdx,%rdi), %ax
    000000bf: 	cmpl	%r8d, %ecx
    000000c2: 	jle	.Ltmp688 # Offset: 194
    000000c4: 	leal	0x4(%rsi), %r8d
    000000c8: 	addw	0x6(%rdx,%rdi), %ax
    000000cd: 	cmpl	%r8d, %ecx
    000000d0: 	jle	.Ltmp688 # Offset: 208
    000000d2: 	leal	0x5(%rsi), %r8d
    000000d6: 	addw	0x8(%rdx,%rdi), %ax
    000000db: 	cmpl	%r8d, %ecx
    000000de: 	jle	.Ltmp688 # Offset: 222
    000000e0: 	addl	$0x6, %esi
    000000e3: 	addw	0xa(%rdx,%rdi), %ax
    000000e8: 	cmpl	%esi, %ecx
    000000ea: 	jle	.Ltmp688 # Offset: 234
    000000ec: 	addw	0xc(%rdx,%rdi), %ax
    000000f1: 	retq # Offset: 241
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp683:
    000000f8: 	xorl	%eax, %eax
.Ltmp688:
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp684:
    00000100: 	leal	-0x1(%rsi), %eax
    00000103: 	leaq	0x2(%rdi,%rax,2), %rdi
    00000108: 	xorl	%eax, %eax
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp690:
    00000110: 	movzwl	(%rdx), %ecx
    00000113: 	addl	%ecx, %eax
    00000115: 	cmpw	$0x77, %cx
    00000119: 	jle	.Ltmp689 # Offset: 281
    0000011b: 	movswl	%cx, %esi
    0000011e: 	imull	$0xffff8889, %esi, %esi
    00000124: 	shrl	$0x10, %esi
    00000127: 	addl	%ecx, %esi
    00000129: 	sarw	$0xf, %cx
    0000012d: 	sarw	$0x6, %si
    00000131: 	subl	%ecx, %esi
    00000133: 	addl	%esi, %eax
.Ltmp689:
    00000135: 	addq	$0x2, %rdx
    00000139: 	cmpq	%rdx, %rdi
    0000013c: 	jne	.Ltmp690 # Offset: 316
    0000013e: 	retq # Offset: 318
.Ltmp685:
    0000013f: 	xorl	%esi, %esi
    00000141: 	xorl	%eax, %eax
    00000143: 	jmp	.Ltmp691 # Offset: 323
.Ltmp687:
    00000148: 	retq # Offset: 328
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_for_loop2_global2IsET_PKS0_iS0_"

Binary Function "_Z23test_while_loop2_globalIsET_PKS0_iS0_" after disassembly {
  Number      : 116
  State       : disassembled
  Address     : 0xa9b0
  Size        : 0x156
  MaxSize     : 0x160
  Offset      : 0xa9b0
  Section     : .text
  Orc Section : .local.text._Z23test_while_loop2_globalIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0115:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rdx
    00000007: 	movl	%esi, %ecx
    00000009: 	testl	%esi, %esi
    0000000b: 	jle	.Ltmp692 # Offset: 11
    00000011: 	cvttsd2si	init_value(%rip), %eax
    00000019: 	testw	%ax, %ax
    0000001c: 	js	.Ltmp693 # Offset: 28
    00000022: 	leal	-0x1(%rsi), %eax
    00000025: 	cmpl	$0x6, %eax
    00000028: 	jbe	.Ltmp694 # Offset: 40
    0000002e: 	shrl	$0x3, %esi
    00000031: 	movq	%rdi, %rax
    00000034: 	pxor	%xmm0, %xmm0
    00000038: 	subl	$0x1, %esi
    0000003b: 	shlq	$0x4, %rsi
    0000003f: 	leaq	0x10(%rdi,%rsi), %rsi
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp695:
    00000048: 	movdqu	(%rax), %xmm2
    0000004c: 	addq	$0x10, %rax
    00000050: 	paddw	%xmm2, %xmm0
    00000054: 	cmpq	%rsi, %rax
    00000057: 	jne	.Ltmp695 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	movl	%ecx, %esi
    0000005f: 	psrldq	$0x8, %xmm1
    00000064: 	andl	$-0x8, %esi
    00000067: 	paddw	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	psrldq	$0x4, %xmm1
    00000074: 	paddw	%xmm1, %xmm0
    00000078: 	movdqa	%xmm0, %xmm1
    0000007c: 	psrldq	$0x2, %xmm1
    00000081: 	paddw	%xmm1, %xmm0
    00000085: 	pextrw	$0x0, %xmm0, %eax
    0000008a: 	testb	$0x7, %cl
    0000008d: 	je	.Ltmp696 # Offset: 141
.Ltmp700:
    00000093: 	movslq	%esi, %r8
    00000096: 	leaq	(%r8,%r8), %rdi
    0000009a: 	addw	(%rdx,%r8,2), %ax
    0000009f: 	leal	0x1(%rsi), %r8d
    000000a3: 	cmpl	%r8d, %ecx
    000000a6: 	jle	.Ltmp697 # Offset: 166
    000000a8: 	leal	0x2(%rsi), %r8d
    000000ac: 	addw	0x2(%rdx,%rdi), %ax
    000000b1: 	cmpl	%ecx, %r8d
    000000b4: 	jge	.Ltmp697 # Offset: 180
    000000b6: 	leal	0x3(%rsi), %r8d
    000000ba: 	addw	0x4(%rdx,%rdi), %ax
    000000bf: 	cmpl	%ecx, %r8d
    000000c2: 	jge	.Ltmp697 # Offset: 194
    000000c4: 	leal	0x4(%rsi), %r8d
    000000c8: 	addw	0x6(%rdx,%rdi), %ax
    000000cd: 	cmpl	%r8d, %ecx
    000000d0: 	jle	.Ltmp697 # Offset: 208
    000000d2: 	leal	0x5(%rsi), %r8d
    000000d6: 	addw	0x8(%rdx,%rdi), %ax
    000000db: 	cmpl	%r8d, %ecx
    000000de: 	jle	.Ltmp697 # Offset: 222
    000000e0: 	addl	$0x6, %esi
    000000e3: 	addw	0xa(%rdx,%rdi), %ax
    000000e8: 	cmpl	%esi, %ecx
    000000ea: 	jle	.Ltmp697 # Offset: 234
    000000ec: 	addw	0xc(%rdx,%rdi), %ax
    000000f1: 	retq # Offset: 241
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp692:
    000000f8: 	xorl	%eax, %eax
.Ltmp697:
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp693:
    00000100: 	leal	-0x1(%rsi), %eax
    00000103: 	leaq	0x2(%rdi,%rax,2), %r8
    00000108: 	xorl	%eax, %eax
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp699:
    00000110: 	movzwl	(%rdx), %ecx
    00000113: 	addl	%ecx, %eax
    00000115: 	cmpw	$0x77, %cx
    00000119: 	jle	.Ltmp698 # Offset: 281
    0000011b: 	movswl	%cx, %edi
    0000011e: 	imull	$0xffff8889, %edi, %esi
    00000124: 	imull	$0x6667, %edi, %edi
    0000012a: 	shrl	$0x10, %esi
    0000012d: 	addl	%ecx, %esi
    0000012f: 	sarw	$0xf, %cx
    00000133: 	sarw	$0x6, %si
    00000137: 	sarl	$0x11, %edi
    0000013a: 	subl	%ecx, %esi
    0000013c: 	subl	%ecx, %edi
    0000013e: 	addl	%esi, %eax
    00000140: 	addl	%edi, %eax
.Ltmp698:
    00000142: 	addq	$0x2, %rdx
    00000146: 	cmpq	%rdx, %r8
    00000149: 	jne	.Ltmp699 # Offset: 329
    0000014b: 	retq # Offset: 331
.Ltmp694:
    0000014c: 	xorl	%esi, %esi
    0000014e: 	xorl	%eax, %eax
    00000150: 	jmp	.Ltmp700 # Offset: 336
.Ltmp696:
    00000155: 	retq # Offset: 341
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_while_loop2_globalIsET_PKS0_iS0_"

Binary Function "_Z24test_while_loop2_global2IsET_PKS0_iS0_" after disassembly {
  Number      : 117
  State       : disassembled
  Address     : 0xab10
  Size        : 0x143
  MaxSize     : 0x150
  Offset      : 0xab10
  Section     : .text
  Orc Section : .local.text._Z24test_while_loop2_global2IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0116:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rdx
    00000007: 	movl	%esi, %ecx
    00000009: 	testl	%esi, %esi
    0000000b: 	jle	.Ltmp701 # Offset: 11
    00000011: 	cvttsd2si	init_value(%rip), %eax
    00000019: 	testw	%ax, %ax
    0000001c: 	js	.Ltmp702 # Offset: 28
    00000022: 	leal	-0x1(%rsi), %eax
    00000025: 	cmpl	$0x6, %eax
    00000028: 	jbe	.Ltmp703 # Offset: 40
    0000002e: 	shrl	$0x3, %esi
    00000031: 	movq	%rdi, %rax
    00000034: 	pxor	%xmm0, %xmm0
    00000038: 	subl	$0x1, %esi
    0000003b: 	shlq	$0x4, %rsi
    0000003f: 	leaq	0x10(%rdi,%rsi), %rsi
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp704:
    00000048: 	movdqu	(%rax), %xmm2
    0000004c: 	addq	$0x10, %rax
    00000050: 	paddw	%xmm2, %xmm0
    00000054: 	cmpq	%rsi, %rax
    00000057: 	jne	.Ltmp704 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	movl	%ecx, %esi
    0000005f: 	psrldq	$0x8, %xmm1
    00000064: 	andl	$-0x8, %esi
    00000067: 	paddw	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	psrldq	$0x4, %xmm1
    00000074: 	paddw	%xmm1, %xmm0
    00000078: 	movdqa	%xmm0, %xmm1
    0000007c: 	psrldq	$0x2, %xmm1
    00000081: 	paddw	%xmm1, %xmm0
    00000085: 	pextrw	$0x0, %xmm0, %eax
    0000008a: 	testb	$0x7, %cl
    0000008d: 	je	.Ltmp705 # Offset: 141
.Ltmp709:
    00000093: 	movslq	%esi, %r8
    00000096: 	leaq	(%r8,%r8), %rdi
    0000009a: 	addw	(%rdx,%r8,2), %ax
    0000009f: 	leal	0x1(%rsi), %r8d
    000000a3: 	cmpl	%ecx, %r8d
    000000a6: 	jge	.Ltmp706 # Offset: 166
    000000a8: 	leal	0x2(%rsi), %r8d
    000000ac: 	addw	0x2(%rdx,%rdi), %ax
    000000b1: 	cmpl	%ecx, %r8d
    000000b4: 	jge	.Ltmp706 # Offset: 180
    000000b6: 	leal	0x3(%rsi), %r8d
    000000ba: 	addw	0x4(%rdx,%rdi), %ax
    000000bf: 	cmpl	%r8d, %ecx
    000000c2: 	jle	.Ltmp706 # Offset: 194
    000000c4: 	leal	0x4(%rsi), %r8d
    000000c8: 	addw	0x6(%rdx,%rdi), %ax
    000000cd: 	cmpl	%r8d, %ecx
    000000d0: 	jle	.Ltmp706 # Offset: 208
    000000d2: 	leal	0x5(%rsi), %r8d
    000000d6: 	addw	0x8(%rdx,%rdi), %ax
    000000db: 	cmpl	%r8d, %ecx
    000000de: 	jle	.Ltmp706 # Offset: 222
    000000e0: 	addl	$0x6, %esi
    000000e3: 	addw	0xa(%rdx,%rdi), %ax
    000000e8: 	cmpl	%esi, %ecx
    000000ea: 	jle	.Ltmp706 # Offset: 234
    000000ec: 	addw	0xc(%rdx,%rdi), %ax
    000000f1: 	retq # Offset: 241
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp701:
    000000f8: 	xorl	%eax, %eax
.Ltmp706:
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp702:
    00000100: 	leal	-0x1(%rsi), %eax
    00000103: 	leaq	0x2(%rdi,%rax,2), %rdi
    00000108: 	xorl	%eax, %eax
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp708:
    00000110: 	movzwl	(%rdx), %ecx
    00000113: 	addl	%ecx, %eax
    00000115: 	cmpw	$0x77, %cx
    00000119: 	jle	.Ltmp707 # Offset: 281
    0000011b: 	movswl	%cx, %esi
    0000011e: 	sarw	$0xf, %cx
    00000122: 	imull	$0x6667, %esi, %esi
    00000128: 	sarl	$0x11, %esi
    0000012b: 	subl	%ecx, %esi
    0000012d: 	addl	%esi, %eax
.Ltmp707:
    0000012f: 	addq	$0x2, %rdx
    00000133: 	cmpq	%rdx, %rdi
    00000136: 	jne	.Ltmp708 # Offset: 310
    00000138: 	retq # Offset: 312
.Ltmp703:
    00000139: 	xorl	%esi, %esi
    0000013b: 	xorl	%eax, %eax
    0000013d: 	jmp	.Ltmp709 # Offset: 317
.Ltmp705:
    00000142: 	retq # Offset: 322
DWARF CFI Instructions:
    <empty>
End of Function "_Z24test_while_loop2_global2IsET_PKS0_iS0_"

Binary Function "_Z18test_for_loop3_optIsET_PKS0_iS0_" after disassembly {
  Number      : 118
  State       : disassembled
  Address     : 0xac60
  Size        : 0x391
  MaxSize     : 0x3a0
  Offset      : 0xac60
  Section     : .text
  Orc Section : .local.text._Z18test_for_loop3_optIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0117:
    00000000: 	endbr64
    00000004: 	movswl	%dx, %edx
    00000007: 	leal	(%rdx,%rdx), %eax
    0000000a: 	cmpl	%esi, %eax
    0000000c: 	jle	.Ltmp710 # Offset: 12
    00000012: 	testl	%edx, %edx
    00000014: 	jle	.Ltmp711 # Offset: 20
    0000001a: 	testl	%esi, %esi
    0000001c: 	jle	.Ltmp711 # Offset: 28
    00000022: 	cmpl	%esi, %edx
    00000024: 	movl	$0x1, %r8d
    0000002a: 	cmovgl	%esi, %edx
    0000002d: 	testl	%edx, %edx
    0000002f: 	cmovgl	%edx, %r8d
    00000033: 	cmpl	$0x7, %edx
    00000036: 	jle	.Ltmp712 # Offset: 54
    0000003c: 	movl	%r8d, %ecx
    0000003f: 	movdqa	DATAat0x388a0(%rip), %xmm1
    00000047: 	pxor	%xmm0, %xmm0
    0000004b: 	movq	%rdi, %rax
    0000004e: 	shrl	$0x3, %ecx
    00000051: 	subl	$0x1, %ecx
    00000054: 	shlq	$0x4, %rcx
    00000058: 	leaq	0x10(%rdi,%rcx), %rcx
    0000005d: 	nopl	(%rax) # Size: 3
.Ltmp713:
    00000060: 	movdqu	(%rax), %xmm3
    00000064: 	paddw	%xmm1, %xmm0
    00000068: 	addq	$0x10, %rax
    0000006c: 	paddw	%xmm3, %xmm0
    00000070: 	cmpq	%rax, %rcx
    00000073: 	jne	.Ltmp713 # Offset: 115
    00000075: 	movdqa	%xmm0, %xmm1
    00000079: 	movl	%r8d, %ecx
    0000007c: 	psrldq	$0x8, %xmm1
    00000081: 	andl	$-0x8, %ecx
    00000084: 	paddw	%xmm1, %xmm0
    00000088: 	movl	%ecx, %r9d
    0000008b: 	movdqa	%xmm0, %xmm1
    0000008f: 	psrldq	$0x4, %xmm1
    00000094: 	paddw	%xmm1, %xmm0
    00000098: 	movdqa	%xmm0, %xmm1
    0000009c: 	psrldq	$0x2, %xmm1
    000000a1: 	paddw	%xmm1, %xmm0
    000000a5: 	pextrw	$0x0, %xmm0, %eax
    000000aa: 	cmpl	%ecx, %r8d
    000000ad: 	je	.Ltmp714 # Offset: 173
.Ltmp727:
    000000b3: 	subl	%ecx, %r8d
    000000b6: 	leal	-0x1(%r8), %r10d
    000000ba: 	cmpl	$0x2, %r10d
    000000be: 	jbe	.Ltmp715 # Offset: 190
    000000c0: 	movq	DATAat0x388a0(%rip), %xmm1
    000000c8: 	movq	(%rdi,%rcx,2), %xmm0
    000000cd: 	paddw	%xmm1, %xmm0
    000000d1: 	pextrw	$0x1, %xmm0, %r10d
    000000d7: 	pextrw	$0x0, %xmm0, %ecx
    000000dc: 	addl	%r10d, %ecx
    000000df: 	pextrw	$0x2, %xmm0, %r10d
    000000e5: 	addl	%r10d, %ecx
    000000e8: 	pextrw	$0x3, %xmm0, %r10d
    000000ee: 	addl	%r10d, %ecx
    000000f1: 	addl	%ecx, %eax
    000000f3: 	movl	%r8d, %ecx
    000000f6: 	andl	$-0x4, %ecx
    000000f9: 	addl	%ecx, %r9d
    000000fc: 	cmpl	%ecx, %r8d
    000000ff: 	je	.Ltmp714 # Offset: 255
.Ltmp715:
    00000101: 	movslq	%r9d, %rcx
    00000104: 	leaq	(%rcx,%rcx), %r8
    00000108: 	movzwl	(%rdi,%rcx,2), %ecx
    0000010c: 	leal	0x1(%rax,%rcx), %eax
    00000110: 	leal	0x1(%r9), %ecx
    00000114: 	cmpl	%ecx, %edx
    00000116: 	jle	.Ltmp714 # Offset: 278
    00000118: 	addw	0x2(%rdi,%r8), %ax
    0000011e: 	leal	0x2(%r9), %ecx
    00000122: 	addl	$0x1, %eax
    00000125: 	cmpl	%ecx, %edx
    00000127: 	jle	.Ltmp714 # Offset: 295
    00000129: 	movzwl	0x4(%rdi,%r8), %ecx
    0000012f: 	leal	0x1(%rax,%rcx), %eax
.Ltmp714:
    00000133: 	cmpl	%edx, %esi
    00000135: 	jle	.Ltmp716 # Offset: 309
    0000013b: 	movl	%esi, %r10d
    0000013e: 	subl	%edx, %r10d
    00000141: 	leal	-0x1(%r10), %ecx
    00000145: 	cmpl	$0x6, %ecx
    00000148: 	jbe	.Ltmp717 # Offset: 328
    0000014e: 	movslq	%edx, %rcx
    00000151: 	pxor	%xmm0, %xmm0
    00000155: 	pcmpeqd	%xmm2, %xmm2
    00000159: 	leaq	(%rdi,%rcx,2), %r8
    0000015d: 	movl	%r10d, %ecx
    00000160: 	shrl	$0x3, %ecx
    00000163: 	leal	-0x1(%rcx), %r9d
    00000167: 	leaq	0x10(%r8), %rcx
    0000016b: 	shlq	$0x4, %r9
    0000016f: 	addq	%rcx, %r9
    00000172: 	jmp	.Ltmp718 # Offset: 370
    00000174: 	nopl	(%rax) # Size: 4
.Ltmp719:
    00000178: 	addq	$0x10, %rcx
.Ltmp718:
    0000017c: 	movdqu	(%r8), %xmm1
    00000181: 	paddw	%xmm2, %xmm0
    00000185: 	movq	%rcx, %r8
    00000188: 	paddw	%xmm1, %xmm0
    0000018c: 	cmpq	%r9, %rcx
    0000018f: 	jne	.Ltmp719 # Offset: 399
    00000191: 	movdqa	%xmm0, %xmm1
    00000195: 	movl	%r10d, %r8d
    00000198: 	psrldq	$0x8, %xmm1
    0000019d: 	andl	$-0x8, %r8d
    000001a1: 	paddw	%xmm1, %xmm0
    000001a5: 	leal	(%r8,%rdx), %r9d
    000001a9: 	movdqa	%xmm0, %xmm1
    000001ad: 	psrldq	$0x4, %xmm1
    000001b2: 	paddw	%xmm1, %xmm0
    000001b6: 	movdqa	%xmm0, %xmm1
    000001ba: 	psrldq	$0x2, %xmm1
    000001bf: 	paddw	%xmm1, %xmm0
    000001c3: 	pextrw	$0x0, %xmm0, %ecx
    000001c8: 	addl	%ecx, %eax
    000001ca: 	cmpl	%r8d, %r10d
    000001cd: 	je	.Ltmp720 # Offset: 461
.Ltmp726:
    000001d3: 	movl	%r10d, %ecx
    000001d6: 	subl	%r8d, %ecx
    000001d9: 	leal	-0x1(%rcx), %r10d
    000001dd: 	cmpl	$0x2, %r10d
    000001e1: 	jbe	.Ltmp721 # Offset: 481
    000001e3: 	movq	DATAat0x38a10(%rip), %xmm1
    000001eb: 	movslq	%edx, %rdx
    000001ee: 	addq	%r8, %rdx
    000001f1: 	movq	(%rdi,%rdx,2), %xmm0
    000001f6: 	paddw	%xmm1, %xmm0
    000001fa: 	pextrw	$0x1, %xmm0, %r8d
    00000200: 	pextrw	$0x0, %xmm0, %edx
    00000205: 	addl	%r8d, %edx
    00000208: 	pextrw	$0x2, %xmm0, %r8d
    0000020e: 	addl	%r8d, %edx
    00000211: 	pextrw	$0x3, %xmm0, %r8d
    00000217: 	addl	%r8d, %edx
    0000021a: 	addl	%edx, %eax
    0000021c: 	movl	%ecx, %edx
    0000021e: 	andl	$-0x4, %edx
    00000221: 	addl	%edx, %r9d
    00000224: 	cmpl	%edx, %ecx
    00000226: 	je	.Ltmp716 # Offset: 550
.Ltmp721:
    0000022c: 	movslq	%r9d, %rdx
    0000022f: 	leaq	(%rdx,%rdx), %rcx
    00000233: 	movzwl	(%rdi,%rdx,2), %edx
    00000237: 	leal	-0x1(%rax,%rdx), %eax
    0000023b: 	leal	0x1(%r9), %edx
    0000023f: 	cmpl	%edx, %esi
    00000241: 	jle	.Ltmp716 # Offset: 577
    00000247: 	addw	0x2(%rdi,%rcx), %ax
    0000024c: 	addl	$0x2, %r9d
    00000250: 	subl	$0x1, %eax
    00000253: 	cmpl	%r9d, %esi
    00000256: 	jle	.Ltmp716 # Offset: 598
    0000025c: 	movzwl	0x4(%rdi,%rcx), %edx
    00000261: 	leal	-0x1(%rax,%rdx), %eax
    00000265: 	retq # Offset: 613
    00000266: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp710:
    00000270: 	testl	%esi, %esi
    00000272: 	jle	.Ltmp722 # Offset: 626
    00000278: 	leal	-0x1(%rsi), %eax
    0000027b: 	cmpl	$0x6, %eax
    0000027e: 	jbe	.Ltmp723 # Offset: 638
    00000284: 	movl	%esi, %edx
    00000286: 	movq	%rdi, %rax
    00000289: 	pxor	%xmm0, %xmm0
    0000028d: 	shrl	$0x3, %edx
    00000290: 	subl	$0x1, %edx
    00000293: 	shlq	$0x4, %rdx
    00000297: 	leaq	0x10(%rdi,%rdx), %rdx
    0000029c: 	nopl	(%rax) # Size: 4
.Ltmp724:
    000002a0: 	movdqu	(%rax), %xmm4
    000002a4: 	addq	$0x10, %rax
    000002a8: 	paddw	%xmm4, %xmm0
    000002ac: 	cmpq	%rdx, %rax
    000002af: 	jne	.Ltmp724 # Offset: 687
    000002b1: 	movdqa	%xmm0, %xmm1
    000002b5: 	movl	%esi, %edx
    000002b7: 	psrldq	$0x8, %xmm1
    000002bc: 	andl	$-0x8, %edx
    000002bf: 	paddw	%xmm1, %xmm0
    000002c3: 	movdqa	%xmm0, %xmm1
    000002c7: 	psrldq	$0x4, %xmm1
    000002cc: 	paddw	%xmm1, %xmm0
    000002d0: 	movdqa	%xmm0, %xmm1
    000002d4: 	psrldq	$0x2, %xmm1
    000002d9: 	paddw	%xmm1, %xmm0
    000002dd: 	pextrw	$0x0, %xmm0, %eax
    000002e2: 	testb	$0x7, %sil
    000002e6: 	je	.Ltmp725 # Offset: 742
.Ltmp728:
    000002ec: 	movslq	%edx, %r8
    000002ef: 	leaq	(%r8,%r8), %rcx
    000002f3: 	addw	(%rdi,%r8,2), %ax
    000002f8: 	leal	0x1(%rdx), %r8d
    000002fc: 	cmpl	%r8d, %esi
    000002ff: 	jle	.Ltmp716 # Offset: 767
    00000301: 	leal	0x2(%rdx), %r8d
    00000305: 	addw	0x2(%rdi,%rcx), %ax
    0000030a: 	cmpl	%r8d, %esi
    0000030d: 	jle	.Ltmp716 # Offset: 781
    0000030f: 	leal	0x3(%rdx), %r8d
    00000313: 	addw	0x4(%rdi,%rcx), %ax
    00000318: 	cmpl	%r8d, %esi
    0000031b: 	jle	.Ltmp716 # Offset: 795
    0000031d: 	leal	0x4(%rdx), %r8d
    00000321: 	addw	0x6(%rdi,%rcx), %ax
    00000326: 	cmpl	%esi, %r8d
    00000329: 	jge	.Ltmp716 # Offset: 809
    0000032b: 	leal	0x5(%rdx), %r8d
    0000032f: 	addw	0x8(%rdi,%rcx), %ax
    00000334: 	cmpl	%r8d, %esi
    00000337: 	jle	.Ltmp716 # Offset: 823
    00000339: 	addl	$0x6, %edx
    0000033c: 	addw	0xa(%rdi,%rcx), %ax
    00000341: 	cmpl	%esi, %edx
    00000343: 	jge	.Ltmp716 # Offset: 835
    00000345: 	addw	0xc(%rdi,%rcx), %ax
    0000034a: 	retq # Offset: 842
    0000034b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp722:
    00000350: 	xorl	%eax, %eax
.Ltmp716:
    00000352: 	retq # Offset: 850
    00000353: 	nopl	(%rax,%rax) # Size: 5
.Ltmp711:
    00000358: 	xorl	%edx, %edx
    0000035a: 	xorl	%eax, %eax
    0000035c: 	jmp	.Ltmp714 # Offset: 860
    00000361: 	nopl	(%rax) # Size: 7
.Ltmp725:
    00000368: 	retq # Offset: 872
    00000369: 	nopl	(%rax) # Size: 7
.Ltmp720:
    00000370: 	retq # Offset: 880
.Ltmp717:
    00000371: 	movl	%edx, %r9d
    00000374: 	xorl	%r8d, %r8d
    00000377: 	jmp	.Ltmp726 # Offset: 887
.Ltmp712:
    0000037c: 	xorl	%ecx, %ecx
    0000037e: 	xorl	%r9d, %r9d
    00000381: 	xorl	%eax, %eax
    00000383: 	jmp	.Ltmp727 # Offset: 899
.Ltmp723:
    00000388: 	xorl	%edx, %edx
    0000038a: 	xorl	%eax, %eax
    0000038c: 	jmp	.Ltmp728 # Offset: 908
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_for_loop3_optIsET_PKS0_iS0_"

Binary Function "_Z22test_for_loop3_halfoptIsET_PKS0_iS0_" after disassembly {
  Number      : 119
  State       : disassembled
  Address     : 0xb000
  Size        : 0x36f
  MaxSize     : 0x370
  Offset      : 0xb000
  Section     : .text
  Orc Section : .local.text._Z22test_for_loop3_halfoptIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0118:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %r8
    00000007: 	movswl	%dx, %edx
    0000000a: 	testl	%r8d, %r8d
    0000000d: 	jle	.Ltmp729 # Offset: 13
    00000013: 	testl	%edx, %edx
    00000015: 	jle	.Ltmp729 # Offset: 21
    0000001b: 	cmpl	%edx, %r8d
    0000001e: 	movslq	%edx, %rsi
    00000021: 	movl	$0x1, %r9d
    00000027: 	cmovleq	%r8, %rsi
    0000002b: 	testl	%esi, %esi
    0000002d: 	cmovgl	%esi, %r9d
    00000031: 	cmpl	$0x7, %esi
    00000034: 	jle	.Ltmp730 # Offset: 52
    0000003a: 	movl	%r9d, %ecx
    0000003d: 	movdqa	DATAat0x388a0(%rip), %xmm1
    00000045: 	pxor	%xmm0, %xmm0
    00000049: 	movq	%rdi, %rax
    0000004c: 	shrl	$0x3, %ecx
    0000004f: 	subl	$0x1, %ecx
    00000052: 	shlq	$0x4, %rcx
    00000056: 	leaq	0x10(%rdi,%rcx), %rcx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp731:
    00000060: 	movdqu	(%rax), %xmm3
    00000064: 	paddw	%xmm1, %xmm0
    00000068: 	addq	$0x10, %rax
    0000006c: 	paddw	%xmm3, %xmm0
    00000070: 	cmpq	%rcx, %rax
    00000073: 	jne	.Ltmp731 # Offset: 115
    00000075: 	movdqa	%xmm0, %xmm1
    00000079: 	movl	%r9d, %ecx
    0000007c: 	psrldq	$0x8, %xmm1
    00000081: 	andl	$-0x8, %ecx
    00000084: 	paddw	%xmm1, %xmm0
    00000088: 	movl	%ecx, %r10d
    0000008b: 	movdqa	%xmm0, %xmm1
    0000008f: 	psrldq	$0x4, %xmm1
    00000094: 	paddw	%xmm1, %xmm0
    00000098: 	movdqa	%xmm0, %xmm1
    0000009c: 	psrldq	$0x2, %xmm1
    000000a1: 	paddw	%xmm1, %xmm0
    000000a5: 	pextrw	$0x0, %xmm0, %eax
    000000aa: 	cmpl	%ecx, %r9d
    000000ad: 	je	.Ltmp732 # Offset: 173
.Ltmp744:
    000000b3: 	subl	%ecx, %r9d
    000000b6: 	leal	-0x1(%r9), %r11d
    000000ba: 	cmpl	$0x2, %r11d
    000000be: 	jbe	.Ltmp733 # Offset: 190
    000000c0: 	movq	DATAat0x388a0(%rip), %xmm1
    000000c8: 	movq	(%rdi,%rcx,2), %xmm0
    000000cd: 	paddw	%xmm1, %xmm0
    000000d1: 	pextrw	$0x1, %xmm0, %r11d
    000000d7: 	pextrw	$0x0, %xmm0, %ecx
    000000dc: 	addl	%r11d, %ecx
    000000df: 	pextrw	$0x2, %xmm0, %r11d
    000000e5: 	addl	%r11d, %ecx
    000000e8: 	pextrw	$0x3, %xmm0, %r11d
    000000ee: 	addl	%r11d, %ecx
    000000f1: 	addl	%ecx, %eax
    000000f3: 	movl	%r9d, %ecx
    000000f6: 	andl	$-0x4, %ecx
    000000f9: 	addl	%ecx, %r10d
    000000fc: 	cmpl	%ecx, %r9d
    000000ff: 	je	.Ltmp732 # Offset: 255
.Ltmp733:
    00000101: 	movslq	%r10d, %rcx
    00000104: 	leaq	(%rcx,%rcx), %r9
    00000108: 	movzwl	(%rdi,%rcx,2), %ecx
    0000010c: 	leal	0x1(%rax,%rcx), %eax
    00000110: 	leal	0x1(%r10), %ecx
    00000114: 	cmpl	%ecx, %esi
    00000116: 	jle	.Ltmp732 # Offset: 278
    00000118: 	addw	0x2(%rdi,%r9), %ax
    0000011e: 	addl	$0x2, %r10d
    00000122: 	addl	$0x1, %eax
    00000125: 	cmpl	%r10d, %esi
    00000128: 	jle	.Ltmp732 # Offset: 296
    0000012a: 	movzwl	0x4(%rdi,%r9), %ecx
    00000130: 	leal	0x1(%rax,%rcx), %eax
.Ltmp732:
    00000134: 	addl	%edx, %edx
    00000136: 	cmpl	%r8d, %edx
    00000139: 	cmovgl	%r8d, %edx
    0000013d: 	cmpl	%esi, %edx
    0000013f: 	jle	.Ltmp734 # Offset: 319
    00000145: 	movl	%edx, %r11d
    00000148: 	subl	%esi, %r11d
    0000014b: 	leal	-0x1(%r11), %ecx
    0000014f: 	cmpl	$0x6, %ecx
    00000152: 	jbe	.Ltmp735 # Offset: 338
    00000158: 	movslq	%esi, %rcx
    0000015b: 	pxor	%xmm0, %xmm0
    0000015f: 	pcmpeqd	%xmm2, %xmm2
    00000163: 	leaq	(%rdi,%rcx,2), %r9
    00000167: 	movl	%r11d, %ecx
    0000016a: 	shrl	$0x3, %ecx
    0000016d: 	leal	-0x1(%rcx), %r10d
    00000171: 	leaq	0x10(%r9), %rcx
    00000175: 	shlq	$0x4, %r10
    00000179: 	addq	%rcx, %r10
    0000017c: 	jmp	.Ltmp736 # Offset: 380
    0000017e: 	nop # Size: 2
.Ltmp737:
    00000180: 	addq	$0x10, %rcx
.Ltmp736:
    00000184: 	movdqu	(%r9), %xmm1
    00000189: 	paddw	%xmm2, %xmm0
    0000018d: 	movq	%rcx, %r9
    00000190: 	paddw	%xmm1, %xmm0
    00000194: 	cmpq	%rcx, %r10
    00000197: 	jne	.Ltmp737 # Offset: 407
    00000199: 	movdqa	%xmm0, %xmm1
    0000019d: 	psrldq	$0x8, %xmm1
    000001a2: 	paddw	%xmm1, %xmm0
    000001a6: 	movdqa	%xmm0, %xmm1
    000001aa: 	psrldq	$0x4, %xmm1
    000001af: 	paddw	%xmm1, %xmm0
    000001b3: 	movdqa	%xmm0, %xmm1
    000001b7: 	psrldq	$0x2, %xmm1
    000001bc: 	paddw	%xmm1, %xmm0
    000001c0: 	pextrw	$0x0, %xmm0, %ecx
    000001c5: 	addl	%ecx, %eax
    000001c7: 	movl	%r11d, %ecx
    000001ca: 	andl	$-0x8, %ecx
    000001cd: 	leal	(%rcx,%rsi), %r10d
    000001d1: 	cmpl	%ecx, %r11d
    000001d4: 	je	.Ltmp738 # Offset: 468
.Ltmp745:
    000001d6: 	subl	%ecx, %r11d
    000001d9: 	movl	%r11d, %r9d
    000001dc: 	leal	-0x1(%r11), %r11d
    000001e0: 	cmpl	$0x2, %r11d
    000001e4: 	jbe	.Ltmp739 # Offset: 484
    000001e6: 	movq	DATAat0x38a10(%rip), %xmm1
    000001ee: 	addq	%rcx, %rsi
    000001f1: 	movq	(%rdi,%rsi,2), %xmm0
    000001f6: 	paddw	%xmm1, %xmm0
    000001fa: 	pextrw	$0x1, %xmm0, %esi
    000001ff: 	pextrw	$0x0, %xmm0, %ecx
    00000204: 	addl	%esi, %ecx
    00000206: 	pextrw	$0x2, %xmm0, %esi
    0000020b: 	addl	%esi, %ecx
    0000020d: 	pextrw	$0x3, %xmm0, %esi
    00000212: 	addl	%esi, %ecx
    00000214: 	addl	%ecx, %eax
    00000216: 	movl	%r9d, %ecx
    00000219: 	andl	$-0x4, %ecx
    0000021c: 	addl	%ecx, %r10d
    0000021f: 	cmpl	%ecx, %r9d
    00000222: 	je	.Ltmp738 # Offset: 546
.Ltmp739:
    00000224: 	movslq	%r10d, %rcx
    00000227: 	leaq	(%rcx,%rcx), %rsi
    0000022b: 	movzwl	(%rdi,%rcx,2), %ecx
    0000022f: 	leal	-0x1(%rax,%rcx), %eax
    00000233: 	leal	0x1(%r10), %ecx
    00000237: 	cmpl	%ecx, %edx
    00000239: 	jle	.Ltmp738 # Offset: 569
    0000023b: 	addw	0x2(%rdi,%rsi), %ax
    00000240: 	leal	0x2(%r10), %ecx
    00000244: 	subl	$0x1, %eax
    00000247: 	cmpl	%ecx, %edx
    00000249: 	jle	.Ltmp738 # Offset: 585
    0000024b: 	movzwl	0x4(%rdi,%rsi), %ecx
    00000250: 	leal	-0x1(%rax,%rcx), %eax
.Ltmp738:
    00000254: 	cmpl	%edx, %r8d
    00000257: 	jle	.Ltmp740 # Offset: 599
    0000025d: 	movl	%r8d, %r10d
    00000260: 	subl	%edx, %r10d
    00000263: 	leal	-0x1(%r10), %ecx
    00000267: 	cmpl	$0x6, %ecx
    0000026a: 	jbe	.Ltmp741 # Offset: 618
    0000026c: 	movslq	%edx, %rcx
    0000026f: 	pxor	%xmm0, %xmm0
    00000273: 	leaq	(%rdi,%rcx,2), %rsi
    00000277: 	movl	%r10d, %ecx
    0000027a: 	shrl	$0x3, %ecx
    0000027d: 	leal	-0x1(%rcx), %r9d
    00000281: 	leaq	0x10(%rsi), %rcx
    00000285: 	shlq	$0x4, %r9
    00000289: 	addq	%rcx, %r9
    0000028c: 	jmp	.Ltmp742 # Offset: 652
    0000028e: 	nop # Size: 2
.Ltmp743:
    00000290: 	addq	$0x10, %rcx
.Ltmp742:
    00000294: 	movdqu	(%rsi), %xmm1
    00000298: 	movq	%rcx, %rsi
    0000029b: 	paddw	%xmm1, %xmm0
    0000029f: 	cmpq	%r9, %rcx
    000002a2: 	jne	.Ltmp743 # Offset: 674
    000002a4: 	movdqa	%xmm0, %xmm1
    000002a8: 	psrldq	$0x8, %xmm1
    000002ad: 	paddw	%xmm1, %xmm0
    000002b1: 	movdqa	%xmm0, %xmm1
    000002b5: 	psrldq	$0x4, %xmm1
    000002ba: 	paddw	%xmm1, %xmm0
    000002be: 	movdqa	%xmm0, %xmm1
    000002c2: 	psrldq	$0x2, %xmm1
    000002c7: 	paddw	%xmm1, %xmm0
    000002cb: 	pextrw	$0x0, %xmm0, %ecx
    000002d0: 	addl	%ecx, %eax
    000002d2: 	movl	%r10d, %ecx
    000002d5: 	andl	$-0x8, %ecx
    000002d8: 	addl	%ecx, %edx
    000002da: 	cmpl	%r10d, %ecx
    000002dd: 	je	.Ltmp740 # Offset: 733
.Ltmp741:
    000002df: 	movslq	%edx, %rsi
    000002e2: 	leaq	(%rsi,%rsi), %rcx
    000002e6: 	addw	(%rdi,%rsi,2), %ax
    000002ea: 	leal	0x1(%rdx), %esi
    000002ed: 	cmpl	%esi, %r8d
    000002f0: 	jle	.Ltmp740 # Offset: 752
    000002f2: 	leal	0x2(%rdx), %esi
    000002f5: 	addw	0x2(%rdi,%rcx), %ax
    000002fa: 	cmpl	%esi, %r8d
    000002fd: 	jle	.Ltmp740 # Offset: 765
    000002ff: 	leal	0x3(%rdx), %esi
    00000302: 	addw	0x4(%rdi,%rcx), %ax
    00000307: 	cmpl	%r8d, %esi
    0000030a: 	jge	.Ltmp740 # Offset: 778
    0000030c: 	leal	0x4(%rdx), %esi
    0000030f: 	addw	0x6(%rdi,%rcx), %ax
    00000314: 	cmpl	%r8d, %esi
    00000317: 	jge	.Ltmp740 # Offset: 791
    00000319: 	leal	0x5(%rdx), %esi
    0000031c: 	addw	0x8(%rdi,%rcx), %ax
    00000321: 	cmpl	%r8d, %esi
    00000324: 	jge	.Ltmp740 # Offset: 804
    00000326: 	addl	$0x6, %edx
    00000329: 	addw	0xa(%rdi,%rcx), %ax
    0000032e: 	cmpl	%edx, %r8d
    00000331: 	jle	.Ltmp740 # Offset: 817
    00000333: 	addw	0xc(%rdi,%rcx), %ax
.Ltmp740:
    00000338: 	retq # Offset: 824
    00000339: 	nopl	(%rax) # Size: 7
.Ltmp734:
    00000340: 	movl	%esi, %edx
    00000342: 	jmp	.Ltmp738 # Offset: 834
    00000347: 	nopw	(%rax,%rax) # Size: 9
.Ltmp729:
    00000350: 	xorl	%esi, %esi
    00000352: 	xorl	%eax, %eax
    00000354: 	jmp	.Ltmp732 # Offset: 852
.Ltmp730:
    00000359: 	xorl	%ecx, %ecx
    0000035b: 	xorl	%r10d, %r10d
    0000035e: 	xorl	%eax, %eax
    00000360: 	jmp	.Ltmp744 # Offset: 864
.Ltmp735:
    00000365: 	movl	%esi, %r10d
    00000368: 	xorl	%ecx, %ecx
    0000036a: 	jmp	.Ltmp745 # Offset: 874
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_for_loop3_halfoptIsET_PKS0_iS0_"

Binary Function "_Z20test_while_loop3_optIsET_PKS0_iS0_" after disassembly {
  Number      : 120
  State       : disassembled
  Address     : 0xb370
  Size        : 0x391
  MaxSize     : 0x3a0
  Offset      : 0xb370
  Section     : .text
  Orc Section : .local.text._Z20test_while_loop3_optIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0119:
    00000000: 	endbr64
    00000004: 	movswl	%dx, %edx
    00000007: 	leal	(%rdx,%rdx), %eax
    0000000a: 	cmpl	%esi, %eax
    0000000c: 	jle	.Ltmp746 # Offset: 12
    00000012: 	testl	%edx, %edx
    00000014: 	jle	.Ltmp747 # Offset: 20
    0000001a: 	testl	%esi, %esi
    0000001c: 	jle	.Ltmp747 # Offset: 28
    00000022: 	cmpl	%esi, %edx
    00000024: 	movl	$0x1, %r8d
    0000002a: 	cmovgl	%esi, %edx
    0000002d: 	testl	%edx, %edx
    0000002f: 	cmovgl	%edx, %r8d
    00000033: 	cmpl	$0x7, %edx
    00000036: 	jle	.Ltmp748 # Offset: 54
    0000003c: 	movl	%r8d, %ecx
    0000003f: 	movdqa	DATAat0x388a0(%rip), %xmm1
    00000047: 	pxor	%xmm0, %xmm0
    0000004b: 	movq	%rdi, %rax
    0000004e: 	shrl	$0x3, %ecx
    00000051: 	subl	$0x1, %ecx
    00000054: 	shlq	$0x4, %rcx
    00000058: 	leaq	0x10(%rdi,%rcx), %rcx
    0000005d: 	nopl	(%rax) # Size: 3
.Ltmp749:
    00000060: 	movdqu	(%rax), %xmm3
    00000064: 	paddw	%xmm1, %xmm0
    00000068: 	addq	$0x10, %rax
    0000006c: 	paddw	%xmm3, %xmm0
    00000070: 	cmpq	%rax, %rcx
    00000073: 	jne	.Ltmp749 # Offset: 115
    00000075: 	movdqa	%xmm0, %xmm1
    00000079: 	movl	%r8d, %ecx
    0000007c: 	psrldq	$0x8, %xmm1
    00000081: 	andl	$-0x8, %ecx
    00000084: 	paddw	%xmm1, %xmm0
    00000088: 	movl	%ecx, %r9d
    0000008b: 	movdqa	%xmm0, %xmm1
    0000008f: 	psrldq	$0x4, %xmm1
    00000094: 	paddw	%xmm1, %xmm0
    00000098: 	movdqa	%xmm0, %xmm1
    0000009c: 	psrldq	$0x2, %xmm1
    000000a1: 	paddw	%xmm1, %xmm0
    000000a5: 	pextrw	$0x0, %xmm0, %eax
    000000aa: 	cmpl	%ecx, %r8d
    000000ad: 	je	.Ltmp750 # Offset: 173
.Ltmp763:
    000000b3: 	subl	%ecx, %r8d
    000000b6: 	leal	-0x1(%r8), %r10d
    000000ba: 	cmpl	$0x2, %r10d
    000000be: 	jbe	.Ltmp751 # Offset: 190
    000000c0: 	movq	DATAat0x388a0(%rip), %xmm1
    000000c8: 	movq	(%rdi,%rcx,2), %xmm0
    000000cd: 	paddw	%xmm1, %xmm0
    000000d1: 	pextrw	$0x1, %xmm0, %r10d
    000000d7: 	pextrw	$0x0, %xmm0, %ecx
    000000dc: 	addl	%r10d, %ecx
    000000df: 	pextrw	$0x2, %xmm0, %r10d
    000000e5: 	addl	%r10d, %ecx
    000000e8: 	pextrw	$0x3, %xmm0, %r10d
    000000ee: 	addl	%r10d, %ecx
    000000f1: 	addl	%ecx, %eax
    000000f3: 	movl	%r8d, %ecx
    000000f6: 	andl	$-0x4, %ecx
    000000f9: 	addl	%ecx, %r9d
    000000fc: 	cmpl	%ecx, %r8d
    000000ff: 	je	.Ltmp750 # Offset: 255
.Ltmp751:
    00000101: 	movslq	%r9d, %rcx
    00000104: 	leaq	(%rcx,%rcx), %r8
    00000108: 	movzwl	(%rdi,%rcx,2), %ecx
    0000010c: 	leal	0x1(%rax,%rcx), %eax
    00000110: 	leal	0x1(%r9), %ecx
    00000114: 	cmpl	%ecx, %edx
    00000116: 	jle	.Ltmp750 # Offset: 278
    00000118: 	addw	0x2(%rdi,%r8), %ax
    0000011e: 	leal	0x2(%r9), %ecx
    00000122: 	addl	$0x1, %eax
    00000125: 	cmpl	%ecx, %edx
    00000127: 	jle	.Ltmp750 # Offset: 295
    00000129: 	movzwl	0x4(%rdi,%r8), %ecx
    0000012f: 	leal	0x1(%rax,%rcx), %eax
.Ltmp750:
    00000133: 	cmpl	%edx, %esi
    00000135: 	jle	.Ltmp752 # Offset: 309
    0000013b: 	movl	%esi, %r10d
    0000013e: 	subl	%edx, %r10d
    00000141: 	leal	-0x1(%r10), %ecx
    00000145: 	cmpl	$0x6, %ecx
    00000148: 	jbe	.Ltmp753 # Offset: 328
    0000014e: 	movslq	%edx, %rcx
    00000151: 	pxor	%xmm0, %xmm0
    00000155: 	pcmpeqd	%xmm2, %xmm2
    00000159: 	leaq	(%rdi,%rcx,2), %r8
    0000015d: 	movl	%r10d, %ecx
    00000160: 	shrl	$0x3, %ecx
    00000163: 	leal	-0x1(%rcx), %r9d
    00000167: 	leaq	0x10(%r8), %rcx
    0000016b: 	shlq	$0x4, %r9
    0000016f: 	addq	%rcx, %r9
    00000172: 	jmp	.Ltmp754 # Offset: 370
    00000174: 	nopl	(%rax) # Size: 4
.Ltmp755:
    00000178: 	addq	$0x10, %rcx
.Ltmp754:
    0000017c: 	movdqu	(%r8), %xmm1
    00000181: 	paddw	%xmm2, %xmm0
    00000185: 	movq	%rcx, %r8
    00000188: 	paddw	%xmm1, %xmm0
    0000018c: 	cmpq	%r9, %rcx
    0000018f: 	jne	.Ltmp755 # Offset: 399
    00000191: 	movdqa	%xmm0, %xmm1
    00000195: 	movl	%r10d, %r8d
    00000198: 	psrldq	$0x8, %xmm1
    0000019d: 	andl	$-0x8, %r8d
    000001a1: 	paddw	%xmm1, %xmm0
    000001a5: 	leal	(%r8,%rdx), %r9d
    000001a9: 	movdqa	%xmm0, %xmm1
    000001ad: 	psrldq	$0x4, %xmm1
    000001b2: 	paddw	%xmm1, %xmm0
    000001b6: 	movdqa	%xmm0, %xmm1
    000001ba: 	psrldq	$0x2, %xmm1
    000001bf: 	paddw	%xmm1, %xmm0
    000001c3: 	pextrw	$0x0, %xmm0, %ecx
    000001c8: 	addl	%ecx, %eax
    000001ca: 	cmpl	%r8d, %r10d
    000001cd: 	je	.Ltmp756 # Offset: 461
.Ltmp762:
    000001d3: 	movl	%r10d, %ecx
    000001d6: 	subl	%r8d, %ecx
    000001d9: 	leal	-0x1(%rcx), %r10d
    000001dd: 	cmpl	$0x2, %r10d
    000001e1: 	jbe	.Ltmp757 # Offset: 481
    000001e3: 	movq	DATAat0x38a10(%rip), %xmm1
    000001eb: 	movslq	%edx, %rdx
    000001ee: 	addq	%r8, %rdx
    000001f1: 	movq	(%rdi,%rdx,2), %xmm0
    000001f6: 	paddw	%xmm1, %xmm0
    000001fa: 	pextrw	$0x1, %xmm0, %r8d
    00000200: 	pextrw	$0x0, %xmm0, %edx
    00000205: 	addl	%r8d, %edx
    00000208: 	pextrw	$0x2, %xmm0, %r8d
    0000020e: 	addl	%r8d, %edx
    00000211: 	pextrw	$0x3, %xmm0, %r8d
    00000217: 	addl	%r8d, %edx
    0000021a: 	addl	%edx, %eax
    0000021c: 	movl	%ecx, %edx
    0000021e: 	andl	$-0x4, %edx
    00000221: 	addl	%edx, %r9d
    00000224: 	cmpl	%edx, %ecx
    00000226: 	je	.Ltmp752 # Offset: 550
.Ltmp757:
    0000022c: 	movslq	%r9d, %rdx
    0000022f: 	leaq	(%rdx,%rdx), %rcx
    00000233: 	movzwl	(%rdi,%rdx,2), %edx
    00000237: 	leal	-0x1(%rax,%rdx), %eax
    0000023b: 	leal	0x1(%r9), %edx
    0000023f: 	cmpl	%edx, %esi
    00000241: 	jle	.Ltmp752 # Offset: 577
    00000247: 	addw	0x2(%rdi,%rcx), %ax
    0000024c: 	addl	$0x2, %r9d
    00000250: 	subl	$0x1, %eax
    00000253: 	cmpl	%r9d, %esi
    00000256: 	jle	.Ltmp752 # Offset: 598
    0000025c: 	movzwl	0x4(%rdi,%rcx), %edx
    00000261: 	leal	-0x1(%rax,%rdx), %eax
    00000265: 	retq # Offset: 613
    00000266: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp746:
    00000270: 	testl	%esi, %esi
    00000272: 	jle	.Ltmp758 # Offset: 626
    00000278: 	leal	-0x1(%rsi), %eax
    0000027b: 	cmpl	$0x6, %eax
    0000027e: 	jbe	.Ltmp759 # Offset: 638
    00000284: 	movl	%esi, %edx
    00000286: 	movq	%rdi, %rax
    00000289: 	pxor	%xmm0, %xmm0
    0000028d: 	shrl	$0x3, %edx
    00000290: 	subl	$0x1, %edx
    00000293: 	shlq	$0x4, %rdx
    00000297: 	leaq	0x10(%rdi,%rdx), %rdx
    0000029c: 	nopl	(%rax) # Size: 4
.Ltmp760:
    000002a0: 	movdqu	(%rax), %xmm4
    000002a4: 	addq	$0x10, %rax
    000002a8: 	paddw	%xmm4, %xmm0
    000002ac: 	cmpq	%rdx, %rax
    000002af: 	jne	.Ltmp760 # Offset: 687
    000002b1: 	movdqa	%xmm0, %xmm1
    000002b5: 	movl	%esi, %edx
    000002b7: 	psrldq	$0x8, %xmm1
    000002bc: 	andl	$-0x8, %edx
    000002bf: 	paddw	%xmm1, %xmm0
    000002c3: 	movdqa	%xmm0, %xmm1
    000002c7: 	psrldq	$0x4, %xmm1
    000002cc: 	paddw	%xmm1, %xmm0
    000002d0: 	movdqa	%xmm0, %xmm1
    000002d4: 	psrldq	$0x2, %xmm1
    000002d9: 	paddw	%xmm1, %xmm0
    000002dd: 	pextrw	$0x0, %xmm0, %eax
    000002e2: 	testb	$0x7, %sil
    000002e6: 	je	.Ltmp761 # Offset: 742
.Ltmp764:
    000002ec: 	movslq	%edx, %r8
    000002ef: 	leaq	(%r8,%r8), %rcx
    000002f3: 	addw	(%rdi,%r8,2), %ax
    000002f8: 	leal	0x1(%rdx), %r8d
    000002fc: 	cmpl	%r8d, %esi
    000002ff: 	jle	.Ltmp752 # Offset: 767
    00000301: 	leal	0x2(%rdx), %r8d
    00000305: 	addw	0x2(%rdi,%rcx), %ax
    0000030a: 	cmpl	%r8d, %esi
    0000030d: 	jle	.Ltmp752 # Offset: 781
    0000030f: 	leal	0x3(%rdx), %r8d
    00000313: 	addw	0x4(%rdi,%rcx), %ax
    00000318: 	cmpl	%r8d, %esi
    0000031b: 	jle	.Ltmp752 # Offset: 795
    0000031d: 	leal	0x4(%rdx), %r8d
    00000321: 	addw	0x6(%rdi,%rcx), %ax
    00000326: 	cmpl	%esi, %r8d
    00000329: 	jge	.Ltmp752 # Offset: 809
    0000032b: 	leal	0x5(%rdx), %r8d
    0000032f: 	addw	0x8(%rdi,%rcx), %ax
    00000334: 	cmpl	%r8d, %esi
    00000337: 	jle	.Ltmp752 # Offset: 823
    00000339: 	addl	$0x6, %edx
    0000033c: 	addw	0xa(%rdi,%rcx), %ax
    00000341: 	cmpl	%esi, %edx
    00000343: 	jge	.Ltmp752 # Offset: 835
    00000345: 	addw	0xc(%rdi,%rcx), %ax
    0000034a: 	retq # Offset: 842
    0000034b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp758:
    00000350: 	xorl	%eax, %eax
.Ltmp752:
    00000352: 	retq # Offset: 850
    00000353: 	nopl	(%rax,%rax) # Size: 5
.Ltmp747:
    00000358: 	xorl	%edx, %edx
    0000035a: 	xorl	%eax, %eax
    0000035c: 	jmp	.Ltmp750 # Offset: 860
    00000361: 	nopl	(%rax) # Size: 7
.Ltmp761:
    00000368: 	retq # Offset: 872
    00000369: 	nopl	(%rax) # Size: 7
.Ltmp756:
    00000370: 	retq # Offset: 880
.Ltmp753:
    00000371: 	movl	%edx, %r9d
    00000374: 	xorl	%r8d, %r8d
    00000377: 	jmp	.Ltmp762 # Offset: 887
.Ltmp748:
    0000037c: 	xorl	%ecx, %ecx
    0000037e: 	xorl	%r9d, %r9d
    00000381: 	xorl	%eax, %eax
    00000383: 	jmp	.Ltmp763 # Offset: 899
.Ltmp759:
    00000388: 	xorl	%edx, %edx
    0000038a: 	xorl	%eax, %eax
    0000038c: 	jmp	.Ltmp764 # Offset: 908
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_while_loop3_optIsET_PKS0_iS0_"

Binary Function "_Z24test_while_loop3_halfoptIsET_PKS0_iS0_" after disassembly {
  Number      : 121
  State       : disassembled
  Address     : 0xb710
  Size        : 0x36f
  MaxSize     : 0x370
  Offset      : 0xb710
  Section     : .text
  Orc Section : .local.text._Z24test_while_loop3_halfoptIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0120:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %r8
    00000007: 	movswl	%dx, %edx
    0000000a: 	testl	%r8d, %r8d
    0000000d: 	jle	.Ltmp765 # Offset: 13
    00000013: 	testl	%edx, %edx
    00000015: 	jle	.Ltmp765 # Offset: 21
    0000001b: 	cmpl	%edx, %r8d
    0000001e: 	movslq	%edx, %rsi
    00000021: 	movl	$0x1, %r9d
    00000027: 	cmovleq	%r8, %rsi
    0000002b: 	testl	%esi, %esi
    0000002d: 	cmovgl	%esi, %r9d
    00000031: 	cmpl	$0x7, %esi
    00000034: 	jle	.Ltmp766 # Offset: 52
    0000003a: 	movl	%r9d, %ecx
    0000003d: 	movdqa	DATAat0x388a0(%rip), %xmm1
    00000045: 	pxor	%xmm0, %xmm0
    00000049: 	movq	%rdi, %rax
    0000004c: 	shrl	$0x3, %ecx
    0000004f: 	subl	$0x1, %ecx
    00000052: 	shlq	$0x4, %rcx
    00000056: 	leaq	0x10(%rdi,%rcx), %rcx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp767:
    00000060: 	movdqu	(%rax), %xmm3
    00000064: 	paddw	%xmm1, %xmm0
    00000068: 	addq	$0x10, %rax
    0000006c: 	paddw	%xmm3, %xmm0
    00000070: 	cmpq	%rcx, %rax
    00000073: 	jne	.Ltmp767 # Offset: 115
    00000075: 	movdqa	%xmm0, %xmm1
    00000079: 	movl	%r9d, %ecx
    0000007c: 	psrldq	$0x8, %xmm1
    00000081: 	andl	$-0x8, %ecx
    00000084: 	paddw	%xmm1, %xmm0
    00000088: 	movl	%ecx, %r10d
    0000008b: 	movdqa	%xmm0, %xmm1
    0000008f: 	psrldq	$0x4, %xmm1
    00000094: 	paddw	%xmm1, %xmm0
    00000098: 	movdqa	%xmm0, %xmm1
    0000009c: 	psrldq	$0x2, %xmm1
    000000a1: 	paddw	%xmm1, %xmm0
    000000a5: 	pextrw	$0x0, %xmm0, %eax
    000000aa: 	cmpl	%ecx, %r9d
    000000ad: 	je	.Ltmp768 # Offset: 173
.Ltmp780:
    000000b3: 	subl	%ecx, %r9d
    000000b6: 	leal	-0x1(%r9), %r11d
    000000ba: 	cmpl	$0x2, %r11d
    000000be: 	jbe	.Ltmp769 # Offset: 190
    000000c0: 	movq	DATAat0x388a0(%rip), %xmm1
    000000c8: 	movq	(%rdi,%rcx,2), %xmm0
    000000cd: 	paddw	%xmm1, %xmm0
    000000d1: 	pextrw	$0x1, %xmm0, %r11d
    000000d7: 	pextrw	$0x0, %xmm0, %ecx
    000000dc: 	addl	%r11d, %ecx
    000000df: 	pextrw	$0x2, %xmm0, %r11d
    000000e5: 	addl	%r11d, %ecx
    000000e8: 	pextrw	$0x3, %xmm0, %r11d
    000000ee: 	addl	%r11d, %ecx
    000000f1: 	addl	%ecx, %eax
    000000f3: 	movl	%r9d, %ecx
    000000f6: 	andl	$-0x4, %ecx
    000000f9: 	addl	%ecx, %r10d
    000000fc: 	cmpl	%ecx, %r9d
    000000ff: 	je	.Ltmp768 # Offset: 255
.Ltmp769:
    00000101: 	movslq	%r10d, %rcx
    00000104: 	leaq	(%rcx,%rcx), %r9
    00000108: 	movzwl	(%rdi,%rcx,2), %ecx
    0000010c: 	leal	0x1(%rax,%rcx), %eax
    00000110: 	leal	0x1(%r10), %ecx
    00000114: 	cmpl	%ecx, %esi
    00000116: 	jle	.Ltmp768 # Offset: 278
    00000118: 	addw	0x2(%rdi,%r9), %ax
    0000011e: 	addl	$0x2, %r10d
    00000122: 	addl	$0x1, %eax
    00000125: 	cmpl	%r10d, %esi
    00000128: 	jle	.Ltmp768 # Offset: 296
    0000012a: 	movzwl	0x4(%rdi,%r9), %ecx
    00000130: 	leal	0x1(%rax,%rcx), %eax
.Ltmp768:
    00000134: 	addl	%edx, %edx
    00000136: 	cmpl	%r8d, %edx
    00000139: 	cmovgl	%r8d, %edx
    0000013d: 	cmpl	%esi, %edx
    0000013f: 	jle	.Ltmp770 # Offset: 319
    00000145: 	movl	%edx, %r11d
    00000148: 	subl	%esi, %r11d
    0000014b: 	leal	-0x1(%r11), %ecx
    0000014f: 	cmpl	$0x6, %ecx
    00000152: 	jbe	.Ltmp771 # Offset: 338
    00000158: 	movslq	%esi, %rcx
    0000015b: 	pxor	%xmm0, %xmm0
    0000015f: 	pcmpeqd	%xmm2, %xmm2
    00000163: 	leaq	(%rdi,%rcx,2), %r9
    00000167: 	movl	%r11d, %ecx
    0000016a: 	shrl	$0x3, %ecx
    0000016d: 	leal	-0x1(%rcx), %r10d
    00000171: 	leaq	0x10(%r9), %rcx
    00000175: 	shlq	$0x4, %r10
    00000179: 	addq	%rcx, %r10
    0000017c: 	jmp	.Ltmp772 # Offset: 380
    0000017e: 	nop # Size: 2
.Ltmp773:
    00000180: 	addq	$0x10, %rcx
.Ltmp772:
    00000184: 	movdqu	(%r9), %xmm1
    00000189: 	paddw	%xmm2, %xmm0
    0000018d: 	movq	%rcx, %r9
    00000190: 	paddw	%xmm1, %xmm0
    00000194: 	cmpq	%rcx, %r10
    00000197: 	jne	.Ltmp773 # Offset: 407
    00000199: 	movdqa	%xmm0, %xmm1
    0000019d: 	psrldq	$0x8, %xmm1
    000001a2: 	paddw	%xmm1, %xmm0
    000001a6: 	movdqa	%xmm0, %xmm1
    000001aa: 	psrldq	$0x4, %xmm1
    000001af: 	paddw	%xmm1, %xmm0
    000001b3: 	movdqa	%xmm0, %xmm1
    000001b7: 	psrldq	$0x2, %xmm1
    000001bc: 	paddw	%xmm1, %xmm0
    000001c0: 	pextrw	$0x0, %xmm0, %ecx
    000001c5: 	addl	%ecx, %eax
    000001c7: 	movl	%r11d, %ecx
    000001ca: 	andl	$-0x8, %ecx
    000001cd: 	leal	(%rcx,%rsi), %r10d
    000001d1: 	cmpl	%ecx, %r11d
    000001d4: 	je	.Ltmp774 # Offset: 468
.Ltmp781:
    000001d6: 	subl	%ecx, %r11d
    000001d9: 	movl	%r11d, %r9d
    000001dc: 	leal	-0x1(%r11), %r11d
    000001e0: 	cmpl	$0x2, %r11d
    000001e4: 	jbe	.Ltmp775 # Offset: 484
    000001e6: 	movq	DATAat0x38a10(%rip), %xmm1
    000001ee: 	addq	%rcx, %rsi
    000001f1: 	movq	(%rdi,%rsi,2), %xmm0
    000001f6: 	paddw	%xmm1, %xmm0
    000001fa: 	pextrw	$0x1, %xmm0, %esi
    000001ff: 	pextrw	$0x0, %xmm0, %ecx
    00000204: 	addl	%esi, %ecx
    00000206: 	pextrw	$0x2, %xmm0, %esi
    0000020b: 	addl	%esi, %ecx
    0000020d: 	pextrw	$0x3, %xmm0, %esi
    00000212: 	addl	%esi, %ecx
    00000214: 	addl	%ecx, %eax
    00000216: 	movl	%r9d, %ecx
    00000219: 	andl	$-0x4, %ecx
    0000021c: 	addl	%ecx, %r10d
    0000021f: 	cmpl	%ecx, %r9d
    00000222: 	je	.Ltmp774 # Offset: 546
.Ltmp775:
    00000224: 	movslq	%r10d, %rcx
    00000227: 	leaq	(%rcx,%rcx), %rsi
    0000022b: 	movzwl	(%rdi,%rcx,2), %ecx
    0000022f: 	leal	-0x1(%rax,%rcx), %eax
    00000233: 	leal	0x1(%r10), %ecx
    00000237: 	cmpl	%ecx, %edx
    00000239: 	jle	.Ltmp774 # Offset: 569
    0000023b: 	addw	0x2(%rdi,%rsi), %ax
    00000240: 	leal	0x2(%r10), %ecx
    00000244: 	subl	$0x1, %eax
    00000247: 	cmpl	%ecx, %edx
    00000249: 	jle	.Ltmp774 # Offset: 585
    0000024b: 	movzwl	0x4(%rdi,%rsi), %ecx
    00000250: 	leal	-0x1(%rax,%rcx), %eax
.Ltmp774:
    00000254: 	cmpl	%edx, %r8d
    00000257: 	jle	.Ltmp776 # Offset: 599
    0000025d: 	movl	%r8d, %r10d
    00000260: 	subl	%edx, %r10d
    00000263: 	leal	-0x1(%r10), %ecx
    00000267: 	cmpl	$0x6, %ecx
    0000026a: 	jbe	.Ltmp777 # Offset: 618
    0000026c: 	movslq	%edx, %rcx
    0000026f: 	pxor	%xmm0, %xmm0
    00000273: 	leaq	(%rdi,%rcx,2), %rsi
    00000277: 	movl	%r10d, %ecx
    0000027a: 	shrl	$0x3, %ecx
    0000027d: 	leal	-0x1(%rcx), %r9d
    00000281: 	leaq	0x10(%rsi), %rcx
    00000285: 	shlq	$0x4, %r9
    00000289: 	addq	%rcx, %r9
    0000028c: 	jmp	.Ltmp778 # Offset: 652
    0000028e: 	nop # Size: 2
.Ltmp779:
    00000290: 	addq	$0x10, %rcx
.Ltmp778:
    00000294: 	movdqu	(%rsi), %xmm1
    00000298: 	movq	%rcx, %rsi
    0000029b: 	paddw	%xmm1, %xmm0
    0000029f: 	cmpq	%r9, %rcx
    000002a2: 	jne	.Ltmp779 # Offset: 674
    000002a4: 	movdqa	%xmm0, %xmm1
    000002a8: 	psrldq	$0x8, %xmm1
    000002ad: 	paddw	%xmm1, %xmm0
    000002b1: 	movdqa	%xmm0, %xmm1
    000002b5: 	psrldq	$0x4, %xmm1
    000002ba: 	paddw	%xmm1, %xmm0
    000002be: 	movdqa	%xmm0, %xmm1
    000002c2: 	psrldq	$0x2, %xmm1
    000002c7: 	paddw	%xmm1, %xmm0
    000002cb: 	pextrw	$0x0, %xmm0, %ecx
    000002d0: 	addl	%ecx, %eax
    000002d2: 	movl	%r10d, %ecx
    000002d5: 	andl	$-0x8, %ecx
    000002d8: 	addl	%ecx, %edx
    000002da: 	cmpl	%r10d, %ecx
    000002dd: 	je	.Ltmp776 # Offset: 733
.Ltmp777:
    000002df: 	movslq	%edx, %rsi
    000002e2: 	leaq	(%rsi,%rsi), %rcx
    000002e6: 	addw	(%rdi,%rsi,2), %ax
    000002ea: 	leal	0x1(%rdx), %esi
    000002ed: 	cmpl	%esi, %r8d
    000002f0: 	jle	.Ltmp776 # Offset: 752
    000002f2: 	leal	0x2(%rdx), %esi
    000002f5: 	addw	0x2(%rdi,%rcx), %ax
    000002fa: 	cmpl	%esi, %r8d
    000002fd: 	jle	.Ltmp776 # Offset: 765
    000002ff: 	leal	0x3(%rdx), %esi
    00000302: 	addw	0x4(%rdi,%rcx), %ax
    00000307: 	cmpl	%r8d, %esi
    0000030a: 	jge	.Ltmp776 # Offset: 778
    0000030c: 	leal	0x4(%rdx), %esi
    0000030f: 	addw	0x6(%rdi,%rcx), %ax
    00000314: 	cmpl	%r8d, %esi
    00000317: 	jge	.Ltmp776 # Offset: 791
    00000319: 	leal	0x5(%rdx), %esi
    0000031c: 	addw	0x8(%rdi,%rcx), %ax
    00000321: 	cmpl	%r8d, %esi
    00000324: 	jge	.Ltmp776 # Offset: 804
    00000326: 	addl	$0x6, %edx
    00000329: 	addw	0xa(%rdi,%rcx), %ax
    0000032e: 	cmpl	%edx, %r8d
    00000331: 	jle	.Ltmp776 # Offset: 817
    00000333: 	addw	0xc(%rdi,%rcx), %ax
.Ltmp776:
    00000338: 	retq # Offset: 824
    00000339: 	nopl	(%rax) # Size: 7
.Ltmp770:
    00000340: 	movl	%esi, %edx
    00000342: 	jmp	.Ltmp774 # Offset: 834
    00000347: 	nopw	(%rax,%rax) # Size: 9
.Ltmp765:
    00000350: 	xorl	%esi, %esi
    00000352: 	xorl	%eax, %eax
    00000354: 	jmp	.Ltmp768 # Offset: 852
.Ltmp766:
    00000359: 	xorl	%ecx, %ecx
    0000035b: 	xorl	%r10d, %r10d
    0000035e: 	xorl	%eax, %eax
    00000360: 	jmp	.Ltmp780 # Offset: 864
.Ltmp771:
    00000365: 	movl	%esi, %r10d
    00000368: 	xorl	%ecx, %ecx
    0000036a: 	jmp	.Ltmp781 # Offset: 874
DWARF CFI Instructions:
    <empty>
End of Function "_Z24test_while_loop3_halfoptIsET_PKS0_iS0_"

Binary Function "_Z17test_do_loop3_optIsET_PKS0_iS0_" after disassembly {
  Number      : 122
  State       : disassembled
  Address     : 0xba80
  Size        : 0x4ab
  MaxSize     : 0x4b0
  Offset      : 0xba80
  Section     : .text
  Orc Section : .local.text._Z17test_do_loop3_optIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0121:
    00000000: 	endbr64
    00000004: 	movswl	%dx, %r10d
    00000008: 	movq	%rdi, %rcx
    0000000b: 	leal	(%r10,%r10), %r8d
    0000000f: 	cmpl	%esi, %r8d
    00000012: 	jg	.Ltmp782 # Offset: 18
    00000018: 	testl	%esi, %esi
    0000001a: 	movl	$0x1, %edi
    0000001f: 	cmovgl	%esi, %edi
    00000022: 	cmpl	$0x7, %esi
    00000025: 	jle	.Ltmp783 # Offset: 37
    0000002b: 	movl	%edi, %edx
    0000002d: 	pxor	%xmm0, %xmm0
    00000031: 	movq	%rcx, %rax
    00000034: 	shrl	$0x3, %edx
    00000037: 	subl	$0x1, %edx
    0000003a: 	shlq	$0x4, %rdx
    0000003e: 	leaq	0x10(%rcx,%rdx), %rdx
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp784:
    00000048: 	movdqu	(%rax), %xmm3
    0000004c: 	addq	$0x10, %rax
    00000050: 	paddw	%xmm3, %xmm0
    00000054: 	cmpq	%rdx, %rax
    00000057: 	jne	.Ltmp784 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	movl	%edi, %edx
    0000005f: 	psrldq	$0x8, %xmm1
    00000064: 	andl	$-0x8, %edx
    00000067: 	andl	$0x7, %edi
    0000006a: 	paddw	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x4, %xmm1
    00000077: 	paddw	%xmm1, %xmm0
    0000007b: 	movdqa	%xmm0, %xmm1
    0000007f: 	psrldq	$0x2, %xmm1
    00000084: 	paddw	%xmm1, %xmm0
    00000088: 	pextrw	$0x0, %xmm0, %eax
    0000008d: 	je	.Ltmp785 # Offset: 141
.Ltmp800:
    00000093: 	movslq	%edx, %r8
    00000096: 	leaq	(%r8,%r8), %rdi
    0000009a: 	addw	(%rcx,%r8,2), %ax
    0000009f: 	leal	0x1(%rdx), %r8d
    000000a3: 	cmpl	%r8d, %esi
    000000a6: 	jle	.Ltmp786 # Offset: 166
    000000ac: 	leal	0x2(%rdx), %r8d
    000000b0: 	addw	0x2(%rcx,%rdi), %ax
    000000b5: 	cmpl	%r8d, %esi
    000000b8: 	jle	.Ltmp786 # Offset: 184
    000000be: 	leal	0x3(%rdx), %r8d
    000000c2: 	addw	0x4(%rcx,%rdi), %ax
    000000c7: 	cmpl	%esi, %r8d
    000000ca: 	jge	.Ltmp786 # Offset: 202
    000000d0: 	leal	0x4(%rdx), %r8d
    000000d4: 	addw	0x6(%rcx,%rdi), %ax
    000000d9: 	cmpl	%r8d, %esi
    000000dc: 	jle	.Ltmp786 # Offset: 220
    000000e2: 	leal	0x5(%rdx), %r8d
    000000e6: 	addw	0x8(%rcx,%rdi), %ax
    000000eb: 	cmpl	%r8d, %esi
    000000ee: 	jle	.Ltmp786 # Offset: 238
    000000f4: 	addl	$0x6, %edx
    000000f7: 	addw	0xa(%rcx,%rdi), %ax
    000000fc: 	cmpl	%esi, %edx
    000000fe: 	jge	.Ltmp786 # Offset: 254
    00000104: 	addw	0xc(%rcx,%rdi), %ax
    00000109: 	retq # Offset: 265
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp782:
    00000110: 	testw	%dx, %dx
    00000113: 	movl	$0x1, %r9d
    00000119: 	pushq	%r12
    0000011b: 	movl	%edx, %edi
    0000011d: 	pushq	%rbp
    0000011e: 	cmovgl	%r10d, %r9d
    00000122: 	pushq	%rbx
    00000123: 	cmpw	$0x7, %dx
    00000127: 	jle	.Ltmp787 # Offset: 295
    0000012d: 	movl	%r9d, %edx
    00000130: 	movdqa	DATAat0x388a0(%rip), %xmm1
    00000138: 	movq	%rcx, %rax
    0000013b: 	pxor	%xmm0, %xmm0
    0000013f: 	shrl	$0x3, %edx
    00000142: 	subl	$0x1, %edx
    00000145: 	shlq	$0x4, %rdx
    00000149: 	leaq	0x10(%rcx,%rdx), %rdx
    0000014e: 	nop # Size: 2
.Ltmp788:
    00000150: 	movdqu	(%rax), %xmm4
    00000154: 	paddw	%xmm1, %xmm0
    00000158: 	addq	$0x10, %rax
    0000015c: 	paddw	%xmm4, %xmm0
    00000160: 	cmpq	%rdx, %rax
    00000163: 	jne	.Ltmp788 # Offset: 355
    00000165: 	movdqa	%xmm0, %xmm1
    00000169: 	movl	%r9d, %edx
    0000016c: 	psrldq	$0x8, %xmm1
    00000171: 	andl	$-0x8, %edx
    00000174: 	paddw	%xmm1, %xmm0
    00000178: 	movl	%edx, %r11d
    0000017b: 	movdqa	%xmm0, %xmm1
    0000017f: 	psrldq	$0x4, %xmm1
    00000184: 	paddw	%xmm1, %xmm0
    00000188: 	movdqa	%xmm0, %xmm1
    0000018c: 	psrldq	$0x2, %xmm1
    00000191: 	paddw	%xmm1, %xmm0
    00000195: 	pextrw	$0x0, %xmm0, %eax
    0000019a: 	cmpl	%edx, %r9d
    0000019d: 	je	.Ltmp789 # Offset: 413
.Ltmp801:
    0000019f: 	subl	%edx, %r9d
    000001a2: 	leal	-0x1(%r9), %ebx
    000001a6: 	cmpl	$0x2, %ebx
    000001a9: 	jbe	.Ltmp790 # Offset: 425
    000001ab: 	movq	DATAat0x388a0(%rip), %xmm1
    000001b3: 	movq	(%rcx,%rdx,2), %xmm0
    000001b8: 	paddw	%xmm1, %xmm0
    000001bc: 	pextrw	$0x1, %xmm0, %ebx
    000001c1: 	pextrw	$0x0, %xmm0, %edx
    000001c6: 	addl	%ebx, %edx
    000001c8: 	pextrw	$0x2, %xmm0, %ebx
    000001cd: 	addl	%ebx, %edx
    000001cf: 	pextrw	$0x3, %xmm0, %ebx
    000001d4: 	addl	%ebx, %edx
    000001d6: 	addl	%edx, %eax
    000001d8: 	movl	%r9d, %edx
    000001db: 	andl	$-0x4, %edx
    000001de: 	addl	%edx, %r11d
    000001e1: 	cmpl	%edx, %r9d
    000001e4: 	je	.Ltmp789 # Offset: 484
.Ltmp790:
    000001e6: 	movslq	%r11d, %rdx
    000001e9: 	leaq	(%rdx,%rdx), %r9
    000001ed: 	movzwl	(%rcx,%rdx,2), %edx
    000001f1: 	leal	0x1(%rax,%rdx), %eax
    000001f5: 	leal	0x1(%r11), %edx
    000001f9: 	cmpl	%edx, %r10d
    000001fc: 	jle	.Ltmp789 # Offset: 508
    000001fe: 	addw	0x2(%rcx,%r9), %ax
    00000204: 	addl	$0x2, %r11d
    00000208: 	addl	$0x1, %eax
    0000020b: 	cmpl	%r11d, %r10d
    0000020e: 	jle	.Ltmp789 # Offset: 526
    00000210: 	movzwl	0x4(%rcx,%r9), %edx
    00000216: 	leal	0x1(%rax,%rdx), %eax
.Ltmp789:
    0000021a: 	testw	%di, %di
    0000021d: 	movl	$0x1, %edx
    00000222: 	movl	%r8d, %r10d
    00000225: 	movl	$0x1, %ebp
    0000022a: 	cmovgl	%edi, %edx
    0000022d: 	movswl	%dx, %r11d
    00000231: 	subl	%r11d, %r10d
    00000234: 	cmpl	%r11d, %r8d
    00000237: 	movl	%r11d, %r9d
    0000023a: 	cmovgl	%r10d, %ebp
    0000023e: 	subl	$0x1, %r10d
    00000242: 	cmpl	%r11d, %r8d
    00000245: 	jle	.Ltmp791 # Offset: 581
    0000024b: 	cmpl	$0x6, %r10d
    0000024f: 	jbe	.Ltmp791 # Offset: 591
    00000255: 	movswq	%r11w, %rdx
    00000259: 	pxor	%xmm0, %xmm0
    0000025d: 	pcmpeqd	%xmm2, %xmm2
    00000261: 	leaq	(%rcx,%rdx,2), %rdi
    00000265: 	movl	%ebp, %edx
    00000267: 	shrl	$0x3, %edx
    0000026a: 	leal	-0x1(%rdx), %ebx
    0000026d: 	leaq	0x10(%rdi), %rdx
    00000271: 	shlq	$0x4, %rbx
    00000275: 	addq	%rdx, %rbx
    00000278: 	jmp	.Ltmp792 # Offset: 632
    0000027a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp793:
    00000280: 	addq	$0x10, %rdx
.Ltmp792:
    00000284: 	movdqu	(%rdi), %xmm1
    00000288: 	paddw	%xmm2, %xmm0
    0000028c: 	movq	%rdx, %rdi
    0000028f: 	paddw	%xmm1, %xmm0
    00000293: 	cmpq	%rbx, %rdx
    00000296: 	jne	.Ltmp793 # Offset: 662
    00000298: 	movdqa	%xmm0, %xmm1
    0000029c: 	movl	%ebp, %r12d
    0000029f: 	psrldq	$0x8, %xmm1
    000002a4: 	andl	$-0x8, %r12d
    000002a8: 	paddw	%xmm1, %xmm0
    000002ac: 	leal	(%r12,%r11), %edi
    000002b0: 	movdqa	%xmm0, %xmm1
    000002b4: 	psrldq	$0x4, %xmm1
    000002b9: 	paddw	%xmm1, %xmm0
    000002bd: 	movdqa	%xmm0, %xmm1
    000002c1: 	psrldq	$0x2, %xmm1
    000002c6: 	paddw	%xmm1, %xmm0
    000002ca: 	pextrw	$0x0, %xmm0, %edx
    000002cf: 	addl	%edx, %eax
    000002d1: 	cmpl	%r12d, %ebp
    000002d4: 	je	.Ltmp794 # Offset: 724
.Ltmp802:
    000002d6: 	movl	%ebp, %ebx
    000002d8: 	subl	$0x1, %ebp
    000002db: 	subl	%r12d, %ebp
    000002de: 	subl	%r12d, %ebx
    000002e1: 	cmpl	$0x2, %ebp
    000002e4: 	jbe	.Ltmp795 # Offset: 740
    000002e6: 	movq	DATAat0x38a10(%rip), %xmm1
    000002ee: 	movswq	%r9w, %rdx
    000002f2: 	addq	%r12, %rdx
    000002f5: 	movq	(%rcx,%rdx,2), %xmm0
    000002fa: 	paddw	%xmm1, %xmm0
    000002fe: 	pextrw	$0x1, %xmm0, %ebp
    00000303: 	pextrw	$0x0, %xmm0, %edx
    00000308: 	addl	%ebp, %edx
    0000030a: 	pextrw	$0x2, %xmm0, %ebp
    0000030f: 	addl	%ebp, %edx
    00000311: 	pextrw	$0x3, %xmm0, %ebp
    00000316: 	addl	%ebp, %edx
    00000318: 	addl	%edx, %eax
    0000031a: 	movl	%ebx, %edx
    0000031c: 	andl	$-0x4, %edx
    0000031f: 	addl	%edx, %edi
    00000321: 	cmpl	%edx, %ebx
    00000323: 	je	.Ltmp794 # Offset: 803
.Ltmp795:
    00000325: 	movslq	%edi, %rdx
    00000328: 	leaq	(%rdx,%rdx), %rbx
    0000032c: 	movzwl	(%rcx,%rdx,2), %edx
    00000330: 	leal	-0x1(%rax,%rdx), %eax
    00000334: 	leal	0x1(%rdi), %edx
    00000337: 	cmpl	%edx, %r8d
    0000033a: 	jle	.Ltmp794 # Offset: 826
    0000033c: 	addw	0x2(%rcx,%rbx), %ax
    00000341: 	addl	$0x2, %edi
    00000344: 	subl	$0x1, %eax
    00000347: 	cmpl	%edi, %r8d
    0000034a: 	jle	.Ltmp794 # Offset: 842
    0000034c: 	movzwl	0x4(%rcx,%rbx), %edx
    00000351: 	leal	-0x1(%rax,%rdx), %eax
.Ltmp794:
    00000355: 	xorl	%edx, %edx
    00000357: 	cmpl	%r11d, %r8d
    0000035a: 	cmovlel	%edx, %r10d
    0000035e: 	movl	%esi, %edx
    00000360: 	leal	0x1(%r11,%r10), %r8d
    00000365: 	movl	$0x1, %r11d
    0000036b: 	subl	%r8d, %edx
    0000036e: 	cmpl	%r8d, %esi
    00000371: 	cmovgl	%edx, %r11d
    00000375: 	subl	$0x1, %edx
    00000378: 	cmpl	$0x6, %edx
    0000037b: 	jbe	.Ltmp796 # Offset: 891
    00000381: 	cmpl	%r8d, %esi
    00000384: 	jle	.Ltmp796 # Offset: 900
    0000038a: 	movswq	%r9w, %rdi
    0000038e: 	movslq	%r10d, %r10
    00000391: 	pxor	%xmm0, %xmm0
    00000395: 	leaq	0x1(%rdi,%r10), %rdx
    0000039a: 	leaq	(%rcx,%rdx,2), %rdi
    0000039e: 	movl	%r11d, %edx
    000003a1: 	shrl	$0x3, %edx
    000003a4: 	leal	-0x1(%rdx), %r9d
    000003a8: 	leaq	0x10(%rdi), %rdx
    000003ac: 	shlq	$0x4, %r9
    000003b0: 	addq	%rdx, %r9
    000003b3: 	jmp	.Ltmp797 # Offset: 947
    000003b5: 	nopl	(%rax) # Size: 3
.Ltmp798:
    000003b8: 	addq	$0x10, %rdx
.Ltmp797:
    000003bc: 	movdqu	(%rdi), %xmm1
    000003c0: 	movq	%rdx, %rdi
    000003c3: 	paddw	%xmm1, %xmm0
    000003c7: 	cmpq	%rdx, %r9
    000003ca: 	jne	.Ltmp798 # Offset: 970
    000003cc: 	movdqa	%xmm0, %xmm1
    000003d0: 	psrldq	$0x8, %xmm1
    000003d5: 	paddw	%xmm1, %xmm0
    000003d9: 	movdqa	%xmm0, %xmm1
    000003dd: 	psrldq	$0x4, %xmm1
    000003e2: 	paddw	%xmm1, %xmm0
    000003e6: 	movdqa	%xmm0, %xmm1
    000003ea: 	psrldq	$0x2, %xmm1
    000003ef: 	paddw	%xmm1, %xmm0
    000003f3: 	pextrw	$0x0, %xmm0, %edx
    000003f8: 	addl	%edx, %eax
    000003fa: 	movl	%r11d, %edx
    000003fd: 	andl	$-0x8, %edx
    00000400: 	addl	%edx, %r8d
    00000403: 	cmpl	%r11d, %edx
    00000406: 	je	.Ltmp799 # Offset: 1030
.Ltmp796:
    00000408: 	movslq	%r8d, %rdi
    0000040b: 	leaq	(%rdi,%rdi), %rdx
    0000040f: 	addw	(%rcx,%rdi,2), %ax
    00000413: 	leal	0x1(%r8), %edi
    00000417: 	cmpl	%edi, %esi
    00000419: 	jle	.Ltmp799 # Offset: 1049
    0000041b: 	leal	0x2(%r8), %edi
    0000041f: 	addw	0x2(%rcx,%rdx), %ax
    00000424: 	cmpl	%edi, %esi
    00000426: 	jle	.Ltmp799 # Offset: 1062
    00000428: 	leal	0x3(%r8), %edi
    0000042c: 	addw	0x4(%rcx,%rdx), %ax
    00000431: 	cmpl	%edi, %esi
    00000433: 	jle	.Ltmp799 # Offset: 1075
    00000435: 	leal	0x4(%r8), %edi
    00000439: 	addw	0x6(%rcx,%rdx), %ax
    0000043e: 	cmpl	%edi, %esi
    00000440: 	jle	.Ltmp799 # Offset: 1088
    00000442: 	leal	0x5(%r8), %edi
    00000446: 	addw	0x8(%rcx,%rdx), %ax
    0000044b: 	cmpl	%edi, %esi
    0000044d: 	jle	.Ltmp799 # Offset: 1101
    0000044f: 	addl	$0x6, %r8d
    00000453: 	addw	0xa(%rcx,%rdx), %ax
    00000458: 	cmpl	%r8d, %esi
    0000045b: 	jle	.Ltmp799 # Offset: 1115
    0000045d: 	addw	0xc(%rcx,%rdx), %ax
.Ltmp799:
    00000462: 	popq	%rbx
    00000463: 	popq	%rbp
    00000464: 	popq	%r12
    00000466: 	retq # Offset: 1126
    00000467: 	nopw	(%rax,%rax) # Size: 9
.Ltmp786:
    00000470: 	retq # Offset: 1136
    00000471: 	nopl	(%rax) # Size: 7
.Ltmp783:
    00000478: 	xorl	%edx, %edx
    0000047a: 	xorl	%eax, %eax
    0000047c: 	jmp	.Ltmp800 # Offset: 1148
    00000481: 	nopl	(%rax) # Size: 7
.Ltmp787:
    00000488: 	xorl	%edx, %edx
    0000048a: 	xorl	%r11d, %r11d
    0000048d: 	xorl	%eax, %eax
    0000048f: 	jmp	.Ltmp801 # Offset: 1167
    00000494: 	nopl	(%rax) # Size: 4
.Ltmp785:
    00000498: 	retq # Offset: 1176
    00000499: 	nopl	(%rax) # Size: 7
.Ltmp791:
    000004a0: 	movl	%r11d, %edi
    000004a3: 	xorl	%r12d, %r12d
    000004a6: 	jmp	.Ltmp802 # Offset: 1190
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_do_loop3_optIsET_PKS0_iS0_"

Binary Function "_Z19test_goto_loop3_optIsET_PKS0_iS0_" after disassembly {
  Number      : 123
  State       : disassembled
  Address     : 0xbf30
  Size        : 0x27a
  MaxSize     : 0x280
  Offset      : 0xbf30
  Section     : .text
  Orc Section : .local.text._Z19test_goto_loop3_optIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0122:
    00000000: 	endbr64
    00000004: 	movswl	%dx, %edx
    00000007: 	movl	%esi, %ecx
    00000009: 	xorl	%eax, %eax
    0000000b: 	leal	(%rdx,%rdx), %r8d
    0000000f: 	cmpl	%esi, %r8d
    00000012: 	jg	.Ltmp803 # Offset: 18
    00000018: 	testl	%esi, %esi
    0000001a: 	jle	.Ltmp804 # Offset: 26
    00000020: 	leal	-0x1(%rsi), %edx
    00000023: 	cmpl	$0x6, %edx
    00000026: 	jbe	.Ltmp805 # Offset: 38
    0000002c: 	movl	%esi, %edx
    0000002e: 	movq	%rdi, %rax
    00000031: 	pxor	%xmm0, %xmm0
    00000035: 	shrl	$0x3, %edx
    00000038: 	subl	$0x1, %edx
    0000003b: 	shlq	$0x4, %rdx
    0000003f: 	leaq	0x10(%rdi,%rdx), %rdx
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp806:
    00000048: 	movdqu	(%rax), %xmm2
    0000004c: 	addq	$0x10, %rax
    00000050: 	paddw	%xmm2, %xmm0
    00000054: 	cmpq	%rdx, %rax
    00000057: 	jne	.Ltmp806 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	movl	%ecx, %edx
    0000005f: 	psrldq	$0x8, %xmm1
    00000064: 	andl	$-0x8, %edx
    00000067: 	paddw	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	psrldq	$0x4, %xmm1
    00000074: 	paddw	%xmm1, %xmm0
    00000078: 	movdqa	%xmm0, %xmm1
    0000007c: 	psrldq	$0x2, %xmm1
    00000081: 	paddw	%xmm1, %xmm0
    00000085: 	pextrw	$0x0, %xmm0, %eax
    0000008a: 	testb	$0x7, %cl
    0000008d: 	je	.Ltmp807 # Offset: 141
.Ltmp815:
    00000093: 	movslq	%edx, %r8
    00000096: 	leaq	(%r8,%r8), %rsi
    0000009a: 	addw	(%rdi,%r8,2), %ax
    0000009f: 	leal	0x1(%rdx), %r8d
    000000a3: 	cmpl	%r8d, %ecx
    000000a6: 	jle	.Ltmp804 # Offset: 166
    000000a8: 	leal	0x2(%rdx), %r8d
    000000ac: 	addw	0x2(%rdi,%rsi), %ax
    000000b1: 	cmpl	%r8d, %ecx
    000000b4: 	jle	.Ltmp804 # Offset: 180
    000000b6: 	leal	0x3(%rdx), %r8d
    000000ba: 	addw	0x4(%rdi,%rsi), %ax
    000000bf: 	cmpl	%r8d, %ecx
    000000c2: 	jle	.Ltmp804 # Offset: 194
    000000c4: 	leal	0x4(%rdx), %r8d
    000000c8: 	addw	0x6(%rdi,%rsi), %ax
    000000cd: 	cmpl	%ecx, %r8d
    000000d0: 	jge	.Ltmp804 # Offset: 208
    000000d2: 	leal	0x5(%rdx), %r8d
    000000d6: 	addw	0x8(%rdi,%rsi), %ax
    000000db: 	cmpl	%r8d, %ecx
    000000de: 	jle	.Ltmp804 # Offset: 222
    000000e0: 	addl	$0x6, %edx
    000000e3: 	addw	0xa(%rdi,%rsi), %ax
    000000e8: 	cmpl	%edx, %ecx
    000000ea: 	jle	.Ltmp804 # Offset: 234
    000000ec: 	addw	0xc(%rdi,%rsi), %ax
    000000f1: 	retq # Offset: 241
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp803:
    000000f8: 	testl	%esi, %esi
    000000fa: 	jg	.Ltmp808 # Offset: 250
.Ltmp804:
    000000fc: 	retq # Offset: 252
    000000fd: 	nopl	(%rax) # Size: 3
.Ltmp808:
    00000100: 	cmpl	%esi, %edx
    00000102: 	movl	$0x1, %r9d
    00000108: 	cmovgl	%esi, %edx
    0000010b: 	testl	%edx, %edx
    0000010d: 	cmovgl	%edx, %r9d
    00000111: 	cmpl	$0x7, %edx
    00000114: 	jle	.Ltmp809 # Offset: 276
    0000011a: 	movl	%r9d, %esi
    0000011d: 	movdqa	DATAat0x388a0(%rip), %xmm1
    00000125: 	pxor	%xmm0, %xmm0
    00000129: 	movq	%rdi, %rax
    0000012c: 	shrl	$0x3, %esi
    0000012f: 	subl	$0x1, %esi
    00000132: 	shlq	$0x4, %rsi
    00000136: 	leaq	0x10(%rdi,%rsi), %rsi
    0000013b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp810:
    00000140: 	movdqu	(%rax), %xmm3
    00000144: 	paddw	%xmm1, %xmm0
    00000148: 	addq	$0x10, %rax
    0000014c: 	paddw	%xmm3, %xmm0
    00000150: 	cmpq	%rsi, %rax
    00000153: 	jne	.Ltmp810 # Offset: 339
    00000155: 	movdqa	%xmm0, %xmm1
    00000159: 	movl	%r9d, %esi
    0000015c: 	psrldq	$0x8, %xmm1
    00000161: 	andl	$-0x8, %esi
    00000164: 	paddw	%xmm1, %xmm0
    00000168: 	movl	%esi, %r10d
    0000016b: 	movdqa	%xmm0, %xmm1
    0000016f: 	psrldq	$0x4, %xmm1
    00000174: 	paddw	%xmm1, %xmm0
    00000178: 	movdqa	%xmm0, %xmm1
    0000017c: 	psrldq	$0x2, %xmm1
    00000181: 	paddw	%xmm1, %xmm0
    00000185: 	pextrw	$0x0, %xmm0, %eax
    0000018a: 	cmpl	%esi, %r9d
    0000018d: 	je	.Ltmp811 # Offset: 397
.Ltmp816:
    00000193: 	subl	%esi, %r9d
    00000196: 	leal	-0x1(%r9), %r11d
    0000019a: 	cmpl	$0x2, %r11d
    0000019e: 	jbe	.Ltmp812 # Offset: 414
    000001a0: 	movq	DATAat0x388a0(%rip), %xmm1
    000001a8: 	movq	(%rdi,%rsi,2), %xmm0
    000001ad: 	paddw	%xmm1, %xmm0
    000001b1: 	pextrw	$0x1, %xmm0, %r11d
    000001b7: 	pextrw	$0x0, %xmm0, %esi
    000001bc: 	addl	%r11d, %esi
    000001bf: 	pextrw	$0x2, %xmm0, %r11d
    000001c5: 	addl	%r11d, %esi
    000001c8: 	pextrw	$0x3, %xmm0, %r11d
    000001ce: 	addl	%r11d, %esi
    000001d1: 	addl	%esi, %eax
    000001d3: 	movl	%r9d, %esi
    000001d6: 	andl	$-0x4, %esi
    000001d9: 	addl	%esi, %r10d
    000001dc: 	cmpl	%esi, %r9d
    000001df: 	je	.Ltmp811 # Offset: 479
.Ltmp812:
    000001e1: 	movslq	%r10d, %rsi
    000001e4: 	leaq	(%rsi,%rsi), %r9
    000001e8: 	movzwl	(%rdi,%rsi,2), %esi
    000001ec: 	leal	0x1(%rax,%rsi), %eax
    000001f0: 	leal	0x1(%r10), %esi
    000001f4: 	cmpl	%esi, %edx
    000001f6: 	jle	.Ltmp811 # Offset: 502
    000001f8: 	addw	0x2(%rdi,%r9), %ax
    000001fe: 	addl	$0x2, %r10d
    00000202: 	addl	$0x1, %eax
    00000205: 	cmpl	%r10d, %edx
    00000208: 	jle	.Ltmp811 # Offset: 520
    0000020a: 	movzwl	0x4(%rdi,%r9), %esi
    00000210: 	leal	0x1(%rax,%rsi), %eax
.Ltmp811:
    00000214: 	testl	%edx, %edx
    00000216: 	movl	$0x1, %esi
    0000021b: 	cmovgl	%edx, %esi
    0000021e: 	cmpl	%ecx, %esi
    00000220: 	jge	.Ltmp804 # Offset: 544
    00000226: 	subl	$0x1, %ecx
    00000229: 	leal	0x1(%rsi), %edx
    0000022c: 	subl	%esi, %ecx
    0000022e: 	addl	$0x2, %esi
    00000231: 	movslq	%edx, %rdx
    00000234: 	movslq	%esi, %rsi
    00000237: 	addq	%rsi, %rcx
    0000023a: 	jmp	.Ltmp813 # Offset: 570
    0000023c: 	nopl	(%rax) # Size: 4
.Ltmp814:
    00000240: 	addq	$0x1, %rdx
    00000244: 	cmpq	%rdx, %rcx
    00000247: 	je	.Ltmp804 # Offset: 583
.Ltmp813:
    0000024d: 	movzwl	-0x2(%rdi,%rdx,2), %esi
    00000252: 	leal	-0x1(%rax,%rsi), %eax
    00000256: 	cmpl	%edx, %r8d
    00000259: 	jg	.Ltmp814 # Offset: 601
    0000025b: 	retq # Offset: 603
    0000025c: 	nopl	(%rax) # Size: 4
.Ltmp807:
    00000260: 	retq # Offset: 608
    00000261: 	nopl	(%rax) # Size: 7
.Ltmp805:
    00000268: 	xorl	%edx, %edx
    0000026a: 	jmp	.Ltmp815 # Offset: 618
    0000026f: 	nop # Size: 1
.Ltmp809:
    00000270: 	xorl	%esi, %esi
    00000272: 	xorl	%r10d, %r10d
    00000275: 	jmp	.Ltmp816 # Offset: 629
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_goto_loop3_optIsET_PKS0_iS0_"

Binary Function "_Z23test_goto_loop3_halfoptIsET_PKS0_iS0_" after disassembly {
  Number      : 124
  State       : disassembled
  Address     : 0xc1b0
  Size        : 0x15e
  MaxSize     : 0x160
  Offset      : 0xc1b0
  Section     : .text
  Orc Section : .local.text._Z23test_goto_loop3_halfoptIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0123:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	testl	%esi, %esi
    00000009: 	jle	.Ltmp817 # Offset: 9
    0000000f: 	movswl	%dx, %edx
    00000012: 	movl	$0x1, %ecx
    00000017: 	cmpl	%edx, %esi
    00000019: 	movl	%edx, %r9d
    0000001c: 	cmovlel	%esi, %r9d
.Ltmp818:
    00000020: 	movzwl	-0x2(%rdi,%rcx,2), %eax
    00000025: 	leal	0x1(%r8,%rax), %r8d
    0000002a: 	movl	%ecx, %eax
    0000002c: 	addq	$0x1, %rcx
    00000030: 	cmpl	%r9d, %eax
    00000033: 	jl	.Ltmp818 # Offset: 51
    00000035: 	cmpl	%eax, %esi
    00000037: 	jle	.Ltmp817 # Offset: 55
    0000003d: 	leal	(%rdx,%rdx), %ecx
    00000040: 	addl	$0x1, %eax
    00000043: 	cmpl	%esi, %ecx
    00000045: 	cltq
    00000047: 	cmovgl	%esi, %ecx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp819:
    00000050: 	movzwl	-0x2(%rdi,%rax,2), %edx
    00000055: 	movl	%eax, %r9d
    00000058: 	addq	$0x1, %rax
    0000005c: 	leal	-0x1(%r8,%rdx), %edx
    00000061: 	movl	%edx, %r8d
    00000064: 	cmpl	%ecx, %r9d
    00000067: 	jl	.Ltmp819 # Offset: 103
    00000069: 	cmpl	%r9d, %esi
    0000006c: 	jle	.Ltmp817 # Offset: 108
    00000072: 	movl	%esi, %r10d
    00000075: 	subl	%r9d, %r10d
    00000078: 	leal	-0x1(%r10), %eax
    0000007c: 	cmpl	$0x6, %eax
    0000007f: 	jbe	.Ltmp820 # Offset: 127
    00000081: 	movl	%r10d, %ecx
    00000084: 	movslq	%r9d, %rax
    00000087: 	pxor	%xmm0, %xmm0
    0000008b: 	shrl	$0x3, %ecx
    0000008e: 	leaq	(%rdi,%rax,2), %rax
    00000092: 	leal	-0x1(%rcx), %r8d
    00000096: 	leaq	0x10(%rax), %rcx
    0000009a: 	shlq	$0x4, %r8
    0000009e: 	addq	%rcx, %r8
    000000a1: 	jmp	.Ltmp821 # Offset: 161
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp822:
    000000a8: 	addq	$0x10, %rcx
.Ltmp821:
    000000ac: 	movdqu	(%rax), %xmm1
    000000b0: 	movq	%rcx, %rax
    000000b3: 	paddw	%xmm1, %xmm0
    000000b7: 	cmpq	%r8, %rcx
    000000ba: 	jne	.Ltmp822 # Offset: 186
    000000bc: 	movdqa	%xmm0, %xmm1
    000000c0: 	movl	%r10d, %eax
    000000c3: 	psrldq	$0x8, %xmm1
    000000c8: 	andl	$-0x8, %eax
    000000cb: 	paddw	%xmm1, %xmm0
    000000cf: 	addl	%eax, %r9d
    000000d2: 	movdqa	%xmm0, %xmm1
    000000d6: 	psrldq	$0x4, %xmm1
    000000db: 	paddw	%xmm1, %xmm0
    000000df: 	movdqa	%xmm0, %xmm1
    000000e3: 	psrldq	$0x2, %xmm1
    000000e8: 	paddw	%xmm1, %xmm0
    000000ec: 	pextrw	$0x0, %xmm0, %r8d
    000000f2: 	addl	%edx, %r8d
    000000f5: 	cmpl	%r10d, %eax
    000000f8: 	je	.Ltmp817 # Offset: 248
.Ltmp820:
    000000fa: 	movslq	%r9d, %rax
    000000fd: 	leaq	(%rax,%rax), %rdx
    00000101: 	addw	(%rdi,%rax,2), %r8w
    00000106: 	leal	0x1(%r9), %eax
    0000010a: 	cmpl	%eax, %esi
    0000010c: 	jle	.Ltmp817 # Offset: 268
    0000010e: 	leal	0x2(%r9), %eax
    00000112: 	addw	0x2(%rdi,%rdx), %r8w
    00000118: 	cmpl	%eax, %esi
    0000011a: 	jle	.Ltmp817 # Offset: 282
    0000011c: 	leal	0x3(%r9), %eax
    00000120: 	addw	0x4(%rdi,%rdx), %r8w
    00000126: 	cmpl	%eax, %esi
    00000128: 	jle	.Ltmp817 # Offset: 296
    0000012a: 	leal	0x4(%r9), %eax
    0000012e: 	addw	0x6(%rdi,%rdx), %r8w
    00000134: 	cmpl	%eax, %esi
    00000136: 	jle	.Ltmp817 # Offset: 310
    00000138: 	leal	0x5(%r9), %eax
    0000013c: 	addw	0x8(%rdi,%rdx), %r8w
    00000142: 	cmpl	%eax, %esi
    00000144: 	jle	.Ltmp817 # Offset: 324
    00000146: 	leal	0x6(%r9), %eax
    0000014a: 	addw	0xa(%rdi,%rdx), %r8w
    00000150: 	cmpl	%eax, %esi
    00000152: 	jle	.Ltmp817 # Offset: 338
    00000154: 	addw	0xc(%rdi,%rdx), %r8w
.Ltmp817:
    0000015a: 	movl	%r8d, %eax
    0000015d: 	retq # Offset: 349
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_goto_loop3_halfoptIsET_PKS0_iS0_"

Binary Function "_Z20test_for_loop3_paramIsET_PKS0_iS0_" after disassembly {
  Number      : 125
  State       : disassembled
  Address     : 0xc310
  Size        : 0x1a1
  MaxSize     : 0x1b0
  Offset      : 0xc310
  Section     : .text
  Orc Section : .local.text._Z20test_for_loop3_paramIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0124:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edi
    00000009: 	testl	%esi, %esi
    0000000b: 	jle	.Ltmp823 # Offset: 11
    00000011: 	movswl	%dx, %edx
    00000014: 	leal	(%rdx,%rdx), %r9d
    00000018: 	testl	%edx, %edx
    0000001a: 	jle	.Ltmp824 # Offset: 26
    00000020: 	cmpl	%esi, %edx
    00000022: 	movl	$0x1, %r10d
    00000028: 	cmovgl	%esi, %edx
    0000002b: 	testl	%edx, %edx
    0000002d: 	cmovgl	%edx, %r10d
    00000031: 	cmpl	$0x7, %edx
    00000034: 	jle	.Ltmp825 # Offset: 52
    0000003a: 	movl	%r10d, %esi
    0000003d: 	movdqa	DATAat0x38850(%rip), %xmm2
    00000045: 	movdqa	DATAat0x388b0(%rip), %xmm5
    0000004d: 	movq	%rcx, %rax
    00000050: 	shrl	$0x3, %esi
    00000053: 	movdqa	DATAat0x388a0(%rip), %xmm4
    0000005b: 	movdqa	DATAat0x388c0(%rip), %xmm3
    00000063: 	pxor	%xmm1, %xmm1
    00000067: 	subl	$0x1, %esi
    0000006a: 	shlq	$0x4, %rsi
    0000006e: 	leaq	0x10(%rcx,%rsi), %rsi
    00000073: 	nopl	(%rax,%rax) # Size: 5
.Ltmp826:
    00000078: 	movdqu	(%rax), %xmm6
    0000007c: 	movdqa	%xmm2, %xmm0
    00000080: 	paddw	%xmm4, %xmm1
    00000084: 	addq	$0x10, %rax
    00000088: 	paddd	%xmm5, %xmm2
    0000008c: 	paddd	%xmm3, %xmm0
    00000090: 	paddw	%xmm6, %xmm1
    00000094: 	cmpq	%rsi, %rax
    00000097: 	jne	.Ltmp826 # Offset: 151
    00000099: 	pshufd	$0xff, %xmm0, %xmm0
    0000009e: 	movl	%r10d, %esi
    000000a1: 	movd	%xmm0, %eax
    000000a5: 	movdqa	%xmm1, %xmm0
    000000a9: 	andl	$-0x8, %esi
    000000ac: 	andl	$0x7, %r10d
    000000b0: 	psrldq	$0x8, %xmm0
    000000b5: 	paddw	%xmm0, %xmm1
    000000b9: 	movdqa	%xmm1, %xmm0
    000000bd: 	psrldq	$0x4, %xmm0
    000000c2: 	paddw	%xmm0, %xmm1
    000000c6: 	movdqa	%xmm1, %xmm0
    000000ca: 	psrldq	$0x2, %xmm0
    000000cf: 	paddw	%xmm0, %xmm1
    000000d3: 	pextrw	$0x0, %xmm1, %r8d
    000000d9: 	je	.Ltmp827 # Offset: 217
.Ltmp831:
    000000db: 	movslq	%esi, %rax
    000000de: 	leaq	(%rax,%rax), %r10
    000000e2: 	movzwl	(%rcx,%rax,2), %eax
    000000e6: 	leal	0x1(%r8,%rax), %r8d
    000000eb: 	leal	0x1(%rsi), %eax
    000000ee: 	cmpl	%eax, %edx
    000000f0: 	jle	.Ltmp827 # Offset: 240
    000000f2: 	addw	0x2(%rcx,%r10), %r8w
    000000f8: 	leal	0x2(%rsi), %eax
    000000fb: 	addl	$0x1, %r8d
    000000ff: 	cmpl	%eax, %edx
    00000101: 	jle	.Ltmp827 # Offset: 257
    00000103: 	movzwl	0x4(%rcx,%r10), %eax
    00000109: 	leal	0x1(%r8,%rax), %r8d
    0000010e: 	leal	0x3(%rsi), %eax
    00000111: 	cmpl	%edx, %eax
    00000113: 	jge	.Ltmp827 # Offset: 275
    00000115: 	movzwl	0x6(%rcx,%r10), %eax
    0000011b: 	leal	0x1(%r8,%rax), %r8d
    00000120: 	leal	0x4(%rsi), %eax
    00000123: 	cmpl	%eax, %edx
    00000125: 	jle	.Ltmp827 # Offset: 293
    00000127: 	movzwl	0x8(%rcx,%r10), %eax
    0000012d: 	leal	0x1(%r8,%rax), %r8d
    00000132: 	leal	0x5(%rsi), %eax
    00000135: 	cmpl	%eax, %edx
    00000137: 	jle	.Ltmp827 # Offset: 311
    00000139: 	movzwl	0xa(%rcx,%r10), %eax
    0000013f: 	leal	0x1(%r8,%rax), %r8d
    00000144: 	leal	0x6(%rsi), %eax
    00000147: 	cmpl	%eax, %edx
    00000149: 	jle	.Ltmp827 # Offset: 329
    0000014b: 	movzwl	0xc(%rcx,%r10), %eax
    00000151: 	leal	0x1(%r8,%rax), %r8d
    00000156: 	leal	0x7(%rsi), %eax
.Ltmp827:
    00000159: 	cmpl	%eax, %edi
    0000015b: 	jle	.Ltmp828 # Offset: 347
.Ltmp830:
    0000015d: 	cltq
    0000015f: 	nop # Size: 1
.Ltmp829:
    00000160: 	movzwl	(%rcx,%rax,2), %edx
    00000164: 	cmpl	%eax, %r9d
    00000167: 	leal	(%rdx,%r8), %esi
    0000016b: 	leal	-0x1(%rdx,%r8), %edx
    00000170: 	cmovgl	%edx, %esi
    00000173: 	addq	$0x1, %rax
    00000177: 	movl	%esi, %r8d
    0000017a: 	cmpl	%eax, %edi
    0000017c: 	jg	.Ltmp829 # Offset: 380
.Ltmp828:
    0000017e: 	movl	%r8d, %eax
    00000181: 	retq # Offset: 385
    00000182: 	nopw	(%rax,%rax) # Size: 6
.Ltmp824:
    00000188: 	xorl	%eax, %eax
    0000018a: 	xorl	%r8d, %r8d
    0000018d: 	jmp	.Ltmp830 # Offset: 397
    0000018f: 	nop # Size: 1
.Ltmp823:
    00000190: 	xorl	%r8d, %r8d
    00000193: 	movl	%r8d, %eax
    00000196: 	retq # Offset: 406
.Ltmp825:
    00000197: 	xorl	%esi, %esi
    00000199: 	xorl	%r8d, %r8d
    0000019c: 	jmp	.Ltmp831 # Offset: 412
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_for_loop3_paramIsET_PKS0_iS0_"

Binary Function "_Z22test_while_loop3_paramIsET_PKS0_iS0_" after disassembly {
  Number      : 126
  State       : disassembled
  Address     : 0xc4c0
  Size        : 0x1a1
  MaxSize     : 0x1b0
  Offset      : 0xc4c0
  Section     : .text
  Orc Section : .local.text._Z22test_while_loop3_paramIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0125:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edi
    00000009: 	testl	%esi, %esi
    0000000b: 	jle	.Ltmp832 # Offset: 11
    00000011: 	movswl	%dx, %edx
    00000014: 	leal	(%rdx,%rdx), %r9d
    00000018: 	testl	%edx, %edx
    0000001a: 	jle	.Ltmp833 # Offset: 26
    00000020: 	cmpl	%esi, %edx
    00000022: 	movl	$0x1, %r10d
    00000028: 	cmovgl	%esi, %edx
    0000002b: 	testl	%edx, %edx
    0000002d: 	cmovgl	%edx, %r10d
    00000031: 	cmpl	$0x7, %edx
    00000034: 	jle	.Ltmp834 # Offset: 52
    0000003a: 	movl	%r10d, %esi
    0000003d: 	movdqa	DATAat0x38850(%rip), %xmm2
    00000045: 	movdqa	DATAat0x388b0(%rip), %xmm5
    0000004d: 	movq	%rcx, %rax
    00000050: 	shrl	$0x3, %esi
    00000053: 	movdqa	DATAat0x388a0(%rip), %xmm4
    0000005b: 	movdqa	DATAat0x388c0(%rip), %xmm3
    00000063: 	pxor	%xmm1, %xmm1
    00000067: 	subl	$0x1, %esi
    0000006a: 	shlq	$0x4, %rsi
    0000006e: 	leaq	0x10(%rcx,%rsi), %rsi
    00000073: 	nopl	(%rax,%rax) # Size: 5
.Ltmp835:
    00000078: 	movdqu	(%rax), %xmm6
    0000007c: 	movdqa	%xmm2, %xmm0
    00000080: 	paddw	%xmm4, %xmm1
    00000084: 	addq	$0x10, %rax
    00000088: 	paddd	%xmm5, %xmm2
    0000008c: 	paddd	%xmm3, %xmm0
    00000090: 	paddw	%xmm6, %xmm1
    00000094: 	cmpq	%rsi, %rax
    00000097: 	jne	.Ltmp835 # Offset: 151
    00000099: 	pshufd	$0xff, %xmm0, %xmm0
    0000009e: 	movl	%r10d, %esi
    000000a1: 	movd	%xmm0, %eax
    000000a5: 	movdqa	%xmm1, %xmm0
    000000a9: 	andl	$-0x8, %esi
    000000ac: 	andl	$0x7, %r10d
    000000b0: 	psrldq	$0x8, %xmm0
    000000b5: 	paddw	%xmm0, %xmm1
    000000b9: 	movdqa	%xmm1, %xmm0
    000000bd: 	psrldq	$0x4, %xmm0
    000000c2: 	paddw	%xmm0, %xmm1
    000000c6: 	movdqa	%xmm1, %xmm0
    000000ca: 	psrldq	$0x2, %xmm0
    000000cf: 	paddw	%xmm0, %xmm1
    000000d3: 	pextrw	$0x0, %xmm1, %r8d
    000000d9: 	je	.Ltmp836 # Offset: 217
.Ltmp840:
    000000db: 	movslq	%esi, %rax
    000000de: 	leaq	(%rax,%rax), %r10
    000000e2: 	movzwl	(%rcx,%rax,2), %eax
    000000e6: 	leal	0x1(%r8,%rax), %r8d
    000000eb: 	leal	0x1(%rsi), %eax
    000000ee: 	cmpl	%eax, %edx
    000000f0: 	jle	.Ltmp836 # Offset: 240
    000000f2: 	addw	0x2(%rcx,%r10), %r8w
    000000f8: 	leal	0x2(%rsi), %eax
    000000fb: 	addl	$0x1, %r8d
    000000ff: 	cmpl	%eax, %edx
    00000101: 	jle	.Ltmp836 # Offset: 257
    00000103: 	movzwl	0x4(%rcx,%r10), %eax
    00000109: 	leal	0x1(%r8,%rax), %r8d
    0000010e: 	leal	0x3(%rsi), %eax
    00000111: 	cmpl	%edx, %eax
    00000113: 	jge	.Ltmp836 # Offset: 275
    00000115: 	movzwl	0x6(%rcx,%r10), %eax
    0000011b: 	leal	0x1(%r8,%rax), %r8d
    00000120: 	leal	0x4(%rsi), %eax
    00000123: 	cmpl	%eax, %edx
    00000125: 	jle	.Ltmp836 # Offset: 293
    00000127: 	movzwl	0x8(%rcx,%r10), %eax
    0000012d: 	leal	0x1(%r8,%rax), %r8d
    00000132: 	leal	0x5(%rsi), %eax
    00000135: 	cmpl	%eax, %edx
    00000137: 	jle	.Ltmp836 # Offset: 311
    00000139: 	movzwl	0xa(%rcx,%r10), %eax
    0000013f: 	leal	0x1(%r8,%rax), %r8d
    00000144: 	leal	0x6(%rsi), %eax
    00000147: 	cmpl	%eax, %edx
    00000149: 	jle	.Ltmp836 # Offset: 329
    0000014b: 	movzwl	0xc(%rcx,%r10), %eax
    00000151: 	leal	0x1(%r8,%rax), %r8d
    00000156: 	leal	0x7(%rsi), %eax
.Ltmp836:
    00000159: 	cmpl	%eax, %edi
    0000015b: 	jle	.Ltmp837 # Offset: 347
.Ltmp839:
    0000015d: 	cltq
    0000015f: 	nop # Size: 1
.Ltmp838:
    00000160: 	movzwl	(%rcx,%rax,2), %edx
    00000164: 	cmpl	%eax, %r9d
    00000167: 	leal	(%rdx,%r8), %esi
    0000016b: 	leal	-0x1(%rdx,%r8), %edx
    00000170: 	cmovgl	%edx, %esi
    00000173: 	addq	$0x1, %rax
    00000177: 	movl	%esi, %r8d
    0000017a: 	cmpl	%eax, %edi
    0000017c: 	jg	.Ltmp838 # Offset: 380
.Ltmp837:
    0000017e: 	movl	%r8d, %eax
    00000181: 	retq # Offset: 385
    00000182: 	nopw	(%rax,%rax) # Size: 6
.Ltmp833:
    00000188: 	xorl	%eax, %eax
    0000018a: 	xorl	%r8d, %r8d
    0000018d: 	jmp	.Ltmp839 # Offset: 397
    0000018f: 	nop # Size: 1
.Ltmp832:
    00000190: 	xorl	%r8d, %r8d
    00000193: 	movl	%r8d, %eax
    00000196: 	retq # Offset: 406
.Ltmp834:
    00000197: 	xorl	%esi, %esi
    00000199: 	xorl	%r8d, %r8d
    0000019c: 	jmp	.Ltmp840 # Offset: 412
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_while_loop3_paramIsET_PKS0_iS0_"

Binary Function "_Z17test_for_loop_optIiET_PKS0_iS0_" after disassembly {
  Number      : 127
  State       : disassembled
  Address     : 0xc670
  Size        : 0xaf
  MaxSize     : 0xb0
  Offset      : 0xc670
  Section     : .text
  Orc Section : .local.text._Z17test_for_loop_optIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0126:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rdx
    00000007: 	testl	%esi, %esi
    00000009: 	jle	.Ltmp841 # Offset: 9
    0000000f: 	leal	-0x1(%rsi), %eax
    00000012: 	cmpl	$0x2, %eax
    00000015: 	jbe	.Ltmp842 # Offset: 21
    0000001b: 	movl	%esi, %ecx
    0000001d: 	movq	%rdi, %rax
    00000020: 	pxor	%xmm0, %xmm0
    00000024: 	shrl	$0x2, %ecx
    00000027: 	subl	$0x1, %ecx
    0000002a: 	shlq	$0x4, %rcx
    0000002e: 	leaq	0x10(%rdi,%rcx), %rcx
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp843:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddd	%xmm2, %xmm0
    00000044: 	cmpq	%rcx, %rax
    00000047: 	jne	.Ltmp843 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%esi, %ecx
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x4, %ecx
    00000057: 	paddd	%xmm1, %xmm0
    0000005b: 	movdqa	%xmm0, %xmm1
    0000005f: 	psrldq	$0x4, %xmm1
    00000064: 	paddd	%xmm1, %xmm0
    00000068: 	movd	%xmm0, %eax
    0000006c: 	testb	$0x3, %sil
    00000070: 	je	.Ltmp844 # Offset: 112
.Ltmp846:
    00000072: 	movslq	%ecx, %rdi
    00000075: 	leaq	(,%rdi,4), %r8
    0000007d: 	addl	(%rdx,%rdi,4), %eax
    00000080: 	leal	0x1(%rcx), %edi
    00000083: 	cmpl	%edi, %esi
    00000085: 	jle	.Ltmp845 # Offset: 133
    00000087: 	addl	$0x2, %ecx
    0000008a: 	addl	0x4(%rdx,%r8), %eax
    0000008f: 	cmpl	%ecx, %esi
    00000091: 	jle	.Ltmp845 # Offset: 145
    00000093: 	addl	0x8(%rdx,%r8), %eax
    00000098: 	retq # Offset: 152
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp841:
    000000a0: 	xorl	%eax, %eax
.Ltmp845:
    000000a2: 	retq # Offset: 162
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp844:
    000000a8: 	retq # Offset: 168
.Ltmp842:
    000000a9: 	xorl	%ecx, %ecx
    000000ab: 	xorl	%eax, %eax
    000000ad: 	jmp	.Ltmp846 # Offset: 173
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_for_loop_optIiET_PKS0_iS0_"

Binary Function "_Z19test_while_loop_optIiET_PKS0_iS0_" after disassembly {
  Number      : 128
  State       : disassembled
  Address     : 0xc720
  Size        : 0xaf
  MaxSize     : 0xb0
  Offset      : 0xc720
  Section     : .text
  Orc Section : .local.text._Z19test_while_loop_optIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0127:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rdx
    00000007: 	testl	%esi, %esi
    00000009: 	jle	.Ltmp847 # Offset: 9
    0000000f: 	leal	-0x1(%rsi), %eax
    00000012: 	cmpl	$0x2, %eax
    00000015: 	jbe	.Ltmp848 # Offset: 21
    0000001b: 	movl	%esi, %ecx
    0000001d: 	movq	%rdi, %rax
    00000020: 	pxor	%xmm0, %xmm0
    00000024: 	shrl	$0x2, %ecx
    00000027: 	subl	$0x1, %ecx
    0000002a: 	shlq	$0x4, %rcx
    0000002e: 	leaq	0x10(%rdi,%rcx), %rcx
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp849:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddd	%xmm2, %xmm0
    00000044: 	cmpq	%rcx, %rax
    00000047: 	jne	.Ltmp849 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%esi, %ecx
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x4, %ecx
    00000057: 	paddd	%xmm1, %xmm0
    0000005b: 	movdqa	%xmm0, %xmm1
    0000005f: 	psrldq	$0x4, %xmm1
    00000064: 	paddd	%xmm1, %xmm0
    00000068: 	movd	%xmm0, %eax
    0000006c: 	testb	$0x3, %sil
    00000070: 	je	.Ltmp850 # Offset: 112
.Ltmp852:
    00000072: 	movslq	%ecx, %rdi
    00000075: 	leaq	(,%rdi,4), %r8
    0000007d: 	addl	(%rdx,%rdi,4), %eax
    00000080: 	leal	0x1(%rcx), %edi
    00000083: 	cmpl	%edi, %esi
    00000085: 	jle	.Ltmp851 # Offset: 133
    00000087: 	addl	$0x2, %ecx
    0000008a: 	addl	0x4(%rdx,%r8), %eax
    0000008f: 	cmpl	%ecx, %esi
    00000091: 	jle	.Ltmp851 # Offset: 145
    00000093: 	addl	0x8(%rdx,%r8), %eax
    00000098: 	retq # Offset: 152
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp847:
    000000a0: 	xorl	%eax, %eax
.Ltmp851:
    000000a2: 	retq # Offset: 162
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp850:
    000000a8: 	retq # Offset: 168
.Ltmp848:
    000000a9: 	xorl	%ecx, %ecx
    000000ab: 	xorl	%eax, %eax
    000000ad: 	jmp	.Ltmp852 # Offset: 173
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_while_loop_optIiET_PKS0_iS0_"

Binary Function "_Z16test_do_loop_optIiET_PKS0_iS0_" after disassembly {
  Number      : 129
  State       : disassembled
  Address     : 0xc7d0
  Size        : 0xac
  MaxSize     : 0xb0
  Offset      : 0xc7d0
  Section     : .text
  Orc Section : .local.text._Z16test_do_loop_optIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0128:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rdx
    00000007: 	xorl	%eax, %eax
    00000009: 	testl	%esi, %esi
    0000000b: 	jle	.Ltmp853 # Offset: 11
    00000011: 	leal	-0x1(%rsi), %ecx
    00000014: 	cmpl	$0x2, %ecx
    00000017: 	jbe	.Ltmp854 # Offset: 23
    0000001d: 	movl	%esi, %ecx
    0000001f: 	movq	%rdi, %rax
    00000022: 	pxor	%xmm0, %xmm0
    00000026: 	shrl	$0x2, %ecx
    00000029: 	subl	$0x1, %ecx
    0000002c: 	shlq	$0x4, %rcx
    00000030: 	leaq	0x10(%rdi,%rcx), %rcx
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp855:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddd	%xmm2, %xmm0
    00000044: 	cmpq	%rcx, %rax
    00000047: 	jne	.Ltmp855 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%esi, %ecx
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x4, %ecx
    00000057: 	paddd	%xmm1, %xmm0
    0000005b: 	movdqa	%xmm0, %xmm1
    0000005f: 	psrldq	$0x4, %xmm1
    00000064: 	paddd	%xmm1, %xmm0
    00000068: 	movd	%xmm0, %eax
    0000006c: 	testb	$0x3, %sil
    00000070: 	je	.Ltmp856 # Offset: 112
.Ltmp857:
    00000072: 	movslq	%ecx, %rdi
    00000075: 	leaq	(,%rdi,4), %r8
    0000007d: 	addl	(%rdx,%rdi,4), %eax
    00000080: 	leal	0x1(%rcx), %edi
    00000083: 	cmpl	%edi, %esi
    00000085: 	jle	.Ltmp853 # Offset: 133
    00000087: 	addl	$0x2, %ecx
    0000008a: 	addl	0x4(%rdx,%r8), %eax
    0000008f: 	cmpl	%ecx, %esi
    00000091: 	jle	.Ltmp853 # Offset: 145
    00000093: 	addl	0x8(%rdx,%r8), %eax
.Ltmp853:
    00000098: 	retq # Offset: 152
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp856:
    000000a0: 	retq # Offset: 160
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp854:
    000000a8: 	xorl	%ecx, %ecx
    000000aa: 	jmp	.Ltmp857 # Offset: 170
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_do_loop_optIiET_PKS0_iS0_"

Binary Function "_Z18test_goto_loop_optIiET_PKS0_iS0_" after disassembly {
  Number      : 130
  State       : disassembled
  Address     : 0xc880
  Size        : 0xac
  MaxSize     : 0xb0
  Offset      : 0xc880
  Section     : .text
  Orc Section : .local.text._Z18test_goto_loop_optIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0129:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rdx
    00000007: 	xorl	%eax, %eax
    00000009: 	testl	%esi, %esi
    0000000b: 	jle	.Ltmp858 # Offset: 11
    00000011: 	leal	-0x1(%rsi), %ecx
    00000014: 	cmpl	$0x2, %ecx
    00000017: 	jbe	.Ltmp859 # Offset: 23
    0000001d: 	movl	%esi, %ecx
    0000001f: 	movq	%rdi, %rax
    00000022: 	pxor	%xmm0, %xmm0
    00000026: 	shrl	$0x2, %ecx
    00000029: 	subl	$0x1, %ecx
    0000002c: 	shlq	$0x4, %rcx
    00000030: 	leaq	0x10(%rdi,%rcx), %rcx
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp860:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	paddd	%xmm2, %xmm0
    00000044: 	cmpq	%rcx, %rax
    00000047: 	jne	.Ltmp860 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movl	%esi, %ecx
    0000004f: 	psrldq	$0x8, %xmm1
    00000054: 	andl	$-0x4, %ecx
    00000057: 	paddd	%xmm1, %xmm0
    0000005b: 	movdqa	%xmm0, %xmm1
    0000005f: 	psrldq	$0x4, %xmm1
    00000064: 	paddd	%xmm1, %xmm0
    00000068: 	movd	%xmm0, %eax
    0000006c: 	testb	$0x3, %sil
    00000070: 	je	.Ltmp861 # Offset: 112
.Ltmp862:
    00000072: 	movslq	%ecx, %rdi
    00000075: 	leaq	(,%rdi,4), %r8
    0000007d: 	addl	(%rdx,%rdi,4), %eax
    00000080: 	leal	0x1(%rcx), %edi
    00000083: 	cmpl	%edi, %esi
    00000085: 	jle	.Ltmp858 # Offset: 133
    00000087: 	addl	$0x2, %ecx
    0000008a: 	addl	0x4(%rdx,%r8), %eax
    0000008f: 	cmpl	%ecx, %esi
    00000091: 	jle	.Ltmp858 # Offset: 145
    00000093: 	addl	0x8(%rdx,%r8), %eax
.Ltmp858:
    00000098: 	retq # Offset: 152
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp861:
    000000a0: 	retq # Offset: 160
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp859:
    000000a8: 	xorl	%ecx, %ecx
    000000aa: 	jmp	.Ltmp862 # Offset: 170
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_goto_loop_optIiET_PKS0_iS0_"

Binary Function "_Z19test_for_loop_paramIiET_PKS0_iS0_" after disassembly {
  Number      : 131
  State       : disassembled
  Address     : 0xc930
  Size        : 0x31b
  MaxSize     : 0x320
  Offset      : 0xc930
  Section     : .text
  Orc Section : .local.text._Z19test_for_loop_paramIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0130:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp863 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	testl	%edx, %edx
    00000013: 	js	.Ltmp864 # Offset: 19
    00000019: 	cmpl	$0x2, %eax
    0000001c: 	jbe	.Ltmp865 # Offset: 28
    00000022: 	movl	%esi, %edx
    00000024: 	movq	%rdi, %rax
    00000027: 	pxor	%xmm0, %xmm0
    0000002b: 	shrl	$0x2, %edx
    0000002e: 	subl	$0x1, %edx
    00000031: 	shlq	$0x4, %rdx
    00000035: 	leaq	0x10(%rdi,%rdx), %rdx
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp866:
    00000040: 	movdqu	(%rax), %xmm7
    00000044: 	addq	$0x10, %rax
    00000048: 	paddd	%xmm7, %xmm0
    0000004c: 	cmpq	%rax, %rdx
    0000004f: 	jne	.Ltmp866 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%ecx, %edx
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x4, %edx
    0000005f: 	paddd	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x4, %xmm1
    0000006c: 	paddd	%xmm1, %xmm0
    00000070: 	movd	%xmm0, %eax
    00000074: 	testb	$0x3, %cl
    00000077: 	je	.Ltmp867 # Offset: 119
.Ltmp872:
    0000007d: 	movslq	%edx, %rsi
    00000080: 	leaq	(,%rsi,4), %r8
    00000088: 	addl	(%rdi,%rsi,4), %eax
    0000008b: 	leal	0x1(%rdx), %esi
    0000008e: 	cmpl	%esi, %ecx
    00000090: 	jle	.Ltmp868 # Offset: 144
    00000092: 	addl	$0x2, %edx
    00000095: 	addl	0x4(%rdi,%r8), %eax
    0000009a: 	cmpl	%edx, %ecx
    0000009c: 	jle	.Ltmp868 # Offset: 156
    0000009e: 	addl	0x8(%rdi,%r8), %eax
    000000a3: 	retq # Offset: 163
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp863:
    000000a8: 	xorl	%eax, %eax
.Ltmp868:
    000000aa: 	retq # Offset: 170
    000000ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp864:
    000000b0: 	cmpl	$0x2, %eax
    000000b3: 	jbe	.Ltmp869 # Offset: 179
    000000b9: 	pxor	%xmm1, %xmm1
    000000bd: 	movdqa	DATAat0x388d0(%rip), %xmm6
    000000c5: 	movl	%esi, %edx
    000000c7: 	movq	%rdi, %rax
    000000ca: 	movdqa	DATAat0x388e0(%rip), %xmm5
    000000d2: 	shrl	$0x2, %edx
    000000d5: 	movdqa	%xmm1, %xmm8
    000000da: 	movdqa	%xmm1, %xmm7
    000000de: 	subl	$0x1, %edx
    000000e1: 	pcmpgtd	%xmm6, %xmm8
    000000e6: 	movdqa	%xmm1, %xmm9
    000000eb: 	pcmpgtd	%xmm5, %xmm7
    000000ef: 	shlq	$0x4, %rdx
    000000f3: 	leaq	0x10(%rdi,%rdx), %rdx
    000000f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp870:
    00000100: 	movdqu	(%rax), %xmm3
    00000104: 	movdqa	%xmm9, %xmm12
    00000109: 	movdqa	%xmm8, %xmm11
    0000010e: 	movdqa	%xmm8, %xmm15
    00000113: 	addq	$0x10, %rax
    00000117: 	movdqa	%xmm3, %xmm0
    0000011b: 	movdqa	%xmm3, %xmm10
    00000120: 	punpckldq	%xmm3, %xmm0
    00000124: 	psrad	$0x1f, %xmm10
    0000012a: 	pcmpgtd	%xmm0, %xmm12
    0000012f: 	pmuludq	%xmm0, %xmm11
    00000134: 	movdqa	%xmm0, %xmm2
    00000138: 	pmuludq	%xmm6, %xmm2
    0000013c: 	movdqa	%xmm12, %xmm4
    00000141: 	pmuludq	%xmm5, %xmm12
    00000146: 	pmuludq	%xmm6, %xmm4
    0000014a: 	paddq	%xmm11, %xmm4
    0000014f: 	movdqa	%xmm9, %xmm11
    00000154: 	psllq	$0x20, %xmm4
    00000159: 	paddq	%xmm4, %xmm2
    0000015d: 	movdqa	%xmm3, %xmm4
    00000161: 	punpckhdq	%xmm3, %xmm4
    00000165: 	pcmpgtd	%xmm4, %xmm11
    0000016a: 	pmuludq	%xmm4, %xmm15
    0000016f: 	movdqa	%xmm4, %xmm14
    00000174: 	pmuludq	%xmm6, %xmm14
    00000179: 	movdqa	%xmm11, %xmm13
    0000017e: 	pmuludq	%xmm5, %xmm11
    00000183: 	pmuludq	%xmm6, %xmm13
    00000188: 	paddq	%xmm15, %xmm13
    0000018d: 	psllq	$0x20, %xmm13
    00000193: 	paddq	%xmm14, %xmm13
    00000198: 	shufps	$0xdd, %xmm13, %xmm2
    0000019d: 	movdqa	%xmm7, %xmm13
    000001a2: 	paddd	%xmm3, %xmm2
    000001a6: 	paddd	%xmm1, %xmm3
    000001aa: 	pmuludq	%xmm0, %xmm13
    000001af: 	pmuludq	%xmm5, %xmm0
    000001b3: 	psrad	$0x6, %xmm2
    000001b8: 	psubd	%xmm10, %xmm2
    000001bd: 	paddq	%xmm13, %xmm12
    000001c2: 	psllq	$0x20, %xmm12
    000001c8: 	paddq	%xmm12, %xmm0
    000001cd: 	movdqa	%xmm7, %xmm12
    000001d2: 	pmuludq	%xmm4, %xmm12
    000001d7: 	pmuludq	%xmm5, %xmm4
    000001db: 	paddq	%xmm12, %xmm11
    000001e0: 	psllq	$0x20, %xmm11
    000001e6: 	paddq	%xmm11, %xmm4
    000001eb: 	shufps	$0xdd, %xmm4, %xmm0
    000001ef: 	psrad	$0x1, %xmm0
    000001f4: 	psubd	%xmm10, %xmm0
    000001f9: 	paddd	%xmm0, %xmm2
    000001fd: 	movdqa	%xmm2, %xmm1
    00000201: 	paddd	%xmm3, %xmm1
    00000205: 	cmpq	%rdx, %rax
    00000208: 	jne	.Ltmp870 # Offset: 520
    0000020e: 	movdqa	%xmm1, %xmm0
    00000212: 	movl	%ecx, %edx
    00000214: 	psrldq	$0x8, %xmm0
    00000219: 	andl	$-0x4, %edx
    0000021c: 	paddd	%xmm0, %xmm1
    00000220: 	movdqa	%xmm1, %xmm0
    00000224: 	psrldq	$0x4, %xmm0
    00000229: 	paddd	%xmm0, %xmm1
    0000022d: 	movd	%xmm1, %eax
    00000231: 	testb	$0x3, %cl
    00000234: 	je	.Ltmp871 # Offset: 564
.Ltmp873:
    0000023a: 	movslq	%edx, %r8
    0000023d: 	leaq	(,%r8,4), %rsi
    00000245: 	movslq	(%rdi,%r8,4), %r8
    00000249: 	leal	(%r8,%rax), %r9d
    0000024d: 	movq	%r8, %r10
    00000250: 	imulq	$-0x77777777, %r8, %rax
    00000257: 	sarl	$0x1f, %r10d
    0000025b: 	shrq	$0x20, %rax
    0000025f: 	addl	%r8d, %eax
    00000262: 	imulq	$0x66666667, %r8, %r8
    00000269: 	sarl	$0x6, %eax
    0000026c: 	subl	%r10d, %eax
    0000026f: 	sarq	$0x21, %r8
    00000273: 	subl	%r10d, %r8d
    00000276: 	addl	%r8d, %eax
    00000279: 	leal	0x1(%rdx), %r8d
    0000027d: 	addl	%r9d, %eax
    00000280: 	cmpl	%r8d, %ecx
    00000283: 	jle	.Ltmp868 # Offset: 643
    00000289: 	movslq	0x4(%rdi,%rsi), %r8
    0000028e: 	addl	$0x2, %edx
    00000291: 	leal	(%r8,%rax), %r9d
    00000295: 	movq	%r8, %r10
    00000298: 	imulq	$-0x77777777, %r8, %rax
    0000029f: 	sarl	$0x1f, %r10d
    000002a3: 	shrq	$0x20, %rax
    000002a7: 	addl	%r8d, %eax
    000002aa: 	imulq	$0x66666667, %r8, %r8
    000002b1: 	sarl	$0x6, %eax
    000002b4: 	subl	%r10d, %eax
    000002b7: 	sarq	$0x21, %r8
    000002bb: 	subl	%r10d, %r8d
    000002be: 	addl	%r8d, %eax
    000002c1: 	addl	%r9d, %eax
    000002c4: 	cmpl	%edx, %ecx
    000002c6: 	jle	.Ltmp868 # Offset: 710
    000002cc: 	movslq	0x8(%rdi,%rsi), %rsi
    000002d1: 	imulq	$0x66666667, %rsi, %rcx
    000002d8: 	addl	%esi, %eax
    000002da: 	movq	%rsi, %rdx
    000002dd: 	movl	%esi, %edi
    000002df: 	imulq	$-0x77777777, %rsi, %rsi
    000002e6: 	sarl	$0x1f, %edi
    000002e9: 	sarq	$0x21, %rcx
    000002ed: 	shrq	$0x20, %rsi
    000002f1: 	subl	%edi, %ecx
    000002f3: 	addl	%esi, %edx
    000002f5: 	sarl	$0x6, %edx
    000002f8: 	subl	%edi, %edx
    000002fa: 	addl	%ecx, %edx
    000002fc: 	addl	%edx, %eax
    000002fe: 	retq # Offset: 766
.Ltmp865:
    000002ff: 	xorl	%edx, %edx
    00000301: 	xorl	%eax, %eax
    00000303: 	jmp	.Ltmp872 # Offset: 771
    00000308: 	nopl	(%rax,%rax) # Size: 8
.Ltmp867:
    00000310: 	retq # Offset: 784
.Ltmp871:
    00000311: 	retq # Offset: 785
.Ltmp869:
    00000312: 	xorl	%edx, %edx
    00000314: 	xorl	%eax, %eax
    00000316: 	jmp	.Ltmp873 # Offset: 790
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_for_loop_paramIiET_PKS0_iS0_"

Binary Function "_Z20test_for_loop_param2IiET_PKS0_iS0_" after disassembly {
  Number      : 132
  State       : disassembled
  Address     : 0xcc50
  Size        : 0x23c
  MaxSize     : 0x240
  Offset      : 0xcc50
  Section     : .text
  Orc Section : .local.text._Z20test_for_loop_param2IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0131:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp874 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	testl	%edx, %edx
    00000013: 	js	.Ltmp875 # Offset: 19
    00000019: 	cmpl	$0x2, %eax
    0000001c: 	jbe	.Ltmp876 # Offset: 28
    00000022: 	movl	%esi, %edx
    00000024: 	movq	%rdi, %rax
    00000027: 	pxor	%xmm0, %xmm0
    0000002b: 	shrl	$0x2, %edx
    0000002e: 	subl	$0x1, %edx
    00000031: 	shlq	$0x4, %rdx
    00000035: 	leaq	0x10(%rdi,%rdx), %rdx
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp877:
    00000040: 	movdqu	(%rax), %xmm6
    00000044: 	addq	$0x10, %rax
    00000048: 	paddd	%xmm6, %xmm0
    0000004c: 	cmpq	%rax, %rdx
    0000004f: 	jne	.Ltmp877 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%ecx, %edx
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x4, %edx
    0000005f: 	paddd	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x4, %xmm1
    0000006c: 	paddd	%xmm1, %xmm0
    00000070: 	movd	%xmm0, %eax
    00000074: 	testb	$0x3, %cl
    00000077: 	je	.Ltmp878 # Offset: 119
.Ltmp883:
    0000007d: 	movslq	%edx, %rsi
    00000080: 	leaq	(,%rsi,4), %r8
    00000088: 	addl	(%rdi,%rsi,4), %eax
    0000008b: 	leal	0x1(%rdx), %esi
    0000008e: 	cmpl	%esi, %ecx
    00000090: 	jle	.Ltmp879 # Offset: 144
    00000092: 	addl	$0x2, %edx
    00000095: 	addl	0x4(%rdi,%r8), %eax
    0000009a: 	cmpl	%ecx, %edx
    0000009c: 	jge	.Ltmp879 # Offset: 156
    0000009e: 	addl	0x8(%rdi,%r8), %eax
    000000a3: 	retq # Offset: 163
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp874:
    000000a8: 	xorl	%eax, %eax
.Ltmp879:
    000000aa: 	retq # Offset: 170
    000000ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp875:
    000000b0: 	cmpl	$0x2, %eax
    000000b3: 	jbe	.Ltmp880 # Offset: 179
    000000b9: 	pxor	%xmm1, %xmm1
    000000bd: 	movdqa	DATAat0x388e0(%rip), %xmm5
    000000c5: 	movl	%esi, %edx
    000000c7: 	movq	%rdi, %rax
    000000ca: 	shrl	$0x2, %edx
    000000cd: 	movdqa	%xmm1, %xmm6
    000000d1: 	movdqa	%xmm1, %xmm7
    000000d5: 	subl	$0x1, %edx
    000000d8: 	pcmpgtd	%xmm5, %xmm6
    000000dc: 	shlq	$0x4, %rdx
    000000e0: 	leaq	0x10(%rdi,%rdx), %rdx
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp881:
    000000e8: 	movdqu	(%rax), %xmm2
    000000ec: 	movdqa	%xmm7, %xmm3
    000000f0: 	movdqa	%xmm6, %xmm4
    000000f4: 	addq	$0x10, %rax
    000000f8: 	movdqa	%xmm6, %xmm8
    000000fd: 	movdqa	%xmm2, %xmm0
    00000101: 	punpckldq	%xmm2, %xmm0
    00000105: 	pcmpgtd	%xmm0, %xmm3
    00000109: 	pmuludq	%xmm0, %xmm4
    0000010d: 	pmuludq	%xmm5, %xmm0
    00000111: 	pmuludq	%xmm5, %xmm3
    00000115: 	paddq	%xmm4, %xmm3
    00000119: 	movdqa	%xmm7, %xmm4
    0000011d: 	psllq	$0x20, %xmm3
    00000122: 	paddq	%xmm3, %xmm0
    00000126: 	movdqa	%xmm2, %xmm3
    0000012a: 	punpckhdq	%xmm2, %xmm3
    0000012e: 	pcmpgtd	%xmm3, %xmm4
    00000132: 	pmuludq	%xmm3, %xmm8
    00000137: 	pmuludq	%xmm5, %xmm3
    0000013b: 	pmuludq	%xmm5, %xmm4
    0000013f: 	paddq	%xmm8, %xmm4
    00000144: 	psllq	$0x20, %xmm4
    00000149: 	paddq	%xmm4, %xmm3
    0000014d: 	shufps	$0xdd, %xmm3, %xmm0
    00000151: 	movdqa	%xmm2, %xmm3
    00000155: 	psrad	$0x1, %xmm0
    0000015a: 	paddd	%xmm1, %xmm2
    0000015e: 	psrad	$0x1f, %xmm3
    00000163: 	psubd	%xmm3, %xmm0
    00000167: 	movdqa	%xmm0, %xmm1
    0000016b: 	paddd	%xmm2, %xmm1
    0000016f: 	cmpq	%rdx, %rax
    00000172: 	jne	.Ltmp881 # Offset: 370
    00000178: 	movdqa	%xmm1, %xmm0
    0000017c: 	movl	%ecx, %r8d
    0000017f: 	psrldq	$0x8, %xmm0
    00000184: 	andl	$-0x4, %r8d
    00000188: 	paddd	%xmm0, %xmm1
    0000018c: 	movdqa	%xmm1, %xmm0
    00000190: 	psrldq	$0x4, %xmm0
    00000195: 	paddd	%xmm0, %xmm1
    00000199: 	movd	%xmm1, %eax
    0000019d: 	testb	$0x3, %cl
    000001a0: 	je	.Ltmp882 # Offset: 416
.Ltmp884:
    000001a6: 	movslq	%r8d, %rdx
    000001a9: 	leaq	(,%rdx,4), %r9
    000001b1: 	movslq	(%rdi,%rdx,4), %rdx
    000001b5: 	movq	%rdx, %rsi
    000001b8: 	addl	%edx, %eax
    000001ba: 	imulq	$0x66666667, %rdx, %rdx
    000001c1: 	sarl	$0x1f, %esi
    000001c4: 	sarq	$0x21, %rdx
    000001c8: 	subl	%esi, %edx
    000001ca: 	addl	%edx, %eax
    000001cc: 	leal	0x1(%r8), %edx
    000001d0: 	cmpl	%edx, %ecx
    000001d2: 	jle	.Ltmp879 # Offset: 466
    000001d8: 	movslq	0x4(%rdi,%r9), %rdx
    000001dd: 	addl	$0x2, %r8d
    000001e1: 	movq	%rdx, %rsi
    000001e4: 	addl	%edx, %eax
    000001e6: 	imulq	$0x66666667, %rdx, %rdx
    000001ed: 	sarl	$0x1f, %esi
    000001f0: 	sarq	$0x21, %rdx
    000001f4: 	subl	%esi, %edx
    000001f6: 	addl	%edx, %eax
    000001f8: 	cmpl	%r8d, %ecx
    000001fb: 	jle	.Ltmp879 # Offset: 507
    00000201: 	movslq	0x8(%rdi,%r9), %rdx
    00000206: 	addl	%edx, %eax
    00000208: 	movq	%rdx, %rcx
    0000020b: 	imulq	$0x66666667, %rdx, %rdx
    00000212: 	sarl	$0x1f, %ecx
    00000215: 	sarq	$0x21, %rdx
    00000219: 	subl	%ecx, %edx
    0000021b: 	addl	%edx, %eax
    0000021d: 	retq # Offset: 541
.Ltmp876:
    0000021e: 	xorl	%edx, %edx
    00000220: 	xorl	%eax, %eax
    00000222: 	jmp	.Ltmp883 # Offset: 546
    00000227: 	nopw	(%rax,%rax) # Size: 9
.Ltmp878:
    00000230: 	retq # Offset: 560
.Ltmp882:
    00000231: 	retq # Offset: 561
.Ltmp880:
    00000232: 	xorl	%r8d, %r8d
    00000235: 	xorl	%eax, %eax
    00000237: 	jmp	.Ltmp884 # Offset: 567
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_for_loop_param2IiET_PKS0_iS0_"

Binary Function "_Z20test_for_loop_param3IiET_PKS0_iS0_" after disassembly {
  Number      : 133
  State       : disassembled
  Address     : 0xce90
  Size        : 0x24e
  MaxSize     : 0x250
  Offset      : 0xce90
  Section     : .text
  Orc Section : .local.text._Z20test_for_loop_param3IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0132:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	testl	%edx, %edx
    00000008: 	js	.Ltmp885 # Offset: 8
    0000000e: 	xorl	%r8d, %r8d
    00000011: 	testl	%esi, %esi
    00000013: 	jle	.Ltmp886 # Offset: 19
.Ltmp893:
    00000019: 	testl	%ecx, %ecx
    0000001b: 	movl	$0x1, %esi
    00000020: 	cmovgl	%ecx, %esi
    00000023: 	cmpl	$0x3, %ecx
    00000026: 	jle	.Ltmp887 # Offset: 38
    0000002c: 	leaq	0x10(%rdi), %r9
.Ltmp895:
    00000030: 	movl	%esi, %edx
    00000032: 	movq	%rdi, %rax
    00000035: 	pxor	%xmm0, %xmm0
    00000039: 	shrl	$0x2, %edx
    0000003c: 	subl	$0x1, %edx
    0000003f: 	shlq	$0x4, %rdx
    00000043: 	addq	%r9, %rdx
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp888:
    00000050: 	movdqu	(%rax), %xmm6
    00000054: 	addq	$0x10, %rax
    00000058: 	paddd	%xmm6, %xmm0
    0000005c: 	cmpq	%rax, %rdx
    0000005f: 	jne	.Ltmp888 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	psrldq	$0x8, %xmm1
    0000006a: 	paddd	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x4, %xmm1
    00000077: 	paddd	%xmm1, %xmm0
    0000007b: 	movd	%xmm0, %eax
    0000007f: 	addl	%eax, %r8d
    00000082: 	movl	%esi, %eax
    00000084: 	andl	$-0x4, %eax
    00000087: 	andl	$0x3, %esi
    0000008a: 	je	.Ltmp886 # Offset: 138
.Ltmp894:
    0000008c: 	movslq	%eax, %rdx
    0000008f: 	leaq	(,%rdx,4), %rsi
    00000097: 	addl	(%rdi,%rdx,4), %r8d
    0000009b: 	leal	0x1(%rax), %edx
    0000009e: 	cmpl	%edx, %ecx
    000000a0: 	jle	.Ltmp886 # Offset: 160
    000000a2: 	addl	$0x2, %eax
    000000a5: 	addl	0x4(%rdi,%rsi), %r8d
    000000aa: 	cmpl	%eax, %ecx
    000000ac: 	jle	.Ltmp886 # Offset: 172
    000000ae: 	addl	0x8(%rdi,%rsi), %r8d
.Ltmp886:
    000000b3: 	movl	%r8d, %eax
    000000b6: 	retq # Offset: 182
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp885:
    000000c0: 	testl	%esi, %esi
    000000c2: 	jle	.Ltmp889 # Offset: 194
    000000c8: 	leal	-0x1(%rsi), %eax
    000000cb: 	cmpl	$0x2, %eax
    000000ce: 	jbe	.Ltmp890 # Offset: 206
    000000d4: 	pxor	%xmm4, %xmm4
    000000d8: 	movl	%esi, %edx
    000000da: 	leaq	0x10(%rdi), %r9
    000000de: 	movq	%rdi, %rax
    000000e1: 	movdqa	DATAat0x388e0(%rip), %xmm5
    000000e9: 	shrl	$0x2, %edx
    000000ec: 	movdqa	%xmm4, %xmm6
    000000f0: 	movdqa	%xmm4, %xmm7
    000000f4: 	subl	$0x1, %edx
    000000f7: 	pcmpgtd	%xmm5, %xmm6
    000000fb: 	shlq	$0x4, %rdx
    000000ff: 	addq	%r9, %rdx
    00000102: 	nopw	(%rax,%rax) # Size: 6
.Ltmp891:
    00000108: 	movdqu	(%rax), %xmm1
    0000010c: 	movdqa	%xmm7, %xmm2
    00000110: 	movdqa	%xmm6, %xmm3
    00000114: 	addq	$0x10, %rax
    00000118: 	movdqa	%xmm6, %xmm8
    0000011d: 	movdqa	%xmm1, %xmm0
    00000121: 	punpckldq	%xmm1, %xmm0
    00000125: 	pcmpgtd	%xmm0, %xmm2
    00000129: 	pmuludq	%xmm0, %xmm3
    0000012d: 	pmuludq	%xmm5, %xmm0
    00000131: 	pmuludq	%xmm5, %xmm2
    00000135: 	paddq	%xmm3, %xmm2
    00000139: 	movdqa	%xmm7, %xmm3
    0000013d: 	psllq	$0x20, %xmm2
    00000142: 	paddq	%xmm2, %xmm0
    00000146: 	movdqa	%xmm1, %xmm2
    0000014a: 	punpckhdq	%xmm1, %xmm2
    0000014e: 	psrad	$0x1f, %xmm1
    00000153: 	pcmpgtd	%xmm2, %xmm3
    00000157: 	pmuludq	%xmm2, %xmm8
    0000015c: 	pmuludq	%xmm5, %xmm2
    00000160: 	pmuludq	%xmm5, %xmm3
    00000164: 	paddq	%xmm8, %xmm3
    00000169: 	psllq	$0x20, %xmm3
    0000016e: 	paddq	%xmm3, %xmm2
    00000172: 	shufps	$0xdd, %xmm2, %xmm0
    00000176: 	psrad	$0x1, %xmm0
    0000017b: 	psubd	%xmm1, %xmm0
    0000017f: 	paddd	%xmm0, %xmm4
    00000183: 	cmpq	%rdx, %rax
    00000186: 	jne	.Ltmp891 # Offset: 390
    00000188: 	movdqa	%xmm4, %xmm0
    0000018c: 	movl	%ecx, %eax
    0000018e: 	psrldq	$0x8, %xmm0
    00000193: 	andl	$-0x4, %eax
    00000196: 	paddd	%xmm0, %xmm4
    0000019a: 	movdqa	%xmm4, %xmm0
    0000019e: 	psrldq	$0x4, %xmm0
    000001a3: 	paddd	%xmm0, %xmm4
    000001a7: 	movd	%xmm4, %r8d
    000001ac: 	cmpl	%eax, %ecx
    000001ae: 	je	.Ltmp892 # Offset: 430
.Ltmp896:
    000001b0: 	movslq	%eax, %rdx
    000001b3: 	leaq	(,%rdx,4), %r9
    000001bb: 	movslq	(%rdi,%rdx,4), %rdx
    000001bf: 	movq	%rdx, %rsi
    000001c2: 	imulq	$0x66666667, %rdx, %rdx
    000001c9: 	sarl	$0x1f, %esi
    000001cc: 	sarq	$0x21, %rdx
    000001d0: 	subl	%esi, %edx
    000001d2: 	addl	%edx, %r8d
    000001d5: 	leal	0x1(%rax), %edx
    000001d8: 	cmpl	%edx, %ecx
    000001da: 	jle	.Ltmp893 # Offset: 474
    000001e0: 	movslq	0x4(%rdi,%r9), %rdx
    000001e5: 	addl	$0x2, %eax
    000001e8: 	movq	%rdx, %rsi
    000001eb: 	imulq	$0x66666667, %rdx, %rdx
    000001f2: 	sarl	$0x1f, %esi
    000001f5: 	sarq	$0x21, %rdx
    000001f9: 	subl	%esi, %edx
    000001fb: 	addl	%edx, %r8d
    000001fe: 	cmpl	%eax, %ecx
    00000200: 	jle	.Ltmp893 # Offset: 512
    00000206: 	movslq	0x8(%rdi,%r9), %rax
    0000020b: 	movq	%rax, %rdx
    0000020e: 	imulq	$0x66666667, %rax, %rax
    00000215: 	sarl	$0x1f, %edx
    00000218: 	sarq	$0x21, %rax
    0000021c: 	subl	%edx, %eax
    0000021e: 	addl	%eax, %r8d
    00000221: 	jmp	.Ltmp893 # Offset: 545
.Ltmp887:
    00000226: 	xorl	%eax, %eax
    00000228: 	jmp	.Ltmp894 # Offset: 552
.Ltmp892:
    0000022d: 	testl	%ecx, %ecx
    0000022f: 	movl	$0x1, %esi
    00000234: 	cmovgl	%ecx, %esi
    00000237: 	jmp	.Ltmp895 # Offset: 567
.Ltmp889:
    0000023c: 	xorl	%r8d, %r8d
    0000023f: 	jmp	.Ltmp886 # Offset: 575
.Ltmp890:
    00000244: 	xorl	%eax, %eax
    00000246: 	xorl	%r8d, %r8d
    00000249: 	jmp	.Ltmp896 # Offset: 585
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_for_loop_param3IiET_PKS0_iS0_"

Binary Function "_Z21test_while_loop_paramIiET_PKS0_iS0_" after disassembly {
  Number      : 134
  State       : disassembled
  Address     : 0xd0e0
  Size        : 0x31b
  MaxSize     : 0x320
  Offset      : 0xd0e0
  Section     : .text
  Orc Section : .local.text._Z21test_while_loop_paramIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0133:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp897 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	testl	%edx, %edx
    00000013: 	js	.Ltmp898 # Offset: 19
    00000019: 	cmpl	$0x2, %eax
    0000001c: 	jbe	.Ltmp899 # Offset: 28
    00000022: 	movl	%esi, %edx
    00000024: 	movq	%rdi, %rax
    00000027: 	pxor	%xmm0, %xmm0
    0000002b: 	shrl	$0x2, %edx
    0000002e: 	subl	$0x1, %edx
    00000031: 	shlq	$0x4, %rdx
    00000035: 	leaq	0x10(%rdi,%rdx), %rdx
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp900:
    00000040: 	movdqu	(%rax), %xmm7
    00000044: 	addq	$0x10, %rax
    00000048: 	paddd	%xmm7, %xmm0
    0000004c: 	cmpq	%rax, %rdx
    0000004f: 	jne	.Ltmp900 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%ecx, %edx
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x4, %edx
    0000005f: 	paddd	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x4, %xmm1
    0000006c: 	paddd	%xmm1, %xmm0
    00000070: 	movd	%xmm0, %eax
    00000074: 	testb	$0x3, %cl
    00000077: 	je	.Ltmp901 # Offset: 119
.Ltmp906:
    0000007d: 	movslq	%edx, %rsi
    00000080: 	leaq	(,%rsi,4), %r8
    00000088: 	addl	(%rdi,%rsi,4), %eax
    0000008b: 	leal	0x1(%rdx), %esi
    0000008e: 	cmpl	%esi, %ecx
    00000090: 	jle	.Ltmp902 # Offset: 144
    00000092: 	addl	$0x2, %edx
    00000095: 	addl	0x4(%rdi,%r8), %eax
    0000009a: 	cmpl	%edx, %ecx
    0000009c: 	jle	.Ltmp902 # Offset: 156
    0000009e: 	addl	0x8(%rdi,%r8), %eax
    000000a3: 	retq # Offset: 163
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp897:
    000000a8: 	xorl	%eax, %eax
.Ltmp902:
    000000aa: 	retq # Offset: 170
    000000ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp898:
    000000b0: 	cmpl	$0x2, %eax
    000000b3: 	jbe	.Ltmp903 # Offset: 179
    000000b9: 	pxor	%xmm1, %xmm1
    000000bd: 	movdqa	DATAat0x388d0(%rip), %xmm6
    000000c5: 	movl	%esi, %edx
    000000c7: 	movq	%rdi, %rax
    000000ca: 	movdqa	DATAat0x388e0(%rip), %xmm5
    000000d2: 	shrl	$0x2, %edx
    000000d5: 	movdqa	%xmm1, %xmm8
    000000da: 	movdqa	%xmm1, %xmm7
    000000de: 	subl	$0x1, %edx
    000000e1: 	pcmpgtd	%xmm6, %xmm8
    000000e6: 	movdqa	%xmm1, %xmm9
    000000eb: 	pcmpgtd	%xmm5, %xmm7
    000000ef: 	shlq	$0x4, %rdx
    000000f3: 	leaq	0x10(%rdi,%rdx), %rdx
    000000f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp904:
    00000100: 	movdqu	(%rax), %xmm3
    00000104: 	movdqa	%xmm9, %xmm12
    00000109: 	movdqa	%xmm8, %xmm11
    0000010e: 	movdqa	%xmm8, %xmm15
    00000113: 	addq	$0x10, %rax
    00000117: 	movdqa	%xmm3, %xmm0
    0000011b: 	movdqa	%xmm3, %xmm10
    00000120: 	punpckldq	%xmm3, %xmm0
    00000124: 	psrad	$0x1f, %xmm10
    0000012a: 	pcmpgtd	%xmm0, %xmm12
    0000012f: 	pmuludq	%xmm0, %xmm11
    00000134: 	movdqa	%xmm0, %xmm2
    00000138: 	pmuludq	%xmm6, %xmm2
    0000013c: 	movdqa	%xmm12, %xmm4
    00000141: 	pmuludq	%xmm5, %xmm12
    00000146: 	pmuludq	%xmm6, %xmm4
    0000014a: 	paddq	%xmm11, %xmm4
    0000014f: 	movdqa	%xmm9, %xmm11
    00000154: 	psllq	$0x20, %xmm4
    00000159: 	paddq	%xmm4, %xmm2
    0000015d: 	movdqa	%xmm3, %xmm4
    00000161: 	punpckhdq	%xmm3, %xmm4
    00000165: 	pcmpgtd	%xmm4, %xmm11
    0000016a: 	pmuludq	%xmm4, %xmm15
    0000016f: 	movdqa	%xmm4, %xmm14
    00000174: 	pmuludq	%xmm6, %xmm14
    00000179: 	movdqa	%xmm11, %xmm13
    0000017e: 	pmuludq	%xmm5, %xmm11
    00000183: 	pmuludq	%xmm6, %xmm13
    00000188: 	paddq	%xmm15, %xmm13
    0000018d: 	psllq	$0x20, %xmm13
    00000193: 	paddq	%xmm14, %xmm13
    00000198: 	shufps	$0xdd, %xmm13, %xmm2
    0000019d: 	movdqa	%xmm7, %xmm13
    000001a2: 	paddd	%xmm3, %xmm2
    000001a6: 	paddd	%xmm1, %xmm3
    000001aa: 	pmuludq	%xmm0, %xmm13
    000001af: 	pmuludq	%xmm5, %xmm0
    000001b3: 	psrad	$0x6, %xmm2
    000001b8: 	psubd	%xmm10, %xmm2
    000001bd: 	paddq	%xmm13, %xmm12
    000001c2: 	psllq	$0x20, %xmm12
    000001c8: 	paddq	%xmm12, %xmm0
    000001cd: 	movdqa	%xmm7, %xmm12
    000001d2: 	pmuludq	%xmm4, %xmm12
    000001d7: 	pmuludq	%xmm5, %xmm4
    000001db: 	paddq	%xmm12, %xmm11
    000001e0: 	psllq	$0x20, %xmm11
    000001e6: 	paddq	%xmm11, %xmm4
    000001eb: 	shufps	$0xdd, %xmm4, %xmm0
    000001ef: 	psrad	$0x1, %xmm0
    000001f4: 	psubd	%xmm10, %xmm0
    000001f9: 	paddd	%xmm0, %xmm2
    000001fd: 	movdqa	%xmm2, %xmm1
    00000201: 	paddd	%xmm3, %xmm1
    00000205: 	cmpq	%rdx, %rax
    00000208: 	jne	.Ltmp904 # Offset: 520
    0000020e: 	movdqa	%xmm1, %xmm0
    00000212: 	movl	%ecx, %edx
    00000214: 	psrldq	$0x8, %xmm0
    00000219: 	andl	$-0x4, %edx
    0000021c: 	paddd	%xmm0, %xmm1
    00000220: 	movdqa	%xmm1, %xmm0
    00000224: 	psrldq	$0x4, %xmm0
    00000229: 	paddd	%xmm0, %xmm1
    0000022d: 	movd	%xmm1, %eax
    00000231: 	testb	$0x3, %cl
    00000234: 	je	.Ltmp905 # Offset: 564
.Ltmp907:
    0000023a: 	movslq	%edx, %r8
    0000023d: 	leaq	(,%r8,4), %rsi
    00000245: 	movslq	(%rdi,%r8,4), %r8
    00000249: 	leal	(%r8,%rax), %r9d
    0000024d: 	movq	%r8, %r10
    00000250: 	imulq	$-0x77777777, %r8, %rax
    00000257: 	sarl	$0x1f, %r10d
    0000025b: 	shrq	$0x20, %rax
    0000025f: 	addl	%r8d, %eax
    00000262: 	imulq	$0x66666667, %r8, %r8
    00000269: 	sarl	$0x6, %eax
    0000026c: 	subl	%r10d, %eax
    0000026f: 	sarq	$0x21, %r8
    00000273: 	subl	%r10d, %r8d
    00000276: 	addl	%r8d, %eax
    00000279: 	leal	0x1(%rdx), %r8d
    0000027d: 	addl	%r9d, %eax
    00000280: 	cmpl	%r8d, %ecx
    00000283: 	jle	.Ltmp902 # Offset: 643
    00000289: 	movslq	0x4(%rdi,%rsi), %r8
    0000028e: 	addl	$0x2, %edx
    00000291: 	leal	(%r8,%rax), %r9d
    00000295: 	movq	%r8, %r10
    00000298: 	imulq	$-0x77777777, %r8, %rax
    0000029f: 	sarl	$0x1f, %r10d
    000002a3: 	shrq	$0x20, %rax
    000002a7: 	addl	%r8d, %eax
    000002aa: 	imulq	$0x66666667, %r8, %r8
    000002b1: 	sarl	$0x6, %eax
    000002b4: 	subl	%r10d, %eax
    000002b7: 	sarq	$0x21, %r8
    000002bb: 	subl	%r10d, %r8d
    000002be: 	addl	%r8d, %eax
    000002c1: 	addl	%r9d, %eax
    000002c4: 	cmpl	%edx, %ecx
    000002c6: 	jle	.Ltmp902 # Offset: 710
    000002cc: 	movslq	0x8(%rdi,%rsi), %rsi
    000002d1: 	imulq	$0x66666667, %rsi, %rcx
    000002d8: 	addl	%esi, %eax
    000002da: 	movq	%rsi, %rdx
    000002dd: 	movl	%esi, %edi
    000002df: 	imulq	$-0x77777777, %rsi, %rsi
    000002e6: 	sarl	$0x1f, %edi
    000002e9: 	sarq	$0x21, %rcx
    000002ed: 	shrq	$0x20, %rsi
    000002f1: 	subl	%edi, %ecx
    000002f3: 	addl	%esi, %edx
    000002f5: 	sarl	$0x6, %edx
    000002f8: 	subl	%edi, %edx
    000002fa: 	addl	%ecx, %edx
    000002fc: 	addl	%edx, %eax
    000002fe: 	retq # Offset: 766
.Ltmp899:
    000002ff: 	xorl	%edx, %edx
    00000301: 	xorl	%eax, %eax
    00000303: 	jmp	.Ltmp906 # Offset: 771
    00000308: 	nopl	(%rax,%rax) # Size: 8
.Ltmp901:
    00000310: 	retq # Offset: 784
.Ltmp905:
    00000311: 	retq # Offset: 785
.Ltmp903:
    00000312: 	xorl	%edx, %edx
    00000314: 	xorl	%eax, %eax
    00000316: 	jmp	.Ltmp907 # Offset: 790
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_while_loop_paramIiET_PKS0_iS0_"

Binary Function "_Z22test_while_loop_param2IiET_PKS0_iS0_" after disassembly {
  Number      : 135
  State       : disassembled
  Address     : 0xd400
  Size        : 0x23c
  MaxSize     : 0x240
  Offset      : 0xd400
  Section     : .text
  Orc Section : .local.text._Z22test_while_loop_param2IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0134:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp908 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	testl	%edx, %edx
    00000013: 	js	.Ltmp909 # Offset: 19
    00000019: 	cmpl	$0x2, %eax
    0000001c: 	jbe	.Ltmp910 # Offset: 28
    00000022: 	movl	%esi, %edx
    00000024: 	movq	%rdi, %rax
    00000027: 	pxor	%xmm0, %xmm0
    0000002b: 	shrl	$0x2, %edx
    0000002e: 	subl	$0x1, %edx
    00000031: 	shlq	$0x4, %rdx
    00000035: 	leaq	0x10(%rdi,%rdx), %rdx
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp911:
    00000040: 	movdqu	(%rax), %xmm6
    00000044: 	addq	$0x10, %rax
    00000048: 	paddd	%xmm6, %xmm0
    0000004c: 	cmpq	%rax, %rdx
    0000004f: 	jne	.Ltmp911 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%ecx, %edx
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x4, %edx
    0000005f: 	paddd	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x4, %xmm1
    0000006c: 	paddd	%xmm1, %xmm0
    00000070: 	movd	%xmm0, %eax
    00000074: 	testb	$0x3, %cl
    00000077: 	je	.Ltmp912 # Offset: 119
.Ltmp917:
    0000007d: 	movslq	%edx, %rsi
    00000080: 	leaq	(,%rsi,4), %r8
    00000088: 	addl	(%rdi,%rsi,4), %eax
    0000008b: 	leal	0x1(%rdx), %esi
    0000008e: 	cmpl	%esi, %ecx
    00000090: 	jle	.Ltmp913 # Offset: 144
    00000092: 	addl	$0x2, %edx
    00000095: 	addl	0x4(%rdi,%r8), %eax
    0000009a: 	cmpl	%ecx, %edx
    0000009c: 	jge	.Ltmp913 # Offset: 156
    0000009e: 	addl	0x8(%rdi,%r8), %eax
    000000a3: 	retq # Offset: 163
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp908:
    000000a8: 	xorl	%eax, %eax
.Ltmp913:
    000000aa: 	retq # Offset: 170
    000000ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp909:
    000000b0: 	cmpl	$0x2, %eax
    000000b3: 	jbe	.Ltmp914 # Offset: 179
    000000b9: 	pxor	%xmm1, %xmm1
    000000bd: 	movdqa	DATAat0x388e0(%rip), %xmm5
    000000c5: 	movl	%esi, %edx
    000000c7: 	movq	%rdi, %rax
    000000ca: 	shrl	$0x2, %edx
    000000cd: 	movdqa	%xmm1, %xmm6
    000000d1: 	movdqa	%xmm1, %xmm7
    000000d5: 	subl	$0x1, %edx
    000000d8: 	pcmpgtd	%xmm5, %xmm6
    000000dc: 	shlq	$0x4, %rdx
    000000e0: 	leaq	0x10(%rdi,%rdx), %rdx
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp915:
    000000e8: 	movdqu	(%rax), %xmm2
    000000ec: 	movdqa	%xmm7, %xmm3
    000000f0: 	movdqa	%xmm6, %xmm4
    000000f4: 	addq	$0x10, %rax
    000000f8: 	movdqa	%xmm6, %xmm8
    000000fd: 	movdqa	%xmm2, %xmm0
    00000101: 	punpckldq	%xmm2, %xmm0
    00000105: 	pcmpgtd	%xmm0, %xmm3
    00000109: 	pmuludq	%xmm0, %xmm4
    0000010d: 	pmuludq	%xmm5, %xmm0
    00000111: 	pmuludq	%xmm5, %xmm3
    00000115: 	paddq	%xmm4, %xmm3
    00000119: 	movdqa	%xmm7, %xmm4
    0000011d: 	psllq	$0x20, %xmm3
    00000122: 	paddq	%xmm3, %xmm0
    00000126: 	movdqa	%xmm2, %xmm3
    0000012a: 	punpckhdq	%xmm2, %xmm3
    0000012e: 	pcmpgtd	%xmm3, %xmm4
    00000132: 	pmuludq	%xmm3, %xmm8
    00000137: 	pmuludq	%xmm5, %xmm3
    0000013b: 	pmuludq	%xmm5, %xmm4
    0000013f: 	paddq	%xmm8, %xmm4
    00000144: 	psllq	$0x20, %xmm4
    00000149: 	paddq	%xmm4, %xmm3
    0000014d: 	shufps	$0xdd, %xmm3, %xmm0
    00000151: 	movdqa	%xmm2, %xmm3
    00000155: 	psrad	$0x1, %xmm0
    0000015a: 	paddd	%xmm1, %xmm2
    0000015e: 	psrad	$0x1f, %xmm3
    00000163: 	psubd	%xmm3, %xmm0
    00000167: 	movdqa	%xmm0, %xmm1
    0000016b: 	paddd	%xmm2, %xmm1
    0000016f: 	cmpq	%rdx, %rax
    00000172: 	jne	.Ltmp915 # Offset: 370
    00000178: 	movdqa	%xmm1, %xmm0
    0000017c: 	movl	%ecx, %r8d
    0000017f: 	psrldq	$0x8, %xmm0
    00000184: 	andl	$-0x4, %r8d
    00000188: 	paddd	%xmm0, %xmm1
    0000018c: 	movdqa	%xmm1, %xmm0
    00000190: 	psrldq	$0x4, %xmm0
    00000195: 	paddd	%xmm0, %xmm1
    00000199: 	movd	%xmm1, %eax
    0000019d: 	testb	$0x3, %cl
    000001a0: 	je	.Ltmp916 # Offset: 416
.Ltmp918:
    000001a6: 	movslq	%r8d, %rdx
    000001a9: 	leaq	(,%rdx,4), %r9
    000001b1: 	movslq	(%rdi,%rdx,4), %rdx
    000001b5: 	movq	%rdx, %rsi
    000001b8: 	addl	%edx, %eax
    000001ba: 	imulq	$0x66666667, %rdx, %rdx
    000001c1: 	sarl	$0x1f, %esi
    000001c4: 	sarq	$0x21, %rdx
    000001c8: 	subl	%esi, %edx
    000001ca: 	addl	%edx, %eax
    000001cc: 	leal	0x1(%r8), %edx
    000001d0: 	cmpl	%edx, %ecx
    000001d2: 	jle	.Ltmp913 # Offset: 466
    000001d8: 	movslq	0x4(%rdi,%r9), %rdx
    000001dd: 	addl	$0x2, %r8d
    000001e1: 	movq	%rdx, %rsi
    000001e4: 	addl	%edx, %eax
    000001e6: 	imulq	$0x66666667, %rdx, %rdx
    000001ed: 	sarl	$0x1f, %esi
    000001f0: 	sarq	$0x21, %rdx
    000001f4: 	subl	%esi, %edx
    000001f6: 	addl	%edx, %eax
    000001f8: 	cmpl	%r8d, %ecx
    000001fb: 	jle	.Ltmp913 # Offset: 507
    00000201: 	movslq	0x8(%rdi,%r9), %rdx
    00000206: 	addl	%edx, %eax
    00000208: 	movq	%rdx, %rcx
    0000020b: 	imulq	$0x66666667, %rdx, %rdx
    00000212: 	sarl	$0x1f, %ecx
    00000215: 	sarq	$0x21, %rdx
    00000219: 	subl	%ecx, %edx
    0000021b: 	addl	%edx, %eax
    0000021d: 	retq # Offset: 541
.Ltmp910:
    0000021e: 	xorl	%edx, %edx
    00000220: 	xorl	%eax, %eax
    00000222: 	jmp	.Ltmp917 # Offset: 546
    00000227: 	nopw	(%rax,%rax) # Size: 9
.Ltmp912:
    00000230: 	retq # Offset: 560
.Ltmp916:
    00000231: 	retq # Offset: 561
.Ltmp914:
    00000232: 	xorl	%r8d, %r8d
    00000235: 	xorl	%eax, %eax
    00000237: 	jmp	.Ltmp918 # Offset: 567
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_while_loop_param2IiET_PKS0_iS0_"

Binary Function "_Z22test_while_loop_param3IiET_PKS0_iS0_" after disassembly {
  Number      : 136
  State       : disassembled
  Address     : 0xd640
  Size        : 0x24e
  MaxSize     : 0x250
  Offset      : 0xd640
  Section     : .text
  Orc Section : .local.text._Z22test_while_loop_param3IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0135:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	testl	%edx, %edx
    00000008: 	js	.Ltmp919 # Offset: 8
    0000000e: 	xorl	%r8d, %r8d
    00000011: 	testl	%esi, %esi
    00000013: 	jle	.Ltmp920 # Offset: 19
.Ltmp927:
    00000019: 	testl	%ecx, %ecx
    0000001b: 	movl	$0x1, %esi
    00000020: 	cmovgl	%ecx, %esi
    00000023: 	cmpl	$0x3, %ecx
    00000026: 	jle	.Ltmp921 # Offset: 38
    0000002c: 	leaq	0x10(%rdi), %r9
.Ltmp929:
    00000030: 	movl	%esi, %edx
    00000032: 	movq	%rdi, %rax
    00000035: 	pxor	%xmm0, %xmm0
    00000039: 	shrl	$0x2, %edx
    0000003c: 	subl	$0x1, %edx
    0000003f: 	shlq	$0x4, %rdx
    00000043: 	addq	%r9, %rdx
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp922:
    00000050: 	movdqu	(%rax), %xmm6
    00000054: 	addq	$0x10, %rax
    00000058: 	paddd	%xmm6, %xmm0
    0000005c: 	cmpq	%rax, %rdx
    0000005f: 	jne	.Ltmp922 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	psrldq	$0x8, %xmm1
    0000006a: 	paddd	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x4, %xmm1
    00000077: 	paddd	%xmm1, %xmm0
    0000007b: 	movd	%xmm0, %eax
    0000007f: 	addl	%eax, %r8d
    00000082: 	movl	%esi, %eax
    00000084: 	andl	$-0x4, %eax
    00000087: 	andl	$0x3, %esi
    0000008a: 	je	.Ltmp920 # Offset: 138
.Ltmp928:
    0000008c: 	movslq	%eax, %rdx
    0000008f: 	leaq	(,%rdx,4), %rsi
    00000097: 	addl	(%rdi,%rdx,4), %r8d
    0000009b: 	leal	0x1(%rax), %edx
    0000009e: 	cmpl	%edx, %ecx
    000000a0: 	jle	.Ltmp920 # Offset: 160
    000000a2: 	addl	$0x2, %eax
    000000a5: 	addl	0x4(%rdi,%rsi), %r8d
    000000aa: 	cmpl	%eax, %ecx
    000000ac: 	jle	.Ltmp920 # Offset: 172
    000000ae: 	addl	0x8(%rdi,%rsi), %r8d
.Ltmp920:
    000000b3: 	movl	%r8d, %eax
    000000b6: 	retq # Offset: 182
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp919:
    000000c0: 	testl	%esi, %esi
    000000c2: 	jle	.Ltmp923 # Offset: 194
    000000c8: 	leal	-0x1(%rsi), %eax
    000000cb: 	cmpl	$0x2, %eax
    000000ce: 	jbe	.Ltmp924 # Offset: 206
    000000d4: 	pxor	%xmm4, %xmm4
    000000d8: 	movl	%esi, %edx
    000000da: 	leaq	0x10(%rdi), %r9
    000000de: 	movq	%rdi, %rax
    000000e1: 	movdqa	DATAat0x388e0(%rip), %xmm5
    000000e9: 	shrl	$0x2, %edx
    000000ec: 	movdqa	%xmm4, %xmm6
    000000f0: 	movdqa	%xmm4, %xmm7
    000000f4: 	subl	$0x1, %edx
    000000f7: 	pcmpgtd	%xmm5, %xmm6
    000000fb: 	shlq	$0x4, %rdx
    000000ff: 	addq	%r9, %rdx
    00000102: 	nopw	(%rax,%rax) # Size: 6
.Ltmp925:
    00000108: 	movdqu	(%rax), %xmm1
    0000010c: 	movdqa	%xmm7, %xmm2
    00000110: 	movdqa	%xmm6, %xmm3
    00000114: 	addq	$0x10, %rax
    00000118: 	movdqa	%xmm6, %xmm8
    0000011d: 	movdqa	%xmm1, %xmm0
    00000121: 	punpckldq	%xmm1, %xmm0
    00000125: 	pcmpgtd	%xmm0, %xmm2
    00000129: 	pmuludq	%xmm0, %xmm3
    0000012d: 	pmuludq	%xmm5, %xmm0
    00000131: 	pmuludq	%xmm5, %xmm2
    00000135: 	paddq	%xmm3, %xmm2
    00000139: 	movdqa	%xmm7, %xmm3
    0000013d: 	psllq	$0x20, %xmm2
    00000142: 	paddq	%xmm2, %xmm0
    00000146: 	movdqa	%xmm1, %xmm2
    0000014a: 	punpckhdq	%xmm1, %xmm2
    0000014e: 	psrad	$0x1f, %xmm1
    00000153: 	pcmpgtd	%xmm2, %xmm3
    00000157: 	pmuludq	%xmm2, %xmm8
    0000015c: 	pmuludq	%xmm5, %xmm2
    00000160: 	pmuludq	%xmm5, %xmm3
    00000164: 	paddq	%xmm8, %xmm3
    00000169: 	psllq	$0x20, %xmm3
    0000016e: 	paddq	%xmm3, %xmm2
    00000172: 	shufps	$0xdd, %xmm2, %xmm0
    00000176: 	psrad	$0x1, %xmm0
    0000017b: 	psubd	%xmm1, %xmm0
    0000017f: 	paddd	%xmm0, %xmm4
    00000183: 	cmpq	%rdx, %rax
    00000186: 	jne	.Ltmp925 # Offset: 390
    00000188: 	movdqa	%xmm4, %xmm0
    0000018c: 	movl	%ecx, %eax
    0000018e: 	psrldq	$0x8, %xmm0
    00000193: 	andl	$-0x4, %eax
    00000196: 	paddd	%xmm0, %xmm4
    0000019a: 	movdqa	%xmm4, %xmm0
    0000019e: 	psrldq	$0x4, %xmm0
    000001a3: 	paddd	%xmm0, %xmm4
    000001a7: 	movd	%xmm4, %r8d
    000001ac: 	cmpl	%eax, %ecx
    000001ae: 	je	.Ltmp926 # Offset: 430
.Ltmp930:
    000001b0: 	movslq	%eax, %rdx
    000001b3: 	leaq	(,%rdx,4), %r9
    000001bb: 	movslq	(%rdi,%rdx,4), %rdx
    000001bf: 	movq	%rdx, %rsi
    000001c2: 	imulq	$0x66666667, %rdx, %rdx
    000001c9: 	sarl	$0x1f, %esi
    000001cc: 	sarq	$0x21, %rdx
    000001d0: 	subl	%esi, %edx
    000001d2: 	addl	%edx, %r8d
    000001d5: 	leal	0x1(%rax), %edx
    000001d8: 	cmpl	%edx, %ecx
    000001da: 	jle	.Ltmp927 # Offset: 474
    000001e0: 	movslq	0x4(%rdi,%r9), %rdx
    000001e5: 	addl	$0x2, %eax
    000001e8: 	movq	%rdx, %rsi
    000001eb: 	imulq	$0x66666667, %rdx, %rdx
    000001f2: 	sarl	$0x1f, %esi
    000001f5: 	sarq	$0x21, %rdx
    000001f9: 	subl	%esi, %edx
    000001fb: 	addl	%edx, %r8d
    000001fe: 	cmpl	%eax, %ecx
    00000200: 	jle	.Ltmp927 # Offset: 512
    00000206: 	movslq	0x8(%rdi,%r9), %rax
    0000020b: 	movq	%rax, %rdx
    0000020e: 	imulq	$0x66666667, %rax, %rax
    00000215: 	sarl	$0x1f, %edx
    00000218: 	sarq	$0x21, %rax
    0000021c: 	subl	%edx, %eax
    0000021e: 	addl	%eax, %r8d
    00000221: 	jmp	.Ltmp927 # Offset: 545
.Ltmp921:
    00000226: 	xorl	%eax, %eax
    00000228: 	jmp	.Ltmp928 # Offset: 552
.Ltmp926:
    0000022d: 	testl	%ecx, %ecx
    0000022f: 	movl	$0x1, %esi
    00000234: 	cmovgl	%ecx, %esi
    00000237: 	jmp	.Ltmp929 # Offset: 567
.Ltmp923:
    0000023c: 	xorl	%r8d, %r8d
    0000023f: 	jmp	.Ltmp920 # Offset: 575
.Ltmp924:
    00000244: 	xorl	%eax, %eax
    00000246: 	xorl	%r8d, %r8d
    00000249: 	jmp	.Ltmp930 # Offset: 585
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_while_loop_param3IiET_PKS0_iS0_"

Binary Function "_Z19test_do_loop_param3IiET_PKS0_iS0_" after disassembly {
  Number      : 137
  State       : disassembled
  Address     : 0xd890
  Size        : 0x256
  MaxSize     : 0x260
  Offset      : 0xd890
  Section     : .text
  Orc Section : .local.text._Z19test_do_loop_param3IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0136:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	xorl	%r8d, %r8d
    00000009: 	testl	%edx, %edx
    0000000b: 	js	.Ltmp931 # Offset: 11
    00000011: 	testl	%esi, %esi
    00000013: 	jle	.Ltmp932 # Offset: 19
.Ltmp938:
    00000019: 	testl	%ecx, %ecx
    0000001b: 	movl	$0x1, %esi
    00000020: 	cmovgl	%ecx, %esi
    00000023: 	cmpl	$0x3, %ecx
    00000026: 	jle	.Ltmp933 # Offset: 38
.Ltmp939:
    0000002c: 	leaq	0x10(%rdi), %r9
.Ltmp941:
    00000030: 	movl	%esi, %edx
    00000032: 	movq	%rdi, %rax
    00000035: 	pxor	%xmm0, %xmm0
    00000039: 	shrl	$0x2, %edx
    0000003c: 	subl	$0x1, %edx
    0000003f: 	shlq	$0x4, %rdx
    00000043: 	addq	%r9, %rdx
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp934:
    00000050: 	movdqu	(%rax), %xmm6
    00000054: 	addq	$0x10, %rax
    00000058: 	paddd	%xmm6, %xmm0
    0000005c: 	cmpq	%rax, %rdx
    0000005f: 	jne	.Ltmp934 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	psrldq	$0x8, %xmm1
    0000006a: 	paddd	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x4, %xmm1
    00000077: 	paddd	%xmm1, %xmm0
    0000007b: 	movd	%xmm0, %eax
    0000007f: 	addl	%eax, %r8d
    00000082: 	movl	%esi, %eax
    00000084: 	andl	$-0x4, %eax
    00000087: 	andl	$0x3, %esi
    0000008a: 	je	.Ltmp932 # Offset: 138
.Ltmp940:
    0000008c: 	movslq	%eax, %rdx
    0000008f: 	leaq	(,%rdx,4), %rsi
    00000097: 	addl	(%rdi,%rdx,4), %r8d
    0000009b: 	leal	0x1(%rax), %edx
    0000009e: 	cmpl	%edx, %ecx
    000000a0: 	jle	.Ltmp932 # Offset: 160
    000000a2: 	addl	$0x2, %eax
    000000a5: 	addl	0x4(%rdi,%rsi), %r8d
    000000aa: 	cmpl	%eax, %ecx
    000000ac: 	jle	.Ltmp932 # Offset: 172
    000000ae: 	addl	0x8(%rdi,%rsi), %r8d
.Ltmp932:
    000000b3: 	movl	%r8d, %eax
    000000b6: 	retq # Offset: 182
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp931:
    000000c0: 	testl	%esi, %esi
    000000c2: 	jle	.Ltmp932 # Offset: 194
    000000c4: 	leal	-0x1(%rsi), %eax
    000000c7: 	cmpl	$0x2, %eax
    000000ca: 	jbe	.Ltmp935 # Offset: 202
    000000d0: 	pxor	%xmm1, %xmm1
    000000d4: 	movl	%esi, %edx
    000000d6: 	leaq	0x10(%rdi), %r9
    000000da: 	movq	%rdi, %rax
    000000dd: 	movdqa	DATAat0x388e0(%rip), %xmm5
    000000e5: 	shrl	$0x2, %edx
    000000e8: 	movdqa	%xmm1, %xmm6
    000000ec: 	movdqa	%xmm1, %xmm7
    000000f0: 	subl	$0x1, %edx
    000000f3: 	pcmpgtd	%xmm5, %xmm6
    000000f7: 	shlq	$0x4, %rdx
    000000fb: 	addq	%r9, %rdx
    000000fe: 	nop # Size: 2
.Ltmp936:
    00000100: 	movdqu	(%rax), %xmm2
    00000104: 	movdqa	%xmm7, %xmm3
    00000108: 	movdqa	%xmm6, %xmm4
    0000010c: 	addq	$0x10, %rax
    00000110: 	movdqa	%xmm6, %xmm8
    00000115: 	movdqa	%xmm2, %xmm0
    00000119: 	punpckldq	%xmm2, %xmm0
    0000011d: 	pcmpgtd	%xmm0, %xmm3
    00000121: 	pmuludq	%xmm0, %xmm4
    00000125: 	pmuludq	%xmm5, %xmm0
    00000129: 	pmuludq	%xmm5, %xmm3
    0000012d: 	paddq	%xmm4, %xmm3
    00000131: 	movdqa	%xmm7, %xmm4
    00000135: 	psllq	$0x20, %xmm3
    0000013a: 	paddq	%xmm3, %xmm0
    0000013e: 	movdqa	%xmm2, %xmm3
    00000142: 	punpckhdq	%xmm2, %xmm3
    00000146: 	psrad	$0x1f, %xmm2
    0000014b: 	pcmpgtd	%xmm3, %xmm4
    0000014f: 	pmuludq	%xmm3, %xmm8
    00000154: 	pmuludq	%xmm5, %xmm3
    00000158: 	pmuludq	%xmm5, %xmm4
    0000015c: 	paddq	%xmm8, %xmm4
    00000161: 	psllq	$0x20, %xmm4
    00000166: 	paddq	%xmm4, %xmm3
    0000016a: 	shufps	$0xdd, %xmm3, %xmm0
    0000016e: 	psrad	$0x1, %xmm0
    00000173: 	psubd	%xmm2, %xmm0
    00000177: 	paddd	%xmm0, %xmm1
    0000017b: 	cmpq	%rdx, %rax
    0000017e: 	jne	.Ltmp936 # Offset: 382
    00000180: 	movdqa	%xmm1, %xmm0
    00000184: 	movl	%ecx, %eax
    00000186: 	psrldq	$0x8, %xmm0
    0000018b: 	andl	$-0x4, %eax
    0000018e: 	paddd	%xmm0, %xmm1
    00000192: 	movdqa	%xmm1, %xmm0
    00000196: 	psrldq	$0x4, %xmm0
    0000019b: 	paddd	%xmm0, %xmm1
    0000019f: 	movd	%xmm1, %r8d
    000001a4: 	cmpl	%eax, %ecx
    000001a6: 	je	.Ltmp937 # Offset: 422
.Ltmp942:
    000001ac: 	movslq	%eax, %rdx
    000001af: 	leaq	(,%rdx,4), %r9
    000001b7: 	movslq	(%rdi,%rdx,4), %rdx
    000001bb: 	movq	%rdx, %rsi
    000001be: 	imulq	$0x66666667, %rdx, %rdx
    000001c5: 	sarl	$0x1f, %esi
    000001c8: 	sarq	$0x21, %rdx
    000001cc: 	subl	%esi, %edx
    000001ce: 	addl	%edx, %r8d
    000001d1: 	leal	0x1(%rax), %edx
    000001d4: 	cmpl	%edx, %ecx
    000001d6: 	jle	.Ltmp938 # Offset: 470
    000001dc: 	movslq	0x4(%rdi,%r9), %rdx
    000001e1: 	addl	$0x2, %eax
    000001e4: 	movq	%rdx, %rsi
    000001e7: 	imulq	$0x66666667, %rdx, %rdx
    000001ee: 	sarl	$0x1f, %esi
    000001f1: 	sarq	$0x21, %rdx
    000001f5: 	subl	%esi, %edx
    000001f7: 	addl	%edx, %r8d
    000001fa: 	cmpl	%eax, %ecx
    000001fc: 	jle	.Ltmp938 # Offset: 508
    00000202: 	movslq	0x8(%rdi,%r9), %rax
    00000207: 	movl	$0x1, %esi
    0000020c: 	movq	%rax, %rdx
    0000020f: 	imulq	$0x66666667, %rax, %rax
    00000216: 	sarl	$0x1f, %edx
    00000219: 	sarq	$0x21, %rax
    0000021d: 	subl	%edx, %eax
    0000021f: 	addl	%eax, %r8d
    00000222: 	testl	%ecx, %ecx
    00000224: 	cmovgl	%ecx, %esi
    00000227: 	cmpl	$0x3, %ecx
    0000022a: 	jg	.Ltmp939 # Offset: 554
.Ltmp933:
    00000230: 	xorl	%eax, %eax
    00000232: 	jmp	.Ltmp940 # Offset: 562
    00000237: 	nopw	(%rax,%rax) # Size: 9
.Ltmp937:
    00000240: 	testl	%ecx, %ecx
    00000242: 	movl	$0x1, %esi
    00000247: 	cmovgl	%ecx, %esi
    0000024a: 	jmp	.Ltmp941 # Offset: 586
.Ltmp935:
    0000024f: 	xorl	%eax, %eax
    00000251: 	jmp	.Ltmp942 # Offset: 593
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_do_loop_param3IiET_PKS0_iS0_"

Binary Function "_Z21test_goto_loop_param3IiET_PKS0_iS0_" after disassembly {
  Number      : 138
  State       : disassembled
  Address     : 0xdaf0
  Size        : 0x256
  MaxSize     : 0x260
  Offset      : 0xdaf0
  Section     : .text
  Orc Section : .local.text._Z21test_goto_loop_param3IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0137:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	xorl	%r8d, %r8d
    00000009: 	testl	%edx, %edx
    0000000b: 	js	.Ltmp943 # Offset: 11
    00000011: 	testl	%esi, %esi
    00000013: 	jle	.Ltmp944 # Offset: 19
.Ltmp950:
    00000019: 	testl	%ecx, %ecx
    0000001b: 	movl	$0x1, %esi
    00000020: 	cmovgl	%ecx, %esi
    00000023: 	cmpl	$0x3, %ecx
    00000026: 	jle	.Ltmp945 # Offset: 38
.Ltmp951:
    0000002c: 	leaq	0x10(%rdi), %r9
.Ltmp953:
    00000030: 	movl	%esi, %edx
    00000032: 	movq	%rdi, %rax
    00000035: 	pxor	%xmm0, %xmm0
    00000039: 	shrl	$0x2, %edx
    0000003c: 	subl	$0x1, %edx
    0000003f: 	shlq	$0x4, %rdx
    00000043: 	addq	%r9, %rdx
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp946:
    00000050: 	movdqu	(%rax), %xmm6
    00000054: 	addq	$0x10, %rax
    00000058: 	paddd	%xmm6, %xmm0
    0000005c: 	cmpq	%rax, %rdx
    0000005f: 	jne	.Ltmp946 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	psrldq	$0x8, %xmm1
    0000006a: 	paddd	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x4, %xmm1
    00000077: 	paddd	%xmm1, %xmm0
    0000007b: 	movd	%xmm0, %eax
    0000007f: 	addl	%eax, %r8d
    00000082: 	movl	%esi, %eax
    00000084: 	andl	$-0x4, %eax
    00000087: 	andl	$0x3, %esi
    0000008a: 	je	.Ltmp944 # Offset: 138
.Ltmp952:
    0000008c: 	movslq	%eax, %rdx
    0000008f: 	leaq	(,%rdx,4), %rsi
    00000097: 	addl	(%rdi,%rdx,4), %r8d
    0000009b: 	leal	0x1(%rax), %edx
    0000009e: 	cmpl	%edx, %ecx
    000000a0: 	jle	.Ltmp944 # Offset: 160
    000000a2: 	addl	$0x2, %eax
    000000a5: 	addl	0x4(%rdi,%rsi), %r8d
    000000aa: 	cmpl	%eax, %ecx
    000000ac: 	jle	.Ltmp944 # Offset: 172
    000000ae: 	addl	0x8(%rdi,%rsi), %r8d
.Ltmp944:
    000000b3: 	movl	%r8d, %eax
    000000b6: 	retq # Offset: 182
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp943:
    000000c0: 	testl	%esi, %esi
    000000c2: 	jle	.Ltmp944 # Offset: 194
    000000c4: 	leal	-0x1(%rsi), %eax
    000000c7: 	cmpl	$0x2, %eax
    000000ca: 	jbe	.Ltmp947 # Offset: 202
    000000d0: 	pxor	%xmm1, %xmm1
    000000d4: 	movl	%esi, %edx
    000000d6: 	leaq	0x10(%rdi), %r9
    000000da: 	movq	%rdi, %rax
    000000dd: 	movdqa	DATAat0x388e0(%rip), %xmm5
    000000e5: 	shrl	$0x2, %edx
    000000e8: 	movdqa	%xmm1, %xmm6
    000000ec: 	movdqa	%xmm1, %xmm7
    000000f0: 	subl	$0x1, %edx
    000000f3: 	pcmpgtd	%xmm5, %xmm6
    000000f7: 	shlq	$0x4, %rdx
    000000fb: 	addq	%r9, %rdx
    000000fe: 	nop # Size: 2
.Ltmp948:
    00000100: 	movdqu	(%rax), %xmm2
    00000104: 	movdqa	%xmm7, %xmm3
    00000108: 	movdqa	%xmm6, %xmm4
    0000010c: 	addq	$0x10, %rax
    00000110: 	movdqa	%xmm6, %xmm8
    00000115: 	movdqa	%xmm2, %xmm0
    00000119: 	punpckldq	%xmm2, %xmm0
    0000011d: 	pcmpgtd	%xmm0, %xmm3
    00000121: 	pmuludq	%xmm0, %xmm4
    00000125: 	pmuludq	%xmm5, %xmm0
    00000129: 	pmuludq	%xmm5, %xmm3
    0000012d: 	paddq	%xmm4, %xmm3
    00000131: 	movdqa	%xmm7, %xmm4
    00000135: 	psllq	$0x20, %xmm3
    0000013a: 	paddq	%xmm3, %xmm0
    0000013e: 	movdqa	%xmm2, %xmm3
    00000142: 	punpckhdq	%xmm2, %xmm3
    00000146: 	psrad	$0x1f, %xmm2
    0000014b: 	pcmpgtd	%xmm3, %xmm4
    0000014f: 	pmuludq	%xmm3, %xmm8
    00000154: 	pmuludq	%xmm5, %xmm3
    00000158: 	pmuludq	%xmm5, %xmm4
    0000015c: 	paddq	%xmm8, %xmm4
    00000161: 	psllq	$0x20, %xmm4
    00000166: 	paddq	%xmm4, %xmm3
    0000016a: 	shufps	$0xdd, %xmm3, %xmm0
    0000016e: 	psrad	$0x1, %xmm0
    00000173: 	psubd	%xmm2, %xmm0
    00000177: 	paddd	%xmm0, %xmm1
    0000017b: 	cmpq	%rdx, %rax
    0000017e: 	jne	.Ltmp948 # Offset: 382
    00000180: 	movdqa	%xmm1, %xmm0
    00000184: 	movl	%ecx, %eax
    00000186: 	psrldq	$0x8, %xmm0
    0000018b: 	andl	$-0x4, %eax
    0000018e: 	paddd	%xmm0, %xmm1
    00000192: 	movdqa	%xmm1, %xmm0
    00000196: 	psrldq	$0x4, %xmm0
    0000019b: 	paddd	%xmm0, %xmm1
    0000019f: 	movd	%xmm1, %r8d
    000001a4: 	cmpl	%eax, %ecx
    000001a6: 	je	.Ltmp949 # Offset: 422
.Ltmp954:
    000001ac: 	movslq	%eax, %rdx
    000001af: 	leaq	(,%rdx,4), %r9
    000001b7: 	movslq	(%rdi,%rdx,4), %rdx
    000001bb: 	movq	%rdx, %rsi
    000001be: 	imulq	$0x66666667, %rdx, %rdx
    000001c5: 	sarl	$0x1f, %esi
    000001c8: 	sarq	$0x21, %rdx
    000001cc: 	subl	%esi, %edx
    000001ce: 	addl	%edx, %r8d
    000001d1: 	leal	0x1(%rax), %edx
    000001d4: 	cmpl	%edx, %ecx
    000001d6: 	jle	.Ltmp950 # Offset: 470
    000001dc: 	movslq	0x4(%rdi,%r9), %rdx
    000001e1: 	addl	$0x2, %eax
    000001e4: 	movq	%rdx, %rsi
    000001e7: 	imulq	$0x66666667, %rdx, %rdx
    000001ee: 	sarl	$0x1f, %esi
    000001f1: 	sarq	$0x21, %rdx
    000001f5: 	subl	%esi, %edx
    000001f7: 	addl	%edx, %r8d
    000001fa: 	cmpl	%eax, %ecx
    000001fc: 	jle	.Ltmp950 # Offset: 508
    00000202: 	movslq	0x8(%rdi,%r9), %rax
    00000207: 	movl	$0x1, %esi
    0000020c: 	movq	%rax, %rdx
    0000020f: 	imulq	$0x66666667, %rax, %rax
    00000216: 	sarl	$0x1f, %edx
    00000219: 	sarq	$0x21, %rax
    0000021d: 	subl	%edx, %eax
    0000021f: 	addl	%eax, %r8d
    00000222: 	testl	%ecx, %ecx
    00000224: 	cmovgl	%ecx, %esi
    00000227: 	cmpl	$0x3, %ecx
    0000022a: 	jg	.Ltmp951 # Offset: 554
.Ltmp945:
    00000230: 	xorl	%eax, %eax
    00000232: 	jmp	.Ltmp952 # Offset: 562
    00000237: 	nopw	(%rax,%rax) # Size: 9
.Ltmp949:
    00000240: 	testl	%ecx, %ecx
    00000242: 	movl	$0x1, %esi
    00000247: 	cmovgl	%ecx, %esi
    0000024a: 	jmp	.Ltmp953 # Offset: 586
.Ltmp947:
    0000024f: 	xorl	%eax, %eax
    00000251: 	jmp	.Ltmp954 # Offset: 593
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_goto_loop_param3IiET_PKS0_iS0_"

Binary Function "_Z20test_for_loop_globalIiET_PKS0_iS0_" after disassembly {
  Number      : 139
  State       : disassembled
  Address     : 0xdd50
  Size        : 0x31b
  MaxSize     : 0x320
  Offset      : 0xdd50
  Section     : .text
  Orc Section : .local.text._Z20test_for_loop_globalIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0138:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%esi, %esi
    00000009: 	jle	.Ltmp955 # Offset: 9
    0000000f: 	cvttsd2si	init_value(%rip), %eax
    00000017: 	testl	%eax, %eax
    00000019: 	leal	-0x1(%rsi), %eax
    0000001c: 	js	.Ltmp956 # Offset: 28
    00000022: 	cmpl	$0x2, %eax
    00000025: 	jbe	.Ltmp957 # Offset: 37
    0000002b: 	movl	%esi, %edx
    0000002d: 	movq	%rdi, %rax
    00000030: 	pxor	%xmm0, %xmm0
    00000034: 	shrl	$0x2, %edx
    00000037: 	subl	$0x1, %edx
    0000003a: 	shlq	$0x4, %rdx
    0000003e: 	leaq	0x10(%rdi,%rdx), %rdx
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp958:
    00000048: 	movdqu	(%rax), %xmm7
    0000004c: 	addq	$0x10, %rax
    00000050: 	paddd	%xmm7, %xmm0
    00000054: 	cmpq	%rax, %rdx
    00000057: 	jne	.Ltmp958 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	movl	%esi, %edx
    0000005f: 	psrldq	$0x8, %xmm1
    00000064: 	andl	$-0x4, %edx
    00000067: 	paddd	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	psrldq	$0x4, %xmm1
    00000074: 	paddd	%xmm1, %xmm0
    00000078: 	movd	%xmm0, %eax
    0000007c: 	testb	$0x3, %sil
    00000080: 	je	.Ltmp959 # Offset: 128
.Ltmp964:
    00000086: 	movslq	%edx, %rdi
    00000089: 	leaq	(,%rdi,4), %r8
    00000091: 	addl	(%rcx,%rdi,4), %eax
    00000094: 	leal	0x1(%rdx), %edi
    00000097: 	cmpl	%edi, %esi
    00000099: 	jle	.Ltmp960 # Offset: 153
    0000009b: 	addl	$0x2, %edx
    0000009e: 	addl	0x4(%rcx,%r8), %eax
    000000a3: 	cmpl	%edx, %esi
    000000a5: 	jle	.Ltmp960 # Offset: 165
    000000a7: 	addl	0x8(%rcx,%r8), %eax
    000000ac: 	retq # Offset: 172
    000000ad: 	nopl	(%rax) # Size: 3
.Ltmp955:
    000000b0: 	xorl	%eax, %eax
.Ltmp960:
    000000b2: 	retq # Offset: 178
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp956:
    000000b8: 	cmpl	$0x2, %eax
    000000bb: 	jbe	.Ltmp961 # Offset: 187
    000000c1: 	pxor	%xmm1, %xmm1
    000000c5: 	movdqa	DATAat0x388d0(%rip), %xmm6
    000000cd: 	movl	%esi, %edx
    000000cf: 	movq	%rdi, %rax
    000000d2: 	movdqa	DATAat0x388e0(%rip), %xmm5
    000000da: 	shrl	$0x2, %edx
    000000dd: 	movdqa	%xmm1, %xmm8
    000000e2: 	movdqa	%xmm1, %xmm7
    000000e6: 	subl	$0x1, %edx
    000000e9: 	pcmpgtd	%xmm6, %xmm8
    000000ee: 	movdqa	%xmm1, %xmm9
    000000f3: 	pcmpgtd	%xmm5, %xmm7
    000000f7: 	shlq	$0x4, %rdx
    000000fb: 	leaq	0x10(%rdi,%rdx), %rdx
.Ltmp962:
    00000100: 	movdqu	(%rax), %xmm3
    00000104: 	movdqa	%xmm9, %xmm12
    00000109: 	movdqa	%xmm8, %xmm11
    0000010e: 	movdqa	%xmm8, %xmm15
    00000113: 	addq	$0x10, %rax
    00000117: 	movdqa	%xmm3, %xmm0
    0000011b: 	movdqa	%xmm3, %xmm10
    00000120: 	punpckldq	%xmm3, %xmm0
    00000124: 	psrad	$0x1f, %xmm10
    0000012a: 	pcmpgtd	%xmm0, %xmm12
    0000012f: 	pmuludq	%xmm0, %xmm11
    00000134: 	movdqa	%xmm0, %xmm2
    00000138: 	pmuludq	%xmm6, %xmm2
    0000013c: 	movdqa	%xmm12, %xmm4
    00000141: 	pmuludq	%xmm5, %xmm12
    00000146: 	pmuludq	%xmm6, %xmm4
    0000014a: 	paddq	%xmm11, %xmm4
    0000014f: 	movdqa	%xmm9, %xmm11
    00000154: 	psllq	$0x20, %xmm4
    00000159: 	paddq	%xmm4, %xmm2
    0000015d: 	movdqa	%xmm3, %xmm4
    00000161: 	punpckhdq	%xmm3, %xmm4
    00000165: 	pcmpgtd	%xmm4, %xmm11
    0000016a: 	pmuludq	%xmm4, %xmm15
    0000016f: 	movdqa	%xmm4, %xmm14
    00000174: 	pmuludq	%xmm6, %xmm14
    00000179: 	movdqa	%xmm11, %xmm13
    0000017e: 	pmuludq	%xmm5, %xmm11
    00000183: 	pmuludq	%xmm6, %xmm13
    00000188: 	paddq	%xmm15, %xmm13
    0000018d: 	psllq	$0x20, %xmm13
    00000193: 	paddq	%xmm14, %xmm13
    00000198: 	shufps	$0xdd, %xmm13, %xmm2
    0000019d: 	movdqa	%xmm7, %xmm13
    000001a2: 	paddd	%xmm3, %xmm2
    000001a6: 	paddd	%xmm1, %xmm3
    000001aa: 	pmuludq	%xmm0, %xmm13
    000001af: 	pmuludq	%xmm5, %xmm0
    000001b3: 	psrad	$0x6, %xmm2
    000001b8: 	psubd	%xmm10, %xmm2
    000001bd: 	paddq	%xmm13, %xmm12
    000001c2: 	psllq	$0x20, %xmm12
    000001c8: 	paddq	%xmm12, %xmm0
    000001cd: 	movdqa	%xmm7, %xmm12
    000001d2: 	pmuludq	%xmm4, %xmm12
    000001d7: 	pmuludq	%xmm5, %xmm4
    000001db: 	paddq	%xmm12, %xmm11
    000001e0: 	psllq	$0x20, %xmm11
    000001e6: 	paddq	%xmm11, %xmm4
    000001eb: 	shufps	$0xdd, %xmm4, %xmm0
    000001ef: 	psrad	$0x1, %xmm0
    000001f4: 	psubd	%xmm10, %xmm0
    000001f9: 	paddd	%xmm0, %xmm2
    000001fd: 	movdqa	%xmm2, %xmm1
    00000201: 	paddd	%xmm3, %xmm1
    00000205: 	cmpq	%rdx, %rax
    00000208: 	jne	.Ltmp962 # Offset: 520
    0000020e: 	movdqa	%xmm1, %xmm0
    00000212: 	movl	%esi, %edx
    00000214: 	psrldq	$0x8, %xmm0
    00000219: 	andl	$-0x4, %edx
    0000021c: 	paddd	%xmm0, %xmm1
    00000220: 	movdqa	%xmm1, %xmm0
    00000224: 	psrldq	$0x4, %xmm0
    00000229: 	paddd	%xmm0, %xmm1
    0000022d: 	movd	%xmm1, %eax
    00000231: 	testb	$0x3, %sil
    00000235: 	je	.Ltmp963 # Offset: 565
.Ltmp965:
    0000023b: 	movslq	%edx, %r8
    0000023e: 	leaq	(,%r8,4), %rdi
    00000246: 	movslq	(%rcx,%r8,4), %r8
    0000024a: 	leal	(%r8,%rax), %r9d
    0000024e: 	movq	%r8, %r10
    00000251: 	imulq	$-0x77777777, %r8, %rax
    00000258: 	sarl	$0x1f, %r10d
    0000025c: 	shrq	$0x20, %rax
    00000260: 	addl	%r8d, %eax
    00000263: 	imulq	$0x66666667, %r8, %r8
    0000026a: 	sarl	$0x6, %eax
    0000026d: 	subl	%r10d, %eax
    00000270: 	sarq	$0x21, %r8
    00000274: 	subl	%r10d, %r8d
    00000277: 	addl	%r8d, %eax
    0000027a: 	leal	0x1(%rdx), %r8d
    0000027e: 	addl	%r9d, %eax
    00000281: 	cmpl	%r8d, %esi
    00000284: 	jle	.Ltmp960 # Offset: 644
    0000028a: 	movslq	0x4(%rcx,%rdi), %r8
    0000028f: 	addl	$0x2, %edx
    00000292: 	leal	(%r8,%rax), %r9d
    00000296: 	movq	%r8, %r10
    00000299: 	imulq	$-0x77777777, %r8, %rax
    000002a0: 	sarl	$0x1f, %r10d
    000002a4: 	shrq	$0x20, %rax
    000002a8: 	addl	%r8d, %eax
    000002ab: 	imulq	$0x66666667, %r8, %r8
    000002b2: 	sarl	$0x6, %eax
    000002b5: 	subl	%r10d, %eax
    000002b8: 	sarq	$0x21, %r8
    000002bc: 	subl	%r10d, %r8d
    000002bf: 	addl	%r8d, %eax
    000002c2: 	addl	%r9d, %eax
    000002c5: 	cmpl	%edx, %esi
    000002c7: 	jle	.Ltmp960 # Offset: 711
    000002cd: 	movslq	0x8(%rcx,%rdi), %rsi
    000002d2: 	imulq	$0x66666667, %rsi, %rcx
    000002d9: 	addl	%esi, %eax
    000002db: 	movq	%rsi, %rdx
    000002de: 	movl	%esi, %edi
    000002e0: 	imulq	$-0x77777777, %rsi, %rsi
    000002e7: 	sarl	$0x1f, %edi
    000002ea: 	sarq	$0x21, %rcx
    000002ee: 	shrq	$0x20, %rsi
    000002f2: 	subl	%edi, %ecx
    000002f4: 	addl	%esi, %edx
    000002f6: 	sarl	$0x6, %edx
    000002f9: 	subl	%edi, %edx
    000002fb: 	addl	%ecx, %edx
    000002fd: 	addl	%edx, %eax
    000002ff: 	retq # Offset: 767
.Ltmp957:
    00000300: 	xorl	%edx, %edx
    00000302: 	xorl	%eax, %eax
    00000304: 	jmp	.Ltmp964 # Offset: 772
    00000309: 	nopl	(%rax) # Size: 7
.Ltmp959:
    00000310: 	retq # Offset: 784
.Ltmp963:
    00000311: 	retq # Offset: 785
.Ltmp961:
    00000312: 	xorl	%edx, %edx
    00000314: 	xorl	%eax, %eax
    00000316: 	jmp	.Ltmp965 # Offset: 790
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_for_loop_globalIiET_PKS0_iS0_"

Binary Function "_Z21test_for_loop_global2IiET_PKS0_iS0_" after disassembly {
  Number      : 140
  State       : disassembled
  Address     : 0xe070
  Size        : 0x23c
  MaxSize     : 0x240
  Offset      : 0xe070
  Section     : .text
  Orc Section : .local.text._Z21test_for_loop_global2IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0139:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp966 # Offset: 8
    0000000e: 	cvttsd2si	init_value(%rip), %eax
    00000016: 	testl	%eax, %eax
    00000018: 	leal	-0x1(%rsi), %eax
    0000001b: 	js	.Ltmp967 # Offset: 27
    00000021: 	cmpl	$0x2, %eax
    00000024: 	jbe	.Ltmp968 # Offset: 36
    0000002a: 	movl	%esi, %ecx
    0000002c: 	movq	%rdi, %rax
    0000002f: 	pxor	%xmm0, %xmm0
    00000033: 	shrl	$0x2, %ecx
    00000036: 	subl	$0x1, %ecx
    00000039: 	shlq	$0x4, %rcx
    0000003d: 	leaq	0x10(%rdi,%rcx), %rcx
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp969:
    00000048: 	movdqu	(%rax), %xmm6
    0000004c: 	addq	$0x10, %rax
    00000050: 	paddd	%xmm6, %xmm0
    00000054: 	cmpq	%rax, %rcx
    00000057: 	jne	.Ltmp969 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	movl	%edx, %ecx
    0000005f: 	psrldq	$0x8, %xmm1
    00000064: 	andl	$-0x4, %ecx
    00000067: 	paddd	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	psrldq	$0x4, %xmm1
    00000074: 	paddd	%xmm1, %xmm0
    00000078: 	movd	%xmm0, %eax
    0000007c: 	testb	$0x3, %dl
    0000007f: 	je	.Ltmp970 # Offset: 127
.Ltmp975:
    00000085: 	movslq	%ecx, %rsi
    00000088: 	leaq	(,%rsi,4), %r8
    00000090: 	addl	(%rdi,%rsi,4), %eax
    00000093: 	leal	0x1(%rcx), %esi
    00000096: 	cmpl	%esi, %edx
    00000098: 	jle	.Ltmp971 # Offset: 152
    0000009a: 	addl	$0x2, %ecx
    0000009d: 	addl	0x4(%rdi,%r8), %eax
    000000a2: 	cmpl	%ecx, %edx
    000000a4: 	jle	.Ltmp971 # Offset: 164
    000000a6: 	addl	0x8(%rdi,%r8), %eax
    000000ab: 	retq # Offset: 171
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp966:
    000000b0: 	xorl	%eax, %eax
.Ltmp971:
    000000b2: 	retq # Offset: 178
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp967:
    000000b8: 	cmpl	$0x2, %eax
    000000bb: 	jbe	.Ltmp972 # Offset: 187
    000000c1: 	pxor	%xmm1, %xmm1
    000000c5: 	movdqa	DATAat0x388e0(%rip), %xmm5
    000000cd: 	movl	%esi, %ecx
    000000cf: 	movq	%rdi, %rax
    000000d2: 	shrl	$0x2, %ecx
    000000d5: 	movdqa	%xmm1, %xmm6
    000000d9: 	movdqa	%xmm1, %xmm7
    000000dd: 	subl	$0x1, %ecx
    000000e0: 	pcmpgtd	%xmm5, %xmm6
    000000e4: 	shlq	$0x4, %rcx
    000000e8: 	leaq	0x10(%rdi,%rcx), %rcx
    000000ed: 	nopl	(%rax) # Size: 3
.Ltmp973:
    000000f0: 	movdqu	(%rax), %xmm2
    000000f4: 	movdqa	%xmm7, %xmm3
    000000f8: 	movdqa	%xmm6, %xmm4
    000000fc: 	addq	$0x10, %rax
    00000100: 	movdqa	%xmm6, %xmm8
    00000105: 	movdqa	%xmm2, %xmm0
    00000109: 	punpckldq	%xmm2, %xmm0
    0000010d: 	pcmpgtd	%xmm0, %xmm3
    00000111: 	pmuludq	%xmm0, %xmm4
    00000115: 	pmuludq	%xmm5, %xmm0
    00000119: 	pmuludq	%xmm5, %xmm3
    0000011d: 	paddq	%xmm4, %xmm3
    00000121: 	movdqa	%xmm7, %xmm4
    00000125: 	psllq	$0x20, %xmm3
    0000012a: 	paddq	%xmm3, %xmm0
    0000012e: 	movdqa	%xmm2, %xmm3
    00000132: 	punpckhdq	%xmm2, %xmm3
    00000136: 	pcmpgtd	%xmm3, %xmm4
    0000013a: 	pmuludq	%xmm3, %xmm8
    0000013f: 	pmuludq	%xmm5, %xmm3
    00000143: 	pmuludq	%xmm5, %xmm4
    00000147: 	paddq	%xmm8, %xmm4
    0000014c: 	psllq	$0x20, %xmm4
    00000151: 	paddq	%xmm4, %xmm3
    00000155: 	shufps	$0xdd, %xmm3, %xmm0
    00000159: 	movdqa	%xmm2, %xmm3
    0000015d: 	psrad	$0x1, %xmm0
    00000162: 	paddd	%xmm1, %xmm2
    00000166: 	psrad	$0x1f, %xmm3
    0000016b: 	psubd	%xmm3, %xmm0
    0000016f: 	movdqa	%xmm0, %xmm1
    00000173: 	paddd	%xmm2, %xmm1
    00000177: 	cmpq	%rcx, %rax
    0000017a: 	jne	.Ltmp973 # Offset: 378
    00000180: 	movdqa	%xmm1, %xmm0
    00000184: 	movl	%edx, %r8d
    00000187: 	psrldq	$0x8, %xmm0
    0000018c: 	andl	$-0x4, %r8d
    00000190: 	paddd	%xmm0, %xmm1
    00000194: 	movdqa	%xmm1, %xmm0
    00000198: 	psrldq	$0x4, %xmm0
    0000019d: 	paddd	%xmm0, %xmm1
    000001a1: 	movd	%xmm1, %eax
    000001a5: 	testb	$0x3, %dl
    000001a8: 	je	.Ltmp974 # Offset: 424
.Ltmp976:
    000001ae: 	movslq	%r8d, %rcx
    000001b1: 	leaq	(,%rcx,4), %r9
    000001b9: 	movslq	(%rdi,%rcx,4), %rcx
    000001bd: 	movq	%rcx, %rsi
    000001c0: 	addl	%ecx, %eax
    000001c2: 	imulq	$0x66666667, %rcx, %rcx
    000001c9: 	sarl	$0x1f, %esi
    000001cc: 	sarq	$0x21, %rcx
    000001d0: 	subl	%esi, %ecx
    000001d2: 	addl	%ecx, %eax
    000001d4: 	leal	0x1(%r8), %ecx
    000001d8: 	cmpl	%ecx, %edx
    000001da: 	jle	.Ltmp971 # Offset: 474
    000001e0: 	movslq	0x4(%rdi,%r9), %rcx
    000001e5: 	addl	$0x2, %r8d
    000001e9: 	movq	%rcx, %rsi
    000001ec: 	addl	%ecx, %eax
    000001ee: 	imulq	$0x66666667, %rcx, %rcx
    000001f5: 	sarl	$0x1f, %esi
    000001f8: 	sarq	$0x21, %rcx
    000001fc: 	subl	%esi, %ecx
    000001fe: 	addl	%ecx, %eax
    00000200: 	cmpl	%r8d, %edx
    00000203: 	jle	.Ltmp971 # Offset: 515
    00000209: 	movslq	0x8(%rdi,%r9), %rdx
    0000020e: 	addl	%edx, %eax
    00000210: 	movq	%rdx, %rcx
    00000213: 	imulq	$0x66666667, %rdx, %rdx
    0000021a: 	sarl	$0x1f, %ecx
    0000021d: 	sarq	$0x21, %rdx
    00000221: 	subl	%ecx, %edx
    00000223: 	addl	%edx, %eax
    00000225: 	retq # Offset: 549
.Ltmp968:
    00000226: 	xorl	%ecx, %ecx
    00000228: 	xorl	%eax, %eax
    0000022a: 	jmp	.Ltmp975 # Offset: 554
    0000022f: 	nop # Size: 1
.Ltmp970:
    00000230: 	retq # Offset: 560
.Ltmp974:
    00000231: 	retq # Offset: 561
.Ltmp972:
    00000232: 	xorl	%r8d, %r8d
    00000235: 	xorl	%eax, %eax
    00000237: 	jmp	.Ltmp976 # Offset: 567
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_for_loop_global2IiET_PKS0_iS0_"

Binary Function "_Z21test_for_loop_global3IiET_PKS0_iS0_" after disassembly {
  Number      : 141
  State       : disassembled
  Address     : 0xe2b0
  Size        : 0x24e
  MaxSize     : 0x250
  Offset      : 0xe2b0
  Section     : .text
  Orc Section : .local.text._Z21test_for_loop_global3IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0140:
    00000000: 	endbr64
    00000004: 	cvttsd2si	init_value(%rip), %eax
    0000000c: 	movl	%esi, %ecx
    0000000e: 	testl	%eax, %eax
    00000010: 	js	.Ltmp977 # Offset: 16
    00000016: 	xorl	%r8d, %r8d
    00000019: 	testl	%esi, %esi
    0000001b: 	jle	.Ltmp978 # Offset: 27
.Ltmp985:
    00000021: 	testl	%ecx, %ecx
    00000023: 	movl	$0x1, %esi
    00000028: 	cmovgl	%ecx, %esi
    0000002b: 	cmpl	$0x3, %ecx
    0000002e: 	jle	.Ltmp979 # Offset: 46
    00000034: 	leaq	0x10(%rdi), %r9
.Ltmp987:
    00000038: 	movl	%esi, %edx
    0000003a: 	movq	%rdi, %rax
    0000003d: 	pxor	%xmm0, %xmm0
    00000041: 	shrl	$0x2, %edx
    00000044: 	subl	$0x1, %edx
    00000047: 	shlq	$0x4, %rdx
    0000004b: 	addq	%r9, %rdx
    0000004e: 	nop # Size: 2
.Ltmp980:
    00000050: 	movdqu	(%rax), %xmm6
    00000054: 	addq	$0x10, %rax
    00000058: 	paddd	%xmm6, %xmm0
    0000005c: 	cmpq	%rax, %rdx
    0000005f: 	jne	.Ltmp980 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	psrldq	$0x8, %xmm1
    0000006a: 	paddd	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x4, %xmm1
    00000077: 	paddd	%xmm1, %xmm0
    0000007b: 	movd	%xmm0, %eax
    0000007f: 	addl	%eax, %r8d
    00000082: 	movl	%esi, %eax
    00000084: 	andl	$-0x4, %eax
    00000087: 	andl	$0x3, %esi
    0000008a: 	je	.Ltmp978 # Offset: 138
.Ltmp986:
    0000008c: 	movslq	%eax, %rdx
    0000008f: 	leaq	(,%rdx,4), %rsi
    00000097: 	addl	(%rdi,%rdx,4), %r8d
    0000009b: 	leal	0x1(%rax), %edx
    0000009e: 	cmpl	%edx, %ecx
    000000a0: 	jle	.Ltmp978 # Offset: 160
    000000a2: 	addl	$0x2, %eax
    000000a5: 	addl	0x4(%rdi,%rsi), %r8d
    000000aa: 	cmpl	%eax, %ecx
    000000ac: 	jle	.Ltmp978 # Offset: 172
    000000ae: 	addl	0x8(%rdi,%rsi), %r8d
.Ltmp978:
    000000b3: 	movl	%r8d, %eax
    000000b6: 	retq # Offset: 182
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp977:
    000000c0: 	testl	%esi, %esi
    000000c2: 	jle	.Ltmp981 # Offset: 194
    000000c8: 	leal	-0x1(%rsi), %eax
    000000cb: 	cmpl	$0x2, %eax
    000000ce: 	jbe	.Ltmp982 # Offset: 206
    000000d4: 	pxor	%xmm4, %xmm4
    000000d8: 	movl	%esi, %edx
    000000da: 	leaq	0x10(%rdi), %r9
    000000de: 	movq	%rdi, %rax
    000000e1: 	movdqa	DATAat0x388e0(%rip), %xmm5
    000000e9: 	shrl	$0x2, %edx
    000000ec: 	movdqa	%xmm4, %xmm6
    000000f0: 	movdqa	%xmm4, %xmm7
    000000f4: 	subl	$0x1, %edx
    000000f7: 	pcmpgtd	%xmm5, %xmm6
    000000fb: 	shlq	$0x4, %rdx
    000000ff: 	addq	%r9, %rdx
    00000102: 	nopw	(%rax,%rax) # Size: 6
.Ltmp983:
    00000108: 	movdqu	(%rax), %xmm1
    0000010c: 	movdqa	%xmm7, %xmm2
    00000110: 	movdqa	%xmm6, %xmm3
    00000114: 	addq	$0x10, %rax
    00000118: 	movdqa	%xmm6, %xmm8
    0000011d: 	movdqa	%xmm1, %xmm0
    00000121: 	punpckldq	%xmm1, %xmm0
    00000125: 	pcmpgtd	%xmm0, %xmm2
    00000129: 	pmuludq	%xmm0, %xmm3
    0000012d: 	pmuludq	%xmm5, %xmm0
    00000131: 	pmuludq	%xmm5, %xmm2
    00000135: 	paddq	%xmm3, %xmm2
    00000139: 	movdqa	%xmm7, %xmm3
    0000013d: 	psllq	$0x20, %xmm2
    00000142: 	paddq	%xmm2, %xmm0
    00000146: 	movdqa	%xmm1, %xmm2
    0000014a: 	punpckhdq	%xmm1, %xmm2
    0000014e: 	psrad	$0x1f, %xmm1
    00000153: 	pcmpgtd	%xmm2, %xmm3
    00000157: 	pmuludq	%xmm2, %xmm8
    0000015c: 	pmuludq	%xmm5, %xmm2
    00000160: 	pmuludq	%xmm5, %xmm3
    00000164: 	paddq	%xmm8, %xmm3
    00000169: 	psllq	$0x20, %xmm3
    0000016e: 	paddq	%xmm3, %xmm2
    00000172: 	shufps	$0xdd, %xmm2, %xmm0
    00000176: 	psrad	$0x1, %xmm0
    0000017b: 	psubd	%xmm1, %xmm0
    0000017f: 	paddd	%xmm0, %xmm4
    00000183: 	cmpq	%rdx, %rax
    00000186: 	jne	.Ltmp983 # Offset: 390
    00000188: 	movdqa	%xmm4, %xmm0
    0000018c: 	movl	%ecx, %eax
    0000018e: 	psrldq	$0x8, %xmm0
    00000193: 	andl	$-0x4, %eax
    00000196: 	paddd	%xmm0, %xmm4
    0000019a: 	movdqa	%xmm4, %xmm0
    0000019e: 	psrldq	$0x4, %xmm0
    000001a3: 	paddd	%xmm0, %xmm4
    000001a7: 	movd	%xmm4, %r8d
    000001ac: 	cmpl	%eax, %ecx
    000001ae: 	je	.Ltmp984 # Offset: 430
.Ltmp988:
    000001b0: 	movslq	%eax, %rdx
    000001b3: 	leaq	(,%rdx,4), %r9
    000001bb: 	movslq	(%rdi,%rdx,4), %rdx
    000001bf: 	movq	%rdx, %rsi
    000001c2: 	imulq	$0x66666667, %rdx, %rdx
    000001c9: 	sarl	$0x1f, %esi
    000001cc: 	sarq	$0x21, %rdx
    000001d0: 	subl	%esi, %edx
    000001d2: 	addl	%edx, %r8d
    000001d5: 	leal	0x1(%rax), %edx
    000001d8: 	cmpl	%edx, %ecx
    000001da: 	jle	.Ltmp985 # Offset: 474
    000001e0: 	movslq	0x4(%rdi,%r9), %rdx
    000001e5: 	addl	$0x2, %eax
    000001e8: 	movq	%rdx, %rsi
    000001eb: 	imulq	$0x66666667, %rdx, %rdx
    000001f2: 	sarl	$0x1f, %esi
    000001f5: 	sarq	$0x21, %rdx
    000001f9: 	subl	%esi, %edx
    000001fb: 	addl	%edx, %r8d
    000001fe: 	cmpl	%eax, %ecx
    00000200: 	jle	.Ltmp985 # Offset: 512
    00000206: 	movslq	0x8(%rdi,%r9), %rax
    0000020b: 	movq	%rax, %rdx
    0000020e: 	imulq	$0x66666667, %rax, %rax
    00000215: 	sarl	$0x1f, %edx
    00000218: 	sarq	$0x21, %rax
    0000021c: 	subl	%edx, %eax
    0000021e: 	addl	%eax, %r8d
    00000221: 	jmp	.Ltmp985 # Offset: 545
.Ltmp979:
    00000226: 	xorl	%eax, %eax
    00000228: 	jmp	.Ltmp986 # Offset: 552
.Ltmp984:
    0000022d: 	testl	%ecx, %ecx
    0000022f: 	movl	$0x1, %esi
    00000234: 	cmovgl	%ecx, %esi
    00000237: 	jmp	.Ltmp987 # Offset: 567
.Ltmp981:
    0000023c: 	xorl	%r8d, %r8d
    0000023f: 	jmp	.Ltmp978 # Offset: 575
.Ltmp982:
    00000244: 	xorl	%eax, %eax
    00000246: 	xorl	%r8d, %r8d
    00000249: 	jmp	.Ltmp988 # Offset: 585
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_for_loop_global3IiET_PKS0_iS0_"

Binary Function "_Z22test_while_loop_globalIiET_PKS0_iS0_" after disassembly {
  Number      : 142
  State       : disassembled
  Address     : 0xe500
  Size        : 0x31b
  MaxSize     : 0x320
  Offset      : 0xe500
  Section     : .text
  Orc Section : .local.text._Z22test_while_loop_globalIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0141:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%esi, %esi
    00000009: 	jle	.Ltmp989 # Offset: 9
    0000000f: 	cvttsd2si	init_value(%rip), %eax
    00000017: 	testl	%eax, %eax
    00000019: 	leal	-0x1(%rsi), %eax
    0000001c: 	js	.Ltmp990 # Offset: 28
    00000022: 	cmpl	$0x2, %eax
    00000025: 	jbe	.Ltmp991 # Offset: 37
    0000002b: 	movl	%esi, %edx
    0000002d: 	movq	%rdi, %rax
    00000030: 	pxor	%xmm0, %xmm0
    00000034: 	shrl	$0x2, %edx
    00000037: 	subl	$0x1, %edx
    0000003a: 	shlq	$0x4, %rdx
    0000003e: 	leaq	0x10(%rdi,%rdx), %rdx
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp992:
    00000048: 	movdqu	(%rax), %xmm7
    0000004c: 	addq	$0x10, %rax
    00000050: 	paddd	%xmm7, %xmm0
    00000054: 	cmpq	%rax, %rdx
    00000057: 	jne	.Ltmp992 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	movl	%esi, %edx
    0000005f: 	psrldq	$0x8, %xmm1
    00000064: 	andl	$-0x4, %edx
    00000067: 	paddd	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	psrldq	$0x4, %xmm1
    00000074: 	paddd	%xmm1, %xmm0
    00000078: 	movd	%xmm0, %eax
    0000007c: 	testb	$0x3, %sil
    00000080: 	je	.Ltmp993 # Offset: 128
.Ltmp998:
    00000086: 	movslq	%edx, %rdi
    00000089: 	leaq	(,%rdi,4), %r8
    00000091: 	addl	(%rcx,%rdi,4), %eax
    00000094: 	leal	0x1(%rdx), %edi
    00000097: 	cmpl	%edi, %esi
    00000099: 	jle	.Ltmp994 # Offset: 153
    0000009b: 	addl	$0x2, %edx
    0000009e: 	addl	0x4(%rcx,%r8), %eax
    000000a3: 	cmpl	%edx, %esi
    000000a5: 	jle	.Ltmp994 # Offset: 165
    000000a7: 	addl	0x8(%rcx,%r8), %eax
    000000ac: 	retq # Offset: 172
    000000ad: 	nopl	(%rax) # Size: 3
.Ltmp989:
    000000b0: 	xorl	%eax, %eax
.Ltmp994:
    000000b2: 	retq # Offset: 178
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp990:
    000000b8: 	cmpl	$0x2, %eax
    000000bb: 	jbe	.Ltmp995 # Offset: 187
    000000c1: 	pxor	%xmm1, %xmm1
    000000c5: 	movdqa	DATAat0x388d0(%rip), %xmm6
    000000cd: 	movl	%esi, %edx
    000000cf: 	movq	%rdi, %rax
    000000d2: 	movdqa	DATAat0x388e0(%rip), %xmm5
    000000da: 	shrl	$0x2, %edx
    000000dd: 	movdqa	%xmm1, %xmm8
    000000e2: 	movdqa	%xmm1, %xmm7
    000000e6: 	subl	$0x1, %edx
    000000e9: 	pcmpgtd	%xmm6, %xmm8
    000000ee: 	movdqa	%xmm1, %xmm9
    000000f3: 	pcmpgtd	%xmm5, %xmm7
    000000f7: 	shlq	$0x4, %rdx
    000000fb: 	leaq	0x10(%rdi,%rdx), %rdx
.Ltmp996:
    00000100: 	movdqu	(%rax), %xmm3
    00000104: 	movdqa	%xmm9, %xmm12
    00000109: 	movdqa	%xmm8, %xmm11
    0000010e: 	movdqa	%xmm8, %xmm15
    00000113: 	addq	$0x10, %rax
    00000117: 	movdqa	%xmm3, %xmm0
    0000011b: 	movdqa	%xmm3, %xmm10
    00000120: 	punpckldq	%xmm3, %xmm0
    00000124: 	psrad	$0x1f, %xmm10
    0000012a: 	pcmpgtd	%xmm0, %xmm12
    0000012f: 	pmuludq	%xmm0, %xmm11
    00000134: 	movdqa	%xmm0, %xmm2
    00000138: 	pmuludq	%xmm6, %xmm2
    0000013c: 	movdqa	%xmm12, %xmm4
    00000141: 	pmuludq	%xmm5, %xmm12
    00000146: 	pmuludq	%xmm6, %xmm4
    0000014a: 	paddq	%xmm11, %xmm4
    0000014f: 	movdqa	%xmm9, %xmm11
    00000154: 	psllq	$0x20, %xmm4
    00000159: 	paddq	%xmm4, %xmm2
    0000015d: 	movdqa	%xmm3, %xmm4
    00000161: 	punpckhdq	%xmm3, %xmm4
    00000165: 	pcmpgtd	%xmm4, %xmm11
    0000016a: 	pmuludq	%xmm4, %xmm15
    0000016f: 	movdqa	%xmm4, %xmm14
    00000174: 	pmuludq	%xmm6, %xmm14
    00000179: 	movdqa	%xmm11, %xmm13
    0000017e: 	pmuludq	%xmm5, %xmm11
    00000183: 	pmuludq	%xmm6, %xmm13
    00000188: 	paddq	%xmm15, %xmm13
    0000018d: 	psllq	$0x20, %xmm13
    00000193: 	paddq	%xmm14, %xmm13
    00000198: 	shufps	$0xdd, %xmm13, %xmm2
    0000019d: 	movdqa	%xmm7, %xmm13
    000001a2: 	paddd	%xmm3, %xmm2
    000001a6: 	paddd	%xmm1, %xmm3
    000001aa: 	pmuludq	%xmm0, %xmm13
    000001af: 	pmuludq	%xmm5, %xmm0
    000001b3: 	psrad	$0x6, %xmm2
    000001b8: 	psubd	%xmm10, %xmm2
    000001bd: 	paddq	%xmm13, %xmm12
    000001c2: 	psllq	$0x20, %xmm12
    000001c8: 	paddq	%xmm12, %xmm0
    000001cd: 	movdqa	%xmm7, %xmm12
    000001d2: 	pmuludq	%xmm4, %xmm12
    000001d7: 	pmuludq	%xmm5, %xmm4
    000001db: 	paddq	%xmm12, %xmm11
    000001e0: 	psllq	$0x20, %xmm11
    000001e6: 	paddq	%xmm11, %xmm4
    000001eb: 	shufps	$0xdd, %xmm4, %xmm0
    000001ef: 	psrad	$0x1, %xmm0
    000001f4: 	psubd	%xmm10, %xmm0
    000001f9: 	paddd	%xmm0, %xmm2
    000001fd: 	movdqa	%xmm2, %xmm1
    00000201: 	paddd	%xmm3, %xmm1
    00000205: 	cmpq	%rdx, %rax
    00000208: 	jne	.Ltmp996 # Offset: 520
    0000020e: 	movdqa	%xmm1, %xmm0
    00000212: 	movl	%esi, %edx
    00000214: 	psrldq	$0x8, %xmm0
    00000219: 	andl	$-0x4, %edx
    0000021c: 	paddd	%xmm0, %xmm1
    00000220: 	movdqa	%xmm1, %xmm0
    00000224: 	psrldq	$0x4, %xmm0
    00000229: 	paddd	%xmm0, %xmm1
    0000022d: 	movd	%xmm1, %eax
    00000231: 	testb	$0x3, %sil
    00000235: 	je	.Ltmp997 # Offset: 565
.Ltmp999:
    0000023b: 	movslq	%edx, %r8
    0000023e: 	leaq	(,%r8,4), %rdi
    00000246: 	movslq	(%rcx,%r8,4), %r8
    0000024a: 	leal	(%r8,%rax), %r9d
    0000024e: 	movq	%r8, %r10
    00000251: 	imulq	$-0x77777777, %r8, %rax
    00000258: 	sarl	$0x1f, %r10d
    0000025c: 	shrq	$0x20, %rax
    00000260: 	addl	%r8d, %eax
    00000263: 	imulq	$0x66666667, %r8, %r8
    0000026a: 	sarl	$0x6, %eax
    0000026d: 	subl	%r10d, %eax
    00000270: 	sarq	$0x21, %r8
    00000274: 	subl	%r10d, %r8d
    00000277: 	addl	%r8d, %eax
    0000027a: 	leal	0x1(%rdx), %r8d
    0000027e: 	addl	%r9d, %eax
    00000281: 	cmpl	%r8d, %esi
    00000284: 	jle	.Ltmp994 # Offset: 644
    0000028a: 	movslq	0x4(%rcx,%rdi), %r8
    0000028f: 	addl	$0x2, %edx
    00000292: 	leal	(%r8,%rax), %r9d
    00000296: 	movq	%r8, %r10
    00000299: 	imulq	$-0x77777777, %r8, %rax
    000002a0: 	sarl	$0x1f, %r10d
    000002a4: 	shrq	$0x20, %rax
    000002a8: 	addl	%r8d, %eax
    000002ab: 	imulq	$0x66666667, %r8, %r8
    000002b2: 	sarl	$0x6, %eax
    000002b5: 	subl	%r10d, %eax
    000002b8: 	sarq	$0x21, %r8
    000002bc: 	subl	%r10d, %r8d
    000002bf: 	addl	%r8d, %eax
    000002c2: 	addl	%r9d, %eax
    000002c5: 	cmpl	%edx, %esi
    000002c7: 	jle	.Ltmp994 # Offset: 711
    000002cd: 	movslq	0x8(%rcx,%rdi), %rsi
    000002d2: 	imulq	$0x66666667, %rsi, %rcx
    000002d9: 	addl	%esi, %eax
    000002db: 	movq	%rsi, %rdx
    000002de: 	movl	%esi, %edi
    000002e0: 	imulq	$-0x77777777, %rsi, %rsi
    000002e7: 	sarl	$0x1f, %edi
    000002ea: 	sarq	$0x21, %rcx
    000002ee: 	shrq	$0x20, %rsi
    000002f2: 	subl	%edi, %ecx
    000002f4: 	addl	%esi, %edx
    000002f6: 	sarl	$0x6, %edx
    000002f9: 	subl	%edi, %edx
    000002fb: 	addl	%ecx, %edx
    000002fd: 	addl	%edx, %eax
    000002ff: 	retq # Offset: 767
.Ltmp991:
    00000300: 	xorl	%edx, %edx
    00000302: 	xorl	%eax, %eax
    00000304: 	jmp	.Ltmp998 # Offset: 772
    00000309: 	nopl	(%rax) # Size: 7
.Ltmp993:
    00000310: 	retq # Offset: 784
.Ltmp997:
    00000311: 	retq # Offset: 785
.Ltmp995:
    00000312: 	xorl	%edx, %edx
    00000314: 	xorl	%eax, %eax
    00000316: 	jmp	.Ltmp999 # Offset: 790
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_while_loop_globalIiET_PKS0_iS0_"

Binary Function "_Z23test_while_loop_global2IiET_PKS0_iS0_" after disassembly {
  Number      : 143
  State       : disassembled
  Address     : 0xe820
  Size        : 0x23c
  MaxSize     : 0x240
  Offset      : 0xe820
  Section     : .text
  Orc Section : .local.text._Z23test_while_loop_global2IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0142:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp1000 # Offset: 8
    0000000e: 	cvttsd2si	init_value(%rip), %eax
    00000016: 	testl	%eax, %eax
    00000018: 	leal	-0x1(%rsi), %eax
    0000001b: 	js	.Ltmp1001 # Offset: 27
    00000021: 	cmpl	$0x2, %eax
    00000024: 	jbe	.Ltmp1002 # Offset: 36
    0000002a: 	movl	%esi, %ecx
    0000002c: 	movq	%rdi, %rax
    0000002f: 	pxor	%xmm0, %xmm0
    00000033: 	shrl	$0x2, %ecx
    00000036: 	subl	$0x1, %ecx
    00000039: 	shlq	$0x4, %rcx
    0000003d: 	leaq	0x10(%rdi,%rcx), %rcx
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1003:
    00000048: 	movdqu	(%rax), %xmm6
    0000004c: 	addq	$0x10, %rax
    00000050: 	paddd	%xmm6, %xmm0
    00000054: 	cmpq	%rax, %rcx
    00000057: 	jne	.Ltmp1003 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	movl	%edx, %ecx
    0000005f: 	psrldq	$0x8, %xmm1
    00000064: 	andl	$-0x4, %ecx
    00000067: 	paddd	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	psrldq	$0x4, %xmm1
    00000074: 	paddd	%xmm1, %xmm0
    00000078: 	movd	%xmm0, %eax
    0000007c: 	testb	$0x3, %dl
    0000007f: 	je	.Ltmp1004 # Offset: 127
.Ltmp1009:
    00000085: 	movslq	%ecx, %rsi
    00000088: 	leaq	(,%rsi,4), %r8
    00000090: 	addl	(%rdi,%rsi,4), %eax
    00000093: 	leal	0x1(%rcx), %esi
    00000096: 	cmpl	%esi, %edx
    00000098: 	jle	.Ltmp1005 # Offset: 152
    0000009a: 	addl	$0x2, %ecx
    0000009d: 	addl	0x4(%rdi,%r8), %eax
    000000a2: 	cmpl	%ecx, %edx
    000000a4: 	jle	.Ltmp1005 # Offset: 164
    000000a6: 	addl	0x8(%rdi,%r8), %eax
    000000ab: 	retq # Offset: 171
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp1000:
    000000b0: 	xorl	%eax, %eax
.Ltmp1005:
    000000b2: 	retq # Offset: 178
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1001:
    000000b8: 	cmpl	$0x2, %eax
    000000bb: 	jbe	.Ltmp1006 # Offset: 187
    000000c1: 	pxor	%xmm1, %xmm1
    000000c5: 	movdqa	DATAat0x388e0(%rip), %xmm5
    000000cd: 	movl	%esi, %ecx
    000000cf: 	movq	%rdi, %rax
    000000d2: 	shrl	$0x2, %ecx
    000000d5: 	movdqa	%xmm1, %xmm6
    000000d9: 	movdqa	%xmm1, %xmm7
    000000dd: 	subl	$0x1, %ecx
    000000e0: 	pcmpgtd	%xmm5, %xmm6
    000000e4: 	shlq	$0x4, %rcx
    000000e8: 	leaq	0x10(%rdi,%rcx), %rcx
    000000ed: 	nopl	(%rax) # Size: 3
.Ltmp1007:
    000000f0: 	movdqu	(%rax), %xmm2
    000000f4: 	movdqa	%xmm7, %xmm3
    000000f8: 	movdqa	%xmm6, %xmm4
    000000fc: 	addq	$0x10, %rax
    00000100: 	movdqa	%xmm6, %xmm8
    00000105: 	movdqa	%xmm2, %xmm0
    00000109: 	punpckldq	%xmm2, %xmm0
    0000010d: 	pcmpgtd	%xmm0, %xmm3
    00000111: 	pmuludq	%xmm0, %xmm4
    00000115: 	pmuludq	%xmm5, %xmm0
    00000119: 	pmuludq	%xmm5, %xmm3
    0000011d: 	paddq	%xmm4, %xmm3
    00000121: 	movdqa	%xmm7, %xmm4
    00000125: 	psllq	$0x20, %xmm3
    0000012a: 	paddq	%xmm3, %xmm0
    0000012e: 	movdqa	%xmm2, %xmm3
    00000132: 	punpckhdq	%xmm2, %xmm3
    00000136: 	pcmpgtd	%xmm3, %xmm4
    0000013a: 	pmuludq	%xmm3, %xmm8
    0000013f: 	pmuludq	%xmm5, %xmm3
    00000143: 	pmuludq	%xmm5, %xmm4
    00000147: 	paddq	%xmm8, %xmm4
    0000014c: 	psllq	$0x20, %xmm4
    00000151: 	paddq	%xmm4, %xmm3
    00000155: 	shufps	$0xdd, %xmm3, %xmm0
    00000159: 	movdqa	%xmm2, %xmm3
    0000015d: 	psrad	$0x1, %xmm0
    00000162: 	paddd	%xmm1, %xmm2
    00000166: 	psrad	$0x1f, %xmm3
    0000016b: 	psubd	%xmm3, %xmm0
    0000016f: 	movdqa	%xmm0, %xmm1
    00000173: 	paddd	%xmm2, %xmm1
    00000177: 	cmpq	%rcx, %rax
    0000017a: 	jne	.Ltmp1007 # Offset: 378
    00000180: 	movdqa	%xmm1, %xmm0
    00000184: 	movl	%edx, %r8d
    00000187: 	psrldq	$0x8, %xmm0
    0000018c: 	andl	$-0x4, %r8d
    00000190: 	paddd	%xmm0, %xmm1
    00000194: 	movdqa	%xmm1, %xmm0
    00000198: 	psrldq	$0x4, %xmm0
    0000019d: 	paddd	%xmm0, %xmm1
    000001a1: 	movd	%xmm1, %eax
    000001a5: 	testb	$0x3, %dl
    000001a8: 	je	.Ltmp1008 # Offset: 424
.Ltmp1010:
    000001ae: 	movslq	%r8d, %rcx
    000001b1: 	leaq	(,%rcx,4), %r9
    000001b9: 	movslq	(%rdi,%rcx,4), %rcx
    000001bd: 	movq	%rcx, %rsi
    000001c0: 	addl	%ecx, %eax
    000001c2: 	imulq	$0x66666667, %rcx, %rcx
    000001c9: 	sarl	$0x1f, %esi
    000001cc: 	sarq	$0x21, %rcx
    000001d0: 	subl	%esi, %ecx
    000001d2: 	addl	%ecx, %eax
    000001d4: 	leal	0x1(%r8), %ecx
    000001d8: 	cmpl	%ecx, %edx
    000001da: 	jle	.Ltmp1005 # Offset: 474
    000001e0: 	movslq	0x4(%rdi,%r9), %rcx
    000001e5: 	addl	$0x2, %r8d
    000001e9: 	movq	%rcx, %rsi
    000001ec: 	addl	%ecx, %eax
    000001ee: 	imulq	$0x66666667, %rcx, %rcx
    000001f5: 	sarl	$0x1f, %esi
    000001f8: 	sarq	$0x21, %rcx
    000001fc: 	subl	%esi, %ecx
    000001fe: 	addl	%ecx, %eax
    00000200: 	cmpl	%r8d, %edx
    00000203: 	jle	.Ltmp1005 # Offset: 515
    00000209: 	movslq	0x8(%rdi,%r9), %rdx
    0000020e: 	addl	%edx, %eax
    00000210: 	movq	%rdx, %rcx
    00000213: 	imulq	$0x66666667, %rdx, %rdx
    0000021a: 	sarl	$0x1f, %ecx
    0000021d: 	sarq	$0x21, %rdx
    00000221: 	subl	%ecx, %edx
    00000223: 	addl	%edx, %eax
    00000225: 	retq # Offset: 549
.Ltmp1002:
    00000226: 	xorl	%ecx, %ecx
    00000228: 	xorl	%eax, %eax
    0000022a: 	jmp	.Ltmp1009 # Offset: 554
    0000022f: 	nop # Size: 1
.Ltmp1004:
    00000230: 	retq # Offset: 560
.Ltmp1008:
    00000231: 	retq # Offset: 561
.Ltmp1006:
    00000232: 	xorl	%r8d, %r8d
    00000235: 	xorl	%eax, %eax
    00000237: 	jmp	.Ltmp1010 # Offset: 567
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_while_loop_global2IiET_PKS0_iS0_"

Binary Function "_Z23test_while_loop_global3IiET_PKS0_iS0_" after disassembly {
  Number      : 144
  State       : disassembled
  Address     : 0xea60
  Size        : 0x24e
  MaxSize     : 0x250
  Offset      : 0xea60
  Section     : .text
  Orc Section : .local.text._Z23test_while_loop_global3IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0143:
    00000000: 	endbr64
    00000004: 	cvttsd2si	init_value(%rip), %eax
    0000000c: 	movl	%esi, %ecx
    0000000e: 	testl	%eax, %eax
    00000010: 	js	.Ltmp1011 # Offset: 16
    00000016: 	xorl	%r8d, %r8d
    00000019: 	testl	%esi, %esi
    0000001b: 	jle	.Ltmp1012 # Offset: 27
.Ltmp1019:
    00000021: 	testl	%ecx, %ecx
    00000023: 	movl	$0x1, %esi
    00000028: 	cmovgl	%ecx, %esi
    0000002b: 	cmpl	$0x3, %ecx
    0000002e: 	jle	.Ltmp1013 # Offset: 46
    00000034: 	leaq	0x10(%rdi), %r9
.Ltmp1021:
    00000038: 	movl	%esi, %edx
    0000003a: 	movq	%rdi, %rax
    0000003d: 	pxor	%xmm0, %xmm0
    00000041: 	shrl	$0x2, %edx
    00000044: 	subl	$0x1, %edx
    00000047: 	shlq	$0x4, %rdx
    0000004b: 	addq	%r9, %rdx
    0000004e: 	nop # Size: 2
.Ltmp1014:
    00000050: 	movdqu	(%rax), %xmm6
    00000054: 	addq	$0x10, %rax
    00000058: 	paddd	%xmm6, %xmm0
    0000005c: 	cmpq	%rax, %rdx
    0000005f: 	jne	.Ltmp1014 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	psrldq	$0x8, %xmm1
    0000006a: 	paddd	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x4, %xmm1
    00000077: 	paddd	%xmm1, %xmm0
    0000007b: 	movd	%xmm0, %eax
    0000007f: 	addl	%eax, %r8d
    00000082: 	movl	%esi, %eax
    00000084: 	andl	$-0x4, %eax
    00000087: 	andl	$0x3, %esi
    0000008a: 	je	.Ltmp1012 # Offset: 138
.Ltmp1020:
    0000008c: 	movslq	%eax, %rdx
    0000008f: 	leaq	(,%rdx,4), %rsi
    00000097: 	addl	(%rdi,%rdx,4), %r8d
    0000009b: 	leal	0x1(%rax), %edx
    0000009e: 	cmpl	%edx, %ecx
    000000a0: 	jle	.Ltmp1012 # Offset: 160
    000000a2: 	addl	$0x2, %eax
    000000a5: 	addl	0x4(%rdi,%rsi), %r8d
    000000aa: 	cmpl	%eax, %ecx
    000000ac: 	jle	.Ltmp1012 # Offset: 172
    000000ae: 	addl	0x8(%rdi,%rsi), %r8d
.Ltmp1012:
    000000b3: 	movl	%r8d, %eax
    000000b6: 	retq # Offset: 182
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1011:
    000000c0: 	testl	%esi, %esi
    000000c2: 	jle	.Ltmp1015 # Offset: 194
    000000c8: 	leal	-0x1(%rsi), %eax
    000000cb: 	cmpl	$0x2, %eax
    000000ce: 	jbe	.Ltmp1016 # Offset: 206
    000000d4: 	pxor	%xmm4, %xmm4
    000000d8: 	movl	%esi, %edx
    000000da: 	leaq	0x10(%rdi), %r9
    000000de: 	movq	%rdi, %rax
    000000e1: 	movdqa	DATAat0x388e0(%rip), %xmm5
    000000e9: 	shrl	$0x2, %edx
    000000ec: 	movdqa	%xmm4, %xmm6
    000000f0: 	movdqa	%xmm4, %xmm7
    000000f4: 	subl	$0x1, %edx
    000000f7: 	pcmpgtd	%xmm5, %xmm6
    000000fb: 	shlq	$0x4, %rdx
    000000ff: 	addq	%r9, %rdx
    00000102: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1017:
    00000108: 	movdqu	(%rax), %xmm1
    0000010c: 	movdqa	%xmm7, %xmm2
    00000110: 	movdqa	%xmm6, %xmm3
    00000114: 	addq	$0x10, %rax
    00000118: 	movdqa	%xmm6, %xmm8
    0000011d: 	movdqa	%xmm1, %xmm0
    00000121: 	punpckldq	%xmm1, %xmm0
    00000125: 	pcmpgtd	%xmm0, %xmm2
    00000129: 	pmuludq	%xmm0, %xmm3
    0000012d: 	pmuludq	%xmm5, %xmm0
    00000131: 	pmuludq	%xmm5, %xmm2
    00000135: 	paddq	%xmm3, %xmm2
    00000139: 	movdqa	%xmm7, %xmm3
    0000013d: 	psllq	$0x20, %xmm2
    00000142: 	paddq	%xmm2, %xmm0
    00000146: 	movdqa	%xmm1, %xmm2
    0000014a: 	punpckhdq	%xmm1, %xmm2
    0000014e: 	psrad	$0x1f, %xmm1
    00000153: 	pcmpgtd	%xmm2, %xmm3
    00000157: 	pmuludq	%xmm2, %xmm8
    0000015c: 	pmuludq	%xmm5, %xmm2
    00000160: 	pmuludq	%xmm5, %xmm3
    00000164: 	paddq	%xmm8, %xmm3
    00000169: 	psllq	$0x20, %xmm3
    0000016e: 	paddq	%xmm3, %xmm2
    00000172: 	shufps	$0xdd, %xmm2, %xmm0
    00000176: 	psrad	$0x1, %xmm0
    0000017b: 	psubd	%xmm1, %xmm0
    0000017f: 	paddd	%xmm0, %xmm4
    00000183: 	cmpq	%rdx, %rax
    00000186: 	jne	.Ltmp1017 # Offset: 390
    00000188: 	movdqa	%xmm4, %xmm0
    0000018c: 	movl	%ecx, %eax
    0000018e: 	psrldq	$0x8, %xmm0
    00000193: 	andl	$-0x4, %eax
    00000196: 	paddd	%xmm0, %xmm4
    0000019a: 	movdqa	%xmm4, %xmm0
    0000019e: 	psrldq	$0x4, %xmm0
    000001a3: 	paddd	%xmm0, %xmm4
    000001a7: 	movd	%xmm4, %r8d
    000001ac: 	cmpl	%eax, %ecx
    000001ae: 	je	.Ltmp1018 # Offset: 430
.Ltmp1022:
    000001b0: 	movslq	%eax, %rdx
    000001b3: 	leaq	(,%rdx,4), %r9
    000001bb: 	movslq	(%rdi,%rdx,4), %rdx
    000001bf: 	movq	%rdx, %rsi
    000001c2: 	imulq	$0x66666667, %rdx, %rdx
    000001c9: 	sarl	$0x1f, %esi
    000001cc: 	sarq	$0x21, %rdx
    000001d0: 	subl	%esi, %edx
    000001d2: 	addl	%edx, %r8d
    000001d5: 	leal	0x1(%rax), %edx
    000001d8: 	cmpl	%edx, %ecx
    000001da: 	jle	.Ltmp1019 # Offset: 474
    000001e0: 	movslq	0x4(%rdi,%r9), %rdx
    000001e5: 	addl	$0x2, %eax
    000001e8: 	movq	%rdx, %rsi
    000001eb: 	imulq	$0x66666667, %rdx, %rdx
    000001f2: 	sarl	$0x1f, %esi
    000001f5: 	sarq	$0x21, %rdx
    000001f9: 	subl	%esi, %edx
    000001fb: 	addl	%edx, %r8d
    000001fe: 	cmpl	%eax, %ecx
    00000200: 	jle	.Ltmp1019 # Offset: 512
    00000206: 	movslq	0x8(%rdi,%r9), %rax
    0000020b: 	movq	%rax, %rdx
    0000020e: 	imulq	$0x66666667, %rax, %rax
    00000215: 	sarl	$0x1f, %edx
    00000218: 	sarq	$0x21, %rax
    0000021c: 	subl	%edx, %eax
    0000021e: 	addl	%eax, %r8d
    00000221: 	jmp	.Ltmp1019 # Offset: 545
.Ltmp1013:
    00000226: 	xorl	%eax, %eax
    00000228: 	jmp	.Ltmp1020 # Offset: 552
.Ltmp1018:
    0000022d: 	testl	%ecx, %ecx
    0000022f: 	movl	$0x1, %esi
    00000234: 	cmovgl	%ecx, %esi
    00000237: 	jmp	.Ltmp1021 # Offset: 567
.Ltmp1015:
    0000023c: 	xorl	%r8d, %r8d
    0000023f: 	jmp	.Ltmp1012 # Offset: 575
.Ltmp1016:
    00000244: 	xorl	%eax, %eax
    00000246: 	xorl	%r8d, %r8d
    00000249: 	jmp	.Ltmp1022 # Offset: 585
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_while_loop_global3IiET_PKS0_iS0_"

Binary Function "_Z20test_do_loop_global3IiET_PKS0_iS0_" after disassembly {
  Number      : 145
  State       : disassembled
  Address     : 0xecb0
  Size        : 0x256
  MaxSize     : 0x260
  Offset      : 0xecb0
  Section     : .text
  Orc Section : .local.text._Z20test_do_loop_global3IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0144:
    00000000: 	endbr64
    00000004: 	cvttsd2si	init_value(%rip), %eax
    0000000c: 	movl	%esi, %ecx
    0000000e: 	xorl	%r8d, %r8d
    00000011: 	testl	%eax, %eax
    00000013: 	js	.Ltmp1023 # Offset: 19
    00000019: 	testl	%esi, %esi
    0000001b: 	jle	.Ltmp1024 # Offset: 27
.Ltmp1030:
    00000021: 	testl	%ecx, %ecx
    00000023: 	movl	$0x1, %esi
    00000028: 	cmovgl	%ecx, %esi
    0000002b: 	cmpl	$0x3, %ecx
    0000002e: 	jle	.Ltmp1025 # Offset: 46
.Ltmp1031:
    00000034: 	leaq	0x10(%rdi), %r9
.Ltmp1033:
    00000038: 	movl	%esi, %edx
    0000003a: 	movq	%rdi, %rax
    0000003d: 	pxor	%xmm0, %xmm0
    00000041: 	shrl	$0x2, %edx
    00000044: 	subl	$0x1, %edx
    00000047: 	shlq	$0x4, %rdx
    0000004b: 	addq	%r9, %rdx
    0000004e: 	nop # Size: 2
.Ltmp1026:
    00000050: 	movdqu	(%rax), %xmm6
    00000054: 	addq	$0x10, %rax
    00000058: 	paddd	%xmm6, %xmm0
    0000005c: 	cmpq	%rax, %rdx
    0000005f: 	jne	.Ltmp1026 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	psrldq	$0x8, %xmm1
    0000006a: 	paddd	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x4, %xmm1
    00000077: 	paddd	%xmm1, %xmm0
    0000007b: 	movd	%xmm0, %eax
    0000007f: 	addl	%eax, %r8d
    00000082: 	movl	%esi, %eax
    00000084: 	andl	$-0x4, %eax
    00000087: 	andl	$0x3, %esi
    0000008a: 	je	.Ltmp1024 # Offset: 138
.Ltmp1032:
    0000008c: 	movslq	%eax, %rdx
    0000008f: 	leaq	(,%rdx,4), %rsi
    00000097: 	addl	(%rdi,%rdx,4), %r8d
    0000009b: 	leal	0x1(%rax), %edx
    0000009e: 	cmpl	%edx, %ecx
    000000a0: 	jle	.Ltmp1024 # Offset: 160
    000000a2: 	addl	$0x2, %eax
    000000a5: 	addl	0x4(%rdi,%rsi), %r8d
    000000aa: 	cmpl	%eax, %ecx
    000000ac: 	jle	.Ltmp1024 # Offset: 172
    000000ae: 	addl	0x8(%rdi,%rsi), %r8d
.Ltmp1024:
    000000b3: 	movl	%r8d, %eax
    000000b6: 	retq # Offset: 182
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1023:
    000000c0: 	testl	%esi, %esi
    000000c2: 	jle	.Ltmp1024 # Offset: 194
    000000c4: 	leal	-0x1(%rsi), %eax
    000000c7: 	cmpl	$0x2, %eax
    000000ca: 	jbe	.Ltmp1027 # Offset: 202
    000000d0: 	pxor	%xmm1, %xmm1
    000000d4: 	movl	%esi, %edx
    000000d6: 	leaq	0x10(%rdi), %r9
    000000da: 	movq	%rdi, %rax
    000000dd: 	movdqa	DATAat0x388e0(%rip), %xmm5
    000000e5: 	shrl	$0x2, %edx
    000000e8: 	movdqa	%xmm1, %xmm6
    000000ec: 	movdqa	%xmm1, %xmm7
    000000f0: 	subl	$0x1, %edx
    000000f3: 	pcmpgtd	%xmm5, %xmm6
    000000f7: 	shlq	$0x4, %rdx
    000000fb: 	addq	%r9, %rdx
    000000fe: 	nop # Size: 2
.Ltmp1028:
    00000100: 	movdqu	(%rax), %xmm2
    00000104: 	movdqa	%xmm7, %xmm3
    00000108: 	movdqa	%xmm6, %xmm4
    0000010c: 	addq	$0x10, %rax
    00000110: 	movdqa	%xmm6, %xmm8
    00000115: 	movdqa	%xmm2, %xmm0
    00000119: 	punpckldq	%xmm2, %xmm0
    0000011d: 	pcmpgtd	%xmm0, %xmm3
    00000121: 	pmuludq	%xmm0, %xmm4
    00000125: 	pmuludq	%xmm5, %xmm0
    00000129: 	pmuludq	%xmm5, %xmm3
    0000012d: 	paddq	%xmm4, %xmm3
    00000131: 	movdqa	%xmm7, %xmm4
    00000135: 	psllq	$0x20, %xmm3
    0000013a: 	paddq	%xmm3, %xmm0
    0000013e: 	movdqa	%xmm2, %xmm3
    00000142: 	punpckhdq	%xmm2, %xmm3
    00000146: 	psrad	$0x1f, %xmm2
    0000014b: 	pcmpgtd	%xmm3, %xmm4
    0000014f: 	pmuludq	%xmm3, %xmm8
    00000154: 	pmuludq	%xmm5, %xmm3
    00000158: 	pmuludq	%xmm5, %xmm4
    0000015c: 	paddq	%xmm8, %xmm4
    00000161: 	psllq	$0x20, %xmm4
    00000166: 	paddq	%xmm4, %xmm3
    0000016a: 	shufps	$0xdd, %xmm3, %xmm0
    0000016e: 	psrad	$0x1, %xmm0
    00000173: 	psubd	%xmm2, %xmm0
    00000177: 	paddd	%xmm0, %xmm1
    0000017b: 	cmpq	%rdx, %rax
    0000017e: 	jne	.Ltmp1028 # Offset: 382
    00000180: 	movdqa	%xmm1, %xmm0
    00000184: 	movl	%ecx, %eax
    00000186: 	psrldq	$0x8, %xmm0
    0000018b: 	andl	$-0x4, %eax
    0000018e: 	paddd	%xmm0, %xmm1
    00000192: 	movdqa	%xmm1, %xmm0
    00000196: 	psrldq	$0x4, %xmm0
    0000019b: 	paddd	%xmm0, %xmm1
    0000019f: 	movd	%xmm1, %r8d
    000001a4: 	cmpl	%eax, %ecx
    000001a6: 	je	.Ltmp1029 # Offset: 422
.Ltmp1034:
    000001ac: 	movslq	%eax, %rdx
    000001af: 	leaq	(,%rdx,4), %r9
    000001b7: 	movslq	(%rdi,%rdx,4), %rdx
    000001bb: 	movq	%rdx, %rsi
    000001be: 	imulq	$0x66666667, %rdx, %rdx
    000001c5: 	sarl	$0x1f, %esi
    000001c8: 	sarq	$0x21, %rdx
    000001cc: 	subl	%esi, %edx
    000001ce: 	addl	%edx, %r8d
    000001d1: 	leal	0x1(%rax), %edx
    000001d4: 	cmpl	%edx, %ecx
    000001d6: 	jle	.Ltmp1030 # Offset: 470
    000001dc: 	movslq	0x4(%rdi,%r9), %rdx
    000001e1: 	addl	$0x2, %eax
    000001e4: 	movq	%rdx, %rsi
    000001e7: 	imulq	$0x66666667, %rdx, %rdx
    000001ee: 	sarl	$0x1f, %esi
    000001f1: 	sarq	$0x21, %rdx
    000001f5: 	subl	%esi, %edx
    000001f7: 	addl	%edx, %r8d
    000001fa: 	cmpl	%eax, %ecx
    000001fc: 	jle	.Ltmp1030 # Offset: 508
    00000202: 	movslq	0x8(%rdi,%r9), %rax
    00000207: 	movl	$0x1, %esi
    0000020c: 	movq	%rax, %rdx
    0000020f: 	imulq	$0x66666667, %rax, %rax
    00000216: 	sarl	$0x1f, %edx
    00000219: 	sarq	$0x21, %rax
    0000021d: 	subl	%edx, %eax
    0000021f: 	addl	%eax, %r8d
    00000222: 	testl	%ecx, %ecx
    00000224: 	cmovgl	%ecx, %esi
    00000227: 	cmpl	$0x3, %ecx
    0000022a: 	jg	.Ltmp1031 # Offset: 554
.Ltmp1025:
    00000230: 	xorl	%eax, %eax
    00000232: 	jmp	.Ltmp1032 # Offset: 562
    00000237: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1029:
    00000240: 	testl	%ecx, %ecx
    00000242: 	movl	$0x1, %esi
    00000247: 	cmovgl	%ecx, %esi
    0000024a: 	jmp	.Ltmp1033 # Offset: 586
.Ltmp1027:
    0000024f: 	xorl	%eax, %eax
    00000251: 	jmp	.Ltmp1034 # Offset: 593
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_do_loop_global3IiET_PKS0_iS0_"

Binary Function "_Z22test_goto_loop_global3IiET_PKS0_iS0_" after disassembly {
  Number      : 146
  State       : disassembled
  Address     : 0xef10
  Size        : 0x256
  MaxSize     : 0x260
  Offset      : 0xef10
  Section     : .text
  Orc Section : .local.text._Z22test_goto_loop_global3IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0145:
    00000000: 	endbr64
    00000004: 	cvttsd2si	init_value(%rip), %eax
    0000000c: 	movl	%esi, %ecx
    0000000e: 	xorl	%r8d, %r8d
    00000011: 	testl	%eax, %eax
    00000013: 	js	.Ltmp1035 # Offset: 19
    00000019: 	testl	%esi, %esi
    0000001b: 	jle	.Ltmp1036 # Offset: 27
.Ltmp1042:
    00000021: 	testl	%ecx, %ecx
    00000023: 	movl	$0x1, %esi
    00000028: 	cmovgl	%ecx, %esi
    0000002b: 	cmpl	$0x3, %ecx
    0000002e: 	jle	.Ltmp1037 # Offset: 46
.Ltmp1043:
    00000034: 	leaq	0x10(%rdi), %r9
.Ltmp1045:
    00000038: 	movl	%esi, %edx
    0000003a: 	movq	%rdi, %rax
    0000003d: 	pxor	%xmm0, %xmm0
    00000041: 	shrl	$0x2, %edx
    00000044: 	subl	$0x1, %edx
    00000047: 	shlq	$0x4, %rdx
    0000004b: 	addq	%r9, %rdx
    0000004e: 	nop # Size: 2
.Ltmp1038:
    00000050: 	movdqu	(%rax), %xmm6
    00000054: 	addq	$0x10, %rax
    00000058: 	paddd	%xmm6, %xmm0
    0000005c: 	cmpq	%rax, %rdx
    0000005f: 	jne	.Ltmp1038 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	psrldq	$0x8, %xmm1
    0000006a: 	paddd	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x4, %xmm1
    00000077: 	paddd	%xmm1, %xmm0
    0000007b: 	movd	%xmm0, %eax
    0000007f: 	addl	%eax, %r8d
    00000082: 	movl	%esi, %eax
    00000084: 	andl	$-0x4, %eax
    00000087: 	andl	$0x3, %esi
    0000008a: 	je	.Ltmp1036 # Offset: 138
.Ltmp1044:
    0000008c: 	movslq	%eax, %rdx
    0000008f: 	leaq	(,%rdx,4), %rsi
    00000097: 	addl	(%rdi,%rdx,4), %r8d
    0000009b: 	leal	0x1(%rax), %edx
    0000009e: 	cmpl	%edx, %ecx
    000000a0: 	jle	.Ltmp1036 # Offset: 160
    000000a2: 	addl	$0x2, %eax
    000000a5: 	addl	0x4(%rdi,%rsi), %r8d
    000000aa: 	cmpl	%eax, %ecx
    000000ac: 	jle	.Ltmp1036 # Offset: 172
    000000ae: 	addl	0x8(%rdi,%rsi), %r8d
.Ltmp1036:
    000000b3: 	movl	%r8d, %eax
    000000b6: 	retq # Offset: 182
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1035:
    000000c0: 	testl	%esi, %esi
    000000c2: 	jle	.Ltmp1036 # Offset: 194
    000000c4: 	leal	-0x1(%rsi), %eax
    000000c7: 	cmpl	$0x2, %eax
    000000ca: 	jbe	.Ltmp1039 # Offset: 202
    000000d0: 	pxor	%xmm1, %xmm1
    000000d4: 	movl	%esi, %edx
    000000d6: 	leaq	0x10(%rdi), %r9
    000000da: 	movq	%rdi, %rax
    000000dd: 	movdqa	DATAat0x388e0(%rip), %xmm5
    000000e5: 	shrl	$0x2, %edx
    000000e8: 	movdqa	%xmm1, %xmm6
    000000ec: 	movdqa	%xmm1, %xmm7
    000000f0: 	subl	$0x1, %edx
    000000f3: 	pcmpgtd	%xmm5, %xmm6
    000000f7: 	shlq	$0x4, %rdx
    000000fb: 	addq	%r9, %rdx
    000000fe: 	nop # Size: 2
.Ltmp1040:
    00000100: 	movdqu	(%rax), %xmm2
    00000104: 	movdqa	%xmm7, %xmm3
    00000108: 	movdqa	%xmm6, %xmm4
    0000010c: 	addq	$0x10, %rax
    00000110: 	movdqa	%xmm6, %xmm8
    00000115: 	movdqa	%xmm2, %xmm0
    00000119: 	punpckldq	%xmm2, %xmm0
    0000011d: 	pcmpgtd	%xmm0, %xmm3
    00000121: 	pmuludq	%xmm0, %xmm4
    00000125: 	pmuludq	%xmm5, %xmm0
    00000129: 	pmuludq	%xmm5, %xmm3
    0000012d: 	paddq	%xmm4, %xmm3
    00000131: 	movdqa	%xmm7, %xmm4
    00000135: 	psllq	$0x20, %xmm3
    0000013a: 	paddq	%xmm3, %xmm0
    0000013e: 	movdqa	%xmm2, %xmm3
    00000142: 	punpckhdq	%xmm2, %xmm3
    00000146: 	psrad	$0x1f, %xmm2
    0000014b: 	pcmpgtd	%xmm3, %xmm4
    0000014f: 	pmuludq	%xmm3, %xmm8
    00000154: 	pmuludq	%xmm5, %xmm3
    00000158: 	pmuludq	%xmm5, %xmm4
    0000015c: 	paddq	%xmm8, %xmm4
    00000161: 	psllq	$0x20, %xmm4
    00000166: 	paddq	%xmm4, %xmm3
    0000016a: 	shufps	$0xdd, %xmm3, %xmm0
    0000016e: 	psrad	$0x1, %xmm0
    00000173: 	psubd	%xmm2, %xmm0
    00000177: 	paddd	%xmm0, %xmm1
    0000017b: 	cmpq	%rdx, %rax
    0000017e: 	jne	.Ltmp1040 # Offset: 382
    00000180: 	movdqa	%xmm1, %xmm0
    00000184: 	movl	%ecx, %eax
    00000186: 	psrldq	$0x8, %xmm0
    0000018b: 	andl	$-0x4, %eax
    0000018e: 	paddd	%xmm0, %xmm1
    00000192: 	movdqa	%xmm1, %xmm0
    00000196: 	psrldq	$0x4, %xmm0
    0000019b: 	paddd	%xmm0, %xmm1
    0000019f: 	movd	%xmm1, %r8d
    000001a4: 	cmpl	%eax, %ecx
    000001a6: 	je	.Ltmp1041 # Offset: 422
.Ltmp1046:
    000001ac: 	movslq	%eax, %rdx
    000001af: 	leaq	(,%rdx,4), %r9
    000001b7: 	movslq	(%rdi,%rdx,4), %rdx
    000001bb: 	movq	%rdx, %rsi
    000001be: 	imulq	$0x66666667, %rdx, %rdx
    000001c5: 	sarl	$0x1f, %esi
    000001c8: 	sarq	$0x21, %rdx
    000001cc: 	subl	%esi, %edx
    000001ce: 	addl	%edx, %r8d
    000001d1: 	leal	0x1(%rax), %edx
    000001d4: 	cmpl	%edx, %ecx
    000001d6: 	jle	.Ltmp1042 # Offset: 470
    000001dc: 	movslq	0x4(%rdi,%r9), %rdx
    000001e1: 	addl	$0x2, %eax
    000001e4: 	movq	%rdx, %rsi
    000001e7: 	imulq	$0x66666667, %rdx, %rdx
    000001ee: 	sarl	$0x1f, %esi
    000001f1: 	sarq	$0x21, %rdx
    000001f5: 	subl	%esi, %edx
    000001f7: 	addl	%edx, %r8d
    000001fa: 	cmpl	%eax, %ecx
    000001fc: 	jle	.Ltmp1042 # Offset: 508
    00000202: 	movslq	0x8(%rdi,%r9), %rax
    00000207: 	movl	$0x1, %esi
    0000020c: 	movq	%rax, %rdx
    0000020f: 	imulq	$0x66666667, %rax, %rax
    00000216: 	sarl	$0x1f, %edx
    00000219: 	sarq	$0x21, %rax
    0000021d: 	subl	%edx, %eax
    0000021f: 	addl	%eax, %r8d
    00000222: 	testl	%ecx, %ecx
    00000224: 	cmovgl	%ecx, %esi
    00000227: 	cmpl	$0x3, %ecx
    0000022a: 	jg	.Ltmp1043 # Offset: 554
.Ltmp1037:
    00000230: 	xorl	%eax, %eax
    00000232: 	jmp	.Ltmp1044 # Offset: 562
    00000237: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1041:
    00000240: 	testl	%ecx, %ecx
    00000242: 	movl	$0x1, %esi
    00000247: 	cmovgl	%ecx, %esi
    0000024a: 	jmp	.Ltmp1045 # Offset: 586
.Ltmp1039:
    0000024f: 	xorl	%eax, %eax
    00000251: 	jmp	.Ltmp1046 # Offset: 593
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_goto_loop_global3IiET_PKS0_iS0_"

Binary Function "_Z20test_for_loop2_paramIiET_PKS0_iS0_" after disassembly {
  Number      : 147
  State       : disassembled
  Address     : 0xf170
  Size        : 0x67
  MaxSize     : 0x70
  Offset      : 0xf170
  Section     : .text
  Orc Section : .local.text._Z20test_for_loop2_paramIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0146:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp1047 # Offset: 6
    00000008: 	leal	-0x1(%rsi), %eax
    0000000b: 	shrl	$0x1f, %edx
    0000000e: 	xorl	%r8d, %r8d
    00000011: 	leaq	0x4(%rdi,%rax,4), %rsi
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1049:
    00000020: 	movl	(%rdi), %eax
    00000022: 	addl	%eax, %r8d
    00000025: 	cmpl	$0x77, %eax
    00000028: 	jle	.Ltmp1048 # Offset: 40
    0000002a: 	testb	%dl, %dl
    0000002c: 	je	.Ltmp1048 # Offset: 44
    0000002e: 	movslq	%eax, %rcx
    00000031: 	imulq	$-0x77777777, %rcx, %rcx
    00000038: 	shrq	$0x20, %rcx
    0000003c: 	addl	%eax, %ecx
    0000003e: 	sarl	$0x1f, %eax
    00000041: 	sarl	$0x6, %ecx
    00000044: 	subl	%eax, %ecx
    00000046: 	leal	(%r8,%rcx,2), %r8d
.Ltmp1048:
    0000004a: 	addq	$0x4, %rdi
    0000004e: 	cmpq	%rdi, %rsi
    00000051: 	jne	.Ltmp1049 # Offset: 81
    00000053: 	movl	%r8d, %eax
    00000056: 	retq # Offset: 86
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1047:
    00000060: 	xorl	%r8d, %r8d
    00000063: 	movl	%r8d, %eax
    00000066: 	retq # Offset: 102
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_for_loop2_paramIiET_PKS0_iS0_"

Binary Function "_Z21test_for_loop2_param2IiET_PKS0_iS0_" after disassembly {
  Number      : 148
  State       : disassembled
  Address     : 0xf1e0
  Size        : 0x67
  MaxSize     : 0x70
  Offset      : 0xf1e0
  Section     : .text
  Orc Section : .local.text._Z21test_for_loop2_param2IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0147:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp1050 # Offset: 6
    00000008: 	leal	-0x1(%rsi), %eax
    0000000b: 	shrl	$0x1f, %edx
    0000000e: 	xorl	%r8d, %r8d
    00000011: 	leaq	0x4(%rdi,%rax,4), %rsi
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1052:
    00000020: 	movl	(%rdi), %eax
    00000022: 	addl	%eax, %r8d
    00000025: 	cmpl	$0x77, %eax
    00000028: 	jle	.Ltmp1051 # Offset: 40
    0000002a: 	testb	%dl, %dl
    0000002c: 	je	.Ltmp1051 # Offset: 44
    0000002e: 	movslq	%eax, %rcx
    00000031: 	imulq	$-0x77777777, %rcx, %rcx
    00000038: 	shrq	$0x20, %rcx
    0000003c: 	addl	%eax, %ecx
    0000003e: 	sarl	$0x1f, %eax
    00000041: 	sarl	$0x6, %ecx
    00000044: 	subl	%eax, %ecx
    00000046: 	addl	%ecx, %r8d
.Ltmp1051:
    00000049: 	addq	$0x4, %rdi
    0000004d: 	cmpq	%rdi, %rsi
    00000050: 	jne	.Ltmp1052 # Offset: 80
    00000052: 	movl	%r8d, %eax
    00000055: 	retq # Offset: 85
    00000056: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1050:
    00000060: 	xorl	%r8d, %r8d
    00000063: 	movl	%r8d, %eax
    00000066: 	retq # Offset: 102
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_for_loop2_param2IiET_PKS0_iS0_"

Binary Function "_Z22test_while_loop2_paramIiET_PKS0_iS0_" after disassembly {
  Number      : 149
  State       : disassembled
  Address     : 0xf250
  Size        : 0x77
  MaxSize     : 0x80
  Offset      : 0xf250
  Section     : .text
  Orc Section : .local.text._Z22test_while_loop2_paramIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0148:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp1053 # Offset: 6
    00000008: 	leal	-0x1(%rsi), %eax
    0000000b: 	shrl	$0x1f, %edx
    0000000e: 	xorl	%r8d, %r8d
    00000011: 	leaq	0x4(%rdi,%rax,4), %r9
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1055:
    00000020: 	movl	(%rdi), %eax
    00000022: 	addl	%eax, %r8d
    00000025: 	cmpl	$0x77, %eax
    00000028: 	jle	.Ltmp1054 # Offset: 40
    0000002a: 	testb	%dl, %dl
    0000002c: 	je	.Ltmp1054 # Offset: 44
    0000002e: 	movslq	%eax, %rsi
    00000031: 	movl	%eax, %r10d
    00000034: 	imulq	$0x66666667, %rsi, %rcx
    0000003b: 	sarl	$0x1f, %r10d
    0000003f: 	imulq	$-0x77777777, %rsi, %rsi
    00000046: 	sarq	$0x21, %rcx
    0000004a: 	shrq	$0x20, %rsi
    0000004e: 	subl	%r10d, %ecx
    00000051: 	addl	%esi, %eax
    00000053: 	sarl	$0x6, %eax
    00000056: 	subl	%r10d, %eax
    00000059: 	addl	%ecx, %eax
    0000005b: 	addl	%eax, %r8d
.Ltmp1054:
    0000005e: 	addq	$0x4, %rdi
    00000062: 	cmpq	%rdi, %r9
    00000065: 	jne	.Ltmp1055 # Offset: 101
    00000067: 	movl	%r8d, %eax
    0000006a: 	retq # Offset: 106
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1053:
    00000070: 	xorl	%r8d, %r8d
    00000073: 	movl	%r8d, %eax
    00000076: 	retq # Offset: 118
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_while_loop2_paramIiET_PKS0_iS0_"

Binary Function "_Z23test_while_loop2_param2IiET_PKS0_iS0_" after disassembly {
  Number      : 150
  State       : disassembled
  Address     : 0xf2d0
  Size        : 0x5f
  MaxSize     : 0x60
  Offset      : 0xf2d0
  Section     : .text
  Orc Section : .local.text._Z23test_while_loop2_param2IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0149:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp1056 # Offset: 6
    00000008: 	leal	-0x1(%rsi), %eax
    0000000b: 	shrl	$0x1f, %edx
    0000000e: 	xorl	%r8d, %r8d
    00000011: 	leaq	0x4(%rdi,%rax,4), %rsi
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1058:
    00000020: 	movl	(%rdi), %eax
    00000022: 	addl	%eax, %r8d
    00000025: 	cmpl	$0x77, %eax
    00000028: 	jle	.Ltmp1057 # Offset: 40
    0000002a: 	testb	%dl, %dl
    0000002c: 	je	.Ltmp1057 # Offset: 44
    0000002e: 	movslq	%eax, %rcx
    00000031: 	sarl	$0x1f, %eax
    00000034: 	imulq	$0x66666667, %rcx, %rcx
    0000003b: 	sarq	$0x21, %rcx
    0000003f: 	subl	%eax, %ecx
    00000041: 	addl	%ecx, %r8d
.Ltmp1057:
    00000044: 	addq	$0x4, %rdi
    00000048: 	cmpq	%rdi, %rsi
    0000004b: 	jne	.Ltmp1058 # Offset: 75
    0000004d: 	movl	%r8d, %eax
    00000050: 	retq # Offset: 80
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp1056:
    00000058: 	xorl	%r8d, %r8d
    0000005b: 	movl	%r8d, %eax
    0000005e: 	retq # Offset: 94
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_while_loop2_param2IiET_PKS0_iS0_"

Binary Function "_Z21test_for_loop2_globalIiET_PKS0_iS0_" after disassembly {
  Number      : 151
  State       : disassembled
  Address     : 0xf330
  Size        : 0x101
  MaxSize     : 0x110
  Offset      : 0xf330
  Section     : .text
  Orc Section : .local.text._Z21test_for_loop2_globalIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0150:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rdx
    00000007: 	movl	%esi, %ecx
    00000009: 	testl	%esi, %esi
    0000000b: 	jle	.Ltmp1059 # Offset: 11
    00000011: 	cvttsd2si	init_value(%rip), %eax
    00000019: 	testl	%eax, %eax
    0000001b: 	js	.Ltmp1060 # Offset: 27
    00000021: 	leal	-0x1(%rsi), %eax
    00000024: 	cmpl	$0x2, %eax
    00000027: 	jbe	.Ltmp1061 # Offset: 39
    0000002d: 	shrl	$0x2, %esi
    00000030: 	movq	%rdi, %rax
    00000033: 	pxor	%xmm0, %xmm0
    00000037: 	subl	$0x1, %esi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	leaq	0x10(%rdi,%rsi), %rsi
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1062:
    00000048: 	movdqu	(%rax), %xmm2
    0000004c: 	addq	$0x10, %rax
    00000050: 	paddd	%xmm2, %xmm0
    00000054: 	cmpq	%rax, %rsi
    00000057: 	jne	.Ltmp1062 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	movl	%ecx, %esi
    0000005f: 	psrldq	$0x8, %xmm1
    00000064: 	andl	$-0x4, %esi
    00000067: 	paddd	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	psrldq	$0x4, %xmm1
    00000074: 	paddd	%xmm1, %xmm0
    00000078: 	movd	%xmm0, %eax
    0000007c: 	testb	$0x3, %cl
    0000007f: 	je	.Ltmp1063 # Offset: 127
.Ltmp1067:
    00000081: 	movslq	%esi, %rdi
    00000084: 	leaq	(,%rdi,4), %r8
    0000008c: 	addl	(%rdx,%rdi,4), %eax
    0000008f: 	leal	0x1(%rsi), %edi
    00000092: 	cmpl	%ecx, %edi
    00000094: 	jge	.Ltmp1064 # Offset: 148
    00000096: 	addl	$0x2, %esi
    00000099: 	addl	0x4(%rdx,%r8), %eax
    0000009e: 	cmpl	%ecx, %esi
    000000a0: 	jge	.Ltmp1064 # Offset: 160
    000000a2: 	addl	0x8(%rdx,%r8), %eax
    000000a7: 	retq # Offset: 167
    000000a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1059:
    000000b0: 	xorl	%eax, %eax
.Ltmp1064:
    000000b2: 	retq # Offset: 178
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1060:
    000000b8: 	leal	-0x1(%rsi), %eax
    000000bb: 	leaq	0x4(%rdi,%rax,4), %rdi
    000000c0: 	xorl	%eax, %eax
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1066:
    000000c8: 	movl	(%rdx), %ecx
    000000ca: 	addl	%ecx, %eax
    000000cc: 	cmpl	$0x77, %ecx
    000000cf: 	jle	.Ltmp1065 # Offset: 207
    000000d1: 	movslq	%ecx, %rsi
    000000d4: 	imulq	$-0x77777777, %rsi, %rsi
    000000db: 	shrq	$0x20, %rsi
    000000df: 	addl	%ecx, %esi
    000000e1: 	sarl	$0x1f, %ecx
    000000e4: 	sarl	$0x6, %esi
    000000e7: 	subl	%ecx, %esi
    000000e9: 	leal	(%rax,%rsi,2), %eax
.Ltmp1065:
    000000ec: 	addq	$0x4, %rdx
    000000f0: 	cmpq	%rdi, %rdx
    000000f3: 	jne	.Ltmp1066 # Offset: 243
    000000f5: 	retq # Offset: 245
.Ltmp1061:
    000000f6: 	xorl	%esi, %esi
    000000f8: 	xorl	%eax, %eax
    000000fa: 	jmp	.Ltmp1067 # Offset: 250
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp1063:
    00000100: 	retq # Offset: 256
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_for_loop2_globalIiET_PKS0_iS0_"

Binary Function "_Z22test_for_loop2_global2IiET_PKS0_iS0_" after disassembly {
  Number      : 152
  State       : disassembled
  Address     : 0xf440
  Size        : 0x101
  MaxSize     : 0x110
  Offset      : 0xf440
  Section     : .text
  Orc Section : .local.text._Z22test_for_loop2_global2IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0151:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rdx
    00000007: 	movl	%esi, %ecx
    00000009: 	testl	%esi, %esi
    0000000b: 	jle	.Ltmp1068 # Offset: 11
    00000011: 	cvttsd2si	init_value(%rip), %eax
    00000019: 	testl	%eax, %eax
    0000001b: 	js	.Ltmp1069 # Offset: 27
    00000021: 	leal	-0x1(%rsi), %eax
    00000024: 	cmpl	$0x2, %eax
    00000027: 	jbe	.Ltmp1070 # Offset: 39
    0000002d: 	shrl	$0x2, %esi
    00000030: 	movq	%rdi, %rax
    00000033: 	pxor	%xmm0, %xmm0
    00000037: 	subl	$0x1, %esi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	leaq	0x10(%rdi,%rsi), %rsi
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1071:
    00000048: 	movdqu	(%rax), %xmm2
    0000004c: 	addq	$0x10, %rax
    00000050: 	paddd	%xmm2, %xmm0
    00000054: 	cmpq	%rax, %rsi
    00000057: 	jne	.Ltmp1071 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	movl	%ecx, %esi
    0000005f: 	psrldq	$0x8, %xmm1
    00000064: 	andl	$-0x4, %esi
    00000067: 	paddd	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	psrldq	$0x4, %xmm1
    00000074: 	paddd	%xmm1, %xmm0
    00000078: 	movd	%xmm0, %eax
    0000007c: 	testb	$0x3, %cl
    0000007f: 	je	.Ltmp1072 # Offset: 127
.Ltmp1076:
    00000081: 	movslq	%esi, %rdi
    00000084: 	leaq	(,%rdi,4), %r8
    0000008c: 	addl	(%rdx,%rdi,4), %eax
    0000008f: 	leal	0x1(%rsi), %edi
    00000092: 	cmpl	%edi, %ecx
    00000094: 	jle	.Ltmp1073 # Offset: 148
    00000096: 	addl	$0x2, %esi
    00000099: 	addl	0x4(%rdx,%r8), %eax
    0000009e: 	cmpl	%ecx, %esi
    000000a0: 	jge	.Ltmp1073 # Offset: 160
    000000a2: 	addl	0x8(%rdx,%r8), %eax
    000000a7: 	retq # Offset: 167
    000000a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1068:
    000000b0: 	xorl	%eax, %eax
.Ltmp1073:
    000000b2: 	retq # Offset: 178
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1069:
    000000b8: 	leal	-0x1(%rsi), %eax
    000000bb: 	leaq	0x4(%rdi,%rax,4), %rdi
    000000c0: 	xorl	%eax, %eax
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1075:
    000000c8: 	movl	(%rdx), %ecx
    000000ca: 	addl	%ecx, %eax
    000000cc: 	cmpl	$0x77, %ecx
    000000cf: 	jle	.Ltmp1074 # Offset: 207
    000000d1: 	movslq	%ecx, %rsi
    000000d4: 	imulq	$-0x77777777, %rsi, %rsi
    000000db: 	shrq	$0x20, %rsi
    000000df: 	addl	%ecx, %esi
    000000e1: 	sarl	$0x1f, %ecx
    000000e4: 	sarl	$0x6, %esi
    000000e7: 	subl	%ecx, %esi
    000000e9: 	addl	%esi, %eax
.Ltmp1074:
    000000eb: 	addq	$0x4, %rdx
    000000ef: 	cmpq	%rdi, %rdx
    000000f2: 	jne	.Ltmp1075 # Offset: 242
    000000f4: 	retq # Offset: 244
.Ltmp1070:
    000000f5: 	xorl	%esi, %esi
    000000f7: 	xorl	%eax, %eax
    000000f9: 	jmp	.Ltmp1076 # Offset: 249
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1072:
    00000100: 	retq # Offset: 256
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_for_loop2_global2IiET_PKS0_iS0_"

Binary Function "_Z23test_while_loop2_globalIiET_PKS0_iS0_" after disassembly {
  Number      : 153
  State       : disassembled
  Address     : 0xf550
  Size        : 0x119
  MaxSize     : 0x120
  Offset      : 0xf550
  Section     : .text
  Orc Section : .local.text._Z23test_while_loop2_globalIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0152:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rdx
    00000007: 	movl	%esi, %ecx
    00000009: 	testl	%esi, %esi
    0000000b: 	jle	.Ltmp1077 # Offset: 11
    00000011: 	cvttsd2si	init_value(%rip), %eax
    00000019: 	testl	%eax, %eax
    0000001b: 	js	.Ltmp1078 # Offset: 27
    00000021: 	leal	-0x1(%rsi), %eax
    00000024: 	cmpl	$0x2, %eax
    00000027: 	jbe	.Ltmp1079 # Offset: 39
    0000002d: 	shrl	$0x2, %esi
    00000030: 	movq	%rdi, %rax
    00000033: 	pxor	%xmm0, %xmm0
    00000037: 	subl	$0x1, %esi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	leaq	0x10(%rdi,%rsi), %rsi
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1080:
    00000048: 	movdqu	(%rax), %xmm2
    0000004c: 	addq	$0x10, %rax
    00000050: 	paddd	%xmm2, %xmm0
    00000054: 	cmpq	%rax, %rsi
    00000057: 	jne	.Ltmp1080 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	movl	%ecx, %esi
    0000005f: 	psrldq	$0x8, %xmm1
    00000064: 	andl	$-0x4, %esi
    00000067: 	paddd	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	psrldq	$0x4, %xmm1
    00000074: 	paddd	%xmm1, %xmm0
    00000078: 	movd	%xmm0, %eax
    0000007c: 	testb	$0x3, %cl
    0000007f: 	je	.Ltmp1081 # Offset: 127
.Ltmp1085:
    00000085: 	movslq	%esi, %rdi
    00000088: 	leaq	(,%rdi,4), %r8
    00000090: 	addl	(%rdx,%rdi,4), %eax
    00000093: 	leal	0x1(%rsi), %edi
    00000096: 	cmpl	%ecx, %edi
    00000098: 	jge	.Ltmp1082 # Offset: 152
    0000009a: 	addl	$0x2, %esi
    0000009d: 	addl	0x4(%rdx,%r8), %eax
    000000a2: 	cmpl	%ecx, %esi
    000000a4: 	jge	.Ltmp1082 # Offset: 164
    000000a6: 	addl	0x8(%rdx,%r8), %eax
    000000ab: 	retq # Offset: 171
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp1077:
    000000b0: 	xorl	%eax, %eax
.Ltmp1082:
    000000b2: 	retq # Offset: 178
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1078:
    000000b8: 	leal	-0x1(%rsi), %eax
    000000bb: 	leaq	0x4(%rdi,%rax,4), %r8
    000000c0: 	xorl	%eax, %eax
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1084:
    000000c8: 	movl	(%rdx), %ecx
    000000ca: 	addl	%ecx, %eax
    000000cc: 	cmpl	$0x77, %ecx
    000000cf: 	jle	.Ltmp1083 # Offset: 207
    000000d1: 	movslq	%ecx, %rdi
    000000d4: 	movl	%ecx, %r9d
    000000d7: 	imulq	$0x66666667, %rdi, %rsi
    000000de: 	sarl	$0x1f, %r9d
    000000e2: 	imulq	$-0x77777777, %rdi, %rdi
    000000e9: 	sarq	$0x21, %rsi
    000000ed: 	shrq	$0x20, %rdi
    000000f1: 	subl	%r9d, %esi
    000000f4: 	addl	%edi, %ecx
    000000f6: 	sarl	$0x6, %ecx
    000000f9: 	subl	%r9d, %ecx
    000000fc: 	addl	%esi, %ecx
    000000fe: 	addl	%ecx, %eax
.Ltmp1083:
    00000100: 	addq	$0x4, %rdx
    00000104: 	cmpq	%r8, %rdx
    00000107: 	jne	.Ltmp1084 # Offset: 263
    00000109: 	retq # Offset: 265
.Ltmp1079:
    0000010a: 	xorl	%esi, %esi
    0000010c: 	xorl	%eax, %eax
    0000010e: 	jmp	.Ltmp1085 # Offset: 270
    00000113: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1081:
    00000118: 	retq # Offset: 280
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_while_loop2_globalIiET_PKS0_iS0_"

Binary Function "_Z24test_while_loop2_global2IiET_PKS0_iS0_" after disassembly {
  Number      : 154
  State       : disassembled
  Address     : 0xf670
  Size        : 0x101
  MaxSize     : 0x110
  Offset      : 0xf670
  Section     : .text
  Orc Section : .local.text._Z24test_while_loop2_global2IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0153:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rdx
    00000007: 	movl	%esi, %ecx
    00000009: 	testl	%esi, %esi
    0000000b: 	jle	.Ltmp1086 # Offset: 11
    00000011: 	cvttsd2si	init_value(%rip), %eax
    00000019: 	testl	%eax, %eax
    0000001b: 	js	.Ltmp1087 # Offset: 27
    00000021: 	leal	-0x1(%rsi), %eax
    00000024: 	cmpl	$0x2, %eax
    00000027: 	jbe	.Ltmp1088 # Offset: 39
    0000002d: 	shrl	$0x2, %esi
    00000030: 	movq	%rdi, %rax
    00000033: 	pxor	%xmm0, %xmm0
    00000037: 	subl	$0x1, %esi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	leaq	0x10(%rdi,%rsi), %rsi
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1089:
    00000048: 	movdqu	(%rax), %xmm2
    0000004c: 	addq	$0x10, %rax
    00000050: 	paddd	%xmm2, %xmm0
    00000054: 	cmpq	%rax, %rsi
    00000057: 	jne	.Ltmp1089 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	movl	%ecx, %esi
    0000005f: 	psrldq	$0x8, %xmm1
    00000064: 	andl	$-0x4, %esi
    00000067: 	paddd	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	psrldq	$0x4, %xmm1
    00000074: 	paddd	%xmm1, %xmm0
    00000078: 	movd	%xmm0, %eax
    0000007c: 	testb	$0x3, %cl
    0000007f: 	je	.Ltmp1090 # Offset: 127
.Ltmp1094:
    00000081: 	movslq	%esi, %rdi
    00000084: 	leaq	(,%rdi,4), %r8
    0000008c: 	addl	(%rdx,%rdi,4), %eax
    0000008f: 	leal	0x1(%rsi), %edi
    00000092: 	cmpl	%edi, %ecx
    00000094: 	jle	.Ltmp1091 # Offset: 148
    00000096: 	addl	$0x2, %esi
    00000099: 	addl	0x4(%rdx,%r8), %eax
    0000009e: 	cmpl	%ecx, %esi
    000000a0: 	jge	.Ltmp1091 # Offset: 160
    000000a2: 	addl	0x8(%rdx,%r8), %eax
    000000a7: 	retq # Offset: 167
    000000a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1086:
    000000b0: 	xorl	%eax, %eax
.Ltmp1091:
    000000b2: 	retq # Offset: 178
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1087:
    000000b8: 	leal	-0x1(%rsi), %eax
    000000bb: 	leaq	0x4(%rdi,%rax,4), %rdi
    000000c0: 	xorl	%eax, %eax
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1093:
    000000c8: 	movl	(%rdx), %ecx
    000000ca: 	addl	%ecx, %eax
    000000cc: 	cmpl	$0x77, %ecx
    000000cf: 	jle	.Ltmp1092 # Offset: 207
    000000d1: 	movslq	%ecx, %rsi
    000000d4: 	sarl	$0x1f, %ecx
    000000d7: 	imulq	$0x66666667, %rsi, %rsi
    000000de: 	sarq	$0x21, %rsi
    000000e2: 	subl	%ecx, %esi
    000000e4: 	addl	%esi, %eax
.Ltmp1092:
    000000e6: 	addq	$0x4, %rdx
    000000ea: 	cmpq	%rdi, %rdx
    000000ed: 	jne	.Ltmp1093 # Offset: 237
    000000ef: 	retq # Offset: 239
.Ltmp1088:
    000000f0: 	xorl	%esi, %esi
    000000f2: 	xorl	%eax, %eax
    000000f4: 	jmp	.Ltmp1094 # Offset: 244
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1090:
    00000100: 	retq # Offset: 256
DWARF CFI Instructions:
    <empty>
End of Function "_Z24test_while_loop2_global2IiET_PKS0_iS0_"

Binary Function "_Z18test_for_loop3_optIiET_PKS0_iS0_" after disassembly {
  Number      : 155
  State       : disassembled
  Address     : 0xf780
  Size        : 0x248
  MaxSize     : 0x250
  Offset      : 0xf780
  Section     : .text
  Orc Section : .local.text._Z18test_for_loop3_optIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0154:
    00000000: 	endbr64
    00000004: 	leal	(%rdx,%rdx), %eax
    00000007: 	movq	%rdi, %r8
    0000000a: 	movl	%esi, %edi
    0000000c: 	cmpl	%esi, %eax
    0000000e: 	jle	.Ltmp1095 # Offset: 14
    00000014: 	cmpl	%esi, %edx
    00000016: 	cmovgl	%esi, %edx
    00000019: 	testl	%edx, %edx
    0000001b: 	jle	.Ltmp1096 # Offset: 27
    00000021: 	leal	-0x1(%rdx), %eax
    00000024: 	cmpl	$0x2, %eax
    00000027: 	jbe	.Ltmp1097 # Offset: 39
    0000002d: 	movl	%edx, %ecx
    0000002f: 	movdqa	DATAat0x388f0(%rip), %xmm2
    00000037: 	movq	%r8, %rax
    0000003a: 	pxor	%xmm1, %xmm1
    0000003e: 	shrl	$0x2, %ecx
    00000041: 	subl	$0x1, %ecx
    00000044: 	shlq	$0x4, %rcx
    00000048: 	leaq	0x10(%r8,%rcx), %rcx
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp1098:
    00000050: 	movdqu	(%rax), %xmm0
    00000054: 	addq	$0x10, %rax
    00000058: 	paddd	%xmm2, %xmm0
    0000005c: 	paddd	%xmm0, %xmm1
    00000060: 	cmpq	%rax, %rcx
    00000063: 	jne	.Ltmp1098 # Offset: 99
    00000065: 	movdqa	%xmm1, %xmm0
    00000069: 	movl	%edx, %ecx
    0000006b: 	psrldq	$0x8, %xmm0
    00000070: 	andl	$-0x4, %ecx
    00000073: 	paddd	%xmm0, %xmm1
    00000077: 	movdqa	%xmm1, %xmm0
    0000007b: 	psrldq	$0x4, %xmm0
    00000080: 	paddd	%xmm0, %xmm1
    00000084: 	movd	%xmm1, %eax
    00000088: 	testb	$0x3, %dl
    0000008b: 	je	.Ltmp1099 # Offset: 139
.Ltmp1109:
    0000008d: 	movslq	%ecx, %rsi
    00000090: 	leaq	(,%rsi,4), %r9
    00000098: 	movl	(%r8,%rsi,4), %esi
    0000009c: 	leal	0x1(%rax,%rsi), %eax
    000000a0: 	leal	0x1(%rcx), %esi
    000000a3: 	cmpl	%esi, %edx
    000000a5: 	jle	.Ltmp1099 # Offset: 165
    000000a7: 	movl	0x4(%r8,%r9), %esi
    000000ac: 	addl	$0x2, %ecx
    000000af: 	leal	0x1(%rax,%rsi), %eax
    000000b3: 	cmpl	%ecx, %edx
    000000b5: 	jle	.Ltmp1099 # Offset: 181
    000000b7: 	movl	0x8(%r8,%r9), %ecx
    000000bc: 	leal	0x1(%rax,%rcx), %eax
.Ltmp1099:
    000000c0: 	cmpl	%edx, %edi
    000000c2: 	jle	.Ltmp1100 # Offset: 194
    000000c8: 	movl	%edi, %r10d
    000000cb: 	subl	%edx, %r10d
    000000ce: 	leal	-0x1(%r10), %ecx
    000000d2: 	cmpl	$0x2, %ecx
    000000d5: 	jbe	.Ltmp1101 # Offset: 213
    000000d7: 	movslq	%edx, %rcx
    000000da: 	pxor	%xmm1, %xmm1
    000000de: 	pcmpeqd	%xmm2, %xmm2
    000000e2: 	leaq	(%r8,%rcx,4), %rsi
    000000e6: 	movl	%r10d, %ecx
    000000e9: 	shrl	$0x2, %ecx
    000000ec: 	leal	-0x1(%rcx), %r9d
    000000f0: 	leaq	0x10(%rsi), %rcx
    000000f4: 	shlq	$0x4, %r9
    000000f8: 	addq	%rcx, %r9
    000000fb: 	jmp	.Ltmp1102 # Offset: 251
    000000fd: 	nopl	(%rax) # Size: 3
.Ltmp1103:
    00000100: 	addq	$0x10, %rcx
.Ltmp1102:
    00000104: 	movdqu	(%rsi), %xmm0
    00000108: 	movq	%rcx, %rsi
    0000010b: 	paddd	%xmm2, %xmm0
    0000010f: 	paddd	%xmm0, %xmm1
    00000113: 	cmpq	%r9, %rcx
    00000116: 	jne	.Ltmp1103 # Offset: 278
    00000118: 	movdqa	%xmm1, %xmm0
    0000011c: 	psrldq	$0x8, %xmm0
    00000121: 	paddd	%xmm0, %xmm1
    00000125: 	movdqa	%xmm1, %xmm0
    00000129: 	psrldq	$0x4, %xmm0
    0000012e: 	paddd	%xmm0, %xmm1
    00000132: 	movd	%xmm1, %ecx
    00000136: 	addl	%ecx, %eax
    00000138: 	movl	%r10d, %ecx
    0000013b: 	andl	$-0x4, %ecx
    0000013e: 	addl	%ecx, %edx
    00000140: 	cmpl	%ecx, %r10d
    00000143: 	je	.Ltmp1100 # Offset: 323
.Ltmp1101:
    00000149: 	movslq	%edx, %rcx
    0000014c: 	leaq	(,%rcx,4), %rsi
    00000154: 	movl	(%r8,%rcx,4), %ecx
    00000158: 	leal	-0x1(%rax,%rcx), %eax
    0000015c: 	leal	0x1(%rdx), %ecx
    0000015f: 	cmpl	%ecx, %edi
    00000161: 	jle	.Ltmp1100 # Offset: 353
    00000167: 	movl	0x4(%r8,%rsi), %ecx
    0000016c: 	addl	$0x2, %edx
    0000016f: 	leal	-0x1(%rax,%rcx), %eax
    00000173: 	cmpl	%edx, %edi
    00000175: 	jle	.Ltmp1100 # Offset: 373
    0000017b: 	movl	0x8(%r8,%rsi), %edx
    00000180: 	leal	-0x1(%rax,%rdx), %eax
    00000184: 	retq # Offset: 388
    00000185: 	nopl	(%rax) # Size: 3
.Ltmp1095:
    00000188: 	testl	%esi, %esi
    0000018a: 	jle	.Ltmp1104 # Offset: 394
    00000190: 	leal	-0x1(%rsi), %eax
    00000193: 	cmpl	$0x2, %eax
    00000196: 	jbe	.Ltmp1105 # Offset: 406
    0000019c: 	movl	%esi, %edx
    0000019e: 	movq	%r8, %rax
    000001a1: 	pxor	%xmm0, %xmm0
    000001a5: 	shrl	$0x2, %edx
    000001a8: 	subl	$0x1, %edx
    000001ab: 	shlq	$0x4, %rdx
    000001af: 	leaq	0x10(%r8,%rdx), %rdx
    000001b4: 	nopl	(%rax) # Size: 4
.Ltmp1106:
    000001b8: 	movdqu	(%rax), %xmm3
    000001bc: 	addq	$0x10, %rax
    000001c0: 	paddd	%xmm3, %xmm0
    000001c4: 	cmpq	%rax, %rdx
    000001c7: 	jne	.Ltmp1106 # Offset: 455
    000001c9: 	movdqa	%xmm0, %xmm1
    000001cd: 	movl	%edi, %edx
    000001cf: 	psrldq	$0x8, %xmm1
    000001d4: 	andl	$-0x4, %edx
    000001d7: 	paddd	%xmm1, %xmm0
    000001db: 	movdqa	%xmm0, %xmm1
    000001df: 	psrldq	$0x4, %xmm1
    000001e4: 	paddd	%xmm1, %xmm0
    000001e8: 	movd	%xmm0, %eax
    000001ec: 	testb	$0x3, %dil
    000001f0: 	je	.Ltmp1107 # Offset: 496
.Ltmp1108:
    000001f2: 	movslq	%edx, %rcx
    000001f5: 	leaq	(,%rcx,4), %rsi
    000001fd: 	addl	(%r8,%rcx,4), %eax
    00000201: 	leal	0x1(%rdx), %ecx
    00000204: 	cmpl	%ecx, %edi
    00000206: 	jle	.Ltmp1100 # Offset: 518
    00000208: 	addl	$0x2, %edx
    0000020b: 	addl	0x4(%r8,%rsi), %eax
    00000210: 	cmpl	%edx, %edi
    00000212: 	jle	.Ltmp1100 # Offset: 530
    00000214: 	addl	0x8(%r8,%rsi), %eax
    00000219: 	retq # Offset: 537
    0000021a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1104:
    00000220: 	xorl	%eax, %eax
.Ltmp1100:
    00000222: 	retq # Offset: 546
    00000223: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1096:
    00000228: 	xorl	%edx, %edx
    0000022a: 	xorl	%eax, %eax
    0000022c: 	jmp	.Ltmp1099 # Offset: 556
    00000231: 	nopl	(%rax) # Size: 7
.Ltmp1107:
    00000238: 	retq # Offset: 568
.Ltmp1105:
    00000239: 	xorl	%edx, %edx
    0000023b: 	xorl	%eax, %eax
    0000023d: 	jmp	.Ltmp1108 # Offset: 573
.Ltmp1097:
    0000023f: 	xorl	%ecx, %ecx
    00000241: 	xorl	%eax, %eax
    00000243: 	jmp	.Ltmp1109 # Offset: 579
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_for_loop3_optIiET_PKS0_iS0_"

Binary Function "_Z22test_for_loop3_halfoptIiET_PKS0_iS0_" after disassembly {
  Number      : 156
  State       : disassembled
  Address     : 0xf9d0
  Size        : 0x250
  MaxSize     : 0x250
  Offset      : 0xf9d0
  Section     : .text
  Orc Section : .local.text._Z22test_for_loop3_halfoptIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0155:
    00000000: 	endbr64
    00000004: 	cmpl	%esi, %edx
    00000006: 	movl	%esi, %r9d
    00000009: 	movq	%rdi, %r8
    0000000c: 	cmovlel	%edx, %esi
    0000000f: 	testl	%esi, %esi
    00000011: 	jle	.Ltmp1110 # Offset: 17
    00000017: 	leal	-0x1(%rsi), %eax
    0000001a: 	cmpl	$0x2, %eax
    0000001d: 	jbe	.Ltmp1111 # Offset: 29
    00000023: 	movl	%esi, %ecx
    00000025: 	movdqa	DATAat0x388f0(%rip), %xmm2
    0000002d: 	movq	%rdi, %rax
    00000030: 	pxor	%xmm1, %xmm1
    00000034: 	shrl	$0x2, %ecx
    00000037: 	subl	$0x1, %ecx
    0000003a: 	shlq	$0x4, %rcx
    0000003e: 	leaq	0x10(%rdi,%rcx), %rcx
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1112:
    00000048: 	movdqu	(%rax), %xmm0
    0000004c: 	addq	$0x10, %rax
    00000050: 	paddd	%xmm2, %xmm0
    00000054: 	paddd	%xmm0, %xmm1
    00000058: 	cmpq	%rax, %rcx
    0000005b: 	jne	.Ltmp1112 # Offset: 91
    0000005d: 	movdqa	%xmm1, %xmm0
    00000061: 	movl	%esi, %ecx
    00000063: 	psrldq	$0x8, %xmm0
    00000068: 	andl	$-0x4, %ecx
    0000006b: 	paddd	%xmm0, %xmm1
    0000006f: 	movdqa	%xmm1, %xmm0
    00000073: 	psrldq	$0x4, %xmm0
    00000078: 	paddd	%xmm0, %xmm1
    0000007c: 	movd	%xmm1, %eax
    00000080: 	testb	$0x3, %sil
    00000084: 	je	.Ltmp1113 # Offset: 132
.Ltmp1124:
    00000086: 	movslq	%ecx, %rdi
    00000089: 	leaq	(,%rdi,4), %r10
    00000091: 	movl	(%r8,%rdi,4), %edi
    00000095: 	leal	0x1(%rax,%rdi), %eax
    00000099: 	leal	0x1(%rcx), %edi
    0000009c: 	cmpl	%edi, %esi
    0000009e: 	jle	.Ltmp1113 # Offset: 158
    000000a0: 	movl	0x4(%r8,%r10), %edi
    000000a5: 	addl	$0x2, %ecx
    000000a8: 	leal	0x1(%rax,%rdi), %eax
    000000ac: 	cmpl	%ecx, %esi
    000000ae: 	jle	.Ltmp1113 # Offset: 174
    000000b0: 	movl	0x8(%r8,%r10), %ecx
    000000b5: 	leal	0x1(%rax,%rcx), %eax
.Ltmp1113:
    000000b9: 	addl	%edx, %edx
    000000bb: 	cmpl	%r9d, %edx
    000000be: 	cmovgl	%r9d, %edx
    000000c2: 	cmpl	%esi, %edx
    000000c4: 	jle	.Ltmp1114 # Offset: 196
.Ltmp1123:
    000000ca: 	movl	%edx, %r11d
    000000cd: 	subl	%esi, %r11d
    000000d0: 	leal	-0x1(%r11), %ecx
    000000d4: 	cmpl	$0x2, %ecx
    000000d7: 	jbe	.Ltmp1115 # Offset: 215
    000000d9: 	movslq	%esi, %rcx
    000000dc: 	pxor	%xmm1, %xmm1
    000000e0: 	pcmpeqd	%xmm2, %xmm2
    000000e4: 	leaq	(%r8,%rcx,4), %rdi
    000000e8: 	movl	%r11d, %ecx
    000000eb: 	shrl	$0x2, %ecx
    000000ee: 	leal	-0x1(%rcx), %r10d
    000000f2: 	leaq	0x10(%rdi), %rcx
    000000f6: 	shlq	$0x4, %r10
    000000fa: 	addq	%rcx, %r10
    000000fd: 	jmp	.Ltmp1116 # Offset: 253
    000000ff: 	nop # Size: 1
.Ltmp1117:
    00000100: 	addq	$0x10, %rcx
.Ltmp1116:
    00000104: 	movdqu	(%rdi), %xmm0
    00000108: 	movq	%rcx, %rdi
    0000010b: 	paddd	%xmm2, %xmm0
    0000010f: 	paddd	%xmm0, %xmm1
    00000113: 	cmpq	%r10, %rcx
    00000116: 	jne	.Ltmp1117 # Offset: 278
    00000118: 	movdqa	%xmm1, %xmm0
    0000011c: 	psrldq	$0x8, %xmm0
    00000121: 	paddd	%xmm0, %xmm1
    00000125: 	movdqa	%xmm1, %xmm0
    00000129: 	psrldq	$0x4, %xmm0
    0000012e: 	paddd	%xmm0, %xmm1
    00000132: 	movd	%xmm1, %ecx
    00000136: 	addl	%ecx, %eax
    00000138: 	movl	%r11d, %ecx
    0000013b: 	andl	$-0x4, %ecx
    0000013e: 	addl	%ecx, %esi
    00000140: 	cmpl	%ecx, %r11d
    00000143: 	je	.Ltmp1118 # Offset: 323
.Ltmp1115:
    00000145: 	movslq	%esi, %rcx
    00000148: 	leaq	(,%rcx,4), %rdi
    00000150: 	movl	(%r8,%rcx,4), %ecx
    00000154: 	leal	-0x1(%rax,%rcx), %eax
    00000158: 	leal	0x1(%rsi), %ecx
    0000015b: 	cmpl	%edx, %ecx
    0000015d: 	jge	.Ltmp1118 # Offset: 349
    0000015f: 	movl	0x4(%r8,%rdi), %ecx
    00000164: 	addl	$0x2, %esi
    00000167: 	leal	-0x1(%rax,%rcx), %eax
    0000016b: 	cmpl	%esi, %edx
    0000016d: 	jle	.Ltmp1118 # Offset: 365
    0000016f: 	movl	0x8(%r8,%rdi), %ecx
    00000174: 	leal	-0x1(%rax,%rcx), %eax
.Ltmp1118:
    00000178: 	cmpl	%edx, %r9d
    0000017b: 	jle	.Ltmp1119 # Offset: 379
    00000181: 	movl	%r9d, %r10d
    00000184: 	subl	%edx, %r10d
    00000187: 	leal	-0x1(%r10), %ecx
    0000018b: 	cmpl	$0x2, %ecx
    0000018e: 	jbe	.Ltmp1120 # Offset: 398
    00000190: 	movslq	%edx, %rcx
    00000193: 	pxor	%xmm0, %xmm0
    00000197: 	leaq	(%r8,%rcx,4), %rsi
    0000019b: 	movl	%r10d, %ecx
    0000019e: 	shrl	$0x2, %ecx
    000001a1: 	leal	-0x1(%rcx), %edi
    000001a4: 	leaq	0x10(%rsi), %rcx
    000001a8: 	shlq	$0x4, %rdi
    000001ac: 	addq	%rcx, %rdi
    000001af: 	jmp	.Ltmp1121 # Offset: 431
    000001b1: 	nopl	(%rax) # Size: 7
.Ltmp1122:
    000001b8: 	addq	$0x10, %rcx
.Ltmp1121:
    000001bc: 	movdqu	(%rsi), %xmm1
    000001c0: 	movq	%rcx, %rsi
    000001c3: 	paddd	%xmm1, %xmm0
    000001c7: 	cmpq	%rcx, %rdi
    000001ca: 	jne	.Ltmp1122 # Offset: 458
    000001cc: 	movdqa	%xmm0, %xmm1
    000001d0: 	psrldq	$0x8, %xmm1
    000001d5: 	paddd	%xmm1, %xmm0
    000001d9: 	movdqa	%xmm0, %xmm1
    000001dd: 	psrldq	$0x4, %xmm1
    000001e2: 	paddd	%xmm1, %xmm0
    000001e6: 	movd	%xmm0, %ecx
    000001ea: 	addl	%ecx, %eax
    000001ec: 	movl	%r10d, %ecx
    000001ef: 	andl	$-0x4, %ecx
    000001f2: 	addl	%ecx, %edx
    000001f4: 	cmpl	%r10d, %ecx
    000001f7: 	je	.Ltmp1119 # Offset: 503
.Ltmp1120:
    000001f9: 	movslq	%edx, %rcx
    000001fc: 	leaq	(,%rcx,4), %rsi
    00000204: 	addl	(%r8,%rcx,4), %eax
    00000208: 	leal	0x1(%rdx), %ecx
    0000020b: 	cmpl	%ecx, %r9d
    0000020e: 	jle	.Ltmp1119 # Offset: 526
    00000210: 	addl	$0x2, %edx
    00000213: 	addl	0x4(%r8,%rsi), %eax
    00000218: 	cmpl	%r9d, %edx
    0000021b: 	jge	.Ltmp1119 # Offset: 539
    0000021d: 	addl	0x8(%r8,%rsi), %eax
.Ltmp1119:
    00000222: 	retq # Offset: 546
    00000223: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1110:
    00000228: 	addl	%edx, %edx
    0000022a: 	xorl	%esi, %esi
    0000022c: 	xorl	%eax, %eax
    0000022e: 	cmpl	%r9d, %edx
    00000231: 	cmovgl	%r9d, %edx
    00000235: 	cmpl	%esi, %edx
    00000237: 	jg	.Ltmp1123 # Offset: 567
    0000023d: 	nopl	(%rax) # Size: 3
.Ltmp1114:
    00000240: 	movl	%esi, %edx
    00000242: 	jmp	.Ltmp1118 # Offset: 578
.Ltmp1111:
    00000247: 	xorl	%ecx, %ecx
    00000249: 	xorl	%eax, %eax
    0000024b: 	jmp	.Ltmp1124 # Offset: 587
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_for_loop3_halfoptIiET_PKS0_iS0_"

Binary Function "_Z20test_while_loop3_optIiET_PKS0_iS0_" after disassembly {
  Number      : 157
  State       : disassembled
  Address     : 0xfc20
  Size        : 0x248
  MaxSize     : 0x250
  Offset      : 0xfc20
  Section     : .text
  Orc Section : .local.text._Z20test_while_loop3_optIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0156:
    00000000: 	endbr64
    00000004: 	leal	(%rdx,%rdx), %eax
    00000007: 	movq	%rdi, %r8
    0000000a: 	movl	%esi, %edi
    0000000c: 	cmpl	%esi, %eax
    0000000e: 	jle	.Ltmp1125 # Offset: 14
    00000014: 	cmpl	%esi, %edx
    00000016: 	cmovgl	%esi, %edx
    00000019: 	testl	%edx, %edx
    0000001b: 	jle	.Ltmp1126 # Offset: 27
    00000021: 	leal	-0x1(%rdx), %eax
    00000024: 	cmpl	$0x2, %eax
    00000027: 	jbe	.Ltmp1127 # Offset: 39
    0000002d: 	movl	%edx, %ecx
    0000002f: 	movdqa	DATAat0x388f0(%rip), %xmm2
    00000037: 	movq	%r8, %rax
    0000003a: 	pxor	%xmm1, %xmm1
    0000003e: 	shrl	$0x2, %ecx
    00000041: 	subl	$0x1, %ecx
    00000044: 	shlq	$0x4, %rcx
    00000048: 	leaq	0x10(%r8,%rcx), %rcx
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp1128:
    00000050: 	movdqu	(%rax), %xmm0
    00000054: 	addq	$0x10, %rax
    00000058: 	paddd	%xmm2, %xmm0
    0000005c: 	paddd	%xmm0, %xmm1
    00000060: 	cmpq	%rax, %rcx
    00000063: 	jne	.Ltmp1128 # Offset: 99
    00000065: 	movdqa	%xmm1, %xmm0
    00000069: 	movl	%edx, %ecx
    0000006b: 	psrldq	$0x8, %xmm0
    00000070: 	andl	$-0x4, %ecx
    00000073: 	paddd	%xmm0, %xmm1
    00000077: 	movdqa	%xmm1, %xmm0
    0000007b: 	psrldq	$0x4, %xmm0
    00000080: 	paddd	%xmm0, %xmm1
    00000084: 	movd	%xmm1, %eax
    00000088: 	testb	$0x3, %dl
    0000008b: 	je	.Ltmp1129 # Offset: 139
.Ltmp1139:
    0000008d: 	movslq	%ecx, %rsi
    00000090: 	leaq	(,%rsi,4), %r9
    00000098: 	movl	(%r8,%rsi,4), %esi
    0000009c: 	leal	0x1(%rax,%rsi), %eax
    000000a0: 	leal	0x1(%rcx), %esi
    000000a3: 	cmpl	%esi, %edx
    000000a5: 	jle	.Ltmp1129 # Offset: 165
    000000a7: 	movl	0x4(%r8,%r9), %esi
    000000ac: 	addl	$0x2, %ecx
    000000af: 	leal	0x1(%rax,%rsi), %eax
    000000b3: 	cmpl	%ecx, %edx
    000000b5: 	jle	.Ltmp1129 # Offset: 181
    000000b7: 	movl	0x8(%r8,%r9), %ecx
    000000bc: 	leal	0x1(%rax,%rcx), %eax
.Ltmp1129:
    000000c0: 	cmpl	%edx, %edi
    000000c2: 	jle	.Ltmp1130 # Offset: 194
    000000c8: 	movl	%edi, %r10d
    000000cb: 	subl	%edx, %r10d
    000000ce: 	leal	-0x1(%r10), %ecx
    000000d2: 	cmpl	$0x2, %ecx
    000000d5: 	jbe	.Ltmp1131 # Offset: 213
    000000d7: 	movslq	%edx, %rcx
    000000da: 	pxor	%xmm1, %xmm1
    000000de: 	pcmpeqd	%xmm2, %xmm2
    000000e2: 	leaq	(%r8,%rcx,4), %rsi
    000000e6: 	movl	%r10d, %ecx
    000000e9: 	shrl	$0x2, %ecx
    000000ec: 	leal	-0x1(%rcx), %r9d
    000000f0: 	leaq	0x10(%rsi), %rcx
    000000f4: 	shlq	$0x4, %r9
    000000f8: 	addq	%rcx, %r9
    000000fb: 	jmp	.Ltmp1132 # Offset: 251
    000000fd: 	nopl	(%rax) # Size: 3
.Ltmp1133:
    00000100: 	addq	$0x10, %rcx
.Ltmp1132:
    00000104: 	movdqu	(%rsi), %xmm0
    00000108: 	movq	%rcx, %rsi
    0000010b: 	paddd	%xmm2, %xmm0
    0000010f: 	paddd	%xmm0, %xmm1
    00000113: 	cmpq	%r9, %rcx
    00000116: 	jne	.Ltmp1133 # Offset: 278
    00000118: 	movdqa	%xmm1, %xmm0
    0000011c: 	psrldq	$0x8, %xmm0
    00000121: 	paddd	%xmm0, %xmm1
    00000125: 	movdqa	%xmm1, %xmm0
    00000129: 	psrldq	$0x4, %xmm0
    0000012e: 	paddd	%xmm0, %xmm1
    00000132: 	movd	%xmm1, %ecx
    00000136: 	addl	%ecx, %eax
    00000138: 	movl	%r10d, %ecx
    0000013b: 	andl	$-0x4, %ecx
    0000013e: 	addl	%ecx, %edx
    00000140: 	cmpl	%ecx, %r10d
    00000143: 	je	.Ltmp1130 # Offset: 323
.Ltmp1131:
    00000149: 	movslq	%edx, %rcx
    0000014c: 	leaq	(,%rcx,4), %rsi
    00000154: 	movl	(%r8,%rcx,4), %ecx
    00000158: 	leal	-0x1(%rax,%rcx), %eax
    0000015c: 	leal	0x1(%rdx), %ecx
    0000015f: 	cmpl	%ecx, %edi
    00000161: 	jle	.Ltmp1130 # Offset: 353
    00000167: 	movl	0x4(%r8,%rsi), %ecx
    0000016c: 	addl	$0x2, %edx
    0000016f: 	leal	-0x1(%rax,%rcx), %eax
    00000173: 	cmpl	%edx, %edi
    00000175: 	jle	.Ltmp1130 # Offset: 373
    0000017b: 	movl	0x8(%r8,%rsi), %edx
    00000180: 	leal	-0x1(%rax,%rdx), %eax
    00000184: 	retq # Offset: 388
    00000185: 	nopl	(%rax) # Size: 3
.Ltmp1125:
    00000188: 	testl	%esi, %esi
    0000018a: 	jle	.Ltmp1134 # Offset: 394
    00000190: 	leal	-0x1(%rsi), %eax
    00000193: 	cmpl	$0x2, %eax
    00000196: 	jbe	.Ltmp1135 # Offset: 406
    0000019c: 	movl	%esi, %edx
    0000019e: 	movq	%r8, %rax
    000001a1: 	pxor	%xmm0, %xmm0
    000001a5: 	shrl	$0x2, %edx
    000001a8: 	subl	$0x1, %edx
    000001ab: 	shlq	$0x4, %rdx
    000001af: 	leaq	0x10(%r8,%rdx), %rdx
    000001b4: 	nopl	(%rax) # Size: 4
.Ltmp1136:
    000001b8: 	movdqu	(%rax), %xmm3
    000001bc: 	addq	$0x10, %rax
    000001c0: 	paddd	%xmm3, %xmm0
    000001c4: 	cmpq	%rax, %rdx
    000001c7: 	jne	.Ltmp1136 # Offset: 455
    000001c9: 	movdqa	%xmm0, %xmm1
    000001cd: 	movl	%edi, %edx
    000001cf: 	psrldq	$0x8, %xmm1
    000001d4: 	andl	$-0x4, %edx
    000001d7: 	paddd	%xmm1, %xmm0
    000001db: 	movdqa	%xmm0, %xmm1
    000001df: 	psrldq	$0x4, %xmm1
    000001e4: 	paddd	%xmm1, %xmm0
    000001e8: 	movd	%xmm0, %eax
    000001ec: 	testb	$0x3, %dil
    000001f0: 	je	.Ltmp1137 # Offset: 496
.Ltmp1138:
    000001f2: 	movslq	%edx, %rcx
    000001f5: 	leaq	(,%rcx,4), %rsi
    000001fd: 	addl	(%r8,%rcx,4), %eax
    00000201: 	leal	0x1(%rdx), %ecx
    00000204: 	cmpl	%ecx, %edi
    00000206: 	jle	.Ltmp1130 # Offset: 518
    00000208: 	addl	$0x2, %edx
    0000020b: 	addl	0x4(%r8,%rsi), %eax
    00000210: 	cmpl	%edx, %edi
    00000212: 	jle	.Ltmp1130 # Offset: 530
    00000214: 	addl	0x8(%r8,%rsi), %eax
    00000219: 	retq # Offset: 537
    0000021a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1134:
    00000220: 	xorl	%eax, %eax
.Ltmp1130:
    00000222: 	retq # Offset: 546
    00000223: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1126:
    00000228: 	xorl	%edx, %edx
    0000022a: 	xorl	%eax, %eax
    0000022c: 	jmp	.Ltmp1129 # Offset: 556
    00000231: 	nopl	(%rax) # Size: 7
.Ltmp1137:
    00000238: 	retq # Offset: 568
.Ltmp1135:
    00000239: 	xorl	%edx, %edx
    0000023b: 	xorl	%eax, %eax
    0000023d: 	jmp	.Ltmp1138 # Offset: 573
.Ltmp1127:
    0000023f: 	xorl	%ecx, %ecx
    00000241: 	xorl	%eax, %eax
    00000243: 	jmp	.Ltmp1139 # Offset: 579
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_while_loop3_optIiET_PKS0_iS0_"

Binary Function "_Z24test_while_loop3_halfoptIiET_PKS0_iS0_" after disassembly {
  Number      : 158
  State       : disassembled
  Address     : 0xfe70
  Size        : 0x250
  MaxSize     : 0x250
  Offset      : 0xfe70
  Section     : .text
  Orc Section : .local.text._Z24test_while_loop3_halfoptIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0157:
    00000000: 	endbr64
    00000004: 	cmpl	%esi, %edx
    00000006: 	movl	%esi, %r9d
    00000009: 	movq	%rdi, %r8
    0000000c: 	cmovlel	%edx, %esi
    0000000f: 	testl	%esi, %esi
    00000011: 	jle	.Ltmp1140 # Offset: 17
    00000017: 	leal	-0x1(%rsi), %eax
    0000001a: 	cmpl	$0x2, %eax
    0000001d: 	jbe	.Ltmp1141 # Offset: 29
    00000023: 	movl	%esi, %ecx
    00000025: 	movdqa	DATAat0x388f0(%rip), %xmm2
    0000002d: 	movq	%rdi, %rax
    00000030: 	pxor	%xmm1, %xmm1
    00000034: 	shrl	$0x2, %ecx
    00000037: 	subl	$0x1, %ecx
    0000003a: 	shlq	$0x4, %rcx
    0000003e: 	leaq	0x10(%rdi,%rcx), %rcx
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1142:
    00000048: 	movdqu	(%rax), %xmm0
    0000004c: 	addq	$0x10, %rax
    00000050: 	paddd	%xmm2, %xmm0
    00000054: 	paddd	%xmm0, %xmm1
    00000058: 	cmpq	%rax, %rcx
    0000005b: 	jne	.Ltmp1142 # Offset: 91
    0000005d: 	movdqa	%xmm1, %xmm0
    00000061: 	movl	%esi, %ecx
    00000063: 	psrldq	$0x8, %xmm0
    00000068: 	andl	$-0x4, %ecx
    0000006b: 	paddd	%xmm0, %xmm1
    0000006f: 	movdqa	%xmm1, %xmm0
    00000073: 	psrldq	$0x4, %xmm0
    00000078: 	paddd	%xmm0, %xmm1
    0000007c: 	movd	%xmm1, %eax
    00000080: 	testb	$0x3, %sil
    00000084: 	je	.Ltmp1143 # Offset: 132
.Ltmp1154:
    00000086: 	movslq	%ecx, %rdi
    00000089: 	leaq	(,%rdi,4), %r10
    00000091: 	movl	(%r8,%rdi,4), %edi
    00000095: 	leal	0x1(%rax,%rdi), %eax
    00000099: 	leal	0x1(%rcx), %edi
    0000009c: 	cmpl	%edi, %esi
    0000009e: 	jle	.Ltmp1143 # Offset: 158
    000000a0: 	movl	0x4(%r8,%r10), %edi
    000000a5: 	addl	$0x2, %ecx
    000000a8: 	leal	0x1(%rax,%rdi), %eax
    000000ac: 	cmpl	%ecx, %esi
    000000ae: 	jle	.Ltmp1143 # Offset: 174
    000000b0: 	movl	0x8(%r8,%r10), %ecx
    000000b5: 	leal	0x1(%rax,%rcx), %eax
.Ltmp1143:
    000000b9: 	addl	%edx, %edx
    000000bb: 	cmpl	%r9d, %edx
    000000be: 	cmovgl	%r9d, %edx
    000000c2: 	cmpl	%esi, %edx
    000000c4: 	jle	.Ltmp1144 # Offset: 196
.Ltmp1153:
    000000ca: 	movl	%edx, %r11d
    000000cd: 	subl	%esi, %r11d
    000000d0: 	leal	-0x1(%r11), %ecx
    000000d4: 	cmpl	$0x2, %ecx
    000000d7: 	jbe	.Ltmp1145 # Offset: 215
    000000d9: 	movslq	%esi, %rcx
    000000dc: 	pxor	%xmm1, %xmm1
    000000e0: 	pcmpeqd	%xmm2, %xmm2
    000000e4: 	leaq	(%r8,%rcx,4), %rdi
    000000e8: 	movl	%r11d, %ecx
    000000eb: 	shrl	$0x2, %ecx
    000000ee: 	leal	-0x1(%rcx), %r10d
    000000f2: 	leaq	0x10(%rdi), %rcx
    000000f6: 	shlq	$0x4, %r10
    000000fa: 	addq	%rcx, %r10
    000000fd: 	jmp	.Ltmp1146 # Offset: 253
    000000ff: 	nop # Size: 1
.Ltmp1147:
    00000100: 	addq	$0x10, %rcx
.Ltmp1146:
    00000104: 	movdqu	(%rdi), %xmm0
    00000108: 	movq	%rcx, %rdi
    0000010b: 	paddd	%xmm2, %xmm0
    0000010f: 	paddd	%xmm0, %xmm1
    00000113: 	cmpq	%r10, %rcx
    00000116: 	jne	.Ltmp1147 # Offset: 278
    00000118: 	movdqa	%xmm1, %xmm0
    0000011c: 	psrldq	$0x8, %xmm0
    00000121: 	paddd	%xmm0, %xmm1
    00000125: 	movdqa	%xmm1, %xmm0
    00000129: 	psrldq	$0x4, %xmm0
    0000012e: 	paddd	%xmm0, %xmm1
    00000132: 	movd	%xmm1, %ecx
    00000136: 	addl	%ecx, %eax
    00000138: 	movl	%r11d, %ecx
    0000013b: 	andl	$-0x4, %ecx
    0000013e: 	addl	%ecx, %esi
    00000140: 	cmpl	%ecx, %r11d
    00000143: 	je	.Ltmp1148 # Offset: 323
.Ltmp1145:
    00000145: 	movslq	%esi, %rcx
    00000148: 	leaq	(,%rcx,4), %rdi
    00000150: 	movl	(%r8,%rcx,4), %ecx
    00000154: 	leal	-0x1(%rax,%rcx), %eax
    00000158: 	leal	0x1(%rsi), %ecx
    0000015b: 	cmpl	%edx, %ecx
    0000015d: 	jge	.Ltmp1148 # Offset: 349
    0000015f: 	movl	0x4(%r8,%rdi), %ecx
    00000164: 	addl	$0x2, %esi
    00000167: 	leal	-0x1(%rax,%rcx), %eax
    0000016b: 	cmpl	%esi, %edx
    0000016d: 	jle	.Ltmp1148 # Offset: 365
    0000016f: 	movl	0x8(%r8,%rdi), %ecx
    00000174: 	leal	-0x1(%rax,%rcx), %eax
.Ltmp1148:
    00000178: 	cmpl	%edx, %r9d
    0000017b: 	jle	.Ltmp1149 # Offset: 379
    00000181: 	movl	%r9d, %r10d
    00000184: 	subl	%edx, %r10d
    00000187: 	leal	-0x1(%r10), %ecx
    0000018b: 	cmpl	$0x2, %ecx
    0000018e: 	jbe	.Ltmp1150 # Offset: 398
    00000190: 	movslq	%edx, %rcx
    00000193: 	pxor	%xmm0, %xmm0
    00000197: 	leaq	(%r8,%rcx,4), %rsi
    0000019b: 	movl	%r10d, %ecx
    0000019e: 	shrl	$0x2, %ecx
    000001a1: 	leal	-0x1(%rcx), %edi
    000001a4: 	leaq	0x10(%rsi), %rcx
    000001a8: 	shlq	$0x4, %rdi
    000001ac: 	addq	%rcx, %rdi
    000001af: 	jmp	.Ltmp1151 # Offset: 431
    000001b1: 	nopl	(%rax) # Size: 7
.Ltmp1152:
    000001b8: 	addq	$0x10, %rcx
.Ltmp1151:
    000001bc: 	movdqu	(%rsi), %xmm1
    000001c0: 	movq	%rcx, %rsi
    000001c3: 	paddd	%xmm1, %xmm0
    000001c7: 	cmpq	%rcx, %rdi
    000001ca: 	jne	.Ltmp1152 # Offset: 458
    000001cc: 	movdqa	%xmm0, %xmm1
    000001d0: 	psrldq	$0x8, %xmm1
    000001d5: 	paddd	%xmm1, %xmm0
    000001d9: 	movdqa	%xmm0, %xmm1
    000001dd: 	psrldq	$0x4, %xmm1
    000001e2: 	paddd	%xmm1, %xmm0
    000001e6: 	movd	%xmm0, %ecx
    000001ea: 	addl	%ecx, %eax
    000001ec: 	movl	%r10d, %ecx
    000001ef: 	andl	$-0x4, %ecx
    000001f2: 	addl	%ecx, %edx
    000001f4: 	cmpl	%r10d, %ecx
    000001f7: 	je	.Ltmp1149 # Offset: 503
.Ltmp1150:
    000001f9: 	movslq	%edx, %rcx
    000001fc: 	leaq	(,%rcx,4), %rsi
    00000204: 	addl	(%r8,%rcx,4), %eax
    00000208: 	leal	0x1(%rdx), %ecx
    0000020b: 	cmpl	%ecx, %r9d
    0000020e: 	jle	.Ltmp1149 # Offset: 526
    00000210: 	addl	$0x2, %edx
    00000213: 	addl	0x4(%r8,%rsi), %eax
    00000218: 	cmpl	%r9d, %edx
    0000021b: 	jge	.Ltmp1149 # Offset: 539
    0000021d: 	addl	0x8(%r8,%rsi), %eax
.Ltmp1149:
    00000222: 	retq # Offset: 546
    00000223: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1140:
    00000228: 	addl	%edx, %edx
    0000022a: 	xorl	%esi, %esi
    0000022c: 	xorl	%eax, %eax
    0000022e: 	cmpl	%r9d, %edx
    00000231: 	cmovgl	%r9d, %edx
    00000235: 	cmpl	%esi, %edx
    00000237: 	jg	.Ltmp1153 # Offset: 567
    0000023d: 	nopl	(%rax) # Size: 3
.Ltmp1144:
    00000240: 	movl	%esi, %edx
    00000242: 	jmp	.Ltmp1148 # Offset: 578
.Ltmp1141:
    00000247: 	xorl	%ecx, %ecx
    00000249: 	xorl	%eax, %eax
    0000024b: 	jmp	.Ltmp1154 # Offset: 587
DWARF CFI Instructions:
    <empty>
End of Function "_Z24test_while_loop3_halfoptIiET_PKS0_iS0_"

Binary Function "_Z17test_do_loop3_optIiET_PKS0_iS0_" after disassembly {
  Number      : 159
  State       : disassembled
  Address     : 0x100c0
  Size        : 0x32f
  MaxSize     : 0x330
  Offset      : 0x100c0
  Section     : .text
  Orc Section : .local.text._Z17test_do_loop3_optIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0158:
    00000000: 	endbr64
    00000004: 	leal	(%rdx,%rdx), %r10d
    00000008: 	movl	%esi, %r8d
    0000000b: 	cmpl	%esi, %r10d
    0000000e: 	jg	.Ltmp1155 # Offset: 14
    00000014: 	testl	%esi, %esi
    00000016: 	movl	$0x1, %ecx
    0000001b: 	cmovgl	%esi, %ecx
    0000001e: 	cmpl	$0x3, %esi
    00000021: 	jle	.Ltmp1156 # Offset: 33
    00000027: 	movl	%ecx, %edx
    00000029: 	pxor	%xmm0, %xmm0
    0000002d: 	movq	%rdi, %rax
    00000030: 	shrl	$0x2, %edx
    00000033: 	subl	$0x1, %edx
    00000036: 	shlq	$0x4, %rdx
    0000003a: 	leaq	0x10(%rdi,%rdx), %rdx
    0000003f: 	nop # Size: 1
.Ltmp1157:
    00000040: 	movdqu	(%rax), %xmm3
    00000044: 	addq	$0x10, %rax
    00000048: 	paddd	%xmm3, %xmm0
    0000004c: 	cmpq	%rax, %rdx
    0000004f: 	jne	.Ltmp1157 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%ecx, %edx
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x4, %edx
    0000005f: 	andl	$0x3, %ecx
    00000062: 	paddd	%xmm1, %xmm0
    00000066: 	movdqa	%xmm0, %xmm1
    0000006a: 	psrldq	$0x4, %xmm1
    0000006f: 	paddd	%xmm1, %xmm0
    00000073: 	movd	%xmm0, %eax
    00000077: 	je	.Ltmp1158 # Offset: 119
.Ltmp1171:
    0000007d: 	movslq	%edx, %rcx
    00000080: 	leaq	(,%rcx,4), %rsi
    00000088: 	addl	(%rdi,%rcx,4), %eax
    0000008b: 	leal	0x1(%rdx), %ecx
    0000008e: 	cmpl	%ecx, %r8d
    00000091: 	jle	.Ltmp1159 # Offset: 145
    00000097: 	addl	$0x2, %edx
    0000009a: 	addl	0x4(%rdi,%rsi), %eax
    0000009e: 	cmpl	%edx, %r8d
    000000a1: 	jle	.Ltmp1159 # Offset: 161
    000000a7: 	addl	0x8(%rdi,%rsi), %eax
    000000ab: 	retq # Offset: 171
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp1155:
    000000b0: 	testl	%edx, %edx
    000000b2: 	movl	$0x1, %esi
    000000b7: 	pushq	%rbx
    000000b8: 	cmovgl	%edx, %esi
    000000bb: 	cmpl	$0x3, %edx
    000000be: 	jle	.Ltmp1160 # Offset: 190
    000000c4: 	movl	%esi, %ecx
    000000c6: 	movdqa	DATAat0x388f0(%rip), %xmm2
    000000ce: 	pxor	%xmm1, %xmm1
    000000d2: 	movq	%rdi, %rax
    000000d5: 	shrl	$0x2, %ecx
    000000d8: 	subl	$0x1, %ecx
    000000db: 	shlq	$0x4, %rcx
    000000df: 	leaq	0x10(%rdi,%rcx), %rcx
    000000e4: 	nopl	(%rax) # Size: 4
.Ltmp1161:
    000000e8: 	movdqu	(%rax), %xmm0
    000000ec: 	addq	$0x10, %rax
    000000f0: 	paddd	%xmm2, %xmm0
    000000f4: 	paddd	%xmm0, %xmm1
    000000f8: 	cmpq	%rcx, %rax
    000000fb: 	jne	.Ltmp1161 # Offset: 251
    000000fd: 	movdqa	%xmm1, %xmm0
    00000101: 	movl	%esi, %ecx
    00000103: 	psrldq	$0x8, %xmm0
    00000108: 	andl	$-0x4, %ecx
    0000010b: 	andl	$0x3, %esi
    0000010e: 	paddd	%xmm0, %xmm1
    00000112: 	movdqa	%xmm1, %xmm0
    00000116: 	psrldq	$0x4, %xmm0
    0000011b: 	paddd	%xmm0, %xmm1
    0000011f: 	movd	%xmm1, %eax
    00000123: 	je	.Ltmp1162 # Offset: 291
.Ltmp1172:
    00000125: 	movslq	%ecx, %rsi
    00000128: 	leaq	(,%rsi,4), %r9
    00000130: 	movl	(%rdi,%rsi,4), %esi
    00000133: 	leal	0x1(%rax,%rsi), %eax
    00000137: 	leal	0x1(%rcx), %esi
    0000013a: 	cmpl	%esi, %edx
    0000013c: 	jle	.Ltmp1162 # Offset: 316
    0000013e: 	movl	0x4(%rdi,%r9), %esi
    00000143: 	addl	$0x2, %ecx
    00000146: 	leal	0x1(%rax,%rsi), %eax
    0000014a: 	cmpl	%ecx, %edx
    0000014c: 	jle	.Ltmp1162 # Offset: 332
    0000014e: 	movl	0x8(%rdi,%r9), %ecx
    00000153: 	leal	0x1(%rax,%rcx), %eax
.Ltmp1162:
    00000157: 	testl	%edx, %edx
    00000159: 	movl	$0x1, %ecx
    0000015e: 	movl	%r10d, %esi
    00000161: 	movl	$0x1, %ebx
    00000166: 	cmovgl	%edx, %ecx
    00000169: 	subl	%ecx, %esi
    0000016b: 	cmpl	%ecx, %r10d
    0000016e: 	cmovgl	%esi, %ebx
    00000171: 	leal	-0x1(%rsi), %r11d
    00000175: 	jle	.Ltmp1163 # Offset: 373
    0000017b: 	cmpl	$0x2, %r11d
    0000017f: 	jbe	.Ltmp1163 # Offset: 383
    00000185: 	movslq	%ecx, %rdx
    00000188: 	pxor	%xmm1, %xmm1
    0000018c: 	pcmpeqd	%xmm2, %xmm2
    00000190: 	leaq	(%rdi,%rdx,4), %rsi
    00000194: 	movl	%ebx, %edx
    00000196: 	shrl	$0x2, %edx
    00000199: 	leal	-0x1(%rdx), %r9d
    0000019d: 	leaq	0x10(%rsi), %rdx
    000001a1: 	shlq	$0x4, %r9
    000001a5: 	addq	%rdx, %r9
    000001a8: 	jmp	.Ltmp1164 # Offset: 424
    000001aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1165:
    000001b0: 	addq	$0x10, %rdx
.Ltmp1164:
    000001b4: 	movdqu	(%rsi), %xmm0
    000001b8: 	movq	%rdx, %rsi
    000001bb: 	paddd	%xmm2, %xmm0
    000001bf: 	paddd	%xmm0, %xmm1
    000001c3: 	cmpq	%rdx, %r9
    000001c6: 	jne	.Ltmp1165 # Offset: 454
    000001c8: 	movdqa	%xmm1, %xmm0
    000001cc: 	movl	%ebx, %esi
    000001ce: 	psrldq	$0x8, %xmm0
    000001d3: 	andl	$-0x4, %esi
    000001d6: 	paddd	%xmm0, %xmm1
    000001da: 	movdqa	%xmm1, %xmm0
    000001de: 	psrldq	$0x4, %xmm0
    000001e3: 	paddd	%xmm0, %xmm1
    000001e7: 	movd	%xmm1, %edx
    000001eb: 	addl	%edx, %eax
    000001ed: 	leal	(%rsi,%rcx), %edx
    000001f0: 	cmpl	%esi, %ebx
    000001f2: 	je	.Ltmp1166 # Offset: 498
.Ltmp1173:
    000001f4: 	movslq	%edx, %rsi
    000001f7: 	leaq	(,%rsi,4), %r9
    000001ff: 	movl	(%rdi,%rsi,4), %esi
    00000202: 	leal	-0x1(%rax,%rsi), %eax
    00000206: 	leal	0x1(%rdx), %esi
    00000209: 	cmpl	%esi, %r10d
    0000020c: 	jle	.Ltmp1166 # Offset: 524
    0000020e: 	movl	0x4(%rdi,%r9), %esi
    00000213: 	addl	$0x2, %edx
    00000216: 	leal	-0x1(%rax,%rsi), %eax
    0000021a: 	cmpl	%edx, %r10d
    0000021d: 	jle	.Ltmp1166 # Offset: 541
    0000021f: 	movl	0x8(%rdi,%r9), %edx
    00000224: 	leal	-0x1(%rax,%rdx), %eax
.Ltmp1166:
    00000228: 	xorl	%edx, %edx
    0000022a: 	cmpl	%ecx, %r10d
    0000022d: 	movl	$0x1, %r10d
    00000233: 	movl	%edx, %esi
    00000235: 	movl	%r8d, %edx
    00000238: 	cmovgl	%r11d, %esi
    0000023c: 	leal	0x1(%rcx,%rsi), %r9d
    00000241: 	subl	%r9d, %edx
    00000244: 	cmpl	%r9d, %r8d
    00000247: 	cmovgl	%edx, %r10d
    0000024b: 	subl	$0x1, %edx
    0000024e: 	cmpl	$0x2, %edx
    00000251: 	jbe	.Ltmp1167 # Offset: 593
    00000253: 	cmpl	%r9d, %r8d
    00000256: 	jle	.Ltmp1167 # Offset: 598
    00000258: 	movslq	%ecx, %rdx
    0000025b: 	movslq	%esi, %rsi
    0000025e: 	pxor	%xmm0, %xmm0
    00000262: 	leaq	0x1(%rdx,%rsi), %rdx
    00000267: 	leaq	(%rdi,%rdx,4), %rcx
    0000026b: 	movl	%r10d, %edx
    0000026e: 	shrl	$0x2, %edx
    00000271: 	leal	-0x1(%rdx), %esi
    00000274: 	leaq	0x10(%rcx), %rdx
    00000278: 	shlq	$0x4, %rsi
    0000027c: 	addq	%rdx, %rsi
    0000027f: 	jmp	.Ltmp1168 # Offset: 639
    00000281: 	nopl	(%rax) # Size: 7
.Ltmp1169:
    00000288: 	addq	$0x10, %rdx
.Ltmp1168:
    0000028c: 	movdqu	(%rcx), %xmm1
    00000290: 	movq	%rdx, %rcx
    00000293: 	paddd	%xmm1, %xmm0
    00000297: 	cmpq	%rsi, %rdx
    0000029a: 	jne	.Ltmp1169 # Offset: 666
    0000029c: 	movdqa	%xmm0, %xmm1
    000002a0: 	psrldq	$0x8, %xmm1
    000002a5: 	paddd	%xmm1, %xmm0
    000002a9: 	movdqa	%xmm0, %xmm1
    000002ad: 	psrldq	$0x4, %xmm1
    000002b2: 	paddd	%xmm1, %xmm0
    000002b6: 	movd	%xmm0, %edx
    000002ba: 	addl	%edx, %eax
    000002bc: 	movl	%r10d, %edx
    000002bf: 	andl	$-0x4, %edx
    000002c2: 	addl	%edx, %r9d
    000002c5: 	cmpl	%edx, %r10d
    000002c8: 	je	.Ltmp1170 # Offset: 712
.Ltmp1167:
    000002ca: 	movslq	%r9d, %rdx
    000002cd: 	leaq	(,%rdx,4), %rcx
    000002d5: 	addl	(%rdi,%rdx,4), %eax
    000002d8: 	leal	0x1(%r9), %edx
    000002dc: 	cmpl	%r8d, %edx
    000002df: 	jge	.Ltmp1170 # Offset: 735
    000002e1: 	leal	0x2(%r9), %edx
    000002e5: 	addl	0x4(%rdi,%rcx), %eax
    000002e9: 	cmpl	%r8d, %edx
    000002ec: 	jge	.Ltmp1170 # Offset: 748
    000002ee: 	addl	0x8(%rdi,%rcx), %eax
.Ltmp1170:
    000002f2: 	popq	%rbx
    000002f3: 	retq # Offset: 755
    000002f4: 	nopl	(%rax) # Size: 4
.Ltmp1159:
    000002f8: 	retq # Offset: 760
    000002f9: 	nopl	(%rax) # Size: 7
.Ltmp1156:
    00000300: 	xorl	%edx, %edx
    00000302: 	xorl	%eax, %eax
    00000304: 	jmp	.Ltmp1171 # Offset: 772
    00000309: 	nopl	(%rax) # Size: 7
.Ltmp1160:
    00000310: 	xorl	%ecx, %ecx
    00000312: 	xorl	%eax, %eax
    00000314: 	jmp	.Ltmp1172 # Offset: 788
    00000319: 	nopl	(%rax) # Size: 7
.Ltmp1158:
    00000320: 	retq # Offset: 800
    00000321: 	nopl	(%rax) # Size: 7
.Ltmp1163:
    00000328: 	movl	%ecx, %edx
    0000032a: 	jmp	.Ltmp1173 # Offset: 810
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_do_loop3_optIiET_PKS0_iS0_"

Binary Function "_Z19test_goto_loop3_optIiET_PKS0_iS0_" after disassembly {
  Number      : 160
  State       : disassembled
  Address     : 0x103f0
  Size        : 0x1d7
  MaxSize     : 0x1e0
  Offset      : 0x103f0
  Section     : .text
  Orc Section : .local.text._Z19test_goto_loop3_optIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0159:
    00000000: 	endbr64
    00000004: 	leal	(%rdx,%rdx), %r8d
    00000008: 	movl	%esi, %ecx
    0000000a: 	xorl	%eax, %eax
    0000000c: 	cmpl	%esi, %r8d
    0000000f: 	jg	.Ltmp1174 # Offset: 15
    00000015: 	testl	%esi, %esi
    00000017: 	jle	.Ltmp1175 # Offset: 23
    0000001d: 	leal	-0x1(%rsi), %edx
    00000020: 	cmpl	$0x2, %edx
    00000023: 	jbe	.Ltmp1176 # Offset: 35
    00000029: 	movl	%esi, %edx
    0000002b: 	movq	%rdi, %rax
    0000002e: 	pxor	%xmm0, %xmm0
    00000032: 	shrl	$0x2, %edx
    00000035: 	subl	$0x1, %edx
    00000038: 	shlq	$0x4, %rdx
    0000003c: 	leaq	0x10(%rdi,%rdx), %rdx
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp1177:
    00000048: 	movdqu	(%rax), %xmm3
    0000004c: 	addq	$0x10, %rax
    00000050: 	paddd	%xmm3, %xmm0
    00000054: 	cmpq	%rax, %rdx
    00000057: 	jne	.Ltmp1177 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	movl	%ecx, %edx
    0000005f: 	psrldq	$0x8, %xmm1
    00000064: 	andl	$-0x4, %edx
    00000067: 	paddd	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	psrldq	$0x4, %xmm1
    00000074: 	paddd	%xmm1, %xmm0
    00000078: 	movd	%xmm0, %eax
    0000007c: 	testb	$0x3, %cl
    0000007f: 	je	.Ltmp1178 # Offset: 127
.Ltmp1185:
    00000085: 	movslq	%edx, %rsi
    00000088: 	leaq	(,%rsi,4), %r8
    00000090: 	addl	(%rdi,%rsi,4), %eax
    00000093: 	leal	0x1(%rdx), %esi
    00000096: 	cmpl	%esi, %ecx
    00000098: 	jle	.Ltmp1175 # Offset: 152
    0000009e: 	addl	$0x2, %edx
    000000a1: 	addl	0x4(%rdi,%r8), %eax
    000000a6: 	cmpl	%edx, %ecx
    000000a8: 	jle	.Ltmp1175 # Offset: 168
    000000ae: 	addl	0x8(%rdi,%r8), %eax
    000000b3: 	retq # Offset: 179
    000000b4: 	nopl	(%rax) # Size: 4
.Ltmp1174:
    000000b8: 	testl	%esi, %esi
    000000ba: 	jle	.Ltmp1175 # Offset: 186
    000000c0: 	cmpl	%esi, %edx
    000000c2: 	movl	$0x1, %r9d
    000000c8: 	cmovgl	%esi, %edx
    000000cb: 	testl	%edx, %edx
    000000cd: 	cmovgl	%edx, %r9d
    000000d1: 	cmpl	$0x3, %edx
    000000d4: 	jle	.Ltmp1179 # Offset: 212
    000000da: 	movl	%r9d, %esi
    000000dd: 	movdqa	DATAat0x388f0(%rip), %xmm2
    000000e5: 	pxor	%xmm1, %xmm1
    000000e9: 	movq	%rdi, %rax
    000000ec: 	shrl	$0x2, %esi
    000000ef: 	subl	$0x1, %esi
    000000f2: 	shlq	$0x4, %rsi
    000000f6: 	leaq	0x10(%rdi,%rsi), %rsi
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1180:
    00000100: 	movdqu	(%rax), %xmm0
    00000104: 	addq	$0x10, %rax
    00000108: 	paddd	%xmm2, %xmm0
    0000010c: 	paddd	%xmm0, %xmm1
    00000110: 	cmpq	%rsi, %rax
    00000113: 	jne	.Ltmp1180 # Offset: 275
    00000115: 	movdqa	%xmm1, %xmm0
    00000119: 	movl	%r9d, %esi
    0000011c: 	psrldq	$0x8, %xmm0
    00000121: 	andl	$-0x4, %esi
    00000124: 	andl	$0x3, %r9d
    00000128: 	paddd	%xmm0, %xmm1
    0000012c: 	movdqa	%xmm1, %xmm0
    00000130: 	psrldq	$0x4, %xmm0
    00000135: 	paddd	%xmm0, %xmm1
    00000139: 	movd	%xmm1, %eax
    0000013d: 	je	.Ltmp1181 # Offset: 317
.Ltmp1184:
    0000013f: 	movslq	%esi, %r9
    00000142: 	leaq	(,%r9,4), %r10
    0000014a: 	movl	(%rdi,%r9,4), %r9d
    0000014e: 	leal	0x1(%rax,%r9), %eax
    00000153: 	leal	0x1(%rsi), %r9d
    00000157: 	cmpl	%r9d, %edx
    0000015a: 	jle	.Ltmp1181 # Offset: 346
    0000015c: 	movl	0x4(%rdi,%r10), %r9d
    00000161: 	addl	$0x2, %esi
    00000164: 	leal	0x1(%rax,%r9), %eax
    00000169: 	cmpl	%esi, %edx
    0000016b: 	jle	.Ltmp1181 # Offset: 363
    0000016d: 	movl	0x8(%rdi,%r10), %esi
    00000172: 	leal	0x1(%rax,%rsi), %eax
.Ltmp1181:
    00000176: 	testl	%edx, %edx
    00000178: 	movl	$0x1, %esi
    0000017d: 	cmovgl	%edx, %esi
    00000180: 	cmpl	%esi, %ecx
    00000182: 	jle	.Ltmp1175 # Offset: 386
    00000184: 	subl	$0x1, %ecx
    00000187: 	leal	0x1(%rsi), %edx
    0000018a: 	subl	%esi, %ecx
    0000018c: 	movslq	%esi, %rsi
    0000018f: 	movslq	%edx, %rdx
    00000192: 	leaq	0x2(%rcx,%rsi), %rsi
    00000197: 	jmp	.Ltmp1182 # Offset: 407
    00000199: 	nopl	(%rax) # Size: 7
.Ltmp1183:
    000001a0: 	addq	$0x1, %rdx
    000001a4: 	cmpq	%rsi, %rdx
    000001a7: 	je	.Ltmp1175 # Offset: 423
.Ltmp1182:
    000001a9: 	movl	-0x4(%rdi,%rdx,4), %ecx
    000001ad: 	leal	-0x1(%rax,%rcx), %eax
    000001b1: 	cmpl	%edx, %r8d
    000001b4: 	jg	.Ltmp1183 # Offset: 436
.Ltmp1175:
    000001b6: 	retq # Offset: 438
    000001b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1178:
    000001c0: 	retq # Offset: 448
    000001c1: 	nopl	(%rax) # Size: 7
.Ltmp1179:
    000001c8: 	xorl	%esi, %esi
    000001ca: 	jmp	.Ltmp1184 # Offset: 458
    000001cf: 	nop # Size: 1
.Ltmp1176:
    000001d0: 	xorl	%edx, %edx
    000001d2: 	jmp	.Ltmp1185 # Offset: 466
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_goto_loop3_optIiET_PKS0_iS0_"

Binary Function "_Z23test_goto_loop3_halfoptIiET_PKS0_iS0_" after disassembly {
  Number      : 161
  State       : disassembled
  Address     : 0x105d0
  Size        : 0x1b7
  MaxSize     : 0x1c0
  Offset      : 0x105d0
  Section     : .text
  Orc Section : .local.text._Z23test_goto_loop3_halfoptIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0160:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	xorl	%eax, %eax
    00000009: 	movl	%edx, %esi
    0000000b: 	testl	%r8d, %r8d
    0000000e: 	jle	.Ltmp1186 # Offset: 14
    00000014: 	cmpl	%edx, %r8d
    00000017: 	movl	$0x1, %r9d
    0000001d: 	cmovlel	%r8d, %edx
    00000021: 	testl	%edx, %edx
    00000023: 	cmovgl	%edx, %r9d
    00000027: 	cmpl	$0x3, %edx
    0000002a: 	jle	.Ltmp1187 # Offset: 42
    00000030: 	movl	%r9d, %ecx
    00000033: 	movdqa	DATAat0x388f0(%rip), %xmm2
    0000003b: 	pxor	%xmm1, %xmm1
    0000003f: 	movq	%rdi, %rax
    00000042: 	shrl	$0x2, %ecx
    00000045: 	subl	$0x1, %ecx
    00000048: 	shlq	$0x4, %rcx
    0000004c: 	leaq	0x10(%rdi,%rcx), %rcx
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp1188:
    00000058: 	movdqu	(%rax), %xmm0
    0000005c: 	addq	$0x10, %rax
    00000060: 	paddd	%xmm2, %xmm0
    00000064: 	paddd	%xmm0, %xmm1
    00000068: 	cmpq	%rcx, %rax
    0000006b: 	jne	.Ltmp1188 # Offset: 107
    0000006d: 	movdqa	%xmm1, %xmm0
    00000071: 	movl	%r9d, %ecx
    00000074: 	psrldq	$0x8, %xmm0
    00000079: 	andl	$-0x4, %ecx
    0000007c: 	andl	$0x3, %r9d
    00000080: 	paddd	%xmm0, %xmm1
    00000084: 	movdqa	%xmm1, %xmm0
    00000088: 	psrldq	$0x4, %xmm0
    0000008d: 	paddd	%xmm0, %xmm1
    00000091: 	movd	%xmm1, %eax
    00000095: 	je	.Ltmp1189 # Offset: 149
.Ltmp1194:
    00000097: 	movslq	%ecx, %r9
    0000009a: 	leaq	(,%r9,4), %r10
    000000a2: 	movl	(%rdi,%r9,4), %r9d
    000000a6: 	leal	0x1(%rax,%r9), %eax
    000000ab: 	leal	0x1(%rcx), %r9d
    000000af: 	cmpl	%r9d, %edx
    000000b2: 	jle	.Ltmp1189 # Offset: 178
    000000b4: 	movl	0x4(%rdi,%r10), %r9d
    000000b9: 	addl	$0x2, %ecx
    000000bc: 	leal	0x1(%rax,%r9), %eax
    000000c1: 	cmpl	%ecx, %edx
    000000c3: 	jle	.Ltmp1189 # Offset: 195
    000000c5: 	movl	0x8(%rdi,%r10), %ecx
    000000ca: 	leal	0x1(%rax,%rcx), %eax
.Ltmp1189:
    000000ce: 	testl	%edx, %edx
    000000d0: 	movl	$0x1, %ecx
    000000d5: 	cmovlel	%ecx, %edx
    000000d8: 	cmpl	%edx, %r8d
    000000db: 	jle	.Ltmp1186 # Offset: 219
    000000e1: 	addl	%esi, %esi
    000000e3: 	addl	$0x1, %edx
    000000e6: 	cmpl	%r8d, %esi
    000000e9: 	movslq	%edx, %rdx
    000000ec: 	cmovgl	%r8d, %esi
.Ltmp1190:
    000000f0: 	movl	-0x4(%rdi,%rdx,4), %ecx
    000000f4: 	leal	-0x1(%rax,%rcx), %eax
    000000f8: 	movl	%edx, %ecx
    000000fa: 	addq	$0x1, %rdx
    000000fe: 	cmpl	%esi, %ecx
    00000100: 	jl	.Ltmp1190 # Offset: 256
    00000102: 	cmpl	%ecx, %r8d
    00000105: 	jle	.Ltmp1186 # Offset: 261
    0000010b: 	movl	%r8d, %r10d
    0000010e: 	subl	%ecx, %r10d
    00000111: 	leal	-0x1(%r10), %edx
    00000115: 	cmpl	$0x2, %edx
    00000118: 	jbe	.Ltmp1191 # Offset: 280
    0000011a: 	movslq	%ecx, %rdx
    0000011d: 	pxor	%xmm0, %xmm0
    00000121: 	leaq	(%rdi,%rdx,4), %rsi
    00000125: 	movl	%r10d, %edx
    00000128: 	shrl	$0x2, %edx
    0000012b: 	leal	-0x1(%rdx), %r9d
    0000012f: 	leaq	0x10(%rsi), %rdx
    00000133: 	shlq	$0x4, %r9
    00000137: 	addq	%rdx, %r9
    0000013a: 	jmp	.Ltmp1192 # Offset: 314
    0000013c: 	nopl	(%rax) # Size: 4
.Ltmp1193:
    00000140: 	addq	$0x10, %rdx
.Ltmp1192:
    00000144: 	movdqu	(%rsi), %xmm1
    00000148: 	movq	%rdx, %rsi
    0000014b: 	paddd	%xmm1, %xmm0
    0000014f: 	cmpq	%rdx, %r9
    00000152: 	jne	.Ltmp1193 # Offset: 338
    00000154: 	movdqa	%xmm0, %xmm1
    00000158: 	psrldq	$0x8, %xmm1
    0000015d: 	paddd	%xmm1, %xmm0
    00000161: 	movdqa	%xmm0, %xmm1
    00000165: 	psrldq	$0x4, %xmm1
    0000016a: 	paddd	%xmm1, %xmm0
    0000016e: 	movd	%xmm0, %edx
    00000172: 	addl	%edx, %eax
    00000174: 	movl	%r10d, %edx
    00000177: 	andl	$-0x4, %edx
    0000017a: 	addl	%edx, %ecx
    0000017c: 	cmpl	%r10d, %edx
    0000017f: 	je	.Ltmp1186 # Offset: 383
.Ltmp1191:
    00000181: 	movslq	%ecx, %rdx
    00000184: 	leaq	(,%rdx,4), %rsi
    0000018c: 	addl	(%rdi,%rdx,4), %eax
    0000018f: 	leal	0x1(%rcx), %edx
    00000192: 	cmpl	%edx, %r8d
    00000195: 	jle	.Ltmp1186 # Offset: 405
    00000197: 	addl	$0x2, %ecx
    0000019a: 	addl	0x4(%rdi,%rsi), %eax
    0000019e: 	cmpl	%r8d, %ecx
    000001a1: 	jge	.Ltmp1186 # Offset: 417
    000001a3: 	addl	0x8(%rdi,%rsi), %eax
.Ltmp1186:
    000001a7: 	retq # Offset: 423
    000001a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1187:
    000001b0: 	xorl	%ecx, %ecx
    000001b2: 	jmp	.Ltmp1194 # Offset: 434
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_goto_loop3_halfoptIiET_PKS0_iS0_"

Binary Function "_Z20test_for_loop3_paramIiET_PKS0_iS0_" after disassembly {
  Number      : 162
  State       : disassembled
  Address     : 0x10790
  Size        : 0x141
  MaxSize     : 0x150
  Offset      : 0x10790
  Section     : .text
  Orc Section : .local.text._Z20test_for_loop3_paramIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0161:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp1195 # Offset: 6
    0000000c: 	leal	(%rdx,%rdx), %r9d
    00000010: 	testl	%edx, %edx
    00000012: 	jle	.Ltmp1196 # Offset: 18
    00000018: 	cmpl	%edx, %esi
    0000001a: 	movl	$0x1, %r10d
    00000020: 	cmovlel	%esi, %edx
    00000023: 	testl	%edx, %edx
    00000025: 	cmovgl	%edx, %r10d
    00000029: 	cmpl	$0x3, %edx
    0000002c: 	jle	.Ltmp1197 # Offset: 44
    00000032: 	movl	%r10d, %ecx
    00000035: 	movdqa	DATAat0x38850(%rip), %xmm3
    0000003d: 	movq	%rdi, %rax
    00000040: 	movdqa	DATAat0x38900(%rip), %xmm5
    00000048: 	shrl	$0x2, %ecx
    0000004b: 	movdqa	DATAat0x388f0(%rip), %xmm4
    00000053: 	pxor	%xmm2, %xmm2
    00000057: 	subl	$0x1, %ecx
    0000005a: 	shlq	$0x4, %rcx
    0000005e: 	leaq	0x10(%rdi,%rcx), %rcx
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1198:
    00000068: 	movdqu	(%rax), %xmm1
    0000006c: 	movdqa	%xmm3, %xmm0
    00000070: 	addq	$0x10, %rax
    00000074: 	paddd	%xmm5, %xmm3
    00000078: 	paddd	%xmm4, %xmm0
    0000007c: 	paddd	%xmm4, %xmm1
    00000080: 	paddd	%xmm1, %xmm2
    00000084: 	cmpq	%rax, %rcx
    00000087: 	jne	.Ltmp1198 # Offset: 135
    00000089: 	pshufd	$0xff, %xmm0, %xmm0
    0000008e: 	movl	%r10d, %ecx
    00000091: 	movd	%xmm0, %eax
    00000095: 	movdqa	%xmm2, %xmm0
    00000099: 	andl	$-0x4, %ecx
    0000009c: 	andl	$0x3, %r10d
    000000a0: 	psrldq	$0x8, %xmm0
    000000a5: 	paddd	%xmm0, %xmm2
    000000a9: 	movdqa	%xmm2, %xmm0
    000000ad: 	psrldq	$0x4, %xmm0
    000000b2: 	paddd	%xmm0, %xmm2
    000000b6: 	movd	%xmm2, %r8d
    000000bb: 	je	.Ltmp1199 # Offset: 187
.Ltmp1203:
    000000bd: 	movslq	%ecx, %rax
    000000c0: 	leaq	(,%rax,4), %r10
    000000c8: 	movl	(%rdi,%rax,4), %eax
    000000cb: 	leal	0x1(%r8,%rax), %r8d
    000000d0: 	leal	0x1(%rcx), %eax
    000000d3: 	cmpl	%eax, %edx
    000000d5: 	jle	.Ltmp1199 # Offset: 213
    000000d7: 	movl	0x4(%rdi,%r10), %eax
    000000dc: 	leal	0x1(%r8,%rax), %r8d
    000000e1: 	leal	0x2(%rcx), %eax
    000000e4: 	cmpl	%eax, %edx
    000000e6: 	jle	.Ltmp1199 # Offset: 230
    000000e8: 	movl	0x8(%rdi,%r10), %eax
    000000ed: 	leal	0x1(%r8,%rax), %r8d
    000000f2: 	leal	0x3(%rcx), %eax
.Ltmp1199:
    000000f5: 	cmpl	%eax, %esi
    000000f7: 	jle	.Ltmp1200 # Offset: 247
.Ltmp1202:
    000000f9: 	cltq
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1201:
    00000100: 	movl	(%rdi,%rax,4), %edx
    00000103: 	cmpl	%eax, %r9d
    00000106: 	leal	(%r8,%rdx), %ecx
    0000010a: 	leal	-0x1(%rdx,%r8), %r8d
    0000010f: 	cmovlel	%ecx, %r8d
    00000113: 	addq	$0x1, %rax
    00000117: 	cmpl	%eax, %esi
    00000119: 	jg	.Ltmp1201 # Offset: 281
.Ltmp1200:
    0000011b: 	movl	%r8d, %eax
    0000011e: 	retq # Offset: 286
    0000011f: 	nop # Size: 1
.Ltmp1196:
    00000120: 	xorl	%eax, %eax
    00000122: 	xorl	%r8d, %r8d
    00000125: 	jmp	.Ltmp1202 # Offset: 293
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1195:
    00000130: 	xorl	%r8d, %r8d
    00000133: 	movl	%r8d, %eax
    00000136: 	retq # Offset: 310
.Ltmp1197:
    00000137: 	xorl	%ecx, %ecx
    00000139: 	xorl	%r8d, %r8d
    0000013c: 	jmp	.Ltmp1203 # Offset: 316
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_for_loop3_paramIiET_PKS0_iS0_"

Binary Function "_Z22test_while_loop3_paramIiET_PKS0_iS0_" after disassembly {
  Number      : 163
  State       : disassembled
  Address     : 0x108e0
  Size        : 0x141
  MaxSize     : 0x150
  Offset      : 0x108e0
  Section     : .text
  Orc Section : .local.text._Z22test_while_loop3_paramIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0162:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp1204 # Offset: 6
    0000000c: 	leal	(%rdx,%rdx), %r9d
    00000010: 	testl	%edx, %edx
    00000012: 	jle	.Ltmp1205 # Offset: 18
    00000018: 	cmpl	%edx, %esi
    0000001a: 	movl	$0x1, %r10d
    00000020: 	cmovlel	%esi, %edx
    00000023: 	testl	%edx, %edx
    00000025: 	cmovgl	%edx, %r10d
    00000029: 	cmpl	$0x3, %edx
    0000002c: 	jle	.Ltmp1206 # Offset: 44
    00000032: 	movl	%r10d, %ecx
    00000035: 	movdqa	DATAat0x38850(%rip), %xmm3
    0000003d: 	movq	%rdi, %rax
    00000040: 	movdqa	DATAat0x38900(%rip), %xmm5
    00000048: 	shrl	$0x2, %ecx
    0000004b: 	movdqa	DATAat0x388f0(%rip), %xmm4
    00000053: 	pxor	%xmm2, %xmm2
    00000057: 	subl	$0x1, %ecx
    0000005a: 	shlq	$0x4, %rcx
    0000005e: 	leaq	0x10(%rdi,%rcx), %rcx
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1207:
    00000068: 	movdqu	(%rax), %xmm1
    0000006c: 	movdqa	%xmm3, %xmm0
    00000070: 	addq	$0x10, %rax
    00000074: 	paddd	%xmm5, %xmm3
    00000078: 	paddd	%xmm4, %xmm0
    0000007c: 	paddd	%xmm4, %xmm1
    00000080: 	paddd	%xmm1, %xmm2
    00000084: 	cmpq	%rax, %rcx
    00000087: 	jne	.Ltmp1207 # Offset: 135
    00000089: 	pshufd	$0xff, %xmm0, %xmm0
    0000008e: 	movl	%r10d, %ecx
    00000091: 	movd	%xmm0, %eax
    00000095: 	movdqa	%xmm2, %xmm0
    00000099: 	andl	$-0x4, %ecx
    0000009c: 	andl	$0x3, %r10d
    000000a0: 	psrldq	$0x8, %xmm0
    000000a5: 	paddd	%xmm0, %xmm2
    000000a9: 	movdqa	%xmm2, %xmm0
    000000ad: 	psrldq	$0x4, %xmm0
    000000b2: 	paddd	%xmm0, %xmm2
    000000b6: 	movd	%xmm2, %r8d
    000000bb: 	je	.Ltmp1208 # Offset: 187
.Ltmp1212:
    000000bd: 	movslq	%ecx, %rax
    000000c0: 	leaq	(,%rax,4), %r10
    000000c8: 	movl	(%rdi,%rax,4), %eax
    000000cb: 	leal	0x1(%r8,%rax), %r8d
    000000d0: 	leal	0x1(%rcx), %eax
    000000d3: 	cmpl	%eax, %edx
    000000d5: 	jle	.Ltmp1208 # Offset: 213
    000000d7: 	movl	0x4(%rdi,%r10), %eax
    000000dc: 	leal	0x1(%r8,%rax), %r8d
    000000e1: 	leal	0x2(%rcx), %eax
    000000e4: 	cmpl	%eax, %edx
    000000e6: 	jle	.Ltmp1208 # Offset: 230
    000000e8: 	movl	0x8(%rdi,%r10), %eax
    000000ed: 	leal	0x1(%r8,%rax), %r8d
    000000f2: 	leal	0x3(%rcx), %eax
.Ltmp1208:
    000000f5: 	cmpl	%eax, %esi
    000000f7: 	jle	.Ltmp1209 # Offset: 247
.Ltmp1211:
    000000f9: 	cltq
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1210:
    00000100: 	movl	(%rdi,%rax,4), %edx
    00000103: 	cmpl	%eax, %r9d
    00000106: 	leal	(%r8,%rdx), %ecx
    0000010a: 	leal	-0x1(%rdx,%r8), %r8d
    0000010f: 	cmovlel	%ecx, %r8d
    00000113: 	addq	$0x1, %rax
    00000117: 	cmpl	%eax, %esi
    00000119: 	jg	.Ltmp1210 # Offset: 281
.Ltmp1209:
    0000011b: 	movl	%r8d, %eax
    0000011e: 	retq # Offset: 286
    0000011f: 	nop # Size: 1
.Ltmp1205:
    00000120: 	xorl	%eax, %eax
    00000122: 	xorl	%r8d, %r8d
    00000125: 	jmp	.Ltmp1211 # Offset: 293
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1204:
    00000130: 	xorl	%r8d, %r8d
    00000133: 	movl	%r8d, %eax
    00000136: 	retq # Offset: 310
.Ltmp1206:
    00000137: 	xorl	%ecx, %ecx
    00000139: 	xorl	%r8d, %r8d
    0000013c: 	jmp	.Ltmp1212 # Offset: 316
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_while_loop3_paramIiET_PKS0_iS0_"

Binary Function "_Z17test_for_loop_optIdET_PKS0_iS0_" after disassembly {
  Number      : 164
  State       : disassembled
  Address     : 0x10a30
  Size        : 0x6d
  MaxSize     : 0x70
  Offset      : 0x10a30
  Section     : .text
  Orc Section : .local.text._Z17test_for_loop_optIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0163:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp1213 # Offset: 6
    00000008: 	cmpl	$0x1, %esi
    0000000b: 	je	.Ltmp1214 # Offset: 11
    0000000d: 	movl	%esi, %edx
    0000000f: 	movq	%rdi, %rax
    00000012: 	pxor	%xmm0, %xmm0
    00000016: 	shrl	%edx
    00000018: 	subl	$0x1, %edx
    0000001b: 	shlq	$0x4, %rdx
    0000001f: 	leaq	0x10(%rdi,%rdx), %rdx
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1215:
    00000028: 	movsd	(%rax), %xmm1
    0000002c: 	addq	$0x10, %rax
    00000030: 	addsd	%xmm1, %xmm0
    00000034: 	movsd	-0x8(%rax), %xmm1
    00000039: 	addsd	%xmm1, %xmm0
    0000003d: 	cmpq	%rdx, %rax
    00000040: 	jne	.Ltmp1215 # Offset: 64
    00000042: 	movl	%esi, %eax
    00000044: 	andl	$-0x2, %eax
    00000047: 	andl	$0x1, %esi
    0000004a: 	je	.Ltmp1216 # Offset: 74
.Ltmp1217:
    0000004c: 	cltq
    0000004e: 	addsd	(%rdi,%rax,8), %xmm0
    00000053: 	retq # Offset: 83
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp1216:
    00000058: 	retq # Offset: 88
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp1213:
    00000060: 	pxor	%xmm0, %xmm0
    00000064: 	retq # Offset: 100
.Ltmp1214:
    00000065: 	xorl	%eax, %eax
    00000067: 	pxor	%xmm0, %xmm0
    0000006b: 	jmp	.Ltmp1217 # Offset: 107
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_for_loop_optIdET_PKS0_iS0_"

Binary Function "_Z19test_while_loop_optIdET_PKS0_iS0_" after disassembly {
  Number      : 165
  State       : disassembled
  Address     : 0x10aa0
  Size        : 0x6d
  MaxSize     : 0x70
  Offset      : 0x10aa0
  Section     : .text
  Orc Section : .local.text._Z19test_while_loop_optIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0164:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp1218 # Offset: 6
    00000008: 	cmpl	$0x1, %esi
    0000000b: 	je	.Ltmp1219 # Offset: 11
    0000000d: 	movl	%esi, %edx
    0000000f: 	movq	%rdi, %rax
    00000012: 	pxor	%xmm0, %xmm0
    00000016: 	shrl	%edx
    00000018: 	subl	$0x1, %edx
    0000001b: 	shlq	$0x4, %rdx
    0000001f: 	leaq	0x10(%rdi,%rdx), %rdx
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1220:
    00000028: 	movsd	(%rax), %xmm1
    0000002c: 	addq	$0x10, %rax
    00000030: 	addsd	%xmm1, %xmm0
    00000034: 	movsd	-0x8(%rax), %xmm1
    00000039: 	addsd	%xmm1, %xmm0
    0000003d: 	cmpq	%rdx, %rax
    00000040: 	jne	.Ltmp1220 # Offset: 64
    00000042: 	movl	%esi, %eax
    00000044: 	andl	$-0x2, %eax
    00000047: 	andl	$0x1, %esi
    0000004a: 	je	.Ltmp1221 # Offset: 74
.Ltmp1222:
    0000004c: 	cltq
    0000004e: 	addsd	(%rdi,%rax,8), %xmm0
    00000053: 	retq # Offset: 83
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp1221:
    00000058: 	retq # Offset: 88
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp1218:
    00000060: 	pxor	%xmm0, %xmm0
    00000064: 	retq # Offset: 100
.Ltmp1219:
    00000065: 	xorl	%eax, %eax
    00000067: 	pxor	%xmm0, %xmm0
    0000006b: 	jmp	.Ltmp1222 # Offset: 107
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_while_loop_optIdET_PKS0_iS0_"

Binary Function "_Z16test_do_loop_optIdET_PKS0_iS0_" after disassembly {
  Number      : 166
  State       : disassembled
  Address     : 0x10b10
  Size        : 0x64
  MaxSize     : 0x70
  Offset      : 0x10b10
  Section     : .text
  Orc Section : .local.text._Z16test_do_loop_optIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0165:
    00000000: 	endbr64
    00000004: 	pxor	%xmm0, %xmm0
    00000008: 	testl	%esi, %esi
    0000000a: 	jle	.Ltmp1223 # Offset: 10
    0000000c: 	cmpl	$0x1, %esi
    0000000f: 	je	.Ltmp1224 # Offset: 15
    00000011: 	movl	%esi, %edx
    00000013: 	movq	%rdi, %rax
    00000016: 	shrl	%edx
    00000018: 	subl	$0x1, %edx
    0000001b: 	shlq	$0x4, %rdx
    0000001f: 	leaq	0x10(%rdi,%rdx), %rdx
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1225:
    00000028: 	movsd	(%rax), %xmm1
    0000002c: 	addq	$0x10, %rax
    00000030: 	addsd	%xmm1, %xmm0
    00000034: 	movsd	-0x8(%rax), %xmm1
    00000039: 	addsd	%xmm1, %xmm0
    0000003d: 	cmpq	%rdx, %rax
    00000040: 	jne	.Ltmp1225 # Offset: 64
    00000042: 	movl	%esi, %eax
    00000044: 	andl	$-0x2, %eax
    00000047: 	andl	$0x1, %esi
    0000004a: 	je	.Ltmp1226 # Offset: 74
.Ltmp1227:
    0000004c: 	cltq
    0000004e: 	addsd	(%rdi,%rax,8), %xmm0
.Ltmp1223:
    00000053: 	retq # Offset: 83
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp1226:
    00000058: 	retq # Offset: 88
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp1224:
    00000060: 	xorl	%eax, %eax
    00000062: 	jmp	.Ltmp1227 # Offset: 98
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_do_loop_optIdET_PKS0_iS0_"

Binary Function "_Z18test_goto_loop_optIdET_PKS0_iS0_" after disassembly {
  Number      : 167
  State       : disassembled
  Address     : 0x10b80
  Size        : 0x64
  MaxSize     : 0x70
  Offset      : 0x10b80
  Section     : .text
  Orc Section : .local.text._Z18test_goto_loop_optIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0166:
    00000000: 	endbr64
    00000004: 	pxor	%xmm0, %xmm0
    00000008: 	testl	%esi, %esi
    0000000a: 	jle	.Ltmp1228 # Offset: 10
    0000000c: 	cmpl	$0x1, %esi
    0000000f: 	je	.Ltmp1229 # Offset: 15
    00000011: 	movl	%esi, %edx
    00000013: 	movq	%rdi, %rax
    00000016: 	shrl	%edx
    00000018: 	subl	$0x1, %edx
    0000001b: 	shlq	$0x4, %rdx
    0000001f: 	leaq	0x10(%rdi,%rdx), %rdx
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1230:
    00000028: 	movsd	(%rax), %xmm1
    0000002c: 	addq	$0x10, %rax
    00000030: 	addsd	%xmm1, %xmm0
    00000034: 	movsd	-0x8(%rax), %xmm1
    00000039: 	addsd	%xmm1, %xmm0
    0000003d: 	cmpq	%rdx, %rax
    00000040: 	jne	.Ltmp1230 # Offset: 64
    00000042: 	movl	%esi, %eax
    00000044: 	andl	$-0x2, %eax
    00000047: 	andl	$0x1, %esi
    0000004a: 	je	.Ltmp1231 # Offset: 74
.Ltmp1232:
    0000004c: 	cltq
    0000004e: 	addsd	(%rdi,%rax,8), %xmm0
.Ltmp1228:
    00000053: 	retq # Offset: 83
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp1231:
    00000058: 	retq # Offset: 88
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp1229:
    00000060: 	xorl	%eax, %eax
    00000062: 	jmp	.Ltmp1232 # Offset: 98
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_goto_loop_optIdET_PKS0_iS0_"

Binary Function "_Z19test_for_loop_paramIdET_PKS0_iS0_" after disassembly {
  Number      : 168
  State       : disassembled
  Address     : 0x10bf0
  Size        : 0xe9
  MaxSize     : 0xf0
  Offset      : 0x10bf0
  Section     : .text
  Orc Section : .local.text._Z19test_for_loop_paramIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0167:
    00000000: 	endbr64
    00000004: 	movapd	%xmm0, %xmm1
    00000008: 	pxor	%xmm0, %xmm0
    0000000c: 	testl	%esi, %esi
    0000000e: 	jle	.Ltmp1233 # Offset: 14
    00000014: 	comisd	%xmm1, %xmm0
    00000018: 	ja	.Ltmp1234 # Offset: 24
    0000001a: 	cmpl	$0x1, %esi
    0000001d: 	je	.Ltmp1235 # Offset: 29
    00000023: 	movl	%esi, %edx
    00000025: 	movq	%rdi, %rax
    00000028: 	shrl	%edx
    0000002a: 	subl	$0x1, %edx
    0000002d: 	shlq	$0x4, %rdx
    00000031: 	leaq	0x10(%rdi,%rdx), %rdx
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1236:
    00000040: 	movsd	(%rax), %xmm1
    00000044: 	addq	$0x10, %rax
    00000048: 	addsd	%xmm1, %xmm0
    0000004c: 	movsd	-0x8(%rax), %xmm1
    00000051: 	addsd	%xmm1, %xmm0
    00000055: 	cmpq	%rdx, %rax
    00000058: 	jne	.Ltmp1236 # Offset: 88
    0000005a: 	movl	%esi, %eax
    0000005c: 	andl	$-0x2, %eax
    0000005f: 	andl	$0x1, %esi
    00000062: 	je	.Ltmp1237 # Offset: 98
.Ltmp1239:
    00000064: 	cltq
    00000066: 	addsd	(%rdi,%rax,8), %xmm0
    0000006b: 	retq # Offset: 107
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp1234:
    00000070: 	leal	-0x1(%rsi), %eax
    00000073: 	movsd	DATAat0x38a20(%rip), %xmm6
    0000007b: 	movsd	DATAat0x38a28(%rip), %xmm5
    00000083: 	movsd	DATAat0x38a30(%rip), %xmm4
    0000008b: 	movsd	DATAat0x38910(%rip), %xmm3
    00000093: 	leaq	0x8(%rdi,%rax,8), %rax
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1238:
    000000a0: 	movsd	(%rdi), %xmm2
    000000a4: 	addq	$0x8, %rdi
    000000a8: 	movapd	%xmm2, %xmm1
    000000ac: 	addsd	%xmm2, %xmm0
    000000b0: 	mulsd	%xmm6, %xmm1
    000000b4: 	divsd	%xmm3, %xmm2
    000000b8: 	divsd	%xmm5, %xmm1
    000000bc: 	mulsd	%xmm4, %xmm1
    000000c0: 	divsd	%xmm3, %xmm1
    000000c4: 	addsd	%xmm2, %xmm1
    000000c8: 	addsd	%xmm1, %xmm0
    000000cc: 	cmpq	%rax, %rdi
    000000cf: 	jne	.Ltmp1238 # Offset: 207
    000000d1: 	retq # Offset: 209
.Ltmp1235:
    000000d2: 	xorl	%eax, %eax
    000000d4: 	jmp	.Ltmp1239 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1237:
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp1233:
    000000e8: 	retq # Offset: 232
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_for_loop_paramIdET_PKS0_iS0_"

Binary Function "_Z20test_for_loop_param2IdET_PKS0_iS0_" after disassembly {
  Number      : 169
  State       : disassembled
  Address     : 0x10ce0
  Size        : 0xa9
  MaxSize     : 0xb0
  Offset      : 0x10ce0
  Section     : .text
  Orc Section : .local.text._Z20test_for_loop_param2IdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0168:
    00000000: 	endbr64
    00000004: 	movapd	%xmm0, %xmm1
    00000008: 	pxor	%xmm0, %xmm0
    0000000c: 	testl	%esi, %esi
    0000000e: 	jle	.Ltmp1240 # Offset: 14
    00000014: 	comisd	%xmm1, %xmm0
    00000018: 	ja	.Ltmp1241 # Offset: 24
    0000001a: 	cmpl	$0x1, %esi
    0000001d: 	je	.Ltmp1242 # Offset: 29
    0000001f: 	movl	%esi, %edx
    00000021: 	movq	%rdi, %rax
    00000024: 	shrl	%edx
    00000026: 	subl	$0x1, %edx
    00000029: 	shlq	$0x4, %rdx
    0000002d: 	leaq	0x10(%rdi,%rdx), %rdx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1243:
    00000038: 	movsd	(%rax), %xmm1
    0000003c: 	addq	$0x10, %rax
    00000040: 	addsd	%xmm1, %xmm0
    00000044: 	movsd	-0x8(%rax), %xmm1
    00000049: 	addsd	%xmm1, %xmm0
    0000004d: 	cmpq	%rax, %rdx
    00000050: 	jne	.Ltmp1243 # Offset: 80
    00000052: 	movl	%esi, %eax
    00000054: 	andl	$-0x2, %eax
    00000057: 	andl	$0x1, %esi
    0000005a: 	je	.Ltmp1244 # Offset: 90
.Ltmp1246:
    0000005c: 	cltq
    0000005e: 	addsd	(%rdi,%rax,8), %xmm0
    00000063: 	retq # Offset: 99
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp1241:
    00000068: 	leal	-0x1(%rsi), %eax
    0000006b: 	movsd	DATAat0x38910(%rip), %xmm2
    00000073: 	leaq	0x8(%rdi,%rax,8), %rax
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1245:
    00000080: 	movsd	(%rdi), %xmm1
    00000084: 	addq	$0x8, %rdi
    00000088: 	addsd	%xmm1, %xmm0
    0000008c: 	divsd	%xmm2, %xmm1
    00000090: 	addsd	%xmm1, %xmm0
    00000094: 	cmpq	%rax, %rdi
    00000097: 	jne	.Ltmp1245 # Offset: 151
    00000099: 	retq # Offset: 153
.Ltmp1242:
    0000009a: 	xorl	%eax, %eax
    0000009c: 	jmp	.Ltmp1246 # Offset: 156
    0000009e: 	nop # Size: 2
.Ltmp1244:
    000000a0: 	retq # Offset: 160
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp1240:
    000000a8: 	retq # Offset: 168
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_for_loop_param2IdET_PKS0_iS0_"

Binary Function "_Z20test_for_loop_param3IdET_PKS0_iS0_" after disassembly {
  Number      : 170
  State       : disassembled
  Address     : 0x10d90
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x10d90
  Section     : .text
  Orc Section : .local.text._Z20test_for_loop_param3IdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0169:
    00000000: 	endbr64
    00000004: 	movapd	%xmm0, %xmm1
    00000008: 	pxor	%xmm0, %xmm0
    0000000c: 	movq	%rdi, %rdx
    0000000f: 	comisd	%xmm1, %xmm0
    00000013: 	ja	.Ltmp1247 # Offset: 19
    00000015: 	testl	%esi, %esi
    00000017: 	jle	.Ltmp1248 # Offset: 23
    00000019: 	nopl	(%rax) # Size: 7
.Ltmp1255:
    00000020: 	testl	%esi, %esi
    00000022: 	movl	$0x1, %edi
    00000027: 	cmovgl	%esi, %edi
    0000002a: 	cmpl	$0x1, %esi
    0000002d: 	jle	.Ltmp1249 # Offset: 45
    00000033: 	leaq	0x10(%rdx), %r8
.Ltmp1256:
    00000037: 	movl	%edi, %ecx
    00000039: 	movq	%rdx, %rax
    0000003c: 	shrl	%ecx
    0000003e: 	subl	$0x1, %ecx
    00000041: 	shlq	$0x4, %rcx
    00000045: 	addq	%r8, %rcx
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1250:
    00000050: 	movsd	(%rax), %xmm1
    00000054: 	addq	$0x10, %rax
    00000058: 	addsd	%xmm1, %xmm0
    0000005c: 	movsd	-0x8(%rax), %xmm1
    00000061: 	addsd	%xmm1, %xmm0
    00000065: 	cmpq	%rax, %rcx
    00000068: 	jne	.Ltmp1250 # Offset: 104
    0000006a: 	movl	%edi, %eax
    0000006c: 	andl	$-0x2, %eax
    0000006f: 	andl	$0x1, %edi
    00000072: 	je	.Ltmp1251 # Offset: 114
.Ltmp1257:
    00000074: 	cltq
    00000076: 	addsd	(%rdx,%rax,8), %xmm0
    0000007b: 	retq # Offset: 123
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp1248:
    00000080: 	retq # Offset: 128
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp1247:
    00000088: 	testl	%esi, %esi
    0000008a: 	jle	.Ltmp1248 # Offset: 138
    0000008c: 	cmpl	$0x1, %esi
    0000008f: 	je	.Ltmp1252 # Offset: 143
    00000091: 	movl	%esi, %ecx
    00000093: 	leaq	0x10(%rdi), %r8
    00000097: 	movapd	DATAat0x38910(%rip), %xmm3
    0000009f: 	movq	%rdi, %rax
    000000a2: 	shrl	%ecx
    000000a4: 	subl	$0x1, %ecx
    000000a7: 	shlq	$0x4, %rcx
    000000ab: 	addq	%r8, %rcx
    000000ae: 	nop # Size: 2
.Ltmp1253:
    000000b0: 	movupd	(%rax), %xmm1
    000000b4: 	addq	$0x10, %rax
    000000b8: 	divpd	%xmm3, %xmm1
    000000bc: 	addsd	%xmm1, %xmm0
    000000c0: 	unpckhpd	%xmm1, %xmm1
    000000c4: 	addsd	%xmm1, %xmm0
    000000c8: 	cmpq	%rcx, %rax
    000000cb: 	jne	.Ltmp1253 # Offset: 203
    000000cd: 	movl	%esi, %eax
    000000cf: 	andl	$-0x2, %eax
    000000d2: 	cmpl	%eax, %esi
    000000d4: 	je	.Ltmp1254 # Offset: 212
.Ltmp1258:
    000000d6: 	cltq
    000000d8: 	movsd	(%rdx,%rax,8), %xmm1
    000000dd: 	divsd	DATAat0x38910(%rip), %xmm1
    000000e5: 	addsd	%xmm1, %xmm0
    000000e9: 	jmp	.Ltmp1255 # Offset: 233
    000000ee: 	nop # Size: 2
.Ltmp1251:
    000000f0: 	retq # Offset: 240
    000000f1: 	nopl	(%rax) # Size: 7
.Ltmp1254:
    000000f8: 	testl	%esi, %esi
    000000fa: 	movl	$0x1, %edi
    000000ff: 	cmovgl	%esi, %edi
    00000102: 	jmp	.Ltmp1256 # Offset: 258
.Ltmp1249:
    00000107: 	xorl	%eax, %eax
    00000109: 	jmp	.Ltmp1257 # Offset: 265
.Ltmp1252:
    0000010e: 	xorl	%eax, %eax
    00000110: 	jmp	.Ltmp1258 # Offset: 272
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_for_loop_param3IdET_PKS0_iS0_"

Binary Function "_Z21test_while_loop_paramIdET_PKS0_iS0_" after disassembly {
  Number      : 171
  State       : disassembled
  Address     : 0x10eb0
  Size        : 0xe9
  MaxSize     : 0xf0
  Offset      : 0x10eb0
  Section     : .text
  Orc Section : .local.text._Z21test_while_loop_paramIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0170:
    00000000: 	endbr64
    00000004: 	movapd	%xmm0, %xmm1
    00000008: 	pxor	%xmm0, %xmm0
    0000000c: 	testl	%esi, %esi
    0000000e: 	jle	.Ltmp1259 # Offset: 14
    00000014: 	comisd	%xmm1, %xmm0
    00000018: 	ja	.Ltmp1260 # Offset: 24
    0000001a: 	cmpl	$0x1, %esi
    0000001d: 	je	.Ltmp1261 # Offset: 29
    00000023: 	movl	%esi, %edx
    00000025: 	movq	%rdi, %rax
    00000028: 	shrl	%edx
    0000002a: 	subl	$0x1, %edx
    0000002d: 	shlq	$0x4, %rdx
    00000031: 	leaq	0x10(%rdi,%rdx), %rdx
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1262:
    00000040: 	movsd	(%rax), %xmm1
    00000044: 	addq	$0x10, %rax
    00000048: 	addsd	%xmm1, %xmm0
    0000004c: 	movsd	-0x8(%rax), %xmm1
    00000051: 	addsd	%xmm1, %xmm0
    00000055: 	cmpq	%rdx, %rax
    00000058: 	jne	.Ltmp1262 # Offset: 88
    0000005a: 	movl	%esi, %eax
    0000005c: 	andl	$-0x2, %eax
    0000005f: 	andl	$0x1, %esi
    00000062: 	je	.Ltmp1263 # Offset: 98
.Ltmp1265:
    00000064: 	cltq
    00000066: 	addsd	(%rdi,%rax,8), %xmm0
    0000006b: 	retq # Offset: 107
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp1260:
    00000070: 	leal	-0x1(%rsi), %eax
    00000073: 	movsd	DATAat0x38a20(%rip), %xmm6
    0000007b: 	movsd	DATAat0x38a28(%rip), %xmm5
    00000083: 	movsd	DATAat0x38a30(%rip), %xmm4
    0000008b: 	movsd	DATAat0x38910(%rip), %xmm3
    00000093: 	leaq	0x8(%rdi,%rax,8), %rax
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1264:
    000000a0: 	movsd	(%rdi), %xmm2
    000000a4: 	addq	$0x8, %rdi
    000000a8: 	movapd	%xmm2, %xmm1
    000000ac: 	addsd	%xmm2, %xmm0
    000000b0: 	mulsd	%xmm6, %xmm1
    000000b4: 	divsd	%xmm3, %xmm2
    000000b8: 	divsd	%xmm5, %xmm1
    000000bc: 	mulsd	%xmm4, %xmm1
    000000c0: 	divsd	%xmm3, %xmm1
    000000c4: 	addsd	%xmm2, %xmm1
    000000c8: 	addsd	%xmm1, %xmm0
    000000cc: 	cmpq	%rax, %rdi
    000000cf: 	jne	.Ltmp1264 # Offset: 207
    000000d1: 	retq # Offset: 209
.Ltmp1261:
    000000d2: 	xorl	%eax, %eax
    000000d4: 	jmp	.Ltmp1265 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1263:
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp1259:
    000000e8: 	retq # Offset: 232
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_while_loop_paramIdET_PKS0_iS0_"

Binary Function "_Z22test_while_loop_param2IdET_PKS0_iS0_" after disassembly {
  Number      : 172
  State       : disassembled
  Address     : 0x10fa0
  Size        : 0xa9
  MaxSize     : 0xb0
  Offset      : 0x10fa0
  Section     : .text
  Orc Section : .local.text._Z22test_while_loop_param2IdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0171:
    00000000: 	endbr64
    00000004: 	movapd	%xmm0, %xmm1
    00000008: 	pxor	%xmm0, %xmm0
    0000000c: 	testl	%esi, %esi
    0000000e: 	jle	.Ltmp1266 # Offset: 14
    00000014: 	comisd	%xmm1, %xmm0
    00000018: 	ja	.Ltmp1267 # Offset: 24
    0000001a: 	cmpl	$0x1, %esi
    0000001d: 	je	.Ltmp1268 # Offset: 29
    0000001f: 	movl	%esi, %edx
    00000021: 	movq	%rdi, %rax
    00000024: 	shrl	%edx
    00000026: 	subl	$0x1, %edx
    00000029: 	shlq	$0x4, %rdx
    0000002d: 	leaq	0x10(%rdi,%rdx), %rdx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1269:
    00000038: 	movsd	(%rax), %xmm1
    0000003c: 	addq	$0x10, %rax
    00000040: 	addsd	%xmm1, %xmm0
    00000044: 	movsd	-0x8(%rax), %xmm1
    00000049: 	addsd	%xmm1, %xmm0
    0000004d: 	cmpq	%rax, %rdx
    00000050: 	jne	.Ltmp1269 # Offset: 80
    00000052: 	movl	%esi, %eax
    00000054: 	andl	$-0x2, %eax
    00000057: 	andl	$0x1, %esi
    0000005a: 	je	.Ltmp1270 # Offset: 90
.Ltmp1272:
    0000005c: 	cltq
    0000005e: 	addsd	(%rdi,%rax,8), %xmm0
    00000063: 	retq # Offset: 99
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp1267:
    00000068: 	leal	-0x1(%rsi), %eax
    0000006b: 	movsd	DATAat0x38910(%rip), %xmm2
    00000073: 	leaq	0x8(%rdi,%rax,8), %rax
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1271:
    00000080: 	movsd	(%rdi), %xmm1
    00000084: 	addq	$0x8, %rdi
    00000088: 	addsd	%xmm1, %xmm0
    0000008c: 	divsd	%xmm2, %xmm1
    00000090: 	addsd	%xmm1, %xmm0
    00000094: 	cmpq	%rax, %rdi
    00000097: 	jne	.Ltmp1271 # Offset: 151
    00000099: 	retq # Offset: 153
.Ltmp1268:
    0000009a: 	xorl	%eax, %eax
    0000009c: 	jmp	.Ltmp1272 # Offset: 156
    0000009e: 	nop # Size: 2
.Ltmp1270:
    000000a0: 	retq # Offset: 160
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp1266:
    000000a8: 	retq # Offset: 168
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_while_loop_param2IdET_PKS0_iS0_"

Binary Function "_Z22test_while_loop_param3IdET_PKS0_iS0_" after disassembly {
  Number      : 173
  State       : disassembled
  Address     : 0x11050
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x11050
  Section     : .text
  Orc Section : .local.text._Z22test_while_loop_param3IdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0172:
    00000000: 	endbr64
    00000004: 	movapd	%xmm0, %xmm1
    00000008: 	pxor	%xmm0, %xmm0
    0000000c: 	movq	%rdi, %rdx
    0000000f: 	comisd	%xmm1, %xmm0
    00000013: 	ja	.Ltmp1273 # Offset: 19
    00000015: 	testl	%esi, %esi
    00000017: 	jle	.Ltmp1274 # Offset: 23
    00000019: 	nopl	(%rax) # Size: 7
.Ltmp1281:
    00000020: 	testl	%esi, %esi
    00000022: 	movl	$0x1, %edi
    00000027: 	cmovgl	%esi, %edi
    0000002a: 	cmpl	$0x1, %esi
    0000002d: 	jle	.Ltmp1275 # Offset: 45
    00000033: 	leaq	0x10(%rdx), %r8
.Ltmp1282:
    00000037: 	movl	%edi, %ecx
    00000039: 	movq	%rdx, %rax
    0000003c: 	shrl	%ecx
    0000003e: 	subl	$0x1, %ecx
    00000041: 	shlq	$0x4, %rcx
    00000045: 	addq	%r8, %rcx
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1276:
    00000050: 	movsd	(%rax), %xmm1
    00000054: 	addq	$0x10, %rax
    00000058: 	addsd	%xmm1, %xmm0
    0000005c: 	movsd	-0x8(%rax), %xmm1
    00000061: 	addsd	%xmm1, %xmm0
    00000065: 	cmpq	%rax, %rcx
    00000068: 	jne	.Ltmp1276 # Offset: 104
    0000006a: 	movl	%edi, %eax
    0000006c: 	andl	$-0x2, %eax
    0000006f: 	andl	$0x1, %edi
    00000072: 	je	.Ltmp1277 # Offset: 114
.Ltmp1283:
    00000074: 	cltq
    00000076: 	addsd	(%rdx,%rax,8), %xmm0
    0000007b: 	retq # Offset: 123
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp1274:
    00000080: 	retq # Offset: 128
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp1273:
    00000088: 	testl	%esi, %esi
    0000008a: 	jle	.Ltmp1274 # Offset: 138
    0000008c: 	cmpl	$0x1, %esi
    0000008f: 	je	.Ltmp1278 # Offset: 143
    00000091: 	movl	%esi, %ecx
    00000093: 	leaq	0x10(%rdi), %r8
    00000097: 	movapd	DATAat0x38910(%rip), %xmm3
    0000009f: 	movq	%rdi, %rax
    000000a2: 	shrl	%ecx
    000000a4: 	subl	$0x1, %ecx
    000000a7: 	shlq	$0x4, %rcx
    000000ab: 	addq	%r8, %rcx
    000000ae: 	nop # Size: 2
.Ltmp1279:
    000000b0: 	movupd	(%rax), %xmm1
    000000b4: 	addq	$0x10, %rax
    000000b8: 	divpd	%xmm3, %xmm1
    000000bc: 	addsd	%xmm1, %xmm0
    000000c0: 	unpckhpd	%xmm1, %xmm1
    000000c4: 	addsd	%xmm1, %xmm0
    000000c8: 	cmpq	%rcx, %rax
    000000cb: 	jne	.Ltmp1279 # Offset: 203
    000000cd: 	movl	%esi, %eax
    000000cf: 	andl	$-0x2, %eax
    000000d2: 	cmpl	%eax, %esi
    000000d4: 	je	.Ltmp1280 # Offset: 212
.Ltmp1284:
    000000d6: 	cltq
    000000d8: 	movsd	(%rdx,%rax,8), %xmm1
    000000dd: 	divsd	DATAat0x38910(%rip), %xmm1
    000000e5: 	addsd	%xmm1, %xmm0
    000000e9: 	jmp	.Ltmp1281 # Offset: 233
    000000ee: 	nop # Size: 2
.Ltmp1277:
    000000f0: 	retq # Offset: 240
    000000f1: 	nopl	(%rax) # Size: 7
.Ltmp1280:
    000000f8: 	testl	%esi, %esi
    000000fa: 	movl	$0x1, %edi
    000000ff: 	cmovgl	%esi, %edi
    00000102: 	jmp	.Ltmp1282 # Offset: 258
.Ltmp1275:
    00000107: 	xorl	%eax, %eax
    00000109: 	jmp	.Ltmp1283 # Offset: 265
.Ltmp1278:
    0000010e: 	xorl	%eax, %eax
    00000110: 	jmp	.Ltmp1284 # Offset: 272
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_while_loop_param3IdET_PKS0_iS0_"

Binary Function "_Z19test_do_loop_param3IdET_PKS0_iS0_" after disassembly {
  Number      : 174
  State       : disassembled
  Address     : 0x11170
  Size        : 0x135
  MaxSize     : 0x140
  Offset      : 0x11170
  Section     : .text
  Orc Section : .local.text._Z19test_do_loop_param3IdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0173:
    00000000: 	endbr64
    00000004: 	movapd	%xmm0, %xmm1
    00000008: 	pxor	%xmm0, %xmm0
    0000000c: 	movq	%rdi, %rdx
    0000000f: 	comisd	%xmm1, %xmm0
    00000013: 	ja	.Ltmp1285 # Offset: 19
    00000015: 	testl	%esi, %esi
    00000017: 	jle	.Ltmp1286 # Offset: 23
    00000019: 	testl	%esi, %esi
    0000001b: 	movl	$0x1, %edi
    00000020: 	cmovgl	%esi, %edi
    00000023: 	cmpl	$0x1, %esi
    00000026: 	jle	.Ltmp1287 # Offset: 38
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp1293:
    00000030: 	leaq	0x10(%rdx), %r8
.Ltmp1294:
    00000034: 	movl	%edi, %ecx
    00000036: 	movq	%rdx, %rax
    00000039: 	shrl	%ecx
    0000003b: 	subl	$0x1, %ecx
    0000003e: 	shlq	$0x4, %rcx
    00000042: 	addq	%r8, %rcx
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp1288:
    00000048: 	movsd	(%rax), %xmm1
    0000004c: 	addq	$0x10, %rax
    00000050: 	addsd	%xmm1, %xmm0
    00000054: 	movsd	-0x8(%rax), %xmm1
    00000059: 	addsd	%xmm1, %xmm0
    0000005d: 	cmpq	%rax, %rcx
    00000060: 	jne	.Ltmp1288 # Offset: 96
    00000062: 	movl	%edi, %eax
    00000064: 	andl	$-0x2, %eax
    00000067: 	andl	$0x1, %edi
    0000006a: 	je	.Ltmp1289 # Offset: 106
.Ltmp1295:
    00000070: 	cltq
    00000072: 	addsd	(%rdx,%rax,8), %xmm0
    00000077: 	retq # Offset: 119
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1286:
    00000080: 	retq # Offset: 128
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp1285:
    00000088: 	testl	%esi, %esi
    0000008a: 	jle	.Ltmp1286 # Offset: 138
    0000008c: 	cmpl	$0x1, %esi
    0000008f: 	je	.Ltmp1290 # Offset: 143
    00000095: 	movl	%esi, %ecx
    00000097: 	leaq	0x10(%rdi), %r8
    0000009b: 	movapd	DATAat0x38910(%rip), %xmm3
    000000a3: 	movq	%rdi, %rax
    000000a6: 	shrl	%ecx
    000000a8: 	subl	$0x1, %ecx
    000000ab: 	shlq	$0x4, %rcx
    000000af: 	addq	%r8, %rcx
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1291:
    000000b8: 	movupd	(%rax), %xmm1
    000000bc: 	addq	$0x10, %rax
    000000c0: 	divpd	%xmm3, %xmm1
    000000c4: 	addsd	%xmm1, %xmm0
    000000c8: 	unpckhpd	%xmm1, %xmm1
    000000cc: 	addsd	%xmm1, %xmm0
    000000d0: 	cmpq	%rcx, %rax
    000000d3: 	jne	.Ltmp1291 # Offset: 211
    000000d5: 	movl	%esi, %eax
    000000d7: 	andl	$-0x2, %eax
    000000da: 	cmpl	%eax, %esi
    000000dc: 	je	.Ltmp1292 # Offset: 220
.Ltmp1296:
    000000de: 	cltq
    000000e0: 	testl	%esi, %esi
    000000e2: 	movl	$0x1, %edi
    000000e7: 	movsd	(%rdx,%rax,8), %xmm1
    000000ec: 	cmovgl	%esi, %edi
    000000ef: 	divsd	DATAat0x38910(%rip), %xmm1
    000000f7: 	addsd	%xmm1, %xmm0
    000000fb: 	cmpl	$0x1, %esi
    000000fe: 	jg	.Ltmp1293 # Offset: 254
    00000104: 	jmp	.Ltmp1287 # Offset: 260
    00000106: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1292:
    00000110: 	testl	%esi, %esi
    00000112: 	movl	$0x1, %edi
    00000117: 	cmovgl	%esi, %edi
    0000011a: 	jmp	.Ltmp1294 # Offset: 282
    0000011f: 	nop # Size: 1
.Ltmp1287:
    00000120: 	xorl	%eax, %eax
    00000122: 	jmp	.Ltmp1295 # Offset: 290
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1289:
    00000130: 	retq # Offset: 304
.Ltmp1290:
    00000131: 	xorl	%eax, %eax
    00000133: 	jmp	.Ltmp1296 # Offset: 307
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_do_loop_param3IdET_PKS0_iS0_"

Binary Function "_Z21test_goto_loop_param3IdET_PKS0_iS0_" after disassembly {
  Number      : 175
  State       : disassembled
  Address     : 0x112b0
  Size        : 0x135
  MaxSize     : 0x140
  Offset      : 0x112b0
  Section     : .text
  Orc Section : .local.text._Z21test_goto_loop_param3IdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0174:
    00000000: 	endbr64
    00000004: 	movapd	%xmm0, %xmm1
    00000008: 	pxor	%xmm0, %xmm0
    0000000c: 	movq	%rdi, %rdx
    0000000f: 	comisd	%xmm1, %xmm0
    00000013: 	ja	.Ltmp1297 # Offset: 19
    00000015: 	testl	%esi, %esi
    00000017: 	jle	.Ltmp1298 # Offset: 23
    00000019: 	testl	%esi, %esi
    0000001b: 	movl	$0x1, %edi
    00000020: 	cmovgl	%esi, %edi
    00000023: 	cmpl	$0x1, %esi
    00000026: 	jle	.Ltmp1299 # Offset: 38
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp1305:
    00000030: 	leaq	0x10(%rdx), %r8
.Ltmp1306:
    00000034: 	movl	%edi, %ecx
    00000036: 	movq	%rdx, %rax
    00000039: 	shrl	%ecx
    0000003b: 	subl	$0x1, %ecx
    0000003e: 	shlq	$0x4, %rcx
    00000042: 	addq	%r8, %rcx
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp1300:
    00000048: 	movsd	(%rax), %xmm1
    0000004c: 	addq	$0x10, %rax
    00000050: 	addsd	%xmm1, %xmm0
    00000054: 	movsd	-0x8(%rax), %xmm1
    00000059: 	addsd	%xmm1, %xmm0
    0000005d: 	cmpq	%rax, %rcx
    00000060: 	jne	.Ltmp1300 # Offset: 96
    00000062: 	movl	%edi, %eax
    00000064: 	andl	$-0x2, %eax
    00000067: 	andl	$0x1, %edi
    0000006a: 	je	.Ltmp1301 # Offset: 106
.Ltmp1307:
    00000070: 	cltq
    00000072: 	addsd	(%rdx,%rax,8), %xmm0
    00000077: 	retq # Offset: 119
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1298:
    00000080: 	retq # Offset: 128
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp1297:
    00000088: 	testl	%esi, %esi
    0000008a: 	jle	.Ltmp1298 # Offset: 138
    0000008c: 	cmpl	$0x1, %esi
    0000008f: 	je	.Ltmp1302 # Offset: 143
    00000095: 	movl	%esi, %ecx
    00000097: 	leaq	0x10(%rdi), %r8
    0000009b: 	movapd	DATAat0x38910(%rip), %xmm3
    000000a3: 	movq	%rdi, %rax
    000000a6: 	shrl	%ecx
    000000a8: 	subl	$0x1, %ecx
    000000ab: 	shlq	$0x4, %rcx
    000000af: 	addq	%r8, %rcx
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1303:
    000000b8: 	movupd	(%rax), %xmm1
    000000bc: 	addq	$0x10, %rax
    000000c0: 	divpd	%xmm3, %xmm1
    000000c4: 	addsd	%xmm1, %xmm0
    000000c8: 	unpckhpd	%xmm1, %xmm1
    000000cc: 	addsd	%xmm1, %xmm0
    000000d0: 	cmpq	%rcx, %rax
    000000d3: 	jne	.Ltmp1303 # Offset: 211
    000000d5: 	movl	%esi, %eax
    000000d7: 	andl	$-0x2, %eax
    000000da: 	cmpl	%eax, %esi
    000000dc: 	je	.Ltmp1304 # Offset: 220
.Ltmp1308:
    000000de: 	cltq
    000000e0: 	testl	%esi, %esi
    000000e2: 	movl	$0x1, %edi
    000000e7: 	movsd	(%rdx,%rax,8), %xmm1
    000000ec: 	cmovgl	%esi, %edi
    000000ef: 	divsd	DATAat0x38910(%rip), %xmm1
    000000f7: 	addsd	%xmm1, %xmm0
    000000fb: 	cmpl	$0x1, %esi
    000000fe: 	jg	.Ltmp1305 # Offset: 254
    00000104: 	jmp	.Ltmp1299 # Offset: 260
    00000106: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1304:
    00000110: 	testl	%esi, %esi
    00000112: 	movl	$0x1, %edi
    00000117: 	cmovgl	%esi, %edi
    0000011a: 	jmp	.Ltmp1306 # Offset: 282
    0000011f: 	nop # Size: 1
.Ltmp1299:
    00000120: 	xorl	%eax, %eax
    00000122: 	jmp	.Ltmp1307 # Offset: 290
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1301:
    00000130: 	retq # Offset: 304
.Ltmp1302:
    00000131: 	xorl	%eax, %eax
    00000133: 	jmp	.Ltmp1308 # Offset: 307
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_goto_loop_param3IdET_PKS0_iS0_"

Binary Function "_Z20test_for_loop_globalIdET_PKS0_iS0_" after disassembly {
  Number      : 176
  State       : disassembled
  Address     : 0x113f0
  Size        : 0xe9
  MaxSize     : 0xf0
  Offset      : 0x113f0
  Section     : .text
  Orc Section : .local.text._Z20test_for_loop_globalIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0175:
    00000000: 	endbr64
    00000004: 	pxor	%xmm0, %xmm0
    00000008: 	testl	%esi, %esi
    0000000a: 	jle	.Ltmp1309 # Offset: 10
    00000010: 	comisd	init_value(%rip), %xmm0
    00000018: 	ja	.Ltmp1310 # Offset: 24
    0000001a: 	cmpl	$0x1, %esi
    0000001d: 	je	.Ltmp1311 # Offset: 29
    00000023: 	movl	%esi, %edx
    00000025: 	movq	%rdi, %rax
    00000028: 	shrl	%edx
    0000002a: 	subl	$0x1, %edx
    0000002d: 	shlq	$0x4, %rdx
    00000031: 	leaq	0x10(%rdi,%rdx), %rdx
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1312:
    00000040: 	movsd	(%rax), %xmm1
    00000044: 	addq	$0x10, %rax
    00000048: 	addsd	%xmm1, %xmm0
    0000004c: 	movsd	-0x8(%rax), %xmm1
    00000051: 	addsd	%xmm1, %xmm0
    00000055: 	cmpq	%rdx, %rax
    00000058: 	jne	.Ltmp1312 # Offset: 88
    0000005a: 	movl	%esi, %eax
    0000005c: 	andl	$-0x2, %eax
    0000005f: 	andl	$0x1, %esi
    00000062: 	je	.Ltmp1313 # Offset: 98
.Ltmp1315:
    00000064: 	cltq
    00000066: 	addsd	(%rdi,%rax,8), %xmm0
    0000006b: 	retq # Offset: 107
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp1310:
    00000070: 	leal	-0x1(%rsi), %eax
    00000073: 	movsd	DATAat0x38a20(%rip), %xmm6
    0000007b: 	movsd	DATAat0x38a28(%rip), %xmm5
    00000083: 	movsd	DATAat0x38a30(%rip), %xmm4
    0000008b: 	movsd	DATAat0x38910(%rip), %xmm3
    00000093: 	leaq	0x8(%rdi,%rax,8), %rax
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1314:
    000000a0: 	movsd	(%rdi), %xmm2
    000000a4: 	addq	$0x8, %rdi
    000000a8: 	movapd	%xmm2, %xmm1
    000000ac: 	addsd	%xmm2, %xmm0
    000000b0: 	mulsd	%xmm6, %xmm1
    000000b4: 	divsd	%xmm3, %xmm2
    000000b8: 	divsd	%xmm5, %xmm1
    000000bc: 	mulsd	%xmm4, %xmm1
    000000c0: 	divsd	%xmm3, %xmm1
    000000c4: 	addsd	%xmm2, %xmm1
    000000c8: 	addsd	%xmm1, %xmm0
    000000cc: 	cmpq	%rax, %rdi
    000000cf: 	jne	.Ltmp1314 # Offset: 207
    000000d1: 	retq # Offset: 209
.Ltmp1311:
    000000d2: 	xorl	%eax, %eax
    000000d4: 	jmp	.Ltmp1315 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1313:
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp1309:
    000000e8: 	retq # Offset: 232
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_for_loop_globalIdET_PKS0_iS0_"

Binary Function "_Z21test_for_loop_global2IdET_PKS0_iS0_" after disassembly {
  Number      : 177
  State       : disassembled
  Address     : 0x114e0
  Size        : 0xa9
  MaxSize     : 0xb0
  Offset      : 0x114e0
  Section     : .text
  Orc Section : .local.text._Z21test_for_loop_global2IdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0176:
    00000000: 	endbr64
    00000004: 	pxor	%xmm0, %xmm0
    00000008: 	testl	%esi, %esi
    0000000a: 	jle	.Ltmp1316 # Offset: 10
    00000010: 	comisd	init_value(%rip), %xmm0
    00000018: 	ja	.Ltmp1317 # Offset: 24
    0000001a: 	cmpl	$0x1, %esi
    0000001d: 	je	.Ltmp1318 # Offset: 29
    0000001f: 	movl	%esi, %edx
    00000021: 	movq	%rdi, %rax
    00000024: 	shrl	%edx
    00000026: 	subl	$0x1, %edx
    00000029: 	shlq	$0x4, %rdx
    0000002d: 	leaq	0x10(%rdi,%rdx), %rdx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1319:
    00000038: 	movsd	(%rax), %xmm1
    0000003c: 	addq	$0x10, %rax
    00000040: 	addsd	%xmm1, %xmm0
    00000044: 	movsd	-0x8(%rax), %xmm1
    00000049: 	addsd	%xmm1, %xmm0
    0000004d: 	cmpq	%rax, %rdx
    00000050: 	jne	.Ltmp1319 # Offset: 80
    00000052: 	movl	%esi, %eax
    00000054: 	andl	$-0x2, %eax
    00000057: 	andl	$0x1, %esi
    0000005a: 	je	.Ltmp1320 # Offset: 90
.Ltmp1322:
    0000005c: 	cltq
    0000005e: 	addsd	(%rdi,%rax,8), %xmm0
    00000063: 	retq # Offset: 99
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp1317:
    00000068: 	leal	-0x1(%rsi), %eax
    0000006b: 	movsd	DATAat0x38910(%rip), %xmm2
    00000073: 	leaq	0x8(%rdi,%rax,8), %rax
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1321:
    00000080: 	movsd	(%rdi), %xmm1
    00000084: 	addq	$0x8, %rdi
    00000088: 	addsd	%xmm1, %xmm0
    0000008c: 	divsd	%xmm2, %xmm1
    00000090: 	addsd	%xmm1, %xmm0
    00000094: 	cmpq	%rax, %rdi
    00000097: 	jne	.Ltmp1321 # Offset: 151
    00000099: 	retq # Offset: 153
.Ltmp1318:
    0000009a: 	xorl	%eax, %eax
    0000009c: 	jmp	.Ltmp1322 # Offset: 156
    0000009e: 	nop # Size: 2
.Ltmp1320:
    000000a0: 	retq # Offset: 160
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp1316:
    000000a8: 	retq # Offset: 168
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_for_loop_global2IdET_PKS0_iS0_"

Binary Function "_Z21test_for_loop_global3IdET_PKS0_iS0_" after disassembly {
  Number      : 178
  State       : disassembled
  Address     : 0x11590
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x11590
  Section     : .text
  Orc Section : .local.text._Z21test_for_loop_global3IdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0177:
    00000000: 	endbr64
    00000004: 	pxor	%xmm0, %xmm0
    00000008: 	comisd	init_value(%rip), %xmm0
    00000010: 	movq	%rdi, %rdx
    00000013: 	ja	.Ltmp1323 # Offset: 19
    00000015: 	testl	%esi, %esi
    00000017: 	jle	.Ltmp1324 # Offset: 23
    00000019: 	nopl	(%rax) # Size: 7
.Ltmp1331:
    00000020: 	testl	%esi, %esi
    00000022: 	movl	$0x1, %edi
    00000027: 	cmovgl	%esi, %edi
    0000002a: 	cmpl	$0x1, %esi
    0000002d: 	jle	.Ltmp1325 # Offset: 45
    00000033: 	leaq	0x10(%rdx), %r8
.Ltmp1332:
    00000037: 	movl	%edi, %ecx
    00000039: 	movq	%rdx, %rax
    0000003c: 	shrl	%ecx
    0000003e: 	subl	$0x1, %ecx
    00000041: 	shlq	$0x4, %rcx
    00000045: 	addq	%r8, %rcx
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1326:
    00000050: 	movsd	(%rax), %xmm1
    00000054: 	addq	$0x10, %rax
    00000058: 	addsd	%xmm1, %xmm0
    0000005c: 	movsd	-0x8(%rax), %xmm1
    00000061: 	addsd	%xmm1, %xmm0
    00000065: 	cmpq	%rax, %rcx
    00000068: 	jne	.Ltmp1326 # Offset: 104
    0000006a: 	movl	%edi, %eax
    0000006c: 	andl	$-0x2, %eax
    0000006f: 	andl	$0x1, %edi
    00000072: 	je	.Ltmp1327 # Offset: 114
.Ltmp1333:
    00000074: 	cltq
    00000076: 	addsd	(%rdx,%rax,8), %xmm0
    0000007b: 	retq # Offset: 123
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp1324:
    00000080: 	retq # Offset: 128
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp1323:
    00000088: 	testl	%esi, %esi
    0000008a: 	jle	.Ltmp1324 # Offset: 138
    0000008c: 	cmpl	$0x1, %esi
    0000008f: 	je	.Ltmp1328 # Offset: 143
    00000091: 	movl	%esi, %ecx
    00000093: 	leaq	0x10(%rdi), %r8
    00000097: 	movapd	DATAat0x38910(%rip), %xmm3
    0000009f: 	movq	%rdi, %rax
    000000a2: 	shrl	%ecx
    000000a4: 	subl	$0x1, %ecx
    000000a7: 	shlq	$0x4, %rcx
    000000ab: 	addq	%r8, %rcx
    000000ae: 	nop # Size: 2
.Ltmp1329:
    000000b0: 	movupd	(%rax), %xmm1
    000000b4: 	addq	$0x10, %rax
    000000b8: 	divpd	%xmm3, %xmm1
    000000bc: 	addsd	%xmm1, %xmm0
    000000c0: 	unpckhpd	%xmm1, %xmm1
    000000c4: 	addsd	%xmm1, %xmm0
    000000c8: 	cmpq	%rcx, %rax
    000000cb: 	jne	.Ltmp1329 # Offset: 203
    000000cd: 	movl	%esi, %eax
    000000cf: 	andl	$-0x2, %eax
    000000d2: 	cmpl	%eax, %esi
    000000d4: 	je	.Ltmp1330 # Offset: 212
.Ltmp1334:
    000000d6: 	cltq
    000000d8: 	movsd	(%rdx,%rax,8), %xmm1
    000000dd: 	divsd	DATAat0x38910(%rip), %xmm1
    000000e5: 	addsd	%xmm1, %xmm0
    000000e9: 	jmp	.Ltmp1331 # Offset: 233
    000000ee: 	nop # Size: 2
.Ltmp1327:
    000000f0: 	retq # Offset: 240
    000000f1: 	nopl	(%rax) # Size: 7
.Ltmp1330:
    000000f8: 	testl	%esi, %esi
    000000fa: 	movl	$0x1, %edi
    000000ff: 	cmovgl	%esi, %edi
    00000102: 	jmp	.Ltmp1332 # Offset: 258
.Ltmp1325:
    00000107: 	xorl	%eax, %eax
    00000109: 	jmp	.Ltmp1333 # Offset: 265
.Ltmp1328:
    0000010e: 	xorl	%eax, %eax
    00000110: 	jmp	.Ltmp1334 # Offset: 272
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_for_loop_global3IdET_PKS0_iS0_"

Binary Function "_Z22test_while_loop_globalIdET_PKS0_iS0_" after disassembly {
  Number      : 179
  State       : disassembled
  Address     : 0x116b0
  Size        : 0xe9
  MaxSize     : 0xf0
  Offset      : 0x116b0
  Section     : .text
  Orc Section : .local.text._Z22test_while_loop_globalIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0178:
    00000000: 	endbr64
    00000004: 	pxor	%xmm0, %xmm0
    00000008: 	testl	%esi, %esi
    0000000a: 	jle	.Ltmp1335 # Offset: 10
    00000010: 	comisd	init_value(%rip), %xmm0
    00000018: 	ja	.Ltmp1336 # Offset: 24
    0000001a: 	cmpl	$0x1, %esi
    0000001d: 	je	.Ltmp1337 # Offset: 29
    00000023: 	movl	%esi, %edx
    00000025: 	movq	%rdi, %rax
    00000028: 	shrl	%edx
    0000002a: 	subl	$0x1, %edx
    0000002d: 	shlq	$0x4, %rdx
    00000031: 	leaq	0x10(%rdi,%rdx), %rdx
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1338:
    00000040: 	movsd	(%rax), %xmm1
    00000044: 	addq	$0x10, %rax
    00000048: 	addsd	%xmm1, %xmm0
    0000004c: 	movsd	-0x8(%rax), %xmm1
    00000051: 	addsd	%xmm1, %xmm0
    00000055: 	cmpq	%rdx, %rax
    00000058: 	jne	.Ltmp1338 # Offset: 88
    0000005a: 	movl	%esi, %eax
    0000005c: 	andl	$-0x2, %eax
    0000005f: 	andl	$0x1, %esi
    00000062: 	je	.Ltmp1339 # Offset: 98
.Ltmp1341:
    00000064: 	cltq
    00000066: 	addsd	(%rdi,%rax,8), %xmm0
    0000006b: 	retq # Offset: 107
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp1336:
    00000070: 	leal	-0x1(%rsi), %eax
    00000073: 	movsd	DATAat0x38a20(%rip), %xmm6
    0000007b: 	movsd	DATAat0x38a28(%rip), %xmm5
    00000083: 	movsd	DATAat0x38a30(%rip), %xmm4
    0000008b: 	movsd	DATAat0x38910(%rip), %xmm3
    00000093: 	leaq	0x8(%rdi,%rax,8), %rax
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1340:
    000000a0: 	movsd	(%rdi), %xmm2
    000000a4: 	addq	$0x8, %rdi
    000000a8: 	movapd	%xmm2, %xmm1
    000000ac: 	addsd	%xmm2, %xmm0
    000000b0: 	mulsd	%xmm6, %xmm1
    000000b4: 	divsd	%xmm3, %xmm2
    000000b8: 	divsd	%xmm5, %xmm1
    000000bc: 	mulsd	%xmm4, %xmm1
    000000c0: 	divsd	%xmm3, %xmm1
    000000c4: 	addsd	%xmm2, %xmm1
    000000c8: 	addsd	%xmm1, %xmm0
    000000cc: 	cmpq	%rax, %rdi
    000000cf: 	jne	.Ltmp1340 # Offset: 207
    000000d1: 	retq # Offset: 209
.Ltmp1337:
    000000d2: 	xorl	%eax, %eax
    000000d4: 	jmp	.Ltmp1341 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1339:
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp1335:
    000000e8: 	retq # Offset: 232
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_while_loop_globalIdET_PKS0_iS0_"

Binary Function "_Z23test_while_loop_global2IdET_PKS0_iS0_" after disassembly {
  Number      : 180
  State       : disassembled
  Address     : 0x117a0
  Size        : 0xa9
  MaxSize     : 0xb0
  Offset      : 0x117a0
  Section     : .text
  Orc Section : .local.text._Z23test_while_loop_global2IdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0179:
    00000000: 	endbr64
    00000004: 	pxor	%xmm0, %xmm0
    00000008: 	testl	%esi, %esi
    0000000a: 	jle	.Ltmp1342 # Offset: 10
    00000010: 	comisd	init_value(%rip), %xmm0
    00000018: 	ja	.Ltmp1343 # Offset: 24
    0000001a: 	cmpl	$0x1, %esi
    0000001d: 	je	.Ltmp1344 # Offset: 29
    0000001f: 	movl	%esi, %edx
    00000021: 	movq	%rdi, %rax
    00000024: 	shrl	%edx
    00000026: 	subl	$0x1, %edx
    00000029: 	shlq	$0x4, %rdx
    0000002d: 	leaq	0x10(%rdi,%rdx), %rdx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1345:
    00000038: 	movsd	(%rax), %xmm1
    0000003c: 	addq	$0x10, %rax
    00000040: 	addsd	%xmm1, %xmm0
    00000044: 	movsd	-0x8(%rax), %xmm1
    00000049: 	addsd	%xmm1, %xmm0
    0000004d: 	cmpq	%rax, %rdx
    00000050: 	jne	.Ltmp1345 # Offset: 80
    00000052: 	movl	%esi, %eax
    00000054: 	andl	$-0x2, %eax
    00000057: 	andl	$0x1, %esi
    0000005a: 	je	.Ltmp1346 # Offset: 90
.Ltmp1348:
    0000005c: 	cltq
    0000005e: 	addsd	(%rdi,%rax,8), %xmm0
    00000063: 	retq # Offset: 99
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp1343:
    00000068: 	leal	-0x1(%rsi), %eax
    0000006b: 	movsd	DATAat0x38910(%rip), %xmm2
    00000073: 	leaq	0x8(%rdi,%rax,8), %rax
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1347:
    00000080: 	movsd	(%rdi), %xmm1
    00000084: 	addq	$0x8, %rdi
    00000088: 	addsd	%xmm1, %xmm0
    0000008c: 	divsd	%xmm2, %xmm1
    00000090: 	addsd	%xmm1, %xmm0
    00000094: 	cmpq	%rax, %rdi
    00000097: 	jne	.Ltmp1347 # Offset: 151
    00000099: 	retq # Offset: 153
.Ltmp1344:
    0000009a: 	xorl	%eax, %eax
    0000009c: 	jmp	.Ltmp1348 # Offset: 156
    0000009e: 	nop # Size: 2
.Ltmp1346:
    000000a0: 	retq # Offset: 160
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp1342:
    000000a8: 	retq # Offset: 168
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_while_loop_global2IdET_PKS0_iS0_"

Binary Function "_Z23test_while_loop_global3IdET_PKS0_iS0_" after disassembly {
  Number      : 181
  State       : disassembled
  Address     : 0x11850
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x11850
  Section     : .text
  Orc Section : .local.text._Z23test_while_loop_global3IdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0180:
    00000000: 	endbr64
    00000004: 	pxor	%xmm0, %xmm0
    00000008: 	comisd	init_value(%rip), %xmm0
    00000010: 	movq	%rdi, %rdx
    00000013: 	ja	.Ltmp1349 # Offset: 19
    00000015: 	testl	%esi, %esi
    00000017: 	jle	.Ltmp1350 # Offset: 23
    00000019: 	nopl	(%rax) # Size: 7
.Ltmp1357:
    00000020: 	testl	%esi, %esi
    00000022: 	movl	$0x1, %edi
    00000027: 	cmovgl	%esi, %edi
    0000002a: 	cmpl	$0x1, %esi
    0000002d: 	jle	.Ltmp1351 # Offset: 45
    00000033: 	leaq	0x10(%rdx), %r8
.Ltmp1358:
    00000037: 	movl	%edi, %ecx
    00000039: 	movq	%rdx, %rax
    0000003c: 	shrl	%ecx
    0000003e: 	subl	$0x1, %ecx
    00000041: 	shlq	$0x4, %rcx
    00000045: 	addq	%r8, %rcx
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1352:
    00000050: 	movsd	(%rax), %xmm1
    00000054: 	addq	$0x10, %rax
    00000058: 	addsd	%xmm1, %xmm0
    0000005c: 	movsd	-0x8(%rax), %xmm1
    00000061: 	addsd	%xmm1, %xmm0
    00000065: 	cmpq	%rax, %rcx
    00000068: 	jne	.Ltmp1352 # Offset: 104
    0000006a: 	movl	%edi, %eax
    0000006c: 	andl	$-0x2, %eax
    0000006f: 	andl	$0x1, %edi
    00000072: 	je	.Ltmp1353 # Offset: 114
.Ltmp1359:
    00000074: 	cltq
    00000076: 	addsd	(%rdx,%rax,8), %xmm0
    0000007b: 	retq # Offset: 123
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp1350:
    00000080: 	retq # Offset: 128
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp1349:
    00000088: 	testl	%esi, %esi
    0000008a: 	jle	.Ltmp1350 # Offset: 138
    0000008c: 	cmpl	$0x1, %esi
    0000008f: 	je	.Ltmp1354 # Offset: 143
    00000091: 	movl	%esi, %ecx
    00000093: 	leaq	0x10(%rdi), %r8
    00000097: 	movapd	DATAat0x38910(%rip), %xmm3
    0000009f: 	movq	%rdi, %rax
    000000a2: 	shrl	%ecx
    000000a4: 	subl	$0x1, %ecx
    000000a7: 	shlq	$0x4, %rcx
    000000ab: 	addq	%r8, %rcx
    000000ae: 	nop # Size: 2
.Ltmp1355:
    000000b0: 	movupd	(%rax), %xmm1
    000000b4: 	addq	$0x10, %rax
    000000b8: 	divpd	%xmm3, %xmm1
    000000bc: 	addsd	%xmm1, %xmm0
    000000c0: 	unpckhpd	%xmm1, %xmm1
    000000c4: 	addsd	%xmm1, %xmm0
    000000c8: 	cmpq	%rcx, %rax
    000000cb: 	jne	.Ltmp1355 # Offset: 203
    000000cd: 	movl	%esi, %eax
    000000cf: 	andl	$-0x2, %eax
    000000d2: 	cmpl	%eax, %esi
    000000d4: 	je	.Ltmp1356 # Offset: 212
.Ltmp1360:
    000000d6: 	cltq
    000000d8: 	movsd	(%rdx,%rax,8), %xmm1
    000000dd: 	divsd	DATAat0x38910(%rip), %xmm1
    000000e5: 	addsd	%xmm1, %xmm0
    000000e9: 	jmp	.Ltmp1357 # Offset: 233
    000000ee: 	nop # Size: 2
.Ltmp1353:
    000000f0: 	retq # Offset: 240
    000000f1: 	nopl	(%rax) # Size: 7
.Ltmp1356:
    000000f8: 	testl	%esi, %esi
    000000fa: 	movl	$0x1, %edi
    000000ff: 	cmovgl	%esi, %edi
    00000102: 	jmp	.Ltmp1358 # Offset: 258
.Ltmp1351:
    00000107: 	xorl	%eax, %eax
    00000109: 	jmp	.Ltmp1359 # Offset: 265
.Ltmp1354:
    0000010e: 	xorl	%eax, %eax
    00000110: 	jmp	.Ltmp1360 # Offset: 272
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_while_loop_global3IdET_PKS0_iS0_"

Binary Function "_Z20test_do_loop_global3IdET_PKS0_iS0_" after disassembly {
  Number      : 182
  State       : disassembled
  Address     : 0x11970
  Size        : 0x135
  MaxSize     : 0x140
  Offset      : 0x11970
  Section     : .text
  Orc Section : .local.text._Z20test_do_loop_global3IdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0181:
    00000000: 	endbr64
    00000004: 	pxor	%xmm0, %xmm0
    00000008: 	comisd	init_value(%rip), %xmm0
    00000010: 	movq	%rdi, %rdx
    00000013: 	ja	.Ltmp1361 # Offset: 19
    00000015: 	testl	%esi, %esi
    00000017: 	jle	.Ltmp1362 # Offset: 23
    00000019: 	testl	%esi, %esi
    0000001b: 	movl	$0x1, %edi
    00000020: 	cmovgl	%esi, %edi
    00000023: 	cmpl	$0x1, %esi
    00000026: 	jle	.Ltmp1363 # Offset: 38
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp1369:
    00000030: 	leaq	0x10(%rdx), %r8
.Ltmp1370:
    00000034: 	movl	%edi, %ecx
    00000036: 	movq	%rdx, %rax
    00000039: 	shrl	%ecx
    0000003b: 	subl	$0x1, %ecx
    0000003e: 	shlq	$0x4, %rcx
    00000042: 	addq	%r8, %rcx
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp1364:
    00000048: 	movsd	(%rax), %xmm1
    0000004c: 	addq	$0x10, %rax
    00000050: 	addsd	%xmm1, %xmm0
    00000054: 	movsd	-0x8(%rax), %xmm1
    00000059: 	addsd	%xmm1, %xmm0
    0000005d: 	cmpq	%rax, %rcx
    00000060: 	jne	.Ltmp1364 # Offset: 96
    00000062: 	movl	%edi, %eax
    00000064: 	andl	$-0x2, %eax
    00000067: 	andl	$0x1, %edi
    0000006a: 	je	.Ltmp1365 # Offset: 106
.Ltmp1371:
    00000070: 	cltq
    00000072: 	addsd	(%rdx,%rax,8), %xmm0
    00000077: 	retq # Offset: 119
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1362:
    00000080: 	retq # Offset: 128
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp1361:
    00000088: 	testl	%esi, %esi
    0000008a: 	jle	.Ltmp1362 # Offset: 138
    0000008c: 	cmpl	$0x1, %esi
    0000008f: 	je	.Ltmp1366 # Offset: 143
    00000095: 	movl	%esi, %ecx
    00000097: 	leaq	0x10(%rdi), %r8
    0000009b: 	movapd	DATAat0x38910(%rip), %xmm3
    000000a3: 	movq	%rdi, %rax
    000000a6: 	shrl	%ecx
    000000a8: 	subl	$0x1, %ecx
    000000ab: 	shlq	$0x4, %rcx
    000000af: 	addq	%r8, %rcx
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1367:
    000000b8: 	movupd	(%rax), %xmm1
    000000bc: 	addq	$0x10, %rax
    000000c0: 	divpd	%xmm3, %xmm1
    000000c4: 	addsd	%xmm1, %xmm0
    000000c8: 	unpckhpd	%xmm1, %xmm1
    000000cc: 	addsd	%xmm1, %xmm0
    000000d0: 	cmpq	%rcx, %rax
    000000d3: 	jne	.Ltmp1367 # Offset: 211
    000000d5: 	movl	%esi, %eax
    000000d7: 	andl	$-0x2, %eax
    000000da: 	cmpl	%eax, %esi
    000000dc: 	je	.Ltmp1368 # Offset: 220
.Ltmp1372:
    000000de: 	cltq
    000000e0: 	testl	%esi, %esi
    000000e2: 	movl	$0x1, %edi
    000000e7: 	movsd	(%rdx,%rax,8), %xmm1
    000000ec: 	cmovgl	%esi, %edi
    000000ef: 	divsd	DATAat0x38910(%rip), %xmm1
    000000f7: 	addsd	%xmm1, %xmm0
    000000fb: 	cmpl	$0x1, %esi
    000000fe: 	jg	.Ltmp1369 # Offset: 254
    00000104: 	jmp	.Ltmp1363 # Offset: 260
    00000106: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1368:
    00000110: 	testl	%esi, %esi
    00000112: 	movl	$0x1, %edi
    00000117: 	cmovgl	%esi, %edi
    0000011a: 	jmp	.Ltmp1370 # Offset: 282
    0000011f: 	nop # Size: 1
.Ltmp1363:
    00000120: 	xorl	%eax, %eax
    00000122: 	jmp	.Ltmp1371 # Offset: 290
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1365:
    00000130: 	retq # Offset: 304
.Ltmp1366:
    00000131: 	xorl	%eax, %eax
    00000133: 	jmp	.Ltmp1372 # Offset: 307
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_do_loop_global3IdET_PKS0_iS0_"

Binary Function "_Z22test_goto_loop_global3IdET_PKS0_iS0_" after disassembly {
  Number      : 183
  State       : disassembled
  Address     : 0x11ab0
  Size        : 0x135
  MaxSize     : 0x140
  Offset      : 0x11ab0
  Section     : .text
  Orc Section : .local.text._Z22test_goto_loop_global3IdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0182:
    00000000: 	endbr64
    00000004: 	pxor	%xmm0, %xmm0
    00000008: 	comisd	init_value(%rip), %xmm0
    00000010: 	movq	%rdi, %rdx
    00000013: 	ja	.Ltmp1373 # Offset: 19
    00000015: 	testl	%esi, %esi
    00000017: 	jle	.Ltmp1374 # Offset: 23
    00000019: 	testl	%esi, %esi
    0000001b: 	movl	$0x1, %edi
    00000020: 	cmovgl	%esi, %edi
    00000023: 	cmpl	$0x1, %esi
    00000026: 	jle	.Ltmp1375 # Offset: 38
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp1381:
    00000030: 	leaq	0x10(%rdx), %r8
.Ltmp1382:
    00000034: 	movl	%edi, %ecx
    00000036: 	movq	%rdx, %rax
    00000039: 	shrl	%ecx
    0000003b: 	subl	$0x1, %ecx
    0000003e: 	shlq	$0x4, %rcx
    00000042: 	addq	%r8, %rcx
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp1376:
    00000048: 	movsd	(%rax), %xmm1
    0000004c: 	addq	$0x10, %rax
    00000050: 	addsd	%xmm1, %xmm0
    00000054: 	movsd	-0x8(%rax), %xmm1
    00000059: 	addsd	%xmm1, %xmm0
    0000005d: 	cmpq	%rax, %rcx
    00000060: 	jne	.Ltmp1376 # Offset: 96
    00000062: 	movl	%edi, %eax
    00000064: 	andl	$-0x2, %eax
    00000067: 	andl	$0x1, %edi
    0000006a: 	je	.Ltmp1377 # Offset: 106
.Ltmp1383:
    00000070: 	cltq
    00000072: 	addsd	(%rdx,%rax,8), %xmm0
    00000077: 	retq # Offset: 119
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1374:
    00000080: 	retq # Offset: 128
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp1373:
    00000088: 	testl	%esi, %esi
    0000008a: 	jle	.Ltmp1374 # Offset: 138
    0000008c: 	cmpl	$0x1, %esi
    0000008f: 	je	.Ltmp1378 # Offset: 143
    00000095: 	movl	%esi, %ecx
    00000097: 	leaq	0x10(%rdi), %r8
    0000009b: 	movapd	DATAat0x38910(%rip), %xmm3
    000000a3: 	movq	%rdi, %rax
    000000a6: 	shrl	%ecx
    000000a8: 	subl	$0x1, %ecx
    000000ab: 	shlq	$0x4, %rcx
    000000af: 	addq	%r8, %rcx
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1379:
    000000b8: 	movupd	(%rax), %xmm1
    000000bc: 	addq	$0x10, %rax
    000000c0: 	divpd	%xmm3, %xmm1
    000000c4: 	addsd	%xmm1, %xmm0
    000000c8: 	unpckhpd	%xmm1, %xmm1
    000000cc: 	addsd	%xmm1, %xmm0
    000000d0: 	cmpq	%rcx, %rax
    000000d3: 	jne	.Ltmp1379 # Offset: 211
    000000d5: 	movl	%esi, %eax
    000000d7: 	andl	$-0x2, %eax
    000000da: 	cmpl	%eax, %esi
    000000dc: 	je	.Ltmp1380 # Offset: 220
.Ltmp1384:
    000000de: 	cltq
    000000e0: 	testl	%esi, %esi
    000000e2: 	movl	$0x1, %edi
    000000e7: 	movsd	(%rdx,%rax,8), %xmm1
    000000ec: 	cmovgl	%esi, %edi
    000000ef: 	divsd	DATAat0x38910(%rip), %xmm1
    000000f7: 	addsd	%xmm1, %xmm0
    000000fb: 	cmpl	$0x1, %esi
    000000fe: 	jg	.Ltmp1381 # Offset: 254
    00000104: 	jmp	.Ltmp1375 # Offset: 260
    00000106: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1380:
    00000110: 	testl	%esi, %esi
    00000112: 	movl	$0x1, %edi
    00000117: 	cmovgl	%esi, %edi
    0000011a: 	jmp	.Ltmp1382 # Offset: 282
    0000011f: 	nop # Size: 1
.Ltmp1375:
    00000120: 	xorl	%eax, %eax
    00000122: 	jmp	.Ltmp1383 # Offset: 290
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1377:
    00000130: 	retq # Offset: 304
.Ltmp1378:
    00000131: 	xorl	%eax, %eax
    00000133: 	jmp	.Ltmp1384 # Offset: 307
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_goto_loop_global3IdET_PKS0_iS0_"

Binary Function "_Z20test_for_loop2_paramIdET_PKS0_iS0_" after disassembly {
  Number      : 184
  State       : disassembled
  Address     : 0x11bf0
  Size        : 0xed
  MaxSize     : 0xf0
  Offset      : 0x11bf0
  Section     : .text
  Orc Section : .local.text._Z20test_for_loop2_paramIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0183:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp1385 # Offset: 6
    0000000c: 	pxor	%xmm3, %xmm3
    00000010: 	comisd	%xmm0, %xmm3
    00000014: 	ja	.Ltmp1386 # Offset: 20
    00000016: 	cmpl	$0x1, %esi
    00000019: 	je	.Ltmp1387 # Offset: 25
    0000001f: 	movl	%esi, %edx
    00000021: 	movq	%rdi, %rax
    00000024: 	movapd	%xmm3, %xmm0
    00000028: 	shrl	%edx
    0000002a: 	subl	$0x1, %edx
    0000002d: 	shlq	$0x4, %rdx
    00000031: 	leaq	0x10(%rdi,%rdx), %rdx
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1388:
    00000040: 	movsd	(%rax), %xmm1
    00000044: 	addq	$0x10, %rax
    00000048: 	addsd	%xmm1, %xmm0
    0000004c: 	movsd	-0x8(%rax), %xmm1
    00000051: 	addsd	%xmm1, %xmm0
    00000055: 	cmpq	%rdx, %rax
    00000058: 	jne	.Ltmp1388 # Offset: 88
    0000005a: 	movl	%esi, %eax
    0000005c: 	andl	$-0x2, %eax
    0000005f: 	andl	$0x1, %esi
    00000062: 	je	.Ltmp1389 # Offset: 98
.Ltmp1392:
    00000064: 	cltq
    00000066: 	addsd	(%rdi,%rax,8), %xmm0
    0000006b: 	retq # Offset: 107
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp1386:
    00000070: 	leal	-0x1(%rsi), %eax
    00000073: 	movsd	DATAat0x38a20(%rip), %xmm7
    0000007b: 	movsd	DATAat0x38a28(%rip), %xmm6
    00000083: 	movapd	%xmm3, %xmm0
    00000087: 	movsd	DATAat0x38a30(%rip), %xmm5
    0000008f: 	movsd	DATAat0x38910(%rip), %xmm4
    00000097: 	leaq	0x8(%rdi,%rax,8), %rax
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp1391:
    000000a0: 	movsd	(%rdi), %xmm2
    000000a4: 	movapd	%xmm2, %xmm1
    000000a8: 	addsd	%xmm2, %xmm0
    000000ac: 	mulsd	%xmm7, %xmm1
    000000b0: 	divsd	%xmm6, %xmm1
    000000b4: 	mulsd	%xmm5, %xmm1
    000000b8: 	divsd	%xmm4, %xmm1
    000000bc: 	comisd	%xmm3, %xmm1
    000000c0: 	jbe	.Ltmp1390 # Offset: 192
    000000c2: 	addsd	%xmm1, %xmm1
    000000c6: 	addsd	%xmm1, %xmm0
.Ltmp1390:
    000000ca: 	addq	$0x8, %rdi
    000000ce: 	cmpq	%rax, %rdi
    000000d1: 	jne	.Ltmp1391 # Offset: 209
    000000d3: 	retq # Offset: 211
.Ltmp1387:
    000000d4: 	xorl	%eax, %eax
    000000d6: 	movapd	%xmm3, %xmm0
    000000da: 	jmp	.Ltmp1392 # Offset: 218
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp1389:
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp1385:
    000000e8: 	pxor	%xmm0, %xmm0
    000000ec: 	retq # Offset: 236
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_for_loop2_paramIdET_PKS0_iS0_"

Binary Function "_Z21test_for_loop2_param2IdET_PKS0_iS0_" after disassembly {
  Number      : 185
  State       : disassembled
  Address     : 0x11ce0
  Size        : 0xe5
  MaxSize     : 0xf0
  Offset      : 0x11ce0
  Section     : .text
  Orc Section : .local.text._Z21test_for_loop2_param2IdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0184:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp1393 # Offset: 6
    0000000c: 	pxor	%xmm2, %xmm2
    00000010: 	comisd	%xmm0, %xmm2
    00000014: 	ja	.Ltmp1394 # Offset: 20
    00000016: 	cmpl	$0x1, %esi
    00000019: 	je	.Ltmp1395 # Offset: 25
    0000001f: 	movl	%esi, %edx
    00000021: 	movq	%rdi, %rax
    00000024: 	movapd	%xmm2, %xmm0
    00000028: 	shrl	%edx
    0000002a: 	subl	$0x1, %edx
    0000002d: 	shlq	$0x4, %rdx
    00000031: 	leaq	0x10(%rdi,%rdx), %rdx
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1396:
    00000040: 	movsd	(%rax), %xmm1
    00000044: 	addq	$0x10, %rax
    00000048: 	addsd	%xmm1, %xmm0
    0000004c: 	movsd	-0x8(%rax), %xmm1
    00000051: 	addsd	%xmm1, %xmm0
    00000055: 	cmpq	%rdx, %rax
    00000058: 	jne	.Ltmp1396 # Offset: 88
    0000005a: 	movl	%esi, %eax
    0000005c: 	andl	$-0x2, %eax
    0000005f: 	andl	$0x1, %esi
    00000062: 	je	.Ltmp1397 # Offset: 98
.Ltmp1400:
    00000064: 	cltq
    00000066: 	addsd	(%rdi,%rax,8), %xmm0
    0000006b: 	retq # Offset: 107
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp1394:
    00000070: 	leal	-0x1(%rsi), %eax
    00000073: 	movsd	DATAat0x38a20(%rip), %xmm6
    0000007b: 	movsd	DATAat0x38a28(%rip), %xmm5
    00000083: 	movapd	%xmm2, %xmm0
    00000087: 	movsd	DATAat0x38a30(%rip), %xmm4
    0000008f: 	movsd	DATAat0x38910(%rip), %xmm3
    00000097: 	leaq	0x8(%rdi,%rax,8), %rax
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp1399:
    000000a0: 	movsd	(%rdi), %xmm1
    000000a4: 	addsd	%xmm1, %xmm0
    000000a8: 	mulsd	%xmm6, %xmm1
    000000ac: 	divsd	%xmm5, %xmm1
    000000b0: 	mulsd	%xmm4, %xmm1
    000000b4: 	divsd	%xmm3, %xmm1
    000000b8: 	comisd	%xmm2, %xmm1
    000000bc: 	jbe	.Ltmp1398 # Offset: 188
    000000be: 	addsd	%xmm1, %xmm0
.Ltmp1398:
    000000c2: 	addq	$0x8, %rdi
    000000c6: 	cmpq	%rax, %rdi
    000000c9: 	jne	.Ltmp1399 # Offset: 201
    000000cb: 	retq # Offset: 203
.Ltmp1395:
    000000cc: 	xorl	%eax, %eax
    000000ce: 	movapd	%xmm2, %xmm0
    000000d2: 	jmp	.Ltmp1400 # Offset: 210
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp1397:
    000000d8: 	retq # Offset: 216
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp1393:
    000000e0: 	pxor	%xmm0, %xmm0
    000000e4: 	retq # Offset: 228
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_for_loop2_param2IdET_PKS0_iS0_"

Binary Function "_Z22test_while_loop2_paramIdET_PKS0_iS0_" after disassembly {
  Number      : 186
  State       : disassembled
  Address     : 0x11dd0
  Size        : 0xed
  MaxSize     : 0xf0
  Offset      : 0x11dd0
  Section     : .text
  Orc Section : .local.text._Z22test_while_loop2_paramIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0185:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp1401 # Offset: 6
    0000000c: 	pxor	%xmm3, %xmm3
    00000010: 	comisd	%xmm0, %xmm3
    00000014: 	ja	.Ltmp1402 # Offset: 20
    00000016: 	cmpl	$0x1, %esi
    00000019: 	je	.Ltmp1403 # Offset: 25
    0000001f: 	movl	%esi, %edx
    00000021: 	movq	%rdi, %rax
    00000024: 	movapd	%xmm3, %xmm0
    00000028: 	shrl	%edx
    0000002a: 	subl	$0x1, %edx
    0000002d: 	shlq	$0x4, %rdx
    00000031: 	leaq	0x10(%rdi,%rdx), %rdx
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1404:
    00000040: 	movsd	(%rax), %xmm1
    00000044: 	addq	$0x10, %rax
    00000048: 	addsd	%xmm1, %xmm0
    0000004c: 	movsd	-0x8(%rax), %xmm1
    00000051: 	addsd	%xmm1, %xmm0
    00000055: 	cmpq	%rdx, %rax
    00000058: 	jne	.Ltmp1404 # Offset: 88
    0000005a: 	movl	%esi, %eax
    0000005c: 	andl	$-0x2, %eax
    0000005f: 	andl	$0x1, %esi
    00000062: 	je	.Ltmp1405 # Offset: 98
.Ltmp1408:
    00000064: 	cltq
    00000066: 	addsd	(%rdi,%rax,8), %xmm0
    0000006b: 	retq # Offset: 107
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp1402:
    00000070: 	leal	-0x1(%rsi), %eax
    00000073: 	movsd	DATAat0x38a20(%rip), %xmm7
    0000007b: 	movsd	DATAat0x38a28(%rip), %xmm6
    00000083: 	movapd	%xmm3, %xmm0
    00000087: 	movsd	DATAat0x38a30(%rip), %xmm5
    0000008f: 	movsd	DATAat0x38910(%rip), %xmm4
    00000097: 	leaq	0x8(%rdi,%rax,8), %rax
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp1407:
    000000a0: 	movsd	(%rdi), %xmm2
    000000a4: 	movapd	%xmm2, %xmm1
    000000a8: 	addsd	%xmm2, %xmm0
    000000ac: 	mulsd	%xmm7, %xmm1
    000000b0: 	divsd	%xmm6, %xmm1
    000000b4: 	mulsd	%xmm5, %xmm1
    000000b8: 	divsd	%xmm4, %xmm1
    000000bc: 	comisd	%xmm3, %xmm1
    000000c0: 	jbe	.Ltmp1406 # Offset: 192
    000000c2: 	divsd	%xmm4, %xmm2
    000000c6: 	addsd	%xmm1, %xmm2
    000000ca: 	addsd	%xmm2, %xmm0
.Ltmp1406:
    000000ce: 	addq	$0x8, %rdi
    000000d2: 	cmpq	%rax, %rdi
    000000d5: 	jne	.Ltmp1407 # Offset: 213
    000000d7: 	retq # Offset: 215
.Ltmp1403:
    000000d8: 	xorl	%eax, %eax
    000000da: 	movapd	%xmm3, %xmm0
    000000de: 	jmp	.Ltmp1408 # Offset: 222
.Ltmp1405:
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp1401:
    000000e8: 	pxor	%xmm0, %xmm0
    000000ec: 	retq # Offset: 236
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_while_loop2_paramIdET_PKS0_iS0_"

Binary Function "_Z23test_while_loop2_param2IdET_PKS0_iS0_" after disassembly {
  Number      : 187
  State       : disassembled
  Address     : 0x11ec0
  Size        : 0xed
  MaxSize     : 0xf0
  Offset      : 0x11ec0
  Section     : .text
  Orc Section : .local.text._Z23test_while_loop2_param2IdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0186:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp1409 # Offset: 6
    0000000c: 	pxor	%xmm3, %xmm3
    00000010: 	comisd	%xmm0, %xmm3
    00000014: 	ja	.Ltmp1410 # Offset: 20
    00000016: 	cmpl	$0x1, %esi
    00000019: 	je	.Ltmp1411 # Offset: 25
    0000001f: 	movl	%esi, %edx
    00000021: 	movq	%rdi, %rax
    00000024: 	movapd	%xmm3, %xmm0
    00000028: 	shrl	%edx
    0000002a: 	subl	$0x1, %edx
    0000002d: 	shlq	$0x4, %rdx
    00000031: 	leaq	0x10(%rdi,%rdx), %rdx
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1412:
    00000040: 	movsd	(%rax), %xmm1
    00000044: 	addq	$0x10, %rax
    00000048: 	addsd	%xmm1, %xmm0
    0000004c: 	movsd	-0x8(%rax), %xmm1
    00000051: 	addsd	%xmm1, %xmm0
    00000055: 	cmpq	%rdx, %rax
    00000058: 	jne	.Ltmp1412 # Offset: 88
    0000005a: 	movl	%esi, %eax
    0000005c: 	andl	$-0x2, %eax
    0000005f: 	andl	$0x1, %esi
    00000062: 	je	.Ltmp1413 # Offset: 98
.Ltmp1416:
    00000064: 	cltq
    00000066: 	addsd	(%rdi,%rax,8), %xmm0
    0000006b: 	retq # Offset: 107
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp1410:
    00000070: 	leal	-0x1(%rsi), %eax
    00000073: 	movsd	DATAat0x38a20(%rip), %xmm7
    0000007b: 	movsd	DATAat0x38a28(%rip), %xmm6
    00000083: 	movapd	%xmm3, %xmm0
    00000087: 	movsd	DATAat0x38a30(%rip), %xmm5
    0000008f: 	movsd	DATAat0x38910(%rip), %xmm4
    00000097: 	leaq	0x8(%rdi,%rax,8), %rax
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp1415:
    000000a0: 	movsd	(%rdi), %xmm2
    000000a4: 	movapd	%xmm2, %xmm1
    000000a8: 	addsd	%xmm2, %xmm0
    000000ac: 	mulsd	%xmm7, %xmm1
    000000b0: 	divsd	%xmm6, %xmm1
    000000b4: 	mulsd	%xmm5, %xmm1
    000000b8: 	divsd	%xmm4, %xmm1
    000000bc: 	comisd	%xmm3, %xmm1
    000000c0: 	jbe	.Ltmp1414 # Offset: 192
    000000c2: 	divsd	%xmm4, %xmm2
    000000c6: 	addsd	%xmm2, %xmm0
.Ltmp1414:
    000000ca: 	addq	$0x8, %rdi
    000000ce: 	cmpq	%rax, %rdi
    000000d1: 	jne	.Ltmp1415 # Offset: 209
    000000d3: 	retq # Offset: 211
.Ltmp1411:
    000000d4: 	xorl	%eax, %eax
    000000d6: 	movapd	%xmm3, %xmm0
    000000da: 	jmp	.Ltmp1416 # Offset: 218
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp1413:
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp1409:
    000000e8: 	pxor	%xmm0, %xmm0
    000000ec: 	retq # Offset: 236
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_while_loop2_param2IdET_PKS0_iS0_"

Binary Function "_Z21test_for_loop2_globalIdET_PKS0_iS0_" after disassembly {
  Number      : 188
  State       : disassembled
  Address     : 0x11fb0
  Size        : 0xed
  MaxSize     : 0xf0
  Offset      : 0x11fb0
  Section     : .text
  Orc Section : .local.text._Z21test_for_loop2_globalIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0187:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp1417 # Offset: 6
    0000000c: 	pxor	%xmm3, %xmm3
    00000010: 	comisd	init_value(%rip), %xmm3
    00000018: 	ja	.Ltmp1418 # Offset: 24
    0000001a: 	cmpl	$0x1, %esi
    0000001d: 	je	.Ltmp1419 # Offset: 29
    00000023: 	movl	%esi, %edx
    00000025: 	movq	%rdi, %rax
    00000028: 	movapd	%xmm3, %xmm0
    0000002c: 	shrl	%edx
    0000002e: 	subl	$0x1, %edx
    00000031: 	shlq	$0x4, %rdx
    00000035: 	leaq	0x10(%rdi,%rdx), %rdx
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1420:
    00000040: 	movsd	(%rax), %xmm1
    00000044: 	addq	$0x10, %rax
    00000048: 	addsd	%xmm1, %xmm0
    0000004c: 	movsd	-0x8(%rax), %xmm1
    00000051: 	addsd	%xmm1, %xmm0
    00000055: 	cmpq	%rdx, %rax
    00000058: 	jne	.Ltmp1420 # Offset: 88
    0000005a: 	movl	%esi, %eax
    0000005c: 	andl	$-0x2, %eax
    0000005f: 	andl	$0x1, %esi
    00000062: 	je	.Ltmp1421 # Offset: 98
.Ltmp1424:
    00000064: 	cltq
    00000066: 	addsd	(%rdi,%rax,8), %xmm0
    0000006b: 	retq # Offset: 107
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp1418:
    00000070: 	leal	-0x1(%rsi), %eax
    00000073: 	movsd	DATAat0x38a20(%rip), %xmm7
    0000007b: 	movsd	DATAat0x38a28(%rip), %xmm6
    00000083: 	movapd	%xmm3, %xmm0
    00000087: 	movsd	DATAat0x38a30(%rip), %xmm5
    0000008f: 	movsd	DATAat0x38910(%rip), %xmm4
    00000097: 	leaq	0x8(%rdi,%rax,8), %rax
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp1423:
    000000a0: 	movsd	(%rdi), %xmm2
    000000a4: 	movapd	%xmm2, %xmm1
    000000a8: 	addsd	%xmm2, %xmm0
    000000ac: 	mulsd	%xmm7, %xmm1
    000000b0: 	divsd	%xmm6, %xmm1
    000000b4: 	mulsd	%xmm5, %xmm1
    000000b8: 	divsd	%xmm4, %xmm1
    000000bc: 	comisd	%xmm3, %xmm1
    000000c0: 	jbe	.Ltmp1422 # Offset: 192
    000000c2: 	addsd	%xmm1, %xmm1
    000000c6: 	addsd	%xmm1, %xmm0
.Ltmp1422:
    000000ca: 	addq	$0x8, %rdi
    000000ce: 	cmpq	%rax, %rdi
    000000d1: 	jne	.Ltmp1423 # Offset: 209
    000000d3: 	retq # Offset: 211
.Ltmp1419:
    000000d4: 	xorl	%eax, %eax
    000000d6: 	movapd	%xmm3, %xmm0
    000000da: 	jmp	.Ltmp1424 # Offset: 218
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp1421:
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp1417:
    000000e8: 	pxor	%xmm0, %xmm0
    000000ec: 	retq # Offset: 236
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_for_loop2_globalIdET_PKS0_iS0_"

Binary Function "_Z22test_for_loop2_global2IdET_PKS0_iS0_" after disassembly {
  Number      : 189
  State       : disassembled
  Address     : 0x120a0
  Size        : 0xe5
  MaxSize     : 0xf0
  Offset      : 0x120a0
  Section     : .text
  Orc Section : .local.text._Z22test_for_loop2_global2IdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0188:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp1425 # Offset: 6
    0000000c: 	pxor	%xmm2, %xmm2
    00000010: 	comisd	init_value(%rip), %xmm2
    00000018: 	ja	.Ltmp1426 # Offset: 24
    0000001a: 	cmpl	$0x1, %esi
    0000001d: 	je	.Ltmp1427 # Offset: 29
    00000023: 	movl	%esi, %edx
    00000025: 	movq	%rdi, %rax
    00000028: 	movapd	%xmm2, %xmm0
    0000002c: 	shrl	%edx
    0000002e: 	subl	$0x1, %edx
    00000031: 	shlq	$0x4, %rdx
    00000035: 	leaq	0x10(%rdi,%rdx), %rdx
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1428:
    00000040: 	movsd	(%rax), %xmm1
    00000044: 	addq	$0x10, %rax
    00000048: 	addsd	%xmm1, %xmm0
    0000004c: 	movsd	-0x8(%rax), %xmm1
    00000051: 	addsd	%xmm1, %xmm0
    00000055: 	cmpq	%rdx, %rax
    00000058: 	jne	.Ltmp1428 # Offset: 88
    0000005a: 	movl	%esi, %eax
    0000005c: 	andl	$-0x2, %eax
    0000005f: 	andl	$0x1, %esi
    00000062: 	je	.Ltmp1429 # Offset: 98
.Ltmp1432:
    00000064: 	cltq
    00000066: 	addsd	(%rdi,%rax,8), %xmm0
    0000006b: 	retq # Offset: 107
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp1426:
    00000070: 	leal	-0x1(%rsi), %eax
    00000073: 	movsd	DATAat0x38a20(%rip), %xmm6
    0000007b: 	movsd	DATAat0x38a28(%rip), %xmm5
    00000083: 	movapd	%xmm2, %xmm0
    00000087: 	movsd	DATAat0x38a30(%rip), %xmm4
    0000008f: 	movsd	DATAat0x38910(%rip), %xmm3
    00000097: 	leaq	0x8(%rdi,%rax,8), %rax
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp1431:
    000000a0: 	movsd	(%rdi), %xmm1
    000000a4: 	addsd	%xmm1, %xmm0
    000000a8: 	mulsd	%xmm6, %xmm1
    000000ac: 	divsd	%xmm5, %xmm1
    000000b0: 	mulsd	%xmm4, %xmm1
    000000b4: 	divsd	%xmm3, %xmm1
    000000b8: 	comisd	%xmm2, %xmm1
    000000bc: 	jbe	.Ltmp1430 # Offset: 188
    000000be: 	addsd	%xmm1, %xmm0
.Ltmp1430:
    000000c2: 	addq	$0x8, %rdi
    000000c6: 	cmpq	%rax, %rdi
    000000c9: 	jne	.Ltmp1431 # Offset: 201
    000000cb: 	retq # Offset: 203
.Ltmp1427:
    000000cc: 	xorl	%eax, %eax
    000000ce: 	movapd	%xmm2, %xmm0
    000000d2: 	jmp	.Ltmp1432 # Offset: 210
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp1429:
    000000d8: 	retq # Offset: 216
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp1425:
    000000e0: 	pxor	%xmm0, %xmm0
    000000e4: 	retq # Offset: 228
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_for_loop2_global2IdET_PKS0_iS0_"

Binary Function "_Z23test_while_loop2_globalIdET_PKS0_iS0_" after disassembly {
  Number      : 190
  State       : disassembled
  Address     : 0x12190
  Size        : 0xed
  MaxSize     : 0xf0
  Offset      : 0x12190
  Section     : .text
  Orc Section : .local.text._Z23test_while_loop2_globalIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0189:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp1433 # Offset: 6
    0000000c: 	pxor	%xmm3, %xmm3
    00000010: 	comisd	init_value(%rip), %xmm3
    00000018: 	ja	.Ltmp1434 # Offset: 24
    0000001a: 	cmpl	$0x1, %esi
    0000001d: 	je	.Ltmp1435 # Offset: 29
    00000023: 	movl	%esi, %edx
    00000025: 	movq	%rdi, %rax
    00000028: 	movapd	%xmm3, %xmm0
    0000002c: 	shrl	%edx
    0000002e: 	subl	$0x1, %edx
    00000031: 	shlq	$0x4, %rdx
    00000035: 	leaq	0x10(%rdi,%rdx), %rdx
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1436:
    00000040: 	movsd	(%rax), %xmm1
    00000044: 	addq	$0x10, %rax
    00000048: 	addsd	%xmm1, %xmm0
    0000004c: 	movsd	-0x8(%rax), %xmm1
    00000051: 	addsd	%xmm1, %xmm0
    00000055: 	cmpq	%rdx, %rax
    00000058: 	jne	.Ltmp1436 # Offset: 88
    0000005a: 	movl	%esi, %eax
    0000005c: 	andl	$-0x2, %eax
    0000005f: 	andl	$0x1, %esi
    00000062: 	je	.Ltmp1437 # Offset: 98
.Ltmp1440:
    00000064: 	cltq
    00000066: 	addsd	(%rdi,%rax,8), %xmm0
    0000006b: 	retq # Offset: 107
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp1434:
    00000070: 	leal	-0x1(%rsi), %eax
    00000073: 	movsd	DATAat0x38a20(%rip), %xmm7
    0000007b: 	movsd	DATAat0x38a28(%rip), %xmm6
    00000083: 	movapd	%xmm3, %xmm0
    00000087: 	movsd	DATAat0x38a30(%rip), %xmm5
    0000008f: 	movsd	DATAat0x38910(%rip), %xmm4
    00000097: 	leaq	0x8(%rdi,%rax,8), %rax
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp1439:
    000000a0: 	movsd	(%rdi), %xmm2
    000000a4: 	movapd	%xmm2, %xmm1
    000000a8: 	addsd	%xmm2, %xmm0
    000000ac: 	mulsd	%xmm7, %xmm1
    000000b0: 	divsd	%xmm6, %xmm1
    000000b4: 	mulsd	%xmm5, %xmm1
    000000b8: 	divsd	%xmm4, %xmm1
    000000bc: 	comisd	%xmm3, %xmm1
    000000c0: 	jbe	.Ltmp1438 # Offset: 192
    000000c2: 	divsd	%xmm4, %xmm2
    000000c6: 	addsd	%xmm1, %xmm2
    000000ca: 	addsd	%xmm2, %xmm0
.Ltmp1438:
    000000ce: 	addq	$0x8, %rdi
    000000d2: 	cmpq	%rax, %rdi
    000000d5: 	jne	.Ltmp1439 # Offset: 213
    000000d7: 	retq # Offset: 215
.Ltmp1435:
    000000d8: 	xorl	%eax, %eax
    000000da: 	movapd	%xmm3, %xmm0
    000000de: 	jmp	.Ltmp1440 # Offset: 222
.Ltmp1437:
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp1433:
    000000e8: 	pxor	%xmm0, %xmm0
    000000ec: 	retq # Offset: 236
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_while_loop2_globalIdET_PKS0_iS0_"

Binary Function "_Z24test_while_loop2_global2IdET_PKS0_iS0_" after disassembly {
  Number      : 191
  State       : disassembled
  Address     : 0x12280
  Size        : 0xed
  MaxSize     : 0xf0
  Offset      : 0x12280
  Section     : .text
  Orc Section : .local.text._Z24test_while_loop2_global2IdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0190:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp1441 # Offset: 6
    0000000c: 	pxor	%xmm3, %xmm3
    00000010: 	comisd	init_value(%rip), %xmm3
    00000018: 	ja	.Ltmp1442 # Offset: 24
    0000001a: 	cmpl	$0x1, %esi
    0000001d: 	je	.Ltmp1443 # Offset: 29
    00000023: 	movl	%esi, %edx
    00000025: 	movq	%rdi, %rax
    00000028: 	movapd	%xmm3, %xmm0
    0000002c: 	shrl	%edx
    0000002e: 	subl	$0x1, %edx
    00000031: 	shlq	$0x4, %rdx
    00000035: 	leaq	0x10(%rdi,%rdx), %rdx
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1444:
    00000040: 	movsd	(%rax), %xmm1
    00000044: 	addq	$0x10, %rax
    00000048: 	addsd	%xmm1, %xmm0
    0000004c: 	movsd	-0x8(%rax), %xmm1
    00000051: 	addsd	%xmm1, %xmm0
    00000055: 	cmpq	%rdx, %rax
    00000058: 	jne	.Ltmp1444 # Offset: 88
    0000005a: 	movl	%esi, %eax
    0000005c: 	andl	$-0x2, %eax
    0000005f: 	andl	$0x1, %esi
    00000062: 	je	.Ltmp1445 # Offset: 98
.Ltmp1448:
    00000064: 	cltq
    00000066: 	addsd	(%rdi,%rax,8), %xmm0
    0000006b: 	retq # Offset: 107
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp1442:
    00000070: 	leal	-0x1(%rsi), %eax
    00000073: 	movsd	DATAat0x38a20(%rip), %xmm7
    0000007b: 	movsd	DATAat0x38a28(%rip), %xmm6
    00000083: 	movapd	%xmm3, %xmm0
    00000087: 	movsd	DATAat0x38a30(%rip), %xmm5
    0000008f: 	movsd	DATAat0x38910(%rip), %xmm4
    00000097: 	leaq	0x8(%rdi,%rax,8), %rax
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp1447:
    000000a0: 	movsd	(%rdi), %xmm2
    000000a4: 	movapd	%xmm2, %xmm1
    000000a8: 	addsd	%xmm2, %xmm0
    000000ac: 	mulsd	%xmm7, %xmm1
    000000b0: 	divsd	%xmm6, %xmm1
    000000b4: 	mulsd	%xmm5, %xmm1
    000000b8: 	divsd	%xmm4, %xmm1
    000000bc: 	comisd	%xmm3, %xmm1
    000000c0: 	jbe	.Ltmp1446 # Offset: 192
    000000c2: 	divsd	%xmm4, %xmm2
    000000c6: 	addsd	%xmm2, %xmm0
.Ltmp1446:
    000000ca: 	addq	$0x8, %rdi
    000000ce: 	cmpq	%rax, %rdi
    000000d1: 	jne	.Ltmp1447 # Offset: 209
    000000d3: 	retq # Offset: 211
.Ltmp1443:
    000000d4: 	xorl	%eax, %eax
    000000d6: 	movapd	%xmm3, %xmm0
    000000da: 	jmp	.Ltmp1448 # Offset: 218
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp1445:
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp1441:
    000000e8: 	pxor	%xmm0, %xmm0
    000000ec: 	retq # Offset: 236
DWARF CFI Instructions:
    <empty>
End of Function "_Z24test_while_loop2_global2IdET_PKS0_iS0_"

Binary Function "_Z18test_for_loop3_optIdET_PKS0_iS0_" after disassembly {
  Number      : 192
  State       : disassembled
  Address     : 0x12370
  Size        : 0x1ba
  MaxSize     : 0x1c0
  Offset      : 0x12370
  Section     : .text
  Orc Section : .local.text._Z18test_for_loop3_optIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0191:
    00000000: 	endbr64
    00000004: 	movapd	%xmm0, %xmm4
    00000008: 	movapd	%xmm0, %xmm1
    0000000c: 	movq	%rdi, %rcx
    0000000f: 	addsd	%xmm0, %xmm4
    00000013: 	pxor	%xmm0, %xmm0
    00000017: 	cvtsi2sd	%esi, %xmm0
    0000001b: 	comisd	%xmm4, %xmm0
    0000001f: 	jae	.Ltmp1449 # Offset: 31
    00000025: 	pxor	%xmm5, %xmm5
    00000029: 	comisd	%xmm5, %xmm1
    0000002d: 	jbe	.Ltmp1450 # Offset: 45
    00000033: 	testl	%esi, %esi
    00000035: 	jle	.Ltmp1450 # Offset: 53
    0000003b: 	movsd	DATAat0x38a38(%rip), %xmm2
    00000043: 	movl	$0x1, %eax
    00000048: 	pxor	%xmm0, %xmm0
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp1451:
    00000050: 	movsd	-0x8(%rcx,%rax,8), %xmm3
    00000056: 	movslq	%eax, %rdx
    00000059: 	addsd	%xmm2, %xmm3
    0000005d: 	addsd	%xmm3, %xmm0
    00000061: 	pxor	%xmm3, %xmm3
    00000065: 	cvtsi2sd	%eax, %xmm3
    00000069: 	comisd	%xmm3, %xmm1
    0000006d: 	seta	%r8b
    00000071: 	cmpl	%eax, %esi
    00000073: 	setg	%dil
    00000077: 	addq	$0x1, %rax
    0000007b: 	testb	%dil, %r8b
    0000007e: 	jne	.Ltmp1451 # Offset: 126
.Ltmp1465:
    00000080: 	comisd	%xmm3, %xmm4
    00000084: 	jbe	.Ltmp1452 # Offset: 132
    00000086: 	cmpl	%edx, %esi
    00000088: 	jle	.Ltmp1453 # Offset: 136
    0000008e: 	leal	-0x1(%rsi), %edi
    00000091: 	leal	0x1(%rdx), %eax
    00000094: 	movsd	DATAat0x38a38(%rip), %xmm2
    0000009c: 	subl	%edx, %edi
    0000009e: 	cltq
    000000a0: 	leaq	0x2(%rdi,%rdx), %rdi
    000000a5: 	jmp	.Ltmp1454 # Offset: 165
    000000a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1456:
    000000b0: 	addq	$0x1, %rax
    000000b4: 	cmpq	%rdi, %rax
    000000b7: 	je	.Ltmp1455 # Offset: 183
.Ltmp1454:
    000000bd: 	movsd	-0x8(%rcx,%rax,8), %xmm1
    000000c3: 	movl	%eax, %edx
    000000c5: 	subsd	%xmm2, %xmm1
    000000c9: 	addsd	%xmm1, %xmm0
    000000cd: 	pxor	%xmm1, %xmm1
    000000d1: 	cvtsi2sd	%eax, %xmm1
    000000d5: 	comisd	%xmm1, %xmm4
    000000d9: 	ja	.Ltmp1456 # Offset: 217
.Ltmp1452:
    000000db: 	cmpl	%edx, %esi
    000000dd: 	jle	.Ltmp1457 # Offset: 221
    000000e3: 	subl	%edx, %esi
    000000e5: 	cmpl	$0x1, %esi
    000000e8: 	je	.Ltmp1458 # Offset: 232
    000000ea: 	movslq	%edx, %rax
    000000ed: 	leaq	(%rcx,%rax,8), %rdi
    000000f1: 	movl	%esi, %eax
    000000f3: 	shrl	%eax
    000000f5: 	leal	-0x1(%rax), %r8d
    000000f9: 	leaq	0x10(%rdi), %rax
    000000fd: 	shlq	$0x4, %r8
    00000101: 	addq	%rax, %r8
    00000104: 	jmp	.Ltmp1459 # Offset: 260
    00000106: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1460:
    00000110: 	addq	$0x10, %rax
.Ltmp1459:
    00000114: 	movupd	(%rdi), %xmm1
    00000118: 	movq	%rax, %rdi
    0000011b: 	addsd	%xmm1, %xmm0
    0000011f: 	unpckhpd	%xmm1, %xmm1
    00000123: 	addsd	%xmm1, %xmm0
    00000127: 	cmpq	%r8, %rax
    0000012a: 	jne	.Ltmp1460 # Offset: 298
    0000012c: 	movl	%esi, %eax
    0000012e: 	andl	$-0x2, %eax
    00000131: 	addl	%eax, %edx
    00000133: 	cmpl	%esi, %eax
    00000135: 	je	.Ltmp1453 # Offset: 309
.Ltmp1458:
    00000137: 	movslq	%edx, %rdx
    0000013a: 	addsd	(%rcx,%rdx,8), %xmm0
    0000013f: 	retq # Offset: 319
.Ltmp1449:
    00000140: 	testl	%esi, %esi
    00000142: 	jle	.Ltmp1461 # Offset: 322
    00000144: 	cmpl	$0x1, %esi
    00000147: 	je	.Ltmp1462 # Offset: 327
    00000149: 	movl	%esi, %edx
    0000014b: 	movq	%rdi, %rax
    0000014e: 	pxor	%xmm0, %xmm0
    00000152: 	shrl	%edx
    00000154: 	subl	$0x1, %edx
    00000157: 	shlq	$0x4, %rdx
    0000015b: 	leaq	0x10(%rdi,%rdx), %rdx
.Ltmp1463:
    00000160: 	movsd	(%rax), %xmm1
    00000164: 	addq	$0x10, %rax
    00000168: 	addsd	%xmm1, %xmm0
    0000016c: 	movsd	-0x8(%rax), %xmm1
    00000171: 	addsd	%xmm1, %xmm0
    00000175: 	cmpq	%rax, %rdx
    00000178: 	jne	.Ltmp1463 # Offset: 376
    0000017a: 	movl	%esi, %eax
    0000017c: 	andl	$-0x2, %eax
    0000017f: 	andl	$0x1, %esi
    00000182: 	je	.Ltmp1464 # Offset: 386
.Ltmp1466:
    00000184: 	cltq
    00000186: 	addsd	(%rcx,%rax,8), %xmm0
    0000018b: 	retq # Offset: 395
    0000018c: 	nopl	(%rax) # Size: 4
.Ltmp1461:
    00000190: 	pxor	%xmm0, %xmm0
.Ltmp1453:
    00000194: 	retq # Offset: 404
    00000195: 	nopl	(%rax) # Size: 3
.Ltmp1455:
    00000198: 	retq # Offset: 408
    00000199: 	nopl	(%rax) # Size: 7
.Ltmp1450:
    000001a0: 	pxor	%xmm3, %xmm3
    000001a4: 	xorl	%edx, %edx
    000001a6: 	movapd	%xmm3, %xmm0
    000001aa: 	jmp	.Ltmp1465 # Offset: 426
    000001af: 	nop # Size: 1
.Ltmp1464:
    000001b0: 	retq # Offset: 432
.Ltmp1462:
    000001b1: 	xorl	%eax, %eax
    000001b3: 	pxor	%xmm0, %xmm0
    000001b7: 	jmp	.Ltmp1466 # Offset: 439
.Ltmp1457:
    000001b9: 	retq # Offset: 441
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_for_loop3_optIdET_PKS0_iS0_"

Binary Function "_Z22test_for_loop3_halfoptIdET_PKS0_iS0_" after disassembly {
  Number      : 193
  State       : disassembled
  Address     : 0x12530
  Size        : 0x138
  MaxSize     : 0x140
  Offset      : 0x12530
  Section     : .text
  Orc Section : .local.text._Z22test_for_loop3_halfoptIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0192:
    00000000: 	endbr64
    00000004: 	pxor	%xmm5, %xmm5
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movapd	%xmm0, %xmm1
    0000000f: 	comisd	%xmm5, %xmm0
    00000013: 	jbe	.Ltmp1467 # Offset: 19
    00000019: 	testl	%esi, %esi
    0000001b: 	jle	.Ltmp1467 # Offset: 27
    00000021: 	movsd	DATAat0x38a38(%rip), %xmm3
    00000029: 	movl	$0x1, %eax
    0000002e: 	pxor	%xmm0, %xmm0
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1468:
    00000038: 	pxor	%xmm4, %xmm4
    0000003c: 	cmpl	%eax, %esi
    0000003e: 	movsd	-0x8(%rcx,%rax,8), %xmm2
    00000044: 	movslq	%eax, %rdx
    00000047: 	cvtsi2sd	%eax, %xmm4
    0000004b: 	setg	%r8b
    0000004f: 	addsd	%xmm3, %xmm2
    00000053: 	comisd	%xmm4, %xmm1
    00000057: 	addsd	%xmm2, %xmm0
    0000005b: 	seta	%dil
    0000005f: 	addq	$0x1, %rax
    00000063: 	testb	%dil, %r8b
    00000066: 	jne	.Ltmp1468 # Offset: 102
.Ltmp1478:
    00000068: 	movapd	%xmm1, %xmm2
    0000006c: 	addsd	%xmm1, %xmm2
    00000070: 	comisd	%xmm4, %xmm2
    00000074: 	jbe	.Ltmp1469 # Offset: 116
    00000076: 	cmpl	%edx, %esi
    00000078: 	jle	.Ltmp1470 # Offset: 120
    0000007e: 	leal	-0x1(%rsi), %edi
    00000081: 	leal	0x1(%rdx), %eax
    00000084: 	movsd	DATAat0x38a38(%rip), %xmm3
    0000008c: 	subl	%edx, %edi
    0000008e: 	cltq
    00000090: 	leaq	0x2(%rdi,%rdx), %rdi
    00000095: 	jmp	.Ltmp1471 # Offset: 149
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1473:
    000000a0: 	addq	$0x1, %rax
    000000a4: 	cmpq	%rdi, %rax
    000000a7: 	je	.Ltmp1472 # Offset: 167
.Ltmp1471:
    000000a9: 	movsd	-0x8(%rcx,%rax,8), %xmm1
    000000af: 	movl	%eax, %edx
    000000b1: 	subsd	%xmm3, %xmm1
    000000b5: 	addsd	%xmm1, %xmm0
    000000b9: 	pxor	%xmm1, %xmm1
    000000bd: 	cvtsi2sd	%eax, %xmm1
    000000c1: 	comisd	%xmm1, %xmm2
    000000c5: 	ja	.Ltmp1473 # Offset: 197
.Ltmp1469:
    000000c7: 	cmpl	%edx, %esi
    000000c9: 	jle	.Ltmp1474 # Offset: 201
    000000cb: 	subl	%edx, %esi
    000000cd: 	cmpl	$0x1, %esi
    000000d0: 	je	.Ltmp1475 # Offset: 208
    000000d2: 	movslq	%edx, %rax
    000000d5: 	leaq	(%rcx,%rax,8), %rdi
    000000d9: 	movl	%esi, %eax
    000000db: 	shrl	%eax
    000000dd: 	leal	-0x1(%rax), %r8d
    000000e1: 	leaq	0x10(%rdi), %rax
    000000e5: 	shlq	$0x4, %r8
    000000e9: 	addq	%rax, %r8
    000000ec: 	jmp	.Ltmp1476 # Offset: 236
    000000ee: 	nop # Size: 2
.Ltmp1477:
    000000f0: 	addq	$0x10, %rax
.Ltmp1476:
    000000f4: 	movupd	(%rdi), %xmm1
    000000f8: 	movq	%rax, %rdi
    000000fb: 	addsd	%xmm1, %xmm0
    000000ff: 	unpckhpd	%xmm1, %xmm1
    00000103: 	addsd	%xmm1, %xmm0
    00000107: 	cmpq	%rax, %r8
    0000010a: 	jne	.Ltmp1477 # Offset: 266
    0000010c: 	movl	%esi, %eax
    0000010e: 	andl	$-0x2, %eax
    00000111: 	addl	%eax, %edx
    00000113: 	cmpl	%esi, %eax
    00000115: 	je	.Ltmp1470 # Offset: 277
.Ltmp1475:
    00000117: 	movslq	%edx, %rdx
    0000011a: 	addsd	(%rcx,%rdx,8), %xmm0
.Ltmp1470:
    0000011f: 	retq # Offset: 287
.Ltmp1472:
    00000120: 	retq # Offset: 288
    00000121: 	nopl	(%rax) # Size: 7
.Ltmp1467:
    00000128: 	pxor	%xmm4, %xmm4
    0000012c: 	xorl	%edx, %edx
    0000012e: 	movapd	%xmm4, %xmm0
    00000132: 	jmp	.Ltmp1478 # Offset: 306
.Ltmp1474:
    00000137: 	retq # Offset: 311
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_for_loop3_halfoptIdET_PKS0_iS0_"

Binary Function "_Z20test_while_loop3_optIdET_PKS0_iS0_" after disassembly {
  Number      : 194
  State       : disassembled
  Address     : 0x12670
  Size        : 0x1ba
  MaxSize     : 0x1c0
  Offset      : 0x12670
  Section     : .text
  Orc Section : .local.text._Z20test_while_loop3_optIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0193:
    00000000: 	endbr64
    00000004: 	movapd	%xmm0, %xmm4
    00000008: 	movapd	%xmm0, %xmm1
    0000000c: 	movq	%rdi, %rcx
    0000000f: 	addsd	%xmm0, %xmm4
    00000013: 	pxor	%xmm0, %xmm0
    00000017: 	cvtsi2sd	%esi, %xmm0
    0000001b: 	comisd	%xmm4, %xmm0
    0000001f: 	jae	.Ltmp1479 # Offset: 31
    00000025: 	pxor	%xmm5, %xmm5
    00000029: 	comisd	%xmm5, %xmm1
    0000002d: 	jbe	.Ltmp1480 # Offset: 45
    00000033: 	testl	%esi, %esi
    00000035: 	jle	.Ltmp1480 # Offset: 53
    0000003b: 	movsd	DATAat0x38a38(%rip), %xmm2
    00000043: 	movl	$0x1, %eax
    00000048: 	pxor	%xmm0, %xmm0
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp1481:
    00000050: 	movsd	-0x8(%rcx,%rax,8), %xmm3
    00000056: 	movslq	%eax, %rdx
    00000059: 	addsd	%xmm2, %xmm3
    0000005d: 	addsd	%xmm3, %xmm0
    00000061: 	pxor	%xmm3, %xmm3
    00000065: 	cvtsi2sd	%eax, %xmm3
    00000069: 	comisd	%xmm3, %xmm1
    0000006d: 	seta	%r8b
    00000071: 	cmpl	%eax, %esi
    00000073: 	setg	%dil
    00000077: 	addq	$0x1, %rax
    0000007b: 	testb	%dil, %r8b
    0000007e: 	jne	.Ltmp1481 # Offset: 126
.Ltmp1495:
    00000080: 	comisd	%xmm3, %xmm4
    00000084: 	jbe	.Ltmp1482 # Offset: 132
    00000086: 	cmpl	%edx, %esi
    00000088: 	jle	.Ltmp1483 # Offset: 136
    0000008e: 	leal	-0x1(%rsi), %edi
    00000091: 	leal	0x1(%rdx), %eax
    00000094: 	movsd	DATAat0x38a38(%rip), %xmm2
    0000009c: 	subl	%edx, %edi
    0000009e: 	cltq
    000000a0: 	leaq	0x2(%rdi,%rdx), %rdi
    000000a5: 	jmp	.Ltmp1484 # Offset: 165
    000000a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1486:
    000000b0: 	addq	$0x1, %rax
    000000b4: 	cmpq	%rdi, %rax
    000000b7: 	je	.Ltmp1485 # Offset: 183
.Ltmp1484:
    000000bd: 	movsd	-0x8(%rcx,%rax,8), %xmm1
    000000c3: 	movl	%eax, %edx
    000000c5: 	subsd	%xmm2, %xmm1
    000000c9: 	addsd	%xmm1, %xmm0
    000000cd: 	pxor	%xmm1, %xmm1
    000000d1: 	cvtsi2sd	%eax, %xmm1
    000000d5: 	comisd	%xmm1, %xmm4
    000000d9: 	ja	.Ltmp1486 # Offset: 217
.Ltmp1482:
    000000db: 	cmpl	%edx, %esi
    000000dd: 	jle	.Ltmp1487 # Offset: 221
    000000e3: 	subl	%edx, %esi
    000000e5: 	cmpl	$0x1, %esi
    000000e8: 	je	.Ltmp1488 # Offset: 232
    000000ea: 	movslq	%edx, %rax
    000000ed: 	leaq	(%rcx,%rax,8), %rdi
    000000f1: 	movl	%esi, %eax
    000000f3: 	shrl	%eax
    000000f5: 	leal	-0x1(%rax), %r8d
    000000f9: 	leaq	0x10(%rdi), %rax
    000000fd: 	shlq	$0x4, %r8
    00000101: 	addq	%rax, %r8
    00000104: 	jmp	.Ltmp1489 # Offset: 260
    00000106: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1490:
    00000110: 	addq	$0x10, %rax
.Ltmp1489:
    00000114: 	movupd	(%rdi), %xmm1
    00000118: 	movq	%rax, %rdi
    0000011b: 	addsd	%xmm1, %xmm0
    0000011f: 	unpckhpd	%xmm1, %xmm1
    00000123: 	addsd	%xmm1, %xmm0
    00000127: 	cmpq	%r8, %rax
    0000012a: 	jne	.Ltmp1490 # Offset: 298
    0000012c: 	movl	%esi, %eax
    0000012e: 	andl	$-0x2, %eax
    00000131: 	addl	%eax, %edx
    00000133: 	cmpl	%esi, %eax
    00000135: 	je	.Ltmp1483 # Offset: 309
.Ltmp1488:
    00000137: 	movslq	%edx, %rdx
    0000013a: 	addsd	(%rcx,%rdx,8), %xmm0
    0000013f: 	retq # Offset: 319
.Ltmp1479:
    00000140: 	testl	%esi, %esi
    00000142: 	jle	.Ltmp1491 # Offset: 322
    00000144: 	cmpl	$0x1, %esi
    00000147: 	je	.Ltmp1492 # Offset: 327
    00000149: 	movl	%esi, %edx
    0000014b: 	movq	%rdi, %rax
    0000014e: 	pxor	%xmm0, %xmm0
    00000152: 	shrl	%edx
    00000154: 	subl	$0x1, %edx
    00000157: 	shlq	$0x4, %rdx
    0000015b: 	leaq	0x10(%rdi,%rdx), %rdx
.Ltmp1493:
    00000160: 	movsd	(%rax), %xmm1
    00000164: 	addq	$0x10, %rax
    00000168: 	addsd	%xmm1, %xmm0
    0000016c: 	movsd	-0x8(%rax), %xmm1
    00000171: 	addsd	%xmm1, %xmm0
    00000175: 	cmpq	%rax, %rdx
    00000178: 	jne	.Ltmp1493 # Offset: 376
    0000017a: 	movl	%esi, %eax
    0000017c: 	andl	$-0x2, %eax
    0000017f: 	andl	$0x1, %esi
    00000182: 	je	.Ltmp1494 # Offset: 386
.Ltmp1496:
    00000184: 	cltq
    00000186: 	addsd	(%rcx,%rax,8), %xmm0
    0000018b: 	retq # Offset: 395
    0000018c: 	nopl	(%rax) # Size: 4
.Ltmp1491:
    00000190: 	pxor	%xmm0, %xmm0
.Ltmp1483:
    00000194: 	retq # Offset: 404
    00000195: 	nopl	(%rax) # Size: 3
.Ltmp1485:
    00000198: 	retq # Offset: 408
    00000199: 	nopl	(%rax) # Size: 7
.Ltmp1480:
    000001a0: 	pxor	%xmm3, %xmm3
    000001a4: 	xorl	%edx, %edx
    000001a6: 	movapd	%xmm3, %xmm0
    000001aa: 	jmp	.Ltmp1495 # Offset: 426
    000001af: 	nop # Size: 1
.Ltmp1494:
    000001b0: 	retq # Offset: 432
.Ltmp1492:
    000001b1: 	xorl	%eax, %eax
    000001b3: 	pxor	%xmm0, %xmm0
    000001b7: 	jmp	.Ltmp1496 # Offset: 439
.Ltmp1487:
    000001b9: 	retq # Offset: 441
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_while_loop3_optIdET_PKS0_iS0_"

Binary Function "_Z24test_while_loop3_halfoptIdET_PKS0_iS0_" after disassembly {
  Number      : 195
  State       : disassembled
  Address     : 0x12830
  Size        : 0x138
  MaxSize     : 0x140
  Offset      : 0x12830
  Section     : .text
  Orc Section : .local.text._Z24test_while_loop3_halfoptIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0194:
    00000000: 	endbr64
    00000004: 	pxor	%xmm5, %xmm5
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movapd	%xmm0, %xmm1
    0000000f: 	comisd	%xmm5, %xmm0
    00000013: 	jbe	.Ltmp1497 # Offset: 19
    00000019: 	testl	%esi, %esi
    0000001b: 	jle	.Ltmp1497 # Offset: 27
    00000021: 	movsd	DATAat0x38a38(%rip), %xmm3
    00000029: 	movl	$0x1, %eax
    0000002e: 	pxor	%xmm0, %xmm0
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1498:
    00000038: 	pxor	%xmm4, %xmm4
    0000003c: 	cmpl	%eax, %esi
    0000003e: 	movsd	-0x8(%rcx,%rax,8), %xmm2
    00000044: 	movslq	%eax, %rdx
    00000047: 	cvtsi2sd	%eax, %xmm4
    0000004b: 	setg	%r8b
    0000004f: 	addsd	%xmm3, %xmm2
    00000053: 	comisd	%xmm4, %xmm1
    00000057: 	addsd	%xmm2, %xmm0
    0000005b: 	seta	%dil
    0000005f: 	addq	$0x1, %rax
    00000063: 	testb	%dil, %r8b
    00000066: 	jne	.Ltmp1498 # Offset: 102
.Ltmp1508:
    00000068: 	movapd	%xmm1, %xmm2
    0000006c: 	addsd	%xmm1, %xmm2
    00000070: 	comisd	%xmm4, %xmm2
    00000074: 	jbe	.Ltmp1499 # Offset: 116
    00000076: 	cmpl	%edx, %esi
    00000078: 	jle	.Ltmp1500 # Offset: 120
    0000007e: 	leal	-0x1(%rsi), %edi
    00000081: 	leal	0x1(%rdx), %eax
    00000084: 	movsd	DATAat0x38a38(%rip), %xmm3
    0000008c: 	subl	%edx, %edi
    0000008e: 	cltq
    00000090: 	leaq	0x2(%rdi,%rdx), %rdi
    00000095: 	jmp	.Ltmp1501 # Offset: 149
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1503:
    000000a0: 	addq	$0x1, %rax
    000000a4: 	cmpq	%rdi, %rax
    000000a7: 	je	.Ltmp1502 # Offset: 167
.Ltmp1501:
    000000a9: 	movsd	-0x8(%rcx,%rax,8), %xmm1
    000000af: 	movl	%eax, %edx
    000000b1: 	subsd	%xmm3, %xmm1
    000000b5: 	addsd	%xmm1, %xmm0
    000000b9: 	pxor	%xmm1, %xmm1
    000000bd: 	cvtsi2sd	%eax, %xmm1
    000000c1: 	comisd	%xmm1, %xmm2
    000000c5: 	ja	.Ltmp1503 # Offset: 197
.Ltmp1499:
    000000c7: 	cmpl	%edx, %esi
    000000c9: 	jle	.Ltmp1504 # Offset: 201
    000000cb: 	subl	%edx, %esi
    000000cd: 	cmpl	$0x1, %esi
    000000d0: 	je	.Ltmp1505 # Offset: 208
    000000d2: 	movslq	%edx, %rax
    000000d5: 	leaq	(%rcx,%rax,8), %rdi
    000000d9: 	movl	%esi, %eax
    000000db: 	shrl	%eax
    000000dd: 	leal	-0x1(%rax), %r8d
    000000e1: 	leaq	0x10(%rdi), %rax
    000000e5: 	shlq	$0x4, %r8
    000000e9: 	addq	%rax, %r8
    000000ec: 	jmp	.Ltmp1506 # Offset: 236
    000000ee: 	nop # Size: 2
.Ltmp1507:
    000000f0: 	addq	$0x10, %rax
.Ltmp1506:
    000000f4: 	movupd	(%rdi), %xmm1
    000000f8: 	movq	%rax, %rdi
    000000fb: 	addsd	%xmm1, %xmm0
    000000ff: 	unpckhpd	%xmm1, %xmm1
    00000103: 	addsd	%xmm1, %xmm0
    00000107: 	cmpq	%rax, %r8
    0000010a: 	jne	.Ltmp1507 # Offset: 266
    0000010c: 	movl	%esi, %eax
    0000010e: 	andl	$-0x2, %eax
    00000111: 	addl	%eax, %edx
    00000113: 	cmpl	%esi, %eax
    00000115: 	je	.Ltmp1500 # Offset: 277
.Ltmp1505:
    00000117: 	movslq	%edx, %rdx
    0000011a: 	addsd	(%rcx,%rdx,8), %xmm0
.Ltmp1500:
    0000011f: 	retq # Offset: 287
.Ltmp1502:
    00000120: 	retq # Offset: 288
    00000121: 	nopl	(%rax) # Size: 7
.Ltmp1497:
    00000128: 	pxor	%xmm4, %xmm4
    0000012c: 	xorl	%edx, %edx
    0000012e: 	movapd	%xmm4, %xmm0
    00000132: 	jmp	.Ltmp1508 # Offset: 306
.Ltmp1504:
    00000137: 	retq # Offset: 311
DWARF CFI Instructions:
    <empty>
End of Function "_Z24test_while_loop3_halfoptIdET_PKS0_iS0_"

Binary Function "_Z17test_do_loop3_optIdET_PKS0_iS0_" after disassembly {
  Number      : 196
  State       : disassembled
  Address     : 0x12970
  Size        : 0x169
  MaxSize     : 0x170
  Offset      : 0x12970
  Section     : .text
  Orc Section : .local.text._Z17test_do_loop3_optIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0195:
    00000000: 	endbr64
    00000004: 	movapd	%xmm0, %xmm4
    00000008: 	movapd	%xmm0, %xmm1
    0000000c: 	movq	%rdi, %rcx
    0000000f: 	addsd	%xmm0, %xmm4
    00000013: 	pxor	%xmm0, %xmm0
    00000017: 	cvtsi2sd	%esi, %xmm0
    0000001b: 	comisd	%xmm4, %xmm0
    0000001f: 	jb	.Ltmp1509 # Offset: 31
    00000021: 	testl	%esi, %esi
    00000023: 	movl	$0x1, %edi
    00000028: 	cmovgl	%esi, %edi
    0000002b: 	cmpl	$0x1, %esi
    0000002e: 	jle	.Ltmp1510 # Offset: 46
    00000034: 	movl	%edi, %edx
    00000036: 	pxor	%xmm0, %xmm0
    0000003a: 	movq	%rcx, %rax
    0000003d: 	shrl	%edx
    0000003f: 	subl	$0x1, %edx
    00000042: 	shlq	$0x4, %rdx
    00000046: 	leaq	0x10(%rcx,%rdx), %rdx
    0000004b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1511:
    00000050: 	movsd	(%rax), %xmm1
    00000054: 	addq	$0x10, %rax
    00000058: 	addsd	%xmm1, %xmm0
    0000005c: 	movsd	-0x8(%rax), %xmm1
    00000061: 	addsd	%xmm1, %xmm0
    00000065: 	cmpq	%rax, %rdx
    00000068: 	jne	.Ltmp1511 # Offset: 104
    0000006a: 	movl	%edi, %eax
    0000006c: 	andl	$-0x2, %eax
    0000006f: 	andl	$0x1, %edi
    00000072: 	je	.Ltmp1512 # Offset: 114
.Ltmp1519:
    00000078: 	cltq
    0000007a: 	addsd	(%rcx,%rax,8), %xmm0
    0000007f: 	retq # Offset: 127
.Ltmp1509:
    00000080: 	movsd	DATAat0x38a38(%rip), %xmm2
    00000088: 	movl	$0x1, %edx
    0000008d: 	pxor	%xmm0, %xmm0
    00000091: 	nopl	(%rax) # Size: 7
.Ltmp1513:
    00000098: 	movsd	-0x8(%rcx,%rdx,8), %xmm3
    0000009e: 	movl	%edx, %eax
    000000a0: 	addq	$0x1, %rdx
    000000a4: 	addsd	%xmm2, %xmm3
    000000a8: 	addsd	%xmm3, %xmm0
    000000ac: 	pxor	%xmm3, %xmm3
    000000b0: 	cvtsi2sd	%eax, %xmm3
    000000b4: 	comisd	%xmm3, %xmm1
    000000b8: 	ja	.Ltmp1513 # Offset: 184
    000000ba: 	addl	$0x1, %eax
    000000bd: 	cltq
    000000bf: 	nop # Size: 1
.Ltmp1514:
    000000c0: 	movsd	-0x8(%rcx,%rax,8), %xmm1
    000000c6: 	movl	%eax, %edx
    000000c8: 	addq	$0x1, %rax
    000000cc: 	subsd	%xmm2, %xmm1
    000000d0: 	addsd	%xmm1, %xmm0
    000000d4: 	pxor	%xmm1, %xmm1
    000000d8: 	cvtsi2sd	%edx, %xmm1
    000000dc: 	comisd	%xmm1, %xmm4
    000000e0: 	ja	.Ltmp1514 # Offset: 224
    000000e2: 	movl	%esi, %eax
    000000e4: 	movl	$0x1, %r8d
    000000ea: 	subl	%edx, %eax
    000000ec: 	cmpl	%edx, %esi
    000000ee: 	cmovgl	%eax, %r8d
    000000f2: 	cmpl	$0x1, %eax
    000000f5: 	je	.Ltmp1515 # Offset: 245
    000000f7: 	cmpl	%edx, %esi
    000000f9: 	jle	.Ltmp1515 # Offset: 249
    000000fb: 	movslq	%edx, %rax
    000000fe: 	leaq	(%rcx,%rax,8), %rsi
    00000102: 	movl	%r8d, %eax
    00000105: 	shrl	%eax
    00000107: 	leal	-0x1(%rax), %edi
    0000010a: 	leaq	0x10(%rsi), %rax
    0000010e: 	shlq	$0x4, %rdi
    00000112: 	addq	%rax, %rdi
    00000115: 	jmp	.Ltmp1516 # Offset: 277
    00000117: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1517:
    00000120: 	addq	$0x10, %rax
.Ltmp1516:
    00000124: 	movupd	(%rsi), %xmm1
    00000128: 	movq	%rax, %rsi
    0000012b: 	addsd	%xmm1, %xmm0
    0000012f: 	unpckhpd	%xmm1, %xmm1
    00000133: 	addsd	%xmm1, %xmm0
    00000137: 	cmpq	%rdi, %rax
    0000013a: 	jne	.Ltmp1517 # Offset: 314
    0000013c: 	movl	%r8d, %eax
    0000013f: 	andl	$-0x2, %eax
    00000142: 	addl	%eax, %edx
    00000144: 	cmpl	%eax, %r8d
    00000147: 	je	.Ltmp1518 # Offset: 327
.Ltmp1515:
    00000149: 	movslq	%edx, %rdx
    0000014c: 	addsd	(%rcx,%rdx,8), %xmm0
.Ltmp1518:
    00000151: 	retq # Offset: 337
    00000152: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1510:
    00000158: 	xorl	%eax, %eax
    0000015a: 	pxor	%xmm0, %xmm0
    0000015e: 	jmp	.Ltmp1519 # Offset: 350
    00000163: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1512:
    00000168: 	retq # Offset: 360
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_do_loop3_optIdET_PKS0_iS0_"

Binary Function "_Z19test_goto_loop3_optIdET_PKS0_iS0_" after disassembly {
  Number      : 197
  State       : disassembled
  Address     : 0x12ae0
  Size        : 0x16f
  MaxSize     : 0x170
  Offset      : 0x12ae0
  Section     : .text
  Orc Section : .local.text._Z19test_goto_loop3_optIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0196:
    00000000: 	endbr64
    00000004: 	movapd	%xmm0, %xmm4
    00000008: 	movapd	%xmm0, %xmm1
    0000000c: 	movl	%esi, %ecx
    0000000e: 	addsd	%xmm0, %xmm4
    00000012: 	pxor	%xmm0, %xmm0
    00000016: 	cvtsi2sd	%esi, %xmm0
    0000001a: 	comisd	%xmm4, %xmm0
    0000001e: 	pxor	%xmm0, %xmm0
    00000022: 	jb	.Ltmp1520 # Offset: 34
    00000024: 	testl	%esi, %esi
    00000026: 	jle	.Ltmp1521 # Offset: 38
    0000002c: 	cmpl	$0x1, %esi
    0000002f: 	je	.Ltmp1522 # Offset: 47
    00000035: 	movl	%esi, %edx
    00000037: 	movq	%rdi, %rax
    0000003a: 	shrl	%edx
    0000003c: 	subl	$0x1, %edx
    0000003f: 	shlq	$0x4, %rdx
    00000043: 	leaq	0x10(%rdi,%rdx), %rdx
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1523:
    00000050: 	movsd	(%rax), %xmm1
    00000054: 	addq	$0x10, %rax
    00000058: 	addsd	%xmm1, %xmm0
    0000005c: 	movsd	-0x8(%rax), %xmm1
    00000061: 	addsd	%xmm1, %xmm0
    00000065: 	cmpq	%rax, %rdx
    00000068: 	jne	.Ltmp1523 # Offset: 104
    0000006a: 	movl	%ecx, %eax
    0000006c: 	andl	$-0x2, %eax
    0000006f: 	andl	$0x1, %ecx
    00000072: 	je	.Ltmp1524 # Offset: 114
.Ltmp1530:
    00000078: 	cltq
    0000007a: 	addsd	(%rdi,%rax,8), %xmm0
    0000007f: 	retq # Offset: 127
.Ltmp1520:
    00000080: 	testl	%esi, %esi
    00000082: 	jle	.Ltmp1521 # Offset: 130
    00000088: 	movsd	DATAat0x38a38(%rip), %xmm3
    00000090: 	movl	$0x1, %edx
    00000095: 	nopl	(%rax) # Size: 3
.Ltmp1525:
    00000098: 	movsd	-0x8(%rdi,%rdx,8), %xmm2
    0000009e: 	movl	%edx, %eax
    000000a0: 	addsd	%xmm3, %xmm2
    000000a4: 	addsd	%xmm2, %xmm0
    000000a8: 	pxor	%xmm2, %xmm2
    000000ac: 	cvtsi2sd	%edx, %xmm2
    000000b0: 	comisd	%xmm2, %xmm1
    000000b4: 	seta	%r8b
    000000b8: 	cmpl	%edx, %ecx
    000000ba: 	setg	%sil
    000000be: 	addq	$0x1, %rdx
    000000c2: 	testb	%sil, %r8b
    000000c5: 	jne	.Ltmp1525 # Offset: 197
    000000c7: 	cmpl	%eax, %ecx
    000000c9: 	jle	.Ltmp1521 # Offset: 201
    000000cf: 	addl	$0x1, %eax
    000000d2: 	cltq
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp1526:
    000000d8: 	movsd	-0x8(%rdi,%rax,8), %xmm1
    000000de: 	movl	%eax, %edx
    000000e0: 	subsd	%xmm3, %xmm1
    000000e4: 	addsd	%xmm1, %xmm0
    000000e8: 	pxor	%xmm1, %xmm1
    000000ec: 	cvtsi2sd	%eax, %xmm1
    000000f0: 	comisd	%xmm1, %xmm4
    000000f4: 	seta	%r8b
    000000f8: 	cmpl	%eax, %ecx
    000000fa: 	setg	%sil
    000000fe: 	addq	$0x1, %rax
    00000102: 	testb	%sil, %r8b
    00000105: 	jne	.Ltmp1526 # Offset: 261
    00000107: 	cmpl	%edx, %ecx
    00000109: 	jle	.Ltmp1521 # Offset: 265
    0000010b: 	subl	%edx, %ecx
    0000010d: 	cmpl	$0x1, %ecx
    00000110: 	je	.Ltmp1527 # Offset: 272
    00000112: 	movslq	%edx, %rax
    00000115: 	leaq	(%rdi,%rax,8), %rsi
    00000119: 	movl	%ecx, %eax
    0000011b: 	shrl	%eax
    0000011d: 	leal	-0x1(%rax), %r8d
    00000121: 	leaq	0x10(%rsi), %rax
    00000125: 	shlq	$0x4, %r8
    00000129: 	addq	%rax, %r8
    0000012c: 	jmp	.Ltmp1528 # Offset: 300
    0000012e: 	nop # Size: 2
.Ltmp1529:
    00000130: 	addq	$0x10, %rax
.Ltmp1528:
    00000134: 	movupd	(%rsi), %xmm1
    00000138: 	movq	%rax, %rsi
    0000013b: 	addsd	%xmm1, %xmm0
    0000013f: 	unpckhpd	%xmm1, %xmm1
    00000143: 	addsd	%xmm1, %xmm0
    00000147: 	cmpq	%r8, %rax
    0000014a: 	jne	.Ltmp1529 # Offset: 330
    0000014c: 	movl	%ecx, %eax
    0000014e: 	andl	$-0x2, %eax
    00000151: 	addl	%eax, %edx
    00000153: 	cmpl	%ecx, %eax
    00000155: 	je	.Ltmp1521 # Offset: 341
.Ltmp1527:
    00000157: 	movslq	%edx, %rdx
    0000015a: 	addsd	(%rdi,%rdx,8), %xmm0
.Ltmp1521:
    0000015f: 	retq # Offset: 351
.Ltmp1524:
    00000160: 	retq # Offset: 352
    00000161: 	nopl	(%rax) # Size: 7
.Ltmp1522:
    00000168: 	xorl	%eax, %eax
    0000016a: 	jmp	.Ltmp1530 # Offset: 362
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_goto_loop3_optIdET_PKS0_iS0_"

Binary Function "_Z23test_goto_loop3_halfoptIdET_PKS0_iS0_" after disassembly {
  Number      : 198
  State       : disassembled
  Address     : 0x12c50
  Size        : 0x105
  MaxSize     : 0x110
  Offset      : 0x12c50
  Section     : .text
  Orc Section : .local.text._Z23test_goto_loop3_halfoptIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0197:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movapd	%xmm0, %xmm1
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp1531 # Offset: 13
    00000013: 	movsd	DATAat0x38a38(%rip), %xmm3
    0000001b: 	movl	$0x1, %edx
    00000020: 	pxor	%xmm0, %xmm0
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1532:
    00000028: 	movsd	-0x8(%rcx,%rdx,8), %xmm2
    0000002e: 	movl	%edx, %eax
    00000030: 	addsd	%xmm3, %xmm2
    00000034: 	addsd	%xmm2, %xmm0
    00000038: 	pxor	%xmm2, %xmm2
    0000003c: 	cvtsi2sd	%edx, %xmm2
    00000040: 	comisd	%xmm2, %xmm1
    00000044: 	seta	%r8b
    00000048: 	cmpl	%edx, %esi
    0000004a: 	setg	%dil
    0000004e: 	addq	$0x1, %rdx
    00000052: 	testb	%dil, %r8b
    00000055: 	jne	.Ltmp1532 # Offset: 85
    00000057: 	cmpl	%eax, %esi
    00000059: 	jle	.Ltmp1533 # Offset: 89
    0000005f: 	addsd	%xmm1, %xmm1
    00000063: 	addl	$0x1, %eax
    00000066: 	cltq
    00000068: 	movapd	%xmm1, %xmm2
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp1534:
    00000070: 	movsd	-0x8(%rcx,%rax,8), %xmm1
    00000076: 	movl	%eax, %edx
    00000078: 	subsd	%xmm3, %xmm1
    0000007c: 	addsd	%xmm1, %xmm0
    00000080: 	pxor	%xmm1, %xmm1
    00000084: 	cvtsi2sd	%eax, %xmm1
    00000088: 	comisd	%xmm1, %xmm2
    0000008c: 	seta	%r8b
    00000090: 	cmpl	%eax, %esi
    00000092: 	setg	%dil
    00000096: 	addq	$0x1, %rax
    0000009a: 	testb	%dil, %r8b
    0000009d: 	jne	.Ltmp1534 # Offset: 157
    0000009f: 	cmpl	%edx, %esi
    000000a1: 	jle	.Ltmp1533 # Offset: 161
    000000a3: 	subl	%edx, %esi
    000000a5: 	cmpl	$0x1, %esi
    000000a8: 	je	.Ltmp1535 # Offset: 168
    000000aa: 	movslq	%edx, %rax
    000000ad: 	leaq	(%rcx,%rax,8), %rdi
    000000b1: 	movl	%esi, %eax
    000000b3: 	shrl	%eax
    000000b5: 	leal	-0x1(%rax), %r8d
    000000b9: 	leaq	0x10(%rdi), %rax
    000000bd: 	shlq	$0x4, %r8
    000000c1: 	addq	%rax, %r8
    000000c4: 	jmp	.Ltmp1536 # Offset: 196
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1537:
    000000d0: 	addq	$0x10, %rax
.Ltmp1536:
    000000d4: 	movupd	(%rdi), %xmm1
    000000d8: 	movq	%rax, %rdi
    000000db: 	addsd	%xmm1, %xmm0
    000000df: 	unpckhpd	%xmm1, %xmm1
    000000e3: 	addsd	%xmm1, %xmm0
    000000e7: 	cmpq	%rax, %r8
    000000ea: 	jne	.Ltmp1537 # Offset: 234
    000000ec: 	movl	%esi, %eax
    000000ee: 	andl	$-0x2, %eax
    000000f1: 	addl	%eax, %edx
    000000f3: 	cmpl	%esi, %eax
    000000f5: 	je	.Ltmp1533 # Offset: 245
.Ltmp1535:
    000000f7: 	movslq	%edx, %rdx
    000000fa: 	addsd	(%rcx,%rdx,8), %xmm0
    000000ff: 	retq # Offset: 255
.Ltmp1531:
    00000100: 	pxor	%xmm0, %xmm0
.Ltmp1533:
    00000104: 	retq # Offset: 260
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_goto_loop3_halfoptIdET_PKS0_iS0_"

Binary Function "_Z20test_for_loop3_paramIdET_PKS0_iS0_" after disassembly {
  Number      : 199
  State       : disassembled
  Address     : 0x12d60
  Size        : 0x89
  MaxSize     : 0x90
  Offset      : 0x12d60
  Section     : .text
  Orc Section : .local.text._Z20test_for_loop3_paramIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0198:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp1538 # Offset: 6
    00000008: 	movsd	DATAat0x38a38(%rip), %xmm5
    00000010: 	movslq	%esi, %rsi
    00000013: 	xorl	%eax, %eax
    00000015: 	pxor	%xmm3, %xmm3
    00000019: 	jmp	.Ltmp1539 # Offset: 25
    0000001b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1541:
    00000020: 	addsd	%xmm5, %xmm1
    00000024: 	addsd	%xmm1, %xmm3
.Ltmp1543:
    00000028: 	addq	$0x1, %rax
    0000002c: 	cmpq	%rax, %rsi
    0000002f: 	je	.Ltmp1540 # Offset: 47
.Ltmp1539:
    00000031: 	pxor	%xmm2, %xmm2
    00000035: 	movsd	(%rdi,%rax,8), %xmm1
    0000003a: 	cvtsi2sd	%eax, %xmm2
    0000003e: 	comisd	%xmm2, %xmm0
    00000042: 	ja	.Ltmp1541 # Offset: 66
    00000044: 	movapd	%xmm0, %xmm4
    00000048: 	addsd	%xmm0, %xmm4
    0000004c: 	comisd	%xmm2, %xmm4
    00000050: 	jbe	.Ltmp1542 # Offset: 80
    00000052: 	subsd	%xmm5, %xmm1
    00000056: 	addq	$0x1, %rax
    0000005a: 	addsd	%xmm1, %xmm3
    0000005e: 	cmpq	%rax, %rsi
    00000061: 	jne	.Ltmp1539 # Offset: 97
.Ltmp1540:
    00000063: 	movapd	%xmm3, %xmm0
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1542:
    00000070: 	addsd	%xmm1, %xmm3
    00000074: 	jmp	.Ltmp1543 # Offset: 116
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1538:
    00000080: 	pxor	%xmm3, %xmm3
    00000084: 	movapd	%xmm3, %xmm0
    00000088: 	retq # Offset: 136
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_for_loop3_paramIdET_PKS0_iS0_"

Binary Function "_Z22test_while_loop3_paramIdET_PKS0_iS0_" after disassembly {
  Number      : 200
  State       : disassembled
  Address     : 0x12df0
  Size        : 0x89
  MaxSize     : 0x90
  Offset      : 0x12df0
  Section     : .text
  Orc Section : .local.text._Z22test_while_loop3_paramIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0199:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp1544 # Offset: 6
    00000008: 	movsd	DATAat0x38a38(%rip), %xmm5
    00000010: 	movslq	%esi, %rsi
    00000013: 	xorl	%eax, %eax
    00000015: 	pxor	%xmm3, %xmm3
    00000019: 	jmp	.Ltmp1545 # Offset: 25
    0000001b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1547:
    00000020: 	addsd	%xmm5, %xmm1
    00000024: 	addsd	%xmm1, %xmm3
.Ltmp1549:
    00000028: 	addq	$0x1, %rax
    0000002c: 	cmpq	%rax, %rsi
    0000002f: 	je	.Ltmp1546 # Offset: 47
.Ltmp1545:
    00000031: 	pxor	%xmm2, %xmm2
    00000035: 	movsd	(%rdi,%rax,8), %xmm1
    0000003a: 	cvtsi2sd	%eax, %xmm2
    0000003e: 	comisd	%xmm2, %xmm0
    00000042: 	ja	.Ltmp1547 # Offset: 66
    00000044: 	movapd	%xmm0, %xmm4
    00000048: 	addsd	%xmm0, %xmm4
    0000004c: 	comisd	%xmm2, %xmm4
    00000050: 	jbe	.Ltmp1548 # Offset: 80
    00000052: 	subsd	%xmm5, %xmm1
    00000056: 	addq	$0x1, %rax
    0000005a: 	addsd	%xmm1, %xmm3
    0000005e: 	cmpq	%rax, %rsi
    00000061: 	jne	.Ltmp1545 # Offset: 97
.Ltmp1546:
    00000063: 	movapd	%xmm3, %xmm0
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1548:
    00000070: 	addsd	%xmm1, %xmm3
    00000074: 	jmp	.Ltmp1549 # Offset: 116
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1544:
    00000080: 	pxor	%xmm3, %xmm3
    00000084: 	movapd	%xmm3, %xmm0
    00000088: 	retq # Offset: 136
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_while_loop3_paramIdET_PKS0_iS0_"

Binary Function "_Z21test_do_loop3_halfoptIhET_PKS0_iS0_" after disassembly {
  Number      : 201
  State       : disassembled
  Address     : 0x12e80
  Size        : 0x42f
  MaxSize     : 0x430
  Offset      : 0x12e80
  Section     : .text
  Orc Section : .local.text._Z21test_do_loop3_halfoptIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0200:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp1550 # Offset: 8
    0000000e: 	movzbl	%dl, %ecx
    00000011: 	testb	%dl, %dl
    00000013: 	movl	%edx, %r10d
    00000016: 	movl	$0x1, %edx
    0000001b: 	pushq	%rbx
    0000001c: 	cmovnel	%ecx, %edx
    0000001f: 	movl	%esi, %r8d
    00000022: 	cmpb	$0xf, %r10b
    00000026: 	jbe	.Ltmp1551 # Offset: 38
    0000002c: 	movl	%edx, %esi
    0000002e: 	movdqa	DATAat0x38840(%rip), %xmm2
    00000036: 	movq	%rdi, %rax
    00000039: 	pxor	%xmm1, %xmm1
    0000003d: 	shrl	$0x4, %esi
    00000040: 	subl	$0x1, %esi
    00000043: 	shlq	$0x4, %rsi
    00000047: 	leaq	0x10(%rdi,%rsi), %rsi
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp1552:
    00000050: 	movdqu	(%rax), %xmm0
    00000054: 	addq	$0x10, %rax
    00000058: 	paddb	%xmm2, %xmm0
    0000005c: 	paddb	%xmm0, %xmm1
    00000060: 	cmpq	%rax, %rsi
    00000063: 	jne	.Ltmp1552 # Offset: 99
    00000065: 	movdqa	%xmm1, %xmm0
    00000069: 	movl	%edx, %esi
    0000006b: 	psrldq	$0x8, %xmm0
    00000070: 	andl	$-0x10, %esi
    00000073: 	paddb	%xmm0, %xmm1
    00000077: 	pxor	%xmm0, %xmm0
    0000007b: 	movl	%esi, %r9d
    0000007e: 	psadbw	%xmm0, %xmm1
    00000082: 	movd	%xmm1, %eax
    00000086: 	cmpl	%esi, %edx
    00000088: 	je	.Ltmp1553 # Offset: 136
.Ltmp1565:
    0000008e: 	subl	%esi, %edx
    00000090: 	leal	-0x1(%rdx), %r11d
    00000094: 	cmpl	$0x6, %r11d
    00000098: 	jbe	.Ltmp1554 # Offset: 152
    0000009a: 	movq	DATAat0x38840(%rip), %xmm1
    000000a2: 	movq	(%rdi,%rsi), %xmm0
    000000a7: 	paddb	%xmm0, %xmm1
    000000ab: 	pxor	%xmm0, %xmm0
    000000af: 	movdqa	%xmm1, %xmm3
    000000b3: 	psadbw	%xmm0, %xmm3
    000000b7: 	movq	%xmm3, %rsi
    000000bc: 	movq	%xmm3, -0x8(%rsp)
    000000c2: 	movl	%esi, %r11d
    000000c5: 	movl	%edx, %esi
    000000c7: 	andl	$-0x8, %esi
    000000ca: 	addl	%r11d, %eax
    000000cd: 	addl	%esi, %r9d
    000000d0: 	cmpl	%esi, %edx
    000000d2: 	je	.Ltmp1553 # Offset: 210
.Ltmp1554:
    000000d4: 	movslq	%r9d, %rdx
    000000d7: 	movzbl	(%rdi,%rdx), %edx
    000000db: 	leal	0x1(%rax,%rdx), %eax
    000000df: 	leal	0x1(%r9), %edx
    000000e3: 	cmpl	%edx, %ecx
    000000e5: 	jle	.Ltmp1553 # Offset: 229
    000000e7: 	movslq	%edx, %rdx
    000000ea: 	movzbl	(%rdi,%rdx), %edx
    000000ee: 	leal	0x1(%rax,%rdx), %eax
    000000f2: 	leal	0x2(%r9), %edx
    000000f6: 	cmpl	%edx, %ecx
    000000f8: 	jle	.Ltmp1553 # Offset: 248
    000000fa: 	movslq	%edx, %rdx
    000000fd: 	movzbl	(%rdi,%rdx), %edx
    00000101: 	leal	0x1(%rax,%rdx), %eax
    00000105: 	leal	0x3(%r9), %edx
    00000109: 	cmpl	%edx, %ecx
    0000010b: 	jle	.Ltmp1553 # Offset: 267
    0000010d: 	movslq	%edx, %rdx
    00000110: 	movzbl	(%rdi,%rdx), %edx
    00000114: 	leal	0x1(%rax,%rdx), %eax
    00000118: 	leal	0x4(%r9), %edx
    0000011c: 	cmpl	%edx, %ecx
    0000011e: 	jle	.Ltmp1553 # Offset: 286
    00000120: 	movslq	%edx, %rdx
    00000123: 	movzbl	(%rdi,%rdx), %edx
    00000127: 	leal	0x1(%rax,%rdx), %eax
    0000012b: 	leal	0x5(%r9), %edx
    0000012f: 	cmpl	%edx, %ecx
    00000131: 	jle	.Ltmp1553 # Offset: 305
    00000133: 	movslq	%edx, %rdx
    00000136: 	movzbl	(%rdi,%rdx), %edx
    0000013a: 	leal	0x1(%rax,%rdx), %eax
    0000013e: 	leal	0x6(%r9), %edx
    00000142: 	cmpl	%edx, %ecx
    00000144: 	jle	.Ltmp1553 # Offset: 324
    00000146: 	movslq	%edx, %rdx
    00000149: 	movzbl	(%rdi,%rdx), %edx
    0000014d: 	leal	0x1(%rax,%rdx), %eax
.Ltmp1553:
    00000151: 	movl	$0x1, %r9d
    00000157: 	testb	%r10b, %r10b
    0000015a: 	movl	%r9d, %r10d
    0000015d: 	cmovnel	%ecx, %r10d
    00000161: 	addl	%ecx, %ecx
    00000163: 	movl	%ecx, %r11d
    00000166: 	subl	%r10d, %r11d
    00000169: 	cmpl	%r10d, %ecx
    0000016c: 	cmovgl	%r11d, %r9d
    00000170: 	subl	$0x1, %r11d
    00000174: 	cmpl	%r10d, %ecx
    00000177: 	jle	.Ltmp1555 # Offset: 375
    0000017d: 	cmpl	$0xe, %r11d
    00000181: 	jbe	.Ltmp1555 # Offset: 385
    00000187: 	movl	%r9d, %edx
    0000018a: 	pxor	%xmm1, %xmm1
    0000018e: 	pcmpeqd	%xmm2, %xmm2
    00000192: 	movslq	%r10d, %rsi
    00000195: 	shrl	$0x4, %edx
    00000198: 	addq	%rdi, %rsi
    0000019b: 	leal	-0x1(%rdx), %ebx
    0000019e: 	leaq	0x10(%rsi), %rdx
    000001a2: 	shlq	$0x4, %rbx
    000001a6: 	addq	%rdx, %rbx
    000001a9: 	jmp	.Ltmp1556 # Offset: 425
    000001ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1557:
    000001b0: 	addq	$0x10, %rdx
.Ltmp1556:
    000001b4: 	movdqu	(%rsi), %xmm0
    000001b8: 	movq	%rdx, %rsi
    000001bb: 	paddb	%xmm2, %xmm0
    000001bf: 	paddb	%xmm0, %xmm1
    000001c3: 	cmpq	%rbx, %rdx
    000001c6: 	jne	.Ltmp1557 # Offset: 454
    000001c8: 	movdqa	%xmm1, %xmm0
    000001cc: 	movl	%r9d, %ebx
    000001cf: 	psrldq	$0x8, %xmm0
    000001d4: 	andl	$-0x10, %ebx
    000001d7: 	paddb	%xmm0, %xmm1
    000001db: 	pxor	%xmm0, %xmm0
    000001df: 	leal	(%rbx,%r10), %esi
    000001e3: 	psadbw	%xmm0, %xmm1
    000001e7: 	movd	%xmm1, %edx
    000001eb: 	addl	%edx, %eax
    000001ed: 	cmpl	%ebx, %r9d
    000001f0: 	je	.Ltmp1558 # Offset: 496
.Ltmp1566:
    000001f6: 	subl	%ebx, %r9d
    000001f9: 	leal	-0x1(%r9), %edx
    000001fd: 	cmpl	$0x6, %edx
    00000200: 	jbe	.Ltmp1559 # Offset: 512
    00000202: 	movq	DATAat0x38a10(%rip), %xmm1
    0000020a: 	movslq	%r10d, %rdx
    0000020d: 	addq	%rdi, %rdx
    00000210: 	movq	(%rdx,%rbx), %xmm0
    00000215: 	paddb	%xmm0, %xmm1
    00000219: 	pxor	%xmm0, %xmm0
    0000021d: 	movdqa	%xmm1, %xmm4
    00000221: 	psadbw	%xmm0, %xmm4
    00000225: 	movq	%xmm4, %rdx
    0000022a: 	movq	%xmm4, -0x10(%rsp)
    00000230: 	movl	%edx, %ebx
    00000232: 	movl	%r9d, %edx
    00000235: 	andl	$-0x8, %edx
    00000238: 	addl	%ebx, %eax
    0000023a: 	addl	%edx, %esi
    0000023c: 	cmpl	%edx, %r9d
    0000023f: 	je	.Ltmp1558 # Offset: 575
.Ltmp1559:
    00000241: 	movslq	%esi, %rdx
    00000244: 	movzbl	(%rdi,%rdx), %edx
    00000248: 	leal	-0x1(%rax,%rdx), %eax
    0000024c: 	leal	0x1(%rsi), %edx
    0000024f: 	cmpl	%edx, %ecx
    00000251: 	jle	.Ltmp1558 # Offset: 593
    00000253: 	movslq	%edx, %rdx
    00000256: 	movzbl	(%rdi,%rdx), %edx
    0000025a: 	leal	-0x1(%rax,%rdx), %eax
    0000025e: 	leal	0x2(%rsi), %edx
    00000261: 	cmpl	%edx, %ecx
    00000263: 	jle	.Ltmp1558 # Offset: 611
    00000265: 	movslq	%edx, %rdx
    00000268: 	movzbl	(%rdi,%rdx), %edx
    0000026c: 	leal	-0x1(%rax,%rdx), %eax
    00000270: 	leal	0x3(%rsi), %edx
    00000273: 	cmpl	%edx, %ecx
    00000275: 	jle	.Ltmp1558 # Offset: 629
    00000277: 	movslq	%edx, %rdx
    0000027a: 	movzbl	(%rdi,%rdx), %edx
    0000027e: 	leal	-0x1(%rax,%rdx), %eax
    00000282: 	leal	0x4(%rsi), %edx
    00000285: 	cmpl	%edx, %ecx
    00000287: 	jle	.Ltmp1558 # Offset: 647
    00000289: 	movslq	%edx, %rdx
    0000028c: 	movzbl	(%rdi,%rdx), %edx
    00000290: 	leal	-0x1(%rax,%rdx), %eax
    00000294: 	leal	0x5(%rsi), %edx
    00000297: 	cmpl	%edx, %ecx
    00000299: 	jle	.Ltmp1558 # Offset: 665
    0000029b: 	movslq	%edx, %rdx
    0000029e: 	addl	$0x6, %esi
    000002a1: 	movzbl	(%rdi,%rdx), %edx
    000002a5: 	leal	-0x1(%rax,%rdx), %eax
    000002a9: 	cmpl	%esi, %ecx
    000002ab: 	jle	.Ltmp1558 # Offset: 683
    000002ad: 	movslq	%esi, %rsi
    000002b0: 	movzbl	(%rdi,%rsi), %edx
    000002b4: 	leal	-0x1(%rax,%rdx), %eax
.Ltmp1558:
    000002b8: 	xorl	%edx, %edx
    000002ba: 	cmpl	%r10d, %ecx
    000002bd: 	leal	0x1(%r10), %r9d
    000002c1: 	movl	$0x1, %r10d
    000002c7: 	cmovlel	%edx, %r11d
    000002cb: 	movl	%r8d, %edx
    000002ce: 	leal	(%r11,%r9), %esi
    000002d2: 	subl	%esi, %edx
    000002d4: 	cmpl	%esi, %r8d
    000002d7: 	cmovgl	%edx, %r10d
    000002db: 	subl	$0x1, %edx
    000002de: 	cmpl	$0xe, %edx
    000002e1: 	jbe	.Ltmp1560 # Offset: 737
    000002e7: 	cmpl	%esi, %r8d
    000002ea: 	jle	.Ltmp1560 # Offset: 746
    000002f0: 	movslq	%r11d, %rdx
    000002f3: 	movslq	%r9d, %rcx
    000002f6: 	pxor	%xmm0, %xmm0
    000002fa: 	addq	%rdx, %rcx
    000002fd: 	movl	%r10d, %edx
    00000300: 	shrl	$0x4, %edx
    00000303: 	addq	%rdi, %rcx
    00000306: 	leal	-0x1(%rdx), %ebx
    00000309: 	leaq	0x10(%rcx), %rdx
    0000030d: 	shlq	$0x4, %rbx
    00000311: 	addq	%rdx, %rbx
    00000314: 	jmp	.Ltmp1561 # Offset: 788
    00000316: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1562:
    00000320: 	addq	$0x10, %rdx
.Ltmp1561:
    00000324: 	movdqu	(%rcx), %xmm1
    00000328: 	movq	%rdx, %rcx
    0000032b: 	paddb	%xmm1, %xmm0
    0000032f: 	cmpq	%rbx, %rdx
    00000332: 	jne	.Ltmp1562 # Offset: 818
    00000334: 	movdqa	%xmm0, %xmm1
    00000338: 	psrldq	$0x8, %xmm1
    0000033d: 	paddb	%xmm1, %xmm0
    00000341: 	pxor	%xmm1, %xmm1
    00000345: 	psadbw	%xmm1, %xmm0
    00000349: 	movd	%xmm0, %edx
    0000034d: 	addl	%edx, %eax
    0000034f: 	movl	%r10d, %edx
    00000352: 	andl	$-0x10, %edx
    00000355: 	addl	%edx, %esi
    00000357: 	cmpl	%r10d, %edx
    0000035a: 	je	.Ltmp1563 # Offset: 858
.Ltmp1567:
    00000360: 	subl	%edx, %r10d
    00000363: 	leal	-0x1(%r10), %ecx
    00000367: 	cmpl	$0x6, %ecx
    0000036a: 	jbe	.Ltmp1564 # Offset: 874
    0000036c: 	movslq	%r9d, %r9
    0000036f: 	movslq	%r11d, %r11
    00000372: 	pxor	%xmm0, %xmm0
    00000376: 	addq	%rdi, %r9
    00000379: 	addq	%r11, %r9
    0000037c: 	movq	(%r9,%rdx), %xmm1
    00000382: 	movdqa	%xmm1, %xmm5
    00000386: 	psadbw	%xmm0, %xmm5
    0000038a: 	movq	%xmm5, %rdx
    0000038f: 	addl	%edx, %eax
    00000391: 	movl	%r10d, %edx
    00000394: 	andl	$-0x8, %edx
    00000397: 	addl	%edx, %esi
    00000399: 	cmpl	%edx, %r10d
    0000039c: 	je	.Ltmp1563 # Offset: 924
.Ltmp1564:
    0000039e: 	movslq	%esi, %rdx
    000003a1: 	addb	(%rdi,%rdx), %al
    000003a4: 	leal	0x1(%rsi), %edx
    000003a7: 	cmpl	%edx, %r8d
    000003aa: 	jle	.Ltmp1563 # Offset: 938
    000003ac: 	movslq	%edx, %rdx
    000003af: 	addb	(%rdi,%rdx), %al
    000003b2: 	leal	0x2(%rsi), %edx
    000003b5: 	cmpl	%edx, %r8d
    000003b8: 	jle	.Ltmp1563 # Offset: 952
    000003ba: 	movslq	%edx, %rdx
    000003bd: 	addb	(%rdi,%rdx), %al
    000003c0: 	leal	0x3(%rsi), %edx
    000003c3: 	cmpl	%edx, %r8d
    000003c6: 	jle	.Ltmp1563 # Offset: 966
    000003c8: 	movslq	%edx, %rdx
    000003cb: 	addb	(%rdi,%rdx), %al
    000003ce: 	leal	0x4(%rsi), %edx
    000003d1: 	cmpl	%edx, %r8d
    000003d4: 	jle	.Ltmp1563 # Offset: 980
    000003d6: 	movslq	%edx, %rdx
    000003d9: 	addb	(%rdi,%rdx), %al
    000003dc: 	leal	0x5(%rsi), %edx
    000003df: 	cmpl	%edx, %r8d
    000003e2: 	jle	.Ltmp1563 # Offset: 994
    000003e4: 	movslq	%edx, %rdx
    000003e7: 	addl	$0x6, %esi
    000003ea: 	addb	(%rdi,%rdx), %al
    000003ed: 	cmpl	%esi, %r8d
    000003f0: 	jle	.Ltmp1563 # Offset: 1008
    000003f2: 	movslq	%esi, %rsi
    000003f5: 	addb	(%rdi,%rsi), %al
.Ltmp1563:
    000003f8: 	popq	%rbx
    000003f9: 	retq # Offset: 1017
    000003fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1550:
    00000400: 	retq # Offset: 1024
    00000401: 	nopl	(%rax) # Size: 7
.Ltmp1551:
    00000408: 	xorl	%esi, %esi
    0000040a: 	xorl	%r9d, %r9d
    0000040d: 	jmp	.Ltmp1565 # Offset: 1037
    00000412: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1555:
    00000418: 	movl	%r10d, %esi
    0000041b: 	xorl	%ebx, %ebx
    0000041d: 	jmp	.Ltmp1566 # Offset: 1053
    00000422: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1560:
    00000428: 	xorl	%edx, %edx
    0000042a: 	jmp	.Ltmp1567 # Offset: 1066
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_do_loop3_halfoptIhET_PKS0_iS0_"

Binary Function "_Z19test_goto_loop3_optIhET_PKS0_iS0_" after disassembly {
  Number      : 202
  State       : disassembled
  Address     : 0x132b0
  Size        : 0x2d6
  MaxSize     : 0x2e0
  Offset      : 0x132b0
  Section     : .text
  Orc Section : .local.text._Z19test_goto_loop3_optIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0201:
    00000000: 	endbr64
    00000004: 	movzbl	%dl, %edx
    00000007: 	movl	%esi, %ecx
    00000009: 	xorl	%eax, %eax
    0000000b: 	leal	(%rdx,%rdx), %r8d
    0000000f: 	cmpl	%esi, %r8d
    00000012: 	jg	.Ltmp1568 # Offset: 18
    00000018: 	testl	%esi, %esi
    0000001a: 	je	.Ltmp1569 # Offset: 26
    00000020: 	movl	$0x1, %edx
    00000025: 	cmovgl	%esi, %edx
    00000028: 	cmpl	$0xf, %esi
    0000002b: 	jle	.Ltmp1570 # Offset: 43
    00000031: 	movl	%edx, %esi
    00000033: 	pxor	%xmm0, %xmm0
    00000037: 	movq	%rdi, %rax
    0000003a: 	shrl	$0x4, %esi
    0000003d: 	subl	$0x1, %esi
    00000040: 	shlq	$0x4, %rsi
    00000044: 	leaq	0x10(%rdi,%rsi), %rsi
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp1571:
    00000050: 	movdqu	(%rax), %xmm3
    00000054: 	addq	$0x10, %rax
    00000058: 	paddb	%xmm3, %xmm0
    0000005c: 	cmpq	%rsi, %rax
    0000005f: 	jne	.Ltmp1571 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	movl	%edx, %r8d
    00000068: 	psrldq	$0x8, %xmm1
    0000006d: 	andl	$-0x10, %r8d
    00000071: 	paddb	%xmm1, %xmm0
    00000075: 	pxor	%xmm1, %xmm1
    00000079: 	movl	%r8d, %esi
    0000007c: 	psadbw	%xmm1, %xmm0
    00000080: 	movd	%xmm0, %eax
    00000084: 	cmpl	%edx, %r8d
    00000087: 	je	.Ltmp1572 # Offset: 135
.Ltmp1582:
    0000008d: 	subl	%r8d, %edx
    00000090: 	leal	-0x1(%rdx), %r9d
    00000094: 	cmpl	$0x6, %r9d
    00000098: 	jbe	.Ltmp1573 # Offset: 152
    0000009a: 	movq	(%rdi,%r8), %xmm1
    000000a0: 	pxor	%xmm0, %xmm0
    000000a4: 	movdqa	%xmm1, %xmm5
    000000a8: 	psadbw	%xmm0, %xmm5
    000000ac: 	movq	%xmm5, %r8
    000000b1: 	addl	%r8d, %eax
    000000b4: 	movl	%edx, %r8d
    000000b7: 	andl	$-0x8, %r8d
    000000bb: 	addl	%r8d, %esi
    000000be: 	cmpl	%r8d, %edx
    000000c1: 	je	.Ltmp1569 # Offset: 193
.Ltmp1573:
    000000c3: 	movslq	%esi, %rdx
    000000c6: 	addb	(%rdi,%rdx), %al
    000000c9: 	leal	0x1(%rsi), %edx
    000000cc: 	cmpl	%edx, %ecx
    000000ce: 	jle	.Ltmp1569 # Offset: 206
    000000d0: 	movslq	%edx, %rdx
    000000d3: 	addb	(%rdi,%rdx), %al
    000000d6: 	leal	0x2(%rsi), %edx
    000000d9: 	cmpl	%edx, %ecx
    000000db: 	jle	.Ltmp1569 # Offset: 219
    000000dd: 	movslq	%edx, %rdx
    000000e0: 	addb	(%rdi,%rdx), %al
    000000e3: 	leal	0x3(%rsi), %edx
    000000e6: 	cmpl	%edx, %ecx
    000000e8: 	jle	.Ltmp1569 # Offset: 232
    000000ea: 	movslq	%edx, %rdx
    000000ed: 	addb	(%rdi,%rdx), %al
    000000f0: 	leal	0x4(%rsi), %edx
    000000f3: 	cmpl	%edx, %ecx
    000000f5: 	jle	.Ltmp1569 # Offset: 245
    000000f7: 	movslq	%edx, %rdx
    000000fa: 	addb	(%rdi,%rdx), %al
    000000fd: 	leal	0x5(%rsi), %edx
    00000100: 	cmpl	%edx, %ecx
    00000102: 	jle	.Ltmp1569 # Offset: 258
    00000104: 	movslq	%edx, %rdx
    00000107: 	addl	$0x6, %esi
    0000010a: 	addb	(%rdi,%rdx), %al
    0000010d: 	cmpl	%esi, %ecx
    0000010f: 	jle	.Ltmp1569 # Offset: 271
    00000111: 	movslq	%esi, %rsi
    00000114: 	addb	(%rdi,%rsi), %al
    00000117: 	retq # Offset: 279
    00000118: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1568:
    00000120: 	testl	%esi, %esi
    00000122: 	jg	.Ltmp1574 # Offset: 290
.Ltmp1569:
    00000124: 	retq # Offset: 292
    00000125: 	nopl	(%rax) # Size: 3
.Ltmp1574:
    00000128: 	cmpl	%esi, %edx
    0000012a: 	cmovgl	%esi, %edx
    0000012d: 	movl	$0x1, %esi
    00000132: 	testl	%edx, %edx
    00000134: 	cmovgl	%edx, %esi
    00000137: 	cmpl	$0xf, %edx
    0000013a: 	jle	.Ltmp1575 # Offset: 314
    00000140: 	movl	%esi, %r9d
    00000143: 	movdqa	DATAat0x38840(%rip), %xmm2
    0000014b: 	pxor	%xmm1, %xmm1
    0000014f: 	movq	%rdi, %rax
    00000152: 	shrl	$0x4, %r9d
    00000156: 	subl	$0x1, %r9d
    0000015a: 	shlq	$0x4, %r9
    0000015e: 	leaq	0x10(%rdi,%r9), %r9
    00000163: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1576:
    00000168: 	movdqu	(%rax), %xmm0
    0000016c: 	addq	$0x10, %rax
    00000170: 	paddb	%xmm2, %xmm0
    00000174: 	paddb	%xmm0, %xmm1
    00000178: 	cmpq	%rax, %r9
    0000017b: 	jne	.Ltmp1576 # Offset: 379
    0000017d: 	movdqa	%xmm1, %xmm0
    00000181: 	movl	%esi, %r9d
    00000184: 	psrldq	$0x8, %xmm0
    00000189: 	andl	$-0x10, %r9d
    0000018d: 	paddb	%xmm0, %xmm1
    00000191: 	pxor	%xmm0, %xmm0
    00000195: 	movl	%r9d, %r10d
    00000198: 	psadbw	%xmm0, %xmm1
    0000019c: 	movd	%xmm1, %eax
    000001a0: 	cmpl	%r9d, %esi
    000001a3: 	je	.Ltmp1577 # Offset: 419
.Ltmp1581:
    000001a9: 	subl	%r9d, %esi
    000001ac: 	leal	-0x1(%rsi), %r11d
    000001b0: 	cmpl	$0x6, %r11d
    000001b4: 	jbe	.Ltmp1578 # Offset: 436
    000001b6: 	movq	DATAat0x38840(%rip), %xmm1
    000001be: 	movq	(%rdi,%r9), %xmm0
    000001c4: 	paddb	%xmm0, %xmm1
    000001c8: 	pxor	%xmm0, %xmm0
    000001cc: 	movdqa	%xmm1, %xmm4
    000001d0: 	psadbw	%xmm0, %xmm4
    000001d4: 	movq	%xmm4, %r9
    000001d9: 	movq	%xmm4, -0x18(%rsp)
    000001df: 	movl	%r9d, %r11d
    000001e2: 	movl	%esi, %r9d
    000001e5: 	andl	$-0x8, %r9d
    000001e9: 	addl	%r11d, %eax
    000001ec: 	addl	%r9d, %r10d
    000001ef: 	cmpl	%r9d, %esi
    000001f2: 	je	.Ltmp1577 # Offset: 498
.Ltmp1578:
    000001f4: 	movslq	%r10d, %rsi
    000001f7: 	movzbl	(%rdi,%rsi), %esi
    000001fb: 	leal	0x1(%rax,%rsi), %eax
    000001ff: 	leal	0x1(%r10), %esi
    00000203: 	cmpl	%esi, %edx
    00000205: 	jle	.Ltmp1577 # Offset: 517
    00000207: 	movslq	%esi, %rsi
    0000020a: 	movzbl	(%rdi,%rsi), %esi
    0000020e: 	leal	0x1(%rax,%rsi), %eax
    00000212: 	leal	0x2(%r10), %esi
    00000216: 	cmpl	%esi, %edx
    00000218: 	jle	.Ltmp1577 # Offset: 536
    0000021a: 	movslq	%esi, %rsi
    0000021d: 	movzbl	(%rdi,%rsi), %esi
    00000221: 	leal	0x1(%rax,%rsi), %eax
    00000225: 	leal	0x3(%r10), %esi
    00000229: 	cmpl	%esi, %edx
    0000022b: 	jle	.Ltmp1577 # Offset: 555
    0000022d: 	movslq	%esi, %rsi
    00000230: 	movzbl	(%rdi,%rsi), %esi
    00000234: 	leal	0x1(%rax,%rsi), %eax
    00000238: 	leal	0x4(%r10), %esi
    0000023c: 	cmpl	%esi, %edx
    0000023e: 	jle	.Ltmp1577 # Offset: 574
    00000240: 	movslq	%esi, %rsi
    00000243: 	movzbl	(%rdi,%rsi), %esi
    00000247: 	leal	0x1(%rax,%rsi), %eax
    0000024b: 	leal	0x5(%r10), %esi
    0000024f: 	cmpl	%esi, %edx
    00000251: 	jle	.Ltmp1577 # Offset: 593
    00000253: 	movslq	%esi, %rsi
    00000256: 	movzbl	(%rdi,%rsi), %esi
    0000025a: 	leal	0x1(%rax,%rsi), %eax
    0000025e: 	leal	0x6(%r10), %esi
    00000262: 	cmpl	%esi, %edx
    00000264: 	jle	.Ltmp1577 # Offset: 612
    00000266: 	movslq	%esi, %rsi
    00000269: 	movzbl	(%rdi,%rsi), %esi
    0000026d: 	leal	0x1(%rax,%rsi), %eax
.Ltmp1577:
    00000271: 	testl	%edx, %edx
    00000273: 	movl	$0x1, %esi
    00000278: 	cmovgl	%edx, %esi
    0000027b: 	cmpl	%ecx, %esi
    0000027d: 	jge	.Ltmp1569 # Offset: 637
    00000283: 	subl	$0x1, %ecx
    00000286: 	leal	0x1(%rsi), %edx
    00000289: 	subl	%esi, %ecx
    0000028b: 	addl	$0x2, %esi
    0000028e: 	movslq	%edx, %rdx
    00000291: 	movslq	%esi, %rsi
    00000294: 	addq	%rsi, %rcx
    00000297: 	jmp	.Ltmp1579 # Offset: 663
    00000299: 	nopl	(%rax) # Size: 7
.Ltmp1580:
    000002a0: 	addq	$0x1, %rdx
    000002a4: 	cmpq	%rdx, %rcx
    000002a7: 	je	.Ltmp1569 # Offset: 679
.Ltmp1579:
    000002ad: 	movzbl	-0x1(%rdi,%rdx), %esi
    000002b2: 	leal	-0x1(%rax,%rsi), %eax
    000002b6: 	cmpl	%edx, %r8d
    000002b9: 	jg	.Ltmp1580 # Offset: 697
    000002bb: 	retq # Offset: 699
    000002bc: 	nopl	(%rax) # Size: 4
.Ltmp1575:
    000002c0: 	xorl	%r9d, %r9d
    000002c3: 	xorl	%r10d, %r10d
    000002c6: 	jmp	.Ltmp1581 # Offset: 710
.Ltmp1570:
    000002cb: 	xorl	%r8d, %r8d
    000002ce: 	xorl	%esi, %esi
    000002d0: 	jmp	.Ltmp1582 # Offset: 720
.Ltmp1572:
    000002d5: 	retq # Offset: 725
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_goto_loop3_optIhET_PKS0_iS0_"

Binary Function "_Z19test_do_loop3_paramIhET_PKS0_iS0_" after disassembly {
  Number      : 203
  State       : disassembled
  Address     : 0x13590
  Size        : 0x1f2
  MaxSize     : 0x200
  Offset      : 0x13590
  Section     : .text
  Orc Section : .local.text._Z19test_do_loop3_paramIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0202:
    00000000: 	endbr64
    00000004: 	xorl	%r9d, %r9d
    00000007: 	testl	%esi, %esi
    00000009: 	jle	.Ltmp1583 # Offset: 9
    0000000f: 	movzbl	%dl, %eax
    00000012: 	leal	(%rax,%rax), %r8d
    00000016: 	testl	%eax, %eax
    00000018: 	je	.Ltmp1584 # Offset: 24
    0000001e: 	cmpl	%esi, %eax
    00000020: 	movl	$0x1, %ecx
    00000025: 	cmovgl	%esi, %eax
    00000028: 	testl	%eax, %eax
    0000002a: 	movl	%eax, %r10d
    0000002d: 	cmovgl	%eax, %ecx
    00000030: 	cmpl	$0xf, %eax
    00000033: 	jle	.Ltmp1585 # Offset: 51
    00000039: 	movl	%ecx, %edx
    0000003b: 	movdqa	DATAat0x38850(%rip), %xmm3
    00000043: 	movdqa	DATAat0x38860(%rip), %xmm6
    0000004b: 	movq	%rdi, %rax
    0000004e: 	shrl	$0x4, %edx
    00000051: 	movdqa	DATAat0x38840(%rip), %xmm5
    00000059: 	movdqa	DATAat0x38870(%rip), %xmm4
    00000061: 	pxor	%xmm2, %xmm2
    00000065: 	subl	$0x1, %edx
    00000068: 	shlq	$0x4, %rdx
    0000006c: 	leaq	0x10(%rdi,%rdx), %rdx
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp1586:
    00000078: 	movdqu	(%rax), %xmm0
    0000007c: 	movdqa	%xmm3, %xmm1
    00000080: 	addq	$0x10, %rax
    00000084: 	paddd	%xmm6, %xmm3
    00000088: 	paddd	%xmm4, %xmm1
    0000008c: 	paddb	%xmm5, %xmm0
    00000090: 	paddb	%xmm0, %xmm2
    00000094: 	cmpq	%rdx, %rax
    00000097: 	jne	.Ltmp1586 # Offset: 151
    00000099: 	movdqa	%xmm2, %xmm0
    0000009d: 	movl	%ecx, %edx
    0000009f: 	pshufd	$0xff, %xmm1, %xmm1
    000000a4: 	psrldq	$0x8, %xmm0
    000000a9: 	andl	$-0x10, %edx
    000000ac: 	movd	%xmm1, %eax
    000000b0: 	paddb	%xmm0, %xmm2
    000000b4: 	pxor	%xmm0, %xmm0
    000000b8: 	movl	%edx, %r11d
    000000bb: 	psadbw	%xmm0, %xmm2
    000000bf: 	movd	%xmm2, %r9d
    000000c4: 	cmpl	%edx, %ecx
    000000c6: 	je	.Ltmp1587 # Offset: 198
.Ltmp1590:
    000000cc: 	subl	%edx, %ecx
    000000ce: 	leal	-0x1(%rcx), %eax
    000000d1: 	cmpl	$0x6, %eax
    000000d4: 	jbe	.Ltmp1588 # Offset: 212
    000000d6: 	leal	0x1(%r11), %eax
    000000da: 	movd	%r11d, %xmm0
    000000df: 	movq	DATAat0x38a18(%rip), %xmm1
    000000e7: 	movd	%eax, %xmm4
    000000eb: 	punpckldq	%xmm4, %xmm0
    000000ef: 	paddd	%xmm1, %xmm0
    000000f3: 	movq	DATAat0x38840(%rip), %xmm1
    000000fb: 	pshufd	$0xe5, %xmm0, %xmm5
    00000100: 	movq	(%rdi,%rdx), %xmm0
    00000105: 	movd	%xmm5, %eax
    00000109: 	paddb	%xmm0, %xmm1
    0000010d: 	pxor	%xmm0, %xmm0
    00000111: 	movdqa	%xmm1, %xmm7
    00000115: 	psadbw	%xmm0, %xmm7
    00000119: 	movq	%xmm7, %rdx
    0000011e: 	addl	%edx, %r9d
    00000121: 	movl	%ecx, %edx
    00000123: 	andl	$-0x8, %edx
    00000126: 	addl	%edx, %r11d
    00000129: 	cmpl	%edx, %ecx
    0000012b: 	je	.Ltmp1587 # Offset: 299
.Ltmp1588:
    00000131: 	movslq	%r11d, %rax
    00000134: 	movzbl	(%rdi,%rax), %eax
    00000138: 	leal	0x1(%r9,%rax), %r9d
    0000013d: 	leal	0x1(%r11), %eax
    00000141: 	cmpl	%r10d, %eax
    00000144: 	jge	.Ltmp1587 # Offset: 324
    00000146: 	cltq
    00000148: 	addb	(%rdi,%rax), %r9b
    0000014c: 	leal	0x2(%r11), %eax
    00000150: 	addl	$0x1, %r9d
    00000154: 	cmpl	%eax, %r10d
    00000157: 	jle	.Ltmp1587 # Offset: 343
    00000159: 	cltq
    0000015b: 	movzbl	(%rdi,%rax), %eax
    0000015f: 	leal	0x1(%r9,%rax), %r9d
    00000164: 	leal	0x3(%r11), %eax
    00000168: 	cmpl	%eax, %r10d
    0000016b: 	jle	.Ltmp1587 # Offset: 363
    0000016d: 	cltq
    0000016f: 	movzbl	(%rdi,%rax), %eax
    00000173: 	leal	0x1(%r9,%rax), %r9d
    00000178: 	leal	0x4(%r11), %eax
    0000017c: 	cmpl	%r10d, %eax
    0000017f: 	jge	.Ltmp1587 # Offset: 383
    00000181: 	cltq
    00000183: 	movzbl	(%rdi,%rax), %eax
    00000187: 	leal	0x1(%r9,%rax), %r9d
    0000018c: 	leal	0x5(%r11), %eax
    00000190: 	cmpl	%eax, %r10d
    00000193: 	jle	.Ltmp1587 # Offset: 403
    00000195: 	cltq
    00000197: 	movzbl	(%rdi,%rax), %eax
    0000019b: 	leal	0x1(%r9,%rax), %r9d
    000001a0: 	leal	0x6(%r11), %eax
    000001a4: 	cmpl	%eax, %r10d
    000001a7: 	jle	.Ltmp1587 # Offset: 423
    000001a9: 	cltq
    000001ab: 	movzbl	(%rdi,%rax), %eax
    000001af: 	leal	0x1(%r9,%rax), %r9d
    000001b4: 	leal	0x7(%r11), %eax
.Ltmp1587:
    000001b8: 	cmpl	%eax, %esi
    000001ba: 	jle	.Ltmp1583 # Offset: 442
.Ltmp1584:
    000001bc: 	cltq
    000001be: 	nop # Size: 2
.Ltmp1589:
    000001c0: 	movzbl	(%rdi,%rax), %edx
    000001c4: 	cmpl	%eax, %r8d
    000001c7: 	leal	(%r9,%rdx), %ecx
    000001cb: 	leal	-0x1(%rdx,%r9), %edx
    000001d0: 	cmovgl	%edx, %ecx
    000001d3: 	addq	$0x1, %rax
    000001d7: 	movl	%ecx, %r9d
    000001da: 	cmpl	%eax, %esi
    000001dc: 	jg	.Ltmp1589 # Offset: 476
.Ltmp1583:
    000001de: 	movl	%r9d, %eax
    000001e1: 	retq # Offset: 481
    000001e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1585:
    000001e8: 	xorl	%edx, %edx
    000001ea: 	xorl	%r11d, %r11d
    000001ed: 	jmp	.Ltmp1590 # Offset: 493
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_do_loop3_paramIhET_PKS0_iS0_"

Binary Function "_Z21test_goto_loop3_paramIhET_PKS0_iS0_" after disassembly {
  Number      : 204
  State       : disassembled
  Address     : 0x13790
  Size        : 0x1f2
  MaxSize     : 0x200
  Offset      : 0x13790
  Section     : .text
  Orc Section : .local.text._Z21test_goto_loop3_paramIhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0203:
    00000000: 	endbr64
    00000004: 	xorl	%r9d, %r9d
    00000007: 	testl	%esi, %esi
    00000009: 	jle	.Ltmp1591 # Offset: 9
    0000000f: 	movzbl	%dl, %eax
    00000012: 	leal	(%rax,%rax), %r8d
    00000016: 	testl	%eax, %eax
    00000018: 	je	.Ltmp1592 # Offset: 24
    0000001e: 	cmpl	%esi, %eax
    00000020: 	movl	$0x1, %ecx
    00000025: 	cmovgl	%esi, %eax
    00000028: 	testl	%eax, %eax
    0000002a: 	movl	%eax, %r10d
    0000002d: 	cmovgl	%eax, %ecx
    00000030: 	cmpl	$0xf, %eax
    00000033: 	jle	.Ltmp1593 # Offset: 51
    00000039: 	movl	%ecx, %edx
    0000003b: 	movdqa	DATAat0x38850(%rip), %xmm3
    00000043: 	movdqa	DATAat0x38860(%rip), %xmm6
    0000004b: 	movq	%rdi, %rax
    0000004e: 	shrl	$0x4, %edx
    00000051: 	movdqa	DATAat0x38840(%rip), %xmm5
    00000059: 	movdqa	DATAat0x38870(%rip), %xmm4
    00000061: 	pxor	%xmm2, %xmm2
    00000065: 	subl	$0x1, %edx
    00000068: 	shlq	$0x4, %rdx
    0000006c: 	leaq	0x10(%rdi,%rdx), %rdx
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp1594:
    00000078: 	movdqu	(%rax), %xmm0
    0000007c: 	movdqa	%xmm3, %xmm1
    00000080: 	addq	$0x10, %rax
    00000084: 	paddd	%xmm6, %xmm3
    00000088: 	paddd	%xmm4, %xmm1
    0000008c: 	paddb	%xmm5, %xmm0
    00000090: 	paddb	%xmm0, %xmm2
    00000094: 	cmpq	%rdx, %rax
    00000097: 	jne	.Ltmp1594 # Offset: 151
    00000099: 	movdqa	%xmm2, %xmm0
    0000009d: 	movl	%ecx, %edx
    0000009f: 	pshufd	$0xff, %xmm1, %xmm1
    000000a4: 	psrldq	$0x8, %xmm0
    000000a9: 	andl	$-0x10, %edx
    000000ac: 	movd	%xmm1, %eax
    000000b0: 	paddb	%xmm0, %xmm2
    000000b4: 	pxor	%xmm0, %xmm0
    000000b8: 	movl	%edx, %r11d
    000000bb: 	psadbw	%xmm0, %xmm2
    000000bf: 	movd	%xmm2, %r9d
    000000c4: 	cmpl	%edx, %ecx
    000000c6: 	je	.Ltmp1595 # Offset: 198
.Ltmp1598:
    000000cc: 	subl	%edx, %ecx
    000000ce: 	leal	-0x1(%rcx), %eax
    000000d1: 	cmpl	$0x6, %eax
    000000d4: 	jbe	.Ltmp1596 # Offset: 212
    000000d6: 	leal	0x1(%r11), %eax
    000000da: 	movd	%r11d, %xmm0
    000000df: 	movq	DATAat0x38a18(%rip), %xmm1
    000000e7: 	movd	%eax, %xmm4
    000000eb: 	punpckldq	%xmm4, %xmm0
    000000ef: 	paddd	%xmm1, %xmm0
    000000f3: 	movq	DATAat0x38840(%rip), %xmm1
    000000fb: 	pshufd	$0xe5, %xmm0, %xmm5
    00000100: 	movq	(%rdi,%rdx), %xmm0
    00000105: 	movd	%xmm5, %eax
    00000109: 	paddb	%xmm0, %xmm1
    0000010d: 	pxor	%xmm0, %xmm0
    00000111: 	movdqa	%xmm1, %xmm7
    00000115: 	psadbw	%xmm0, %xmm7
    00000119: 	movq	%xmm7, %rdx
    0000011e: 	addl	%edx, %r9d
    00000121: 	movl	%ecx, %edx
    00000123: 	andl	$-0x8, %edx
    00000126: 	addl	%edx, %r11d
    00000129: 	cmpl	%edx, %ecx
    0000012b: 	je	.Ltmp1595 # Offset: 299
.Ltmp1596:
    00000131: 	movslq	%r11d, %rax
    00000134: 	movzbl	(%rdi,%rax), %eax
    00000138: 	leal	0x1(%r9,%rax), %r9d
    0000013d: 	leal	0x1(%r11), %eax
    00000141: 	cmpl	%r10d, %eax
    00000144: 	jge	.Ltmp1595 # Offset: 324
    00000146: 	cltq
    00000148: 	addb	(%rdi,%rax), %r9b
    0000014c: 	leal	0x2(%r11), %eax
    00000150: 	addl	$0x1, %r9d
    00000154: 	cmpl	%eax, %r10d
    00000157: 	jle	.Ltmp1595 # Offset: 343
    00000159: 	cltq
    0000015b: 	movzbl	(%rdi,%rax), %eax
    0000015f: 	leal	0x1(%r9,%rax), %r9d
    00000164: 	leal	0x3(%r11), %eax
    00000168: 	cmpl	%eax, %r10d
    0000016b: 	jle	.Ltmp1595 # Offset: 363
    0000016d: 	cltq
    0000016f: 	movzbl	(%rdi,%rax), %eax
    00000173: 	leal	0x1(%r9,%rax), %r9d
    00000178: 	leal	0x4(%r11), %eax
    0000017c: 	cmpl	%r10d, %eax
    0000017f: 	jge	.Ltmp1595 # Offset: 383
    00000181: 	cltq
    00000183: 	movzbl	(%rdi,%rax), %eax
    00000187: 	leal	0x1(%r9,%rax), %r9d
    0000018c: 	leal	0x5(%r11), %eax
    00000190: 	cmpl	%eax, %r10d
    00000193: 	jle	.Ltmp1595 # Offset: 403
    00000195: 	cltq
    00000197: 	movzbl	(%rdi,%rax), %eax
    0000019b: 	leal	0x1(%r9,%rax), %r9d
    000001a0: 	leal	0x6(%r11), %eax
    000001a4: 	cmpl	%eax, %r10d
    000001a7: 	jle	.Ltmp1595 # Offset: 423
    000001a9: 	cltq
    000001ab: 	movzbl	(%rdi,%rax), %eax
    000001af: 	leal	0x1(%r9,%rax), %r9d
    000001b4: 	leal	0x7(%r11), %eax
.Ltmp1595:
    000001b8: 	cmpl	%eax, %esi
    000001ba: 	jle	.Ltmp1591 # Offset: 442
.Ltmp1592:
    000001bc: 	cltq
    000001be: 	nop # Size: 2
.Ltmp1597:
    000001c0: 	movzbl	(%rdi,%rax), %edx
    000001c4: 	cmpl	%eax, %r8d
    000001c7: 	leal	(%r9,%rdx), %ecx
    000001cb: 	leal	-0x1(%rdx,%r9), %edx
    000001d0: 	cmovgl	%edx, %ecx
    000001d3: 	addq	$0x1, %rax
    000001d7: 	movl	%ecx, %r9d
    000001da: 	cmpl	%eax, %esi
    000001dc: 	jg	.Ltmp1597 # Offset: 476
.Ltmp1591:
    000001de: 	movl	%r9d, %eax
    000001e1: 	retq # Offset: 481
    000001e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1593:
    000001e8: 	xorl	%edx, %edx
    000001ea: 	xorl	%r11d, %r11d
    000001ed: 	jmp	.Ltmp1598 # Offset: 493
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_goto_loop3_paramIhET_PKS0_iS0_"

Binary Function "_Z21test_do_loop3_halfoptIsET_PKS0_iS0_" after disassembly {
  Number      : 205
  State       : disassembled
  Address     : 0x13990
  Size        : 0x3a2
  MaxSize     : 0x3b0
  Offset      : 0x13990
  Section     : .text
  Orc Section : .local.text._Z21test_do_loop3_halfoptIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0204:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	xorl	%eax, %eax
    00000009: 	movl	%esi, %edi
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp1599 # Offset: 13
    00000013: 	movswl	%dx, %r10d
    00000017: 	testw	%dx, %dx
    0000001a: 	movl	$0x1, %r8d
    00000020: 	pushq	%r12
    00000022: 	cmovgl	%r10d, %r8d
    00000026: 	pushq	%rbp
    00000027: 	movl	%edx, %esi
    00000029: 	pushq	%rbx
    0000002a: 	cmpw	$0x7, %dx
    0000002e: 	jle	.Ltmp1600 # Offset: 46
    00000034: 	movl	%r8d, %edx
    00000037: 	movdqa	DATAat0x388a0(%rip), %xmm1
    0000003f: 	movq	%rcx, %rax
    00000042: 	pxor	%xmm0, %xmm0
    00000046: 	shrl	$0x3, %edx
    00000049: 	subl	$0x1, %edx
    0000004c: 	shlq	$0x4, %rdx
    00000050: 	leaq	0x10(%rcx,%rdx), %rdx
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp1601:
    00000058: 	movdqu	(%rax), %xmm3
    0000005c: 	paddw	%xmm1, %xmm0
    00000060: 	addq	$0x10, %rax
    00000064: 	paddw	%xmm3, %xmm0
    00000068: 	cmpq	%rdx, %rax
    0000006b: 	jne	.Ltmp1601 # Offset: 107
    0000006d: 	movdqa	%xmm0, %xmm1
    00000071: 	movl	%r8d, %edx
    00000074: 	psrldq	$0x8, %xmm1
    00000079: 	andl	$-0x8, %edx
    0000007c: 	paddw	%xmm1, %xmm0
    00000080: 	movl	%edx, %r9d
    00000083: 	movdqa	%xmm0, %xmm1
    00000087: 	psrldq	$0x4, %xmm1
    0000008c: 	paddw	%xmm1, %xmm0
    00000090: 	movdqa	%xmm0, %xmm1
    00000094: 	psrldq	$0x2, %xmm1
    00000099: 	paddw	%xmm1, %xmm0
    0000009d: 	pextrw	$0x0, %xmm0, %eax
    000000a2: 	cmpl	%edx, %r8d
    000000a5: 	je	.Ltmp1602 # Offset: 165
.Ltmp1614:
    000000ab: 	subl	%edx, %r8d
    000000ae: 	leal	-0x1(%r8), %r11d
    000000b2: 	cmpl	$0x2, %r11d
    000000b6: 	jbe	.Ltmp1603 # Offset: 182
    000000b8: 	movq	DATAat0x388a0(%rip), %xmm1
    000000c0: 	movq	(%rcx,%rdx,2), %xmm0
    000000c5: 	paddw	%xmm1, %xmm0
    000000c9: 	pextrw	$0x1, %xmm0, %r11d
    000000cf: 	pextrw	$0x0, %xmm0, %edx
    000000d4: 	addl	%r11d, %edx
    000000d7: 	pextrw	$0x2, %xmm0, %r11d
    000000dd: 	addl	%r11d, %edx
    000000e0: 	pextrw	$0x3, %xmm0, %r11d
    000000e6: 	addl	%r11d, %edx
    000000e9: 	addl	%edx, %eax
    000000eb: 	movl	%r8d, %edx
    000000ee: 	andl	$-0x4, %edx
    000000f1: 	addl	%edx, %r9d
    000000f4: 	cmpl	%edx, %r8d
    000000f7: 	je	.Ltmp1602 # Offset: 247
.Ltmp1603:
    000000f9: 	movslq	%r9d, %rdx
    000000fc: 	leaq	(%rdx,%rdx), %r8
    00000100: 	movzwl	(%rcx,%rdx,2), %edx
    00000104: 	leal	0x1(%rax,%rdx), %eax
    00000108: 	leal	0x1(%r9), %edx
    0000010c: 	cmpl	%edx, %r10d
    0000010f: 	jle	.Ltmp1602 # Offset: 271
    00000111: 	addw	0x2(%rcx,%r8), %ax
    00000117: 	addl	$0x2, %r9d
    0000011b: 	addl	$0x1, %eax
    0000011e: 	cmpl	%r9d, %r10d
    00000121: 	jle	.Ltmp1602 # Offset: 289
    00000123: 	movzwl	0x4(%rcx,%r8), %edx
    00000129: 	leal	0x1(%rax,%rdx), %eax
.Ltmp1602:
    0000012d: 	testw	%si, %si
    00000130: 	movl	$0x1, %edx
    00000135: 	movl	$0x1, %ebp
    0000013a: 	cmovlel	%edx, %esi
    0000013d: 	addl	%r10d, %r10d
    00000140: 	movl	%r10d, %r9d
    00000143: 	movswl	%si, %r11d
    00000147: 	subl	%r11d, %r9d
    0000014a: 	cmpl	%r11d, %r10d
    0000014d: 	cmovgl	%r9d, %ebp
    00000151: 	subl	$0x1, %r9d
    00000155: 	cmpl	%r11d, %r10d
    00000158: 	jle	.Ltmp1604 # Offset: 344
    0000015e: 	cmpl	$0x6, %r9d
    00000162: 	jbe	.Ltmp1604 # Offset: 354
    00000168: 	movswq	%si, %rdx
    0000016c: 	pxor	%xmm0, %xmm0
    00000170: 	pcmpeqd	%xmm2, %xmm2
    00000174: 	leaq	(%rcx,%rdx,2), %r8
    00000178: 	movl	%ebp, %edx
    0000017a: 	shrl	$0x3, %edx
    0000017d: 	leal	-0x1(%rdx), %ebx
    00000180: 	leaq	0x10(%r8), %rdx
    00000184: 	shlq	$0x4, %rbx
    00000188: 	addq	%rdx, %rbx
    0000018b: 	jmp	.Ltmp1605 # Offset: 395
    0000018d: 	nopl	(%rax) # Size: 3
.Ltmp1606:
    00000190: 	addq	$0x10, %rdx
.Ltmp1605:
    00000194: 	movdqu	(%r8), %xmm1
    00000199: 	paddw	%xmm2, %xmm0
    0000019d: 	movq	%rdx, %r8
    000001a0: 	paddw	%xmm1, %xmm0
    000001a4: 	cmpq	%rdx, %rbx
    000001a7: 	jne	.Ltmp1606 # Offset: 423
    000001a9: 	movdqa	%xmm0, %xmm1
    000001ad: 	movl	%ebp, %r12d
    000001b0: 	psrldq	$0x8, %xmm1
    000001b5: 	andl	$-0x8, %r12d
    000001b9: 	paddw	%xmm1, %xmm0
    000001bd: 	leal	(%r12,%r11), %r8d
    000001c1: 	movdqa	%xmm0, %xmm1
    000001c5: 	psrldq	$0x4, %xmm1
    000001ca: 	paddw	%xmm1, %xmm0
    000001ce: 	movdqa	%xmm0, %xmm1
    000001d2: 	psrldq	$0x2, %xmm1
    000001d7: 	paddw	%xmm1, %xmm0
    000001db: 	pextrw	$0x0, %xmm0, %edx
    000001e0: 	addl	%edx, %eax
    000001e2: 	cmpl	%r12d, %ebp
    000001e5: 	je	.Ltmp1607 # Offset: 485
.Ltmp1613:
    000001eb: 	movl	%ebp, %ebx
    000001ed: 	subl	$0x1, %ebp
    000001f0: 	subl	%r12d, %ebp
    000001f3: 	subl	%r12d, %ebx
    000001f6: 	cmpl	$0x2, %ebp
    000001f9: 	jbe	.Ltmp1608 # Offset: 505
    000001fb: 	movq	DATAat0x38a10(%rip), %xmm1
    00000203: 	movswq	%si, %rdx
    00000207: 	addq	%r12, %rdx
    0000020a: 	movq	(%rcx,%rdx,2), %xmm0
    0000020f: 	paddw	%xmm1, %xmm0
    00000213: 	pextrw	$0x1, %xmm0, %ebp
    00000218: 	pextrw	$0x0, %xmm0, %edx
    0000021d: 	addl	%ebp, %edx
    0000021f: 	pextrw	$0x2, %xmm0, %ebp
    00000224: 	addl	%ebp, %edx
    00000226: 	pextrw	$0x3, %xmm0, %ebp
    0000022b: 	addl	%ebp, %edx
    0000022d: 	addl	%edx, %eax
    0000022f: 	movl	%ebx, %edx
    00000231: 	andl	$-0x4, %edx
    00000234: 	addl	%edx, %r8d
    00000237: 	cmpl	%edx, %ebx
    00000239: 	je	.Ltmp1607 # Offset: 569
.Ltmp1608:
    0000023b: 	movslq	%r8d, %rdx
    0000023e: 	leaq	(%rdx,%rdx), %rbx
    00000242: 	movzwl	(%rcx,%rdx,2), %edx
    00000246: 	leal	-0x1(%rax,%rdx), %eax
    0000024a: 	leal	0x1(%r8), %edx
    0000024e: 	cmpl	%edx, %r10d
    00000251: 	jle	.Ltmp1607 # Offset: 593
    00000253: 	addw	0x2(%rcx,%rbx), %ax
    00000258: 	addl	$0x2, %r8d
    0000025c: 	subl	$0x1, %eax
    0000025f: 	cmpl	%r8d, %r10d
    00000262: 	jle	.Ltmp1607 # Offset: 610
    00000264: 	movzwl	0x4(%rcx,%rbx), %edx
    00000269: 	leal	-0x1(%rax,%rdx), %eax
.Ltmp1607:
    0000026d: 	xorl	%edx, %edx
    0000026f: 	cmpl	%r11d, %r10d
    00000272: 	movl	$0x1, %r10d
    00000278: 	cmovlel	%edx, %r9d
    0000027c: 	movl	%edi, %edx
    0000027e: 	leal	0x1(%r11,%r9), %r8d
    00000283: 	subl	%r8d, %edx
    00000286: 	cmpl	%r8d, %edi
    00000289: 	cmovgl	%edx, %r10d
    0000028d: 	subl	$0x1, %edx
    00000290: 	cmpl	$0x6, %edx
    00000293: 	jbe	.Ltmp1609 # Offset: 659
    00000299: 	cmpl	%r8d, %edi
    0000029c: 	jle	.Ltmp1609 # Offset: 668
    000002a2: 	movswq	%si, %rsi
    000002a6: 	movslq	%r9d, %r9
    000002a9: 	pxor	%xmm0, %xmm0
    000002ad: 	leaq	0x1(%rsi,%r9), %rdx
    000002b2: 	leaq	(%rcx,%rdx,2), %rsi
    000002b6: 	movl	%r10d, %edx
    000002b9: 	shrl	$0x3, %edx
    000002bc: 	leal	-0x1(%rdx), %r9d
    000002c0: 	leaq	0x10(%rsi), %rdx
    000002c4: 	shlq	$0x4, %r9
    000002c8: 	addq	%rdx, %r9
    000002cb: 	jmp	.Ltmp1610 # Offset: 715
    000002cd: 	nopl	(%rax) # Size: 3
.Ltmp1611:
    000002d0: 	addq	$0x10, %rdx
.Ltmp1610:
    000002d4: 	movdqu	(%rsi), %xmm1
    000002d8: 	movq	%rdx, %rsi
    000002db: 	paddw	%xmm1, %xmm0
    000002df: 	cmpq	%r9, %rdx
    000002e2: 	jne	.Ltmp1611 # Offset: 738
    000002e4: 	movdqa	%xmm0, %xmm1
    000002e8: 	psrldq	$0x8, %xmm1
    000002ed: 	paddw	%xmm1, %xmm0
    000002f1: 	movdqa	%xmm0, %xmm1
    000002f5: 	psrldq	$0x4, %xmm1
    000002fa: 	paddw	%xmm1, %xmm0
    000002fe: 	movdqa	%xmm0, %xmm1
    00000302: 	psrldq	$0x2, %xmm1
    00000307: 	paddw	%xmm1, %xmm0
    0000030b: 	pextrw	$0x0, %xmm0, %edx
    00000310: 	addl	%edx, %eax
    00000312: 	movl	%r10d, %edx
    00000315: 	andl	$-0x8, %edx
    00000318: 	addl	%edx, %r8d
    0000031b: 	cmpl	%r10d, %edx
    0000031e: 	je	.Ltmp1612 # Offset: 798
.Ltmp1609:
    00000320: 	movslq	%r8d, %rsi
    00000323: 	leaq	(%rsi,%rsi), %rdx
    00000327: 	addw	(%rcx,%rsi,2), %ax
    0000032b: 	leal	0x1(%r8), %esi
    0000032f: 	cmpl	%esi, %edi
    00000331: 	jle	.Ltmp1612 # Offset: 817
    00000333: 	leal	0x2(%r8), %esi
    00000337: 	addw	0x2(%rcx,%rdx), %ax
    0000033c: 	cmpl	%esi, %edi
    0000033e: 	jle	.Ltmp1612 # Offset: 830
    00000340: 	leal	0x3(%r8), %esi
    00000344: 	addw	0x4(%rcx,%rdx), %ax
    00000349: 	cmpl	%esi, %edi
    0000034b: 	jle	.Ltmp1612 # Offset: 843
    0000034d: 	leal	0x4(%r8), %esi
    00000351: 	addw	0x6(%rcx,%rdx), %ax
    00000356: 	cmpl	%esi, %edi
    00000358: 	jle	.Ltmp1612 # Offset: 856
    0000035a: 	leal	0x5(%r8), %esi
    0000035e: 	addw	0x8(%rcx,%rdx), %ax
    00000363: 	cmpl	%esi, %edi
    00000365: 	jle	.Ltmp1612 # Offset: 869
    00000367: 	addl	$0x6, %r8d
    0000036b: 	addw	0xa(%rcx,%rdx), %ax
    00000370: 	cmpl	%r8d, %edi
    00000373: 	jle	.Ltmp1612 # Offset: 883
    00000375: 	addw	0xc(%rcx,%rdx), %ax
.Ltmp1612:
    0000037a: 	popq	%rbx
    0000037b: 	popq	%rbp
    0000037c: 	popq	%r12
    0000037e: 	retq # Offset: 894
    0000037f: 	nop # Size: 1
.Ltmp1599:
    00000380: 	retq # Offset: 896
    00000381: 	nopl	(%rax) # Size: 7
.Ltmp1604:
    00000388: 	movl	%r11d, %r8d
    0000038b: 	xorl	%r12d, %r12d
    0000038e: 	jmp	.Ltmp1613 # Offset: 910
    00000393: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1600:
    00000398: 	xorl	%edx, %edx
    0000039a: 	xorl	%r9d, %r9d
    0000039d: 	jmp	.Ltmp1614 # Offset: 925
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_do_loop3_halfoptIsET_PKS0_iS0_"

Binary Function "_Z19test_do_loop3_paramIsET_PKS0_iS0_" after disassembly {
  Number      : 206
  State       : disassembled
  Address     : 0x13d40
  Size        : 0x1a7
  MaxSize     : 0x1b0
  Offset      : 0x13d40
  Section     : .text
  Orc Section : .local.text._Z19test_do_loop3_paramIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0205:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	xorl	%r8d, %r8d
    0000000a: 	movl	%esi, %edi
    0000000c: 	testl	%esi, %esi
    0000000e: 	jle	.Ltmp1615 # Offset: 14
    00000014: 	movswl	%dx, %edx
    00000017: 	leal	(%rdx,%rdx), %r9d
    0000001b: 	testl	%edx, %edx
    0000001d: 	jle	.Ltmp1616 # Offset: 29
    00000023: 	cmpl	%esi, %edx
    00000025: 	movl	$0x1, %r10d
    0000002b: 	cmovgl	%esi, %edx
    0000002e: 	testl	%edx, %edx
    00000030: 	cmovgl	%edx, %r10d
    00000034: 	cmpl	$0x7, %edx
    00000037: 	jle	.Ltmp1617 # Offset: 55
    0000003d: 	movl	%r10d, %esi
    00000040: 	movdqa	DATAat0x38850(%rip), %xmm2
    00000048: 	movdqa	DATAat0x388b0(%rip), %xmm5
    00000050: 	movq	%rcx, %rax
    00000053: 	shrl	$0x3, %esi
    00000056: 	movdqa	DATAat0x388a0(%rip), %xmm4
    0000005e: 	movdqa	DATAat0x388c0(%rip), %xmm3
    00000066: 	pxor	%xmm1, %xmm1
    0000006a: 	subl	$0x1, %esi
    0000006d: 	shlq	$0x4, %rsi
    00000071: 	leaq	0x10(%rcx,%rsi), %rsi
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1618:
    00000080: 	movdqu	(%rax), %xmm6
    00000084: 	movdqa	%xmm2, %xmm0
    00000088: 	paddw	%xmm4, %xmm1
    0000008c: 	addq	$0x10, %rax
    00000090: 	paddd	%xmm5, %xmm2
    00000094: 	paddd	%xmm3, %xmm0
    00000098: 	paddw	%xmm6, %xmm1
    0000009c: 	cmpq	%rsi, %rax
    0000009f: 	jne	.Ltmp1618 # Offset: 159
    000000a1: 	pshufd	$0xff, %xmm0, %xmm0
    000000a6: 	movl	%r10d, %esi
    000000a9: 	movd	%xmm0, %eax
    000000ad: 	movdqa	%xmm1, %xmm0
    000000b1: 	andl	$-0x8, %esi
    000000b4: 	andl	$0x7, %r10d
    000000b8: 	psrldq	$0x8, %xmm0
    000000bd: 	paddw	%xmm0, %xmm1
    000000c1: 	movdqa	%xmm1, %xmm0
    000000c5: 	psrldq	$0x4, %xmm0
    000000ca: 	paddw	%xmm0, %xmm1
    000000ce: 	movdqa	%xmm1, %xmm0
    000000d2: 	psrldq	$0x2, %xmm0
    000000d7: 	paddw	%xmm0, %xmm1
    000000db: 	pextrw	$0x0, %xmm1, %r8d
    000000e1: 	je	.Ltmp1619 # Offset: 225
.Ltmp1622:
    000000e3: 	movslq	%esi, %rax
    000000e6: 	leaq	(%rax,%rax), %r10
    000000ea: 	movzwl	(%rcx,%rax,2), %eax
    000000ee: 	leal	0x1(%r8,%rax), %r8d
    000000f3: 	leal	0x1(%rsi), %eax
    000000f6: 	cmpl	%edx, %eax
    000000f8: 	jge	.Ltmp1619 # Offset: 248
    000000fa: 	addw	0x2(%rcx,%r10), %r8w
    00000100: 	leal	0x2(%rsi), %eax
    00000103: 	addl	$0x1, %r8d
    00000107: 	cmpl	%edx, %eax
    00000109: 	jge	.Ltmp1619 # Offset: 265
    0000010b: 	movzwl	0x4(%rcx,%r10), %eax
    00000111: 	leal	0x1(%r8,%rax), %r8d
    00000116: 	leal	0x3(%rsi), %eax
    00000119: 	cmpl	%edx, %eax
    0000011b: 	jge	.Ltmp1619 # Offset: 283
    0000011d: 	movzwl	0x6(%rcx,%r10), %eax
    00000123: 	leal	0x1(%r8,%rax), %r8d
    00000128: 	leal	0x4(%rsi), %eax
    0000012b: 	cmpl	%eax, %edx
    0000012d: 	jle	.Ltmp1619 # Offset: 301
    0000012f: 	movzwl	0x8(%rcx,%r10), %eax
    00000135: 	leal	0x1(%r8,%rax), %r8d
    0000013a: 	leal	0x5(%rsi), %eax
    0000013d: 	cmpl	%eax, %edx
    0000013f: 	jle	.Ltmp1619 # Offset: 319
    00000141: 	movzwl	0xa(%rcx,%r10), %eax
    00000147: 	leal	0x1(%r8,%rax), %r8d
    0000014c: 	leal	0x6(%rsi), %eax
    0000014f: 	cmpl	%eax, %edx
    00000151: 	jle	.Ltmp1619 # Offset: 337
    00000153: 	movzwl	0xc(%rcx,%r10), %eax
    00000159: 	leal	0x1(%r8,%rax), %r8d
    0000015e: 	leal	0x7(%rsi), %eax
.Ltmp1619:
    00000161: 	cmpl	%eax, %edi
    00000163: 	jle	.Ltmp1615 # Offset: 355
.Ltmp1621:
    00000165: 	cltq
    00000167: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1620:
    00000170: 	movzwl	(%rcx,%rax,2), %edx
    00000174: 	cmpl	%eax, %r9d
    00000177: 	leal	(%rdx,%r8), %esi
    0000017b: 	leal	-0x1(%rdx,%r8), %edx
    00000180: 	cmovgl	%edx, %esi
    00000183: 	addq	$0x1, %rax
    00000187: 	movl	%esi, %r8d
    0000018a: 	cmpl	%eax, %edi
    0000018c: 	jg	.Ltmp1620 # Offset: 396
.Ltmp1615:
    0000018e: 	movl	%r8d, %eax
    00000191: 	retq # Offset: 401
    00000192: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1616:
    00000198: 	xorl	%eax, %eax
    0000019a: 	jmp	.Ltmp1621 # Offset: 410
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp1617:
    000001a0: 	xorl	%esi, %esi
    000001a2: 	jmp	.Ltmp1622 # Offset: 418
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_do_loop3_paramIsET_PKS0_iS0_"

Binary Function "_Z21test_goto_loop3_paramIsET_PKS0_iS0_" after disassembly {
  Number      : 207
  State       : disassembled
  Address     : 0x13ef0
  Size        : 0x1a7
  MaxSize     : 0x1b0
  Offset      : 0x13ef0
  Section     : .text
  Orc Section : .local.text._Z21test_goto_loop3_paramIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0206:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	xorl	%r8d, %r8d
    0000000a: 	movl	%esi, %edi
    0000000c: 	testl	%esi, %esi
    0000000e: 	jle	.Ltmp1623 # Offset: 14
    00000014: 	movswl	%dx, %edx
    00000017: 	leal	(%rdx,%rdx), %r9d
    0000001b: 	testl	%edx, %edx
    0000001d: 	jle	.Ltmp1624 # Offset: 29
    00000023: 	cmpl	%esi, %edx
    00000025: 	movl	$0x1, %r10d
    0000002b: 	cmovgl	%esi, %edx
    0000002e: 	testl	%edx, %edx
    00000030: 	cmovgl	%edx, %r10d
    00000034: 	cmpl	$0x7, %edx
    00000037: 	jle	.Ltmp1625 # Offset: 55
    0000003d: 	movl	%r10d, %esi
    00000040: 	movdqa	DATAat0x38850(%rip), %xmm2
    00000048: 	movdqa	DATAat0x388b0(%rip), %xmm5
    00000050: 	movq	%rcx, %rax
    00000053: 	shrl	$0x3, %esi
    00000056: 	movdqa	DATAat0x388a0(%rip), %xmm4
    0000005e: 	movdqa	DATAat0x388c0(%rip), %xmm3
    00000066: 	pxor	%xmm1, %xmm1
    0000006a: 	subl	$0x1, %esi
    0000006d: 	shlq	$0x4, %rsi
    00000071: 	leaq	0x10(%rcx,%rsi), %rsi
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1626:
    00000080: 	movdqu	(%rax), %xmm6
    00000084: 	movdqa	%xmm2, %xmm0
    00000088: 	paddw	%xmm4, %xmm1
    0000008c: 	addq	$0x10, %rax
    00000090: 	paddd	%xmm5, %xmm2
    00000094: 	paddd	%xmm3, %xmm0
    00000098: 	paddw	%xmm6, %xmm1
    0000009c: 	cmpq	%rsi, %rax
    0000009f: 	jne	.Ltmp1626 # Offset: 159
    000000a1: 	pshufd	$0xff, %xmm0, %xmm0
    000000a6: 	movl	%r10d, %esi
    000000a9: 	movd	%xmm0, %eax
    000000ad: 	movdqa	%xmm1, %xmm0
    000000b1: 	andl	$-0x8, %esi
    000000b4: 	andl	$0x7, %r10d
    000000b8: 	psrldq	$0x8, %xmm0
    000000bd: 	paddw	%xmm0, %xmm1
    000000c1: 	movdqa	%xmm1, %xmm0
    000000c5: 	psrldq	$0x4, %xmm0
    000000ca: 	paddw	%xmm0, %xmm1
    000000ce: 	movdqa	%xmm1, %xmm0
    000000d2: 	psrldq	$0x2, %xmm0
    000000d7: 	paddw	%xmm0, %xmm1
    000000db: 	pextrw	$0x0, %xmm1, %r8d
    000000e1: 	je	.Ltmp1627 # Offset: 225
.Ltmp1630:
    000000e3: 	movslq	%esi, %rax
    000000e6: 	leaq	(%rax,%rax), %r10
    000000ea: 	movzwl	(%rcx,%rax,2), %eax
    000000ee: 	leal	0x1(%r8,%rax), %r8d
    000000f3: 	leal	0x1(%rsi), %eax
    000000f6: 	cmpl	%edx, %eax
    000000f8: 	jge	.Ltmp1627 # Offset: 248
    000000fa: 	addw	0x2(%rcx,%r10), %r8w
    00000100: 	leal	0x2(%rsi), %eax
    00000103: 	addl	$0x1, %r8d
    00000107: 	cmpl	%edx, %eax
    00000109: 	jge	.Ltmp1627 # Offset: 265
    0000010b: 	movzwl	0x4(%rcx,%r10), %eax
    00000111: 	leal	0x1(%r8,%rax), %r8d
    00000116: 	leal	0x3(%rsi), %eax
    00000119: 	cmpl	%edx, %eax
    0000011b: 	jge	.Ltmp1627 # Offset: 283
    0000011d: 	movzwl	0x6(%rcx,%r10), %eax
    00000123: 	leal	0x1(%r8,%rax), %r8d
    00000128: 	leal	0x4(%rsi), %eax
    0000012b: 	cmpl	%eax, %edx
    0000012d: 	jle	.Ltmp1627 # Offset: 301
    0000012f: 	movzwl	0x8(%rcx,%r10), %eax
    00000135: 	leal	0x1(%r8,%rax), %r8d
    0000013a: 	leal	0x5(%rsi), %eax
    0000013d: 	cmpl	%eax, %edx
    0000013f: 	jle	.Ltmp1627 # Offset: 319
    00000141: 	movzwl	0xa(%rcx,%r10), %eax
    00000147: 	leal	0x1(%r8,%rax), %r8d
    0000014c: 	leal	0x6(%rsi), %eax
    0000014f: 	cmpl	%eax, %edx
    00000151: 	jle	.Ltmp1627 # Offset: 337
    00000153: 	movzwl	0xc(%rcx,%r10), %eax
    00000159: 	leal	0x1(%r8,%rax), %r8d
    0000015e: 	leal	0x7(%rsi), %eax
.Ltmp1627:
    00000161: 	cmpl	%eax, %edi
    00000163: 	jle	.Ltmp1623 # Offset: 355
.Ltmp1629:
    00000165: 	cltq
    00000167: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1628:
    00000170: 	movzwl	(%rcx,%rax,2), %edx
    00000174: 	cmpl	%eax, %r9d
    00000177: 	leal	(%rdx,%r8), %esi
    0000017b: 	leal	-0x1(%rdx,%r8), %edx
    00000180: 	cmovgl	%edx, %esi
    00000183: 	addq	$0x1, %rax
    00000187: 	movl	%esi, %r8d
    0000018a: 	cmpl	%eax, %edi
    0000018c: 	jg	.Ltmp1628 # Offset: 396
.Ltmp1623:
    0000018e: 	movl	%r8d, %eax
    00000191: 	retq # Offset: 401
    00000192: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1624:
    00000198: 	xorl	%eax, %eax
    0000019a: 	jmp	.Ltmp1629 # Offset: 410
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp1625:
    000001a0: 	xorl	%esi, %esi
    000001a2: 	jmp	.Ltmp1630 # Offset: 418
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_goto_loop3_paramIsET_PKS0_iS0_"

Binary Function "_Z21test_do_loop3_halfoptIiET_PKS0_iS0_" after disassembly {
  Number      : 208
  State       : disassembled
  Address     : 0x140a0
  Size        : 0x267
  MaxSize     : 0x270
  Offset      : 0x140a0
  Section     : .text
  Orc Section : .local.text._Z21test_do_loop3_halfoptIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0207:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp1631 # Offset: 8
    0000000e: 	movl	%esi, %r9d
    00000011: 	testl	%edx, %edx
    00000013: 	movl	$0x1, %esi
    00000018: 	pushq	%rbx
    00000019: 	cmovgl	%edx, %esi
    0000001c: 	cmpl	$0x3, %edx
    0000001f: 	jle	.Ltmp1632 # Offset: 31
    00000025: 	movl	%esi, %ecx
    00000027: 	movdqa	DATAat0x388f0(%rip), %xmm2
    0000002f: 	pxor	%xmm1, %xmm1
    00000033: 	movq	%rdi, %rax
    00000036: 	shrl	$0x2, %ecx
    00000039: 	subl	$0x1, %ecx
    0000003c: 	shlq	$0x4, %rcx
    00000040: 	leaq	0x10(%rdi,%rcx), %rcx
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp1633:
    00000048: 	movdqu	(%rax), %xmm0
    0000004c: 	addq	$0x10, %rax
    00000050: 	paddd	%xmm2, %xmm0
    00000054: 	paddd	%xmm0, %xmm1
    00000058: 	cmpq	%rax, %rcx
    0000005b: 	jne	.Ltmp1633 # Offset: 91
    0000005d: 	movdqa	%xmm1, %xmm0
    00000061: 	movl	%esi, %ecx
    00000063: 	psrldq	$0x8, %xmm0
    00000068: 	andl	$-0x4, %ecx
    0000006b: 	andl	$0x3, %esi
    0000006e: 	paddd	%xmm0, %xmm1
    00000072: 	movdqa	%xmm1, %xmm0
    00000076: 	psrldq	$0x4, %xmm0
    0000007b: 	paddd	%xmm0, %xmm1
    0000007f: 	movd	%xmm1, %eax
    00000083: 	je	.Ltmp1634 # Offset: 131
.Ltmp1644:
    00000085: 	movslq	%ecx, %rsi
    00000088: 	leaq	(,%rsi,4), %r8
    00000090: 	movl	(%rdi,%rsi,4), %esi
    00000093: 	leal	0x1(%rax,%rsi), %eax
    00000097: 	leal	0x1(%rcx), %esi
    0000009a: 	cmpl	%esi, %edx
    0000009c: 	jle	.Ltmp1634 # Offset: 156
    0000009e: 	movl	0x4(%rdi,%r8), %esi
    000000a3: 	addl	$0x2, %ecx
    000000a6: 	leal	0x1(%rax,%rsi), %eax
    000000aa: 	cmpl	%ecx, %edx
    000000ac: 	jle	.Ltmp1634 # Offset: 172
    000000ae: 	movl	0x8(%rdi,%r8), %ecx
    000000b3: 	leal	0x1(%rax,%rcx), %eax
.Ltmp1634:
    000000b7: 	testl	%edx, %edx
    000000b9: 	movl	$0x1, %r8d
    000000bf: 	leal	(%rdx,%rdx), %esi
    000000c2: 	movl	$0x1, %ebx
    000000c7: 	cmovgl	%edx, %r8d
    000000cb: 	movl	%esi, %ecx
    000000cd: 	subl	%r8d, %ecx
    000000d0: 	cmpl	%r8d, %esi
    000000d3: 	cmovgl	%ecx, %ebx
    000000d6: 	leal	-0x1(%rcx), %r11d
    000000da: 	jle	.Ltmp1635 # Offset: 218
    000000e0: 	cmpl	$0x2, %r11d
    000000e4: 	jbe	.Ltmp1635 # Offset: 228
    000000ea: 	movslq	%r8d, %rdx
    000000ed: 	pxor	%xmm1, %xmm1
    000000f1: 	pcmpeqd	%xmm2, %xmm2
    000000f5: 	leaq	(%rdi,%rdx,4), %rcx
    000000f9: 	movl	%ebx, %edx
    000000fb: 	shrl	$0x2, %edx
    000000fe: 	leal	-0x1(%rdx), %r10d
    00000102: 	leaq	0x10(%rcx), %rdx
    00000106: 	shlq	$0x4, %r10
    0000010a: 	addq	%rdx, %r10
    0000010d: 	jmp	.Ltmp1636 # Offset: 269
    0000010f: 	nop # Size: 1
.Ltmp1637:
    00000110: 	addq	$0x10, %rdx
.Ltmp1636:
    00000114: 	movdqu	(%rcx), %xmm0
    00000118: 	movq	%rdx, %rcx
    0000011b: 	paddd	%xmm2, %xmm0
    0000011f: 	paddd	%xmm0, %xmm1
    00000123: 	cmpq	%r10, %rdx
    00000126: 	jne	.Ltmp1637 # Offset: 294
    00000128: 	movdqa	%xmm1, %xmm0
    0000012c: 	movl	%ebx, %ecx
    0000012e: 	psrldq	$0x8, %xmm0
    00000133: 	andl	$-0x4, %ecx
    00000136: 	paddd	%xmm0, %xmm1
    0000013a: 	movdqa	%xmm1, %xmm0
    0000013e: 	psrldq	$0x4, %xmm0
    00000143: 	paddd	%xmm0, %xmm1
    00000147: 	movd	%xmm1, %edx
    0000014b: 	addl	%edx, %eax
    0000014d: 	leal	(%rcx,%r8), %edx
    00000151: 	cmpl	%ecx, %ebx
    00000153: 	je	.Ltmp1638 # Offset: 339
.Ltmp1643:
    00000155: 	movslq	%edx, %rcx
    00000158: 	leaq	(,%rcx,4), %r10
    00000160: 	movl	(%rdi,%rcx,4), %ecx
    00000163: 	leal	-0x1(%rax,%rcx), %eax
    00000167: 	leal	0x1(%rdx), %ecx
    0000016a: 	cmpl	%ecx, %esi
    0000016c: 	jle	.Ltmp1638 # Offset: 364
    0000016e: 	movl	0x4(%rdi,%r10), %ecx
    00000173: 	addl	$0x2, %edx
    00000176: 	leal	-0x1(%rax,%rcx), %eax
    0000017a: 	cmpl	%edx, %esi
    0000017c: 	jle	.Ltmp1638 # Offset: 380
    0000017e: 	movl	0x8(%rdi,%r10), %edx
    00000183: 	leal	-0x1(%rax,%rdx), %eax
.Ltmp1638:
    00000187: 	xorl	%edx, %edx
    00000189: 	cmpl	%r8d, %esi
    0000018c: 	movl	%edx, %ecx
    0000018e: 	movl	%r9d, %edx
    00000191: 	cmovgl	%r11d, %ecx
    00000195: 	movl	$0x1, %r11d
    0000019b: 	leal	0x1(%r8,%rcx), %r10d
    000001a0: 	subl	%r10d, %edx
    000001a3: 	cmpl	%r10d, %r9d
    000001a6: 	cmovgl	%edx, %r11d
    000001aa: 	subl	$0x1, %edx
    000001ad: 	cmpl	$0x2, %edx
    000001b0: 	jbe	.Ltmp1639 # Offset: 432
    000001b2: 	cmpl	%r10d, %r9d
    000001b5: 	jle	.Ltmp1639 # Offset: 437
    000001b7: 	movslq	%ecx, %rcx
    000001ba: 	movslq	%r8d, %r8
    000001bd: 	pxor	%xmm0, %xmm0
    000001c1: 	leaq	0x1(%r8,%rcx), %rdx
    000001c6: 	leaq	(%rdi,%rdx,4), %rcx
    000001ca: 	movl	%r11d, %edx
    000001cd: 	shrl	$0x2, %edx
    000001d0: 	leal	-0x1(%rdx), %esi
    000001d3: 	leaq	0x10(%rcx), %rdx
    000001d7: 	shlq	$0x4, %rsi
    000001db: 	addq	%rdx, %rsi
    000001de: 	jmp	.Ltmp1640 # Offset: 478
.Ltmp1641:
    000001e0: 	addq	$0x10, %rdx
.Ltmp1640:
    000001e4: 	movdqu	(%rcx), %xmm1
    000001e8: 	movq	%rdx, %rcx
    000001eb: 	paddd	%xmm1, %xmm0
    000001ef: 	cmpq	%rdx, %rsi
    000001f2: 	jne	.Ltmp1641 # Offset: 498
    000001f4: 	movdqa	%xmm0, %xmm1
    000001f8: 	psrldq	$0x8, %xmm1
    000001fd: 	paddd	%xmm1, %xmm0
    00000201: 	movdqa	%xmm0, %xmm1
    00000205: 	psrldq	$0x4, %xmm1
    0000020a: 	paddd	%xmm1, %xmm0
    0000020e: 	movd	%xmm0, %edx
    00000212: 	addl	%edx, %eax
    00000214: 	movl	%r11d, %edx
    00000217: 	andl	$-0x4, %edx
    0000021a: 	addl	%edx, %r10d
    0000021d: 	cmpl	%r11d, %edx
    00000220: 	je	.Ltmp1642 # Offset: 544
.Ltmp1639:
    00000222: 	movslq	%r10d, %rdx
    00000225: 	leaq	(,%rdx,4), %rcx
    0000022d: 	addl	(%rdi,%rdx,4), %eax
    00000230: 	leal	0x1(%r10), %edx
    00000234: 	cmpl	%edx, %r9d
    00000237: 	jle	.Ltmp1642 # Offset: 567
    00000239: 	leal	0x2(%r10), %edx
    0000023d: 	addl	0x4(%rdi,%rcx), %eax
    00000241: 	cmpl	%edx, %r9d
    00000244: 	jle	.Ltmp1642 # Offset: 580
    00000246: 	addl	0x8(%rdi,%rcx), %eax
.Ltmp1642:
    0000024a: 	popq	%rbx
    0000024b: 	retq # Offset: 587
    0000024c: 	nopl	(%rax) # Size: 4
.Ltmp1631:
    00000250: 	retq # Offset: 592
    00000251: 	nopl	(%rax) # Size: 7
.Ltmp1635:
    00000258: 	movl	%r8d, %edx
    0000025b: 	jmp	.Ltmp1643 # Offset: 603
.Ltmp1632:
    00000260: 	xorl	%ecx, %ecx
    00000262: 	jmp	.Ltmp1644 # Offset: 610
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_do_loop3_halfoptIiET_PKS0_iS0_"

Binary Function "_Z19test_do_loop3_paramIiET_PKS0_iS0_" after disassembly {
  Number      : 209
  State       : disassembled
  Address     : 0x14310
  Size        : 0x13c
  MaxSize     : 0x140
  Offset      : 0x14310
  Section     : .text
  Orc Section : .local.text._Z19test_do_loop3_paramIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0208:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	testl	%esi, %esi
    00000009: 	jle	.Ltmp1645 # Offset: 9
    0000000f: 	leal	(%rdx,%rdx), %r9d
    00000013: 	testl	%edx, %edx
    00000015: 	jle	.Ltmp1646 # Offset: 21
    0000001b: 	cmpl	%edx, %esi
    0000001d: 	movl	$0x1, %r10d
    00000023: 	cmovlel	%esi, %edx
    00000026: 	testl	%edx, %edx
    00000028: 	cmovgl	%edx, %r10d
    0000002c: 	cmpl	$0x3, %edx
    0000002f: 	jle	.Ltmp1647 # Offset: 47
    00000035: 	movl	%r10d, %ecx
    00000038: 	movdqa	DATAat0x38850(%rip), %xmm3
    00000040: 	movq	%rdi, %rax
    00000043: 	movdqa	DATAat0x38900(%rip), %xmm5
    0000004b: 	shrl	$0x2, %ecx
    0000004e: 	movdqa	DATAat0x388f0(%rip), %xmm4
    00000056: 	pxor	%xmm2, %xmm2
    0000005a: 	subl	$0x1, %ecx
    0000005d: 	shlq	$0x4, %rcx
    00000061: 	leaq	0x10(%rdi,%rcx), %rcx
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1648:
    00000070: 	movdqu	(%rax), %xmm1
    00000074: 	movdqa	%xmm3, %xmm0
    00000078: 	addq	$0x10, %rax
    0000007c: 	paddd	%xmm5, %xmm3
    00000080: 	paddd	%xmm4, %xmm0
    00000084: 	paddd	%xmm4, %xmm1
    00000088: 	paddd	%xmm1, %xmm2
    0000008c: 	cmpq	%rax, %rcx
    0000008f: 	jne	.Ltmp1648 # Offset: 143
    00000091: 	pshufd	$0xff, %xmm0, %xmm0
    00000096: 	movl	%r10d, %ecx
    00000099: 	movd	%xmm0, %eax
    0000009d: 	movdqa	%xmm2, %xmm0
    000000a1: 	andl	$-0x4, %ecx
    000000a4: 	andl	$0x3, %r10d
    000000a8: 	psrldq	$0x8, %xmm0
    000000ad: 	paddd	%xmm0, %xmm2
    000000b1: 	movdqa	%xmm2, %xmm0
    000000b5: 	psrldq	$0x4, %xmm0
    000000ba: 	paddd	%xmm0, %xmm2
    000000be: 	movd	%xmm2, %r8d
    000000c3: 	je	.Ltmp1649 # Offset: 195
.Ltmp1652:
    000000c5: 	movslq	%ecx, %rax
    000000c8: 	leaq	(,%rax,4), %r10
    000000d0: 	movl	(%rdi,%rax,4), %eax
    000000d3: 	leal	0x1(%r8,%rax), %r8d
    000000d8: 	leal	0x1(%rcx), %eax
    000000db: 	cmpl	%edx, %eax
    000000dd: 	jge	.Ltmp1649 # Offset: 221
    000000df: 	movl	0x4(%rdi,%r10), %eax
    000000e4: 	leal	0x1(%r8,%rax), %r8d
    000000e9: 	leal	0x2(%rcx), %eax
    000000ec: 	cmpl	%edx, %eax
    000000ee: 	jge	.Ltmp1649 # Offset: 238
    000000f0: 	movl	0x8(%rdi,%r10), %eax
    000000f5: 	leal	0x1(%r8,%rax), %r8d
    000000fa: 	leal	0x3(%rcx), %eax
.Ltmp1649:
    000000fd: 	cmpl	%eax, %esi
    000000ff: 	jle	.Ltmp1645 # Offset: 255
.Ltmp1651:
    00000101: 	cltq
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1650:
    00000108: 	movl	(%rdi,%rax,4), %edx
    0000010b: 	cmpl	%eax, %r9d
    0000010e: 	leal	(%r8,%rdx), %ecx
    00000112: 	leal	-0x1(%rdx,%r8), %r8d
    00000117: 	cmovlel	%ecx, %r8d
    0000011b: 	addq	$0x1, %rax
    0000011f: 	cmpl	%eax, %esi
    00000121: 	jg	.Ltmp1650 # Offset: 289
.Ltmp1645:
    00000123: 	movl	%r8d, %eax
    00000126: 	retq # Offset: 294
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1646:
    00000130: 	xorl	%eax, %eax
    00000132: 	jmp	.Ltmp1651 # Offset: 306
    00000134: 	nopl	(%rax) # Size: 4
.Ltmp1647:
    00000138: 	xorl	%ecx, %ecx
    0000013a: 	jmp	.Ltmp1652 # Offset: 314
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_do_loop3_paramIiET_PKS0_iS0_"

Binary Function "_Z21test_goto_loop3_paramIiET_PKS0_iS0_" after disassembly {
  Number      : 210
  State       : disassembled
  Address     : 0x14450
  Size        : 0x13c
  MaxSize     : 0x140
  Offset      : 0x14450
  Section     : .text
  Orc Section : .local.text._Z21test_goto_loop3_paramIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0209:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	testl	%esi, %esi
    00000009: 	jle	.Ltmp1653 # Offset: 9
    0000000f: 	leal	(%rdx,%rdx), %r9d
    00000013: 	testl	%edx, %edx
    00000015: 	jle	.Ltmp1654 # Offset: 21
    0000001b: 	cmpl	%edx, %esi
    0000001d: 	movl	$0x1, %r10d
    00000023: 	cmovlel	%esi, %edx
    00000026: 	testl	%edx, %edx
    00000028: 	cmovgl	%edx, %r10d
    0000002c: 	cmpl	$0x3, %edx
    0000002f: 	jle	.Ltmp1655 # Offset: 47
    00000035: 	movl	%r10d, %ecx
    00000038: 	movdqa	DATAat0x38850(%rip), %xmm3
    00000040: 	movq	%rdi, %rax
    00000043: 	movdqa	DATAat0x38900(%rip), %xmm5
    0000004b: 	shrl	$0x2, %ecx
    0000004e: 	movdqa	DATAat0x388f0(%rip), %xmm4
    00000056: 	pxor	%xmm2, %xmm2
    0000005a: 	subl	$0x1, %ecx
    0000005d: 	shlq	$0x4, %rcx
    00000061: 	leaq	0x10(%rdi,%rcx), %rcx
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1656:
    00000070: 	movdqu	(%rax), %xmm1
    00000074: 	movdqa	%xmm3, %xmm0
    00000078: 	addq	$0x10, %rax
    0000007c: 	paddd	%xmm5, %xmm3
    00000080: 	paddd	%xmm4, %xmm0
    00000084: 	paddd	%xmm4, %xmm1
    00000088: 	paddd	%xmm1, %xmm2
    0000008c: 	cmpq	%rax, %rcx
    0000008f: 	jne	.Ltmp1656 # Offset: 143
    00000091: 	pshufd	$0xff, %xmm0, %xmm0
    00000096: 	movl	%r10d, %ecx
    00000099: 	movd	%xmm0, %eax
    0000009d: 	movdqa	%xmm2, %xmm0
    000000a1: 	andl	$-0x4, %ecx
    000000a4: 	andl	$0x3, %r10d
    000000a8: 	psrldq	$0x8, %xmm0
    000000ad: 	paddd	%xmm0, %xmm2
    000000b1: 	movdqa	%xmm2, %xmm0
    000000b5: 	psrldq	$0x4, %xmm0
    000000ba: 	paddd	%xmm0, %xmm2
    000000be: 	movd	%xmm2, %r8d
    000000c3: 	je	.Ltmp1657 # Offset: 195
.Ltmp1660:
    000000c5: 	movslq	%ecx, %rax
    000000c8: 	leaq	(,%rax,4), %r10
    000000d0: 	movl	(%rdi,%rax,4), %eax
    000000d3: 	leal	0x1(%r8,%rax), %r8d
    000000d8: 	leal	0x1(%rcx), %eax
    000000db: 	cmpl	%edx, %eax
    000000dd: 	jge	.Ltmp1657 # Offset: 221
    000000df: 	movl	0x4(%rdi,%r10), %eax
    000000e4: 	leal	0x1(%r8,%rax), %r8d
    000000e9: 	leal	0x2(%rcx), %eax
    000000ec: 	cmpl	%edx, %eax
    000000ee: 	jge	.Ltmp1657 # Offset: 238
    000000f0: 	movl	0x8(%rdi,%r10), %eax
    000000f5: 	leal	0x1(%r8,%rax), %r8d
    000000fa: 	leal	0x3(%rcx), %eax
.Ltmp1657:
    000000fd: 	cmpl	%eax, %esi
    000000ff: 	jle	.Ltmp1653 # Offset: 255
.Ltmp1659:
    00000101: 	cltq
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1658:
    00000108: 	movl	(%rdi,%rax,4), %edx
    0000010b: 	cmpl	%eax, %r9d
    0000010e: 	leal	(%r8,%rdx), %ecx
    00000112: 	leal	-0x1(%rdx,%r8), %r8d
    00000117: 	cmovlel	%ecx, %r8d
    0000011b: 	addq	$0x1, %rax
    0000011f: 	cmpl	%eax, %esi
    00000121: 	jg	.Ltmp1658 # Offset: 289
.Ltmp1653:
    00000123: 	movl	%r8d, %eax
    00000126: 	retq # Offset: 294
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1654:
    00000130: 	xorl	%eax, %eax
    00000132: 	jmp	.Ltmp1659 # Offset: 306
    00000134: 	nopl	(%rax) # Size: 4
.Ltmp1655:
    00000138: 	xorl	%ecx, %ecx
    0000013a: 	jmp	.Ltmp1660 # Offset: 314
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_goto_loop3_paramIiET_PKS0_iS0_"

Binary Function "_Z21test_do_loop3_halfoptIdET_PKS0_iS0_" after disassembly {
  Number      : 211
  State       : disassembled
  Address     : 0x14590
  Size        : 0xfd
  MaxSize     : 0x100
  Offset      : 0x14590
  Section     : .text
  Orc Section : .local.text._Z21test_do_loop3_halfoptIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0210:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movapd	%xmm0, %xmm1
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp1661 # Offset: 13
    00000013: 	movsd	DATAat0x38a38(%rip), %xmm3
    0000001b: 	movl	$0x1, %edx
    00000020: 	pxor	%xmm0, %xmm0
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1662:
    00000028: 	movsd	-0x8(%rcx,%rdx,8), %xmm2
    0000002e: 	movl	%edx, %eax
    00000030: 	addq	$0x1, %rdx
    00000034: 	addsd	%xmm3, %xmm2
    00000038: 	addsd	%xmm2, %xmm0
    0000003c: 	pxor	%xmm2, %xmm2
    00000040: 	cvtsi2sd	%eax, %xmm2
    00000044: 	comisd	%xmm2, %xmm1
    00000048: 	ja	.Ltmp1662 # Offset: 72
    0000004a: 	movapd	%xmm1, %xmm2
    0000004e: 	addl	$0x1, %eax
    00000051: 	addsd	%xmm1, %xmm2
    00000055: 	cltq
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1663:
    00000060: 	movsd	-0x8(%rcx,%rax,8), %xmm1
    00000066: 	movl	%eax, %edx
    00000068: 	addq	$0x1, %rax
    0000006c: 	subsd	%xmm3, %xmm1
    00000070: 	addsd	%xmm1, %xmm0
    00000074: 	pxor	%xmm1, %xmm1
    00000078: 	cvtsi2sd	%edx, %xmm1
    0000007c: 	comisd	%xmm1, %xmm2
    00000080: 	ja	.Ltmp1663 # Offset: 128
    00000082: 	movl	%esi, %eax
    00000084: 	movl	$0x1, %r8d
    0000008a: 	subl	%edx, %eax
    0000008c: 	cmpl	%edx, %esi
    0000008e: 	cmovgl	%eax, %r8d
    00000092: 	cmpl	$0x1, %eax
    00000095: 	je	.Ltmp1664 # Offset: 149
    00000097: 	cmpl	%edx, %esi
    00000099: 	jle	.Ltmp1664 # Offset: 153
    0000009b: 	movslq	%edx, %rax
    0000009e: 	leaq	(%rcx,%rax,8), %rsi
    000000a2: 	movl	%r8d, %eax
    000000a5: 	shrl	%eax
    000000a7: 	leal	-0x1(%rax), %edi
    000000aa: 	leaq	0x10(%rsi), %rax
    000000ae: 	shlq	$0x4, %rdi
    000000b2: 	addq	%rax, %rdi
    000000b5: 	jmp	.Ltmp1665 # Offset: 181
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1666:
    000000c0: 	addq	$0x10, %rax
.Ltmp1665:
    000000c4: 	movupd	(%rsi), %xmm1
    000000c8: 	movq	%rax, %rsi
    000000cb: 	addsd	%xmm1, %xmm0
    000000cf: 	unpckhpd	%xmm1, %xmm1
    000000d3: 	addsd	%xmm1, %xmm0
    000000d7: 	cmpq	%rax, %rdi
    000000da: 	jne	.Ltmp1666 # Offset: 218
    000000dc: 	movl	%r8d, %eax
    000000df: 	andl	$-0x2, %eax
    000000e2: 	addl	%eax, %edx
    000000e4: 	cmpl	%r8d, %eax
    000000e7: 	je	.Ltmp1667 # Offset: 231
.Ltmp1664:
    000000e9: 	movslq	%edx, %rdx
    000000ec: 	addsd	(%rcx,%rdx,8), %xmm0
    000000f1: 	retq # Offset: 241
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1661:
    000000f8: 	pxor	%xmm0, %xmm0
.Ltmp1667:
    000000fc: 	retq # Offset: 252
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_do_loop3_halfoptIdET_PKS0_iS0_"

Binary Function "_Z19test_do_loop3_paramIdET_PKS0_iS0_" after disassembly {
  Number      : 212
  State       : disassembled
  Address     : 0x14690
  Size        : 0x76
  MaxSize     : 0x80
  Offset      : 0x14690
  Section     : .text
  Orc Section : .local.text._Z19test_do_loop3_paramIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0211:
    00000000: 	endbr64
    00000004: 	pxor	%xmm3, %xmm3
    00000008: 	testl	%esi, %esi
    0000000a: 	jle	.Ltmp1668 # Offset: 10
    0000000c: 	movsd	DATAat0x38a38(%rip), %xmm5
    00000014: 	movslq	%esi, %rsi
    00000017: 	xorl	%eax, %eax
    00000019: 	pxor	%xmm3, %xmm3
    0000001d: 	jmp	.Ltmp1669 # Offset: 29
    0000001f: 	nop # Size: 1
.Ltmp1670:
    00000020: 	addsd	%xmm5, %xmm1
    00000024: 	addsd	%xmm1, %xmm3
.Ltmp1672:
    00000028: 	addq	$0x1, %rax
    0000002c: 	cmpq	%rax, %rsi
    0000002f: 	je	.Ltmp1668 # Offset: 47
.Ltmp1669:
    00000031: 	pxor	%xmm2, %xmm2
    00000035: 	movsd	(%rdi,%rax,8), %xmm1
    0000003a: 	cvtsi2sd	%eax, %xmm2
    0000003e: 	comisd	%xmm2, %xmm0
    00000042: 	ja	.Ltmp1670 # Offset: 66
    00000044: 	movapd	%xmm0, %xmm4
    00000048: 	addsd	%xmm0, %xmm4
    0000004c: 	comisd	%xmm2, %xmm4
    00000050: 	jbe	.Ltmp1671 # Offset: 80
    00000052: 	subsd	%xmm5, %xmm1
    00000056: 	addq	$0x1, %rax
    0000005a: 	addsd	%xmm1, %xmm3
    0000005e: 	cmpq	%rax, %rsi
    00000061: 	jne	.Ltmp1669 # Offset: 97
.Ltmp1668:
    00000063: 	movapd	%xmm3, %xmm0
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1671:
    00000070: 	addsd	%xmm1, %xmm3
    00000074: 	jmp	.Ltmp1672 # Offset: 116
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_do_loop3_paramIdET_PKS0_iS0_"

Binary Function "_Z21test_goto_loop3_paramIdET_PKS0_iS0_" after disassembly {
  Number      : 213
  State       : disassembled
  Address     : 0x14710
  Size        : 0x76
  MaxSize     : 0x80
  Offset      : 0x14710
  Section     : .text
  Orc Section : .local.text._Z21test_goto_loop3_paramIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0212:
    00000000: 	endbr64
    00000004: 	pxor	%xmm3, %xmm3
    00000008: 	testl	%esi, %esi
    0000000a: 	jle	.Ltmp1673 # Offset: 10
    0000000c: 	movsd	DATAat0x38a38(%rip), %xmm5
    00000014: 	movslq	%esi, %rsi
    00000017: 	xorl	%eax, %eax
    00000019: 	pxor	%xmm3, %xmm3
    0000001d: 	jmp	.Ltmp1674 # Offset: 29
    0000001f: 	nop # Size: 1
.Ltmp1675:
    00000020: 	addsd	%xmm5, %xmm1
    00000024: 	addsd	%xmm1, %xmm3
.Ltmp1677:
    00000028: 	addq	$0x1, %rax
    0000002c: 	cmpq	%rax, %rsi
    0000002f: 	je	.Ltmp1673 # Offset: 47
.Ltmp1674:
    00000031: 	pxor	%xmm2, %xmm2
    00000035: 	movsd	(%rdi,%rax,8), %xmm1
    0000003a: 	cvtsi2sd	%eax, %xmm2
    0000003e: 	comisd	%xmm2, %xmm0
    00000042: 	ja	.Ltmp1675 # Offset: 66
    00000044: 	movapd	%xmm0, %xmm4
    00000048: 	addsd	%xmm0, %xmm4
    0000004c: 	comisd	%xmm2, %xmm4
    00000050: 	jbe	.Ltmp1676 # Offset: 80
    00000052: 	subsd	%xmm5, %xmm1
    00000056: 	addq	$0x1, %rax
    0000005a: 	addsd	%xmm1, %xmm3
    0000005e: 	cmpq	%rax, %rsi
    00000061: 	jne	.Ltmp1674 # Offset: 97
.Ltmp1673:
    00000063: 	movapd	%xmm3, %xmm0
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1676:
    00000070: 	addsd	%xmm1, %xmm3
    00000074: 	jmp	.Ltmp1677 # Offset: 116
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_goto_loop3_paramIdET_PKS0_iS0_"

Binary Function "_Z23test_goto_loop2_global2IsET_PKS0_iS0_" after disassembly {
  Number      : 214
  State       : disassembled
  Address     : 0x14790
  Size        : 0x141
  MaxSize     : 0x150
  Offset      : 0x14790
  Section     : .text
  Orc Section : .local.text._Z23test_goto_loop2_global2IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0213:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rdx
    00000007: 	movl	%esi, %ecx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp1678 # Offset: 13
    00000013: 	cvttsd2si	init_value(%rip), %esi
    0000001b: 	testw	%si, %si
    0000001e: 	js	.Ltmp1679 # Offset: 30
    00000024: 	leal	-0x1(%rcx), %esi
    00000027: 	cmpl	$0x6, %esi
    0000002a: 	jbe	.Ltmp1680 # Offset: 42
    00000030: 	movl	%ecx, %esi
    00000032: 	movq	%rdi, %rax
    00000035: 	pxor	%xmm0, %xmm0
    00000039: 	shrl	$0x3, %esi
    0000003c: 	subl	$0x1, %esi
    0000003f: 	shlq	$0x4, %rsi
    00000043: 	leaq	0x10(%rdi,%rsi), %rsi
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1681:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	paddw	%xmm2, %xmm0
    0000005c: 	cmpq	%rsi, %rax
    0000005f: 	jne	.Ltmp1681 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	movl	%ecx, %esi
    00000067: 	psrldq	$0x8, %xmm1
    0000006c: 	andl	$-0x8, %esi
    0000006f: 	paddw	%xmm1, %xmm0
    00000073: 	movdqa	%xmm0, %xmm1
    00000077: 	psrldq	$0x4, %xmm1
    0000007c: 	paddw	%xmm1, %xmm0
    00000080: 	movdqa	%xmm0, %xmm1
    00000084: 	psrldq	$0x2, %xmm1
    00000089: 	paddw	%xmm1, %xmm0
    0000008d: 	pextrw	$0x0, %xmm0, %eax
    00000092: 	testb	$0x7, %cl
    00000095: 	je	.Ltmp1682 # Offset: 149
.Ltmp1685:
    0000009b: 	movslq	%esi, %r8
    0000009e: 	leaq	(%r8,%r8), %rdi
    000000a2: 	addw	(%rdx,%r8,2), %ax
    000000a7: 	leal	0x1(%rsi), %r8d
    000000ab: 	cmpl	%ecx, %r8d
    000000ae: 	jge	.Ltmp1678 # Offset: 174
    000000b4: 	leal	0x2(%rsi), %r8d
    000000b8: 	addw	0x2(%rdx,%rdi), %ax
    000000bd: 	cmpl	%r8d, %ecx
    000000c0: 	jle	.Ltmp1678 # Offset: 192
    000000c2: 	leal	0x3(%rsi), %r8d
    000000c6: 	addw	0x4(%rdx,%rdi), %ax
    000000cb: 	cmpl	%r8d, %ecx
    000000ce: 	jle	.Ltmp1678 # Offset: 206
    000000d0: 	leal	0x4(%rsi), %r8d
    000000d4: 	addw	0x6(%rdx,%rdi), %ax
    000000d9: 	cmpl	%r8d, %ecx
    000000dc: 	jle	.Ltmp1678 # Offset: 220
    000000de: 	leal	0x5(%rsi), %r8d
    000000e2: 	addw	0x8(%rdx,%rdi), %ax
    000000e7: 	cmpl	%r8d, %ecx
    000000ea: 	jle	.Ltmp1678 # Offset: 234
    000000ec: 	addl	$0x6, %esi
    000000ef: 	addw	0xa(%rdx,%rdi), %ax
    000000f4: 	cmpl	%esi, %ecx
    000000f6: 	jle	.Ltmp1678 # Offset: 246
    000000f8: 	addw	0xc(%rdx,%rdi), %ax
    000000fd: 	retq # Offset: 253
    000000fe: 	nop # Size: 2
.Ltmp1679:
    00000100: 	subl	$0x1, %ecx
    00000103: 	leaq	0x2(%rdi,%rcx,2), %rdi
    00000108: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1684:
    00000110: 	movzwl	(%rdx), %ecx
    00000113: 	addl	%ecx, %eax
    00000115: 	cmpw	$0x77, %cx
    00000119: 	jle	.Ltmp1683 # Offset: 281
    0000011b: 	movswl	%cx, %esi
    0000011e: 	sarw	$0xf, %cx
    00000122: 	imull	$0x6667, %esi, %esi
    00000128: 	sarl	$0x11, %esi
    0000012b: 	subl	%ecx, %esi
    0000012d: 	addl	%esi, %eax
.Ltmp1683:
    0000012f: 	addq	$0x2, %rdx
    00000133: 	cmpq	%rdx, %rdi
    00000136: 	jne	.Ltmp1684 # Offset: 310
.Ltmp1678:
    00000138: 	retq # Offset: 312
.Ltmp1682:
    00000139: 	retq # Offset: 313
.Ltmp1680:
    0000013a: 	xorl	%esi, %esi
    0000013c: 	jmp	.Ltmp1685 # Offset: 316
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_goto_loop2_global2IsET_PKS0_iS0_"

Binary Function "_Z22test_goto_loop2_globalIsET_PKS0_iS0_" after disassembly {
  Number      : 215
  State       : disassembled
  Address     : 0x148e0
  Size        : 0x154
  MaxSize     : 0x160
  Offset      : 0x148e0
  Section     : .text
  Orc Section : .local.text._Z22test_goto_loop2_globalIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0214:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp1686 # Offset: 13
    00000013: 	cvttsd2si	init_value(%rip), %esi
    0000001b: 	testw	%si, %si
    0000001e: 	js	.Ltmp1687 # Offset: 30
    00000024: 	leal	-0x1(%rdx), %esi
    00000027: 	cmpl	$0x6, %esi
    0000002a: 	jbe	.Ltmp1688 # Offset: 42
    00000030: 	movl	%edx, %esi
    00000032: 	movq	%rdi, %rax
    00000035: 	pxor	%xmm0, %xmm0
    00000039: 	shrl	$0x3, %esi
    0000003c: 	subl	$0x1, %esi
    0000003f: 	shlq	$0x4, %rsi
    00000043: 	leaq	0x10(%rdi,%rsi), %rsi
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1689:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	paddw	%xmm2, %xmm0
    0000005c: 	cmpq	%rsi, %rax
    0000005f: 	jne	.Ltmp1689 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	movl	%edx, %esi
    00000067: 	psrldq	$0x8, %xmm1
    0000006c: 	andl	$-0x8, %esi
    0000006f: 	paddw	%xmm1, %xmm0
    00000073: 	movdqa	%xmm0, %xmm1
    00000077: 	psrldq	$0x4, %xmm1
    0000007c: 	paddw	%xmm1, %xmm0
    00000080: 	movdqa	%xmm0, %xmm1
    00000084: 	psrldq	$0x2, %xmm1
    00000089: 	paddw	%xmm1, %xmm0
    0000008d: 	pextrw	$0x0, %xmm0, %eax
    00000092: 	testb	$0x7, %dl
    00000095: 	je	.Ltmp1690 # Offset: 149
.Ltmp1693:
    0000009b: 	movslq	%esi, %r8
    0000009e: 	leaq	(%r8,%r8), %rdi
    000000a2: 	addw	(%rcx,%r8,2), %ax
    000000a7: 	leal	0x1(%rsi), %r8d
    000000ab: 	cmpl	%r8d, %edx
    000000ae: 	jle	.Ltmp1686 # Offset: 174
    000000b4: 	leal	0x2(%rsi), %r8d
    000000b8: 	addw	0x2(%rcx,%rdi), %ax
    000000bd: 	cmpl	%r8d, %edx
    000000c0: 	jle	.Ltmp1686 # Offset: 192
    000000c6: 	leal	0x3(%rsi), %r8d
    000000ca: 	addw	0x4(%rcx,%rdi), %ax
    000000cf: 	cmpl	%r8d, %edx
    000000d2: 	jle	.Ltmp1686 # Offset: 210
    000000d4: 	leal	0x4(%rsi), %r8d
    000000d8: 	addw	0x6(%rcx,%rdi), %ax
    000000dd: 	cmpl	%r8d, %edx
    000000e0: 	jle	.Ltmp1686 # Offset: 224
    000000e2: 	leal	0x5(%rsi), %r8d
    000000e6: 	addw	0x8(%rcx,%rdi), %ax
    000000eb: 	cmpl	%r8d, %edx
    000000ee: 	jle	.Ltmp1686 # Offset: 238
    000000f0: 	addl	$0x6, %esi
    000000f3: 	addw	0xa(%rcx,%rdi), %ax
    000000f8: 	cmpl	%esi, %edx
    000000fa: 	jle	.Ltmp1686 # Offset: 250
    000000fc: 	addw	0xc(%rcx,%rdi), %ax
    00000101: 	retq # Offset: 257
    00000102: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1687:
    00000108: 	subl	$0x1, %edx
    0000010b: 	leaq	0x2(%rdi,%rdx,2), %r8
.Ltmp1692:
    00000110: 	movzwl	(%rcx), %edx
    00000113: 	addl	%edx, %eax
    00000115: 	cmpw	$0x77, %dx
    00000119: 	jle	.Ltmp1691 # Offset: 281
    0000011b: 	movswl	%dx, %edi
    0000011e: 	imull	$0xffff8889, %edi, %esi
    00000124: 	imull	$0x6667, %edi, %edi
    0000012a: 	shrl	$0x10, %esi
    0000012d: 	addl	%edx, %esi
    0000012f: 	sarw	$0xf, %dx
    00000133: 	sarw	$0x6, %si
    00000137: 	sarl	$0x11, %edi
    0000013a: 	subl	%edx, %esi
    0000013c: 	subl	%edx, %edi
    0000013e: 	addl	%esi, %eax
    00000140: 	addl	%edi, %eax
.Ltmp1691:
    00000142: 	addq	$0x2, %rcx
    00000146: 	cmpq	%rcx, %r8
    00000149: 	jne	.Ltmp1692 # Offset: 329
.Ltmp1686:
    0000014b: 	retq # Offset: 331
.Ltmp1690:
    0000014c: 	retq # Offset: 332
.Ltmp1688:
    0000014d: 	xorl	%esi, %esi
    0000014f: 	jmp	.Ltmp1693 # Offset: 335
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_goto_loop2_globalIsET_PKS0_iS0_"

Binary Function "_Z21test_do_loop2_global2IsET_PKS0_iS0_" after disassembly {
  Number      : 216
  State       : disassembled
  Address     : 0x14a40
  Size        : 0x141
  MaxSize     : 0x150
  Offset      : 0x14a40
  Section     : .text
  Orc Section : .local.text._Z21test_do_loop2_global2IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0215:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rdx
    00000007: 	movl	%esi, %ecx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp1694 # Offset: 13
    00000013: 	cvttsd2si	init_value(%rip), %esi
    0000001b: 	testw	%si, %si
    0000001e: 	js	.Ltmp1695 # Offset: 30
    00000024: 	leal	-0x1(%rcx), %esi
    00000027: 	cmpl	$0x6, %esi
    0000002a: 	jbe	.Ltmp1696 # Offset: 42
    00000030: 	movl	%ecx, %esi
    00000032: 	movq	%rdi, %rax
    00000035: 	pxor	%xmm0, %xmm0
    00000039: 	shrl	$0x3, %esi
    0000003c: 	subl	$0x1, %esi
    0000003f: 	shlq	$0x4, %rsi
    00000043: 	leaq	0x10(%rdi,%rsi), %rsi
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1697:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	paddw	%xmm2, %xmm0
    0000005c: 	cmpq	%rsi, %rax
    0000005f: 	jne	.Ltmp1697 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	movl	%ecx, %esi
    00000067: 	psrldq	$0x8, %xmm1
    0000006c: 	andl	$-0x8, %esi
    0000006f: 	paddw	%xmm1, %xmm0
    00000073: 	movdqa	%xmm0, %xmm1
    00000077: 	psrldq	$0x4, %xmm1
    0000007c: 	paddw	%xmm1, %xmm0
    00000080: 	movdqa	%xmm0, %xmm1
    00000084: 	psrldq	$0x2, %xmm1
    00000089: 	paddw	%xmm1, %xmm0
    0000008d: 	pextrw	$0x0, %xmm0, %eax
    00000092: 	testb	$0x7, %cl
    00000095: 	je	.Ltmp1698 # Offset: 149
.Ltmp1701:
    0000009b: 	movslq	%esi, %r8
    0000009e: 	leaq	(%r8,%r8), %rdi
    000000a2: 	addw	(%rdx,%r8,2), %ax
    000000a7: 	leal	0x1(%rsi), %r8d
    000000ab: 	cmpl	%ecx, %r8d
    000000ae: 	jge	.Ltmp1694 # Offset: 174
    000000b4: 	leal	0x2(%rsi), %r8d
    000000b8: 	addw	0x2(%rdx,%rdi), %ax
    000000bd: 	cmpl	%r8d, %ecx
    000000c0: 	jle	.Ltmp1694 # Offset: 192
    000000c2: 	leal	0x3(%rsi), %r8d
    000000c6: 	addw	0x4(%rdx,%rdi), %ax
    000000cb: 	cmpl	%r8d, %ecx
    000000ce: 	jle	.Ltmp1694 # Offset: 206
    000000d0: 	leal	0x4(%rsi), %r8d
    000000d4: 	addw	0x6(%rdx,%rdi), %ax
    000000d9: 	cmpl	%r8d, %ecx
    000000dc: 	jle	.Ltmp1694 # Offset: 220
    000000de: 	leal	0x5(%rsi), %r8d
    000000e2: 	addw	0x8(%rdx,%rdi), %ax
    000000e7: 	cmpl	%r8d, %ecx
    000000ea: 	jle	.Ltmp1694 # Offset: 234
    000000ec: 	addl	$0x6, %esi
    000000ef: 	addw	0xa(%rdx,%rdi), %ax
    000000f4: 	cmpl	%esi, %ecx
    000000f6: 	jle	.Ltmp1694 # Offset: 246
    000000f8: 	addw	0xc(%rdx,%rdi), %ax
    000000fd: 	retq # Offset: 253
    000000fe: 	nop # Size: 2
.Ltmp1695:
    00000100: 	subl	$0x1, %ecx
    00000103: 	leaq	0x2(%rdi,%rcx,2), %rdi
    00000108: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1700:
    00000110: 	movzwl	(%rdx), %ecx
    00000113: 	addl	%ecx, %eax
    00000115: 	cmpw	$0x77, %cx
    00000119: 	jle	.Ltmp1699 # Offset: 281
    0000011b: 	movswl	%cx, %esi
    0000011e: 	sarw	$0xf, %cx
    00000122: 	imull	$0x6667, %esi, %esi
    00000128: 	sarl	$0x11, %esi
    0000012b: 	subl	%ecx, %esi
    0000012d: 	addl	%esi, %eax
.Ltmp1699:
    0000012f: 	addq	$0x2, %rdx
    00000133: 	cmpq	%rdx, %rdi
    00000136: 	jne	.Ltmp1700 # Offset: 310
.Ltmp1694:
    00000138: 	retq # Offset: 312
.Ltmp1698:
    00000139: 	retq # Offset: 313
.Ltmp1696:
    0000013a: 	xorl	%esi, %esi
    0000013c: 	jmp	.Ltmp1701 # Offset: 316
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_do_loop2_global2IsET_PKS0_iS0_"

Binary Function "_Z20test_do_loop2_globalIsET_PKS0_iS0_" after disassembly {
  Number      : 217
  State       : disassembled
  Address     : 0x14b90
  Size        : 0x154
  MaxSize     : 0x160
  Offset      : 0x14b90
  Section     : .text
  Orc Section : .local.text._Z20test_do_loop2_globalIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0216:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp1702 # Offset: 13
    00000013: 	cvttsd2si	init_value(%rip), %esi
    0000001b: 	testw	%si, %si
    0000001e: 	js	.Ltmp1703 # Offset: 30
    00000024: 	leal	-0x1(%rdx), %esi
    00000027: 	cmpl	$0x6, %esi
    0000002a: 	jbe	.Ltmp1704 # Offset: 42
    00000030: 	movl	%edx, %esi
    00000032: 	movq	%rdi, %rax
    00000035: 	pxor	%xmm0, %xmm0
    00000039: 	shrl	$0x3, %esi
    0000003c: 	subl	$0x1, %esi
    0000003f: 	shlq	$0x4, %rsi
    00000043: 	leaq	0x10(%rdi,%rsi), %rsi
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1705:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	paddw	%xmm2, %xmm0
    0000005c: 	cmpq	%rsi, %rax
    0000005f: 	jne	.Ltmp1705 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	movl	%edx, %esi
    00000067: 	psrldq	$0x8, %xmm1
    0000006c: 	andl	$-0x8, %esi
    0000006f: 	paddw	%xmm1, %xmm0
    00000073: 	movdqa	%xmm0, %xmm1
    00000077: 	psrldq	$0x4, %xmm1
    0000007c: 	paddw	%xmm1, %xmm0
    00000080: 	movdqa	%xmm0, %xmm1
    00000084: 	psrldq	$0x2, %xmm1
    00000089: 	paddw	%xmm1, %xmm0
    0000008d: 	pextrw	$0x0, %xmm0, %eax
    00000092: 	testb	$0x7, %dl
    00000095: 	je	.Ltmp1706 # Offset: 149
.Ltmp1709:
    0000009b: 	movslq	%esi, %r8
    0000009e: 	leaq	(%r8,%r8), %rdi
    000000a2: 	addw	(%rcx,%r8,2), %ax
    000000a7: 	leal	0x1(%rsi), %r8d
    000000ab: 	cmpl	%r8d, %edx
    000000ae: 	jle	.Ltmp1702 # Offset: 174
    000000b4: 	leal	0x2(%rsi), %r8d
    000000b8: 	addw	0x2(%rcx,%rdi), %ax
    000000bd: 	cmpl	%r8d, %edx
    000000c0: 	jle	.Ltmp1702 # Offset: 192
    000000c6: 	leal	0x3(%rsi), %r8d
    000000ca: 	addw	0x4(%rcx,%rdi), %ax
    000000cf: 	cmpl	%r8d, %edx
    000000d2: 	jle	.Ltmp1702 # Offset: 210
    000000d4: 	leal	0x4(%rsi), %r8d
    000000d8: 	addw	0x6(%rcx,%rdi), %ax
    000000dd: 	cmpl	%r8d, %edx
    000000e0: 	jle	.Ltmp1702 # Offset: 224
    000000e2: 	leal	0x5(%rsi), %r8d
    000000e6: 	addw	0x8(%rcx,%rdi), %ax
    000000eb: 	cmpl	%r8d, %edx
    000000ee: 	jle	.Ltmp1702 # Offset: 238
    000000f0: 	addl	$0x6, %esi
    000000f3: 	addw	0xa(%rcx,%rdi), %ax
    000000f8: 	cmpl	%esi, %edx
    000000fa: 	jle	.Ltmp1702 # Offset: 250
    000000fc: 	addw	0xc(%rcx,%rdi), %ax
    00000101: 	retq # Offset: 257
    00000102: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1703:
    00000108: 	subl	$0x1, %edx
    0000010b: 	leaq	0x2(%rdi,%rdx,2), %r8
.Ltmp1708:
    00000110: 	movzwl	(%rcx), %edx
    00000113: 	addl	%edx, %eax
    00000115: 	cmpw	$0x77, %dx
    00000119: 	jle	.Ltmp1707 # Offset: 281
    0000011b: 	movswl	%dx, %edi
    0000011e: 	imull	$0xffff8889, %edi, %esi
    00000124: 	imull	$0x6667, %edi, %edi
    0000012a: 	shrl	$0x10, %esi
    0000012d: 	addl	%edx, %esi
    0000012f: 	sarw	$0xf, %dx
    00000133: 	sarw	$0x6, %si
    00000137: 	sarl	$0x11, %edi
    0000013a: 	subl	%edx, %esi
    0000013c: 	subl	%edx, %edi
    0000013e: 	addl	%esi, %eax
    00000140: 	addl	%edi, %eax
.Ltmp1707:
    00000142: 	addq	$0x2, %rcx
    00000146: 	cmpq	%rcx, %r8
    00000149: 	jne	.Ltmp1708 # Offset: 329
.Ltmp1702:
    0000014b: 	retq # Offset: 331
.Ltmp1706:
    0000014c: 	retq # Offset: 332
.Ltmp1704:
    0000014d: 	xorl	%esi, %esi
    0000014f: 	jmp	.Ltmp1709 # Offset: 335
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_do_loop2_globalIsET_PKS0_iS0_"

Binary Function "_Z22test_goto_loop2_param2IsET_PKS0_iS0_" after disassembly {
  Number      : 218
  State       : disassembled
  Address     : 0x14cf0
  Size        : 0x5e
  MaxSize     : 0x60
  Offset      : 0x14cf0
  Section     : .text
  Orc Section : .local.text._Z22test_goto_loop2_param2IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0217:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp1710 # Offset: 8
    0000000a: 	leal	-0x1(%rsi), %ecx
    0000000d: 	shrw	$0xf, %dx
    00000011: 	leaq	0x2(%rdi,%rcx,2), %r8
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1713:
    00000020: 	movzwl	(%rdi), %ecx
    00000023: 	addl	%ecx, %eax
    00000025: 	cmpw	$0x77, %cx
    00000029: 	jle	.Ltmp1711 # Offset: 41
    0000002b: 	testb	%dl, %dl
    0000002d: 	jne	.Ltmp1712 # Offset: 45
.Ltmp1711:
    0000002f: 	addq	$0x2, %rdi
    00000033: 	cmpq	%rdi, %r8
    00000036: 	jne	.Ltmp1713 # Offset: 54
.Ltmp1710:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp1712:
    00000040: 	movswl	%cx, %esi
    00000043: 	sarw	$0xf, %cx
    00000047: 	addq	$0x2, %rdi
    0000004b: 	imull	$0x6667, %esi, %esi
    00000051: 	sarl	$0x11, %esi
    00000054: 	subl	%ecx, %esi
    00000056: 	addl	%esi, %eax
    00000058: 	cmpq	%rdi, %r8
    0000005b: 	jne	.Ltmp1713 # Offset: 91
    0000005d: 	retq # Offset: 93
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_goto_loop2_param2IsET_PKS0_iS0_"

Binary Function "_Z21test_goto_loop2_paramIsET_PKS0_iS0_" after disassembly {
  Number      : 219
  State       : disassembled
  Address     : 0x14d50
  Size        : 0x7a
  MaxSize     : 0x80
  Offset      : 0x14d50
  Section     : .text
  Orc Section : .local.text._Z21test_goto_loop2_paramIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0218:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp1714 # Offset: 8
    0000000a: 	leal	-0x1(%rsi), %ecx
    0000000d: 	shrw	$0xf, %dx
    00000011: 	leaq	0x2(%rdi,%rcx,2), %r9
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1717:
    00000020: 	movzwl	(%rdi), %ecx
    00000023: 	addl	%ecx, %eax
    00000025: 	cmpw	$0x77, %cx
    00000029: 	jle	.Ltmp1715 # Offset: 41
    0000002b: 	testb	%dl, %dl
    0000002d: 	jne	.Ltmp1716 # Offset: 45
.Ltmp1715:
    0000002f: 	addq	$0x2, %rdi
    00000033: 	cmpq	%rdi, %r9
    00000036: 	jne	.Ltmp1717 # Offset: 54
.Ltmp1714:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp1716:
    00000040: 	movswl	%cx, %esi
    00000043: 	movl	%ecx, %r10d
    00000046: 	addq	$0x2, %rdi
    0000004a: 	imull	$0x6667, %esi, %r8d
    00000051: 	sarw	$0xf, %r10w
    00000056: 	imull	$0xffff8889, %esi, %esi
    0000005c: 	sarl	$0x11, %r8d
    00000060: 	shrl	$0x10, %esi
    00000063: 	subl	%r10d, %r8d
    00000066: 	addl	%esi, %ecx
    00000068: 	addl	%r8d, %eax
    0000006b: 	sarw	$0x6, %cx
    0000006f: 	subl	%r10d, %ecx
    00000072: 	addl	%ecx, %eax
    00000074: 	cmpq	%rdi, %r9
    00000077: 	jne	.Ltmp1717 # Offset: 119
    00000079: 	retq # Offset: 121
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_goto_loop2_paramIsET_PKS0_iS0_"

Binary Function "_Z20test_do_loop2_param2IsET_PKS0_iS0_" after disassembly {
  Number      : 220
  State       : disassembled
  Address     : 0x14dd0
  Size        : 0x5e
  MaxSize     : 0x60
  Offset      : 0x14dd0
  Section     : .text
  Orc Section : .local.text._Z20test_do_loop2_param2IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0219:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp1718 # Offset: 8
    0000000a: 	leal	-0x1(%rsi), %ecx
    0000000d: 	shrw	$0xf, %dx
    00000011: 	leaq	0x2(%rdi,%rcx,2), %r8
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1721:
    00000020: 	movzwl	(%rdi), %ecx
    00000023: 	addl	%ecx, %eax
    00000025: 	cmpw	$0x77, %cx
    00000029: 	jle	.Ltmp1719 # Offset: 41
    0000002b: 	testb	%dl, %dl
    0000002d: 	jne	.Ltmp1720 # Offset: 45
.Ltmp1719:
    0000002f: 	addq	$0x2, %rdi
    00000033: 	cmpq	%rdi, %r8
    00000036: 	jne	.Ltmp1721 # Offset: 54
.Ltmp1718:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp1720:
    00000040: 	movswl	%cx, %esi
    00000043: 	sarw	$0xf, %cx
    00000047: 	addq	$0x2, %rdi
    0000004b: 	imull	$0x6667, %esi, %esi
    00000051: 	sarl	$0x11, %esi
    00000054: 	subl	%ecx, %esi
    00000056: 	addl	%esi, %eax
    00000058: 	cmpq	%rdi, %r8
    0000005b: 	jne	.Ltmp1721 # Offset: 91
    0000005d: 	retq # Offset: 93
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_do_loop2_param2IsET_PKS0_iS0_"

Binary Function "_Z19test_do_loop2_paramIsET_PKS0_iS0_" after disassembly {
  Number      : 221
  State       : disassembled
  Address     : 0x14e30
  Size        : 0x7a
  MaxSize     : 0x80
  Offset      : 0x14e30
  Section     : .text
  Orc Section : .local.text._Z19test_do_loop2_paramIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0220:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp1722 # Offset: 8
    0000000a: 	leal	-0x1(%rsi), %ecx
    0000000d: 	shrw	$0xf, %dx
    00000011: 	leaq	0x2(%rdi,%rcx,2), %r9
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1725:
    00000020: 	movzwl	(%rdi), %ecx
    00000023: 	addl	%ecx, %eax
    00000025: 	cmpw	$0x77, %cx
    00000029: 	jle	.Ltmp1723 # Offset: 41
    0000002b: 	testb	%dl, %dl
    0000002d: 	jne	.Ltmp1724 # Offset: 45
.Ltmp1723:
    0000002f: 	addq	$0x2, %rdi
    00000033: 	cmpq	%rdi, %r9
    00000036: 	jne	.Ltmp1725 # Offset: 54
.Ltmp1722:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp1724:
    00000040: 	movswl	%cx, %esi
    00000043: 	movl	%ecx, %r10d
    00000046: 	addq	$0x2, %rdi
    0000004a: 	imull	$0x6667, %esi, %r8d
    00000051: 	sarw	$0xf, %r10w
    00000056: 	imull	$0xffff8889, %esi, %esi
    0000005c: 	sarl	$0x11, %r8d
    00000060: 	shrl	$0x10, %esi
    00000063: 	subl	%r10d, %r8d
    00000066: 	addl	%esi, %ecx
    00000068: 	addl	%r8d, %eax
    0000006b: 	sarw	$0x6, %cx
    0000006f: 	subl	%r10d, %ecx
    00000072: 	addl	%ecx, %eax
    00000074: 	cmpq	%rdi, %r9
    00000077: 	jne	.Ltmp1725 # Offset: 119
    00000079: 	retq # Offset: 121
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_do_loop2_paramIsET_PKS0_iS0_"

Binary Function "_Z22test_goto_loop_global2IsET_PKS0_iS0_" after disassembly {
  Number      : 222
  State       : disassembled
  Address     : 0x14eb0
  Size        : 0x2d2
  MaxSize     : 0x2e0
  Offset      : 0x14eb0
  Section     : .text
  Orc Section : .local.text._Z22test_goto_loop_global2IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0221:
    00000000: 	endbr64
    00000004: 	movl	%esi, %eax
    00000006: 	xorl	%r8d, %r8d
    00000009: 	testl	%esi, %esi
    0000000b: 	jle	.Ltmp1726 # Offset: 11
    00000011: 	cvttsd2si	init_value(%rip), %edx
    00000019: 	testw	%dx, %dx
    0000001c: 	leal	-0x1(%rsi), %edx
    0000001f: 	js	.Ltmp1727 # Offset: 31
    00000025: 	cmpl	$0x6, %edx
    00000028: 	jbe	.Ltmp1728 # Offset: 40
    0000002e: 	movl	%esi, %ecx
    00000030: 	movq	%rdi, %rdx
    00000033: 	pxor	%xmm0, %xmm0
    00000037: 	shrl	$0x3, %ecx
    0000003a: 	subl	$0x1, %ecx
    0000003d: 	shlq	$0x4, %rcx
    00000041: 	leaq	0x10(%rdi,%rcx), %rcx
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1729:
    00000050: 	movdqu	(%rdx), %xmm5
    00000054: 	addq	$0x10, %rdx
    00000058: 	paddw	%xmm5, %xmm0
    0000005c: 	cmpq	%rcx, %rdx
    0000005f: 	jne	.Ltmp1729 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	movl	%eax, %edx
    00000067: 	psrldq	$0x8, %xmm1
    0000006c: 	andl	$-0x8, %edx
    0000006f: 	paddw	%xmm1, %xmm0
    00000073: 	movdqa	%xmm0, %xmm1
    00000077: 	psrldq	$0x4, %xmm1
    0000007c: 	paddw	%xmm1, %xmm0
    00000080: 	movdqa	%xmm0, %xmm1
    00000084: 	psrldq	$0x2, %xmm1
    00000089: 	paddw	%xmm1, %xmm0
    0000008d: 	pextrw	$0x0, %xmm0, %r8d
    00000093: 	testb	$0x7, %al
    00000095: 	je	.Ltmp1726 # Offset: 149
.Ltmp1732:
    00000097: 	movslq	%edx, %rsi
    0000009a: 	leaq	(%rsi,%rsi), %rcx
    0000009e: 	addw	(%rdi,%rsi,2), %r8w
    000000a3: 	leal	0x1(%rdx), %esi
    000000a6: 	cmpl	%esi, %eax
    000000a8: 	jle	.Ltmp1726 # Offset: 168
    000000aa: 	leal	0x2(%rdx), %esi
    000000ad: 	addw	0x2(%rdi,%rcx), %r8w
    000000b3: 	cmpl	%esi, %eax
    000000b5: 	jle	.Ltmp1726 # Offset: 181
    000000b7: 	leal	0x3(%rdx), %esi
    000000ba: 	addw	0x4(%rdi,%rcx), %r8w
    000000c0: 	cmpl	%esi, %eax
    000000c2: 	jle	.Ltmp1726 # Offset: 194
    000000c4: 	leal	0x4(%rdx), %esi
    000000c7: 	addw	0x6(%rdi,%rcx), %r8w
    000000cd: 	cmpl	%esi, %eax
    000000cf: 	jle	.Ltmp1726 # Offset: 207
    000000d1: 	leal	0x5(%rdx), %esi
    000000d4: 	addw	0x8(%rdi,%rcx), %r8w
    000000da: 	cmpl	%esi, %eax
    000000dc: 	jle	.Ltmp1726 # Offset: 220
    000000de: 	addl	$0x6, %edx
    000000e1: 	addw	0xa(%rdi,%rcx), %r8w
    000000e7: 	cmpl	%edx, %eax
    000000e9: 	jle	.Ltmp1726 # Offset: 233
    000000eb: 	addw	0xc(%rdi,%rcx), %r8w
.Ltmp1726:
    000000f1: 	movl	%r8d, %eax
    000000f4: 	retq # Offset: 244
    000000f5: 	nopl	(%rax) # Size: 3
.Ltmp1727:
    000000f8: 	cmpl	$0x6, %edx
    000000fb: 	jbe	.Ltmp1730 # Offset: 251
    00000101: 	movl	%esi, %ecx
    00000103: 	movdqa	DATAat0x38890(%rip), %xmm4
    0000010b: 	movq	%rdi, %rdx
    0000010e: 	pxor	%xmm1, %xmm1
    00000112: 	shrl	$0x3, %ecx
    00000115: 	subl	$0x1, %ecx
    00000118: 	shlq	$0x4, %rcx
    0000011c: 	leaq	0x10(%rdi,%rcx), %rcx
    00000121: 	nopl	(%rax) # Size: 7
.Ltmp1731:
    00000128: 	movdqu	(%rdx), %xmm2
    0000012c: 	addq	$0x10, %rdx
    00000130: 	movdqa	%xmm2, %xmm0
    00000134: 	movdqa	%xmm2, %xmm3
    00000138: 	paddw	%xmm2, %xmm1
    0000013c: 	pmulhw	%xmm4, %xmm0
    00000140: 	psraw	$0xf, %xmm3
    00000145: 	psraw	$0x1, %xmm0
    0000014a: 	psubw	%xmm3, %xmm0
    0000014e: 	paddw	%xmm0, %xmm1
    00000152: 	cmpq	%rdx, %rcx
    00000155: 	jne	.Ltmp1731 # Offset: 341
    00000157: 	movdqa	%xmm1, %xmm0
    0000015b: 	movl	%eax, %ecx
    0000015d: 	psrldq	$0x8, %xmm0
    00000162: 	andl	$-0x8, %ecx
    00000165: 	paddw	%xmm0, %xmm1
    00000169: 	movdqa	%xmm1, %xmm0
    0000016d: 	psrldq	$0x4, %xmm0
    00000172: 	paddw	%xmm0, %xmm1
    00000176: 	movdqa	%xmm1, %xmm0
    0000017a: 	psrldq	$0x2, %xmm0
    0000017f: 	paddw	%xmm0, %xmm1
    00000183: 	pextrw	$0x0, %xmm1, %r8d
    00000189: 	testb	$0x7, %al
    0000018b: 	je	.Ltmp1726 # Offset: 395
.Ltmp1733:
    00000191: 	movslq	%ecx, %rdx
    00000194: 	leaq	(%rdx,%rdx), %rsi
    00000198: 	movswl	(%rdi,%rdx,2), %edx
    0000019c: 	movl	%edx, %r9d
    0000019f: 	addl	%edx, %r8d
    000001a2: 	imull	$0x6667, %edx, %edx
    000001a8: 	sarw	$0xf, %r9w
    000001ad: 	sarl	$0x11, %edx
    000001b0: 	subl	%r9d, %edx
    000001b3: 	addl	%edx, %r8d
    000001b6: 	leal	0x1(%rcx), %edx
    000001b9: 	cmpl	%edx, %eax
    000001bb: 	jle	.Ltmp1726 # Offset: 443
    000001c1: 	movswl	0x2(%rdi,%rsi), %edx
    000001c6: 	movl	%edx, %r9d
    000001c9: 	imull	$0x6667, %edx, %edx
    000001cf: 	movl	%r9d, %r10d
    000001d2: 	sarw	$0xf, %r10w
    000001d7: 	sarl	$0x11, %edx
    000001da: 	subl	%r10d, %edx
    000001dd: 	addl	%r8d, %edx
    000001e0: 	leal	(%rdx,%r9), %r8d
    000001e4: 	leal	0x2(%rcx), %edx
    000001e7: 	cmpl	%edx, %eax
    000001e9: 	jle	.Ltmp1726 # Offset: 489
    000001ef: 	movswl	0x4(%rdi,%rsi), %edx
    000001f4: 	movl	%edx, %r9d
    000001f7: 	imull	$0x6667, %edx, %edx
    000001fd: 	movl	%r9d, %r10d
    00000200: 	sarw	$0xf, %r10w
    00000205: 	sarl	$0x11, %edx
    00000208: 	subl	%r10d, %edx
    0000020b: 	addl	%r9d, %edx
    0000020e: 	addl	%edx, %r8d
    00000211: 	leal	0x3(%rcx), %edx
    00000214: 	cmpl	%edx, %eax
    00000216: 	jle	.Ltmp1726 # Offset: 534
    0000021c: 	movswl	0x6(%rdi,%rsi), %edx
    00000221: 	movl	%edx, %r9d
    00000224: 	imull	$0x6667, %edx, %edx
    0000022a: 	movl	%r9d, %r10d
    0000022d: 	sarw	$0xf, %r10w
    00000232: 	sarl	$0x11, %edx
    00000235: 	subl	%r10d, %edx
    00000238: 	addl	%r9d, %edx
    0000023b: 	addl	%edx, %r8d
    0000023e: 	leal	0x4(%rcx), %edx
    00000241: 	cmpl	%edx, %eax
    00000243: 	jle	.Ltmp1726 # Offset: 579
    00000249: 	movswl	0x8(%rdi,%rsi), %edx
    0000024e: 	movl	%edx, %r9d
    00000251: 	imull	$0x6667, %edx, %edx
    00000257: 	movl	%r9d, %r10d
    0000025a: 	sarw	$0xf, %r10w
    0000025f: 	sarl	$0x11, %edx
    00000262: 	subl	%r10d, %edx
    00000265: 	addl	%r9d, %edx
    00000268: 	addl	%edx, %r8d
    0000026b: 	leal	0x5(%rcx), %edx
    0000026e: 	cmpl	%edx, %eax
    00000270: 	jle	.Ltmp1726 # Offset: 624
    00000276: 	movswl	0xa(%rdi,%rsi), %edx
    0000027b: 	addl	$0x6, %ecx
    0000027e: 	movl	%edx, %r9d
    00000281: 	imull	$0x6667, %edx, %edx
    00000287: 	movl	%r9d, %r10d
    0000028a: 	sarw	$0xf, %r10w
    0000028f: 	sarl	$0x11, %edx
    00000292: 	subl	%r10d, %edx
    00000295: 	addl	%r9d, %edx
    00000298: 	addl	%edx, %r8d
    0000029b: 	cmpl	%ecx, %eax
    0000029d: 	jle	.Ltmp1726 # Offset: 669
    000002a3: 	movswl	0xc(%rdi,%rsi), %eax
    000002a8: 	movl	%eax, %edx
    000002aa: 	imull	$0x6667, %eax, %eax
    000002b0: 	movl	%edx, %ecx
    000002b2: 	sarw	$0xf, %cx
    000002b6: 	sarl	$0x11, %eax
    000002b9: 	subl	%ecx, %eax
    000002bb: 	addl	%edx, %eax
    000002bd: 	addl	%eax, %r8d
    000002c0: 	movl	%r8d, %eax
    000002c3: 	retq # Offset: 707
.Ltmp1728:
    000002c4: 	xorl	%edx, %edx
    000002c6: 	jmp	.Ltmp1732 # Offset: 710
.Ltmp1730:
    000002cb: 	xorl	%ecx, %ecx
    000002cd: 	jmp	.Ltmp1733 # Offset: 717
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_goto_loop_global2IsET_PKS0_iS0_"

Binary Function "_Z21test_goto_loop_globalIsET_PKS0_iS0_" after disassembly {
  Number      : 223
  State       : disassembled
  Address     : 0x15190
  Size        : 0x392
  MaxSize     : 0x3a0
  Offset      : 0x15190
  Section     : .text
  Orc Section : .local.text._Z21test_goto_loop_globalIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0222:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %eax
    00000009: 	xorl	%r8d, %r8d
    0000000c: 	testl	%esi, %esi
    0000000e: 	jle	.Ltmp1734 # Offset: 14
    00000014: 	cvttsd2si	init_value(%rip), %edx
    0000001c: 	testw	%dx, %dx
    0000001f: 	leal	-0x1(%rsi), %edx
    00000022: 	js	.Ltmp1735 # Offset: 34
    00000028: 	cmpl	$0x6, %edx
    0000002b: 	jbe	.Ltmp1736 # Offset: 43
    00000031: 	shrl	$0x3, %esi
    00000034: 	movq	%rdi, %rdx
    00000037: 	pxor	%xmm0, %xmm0
    0000003b: 	subl	$0x1, %esi
    0000003e: 	shlq	$0x4, %rsi
    00000042: 	leaq	0x10(%rdi,%rsi), %rsi
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1737:
    00000050: 	movdqu	(%rdx), %xmm7
    00000054: 	addq	$0x10, %rdx
    00000058: 	paddw	%xmm7, %xmm0
    0000005c: 	cmpq	%rsi, %rdx
    0000005f: 	jne	.Ltmp1737 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	movl	%eax, %edx
    00000067: 	psrldq	$0x8, %xmm1
    0000006c: 	andl	$-0x8, %edx
    0000006f: 	paddw	%xmm1, %xmm0
    00000073: 	movdqa	%xmm0, %xmm1
    00000077: 	psrldq	$0x4, %xmm1
    0000007c: 	paddw	%xmm1, %xmm0
    00000080: 	movdqa	%xmm0, %xmm1
    00000084: 	psrldq	$0x2, %xmm1
    00000089: 	paddw	%xmm1, %xmm0
    0000008d: 	pextrw	$0x0, %xmm0, %r8d
    00000093: 	testb	$0x7, %al
    00000095: 	je	.Ltmp1734 # Offset: 149
.Ltmp1740:
    00000097: 	movslq	%edx, %rdi
    0000009a: 	leaq	(%rdi,%rdi), %rsi
    0000009e: 	addw	(%rcx,%rdi,2), %r8w
    000000a3: 	leal	0x1(%rdx), %edi
    000000a6: 	cmpl	%edi, %eax
    000000a8: 	jle	.Ltmp1734 # Offset: 168
    000000aa: 	leal	0x2(%rdx), %edi
    000000ad: 	addw	0x2(%rcx,%rsi), %r8w
    000000b3: 	cmpl	%edi, %eax
    000000b5: 	jle	.Ltmp1734 # Offset: 181
    000000b7: 	leal	0x3(%rdx), %edi
    000000ba: 	addw	0x4(%rcx,%rsi), %r8w
    000000c0: 	cmpl	%edi, %eax
    000000c2: 	jle	.Ltmp1734 # Offset: 194
    000000c4: 	leal	0x4(%rdx), %edi
    000000c7: 	addw	0x6(%rcx,%rsi), %r8w
    000000cd: 	cmpl	%edi, %eax
    000000cf: 	jle	.Ltmp1734 # Offset: 207
    000000d1: 	leal	0x5(%rdx), %edi
    000000d4: 	addw	0x8(%rcx,%rsi), %r8w
    000000da: 	cmpl	%edi, %eax
    000000dc: 	jle	.Ltmp1734 # Offset: 220
    000000de: 	addl	$0x6, %edx
    000000e1: 	addw	0xa(%rcx,%rsi), %r8w
    000000e7: 	cmpl	%edx, %eax
    000000e9: 	jle	.Ltmp1734 # Offset: 233
    000000eb: 	addw	0xc(%rcx,%rsi), %r8w
.Ltmp1734:
    000000f1: 	movl	%r8d, %eax
    000000f4: 	retq # Offset: 244
    000000f5: 	nopl	(%rax) # Size: 3
.Ltmp1735:
    000000f8: 	cmpl	$0x6, %edx
    000000fb: 	jbe	.Ltmp1738 # Offset: 251
    00000101: 	shrl	$0x3, %esi
    00000104: 	movdqa	DATAat0x38880(%rip), %xmm6
    0000010c: 	movq	%rdi, %rdx
    0000010f: 	pxor	%xmm3, %xmm3
    00000113: 	subl	$0x1, %esi
    00000116: 	movdqa	DATAat0x38890(%rip), %xmm5
    0000011e: 	shlq	$0x4, %rsi
    00000122: 	leaq	0x10(%rdi,%rsi), %rsi
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1739:
    00000130: 	movdqu	(%rdx), %xmm1
    00000134: 	addq	$0x10, %rdx
    00000138: 	movdqa	%xmm1, %xmm0
    0000013c: 	movdqa	%xmm1, %xmm2
    00000140: 	movdqa	%xmm1, %xmm4
    00000144: 	pmulhw	%xmm6, %xmm0
    00000148: 	pmulhw	%xmm5, %xmm2
    0000014c: 	paddw	%xmm1, %xmm3
    00000150: 	psraw	$0xf, %xmm4
    00000155: 	paddw	%xmm1, %xmm0
    00000159: 	psraw	$0x1, %xmm2
    0000015e: 	psraw	$0x6, %xmm0
    00000163: 	psubw	%xmm4, %xmm2
    00000167: 	psubw	%xmm4, %xmm0
    0000016b: 	paddw	%xmm2, %xmm0
    0000016f: 	paddw	%xmm0, %xmm3
    00000173: 	cmpq	%rsi, %rdx
    00000176: 	jne	.Ltmp1739 # Offset: 374
    00000178: 	movdqa	%xmm3, %xmm0
    0000017c: 	movl	%eax, %edi
    0000017e: 	psrldq	$0x8, %xmm0
    00000183: 	andl	$-0x8, %edi
    00000186: 	paddw	%xmm0, %xmm3
    0000018a: 	movdqa	%xmm3, %xmm0
    0000018e: 	psrldq	$0x4, %xmm0
    00000193: 	paddw	%xmm0, %xmm3
    00000197: 	movdqa	%xmm3, %xmm0
    0000019b: 	psrldq	$0x2, %xmm0
    000001a0: 	paddw	%xmm0, %xmm3
    000001a4: 	pextrw	$0x0, %xmm3, %r8d
    000001aa: 	testb	$0x7, %al
    000001ac: 	je	.Ltmp1734 # Offset: 428
.Ltmp1741:
    000001b2: 	movslq	%edi, %rdx
    000001b5: 	movswl	(%rcx,%rdx,2), %esi
    000001b9: 	leaq	(%rdx,%rdx), %r10
    000001bd: 	imull	$0xffff8889, %esi, %edx
    000001c3: 	movl	%esi, %r9d
    000001c6: 	movl	%esi, %r11d
    000001c9: 	sarw	$0xf, %r11w
    000001ce: 	addl	%r8d, %r9d
    000001d1: 	shrl	$0x10, %edx
    000001d4: 	addl	%esi, %edx
    000001d6: 	imull	$0x6667, %esi, %esi
    000001dc: 	sarw	$0x6, %dx
    000001e0: 	subl	%r11d, %edx
    000001e3: 	sarl	$0x11, %esi
    000001e6: 	movswl	%dx, %edx
    000001e9: 	subl	%r11d, %esi
    000001ec: 	movswl	%si, %esi
    000001ef: 	addl	%esi, %edx
    000001f1: 	leal	(%r9,%rdx), %r8d
    000001f5: 	leal	0x1(%rdi), %edx
    000001f8: 	cmpl	%edx, %eax
    000001fa: 	jle	.Ltmp1734 # Offset: 506
    00000200: 	movswl	0x2(%rcx,%r10), %esi
    00000206: 	imull	$0xffff8889, %esi, %edx
    0000020c: 	movl	%esi, %r9d
    0000020f: 	movl	%esi, %r11d
    00000212: 	sarw	$0xf, %r11w
    00000217: 	shrl	$0x10, %edx
    0000021a: 	addl	%esi, %edx
    0000021c: 	imull	$0x6667, %esi, %esi
    00000222: 	sarw	$0x6, %dx
    00000226: 	subl	%r11d, %edx
    00000229: 	sarl	$0x11, %esi
    0000022c: 	addl	%r8d, %edx
    0000022f: 	subl	%r11d, %esi
    00000232: 	addl	%edx, %esi
    00000234: 	leal	0x2(%rdi), %edx
    00000237: 	leal	(%rsi,%r9), %r8d
    0000023b: 	cmpl	%edx, %eax
    0000023d: 	jle	.Ltmp1734 # Offset: 573
    00000243: 	movswl	0x4(%rcx,%r10), %edx
    00000249: 	imull	$0xffff8889, %edx, %esi
    0000024f: 	movl	%edx, %r9d
    00000252: 	movl	%edx, %r11d
    00000255: 	sarw	$0xf, %r11w
    0000025a: 	shrl	$0x10, %esi
    0000025d: 	addl	%edx, %esi
    0000025f: 	imull	$0x6667, %edx, %edx
    00000265: 	sarw	$0x6, %si
    00000269: 	subl	%r11d, %esi
    0000026c: 	sarl	$0x11, %edx
    0000026f: 	addl	%esi, %r9d
    00000272: 	subl	%r11d, %edx
    00000275: 	addl	%r9d, %edx
    00000278: 	addl	%edx, %r8d
    0000027b: 	leal	0x3(%rdi), %edx
    0000027e: 	cmpl	%edx, %eax
    00000280: 	jle	.Ltmp1734 # Offset: 640
    00000286: 	movswl	0x6(%rcx,%r10), %edx
    0000028c: 	imull	$0xffff8889, %edx, %esi
    00000292: 	movl	%edx, %r9d
    00000295: 	movl	%edx, %r11d
    00000298: 	sarw	$0xf, %r11w
    0000029d: 	shrl	$0x10, %esi
    000002a0: 	addl	%edx, %esi
    000002a2: 	imull	$0x6667, %edx, %edx
    000002a8: 	sarw	$0x6, %si
    000002ac: 	subl	%r11d, %esi
    000002af: 	sarl	$0x11, %edx
    000002b2: 	addl	%esi, %r9d
    000002b5: 	subl	%r11d, %edx
    000002b8: 	addl	%r9d, %edx
    000002bb: 	addl	%edx, %r8d
    000002be: 	leal	0x4(%rdi), %edx
    000002c1: 	cmpl	%edx, %eax
    000002c3: 	jle	.Ltmp1734 # Offset: 707
    000002c9: 	movswl	0x8(%rcx,%r10), %edx
    000002cf: 	imull	$0xffff8889, %edx, %esi
    000002d5: 	movl	%edx, %r9d
    000002d8: 	movl	%edx, %r11d
    000002db: 	sarw	$0xf, %r11w
    000002e0: 	shrl	$0x10, %esi
    000002e3: 	addl	%edx, %esi
    000002e5: 	imull	$0x6667, %edx, %edx
    000002eb: 	sarw	$0x6, %si
    000002ef: 	subl	%r11d, %esi
    000002f2: 	sarl	$0x11, %edx
    000002f5: 	addl	%esi, %r9d
    000002f8: 	subl	%r11d, %edx
    000002fb: 	addl	%r9d, %edx
    000002fe: 	addl	%edx, %r8d
    00000301: 	leal	0x5(%rdi), %edx
    00000304: 	cmpl	%edx, %eax
    00000306: 	jle	.Ltmp1734 # Offset: 774
    0000030c: 	movswl	0xa(%rcx,%r10), %edx
    00000312: 	addl	$0x6, %edi
    00000315: 	imull	$0xffff8889, %edx, %esi
    0000031b: 	movl	%edx, %r9d
    0000031e: 	movl	%edx, %r11d
    00000321: 	sarw	$0xf, %r11w
    00000326: 	shrl	$0x10, %esi
    00000329: 	addl	%edx, %esi
    0000032b: 	imull	$0x6667, %edx, %edx
    00000331: 	sarw	$0x6, %si
    00000335: 	subl	%r11d, %esi
    00000338: 	sarl	$0x11, %edx
    0000033b: 	addl	%esi, %r9d
    0000033e: 	subl	%r11d, %edx
    00000341: 	addl	%r9d, %edx
    00000344: 	addl	%edx, %r8d
    00000347: 	cmpl	%edi, %eax
    00000349: 	jle	.Ltmp1734 # Offset: 841
    0000034f: 	movswl	0xc(%rcx,%r10), %eax
    00000355: 	imull	$0xffff8889, %eax, %edx
    0000035b: 	movl	%eax, %ecx
    0000035d: 	movl	%eax, %esi
    0000035f: 	sarw	$0xf, %si
    00000363: 	shrl	$0x10, %edx
    00000366: 	addl	%eax, %edx
    00000368: 	imull	$0x6667, %eax, %eax
    0000036e: 	sarw	$0x6, %dx
    00000372: 	subl	%esi, %edx
    00000374: 	sarl	$0x11, %eax
    00000377: 	addl	%edx, %ecx
    00000379: 	subl	%esi, %eax
    0000037b: 	addl	%ecx, %eax
    0000037d: 	addl	%eax, %r8d
    00000380: 	movl	%r8d, %eax
    00000383: 	retq # Offset: 899
.Ltmp1736:
    00000384: 	xorl	%edx, %edx
    00000386: 	jmp	.Ltmp1740 # Offset: 902
.Ltmp1738:
    0000038b: 	xorl	%edi, %edi
    0000038d: 	jmp	.Ltmp1741 # Offset: 909
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_goto_loop_globalIsET_PKS0_iS0_"

Binary Function "_Z20test_do_loop_global2IsET_PKS0_iS0_" after disassembly {
  Number      : 224
  State       : disassembled
  Address     : 0x15530
  Size        : 0x2d2
  MaxSize     : 0x2e0
  Offset      : 0x15530
  Section     : .text
  Orc Section : .local.text._Z20test_do_loop_global2IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0223:
    00000000: 	endbr64
    00000004: 	movl	%esi, %eax
    00000006: 	xorl	%r8d, %r8d
    00000009: 	testl	%esi, %esi
    0000000b: 	jle	.Ltmp1742 # Offset: 11
    00000011: 	cvttsd2si	init_value(%rip), %edx
    00000019: 	testw	%dx, %dx
    0000001c: 	leal	-0x1(%rsi), %edx
    0000001f: 	js	.Ltmp1743 # Offset: 31
    00000025: 	cmpl	$0x6, %edx
    00000028: 	jbe	.Ltmp1744 # Offset: 40
    0000002e: 	movl	%esi, %ecx
    00000030: 	movq	%rdi, %rdx
    00000033: 	pxor	%xmm0, %xmm0
    00000037: 	shrl	$0x3, %ecx
    0000003a: 	subl	$0x1, %ecx
    0000003d: 	shlq	$0x4, %rcx
    00000041: 	leaq	0x10(%rdi,%rcx), %rcx
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1745:
    00000050: 	movdqu	(%rdx), %xmm5
    00000054: 	addq	$0x10, %rdx
    00000058: 	paddw	%xmm5, %xmm0
    0000005c: 	cmpq	%rcx, %rdx
    0000005f: 	jne	.Ltmp1745 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	movl	%eax, %edx
    00000067: 	psrldq	$0x8, %xmm1
    0000006c: 	andl	$-0x8, %edx
    0000006f: 	paddw	%xmm1, %xmm0
    00000073: 	movdqa	%xmm0, %xmm1
    00000077: 	psrldq	$0x4, %xmm1
    0000007c: 	paddw	%xmm1, %xmm0
    00000080: 	movdqa	%xmm0, %xmm1
    00000084: 	psrldq	$0x2, %xmm1
    00000089: 	paddw	%xmm1, %xmm0
    0000008d: 	pextrw	$0x0, %xmm0, %r8d
    00000093: 	testb	$0x7, %al
    00000095: 	je	.Ltmp1742 # Offset: 149
.Ltmp1748:
    00000097: 	movslq	%edx, %rsi
    0000009a: 	leaq	(%rsi,%rsi), %rcx
    0000009e: 	addw	(%rdi,%rsi,2), %r8w
    000000a3: 	leal	0x1(%rdx), %esi
    000000a6: 	cmpl	%esi, %eax
    000000a8: 	jle	.Ltmp1742 # Offset: 168
    000000aa: 	leal	0x2(%rdx), %esi
    000000ad: 	addw	0x2(%rdi,%rcx), %r8w
    000000b3: 	cmpl	%esi, %eax
    000000b5: 	jle	.Ltmp1742 # Offset: 181
    000000b7: 	leal	0x3(%rdx), %esi
    000000ba: 	addw	0x4(%rdi,%rcx), %r8w
    000000c0: 	cmpl	%esi, %eax
    000000c2: 	jle	.Ltmp1742 # Offset: 194
    000000c4: 	leal	0x4(%rdx), %esi
    000000c7: 	addw	0x6(%rdi,%rcx), %r8w
    000000cd: 	cmpl	%esi, %eax
    000000cf: 	jle	.Ltmp1742 # Offset: 207
    000000d1: 	leal	0x5(%rdx), %esi
    000000d4: 	addw	0x8(%rdi,%rcx), %r8w
    000000da: 	cmpl	%esi, %eax
    000000dc: 	jle	.Ltmp1742 # Offset: 220
    000000de: 	addl	$0x6, %edx
    000000e1: 	addw	0xa(%rdi,%rcx), %r8w
    000000e7: 	cmpl	%edx, %eax
    000000e9: 	jle	.Ltmp1742 # Offset: 233
    000000eb: 	addw	0xc(%rdi,%rcx), %r8w
.Ltmp1742:
    000000f1: 	movl	%r8d, %eax
    000000f4: 	retq # Offset: 244
    000000f5: 	nopl	(%rax) # Size: 3
.Ltmp1743:
    000000f8: 	cmpl	$0x6, %edx
    000000fb: 	jbe	.Ltmp1746 # Offset: 251
    00000101: 	movl	%esi, %ecx
    00000103: 	movdqa	DATAat0x38890(%rip), %xmm4
    0000010b: 	movq	%rdi, %rdx
    0000010e: 	pxor	%xmm1, %xmm1
    00000112: 	shrl	$0x3, %ecx
    00000115: 	subl	$0x1, %ecx
    00000118: 	shlq	$0x4, %rcx
    0000011c: 	leaq	0x10(%rdi,%rcx), %rcx
    00000121: 	nopl	(%rax) # Size: 7
.Ltmp1747:
    00000128: 	movdqu	(%rdx), %xmm2
    0000012c: 	addq	$0x10, %rdx
    00000130: 	movdqa	%xmm2, %xmm0
    00000134: 	movdqa	%xmm2, %xmm3
    00000138: 	paddw	%xmm2, %xmm1
    0000013c: 	pmulhw	%xmm4, %xmm0
    00000140: 	psraw	$0xf, %xmm3
    00000145: 	psraw	$0x1, %xmm0
    0000014a: 	psubw	%xmm3, %xmm0
    0000014e: 	paddw	%xmm0, %xmm1
    00000152: 	cmpq	%rdx, %rcx
    00000155: 	jne	.Ltmp1747 # Offset: 341
    00000157: 	movdqa	%xmm1, %xmm0
    0000015b: 	movl	%eax, %ecx
    0000015d: 	psrldq	$0x8, %xmm0
    00000162: 	andl	$-0x8, %ecx
    00000165: 	paddw	%xmm0, %xmm1
    00000169: 	movdqa	%xmm1, %xmm0
    0000016d: 	psrldq	$0x4, %xmm0
    00000172: 	paddw	%xmm0, %xmm1
    00000176: 	movdqa	%xmm1, %xmm0
    0000017a: 	psrldq	$0x2, %xmm0
    0000017f: 	paddw	%xmm0, %xmm1
    00000183: 	pextrw	$0x0, %xmm1, %r8d
    00000189: 	testb	$0x7, %al
    0000018b: 	je	.Ltmp1742 # Offset: 395
.Ltmp1749:
    00000191: 	movslq	%ecx, %rdx
    00000194: 	leaq	(%rdx,%rdx), %rsi
    00000198: 	movswl	(%rdi,%rdx,2), %edx
    0000019c: 	movl	%edx, %r9d
    0000019f: 	addl	%edx, %r8d
    000001a2: 	imull	$0x6667, %edx, %edx
    000001a8: 	sarw	$0xf, %r9w
    000001ad: 	sarl	$0x11, %edx
    000001b0: 	subl	%r9d, %edx
    000001b3: 	addl	%edx, %r8d
    000001b6: 	leal	0x1(%rcx), %edx
    000001b9: 	cmpl	%edx, %eax
    000001bb: 	jle	.Ltmp1742 # Offset: 443
    000001c1: 	movswl	0x2(%rdi,%rsi), %edx
    000001c6: 	movl	%edx, %r9d
    000001c9: 	imull	$0x6667, %edx, %edx
    000001cf: 	movl	%r9d, %r10d
    000001d2: 	sarw	$0xf, %r10w
    000001d7: 	sarl	$0x11, %edx
    000001da: 	subl	%r10d, %edx
    000001dd: 	addl	%r8d, %edx
    000001e0: 	leal	(%rdx,%r9), %r8d
    000001e4: 	leal	0x2(%rcx), %edx
    000001e7: 	cmpl	%edx, %eax
    000001e9: 	jle	.Ltmp1742 # Offset: 489
    000001ef: 	movswl	0x4(%rdi,%rsi), %edx
    000001f4: 	movl	%edx, %r9d
    000001f7: 	imull	$0x6667, %edx, %edx
    000001fd: 	movl	%r9d, %r10d
    00000200: 	sarw	$0xf, %r10w
    00000205: 	sarl	$0x11, %edx
    00000208: 	subl	%r10d, %edx
    0000020b: 	addl	%r9d, %edx
    0000020e: 	addl	%edx, %r8d
    00000211: 	leal	0x3(%rcx), %edx
    00000214: 	cmpl	%edx, %eax
    00000216: 	jle	.Ltmp1742 # Offset: 534
    0000021c: 	movswl	0x6(%rdi,%rsi), %edx
    00000221: 	movl	%edx, %r9d
    00000224: 	imull	$0x6667, %edx, %edx
    0000022a: 	movl	%r9d, %r10d
    0000022d: 	sarw	$0xf, %r10w
    00000232: 	sarl	$0x11, %edx
    00000235: 	subl	%r10d, %edx
    00000238: 	addl	%r9d, %edx
    0000023b: 	addl	%edx, %r8d
    0000023e: 	leal	0x4(%rcx), %edx
    00000241: 	cmpl	%edx, %eax
    00000243: 	jle	.Ltmp1742 # Offset: 579
    00000249: 	movswl	0x8(%rdi,%rsi), %edx
    0000024e: 	movl	%edx, %r9d
    00000251: 	imull	$0x6667, %edx, %edx
    00000257: 	movl	%r9d, %r10d
    0000025a: 	sarw	$0xf, %r10w
    0000025f: 	sarl	$0x11, %edx
    00000262: 	subl	%r10d, %edx
    00000265: 	addl	%r9d, %edx
    00000268: 	addl	%edx, %r8d
    0000026b: 	leal	0x5(%rcx), %edx
    0000026e: 	cmpl	%edx, %eax
    00000270: 	jle	.Ltmp1742 # Offset: 624
    00000276: 	movswl	0xa(%rdi,%rsi), %edx
    0000027b: 	addl	$0x6, %ecx
    0000027e: 	movl	%edx, %r9d
    00000281: 	imull	$0x6667, %edx, %edx
    00000287: 	movl	%r9d, %r10d
    0000028a: 	sarw	$0xf, %r10w
    0000028f: 	sarl	$0x11, %edx
    00000292: 	subl	%r10d, %edx
    00000295: 	addl	%r9d, %edx
    00000298: 	addl	%edx, %r8d
    0000029b: 	cmpl	%ecx, %eax
    0000029d: 	jle	.Ltmp1742 # Offset: 669
    000002a3: 	movswl	0xc(%rdi,%rsi), %eax
    000002a8: 	movl	%eax, %edx
    000002aa: 	imull	$0x6667, %eax, %eax
    000002b0: 	movl	%edx, %ecx
    000002b2: 	sarw	$0xf, %cx
    000002b6: 	sarl	$0x11, %eax
    000002b9: 	subl	%ecx, %eax
    000002bb: 	addl	%edx, %eax
    000002bd: 	addl	%eax, %r8d
    000002c0: 	movl	%r8d, %eax
    000002c3: 	retq # Offset: 707
.Ltmp1744:
    000002c4: 	xorl	%edx, %edx
    000002c6: 	jmp	.Ltmp1748 # Offset: 710
.Ltmp1746:
    000002cb: 	xorl	%ecx, %ecx
    000002cd: 	jmp	.Ltmp1749 # Offset: 717
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_do_loop_global2IsET_PKS0_iS0_"

Binary Function "_Z19test_do_loop_globalIsET_PKS0_iS0_" after disassembly {
  Number      : 225
  State       : disassembled
  Address     : 0x15810
  Size        : 0x392
  MaxSize     : 0x3a0
  Offset      : 0x15810
  Section     : .text
  Orc Section : .local.text._Z19test_do_loop_globalIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0224:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %eax
    00000009: 	xorl	%r8d, %r8d
    0000000c: 	testl	%esi, %esi
    0000000e: 	jle	.Ltmp1750 # Offset: 14
    00000014: 	cvttsd2si	init_value(%rip), %edx
    0000001c: 	testw	%dx, %dx
    0000001f: 	leal	-0x1(%rsi), %edx
    00000022: 	js	.Ltmp1751 # Offset: 34
    00000028: 	cmpl	$0x6, %edx
    0000002b: 	jbe	.Ltmp1752 # Offset: 43
    00000031: 	shrl	$0x3, %esi
    00000034: 	movq	%rdi, %rdx
    00000037: 	pxor	%xmm0, %xmm0
    0000003b: 	subl	$0x1, %esi
    0000003e: 	shlq	$0x4, %rsi
    00000042: 	leaq	0x10(%rdi,%rsi), %rsi
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1753:
    00000050: 	movdqu	(%rdx), %xmm7
    00000054: 	addq	$0x10, %rdx
    00000058: 	paddw	%xmm7, %xmm0
    0000005c: 	cmpq	%rsi, %rdx
    0000005f: 	jne	.Ltmp1753 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	movl	%eax, %edx
    00000067: 	psrldq	$0x8, %xmm1
    0000006c: 	andl	$-0x8, %edx
    0000006f: 	paddw	%xmm1, %xmm0
    00000073: 	movdqa	%xmm0, %xmm1
    00000077: 	psrldq	$0x4, %xmm1
    0000007c: 	paddw	%xmm1, %xmm0
    00000080: 	movdqa	%xmm0, %xmm1
    00000084: 	psrldq	$0x2, %xmm1
    00000089: 	paddw	%xmm1, %xmm0
    0000008d: 	pextrw	$0x0, %xmm0, %r8d
    00000093: 	testb	$0x7, %al
    00000095: 	je	.Ltmp1750 # Offset: 149
.Ltmp1756:
    00000097: 	movslq	%edx, %rdi
    0000009a: 	leaq	(%rdi,%rdi), %rsi
    0000009e: 	addw	(%rcx,%rdi,2), %r8w
    000000a3: 	leal	0x1(%rdx), %edi
    000000a6: 	cmpl	%edi, %eax
    000000a8: 	jle	.Ltmp1750 # Offset: 168
    000000aa: 	leal	0x2(%rdx), %edi
    000000ad: 	addw	0x2(%rcx,%rsi), %r8w
    000000b3: 	cmpl	%edi, %eax
    000000b5: 	jle	.Ltmp1750 # Offset: 181
    000000b7: 	leal	0x3(%rdx), %edi
    000000ba: 	addw	0x4(%rcx,%rsi), %r8w
    000000c0: 	cmpl	%edi, %eax
    000000c2: 	jle	.Ltmp1750 # Offset: 194
    000000c4: 	leal	0x4(%rdx), %edi
    000000c7: 	addw	0x6(%rcx,%rsi), %r8w
    000000cd: 	cmpl	%edi, %eax
    000000cf: 	jle	.Ltmp1750 # Offset: 207
    000000d1: 	leal	0x5(%rdx), %edi
    000000d4: 	addw	0x8(%rcx,%rsi), %r8w
    000000da: 	cmpl	%edi, %eax
    000000dc: 	jle	.Ltmp1750 # Offset: 220
    000000de: 	addl	$0x6, %edx
    000000e1: 	addw	0xa(%rcx,%rsi), %r8w
    000000e7: 	cmpl	%edx, %eax
    000000e9: 	jle	.Ltmp1750 # Offset: 233
    000000eb: 	addw	0xc(%rcx,%rsi), %r8w
.Ltmp1750:
    000000f1: 	movl	%r8d, %eax
    000000f4: 	retq # Offset: 244
    000000f5: 	nopl	(%rax) # Size: 3
.Ltmp1751:
    000000f8: 	cmpl	$0x6, %edx
    000000fb: 	jbe	.Ltmp1754 # Offset: 251
    00000101: 	shrl	$0x3, %esi
    00000104: 	movdqa	DATAat0x38880(%rip), %xmm6
    0000010c: 	movq	%rdi, %rdx
    0000010f: 	pxor	%xmm3, %xmm3
    00000113: 	subl	$0x1, %esi
    00000116: 	movdqa	DATAat0x38890(%rip), %xmm5
    0000011e: 	shlq	$0x4, %rsi
    00000122: 	leaq	0x10(%rdi,%rsi), %rsi
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1755:
    00000130: 	movdqu	(%rdx), %xmm1
    00000134: 	addq	$0x10, %rdx
    00000138: 	movdqa	%xmm1, %xmm0
    0000013c: 	movdqa	%xmm1, %xmm2
    00000140: 	movdqa	%xmm1, %xmm4
    00000144: 	pmulhw	%xmm6, %xmm0
    00000148: 	pmulhw	%xmm5, %xmm2
    0000014c: 	paddw	%xmm1, %xmm3
    00000150: 	psraw	$0xf, %xmm4
    00000155: 	paddw	%xmm1, %xmm0
    00000159: 	psraw	$0x1, %xmm2
    0000015e: 	psraw	$0x6, %xmm0
    00000163: 	psubw	%xmm4, %xmm2
    00000167: 	psubw	%xmm4, %xmm0
    0000016b: 	paddw	%xmm2, %xmm0
    0000016f: 	paddw	%xmm0, %xmm3
    00000173: 	cmpq	%rsi, %rdx
    00000176: 	jne	.Ltmp1755 # Offset: 374
    00000178: 	movdqa	%xmm3, %xmm0
    0000017c: 	movl	%eax, %edi
    0000017e: 	psrldq	$0x8, %xmm0
    00000183: 	andl	$-0x8, %edi
    00000186: 	paddw	%xmm0, %xmm3
    0000018a: 	movdqa	%xmm3, %xmm0
    0000018e: 	psrldq	$0x4, %xmm0
    00000193: 	paddw	%xmm0, %xmm3
    00000197: 	movdqa	%xmm3, %xmm0
    0000019b: 	psrldq	$0x2, %xmm0
    000001a0: 	paddw	%xmm0, %xmm3
    000001a4: 	pextrw	$0x0, %xmm3, %r8d
    000001aa: 	testb	$0x7, %al
    000001ac: 	je	.Ltmp1750 # Offset: 428
.Ltmp1757:
    000001b2: 	movslq	%edi, %rdx
    000001b5: 	movswl	(%rcx,%rdx,2), %esi
    000001b9: 	leaq	(%rdx,%rdx), %r10
    000001bd: 	imull	$0xffff8889, %esi, %edx
    000001c3: 	movl	%esi, %r9d
    000001c6: 	movl	%esi, %r11d
    000001c9: 	sarw	$0xf, %r11w
    000001ce: 	addl	%r8d, %r9d
    000001d1: 	shrl	$0x10, %edx
    000001d4: 	addl	%esi, %edx
    000001d6: 	imull	$0x6667, %esi, %esi
    000001dc: 	sarw	$0x6, %dx
    000001e0: 	subl	%r11d, %edx
    000001e3: 	sarl	$0x11, %esi
    000001e6: 	movswl	%dx, %edx
    000001e9: 	subl	%r11d, %esi
    000001ec: 	movswl	%si, %esi
    000001ef: 	addl	%esi, %edx
    000001f1: 	leal	(%r9,%rdx), %r8d
    000001f5: 	leal	0x1(%rdi), %edx
    000001f8: 	cmpl	%edx, %eax
    000001fa: 	jle	.Ltmp1750 # Offset: 506
    00000200: 	movswl	0x2(%rcx,%r10), %esi
    00000206: 	imull	$0xffff8889, %esi, %edx
    0000020c: 	movl	%esi, %r9d
    0000020f: 	movl	%esi, %r11d
    00000212: 	sarw	$0xf, %r11w
    00000217: 	shrl	$0x10, %edx
    0000021a: 	addl	%esi, %edx
    0000021c: 	imull	$0x6667, %esi, %esi
    00000222: 	sarw	$0x6, %dx
    00000226: 	subl	%r11d, %edx
    00000229: 	sarl	$0x11, %esi
    0000022c: 	addl	%r8d, %edx
    0000022f: 	subl	%r11d, %esi
    00000232: 	addl	%edx, %esi
    00000234: 	leal	0x2(%rdi), %edx
    00000237: 	leal	(%rsi,%r9), %r8d
    0000023b: 	cmpl	%edx, %eax
    0000023d: 	jle	.Ltmp1750 # Offset: 573
    00000243: 	movswl	0x4(%rcx,%r10), %edx
    00000249: 	imull	$0xffff8889, %edx, %esi
    0000024f: 	movl	%edx, %r9d
    00000252: 	movl	%edx, %r11d
    00000255: 	sarw	$0xf, %r11w
    0000025a: 	shrl	$0x10, %esi
    0000025d: 	addl	%edx, %esi
    0000025f: 	imull	$0x6667, %edx, %edx
    00000265: 	sarw	$0x6, %si
    00000269: 	subl	%r11d, %esi
    0000026c: 	sarl	$0x11, %edx
    0000026f: 	addl	%esi, %r9d
    00000272: 	subl	%r11d, %edx
    00000275: 	addl	%r9d, %edx
    00000278: 	addl	%edx, %r8d
    0000027b: 	leal	0x3(%rdi), %edx
    0000027e: 	cmpl	%edx, %eax
    00000280: 	jle	.Ltmp1750 # Offset: 640
    00000286: 	movswl	0x6(%rcx,%r10), %edx
    0000028c: 	imull	$0xffff8889, %edx, %esi
    00000292: 	movl	%edx, %r9d
    00000295: 	movl	%edx, %r11d
    00000298: 	sarw	$0xf, %r11w
    0000029d: 	shrl	$0x10, %esi
    000002a0: 	addl	%edx, %esi
    000002a2: 	imull	$0x6667, %edx, %edx
    000002a8: 	sarw	$0x6, %si
    000002ac: 	subl	%r11d, %esi
    000002af: 	sarl	$0x11, %edx
    000002b2: 	addl	%esi, %r9d
    000002b5: 	subl	%r11d, %edx
    000002b8: 	addl	%r9d, %edx
    000002bb: 	addl	%edx, %r8d
    000002be: 	leal	0x4(%rdi), %edx
    000002c1: 	cmpl	%edx, %eax
    000002c3: 	jle	.Ltmp1750 # Offset: 707
    000002c9: 	movswl	0x8(%rcx,%r10), %edx
    000002cf: 	imull	$0xffff8889, %edx, %esi
    000002d5: 	movl	%edx, %r9d
    000002d8: 	movl	%edx, %r11d
    000002db: 	sarw	$0xf, %r11w
    000002e0: 	shrl	$0x10, %esi
    000002e3: 	addl	%edx, %esi
    000002e5: 	imull	$0x6667, %edx, %edx
    000002eb: 	sarw	$0x6, %si
    000002ef: 	subl	%r11d, %esi
    000002f2: 	sarl	$0x11, %edx
    000002f5: 	addl	%esi, %r9d
    000002f8: 	subl	%r11d, %edx
    000002fb: 	addl	%r9d, %edx
    000002fe: 	addl	%edx, %r8d
    00000301: 	leal	0x5(%rdi), %edx
    00000304: 	cmpl	%edx, %eax
    00000306: 	jle	.Ltmp1750 # Offset: 774
    0000030c: 	movswl	0xa(%rcx,%r10), %edx
    00000312: 	addl	$0x6, %edi
    00000315: 	imull	$0xffff8889, %edx, %esi
    0000031b: 	movl	%edx, %r9d
    0000031e: 	movl	%edx, %r11d
    00000321: 	sarw	$0xf, %r11w
    00000326: 	shrl	$0x10, %esi
    00000329: 	addl	%edx, %esi
    0000032b: 	imull	$0x6667, %edx, %edx
    00000331: 	sarw	$0x6, %si
    00000335: 	subl	%r11d, %esi
    00000338: 	sarl	$0x11, %edx
    0000033b: 	addl	%esi, %r9d
    0000033e: 	subl	%r11d, %edx
    00000341: 	addl	%r9d, %edx
    00000344: 	addl	%edx, %r8d
    00000347: 	cmpl	%edi, %eax
    00000349: 	jle	.Ltmp1750 # Offset: 841
    0000034f: 	movswl	0xc(%rcx,%r10), %eax
    00000355: 	imull	$0xffff8889, %eax, %edx
    0000035b: 	movl	%eax, %ecx
    0000035d: 	movl	%eax, %esi
    0000035f: 	sarw	$0xf, %si
    00000363: 	shrl	$0x10, %edx
    00000366: 	addl	%eax, %edx
    00000368: 	imull	$0x6667, %eax, %eax
    0000036e: 	sarw	$0x6, %dx
    00000372: 	subl	%esi, %edx
    00000374: 	sarl	$0x11, %eax
    00000377: 	addl	%edx, %ecx
    00000379: 	subl	%esi, %eax
    0000037b: 	addl	%ecx, %eax
    0000037d: 	addl	%eax, %r8d
    00000380: 	movl	%r8d, %eax
    00000383: 	retq # Offset: 899
.Ltmp1752:
    00000384: 	xorl	%edx, %edx
    00000386: 	jmp	.Ltmp1756 # Offset: 902
.Ltmp1754:
    0000038b: 	xorl	%edi, %edi
    0000038d: 	jmp	.Ltmp1757 # Offset: 909
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_do_loop_globalIsET_PKS0_iS0_"

Binary Function "_Z21test_goto_loop_param2IsET_PKS0_iS0_" after disassembly {
  Number      : 226
  State       : disassembled
  Address     : 0x15bb0
  Size        : 0x2c2
  MaxSize     : 0x2d0
  Offset      : 0x15bb0
  Section     : .text
  Orc Section : .local.text._Z21test_goto_loop_param2IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0225:
    00000000: 	endbr64
    00000004: 	movl	%esi, %eax
    00000006: 	xorl	%r8d, %r8d
    00000009: 	testl	%esi, %esi
    0000000b: 	jle	.Ltmp1758 # Offset: 11
    00000011: 	testw	%dx, %dx
    00000014: 	leal	-0x1(%rsi), %edx
    00000017: 	js	.Ltmp1759 # Offset: 23
    0000001d: 	cmpl	$0x6, %edx
    00000020: 	jbe	.Ltmp1760 # Offset: 32
    00000026: 	movl	%esi, %ecx
    00000028: 	movq	%rdi, %rdx
    0000002b: 	pxor	%xmm0, %xmm0
    0000002f: 	shrl	$0x3, %ecx
    00000032: 	subl	$0x1, %ecx
    00000035: 	shlq	$0x4, %rcx
    00000039: 	leaq	0x10(%rdi,%rcx), %rcx
    0000003e: 	nop # Size: 2
.Ltmp1761:
    00000040: 	movdqu	(%rdx), %xmm5
    00000044: 	addq	$0x10, %rdx
    00000048: 	paddw	%xmm5, %xmm0
    0000004c: 	cmpq	%rcx, %rdx
    0000004f: 	jne	.Ltmp1761 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%eax, %edx
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x8, %edx
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x4, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	movdqa	%xmm0, %xmm1
    00000074: 	psrldq	$0x2, %xmm1
    00000079: 	paddw	%xmm1, %xmm0
    0000007d: 	pextrw	$0x0, %xmm0, %r8d
    00000083: 	testb	$0x7, %al
    00000085: 	je	.Ltmp1758 # Offset: 133
.Ltmp1764:
    00000087: 	movslq	%edx, %rsi
    0000008a: 	leaq	(%rsi,%rsi), %rcx
    0000008e: 	addw	(%rdi,%rsi,2), %r8w
    00000093: 	leal	0x1(%rdx), %esi
    00000096: 	cmpl	%esi, %eax
    00000098: 	jle	.Ltmp1758 # Offset: 152
    0000009a: 	leal	0x2(%rdx), %esi
    0000009d: 	addw	0x2(%rdi,%rcx), %r8w
    000000a3: 	cmpl	%esi, %eax
    000000a5: 	jle	.Ltmp1758 # Offset: 165
    000000a7: 	leal	0x3(%rdx), %esi
    000000aa: 	addw	0x4(%rdi,%rcx), %r8w
    000000b0: 	cmpl	%esi, %eax
    000000b2: 	jle	.Ltmp1758 # Offset: 178
    000000b4: 	leal	0x4(%rdx), %esi
    000000b7: 	addw	0x6(%rdi,%rcx), %r8w
    000000bd: 	cmpl	%esi, %eax
    000000bf: 	jle	.Ltmp1758 # Offset: 191
    000000c1: 	leal	0x5(%rdx), %esi
    000000c4: 	addw	0x8(%rdi,%rcx), %r8w
    000000ca: 	cmpl	%esi, %eax
    000000cc: 	jle	.Ltmp1758 # Offset: 204
    000000ce: 	addl	$0x6, %edx
    000000d1: 	addw	0xa(%rdi,%rcx), %r8w
    000000d7: 	cmpl	%edx, %eax
    000000d9: 	jle	.Ltmp1758 # Offset: 217
    000000db: 	addw	0xc(%rdi,%rcx), %r8w
.Ltmp1758:
    000000e1: 	movl	%r8d, %eax
    000000e4: 	retq # Offset: 228
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp1759:
    000000e8: 	cmpl	$0x6, %edx
    000000eb: 	jbe	.Ltmp1762 # Offset: 235
    000000f1: 	movl	%esi, %ecx
    000000f3: 	movdqa	DATAat0x38890(%rip), %xmm4
    000000fb: 	movq	%rdi, %rdx
    000000fe: 	pxor	%xmm1, %xmm1
    00000102: 	shrl	$0x3, %ecx
    00000105: 	subl	$0x1, %ecx
    00000108: 	shlq	$0x4, %rcx
    0000010c: 	leaq	0x10(%rdi,%rcx), %rcx
    00000111: 	nopl	(%rax) # Size: 7
.Ltmp1763:
    00000118: 	movdqu	(%rdx), %xmm2
    0000011c: 	addq	$0x10, %rdx
    00000120: 	movdqa	%xmm2, %xmm0
    00000124: 	movdqa	%xmm2, %xmm3
    00000128: 	paddw	%xmm2, %xmm1
    0000012c: 	pmulhw	%xmm4, %xmm0
    00000130: 	psraw	$0xf, %xmm3
    00000135: 	psraw	$0x1, %xmm0
    0000013a: 	psubw	%xmm3, %xmm0
    0000013e: 	paddw	%xmm0, %xmm1
    00000142: 	cmpq	%rdx, %rcx
    00000145: 	jne	.Ltmp1763 # Offset: 325
    00000147: 	movdqa	%xmm1, %xmm0
    0000014b: 	movl	%eax, %ecx
    0000014d: 	psrldq	$0x8, %xmm0
    00000152: 	andl	$-0x8, %ecx
    00000155: 	paddw	%xmm0, %xmm1
    00000159: 	movdqa	%xmm1, %xmm0
    0000015d: 	psrldq	$0x4, %xmm0
    00000162: 	paddw	%xmm0, %xmm1
    00000166: 	movdqa	%xmm1, %xmm0
    0000016a: 	psrldq	$0x2, %xmm0
    0000016f: 	paddw	%xmm0, %xmm1
    00000173: 	pextrw	$0x0, %xmm1, %r8d
    00000179: 	testb	$0x7, %al
    0000017b: 	je	.Ltmp1758 # Offset: 379
.Ltmp1765:
    00000181: 	movslq	%ecx, %rdx
    00000184: 	leaq	(%rdx,%rdx), %rsi
    00000188: 	movswl	(%rdi,%rdx,2), %edx
    0000018c: 	movl	%edx, %r9d
    0000018f: 	addl	%edx, %r8d
    00000192: 	imull	$0x6667, %edx, %edx
    00000198: 	sarw	$0xf, %r9w
    0000019d: 	sarl	$0x11, %edx
    000001a0: 	subl	%r9d, %edx
    000001a3: 	addl	%edx, %r8d
    000001a6: 	leal	0x1(%rcx), %edx
    000001a9: 	cmpl	%edx, %eax
    000001ab: 	jle	.Ltmp1758 # Offset: 427
    000001b1: 	movswl	0x2(%rdi,%rsi), %edx
    000001b6: 	movl	%edx, %r9d
    000001b9: 	imull	$0x6667, %edx, %edx
    000001bf: 	movl	%r9d, %r10d
    000001c2: 	sarw	$0xf, %r10w
    000001c7: 	sarl	$0x11, %edx
    000001ca: 	subl	%r10d, %edx
    000001cd: 	addl	%r8d, %edx
    000001d0: 	leal	(%rdx,%r9), %r8d
    000001d4: 	leal	0x2(%rcx), %edx
    000001d7: 	cmpl	%edx, %eax
    000001d9: 	jle	.Ltmp1758 # Offset: 473
    000001df: 	movswl	0x4(%rdi,%rsi), %edx
    000001e4: 	movl	%edx, %r9d
    000001e7: 	imull	$0x6667, %edx, %edx
    000001ed: 	movl	%r9d, %r10d
    000001f0: 	sarw	$0xf, %r10w
    000001f5: 	sarl	$0x11, %edx
    000001f8: 	subl	%r10d, %edx
    000001fb: 	addl	%r9d, %edx
    000001fe: 	addl	%edx, %r8d
    00000201: 	leal	0x3(%rcx), %edx
    00000204: 	cmpl	%edx, %eax
    00000206: 	jle	.Ltmp1758 # Offset: 518
    0000020c: 	movswl	0x6(%rdi,%rsi), %edx
    00000211: 	movl	%edx, %r9d
    00000214: 	imull	$0x6667, %edx, %edx
    0000021a: 	movl	%r9d, %r10d
    0000021d: 	sarw	$0xf, %r10w
    00000222: 	sarl	$0x11, %edx
    00000225: 	subl	%r10d, %edx
    00000228: 	addl	%r9d, %edx
    0000022b: 	addl	%edx, %r8d
    0000022e: 	leal	0x4(%rcx), %edx
    00000231: 	cmpl	%edx, %eax
    00000233: 	jle	.Ltmp1758 # Offset: 563
    00000239: 	movswl	0x8(%rdi,%rsi), %edx
    0000023e: 	movl	%edx, %r9d
    00000241: 	imull	$0x6667, %edx, %edx
    00000247: 	movl	%r9d, %r10d
    0000024a: 	sarw	$0xf, %r10w
    0000024f: 	sarl	$0x11, %edx
    00000252: 	subl	%r10d, %edx
    00000255: 	addl	%r9d, %edx
    00000258: 	addl	%edx, %r8d
    0000025b: 	leal	0x5(%rcx), %edx
    0000025e: 	cmpl	%edx, %eax
    00000260: 	jle	.Ltmp1758 # Offset: 608
    00000266: 	movswl	0xa(%rdi,%rsi), %edx
    0000026b: 	addl	$0x6, %ecx
    0000026e: 	movl	%edx, %r9d
    00000271: 	imull	$0x6667, %edx, %edx
    00000277: 	movl	%r9d, %r10d
    0000027a: 	sarw	$0xf, %r10w
    0000027f: 	sarl	$0x11, %edx
    00000282: 	subl	%r10d, %edx
    00000285: 	addl	%r9d, %edx
    00000288: 	addl	%edx, %r8d
    0000028b: 	cmpl	%ecx, %eax
    0000028d: 	jle	.Ltmp1758 # Offset: 653
    00000293: 	movswl	0xc(%rdi,%rsi), %eax
    00000298: 	movl	%eax, %edx
    0000029a: 	imull	$0x6667, %eax, %eax
    000002a0: 	movl	%edx, %ecx
    000002a2: 	sarw	$0xf, %cx
    000002a6: 	sarl	$0x11, %eax
    000002a9: 	subl	%ecx, %eax
    000002ab: 	addl	%edx, %eax
    000002ad: 	addl	%eax, %r8d
    000002b0: 	movl	%r8d, %eax
    000002b3: 	retq # Offset: 691
.Ltmp1760:
    000002b4: 	xorl	%edx, %edx
    000002b6: 	jmp	.Ltmp1764 # Offset: 694
.Ltmp1762:
    000002bb: 	xorl	%ecx, %ecx
    000002bd: 	jmp	.Ltmp1765 # Offset: 701
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_goto_loop_param2IsET_PKS0_iS0_"

Binary Function "_Z20test_goto_loop_paramIsET_PKS0_iS0_" after disassembly {
  Number      : 227
  State       : disassembled
  Address     : 0x15e80
  Size        : 0x382
  MaxSize     : 0x390
  Offset      : 0x15e80
  Section     : .text
  Orc Section : .local.text._Z20test_goto_loop_paramIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0226:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %eax
    00000009: 	xorl	%r8d, %r8d
    0000000c: 	testl	%esi, %esi
    0000000e: 	jle	.Ltmp1766 # Offset: 14
    00000014: 	testw	%dx, %dx
    00000017: 	leal	-0x1(%rsi), %edx
    0000001a: 	js	.Ltmp1767 # Offset: 26
    00000020: 	cmpl	$0x6, %edx
    00000023: 	jbe	.Ltmp1768 # Offset: 35
    00000029: 	shrl	$0x3, %esi
    0000002c: 	movq	%rdi, %rdx
    0000002f: 	pxor	%xmm0, %xmm0
    00000033: 	subl	$0x1, %esi
    00000036: 	shlq	$0x4, %rsi
    0000003a: 	leaq	0x10(%rdi,%rsi), %rsi
    0000003f: 	nop # Size: 1
.Ltmp1769:
    00000040: 	movdqu	(%rdx), %xmm7
    00000044: 	addq	$0x10, %rdx
    00000048: 	paddw	%xmm7, %xmm0
    0000004c: 	cmpq	%rsi, %rdx
    0000004f: 	jne	.Ltmp1769 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%eax, %edx
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x8, %edx
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x4, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	movdqa	%xmm0, %xmm1
    00000074: 	psrldq	$0x2, %xmm1
    00000079: 	paddw	%xmm1, %xmm0
    0000007d: 	pextrw	$0x0, %xmm0, %r8d
    00000083: 	testb	$0x7, %al
    00000085: 	je	.Ltmp1766 # Offset: 133
.Ltmp1772:
    00000087: 	movslq	%edx, %rdi
    0000008a: 	leaq	(%rdi,%rdi), %rsi
    0000008e: 	addw	(%rcx,%rdi,2), %r8w
    00000093: 	leal	0x1(%rdx), %edi
    00000096: 	cmpl	%edi, %eax
    00000098: 	jle	.Ltmp1766 # Offset: 152
    0000009a: 	leal	0x2(%rdx), %edi
    0000009d: 	addw	0x2(%rcx,%rsi), %r8w
    000000a3: 	cmpl	%edi, %eax
    000000a5: 	jle	.Ltmp1766 # Offset: 165
    000000a7: 	leal	0x3(%rdx), %edi
    000000aa: 	addw	0x4(%rcx,%rsi), %r8w
    000000b0: 	cmpl	%edi, %eax
    000000b2: 	jle	.Ltmp1766 # Offset: 178
    000000b4: 	leal	0x4(%rdx), %edi
    000000b7: 	addw	0x6(%rcx,%rsi), %r8w
    000000bd: 	cmpl	%edi, %eax
    000000bf: 	jle	.Ltmp1766 # Offset: 191
    000000c1: 	leal	0x5(%rdx), %edi
    000000c4: 	addw	0x8(%rcx,%rsi), %r8w
    000000ca: 	cmpl	%edi, %eax
    000000cc: 	jle	.Ltmp1766 # Offset: 204
    000000ce: 	addl	$0x6, %edx
    000000d1: 	addw	0xa(%rcx,%rsi), %r8w
    000000d7: 	cmpl	%edx, %eax
    000000d9: 	jle	.Ltmp1766 # Offset: 217
    000000db: 	addw	0xc(%rcx,%rsi), %r8w
.Ltmp1766:
    000000e1: 	movl	%r8d, %eax
    000000e4: 	retq # Offset: 228
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp1767:
    000000e8: 	cmpl	$0x6, %edx
    000000eb: 	jbe	.Ltmp1770 # Offset: 235
    000000f1: 	shrl	$0x3, %esi
    000000f4: 	movdqa	DATAat0x38880(%rip), %xmm6
    000000fc: 	movq	%rdi, %rdx
    000000ff: 	pxor	%xmm3, %xmm3
    00000103: 	subl	$0x1, %esi
    00000106: 	movdqa	DATAat0x38890(%rip), %xmm5
    0000010e: 	shlq	$0x4, %rsi
    00000112: 	leaq	0x10(%rdi,%rsi), %rsi
    00000117: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1771:
    00000120: 	movdqu	(%rdx), %xmm1
    00000124: 	addq	$0x10, %rdx
    00000128: 	movdqa	%xmm1, %xmm0
    0000012c: 	movdqa	%xmm1, %xmm2
    00000130: 	movdqa	%xmm1, %xmm4
    00000134: 	pmulhw	%xmm6, %xmm0
    00000138: 	pmulhw	%xmm5, %xmm2
    0000013c: 	paddw	%xmm1, %xmm3
    00000140: 	psraw	$0xf, %xmm4
    00000145: 	paddw	%xmm1, %xmm0
    00000149: 	psraw	$0x1, %xmm2
    0000014e: 	psraw	$0x6, %xmm0
    00000153: 	psubw	%xmm4, %xmm2
    00000157: 	psubw	%xmm4, %xmm0
    0000015b: 	paddw	%xmm2, %xmm0
    0000015f: 	paddw	%xmm0, %xmm3
    00000163: 	cmpq	%rsi, %rdx
    00000166: 	jne	.Ltmp1771 # Offset: 358
    00000168: 	movdqa	%xmm3, %xmm0
    0000016c: 	movl	%eax, %edi
    0000016e: 	psrldq	$0x8, %xmm0
    00000173: 	andl	$-0x8, %edi
    00000176: 	paddw	%xmm0, %xmm3
    0000017a: 	movdqa	%xmm3, %xmm0
    0000017e: 	psrldq	$0x4, %xmm0
    00000183: 	paddw	%xmm0, %xmm3
    00000187: 	movdqa	%xmm3, %xmm0
    0000018b: 	psrldq	$0x2, %xmm0
    00000190: 	paddw	%xmm0, %xmm3
    00000194: 	pextrw	$0x0, %xmm3, %r8d
    0000019a: 	testb	$0x7, %al
    0000019c: 	je	.Ltmp1766 # Offset: 412
.Ltmp1773:
    000001a2: 	movslq	%edi, %rdx
    000001a5: 	movswl	(%rcx,%rdx,2), %esi
    000001a9: 	leaq	(%rdx,%rdx), %r10
    000001ad: 	imull	$0xffff8889, %esi, %edx
    000001b3: 	movl	%esi, %r9d
    000001b6: 	movl	%esi, %r11d
    000001b9: 	sarw	$0xf, %r11w
    000001be: 	addl	%r8d, %r9d
    000001c1: 	shrl	$0x10, %edx
    000001c4: 	addl	%esi, %edx
    000001c6: 	imull	$0x6667, %esi, %esi
    000001cc: 	sarw	$0x6, %dx
    000001d0: 	subl	%r11d, %edx
    000001d3: 	sarl	$0x11, %esi
    000001d6: 	movswl	%dx, %edx
    000001d9: 	subl	%r11d, %esi
    000001dc: 	movswl	%si, %esi
    000001df: 	addl	%esi, %edx
    000001e1: 	leal	(%r9,%rdx), %r8d
    000001e5: 	leal	0x1(%rdi), %edx
    000001e8: 	cmpl	%edx, %eax
    000001ea: 	jle	.Ltmp1766 # Offset: 490
    000001f0: 	movswl	0x2(%rcx,%r10), %esi
    000001f6: 	imull	$0xffff8889, %esi, %edx
    000001fc: 	movl	%esi, %r9d
    000001ff: 	movl	%esi, %r11d
    00000202: 	sarw	$0xf, %r11w
    00000207: 	shrl	$0x10, %edx
    0000020a: 	addl	%esi, %edx
    0000020c: 	imull	$0x6667, %esi, %esi
    00000212: 	sarw	$0x6, %dx
    00000216: 	subl	%r11d, %edx
    00000219: 	sarl	$0x11, %esi
    0000021c: 	addl	%r8d, %edx
    0000021f: 	subl	%r11d, %esi
    00000222: 	addl	%edx, %esi
    00000224: 	leal	0x2(%rdi), %edx
    00000227: 	leal	(%rsi,%r9), %r8d
    0000022b: 	cmpl	%edx, %eax
    0000022d: 	jle	.Ltmp1766 # Offset: 557
    00000233: 	movswl	0x4(%rcx,%r10), %edx
    00000239: 	imull	$0xffff8889, %edx, %esi
    0000023f: 	movl	%edx, %r9d
    00000242: 	movl	%edx, %r11d
    00000245: 	sarw	$0xf, %r11w
    0000024a: 	shrl	$0x10, %esi
    0000024d: 	addl	%edx, %esi
    0000024f: 	imull	$0x6667, %edx, %edx
    00000255: 	sarw	$0x6, %si
    00000259: 	subl	%r11d, %esi
    0000025c: 	sarl	$0x11, %edx
    0000025f: 	addl	%esi, %r9d
    00000262: 	subl	%r11d, %edx
    00000265: 	addl	%r9d, %edx
    00000268: 	addl	%edx, %r8d
    0000026b: 	leal	0x3(%rdi), %edx
    0000026e: 	cmpl	%edx, %eax
    00000270: 	jle	.Ltmp1766 # Offset: 624
    00000276: 	movswl	0x6(%rcx,%r10), %edx
    0000027c: 	imull	$0xffff8889, %edx, %esi
    00000282: 	movl	%edx, %r9d
    00000285: 	movl	%edx, %r11d
    00000288: 	sarw	$0xf, %r11w
    0000028d: 	shrl	$0x10, %esi
    00000290: 	addl	%edx, %esi
    00000292: 	imull	$0x6667, %edx, %edx
    00000298: 	sarw	$0x6, %si
    0000029c: 	subl	%r11d, %esi
    0000029f: 	sarl	$0x11, %edx
    000002a2: 	addl	%esi, %r9d
    000002a5: 	subl	%r11d, %edx
    000002a8: 	addl	%r9d, %edx
    000002ab: 	addl	%edx, %r8d
    000002ae: 	leal	0x4(%rdi), %edx
    000002b1: 	cmpl	%edx, %eax
    000002b3: 	jle	.Ltmp1766 # Offset: 691
    000002b9: 	movswl	0x8(%rcx,%r10), %edx
    000002bf: 	imull	$0xffff8889, %edx, %esi
    000002c5: 	movl	%edx, %r9d
    000002c8: 	movl	%edx, %r11d
    000002cb: 	sarw	$0xf, %r11w
    000002d0: 	shrl	$0x10, %esi
    000002d3: 	addl	%edx, %esi
    000002d5: 	imull	$0x6667, %edx, %edx
    000002db: 	sarw	$0x6, %si
    000002df: 	subl	%r11d, %esi
    000002e2: 	sarl	$0x11, %edx
    000002e5: 	addl	%esi, %r9d
    000002e8: 	subl	%r11d, %edx
    000002eb: 	addl	%r9d, %edx
    000002ee: 	addl	%edx, %r8d
    000002f1: 	leal	0x5(%rdi), %edx
    000002f4: 	cmpl	%edx, %eax
    000002f6: 	jle	.Ltmp1766 # Offset: 758
    000002fc: 	movswl	0xa(%rcx,%r10), %edx
    00000302: 	addl	$0x6, %edi
    00000305: 	imull	$0xffff8889, %edx, %esi
    0000030b: 	movl	%edx, %r9d
    0000030e: 	movl	%edx, %r11d
    00000311: 	sarw	$0xf, %r11w
    00000316: 	shrl	$0x10, %esi
    00000319: 	addl	%edx, %esi
    0000031b: 	imull	$0x6667, %edx, %edx
    00000321: 	sarw	$0x6, %si
    00000325: 	subl	%r11d, %esi
    00000328: 	sarl	$0x11, %edx
    0000032b: 	addl	%esi, %r9d
    0000032e: 	subl	%r11d, %edx
    00000331: 	addl	%r9d, %edx
    00000334: 	addl	%edx, %r8d
    00000337: 	cmpl	%edi, %eax
    00000339: 	jle	.Ltmp1766 # Offset: 825
    0000033f: 	movswl	0xc(%rcx,%r10), %eax
    00000345: 	imull	$0xffff8889, %eax, %edx
    0000034b: 	movl	%eax, %ecx
    0000034d: 	movl	%eax, %esi
    0000034f: 	sarw	$0xf, %si
    00000353: 	shrl	$0x10, %edx
    00000356: 	addl	%eax, %edx
    00000358: 	imull	$0x6667, %eax, %eax
    0000035e: 	sarw	$0x6, %dx
    00000362: 	subl	%esi, %edx
    00000364: 	sarl	$0x11, %eax
    00000367: 	addl	%edx, %ecx
    00000369: 	subl	%esi, %eax
    0000036b: 	addl	%ecx, %eax
    0000036d: 	addl	%eax, %r8d
    00000370: 	movl	%r8d, %eax
    00000373: 	retq # Offset: 883
.Ltmp1768:
    00000374: 	xorl	%edx, %edx
    00000376: 	jmp	.Ltmp1772 # Offset: 886
.Ltmp1770:
    0000037b: 	xorl	%edi, %edi
    0000037d: 	jmp	.Ltmp1773 # Offset: 893
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_goto_loop_paramIsET_PKS0_iS0_"

Binary Function "_Z19test_do_loop_param2IsET_PKS0_iS0_" after disassembly {
  Number      : 228
  State       : disassembled
  Address     : 0x16210
  Size        : 0x2c2
  MaxSize     : 0x2d0
  Offset      : 0x16210
  Section     : .text
  Orc Section : .local.text._Z19test_do_loop_param2IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0227:
    00000000: 	endbr64
    00000004: 	movl	%esi, %eax
    00000006: 	xorl	%r8d, %r8d
    00000009: 	testl	%esi, %esi
    0000000b: 	jle	.Ltmp1774 # Offset: 11
    00000011: 	testw	%dx, %dx
    00000014: 	leal	-0x1(%rsi), %edx
    00000017: 	js	.Ltmp1775 # Offset: 23
    0000001d: 	cmpl	$0x6, %edx
    00000020: 	jbe	.Ltmp1776 # Offset: 32
    00000026: 	movl	%esi, %ecx
    00000028: 	movq	%rdi, %rdx
    0000002b: 	pxor	%xmm0, %xmm0
    0000002f: 	shrl	$0x3, %ecx
    00000032: 	subl	$0x1, %ecx
    00000035: 	shlq	$0x4, %rcx
    00000039: 	leaq	0x10(%rdi,%rcx), %rcx
    0000003e: 	nop # Size: 2
.Ltmp1777:
    00000040: 	movdqu	(%rdx), %xmm5
    00000044: 	addq	$0x10, %rdx
    00000048: 	paddw	%xmm5, %xmm0
    0000004c: 	cmpq	%rcx, %rdx
    0000004f: 	jne	.Ltmp1777 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%eax, %edx
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x8, %edx
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x4, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	movdqa	%xmm0, %xmm1
    00000074: 	psrldq	$0x2, %xmm1
    00000079: 	paddw	%xmm1, %xmm0
    0000007d: 	pextrw	$0x0, %xmm0, %r8d
    00000083: 	testb	$0x7, %al
    00000085: 	je	.Ltmp1774 # Offset: 133
.Ltmp1780:
    00000087: 	movslq	%edx, %rsi
    0000008a: 	leaq	(%rsi,%rsi), %rcx
    0000008e: 	addw	(%rdi,%rsi,2), %r8w
    00000093: 	leal	0x1(%rdx), %esi
    00000096: 	cmpl	%esi, %eax
    00000098: 	jle	.Ltmp1774 # Offset: 152
    0000009a: 	leal	0x2(%rdx), %esi
    0000009d: 	addw	0x2(%rdi,%rcx), %r8w
    000000a3: 	cmpl	%esi, %eax
    000000a5: 	jle	.Ltmp1774 # Offset: 165
    000000a7: 	leal	0x3(%rdx), %esi
    000000aa: 	addw	0x4(%rdi,%rcx), %r8w
    000000b0: 	cmpl	%esi, %eax
    000000b2: 	jle	.Ltmp1774 # Offset: 178
    000000b4: 	leal	0x4(%rdx), %esi
    000000b7: 	addw	0x6(%rdi,%rcx), %r8w
    000000bd: 	cmpl	%esi, %eax
    000000bf: 	jle	.Ltmp1774 # Offset: 191
    000000c1: 	leal	0x5(%rdx), %esi
    000000c4: 	addw	0x8(%rdi,%rcx), %r8w
    000000ca: 	cmpl	%esi, %eax
    000000cc: 	jle	.Ltmp1774 # Offset: 204
    000000ce: 	addl	$0x6, %edx
    000000d1: 	addw	0xa(%rdi,%rcx), %r8w
    000000d7: 	cmpl	%edx, %eax
    000000d9: 	jle	.Ltmp1774 # Offset: 217
    000000db: 	addw	0xc(%rdi,%rcx), %r8w
.Ltmp1774:
    000000e1: 	movl	%r8d, %eax
    000000e4: 	retq # Offset: 228
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp1775:
    000000e8: 	cmpl	$0x6, %edx
    000000eb: 	jbe	.Ltmp1778 # Offset: 235
    000000f1: 	movl	%esi, %ecx
    000000f3: 	movdqa	DATAat0x38890(%rip), %xmm4
    000000fb: 	movq	%rdi, %rdx
    000000fe: 	pxor	%xmm1, %xmm1
    00000102: 	shrl	$0x3, %ecx
    00000105: 	subl	$0x1, %ecx
    00000108: 	shlq	$0x4, %rcx
    0000010c: 	leaq	0x10(%rdi,%rcx), %rcx
    00000111: 	nopl	(%rax) # Size: 7
.Ltmp1779:
    00000118: 	movdqu	(%rdx), %xmm2
    0000011c: 	addq	$0x10, %rdx
    00000120: 	movdqa	%xmm2, %xmm0
    00000124: 	movdqa	%xmm2, %xmm3
    00000128: 	paddw	%xmm2, %xmm1
    0000012c: 	pmulhw	%xmm4, %xmm0
    00000130: 	psraw	$0xf, %xmm3
    00000135: 	psraw	$0x1, %xmm0
    0000013a: 	psubw	%xmm3, %xmm0
    0000013e: 	paddw	%xmm0, %xmm1
    00000142: 	cmpq	%rdx, %rcx
    00000145: 	jne	.Ltmp1779 # Offset: 325
    00000147: 	movdqa	%xmm1, %xmm0
    0000014b: 	movl	%eax, %ecx
    0000014d: 	psrldq	$0x8, %xmm0
    00000152: 	andl	$-0x8, %ecx
    00000155: 	paddw	%xmm0, %xmm1
    00000159: 	movdqa	%xmm1, %xmm0
    0000015d: 	psrldq	$0x4, %xmm0
    00000162: 	paddw	%xmm0, %xmm1
    00000166: 	movdqa	%xmm1, %xmm0
    0000016a: 	psrldq	$0x2, %xmm0
    0000016f: 	paddw	%xmm0, %xmm1
    00000173: 	pextrw	$0x0, %xmm1, %r8d
    00000179: 	testb	$0x7, %al
    0000017b: 	je	.Ltmp1774 # Offset: 379
.Ltmp1781:
    00000181: 	movslq	%ecx, %rdx
    00000184: 	leaq	(%rdx,%rdx), %rsi
    00000188: 	movswl	(%rdi,%rdx,2), %edx
    0000018c: 	movl	%edx, %r9d
    0000018f: 	addl	%edx, %r8d
    00000192: 	imull	$0x6667, %edx, %edx
    00000198: 	sarw	$0xf, %r9w
    0000019d: 	sarl	$0x11, %edx
    000001a0: 	subl	%r9d, %edx
    000001a3: 	addl	%edx, %r8d
    000001a6: 	leal	0x1(%rcx), %edx
    000001a9: 	cmpl	%edx, %eax
    000001ab: 	jle	.Ltmp1774 # Offset: 427
    000001b1: 	movswl	0x2(%rdi,%rsi), %edx
    000001b6: 	movl	%edx, %r9d
    000001b9: 	imull	$0x6667, %edx, %edx
    000001bf: 	movl	%r9d, %r10d
    000001c2: 	sarw	$0xf, %r10w
    000001c7: 	sarl	$0x11, %edx
    000001ca: 	subl	%r10d, %edx
    000001cd: 	addl	%r8d, %edx
    000001d0: 	leal	(%rdx,%r9), %r8d
    000001d4: 	leal	0x2(%rcx), %edx
    000001d7: 	cmpl	%edx, %eax
    000001d9: 	jle	.Ltmp1774 # Offset: 473
    000001df: 	movswl	0x4(%rdi,%rsi), %edx
    000001e4: 	movl	%edx, %r9d
    000001e7: 	imull	$0x6667, %edx, %edx
    000001ed: 	movl	%r9d, %r10d
    000001f0: 	sarw	$0xf, %r10w
    000001f5: 	sarl	$0x11, %edx
    000001f8: 	subl	%r10d, %edx
    000001fb: 	addl	%r9d, %edx
    000001fe: 	addl	%edx, %r8d
    00000201: 	leal	0x3(%rcx), %edx
    00000204: 	cmpl	%edx, %eax
    00000206: 	jle	.Ltmp1774 # Offset: 518
    0000020c: 	movswl	0x6(%rdi,%rsi), %edx
    00000211: 	movl	%edx, %r9d
    00000214: 	imull	$0x6667, %edx, %edx
    0000021a: 	movl	%r9d, %r10d
    0000021d: 	sarw	$0xf, %r10w
    00000222: 	sarl	$0x11, %edx
    00000225: 	subl	%r10d, %edx
    00000228: 	addl	%r9d, %edx
    0000022b: 	addl	%edx, %r8d
    0000022e: 	leal	0x4(%rcx), %edx
    00000231: 	cmpl	%edx, %eax
    00000233: 	jle	.Ltmp1774 # Offset: 563
    00000239: 	movswl	0x8(%rdi,%rsi), %edx
    0000023e: 	movl	%edx, %r9d
    00000241: 	imull	$0x6667, %edx, %edx
    00000247: 	movl	%r9d, %r10d
    0000024a: 	sarw	$0xf, %r10w
    0000024f: 	sarl	$0x11, %edx
    00000252: 	subl	%r10d, %edx
    00000255: 	addl	%r9d, %edx
    00000258: 	addl	%edx, %r8d
    0000025b: 	leal	0x5(%rcx), %edx
    0000025e: 	cmpl	%edx, %eax
    00000260: 	jle	.Ltmp1774 # Offset: 608
    00000266: 	movswl	0xa(%rdi,%rsi), %edx
    0000026b: 	addl	$0x6, %ecx
    0000026e: 	movl	%edx, %r9d
    00000271: 	imull	$0x6667, %edx, %edx
    00000277: 	movl	%r9d, %r10d
    0000027a: 	sarw	$0xf, %r10w
    0000027f: 	sarl	$0x11, %edx
    00000282: 	subl	%r10d, %edx
    00000285: 	addl	%r9d, %edx
    00000288: 	addl	%edx, %r8d
    0000028b: 	cmpl	%ecx, %eax
    0000028d: 	jle	.Ltmp1774 # Offset: 653
    00000293: 	movswl	0xc(%rdi,%rsi), %eax
    00000298: 	movl	%eax, %edx
    0000029a: 	imull	$0x6667, %eax, %eax
    000002a0: 	movl	%edx, %ecx
    000002a2: 	sarw	$0xf, %cx
    000002a6: 	sarl	$0x11, %eax
    000002a9: 	subl	%ecx, %eax
    000002ab: 	addl	%edx, %eax
    000002ad: 	addl	%eax, %r8d
    000002b0: 	movl	%r8d, %eax
    000002b3: 	retq # Offset: 691
.Ltmp1776:
    000002b4: 	xorl	%edx, %edx
    000002b6: 	jmp	.Ltmp1780 # Offset: 694
.Ltmp1778:
    000002bb: 	xorl	%ecx, %ecx
    000002bd: 	jmp	.Ltmp1781 # Offset: 701
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_do_loop_param2IsET_PKS0_iS0_"

Binary Function "_Z18test_do_loop_paramIsET_PKS0_iS0_" after disassembly {
  Number      : 229
  State       : disassembled
  Address     : 0x164e0
  Size        : 0x382
  MaxSize     : 0x390
  Offset      : 0x164e0
  Section     : .text
  Orc Section : .local.text._Z18test_do_loop_paramIsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0228:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %eax
    00000009: 	xorl	%r8d, %r8d
    0000000c: 	testl	%esi, %esi
    0000000e: 	jle	.Ltmp1782 # Offset: 14
    00000014: 	testw	%dx, %dx
    00000017: 	leal	-0x1(%rsi), %edx
    0000001a: 	js	.Ltmp1783 # Offset: 26
    00000020: 	cmpl	$0x6, %edx
    00000023: 	jbe	.Ltmp1784 # Offset: 35
    00000029: 	shrl	$0x3, %esi
    0000002c: 	movq	%rdi, %rdx
    0000002f: 	pxor	%xmm0, %xmm0
    00000033: 	subl	$0x1, %esi
    00000036: 	shlq	$0x4, %rsi
    0000003a: 	leaq	0x10(%rdi,%rsi), %rsi
    0000003f: 	nop # Size: 1
.Ltmp1785:
    00000040: 	movdqu	(%rdx), %xmm7
    00000044: 	addq	$0x10, %rdx
    00000048: 	paddw	%xmm7, %xmm0
    0000004c: 	cmpq	%rsi, %rdx
    0000004f: 	jne	.Ltmp1785 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%eax, %edx
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x8, %edx
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x4, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	movdqa	%xmm0, %xmm1
    00000074: 	psrldq	$0x2, %xmm1
    00000079: 	paddw	%xmm1, %xmm0
    0000007d: 	pextrw	$0x0, %xmm0, %r8d
    00000083: 	testb	$0x7, %al
    00000085: 	je	.Ltmp1782 # Offset: 133
.Ltmp1788:
    00000087: 	movslq	%edx, %rdi
    0000008a: 	leaq	(%rdi,%rdi), %rsi
    0000008e: 	addw	(%rcx,%rdi,2), %r8w
    00000093: 	leal	0x1(%rdx), %edi
    00000096: 	cmpl	%edi, %eax
    00000098: 	jle	.Ltmp1782 # Offset: 152
    0000009a: 	leal	0x2(%rdx), %edi
    0000009d: 	addw	0x2(%rcx,%rsi), %r8w
    000000a3: 	cmpl	%edi, %eax
    000000a5: 	jle	.Ltmp1782 # Offset: 165
    000000a7: 	leal	0x3(%rdx), %edi
    000000aa: 	addw	0x4(%rcx,%rsi), %r8w
    000000b0: 	cmpl	%edi, %eax
    000000b2: 	jle	.Ltmp1782 # Offset: 178
    000000b4: 	leal	0x4(%rdx), %edi
    000000b7: 	addw	0x6(%rcx,%rsi), %r8w
    000000bd: 	cmpl	%edi, %eax
    000000bf: 	jle	.Ltmp1782 # Offset: 191
    000000c1: 	leal	0x5(%rdx), %edi
    000000c4: 	addw	0x8(%rcx,%rsi), %r8w
    000000ca: 	cmpl	%edi, %eax
    000000cc: 	jle	.Ltmp1782 # Offset: 204
    000000ce: 	addl	$0x6, %edx
    000000d1: 	addw	0xa(%rcx,%rsi), %r8w
    000000d7: 	cmpl	%edx, %eax
    000000d9: 	jle	.Ltmp1782 # Offset: 217
    000000db: 	addw	0xc(%rcx,%rsi), %r8w
.Ltmp1782:
    000000e1: 	movl	%r8d, %eax
    000000e4: 	retq # Offset: 228
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp1783:
    000000e8: 	cmpl	$0x6, %edx
    000000eb: 	jbe	.Ltmp1786 # Offset: 235
    000000f1: 	shrl	$0x3, %esi
    000000f4: 	movdqa	DATAat0x38880(%rip), %xmm6
    000000fc: 	movq	%rdi, %rdx
    000000ff: 	pxor	%xmm3, %xmm3
    00000103: 	subl	$0x1, %esi
    00000106: 	movdqa	DATAat0x38890(%rip), %xmm5
    0000010e: 	shlq	$0x4, %rsi
    00000112: 	leaq	0x10(%rdi,%rsi), %rsi
    00000117: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1787:
    00000120: 	movdqu	(%rdx), %xmm1
    00000124: 	addq	$0x10, %rdx
    00000128: 	movdqa	%xmm1, %xmm0
    0000012c: 	movdqa	%xmm1, %xmm2
    00000130: 	movdqa	%xmm1, %xmm4
    00000134: 	pmulhw	%xmm6, %xmm0
    00000138: 	pmulhw	%xmm5, %xmm2
    0000013c: 	paddw	%xmm1, %xmm3
    00000140: 	psraw	$0xf, %xmm4
    00000145: 	paddw	%xmm1, %xmm0
    00000149: 	psraw	$0x1, %xmm2
    0000014e: 	psraw	$0x6, %xmm0
    00000153: 	psubw	%xmm4, %xmm2
    00000157: 	psubw	%xmm4, %xmm0
    0000015b: 	paddw	%xmm2, %xmm0
    0000015f: 	paddw	%xmm0, %xmm3
    00000163: 	cmpq	%rsi, %rdx
    00000166: 	jne	.Ltmp1787 # Offset: 358
    00000168: 	movdqa	%xmm3, %xmm0
    0000016c: 	movl	%eax, %edi
    0000016e: 	psrldq	$0x8, %xmm0
    00000173: 	andl	$-0x8, %edi
    00000176: 	paddw	%xmm0, %xmm3
    0000017a: 	movdqa	%xmm3, %xmm0
    0000017e: 	psrldq	$0x4, %xmm0
    00000183: 	paddw	%xmm0, %xmm3
    00000187: 	movdqa	%xmm3, %xmm0
    0000018b: 	psrldq	$0x2, %xmm0
    00000190: 	paddw	%xmm0, %xmm3
    00000194: 	pextrw	$0x0, %xmm3, %r8d
    0000019a: 	testb	$0x7, %al
    0000019c: 	je	.Ltmp1782 # Offset: 412
.Ltmp1789:
    000001a2: 	movslq	%edi, %rdx
    000001a5: 	movswl	(%rcx,%rdx,2), %esi
    000001a9: 	leaq	(%rdx,%rdx), %r10
    000001ad: 	imull	$0xffff8889, %esi, %edx
    000001b3: 	movl	%esi, %r9d
    000001b6: 	movl	%esi, %r11d
    000001b9: 	sarw	$0xf, %r11w
    000001be: 	addl	%r8d, %r9d
    000001c1: 	shrl	$0x10, %edx
    000001c4: 	addl	%esi, %edx
    000001c6: 	imull	$0x6667, %esi, %esi
    000001cc: 	sarw	$0x6, %dx
    000001d0: 	subl	%r11d, %edx
    000001d3: 	sarl	$0x11, %esi
    000001d6: 	movswl	%dx, %edx
    000001d9: 	subl	%r11d, %esi
    000001dc: 	movswl	%si, %esi
    000001df: 	addl	%esi, %edx
    000001e1: 	leal	(%r9,%rdx), %r8d
    000001e5: 	leal	0x1(%rdi), %edx
    000001e8: 	cmpl	%edx, %eax
    000001ea: 	jle	.Ltmp1782 # Offset: 490
    000001f0: 	movswl	0x2(%rcx,%r10), %esi
    000001f6: 	imull	$0xffff8889, %esi, %edx
    000001fc: 	movl	%esi, %r9d
    000001ff: 	movl	%esi, %r11d
    00000202: 	sarw	$0xf, %r11w
    00000207: 	shrl	$0x10, %edx
    0000020a: 	addl	%esi, %edx
    0000020c: 	imull	$0x6667, %esi, %esi
    00000212: 	sarw	$0x6, %dx
    00000216: 	subl	%r11d, %edx
    00000219: 	sarl	$0x11, %esi
    0000021c: 	addl	%r8d, %edx
    0000021f: 	subl	%r11d, %esi
    00000222: 	addl	%edx, %esi
    00000224: 	leal	0x2(%rdi), %edx
    00000227: 	leal	(%rsi,%r9), %r8d
    0000022b: 	cmpl	%edx, %eax
    0000022d: 	jle	.Ltmp1782 # Offset: 557
    00000233: 	movswl	0x4(%rcx,%r10), %edx
    00000239: 	imull	$0xffff8889, %edx, %esi
    0000023f: 	movl	%edx, %r9d
    00000242: 	movl	%edx, %r11d
    00000245: 	sarw	$0xf, %r11w
    0000024a: 	shrl	$0x10, %esi
    0000024d: 	addl	%edx, %esi
    0000024f: 	imull	$0x6667, %edx, %edx
    00000255: 	sarw	$0x6, %si
    00000259: 	subl	%r11d, %esi
    0000025c: 	sarl	$0x11, %edx
    0000025f: 	addl	%esi, %r9d
    00000262: 	subl	%r11d, %edx
    00000265: 	addl	%r9d, %edx
    00000268: 	addl	%edx, %r8d
    0000026b: 	leal	0x3(%rdi), %edx
    0000026e: 	cmpl	%edx, %eax
    00000270: 	jle	.Ltmp1782 # Offset: 624
    00000276: 	movswl	0x6(%rcx,%r10), %edx
    0000027c: 	imull	$0xffff8889, %edx, %esi
    00000282: 	movl	%edx, %r9d
    00000285: 	movl	%edx, %r11d
    00000288: 	sarw	$0xf, %r11w
    0000028d: 	shrl	$0x10, %esi
    00000290: 	addl	%edx, %esi
    00000292: 	imull	$0x6667, %edx, %edx
    00000298: 	sarw	$0x6, %si
    0000029c: 	subl	%r11d, %esi
    0000029f: 	sarl	$0x11, %edx
    000002a2: 	addl	%esi, %r9d
    000002a5: 	subl	%r11d, %edx
    000002a8: 	addl	%r9d, %edx
    000002ab: 	addl	%edx, %r8d
    000002ae: 	leal	0x4(%rdi), %edx
    000002b1: 	cmpl	%edx, %eax
    000002b3: 	jle	.Ltmp1782 # Offset: 691
    000002b9: 	movswl	0x8(%rcx,%r10), %edx
    000002bf: 	imull	$0xffff8889, %edx, %esi
    000002c5: 	movl	%edx, %r9d
    000002c8: 	movl	%edx, %r11d
    000002cb: 	sarw	$0xf, %r11w
    000002d0: 	shrl	$0x10, %esi
    000002d3: 	addl	%edx, %esi
    000002d5: 	imull	$0x6667, %edx, %edx
    000002db: 	sarw	$0x6, %si
    000002df: 	subl	%r11d, %esi
    000002e2: 	sarl	$0x11, %edx
    000002e5: 	addl	%esi, %r9d
    000002e8: 	subl	%r11d, %edx
    000002eb: 	addl	%r9d, %edx
    000002ee: 	addl	%edx, %r8d
    000002f1: 	leal	0x5(%rdi), %edx
    000002f4: 	cmpl	%edx, %eax
    000002f6: 	jle	.Ltmp1782 # Offset: 758
    000002fc: 	movswl	0xa(%rcx,%r10), %edx
    00000302: 	addl	$0x6, %edi
    00000305: 	imull	$0xffff8889, %edx, %esi
    0000030b: 	movl	%edx, %r9d
    0000030e: 	movl	%edx, %r11d
    00000311: 	sarw	$0xf, %r11w
    00000316: 	shrl	$0x10, %esi
    00000319: 	addl	%edx, %esi
    0000031b: 	imull	$0x6667, %edx, %edx
    00000321: 	sarw	$0x6, %si
    00000325: 	subl	%r11d, %esi
    00000328: 	sarl	$0x11, %edx
    0000032b: 	addl	%esi, %r9d
    0000032e: 	subl	%r11d, %edx
    00000331: 	addl	%r9d, %edx
    00000334: 	addl	%edx, %r8d
    00000337: 	cmpl	%edi, %eax
    00000339: 	jle	.Ltmp1782 # Offset: 825
    0000033f: 	movswl	0xc(%rcx,%r10), %eax
    00000345: 	imull	$0xffff8889, %eax, %edx
    0000034b: 	movl	%eax, %ecx
    0000034d: 	movl	%eax, %esi
    0000034f: 	sarw	$0xf, %si
    00000353: 	shrl	$0x10, %edx
    00000356: 	addl	%eax, %edx
    00000358: 	imull	$0x6667, %eax, %eax
    0000035e: 	sarw	$0x6, %dx
    00000362: 	subl	%esi, %edx
    00000364: 	sarl	$0x11, %eax
    00000367: 	addl	%edx, %ecx
    00000369: 	subl	%esi, %eax
    0000036b: 	addl	%ecx, %eax
    0000036d: 	addl	%eax, %r8d
    00000370: 	movl	%r8d, %eax
    00000373: 	retq # Offset: 883
.Ltmp1784:
    00000374: 	xorl	%edx, %edx
    00000376: 	jmp	.Ltmp1788 # Offset: 886
.Ltmp1786:
    0000037b: 	xorl	%edi, %edi
    0000037d: 	jmp	.Ltmp1789 # Offset: 893
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_do_loop_paramIsET_PKS0_iS0_"

Binary Function "_Z23test_goto_loop2_global2IiET_PKS0_iS0_" after disassembly {
  Number      : 230
  State       : disassembled
  Address     : 0x16870
  Size        : 0xf5
  MaxSize     : 0x100
  Offset      : 0x16870
  Section     : .text
  Orc Section : .local.text._Z23test_goto_loop2_global2IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0229:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rdx
    00000007: 	movl	%esi, %ecx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp1790 # Offset: 13
    00000013: 	cvttsd2si	init_value(%rip), %esi
    0000001b: 	testl	%esi, %esi
    0000001d: 	js	.Ltmp1791 # Offset: 29
    00000023: 	leal	-0x1(%rcx), %esi
    00000026: 	cmpl	$0x2, %esi
    00000029: 	jbe	.Ltmp1792 # Offset: 41
    0000002f: 	movl	%ecx, %esi
    00000031: 	movq	%rdi, %rax
    00000034: 	pxor	%xmm0, %xmm0
    00000038: 	shrl	$0x2, %esi
    0000003b: 	subl	$0x1, %esi
    0000003e: 	shlq	$0x4, %rsi
    00000042: 	leaq	0x10(%rdi,%rsi), %rsi
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1793:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	paddd	%xmm2, %xmm0
    0000005c: 	cmpq	%rax, %rsi
    0000005f: 	jne	.Ltmp1793 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	movl	%ecx, %esi
    00000067: 	psrldq	$0x8, %xmm1
    0000006c: 	andl	$-0x4, %esi
    0000006f: 	paddd	%xmm1, %xmm0
    00000073: 	movdqa	%xmm0, %xmm1
    00000077: 	psrldq	$0x4, %xmm1
    0000007c: 	paddd	%xmm1, %xmm0
    00000080: 	movd	%xmm0, %eax
    00000084: 	testb	$0x3, %cl
    00000087: 	je	.Ltmp1794 # Offset: 135
.Ltmp1797:
    00000089: 	movslq	%esi, %rdi
    0000008c: 	leaq	(,%rdi,4), %r8
    00000094: 	addl	(%rdx,%rdi,4), %eax
    00000097: 	leal	0x1(%rsi), %edi
    0000009a: 	cmpl	%edi, %ecx
    0000009c: 	jle	.Ltmp1790 # Offset: 156
    0000009e: 	addl	$0x2, %esi
    000000a1: 	addl	0x4(%rdx,%r8), %eax
    000000a6: 	cmpl	%esi, %ecx
    000000a8: 	jle	.Ltmp1790 # Offset: 168
    000000aa: 	addl	0x8(%rdx,%r8), %eax
    000000af: 	retq # Offset: 175
.Ltmp1791:
    000000b0: 	subl	$0x1, %ecx
    000000b3: 	leaq	0x4(%rdi,%rcx,4), %rdi
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1796:
    000000c0: 	movl	(%rdx), %ecx
    000000c2: 	addl	%ecx, %eax
    000000c4: 	cmpl	$0x77, %ecx
    000000c7: 	jle	.Ltmp1795 # Offset: 199
    000000c9: 	movslq	%ecx, %rsi
    000000cc: 	sarl	$0x1f, %ecx
    000000cf: 	imulq	$0x66666667, %rsi, %rsi
    000000d6: 	sarq	$0x21, %rsi
    000000da: 	subl	%ecx, %esi
    000000dc: 	addl	%esi, %eax
.Ltmp1795:
    000000de: 	addq	$0x4, %rdx
    000000e2: 	cmpq	%rdi, %rdx
    000000e5: 	jne	.Ltmp1796 # Offset: 229
.Ltmp1790:
    000000e7: 	retq # Offset: 231
    000000e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1794:
    000000f0: 	retq # Offset: 240
.Ltmp1792:
    000000f1: 	xorl	%esi, %esi
    000000f3: 	jmp	.Ltmp1797 # Offset: 243
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_goto_loop2_global2IiET_PKS0_iS0_"

Binary Function "_Z22test_goto_loop2_globalIiET_PKS0_iS0_" after disassembly {
  Number      : 231
  State       : disassembled
  Address     : 0x16970
  Size        : 0x110
  MaxSize     : 0x110
  Offset      : 0x16970
  Section     : .text
  Orc Section : .local.text._Z22test_goto_loop2_globalIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0230:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rdx
    00000007: 	movl	%esi, %ecx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp1798 # Offset: 13
    00000013: 	cvttsd2si	init_value(%rip), %esi
    0000001b: 	testl	%esi, %esi
    0000001d: 	js	.Ltmp1799 # Offset: 29
    00000023: 	leal	-0x1(%rcx), %esi
    00000026: 	cmpl	$0x2, %esi
    00000029: 	jbe	.Ltmp1800 # Offset: 41
    0000002f: 	movl	%ecx, %esi
    00000031: 	movq	%rdi, %rax
    00000034: 	pxor	%xmm0, %xmm0
    00000038: 	shrl	$0x2, %esi
    0000003b: 	subl	$0x1, %esi
    0000003e: 	shlq	$0x4, %rsi
    00000042: 	leaq	0x10(%rdi,%rsi), %rsi
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1801:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	paddd	%xmm2, %xmm0
    0000005c: 	cmpq	%rax, %rsi
    0000005f: 	jne	.Ltmp1801 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	movl	%ecx, %esi
    00000067: 	psrldq	$0x8, %xmm1
    0000006c: 	andl	$-0x4, %esi
    0000006f: 	paddd	%xmm1, %xmm0
    00000073: 	movdqa	%xmm0, %xmm1
    00000077: 	psrldq	$0x4, %xmm1
    0000007c: 	paddd	%xmm1, %xmm0
    00000080: 	movd	%xmm0, %eax
    00000084: 	testb	$0x3, %cl
    00000087: 	je	.Ltmp1802 # Offset: 135
.Ltmp1805:
    00000089: 	movslq	%esi, %rdi
    0000008c: 	leaq	(,%rdi,4), %r8
    00000094: 	addl	(%rdx,%rdi,4), %eax
    00000097: 	leal	0x1(%rsi), %edi
    0000009a: 	cmpl	%ecx, %edi
    0000009c: 	jge	.Ltmp1798 # Offset: 156
    0000009e: 	addl	$0x2, %esi
    000000a1: 	addl	0x4(%rdx,%r8), %eax
    000000a6: 	cmpl	%esi, %ecx
    000000a8: 	jle	.Ltmp1798 # Offset: 168
    000000aa: 	addl	0x8(%rdx,%r8), %eax
    000000af: 	retq # Offset: 175
.Ltmp1799:
    000000b0: 	subl	$0x1, %ecx
    000000b3: 	leaq	0x4(%rdi,%rcx,4), %r8
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1804:
    000000c0: 	movl	(%rdx), %ecx
    000000c2: 	addl	%ecx, %eax
    000000c4: 	cmpl	$0x77, %ecx
    000000c7: 	jle	.Ltmp1803 # Offset: 199
    000000c9: 	movslq	%ecx, %rdi
    000000cc: 	movl	%ecx, %r9d
    000000cf: 	imulq	$0x66666667, %rdi, %rsi
    000000d6: 	sarl	$0x1f, %r9d
    000000da: 	imulq	$-0x77777777, %rdi, %rdi
    000000e1: 	sarq	$0x21, %rsi
    000000e5: 	shrq	$0x20, %rdi
    000000e9: 	subl	%r9d, %esi
    000000ec: 	addl	%edi, %ecx
    000000ee: 	sarl	$0x6, %ecx
    000000f1: 	subl	%r9d, %ecx
    000000f4: 	addl	%esi, %ecx
    000000f6: 	addl	%ecx, %eax
.Ltmp1803:
    000000f8: 	addq	$0x4, %rdx
    000000fc: 	cmpq	%r8, %rdx
    000000ff: 	jne	.Ltmp1804 # Offset: 255
.Ltmp1798:
    00000101: 	retq # Offset: 257
    00000102: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1802:
    00000108: 	retq # Offset: 264
.Ltmp1800:
    00000109: 	xorl	%esi, %esi
    0000010b: 	jmp	.Ltmp1805 # Offset: 267
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_goto_loop2_globalIiET_PKS0_iS0_"

Binary Function "_Z21test_do_loop2_global2IiET_PKS0_iS0_" after disassembly {
  Number      : 232
  State       : disassembled
  Address     : 0x16a80
  Size        : 0xf5
  MaxSize     : 0x100
  Offset      : 0x16a80
  Section     : .text
  Orc Section : .local.text._Z21test_do_loop2_global2IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0231:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rdx
    00000007: 	movl	%esi, %ecx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp1806 # Offset: 13
    00000013: 	cvttsd2si	init_value(%rip), %esi
    0000001b: 	testl	%esi, %esi
    0000001d: 	js	.Ltmp1807 # Offset: 29
    00000023: 	leal	-0x1(%rcx), %esi
    00000026: 	cmpl	$0x2, %esi
    00000029: 	jbe	.Ltmp1808 # Offset: 41
    0000002f: 	movl	%ecx, %esi
    00000031: 	movq	%rdi, %rax
    00000034: 	pxor	%xmm0, %xmm0
    00000038: 	shrl	$0x2, %esi
    0000003b: 	subl	$0x1, %esi
    0000003e: 	shlq	$0x4, %rsi
    00000042: 	leaq	0x10(%rdi,%rsi), %rsi
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1809:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	paddd	%xmm2, %xmm0
    0000005c: 	cmpq	%rax, %rsi
    0000005f: 	jne	.Ltmp1809 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	movl	%ecx, %esi
    00000067: 	psrldq	$0x8, %xmm1
    0000006c: 	andl	$-0x4, %esi
    0000006f: 	paddd	%xmm1, %xmm0
    00000073: 	movdqa	%xmm0, %xmm1
    00000077: 	psrldq	$0x4, %xmm1
    0000007c: 	paddd	%xmm1, %xmm0
    00000080: 	movd	%xmm0, %eax
    00000084: 	testb	$0x3, %cl
    00000087: 	je	.Ltmp1810 # Offset: 135
.Ltmp1813:
    00000089: 	movslq	%esi, %rdi
    0000008c: 	leaq	(,%rdi,4), %r8
    00000094: 	addl	(%rdx,%rdi,4), %eax
    00000097: 	leal	0x1(%rsi), %edi
    0000009a: 	cmpl	%edi, %ecx
    0000009c: 	jle	.Ltmp1806 # Offset: 156
    0000009e: 	addl	$0x2, %esi
    000000a1: 	addl	0x4(%rdx,%r8), %eax
    000000a6: 	cmpl	%esi, %ecx
    000000a8: 	jle	.Ltmp1806 # Offset: 168
    000000aa: 	addl	0x8(%rdx,%r8), %eax
    000000af: 	retq # Offset: 175
.Ltmp1807:
    000000b0: 	subl	$0x1, %ecx
    000000b3: 	leaq	0x4(%rdi,%rcx,4), %rdi
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1812:
    000000c0: 	movl	(%rdx), %ecx
    000000c2: 	addl	%ecx, %eax
    000000c4: 	cmpl	$0x77, %ecx
    000000c7: 	jle	.Ltmp1811 # Offset: 199
    000000c9: 	movslq	%ecx, %rsi
    000000cc: 	sarl	$0x1f, %ecx
    000000cf: 	imulq	$0x66666667, %rsi, %rsi
    000000d6: 	sarq	$0x21, %rsi
    000000da: 	subl	%ecx, %esi
    000000dc: 	addl	%esi, %eax
.Ltmp1811:
    000000de: 	addq	$0x4, %rdx
    000000e2: 	cmpq	%rdi, %rdx
    000000e5: 	jne	.Ltmp1812 # Offset: 229
.Ltmp1806:
    000000e7: 	retq # Offset: 231
    000000e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1810:
    000000f0: 	retq # Offset: 240
.Ltmp1808:
    000000f1: 	xorl	%esi, %esi
    000000f3: 	jmp	.Ltmp1813 # Offset: 243
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_do_loop2_global2IiET_PKS0_iS0_"

Binary Function "_Z20test_do_loop2_globalIiET_PKS0_iS0_" after disassembly {
  Number      : 233
  State       : disassembled
  Address     : 0x16b80
  Size        : 0x110
  MaxSize     : 0x110
  Offset      : 0x16b80
  Section     : .text
  Orc Section : .local.text._Z20test_do_loop2_globalIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0232:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rdx
    00000007: 	movl	%esi, %ecx
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp1814 # Offset: 13
    00000013: 	cvttsd2si	init_value(%rip), %esi
    0000001b: 	testl	%esi, %esi
    0000001d: 	js	.Ltmp1815 # Offset: 29
    00000023: 	leal	-0x1(%rcx), %esi
    00000026: 	cmpl	$0x2, %esi
    00000029: 	jbe	.Ltmp1816 # Offset: 41
    0000002f: 	movl	%ecx, %esi
    00000031: 	movq	%rdi, %rax
    00000034: 	pxor	%xmm0, %xmm0
    00000038: 	shrl	$0x2, %esi
    0000003b: 	subl	$0x1, %esi
    0000003e: 	shlq	$0x4, %rsi
    00000042: 	leaq	0x10(%rdi,%rsi), %rsi
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1817:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	paddd	%xmm2, %xmm0
    0000005c: 	cmpq	%rax, %rsi
    0000005f: 	jne	.Ltmp1817 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	movl	%ecx, %esi
    00000067: 	psrldq	$0x8, %xmm1
    0000006c: 	andl	$-0x4, %esi
    0000006f: 	paddd	%xmm1, %xmm0
    00000073: 	movdqa	%xmm0, %xmm1
    00000077: 	psrldq	$0x4, %xmm1
    0000007c: 	paddd	%xmm1, %xmm0
    00000080: 	movd	%xmm0, %eax
    00000084: 	testb	$0x3, %cl
    00000087: 	je	.Ltmp1818 # Offset: 135
.Ltmp1821:
    00000089: 	movslq	%esi, %rdi
    0000008c: 	leaq	(,%rdi,4), %r8
    00000094: 	addl	(%rdx,%rdi,4), %eax
    00000097: 	leal	0x1(%rsi), %edi
    0000009a: 	cmpl	%ecx, %edi
    0000009c: 	jge	.Ltmp1814 # Offset: 156
    0000009e: 	addl	$0x2, %esi
    000000a1: 	addl	0x4(%rdx,%r8), %eax
    000000a6: 	cmpl	%esi, %ecx
    000000a8: 	jle	.Ltmp1814 # Offset: 168
    000000aa: 	addl	0x8(%rdx,%r8), %eax
    000000af: 	retq # Offset: 175
.Ltmp1815:
    000000b0: 	subl	$0x1, %ecx
    000000b3: 	leaq	0x4(%rdi,%rcx,4), %r8
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1820:
    000000c0: 	movl	(%rdx), %ecx
    000000c2: 	addl	%ecx, %eax
    000000c4: 	cmpl	$0x77, %ecx
    000000c7: 	jle	.Ltmp1819 # Offset: 199
    000000c9: 	movslq	%ecx, %rdi
    000000cc: 	movl	%ecx, %r9d
    000000cf: 	imulq	$0x66666667, %rdi, %rsi
    000000d6: 	sarl	$0x1f, %r9d
    000000da: 	imulq	$-0x77777777, %rdi, %rdi
    000000e1: 	sarq	$0x21, %rsi
    000000e5: 	shrq	$0x20, %rdi
    000000e9: 	subl	%r9d, %esi
    000000ec: 	addl	%edi, %ecx
    000000ee: 	sarl	$0x6, %ecx
    000000f1: 	subl	%r9d, %ecx
    000000f4: 	addl	%esi, %ecx
    000000f6: 	addl	%ecx, %eax
.Ltmp1819:
    000000f8: 	addq	$0x4, %rdx
    000000fc: 	cmpq	%r8, %rdx
    000000ff: 	jne	.Ltmp1820 # Offset: 255
.Ltmp1814:
    00000101: 	retq # Offset: 257
    00000102: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1818:
    00000108: 	retq # Offset: 264
.Ltmp1816:
    00000109: 	xorl	%esi, %esi
    0000010b: 	jmp	.Ltmp1821 # Offset: 267
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_do_loop2_globalIiET_PKS0_iS0_"

Binary Function "_Z22test_goto_loop2_param2IiET_PKS0_iS0_" after disassembly {
  Number      : 234
  State       : disassembled
  Address     : 0x16c90
  Size        : 0x51
  MaxSize     : 0x60
  Offset      : 0x16c90
  Section     : .text
  Orc Section : .local.text._Z22test_goto_loop2_param2IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0233:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	testl	%esi, %esi
    00000009: 	jle	.Ltmp1822 # Offset: 9
    0000000b: 	leal	-0x1(%rsi), %eax
    0000000e: 	shrl	$0x1f, %edx
    00000011: 	leaq	0x4(%rdi,%rax,4), %rsi
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1824:
    00000020: 	movl	(%rdi), %eax
    00000022: 	addl	%eax, %r8d
    00000025: 	cmpl	$0x77, %eax
    00000028: 	jle	.Ltmp1823 # Offset: 40
    0000002a: 	testb	%dl, %dl
    0000002c: 	je	.Ltmp1823 # Offset: 44
    0000002e: 	movslq	%eax, %rcx
    00000031: 	sarl	$0x1f, %eax
    00000034: 	imulq	$0x66666667, %rcx, %rcx
    0000003b: 	sarq	$0x21, %rcx
    0000003f: 	subl	%eax, %ecx
    00000041: 	addl	%ecx, %r8d
.Ltmp1823:
    00000044: 	addq	$0x4, %rdi
    00000048: 	cmpq	%rsi, %rdi
    0000004b: 	jne	.Ltmp1824 # Offset: 75
.Ltmp1822:
    0000004d: 	movl	%r8d, %eax
    00000050: 	retq # Offset: 80
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_goto_loop2_param2IiET_PKS0_iS0_"

Binary Function "_Z21test_goto_loop2_paramIiET_PKS0_iS0_" after disassembly {
  Number      : 235
  State       : disassembled
  Address     : 0x16cf0
  Size        : 0x6b
  MaxSize     : 0x70
  Offset      : 0x16cf0
  Section     : .text
  Orc Section : .local.text._Z21test_goto_loop2_paramIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0234:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	testl	%esi, %esi
    00000009: 	jle	.Ltmp1825 # Offset: 9
    0000000b: 	leal	-0x1(%rsi), %eax
    0000000e: 	shrl	$0x1f, %edx
    00000011: 	leaq	0x4(%rdi,%rax,4), %r9
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1827:
    00000020: 	movl	(%rdi), %eax
    00000022: 	addl	%eax, %r8d
    00000025: 	cmpl	$0x77, %eax
    00000028: 	jle	.Ltmp1826 # Offset: 40
    0000002a: 	testb	%dl, %dl
    0000002c: 	je	.Ltmp1826 # Offset: 44
    0000002e: 	movslq	%eax, %rsi
    00000031: 	movl	%eax, %r10d
    00000034: 	imulq	$0x66666667, %rsi, %rcx
    0000003b: 	sarl	$0x1f, %r10d
    0000003f: 	imulq	$-0x77777777, %rsi, %rsi
    00000046: 	sarq	$0x21, %rcx
    0000004a: 	shrq	$0x20, %rsi
    0000004e: 	subl	%r10d, %ecx
    00000051: 	addl	%esi, %eax
    00000053: 	sarl	$0x6, %eax
    00000056: 	subl	%r10d, %eax
    00000059: 	addl	%ecx, %eax
    0000005b: 	addl	%eax, %r8d
.Ltmp1826:
    0000005e: 	addq	$0x4, %rdi
    00000062: 	cmpq	%r9, %rdi
    00000065: 	jne	.Ltmp1827 # Offset: 101
.Ltmp1825:
    00000067: 	movl	%r8d, %eax
    0000006a: 	retq # Offset: 106
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_goto_loop2_paramIiET_PKS0_iS0_"

Binary Function "_Z20test_do_loop2_param2IiET_PKS0_iS0_" after disassembly {
  Number      : 236
  State       : disassembled
  Address     : 0x16d60
  Size        : 0x51
  MaxSize     : 0x60
  Offset      : 0x16d60
  Section     : .text
  Orc Section : .local.text._Z20test_do_loop2_param2IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0235:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	testl	%esi, %esi
    00000009: 	jle	.Ltmp1828 # Offset: 9
    0000000b: 	leal	-0x1(%rsi), %eax
    0000000e: 	shrl	$0x1f, %edx
    00000011: 	leaq	0x4(%rdi,%rax,4), %rsi
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1830:
    00000020: 	movl	(%rdi), %eax
    00000022: 	addl	%eax, %r8d
    00000025: 	cmpl	$0x77, %eax
    00000028: 	jle	.Ltmp1829 # Offset: 40
    0000002a: 	testb	%dl, %dl
    0000002c: 	je	.Ltmp1829 # Offset: 44
    0000002e: 	movslq	%eax, %rcx
    00000031: 	sarl	$0x1f, %eax
    00000034: 	imulq	$0x66666667, %rcx, %rcx
    0000003b: 	sarq	$0x21, %rcx
    0000003f: 	subl	%eax, %ecx
    00000041: 	addl	%ecx, %r8d
.Ltmp1829:
    00000044: 	addq	$0x4, %rdi
    00000048: 	cmpq	%rsi, %rdi
    0000004b: 	jne	.Ltmp1830 # Offset: 75
.Ltmp1828:
    0000004d: 	movl	%r8d, %eax
    00000050: 	retq # Offset: 80
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_do_loop2_param2IiET_PKS0_iS0_"

Binary Function "_Z19test_do_loop2_paramIiET_PKS0_iS0_" after disassembly {
  Number      : 237
  State       : disassembled
  Address     : 0x16dc0
  Size        : 0x6b
  MaxSize     : 0x70
  Offset      : 0x16dc0
  Section     : .text
  Orc Section : .local.text._Z19test_do_loop2_paramIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0236:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	testl	%esi, %esi
    00000009: 	jle	.Ltmp1831 # Offset: 9
    0000000b: 	leal	-0x1(%rsi), %eax
    0000000e: 	shrl	$0x1f, %edx
    00000011: 	leaq	0x4(%rdi,%rax,4), %r9
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1833:
    00000020: 	movl	(%rdi), %eax
    00000022: 	addl	%eax, %r8d
    00000025: 	cmpl	$0x77, %eax
    00000028: 	jle	.Ltmp1832 # Offset: 40
    0000002a: 	testb	%dl, %dl
    0000002c: 	je	.Ltmp1832 # Offset: 44
    0000002e: 	movslq	%eax, %rsi
    00000031: 	movl	%eax, %r10d
    00000034: 	imulq	$0x66666667, %rsi, %rcx
    0000003b: 	sarl	$0x1f, %r10d
    0000003f: 	imulq	$-0x77777777, %rsi, %rsi
    00000046: 	sarq	$0x21, %rcx
    0000004a: 	shrq	$0x20, %rsi
    0000004e: 	subl	%r10d, %ecx
    00000051: 	addl	%esi, %eax
    00000053: 	sarl	$0x6, %eax
    00000056: 	subl	%r10d, %eax
    00000059: 	addl	%ecx, %eax
    0000005b: 	addl	%eax, %r8d
.Ltmp1832:
    0000005e: 	addq	$0x4, %rdi
    00000062: 	cmpq	%r9, %rdi
    00000065: 	jne	.Ltmp1833 # Offset: 101
.Ltmp1831:
    00000067: 	movl	%r8d, %eax
    0000006a: 	retq # Offset: 106
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_do_loop2_paramIiET_PKS0_iS0_"

Binary Function "_Z22test_goto_loop_global2IiET_PKS0_iS0_" after disassembly {
  Number      : 238
  State       : disassembled
  Address     : 0x16e30
  Size        : 0x238
  MaxSize     : 0x240
  Offset      : 0x16e30
  Section     : .text
  Orc Section : .local.text._Z22test_goto_loop_global2IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0237:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	xorl	%eax, %eax
    00000008: 	testl	%esi, %esi
    0000000a: 	jle	.Ltmp1834 # Offset: 10
    00000010: 	cvttsd2si	init_value(%rip), %ecx
    00000018: 	testl	%ecx, %ecx
    0000001a: 	leal	-0x1(%rsi), %ecx
    0000001d: 	js	.Ltmp1835 # Offset: 29
    00000023: 	cmpl	$0x2, %ecx
    00000026: 	jbe	.Ltmp1836 # Offset: 38
    0000002c: 	movl	%esi, %ecx
    0000002e: 	movq	%rdi, %rax
    00000031: 	pxor	%xmm0, %xmm0
    00000035: 	shrl	$0x2, %ecx
    00000038: 	subl	$0x1, %ecx
    0000003b: 	shlq	$0x4, %rcx
    0000003f: 	leaq	0x10(%rdi,%rcx), %rcx
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp1837:
    00000048: 	movdqu	(%rax), %xmm6
    0000004c: 	addq	$0x10, %rax
    00000050: 	paddd	%xmm6, %xmm0
    00000054: 	cmpq	%rax, %rcx
    00000057: 	jne	.Ltmp1837 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	movl	%edx, %ecx
    0000005f: 	psrldq	$0x8, %xmm1
    00000064: 	andl	$-0x4, %ecx
    00000067: 	paddd	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	psrldq	$0x4, %xmm1
    00000074: 	paddd	%xmm1, %xmm0
    00000078: 	movd	%xmm0, %eax
    0000007c: 	testb	$0x3, %dl
    0000007f: 	je	.Ltmp1838 # Offset: 127
.Ltmp1842:
    00000085: 	movslq	%ecx, %rsi
    00000088: 	leaq	(,%rsi,4), %r8
    00000090: 	addl	(%rdi,%rsi,4), %eax
    00000093: 	leal	0x1(%rcx), %esi
    00000096: 	cmpl	%esi, %edx
    00000098: 	jle	.Ltmp1834 # Offset: 152
    0000009e: 	addl	$0x2, %ecx
    000000a1: 	addl	0x4(%rdi,%r8), %eax
    000000a6: 	cmpl	%ecx, %edx
    000000a8: 	jle	.Ltmp1834 # Offset: 168
    000000ae: 	addl	0x8(%rdi,%r8), %eax
    000000b3: 	retq # Offset: 179
    000000b4: 	nopl	(%rax) # Size: 4
.Ltmp1835:
    000000b8: 	cmpl	$0x2, %ecx
    000000bb: 	jbe	.Ltmp1839 # Offset: 187
    000000c1: 	pxor	%xmm1, %xmm1
    000000c5: 	movdqa	DATAat0x388e0(%rip), %xmm5
    000000cd: 	movl	%esi, %ecx
    000000cf: 	movq	%rdi, %rax
    000000d2: 	shrl	$0x2, %ecx
    000000d5: 	movdqa	%xmm1, %xmm6
    000000d9: 	movdqa	%xmm1, %xmm7
    000000dd: 	subl	$0x1, %ecx
    000000e0: 	pcmpgtd	%xmm5, %xmm6
    000000e4: 	shlq	$0x4, %rcx
    000000e8: 	leaq	0x10(%rdi,%rcx), %rcx
    000000ed: 	nopl	(%rax) # Size: 3
.Ltmp1840:
    000000f0: 	movdqu	(%rax), %xmm2
    000000f4: 	movdqa	%xmm7, %xmm3
    000000f8: 	movdqa	%xmm6, %xmm4
    000000fc: 	addq	$0x10, %rax
    00000100: 	movdqa	%xmm6, %xmm8
    00000105: 	movdqa	%xmm2, %xmm0
    00000109: 	punpckldq	%xmm2, %xmm0
    0000010d: 	pcmpgtd	%xmm0, %xmm3
    00000111: 	pmuludq	%xmm0, %xmm4
    00000115: 	pmuludq	%xmm5, %xmm0
    00000119: 	pmuludq	%xmm5, %xmm3
    0000011d: 	paddq	%xmm4, %xmm3
    00000121: 	movdqa	%xmm7, %xmm4
    00000125: 	psllq	$0x20, %xmm3
    0000012a: 	paddq	%xmm3, %xmm0
    0000012e: 	movdqa	%xmm2, %xmm3
    00000132: 	punpckhdq	%xmm2, %xmm3
    00000136: 	pcmpgtd	%xmm3, %xmm4
    0000013a: 	pmuludq	%xmm3, %xmm8
    0000013f: 	pmuludq	%xmm5, %xmm3
    00000143: 	pmuludq	%xmm5, %xmm4
    00000147: 	paddq	%xmm8, %xmm4
    0000014c: 	psllq	$0x20, %xmm4
    00000151: 	paddq	%xmm4, %xmm3
    00000155: 	shufps	$0xdd, %xmm3, %xmm0
    00000159: 	movdqa	%xmm2, %xmm3
    0000015d: 	psrad	$0x1, %xmm0
    00000162: 	paddd	%xmm1, %xmm2
    00000166: 	psrad	$0x1f, %xmm3
    0000016b: 	psubd	%xmm3, %xmm0
    0000016f: 	movdqa	%xmm0, %xmm1
    00000173: 	paddd	%xmm2, %xmm1
    00000177: 	cmpq	%rcx, %rax
    0000017a: 	jne	.Ltmp1840 # Offset: 378
    00000180: 	movdqa	%xmm1, %xmm0
    00000184: 	movl	%edx, %r8d
    00000187: 	psrldq	$0x8, %xmm0
    0000018c: 	andl	$-0x4, %r8d
    00000190: 	paddd	%xmm0, %xmm1
    00000194: 	movdqa	%xmm1, %xmm0
    00000198: 	psrldq	$0x4, %xmm0
    0000019d: 	paddd	%xmm0, %xmm1
    000001a1: 	movd	%xmm1, %eax
    000001a5: 	testb	$0x3, %dl
    000001a8: 	je	.Ltmp1841 # Offset: 424
.Ltmp1843:
    000001aa: 	movslq	%r8d, %rcx
    000001ad: 	leaq	(,%rcx,4), %r9
    000001b5: 	movslq	(%rdi,%rcx,4), %rcx
    000001b9: 	movq	%rcx, %rsi
    000001bc: 	addl	%ecx, %eax
    000001be: 	imulq	$0x66666667, %rcx, %rcx
    000001c5: 	sarl	$0x1f, %esi
    000001c8: 	sarq	$0x21, %rcx
    000001cc: 	subl	%esi, %ecx
    000001ce: 	addl	%ecx, %eax
    000001d0: 	leal	0x1(%r8), %ecx
    000001d4: 	cmpl	%ecx, %edx
    000001d6: 	jle	.Ltmp1834 # Offset: 470
    000001d8: 	movslq	0x4(%rdi,%r9), %rcx
    000001dd: 	addl	$0x2, %r8d
    000001e1: 	movq	%rcx, %rsi
    000001e4: 	addl	%ecx, %eax
    000001e6: 	imulq	$0x66666667, %rcx, %rcx
    000001ed: 	sarl	$0x1f, %esi
    000001f0: 	sarq	$0x21, %rcx
    000001f4: 	subl	%esi, %ecx
    000001f6: 	addl	%ecx, %eax
    000001f8: 	cmpl	%r8d, %edx
    000001fb: 	jle	.Ltmp1834 # Offset: 507
    000001fd: 	movslq	0x8(%rdi,%r9), %rdx
    00000202: 	movq	%rdx, %rcx
    00000205: 	addl	%edx, %eax
    00000207: 	imulq	$0x66666667, %rdx, %rdx
    0000020e: 	sarl	$0x1f, %ecx
    00000211: 	sarq	$0x21, %rdx
    00000215: 	subl	%ecx, %edx
    00000217: 	addl	%edx, %eax
.Ltmp1834:
    00000219: 	retq # Offset: 537
    0000021a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1841:
    00000220: 	retq # Offset: 544
    00000221: 	nopl	(%rax) # Size: 7
.Ltmp1838:
    00000228: 	retq # Offset: 552
.Ltmp1836:
    00000229: 	xorl	%ecx, %ecx
    0000022b: 	jmp	.Ltmp1842 # Offset: 555
.Ltmp1839:
    00000230: 	xorl	%r8d, %r8d
    00000233: 	jmp	.Ltmp1843 # Offset: 563
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_goto_loop_global2IiET_PKS0_iS0_"

Binary Function "_Z21test_goto_loop_globalIiET_PKS0_iS0_" after disassembly {
  Number      : 239
  State       : disassembled
  Address     : 0x17070
  Size        : 0x317
  MaxSize     : 0x320
  Offset      : 0x17070
  Section     : .text
  Orc Section : .local.text._Z21test_goto_loop_globalIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0238:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	xorl	%eax, %eax
    00000009: 	testl	%esi, %esi
    0000000b: 	jle	.Ltmp1844 # Offset: 11
    00000011: 	cvttsd2si	init_value(%rip), %edx
    00000019: 	testl	%edx, %edx
    0000001b: 	leal	-0x1(%rsi), %edx
    0000001e: 	js	.Ltmp1845 # Offset: 30
    00000024: 	cmpl	$0x2, %edx
    00000027: 	jbe	.Ltmp1846 # Offset: 39
    0000002d: 	movl	%esi, %edx
    0000002f: 	movq	%rdi, %rax
    00000032: 	pxor	%xmm0, %xmm0
    00000036: 	shrl	$0x2, %edx
    00000039: 	subl	$0x1, %edx
    0000003c: 	shlq	$0x4, %rdx
    00000040: 	leaq	0x10(%rdi,%rdx), %rdx
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp1847:
    00000048: 	movdqu	(%rax), %xmm7
    0000004c: 	addq	$0x10, %rax
    00000050: 	paddd	%xmm7, %xmm0
    00000054: 	cmpq	%rax, %rdx
    00000057: 	jne	.Ltmp1847 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	movl	%esi, %edx
    0000005f: 	psrldq	$0x8, %xmm1
    00000064: 	andl	$-0x4, %edx
    00000067: 	paddd	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	psrldq	$0x4, %xmm1
    00000074: 	paddd	%xmm1, %xmm0
    00000078: 	movd	%xmm0, %eax
    0000007c: 	testb	$0x3, %sil
    00000080: 	je	.Ltmp1848 # Offset: 128
.Ltmp1852:
    00000086: 	movslq	%edx, %rdi
    00000089: 	leaq	(,%rdi,4), %r8
    00000091: 	addl	(%rcx,%rdi,4), %eax
    00000094: 	leal	0x1(%rdx), %edi
    00000097: 	cmpl	%edi, %esi
    00000099: 	jle	.Ltmp1844 # Offset: 153
    0000009f: 	addl	$0x2, %edx
    000000a2: 	addl	0x4(%rcx,%r8), %eax
    000000a7: 	cmpl	%edx, %esi
    000000a9: 	jle	.Ltmp1844 # Offset: 169
    000000af: 	addl	0x8(%rcx,%r8), %eax
    000000b4: 	retq # Offset: 180
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp1845:
    000000b8: 	cmpl	$0x2, %edx
    000000bb: 	jbe	.Ltmp1849 # Offset: 187
    000000c1: 	pxor	%xmm1, %xmm1
    000000c5: 	movdqa	DATAat0x388d0(%rip), %xmm6
    000000cd: 	movl	%esi, %edx
    000000cf: 	movq	%rdi, %rax
    000000d2: 	movdqa	DATAat0x388e0(%rip), %xmm5
    000000da: 	shrl	$0x2, %edx
    000000dd: 	movdqa	%xmm1, %xmm8
    000000e2: 	movdqa	%xmm1, %xmm7
    000000e6: 	subl	$0x1, %edx
    000000e9: 	pcmpgtd	%xmm6, %xmm8
    000000ee: 	movdqa	%xmm1, %xmm9
    000000f3: 	pcmpgtd	%xmm5, %xmm7
    000000f7: 	shlq	$0x4, %rdx
    000000fb: 	leaq	0x10(%rdi,%rdx), %rdx
.Ltmp1850:
    00000100: 	movdqu	(%rax), %xmm3
    00000104: 	movdqa	%xmm9, %xmm12
    00000109: 	movdqa	%xmm8, %xmm11
    0000010e: 	movdqa	%xmm8, %xmm15
    00000113: 	addq	$0x10, %rax
    00000117: 	movdqa	%xmm3, %xmm0
    0000011b: 	movdqa	%xmm3, %xmm10
    00000120: 	punpckldq	%xmm3, %xmm0
    00000124: 	psrad	$0x1f, %xmm10
    0000012a: 	pcmpgtd	%xmm0, %xmm12
    0000012f: 	pmuludq	%xmm0, %xmm11
    00000134: 	movdqa	%xmm0, %xmm2
    00000138: 	pmuludq	%xmm6, %xmm2
    0000013c: 	movdqa	%xmm12, %xmm4
    00000141: 	pmuludq	%xmm5, %xmm12
    00000146: 	pmuludq	%xmm6, %xmm4
    0000014a: 	paddq	%xmm11, %xmm4
    0000014f: 	movdqa	%xmm9, %xmm11
    00000154: 	psllq	$0x20, %xmm4
    00000159: 	paddq	%xmm4, %xmm2
    0000015d: 	movdqa	%xmm3, %xmm4
    00000161: 	punpckhdq	%xmm3, %xmm4
    00000165: 	pcmpgtd	%xmm4, %xmm11
    0000016a: 	pmuludq	%xmm4, %xmm15
    0000016f: 	movdqa	%xmm4, %xmm14
    00000174: 	pmuludq	%xmm6, %xmm14
    00000179: 	movdqa	%xmm11, %xmm13
    0000017e: 	pmuludq	%xmm5, %xmm11
    00000183: 	pmuludq	%xmm6, %xmm13
    00000188: 	paddq	%xmm15, %xmm13
    0000018d: 	psllq	$0x20, %xmm13
    00000193: 	paddq	%xmm14, %xmm13
    00000198: 	shufps	$0xdd, %xmm13, %xmm2
    0000019d: 	movdqa	%xmm7, %xmm13
    000001a2: 	paddd	%xmm3, %xmm2
    000001a6: 	paddd	%xmm1, %xmm3
    000001aa: 	pmuludq	%xmm0, %xmm13
    000001af: 	pmuludq	%xmm5, %xmm0
    000001b3: 	psrad	$0x6, %xmm2
    000001b8: 	psubd	%xmm10, %xmm2
    000001bd: 	paddq	%xmm13, %xmm12
    000001c2: 	psllq	$0x20, %xmm12
    000001c8: 	paddq	%xmm12, %xmm0
    000001cd: 	movdqa	%xmm7, %xmm12
    000001d2: 	pmuludq	%xmm4, %xmm12
    000001d7: 	pmuludq	%xmm5, %xmm4
    000001db: 	paddq	%xmm12, %xmm11
    000001e0: 	psllq	$0x20, %xmm11
    000001e6: 	paddq	%xmm11, %xmm4
    000001eb: 	shufps	$0xdd, %xmm4, %xmm0
    000001ef: 	psrad	$0x1, %xmm0
    000001f4: 	psubd	%xmm10, %xmm0
    000001f9: 	paddd	%xmm0, %xmm2
    000001fd: 	movdqa	%xmm2, %xmm1
    00000201: 	paddd	%xmm3, %xmm1
    00000205: 	cmpq	%rdx, %rax
    00000208: 	jne	.Ltmp1850 # Offset: 520
    0000020e: 	movdqa	%xmm1, %xmm0
    00000212: 	movl	%esi, %edx
    00000214: 	psrldq	$0x8, %xmm0
    00000219: 	andl	$-0x4, %edx
    0000021c: 	paddd	%xmm0, %xmm1
    00000220: 	movdqa	%xmm1, %xmm0
    00000224: 	psrldq	$0x4, %xmm0
    00000229: 	paddd	%xmm0, %xmm1
    0000022d: 	movd	%xmm1, %eax
    00000231: 	testb	$0x3, %sil
    00000235: 	je	.Ltmp1851 # Offset: 565
.Ltmp1853:
    0000023b: 	movslq	%edx, %r8
    0000023e: 	leaq	(,%r8,4), %rdi
    00000246: 	movslq	(%rcx,%r8,4), %r8
    0000024a: 	leal	(%r8,%rax), %r9d
    0000024e: 	movq	%r8, %r10
    00000251: 	imulq	$-0x77777777, %r8, %rax
    00000258: 	sarl	$0x1f, %r10d
    0000025c: 	shrq	$0x20, %rax
    00000260: 	addl	%r8d, %eax
    00000263: 	imulq	$0x66666667, %r8, %r8
    0000026a: 	sarl	$0x6, %eax
    0000026d: 	subl	%r10d, %eax
    00000270: 	sarq	$0x21, %r8
    00000274: 	subl	%r10d, %r8d
    00000277: 	addl	%r8d, %eax
    0000027a: 	leal	0x1(%rdx), %r8d
    0000027e: 	addl	%r9d, %eax
    00000281: 	cmpl	%r8d, %esi
    00000284: 	jle	.Ltmp1844 # Offset: 644
    00000286: 	movslq	0x4(%rcx,%rdi), %r8
    0000028b: 	addl	$0x2, %edx
    0000028e: 	leal	(%r8,%rax), %r9d
    00000292: 	movq	%r8, %r10
    00000295: 	imulq	$-0x77777777, %r8, %rax
    0000029c: 	sarl	$0x1f, %r10d
    000002a0: 	shrq	$0x20, %rax
    000002a4: 	addl	%r8d, %eax
    000002a7: 	imulq	$0x66666667, %r8, %r8
    000002ae: 	sarl	$0x6, %eax
    000002b1: 	subl	%r10d, %eax
    000002b4: 	sarq	$0x21, %r8
    000002b8: 	subl	%r10d, %r8d
    000002bb: 	addl	%r8d, %eax
    000002be: 	addl	%r9d, %eax
    000002c1: 	cmpl	%edx, %esi
    000002c3: 	jle	.Ltmp1844 # Offset: 707
    000002c5: 	movslq	0x8(%rcx,%rdi), %rsi
    000002ca: 	imulq	$0x66666667, %rsi, %rcx
    000002d1: 	movq	%rsi, %rdx
    000002d4: 	addl	%esi, %eax
    000002d6: 	movl	%esi, %edi
    000002d8: 	imulq	$-0x77777777, %rsi, %rsi
    000002df: 	sarl	$0x1f, %edi
    000002e2: 	sarq	$0x21, %rcx
    000002e6: 	shrq	$0x20, %rsi
    000002ea: 	subl	%edi, %ecx
    000002ec: 	addl	%esi, %edx
    000002ee: 	sarl	$0x6, %edx
    000002f1: 	subl	%edi, %edx
    000002f3: 	addl	%ecx, %edx
    000002f5: 	addl	%edx, %eax
.Ltmp1844:
    000002f7: 	retq # Offset: 759
    000002f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1851:
    00000300: 	retq # Offset: 768
    00000301: 	nopl	(%rax) # Size: 7
.Ltmp1848:
    00000308: 	retq # Offset: 776
.Ltmp1846:
    00000309: 	xorl	%edx, %edx
    0000030b: 	jmp	.Ltmp1852 # Offset: 779
.Ltmp1849:
    00000310: 	xorl	%edx, %edx
    00000312: 	jmp	.Ltmp1853 # Offset: 786
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_goto_loop_globalIiET_PKS0_iS0_"

Binary Function "_Z20test_do_loop_global2IiET_PKS0_iS0_" after disassembly {
  Number      : 240
  State       : disassembled
  Address     : 0x17390
  Size        : 0x238
  MaxSize     : 0x240
  Offset      : 0x17390
  Section     : .text
  Orc Section : .local.text._Z20test_do_loop_global2IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0239:
    00000000: 	endbr64
    00000004: 	movl	%esi, %edx
    00000006: 	xorl	%eax, %eax
    00000008: 	testl	%esi, %esi
    0000000a: 	jle	.Ltmp1854 # Offset: 10
    00000010: 	cvttsd2si	init_value(%rip), %ecx
    00000018: 	testl	%ecx, %ecx
    0000001a: 	leal	-0x1(%rsi), %ecx
    0000001d: 	js	.Ltmp1855 # Offset: 29
    00000023: 	cmpl	$0x2, %ecx
    00000026: 	jbe	.Ltmp1856 # Offset: 38
    0000002c: 	movl	%esi, %ecx
    0000002e: 	movq	%rdi, %rax
    00000031: 	pxor	%xmm0, %xmm0
    00000035: 	shrl	$0x2, %ecx
    00000038: 	subl	$0x1, %ecx
    0000003b: 	shlq	$0x4, %rcx
    0000003f: 	leaq	0x10(%rdi,%rcx), %rcx
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp1857:
    00000048: 	movdqu	(%rax), %xmm6
    0000004c: 	addq	$0x10, %rax
    00000050: 	paddd	%xmm6, %xmm0
    00000054: 	cmpq	%rax, %rcx
    00000057: 	jne	.Ltmp1857 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	movl	%edx, %ecx
    0000005f: 	psrldq	$0x8, %xmm1
    00000064: 	andl	$-0x4, %ecx
    00000067: 	paddd	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	psrldq	$0x4, %xmm1
    00000074: 	paddd	%xmm1, %xmm0
    00000078: 	movd	%xmm0, %eax
    0000007c: 	testb	$0x3, %dl
    0000007f: 	je	.Ltmp1858 # Offset: 127
.Ltmp1862:
    00000085: 	movslq	%ecx, %rsi
    00000088: 	leaq	(,%rsi,4), %r8
    00000090: 	addl	(%rdi,%rsi,4), %eax
    00000093: 	leal	0x1(%rcx), %esi
    00000096: 	cmpl	%esi, %edx
    00000098: 	jle	.Ltmp1854 # Offset: 152
    0000009e: 	addl	$0x2, %ecx
    000000a1: 	addl	0x4(%rdi,%r8), %eax
    000000a6: 	cmpl	%ecx, %edx
    000000a8: 	jle	.Ltmp1854 # Offset: 168
    000000ae: 	addl	0x8(%rdi,%r8), %eax
    000000b3: 	retq # Offset: 179
    000000b4: 	nopl	(%rax) # Size: 4
.Ltmp1855:
    000000b8: 	cmpl	$0x2, %ecx
    000000bb: 	jbe	.Ltmp1859 # Offset: 187
    000000c1: 	pxor	%xmm1, %xmm1
    000000c5: 	movdqa	DATAat0x388e0(%rip), %xmm5
    000000cd: 	movl	%esi, %ecx
    000000cf: 	movq	%rdi, %rax
    000000d2: 	shrl	$0x2, %ecx
    000000d5: 	movdqa	%xmm1, %xmm6
    000000d9: 	movdqa	%xmm1, %xmm7
    000000dd: 	subl	$0x1, %ecx
    000000e0: 	pcmpgtd	%xmm5, %xmm6
    000000e4: 	shlq	$0x4, %rcx
    000000e8: 	leaq	0x10(%rdi,%rcx), %rcx
    000000ed: 	nopl	(%rax) # Size: 3
.Ltmp1860:
    000000f0: 	movdqu	(%rax), %xmm2
    000000f4: 	movdqa	%xmm7, %xmm3
    000000f8: 	movdqa	%xmm6, %xmm4
    000000fc: 	addq	$0x10, %rax
    00000100: 	movdqa	%xmm6, %xmm8
    00000105: 	movdqa	%xmm2, %xmm0
    00000109: 	punpckldq	%xmm2, %xmm0
    0000010d: 	pcmpgtd	%xmm0, %xmm3
    00000111: 	pmuludq	%xmm0, %xmm4
    00000115: 	pmuludq	%xmm5, %xmm0
    00000119: 	pmuludq	%xmm5, %xmm3
    0000011d: 	paddq	%xmm4, %xmm3
    00000121: 	movdqa	%xmm7, %xmm4
    00000125: 	psllq	$0x20, %xmm3
    0000012a: 	paddq	%xmm3, %xmm0
    0000012e: 	movdqa	%xmm2, %xmm3
    00000132: 	punpckhdq	%xmm2, %xmm3
    00000136: 	pcmpgtd	%xmm3, %xmm4
    0000013a: 	pmuludq	%xmm3, %xmm8
    0000013f: 	pmuludq	%xmm5, %xmm3
    00000143: 	pmuludq	%xmm5, %xmm4
    00000147: 	paddq	%xmm8, %xmm4
    0000014c: 	psllq	$0x20, %xmm4
    00000151: 	paddq	%xmm4, %xmm3
    00000155: 	shufps	$0xdd, %xmm3, %xmm0
    00000159: 	movdqa	%xmm2, %xmm3
    0000015d: 	psrad	$0x1, %xmm0
    00000162: 	paddd	%xmm1, %xmm2
    00000166: 	psrad	$0x1f, %xmm3
    0000016b: 	psubd	%xmm3, %xmm0
    0000016f: 	movdqa	%xmm0, %xmm1
    00000173: 	paddd	%xmm2, %xmm1
    00000177: 	cmpq	%rcx, %rax
    0000017a: 	jne	.Ltmp1860 # Offset: 378
    00000180: 	movdqa	%xmm1, %xmm0
    00000184: 	movl	%edx, %r8d
    00000187: 	psrldq	$0x8, %xmm0
    0000018c: 	andl	$-0x4, %r8d
    00000190: 	paddd	%xmm0, %xmm1
    00000194: 	movdqa	%xmm1, %xmm0
    00000198: 	psrldq	$0x4, %xmm0
    0000019d: 	paddd	%xmm0, %xmm1
    000001a1: 	movd	%xmm1, %eax
    000001a5: 	testb	$0x3, %dl
    000001a8: 	je	.Ltmp1861 # Offset: 424
.Ltmp1863:
    000001aa: 	movslq	%r8d, %rcx
    000001ad: 	leaq	(,%rcx,4), %r9
    000001b5: 	movslq	(%rdi,%rcx,4), %rcx
    000001b9: 	movq	%rcx, %rsi
    000001bc: 	addl	%ecx, %eax
    000001be: 	imulq	$0x66666667, %rcx, %rcx
    000001c5: 	sarl	$0x1f, %esi
    000001c8: 	sarq	$0x21, %rcx
    000001cc: 	subl	%esi, %ecx
    000001ce: 	addl	%ecx, %eax
    000001d0: 	leal	0x1(%r8), %ecx
    000001d4: 	cmpl	%ecx, %edx
    000001d6: 	jle	.Ltmp1854 # Offset: 470
    000001d8: 	movslq	0x4(%rdi,%r9), %rcx
    000001dd: 	addl	$0x2, %r8d
    000001e1: 	movq	%rcx, %rsi
    000001e4: 	addl	%ecx, %eax
    000001e6: 	imulq	$0x66666667, %rcx, %rcx
    000001ed: 	sarl	$0x1f, %esi
    000001f0: 	sarq	$0x21, %rcx
    000001f4: 	subl	%esi, %ecx
    000001f6: 	addl	%ecx, %eax
    000001f8: 	cmpl	%r8d, %edx
    000001fb: 	jle	.Ltmp1854 # Offset: 507
    000001fd: 	movslq	0x8(%rdi,%r9), %rdx
    00000202: 	movq	%rdx, %rcx
    00000205: 	addl	%edx, %eax
    00000207: 	imulq	$0x66666667, %rdx, %rdx
    0000020e: 	sarl	$0x1f, %ecx
    00000211: 	sarq	$0x21, %rdx
    00000215: 	subl	%ecx, %edx
    00000217: 	addl	%edx, %eax
.Ltmp1854:
    00000219: 	retq # Offset: 537
    0000021a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1861:
    00000220: 	retq # Offset: 544
    00000221: 	nopl	(%rax) # Size: 7
.Ltmp1858:
    00000228: 	retq # Offset: 552
.Ltmp1856:
    00000229: 	xorl	%ecx, %ecx
    0000022b: 	jmp	.Ltmp1862 # Offset: 555
.Ltmp1859:
    00000230: 	xorl	%r8d, %r8d
    00000233: 	jmp	.Ltmp1863 # Offset: 563
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_do_loop_global2IiET_PKS0_iS0_"

Binary Function "_Z19test_do_loop_globalIiET_PKS0_iS0_" after disassembly {
  Number      : 241
  State       : disassembled
  Address     : 0x175d0
  Size        : 0x317
  MaxSize     : 0x320
  Offset      : 0x175d0
  Section     : .text
  Orc Section : .local.text._Z19test_do_loop_globalIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0240:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	xorl	%eax, %eax
    00000009: 	testl	%esi, %esi
    0000000b: 	jle	.Ltmp1864 # Offset: 11
    00000011: 	cvttsd2si	init_value(%rip), %edx
    00000019: 	testl	%edx, %edx
    0000001b: 	leal	-0x1(%rsi), %edx
    0000001e: 	js	.Ltmp1865 # Offset: 30
    00000024: 	cmpl	$0x2, %edx
    00000027: 	jbe	.Ltmp1866 # Offset: 39
    0000002d: 	movl	%esi, %edx
    0000002f: 	movq	%rdi, %rax
    00000032: 	pxor	%xmm0, %xmm0
    00000036: 	shrl	$0x2, %edx
    00000039: 	subl	$0x1, %edx
    0000003c: 	shlq	$0x4, %rdx
    00000040: 	leaq	0x10(%rdi,%rdx), %rdx
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp1867:
    00000048: 	movdqu	(%rax), %xmm7
    0000004c: 	addq	$0x10, %rax
    00000050: 	paddd	%xmm7, %xmm0
    00000054: 	cmpq	%rax, %rdx
    00000057: 	jne	.Ltmp1867 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	movl	%esi, %edx
    0000005f: 	psrldq	$0x8, %xmm1
    00000064: 	andl	$-0x4, %edx
    00000067: 	paddd	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	psrldq	$0x4, %xmm1
    00000074: 	paddd	%xmm1, %xmm0
    00000078: 	movd	%xmm0, %eax
    0000007c: 	testb	$0x3, %sil
    00000080: 	je	.Ltmp1868 # Offset: 128
.Ltmp1872:
    00000086: 	movslq	%edx, %rdi
    00000089: 	leaq	(,%rdi,4), %r8
    00000091: 	addl	(%rcx,%rdi,4), %eax
    00000094: 	leal	0x1(%rdx), %edi
    00000097: 	cmpl	%edi, %esi
    00000099: 	jle	.Ltmp1864 # Offset: 153
    0000009f: 	addl	$0x2, %edx
    000000a2: 	addl	0x4(%rcx,%r8), %eax
    000000a7: 	cmpl	%edx, %esi
    000000a9: 	jle	.Ltmp1864 # Offset: 169
    000000af: 	addl	0x8(%rcx,%r8), %eax
    000000b4: 	retq # Offset: 180
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp1865:
    000000b8: 	cmpl	$0x2, %edx
    000000bb: 	jbe	.Ltmp1869 # Offset: 187
    000000c1: 	pxor	%xmm1, %xmm1
    000000c5: 	movdqa	DATAat0x388d0(%rip), %xmm6
    000000cd: 	movl	%esi, %edx
    000000cf: 	movq	%rdi, %rax
    000000d2: 	movdqa	DATAat0x388e0(%rip), %xmm5
    000000da: 	shrl	$0x2, %edx
    000000dd: 	movdqa	%xmm1, %xmm8
    000000e2: 	movdqa	%xmm1, %xmm7
    000000e6: 	subl	$0x1, %edx
    000000e9: 	pcmpgtd	%xmm6, %xmm8
    000000ee: 	movdqa	%xmm1, %xmm9
    000000f3: 	pcmpgtd	%xmm5, %xmm7
    000000f7: 	shlq	$0x4, %rdx
    000000fb: 	leaq	0x10(%rdi,%rdx), %rdx
.Ltmp1870:
    00000100: 	movdqu	(%rax), %xmm3
    00000104: 	movdqa	%xmm9, %xmm12
    00000109: 	movdqa	%xmm8, %xmm11
    0000010e: 	movdqa	%xmm8, %xmm15
    00000113: 	addq	$0x10, %rax
    00000117: 	movdqa	%xmm3, %xmm0
    0000011b: 	movdqa	%xmm3, %xmm10
    00000120: 	punpckldq	%xmm3, %xmm0
    00000124: 	psrad	$0x1f, %xmm10
    0000012a: 	pcmpgtd	%xmm0, %xmm12
    0000012f: 	pmuludq	%xmm0, %xmm11
    00000134: 	movdqa	%xmm0, %xmm2
    00000138: 	pmuludq	%xmm6, %xmm2
    0000013c: 	movdqa	%xmm12, %xmm4
    00000141: 	pmuludq	%xmm5, %xmm12
    00000146: 	pmuludq	%xmm6, %xmm4
    0000014a: 	paddq	%xmm11, %xmm4
    0000014f: 	movdqa	%xmm9, %xmm11
    00000154: 	psllq	$0x20, %xmm4
    00000159: 	paddq	%xmm4, %xmm2
    0000015d: 	movdqa	%xmm3, %xmm4
    00000161: 	punpckhdq	%xmm3, %xmm4
    00000165: 	pcmpgtd	%xmm4, %xmm11
    0000016a: 	pmuludq	%xmm4, %xmm15
    0000016f: 	movdqa	%xmm4, %xmm14
    00000174: 	pmuludq	%xmm6, %xmm14
    00000179: 	movdqa	%xmm11, %xmm13
    0000017e: 	pmuludq	%xmm5, %xmm11
    00000183: 	pmuludq	%xmm6, %xmm13
    00000188: 	paddq	%xmm15, %xmm13
    0000018d: 	psllq	$0x20, %xmm13
    00000193: 	paddq	%xmm14, %xmm13
    00000198: 	shufps	$0xdd, %xmm13, %xmm2
    0000019d: 	movdqa	%xmm7, %xmm13
    000001a2: 	paddd	%xmm3, %xmm2
    000001a6: 	paddd	%xmm1, %xmm3
    000001aa: 	pmuludq	%xmm0, %xmm13
    000001af: 	pmuludq	%xmm5, %xmm0
    000001b3: 	psrad	$0x6, %xmm2
    000001b8: 	psubd	%xmm10, %xmm2
    000001bd: 	paddq	%xmm13, %xmm12
    000001c2: 	psllq	$0x20, %xmm12
    000001c8: 	paddq	%xmm12, %xmm0
    000001cd: 	movdqa	%xmm7, %xmm12
    000001d2: 	pmuludq	%xmm4, %xmm12
    000001d7: 	pmuludq	%xmm5, %xmm4
    000001db: 	paddq	%xmm12, %xmm11
    000001e0: 	psllq	$0x20, %xmm11
    000001e6: 	paddq	%xmm11, %xmm4
    000001eb: 	shufps	$0xdd, %xmm4, %xmm0
    000001ef: 	psrad	$0x1, %xmm0
    000001f4: 	psubd	%xmm10, %xmm0
    000001f9: 	paddd	%xmm0, %xmm2
    000001fd: 	movdqa	%xmm2, %xmm1
    00000201: 	paddd	%xmm3, %xmm1
    00000205: 	cmpq	%rdx, %rax
    00000208: 	jne	.Ltmp1870 # Offset: 520
    0000020e: 	movdqa	%xmm1, %xmm0
    00000212: 	movl	%esi, %edx
    00000214: 	psrldq	$0x8, %xmm0
    00000219: 	andl	$-0x4, %edx
    0000021c: 	paddd	%xmm0, %xmm1
    00000220: 	movdqa	%xmm1, %xmm0
    00000224: 	psrldq	$0x4, %xmm0
    00000229: 	paddd	%xmm0, %xmm1
    0000022d: 	movd	%xmm1, %eax
    00000231: 	testb	$0x3, %sil
    00000235: 	je	.Ltmp1871 # Offset: 565
.Ltmp1873:
    0000023b: 	movslq	%edx, %r8
    0000023e: 	leaq	(,%r8,4), %rdi
    00000246: 	movslq	(%rcx,%r8,4), %r8
    0000024a: 	leal	(%r8,%rax), %r9d
    0000024e: 	movq	%r8, %r10
    00000251: 	imulq	$-0x77777777, %r8, %rax
    00000258: 	sarl	$0x1f, %r10d
    0000025c: 	shrq	$0x20, %rax
    00000260: 	addl	%r8d, %eax
    00000263: 	imulq	$0x66666667, %r8, %r8
    0000026a: 	sarl	$0x6, %eax
    0000026d: 	subl	%r10d, %eax
    00000270: 	sarq	$0x21, %r8
    00000274: 	subl	%r10d, %r8d
    00000277: 	addl	%r8d, %eax
    0000027a: 	leal	0x1(%rdx), %r8d
    0000027e: 	addl	%r9d, %eax
    00000281: 	cmpl	%r8d, %esi
    00000284: 	jle	.Ltmp1864 # Offset: 644
    00000286: 	movslq	0x4(%rcx,%rdi), %r8
    0000028b: 	addl	$0x2, %edx
    0000028e: 	leal	(%r8,%rax), %r9d
    00000292: 	movq	%r8, %r10
    00000295: 	imulq	$-0x77777777, %r8, %rax
    0000029c: 	sarl	$0x1f, %r10d
    000002a0: 	shrq	$0x20, %rax
    000002a4: 	addl	%r8d, %eax
    000002a7: 	imulq	$0x66666667, %r8, %r8
    000002ae: 	sarl	$0x6, %eax
    000002b1: 	subl	%r10d, %eax
    000002b4: 	sarq	$0x21, %r8
    000002b8: 	subl	%r10d, %r8d
    000002bb: 	addl	%r8d, %eax
    000002be: 	addl	%r9d, %eax
    000002c1: 	cmpl	%edx, %esi
    000002c3: 	jle	.Ltmp1864 # Offset: 707
    000002c5: 	movslq	0x8(%rcx,%rdi), %rsi
    000002ca: 	imulq	$0x66666667, %rsi, %rcx
    000002d1: 	movq	%rsi, %rdx
    000002d4: 	addl	%esi, %eax
    000002d6: 	movl	%esi, %edi
    000002d8: 	imulq	$-0x77777777, %rsi, %rsi
    000002df: 	sarl	$0x1f, %edi
    000002e2: 	sarq	$0x21, %rcx
    000002e6: 	shrq	$0x20, %rsi
    000002ea: 	subl	%edi, %ecx
    000002ec: 	addl	%esi, %edx
    000002ee: 	sarl	$0x6, %edx
    000002f1: 	subl	%edi, %edx
    000002f3: 	addl	%ecx, %edx
    000002f5: 	addl	%edx, %eax
.Ltmp1864:
    000002f7: 	retq # Offset: 759
    000002f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1871:
    00000300: 	retq # Offset: 768
    00000301: 	nopl	(%rax) # Size: 7
.Ltmp1868:
    00000308: 	retq # Offset: 776
.Ltmp1866:
    00000309: 	xorl	%edx, %edx
    0000030b: 	jmp	.Ltmp1872 # Offset: 779
.Ltmp1869:
    00000310: 	xorl	%edx, %edx
    00000312: 	jmp	.Ltmp1873 # Offset: 786
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_do_loop_globalIiET_PKS0_iS0_"

Binary Function "_Z21test_goto_loop_param2IiET_PKS0_iS0_" after disassembly {
  Number      : 242
  State       : disassembled
  Address     : 0x178f0
  Size        : 0x230
  MaxSize     : 0x230
  Offset      : 0x178f0
  Section     : .text
  Orc Section : .local.text._Z21test_goto_loop_param2IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0241:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	xorl	%eax, %eax
    00000008: 	testl	%esi, %esi
    0000000a: 	jle	.Ltmp1874 # Offset: 10
    00000010: 	testl	%edx, %edx
    00000012: 	leal	-0x1(%rsi), %edx
    00000015: 	js	.Ltmp1875 # Offset: 21
    0000001b: 	cmpl	$0x2, %edx
    0000001e: 	jbe	.Ltmp1876 # Offset: 30
    00000024: 	movl	%esi, %edx
    00000026: 	movq	%rdi, %rax
    00000029: 	pxor	%xmm0, %xmm0
    0000002d: 	shrl	$0x2, %edx
    00000030: 	subl	$0x1, %edx
    00000033: 	shlq	$0x4, %rdx
    00000037: 	leaq	0x10(%rdi,%rdx), %rdx
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp1877:
    00000040: 	movdqu	(%rax), %xmm6
    00000044: 	addq	$0x10, %rax
    00000048: 	paddd	%xmm6, %xmm0
    0000004c: 	cmpq	%rax, %rdx
    0000004f: 	jne	.Ltmp1877 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%ecx, %edx
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x4, %edx
    0000005f: 	paddd	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x4, %xmm1
    0000006c: 	paddd	%xmm1, %xmm0
    00000070: 	movd	%xmm0, %eax
    00000074: 	testb	$0x3, %cl
    00000077: 	je	.Ltmp1878 # Offset: 119
.Ltmp1882:
    0000007d: 	movslq	%edx, %rsi
    00000080: 	leaq	(,%rsi,4), %r8
    00000088: 	addl	(%rdi,%rsi,4), %eax
    0000008b: 	leal	0x1(%rdx), %esi
    0000008e: 	cmpl	%esi, %ecx
    00000090: 	jle	.Ltmp1874 # Offset: 144
    00000096: 	addl	$0x2, %edx
    00000099: 	addl	0x4(%rdi,%r8), %eax
    0000009e: 	cmpl	%ecx, %edx
    000000a0: 	jge	.Ltmp1874 # Offset: 160
    000000a6: 	addl	0x8(%rdi,%r8), %eax
    000000ab: 	retq # Offset: 171
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp1875:
    000000b0: 	cmpl	$0x2, %edx
    000000b3: 	jbe	.Ltmp1879 # Offset: 179
    000000b9: 	pxor	%xmm1, %xmm1
    000000bd: 	movdqa	DATAat0x388e0(%rip), %xmm5
    000000c5: 	movl	%esi, %edx
    000000c7: 	movq	%rdi, %rax
    000000ca: 	shrl	$0x2, %edx
    000000cd: 	movdqa	%xmm1, %xmm6
    000000d1: 	movdqa	%xmm1, %xmm7
    000000d5: 	subl	$0x1, %edx
    000000d8: 	pcmpgtd	%xmm5, %xmm6
    000000dc: 	shlq	$0x4, %rdx
    000000e0: 	leaq	0x10(%rdi,%rdx), %rdx
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp1880:
    000000e8: 	movdqu	(%rax), %xmm2
    000000ec: 	movdqa	%xmm7, %xmm3
    000000f0: 	movdqa	%xmm6, %xmm4
    000000f4: 	addq	$0x10, %rax
    000000f8: 	movdqa	%xmm6, %xmm8
    000000fd: 	movdqa	%xmm2, %xmm0
    00000101: 	punpckldq	%xmm2, %xmm0
    00000105: 	pcmpgtd	%xmm0, %xmm3
    00000109: 	pmuludq	%xmm0, %xmm4
    0000010d: 	pmuludq	%xmm5, %xmm0
    00000111: 	pmuludq	%xmm5, %xmm3
    00000115: 	paddq	%xmm4, %xmm3
    00000119: 	movdqa	%xmm7, %xmm4
    0000011d: 	psllq	$0x20, %xmm3
    00000122: 	paddq	%xmm3, %xmm0
    00000126: 	movdqa	%xmm2, %xmm3
    0000012a: 	punpckhdq	%xmm2, %xmm3
    0000012e: 	pcmpgtd	%xmm3, %xmm4
    00000132: 	pmuludq	%xmm3, %xmm8
    00000137: 	pmuludq	%xmm5, %xmm3
    0000013b: 	pmuludq	%xmm5, %xmm4
    0000013f: 	paddq	%xmm8, %xmm4
    00000144: 	psllq	$0x20, %xmm4
    00000149: 	paddq	%xmm4, %xmm3
    0000014d: 	shufps	$0xdd, %xmm3, %xmm0
    00000151: 	movdqa	%xmm2, %xmm3
    00000155: 	psrad	$0x1, %xmm0
    0000015a: 	paddd	%xmm1, %xmm2
    0000015e: 	psrad	$0x1f, %xmm3
    00000163: 	psubd	%xmm3, %xmm0
    00000167: 	movdqa	%xmm0, %xmm1
    0000016b: 	paddd	%xmm2, %xmm1
    0000016f: 	cmpq	%rdx, %rax
    00000172: 	jne	.Ltmp1880 # Offset: 370
    00000178: 	movdqa	%xmm1, %xmm0
    0000017c: 	movl	%ecx, %r8d
    0000017f: 	psrldq	$0x8, %xmm0
    00000184: 	andl	$-0x4, %r8d
    00000188: 	paddd	%xmm0, %xmm1
    0000018c: 	movdqa	%xmm1, %xmm0
    00000190: 	psrldq	$0x4, %xmm0
    00000195: 	paddd	%xmm0, %xmm1
    00000199: 	movd	%xmm1, %eax
    0000019d: 	testb	$0x3, %cl
    000001a0: 	je	.Ltmp1881 # Offset: 416
.Ltmp1883:
    000001a2: 	movslq	%r8d, %rdx
    000001a5: 	leaq	(,%rdx,4), %r9
    000001ad: 	movslq	(%rdi,%rdx,4), %rdx
    000001b1: 	movq	%rdx, %rsi
    000001b4: 	addl	%edx, %eax
    000001b6: 	imulq	$0x66666667, %rdx, %rdx
    000001bd: 	sarl	$0x1f, %esi
    000001c0: 	sarq	$0x21, %rdx
    000001c4: 	subl	%esi, %edx
    000001c6: 	addl	%edx, %eax
    000001c8: 	leal	0x1(%r8), %edx
    000001cc: 	cmpl	%edx, %ecx
    000001ce: 	jle	.Ltmp1874 # Offset: 462
    000001d0: 	movslq	0x4(%rdi,%r9), %rdx
    000001d5: 	addl	$0x2, %r8d
    000001d9: 	movq	%rdx, %rsi
    000001dc: 	addl	%edx, %eax
    000001de: 	imulq	$0x66666667, %rdx, %rdx
    000001e5: 	sarl	$0x1f, %esi
    000001e8: 	sarq	$0x21, %rdx
    000001ec: 	subl	%esi, %edx
    000001ee: 	addl	%edx, %eax
    000001f0: 	cmpl	%r8d, %ecx
    000001f3: 	jle	.Ltmp1874 # Offset: 499
    000001f5: 	movslq	0x8(%rdi,%r9), %rdx
    000001fa: 	movq	%rdx, %rcx
    000001fd: 	addl	%edx, %eax
    000001ff: 	imulq	$0x66666667, %rdx, %rdx
    00000206: 	sarl	$0x1f, %ecx
    00000209: 	sarq	$0x21, %rdx
    0000020d: 	subl	%ecx, %edx
    0000020f: 	addl	%edx, %eax
.Ltmp1874:
    00000211: 	retq # Offset: 529
    00000212: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1881:
    00000218: 	retq # Offset: 536
    00000219: 	nopl	(%rax) # Size: 7
.Ltmp1878:
    00000220: 	retq # Offset: 544
.Ltmp1876:
    00000221: 	xorl	%edx, %edx
    00000223: 	jmp	.Ltmp1882 # Offset: 547
.Ltmp1879:
    00000228: 	xorl	%r8d, %r8d
    0000022b: 	jmp	.Ltmp1883 # Offset: 555
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_goto_loop_param2IiET_PKS0_iS0_"

Binary Function "_Z20test_goto_loop_paramIiET_PKS0_iS0_" after disassembly {
  Number      : 243
  State       : disassembled
  Address     : 0x17b20
  Size        : 0x317
  MaxSize     : 0x320
  Offset      : 0x17b20
  Section     : .text
  Orc Section : .local.text._Z20test_goto_loop_paramIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0242:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	xorl	%eax, %eax
    00000008: 	testl	%esi, %esi
    0000000a: 	jle	.Ltmp1884 # Offset: 10
    00000010: 	testl	%edx, %edx
    00000012: 	leal	-0x1(%rsi), %edx
    00000015: 	js	.Ltmp1885 # Offset: 21
    0000001b: 	cmpl	$0x2, %edx
    0000001e: 	jbe	.Ltmp1886 # Offset: 30
    00000024: 	movl	%esi, %edx
    00000026: 	movq	%rdi, %rax
    00000029: 	pxor	%xmm0, %xmm0
    0000002d: 	shrl	$0x2, %edx
    00000030: 	subl	$0x1, %edx
    00000033: 	shlq	$0x4, %rdx
    00000037: 	leaq	0x10(%rdi,%rdx), %rdx
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp1887:
    00000040: 	movdqu	(%rax), %xmm7
    00000044: 	addq	$0x10, %rax
    00000048: 	paddd	%xmm7, %xmm0
    0000004c: 	cmpq	%rax, %rdx
    0000004f: 	jne	.Ltmp1887 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%ecx, %edx
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x4, %edx
    0000005f: 	paddd	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x4, %xmm1
    0000006c: 	paddd	%xmm1, %xmm0
    00000070: 	movd	%xmm0, %eax
    00000074: 	testb	$0x3, %cl
    00000077: 	je	.Ltmp1888 # Offset: 119
.Ltmp1892:
    0000007d: 	movslq	%edx, %rsi
    00000080: 	leaq	(,%rsi,4), %r8
    00000088: 	addl	(%rdi,%rsi,4), %eax
    0000008b: 	leal	0x1(%rdx), %esi
    0000008e: 	cmpl	%esi, %ecx
    00000090: 	jle	.Ltmp1884 # Offset: 144
    00000096: 	addl	$0x2, %edx
    00000099: 	addl	0x4(%rdi,%r8), %eax
    0000009e: 	cmpl	%ecx, %edx
    000000a0: 	jge	.Ltmp1884 # Offset: 160
    000000a6: 	addl	0x8(%rdi,%r8), %eax
    000000ab: 	retq # Offset: 171
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp1885:
    000000b0: 	cmpl	$0x2, %edx
    000000b3: 	jbe	.Ltmp1889 # Offset: 179
    000000b9: 	pxor	%xmm1, %xmm1
    000000bd: 	movdqa	DATAat0x388d0(%rip), %xmm6
    000000c5: 	movl	%esi, %edx
    000000c7: 	movq	%rdi, %rax
    000000ca: 	movdqa	DATAat0x388e0(%rip), %xmm5
    000000d2: 	shrl	$0x2, %edx
    000000d5: 	movdqa	%xmm1, %xmm8
    000000da: 	movdqa	%xmm1, %xmm7
    000000de: 	subl	$0x1, %edx
    000000e1: 	pcmpgtd	%xmm6, %xmm8
    000000e6: 	movdqa	%xmm1, %xmm9
    000000eb: 	pcmpgtd	%xmm5, %xmm7
    000000ef: 	shlq	$0x4, %rdx
    000000f3: 	leaq	0x10(%rdi,%rdx), %rdx
    000000f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1890:
    00000100: 	movdqu	(%rax), %xmm3
    00000104: 	movdqa	%xmm9, %xmm12
    00000109: 	movdqa	%xmm8, %xmm11
    0000010e: 	movdqa	%xmm8, %xmm15
    00000113: 	addq	$0x10, %rax
    00000117: 	movdqa	%xmm3, %xmm0
    0000011b: 	movdqa	%xmm3, %xmm10
    00000120: 	punpckldq	%xmm3, %xmm0
    00000124: 	psrad	$0x1f, %xmm10
    0000012a: 	pcmpgtd	%xmm0, %xmm12
    0000012f: 	pmuludq	%xmm0, %xmm11
    00000134: 	movdqa	%xmm0, %xmm2
    00000138: 	pmuludq	%xmm6, %xmm2
    0000013c: 	movdqa	%xmm12, %xmm4
    00000141: 	pmuludq	%xmm5, %xmm12
    00000146: 	pmuludq	%xmm6, %xmm4
    0000014a: 	paddq	%xmm11, %xmm4
    0000014f: 	movdqa	%xmm9, %xmm11
    00000154: 	psllq	$0x20, %xmm4
    00000159: 	paddq	%xmm4, %xmm2
    0000015d: 	movdqa	%xmm3, %xmm4
    00000161: 	punpckhdq	%xmm3, %xmm4
    00000165: 	pcmpgtd	%xmm4, %xmm11
    0000016a: 	pmuludq	%xmm4, %xmm15
    0000016f: 	movdqa	%xmm4, %xmm14
    00000174: 	pmuludq	%xmm6, %xmm14
    00000179: 	movdqa	%xmm11, %xmm13
    0000017e: 	pmuludq	%xmm5, %xmm11
    00000183: 	pmuludq	%xmm6, %xmm13
    00000188: 	paddq	%xmm15, %xmm13
    0000018d: 	psllq	$0x20, %xmm13
    00000193: 	paddq	%xmm14, %xmm13
    00000198: 	shufps	$0xdd, %xmm13, %xmm2
    0000019d: 	movdqa	%xmm7, %xmm13
    000001a2: 	paddd	%xmm3, %xmm2
    000001a6: 	paddd	%xmm1, %xmm3
    000001aa: 	pmuludq	%xmm0, %xmm13
    000001af: 	pmuludq	%xmm5, %xmm0
    000001b3: 	psrad	$0x6, %xmm2
    000001b8: 	psubd	%xmm10, %xmm2
    000001bd: 	paddq	%xmm13, %xmm12
    000001c2: 	psllq	$0x20, %xmm12
    000001c8: 	paddq	%xmm12, %xmm0
    000001cd: 	movdqa	%xmm7, %xmm12
    000001d2: 	pmuludq	%xmm4, %xmm12
    000001d7: 	pmuludq	%xmm5, %xmm4
    000001db: 	paddq	%xmm12, %xmm11
    000001e0: 	psllq	$0x20, %xmm11
    000001e6: 	paddq	%xmm11, %xmm4
    000001eb: 	shufps	$0xdd, %xmm4, %xmm0
    000001ef: 	psrad	$0x1, %xmm0
    000001f4: 	psubd	%xmm10, %xmm0
    000001f9: 	paddd	%xmm0, %xmm2
    000001fd: 	movdqa	%xmm2, %xmm1
    00000201: 	paddd	%xmm3, %xmm1
    00000205: 	cmpq	%rdx, %rax
    00000208: 	jne	.Ltmp1890 # Offset: 520
    0000020e: 	movdqa	%xmm1, %xmm0
    00000212: 	movl	%ecx, %edx
    00000214: 	psrldq	$0x8, %xmm0
    00000219: 	andl	$-0x4, %edx
    0000021c: 	paddd	%xmm0, %xmm1
    00000220: 	movdqa	%xmm1, %xmm0
    00000224: 	psrldq	$0x4, %xmm0
    00000229: 	paddd	%xmm0, %xmm1
    0000022d: 	movd	%xmm1, %eax
    00000231: 	testb	$0x3, %cl
    00000234: 	je	.Ltmp1891 # Offset: 564
.Ltmp1893:
    0000023a: 	movslq	%edx, %r8
    0000023d: 	leaq	(,%r8,4), %rsi
    00000245: 	movslq	(%rdi,%r8,4), %r8
    00000249: 	leal	(%r8,%rax), %r9d
    0000024d: 	movq	%r8, %r10
    00000250: 	imulq	$-0x77777777, %r8, %rax
    00000257: 	sarl	$0x1f, %r10d
    0000025b: 	shrq	$0x20, %rax
    0000025f: 	addl	%r8d, %eax
    00000262: 	imulq	$0x66666667, %r8, %r8
    00000269: 	sarl	$0x6, %eax
    0000026c: 	subl	%r10d, %eax
    0000026f: 	sarq	$0x21, %r8
    00000273: 	subl	%r10d, %r8d
    00000276: 	addl	%r8d, %eax
    00000279: 	leal	0x1(%rdx), %r8d
    0000027d: 	addl	%r9d, %eax
    00000280: 	cmpl	%r8d, %ecx
    00000283: 	jle	.Ltmp1884 # Offset: 643
    00000285: 	movslq	0x4(%rdi,%rsi), %r8
    0000028a: 	addl	$0x2, %edx
    0000028d: 	leal	(%r8,%rax), %r9d
    00000291: 	movq	%r8, %r10
    00000294: 	imulq	$-0x77777777, %r8, %rax
    0000029b: 	sarl	$0x1f, %r10d
    0000029f: 	shrq	$0x20, %rax
    000002a3: 	addl	%r8d, %eax
    000002a6: 	imulq	$0x66666667, %r8, %r8
    000002ad: 	sarl	$0x6, %eax
    000002b0: 	subl	%r10d, %eax
    000002b3: 	sarq	$0x21, %r8
    000002b7: 	subl	%r10d, %r8d
    000002ba: 	addl	%r8d, %eax
    000002bd: 	addl	%r9d, %eax
    000002c0: 	cmpl	%edx, %ecx
    000002c2: 	jle	.Ltmp1884 # Offset: 706
    000002c4: 	movslq	0x8(%rdi,%rsi), %rsi
    000002c9: 	imulq	$0x66666667, %rsi, %rcx
    000002d0: 	movq	%rsi, %rdx
    000002d3: 	addl	%esi, %eax
    000002d5: 	movl	%esi, %edi
    000002d7: 	imulq	$-0x77777777, %rsi, %rsi
    000002de: 	sarl	$0x1f, %edi
    000002e1: 	sarq	$0x21, %rcx
    000002e5: 	shrq	$0x20, %rsi
    000002e9: 	subl	%edi, %ecx
    000002eb: 	addl	%esi, %edx
    000002ed: 	sarl	$0x6, %edx
    000002f0: 	subl	%edi, %edx
    000002f2: 	addl	%ecx, %edx
    000002f4: 	addl	%edx, %eax
.Ltmp1884:
    000002f6: 	retq # Offset: 758
    000002f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1891:
    00000300: 	retq # Offset: 768
    00000301: 	nopl	(%rax) # Size: 7
.Ltmp1888:
    00000308: 	retq # Offset: 776
.Ltmp1886:
    00000309: 	xorl	%edx, %edx
    0000030b: 	jmp	.Ltmp1892 # Offset: 779
.Ltmp1889:
    00000310: 	xorl	%edx, %edx
    00000312: 	jmp	.Ltmp1893 # Offset: 786
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_goto_loop_paramIiET_PKS0_iS0_"

Binary Function "_Z19test_do_loop_param2IiET_PKS0_iS0_" after disassembly {
  Number      : 244
  State       : disassembled
  Address     : 0x17e40
  Size        : 0x230
  MaxSize     : 0x230
  Offset      : 0x17e40
  Section     : .text
  Orc Section : .local.text._Z19test_do_loop_param2IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0243:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	xorl	%eax, %eax
    00000008: 	testl	%esi, %esi
    0000000a: 	jle	.Ltmp1894 # Offset: 10
    00000010: 	testl	%edx, %edx
    00000012: 	leal	-0x1(%rsi), %edx
    00000015: 	js	.Ltmp1895 # Offset: 21
    0000001b: 	cmpl	$0x2, %edx
    0000001e: 	jbe	.Ltmp1896 # Offset: 30
    00000024: 	movl	%esi, %edx
    00000026: 	movq	%rdi, %rax
    00000029: 	pxor	%xmm0, %xmm0
    0000002d: 	shrl	$0x2, %edx
    00000030: 	subl	$0x1, %edx
    00000033: 	shlq	$0x4, %rdx
    00000037: 	leaq	0x10(%rdi,%rdx), %rdx
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp1897:
    00000040: 	movdqu	(%rax), %xmm6
    00000044: 	addq	$0x10, %rax
    00000048: 	paddd	%xmm6, %xmm0
    0000004c: 	cmpq	%rax, %rdx
    0000004f: 	jne	.Ltmp1897 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%ecx, %edx
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x4, %edx
    0000005f: 	paddd	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x4, %xmm1
    0000006c: 	paddd	%xmm1, %xmm0
    00000070: 	movd	%xmm0, %eax
    00000074: 	testb	$0x3, %cl
    00000077: 	je	.Ltmp1898 # Offset: 119
.Ltmp1902:
    0000007d: 	movslq	%edx, %rsi
    00000080: 	leaq	(,%rsi,4), %r8
    00000088: 	addl	(%rdi,%rsi,4), %eax
    0000008b: 	leal	0x1(%rdx), %esi
    0000008e: 	cmpl	%esi, %ecx
    00000090: 	jle	.Ltmp1894 # Offset: 144
    00000096: 	addl	$0x2, %edx
    00000099: 	addl	0x4(%rdi,%r8), %eax
    0000009e: 	cmpl	%ecx, %edx
    000000a0: 	jge	.Ltmp1894 # Offset: 160
    000000a6: 	addl	0x8(%rdi,%r8), %eax
    000000ab: 	retq # Offset: 171
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp1895:
    000000b0: 	cmpl	$0x2, %edx
    000000b3: 	jbe	.Ltmp1899 # Offset: 179
    000000b9: 	pxor	%xmm1, %xmm1
    000000bd: 	movdqa	DATAat0x388e0(%rip), %xmm5
    000000c5: 	movl	%esi, %edx
    000000c7: 	movq	%rdi, %rax
    000000ca: 	shrl	$0x2, %edx
    000000cd: 	movdqa	%xmm1, %xmm6
    000000d1: 	movdqa	%xmm1, %xmm7
    000000d5: 	subl	$0x1, %edx
    000000d8: 	pcmpgtd	%xmm5, %xmm6
    000000dc: 	shlq	$0x4, %rdx
    000000e0: 	leaq	0x10(%rdi,%rdx), %rdx
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp1900:
    000000e8: 	movdqu	(%rax), %xmm2
    000000ec: 	movdqa	%xmm7, %xmm3
    000000f0: 	movdqa	%xmm6, %xmm4
    000000f4: 	addq	$0x10, %rax
    000000f8: 	movdqa	%xmm6, %xmm8
    000000fd: 	movdqa	%xmm2, %xmm0
    00000101: 	punpckldq	%xmm2, %xmm0
    00000105: 	pcmpgtd	%xmm0, %xmm3
    00000109: 	pmuludq	%xmm0, %xmm4
    0000010d: 	pmuludq	%xmm5, %xmm0
    00000111: 	pmuludq	%xmm5, %xmm3
    00000115: 	paddq	%xmm4, %xmm3
    00000119: 	movdqa	%xmm7, %xmm4
    0000011d: 	psllq	$0x20, %xmm3
    00000122: 	paddq	%xmm3, %xmm0
    00000126: 	movdqa	%xmm2, %xmm3
    0000012a: 	punpckhdq	%xmm2, %xmm3
    0000012e: 	pcmpgtd	%xmm3, %xmm4
    00000132: 	pmuludq	%xmm3, %xmm8
    00000137: 	pmuludq	%xmm5, %xmm3
    0000013b: 	pmuludq	%xmm5, %xmm4
    0000013f: 	paddq	%xmm8, %xmm4
    00000144: 	psllq	$0x20, %xmm4
    00000149: 	paddq	%xmm4, %xmm3
    0000014d: 	shufps	$0xdd, %xmm3, %xmm0
    00000151: 	movdqa	%xmm2, %xmm3
    00000155: 	psrad	$0x1, %xmm0
    0000015a: 	paddd	%xmm1, %xmm2
    0000015e: 	psrad	$0x1f, %xmm3
    00000163: 	psubd	%xmm3, %xmm0
    00000167: 	movdqa	%xmm0, %xmm1
    0000016b: 	paddd	%xmm2, %xmm1
    0000016f: 	cmpq	%rdx, %rax
    00000172: 	jne	.Ltmp1900 # Offset: 370
    00000178: 	movdqa	%xmm1, %xmm0
    0000017c: 	movl	%ecx, %r8d
    0000017f: 	psrldq	$0x8, %xmm0
    00000184: 	andl	$-0x4, %r8d
    00000188: 	paddd	%xmm0, %xmm1
    0000018c: 	movdqa	%xmm1, %xmm0
    00000190: 	psrldq	$0x4, %xmm0
    00000195: 	paddd	%xmm0, %xmm1
    00000199: 	movd	%xmm1, %eax
    0000019d: 	testb	$0x3, %cl
    000001a0: 	je	.Ltmp1901 # Offset: 416
.Ltmp1903:
    000001a2: 	movslq	%r8d, %rdx
    000001a5: 	leaq	(,%rdx,4), %r9
    000001ad: 	movslq	(%rdi,%rdx,4), %rdx
    000001b1: 	movq	%rdx, %rsi
    000001b4: 	addl	%edx, %eax
    000001b6: 	imulq	$0x66666667, %rdx, %rdx
    000001bd: 	sarl	$0x1f, %esi
    000001c0: 	sarq	$0x21, %rdx
    000001c4: 	subl	%esi, %edx
    000001c6: 	addl	%edx, %eax
    000001c8: 	leal	0x1(%r8), %edx
    000001cc: 	cmpl	%edx, %ecx
    000001ce: 	jle	.Ltmp1894 # Offset: 462
    000001d0: 	movslq	0x4(%rdi,%r9), %rdx
    000001d5: 	addl	$0x2, %r8d
    000001d9: 	movq	%rdx, %rsi
    000001dc: 	addl	%edx, %eax
    000001de: 	imulq	$0x66666667, %rdx, %rdx
    000001e5: 	sarl	$0x1f, %esi
    000001e8: 	sarq	$0x21, %rdx
    000001ec: 	subl	%esi, %edx
    000001ee: 	addl	%edx, %eax
    000001f0: 	cmpl	%r8d, %ecx
    000001f3: 	jle	.Ltmp1894 # Offset: 499
    000001f5: 	movslq	0x8(%rdi,%r9), %rdx
    000001fa: 	movq	%rdx, %rcx
    000001fd: 	addl	%edx, %eax
    000001ff: 	imulq	$0x66666667, %rdx, %rdx
    00000206: 	sarl	$0x1f, %ecx
    00000209: 	sarq	$0x21, %rdx
    0000020d: 	subl	%ecx, %edx
    0000020f: 	addl	%edx, %eax
.Ltmp1894:
    00000211: 	retq # Offset: 529
    00000212: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1901:
    00000218: 	retq # Offset: 536
    00000219: 	nopl	(%rax) # Size: 7
.Ltmp1898:
    00000220: 	retq # Offset: 544
.Ltmp1896:
    00000221: 	xorl	%edx, %edx
    00000223: 	jmp	.Ltmp1902 # Offset: 547
.Ltmp1899:
    00000228: 	xorl	%r8d, %r8d
    0000022b: 	jmp	.Ltmp1903 # Offset: 555
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_do_loop_param2IiET_PKS0_iS0_"

Binary Function "_Z18test_do_loop_paramIiET_PKS0_iS0_" after disassembly {
  Number      : 245
  State       : disassembled
  Address     : 0x18070
  Size        : 0x317
  MaxSize     : 0x320
  Offset      : 0x18070
  Section     : .text
  Orc Section : .local.text._Z18test_do_loop_paramIiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0244:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	xorl	%eax, %eax
    00000008: 	testl	%esi, %esi
    0000000a: 	jle	.Ltmp1904 # Offset: 10
    00000010: 	testl	%edx, %edx
    00000012: 	leal	-0x1(%rsi), %edx
    00000015: 	js	.Ltmp1905 # Offset: 21
    0000001b: 	cmpl	$0x2, %edx
    0000001e: 	jbe	.Ltmp1906 # Offset: 30
    00000024: 	movl	%esi, %edx
    00000026: 	movq	%rdi, %rax
    00000029: 	pxor	%xmm0, %xmm0
    0000002d: 	shrl	$0x2, %edx
    00000030: 	subl	$0x1, %edx
    00000033: 	shlq	$0x4, %rdx
    00000037: 	leaq	0x10(%rdi,%rdx), %rdx
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp1907:
    00000040: 	movdqu	(%rax), %xmm7
    00000044: 	addq	$0x10, %rax
    00000048: 	paddd	%xmm7, %xmm0
    0000004c: 	cmpq	%rax, %rdx
    0000004f: 	jne	.Ltmp1907 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movl	%ecx, %edx
    00000057: 	psrldq	$0x8, %xmm1
    0000005c: 	andl	$-0x4, %edx
    0000005f: 	paddd	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x4, %xmm1
    0000006c: 	paddd	%xmm1, %xmm0
    00000070: 	movd	%xmm0, %eax
    00000074: 	testb	$0x3, %cl
    00000077: 	je	.Ltmp1908 # Offset: 119
.Ltmp1912:
    0000007d: 	movslq	%edx, %rsi
    00000080: 	leaq	(,%rsi,4), %r8
    00000088: 	addl	(%rdi,%rsi,4), %eax
    0000008b: 	leal	0x1(%rdx), %esi
    0000008e: 	cmpl	%esi, %ecx
    00000090: 	jle	.Ltmp1904 # Offset: 144
    00000096: 	addl	$0x2, %edx
    00000099: 	addl	0x4(%rdi,%r8), %eax
    0000009e: 	cmpl	%ecx, %edx
    000000a0: 	jge	.Ltmp1904 # Offset: 160
    000000a6: 	addl	0x8(%rdi,%r8), %eax
    000000ab: 	retq # Offset: 171
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp1905:
    000000b0: 	cmpl	$0x2, %edx
    000000b3: 	jbe	.Ltmp1909 # Offset: 179
    000000b9: 	pxor	%xmm1, %xmm1
    000000bd: 	movdqa	DATAat0x388d0(%rip), %xmm6
    000000c5: 	movl	%esi, %edx
    000000c7: 	movq	%rdi, %rax
    000000ca: 	movdqa	DATAat0x388e0(%rip), %xmm5
    000000d2: 	shrl	$0x2, %edx
    000000d5: 	movdqa	%xmm1, %xmm8
    000000da: 	movdqa	%xmm1, %xmm7
    000000de: 	subl	$0x1, %edx
    000000e1: 	pcmpgtd	%xmm6, %xmm8
    000000e6: 	movdqa	%xmm1, %xmm9
    000000eb: 	pcmpgtd	%xmm5, %xmm7
    000000ef: 	shlq	$0x4, %rdx
    000000f3: 	leaq	0x10(%rdi,%rdx), %rdx
    000000f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1910:
    00000100: 	movdqu	(%rax), %xmm3
    00000104: 	movdqa	%xmm9, %xmm12
    00000109: 	movdqa	%xmm8, %xmm11
    0000010e: 	movdqa	%xmm8, %xmm15
    00000113: 	addq	$0x10, %rax
    00000117: 	movdqa	%xmm3, %xmm0
    0000011b: 	movdqa	%xmm3, %xmm10
    00000120: 	punpckldq	%xmm3, %xmm0
    00000124: 	psrad	$0x1f, %xmm10
    0000012a: 	pcmpgtd	%xmm0, %xmm12
    0000012f: 	pmuludq	%xmm0, %xmm11
    00000134: 	movdqa	%xmm0, %xmm2
    00000138: 	pmuludq	%xmm6, %xmm2
    0000013c: 	movdqa	%xmm12, %xmm4
    00000141: 	pmuludq	%xmm5, %xmm12
    00000146: 	pmuludq	%xmm6, %xmm4
    0000014a: 	paddq	%xmm11, %xmm4
    0000014f: 	movdqa	%xmm9, %xmm11
    00000154: 	psllq	$0x20, %xmm4
    00000159: 	paddq	%xmm4, %xmm2
    0000015d: 	movdqa	%xmm3, %xmm4
    00000161: 	punpckhdq	%xmm3, %xmm4
    00000165: 	pcmpgtd	%xmm4, %xmm11
    0000016a: 	pmuludq	%xmm4, %xmm15
    0000016f: 	movdqa	%xmm4, %xmm14
    00000174: 	pmuludq	%xmm6, %xmm14
    00000179: 	movdqa	%xmm11, %xmm13
    0000017e: 	pmuludq	%xmm5, %xmm11
    00000183: 	pmuludq	%xmm6, %xmm13
    00000188: 	paddq	%xmm15, %xmm13
    0000018d: 	psllq	$0x20, %xmm13
    00000193: 	paddq	%xmm14, %xmm13
    00000198: 	shufps	$0xdd, %xmm13, %xmm2
    0000019d: 	movdqa	%xmm7, %xmm13
    000001a2: 	paddd	%xmm3, %xmm2
    000001a6: 	paddd	%xmm1, %xmm3
    000001aa: 	pmuludq	%xmm0, %xmm13
    000001af: 	pmuludq	%xmm5, %xmm0
    000001b3: 	psrad	$0x6, %xmm2
    000001b8: 	psubd	%xmm10, %xmm2
    000001bd: 	paddq	%xmm13, %xmm12
    000001c2: 	psllq	$0x20, %xmm12
    000001c8: 	paddq	%xmm12, %xmm0
    000001cd: 	movdqa	%xmm7, %xmm12
    000001d2: 	pmuludq	%xmm4, %xmm12
    000001d7: 	pmuludq	%xmm5, %xmm4
    000001db: 	paddq	%xmm12, %xmm11
    000001e0: 	psllq	$0x20, %xmm11
    000001e6: 	paddq	%xmm11, %xmm4
    000001eb: 	shufps	$0xdd, %xmm4, %xmm0
    000001ef: 	psrad	$0x1, %xmm0
    000001f4: 	psubd	%xmm10, %xmm0
    000001f9: 	paddd	%xmm0, %xmm2
    000001fd: 	movdqa	%xmm2, %xmm1
    00000201: 	paddd	%xmm3, %xmm1
    00000205: 	cmpq	%rdx, %rax
    00000208: 	jne	.Ltmp1910 # Offset: 520
    0000020e: 	movdqa	%xmm1, %xmm0
    00000212: 	movl	%ecx, %edx
    00000214: 	psrldq	$0x8, %xmm0
    00000219: 	andl	$-0x4, %edx
    0000021c: 	paddd	%xmm0, %xmm1
    00000220: 	movdqa	%xmm1, %xmm0
    00000224: 	psrldq	$0x4, %xmm0
    00000229: 	paddd	%xmm0, %xmm1
    0000022d: 	movd	%xmm1, %eax
    00000231: 	testb	$0x3, %cl
    00000234: 	je	.Ltmp1911 # Offset: 564
.Ltmp1913:
    0000023a: 	movslq	%edx, %r8
    0000023d: 	leaq	(,%r8,4), %rsi
    00000245: 	movslq	(%rdi,%r8,4), %r8
    00000249: 	leal	(%r8,%rax), %r9d
    0000024d: 	movq	%r8, %r10
    00000250: 	imulq	$-0x77777777, %r8, %rax
    00000257: 	sarl	$0x1f, %r10d
    0000025b: 	shrq	$0x20, %rax
    0000025f: 	addl	%r8d, %eax
    00000262: 	imulq	$0x66666667, %r8, %r8
    00000269: 	sarl	$0x6, %eax
    0000026c: 	subl	%r10d, %eax
    0000026f: 	sarq	$0x21, %r8
    00000273: 	subl	%r10d, %r8d
    00000276: 	addl	%r8d, %eax
    00000279: 	leal	0x1(%rdx), %r8d
    0000027d: 	addl	%r9d, %eax
    00000280: 	cmpl	%r8d, %ecx
    00000283: 	jle	.Ltmp1904 # Offset: 643
    00000285: 	movslq	0x4(%rdi,%rsi), %r8
    0000028a: 	addl	$0x2, %edx
    0000028d: 	leal	(%r8,%rax), %r9d
    00000291: 	movq	%r8, %r10
    00000294: 	imulq	$-0x77777777, %r8, %rax
    0000029b: 	sarl	$0x1f, %r10d
    0000029f: 	shrq	$0x20, %rax
    000002a3: 	addl	%r8d, %eax
    000002a6: 	imulq	$0x66666667, %r8, %r8
    000002ad: 	sarl	$0x6, %eax
    000002b0: 	subl	%r10d, %eax
    000002b3: 	sarq	$0x21, %r8
    000002b7: 	subl	%r10d, %r8d
    000002ba: 	addl	%r8d, %eax
    000002bd: 	addl	%r9d, %eax
    000002c0: 	cmpl	%edx, %ecx
    000002c2: 	jle	.Ltmp1904 # Offset: 706
    000002c4: 	movslq	0x8(%rdi,%rsi), %rsi
    000002c9: 	imulq	$0x66666667, %rsi, %rcx
    000002d0: 	movq	%rsi, %rdx
    000002d3: 	addl	%esi, %eax
    000002d5: 	movl	%esi, %edi
    000002d7: 	imulq	$-0x77777777, %rsi, %rsi
    000002de: 	sarl	$0x1f, %edi
    000002e1: 	sarq	$0x21, %rcx
    000002e5: 	shrq	$0x20, %rsi
    000002e9: 	subl	%edi, %ecx
    000002eb: 	addl	%esi, %edx
    000002ed: 	sarl	$0x6, %edx
    000002f0: 	subl	%edi, %edx
    000002f2: 	addl	%ecx, %edx
    000002f4: 	addl	%edx, %eax
.Ltmp1904:
    000002f6: 	retq # Offset: 758
    000002f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1911:
    00000300: 	retq # Offset: 768
    00000301: 	nopl	(%rax) # Size: 7
.Ltmp1908:
    00000308: 	retq # Offset: 776
.Ltmp1906:
    00000309: 	xorl	%edx, %edx
    0000030b: 	jmp	.Ltmp1912 # Offset: 779
.Ltmp1909:
    00000310: 	xorl	%edx, %edx
    00000312: 	jmp	.Ltmp1913 # Offset: 786
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_do_loop_paramIiET_PKS0_iS0_"

Binary Function "_Z23test_goto_loop2_global2IdET_PKS0_iS0_" after disassembly {
  Number      : 246
  State       : disassembled
  Address     : 0x18390
  Size        : 0xdd
  MaxSize     : 0xe0
  Offset      : 0x18390
  Section     : .text
  Orc Section : .local.text._Z23test_goto_loop2_global2IdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0245:
    00000000: 	endbr64
    00000004: 	pxor	%xmm0, %xmm0
    00000008: 	testl	%esi, %esi
    0000000a: 	jle	.Ltmp1914 # Offset: 10
    00000010: 	comisd	init_value(%rip), %xmm0
    00000018: 	movapd	%xmm0, %xmm4
    0000001c: 	ja	.Ltmp1915 # Offset: 28
    0000001e: 	cmpl	$0x1, %esi
    00000021: 	je	.Ltmp1916 # Offset: 33
    00000027: 	movl	%esi, %edx
    00000029: 	movq	%rdi, %rax
    0000002c: 	shrl	%edx
    0000002e: 	subl	$0x1, %edx
    00000031: 	shlq	$0x4, %rdx
    00000035: 	leaq	0x10(%rdi,%rdx), %rdx
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1917:
    00000040: 	movsd	(%rax), %xmm1
    00000044: 	addq	$0x10, %rax
    00000048: 	addsd	%xmm1, %xmm0
    0000004c: 	movsd	-0x8(%rax), %xmm1
    00000051: 	addsd	%xmm1, %xmm0
    00000055: 	cmpq	%rdx, %rax
    00000058: 	jne	.Ltmp1917 # Offset: 88
    0000005a: 	movl	%esi, %eax
    0000005c: 	andl	$-0x2, %eax
    0000005f: 	andl	$0x1, %esi
    00000062: 	je	.Ltmp1918 # Offset: 98
.Ltmp1921:
    00000064: 	cltq
    00000066: 	addsd	(%rdi,%rax,8), %xmm0
    0000006b: 	retq # Offset: 107
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp1915:
    00000070: 	leal	-0x1(%rsi), %eax
    00000073: 	movsd	DATAat0x38a20(%rip), %xmm7
    0000007b: 	movsd	DATAat0x38a28(%rip), %xmm6
    00000083: 	movsd	DATAat0x38a30(%rip), %xmm5
    0000008b: 	movsd	DATAat0x38910(%rip), %xmm3
    00000093: 	leaq	0x8(%rdi,%rax,8), %rax
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1920:
    000000a0: 	movsd	(%rdi), %xmm2
    000000a4: 	movapd	%xmm2, %xmm1
    000000a8: 	addsd	%xmm2, %xmm0
    000000ac: 	mulsd	%xmm7, %xmm1
    000000b0: 	divsd	%xmm6, %xmm1
    000000b4: 	mulsd	%xmm5, %xmm1
    000000b8: 	divsd	%xmm3, %xmm1
    000000bc: 	comisd	%xmm4, %xmm1
    000000c0: 	jbe	.Ltmp1919 # Offset: 192
    000000c2: 	divsd	%xmm3, %xmm2
    000000c6: 	addsd	%xmm2, %xmm0
.Ltmp1919:
    000000ca: 	addq	$0x8, %rdi
    000000ce: 	cmpq	%rax, %rdi
    000000d1: 	jne	.Ltmp1920 # Offset: 209
.Ltmp1914:
    000000d3: 	retq # Offset: 211
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp1918:
    000000d8: 	retq # Offset: 216
.Ltmp1916:
    000000d9: 	xorl	%eax, %eax
    000000db: 	jmp	.Ltmp1921 # Offset: 219
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_goto_loop2_global2IdET_PKS0_iS0_"

Binary Function "_Z22test_goto_loop2_globalIdET_PKS0_iS0_" after disassembly {
  Number      : 247
  State       : disassembled
  Address     : 0x18470
  Size        : 0xe8
  MaxSize     : 0xf0
  Offset      : 0x18470
  Section     : .text
  Orc Section : .local.text._Z22test_goto_loop2_globalIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0246:
    00000000: 	endbr64
    00000004: 	pxor	%xmm0, %xmm0
    00000008: 	testl	%esi, %esi
    0000000a: 	jle	.Ltmp1922 # Offset: 10
    00000010: 	comisd	init_value(%rip), %xmm0
    00000018: 	movapd	%xmm0, %xmm4
    0000001c: 	ja	.Ltmp1923 # Offset: 28
    0000001e: 	cmpl	$0x1, %esi
    00000021: 	je	.Ltmp1924 # Offset: 33
    00000027: 	movl	%esi, %edx
    00000029: 	movq	%rdi, %rax
    0000002c: 	shrl	%edx
    0000002e: 	subl	$0x1, %edx
    00000031: 	shlq	$0x4, %rdx
    00000035: 	leaq	0x10(%rdi,%rdx), %rdx
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1925:
    00000040: 	movsd	(%rax), %xmm1
    00000044: 	addq	$0x10, %rax
    00000048: 	addsd	%xmm1, %xmm0
    0000004c: 	movsd	-0x8(%rax), %xmm1
    00000051: 	addsd	%xmm1, %xmm0
    00000055: 	cmpq	%rdx, %rax
    00000058: 	jne	.Ltmp1925 # Offset: 88
    0000005a: 	movl	%esi, %eax
    0000005c: 	andl	$-0x2, %eax
    0000005f: 	andl	$0x1, %esi
    00000062: 	je	.Ltmp1926 # Offset: 98
.Ltmp1929:
    00000064: 	cltq
    00000066: 	addsd	(%rdi,%rax,8), %xmm0
    0000006b: 	retq # Offset: 107
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp1923:
    00000070: 	leal	-0x1(%rsi), %eax
    00000073: 	movsd	DATAat0x38a20(%rip), %xmm7
    0000007b: 	movsd	DATAat0x38a28(%rip), %xmm6
    00000083: 	movsd	DATAat0x38a30(%rip), %xmm5
    0000008b: 	movsd	DATAat0x38910(%rip), %xmm3
    00000093: 	leaq	0x8(%rdi,%rax,8), %rax
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1928:
    000000a0: 	movsd	(%rdi), %xmm2
    000000a4: 	movapd	%xmm2, %xmm1
    000000a8: 	addsd	%xmm2, %xmm0
    000000ac: 	mulsd	%xmm7, %xmm1
    000000b0: 	divsd	%xmm6, %xmm1
    000000b4: 	mulsd	%xmm5, %xmm1
    000000b8: 	divsd	%xmm3, %xmm1
    000000bc: 	comisd	%xmm4, %xmm1
    000000c0: 	jbe	.Ltmp1927 # Offset: 192
    000000c2: 	divsd	%xmm3, %xmm2
    000000c6: 	addsd	%xmm1, %xmm2
    000000ca: 	addsd	%xmm2, %xmm0
.Ltmp1927:
    000000ce: 	addq	$0x8, %rdi
    000000d2: 	cmpq	%rax, %rdi
    000000d5: 	jne	.Ltmp1928 # Offset: 213
.Ltmp1922:
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1926:
    000000e0: 	retq # Offset: 224
.Ltmp1924:
    000000e1: 	xorl	%eax, %eax
    000000e3: 	jmp	.Ltmp1929 # Offset: 227
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_goto_loop2_globalIdET_PKS0_iS0_"

Binary Function "_Z21test_do_loop2_global2IdET_PKS0_iS0_" after disassembly {
  Number      : 248
  State       : disassembled
  Address     : 0x18560
  Size        : 0xdd
  MaxSize     : 0xe0
  Offset      : 0x18560
  Section     : .text
  Orc Section : .local.text._Z21test_do_loop2_global2IdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0247:
    00000000: 	endbr64
    00000004: 	pxor	%xmm0, %xmm0
    00000008: 	testl	%esi, %esi
    0000000a: 	jle	.Ltmp1930 # Offset: 10
    00000010: 	comisd	init_value(%rip), %xmm0
    00000018: 	movapd	%xmm0, %xmm4
    0000001c: 	ja	.Ltmp1931 # Offset: 28
    0000001e: 	cmpl	$0x1, %esi
    00000021: 	je	.Ltmp1932 # Offset: 33
    00000027: 	movl	%esi, %edx
    00000029: 	movq	%rdi, %rax
    0000002c: 	shrl	%edx
    0000002e: 	subl	$0x1, %edx
    00000031: 	shlq	$0x4, %rdx
    00000035: 	leaq	0x10(%rdi,%rdx), %rdx
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1933:
    00000040: 	movsd	(%rax), %xmm1
    00000044: 	addq	$0x10, %rax
    00000048: 	addsd	%xmm1, %xmm0
    0000004c: 	movsd	-0x8(%rax), %xmm1
    00000051: 	addsd	%xmm1, %xmm0
    00000055: 	cmpq	%rdx, %rax
    00000058: 	jne	.Ltmp1933 # Offset: 88
    0000005a: 	movl	%esi, %eax
    0000005c: 	andl	$-0x2, %eax
    0000005f: 	andl	$0x1, %esi
    00000062: 	je	.Ltmp1934 # Offset: 98
.Ltmp1937:
    00000064: 	cltq
    00000066: 	addsd	(%rdi,%rax,8), %xmm0
    0000006b: 	retq # Offset: 107
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp1931:
    00000070: 	leal	-0x1(%rsi), %eax
    00000073: 	movsd	DATAat0x38a20(%rip), %xmm7
    0000007b: 	movsd	DATAat0x38a28(%rip), %xmm6
    00000083: 	movsd	DATAat0x38a30(%rip), %xmm5
    0000008b: 	movsd	DATAat0x38910(%rip), %xmm3
    00000093: 	leaq	0x8(%rdi,%rax,8), %rax
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1936:
    000000a0: 	movsd	(%rdi), %xmm2
    000000a4: 	movapd	%xmm2, %xmm1
    000000a8: 	addsd	%xmm2, %xmm0
    000000ac: 	mulsd	%xmm7, %xmm1
    000000b0: 	divsd	%xmm6, %xmm1
    000000b4: 	mulsd	%xmm5, %xmm1
    000000b8: 	divsd	%xmm3, %xmm1
    000000bc: 	comisd	%xmm4, %xmm1
    000000c0: 	jbe	.Ltmp1935 # Offset: 192
    000000c2: 	divsd	%xmm3, %xmm2
    000000c6: 	addsd	%xmm2, %xmm0
.Ltmp1935:
    000000ca: 	addq	$0x8, %rdi
    000000ce: 	cmpq	%rax, %rdi
    000000d1: 	jne	.Ltmp1936 # Offset: 209
.Ltmp1930:
    000000d3: 	retq # Offset: 211
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp1934:
    000000d8: 	retq # Offset: 216
.Ltmp1932:
    000000d9: 	xorl	%eax, %eax
    000000db: 	jmp	.Ltmp1937 # Offset: 219
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_do_loop2_global2IdET_PKS0_iS0_"

Binary Function "_Z20test_do_loop2_globalIdET_PKS0_iS0_" after disassembly {
  Number      : 249
  State       : disassembled
  Address     : 0x18640
  Size        : 0xe8
  MaxSize     : 0xf0
  Offset      : 0x18640
  Section     : .text
  Orc Section : .local.text._Z20test_do_loop2_globalIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0248:
    00000000: 	endbr64
    00000004: 	pxor	%xmm0, %xmm0
    00000008: 	testl	%esi, %esi
    0000000a: 	jle	.Ltmp1938 # Offset: 10
    00000010: 	comisd	init_value(%rip), %xmm0
    00000018: 	movapd	%xmm0, %xmm4
    0000001c: 	ja	.Ltmp1939 # Offset: 28
    0000001e: 	cmpl	$0x1, %esi
    00000021: 	je	.Ltmp1940 # Offset: 33
    00000027: 	movl	%esi, %edx
    00000029: 	movq	%rdi, %rax
    0000002c: 	shrl	%edx
    0000002e: 	subl	$0x1, %edx
    00000031: 	shlq	$0x4, %rdx
    00000035: 	leaq	0x10(%rdi,%rdx), %rdx
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1941:
    00000040: 	movsd	(%rax), %xmm1
    00000044: 	addq	$0x10, %rax
    00000048: 	addsd	%xmm1, %xmm0
    0000004c: 	movsd	-0x8(%rax), %xmm1
    00000051: 	addsd	%xmm1, %xmm0
    00000055: 	cmpq	%rdx, %rax
    00000058: 	jne	.Ltmp1941 # Offset: 88
    0000005a: 	movl	%esi, %eax
    0000005c: 	andl	$-0x2, %eax
    0000005f: 	andl	$0x1, %esi
    00000062: 	je	.Ltmp1942 # Offset: 98
.Ltmp1945:
    00000064: 	cltq
    00000066: 	addsd	(%rdi,%rax,8), %xmm0
    0000006b: 	retq # Offset: 107
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp1939:
    00000070: 	leal	-0x1(%rsi), %eax
    00000073: 	movsd	DATAat0x38a20(%rip), %xmm7
    0000007b: 	movsd	DATAat0x38a28(%rip), %xmm6
    00000083: 	movsd	DATAat0x38a30(%rip), %xmm5
    0000008b: 	movsd	DATAat0x38910(%rip), %xmm3
    00000093: 	leaq	0x8(%rdi,%rax,8), %rax
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1944:
    000000a0: 	movsd	(%rdi), %xmm2
    000000a4: 	movapd	%xmm2, %xmm1
    000000a8: 	addsd	%xmm2, %xmm0
    000000ac: 	mulsd	%xmm7, %xmm1
    000000b0: 	divsd	%xmm6, %xmm1
    000000b4: 	mulsd	%xmm5, %xmm1
    000000b8: 	divsd	%xmm3, %xmm1
    000000bc: 	comisd	%xmm4, %xmm1
    000000c0: 	jbe	.Ltmp1943 # Offset: 192
    000000c2: 	divsd	%xmm3, %xmm2
    000000c6: 	addsd	%xmm1, %xmm2
    000000ca: 	addsd	%xmm2, %xmm0
.Ltmp1943:
    000000ce: 	addq	$0x8, %rdi
    000000d2: 	cmpq	%rax, %rdi
    000000d5: 	jne	.Ltmp1944 # Offset: 213
.Ltmp1938:
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1942:
    000000e0: 	retq # Offset: 224
.Ltmp1940:
    000000e1: 	xorl	%eax, %eax
    000000e3: 	jmp	.Ltmp1945 # Offset: 227
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_do_loop2_globalIdET_PKS0_iS0_"

Binary Function "_Z22test_goto_loop2_param2IdET_PKS0_iS0_" after disassembly {
  Number      : 250
  State       : disassembled
  Address     : 0x18730
  Size        : 0xec
  MaxSize     : 0xf0
  Offset      : 0x18730
  Section     : .text
  Orc Section : .local.text._Z22test_goto_loop2_param2IdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0249:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp1946 # Offset: 6
    0000000c: 	pxor	%xmm3, %xmm3
    00000010: 	comisd	%xmm0, %xmm3
    00000014: 	ja	.Ltmp1947 # Offset: 20
    00000016: 	cmpl	$0x1, %esi
    00000019: 	je	.Ltmp1948 # Offset: 25
    0000001f: 	movl	%esi, %edx
    00000021: 	movq	%rdi, %rax
    00000024: 	movapd	%xmm3, %xmm0
    00000028: 	shrl	%edx
    0000002a: 	subl	$0x1, %edx
    0000002d: 	shlq	$0x4, %rdx
    00000031: 	leaq	0x10(%rdi,%rdx), %rdx
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1949:
    00000040: 	movsd	(%rax), %xmm1
    00000044: 	addq	$0x10, %rax
    00000048: 	addsd	%xmm1, %xmm0
    0000004c: 	movsd	-0x8(%rax), %xmm1
    00000051: 	addsd	%xmm1, %xmm0
    00000055: 	cmpq	%rdx, %rax
    00000058: 	jne	.Ltmp1949 # Offset: 88
    0000005a: 	movl	%esi, %eax
    0000005c: 	andl	$-0x2, %eax
    0000005f: 	andl	$0x1, %esi
    00000062: 	je	.Ltmp1950 # Offset: 98
.Ltmp1953:
    00000064: 	cltq
    00000066: 	addsd	(%rdi,%rax,8), %xmm0
    0000006b: 	retq # Offset: 107
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp1947:
    00000070: 	leal	-0x1(%rsi), %eax
    00000073: 	movsd	DATAat0x38a20(%rip), %xmm7
    0000007b: 	movsd	DATAat0x38a28(%rip), %xmm6
    00000083: 	movapd	%xmm3, %xmm0
    00000087: 	movsd	DATAat0x38a30(%rip), %xmm5
    0000008f: 	movsd	DATAat0x38910(%rip), %xmm4
    00000097: 	leaq	0x8(%rdi,%rax,8), %rax
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp1952:
    000000a0: 	movsd	(%rdi), %xmm2
    000000a4: 	movapd	%xmm2, %xmm1
    000000a8: 	addsd	%xmm2, %xmm0
    000000ac: 	mulsd	%xmm7, %xmm1
    000000b0: 	divsd	%xmm6, %xmm1
    000000b4: 	mulsd	%xmm5, %xmm1
    000000b8: 	divsd	%xmm4, %xmm1
    000000bc: 	comisd	%xmm3, %xmm1
    000000c0: 	jbe	.Ltmp1951 # Offset: 192
    000000c2: 	divsd	%xmm4, %xmm2
    000000c6: 	addsd	%xmm2, %xmm0
.Ltmp1951:
    000000ca: 	addq	$0x8, %rdi
    000000ce: 	cmpq	%rax, %rdi
    000000d1: 	jne	.Ltmp1952 # Offset: 209
    000000d3: 	retq # Offset: 211
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp1946:
    000000d8: 	pxor	%xmm0, %xmm0
    000000dc: 	retq # Offset: 220
    000000dd: 	nopl	(%rax) # Size: 3
.Ltmp1950:
    000000e0: 	retq # Offset: 224
.Ltmp1948:
    000000e1: 	xorl	%eax, %eax
    000000e3: 	movapd	%xmm3, %xmm0
    000000e7: 	jmp	.Ltmp1953 # Offset: 231
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_goto_loop2_param2IdET_PKS0_iS0_"

Binary Function "_Z21test_goto_loop2_paramIdET_PKS0_iS0_" after disassembly {
  Number      : 251
  State       : disassembled
  Address     : 0x18820
  Size        : 0xf4
  MaxSize     : 0x100
  Offset      : 0x18820
  Section     : .text
  Orc Section : .local.text._Z21test_goto_loop2_paramIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0250:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp1954 # Offset: 6
    0000000c: 	pxor	%xmm3, %xmm3
    00000010: 	comisd	%xmm0, %xmm3
    00000014: 	ja	.Ltmp1955 # Offset: 20
    00000016: 	cmpl	$0x1, %esi
    00000019: 	je	.Ltmp1956 # Offset: 25
    0000001f: 	movl	%esi, %edx
    00000021: 	movq	%rdi, %rax
    00000024: 	movapd	%xmm3, %xmm0
    00000028: 	shrl	%edx
    0000002a: 	subl	$0x1, %edx
    0000002d: 	shlq	$0x4, %rdx
    00000031: 	leaq	0x10(%rdi,%rdx), %rdx
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1957:
    00000040: 	movsd	(%rax), %xmm1
    00000044: 	addq	$0x10, %rax
    00000048: 	addsd	%xmm1, %xmm0
    0000004c: 	movsd	-0x8(%rax), %xmm1
    00000051: 	addsd	%xmm1, %xmm0
    00000055: 	cmpq	%rdx, %rax
    00000058: 	jne	.Ltmp1957 # Offset: 88
    0000005a: 	movl	%esi, %eax
    0000005c: 	andl	$-0x2, %eax
    0000005f: 	andl	$0x1, %esi
    00000062: 	je	.Ltmp1958 # Offset: 98
.Ltmp1961:
    00000068: 	cltq
    0000006a: 	addsd	(%rdi,%rax,8), %xmm0
    0000006f: 	retq # Offset: 111
.Ltmp1955:
    00000070: 	leal	-0x1(%rsi), %eax
    00000073: 	movsd	DATAat0x38a20(%rip), %xmm7
    0000007b: 	movsd	DATAat0x38a28(%rip), %xmm6
    00000083: 	movapd	%xmm3, %xmm0
    00000087: 	movsd	DATAat0x38a30(%rip), %xmm5
    0000008f: 	movsd	DATAat0x38910(%rip), %xmm4
    00000097: 	leaq	0x8(%rdi,%rax,8), %rax
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp1960:
    000000a0: 	movsd	(%rdi), %xmm2
    000000a4: 	movapd	%xmm2, %xmm1
    000000a8: 	addsd	%xmm2, %xmm0
    000000ac: 	mulsd	%xmm7, %xmm1
    000000b0: 	divsd	%xmm6, %xmm1
    000000b4: 	mulsd	%xmm5, %xmm1
    000000b8: 	divsd	%xmm4, %xmm1
    000000bc: 	comisd	%xmm3, %xmm1
    000000c0: 	jbe	.Ltmp1959 # Offset: 192
    000000c2: 	divsd	%xmm4, %xmm2
    000000c6: 	addsd	%xmm1, %xmm2
    000000ca: 	addsd	%xmm2, %xmm0
.Ltmp1959:
    000000ce: 	addq	$0x8, %rdi
    000000d2: 	cmpq	%rax, %rdi
    000000d5: 	jne	.Ltmp1960 # Offset: 213
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1954:
    000000e0: 	pxor	%xmm0, %xmm0
    000000e4: 	retq # Offset: 228
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp1958:
    000000e8: 	retq # Offset: 232
.Ltmp1956:
    000000e9: 	xorl	%eax, %eax
    000000eb: 	movapd	%xmm3, %xmm0
    000000ef: 	jmp	.Ltmp1961 # Offset: 239
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_goto_loop2_paramIdET_PKS0_iS0_"

Binary Function "_Z20test_do_loop2_param2IdET_PKS0_iS0_" after disassembly {
  Number      : 252
  State       : disassembled
  Address     : 0x18920
  Size        : 0xec
  MaxSize     : 0xf0
  Offset      : 0x18920
  Section     : .text
  Orc Section : .local.text._Z20test_do_loop2_param2IdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0251:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp1962 # Offset: 6
    0000000c: 	pxor	%xmm3, %xmm3
    00000010: 	comisd	%xmm0, %xmm3
    00000014: 	ja	.Ltmp1963 # Offset: 20
    00000016: 	cmpl	$0x1, %esi
    00000019: 	je	.Ltmp1964 # Offset: 25
    0000001f: 	movl	%esi, %edx
    00000021: 	movq	%rdi, %rax
    00000024: 	movapd	%xmm3, %xmm0
    00000028: 	shrl	%edx
    0000002a: 	subl	$0x1, %edx
    0000002d: 	shlq	$0x4, %rdx
    00000031: 	leaq	0x10(%rdi,%rdx), %rdx
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1965:
    00000040: 	movsd	(%rax), %xmm1
    00000044: 	addq	$0x10, %rax
    00000048: 	addsd	%xmm1, %xmm0
    0000004c: 	movsd	-0x8(%rax), %xmm1
    00000051: 	addsd	%xmm1, %xmm0
    00000055: 	cmpq	%rdx, %rax
    00000058: 	jne	.Ltmp1965 # Offset: 88
    0000005a: 	movl	%esi, %eax
    0000005c: 	andl	$-0x2, %eax
    0000005f: 	andl	$0x1, %esi
    00000062: 	je	.Ltmp1966 # Offset: 98
.Ltmp1969:
    00000064: 	cltq
    00000066: 	addsd	(%rdi,%rax,8), %xmm0
    0000006b: 	retq # Offset: 107
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp1963:
    00000070: 	leal	-0x1(%rsi), %eax
    00000073: 	movsd	DATAat0x38a20(%rip), %xmm7
    0000007b: 	movsd	DATAat0x38a28(%rip), %xmm6
    00000083: 	movapd	%xmm3, %xmm0
    00000087: 	movsd	DATAat0x38a30(%rip), %xmm5
    0000008f: 	movsd	DATAat0x38910(%rip), %xmm4
    00000097: 	leaq	0x8(%rdi,%rax,8), %rax
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp1968:
    000000a0: 	movsd	(%rdi), %xmm2
    000000a4: 	movapd	%xmm2, %xmm1
    000000a8: 	addsd	%xmm2, %xmm0
    000000ac: 	mulsd	%xmm7, %xmm1
    000000b0: 	divsd	%xmm6, %xmm1
    000000b4: 	mulsd	%xmm5, %xmm1
    000000b8: 	divsd	%xmm4, %xmm1
    000000bc: 	comisd	%xmm3, %xmm1
    000000c0: 	jbe	.Ltmp1967 # Offset: 192
    000000c2: 	divsd	%xmm4, %xmm2
    000000c6: 	addsd	%xmm2, %xmm0
.Ltmp1967:
    000000ca: 	addq	$0x8, %rdi
    000000ce: 	cmpq	%rax, %rdi
    000000d1: 	jne	.Ltmp1968 # Offset: 209
    000000d3: 	retq # Offset: 211
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp1962:
    000000d8: 	pxor	%xmm0, %xmm0
    000000dc: 	retq # Offset: 220
    000000dd: 	nopl	(%rax) # Size: 3
.Ltmp1966:
    000000e0: 	retq # Offset: 224
.Ltmp1964:
    000000e1: 	xorl	%eax, %eax
    000000e3: 	movapd	%xmm3, %xmm0
    000000e7: 	jmp	.Ltmp1969 # Offset: 231
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_do_loop2_param2IdET_PKS0_iS0_"

Binary Function "_Z19test_do_loop2_paramIdET_PKS0_iS0_" after disassembly {
  Number      : 253
  State       : disassembled
  Address     : 0x18a10
  Size        : 0xf4
  MaxSize     : 0x100
  Offset      : 0x18a10
  Section     : .text
  Orc Section : .local.text._Z19test_do_loop2_paramIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0252:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp1970 # Offset: 6
    0000000c: 	pxor	%xmm3, %xmm3
    00000010: 	comisd	%xmm0, %xmm3
    00000014: 	ja	.Ltmp1971 # Offset: 20
    00000016: 	cmpl	$0x1, %esi
    00000019: 	je	.Ltmp1972 # Offset: 25
    0000001f: 	movl	%esi, %edx
    00000021: 	movq	%rdi, %rax
    00000024: 	movapd	%xmm3, %xmm0
    00000028: 	shrl	%edx
    0000002a: 	subl	$0x1, %edx
    0000002d: 	shlq	$0x4, %rdx
    00000031: 	leaq	0x10(%rdi,%rdx), %rdx
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1973:
    00000040: 	movsd	(%rax), %xmm1
    00000044: 	addq	$0x10, %rax
    00000048: 	addsd	%xmm1, %xmm0
    0000004c: 	movsd	-0x8(%rax), %xmm1
    00000051: 	addsd	%xmm1, %xmm0
    00000055: 	cmpq	%rdx, %rax
    00000058: 	jne	.Ltmp1973 # Offset: 88
    0000005a: 	movl	%esi, %eax
    0000005c: 	andl	$-0x2, %eax
    0000005f: 	andl	$0x1, %esi
    00000062: 	je	.Ltmp1974 # Offset: 98
.Ltmp1977:
    00000068: 	cltq
    0000006a: 	addsd	(%rdi,%rax,8), %xmm0
    0000006f: 	retq # Offset: 111
.Ltmp1971:
    00000070: 	leal	-0x1(%rsi), %eax
    00000073: 	movsd	DATAat0x38a20(%rip), %xmm7
    0000007b: 	movsd	DATAat0x38a28(%rip), %xmm6
    00000083: 	movapd	%xmm3, %xmm0
    00000087: 	movsd	DATAat0x38a30(%rip), %xmm5
    0000008f: 	movsd	DATAat0x38910(%rip), %xmm4
    00000097: 	leaq	0x8(%rdi,%rax,8), %rax
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp1976:
    000000a0: 	movsd	(%rdi), %xmm2
    000000a4: 	movapd	%xmm2, %xmm1
    000000a8: 	addsd	%xmm2, %xmm0
    000000ac: 	mulsd	%xmm7, %xmm1
    000000b0: 	divsd	%xmm6, %xmm1
    000000b4: 	mulsd	%xmm5, %xmm1
    000000b8: 	divsd	%xmm4, %xmm1
    000000bc: 	comisd	%xmm3, %xmm1
    000000c0: 	jbe	.Ltmp1975 # Offset: 192
    000000c2: 	divsd	%xmm4, %xmm2
    000000c6: 	addsd	%xmm1, %xmm2
    000000ca: 	addsd	%xmm2, %xmm0
.Ltmp1975:
    000000ce: 	addq	$0x8, %rdi
    000000d2: 	cmpq	%rax, %rdi
    000000d5: 	jne	.Ltmp1976 # Offset: 213
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1970:
    000000e0: 	pxor	%xmm0, %xmm0
    000000e4: 	retq # Offset: 228
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp1974:
    000000e8: 	retq # Offset: 232
.Ltmp1972:
    000000e9: 	xorl	%eax, %eax
    000000eb: 	movapd	%xmm3, %xmm0
    000000ef: 	jmp	.Ltmp1977 # Offset: 239
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_do_loop2_paramIdET_PKS0_iS0_"

Binary Function "_Z22test_goto_loop_global2IdET_PKS0_iS0_" after disassembly {
  Number      : 254
  State       : disassembled
  Address     : 0x18b10
  Size        : 0x95
  MaxSize     : 0xa0
  Offset      : 0x18b10
  Section     : .text
  Orc Section : .local.text._Z22test_goto_loop_global2IdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0253:
    00000000: 	endbr64
    00000004: 	pxor	%xmm0, %xmm0
    00000008: 	testl	%esi, %esi
    0000000a: 	jle	.Ltmp1978 # Offset: 10
    0000000c: 	comisd	init_value(%rip), %xmm0
    00000014: 	ja	.Ltmp1979 # Offset: 20
    00000016: 	cmpl	$0x1, %esi
    00000019: 	je	.Ltmp1980 # Offset: 25
    0000001b: 	movl	%esi, %edx
    0000001d: 	movq	%rdi, %rax
    00000020: 	shrl	%edx
    00000022: 	subl	$0x1, %edx
    00000025: 	shlq	$0x4, %rdx
    00000029: 	leaq	0x10(%rdi,%rdx), %rdx
    0000002e: 	nop # Size: 2
.Ltmp1981:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp1981 # Offset: 72
    0000004a: 	movl	%esi, %eax
    0000004c: 	andl	$-0x2, %eax
    0000004f: 	andl	$0x1, %esi
    00000052: 	je	.Ltmp1982 # Offset: 82
.Ltmp1984:
    00000054: 	cltq
    00000056: 	addsd	(%rdi,%rax,8), %xmm0
    0000005b: 	retq # Offset: 91
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp1979:
    00000060: 	leal	-0x1(%rsi), %eax
    00000063: 	movsd	DATAat0x38910(%rip), %xmm2
    0000006b: 	leaq	0x8(%rdi,%rax,8), %rax
.Ltmp1983:
    00000070: 	movsd	(%rdi), %xmm1
    00000074: 	addq	$0x8, %rdi
    00000078: 	addsd	%xmm1, %xmm0
    0000007c: 	divsd	%xmm2, %xmm1
    00000080: 	addsd	%xmm1, %xmm0
    00000084: 	cmpq	%rax, %rdi
    00000087: 	jne	.Ltmp1983 # Offset: 135
.Ltmp1978:
    00000089: 	retq # Offset: 137
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1982:
    00000090: 	retq # Offset: 144
.Ltmp1980:
    00000091: 	xorl	%eax, %eax
    00000093: 	jmp	.Ltmp1984 # Offset: 147
DWARF CFI Instructions:
    <empty>
End of Function "_Z22test_goto_loop_global2IdET_PKS0_iS0_"

Binary Function "_Z21test_goto_loop_globalIdET_PKS0_iS0_" after disassembly {
  Number      : 255
  State       : disassembled
  Address     : 0x18bb0
  Size        : 0xdd
  MaxSize     : 0xe0
  Offset      : 0x18bb0
  Section     : .text
  Orc Section : .local.text._Z21test_goto_loop_globalIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0254:
    00000000: 	endbr64
    00000004: 	pxor	%xmm0, %xmm0
    00000008: 	testl	%esi, %esi
    0000000a: 	jle	.Ltmp1985 # Offset: 10
    00000010: 	comisd	init_value(%rip), %xmm0
    00000018: 	ja	.Ltmp1986 # Offset: 24
    0000001a: 	cmpl	$0x1, %esi
    0000001d: 	je	.Ltmp1987 # Offset: 29
    00000023: 	movl	%esi, %edx
    00000025: 	movq	%rdi, %rax
    00000028: 	shrl	%edx
    0000002a: 	subl	$0x1, %edx
    0000002d: 	shlq	$0x4, %rdx
    00000031: 	leaq	0x10(%rdi,%rdx), %rdx
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1988:
    00000040: 	movsd	(%rax), %xmm1
    00000044: 	addq	$0x10, %rax
    00000048: 	addsd	%xmm1, %xmm0
    0000004c: 	movsd	-0x8(%rax), %xmm1
    00000051: 	addsd	%xmm1, %xmm0
    00000055: 	cmpq	%rdx, %rax
    00000058: 	jne	.Ltmp1988 # Offset: 88
    0000005a: 	movl	%esi, %eax
    0000005c: 	andl	$-0x2, %eax
    0000005f: 	andl	$0x1, %esi
    00000062: 	je	.Ltmp1989 # Offset: 98
.Ltmp1991:
    00000064: 	cltq
    00000066: 	addsd	(%rdi,%rax,8), %xmm0
    0000006b: 	retq # Offset: 107
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp1986:
    00000070: 	leal	-0x1(%rsi), %eax
    00000073: 	movsd	DATAat0x38a20(%rip), %xmm6
    0000007b: 	movsd	DATAat0x38a28(%rip), %xmm5
    00000083: 	movsd	DATAat0x38a30(%rip), %xmm4
    0000008b: 	movsd	DATAat0x38910(%rip), %xmm3
    00000093: 	leaq	0x8(%rdi,%rax,8), %rax
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1990:
    000000a0: 	movsd	(%rdi), %xmm2
    000000a4: 	addq	$0x8, %rdi
    000000a8: 	movapd	%xmm2, %xmm1
    000000ac: 	addsd	%xmm2, %xmm0
    000000b0: 	mulsd	%xmm6, %xmm1
    000000b4: 	divsd	%xmm3, %xmm2
    000000b8: 	divsd	%xmm5, %xmm1
    000000bc: 	mulsd	%xmm4, %xmm1
    000000c0: 	divsd	%xmm3, %xmm1
    000000c4: 	addsd	%xmm2, %xmm1
    000000c8: 	addsd	%xmm1, %xmm0
    000000cc: 	cmpq	%rax, %rdi
    000000cf: 	jne	.Ltmp1990 # Offset: 207
.Ltmp1985:
    000000d1: 	retq # Offset: 209
    000000d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1989:
    000000d8: 	retq # Offset: 216
.Ltmp1987:
    000000d9: 	xorl	%eax, %eax
    000000db: 	jmp	.Ltmp1991 # Offset: 219
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_goto_loop_globalIdET_PKS0_iS0_"

Binary Function "_Z20test_do_loop_global2IdET_PKS0_iS0_" after disassembly {
  Number      : 256
  State       : disassembled
  Address     : 0x18c90
  Size        : 0x95
  MaxSize     : 0xa0
  Offset      : 0x18c90
  Section     : .text
  Orc Section : .local.text._Z20test_do_loop_global2IdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0255:
    00000000: 	endbr64
    00000004: 	pxor	%xmm0, %xmm0
    00000008: 	testl	%esi, %esi
    0000000a: 	jle	.Ltmp1992 # Offset: 10
    0000000c: 	comisd	init_value(%rip), %xmm0
    00000014: 	ja	.Ltmp1993 # Offset: 20
    00000016: 	cmpl	$0x1, %esi
    00000019: 	je	.Ltmp1994 # Offset: 25
    0000001b: 	movl	%esi, %edx
    0000001d: 	movq	%rdi, %rax
    00000020: 	shrl	%edx
    00000022: 	subl	$0x1, %edx
    00000025: 	shlq	$0x4, %rdx
    00000029: 	leaq	0x10(%rdi,%rdx), %rdx
    0000002e: 	nop # Size: 2
.Ltmp1995:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp1995 # Offset: 72
    0000004a: 	movl	%esi, %eax
    0000004c: 	andl	$-0x2, %eax
    0000004f: 	andl	$0x1, %esi
    00000052: 	je	.Ltmp1996 # Offset: 82
.Ltmp1998:
    00000054: 	cltq
    00000056: 	addsd	(%rdi,%rax,8), %xmm0
    0000005b: 	retq # Offset: 91
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp1993:
    00000060: 	leal	-0x1(%rsi), %eax
    00000063: 	movsd	DATAat0x38910(%rip), %xmm2
    0000006b: 	leaq	0x8(%rdi,%rax,8), %rax
.Ltmp1997:
    00000070: 	movsd	(%rdi), %xmm1
    00000074: 	addq	$0x8, %rdi
    00000078: 	addsd	%xmm1, %xmm0
    0000007c: 	divsd	%xmm2, %xmm1
    00000080: 	addsd	%xmm1, %xmm0
    00000084: 	cmpq	%rax, %rdi
    00000087: 	jne	.Ltmp1997 # Offset: 135
.Ltmp1992:
    00000089: 	retq # Offset: 137
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1996:
    00000090: 	retq # Offset: 144
.Ltmp1994:
    00000091: 	xorl	%eax, %eax
    00000093: 	jmp	.Ltmp1998 # Offset: 147
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_do_loop_global2IdET_PKS0_iS0_"

Binary Function "_Z19test_do_loop_globalIdET_PKS0_iS0_" after disassembly {
  Number      : 257
  State       : disassembled
  Address     : 0x18d30
  Size        : 0xdd
  MaxSize     : 0xe0
  Offset      : 0x18d30
  Section     : .text
  Orc Section : .local.text._Z19test_do_loop_globalIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0256:
    00000000: 	endbr64
    00000004: 	pxor	%xmm0, %xmm0
    00000008: 	testl	%esi, %esi
    0000000a: 	jle	.Ltmp1999 # Offset: 10
    00000010: 	comisd	init_value(%rip), %xmm0
    00000018: 	ja	.Ltmp2000 # Offset: 24
    0000001a: 	cmpl	$0x1, %esi
    0000001d: 	je	.Ltmp2001 # Offset: 29
    00000023: 	movl	%esi, %edx
    00000025: 	movq	%rdi, %rax
    00000028: 	shrl	%edx
    0000002a: 	subl	$0x1, %edx
    0000002d: 	shlq	$0x4, %rdx
    00000031: 	leaq	0x10(%rdi,%rdx), %rdx
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2002:
    00000040: 	movsd	(%rax), %xmm1
    00000044: 	addq	$0x10, %rax
    00000048: 	addsd	%xmm1, %xmm0
    0000004c: 	movsd	-0x8(%rax), %xmm1
    00000051: 	addsd	%xmm1, %xmm0
    00000055: 	cmpq	%rdx, %rax
    00000058: 	jne	.Ltmp2002 # Offset: 88
    0000005a: 	movl	%esi, %eax
    0000005c: 	andl	$-0x2, %eax
    0000005f: 	andl	$0x1, %esi
    00000062: 	je	.Ltmp2003 # Offset: 98
.Ltmp2005:
    00000064: 	cltq
    00000066: 	addsd	(%rdi,%rax,8), %xmm0
    0000006b: 	retq # Offset: 107
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp2000:
    00000070: 	leal	-0x1(%rsi), %eax
    00000073: 	movsd	DATAat0x38a20(%rip), %xmm6
    0000007b: 	movsd	DATAat0x38a28(%rip), %xmm5
    00000083: 	movsd	DATAat0x38a30(%rip), %xmm4
    0000008b: 	movsd	DATAat0x38910(%rip), %xmm3
    00000093: 	leaq	0x8(%rdi,%rax,8), %rax
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2004:
    000000a0: 	movsd	(%rdi), %xmm2
    000000a4: 	addq	$0x8, %rdi
    000000a8: 	movapd	%xmm2, %xmm1
    000000ac: 	addsd	%xmm2, %xmm0
    000000b0: 	mulsd	%xmm6, %xmm1
    000000b4: 	divsd	%xmm3, %xmm2
    000000b8: 	divsd	%xmm5, %xmm1
    000000bc: 	mulsd	%xmm4, %xmm1
    000000c0: 	divsd	%xmm3, %xmm1
    000000c4: 	addsd	%xmm2, %xmm1
    000000c8: 	addsd	%xmm1, %xmm0
    000000cc: 	cmpq	%rax, %rdi
    000000cf: 	jne	.Ltmp2004 # Offset: 207
.Ltmp1999:
    000000d1: 	retq # Offset: 209
    000000d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2003:
    000000d8: 	retq # Offset: 216
.Ltmp2001:
    000000d9: 	xorl	%eax, %eax
    000000db: 	jmp	.Ltmp2005 # Offset: 219
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_do_loop_globalIdET_PKS0_iS0_"

Binary Function "_Z21test_goto_loop_param2IdET_PKS0_iS0_" after disassembly {
  Number      : 258
  State       : disassembled
  Address     : 0x18e10
  Size        : 0xad
  MaxSize     : 0xb0
  Offset      : 0x18e10
  Section     : .text
  Orc Section : .local.text._Z21test_goto_loop_param2IdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0257:
    00000000: 	endbr64
    00000004: 	movapd	%xmm0, %xmm1
    00000008: 	pxor	%xmm0, %xmm0
    0000000c: 	testl	%esi, %esi
    0000000e: 	jle	.Ltmp2006 # Offset: 14
    00000014: 	comisd	%xmm1, %xmm0
    00000018: 	ja	.Ltmp2007 # Offset: 24
    0000001a: 	cmpl	$0x1, %esi
    0000001d: 	je	.Ltmp2008 # Offset: 29
    00000023: 	movl	%esi, %edx
    00000025: 	movq	%rdi, %rax
    00000028: 	shrl	%edx
    0000002a: 	subl	$0x1, %edx
    0000002d: 	shlq	$0x4, %rdx
    00000031: 	leaq	0x10(%rdi,%rdx), %rdx
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2009:
    00000040: 	movsd	(%rax), %xmm1
    00000044: 	addq	$0x10, %rax
    00000048: 	addsd	%xmm1, %xmm0
    0000004c: 	movsd	-0x8(%rax), %xmm1
    00000051: 	addsd	%xmm1, %xmm0
    00000055: 	cmpq	%rax, %rdx
    00000058: 	jne	.Ltmp2009 # Offset: 88
    0000005a: 	movl	%esi, %eax
    0000005c: 	andl	$-0x2, %eax
    0000005f: 	andl	$0x1, %esi
    00000062: 	je	.Ltmp2010 # Offset: 98
.Ltmp2012:
    00000064: 	cltq
    00000066: 	addsd	(%rdi,%rax,8), %xmm0
    0000006b: 	retq # Offset: 107
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp2007:
    00000070: 	leal	-0x1(%rsi), %eax
    00000073: 	movsd	DATAat0x38910(%rip), %xmm2
    0000007b: 	leaq	0x8(%rdi,%rax,8), %rax
.Ltmp2011:
    00000080: 	movsd	(%rdi), %xmm1
    00000084: 	addq	$0x8, %rdi
    00000088: 	addsd	%xmm1, %xmm0
    0000008c: 	divsd	%xmm2, %xmm1
    00000090: 	addsd	%xmm1, %xmm0
    00000094: 	cmpq	%rax, %rdi
    00000097: 	jne	.Ltmp2011 # Offset: 151
    00000099: 	retq # Offset: 153
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2006:
    000000a0: 	retq # Offset: 160
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp2010:
    000000a8: 	retq # Offset: 168
.Ltmp2008:
    000000a9: 	xorl	%eax, %eax
    000000ab: 	jmp	.Ltmp2012 # Offset: 171
DWARF CFI Instructions:
    <empty>
End of Function "_Z21test_goto_loop_param2IdET_PKS0_iS0_"

Binary Function "_Z20test_goto_loop_paramIdET_PKS0_iS0_" after disassembly {
  Number      : 259
  State       : disassembled
  Address     : 0x18ec0
  Size        : 0xe8
  MaxSize     : 0xf0
  Offset      : 0x18ec0
  Section     : .text
  Orc Section : .local.text._Z20test_goto_loop_paramIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0258:
    00000000: 	endbr64
    00000004: 	movapd	%xmm0, %xmm1
    00000008: 	pxor	%xmm0, %xmm0
    0000000c: 	testl	%esi, %esi
    0000000e: 	jle	.Ltmp2013 # Offset: 14
    00000014: 	comisd	%xmm1, %xmm0
    00000018: 	ja	.Ltmp2014 # Offset: 24
    0000001a: 	cmpl	$0x1, %esi
    0000001d: 	je	.Ltmp2015 # Offset: 29
    00000023: 	movl	%esi, %edx
    00000025: 	movq	%rdi, %rax
    00000028: 	shrl	%edx
    0000002a: 	subl	$0x1, %edx
    0000002d: 	shlq	$0x4, %rdx
    00000031: 	leaq	0x10(%rdi,%rdx), %rdx
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2016:
    00000040: 	movsd	(%rax), %xmm1
    00000044: 	addq	$0x10, %rax
    00000048: 	addsd	%xmm1, %xmm0
    0000004c: 	movsd	-0x8(%rax), %xmm1
    00000051: 	addsd	%xmm1, %xmm0
    00000055: 	cmpq	%rdx, %rax
    00000058: 	jne	.Ltmp2016 # Offset: 88
    0000005a: 	movl	%esi, %eax
    0000005c: 	andl	$-0x2, %eax
    0000005f: 	andl	$0x1, %esi
    00000062: 	je	.Ltmp2017 # Offset: 98
.Ltmp2019:
    00000064: 	cltq
    00000066: 	addsd	(%rdi,%rax,8), %xmm0
    0000006b: 	retq # Offset: 107
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp2014:
    00000070: 	leal	-0x1(%rsi), %eax
    00000073: 	movsd	DATAat0x38a20(%rip), %xmm6
    0000007b: 	movsd	DATAat0x38a28(%rip), %xmm5
    00000083: 	movsd	DATAat0x38a30(%rip), %xmm4
    0000008b: 	movsd	DATAat0x38910(%rip), %xmm3
    00000093: 	leaq	0x8(%rdi,%rax,8), %rax
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2018:
    000000a0: 	movsd	(%rdi), %xmm2
    000000a4: 	addq	$0x8, %rdi
    000000a8: 	movapd	%xmm2, %xmm1
    000000ac: 	addsd	%xmm2, %xmm0
    000000b0: 	mulsd	%xmm6, %xmm1
    000000b4: 	divsd	%xmm3, %xmm2
    000000b8: 	divsd	%xmm5, %xmm1
    000000bc: 	mulsd	%xmm4, %xmm1
    000000c0: 	divsd	%xmm3, %xmm1
    000000c4: 	addsd	%xmm2, %xmm1
    000000c8: 	addsd	%xmm1, %xmm0
    000000cc: 	cmpq	%rax, %rdi
    000000cf: 	jne	.Ltmp2018 # Offset: 207
    000000d1: 	retq # Offset: 209
    000000d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2013:
    000000d8: 	retq # Offset: 216
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp2017:
    000000e0: 	retq # Offset: 224
.Ltmp2015:
    000000e1: 	xorl	%eax, %eax
    000000e3: 	jmp	.Ltmp2019 # Offset: 227
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_goto_loop_paramIdET_PKS0_iS0_"

Binary Function "_Z19test_do_loop_param2IdET_PKS0_iS0_" after disassembly {
  Number      : 260
  State       : disassembled
  Address     : 0x18fb0
  Size        : 0xad
  MaxSize     : 0xb0
  Offset      : 0x18fb0
  Section     : .text
  Orc Section : .local.text._Z19test_do_loop_param2IdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0259:
    00000000: 	endbr64
    00000004: 	movapd	%xmm0, %xmm1
    00000008: 	pxor	%xmm0, %xmm0
    0000000c: 	testl	%esi, %esi
    0000000e: 	jle	.Ltmp2020 # Offset: 14
    00000014: 	comisd	%xmm1, %xmm0
    00000018: 	ja	.Ltmp2021 # Offset: 24
    0000001a: 	cmpl	$0x1, %esi
    0000001d: 	je	.Ltmp2022 # Offset: 29
    00000023: 	movl	%esi, %edx
    00000025: 	movq	%rdi, %rax
    00000028: 	shrl	%edx
    0000002a: 	subl	$0x1, %edx
    0000002d: 	shlq	$0x4, %rdx
    00000031: 	leaq	0x10(%rdi,%rdx), %rdx
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2023:
    00000040: 	movsd	(%rax), %xmm1
    00000044: 	addq	$0x10, %rax
    00000048: 	addsd	%xmm1, %xmm0
    0000004c: 	movsd	-0x8(%rax), %xmm1
    00000051: 	addsd	%xmm1, %xmm0
    00000055: 	cmpq	%rax, %rdx
    00000058: 	jne	.Ltmp2023 # Offset: 88
    0000005a: 	movl	%esi, %eax
    0000005c: 	andl	$-0x2, %eax
    0000005f: 	andl	$0x1, %esi
    00000062: 	je	.Ltmp2024 # Offset: 98
.Ltmp2026:
    00000064: 	cltq
    00000066: 	addsd	(%rdi,%rax,8), %xmm0
    0000006b: 	retq # Offset: 107
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp2021:
    00000070: 	leal	-0x1(%rsi), %eax
    00000073: 	movsd	DATAat0x38910(%rip), %xmm2
    0000007b: 	leaq	0x8(%rdi,%rax,8), %rax
.Ltmp2025:
    00000080: 	movsd	(%rdi), %xmm1
    00000084: 	addq	$0x8, %rdi
    00000088: 	addsd	%xmm1, %xmm0
    0000008c: 	divsd	%xmm2, %xmm1
    00000090: 	addsd	%xmm1, %xmm0
    00000094: 	cmpq	%rax, %rdi
    00000097: 	jne	.Ltmp2025 # Offset: 151
    00000099: 	retq # Offset: 153
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2020:
    000000a0: 	retq # Offset: 160
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp2024:
    000000a8: 	retq # Offset: 168
.Ltmp2022:
    000000a9: 	xorl	%eax, %eax
    000000ab: 	jmp	.Ltmp2026 # Offset: 171
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_do_loop_param2IdET_PKS0_iS0_"

Binary Function "_Z18test_do_loop_paramIdET_PKS0_iS0_" after disassembly {
  Number      : 261
  State       : disassembled
  Address     : 0x19060
  Size        : 0xe8
  MaxSize     : 0xf0
  Offset      : 0x19060
  Section     : .text
  Orc Section : .local.text._Z18test_do_loop_paramIdET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0260:
    00000000: 	endbr64
    00000004: 	movapd	%xmm0, %xmm1
    00000008: 	pxor	%xmm0, %xmm0
    0000000c: 	testl	%esi, %esi
    0000000e: 	jle	.Ltmp2027 # Offset: 14
    00000014: 	comisd	%xmm1, %xmm0
    00000018: 	ja	.Ltmp2028 # Offset: 24
    0000001a: 	cmpl	$0x1, %esi
    0000001d: 	je	.Ltmp2029 # Offset: 29
    00000023: 	movl	%esi, %edx
    00000025: 	movq	%rdi, %rax
    00000028: 	shrl	%edx
    0000002a: 	subl	$0x1, %edx
    0000002d: 	shlq	$0x4, %rdx
    00000031: 	leaq	0x10(%rdi,%rdx), %rdx
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2030:
    00000040: 	movsd	(%rax), %xmm1
    00000044: 	addq	$0x10, %rax
    00000048: 	addsd	%xmm1, %xmm0
    0000004c: 	movsd	-0x8(%rax), %xmm1
    00000051: 	addsd	%xmm1, %xmm0
    00000055: 	cmpq	%rdx, %rax
    00000058: 	jne	.Ltmp2030 # Offset: 88
    0000005a: 	movl	%esi, %eax
    0000005c: 	andl	$-0x2, %eax
    0000005f: 	andl	$0x1, %esi
    00000062: 	je	.Ltmp2031 # Offset: 98
.Ltmp2033:
    00000064: 	cltq
    00000066: 	addsd	(%rdi,%rax,8), %xmm0
    0000006b: 	retq # Offset: 107
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp2028:
    00000070: 	leal	-0x1(%rsi), %eax
    00000073: 	movsd	DATAat0x38a20(%rip), %xmm6
    0000007b: 	movsd	DATAat0x38a28(%rip), %xmm5
    00000083: 	movsd	DATAat0x38a30(%rip), %xmm4
    0000008b: 	movsd	DATAat0x38910(%rip), %xmm3
    00000093: 	leaq	0x8(%rdi,%rax,8), %rax
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2032:
    000000a0: 	movsd	(%rdi), %xmm2
    000000a4: 	addq	$0x8, %rdi
    000000a8: 	movapd	%xmm2, %xmm1
    000000ac: 	addsd	%xmm2, %xmm0
    000000b0: 	mulsd	%xmm6, %xmm1
    000000b4: 	divsd	%xmm3, %xmm2
    000000b8: 	divsd	%xmm5, %xmm1
    000000bc: 	mulsd	%xmm4, %xmm1
    000000c0: 	divsd	%xmm3, %xmm1
    000000c4: 	addsd	%xmm2, %xmm1
    000000c8: 	addsd	%xmm1, %xmm0
    000000cc: 	cmpq	%rax, %rdi
    000000cf: 	jne	.Ltmp2032 # Offset: 207
    000000d1: 	retq # Offset: 209
    000000d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2027:
    000000d8: 	retq # Offset: 216
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp2031:
    000000e0: 	retq # Offset: 224
.Ltmp2029:
    000000e1: 	xorl	%eax, %eax
    000000e3: 	jmp	.Ltmp2033 # Offset: 227
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_do_loop_paramIdET_PKS0_iS0_"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
  Number      : 262
  State       : disassembled
  Address     : 0x19150
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0x19150
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0261:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	0x20(%rdi), %rcx
    00000019: 	movq	0x30(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	0x10(%rdi), %rbp
    00000025: 	movq	%rcx, 0x10(%rsp)
    0000002a: 	movq	0x28(%rdi), %rcx
    0000002e: 	movq	%rax, 0x8(%rsp)
    00000033: 	movq	0x48(%rdi), %rax
    00000037: 	leaq	0x8(%rcx), %r12
    0000003b: 	movq	%rcx, 0x18(%rsp)
    00000040: 	movq	%rax, (%rsp)
    00000044: 	cmpq	%r12, %rax
    00000047: 	jbe	.Ltmp2034 # Offset: 71
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp2037:
    00000050: 	movq	(%r12), %r15
    00000054: 	leaq	0x200(%r15), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2036:
    00000060: 	movq	(%r15), %rdi
    00000063: 	leaq	0x10(%r15), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp2035 # Offset: 106
    00000070: 	movq	0x10(%r15), %rax
    00000074: 	addq	$0x20, %r15
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%r15, %rbx
    00000084: 	jne	.Ltmp2036 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp2037 # Offset: 142
.Ltmp2034:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x18(%rsp)
    00000099: 	je	.Ltmp2038 # Offset: 153
    0000009f: 	cmpq	0x10(%rsp), %rbp
    000000a4: 	je	.Ltmp2039 # Offset: 164
.Ltmp2042:
    000000a6: 	movq	(%rbp), %rdi
    000000aa: 	leaq	0x10(%rbp), %rax
    000000ae: 	cmpq	%rax, %rdi
    000000b1: 	je	.Ltmp2040 # Offset: 177
.Ltmp2041:
    000000b3: 	movq	0x10(%rbp), %rax
    000000b7: 	addq	$0x20, %rbp
    000000bb: 	leaq	0x1(%rax), %rsi
    000000bf: 	callq	_ZdlPvm@PLT # Offset: 191
    000000c4: 	cmpq	%rbp, 0x10(%rsp)
    000000c9: 	je	.Ltmp2039 # Offset: 201
    000000cb: 	movq	(%rbp), %rdi
    000000cf: 	leaq	0x10(%rbp), %rax
    000000d3: 	cmpq	%rax, %rdi
    000000d6: 	jne	.Ltmp2041 # Offset: 214
.Ltmp2040:
    000000d8: 	addq	$0x20, %rbp
    000000dc: 	cmpq	%rbp, 0x10(%rsp)
    000000e1: 	jne	.Ltmp2042 # Offset: 225
    000000e3: 	cmpq	%r13, 0x8(%rsp)
    000000e8: 	je	.Ltmp2043 # Offset: 232
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2045:
    000000f0: 	movq	(%r13), %rdi
    000000f4: 	leaq	0x10(%r13), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp2044 # Offset: 251
    000000fd: 	movq	0x10(%r13), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp2044:
    0000010a: 	addq	$0x20, %r13
.Ltmp2039:
    0000010e: 	cmpq	%r13, 0x8(%rsp)
    00000113: 	jne	.Ltmp2045 # Offset: 275
.Ltmp2043:
    00000115: 	movq	(%r14), %rdi
    00000118: 	testq	%rdi, %rdi
    0000011b: 	je	.Ltmp2046 # Offset: 283
.Ltmp2052:
    00000121: 	movq	0x48(%r14), %rax
    00000125: 	movq	0x28(%r14), %rbx
    00000129: 	leaq	0x8(%rax), %rbp
    0000012d: 	cmpq	%rbx, %rbp
    00000130: 	jbe	.Ltmp2047 # Offset: 304
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2048:
    00000138: 	movq	(%rbx), %rdi
    0000013b: 	movl	$0x200, %esi
    00000140: 	addq	$0x8, %rbx
    00000144: 	callq	_ZdlPvm@PLT # Offset: 324
    00000149: 	cmpq	%rbx, %rbp
    0000014c: 	ja	.Ltmp2048 # Offset: 332
    0000014e: 	movq	(%r14), %rdi
.Ltmp2047:
    00000151: 	movq	0x8(%r14), %rsi
    00000155: 	addq	$0x28, %rsp
    00000159: 	popq	%rbx
    0000015a: 	popq	%rbp
    0000015b: 	shlq	$0x3, %rsi
    0000015f: 	popq	%r12
    00000161: 	popq	%r13
    00000163: 	popq	%r14
    00000165: 	popq	%r15
    00000167: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp2035:
    00000170: 	addq	$0x20, %r15
    00000174: 	cmpq	%r15, %rbx
    00000177: 	jne	.Ltmp2036 # Offset: 375
    0000017d: 	addq	$0x8, %r12
    00000181: 	cmpq	%r12, (%rsp)
    00000185: 	ja	.Ltmp2037 # Offset: 389
    0000018b: 	jmp	.Ltmp2034 # Offset: 395
.Ltmp2038:
    00000190: 	cmpq	0x8(%rsp), %rbp
    00000195: 	je	.Ltmp2043 # Offset: 405
.Ltmp2051:
    0000019b: 	movq	(%rbp), %rdi
    0000019f: 	leaq	0x10(%rbp), %rax
    000001a3: 	cmpq	%rax, %rdi
    000001a6: 	je	.Ltmp2049 # Offset: 422
.Ltmp2050:
    000001a8: 	movq	0x10(%rbp), %rax
    000001ac: 	addq	$0x20, %rbp
    000001b0: 	leaq	0x1(%rax), %rsi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	cmpq	%rbp, 0x8(%rsp)
    000001be: 	je	.Ltmp2043 # Offset: 446
    000001c4: 	movq	(%rbp), %rdi
    000001c8: 	leaq	0x10(%rbp), %rax
    000001cc: 	cmpq	%rax, %rdi
    000001cf: 	jne	.Ltmp2050 # Offset: 463
.Ltmp2049:
    000001d1: 	addq	$0x20, %rbp
    000001d5: 	cmpq	%rbp, 0x8(%rsp)
    000001da: 	jne	.Ltmp2051 # Offset: 474
    000001dc: 	movq	(%r14), %rdi
    000001df: 	testq	%rdi, %rdi
    000001e2: 	jne	.Ltmp2052 # Offset: 482
.Ltmp2046:
    000001e8: 	addq	$0x28, %rsp
    000001ec: 	popq	%rbx
    000001ed: 	popq	%rbp
    000001ee: 	popq	%r12
    000001f0: 	popq	%r13
    000001f2: 	popq	%r14
    000001f4: 	popq	%r15
    000001f6: 	retq # Offset: 502
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)"

Binary Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_" after disassembly {
  Number      : 263
  State       : disassembled
  Address     : 0x19350
  Size        : 0x145
  MaxSize     : 0x150
  Offset      : 0x19350
  Section     : .text
  Orc Section : .local.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0262:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	movq	%rdi, %r12
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdx, %rbp
    00000011: 	pushq	%rbx
    00000012: 	leaq	0x10(%rdi), %rbx
    00000016: 	subq	$0x10, %rsp
    0000001a: 	movq	0x8(%rsi), %r13
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	movq	%rbx, (%rdi)
    00000031: 	movq	(%rsi), %r14
    00000034: 	movq	%r14, %rax
    00000037: 	addq	%r13, %rax
    0000003a: 	je	.Ltmp2053 # Offset: 58
    0000003c: 	testq	%r14, %r14
    0000003f: 	je	.Ltmp2054 # Offset: 63
.Ltmp2053:
    00000045: 	movq	%r13, (%rsp)
    00000049: 	cmpq	$0xf, %r13
    0000004d: 	ja	.Ltmp2055 # Offset: 77
    0000004f: 	cmpq	$0x1, %r13
    00000053: 	jne	.Ltmp2056 # Offset: 83
    00000055: 	movzbl	(%r14), %eax
    00000059: 	movb	%al, 0x10(%r12)
    0000005e: 	movq	%rbx, %rax
.Ltmp2060:
    00000061: 	movq	%r13, 0x8(%r12)
    00000066: 	movq	%rbp, %rdi
    00000069: 	movb	$0x0, (%rax,%r13)
    0000006e: 	callq	strlen@PLT # Offset: 110
    00000073: 	movq	%rax, %rdx
    00000076: 	movabsq	$0x3fffffffffffffff, %rax
    00000080: 	subq	0x8(%r12), %rax
    00000085: 	cmpq	%rax, %rdx
    00000088: 	ja	.Ltmp2057 # Offset: 136
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movq	%r12, %rdi
    00000090: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 144
    00000095: 	movq	0x8(%rsp), %rax
    0000009a: 	subq	%fs:0x28, %rax
    000000a3: 	jne	.Ltmp2058 # Offset: 163
    000000a5: 	addq	$0x10, %rsp
    000000a9: 	movq	%r12, %rax
    000000ac: 	popq	%rbx
    000000ad: 	popq	%rbp
    000000ae: 	popq	%r12
    000000b0: 	popq	%r13
    000000b2: 	popq	%r14
    000000b4: 	retq # Offset: 180
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp2056:
    000000b8: 	testq	%r13, %r13
    000000bb: 	jne	.Ltmp2059 # Offset: 187
    000000bd: 	movq	%rbx, %rax
    000000c0: 	jmp	.Ltmp2060 # Offset: 192
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2055:
    000000c8: 	movq	%r12, %rdi
    000000cb: 	movq	%rsp, %rsi
    000000ce: 	xorl	%edx, %edx
    000000d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 208
    000000d5: 	movq	%rax, (%r12)
    000000d9: 	movq	%rax, %rdi
    000000dc: 	movq	(%rsp), %rax
    000000e0: 	movq	%rax, 0x10(%r12)
.Ltmp2061:
    000000e5: 	movq	%r13, %rdx
    000000e8: 	movq	%r14, %rsi
    000000eb: 	callq	memcpy@PLT # Offset: 235
    000000f0: 	movq	(%rsp), %r13
    000000f4: 	movq	(%r12), %rax
    000000f8: 	jmp	.Ltmp2060 # Offset: 248
.Ltmp2054:
    000000fd: 	leaq	DATAat0x38158(%rip), %rdi
    00000104: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 260
.Ltmp2057:
    00000109: 	leaq	DATAat0x38182(%rip), %rdi
    00000110: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 272
.Ltmp2058:
    00000115: 	callq	__stack_chk_fail@PLT # Offset: 277
.Ltmp2059:
    0000011a: 	movq	%rbx, %rdi
    0000011d: 	jmp	.Ltmp2061 # Offset: 285
    0000011f: 	endbr64
    00000123: 	movq	%rax, %rbp
    00000126: 	movq	(%r12), %rdi
    0000012a: 	cmpq	%rdi, %rbx
    0000012d: 	je	.Ltmp2062 # Offset: 301
    0000012f: 	movq	0x10(%r12), %rsi
    00000134: 	addq	$0x1, %rsi
    00000138: 	callq	_ZdlPvm@PLT # Offset: 312
.Ltmp2062:
    0000013d: 	movq	%rbp, %rdi
    00000140: 	callq	_Unwind_Resume@PLT # Offset: 320
DWARF CFI Instructions:
    <empty>
End of Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_" after disassembly {
  Number      : 264
  State       : disassembled
  Address     : 0x194a0
  Size        : 0x328
  MaxSize     : 0x330
  Offset      : 0x194a0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0263:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rsi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x18, %rsp
    00000015: 	movq	0x48(%rdi), %r12
    00000019: 	movq	0x28(%rdi), %rsi
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	movq	0x30(%rdi), %rax
    00000031: 	subq	0x38(%rdi), %rax
    00000035: 	movq	%r12, %r13
    00000038: 	sarq	$0x5, %rax
    0000003c: 	subq	%rsi, %r13
    0000003f: 	movq	%r13, %rcx
    00000042: 	sarq	$0x3, %rcx
    00000046: 	cmpq	$0x1, %r12
    0000004a: 	movq	%rcx, %rdx
    0000004d: 	adcq	$-0x1, %rdx
    00000051: 	shlq	$0x4, %rdx
    00000055: 	addq	%rdx, %rax
    00000058: 	movq	0x20(%rdi), %rdx
    0000005c: 	subq	0x10(%rdi), %rdx
    00000060: 	sarq	$0x5, %rdx
    00000064: 	addq	%rdx, %rax
    00000067: 	movabsq	$0x3ffffffffffffff, %rdx
    00000071: 	cmpq	%rdx, %rax
    00000074: 	je	.Ltmp2063 # Offset: 116
    0000007a: 	movq	0x8(%rdi), %rdx
    0000007e: 	movq	%rdi, %rbx
    00000081: 	movq	(%rdi), %rdi
    00000084: 	movq	%r12, %rax
    00000087: 	subq	%rdi, %rax
    0000008a: 	movq	%rdx, %r8
    0000008d: 	sarq	$0x3, %rax
    00000091: 	subq	%rax, %r8
    00000094: 	cmpq	$0x1, %r8
    00000098: 	jbe	.Ltmp2064 # Offset: 152
.Ltmp2075:
    0000009e: 	movl	$0x200, %edi
    000000a3: 	callq	_Znwm@PLT # Offset: 163
    000000a8: 	movq	%rax, 0x8(%r12)
    000000ad: 	movq	0x30(%rbx), %r13
    000000b1: 	movq	0x8(%rbp), %r12
    000000b5: 	leaq	0x10(%r13), %rdi
    000000b9: 	movq	%rdi, (%r13)
    000000bd: 	movq	(%rbp), %r14
    000000c1: 	movq	%r14, %rax
    000000c4: 	addq	%r12, %rax
    000000c7: 	je	.Ltmp2065 # Offset: 199
    000000c9: 	testq	%r14, %r14
    000000cc: 	je	.Ltmp2066 # Offset: 204
.Ltmp2065:
    000000d2: 	movq	%r12, (%rsp)
    000000d6: 	cmpq	$0xf, %r12
    000000da: 	ja	.Ltmp2067 # Offset: 218
    000000e0: 	cmpq	$0x1, %r12
    000000e4: 	jne	.Ltmp2068 # Offset: 228
    000000e6: 	movzbl	(%r14), %eax
    000000ea: 	movb	%al, 0x10(%r13)
.Ltmp2070:
    000000ee: 	movq	%r12, 0x8(%r13)
    000000f2: 	movb	$0x0, (%rdi,%r12)
    000000f7: 	movq	0x48(%rbx), %rdx
    000000fb: 	movq	0x8(%rdx), %rax
    000000ff: 	addq	$0x8, %rdx
    00000103: 	movq	%rdx, %xmm1
    00000108: 	movq	%rax, %xmm0
    0000010d: 	addq	$0x200, %rax
    00000113: 	punpcklqdq	%xmm0, %xmm0
    00000117: 	movups	%xmm0, 0x30(%rbx)
    0000011b: 	movq	%rax, %xmm0
    00000120: 	punpcklqdq	%xmm1, %xmm0
    00000124: 	movups	%xmm0, 0x40(%rbx)
    00000128: 	movq	0x8(%rsp), %rax
    0000012d: 	subq	%fs:0x28, %rax
    00000136: 	jne	.Ltmp2069 # Offset: 310
    0000013c: 	addq	$0x18, %rsp
    00000140: 	popq	%rbx
    00000141: 	popq	%rbp
    00000142: 	popq	%r12
    00000144: 	popq	%r13
    00000146: 	popq	%r14
    00000148: 	popq	%r15
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2068:
    00000150: 	testq	%r12, %r12
    00000153: 	je	.Ltmp2070 # Offset: 339
    00000155: 	jmp	.Ltmp2071 # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2064:
    00000160: 	leaq	0x2(%rcx), %r14
    00000164: 	leaq	(%r14,%r14), %rax
    00000168: 	cmpq	%rax, %rdx
    0000016b: 	ja	.Ltmp2072 # Offset: 363
    00000171: 	testq	%rdx, %rdx
    00000174: 	movl	$0x1, %eax
    00000179: 	cmovneq	%rdx, %rax
    0000017d: 	leaq	0x2(%rdx,%rax), %r15
    00000182: 	movq	%r15, %rax
    00000185: 	shrq	$0x3c, %rax
    00000189: 	jne	.Ltmp2073 # Offset: 393
    0000018f: 	leaq	(,%r15,8), %rdi
    00000197: 	callq	_Znwm@PLT # Offset: 407
    0000019c: 	movq	0x28(%rbx), %rsi
    000001a0: 	movq	%rax, %r12
    000001a3: 	movq	%r15, %rax
    000001a6: 	subq	%r14, %rax
    000001a9: 	shrq	%rax
    000001ac: 	leaq	(%r12,%rax,8), %r14
    000001b0: 	movq	0x48(%rbx), %rax
    000001b4: 	leaq	0x8(%rax), %rdx
    000001b8: 	cmpq	%rsi, %rdx
    000001bb: 	je	.Ltmp2074 # Offset: 443
    000001bd: 	subq	%rsi, %rdx
    000001c0: 	movq	%r14, %rdi
    000001c3: 	callq	memmove@PLT # Offset: 451
.Ltmp2074:
    000001c8: 	movq	0x8(%rbx), %rax
    000001cc: 	movq	(%rbx), %rdi
    000001cf: 	leaq	(,%rax,8), %rsi
    000001d7: 	callq	_ZdlPvm@PLT # Offset: 471
    000001dc: 	movq	%r12, (%rbx)
    000001df: 	movq	%r15, 0x8(%rbx)
.Ltmp2077:
    000001e3: 	movq	(%r14), %rax
    000001e6: 	movq	(%r14), %xmm0
    000001eb: 	leaq	(%r14,%r13), %r12
    000001ef: 	movq	%r14, 0x28(%rbx)
    000001f3: 	movq	%r12, 0x48(%rbx)
    000001f7: 	addq	$0x200, %rax
    000001fd: 	movq	%rax, %xmm2
    00000202: 	punpcklqdq	%xmm2, %xmm0
    00000206: 	movups	%xmm0, 0x18(%rbx)
    0000020a: 	movq	(%r12), %rax
    0000020e: 	movq	(%r12), %xmm0
    00000214: 	addq	$0x200, %rax
    0000021a: 	movq	%rax, %xmm3
    0000021f: 	punpcklqdq	%xmm3, %xmm0
    00000223: 	movups	%xmm0, 0x38(%rbx)
    00000227: 	jmp	.Ltmp2075 # Offset: 551
    0000022c: 	nopl	(%rax) # Size: 4
.Ltmp2067:
    00000230: 	movq	%rsp, %rsi
    00000233: 	xorl	%edx, %edx
    00000235: 	movq	%r13, %rdi
    00000238: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 568
    0000023d: 	movq	%rax, (%r13)
    00000241: 	movq	%rax, %rdi
    00000244: 	movq	(%rsp), %rax
    00000248: 	movq	%rax, 0x10(%r13)
.Ltmp2071:
    0000024c: 	movq	%r12, %rdx
    0000024f: 	movq	%r14, %rsi
    00000252: 	callq	memcpy@PLT # Offset: 594
    00000257: 	movq	(%rsp), %r12
    0000025b: 	movq	(%r13), %rdi
    0000025f: 	jmp	.Ltmp2070 # Offset: 607
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp2072:
    00000268: 	subq	%r14, %rdx
    0000026b: 	addq	$0x8, %r12
    0000026f: 	shrq	%rdx
    00000272: 	leaq	(%rdi,%rdx,8), %r14
    00000276: 	movq	%r12, %rdx
    00000279: 	subq	%rsi, %rdx
    0000027c: 	cmpq	%r14, %rsi
    0000027f: 	jbe	.Ltmp2076 # Offset: 639
    00000281: 	cmpq	%r12, %rsi
    00000284: 	je	.Ltmp2077 # Offset: 644
    0000028a: 	movq	%r14, %rdi
    0000028d: 	callq	memmove@PLT # Offset: 653
    00000292: 	jmp	.Ltmp2077 # Offset: 658
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2076:
    000002a0: 	cmpq	%r12, %rsi
    000002a3: 	je	.Ltmp2077 # Offset: 675
    000002a9: 	leaq	0x8(%r13), %rdi
    000002ad: 	subq	%rdx, %rdi
    000002b0: 	addq	%r14, %rdi
    000002b3: 	callq	memmove@PLT # Offset: 691
    000002b8: 	jmp	.Ltmp2077 # Offset: 696
.Ltmp2066:
    000002bd: 	leaq	DATAat0x38158(%rip), %rdi
    000002c4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 708
    000002c9: 	nopl	(%rax) # Size: 7
.Ltmp2073:
    000002d0: 	shrq	$0x3d, %r15
    000002d4: 	je	.Ltmp2078 # Offset: 724
    000002d6: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 726
.Ltmp2078:
    000002db: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 731
.Ltmp2063:
    000002e0: 	leaq	DATAat0x38198(%rip), %rdi
    000002e7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 743
.Ltmp2069:
    000002ec: 	callq	__stack_chk_fail@PLT # Offset: 748
    000002f1: 	endbr64
    000002f5: 	movq	%rax, %rdi
    000002f8: 	callq	__cxa_begin_catch@PLT # Offset: 760
    000002fd: 	movq	0x48(%rbx), %rax
    00000301: 	movl	$0x200, %esi
    00000306: 	movq	0x8(%rax), %rdi
    0000030a: 	callq	_ZdlPvm@PLT # Offset: 778
    0000030f: 	callq	__cxa_rethrow@PLT # Offset: 783
    00000314: 	endbr64
    00000318: 	movq	%rax, %rbp
    0000031b: 	callq	__cxa_end_catch@PLT # Offset: 795
    00000320: 	movq	%rbp, %rdi
    00000323: 	callq	_Unwind_Resume@PLT # Offset: 803
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_"

Binary Function "_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 265
  State       : disassembled
  Address     : 0x197d0
  Size        : 0x22c
  MaxSize     : 0x230
  Offset      : 0x197d0
  Section     : .text
  Orc Section : .local.text._Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0264:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x381c8(%rip), %r15
    0000000d: 	pushq	%r14
    0000000f: 	movq	%rdi, %r14
    00000012: 	pushq	%r13
    00000014: 	movl	%esi, %r13d
    00000017: 	pushq	%r12
    00000019: 	movq	%rcx, %r12
    0000001c: 	pushq	%rbp
    0000001d: 	movl	%edx, %ebp
    0000001f: 	pushq	%rbx
    00000020: 	movswl	%bp, %ebp
    00000023: 	xorl	%ebx, %ebx
    00000025: 	subq	$0x28, %rsp
    00000029: 	movq	%r8, 0x8(%rsp)
    0000002e: 	movq	%fs:0x28, %rax
    00000037: 	movq	%rax, 0x18(%rsp)
    0000003c: 	xorl	%eax, %eax
    0000003e: 	callq	clock@PLT # Offset: 62
    00000043: 	movq	%rax, start_time(%rip)
    0000004a: 	movl	iterations(%rip), %eax
    00000050: 	testl	%eax, %eax
    00000052: 	jle	.Ltmp2079 # Offset: 82
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp2081:
    00000058: 	movl	%ebp, %edx
    0000005a: 	movl	%r13d, %esi
    0000005d: 	movq	%r14, %rdi
    00000060: 	callq	*%r12 # Offset: 96
    00000063: 	movl	%eax, %r8d
    00000066: 	cvttsd2si	init_value(%rip), %eax
    0000006e: 	imulw	$0x1f40, %ax, %ax
    00000073: 	cmpw	%ax, %r8w
    00000077: 	je	.Ltmp2080 # Offset: 119
    0000007d: 	movq	0x8(%rsp), %rax
    00000082: 	movq	%r15, %rsi
    00000085: 	movl	$0x1, %edi
    0000008a: 	addl	$0x1, %ebx
    0000008d: 	movq	(%rax), %rdx
    00000090: 	xorl	%eax, %eax
    00000092: 	callq	__printf_chk@PLT # Offset: 146
    00000097: 	cmpl	%ebx, iterations(%rip)
    0000009d: 	jg	.Ltmp2081 # Offset: 157
.Ltmp2079:
    0000009f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000a6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000ad: 	subq	$0x20, %rax
    000000b1: 	cmpq	%rax, %rbx
    000000b4: 	je	.Ltmp2082 # Offset: 180
    000000ba: 	movq	0x8(%rsp), %rax
    000000bf: 	leaq	0x10(%rbx), %rdi
    000000c3: 	movq	%rdi, (%rbx)
    000000c6: 	movq	(%rax), %rbp
    000000c9: 	movq	0x8(%rax), %r12
    000000cd: 	movq	%rbp, %rax
    000000d0: 	addq	%r12, %rax
    000000d3: 	je	.Ltmp2083 # Offset: 211
    000000d5: 	testq	%rbp, %rbp
    000000d8: 	je	.Ltmp2084 # Offset: 216
.Ltmp2083:
    000000de: 	movq	%r12, 0x10(%rsp)
    000000e3: 	cmpq	$0xf, %r12
    000000e7: 	ja	.Ltmp2085 # Offset: 231
    000000ed: 	cmpq	$0x1, %r12
    000000f1: 	jne	.Ltmp2086 # Offset: 241
    000000f7: 	movzbl	(%rbp), %eax
    000000fb: 	movb	%al, 0x10(%rbx)
.Ltmp2089:
    000000fe: 	movq	%r12, 0x8(%rbx)
    00000102: 	movb	$0x0, (%rdi,%r12)
    00000107: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000010e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000115: 	addq	$0x20, %rax
    00000119: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000120: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000127: 	je	.Ltmp2087 # Offset: 295
.Ltmp2090:
    0000012d: 	movq	-0x20(%rax), %rbp
    00000131: 	callq	clock@PLT # Offset: 305
    00000136: 	movq	%rax, end_time(%rip)
    0000013d: 	movq	0x18(%rsp), %rdx
    00000142: 	subq	%fs:0x28, %rdx
    0000014b: 	jne	.Ltmp2088 # Offset: 331
    00000151: 	subq	start_time(%rip), %rax
    00000158: 	pxor	%xmm0, %xmm0
    0000015c: 	movq	%rbp, %rdi
    0000015f: 	cvtsi2sd	%rax, %xmm0
    00000164: 	divsd	DATAat0x38a48(%rip), %xmm0
    0000016c: 	addq	$0x28, %rsp
    00000170: 	popq	%rbx
    00000171: 	popq	%rbp
    00000172: 	popq	%r12
    00000174: 	popq	%r13
    00000176: 	popq	%r14
    00000178: 	popq	%r15
    0000017a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 378
    0000017f: 	nop # Size: 1
.Ltmp2080:
    00000180: 	addl	$0x1, %ebx
    00000183: 	cmpl	%ebx, iterations(%rip)
    00000189: 	jg	.Ltmp2081 # Offset: 393
    0000018f: 	jmp	.Ltmp2079 # Offset: 399
    00000194: 	nopl	(%rax) # Size: 4
.Ltmp2085:
    00000198: 	movq	%rbx, %rdi
    0000019b: 	leaq	0x10(%rsp), %rsi
    000001a0: 	xorl	%edx, %edx
    000001a2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 418
    000001a7: 	movq	%rax, (%rbx)
    000001aa: 	movq	%rax, %rdi
    000001ad: 	movq	0x10(%rsp), %rax
    000001b2: 	movq	%rax, 0x10(%rbx)
.Ltmp2091:
    000001b6: 	movq	%r12, %rdx
    000001b9: 	movq	%rbp, %rsi
    000001bc: 	callq	memcpy@PLT # Offset: 444
    000001c1: 	movq	0x10(%rsp), %r12
    000001c6: 	movq	(%rbx), %rdi
    000001c9: 	jmp	.Ltmp2089 # Offset: 457
    000001ce: 	nop # Size: 2
.Ltmp2082:
    000001d0: 	movq	0x8(%rsp), %rsi
    000001d5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001dc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 476
    000001e1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001e8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001ef: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001f6: 	jne	.Ltmp2090 # Offset: 502
.Ltmp2087:
    000001fc: 	movq	-0x8(%rdx), %rax
    00000200: 	addq	$0x200, %rax
    00000206: 	jmp	.Ltmp2090 # Offset: 518
    0000020b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2086:
    00000210: 	testq	%r12, %r12
    00000213: 	je	.Ltmp2089 # Offset: 531
    00000219: 	jmp	.Ltmp2091 # Offset: 537
.Ltmp2088:
    0000021b: 	callq	__stack_chk_fail@PLT # Offset: 539
.Ltmp2084:
    00000220: 	leaq	DATAat0x38158(%rip), %rdi
    00000227: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 551
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_one_loop3IsPFsPKsisEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 266
  State       : disassembled
  Address     : 0x19a00
  Size        : 0x22c
  MaxSize     : 0x230
  Offset      : 0x19a00
  Section     : .text
  Orc Section : .local.text._Z14test_one_loop3IsPFsPKsisEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0265:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x381c8(%rip), %r15
    0000000d: 	pushq	%r14
    0000000f: 	movq	%rdi, %r14
    00000012: 	pushq	%r13
    00000014: 	movl	%esi, %r13d
    00000017: 	pushq	%r12
    00000019: 	movq	%rcx, %r12
    0000001c: 	pushq	%rbp
    0000001d: 	movl	%edx, %ebp
    0000001f: 	pushq	%rbx
    00000020: 	movswl	%bp, %ebp
    00000023: 	xorl	%ebx, %ebx
    00000025: 	subq	$0x28, %rsp
    00000029: 	movq	%r8, 0x8(%rsp)
    0000002e: 	movq	%fs:0x28, %rax
    00000037: 	movq	%rax, 0x18(%rsp)
    0000003c: 	xorl	%eax, %eax
    0000003e: 	callq	clock@PLT # Offset: 62
    00000043: 	movq	%rax, start_time(%rip)
    0000004a: 	movl	iterations(%rip), %eax
    00000050: 	testl	%eax, %eax
    00000052: 	jle	.Ltmp2092 # Offset: 82
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp2094:
    00000058: 	movl	%ebp, %edx
    0000005a: 	movl	%r13d, %esi
    0000005d: 	movq	%r14, %rdi
    00000060: 	callq	*%r12 # Offset: 96
    00000063: 	movl	%eax, %r8d
    00000066: 	cvttsd2si	init_value(%rip), %eax
    0000006e: 	imulw	$0x1f40, %ax, %ax
    00000073: 	cmpw	%ax, %r8w
    00000077: 	je	.Ltmp2093 # Offset: 119
    0000007d: 	movq	0x8(%rsp), %rax
    00000082: 	movq	%r15, %rsi
    00000085: 	movl	$0x1, %edi
    0000008a: 	addl	$0x1, %ebx
    0000008d: 	movq	(%rax), %rdx
    00000090: 	xorl	%eax, %eax
    00000092: 	callq	__printf_chk@PLT # Offset: 146
    00000097: 	cmpl	%ebx, iterations(%rip)
    0000009d: 	jg	.Ltmp2094 # Offset: 157
.Ltmp2092:
    0000009f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000a6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000ad: 	subq	$0x20, %rax
    000000b1: 	cmpq	%rax, %rbx
    000000b4: 	je	.Ltmp2095 # Offset: 180
    000000ba: 	movq	0x8(%rsp), %rax
    000000bf: 	leaq	0x10(%rbx), %rdi
    000000c3: 	movq	%rdi, (%rbx)
    000000c6: 	movq	(%rax), %rbp
    000000c9: 	movq	0x8(%rax), %r12
    000000cd: 	movq	%rbp, %rax
    000000d0: 	addq	%r12, %rax
    000000d3: 	je	.Ltmp2096 # Offset: 211
    000000d5: 	testq	%rbp, %rbp
    000000d8: 	je	.Ltmp2097 # Offset: 216
.Ltmp2096:
    000000de: 	movq	%r12, 0x10(%rsp)
    000000e3: 	cmpq	$0xf, %r12
    000000e7: 	ja	.Ltmp2098 # Offset: 231
    000000ed: 	cmpq	$0x1, %r12
    000000f1: 	jne	.Ltmp2099 # Offset: 241
    000000f7: 	movzbl	(%rbp), %eax
    000000fb: 	movb	%al, 0x10(%rbx)
.Ltmp2102:
    000000fe: 	movq	%r12, 0x8(%rbx)
    00000102: 	movb	$0x0, (%rdi,%r12)
    00000107: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000010e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000115: 	addq	$0x20, %rax
    00000119: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000120: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000127: 	je	.Ltmp2100 # Offset: 295
.Ltmp2103:
    0000012d: 	movq	-0x20(%rax), %rbp
    00000131: 	callq	clock@PLT # Offset: 305
    00000136: 	movq	%rax, end_time(%rip)
    0000013d: 	movq	0x18(%rsp), %rdx
    00000142: 	subq	%fs:0x28, %rdx
    0000014b: 	jne	.Ltmp2101 # Offset: 331
    00000151: 	subq	start_time(%rip), %rax
    00000158: 	pxor	%xmm0, %xmm0
    0000015c: 	movq	%rbp, %rdi
    0000015f: 	cvtsi2sd	%rax, %xmm0
    00000164: 	divsd	DATAat0x38a48(%rip), %xmm0
    0000016c: 	addq	$0x28, %rsp
    00000170: 	popq	%rbx
    00000171: 	popq	%rbp
    00000172: 	popq	%r12
    00000174: 	popq	%r13
    00000176: 	popq	%r14
    00000178: 	popq	%r15
    0000017a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 378
    0000017f: 	nop # Size: 1
.Ltmp2093:
    00000180: 	addl	$0x1, %ebx
    00000183: 	cmpl	%ebx, iterations(%rip)
    00000189: 	jg	.Ltmp2094 # Offset: 393
    0000018f: 	jmp	.Ltmp2092 # Offset: 399
    00000194: 	nopl	(%rax) # Size: 4
.Ltmp2098:
    00000198: 	movq	%rbx, %rdi
    0000019b: 	leaq	0x10(%rsp), %rsi
    000001a0: 	xorl	%edx, %edx
    000001a2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 418
    000001a7: 	movq	%rax, (%rbx)
    000001aa: 	movq	%rax, %rdi
    000001ad: 	movq	0x10(%rsp), %rax
    000001b2: 	movq	%rax, 0x10(%rbx)
.Ltmp2104:
    000001b6: 	movq	%r12, %rdx
    000001b9: 	movq	%rbp, %rsi
    000001bc: 	callq	memcpy@PLT # Offset: 444
    000001c1: 	movq	0x10(%rsp), %r12
    000001c6: 	movq	(%rbx), %rdi
    000001c9: 	jmp	.Ltmp2102 # Offset: 457
    000001ce: 	nop # Size: 2
.Ltmp2095:
    000001d0: 	movq	0x8(%rsp), %rsi
    000001d5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001dc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 476
    000001e1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001e8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001ef: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001f6: 	jne	.Ltmp2103 # Offset: 502
.Ltmp2100:
    000001fc: 	movq	-0x8(%rdx), %rax
    00000200: 	addq	$0x200, %rax
    00000206: 	jmp	.Ltmp2103 # Offset: 518
    0000020b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2099:
    00000210: 	testq	%r12, %r12
    00000213: 	je	.Ltmp2102 # Offset: 531
    00000219: 	jmp	.Ltmp2104 # Offset: 537
.Ltmp2101:
    0000021b: 	callq	__stack_chk_fail@PLT # Offset: 539
.Ltmp2097:
    00000220: 	leaq	DATAat0x38158(%rip), %rdi
    00000227: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 551
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_one_loop3IsPFsPKsisEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIsEvv" after disassembly {
  Number      : 267
  State       : disassembled
  Address     : 0x19c30
  Size        : 0x2e1e
  MaxSize     : 0x2e20
  Offset      : 0x19c30
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIsEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0266:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x1000, %rsp
    00000015: 	orq	$0x0, (%rsp)
    0000001a: 	subq	$0x1000, %rsp
    00000021: 	orq	$0x0, (%rsp)
    00000026: 	subq	$0x1000, %rsp
    0000002d: 	orq	$0x0, (%rsp)
    00000032: 	subq	$0xf78, %rsp
    00000039: 	movq	%fs:0x28, %rax
    00000042: 	movq	%rax, 0x3f68(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	leaq	0x70(%rsp), %rax
    00000051: 	movl	$0x31746e69, 0x70(%rsp)
    00000059: 	leaq	0xe0(%rsp), %rbp
    00000061: 	movq	%rax, 0x40(%rsp)
    00000066: 	leaq	0x3f60(%rsp), %rdx
    0000006e: 	movq	%rax, 0x60(%rsp)
    00000073: 	movl	$0x5f36, %eax
    00000078: 	movw	%ax, 0x74(%rsp)
    0000007d: 	cvttsd2si	init_value(%rip), %eax
    00000085: 	movb	$0x74, 0x76(%rsp)
    0000008a: 	movq	$0x7, 0x68(%rsp)
    00000093: 	movb	$0x0, 0x77(%rsp)
    00000098: 	movd	%eax, %xmm0
    0000009c: 	movq	%rbp, %rax
    0000009f: 	punpcklwd	%xmm0, %xmm0
    000000a3: 	pshufd	$0x0, %xmm0, %xmm0
    000000a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2105:
    000000b0: 	movaps	%xmm0, (%rax)
    000000b3: 	addq	$0x10, %rax
    000000b7: 	cmpq	%rax, %rdx
    000000ba: 	jne	.Ltmp2105 # Offset: 186
    000000bc: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm1
    000000c4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000cb: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm2
    000000d3: 	movq	_Z7gLabelsB5cxx11+56(%rip), %r15
    000000da: 	movhlps	%xmm1, %xmm5
    000000dd: 	movq	%rax, 0x10(%rsp)
    000000e2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    000000e9: 	movq	%xmm5, %rbx
    000000ee: 	movaps	%xmm2, 0x30(%rsp)
    000000f3: 	movq	%xmm2, %r12
    000000f8: 	leaq	0x8(%rbx), %r13
    000000fc: 	movq	%rax, 0x8(%rsp)
    00000101: 	movq	%r13, (%rsp)
    00000105: 	movaps	%xmm1, 0x20(%rsp)
    0000010a: 	movq	%xmm5, 0x48(%rsp)
    00000110: 	movq	%xmm1, 0x18(%rsp)
    00000116: 	cmpq	%r13, %rax
    00000119: 	jbe	.Ltmp2106 # Offset: 281
    0000011b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2109:
    00000120: 	movq	(%rsp), %rax
    00000124: 	movq	(%rax), %r14
    00000127: 	leaq	0x200(%r14), %rbx
    0000012e: 	nop # Size: 2
.Ltmp2108:
    00000130: 	movq	(%r14), %rdi
    00000133: 	leaq	0x10(%r14), %rdx
    00000137: 	cmpq	%rdx, %rdi
    0000013a: 	je	.Ltmp2107 # Offset: 314
    00000140: 	movq	0x10(%r14), %rax
    00000144: 	addq	$0x20, %r14
    00000148: 	leaq	0x1(%rax), %rsi
    0000014c: 	callq	_ZdlPvm@PLT # Offset: 332
    00000151: 	cmpq	%rbx, %r14
    00000154: 	jne	.Ltmp2108 # Offset: 340
    00000156: 	addq	$0x8, (%rsp)
    0000015b: 	movq	(%rsp), %rax
    0000015f: 	cmpq	%rax, 0x8(%rsp)
    00000164: 	ja	.Ltmp2109 # Offset: 356
.Ltmp2106:
    00000166: 	movq	0x48(%rsp), %rbx
    0000016b: 	cmpq	%rbx, 0x8(%rsp)
    00000170: 	jne	.Ltmp2110 # Offset: 368
    00000172: 	jmp	.Ltmp2111 # Offset: 370
    00000177: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2113:
    00000180: 	movq	(%r12), %rdi
    00000184: 	leaq	0x10(%r12), %rax
    00000189: 	cmpq	%rax, %rdi
    0000018c: 	je	.Ltmp2112 # Offset: 396
    0000018e: 	movq	0x10(%r12), %rax
    00000193: 	leaq	0x1(%rax), %rsi
    00000197: 	callq	_ZdlPvm@PLT # Offset: 407
.Ltmp2112:
    0000019c: 	addq	$0x20, %r12
.Ltmp2110:
    000001a0: 	cmpq	0x18(%rsp), %r12
    000001a5: 	jne	.Ltmp2113 # Offset: 421
    000001a7: 	cmpq	%r15, 0x10(%rsp)
    000001ac: 	je	.Ltmp2114 # Offset: 428
    000001ae: 	nop # Size: 2
.Ltmp2116:
    000001b0: 	movq	(%r15), %rdi
    000001b3: 	leaq	0x10(%r15), %rax
    000001b7: 	cmpq	%rax, %rdi
    000001ba: 	je	.Ltmp2115 # Offset: 442
    000001bc: 	movq	0x10(%r15), %rax
    000001c0: 	leaq	0x1(%rax), %rsi
    000001c4: 	callq	_ZdlPvm@PLT # Offset: 452
.Ltmp2115:
    000001c9: 	addq	$0x20, %r15
    000001cd: 	cmpq	%r15, 0x10(%rsp)
    000001d2: 	jne	.Ltmp2116 # Offset: 466
.Ltmp2114:
    000001d4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    000001db: 	leaq	0x8(%rax), %rbx
    000001df: 	cmpq	%r13, %rbx
    000001e2: 	jbe	.Ltmp2117 # Offset: 482
    000001e4: 	nopl	(%rax) # Size: 4
.Ltmp2118:
    000001e8: 	movq	(%r13), %rdi
    000001ec: 	movl	$0x200, %esi
    000001f1: 	addq	$0x8, %r13
    000001f5: 	callq	_ZdlPvm@PLT # Offset: 501
    000001fa: 	cmpq	%r13, %rbx
    000001fd: 	ja	.Ltmp2118 # Offset: 509
.Ltmp2117:
    000001ff: 	movq	0x60(%rsp), %r13
    00000204: 	movq	0x68(%rsp), %r12
    00000209: 	leaq	0xd0(%rsp), %rbx
    00000211: 	movdqa	0x30(%rsp), %xmm3
    00000217: 	movdqa	0x20(%rsp), %xmm4
    0000021d: 	movq	%rbx, 0xc0(%rsp)
    00000225: 	movq	%r13, %rax
    00000228: 	addq	%r12, %rax
    0000022b: 	movaps	%xmm3, _Z7gLabelsB5cxx11+48(%rip)
    00000232: 	movaps	%xmm4, _Z7gLabelsB5cxx11+64(%rip)
    00000239: 	je	.Ltmp2119 # Offset: 569
    0000023b: 	testq	%r13, %r13
    0000023e: 	je	.Ltmp2120 # Offset: 574
.Ltmp2119:
    00000244: 	movq	%r12, 0x58(%rsp)
    00000249: 	cmpq	$0xf, %r12
    0000024d: 	ja	.Ltmp2121 # Offset: 589
    00000253: 	cmpq	$0x1, %r12
    00000257: 	jne	.Ltmp2122 # Offset: 599
    0000025d: 	movzbl	(%r13), %eax
    00000262: 	movb	%al, 0xd0(%rsp)
    00000269: 	movq	%rbx, %rax
.Ltmp2290:
    0000026c: 	movq	%r12, 0xc8(%rsp)
    00000274: 	movb	$0x0, (%rax,%r12)
    00000279: 	movabsq	$0x3fffffffffffffff, %rax
    00000283: 	subq	0xc8(%rsp), %rax
    0000028b: 	cmpq	$0x14, %rax
    0000028f: 	jbe	.Ltmp2123 # Offset: 655
    00000295: 	leaq	0xc0(%rsp), %r12
    0000029d: 	movl	$0x15, %edx
    000002a2: 	leaq	DATAat0x381d8(%rip), %rsi
    000002a9: 	movq	%r12, %rdi
    000002ac: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 684
    000002b1: 	cvttsd2si	init_value(%rip), %edx
    000002b9: 	movq	%r12, %r8
    000002bc: 	movl	$0x1f40, %esi
    000002c1: 	movq	%rbp, %rdi
    000002c4: 	leaq	_Z17test_for_loop_optIsET_PKS0_iS0_(%rip), %r15
    000002cb: 	movq	%r15, %rcx
    000002ce: 	movswl	%dx, %edx
    000002d1: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 721
    000002d6: 	movq	0xc0(%rsp), %rdi
    000002de: 	cmpq	%rbx, %rdi
    000002e1: 	je	.Ltmp2124 # Offset: 737
    000002e3: 	movq	0xd0(%rsp), %rax
    000002eb: 	leaq	0x1(%rax), %rsi
    000002ef: 	callq	_ZdlPvm@PLT # Offset: 751
.Ltmp2124:
    000002f4: 	movq	0x60(%rsp), %r14
    000002f9: 	movq	0x68(%rsp), %r13
    000002fe: 	movq	%rbx, 0xc0(%rsp)
    00000306: 	movq	%r14, %rax
    00000309: 	addq	%r13, %rax
    0000030c: 	je	.Ltmp2125 # Offset: 780
    0000030e: 	testq	%r14, %r14
    00000311: 	je	.Ltmp2126 # Offset: 785
.Ltmp2125:
    00000317: 	movq	%r13, 0x58(%rsp)
    0000031c: 	cmpq	$0xf, %r13
    00000320: 	ja	.Ltmp2127 # Offset: 800
    00000326: 	cmpq	$0x1, %r13
    0000032a: 	jne	.Ltmp2128 # Offset: 810
    00000330: 	movzbl	(%r14), %eax
    00000334: 	movb	%al, 0xd0(%rsp)
    0000033b: 	movq	%rbx, %rax
.Ltmp2296:
    0000033e: 	movq	%r13, 0xc8(%rsp)
    00000346: 	movb	$0x0, (%rax,%r13)
    0000034b: 	movabsq	$0x3fffffffffffffff, %rax
    00000355: 	subq	0xc8(%rsp), %rax
    0000035d: 	cmpq	$0x16, %rax
    00000361: 	jbe	.Ltmp2129 # Offset: 865
    00000367: 	movl	$0x17, %edx
    0000036c: 	leaq	DATAat0x381ee(%rip), %rsi
    00000373: 	movq	%r12, %rdi
    00000376: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 886
    0000037b: 	cvttsd2si	init_value(%rip), %edx
    00000383: 	movq	%r12, %r8
    00000386: 	movl	$0x1f40, %esi
    0000038b: 	movq	%rbp, %rdi
    0000038e: 	leaq	_Z19test_while_loop_optIsET_PKS0_iS0_(%rip), %rcx
    00000395: 	movswl	%dx, %edx
    00000398: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 920
    0000039d: 	movq	0xc0(%rsp), %rdi
    000003a5: 	cmpq	%rbx, %rdi
    000003a8: 	je	.Ltmp2130 # Offset: 936
    000003aa: 	movq	0xd0(%rsp), %rax
    000003b2: 	leaq	0x1(%rax), %rsi
    000003b6: 	callq	_ZdlPvm@PLT # Offset: 950
.Ltmp2130:
    000003bb: 	movq	0x60(%rsp), %r14
    000003c0: 	movq	0x68(%rsp), %r13
    000003c5: 	movq	%rbx, 0xc0(%rsp)
    000003cd: 	movq	%r14, %rax
    000003d0: 	addq	%r13, %rax
    000003d3: 	je	.Ltmp2131 # Offset: 979
    000003d5: 	testq	%r14, %r14
    000003d8: 	je	.Ltmp2132 # Offset: 984
.Ltmp2131:
    000003de: 	movq	%r13, 0x58(%rsp)
    000003e3: 	cmpq	$0xf, %r13
    000003e7: 	ja	.Ltmp2133 # Offset: 999
    000003ed: 	cmpq	$0x1, %r13
    000003f1: 	jne	.Ltmp2134 # Offset: 1009
    000003f7: 	movzbl	(%r14), %eax
    000003fb: 	movb	%al, 0xd0(%rsp)
    00000402: 	movq	%rbx, %rax
.Ltmp2294:
    00000405: 	movq	%r13, 0xc8(%rsp)
    0000040d: 	movb	$0x0, (%rax,%r13)
    00000412: 	movabsq	$0x3fffffffffffffff, %rax
    0000041c: 	subq	0xc8(%rsp), %rax
    00000424: 	cmpq	$0x13, %rax
    00000428: 	jbe	.Ltmp2135 # Offset: 1064
    0000042e: 	movl	$0x14, %edx
    00000433: 	leaq	DATAat0x38206(%rip), %rsi
    0000043a: 	movq	%r12, %rdi
    0000043d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1085
    00000442: 	cvttsd2si	init_value(%rip), %edx
    0000044a: 	movq	%r12, %r8
    0000044d: 	movl	$0x1f40, %esi
    00000452: 	movq	%rbp, %rdi
    00000455: 	leaq	_Z16test_do_loop_optIsET_PKS0_iS0_(%rip), %rcx
    0000045c: 	movswl	%dx, %edx
    0000045f: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1119
    00000464: 	movq	0xc0(%rsp), %rdi
    0000046c: 	cmpq	%rbx, %rdi
    0000046f: 	je	.Ltmp2136 # Offset: 1135
    00000471: 	movq	0xd0(%rsp), %rax
    00000479: 	leaq	0x1(%rax), %rsi
    0000047d: 	callq	_ZdlPvm@PLT # Offset: 1149
.Ltmp2136:
    00000482: 	movq	0x60(%rsp), %r14
    00000487: 	movq	0x68(%rsp), %r13
    0000048c: 	movq	%rbx, 0xc0(%rsp)
    00000494: 	movq	%r14, %rax
    00000497: 	addq	%r13, %rax
    0000049a: 	je	.Ltmp2137 # Offset: 1178
    0000049c: 	testq	%r14, %r14
    0000049f: 	je	.Ltmp2138 # Offset: 1183
.Ltmp2137:
    000004a5: 	movq	%r13, 0x58(%rsp)
    000004aa: 	cmpq	$0xf, %r13
    000004ae: 	ja	.Ltmp2139 # Offset: 1198
    000004b4: 	cmpq	$0x1, %r13
    000004b8: 	jne	.Ltmp2140 # Offset: 1208
    000004be: 	movzbl	(%r14), %eax
    000004c2: 	movb	%al, 0xd0(%rsp)
    000004c9: 	movq	%rbx, %rax
.Ltmp2304:
    000004cc: 	movq	%r13, 0xc8(%rsp)
    000004d4: 	movb	$0x0, (%rax,%r13)
    000004d9: 	movabsq	$0x3fffffffffffffff, %rax
    000004e3: 	subq	0xc8(%rsp), %rax
    000004eb: 	cmpq	$0x15, %rax
    000004ef: 	jbe	.Ltmp2141 # Offset: 1263
    000004f5: 	movl	$0x16, %edx
    000004fa: 	leaq	DATAat0x3821b(%rip), %rsi
    00000501: 	movq	%r12, %rdi
    00000504: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1284
    00000509: 	cvttsd2si	init_value(%rip), %edx
    00000511: 	movq	%r12, %r8
    00000514: 	movl	$0x1f40, %esi
    00000519: 	movq	%rbp, %rdi
    0000051c: 	leaq	_Z18test_goto_loop_optIsET_PKS0_iS0_(%rip), %rcx
    00000523: 	movswl	%dx, %edx
    00000526: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1318
    0000052b: 	movq	0xc0(%rsp), %rdi
    00000533: 	cmpq	%rbx, %rdi
    00000536: 	je	.Ltmp2142 # Offset: 1334
    00000538: 	movq	0xd0(%rsp), %rax
    00000540: 	leaq	0x1(%rax), %rsi
    00000544: 	callq	_ZdlPvm@PLT # Offset: 1348
.Ltmp2142:
    00000549: 	leaq	0x60(%rsp), %r13
    0000054e: 	leaq	DATAat0x38232(%rip), %rdx
    00000555: 	movq	%r12, %rdi
    00000558: 	movq	%r13, %rsi
    0000055b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1371
    00000560: 	cvttsd2si	init_value(%rip), %edx
    00000568: 	movq	%r12, %r8
    0000056b: 	movl	$0x1f40, %esi
    00000570: 	movq	%rbp, %rdi
    00000573: 	leaq	_Z19test_for_loop_paramIsET_PKS0_iS0_(%rip), %rcx
    0000057a: 	movswl	%dx, %edx
    0000057d: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1405
    00000582: 	movq	0xc0(%rsp), %rdi
    0000058a: 	cmpq	%rbx, %rdi
    0000058d: 	je	.Ltmp2143 # Offset: 1421
    0000058f: 	movq	0xd0(%rsp), %rax
    00000597: 	leaq	0x1(%rax), %rsi
    0000059b: 	callq	_ZdlPvm@PLT # Offset: 1435
.Ltmp2143:
    000005a0: 	movq	0x60(%rsp), %rax
    000005a5: 	movq	0x68(%rsp), %r14
    000005aa: 	movq	%rbx, 0xc0(%rsp)
    000005b2: 	movq	%rax, %rcx
    000005b5: 	movq	%rax, (%rsp)
    000005b9: 	addq	%r14, %rcx
    000005bc: 	je	.Ltmp2144 # Offset: 1468
    000005be: 	testq	%rax, %rax
    000005c1: 	je	.Ltmp2145 # Offset: 1473
.Ltmp2144:
    000005c7: 	movq	%r14, 0x58(%rsp)
    000005cc: 	cmpq	$0xf, %r14
    000005d0: 	ja	.Ltmp2146 # Offset: 1488
    000005d6: 	cmpq	$0x1, %r14
    000005da: 	jne	.Ltmp2147 # Offset: 1498
    000005e0: 	movq	(%rsp), %rax
    000005e4: 	movzbl	(%rax), %eax
    000005e7: 	movb	%al, 0xd0(%rsp)
    000005ee: 	movq	%rbx, %rax
.Ltmp2302:
    000005f1: 	movq	%r14, 0xc8(%rsp)
    000005f9: 	movb	$0x0, (%rax,%r14)
    000005fe: 	movabsq	$0x3fffffffffffffff, %rax
    00000608: 	subq	0xc8(%rsp), %rax
    00000610: 	cmpq	$0x17, %rax
    00000614: 	jbe	.Ltmp2148 # Offset: 1556
    0000061a: 	movl	$0x18, %edx
    0000061f: 	leaq	DATAat0x3824a(%rip), %rsi
    00000626: 	movq	%r12, %rdi
    00000629: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1577
    0000062e: 	cvttsd2si	init_value(%rip), %edx
    00000636: 	movq	%r12, %r8
    00000639: 	movl	$0x1f40, %esi
    0000063e: 	movq	%rbp, %rdi
    00000641: 	leaq	_Z20test_for_loop_param2IsET_PKS0_iS0_(%rip), %rcx
    00000648: 	movswl	%dx, %edx
    0000064b: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1611
    00000650: 	movq	0xc0(%rsp), %rdi
    00000658: 	cmpq	%rbx, %rdi
    0000065b: 	je	.Ltmp2149 # Offset: 1627
    0000065d: 	movq	0xd0(%rsp), %rax
    00000665: 	leaq	0x1(%rax), %rsi
    00000669: 	callq	_ZdlPvm@PLT # Offset: 1641
.Ltmp2149:
    0000066e: 	leaq	DATAat0x38263(%rip), %rdx
    00000675: 	movq	%r13, %rsi
    00000678: 	movq	%r12, %rdi
    0000067b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1659
    00000680: 	cvttsd2si	init_value(%rip), %edx
    00000688: 	movq	%r12, %r8
    0000068b: 	movl	$0x1f40, %esi
    00000690: 	movq	%rbp, %rdi
    00000693: 	leaq	_Z20test_for_loop_param3IsET_PKS0_iS0_(%rip), %rcx
    0000069a: 	movswl	%dx, %edx
    0000069d: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1693
    000006a2: 	movq	0xc0(%rsp), %rdi
    000006aa: 	cmpq	%rbx, %rdi
    000006ad: 	je	.Ltmp2150 # Offset: 1709
    000006af: 	movq	0xd0(%rsp), %rax
    000006b7: 	leaq	0x1(%rax), %rsi
    000006bb: 	callq	_ZdlPvm@PLT # Offset: 1723
.Ltmp2150:
    000006c0: 	movq	0x60(%rsp), %rax
    000006c5: 	movq	0x68(%rsp), %r14
    000006ca: 	movq	%rbx, 0xc0(%rsp)
    000006d2: 	movq	%rax, %rcx
    000006d5: 	movq	%rax, (%rsp)
    000006d9: 	addq	%r14, %rcx
    000006dc: 	je	.Ltmp2151 # Offset: 1756
    000006de: 	testq	%rax, %rax
    000006e1: 	je	.Ltmp2152 # Offset: 1761
.Ltmp2151:
    000006e7: 	movq	%r14, 0x58(%rsp)
    000006ec: 	cmpq	$0xf, %r14
    000006f0: 	ja	.Ltmp2153 # Offset: 1776
    000006f6: 	cmpq	$0x1, %r14
    000006fa: 	jne	.Ltmp2154 # Offset: 1786
    00000700: 	movq	(%rsp), %rax
    00000704: 	movzbl	(%rax), %eax
    00000707: 	movb	%al, 0xd0(%rsp)
    0000070e: 	movq	%rbx, %rax
.Ltmp2300:
    00000711: 	movq	%r14, 0xc8(%rsp)
    00000719: 	movb	$0x0, (%rax,%r14)
    0000071e: 	movabsq	$0x3fffffffffffffff, %rax
    00000728: 	subq	0xc8(%rsp), %rax
    00000730: 	cmpq	$0x18, %rax
    00000734: 	jbe	.Ltmp2155 # Offset: 1844
    0000073a: 	movl	$0x19, %edx
    0000073f: 	leaq	DATAat0x3827c(%rip), %rsi
    00000746: 	movq	%r12, %rdi
    00000749: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1865
    0000074e: 	cvttsd2si	init_value(%rip), %edx
    00000756: 	movq	%r12, %r8
    00000759: 	movl	$0x1f40, %esi
    0000075e: 	movq	%rbp, %rdi
    00000761: 	leaq	_Z21test_while_loop_paramIsET_PKS0_iS0_(%rip), %rcx
    00000768: 	movswl	%dx, %edx
    0000076b: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1899
    00000770: 	movq	0xc0(%rsp), %rdi
    00000778: 	cmpq	%rbx, %rdi
    0000077b: 	je	.Ltmp2156 # Offset: 1915
    0000077d: 	movq	0xd0(%rsp), %rax
    00000785: 	leaq	0x1(%rax), %rsi
    00000789: 	callq	_ZdlPvm@PLT # Offset: 1929
.Ltmp2156:
    0000078e: 	movq	0x60(%rsp), %rax
    00000793: 	movq	0x68(%rsp), %r14
    00000798: 	movq	%rbx, 0xc0(%rsp)
    000007a0: 	movq	%rax, %rcx
    000007a3: 	movq	%rax, (%rsp)
    000007a7: 	addq	%r14, %rcx
    000007aa: 	je	.Ltmp2157 # Offset: 1962
    000007ac: 	testq	%rax, %rax
    000007af: 	je	.Ltmp2158 # Offset: 1967
.Ltmp2157:
    000007b5: 	movq	%r14, 0x58(%rsp)
    000007ba: 	cmpq	$0xf, %r14
    000007be: 	ja	.Ltmp2159 # Offset: 1982
    000007c4: 	cmpq	$0x1, %r14
    000007c8: 	jne	.Ltmp2160 # Offset: 1992
    000007ce: 	movq	(%rsp), %rax
    000007d2: 	movzbl	(%rax), %eax
    000007d5: 	movb	%al, 0xd0(%rsp)
    000007dc: 	movq	%rbx, %rax
.Ltmp2298:
    000007df: 	movq	%r14, 0xc8(%rsp)
    000007e7: 	movb	$0x0, (%rax,%r14)
    000007ec: 	movabsq	$0x3fffffffffffffff, %rax
    000007f6: 	subq	0xc8(%rsp), %rax
    000007fe: 	cmpq	$0x19, %rax
    00000802: 	jbe	.Ltmp2161 # Offset: 2050
    00000808: 	movl	$0x1a, %edx
    0000080d: 	leaq	DATAat0x38296(%rip), %rsi
    00000814: 	movq	%r12, %rdi
    00000817: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2071
    0000081c: 	cvttsd2si	init_value(%rip), %edx
    00000824: 	movq	%r12, %r8
    00000827: 	movl	$0x1f40, %esi
    0000082c: 	movq	%rbp, %rdi
    0000082f: 	leaq	_Z22test_while_loop_param2IsET_PKS0_iS0_(%rip), %rcx
    00000836: 	movswl	%dx, %edx
    00000839: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2105
    0000083e: 	movq	0xc0(%rsp), %rdi
    00000846: 	cmpq	%rbx, %rdi
    00000849: 	je	.Ltmp2162 # Offset: 2121
    0000084b: 	movq	0xd0(%rsp), %rax
    00000853: 	leaq	0x1(%rax), %rsi
    00000857: 	callq	_ZdlPvm@PLT # Offset: 2135
.Ltmp2162:
    0000085c: 	leaq	DATAat0x382b1(%rip), %rdx
    00000863: 	movq	%r13, %rsi
    00000866: 	movq	%r12, %rdi
    00000869: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2153
    0000086e: 	cvttsd2si	init_value(%rip), %edx
    00000876: 	movq	%r12, %r8
    00000879: 	movl	$0x1f40, %esi
    0000087e: 	movq	%rbp, %rdi
    00000881: 	leaq	_Z22test_while_loop_param3IsET_PKS0_iS0_(%rip), %rcx
    00000888: 	movswl	%dx, %edx
    0000088b: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2187
    00000890: 	movq	0xc0(%rsp), %rdi
    00000898: 	cmpq	%rbx, %rdi
    0000089b: 	je	.Ltmp2163 # Offset: 2203
    0000089d: 	movq	0xd0(%rsp), %rax
    000008a5: 	leaq	0x1(%rax), %rsi
    000008a9: 	callq	_ZdlPvm@PLT # Offset: 2217
.Ltmp2163:
    000008ae: 	leaq	DATAat0x382cc(%rip), %rdx
    000008b5: 	movq	%r13, %rsi
    000008b8: 	movq	%r12, %rdi
    000008bb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2235
    000008c0: 	cvttsd2si	init_value(%rip), %edx
    000008c8: 	movq	%r12, %r8
    000008cb: 	movl	$0x1f40, %esi
    000008d0: 	movq	%rbp, %rdi
    000008d3: 	leaq	_Z18test_do_loop_paramIsET_PKS0_iS0_(%rip), %rcx
    000008da: 	movswl	%dx, %edx
    000008dd: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2269
    000008e2: 	movq	0xc0(%rsp), %rdi
    000008ea: 	cmpq	%rbx, %rdi
    000008ed: 	je	.Ltmp2164 # Offset: 2285
    000008ef: 	movq	0xd0(%rsp), %rax
    000008f7: 	leaq	0x1(%rax), %rsi
    000008fb: 	callq	_ZdlPvm@PLT # Offset: 2299
.Ltmp2164:
    00000900: 	leaq	DATAat0x382e3(%rip), %rdx
    00000907: 	movq	%r13, %rsi
    0000090a: 	movq	%r12, %rdi
    0000090d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2317
    00000912: 	cvttsd2si	init_value(%rip), %edx
    0000091a: 	movq	%r12, %r8
    0000091d: 	movl	$0x1f40, %esi
    00000922: 	movq	%rbp, %rdi
    00000925: 	leaq	_Z19test_do_loop_param2IsET_PKS0_iS0_(%rip), %rcx
    0000092c: 	movswl	%dx, %edx
    0000092f: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2351
    00000934: 	movq	0xc0(%rsp), %rdi
    0000093c: 	cmpq	%rbx, %rdi
    0000093f: 	je	.Ltmp2165 # Offset: 2367
    00000941: 	movq	0xd0(%rsp), %rax
    00000949: 	leaq	0x1(%rax), %rsi
    0000094d: 	callq	_ZdlPvm@PLT # Offset: 2381
.Ltmp2165:
    00000952: 	leaq	DATAat0x382fb(%rip), %rdx
    00000959: 	movq	%r13, %rsi
    0000095c: 	movq	%r12, %rdi
    0000095f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2399
    00000964: 	cvttsd2si	init_value(%rip), %edx
    0000096c: 	movq	%r12, %r8
    0000096f: 	movl	$0x1f40, %esi
    00000974: 	movq	%rbp, %rdi
    00000977: 	leaq	_Z19test_do_loop_param3IsET_PKS0_iS0_(%rip), %rcx
    0000097e: 	movswl	%dx, %edx
    00000981: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2433
    00000986: 	movq	0xc0(%rsp), %rdi
    0000098e: 	cmpq	%rbx, %rdi
    00000991: 	je	.Ltmp2166 # Offset: 2449
    00000993: 	movq	0xd0(%rsp), %rax
    0000099b: 	leaq	0x1(%rax), %rsi
    0000099f: 	callq	_ZdlPvm@PLT # Offset: 2463
.Ltmp2166:
    000009a4: 	leaq	DATAat0x38313(%rip), %rdx
    000009ab: 	movq	%r13, %rsi
    000009ae: 	movq	%r12, %rdi
    000009b1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2481
    000009b6: 	cvttsd2si	init_value(%rip), %edx
    000009be: 	movq	%r12, %r8
    000009c1: 	movl	$0x1f40, %esi
    000009c6: 	movq	%rbp, %rdi
    000009c9: 	leaq	_Z20test_goto_loop_paramIsET_PKS0_iS0_(%rip), %rcx
    000009d0: 	movswl	%dx, %edx
    000009d3: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2515
    000009d8: 	movq	0xc0(%rsp), %rdi
    000009e0: 	cmpq	%rbx, %rdi
    000009e3: 	je	.Ltmp2167 # Offset: 2531
    000009e5: 	movq	0xd0(%rsp), %rax
    000009ed: 	leaq	0x1(%rax), %rsi
    000009f1: 	callq	_ZdlPvm@PLT # Offset: 2545
.Ltmp2167:
    000009f6: 	movq	0x60(%rsp), %rax
    000009fb: 	movq	0x68(%rsp), %r14
    00000a00: 	movq	%rbx, 0xc0(%rsp)
    00000a08: 	movq	%rax, %rcx
    00000a0b: 	movq	%rax, (%rsp)
    00000a0f: 	addq	%r14, %rcx
    00000a12: 	je	.Ltmp2168 # Offset: 2578
    00000a14: 	testq	%rax, %rax
    00000a17: 	je	.Ltmp2169 # Offset: 2583
.Ltmp2168:
    00000a1d: 	movq	%r14, 0x58(%rsp)
    00000a22: 	cmpq	$0xf, %r14
    00000a26: 	ja	.Ltmp2170 # Offset: 2598
    00000a2c: 	cmpq	$0x1, %r14
    00000a30: 	jne	.Ltmp2171 # Offset: 2608
    00000a36: 	movq	(%rsp), %rax
    00000a3a: 	movzbl	(%rax), %eax
    00000a3d: 	movb	%al, 0xd0(%rsp)
    00000a44: 	movq	%rbx, %rax
.Ltmp2320:
    00000a47: 	movq	%r14, 0xc8(%rsp)
    00000a4f: 	movb	$0x0, (%rax,%r14)
    00000a54: 	movabsq	$0x3fffffffffffffff, %rax
    00000a5e: 	subq	0xc8(%rsp), %rax
    00000a66: 	cmpq	$0x18, %rax
    00000a6a: 	jbe	.Ltmp2172 # Offset: 2666
    00000a70: 	movl	$0x19, %edx
    00000a75: 	leaq	DATAat0x3832c(%rip), %rsi
    00000a7c: 	movq	%r12, %rdi
    00000a7f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2687
    00000a84: 	cvttsd2si	init_value(%rip), %edx
    00000a8c: 	movq	%r12, %r8
    00000a8f: 	movl	$0x1f40, %esi
    00000a94: 	movq	%rbp, %rdi
    00000a97: 	leaq	_Z21test_goto_loop_param2IsET_PKS0_iS0_(%rip), %rcx
    00000a9e: 	movswl	%dx, %edx
    00000aa1: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2721
    00000aa6: 	movq	0xc0(%rsp), %rdi
    00000aae: 	cmpq	%rbx, %rdi
    00000ab1: 	je	.Ltmp2173 # Offset: 2737
    00000ab3: 	movq	0xd0(%rsp), %rax
    00000abb: 	leaq	0x1(%rax), %rsi
    00000abf: 	callq	_ZdlPvm@PLT # Offset: 2751
.Ltmp2173:
    00000ac4: 	leaq	DATAat0x38346(%rip), %rdx
    00000acb: 	movq	%r13, %rsi
    00000ace: 	movq	%r12, %rdi
    00000ad1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2769
    00000ad6: 	cvttsd2si	init_value(%rip), %edx
    00000ade: 	movq	%r12, %r8
    00000ae1: 	movl	$0x1f40, %esi
    00000ae6: 	movq	%rbp, %rdi
    00000ae9: 	leaq	_Z21test_goto_loop_param3IsET_PKS0_iS0_(%rip), %rcx
    00000af0: 	movswl	%dx, %edx
    00000af3: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2803
    00000af8: 	movq	0xc0(%rsp), %rdi
    00000b00: 	cmpq	%rbx, %rdi
    00000b03: 	je	.Ltmp2174 # Offset: 2819
    00000b05: 	movq	0xd0(%rsp), %rax
    00000b0d: 	leaq	0x1(%rax), %rsi
    00000b11: 	callq	_ZdlPvm@PLT # Offset: 2833
.Ltmp2174:
    00000b16: 	leaq	DATAat0x38360(%rip), %rdx
    00000b1d: 	movq	%r13, %rsi
    00000b20: 	movq	%r12, %rdi
    00000b23: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2851
    00000b28: 	cvttsd2si	init_value(%rip), %edx
    00000b30: 	movq	%r12, %r8
    00000b33: 	movl	$0x1f40, %esi
    00000b38: 	movq	%rbp, %rdi
    00000b3b: 	leaq	_Z20test_for_loop_globalIsET_PKS0_iS0_(%rip), %rcx
    00000b42: 	movswl	%dx, %edx
    00000b45: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2885
    00000b4a: 	movq	0xc0(%rsp), %rdi
    00000b52: 	cmpq	%rbx, %rdi
    00000b55: 	je	.Ltmp2175 # Offset: 2901
    00000b57: 	movq	0xd0(%rsp), %rax
    00000b5f: 	leaq	0x1(%rax), %rsi
    00000b63: 	callq	_ZdlPvm@PLT # Offset: 2915
.Ltmp2175:
    00000b68: 	leaq	DATAat0x38375(%rip), %rdx
    00000b6f: 	movq	%r13, %rsi
    00000b72: 	movq	%r12, %rdi
    00000b75: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2933
    00000b7a: 	cvttsd2si	init_value(%rip), %edx
    00000b82: 	movq	%r12, %r8
    00000b85: 	movl	$0x1f40, %esi
    00000b8a: 	movq	%rbp, %rdi
    00000b8d: 	leaq	_Z21test_for_loop_global2IsET_PKS0_iS0_(%rip), %rcx
    00000b94: 	movswl	%dx, %edx
    00000b97: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2967
    00000b9c: 	movq	0xc0(%rsp), %rdi
    00000ba4: 	cmpq	%rbx, %rdi
    00000ba7: 	je	.Ltmp2176 # Offset: 2983
    00000ba9: 	movq	0xd0(%rsp), %rax
    00000bb1: 	leaq	0x1(%rax), %rsi
    00000bb5: 	callq	_ZdlPvm@PLT # Offset: 2997
.Ltmp2176:
    00000bba: 	movq	0x60(%rsp), %rax
    00000bbf: 	movq	0x68(%rsp), %r14
    00000bc4: 	movq	%rbx, 0xc0(%rsp)
    00000bcc: 	movq	%rax, %rcx
    00000bcf: 	movq	%rax, (%rsp)
    00000bd3: 	addq	%r14, %rcx
    00000bd6: 	je	.Ltmp2177 # Offset: 3030
    00000bd8: 	testq	%rax, %rax
    00000bdb: 	je	.Ltmp2178 # Offset: 3035
.Ltmp2177:
    00000be1: 	movq	%r14, 0x58(%rsp)
    00000be6: 	cmpq	$0xf, %r14
    00000bea: 	ja	.Ltmp2179 # Offset: 3050
    00000bf0: 	cmpq	$0x1, %r14
    00000bf4: 	jne	.Ltmp2180 # Offset: 3060
    00000bfa: 	movq	(%rsp), %rax
    00000bfe: 	movzbl	(%rax), %eax
    00000c01: 	movb	%al, 0xd0(%rsp)
    00000c08: 	movq	%rbx, %rax
.Ltmp2318:
    00000c0b: 	movq	%r14, 0xc8(%rsp)
    00000c13: 	movb	$0x0, (%rax,%r14)
    00000c18: 	movabsq	$0x3fffffffffffffff, %rax
    00000c22: 	subq	0xc8(%rsp), %rax
    00000c2a: 	cmpq	$0x14, %rax
    00000c2e: 	jbe	.Ltmp2181 # Offset: 3118
    00000c34: 	movl	$0x15, %edx
    00000c39: 	leaq	DATAat0x3838b(%rip), %rsi
    00000c40: 	movq	%r12, %rdi
    00000c43: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3139
    00000c48: 	cvttsd2si	init_value(%rip), %edx
    00000c50: 	movq	%r12, %r8
    00000c53: 	movl	$0x1f40, %esi
    00000c58: 	movq	%rbp, %rdi
    00000c5b: 	leaq	_Z21test_for_loop_global3IsET_PKS0_iS0_(%rip), %rcx
    00000c62: 	movswl	%dx, %edx
    00000c65: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3173
    00000c6a: 	movq	0xc0(%rsp), %rdi
    00000c72: 	cmpq	%rbx, %rdi
    00000c75: 	je	.Ltmp2182 # Offset: 3189
    00000c77: 	movq	0xd0(%rsp), %rax
    00000c7f: 	leaq	0x1(%rax), %rsi
    00000c83: 	callq	_ZdlPvm@PLT # Offset: 3203
.Ltmp2182:
    00000c88: 	movq	0x60(%rsp), %rax
    00000c8d: 	movq	0x68(%rsp), %r14
    00000c92: 	movq	%rbx, 0xc0(%rsp)
    00000c9a: 	movq	%rax, %rcx
    00000c9d: 	movq	%rax, (%rsp)
    00000ca1: 	addq	%r14, %rcx
    00000ca4: 	je	.Ltmp2183 # Offset: 3236
    00000ca6: 	testq	%rax, %rax
    00000ca9: 	je	.Ltmp2184 # Offset: 3241
.Ltmp2183:
    00000caf: 	movq	%r14, 0x58(%rsp)
    00000cb4: 	cmpq	$0xf, %r14
    00000cb8: 	ja	.Ltmp2185 # Offset: 3256
    00000cbe: 	cmpq	$0x1, %r14
    00000cc2: 	jne	.Ltmp2186 # Offset: 3266
    00000cc8: 	movq	(%rsp), %rax
    00000ccc: 	movzbl	(%rax), %eax
    00000ccf: 	movb	%al, 0xd0(%rsp)
    00000cd6: 	movq	%rbx, %rax
.Ltmp2316:
    00000cd9: 	movq	%r14, 0xc8(%rsp)
    00000ce1: 	movb	$0x0, (%rax,%r14)
    00000ce6: 	movabsq	$0x3fffffffffffffff, %rax
    00000cf0: 	subq	0xc8(%rsp), %rax
    00000cf8: 	cmpq	$0x15, %rax
    00000cfc: 	jbe	.Ltmp2187 # Offset: 3324
    00000d02: 	movl	$0x16, %edx
    00000d07: 	leaq	DATAat0x383a1(%rip), %rsi
    00000d0e: 	movq	%r12, %rdi
    00000d11: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3345
    00000d16: 	cvttsd2si	init_value(%rip), %edx
    00000d1e: 	movq	%r12, %r8
    00000d21: 	movl	$0x1f40, %esi
    00000d26: 	movq	%rbp, %rdi
    00000d29: 	leaq	_Z22test_while_loop_globalIsET_PKS0_iS0_(%rip), %rcx
    00000d30: 	movswl	%dx, %edx
    00000d33: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3379
    00000d38: 	movq	0xc0(%rsp), %rdi
    00000d40: 	cmpq	%rbx, %rdi
    00000d43: 	je	.Ltmp2188 # Offset: 3395
    00000d45: 	movq	0xd0(%rsp), %rax
    00000d4d: 	leaq	0x1(%rax), %rsi
    00000d51: 	callq	_ZdlPvm@PLT # Offset: 3409
.Ltmp2188:
    00000d56: 	leaq	DATAat0x383b8(%rip), %rdx
    00000d5d: 	movq	%r13, %rsi
    00000d60: 	movq	%r12, %rdi
    00000d63: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3427
    00000d68: 	cvttsd2si	init_value(%rip), %edx
    00000d70: 	movq	%r12, %r8
    00000d73: 	movl	$0x1f40, %esi
    00000d78: 	movq	%rbp, %rdi
    00000d7b: 	leaq	_Z23test_while_loop_global2IsET_PKS0_iS0_(%rip), %rcx
    00000d82: 	movswl	%dx, %edx
    00000d85: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3461
    00000d8a: 	movq	0xc0(%rsp), %rdi
    00000d92: 	cmpq	%rbx, %rdi
    00000d95: 	je	.Ltmp2189 # Offset: 3477
    00000d97: 	movq	0xd0(%rsp), %rax
    00000d9f: 	leaq	0x1(%rax), %rsi
    00000da3: 	callq	_ZdlPvm@PLT # Offset: 3491
.Ltmp2189:
    00000da8: 	leaq	DATAat0x383d0(%rip), %rdx
    00000daf: 	movq	%r13, %rsi
    00000db2: 	movq	%r12, %rdi
    00000db5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3509
    00000dba: 	cvttsd2si	init_value(%rip), %edx
    00000dc2: 	movq	%r12, %r8
    00000dc5: 	movl	$0x1f40, %esi
    00000dca: 	movq	%rbp, %rdi
    00000dcd: 	leaq	_Z23test_while_loop_global3IsET_PKS0_iS0_(%rip), %rcx
    00000dd4: 	movswl	%dx, %edx
    00000dd7: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3543
    00000ddc: 	movq	0xc0(%rsp), %rdi
    00000de4: 	cmpq	%rbx, %rdi
    00000de7: 	je	.Ltmp2190 # Offset: 3559
    00000de9: 	movq	0xd0(%rsp), %rax
    00000df1: 	leaq	0x1(%rax), %rsi
    00000df5: 	callq	_ZdlPvm@PLT # Offset: 3573
.Ltmp2190:
    00000dfa: 	movq	0x60(%rsp), %rax
    00000dff: 	movq	0x68(%rsp), %r14
    00000e04: 	movq	%rbx, 0xc0(%rsp)
    00000e0c: 	movq	%rax, %rcx
    00000e0f: 	movq	%rax, (%rsp)
    00000e13: 	addq	%r14, %rcx
    00000e16: 	je	.Ltmp2191 # Offset: 3606
    00000e18: 	testq	%rax, %rax
    00000e1b: 	je	.Ltmp2192 # Offset: 3611
.Ltmp2191:
    00000e21: 	movq	%r14, 0x58(%rsp)
    00000e26: 	cmpq	$0xf, %r14
    00000e2a: 	ja	.Ltmp2193 # Offset: 3626
    00000e30: 	cmpq	$0x1, %r14
    00000e34: 	jne	.Ltmp2194 # Offset: 3636
    00000e3a: 	movq	(%rsp), %rax
    00000e3e: 	movzbl	(%rax), %eax
    00000e41: 	movb	%al, 0xd0(%rsp)
    00000e48: 	movq	%rbx, %rax
.Ltmp2314:
    00000e4b: 	movq	%r14, 0xc8(%rsp)
    00000e53: 	movb	$0x0, (%rax,%r14)
    00000e58: 	movabsq	$0x3fffffffffffffff, %rax
    00000e62: 	subq	0xc8(%rsp), %rax
    00000e6a: 	cmpq	$0x12, %rax
    00000e6e: 	jbe	.Ltmp2195 # Offset: 3694
    00000e74: 	movl	$0x13, %edx
    00000e79: 	leaq	DATAat0x383e8(%rip), %rsi
    00000e80: 	movq	%r12, %rdi
    00000e83: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3715
    00000e88: 	cvttsd2si	init_value(%rip), %edx
    00000e90: 	movq	%r12, %r8
    00000e93: 	movl	$0x1f40, %esi
    00000e98: 	movq	%rbp, %rdi
    00000e9b: 	leaq	_Z19test_do_loop_globalIsET_PKS0_iS0_(%rip), %rcx
    00000ea2: 	movswl	%dx, %edx
    00000ea5: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3749
    00000eaa: 	movq	0xc0(%rsp), %rdi
    00000eb2: 	cmpq	%rbx, %rdi
    00000eb5: 	je	.Ltmp2196 # Offset: 3765
    00000eb7: 	movq	0xd0(%rsp), %rax
    00000ebf: 	leaq	0x1(%rax), %rsi
    00000ec3: 	callq	_ZdlPvm@PLT # Offset: 3779
.Ltmp2196:
    00000ec8: 	movq	0x60(%rsp), %rax
    00000ecd: 	movq	0x68(%rsp), %r14
    00000ed2: 	movq	%rbx, 0xc0(%rsp)
    00000eda: 	movq	%rax, %rcx
    00000edd: 	movq	%rax, (%rsp)
    00000ee1: 	addq	%r14, %rcx
    00000ee4: 	je	.Ltmp2197 # Offset: 3812
    00000ee6: 	testq	%rax, %rax
    00000ee9: 	je	.Ltmp2198 # Offset: 3817
.Ltmp2197:
    00000eef: 	movq	%r14, 0x58(%rsp)
    00000ef4: 	cmpq	$0xf, %r14
    00000ef8: 	ja	.Ltmp2199 # Offset: 3832
    00000efe: 	cmpq	$0x1, %r14
    00000f02: 	jne	.Ltmp2200 # Offset: 3842
    00000f08: 	movq	(%rsp), %rax
    00000f0c: 	movzbl	(%rax), %eax
    00000f0f: 	movb	%al, 0xd0(%rsp)
    00000f16: 	movq	%rbx, %rax
.Ltmp2312:
    00000f19: 	movq	%r14, 0xc8(%rsp)
    00000f21: 	movb	$0x0, (%rax,%r14)
    00000f26: 	movabsq	$0x3fffffffffffffff, %rax
    00000f30: 	subq	0xc8(%rsp), %rax
    00000f38: 	cmpq	$0x13, %rax
    00000f3c: 	jbe	.Ltmp2201 # Offset: 3900
    00000f42: 	movl	$0x14, %edx
    00000f47: 	leaq	DATAat0x383fc(%rip), %rsi
    00000f4e: 	movq	%r12, %rdi
    00000f51: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3921
    00000f56: 	cvttsd2si	init_value(%rip), %edx
    00000f5e: 	movq	%r12, %r8
    00000f61: 	movl	$0x1f40, %esi
    00000f66: 	movq	%rbp, %rdi
    00000f69: 	leaq	_Z20test_do_loop_global2IsET_PKS0_iS0_(%rip), %rcx
    00000f70: 	movswl	%dx, %edx
    00000f73: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3955
    00000f78: 	movq	0xc0(%rsp), %rdi
    00000f80: 	cmpq	%rbx, %rdi
    00000f83: 	je	.Ltmp2202 # Offset: 3971
    00000f85: 	movq	0xd0(%rsp), %rax
    00000f8d: 	leaq	0x1(%rax), %rsi
    00000f91: 	callq	_ZdlPvm@PLT # Offset: 3985
.Ltmp2202:
    00000f96: 	leaq	DATAat0x38411(%rip), %rdx
    00000f9d: 	movq	%r13, %rsi
    00000fa0: 	movq	%r12, %rdi
    00000fa3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4003
    00000fa8: 	cvttsd2si	init_value(%rip), %edx
    00000fb0: 	movq	%r12, %r8
    00000fb3: 	movl	$0x1f40, %esi
    00000fb8: 	movq	%rbp, %rdi
    00000fbb: 	leaq	_Z20test_do_loop_global3IsET_PKS0_iS0_(%rip), %rcx
    00000fc2: 	movswl	%dx, %edx
    00000fc5: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4037
    00000fca: 	movq	0xc0(%rsp), %rdi
    00000fd2: 	cmpq	%rbx, %rdi
    00000fd5: 	je	.Ltmp2203 # Offset: 4053
    00000fd7: 	movq	0xd0(%rsp), %rax
    00000fdf: 	leaq	0x1(%rax), %rsi
    00000fe3: 	callq	_ZdlPvm@PLT # Offset: 4067
.Ltmp2203:
    00000fe8: 	movq	0x60(%rsp), %rax
    00000fed: 	movq	0x68(%rsp), %r14
    00000ff2: 	movq	%rbx, 0xc0(%rsp)
    00000ffa: 	movq	%rax, %rcx
    00000ffd: 	movq	%rax, (%rsp)
    00001001: 	addq	%r14, %rcx
    00001004: 	je	.Ltmp2204 # Offset: 4100
    00001006: 	testq	%rax, %rax
    00001009: 	je	.Ltmp2205 # Offset: 4105
.Ltmp2204:
    0000100f: 	movq	%r14, 0x58(%rsp)
    00001014: 	cmpq	$0xf, %r14
    00001018: 	ja	.Ltmp2206 # Offset: 4120
    0000101e: 	cmpq	$0x1, %r14
    00001022: 	jne	.Ltmp2207 # Offset: 4130
    00001028: 	movq	(%rsp), %rax
    0000102c: 	movzbl	(%rax), %eax
    0000102f: 	movb	%al, 0xd0(%rsp)
    00001036: 	movq	%rbx, %rax
.Ltmp2310:
    00001039: 	movq	%r14, 0xc8(%rsp)
    00001041: 	movb	$0x0, (%rax,%r14)
    00001046: 	movabsq	$0x3fffffffffffffff, %rax
    00001050: 	subq	0xc8(%rsp), %rax
    00001058: 	cmpq	$0x14, %rax
    0000105c: 	jbe	.Ltmp2208 # Offset: 4188
    00001062: 	movl	$0x15, %edx
    00001067: 	leaq	DATAat0x38426(%rip), %rsi
    0000106e: 	movq	%r12, %rdi
    00001071: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4209
    00001076: 	cvttsd2si	init_value(%rip), %edx
    0000107e: 	movq	%r12, %r8
    00001081: 	movl	$0x1f40, %esi
    00001086: 	movq	%rbp, %rdi
    00001089: 	leaq	_Z21test_goto_loop_globalIsET_PKS0_iS0_(%rip), %rcx
    00001090: 	movswl	%dx, %edx
    00001093: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4243
    00001098: 	movq	0xc0(%rsp), %rdi
    000010a0: 	cmpq	%rbx, %rdi
    000010a3: 	je	.Ltmp2209 # Offset: 4259
    000010a5: 	movq	0xd0(%rsp), %rax
    000010ad: 	leaq	0x1(%rax), %rsi
    000010b1: 	callq	_ZdlPvm@PLT # Offset: 4273
.Ltmp2209:
    000010b6: 	movq	0x60(%rsp), %rax
    000010bb: 	movq	0x68(%rsp), %r14
    000010c0: 	movq	%rbx, 0xc0(%rsp)
    000010c8: 	movq	%rax, %rcx
    000010cb: 	movq	%rax, (%rsp)
    000010cf: 	addq	%r14, %rcx
    000010d2: 	je	.Ltmp2210 # Offset: 4306
    000010d4: 	testq	%rax, %rax
    000010d7: 	je	.Ltmp2211 # Offset: 4311
.Ltmp2210:
    000010dd: 	movq	%r14, 0x58(%rsp)
    000010e2: 	cmpq	$0xf, %r14
    000010e6: 	ja	.Ltmp2212 # Offset: 4326
    000010ec: 	cmpq	$0x1, %r14
    000010f0: 	jne	.Ltmp2213 # Offset: 4336
    000010f6: 	movq	(%rsp), %rax
    000010fa: 	movzbl	(%rax), %eax
    000010fd: 	movb	%al, 0xd0(%rsp)
    00001104: 	movq	%rbx, %rax
.Ltmp2308:
    00001107: 	movq	%r14, 0xc8(%rsp)
    0000110f: 	movb	$0x0, (%rax,%r14)
    00001114: 	movabsq	$0x3fffffffffffffff, %rax
    0000111e: 	subq	0xc8(%rsp), %rax
    00001126: 	cmpq	$0x15, %rax
    0000112a: 	jbe	.Ltmp2214 # Offset: 4394
    00001130: 	movl	$0x16, %edx
    00001135: 	leaq	DATAat0x3843c(%rip), %rsi
    0000113c: 	movq	%r12, %rdi
    0000113f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4415
    00001144: 	cvttsd2si	init_value(%rip), %edx
    0000114c: 	movq	%r12, %r8
    0000114f: 	movl	$0x1f40, %esi
    00001154: 	movq	%rbp, %rdi
    00001157: 	leaq	_Z22test_goto_loop_global2IsET_PKS0_iS0_(%rip), %rcx
    0000115e: 	movswl	%dx, %edx
    00001161: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4449
    00001166: 	movq	0xc0(%rsp), %rdi
    0000116e: 	cmpq	%rbx, %rdi
    00001171: 	je	.Ltmp2215 # Offset: 4465
    00001173: 	movq	0xd0(%rsp), %rax
    0000117b: 	leaq	0x1(%rax), %rsi
    0000117f: 	callq	_ZdlPvm@PLT # Offset: 4479
.Ltmp2215:
    00001184: 	leaq	DATAat0x38453(%rip), %rdx
    0000118b: 	movq	%r13, %rsi
    0000118e: 	movq	%r12, %rdi
    00001191: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4497
    00001196: 	cvttsd2si	init_value(%rip), %edx
    0000119e: 	movq	%r12, %r8
    000011a1: 	movl	$0x1f40, %esi
    000011a6: 	movq	%rbp, %rdi
    000011a9: 	leaq	_Z22test_goto_loop_global3IsET_PKS0_iS0_(%rip), %rcx
    000011b0: 	movswl	%dx, %edx
    000011b3: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4531
    000011b8: 	movq	0xc0(%rsp), %rdi
    000011c0: 	cmpq	%rbx, %rdi
    000011c3: 	je	.Ltmp2216 # Offset: 4547
    000011c5: 	movq	0xd0(%rsp), %rax
    000011cd: 	leaq	0x1(%rax), %rsi
    000011d1: 	callq	_ZdlPvm@PLT # Offset: 4561
.Ltmp2216:
    000011d6: 	leaq	0x80(%rsp), %rdi
    000011de: 	leaq	DATAat0x3846a(%rip), %rdx
    000011e5: 	movq	%r13, %rsi
    000011e8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4584
    000011ed: 	movl	iterations(%rip), %edx
    000011f3: 	xorl	%r8d, %r8d
    000011f6: 	xorl	%ecx, %ecx
    000011f8: 	movl	$0x1f40, %esi
    000011fd: 	movq	0x80(%rsp), %rdi
    00001205: 	callq	_Z9summarizePKciiii # Offset: 4613
    0000120a: 	movq	0x60(%rsp), %rax
    0000120f: 	movq	0x68(%rsp), %r14
    00001214: 	movq	%rbx, 0xc0(%rsp)
    0000121c: 	movq	%rax, %rcx
    0000121f: 	movq	%rax, (%rsp)
    00001223: 	addq	%r14, %rcx
    00001226: 	je	.Ltmp2217 # Offset: 4646
    00001228: 	testq	%rax, %rax
    0000122b: 	je	.Ltmp2218 # Offset: 4651
.Ltmp2217:
    00001231: 	movq	%r14, 0x58(%rsp)
    00001236: 	cmpq	$0xf, %r14
    0000123a: 	ja	.Ltmp2219 # Offset: 4666
    00001240: 	cmpq	$0x1, %r14
    00001244: 	jne	.Ltmp2220 # Offset: 4676
    0000124a: 	movq	(%rsp), %rax
    0000124e: 	movzbl	(%rax), %eax
    00001251: 	movb	%al, 0xd0(%rsp)
    00001258: 	movq	%rbx, %rax
.Ltmp2306:
    0000125b: 	movq	%r14, 0xc8(%rsp)
    00001263: 	movb	$0x0, (%rax,%r14)
    00001268: 	movabsq	$0x3fffffffffffffff, %rax
    00001272: 	subq	0xc8(%rsp), %rax
    0000127a: 	cmpq	$0x15, %rax
    0000127e: 	jbe	.Ltmp2221 # Offset: 4734
    00001284: 	movl	$0x16, %edx
    00001289: 	leaq	DATAat0x3847c(%rip), %rsi
    00001290: 	movq	%r12, %rdi
    00001293: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4755
    00001298: 	movq	%r12, %r8
    0000129b: 	movq	%r15, %rcx
    0000129e: 	movl	$0x1f40, %esi
    000012a3: 	movq	%rbp, %rdi
    000012a6: 	cvttsd2si	init_value(%rip), %edx
    000012ae: 	movswl	%dx, %edx
    000012b1: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4785
    000012b6: 	movq	0xc0(%rsp), %rdi
    000012be: 	cmpq	%rbx, %rdi
    000012c1: 	je	.Ltmp2222 # Offset: 4801
    000012c3: 	movq	0xd0(%rsp), %rax
    000012cb: 	leaq	0x1(%rax), %rsi
    000012cf: 	callq	_ZdlPvm@PLT # Offset: 4815
.Ltmp2222:
    000012d4: 	leaq	DATAat0x38493(%rip), %rdx
    000012db: 	movq	%r13, %rsi
    000012de: 	movq	%r12, %rdi
    000012e1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4833
    000012e6: 	cvttsd2si	init_value(%rip), %edx
    000012ee: 	movq	%r12, %r8
    000012f1: 	movl	$0x1f40, %esi
    000012f6: 	movq	%rbp, %rdi
    000012f9: 	leaq	_Z19test_while_loop_optIsET_PKS0_iS0_(%rip), %rcx
    00001300: 	movswl	%dx, %edx
    00001303: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4867
    00001308: 	movq	0xc0(%rsp), %rdi
    00001310: 	cmpq	%rbx, %rdi
    00001313: 	je	.Ltmp2223 # Offset: 4883
    00001315: 	movq	0xd0(%rsp), %rax
    0000131d: 	leaq	0x1(%rax), %rsi
    00001321: 	callq	_ZdlPvm@PLT # Offset: 4897
.Ltmp2223:
    00001326: 	movq	0x60(%rsp), %r15
    0000132b: 	movq	0x68(%rsp), %r14
    00001330: 	movq	%rbx, 0xc0(%rsp)
    00001338: 	movq	%r15, %rax
    0000133b: 	addq	%r14, %rax
    0000133e: 	je	.Ltmp2224 # Offset: 4926
    00001340: 	testq	%r15, %r15
    00001343: 	je	.Ltmp2225 # Offset: 4931
.Ltmp2224:
    00001349: 	movq	%r14, 0x58(%rsp)
    0000134e: 	cmpq	$0xf, %r14
    00001352: 	ja	.Ltmp2226 # Offset: 4946
    00001358: 	cmpq	$0x1, %r14
    0000135c: 	jne	.Ltmp2227 # Offset: 4956
    00001362: 	movzbl	(%r15), %eax
    00001366: 	movb	%al, 0xd0(%rsp)
    0000136d: 	movq	%rbx, %rax
.Ltmp2292:
    00001370: 	movq	%r14, 0xc8(%rsp)
    00001378: 	movb	$0x0, (%rax,%r14)
    0000137d: 	movabsq	$0x3fffffffffffffff, %rax
    00001387: 	subq	0xc8(%rsp), %rax
    0000138f: 	cmpq	$0x14, %rax
    00001393: 	jbe	.Ltmp2228 # Offset: 5011
    00001399: 	movl	$0x15, %edx
    0000139e: 	leaq	DATAat0x384ac(%rip), %rsi
    000013a5: 	movq	%r12, %rdi
    000013a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5032
    000013ad: 	cvttsd2si	init_value(%rip), %edx
    000013b5: 	movq	%r12, %r8
    000013b8: 	movl	$0x1f40, %esi
    000013bd: 	movq	%rbp, %rdi
    000013c0: 	leaq	_Z16test_do_loop_optIsET_PKS0_iS0_(%rip), %rcx
    000013c7: 	movswl	%dx, %edx
    000013ca: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5066
    000013cf: 	movq	0xc0(%rsp), %rdi
    000013d7: 	cmpq	%rbx, %rdi
    000013da: 	je	.Ltmp2229 # Offset: 5082
    000013dc: 	movq	0xd0(%rsp), %rax
    000013e4: 	leaq	0x1(%rax), %rsi
    000013e8: 	callq	_ZdlPvm@PLT # Offset: 5096
.Ltmp2229:
    000013ed: 	leaq	DATAat0x384c2(%rip), %rdx
    000013f4: 	movq	%r13, %rsi
    000013f7: 	movq	%r12, %rdi
    000013fa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5114
    000013ff: 	cvttsd2si	init_value(%rip), %edx
    00001407: 	movq	%r12, %r8
    0000140a: 	movl	$0x1f40, %esi
    0000140f: 	movq	%rbp, %rdi
    00001412: 	leaq	_Z18test_goto_loop_optIsET_PKS0_iS0_(%rip), %rcx
    00001419: 	movswl	%dx, %edx
    0000141c: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5148
    00001421: 	movq	0xc0(%rsp), %rdi
    00001429: 	cmpq	%rbx, %rdi
    0000142c: 	je	.Ltmp2230 # Offset: 5164
    0000142e: 	movq	0xd0(%rsp), %rax
    00001436: 	leaq	0x1(%rax), %rsi
    0000143a: 	callq	_ZdlPvm@PLT # Offset: 5178
.Ltmp2230:
    0000143f: 	leaq	DATAat0x384da(%rip), %rdx
    00001446: 	movq	%r13, %rsi
    00001449: 	movq	%r12, %rdi
    0000144c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5196
    00001451: 	cvttsd2si	init_value(%rip), %edx
    00001459: 	movq	%r12, %r8
    0000145c: 	movl	$0x1f40, %esi
    00001461: 	movq	%rbp, %rdi
    00001464: 	leaq	_Z20test_for_loop2_paramIsET_PKS0_iS0_(%rip), %rcx
    0000146b: 	movswl	%dx, %edx
    0000146e: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5230
    00001473: 	movq	0xc0(%rsp), %rdi
    0000147b: 	cmpq	%rbx, %rdi
    0000147e: 	je	.Ltmp2231 # Offset: 5246
    00001480: 	movq	0xd0(%rsp), %rax
    00001488: 	leaq	0x1(%rax), %rsi
    0000148c: 	callq	_ZdlPvm@PLT # Offset: 5260
.Ltmp2231:
    00001491: 	leaq	DATAat0x384f3(%rip), %rdx
    00001498: 	movq	%r13, %rsi
    0000149b: 	movq	%r12, %rdi
    0000149e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5278
    000014a3: 	cvttsd2si	init_value(%rip), %edx
    000014ab: 	movq	%r12, %r8
    000014ae: 	movl	$0x1f40, %esi
    000014b3: 	movq	%rbp, %rdi
    000014b6: 	leaq	_Z21test_for_loop2_param2IsET_PKS0_iS0_(%rip), %rcx
    000014bd: 	movswl	%dx, %edx
    000014c0: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5312
    000014c5: 	movq	0xc0(%rsp), %rdi
    000014cd: 	cmpq	%rbx, %rdi
    000014d0: 	je	.Ltmp2232 # Offset: 5328
    000014d2: 	movq	0xd0(%rsp), %rax
    000014da: 	leaq	0x1(%rax), %rsi
    000014de: 	callq	_ZdlPvm@PLT # Offset: 5342
.Ltmp2232:
    000014e3: 	movq	0x60(%rsp), %r15
    000014e8: 	movq	0x68(%rsp), %r14
    000014ed: 	movq	%rbx, 0xc0(%rsp)
    000014f5: 	movq	%r15, %rax
    000014f8: 	addq	%r14, %rax
    000014fb: 	je	.Ltmp2233 # Offset: 5371
    000014fd: 	testq	%r15, %r15
    00001500: 	je	.Ltmp2234 # Offset: 5376
.Ltmp2233:
    00001506: 	movq	%r14, 0x58(%rsp)
    0000150b: 	cmpq	$0xf, %r14
    0000150f: 	ja	.Ltmp2235 # Offset: 5391
    00001515: 	cmpq	$0x1, %r14
    00001519: 	jne	.Ltmp2236 # Offset: 5401
    0000151f: 	movzbl	(%r15), %eax
    00001523: 	movb	%al, 0xd0(%rsp)
    0000152a: 	movq	%rbx, %rax
.Ltmp2322:
    0000152d: 	movq	%r14, 0xc8(%rsp)
    00001535: 	movb	$0x0, (%rax,%r14)
    0000153a: 	movabsq	$0x3fffffffffffffff, %rax
    00001544: 	subq	0xc8(%rsp), %rax
    0000154c: 	cmpq	$0x19, %rax
    00001550: 	jbe	.Ltmp2237 # Offset: 5456
    00001556: 	movl	$0x1a, %edx
    0000155b: 	leaq	DATAat0x3850d(%rip), %rsi
    00001562: 	movq	%r12, %rdi
    00001565: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5477
    0000156a: 	cvttsd2si	init_value(%rip), %edx
    00001572: 	movq	%r12, %r8
    00001575: 	movl	$0x1f40, %esi
    0000157a: 	movq	%rbp, %rdi
    0000157d: 	leaq	_Z22test_while_loop2_paramIsET_PKS0_iS0_(%rip), %rcx
    00001584: 	movswl	%dx, %edx
    00001587: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5511
    0000158c: 	movq	0xc0(%rsp), %rdi
    00001594: 	cmpq	%rbx, %rdi
    00001597: 	je	.Ltmp2238 # Offset: 5527
    00001599: 	movq	0xd0(%rsp), %rax
    000015a1: 	leaq	0x1(%rax), %rsi
    000015a5: 	callq	_ZdlPvm@PLT # Offset: 5541
.Ltmp2238:
    000015aa: 	leaq	DATAat0x38528(%rip), %rdx
    000015b1: 	movq	%r13, %rsi
    000015b4: 	movq	%r12, %rdi
    000015b7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5559
    000015bc: 	cvttsd2si	init_value(%rip), %edx
    000015c4: 	movq	%r12, %r8
    000015c7: 	movl	$0x1f40, %esi
    000015cc: 	movq	%rbp, %rdi
    000015cf: 	leaq	_Z23test_while_loop2_param2IsET_PKS0_iS0_(%rip), %rcx
    000015d6: 	movswl	%dx, %edx
    000015d9: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5593
    000015de: 	movq	0xc0(%rsp), %rdi
    000015e6: 	cmpq	%rbx, %rdi
    000015e9: 	je	.Ltmp2239 # Offset: 5609
    000015eb: 	movq	0xd0(%rsp), %rax
    000015f3: 	leaq	0x1(%rax), %rsi
    000015f7: 	callq	_ZdlPvm@PLT # Offset: 5623
.Ltmp2239:
    000015fc: 	leaq	DATAat0x38544(%rip), %rdx
    00001603: 	movq	%r13, %rsi
    00001606: 	movq	%r12, %rdi
    00001609: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5641
    0000160e: 	cvttsd2si	init_value(%rip), %edx
    00001616: 	movq	%r12, %r8
    00001619: 	movl	$0x1f40, %esi
    0000161e: 	movq	%rbp, %rdi
    00001621: 	leaq	_Z19test_do_loop2_paramIsET_PKS0_iS0_(%rip), %rcx
    00001628: 	movswl	%dx, %edx
    0000162b: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5675
    00001630: 	movq	0xc0(%rsp), %rdi
    00001638: 	cmpq	%rbx, %rdi
    0000163b: 	je	.Ltmp2240 # Offset: 5691
    0000163d: 	movq	0xd0(%rsp), %rax
    00001645: 	leaq	0x1(%rax), %rsi
    00001649: 	callq	_ZdlPvm@PLT # Offset: 5705
.Ltmp2240:
    0000164e: 	leaq	DATAat0x3855c(%rip), %rdx
    00001655: 	movq	%r13, %rsi
    00001658: 	movq	%r12, %rdi
    0000165b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5723
    00001660: 	cvttsd2si	init_value(%rip), %edx
    00001668: 	movq	%r12, %r8
    0000166b: 	movl	$0x1f40, %esi
    00001670: 	movq	%rbp, %rdi
    00001673: 	leaq	_Z20test_do_loop2_param2IsET_PKS0_iS0_(%rip), %rcx
    0000167a: 	movswl	%dx, %edx
    0000167d: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5757
    00001682: 	movq	0xc0(%rsp), %rdi
    0000168a: 	cmpq	%rbx, %rdi
    0000168d: 	je	.Ltmp2241 # Offset: 5773
    0000168f: 	movq	0xd0(%rsp), %rax
    00001697: 	leaq	0x1(%rax), %rsi
    0000169b: 	callq	_ZdlPvm@PLT # Offset: 5787
.Ltmp2241:
    000016a0: 	movq	0x60(%rsp), %r15
    000016a5: 	movq	0x68(%rsp), %r14
    000016aa: 	movq	%rbx, 0xc0(%rsp)
    000016b2: 	movq	%r15, %rax
    000016b5: 	addq	%r14, %rax
    000016b8: 	je	.Ltmp2242 # Offset: 5816
    000016ba: 	testq	%r15, %r15
    000016bd: 	je	.Ltmp2243 # Offset: 5821
.Ltmp2242:
    000016c3: 	movq	%r14, 0x58(%rsp)
    000016c8: 	cmpq	$0xf, %r14
    000016cc: 	ja	.Ltmp2244 # Offset: 5836
    000016d2: 	cmpq	$0x1, %r14
    000016d6: 	jne	.Ltmp2245 # Offset: 5846
    000016dc: 	movzbl	(%r15), %eax
    000016e0: 	movb	%al, 0xd0(%rsp)
    000016e7: 	movq	%rbx, %rax
.Ltmp2326:
    000016ea: 	movq	%r14, 0xc8(%rsp)
    000016f2: 	movb	$0x0, (%rax,%r14)
    000016f7: 	movabsq	$0x3fffffffffffffff, %rax
    00001701: 	subq	0xc8(%rsp), %rax
    00001709: 	cmpq	$0x18, %rax
    0000170d: 	jbe	.Ltmp2246 # Offset: 5901
    00001713: 	movl	$0x19, %edx
    00001718: 	leaq	DATAat0x38575(%rip), %rsi
    0000171f: 	movq	%r12, %rdi
    00001722: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5922
    00001727: 	cvttsd2si	init_value(%rip), %edx
    0000172f: 	movq	%r12, %r8
    00001732: 	movl	$0x1f40, %esi
    00001737: 	movq	%rbp, %rdi
    0000173a: 	leaq	_Z21test_goto_loop2_paramIsET_PKS0_iS0_(%rip), %rcx
    00001741: 	movswl	%dx, %edx
    00001744: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5956
    00001749: 	movq	0xc0(%rsp), %rdi
    00001751: 	cmpq	%rbx, %rdi
    00001754: 	je	.Ltmp2247 # Offset: 5972
    00001756: 	movq	0xd0(%rsp), %rax
    0000175e: 	leaq	0x1(%rax), %rsi
    00001762: 	callq	_ZdlPvm@PLT # Offset: 5986
.Ltmp2247:
    00001767: 	leaq	DATAat0x3858f(%rip), %rdx
    0000176e: 	movq	%r13, %rsi
    00001771: 	movq	%r12, %rdi
    00001774: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6004
    00001779: 	cvttsd2si	init_value(%rip), %edx
    00001781: 	movq	%r12, %r8
    00001784: 	movl	$0x1f40, %esi
    00001789: 	movq	%rbp, %rdi
    0000178c: 	leaq	_Z22test_goto_loop2_param2IsET_PKS0_iS0_(%rip), %rcx
    00001793: 	movswl	%dx, %edx
    00001796: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6038
    0000179b: 	movq	0xc0(%rsp), %rdi
    000017a3: 	cmpq	%rbx, %rdi
    000017a6: 	je	.Ltmp2248 # Offset: 6054
    000017a8: 	movq	0xd0(%rsp), %rax
    000017b0: 	leaq	0x1(%rax), %rsi
    000017b4: 	callq	_ZdlPvm@PLT # Offset: 6068
.Ltmp2248:
    000017b9: 	leaq	DATAat0x385aa(%rip), %rdx
    000017c0: 	movq	%r13, %rsi
    000017c3: 	movq	%r12, %rdi
    000017c6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6086
    000017cb: 	cvttsd2si	init_value(%rip), %edx
    000017d3: 	movq	%r12, %r8
    000017d6: 	movl	$0x1f40, %esi
    000017db: 	movq	%rbp, %rdi
    000017de: 	leaq	_Z21test_for_loop2_globalIsET_PKS0_iS0_(%rip), %rcx
    000017e5: 	movswl	%dx, %edx
    000017e8: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6120
    000017ed: 	movq	0xc0(%rsp), %rdi
    000017f5: 	cmpq	%rbx, %rdi
    000017f8: 	je	.Ltmp2249 # Offset: 6136
    000017fa: 	movq	0xd0(%rsp), %rax
    00001802: 	leaq	0x1(%rax), %rsi
    00001806: 	callq	_ZdlPvm@PLT # Offset: 6150
.Ltmp2249:
    0000180b: 	leaq	DATAat0x385c0(%rip), %rdx
    00001812: 	movq	%r13, %rsi
    00001815: 	movq	%r12, %rdi
    00001818: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6168
    0000181d: 	cvttsd2si	init_value(%rip), %edx
    00001825: 	movq	%r12, %r8
    00001828: 	movl	$0x1f40, %esi
    0000182d: 	movq	%rbp, %rdi
    00001830: 	leaq	_Z22test_for_loop2_global2IsET_PKS0_iS0_(%rip), %rcx
    00001837: 	movswl	%dx, %edx
    0000183a: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6202
    0000183f: 	movq	0xc0(%rsp), %rdi
    00001847: 	cmpq	%rbx, %rdi
    0000184a: 	je	.Ltmp2250 # Offset: 6218
    0000184c: 	movq	0xd0(%rsp), %rax
    00001854: 	leaq	0x1(%rax), %rsi
    00001858: 	callq	_ZdlPvm@PLT # Offset: 6232
.Ltmp2250:
    0000185d: 	movq	0x60(%rsp), %r15
    00001862: 	movq	0x68(%rsp), %r14
    00001867: 	movq	%rbx, 0xc0(%rsp)
    0000186f: 	movq	%r15, %rax
    00001872: 	addq	%r14, %rax
    00001875: 	je	.Ltmp2251 # Offset: 6261
    00001877: 	testq	%r15, %r15
    0000187a: 	je	.Ltmp2252 # Offset: 6266
.Ltmp2251:
    00001880: 	movq	%r14, 0x58(%rsp)
    00001885: 	cmpq	$0xf, %r14
    00001889: 	ja	.Ltmp2253 # Offset: 6281
    0000188f: 	cmpq	$0x1, %r14
    00001893: 	jne	.Ltmp2254 # Offset: 6291
    00001899: 	movzbl	(%r15), %eax
    0000189d: 	movb	%al, 0xd0(%rsp)
    000018a4: 	movq	%rbx, %rax
.Ltmp2324:
    000018a7: 	movq	%r14, 0xc8(%rsp)
    000018af: 	movb	$0x0, (%rax,%r14)
    000018b4: 	movabsq	$0x3fffffffffffffff, %rax
    000018be: 	subq	0xc8(%rsp), %rax
    000018c6: 	cmpq	$0x16, %rax
    000018ca: 	jbe	.Ltmp2255 # Offset: 6346
    000018d0: 	movl	$0x17, %edx
    000018d5: 	leaq	DATAat0x385d7(%rip), %rsi
    000018dc: 	movq	%r12, %rdi
    000018df: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6367
    000018e4: 	cvttsd2si	init_value(%rip), %edx
    000018ec: 	movq	%r12, %r8
    000018ef: 	movl	$0x1f40, %esi
    000018f4: 	movq	%rbp, %rdi
    000018f7: 	leaq	_Z23test_while_loop2_globalIsET_PKS0_iS0_(%rip), %rcx
    000018fe: 	movswl	%dx, %edx
    00001901: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6401
    00001906: 	movq	0xc0(%rsp), %rdi
    0000190e: 	cmpq	%rbx, %rdi
    00001911: 	je	.Ltmp2256 # Offset: 6417
    00001913: 	movq	0xd0(%rsp), %rax
    0000191b: 	leaq	0x1(%rax), %rsi
    0000191f: 	callq	_ZdlPvm@PLT # Offset: 6431
.Ltmp2256:
    00001924: 	leaq	DATAat0x385ef(%rip), %rdx
    0000192b: 	movq	%r13, %rsi
    0000192e: 	movq	%r12, %rdi
    00001931: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6449
    00001936: 	cvttsd2si	init_value(%rip), %edx
    0000193e: 	movq	%r12, %r8
    00001941: 	movl	$0x1f40, %esi
    00001946: 	movq	%rbp, %rdi
    00001949: 	leaq	_Z24test_while_loop2_global2IsET_PKS0_iS0_(%rip), %rcx
    00001950: 	movswl	%dx, %edx
    00001953: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6483
    00001958: 	movq	0xc0(%rsp), %rdi
    00001960: 	cmpq	%rbx, %rdi
    00001963: 	je	.Ltmp2257 # Offset: 6499
    00001965: 	movq	0xd0(%rsp), %rax
    0000196d: 	leaq	0x1(%rax), %rsi
    00001971: 	callq	_ZdlPvm@PLT # Offset: 6513
.Ltmp2257:
    00001976: 	leaq	DATAat0x38608(%rip), %rdx
    0000197d: 	movq	%r13, %rsi
    00001980: 	movq	%r12, %rdi
    00001983: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6531
    00001988: 	cvttsd2si	init_value(%rip), %edx
    00001990: 	movq	%r12, %r8
    00001993: 	movl	$0x1f40, %esi
    00001998: 	movq	%rbp, %rdi
    0000199b: 	leaq	_Z20test_do_loop2_globalIsET_PKS0_iS0_(%rip), %rcx
    000019a2: 	movswl	%dx, %edx
    000019a5: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6565
    000019aa: 	movq	0xc0(%rsp), %rdi
    000019b2: 	cmpq	%rbx, %rdi
    000019b5: 	je	.Ltmp2258 # Offset: 6581
    000019b7: 	movq	0xd0(%rsp), %rax
    000019bf: 	leaq	0x1(%rax), %rsi
    000019c3: 	callq	_ZdlPvm@PLT # Offset: 6595
.Ltmp2258:
    000019c8: 	movq	0x60(%rsp), %r15
    000019cd: 	movq	0x68(%rsp), %r14
    000019d2: 	movq	%rbx, 0xc0(%rsp)
    000019da: 	movq	%r15, %rax
    000019dd: 	addq	%r14, %rax
    000019e0: 	je	.Ltmp2259 # Offset: 6624
    000019e2: 	testq	%r15, %r15
    000019e5: 	je	.Ltmp2260 # Offset: 6629
.Ltmp2259:
    000019eb: 	movq	%r14, 0x58(%rsp)
    000019f0: 	cmpq	$0xf, %r14
    000019f4: 	ja	.Ltmp2261 # Offset: 6644
    000019fa: 	cmpq	$0x1, %r14
    000019fe: 	jne	.Ltmp2262 # Offset: 6654
    00001a04: 	movzbl	(%r15), %eax
    00001a08: 	movb	%al, 0xd0(%rsp)
    00001a0f: 	movq	%rbx, %rax
.Ltmp2330:
    00001a12: 	movq	%r14, 0xc8(%rsp)
    00001a1a: 	movb	$0x0, (%rax,%r14)
    00001a1f: 	movabsq	$0x3fffffffffffffff, %rax
    00001a29: 	subq	0xc8(%rsp), %rax
    00001a31: 	cmpq	$0x14, %rax
    00001a35: 	jbe	.Ltmp2263 # Offset: 6709
    00001a3b: 	movl	$0x15, %edx
    00001a40: 	leaq	DATAat0x3861d(%rip), %rsi
    00001a47: 	movq	%r12, %rdi
    00001a4a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6730
    00001a4f: 	cvttsd2si	init_value(%rip), %edx
    00001a57: 	movq	%r12, %r8
    00001a5a: 	movl	$0x1f40, %esi
    00001a5f: 	movq	%rbp, %rdi
    00001a62: 	leaq	_Z21test_do_loop2_global2IsET_PKS0_iS0_(%rip), %rcx
    00001a69: 	movswl	%dx, %edx
    00001a6c: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6764
    00001a71: 	movq	0xc0(%rsp), %rdi
    00001a79: 	cmpq	%rbx, %rdi
    00001a7c: 	je	.Ltmp2264 # Offset: 6780
    00001a7e: 	movq	0xd0(%rsp), %rax
    00001a86: 	leaq	0x1(%rax), %rsi
    00001a8a: 	callq	_ZdlPvm@PLT # Offset: 6794
.Ltmp2264:
    00001a8f: 	leaq	DATAat0x38633(%rip), %rdx
    00001a96: 	movq	%r13, %rsi
    00001a99: 	movq	%r12, %rdi
    00001a9c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6812
    00001aa1: 	cvttsd2si	init_value(%rip), %edx
    00001aa9: 	movq	%r12, %r8
    00001aac: 	movl	$0x1f40, %esi
    00001ab1: 	movq	%rbp, %rdi
    00001ab4: 	leaq	_Z22test_goto_loop2_globalIsET_PKS0_iS0_(%rip), %rcx
    00001abb: 	movswl	%dx, %edx
    00001abe: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6846
    00001ac3: 	movq	0xc0(%rsp), %rdi
    00001acb: 	cmpq	%rbx, %rdi
    00001ace: 	je	.Ltmp2265 # Offset: 6862
    00001ad0: 	movq	0xd0(%rsp), %rax
    00001ad8: 	leaq	0x1(%rax), %rsi
    00001adc: 	callq	_ZdlPvm@PLT # Offset: 6876
.Ltmp2265:
    00001ae1: 	leaq	DATAat0x3864a(%rip), %rdx
    00001ae8: 	movq	%r13, %rsi
    00001aeb: 	movq	%r12, %rdi
    00001aee: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6894
    00001af3: 	cvttsd2si	init_value(%rip), %edx
    00001afb: 	movq	%r12, %r8
    00001afe: 	movl	$0x1f40, %esi
    00001b03: 	movq	%rbp, %rdi
    00001b06: 	leaq	_Z23test_goto_loop2_global2IsET_PKS0_iS0_(%rip), %rcx
    00001b0d: 	movswl	%dx, %edx
    00001b10: 	callq	_Z13test_one_loopIsPFsPKsisEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6928
    00001b15: 	movq	0xc0(%rsp), %rdi
    00001b1d: 	cmpq	%rbx, %rdi
    00001b20: 	je	.Ltmp2266 # Offset: 6944
    00001b22: 	movq	0xd0(%rsp), %rax
    00001b2a: 	leaq	0x1(%rax), %rsi
    00001b2e: 	callq	_ZdlPvm@PLT # Offset: 6958
.Ltmp2266:
    00001b33: 	leaq	0xa0(%rsp), %rdi
    00001b3b: 	leaq	DATAat0x38662(%rip), %rdx
    00001b42: 	movq	%r13, %rsi
    00001b45: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6981
    00001b4a: 	movl	iterations(%rip), %edx
    00001b50: 	xorl	%r8d, %r8d
    00001b53: 	xorl	%ecx, %ecx
    00001b55: 	movl	$0x1f40, %esi
    00001b5a: 	movq	0xa0(%rsp), %rdi
    00001b62: 	callq	_Z9summarizePKciiii # Offset: 7010
    00001b67: 	leaq	DATAat0x38675(%rip), %rdx
    00001b6e: 	movq	%r13, %rsi
    00001b71: 	movq	%r12, %rdi
    00001b74: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7028
    00001b79: 	movq	%r12, %r8
    00001b7c: 	movl	$0x7d0, %edx
    00001b81: 	movl	$0x1f40, %esi
    00001b86: 	movq	%rbp, %rdi
    00001b89: 	leaq	_Z18test_for_loop3_optIsET_PKS0_iS0_(%rip), %rcx
    00001b90: 	callq	_Z14test_one_loop3IsPFsPKsisEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7056
    00001b95: 	movq	0xc0(%rsp), %rdi
    00001b9d: 	cmpq	%rbx, %rdi
    00001ba0: 	je	.Ltmp2267 # Offset: 7072
    00001ba2: 	movq	0xd0(%rsp), %rax
    00001baa: 	leaq	0x1(%rax), %rsi
    00001bae: 	callq	_ZdlPvm@PLT # Offset: 7086
.Ltmp2267:
    00001bb3: 	movq	0x60(%rsp), %r15
    00001bb8: 	movq	0x68(%rsp), %r14
    00001bbd: 	movq	%rbx, 0xc0(%rsp)
    00001bc5: 	movq	%r15, %rax
    00001bc8: 	addq	%r14, %rax
    00001bcb: 	je	.Ltmp2268 # Offset: 7115
    00001bcd: 	testq	%r15, %r15
    00001bd0: 	je	.Ltmp2269 # Offset: 7120
.Ltmp2268:
    00001bd6: 	movq	%r14, 0x58(%rsp)
    00001bdb: 	cmpq	$0xf, %r14
    00001bdf: 	ja	.Ltmp2270 # Offset: 7135
    00001be5: 	cmpq	$0x1, %r14
    00001be9: 	jne	.Ltmp2271 # Offset: 7145
    00001bef: 	movzbl	(%r15), %eax
    00001bf3: 	movb	%al, 0xd0(%rsp)
    00001bfa: 	movq	%rbx, %rax
.Ltmp2328:
    00001bfd: 	movq	%r14, 0xc8(%rsp)
    00001c05: 	movb	$0x0, (%rax,%r14)
    00001c0a: 	movabsq	$0x3fffffffffffffff, %rax
    00001c14: 	subq	0xc8(%rsp), %rax
    00001c1c: 	cmpq	$0x16, %rax
    00001c20: 	jbe	.Ltmp2272 # Offset: 7200
    00001c26: 	movl	$0x17, %edx
    00001c2b: 	leaq	DATAat0x3868c(%rip), %rsi
    00001c32: 	movq	%r12, %rdi
    00001c35: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 7221
    00001c3a: 	movq	%r12, %r8
    00001c3d: 	movl	$0x7d0, %edx
    00001c42: 	movl	$0x1f40, %esi
    00001c47: 	movq	%rbp, %rdi
    00001c4a: 	leaq	_Z22test_for_loop3_halfoptIsET_PKS0_iS0_(%rip), %rcx
    00001c51: 	callq	_Z14test_one_loop3IsPFsPKsisEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7249
    00001c56: 	movq	0xc0(%rsp), %rdi
    00001c5e: 	cmpq	%rbx, %rdi
    00001c61: 	je	.Ltmp2273 # Offset: 7265
    00001c63: 	movq	0xd0(%rsp), %rax
    00001c6b: 	leaq	0x1(%rax), %rsi
    00001c6f: 	callq	_ZdlPvm@PLT # Offset: 7279
.Ltmp2273:
    00001c74: 	leaq	DATAat0x386a4(%rip), %rdx
    00001c7b: 	movq	%r13, %rsi
    00001c7e: 	movq	%r12, %rdi
    00001c81: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7297
    00001c86: 	movq	%r12, %r8
    00001c89: 	movl	$0x7d0, %edx
    00001c8e: 	movl	$0x1f40, %esi
    00001c93: 	movq	%rbp, %rdi
    00001c96: 	leaq	_Z20test_while_loop3_optIsET_PKS0_iS0_(%rip), %rcx
    00001c9d: 	callq	_Z14test_one_loop3IsPFsPKsisEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7325
    00001ca2: 	movq	0xc0(%rsp), %rdi
    00001caa: 	cmpq	%rbx, %rdi
    00001cad: 	je	.Ltmp2274 # Offset: 7341
    00001caf: 	movq	0xd0(%rsp), %rax
    00001cb7: 	leaq	0x1(%rax), %rsi
    00001cbb: 	callq	_ZdlPvm@PLT # Offset: 7355
.Ltmp2274:
    00001cc0: 	leaq	DATAat0x386bd(%rip), %rdx
    00001cc7: 	movq	%r13, %rsi
    00001cca: 	movq	%r12, %rdi
    00001ccd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7373
    00001cd2: 	movq	%r12, %r8
    00001cd5: 	movl	$0x7d0, %edx
    00001cda: 	movl	$0x1f40, %esi
    00001cdf: 	movq	%rbp, %rdi
    00001ce2: 	leaq	_Z24test_while_loop3_halfoptIsET_PKS0_iS0_(%rip), %rcx
    00001ce9: 	callq	_Z14test_one_loop3IsPFsPKsisEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7401
    00001cee: 	movq	0xc0(%rsp), %rdi
    00001cf6: 	cmpq	%rbx, %rdi
    00001cf9: 	je	.Ltmp2275 # Offset: 7417
    00001cfb: 	movq	0xd0(%rsp), %rax
    00001d03: 	leaq	0x1(%rax), %rsi
    00001d07: 	callq	_ZdlPvm@PLT # Offset: 7431
.Ltmp2275:
    00001d0c: 	leaq	DATAat0x386d7(%rip), %rdx
    00001d13: 	movq	%r13, %rsi
    00001d16: 	movq	%r12, %rdi
    00001d19: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7449
    00001d1e: 	movq	%r12, %r8
    00001d21: 	movl	$0x7d0, %edx
    00001d26: 	movl	$0x1f40, %esi
    00001d2b: 	movq	%rbp, %rdi
    00001d2e: 	leaq	_Z17test_do_loop3_optIsET_PKS0_iS0_(%rip), %rcx
    00001d35: 	callq	_Z14test_one_loop3IsPFsPKsisEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7477
    00001d3a: 	movq	0xc0(%rsp), %rdi
    00001d42: 	cmpq	%rbx, %rdi
    00001d45: 	je	.Ltmp2276 # Offset: 7493
    00001d47: 	movq	0xd0(%rsp), %rax
    00001d4f: 	leaq	0x1(%rax), %rsi
    00001d53: 	callq	_ZdlPvm@PLT # Offset: 7507
.Ltmp2276:
    00001d58: 	leaq	DATAat0x386ed(%rip), %rdx
    00001d5f: 	movq	%r13, %rsi
    00001d62: 	movq	%r12, %rdi
    00001d65: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7525
    00001d6a: 	movq	%r12, %r8
    00001d6d: 	movl	$0x7d0, %edx
    00001d72: 	movl	$0x1f40, %esi
    00001d77: 	movq	%rbp, %rdi
    00001d7a: 	leaq	_Z21test_do_loop3_halfoptIsET_PKS0_iS0_(%rip), %rcx
    00001d81: 	callq	_Z14test_one_loop3IsPFsPKsisEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7553
    00001d86: 	movq	0xc0(%rsp), %rdi
    00001d8e: 	cmpq	%rbx, %rdi
    00001d91: 	je	.Ltmp2277 # Offset: 7569
    00001d93: 	movq	0xd0(%rsp), %rax
    00001d9b: 	leaq	0x1(%rax), %rsi
    00001d9f: 	callq	_ZdlPvm@PLT # Offset: 7583
.Ltmp2277:
    00001da4: 	leaq	DATAat0x38704(%rip), %rdx
    00001dab: 	movq	%r13, %rsi
    00001dae: 	movq	%r12, %rdi
    00001db1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7601
    00001db6: 	movq	%r12, %r8
    00001db9: 	movl	$0x7d0, %edx
    00001dbe: 	movl	$0x1f40, %esi
    00001dc3: 	movq	%rbp, %rdi
    00001dc6: 	leaq	_Z19test_goto_loop3_optIsET_PKS0_iS0_(%rip), %rcx
    00001dcd: 	callq	_Z14test_one_loop3IsPFsPKsisEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7629
    00001dd2: 	movq	0xc0(%rsp), %rdi
    00001dda: 	cmpq	%rbx, %rdi
    00001ddd: 	je	.Ltmp2278 # Offset: 7645
    00001ddf: 	movq	0xd0(%rsp), %rax
    00001de7: 	leaq	0x1(%rax), %rsi
    00001deb: 	callq	_ZdlPvm@PLT # Offset: 7659
.Ltmp2278:
    00001df0: 	leaq	DATAat0x3871c(%rip), %rdx
    00001df7: 	movq	%r13, %rsi
    00001dfa: 	movq	%r12, %rdi
    00001dfd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7677
    00001e02: 	movq	%r12, %r8
    00001e05: 	movl	$0x7d0, %edx
    00001e0a: 	movl	$0x1f40, %esi
    00001e0f: 	movq	%rbp, %rdi
    00001e12: 	leaq	_Z23test_goto_loop3_halfoptIsET_PKS0_iS0_(%rip), %rcx
    00001e19: 	callq	_Z14test_one_loop3IsPFsPKsisEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7705
    00001e1e: 	movq	0xc0(%rsp), %rdi
    00001e26: 	cmpq	%rbx, %rdi
    00001e29: 	je	.Ltmp2279 # Offset: 7721
    00001e2b: 	movq	0xd0(%rsp), %rax
    00001e33: 	leaq	0x1(%rax), %rsi
    00001e37: 	callq	_ZdlPvm@PLT # Offset: 7735
.Ltmp2279:
    00001e3c: 	leaq	DATAat0x38735(%rip), %rdx
    00001e43: 	movq	%r13, %rsi
    00001e46: 	movq	%r12, %rdi
    00001e49: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7753
    00001e4e: 	movq	%r12, %r8
    00001e51: 	movl	$0x7d0, %edx
    00001e56: 	movl	$0x1f40, %esi
    00001e5b: 	movq	%rbp, %rdi
    00001e5e: 	leaq	_Z20test_for_loop3_paramIsET_PKS0_iS0_(%rip), %rcx
    00001e65: 	callq	_Z14test_one_loop3IsPFsPKsisEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7781
    00001e6a: 	movq	0xc0(%rsp), %rdi
    00001e72: 	cmpq	%rbx, %rdi
    00001e75: 	je	.Ltmp2280 # Offset: 7797
    00001e77: 	movq	0xd0(%rsp), %rax
    00001e7f: 	leaq	0x1(%rax), %rsi
    00001e83: 	callq	_ZdlPvm@PLT # Offset: 7811
.Ltmp2280:
    00001e88: 	leaq	DATAat0x3874e(%rip), %rdx
    00001e8f: 	movq	%r13, %rsi
    00001e92: 	movq	%r12, %rdi
    00001e95: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7829
    00001e9a: 	movq	%r12, %r8
    00001e9d: 	movl	$0x7d0, %edx
    00001ea2: 	movl	$0x1f40, %esi
    00001ea7: 	movq	%rbp, %rdi
    00001eaa: 	leaq	_Z22test_while_loop3_paramIsET_PKS0_iS0_(%rip), %rcx
    00001eb1: 	callq	_Z14test_one_loop3IsPFsPKsisEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7857
    00001eb6: 	movq	0xc0(%rsp), %rdi
    00001ebe: 	cmpq	%rbx, %rdi
    00001ec1: 	je	.Ltmp2281 # Offset: 7873
    00001ec3: 	movq	0xd0(%rsp), %rax
    00001ecb: 	leaq	0x1(%rax), %rsi
    00001ecf: 	callq	_ZdlPvm@PLT # Offset: 7887
.Ltmp2281:
    00001ed4: 	leaq	DATAat0x38769(%rip), %rdx
    00001edb: 	movq	%r13, %rsi
    00001ede: 	movq	%r12, %rdi
    00001ee1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7905
    00001ee6: 	movq	%r12, %r8
    00001ee9: 	movl	$0x7d0, %edx
    00001eee: 	movl	$0x1f40, %esi
    00001ef3: 	movq	%rbp, %rdi
    00001ef6: 	leaq	_Z19test_do_loop3_paramIsET_PKS0_iS0_(%rip), %rcx
    00001efd: 	callq	_Z14test_one_loop3IsPFsPKsisEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7933
    00001f02: 	movq	0xc0(%rsp), %rdi
    00001f0a: 	cmpq	%rbx, %rdi
    00001f0d: 	je	.Ltmp2282 # Offset: 7949
    00001f0f: 	movq	0xd0(%rsp), %rax
    00001f17: 	leaq	0x1(%rax), %rsi
    00001f1b: 	callq	_ZdlPvm@PLT # Offset: 7963
.Ltmp2282:
    00001f20: 	leaq	DATAat0x38781(%rip), %rdx
    00001f27: 	movq	%r13, %rsi
    00001f2a: 	movq	%r12, %rdi
    00001f2d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7981
    00001f32: 	movq	%r12, %r8
    00001f35: 	movl	$0x7d0, %edx
    00001f3a: 	movl	$0x1f40, %esi
    00001f3f: 	movq	%rbp, %rdi
    00001f42: 	leaq	_Z21test_goto_loop3_paramIsET_PKS0_iS0_(%rip), %rcx
    00001f49: 	callq	_Z14test_one_loop3IsPFsPKsisEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8009
    00001f4e: 	movq	0xc0(%rsp), %rdi
    00001f56: 	cmpq	%rbx, %rdi
    00001f59: 	je	.Ltmp2283 # Offset: 8025
    00001f5b: 	movq	0xd0(%rsp), %rax
    00001f63: 	leaq	0x1(%rax), %rsi
    00001f67: 	callq	_ZdlPvm@PLT # Offset: 8039
.Ltmp2283:
    00001f6c: 	leaq	DATAat0x3879b(%rip), %rdx
    00001f73: 	movq	%r13, %rsi
    00001f76: 	movq	%r12, %rdi
    00001f79: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8057
    00001f7e: 	movl	iterations(%rip), %edx
    00001f84: 	xorl	%r8d, %r8d
    00001f87: 	xorl	%ecx, %ecx
    00001f89: 	movl	$0x1f40, %esi
    00001f8e: 	movq	0xc0(%rsp), %rdi
    00001f96: 	callq	_Z9summarizePKciiii # Offset: 8086
    00001f9b: 	movq	0xc0(%rsp), %rdi
    00001fa3: 	cmpq	%rbx, %rdi
    00001fa6: 	je	.Ltmp2284 # Offset: 8102
    00001fa8: 	movq	0xd0(%rsp), %rax
    00001fb0: 	leaq	0x1(%rax), %rsi
    00001fb4: 	callq	_ZdlPvm@PLT # Offset: 8116
.Ltmp2284:
    00001fb9: 	movq	0xa0(%rsp), %rdi
    00001fc1: 	leaq	0xb0(%rsp), %rax
    00001fc9: 	cmpq	%rax, %rdi
    00001fcc: 	je	.Ltmp2285 # Offset: 8140
    00001fce: 	movq	0xb0(%rsp), %rax
    00001fd6: 	leaq	0x1(%rax), %rsi
    00001fda: 	callq	_ZdlPvm@PLT # Offset: 8154
.Ltmp2285:
    00001fdf: 	movq	0x80(%rsp), %rdi
    00001fe7: 	leaq	0x90(%rsp), %rax
    00001fef: 	cmpq	%rax, %rdi
    00001ff2: 	je	.Ltmp2286 # Offset: 8178
    00001ff4: 	movq	0x90(%rsp), %rax
    00001ffc: 	leaq	0x1(%rax), %rsi
    00002000: 	callq	_ZdlPvm@PLT # Offset: 8192
.Ltmp2286:
    00002005: 	movq	0x60(%rsp), %rdi
    0000200a: 	cmpq	0x40(%rsp), %rdi
    0000200f: 	je	.Ltmp2287 # Offset: 8207
    00002011: 	movq	0x70(%rsp), %rax
    00002016: 	leaq	0x1(%rax), %rsi
    0000201a: 	callq	_ZdlPvm@PLT # Offset: 8218
.Ltmp2287:
    0000201f: 	movq	0x3f68(%rsp), %rax
    00002027: 	subq	%fs:0x28, %rax
    00002030: 	jne	.Ltmp2288 # Offset: 8240
    00002036: 	addq	$0x3f78, %rsp
    0000203d: 	popq	%rbx
    0000203e: 	popq	%rbp
    0000203f: 	popq	%r12
    00002041: 	popq	%r13
    00002043: 	popq	%r14
    00002045: 	popq	%r15
    00002047: 	retq # Offset: 8263
    00002048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2107:
    00002050: 	addq	$0x20, %r14
    00002054: 	cmpq	%rbx, %r14
    00002057: 	jne	.Ltmp2108 # Offset: 8279
    0000205d: 	addq	$0x8, (%rsp)
    00002062: 	movq	(%rsp), %rax
    00002066: 	cmpq	%rax, 0x8(%rsp)
    0000206b: 	ja	.Ltmp2109 # Offset: 8299
    00002071: 	jmp	.Ltmp2106 # Offset: 8305
.Ltmp2122:
    00002076: 	testq	%r12, %r12
    00002079: 	jne	.Ltmp2289 # Offset: 8313
    0000207f: 	movq	%rbx, %rax
    00002082: 	jmp	.Ltmp2290 # Offset: 8322
.Ltmp2227:
    00002087: 	testq	%r14, %r14
    0000208a: 	jne	.Ltmp2291 # Offset: 8330
    00002090: 	movq	%rbx, %rax
    00002093: 	jmp	.Ltmp2292 # Offset: 8339
.Ltmp2134:
    00002098: 	testq	%r13, %r13
    0000209b: 	jne	.Ltmp2293 # Offset: 8347
    000020a1: 	movq	%rbx, %rax
    000020a4: 	jmp	.Ltmp2294 # Offset: 8356
.Ltmp2128:
    000020a9: 	testq	%r13, %r13
    000020ac: 	jne	.Ltmp2295 # Offset: 8364
    000020b2: 	movq	%rbx, %rax
    000020b5: 	jmp	.Ltmp2296 # Offset: 8373
.Ltmp2160:
    000020ba: 	testq	%r14, %r14
    000020bd: 	jne	.Ltmp2297 # Offset: 8381
    000020c3: 	movq	%rbx, %rax
    000020c6: 	jmp	.Ltmp2298 # Offset: 8390
.Ltmp2154:
    000020cb: 	testq	%r14, %r14
    000020ce: 	jne	.Ltmp2299 # Offset: 8398
    000020d4: 	movq	%rbx, %rax
    000020d7: 	jmp	.Ltmp2300 # Offset: 8407
.Ltmp2147:
    000020dc: 	testq	%r14, %r14
    000020df: 	jne	.Ltmp2301 # Offset: 8415
    000020e5: 	movq	%rbx, %rax
    000020e8: 	jmp	.Ltmp2302 # Offset: 8424
.Ltmp2140:
    000020ed: 	testq	%r13, %r13
    000020f0: 	jne	.Ltmp2303 # Offset: 8432
    000020f6: 	movq	%rbx, %rax
    000020f9: 	jmp	.Ltmp2304 # Offset: 8441
.Ltmp2220:
    000020fe: 	testq	%r14, %r14
    00002101: 	jne	.Ltmp2305 # Offset: 8449
    00002107: 	movq	%rbx, %rax
    0000210a: 	jmp	.Ltmp2306 # Offset: 8458
.Ltmp2213:
    0000210f: 	testq	%r14, %r14
    00002112: 	jne	.Ltmp2307 # Offset: 8466
    00002118: 	movq	%rbx, %rax
    0000211b: 	jmp	.Ltmp2308 # Offset: 8475
.Ltmp2207:
    00002120: 	testq	%r14, %r14
    00002123: 	jne	.Ltmp2309 # Offset: 8483
    00002129: 	movq	%rbx, %rax
    0000212c: 	jmp	.Ltmp2310 # Offset: 8492
.Ltmp2200:
    00002131: 	testq	%r14, %r14
    00002134: 	jne	.Ltmp2311 # Offset: 8500
    0000213a: 	movq	%rbx, %rax
    0000213d: 	jmp	.Ltmp2312 # Offset: 8509
.Ltmp2194:
    00002142: 	testq	%r14, %r14
    00002145: 	jne	.Ltmp2313 # Offset: 8517
    0000214b: 	movq	%rbx, %rax
    0000214e: 	jmp	.Ltmp2314 # Offset: 8526
.Ltmp2186:
    00002153: 	testq	%r14, %r14
    00002156: 	jne	.Ltmp2315 # Offset: 8534
    0000215c: 	movq	%rbx, %rax
    0000215f: 	jmp	.Ltmp2316 # Offset: 8543
.Ltmp2180:
    00002164: 	testq	%r14, %r14
    00002167: 	jne	.Ltmp2317 # Offset: 8551
    0000216d: 	movq	%rbx, %rax
    00002170: 	jmp	.Ltmp2318 # Offset: 8560
.Ltmp2171:
    00002175: 	testq	%r14, %r14
    00002178: 	jne	.Ltmp2319 # Offset: 8568
    0000217e: 	movq	%rbx, %rax
    00002181: 	jmp	.Ltmp2320 # Offset: 8577
.Ltmp2179:
    00002186: 	leaq	0x58(%rsp), %rsi
    0000218b: 	xorl	%edx, %edx
    0000218d: 	movq	%r12, %rdi
    00002190: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8592
    00002195: 	movq	%rax, 0xc0(%rsp)
    0000219d: 	movq	%rax, %rdi
    000021a0: 	movq	0x58(%rsp), %rax
    000021a5: 	movq	%rax, 0xd0(%rsp)
.Ltmp2348:
    000021ad: 	movq	(%rsp), %rsi
    000021b1: 	movq	%r14, %rdx
    000021b4: 	callq	memcpy@PLT # Offset: 8628
    000021b9: 	movq	0x58(%rsp), %r14
    000021be: 	movq	0xc0(%rsp), %rax
    000021c6: 	jmp	.Ltmp2318 # Offset: 8646
.Ltmp2170:
    000021cb: 	leaq	0x58(%rsp), %rsi
    000021d0: 	xorl	%edx, %edx
    000021d2: 	movq	%r12, %rdi
    000021d5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8661
    000021da: 	movq	%rax, 0xc0(%rsp)
    000021e2: 	movq	%rax, %rdi
    000021e5: 	movq	0x58(%rsp), %rax
    000021ea: 	movq	%rax, 0xd0(%rsp)
.Ltmp2349:
    000021f2: 	movq	(%rsp), %rsi
    000021f6: 	movq	%r14, %rdx
    000021f9: 	callq	memcpy@PLT # Offset: 8697
    000021fe: 	movq	0x58(%rsp), %r14
    00002203: 	movq	0xc0(%rsp), %rax
    0000220b: 	jmp	.Ltmp2320 # Offset: 8715
.Ltmp2193:
    00002210: 	leaq	0x58(%rsp), %rsi
    00002215: 	xorl	%edx, %edx
    00002217: 	movq	%r12, %rdi
    0000221a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8730
    0000221f: 	movq	%rax, 0xc0(%rsp)
    00002227: 	movq	%rax, %rdi
    0000222a: 	movq	0x58(%rsp), %rax
    0000222f: 	movq	%rax, 0xd0(%rsp)
.Ltmp2346:
    00002237: 	movq	(%rsp), %rsi
    0000223b: 	movq	%r14, %rdx
    0000223e: 	callq	memcpy@PLT # Offset: 8766
    00002243: 	movq	0x58(%rsp), %r14
    00002248: 	movq	0xc0(%rsp), %rax
    00002250: 	jmp	.Ltmp2314 # Offset: 8784
.Ltmp2185:
    00002255: 	leaq	0x58(%rsp), %rsi
    0000225a: 	xorl	%edx, %edx
    0000225c: 	movq	%r12, %rdi
    0000225f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8799
    00002264: 	movq	%rax, 0xc0(%rsp)
    0000226c: 	movq	%rax, %rdi
    0000226f: 	movq	0x58(%rsp), %rax
    00002274: 	movq	%rax, 0xd0(%rsp)
.Ltmp2347:
    0000227c: 	movq	(%rsp), %rsi
    00002280: 	movq	%r14, %rdx
    00002283: 	callq	memcpy@PLT # Offset: 8835
    00002288: 	movq	0x58(%rsp), %r14
    0000228d: 	movq	0xc0(%rsp), %rax
    00002295: 	jmp	.Ltmp2316 # Offset: 8853
.Ltmp2206:
    0000229a: 	leaq	0x58(%rsp), %rsi
    0000229f: 	xorl	%edx, %edx
    000022a1: 	movq	%r12, %rdi
    000022a4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8868
    000022a9: 	movq	%rax, 0xc0(%rsp)
    000022b1: 	movq	%rax, %rdi
    000022b4: 	movq	0x58(%rsp), %rax
    000022b9: 	movq	%rax, 0xd0(%rsp)
.Ltmp2344:
    000022c1: 	movq	(%rsp), %rsi
    000022c5: 	movq	%r14, %rdx
    000022c8: 	callq	memcpy@PLT # Offset: 8904
    000022cd: 	movq	0x58(%rsp), %r14
    000022d2: 	movq	0xc0(%rsp), %rax
    000022da: 	jmp	.Ltmp2310 # Offset: 8922
.Ltmp2199:
    000022df: 	leaq	0x58(%rsp), %rsi
    000022e4: 	xorl	%edx, %edx
    000022e6: 	movq	%r12, %rdi
    000022e9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8937
    000022ee: 	movq	%rax, 0xc0(%rsp)
    000022f6: 	movq	%rax, %rdi
    000022f9: 	movq	0x58(%rsp), %rax
    000022fe: 	movq	%rax, 0xd0(%rsp)
.Ltmp2345:
    00002306: 	movq	(%rsp), %rsi
    0000230a: 	movq	%r14, %rdx
    0000230d: 	callq	memcpy@PLT # Offset: 8973
    00002312: 	movq	0x58(%rsp), %r14
    00002317: 	movq	0xc0(%rsp), %rax
    0000231f: 	jmp	.Ltmp2312 # Offset: 8991
.Ltmp2219:
    00002324: 	leaq	0x58(%rsp), %rsi
    00002329: 	xorl	%edx, %edx
    0000232b: 	movq	%r12, %rdi
    0000232e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9006
    00002333: 	movq	%rax, 0xc0(%rsp)
    0000233b: 	movq	%rax, %rdi
    0000233e: 	movq	0x58(%rsp), %rax
    00002343: 	movq	%rax, 0xd0(%rsp)
.Ltmp2342:
    0000234b: 	movq	(%rsp), %rsi
    0000234f: 	movq	%r14, %rdx
    00002352: 	callq	memcpy@PLT # Offset: 9042
    00002357: 	movq	0x58(%rsp), %r14
    0000235c: 	movq	0xc0(%rsp), %rax
    00002364: 	jmp	.Ltmp2306 # Offset: 9060
.Ltmp2212:
    00002369: 	leaq	0x58(%rsp), %rsi
    0000236e: 	xorl	%edx, %edx
    00002370: 	movq	%r12, %rdi
    00002373: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9075
    00002378: 	movq	%rax, 0xc0(%rsp)
    00002380: 	movq	%rax, %rdi
    00002383: 	movq	0x58(%rsp), %rax
    00002388: 	movq	%rax, 0xd0(%rsp)
.Ltmp2343:
    00002390: 	movq	(%rsp), %rsi
    00002394: 	movq	%r14, %rdx
    00002397: 	callq	memcpy@PLT # Offset: 9111
    0000239c: 	movq	0x58(%rsp), %r14
    000023a1: 	movq	0xc0(%rsp), %rax
    000023a9: 	jmp	.Ltmp2308 # Offset: 9129
.Ltmp2146:
    000023ae: 	leaq	0x58(%rsp), %rsi
    000023b3: 	xorl	%edx, %edx
    000023b5: 	movq	%r12, %rdi
    000023b8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9144
    000023bd: 	movq	%rax, 0xc0(%rsp)
    000023c5: 	movq	%rax, %rdi
    000023c8: 	movq	0x58(%rsp), %rax
    000023cd: 	movq	%rax, 0xd0(%rsp)
.Ltmp2340:
    000023d5: 	movq	(%rsp), %rsi
    000023d9: 	movq	%r14, %rdx
    000023dc: 	callq	memcpy@PLT # Offset: 9180
    000023e1: 	movq	0x58(%rsp), %r14
    000023e6: 	movq	0xc0(%rsp), %rax
    000023ee: 	jmp	.Ltmp2302 # Offset: 9198
.Ltmp2139:
    000023f3: 	leaq	0x58(%rsp), %rsi
    000023f8: 	xorl	%edx, %edx
    000023fa: 	movq	%r12, %rdi
    000023fd: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9213
    00002402: 	movq	%rax, 0xc0(%rsp)
    0000240a: 	movq	%rax, %rdi
    0000240d: 	movq	0x58(%rsp), %rax
    00002412: 	movq	%rax, 0xd0(%rsp)
.Ltmp2341:
    0000241a: 	movq	%r13, %rdx
    0000241d: 	movq	%r14, %rsi
    00002420: 	callq	memcpy@PLT # Offset: 9248
    00002425: 	movq	0x58(%rsp), %r13
    0000242a: 	movq	0xc0(%rsp), %rax
    00002432: 	jmp	.Ltmp2304 # Offset: 9266
.Ltmp2159:
    00002437: 	leaq	0x58(%rsp), %rsi
    0000243c: 	xorl	%edx, %edx
    0000243e: 	movq	%r12, %rdi
    00002441: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9281
    00002446: 	movq	%rax, 0xc0(%rsp)
    0000244e: 	movq	%rax, %rdi
    00002451: 	movq	0x58(%rsp), %rax
    00002456: 	movq	%rax, 0xd0(%rsp)
.Ltmp2338:
    0000245e: 	movq	(%rsp), %rsi
    00002462: 	movq	%r14, %rdx
    00002465: 	callq	memcpy@PLT # Offset: 9317
    0000246a: 	movq	0x58(%rsp), %r14
    0000246f: 	movq	0xc0(%rsp), %rax
    00002477: 	jmp	.Ltmp2298 # Offset: 9335
.Ltmp2153:
    0000247c: 	leaq	0x58(%rsp), %rsi
    00002481: 	xorl	%edx, %edx
    00002483: 	movq	%r12, %rdi
    00002486: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9350
    0000248b: 	movq	%rax, 0xc0(%rsp)
    00002493: 	movq	%rax, %rdi
    00002496: 	movq	0x58(%rsp), %rax
    0000249b: 	movq	%rax, 0xd0(%rsp)
.Ltmp2339:
    000024a3: 	movq	(%rsp), %rsi
    000024a7: 	movq	%r14, %rdx
    000024aa: 	callq	memcpy@PLT # Offset: 9386
    000024af: 	movq	0x58(%rsp), %r14
    000024b4: 	movq	0xc0(%rsp), %rax
    000024bc: 	jmp	.Ltmp2300 # Offset: 9404
.Ltmp2226:
    000024c1: 	leaq	0x58(%rsp), %rsi
    000024c6: 	xorl	%edx, %edx
    000024c8: 	movq	%r12, %rdi
    000024cb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9419
    000024d0: 	movq	%rax, 0xc0(%rsp)
    000024d8: 	movq	%rax, %rdi
    000024db: 	movq	0x58(%rsp), %rax
    000024e0: 	movq	%rax, 0xd0(%rsp)
.Ltmp2335:
    000024e8: 	movq	%r14, %rdx
    000024eb: 	movq	%r15, %rsi
    000024ee: 	callq	memcpy@PLT # Offset: 9454
    000024f3: 	movq	0x58(%rsp), %r14
    000024f8: 	movq	0xc0(%rsp), %rax
    00002500: 	jmp	.Ltmp2292 # Offset: 9472
.Ltmp2236:
    00002505: 	testq	%r14, %r14
    00002508: 	jne	.Ltmp2321 # Offset: 9480
    0000250e: 	movq	%rbx, %rax
    00002511: 	jmp	.Ltmp2322 # Offset: 9489
.Ltmp2254:
    00002516: 	testq	%r14, %r14
    00002519: 	jne	.Ltmp2323 # Offset: 9497
    0000251f: 	movq	%rbx, %rax
    00002522: 	jmp	.Ltmp2324 # Offset: 9506
.Ltmp2245:
    00002527: 	testq	%r14, %r14
    0000252a: 	jne	.Ltmp2325 # Offset: 9514
    00002530: 	movq	%rbx, %rax
    00002533: 	jmp	.Ltmp2326 # Offset: 9523
.Ltmp2133:
    00002538: 	leaq	0x58(%rsp), %rsi
    0000253d: 	xorl	%edx, %edx
    0000253f: 	movq	%r12, %rdi
    00002542: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9538
    00002547: 	movq	%rax, 0xc0(%rsp)
    0000254f: 	movq	%rax, %rdi
    00002552: 	movq	0x58(%rsp), %rax
    00002557: 	movq	%rax, 0xd0(%rsp)
.Ltmp2336:
    0000255f: 	movq	%r13, %rdx
    00002562: 	movq	%r14, %rsi
    00002565: 	callq	memcpy@PLT # Offset: 9573
    0000256a: 	movq	0x58(%rsp), %r13
    0000256f: 	movq	0xc0(%rsp), %rax
    00002577: 	jmp	.Ltmp2294 # Offset: 9591
.Ltmp2127:
    0000257c: 	leaq	0x58(%rsp), %rsi
    00002581: 	xorl	%edx, %edx
    00002583: 	movq	%r12, %rdi
    00002586: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9606
    0000258b: 	movq	%rax, 0xc0(%rsp)
    00002593: 	movq	%rax, %rdi
    00002596: 	movq	0x58(%rsp), %rax
    0000259b: 	movq	%rax, 0xd0(%rsp)
.Ltmp2337:
    000025a3: 	movq	%r13, %rdx
    000025a6: 	movq	%r14, %rsi
    000025a9: 	callq	memcpy@PLT # Offset: 9641
    000025ae: 	movq	0x58(%rsp), %r13
    000025b3: 	movq	0xc0(%rsp), %rax
    000025bb: 	jmp	.Ltmp2296 # Offset: 9659
.Ltmp2121:
    000025c0: 	leaq	0x58(%rsp), %rsi
    000025c5: 	leaq	0xc0(%rsp), %rdi
    000025cd: 	xorl	%edx, %edx
    000025cf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9679
    000025d4: 	movq	%rax, 0xc0(%rsp)
    000025dc: 	movq	%rax, %rdi
    000025df: 	movq	0x58(%rsp), %rax
    000025e4: 	movq	%rax, 0xd0(%rsp)
.Ltmp2334:
    000025ec: 	movq	%r12, %rdx
    000025ef: 	movq	%r13, %rsi
    000025f2: 	callq	memcpy@PLT # Offset: 9714
    000025f7: 	movq	0x58(%rsp), %r12
    000025fc: 	movq	0xc0(%rsp), %rax
    00002604: 	jmp	.Ltmp2290 # Offset: 9732
.Ltmp2271:
    00002609: 	testq	%r14, %r14
    0000260c: 	jne	.Ltmp2327 # Offset: 9740
    00002612: 	movq	%rbx, %rax
    00002615: 	jmp	.Ltmp2328 # Offset: 9749
.Ltmp2262:
    0000261a: 	testq	%r14, %r14
    0000261d: 	jne	.Ltmp2329 # Offset: 9757
    00002623: 	movq	%rbx, %rax
    00002626: 	jmp	.Ltmp2330 # Offset: 9766
.Ltmp2261:
    0000262b: 	leaq	0x58(%rsp), %rsi
    00002630: 	xorl	%edx, %edx
    00002632: 	movq	%r12, %rdi
    00002635: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9781
    0000263a: 	movq	%rax, 0xc0(%rsp)
    00002642: 	movq	%rax, %rdi
    00002645: 	movq	0x58(%rsp), %rax
    0000264a: 	movq	%rax, 0xd0(%rsp)
.Ltmp2354:
    00002652: 	movq	%r14, %rdx
    00002655: 	movq	%r15, %rsi
    00002658: 	callq	memcpy@PLT # Offset: 9816
    0000265d: 	movq	0x58(%rsp), %r14
    00002662: 	movq	0xc0(%rsp), %rax
    0000266a: 	jmp	.Ltmp2330 # Offset: 9834
.Ltmp2270:
    0000266f: 	leaq	0x58(%rsp), %rsi
    00002674: 	xorl	%edx, %edx
    00002676: 	movq	%r12, %rdi
    00002679: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9849
    0000267e: 	movq	%rax, 0xc0(%rsp)
    00002686: 	movq	%rax, %rdi
    00002689: 	movq	0x58(%rsp), %rax
    0000268e: 	movq	%rax, 0xd0(%rsp)
.Ltmp2353:
    00002696: 	movq	%r14, %rdx
    00002699: 	movq	%r15, %rsi
    0000269c: 	callq	memcpy@PLT # Offset: 9884
    000026a1: 	movq	0x58(%rsp), %r14
    000026a6: 	movq	0xc0(%rsp), %rax
    000026ae: 	jmp	.Ltmp2328 # Offset: 9902
.Ltmp2253:
    000026b3: 	leaq	0x58(%rsp), %rsi
    000026b8: 	xorl	%edx, %edx
    000026ba: 	movq	%r12, %rdi
    000026bd: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9917
    000026c2: 	movq	%rax, 0xc0(%rsp)
    000026ca: 	movq	%rax, %rdi
    000026cd: 	movq	0x58(%rsp), %rax
    000026d2: 	movq	%rax, 0xd0(%rsp)
.Ltmp2351:
    000026da: 	movq	%r14, %rdx
    000026dd: 	movq	%r15, %rsi
    000026e0: 	callq	memcpy@PLT # Offset: 9952
    000026e5: 	movq	0x58(%rsp), %r14
    000026ea: 	movq	0xc0(%rsp), %rax
    000026f2: 	jmp	.Ltmp2324 # Offset: 9970
.Ltmp2244:
    000026f7: 	leaq	0x58(%rsp), %rsi
    000026fc: 	xorl	%edx, %edx
    000026fe: 	movq	%r12, %rdi
    00002701: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9985
    00002706: 	movq	%rax, 0xc0(%rsp)
    0000270e: 	movq	%rax, %rdi
    00002711: 	movq	0x58(%rsp), %rax
    00002716: 	movq	%rax, 0xd0(%rsp)
.Ltmp2352:
    0000271e: 	movq	%r14, %rdx
    00002721: 	movq	%r15, %rsi
    00002724: 	callq	memcpy@PLT # Offset: 10020
    00002729: 	movq	0x58(%rsp), %r14
    0000272e: 	movq	0xc0(%rsp), %rax
    00002736: 	jmp	.Ltmp2326 # Offset: 10038
.Ltmp2235:
    0000273b: 	leaq	0x58(%rsp), %rsi
    00002740: 	xorl	%edx, %edx
    00002742: 	movq	%r12, %rdi
    00002745: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 10053
    0000274a: 	movq	%rax, 0xc0(%rsp)
    00002752: 	movq	%rax, %rdi
    00002755: 	movq	0x58(%rsp), %rax
    0000275a: 	movq	%rax, 0xd0(%rsp)
.Ltmp2350:
    00002762: 	movq	%r14, %rdx
    00002765: 	movq	%r15, %rsi
    00002768: 	callq	memcpy@PLT # Offset: 10088
    0000276d: 	movq	0x58(%rsp), %r14
    00002772: 	movq	0xc0(%rsp), %rax
    0000277a: 	jmp	.Ltmp2322 # Offset: 10106
.Ltmp2111:
    0000277f: 	cmpq	0x10(%rsp), %r12
    00002784: 	je	.Ltmp2114 # Offset: 10116
.Ltmp2333:
    0000278a: 	movq	(%r12), %rdi
    0000278e: 	leaq	0x10(%r12), %rax
    00002793: 	cmpq	%rax, %rdi
    00002796: 	je	.Ltmp2331 # Offset: 10134
.Ltmp2332:
    00002798: 	movq	0x10(%r12), %rax
    0000279d: 	addq	$0x20, %r12
    000027a1: 	leaq	0x1(%rax), %rsi
    000027a5: 	callq	_ZdlPvm@PLT # Offset: 10149
    000027aa: 	cmpq	%r12, 0x10(%rsp)
    000027af: 	je	.Ltmp2114 # Offset: 10159
    000027b5: 	movq	(%r12), %rdi
    000027b9: 	leaq	0x10(%r12), %rax
    000027be: 	cmpq	%rax, %rdi
    000027c1: 	jne	.Ltmp2332 # Offset: 10177
.Ltmp2331:
    000027c3: 	addq	$0x20, %r12
    000027c7: 	cmpq	%r12, 0x10(%rsp)
    000027cc: 	jne	.Ltmp2333 # Offset: 10188
    000027ce: 	jmp	.Ltmp2114 # Offset: 10190
.Ltmp2123:
    000027d3: 	leaq	DATAat0x38182(%rip), %rdi
    000027da: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10202
.Ltmp2126:
    000027df: 	leaq	DATAat0x38158(%rip), %rdi
    000027e6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10214
.Ltmp2129:
    000027eb: 	leaq	DATAat0x38182(%rip), %rdi
    000027f2: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10226
.Ltmp2132:
    000027f7: 	leaq	DATAat0x38158(%rip), %rdi
    000027fe: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10238
.Ltmp2135:
    00002803: 	leaq	DATAat0x38182(%rip), %rdi
    0000280a: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10250
.Ltmp2138:
    0000280f: 	leaq	DATAat0x38158(%rip), %rdi
    00002816: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10262
.Ltmp2141:
    0000281b: 	leaq	DATAat0x38182(%rip), %rdi
    00002822: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10274
.Ltmp2145:
    00002827: 	leaq	DATAat0x38158(%rip), %rdi
    0000282e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10286
.Ltmp2148:
    00002833: 	leaq	DATAat0x38182(%rip), %rdi
    0000283a: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10298
.Ltmp2152:
    0000283f: 	leaq	DATAat0x38158(%rip), %rdi
    00002846: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10310
.Ltmp2155:
    0000284b: 	leaq	DATAat0x38182(%rip), %rdi
    00002852: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10322
.Ltmp2158:
    00002857: 	leaq	DATAat0x38158(%rip), %rdi
    0000285e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10334
.Ltmp2161:
    00002863: 	leaq	DATAat0x38182(%rip), %rdi
    0000286a: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10346
.Ltmp2169:
    0000286f: 	leaq	DATAat0x38158(%rip), %rdi
    00002876: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10358
.Ltmp2172:
    0000287b: 	leaq	DATAat0x38182(%rip), %rdi
    00002882: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10370
.Ltmp2178:
    00002887: 	leaq	DATAat0x38158(%rip), %rdi
    0000288e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10382
.Ltmp2181:
    00002893: 	leaq	DATAat0x38182(%rip), %rdi
    0000289a: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10394
.Ltmp2184:
    0000289f: 	leaq	DATAat0x38158(%rip), %rdi
    000028a6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10406
.Ltmp2187:
    000028ab: 	leaq	DATAat0x38182(%rip), %rdi
    000028b2: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10418
.Ltmp2192:
    000028b7: 	leaq	DATAat0x38158(%rip), %rdi
    000028be: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10430
.Ltmp2195:
    000028c3: 	leaq	DATAat0x38182(%rip), %rdi
    000028ca: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10442
.Ltmp2198:
    000028cf: 	leaq	DATAat0x38158(%rip), %rdi
    000028d6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10454
.Ltmp2201:
    000028db: 	leaq	DATAat0x38182(%rip), %rdi
    000028e2: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10466
.Ltmp2205:
    000028e7: 	leaq	DATAat0x38158(%rip), %rdi
    000028ee: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10478
.Ltmp2208:
    000028f3: 	leaq	DATAat0x38182(%rip), %rdi
    000028fa: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10490
.Ltmp2211:
    000028ff: 	leaq	DATAat0x38158(%rip), %rdi
    00002906: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10502
.Ltmp2214:
    0000290b: 	leaq	DATAat0x38182(%rip), %rdi
    00002912: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10514
.Ltmp2218:
    00002917: 	leaq	DATAat0x38158(%rip), %rdi
    0000291e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10526
.Ltmp2221:
    00002923: 	leaq	DATAat0x38182(%rip), %rdi
    0000292a: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10538
.Ltmp2225:
    0000292f: 	leaq	DATAat0x38158(%rip), %rdi
    00002936: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10550
.Ltmp2228:
    0000293b: 	leaq	DATAat0x38182(%rip), %rdi
    00002942: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10562
.Ltmp2234:
    00002947: 	leaq	DATAat0x38158(%rip), %rdi
    0000294e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10574
.Ltmp2237:
    00002953: 	leaq	DATAat0x38182(%rip), %rdi
    0000295a: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10586
.Ltmp2243:
    0000295f: 	leaq	DATAat0x38158(%rip), %rdi
    00002966: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10598
.Ltmp2246:
    0000296b: 	leaq	DATAat0x38182(%rip), %rdi
    00002972: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10610
.Ltmp2252:
    00002977: 	leaq	DATAat0x38158(%rip), %rdi
    0000297e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10622
.Ltmp2255:
    00002983: 	leaq	DATAat0x38182(%rip), %rdi
    0000298a: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10634
.Ltmp2260:
    0000298f: 	leaq	DATAat0x38158(%rip), %rdi
    00002996: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10646
.Ltmp2263:
    0000299b: 	leaq	DATAat0x38182(%rip), %rdi
    000029a2: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10658
.Ltmp2269:
    000029a7: 	leaq	DATAat0x38158(%rip), %rdi
    000029ae: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10670
.Ltmp2272:
    000029b3: 	leaq	DATAat0x38182(%rip), %rdi
    000029ba: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10682
.Ltmp2288:
    000029bf: 	callq	__stack_chk_fail@PLT # Offset: 10687
.Ltmp2289:
    000029c4: 	movq	%rbx, %rdi
    000029c7: 	jmp	.Ltmp2334 # Offset: 10695
.Ltmp2291:
    000029cc: 	movq	%rbx, %rdi
    000029cf: 	jmp	.Ltmp2335 # Offset: 10703
.Ltmp2293:
    000029d4: 	movq	%rbx, %rdi
    000029d7: 	jmp	.Ltmp2336 # Offset: 10711
.Ltmp2295:
    000029dc: 	movq	%rbx, %rdi
    000029df: 	jmp	.Ltmp2337 # Offset: 10719
.Ltmp2297:
    000029e4: 	movq	%rbx, %rdi
    000029e7: 	jmp	.Ltmp2338 # Offset: 10727
.Ltmp2299:
    000029ec: 	movq	%rbx, %rdi
    000029ef: 	jmp	.Ltmp2339 # Offset: 10735
.Ltmp2301:
    000029f4: 	movq	%rbx, %rdi
    000029f7: 	jmp	.Ltmp2340 # Offset: 10743
.Ltmp2303:
    000029fc: 	movq	%rbx, %rdi
    000029ff: 	jmp	.Ltmp2341 # Offset: 10751
.Ltmp2305:
    00002a04: 	movq	%rbx, %rdi
    00002a07: 	jmp	.Ltmp2342 # Offset: 10759
.Ltmp2307:
    00002a0c: 	movq	%rbx, %rdi
    00002a0f: 	jmp	.Ltmp2343 # Offset: 10767
.Ltmp2309:
    00002a14: 	movq	%rbx, %rdi
    00002a17: 	jmp	.Ltmp2344 # Offset: 10775
.Ltmp2311:
    00002a1c: 	movq	%rbx, %rdi
    00002a1f: 	jmp	.Ltmp2345 # Offset: 10783
.Ltmp2313:
    00002a24: 	movq	%rbx, %rdi
    00002a27: 	jmp	.Ltmp2346 # Offset: 10791
.Ltmp2315:
    00002a2c: 	movq	%rbx, %rdi
    00002a2f: 	jmp	.Ltmp2347 # Offset: 10799
.Ltmp2317:
    00002a34: 	movq	%rbx, %rdi
    00002a37: 	jmp	.Ltmp2348 # Offset: 10807
.Ltmp2319:
    00002a3c: 	movq	%rbx, %rdi
    00002a3f: 	jmp	.Ltmp2349 # Offset: 10815
.Ltmp2321:
    00002a44: 	movq	%rbx, %rdi
    00002a47: 	jmp	.Ltmp2350 # Offset: 10823
.Ltmp2323:
    00002a4c: 	movq	%rbx, %rdi
    00002a4f: 	jmp	.Ltmp2351 # Offset: 10831
.Ltmp2325:
    00002a54: 	movq	%rbx, %rdi
    00002a57: 	jmp	.Ltmp2352 # Offset: 10839
.Ltmp2327:
    00002a5c: 	movq	%rbx, %rdi
    00002a5f: 	jmp	.Ltmp2353 # Offset: 10847
.Ltmp2329:
    00002a64: 	movq	%rbx, %rdi
    00002a67: 	jmp	.Ltmp2354 # Offset: 10855
.Ltmp2120:
    00002a6c: 	leaq	DATAat0x38158(%rip), %rdi
    00002a73: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10867
    00002a78: 	endbr64
.Ltmp2356:
    00002a7c: 	movq	%rax, %rbp
    00002a7f: 	jmp	.Ltmp2355 # Offset: 10879
    00002a84: 	endbr64
    00002a88: 	jmp	.Ltmp2356 # Offset: 10888
    00002a8a: 	endbr64
    00002a8e: 	jmp	.Ltmp2356 # Offset: 10894
    00002a90: 	endbr64
    00002a94: 	movq	%rax, %rbp
    00002a97: 	jmp	.Ltmp2357 # Offset: 10903
    00002a99: 	endbr64
    00002a9d: 	jmp	.Ltmp2356 # Offset: 10909
.Ltmp2360:
    00002a9f: 	movq	0xc0(%rsp), %rdi
    00002aa7: 	cmpq	%rbx, %rdi
    00002aaa: 	je	.Ltmp2357 # Offset: 10922
    00002aac: 	movq	0xd0(%rsp), %rax
    00002ab4: 	leaq	0x1(%rax), %rsi
    00002ab8: 	callq	_ZdlPvm@PLT # Offset: 10936
.Ltmp2357:
    00002abd: 	movq	0x80(%rsp), %rdi
    00002ac5: 	leaq	0x90(%rsp), %rax
    00002acd: 	cmpq	%rax, %rdi
    00002ad0: 	je	.Ltmp2358 # Offset: 10960
    00002ad2: 	movq	0x90(%rsp), %rax
    00002ada: 	leaq	0x1(%rax), %rsi
    00002ade: 	callq	_ZdlPvm@PLT # Offset: 10974
.Ltmp2358:
    00002ae3: 	movq	0x60(%rsp), %rdi
    00002ae8: 	cmpq	0x40(%rsp), %rdi
    00002aed: 	je	.Ltmp2359 # Offset: 10989
    00002aef: 	movq	0x70(%rsp), %rax
    00002af4: 	leaq	0x1(%rax), %rsi
    00002af8: 	callq	_ZdlPvm@PLT # Offset: 11000
.Ltmp2359:
    00002afd: 	movq	%rbp, %rdi
    00002b00: 	callq	_Unwind_Resume@PLT # Offset: 11008
.Ltmp2355:
    00002b05: 	movq	0xc0(%rsp), %rdi
    00002b0d: 	cmpq	%rbx, %rdi
    00002b10: 	je	.Ltmp2358 # Offset: 11024
    00002b12: 	movq	0xd0(%rsp), %rax
    00002b1a: 	leaq	0x1(%rax), %rsi
    00002b1e: 	callq	_ZdlPvm@PLT # Offset: 11038
    00002b23: 	jmp	.Ltmp2358 # Offset: 11043
    00002b25: 	endbr64
    00002b29: 	jmp	.Ltmp2356 # Offset: 11049
    00002b2e: 	endbr64
    00002b32: 	jmp	.Ltmp2356 # Offset: 11058
    00002b37: 	endbr64
    00002b3b: 	jmp	.Ltmp2356 # Offset: 11067
    00002b40: 	endbr64
.Ltmp2361:
    00002b44: 	movq	%rax, %rbp
    00002b47: 	jmp	.Ltmp2360 # Offset: 11079
    00002b4c: 	endbr64
    00002b50: 	jmp	.Ltmp2361 # Offset: 11088
    00002b52: 	endbr64
    00002b56: 	jmp	.Ltmp2361 # Offset: 11094
    00002b58: 	endbr64
    00002b5c: 	jmp	.Ltmp2361 # Offset: 11100
    00002b5e: 	endbr64
    00002b62: 	jmp	.Ltmp2361 # Offset: 11106
    00002b64: 	endbr64
    00002b68: 	jmp	.Ltmp2361 # Offset: 11112
    00002b6a: 	endbr64
    00002b6e: 	jmp	.Ltmp2356 # Offset: 11118
    00002b73: 	endbr64
    00002b77: 	jmp	.Ltmp2356 # Offset: 11127
    00002b7c: 	endbr64
    00002b80: 	jmp	.Ltmp2356 # Offset: 11136
    00002b85: 	endbr64
    00002b89: 	jmp	.Ltmp2356 # Offset: 11145
    00002b8e: 	endbr64
    00002b92: 	jmp	.Ltmp2361 # Offset: 11154
    00002b94: 	endbr64
    00002b98: 	jmp	.Ltmp2361 # Offset: 11160
    00002b9a: 	endbr64
    00002b9e: 	jmp	.Ltmp2361 # Offset: 11166
    00002ba0: 	endbr64
    00002ba4: 	jmp	.Ltmp2356 # Offset: 11172
    00002ba9: 	endbr64
.Ltmp2363:
    00002bad: 	movq	%rax, %rbp
    00002bb0: 	jmp	.Ltmp2362 # Offset: 11184
    00002bb2: 	endbr64
    00002bb6: 	jmp	.Ltmp2363 # Offset: 11190
    00002bb8: 	endbr64
    00002bbc: 	jmp	.Ltmp2363 # Offset: 11196
    00002bbe: 	endbr64
    00002bc2: 	jmp	.Ltmp2363 # Offset: 11202
.Ltmp2362:
    00002bc4: 	movq	0xc0(%rsp), %rdi
    00002bcc: 	cmpq	%rbx, %rdi
    00002bcf: 	je	.Ltmp2364 # Offset: 11215
    00002bd1: 	movq	0xd0(%rsp), %rax
    00002bd9: 	leaq	0x1(%rax), %rsi
    00002bdd: 	callq	_ZdlPvm@PLT # Offset: 11229
.Ltmp2364:
    00002be2: 	movq	0xa0(%rsp), %rdi
    00002bea: 	leaq	0xb0(%rsp), %rax
    00002bf2: 	cmpq	%rax, %rdi
    00002bf5: 	je	.Ltmp2357 # Offset: 11253
    00002bfb: 	movq	0xb0(%rsp), %rax
    00002c03: 	leaq	0x1(%rax), %rsi
    00002c07: 	callq	_ZdlPvm@PLT # Offset: 11271
    00002c0c: 	jmp	.Ltmp2357 # Offset: 11276
    00002c11: 	endbr64
    00002c15: 	jmp	.Ltmp2363 # Offset: 11285
    00002c17: 	endbr64
    00002c1b: 	jmp	.Ltmp2363 # Offset: 11291
    00002c1d: 	endbr64
    00002c21: 	jmp	.Ltmp2363 # Offset: 11297
    00002c23: 	endbr64
    00002c27: 	jmp	.Ltmp2363 # Offset: 11303
    00002c29: 	endbr64
    00002c2d: 	jmp	.Ltmp2363 # Offset: 11309
    00002c32: 	endbr64
    00002c36: 	jmp	.Ltmp2363 # Offset: 11318
    00002c3b: 	endbr64
    00002c3f: 	jmp	.Ltmp2363 # Offset: 11327
    00002c44: 	endbr64
    00002c48: 	jmp	.Ltmp2363 # Offset: 11336
    00002c4d: 	endbr64
    00002c51: 	jmp	.Ltmp2356 # Offset: 11345
    00002c56: 	endbr64
    00002c5a: 	jmp	.Ltmp2356 # Offset: 11354
    00002c5f: 	endbr64
    00002c63: 	movq	%rax, %rbp
    00002c66: 	jmp	.Ltmp2358 # Offset: 11366
    00002c6b: 	endbr64
    00002c6f: 	jmp	.Ltmp2356 # Offset: 11375
    00002c74: 	endbr64
    00002c78: 	jmp	.Ltmp2356 # Offset: 11384
    00002c7d: 	endbr64
    00002c81: 	jmp	.Ltmp2356 # Offset: 11393
    00002c86: 	endbr64
    00002c8a: 	jmp	.Ltmp2356 # Offset: 11402
    00002c8f: 	endbr64
    00002c93: 	jmp	.Ltmp2356 # Offset: 11411
    00002c98: 	endbr64
    00002c9c: 	jmp	.Ltmp2356 # Offset: 11420
    00002ca1: 	endbr64
    00002ca5: 	jmp	.Ltmp2356 # Offset: 11429
    00002caa: 	endbr64
    00002cae: 	jmp	.Ltmp2356 # Offset: 11438
    00002cb3: 	endbr64
    00002cb7: 	jmp	.Ltmp2356 # Offset: 11447
    00002cbc: 	endbr64
    00002cc0: 	jmp	.Ltmp2356 # Offset: 11456
    00002cc5: 	endbr64
    00002cc9: 	jmp	.Ltmp2356 # Offset: 11465
    00002cce: 	endbr64
    00002cd2: 	jmp	.Ltmp2356 # Offset: 11474
    00002cd7: 	endbr64
    00002cdb: 	jmp	.Ltmp2356 # Offset: 11483
    00002ce0: 	endbr64
    00002ce4: 	jmp	.Ltmp2356 # Offset: 11492
    00002ce9: 	endbr64
    00002ced: 	jmp	.Ltmp2356 # Offset: 11501
    00002cf2: 	endbr64
    00002cf6: 	jmp	.Ltmp2356 # Offset: 11510
    00002cfb: 	endbr64
    00002cff: 	jmp	.Ltmp2356 # Offset: 11519
    00002d04: 	endbr64
    00002d08: 	jmp	.Ltmp2361 # Offset: 11528
    00002d0d: 	endbr64
    00002d11: 	jmp	.Ltmp2363 # Offset: 11537
    00002d16: 	endbr64
    00002d1a: 	jmp	.Ltmp2361 # Offset: 11546
    00002d1f: 	endbr64
    00002d23: 	jmp	.Ltmp2361 # Offset: 11555
    00002d28: 	endbr64
    00002d2c: 	jmp	.Ltmp2361 # Offset: 11564
    00002d31: 	endbr64
    00002d35: 	jmp	.Ltmp2361 # Offset: 11573
    00002d3a: 	endbr64
    00002d3e: 	jmp	.Ltmp2361 # Offset: 11582
    00002d43: 	endbr64
    00002d47: 	jmp	.Ltmp2361 # Offset: 11591
    00002d4c: 	endbr64
    00002d50: 	jmp	.Ltmp2361 # Offset: 11600
    00002d55: 	endbr64
    00002d59: 	jmp	.Ltmp2361 # Offset: 11609
    00002d5e: 	endbr64
    00002d62: 	movq	%rax, %rbp
    00002d65: 	jmp	.Ltmp2364 # Offset: 11621
    00002d6a: 	endbr64
    00002d6e: 	jmp	.Ltmp2363 # Offset: 11630
    00002d73: 	endbr64
    00002d77: 	jmp	.Ltmp2361 # Offset: 11639
    00002d7c: 	endbr64
    00002d80: 	jmp	.Ltmp2361 # Offset: 11648
    00002d85: 	endbr64
    00002d89: 	jmp	.Ltmp2361 # Offset: 11657
    00002d8e: 	endbr64
    00002d92: 	jmp	.Ltmp2361 # Offset: 11666
    00002d97: 	endbr64
    00002d9b: 	jmp	.Ltmp2356 # Offset: 11675
    00002da0: 	endbr64
    00002da4: 	jmp	.Ltmp2356 # Offset: 11684
    00002da9: 	endbr64
    00002dad: 	jmp	.Ltmp2356 # Offset: 11693
    00002db2: 	endbr64
    00002db6: 	jmp	.Ltmp2356 # Offset: 11702
    00002dbb: 	endbr64
    00002dbf: 	jmp	.Ltmp2361 # Offset: 11711
    00002dc4: 	endbr64
    00002dc8: 	jmp	.Ltmp2361 # Offset: 11720
    00002dcd: 	endbr64
    00002dd1: 	jmp	.Ltmp2361 # Offset: 11729
    00002dd6: 	endbr64
    00002dda: 	jmp	.Ltmp2361 # Offset: 11738
    00002ddf: 	endbr64
    00002de3: 	jmp	.Ltmp2356 # Offset: 11747
    00002de8: 	endbr64
    00002dec: 	jmp	.Ltmp2356 # Offset: 11756
    00002df1: 	endbr64
    00002df5: 	jmp	.Ltmp2356 # Offset: 11765
    00002dfa: 	endbr64
    00002dfe: 	jmp	.Ltmp2356 # Offset: 11774
    00002e03: 	endbr64
    00002e07: 	jmp	.Ltmp2356 # Offset: 11783
    00002e0c: 	endbr64
    00002e10: 	jmp	.Ltmp2356 # Offset: 11792
    00002e15: 	endbr64
    00002e19: 	jmp	.Ltmp2356 # Offset: 11801
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIsEvv"

Binary Function "_Z14test_one_loop3IiPFiPKiiiEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 268
  State       : disassembled
  Address     : 0x1ca50
  Size        : 0x22c
  MaxSize     : 0x230
  Offset      : 0x1ca50
  Section     : .text
  Orc Section : .local.text._Z14test_one_loop3IiPFiPKiiiEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0267:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x381c8(%rip), %r15
    0000000d: 	pushq	%r14
    0000000f: 	movq	%rdi, %r14
    00000012: 	pushq	%r13
    00000014: 	movl	%esi, %r13d
    00000017: 	pushq	%r12
    00000019: 	movl	%edx, %r12d
    0000001c: 	pushq	%rbp
    0000001d: 	movq	%rcx, %rbp
    00000020: 	pushq	%rbx
    00000021: 	xorl	%ebx, %ebx
    00000023: 	subq	$0x28, %rsp
    00000027: 	movq	%r8, 0x8(%rsp)
    0000002c: 	movq	%fs:0x28, %rax
    00000035: 	movq	%rax, 0x18(%rsp)
    0000003a: 	xorl	%eax, %eax
    0000003c: 	callq	clock@PLT # Offset: 60
    00000041: 	movq	%rax, start_time(%rip)
    00000048: 	movl	iterations(%rip), %eax
    0000004e: 	testl	%eax, %eax
    00000050: 	jle	.Ltmp2365 # Offset: 80
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2367:
    00000058: 	movl	%r12d, %edx
    0000005b: 	movl	%r13d, %esi
    0000005e: 	movq	%r14, %rdi
    00000061: 	callq	*%rbp # Offset: 97
    00000063: 	movl	%eax, %r8d
    00000066: 	cvttsd2si	init_value(%rip), %eax
    0000006e: 	imull	$0x1f40, %eax, %eax
    00000074: 	cmpl	%eax, %r8d
    00000077: 	je	.Ltmp2366 # Offset: 119
    0000007d: 	movq	0x8(%rsp), %rax
    00000082: 	movq	%r15, %rsi
    00000085: 	movl	$0x1, %edi
    0000008a: 	addl	$0x1, %ebx
    0000008d: 	movq	(%rax), %rdx
    00000090: 	xorl	%eax, %eax
    00000092: 	callq	__printf_chk@PLT # Offset: 146
    00000097: 	cmpl	%ebx, iterations(%rip)
    0000009d: 	jg	.Ltmp2367 # Offset: 157
.Ltmp2365:
    0000009f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000a6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000ad: 	subq	$0x20, %rax
    000000b1: 	cmpq	%rax, %rbx
    000000b4: 	je	.Ltmp2368 # Offset: 180
    000000ba: 	movq	0x8(%rsp), %rax
    000000bf: 	leaq	0x10(%rbx), %rdi
    000000c3: 	movq	%rdi, (%rbx)
    000000c6: 	movq	(%rax), %rbp
    000000c9: 	movq	0x8(%rax), %r12
    000000cd: 	movq	%rbp, %rax
    000000d0: 	addq	%r12, %rax
    000000d3: 	je	.Ltmp2369 # Offset: 211
    000000d5: 	testq	%rbp, %rbp
    000000d8: 	je	.Ltmp2370 # Offset: 216
.Ltmp2369:
    000000de: 	movq	%r12, 0x10(%rsp)
    000000e3: 	cmpq	$0xf, %r12
    000000e7: 	ja	.Ltmp2371 # Offset: 231
    000000ed: 	cmpq	$0x1, %r12
    000000f1: 	jne	.Ltmp2372 # Offset: 241
    000000f7: 	movzbl	(%rbp), %eax
    000000fb: 	movb	%al, 0x10(%rbx)
.Ltmp2375:
    000000fe: 	movq	%r12, 0x8(%rbx)
    00000102: 	movb	$0x0, (%rdi,%r12)
    00000107: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000010e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000115: 	addq	$0x20, %rax
    00000119: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000120: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000127: 	je	.Ltmp2373 # Offset: 295
.Ltmp2376:
    0000012d: 	movq	-0x20(%rax), %rbp
    00000131: 	callq	clock@PLT # Offset: 305
    00000136: 	movq	%rax, end_time(%rip)
    0000013d: 	movq	0x18(%rsp), %rdx
    00000142: 	subq	%fs:0x28, %rdx
    0000014b: 	jne	.Ltmp2374 # Offset: 331
    00000151: 	subq	start_time(%rip), %rax
    00000158: 	pxor	%xmm0, %xmm0
    0000015c: 	movq	%rbp, %rdi
    0000015f: 	cvtsi2sd	%rax, %xmm0
    00000164: 	divsd	DATAat0x38a48(%rip), %xmm0
    0000016c: 	addq	$0x28, %rsp
    00000170: 	popq	%rbx
    00000171: 	popq	%rbp
    00000172: 	popq	%r12
    00000174: 	popq	%r13
    00000176: 	popq	%r14
    00000178: 	popq	%r15
    0000017a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 378
    0000017f: 	nop # Size: 1
.Ltmp2366:
    00000180: 	addl	$0x1, %ebx
    00000183: 	cmpl	%ebx, iterations(%rip)
    00000189: 	jg	.Ltmp2367 # Offset: 393
    0000018f: 	jmp	.Ltmp2365 # Offset: 399
    00000194: 	nopl	(%rax) # Size: 4
.Ltmp2371:
    00000198: 	movq	%rbx, %rdi
    0000019b: 	leaq	0x10(%rsp), %rsi
    000001a0: 	xorl	%edx, %edx
    000001a2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 418
    000001a7: 	movq	%rax, (%rbx)
    000001aa: 	movq	%rax, %rdi
    000001ad: 	movq	0x10(%rsp), %rax
    000001b2: 	movq	%rax, 0x10(%rbx)
.Ltmp2377:
    000001b6: 	movq	%r12, %rdx
    000001b9: 	movq	%rbp, %rsi
    000001bc: 	callq	memcpy@PLT # Offset: 444
    000001c1: 	movq	0x10(%rsp), %r12
    000001c6: 	movq	(%rbx), %rdi
    000001c9: 	jmp	.Ltmp2375 # Offset: 457
    000001ce: 	nop # Size: 2
.Ltmp2368:
    000001d0: 	movq	0x8(%rsp), %rsi
    000001d5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001dc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 476
    000001e1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001e8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001ef: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001f6: 	jne	.Ltmp2376 # Offset: 502
.Ltmp2373:
    000001fc: 	movq	-0x8(%rdx), %rax
    00000200: 	addq	$0x200, %rax
    00000206: 	jmp	.Ltmp2376 # Offset: 518
    0000020b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2372:
    00000210: 	testq	%r12, %r12
    00000213: 	je	.Ltmp2375 # Offset: 531
    00000219: 	jmp	.Ltmp2377 # Offset: 537
.Ltmp2374:
    0000021b: 	callq	__stack_chk_fail@PLT # Offset: 539
.Ltmp2370:
    00000220: 	leaq	DATAat0x38158(%rip), %rdi
    00000227: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 551
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_one_loop3IiPFiPKiiiEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 269
  State       : disassembled
  Address     : 0x1cc80
  Size        : 0x22c
  MaxSize     : 0x230
  Offset      : 0x1cc80
  Section     : .text
  Orc Section : .local.text._Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0268:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x381c8(%rip), %r15
    0000000d: 	pushq	%r14
    0000000f: 	movq	%rdi, %r14
    00000012: 	pushq	%r13
    00000014: 	movl	%esi, %r13d
    00000017: 	pushq	%r12
    00000019: 	movq	%rcx, %r12
    0000001c: 	pushq	%rbp
    0000001d: 	movl	%edx, %ebp
    0000001f: 	pushq	%rbx
    00000020: 	movzbl	%bpl, %ebp
    00000024: 	xorl	%ebx, %ebx
    00000026: 	subq	$0x28, %rsp
    0000002a: 	movq	%r8, 0x8(%rsp)
    0000002f: 	movq	%fs:0x28, %rax
    00000038: 	movq	%rax, 0x18(%rsp)
    0000003d: 	xorl	%eax, %eax
    0000003f: 	callq	clock@PLT # Offset: 63
    00000044: 	movq	%rax, start_time(%rip)
    0000004b: 	movl	iterations(%rip), %eax
    00000051: 	testl	%eax, %eax
    00000053: 	jle	.Ltmp2378 # Offset: 83
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp2380:
    00000058: 	movl	%ebp, %edx
    0000005a: 	movl	%r13d, %esi
    0000005d: 	movq	%r14, %rdi
    00000060: 	callq	*%r12 # Offset: 96
    00000063: 	movl	%eax, %r8d
    00000066: 	cvttsd2si	init_value(%rip), %eax
    0000006e: 	shll	$0x6, %eax
    00000071: 	cmpb	%al, %r8b
    00000074: 	je	.Ltmp2379 # Offset: 116
    0000007a: 	movq	0x8(%rsp), %rax
    0000007f: 	movq	%r15, %rsi
    00000082: 	movl	$0x1, %edi
    00000087: 	addl	$0x1, %ebx
    0000008a: 	movq	(%rax), %rdx
    0000008d: 	xorl	%eax, %eax
    0000008f: 	callq	__printf_chk@PLT # Offset: 143
    00000094: 	cmpl	%ebx, iterations(%rip)
    0000009a: 	jg	.Ltmp2380 # Offset: 154
.Ltmp2378:
    0000009c: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000a3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000aa: 	subq	$0x20, %rax
    000000ae: 	cmpq	%rax, %rbx
    000000b1: 	je	.Ltmp2381 # Offset: 177
    000000b7: 	movq	0x8(%rsp), %rax
    000000bc: 	leaq	0x10(%rbx), %rdi
    000000c0: 	movq	%rdi, (%rbx)
    000000c3: 	movq	(%rax), %rbp
    000000c6: 	movq	0x8(%rax), %r12
    000000ca: 	movq	%rbp, %rax
    000000cd: 	addq	%r12, %rax
    000000d0: 	je	.Ltmp2382 # Offset: 208
    000000d2: 	testq	%rbp, %rbp
    000000d5: 	je	.Ltmp2383 # Offset: 213
.Ltmp2382:
    000000db: 	movq	%r12, 0x10(%rsp)
    000000e0: 	cmpq	$0xf, %r12
    000000e4: 	ja	.Ltmp2384 # Offset: 228
    000000ea: 	cmpq	$0x1, %r12
    000000ee: 	jne	.Ltmp2385 # Offset: 238
    000000f4: 	movzbl	(%rbp), %eax
    000000f8: 	movb	%al, 0x10(%rbx)
.Ltmp2388:
    000000fb: 	movq	%r12, 0x8(%rbx)
    000000ff: 	movb	$0x0, (%rdi,%r12)
    00000104: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000010b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000112: 	addq	$0x20, %rax
    00000116: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000011d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000124: 	je	.Ltmp2386 # Offset: 292
.Ltmp2389:
    0000012a: 	movq	-0x20(%rax), %rbp
    0000012e: 	callq	clock@PLT # Offset: 302
    00000133: 	movq	%rax, end_time(%rip)
    0000013a: 	movq	0x18(%rsp), %rdx
    0000013f: 	subq	%fs:0x28, %rdx
    00000148: 	jne	.Ltmp2387 # Offset: 328
    0000014e: 	subq	start_time(%rip), %rax
    00000155: 	pxor	%xmm0, %xmm0
    00000159: 	movq	%rbp, %rdi
    0000015c: 	cvtsi2sd	%rax, %xmm0
    00000161: 	divsd	DATAat0x38a48(%rip), %xmm0
    00000169: 	addq	$0x28, %rsp
    0000016d: 	popq	%rbx
    0000016e: 	popq	%rbp
    0000016f: 	popq	%r12
    00000171: 	popq	%r13
    00000173: 	popq	%r14
    00000175: 	popq	%r15
    00000177: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 375
    0000017c: 	nopl	(%rax) # Size: 4
.Ltmp2379:
    00000180: 	addl	$0x1, %ebx
    00000183: 	cmpl	%ebx, iterations(%rip)
    00000189: 	jg	.Ltmp2380 # Offset: 393
    0000018f: 	jmp	.Ltmp2378 # Offset: 399
    00000194: 	nopl	(%rax) # Size: 4
.Ltmp2384:
    00000198: 	movq	%rbx, %rdi
    0000019b: 	leaq	0x10(%rsp), %rsi
    000001a0: 	xorl	%edx, %edx
    000001a2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 418
    000001a7: 	movq	%rax, (%rbx)
    000001aa: 	movq	%rax, %rdi
    000001ad: 	movq	0x10(%rsp), %rax
    000001b2: 	movq	%rax, 0x10(%rbx)
.Ltmp2390:
    000001b6: 	movq	%r12, %rdx
    000001b9: 	movq	%rbp, %rsi
    000001bc: 	callq	memcpy@PLT # Offset: 444
    000001c1: 	movq	0x10(%rsp), %r12
    000001c6: 	movq	(%rbx), %rdi
    000001c9: 	jmp	.Ltmp2388 # Offset: 457
    000001ce: 	nop # Size: 2
.Ltmp2381:
    000001d0: 	movq	0x8(%rsp), %rsi
    000001d5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001dc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 476
    000001e1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001e8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001ef: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001f6: 	jne	.Ltmp2389 # Offset: 502
.Ltmp2386:
    000001fc: 	movq	-0x8(%rdx), %rax
    00000200: 	addq	$0x200, %rax
    00000206: 	jmp	.Ltmp2389 # Offset: 518
    0000020b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2385:
    00000210: 	testq	%r12, %r12
    00000213: 	je	.Ltmp2388 # Offset: 531
    00000219: 	jmp	.Ltmp2390 # Offset: 537
.Ltmp2387:
    0000021b: 	callq	__stack_chk_fail@PLT # Offset: 539
.Ltmp2383:
    00000220: 	leaq	DATAat0x38158(%rip), %rdi
    00000227: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 551
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 270
  State       : disassembled
  Address     : 0x1ceb0
  Size        : 0x22c
  MaxSize     : 0x230
  Offset      : 0x1ceb0
  Section     : .text
  Orc Section : .local.text._Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0269:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x381c8(%rip), %r15
    0000000d: 	pushq	%r14
    0000000f: 	movq	%rdi, %r14
    00000012: 	pushq	%r13
    00000014: 	movl	%esi, %r13d
    00000017: 	pushq	%r12
    00000019: 	movl	%edx, %r12d
    0000001c: 	pushq	%rbp
    0000001d: 	movq	%rcx, %rbp
    00000020: 	pushq	%rbx
    00000021: 	xorl	%ebx, %ebx
    00000023: 	subq	$0x28, %rsp
    00000027: 	movq	%r8, 0x8(%rsp)
    0000002c: 	movq	%fs:0x28, %rax
    00000035: 	movq	%rax, 0x18(%rsp)
    0000003a: 	xorl	%eax, %eax
    0000003c: 	callq	clock@PLT # Offset: 60
    00000041: 	movq	%rax, start_time(%rip)
    00000048: 	movl	iterations(%rip), %eax
    0000004e: 	testl	%eax, %eax
    00000050: 	jle	.Ltmp2391 # Offset: 80
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2393:
    00000058: 	movl	%r12d, %edx
    0000005b: 	movl	%r13d, %esi
    0000005e: 	movq	%r14, %rdi
    00000061: 	callq	*%rbp # Offset: 97
    00000063: 	movl	%eax, %r8d
    00000066: 	cvttsd2si	init_value(%rip), %eax
    0000006e: 	imull	$0x1f40, %eax, %eax
    00000074: 	cmpl	%eax, %r8d
    00000077: 	je	.Ltmp2392 # Offset: 119
    0000007d: 	movq	0x8(%rsp), %rax
    00000082: 	movq	%r15, %rsi
    00000085: 	movl	$0x1, %edi
    0000008a: 	addl	$0x1, %ebx
    0000008d: 	movq	(%rax), %rdx
    00000090: 	xorl	%eax, %eax
    00000092: 	callq	__printf_chk@PLT # Offset: 146
    00000097: 	cmpl	%ebx, iterations(%rip)
    0000009d: 	jg	.Ltmp2393 # Offset: 157
.Ltmp2391:
    0000009f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000a6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000ad: 	subq	$0x20, %rax
    000000b1: 	cmpq	%rax, %rbx
    000000b4: 	je	.Ltmp2394 # Offset: 180
    000000ba: 	movq	0x8(%rsp), %rax
    000000bf: 	leaq	0x10(%rbx), %rdi
    000000c3: 	movq	%rdi, (%rbx)
    000000c6: 	movq	(%rax), %rbp
    000000c9: 	movq	0x8(%rax), %r12
    000000cd: 	movq	%rbp, %rax
    000000d0: 	addq	%r12, %rax
    000000d3: 	je	.Ltmp2395 # Offset: 211
    000000d5: 	testq	%rbp, %rbp
    000000d8: 	je	.Ltmp2396 # Offset: 216
.Ltmp2395:
    000000de: 	movq	%r12, 0x10(%rsp)
    000000e3: 	cmpq	$0xf, %r12
    000000e7: 	ja	.Ltmp2397 # Offset: 231
    000000ed: 	cmpq	$0x1, %r12
    000000f1: 	jne	.Ltmp2398 # Offset: 241
    000000f7: 	movzbl	(%rbp), %eax
    000000fb: 	movb	%al, 0x10(%rbx)
.Ltmp2401:
    000000fe: 	movq	%r12, 0x8(%rbx)
    00000102: 	movb	$0x0, (%rdi,%r12)
    00000107: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000010e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000115: 	addq	$0x20, %rax
    00000119: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000120: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000127: 	je	.Ltmp2399 # Offset: 295
.Ltmp2402:
    0000012d: 	movq	-0x20(%rax), %rbp
    00000131: 	callq	clock@PLT # Offset: 305
    00000136: 	movq	%rax, end_time(%rip)
    0000013d: 	movq	0x18(%rsp), %rdx
    00000142: 	subq	%fs:0x28, %rdx
    0000014b: 	jne	.Ltmp2400 # Offset: 331
    00000151: 	subq	start_time(%rip), %rax
    00000158: 	pxor	%xmm0, %xmm0
    0000015c: 	movq	%rbp, %rdi
    0000015f: 	cvtsi2sd	%rax, %xmm0
    00000164: 	divsd	DATAat0x38a48(%rip), %xmm0
    0000016c: 	addq	$0x28, %rsp
    00000170: 	popq	%rbx
    00000171: 	popq	%rbp
    00000172: 	popq	%r12
    00000174: 	popq	%r13
    00000176: 	popq	%r14
    00000178: 	popq	%r15
    0000017a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 378
    0000017f: 	nop # Size: 1
.Ltmp2392:
    00000180: 	addl	$0x1, %ebx
    00000183: 	cmpl	%ebx, iterations(%rip)
    00000189: 	jg	.Ltmp2393 # Offset: 393
    0000018f: 	jmp	.Ltmp2391 # Offset: 399
    00000194: 	nopl	(%rax) # Size: 4
.Ltmp2397:
    00000198: 	movq	%rbx, %rdi
    0000019b: 	leaq	0x10(%rsp), %rsi
    000001a0: 	xorl	%edx, %edx
    000001a2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 418
    000001a7: 	movq	%rax, (%rbx)
    000001aa: 	movq	%rax, %rdi
    000001ad: 	movq	0x10(%rsp), %rax
    000001b2: 	movq	%rax, 0x10(%rbx)
.Ltmp2403:
    000001b6: 	movq	%r12, %rdx
    000001b9: 	movq	%rbp, %rsi
    000001bc: 	callq	memcpy@PLT # Offset: 444
    000001c1: 	movq	0x10(%rsp), %r12
    000001c6: 	movq	(%rbx), %rdi
    000001c9: 	jmp	.Ltmp2401 # Offset: 457
    000001ce: 	nop # Size: 2
.Ltmp2394:
    000001d0: 	movq	0x8(%rsp), %rsi
    000001d5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001dc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 476
    000001e1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001e8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001ef: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001f6: 	jne	.Ltmp2402 # Offset: 502
.Ltmp2399:
    000001fc: 	movq	-0x8(%rdx), %rax
    00000200: 	addq	$0x200, %rax
    00000206: 	jmp	.Ltmp2402 # Offset: 518
    0000020b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2398:
    00000210: 	testq	%r12, %r12
    00000213: 	je	.Ltmp2401 # Offset: 531
    00000219: 	jmp	.Ltmp2403 # Offset: 537
.Ltmp2400:
    0000021b: 	callq	__stack_chk_fail@PLT # Offset: 539
.Ltmp2396:
    00000220: 	leaq	DATAat0x38158(%rip), %rdi
    00000227: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 551
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIiEvv" after disassembly {
  Number      : 271
  State       : disassembled
  Address     : 0x1d0e0
  Size        : 0x2ea1
  MaxSize     : 0x2eb0
  Offset      : 0x1d0e0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIiEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0270:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x7000(%rsp), %r11
.Ltmp2404:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp2404 # Offset: 37
    00000027: 	subq	$0xdf8, %rsp
    0000002e: 	movq	%fs:0x28, %rax
    00000037: 	movq	%rax, 0x7de8(%rsp)
    0000003f: 	xorl	%eax, %eax
    00000041: 	leaq	0x70(%rsp), %rax
    00000046: 	movl	$0x33746e69, 0x70(%rsp)
    0000004e: 	leaq	0xe0(%rsp), %rbp
    00000056: 	movq	%rax, 0x40(%rsp)
    0000005b: 	leaq	0x7de0(%rsp), %rdx
    00000063: 	movq	%rax, 0x60(%rsp)
    00000068: 	movl	$0x5f32, %eax
    0000006d: 	movw	%ax, 0x74(%rsp)
    00000072: 	cvttsd2si	init_value(%rip), %eax
    0000007a: 	movb	$0x74, 0x76(%rsp)
    0000007f: 	movq	$0x7, 0x68(%rsp)
    00000088: 	movb	$0x0, 0x77(%rsp)
    0000008d: 	movd	%eax, %xmm0
    00000091: 	movq	%rbp, %rax
    00000094: 	pshufd	$0x0, %xmm0, %xmm0
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp2405:
    000000a0: 	movaps	%xmm0, (%rax)
    000000a3: 	addq	$0x10, %rax
    000000a7: 	cmpq	%rax, %rdx
    000000aa: 	jne	.Ltmp2405 # Offset: 170
    000000ac: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm1
    000000b4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000bb: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm2
    000000c3: 	movq	_Z7gLabelsB5cxx11+56(%rip), %r15
    000000ca: 	movhlps	%xmm1, %xmm5
    000000cd: 	movq	%rax, 0x10(%rsp)
    000000d2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    000000d9: 	movq	%xmm5, %rbx
    000000de: 	movaps	%xmm2, 0x30(%rsp)
    000000e3: 	movq	%xmm2, %r12
    000000e8: 	leaq	0x8(%rbx), %r13
    000000ec: 	movq	%rax, 0x8(%rsp)
    000000f1: 	movq	%r13, (%rsp)
    000000f5: 	movaps	%xmm1, 0x20(%rsp)
    000000fa: 	movq	%xmm5, 0x48(%rsp)
    00000100: 	movq	%xmm1, 0x18(%rsp)
    00000106: 	cmpq	%r13, %rax
    00000109: 	jbe	.Ltmp2406 # Offset: 265
    0000010b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2409:
    00000110: 	movq	(%rsp), %rax
    00000114: 	movq	(%rax), %r14
    00000117: 	leaq	0x200(%r14), %rbx
    0000011e: 	nop # Size: 2
.Ltmp2408:
    00000120: 	movq	(%r14), %rdi
    00000123: 	leaq	0x10(%r14), %rdx
    00000127: 	cmpq	%rdx, %rdi
    0000012a: 	je	.Ltmp2407 # Offset: 298
    00000130: 	movq	0x10(%r14), %rax
    00000134: 	addq	$0x20, %r14
    00000138: 	leaq	0x1(%rax), %rsi
    0000013c: 	callq	_ZdlPvm@PLT # Offset: 316
    00000141: 	cmpq	%rbx, %r14
    00000144: 	jne	.Ltmp2408 # Offset: 324
    00000146: 	addq	$0x8, (%rsp)
    0000014b: 	movq	(%rsp), %rax
    0000014f: 	cmpq	%rax, 0x8(%rsp)
    00000154: 	ja	.Ltmp2409 # Offset: 340
.Ltmp2406:
    00000156: 	movq	0x48(%rsp), %rbx
    0000015b: 	cmpq	%rbx, 0x8(%rsp)
    00000160: 	jne	.Ltmp2410 # Offset: 352
    00000162: 	jmp	.Ltmp2411 # Offset: 354
    00000167: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2413:
    00000170: 	movq	(%r12), %rdi
    00000174: 	leaq	0x10(%r12), %rax
    00000179: 	cmpq	%rax, %rdi
    0000017c: 	je	.Ltmp2412 # Offset: 380
    0000017e: 	movq	0x10(%r12), %rax
    00000183: 	leaq	0x1(%rax), %rsi
    00000187: 	callq	_ZdlPvm@PLT # Offset: 391
.Ltmp2412:
    0000018c: 	addq	$0x20, %r12
.Ltmp2410:
    00000190: 	cmpq	0x18(%rsp), %r12
    00000195: 	jne	.Ltmp2413 # Offset: 405
    00000197: 	cmpq	%r15, 0x10(%rsp)
    0000019c: 	je	.Ltmp2414 # Offset: 412
    0000019e: 	nop # Size: 2
.Ltmp2416:
    000001a0: 	movq	(%r15), %rdi
    000001a3: 	leaq	0x10(%r15), %rax
    000001a7: 	cmpq	%rax, %rdi
    000001aa: 	je	.Ltmp2415 # Offset: 426
    000001ac: 	movq	0x10(%r15), %rax
    000001b0: 	leaq	0x1(%rax), %rsi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
.Ltmp2415:
    000001b9: 	addq	$0x20, %r15
    000001bd: 	cmpq	%r15, 0x10(%rsp)
    000001c2: 	jne	.Ltmp2416 # Offset: 450
.Ltmp2414:
    000001c4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    000001cb: 	leaq	0x8(%rax), %rbx
    000001cf: 	cmpq	%r13, %rbx
    000001d2: 	jbe	.Ltmp2417 # Offset: 466
    000001d4: 	nopl	(%rax) # Size: 4
.Ltmp2418:
    000001d8: 	movq	(%r13), %rdi
    000001dc: 	movl	$0x200, %esi
    000001e1: 	addq	$0x8, %r13
    000001e5: 	callq	_ZdlPvm@PLT # Offset: 485
    000001ea: 	cmpq	%r13, %rbx
    000001ed: 	ja	.Ltmp2418 # Offset: 493
.Ltmp2417:
    000001ef: 	movdqa	0x30(%rsp), %xmm3
    000001f5: 	movdqa	0x20(%rsp), %xmm4
    000001fb: 	leaq	0xc0(%rsp), %r12
    00000203: 	leaq	0x60(%rsp), %r13
    00000208: 	leaq	DATAat0x381d8(%rip), %rdx
    0000020f: 	movq	%r13, %rsi
    00000212: 	movq	%r12, %rdi
    00000215: 	movaps	%xmm3, _Z7gLabelsB5cxx11+48(%rip)
    0000021c: 	movaps	%xmm4, _Z7gLabelsB5cxx11+64(%rip)
    00000223: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 547
    00000228: 	cvttsd2si	init_value(%rip), %edx
    00000230: 	movq	%r12, %r8
    00000233: 	movl	$0x1f40, %esi
    00000238: 	movq	%rbp, %rdi
    0000023b: 	leaq	_Z17test_for_loop_optIiET_PKS0_iS0_(%rip), %r15
    00000242: 	movq	%r15, %rcx
    00000245: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 581
    0000024a: 	movq	0xc0(%rsp), %rdi
    00000252: 	leaq	0xd0(%rsp), %rbx
    0000025a: 	cmpq	%rbx, %rdi
    0000025d: 	je	.Ltmp2419 # Offset: 605
    0000025f: 	movq	0xd0(%rsp), %rax
    00000267: 	leaq	0x1(%rax), %rsi
    0000026b: 	callq	_ZdlPvm@PLT # Offset: 619
.Ltmp2419:
    00000270: 	leaq	DATAat0x381ee(%rip), %rdx
    00000277: 	movq	%r13, %rsi
    0000027a: 	movq	%r12, %rdi
    0000027d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 637
    00000282: 	cvttsd2si	init_value(%rip), %edx
    0000028a: 	movq	%r12, %r8
    0000028d: 	movl	$0x1f40, %esi
    00000292: 	movq	%rbp, %rdi
    00000295: 	leaq	_Z19test_while_loop_optIiET_PKS0_iS0_(%rip), %rcx
    0000029c: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 668
    000002a1: 	movq	0xc0(%rsp), %rdi
    000002a9: 	cmpq	%rbx, %rdi
    000002ac: 	je	.Ltmp2420 # Offset: 684
    000002ae: 	movq	0xd0(%rsp), %rax
    000002b6: 	leaq	0x1(%rax), %rsi
    000002ba: 	callq	_ZdlPvm@PLT # Offset: 698
.Ltmp2420:
    000002bf: 	leaq	DATAat0x38206(%rip), %rdx
    000002c6: 	movq	%r13, %rsi
    000002c9: 	movq	%r12, %rdi
    000002cc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 716
    000002d1: 	cvttsd2si	init_value(%rip), %edx
    000002d9: 	movq	%r12, %r8
    000002dc: 	movl	$0x1f40, %esi
    000002e1: 	movq	%rbp, %rdi
    000002e4: 	leaq	_Z16test_do_loop_optIiET_PKS0_iS0_(%rip), %rcx
    000002eb: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 747
    000002f0: 	movq	0xc0(%rsp), %rdi
    000002f8: 	cmpq	%rbx, %rdi
    000002fb: 	je	.Ltmp2421 # Offset: 763
    000002fd: 	movq	0xd0(%rsp), %rax
    00000305: 	leaq	0x1(%rax), %rsi
    00000309: 	callq	_ZdlPvm@PLT # Offset: 777
.Ltmp2421:
    0000030e: 	leaq	DATAat0x3821b(%rip), %rdx
    00000315: 	movq	%r13, %rsi
    00000318: 	movq	%r12, %rdi
    0000031b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 795
    00000320: 	cvttsd2si	init_value(%rip), %edx
    00000328: 	movq	%r12, %r8
    0000032b: 	movl	$0x1f40, %esi
    00000330: 	movq	%rbp, %rdi
    00000333: 	leaq	_Z18test_goto_loop_optIiET_PKS0_iS0_(%rip), %rcx
    0000033a: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 826
    0000033f: 	movq	0xc0(%rsp), %rdi
    00000347: 	cmpq	%rbx, %rdi
    0000034a: 	je	.Ltmp2422 # Offset: 842
    0000034c: 	movq	0xd0(%rsp), %rax
    00000354: 	leaq	0x1(%rax), %rsi
    00000358: 	callq	_ZdlPvm@PLT # Offset: 856
.Ltmp2422:
    0000035d: 	leaq	DATAat0x38232(%rip), %rdx
    00000364: 	movq	%r13, %rsi
    00000367: 	movq	%r12, %rdi
    0000036a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 874
    0000036f: 	cvttsd2si	init_value(%rip), %edx
    00000377: 	movq	%r12, %r8
    0000037a: 	movl	$0x1f40, %esi
    0000037f: 	movq	%rbp, %rdi
    00000382: 	leaq	_Z19test_for_loop_paramIiET_PKS0_iS0_(%rip), %rcx
    00000389: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 905
    0000038e: 	movq	0xc0(%rsp), %rdi
    00000396: 	cmpq	%rbx, %rdi
    00000399: 	je	.Ltmp2423 # Offset: 921
    0000039b: 	movq	0xd0(%rsp), %rax
    000003a3: 	leaq	0x1(%rax), %rsi
    000003a7: 	callq	_ZdlPvm@PLT # Offset: 935
.Ltmp2423:
    000003ac: 	leaq	DATAat0x3824a(%rip), %rdx
    000003b3: 	movq	%r13, %rsi
    000003b6: 	movq	%r12, %rdi
    000003b9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 953
    000003be: 	cvttsd2si	init_value(%rip), %edx
    000003c6: 	movq	%r12, %r8
    000003c9: 	movl	$0x1f40, %esi
    000003ce: 	movq	%rbp, %rdi
    000003d1: 	leaq	_Z20test_for_loop_param2IiET_PKS0_iS0_(%rip), %rcx
    000003d8: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 984
    000003dd: 	movq	0xc0(%rsp), %rdi
    000003e5: 	cmpq	%rbx, %rdi
    000003e8: 	je	.Ltmp2424 # Offset: 1000
    000003ea: 	movq	0xd0(%rsp), %rax
    000003f2: 	leaq	0x1(%rax), %rsi
    000003f6: 	callq	_ZdlPvm@PLT # Offset: 1014
.Ltmp2424:
    000003fb: 	movq	0x60(%rsp), %rax
    00000400: 	movq	0x68(%rsp), %r14
    00000405: 	movq	%rbx, 0xc0(%rsp)
    0000040d: 	movq	%rax, %rcx
    00000410: 	movq	%rax, (%rsp)
    00000414: 	addq	%r14, %rcx
    00000417: 	je	.Ltmp2425 # Offset: 1047
    00000419: 	testq	%rax, %rax
    0000041c: 	je	.Ltmp2426 # Offset: 1052
.Ltmp2425:
    00000422: 	movq	%r14, 0x58(%rsp)
    00000427: 	cmpq	$0xf, %r14
    0000042b: 	ja	.Ltmp2427 # Offset: 1067
    00000431: 	cmpq	$0x1, %r14
    00000435: 	jne	.Ltmp2428 # Offset: 1077
    0000043b: 	movq	(%rsp), %rax
    0000043f: 	movzbl	(%rax), %eax
    00000442: 	movb	%al, 0xd0(%rsp)
    00000449: 	movq	%rbx, %rax
.Ltmp2595:
    0000044c: 	movq	%r14, 0xc8(%rsp)
    00000454: 	movb	$0x0, (%rax,%r14)
    00000459: 	movabsq	$0x3fffffffffffffff, %rax
    00000463: 	subq	0xc8(%rsp), %rax
    0000046b: 	cmpq	$0x17, %rax
    0000046f: 	jbe	.Ltmp2429 # Offset: 1135
    00000475: 	movl	$0x18, %edx
    0000047a: 	leaq	DATAat0x38263(%rip), %rsi
    00000481: 	movq	%r12, %rdi
    00000484: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1156
    00000489: 	cvttsd2si	init_value(%rip), %edx
    00000491: 	movq	%r12, %r8
    00000494: 	movl	$0x1f40, %esi
    00000499: 	movq	%rbp, %rdi
    0000049c: 	leaq	_Z20test_for_loop_param3IiET_PKS0_iS0_(%rip), %rcx
    000004a3: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1187
    000004a8: 	movq	0xc0(%rsp), %rdi
    000004b0: 	cmpq	%rbx, %rdi
    000004b3: 	je	.Ltmp2430 # Offset: 1203
    000004b5: 	movq	0xd0(%rsp), %rax
    000004bd: 	leaq	0x1(%rax), %rsi
    000004c1: 	callq	_ZdlPvm@PLT # Offset: 1217
.Ltmp2430:
    000004c6: 	movq	0x60(%rsp), %rax
    000004cb: 	movq	0x68(%rsp), %r14
    000004d0: 	movq	%rbx, 0xc0(%rsp)
    000004d8: 	movq	%rax, %rcx
    000004db: 	movq	%rax, (%rsp)
    000004df: 	addq	%r14, %rcx
    000004e2: 	je	.Ltmp2431 # Offset: 1250
    000004e4: 	testq	%rax, %rax
    000004e7: 	je	.Ltmp2432 # Offset: 1255
.Ltmp2431:
    000004ed: 	movq	%r14, 0x58(%rsp)
    000004f2: 	cmpq	$0xf, %r14
    000004f6: 	ja	.Ltmp2433 # Offset: 1270
    000004fc: 	cmpq	$0x1, %r14
    00000500: 	jne	.Ltmp2434 # Offset: 1280
    00000506: 	movq	(%rsp), %rax
    0000050a: 	movzbl	(%rax), %eax
    0000050d: 	movb	%al, 0xd0(%rsp)
    00000514: 	movq	%rbx, %rax
.Ltmp2609:
    00000517: 	movq	%r14, 0xc8(%rsp)
    0000051f: 	movb	$0x0, (%rax,%r14)
    00000524: 	movabsq	$0x3fffffffffffffff, %rax
    0000052e: 	subq	0xc8(%rsp), %rax
    00000536: 	cmpq	$0x18, %rax
    0000053a: 	jbe	.Ltmp2435 # Offset: 1338
    00000540: 	movl	$0x19, %edx
    00000545: 	leaq	DATAat0x3827c(%rip), %rsi
    0000054c: 	movq	%r12, %rdi
    0000054f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1359
    00000554: 	cvttsd2si	init_value(%rip), %edx
    0000055c: 	movq	%r12, %r8
    0000055f: 	movl	$0x1f40, %esi
    00000564: 	movq	%rbp, %rdi
    00000567: 	leaq	_Z21test_while_loop_paramIiET_PKS0_iS0_(%rip), %rcx
    0000056e: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1390
    00000573: 	movq	0xc0(%rsp), %rdi
    0000057b: 	cmpq	%rbx, %rdi
    0000057e: 	je	.Ltmp2436 # Offset: 1406
    00000580: 	movq	0xd0(%rsp), %rax
    00000588: 	leaq	0x1(%rax), %rsi
    0000058c: 	callq	_ZdlPvm@PLT # Offset: 1420
.Ltmp2436:
    00000591: 	leaq	DATAat0x38296(%rip), %rdx
    00000598: 	movq	%r13, %rsi
    0000059b: 	movq	%r12, %rdi
    0000059e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1438
    000005a3: 	cvttsd2si	init_value(%rip), %edx
    000005ab: 	movq	%r12, %r8
    000005ae: 	movl	$0x1f40, %esi
    000005b3: 	movq	%rbp, %rdi
    000005b6: 	leaq	_Z22test_while_loop_param2IiET_PKS0_iS0_(%rip), %rcx
    000005bd: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1469
    000005c2: 	movq	0xc0(%rsp), %rdi
    000005ca: 	cmpq	%rbx, %rdi
    000005cd: 	je	.Ltmp2437 # Offset: 1485
    000005cf: 	movq	0xd0(%rsp), %rax
    000005d7: 	leaq	0x1(%rax), %rsi
    000005db: 	callq	_ZdlPvm@PLT # Offset: 1499
.Ltmp2437:
    000005e0: 	leaq	DATAat0x382b1(%rip), %rdx
    000005e7: 	movq	%r13, %rsi
    000005ea: 	movq	%r12, %rdi
    000005ed: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1517
    000005f2: 	cvttsd2si	init_value(%rip), %edx
    000005fa: 	movq	%r12, %r8
    000005fd: 	movl	$0x1f40, %esi
    00000602: 	movq	%rbp, %rdi
    00000605: 	leaq	_Z22test_while_loop_param3IiET_PKS0_iS0_(%rip), %rcx
    0000060c: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1548
    00000611: 	movq	0xc0(%rsp), %rdi
    00000619: 	cmpq	%rbx, %rdi
    0000061c: 	je	.Ltmp2438 # Offset: 1564
    0000061e: 	movq	0xd0(%rsp), %rax
    00000626: 	leaq	0x1(%rax), %rsi
    0000062a: 	callq	_ZdlPvm@PLT # Offset: 1578
.Ltmp2438:
    0000062f: 	movq	0x60(%rsp), %rax
    00000634: 	movq	0x68(%rsp), %r14
    00000639: 	movq	%rbx, 0xc0(%rsp)
    00000641: 	movq	%rax, %rcx
    00000644: 	movq	%rax, (%rsp)
    00000648: 	addq	%r14, %rcx
    0000064b: 	je	.Ltmp2439 # Offset: 1611
    0000064d: 	testq	%rax, %rax
    00000650: 	je	.Ltmp2440 # Offset: 1616
.Ltmp2439:
    00000656: 	movq	%r14, 0x58(%rsp)
    0000065b: 	cmpq	$0xf, %r14
    0000065f: 	ja	.Ltmp2441 # Offset: 1631
    00000665: 	cmpq	$0x1, %r14
    00000669: 	jne	.Ltmp2442 # Offset: 1641
    0000066f: 	movq	(%rsp), %rax
    00000673: 	movzbl	(%rax), %eax
    00000676: 	movb	%al, 0xd0(%rsp)
    0000067d: 	movq	%rbx, %rax
.Ltmp2607:
    00000680: 	movq	%r14, 0xc8(%rsp)
    00000688: 	movb	$0x0, (%rax,%r14)
    0000068d: 	movabsq	$0x3fffffffffffffff, %rax
    00000697: 	subq	0xc8(%rsp), %rax
    0000069f: 	cmpq	$0x15, %rax
    000006a3: 	jbe	.Ltmp2443 # Offset: 1699
    000006a9: 	movl	$0x16, %edx
    000006ae: 	leaq	DATAat0x382cc(%rip), %rsi
    000006b5: 	movq	%r12, %rdi
    000006b8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1720
    000006bd: 	cvttsd2si	init_value(%rip), %edx
    000006c5: 	movq	%r12, %r8
    000006c8: 	movl	$0x1f40, %esi
    000006cd: 	movq	%rbp, %rdi
    000006d0: 	leaq	_Z18test_do_loop_paramIiET_PKS0_iS0_(%rip), %rcx
    000006d7: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1751
    000006dc: 	movq	0xc0(%rsp), %rdi
    000006e4: 	cmpq	%rbx, %rdi
    000006e7: 	je	.Ltmp2444 # Offset: 1767
    000006e9: 	movq	0xd0(%rsp), %rax
    000006f1: 	leaq	0x1(%rax), %rsi
    000006f5: 	callq	_ZdlPvm@PLT # Offset: 1781
.Ltmp2444:
    000006fa: 	leaq	DATAat0x382e3(%rip), %rdx
    00000701: 	movq	%r13, %rsi
    00000704: 	movq	%r12, %rdi
    00000707: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1799
    0000070c: 	cvttsd2si	init_value(%rip), %edx
    00000714: 	movq	%r12, %r8
    00000717: 	movl	$0x1f40, %esi
    0000071c: 	movq	%rbp, %rdi
    0000071f: 	leaq	_Z19test_do_loop_param2IiET_PKS0_iS0_(%rip), %rcx
    00000726: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1830
    0000072b: 	movq	0xc0(%rsp), %rdi
    00000733: 	cmpq	%rbx, %rdi
    00000736: 	je	.Ltmp2445 # Offset: 1846
    00000738: 	movq	0xd0(%rsp), %rax
    00000740: 	leaq	0x1(%rax), %rsi
    00000744: 	callq	_ZdlPvm@PLT # Offset: 1860
.Ltmp2445:
    00000749: 	movq	0x60(%rsp), %rax
    0000074e: 	movq	0x68(%rsp), %r14
    00000753: 	movq	%rbx, 0xc0(%rsp)
    0000075b: 	movq	%rax, %rcx
    0000075e: 	movq	%rax, (%rsp)
    00000762: 	addq	%r14, %rcx
    00000765: 	je	.Ltmp2446 # Offset: 1893
    00000767: 	testq	%rax, %rax
    0000076a: 	je	.Ltmp2447 # Offset: 1898
.Ltmp2446:
    00000770: 	movq	%r14, 0x58(%rsp)
    00000775: 	cmpq	$0xf, %r14
    00000779: 	ja	.Ltmp2448 # Offset: 1913
    0000077f: 	cmpq	$0x1, %r14
    00000783: 	jne	.Ltmp2449 # Offset: 1923
    00000789: 	movq	(%rsp), %rax
    0000078d: 	movzbl	(%rax), %eax
    00000790: 	movb	%al, 0xd0(%rsp)
    00000797: 	movq	%rbx, %rax
.Ltmp2625:
    0000079a: 	movq	%r14, 0xc8(%rsp)
    000007a2: 	movb	$0x0, (%rax,%r14)
    000007a7: 	movabsq	$0x3fffffffffffffff, %rax
    000007b1: 	subq	0xc8(%rsp), %rax
    000007b9: 	cmpq	$0x16, %rax
    000007bd: 	jbe	.Ltmp2450 # Offset: 1981
    000007c3: 	movl	$0x17, %edx
    000007c8: 	leaq	DATAat0x382fb(%rip), %rsi
    000007cf: 	movq	%r12, %rdi
    000007d2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2002
    000007d7: 	cvttsd2si	init_value(%rip), %edx
    000007df: 	movq	%r12, %r8
    000007e2: 	movl	$0x1f40, %esi
    000007e7: 	movq	%rbp, %rdi
    000007ea: 	leaq	_Z19test_do_loop_param3IiET_PKS0_iS0_(%rip), %rcx
    000007f1: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2033
    000007f6: 	movq	0xc0(%rsp), %rdi
    000007fe: 	cmpq	%rbx, %rdi
    00000801: 	je	.Ltmp2451 # Offset: 2049
    00000803: 	movq	0xd0(%rsp), %rax
    0000080b: 	leaq	0x1(%rax), %rsi
    0000080f: 	callq	_ZdlPvm@PLT # Offset: 2063
.Ltmp2451:
    00000814: 	movq	0x60(%rsp), %rax
    00000819: 	movq	0x68(%rsp), %r14
    0000081e: 	movq	%rbx, 0xc0(%rsp)
    00000826: 	movq	%rax, %rcx
    00000829: 	movq	%rax, (%rsp)
    0000082d: 	addq	%r14, %rcx
    00000830: 	je	.Ltmp2452 # Offset: 2096
    00000832: 	testq	%rax, %rax
    00000835: 	je	.Ltmp2453 # Offset: 2101
.Ltmp2452:
    0000083b: 	movq	%r14, 0x58(%rsp)
    00000840: 	cmpq	$0xf, %r14
    00000844: 	ja	.Ltmp2454 # Offset: 2116
    0000084a: 	cmpq	$0x1, %r14
    0000084e: 	jne	.Ltmp2455 # Offset: 2126
    00000854: 	movq	(%rsp), %rax
    00000858: 	movzbl	(%rax), %eax
    0000085b: 	movb	%al, 0xd0(%rsp)
    00000862: 	movq	%rbx, %rax
.Ltmp2623:
    00000865: 	movq	%r14, 0xc8(%rsp)
    0000086d: 	movb	$0x0, (%rax,%r14)
    00000872: 	movabsq	$0x3fffffffffffffff, %rax
    0000087c: 	subq	0xc8(%rsp), %rax
    00000884: 	cmpq	$0x17, %rax
    00000888: 	jbe	.Ltmp2456 # Offset: 2184
    0000088e: 	movl	$0x18, %edx
    00000893: 	leaq	DATAat0x38313(%rip), %rsi
    0000089a: 	movq	%r12, %rdi
    0000089d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2205
    000008a2: 	cvttsd2si	init_value(%rip), %edx
    000008aa: 	movq	%r12, %r8
    000008ad: 	movl	$0x1f40, %esi
    000008b2: 	movq	%rbp, %rdi
    000008b5: 	leaq	_Z20test_goto_loop_paramIiET_PKS0_iS0_(%rip), %rcx
    000008bc: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2236
    000008c1: 	movq	0xc0(%rsp), %rdi
    000008c9: 	cmpq	%rbx, %rdi
    000008cc: 	je	.Ltmp2457 # Offset: 2252
    000008ce: 	movq	0xd0(%rsp), %rax
    000008d6: 	leaq	0x1(%rax), %rsi
    000008da: 	callq	_ZdlPvm@PLT # Offset: 2266
.Ltmp2457:
    000008df: 	leaq	DATAat0x3832c(%rip), %rdx
    000008e6: 	movq	%r13, %rsi
    000008e9: 	movq	%r12, %rdi
    000008ec: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2284
    000008f1: 	cvttsd2si	init_value(%rip), %edx
    000008f9: 	movq	%r12, %r8
    000008fc: 	movl	$0x1f40, %esi
    00000901: 	movq	%rbp, %rdi
    00000904: 	leaq	_Z21test_goto_loop_param2IiET_PKS0_iS0_(%rip), %rcx
    0000090b: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2315
    00000910: 	movq	0xc0(%rsp), %rdi
    00000918: 	cmpq	%rbx, %rdi
    0000091b: 	je	.Ltmp2458 # Offset: 2331
    0000091d: 	movq	0xd0(%rsp), %rax
    00000925: 	leaq	0x1(%rax), %rsi
    00000929: 	callq	_ZdlPvm@PLT # Offset: 2345
.Ltmp2458:
    0000092e: 	leaq	DATAat0x38346(%rip), %rdx
    00000935: 	movq	%r13, %rsi
    00000938: 	movq	%r12, %rdi
    0000093b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2363
    00000940: 	cvttsd2si	init_value(%rip), %edx
    00000948: 	movq	%r12, %r8
    0000094b: 	movl	$0x1f40, %esi
    00000950: 	movq	%rbp, %rdi
    00000953: 	leaq	_Z21test_goto_loop_param3IiET_PKS0_iS0_(%rip), %rcx
    0000095a: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2394
    0000095f: 	movq	0xc0(%rsp), %rdi
    00000967: 	cmpq	%rbx, %rdi
    0000096a: 	je	.Ltmp2459 # Offset: 2410
    0000096c: 	movq	0xd0(%rsp), %rax
    00000974: 	leaq	0x1(%rax), %rsi
    00000978: 	callq	_ZdlPvm@PLT # Offset: 2424
.Ltmp2459:
    0000097d: 	movq	0x60(%rsp), %rax
    00000982: 	movq	0x68(%rsp), %r14
    00000987: 	movq	%rbx, 0xc0(%rsp)
    0000098f: 	movq	%rax, %rcx
    00000992: 	movq	%rax, (%rsp)
    00000996: 	addq	%r14, %rcx
    00000999: 	je	.Ltmp2460 # Offset: 2457
    0000099b: 	testq	%rax, %rax
    0000099e: 	je	.Ltmp2461 # Offset: 2462
.Ltmp2460:
    000009a4: 	movq	%r14, 0x58(%rsp)
    000009a9: 	cmpq	$0xf, %r14
    000009ad: 	ja	.Ltmp2462 # Offset: 2477
    000009b3: 	cmpq	$0x1, %r14
    000009b7: 	jne	.Ltmp2463 # Offset: 2487
    000009bd: 	movq	(%rsp), %rax
    000009c1: 	movzbl	(%rax), %eax
    000009c4: 	movb	%al, 0xd0(%rsp)
    000009cb: 	movq	%rbx, %rax
.Ltmp2621:
    000009ce: 	movq	%r14, 0xc8(%rsp)
    000009d6: 	movb	$0x0, (%rax,%r14)
    000009db: 	movabsq	$0x3fffffffffffffff, %rax
    000009e5: 	subq	0xc8(%rsp), %rax
    000009ed: 	cmpq	$0x13, %rax
    000009f1: 	jbe	.Ltmp2464 # Offset: 2545
    000009f7: 	movl	$0x14, %edx
    000009fc: 	leaq	DATAat0x38360(%rip), %rsi
    00000a03: 	movq	%r12, %rdi
    00000a06: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2566
    00000a0b: 	cvttsd2si	init_value(%rip), %edx
    00000a13: 	movq	%r12, %r8
    00000a16: 	movl	$0x1f40, %esi
    00000a1b: 	movq	%rbp, %rdi
    00000a1e: 	leaq	_Z20test_for_loop_globalIiET_PKS0_iS0_(%rip), %rcx
    00000a25: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2597
    00000a2a: 	movq	0xc0(%rsp), %rdi
    00000a32: 	cmpq	%rbx, %rdi
    00000a35: 	je	.Ltmp2465 # Offset: 2613
    00000a37: 	movq	0xd0(%rsp), %rax
    00000a3f: 	leaq	0x1(%rax), %rsi
    00000a43: 	callq	_ZdlPvm@PLT # Offset: 2627
.Ltmp2465:
    00000a48: 	movq	0x60(%rsp), %rax
    00000a4d: 	movq	0x68(%rsp), %r14
    00000a52: 	movq	%rbx, 0xc0(%rsp)
    00000a5a: 	movq	%rax, %rcx
    00000a5d: 	movq	%rax, (%rsp)
    00000a61: 	addq	%r14, %rcx
    00000a64: 	je	.Ltmp2466 # Offset: 2660
    00000a66: 	testq	%rax, %rax
    00000a69: 	je	.Ltmp2467 # Offset: 2665
.Ltmp2466:
    00000a6f: 	movq	%r14, 0x58(%rsp)
    00000a74: 	cmpq	$0xf, %r14
    00000a78: 	ja	.Ltmp2468 # Offset: 2680
    00000a7e: 	cmpq	$0x1, %r14
    00000a82: 	jne	.Ltmp2469 # Offset: 2690
    00000a88: 	movq	(%rsp), %rax
    00000a8c: 	movzbl	(%rax), %eax
    00000a8f: 	movb	%al, 0xd0(%rsp)
    00000a96: 	movq	%rbx, %rax
.Ltmp2619:
    00000a99: 	movq	%r14, 0xc8(%rsp)
    00000aa1: 	movb	$0x0, (%rax,%r14)
    00000aa6: 	movabsq	$0x3fffffffffffffff, %rax
    00000ab0: 	subq	0xc8(%rsp), %rax
    00000ab8: 	cmpq	$0x14, %rax
    00000abc: 	jbe	.Ltmp2470 # Offset: 2748
    00000ac2: 	movl	$0x15, %edx
    00000ac7: 	leaq	DATAat0x38375(%rip), %rsi
    00000ace: 	movq	%r12, %rdi
    00000ad1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2769
    00000ad6: 	cvttsd2si	init_value(%rip), %edx
    00000ade: 	movq	%r12, %r8
    00000ae1: 	movl	$0x1f40, %esi
    00000ae6: 	movq	%rbp, %rdi
    00000ae9: 	leaq	_Z21test_for_loop_global2IiET_PKS0_iS0_(%rip), %rcx
    00000af0: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2800
    00000af5: 	movq	0xc0(%rsp), %rdi
    00000afd: 	cmpq	%rbx, %rdi
    00000b00: 	je	.Ltmp2471 # Offset: 2816
    00000b02: 	movq	0xd0(%rsp), %rax
    00000b0a: 	leaq	0x1(%rax), %rsi
    00000b0e: 	callq	_ZdlPvm@PLT # Offset: 2830
.Ltmp2471:
    00000b13: 	leaq	DATAat0x3838b(%rip), %rdx
    00000b1a: 	movq	%r13, %rsi
    00000b1d: 	movq	%r12, %rdi
    00000b20: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2848
    00000b25: 	cvttsd2si	init_value(%rip), %edx
    00000b2d: 	movq	%r12, %r8
    00000b30: 	movl	$0x1f40, %esi
    00000b35: 	movq	%rbp, %rdi
    00000b38: 	leaq	_Z21test_for_loop_global3IiET_PKS0_iS0_(%rip), %rcx
    00000b3f: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2879
    00000b44: 	movq	0xc0(%rsp), %rdi
    00000b4c: 	cmpq	%rbx, %rdi
    00000b4f: 	je	.Ltmp2472 # Offset: 2895
    00000b51: 	movq	0xd0(%rsp), %rax
    00000b59: 	leaq	0x1(%rax), %rsi
    00000b5d: 	callq	_ZdlPvm@PLT # Offset: 2909
.Ltmp2472:
    00000b62: 	leaq	DATAat0x383a1(%rip), %rdx
    00000b69: 	movq	%r13, %rsi
    00000b6c: 	movq	%r12, %rdi
    00000b6f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2927
    00000b74: 	cvttsd2si	init_value(%rip), %edx
    00000b7c: 	movq	%r12, %r8
    00000b7f: 	movl	$0x1f40, %esi
    00000b84: 	movq	%rbp, %rdi
    00000b87: 	leaq	_Z22test_while_loop_globalIiET_PKS0_iS0_(%rip), %rcx
    00000b8e: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2958
    00000b93: 	movq	0xc0(%rsp), %rdi
    00000b9b: 	cmpq	%rbx, %rdi
    00000b9e: 	je	.Ltmp2473 # Offset: 2974
    00000ba0: 	movq	0xd0(%rsp), %rax
    00000ba8: 	leaq	0x1(%rax), %rsi
    00000bac: 	callq	_ZdlPvm@PLT # Offset: 2988
.Ltmp2473:
    00000bb1: 	movq	0x60(%rsp), %rax
    00000bb6: 	movq	0x68(%rsp), %r14
    00000bbb: 	movq	%rbx, 0xc0(%rsp)
    00000bc3: 	movq	%rax, %rcx
    00000bc6: 	movq	%rax, (%rsp)
    00000bca: 	addq	%r14, %rcx
    00000bcd: 	je	.Ltmp2474 # Offset: 3021
    00000bcf: 	testq	%rax, %rax
    00000bd2: 	je	.Ltmp2475 # Offset: 3026
.Ltmp2474:
    00000bd8: 	movq	%r14, 0x58(%rsp)
    00000bdd: 	cmpq	$0xf, %r14
    00000be1: 	ja	.Ltmp2476 # Offset: 3041
    00000be7: 	cmpq	$0x1, %r14
    00000beb: 	jne	.Ltmp2477 # Offset: 3051
    00000bf1: 	movq	(%rsp), %rax
    00000bf5: 	movzbl	(%rax), %eax
    00000bf8: 	movb	%al, 0xd0(%rsp)
    00000bff: 	movq	%rbx, %rax
.Ltmp2617:
    00000c02: 	movq	%r14, 0xc8(%rsp)
    00000c0a: 	movb	$0x0, (%rax,%r14)
    00000c0f: 	movabsq	$0x3fffffffffffffff, %rax
    00000c19: 	subq	0xc8(%rsp), %rax
    00000c21: 	cmpq	$0x16, %rax
    00000c25: 	jbe	.Ltmp2478 # Offset: 3109
    00000c2b: 	movl	$0x17, %edx
    00000c30: 	leaq	DATAat0x383b8(%rip), %rsi
    00000c37: 	movq	%r12, %rdi
    00000c3a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3130
    00000c3f: 	cvttsd2si	init_value(%rip), %edx
    00000c47: 	movq	%r12, %r8
    00000c4a: 	movl	$0x1f40, %esi
    00000c4f: 	movq	%rbp, %rdi
    00000c52: 	leaq	_Z23test_while_loop_global2IiET_PKS0_iS0_(%rip), %rcx
    00000c59: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3161
    00000c5e: 	movq	0xc0(%rsp), %rdi
    00000c66: 	cmpq	%rbx, %rdi
    00000c69: 	je	.Ltmp2479 # Offset: 3177
    00000c6b: 	movq	0xd0(%rsp), %rax
    00000c73: 	leaq	0x1(%rax), %rsi
    00000c77: 	callq	_ZdlPvm@PLT # Offset: 3191
.Ltmp2479:
    00000c7c: 	leaq	DATAat0x383d0(%rip), %rdx
    00000c83: 	movq	%r13, %rsi
    00000c86: 	movq	%r12, %rdi
    00000c89: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3209
    00000c8e: 	cvttsd2si	init_value(%rip), %edx
    00000c96: 	movq	%r12, %r8
    00000c99: 	movl	$0x1f40, %esi
    00000c9e: 	movq	%rbp, %rdi
    00000ca1: 	leaq	_Z23test_while_loop_global3IiET_PKS0_iS0_(%rip), %rcx
    00000ca8: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3240
    00000cad: 	movq	0xc0(%rsp), %rdi
    00000cb5: 	cmpq	%rbx, %rdi
    00000cb8: 	je	.Ltmp2480 # Offset: 3256
    00000cba: 	movq	0xd0(%rsp), %rax
    00000cc2: 	leaq	0x1(%rax), %rsi
    00000cc6: 	callq	_ZdlPvm@PLT # Offset: 3270
.Ltmp2480:
    00000ccb: 	leaq	DATAat0x383e8(%rip), %rdx
    00000cd2: 	movq	%r13, %rsi
    00000cd5: 	movq	%r12, %rdi
    00000cd8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3288
    00000cdd: 	cvttsd2si	init_value(%rip), %edx
    00000ce5: 	movq	%r12, %r8
    00000ce8: 	movl	$0x1f40, %esi
    00000ced: 	movq	%rbp, %rdi
    00000cf0: 	leaq	_Z19test_do_loop_globalIiET_PKS0_iS0_(%rip), %rcx
    00000cf7: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3319
    00000cfc: 	movq	0xc0(%rsp), %rdi
    00000d04: 	cmpq	%rbx, %rdi
    00000d07: 	je	.Ltmp2481 # Offset: 3335
    00000d09: 	movq	0xd0(%rsp), %rax
    00000d11: 	leaq	0x1(%rax), %rsi
    00000d15: 	callq	_ZdlPvm@PLT # Offset: 3349
.Ltmp2481:
    00000d1a: 	leaq	DATAat0x383fc(%rip), %rdx
    00000d21: 	movq	%r13, %rsi
    00000d24: 	movq	%r12, %rdi
    00000d27: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3367
    00000d2c: 	cvttsd2si	init_value(%rip), %edx
    00000d34: 	movq	%r12, %r8
    00000d37: 	movl	$0x1f40, %esi
    00000d3c: 	movq	%rbp, %rdi
    00000d3f: 	leaq	_Z20test_do_loop_global2IiET_PKS0_iS0_(%rip), %rcx
    00000d46: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3398
    00000d4b: 	movq	0xc0(%rsp), %rdi
    00000d53: 	cmpq	%rbx, %rdi
    00000d56: 	je	.Ltmp2482 # Offset: 3414
    00000d58: 	movq	0xd0(%rsp), %rax
    00000d60: 	leaq	0x1(%rax), %rsi
    00000d64: 	callq	_ZdlPvm@PLT # Offset: 3428
.Ltmp2482:
    00000d69: 	movq	0x60(%rsp), %rax
    00000d6e: 	movq	0x68(%rsp), %r14
    00000d73: 	movq	%rbx, 0xc0(%rsp)
    00000d7b: 	movq	%rax, %rcx
    00000d7e: 	movq	%rax, (%rsp)
    00000d82: 	addq	%r14, %rcx
    00000d85: 	je	.Ltmp2483 # Offset: 3461
    00000d87: 	testq	%rax, %rax
    00000d8a: 	je	.Ltmp2484 # Offset: 3466
.Ltmp2483:
    00000d90: 	movq	%r14, 0x58(%rsp)
    00000d95: 	cmpq	$0xf, %r14
    00000d99: 	ja	.Ltmp2485 # Offset: 3481
    00000d9f: 	cmpq	$0x1, %r14
    00000da3: 	jne	.Ltmp2486 # Offset: 3491
    00000da9: 	movq	(%rsp), %rax
    00000dad: 	movzbl	(%rax), %eax
    00000db0: 	movb	%al, 0xd0(%rsp)
    00000db7: 	movq	%rbx, %rax
.Ltmp2615:
    00000dba: 	movq	%r14, 0xc8(%rsp)
    00000dc2: 	movb	$0x0, (%rax,%r14)
    00000dc7: 	movabsq	$0x3fffffffffffffff, %rax
    00000dd1: 	subq	0xc8(%rsp), %rax
    00000dd9: 	cmpq	$0x13, %rax
    00000ddd: 	jbe	.Ltmp2487 # Offset: 3549
    00000de3: 	movl	$0x14, %edx
    00000de8: 	leaq	DATAat0x38411(%rip), %rsi
    00000def: 	movq	%r12, %rdi
    00000df2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3570
    00000df7: 	cvttsd2si	init_value(%rip), %edx
    00000dff: 	movq	%r12, %r8
    00000e02: 	movl	$0x1f40, %esi
    00000e07: 	movq	%rbp, %rdi
    00000e0a: 	leaq	_Z20test_do_loop_global3IiET_PKS0_iS0_(%rip), %rcx
    00000e11: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3601
    00000e16: 	movq	0xc0(%rsp), %rdi
    00000e1e: 	cmpq	%rbx, %rdi
    00000e21: 	je	.Ltmp2488 # Offset: 3617
    00000e23: 	movq	0xd0(%rsp), %rax
    00000e2b: 	leaq	0x1(%rax), %rsi
    00000e2f: 	callq	_ZdlPvm@PLT # Offset: 3631
.Ltmp2488:
    00000e34: 	leaq	DATAat0x38426(%rip), %rdx
    00000e3b: 	movq	%r13, %rsi
    00000e3e: 	movq	%r12, %rdi
    00000e41: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3649
    00000e46: 	cvttsd2si	init_value(%rip), %edx
    00000e4e: 	movq	%r12, %r8
    00000e51: 	movl	$0x1f40, %esi
    00000e56: 	movq	%rbp, %rdi
    00000e59: 	leaq	_Z21test_goto_loop_globalIiET_PKS0_iS0_(%rip), %rcx
    00000e60: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3680
    00000e65: 	movq	0xc0(%rsp), %rdi
    00000e6d: 	cmpq	%rbx, %rdi
    00000e70: 	je	.Ltmp2489 # Offset: 3696
    00000e72: 	movq	0xd0(%rsp), %rax
    00000e7a: 	leaq	0x1(%rax), %rsi
    00000e7e: 	callq	_ZdlPvm@PLT # Offset: 3710
.Ltmp2489:
    00000e83: 	movq	0x60(%rsp), %rax
    00000e88: 	movq	0x68(%rsp), %r14
    00000e8d: 	movq	%rbx, 0xc0(%rsp)
    00000e95: 	movq	%rax, %rcx
    00000e98: 	movq	%rax, (%rsp)
    00000e9c: 	addq	%r14, %rcx
    00000e9f: 	je	.Ltmp2490 # Offset: 3743
    00000ea1: 	testq	%rax, %rax
    00000ea4: 	je	.Ltmp2491 # Offset: 3748
.Ltmp2490:
    00000eaa: 	movq	%r14, 0x58(%rsp)
    00000eaf: 	cmpq	$0xf, %r14
    00000eb3: 	ja	.Ltmp2492 # Offset: 3763
    00000eb9: 	cmpq	$0x1, %r14
    00000ebd: 	jne	.Ltmp2493 # Offset: 3773
    00000ec3: 	movq	(%rsp), %rax
    00000ec7: 	movzbl	(%rax), %eax
    00000eca: 	movb	%al, 0xd0(%rsp)
    00000ed1: 	movq	%rbx, %rax
.Ltmp2613:
    00000ed4: 	movq	%r14, 0xc8(%rsp)
    00000edc: 	movb	$0x0, (%rax,%r14)
    00000ee1: 	movabsq	$0x3fffffffffffffff, %rax
    00000eeb: 	subq	0xc8(%rsp), %rax
    00000ef3: 	cmpq	$0x15, %rax
    00000ef7: 	jbe	.Ltmp2494 # Offset: 3831
    00000efd: 	movl	$0x16, %edx
    00000f02: 	leaq	DATAat0x3843c(%rip), %rsi
    00000f09: 	movq	%r12, %rdi
    00000f0c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3852
    00000f11: 	cvttsd2si	init_value(%rip), %edx
    00000f19: 	movq	%r12, %r8
    00000f1c: 	movl	$0x1f40, %esi
    00000f21: 	movq	%rbp, %rdi
    00000f24: 	leaq	_Z22test_goto_loop_global2IiET_PKS0_iS0_(%rip), %rcx
    00000f2b: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3883
    00000f30: 	movq	0xc0(%rsp), %rdi
    00000f38: 	cmpq	%rbx, %rdi
    00000f3b: 	je	.Ltmp2495 # Offset: 3899
    00000f3d: 	movq	0xd0(%rsp), %rax
    00000f45: 	leaq	0x1(%rax), %rsi
    00000f49: 	callq	_ZdlPvm@PLT # Offset: 3913
.Ltmp2495:
    00000f4e: 	leaq	DATAat0x38453(%rip), %rdx
    00000f55: 	movq	%r13, %rsi
    00000f58: 	movq	%r12, %rdi
    00000f5b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3931
    00000f60: 	cvttsd2si	init_value(%rip), %edx
    00000f68: 	movq	%r12, %r8
    00000f6b: 	movl	$0x1f40, %esi
    00000f70: 	movq	%rbp, %rdi
    00000f73: 	leaq	_Z22test_goto_loop_global3IiET_PKS0_iS0_(%rip), %rcx
    00000f7a: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3962
    00000f7f: 	movq	0xc0(%rsp), %rdi
    00000f87: 	cmpq	%rbx, %rdi
    00000f8a: 	je	.Ltmp2496 # Offset: 3978
    00000f8c: 	movq	0xd0(%rsp), %rax
    00000f94: 	leaq	0x1(%rax), %rsi
    00000f98: 	callq	_ZdlPvm@PLT # Offset: 3992
.Ltmp2496:
    00000f9d: 	leaq	0x80(%rsp), %rdi
    00000fa5: 	leaq	DATAat0x3846a(%rip), %rdx
    00000fac: 	movq	%r13, %rsi
    00000faf: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4015
    00000fb4: 	movl	iterations(%rip), %edx
    00000fba: 	xorl	%r8d, %r8d
    00000fbd: 	xorl	%ecx, %ecx
    00000fbf: 	movl	$0x1f40, %esi
    00000fc4: 	movq	0x80(%rsp), %rdi
    00000fcc: 	callq	_Z9summarizePKciiii # Offset: 4044
    00000fd1: 	movq	0x60(%rsp), %rax
    00000fd6: 	movq	0x68(%rsp), %r14
    00000fdb: 	movq	%rbx, 0xc0(%rsp)
    00000fe3: 	movq	%rax, %rcx
    00000fe6: 	movq	%rax, (%rsp)
    00000fea: 	addq	%r14, %rcx
    00000fed: 	je	.Ltmp2497 # Offset: 4077
    00000fef: 	testq	%rax, %rax
    00000ff2: 	je	.Ltmp2498 # Offset: 4082
.Ltmp2497:
    00000ff8: 	movq	%r14, 0x58(%rsp)
    00000ffd: 	cmpq	$0xf, %r14
    00001001: 	ja	.Ltmp2499 # Offset: 4097
    00001007: 	cmpq	$0x1, %r14
    0000100b: 	jne	.Ltmp2500 # Offset: 4107
    00001011: 	movq	(%rsp), %rax
    00001015: 	movzbl	(%rax), %eax
    00001018: 	movb	%al, 0xd0(%rsp)
    0000101f: 	movq	%rbx, %rax
.Ltmp2611:
    00001022: 	movq	%r14, 0xc8(%rsp)
    0000102a: 	movb	$0x0, (%rax,%r14)
    0000102f: 	movabsq	$0x3fffffffffffffff, %rax
    00001039: 	subq	0xc8(%rsp), %rax
    00001041: 	cmpq	$0x15, %rax
    00001045: 	jbe	.Ltmp2501 # Offset: 4165
    0000104b: 	movl	$0x16, %edx
    00001050: 	leaq	DATAat0x3847c(%rip), %rsi
    00001057: 	movq	%r12, %rdi
    0000105a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4186
    0000105f: 	movq	%r12, %r8
    00001062: 	movq	%r15, %rcx
    00001065: 	movl	$0x1f40, %esi
    0000106a: 	movq	%rbp, %rdi
    0000106d: 	cvttsd2si	init_value(%rip), %edx
    00001075: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4213
    0000107a: 	movq	0xc0(%rsp), %rdi
    00001082: 	cmpq	%rbx, %rdi
    00001085: 	je	.Ltmp2502 # Offset: 4229
    00001087: 	movq	0xd0(%rsp), %rax
    0000108f: 	leaq	0x1(%rax), %rsi
    00001093: 	callq	_ZdlPvm@PLT # Offset: 4243
.Ltmp2502:
    00001098: 	leaq	DATAat0x38493(%rip), %rdx
    0000109f: 	movq	%r13, %rsi
    000010a2: 	movq	%r12, %rdi
    000010a5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4261
    000010aa: 	cvttsd2si	init_value(%rip), %edx
    000010b2: 	movq	%r12, %r8
    000010b5: 	movl	$0x1f40, %esi
    000010ba: 	movq	%rbp, %rdi
    000010bd: 	leaq	_Z19test_while_loop_optIiET_PKS0_iS0_(%rip), %rcx
    000010c4: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4292
    000010c9: 	movq	0xc0(%rsp), %rdi
    000010d1: 	cmpq	%rbx, %rdi
    000010d4: 	je	.Ltmp2503 # Offset: 4308
    000010d6: 	movq	0xd0(%rsp), %rax
    000010de: 	leaq	0x1(%rax), %rsi
    000010e2: 	callq	_ZdlPvm@PLT # Offset: 4322
.Ltmp2503:
    000010e7: 	leaq	DATAat0x384ac(%rip), %rdx
    000010ee: 	movq	%r13, %rsi
    000010f1: 	movq	%r12, %rdi
    000010f4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4340
    000010f9: 	cvttsd2si	init_value(%rip), %edx
    00001101: 	movq	%r12, %r8
    00001104: 	movl	$0x1f40, %esi
    00001109: 	movq	%rbp, %rdi
    0000110c: 	leaq	_Z16test_do_loop_optIiET_PKS0_iS0_(%rip), %rcx
    00001113: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4371
    00001118: 	movq	0xc0(%rsp), %rdi
    00001120: 	cmpq	%rbx, %rdi
    00001123: 	je	.Ltmp2504 # Offset: 4387
    00001125: 	movq	0xd0(%rsp), %rax
    0000112d: 	leaq	0x1(%rax), %rsi
    00001131: 	callq	_ZdlPvm@PLT # Offset: 4401
.Ltmp2504:
    00001136: 	movq	0x60(%rsp), %r15
    0000113b: 	movq	0x68(%rsp), %r14
    00001140: 	movq	%rbx, 0xc0(%rsp)
    00001148: 	movq	%r15, %rax
    0000114b: 	addq	%r14, %rax
    0000114e: 	je	.Ltmp2505 # Offset: 4430
    00001150: 	testq	%r15, %r15
    00001153: 	je	.Ltmp2506 # Offset: 4435
.Ltmp2505:
    00001159: 	movq	%r14, 0x58(%rsp)
    0000115e: 	cmpq	$0xf, %r14
    00001162: 	ja	.Ltmp2507 # Offset: 4450
    00001168: 	cmpq	$0x1, %r14
    0000116c: 	jne	.Ltmp2508 # Offset: 4460
    00001172: 	movzbl	(%r15), %eax
    00001176: 	movb	%al, 0xd0(%rsp)
    0000117d: 	movq	%rbx, %rax
.Ltmp2605:
    00001180: 	movq	%r14, 0xc8(%rsp)
    00001188: 	movb	$0x0, (%rax,%r14)
    0000118d: 	movabsq	$0x3fffffffffffffff, %rax
    00001197: 	subq	0xc8(%rsp), %rax
    0000119f: 	cmpq	$0x16, %rax
    000011a3: 	jbe	.Ltmp2509 # Offset: 4515
    000011a9: 	movl	$0x17, %edx
    000011ae: 	leaq	DATAat0x384c2(%rip), %rsi
    000011b5: 	movq	%r12, %rdi
    000011b8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4536
    000011bd: 	cvttsd2si	init_value(%rip), %edx
    000011c5: 	movq	%r12, %r8
    000011c8: 	movl	$0x1f40, %esi
    000011cd: 	movq	%rbp, %rdi
    000011d0: 	leaq	_Z18test_goto_loop_optIiET_PKS0_iS0_(%rip), %rcx
    000011d7: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4567
    000011dc: 	movq	0xc0(%rsp), %rdi
    000011e4: 	cmpq	%rbx, %rdi
    000011e7: 	je	.Ltmp2510 # Offset: 4583
    000011e9: 	movq	0xd0(%rsp), %rax
    000011f1: 	leaq	0x1(%rax), %rsi
    000011f5: 	callq	_ZdlPvm@PLT # Offset: 4597
.Ltmp2510:
    000011fa: 	leaq	DATAat0x384da(%rip), %rdx
    00001201: 	movq	%r13, %rsi
    00001204: 	movq	%r12, %rdi
    00001207: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4615
    0000120c: 	cvttsd2si	init_value(%rip), %edx
    00001214: 	movq	%r12, %r8
    00001217: 	movl	$0x1f40, %esi
    0000121c: 	movq	%rbp, %rdi
    0000121f: 	leaq	_Z20test_for_loop2_paramIiET_PKS0_iS0_(%rip), %rcx
    00001226: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4646
    0000122b: 	movq	0xc0(%rsp), %rdi
    00001233: 	cmpq	%rbx, %rdi
    00001236: 	je	.Ltmp2511 # Offset: 4662
    00001238: 	movq	0xd0(%rsp), %rax
    00001240: 	leaq	0x1(%rax), %rsi
    00001244: 	callq	_ZdlPvm@PLT # Offset: 4676
.Ltmp2511:
    00001249: 	leaq	DATAat0x384f3(%rip), %rdx
    00001250: 	movq	%r13, %rsi
    00001253: 	movq	%r12, %rdi
    00001256: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4694
    0000125b: 	cvttsd2si	init_value(%rip), %edx
    00001263: 	movq	%r12, %r8
    00001266: 	movl	$0x1f40, %esi
    0000126b: 	movq	%rbp, %rdi
    0000126e: 	leaq	_Z21test_for_loop2_param2IiET_PKS0_iS0_(%rip), %rcx
    00001275: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4725
    0000127a: 	movq	0xc0(%rsp), %rdi
    00001282: 	cmpq	%rbx, %rdi
    00001285: 	je	.Ltmp2512 # Offset: 4741
    00001287: 	movq	0xd0(%rsp), %rax
    0000128f: 	leaq	0x1(%rax), %rsi
    00001293: 	callq	_ZdlPvm@PLT # Offset: 4755
.Ltmp2512:
    00001298: 	leaq	DATAat0x3850d(%rip), %rdx
    0000129f: 	movq	%r13, %rsi
    000012a2: 	movq	%r12, %rdi
    000012a5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4773
    000012aa: 	cvttsd2si	init_value(%rip), %edx
    000012b2: 	movq	%r12, %r8
    000012b5: 	movl	$0x1f40, %esi
    000012ba: 	movq	%rbp, %rdi
    000012bd: 	leaq	_Z22test_while_loop2_paramIiET_PKS0_iS0_(%rip), %rcx
    000012c4: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4804
    000012c9: 	movq	0xc0(%rsp), %rdi
    000012d1: 	cmpq	%rbx, %rdi
    000012d4: 	je	.Ltmp2513 # Offset: 4820
    000012d6: 	movq	0xd0(%rsp), %rax
    000012de: 	leaq	0x1(%rax), %rsi
    000012e2: 	callq	_ZdlPvm@PLT # Offset: 4834
.Ltmp2513:
    000012e7: 	movq	0x60(%rsp), %r15
    000012ec: 	movq	0x68(%rsp), %r14
    000012f1: 	movq	%rbx, 0xc0(%rsp)
    000012f9: 	movq	%r15, %rax
    000012fc: 	addq	%r14, %rax
    000012ff: 	je	.Ltmp2514 # Offset: 4863
    00001301: 	testq	%r15, %r15
    00001304: 	je	.Ltmp2515 # Offset: 4868
.Ltmp2514:
    0000130a: 	movq	%r14, 0x58(%rsp)
    0000130f: 	cmpq	$0xf, %r14
    00001313: 	ja	.Ltmp2516 # Offset: 4883
    00001319: 	cmpq	$0x1, %r14
    0000131d: 	jne	.Ltmp2517 # Offset: 4893
    00001323: 	movzbl	(%r15), %eax
    00001327: 	movb	%al, 0xd0(%rsp)
    0000132e: 	movq	%rbx, %rax
.Ltmp2603:
    00001331: 	movq	%r14, 0xc8(%rsp)
    00001339: 	movb	$0x0, (%rax,%r14)
    0000133e: 	movabsq	$0x3fffffffffffffff, %rax
    00001348: 	subq	0xc8(%rsp), %rax
    00001350: 	cmpq	$0x1a, %rax
    00001354: 	jbe	.Ltmp2518 # Offset: 4948
    0000135a: 	movl	$0x1b, %edx
    0000135f: 	leaq	DATAat0x38528(%rip), %rsi
    00001366: 	movq	%r12, %rdi
    00001369: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4969
    0000136e: 	cvttsd2si	init_value(%rip), %edx
    00001376: 	movq	%r12, %r8
    00001379: 	movl	$0x1f40, %esi
    0000137e: 	movq	%rbp, %rdi
    00001381: 	leaq	_Z23test_while_loop2_param2IiET_PKS0_iS0_(%rip), %rcx
    00001388: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5000
    0000138d: 	movq	0xc0(%rsp), %rdi
    00001395: 	cmpq	%rbx, %rdi
    00001398: 	je	.Ltmp2519 # Offset: 5016
    0000139a: 	movq	0xd0(%rsp), %rax
    000013a2: 	leaq	0x1(%rax), %rsi
    000013a6: 	callq	_ZdlPvm@PLT # Offset: 5030
.Ltmp2519:
    000013ab: 	movq	0x60(%rsp), %r15
    000013b0: 	movq	0x68(%rsp), %r14
    000013b5: 	movq	%rbx, 0xc0(%rsp)
    000013bd: 	movq	%r15, %rax
    000013c0: 	addq	%r14, %rax
    000013c3: 	je	.Ltmp2520 # Offset: 5059
    000013c5: 	testq	%r15, %r15
    000013c8: 	je	.Ltmp2521 # Offset: 5064
.Ltmp2520:
    000013ce: 	movq	%r14, 0x58(%rsp)
    000013d3: 	cmpq	$0xf, %r14
    000013d7: 	ja	.Ltmp2522 # Offset: 5079
    000013dd: 	cmpq	$0x1, %r14
    000013e1: 	jne	.Ltmp2523 # Offset: 5089
    000013e7: 	movzbl	(%r15), %eax
    000013eb: 	movb	%al, 0xd0(%rsp)
    000013f2: 	movq	%rbx, %rax
.Ltmp2601:
    000013f5: 	movq	%r14, 0xc8(%rsp)
    000013fd: 	movb	$0x0, (%rax,%r14)
    00001402: 	movabsq	$0x3fffffffffffffff, %rax
    0000140c: 	subq	0xc8(%rsp), %rax
    00001414: 	cmpq	$0x16, %rax
    00001418: 	jbe	.Ltmp2524 # Offset: 5144
    0000141e: 	movl	$0x17, %edx
    00001423: 	leaq	DATAat0x38544(%rip), %rsi
    0000142a: 	movq	%r12, %rdi
    0000142d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5165
    00001432: 	cvttsd2si	init_value(%rip), %edx
    0000143a: 	movq	%r12, %r8
    0000143d: 	movl	$0x1f40, %esi
    00001442: 	movq	%rbp, %rdi
    00001445: 	leaq	_Z19test_do_loop2_paramIiET_PKS0_iS0_(%rip), %rcx
    0000144c: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5196
    00001451: 	movq	0xc0(%rsp), %rdi
    00001459: 	cmpq	%rbx, %rdi
    0000145c: 	je	.Ltmp2525 # Offset: 5212
    0000145e: 	movq	0xd0(%rsp), %rax
    00001466: 	leaq	0x1(%rax), %rsi
    0000146a: 	callq	_ZdlPvm@PLT # Offset: 5226
.Ltmp2525:
    0000146f: 	movq	0x60(%rsp), %r15
    00001474: 	movq	0x68(%rsp), %r14
    00001479: 	movq	%rbx, 0xc0(%rsp)
    00001481: 	movq	%r15, %rax
    00001484: 	addq	%r14, %rax
    00001487: 	je	.Ltmp2526 # Offset: 5255
    00001489: 	testq	%r15, %r15
    0000148c: 	je	.Ltmp2527 # Offset: 5260
.Ltmp2526:
    00001492: 	movq	%r14, 0x58(%rsp)
    00001497: 	cmpq	$0xf, %r14
    0000149b: 	ja	.Ltmp2528 # Offset: 5275
    000014a1: 	cmpq	$0x1, %r14
    000014a5: 	jne	.Ltmp2529 # Offset: 5285
    000014ab: 	movzbl	(%r15), %eax
    000014af: 	movb	%al, 0xd0(%rsp)
    000014b6: 	movq	%rbx, %rax
.Ltmp2599:
    000014b9: 	movq	%r14, 0xc8(%rsp)
    000014c1: 	movb	$0x0, (%rax,%r14)
    000014c6: 	movabsq	$0x3fffffffffffffff, %rax
    000014d0: 	subq	0xc8(%rsp), %rax
    000014d8: 	cmpq	$0x17, %rax
    000014dc: 	jbe	.Ltmp2530 # Offset: 5340
    000014e2: 	movl	$0x18, %edx
    000014e7: 	leaq	DATAat0x3855c(%rip), %rsi
    000014ee: 	movq	%r12, %rdi
    000014f1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5361
    000014f6: 	cvttsd2si	init_value(%rip), %edx
    000014fe: 	movq	%r12, %r8
    00001501: 	movl	$0x1f40, %esi
    00001506: 	movq	%rbp, %rdi
    00001509: 	leaq	_Z20test_do_loop2_param2IiET_PKS0_iS0_(%rip), %rcx
    00001510: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5392
    00001515: 	movq	0xc0(%rsp), %rdi
    0000151d: 	cmpq	%rbx, %rdi
    00001520: 	je	.Ltmp2531 # Offset: 5408
    00001522: 	movq	0xd0(%rsp), %rax
    0000152a: 	leaq	0x1(%rax), %rsi
    0000152e: 	callq	_ZdlPvm@PLT # Offset: 5422
.Ltmp2531:
    00001533: 	movq	0x60(%rsp), %r15
    00001538: 	movq	0x68(%rsp), %r14
    0000153d: 	movq	%rbx, 0xc0(%rsp)
    00001545: 	movq	%r15, %rax
    00001548: 	addq	%r14, %rax
    0000154b: 	je	.Ltmp2532 # Offset: 5451
    0000154d: 	testq	%r15, %r15
    00001550: 	je	.Ltmp2533 # Offset: 5456
.Ltmp2532:
    00001556: 	movq	%r14, 0x58(%rsp)
    0000155b: 	cmpq	$0xf, %r14
    0000155f: 	ja	.Ltmp2534 # Offset: 5471
    00001565: 	cmpq	$0x1, %r14
    00001569: 	jne	.Ltmp2535 # Offset: 5481
    0000156f: 	movzbl	(%r15), %eax
    00001573: 	movb	%al, 0xd0(%rsp)
    0000157a: 	movq	%rbx, %rax
.Ltmp2597:
    0000157d: 	movq	%r14, 0xc8(%rsp)
    00001585: 	movb	$0x0, (%rax,%r14)
    0000158a: 	movabsq	$0x3fffffffffffffff, %rax
    00001594: 	subq	0xc8(%rsp), %rax
    0000159c: 	cmpq	$0x18, %rax
    000015a0: 	jbe	.Ltmp2536 # Offset: 5536
    000015a6: 	movl	$0x19, %edx
    000015ab: 	leaq	DATAat0x38575(%rip), %rsi
    000015b2: 	movq	%r12, %rdi
    000015b5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5557
    000015ba: 	cvttsd2si	init_value(%rip), %edx
    000015c2: 	movq	%r12, %r8
    000015c5: 	movl	$0x1f40, %esi
    000015ca: 	movq	%rbp, %rdi
    000015cd: 	leaq	_Z21test_goto_loop2_paramIiET_PKS0_iS0_(%rip), %rcx
    000015d4: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5588
    000015d9: 	movq	0xc0(%rsp), %rdi
    000015e1: 	cmpq	%rbx, %rdi
    000015e4: 	je	.Ltmp2537 # Offset: 5604
    000015e6: 	movq	0xd0(%rsp), %rax
    000015ee: 	leaq	0x1(%rax), %rsi
    000015f2: 	callq	_ZdlPvm@PLT # Offset: 5618
.Ltmp2537:
    000015f7: 	movq	0x60(%rsp), %r15
    000015fc: 	movq	0x68(%rsp), %r14
    00001601: 	movq	%rbx, 0xc0(%rsp)
    00001609: 	movq	%r15, %rax
    0000160c: 	addq	%r14, %rax
    0000160f: 	je	.Ltmp2538 # Offset: 5647
    00001611: 	testq	%r15, %r15
    00001614: 	je	.Ltmp2539 # Offset: 5652
.Ltmp2538:
    0000161a: 	movq	%r14, 0x58(%rsp)
    0000161f: 	cmpq	$0xf, %r14
    00001623: 	ja	.Ltmp2540 # Offset: 5667
    00001629: 	cmpq	$0x1, %r14
    0000162d: 	jne	.Ltmp2541 # Offset: 5677
    00001633: 	movzbl	(%r15), %eax
    00001637: 	movb	%al, 0xd0(%rsp)
    0000163e: 	movq	%rbx, %rax
.Ltmp2635:
    00001641: 	movq	%r14, 0xc8(%rsp)
    00001649: 	movb	$0x0, (%rax,%r14)
    0000164e: 	movabsq	$0x3fffffffffffffff, %rax
    00001658: 	subq	0xc8(%rsp), %rax
    00001660: 	cmpq	$0x19, %rax
    00001664: 	jbe	.Ltmp2542 # Offset: 5732
    0000166a: 	movl	$0x1a, %edx
    0000166f: 	leaq	DATAat0x3858f(%rip), %rsi
    00001676: 	movq	%r12, %rdi
    00001679: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5753
    0000167e: 	cvttsd2si	init_value(%rip), %edx
    00001686: 	movq	%r12, %r8
    00001689: 	movl	$0x1f40, %esi
    0000168e: 	movq	%rbp, %rdi
    00001691: 	leaq	_Z22test_goto_loop2_param2IiET_PKS0_iS0_(%rip), %rcx
    00001698: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5784
    0000169d: 	movq	0xc0(%rsp), %rdi
    000016a5: 	cmpq	%rbx, %rdi
    000016a8: 	je	.Ltmp2543 # Offset: 5800
    000016aa: 	movq	0xd0(%rsp), %rax
    000016b2: 	leaq	0x1(%rax), %rsi
    000016b6: 	callq	_ZdlPvm@PLT # Offset: 5814
.Ltmp2543:
    000016bb: 	movq	0x60(%rsp), %r15
    000016c0: 	movq	0x68(%rsp), %r14
    000016c5: 	movq	%rbx, 0xc0(%rsp)
    000016cd: 	movq	%r15, %rax
    000016d0: 	addq	%r14, %rax
    000016d3: 	je	.Ltmp2544 # Offset: 5843
    000016d5: 	testq	%r15, %r15
    000016d8: 	je	.Ltmp2545 # Offset: 5848
.Ltmp2544:
    000016de: 	movq	%r14, 0x58(%rsp)
    000016e3: 	cmpq	$0xf, %r14
    000016e7: 	ja	.Ltmp2546 # Offset: 5863
    000016ed: 	cmpq	$0x1, %r14
    000016f1: 	jne	.Ltmp2547 # Offset: 5873
    000016f7: 	movzbl	(%r15), %eax
    000016fb: 	movb	%al, 0xd0(%rsp)
    00001702: 	movq	%rbx, %rax
.Ltmp2633:
    00001705: 	movq	%r14, 0xc8(%rsp)
    0000170d: 	movb	$0x0, (%rax,%r14)
    00001712: 	movabsq	$0x3fffffffffffffff, %rax
    0000171c: 	subq	0xc8(%rsp), %rax
    00001724: 	cmpq	$0x14, %rax
    00001728: 	jbe	.Ltmp2548 # Offset: 5928
    0000172e: 	movl	$0x15, %edx
    00001733: 	leaq	DATAat0x385aa(%rip), %rsi
    0000173a: 	movq	%r12, %rdi
    0000173d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5949
    00001742: 	cvttsd2si	init_value(%rip), %edx
    0000174a: 	movq	%r12, %r8
    0000174d: 	movl	$0x1f40, %esi
    00001752: 	movq	%rbp, %rdi
    00001755: 	leaq	_Z21test_for_loop2_globalIiET_PKS0_iS0_(%rip), %rcx
    0000175c: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5980
    00001761: 	movq	0xc0(%rsp), %rdi
    00001769: 	cmpq	%rbx, %rdi
    0000176c: 	je	.Ltmp2549 # Offset: 5996
    0000176e: 	movq	0xd0(%rsp), %rax
    00001776: 	leaq	0x1(%rax), %rsi
    0000177a: 	callq	_ZdlPvm@PLT # Offset: 6010
.Ltmp2549:
    0000177f: 	leaq	DATAat0x385c0(%rip), %rdx
    00001786: 	movq	%r13, %rsi
    00001789: 	movq	%r12, %rdi
    0000178c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6028
    00001791: 	cvttsd2si	init_value(%rip), %edx
    00001799: 	movq	%r12, %r8
    0000179c: 	movl	$0x1f40, %esi
    000017a1: 	movq	%rbp, %rdi
    000017a4: 	leaq	_Z22test_for_loop2_global2IiET_PKS0_iS0_(%rip), %rcx
    000017ab: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6059
    000017b0: 	movq	0xc0(%rsp), %rdi
    000017b8: 	cmpq	%rbx, %rdi
    000017bb: 	je	.Ltmp2550 # Offset: 6075
    000017bd: 	movq	0xd0(%rsp), %rax
    000017c5: 	leaq	0x1(%rax), %rsi
    000017c9: 	callq	_ZdlPvm@PLT # Offset: 6089
.Ltmp2550:
    000017ce: 	movq	0x60(%rsp), %r15
    000017d3: 	movq	0x68(%rsp), %r14
    000017d8: 	movq	%rbx, 0xc0(%rsp)
    000017e0: 	movq	%r15, %rax
    000017e3: 	addq	%r14, %rax
    000017e6: 	je	.Ltmp2551 # Offset: 6118
    000017e8: 	testq	%r15, %r15
    000017eb: 	je	.Ltmp2552 # Offset: 6123
.Ltmp2551:
    000017f1: 	movq	%r14, 0x58(%rsp)
    000017f6: 	cmpq	$0xf, %r14
    000017fa: 	ja	.Ltmp2553 # Offset: 6138
    00001800: 	cmpq	$0x1, %r14
    00001804: 	jne	.Ltmp2554 # Offset: 6148
    0000180a: 	movzbl	(%r15), %eax
    0000180e: 	movb	%al, 0xd0(%rsp)
    00001815: 	movq	%rbx, %rax
.Ltmp2631:
    00001818: 	movq	%r14, 0xc8(%rsp)
    00001820: 	movb	$0x0, (%rax,%r14)
    00001825: 	movabsq	$0x3fffffffffffffff, %rax
    0000182f: 	subq	0xc8(%rsp), %rax
    00001837: 	cmpq	$0x16, %rax
    0000183b: 	jbe	.Ltmp2555 # Offset: 6203
    00001841: 	movl	$0x17, %edx
    00001846: 	leaq	DATAat0x385d7(%rip), %rsi
    0000184d: 	movq	%r12, %rdi
    00001850: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6224
    00001855: 	cvttsd2si	init_value(%rip), %edx
    0000185d: 	movq	%r12, %r8
    00001860: 	movl	$0x1f40, %esi
    00001865: 	movq	%rbp, %rdi
    00001868: 	leaq	_Z23test_while_loop2_globalIiET_PKS0_iS0_(%rip), %rcx
    0000186f: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6255
    00001874: 	movq	0xc0(%rsp), %rdi
    0000187c: 	cmpq	%rbx, %rdi
    0000187f: 	je	.Ltmp2556 # Offset: 6271
    00001881: 	movq	0xd0(%rsp), %rax
    00001889: 	leaq	0x1(%rax), %rsi
    0000188d: 	callq	_ZdlPvm@PLT # Offset: 6285
.Ltmp2556:
    00001892: 	movq	0x60(%rsp), %r15
    00001897: 	movq	0x68(%rsp), %r14
    0000189c: 	movq	%rbx, 0xc0(%rsp)
    000018a4: 	movq	%r15, %rax
    000018a7: 	addq	%r14, %rax
    000018aa: 	je	.Ltmp2557 # Offset: 6314
    000018ac: 	testq	%r15, %r15
    000018af: 	je	.Ltmp2558 # Offset: 6319
.Ltmp2557:
    000018b5: 	movq	%r14, 0x58(%rsp)
    000018ba: 	cmpq	$0xf, %r14
    000018be: 	ja	.Ltmp2559 # Offset: 6334
    000018c4: 	cmpq	$0x1, %r14
    000018c8: 	jne	.Ltmp2560 # Offset: 6344
    000018ce: 	movzbl	(%r15), %eax
    000018d2: 	movb	%al, 0xd0(%rsp)
    000018d9: 	movq	%rbx, %rax
.Ltmp2629:
    000018dc: 	movq	%r14, 0xc8(%rsp)
    000018e4: 	movb	$0x0, (%rax,%r14)
    000018e9: 	movabsq	$0x3fffffffffffffff, %rax
    000018f3: 	subq	0xc8(%rsp), %rax
    000018fb: 	cmpq	$0x17, %rax
    000018ff: 	jbe	.Ltmp2561 # Offset: 6399
    00001905: 	movl	$0x18, %edx
    0000190a: 	leaq	DATAat0x385ef(%rip), %rsi
    00001911: 	movq	%r12, %rdi
    00001914: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6420
    00001919: 	cvttsd2si	init_value(%rip), %edx
    00001921: 	movq	%r12, %r8
    00001924: 	movl	$0x1f40, %esi
    00001929: 	movq	%rbp, %rdi
    0000192c: 	leaq	_Z24test_while_loop2_global2IiET_PKS0_iS0_(%rip), %rcx
    00001933: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6451
    00001938: 	movq	0xc0(%rsp), %rdi
    00001940: 	cmpq	%rbx, %rdi
    00001943: 	je	.Ltmp2562 # Offset: 6467
    00001945: 	movq	0xd0(%rsp), %rax
    0000194d: 	leaq	0x1(%rax), %rsi
    00001951: 	callq	_ZdlPvm@PLT # Offset: 6481
.Ltmp2562:
    00001956: 	leaq	DATAat0x38608(%rip), %rdx
    0000195d: 	movq	%r13, %rsi
    00001960: 	movq	%r12, %rdi
    00001963: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6499
    00001968: 	cvttsd2si	init_value(%rip), %edx
    00001970: 	movq	%r12, %r8
    00001973: 	movl	$0x1f40, %esi
    00001978: 	movq	%rbp, %rdi
    0000197b: 	leaq	_Z20test_do_loop2_globalIiET_PKS0_iS0_(%rip), %rcx
    00001982: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6530
    00001987: 	movq	0xc0(%rsp), %rdi
    0000198f: 	cmpq	%rbx, %rdi
    00001992: 	je	.Ltmp2563 # Offset: 6546
    00001994: 	movq	0xd0(%rsp), %rax
    0000199c: 	leaq	0x1(%rax), %rsi
    000019a0: 	callq	_ZdlPvm@PLT # Offset: 6560
.Ltmp2563:
    000019a5: 	leaq	DATAat0x3861d(%rip), %rdx
    000019ac: 	movq	%r13, %rsi
    000019af: 	movq	%r12, %rdi
    000019b2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6578
    000019b7: 	cvttsd2si	init_value(%rip), %edx
    000019bf: 	movq	%r12, %r8
    000019c2: 	movl	$0x1f40, %esi
    000019c7: 	movq	%rbp, %rdi
    000019ca: 	leaq	_Z21test_do_loop2_global2IiET_PKS0_iS0_(%rip), %rcx
    000019d1: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6609
    000019d6: 	movq	0xc0(%rsp), %rdi
    000019de: 	cmpq	%rbx, %rdi
    000019e1: 	je	.Ltmp2564 # Offset: 6625
    000019e3: 	movq	0xd0(%rsp), %rax
    000019eb: 	leaq	0x1(%rax), %rsi
    000019ef: 	callq	_ZdlPvm@PLT # Offset: 6639
.Ltmp2564:
    000019f4: 	leaq	DATAat0x38633(%rip), %rdx
    000019fb: 	movq	%r13, %rsi
    000019fe: 	movq	%r12, %rdi
    00001a01: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6657
    00001a06: 	cvttsd2si	init_value(%rip), %edx
    00001a0e: 	movq	%r12, %r8
    00001a11: 	movl	$0x1f40, %esi
    00001a16: 	movq	%rbp, %rdi
    00001a19: 	leaq	_Z22test_goto_loop2_globalIiET_PKS0_iS0_(%rip), %rcx
    00001a20: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6688
    00001a25: 	movq	0xc0(%rsp), %rdi
    00001a2d: 	cmpq	%rbx, %rdi
    00001a30: 	je	.Ltmp2565 # Offset: 6704
    00001a32: 	movq	0xd0(%rsp), %rax
    00001a3a: 	leaq	0x1(%rax), %rsi
    00001a3e: 	callq	_ZdlPvm@PLT # Offset: 6718
.Ltmp2565:
    00001a43: 	movq	0x60(%rsp), %r15
    00001a48: 	movq	0x68(%rsp), %r14
    00001a4d: 	movq	%rbx, 0xc0(%rsp)
    00001a55: 	movq	%r15, %rax
    00001a58: 	addq	%r14, %rax
    00001a5b: 	je	.Ltmp2566 # Offset: 6747
    00001a5d: 	testq	%r15, %r15
    00001a60: 	je	.Ltmp2567 # Offset: 6752
.Ltmp2566:
    00001a66: 	movq	%r14, 0x58(%rsp)
    00001a6b: 	cmpq	$0xf, %r14
    00001a6f: 	ja	.Ltmp2568 # Offset: 6767
    00001a75: 	cmpq	$0x1, %r14
    00001a79: 	jne	.Ltmp2569 # Offset: 6777
    00001a7f: 	movzbl	(%r15), %eax
    00001a83: 	movb	%al, 0xd0(%rsp)
    00001a8a: 	movq	%rbx, %rax
.Ltmp2627:
    00001a8d: 	movq	%r14, 0xc8(%rsp)
    00001a95: 	movb	$0x0, (%rax,%r14)
    00001a9a: 	movabsq	$0x3fffffffffffffff, %rax
    00001aa4: 	subq	0xc8(%rsp), %rax
    00001aac: 	cmpq	$0x16, %rax
    00001ab0: 	jbe	.Ltmp2570 # Offset: 6832
    00001ab6: 	movl	$0x17, %edx
    00001abb: 	leaq	DATAat0x3864a(%rip), %rsi
    00001ac2: 	movq	%r12, %rdi
    00001ac5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6853
    00001aca: 	cvttsd2si	init_value(%rip), %edx
    00001ad2: 	movq	%r12, %r8
    00001ad5: 	movl	$0x1f40, %esi
    00001ada: 	movq	%rbp, %rdi
    00001add: 	leaq	_Z23test_goto_loop2_global2IiET_PKS0_iS0_(%rip), %rcx
    00001ae4: 	callq	_Z13test_one_loopIiPFiPKiiiEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6884
    00001ae9: 	movq	0xc0(%rsp), %rdi
    00001af1: 	cmpq	%rbx, %rdi
    00001af4: 	je	.Ltmp2571 # Offset: 6900
    00001af6: 	movq	0xd0(%rsp), %rax
    00001afe: 	leaq	0x1(%rax), %rsi
    00001b02: 	callq	_ZdlPvm@PLT # Offset: 6914
.Ltmp2571:
    00001b07: 	leaq	0xa0(%rsp), %rdi
    00001b0f: 	leaq	DATAat0x38662(%rip), %rdx
    00001b16: 	movq	%r13, %rsi
    00001b19: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6937
    00001b1e: 	movl	iterations(%rip), %edx
    00001b24: 	xorl	%r8d, %r8d
    00001b27: 	xorl	%ecx, %ecx
    00001b29: 	movl	$0x1f40, %esi
    00001b2e: 	movq	0xa0(%rsp), %rdi
    00001b36: 	callq	_Z9summarizePKciiii # Offset: 6966
    00001b3b: 	leaq	DATAat0x38675(%rip), %rdx
    00001b42: 	movq	%r13, %rsi
    00001b45: 	movq	%r12, %rdi
    00001b48: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6984
    00001b4d: 	movq	%r12, %r8
    00001b50: 	movl	$0x7d0, %edx
    00001b55: 	movl	$0x1f40, %esi
    00001b5a: 	movq	%rbp, %rdi
    00001b5d: 	leaq	_Z18test_for_loop3_optIiET_PKS0_iS0_(%rip), %rcx
    00001b64: 	callq	_Z14test_one_loop3IiPFiPKiiiEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7012
    00001b69: 	movq	0xc0(%rsp), %rdi
    00001b71: 	cmpq	%rbx, %rdi
    00001b74: 	je	.Ltmp2572 # Offset: 7028
    00001b76: 	movq	0xd0(%rsp), %rax
    00001b7e: 	leaq	0x1(%rax), %rsi
    00001b82: 	callq	_ZdlPvm@PLT # Offset: 7042
.Ltmp2572:
    00001b87: 	leaq	DATAat0x3868c(%rip), %rdx
    00001b8e: 	movq	%r13, %rsi
    00001b91: 	movq	%r12, %rdi
    00001b94: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7060
    00001b99: 	movq	%r12, %r8
    00001b9c: 	movl	$0x7d0, %edx
    00001ba1: 	movl	$0x1f40, %esi
    00001ba6: 	movq	%rbp, %rdi
    00001ba9: 	leaq	_Z22test_for_loop3_halfoptIiET_PKS0_iS0_(%rip), %rcx
    00001bb0: 	callq	_Z14test_one_loop3IiPFiPKiiiEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7088
    00001bb5: 	movq	0xc0(%rsp), %rdi
    00001bbd: 	cmpq	%rbx, %rdi
    00001bc0: 	je	.Ltmp2573 # Offset: 7104
    00001bc2: 	movq	0xd0(%rsp), %rax
    00001bca: 	leaq	0x1(%rax), %rsi
    00001bce: 	callq	_ZdlPvm@PLT # Offset: 7118
.Ltmp2573:
    00001bd3: 	leaq	DATAat0x386a4(%rip), %rdx
    00001bda: 	movq	%r13, %rsi
    00001bdd: 	movq	%r12, %rdi
    00001be0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7136
    00001be5: 	movq	%r12, %r8
    00001be8: 	movl	$0x7d0, %edx
    00001bed: 	movl	$0x1f40, %esi
    00001bf2: 	movq	%rbp, %rdi
    00001bf5: 	leaq	_Z20test_while_loop3_optIiET_PKS0_iS0_(%rip), %rcx
    00001bfc: 	callq	_Z14test_one_loop3IiPFiPKiiiEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7164
    00001c01: 	movq	0xc0(%rsp), %rdi
    00001c09: 	cmpq	%rbx, %rdi
    00001c0c: 	je	.Ltmp2574 # Offset: 7180
    00001c0e: 	movq	0xd0(%rsp), %rax
    00001c16: 	leaq	0x1(%rax), %rsi
    00001c1a: 	callq	_ZdlPvm@PLT # Offset: 7194
.Ltmp2574:
    00001c1f: 	leaq	DATAat0x386bd(%rip), %rdx
    00001c26: 	movq	%r13, %rsi
    00001c29: 	movq	%r12, %rdi
    00001c2c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7212
    00001c31: 	movq	%r12, %r8
    00001c34: 	movl	$0x7d0, %edx
    00001c39: 	movl	$0x1f40, %esi
    00001c3e: 	movq	%rbp, %rdi
    00001c41: 	leaq	_Z24test_while_loop3_halfoptIiET_PKS0_iS0_(%rip), %rcx
    00001c48: 	callq	_Z14test_one_loop3IiPFiPKiiiEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7240
    00001c4d: 	movq	0xc0(%rsp), %rdi
    00001c55: 	cmpq	%rbx, %rdi
    00001c58: 	je	.Ltmp2575 # Offset: 7256
    00001c5a: 	movq	0xd0(%rsp), %rax
    00001c62: 	leaq	0x1(%rax), %rsi
    00001c66: 	callq	_ZdlPvm@PLT # Offset: 7270
.Ltmp2575:
    00001c6b: 	leaq	DATAat0x386d7(%rip), %rdx
    00001c72: 	movq	%r13, %rsi
    00001c75: 	movq	%r12, %rdi
    00001c78: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7288
    00001c7d: 	movq	%r12, %r8
    00001c80: 	movl	$0x7d0, %edx
    00001c85: 	movl	$0x1f40, %esi
    00001c8a: 	movq	%rbp, %rdi
    00001c8d: 	leaq	_Z17test_do_loop3_optIiET_PKS0_iS0_(%rip), %rcx
    00001c94: 	callq	_Z14test_one_loop3IiPFiPKiiiEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7316
    00001c99: 	movq	0xc0(%rsp), %rdi
    00001ca1: 	cmpq	%rbx, %rdi
    00001ca4: 	je	.Ltmp2576 # Offset: 7332
    00001ca6: 	movq	0xd0(%rsp), %rax
    00001cae: 	leaq	0x1(%rax), %rsi
    00001cb2: 	callq	_ZdlPvm@PLT # Offset: 7346
.Ltmp2576:
    00001cb7: 	leaq	DATAat0x386ed(%rip), %rdx
    00001cbe: 	movq	%r13, %rsi
    00001cc1: 	movq	%r12, %rdi
    00001cc4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7364
    00001cc9: 	movq	%r12, %r8
    00001ccc: 	movl	$0x7d0, %edx
    00001cd1: 	movl	$0x1f40, %esi
    00001cd6: 	movq	%rbp, %rdi
    00001cd9: 	leaq	_Z21test_do_loop3_halfoptIiET_PKS0_iS0_(%rip), %rcx
    00001ce0: 	callq	_Z14test_one_loop3IiPFiPKiiiEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7392
    00001ce5: 	movq	0xc0(%rsp), %rdi
    00001ced: 	cmpq	%rbx, %rdi
    00001cf0: 	je	.Ltmp2577 # Offset: 7408
    00001cf2: 	movq	0xd0(%rsp), %rax
    00001cfa: 	leaq	0x1(%rax), %rsi
    00001cfe: 	callq	_ZdlPvm@PLT # Offset: 7422
.Ltmp2577:
    00001d03: 	leaq	DATAat0x38704(%rip), %rdx
    00001d0a: 	movq	%r13, %rsi
    00001d0d: 	movq	%r12, %rdi
    00001d10: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7440
    00001d15: 	movq	%r12, %r8
    00001d18: 	movl	$0x7d0, %edx
    00001d1d: 	movl	$0x1f40, %esi
    00001d22: 	movq	%rbp, %rdi
    00001d25: 	leaq	_Z19test_goto_loop3_optIiET_PKS0_iS0_(%rip), %rcx
    00001d2c: 	callq	_Z14test_one_loop3IiPFiPKiiiEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7468
    00001d31: 	movq	0xc0(%rsp), %rdi
    00001d39: 	cmpq	%rbx, %rdi
    00001d3c: 	je	.Ltmp2578 # Offset: 7484
    00001d3e: 	movq	0xd0(%rsp), %rax
    00001d46: 	leaq	0x1(%rax), %rsi
    00001d4a: 	callq	_ZdlPvm@PLT # Offset: 7498
.Ltmp2578:
    00001d4f: 	leaq	DATAat0x3871c(%rip), %rdx
    00001d56: 	movq	%r13, %rsi
    00001d59: 	movq	%r12, %rdi
    00001d5c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7516
    00001d61: 	movq	%r12, %r8
    00001d64: 	movl	$0x7d0, %edx
    00001d69: 	movl	$0x1f40, %esi
    00001d6e: 	movq	%rbp, %rdi
    00001d71: 	leaq	_Z23test_goto_loop3_halfoptIiET_PKS0_iS0_(%rip), %rcx
    00001d78: 	callq	_Z14test_one_loop3IiPFiPKiiiEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7544
    00001d7d: 	movq	0xc0(%rsp), %rdi
    00001d85: 	cmpq	%rbx, %rdi
    00001d88: 	je	.Ltmp2579 # Offset: 7560
    00001d8a: 	movq	0xd0(%rsp), %rax
    00001d92: 	leaq	0x1(%rax), %rsi
    00001d96: 	callq	_ZdlPvm@PLT # Offset: 7574
.Ltmp2579:
    00001d9b: 	leaq	DATAat0x38735(%rip), %rdx
    00001da2: 	movq	%r13, %rsi
    00001da5: 	movq	%r12, %rdi
    00001da8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7592
    00001dad: 	movq	%r12, %r8
    00001db0: 	movl	$0x7d0, %edx
    00001db5: 	movl	$0x1f40, %esi
    00001dba: 	movq	%rbp, %rdi
    00001dbd: 	leaq	_Z20test_for_loop3_paramIiET_PKS0_iS0_(%rip), %rcx
    00001dc4: 	callq	_Z14test_one_loop3IiPFiPKiiiEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7620
    00001dc9: 	movq	0xc0(%rsp), %rdi
    00001dd1: 	cmpq	%rbx, %rdi
    00001dd4: 	je	.Ltmp2580 # Offset: 7636
    00001dd6: 	movq	0xd0(%rsp), %rax
    00001dde: 	leaq	0x1(%rax), %rsi
    00001de2: 	callq	_ZdlPvm@PLT # Offset: 7650
.Ltmp2580:
    00001de7: 	leaq	DATAat0x3874e(%rip), %rdx
    00001dee: 	movq	%r13, %rsi
    00001df1: 	movq	%r12, %rdi
    00001df4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7668
    00001df9: 	movq	%r12, %r8
    00001dfc: 	movl	$0x7d0, %edx
    00001e01: 	movl	$0x1f40, %esi
    00001e06: 	movq	%rbp, %rdi
    00001e09: 	leaq	_Z22test_while_loop3_paramIiET_PKS0_iS0_(%rip), %rcx
    00001e10: 	callq	_Z14test_one_loop3IiPFiPKiiiEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7696
    00001e15: 	movq	0xc0(%rsp), %rdi
    00001e1d: 	cmpq	%rbx, %rdi
    00001e20: 	je	.Ltmp2581 # Offset: 7712
    00001e22: 	movq	0xd0(%rsp), %rax
    00001e2a: 	leaq	0x1(%rax), %rsi
    00001e2e: 	callq	_ZdlPvm@PLT # Offset: 7726
.Ltmp2581:
    00001e33: 	leaq	DATAat0x38769(%rip), %rdx
    00001e3a: 	movq	%r13, %rsi
    00001e3d: 	movq	%r12, %rdi
    00001e40: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7744
    00001e45: 	movq	%r12, %r8
    00001e48: 	movl	$0x7d0, %edx
    00001e4d: 	movl	$0x1f40, %esi
    00001e52: 	movq	%rbp, %rdi
    00001e55: 	leaq	_Z19test_do_loop3_paramIiET_PKS0_iS0_(%rip), %rcx
    00001e5c: 	callq	_Z14test_one_loop3IiPFiPKiiiEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7772
    00001e61: 	movq	0xc0(%rsp), %rdi
    00001e69: 	cmpq	%rbx, %rdi
    00001e6c: 	je	.Ltmp2582 # Offset: 7788
    00001e6e: 	movq	0xd0(%rsp), %rax
    00001e76: 	leaq	0x1(%rax), %rsi
    00001e7a: 	callq	_ZdlPvm@PLT # Offset: 7802
.Ltmp2582:
    00001e7f: 	leaq	DATAat0x38781(%rip), %rdx
    00001e86: 	movq	%r13, %rsi
    00001e89: 	movq	%r12, %rdi
    00001e8c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7820
    00001e91: 	movq	%r12, %r8
    00001e94: 	movl	$0x7d0, %edx
    00001e99: 	movl	$0x1f40, %esi
    00001e9e: 	movq	%rbp, %rdi
    00001ea1: 	leaq	_Z21test_goto_loop3_paramIiET_PKS0_iS0_(%rip), %rcx
    00001ea8: 	callq	_Z14test_one_loop3IiPFiPKiiiEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7848
    00001ead: 	movq	0xc0(%rsp), %rdi
    00001eb5: 	cmpq	%rbx, %rdi
    00001eb8: 	je	.Ltmp2583 # Offset: 7864
    00001eba: 	movq	0xd0(%rsp), %rax
    00001ec2: 	leaq	0x1(%rax), %rsi
    00001ec6: 	callq	_ZdlPvm@PLT # Offset: 7878
.Ltmp2583:
    00001ecb: 	movq	0x60(%rsp), %rbp
    00001ed0: 	movq	0x68(%rsp), %r13
    00001ed5: 	movq	%rbx, 0xc0(%rsp)
    00001edd: 	movq	%rbp, %rax
    00001ee0: 	addq	%r13, %rax
    00001ee3: 	je	.Ltmp2584 # Offset: 7907
    00001ee5: 	testq	%rbp, %rbp
    00001ee8: 	je	.Ltmp2585 # Offset: 7912
.Ltmp2584:
    00001eee: 	movq	%r13, 0x58(%rsp)
    00001ef3: 	cmpq	$0xf, %r13
    00001ef7: 	ja	.Ltmp2586 # Offset: 7927
    00001efd: 	cmpq	$0x1, %r13
    00001f01: 	jne	.Ltmp2587 # Offset: 7937
    00001f07: 	movzbl	(%rbp), %eax
    00001f0b: 	movb	%al, 0xd0(%rsp)
    00001f12: 	movq	%rbx, %rax
.Ltmp2637:
    00001f15: 	movq	%r13, 0xc8(%rsp)
    00001f1d: 	movb	$0x0, (%rax,%r13)
    00001f22: 	movabsq	$0x3fffffffffffffff, %rax
    00001f2c: 	subq	0xc8(%rsp), %rax
    00001f34: 	cmpq	$0x11, %rax
    00001f38: 	jbe	.Ltmp2588 # Offset: 7992
    00001f3e: 	movl	$0x12, %edx
    00001f43: 	leaq	DATAat0x3879b(%rip), %rsi
    00001f4a: 	movq	%r12, %rdi
    00001f4d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 8013
    00001f52: 	movl	iterations(%rip), %edx
    00001f58: 	xorl	%r8d, %r8d
    00001f5b: 	xorl	%ecx, %ecx
    00001f5d: 	movl	$0x1f40, %esi
    00001f62: 	movq	0xc0(%rsp), %rdi
    00001f6a: 	callq	_Z9summarizePKciiii # Offset: 8042
    00001f6f: 	movq	0xc0(%rsp), %rdi
    00001f77: 	cmpq	%rbx, %rdi
    00001f7a: 	je	.Ltmp2589 # Offset: 8058
    00001f7c: 	movq	0xd0(%rsp), %rax
    00001f84: 	leaq	0x1(%rax), %rsi
    00001f88: 	callq	_ZdlPvm@PLT # Offset: 8072
.Ltmp2589:
    00001f8d: 	movq	0xa0(%rsp), %rdi
    00001f95: 	leaq	0xb0(%rsp), %rax
    00001f9d: 	cmpq	%rax, %rdi
    00001fa0: 	je	.Ltmp2590 # Offset: 8096
    00001fa2: 	movq	0xb0(%rsp), %rax
    00001faa: 	leaq	0x1(%rax), %rsi
    00001fae: 	callq	_ZdlPvm@PLT # Offset: 8110
.Ltmp2590:
    00001fb3: 	movq	0x80(%rsp), %rdi
    00001fbb: 	leaq	0x90(%rsp), %rax
    00001fc3: 	cmpq	%rax, %rdi
    00001fc6: 	je	.Ltmp2591 # Offset: 8134
    00001fc8: 	movq	0x90(%rsp), %rax
    00001fd0: 	leaq	0x1(%rax), %rsi
    00001fd4: 	callq	_ZdlPvm@PLT # Offset: 8148
.Ltmp2591:
    00001fd9: 	movq	0x60(%rsp), %rdi
    00001fde: 	cmpq	0x40(%rsp), %rdi
    00001fe3: 	je	.Ltmp2592 # Offset: 8163
    00001fe5: 	movq	0x70(%rsp), %rax
    00001fea: 	leaq	0x1(%rax), %rsi
    00001fee: 	callq	_ZdlPvm@PLT # Offset: 8174
.Ltmp2592:
    00001ff3: 	movq	0x7de8(%rsp), %rax
    00001ffb: 	subq	%fs:0x28, %rax
    00002004: 	jne	.Ltmp2593 # Offset: 8196
    0000200a: 	addq	$0x7df8, %rsp
    00002011: 	popq	%rbx
    00002012: 	popq	%rbp
    00002013: 	popq	%r12
    00002015: 	popq	%r13
    00002017: 	popq	%r14
    00002019: 	popq	%r15
    0000201b: 	retq # Offset: 8219
    0000201c: 	nopl	(%rax) # Size: 4
.Ltmp2407:
    00002020: 	addq	$0x20, %r14
    00002024: 	cmpq	%rbx, %r14
    00002027: 	jne	.Ltmp2408 # Offset: 8231
    0000202d: 	addq	$0x8, (%rsp)
    00002032: 	movq	(%rsp), %rax
    00002036: 	cmpq	%rax, 0x8(%rsp)
    0000203b: 	ja	.Ltmp2409 # Offset: 8251
    00002041: 	jmp	.Ltmp2406 # Offset: 8257
.Ltmp2428:
    00002046: 	testq	%r14, %r14
    00002049: 	jne	.Ltmp2594 # Offset: 8265
    0000204f: 	movq	%rbx, %rax
    00002052: 	jmp	.Ltmp2595 # Offset: 8274
.Ltmp2535:
    00002057: 	testq	%r14, %r14
    0000205a: 	jne	.Ltmp2596 # Offset: 8282
    00002060: 	movq	%rbx, %rax
    00002063: 	jmp	.Ltmp2597 # Offset: 8291
.Ltmp2529:
    00002068: 	testq	%r14, %r14
    0000206b: 	jne	.Ltmp2598 # Offset: 8299
    00002071: 	movq	%rbx, %rax
    00002074: 	jmp	.Ltmp2599 # Offset: 8308
.Ltmp2523:
    00002079: 	testq	%r14, %r14
    0000207c: 	jne	.Ltmp2600 # Offset: 8316
    00002082: 	movq	%rbx, %rax
    00002085: 	jmp	.Ltmp2601 # Offset: 8325
.Ltmp2517:
    0000208a: 	testq	%r14, %r14
    0000208d: 	jne	.Ltmp2602 # Offset: 8333
    00002093: 	movq	%rbx, %rax
    00002096: 	jmp	.Ltmp2603 # Offset: 8342
.Ltmp2508:
    0000209b: 	testq	%r14, %r14
    0000209e: 	jne	.Ltmp2604 # Offset: 8350
    000020a4: 	movq	%rbx, %rax
    000020a7: 	jmp	.Ltmp2605 # Offset: 8359
.Ltmp2442:
    000020ac: 	testq	%r14, %r14
    000020af: 	jne	.Ltmp2606 # Offset: 8367
    000020b5: 	movq	%rbx, %rax
    000020b8: 	jmp	.Ltmp2607 # Offset: 8376
.Ltmp2434:
    000020bd: 	testq	%r14, %r14
    000020c0: 	jne	.Ltmp2608 # Offset: 8384
    000020c6: 	movq	%rbx, %rax
    000020c9: 	jmp	.Ltmp2609 # Offset: 8393
.Ltmp2500:
    000020ce: 	testq	%r14, %r14
    000020d1: 	jne	.Ltmp2610 # Offset: 8401
    000020d7: 	movq	%rbx, %rax
    000020da: 	jmp	.Ltmp2611 # Offset: 8410
.Ltmp2493:
    000020df: 	testq	%r14, %r14
    000020e2: 	jne	.Ltmp2612 # Offset: 8418
    000020e8: 	movq	%rbx, %rax
    000020eb: 	jmp	.Ltmp2613 # Offset: 8427
.Ltmp2486:
    000020f0: 	testq	%r14, %r14
    000020f3: 	jne	.Ltmp2614 # Offset: 8435
    000020f9: 	movq	%rbx, %rax
    000020fc: 	jmp	.Ltmp2615 # Offset: 8444
.Ltmp2477:
    00002101: 	testq	%r14, %r14
    00002104: 	jne	.Ltmp2616 # Offset: 8452
    0000210a: 	movq	%rbx, %rax
    0000210d: 	jmp	.Ltmp2617 # Offset: 8461
.Ltmp2469:
    00002112: 	testq	%r14, %r14
    00002115: 	jne	.Ltmp2618 # Offset: 8469
    0000211b: 	movq	%rbx, %rax
    0000211e: 	jmp	.Ltmp2619 # Offset: 8478
.Ltmp2463:
    00002123: 	testq	%r14, %r14
    00002126: 	jne	.Ltmp2620 # Offset: 8486
    0000212c: 	movq	%rbx, %rax
    0000212f: 	jmp	.Ltmp2621 # Offset: 8495
.Ltmp2455:
    00002134: 	testq	%r14, %r14
    00002137: 	jne	.Ltmp2622 # Offset: 8503
    0000213d: 	movq	%rbx, %rax
    00002140: 	jmp	.Ltmp2623 # Offset: 8512
.Ltmp2449:
    00002145: 	testq	%r14, %r14
    00002148: 	jne	.Ltmp2624 # Offset: 8520
    0000214e: 	movq	%rbx, %rax
    00002151: 	jmp	.Ltmp2625 # Offset: 8529
.Ltmp2454:
    00002156: 	leaq	0x58(%rsp), %rsi
    0000215b: 	xorl	%edx, %edx
    0000215d: 	movq	%r12, %rdi
    00002160: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8544
    00002165: 	movq	%rax, 0xc0(%rsp)
    0000216d: 	movq	%rax, %rdi
    00002170: 	movq	0x58(%rsp), %rax
    00002175: 	movq	%rax, 0xd0(%rsp)
.Ltmp2655:
    0000217d: 	movq	(%rsp), %rsi
    00002181: 	movq	%r14, %rdx
    00002184: 	callq	memcpy@PLT # Offset: 8580
    00002189: 	movq	0x58(%rsp), %r14
    0000218e: 	movq	0xc0(%rsp), %rax
    00002196: 	jmp	.Ltmp2623 # Offset: 8598
.Ltmp2485:
    0000219b: 	leaq	0x58(%rsp), %rsi
    000021a0: 	xorl	%edx, %edx
    000021a2: 	movq	%r12, %rdi
    000021a5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8613
    000021aa: 	movq	%rax, 0xc0(%rsp)
    000021b2: 	movq	%rax, %rdi
    000021b5: 	movq	0x58(%rsp), %rax
    000021ba: 	movq	%rax, 0xd0(%rsp)
.Ltmp2651:
    000021c2: 	movq	(%rsp), %rsi
    000021c6: 	movq	%r14, %rdx
    000021c9: 	callq	memcpy@PLT # Offset: 8649
    000021ce: 	movq	0x58(%rsp), %r14
    000021d3: 	movq	0xc0(%rsp), %rax
    000021db: 	jmp	.Ltmp2615 # Offset: 8667
.Ltmp2476:
    000021e0: 	leaq	0x58(%rsp), %rsi
    000021e5: 	xorl	%edx, %edx
    000021e7: 	movq	%r12, %rdi
    000021ea: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8682
    000021ef: 	movq	%rax, 0xc0(%rsp)
    000021f7: 	movq	%rax, %rdi
    000021fa: 	movq	0x58(%rsp), %rax
    000021ff: 	movq	%rax, 0xd0(%rsp)
.Ltmp2652:
    00002207: 	movq	(%rsp), %rsi
    0000220b: 	movq	%r14, %rdx
    0000220e: 	callq	memcpy@PLT # Offset: 8718
    00002213: 	movq	0x58(%rsp), %r14
    00002218: 	movq	0xc0(%rsp), %rax
    00002220: 	jmp	.Ltmp2617 # Offset: 8736
.Ltmp2468:
    00002225: 	leaq	0x58(%rsp), %rsi
    0000222a: 	xorl	%edx, %edx
    0000222c: 	movq	%r12, %rdi
    0000222f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8751
    00002234: 	movq	%rax, 0xc0(%rsp)
    0000223c: 	movq	%rax, %rdi
    0000223f: 	movq	0x58(%rsp), %rax
    00002244: 	movq	%rax, 0xd0(%rsp)
.Ltmp2653:
    0000224c: 	movq	(%rsp), %rsi
    00002250: 	movq	%r14, %rdx
    00002253: 	callq	memcpy@PLT # Offset: 8787
    00002258: 	movq	0x58(%rsp), %r14
    0000225d: 	movq	0xc0(%rsp), %rax
    00002265: 	jmp	.Ltmp2619 # Offset: 8805
.Ltmp2462:
    0000226a: 	leaq	0x58(%rsp), %rsi
    0000226f: 	xorl	%edx, %edx
    00002271: 	movq	%r12, %rdi
    00002274: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8820
    00002279: 	movq	%rax, 0xc0(%rsp)
    00002281: 	movq	%rax, %rdi
    00002284: 	movq	0x58(%rsp), %rax
    00002289: 	movq	%rax, 0xd0(%rsp)
.Ltmp2654:
    00002291: 	movq	(%rsp), %rsi
    00002295: 	movq	%r14, %rdx
    00002298: 	callq	memcpy@PLT # Offset: 8856
    0000229d: 	movq	0x58(%rsp), %r14
    000022a2: 	movq	0xc0(%rsp), %rax
    000022aa: 	jmp	.Ltmp2621 # Offset: 8874
.Ltmp2569:
    000022af: 	testq	%r14, %r14
    000022b2: 	jne	.Ltmp2626 # Offset: 8882
    000022b8: 	movq	%rbx, %rax
    000022bb: 	jmp	.Ltmp2627 # Offset: 8891
.Ltmp2560:
    000022c0: 	testq	%r14, %r14
    000022c3: 	jne	.Ltmp2628 # Offset: 8899
    000022c9: 	movq	%rbx, %rax
    000022cc: 	jmp	.Ltmp2629 # Offset: 8908
.Ltmp2554:
    000022d1: 	testq	%r14, %r14
    000022d4: 	jne	.Ltmp2630 # Offset: 8916
    000022da: 	movq	%rbx, %rax
    000022dd: 	jmp	.Ltmp2631 # Offset: 8925
.Ltmp2547:
    000022e2: 	testq	%r14, %r14
    000022e5: 	jne	.Ltmp2632 # Offset: 8933
    000022eb: 	movq	%rbx, %rax
    000022ee: 	jmp	.Ltmp2633 # Offset: 8942
.Ltmp2441:
    000022f3: 	leaq	0x58(%rsp), %rsi
    000022f8: 	xorl	%edx, %edx
    000022fa: 	movq	%r12, %rdi
    000022fd: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8957
    00002302: 	movq	%rax, 0xc0(%rsp)
    0000230a: 	movq	%rax, %rdi
    0000230d: 	movq	0x58(%rsp), %rax
    00002312: 	movq	%rax, 0xd0(%rsp)
.Ltmp2647:
    0000231a: 	movq	(%rsp), %rsi
    0000231e: 	movq	%r14, %rdx
    00002321: 	callq	memcpy@PLT # Offset: 8993
    00002326: 	movq	0x58(%rsp), %r14
    0000232b: 	movq	0xc0(%rsp), %rax
    00002333: 	jmp	.Ltmp2607 # Offset: 9011
.Ltmp2507:
    00002338: 	leaq	0x58(%rsp), %rsi
    0000233d: 	xorl	%edx, %edx
    0000233f: 	movq	%r12, %rdi
    00002342: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9026
    00002347: 	movq	%rax, 0xc0(%rsp)
    0000234f: 	movq	%rax, %rdi
    00002352: 	movq	0x58(%rsp), %rax
    00002357: 	movq	%rax, 0xd0(%rsp)
.Ltmp2646:
    0000235f: 	movq	%r14, %rdx
    00002362: 	movq	%r15, %rsi
    00002365: 	callq	memcpy@PLT # Offset: 9061
    0000236a: 	movq	0x58(%rsp), %r14
    0000236f: 	movq	0xc0(%rsp), %rax
    00002377: 	jmp	.Ltmp2605 # Offset: 9079
.Ltmp2499:
    0000237c: 	leaq	0x58(%rsp), %rsi
    00002381: 	xorl	%edx, %edx
    00002383: 	movq	%r12, %rdi
    00002386: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9094
    0000238b: 	movq	%rax, 0xc0(%rsp)
    00002393: 	movq	%rax, %rdi
    00002396: 	movq	0x58(%rsp), %rax
    0000239b: 	movq	%rax, 0xd0(%rsp)
.Ltmp2649:
    000023a3: 	movq	(%rsp), %rsi
    000023a7: 	movq	%r14, %rdx
    000023aa: 	callq	memcpy@PLT # Offset: 9130
    000023af: 	movq	0x58(%rsp), %r14
    000023b4: 	movq	0xc0(%rsp), %rax
    000023bc: 	jmp	.Ltmp2611 # Offset: 9148
.Ltmp2492:
    000023c1: 	leaq	0x58(%rsp), %rsi
    000023c6: 	xorl	%edx, %edx
    000023c8: 	movq	%r12, %rdi
    000023cb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9163
    000023d0: 	movq	%rax, 0xc0(%rsp)
    000023d8: 	movq	%rax, %rdi
    000023db: 	movq	0x58(%rsp), %rax
    000023e0: 	movq	%rax, 0xd0(%rsp)
.Ltmp2650:
    000023e8: 	movq	(%rsp), %rsi
    000023ec: 	movq	%r14, %rdx
    000023ef: 	callq	memcpy@PLT # Offset: 9199
    000023f4: 	movq	0x58(%rsp), %r14
    000023f9: 	movq	0xc0(%rsp), %rax
    00002401: 	jmp	.Ltmp2613 # Offset: 9217
.Ltmp2541:
    00002406: 	testq	%r14, %r14
    00002409: 	jne	.Ltmp2634 # Offset: 9225
    0000240f: 	movq	%rbx, %rax
    00002412: 	jmp	.Ltmp2635 # Offset: 9234
.Ltmp2534:
    00002417: 	leaq	0x58(%rsp), %rsi
    0000241c: 	xorl	%edx, %edx
    0000241e: 	movq	%r12, %rdi
    00002421: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9249
    00002426: 	movq	%rax, 0xc0(%rsp)
    0000242e: 	movq	%rax, %rdi
    00002431: 	movq	0x58(%rsp), %rax
    00002436: 	movq	%rax, 0xd0(%rsp)
.Ltmp2642:
    0000243e: 	movq	%r14, %rdx
    00002441: 	movq	%r15, %rsi
    00002444: 	callq	memcpy@PLT # Offset: 9284
    00002449: 	movq	0x58(%rsp), %r14
    0000244e: 	movq	0xc0(%rsp), %rax
    00002456: 	jmp	.Ltmp2597 # Offset: 9302
.Ltmp2528:
    0000245b: 	leaq	0x58(%rsp), %rsi
    00002460: 	xorl	%edx, %edx
    00002462: 	movq	%r12, %rdi
    00002465: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9317
    0000246a: 	movq	%rax, 0xc0(%rsp)
    00002472: 	movq	%rax, %rdi
    00002475: 	movq	0x58(%rsp), %rax
    0000247a: 	movq	%rax, 0xd0(%rsp)
.Ltmp2643:
    00002482: 	movq	%r14, %rdx
    00002485: 	movq	%r15, %rsi
    00002488: 	callq	memcpy@PLT # Offset: 9352
    0000248d: 	movq	0x58(%rsp), %r14
    00002492: 	movq	0xc0(%rsp), %rax
    0000249a: 	jmp	.Ltmp2599 # Offset: 9370
.Ltmp2522:
    0000249f: 	leaq	0x58(%rsp), %rsi
    000024a4: 	xorl	%edx, %edx
    000024a6: 	movq	%r12, %rdi
    000024a9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9385
    000024ae: 	movq	%rax, 0xc0(%rsp)
    000024b6: 	movq	%rax, %rdi
    000024b9: 	movq	0x58(%rsp), %rax
    000024be: 	movq	%rax, 0xd0(%rsp)
.Ltmp2644:
    000024c6: 	movq	%r14, %rdx
    000024c9: 	movq	%r15, %rsi
    000024cc: 	callq	memcpy@PLT # Offset: 9420
    000024d1: 	movq	0x58(%rsp), %r14
    000024d6: 	movq	0xc0(%rsp), %rax
    000024de: 	jmp	.Ltmp2601 # Offset: 9438
.Ltmp2516:
    000024e3: 	leaq	0x58(%rsp), %rsi
    000024e8: 	xorl	%edx, %edx
    000024ea: 	movq	%r12, %rdi
    000024ed: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9453
    000024f2: 	movq	%rax, 0xc0(%rsp)
    000024fa: 	movq	%rax, %rdi
    000024fd: 	movq	0x58(%rsp), %rax
    00002502: 	movq	%rax, 0xd0(%rsp)
.Ltmp2645:
    0000250a: 	movq	%r14, %rdx
    0000250d: 	movq	%r15, %rsi
    00002510: 	callq	memcpy@PLT # Offset: 9488
    00002515: 	movq	0x58(%rsp), %r14
    0000251a: 	movq	0xc0(%rsp), %rax
    00002522: 	jmp	.Ltmp2603 # Offset: 9506
.Ltmp2448:
    00002527: 	leaq	0x58(%rsp), %rsi
    0000252c: 	xorl	%edx, %edx
    0000252e: 	movq	%r12, %rdi
    00002531: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9521
    00002536: 	movq	%rax, 0xc0(%rsp)
    0000253e: 	movq	%rax, %rdi
    00002541: 	movq	0x58(%rsp), %rax
    00002546: 	movq	%rax, 0xd0(%rsp)
.Ltmp2656:
    0000254e: 	movq	(%rsp), %rsi
    00002552: 	movq	%r14, %rdx
    00002555: 	callq	memcpy@PLT # Offset: 9557
    0000255a: 	movq	0x58(%rsp), %r14
    0000255f: 	movq	0xc0(%rsp), %rax
    00002567: 	jmp	.Ltmp2625 # Offset: 9575
.Ltmp2433:
    0000256c: 	leaq	0x58(%rsp), %rsi
    00002571: 	xorl	%edx, %edx
    00002573: 	movq	%r12, %rdi
    00002576: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9590
    0000257b: 	movq	%rax, 0xc0(%rsp)
    00002583: 	movq	%rax, %rdi
    00002586: 	movq	0x58(%rsp), %rax
    0000258b: 	movq	%rax, 0xd0(%rsp)
.Ltmp2648:
    00002593: 	movq	(%rsp), %rsi
    00002597: 	movq	%r14, %rdx
    0000259a: 	callq	memcpy@PLT # Offset: 9626
    0000259f: 	movq	0x58(%rsp), %r14
    000025a4: 	movq	0xc0(%rsp), %rax
    000025ac: 	jmp	.Ltmp2609 # Offset: 9644
.Ltmp2427:
    000025b1: 	leaq	0x58(%rsp), %rsi
    000025b6: 	xorl	%edx, %edx
    000025b8: 	movq	%r12, %rdi
    000025bb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9659
    000025c0: 	movq	%rax, 0xc0(%rsp)
    000025c8: 	movq	%rax, %rdi
    000025cb: 	movq	0x58(%rsp), %rax
    000025d0: 	movq	%rax, 0xd0(%rsp)
.Ltmp2641:
    000025d8: 	movq	(%rsp), %rsi
    000025dc: 	movq	%r14, %rdx
    000025df: 	callq	memcpy@PLT # Offset: 9695
    000025e4: 	movq	0x58(%rsp), %r14
    000025e9: 	movq	0xc0(%rsp), %rax
    000025f1: 	jmp	.Ltmp2595 # Offset: 9713
.Ltmp2587:
    000025f6: 	testq	%r13, %r13
    000025f9: 	jne	.Ltmp2636 # Offset: 9721
    000025ff: 	movq	%rbx, %rax
    00002602: 	jmp	.Ltmp2637 # Offset: 9730
.Ltmp2546:
    00002607: 	leaq	0x58(%rsp), %rsi
    0000260c: 	xorl	%edx, %edx
    0000260e: 	movq	%r12, %rdi
    00002611: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9745
    00002616: 	movq	%rax, 0xc0(%rsp)
    0000261e: 	movq	%rax, %rdi
    00002621: 	movq	0x58(%rsp), %rax
    00002626: 	movq	%rax, 0xd0(%rsp)
.Ltmp2660:
    0000262e: 	movq	%r14, %rdx
    00002631: 	movq	%r15, %rsi
    00002634: 	callq	memcpy@PLT # Offset: 9780
    00002639: 	movq	0x58(%rsp), %r14
    0000263e: 	movq	0xc0(%rsp), %rax
    00002646: 	jmp	.Ltmp2633 # Offset: 9798
.Ltmp2540:
    0000264b: 	leaq	0x58(%rsp), %rsi
    00002650: 	xorl	%edx, %edx
    00002652: 	movq	%r12, %rdi
    00002655: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9813
    0000265a: 	movq	%rax, 0xc0(%rsp)
    00002662: 	movq	%rax, %rdi
    00002665: 	movq	0x58(%rsp), %rax
    0000266a: 	movq	%rax, 0xd0(%rsp)
.Ltmp2661:
    00002672: 	movq	%r14, %rdx
    00002675: 	movq	%r15, %rsi
    00002678: 	callq	memcpy@PLT # Offset: 9848
    0000267d: 	movq	0x58(%rsp), %r14
    00002682: 	movq	0xc0(%rsp), %rax
    0000268a: 	jmp	.Ltmp2635 # Offset: 9866
.Ltmp2559:
    0000268f: 	leaq	0x58(%rsp), %rsi
    00002694: 	xorl	%edx, %edx
    00002696: 	movq	%r12, %rdi
    00002699: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9881
    0000269e: 	movq	%rax, 0xc0(%rsp)
    000026a6: 	movq	%rax, %rdi
    000026a9: 	movq	0x58(%rsp), %rax
    000026ae: 	movq	%rax, 0xd0(%rsp)
.Ltmp2658:
    000026b6: 	movq	%r14, %rdx
    000026b9: 	movq	%r15, %rsi
    000026bc: 	callq	memcpy@PLT # Offset: 9916
    000026c1: 	movq	0x58(%rsp), %r14
    000026c6: 	movq	0xc0(%rsp), %rax
    000026ce: 	jmp	.Ltmp2629 # Offset: 9934
.Ltmp2553:
    000026d3: 	leaq	0x58(%rsp), %rsi
    000026d8: 	xorl	%edx, %edx
    000026da: 	movq	%r12, %rdi
    000026dd: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9949
    000026e2: 	movq	%rax, 0xc0(%rsp)
    000026ea: 	movq	%rax, %rdi
    000026ed: 	movq	0x58(%rsp), %rax
    000026f2: 	movq	%rax, 0xd0(%rsp)
.Ltmp2659:
    000026fa: 	movq	%r14, %rdx
    000026fd: 	movq	%r15, %rsi
    00002700: 	callq	memcpy@PLT # Offset: 9984
    00002705: 	movq	0x58(%rsp), %r14
    0000270a: 	movq	0xc0(%rsp), %rax
    00002712: 	jmp	.Ltmp2631 # Offset: 10002
.Ltmp2586:
    00002717: 	leaq	0x58(%rsp), %rsi
    0000271c: 	xorl	%edx, %edx
    0000271e: 	movq	%r12, %rdi
    00002721: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 10017
    00002726: 	movq	%rax, 0xc0(%rsp)
    0000272e: 	movq	%rax, %rdi
    00002731: 	movq	0x58(%rsp), %rax
    00002736: 	movq	%rax, 0xd0(%rsp)
.Ltmp2662:
    0000273e: 	movq	%r13, %rdx
    00002741: 	movq	%rbp, %rsi
    00002744: 	callq	memcpy@PLT # Offset: 10052
    00002749: 	movq	0x58(%rsp), %r13
    0000274e: 	movq	0xc0(%rsp), %rax
    00002756: 	jmp	.Ltmp2637 # Offset: 10070
.Ltmp2568:
    0000275b: 	leaq	0x58(%rsp), %rsi
    00002760: 	xorl	%edx, %edx
    00002762: 	movq	%r12, %rdi
    00002765: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 10085
    0000276a: 	movq	%rax, 0xc0(%rsp)
    00002772: 	movq	%rax, %rdi
    00002775: 	movq	0x58(%rsp), %rax
    0000277a: 	movq	%rax, 0xd0(%rsp)
.Ltmp2657:
    00002782: 	movq	%r14, %rdx
    00002785: 	movq	%r15, %rsi
    00002788: 	callq	memcpy@PLT # Offset: 10120
    0000278d: 	movq	0x58(%rsp), %r14
    00002792: 	movq	0xc0(%rsp), %rax
    0000279a: 	jmp	.Ltmp2627 # Offset: 10138
.Ltmp2411:
    0000279f: 	cmpq	0x10(%rsp), %r12
    000027a4: 	je	.Ltmp2414 # Offset: 10148
.Ltmp2640:
    000027aa: 	movq	(%r12), %rdi
    000027ae: 	leaq	0x10(%r12), %rax
    000027b3: 	cmpq	%rax, %rdi
    000027b6: 	je	.Ltmp2638 # Offset: 10166
.Ltmp2639:
    000027b8: 	movq	0x10(%r12), %rax
    000027bd: 	addq	$0x20, %r12
    000027c1: 	leaq	0x1(%rax), %rsi
    000027c5: 	callq	_ZdlPvm@PLT # Offset: 10181
    000027ca: 	cmpq	%r12, 0x10(%rsp)
    000027cf: 	je	.Ltmp2414 # Offset: 10191
    000027d5: 	movq	(%r12), %rdi
    000027d9: 	leaq	0x10(%r12), %rax
    000027de: 	cmpq	%rax, %rdi
    000027e1: 	jne	.Ltmp2639 # Offset: 10209
.Ltmp2638:
    000027e3: 	addq	$0x20, %r12
    000027e7: 	cmpq	%r12, 0x10(%rsp)
    000027ec: 	jne	.Ltmp2640 # Offset: 10220
    000027ee: 	jmp	.Ltmp2414 # Offset: 10222
.Ltmp2429:
    000027f3: 	leaq	DATAat0x38182(%rip), %rdi
    000027fa: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10234
.Ltmp2432:
    000027ff: 	leaq	DATAat0x38158(%rip), %rdi
    00002806: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10246
.Ltmp2435:
    0000280b: 	leaq	DATAat0x38182(%rip), %rdi
    00002812: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10258
.Ltmp2440:
    00002817: 	leaq	DATAat0x38158(%rip), %rdi
    0000281e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10270
.Ltmp2443:
    00002823: 	leaq	DATAat0x38182(%rip), %rdi
    0000282a: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10282
.Ltmp2447:
    0000282f: 	leaq	DATAat0x38158(%rip), %rdi
    00002836: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10294
.Ltmp2450:
    0000283b: 	leaq	DATAat0x38182(%rip), %rdi
    00002842: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10306
.Ltmp2453:
    00002847: 	leaq	DATAat0x38158(%rip), %rdi
    0000284e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10318
.Ltmp2456:
    00002853: 	leaq	DATAat0x38182(%rip), %rdi
    0000285a: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10330
.Ltmp2461:
    0000285f: 	leaq	DATAat0x38158(%rip), %rdi
    00002866: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10342
.Ltmp2464:
    0000286b: 	leaq	DATAat0x38182(%rip), %rdi
    00002872: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10354
.Ltmp2467:
    00002877: 	leaq	DATAat0x38158(%rip), %rdi
    0000287e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10366
.Ltmp2470:
    00002883: 	leaq	DATAat0x38182(%rip), %rdi
    0000288a: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10378
.Ltmp2475:
    0000288f: 	leaq	DATAat0x38158(%rip), %rdi
    00002896: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10390
.Ltmp2478:
    0000289b: 	leaq	DATAat0x38182(%rip), %rdi
    000028a2: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10402
.Ltmp2484:
    000028a7: 	leaq	DATAat0x38158(%rip), %rdi
    000028ae: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10414
.Ltmp2487:
    000028b3: 	leaq	DATAat0x38182(%rip), %rdi
    000028ba: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10426
.Ltmp2491:
    000028bf: 	leaq	DATAat0x38158(%rip), %rdi
    000028c6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10438
.Ltmp2494:
    000028cb: 	leaq	DATAat0x38182(%rip), %rdi
    000028d2: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10450
.Ltmp2498:
    000028d7: 	leaq	DATAat0x38158(%rip), %rdi
    000028de: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10462
.Ltmp2501:
    000028e3: 	leaq	DATAat0x38182(%rip), %rdi
    000028ea: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10474
.Ltmp2506:
    000028ef: 	leaq	DATAat0x38158(%rip), %rdi
    000028f6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10486
.Ltmp2509:
    000028fb: 	leaq	DATAat0x38182(%rip), %rdi
    00002902: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10498
.Ltmp2515:
    00002907: 	leaq	DATAat0x38158(%rip), %rdi
    0000290e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10510
.Ltmp2518:
    00002913: 	leaq	DATAat0x38182(%rip), %rdi
    0000291a: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10522
.Ltmp2521:
    0000291f: 	leaq	DATAat0x38158(%rip), %rdi
    00002926: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10534
.Ltmp2524:
    0000292b: 	leaq	DATAat0x38182(%rip), %rdi
    00002932: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10546
.Ltmp2527:
    00002937: 	leaq	DATAat0x38158(%rip), %rdi
    0000293e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10558
.Ltmp2530:
    00002943: 	leaq	DATAat0x38182(%rip), %rdi
    0000294a: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10570
.Ltmp2533:
    0000294f: 	leaq	DATAat0x38158(%rip), %rdi
    00002956: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10582
.Ltmp2536:
    0000295b: 	leaq	DATAat0x38182(%rip), %rdi
    00002962: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10594
.Ltmp2539:
    00002967: 	leaq	DATAat0x38158(%rip), %rdi
    0000296e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10606
.Ltmp2542:
    00002973: 	leaq	DATAat0x38182(%rip), %rdi
    0000297a: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10618
.Ltmp2545:
    0000297f: 	leaq	DATAat0x38158(%rip), %rdi
    00002986: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10630
.Ltmp2548:
    0000298b: 	leaq	DATAat0x38182(%rip), %rdi
    00002992: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10642
.Ltmp2552:
    00002997: 	leaq	DATAat0x38158(%rip), %rdi
    0000299e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10654
.Ltmp2555:
    000029a3: 	leaq	DATAat0x38182(%rip), %rdi
    000029aa: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10666
.Ltmp2558:
    000029af: 	leaq	DATAat0x38158(%rip), %rdi
    000029b6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10678
.Ltmp2561:
    000029bb: 	leaq	DATAat0x38182(%rip), %rdi
    000029c2: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10690
.Ltmp2567:
    000029c7: 	leaq	DATAat0x38158(%rip), %rdi
    000029ce: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10702
.Ltmp2570:
    000029d3: 	leaq	DATAat0x38182(%rip), %rdi
    000029da: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10714
.Ltmp2585:
    000029df: 	leaq	DATAat0x38158(%rip), %rdi
    000029e6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10726
.Ltmp2588:
    000029eb: 	leaq	DATAat0x38182(%rip), %rdi
    000029f2: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10738
.Ltmp2593:
    000029f7: 	callq	__stack_chk_fail@PLT # Offset: 10743
.Ltmp2594:
    000029fc: 	movq	%rbx, %rdi
    000029ff: 	jmp	.Ltmp2641 # Offset: 10751
.Ltmp2596:
    00002a04: 	movq	%rbx, %rdi
    00002a07: 	jmp	.Ltmp2642 # Offset: 10759
.Ltmp2598:
    00002a0c: 	movq	%rbx, %rdi
    00002a0f: 	jmp	.Ltmp2643 # Offset: 10767
.Ltmp2600:
    00002a14: 	movq	%rbx, %rdi
    00002a17: 	jmp	.Ltmp2644 # Offset: 10775
.Ltmp2602:
    00002a1c: 	movq	%rbx, %rdi
    00002a1f: 	jmp	.Ltmp2645 # Offset: 10783
.Ltmp2604:
    00002a24: 	movq	%rbx, %rdi
    00002a27: 	jmp	.Ltmp2646 # Offset: 10791
.Ltmp2606:
    00002a2c: 	movq	%rbx, %rdi
    00002a2f: 	jmp	.Ltmp2647 # Offset: 10799
.Ltmp2608:
    00002a34: 	movq	%rbx, %rdi
    00002a37: 	jmp	.Ltmp2648 # Offset: 10807
.Ltmp2610:
    00002a3c: 	movq	%rbx, %rdi
    00002a3f: 	jmp	.Ltmp2649 # Offset: 10815
.Ltmp2612:
    00002a44: 	movq	%rbx, %rdi
    00002a47: 	jmp	.Ltmp2650 # Offset: 10823
.Ltmp2614:
    00002a4c: 	movq	%rbx, %rdi
    00002a4f: 	jmp	.Ltmp2651 # Offset: 10831
.Ltmp2616:
    00002a54: 	movq	%rbx, %rdi
    00002a57: 	jmp	.Ltmp2652 # Offset: 10839
.Ltmp2618:
    00002a5c: 	movq	%rbx, %rdi
    00002a5f: 	jmp	.Ltmp2653 # Offset: 10847
.Ltmp2620:
    00002a64: 	movq	%rbx, %rdi
    00002a67: 	jmp	.Ltmp2654 # Offset: 10855
.Ltmp2622:
    00002a6c: 	movq	%rbx, %rdi
    00002a6f: 	jmp	.Ltmp2655 # Offset: 10863
.Ltmp2624:
    00002a74: 	movq	%rbx, %rdi
    00002a77: 	jmp	.Ltmp2656 # Offset: 10871
.Ltmp2626:
    00002a7c: 	movq	%rbx, %rdi
    00002a7f: 	jmp	.Ltmp2657 # Offset: 10879
.Ltmp2628:
    00002a84: 	movq	%rbx, %rdi
    00002a87: 	jmp	.Ltmp2658 # Offset: 10887
.Ltmp2630:
    00002a8c: 	movq	%rbx, %rdi
    00002a8f: 	jmp	.Ltmp2659 # Offset: 10895
.Ltmp2632:
    00002a94: 	movq	%rbx, %rdi
    00002a97: 	jmp	.Ltmp2660 # Offset: 10903
.Ltmp2634:
    00002a9c: 	movq	%rbx, %rdi
    00002a9f: 	jmp	.Ltmp2661 # Offset: 10911
.Ltmp2636:
    00002aa4: 	movq	%rbx, %rdi
    00002aa7: 	jmp	.Ltmp2662 # Offset: 10919
.Ltmp2426:
    00002aac: 	leaq	DATAat0x38158(%rip), %rdi
    00002ab3: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10931
    00002ab8: 	endbr64
.Ltmp2664:
    00002abc: 	movq	%rax, %rbp
    00002abf: 	jmp	.Ltmp2663 # Offset: 10943
    00002ac1: 	endbr64
    00002ac5: 	jmp	.Ltmp2664 # Offset: 10949
    00002ac7: 	endbr64
    00002acb: 	jmp	.Ltmp2664 # Offset: 10955
    00002acd: 	endbr64
    00002ad1: 	jmp	.Ltmp2664 # Offset: 10961
    00002ad3: 	endbr64
    00002ad7: 	jmp	.Ltmp2664 # Offset: 10967
    00002ad9: 	endbr64
    00002add: 	jmp	.Ltmp2664 # Offset: 10973
.Ltmp2663:
    00002adf: 	movq	0xc0(%rsp), %rdi
    00002ae7: 	cmpq	%rbx, %rdi
    00002aea: 	je	.Ltmp2665 # Offset: 10986
.Ltmp2674:
    00002aec: 	movq	0xd0(%rsp), %rax
    00002af4: 	leaq	0x1(%rax), %rsi
    00002af8: 	callq	_ZdlPvm@PLT # Offset: 11000
.Ltmp2665:
    00002afd: 	movq	0x60(%rsp), %rdi
    00002b02: 	cmpq	0x40(%rsp), %rdi
    00002b07: 	je	.Ltmp2666 # Offset: 11015
    00002b09: 	movq	0x70(%rsp), %rax
    00002b0e: 	leaq	0x1(%rax), %rsi
    00002b12: 	callq	_ZdlPvm@PLT # Offset: 11026
.Ltmp2666:
    00002b17: 	movq	%rbp, %rdi
    00002b1a: 	callq	_Unwind_Resume@PLT # Offset: 11034
    00002b1f: 	endbr64
.Ltmp2668:
    00002b23: 	movq	%rax, %rbp
    00002b26: 	jmp	.Ltmp2667 # Offset: 11046
    00002b2b: 	endbr64
    00002b2f: 	jmp	.Ltmp2668 # Offset: 11055
    00002b31: 	endbr64
    00002b35: 	jmp	.Ltmp2668 # Offset: 11061
    00002b37: 	endbr64
    00002b3b: 	jmp	.Ltmp2664 # Offset: 11067
    00002b40: 	endbr64
    00002b44: 	jmp	.Ltmp2664 # Offset: 11076
    00002b49: 	endbr64
    00002b4d: 	movq	%rax, %rbp
    00002b50: 	jmp	.Ltmp2669 # Offset: 11088
    00002b52: 	endbr64
    00002b56: 	jmp	.Ltmp2668 # Offset: 11094
.Ltmp2671:
    00002b58: 	movq	0xc0(%rsp), %rdi
    00002b60: 	cmpq	%rbx, %rdi
    00002b63: 	je	.Ltmp2670 # Offset: 11107
    00002b65: 	movq	0xd0(%rsp), %rax
    00002b6d: 	leaq	0x1(%rax), %rsi
    00002b71: 	callq	_ZdlPvm@PLT # Offset: 11121
.Ltmp2670:
    00002b76: 	movq	0xa0(%rsp), %rdi
    00002b7e: 	leaq	0xb0(%rsp), %rax
    00002b86: 	cmpq	%rax, %rdi
    00002b89: 	je	.Ltmp2669 # Offset: 11145
    00002b8b: 	movq	0xb0(%rsp), %rax
    00002b93: 	leaq	0x1(%rax), %rsi
    00002b97: 	callq	_ZdlPvm@PLT # Offset: 11159
.Ltmp2669:
    00002b9c: 	movq	0x80(%rsp), %rdi
    00002ba4: 	leaq	0x90(%rsp), %rax
    00002bac: 	cmpq	%rax, %rdi
    00002baf: 	je	.Ltmp2665 # Offset: 11183
    00002bb5: 	movq	0x90(%rsp), %rax
    00002bbd: 	leaq	0x1(%rax), %rsi
    00002bc1: 	callq	_ZdlPvm@PLT # Offset: 11201
    00002bc6: 	jmp	.Ltmp2665 # Offset: 11206
    00002bcb: 	endbr64
    00002bcf: 	jmp	.Ltmp2668 # Offset: 11215
    00002bd4: 	endbr64
    00002bd8: 	jmp	.Ltmp2668 # Offset: 11224
    00002bdd: 	endbr64
    00002be1: 	jmp	.Ltmp2668 # Offset: 11233
    00002be6: 	endbr64
    00002bea: 	jmp	.Ltmp2668 # Offset: 11242
    00002bef: 	endbr64
    00002bf3: 	jmp	.Ltmp2668 # Offset: 11251
    00002bf8: 	endbr64
    00002bfc: 	jmp	.Ltmp2668 # Offset: 11260
    00002c01: 	endbr64
    00002c05: 	jmp	.Ltmp2668 # Offset: 11269
    00002c0a: 	endbr64
    00002c0e: 	jmp	.Ltmp2668 # Offset: 11278
    00002c13: 	endbr64
    00002c17: 	jmp	.Ltmp2668 # Offset: 11287
.Ltmp2667:
    00002c1c: 	movq	0xc0(%rsp), %rdi
    00002c24: 	cmpq	%rbx, %rdi
    00002c27: 	je	.Ltmp2669 # Offset: 11303
    00002c2d: 	movq	0xd0(%rsp), %rax
    00002c35: 	leaq	0x1(%rax), %rsi
    00002c39: 	callq	_ZdlPvm@PLT # Offset: 11321
    00002c3e: 	jmp	.Ltmp2669 # Offset: 11326
    00002c43: 	endbr64
    00002c47: 	jmp	.Ltmp2668 # Offset: 11335
    00002c4c: 	endbr64
    00002c50: 	jmp	.Ltmp2664 # Offset: 11344
    00002c55: 	endbr64
    00002c59: 	jmp	.Ltmp2664 # Offset: 11353
    00002c5e: 	endbr64
    00002c62: 	jmp	.Ltmp2664 # Offset: 11362
    00002c67: 	endbr64
    00002c6b: 	jmp	.Ltmp2664 # Offset: 11371
    00002c70: 	endbr64
    00002c74: 	jmp	.Ltmp2664 # Offset: 11380
    00002c79: 	endbr64
    00002c7d: 	jmp	.Ltmp2664 # Offset: 11389
    00002c82: 	endbr64
    00002c86: 	jmp	.Ltmp2664 # Offset: 11398
    00002c8b: 	endbr64
    00002c8f: 	jmp	.Ltmp2664 # Offset: 11407
    00002c94: 	endbr64
.Ltmp2672:
    00002c98: 	movq	%rax, %rbp
    00002c9b: 	jmp	.Ltmp2671 # Offset: 11419
    00002ca0: 	endbr64
    00002ca4: 	jmp	.Ltmp2672 # Offset: 11428
    00002ca6: 	endbr64
    00002caa: 	jmp	.Ltmp2672 # Offset: 11434
    00002cac: 	endbr64
    00002cb0: 	jmp	.Ltmp2672 # Offset: 11440
    00002cb2: 	endbr64
    00002cb6: 	jmp	.Ltmp2668 # Offset: 11446
    00002cbb: 	endbr64
    00002cbf: 	jmp	.Ltmp2668 # Offset: 11455
    00002cc4: 	endbr64
    00002cc8: 	jmp	.Ltmp2668 # Offset: 11464
    00002ccd: 	endbr64
    00002cd1: 	jmp	.Ltmp2668 # Offset: 11473
    00002cd6: 	endbr64
    00002cda: 	jmp	.Ltmp2664 # Offset: 11482
    00002cdf: 	endbr64
    00002ce3: 	jmp	.Ltmp2664 # Offset: 11491
    00002ce8: 	endbr64
    00002cec: 	jmp	.Ltmp2664 # Offset: 11500
    00002cf1: 	endbr64
    00002cf5: 	jmp	.Ltmp2664 # Offset: 11509
    00002cfa: 	endbr64
    00002cfe: 	movq	%rax, %rbp
    00002d01: 	jmp	.Ltmp2673 # Offset: 11521
    00002d03: 	endbr64
    00002d07: 	movq	%rax, %rbp
    00002d0a: 	jmp	.Ltmp2665 # Offset: 11530
.Ltmp2673:
    00002d0f: 	movq	0xc0(%rsp), %rdi
    00002d17: 	leaq	0xd0(%rsp), %rax
    00002d1f: 	cmpq	%rax, %rdi
    00002d22: 	jne	.Ltmp2674 # Offset: 11554
    00002d28: 	jmp	.Ltmp2665 # Offset: 11560
    00002d2d: 	endbr64
    00002d31: 	jmp	.Ltmp2672 # Offset: 11569
    00002d36: 	endbr64
    00002d3a: 	jmp	.Ltmp2664 # Offset: 11578
    00002d3f: 	endbr64
    00002d43: 	movq	%rax, %rbp
    00002d46: 	jmp	.Ltmp2670 # Offset: 11590
    00002d4b: 	endbr64
    00002d4f: 	jmp	.Ltmp2672 # Offset: 11599
    00002d54: 	endbr64
    00002d58: 	jmp	.Ltmp2672 # Offset: 11608
    00002d5d: 	endbr64
    00002d61: 	jmp	.Ltmp2672 # Offset: 11617
    00002d66: 	endbr64
    00002d6a: 	jmp	.Ltmp2672 # Offset: 11626
    00002d6f: 	endbr64
    00002d73: 	jmp	.Ltmp2672 # Offset: 11635
    00002d78: 	endbr64
    00002d7c: 	jmp	.Ltmp2672 # Offset: 11644
    00002d81: 	endbr64
    00002d85: 	jmp	.Ltmp2672 # Offset: 11653
    00002d8a: 	endbr64
    00002d8e: 	jmp	.Ltmp2668 # Offset: 11662
    00002d93: 	endbr64
    00002d97: 	jmp	.Ltmp2668 # Offset: 11671
    00002d9c: 	endbr64
    00002da0: 	jmp	.Ltmp2668 # Offset: 11680
    00002da5: 	endbr64
    00002da9: 	jmp	.Ltmp2668 # Offset: 11689
    00002dae: 	endbr64
    00002db2: 	jmp	.Ltmp2668 # Offset: 11698
    00002db7: 	endbr64
    00002dbb: 	jmp	.Ltmp2668 # Offset: 11707
    00002dc0: 	endbr64
    00002dc4: 	jmp	.Ltmp2672 # Offset: 11716
    00002dc9: 	endbr64
    00002dcd: 	jmp	.Ltmp2672 # Offset: 11725
    00002dd2: 	endbr64
    00002dd6: 	jmp	.Ltmp2664 # Offset: 11734
    00002ddb: 	endbr64
    00002ddf: 	jmp	.Ltmp2664 # Offset: 11743
    00002de4: 	endbr64
    00002de8: 	jmp	.Ltmp2664 # Offset: 11752
    00002ded: 	endbr64
    00002df1: 	jmp	.Ltmp2664 # Offset: 11761
    00002df6: 	endbr64
    00002dfa: 	jmp	.Ltmp2664 # Offset: 11770
    00002dff: 	endbr64
    00002e03: 	jmp	.Ltmp2664 # Offset: 11779
    00002e08: 	endbr64
    00002e0c: 	jmp	.Ltmp2664 # Offset: 11788
    00002e11: 	endbr64
    00002e15: 	jmp	.Ltmp2664 # Offset: 11797
    00002e1a: 	endbr64
    00002e1e: 	jmp	.Ltmp2664 # Offset: 11806
    00002e23: 	endbr64
    00002e27: 	jmp	.Ltmp2664 # Offset: 11815
    00002e2c: 	endbr64
    00002e30: 	jmp	.Ltmp2664 # Offset: 11824
    00002e35: 	endbr64
    00002e39: 	jmp	.Ltmp2664 # Offset: 11833
    00002e3e: 	endbr64
    00002e42: 	jmp	.Ltmp2664 # Offset: 11842
    00002e47: 	endbr64
    00002e4b: 	jmp	.Ltmp2664 # Offset: 11851
    00002e50: 	endbr64
    00002e54: 	jmp	.Ltmp2664 # Offset: 11860
    00002e59: 	endbr64
    00002e5d: 	jmp	.Ltmp2664 # Offset: 11869
    00002e62: 	endbr64
    00002e66: 	jmp	.Ltmp2668 # Offset: 11878
    00002e6b: 	endbr64
    00002e6f: 	jmp	.Ltmp2668 # Offset: 11887
    00002e74: 	endbr64
    00002e78: 	jmp	.Ltmp2668 # Offset: 11896
    00002e7d: 	endbr64
    00002e81: 	jmp	.Ltmp2668 # Offset: 11905
    00002e86: 	endbr64
    00002e8a: 	jmp	.Ltmp2668 # Offset: 11914
    00002e8f: 	endbr64
    00002e93: 	jmp	.Ltmp2668 # Offset: 11923
    00002e98: 	endbr64
    00002e9c: 	jmp	.Ltmp2668 # Offset: 11932
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIiEvv"

Binary Function "_Z14test_one_loop3IhPFhPKhihEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 272
  State       : disassembled
  Address     : 0x1ff90
  Size        : 0x22c
  MaxSize     : 0x230
  Offset      : 0x1ff90
  Section     : .text
  Orc Section : .local.text._Z14test_one_loop3IhPFhPKhihEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0271:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x381c8(%rip), %r15
    0000000d: 	pushq	%r14
    0000000f: 	movq	%rdi, %r14
    00000012: 	pushq	%r13
    00000014: 	movl	%esi, %r13d
    00000017: 	pushq	%r12
    00000019: 	movq	%rcx, %r12
    0000001c: 	pushq	%rbp
    0000001d: 	movl	%edx, %ebp
    0000001f: 	pushq	%rbx
    00000020: 	movzbl	%bpl, %ebp
    00000024: 	xorl	%ebx, %ebx
    00000026: 	subq	$0x28, %rsp
    0000002a: 	movq	%r8, 0x8(%rsp)
    0000002f: 	movq	%fs:0x28, %rax
    00000038: 	movq	%rax, 0x18(%rsp)
    0000003d: 	xorl	%eax, %eax
    0000003f: 	callq	clock@PLT # Offset: 63
    00000044: 	movq	%rax, start_time(%rip)
    0000004b: 	movl	iterations(%rip), %eax
    00000051: 	testl	%eax, %eax
    00000053: 	jle	.Ltmp2675 # Offset: 83
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp2677:
    00000058: 	movl	%ebp, %edx
    0000005a: 	movl	%r13d, %esi
    0000005d: 	movq	%r14, %rdi
    00000060: 	callq	*%r12 # Offset: 96
    00000063: 	movl	%eax, %r8d
    00000066: 	cvttsd2si	init_value(%rip), %eax
    0000006e: 	shll	$0x6, %eax
    00000071: 	cmpb	%al, %r8b
    00000074: 	je	.Ltmp2676 # Offset: 116
    0000007a: 	movq	0x8(%rsp), %rax
    0000007f: 	movq	%r15, %rsi
    00000082: 	movl	$0x1, %edi
    00000087: 	addl	$0x1, %ebx
    0000008a: 	movq	(%rax), %rdx
    0000008d: 	xorl	%eax, %eax
    0000008f: 	callq	__printf_chk@PLT # Offset: 143
    00000094: 	cmpl	%ebx, iterations(%rip)
    0000009a: 	jg	.Ltmp2677 # Offset: 154
.Ltmp2675:
    0000009c: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000a3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000aa: 	subq	$0x20, %rax
    000000ae: 	cmpq	%rax, %rbx
    000000b1: 	je	.Ltmp2678 # Offset: 177
    000000b7: 	movq	0x8(%rsp), %rax
    000000bc: 	leaq	0x10(%rbx), %rdi
    000000c0: 	movq	%rdi, (%rbx)
    000000c3: 	movq	(%rax), %rbp
    000000c6: 	movq	0x8(%rax), %r12
    000000ca: 	movq	%rbp, %rax
    000000cd: 	addq	%r12, %rax
    000000d0: 	je	.Ltmp2679 # Offset: 208
    000000d2: 	testq	%rbp, %rbp
    000000d5: 	je	.Ltmp2680 # Offset: 213
.Ltmp2679:
    000000db: 	movq	%r12, 0x10(%rsp)
    000000e0: 	cmpq	$0xf, %r12
    000000e4: 	ja	.Ltmp2681 # Offset: 228
    000000ea: 	cmpq	$0x1, %r12
    000000ee: 	jne	.Ltmp2682 # Offset: 238
    000000f4: 	movzbl	(%rbp), %eax
    000000f8: 	movb	%al, 0x10(%rbx)
.Ltmp2685:
    000000fb: 	movq	%r12, 0x8(%rbx)
    000000ff: 	movb	$0x0, (%rdi,%r12)
    00000104: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000010b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000112: 	addq	$0x20, %rax
    00000116: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000011d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000124: 	je	.Ltmp2683 # Offset: 292
.Ltmp2686:
    0000012a: 	movq	-0x20(%rax), %rbp
    0000012e: 	callq	clock@PLT # Offset: 302
    00000133: 	movq	%rax, end_time(%rip)
    0000013a: 	movq	0x18(%rsp), %rdx
    0000013f: 	subq	%fs:0x28, %rdx
    00000148: 	jne	.Ltmp2684 # Offset: 328
    0000014e: 	subq	start_time(%rip), %rax
    00000155: 	pxor	%xmm0, %xmm0
    00000159: 	movq	%rbp, %rdi
    0000015c: 	cvtsi2sd	%rax, %xmm0
    00000161: 	divsd	DATAat0x38a48(%rip), %xmm0
    00000169: 	addq	$0x28, %rsp
    0000016d: 	popq	%rbx
    0000016e: 	popq	%rbp
    0000016f: 	popq	%r12
    00000171: 	popq	%r13
    00000173: 	popq	%r14
    00000175: 	popq	%r15
    00000177: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 375
    0000017c: 	nopl	(%rax) # Size: 4
.Ltmp2676:
    00000180: 	addl	$0x1, %ebx
    00000183: 	cmpl	%ebx, iterations(%rip)
    00000189: 	jg	.Ltmp2677 # Offset: 393
    0000018f: 	jmp	.Ltmp2675 # Offset: 399
    00000194: 	nopl	(%rax) # Size: 4
.Ltmp2681:
    00000198: 	movq	%rbx, %rdi
    0000019b: 	leaq	0x10(%rsp), %rsi
    000001a0: 	xorl	%edx, %edx
    000001a2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 418
    000001a7: 	movq	%rax, (%rbx)
    000001aa: 	movq	%rax, %rdi
    000001ad: 	movq	0x10(%rsp), %rax
    000001b2: 	movq	%rax, 0x10(%rbx)
.Ltmp2687:
    000001b6: 	movq	%r12, %rdx
    000001b9: 	movq	%rbp, %rsi
    000001bc: 	callq	memcpy@PLT # Offset: 444
    000001c1: 	movq	0x10(%rsp), %r12
    000001c6: 	movq	(%rbx), %rdi
    000001c9: 	jmp	.Ltmp2685 # Offset: 457
    000001ce: 	nop # Size: 2
.Ltmp2678:
    000001d0: 	movq	0x8(%rsp), %rsi
    000001d5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001dc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 476
    000001e1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001e8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001ef: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001f6: 	jne	.Ltmp2686 # Offset: 502
.Ltmp2683:
    000001fc: 	movq	-0x8(%rdx), %rax
    00000200: 	addq	$0x200, %rax
    00000206: 	jmp	.Ltmp2686 # Offset: 518
    0000020b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2682:
    00000210: 	testq	%r12, %r12
    00000213: 	je	.Ltmp2685 # Offset: 531
    00000219: 	jmp	.Ltmp2687 # Offset: 537
.Ltmp2684:
    0000021b: 	callq	__stack_chk_fail@PLT # Offset: 539
.Ltmp2680:
    00000220: 	leaq	DATAat0x38158(%rip), %rdi
    00000227: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 551
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_one_loop3IhPFhPKhihEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIhEvv" after disassembly {
  Number      : 273
  State       : disassembled
  Address     : 0x201c0
  Size        : 0x2e23
  MaxSize     : 0x2e30
  Offset      : 0x201c0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIhEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0272:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x1000, %rsp
    00000015: 	orq	$0x0, (%rsp)
    0000001a: 	subq	$0x1000, %rsp
    00000021: 	orq	$0x0, (%rsp)
    00000026: 	subq	$0x38, %rsp
    0000002a: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm0
    00000032: 	movl	$0x3e8, %ecx
    00000037: 	movabsq	$0x101010101010101, %rdx
    00000041: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm1
    00000049: 	movq	_Z7gLabelsB5cxx11+56(%rip), %r15
    00000050: 	movhlps	%xmm0, %xmm4
    00000053: 	movq	%xmm4, %rbx
    00000058: 	movq	%xmm1, %r12
    0000005d: 	leaq	0x8(%rbx), %r13
    00000061: 	movq	%fs:0x28, %rax
    0000006a: 	movq	%rax, 0x2028(%rsp)
    00000072: 	xorl	%eax, %eax
    00000074: 	leaq	0x70(%rsp), %rax
    00000079: 	leaq	0xe0(%rsp), %rbp
    00000081: 	movq	%r13, (%rsp)
    00000085: 	movq	%rax, 0x40(%rsp)
    0000008a: 	movq	%rbp, %rdi
    0000008d: 	movq	%rax, 0x60(%rsp)
    00000092: 	movl	$0x5f38, %eax
    00000097: 	movw	%ax, 0x74(%rsp)
    0000009c: 	cvttsd2si	init_value(%rip), %eax
    000000a4: 	movl	$0x746e6975, 0x70(%rsp)
    000000ac: 	movb	$0x74, 0x76(%rsp)
    000000b1: 	movq	$0x7, 0x68(%rsp)
    000000ba: 	movzbl	%al, %eax
    000000bd: 	movb	$0x0, 0x77(%rsp)
    000000c2: 	imulq	%rdx, %rax
    000000c6: 	movaps	%xmm1, 0x20(%rsp)
    000000cb: 	movaps	%xmm0, 0x30(%rsp)
    000000d0: 	movq	%xmm4, 0x48(%rsp)
    000000d6: 	rep		stosq	%rax, %es:(%rdi)
    000000d9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000e0: 	movq	%xmm0, 0x18(%rsp)
    000000e6: 	movq	%rax, 0x10(%rsp)
    000000eb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    000000f2: 	movq	%rax, 0x8(%rsp)
    000000f7: 	cmpq	%r13, %rax
    000000fa: 	jbe	.Ltmp2688 # Offset: 250
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp2691:
    00000100: 	movq	(%rsp), %rax
    00000104: 	movq	(%rax), %r14
    00000107: 	leaq	0x200(%r14), %rbx
    0000010e: 	nop # Size: 2
.Ltmp2690:
    00000110: 	movq	(%r14), %rdi
    00000113: 	leaq	0x10(%r14), %rdx
    00000117: 	cmpq	%rdx, %rdi
    0000011a: 	je	.Ltmp2689 # Offset: 282
    00000120: 	movq	0x10(%r14), %rax
    00000124: 	addq	$0x20, %r14
    00000128: 	leaq	0x1(%rax), %rsi
    0000012c: 	callq	_ZdlPvm@PLT # Offset: 300
    00000131: 	cmpq	%rbx, %r14
    00000134: 	jne	.Ltmp2690 # Offset: 308
    00000136: 	addq	$0x8, (%rsp)
    0000013b: 	movq	(%rsp), %rax
    0000013f: 	cmpq	%rax, 0x8(%rsp)
    00000144: 	ja	.Ltmp2691 # Offset: 324
.Ltmp2688:
    00000146: 	movq	0x48(%rsp), %rbx
    0000014b: 	cmpq	%rbx, 0x8(%rsp)
    00000150: 	jne	.Ltmp2692 # Offset: 336
    00000152: 	jmp	.Ltmp2693 # Offset: 338
    00000157: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2695:
    00000160: 	movq	(%r12), %rdi
    00000164: 	leaq	0x10(%r12), %rax
    00000169: 	cmpq	%rax, %rdi
    0000016c: 	je	.Ltmp2694 # Offset: 364
    0000016e: 	movq	0x10(%r12), %rax
    00000173: 	leaq	0x1(%rax), %rsi
    00000177: 	callq	_ZdlPvm@PLT # Offset: 375
.Ltmp2694:
    0000017c: 	addq	$0x20, %r12
.Ltmp2692:
    00000180: 	cmpq	0x18(%rsp), %r12
    00000185: 	jne	.Ltmp2695 # Offset: 389
    00000187: 	cmpq	%r15, 0x10(%rsp)
    0000018c: 	je	.Ltmp2696 # Offset: 396
    0000018e: 	nop # Size: 2
.Ltmp2698:
    00000190: 	movq	(%r15), %rdi
    00000193: 	leaq	0x10(%r15), %rax
    00000197: 	cmpq	%rax, %rdi
    0000019a: 	je	.Ltmp2697 # Offset: 410
    0000019c: 	movq	0x10(%r15), %rax
    000001a0: 	leaq	0x1(%rax), %rsi
    000001a4: 	callq	_ZdlPvm@PLT # Offset: 420
.Ltmp2697:
    000001a9: 	addq	$0x20, %r15
    000001ad: 	cmpq	%r15, 0x10(%rsp)
    000001b2: 	jne	.Ltmp2698 # Offset: 434
.Ltmp2696:
    000001b4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    000001bb: 	leaq	0x8(%rax), %rbx
    000001bf: 	cmpq	%r13, %rbx
    000001c2: 	jbe	.Ltmp2699 # Offset: 450
    000001c4: 	nopl	(%rax) # Size: 4
.Ltmp2700:
    000001c8: 	movq	(%r13), %rdi
    000001cc: 	movl	$0x200, %esi
    000001d1: 	addq	$0x8, %r13
    000001d5: 	callq	_ZdlPvm@PLT # Offset: 469
    000001da: 	cmpq	%r13, %rbx
    000001dd: 	ja	.Ltmp2700 # Offset: 477
.Ltmp2699:
    000001df: 	movdqa	0x20(%rsp), %xmm2
    000001e5: 	movdqa	0x30(%rsp), %xmm3
    000001eb: 	leaq	0xc0(%rsp), %r12
    000001f3: 	leaq	0x60(%rsp), %r13
    000001f8: 	leaq	DATAat0x381d8(%rip), %rdx
    000001ff: 	movq	%r13, %rsi
    00000202: 	movq	%r12, %rdi
    00000205: 	movaps	%xmm2, _Z7gLabelsB5cxx11+48(%rip)
    0000020c: 	movaps	%xmm3, _Z7gLabelsB5cxx11+64(%rip)
    00000213: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 531
    00000218: 	cvttsd2si	init_value(%rip), %edx
    00000220: 	movq	%r12, %r8
    00000223: 	movl	$0x1f40, %esi
    00000228: 	movq	%rbp, %rdi
    0000022b: 	leaq	_Z17test_for_loop_optIhET_PKS0_iS0_(%rip), %r15
    00000232: 	movq	%r15, %rcx
    00000235: 	movzbl	%dl, %edx
    00000238: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 568
    0000023d: 	movq	0xc0(%rsp), %rdi
    00000245: 	leaq	0xd0(%rsp), %rbx
    0000024d: 	cmpq	%rbx, %rdi
    00000250: 	je	.Ltmp2701 # Offset: 592
    00000252: 	movq	0xd0(%rsp), %rax
    0000025a: 	leaq	0x1(%rax), %rsi
    0000025e: 	callq	_ZdlPvm@PLT # Offset: 606
.Ltmp2701:
    00000263: 	leaq	DATAat0x381ee(%rip), %rdx
    0000026a: 	movq	%r13, %rsi
    0000026d: 	movq	%r12, %rdi
    00000270: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 624
    00000275: 	cvttsd2si	init_value(%rip), %edx
    0000027d: 	movq	%r12, %r8
    00000280: 	movl	$0x1f40, %esi
    00000285: 	movq	%rbp, %rdi
    00000288: 	leaq	_Z19test_while_loop_optIhET_PKS0_iS0_(%rip), %rcx
    0000028f: 	movzbl	%dl, %edx
    00000292: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 658
    00000297: 	movq	0xc0(%rsp), %rdi
    0000029f: 	cmpq	%rbx, %rdi
    000002a2: 	je	.Ltmp2702 # Offset: 674
    000002a4: 	movq	0xd0(%rsp), %rax
    000002ac: 	leaq	0x1(%rax), %rsi
    000002b0: 	callq	_ZdlPvm@PLT # Offset: 688
.Ltmp2702:
    000002b5: 	leaq	DATAat0x38206(%rip), %rdx
    000002bc: 	movq	%r13, %rsi
    000002bf: 	movq	%r12, %rdi
    000002c2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 706
    000002c7: 	cvttsd2si	init_value(%rip), %edx
    000002cf: 	movq	%r12, %r8
    000002d2: 	movl	$0x1f40, %esi
    000002d7: 	movq	%rbp, %rdi
    000002da: 	leaq	_Z16test_do_loop_optIhET_PKS0_iS0_(%rip), %rcx
    000002e1: 	movzbl	%dl, %edx
    000002e4: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 740
    000002e9: 	movq	0xc0(%rsp), %rdi
    000002f1: 	cmpq	%rbx, %rdi
    000002f4: 	je	.Ltmp2703 # Offset: 756
    000002f6: 	movq	0xd0(%rsp), %rax
    000002fe: 	leaq	0x1(%rax), %rsi
    00000302: 	callq	_ZdlPvm@PLT # Offset: 770
.Ltmp2703:
    00000307: 	movq	0x60(%rsp), %rax
    0000030c: 	movq	0x68(%rsp), %r14
    00000311: 	movq	%rbx, 0xc0(%rsp)
    00000319: 	movq	%rax, %rcx
    0000031c: 	movq	%rax, (%rsp)
    00000320: 	addq	%r14, %rcx
    00000323: 	je	.Ltmp2704 # Offset: 803
    00000325: 	testq	%rax, %rax
    00000328: 	je	.Ltmp2705 # Offset: 808
.Ltmp2704:
    0000032e: 	movq	%r14, 0x58(%rsp)
    00000333: 	cmpq	$0xf, %r14
    00000337: 	ja	.Ltmp2706 # Offset: 823
    0000033d: 	cmpq	$0x1, %r14
    00000341: 	jne	.Ltmp2707 # Offset: 833
    00000347: 	movq	(%rsp), %rax
    0000034b: 	movzbl	(%rax), %eax
    0000034e: 	movb	%al, 0xd0(%rsp)
    00000355: 	movq	%rbx, %rax
.Ltmp2872:
    00000358: 	movq	%r14, 0xc8(%rsp)
    00000360: 	movb	$0x0, (%rax,%r14)
    00000365: 	movabsq	$0x3fffffffffffffff, %rax
    0000036f: 	subq	0xc8(%rsp), %rax
    00000377: 	cmpq	$0x15, %rax
    0000037b: 	jbe	.Ltmp2708 # Offset: 891
    00000381: 	movl	$0x16, %edx
    00000386: 	leaq	DATAat0x3821b(%rip), %rsi
    0000038d: 	movq	%r12, %rdi
    00000390: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 912
    00000395: 	cvttsd2si	init_value(%rip), %edx
    0000039d: 	movq	%r12, %r8
    000003a0: 	movl	$0x1f40, %esi
    000003a5: 	movq	%rbp, %rdi
    000003a8: 	leaq	_Z18test_goto_loop_optIhET_PKS0_iS0_(%rip), %rcx
    000003af: 	movzbl	%dl, %edx
    000003b2: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 946
    000003b7: 	movq	0xc0(%rsp), %rdi
    000003bf: 	cmpq	%rbx, %rdi
    000003c2: 	je	.Ltmp2709 # Offset: 962
    000003c4: 	movq	0xd0(%rsp), %rax
    000003cc: 	leaq	0x1(%rax), %rsi
    000003d0: 	callq	_ZdlPvm@PLT # Offset: 976
.Ltmp2709:
    000003d5: 	leaq	DATAat0x38232(%rip), %rdx
    000003dc: 	movq	%r13, %rsi
    000003df: 	movq	%r12, %rdi
    000003e2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 994
    000003e7: 	cvttsd2si	init_value(%rip), %edx
    000003ef: 	movq	%r12, %r8
    000003f2: 	movl	$0x1f40, %esi
    000003f7: 	movq	%rbp, %rdi
    000003fa: 	leaq	_Z19test_for_loop_paramIhET_PKS0_iS0_(%rip), %rcx
    00000401: 	movzbl	%dl, %edx
    00000404: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1028
    00000409: 	movq	0xc0(%rsp), %rdi
    00000411: 	cmpq	%rbx, %rdi
    00000414: 	je	.Ltmp2710 # Offset: 1044
    00000416: 	movq	0xd0(%rsp), %rax
    0000041e: 	leaq	0x1(%rax), %rsi
    00000422: 	callq	_ZdlPvm@PLT # Offset: 1058
.Ltmp2710:
    00000427: 	movq	0x60(%rsp), %rax
    0000042c: 	movq	0x68(%rsp), %r14
    00000431: 	movq	%rbx, 0xc0(%rsp)
    00000439: 	movq	%rax, %rcx
    0000043c: 	movq	%rax, (%rsp)
    00000440: 	addq	%r14, %rcx
    00000443: 	je	.Ltmp2711 # Offset: 1091
    00000445: 	testq	%rax, %rax
    00000448: 	je	.Ltmp2712 # Offset: 1096
.Ltmp2711:
    0000044e: 	movq	%r14, 0x58(%rsp)
    00000453: 	cmpq	$0xf, %r14
    00000457: 	ja	.Ltmp2713 # Offset: 1111
    0000045d: 	cmpq	$0x1, %r14
    00000461: 	jne	.Ltmp2714 # Offset: 1121
    00000467: 	movq	(%rsp), %rax
    0000046b: 	movzbl	(%rax), %eax
    0000046e: 	movb	%al, 0xd0(%rsp)
    00000475: 	movq	%rbx, %rax
.Ltmp2880:
    00000478: 	movq	%r14, 0xc8(%rsp)
    00000480: 	movb	$0x0, (%rax,%r14)
    00000485: 	movabsq	$0x3fffffffffffffff, %rax
    0000048f: 	subq	0xc8(%rsp), %rax
    00000497: 	cmpq	$0x17, %rax
    0000049b: 	jbe	.Ltmp2715 # Offset: 1179
    000004a1: 	movl	$0x18, %edx
    000004a6: 	leaq	DATAat0x3824a(%rip), %rsi
    000004ad: 	movq	%r12, %rdi
    000004b0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1200
    000004b5: 	cvttsd2si	init_value(%rip), %edx
    000004bd: 	movq	%r12, %r8
    000004c0: 	movl	$0x1f40, %esi
    000004c5: 	movq	%rbp, %rdi
    000004c8: 	leaq	_Z20test_for_loop_param2IhET_PKS0_iS0_(%rip), %rcx
    000004cf: 	movzbl	%dl, %edx
    000004d2: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1234
    000004d7: 	movq	0xc0(%rsp), %rdi
    000004df: 	cmpq	%rbx, %rdi
    000004e2: 	je	.Ltmp2716 # Offset: 1250
    000004e4: 	movq	0xd0(%rsp), %rax
    000004ec: 	leaq	0x1(%rax), %rsi
    000004f0: 	callq	_ZdlPvm@PLT # Offset: 1264
.Ltmp2716:
    000004f5: 	leaq	DATAat0x38263(%rip), %rdx
    000004fc: 	movq	%r13, %rsi
    000004ff: 	movq	%r12, %rdi
    00000502: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1282
    00000507: 	cvttsd2si	init_value(%rip), %edx
    0000050f: 	movq	%r12, %r8
    00000512: 	movl	$0x1f40, %esi
    00000517: 	movq	%rbp, %rdi
    0000051a: 	leaq	_Z20test_for_loop_param3IhET_PKS0_iS0_(%rip), %rcx
    00000521: 	movzbl	%dl, %edx
    00000524: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1316
    00000529: 	movq	0xc0(%rsp), %rdi
    00000531: 	cmpq	%rbx, %rdi
    00000534: 	je	.Ltmp2717 # Offset: 1332
    00000536: 	movq	0xd0(%rsp), %rax
    0000053e: 	leaq	0x1(%rax), %rsi
    00000542: 	callq	_ZdlPvm@PLT # Offset: 1346
.Ltmp2717:
    00000547: 	leaq	DATAat0x3827c(%rip), %rdx
    0000054e: 	movq	%r13, %rsi
    00000551: 	movq	%r12, %rdi
    00000554: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1364
    00000559: 	cvttsd2si	init_value(%rip), %edx
    00000561: 	movq	%r12, %r8
    00000564: 	movl	$0x1f40, %esi
    00000569: 	movq	%rbp, %rdi
    0000056c: 	leaq	_Z21test_while_loop_paramIhET_PKS0_iS0_(%rip), %rcx
    00000573: 	movzbl	%dl, %edx
    00000576: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1398
    0000057b: 	movq	0xc0(%rsp), %rdi
    00000583: 	cmpq	%rbx, %rdi
    00000586: 	je	.Ltmp2718 # Offset: 1414
    00000588: 	movq	0xd0(%rsp), %rax
    00000590: 	leaq	0x1(%rax), %rsi
    00000594: 	callq	_ZdlPvm@PLT # Offset: 1428
.Ltmp2718:
    00000599: 	leaq	DATAat0x38296(%rip), %rdx
    000005a0: 	movq	%r13, %rsi
    000005a3: 	movq	%r12, %rdi
    000005a6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1446
    000005ab: 	cvttsd2si	init_value(%rip), %edx
    000005b3: 	movq	%r12, %r8
    000005b6: 	movl	$0x1f40, %esi
    000005bb: 	movq	%rbp, %rdi
    000005be: 	leaq	_Z22test_while_loop_param2IhET_PKS0_iS0_(%rip), %rcx
    000005c5: 	movzbl	%dl, %edx
    000005c8: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1480
    000005cd: 	movq	0xc0(%rsp), %rdi
    000005d5: 	cmpq	%rbx, %rdi
    000005d8: 	je	.Ltmp2719 # Offset: 1496
    000005da: 	movq	0xd0(%rsp), %rax
    000005e2: 	leaq	0x1(%rax), %rsi
    000005e6: 	callq	_ZdlPvm@PLT # Offset: 1510
.Ltmp2719:
    000005eb: 	movq	0x60(%rsp), %rax
    000005f0: 	movq	0x68(%rsp), %r14
    000005f5: 	movq	%rbx, 0xc0(%rsp)
    000005fd: 	movq	%rax, %rcx
    00000600: 	movq	%rax, (%rsp)
    00000604: 	addq	%r14, %rcx
    00000607: 	je	.Ltmp2720 # Offset: 1543
    00000609: 	testq	%rax, %rax
    0000060c: 	je	.Ltmp2721 # Offset: 1548
.Ltmp2720:
    00000612: 	movq	%r14, 0x58(%rsp)
    00000617: 	cmpq	$0xf, %r14
    0000061b: 	ja	.Ltmp2722 # Offset: 1563
    00000621: 	cmpq	$0x1, %r14
    00000625: 	jne	.Ltmp2723 # Offset: 1573
    0000062b: 	movq	(%rsp), %rax
    0000062f: 	movzbl	(%rax), %eax
    00000632: 	movb	%al, 0xd0(%rsp)
    00000639: 	movq	%rbx, %rax
.Ltmp2878:
    0000063c: 	movq	%r14, 0xc8(%rsp)
    00000644: 	movb	$0x0, (%rax,%r14)
    00000649: 	movabsq	$0x3fffffffffffffff, %rax
    00000653: 	subq	0xc8(%rsp), %rax
    0000065b: 	cmpq	$0x19, %rax
    0000065f: 	jbe	.Ltmp2724 # Offset: 1631
    00000665: 	movl	$0x1a, %edx
    0000066a: 	leaq	DATAat0x382b1(%rip), %rsi
    00000671: 	movq	%r12, %rdi
    00000674: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1652
    00000679: 	cvttsd2si	init_value(%rip), %edx
    00000681: 	movq	%r12, %r8
    00000684: 	movl	$0x1f40, %esi
    00000689: 	movq	%rbp, %rdi
    0000068c: 	leaq	_Z22test_while_loop_param3IhET_PKS0_iS0_(%rip), %rcx
    00000693: 	movzbl	%dl, %edx
    00000696: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1686
    0000069b: 	movq	0xc0(%rsp), %rdi
    000006a3: 	cmpq	%rbx, %rdi
    000006a6: 	je	.Ltmp2725 # Offset: 1702
    000006a8: 	movq	0xd0(%rsp), %rax
    000006b0: 	leaq	0x1(%rax), %rsi
    000006b4: 	callq	_ZdlPvm@PLT # Offset: 1716
.Ltmp2725:
    000006b9: 	movq	0x60(%rsp), %rax
    000006be: 	movq	0x68(%rsp), %r14
    000006c3: 	movq	%rbx, 0xc0(%rsp)
    000006cb: 	movq	%rax, %rcx
    000006ce: 	movq	%rax, (%rsp)
    000006d2: 	addq	%r14, %rcx
    000006d5: 	je	.Ltmp2726 # Offset: 1749
    000006d7: 	testq	%rax, %rax
    000006da: 	je	.Ltmp2727 # Offset: 1754
.Ltmp2726:
    000006e0: 	movq	%r14, 0x58(%rsp)
    000006e5: 	cmpq	$0xf, %r14
    000006e9: 	ja	.Ltmp2728 # Offset: 1769
    000006ef: 	cmpq	$0x1, %r14
    000006f3: 	jne	.Ltmp2729 # Offset: 1779
    000006f9: 	movq	(%rsp), %rax
    000006fd: 	movzbl	(%rax), %eax
    00000700: 	movb	%al, 0xd0(%rsp)
    00000707: 	movq	%rbx, %rax
.Ltmp2876:
    0000070a: 	movq	%r14, 0xc8(%rsp)
    00000712: 	movb	$0x0, (%rax,%r14)
    00000717: 	movabsq	$0x3fffffffffffffff, %rax
    00000721: 	subq	0xc8(%rsp), %rax
    00000729: 	cmpq	$0x15, %rax
    0000072d: 	jbe	.Ltmp2730 # Offset: 1837
    00000733: 	movl	$0x16, %edx
    00000738: 	leaq	DATAat0x382cc(%rip), %rsi
    0000073f: 	movq	%r12, %rdi
    00000742: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1858
    00000747: 	cvttsd2si	init_value(%rip), %edx
    0000074f: 	movq	%r12, %r8
    00000752: 	movl	$0x1f40, %esi
    00000757: 	movq	%rbp, %rdi
    0000075a: 	leaq	_Z18test_do_loop_paramIhET_PKS0_iS0_(%rip), %rcx
    00000761: 	movzbl	%dl, %edx
    00000764: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1892
    00000769: 	movq	0xc0(%rsp), %rdi
    00000771: 	cmpq	%rbx, %rdi
    00000774: 	je	.Ltmp2731 # Offset: 1908
    00000776: 	movq	0xd0(%rsp), %rax
    0000077e: 	leaq	0x1(%rax), %rsi
    00000782: 	callq	_ZdlPvm@PLT # Offset: 1922
.Ltmp2731:
    00000787: 	leaq	DATAat0x382e3(%rip), %rdx
    0000078e: 	movq	%r13, %rsi
    00000791: 	movq	%r12, %rdi
    00000794: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1940
    00000799: 	cvttsd2si	init_value(%rip), %edx
    000007a1: 	movq	%r12, %r8
    000007a4: 	movl	$0x1f40, %esi
    000007a9: 	movq	%rbp, %rdi
    000007ac: 	leaq	_Z19test_do_loop_param2IhET_PKS0_iS0_(%rip), %rcx
    000007b3: 	movzbl	%dl, %edx
    000007b6: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1974
    000007bb: 	movq	0xc0(%rsp), %rdi
    000007c3: 	cmpq	%rbx, %rdi
    000007c6: 	je	.Ltmp2732 # Offset: 1990
    000007c8: 	movq	0xd0(%rsp), %rax
    000007d0: 	leaq	0x1(%rax), %rsi
    000007d4: 	callq	_ZdlPvm@PLT # Offset: 2004
.Ltmp2732:
    000007d9: 	leaq	DATAat0x382fb(%rip), %rdx
    000007e0: 	movq	%r13, %rsi
    000007e3: 	movq	%r12, %rdi
    000007e6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2022
    000007eb: 	cvttsd2si	init_value(%rip), %edx
    000007f3: 	movq	%r12, %r8
    000007f6: 	movl	$0x1f40, %esi
    000007fb: 	movq	%rbp, %rdi
    000007fe: 	leaq	_Z19test_do_loop_param3IhET_PKS0_iS0_(%rip), %rcx
    00000805: 	movzbl	%dl, %edx
    00000808: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2056
    0000080d: 	movq	0xc0(%rsp), %rdi
    00000815: 	cmpq	%rbx, %rdi
    00000818: 	je	.Ltmp2733 # Offset: 2072
    0000081a: 	movq	0xd0(%rsp), %rax
    00000822: 	leaq	0x1(%rax), %rsi
    00000826: 	callq	_ZdlPvm@PLT # Offset: 2086
.Ltmp2733:
    0000082b: 	leaq	DATAat0x38313(%rip), %rdx
    00000832: 	movq	%r13, %rsi
    00000835: 	movq	%r12, %rdi
    00000838: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2104
    0000083d: 	cvttsd2si	init_value(%rip), %edx
    00000845: 	movq	%r12, %r8
    00000848: 	movl	$0x1f40, %esi
    0000084d: 	movq	%rbp, %rdi
    00000850: 	leaq	_Z20test_goto_loop_paramIhET_PKS0_iS0_(%rip), %rcx
    00000857: 	movzbl	%dl, %edx
    0000085a: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2138
    0000085f: 	movq	0xc0(%rsp), %rdi
    00000867: 	cmpq	%rbx, %rdi
    0000086a: 	je	.Ltmp2734 # Offset: 2154
    0000086c: 	movq	0xd0(%rsp), %rax
    00000874: 	leaq	0x1(%rax), %rsi
    00000878: 	callq	_ZdlPvm@PLT # Offset: 2168
.Ltmp2734:
    0000087d: 	leaq	DATAat0x3832c(%rip), %rdx
    00000884: 	movq	%r13, %rsi
    00000887: 	movq	%r12, %rdi
    0000088a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2186
    0000088f: 	cvttsd2si	init_value(%rip), %edx
    00000897: 	movq	%r12, %r8
    0000089a: 	movl	$0x1f40, %esi
    0000089f: 	movq	%rbp, %rdi
    000008a2: 	leaq	_Z21test_goto_loop_param2IhET_PKS0_iS0_(%rip), %rcx
    000008a9: 	movzbl	%dl, %edx
    000008ac: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2220
    000008b1: 	movq	0xc0(%rsp), %rdi
    000008b9: 	cmpq	%rbx, %rdi
    000008bc: 	je	.Ltmp2735 # Offset: 2236
    000008be: 	movq	0xd0(%rsp), %rax
    000008c6: 	leaq	0x1(%rax), %rsi
    000008ca: 	callq	_ZdlPvm@PLT # Offset: 2250
.Ltmp2735:
    000008cf: 	leaq	DATAat0x38346(%rip), %rdx
    000008d6: 	movq	%r13, %rsi
    000008d9: 	movq	%r12, %rdi
    000008dc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2268
    000008e1: 	cvttsd2si	init_value(%rip), %edx
    000008e9: 	movq	%r12, %r8
    000008ec: 	movl	$0x1f40, %esi
    000008f1: 	movq	%rbp, %rdi
    000008f4: 	leaq	_Z21test_goto_loop_param3IhET_PKS0_iS0_(%rip), %rcx
    000008fb: 	movzbl	%dl, %edx
    000008fe: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2302
    00000903: 	movq	0xc0(%rsp), %rdi
    0000090b: 	cmpq	%rbx, %rdi
    0000090e: 	je	.Ltmp2736 # Offset: 2318
    00000910: 	movq	0xd0(%rsp), %rax
    00000918: 	leaq	0x1(%rax), %rsi
    0000091c: 	callq	_ZdlPvm@PLT # Offset: 2332
.Ltmp2736:
    00000921: 	leaq	DATAat0x38360(%rip), %rdx
    00000928: 	movq	%r13, %rsi
    0000092b: 	movq	%r12, %rdi
    0000092e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2350
    00000933: 	cvttsd2si	init_value(%rip), %edx
    0000093b: 	movq	%r12, %r8
    0000093e: 	movl	$0x1f40, %esi
    00000943: 	movq	%rbp, %rdi
    00000946: 	leaq	_Z20test_for_loop_globalIhET_PKS0_iS0_(%rip), %rcx
    0000094d: 	movzbl	%dl, %edx
    00000950: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2384
    00000955: 	movq	0xc0(%rsp), %rdi
    0000095d: 	cmpq	%rbx, %rdi
    00000960: 	je	.Ltmp2737 # Offset: 2400
    00000962: 	movq	0xd0(%rsp), %rax
    0000096a: 	leaq	0x1(%rax), %rsi
    0000096e: 	callq	_ZdlPvm@PLT # Offset: 2414
.Ltmp2737:
    00000973: 	leaq	DATAat0x38375(%rip), %rdx
    0000097a: 	movq	%r13, %rsi
    0000097d: 	movq	%r12, %rdi
    00000980: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2432
    00000985: 	cvttsd2si	init_value(%rip), %edx
    0000098d: 	movq	%r12, %r8
    00000990: 	movl	$0x1f40, %esi
    00000995: 	movq	%rbp, %rdi
    00000998: 	leaq	_Z21test_for_loop_global2IhET_PKS0_iS0_(%rip), %rcx
    0000099f: 	movzbl	%dl, %edx
    000009a2: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2466
    000009a7: 	movq	0xc0(%rsp), %rdi
    000009af: 	cmpq	%rbx, %rdi
    000009b2: 	je	.Ltmp2738 # Offset: 2482
    000009b4: 	movq	0xd0(%rsp), %rax
    000009bc: 	leaq	0x1(%rax), %rsi
    000009c0: 	callq	_ZdlPvm@PLT # Offset: 2496
.Ltmp2738:
    000009c5: 	movq	0x60(%rsp), %rax
    000009ca: 	movq	0x68(%rsp), %r14
    000009cf: 	movq	%rbx, 0xc0(%rsp)
    000009d7: 	movq	%rax, %rcx
    000009da: 	movq	%rax, (%rsp)
    000009de: 	addq	%r14, %rcx
    000009e1: 	je	.Ltmp2739 # Offset: 2529
    000009e3: 	testq	%rax, %rax
    000009e6: 	je	.Ltmp2740 # Offset: 2534
.Ltmp2739:
    000009ec: 	movq	%r14, 0x58(%rsp)
    000009f1: 	cmpq	$0xf, %r14
    000009f5: 	ja	.Ltmp2741 # Offset: 2549
    000009fb: 	cmpq	$0x1, %r14
    000009ff: 	jne	.Ltmp2742 # Offset: 2559
    00000a05: 	movq	(%rsp), %rax
    00000a09: 	movzbl	(%rax), %eax
    00000a0c: 	movb	%al, 0xd0(%rsp)
    00000a13: 	movq	%rbx, %rax
.Ltmp2874:
    00000a16: 	movq	%r14, 0xc8(%rsp)
    00000a1e: 	movb	$0x0, (%rax,%r14)
    00000a23: 	movabsq	$0x3fffffffffffffff, %rax
    00000a2d: 	subq	0xc8(%rsp), %rax
    00000a35: 	cmpq	$0x14, %rax
    00000a39: 	jbe	.Ltmp2743 # Offset: 2617
    00000a3f: 	movl	$0x15, %edx
    00000a44: 	leaq	DATAat0x3838b(%rip), %rsi
    00000a4b: 	movq	%r12, %rdi
    00000a4e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2638
    00000a53: 	cvttsd2si	init_value(%rip), %edx
    00000a5b: 	movq	%r12, %r8
    00000a5e: 	movl	$0x1f40, %esi
    00000a63: 	movq	%rbp, %rdi
    00000a66: 	leaq	_Z21test_for_loop_global3IhET_PKS0_iS0_(%rip), %rcx
    00000a6d: 	movzbl	%dl, %edx
    00000a70: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2672
    00000a75: 	movq	0xc0(%rsp), %rdi
    00000a7d: 	cmpq	%rbx, %rdi
    00000a80: 	je	.Ltmp2744 # Offset: 2688
    00000a82: 	movq	0xd0(%rsp), %rax
    00000a8a: 	leaq	0x1(%rax), %rsi
    00000a8e: 	callq	_ZdlPvm@PLT # Offset: 2702
.Ltmp2744:
    00000a93: 	leaq	DATAat0x383a1(%rip), %rdx
    00000a9a: 	movq	%r13, %rsi
    00000a9d: 	movq	%r12, %rdi
    00000aa0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2720
    00000aa5: 	cvttsd2si	init_value(%rip), %edx
    00000aad: 	movq	%r12, %r8
    00000ab0: 	movl	$0x1f40, %esi
    00000ab5: 	movq	%rbp, %rdi
    00000ab8: 	leaq	_Z22test_while_loop_globalIhET_PKS0_iS0_(%rip), %rcx
    00000abf: 	movzbl	%dl, %edx
    00000ac2: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2754
    00000ac7: 	movq	0xc0(%rsp), %rdi
    00000acf: 	cmpq	%rbx, %rdi
    00000ad2: 	je	.Ltmp2745 # Offset: 2770
    00000ad4: 	movq	0xd0(%rsp), %rax
    00000adc: 	leaq	0x1(%rax), %rsi
    00000ae0: 	callq	_ZdlPvm@PLT # Offset: 2784
.Ltmp2745:
    00000ae5: 	leaq	DATAat0x383b8(%rip), %rdx
    00000aec: 	movq	%r13, %rsi
    00000aef: 	movq	%r12, %rdi
    00000af2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2802
    00000af7: 	cvttsd2si	init_value(%rip), %edx
    00000aff: 	movq	%r12, %r8
    00000b02: 	movl	$0x1f40, %esi
    00000b07: 	movq	%rbp, %rdi
    00000b0a: 	leaq	_Z23test_while_loop_global2IhET_PKS0_iS0_(%rip), %rcx
    00000b11: 	movzbl	%dl, %edx
    00000b14: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2836
    00000b19: 	movq	0xc0(%rsp), %rdi
    00000b21: 	cmpq	%rbx, %rdi
    00000b24: 	je	.Ltmp2746 # Offset: 2852
    00000b26: 	movq	0xd0(%rsp), %rax
    00000b2e: 	leaq	0x1(%rax), %rsi
    00000b32: 	callq	_ZdlPvm@PLT # Offset: 2866
.Ltmp2746:
    00000b37: 	leaq	DATAat0x383d0(%rip), %rdx
    00000b3e: 	movq	%r13, %rsi
    00000b41: 	movq	%r12, %rdi
    00000b44: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2884
    00000b49: 	cvttsd2si	init_value(%rip), %edx
    00000b51: 	movq	%r12, %r8
    00000b54: 	movl	$0x1f40, %esi
    00000b59: 	movq	%rbp, %rdi
    00000b5c: 	leaq	_Z23test_while_loop_global3IhET_PKS0_iS0_(%rip), %rcx
    00000b63: 	movzbl	%dl, %edx
    00000b66: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2918
    00000b6b: 	movq	0xc0(%rsp), %rdi
    00000b73: 	cmpq	%rbx, %rdi
    00000b76: 	je	.Ltmp2747 # Offset: 2934
    00000b78: 	movq	0xd0(%rsp), %rax
    00000b80: 	leaq	0x1(%rax), %rsi
    00000b84: 	callq	_ZdlPvm@PLT # Offset: 2948
.Ltmp2747:
    00000b89: 	movq	0x60(%rsp), %rax
    00000b8e: 	movq	0x68(%rsp), %r14
    00000b93: 	movq	%rbx, 0xc0(%rsp)
    00000b9b: 	movq	%rax, %rcx
    00000b9e: 	movq	%rax, (%rsp)
    00000ba2: 	addq	%r14, %rcx
    00000ba5: 	je	.Ltmp2748 # Offset: 2981
    00000ba7: 	testq	%rax, %rax
    00000baa: 	je	.Ltmp2749 # Offset: 2986
.Ltmp2748:
    00000bb0: 	movq	%r14, 0x58(%rsp)
    00000bb5: 	cmpq	$0xf, %r14
    00000bb9: 	ja	.Ltmp2750 # Offset: 3001
    00000bbf: 	cmpq	$0x1, %r14
    00000bc3: 	jne	.Ltmp2751 # Offset: 3011
    00000bc9: 	movq	(%rsp), %rax
    00000bcd: 	movzbl	(%rax), %eax
    00000bd0: 	movb	%al, 0xd0(%rsp)
    00000bd7: 	movq	%rbx, %rax
.Ltmp2902:
    00000bda: 	movq	%r14, 0xc8(%rsp)
    00000be2: 	movb	$0x0, (%rax,%r14)
    00000be7: 	movabsq	$0x3fffffffffffffff, %rax
    00000bf1: 	subq	0xc8(%rsp), %rax
    00000bf9: 	cmpq	$0x12, %rax
    00000bfd: 	jbe	.Ltmp2752 # Offset: 3069
    00000c03: 	movl	$0x13, %edx
    00000c08: 	leaq	DATAat0x383e8(%rip), %rsi
    00000c0f: 	movq	%r12, %rdi
    00000c12: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3090
    00000c17: 	cvttsd2si	init_value(%rip), %edx
    00000c1f: 	movq	%r12, %r8
    00000c22: 	movl	$0x1f40, %esi
    00000c27: 	movq	%rbp, %rdi
    00000c2a: 	leaq	_Z19test_do_loop_globalIhET_PKS0_iS0_(%rip), %rcx
    00000c31: 	movzbl	%dl, %edx
    00000c34: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3124
    00000c39: 	movq	0xc0(%rsp), %rdi
    00000c41: 	cmpq	%rbx, %rdi
    00000c44: 	je	.Ltmp2753 # Offset: 3140
    00000c46: 	movq	0xd0(%rsp), %rax
    00000c4e: 	leaq	0x1(%rax), %rsi
    00000c52: 	callq	_ZdlPvm@PLT # Offset: 3154
.Ltmp2753:
    00000c57: 	leaq	DATAat0x383fc(%rip), %rdx
    00000c5e: 	movq	%r13, %rsi
    00000c61: 	movq	%r12, %rdi
    00000c64: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3172
    00000c69: 	cvttsd2si	init_value(%rip), %edx
    00000c71: 	movq	%r12, %r8
    00000c74: 	movl	$0x1f40, %esi
    00000c79: 	movq	%rbp, %rdi
    00000c7c: 	leaq	_Z20test_do_loop_global2IhET_PKS0_iS0_(%rip), %rcx
    00000c83: 	movzbl	%dl, %edx
    00000c86: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3206
    00000c8b: 	movq	0xc0(%rsp), %rdi
    00000c93: 	cmpq	%rbx, %rdi
    00000c96: 	je	.Ltmp2754 # Offset: 3222
    00000c98: 	movq	0xd0(%rsp), %rax
    00000ca0: 	leaq	0x1(%rax), %rsi
    00000ca4: 	callq	_ZdlPvm@PLT # Offset: 3236
.Ltmp2754:
    00000ca9: 	leaq	DATAat0x38411(%rip), %rdx
    00000cb0: 	movq	%r13, %rsi
    00000cb3: 	movq	%r12, %rdi
    00000cb6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3254
    00000cbb: 	cvttsd2si	init_value(%rip), %edx
    00000cc3: 	movq	%r12, %r8
    00000cc6: 	movl	$0x1f40, %esi
    00000ccb: 	movq	%rbp, %rdi
    00000cce: 	leaq	_Z20test_do_loop_global3IhET_PKS0_iS0_(%rip), %rcx
    00000cd5: 	movzbl	%dl, %edx
    00000cd8: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3288
    00000cdd: 	movq	0xc0(%rsp), %rdi
    00000ce5: 	cmpq	%rbx, %rdi
    00000ce8: 	je	.Ltmp2755 # Offset: 3304
    00000cea: 	movq	0xd0(%rsp), %rax
    00000cf2: 	leaq	0x1(%rax), %rsi
    00000cf6: 	callq	_ZdlPvm@PLT # Offset: 3318
.Ltmp2755:
    00000cfb: 	leaq	DATAat0x38426(%rip), %rdx
    00000d02: 	movq	%r13, %rsi
    00000d05: 	movq	%r12, %rdi
    00000d08: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3336
    00000d0d: 	cvttsd2si	init_value(%rip), %edx
    00000d15: 	movq	%r12, %r8
    00000d18: 	movl	$0x1f40, %esi
    00000d1d: 	movq	%rbp, %rdi
    00000d20: 	leaq	_Z21test_goto_loop_globalIhET_PKS0_iS0_(%rip), %rcx
    00000d27: 	movzbl	%dl, %edx
    00000d2a: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3370
    00000d2f: 	movq	0xc0(%rsp), %rdi
    00000d37: 	cmpq	%rbx, %rdi
    00000d3a: 	je	.Ltmp2756 # Offset: 3386
    00000d3c: 	movq	0xd0(%rsp), %rax
    00000d44: 	leaq	0x1(%rax), %rsi
    00000d48: 	callq	_ZdlPvm@PLT # Offset: 3400
.Ltmp2756:
    00000d4d: 	movq	0x60(%rsp), %rax
    00000d52: 	movq	0x68(%rsp), %r14
    00000d57: 	movq	%rbx, 0xc0(%rsp)
    00000d5f: 	movq	%rax, %rcx
    00000d62: 	movq	%rax, (%rsp)
    00000d66: 	addq	%r14, %rcx
    00000d69: 	je	.Ltmp2757 # Offset: 3433
    00000d6b: 	testq	%rax, %rax
    00000d6e: 	je	.Ltmp2758 # Offset: 3438
.Ltmp2757:
    00000d74: 	movq	%r14, 0x58(%rsp)
    00000d79: 	cmpq	$0xf, %r14
    00000d7d: 	ja	.Ltmp2759 # Offset: 3453
    00000d83: 	cmpq	$0x1, %r14
    00000d87: 	jne	.Ltmp2760 # Offset: 3463
    00000d8d: 	movq	(%rsp), %rax
    00000d91: 	movzbl	(%rax), %eax
    00000d94: 	movb	%al, 0xd0(%rsp)
    00000d9b: 	movq	%rbx, %rax
.Ltmp2900:
    00000d9e: 	movq	%r14, 0xc8(%rsp)
    00000da6: 	movb	$0x0, (%rax,%r14)
    00000dab: 	movabsq	$0x3fffffffffffffff, %rax
    00000db5: 	subq	0xc8(%rsp), %rax
    00000dbd: 	cmpq	$0x15, %rax
    00000dc1: 	jbe	.Ltmp2761 # Offset: 3521
    00000dc7: 	movl	$0x16, %edx
    00000dcc: 	leaq	DATAat0x3843c(%rip), %rsi
    00000dd3: 	movq	%r12, %rdi
    00000dd6: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3542
    00000ddb: 	cvttsd2si	init_value(%rip), %edx
    00000de3: 	movq	%r12, %r8
    00000de6: 	movl	$0x1f40, %esi
    00000deb: 	movq	%rbp, %rdi
    00000dee: 	leaq	_Z22test_goto_loop_global2IhET_PKS0_iS0_(%rip), %rcx
    00000df5: 	movzbl	%dl, %edx
    00000df8: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3576
    00000dfd: 	movq	0xc0(%rsp), %rdi
    00000e05: 	cmpq	%rbx, %rdi
    00000e08: 	je	.Ltmp2762 # Offset: 3592
    00000e0a: 	movq	0xd0(%rsp), %rax
    00000e12: 	leaq	0x1(%rax), %rsi
    00000e16: 	callq	_ZdlPvm@PLT # Offset: 3606
.Ltmp2762:
    00000e1b: 	leaq	DATAat0x38453(%rip), %rdx
    00000e22: 	movq	%r13, %rsi
    00000e25: 	movq	%r12, %rdi
    00000e28: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3624
    00000e2d: 	cvttsd2si	init_value(%rip), %edx
    00000e35: 	movq	%r12, %r8
    00000e38: 	movl	$0x1f40, %esi
    00000e3d: 	movq	%rbp, %rdi
    00000e40: 	leaq	_Z22test_goto_loop_global3IhET_PKS0_iS0_(%rip), %rcx
    00000e47: 	movzbl	%dl, %edx
    00000e4a: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3658
    00000e4f: 	movq	0xc0(%rsp), %rdi
    00000e57: 	cmpq	%rbx, %rdi
    00000e5a: 	je	.Ltmp2763 # Offset: 3674
    00000e5c: 	movq	0xd0(%rsp), %rax
    00000e64: 	leaq	0x1(%rax), %rsi
    00000e68: 	callq	_ZdlPvm@PLT # Offset: 3688
.Ltmp2763:
    00000e6d: 	leaq	0x90(%rsp), %rax
    00000e75: 	movq	0x68(%rsp), %r14
    00000e7a: 	movq	%rax, (%rsp)
    00000e7e: 	movq	%rax, 0x80(%rsp)
    00000e86: 	movq	0x60(%rsp), %rax
    00000e8b: 	movq	%rax, %rcx
    00000e8e: 	movq	%rax, 0x8(%rsp)
    00000e93: 	addq	%r14, %rcx
    00000e96: 	je	.Ltmp2764 # Offset: 3734
    00000e98: 	testq	%rax, %rax
    00000e9b: 	je	.Ltmp2765 # Offset: 3739
.Ltmp2764:
    00000ea1: 	movq	%r14, 0x58(%rsp)
    00000ea6: 	cmpq	$0xf, %r14
    00000eaa: 	ja	.Ltmp2766 # Offset: 3754
    00000eb0: 	cmpq	$0x1, %r14
    00000eb4: 	jne	.Ltmp2767 # Offset: 3764
    00000eba: 	movq	0x8(%rsp), %rax
    00000ebf: 	movzbl	(%rax), %eax
    00000ec2: 	movb	%al, 0x90(%rsp)
    00000ec9: 	movq	(%rsp), %rax
.Ltmp2898:
    00000ecd: 	movq	%r14, 0x88(%rsp)
    00000ed5: 	movb	$0x0, (%rax,%r14)
    00000eda: 	movabsq	$0x3fffffffffffffff, %rax
    00000ee4: 	subq	0x88(%rsp), %rax
    00000eec: 	cmpq	$0x10, %rax
    00000ef0: 	jbe	.Ltmp2768 # Offset: 3824
    00000ef6: 	leaq	0x80(%rsp), %rdi
    00000efe: 	movl	$0x11, %edx
    00000f03: 	leaq	DATAat0x3846a(%rip), %rsi
    00000f0a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3850
    00000f0f: 	movl	iterations(%rip), %edx
    00000f15: 	xorl	%r8d, %r8d
    00000f18: 	xorl	%ecx, %ecx
    00000f1a: 	movl	$0x1f40, %esi
    00000f1f: 	movq	0x80(%rsp), %rdi
    00000f27: 	callq	_Z9summarizePKciiii # Offset: 3879
    00000f2c: 	leaq	DATAat0x3847c(%rip), %rdx
    00000f33: 	movq	%r13, %rsi
    00000f36: 	movq	%r12, %rdi
    00000f39: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3897
    00000f3e: 	movq	%r12, %r8
    00000f41: 	movq	%r15, %rcx
    00000f44: 	movl	$0x1f40, %esi
    00000f49: 	movq	%rbp, %rdi
    00000f4c: 	cvttsd2si	init_value(%rip), %edx
    00000f54: 	movzbl	%dl, %edx
    00000f57: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3927
    00000f5c: 	movq	0xc0(%rsp), %rdi
    00000f64: 	cmpq	%rbx, %rdi
    00000f67: 	je	.Ltmp2769 # Offset: 3943
    00000f69: 	movq	0xd0(%rsp), %rax
    00000f71: 	leaq	0x1(%rax), %rsi
    00000f75: 	callq	_ZdlPvm@PLT # Offset: 3957
.Ltmp2769:
    00000f7a: 	leaq	DATAat0x38493(%rip), %rdx
    00000f81: 	movq	%r13, %rsi
    00000f84: 	movq	%r12, %rdi
    00000f87: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3975
    00000f8c: 	cvttsd2si	init_value(%rip), %edx
    00000f94: 	movq	%r12, %r8
    00000f97: 	movl	$0x1f40, %esi
    00000f9c: 	movq	%rbp, %rdi
    00000f9f: 	leaq	_Z19test_while_loop_optIhET_PKS0_iS0_(%rip), %rcx
    00000fa6: 	movzbl	%dl, %edx
    00000fa9: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4009
    00000fae: 	movq	0xc0(%rsp), %rdi
    00000fb6: 	cmpq	%rbx, %rdi
    00000fb9: 	je	.Ltmp2770 # Offset: 4025
    00000fbb: 	movq	0xd0(%rsp), %rax
    00000fc3: 	leaq	0x1(%rax), %rsi
    00000fc7: 	callq	_ZdlPvm@PLT # Offset: 4039
.Ltmp2770:
    00000fcc: 	movq	0x60(%rsp), %r15
    00000fd1: 	movq	0x68(%rsp), %r14
    00000fd6: 	movq	%rbx, 0xc0(%rsp)
    00000fde: 	movq	%r15, %rax
    00000fe1: 	addq	%r14, %rax
    00000fe4: 	je	.Ltmp2771 # Offset: 4068
    00000fe6: 	testq	%r15, %r15
    00000fe9: 	je	.Ltmp2772 # Offset: 4073
.Ltmp2771:
    00000fef: 	movq	%r14, 0x58(%rsp)
    00000ff4: 	cmpq	$0xf, %r14
    00000ff8: 	ja	.Ltmp2773 # Offset: 4088
    00000ffe: 	cmpq	$0x1, %r14
    00001002: 	jne	.Ltmp2774 # Offset: 4098
    00001008: 	movzbl	(%r15), %eax
    0000100c: 	movb	%al, 0xd0(%rsp)
    00001013: 	movq	%rbx, %rax
.Ltmp2896:
    00001016: 	movq	%r14, 0xc8(%rsp)
    0000101e: 	movb	$0x0, (%rax,%r14)
    00001023: 	movabsq	$0x3fffffffffffffff, %rax
    0000102d: 	subq	0xc8(%rsp), %rax
    00001035: 	cmpq	$0x14, %rax
    00001039: 	jbe	.Ltmp2775 # Offset: 4153
    0000103f: 	movl	$0x15, %edx
    00001044: 	leaq	DATAat0x384ac(%rip), %rsi
    0000104b: 	movq	%r12, %rdi
    0000104e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4174
    00001053: 	cvttsd2si	init_value(%rip), %edx
    0000105b: 	movq	%r12, %r8
    0000105e: 	movl	$0x1f40, %esi
    00001063: 	movq	%rbp, %rdi
    00001066: 	leaq	_Z16test_do_loop_optIhET_PKS0_iS0_(%rip), %rcx
    0000106d: 	movzbl	%dl, %edx
    00001070: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4208
    00001075: 	movq	0xc0(%rsp), %rdi
    0000107d: 	cmpq	%rbx, %rdi
    00001080: 	je	.Ltmp2776 # Offset: 4224
    00001082: 	movq	0xd0(%rsp), %rax
    0000108a: 	leaq	0x1(%rax), %rsi
    0000108e: 	callq	_ZdlPvm@PLT # Offset: 4238
.Ltmp2776:
    00001093: 	movq	0x60(%rsp), %r15
    00001098: 	movq	0x68(%rsp), %r14
    0000109d: 	movq	%rbx, 0xc0(%rsp)
    000010a5: 	movq	%r15, %rax
    000010a8: 	addq	%r14, %rax
    000010ab: 	je	.Ltmp2777 # Offset: 4267
    000010ad: 	testq	%r15, %r15
    000010b0: 	je	.Ltmp2778 # Offset: 4272
.Ltmp2777:
    000010b6: 	movq	%r14, 0x58(%rsp)
    000010bb: 	cmpq	$0xf, %r14
    000010bf: 	ja	.Ltmp2779 # Offset: 4287
    000010c5: 	cmpq	$0x1, %r14
    000010c9: 	jne	.Ltmp2780 # Offset: 4297
    000010cf: 	movzbl	(%r15), %eax
    000010d3: 	movb	%al, 0xd0(%rsp)
    000010da: 	movq	%rbx, %rax
.Ltmp2894:
    000010dd: 	movq	%r14, 0xc8(%rsp)
    000010e5: 	movb	$0x0, (%rax,%r14)
    000010ea: 	movabsq	$0x3fffffffffffffff, %rax
    000010f4: 	subq	0xc8(%rsp), %rax
    000010fc: 	cmpq	$0x16, %rax
    00001100: 	jbe	.Ltmp2781 # Offset: 4352
    00001106: 	movl	$0x17, %edx
    0000110b: 	leaq	DATAat0x384c2(%rip), %rsi
    00001112: 	movq	%r12, %rdi
    00001115: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4373
    0000111a: 	cvttsd2si	init_value(%rip), %edx
    00001122: 	movq	%r12, %r8
    00001125: 	movl	$0x1f40, %esi
    0000112a: 	movq	%rbp, %rdi
    0000112d: 	leaq	_Z18test_goto_loop_optIhET_PKS0_iS0_(%rip), %rcx
    00001134: 	movzbl	%dl, %edx
    00001137: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4407
    0000113c: 	movq	0xc0(%rsp), %rdi
    00001144: 	cmpq	%rbx, %rdi
    00001147: 	je	.Ltmp2782 # Offset: 4423
    00001149: 	movq	0xd0(%rsp), %rax
    00001151: 	leaq	0x1(%rax), %rsi
    00001155: 	callq	_ZdlPvm@PLT # Offset: 4437
.Ltmp2782:
    0000115a: 	leaq	DATAat0x384da(%rip), %rdx
    00001161: 	movq	%r13, %rsi
    00001164: 	movq	%r12, %rdi
    00001167: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4455
    0000116c: 	cvttsd2si	init_value(%rip), %edx
    00001174: 	movq	%r12, %r8
    00001177: 	movl	$0x1f40, %esi
    0000117c: 	movq	%rbp, %rdi
    0000117f: 	leaq	_Z20test_for_loop2_paramIhET_PKS0_iS0_(%rip), %rcx
    00001186: 	movzbl	%dl, %edx
    00001189: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4489
    0000118e: 	movq	0xc0(%rsp), %rdi
    00001196: 	cmpq	%rbx, %rdi
    00001199: 	je	.Ltmp2783 # Offset: 4505
    0000119b: 	movq	0xd0(%rsp), %rax
    000011a3: 	leaq	0x1(%rax), %rsi
    000011a7: 	callq	_ZdlPvm@PLT # Offset: 4519
.Ltmp2783:
    000011ac: 	movq	0x60(%rsp), %r15
    000011b1: 	movq	0x68(%rsp), %r14
    000011b6: 	movq	%rbx, 0xc0(%rsp)
    000011be: 	movq	%r15, %rax
    000011c1: 	addq	%r14, %rax
    000011c4: 	je	.Ltmp2784 # Offset: 4548
    000011c6: 	testq	%r15, %r15
    000011c9: 	je	.Ltmp2785 # Offset: 4553
.Ltmp2784:
    000011cf: 	movq	%r14, 0x58(%rsp)
    000011d4: 	cmpq	$0xf, %r14
    000011d8: 	ja	.Ltmp2786 # Offset: 4568
    000011de: 	cmpq	$0x1, %r14
    000011e2: 	jne	.Ltmp2787 # Offset: 4578
    000011e8: 	movzbl	(%r15), %eax
    000011ec: 	movb	%al, 0xd0(%rsp)
    000011f3: 	movq	%rbx, %rax
.Ltmp2892:
    000011f6: 	movq	%r14, 0xc8(%rsp)
    000011fe: 	movb	$0x0, (%rax,%r14)
    00001203: 	movabsq	$0x3fffffffffffffff, %rax
    0000120d: 	subq	0xc8(%rsp), %rax
    00001215: 	cmpq	$0x18, %rax
    00001219: 	jbe	.Ltmp2788 # Offset: 4633
    0000121f: 	movl	$0x19, %edx
    00001224: 	leaq	DATAat0x384f3(%rip), %rsi
    0000122b: 	movq	%r12, %rdi
    0000122e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4654
    00001233: 	cvttsd2si	init_value(%rip), %edx
    0000123b: 	movq	%r12, %r8
    0000123e: 	movl	$0x1f40, %esi
    00001243: 	movq	%rbp, %rdi
    00001246: 	leaq	_Z21test_for_loop2_param2IhET_PKS0_iS0_(%rip), %rcx
    0000124d: 	movzbl	%dl, %edx
    00001250: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4688
    00001255: 	movq	0xc0(%rsp), %rdi
    0000125d: 	cmpq	%rbx, %rdi
    00001260: 	je	.Ltmp2789 # Offset: 4704
    00001262: 	movq	0xd0(%rsp), %rax
    0000126a: 	leaq	0x1(%rax), %rsi
    0000126e: 	callq	_ZdlPvm@PLT # Offset: 4718
.Ltmp2789:
    00001273: 	leaq	DATAat0x3850d(%rip), %rdx
    0000127a: 	movq	%r13, %rsi
    0000127d: 	movq	%r12, %rdi
    00001280: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4736
    00001285: 	cvttsd2si	init_value(%rip), %edx
    0000128d: 	movq	%r12, %r8
    00001290: 	movl	$0x1f40, %esi
    00001295: 	movq	%rbp, %rdi
    00001298: 	leaq	_Z22test_while_loop2_paramIhET_PKS0_iS0_(%rip), %rcx
    0000129f: 	movzbl	%dl, %edx
    000012a2: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4770
    000012a7: 	movq	0xc0(%rsp), %rdi
    000012af: 	cmpq	%rbx, %rdi
    000012b2: 	je	.Ltmp2790 # Offset: 4786
    000012b4: 	movq	0xd0(%rsp), %rax
    000012bc: 	leaq	0x1(%rax), %rsi
    000012c0: 	callq	_ZdlPvm@PLT # Offset: 4800
.Ltmp2790:
    000012c5: 	movq	0x60(%rsp), %r15
    000012ca: 	movq	0x68(%rsp), %r14
    000012cf: 	movq	%rbx, 0xc0(%rsp)
    000012d7: 	movq	%r15, %rax
    000012da: 	addq	%r14, %rax
    000012dd: 	je	.Ltmp2791 # Offset: 4829
    000012df: 	testq	%r15, %r15
    000012e2: 	je	.Ltmp2792 # Offset: 4834
.Ltmp2791:
    000012e8: 	movq	%r14, 0x58(%rsp)
    000012ed: 	cmpq	$0xf, %r14
    000012f1: 	ja	.Ltmp2793 # Offset: 4849
    000012f7: 	cmpq	$0x1, %r14
    000012fb: 	jne	.Ltmp2794 # Offset: 4859
    00001301: 	movzbl	(%r15), %eax
    00001305: 	movb	%al, 0xd0(%rsp)
    0000130c: 	movq	%rbx, %rax
.Ltmp2890:
    0000130f: 	movq	%r14, 0xc8(%rsp)
    00001317: 	movb	$0x0, (%rax,%r14)
    0000131c: 	movabsq	$0x3fffffffffffffff, %rax
    00001326: 	subq	0xc8(%rsp), %rax
    0000132e: 	cmpq	$0x1a, %rax
    00001332: 	jbe	.Ltmp2795 # Offset: 4914
    00001338: 	movl	$0x1b, %edx
    0000133d: 	leaq	DATAat0x38528(%rip), %rsi
    00001344: 	movq	%r12, %rdi
    00001347: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4935
    0000134c: 	cvttsd2si	init_value(%rip), %edx
    00001354: 	movq	%r12, %r8
    00001357: 	movl	$0x1f40, %esi
    0000135c: 	movq	%rbp, %rdi
    0000135f: 	leaq	_Z23test_while_loop2_param2IhET_PKS0_iS0_(%rip), %rcx
    00001366: 	movzbl	%dl, %edx
    00001369: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4969
    0000136e: 	movq	0xc0(%rsp), %rdi
    00001376: 	cmpq	%rbx, %rdi
    00001379: 	je	.Ltmp2796 # Offset: 4985
    0000137b: 	movq	0xd0(%rsp), %rax
    00001383: 	leaq	0x1(%rax), %rsi
    00001387: 	callq	_ZdlPvm@PLT # Offset: 4999
.Ltmp2796:
    0000138c: 	leaq	DATAat0x38544(%rip), %rdx
    00001393: 	movq	%r13, %rsi
    00001396: 	movq	%r12, %rdi
    00001399: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5017
    0000139e: 	cvttsd2si	init_value(%rip), %edx
    000013a6: 	movq	%r12, %r8
    000013a9: 	movl	$0x1f40, %esi
    000013ae: 	movq	%rbp, %rdi
    000013b1: 	leaq	_Z19test_do_loop2_paramIhET_PKS0_iS0_(%rip), %rcx
    000013b8: 	movzbl	%dl, %edx
    000013bb: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5051
    000013c0: 	movq	0xc0(%rsp), %rdi
    000013c8: 	cmpq	%rbx, %rdi
    000013cb: 	je	.Ltmp2797 # Offset: 5067
    000013cd: 	movq	0xd0(%rsp), %rax
    000013d5: 	leaq	0x1(%rax), %rsi
    000013d9: 	callq	_ZdlPvm@PLT # Offset: 5081
.Ltmp2797:
    000013de: 	movq	0x60(%rsp), %r15
    000013e3: 	movq	0x68(%rsp), %r14
    000013e8: 	movq	%rbx, 0xc0(%rsp)
    000013f0: 	movq	%r15, %rax
    000013f3: 	addq	%r14, %rax
    000013f6: 	je	.Ltmp2798 # Offset: 5110
    000013f8: 	testq	%r15, %r15
    000013fb: 	je	.Ltmp2799 # Offset: 5115
.Ltmp2798:
    00001401: 	movq	%r14, 0x58(%rsp)
    00001406: 	cmpq	$0xf, %r14
    0000140a: 	ja	.Ltmp2800 # Offset: 5130
    00001410: 	cmpq	$0x1, %r14
    00001414: 	jne	.Ltmp2801 # Offset: 5140
    0000141a: 	movzbl	(%r15), %eax
    0000141e: 	movb	%al, 0xd0(%rsp)
    00001425: 	movq	%rbx, %rax
.Ltmp2888:
    00001428: 	movq	%r14, 0xc8(%rsp)
    00001430: 	movb	$0x0, (%rax,%r14)
    00001435: 	movabsq	$0x3fffffffffffffff, %rax
    0000143f: 	subq	0xc8(%rsp), %rax
    00001447: 	cmpq	$0x17, %rax
    0000144b: 	jbe	.Ltmp2802 # Offset: 5195
    00001451: 	movl	$0x18, %edx
    00001456: 	leaq	DATAat0x3855c(%rip), %rsi
    0000145d: 	movq	%r12, %rdi
    00001460: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5216
    00001465: 	cvttsd2si	init_value(%rip), %edx
    0000146d: 	movq	%r12, %r8
    00001470: 	movl	$0x1f40, %esi
    00001475: 	movq	%rbp, %rdi
    00001478: 	leaq	_Z20test_do_loop2_param2IhET_PKS0_iS0_(%rip), %rcx
    0000147f: 	movzbl	%dl, %edx
    00001482: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5250
    00001487: 	movq	0xc0(%rsp), %rdi
    0000148f: 	cmpq	%rbx, %rdi
    00001492: 	je	.Ltmp2803 # Offset: 5266
    00001494: 	movq	0xd0(%rsp), %rax
    0000149c: 	leaq	0x1(%rax), %rsi
    000014a0: 	callq	_ZdlPvm@PLT # Offset: 5280
.Ltmp2803:
    000014a5: 	leaq	DATAat0x38575(%rip), %rdx
    000014ac: 	movq	%r13, %rsi
    000014af: 	movq	%r12, %rdi
    000014b2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5298
    000014b7: 	cvttsd2si	init_value(%rip), %edx
    000014bf: 	movq	%r12, %r8
    000014c2: 	movl	$0x1f40, %esi
    000014c7: 	movq	%rbp, %rdi
    000014ca: 	leaq	_Z21test_goto_loop2_paramIhET_PKS0_iS0_(%rip), %rcx
    000014d1: 	movzbl	%dl, %edx
    000014d4: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5332
    000014d9: 	movq	0xc0(%rsp), %rdi
    000014e1: 	cmpq	%rbx, %rdi
    000014e4: 	je	.Ltmp2804 # Offset: 5348
    000014e6: 	movq	0xd0(%rsp), %rax
    000014ee: 	leaq	0x1(%rax), %rsi
    000014f2: 	callq	_ZdlPvm@PLT # Offset: 5362
.Ltmp2804:
    000014f7: 	leaq	DATAat0x3858f(%rip), %rdx
    000014fe: 	movq	%r13, %rsi
    00001501: 	movq	%r12, %rdi
    00001504: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5380
    00001509: 	cvttsd2si	init_value(%rip), %edx
    00001511: 	movq	%r12, %r8
    00001514: 	movl	$0x1f40, %esi
    00001519: 	movq	%rbp, %rdi
    0000151c: 	leaq	_Z22test_goto_loop2_param2IhET_PKS0_iS0_(%rip), %rcx
    00001523: 	movzbl	%dl, %edx
    00001526: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5414
    0000152b: 	movq	0xc0(%rsp), %rdi
    00001533: 	cmpq	%rbx, %rdi
    00001536: 	je	.Ltmp2805 # Offset: 5430
    00001538: 	movq	0xd0(%rsp), %rax
    00001540: 	leaq	0x1(%rax), %rsi
    00001544: 	callq	_ZdlPvm@PLT # Offset: 5444
.Ltmp2805:
    00001549: 	movq	0x60(%rsp), %r15
    0000154e: 	movq	0x68(%rsp), %r14
    00001553: 	movq	%rbx, 0xc0(%rsp)
    0000155b: 	movq	%r15, %rax
    0000155e: 	addq	%r14, %rax
    00001561: 	je	.Ltmp2806 # Offset: 5473
    00001563: 	testq	%r15, %r15
    00001566: 	je	.Ltmp2807 # Offset: 5478
.Ltmp2806:
    0000156c: 	movq	%r14, 0x58(%rsp)
    00001571: 	cmpq	$0xf, %r14
    00001575: 	ja	.Ltmp2808 # Offset: 5493
    0000157b: 	cmpq	$0x1, %r14
    0000157f: 	jne	.Ltmp2809 # Offset: 5503
    00001585: 	movzbl	(%r15), %eax
    00001589: 	movb	%al, 0xd0(%rsp)
    00001590: 	movq	%rbx, %rax
.Ltmp2886:
    00001593: 	movq	%r14, 0xc8(%rsp)
    0000159b: 	movb	$0x0, (%rax,%r14)
    000015a0: 	movabsq	$0x3fffffffffffffff, %rax
    000015aa: 	subq	0xc8(%rsp), %rax
    000015b2: 	cmpq	$0x14, %rax
    000015b6: 	jbe	.Ltmp2810 # Offset: 5558
    000015bc: 	movl	$0x15, %edx
    000015c1: 	leaq	DATAat0x385aa(%rip), %rsi
    000015c8: 	movq	%r12, %rdi
    000015cb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5579
    000015d0: 	cvttsd2si	init_value(%rip), %edx
    000015d8: 	movq	%r12, %r8
    000015db: 	movl	$0x1f40, %esi
    000015e0: 	movq	%rbp, %rdi
    000015e3: 	leaq	_Z21test_for_loop2_globalIhET_PKS0_iS0_(%rip), %rcx
    000015ea: 	movzbl	%dl, %edx
    000015ed: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5613
    000015f2: 	movq	0xc0(%rsp), %rdi
    000015fa: 	cmpq	%rbx, %rdi
    000015fd: 	je	.Ltmp2811 # Offset: 5629
    000015ff: 	movq	0xd0(%rsp), %rax
    00001607: 	leaq	0x1(%rax), %rsi
    0000160b: 	callq	_ZdlPvm@PLT # Offset: 5643
.Ltmp2811:
    00001610: 	leaq	DATAat0x385c0(%rip), %rdx
    00001617: 	movq	%r13, %rsi
    0000161a: 	movq	%r12, %rdi
    0000161d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5661
    00001622: 	cvttsd2si	init_value(%rip), %edx
    0000162a: 	movq	%r12, %r8
    0000162d: 	movl	$0x1f40, %esi
    00001632: 	movq	%rbp, %rdi
    00001635: 	leaq	_Z22test_for_loop2_global2IhET_PKS0_iS0_(%rip), %rcx
    0000163c: 	movzbl	%dl, %edx
    0000163f: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5695
    00001644: 	movq	0xc0(%rsp), %rdi
    0000164c: 	cmpq	%rbx, %rdi
    0000164f: 	je	.Ltmp2812 # Offset: 5711
    00001651: 	movq	0xd0(%rsp), %rax
    00001659: 	leaq	0x1(%rax), %rsi
    0000165d: 	callq	_ZdlPvm@PLT # Offset: 5725
.Ltmp2812:
    00001662: 	leaq	DATAat0x385d7(%rip), %rdx
    00001669: 	movq	%r13, %rsi
    0000166c: 	movq	%r12, %rdi
    0000166f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5743
    00001674: 	cvttsd2si	init_value(%rip), %edx
    0000167c: 	movq	%r12, %r8
    0000167f: 	movl	$0x1f40, %esi
    00001684: 	movq	%rbp, %rdi
    00001687: 	leaq	_Z23test_while_loop2_globalIhET_PKS0_iS0_(%rip), %rcx
    0000168e: 	movzbl	%dl, %edx
    00001691: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5777
    00001696: 	movq	0xc0(%rsp), %rdi
    0000169e: 	cmpq	%rbx, %rdi
    000016a1: 	je	.Ltmp2813 # Offset: 5793
    000016a3: 	movq	0xd0(%rsp), %rax
    000016ab: 	leaq	0x1(%rax), %rsi
    000016af: 	callq	_ZdlPvm@PLT # Offset: 5807
.Ltmp2813:
    000016b4: 	leaq	DATAat0x385ef(%rip), %rdx
    000016bb: 	movq	%r13, %rsi
    000016be: 	movq	%r12, %rdi
    000016c1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5825
    000016c6: 	cvttsd2si	init_value(%rip), %edx
    000016ce: 	movq	%r12, %r8
    000016d1: 	movl	$0x1f40, %esi
    000016d6: 	movq	%rbp, %rdi
    000016d9: 	leaq	_Z24test_while_loop2_global2IhET_PKS0_iS0_(%rip), %rcx
    000016e0: 	movzbl	%dl, %edx
    000016e3: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5859
    000016e8: 	movq	0xc0(%rsp), %rdi
    000016f0: 	cmpq	%rbx, %rdi
    000016f3: 	je	.Ltmp2814 # Offset: 5875
    000016f5: 	movq	0xd0(%rsp), %rax
    000016fd: 	leaq	0x1(%rax), %rsi
    00001701: 	callq	_ZdlPvm@PLT # Offset: 5889
.Ltmp2814:
    00001706: 	leaq	DATAat0x38608(%rip), %rdx
    0000170d: 	movq	%r13, %rsi
    00001710: 	movq	%r12, %rdi
    00001713: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5907
    00001718: 	cvttsd2si	init_value(%rip), %edx
    00001720: 	movq	%r12, %r8
    00001723: 	movl	$0x1f40, %esi
    00001728: 	movq	%rbp, %rdi
    0000172b: 	leaq	_Z20test_do_loop2_globalIhET_PKS0_iS0_(%rip), %rcx
    00001732: 	movzbl	%dl, %edx
    00001735: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5941
    0000173a: 	movq	0xc0(%rsp), %rdi
    00001742: 	cmpq	%rbx, %rdi
    00001745: 	je	.Ltmp2815 # Offset: 5957
    00001747: 	movq	0xd0(%rsp), %rax
    0000174f: 	leaq	0x1(%rax), %rsi
    00001753: 	callq	_ZdlPvm@PLT # Offset: 5971
.Ltmp2815:
    00001758: 	leaq	DATAat0x3861d(%rip), %rdx
    0000175f: 	movq	%r13, %rsi
    00001762: 	movq	%r12, %rdi
    00001765: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5989
    0000176a: 	cvttsd2si	init_value(%rip), %edx
    00001772: 	movq	%r12, %r8
    00001775: 	movl	$0x1f40, %esi
    0000177a: 	movq	%rbp, %rdi
    0000177d: 	leaq	_Z21test_do_loop2_global2IhET_PKS0_iS0_(%rip), %rcx
    00001784: 	movzbl	%dl, %edx
    00001787: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6023
    0000178c: 	movq	0xc0(%rsp), %rdi
    00001794: 	cmpq	%rbx, %rdi
    00001797: 	je	.Ltmp2816 # Offset: 6039
    00001799: 	movq	0xd0(%rsp), %rax
    000017a1: 	leaq	0x1(%rax), %rsi
    000017a5: 	callq	_ZdlPvm@PLT # Offset: 6053
.Ltmp2816:
    000017aa: 	movq	0x60(%rsp), %r15
    000017af: 	movq	0x68(%rsp), %r14
    000017b4: 	movq	%rbx, 0xc0(%rsp)
    000017bc: 	movq	%r15, %rax
    000017bf: 	addq	%r14, %rax
    000017c2: 	je	.Ltmp2817 # Offset: 6082
    000017c4: 	testq	%r15, %r15
    000017c7: 	je	.Ltmp2818 # Offset: 6087
.Ltmp2817:
    000017cd: 	movq	%r14, 0x58(%rsp)
    000017d2: 	cmpq	$0xf, %r14
    000017d6: 	ja	.Ltmp2819 # Offset: 6102
    000017dc: 	cmpq	$0x1, %r14
    000017e0: 	jne	.Ltmp2820 # Offset: 6112
    000017e6: 	movzbl	(%r15), %eax
    000017ea: 	movb	%al, 0xd0(%rsp)
    000017f1: 	movq	%rbx, %rax
.Ltmp2884:
    000017f4: 	movq	%r14, 0xc8(%rsp)
    000017fc: 	movb	$0x0, (%rax,%r14)
    00001801: 	movabsq	$0x3fffffffffffffff, %rax
    0000180b: 	subq	0xc8(%rsp), %rax
    00001813: 	cmpq	$0x15, %rax
    00001817: 	jbe	.Ltmp2821 # Offset: 6167
    0000181d: 	movl	$0x16, %edx
    00001822: 	leaq	DATAat0x38633(%rip), %rsi
    00001829: 	movq	%r12, %rdi
    0000182c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6188
    00001831: 	cvttsd2si	init_value(%rip), %edx
    00001839: 	movq	%r12, %r8
    0000183c: 	movl	$0x1f40, %esi
    00001841: 	movq	%rbp, %rdi
    00001844: 	leaq	_Z22test_goto_loop2_globalIhET_PKS0_iS0_(%rip), %rcx
    0000184b: 	movzbl	%dl, %edx
    0000184e: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6222
    00001853: 	movq	0xc0(%rsp), %rdi
    0000185b: 	cmpq	%rbx, %rdi
    0000185e: 	je	.Ltmp2822 # Offset: 6238
    00001860: 	movq	0xd0(%rsp), %rax
    00001868: 	leaq	0x1(%rax), %rsi
    0000186c: 	callq	_ZdlPvm@PLT # Offset: 6252
.Ltmp2822:
    00001871: 	leaq	DATAat0x3864a(%rip), %rdx
    00001878: 	movq	%r13, %rsi
    0000187b: 	movq	%r12, %rdi
    0000187e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6270
    00001883: 	cvttsd2si	init_value(%rip), %edx
    0000188b: 	movq	%r12, %r8
    0000188e: 	movl	$0x1f40, %esi
    00001893: 	movq	%rbp, %rdi
    00001896: 	leaq	_Z23test_goto_loop2_global2IhET_PKS0_iS0_(%rip), %rcx
    0000189d: 	movzbl	%dl, %edx
    000018a0: 	callq	_Z13test_one_loopIhPFhPKhihEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6304
    000018a5: 	movq	0xc0(%rsp), %rdi
    000018ad: 	cmpq	%rbx, %rdi
    000018b0: 	je	.Ltmp2823 # Offset: 6320
    000018b2: 	movq	0xd0(%rsp), %rax
    000018ba: 	leaq	0x1(%rax), %rsi
    000018be: 	callq	_ZdlPvm@PLT # Offset: 6334
.Ltmp2823:
    000018c3: 	leaq	0xa0(%rsp), %rdi
    000018cb: 	leaq	DATAat0x38662(%rip), %rdx
    000018d2: 	movq	%r13, %rsi
    000018d5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6357
    000018da: 	movl	iterations(%rip), %edx
    000018e0: 	xorl	%r8d, %r8d
    000018e3: 	xorl	%ecx, %ecx
    000018e5: 	movl	$0x1f40, %esi
    000018ea: 	movq	0xa0(%rsp), %rdi
    000018f2: 	callq	_Z9summarizePKciiii # Offset: 6386
    000018f7: 	leaq	DATAat0x38675(%rip), %rdx
    000018fe: 	movq	%r13, %rsi
    00001901: 	movq	%r12, %rdi
    00001904: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6404
    00001909: 	movq	%r12, %r8
    0000190c: 	movl	$0x7d0, %edx
    00001911: 	movl	$0x1f40, %esi
    00001916: 	movq	%rbp, %rdi
    00001919: 	leaq	_Z18test_for_loop3_optIhET_PKS0_iS0_(%rip), %rcx
    00001920: 	callq	_Z14test_one_loop3IhPFhPKhihEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6432
    00001925: 	movq	0xc0(%rsp), %rdi
    0000192d: 	cmpq	%rbx, %rdi
    00001930: 	je	.Ltmp2824 # Offset: 6448
    00001932: 	movq	0xd0(%rsp), %rax
    0000193a: 	leaq	0x1(%rax), %rsi
    0000193e: 	callq	_ZdlPvm@PLT # Offset: 6462
.Ltmp2824:
    00001943: 	leaq	DATAat0x3868c(%rip), %rdx
    0000194a: 	movq	%r13, %rsi
    0000194d: 	movq	%r12, %rdi
    00001950: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6480
    00001955: 	movq	%r12, %r8
    00001958: 	movl	$0x7d0, %edx
    0000195d: 	movl	$0x1f40, %esi
    00001962: 	movq	%rbp, %rdi
    00001965: 	leaq	_Z22test_for_loop3_halfoptIhET_PKS0_iS0_(%rip), %rcx
    0000196c: 	callq	_Z14test_one_loop3IhPFhPKhihEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6508
    00001971: 	movq	0xc0(%rsp), %rdi
    00001979: 	cmpq	%rbx, %rdi
    0000197c: 	je	.Ltmp2825 # Offset: 6524
    0000197e: 	movq	0xd0(%rsp), %rax
    00001986: 	leaq	0x1(%rax), %rsi
    0000198a: 	callq	_ZdlPvm@PLT # Offset: 6538
.Ltmp2825:
    0000198f: 	movq	0x60(%rsp), %r15
    00001994: 	movq	0x68(%rsp), %r14
    00001999: 	movq	%rbx, 0xc0(%rsp)
    000019a1: 	movq	%r15, %rax
    000019a4: 	addq	%r14, %rax
    000019a7: 	je	.Ltmp2826 # Offset: 6567
    000019a9: 	testq	%r15, %r15
    000019ac: 	je	.Ltmp2827 # Offset: 6572
.Ltmp2826:
    000019b2: 	movq	%r14, 0x58(%rsp)
    000019b7: 	cmpq	$0xf, %r14
    000019bb: 	ja	.Ltmp2828 # Offset: 6587
    000019c1: 	cmpq	$0x1, %r14
    000019c5: 	jne	.Ltmp2829 # Offset: 6597
    000019cb: 	movzbl	(%r15), %eax
    000019cf: 	movb	%al, 0xd0(%rsp)
    000019d6: 	movq	%rbx, %rax
.Ltmp2882:
    000019d9: 	movq	%r14, 0xc8(%rsp)
    000019e1: 	movb	$0x0, (%rax,%r14)
    000019e6: 	movabsq	$0x3fffffffffffffff, %rax
    000019f0: 	subq	0xc8(%rsp), %rax
    000019f8: 	cmpq	$0x17, %rax
    000019fc: 	jbe	.Ltmp2830 # Offset: 6652
    00001a02: 	movl	$0x18, %edx
    00001a07: 	leaq	DATAat0x386a4(%rip), %rsi
    00001a0e: 	movq	%r12, %rdi
    00001a11: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6673
    00001a16: 	movq	%r12, %r8
    00001a19: 	movl	$0x7d0, %edx
    00001a1e: 	movl	$0x1f40, %esi
    00001a23: 	movq	%rbp, %rdi
    00001a26: 	leaq	_Z20test_while_loop3_optIhET_PKS0_iS0_(%rip), %rcx
    00001a2d: 	callq	_Z14test_one_loop3IhPFhPKhihEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6701
    00001a32: 	movq	0xc0(%rsp), %rdi
    00001a3a: 	cmpq	%rbx, %rdi
    00001a3d: 	je	.Ltmp2831 # Offset: 6717
    00001a3f: 	movq	0xd0(%rsp), %rax
    00001a47: 	leaq	0x1(%rax), %rsi
    00001a4b: 	callq	_ZdlPvm@PLT # Offset: 6731
.Ltmp2831:
    00001a50: 	movq	0x60(%rsp), %r15
    00001a55: 	movq	0x68(%rsp), %r14
    00001a5a: 	movq	%rbx, 0xc0(%rsp)
    00001a62: 	movq	%r15, %rax
    00001a65: 	addq	%r14, %rax
    00001a68: 	je	.Ltmp2832 # Offset: 6760
    00001a6a: 	testq	%r15, %r15
    00001a6d: 	je	.Ltmp2833 # Offset: 6765
.Ltmp2832:
    00001a73: 	movq	%r14, 0x58(%rsp)
    00001a78: 	cmpq	$0xf, %r14
    00001a7c: 	ja	.Ltmp2834 # Offset: 6780
    00001a82: 	cmpq	$0x1, %r14
    00001a86: 	jne	.Ltmp2835 # Offset: 6790
    00001a8c: 	movzbl	(%r15), %eax
    00001a90: 	movb	%al, 0xd0(%rsp)
    00001a97: 	movq	%rbx, %rax
.Ltmp2904:
    00001a9a: 	movq	%r14, 0xc8(%rsp)
    00001aa2: 	movb	$0x0, (%rax,%r14)
    00001aa7: 	movabsq	$0x3fffffffffffffff, %rax
    00001ab1: 	subq	0xc8(%rsp), %rax
    00001ab9: 	cmpq	$0x18, %rax
    00001abd: 	jbe	.Ltmp2836 # Offset: 6845
    00001ac3: 	movl	$0x19, %edx
    00001ac8: 	leaq	DATAat0x386bd(%rip), %rsi
    00001acf: 	movq	%r12, %rdi
    00001ad2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6866
    00001ad7: 	movq	%r12, %r8
    00001ada: 	movl	$0x7d0, %edx
    00001adf: 	movl	$0x1f40, %esi
    00001ae4: 	movq	%rbp, %rdi
    00001ae7: 	leaq	_Z24test_while_loop3_halfoptIhET_PKS0_iS0_(%rip), %rcx
    00001aee: 	callq	_Z14test_one_loop3IhPFhPKhihEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6894
    00001af3: 	movq	0xc0(%rsp), %rdi
    00001afb: 	cmpq	%rbx, %rdi
    00001afe: 	je	.Ltmp2837 # Offset: 6910
    00001b00: 	movq	0xd0(%rsp), %rax
    00001b08: 	leaq	0x1(%rax), %rsi
    00001b0c: 	callq	_ZdlPvm@PLT # Offset: 6924
.Ltmp2837:
    00001b11: 	movq	0x60(%rsp), %r15
    00001b16: 	movq	0x68(%rsp), %r14
    00001b1b: 	movq	%rbx, 0xc0(%rsp)
    00001b23: 	movq	%r15, %rax
    00001b26: 	addq	%r14, %rax
    00001b29: 	je	.Ltmp2838 # Offset: 6953
    00001b2b: 	testq	%r15, %r15
    00001b2e: 	je	.Ltmp2839 # Offset: 6958
.Ltmp2838:
    00001b34: 	movq	%r14, 0x58(%rsp)
    00001b39: 	cmpq	$0xf, %r14
    00001b3d: 	ja	.Ltmp2840 # Offset: 6973
    00001b43: 	cmpq	$0x1, %r14
    00001b47: 	jne	.Ltmp2841 # Offset: 6983
    00001b4d: 	movzbl	(%r15), %eax
    00001b51: 	movb	%al, 0xd0(%rsp)
    00001b58: 	movq	%rbx, %rax
.Ltmp2912:
    00001b5b: 	movq	%r14, 0xc8(%rsp)
    00001b63: 	movb	$0x0, (%rax,%r14)
    00001b68: 	movabsq	$0x3fffffffffffffff, %rax
    00001b72: 	subq	0xc8(%rsp), %rax
    00001b7a: 	cmpq	$0x14, %rax
    00001b7e: 	jbe	.Ltmp2842 # Offset: 7038
    00001b84: 	movl	$0x15, %edx
    00001b89: 	leaq	DATAat0x386d7(%rip), %rsi
    00001b90: 	movq	%r12, %rdi
    00001b93: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 7059
    00001b98: 	movq	%r12, %r8
    00001b9b: 	movl	$0x7d0, %edx
    00001ba0: 	movl	$0x1f40, %esi
    00001ba5: 	movq	%rbp, %rdi
    00001ba8: 	leaq	_Z17test_do_loop3_optIhET_PKS0_iS0_(%rip), %rcx
    00001baf: 	callq	_Z14test_one_loop3IhPFhPKhihEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7087
    00001bb4: 	movq	0xc0(%rsp), %rdi
    00001bbc: 	cmpq	%rbx, %rdi
    00001bbf: 	je	.Ltmp2843 # Offset: 7103
    00001bc1: 	movq	0xd0(%rsp), %rax
    00001bc9: 	leaq	0x1(%rax), %rsi
    00001bcd: 	callq	_ZdlPvm@PLT # Offset: 7117
.Ltmp2843:
    00001bd2: 	movq	0x60(%rsp), %r15
    00001bd7: 	movq	0x68(%rsp), %r14
    00001bdc: 	movq	%rbx, 0xc0(%rsp)
    00001be4: 	movq	%r15, %rax
    00001be7: 	addq	%r14, %rax
    00001bea: 	je	.Ltmp2844 # Offset: 7146
    00001bec: 	testq	%r15, %r15
    00001bef: 	je	.Ltmp2845 # Offset: 7151
.Ltmp2844:
    00001bf5: 	movq	%r14, 0x58(%rsp)
    00001bfa: 	cmpq	$0xf, %r14
    00001bfe: 	ja	.Ltmp2846 # Offset: 7166
    00001c04: 	cmpq	$0x1, %r14
    00001c08: 	jne	.Ltmp2847 # Offset: 7176
    00001c0e: 	movzbl	(%r15), %eax
    00001c12: 	movb	%al, 0xd0(%rsp)
    00001c19: 	movq	%rbx, %rax
.Ltmp2910:
    00001c1c: 	movq	%r14, 0xc8(%rsp)
    00001c24: 	movb	$0x0, (%rax,%r14)
    00001c29: 	movabsq	$0x3fffffffffffffff, %rax
    00001c33: 	subq	0xc8(%rsp), %rax
    00001c3b: 	cmpq	$0x15, %rax
    00001c3f: 	jbe	.Ltmp2848 # Offset: 7231
    00001c45: 	movl	$0x16, %edx
    00001c4a: 	leaq	DATAat0x386ed(%rip), %rsi
    00001c51: 	movq	%r12, %rdi
    00001c54: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 7252
    00001c59: 	movq	%r12, %r8
    00001c5c: 	movl	$0x7d0, %edx
    00001c61: 	movl	$0x1f40, %esi
    00001c66: 	movq	%rbp, %rdi
    00001c69: 	leaq	_Z21test_do_loop3_halfoptIhET_PKS0_iS0_(%rip), %rcx
    00001c70: 	callq	_Z14test_one_loop3IhPFhPKhihEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7280
    00001c75: 	movq	0xc0(%rsp), %rdi
    00001c7d: 	cmpq	%rbx, %rdi
    00001c80: 	je	.Ltmp2849 # Offset: 7296
    00001c82: 	movq	0xd0(%rsp), %rax
    00001c8a: 	leaq	0x1(%rax), %rsi
    00001c8e: 	callq	_ZdlPvm@PLT # Offset: 7310
.Ltmp2849:
    00001c93: 	leaq	DATAat0x38704(%rip), %rdx
    00001c9a: 	movq	%r13, %rsi
    00001c9d: 	movq	%r12, %rdi
    00001ca0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7328
    00001ca5: 	movq	%r12, %r8
    00001ca8: 	movl	$0x7d0, %edx
    00001cad: 	movl	$0x1f40, %esi
    00001cb2: 	movq	%rbp, %rdi
    00001cb5: 	leaq	_Z19test_goto_loop3_optIhET_PKS0_iS0_(%rip), %rcx
    00001cbc: 	callq	_Z14test_one_loop3IhPFhPKhihEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7356
    00001cc1: 	movq	0xc0(%rsp), %rdi
    00001cc9: 	cmpq	%rbx, %rdi
    00001ccc: 	je	.Ltmp2850 # Offset: 7372
    00001cce: 	movq	0xd0(%rsp), %rax
    00001cd6: 	leaq	0x1(%rax), %rsi
    00001cda: 	callq	_ZdlPvm@PLT # Offset: 7386
.Ltmp2850:
    00001cdf: 	movq	0x60(%rsp), %r15
    00001ce4: 	movq	0x68(%rsp), %r14
    00001ce9: 	movq	%rbx, 0xc0(%rsp)
    00001cf1: 	movq	%r15, %rax
    00001cf4: 	addq	%r14, %rax
    00001cf7: 	je	.Ltmp2851 # Offset: 7415
    00001cf9: 	testq	%r15, %r15
    00001cfc: 	je	.Ltmp2852 # Offset: 7420
.Ltmp2851:
    00001d02: 	movq	%r14, 0x58(%rsp)
    00001d07: 	cmpq	$0xf, %r14
    00001d0b: 	ja	.Ltmp2853 # Offset: 7435
    00001d11: 	cmpq	$0x1, %r14
    00001d15: 	jne	.Ltmp2854 # Offset: 7445
    00001d1b: 	movzbl	(%r15), %eax
    00001d1f: 	movb	%al, 0xd0(%rsp)
    00001d26: 	movq	%rbx, %rax
.Ltmp2908:
    00001d29: 	movq	%r14, 0xc8(%rsp)
    00001d31: 	movb	$0x0, (%rax,%r14)
    00001d36: 	movabsq	$0x3fffffffffffffff, %rax
    00001d40: 	subq	0xc8(%rsp), %rax
    00001d48: 	cmpq	$0x17, %rax
    00001d4c: 	jbe	.Ltmp2855 # Offset: 7500
    00001d52: 	movl	$0x18, %edx
    00001d57: 	leaq	DATAat0x3871c(%rip), %rsi
    00001d5e: 	movq	%r12, %rdi
    00001d61: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 7521
    00001d66: 	movq	%r12, %r8
    00001d69: 	movl	$0x7d0, %edx
    00001d6e: 	movl	$0x1f40, %esi
    00001d73: 	movq	%rbp, %rdi
    00001d76: 	leaq	_Z23test_goto_loop3_halfoptIhET_PKS0_iS0_(%rip), %rcx
    00001d7d: 	callq	_Z14test_one_loop3IhPFhPKhihEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7549
    00001d82: 	movq	0xc0(%rsp), %rdi
    00001d8a: 	cmpq	%rbx, %rdi
    00001d8d: 	je	.Ltmp2856 # Offset: 7565
    00001d8f: 	movq	0xd0(%rsp), %rax
    00001d97: 	leaq	0x1(%rax), %rsi
    00001d9b: 	callq	_ZdlPvm@PLT # Offset: 7579
.Ltmp2856:
    00001da0: 	movq	0x60(%rsp), %r15
    00001da5: 	movq	0x68(%rsp), %r14
    00001daa: 	movq	%rbx, 0xc0(%rsp)
    00001db2: 	movq	%r15, %rax
    00001db5: 	addq	%r14, %rax
    00001db8: 	je	.Ltmp2857 # Offset: 7608
    00001dba: 	testq	%r15, %r15
    00001dbd: 	je	.Ltmp2858 # Offset: 7613
.Ltmp2857:
    00001dc3: 	movq	%r14, 0x58(%rsp)
    00001dc8: 	cmpq	$0xf, %r14
    00001dcc: 	ja	.Ltmp2859 # Offset: 7628
    00001dd2: 	cmpq	$0x1, %r14
    00001dd6: 	jne	.Ltmp2860 # Offset: 7638
    00001ddc: 	movzbl	(%r15), %eax
    00001de0: 	movb	%al, 0xd0(%rsp)
    00001de7: 	movq	%rbx, %rax
.Ltmp2906:
    00001dea: 	movq	%r14, 0xc8(%rsp)
    00001df2: 	movb	$0x0, (%rax,%r14)
    00001df7: 	movabsq	$0x3fffffffffffffff, %rax
    00001e01: 	subq	0xc8(%rsp), %rax
    00001e09: 	cmpq	$0x17, %rax
    00001e0d: 	jbe	.Ltmp2861 # Offset: 7693
    00001e13: 	movl	$0x18, %edx
    00001e18: 	leaq	DATAat0x38735(%rip), %rsi
    00001e1f: 	movq	%r12, %rdi
    00001e22: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 7714
    00001e27: 	movq	%r12, %r8
    00001e2a: 	movl	$0x7d0, %edx
    00001e2f: 	movl	$0x1f40, %esi
    00001e34: 	movq	%rbp, %rdi
    00001e37: 	leaq	_Z20test_for_loop3_paramIhET_PKS0_iS0_(%rip), %rcx
    00001e3e: 	callq	_Z14test_one_loop3IhPFhPKhihEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7742
    00001e43: 	movq	0xc0(%rsp), %rdi
    00001e4b: 	cmpq	%rbx, %rdi
    00001e4e: 	je	.Ltmp2862 # Offset: 7758
    00001e50: 	movq	0xd0(%rsp), %rax
    00001e58: 	leaq	0x1(%rax), %rsi
    00001e5c: 	callq	_ZdlPvm@PLT # Offset: 7772
.Ltmp2862:
    00001e61: 	leaq	DATAat0x3874e(%rip), %rdx
    00001e68: 	movq	%r13, %rsi
    00001e6b: 	movq	%r12, %rdi
    00001e6e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7790
    00001e73: 	movq	%r12, %r8
    00001e76: 	movl	$0x7d0, %edx
    00001e7b: 	movl	$0x1f40, %esi
    00001e80: 	movq	%rbp, %rdi
    00001e83: 	leaq	_Z22test_while_loop3_paramIhET_PKS0_iS0_(%rip), %rcx
    00001e8a: 	callq	_Z14test_one_loop3IhPFhPKhihEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7818
    00001e8f: 	movq	0xc0(%rsp), %rdi
    00001e97: 	cmpq	%rbx, %rdi
    00001e9a: 	je	.Ltmp2863 # Offset: 7834
    00001e9c: 	movq	0xd0(%rsp), %rax
    00001ea4: 	leaq	0x1(%rax), %rsi
    00001ea8: 	callq	_ZdlPvm@PLT # Offset: 7848
.Ltmp2863:
    00001ead: 	leaq	DATAat0x38769(%rip), %rdx
    00001eb4: 	movq	%r13, %rsi
    00001eb7: 	movq	%r12, %rdi
    00001eba: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7866
    00001ebf: 	movq	%r12, %r8
    00001ec2: 	movl	$0x7d0, %edx
    00001ec7: 	movl	$0x1f40, %esi
    00001ecc: 	movq	%rbp, %rdi
    00001ecf: 	leaq	_Z19test_do_loop3_paramIhET_PKS0_iS0_(%rip), %rcx
    00001ed6: 	callq	_Z14test_one_loop3IhPFhPKhihEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7894
    00001edb: 	movq	0xc0(%rsp), %rdi
    00001ee3: 	cmpq	%rbx, %rdi
    00001ee6: 	je	.Ltmp2864 # Offset: 7910
    00001ee8: 	movq	0xd0(%rsp), %rax
    00001ef0: 	leaq	0x1(%rax), %rsi
    00001ef4: 	callq	_ZdlPvm@PLT # Offset: 7924
.Ltmp2864:
    00001ef9: 	leaq	DATAat0x38781(%rip), %rdx
    00001f00: 	movq	%r13, %rsi
    00001f03: 	movq	%r12, %rdi
    00001f06: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7942
    00001f0b: 	movq	%r12, %r8
    00001f0e: 	movl	$0x7d0, %edx
    00001f13: 	movl	$0x1f40, %esi
    00001f18: 	movq	%rbp, %rdi
    00001f1b: 	leaq	_Z21test_goto_loop3_paramIhET_PKS0_iS0_(%rip), %rcx
    00001f22: 	callq	_Z14test_one_loop3IhPFhPKhihEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7970
    00001f27: 	movq	0xc0(%rsp), %rdi
    00001f2f: 	cmpq	%rbx, %rdi
    00001f32: 	je	.Ltmp2865 # Offset: 7986
    00001f34: 	movq	0xd0(%rsp), %rax
    00001f3c: 	leaq	0x1(%rax), %rsi
    00001f40: 	callq	_ZdlPvm@PLT # Offset: 8000
.Ltmp2865:
    00001f45: 	leaq	DATAat0x3879b(%rip), %rdx
    00001f4c: 	movq	%r13, %rsi
    00001f4f: 	movq	%r12, %rdi
    00001f52: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8018
    00001f57: 	movl	iterations(%rip), %edx
    00001f5d: 	xorl	%r8d, %r8d
    00001f60: 	xorl	%ecx, %ecx
    00001f62: 	movl	$0x1f40, %esi
    00001f67: 	movq	0xc0(%rsp), %rdi
    00001f6f: 	callq	_Z9summarizePKciiii # Offset: 8047
    00001f74: 	movq	0xc0(%rsp), %rdi
    00001f7c: 	cmpq	%rbx, %rdi
    00001f7f: 	je	.Ltmp2866 # Offset: 8063
    00001f81: 	movq	0xd0(%rsp), %rax
    00001f89: 	leaq	0x1(%rax), %rsi
    00001f8d: 	callq	_ZdlPvm@PLT # Offset: 8077
.Ltmp2866:
    00001f92: 	movq	0xa0(%rsp), %rdi
    00001f9a: 	leaq	0xb0(%rsp), %rax
    00001fa2: 	cmpq	%rax, %rdi
    00001fa5: 	je	.Ltmp2867 # Offset: 8101
    00001fa7: 	movq	0xb0(%rsp), %rax
    00001faf: 	leaq	0x1(%rax), %rsi
    00001fb3: 	callq	_ZdlPvm@PLT # Offset: 8115
.Ltmp2867:
    00001fb8: 	movq	0x80(%rsp), %rdi
    00001fc0: 	cmpq	(%rsp), %rdi
    00001fc4: 	je	.Ltmp2868 # Offset: 8132
    00001fc6: 	movq	0x90(%rsp), %rax
    00001fce: 	leaq	0x1(%rax), %rsi
    00001fd2: 	callq	_ZdlPvm@PLT # Offset: 8146
.Ltmp2868:
    00001fd7: 	movq	0x60(%rsp), %rdi
    00001fdc: 	cmpq	0x40(%rsp), %rdi
    00001fe1: 	je	.Ltmp2869 # Offset: 8161
    00001fe3: 	movq	0x70(%rsp), %rax
    00001fe8: 	leaq	0x1(%rax), %rsi
    00001fec: 	callq	_ZdlPvm@PLT # Offset: 8172
.Ltmp2869:
    00001ff1: 	movq	0x2028(%rsp), %rax
    00001ff9: 	subq	%fs:0x28, %rax
    00002002: 	jne	.Ltmp2870 # Offset: 8194
    00002008: 	addq	$0x2038, %rsp
    0000200f: 	popq	%rbx
    00002010: 	popq	%rbp
    00002011: 	popq	%r12
    00002013: 	popq	%r13
    00002015: 	popq	%r14
    00002017: 	popq	%r15
    00002019: 	retq # Offset: 8217
    0000201a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2689:
    00002020: 	addq	$0x20, %r14
    00002024: 	cmpq	%rbx, %r14
    00002027: 	jne	.Ltmp2690 # Offset: 8231
    0000202d: 	addq	$0x8, (%rsp)
    00002032: 	movq	(%rsp), %rax
    00002036: 	cmpq	%rax, 0x8(%rsp)
    0000203b: 	ja	.Ltmp2691 # Offset: 8251
    00002041: 	jmp	.Ltmp2688 # Offset: 8257
.Ltmp2707:
    00002046: 	testq	%r14, %r14
    00002049: 	jne	.Ltmp2871 # Offset: 8265
    0000204f: 	movq	%rbx, %rax
    00002052: 	jmp	.Ltmp2872 # Offset: 8274
.Ltmp2742:
    00002057: 	testq	%r14, %r14
    0000205a: 	jne	.Ltmp2873 # Offset: 8282
    00002060: 	movq	%rbx, %rax
    00002063: 	jmp	.Ltmp2874 # Offset: 8291
.Ltmp2729:
    00002068: 	testq	%r14, %r14
    0000206b: 	jne	.Ltmp2875 # Offset: 8299
    00002071: 	movq	%rbx, %rax
    00002074: 	jmp	.Ltmp2876 # Offset: 8308
.Ltmp2723:
    00002079: 	testq	%r14, %r14
    0000207c: 	jne	.Ltmp2877 # Offset: 8316
    00002082: 	movq	%rbx, %rax
    00002085: 	jmp	.Ltmp2878 # Offset: 8325
.Ltmp2714:
    0000208a: 	testq	%r14, %r14
    0000208d: 	jne	.Ltmp2879 # Offset: 8333
    00002093: 	movq	%rbx, %rax
    00002096: 	jmp	.Ltmp2880 # Offset: 8342
.Ltmp2829:
    0000209b: 	testq	%r14, %r14
    0000209e: 	jne	.Ltmp2881 # Offset: 8350
    000020a4: 	movq	%rbx, %rax
    000020a7: 	jmp	.Ltmp2882 # Offset: 8359
.Ltmp2820:
    000020ac: 	testq	%r14, %r14
    000020af: 	jne	.Ltmp2883 # Offset: 8367
    000020b5: 	movq	%rbx, %rax
    000020b8: 	jmp	.Ltmp2884 # Offset: 8376
.Ltmp2809:
    000020bd: 	testq	%r14, %r14
    000020c0: 	jne	.Ltmp2885 # Offset: 8384
    000020c6: 	movq	%rbx, %rax
    000020c9: 	jmp	.Ltmp2886 # Offset: 8393
.Ltmp2801:
    000020ce: 	testq	%r14, %r14
    000020d1: 	jne	.Ltmp2887 # Offset: 8401
    000020d7: 	movq	%rbx, %rax
    000020da: 	jmp	.Ltmp2888 # Offset: 8410
.Ltmp2794:
    000020df: 	testq	%r14, %r14
    000020e2: 	jne	.Ltmp2889 # Offset: 8418
    000020e8: 	movq	%rbx, %rax
    000020eb: 	jmp	.Ltmp2890 # Offset: 8427
.Ltmp2787:
    000020f0: 	testq	%r14, %r14
    000020f3: 	jne	.Ltmp2891 # Offset: 8435
    000020f9: 	movq	%rbx, %rax
    000020fc: 	jmp	.Ltmp2892 # Offset: 8444
.Ltmp2780:
    00002101: 	testq	%r14, %r14
    00002104: 	jne	.Ltmp2893 # Offset: 8452
    0000210a: 	movq	%rbx, %rax
    0000210d: 	jmp	.Ltmp2894 # Offset: 8461
.Ltmp2774:
    00002112: 	testq	%r14, %r14
    00002115: 	jne	.Ltmp2895 # Offset: 8469
    0000211b: 	movq	%rbx, %rax
    0000211e: 	jmp	.Ltmp2896 # Offset: 8478
.Ltmp2767:
    00002123: 	testq	%r14, %r14
    00002126: 	jne	.Ltmp2897 # Offset: 8486
    0000212c: 	movq	(%rsp), %rax
    00002130: 	jmp	.Ltmp2898 # Offset: 8496
.Ltmp2760:
    00002135: 	testq	%r14, %r14
    00002138: 	jne	.Ltmp2899 # Offset: 8504
    0000213e: 	movq	%rbx, %rax
    00002141: 	jmp	.Ltmp2900 # Offset: 8513
.Ltmp2751:
    00002146: 	testq	%r14, %r14
    00002149: 	jne	.Ltmp2901 # Offset: 8521
    0000214f: 	movq	%rbx, %rax
    00002152: 	jmp	.Ltmp2902 # Offset: 8530
.Ltmp2759:
    00002157: 	leaq	0x58(%rsp), %rsi
    0000215c: 	xorl	%edx, %edx
    0000215e: 	movq	%r12, %rdi
    00002161: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8545
    00002166: 	movq	%rax, 0xc0(%rsp)
    0000216e: 	movq	%rax, %rdi
    00002171: 	movq	0x58(%rsp), %rax
    00002176: 	movq	%rax, 0xd0(%rsp)
.Ltmp2930:
    0000217e: 	movq	(%rsp), %rsi
    00002182: 	movq	%r14, %rdx
    00002185: 	callq	memcpy@PLT # Offset: 8581
    0000218a: 	movq	0x58(%rsp), %r14
    0000218f: 	movq	0xc0(%rsp), %rax
    00002197: 	jmp	.Ltmp2900 # Offset: 8599
.Ltmp2750:
    0000219c: 	leaq	0x58(%rsp), %rsi
    000021a1: 	xorl	%edx, %edx
    000021a3: 	movq	%r12, %rdi
    000021a6: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8614
    000021ab: 	movq	%rax, 0xc0(%rsp)
    000021b3: 	movq	%rax, %rdi
    000021b6: 	movq	0x58(%rsp), %rax
    000021bb: 	movq	%rax, 0xd0(%rsp)
.Ltmp2931:
    000021c3: 	movq	(%rsp), %rsi
    000021c7: 	movq	%r14, %rdx
    000021ca: 	callq	memcpy@PLT # Offset: 8650
    000021cf: 	movq	0x58(%rsp), %r14
    000021d4: 	movq	0xc0(%rsp), %rax
    000021dc: 	jmp	.Ltmp2902 # Offset: 8668
.Ltmp2773:
    000021e1: 	leaq	0x58(%rsp), %rsi
    000021e6: 	xorl	%edx, %edx
    000021e8: 	movq	%r12, %rdi
    000021eb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8683
    000021f0: 	movq	%rax, 0xc0(%rsp)
    000021f8: 	movq	%rax, %rdi
    000021fb: 	movq	0x58(%rsp), %rax
    00002200: 	movq	%rax, 0xd0(%rsp)
.Ltmp2928:
    00002208: 	movq	%r14, %rdx
    0000220b: 	movq	%r15, %rsi
    0000220e: 	callq	memcpy@PLT # Offset: 8718
    00002213: 	movq	0x58(%rsp), %r14
    00002218: 	movq	0xc0(%rsp), %rax
    00002220: 	jmp	.Ltmp2896 # Offset: 8736
.Ltmp2766:
    00002225: 	leaq	0x58(%rsp), %rsi
    0000222a: 	leaq	0x80(%rsp), %rdi
    00002232: 	xorl	%edx, %edx
    00002234: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8756
    00002239: 	movq	%rax, 0x80(%rsp)
    00002241: 	movq	%rax, %rdi
    00002244: 	movq	0x58(%rsp), %rax
    00002249: 	movq	%rax, 0x90(%rsp)
.Ltmp2929:
    00002251: 	movq	0x8(%rsp), %rsi
    00002256: 	movq	%r14, %rdx
    00002259: 	callq	memcpy@PLT # Offset: 8793
    0000225e: 	movq	0x58(%rsp), %r14
    00002263: 	movq	0x80(%rsp), %rax
    0000226b: 	jmp	.Ltmp2898 # Offset: 8811
.Ltmp2786:
    00002270: 	leaq	0x58(%rsp), %rsi
    00002275: 	xorl	%edx, %edx
    00002277: 	movq	%r12, %rdi
    0000227a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8826
    0000227f: 	movq	%rax, 0xc0(%rsp)
    00002287: 	movq	%rax, %rdi
    0000228a: 	movq	0x58(%rsp), %rax
    0000228f: 	movq	%rax, 0xd0(%rsp)
.Ltmp2926:
    00002297: 	movq	%r14, %rdx
    0000229a: 	movq	%r15, %rsi
    0000229d: 	callq	memcpy@PLT # Offset: 8861
    000022a2: 	movq	0x58(%rsp), %r14
    000022a7: 	movq	0xc0(%rsp), %rax
    000022af: 	jmp	.Ltmp2892 # Offset: 8879
.Ltmp2779:
    000022b4: 	leaq	0x58(%rsp), %rsi
    000022b9: 	xorl	%edx, %edx
    000022bb: 	movq	%r12, %rdi
    000022be: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8894
    000022c3: 	movq	%rax, 0xc0(%rsp)
    000022cb: 	movq	%rax, %rdi
    000022ce: 	movq	0x58(%rsp), %rax
    000022d3: 	movq	%rax, 0xd0(%rsp)
.Ltmp2927:
    000022db: 	movq	%r14, %rdx
    000022de: 	movq	%r15, %rsi
    000022e1: 	callq	memcpy@PLT # Offset: 8929
    000022e6: 	movq	0x58(%rsp), %r14
    000022eb: 	movq	0xc0(%rsp), %rax
    000022f3: 	jmp	.Ltmp2894 # Offset: 8947
.Ltmp2800:
    000022f8: 	leaq	0x58(%rsp), %rsi
    000022fd: 	xorl	%edx, %edx
    000022ff: 	movq	%r12, %rdi
    00002302: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8962
    00002307: 	movq	%rax, 0xc0(%rsp)
    0000230f: 	movq	%rax, %rdi
    00002312: 	movq	0x58(%rsp), %rax
    00002317: 	movq	%rax, 0xd0(%rsp)
.Ltmp2924:
    0000231f: 	movq	%r14, %rdx
    00002322: 	movq	%r15, %rsi
    00002325: 	callq	memcpy@PLT # Offset: 8997
    0000232a: 	movq	0x58(%rsp), %r14
    0000232f: 	movq	0xc0(%rsp), %rax
    00002337: 	jmp	.Ltmp2888 # Offset: 9015
.Ltmp2793:
    0000233c: 	leaq	0x58(%rsp), %rsi
    00002341: 	xorl	%edx, %edx
    00002343: 	movq	%r12, %rdi
    00002346: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9030
    0000234b: 	movq	%rax, 0xc0(%rsp)
    00002353: 	movq	%rax, %rdi
    00002356: 	movq	0x58(%rsp), %rax
    0000235b: 	movq	%rax, 0xd0(%rsp)
.Ltmp2925:
    00002363: 	movq	%r14, %rdx
    00002366: 	movq	%r15, %rsi
    00002369: 	callq	memcpy@PLT # Offset: 9065
    0000236e: 	movq	0x58(%rsp), %r14
    00002373: 	movq	0xc0(%rsp), %rax
    0000237b: 	jmp	.Ltmp2890 # Offset: 9083
.Ltmp2706:
    00002380: 	leaq	0x58(%rsp), %rsi
    00002385: 	xorl	%edx, %edx
    00002387: 	movq	%r12, %rdi
    0000238a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9098
    0000238f: 	movq	%rax, 0xc0(%rsp)
    00002397: 	movq	%rax, %rdi
    0000239a: 	movq	0x58(%rsp), %rax
    0000239f: 	movq	%rax, 0xd0(%rsp)
.Ltmp2916:
    000023a7: 	movq	(%rsp), %rsi
    000023ab: 	movq	%r14, %rdx
    000023ae: 	callq	memcpy@PLT # Offset: 9134
    000023b3: 	movq	0x58(%rsp), %r14
    000023b8: 	movq	0xc0(%rsp), %rax
    000023c0: 	jmp	.Ltmp2872 # Offset: 9152
.Ltmp2741:
    000023c5: 	leaq	0x58(%rsp), %rsi
    000023ca: 	xorl	%edx, %edx
    000023cc: 	movq	%r12, %rdi
    000023cf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9167
    000023d4: 	movq	%rax, 0xc0(%rsp)
    000023dc: 	movq	%rax, %rdi
    000023df: 	movq	0x58(%rsp), %rax
    000023e4: 	movq	%rax, 0xd0(%rsp)
.Ltmp2917:
    000023ec: 	movq	(%rsp), %rsi
    000023f0: 	movq	%r14, %rdx
    000023f3: 	callq	memcpy@PLT # Offset: 9203
    000023f8: 	movq	0x58(%rsp), %r14
    000023fd: 	movq	0xc0(%rsp), %rax
    00002405: 	jmp	.Ltmp2874 # Offset: 9221
.Ltmp2819:
    0000240a: 	leaq	0x58(%rsp), %rsi
    0000240f: 	xorl	%edx, %edx
    00002411: 	movq	%r12, %rdi
    00002414: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9236
    00002419: 	movq	%rax, 0xc0(%rsp)
    00002421: 	movq	%rax, %rdi
    00002424: 	movq	0x58(%rsp), %rax
    00002429: 	movq	%rax, 0xd0(%rsp)
.Ltmp2922:
    00002431: 	movq	%r14, %rdx
    00002434: 	movq	%r15, %rsi
    00002437: 	callq	memcpy@PLT # Offset: 9271
    0000243c: 	movq	0x58(%rsp), %r14
    00002441: 	movq	0xc0(%rsp), %rax
    00002449: 	jmp	.Ltmp2884 # Offset: 9289
.Ltmp2808:
    0000244e: 	leaq	0x58(%rsp), %rsi
    00002453: 	xorl	%edx, %edx
    00002455: 	movq	%r12, %rdi
    00002458: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9304
    0000245d: 	movq	%rax, 0xc0(%rsp)
    00002465: 	movq	%rax, %rdi
    00002468: 	movq	0x58(%rsp), %rax
    0000246d: 	movq	%rax, 0xd0(%rsp)
.Ltmp2923:
    00002475: 	movq	%r14, %rdx
    00002478: 	movq	%r15, %rsi
    0000247b: 	callq	memcpy@PLT # Offset: 9339
    00002480: 	movq	0x58(%rsp), %r14
    00002485: 	movq	0xc0(%rsp), %rax
    0000248d: 	jmp	.Ltmp2886 # Offset: 9357
.Ltmp2728:
    00002492: 	leaq	0x58(%rsp), %rsi
    00002497: 	xorl	%edx, %edx
    00002499: 	movq	%r12, %rdi
    0000249c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9372
    000024a1: 	movq	%rax, 0xc0(%rsp)
    000024a9: 	movq	%rax, %rdi
    000024ac: 	movq	0x58(%rsp), %rax
    000024b1: 	movq	%rax, 0xd0(%rsp)
.Ltmp2918:
    000024b9: 	movq	(%rsp), %rsi
    000024bd: 	movq	%r14, %rdx
    000024c0: 	callq	memcpy@PLT # Offset: 9408
    000024c5: 	movq	0x58(%rsp), %r14
    000024ca: 	movq	0xc0(%rsp), %rax
    000024d2: 	jmp	.Ltmp2876 # Offset: 9426
.Ltmp2722:
    000024d7: 	leaq	0x58(%rsp), %rsi
    000024dc: 	xorl	%edx, %edx
    000024de: 	movq	%r12, %rdi
    000024e1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9441
    000024e6: 	movq	%rax, 0xc0(%rsp)
    000024ee: 	movq	%rax, %rdi
    000024f1: 	movq	0x58(%rsp), %rax
    000024f6: 	movq	%rax, 0xd0(%rsp)
.Ltmp2919:
    000024fe: 	movq	(%rsp), %rsi
    00002502: 	movq	%r14, %rdx
    00002505: 	callq	memcpy@PLT # Offset: 9477
    0000250a: 	movq	0x58(%rsp), %r14
    0000250f: 	movq	0xc0(%rsp), %rax
    00002517: 	jmp	.Ltmp2878 # Offset: 9495
.Ltmp2713:
    0000251c: 	leaq	0x58(%rsp), %rsi
    00002521: 	xorl	%edx, %edx
    00002523: 	movq	%r12, %rdi
    00002526: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9510
    0000252b: 	movq	%rax, 0xc0(%rsp)
    00002533: 	movq	%rax, %rdi
    00002536: 	movq	0x58(%rsp), %rax
    0000253b: 	movq	%rax, 0xd0(%rsp)
.Ltmp2920:
    00002543: 	movq	(%rsp), %rsi
    00002547: 	movq	%r14, %rdx
    0000254a: 	callq	memcpy@PLT # Offset: 9546
    0000254f: 	movq	0x58(%rsp), %r14
    00002554: 	movq	0xc0(%rsp), %rax
    0000255c: 	jmp	.Ltmp2880 # Offset: 9564
.Ltmp2828:
    00002561: 	leaq	0x58(%rsp), %rsi
    00002566: 	xorl	%edx, %edx
    00002568: 	movq	%r12, %rdi
    0000256b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9579
    00002570: 	movq	%rax, 0xc0(%rsp)
    00002578: 	movq	%rax, %rdi
    0000257b: 	movq	0x58(%rsp), %rax
    00002580: 	movq	%rax, 0xd0(%rsp)
.Ltmp2921:
    00002588: 	movq	%r14, %rdx
    0000258b: 	movq	%r15, %rsi
    0000258e: 	callq	memcpy@PLT # Offset: 9614
    00002593: 	movq	0x58(%rsp), %r14
    00002598: 	movq	0xc0(%rsp), %rax
    000025a0: 	jmp	.Ltmp2882 # Offset: 9632
.Ltmp2835:
    000025a5: 	testq	%r14, %r14
    000025a8: 	jne	.Ltmp2903 # Offset: 9640
    000025ae: 	movq	%rbx, %rax
    000025b1: 	jmp	.Ltmp2904 # Offset: 9649
.Ltmp2860:
    000025b6: 	testq	%r14, %r14
    000025b9: 	jne	.Ltmp2905 # Offset: 9657
    000025bf: 	movq	%rbx, %rax
    000025c2: 	jmp	.Ltmp2906 # Offset: 9666
.Ltmp2854:
    000025c7: 	testq	%r14, %r14
    000025ca: 	jne	.Ltmp2907 # Offset: 9674
    000025d0: 	movq	%rbx, %rax
    000025d3: 	jmp	.Ltmp2908 # Offset: 9683
.Ltmp2847:
    000025d8: 	testq	%r14, %r14
    000025db: 	jne	.Ltmp2909 # Offset: 9691
    000025e1: 	movq	%rbx, %rax
    000025e4: 	jmp	.Ltmp2910 # Offset: 9700
.Ltmp2841:
    000025e9: 	testq	%r14, %r14
    000025ec: 	jne	.Ltmp2911 # Offset: 9708
    000025f2: 	movq	%rbx, %rax
    000025f5: 	jmp	.Ltmp2912 # Offset: 9717
.Ltmp2840:
    000025fa: 	leaq	0x58(%rsp), %rsi
    000025ff: 	xorl	%edx, %edx
    00002601: 	movq	%r12, %rdi
    00002604: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9732
    00002609: 	movq	%rax, 0xc0(%rsp)
    00002611: 	movq	%rax, %rdi
    00002614: 	movq	0x58(%rsp), %rax
    00002619: 	movq	%rax, 0xd0(%rsp)
.Ltmp2936:
    00002621: 	movq	%r14, %rdx
    00002624: 	movq	%r15, %rsi
    00002627: 	callq	memcpy@PLT # Offset: 9767
    0000262c: 	movq	0x58(%rsp), %r14
    00002631: 	movq	0xc0(%rsp), %rax
    00002639: 	jmp	.Ltmp2912 # Offset: 9785
.Ltmp2853:
    0000263e: 	leaq	0x58(%rsp), %rsi
    00002643: 	xorl	%edx, %edx
    00002645: 	movq	%r12, %rdi
    00002648: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9800
    0000264d: 	movq	%rax, 0xc0(%rsp)
    00002655: 	movq	%rax, %rdi
    00002658: 	movq	0x58(%rsp), %rax
    0000265d: 	movq	%rax, 0xd0(%rsp)
.Ltmp2934:
    00002665: 	movq	%r14, %rdx
    00002668: 	movq	%r15, %rsi
    0000266b: 	callq	memcpy@PLT # Offset: 9835
    00002670: 	movq	0x58(%rsp), %r14
    00002675: 	movq	0xc0(%rsp), %rax
    0000267d: 	jmp	.Ltmp2908 # Offset: 9853
.Ltmp2846:
    00002682: 	leaq	0x58(%rsp), %rsi
    00002687: 	xorl	%edx, %edx
    00002689: 	movq	%r12, %rdi
    0000268c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9868
    00002691: 	movq	%rax, 0xc0(%rsp)
    00002699: 	movq	%rax, %rdi
    0000269c: 	movq	0x58(%rsp), %rax
    000026a1: 	movq	%rax, 0xd0(%rsp)
.Ltmp2935:
    000026a9: 	movq	%r14, %rdx
    000026ac: 	movq	%r15, %rsi
    000026af: 	callq	memcpy@PLT # Offset: 9903
    000026b4: 	movq	0x58(%rsp), %r14
    000026b9: 	movq	0xc0(%rsp), %rax
    000026c1: 	jmp	.Ltmp2910 # Offset: 9921
.Ltmp2834:
    000026c6: 	leaq	0x58(%rsp), %rsi
    000026cb: 	xorl	%edx, %edx
    000026cd: 	movq	%r12, %rdi
    000026d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9936
    000026d5: 	movq	%rax, 0xc0(%rsp)
    000026dd: 	movq	%rax, %rdi
    000026e0: 	movq	0x58(%rsp), %rax
    000026e5: 	movq	%rax, 0xd0(%rsp)
.Ltmp2932:
    000026ed: 	movq	%r14, %rdx
    000026f0: 	movq	%r15, %rsi
    000026f3: 	callq	memcpy@PLT # Offset: 9971
    000026f8: 	movq	0x58(%rsp), %r14
    000026fd: 	movq	0xc0(%rsp), %rax
    00002705: 	jmp	.Ltmp2904 # Offset: 9989
.Ltmp2859:
    0000270a: 	leaq	0x58(%rsp), %rsi
    0000270f: 	xorl	%edx, %edx
    00002711: 	movq	%r12, %rdi
    00002714: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 10004
    00002719: 	movq	%rax, 0xc0(%rsp)
    00002721: 	movq	%rax, %rdi
    00002724: 	movq	0x58(%rsp), %rax
    00002729: 	movq	%rax, 0xd0(%rsp)
.Ltmp2933:
    00002731: 	movq	%r14, %rdx
    00002734: 	movq	%r15, %rsi
    00002737: 	callq	memcpy@PLT # Offset: 10039
    0000273c: 	movq	0x58(%rsp), %r14
    00002741: 	movq	0xc0(%rsp), %rax
    00002749: 	jmp	.Ltmp2906 # Offset: 10057
.Ltmp2693:
    0000274e: 	cmpq	0x10(%rsp), %r12
    00002753: 	je	.Ltmp2696 # Offset: 10067
.Ltmp2915:
    00002759: 	movq	(%r12), %rdi
    0000275d: 	leaq	0x10(%r12), %rax
    00002762: 	cmpq	%rax, %rdi
    00002765: 	je	.Ltmp2913 # Offset: 10085
.Ltmp2914:
    00002767: 	movq	0x10(%r12), %rax
    0000276c: 	addq	$0x20, %r12
    00002770: 	leaq	0x1(%rax), %rsi
    00002774: 	callq	_ZdlPvm@PLT # Offset: 10100
    00002779: 	cmpq	%r12, 0x10(%rsp)
    0000277e: 	je	.Ltmp2696 # Offset: 10110
    00002784: 	movq	(%r12), %rdi
    00002788: 	leaq	0x10(%r12), %rax
    0000278d: 	cmpq	%rax, %rdi
    00002790: 	jne	.Ltmp2914 # Offset: 10128
.Ltmp2913:
    00002792: 	addq	$0x20, %r12
    00002796: 	cmpq	%r12, 0x10(%rsp)
    0000279b: 	jne	.Ltmp2915 # Offset: 10139
    0000279d: 	jmp	.Ltmp2696 # Offset: 10141
.Ltmp2708:
    000027a2: 	leaq	DATAat0x38182(%rip), %rdi
    000027a9: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10153
.Ltmp2712:
    000027ae: 	leaq	DATAat0x38158(%rip), %rdi
    000027b5: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10165
.Ltmp2715:
    000027ba: 	leaq	DATAat0x38182(%rip), %rdi
    000027c1: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10177
.Ltmp2721:
    000027c6: 	leaq	DATAat0x38158(%rip), %rdi
    000027cd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10189
.Ltmp2724:
    000027d2: 	leaq	DATAat0x38182(%rip), %rdi
    000027d9: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10201
.Ltmp2727:
    000027de: 	leaq	DATAat0x38158(%rip), %rdi
    000027e5: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10213
.Ltmp2730:
    000027ea: 	leaq	DATAat0x38182(%rip), %rdi
    000027f1: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10225
.Ltmp2740:
    000027f6: 	leaq	DATAat0x38158(%rip), %rdi
    000027fd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10237
.Ltmp2743:
    00002802: 	leaq	DATAat0x38182(%rip), %rdi
    00002809: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10249
.Ltmp2749:
    0000280e: 	leaq	DATAat0x38158(%rip), %rdi
    00002815: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10261
.Ltmp2752:
    0000281a: 	leaq	DATAat0x38182(%rip), %rdi
    00002821: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10273
.Ltmp2758:
    00002826: 	leaq	DATAat0x38158(%rip), %rdi
    0000282d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10285
.Ltmp2761:
    00002832: 	leaq	DATAat0x38182(%rip), %rdi
    00002839: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10297
.Ltmp2765:
    0000283e: 	leaq	DATAat0x38158(%rip), %rdi
    00002845: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10309
.Ltmp2768:
    0000284a: 	leaq	DATAat0x38182(%rip), %rdi
    00002851: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10321
.Ltmp2772:
    00002856: 	leaq	DATAat0x38158(%rip), %rdi
    0000285d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10333
.Ltmp2775:
    00002862: 	leaq	DATAat0x38182(%rip), %rdi
    00002869: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10345
.Ltmp2778:
    0000286e: 	leaq	DATAat0x38158(%rip), %rdi
    00002875: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10357
.Ltmp2781:
    0000287a: 	leaq	DATAat0x38182(%rip), %rdi
    00002881: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10369
.Ltmp2785:
    00002886: 	leaq	DATAat0x38158(%rip), %rdi
    0000288d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10381
.Ltmp2788:
    00002892: 	leaq	DATAat0x38182(%rip), %rdi
    00002899: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10393
.Ltmp2792:
    0000289e: 	leaq	DATAat0x38158(%rip), %rdi
    000028a5: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10405
.Ltmp2795:
    000028aa: 	leaq	DATAat0x38182(%rip), %rdi
    000028b1: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10417
.Ltmp2799:
    000028b6: 	leaq	DATAat0x38158(%rip), %rdi
    000028bd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10429
.Ltmp2802:
    000028c2: 	leaq	DATAat0x38182(%rip), %rdi
    000028c9: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10441
.Ltmp2807:
    000028ce: 	leaq	DATAat0x38158(%rip), %rdi
    000028d5: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10453
.Ltmp2810:
    000028da: 	leaq	DATAat0x38182(%rip), %rdi
    000028e1: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10465
.Ltmp2818:
    000028e6: 	leaq	DATAat0x38158(%rip), %rdi
    000028ed: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10477
.Ltmp2821:
    000028f2: 	leaq	DATAat0x38182(%rip), %rdi
    000028f9: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10489
.Ltmp2827:
    000028fe: 	leaq	DATAat0x38158(%rip), %rdi
    00002905: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10501
.Ltmp2830:
    0000290a: 	leaq	DATAat0x38182(%rip), %rdi
    00002911: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10513
.Ltmp2833:
    00002916: 	leaq	DATAat0x38158(%rip), %rdi
    0000291d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10525
.Ltmp2836:
    00002922: 	leaq	DATAat0x38182(%rip), %rdi
    00002929: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10537
.Ltmp2839:
    0000292e: 	leaq	DATAat0x38158(%rip), %rdi
    00002935: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10549
.Ltmp2842:
    0000293a: 	leaq	DATAat0x38182(%rip), %rdi
    00002941: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10561
.Ltmp2845:
    00002946: 	leaq	DATAat0x38158(%rip), %rdi
    0000294d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10573
.Ltmp2848:
    00002952: 	leaq	DATAat0x38182(%rip), %rdi
    00002959: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10585
.Ltmp2852:
    0000295e: 	leaq	DATAat0x38158(%rip), %rdi
    00002965: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10597
.Ltmp2855:
    0000296a: 	leaq	DATAat0x38182(%rip), %rdi
    00002971: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10609
.Ltmp2858:
    00002976: 	leaq	DATAat0x38158(%rip), %rdi
    0000297d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10621
.Ltmp2861:
    00002982: 	leaq	DATAat0x38182(%rip), %rdi
    00002989: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10633
.Ltmp2870:
    0000298e: 	callq	__stack_chk_fail@PLT # Offset: 10638
.Ltmp2871:
    00002993: 	movq	%rbx, %rdi
    00002996: 	jmp	.Ltmp2916 # Offset: 10646
.Ltmp2873:
    0000299b: 	movq	%rbx, %rdi
    0000299e: 	jmp	.Ltmp2917 # Offset: 10654
.Ltmp2875:
    000029a3: 	movq	%rbx, %rdi
    000029a6: 	jmp	.Ltmp2918 # Offset: 10662
.Ltmp2877:
    000029ab: 	movq	%rbx, %rdi
    000029ae: 	jmp	.Ltmp2919 # Offset: 10670
.Ltmp2879:
    000029b3: 	movq	%rbx, %rdi
    000029b6: 	jmp	.Ltmp2920 # Offset: 10678
.Ltmp2881:
    000029bb: 	movq	%rbx, %rdi
    000029be: 	jmp	.Ltmp2921 # Offset: 10686
.Ltmp2883:
    000029c3: 	movq	%rbx, %rdi
    000029c6: 	jmp	.Ltmp2922 # Offset: 10694
.Ltmp2885:
    000029cb: 	movq	%rbx, %rdi
    000029ce: 	jmp	.Ltmp2923 # Offset: 10702
.Ltmp2887:
    000029d3: 	movq	%rbx, %rdi
    000029d6: 	jmp	.Ltmp2924 # Offset: 10710
.Ltmp2889:
    000029db: 	movq	%rbx, %rdi
    000029de: 	jmp	.Ltmp2925 # Offset: 10718
.Ltmp2891:
    000029e3: 	movq	%rbx, %rdi
    000029e6: 	jmp	.Ltmp2926 # Offset: 10726
.Ltmp2893:
    000029eb: 	movq	%rbx, %rdi
    000029ee: 	jmp	.Ltmp2927 # Offset: 10734
.Ltmp2895:
    000029f3: 	movq	%rbx, %rdi
    000029f6: 	jmp	.Ltmp2928 # Offset: 10742
.Ltmp2897:
    000029fb: 	movq	(%rsp), %rdi
    000029ff: 	jmp	.Ltmp2929 # Offset: 10751
.Ltmp2899:
    00002a04: 	movq	%rbx, %rdi
    00002a07: 	jmp	.Ltmp2930 # Offset: 10759
.Ltmp2901:
    00002a0c: 	movq	%rbx, %rdi
    00002a0f: 	jmp	.Ltmp2931 # Offset: 10767
.Ltmp2903:
    00002a14: 	movq	%rbx, %rdi
    00002a17: 	jmp	.Ltmp2932 # Offset: 10775
.Ltmp2905:
    00002a1c: 	movq	%rbx, %rdi
    00002a1f: 	jmp	.Ltmp2933 # Offset: 10783
.Ltmp2907:
    00002a24: 	movq	%rbx, %rdi
    00002a27: 	jmp	.Ltmp2934 # Offset: 10791
.Ltmp2909:
    00002a2c: 	movq	%rbx, %rdi
    00002a2f: 	jmp	.Ltmp2935 # Offset: 10799
.Ltmp2911:
    00002a34: 	movq	%rbx, %rdi
    00002a37: 	jmp	.Ltmp2936 # Offset: 10807
.Ltmp2705:
    00002a3c: 	leaq	DATAat0x38158(%rip), %rdi
    00002a43: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10819
    00002a48: 	endbr64
.Ltmp2944:
    00002a4c: 	movq	%rax, %rbp
    00002a4f: 	jmp	.Ltmp2937 # Offset: 10831
    00002a51: 	endbr64
.Ltmp2939:
    00002a55: 	movq	%rax, %rbp
    00002a58: 	jmp	.Ltmp2938 # Offset: 10840
    00002a5a: 	endbr64
    00002a5e: 	jmp	.Ltmp2939 # Offset: 10846
    00002a60: 	endbr64
    00002a64: 	jmp	.Ltmp2939 # Offset: 10852
    00002a66: 	endbr64
    00002a6a: 	jmp	.Ltmp2939 # Offset: 10858
.Ltmp2937:
    00002a6c: 	movq	0xc0(%rsp), %rdi
    00002a74: 	cmpq	%rbx, %rdi
    00002a77: 	je	.Ltmp2940 # Offset: 10871
.Ltmp2946:
    00002a79: 	movq	0xd0(%rsp), %rax
    00002a81: 	leaq	0x1(%rax), %rsi
    00002a85: 	callq	_ZdlPvm@PLT # Offset: 10885
.Ltmp2940:
    00002a8a: 	movq	0x60(%rsp), %rdi
    00002a8f: 	cmpq	0x40(%rsp), %rdi
    00002a94: 	je	.Ltmp2941 # Offset: 10900
    00002a96: 	movq	0x70(%rsp), %rax
    00002a9b: 	leaq	0x1(%rax), %rsi
    00002a9f: 	callq	_ZdlPvm@PLT # Offset: 10911
.Ltmp2941:
    00002aa4: 	movq	%rbp, %rdi
    00002aa7: 	callq	_Unwind_Resume@PLT # Offset: 10919
.Ltmp2938:
    00002aac: 	movq	0xc0(%rsp), %rdi
    00002ab4: 	cmpq	%rbx, %rdi
    00002ab7: 	je	.Ltmp2942 # Offset: 10935
    00002ab9: 	movq	0xd0(%rsp), %rax
    00002ac1: 	leaq	0x1(%rax), %rsi
    00002ac5: 	callq	_ZdlPvm@PLT # Offset: 10949
.Ltmp2942:
    00002aca: 	movq	0xa0(%rsp), %rdi
    00002ad2: 	leaq	0xb0(%rsp), %rax
    00002ada: 	cmpq	%rax, %rdi
    00002add: 	je	.Ltmp2943 # Offset: 10973
    00002adf: 	movq	0xb0(%rsp), %rax
    00002ae7: 	leaq	0x1(%rax), %rsi
    00002aeb: 	callq	_ZdlPvm@PLT # Offset: 10987
.Ltmp2943:
    00002af0: 	movq	0x80(%rsp), %rdi
    00002af8: 	cmpq	(%rsp), %rdi
    00002afc: 	je	.Ltmp2940 # Offset: 11004
    00002afe: 	movq	0x90(%rsp), %rax
    00002b06: 	leaq	0x1(%rax), %rsi
    00002b0a: 	callq	_ZdlPvm@PLT # Offset: 11018
    00002b0f: 	jmp	.Ltmp2940 # Offset: 11023
    00002b14: 	endbr64
    00002b18: 	jmp	.Ltmp2944 # Offset: 11032
    00002b1d: 	endbr64
    00002b21: 	jmp	.Ltmp2944 # Offset: 11041
    00002b26: 	endbr64
    00002b2a: 	movq	%rax, %rbp
    00002b2d: 	jmp	.Ltmp2945 # Offset: 11053
    00002b2f: 	endbr64
    00002b33: 	movq	%rax, %rbp
    00002b36: 	jmp	.Ltmp2940 # Offset: 11062
.Ltmp2945:
    00002b3b: 	movq	0xc0(%rsp), %rdi
    00002b43: 	leaq	0xd0(%rsp), %rax
    00002b4b: 	cmpq	%rax, %rdi
    00002b4e: 	jne	.Ltmp2946 # Offset: 11086
    00002b54: 	jmp	.Ltmp2940 # Offset: 11092
    00002b59: 	endbr64
    00002b5d: 	jmp	.Ltmp2939 # Offset: 11101
    00002b62: 	endbr64
    00002b66: 	jmp	.Ltmp2939 # Offset: 11110
    00002b6b: 	endbr64
    00002b6f: 	jmp	.Ltmp2939 # Offset: 11119
    00002b74: 	endbr64
    00002b78: 	jmp	.Ltmp2939 # Offset: 11128
    00002b7d: 	endbr64
    00002b81: 	jmp	.Ltmp2939 # Offset: 11137
    00002b86: 	endbr64
    00002b8a: 	jmp	.Ltmp2939 # Offset: 11146
    00002b8f: 	endbr64
    00002b93: 	jmp	.Ltmp2939 # Offset: 11155
    00002b98: 	endbr64
    00002b9c: 	jmp	.Ltmp2939 # Offset: 11164
    00002ba1: 	endbr64
.Ltmp2948:
    00002ba5: 	movq	%rax, %rbp
    00002ba8: 	jmp	.Ltmp2947 # Offset: 11176
    00002baa: 	endbr64
    00002bae: 	jmp	.Ltmp2948 # Offset: 11182
    00002bb0: 	endbr64
    00002bb4: 	jmp	.Ltmp2948 # Offset: 11188
    00002bb6: 	endbr64
    00002bba: 	jmp	.Ltmp2939 # Offset: 11194
.Ltmp2947:
    00002bbf: 	movq	0xc0(%rsp), %rdi
    00002bc7: 	cmpq	%rbx, %rdi
    00002bca: 	je	.Ltmp2943 # Offset: 11210
    00002bd0: 	movq	0xd0(%rsp), %rax
    00002bd8: 	leaq	0x1(%rax), %rsi
    00002bdc: 	callq	_ZdlPvm@PLT # Offset: 11228
    00002be1: 	jmp	.Ltmp2943 # Offset: 11233
    00002be6: 	endbr64
    00002bea: 	jmp	.Ltmp2948 # Offset: 11242
    00002bec: 	endbr64
    00002bf0: 	jmp	.Ltmp2944 # Offset: 11248
    00002bf5: 	endbr64
    00002bf9: 	jmp	.Ltmp2944 # Offset: 11257
    00002bfe: 	endbr64
    00002c02: 	jmp	.Ltmp2944 # Offset: 11266
    00002c07: 	endbr64
    00002c0b: 	jmp	.Ltmp2948 # Offset: 11275
    00002c0d: 	endbr64
    00002c11: 	jmp	.Ltmp2944 # Offset: 11281
    00002c16: 	endbr64
    00002c1a: 	jmp	.Ltmp2944 # Offset: 11290
    00002c1f: 	endbr64
    00002c23: 	jmp	.Ltmp2944 # Offset: 11299
    00002c28: 	endbr64
    00002c2c: 	jmp	.Ltmp2944 # Offset: 11308
    00002c31: 	endbr64
    00002c35: 	jmp	.Ltmp2944 # Offset: 11317
    00002c3a: 	endbr64
    00002c3e: 	jmp	.Ltmp2944 # Offset: 11326
    00002c43: 	endbr64
    00002c47: 	jmp	.Ltmp2944 # Offset: 11335
    00002c4c: 	endbr64
    00002c50: 	jmp	.Ltmp2944 # Offset: 11344
    00002c55: 	endbr64
    00002c59: 	jmp	.Ltmp2948 # Offset: 11353
    00002c5e: 	endbr64
    00002c62: 	movq	%rax, %rbp
    00002c65: 	jmp	.Ltmp2942 # Offset: 11365
    00002c6a: 	endbr64
    00002c6e: 	jmp	.Ltmp2939 # Offset: 11374
    00002c73: 	endbr64
    00002c77: 	jmp	.Ltmp2939 # Offset: 11383
    00002c7c: 	endbr64
    00002c80: 	jmp	.Ltmp2939 # Offset: 11392
    00002c85: 	endbr64
    00002c89: 	jmp	.Ltmp2939 # Offset: 11401
    00002c8e: 	endbr64
    00002c92: 	jmp	.Ltmp2939 # Offset: 11410
    00002c97: 	endbr64
    00002c9b: 	jmp	.Ltmp2939 # Offset: 11419
    00002ca0: 	endbr64
    00002ca4: 	jmp	.Ltmp2948 # Offset: 11428
    00002ca9: 	endbr64
    00002cad: 	jmp	.Ltmp2948 # Offset: 11437
    00002cb2: 	endbr64
    00002cb6: 	jmp	.Ltmp2948 # Offset: 11446
    00002cbb: 	endbr64
    00002cbf: 	jmp	.Ltmp2948 # Offset: 11455
    00002cc4: 	endbr64
    00002cc8: 	jmp	.Ltmp2948 # Offset: 11464
    00002ccd: 	endbr64
    00002cd1: 	jmp	.Ltmp2948 # Offset: 11473
    00002cd6: 	endbr64
    00002cda: 	jmp	.Ltmp2948 # Offset: 11482
    00002cdf: 	endbr64
    00002ce3: 	jmp	.Ltmp2948 # Offset: 11491
    00002ce8: 	endbr64
    00002cec: 	jmp	.Ltmp2944 # Offset: 11500
    00002cf1: 	endbr64
    00002cf5: 	jmp	.Ltmp2944 # Offset: 11509
    00002cfa: 	endbr64
    00002cfe: 	jmp	.Ltmp2944 # Offset: 11518
    00002d03: 	endbr64
    00002d07: 	jmp	.Ltmp2944 # Offset: 11527
    00002d0c: 	endbr64
    00002d10: 	jmp	.Ltmp2944 # Offset: 11536
    00002d15: 	endbr64
    00002d19: 	jmp	.Ltmp2944 # Offset: 11545
    00002d1e: 	endbr64
    00002d22: 	jmp	.Ltmp2944 # Offset: 11554
    00002d27: 	endbr64
    00002d2b: 	jmp	.Ltmp2944 # Offset: 11563
    00002d30: 	endbr64
    00002d34: 	jmp	.Ltmp2944 # Offset: 11572
    00002d39: 	endbr64
    00002d3d: 	jmp	.Ltmp2944 # Offset: 11581
    00002d42: 	endbr64
    00002d46: 	jmp	.Ltmp2944 # Offset: 11590
    00002d4b: 	endbr64
    00002d4f: 	jmp	.Ltmp2944 # Offset: 11599
    00002d54: 	endbr64
    00002d58: 	jmp	.Ltmp2944 # Offset: 11608
    00002d5d: 	endbr64
    00002d61: 	jmp	.Ltmp2944 # Offset: 11617
    00002d66: 	endbr64
    00002d6a: 	jmp	.Ltmp2944 # Offset: 11626
    00002d6f: 	endbr64
    00002d73: 	jmp	.Ltmp2944 # Offset: 11635
    00002d78: 	endbr64
.Ltmp2949:
    00002d7c: 	movq	%rax, %rbp
    00002d7f: 	jmp	.Ltmp2943 # Offset: 11647
    00002d84: 	endbr64
    00002d88: 	jmp	.Ltmp2949 # Offset: 11656
    00002d8a: 	endbr64
    00002d8e: 	jmp	.Ltmp2948 # Offset: 11662
    00002d93: 	endbr64
    00002d97: 	jmp	.Ltmp2948 # Offset: 11671
    00002d9c: 	endbr64
    00002da0: 	jmp	.Ltmp2948 # Offset: 11680
    00002da5: 	endbr64
    00002da9: 	jmp	.Ltmp2948 # Offset: 11689
    00002dae: 	endbr64
    00002db2: 	jmp	.Ltmp2948 # Offset: 11698
    00002db7: 	endbr64
    00002dbb: 	jmp	.Ltmp2948 # Offset: 11707
    00002dc0: 	endbr64
    00002dc4: 	jmp	.Ltmp2944 # Offset: 11716
    00002dc9: 	endbr64
    00002dcd: 	jmp	.Ltmp2944 # Offset: 11725
    00002dd2: 	endbr64
    00002dd6: 	jmp	.Ltmp2944 # Offset: 11734
    00002ddb: 	endbr64
    00002ddf: 	jmp	.Ltmp2944 # Offset: 11743
    00002de4: 	endbr64
    00002de8: 	jmp	.Ltmp2948 # Offset: 11752
    00002ded: 	endbr64
    00002df1: 	jmp	.Ltmp2948 # Offset: 11761
    00002df6: 	endbr64
    00002dfa: 	jmp	.Ltmp2948 # Offset: 11770
    00002dff: 	endbr64
    00002e03: 	jmp	.Ltmp2948 # Offset: 11779
    00002e08: 	endbr64
    00002e0c: 	jmp	.Ltmp2948 # Offset: 11788
    00002e11: 	endbr64
    00002e15: 	jmp	.Ltmp2948 # Offset: 11797
    00002e1a: 	endbr64
    00002e1e: 	jmp	.Ltmp2948 # Offset: 11806
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIhEvv"

Binary Function "_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 274
  State       : disassembled
  Address     : 0x22ff0
  Size        : 0x26c
  MaxSize     : 0x270
  Offset      : 0x22ff0
  Section     : .text
  Orc Section : .local.text._Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0273:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	xorl	%r15d, %r15d
    00000009: 	pushq	%r14
    0000000b: 	leaq	DATAat0x381c8(%rip), %r14
    00000012: 	pushq	%r13
    00000014: 	movq	%rcx, %r13
    00000017: 	pushq	%r12
    00000019: 	movq	%rdx, %r12
    0000001c: 	pushq	%rbp
    0000001d: 	movl	%esi, %ebp
    0000001f: 	pushq	%rbx
    00000020: 	movq	%rdi, %rbx
    00000023: 	subq	$0x28, %rsp
    00000027: 	movsd	%xmm0, 0x8(%rsp)
    0000002d: 	movq	%fs:0x28, %rax
    00000036: 	movq	%rax, 0x18(%rsp)
    0000003b: 	xorl	%eax, %eax
    0000003d: 	callq	clock@PLT # Offset: 61
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	movl	iterations(%rip), %eax
    0000004f: 	testl	%eax, %eax
    00000051: 	jle	.Ltmp2950 # Offset: 81
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2953:
    00000058: 	movsd	0x8(%rsp), %xmm0
    0000005e: 	movl	%ebp, %esi
    00000060: 	movq	%rbx, %rdi
    00000063: 	callq	*%r12 # Offset: 99
    00000066: 	movsd	DATAat0x38a58(%rip), %xmm2
    0000006e: 	mulsd	init_value(%rip), %xmm2
    00000076: 	movapd	%xmm0, %xmm1
    0000007a: 	subsd	%xmm2, %xmm1
    0000007e: 	movapd	%xmm0, %xmm2
    00000082: 	andpd	DATAat0x38920(%rip), %xmm2
    0000008a: 	comisd	DATAat0x38a60(%rip), %xmm2
    00000092: 	jbe	.Ltmp2951 # Offset: 146
    00000094: 	divsd	%xmm0, %xmm1
.Ltmp2951:
    00000098: 	andpd	DATAat0x38920(%rip), %xmm1
    000000a0: 	movsd	DATAat0x38a68(%rip), %xmm3
    000000a8: 	comisd	%xmm1, %xmm3
    000000ac: 	jbe	.Ltmp2952 # Offset: 172
    000000b2: 	addl	$0x1, %r15d
    000000b6: 	cmpl	%r15d, iterations(%rip)
    000000bd: 	jg	.Ltmp2953 # Offset: 189
.Ltmp2950:
    000000bf: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000c6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000cd: 	subq	$0x20, %rax
    000000d1: 	cmpq	%rax, %rbx
    000000d4: 	je	.Ltmp2954 # Offset: 212
    000000da: 	leaq	0x10(%rbx), %rdi
    000000de: 	movq	0x8(%r13), %r12
    000000e2: 	movq	%rdi, (%rbx)
    000000e5: 	movq	(%r13), %rbp
    000000e9: 	movq	%rbp, %rax
    000000ec: 	addq	%r12, %rax
    000000ef: 	je	.Ltmp2955 # Offset: 239
    000000f1: 	testq	%rbp, %rbp
    000000f4: 	je	.Ltmp2956 # Offset: 244
.Ltmp2955:
    000000fa: 	movq	%r12, 0x10(%rsp)
    000000ff: 	cmpq	$0xf, %r12
    00000103: 	ja	.Ltmp2957 # Offset: 259
    00000109: 	cmpq	$0x1, %r12
    0000010d: 	jne	.Ltmp2958 # Offset: 269
    00000113: 	movzbl	(%rbp), %eax
    00000117: 	movb	%al, 0x10(%rbx)
.Ltmp2961:
    0000011a: 	movq	%r12, 0x8(%rbx)
    0000011e: 	movb	$0x0, (%rdi,%r12)
    00000123: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000012a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000131: 	addq	$0x20, %rax
    00000135: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000013c: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000143: 	je	.Ltmp2959 # Offset: 323
.Ltmp2962:
    00000149: 	movq	-0x20(%rax), %rbp
    0000014d: 	callq	clock@PLT # Offset: 333
    00000152: 	movq	%rax, end_time(%rip)
    00000159: 	movq	0x18(%rsp), %rdx
    0000015e: 	subq	%fs:0x28, %rdx
    00000167: 	jne	.Ltmp2960 # Offset: 359
    0000016d: 	subq	start_time(%rip), %rax
    00000174: 	pxor	%xmm0, %xmm0
    00000178: 	movq	%rbp, %rdi
    0000017b: 	cvtsi2sd	%rax, %xmm0
    00000180: 	divsd	DATAat0x38a48(%rip), %xmm0
    00000188: 	addq	$0x28, %rsp
    0000018c: 	popq	%rbx
    0000018d: 	popq	%rbp
    0000018e: 	popq	%r12
    00000190: 	popq	%r13
    00000192: 	popq	%r14
    00000194: 	popq	%r15
    00000196: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 406
    0000019b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2952:
    000001a0: 	movq	(%r13), %rdx
    000001a4: 	xorl	%eax, %eax
    000001a6: 	movq	%r14, %rsi
    000001a9: 	movl	$0x1, %edi
    000001ae: 	addl	$0x1, %r15d
    000001b2: 	callq	__printf_chk@PLT # Offset: 434
    000001b7: 	cmpl	%r15d, iterations(%rip)
    000001be: 	jg	.Ltmp2953 # Offset: 446
    000001c4: 	jmp	.Ltmp2950 # Offset: 452
    000001c9: 	nopl	(%rax) # Size: 7
.Ltmp2957:
    000001d0: 	movq	%rbx, %rdi
    000001d3: 	leaq	0x10(%rsp), %rsi
    000001d8: 	xorl	%edx, %edx
    000001da: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 474
    000001df: 	movq	%rax, (%rbx)
    000001e2: 	movq	%rax, %rdi
    000001e5: 	movq	0x10(%rsp), %rax
    000001ea: 	movq	%rax, 0x10(%rbx)
.Ltmp2963:
    000001ee: 	movq	%r12, %rdx
    000001f1: 	movq	%rbp, %rsi
    000001f4: 	callq	memcpy@PLT # Offset: 500
    000001f9: 	movq	0x10(%rsp), %r12
    000001fe: 	movq	(%rbx), %rdi
    00000201: 	jmp	.Ltmp2961 # Offset: 513
    00000206: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2954:
    00000210: 	movq	%r13, %rsi
    00000213: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000021a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 538
    0000021f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000226: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000022d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000234: 	jne	.Ltmp2962 # Offset: 564
.Ltmp2959:
    0000023a: 	movq	-0x8(%rdx), %rax
    0000023e: 	addq	$0x200, %rax
    00000244: 	jmp	.Ltmp2962 # Offset: 580
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp2958:
    00000250: 	testq	%r12, %r12
    00000253: 	je	.Ltmp2961 # Offset: 595
    00000259: 	jmp	.Ltmp2963 # Offset: 601
.Ltmp2960:
    0000025b: 	callq	__stack_chk_fail@PLT # Offset: 603
.Ltmp2956:
    00000260: 	leaq	DATAat0x38158(%rip), %rdi
    00000267: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 615
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_one_loop3IdPFdPKdidEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 275
  State       : disassembled
  Address     : 0x23260
  Size        : 0x27c
  MaxSize     : 0x280
  Offset      : 0x23260
  Section     : .text
  Orc Section : .local.text._Z14test_one_loop3IdPFdPKdidEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0274:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%edx, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%r8, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rcx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movl	%esi, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rdi, %rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x18(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	callq	clock@PLT # Offset: 48
    00000035: 	movq	%rax, start_time(%rip)
    0000003c: 	movl	iterations(%rip), %eax
    00000042: 	testl	%eax, %eax
    00000044: 	jle	.Ltmp2964 # Offset: 68
    0000004a: 	pxor	%xmm4, %xmm4
    0000004e: 	xorl	%r15d, %r15d
    00000051: 	cvtsi2sd	%r14d, %xmm4
    00000056: 	leaq	DATAat0x381c8(%rip), %r14
    0000005d: 	movsd	%xmm4, 0x8(%rsp)
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2967:
    00000068: 	movsd	0x8(%rsp), %xmm0
    0000006e: 	movl	%ebp, %esi
    00000070: 	movq	%rbx, %rdi
    00000073: 	callq	*%r12 # Offset: 115
    00000076: 	movsd	DATAat0x38a58(%rip), %xmm2
    0000007e: 	mulsd	init_value(%rip), %xmm2
    00000086: 	movapd	%xmm0, %xmm1
    0000008a: 	subsd	%xmm2, %xmm1
    0000008e: 	movapd	%xmm0, %xmm2
    00000092: 	andpd	DATAat0x38920(%rip), %xmm2
    0000009a: 	comisd	DATAat0x38a60(%rip), %xmm2
    000000a2: 	jbe	.Ltmp2965 # Offset: 162
    000000a4: 	divsd	%xmm0, %xmm1
.Ltmp2965:
    000000a8: 	andpd	DATAat0x38920(%rip), %xmm1
    000000b0: 	movsd	DATAat0x38a68(%rip), %xmm3
    000000b8: 	comisd	%xmm1, %xmm3
    000000bc: 	jbe	.Ltmp2966 # Offset: 188
    000000c2: 	addl	$0x1, %r15d
    000000c6: 	cmpl	%r15d, iterations(%rip)
    000000cd: 	jg	.Ltmp2967 # Offset: 205
.Ltmp2964:
    000000cf: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000d6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000dd: 	subq	$0x20, %rax
    000000e1: 	cmpq	%rax, %rbx
    000000e4: 	je	.Ltmp2968 # Offset: 228
    000000ea: 	leaq	0x10(%rbx), %rdi
    000000ee: 	movq	0x8(%r13), %r12
    000000f2: 	movq	%rdi, (%rbx)
    000000f5: 	movq	(%r13), %rbp
    000000f9: 	movq	%rbp, %rax
    000000fc: 	addq	%r12, %rax
    000000ff: 	je	.Ltmp2969 # Offset: 255
    00000101: 	testq	%rbp, %rbp
    00000104: 	je	.Ltmp2970 # Offset: 260
.Ltmp2969:
    0000010a: 	movq	%r12, 0x10(%rsp)
    0000010f: 	cmpq	$0xf, %r12
    00000113: 	ja	.Ltmp2971 # Offset: 275
    00000119: 	cmpq	$0x1, %r12
    0000011d: 	jne	.Ltmp2972 # Offset: 285
    00000123: 	movzbl	(%rbp), %eax
    00000127: 	movb	%al, 0x10(%rbx)
.Ltmp2975:
    0000012a: 	movq	%r12, 0x8(%rbx)
    0000012e: 	movb	$0x0, (%rdi,%r12)
    00000133: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000013a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000141: 	addq	$0x20, %rax
    00000145: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000014c: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000153: 	je	.Ltmp2973 # Offset: 339
.Ltmp2976:
    00000159: 	movq	-0x20(%rax), %rbp
    0000015d: 	callq	clock@PLT # Offset: 349
    00000162: 	movq	%rax, end_time(%rip)
    00000169: 	movq	0x18(%rsp), %rdx
    0000016e: 	subq	%fs:0x28, %rdx
    00000177: 	jne	.Ltmp2974 # Offset: 375
    0000017d: 	subq	start_time(%rip), %rax
    00000184: 	pxor	%xmm0, %xmm0
    00000188: 	movq	%rbp, %rdi
    0000018b: 	cvtsi2sd	%rax, %xmm0
    00000190: 	divsd	DATAat0x38a48(%rip), %xmm0
    00000198: 	addq	$0x28, %rsp
    0000019c: 	popq	%rbx
    0000019d: 	popq	%rbp
    0000019e: 	popq	%r12
    000001a0: 	popq	%r13
    000001a2: 	popq	%r14
    000001a4: 	popq	%r15
    000001a6: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 422
    000001ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2966:
    000001b0: 	movq	(%r13), %rdx
    000001b4: 	xorl	%eax, %eax
    000001b6: 	movq	%r14, %rsi
    000001b9: 	movl	$0x1, %edi
    000001be: 	addl	$0x1, %r15d
    000001c2: 	callq	__printf_chk@PLT # Offset: 450
    000001c7: 	cmpl	%r15d, iterations(%rip)
    000001ce: 	jg	.Ltmp2967 # Offset: 462
    000001d4: 	jmp	.Ltmp2964 # Offset: 468
    000001d9: 	nopl	(%rax) # Size: 7
.Ltmp2971:
    000001e0: 	movq	%rbx, %rdi
    000001e3: 	leaq	0x10(%rsp), %rsi
    000001e8: 	xorl	%edx, %edx
    000001ea: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 490
    000001ef: 	movq	%rax, (%rbx)
    000001f2: 	movq	%rax, %rdi
    000001f5: 	movq	0x10(%rsp), %rax
    000001fa: 	movq	%rax, 0x10(%rbx)
.Ltmp2977:
    000001fe: 	movq	%r12, %rdx
    00000201: 	movq	%rbp, %rsi
    00000204: 	callq	memcpy@PLT # Offset: 516
    00000209: 	movq	0x10(%rsp), %r12
    0000020e: 	movq	(%rbx), %rdi
    00000211: 	jmp	.Ltmp2975 # Offset: 529
    00000216: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2968:
    00000220: 	movq	%r13, %rsi
    00000223: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000022a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 554
    0000022f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000236: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000023d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000244: 	jne	.Ltmp2976 # Offset: 580
.Ltmp2973:
    0000024a: 	movq	-0x8(%rdx), %rax
    0000024e: 	addq	$0x200, %rax
    00000254: 	jmp	.Ltmp2976 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp2972:
    00000260: 	testq	%r12, %r12
    00000263: 	je	.Ltmp2975 # Offset: 611
    00000269: 	jmp	.Ltmp2977 # Offset: 617
.Ltmp2974:
    0000026b: 	callq	__stack_chk_fail@PLT # Offset: 619
.Ltmp2970:
    00000270: 	leaq	DATAat0x38158(%rip), %rdi
    00000277: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 631
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_one_loop3IdPFdPKdidEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIdEvv" after disassembly {
  Number      : 276
  State       : disassembled
  Address     : 0x234e0
  Size        : 0x2e7c
  MaxSize     : 0x2e80
  Offset      : 0x234e0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIdEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0275:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0xf000(%rsp), %r11
.Ltmp2978:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp2978 # Offset: 37
    00000027: 	subq	$0xaf8, %rsp
    0000002e: 	movsd	init_value(%rip), %xmm0
    00000036: 	unpcklpd	%xmm0, %xmm0
    0000003a: 	movq	%fs:0x28, %rax
    00000043: 	movq	%rax, 0xfae8(%rsp)
    0000004b: 	xorl	%eax, %eax
    0000004d: 	leaq	0x70(%rsp), %rax
    00000052: 	movl	$0x62756f64, 0x70(%rsp)
    0000005a: 	leaq	0xe0(%rsp), %rbp
    00000062: 	movb	$0x0, 0x76(%rsp)
    00000067: 	leaq	0xfae0(%rsp), %rdx
    0000006f: 	movq	$0x6, 0x68(%rsp)
    00000078: 	movq	%rax, 0x40(%rsp)
    0000007d: 	movq	%rax, 0x60(%rsp)
    00000082: 	movl	$0x656c, %eax
    00000087: 	movw	%ax, 0x74(%rsp)
    0000008c: 	movq	%rbp, %rax
    0000008f: 	nop # Size: 1
.Ltmp2979:
    00000090: 	movaps	%xmm0, (%rax)
    00000093: 	addq	$0x10, %rax
    00000097: 	cmpq	%rax, %rdx
    0000009a: 	jne	.Ltmp2979 # Offset: 154
    0000009c: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm1
    000000a4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000ab: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm2
    000000b3: 	movq	_Z7gLabelsB5cxx11+56(%rip), %r15
    000000ba: 	movhlps	%xmm1, %xmm5
    000000bd: 	movq	%rax, 0x10(%rsp)
    000000c2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    000000c9: 	movq	%xmm5, %rcx
    000000ce: 	movaps	%xmm2, 0x30(%rsp)
    000000d3: 	movq	%xmm2, %r12
    000000d8: 	leaq	0x8(%rcx), %r13
    000000dc: 	movq	%rax, 0x8(%rsp)
    000000e1: 	movq	%r13, (%rsp)
    000000e5: 	movaps	%xmm1, 0x20(%rsp)
    000000ea: 	movq	%xmm5, 0x48(%rsp)
    000000f0: 	movq	%xmm1, 0x18(%rsp)
    000000f6: 	cmpq	%r13, %rax
    000000f9: 	jbe	.Ltmp2980 # Offset: 249
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2983:
    00000100: 	movq	(%rsp), %rax
    00000104: 	movq	(%rax), %r14
    00000107: 	leaq	0x200(%r14), %rbx
    0000010e: 	nop # Size: 2
.Ltmp2982:
    00000110: 	movq	(%r14), %rdi
    00000113: 	leaq	0x10(%r14), %rdx
    00000117: 	cmpq	%rdx, %rdi
    0000011a: 	je	.Ltmp2981 # Offset: 282
    00000120: 	movq	0x10(%r14), %rax
    00000124: 	addq	$0x20, %r14
    00000128: 	leaq	0x1(%rax), %rsi
    0000012c: 	callq	_ZdlPvm@PLT # Offset: 300
    00000131: 	cmpq	%rbx, %r14
    00000134: 	jne	.Ltmp2982 # Offset: 308
    00000136: 	addq	$0x8, (%rsp)
    0000013b: 	movq	(%rsp), %rax
    0000013f: 	cmpq	%rax, 0x8(%rsp)
    00000144: 	ja	.Ltmp2983 # Offset: 324
.Ltmp2980:
    00000146: 	movq	0x48(%rsp), %rcx
    0000014b: 	cmpq	%rcx, 0x8(%rsp)
    00000150: 	jne	.Ltmp2984 # Offset: 336
    00000152: 	jmp	.Ltmp2985 # Offset: 338
    00000157: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2987:
    00000160: 	movq	(%r12), %rdi
    00000164: 	leaq	0x10(%r12), %rax
    00000169: 	cmpq	%rax, %rdi
    0000016c: 	je	.Ltmp2986 # Offset: 364
    0000016e: 	movq	0x10(%r12), %rax
    00000173: 	leaq	0x1(%rax), %rsi
    00000177: 	callq	_ZdlPvm@PLT # Offset: 375
.Ltmp2986:
    0000017c: 	addq	$0x20, %r12
.Ltmp2984:
    00000180: 	cmpq	0x18(%rsp), %r12
    00000185: 	jne	.Ltmp2987 # Offset: 389
    00000187: 	cmpq	%r15, 0x10(%rsp)
    0000018c: 	je	.Ltmp2988 # Offset: 396
    0000018e: 	nop # Size: 2
.Ltmp2990:
    00000190: 	movq	(%r15), %rdi
    00000193: 	leaq	0x10(%r15), %rax
    00000197: 	cmpq	%rax, %rdi
    0000019a: 	je	.Ltmp2989 # Offset: 410
    0000019c: 	movq	0x10(%r15), %rax
    000001a0: 	leaq	0x1(%rax), %rsi
    000001a4: 	callq	_ZdlPvm@PLT # Offset: 420
.Ltmp2989:
    000001a9: 	addq	$0x20, %r15
    000001ad: 	cmpq	%r15, 0x10(%rsp)
    000001b2: 	jne	.Ltmp2990 # Offset: 434
.Ltmp2988:
    000001b4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    000001bb: 	leaq	0x8(%rax), %rbx
    000001bf: 	cmpq	%r13, %rbx
    000001c2: 	jbe	.Ltmp2991 # Offset: 450
    000001c4: 	nopl	(%rax) # Size: 4
.Ltmp2992:
    000001c8: 	movq	(%r13), %rdi
    000001cc: 	movl	$0x200, %esi
    000001d1: 	addq	$0x8, %r13
    000001d5: 	callq	_ZdlPvm@PLT # Offset: 469
    000001da: 	cmpq	%r13, %rbx
    000001dd: 	ja	.Ltmp2992 # Offset: 477
.Ltmp2991:
    000001df: 	movdqa	0x30(%rsp), %xmm3
    000001e5: 	movdqa	0x20(%rsp), %xmm4
    000001eb: 	leaq	0xc0(%rsp), %r12
    000001f3: 	leaq	0x60(%rsp), %r13
    000001f8: 	leaq	DATAat0x381d8(%rip), %rdx
    000001ff: 	movq	%r13, %rsi
    00000202: 	movq	%r12, %rdi
    00000205: 	movaps	%xmm3, _Z7gLabelsB5cxx11+48(%rip)
    0000020c: 	movaps	%xmm4, _Z7gLabelsB5cxx11+64(%rip)
    00000213: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 531
    00000218: 	leaq	_Z17test_for_loop_optIdET_PKS0_iS0_(%rip), %r15
    0000021f: 	movq	%r12, %rcx
    00000222: 	movl	$0x1f40, %esi
    00000227: 	movq	%rbp, %rdi
    0000022a: 	movsd	init_value(%rip), %xmm0
    00000232: 	movq	%r15, %rdx
    00000235: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 565
    0000023a: 	movq	0xc0(%rsp), %rdi
    00000242: 	leaq	0xd0(%rsp), %rbx
    0000024a: 	cmpq	%rbx, %rdi
    0000024d: 	je	.Ltmp2993 # Offset: 589
    0000024f: 	movq	0xd0(%rsp), %rax
    00000257: 	leaq	0x1(%rax), %rsi
    0000025b: 	callq	_ZdlPvm@PLT # Offset: 603
.Ltmp2993:
    00000260: 	leaq	DATAat0x381ee(%rip), %rdx
    00000267: 	movq	%r13, %rsi
    0000026a: 	movq	%r12, %rdi
    0000026d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 621
    00000272: 	movsd	init_value(%rip), %xmm0
    0000027a: 	movq	%r12, %rcx
    0000027d: 	movl	$0x1f40, %esi
    00000282: 	movq	%rbp, %rdi
    00000285: 	leaq	_Z19test_while_loop_optIdET_PKS0_iS0_(%rip), %rdx
    0000028c: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 652
    00000291: 	movq	0xc0(%rsp), %rdi
    00000299: 	cmpq	%rbx, %rdi
    0000029c: 	je	.Ltmp2994 # Offset: 668
    0000029e: 	movq	0xd0(%rsp), %rax
    000002a6: 	leaq	0x1(%rax), %rsi
    000002aa: 	callq	_ZdlPvm@PLT # Offset: 682
.Ltmp2994:
    000002af: 	movq	0x60(%rsp), %rax
    000002b4: 	movq	0x68(%rsp), %r14
    000002b9: 	movq	%rbx, 0xc0(%rsp)
    000002c1: 	movq	%rax, %rcx
    000002c4: 	movq	%rax, (%rsp)
    000002c8: 	addq	%r14, %rcx
    000002cb: 	je	.Ltmp2995 # Offset: 715
    000002cd: 	testq	%rax, %rax
    000002d0: 	je	.Ltmp2996 # Offset: 720
.Ltmp2995:
    000002d6: 	movq	%r14, 0x58(%rsp)
    000002db: 	cmpq	$0xf, %r14
    000002df: 	ja	.Ltmp2997 # Offset: 735
    000002e5: 	cmpq	$0x1, %r14
    000002e9: 	jne	.Ltmp2998 # Offset: 745
    000002ef: 	movq	(%rsp), %rax
    000002f3: 	movzbl	(%rax), %eax
    000002f6: 	movb	%al, 0xd0(%rsp)
    000002fd: 	movq	%rbx, %rax
.Ltmp3169:
    00000300: 	movq	%r14, 0xc8(%rsp)
    00000308: 	movb	$0x0, (%rax,%r14)
    0000030d: 	movabsq	$0x3fffffffffffffff, %rax
    00000317: 	subq	0xc8(%rsp), %rax
    0000031f: 	cmpq	$0x13, %rax
    00000323: 	jbe	.Ltmp2999 # Offset: 803
    00000329: 	movl	$0x14, %edx
    0000032e: 	leaq	DATAat0x38206(%rip), %rsi
    00000335: 	movq	%r12, %rdi
    00000338: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 824
    0000033d: 	movsd	init_value(%rip), %xmm0
    00000345: 	movq	%r12, %rcx
    00000348: 	movl	$0x1f40, %esi
    0000034d: 	movq	%rbp, %rdi
    00000350: 	leaq	_Z16test_do_loop_optIdET_PKS0_iS0_(%rip), %rdx
    00000357: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 855
    0000035c: 	movq	0xc0(%rsp), %rdi
    00000364: 	cmpq	%rbx, %rdi
    00000367: 	je	.Ltmp3000 # Offset: 871
    00000369: 	movq	0xd0(%rsp), %rax
    00000371: 	leaq	0x1(%rax), %rsi
    00000375: 	callq	_ZdlPvm@PLT # Offset: 885
.Ltmp3000:
    0000037a: 	leaq	DATAat0x3821b(%rip), %rdx
    00000381: 	movq	%r13, %rsi
    00000384: 	movq	%r12, %rdi
    00000387: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 903
    0000038c: 	movsd	init_value(%rip), %xmm0
    00000394: 	movq	%r12, %rcx
    00000397: 	movl	$0x1f40, %esi
    0000039c: 	movq	%rbp, %rdi
    0000039f: 	leaq	_Z18test_goto_loop_optIdET_PKS0_iS0_(%rip), %rdx
    000003a6: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 934
    000003ab: 	movq	0xc0(%rsp), %rdi
    000003b3: 	cmpq	%rbx, %rdi
    000003b6: 	je	.Ltmp3001 # Offset: 950
    000003b8: 	movq	0xd0(%rsp), %rax
    000003c0: 	leaq	0x1(%rax), %rsi
    000003c4: 	callq	_ZdlPvm@PLT # Offset: 964
.Ltmp3001:
    000003c9: 	leaq	DATAat0x38232(%rip), %rdx
    000003d0: 	movq	%r13, %rsi
    000003d3: 	movq	%r12, %rdi
    000003d6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 982
    000003db: 	movsd	init_value(%rip), %xmm0
    000003e3: 	movq	%r12, %rcx
    000003e6: 	movl	$0x1f40, %esi
    000003eb: 	movq	%rbp, %rdi
    000003ee: 	leaq	_Z19test_for_loop_paramIdET_PKS0_iS0_(%rip), %rdx
    000003f5: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1013
    000003fa: 	movq	0xc0(%rsp), %rdi
    00000402: 	cmpq	%rbx, %rdi
    00000405: 	je	.Ltmp3002 # Offset: 1029
    00000407: 	movq	0xd0(%rsp), %rax
    0000040f: 	leaq	0x1(%rax), %rsi
    00000413: 	callq	_ZdlPvm@PLT # Offset: 1043
.Ltmp3002:
    00000418: 	movq	0x60(%rsp), %rax
    0000041d: 	movq	0x68(%rsp), %r14
    00000422: 	movq	%rbx, 0xc0(%rsp)
    0000042a: 	movq	%rax, %rcx
    0000042d: 	movq	%rax, (%rsp)
    00000431: 	addq	%r14, %rcx
    00000434: 	je	.Ltmp3003 # Offset: 1076
    00000436: 	testq	%rax, %rax
    00000439: 	je	.Ltmp3004 # Offset: 1081
.Ltmp3003:
    0000043f: 	movq	%r14, 0x58(%rsp)
    00000444: 	cmpq	$0xf, %r14
    00000448: 	ja	.Ltmp3005 # Offset: 1096
    0000044e: 	cmpq	$0x1, %r14
    00000452: 	jne	.Ltmp3006 # Offset: 1106
    00000458: 	movq	(%rsp), %rax
    0000045c: 	movzbl	(%rax), %eax
    0000045f: 	movb	%al, 0xd0(%rsp)
    00000466: 	movq	%rbx, %rax
.Ltmp3183:
    00000469: 	movq	%r14, 0xc8(%rsp)
    00000471: 	movb	$0x0, (%rax,%r14)
    00000476: 	movabsq	$0x3fffffffffffffff, %rax
    00000480: 	subq	0xc8(%rsp), %rax
    00000488: 	cmpq	$0x17, %rax
    0000048c: 	jbe	.Ltmp3007 # Offset: 1164
    00000492: 	movl	$0x18, %edx
    00000497: 	leaq	DATAat0x3824a(%rip), %rsi
    0000049e: 	movq	%r12, %rdi
    000004a1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1185
    000004a6: 	movsd	init_value(%rip), %xmm0
    000004ae: 	movq	%r12, %rcx
    000004b1: 	movl	$0x1f40, %esi
    000004b6: 	movq	%rbp, %rdi
    000004b9: 	leaq	_Z20test_for_loop_param2IdET_PKS0_iS0_(%rip), %rdx
    000004c0: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1216
    000004c5: 	movq	0xc0(%rsp), %rdi
    000004cd: 	cmpq	%rbx, %rdi
    000004d0: 	je	.Ltmp3008 # Offset: 1232
    000004d2: 	movq	0xd0(%rsp), %rax
    000004da: 	leaq	0x1(%rax), %rsi
    000004de: 	callq	_ZdlPvm@PLT # Offset: 1246
.Ltmp3008:
    000004e3: 	movq	0x60(%rsp), %rax
    000004e8: 	movq	0x68(%rsp), %r14
    000004ed: 	movq	%rbx, 0xc0(%rsp)
    000004f5: 	movq	%rax, %rcx
    000004f8: 	movq	%rax, (%rsp)
    000004fc: 	addq	%r14, %rcx
    000004ff: 	je	.Ltmp3009 # Offset: 1279
    00000501: 	testq	%rax, %rax
    00000504: 	je	.Ltmp3010 # Offset: 1284
.Ltmp3009:
    0000050a: 	movq	%r14, 0x58(%rsp)
    0000050f: 	cmpq	$0xf, %r14
    00000513: 	ja	.Ltmp3011 # Offset: 1299
    00000519: 	cmpq	$0x1, %r14
    0000051d: 	jne	.Ltmp3012 # Offset: 1309
    00000523: 	movq	(%rsp), %rax
    00000527: 	movzbl	(%rax), %eax
    0000052a: 	movb	%al, 0xd0(%rsp)
    00000531: 	movq	%rbx, %rax
.Ltmp3181:
    00000534: 	movq	%r14, 0xc8(%rsp)
    0000053c: 	movb	$0x0, (%rax,%r14)
    00000541: 	movabsq	$0x3fffffffffffffff, %rax
    0000054b: 	subq	0xc8(%rsp), %rax
    00000553: 	cmpq	$0x17, %rax
    00000557: 	jbe	.Ltmp3013 # Offset: 1367
    0000055d: 	movl	$0x18, %edx
    00000562: 	leaq	DATAat0x38263(%rip), %rsi
    00000569: 	movq	%r12, %rdi
    0000056c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1388
    00000571: 	movsd	init_value(%rip), %xmm0
    00000579: 	movq	%r12, %rcx
    0000057c: 	movl	$0x1f40, %esi
    00000581: 	movq	%rbp, %rdi
    00000584: 	leaq	_Z20test_for_loop_param3IdET_PKS0_iS0_(%rip), %rdx
    0000058b: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1419
    00000590: 	movq	0xc0(%rsp), %rdi
    00000598: 	cmpq	%rbx, %rdi
    0000059b: 	je	.Ltmp3014 # Offset: 1435
    0000059d: 	movq	0xd0(%rsp), %rax
    000005a5: 	leaq	0x1(%rax), %rsi
    000005a9: 	callq	_ZdlPvm@PLT # Offset: 1449
.Ltmp3014:
    000005ae: 	leaq	DATAat0x3827c(%rip), %rdx
    000005b5: 	movq	%r13, %rsi
    000005b8: 	movq	%r12, %rdi
    000005bb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1467
    000005c0: 	movsd	init_value(%rip), %xmm0
    000005c8: 	movq	%r12, %rcx
    000005cb: 	movl	$0x1f40, %esi
    000005d0: 	movq	%rbp, %rdi
    000005d3: 	leaq	_Z21test_while_loop_paramIdET_PKS0_iS0_(%rip), %rdx
    000005da: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1498
    000005df: 	movq	0xc0(%rsp), %rdi
    000005e7: 	cmpq	%rbx, %rdi
    000005ea: 	je	.Ltmp3015 # Offset: 1514
    000005ec: 	movq	0xd0(%rsp), %rax
    000005f4: 	leaq	0x1(%rax), %rsi
    000005f8: 	callq	_ZdlPvm@PLT # Offset: 1528
.Ltmp3015:
    000005fd: 	leaq	DATAat0x38296(%rip), %rdx
    00000604: 	movq	%r13, %rsi
    00000607: 	movq	%r12, %rdi
    0000060a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1546
    0000060f: 	movsd	init_value(%rip), %xmm0
    00000617: 	movq	%r12, %rcx
    0000061a: 	movl	$0x1f40, %esi
    0000061f: 	movq	%rbp, %rdi
    00000622: 	leaq	_Z22test_while_loop_param2IdET_PKS0_iS0_(%rip), %rdx
    00000629: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1577
    0000062e: 	movq	0xc0(%rsp), %rdi
    00000636: 	cmpq	%rbx, %rdi
    00000639: 	je	.Ltmp3016 # Offset: 1593
    0000063b: 	movq	0xd0(%rsp), %rax
    00000643: 	leaq	0x1(%rax), %rsi
    00000647: 	callq	_ZdlPvm@PLT # Offset: 1607
.Ltmp3016:
    0000064c: 	movq	0x60(%rsp), %rax
    00000651: 	movq	0x68(%rsp), %r14
    00000656: 	movq	%rbx, 0xc0(%rsp)
    0000065e: 	movq	%rax, %rcx
    00000661: 	movq	%rax, (%rsp)
    00000665: 	addq	%r14, %rcx
    00000668: 	je	.Ltmp3017 # Offset: 1640
    0000066a: 	testq	%rax, %rax
    0000066d: 	je	.Ltmp3018 # Offset: 1645
.Ltmp3017:
    00000673: 	movq	%r14, 0x58(%rsp)
    00000678: 	cmpq	$0xf, %r14
    0000067c: 	ja	.Ltmp3019 # Offset: 1660
    00000682: 	cmpq	$0x1, %r14
    00000686: 	jne	.Ltmp3020 # Offset: 1670
    0000068c: 	movq	(%rsp), %rax
    00000690: 	movzbl	(%rax), %eax
    00000693: 	movb	%al, 0xd0(%rsp)
    0000069a: 	movq	%rbx, %rax
.Ltmp3179:
    0000069d: 	movq	%r14, 0xc8(%rsp)
    000006a5: 	movb	$0x0, (%rax,%r14)
    000006aa: 	movabsq	$0x3fffffffffffffff, %rax
    000006b4: 	subq	0xc8(%rsp), %rax
    000006bc: 	cmpq	$0x19, %rax
    000006c0: 	jbe	.Ltmp3021 # Offset: 1728
    000006c6: 	movl	$0x1a, %edx
    000006cb: 	leaq	DATAat0x382b1(%rip), %rsi
    000006d2: 	movq	%r12, %rdi
    000006d5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1749
    000006da: 	movsd	init_value(%rip), %xmm0
    000006e2: 	movq	%r12, %rcx
    000006e5: 	movl	$0x1f40, %esi
    000006ea: 	movq	%rbp, %rdi
    000006ed: 	leaq	_Z22test_while_loop_param3IdET_PKS0_iS0_(%rip), %rdx
    000006f4: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1780
    000006f9: 	movq	0xc0(%rsp), %rdi
    00000701: 	cmpq	%rbx, %rdi
    00000704: 	je	.Ltmp3022 # Offset: 1796
    00000706: 	movq	0xd0(%rsp), %rax
    0000070e: 	leaq	0x1(%rax), %rsi
    00000712: 	callq	_ZdlPvm@PLT # Offset: 1810
.Ltmp3022:
    00000717: 	leaq	DATAat0x382cc(%rip), %rdx
    0000071e: 	movq	%r13, %rsi
    00000721: 	movq	%r12, %rdi
    00000724: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1828
    00000729: 	movsd	init_value(%rip), %xmm0
    00000731: 	movq	%r12, %rcx
    00000734: 	movl	$0x1f40, %esi
    00000739: 	movq	%rbp, %rdi
    0000073c: 	leaq	_Z18test_do_loop_paramIdET_PKS0_iS0_(%rip), %rdx
    00000743: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1859
    00000748: 	movq	0xc0(%rsp), %rdi
    00000750: 	cmpq	%rbx, %rdi
    00000753: 	je	.Ltmp3023 # Offset: 1875
    00000755: 	movq	0xd0(%rsp), %rax
    0000075d: 	leaq	0x1(%rax), %rsi
    00000761: 	callq	_ZdlPvm@PLT # Offset: 1889
.Ltmp3023:
    00000766: 	leaq	DATAat0x382e3(%rip), %rdx
    0000076d: 	movq	%r13, %rsi
    00000770: 	movq	%r12, %rdi
    00000773: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1907
    00000778: 	movsd	init_value(%rip), %xmm0
    00000780: 	movq	%r12, %rcx
    00000783: 	movl	$0x1f40, %esi
    00000788: 	movq	%rbp, %rdi
    0000078b: 	leaq	_Z19test_do_loop_param2IdET_PKS0_iS0_(%rip), %rdx
    00000792: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1938
    00000797: 	movq	0xc0(%rsp), %rdi
    0000079f: 	cmpq	%rbx, %rdi
    000007a2: 	je	.Ltmp3024 # Offset: 1954
    000007a4: 	movq	0xd0(%rsp), %rax
    000007ac: 	leaq	0x1(%rax), %rsi
    000007b0: 	callq	_ZdlPvm@PLT # Offset: 1968
.Ltmp3024:
    000007b5: 	leaq	DATAat0x382fb(%rip), %rdx
    000007bc: 	movq	%r13, %rsi
    000007bf: 	movq	%r12, %rdi
    000007c2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1986
    000007c7: 	movsd	init_value(%rip), %xmm0
    000007cf: 	movq	%r12, %rcx
    000007d2: 	movl	$0x1f40, %esi
    000007d7: 	movq	%rbp, %rdi
    000007da: 	leaq	_Z19test_do_loop_param3IdET_PKS0_iS0_(%rip), %rdx
    000007e1: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2017
    000007e6: 	movq	0xc0(%rsp), %rdi
    000007ee: 	cmpq	%rbx, %rdi
    000007f1: 	je	.Ltmp3025 # Offset: 2033
    000007f3: 	movq	0xd0(%rsp), %rax
    000007fb: 	leaq	0x1(%rax), %rsi
    000007ff: 	callq	_ZdlPvm@PLT # Offset: 2047
.Ltmp3025:
    00000804: 	movq	0x60(%rsp), %rax
    00000809: 	movq	0x68(%rsp), %r14
    0000080e: 	movq	%rbx, 0xc0(%rsp)
    00000816: 	movq	%rax, %rcx
    00000819: 	movq	%rax, (%rsp)
    0000081d: 	addq	%r14, %rcx
    00000820: 	je	.Ltmp3026 # Offset: 2080
    00000822: 	testq	%rax, %rax
    00000825: 	je	.Ltmp3027 # Offset: 2085
.Ltmp3026:
    0000082b: 	movq	%r14, 0x58(%rsp)
    00000830: 	cmpq	$0xf, %r14
    00000834: 	ja	.Ltmp3028 # Offset: 2100
    0000083a: 	cmpq	$0x1, %r14
    0000083e: 	jne	.Ltmp3029 # Offset: 2110
    00000844: 	movq	(%rsp), %rax
    00000848: 	movzbl	(%rax), %eax
    0000084b: 	movb	%al, 0xd0(%rsp)
    00000852: 	movq	%rbx, %rax
.Ltmp3177:
    00000855: 	movq	%r14, 0xc8(%rsp)
    0000085d: 	movb	$0x0, (%rax,%r14)
    00000862: 	movabsq	$0x3fffffffffffffff, %rax
    0000086c: 	subq	0xc8(%rsp), %rax
    00000874: 	cmpq	$0x17, %rax
    00000878: 	jbe	.Ltmp3030 # Offset: 2168
    0000087e: 	movl	$0x18, %edx
    00000883: 	leaq	DATAat0x38313(%rip), %rsi
    0000088a: 	movq	%r12, %rdi
    0000088d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2189
    00000892: 	movsd	init_value(%rip), %xmm0
    0000089a: 	movq	%r12, %rcx
    0000089d: 	movl	$0x1f40, %esi
    000008a2: 	movq	%rbp, %rdi
    000008a5: 	leaq	_Z20test_goto_loop_paramIdET_PKS0_iS0_(%rip), %rdx
    000008ac: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2220
    000008b1: 	movq	0xc0(%rsp), %rdi
    000008b9: 	cmpq	%rbx, %rdi
    000008bc: 	je	.Ltmp3031 # Offset: 2236
    000008be: 	movq	0xd0(%rsp), %rax
    000008c6: 	leaq	0x1(%rax), %rsi
    000008ca: 	callq	_ZdlPvm@PLT # Offset: 2250
.Ltmp3031:
    000008cf: 	movq	0x60(%rsp), %rax
    000008d4: 	movq	0x68(%rsp), %r14
    000008d9: 	movq	%rbx, 0xc0(%rsp)
    000008e1: 	movq	%rax, %rcx
    000008e4: 	movq	%rax, (%rsp)
    000008e8: 	addq	%r14, %rcx
    000008eb: 	je	.Ltmp3032 # Offset: 2283
    000008ed: 	testq	%rax, %rax
    000008f0: 	je	.Ltmp3033 # Offset: 2288
.Ltmp3032:
    000008f6: 	movq	%r14, 0x58(%rsp)
    000008fb: 	cmpq	$0xf, %r14
    000008ff: 	ja	.Ltmp3034 # Offset: 2303
    00000905: 	cmpq	$0x1, %r14
    00000909: 	jne	.Ltmp3035 # Offset: 2313
    0000090f: 	movq	(%rsp), %rax
    00000913: 	movzbl	(%rax), %eax
    00000916: 	movb	%al, 0xd0(%rsp)
    0000091d: 	movq	%rbx, %rax
.Ltmp3199:
    00000920: 	movq	%r14, 0xc8(%rsp)
    00000928: 	movb	$0x0, (%rax,%r14)
    0000092d: 	movabsq	$0x3fffffffffffffff, %rax
    00000937: 	subq	0xc8(%rsp), %rax
    0000093f: 	cmpq	$0x18, %rax
    00000943: 	jbe	.Ltmp3036 # Offset: 2371
    00000949: 	movl	$0x19, %edx
    0000094e: 	leaq	DATAat0x3832c(%rip), %rsi
    00000955: 	movq	%r12, %rdi
    00000958: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2392
    0000095d: 	movsd	init_value(%rip), %xmm0
    00000965: 	movq	%r12, %rcx
    00000968: 	movl	$0x1f40, %esi
    0000096d: 	movq	%rbp, %rdi
    00000970: 	leaq	_Z21test_goto_loop_param2IdET_PKS0_iS0_(%rip), %rdx
    00000977: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2423
    0000097c: 	movq	0xc0(%rsp), %rdi
    00000984: 	cmpq	%rbx, %rdi
    00000987: 	je	.Ltmp3037 # Offset: 2439
    00000989: 	movq	0xd0(%rsp), %rax
    00000991: 	leaq	0x1(%rax), %rsi
    00000995: 	callq	_ZdlPvm@PLT # Offset: 2453
.Ltmp3037:
    0000099a: 	leaq	DATAat0x38346(%rip), %rdx
    000009a1: 	movq	%r13, %rsi
    000009a4: 	movq	%r12, %rdi
    000009a7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2471
    000009ac: 	movsd	init_value(%rip), %xmm0
    000009b4: 	movq	%r12, %rcx
    000009b7: 	movl	$0x1f40, %esi
    000009bc: 	movq	%rbp, %rdi
    000009bf: 	leaq	_Z21test_goto_loop_param3IdET_PKS0_iS0_(%rip), %rdx
    000009c6: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2502
    000009cb: 	movq	0xc0(%rsp), %rdi
    000009d3: 	cmpq	%rbx, %rdi
    000009d6: 	je	.Ltmp3038 # Offset: 2518
    000009d8: 	movq	0xd0(%rsp), %rax
    000009e0: 	leaq	0x1(%rax), %rsi
    000009e4: 	callq	_ZdlPvm@PLT # Offset: 2532
.Ltmp3038:
    000009e9: 	movq	0x60(%rsp), %rax
    000009ee: 	movq	0x68(%rsp), %r14
    000009f3: 	movq	%rbx, 0xc0(%rsp)
    000009fb: 	movq	%rax, %rcx
    000009fe: 	movq	%rax, (%rsp)
    00000a02: 	addq	%r14, %rcx
    00000a05: 	je	.Ltmp3039 # Offset: 2565
    00000a07: 	testq	%rax, %rax
    00000a0a: 	je	.Ltmp3040 # Offset: 2570
.Ltmp3039:
    00000a10: 	movq	%r14, 0x58(%rsp)
    00000a15: 	cmpq	$0xf, %r14
    00000a19: 	ja	.Ltmp3041 # Offset: 2585
    00000a1f: 	cmpq	$0x1, %r14
    00000a23: 	jne	.Ltmp3042 # Offset: 2595
    00000a29: 	movq	(%rsp), %rax
    00000a2d: 	movzbl	(%rax), %eax
    00000a30: 	movb	%al, 0xd0(%rsp)
    00000a37: 	movq	%rbx, %rax
.Ltmp3197:
    00000a3a: 	movq	%r14, 0xc8(%rsp)
    00000a42: 	movb	$0x0, (%rax,%r14)
    00000a47: 	movabsq	$0x3fffffffffffffff, %rax
    00000a51: 	subq	0xc8(%rsp), %rax
    00000a59: 	cmpq	$0x13, %rax
    00000a5d: 	jbe	.Ltmp3043 # Offset: 2653
    00000a63: 	movl	$0x14, %edx
    00000a68: 	leaq	DATAat0x38360(%rip), %rsi
    00000a6f: 	movq	%r12, %rdi
    00000a72: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2674
    00000a77: 	movsd	init_value(%rip), %xmm0
    00000a7f: 	movq	%r12, %rcx
    00000a82: 	movl	$0x1f40, %esi
    00000a87: 	movq	%rbp, %rdi
    00000a8a: 	leaq	_Z20test_for_loop_globalIdET_PKS0_iS0_(%rip), %rdx
    00000a91: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2705
    00000a96: 	movq	0xc0(%rsp), %rdi
    00000a9e: 	cmpq	%rbx, %rdi
    00000aa1: 	je	.Ltmp3044 # Offset: 2721
    00000aa3: 	movq	0xd0(%rsp), %rax
    00000aab: 	leaq	0x1(%rax), %rsi
    00000aaf: 	callq	_ZdlPvm@PLT # Offset: 2735
.Ltmp3044:
    00000ab4: 	movq	0x60(%rsp), %rax
    00000ab9: 	movq	0x68(%rsp), %r14
    00000abe: 	movq	%rbx, 0xc0(%rsp)
    00000ac6: 	movq	%rax, %rcx
    00000ac9: 	movq	%rax, (%rsp)
    00000acd: 	addq	%r14, %rcx
    00000ad0: 	je	.Ltmp3045 # Offset: 2768
    00000ad2: 	testq	%rax, %rax
    00000ad5: 	je	.Ltmp3046 # Offset: 2773
.Ltmp3045:
    00000adb: 	movq	%r14, 0x58(%rsp)
    00000ae0: 	cmpq	$0xf, %r14
    00000ae4: 	ja	.Ltmp3047 # Offset: 2788
    00000aea: 	cmpq	$0x1, %r14
    00000aee: 	jne	.Ltmp3048 # Offset: 2798
    00000af4: 	movq	(%rsp), %rax
    00000af8: 	movzbl	(%rax), %eax
    00000afb: 	movb	%al, 0xd0(%rsp)
    00000b02: 	movq	%rbx, %rax
.Ltmp3195:
    00000b05: 	movq	%r14, 0xc8(%rsp)
    00000b0d: 	movb	$0x0, (%rax,%r14)
    00000b12: 	movabsq	$0x3fffffffffffffff, %rax
    00000b1c: 	subq	0xc8(%rsp), %rax
    00000b24: 	cmpq	$0x14, %rax
    00000b28: 	jbe	.Ltmp3049 # Offset: 2856
    00000b2e: 	movl	$0x15, %edx
    00000b33: 	leaq	DATAat0x38375(%rip), %rsi
    00000b3a: 	movq	%r12, %rdi
    00000b3d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2877
    00000b42: 	movsd	init_value(%rip), %xmm0
    00000b4a: 	movq	%r12, %rcx
    00000b4d: 	movl	$0x1f40, %esi
    00000b52: 	movq	%rbp, %rdi
    00000b55: 	leaq	_Z21test_for_loop_global2IdET_PKS0_iS0_(%rip), %rdx
    00000b5c: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2908
    00000b61: 	movq	0xc0(%rsp), %rdi
    00000b69: 	cmpq	%rbx, %rdi
    00000b6c: 	je	.Ltmp3050 # Offset: 2924
    00000b6e: 	movq	0xd0(%rsp), %rax
    00000b76: 	leaq	0x1(%rax), %rsi
    00000b7a: 	callq	_ZdlPvm@PLT # Offset: 2938
.Ltmp3050:
    00000b7f: 	leaq	DATAat0x3838b(%rip), %rdx
    00000b86: 	movq	%r13, %rsi
    00000b89: 	movq	%r12, %rdi
    00000b8c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2956
    00000b91: 	movsd	init_value(%rip), %xmm0
    00000b99: 	movq	%r12, %rcx
    00000b9c: 	movl	$0x1f40, %esi
    00000ba1: 	movq	%rbp, %rdi
    00000ba4: 	leaq	_Z21test_for_loop_global3IdET_PKS0_iS0_(%rip), %rdx
    00000bab: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2987
    00000bb0: 	movq	0xc0(%rsp), %rdi
    00000bb8: 	cmpq	%rbx, %rdi
    00000bbb: 	je	.Ltmp3051 # Offset: 3003
    00000bbd: 	movq	0xd0(%rsp), %rax
    00000bc5: 	leaq	0x1(%rax), %rsi
    00000bc9: 	callq	_ZdlPvm@PLT # Offset: 3017
.Ltmp3051:
    00000bce: 	leaq	DATAat0x383a1(%rip), %rdx
    00000bd5: 	movq	%r13, %rsi
    00000bd8: 	movq	%r12, %rdi
    00000bdb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3035
    00000be0: 	movsd	init_value(%rip), %xmm0
    00000be8: 	movq	%r12, %rcx
    00000beb: 	movl	$0x1f40, %esi
    00000bf0: 	movq	%rbp, %rdi
    00000bf3: 	leaq	_Z22test_while_loop_globalIdET_PKS0_iS0_(%rip), %rdx
    00000bfa: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3066
    00000bff: 	movq	0xc0(%rsp), %rdi
    00000c07: 	cmpq	%rbx, %rdi
    00000c0a: 	je	.Ltmp3052 # Offset: 3082
    00000c0c: 	movq	0xd0(%rsp), %rax
    00000c14: 	leaq	0x1(%rax), %rsi
    00000c18: 	callq	_ZdlPvm@PLT # Offset: 3096
.Ltmp3052:
    00000c1d: 	movq	0x60(%rsp), %rax
    00000c22: 	movq	0x68(%rsp), %r14
    00000c27: 	movq	%rbx, 0xc0(%rsp)
    00000c2f: 	movq	%rax, %rcx
    00000c32: 	movq	%rax, (%rsp)
    00000c36: 	addq	%r14, %rcx
    00000c39: 	je	.Ltmp3053 # Offset: 3129
    00000c3b: 	testq	%rax, %rax
    00000c3e: 	je	.Ltmp3054 # Offset: 3134
.Ltmp3053:
    00000c44: 	movq	%r14, 0x58(%rsp)
    00000c49: 	cmpq	$0xf, %r14
    00000c4d: 	ja	.Ltmp3055 # Offset: 3149
    00000c53: 	cmpq	$0x1, %r14
    00000c57: 	jne	.Ltmp3056 # Offset: 3159
    00000c5d: 	movq	(%rsp), %rax
    00000c61: 	movzbl	(%rax), %eax
    00000c64: 	movb	%al, 0xd0(%rsp)
    00000c6b: 	movq	%rbx, %rax
.Ltmp3193:
    00000c6e: 	movq	%r14, 0xc8(%rsp)
    00000c76: 	movb	$0x0, (%rax,%r14)
    00000c7b: 	movabsq	$0x3fffffffffffffff, %rax
    00000c85: 	subq	0xc8(%rsp), %rax
    00000c8d: 	cmpq	$0x16, %rax
    00000c91: 	jbe	.Ltmp3057 # Offset: 3217
    00000c97: 	movl	$0x17, %edx
    00000c9c: 	leaq	DATAat0x383b8(%rip), %rsi
    00000ca3: 	movq	%r12, %rdi
    00000ca6: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3238
    00000cab: 	movsd	init_value(%rip), %xmm0
    00000cb3: 	movq	%r12, %rcx
    00000cb6: 	movl	$0x1f40, %esi
    00000cbb: 	movq	%rbp, %rdi
    00000cbe: 	leaq	_Z23test_while_loop_global2IdET_PKS0_iS0_(%rip), %rdx
    00000cc5: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3269
    00000cca: 	movq	0xc0(%rsp), %rdi
    00000cd2: 	cmpq	%rbx, %rdi
    00000cd5: 	je	.Ltmp3058 # Offset: 3285
    00000cd7: 	movq	0xd0(%rsp), %rax
    00000cdf: 	leaq	0x1(%rax), %rsi
    00000ce3: 	callq	_ZdlPvm@PLT # Offset: 3299
.Ltmp3058:
    00000ce8: 	movq	0x60(%rsp), %rax
    00000ced: 	movq	0x68(%rsp), %r14
    00000cf2: 	movq	%rbx, 0xc0(%rsp)
    00000cfa: 	movq	%rax, %rcx
    00000cfd: 	movq	%rax, (%rsp)
    00000d01: 	addq	%r14, %rcx
    00000d04: 	je	.Ltmp3059 # Offset: 3332
    00000d06: 	testq	%rax, %rax
    00000d09: 	je	.Ltmp3060 # Offset: 3337
.Ltmp3059:
    00000d0f: 	movq	%r14, 0x58(%rsp)
    00000d14: 	cmpq	$0xf, %r14
    00000d18: 	ja	.Ltmp3061 # Offset: 3352
    00000d1e: 	cmpq	$0x1, %r14
    00000d22: 	jne	.Ltmp3062 # Offset: 3362
    00000d28: 	movq	(%rsp), %rax
    00000d2c: 	movzbl	(%rax), %eax
    00000d2f: 	movb	%al, 0xd0(%rsp)
    00000d36: 	movq	%rbx, %rax
.Ltmp3191:
    00000d39: 	movq	%r14, 0xc8(%rsp)
    00000d41: 	movb	$0x0, (%rax,%r14)
    00000d46: 	movabsq	$0x3fffffffffffffff, %rax
    00000d50: 	subq	0xc8(%rsp), %rax
    00000d58: 	cmpq	$0x16, %rax
    00000d5c: 	jbe	.Ltmp3063 # Offset: 3420
    00000d62: 	movl	$0x17, %edx
    00000d67: 	leaq	DATAat0x383d0(%rip), %rsi
    00000d6e: 	movq	%r12, %rdi
    00000d71: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3441
    00000d76: 	movsd	init_value(%rip), %xmm0
    00000d7e: 	movq	%r12, %rcx
    00000d81: 	movl	$0x1f40, %esi
    00000d86: 	movq	%rbp, %rdi
    00000d89: 	leaq	_Z23test_while_loop_global3IdET_PKS0_iS0_(%rip), %rdx
    00000d90: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3472
    00000d95: 	movq	0xc0(%rsp), %rdi
    00000d9d: 	cmpq	%rbx, %rdi
    00000da0: 	je	.Ltmp3064 # Offset: 3488
    00000da2: 	movq	0xd0(%rsp), %rax
    00000daa: 	leaq	0x1(%rax), %rsi
    00000dae: 	callq	_ZdlPvm@PLT # Offset: 3502
.Ltmp3064:
    00000db3: 	leaq	DATAat0x383e8(%rip), %rdx
    00000dba: 	movq	%r13, %rsi
    00000dbd: 	movq	%r12, %rdi
    00000dc0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3520
    00000dc5: 	movsd	init_value(%rip), %xmm0
    00000dcd: 	movq	%r12, %rcx
    00000dd0: 	movl	$0x1f40, %esi
    00000dd5: 	movq	%rbp, %rdi
    00000dd8: 	leaq	_Z19test_do_loop_globalIdET_PKS0_iS0_(%rip), %rdx
    00000ddf: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3551
    00000de4: 	movq	0xc0(%rsp), %rdi
    00000dec: 	cmpq	%rbx, %rdi
    00000def: 	je	.Ltmp3065 # Offset: 3567
    00000df1: 	movq	0xd0(%rsp), %rax
    00000df9: 	leaq	0x1(%rax), %rsi
    00000dfd: 	callq	_ZdlPvm@PLT # Offset: 3581
.Ltmp3065:
    00000e02: 	movq	0x60(%rsp), %rax
    00000e07: 	movq	0x68(%rsp), %r14
    00000e0c: 	movq	%rbx, 0xc0(%rsp)
    00000e14: 	movq	%rax, %rcx
    00000e17: 	movq	%rax, (%rsp)
    00000e1b: 	addq	%r14, %rcx
    00000e1e: 	je	.Ltmp3066 # Offset: 3614
    00000e20: 	testq	%rax, %rax
    00000e23: 	je	.Ltmp3067 # Offset: 3619
.Ltmp3066:
    00000e29: 	movq	%r14, 0x58(%rsp)
    00000e2e: 	cmpq	$0xf, %r14
    00000e32: 	ja	.Ltmp3068 # Offset: 3634
    00000e38: 	cmpq	$0x1, %r14
    00000e3c: 	jne	.Ltmp3069 # Offset: 3644
    00000e42: 	movq	(%rsp), %rax
    00000e46: 	movzbl	(%rax), %eax
    00000e49: 	movb	%al, 0xd0(%rsp)
    00000e50: 	movq	%rbx, %rax
.Ltmp3189:
    00000e53: 	movq	%r14, 0xc8(%rsp)
    00000e5b: 	movb	$0x0, (%rax,%r14)
    00000e60: 	movabsq	$0x3fffffffffffffff, %rax
    00000e6a: 	subq	0xc8(%rsp), %rax
    00000e72: 	cmpq	$0x13, %rax
    00000e76: 	jbe	.Ltmp3070 # Offset: 3702
    00000e7c: 	movl	$0x14, %edx
    00000e81: 	leaq	DATAat0x383fc(%rip), %rsi
    00000e88: 	movq	%r12, %rdi
    00000e8b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3723
    00000e90: 	movsd	init_value(%rip), %xmm0
    00000e98: 	movq	%r12, %rcx
    00000e9b: 	movl	$0x1f40, %esi
    00000ea0: 	movq	%rbp, %rdi
    00000ea3: 	leaq	_Z20test_do_loop_global2IdET_PKS0_iS0_(%rip), %rdx
    00000eaa: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3754
    00000eaf: 	movq	0xc0(%rsp), %rdi
    00000eb7: 	cmpq	%rbx, %rdi
    00000eba: 	je	.Ltmp3071 # Offset: 3770
    00000ebc: 	movq	0xd0(%rsp), %rax
    00000ec4: 	leaq	0x1(%rax), %rsi
    00000ec8: 	callq	_ZdlPvm@PLT # Offset: 3784
.Ltmp3071:
    00000ecd: 	leaq	DATAat0x38411(%rip), %rdx
    00000ed4: 	movq	%r13, %rsi
    00000ed7: 	movq	%r12, %rdi
    00000eda: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3802
    00000edf: 	movsd	init_value(%rip), %xmm0
    00000ee7: 	movq	%r12, %rcx
    00000eea: 	movl	$0x1f40, %esi
    00000eef: 	movq	%rbp, %rdi
    00000ef2: 	leaq	_Z20test_do_loop_global3IdET_PKS0_iS0_(%rip), %rdx
    00000ef9: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3833
    00000efe: 	movq	0xc0(%rsp), %rdi
    00000f06: 	cmpq	%rbx, %rdi
    00000f09: 	je	.Ltmp3072 # Offset: 3849
    00000f0b: 	movq	0xd0(%rsp), %rax
    00000f13: 	leaq	0x1(%rax), %rsi
    00000f17: 	callq	_ZdlPvm@PLT # Offset: 3863
.Ltmp3072:
    00000f1c: 	movq	0x60(%rsp), %rax
    00000f21: 	movq	0x68(%rsp), %r14
    00000f26: 	movq	%rbx, 0xc0(%rsp)
    00000f2e: 	movq	%rax, %rcx
    00000f31: 	movq	%rax, (%rsp)
    00000f35: 	addq	%r14, %rcx
    00000f38: 	je	.Ltmp3073 # Offset: 3896
    00000f3a: 	testq	%rax, %rax
    00000f3d: 	je	.Ltmp3074 # Offset: 3901
.Ltmp3073:
    00000f43: 	movq	%r14, 0x58(%rsp)
    00000f48: 	cmpq	$0xf, %r14
    00000f4c: 	ja	.Ltmp3075 # Offset: 3916
    00000f52: 	cmpq	$0x1, %r14
    00000f56: 	jne	.Ltmp3076 # Offset: 3926
    00000f5c: 	movq	(%rsp), %rax
    00000f60: 	movzbl	(%rax), %eax
    00000f63: 	movb	%al, 0xd0(%rsp)
    00000f6a: 	movq	%rbx, %rax
.Ltmp3187:
    00000f6d: 	movq	%r14, 0xc8(%rsp)
    00000f75: 	movb	$0x0, (%rax,%r14)
    00000f7a: 	movabsq	$0x3fffffffffffffff, %rax
    00000f84: 	subq	0xc8(%rsp), %rax
    00000f8c: 	cmpq	$0x14, %rax
    00000f90: 	jbe	.Ltmp3077 # Offset: 3984
    00000f96: 	movl	$0x15, %edx
    00000f9b: 	leaq	DATAat0x38426(%rip), %rsi
    00000fa2: 	movq	%r12, %rdi
    00000fa5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4005
    00000faa: 	movsd	init_value(%rip), %xmm0
    00000fb2: 	movq	%r12, %rcx
    00000fb5: 	movl	$0x1f40, %esi
    00000fba: 	movq	%rbp, %rdi
    00000fbd: 	leaq	_Z21test_goto_loop_globalIdET_PKS0_iS0_(%rip), %rdx
    00000fc4: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4036
    00000fc9: 	movq	0xc0(%rsp), %rdi
    00000fd1: 	cmpq	%rbx, %rdi
    00000fd4: 	je	.Ltmp3078 # Offset: 4052
    00000fd6: 	movq	0xd0(%rsp), %rax
    00000fde: 	leaq	0x1(%rax), %rsi
    00000fe2: 	callq	_ZdlPvm@PLT # Offset: 4066
.Ltmp3078:
    00000fe7: 	leaq	DATAat0x3843c(%rip), %rdx
    00000fee: 	movq	%r13, %rsi
    00000ff1: 	movq	%r12, %rdi
    00000ff4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4084
    00000ff9: 	movsd	init_value(%rip), %xmm0
    00001001: 	movq	%r12, %rcx
    00001004: 	movl	$0x1f40, %esi
    00001009: 	movq	%rbp, %rdi
    0000100c: 	leaq	_Z22test_goto_loop_global2IdET_PKS0_iS0_(%rip), %rdx
    00001013: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4115
    00001018: 	movq	0xc0(%rsp), %rdi
    00001020: 	cmpq	%rbx, %rdi
    00001023: 	je	.Ltmp3079 # Offset: 4131
    00001025: 	movq	0xd0(%rsp), %rax
    0000102d: 	leaq	0x1(%rax), %rsi
    00001031: 	callq	_ZdlPvm@PLT # Offset: 4145
.Ltmp3079:
    00001036: 	leaq	DATAat0x38453(%rip), %rdx
    0000103d: 	movq	%r13, %rsi
    00001040: 	movq	%r12, %rdi
    00001043: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4163
    00001048: 	movsd	init_value(%rip), %xmm0
    00001050: 	movq	%r12, %rcx
    00001053: 	movl	$0x1f40, %esi
    00001058: 	movq	%rbp, %rdi
    0000105b: 	leaq	_Z22test_goto_loop_global3IdET_PKS0_iS0_(%rip), %rdx
    00001062: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4194
    00001067: 	movq	0xc0(%rsp), %rdi
    0000106f: 	cmpq	%rbx, %rdi
    00001072: 	je	.Ltmp3080 # Offset: 4210
    00001074: 	movq	0xd0(%rsp), %rax
    0000107c: 	leaq	0x1(%rax), %rsi
    00001080: 	callq	_ZdlPvm@PLT # Offset: 4224
.Ltmp3080:
    00001085: 	leaq	0x80(%rsp), %rdi
    0000108d: 	leaq	DATAat0x3846a(%rip), %rdx
    00001094: 	movq	%r13, %rsi
    00001097: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4247
    0000109c: 	movl	iterations(%rip), %edx
    000010a2: 	xorl	%r8d, %r8d
    000010a5: 	xorl	%ecx, %ecx
    000010a7: 	movl	$0x1f40, %esi
    000010ac: 	movq	0x80(%rsp), %rdi
    000010b4: 	callq	_Z9summarizePKciiii # Offset: 4276
    000010b9: 	leaq	DATAat0x3847c(%rip), %rdx
    000010c0: 	movq	%r13, %rsi
    000010c3: 	movq	%r12, %rdi
    000010c6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4294
    000010cb: 	movq	%r12, %rcx
    000010ce: 	movq	%r15, %rdx
    000010d1: 	movl	$0x1f40, %esi
    000010d6: 	movq	%rbp, %rdi
    000010d9: 	movsd	init_value(%rip), %xmm0
    000010e1: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4321
    000010e6: 	movq	0xc0(%rsp), %rdi
    000010ee: 	cmpq	%rbx, %rdi
    000010f1: 	je	.Ltmp3081 # Offset: 4337
    000010f3: 	movq	0xd0(%rsp), %rax
    000010fb: 	leaq	0x1(%rax), %rsi
    000010ff: 	callq	_ZdlPvm@PLT # Offset: 4351
.Ltmp3081:
    00001104: 	leaq	DATAat0x38493(%rip), %rdx
    0000110b: 	movq	%r13, %rsi
    0000110e: 	movq	%r12, %rdi
    00001111: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4369
    00001116: 	movsd	init_value(%rip), %xmm0
    0000111e: 	movq	%r12, %rcx
    00001121: 	movl	$0x1f40, %esi
    00001126: 	movq	%rbp, %rdi
    00001129: 	leaq	_Z19test_while_loop_optIdET_PKS0_iS0_(%rip), %rdx
    00001130: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4400
    00001135: 	movq	0xc0(%rsp), %rdi
    0000113d: 	cmpq	%rbx, %rdi
    00001140: 	je	.Ltmp3082 # Offset: 4416
    00001142: 	movq	0xd0(%rsp), %rax
    0000114a: 	leaq	0x1(%rax), %rsi
    0000114e: 	callq	_ZdlPvm@PLT # Offset: 4430
.Ltmp3082:
    00001153: 	movq	0x60(%rsp), %r15
    00001158: 	movq	0x68(%rsp), %r14
    0000115d: 	movq	%rbx, 0xc0(%rsp)
    00001165: 	movq	%r15, %rax
    00001168: 	addq	%r14, %rax
    0000116b: 	je	.Ltmp3083 # Offset: 4459
    0000116d: 	testq	%r15, %r15
    00001170: 	je	.Ltmp3084 # Offset: 4464
.Ltmp3083:
    00001176: 	movq	%r14, 0x58(%rsp)
    0000117b: 	cmpq	$0xf, %r14
    0000117f: 	ja	.Ltmp3085 # Offset: 4479
    00001185: 	cmpq	$0x1, %r14
    00001189: 	jne	.Ltmp3086 # Offset: 4489
    0000118f: 	movzbl	(%r15), %eax
    00001193: 	movb	%al, 0xd0(%rsp)
    0000119a: 	movq	%rbx, %rax
.Ltmp3185:
    0000119d: 	movq	%r14, 0xc8(%rsp)
    000011a5: 	movb	$0x0, (%rax,%r14)
    000011aa: 	movabsq	$0x3fffffffffffffff, %rax
    000011b4: 	subq	0xc8(%rsp), %rax
    000011bc: 	cmpq	$0x14, %rax
    000011c0: 	jbe	.Ltmp3087 # Offset: 4544
    000011c6: 	movl	$0x15, %edx
    000011cb: 	leaq	DATAat0x384ac(%rip), %rsi
    000011d2: 	movq	%r12, %rdi
    000011d5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4565
    000011da: 	movsd	init_value(%rip), %xmm0
    000011e2: 	movq	%r12, %rcx
    000011e5: 	movl	$0x1f40, %esi
    000011ea: 	movq	%rbp, %rdi
    000011ed: 	leaq	_Z16test_do_loop_optIdET_PKS0_iS0_(%rip), %rdx
    000011f4: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4596
    000011f9: 	movq	0xc0(%rsp), %rdi
    00001201: 	cmpq	%rbx, %rdi
    00001204: 	je	.Ltmp3088 # Offset: 4612
    00001206: 	movq	0xd0(%rsp), %rax
    0000120e: 	leaq	0x1(%rax), %rsi
    00001212: 	callq	_ZdlPvm@PLT # Offset: 4626
.Ltmp3088:
    00001217: 	movq	0x60(%rsp), %r15
    0000121c: 	movq	0x68(%rsp), %r14
    00001221: 	movq	%rbx, 0xc0(%rsp)
    00001229: 	movq	%r15, %rax
    0000122c: 	addq	%r14, %rax
    0000122f: 	je	.Ltmp3089 # Offset: 4655
    00001231: 	testq	%r15, %r15
    00001234: 	je	.Ltmp3090 # Offset: 4660
.Ltmp3089:
    0000123a: 	movq	%r14, 0x58(%rsp)
    0000123f: 	cmpq	$0xf, %r14
    00001243: 	ja	.Ltmp3091 # Offset: 4675
    00001249: 	cmpq	$0x1, %r14
    0000124d: 	jne	.Ltmp3092 # Offset: 4685
    00001253: 	movzbl	(%r15), %eax
    00001257: 	movb	%al, 0xd0(%rsp)
    0000125e: 	movq	%rbx, %rax
.Ltmp3175:
    00001261: 	movq	%r14, 0xc8(%rsp)
    00001269: 	movb	$0x0, (%rax,%r14)
    0000126e: 	movabsq	$0x3fffffffffffffff, %rax
    00001278: 	subq	0xc8(%rsp), %rax
    00001280: 	cmpq	$0x16, %rax
    00001284: 	jbe	.Ltmp3093 # Offset: 4740
    0000128a: 	movl	$0x17, %edx
    0000128f: 	leaq	DATAat0x384c2(%rip), %rsi
    00001296: 	movq	%r12, %rdi
    00001299: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4761
    0000129e: 	movsd	init_value(%rip), %xmm0
    000012a6: 	movq	%r12, %rcx
    000012a9: 	movl	$0x1f40, %esi
    000012ae: 	movq	%rbp, %rdi
    000012b1: 	leaq	_Z18test_goto_loop_optIdET_PKS0_iS0_(%rip), %rdx
    000012b8: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4792
    000012bd: 	movq	0xc0(%rsp), %rdi
    000012c5: 	cmpq	%rbx, %rdi
    000012c8: 	je	.Ltmp3094 # Offset: 4808
    000012ca: 	movq	0xd0(%rsp), %rax
    000012d2: 	leaq	0x1(%rax), %rsi
    000012d6: 	callq	_ZdlPvm@PLT # Offset: 4822
.Ltmp3094:
    000012db: 	leaq	DATAat0x384da(%rip), %rdx
    000012e2: 	movq	%r13, %rsi
    000012e5: 	movq	%r12, %rdi
    000012e8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4840
    000012ed: 	movsd	init_value(%rip), %xmm0
    000012f5: 	movq	%r12, %rcx
    000012f8: 	movl	$0x1f40, %esi
    000012fd: 	movq	%rbp, %rdi
    00001300: 	leaq	_Z20test_for_loop2_paramIdET_PKS0_iS0_(%rip), %rdx
    00001307: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4871
    0000130c: 	movq	0xc0(%rsp), %rdi
    00001314: 	cmpq	%rbx, %rdi
    00001317: 	je	.Ltmp3095 # Offset: 4887
    00001319: 	movq	0xd0(%rsp), %rax
    00001321: 	leaq	0x1(%rax), %rsi
    00001325: 	callq	_ZdlPvm@PLT # Offset: 4901
.Ltmp3095:
    0000132a: 	leaq	DATAat0x384f3(%rip), %rdx
    00001331: 	movq	%r13, %rsi
    00001334: 	movq	%r12, %rdi
    00001337: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4919
    0000133c: 	movsd	init_value(%rip), %xmm0
    00001344: 	movq	%r12, %rcx
    00001347: 	movl	$0x1f40, %esi
    0000134c: 	movq	%rbp, %rdi
    0000134f: 	leaq	_Z21test_for_loop2_param2IdET_PKS0_iS0_(%rip), %rdx
    00001356: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4950
    0000135b: 	movq	0xc0(%rsp), %rdi
    00001363: 	cmpq	%rbx, %rdi
    00001366: 	je	.Ltmp3096 # Offset: 4966
    00001368: 	movq	0xd0(%rsp), %rax
    00001370: 	leaq	0x1(%rax), %rsi
    00001374: 	callq	_ZdlPvm@PLT # Offset: 4980
.Ltmp3096:
    00001379: 	leaq	DATAat0x3850d(%rip), %rdx
    00001380: 	movq	%r13, %rsi
    00001383: 	movq	%r12, %rdi
    00001386: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4998
    0000138b: 	movsd	init_value(%rip), %xmm0
    00001393: 	movq	%r12, %rcx
    00001396: 	movl	$0x1f40, %esi
    0000139b: 	movq	%rbp, %rdi
    0000139e: 	leaq	_Z22test_while_loop2_paramIdET_PKS0_iS0_(%rip), %rdx
    000013a5: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5029
    000013aa: 	movq	0xc0(%rsp), %rdi
    000013b2: 	cmpq	%rbx, %rdi
    000013b5: 	je	.Ltmp3097 # Offset: 5045
    000013b7: 	movq	0xd0(%rsp), %rax
    000013bf: 	leaq	0x1(%rax), %rsi
    000013c3: 	callq	_ZdlPvm@PLT # Offset: 5059
.Ltmp3097:
    000013c8: 	leaq	DATAat0x38528(%rip), %rdx
    000013cf: 	movq	%r13, %rsi
    000013d2: 	movq	%r12, %rdi
    000013d5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5077
    000013da: 	movsd	init_value(%rip), %xmm0
    000013e2: 	movq	%r12, %rcx
    000013e5: 	movl	$0x1f40, %esi
    000013ea: 	movq	%rbp, %rdi
    000013ed: 	leaq	_Z23test_while_loop2_param2IdET_PKS0_iS0_(%rip), %rdx
    000013f4: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5108
    000013f9: 	movq	0xc0(%rsp), %rdi
    00001401: 	cmpq	%rbx, %rdi
    00001404: 	je	.Ltmp3098 # Offset: 5124
    00001406: 	movq	0xd0(%rsp), %rax
    0000140e: 	leaq	0x1(%rax), %rsi
    00001412: 	callq	_ZdlPvm@PLT # Offset: 5138
.Ltmp3098:
    00001417: 	leaq	DATAat0x38544(%rip), %rdx
    0000141e: 	movq	%r13, %rsi
    00001421: 	movq	%r12, %rdi
    00001424: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5156
    00001429: 	movsd	init_value(%rip), %xmm0
    00001431: 	movq	%r12, %rcx
    00001434: 	movl	$0x1f40, %esi
    00001439: 	movq	%rbp, %rdi
    0000143c: 	leaq	_Z19test_do_loop2_paramIdET_PKS0_iS0_(%rip), %rdx
    00001443: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5187
    00001448: 	movq	0xc0(%rsp), %rdi
    00001450: 	cmpq	%rbx, %rdi
    00001453: 	je	.Ltmp3099 # Offset: 5203
    00001455: 	movq	0xd0(%rsp), %rax
    0000145d: 	leaq	0x1(%rax), %rsi
    00001461: 	callq	_ZdlPvm@PLT # Offset: 5217
.Ltmp3099:
    00001466: 	leaq	DATAat0x3855c(%rip), %rdx
    0000146d: 	movq	%r13, %rsi
    00001470: 	movq	%r12, %rdi
    00001473: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5235
    00001478: 	movsd	init_value(%rip), %xmm0
    00001480: 	movq	%r12, %rcx
    00001483: 	movl	$0x1f40, %esi
    00001488: 	movq	%rbp, %rdi
    0000148b: 	leaq	_Z20test_do_loop2_param2IdET_PKS0_iS0_(%rip), %rdx
    00001492: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5266
    00001497: 	movq	0xc0(%rsp), %rdi
    0000149f: 	cmpq	%rbx, %rdi
    000014a2: 	je	.Ltmp3100 # Offset: 5282
    000014a4: 	movq	0xd0(%rsp), %rax
    000014ac: 	leaq	0x1(%rax), %rsi
    000014b0: 	callq	_ZdlPvm@PLT # Offset: 5296
.Ltmp3100:
    000014b5: 	movq	0x60(%rsp), %r15
    000014ba: 	movq	0x68(%rsp), %r14
    000014bf: 	movq	%rbx, 0xc0(%rsp)
    000014c7: 	movq	%r15, %rax
    000014ca: 	addq	%r14, %rax
    000014cd: 	je	.Ltmp3101 # Offset: 5325
    000014cf: 	testq	%r15, %r15
    000014d2: 	je	.Ltmp3102 # Offset: 5330
.Ltmp3101:
    000014d8: 	movq	%r14, 0x58(%rsp)
    000014dd: 	cmpq	$0xf, %r14
    000014e1: 	ja	.Ltmp3103 # Offset: 5345
    000014e7: 	cmpq	$0x1, %r14
    000014eb: 	jne	.Ltmp3104 # Offset: 5355
    000014f1: 	movzbl	(%r15), %eax
    000014f5: 	movb	%al, 0xd0(%rsp)
    000014fc: 	movq	%rbx, %rax
.Ltmp3173:
    000014ff: 	movq	%r14, 0xc8(%rsp)
    00001507: 	movb	$0x0, (%rax,%r14)
    0000150c: 	movabsq	$0x3fffffffffffffff, %rax
    00001516: 	subq	0xc8(%rsp), %rax
    0000151e: 	cmpq	$0x18, %rax
    00001522: 	jbe	.Ltmp3105 # Offset: 5410
    00001528: 	movl	$0x19, %edx
    0000152d: 	leaq	DATAat0x38575(%rip), %rsi
    00001534: 	movq	%r12, %rdi
    00001537: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5431
    0000153c: 	movsd	init_value(%rip), %xmm0
    00001544: 	movq	%r12, %rcx
    00001547: 	movl	$0x1f40, %esi
    0000154c: 	movq	%rbp, %rdi
    0000154f: 	leaq	_Z21test_goto_loop2_paramIdET_PKS0_iS0_(%rip), %rdx
    00001556: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5462
    0000155b: 	movq	0xc0(%rsp), %rdi
    00001563: 	cmpq	%rbx, %rdi
    00001566: 	je	.Ltmp3106 # Offset: 5478
    00001568: 	movq	0xd0(%rsp), %rax
    00001570: 	leaq	0x1(%rax), %rsi
    00001574: 	callq	_ZdlPvm@PLT # Offset: 5492
.Ltmp3106:
    00001579: 	movq	0x60(%rsp), %r15
    0000157e: 	movq	0x68(%rsp), %r14
    00001583: 	movq	%rbx, 0xc0(%rsp)
    0000158b: 	movq	%r15, %rax
    0000158e: 	addq	%r14, %rax
    00001591: 	je	.Ltmp3107 # Offset: 5521
    00001593: 	testq	%r15, %r15
    00001596: 	je	.Ltmp3108 # Offset: 5526
.Ltmp3107:
    0000159c: 	movq	%r14, 0x58(%rsp)
    000015a1: 	cmpq	$0xf, %r14
    000015a5: 	ja	.Ltmp3109 # Offset: 5541
    000015ab: 	cmpq	$0x1, %r14
    000015af: 	jne	.Ltmp3110 # Offset: 5551
    000015b5: 	movzbl	(%r15), %eax
    000015b9: 	movb	%al, 0xd0(%rsp)
    000015c0: 	movq	%rbx, %rax
.Ltmp3171:
    000015c3: 	movq	%r14, 0xc8(%rsp)
    000015cb: 	movb	$0x0, (%rax,%r14)
    000015d0: 	movabsq	$0x3fffffffffffffff, %rax
    000015da: 	subq	0xc8(%rsp), %rax
    000015e2: 	cmpq	$0x19, %rax
    000015e6: 	jbe	.Ltmp3111 # Offset: 5606
    000015ec: 	movl	$0x1a, %edx
    000015f1: 	leaq	DATAat0x3858f(%rip), %rsi
    000015f8: 	movq	%r12, %rdi
    000015fb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5627
    00001600: 	movsd	init_value(%rip), %xmm0
    00001608: 	movq	%r12, %rcx
    0000160b: 	movl	$0x1f40, %esi
    00001610: 	movq	%rbp, %rdi
    00001613: 	leaq	_Z22test_goto_loop2_param2IdET_PKS0_iS0_(%rip), %rdx
    0000161a: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5658
    0000161f: 	movq	0xc0(%rsp), %rdi
    00001627: 	cmpq	%rbx, %rdi
    0000162a: 	je	.Ltmp3112 # Offset: 5674
    0000162c: 	movq	0xd0(%rsp), %rax
    00001634: 	leaq	0x1(%rax), %rsi
    00001638: 	callq	_ZdlPvm@PLT # Offset: 5688
.Ltmp3112:
    0000163d: 	movq	0x60(%rsp), %r15
    00001642: 	movq	0x68(%rsp), %r14
    00001647: 	movq	%rbx, 0xc0(%rsp)
    0000164f: 	movq	%r15, %rax
    00001652: 	addq	%r14, %rax
    00001655: 	je	.Ltmp3113 # Offset: 5717
    00001657: 	testq	%r15, %r15
    0000165a: 	je	.Ltmp3114 # Offset: 5722
.Ltmp3113:
    00001660: 	movq	%r14, 0x58(%rsp)
    00001665: 	cmpq	$0xf, %r14
    00001669: 	ja	.Ltmp3115 # Offset: 5737
    0000166f: 	cmpq	$0x1, %r14
    00001673: 	jne	.Ltmp3116 # Offset: 5747
    00001679: 	movzbl	(%r15), %eax
    0000167d: 	movb	%al, 0xd0(%rsp)
    00001684: 	movq	%rbx, %rax
.Ltmp3209:
    00001687: 	movq	%r14, 0xc8(%rsp)
    0000168f: 	movb	$0x0, (%rax,%r14)
    00001694: 	movabsq	$0x3fffffffffffffff, %rax
    0000169e: 	subq	0xc8(%rsp), %rax
    000016a6: 	cmpq	$0x14, %rax
    000016aa: 	jbe	.Ltmp3117 # Offset: 5802
    000016b0: 	movl	$0x15, %edx
    000016b5: 	leaq	DATAat0x385aa(%rip), %rsi
    000016bc: 	movq	%r12, %rdi
    000016bf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5823
    000016c4: 	movsd	init_value(%rip), %xmm0
    000016cc: 	movq	%r12, %rcx
    000016cf: 	movl	$0x1f40, %esi
    000016d4: 	movq	%rbp, %rdi
    000016d7: 	leaq	_Z21test_for_loop2_globalIdET_PKS0_iS0_(%rip), %rdx
    000016de: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5854
    000016e3: 	movq	0xc0(%rsp), %rdi
    000016eb: 	cmpq	%rbx, %rdi
    000016ee: 	je	.Ltmp3118 # Offset: 5870
    000016f0: 	movq	0xd0(%rsp), %rax
    000016f8: 	leaq	0x1(%rax), %rsi
    000016fc: 	callq	_ZdlPvm@PLT # Offset: 5884
.Ltmp3118:
    00001701: 	leaq	DATAat0x385c0(%rip), %rdx
    00001708: 	movq	%r13, %rsi
    0000170b: 	movq	%r12, %rdi
    0000170e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5902
    00001713: 	movsd	init_value(%rip), %xmm0
    0000171b: 	movq	%r12, %rcx
    0000171e: 	movl	$0x1f40, %esi
    00001723: 	movq	%rbp, %rdi
    00001726: 	leaq	_Z22test_for_loop2_global2IdET_PKS0_iS0_(%rip), %rdx
    0000172d: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5933
    00001732: 	movq	0xc0(%rsp), %rdi
    0000173a: 	cmpq	%rbx, %rdi
    0000173d: 	je	.Ltmp3119 # Offset: 5949
    0000173f: 	movq	0xd0(%rsp), %rax
    00001747: 	leaq	0x1(%rax), %rsi
    0000174b: 	callq	_ZdlPvm@PLT # Offset: 5963
.Ltmp3119:
    00001750: 	leaq	DATAat0x385d7(%rip), %rdx
    00001757: 	movq	%r13, %rsi
    0000175a: 	movq	%r12, %rdi
    0000175d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5981
    00001762: 	movsd	init_value(%rip), %xmm0
    0000176a: 	movq	%r12, %rcx
    0000176d: 	movl	$0x1f40, %esi
    00001772: 	movq	%rbp, %rdi
    00001775: 	leaq	_Z23test_while_loop2_globalIdET_PKS0_iS0_(%rip), %rdx
    0000177c: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6012
    00001781: 	movq	0xc0(%rsp), %rdi
    00001789: 	cmpq	%rbx, %rdi
    0000178c: 	je	.Ltmp3120 # Offset: 6028
    0000178e: 	movq	0xd0(%rsp), %rax
    00001796: 	leaq	0x1(%rax), %rsi
    0000179a: 	callq	_ZdlPvm@PLT # Offset: 6042
.Ltmp3120:
    0000179f: 	movq	0x60(%rsp), %r15
    000017a4: 	movq	0x68(%rsp), %r14
    000017a9: 	movq	%rbx, 0xc0(%rsp)
    000017b1: 	movq	%r15, %rax
    000017b4: 	addq	%r14, %rax
    000017b7: 	je	.Ltmp3121 # Offset: 6071
    000017b9: 	testq	%r15, %r15
    000017bc: 	je	.Ltmp3122 # Offset: 6076
.Ltmp3121:
    000017c2: 	movq	%r14, 0x58(%rsp)
    000017c7: 	cmpq	$0xf, %r14
    000017cb: 	ja	.Ltmp3123 # Offset: 6091
    000017d1: 	cmpq	$0x1, %r14
    000017d5: 	jne	.Ltmp3124 # Offset: 6101
    000017db: 	movzbl	(%r15), %eax
    000017df: 	movb	%al, 0xd0(%rsp)
    000017e6: 	movq	%rbx, %rax
.Ltmp3207:
    000017e9: 	movq	%r14, 0xc8(%rsp)
    000017f1: 	movb	$0x0, (%rax,%r14)
    000017f6: 	movabsq	$0x3fffffffffffffff, %rax
    00001800: 	subq	0xc8(%rsp), %rax
    00001808: 	cmpq	$0x17, %rax
    0000180c: 	jbe	.Ltmp3125 # Offset: 6156
    00001812: 	movl	$0x18, %edx
    00001817: 	leaq	DATAat0x385ef(%rip), %rsi
    0000181e: 	movq	%r12, %rdi
    00001821: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6177
    00001826: 	movsd	init_value(%rip), %xmm0
    0000182e: 	movq	%r12, %rcx
    00001831: 	movl	$0x1f40, %esi
    00001836: 	movq	%rbp, %rdi
    00001839: 	leaq	_Z24test_while_loop2_global2IdET_PKS0_iS0_(%rip), %rdx
    00001840: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6208
    00001845: 	movq	0xc0(%rsp), %rdi
    0000184d: 	cmpq	%rbx, %rdi
    00001850: 	je	.Ltmp3126 # Offset: 6224
    00001852: 	movq	0xd0(%rsp), %rax
    0000185a: 	leaq	0x1(%rax), %rsi
    0000185e: 	callq	_ZdlPvm@PLT # Offset: 6238
.Ltmp3126:
    00001863: 	leaq	DATAat0x38608(%rip), %rdx
    0000186a: 	movq	%r13, %rsi
    0000186d: 	movq	%r12, %rdi
    00001870: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6256
    00001875: 	movsd	init_value(%rip), %xmm0
    0000187d: 	movq	%r12, %rcx
    00001880: 	movl	$0x1f40, %esi
    00001885: 	movq	%rbp, %rdi
    00001888: 	leaq	_Z20test_do_loop2_globalIdET_PKS0_iS0_(%rip), %rdx
    0000188f: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6287
    00001894: 	movq	0xc0(%rsp), %rdi
    0000189c: 	cmpq	%rbx, %rdi
    0000189f: 	je	.Ltmp3127 # Offset: 6303
    000018a1: 	movq	0xd0(%rsp), %rax
    000018a9: 	leaq	0x1(%rax), %rsi
    000018ad: 	callq	_ZdlPvm@PLT # Offset: 6317
.Ltmp3127:
    000018b2: 	leaq	DATAat0x3861d(%rip), %rdx
    000018b9: 	movq	%r13, %rsi
    000018bc: 	movq	%r12, %rdi
    000018bf: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6335
    000018c4: 	movsd	init_value(%rip), %xmm0
    000018cc: 	movq	%r12, %rcx
    000018cf: 	movl	$0x1f40, %esi
    000018d4: 	movq	%rbp, %rdi
    000018d7: 	leaq	_Z21test_do_loop2_global2IdET_PKS0_iS0_(%rip), %rdx
    000018de: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6366
    000018e3: 	movq	0xc0(%rsp), %rdi
    000018eb: 	cmpq	%rbx, %rdi
    000018ee: 	je	.Ltmp3128 # Offset: 6382
    000018f0: 	movq	0xd0(%rsp), %rax
    000018f8: 	leaq	0x1(%rax), %rsi
    000018fc: 	callq	_ZdlPvm@PLT # Offset: 6396
.Ltmp3128:
    00001901: 	leaq	DATAat0x38633(%rip), %rdx
    00001908: 	movq	%r13, %rsi
    0000190b: 	movq	%r12, %rdi
    0000190e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6414
    00001913: 	movsd	init_value(%rip), %xmm0
    0000191b: 	movq	%r12, %rcx
    0000191e: 	movl	$0x1f40, %esi
    00001923: 	movq	%rbp, %rdi
    00001926: 	leaq	_Z22test_goto_loop2_globalIdET_PKS0_iS0_(%rip), %rdx
    0000192d: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6445
    00001932: 	movq	0xc0(%rsp), %rdi
    0000193a: 	cmpq	%rbx, %rdi
    0000193d: 	je	.Ltmp3129 # Offset: 6461
    0000193f: 	movq	0xd0(%rsp), %rax
    00001947: 	leaq	0x1(%rax), %rsi
    0000194b: 	callq	_ZdlPvm@PLT # Offset: 6475
.Ltmp3129:
    00001950: 	movq	0x60(%rsp), %r15
    00001955: 	movq	0x68(%rsp), %r14
    0000195a: 	movq	%rbx, 0xc0(%rsp)
    00001962: 	movq	%r15, %rax
    00001965: 	addq	%r14, %rax
    00001968: 	je	.Ltmp3130 # Offset: 6504
    0000196a: 	testq	%r15, %r15
    0000196d: 	je	.Ltmp3131 # Offset: 6509
.Ltmp3130:
    00001973: 	movq	%r14, 0x58(%rsp)
    00001978: 	cmpq	$0xf, %r14
    0000197c: 	ja	.Ltmp3132 # Offset: 6524
    00001982: 	cmpq	$0x1, %r14
    00001986: 	jne	.Ltmp3133 # Offset: 6534
    0000198c: 	movzbl	(%r15), %eax
    00001990: 	movb	%al, 0xd0(%rsp)
    00001997: 	movq	%rbx, %rax
.Ltmp3205:
    0000199a: 	movq	%r14, 0xc8(%rsp)
    000019a2: 	movb	$0x0, (%rax,%r14)
    000019a7: 	movabsq	$0x3fffffffffffffff, %rax
    000019b1: 	subq	0xc8(%rsp), %rax
    000019b9: 	cmpq	$0x16, %rax
    000019bd: 	jbe	.Ltmp3134 # Offset: 6589
    000019c3: 	movl	$0x17, %edx
    000019c8: 	leaq	DATAat0x3864a(%rip), %rsi
    000019cf: 	movq	%r12, %rdi
    000019d2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6610
    000019d7: 	movsd	init_value(%rip), %xmm0
    000019df: 	movq	%r12, %rcx
    000019e2: 	movl	$0x1f40, %esi
    000019e7: 	movq	%rbp, %rdi
    000019ea: 	leaq	_Z23test_goto_loop2_global2IdET_PKS0_iS0_(%rip), %rdx
    000019f1: 	callq	_Z13test_one_loopIdPFdPKdidEEvPKT_iS4_T0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6641
    000019f6: 	movq	0xc0(%rsp), %rdi
    000019fe: 	cmpq	%rbx, %rdi
    00001a01: 	je	.Ltmp3135 # Offset: 6657
    00001a03: 	movq	0xd0(%rsp), %rax
    00001a0b: 	leaq	0x1(%rax), %rsi
    00001a0f: 	callq	_ZdlPvm@PLT # Offset: 6671
.Ltmp3135:
    00001a14: 	leaq	0xa0(%rsp), %rdi
    00001a1c: 	leaq	DATAat0x38662(%rip), %rdx
    00001a23: 	movq	%r13, %rsi
    00001a26: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6694
    00001a2b: 	movl	iterations(%rip), %edx
    00001a31: 	xorl	%r8d, %r8d
    00001a34: 	xorl	%ecx, %ecx
    00001a36: 	movl	$0x1f40, %esi
    00001a3b: 	movq	0xa0(%rsp), %rdi
    00001a43: 	callq	_Z9summarizePKciiii # Offset: 6723
    00001a48: 	leaq	DATAat0x38675(%rip), %rdx
    00001a4f: 	movq	%r13, %rsi
    00001a52: 	movq	%r12, %rdi
    00001a55: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6741
    00001a5a: 	movq	%r12, %r8
    00001a5d: 	movl	$0x7d0, %edx
    00001a62: 	movl	$0x1f40, %esi
    00001a67: 	movq	%rbp, %rdi
    00001a6a: 	leaq	_Z18test_for_loop3_optIdET_PKS0_iS0_(%rip), %rcx
    00001a71: 	callq	_Z14test_one_loop3IdPFdPKdidEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6769
    00001a76: 	movq	0xc0(%rsp), %rdi
    00001a7e: 	cmpq	%rbx, %rdi
    00001a81: 	je	.Ltmp3136 # Offset: 6785
    00001a83: 	movq	0xd0(%rsp), %rax
    00001a8b: 	leaq	0x1(%rax), %rsi
    00001a8f: 	callq	_ZdlPvm@PLT # Offset: 6799
.Ltmp3136:
    00001a94: 	leaq	DATAat0x3868c(%rip), %rdx
    00001a9b: 	movq	%r13, %rsi
    00001a9e: 	movq	%r12, %rdi
    00001aa1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6817
    00001aa6: 	movq	%r12, %r8
    00001aa9: 	movl	$0x7d0, %edx
    00001aae: 	movl	$0x1f40, %esi
    00001ab3: 	movq	%rbp, %rdi
    00001ab6: 	leaq	_Z22test_for_loop3_halfoptIdET_PKS0_iS0_(%rip), %rcx
    00001abd: 	callq	_Z14test_one_loop3IdPFdPKdidEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6845
    00001ac2: 	movq	0xc0(%rsp), %rdi
    00001aca: 	cmpq	%rbx, %rdi
    00001acd: 	je	.Ltmp3137 # Offset: 6861
    00001acf: 	movq	0xd0(%rsp), %rax
    00001ad7: 	leaq	0x1(%rax), %rsi
    00001adb: 	callq	_ZdlPvm@PLT # Offset: 6875
.Ltmp3137:
    00001ae0: 	leaq	DATAat0x386a4(%rip), %rdx
    00001ae7: 	movq	%r13, %rsi
    00001aea: 	movq	%r12, %rdi
    00001aed: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6893
    00001af2: 	movq	%r12, %r8
    00001af5: 	movl	$0x7d0, %edx
    00001afa: 	movl	$0x1f40, %esi
    00001aff: 	movq	%rbp, %rdi
    00001b02: 	leaq	_Z20test_while_loop3_optIdET_PKS0_iS0_(%rip), %rcx
    00001b09: 	callq	_Z14test_one_loop3IdPFdPKdidEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6921
    00001b0e: 	movq	0xc0(%rsp), %rdi
    00001b16: 	cmpq	%rbx, %rdi
    00001b19: 	je	.Ltmp3138 # Offset: 6937
    00001b1b: 	movq	0xd0(%rsp), %rax
    00001b23: 	leaq	0x1(%rax), %rsi
    00001b27: 	callq	_ZdlPvm@PLT # Offset: 6951
.Ltmp3138:
    00001b2c: 	leaq	DATAat0x386bd(%rip), %rdx
    00001b33: 	movq	%r13, %rsi
    00001b36: 	movq	%r12, %rdi
    00001b39: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6969
    00001b3e: 	movq	%r12, %r8
    00001b41: 	movl	$0x7d0, %edx
    00001b46: 	movl	$0x1f40, %esi
    00001b4b: 	movq	%rbp, %rdi
    00001b4e: 	leaq	_Z24test_while_loop3_halfoptIdET_PKS0_iS0_(%rip), %rcx
    00001b55: 	callq	_Z14test_one_loop3IdPFdPKdidEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6997
    00001b5a: 	movq	0xc0(%rsp), %rdi
    00001b62: 	cmpq	%rbx, %rdi
    00001b65: 	je	.Ltmp3139 # Offset: 7013
    00001b67: 	movq	0xd0(%rsp), %rax
    00001b6f: 	leaq	0x1(%rax), %rsi
    00001b73: 	callq	_ZdlPvm@PLT # Offset: 7027
.Ltmp3139:
    00001b78: 	movq	0x60(%rsp), %r15
    00001b7d: 	movq	0x68(%rsp), %r14
    00001b82: 	movq	%rbx, 0xc0(%rsp)
    00001b8a: 	movq	%r15, %rax
    00001b8d: 	addq	%r14, %rax
    00001b90: 	je	.Ltmp3140 # Offset: 7056
    00001b92: 	testq	%r15, %r15
    00001b95: 	je	.Ltmp3141 # Offset: 7061
.Ltmp3140:
    00001b9b: 	movq	%r14, 0x58(%rsp)
    00001ba0: 	cmpq	$0xf, %r14
    00001ba4: 	ja	.Ltmp3142 # Offset: 7076
    00001baa: 	cmpq	$0x1, %r14
    00001bae: 	jne	.Ltmp3143 # Offset: 7086
    00001bb4: 	movzbl	(%r15), %eax
    00001bb8: 	movb	%al, 0xd0(%rsp)
    00001bbf: 	movq	%rbx, %rax
.Ltmp3203:
    00001bc2: 	movq	%r14, 0xc8(%rsp)
    00001bca: 	movb	$0x0, (%rax,%r14)
    00001bcf: 	movabsq	$0x3fffffffffffffff, %rax
    00001bd9: 	subq	0xc8(%rsp), %rax
    00001be1: 	cmpq	$0x14, %rax
    00001be5: 	jbe	.Ltmp3144 # Offset: 7141
    00001beb: 	movl	$0x15, %edx
    00001bf0: 	leaq	DATAat0x386d7(%rip), %rsi
    00001bf7: 	movq	%r12, %rdi
    00001bfa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 7162
    00001bff: 	movq	%r12, %r8
    00001c02: 	movl	$0x7d0, %edx
    00001c07: 	movl	$0x1f40, %esi
    00001c0c: 	movq	%rbp, %rdi
    00001c0f: 	leaq	_Z17test_do_loop3_optIdET_PKS0_iS0_(%rip), %rcx
    00001c16: 	callq	_Z14test_one_loop3IdPFdPKdidEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7190
    00001c1b: 	movq	0xc0(%rsp), %rdi
    00001c23: 	cmpq	%rbx, %rdi
    00001c26: 	je	.Ltmp3145 # Offset: 7206
    00001c28: 	movq	0xd0(%rsp), %rax
    00001c30: 	leaq	0x1(%rax), %rsi
    00001c34: 	callq	_ZdlPvm@PLT # Offset: 7220
.Ltmp3145:
    00001c39: 	leaq	DATAat0x386ed(%rip), %rdx
    00001c40: 	movq	%r13, %rsi
    00001c43: 	movq	%r12, %rdi
    00001c46: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7238
    00001c4b: 	movq	%r12, %r8
    00001c4e: 	movl	$0x7d0, %edx
    00001c53: 	movl	$0x1f40, %esi
    00001c58: 	movq	%rbp, %rdi
    00001c5b: 	leaq	_Z21test_do_loop3_halfoptIdET_PKS0_iS0_(%rip), %rcx
    00001c62: 	callq	_Z14test_one_loop3IdPFdPKdidEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7266
    00001c67: 	movq	0xc0(%rsp), %rdi
    00001c6f: 	cmpq	%rbx, %rdi
    00001c72: 	je	.Ltmp3146 # Offset: 7282
    00001c74: 	movq	0xd0(%rsp), %rax
    00001c7c: 	leaq	0x1(%rax), %rsi
    00001c80: 	callq	_ZdlPvm@PLT # Offset: 7296
.Ltmp3146:
    00001c85: 	leaq	DATAat0x38704(%rip), %rdx
    00001c8c: 	movq	%r13, %rsi
    00001c8f: 	movq	%r12, %rdi
    00001c92: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7314
    00001c97: 	movq	%r12, %r8
    00001c9a: 	movl	$0x7d0, %edx
    00001c9f: 	movl	$0x1f40, %esi
    00001ca4: 	movq	%rbp, %rdi
    00001ca7: 	leaq	_Z19test_goto_loop3_optIdET_PKS0_iS0_(%rip), %rcx
    00001cae: 	callq	_Z14test_one_loop3IdPFdPKdidEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7342
    00001cb3: 	movq	0xc0(%rsp), %rdi
    00001cbb: 	cmpq	%rbx, %rdi
    00001cbe: 	je	.Ltmp3147 # Offset: 7358
    00001cc0: 	movq	0xd0(%rsp), %rax
    00001cc8: 	leaq	0x1(%rax), %rsi
    00001ccc: 	callq	_ZdlPvm@PLT # Offset: 7372
.Ltmp3147:
    00001cd1: 	leaq	DATAat0x3871c(%rip), %rdx
    00001cd8: 	movq	%r13, %rsi
    00001cdb: 	movq	%r12, %rdi
    00001cde: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7390
    00001ce3: 	movq	%r12, %r8
    00001ce6: 	movl	$0x7d0, %edx
    00001ceb: 	movl	$0x1f40, %esi
    00001cf0: 	movq	%rbp, %rdi
    00001cf3: 	leaq	_Z23test_goto_loop3_halfoptIdET_PKS0_iS0_(%rip), %rcx
    00001cfa: 	callq	_Z14test_one_loop3IdPFdPKdidEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7418
    00001cff: 	movq	0xc0(%rsp), %rdi
    00001d07: 	cmpq	%rbx, %rdi
    00001d0a: 	je	.Ltmp3148 # Offset: 7434
    00001d0c: 	movq	0xd0(%rsp), %rax
    00001d14: 	leaq	0x1(%rax), %rsi
    00001d18: 	callq	_ZdlPvm@PLT # Offset: 7448
.Ltmp3148:
    00001d1d: 	movq	0x60(%rsp), %r15
    00001d22: 	movq	0x68(%rsp), %r14
    00001d27: 	movq	%rbx, 0xc0(%rsp)
    00001d2f: 	movq	%r15, %rax
    00001d32: 	addq	%r14, %rax
    00001d35: 	je	.Ltmp3149 # Offset: 7477
    00001d37: 	testq	%r15, %r15
    00001d3a: 	je	.Ltmp3150 # Offset: 7482
.Ltmp3149:
    00001d40: 	movq	%r14, 0x58(%rsp)
    00001d45: 	cmpq	$0xf, %r14
    00001d49: 	ja	.Ltmp3151 # Offset: 7497
    00001d4f: 	cmpq	$0x1, %r14
    00001d53: 	jne	.Ltmp3152 # Offset: 7507
    00001d59: 	movzbl	(%r15), %eax
    00001d5d: 	movb	%al, 0xd0(%rsp)
    00001d64: 	movq	%rbx, %rax
.Ltmp3201:
    00001d67: 	movq	%r14, 0xc8(%rsp)
    00001d6f: 	movb	$0x0, (%rax,%r14)
    00001d74: 	movabsq	$0x3fffffffffffffff, %rax
    00001d7e: 	subq	0xc8(%rsp), %rax
    00001d86: 	cmpq	$0x17, %rax
    00001d8a: 	jbe	.Ltmp3153 # Offset: 7562
    00001d90: 	movl	$0x18, %edx
    00001d95: 	leaq	DATAat0x38735(%rip), %rsi
    00001d9c: 	movq	%r12, %rdi
    00001d9f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 7583
    00001da4: 	movq	%r12, %r8
    00001da7: 	movl	$0x7d0, %edx
    00001dac: 	movl	$0x1f40, %esi
    00001db1: 	movq	%rbp, %rdi
    00001db4: 	leaq	_Z20test_for_loop3_paramIdET_PKS0_iS0_(%rip), %rcx
    00001dbb: 	callq	_Z14test_one_loop3IdPFdPKdidEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7611
    00001dc0: 	movq	0xc0(%rsp), %rdi
    00001dc8: 	cmpq	%rbx, %rdi
    00001dcb: 	je	.Ltmp3154 # Offset: 7627
    00001dcd: 	movq	0xd0(%rsp), %rax
    00001dd5: 	leaq	0x1(%rax), %rsi
    00001dd9: 	callq	_ZdlPvm@PLT # Offset: 7641
.Ltmp3154:
    00001dde: 	leaq	DATAat0x3874e(%rip), %rdx
    00001de5: 	movq	%r13, %rsi
    00001de8: 	movq	%r12, %rdi
    00001deb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7659
    00001df0: 	movq	%r12, %r8
    00001df3: 	movl	$0x7d0, %edx
    00001df8: 	movl	$0x1f40, %esi
    00001dfd: 	movq	%rbp, %rdi
    00001e00: 	leaq	_Z22test_while_loop3_paramIdET_PKS0_iS0_(%rip), %rcx
    00001e07: 	callq	_Z14test_one_loop3IdPFdPKdidEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7687
    00001e0c: 	movq	0xc0(%rsp), %rdi
    00001e14: 	cmpq	%rbx, %rdi
    00001e17: 	je	.Ltmp3155 # Offset: 7703
    00001e19: 	movq	0xd0(%rsp), %rax
    00001e21: 	leaq	0x1(%rax), %rsi
    00001e25: 	callq	_ZdlPvm@PLT # Offset: 7717
.Ltmp3155:
    00001e2a: 	leaq	DATAat0x38769(%rip), %rdx
    00001e31: 	movq	%r13, %rsi
    00001e34: 	movq	%r12, %rdi
    00001e37: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7735
    00001e3c: 	movq	%r12, %r8
    00001e3f: 	movl	$0x7d0, %edx
    00001e44: 	movl	$0x1f40, %esi
    00001e49: 	movq	%rbp, %rdi
    00001e4c: 	leaq	_Z19test_do_loop3_paramIdET_PKS0_iS0_(%rip), %rcx
    00001e53: 	callq	_Z14test_one_loop3IdPFdPKdidEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7763
    00001e58: 	movq	0xc0(%rsp), %rdi
    00001e60: 	cmpq	%rbx, %rdi
    00001e63: 	je	.Ltmp3156 # Offset: 7779
    00001e65: 	movq	0xd0(%rsp), %rax
    00001e6d: 	leaq	0x1(%rax), %rsi
    00001e71: 	callq	_ZdlPvm@PLT # Offset: 7793
.Ltmp3156:
    00001e76: 	movq	0x60(%rsp), %r15
    00001e7b: 	movq	0x68(%rsp), %r14
    00001e80: 	movq	%rbx, 0xc0(%rsp)
    00001e88: 	movq	%r15, %rax
    00001e8b: 	addq	%r14, %rax
    00001e8e: 	je	.Ltmp3157 # Offset: 7822
    00001e90: 	testq	%r15, %r15
    00001e93: 	je	.Ltmp3158 # Offset: 7827
.Ltmp3157:
    00001e99: 	movq	%r14, 0x58(%rsp)
    00001e9e: 	cmpq	$0xf, %r14
    00001ea2: 	ja	.Ltmp3159 # Offset: 7842
    00001ea8: 	cmpq	$0x1, %r14
    00001eac: 	jne	.Ltmp3160 # Offset: 7852
    00001eb2: 	movzbl	(%r15), %eax
    00001eb6: 	movb	%al, 0xd0(%rsp)
    00001ebd: 	movq	%rbx, %rax
.Ltmp3211:
    00001ec0: 	movq	%r14, 0xc8(%rsp)
    00001ec8: 	movb	$0x0, (%rax,%r14)
    00001ecd: 	movabsq	$0x3fffffffffffffff, %rax
    00001ed7: 	subq	0xc8(%rsp), %rax
    00001edf: 	cmpq	$0x18, %rax
    00001ee3: 	jbe	.Ltmp3161 # Offset: 7907
    00001ee9: 	movl	$0x19, %edx
    00001eee: 	leaq	DATAat0x38781(%rip), %rsi
    00001ef5: 	movq	%r12, %rdi
    00001ef8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 7928
    00001efd: 	movq	%r12, %r8
    00001f00: 	movl	$0x7d0, %edx
    00001f05: 	movl	$0x1f40, %esi
    00001f0a: 	movq	%rbp, %rdi
    00001f0d: 	leaq	_Z21test_goto_loop3_paramIdET_PKS0_iS0_(%rip), %rcx
    00001f14: 	callq	_Z14test_one_loop3IdPFdPKdidEEvPKT_iiT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7956
    00001f19: 	movq	0xc0(%rsp), %rdi
    00001f21: 	cmpq	%rbx, %rdi
    00001f24: 	je	.Ltmp3162 # Offset: 7972
    00001f26: 	movq	0xd0(%rsp), %rax
    00001f2e: 	leaq	0x1(%rax), %rsi
    00001f32: 	callq	_ZdlPvm@PLT # Offset: 7986
.Ltmp3162:
    00001f37: 	leaq	DATAat0x3879b(%rip), %rdx
    00001f3e: 	movq	%r13, %rsi
    00001f41: 	movq	%r12, %rdi
    00001f44: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8004
    00001f49: 	movl	iterations(%rip), %edx
    00001f4f: 	xorl	%r8d, %r8d
    00001f52: 	xorl	%ecx, %ecx
    00001f54: 	movl	$0x1f40, %esi
    00001f59: 	movq	0xc0(%rsp), %rdi
    00001f61: 	callq	_Z9summarizePKciiii # Offset: 8033
    00001f66: 	movq	0xc0(%rsp), %rdi
    00001f6e: 	cmpq	%rbx, %rdi
    00001f71: 	je	.Ltmp3163 # Offset: 8049
    00001f73: 	movq	0xd0(%rsp), %rax
    00001f7b: 	leaq	0x1(%rax), %rsi
    00001f7f: 	callq	_ZdlPvm@PLT # Offset: 8063
.Ltmp3163:
    00001f84: 	movq	0xa0(%rsp), %rdi
    00001f8c: 	leaq	0xb0(%rsp), %rax
    00001f94: 	cmpq	%rax, %rdi
    00001f97: 	je	.Ltmp3164 # Offset: 8087
    00001f99: 	movq	0xb0(%rsp), %rax
    00001fa1: 	leaq	0x1(%rax), %rsi
    00001fa5: 	callq	_ZdlPvm@PLT # Offset: 8101
.Ltmp3164:
    00001faa: 	movq	0x80(%rsp), %rdi
    00001fb2: 	leaq	0x90(%rsp), %rax
    00001fba: 	cmpq	%rax, %rdi
    00001fbd: 	je	.Ltmp3165 # Offset: 8125
    00001fbf: 	movq	0x90(%rsp), %rax
    00001fc7: 	leaq	0x1(%rax), %rsi
    00001fcb: 	callq	_ZdlPvm@PLT # Offset: 8139
.Ltmp3165:
    00001fd0: 	movq	0x60(%rsp), %rdi
    00001fd5: 	cmpq	0x40(%rsp), %rdi
    00001fda: 	je	.Ltmp3166 # Offset: 8154
    00001fdc: 	movq	0x70(%rsp), %rax
    00001fe1: 	leaq	0x1(%rax), %rsi
    00001fe5: 	callq	_ZdlPvm@PLT # Offset: 8165
.Ltmp3166:
    00001fea: 	movq	0xfae8(%rsp), %rax
    00001ff2: 	subq	%fs:0x28, %rax
    00001ffb: 	jne	.Ltmp3167 # Offset: 8187
    00002001: 	addq	$0xfaf8, %rsp
    00002008: 	popq	%rbx
    00002009: 	popq	%rbp
    0000200a: 	popq	%r12
    0000200c: 	popq	%r13
    0000200e: 	popq	%r14
    00002010: 	popq	%r15
    00002012: 	retq # Offset: 8210
    00002013: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2981:
    00002018: 	addq	$0x20, %r14
    0000201c: 	cmpq	%rbx, %r14
    0000201f: 	jne	.Ltmp2982 # Offset: 8223
    00002025: 	addq	$0x8, (%rsp)
    0000202a: 	movq	(%rsp), %rax
    0000202e: 	cmpq	%rax, 0x8(%rsp)
    00002033: 	ja	.Ltmp2983 # Offset: 8243
    00002039: 	jmp	.Ltmp2980 # Offset: 8249
.Ltmp2998:
    0000203e: 	testq	%r14, %r14
    00002041: 	jne	.Ltmp3168 # Offset: 8257
    00002047: 	movq	%rbx, %rax
    0000204a: 	jmp	.Ltmp3169 # Offset: 8266
.Ltmp3110:
    0000204f: 	testq	%r14, %r14
    00002052: 	jne	.Ltmp3170 # Offset: 8274
    00002058: 	movq	%rbx, %rax
    0000205b: 	jmp	.Ltmp3171 # Offset: 8283
.Ltmp3104:
    00002060: 	testq	%r14, %r14
    00002063: 	jne	.Ltmp3172 # Offset: 8291
    00002069: 	movq	%rbx, %rax
    0000206c: 	jmp	.Ltmp3173 # Offset: 8300
.Ltmp3092:
    00002071: 	testq	%r14, %r14
    00002074: 	jne	.Ltmp3174 # Offset: 8308
    0000207a: 	movq	%rbx, %rax
    0000207d: 	jmp	.Ltmp3175 # Offset: 8317
.Ltmp3029:
    00002082: 	testq	%r14, %r14
    00002085: 	jne	.Ltmp3176 # Offset: 8325
    0000208b: 	movq	%rbx, %rax
    0000208e: 	jmp	.Ltmp3177 # Offset: 8334
.Ltmp3020:
    00002093: 	testq	%r14, %r14
    00002096: 	jne	.Ltmp3178 # Offset: 8342
    0000209c: 	movq	%rbx, %rax
    0000209f: 	jmp	.Ltmp3179 # Offset: 8351
.Ltmp3012:
    000020a4: 	testq	%r14, %r14
    000020a7: 	jne	.Ltmp3180 # Offset: 8359
    000020ad: 	movq	%rbx, %rax
    000020b0: 	jmp	.Ltmp3181 # Offset: 8368
.Ltmp3006:
    000020b5: 	testq	%r14, %r14
    000020b8: 	jne	.Ltmp3182 # Offset: 8376
    000020be: 	movq	%rbx, %rax
    000020c1: 	jmp	.Ltmp3183 # Offset: 8385
.Ltmp3086:
    000020c6: 	testq	%r14, %r14
    000020c9: 	jne	.Ltmp3184 # Offset: 8393
    000020cf: 	movq	%rbx, %rax
    000020d2: 	jmp	.Ltmp3185 # Offset: 8402
.Ltmp3076:
    000020d7: 	testq	%r14, %r14
    000020da: 	jne	.Ltmp3186 # Offset: 8410
    000020e0: 	movq	%rbx, %rax
    000020e3: 	jmp	.Ltmp3187 # Offset: 8419
.Ltmp3069:
    000020e8: 	testq	%r14, %r14
    000020eb: 	jne	.Ltmp3188 # Offset: 8427
    000020f1: 	movq	%rbx, %rax
    000020f4: 	jmp	.Ltmp3189 # Offset: 8436
.Ltmp3062:
    000020f9: 	testq	%r14, %r14
    000020fc: 	jne	.Ltmp3190 # Offset: 8444
    00002102: 	movq	%rbx, %rax
    00002105: 	jmp	.Ltmp3191 # Offset: 8453
.Ltmp3056:
    0000210a: 	testq	%r14, %r14
    0000210d: 	jne	.Ltmp3192 # Offset: 8461
    00002113: 	movq	%rbx, %rax
    00002116: 	jmp	.Ltmp3193 # Offset: 8470
.Ltmp3048:
    0000211b: 	testq	%r14, %r14
    0000211e: 	jne	.Ltmp3194 # Offset: 8478
    00002124: 	movq	%rbx, %rax
    00002127: 	jmp	.Ltmp3195 # Offset: 8487
.Ltmp3042:
    0000212c: 	testq	%r14, %r14
    0000212f: 	jne	.Ltmp3196 # Offset: 8495
    00002135: 	movq	%rbx, %rax
    00002138: 	jmp	.Ltmp3197 # Offset: 8504
.Ltmp3035:
    0000213d: 	testq	%r14, %r14
    00002140: 	jne	.Ltmp3198 # Offset: 8512
    00002146: 	movq	%rbx, %rax
    00002149: 	jmp	.Ltmp3199 # Offset: 8521
.Ltmp3041:
    0000214e: 	leaq	0x58(%rsp), %rsi
    00002153: 	xorl	%edx, %edx
    00002155: 	movq	%r12, %rdi
    00002158: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8536
    0000215d: 	movq	%rax, 0xc0(%rsp)
    00002165: 	movq	%rax, %rdi
    00002168: 	movq	0x58(%rsp), %rax
    0000216d: 	movq	%rax, 0xd0(%rsp)
.Ltmp3229:
    00002175: 	movq	(%rsp), %rsi
    00002179: 	movq	%r14, %rdx
    0000217c: 	callq	memcpy@PLT # Offset: 8572
    00002181: 	movq	0x58(%rsp), %r14
    00002186: 	movq	0xc0(%rsp), %rax
    0000218e: 	jmp	.Ltmp3197 # Offset: 8590
.Ltmp3068:
    00002193: 	leaq	0x58(%rsp), %rsi
    00002198: 	xorl	%edx, %edx
    0000219a: 	movq	%r12, %rdi
    0000219d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8605
    000021a2: 	movq	%rax, 0xc0(%rsp)
    000021aa: 	movq	%rax, %rdi
    000021ad: 	movq	0x58(%rsp), %rax
    000021b2: 	movq	%rax, 0xd0(%rsp)
.Ltmp3225:
    000021ba: 	movq	(%rsp), %rsi
    000021be: 	movq	%r14, %rdx
    000021c1: 	callq	memcpy@PLT # Offset: 8641
    000021c6: 	movq	0x58(%rsp), %r14
    000021cb: 	movq	0xc0(%rsp), %rax
    000021d3: 	jmp	.Ltmp3189 # Offset: 8659
.Ltmp3061:
    000021d8: 	leaq	0x58(%rsp), %rsi
    000021dd: 	xorl	%edx, %edx
    000021df: 	movq	%r12, %rdi
    000021e2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8674
    000021e7: 	movq	%rax, 0xc0(%rsp)
    000021ef: 	movq	%rax, %rdi
    000021f2: 	movq	0x58(%rsp), %rax
    000021f7: 	movq	%rax, 0xd0(%rsp)
.Ltmp3226:
    000021ff: 	movq	(%rsp), %rsi
    00002203: 	movq	%r14, %rdx
    00002206: 	callq	memcpy@PLT # Offset: 8710
    0000220b: 	movq	0x58(%rsp), %r14
    00002210: 	movq	0xc0(%rsp), %rax
    00002218: 	jmp	.Ltmp3191 # Offset: 8728
.Ltmp3055:
    0000221d: 	leaq	0x58(%rsp), %rsi
    00002222: 	xorl	%edx, %edx
    00002224: 	movq	%r12, %rdi
    00002227: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8743
    0000222c: 	movq	%rax, 0xc0(%rsp)
    00002234: 	movq	%rax, %rdi
    00002237: 	movq	0x58(%rsp), %rax
    0000223c: 	movq	%rax, 0xd0(%rsp)
.Ltmp3227:
    00002244: 	movq	(%rsp), %rsi
    00002248: 	movq	%r14, %rdx
    0000224b: 	callq	memcpy@PLT # Offset: 8779
    00002250: 	movq	0x58(%rsp), %r14
    00002255: 	movq	0xc0(%rsp), %rax
    0000225d: 	jmp	.Ltmp3193 # Offset: 8797
.Ltmp3047:
    00002262: 	leaq	0x58(%rsp), %rsi
    00002267: 	xorl	%edx, %edx
    00002269: 	movq	%r12, %rdi
    0000226c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8812
    00002271: 	movq	%rax, 0xc0(%rsp)
    00002279: 	movq	%rax, %rdi
    0000227c: 	movq	0x58(%rsp), %rax
    00002281: 	movq	%rax, 0xd0(%rsp)
.Ltmp3228:
    00002289: 	movq	(%rsp), %rsi
    0000228d: 	movq	%r14, %rdx
    00002290: 	callq	memcpy@PLT # Offset: 8848
    00002295: 	movq	0x58(%rsp), %r14
    0000229a: 	movq	0xc0(%rsp), %rax
    000022a2: 	jmp	.Ltmp3195 # Offset: 8866
.Ltmp3011:
    000022a7: 	leaq	0x58(%rsp), %rsi
    000022ac: 	xorl	%edx, %edx
    000022ae: 	movq	%r12, %rdi
    000022b1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8881
    000022b6: 	movq	%rax, 0xc0(%rsp)
    000022be: 	movq	%rax, %rdi
    000022c1: 	movq	0x58(%rsp), %rax
    000022c6: 	movq	%rax, 0xd0(%rsp)
.Ltmp3221:
    000022ce: 	movq	(%rsp), %rsi
    000022d2: 	movq	%r14, %rdx
    000022d5: 	callq	memcpy@PLT # Offset: 8917
    000022da: 	movq	0x58(%rsp), %r14
    000022df: 	movq	0xc0(%rsp), %rax
    000022e7: 	jmp	.Ltmp3181 # Offset: 8935
.Ltmp3091:
    000022ec: 	leaq	0x58(%rsp), %rsi
    000022f1: 	xorl	%edx, %edx
    000022f3: 	movq	%r12, %rdi
    000022f6: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8950
    000022fb: 	movq	%rax, 0xc0(%rsp)
    00002303: 	movq	%rax, %rdi
    00002306: 	movq	0x58(%rsp), %rax
    0000230b: 	movq	%rax, 0xd0(%rsp)
.Ltmp3218:
    00002313: 	movq	%r14, %rdx
    00002316: 	movq	%r15, %rsi
    00002319: 	callq	memcpy@PLT # Offset: 8985
    0000231e: 	movq	0x58(%rsp), %r14
    00002323: 	movq	0xc0(%rsp), %rax
    0000232b: 	jmp	.Ltmp3175 # Offset: 9003
.Ltmp3085:
    00002330: 	leaq	0x58(%rsp), %rsi
    00002335: 	xorl	%edx, %edx
    00002337: 	movq	%r12, %rdi
    0000233a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9018
    0000233f: 	movq	%rax, 0xc0(%rsp)
    00002347: 	movq	%rax, %rdi
    0000234a: 	movq	0x58(%rsp), %rax
    0000234f: 	movq	%rax, 0xd0(%rsp)
.Ltmp3223:
    00002357: 	movq	%r14, %rdx
    0000235a: 	movq	%r15, %rsi
    0000235d: 	callq	memcpy@PLT # Offset: 9053
    00002362: 	movq	0x58(%rsp), %r14
    00002367: 	movq	0xc0(%rsp), %rax
    0000236f: 	jmp	.Ltmp3185 # Offset: 9071
.Ltmp3075:
    00002374: 	leaq	0x58(%rsp), %rsi
    00002379: 	xorl	%edx, %edx
    0000237b: 	movq	%r12, %rdi
    0000237e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9086
    00002383: 	movq	%rax, 0xc0(%rsp)
    0000238b: 	movq	%rax, %rdi
    0000238e: 	movq	0x58(%rsp), %rax
    00002393: 	movq	%rax, 0xd0(%rsp)
.Ltmp3224:
    0000239b: 	movq	(%rsp), %rsi
    0000239f: 	movq	%r14, %rdx
    000023a2: 	callq	memcpy@PLT # Offset: 9122
    000023a7: 	movq	0x58(%rsp), %r14
    000023ac: 	movq	0xc0(%rsp), %rax
    000023b4: 	jmp	.Ltmp3187 # Offset: 9140
.Ltmp3152:
    000023b9: 	testq	%r14, %r14
    000023bc: 	jne	.Ltmp3200 # Offset: 9148
    000023c2: 	movq	%rbx, %rax
    000023c5: 	jmp	.Ltmp3201 # Offset: 9157
.Ltmp3143:
    000023ca: 	testq	%r14, %r14
    000023cd: 	jne	.Ltmp3202 # Offset: 9165
    000023d3: 	movq	%rbx, %rax
    000023d6: 	jmp	.Ltmp3203 # Offset: 9174
.Ltmp3133:
    000023db: 	testq	%r14, %r14
    000023de: 	jne	.Ltmp3204 # Offset: 9182
    000023e4: 	movq	%rbx, %rax
    000023e7: 	jmp	.Ltmp3205 # Offset: 9191
.Ltmp3124:
    000023ec: 	testq	%r14, %r14
    000023ef: 	jne	.Ltmp3206 # Offset: 9199
    000023f5: 	movq	%rbx, %rax
    000023f8: 	jmp	.Ltmp3207 # Offset: 9208
.Ltmp3103:
    000023fd: 	leaq	0x58(%rsp), %rsi
    00002402: 	xorl	%edx, %edx
    00002404: 	movq	%r12, %rdi
    00002407: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9223
    0000240c: 	movq	%rax, 0xc0(%rsp)
    00002414: 	movq	%rax, %rdi
    00002417: 	movq	0x58(%rsp), %rax
    0000241c: 	movq	%rax, 0xd0(%rsp)
.Ltmp3217:
    00002424: 	movq	%r14, %rdx
    00002427: 	movq	%r15, %rsi
    0000242a: 	callq	memcpy@PLT # Offset: 9258
    0000242f: 	movq	0x58(%rsp), %r14
    00002434: 	movq	0xc0(%rsp), %rax
    0000243c: 	jmp	.Ltmp3173 # Offset: 9276
.Ltmp3034:
    00002441: 	leaq	0x58(%rsp), %rsi
    00002446: 	xorl	%edx, %edx
    00002448: 	movq	%r12, %rdi
    0000244b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9291
    00002450: 	movq	%rax, 0xc0(%rsp)
    00002458: 	movq	%rax, %rdi
    0000245b: 	movq	0x58(%rsp), %rax
    00002460: 	movq	%rax, 0xd0(%rsp)
.Ltmp3230:
    00002468: 	movq	(%rsp), %rsi
    0000246c: 	movq	%r14, %rdx
    0000246f: 	callq	memcpy@PLT # Offset: 9327
    00002474: 	movq	0x58(%rsp), %r14
    00002479: 	movq	0xc0(%rsp), %rax
    00002481: 	jmp	.Ltmp3199 # Offset: 9345
.Ltmp3028:
    00002486: 	leaq	0x58(%rsp), %rsi
    0000248b: 	xorl	%edx, %edx
    0000248d: 	movq	%r12, %rdi
    00002490: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9360
    00002495: 	movq	%rax, 0xc0(%rsp)
    0000249d: 	movq	%rax, %rdi
    000024a0: 	movq	0x58(%rsp), %rax
    000024a5: 	movq	%rax, 0xd0(%rsp)
.Ltmp3219:
    000024ad: 	movq	(%rsp), %rsi
    000024b1: 	movq	%r14, %rdx
    000024b4: 	callq	memcpy@PLT # Offset: 9396
    000024b9: 	movq	0x58(%rsp), %r14
    000024be: 	movq	0xc0(%rsp), %rax
    000024c6: 	jmp	.Ltmp3177 # Offset: 9414
.Ltmp3019:
    000024cb: 	leaq	0x58(%rsp), %rsi
    000024d0: 	xorl	%edx, %edx
    000024d2: 	movq	%r12, %rdi
    000024d5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9429
    000024da: 	movq	%rax, 0xc0(%rsp)
    000024e2: 	movq	%rax, %rdi
    000024e5: 	movq	0x58(%rsp), %rax
    000024ea: 	movq	%rax, 0xd0(%rsp)
.Ltmp3220:
    000024f2: 	movq	(%rsp), %rsi
    000024f6: 	movq	%r14, %rdx
    000024f9: 	callq	memcpy@PLT # Offset: 9465
    000024fe: 	movq	0x58(%rsp), %r14
    00002503: 	movq	0xc0(%rsp), %rax
    0000250b: 	jmp	.Ltmp3179 # Offset: 9483
.Ltmp3116:
    00002510: 	testq	%r14, %r14
    00002513: 	jne	.Ltmp3208 # Offset: 9491
    00002519: 	movq	%rbx, %rax
    0000251c: 	jmp	.Ltmp3209 # Offset: 9500
.Ltmp3109:
    00002521: 	leaq	0x58(%rsp), %rsi
    00002526: 	xorl	%edx, %edx
    00002528: 	movq	%r12, %rdi
    0000252b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9515
    00002530: 	movq	%rax, 0xc0(%rsp)
    00002538: 	movq	%rax, %rdi
    0000253b: 	movq	0x58(%rsp), %rax
    00002540: 	movq	%rax, 0xd0(%rsp)
.Ltmp3216:
    00002548: 	movq	%r14, %rdx
    0000254b: 	movq	%r15, %rsi
    0000254e: 	callq	memcpy@PLT # Offset: 9550
    00002553: 	movq	0x58(%rsp), %r14
    00002558: 	movq	0xc0(%rsp), %rax
    00002560: 	jmp	.Ltmp3171 # Offset: 9568
.Ltmp3160:
    00002565: 	testq	%r14, %r14
    00002568: 	jne	.Ltmp3210 # Offset: 9576
    0000256e: 	movq	%rbx, %rax
    00002571: 	jmp	.Ltmp3211 # Offset: 9585
.Ltmp3005:
    00002576: 	leaq	0x58(%rsp), %rsi
    0000257b: 	xorl	%edx, %edx
    0000257d: 	movq	%r12, %rdi
    00002580: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9600
    00002585: 	movq	%rax, 0xc0(%rsp)
    0000258d: 	movq	%rax, %rdi
    00002590: 	movq	0x58(%rsp), %rax
    00002595: 	movq	%rax, 0xd0(%rsp)
.Ltmp3222:
    0000259d: 	movq	(%rsp), %rsi
    000025a1: 	movq	%r14, %rdx
    000025a4: 	callq	memcpy@PLT # Offset: 9636
    000025a9: 	movq	0x58(%rsp), %r14
    000025ae: 	movq	0xc0(%rsp), %rax
    000025b6: 	jmp	.Ltmp3183 # Offset: 9654
.Ltmp2997:
    000025bb: 	leaq	0x58(%rsp), %rsi
    000025c0: 	xorl	%edx, %edx
    000025c2: 	movq	%r12, %rdi
    000025c5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9669
    000025ca: 	movq	%rax, 0xc0(%rsp)
    000025d2: 	movq	%rax, %rdi
    000025d5: 	movq	0x58(%rsp), %rax
    000025da: 	movq	%rax, 0xd0(%rsp)
.Ltmp3215:
    000025e2: 	movq	(%rsp), %rsi
    000025e6: 	movq	%r14, %rdx
    000025e9: 	callq	memcpy@PLT # Offset: 9705
    000025ee: 	movq	0x58(%rsp), %r14
    000025f3: 	movq	0xc0(%rsp), %rax
    000025fb: 	jmp	.Ltmp3169 # Offset: 9723
.Ltmp3142:
    00002600: 	leaq	0x58(%rsp), %rsi
    00002605: 	xorl	%edx, %edx
    00002607: 	movq	%r12, %rdi
    0000260a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9738
    0000260f: 	movq	%rax, 0xc0(%rsp)
    00002617: 	movq	%rax, %rdi
    0000261a: 	movq	0x58(%rsp), %rax
    0000261f: 	movq	%rax, 0xd0(%rsp)
.Ltmp3232:
    00002627: 	movq	%r14, %rdx
    0000262a: 	movq	%r15, %rsi
    0000262d: 	callq	memcpy@PLT # Offset: 9773
    00002632: 	movq	0x58(%rsp), %r14
    00002637: 	movq	0xc0(%rsp), %rax
    0000263f: 	jmp	.Ltmp3203 # Offset: 9791
.Ltmp3132:
    00002644: 	leaq	0x58(%rsp), %rsi
    00002649: 	xorl	%edx, %edx
    0000264b: 	movq	%r12, %rdi
    0000264e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9806
    00002653: 	movq	%rax, 0xc0(%rsp)
    0000265b: 	movq	%rax, %rdi
    0000265e: 	movq	0x58(%rsp), %rax
    00002663: 	movq	%rax, 0xd0(%rsp)
.Ltmp3233:
    0000266b: 	movq	%r14, %rdx
    0000266e: 	movq	%r15, %rsi
    00002671: 	callq	memcpy@PLT # Offset: 9841
    00002676: 	movq	0x58(%rsp), %r14
    0000267b: 	movq	0xc0(%rsp), %rax
    00002683: 	jmp	.Ltmp3205 # Offset: 9859
.Ltmp3159:
    00002688: 	leaq	0x58(%rsp), %rsi
    0000268d: 	xorl	%edx, %edx
    0000268f: 	movq	%r12, %rdi
    00002692: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9874
    00002697: 	movq	%rax, 0xc0(%rsp)
    0000269f: 	movq	%rax, %rdi
    000026a2: 	movq	0x58(%rsp), %rax
    000026a7: 	movq	%rax, 0xd0(%rsp)
.Ltmp3236:
    000026af: 	movq	%r14, %rdx
    000026b2: 	movq	%r15, %rsi
    000026b5: 	callq	memcpy@PLT # Offset: 9909
    000026ba: 	movq	0x58(%rsp), %r14
    000026bf: 	movq	0xc0(%rsp), %rax
    000026c7: 	jmp	.Ltmp3211 # Offset: 9927
.Ltmp3151:
    000026cc: 	leaq	0x58(%rsp), %rsi
    000026d1: 	xorl	%edx, %edx
    000026d3: 	movq	%r12, %rdi
    000026d6: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9942
    000026db: 	movq	%rax, 0xc0(%rsp)
    000026e3: 	movq	%rax, %rdi
    000026e6: 	movq	0x58(%rsp), %rax
    000026eb: 	movq	%rax, 0xd0(%rsp)
.Ltmp3231:
    000026f3: 	movq	%r14, %rdx
    000026f6: 	movq	%r15, %rsi
    000026f9: 	callq	memcpy@PLT # Offset: 9977
    000026fe: 	movq	0x58(%rsp), %r14
    00002703: 	movq	0xc0(%rsp), %rax
    0000270b: 	jmp	.Ltmp3201 # Offset: 9995
.Ltmp3123:
    00002710: 	leaq	0x58(%rsp), %rsi
    00002715: 	xorl	%edx, %edx
    00002717: 	movq	%r12, %rdi
    0000271a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 10010
    0000271f: 	movq	%rax, 0xc0(%rsp)
    00002727: 	movq	%rax, %rdi
    0000272a: 	movq	0x58(%rsp), %rax
    0000272f: 	movq	%rax, 0xd0(%rsp)
.Ltmp3234:
    00002737: 	movq	%r14, %rdx
    0000273a: 	movq	%r15, %rsi
    0000273d: 	callq	memcpy@PLT # Offset: 10045
    00002742: 	movq	0x58(%rsp), %r14
    00002747: 	movq	0xc0(%rsp), %rax
    0000274f: 	jmp	.Ltmp3207 # Offset: 10063
.Ltmp3115:
    00002754: 	leaq	0x58(%rsp), %rsi
    00002759: 	xorl	%edx, %edx
    0000275b: 	movq	%r12, %rdi
    0000275e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 10078
    00002763: 	movq	%rax, 0xc0(%rsp)
    0000276b: 	movq	%rax, %rdi
    0000276e: 	movq	0x58(%rsp), %rax
    00002773: 	movq	%rax, 0xd0(%rsp)
.Ltmp3235:
    0000277b: 	movq	%r14, %rdx
    0000277e: 	movq	%r15, %rsi
    00002781: 	callq	memcpy@PLT # Offset: 10113
    00002786: 	movq	0x58(%rsp), %r14
    0000278b: 	movq	0xc0(%rsp), %rax
    00002793: 	jmp	.Ltmp3209 # Offset: 10131
.Ltmp2985:
    00002798: 	cmpq	0x10(%rsp), %r12
    0000279d: 	je	.Ltmp2988 # Offset: 10141
.Ltmp3214:
    000027a3: 	movq	(%r12), %rdi
    000027a7: 	leaq	0x10(%r12), %rax
    000027ac: 	cmpq	%rax, %rdi
    000027af: 	je	.Ltmp3212 # Offset: 10159
.Ltmp3213:
    000027b1: 	movq	0x10(%r12), %rax
    000027b6: 	addq	$0x20, %r12
    000027ba: 	leaq	0x1(%rax), %rsi
    000027be: 	callq	_ZdlPvm@PLT # Offset: 10174
    000027c3: 	cmpq	%r12, 0x10(%rsp)
    000027c8: 	je	.Ltmp2988 # Offset: 10184
    000027ce: 	movq	(%r12), %rdi
    000027d2: 	leaq	0x10(%r12), %rax
    000027d7: 	cmpq	%rax, %rdi
    000027da: 	jne	.Ltmp3213 # Offset: 10202
.Ltmp3212:
    000027dc: 	addq	$0x20, %r12
    000027e0: 	cmpq	%r12, 0x10(%rsp)
    000027e5: 	jne	.Ltmp3214 # Offset: 10213
    000027e7: 	jmp	.Ltmp2988 # Offset: 10215
.Ltmp2999:
    000027ec: 	leaq	DATAat0x38182(%rip), %rdi
    000027f3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10227
.Ltmp3004:
    000027f8: 	leaq	DATAat0x38158(%rip), %rdi
    000027ff: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10239
.Ltmp3007:
    00002804: 	leaq	DATAat0x38182(%rip), %rdi
    0000280b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10251
.Ltmp3010:
    00002810: 	leaq	DATAat0x38158(%rip), %rdi
    00002817: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10263
.Ltmp3013:
    0000281c: 	leaq	DATAat0x38182(%rip), %rdi
    00002823: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10275
.Ltmp3018:
    00002828: 	leaq	DATAat0x38158(%rip), %rdi
    0000282f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10287
.Ltmp3021:
    00002834: 	leaq	DATAat0x38182(%rip), %rdi
    0000283b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10299
.Ltmp3027:
    00002840: 	leaq	DATAat0x38158(%rip), %rdi
    00002847: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10311
.Ltmp3030:
    0000284c: 	leaq	DATAat0x38182(%rip), %rdi
    00002853: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10323
.Ltmp3033:
    00002858: 	leaq	DATAat0x38158(%rip), %rdi
    0000285f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10335
.Ltmp3036:
    00002864: 	leaq	DATAat0x38182(%rip), %rdi
    0000286b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10347
.Ltmp3040:
    00002870: 	leaq	DATAat0x38158(%rip), %rdi
    00002877: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10359
.Ltmp3043:
    0000287c: 	leaq	DATAat0x38182(%rip), %rdi
    00002883: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10371
.Ltmp3046:
    00002888: 	leaq	DATAat0x38158(%rip), %rdi
    0000288f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10383
.Ltmp3049:
    00002894: 	leaq	DATAat0x38182(%rip), %rdi
    0000289b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10395
.Ltmp3054:
    000028a0: 	leaq	DATAat0x38158(%rip), %rdi
    000028a7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10407
.Ltmp3057:
    000028ac: 	leaq	DATAat0x38182(%rip), %rdi
    000028b3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10419
.Ltmp3060:
    000028b8: 	leaq	DATAat0x38158(%rip), %rdi
    000028bf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10431
.Ltmp3063:
    000028c4: 	leaq	DATAat0x38182(%rip), %rdi
    000028cb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10443
.Ltmp3067:
    000028d0: 	leaq	DATAat0x38158(%rip), %rdi
    000028d7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10455
.Ltmp3070:
    000028dc: 	leaq	DATAat0x38182(%rip), %rdi
    000028e3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10467
.Ltmp3074:
    000028e8: 	leaq	DATAat0x38158(%rip), %rdi
    000028ef: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10479
.Ltmp3077:
    000028f4: 	leaq	DATAat0x38182(%rip), %rdi
    000028fb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10491
.Ltmp3084:
    00002900: 	leaq	DATAat0x38158(%rip), %rdi
    00002907: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10503
.Ltmp3087:
    0000290c: 	leaq	DATAat0x38182(%rip), %rdi
    00002913: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10515
.Ltmp3090:
    00002918: 	leaq	DATAat0x38158(%rip), %rdi
    0000291f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10527
.Ltmp3093:
    00002924: 	leaq	DATAat0x38182(%rip), %rdi
    0000292b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10539
.Ltmp3102:
    00002930: 	leaq	DATAat0x38158(%rip), %rdi
    00002937: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10551
.Ltmp3105:
    0000293c: 	leaq	DATAat0x38182(%rip), %rdi
    00002943: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10563
.Ltmp3108:
    00002948: 	leaq	DATAat0x38158(%rip), %rdi
    0000294f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10575
.Ltmp3111:
    00002954: 	leaq	DATAat0x38182(%rip), %rdi
    0000295b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10587
.Ltmp3114:
    00002960: 	leaq	DATAat0x38158(%rip), %rdi
    00002967: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10599
.Ltmp3117:
    0000296c: 	leaq	DATAat0x38182(%rip), %rdi
    00002973: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10611
.Ltmp3122:
    00002978: 	leaq	DATAat0x38158(%rip), %rdi
    0000297f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10623
.Ltmp3125:
    00002984: 	leaq	DATAat0x38182(%rip), %rdi
    0000298b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10635
.Ltmp3131:
    00002990: 	leaq	DATAat0x38158(%rip), %rdi
    00002997: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10647
.Ltmp3134:
    0000299c: 	leaq	DATAat0x38182(%rip), %rdi
    000029a3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10659
.Ltmp3141:
    000029a8: 	leaq	DATAat0x38158(%rip), %rdi
    000029af: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10671
.Ltmp3144:
    000029b4: 	leaq	DATAat0x38182(%rip), %rdi
    000029bb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10683
.Ltmp3150:
    000029c0: 	leaq	DATAat0x38158(%rip), %rdi
    000029c7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10695
.Ltmp3153:
    000029cc: 	leaq	DATAat0x38182(%rip), %rdi
    000029d3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10707
.Ltmp3158:
    000029d8: 	leaq	DATAat0x38158(%rip), %rdi
    000029df: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10719
.Ltmp3161:
    000029e4: 	leaq	DATAat0x38182(%rip), %rdi
    000029eb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10731
.Ltmp3167:
    000029f0: 	callq	__stack_chk_fail@PLT # Offset: 10736
.Ltmp3168:
    000029f5: 	movq	%rbx, %rdi
    000029f8: 	jmp	.Ltmp3215 # Offset: 10744
.Ltmp3170:
    000029fd: 	movq	%rbx, %rdi
    00002a00: 	jmp	.Ltmp3216 # Offset: 10752
.Ltmp3172:
    00002a05: 	movq	%rbx, %rdi
    00002a08: 	jmp	.Ltmp3217 # Offset: 10760
.Ltmp3174:
    00002a0d: 	movq	%rbx, %rdi
    00002a10: 	jmp	.Ltmp3218 # Offset: 10768
.Ltmp3176:
    00002a15: 	movq	%rbx, %rdi
    00002a18: 	jmp	.Ltmp3219 # Offset: 10776
.Ltmp3178:
    00002a1d: 	movq	%rbx, %rdi
    00002a20: 	jmp	.Ltmp3220 # Offset: 10784
.Ltmp3180:
    00002a25: 	movq	%rbx, %rdi
    00002a28: 	jmp	.Ltmp3221 # Offset: 10792
.Ltmp3182:
    00002a2d: 	movq	%rbx, %rdi
    00002a30: 	jmp	.Ltmp3222 # Offset: 10800
.Ltmp3184:
    00002a35: 	movq	%rbx, %rdi
    00002a38: 	jmp	.Ltmp3223 # Offset: 10808
.Ltmp3186:
    00002a3d: 	movq	%rbx, %rdi
    00002a40: 	jmp	.Ltmp3224 # Offset: 10816
.Ltmp3188:
    00002a45: 	movq	%rbx, %rdi
    00002a48: 	jmp	.Ltmp3225 # Offset: 10824
.Ltmp3190:
    00002a4d: 	movq	%rbx, %rdi
    00002a50: 	jmp	.Ltmp3226 # Offset: 10832
.Ltmp3192:
    00002a55: 	movq	%rbx, %rdi
    00002a58: 	jmp	.Ltmp3227 # Offset: 10840
.Ltmp3194:
    00002a5d: 	movq	%rbx, %rdi
    00002a60: 	jmp	.Ltmp3228 # Offset: 10848
.Ltmp3196:
    00002a65: 	movq	%rbx, %rdi
    00002a68: 	jmp	.Ltmp3229 # Offset: 10856
.Ltmp3198:
    00002a6d: 	movq	%rbx, %rdi
    00002a70: 	jmp	.Ltmp3230 # Offset: 10864
.Ltmp3200:
    00002a75: 	movq	%rbx, %rdi
    00002a78: 	jmp	.Ltmp3231 # Offset: 10872
.Ltmp3202:
    00002a7d: 	movq	%rbx, %rdi
    00002a80: 	jmp	.Ltmp3232 # Offset: 10880
.Ltmp3204:
    00002a85: 	movq	%rbx, %rdi
    00002a88: 	jmp	.Ltmp3233 # Offset: 10888
.Ltmp3206:
    00002a8d: 	movq	%rbx, %rdi
    00002a90: 	jmp	.Ltmp3234 # Offset: 10896
.Ltmp3208:
    00002a95: 	movq	%rbx, %rdi
    00002a98: 	jmp	.Ltmp3235 # Offset: 10904
.Ltmp3210:
    00002a9d: 	movq	%rbx, %rdi
    00002aa0: 	jmp	.Ltmp3236 # Offset: 10912
.Ltmp2996:
    00002aa5: 	leaq	DATAat0x38158(%rip), %rdi
    00002aac: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10924
    00002ab1: 	endbr64
.Ltmp3238:
    00002ab5: 	movq	%rax, %rbp
    00002ab8: 	jmp	.Ltmp3237 # Offset: 10936
    00002aba: 	endbr64
    00002abe: 	jmp	.Ltmp3238 # Offset: 10942
    00002ac0: 	endbr64
    00002ac4: 	jmp	.Ltmp3238 # Offset: 10948
    00002ac6: 	endbr64
    00002aca: 	jmp	.Ltmp3238 # Offset: 10954
    00002acc: 	endbr64
    00002ad0: 	jmp	.Ltmp3238 # Offset: 10960
    00002ad2: 	endbr64
    00002ad6: 	jmp	.Ltmp3238 # Offset: 10966
.Ltmp3237:
    00002ad8: 	movq	0xc0(%rsp), %rdi
    00002ae0: 	cmpq	%rbx, %rdi
    00002ae3: 	je	.Ltmp3239 # Offset: 10979
.Ltmp3248:
    00002ae5: 	movq	0xd0(%rsp), %rax
    00002aed: 	leaq	0x1(%rax), %rsi
    00002af1: 	callq	_ZdlPvm@PLT # Offset: 10993
.Ltmp3239:
    00002af6: 	movq	0x60(%rsp), %rdi
    00002afb: 	cmpq	0x40(%rsp), %rdi
    00002b00: 	je	.Ltmp3240 # Offset: 11008
    00002b02: 	movq	0x70(%rsp), %rax
    00002b07: 	leaq	0x1(%rax), %rsi
    00002b0b: 	callq	_ZdlPvm@PLT # Offset: 11019
.Ltmp3240:
    00002b10: 	movq	%rbp, %rdi
    00002b13: 	callq	_Unwind_Resume@PLT # Offset: 11027
    00002b18: 	endbr64
.Ltmp3242:
    00002b1c: 	movq	%rax, %rbp
    00002b1f: 	jmp	.Ltmp3241 # Offset: 11039
    00002b21: 	endbr64
    00002b25: 	jmp	.Ltmp3242 # Offset: 11045
    00002b27: 	endbr64
    00002b2b: 	jmp	.Ltmp3242 # Offset: 11051
    00002b2d: 	endbr64
    00002b31: 	jmp	.Ltmp3238 # Offset: 11057
    00002b33: 	endbr64
    00002b37: 	jmp	.Ltmp3238 # Offset: 11063
    00002b3c: 	endbr64
    00002b40: 	jmp	.Ltmp3238 # Offset: 11072
    00002b45: 	endbr64
    00002b49: 	jmp	.Ltmp3238 # Offset: 11081
    00002b4e: 	endbr64
    00002b52: 	jmp	.Ltmp3242 # Offset: 11090
    00002b54: 	endbr64
    00002b58: 	jmp	.Ltmp3242 # Offset: 11096
    00002b5a: 	endbr64
    00002b5e: 	jmp	.Ltmp3242 # Offset: 11102
    00002b60: 	endbr64
    00002b64: 	jmp	.Ltmp3242 # Offset: 11108
    00002b66: 	endbr64
    00002b6a: 	jmp	.Ltmp3242 # Offset: 11114
    00002b6c: 	endbr64
    00002b70: 	jmp	.Ltmp3242 # Offset: 11120
    00002b72: 	endbr64
    00002b76: 	jmp	.Ltmp3242 # Offset: 11126
    00002b78: 	endbr64
    00002b7c: 	jmp	.Ltmp3242 # Offset: 11132
    00002b7e: 	endbr64
    00002b82: 	jmp	.Ltmp3242 # Offset: 11138
.Ltmp3241:
    00002b84: 	movq	0xc0(%rsp), %rdi
    00002b8c: 	cmpq	%rbx, %rdi
    00002b8f: 	je	.Ltmp3243 # Offset: 11151
    00002b95: 	movq	0xd0(%rsp), %rax
    00002b9d: 	leaq	0x1(%rax), %rsi
    00002ba1: 	callq	_ZdlPvm@PLT # Offset: 11169
    00002ba6: 	jmp	.Ltmp3243 # Offset: 11174
    00002bab: 	endbr64
    00002baf: 	jmp	.Ltmp3238 # Offset: 11183
    00002bb4: 	endbr64
    00002bb8: 	jmp	.Ltmp3238 # Offset: 11192
    00002bbd: 	endbr64
    00002bc1: 	jmp	.Ltmp3238 # Offset: 11201
    00002bc6: 	endbr64
    00002bca: 	jmp	.Ltmp3238 # Offset: 11210
    00002bcf: 	endbr64
    00002bd3: 	jmp	.Ltmp3238 # Offset: 11219
    00002bd8: 	endbr64
    00002bdc: 	jmp	.Ltmp3238 # Offset: 11228
    00002be1: 	endbr64
    00002be5: 	jmp	.Ltmp3238 # Offset: 11237
    00002bea: 	endbr64
    00002bee: 	jmp	.Ltmp3238 # Offset: 11246
    00002bf3: 	endbr64
    00002bf7: 	jmp	.Ltmp3238 # Offset: 11255
    00002bfc: 	endbr64
    00002c00: 	jmp	.Ltmp3238 # Offset: 11264
    00002c05: 	endbr64
.Ltmp3245:
    00002c09: 	movq	%rax, %rbp
    00002c0c: 	jmp	.Ltmp3244 # Offset: 11276
    00002c0e: 	endbr64
    00002c12: 	jmp	.Ltmp3245 # Offset: 11282
    00002c14: 	endbr64
    00002c18: 	jmp	.Ltmp3245 # Offset: 11288
    00002c1a: 	endbr64
    00002c1e: 	jmp	.Ltmp3245 # Offset: 11294
.Ltmp3244:
    00002c20: 	movq	0xc0(%rsp), %rdi
    00002c28: 	cmpq	%rbx, %rdi
    00002c2b: 	je	.Ltmp3246 # Offset: 11307
    00002c2d: 	movq	0xd0(%rsp), %rax
    00002c35: 	leaq	0x1(%rax), %rsi
    00002c39: 	callq	_ZdlPvm@PLT # Offset: 11321
.Ltmp3246:
    00002c3e: 	movq	0xa0(%rsp), %rdi
    00002c46: 	leaq	0xb0(%rsp), %rax
    00002c4e: 	cmpq	%rax, %rdi
    00002c51: 	je	.Ltmp3243 # Offset: 11345
    00002c53: 	movq	0xb0(%rsp), %rax
    00002c5b: 	leaq	0x1(%rax), %rsi
    00002c5f: 	callq	_ZdlPvm@PLT # Offset: 11359
.Ltmp3243:
    00002c64: 	movq	0x80(%rsp), %rdi
    00002c6c: 	leaq	0x90(%rsp), %rax
    00002c74: 	cmpq	%rax, %rdi
    00002c77: 	je	.Ltmp3239 # Offset: 11383
    00002c7d: 	movq	0x90(%rsp), %rax
    00002c85: 	leaq	0x1(%rax), %rsi
    00002c89: 	callq	_ZdlPvm@PLT # Offset: 11401
    00002c8e: 	jmp	.Ltmp3239 # Offset: 11406
    00002c93: 	endbr64
    00002c97: 	jmp	.Ltmp3245 # Offset: 11415
    00002c9c: 	endbr64
    00002ca0: 	jmp	.Ltmp3245 # Offset: 11424
    00002ca5: 	endbr64
    00002ca9: 	jmp	.Ltmp3245 # Offset: 11433
    00002cae: 	endbr64
    00002cb2: 	jmp	.Ltmp3245 # Offset: 11442
    00002cb7: 	endbr64
    00002cbb: 	jmp	.Ltmp3242 # Offset: 11451
    00002cc0: 	endbr64
    00002cc4: 	jmp	.Ltmp3242 # Offset: 11460
    00002cc9: 	endbr64
    00002ccd: 	jmp	.Ltmp3242 # Offset: 11469
    00002cd2: 	endbr64
    00002cd6: 	jmp	.Ltmp3242 # Offset: 11478
    00002cdb: 	endbr64
    00002cdf: 	jmp	.Ltmp3242 # Offset: 11487
    00002ce4: 	endbr64
    00002ce8: 	jmp	.Ltmp3242 # Offset: 11496
    00002ced: 	endbr64
    00002cf1: 	jmp	.Ltmp3242 # Offset: 11505
    00002cf6: 	endbr64
    00002cfa: 	jmp	.Ltmp3242 # Offset: 11514
    00002cff: 	endbr64
    00002d03: 	movq	%rax, %rbp
    00002d06: 	jmp	.Ltmp3247 # Offset: 11526
    00002d08: 	endbr64
    00002d0c: 	movq	%rax, %rbp
    00002d0f: 	jmp	.Ltmp3239 # Offset: 11535
.Ltmp3247:
    00002d14: 	movq	0xc0(%rsp), %rdi
    00002d1c: 	leaq	0xd0(%rsp), %rax
    00002d24: 	cmpq	%rax, %rdi
    00002d27: 	jne	.Ltmp3248 # Offset: 11559
    00002d2d: 	jmp	.Ltmp3239 # Offset: 11565
    00002d32: 	endbr64
    00002d36: 	jmp	.Ltmp3245 # Offset: 11574
    00002d3b: 	endbr64
    00002d3f: 	jmp	.Ltmp3238 # Offset: 11583
    00002d44: 	endbr64
    00002d48: 	jmp	.Ltmp3245 # Offset: 11592
    00002d4d: 	endbr64
    00002d51: 	jmp	.Ltmp3245 # Offset: 11601
    00002d56: 	endbr64
    00002d5a: 	jmp	.Ltmp3245 # Offset: 11610
    00002d5f: 	endbr64
    00002d63: 	jmp	.Ltmp3245 # Offset: 11619
    00002d68: 	endbr64
    00002d6c: 	jmp	.Ltmp3242 # Offset: 11628
    00002d71: 	endbr64
    00002d75: 	jmp	.Ltmp3242 # Offset: 11637
    00002d7a: 	endbr64
    00002d7e: 	movq	%rax, %rbp
    00002d81: 	jmp	.Ltmp3246 # Offset: 11649
    00002d86: 	endbr64
    00002d8a: 	jmp	.Ltmp3245 # Offset: 11658
    00002d8f: 	endbr64
    00002d93: 	jmp	.Ltmp3242 # Offset: 11667
    00002d98: 	endbr64
    00002d9c: 	jmp	.Ltmp3242 # Offset: 11676
    00002da1: 	endbr64
    00002da5: 	jmp	.Ltmp3245 # Offset: 11685
    00002daa: 	endbr64
    00002dae: 	jmp	.Ltmp3245 # Offset: 11694
    00002db3: 	endbr64
    00002db7: 	jmp	.Ltmp3238 # Offset: 11703
    00002dbc: 	endbr64
    00002dc0: 	jmp	.Ltmp3238 # Offset: 11712
    00002dc5: 	endbr64
    00002dc9: 	jmp	.Ltmp3238 # Offset: 11721
    00002dce: 	endbr64
    00002dd2: 	jmp	.Ltmp3238 # Offset: 11730
    00002dd7: 	endbr64
    00002ddb: 	jmp	.Ltmp3238 # Offset: 11739
    00002de0: 	endbr64
    00002de4: 	jmp	.Ltmp3238 # Offset: 11748
    00002de9: 	endbr64
    00002ded: 	jmp	.Ltmp3238 # Offset: 11757
    00002df2: 	endbr64
    00002df6: 	jmp	.Ltmp3238 # Offset: 11766
    00002dfb: 	endbr64
    00002dff: 	jmp	.Ltmp3238 # Offset: 11775
    00002e04: 	endbr64
    00002e08: 	jmp	.Ltmp3238 # Offset: 11784
    00002e0d: 	endbr64
    00002e11: 	jmp	.Ltmp3238 # Offset: 11793
    00002e16: 	endbr64
    00002e1a: 	jmp	.Ltmp3238 # Offset: 11802
    00002e1f: 	endbr64
    00002e23: 	jmp	.Ltmp3238 # Offset: 11811
    00002e28: 	endbr64
    00002e2c: 	jmp	.Ltmp3238 # Offset: 11820
    00002e31: 	endbr64
    00002e35: 	jmp	.Ltmp3238 # Offset: 11829
    00002e3a: 	endbr64
    00002e3e: 	jmp	.Ltmp3238 # Offset: 11838
    00002e43: 	endbr64
    00002e47: 	movq	%rax, %rbp
    00002e4a: 	jmp	.Ltmp3243 # Offset: 11850
    00002e4f: 	endbr64
    00002e53: 	jmp	.Ltmp3242 # Offset: 11859
    00002e58: 	endbr64
    00002e5c: 	jmp	.Ltmp3238 # Offset: 11868
    00002e61: 	endbr64
    00002e65: 	jmp	.Ltmp3238 # Offset: 11877
    00002e6a: 	endbr64
    00002e6e: 	jmp	.Ltmp3242 # Offset: 11886
    00002e73: 	endbr64
    00002e77: 	jmp	.Ltmp3242 # Offset: 11895
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIdEvv"

Binary Function "_Z15convolution2D_1IilEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 277
  State       : disassembled
  Address     : 0x26360
  Size        : 0x749
  MaxSize     : 0x750
  Offset      : 0x26360
  Section     : .text
  Orc Section : .local.text._Z15convolution2D_1IilEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0276:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%ecx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%edx, %ebx
    00000016: 	subq	$0x78, %rsp
    0000001a: 	movq	%rsi, 0x50(%rsp)
    0000001f: 	movl	%edx, 0x44(%rsp)
    00000023: 	movl	%r8d, 0x28(%rsp)
    00000028: 	movq	%r9, 0x58(%rsp)
    0000002d: 	movq	%fs:0x28, %rax
    00000036: 	movq	%rax, 0x68(%rsp)
    0000003b: 	xorl	%eax, %eax
    0000003d: 	callq	clock@PLT # Offset: 61
    00000042: 	movl	iterations(%rip), %ecx
    00000048: 	movq	%rax, start_time(%rip)
    0000004f: 	testl	%ecx, %ecx
    00000051: 	jle	.Ltmp3249 # Offset: 81
    00000057: 	testl	%ebx, %ebx
    00000059: 	jle	.Ltmp3250 # Offset: 89
    0000005f: 	testl	%r15d, %r15d
    00000062: 	jle	.Ltmp3251 # Offset: 98
    00000068: 	movl	0x44(%rsp), %eax
    0000006c: 	movl	$0x0, 0x4c(%rsp)
    00000074: 	leal	-0x1(%r15), %r13d
    00000078: 	movl	%r15d, %r12d
    0000007b: 	subl	$0x1, %eax
    0000007e: 	movl	%eax, 0x48(%rsp)
    00000082: 	movslq	0x28(%rsp), %rax
    00000087: 	shlq	$0x2, %rax
    0000008b: 	movq	%rax, 0x38(%rsp)
.Ltmp3287:
    00000090: 	movl	0x48(%rsp), %edx
    00000094: 	testl	%edx, %edx
    00000096: 	jne	.Ltmp3252 # Offset: 150
    0000009c: 	xorl	%ebp, %ebp
.Ltmp3286:
    0000009e: 	movl	0x28(%rsp), %ebx
    000000a2: 	leal	-0x1(%rbp), %eax
    000000a5: 	movq	0x50(%rsp), %rdi
    000000aa: 	imull	%ebx, %eax
    000000ad: 	imull	%ebp, %ebx
    000000b0: 	movl	%eax, 0x20(%rsp)
    000000b4: 	movl	%ebx, 0x14(%rsp)
    000000b8: 	movslq	%ebx, %rax
    000000bb: 	movl	%ebx, 0x2c(%rsp)
    000000bf: 	leaq	(,%rax,4), %rdx
    000000c7: 	leaq	(%rdi,%rdx), %r11
    000000cb: 	leaq	(%r14,%rdx), %r15
    000000cf: 	nop # Size: 1
.Ltmp3269:
    000000d0: 	movslq	0x20(%rsp), %rdx
    000000d5: 	leaq	(%r14,%rax,4), %rax
    000000d9: 	movl	0x14(%rsp), %ebx
    000000dd: 	movq	%rax, 0x8(%rsp)
    000000e2: 	movl	0x2c(%rsp), %eax
    000000e6: 	leaq	(%r14,%rdx,4), %rdi
    000000ea: 	subl	$0x1, %ebx
    000000ed: 	movq	%rdi, 0x18(%rsp)
    000000f2: 	leal	0x1(%rax), %esi
    000000f5: 	leal	0x1(%rdx), %edi
    000000f8: 	xorl	%eax, %eax
    000000fa: 	jmp	.Ltmp3253 # Offset: 250
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp3261:
    00000100: 	movslq	%esi, %rdx
    00000103: 	movslq	(%r14,%rdx,4), %rdx
    00000107: 	leaq	(%rdx,%rdx,4), %rdx
    0000010b: 	addq	%r10, %rdx
.Ltmp3262:
    0000010e: 	leaq	(%rdx,%r8), %r10
    00000112: 	testq	%rax, %rax
    00000115: 	je	.Ltmp3254 # Offset: 277
    00000117: 	leal	-0x2(%rsi), %r10d
    0000011b: 	movslq	%r10d, %r10
    0000011e: 	movslq	(%r14,%r10,4), %r10
    00000122: 	addq	%rdx, %r10
.Ltmp3254:
    00000125: 	leaq	(%r8,%r8,4), %rdx
    00000129: 	addq	%rdx, %r10
    0000012c: 	cmpl	%r9d, %r13d
    0000012f: 	jle	.Ltmp3255 # Offset: 303
    00000135: 	movslq	%esi, %rdx
    00000138: 	movslq	(%r14,%rdx,4), %rdx
    0000013c: 	addq	%r10, %rdx
    0000013f: 	leaq	0x2f(%rdx), %r8
    00000143: 	addq	$0x10, %rdx
    00000147: 	cmovsq	%r8, %rdx
.Ltmp3266:
    0000014b: 	sarq	$0x5, %rdx
    0000014f: 	addl	$0x1, %esi
    00000152: 	addl	$0x1, %edi
    00000155: 	movl	%edx, (%r11,%rax,4)
    00000159: 	addq	$0x1, %rax
    0000015d: 	cmpl	%ecx, %r12d
    00000160: 	jle	.Ltmp3256 # Offset: 352
.Ltmp3253:
    00000166: 	movl	%eax, %r9d
    00000169: 	testl	%ebp, %ebp
    0000016b: 	je	.Ltmp3257 # Offset: 363
    00000171: 	testq	%rax, %rax
    00000174: 	je	.Ltmp3258 # Offset: 372
    0000017a: 	leal	-0x2(%rdi), %edx
    0000017d: 	movslq	%edx, %rdx
    00000180: 	movslq	(%r14,%rdx,4), %rcx
.Ltmp3265:
    00000184: 	leal	-0x1(%rdi), %edx
    00000187: 	movslq	%edx, %rdx
    0000018a: 	movslq	(%r14,%rdx,4), %rdx
    0000018e: 	leaq	(%rdx,%rdx,4), %r8
    00000192: 	addq	%rcx, %r8
    00000195: 	leal	0x1(%rax), %ecx
    00000198: 	addq	%r8, %rdx
    0000019b: 	cmpl	%r9d, %r13d
    0000019e: 	jle	.Ltmp3259 # Offset: 414
    000001a0: 	movslq	%edi, %rdx
    000001a3: 	movslq	(%r14,%rdx,4), %rdx
    000001a7: 	addq	%r8, %rdx
.Ltmp3259:
    000001aa: 	movl	%eax, %r9d
    000001ad: 	testq	%rax, %rax
    000001b0: 	je	.Ltmp3260 # Offset: 432
    000001b2: 	leal	(%rbx,%rax), %r8d
    000001b6: 	movslq	%r8d, %r8
    000001b9: 	movslq	(%r14,%r8,4), %r8
    000001bd: 	leaq	(%r8,%r8,4), %r8
    000001c1: 	addq	%r8, %rdx
.Ltmp3263:
    000001c4: 	movslq	(%r15,%rax,4), %r8
    000001c8: 	leaq	(%rdx,%r8,8), %r10
    000001cc: 	cmpl	%r9d, %r13d
    000001cf: 	jg	.Ltmp3261 # Offset: 463
    000001d5: 	leaq	(%r8,%r8,4), %rdx
    000001d9: 	addq	%r10, %rdx
    000001dc: 	jmp	.Ltmp3262 # Offset: 476
    000001e1: 	nopl	(%rax) # Size: 7
.Ltmp3260:
    000001e8: 	movq	0x8(%rsp), %r10
    000001ed: 	movslq	(%r10), %r8
    000001f0: 	leaq	(%r8,%r8,4), %r8
    000001f4: 	addq	%r8, %rdx
    000001f7: 	jmp	.Ltmp3263 # Offset: 503
    000001f9: 	nopl	(%rax) # Size: 7
.Ltmp3257:
    00000200: 	testq	%rax, %rax
    00000203: 	je	.Ltmp3264 # Offset: 515
    00000205: 	movslq	-0x4(%r14,%rax,4), %rcx
.Ltmp3267:
    0000020a: 	movslq	(%r14,%rax,4), %rdx
    0000020e: 	leaq	(%rdx,%rdx,4), %r8
    00000212: 	addq	%rcx, %r8
    00000215: 	leal	0x1(%rax), %ecx
    00000218: 	addq	%r8, %rdx
    0000021b: 	cmpl	%r9d, %r13d
    0000021e: 	jle	.Ltmp3259 # Offset: 542
    00000220: 	movslq	0x4(%r14,%rax,4), %rdx
    00000225: 	addq	%r8, %rdx
    00000228: 	jmp	.Ltmp3259 # Offset: 552
    0000022a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3258:
    00000230: 	movq	0x18(%rsp), %rcx
    00000235: 	movslq	(%rcx), %rcx
    00000238: 	jmp	.Ltmp3265 # Offset: 568
    0000023d: 	nopl	(%rax) # Size: 3
.Ltmp3255:
    00000240: 	addq	%r8, %r10
    00000243: 	leaq	0x2f(%r10), %rdx
    00000247: 	addq	$0x10, %r10
    0000024b: 	cmovnsq	%r10, %rdx
    0000024f: 	jmp	.Ltmp3266 # Offset: 591
    00000254: 	nopl	(%rax) # Size: 4
.Ltmp3264:
    00000258: 	movslq	(%r14), %rcx
    0000025b: 	jmp	.Ltmp3267 # Offset: 603
    0000025d: 	nopl	(%rax) # Size: 3
.Ltmp3256:
    00000260: 	movq	0x38(%rsp), %rcx
    00000265: 	movl	0x28(%rsp), %eax
    00000269: 	addl	$0x1, %ebp
    0000026c: 	addl	%eax, 0x14(%rsp)
    00000270: 	movl	0x14(%rsp), %ebx
    00000274: 	addl	%eax, 0x20(%rsp)
    00000278: 	addq	%rcx, %r11
    0000027b: 	addq	%rcx, %r15
    0000027e: 	addl	%eax, 0x2c(%rsp)
    00000282: 	cmpl	0x44(%rsp), %ebp
    00000286: 	jge	.Ltmp3268 # Offset: 646
    0000028c: 	movslq	%ebx, %rax
    0000028f: 	jmp	.Ltmp3269 # Offset: 655
    00000294: 	nopl	(%rax) # Size: 4
.Ltmp3252:
    00000298: 	movl	0x28(%rsp), %edi
    0000029c: 	movq	0x50(%rsp), %rbx
    000002a1: 	movq	%r14, %r15
    000002a4: 	xorl	%ebp, %ebp
    000002a6: 	movl	%edi, %eax
    000002a8: 	movl	%edi, 0x40(%rsp)
    000002ac: 	negl	%eax
    000002ae: 	movl	%eax, 0x2c(%rsp)
    000002b2: 	cltq
    000002b4: 	movq	%rax, 0x30(%rsp)
    000002b9: 	nopl	(%rax) # Size: 7
.Ltmp3285:
    000002c0: 	movq	0x30(%rsp), %rax
    000002c5: 	movl	0x2c(%rsp), %esi
    000002c9: 	leaq	(%r14,%rax,4), %rax
    000002cd: 	movl	%esi, %ecx
    000002cf: 	movq	%rax, 0x20(%rsp)
    000002d4: 	movl	0x28(%rsp), %eax
    000002d8: 	addl	$0x1, %ecx
    000002db: 	addl	%eax, %esi
    000002dd: 	movslq	%esi, %rax
    000002e0: 	leal	-0x1(%rsi), %edx
    000002e3: 	movl	%esi, 0x2c(%rsp)
    000002e7: 	addl	$0x1, %esi
    000002ea: 	movq	%rax, 0x30(%rsp)
    000002ef: 	leaq	(%r14,%rax,4), %rax
    000002f3: 	movq	%rax, 0x18(%rsp)
    000002f8: 	movslq	0x40(%rsp), %rax
    000002fd: 	movl	%edx, 0x8(%rsp)
    00000301: 	movq	%rax, %rdi
    00000304: 	leaq	(%r14,%rax,4), %r11
    00000308: 	movl	%esi, 0x14(%rsp)
    0000030c: 	xorl	%eax, %eax
    0000030e: 	addl	$0x1, %edi
    00000311: 	jmp	.Ltmp3270 # Offset: 785
    00000313: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3278:
    00000318: 	movl	0x14(%rsp), %edx
    0000031c: 	addl	%eax, %edx
    0000031e: 	movslq	%edx, %rdx
    00000321: 	movslq	(%r14,%rdx,4), %rdx
    00000325: 	leaq	(%rdx,%rdx,4), %rdx
    00000329: 	addq	%r10, %rdx
    0000032c: 	testq	%rax, %rax
    0000032f: 	je	.Ltmp3271 # Offset: 815
.Ltmp3279:
    00000335: 	leal	-0x2(%rdi), %r9d
    00000339: 	movslq	%r9d, %r9
    0000033c: 	movslq	(%r14,%r9,4), %r9
    00000340: 	addq	%r9, %rdx
.Ltmp3280:
    00000343: 	movslq	(%r11,%rax,4), %r9
    00000347: 	leaq	(%r9,%r9,4), %r10
    0000034b: 	addq	%rdx, %r10
    0000034e: 	leaq	(%r9,%r10), %rdx
    00000352: 	cmpl	%r8d, %r13d
    00000355: 	jle	.Ltmp3272 # Offset: 853
    00000357: 	movslq	%edi, %rdx
    0000035a: 	movslq	(%r14,%rdx,4), %rdx
    0000035e: 	addq	%r10, %rdx
.Ltmp3272:
    00000361: 	leaq	0x2f(%rdx), %r8
    00000365: 	addq	$0x10, %rdx
    00000369: 	cmovsq	%r8, %rdx
    0000036d: 	addl	$0x1, %edi
    00000370: 	addl	$0x1, %ecx
    00000373: 	sarq	$0x5, %rdx
    00000377: 	movl	%edx, (%rbx,%rax,4)
    0000037a: 	addq	$0x1, %rax
    0000037e: 	cmpl	%esi, %r12d
    00000381: 	jle	.Ltmp3273 # Offset: 897
.Ltmp3270:
    00000387: 	movl	%eax, %r9d
    0000038a: 	testl	%ebp, %ebp
    0000038c: 	je	.Ltmp3274 # Offset: 908
    00000392: 	testq	%rax, %rax
    00000395: 	je	.Ltmp3275 # Offset: 917
    0000039b: 	leal	-0x2(%rcx), %edx
    0000039e: 	movslq	%edx, %rdx
    000003a1: 	movslq	(%r14,%rdx,4), %rsi
.Ltmp3283:
    000003a5: 	leal	-0x1(%rcx), %edx
    000003a8: 	movslq	%edx, %rdx
    000003ab: 	movslq	(%r14,%rdx,4), %rdx
    000003af: 	leaq	(%rdx,%rdx,4), %r8
    000003b3: 	addq	%rsi, %r8
    000003b6: 	leal	0x1(%rax), %esi
    000003b9: 	addq	%r8, %rdx
    000003bc: 	cmpl	%r9d, %r13d
    000003bf: 	jle	.Ltmp3276 # Offset: 959
    000003c1: 	movslq	%ecx, %rdx
    000003c4: 	movslq	(%r14,%rdx,4), %rdx
    000003c8: 	addq	%r8, %rdx
.Ltmp3276:
    000003cb: 	movl	%eax, %r8d
    000003ce: 	testq	%rax, %rax
    000003d1: 	je	.Ltmp3277 # Offset: 977
    000003d3: 	movl	0x8(%rsp), %r10d
    000003d8: 	leal	(%r10,%rax), %r9d
    000003dc: 	movslq	%r9d, %r9
    000003df: 	movslq	(%r14,%r9,4), %r9
    000003e3: 	leaq	(%r9,%r9,4), %r9
    000003e7: 	addq	%r9, %rdx
.Ltmp3281:
    000003ea: 	movslq	(%r15,%rax,4), %r9
    000003ee: 	leaq	(%rdx,%r9,8), %r10
    000003f2: 	cmpl	%r8d, %r13d
    000003f5: 	jg	.Ltmp3278 # Offset: 1013
    000003fb: 	leaq	(%r9,%r9,4), %rdx
    000003ff: 	addq	%r10, %rdx
    00000402: 	testq	%rax, %rax
    00000405: 	jne	.Ltmp3279 # Offset: 1029
.Ltmp3271:
    0000040b: 	movslq	(%r11), %r9
    0000040e: 	addq	%r9, %rdx
    00000411: 	jmp	.Ltmp3280 # Offset: 1041
    00000416: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3277:
    00000420: 	movq	0x18(%rsp), %r10
    00000425: 	movslq	(%r10), %r9
    00000428: 	leaq	(%r9,%r9,4), %r9
    0000042c: 	addq	%r9, %rdx
    0000042f: 	jmp	.Ltmp3281 # Offset: 1071
    00000431: 	nopl	(%rax) # Size: 7
.Ltmp3274:
    00000438: 	testq	%rax, %rax
    0000043b: 	je	.Ltmp3282 # Offset: 1083
    0000043d: 	movslq	-0x4(%r14,%rax,4), %rsi
.Ltmp3284:
    00000442: 	movslq	(%r14,%rax,4), %rdx
    00000446: 	leaq	(%rdx,%rdx,4), %r8
    0000044a: 	addq	%rsi, %r8
    0000044d: 	leal	0x1(%rax), %esi
    00000450: 	addq	%r8, %rdx
    00000453: 	cmpl	%r9d, %r13d
    00000456: 	jle	.Ltmp3276 # Offset: 1110
    0000045c: 	movslq	0x4(%r14,%rax,4), %rdx
    00000461: 	addq	%r8, %rdx
    00000464: 	jmp	.Ltmp3276 # Offset: 1124
    00000469: 	nopl	(%rax) # Size: 7
.Ltmp3275:
    00000470: 	movq	0x20(%rsp), %rsi
    00000475: 	movslq	(%rsi), %rsi
    00000478: 	jmp	.Ltmp3283 # Offset: 1144
    0000047d: 	nopl	(%rax) # Size: 3
.Ltmp3282:
    00000480: 	movslq	(%r14), %rsi
    00000483: 	jmp	.Ltmp3284 # Offset: 1155
    00000485: 	nopl	(%rax) # Size: 3
.Ltmp3273:
    00000488: 	movq	0x38(%rsp), %rax
    0000048d: 	movl	0x28(%rsp), %edi
    00000491: 	addl	$0x1, %ebp
    00000494: 	addl	%edi, 0x40(%rsp)
    00000498: 	addq	%rax, %rbx
    0000049b: 	addq	%rax, %r15
    0000049e: 	cmpl	0x48(%rsp), %ebp
    000004a2: 	jl	.Ltmp3285 # Offset: 1186
    000004a8: 	cmpl	%ebp, 0x44(%rsp)
    000004ac: 	jg	.Ltmp3286 # Offset: 1196
    000004b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3268:
    000004b8: 	addl	$0x1, 0x4c(%rsp)
    000004bd: 	movl	0x4c(%rsp), %eax
    000004c1: 	cmpl	iterations(%rip), %eax
    000004c7: 	jl	.Ltmp3287 # Offset: 1223
    000004cd: 	movl	%r12d, %r15d
.Ltmp3305:
    000004d0: 	movl	%r15d, %eax
    000004d3: 	movl	%r15d, %edi
    000004d6: 	movq	0x50(%rsp), %r9
    000004db: 	movl	0x44(%rsp), %r10d
    000004e0: 	shrl	$0x2, %eax
    000004e3: 	movl	0x28(%rsp), %r11d
    000004e8: 	andl	$-0x4, %edi
    000004eb: 	xorl	%ecx, %ecx
    000004ed: 	leal	-0x1(%rax), %r8d
    000004f1: 	xorl	%edx, %edx
    000004f3: 	xorl	%esi, %esi
    000004f5: 	addq	$0x1, %r8
    000004f9: 	shlq	$0x4, %r8
    000004fd: 	nopl	(%rax) # Size: 3
.Ltmp3291:
    00000500: 	testl	%r15d, %r15d
    00000503: 	jle	.Ltmp3288 # Offset: 1283
    00000505: 	cmpl	$0x2, %r13d
    00000509: 	jbe	.Ltmp3289 # Offset: 1289
    0000050f: 	movslq	%ecx, %rax
    00000512: 	pxor	%xmm0, %xmm0
    00000516: 	leaq	(%r9,%rax,4), %rax
    0000051a: 	leaq	(%r8,%rax), %rbx
    0000051e: 	nop # Size: 2
.Ltmp3290:
    00000520: 	movdqu	(%rax), %xmm2
    00000524: 	addq	$0x10, %rax
    00000528: 	paddd	%xmm2, %xmm0
    0000052c: 	cmpq	%rbx, %rax
    0000052f: 	jne	.Ltmp3290 # Offset: 1327
    00000531: 	movdqa	%xmm0, %xmm1
    00000535: 	psrldq	$0x8, %xmm1
    0000053a: 	paddd	%xmm1, %xmm0
    0000053e: 	movdqa	%xmm0, %xmm1
    00000542: 	psrldq	$0x4, %xmm1
    00000547: 	paddd	%xmm1, %xmm0
    0000054b: 	movd	%xmm0, %eax
    0000054f: 	addl	%eax, %edx
    00000551: 	movl	%edi, %eax
    00000553: 	cmpl	%edi, %r15d
    00000556: 	je	.Ltmp3288 # Offset: 1366
.Ltmp3300:
    00000558: 	leal	(%rax,%rcx), %ebx
    0000055b: 	movslq	%ebx, %rbx
    0000055e: 	addl	(%r9,%rbx,4), %edx
    00000562: 	leal	0x1(%rax), %ebx
    00000565: 	cmpl	%ebx, %r15d
    00000568: 	jle	.Ltmp3288 # Offset: 1384
    0000056a: 	addl	%ecx, %ebx
    0000056c: 	addl	$0x2, %eax
    0000056f: 	movslq	%ebx, %rbx
    00000572: 	addl	(%r9,%rbx,4), %edx
    00000576: 	cmpl	%eax, %r15d
    00000579: 	jle	.Ltmp3288 # Offset: 1401
    0000057b: 	addl	%ecx, %eax
    0000057d: 	cltq
    0000057f: 	addl	(%r9,%rax,4), %edx
.Ltmp3288:
    00000583: 	addl	$0x1, %esi
    00000586: 	addl	%r11d, %ecx
    00000589: 	cmpl	%esi, %r10d
    0000058c: 	jne	.Ltmp3291 # Offset: 1420
.Ltmp3306:
    00000592: 	movl	0x44(%rsp), %eax
    00000596: 	cvttsd2si	init_value(%rip), %ecx
    0000059e: 	imull	%r15d, %eax
    000005a2: 	imull	%ecx, %eax
    000005a5: 	cmpl	%edx, %eax
    000005a7: 	je	.Ltmp3292 # Offset: 1447
    000005a9: 	movq	0x58(%rsp), %rax
    000005ae: 	leaq	DATAat0x381c8(%rip), %rsi
    000005b5: 	movl	$0x1, %edi
    000005ba: 	movq	(%rax), %rdx
    000005bd: 	xorl	%eax, %eax
    000005bf: 	callq	__printf_chk@PLT # Offset: 1471
.Ltmp3292:
    000005c4: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000005cb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000005d2: 	subq	$0x20, %rax
    000005d6: 	cmpq	%rax, %rbx
    000005d9: 	je	.Ltmp3293 # Offset: 1497
    000005df: 	movq	0x58(%rsp), %rax
    000005e4: 	leaq	0x10(%rbx), %rdi
    000005e8: 	movq	%rdi, (%rbx)
    000005eb: 	movq	(%rax), %rbp
    000005ee: 	movq	0x8(%rax), %r12
    000005f2: 	movq	%rbp, %rax
    000005f5: 	addq	%r12, %rax
    000005f8: 	je	.Ltmp3294 # Offset: 1528
    000005fa: 	testq	%rbp, %rbp
    000005fd: 	je	.Ltmp3295 # Offset: 1533
.Ltmp3294:
    00000603: 	movq	%r12, 0x60(%rsp)
    00000608: 	cmpq	$0xf, %r12
    0000060c: 	ja	.Ltmp3296 # Offset: 1548
    00000612: 	cmpq	$0x1, %r12
    00000616: 	jne	.Ltmp3297 # Offset: 1558
    0000061c: 	movzbl	(%rbp), %eax
    00000620: 	movb	%al, 0x10(%rbx)
.Ltmp3301:
    00000623: 	movq	%r12, 0x8(%rbx)
    00000627: 	movb	$0x0, (%rdi,%r12)
    0000062c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000633: 	addq	$0x20, %rax
    00000637: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp3303:
    0000063e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000645: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000064c: 	je	.Ltmp3298 # Offset: 1612
.Ltmp3302:
    00000652: 	movq	-0x20(%rax), %rbp
    00000656: 	callq	clock@PLT # Offset: 1622
    0000065b: 	movq	%rax, end_time(%rip)
    00000662: 	movq	0x68(%rsp), %rdx
    00000667: 	subq	%fs:0x28, %rdx
    00000670: 	jne	.Ltmp3299 # Offset: 1648
    00000676: 	subq	start_time(%rip), %rax
    0000067d: 	pxor	%xmm0, %xmm0
    00000681: 	movq	%rbp, %rdi
    00000684: 	cvtsi2sd	%rax, %xmm0
    00000689: 	divsd	DATAat0x38a48(%rip), %xmm0
    00000691: 	addq	$0x78, %rsp
    00000695: 	popq	%rbx
    00000696: 	popq	%rbp
    00000697: 	popq	%r12
    00000699: 	popq	%r13
    0000069b: 	popq	%r14
    0000069d: 	popq	%r15
    0000069f: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1695
.Ltmp3289:
    000006a4: 	xorl	%eax, %eax
    000006a6: 	jmp	.Ltmp3300 # Offset: 1702
.Ltmp3296:
    000006ab: 	movq	%rbx, %rdi
    000006ae: 	leaq	0x60(%rsp), %rsi
    000006b3: 	xorl	%edx, %edx
    000006b5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1717
    000006ba: 	movq	%rax, (%rbx)
    000006bd: 	movq	%rax, %rdi
    000006c0: 	movq	0x60(%rsp), %rax
    000006c5: 	movq	%rax, 0x10(%rbx)
.Ltmp3304:
    000006c9: 	movq	%r12, %rdx
    000006cc: 	movq	%rbp, %rsi
    000006cf: 	callq	memcpy@PLT # Offset: 1743
    000006d4: 	movq	0x60(%rsp), %r12
    000006d9: 	movq	(%rbx), %rdi
    000006dc: 	jmp	.Ltmp3301 # Offset: 1756
.Ltmp3298:
    000006e1: 	movq	-0x8(%rdx), %rax
    000006e5: 	addq	$0x200, %rax
    000006eb: 	jmp	.Ltmp3302 # Offset: 1771
.Ltmp3293:
    000006f0: 	movq	0x58(%rsp), %rsi
    000006f5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000006fc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1788
    00000701: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000708: 	jmp	.Ltmp3303 # Offset: 1800
.Ltmp3297:
    0000070d: 	testq	%r12, %r12
    00000710: 	je	.Ltmp3301 # Offset: 1808
    00000716: 	jmp	.Ltmp3304 # Offset: 1814
    00000718: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3249:
    00000720: 	movl	0x44(%rsp), %eax
    00000724: 	testl	%eax, %eax
    00000726: 	jle	.Ltmp3250 # Offset: 1830
.Ltmp3251:
    00000728: 	leal	-0x1(%r15), %r13d
    0000072c: 	jmp	.Ltmp3305 # Offset: 1836
.Ltmp3250:
    00000731: 	xorl	%edx, %edx
    00000733: 	jmp	.Ltmp3306 # Offset: 1843
.Ltmp3295:
    00000738: 	leaq	DATAat0x38158(%rip), %rdi
    0000073f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1855
.Ltmp3299:
    00000744: 	callq	__stack_chk_fail@PLT # Offset: 1860
DWARF CFI Instructions:
    <empty>
End of Function "_Z15convolution2D_1IilEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15convolution2D_1IddEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 278
  State       : disassembled
  Address     : 0x26ab0
  Size        : 0x825
  MaxSize     : 0x830
  Offset      : 0x26ab0
  Section     : .text
  Orc Section : .local.text._Z15convolution2D_1IddEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0277:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%ecx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%edx, %ebx
    00000016: 	subq	$0x68, %rsp
    0000001a: 	movq	%rsi, 0x38(%rsp)
    0000001f: 	movl	%edx, 0x30(%rsp)
    00000023: 	movl	%r8d, 0xc(%rsp)
    00000028: 	movq	%r9, 0x48(%rsp)
    0000002d: 	movq	%fs:0x28, %rax
    00000036: 	movq	%rax, 0x58(%rsp)
    0000003b: 	xorl	%eax, %eax
    0000003d: 	callq	clock@PLT # Offset: 61
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	movl	iterations(%rip), %eax
    0000004f: 	movl	%eax, 0x44(%rsp)
    00000053: 	testl	%eax, %eax
    00000055: 	jle	.Ltmp3307 # Offset: 85
    0000005b: 	testl	%ebx, %ebx
    0000005d: 	jle	.Ltmp3308 # Offset: 93
    00000063: 	pxor	%xmm2, %xmm2
    00000067: 	testl	%r15d, %r15d
    0000006a: 	jle	.Ltmp3309 # Offset: 106
    00000070: 	movl	0x30(%rsp), %eax
    00000074: 	movl	$0x0, 0x40(%rsp)
    0000007c: 	pxor	%xmm2, %xmm2
    00000080: 	leal	-0x1(%r15), %r14d
    00000084: 	movsd	DATAat0x38910(%rip), %xmm1
    0000008c: 	movsd	DATAat0x389b0(%rip), %xmm3
    00000094: 	subl	$0x1, %eax
    00000097: 	movsd	DATAat0x389a0(%rip), %xmm4
    0000009f: 	movl	%eax, 0x34(%rsp)
    000000a3: 	movslq	0xc(%rsp), %rax
    000000a8: 	shlq	$0x3, %rax
    000000ac: 	movq	%rax, 0x28(%rsp)
    000000b1: 	nopl	(%rax) # Size: 7
.Ltmp3351:
    000000b8: 	movl	0x34(%rsp), %eax
    000000bc: 	testl	%eax, %eax
    000000be: 	jne	.Ltmp3310 # Offset: 190
    000000c4: 	xorl	%esi, %esi
.Ltmp3350:
    000000c6: 	movl	0xc(%rsp), %ebx
    000000ca: 	leal	-0x1(%rsi), %eax
    000000cd: 	imull	%ebx, %eax
    000000d0: 	imull	%esi, %ebx
    000000d3: 	movl	%eax, 0x10(%rsp)
    000000d7: 	movslq	%ebx, %rax
    000000da: 	movq	0x38(%rsp), %rbx
    000000df: 	movl	%eax, 0x18(%rsp)
    000000e3: 	leaq	(,%rax,8), %r10
    000000eb: 	movq	%rax, %r12
    000000ee: 	leaq	(%rbx,%r10), %r11
    000000f2: 	addq	%r13, %r10
    000000f5: 	nopl	(%rax) # Size: 3
.Ltmp3330:
    000000f8: 	movslq	0x10(%rsp), %rdx
    000000fd: 	leaq	(%r13,%rax,8), %rbp
    00000102: 	movl	0x18(%rsp), %eax
    00000106: 	movq	%rdx, %rbx
    00000109: 	leaq	(%r13,%rdx,8), %rdx
    0000010e: 	movq	%rdx, (%rsp)
    00000112: 	leal	0x1(%rbx), %ecx
    00000115: 	leal	0x1(%rax), %edx
    00000118: 	xorl	%eax, %eax
    0000011a: 	leal	-0x1(%r12), %ebx
    0000011f: 	jmp	.Ltmp3311 # Offset: 287
    00000121: 	nopl	(%rax) # Size: 7
.Ltmp3319:
    00000128: 	movslq	%edx, %r9
    0000012b: 	movsd	(%r13,%r9,8), %xmm0
    00000132: 	mulsd	%xmm1, %xmm0
    00000136: 	addsd	%xmm0, %xmm5
    0000013a: 	testq	%rax, %rax
    0000013d: 	je	.Ltmp3312 # Offset: 317
.Ltmp3320:
    00000143: 	leal	-0x2(%rdx), %r9d
    00000147: 	movslq	%r9d, %r9
    0000014a: 	addsd	(%r13,%r9,8), %xmm5
.Ltmp3321:
    00000151: 	movapd	%xmm6, %xmm0
    00000155: 	mulsd	%xmm1, %xmm0
    00000159: 	addsd	%xmm5, %xmm0
    0000015d: 	cmpl	%r8d, %r14d
    00000160: 	jle	.Ltmp3313 # Offset: 352
    00000166: 	movslq	%edx, %r8
    00000169: 	addsd	(%r13,%r8,8), %xmm0
.Ltmp3328:
    00000170: 	addsd	%xmm2, %xmm0
    00000174: 	addl	$0x1, %edx
    00000177: 	addl	$0x1, %ecx
    0000017a: 	mulsd	%xmm4, %xmm0
    0000017e: 	movsd	%xmm0, (%r11,%rax,8)
    00000184: 	addq	$0x1, %rax
    00000188: 	cmpl	%edi, %r15d
    0000018b: 	jle	.Ltmp3314 # Offset: 395
.Ltmp3311:
    00000191: 	movl	%eax, %r8d
    00000194: 	testl	%esi, %esi
    00000196: 	je	.Ltmp3315 # Offset: 406
    0000019c: 	testq	%rax, %rax
    0000019f: 	je	.Ltmp3316 # Offset: 415
    000001a5: 	leal	-0x2(%rcx), %edi
    000001a8: 	movslq	%edi, %rdi
    000001ab: 	movsd	(%r13,%rdi,8), %xmm6
    000001b2: 	addsd	%xmm2, %xmm6
.Ltmp3326:
    000001b6: 	leal	-0x1(%rcx), %edi
    000001b9: 	movslq	%edi, %rdi
    000001bc: 	movsd	(%r13,%rdi,8), %xmm5
    000001c3: 	leal	0x1(%rax), %edi
    000001c6: 	movapd	%xmm5, %xmm0
    000001ca: 	mulsd	%xmm1, %xmm0
    000001ce: 	addsd	%xmm6, %xmm0
    000001d2: 	cmpl	%r14d, %r8d
    000001d5: 	jge	.Ltmp3317 # Offset: 469
    000001d7: 	movslq	%ecx, %r8
    000001da: 	addsd	(%r13,%r8,8), %xmm0
.Ltmp3325:
    000001e1: 	movl	%eax, %r8d
    000001e4: 	testq	%rax, %rax
    000001e7: 	je	.Ltmp3318 # Offset: 487
.Ltmp3322:
    000001e9: 	leal	(%rbx,%rax), %r9d
    000001ed: 	movslq	%r9d, %r9
    000001f0: 	movsd	(%r13,%r9,8), %xmm5
    000001f7: 	mulsd	%xmm1, %xmm5
    000001fb: 	addsd	%xmm5, %xmm0
.Ltmp3323:
    000001ff: 	movsd	(%r10,%rax,8), %xmm6
    00000205: 	movapd	%xmm6, %xmm5
    00000209: 	mulsd	%xmm3, %xmm5
    0000020d: 	addsd	%xmm0, %xmm5
    00000211: 	cmpl	%r8d, %r14d
    00000214: 	jg	.Ltmp3319 # Offset: 532
    0000021a: 	movapd	%xmm6, %xmm0
    0000021e: 	mulsd	%xmm1, %xmm0
    00000222: 	addsd	%xmm0, %xmm5
    00000226: 	testq	%rax, %rax
    00000229: 	jne	.Ltmp3320 # Offset: 553
.Ltmp3312:
    0000022f: 	addsd	%xmm6, %xmm5
    00000233: 	jmp	.Ltmp3321 # Offset: 563
    00000238: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3317:
    00000240: 	addsd	%xmm5, %xmm0
    00000244: 	movl	%eax, %r8d
    00000247: 	testq	%rax, %rax
    0000024a: 	jne	.Ltmp3322 # Offset: 586
.Ltmp3318:
    0000024c: 	movsd	(%rbp), %xmm5
    00000251: 	mulsd	%xmm1, %xmm5
    00000255: 	addsd	%xmm5, %xmm0
    00000259: 	jmp	.Ltmp3323 # Offset: 601
    0000025b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3315:
    00000260: 	movapd	%xmm2, %xmm6
    00000264: 	testq	%rax, %rax
    00000267: 	je	.Ltmp3324 # Offset: 615
    00000269: 	addsd	-0x8(%r13,%rax,8), %xmm6
.Ltmp3327:
    00000270: 	movsd	(%r13,%rax,8), %xmm5
    00000277: 	leal	0x1(%rax), %edi
    0000027a: 	movapd	%xmm5, %xmm0
    0000027e: 	mulsd	%xmm1, %xmm0
    00000282: 	addsd	%xmm6, %xmm0
    00000286: 	cmpl	%r14d, %r8d
    00000289: 	jge	.Ltmp3317 # Offset: 649
    0000028b: 	addsd	0x8(%r13,%rax,8), %xmm0
    00000292: 	jmp	.Ltmp3325 # Offset: 658
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3316:
    000002a0: 	movq	(%rsp), %rdi
    000002a4: 	movsd	(%rdi), %xmm6
    000002a8: 	addsd	%xmm2, %xmm6
    000002ac: 	jmp	.Ltmp3326 # Offset: 684
    000002b1: 	nopl	(%rax) # Size: 7
.Ltmp3324:
    000002b8: 	addsd	(%r13), %xmm6
    000002be: 	jmp	.Ltmp3327 # Offset: 702
.Ltmp3313:
    000002c0: 	addsd	%xmm6, %xmm0
    000002c4: 	jmp	.Ltmp3328 # Offset: 708
    000002c9: 	nopl	(%rax) # Size: 7
.Ltmp3314:
    000002d0: 	movl	0xc(%rsp), %eax
    000002d4: 	movq	0x28(%rsp), %rbx
    000002d9: 	addl	$0x1, %esi
    000002dc: 	addl	%eax, 0x10(%rsp)
    000002e0: 	addl	%eax, 0x18(%rsp)
    000002e4: 	addl	%eax, %r12d
    000002e7: 	addq	%rbx, %r11
    000002ea: 	addq	%rbx, %r10
    000002ed: 	cmpl	%esi, 0x30(%rsp)
    000002f1: 	jle	.Ltmp3329 # Offset: 753
    000002f7: 	movslq	%r12d, %rax
    000002fa: 	jmp	.Ltmp3330 # Offset: 762
    000002ff: 	nop # Size: 1
.Ltmp3310:
    00000300: 	movl	0xc(%rsp), %esi
    00000304: 	movq	0x38(%rsp), %r12
    00000309: 	movq	%r13, %r10
    0000030c: 	movl	%esi, %eax
    0000030e: 	movl	%esi, 0x1c(%rsp)
    00000312: 	xorl	%esi, %esi
    00000314: 	negl	%eax
    00000316: 	movl	%eax, 0x18(%rsp)
    0000031a: 	cltq
    0000031c: 	movq	%rax, 0x20(%rsp)
    00000321: 	nopl	(%rax) # Size: 7
.Ltmp3349:
    00000328: 	movq	0x20(%rsp), %rax
    0000032d: 	movl	0x18(%rsp), %ebx
    00000331: 	leaq	(%r13,%rax,8), %rax
    00000336: 	movl	%ebx, %edx
    00000338: 	movq	%rax, 0x10(%rsp)
    0000033d: 	movl	0xc(%rsp), %eax
    00000341: 	addl	$0x1, %edx
    00000344: 	addl	%eax, %ebx
    00000346: 	movslq	%ebx, %rax
    00000349: 	movl	%ebx, 0x18(%rsp)
    0000034d: 	leal	-0x1(%rbx), %ebp
    00000350: 	addl	$0x1, %ebx
    00000353: 	movq	%rax, 0x20(%rsp)
    00000358: 	leaq	(%r13,%rax,8), %rax
    0000035d: 	movq	%rax, (%rsp)
    00000361: 	movslq	0x1c(%rsp), %rax
    00000366: 	movq	%rax, %rcx
    00000369: 	leaq	(%r13,%rax,8), %r11
    0000036e: 	xorl	%eax, %eax
    00000370: 	addl	$0x1, %ecx
    00000373: 	jmp	.Ltmp3331 # Offset: 883
    00000375: 	nopl	(%rax) # Size: 3
.Ltmp3339:
    00000378: 	leal	(%rbx,%rax), %r9d
    0000037c: 	movslq	%r9d, %r9
    0000037f: 	movsd	(%r13,%r9,8), %xmm0
    00000386: 	mulsd	%xmm1, %xmm0
    0000038a: 	addsd	%xmm0, %xmm5
    0000038e: 	testq	%rax, %rax
    00000391: 	je	.Ltmp3332 # Offset: 913
.Ltmp3340:
    00000397: 	leal	-0x2(%rcx), %r9d
    0000039b: 	movslq	%r9d, %r9
    0000039e: 	addsd	(%r13,%r9,8), %xmm5
.Ltmp3341:
    000003a5: 	movsd	(%r11,%rax,8), %xmm6
    000003ab: 	movapd	%xmm6, %xmm0
    000003af: 	mulsd	%xmm1, %xmm0
    000003b3: 	addsd	%xmm5, %xmm0
    000003b7: 	cmpl	%r8d, %r14d
    000003ba: 	jle	.Ltmp3333 # Offset: 954
    000003c0: 	movslq	%ecx, %r8
    000003c3: 	addsd	(%r13,%r8,8), %xmm0
.Ltmp3347:
    000003ca: 	addsd	%xmm2, %xmm0
    000003ce: 	addl	$0x1, %ecx
    000003d1: 	addl	$0x1, %edx
    000003d4: 	mulsd	%xmm4, %xmm0
    000003d8: 	movsd	%xmm0, (%r12,%rax,8)
    000003de: 	addq	$0x1, %rax
    000003e2: 	cmpl	%edi, %r15d
    000003e5: 	jle	.Ltmp3334 # Offset: 997
.Ltmp3331:
    000003eb: 	movl	%eax, %r8d
    000003ee: 	testl	%esi, %esi
    000003f0: 	je	.Ltmp3335 # Offset: 1008
    000003f6: 	testq	%rax, %rax
    000003f9: 	je	.Ltmp3336 # Offset: 1017
    000003ff: 	leal	-0x2(%rdx), %edi
    00000402: 	movslq	%edi, %rdi
    00000405: 	movsd	(%r13,%rdi,8), %xmm6
    0000040c: 	addsd	%xmm2, %xmm6
.Ltmp3346:
    00000410: 	leal	-0x1(%rdx), %edi
    00000413: 	movslq	%edi, %rdi
    00000416: 	movsd	(%r13,%rdi,8), %xmm5
    0000041d: 	leal	0x1(%rax), %edi
    00000420: 	movapd	%xmm5, %xmm0
    00000424: 	mulsd	%xmm1, %xmm0
    00000428: 	addsd	%xmm6, %xmm0
    0000042c: 	cmpl	%r8d, %r14d
    0000042f: 	jle	.Ltmp3337 # Offset: 1071
    00000431: 	movslq	%edx, %r8
    00000434: 	addsd	(%r13,%r8,8), %xmm0
.Ltmp3345:
    0000043b: 	movl	%eax, %r8d
    0000043e: 	testq	%rax, %rax
    00000441: 	je	.Ltmp3338 # Offset: 1089
.Ltmp3342:
    00000443: 	leal	(%rbp,%rax), %r9d
    00000448: 	movslq	%r9d, %r9
    0000044b: 	movsd	(%r13,%r9,8), %xmm5
    00000452: 	mulsd	%xmm1, %xmm5
    00000456: 	addsd	%xmm5, %xmm0
.Ltmp3343:
    0000045a: 	movsd	(%r10,%rax,8), %xmm6
    00000460: 	movapd	%xmm6, %xmm5
    00000464: 	mulsd	%xmm3, %xmm5
    00000468: 	addsd	%xmm0, %xmm5
    0000046c: 	cmpl	%r8d, %r14d
    0000046f: 	jg	.Ltmp3339 # Offset: 1135
    00000475: 	mulsd	%xmm1, %xmm6
    00000479: 	addsd	%xmm6, %xmm5
    0000047d: 	testq	%rax, %rax
    00000480: 	jne	.Ltmp3340 # Offset: 1152
.Ltmp3332:
    00000486: 	addsd	(%r11), %xmm5
    0000048b: 	jmp	.Ltmp3341 # Offset: 1163
.Ltmp3337:
    00000490: 	addsd	%xmm5, %xmm0
    00000494: 	movl	%eax, %r8d
    00000497: 	testq	%rax, %rax
    0000049a: 	jne	.Ltmp3342 # Offset: 1178
.Ltmp3338:
    0000049c: 	movq	(%rsp), %r9
    000004a0: 	movsd	(%r9), %xmm5
    000004a5: 	mulsd	%xmm1, %xmm5
    000004a9: 	addsd	%xmm5, %xmm0
    000004ad: 	jmp	.Ltmp3343 # Offset: 1197
    000004af: 	nop # Size: 1
.Ltmp3335:
    000004b0: 	movapd	%xmm2, %xmm6
    000004b4: 	testq	%rax, %rax
    000004b7: 	je	.Ltmp3344 # Offset: 1207
    000004b9: 	addsd	-0x8(%r13,%rax,8), %xmm6
.Ltmp3348:
    000004c0: 	movsd	(%r13,%rax,8), %xmm5
    000004c7: 	leal	0x1(%rax), %edi
    000004ca: 	movapd	%xmm5, %xmm0
    000004ce: 	mulsd	%xmm1, %xmm0
    000004d2: 	addsd	%xmm6, %xmm0
    000004d6: 	cmpl	%r8d, %r14d
    000004d9: 	jle	.Ltmp3337 # Offset: 1241
    000004db: 	addsd	0x8(%r13,%rax,8), %xmm0
    000004e2: 	jmp	.Ltmp3345 # Offset: 1250
    000004e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3336:
    000004f0: 	movq	0x10(%rsp), %rdi
    000004f5: 	movsd	(%rdi), %xmm6
    000004f9: 	addsd	%xmm2, %xmm6
    000004fd: 	jmp	.Ltmp3346 # Offset: 1277
    00000502: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3333:
    00000508: 	addsd	%xmm6, %xmm0
    0000050c: 	jmp	.Ltmp3347 # Offset: 1292
    00000511: 	nopl	(%rax) # Size: 7
.Ltmp3344:
    00000518: 	addsd	(%r13), %xmm6
    0000051e: 	jmp	.Ltmp3348 # Offset: 1310
.Ltmp3334:
    00000520: 	movq	0x28(%rsp), %rax
    00000525: 	movl	0xc(%rsp), %ebx
    00000529: 	addl	$0x1, %esi
    0000052c: 	addl	%ebx, 0x1c(%rsp)
    00000530: 	addq	%rax, %r12
    00000533: 	addq	%rax, %r10
    00000536: 	cmpl	0x34(%rsp), %esi
    0000053a: 	jl	.Ltmp3349 # Offset: 1338
    00000540: 	cmpl	%esi, 0x30(%rsp)
    00000544: 	jg	.Ltmp3350 # Offset: 1348
    0000054a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3329:
    00000550: 	addl	$0x1, 0x40(%rsp)
    00000555: 	movl	0x40(%rsp), %eax
    00000559: 	cmpl	0x44(%rsp), %eax
    0000055d: 	jne	.Ltmp3351 # Offset: 1373
.Ltmp3309:
    00000563: 	movl	0x30(%rsp), %eax
    00000567: 	pxor	%xmm1, %xmm1
    0000056b: 	imull	%r15d, %eax
    0000056f: 	cvtsi2sd	%eax, %xmm1
    00000573: 	mulsd	init_value(%rip), %xmm1
.Ltmp3371:
    0000057b: 	movl	%r15d, %eax
    0000057e: 	movl	%r15d, %edi
    00000581: 	movq	0x38(%rsp), %rcx
    00000586: 	movl	0x30(%rsp), %r10d
    0000058b: 	shrl	%eax
    0000058d: 	movl	0xc(%rsp), %r11d
    00000592: 	andl	$-0x2, %edi
    00000595: 	xorl	%edx, %edx
    00000597: 	leal	-0x1(%rax), %r8d
    0000059b: 	xorl	%esi, %esi
    0000059d: 	addq	$0x1, %r8
    000005a1: 	shlq	$0x4, %r8
    000005a5: 	nopl	(%rax) # Size: 3
.Ltmp3355:
    000005a8: 	testl	%r15d, %r15d
    000005ab: 	jle	.Ltmp3352 # Offset: 1451
    000005ad: 	cmpl	$0x1, %r15d
    000005b1: 	je	.Ltmp3353 # Offset: 1457
    000005b7: 	movslq	%edx, %rax
    000005ba: 	leaq	(%rcx,%rax,8), %rax
    000005be: 	leaq	(%r8,%rax), %r9
    000005c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3354:
    000005c8: 	movsd	(%rax), %xmm0
    000005cc: 	addq	$0x10, %rax
    000005d0: 	addsd	%xmm0, %xmm2
    000005d4: 	movsd	-0x8(%rax), %xmm0
    000005d9: 	addsd	%xmm0, %xmm2
    000005dd: 	cmpq	%rax, %r9
    000005e0: 	jne	.Ltmp3354 # Offset: 1504
    000005e2: 	movl	%edi, %eax
    000005e4: 	cmpl	%edi, %r15d
    000005e7: 	je	.Ltmp3352 # Offset: 1511
.Ltmp3365:
    000005e9: 	addl	%edx, %eax
    000005eb: 	cltq
    000005ed: 	addsd	(%rcx,%rax,8), %xmm2
.Ltmp3352:
    000005f2: 	addl	$0x1, %esi
    000005f5: 	addl	%r11d, %edx
    000005f8: 	cmpl	%esi, %r10d
    000005fb: 	jne	.Ltmp3355 # Offset: 1531
    000005fd: 	movapd	%xmm2, %xmm0
    00000601: 	movapd	%xmm2, %xmm3
    00000605: 	subsd	%xmm1, %xmm0
    00000609: 	movq	DATAat0x38920(%rip), %xmm1
    00000611: 	andpd	%xmm1, %xmm3
    00000615: 	comisd	DATAat0x38a60(%rip), %xmm3
    0000061d: 	jbe	.Ltmp3356 # Offset: 1565
    0000061f: 	divsd	%xmm2, %xmm0
.Ltmp3356:
    00000623: 	andpd	%xmm1, %xmm0
    00000627: 	movsd	DATAat0x38a68(%rip), %xmm1
    0000062f: 	comisd	%xmm0, %xmm1
    00000633: 	jbe	.Ltmp3357 # Offset: 1587
.Ltmp3367:
    00000639: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000640: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000647: 	subq	$0x20, %rax
    0000064b: 	cmpq	%rax, %rbx
    0000064e: 	je	.Ltmp3358 # Offset: 1614
    00000654: 	movq	0x48(%rsp), %rax
    00000659: 	leaq	0x10(%rbx), %rdi
    0000065d: 	movq	%rdi, (%rbx)
    00000660: 	movq	(%rax), %rbp
    00000663: 	movq	0x8(%rax), %r12
    00000667: 	movq	%rbp, %rax
    0000066a: 	addq	%r12, %rax
    0000066d: 	je	.Ltmp3359 # Offset: 1645
    0000066f: 	testq	%rbp, %rbp
    00000672: 	je	.Ltmp3360 # Offset: 1650
.Ltmp3359:
    00000678: 	movq	%r12, 0x50(%rsp)
    0000067d: 	cmpq	$0xf, %r12
    00000681: 	ja	.Ltmp3361 # Offset: 1665
    00000687: 	cmpq	$0x1, %r12
    0000068b: 	jne	.Ltmp3362 # Offset: 1675
    00000691: 	movzbl	(%rbp), %eax
    00000695: 	movb	%al, 0x10(%rbx)
.Ltmp3366:
    00000698: 	movq	%r12, 0x8(%rbx)
    0000069c: 	movb	$0x0, (%rdi,%r12)
    000006a1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000006a8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000006af: 	addq	$0x20, %rax
    000006b3: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000006ba: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000006c1: 	je	.Ltmp3363 # Offset: 1729
.Ltmp3368:
    000006c7: 	movq	-0x20(%rax), %rbp
    000006cb: 	callq	clock@PLT # Offset: 1739
    000006d0: 	movq	%rax, end_time(%rip)
    000006d7: 	movq	0x58(%rsp), %rdx
    000006dc: 	subq	%fs:0x28, %rdx
    000006e5: 	jne	.Ltmp3364 # Offset: 1765
    000006eb: 	subq	start_time(%rip), %rax
    000006f2: 	pxor	%xmm0, %xmm0
    000006f6: 	movq	%rbp, %rdi
    000006f9: 	cvtsi2sd	%rax, %xmm0
    000006fe: 	divsd	DATAat0x38a48(%rip), %xmm0
    00000706: 	addq	$0x68, %rsp
    0000070a: 	popq	%rbx
    0000070b: 	popq	%rbp
    0000070c: 	popq	%r12
    0000070e: 	popq	%r13
    00000710: 	popq	%r14
    00000712: 	popq	%r15
    00000714: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1812
.Ltmp3353:
    00000719: 	xorl	%eax, %eax
    0000071b: 	jmp	.Ltmp3365 # Offset: 1819
.Ltmp3361:
    00000720: 	movq	%rbx, %rdi
    00000723: 	leaq	0x50(%rsp), %rsi
    00000728: 	xorl	%edx, %edx
    0000072a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1834
    0000072f: 	movq	%rax, (%rbx)
    00000732: 	movq	%rax, %rdi
    00000735: 	movq	0x50(%rsp), %rax
    0000073a: 	movq	%rax, 0x10(%rbx)
.Ltmp3369:
    0000073e: 	movq	%r12, %rdx
    00000741: 	movq	%rbp, %rsi
    00000744: 	callq	memcpy@PLT # Offset: 1860
    00000749: 	movq	0x50(%rsp), %r12
    0000074e: 	movq	(%rbx), %rdi
    00000751: 	jmp	.Ltmp3366 # Offset: 1873
.Ltmp3357:
    00000756: 	movq	0x48(%rsp), %rax
    0000075b: 	leaq	DATAat0x381c8(%rip), %rsi
    00000762: 	movl	$0x1, %edi
    00000767: 	movq	(%rax), %rdx
    0000076a: 	xorl	%eax, %eax
    0000076c: 	callq	__printf_chk@PLT # Offset: 1900
    00000771: 	jmp	.Ltmp3367 # Offset: 1905
.Ltmp3358:
    00000776: 	movq	0x48(%rsp), %rsi
    0000077b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000782: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1922
    00000787: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000078e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000795: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000079c: 	jne	.Ltmp3368 # Offset: 1948
.Ltmp3363:
    000007a2: 	movq	-0x8(%rdx), %rax
    000007a6: 	addq	$0x200, %rax
    000007ac: 	jmp	.Ltmp3368 # Offset: 1964
.Ltmp3362:
    000007b1: 	testq	%r12, %r12
    000007b4: 	je	.Ltmp3366 # Offset: 1972
    000007ba: 	jmp	.Ltmp3369 # Offset: 1978
    000007bc: 	nopl	(%rax) # Size: 4
.Ltmp3308:
    000007c0: 	movl	0x30(%rsp), %eax
    000007c4: 	pxor	%xmm1, %xmm1
    000007c8: 	imull	%r15d, %eax
    000007cc: 	cvtsi2sd	%eax, %xmm1
    000007d0: 	mulsd	init_value(%rip), %xmm1
.Ltmp3370:
    000007d8: 	pxor	%xmm0, %xmm0
    000007dc: 	subsd	%xmm1, %xmm0
    000007e0: 	movq	DATAat0x38920(%rip), %xmm1
    000007e8: 	jmp	.Ltmp3356 # Offset: 2024
.Ltmp3307:
    000007ed: 	movl	0x30(%rsp), %esi
    000007f1: 	pxor	%xmm1, %xmm1
    000007f5: 	movl	%esi, %eax
    000007f7: 	imull	%r15d, %eax
    000007fb: 	cvtsi2sd	%eax, %xmm1
    000007ff: 	mulsd	init_value(%rip), %xmm1
    00000807: 	testl	%esi, %esi
    00000809: 	jle	.Ltmp3370 # Offset: 2057
    0000080b: 	pxor	%xmm2, %xmm2
    0000080f: 	jmp	.Ltmp3371 # Offset: 2063
.Ltmp3360:
    00000814: 	leaq	DATAat0x38158(%rip), %rdi
    0000081b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 2075
.Ltmp3364:
    00000820: 	callq	__stack_chk_fail@PLT # Offset: 2080
DWARF CFI Instructions:
    <empty>
End of Function "_Z15convolution2D_1IddEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15convolution2D_3IilEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 279
  State       : disassembled
  Address     : 0x272e0
  Size        : 0xa70
  MaxSize     : 0xa70
  Offset      : 0x272e0
  Section     : .text
  Orc Section : .local.text._Z15convolution2D_3IilEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0278:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdi, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rsi, %r13
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	movl	%ecx, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movl	%r8d, %ebx
    0000001c: 	subq	$0xb8, %rsp
    00000023: 	movl	%edx, 0x4c(%rsp)
    00000027: 	movl	%ecx, 0x7c(%rsp)
    0000002b: 	movl	%r8d, 0x20(%rsp)
    00000030: 	movq	%r9, 0x98(%rsp)
    00000038: 	movq	%fs:0x28, %rax
    00000041: 	movq	%rax, 0xa8(%rsp)
    00000049: 	xorl	%eax, %eax
    0000004b: 	callq	clock@PLT # Offset: 75
    00000050: 	movl	%r15d, %esi
    00000053: 	subl	$0x1, %r15d
    00000057: 	movq	%rax, start_time(%rip)
    0000005e: 	movl	iterations(%rip), %eax
    00000064: 	testl	%eax, %eax
    00000066: 	jle	.Ltmp3372 # Offset: 102
    0000006c: 	leal	-0x2(%rbp), %eax
    0000006f: 	leal	-0x1(%rbp), %edi
    00000072: 	cltq
    00000074: 	movl	%edi, 0x40(%rsp)
    00000078: 	leaq	(%r14,%rax,4), %rax
    0000007c: 	movq	%rax, 0x68(%rsp)
    00000081: 	movslq	%edi, %rax
    00000084: 	movq	%rax, 0x80(%rsp)
    0000008c: 	shlq	$0x2, %rax
    00000090: 	movq	%rax, 0x88(%rsp)
    00000098: 	addq	%r14, %rax
    0000009b: 	movq	%rax, 0x70(%rsp)
    000000a0: 	testl	%esi, %esi
    000000a2: 	jle	.Ltmp3372 # Offset: 162
    000000a8: 	movslq	%ebx, %rax
    000000ab: 	movl	$0x0, 0x78(%rsp)
    000000b3: 	leaq	(,%rax,4), %rsi
    000000bb: 	movq	%rax, 0x58(%rsp)
    000000c0: 	movslq	%ebp, %rax
    000000c3: 	leaq	(%r14,%rax,4), %rax
    000000c7: 	movq	%rsi, 0x38(%rsp)
    000000cc: 	movq	%rax, 0x50(%rsp)
    000000d1: 	leaq	(%r14,%rsi), %rax
    000000d5: 	movq	%rax, 0x60(%rsp)
    000000da: 	leal	(%rbx,%rbx), %eax
    000000dd: 	negl	%ebx
    000000df: 	movl	%eax, 0x90(%rsp)
    000000e6: 	movl	%ebx, 0x94(%rsp)
    000000ed: 	nopl	(%rax) # Size: 3
.Ltmp3382:
    000000f0: 	testl	%r15d, %r15d
    000000f3: 	jg	.Ltmp3373 # Offset: 243
    000000f9: 	movl	$0x0, 0x24(%rsp)
.Ltmp3412:
    00000101: 	movslq	0x24(%rsp), %rax
    00000106: 	movl	0x20(%rsp), %esi
    0000010a: 	movl	0x7c(%rsp), %ebx
    0000010e: 	movq	%rax, %rdx
    00000111: 	movq	%rax, 0x10(%rsp)
    00000116: 	leal	-0x1(%rax), %eax
    00000119: 	imull	%esi, %eax
    0000011c: 	movl	%eax, 0x24(%rsp)
    00000120: 	addl	%eax, %ebx
    00000122: 	movl	%edx, %eax
    00000124: 	addl	$0x1, %edx
    00000127: 	imull	%esi, %eax
    0000012a: 	imull	%esi, %edx
    0000012d: 	cltq
    0000012f: 	leaq	(,%rax,4), %r12
    00000137: 	addq	0x80(%rsp), %rax
    0000013f: 	movl	%edx, 0x30(%rsp)
    00000143: 	shlq	$0x2, %rax
    00000147: 	movq	%r12, 0x18(%rsp)
    0000014c: 	movl	0x90(%rsp), %r12d
    00000154: 	movq	%rax, 0x28(%rsp)
    00000159: 	nopl	(%rax) # Size: 7
.Ltmp3381:
    00000160: 	movq	0x10(%rsp), %rax
    00000165: 	movl	%eax, %r10d
    00000168: 	testl	%eax, %eax
    0000016a: 	je	.Ltmp3374 # Offset: 362
    00000170: 	movslq	0x24(%rsp), %rax
    00000175: 	movq	%rax, %rsi
    00000178: 	movslq	(%r14,%rax,4), %rax
    0000017c: 	leaq	(%rax,%rax,2), %rdx
    00000180: 	leal	0x1(%rsi), %eax
    00000183: 	cltq
    00000185: 	movslq	(%r14,%rax,4), %rax
    00000189: 	leaq	(%rax,%rdx,2), %rax
.Ltmp3400:
    0000018d: 	movq	0x18(%rsp), %rcx
    00000192: 	movslq	(%r14,%rcx), %rdx
    00000196: 	movslq	0x4(%r14,%rcx), %rcx
    0000019b: 	leaq	(%rdx,%rdx,4), %rsi
    0000019f: 	addq	%rsi, %rax
    000001a2: 	leaq	(%rax,%rdx,8), %rdi
    000001a6: 	leaq	(%rcx,%rcx,4), %rax
    000001aa: 	addq	%rdi, %rax
    000001ad: 	cmpl	%r10d, %r15d
    000001b0: 	jle	.Ltmp3375 # Offset: 432
    000001b6: 	movslq	0x30(%rsp), %rdx
    000001bb: 	movq	%rdx, %rsi
    000001be: 	movslq	(%r14,%rdx,4), %rdx
    000001c2: 	addq	%rdx, %rax
    000001c5: 	leaq	(%rdx,%rdx,4), %rdx
    000001c9: 	addq	%rax, %rdx
    000001cc: 	leal	0x1(%rsi), %eax
    000001cf: 	cltq
    000001d1: 	movslq	(%r14,%rax,4), %rax
    000001d5: 	addq	%rdx, %rax
.Ltmp3399:
    000001d8: 	leaq	0x2f(%rax), %rdx
    000001dc: 	addq	$0x10, %rax
    000001e0: 	movq	0x18(%rsp), %rdi
    000001e5: 	cmovnsq	%rax, %rdx
    000001e9: 	sarq	$0x5, %rdx
    000001ed: 	cmpl	$0x1, 0x40(%rsp)
    000001f2: 	movl	%edx, (%r13,%rdi)
    000001f7: 	jle	.Ltmp3376 # Offset: 503
    000001fd: 	movl	0x24(%rsp), %esi
    00000201: 	movq	%rdi, %rdx
    00000204: 	leal	-0x2(%r12), %edi
    00000209: 	movq	%r14, %r8
    0000020c: 	movl	%edi, 0xc(%rsp)
    00000210: 	leal	-0x1(%rsi,%r12), %ebp
    00000215: 	leal	0x2(%rsi), %eax
    00000218: 	subl	%esi, %ebp
    0000021a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3379:
    00000220: 	testl	%r10d, %r10d
    00000223: 	je	.Ltmp3377 # Offset: 547
.Ltmp3396:
    00000229: 	leal	-0x1(%rax), %ecx
    0000022c: 	leal	-0x2(%rax), %esi
    0000022f: 	movslq	%ecx, %rcx
    00000232: 	movslq	%esi, %rsi
    00000235: 	movslq	(%r14,%rcx,4), %rcx
    00000239: 	movslq	(%r14,%rsi,4), %rsi
    0000023d: 	leaq	(%rcx,%rcx,4), %rcx
    00000241: 	addq	%rsi, %rcx
    00000244: 	movslq	%eax, %rsi
    00000247: 	movslq	(%r14,%rsi,4), %rdi
    0000024b: 	addq	%rcx, %rdi
.Ltmp3397:
    0000024e: 	movslq	(%r14,%rdx), %r9
    00000252: 	leaq	(%r9,%r9,4), %rsi
    00000256: 	addq	%rdi, %rsi
    00000259: 	movslq	0x4(%r14,%rdx), %rdi
    0000025e: 	leaq	(%rsi,%rdi,8), %r11
    00000262: 	movslq	0x8(%r14,%rdx), %rsi
    00000267: 	leaq	(%rsi,%rsi,4), %rcx
    0000026b: 	addq	%r11, %rcx
    0000026e: 	cmpl	%r10d, %r15d
    00000271: 	jle	.Ltmp3378 # Offset: 625
    00000277: 	movl	0xc(%rsp), %esi
    0000027b: 	addl	%eax, %esi
    0000027d: 	movslq	%esi, %rsi
    00000280: 	movslq	(%r14,%rsi,4), %rsi
    00000284: 	addq	%rsi, %rcx
    00000287: 	leal	(%rbp,%rax), %esi
    0000028b: 	movslq	%esi, %rsi
    0000028e: 	movslq	(%r14,%rsi,4), %rsi
    00000292: 	leaq	(%rsi,%rsi,4), %rsi
    00000296: 	addq	%rcx, %rsi
    00000299: 	leal	(%rax,%r12), %ecx
    0000029d: 	movslq	%ecx, %rcx
    000002a0: 	movslq	(%r14,%rcx,4), %rcx
    000002a4: 	addq	%rsi, %rcx
    000002a7: 	leaq	0x2f(%rcx), %rsi
    000002ab: 	addq	$0x10, %rcx
    000002af: 	cmovsq	%rsi, %rcx
    000002b3: 	addl	$0x1, %eax
    000002b6: 	addq	$0x4, %r8
    000002ba: 	sarq	$0x5, %rcx
    000002be: 	movl	%ecx, 0x4(%r13,%rdx)
    000002c3: 	addq	$0x4, %rdx
    000002c7: 	cmpl	%ebx, %eax
    000002c9: 	jne	.Ltmp3379 # Offset: 713
.Ltmp3376:
    000002cf: 	testl	%r10d, %r10d
    000002d2: 	je	.Ltmp3380 # Offset: 722
    000002d8: 	leal	-0x1(%rbx), %eax
    000002db: 	cltq
    000002dd: 	movslq	(%r14,%rax,4), %rdx
    000002e1: 	leal	-0x2(%rbx), %eax
    000002e4: 	cltq
    000002e6: 	movslq	(%r14,%rax,4), %rax
    000002ea: 	leaq	(%rdx,%rdx,4), %rcx
    000002ee: 	addq	%rcx, %rax
    000002f1: 	addq	%rdx, %rax
.Ltmp3398:
    000002f4: 	movq	0x18(%rsp), %r11
    000002f9: 	movq	0x50(%rsp), %rdx
    000002fe: 	movq	0x28(%rsp), %rdi
    00000303: 	movslq	-0x8(%rdx,%r11), %rdx
    00000308: 	leaq	(%rdx,%rdx,4), %rcx
    0000030c: 	addq	%rax, %rcx
    0000030f: 	movslq	(%r14,%rdi), %rax
    00000313: 	leaq	(%rax,%rax,4), %rsi
    00000317: 	leaq	(%rcx,%rax,8), %rcx
    0000031b: 	leaq	(%rcx,%rsi,2), %rcx
    0000031f: 	movl	0x20(%rsp), %esi
    00000323: 	addq	%rcx, %rdx
    00000326: 	addq	%rdx, %rax
    00000329: 	leaq	0x2f(%rax), %rdx
    0000032d: 	addq	$0x10, %rax
    00000331: 	cmovnsq	%rax, %rdx
    00000335: 	movq	%rdi, %rax
    00000338: 	addq	$0x1, 0x10(%rsp)
    0000033e: 	addl	%esi, %ebx
    00000340: 	addl	%esi, 0x24(%rsp)
    00000344: 	sarq	$0x5, %rdx
    00000348: 	addl	%esi, 0x30(%rsp)
    0000034c: 	movl	%edx, (%r13,%rdi)
    00000351: 	movq	0x38(%rsp), %rdi
    00000356: 	movq	0x10(%rsp), %rdx
    0000035b: 	addq	%rdi, %r11
    0000035e: 	addq	%rdi, %rax
    00000361: 	movq	%r11, 0x18(%rsp)
    00000366: 	movq	%rax, 0x28(%rsp)
    0000036b: 	cmpl	%edx, 0x4c(%rsp)
    0000036f: 	jg	.Ltmp3381 # Offset: 879
.Ltmp3413:
    00000375: 	addl	$0x1, 0x78(%rsp)
    0000037a: 	movl	0x78(%rsp), %eax
    0000037e: 	cmpl	iterations(%rip), %eax
    00000384: 	jl	.Ltmp3382 # Offset: 900
.Ltmp3372:
    0000038a: 	movl	0x4c(%rsp), %eax
    0000038e: 	movl	0x7c(%rsp), %ebx
    00000392: 	leal	-0x2(%rax,%rbx), %eax
    00000396: 	leal	(%rax,%rax), %r12d
    0000039a: 	cmpl	$0x1, %r15d
    0000039e: 	jle	.Ltmp3383 # Offset: 926
    000003a4: 	leal	-0x2(%rbx), %r9d
    000003a8: 	leal	-0x1(%rbx), %edi
    000003ab: 	xorl	%edx, %edx
    000003ad: 	movl	$0x1, %esi
    000003b2: 	movl	%r9d, %eax
    000003b5: 	leal	-0x3(%rbx), %r10d
    000003b9: 	movl	%r9d, %r11d
    000003bc: 	movl	0x20(%rsp), %ebx
    000003c0: 	shrl	$0x2, %eax
    000003c3: 	andl	$-0x4, %r11d
    000003c7: 	leal	-0x1(%rax), %r8d
    000003cb: 	leal	0x1(%r11), %ebp
    000003cf: 	movl	%ebx, %ecx
    000003d1: 	addq	$0x1, %r8
    000003d5: 	shlq	$0x4, %r8
    000003d9: 	nopl	(%rax) # Size: 7
.Ltmp3387:
    000003e0: 	cmpl	$0x1, %edi
    000003e3: 	jle	.Ltmp3384 # Offset: 995
    000003e9: 	cmpl	$0x2, %r10d
    000003ed: 	jbe	.Ltmp3385 # Offset: 1005
    000003f3: 	movslq	%ecx, %rax
    000003f6: 	pxor	%xmm0, %xmm0
    000003fa: 	leaq	0x4(%r13,%rax,4), %rax
    000003ff: 	leaq	(%r8,%rax), %r14
    00000403: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3386:
    00000408: 	movdqu	(%rax), %xmm2
    0000040c: 	addq	$0x10, %rax
    00000410: 	paddd	%xmm2, %xmm0
    00000414: 	cmpq	%r14, %rax
    00000417: 	jne	.Ltmp3386 # Offset: 1047
    00000419: 	movdqa	%xmm0, %xmm1
    0000041d: 	psrldq	$0x8, %xmm1
    00000422: 	paddd	%xmm1, %xmm0
    00000426: 	movdqa	%xmm0, %xmm1
    0000042a: 	psrldq	$0x4, %xmm1
    0000042f: 	paddd	%xmm1, %xmm0
    00000433: 	movd	%xmm0, %eax
    00000437: 	addl	%eax, %edx
    00000439: 	movl	%ebp, %eax
    0000043b: 	cmpl	%r9d, %r11d
    0000043e: 	je	.Ltmp3384 # Offset: 1086
.Ltmp3414:
    00000440: 	leal	(%rax,%rcx), %r14d
    00000444: 	movslq	%r14d, %r14
    00000447: 	addl	(%r13,%r14,4), %edx
    0000044c: 	leal	0x1(%rax), %r14d
    00000450: 	cmpl	%edi, %r14d
    00000453: 	jge	.Ltmp3384 # Offset: 1107
    00000455: 	addl	%ecx, %r14d
    00000458: 	addl	$0x2, %eax
    0000045b: 	movslq	%r14d, %r14
    0000045e: 	addl	(%r13,%r14,4), %edx
    00000463: 	cmpl	%eax, %edi
    00000465: 	jle	.Ltmp3384 # Offset: 1125
    00000467: 	addl	%ecx, %eax
    00000469: 	cltq
    0000046b: 	addl	(%r13,%rax,4), %edx
.Ltmp3384:
    00000470: 	addl	$0x1, %esi
    00000473: 	addl	%ebx, %ecx
    00000475: 	cmpl	%r15d, %esi
    00000478: 	jne	.Ltmp3387 # Offset: 1144
.Ltmp3418:
    0000047e: 	cvttsd2si	init_value(%rip), %ecx
    00000486: 	movl	0x4c(%rsp), %eax
    0000048a: 	imull	0x7c(%rsp), %eax
    0000048f: 	subl	%r12d, %eax
    00000492: 	imull	%ecx, %eax
    00000495: 	cmpl	%edx, %eax
    00000497: 	je	.Ltmp3388 # Offset: 1175
    00000499: 	movq	0x98(%rsp), %rax
    000004a1: 	leaq	DATAat0x381c8(%rip), %rsi
    000004a8: 	movl	$0x1, %edi
    000004ad: 	movq	(%rax), %rdx
    000004b0: 	xorl	%eax, %eax
    000004b2: 	callq	__printf_chk@PLT # Offset: 1202
.Ltmp3388:
    000004b7: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000004be: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000004c5: 	subq	$0x20, %rax
    000004c9: 	cmpq	%rax, %rbx
    000004cc: 	je	.Ltmp3389 # Offset: 1228
    000004d2: 	movq	0x98(%rsp), %rax
    000004da: 	leaq	0x10(%rbx), %rdi
    000004de: 	movq	%rdi, (%rbx)
    000004e1: 	movq	(%rax), %rbp
    000004e4: 	movq	0x8(%rax), %r12
    000004e8: 	movq	%rbp, %rax
    000004eb: 	addq	%r12, %rax
    000004ee: 	je	.Ltmp3390 # Offset: 1262
    000004f0: 	testq	%rbp, %rbp
    000004f3: 	je	.Ltmp3391 # Offset: 1267
.Ltmp3390:
    000004f9: 	movq	%r12, 0xa0(%rsp)
    00000501: 	cmpq	$0xf, %r12
    00000505: 	ja	.Ltmp3392 # Offset: 1285
    0000050b: 	cmpq	$0x1, %r12
    0000050f: 	jne	.Ltmp3393 # Offset: 1295
    00000515: 	movzbl	(%rbp), %eax
    00000519: 	movb	%al, 0x10(%rbx)
.Ltmp3415:
    0000051c: 	movq	%r12, 0x8(%rbx)
    00000520: 	movb	$0x0, (%rdi,%r12)
    00000525: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000052c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000533: 	addq	$0x20, %rax
    00000537: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000053e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000545: 	je	.Ltmp3394 # Offset: 1349
.Ltmp3416:
    0000054b: 	movq	-0x20(%rax), %rbp
    0000054f: 	callq	clock@PLT # Offset: 1359
    00000554: 	movq	%rax, end_time(%rip)
    0000055b: 	movq	0xa8(%rsp), %rdx
    00000563: 	subq	%fs:0x28, %rdx
    0000056c: 	jne	.Ltmp3395 # Offset: 1388
    00000572: 	subq	start_time(%rip), %rax
    00000579: 	pxor	%xmm0, %xmm0
    0000057d: 	movq	%rbp, %rdi
    00000580: 	cvtsi2sd	%rax, %xmm0
    00000585: 	divsd	DATAat0x38a48(%rip), %xmm0
    0000058d: 	addq	$0xb8, %rsp
    00000594: 	popq	%rbx
    00000595: 	popq	%rbp
    00000596: 	popq	%r12
    00000598: 	popq	%r13
    0000059a: 	popq	%r14
    0000059c: 	popq	%r15
    0000059e: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1438
    000005a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3378:
    000005a8: 	addq	%rcx, %r9
    000005ab: 	leaq	(%rdi,%rdi,4), %rcx
    000005af: 	addq	%r9, %rcx
    000005b2: 	addq	%rsi, %rcx
    000005b5: 	leaq	0x2f(%rcx), %rsi
    000005b9: 	addq	$0x10, %rcx
    000005bd: 	cmovsq	%rsi, %rcx
    000005c1: 	addl	$0x1, %eax
    000005c4: 	addq	$0x4, %r8
    000005c8: 	sarq	$0x5, %rcx
    000005cc: 	movl	%ecx, 0x4(%r13,%rdx)
    000005d1: 	addq	$0x4, %rdx
    000005d5: 	cmpl	%eax, %ebx
    000005d7: 	je	.Ltmp3376 # Offset: 1495
    000005dd: 	testl	%r10d, %r10d
    000005e0: 	jne	.Ltmp3396 # Offset: 1504
.Ltmp3377:
    000005e6: 	movslq	0x4(%r8), %rcx
    000005ea: 	movslq	(%r8), %rsi
    000005ed: 	movslq	0x8(%r8), %rdi
    000005f1: 	leaq	(%rcx,%rcx,4), %rcx
    000005f5: 	addq	%rsi, %rcx
    000005f8: 	addq	%rcx, %rdi
    000005fb: 	jmp	.Ltmp3397 # Offset: 1531
.Ltmp3380:
    00000600: 	movq	0x70(%rsp), %rax
    00000605: 	movq	0x68(%rsp), %rsi
    0000060a: 	movslq	(%rax), %rdx
    0000060d: 	movslq	(%rsi), %rcx
    00000610: 	leaq	(%rdx,%rdx,4), %rax
    00000614: 	addq	%rcx, %rax
    00000617: 	addq	%rdx, %rax
    0000061a: 	jmp	.Ltmp3398 # Offset: 1562
    0000061f: 	nop # Size: 1
.Ltmp3375:
    00000620: 	addq	%rdx, %rax
    00000623: 	addq	%rsi, %rax
    00000626: 	addq	%rcx, %rax
    00000629: 	jmp	.Ltmp3399 # Offset: 1577
    0000062e: 	nop # Size: 2
.Ltmp3374:
    00000630: 	movslq	(%r14), %rax
    00000633: 	leaq	(%rax,%rax,2), %rdx
    00000637: 	movslq	0x4(%r14), %rax
    0000063b: 	leaq	(%rax,%rdx,2), %rax
    0000063f: 	jmp	.Ltmp3400 # Offset: 1599
    00000644: 	nopl	(%rax) # Size: 4
.Ltmp3373:
    00000648: 	movl	0x20(%rsp), %eax
    0000064c: 	movl	0x7c(%rsp), %r12d
    00000651: 	xorl	%r9d, %r9d
    00000654: 	movq	$0x0, 0x10(%rsp)
    0000065d: 	movq	0x88(%rsp), %rbx
    00000665: 	movl	0x94(%rsp), %ecx
    0000066c: 	movl	%eax, 0x18(%rsp)
    00000670: 	subl	%eax, %r12d
    00000673: 	movq	0x50(%rsp), %rax
    00000678: 	movq	%rbx, 0x30(%rsp)
    0000067d: 	movq	%rax, 0x28(%rsp)
    00000682: 	testl	%r9d, %r9d
    00000685: 	je	.Ltmp3401 # Offset: 1669
    0000068b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3408:
    00000690: 	movslq	%ecx, %rax
    00000693: 	movq	0x10(%rsp), %rbx
    00000698: 	movslq	(%r14,%rax,4), %rax
    0000069c: 	movslq	(%r14,%rbx), %rsi
    000006a0: 	movslq	0x4(%r14,%rbx), %rdi
    000006a5: 	leal	0x1(%r9), %ebx
    000006a9: 	leaq	(%rax,%rax,2), %rdx
    000006ad: 	leal	0x1(%rcx), %eax
    000006b0: 	movl	%ebx, 0x44(%rsp)
    000006b4: 	cltq
    000006b6: 	movl	%ebx, 0x24(%rsp)
    000006ba: 	movslq	(%r14,%rax,4), %rax
    000006be: 	leaq	(%rax,%rdx,2), %rdx
    000006c2: 	movl	0x20(%rsp), %eax
    000006c6: 	addl	%ecx, %eax
    000006c8: 	movl	%eax, 0x48(%rsp)
    000006cc: 	leaq	(%rsi,%rsi,4), %rax
    000006d0: 	addq	%rax, %rdx
    000006d3: 	leaq	(%rdx,%rsi,8), %r8
    000006d7: 	leaq	(%rdi,%rdi,4), %rdx
    000006db: 	addq	%r8, %rdx
    000006de: 	cmpl	%r9d, %r15d
    000006e1: 	jg	.Ltmp3402 # Offset: 1761
    000006e7: 	addq	%rdx, %rsi
    000006ea: 	addq	%rsi, %rax
    000006ed: 	addq	%rdi, %rax
.Ltmp3409:
    000006f0: 	leaq	0x2f(%rax), %rdx
    000006f4: 	addq	$0x10, %rax
    000006f8: 	movq	0x10(%rsp), %rbx
    000006fd: 	movq	%r14, %rsi
    00000700: 	cmovnsq	%rax, %rdx
    00000704: 	leal	0x2(%rcx), %eax
    00000707: 	sarq	$0x5, %rdx
    0000070b: 	cmpl	$0x1, 0x40(%rsp)
    00000710: 	movl	%edx, (%r13,%rbx)
    00000715: 	movq	%rbx, %rdx
    00000718: 	jle	.Ltmp3403 # Offset: 1816
    0000071e: 	movl	0x18(%rsp), %edi
    00000722: 	leal	-0x2(%rdi), %ebp
    00000725: 	leal	-0x1(%rdi), %ebx
    00000728: 	subl	%ecx, %edi
    0000072a: 	movl	%edi, 0xc(%rsp)
    0000072e: 	subl	%ecx, %ebp
    00000730: 	subl	%ecx, %ebx
    00000732: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3406:
    00000738: 	testl	%r9d, %r9d
    0000073b: 	je	.Ltmp3404 # Offset: 1851
    00000741: 	leal	-0x1(%rax), %ecx
    00000744: 	leal	-0x2(%rax), %edi
    00000747: 	movslq	(%r14,%rdx), %r8
    0000074b: 	movslq	0x4(%r14,%rdx), %r10
    00000750: 	movslq	%ecx, %rcx
    00000753: 	movslq	%edi, %rdi
    00000756: 	movslq	(%r14,%rcx,4), %rcx
    0000075a: 	movslq	(%r14,%rdi,4), %rdi
    0000075e: 	leaq	(%rcx,%rcx,4), %rcx
    00000762: 	addq	%rdi, %rcx
    00000765: 	movslq	%eax, %rdi
    00000768: 	movslq	(%r14,%rdi,4), %rdi
    0000076c: 	addq	%rcx, %rdi
    0000076f: 	leaq	(%r8,%r8,4), %rcx
    00000773: 	addq	%rdi, %rcx
    00000776: 	leaq	(%rcx,%r10,8), %r11
    0000077a: 	movslq	0x8(%r14,%rdx), %rcx
    0000077f: 	leaq	(%rcx,%rcx,4), %rdi
    00000783: 	addq	%r11, %rdi
    00000786: 	cmpl	%r9d, %r15d
    00000789: 	jg	.Ltmp3405 # Offset: 1929
    0000078f: 	addq	%rdi, %r8
    00000792: 	leaq	(%r10,%r10,4), %rdi
    00000796: 	addq	%r8, %rdi
    00000799: 	addq	%rdi, %rcx
    0000079c: 	leaq	0x2f(%rcx), %rdi
    000007a0: 	addq	$0x10, %rcx
    000007a4: 	cmovsq	%rdi, %rcx
    000007a8: 	addl	$0x1, %eax
    000007ab: 	addq	$0x4, %rsi
    000007af: 	sarq	$0x5, %rcx
    000007b3: 	movl	%ecx, 0x4(%r13,%rdx)
    000007b8: 	addq	$0x4, %rdx
    000007bc: 	cmpl	%r12d, %eax
    000007bf: 	jne	.Ltmp3406 # Offset: 1983
.Ltmp3410:
    000007c5: 	leal	-0x1(%r12), %eax
    000007ca: 	cltq
    000007cc: 	movslq	(%r14,%rax,4), %rdx
    000007d0: 	leal	-0x2(%r12), %eax
    000007d5: 	cltq
    000007d7: 	movslq	(%r14,%rax,4), %rax
    000007db: 	leaq	(%rdx,%rdx,4), %rcx
    000007df: 	addq	%rcx, %rax
    000007e2: 	addq	%rdx, %rax
.Ltmp3411:
    000007e5: 	movq	0x28(%rsp), %rsi
    000007ea: 	movq	0x30(%rsp), %rbx
    000007ef: 	movslq	-0x8(%rsi), %rdx
    000007f3: 	leaq	(%rdx,%rdx,4), %rdx
    000007f7: 	addq	%rax, %rdx
    000007fa: 	movslq	(%r14,%rbx), %rax
    000007fe: 	leaq	(%rdx,%rax,8), %rdx
    00000802: 	leaq	(%rax,%rax,4), %rax
    00000806: 	addq	%rdx, %rax
    00000809: 	movq	0x58(%rsp), %rdx
    0000080e: 	movslq	-0x8(%rsi,%rdx,4), %rcx
    00000813: 	addq	%rax, %rcx
    00000816: 	movq	0x60(%rsp), %rax
    0000081b: 	movslq	(%rax,%rbx), %rdx
    0000081f: 	leaq	(%rdx,%rdx,4), %rax
    00000823: 	addq	%rcx, %rax
    00000826: 	addq	%rdx, %rax
    00000829: 	leaq	0x2f(%rax), %rdx
    0000082d: 	addq	$0x10, %rax
    00000831: 	cmovnsq	%rax, %rdx
    00000835: 	movq	%rbx, %rax
    00000838: 	sarq	$0x5, %rdx
    0000083c: 	movl	%edx, (%r13,%rbx)
    00000841: 	movq	0x38(%rsp), %rbx
    00000846: 	addq	%rbx, 0x10(%rsp)
    0000084b: 	addq	%rbx, %rsi
    0000084e: 	addq	%rbx, %rax
    00000851: 	movq	%rsi, 0x28(%rsp)
    00000856: 	movl	0x20(%rsp), %esi
    0000085a: 	movq	%rax, 0x30(%rsp)
    0000085f: 	addl	%esi, 0x18(%rsp)
    00000863: 	addl	%esi, %r12d
    00000866: 	cmpl	%r15d, 0x24(%rsp)
    0000086b: 	jge	.Ltmp3407 # Offset: 2155
    00000871: 	movl	0x44(%rsp), %r9d
    00000876: 	movl	0x48(%rsp), %ecx
    0000087a: 	testl	%r9d, %r9d
    0000087d: 	jne	.Ltmp3408 # Offset: 2173
.Ltmp3401:
    00000883: 	movslq	(%r14), %rax
    00000886: 	movq	0x10(%rsp), %rbx
    0000088b: 	movl	$0x1, 0x44(%rsp)
    00000893: 	movl	$0x1, 0x24(%rsp)
    0000089b: 	leaq	(%rax,%rax,2), %rdx
    0000089f: 	movslq	0x4(%r14), %rax
    000008a3: 	leaq	(%rax,%rdx,2), %rsi
    000008a7: 	movl	0x20(%rsp), %eax
    000008ab: 	movslq	(%r14,%rbx), %rdx
    000008af: 	addl	%ecx, %eax
    000008b1: 	movl	%eax, 0x48(%rsp)
    000008b5: 	leaq	(%rdx,%rdx,4), %rax
    000008b9: 	addq	%rsi, %rax
    000008bc: 	leaq	(%rax,%rdx,8), %rsi
    000008c0: 	movslq	0x4(%r14,%rbx), %rax
    000008c5: 	leaq	(%rax,%rax,4), %rdx
    000008c9: 	addq	%rsi, %rdx
.Ltmp3402:
    000008cc: 	movslq	0x18(%rsp), %rax
    000008d1: 	movq	%rax, %rbx
    000008d4: 	movslq	(%r14,%rax,4), %rax
    000008d8: 	addq	%rax, %rdx
    000008db: 	leaq	(%rax,%rax,4), %rax
    000008df: 	addq	%rax, %rdx
    000008e2: 	leal	0x1(%rbx), %eax
    000008e5: 	cltq
    000008e7: 	movslq	(%r14,%rax,4), %rax
    000008eb: 	addq	%rdx, %rax
    000008ee: 	jmp	.Ltmp3409 # Offset: 2286
    000008f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3404:
    000008f8: 	movslq	0x4(%rsi), %rcx
    000008fc: 	movslq	(%rsi), %rdi
    000008ff: 	leaq	(%rcx,%rcx,4), %rcx
    00000903: 	addq	%rdi, %rcx
    00000906: 	movslq	0x8(%rsi), %rdi
    0000090a: 	addq	%rcx, %rdi
    0000090d: 	movslq	(%r14,%rdx), %rcx
    00000911: 	leaq	(%rcx,%rcx,4), %rcx
    00000915: 	addq	%rdi, %rcx
    00000918: 	movslq	0x4(%r14,%rdx), %rdi
    0000091d: 	leaq	(%rcx,%rdi,8), %r8
    00000921: 	movslq	0x8(%r14,%rdx), %rcx
    00000926: 	leaq	(%rcx,%rcx,4), %rdi
    0000092a: 	addq	%r8, %rdi
.Ltmp3405:
    0000092d: 	leal	(%rbp,%rax), %ecx
    00000931: 	movslq	%ecx, %rcx
    00000934: 	movslq	(%r14,%rcx,4), %rcx
    00000938: 	addq	%rdi, %rcx
    0000093b: 	leal	(%rbx,%rax), %edi
    0000093e: 	movslq	%edi, %rdi
    00000941: 	movslq	(%r14,%rdi,4), %rdi
    00000945: 	leaq	(%rdi,%rdi,4), %rdi
    00000949: 	addq	%rcx, %rdi
    0000094c: 	movl	0xc(%rsp), %ecx
    00000950: 	addl	%eax, %ecx
    00000952: 	movslq	%ecx, %rcx
    00000955: 	movslq	(%r14,%rcx,4), %rcx
    00000959: 	addq	%rdi, %rcx
    0000095c: 	leaq	0x2f(%rcx), %rdi
    00000960: 	addq	$0x10, %rcx
    00000964: 	cmovsq	%rdi, %rcx
    00000968: 	addl	$0x1, %eax
    0000096b: 	addq	$0x4, %rsi
    0000096f: 	sarq	$0x5, %rcx
    00000973: 	movl	%ecx, 0x4(%r13,%rdx)
    00000978: 	addq	$0x4, %rdx
    0000097c: 	cmpl	%r12d, %eax
    0000097f: 	jne	.Ltmp3406 # Offset: 2431
.Ltmp3403:
    00000985: 	testl	%r9d, %r9d
    00000988: 	jne	.Ltmp3410 # Offset: 2440
    0000098e: 	movq	0x70(%rsp), %rax
    00000993: 	movslq	(%rax), %rdx
    00000996: 	movq	0x68(%rsp), %rax
    0000099b: 	movslq	(%rax), %rax
    0000099e: 	leaq	(%rdx,%rdx,4), %rcx
    000009a2: 	addq	%rcx, %rax
    000009a5: 	addq	%rdx, %rax
    000009a8: 	jmp	.Ltmp3411 # Offset: 2472
    000009ad: 	nopl	(%rax) # Size: 3
.Ltmp3407:
    000009b0: 	movl	0x4c(%rsp), %ebx
    000009b4: 	cmpl	%ebx, 0x24(%rsp)
    000009b8: 	jl	.Ltmp3412 # Offset: 2488
    000009be: 	jmp	.Ltmp3413 # Offset: 2494
.Ltmp3385:
    000009c3: 	movl	$0x1, %eax
    000009c8: 	jmp	.Ltmp3414 # Offset: 2504
.Ltmp3392:
    000009cd: 	movq	%rbx, %rdi
    000009d0: 	leaq	0xa0(%rsp), %rsi
    000009d8: 	xorl	%edx, %edx
    000009da: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2522
    000009df: 	movq	%rax, (%rbx)
    000009e2: 	movq	%rax, %rdi
    000009e5: 	movq	0xa0(%rsp), %rax
    000009ed: 	movq	%rax, 0x10(%rbx)
.Ltmp3417:
    000009f1: 	movq	%r12, %rdx
    000009f4: 	movq	%rbp, %rsi
    000009f7: 	callq	memcpy@PLT # Offset: 2551
    000009fc: 	movq	0xa0(%rsp), %r12
    00000a04: 	movq	(%rbx), %rdi
    00000a07: 	jmp	.Ltmp3415 # Offset: 2567
.Ltmp3389:
    00000a0c: 	movq	0x98(%rsp), %rsi
    00000a14: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000a1b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 2587
    00000a20: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000a27: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000a2e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000a35: 	jne	.Ltmp3416 # Offset: 2613
.Ltmp3394:
    00000a3b: 	movq	-0x8(%rdx), %rax
    00000a3f: 	addq	$0x200, %rax
    00000a45: 	jmp	.Ltmp3416 # Offset: 2629
.Ltmp3393:
    00000a4a: 	testq	%r12, %r12
    00000a4d: 	je	.Ltmp3415 # Offset: 2637
    00000a53: 	jmp	.Ltmp3417 # Offset: 2643
    00000a55: 	nopl	(%rax) # Size: 3
.Ltmp3383:
    00000a58: 	xorl	%edx, %edx
    00000a5a: 	jmp	.Ltmp3418 # Offset: 2650
.Ltmp3391:
    00000a5f: 	leaq	DATAat0x38158(%rip), %rdi
    00000a66: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 2662
.Ltmp3395:
    00000a6b: 	callq	__stack_chk_fail@PLT # Offset: 2667
DWARF CFI Instructions:
    <empty>
End of Function "_Z15convolution2D_3IilEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15convolution2D_3IddEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 280
  State       : disassembled
  Address     : 0x27d50
  Size        : 0xb3b
  MaxSize     : 0xb40
  Offset      : 0x27d50
  Section     : .text
  Orc Section : .local.text._Z15convolution2D_3IddEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0279:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%edx, %ebx
    00000013: 	leal	-0x1(%rbx), %r14d
    00000017: 	subq	$0x98, %rsp
    0000001e: 	movq	%rsi, (%rsp)
    00000022: 	movl	%edx, 0x50(%rsp)
    00000026: 	movl	%ecx, 0x68(%rsp)
    0000002a: 	movl	%r8d, 0x10(%rsp)
    0000002f: 	movq	%r9, 0x78(%rsp)
    00000034: 	movq	%fs:0x28, %rax
    0000003d: 	movq	%rax, 0x88(%rsp)
    00000045: 	xorl	%eax, %eax
    00000047: 	callq	clock@PLT # Offset: 71
    0000004c: 	movq	(%rsp), %r11
    00000050: 	movq	%rax, start_time(%rip)
    00000057: 	movl	iterations(%rip), %eax
    0000005d: 	testl	%eax, %eax
    0000005f: 	movl	%eax, 0x6c(%rsp)
    00000063: 	jle	.Ltmp3419 # Offset: 99
    00000069: 	movl	0x68(%rsp), %eax
    0000006d: 	leal	-0x1(%rax), %ebx
    00000070: 	subl	$0x2, %eax
    00000073: 	cltq
    00000075: 	movl	%ebx, 0x14(%rsp)
    00000079: 	leaq	(%r15,%rax,8), %rax
    0000007d: 	movq	%rax, 0x40(%rsp)
    00000082: 	movslq	%ebx, %rax
    00000085: 	movq	%rax, 0x58(%rsp)
    0000008a: 	shlq	$0x3, %rax
    0000008e: 	movq	%rax, 0x60(%rsp)
    00000093: 	addq	%r15, %rax
    00000096: 	movq	%rax, 0x48(%rsp)
    0000009b: 	movl	0x50(%rsp), %eax
    0000009f: 	testl	%eax, %eax
    000000a1: 	jle	.Ltmp3419 # Offset: 161
    000000a7: 	movslq	0x10(%rsp), %rax
    000000ac: 	movl	$0x0, 0x54(%rsp)
    000000b4: 	pxor	%xmm2, %xmm2
    000000b8: 	movsd	DATAat0x38910(%rip), %xmm0
    000000c0: 	movsd	DATAat0x389b0(%rip), %xmm4
    000000c8: 	movq	%rax, %rbx
    000000cb: 	leaq	(,%rax,8), %rdi
    000000d3: 	movq	%rax, 0x30(%rsp)
    000000d8: 	movslq	0x68(%rsp), %rax
    000000dd: 	movq	%rdi, 0x18(%rsp)
    000000e2: 	movsd	DATAat0x389a0(%rip), %xmm3
    000000ea: 	leaq	(%r15,%rax,8), %rax
    000000ee: 	movq	%rax, 0x28(%rsp)
    000000f3: 	leaq	(%r15,%rdi), %rax
    000000f7: 	movq	%rax, 0x38(%rsp)
    000000fc: 	leal	(%rbx,%rbx), %eax
    000000ff: 	negl	%ebx
    00000101: 	movl	%eax, 0x70(%rsp)
    00000105: 	movl	%ebx, 0x74(%rsp)
    00000109: 	nopl	(%rax) # Size: 7
.Ltmp3429:
    00000110: 	testl	%r14d, %r14d
    00000113: 	jg	.Ltmp3420 # Offset: 275
    00000119: 	movl	$0x0, (%rsp)
.Ltmp3460:
    00000120: 	movslq	(%rsp), %rax
    00000124: 	movl	0x10(%rsp), %ecx
    00000128: 	movl	0x70(%rsp), %r13d
    0000012d: 	leal	-0x1(%rax), %ebx
    00000130: 	movq	%rax, %rdi
    00000133: 	movq	%rax, (%rsp)
    00000137: 	movl	0x68(%rsp), %eax
    0000013b: 	imull	%ecx, %ebx
    0000013e: 	leal	0x1(%rdi), %edx
    00000141: 	imull	%ecx, %edx
    00000144: 	leal	(%rax,%rbx), %r8d
    00000148: 	movl	%ecx, %eax
    0000014a: 	imull	%edi, %eax
    0000014d: 	movl	%edx, 0x8(%rsp)
    00000151: 	cltq
    00000153: 	leaq	(,%rax,8), %r10
    0000015b: 	addq	0x58(%rsp), %rax
    00000160: 	leaq	(,%rax,8), %r12
    00000168: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3428:
    00000170: 	movq	(%rsp), %rax
    00000174: 	movl	%eax, %edi
    00000176: 	testl	%eax, %eax
    00000178: 	je	.Ltmp3421 # Offset: 376
    0000017e: 	movslq	%ebx, %rax
    00000181: 	movsd	(%r15,%rax,8), %xmm5
    00000187: 	leal	0x1(%rbx), %eax
    0000018a: 	cltq
    0000018c: 	movapd	%xmm5, %xmm1
    00000190: 	mulsd	%xmm0, %xmm5
    00000194: 	addsd	%xmm2, %xmm1
    00000198: 	addsd	%xmm5, %xmm1
    0000019c: 	addsd	(%r15,%rax,8), %xmm1
.Ltmp3448:
    000001a2: 	movsd	(%r15,%r10), %xmm7
    000001a8: 	movapd	%xmm7, %xmm8
    000001ad: 	movapd	%xmm7, %xmm6
    000001b1: 	mulsd	%xmm0, %xmm8
    000001b6: 	mulsd	%xmm4, %xmm6
    000001ba: 	addsd	%xmm8, %xmm1
    000001bf: 	addsd	%xmm1, %xmm6
    000001c3: 	movsd	0x8(%r15,%r10), %xmm1
    000001ca: 	movapd	%xmm1, %xmm5
    000001ce: 	mulsd	%xmm0, %xmm5
    000001d2: 	addsd	%xmm5, %xmm6
    000001d6: 	cmpl	%edi, %r14d
    000001d9: 	jle	.Ltmp3422 # Offset: 473
    000001df: 	movslq	0x8(%rsp), %rax
    000001e4: 	movsd	(%r15,%rax,8), %xmm5
    000001ea: 	leal	0x1(%rax), %eax
    000001ed: 	cltq
    000001ef: 	addsd	%xmm5, %xmm6
    000001f3: 	mulsd	%xmm0, %xmm5
    000001f7: 	addsd	%xmm6, %xmm5
    000001fb: 	addsd	(%r15,%rax,8), %xmm5
.Ltmp3447:
    00000201: 	addsd	%xmm2, %xmm5
    00000205: 	cmpl	$0x1, 0x14(%rsp)
    0000020a: 	mulsd	%xmm3, %xmm5
    0000020e: 	movsd	%xmm5, (%r11,%r10)
    00000214: 	jle	.Ltmp3423 # Offset: 532
    0000021a: 	leal	-0x1(%rbx,%r13), %r9d
    0000021f: 	movq	%r15, %rcx
    00000222: 	leal	0x2(%rbx), %eax
    00000225: 	movq	%r10, %rdx
    00000228: 	leal	-0x2(%r13), %ebp
    0000022c: 	subl	%ebx, %r9d
    0000022f: 	nop # Size: 1
.Ltmp3426:
    00000230: 	testl	%edi, %edi
    00000232: 	je	.Ltmp3424 # Offset: 562
.Ltmp3444:
    00000238: 	leal	-0x2(%rax), %esi
    0000023b: 	movslq	%esi, %rsi
    0000023e: 	movsd	(%r15,%rsi,8), %xmm5
    00000244: 	leal	-0x1(%rax), %esi
    00000247: 	movslq	%esi, %rsi
    0000024a: 	movsd	(%r15,%rsi,8), %xmm1
    00000250: 	addsd	%xmm2, %xmm5
    00000254: 	movslq	%eax, %rsi
    00000257: 	mulsd	%xmm0, %xmm1
    0000025b: 	addsd	%xmm5, %xmm1
    0000025f: 	addsd	(%r15,%rsi,8), %xmm1
.Ltmp3445:
    00000265: 	movsd	(%r15,%rdx), %xmm8
    0000026b: 	movsd	0x10(%r15,%rdx), %xmm7
    00000272: 	movapd	%xmm8, %xmm5
    00000277: 	mulsd	%xmm0, %xmm5
    0000027b: 	addsd	%xmm5, %xmm1
    0000027f: 	movsd	0x8(%r15,%rdx), %xmm5
    00000286: 	movapd	%xmm5, %xmm6
    0000028a: 	mulsd	%xmm4, %xmm6
    0000028e: 	addsd	%xmm1, %xmm6
    00000292: 	movapd	%xmm7, %xmm1
    00000296: 	mulsd	%xmm0, %xmm1
    0000029a: 	addsd	%xmm6, %xmm1
    0000029e: 	cmpl	%edi, %r14d
    000002a1: 	jle	.Ltmp3425 # Offset: 673
    000002a7: 	leal	(%rbp,%rax), %esi
    000002ab: 	addq	$0x8, %rcx
    000002af: 	movslq	%esi, %rsi
    000002b2: 	movsd	(%r15,%rsi,8), %xmm5
    000002b8: 	leal	(%r9,%rax), %esi
    000002bc: 	movslq	%esi, %rsi
    000002bf: 	addsd	%xmm1, %xmm5
    000002c3: 	movsd	(%r15,%rsi,8), %xmm1
    000002c9: 	leal	(%rax,%r13), %esi
    000002cd: 	addl	$0x1, %eax
    000002d0: 	movslq	%esi, %rsi
    000002d3: 	mulsd	%xmm0, %xmm1
    000002d7: 	addsd	%xmm5, %xmm1
    000002db: 	addsd	(%r15,%rsi,8), %xmm1
    000002e1: 	addsd	%xmm2, %xmm1
    000002e5: 	mulsd	%xmm3, %xmm1
    000002e9: 	movsd	%xmm1, 0x8(%r11,%rdx)
    000002f0: 	addq	$0x8, %rdx
    000002f4: 	cmpl	%r8d, %eax
    000002f7: 	jne	.Ltmp3426 # Offset: 759
.Ltmp3423:
    000002fd: 	testl	%edi, %edi
    000002ff: 	je	.Ltmp3427 # Offset: 767
    00000305: 	leal	-0x2(%r8), %eax
    00000309: 	cltq
    0000030b: 	movsd	(%r15,%rax,8), %xmm6
    00000311: 	leal	-0x1(%r8), %eax
    00000315: 	cltq
    00000317: 	movsd	(%r15,%rax,8), %xmm5
    0000031d: 	addsd	%xmm2, %xmm6
    00000321: 	movapd	%xmm5, %xmm1
    00000325: 	mulsd	%xmm0, %xmm1
    00000329: 	addsd	%xmm6, %xmm1
    0000032d: 	addsd	%xmm5, %xmm1
.Ltmp3446:
    00000331: 	movq	0x28(%rsp), %rax
    00000336: 	movl	0x10(%rsp), %ecx
    0000033a: 	movq	0x18(%rsp), %rdx
    0000033f: 	addq	$0x1, (%rsp)
    00000344: 	movsd	-0x10(%rax,%r10), %xmm7
    0000034b: 	addl	%ecx, 0x8(%rsp)
    0000034f: 	addl	%ecx, %r8d
    00000352: 	addl	%ecx, %ebx
    00000354: 	movq	(%rsp), %rax
    00000358: 	addq	%rdx, %r10
    0000035b: 	movapd	%xmm7, %xmm6
    0000035f: 	mulsd	%xmm0, %xmm6
    00000363: 	addsd	%xmm1, %xmm6
    00000367: 	movsd	(%r15,%r12), %xmm1
    0000036d: 	movapd	%xmm1, %xmm5
    00000371: 	mulsd	%xmm4, %xmm5
    00000375: 	addsd	%xmm6, %xmm5
    00000379: 	movapd	%xmm1, %xmm6
    0000037d: 	mulsd	%xmm0, %xmm6
    00000381: 	addsd	%xmm6, %xmm5
    00000385: 	addsd	%xmm7, %xmm5
    00000389: 	addsd	%xmm5, %xmm6
    0000038d: 	addsd	%xmm6, %xmm1
    00000391: 	addsd	%xmm2, %xmm1
    00000395: 	mulsd	%xmm3, %xmm1
    00000399: 	movsd	%xmm1, (%r11,%r12)
    0000039f: 	addq	%rdx, %r12
    000003a2: 	cmpl	%eax, 0x50(%rsp)
    000003a6: 	jg	.Ltmp3428 # Offset: 934
    000003ac: 	addl	$0x1, 0x54(%rsp)
    000003b1: 	movl	0x54(%rsp), %eax
    000003b5: 	cmpl	0x6c(%rsp), %eax
    000003b9: 	jne	.Ltmp3429 # Offset: 953
.Ltmp3461:
    000003bf: 	movl	0x50(%rsp), %edi
    000003c3: 	movl	0x68(%rsp), %ebx
    000003c7: 	pxor	%xmm3, %xmm3
    000003cb: 	movl	%edi, %eax
    000003cd: 	leal	-0x2(%rdi,%rbx), %edx
    000003d1: 	imull	%ebx, %eax
    000003d4: 	addl	%edx, %edx
    000003d6: 	subl	%edx, %eax
    000003d8: 	cvtsi2sd	%eax, %xmm3
    000003dc: 	mulsd	init_value(%rip), %xmm3
    000003e4: 	cmpl	$0x1, %r14d
    000003e8: 	jle	.Ltmp3430 # Offset: 1000
    000003ee: 	leal	-0x2(%rbx), %edi
    000003f1: 	movl	0x10(%rsp), %ebp
    000003f5: 	movapd	%xmm2, %xmm0
    000003f9: 	movl	$0x1, %ecx
    000003fe: 	movl	%edi, %eax
    00000400: 	movl	%edi, %r8d
    00000403: 	movl	%edi, %r9d
    00000406: 	shrl	%eax
    00000408: 	andl	$-0x2, %r8d
    0000040c: 	orl	$0x1, %r9d
    00000410: 	movl	%ebp, %edx
    00000412: 	leal	-0x1(%rax), %esi
    00000415: 	addq	$0x1, %rsi
    00000419: 	shlq	$0x4, %rsi
    0000041d: 	nopl	(%rax) # Size: 3
.Ltmp3434:
    00000420: 	cmpl	$0x2, %ebx
    00000423: 	jle	.Ltmp3431 # Offset: 1059
    00000425: 	cmpl	$0x3, %ebx
    00000428: 	je	.Ltmp3432 # Offset: 1064
    0000042e: 	movslq	%edx, %rax
    00000431: 	leaq	0x8(%r11,%rax,8), %rax
    00000436: 	leaq	(%rsi,%rax), %r10
    0000043a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3433:
    00000440: 	movsd	(%rax), %xmm1
    00000444: 	addq	$0x10, %rax
    00000448: 	addsd	%xmm1, %xmm0
    0000044c: 	movsd	-0x8(%rax), %xmm1
    00000451: 	addsd	%xmm1, %xmm0
    00000455: 	cmpq	%rax, %r10
    00000458: 	jne	.Ltmp3433 # Offset: 1112
    0000045a: 	movl	%r9d, %eax
    0000045d: 	cmpl	%edi, %r8d
    00000460: 	je	.Ltmp3431 # Offset: 1120
.Ltmp3462:
    00000462: 	addl	%edx, %eax
    00000464: 	cltq
    00000466: 	addsd	(%r11,%rax,8), %xmm0
.Ltmp3431:
    0000046c: 	addl	$0x1, %ecx
    0000046f: 	addl	%ebp, %edx
    00000471: 	cmpl	%r14d, %ecx
    00000474: 	jne	.Ltmp3434 # Offset: 1140
    00000476: 	movq	DATAat0x38920(%rip), %xmm1
    0000047e: 	movapd	%xmm0, %xmm2
    00000482: 	subsd	%xmm3, %xmm2
    00000486: 	movapd	%xmm0, %xmm3
    0000048a: 	andpd	%xmm1, %xmm3
    0000048e: 	comisd	DATAat0x38a60(%rip), %xmm3
    00000496: 	jbe	.Ltmp3435 # Offset: 1174
    00000498: 	divsd	%xmm0, %xmm2
.Ltmp3435:
    0000049c: 	movsd	DATAat0x38a68(%rip), %xmm0
    000004a4: 	andpd	%xmm1, %xmm2
    000004a8: 	comisd	%xmm2, %xmm0
    000004ac: 	jbe	.Ltmp3436 # Offset: 1196
.Ltmp3464:
    000004b2: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000004b9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000004c0: 	subq	$0x20, %rax
    000004c4: 	cmpq	%rax, %rbx
    000004c7: 	je	.Ltmp3437 # Offset: 1223
    000004cd: 	movq	0x78(%rsp), %rax
    000004d2: 	leaq	0x10(%rbx), %rdi
    000004d6: 	movq	%rdi, (%rbx)
    000004d9: 	movq	(%rax), %rbp
    000004dc: 	movq	0x8(%rax), %r12
    000004e0: 	movq	%rbp, %rax
    000004e3: 	addq	%r12, %rax
    000004e6: 	je	.Ltmp3438 # Offset: 1254
    000004e8: 	testq	%rbp, %rbp
    000004eb: 	je	.Ltmp3439 # Offset: 1259
.Ltmp3438:
    000004f1: 	movq	%r12, 0x80(%rsp)
    000004f9: 	cmpq	$0xf, %r12
    000004fd: 	ja	.Ltmp3440 # Offset: 1277
    00000503: 	cmpq	$0x1, %r12
    00000507: 	jne	.Ltmp3441 # Offset: 1287
    0000050d: 	movzbl	(%rbp), %eax
    00000511: 	movb	%al, 0x10(%rbx)
.Ltmp3463:
    00000514: 	movq	%r12, 0x8(%rbx)
    00000518: 	movb	$0x0, (%rdi,%r12)
    0000051d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000524: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000052b: 	addq	$0x20, %rax
    0000052f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000536: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000053d: 	je	.Ltmp3442 # Offset: 1341
.Ltmp3465:
    00000543: 	movq	-0x20(%rax), %rbp
    00000547: 	callq	clock@PLT # Offset: 1351
    0000054c: 	movq	%rax, end_time(%rip)
    00000553: 	movq	0x88(%rsp), %rdx
    0000055b: 	subq	%fs:0x28, %rdx
    00000564: 	jne	.Ltmp3443 # Offset: 1380
    0000056a: 	subq	start_time(%rip), %rax
    00000571: 	pxor	%xmm0, %xmm0
    00000575: 	movq	%rbp, %rdi
    00000578: 	cvtsi2sd	%rax, %xmm0
    0000057d: 	divsd	DATAat0x38a48(%rip), %xmm0
    00000585: 	addq	$0x98, %rsp
    0000058c: 	popq	%rbx
    0000058d: 	popq	%rbp
    0000058e: 	popq	%r12
    00000590: 	popq	%r13
    00000592: 	popq	%r14
    00000594: 	popq	%r15
    00000596: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1430
    0000059b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3425:
    000005a0: 	mulsd	%xmm0, %xmm5
    000005a4: 	addsd	%xmm8, %xmm1
    000005a9: 	addl	$0x1, %eax
    000005ac: 	addq	$0x8, %rcx
    000005b0: 	addsd	%xmm1, %xmm5
    000005b4: 	addsd	%xmm7, %xmm5
    000005b8: 	addsd	%xmm2, %xmm5
    000005bc: 	mulsd	%xmm3, %xmm5
    000005c0: 	movsd	%xmm5, 0x8(%r11,%rdx)
    000005c7: 	addq	$0x8, %rdx
    000005cb: 	cmpl	%eax, %r8d
    000005ce: 	je	.Ltmp3423 # Offset: 1486
    000005d4: 	testl	%edi, %edi
    000005d6: 	jne	.Ltmp3444 # Offset: 1494
.Ltmp3424:
    000005dc: 	movsd	0x8(%rcx), %xmm1
    000005e1: 	movsd	(%rcx), %xmm5
    000005e5: 	mulsd	%xmm0, %xmm1
    000005e9: 	addsd	%xmm2, %xmm5
    000005ed: 	addsd	%xmm5, %xmm1
    000005f1: 	addsd	0x10(%rcx), %xmm1
    000005f6: 	jmp	.Ltmp3445 # Offset: 1526
    000005fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3427:
    00000600: 	movq	0x40(%rsp), %rax
    00000605: 	movsd	(%rax), %xmm6
    00000609: 	movq	0x48(%rsp), %rax
    0000060e: 	movsd	(%rax), %xmm5
    00000612: 	addsd	%xmm2, %xmm6
    00000616: 	movapd	%xmm5, %xmm1
    0000061a: 	mulsd	%xmm0, %xmm1
    0000061e: 	addsd	%xmm6, %xmm1
    00000622: 	addsd	%xmm5, %xmm1
    00000626: 	jmp	.Ltmp3446 # Offset: 1574
    0000062b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3422:
    00000630: 	addsd	%xmm7, %xmm6
    00000634: 	movapd	%xmm6, %xmm5
    00000638: 	addsd	%xmm8, %xmm5
    0000063d: 	addsd	%xmm1, %xmm5
    00000641: 	jmp	.Ltmp3447 # Offset: 1601
    00000646: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3421:
    00000650: 	movsd	(%r15), %xmm5
    00000655: 	movapd	%xmm5, %xmm1
    00000659: 	mulsd	%xmm0, %xmm5
    0000065d: 	addsd	%xmm2, %xmm1
    00000661: 	addsd	%xmm5, %xmm1
    00000665: 	addsd	0x8(%r15), %xmm1
    0000066b: 	jmp	.Ltmp3448 # Offset: 1643
.Ltmp3420:
    00000670: 	movl	0x68(%rsp), %r8d
    00000675: 	movl	0x10(%rsp), %r13d
    0000067a: 	xorl	%edi, %edi
    0000067c: 	xorl	%r12d, %r12d
    0000067f: 	movq	0x28(%rsp), %rax
    00000684: 	movl	0x74(%rsp), %esi
    00000688: 	movq	0x60(%rsp), %rbp
    0000068d: 	subl	%r13d, %r8d
    00000690: 	movq	%rax, 0x8(%rsp)
    00000695: 	testl	%edi, %edi
    00000697: 	je	.Ltmp3449 # Offset: 1687
    0000069d: 	nopl	(%rax) # Size: 3
.Ltmp3456:
    000006a0: 	movslq	%esi, %rax
    000006a3: 	movsd	(%r15,%rax,8), %xmm1
    000006a9: 	leal	0x1(%rsi), %eax
    000006ac: 	cltq
    000006ae: 	movapd	%xmm1, %xmm5
    000006b2: 	mulsd	%xmm0, %xmm1
    000006b6: 	addsd	%xmm2, %xmm5
    000006ba: 	addsd	%xmm5, %xmm1
    000006be: 	movsd	(%r15,%r12), %xmm5
    000006c4: 	addsd	(%r15,%rax,8), %xmm1
    000006ca: 	movl	0x10(%rsp), %eax
    000006ce: 	movapd	%xmm5, %xmm8
    000006d3: 	movapd	%xmm5, %xmm7
    000006d7: 	mulsd	%xmm0, %xmm8
    000006dc: 	addl	%esi, %eax
    000006de: 	mulsd	%xmm4, %xmm7
    000006e2: 	movl	%eax, 0x24(%rsp)
    000006e6: 	leal	0x1(%rdi), %eax
    000006e9: 	movl	%eax, 0x20(%rsp)
    000006ed: 	movl	%eax, (%rsp)
    000006f0: 	addsd	%xmm8, %xmm1
    000006f5: 	addsd	%xmm1, %xmm7
    000006f9: 	movsd	0x8(%r15,%r12), %xmm1
    00000700: 	movapd	%xmm1, %xmm6
    00000704: 	mulsd	%xmm0, %xmm6
    00000708: 	addsd	%xmm7, %xmm6
    0000070c: 	cmpl	%edi, %r14d
    0000070f: 	jg	.Ltmp3450 # Offset: 1807
    00000715: 	addsd	%xmm6, %xmm5
    00000719: 	addsd	%xmm5, %xmm8
    0000071e: 	addsd	%xmm8, %xmm1
.Ltmp3457:
    00000723: 	addsd	%xmm2, %xmm1
    00000727: 	cmpl	$0x1, 0x14(%rsp)
    0000072c: 	leal	0x2(%rsi), %eax
    0000072f: 	movq	%r15, %rcx
    00000732: 	movq	%r12, %rdx
    00000735: 	mulsd	%xmm3, %xmm1
    00000739: 	movsd	%xmm1, (%r11,%r12)
    0000073f: 	jle	.Ltmp3451 # Offset: 1855
    00000745: 	leal	-0x2(%r13), %r10d
    00000749: 	leal	-0x1(%r13), %r9d
    0000074d: 	movl	%r13d, %ebx
    00000750: 	subl	%esi, %r10d
    00000753: 	subl	%esi, %r9d
    00000756: 	subl	%esi, %ebx
    00000758: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3454:
    00000760: 	testl	%edi, %edi
    00000762: 	je	.Ltmp3452 # Offset: 1890
    00000768: 	leal	-0x2(%rax), %esi
    0000076b: 	movsd	(%r15,%rdx), %xmm8
    00000771: 	movsd	0x8(%r15,%rdx), %xmm6
    00000778: 	movslq	%esi, %rsi
    0000077b: 	movsd	(%r15,%rsi,8), %xmm5
    00000781: 	leal	-0x1(%rax), %esi
    00000784: 	movapd	%xmm6, %xmm7
    00000788: 	mulsd	%xmm4, %xmm7
    0000078c: 	movslq	%esi, %rsi
    0000078f: 	movsd	(%r15,%rsi,8), %xmm1
    00000795: 	addsd	%xmm2, %xmm5
    00000799: 	movslq	%eax, %rsi
    0000079c: 	mulsd	%xmm0, %xmm1
    000007a0: 	addsd	%xmm5, %xmm1
    000007a4: 	movapd	%xmm8, %xmm5
    000007a9: 	addsd	(%r15,%rsi,8), %xmm1
    000007af: 	mulsd	%xmm0, %xmm5
    000007b3: 	addsd	%xmm5, %xmm1
    000007b7: 	movsd	0x10(%r15,%rdx), %xmm5
    000007be: 	addsd	%xmm1, %xmm7
    000007c2: 	movapd	%xmm5, %xmm1
    000007c6: 	mulsd	%xmm0, %xmm1
    000007ca: 	addsd	%xmm7, %xmm1
    000007ce: 	cmpl	%edi, %r14d
    000007d1: 	jg	.Ltmp3453 # Offset: 2001
    000007d7: 	mulsd	%xmm0, %xmm6
    000007db: 	addsd	%xmm1, %xmm8
    000007e0: 	addl	$0x1, %eax
    000007e3: 	addq	$0x8, %rcx
    000007e7: 	addsd	%xmm8, %xmm6
    000007ec: 	addsd	%xmm6, %xmm5
    000007f0: 	addsd	%xmm2, %xmm5
    000007f4: 	mulsd	%xmm3, %xmm5
    000007f8: 	movsd	%xmm5, 0x8(%r11,%rdx)
    000007ff: 	addq	$0x8, %rdx
    00000803: 	cmpl	%r8d, %eax
    00000806: 	jne	.Ltmp3454 # Offset: 2054
.Ltmp3458:
    0000080c: 	leal	-0x2(%r8), %eax
    00000810: 	cltq
    00000812: 	movsd	(%r15,%rax,8), %xmm6
    00000818: 	leal	-0x1(%r8), %eax
    0000081c: 	cltq
    0000081e: 	movsd	(%r15,%rax,8), %xmm1
    00000824: 	addsd	%xmm2, %xmm6
    00000828: 	movapd	%xmm1, %xmm5
    0000082c: 	mulsd	%xmm0, %xmm5
    00000830: 	addsd	%xmm6, %xmm5
    00000834: 	addsd	%xmm5, %xmm1
.Ltmp3459:
    00000838: 	movq	0x8(%rsp), %rax
    0000083d: 	movq	0x30(%rsp), %rbx
    00000842: 	movsd	-0x10(%rax), %xmm6
    00000847: 	mulsd	%xmm0, %xmm6
    0000084b: 	addsd	%xmm1, %xmm6
    0000084f: 	movsd	(%r15,%rbp), %xmm1
    00000855: 	movapd	%xmm1, %xmm5
    00000859: 	mulsd	%xmm4, %xmm5
    0000085d: 	mulsd	%xmm0, %xmm1
    00000861: 	addsd	%xmm6, %xmm5
    00000865: 	addsd	%xmm1, %xmm5
    00000869: 	addsd	-0x10(%rax,%rbx,8), %xmm5
    0000086f: 	movq	0x38(%rsp), %rbx
    00000874: 	movsd	(%rbx,%rbp), %xmm1
    00000879: 	movq	0x18(%rsp), %rbx
    0000087e: 	movapd	%xmm1, %xmm6
    00000882: 	addq	%rbx, %rax
    00000885: 	addq	%rbx, %r12
    00000888: 	mulsd	%xmm0, %xmm6
    0000088c: 	movq	%rax, 0x8(%rsp)
    00000891: 	movl	0x10(%rsp), %eax
    00000895: 	addl	%eax, %r8d
    00000898: 	addl	%eax, %r13d
    0000089b: 	addsd	%xmm6, %xmm5
    0000089f: 	addsd	%xmm5, %xmm1
    000008a3: 	addsd	%xmm2, %xmm1
    000008a7: 	mulsd	%xmm3, %xmm1
    000008ab: 	movsd	%xmm1, (%r11,%rbp)
    000008b1: 	addq	%rbx, %rbp
    000008b4: 	cmpl	%r14d, (%rsp)
    000008b8: 	jge	.Ltmp3455 # Offset: 2232
    000008be: 	movl	0x20(%rsp), %edi
    000008c2: 	movl	0x24(%rsp), %esi
    000008c6: 	testl	%edi, %edi
    000008c8: 	jne	.Ltmp3456 # Offset: 2248
.Ltmp3449:
    000008ce: 	movsd	(%r15), %xmm1
    000008d3: 	movl	0x10(%rsp), %eax
    000008d7: 	movl	$0x1, 0x20(%rsp)
    000008df: 	movl	$0x1, (%rsp)
    000008e6: 	movapd	%xmm1, %xmm5
    000008ea: 	addl	%esi, %eax
    000008ec: 	mulsd	%xmm0, %xmm1
    000008f0: 	addsd	%xmm2, %xmm5
    000008f4: 	movl	%eax, 0x24(%rsp)
    000008f8: 	addsd	%xmm5, %xmm1
    000008fc: 	movsd	(%r15,%r12), %xmm5
    00000902: 	addsd	0x8(%r15), %xmm1
    00000908: 	movapd	%xmm5, %xmm6
    0000090c: 	mulsd	%xmm0, %xmm6
    00000910: 	mulsd	%xmm4, %xmm5
    00000914: 	addsd	%xmm6, %xmm1
    00000918: 	movsd	0x8(%r15,%r12), %xmm6
    0000091f: 	mulsd	%xmm0, %xmm6
    00000923: 	addsd	%xmm1, %xmm5
    00000927: 	addsd	%xmm5, %xmm6
.Ltmp3450:
    0000092b: 	movslq	%r13d, %rax
    0000092e: 	movsd	(%r15,%rax,8), %xmm5
    00000934: 	leal	0x1(%r13), %eax
    00000938: 	cltq
    0000093a: 	addsd	%xmm5, %xmm6
    0000093e: 	mulsd	%xmm0, %xmm5
    00000942: 	addsd	%xmm6, %xmm5
    00000946: 	movapd	%xmm5, %xmm1
    0000094a: 	addsd	(%r15,%rax,8), %xmm1
    00000950: 	jmp	.Ltmp3457 # Offset: 2384
    00000955: 	nopl	(%rax) # Size: 3
.Ltmp3452:
    00000958: 	movsd	0x8(%rcx), %xmm1
    0000095d: 	movsd	(%rcx), %xmm5
    00000961: 	mulsd	%xmm0, %xmm1
    00000965: 	addsd	%xmm2, %xmm5
    00000969: 	addsd	%xmm5, %xmm1
    0000096d: 	movsd	(%r15,%rdx), %xmm5
    00000973: 	addsd	0x10(%rcx), %xmm1
    00000978: 	mulsd	%xmm0, %xmm5
    0000097c: 	addsd	%xmm5, %xmm1
    00000980: 	movsd	0x8(%r15,%rdx), %xmm5
    00000987: 	mulsd	%xmm4, %xmm5
    0000098b: 	addsd	%xmm1, %xmm5
    0000098f: 	movsd	0x10(%r15,%rdx), %xmm1
    00000996: 	mulsd	%xmm0, %xmm1
    0000099a: 	addsd	%xmm5, %xmm1
.Ltmp3453:
    0000099e: 	leal	(%r10,%rax), %esi
    000009a2: 	addq	$0x8, %rcx
    000009a6: 	movslq	%esi, %rsi
    000009a9: 	movsd	(%r15,%rsi,8), %xmm5
    000009af: 	leal	(%r9,%rax), %esi
    000009b3: 	movslq	%esi, %rsi
    000009b6: 	addsd	%xmm1, %xmm5
    000009ba: 	movsd	(%r15,%rsi,8), %xmm1
    000009c0: 	leal	(%rbx,%rax), %esi
    000009c3: 	addl	$0x1, %eax
    000009c6: 	movslq	%esi, %rsi
    000009c9: 	mulsd	%xmm0, %xmm1
    000009cd: 	addsd	%xmm5, %xmm1
    000009d1: 	addsd	(%r15,%rsi,8), %xmm1
    000009d7: 	addsd	%xmm2, %xmm1
    000009db: 	mulsd	%xmm3, %xmm1
    000009df: 	movsd	%xmm1, 0x8(%r11,%rdx)
    000009e6: 	addq	$0x8, %rdx
    000009ea: 	cmpl	%r8d, %eax
    000009ed: 	jne	.Ltmp3454 # Offset: 2541
.Ltmp3451:
    000009f3: 	testl	%edi, %edi
    000009f5: 	jne	.Ltmp3458 # Offset: 2549
    000009fb: 	movq	0x40(%rsp), %rax
    00000a00: 	movsd	(%rax), %xmm6
    00000a04: 	movq	0x48(%rsp), %rax
    00000a09: 	movsd	(%rax), %xmm1
    00000a0d: 	addsd	%xmm2, %xmm6
    00000a11: 	movapd	%xmm1, %xmm5
    00000a15: 	mulsd	%xmm0, %xmm5
    00000a19: 	addsd	%xmm6, %xmm5
    00000a1d: 	addsd	%xmm5, %xmm1
    00000a21: 	jmp	.Ltmp3459 # Offset: 2593
    00000a26: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3455:
    00000a30: 	movl	(%rsp), %ebx
    00000a33: 	cmpl	%ebx, 0x50(%rsp)
    00000a37: 	jg	.Ltmp3460 # Offset: 2615
    00000a3d: 	addl	$0x1, 0x54(%rsp)
    00000a42: 	movl	0x54(%rsp), %eax
    00000a46: 	cmpl	0x6c(%rsp), %eax
    00000a4a: 	jne	.Ltmp3429 # Offset: 2634
    00000a50: 	jmp	.Ltmp3461 # Offset: 2640
.Ltmp3432:
    00000a55: 	movl	$0x1, %eax
    00000a5a: 	jmp	.Ltmp3462 # Offset: 2650
.Ltmp3440:
    00000a5f: 	movq	%rbx, %rdi
    00000a62: 	leaq	0x80(%rsp), %rsi
    00000a6a: 	xorl	%edx, %edx
    00000a6c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2668
    00000a71: 	movq	%rax, (%rbx)
    00000a74: 	movq	%rax, %rdi
    00000a77: 	movq	0x80(%rsp), %rax
    00000a7f: 	movq	%rax, 0x10(%rbx)
.Ltmp3466:
    00000a83: 	movq	%r12, %rdx
    00000a86: 	movq	%rbp, %rsi
    00000a89: 	callq	memcpy@PLT # Offset: 2697
    00000a8e: 	movq	0x80(%rsp), %r12
    00000a96: 	movq	(%rbx), %rdi
    00000a99: 	jmp	.Ltmp3463 # Offset: 2713
.Ltmp3436:
    00000a9e: 	movq	0x78(%rsp), %rax
    00000aa3: 	leaq	DATAat0x381c8(%rip), %rsi
    00000aaa: 	movl	$0x1, %edi
    00000aaf: 	movq	(%rax), %rdx
    00000ab2: 	xorl	%eax, %eax
    00000ab4: 	callq	__printf_chk@PLT # Offset: 2740
    00000ab9: 	jmp	.Ltmp3464 # Offset: 2745
.Ltmp3437:
    00000abe: 	movq	0x78(%rsp), %rsi
    00000ac3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000aca: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 2762
    00000acf: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000ad6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000add: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000ae4: 	jne	.Ltmp3465 # Offset: 2788
.Ltmp3442:
    00000aea: 	movq	-0x8(%rdx), %rax
    00000aee: 	addq	$0x200, %rax
    00000af4: 	jmp	.Ltmp3465 # Offset: 2804
.Ltmp3441:
    00000af9: 	testq	%r12, %r12
    00000afc: 	je	.Ltmp3463 # Offset: 2812
    00000b02: 	jmp	.Ltmp3466 # Offset: 2818
    00000b07: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3419:
    00000b10: 	pxor	%xmm2, %xmm2
    00000b14: 	jmp	.Ltmp3461 # Offset: 2836
.Ltmp3430:
    00000b19: 	subsd	%xmm3, %xmm2
    00000b1d: 	movq	DATAat0x38920(%rip), %xmm1
    00000b25: 	jmp	.Ltmp3435 # Offset: 2853
.Ltmp3439:
    00000b2a: 	leaq	DATAat0x38158(%rip), %rdi
    00000b31: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 2865
.Ltmp3443:
    00000b36: 	callq	__stack_chk_fail@PLT # Offset: 2870
DWARF CFI Instructions:
    <empty>
End of Function "_Z15convolution2D_3IddEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15convolution2D_2IilEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 281
  State       : disassembled
  Address     : 0x28890
  Size        : 0xd5e
  MaxSize     : 0xd60
  Offset      : 0x28890
  Section     : .text
  Orc Section : .local.text._Z15convolution2D_2IilEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0280:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movl	%ecx, %ebp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	subq	$0xe8, %rsp
    0000001a: 	movl	%edx, 0xc8(%rsp)
    00000021: 	movq	%rsi, 0x50(%rsp)
    00000026: 	movl	%r8d, 0x60(%rsp)
    0000002b: 	movq	%r9, 0xc0(%rsp)
    00000033: 	movq	%fs:0x28, %rax
    0000003c: 	movq	%rax, 0xd8(%rsp)
    00000044: 	xorl	%eax, %eax
    00000046: 	callq	clock@PLT # Offset: 70
    0000004b: 	movl	iterations(%rip), %edx
    00000051: 	movq	%rax, start_time(%rip)
    00000058: 	testl	%edx, %edx
    0000005a: 	jle	.Ltmp3467 # Offset: 90
    00000060: 	movslq	0x60(%rsp), %rax
    00000065: 	leal	-0x1(%rbp), %r12d
    00000069: 	movl	%ebp, 0x4(%rsp)
    0000006d: 	movq	%rbx, %r13
    00000070: 	movl	$0x0, 0x8c(%rsp)
    0000007b: 	movl	%r12d, %r14d
    0000007e: 	leaq	(,%rax,4), %rcx
    00000086: 	movq	%rax, %rsi
    00000089: 	leaq	(%rbx,%rcx), %rax
    0000008d: 	movq	%rcx, 0x80(%rsp)
    00000095: 	movq	%rax, 0x90(%rsp)
    0000009d: 	movl	0xc8(%rsp), %eax
    000000a4: 	leal	-0x1(%rax), %edi
    000000a7: 	movl	%edi, 0x88(%rsp)
    000000ae: 	leal	-0x2(%rax), %edi
    000000b1: 	movl	%edi, 0xcc(%rsp)
    000000b8: 	imull	%esi, %edi
    000000bb: 	movslq	%edi, %rax
    000000be: 	movl	%edi, 0xa4(%rsp)
    000000c5: 	leaq	(%rbx,%rax,4), %rax
    000000c9: 	movq	%rax, 0x78(%rsp)
    000000ce: 	movl	%edi, %eax
    000000d0: 	addl	%esi, %eax
    000000d2: 	movl	%eax, 0xa0(%rsp)
    000000d9: 	cltq
    000000db: 	shlq	$0x2, %rax
    000000df: 	leaq	(%rbx,%rax), %rdx
    000000e3: 	movq	%rdx, 0x98(%rsp)
    000000eb: 	leal	(%rsi,%rsi), %edx
    000000ee: 	movl	%edx, 0xac(%rsp)
    000000f5: 	movslq	%edx, %rdx
    000000f8: 	leaq	(%rbx,%rdx,4), %rdx
    000000fc: 	movq	%rdx, 0xb0(%rsp)
    00000104: 	movq	0x50(%rsp), %rdx
    00000109: 	addq	%rdx, %rax
    0000010c: 	movq	%rdx, %r11
    0000010f: 	movq	%rax, 0x58(%rsp)
    00000114: 	leal	0x1(%rdi), %eax
    00000117: 	addq	%rcx, %r11
    0000011a: 	cmpl	%r12d, %ebp
    0000011d: 	movl	%eax, 0xa8(%rsp)
    00000124: 	movl	%r12d, %eax
    00000127: 	cmovlel	%ebp, %eax
    0000012a: 	movq	%r11, 0xb8(%rsp)
    00000132: 	movl	%eax, 0x30(%rsp)
    00000136: 	leal	-0x1(%rsi), %eax
    00000139: 	movl	%eax, 0x74(%rsp)
    0000013d: 	nopl	(%rax) # Size: 3
.Ltmp3498:
    00000140: 	movl	0x4(%rsp), %eax
    00000144: 	testl	%eax, %eax
    00000146: 	jle	.Ltmp3468 # Offset: 326
    0000014c: 	testl	%r14d, %r14d
    0000014f: 	jle	.Ltmp3469 # Offset: 335
    00000155: 	movq	0x90(%rsp), %r8
    0000015d: 	xorl	%eax, %eax
    0000015f: 	nop # Size: 1
.Ltmp3473:
    00000160: 	movl	%eax, %r11d
    00000163: 	testq	%rax, %rax
    00000166: 	je	.Ltmp3470 # Offset: 358
    0000016c: 	movslq	(%r13,%rax,4), %rsi
    00000171: 	movslq	-0x4(%r13,%rax,4), %rdx
    00000176: 	movl	%eax, %edi
    00000178: 	leal	0x1(%rax), %ecx
    0000017b: 	leaq	(%rsi,%rsi,4), %r10
    0000017f: 	movq	%rdx, %r9
    00000182: 	addq	%r10, %rdx
    00000185: 	cmpl	%eax, %r14d
    00000188: 	jg	.Ltmp3471 # Offset: 392
    0000018e: 	addq	%rsi, %rdx
    00000191: 	leaq	(%r9,%r9,4), %r9
    00000195: 	addq	%r9, %rdx
    00000198: 	leaq	(%rdx,%rsi,8), %rdx
    0000019c: 	cmpl	%r11d, %r14d
    0000019f: 	jg	.Ltmp3472 # Offset: 415
.Ltmp3496:
    000001a5: 	addq	%r10, %rdx
.Ltmp3483:
    000001a8: 	addl	0x74(%rsp), %edi
    000001ac: 	movq	0x50(%rsp), %rbx
    000001b1: 	movslq	%edi, %rdi
    000001b4: 	movslq	(%r13,%rdi,4), %rsi
    000001b9: 	addq	%rsi, %rdx
    000001bc: 	movslq	(%r8,%rax,4), %rsi
    000001c0: 	leaq	(%rsi,%rsi,4), %rsi
    000001c4: 	addq	%rdx, %rsi
    000001c7: 	movslq	0x4(%r8,%rax,4), %rdx
    000001cc: 	addq	%rsi, %rdx
    000001cf: 	leaq	0x2f(%rdx), %rsi
    000001d3: 	addq	$0x10, %rdx
    000001d7: 	cmovsq	%rsi, %rdx
    000001db: 	sarq	$0x5, %rdx
    000001df: 	movl	%edx, (%rbx,%rax,4)
    000001e2: 	addq	$0x1, %rax
    000001e6: 	cmpl	%eax, 0x30(%rsp)
    000001ea: 	jg	.Ltmp3473 # Offset: 490
    000001f0: 	cmpl	%ecx, 0x4(%rsp)
    000001f4: 	jle	.Ltmp3474 # Offset: 500
.Ltmp3484:
    000001fa: 	movslq	%ecx, %rax
    000001fd: 	movq	0x90(%rsp), %r9
    00000205: 	subl	$0x1, %ecx
    00000208: 	jmp	.Ltmp3475 # Offset: 520
    0000020d: 	nopl	(%rax) # Size: 3
.Ltmp3480:
    00000210: 	movslq	%ecx, %rdx
    00000213: 	movslq	(%r13,%rdx,4), %r8
.Ltmp3481:
    00000218: 	movslq	(%r13,%rax,4), %rdi
    0000021d: 	leaq	(%rdi,%rdi,4), %rdx
    00000221: 	addq	%rdx, %r8
    00000224: 	leaq	(%r8,%rdi), %r10
    00000228: 	cmpl	%esi, %r14d
    0000022b: 	jle	.Ltmp3476 # Offset: 555
    0000022d: 	movslq	0x4(%r13,%rax,4), %r10
    00000232: 	addq	%r8, %r10
.Ltmp3476:
    00000235: 	leaq	(%r10,%rdx), %r8
    00000239: 	testl	%esi, %esi
    0000023b: 	je	.Ltmp3477 # Offset: 571
    0000023d: 	movslq	%ecx, %r8
    00000240: 	movslq	(%r13,%r8,4), %r8
    00000245: 	leaq	(%r8,%r8,4), %r8
    00000249: 	addq	%r10, %r8
.Ltmp3477:
    0000024c: 	leaq	(%r8,%rdi,8), %rdi
    00000250: 	addq	%rdi, %rdx
    00000253: 	cmpl	%esi, %r14d
    00000256: 	jle	.Ltmp3478 # Offset: 598
    00000258: 	movslq	0x4(%r13,%rax,4), %rdx
    0000025d: 	leaq	(%rdx,%rdx,4), %rdx
    00000261: 	addq	%rdi, %rdx
.Ltmp3478:
    00000264: 	testl	%esi, %esi
    00000266: 	je	.Ltmp3479 # Offset: 614
    0000026c: 	movl	0x74(%rsp), %ebx
    00000270: 	leal	(%rbx,%rax), %esi
    00000273: 	movslq	%esi, %rsi
    00000276: 	movslq	(%r13,%rsi,4), %rdi
    0000027b: 	movslq	(%r9,%rax,4), %rsi
    0000027f: 	addq	%rdx, %rdi
    00000282: 	leaq	(%rsi,%rsi,4), %rdx
    00000286: 	addq	%rdi, %rdx
.Ltmp3495:
    00000289: 	addq	%rsi, %rdx
    0000028c: 	movq	0x50(%rsp), %rbx
    00000291: 	leaq	0x2f(%rdx), %rsi
    00000295: 	addq	$0x10, %rdx
    00000299: 	cmovsq	%rsi, %rdx
    0000029d: 	addl	$0x1, %ecx
    000002a0: 	sarq	$0x5, %rdx
    000002a4: 	movl	%edx, (%rbx,%rax,4)
    000002a7: 	addq	$0x1, %rax
    000002ab: 	cmpl	%eax, 0x4(%rsp)
    000002af: 	jle	.Ltmp3474 # Offset: 687
.Ltmp3475:
    000002b5: 	movl	%eax, %esi
    000002b7: 	testl	%eax, %eax
    000002b9: 	jne	.Ltmp3480 # Offset: 697
    000002bf: 	movslq	(%r13), %r8
    000002c3: 	jmp	.Ltmp3481 # Offset: 707
    000002c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3470:
    000002d0: 	movslq	(%r13), %rsi
    000002d4: 	xorl	%edi, %edi
    000002d6: 	movl	$0x1, %ecx
    000002db: 	leaq	(%rsi,%rsi,4), %r10
    000002df: 	leaq	(%rsi,%r10), %rdx
.Ltmp3471:
    000002e3: 	movslq	0x4(%r13,%rax,4), %rbx
    000002e8: 	movq	%rbx, %r9
    000002eb: 	addq	%rbx, %rdx
    000002ee: 	testq	%rax, %rax
    000002f1: 	jne	.Ltmp3482 # Offset: 753
    000002f7: 	addq	%r10, %rdx
    000002fa: 	leaq	(%rdx,%rsi,8), %rdx
.Ltmp3497:
    000002fe: 	leaq	(%r9,%r9,4), %rsi
    00000302: 	addq	%rsi, %rdx
    00000305: 	testq	%rax, %rax
    00000308: 	jne	.Ltmp3483 # Offset: 776
    0000030e: 	movslq	(%r8), %rsi
    00000311: 	movq	0x50(%rsp), %rbx
    00000316: 	addq	%rsi, %rdx
    00000319: 	movslq	(%r8,%rax,4), %rsi
    0000031d: 	leaq	(%rsi,%rsi,4), %rsi
    00000321: 	addq	%rdx, %rsi
    00000324: 	movslq	0x4(%r8,%rax,4), %rdx
    00000329: 	addq	%rsi, %rdx
    0000032c: 	leaq	0x2f(%rdx), %rsi
    00000330: 	addq	$0x10, %rdx
    00000334: 	cmovsq	%rsi, %rdx
    00000338: 	sarq	$0x5, %rdx
    0000033c: 	cmpl	$0x1, 0x30(%rsp)
    00000341: 	movl	%edx, (%rbx,%rax,4)
    00000344: 	movl	$0x1, %eax
    00000349: 	jg	.Ltmp3473 # Offset: 841
    0000034f: 	cmpl	%ecx, 0x4(%rsp)
    00000353: 	jg	.Ltmp3484 # Offset: 851
    00000359: 	nopl	(%rax) # Size: 7
.Ltmp3474:
    00000360: 	cmpl	$0x1, 0x88(%rsp)
    00000368: 	jle	.Ltmp3485 # Offset: 872
    0000036e: 	movl	0x60(%rsp), %eax
    00000372: 	movl	$0x0, 0x44(%rsp)
    0000037a: 	movq	%r13, %r12
    0000037d: 	movl	$0x0, 0x34(%rsp)
    00000385: 	movq	0x90(%rsp), %r10
    0000038d: 	movl	%eax, 0x70(%rsp)
    00000391: 	movl	0xac(%rsp), %eax
    00000398: 	movl	$0x1, 0x64(%rsp)
    000003a0: 	movq	0xb8(%rsp), %r9
    000003a8: 	movl	%eax, 0x38(%rsp)
    000003ac: 	movq	0xb0(%rsp), %r8
    000003b4: 	movq	$0x0, 0x68(%rsp)
    000003bd: 	nopl	(%rax) # Size: 3
.Ltmp3516:
    000003c0: 	movq	0x68(%rsp), %rax
    000003c5: 	movl	0x60(%rsp), %ebx
    000003c9: 	addl	$0x1, 0x64(%rsp)
    000003ce: 	leaq	(%r13,%rax,4), %rax
    000003d3: 	movq	%rax, 0x8(%rsp)
    000003d8: 	movl	0x34(%rsp), %eax
    000003dc: 	movl	%eax, 0x4c(%rsp)
    000003e0: 	addl	%ebx, %eax
    000003e2: 	movl	%eax, 0x34(%rsp)
    000003e6: 	cltq
    000003e8: 	movq	%rax, 0x68(%rsp)
    000003ed: 	leaq	(%r13,%rax,4), %rax
    000003f2: 	movq	%rax, 0x10(%rsp)
    000003f7: 	movslq	0x38(%rsp), %rax
    000003fc: 	leaq	(%r13,%rax,4), %rax
    00000401: 	movq	%rax, 0x18(%rsp)
    00000406: 	movl	0x70(%rsp), %eax
    0000040a: 	movl	%eax, 0x48(%rsp)
    0000040e: 	addl	%ebx, %eax
    00000410: 	movl	%eax, 0x70(%rsp)
    00000414: 	testl	%r14d, %r14d
    00000417: 	jg	.Ltmp3486 # Offset: 1047
    0000041d: 	xorl	%eax, %eax
.Ltmp3515:
    0000041f: 	movl	0x4c(%rsp), %ebx
    00000423: 	movl	0x38(%rsp), %edi
    00000427: 	cltq
    00000429: 	subl	$0x1, %ebx
    0000042c: 	leal	-0x1(%rdi), %r11d
    00000430: 	movl	%ebx, 0x20(%rsp)
    00000434: 	movl	0x44(%rsp), %ebx
    00000438: 	leal	0x1(%rbx), %r15d
    0000043c: 	movl	0x34(%rsp), %ebx
    00000440: 	leal	-0x1(%rbx), %ebp
    00000443: 	movl	0x48(%rsp), %ebx
    00000447: 	addl	$0x1, %ebx
    0000044a: 	jmp	.Ltmp3487 # Offset: 1098
    0000044f: 	nop # Size: 1
.Ltmp3493:
    00000450: 	movl	0x20(%rsp), %edi
    00000454: 	leal	(%rdi,%rax), %edx
    00000457: 	movslq	%edx, %rdx
    0000045a: 	movslq	(%r13,%rdx,4), %rdi
.Ltmp3494:
    0000045f: 	movslq	(%r12,%rax,4), %rcx
    00000463: 	leaq	(%rcx,%rcx,4), %rdx
    00000467: 	addq	%rdi, %rdx
    0000046a: 	addq	%rdx, %rcx
    0000046d: 	cmpl	%esi, %r14d
    00000470: 	jle	.Ltmp3488 # Offset: 1136
    00000472: 	leal	(%r15,%rax), %ecx
    00000476: 	movslq	%ecx, %rcx
    00000479: 	movslq	(%r13,%rcx,4), %rcx
    0000047e: 	addq	%rdx, %rcx
.Ltmp3488:
    00000481: 	testl	%esi, %esi
    00000483: 	je	.Ltmp3489 # Offset: 1155
    00000489: 	leal	(%rbp,%rax), %edx
    0000048d: 	movslq	%edx, %rdx
    00000490: 	movslq	(%r13,%rdx,4), %rdx
    00000495: 	leaq	(%rdx,%rdx,4), %rdx
    00000499: 	addq	%rcx, %rdx
.Ltmp3514:
    0000049c: 	movslq	(%r10,%rax,4), %rcx
    000004a0: 	leaq	(%rdx,%rcx,8), %rdx
    000004a4: 	cmpl	%esi, %r14d
    000004a7: 	jle	.Ltmp3490 # Offset: 1191
    000004ad: 	leal	(%rbx,%rax), %ecx
    000004b0: 	movslq	%ecx, %rcx
    000004b3: 	movslq	(%r13,%rcx,4), %rcx
    000004b8: 	leaq	(%rcx,%rcx,4), %rcx
    000004bc: 	addq	%rcx, %rdx
.Ltmp3513:
    000004bf: 	testl	%esi, %esi
    000004c1: 	je	.Ltmp3491 # Offset: 1217
    000004c7: 	leal	(%r11,%rax), %ecx
    000004cb: 	movslq	%ecx, %rcx
    000004ce: 	movslq	(%r13,%rcx,4), %rsi
.Ltmp3512:
    000004d3: 	movslq	(%r8,%rax,4), %rcx
    000004d7: 	addq	%rdx, %rsi
    000004da: 	leaq	(%rcx,%rcx,4), %rdx
    000004de: 	addq	%rsi, %rdx
    000004e1: 	addq	%rcx, %rdx
    000004e4: 	leaq	0x2f(%rdx), %rcx
    000004e8: 	addq	$0x10, %rdx
    000004ec: 	cmovsq	%rcx, %rdx
    000004f0: 	sarq	$0x5, %rdx
    000004f4: 	movl	%edx, (%r9,%rax,4)
    000004f8: 	addq	$0x1, %rax
    000004fc: 	cmpl	%eax, 0x4(%rsp)
    00000500: 	jle	.Ltmp3492 # Offset: 1280
.Ltmp3487:
    00000506: 	movl	%eax, %esi
    00000508: 	testl	%eax, %eax
    0000050a: 	jne	.Ltmp3493 # Offset: 1290
    00000510: 	movq	0x8(%rsp), %rdi
    00000515: 	movslq	(%rdi), %rdi
    00000518: 	jmp	.Ltmp3494 # Offset: 1304
    0000051d: 	nopl	(%rax) # Size: 3
.Ltmp3479:
    00000520: 	movslq	(%r9), %rdi
    00000523: 	addq	%rdx, %rdi
    00000526: 	movslq	(%r9,%rax,4), %rdx
    0000052a: 	leaq	(%rdx,%rdx,4), %rsi
    0000052e: 	addq	%rdi, %rsi
    00000531: 	jmp	.Ltmp3495 # Offset: 1329
    00000536: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3482:
    00000540: 	movslq	-0x4(%r13,%rax,4), %r9
    00000545: 	leaq	(%r9,%r9,4), %r9
    00000549: 	addq	%r9, %rdx
    0000054c: 	leaq	(%rdx,%rsi,8), %rdx
    00000550: 	cmpl	%r11d, %r14d
    00000553: 	jle	.Ltmp3496 # Offset: 1363
.Ltmp3472:
    00000559: 	movslq	0x4(%r13,%rax,4), %r9
    0000055e: 	jmp	.Ltmp3497 # Offset: 1374
    00000563: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3468:
    00000568: 	addl	$0x1, 0x8c(%rsp)
    00000570: 	movl	0x8c(%rsp), %eax
    00000577: 	cmpl	%eax, iterations(%rip)
    0000057d: 	jg	.Ltmp3498 # Offset: 1405
    00000583: 	movl	0x4(%rsp), %ebp
.Ltmp3550:
    00000587: 	movl	0xcc(%rsp), %eax
    0000058e: 	addl	%ebp, %eax
    00000590: 	leal	(%rax,%rax), %r13d
    00000594: 	movl	0xc8(%rsp), %eax
    0000059b: 	cmpl	$0x2, %eax
    0000059e: 	jle	.Ltmp3499 # Offset: 1438
    000005a4: 	leal	-0x2(%rbp), %r10d
    000005a8: 	leal	-0x1(%rax), %r9d
    000005ac: 	movq	0x50(%rsp), %r12
    000005b1: 	xorl	%edx, %edx
    000005b3: 	movl	%r10d, %eax
    000005b6: 	movl	%r10d, %ebx
    000005b9: 	movl	%r13d, 0x4(%rsp)
    000005be: 	leal	-0x1(%rbp), %edi
    000005c1: 	shrl	$0x2, %eax
    000005c4: 	andl	$-0x4, %ebx
    000005c7: 	leal	-0x3(%rbp), %r11d
    000005cb: 	movl	$0x1, %esi
    000005d0: 	leal	-0x1(%rax), %r8d
    000005d4: 	movl	0x60(%rsp), %eax
    000005d8: 	leal	0x1(%rbx), %r14d
    000005dc: 	addq	$0x1, %r8
    000005e0: 	movl	%eax, %ecx
    000005e2: 	shlq	$0x4, %r8
    000005e6: 	movl	%eax, %r13d
    000005e9: 	nopl	(%rax) # Size: 7
.Ltmp3503:
    000005f0: 	cmpl	$0x1, %edi
    000005f3: 	jle	.Ltmp3500 # Offset: 1523
    000005f9: 	cmpl	$0x2, %r11d
    000005fd: 	jbe	.Ltmp3501 # Offset: 1533
    00000603: 	movslq	%ecx, %rax
    00000606: 	pxor	%xmm0, %xmm0
    0000060a: 	leaq	0x4(%r12,%rax,4), %rax
    0000060f: 	leaq	(%r8,%rax), %r15
    00000613: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3502:
    00000618: 	movdqu	(%rax), %xmm2
    0000061c: 	addq	$0x10, %rax
    00000620: 	paddd	%xmm2, %xmm0
    00000624: 	cmpq	%rax, %r15
    00000627: 	jne	.Ltmp3502 # Offset: 1575
    00000629: 	movdqa	%xmm0, %xmm1
    0000062d: 	psrldq	$0x8, %xmm1
    00000632: 	paddd	%xmm1, %xmm0
    00000636: 	movdqa	%xmm0, %xmm1
    0000063a: 	psrldq	$0x4, %xmm1
    0000063f: 	paddd	%xmm1, %xmm0
    00000643: 	movd	%xmm0, %eax
    00000647: 	addl	%eax, %edx
    00000649: 	movl	%r14d, %eax
    0000064c: 	cmpl	%ebx, %r10d
    0000064f: 	je	.Ltmp3500 # Offset: 1615
.Ltmp3545:
    00000651: 	leal	(%rcx,%rax), %r15d
    00000655: 	movslq	%r15d, %r15
    00000658: 	addl	(%r12,%r15,4), %edx
    0000065c: 	leal	0x1(%rax), %r15d
    00000660: 	cmpl	%edi, %r15d
    00000663: 	jge	.Ltmp3500 # Offset: 1635
    00000665: 	addl	%ecx, %r15d
    00000668: 	addl	$0x2, %eax
    0000066b: 	movslq	%r15d, %r15
    0000066e: 	addl	(%r12,%r15,4), %edx
    00000672: 	cmpl	%edi, %eax
    00000674: 	jge	.Ltmp3500 # Offset: 1652
    00000676: 	addl	%ecx, %eax
    00000678: 	cltq
    0000067a: 	addl	(%r12,%rax,4), %edx
.Ltmp3500:
    0000067e: 	addl	$0x1, %esi
    00000681: 	addl	%r13d, %ecx
    00000684: 	cmpl	%esi, %r9d
    00000687: 	jne	.Ltmp3503 # Offset: 1671
    0000068d: 	movl	0x4(%rsp), %r13d
.Ltmp3549:
    00000692: 	movl	0xc8(%rsp), %eax
    00000699: 	cvttsd2si	init_value(%rip), %ecx
    000006a1: 	imull	%ebp, %eax
    000006a4: 	subl	%r13d, %eax
    000006a7: 	imull	%ecx, %eax
    000006aa: 	cmpl	%edx, %eax
    000006ac: 	je	.Ltmp3504 # Offset: 1708
    000006ae: 	movq	0xc0(%rsp), %rax
    000006b6: 	leaq	DATAat0x381c8(%rip), %rsi
    000006bd: 	movl	$0x1, %edi
    000006c2: 	movq	(%rax), %rdx
    000006c5: 	xorl	%eax, %eax
    000006c7: 	callq	__printf_chk@PLT # Offset: 1735
.Ltmp3504:
    000006cc: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000006d3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000006da: 	subq	$0x20, %rax
    000006de: 	cmpq	%rax, %rbx
    000006e1: 	je	.Ltmp3505 # Offset: 1761
    000006e7: 	movq	0xc0(%rsp), %rax
    000006ef: 	leaq	0x10(%rbx), %rdi
    000006f3: 	movq	%rdi, (%rbx)
    000006f6: 	movq	(%rax), %rbp
    000006f9: 	movq	0x8(%rax), %r12
    000006fd: 	movq	%rbp, %rax
    00000700: 	addq	%r12, %rax
    00000703: 	je	.Ltmp3506 # Offset: 1795
    00000705: 	testq	%rbp, %rbp
    00000708: 	je	.Ltmp3507 # Offset: 1800
.Ltmp3506:
    0000070e: 	movq	%r12, 0xd0(%rsp)
    00000716: 	cmpq	$0xf, %r12
    0000071a: 	ja	.Ltmp3508 # Offset: 1818
    00000720: 	cmpq	$0x1, %r12
    00000724: 	jne	.Ltmp3509 # Offset: 1828
    0000072a: 	movzbl	(%rbp), %eax
    0000072e: 	movb	%al, 0x10(%rbx)
.Ltmp3546:
    00000731: 	movq	%r12, 0x8(%rbx)
    00000735: 	movb	$0x0, (%rdi,%r12)
    0000073a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000741: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000748: 	addq	$0x20, %rax
    0000074c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000753: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000075a: 	je	.Ltmp3510 # Offset: 1882
.Ltmp3547:
    00000760: 	movq	-0x20(%rax), %rbp
    00000764: 	callq	clock@PLT # Offset: 1892
    00000769: 	movq	%rax, end_time(%rip)
    00000770: 	movq	0xd8(%rsp), %rdx
    00000778: 	subq	%fs:0x28, %rdx
    00000781: 	jne	.Ltmp3511 # Offset: 1921
    00000787: 	subq	start_time(%rip), %rax
    0000078e: 	pxor	%xmm0, %xmm0
    00000792: 	movq	%rbp, %rdi
    00000795: 	cvtsi2sd	%rax, %xmm0
    0000079a: 	divsd	DATAat0x38a48(%rip), %xmm0
    000007a2: 	addq	$0xe8, %rsp
    000007a9: 	popq	%rbx
    000007aa: 	popq	%rbp
    000007ab: 	popq	%r12
    000007ad: 	popq	%r13
    000007af: 	popq	%r14
    000007b1: 	popq	%r15
    000007b3: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1971
    000007b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3491:
    000007c0: 	movq	0x18(%rsp), %rdi
    000007c5: 	movslq	(%rdi), %rsi
    000007c8: 	jmp	.Ltmp3512 # Offset: 1992
    000007cd: 	nopl	(%rax) # Size: 3
.Ltmp3490:
    000007d0: 	leaq	(%rcx,%rcx,4), %rcx
    000007d4: 	addq	%rcx, %rdx
    000007d7: 	jmp	.Ltmp3513 # Offset: 2007
    000007dc: 	nopl	(%rax) # Size: 4
.Ltmp3489:
    000007e0: 	movq	0x10(%rsp), %rdi
    000007e5: 	movslq	(%rdi), %rdx
    000007e8: 	leaq	(%rdx,%rdx,4), %rdx
    000007ec: 	addq	%rcx, %rdx
    000007ef: 	jmp	.Ltmp3514 # Offset: 2031
    000007f4: 	nopl	(%rax) # Size: 4
.Ltmp3532:
    000007f8: 	cmpl	%eax, 0x4(%rsp)
    000007fc: 	jg	.Ltmp3515 # Offset: 2044
    00000802: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3492:
    00000808: 	movq	0x80(%rsp), %rax
    00000810: 	movl	0x60(%rsp), %ebx
    00000814: 	addl	%ebx, 0x38(%rsp)
    00000818: 	addl	%ebx, 0x44(%rsp)
    0000081c: 	addq	%rax, %r8
    0000081f: 	movl	0x64(%rsp), %ebx
    00000823: 	addq	%rax, %r9
    00000826: 	addq	%rax, %r10
    00000829: 	addq	%rax, %r12
    0000082c: 	cmpl	%ebx, 0x88(%rsp)
    00000833: 	jne	.Ltmp3516 # Offset: 2099
.Ltmp3485:
    00000839: 	testl	%r14d, %r14d
    0000083c: 	jle	.Ltmp3517 # Offset: 2108
    00000842: 	movl	0xa0(%rsp), %eax
    00000849: 	movq	0x98(%rsp), %r9
    00000851: 	leal	-0x1(%rax), %r12d
    00000855: 	movl	0xa4(%rsp), %eax
    0000085c: 	movl	%r12d, %r8d
    0000085f: 	leal	-0x1(%rax), %edi
    00000862: 	xorl	%eax, %eax
    00000864: 	nopl	(%rax) # Size: 4
.Ltmp3521:
    00000868: 	movl	%eax, %r11d
    0000086b: 	testq	%rax, %rax
    0000086e: 	je	.Ltmp3518 # Offset: 2158
    00000874: 	movq	0x78(%rsp), %rbx
    00000879: 	movslq	%edi, %rdx
    0000087c: 	movslq	(%r13,%rdx,4), %rdx
    00000881: 	movslq	(%rbx,%rax,4), %rcx
    00000885: 	leaq	(%rcx,%rcx,4), %rsi
    00000889: 	addq	%rsi, %rdx
    0000088c: 	leal	0x1(%rax), %esi
    0000088f: 	cmpl	%eax, %r14d
    00000892: 	jg	.Ltmp3519 # Offset: 2194
    00000898: 	addq	%rcx, %rdx
.Ltmp3543:
    0000089b: 	movslq	%r8d, %rbx
    0000089e: 	movslq	(%r13,%rbx,4), %rcx
    000008a3: 	leaq	(%rcx,%rcx,4), %rcx
    000008a7: 	addq	%rdx, %rcx
    000008aa: 	movslq	(%r9,%rax,4), %rdx
    000008ae: 	leaq	(%rdx,%rdx,4), %r10
    000008b2: 	leaq	(%rcx,%rdx,8), %r15
    000008b6: 	movq	%r10, %rbp
    000008b9: 	leaq	(%r15,%r10), %rcx
    000008bd: 	cmpl	%r11d, %r14d
    000008c0: 	jg	.Ltmp3520 # Offset: 2240
.Ltmp3541:
    000008c6: 	movslq	(%r13,%rbx,4), %rdx
    000008cb: 	movq	0x58(%rsp), %rbx
    000008d0: 	addq	%rdx, %rcx
    000008d3: 	movslq	0x4(%r9,%rax,4), %rdx
    000008d8: 	addq	%r10, %rcx
    000008db: 	addq	%rcx, %rdx
    000008de: 	leaq	0x2f(%rdx), %rcx
    000008e2: 	addq	$0x10, %rdx
    000008e6: 	cmovsq	%rcx, %rdx
    000008ea: 	addl	$0x1, %r8d
    000008ee: 	addl	$0x1, %edi
    000008f1: 	sarq	$0x5, %rdx
    000008f5: 	movl	%edx, (%rbx,%rax,4)
    000008f8: 	addq	$0x1, %rax
    000008fc: 	cmpl	%eax, 0x30(%rsp)
    00000900: 	jg	.Ltmp3521 # Offset: 2304
.Ltmp3540:
    00000906: 	cmpl	%esi, 0x4(%rsp)
    0000090a: 	jle	.Ltmp3468 # Offset: 2314
.Ltmp3544:
    00000910: 	movslq	%esi, %rax
    00000913: 	leal	(%r12,%rsi), %edi
    00000917: 	movq	0x78(%rsp), %rcx
    0000091c: 	movq	0x98(%rsp), %r8
    00000924: 	addl	0xa8(%rsp), %esi
    0000092b: 	jmp	.Ltmp3522 # Offset: 2347
.Ltmp3527:
    00000930: 	leal	-0x2(%rsi), %edx
    00000933: 	movslq	%edx, %rdx
    00000936: 	movslq	(%r13,%rdx,4), %r11
.Ltmp3528:
    0000093b: 	movslq	(%rcx,%rax,4), %rdx
    0000093f: 	leaq	(%rdx,%rdx,4), %r10
    00000943: 	addq	%r11, %r10
    00000946: 	addq	%r10, %rdx
    00000949: 	cmpl	%r14d, %r9d
    0000094c: 	jge	.Ltmp3523 # Offset: 2380
    0000094e: 	movslq	%esi, %rdx
    00000951: 	movslq	(%r13,%rdx,4), %rdx
    00000956: 	addq	%r10, %rdx
.Ltmp3523:
    00000959: 	testl	%r9d, %r9d
    0000095c: 	je	.Ltmp3524 # Offset: 2396
    00000962: 	movslq	%edi, %r10
    00000965: 	movslq	(%r13,%r10,4), %r10
    0000096a: 	leaq	(%r10,%r10,4), %r10
    0000096e: 	addq	%r10, %rdx
.Ltmp3539:
    00000971: 	movslq	(%r8,%rax,4), %r10
    00000975: 	leaq	(%rdx,%r10,8), %rdx
    00000979: 	leaq	(%r10,%r10,4), %rbx
    0000097d: 	leaq	(%rbx,%rdx), %r11
    00000981: 	cmpl	%r14d, %r9d
    00000984: 	jge	.Ltmp3525 # Offset: 2436
    00000986: 	leal	0x2(%rdi), %r11d
    0000098a: 	movslq	%r11d, %r11
    0000098d: 	movslq	(%r13,%r11,4), %r11
    00000992: 	leaq	(%r11,%r11,4), %r11
    00000996: 	addq	%rdx, %r11
.Ltmp3525:
    00000999: 	testl	%r9d, %r9d
    0000099c: 	je	.Ltmp3526 # Offset: 2460
    000009a2: 	movslq	%edi, %rdx
    000009a5: 	movslq	(%r13,%rdx,4), %rdx
    000009aa: 	addq	%r11, %rdx
    000009ad: 	addq	%rbx, %rdx
    000009b0: 	addq	%r10, %rdx
    000009b3: 	leaq	0x2f(%rdx), %r9
    000009b7: 	addq	$0x10, %rdx
    000009bb: 	cmovsq	%r9, %rdx
.Ltmp3538:
    000009bf: 	movq	0x58(%rsp), %rbx
    000009c4: 	sarq	$0x5, %rdx
    000009c8: 	addl	$0x1, %edi
    000009cb: 	addl	$0x1, %esi
    000009ce: 	movl	%edx, (%rbx,%rax,4)
    000009d1: 	addq	$0x1, %rax
    000009d5: 	cmpl	%eax, 0x4(%rsp)
    000009d9: 	jle	.Ltmp3468 # Offset: 2521
.Ltmp3522:
    000009df: 	movl	%eax, %r9d
    000009e2: 	testl	%eax, %eax
    000009e4: 	jne	.Ltmp3527 # Offset: 2532
    000009ea: 	movslq	(%rcx), %r11
    000009ed: 	jmp	.Ltmp3528 # Offset: 2541
    000009f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3486:
    000009f8: 	movl	0x44(%rsp), %eax
    000009fc: 	xorl	%edx, %edx
    000009fe: 	addl	$0x1, %eax
    00000a01: 	movl	%eax, 0x3c(%rsp)
    00000a05: 	cltq
    00000a07: 	movq	%rax, 0x20(%rsp)
    00000a0c: 	movl	0x48(%rsp), %eax
    00000a10: 	addl	$0x1, %eax
    00000a13: 	movl	%eax, 0x40(%rsp)
    00000a17: 	cltq
    00000a19: 	movq	%rax, 0x28(%rsp)
    00000a1e: 	movl	0x4c(%rsp), %eax
    00000a22: 	leal	-0x1(%rax), %ebp
    00000a25: 	movl	0x34(%rsp), %eax
    00000a29: 	leal	-0x1(%rax), %ebx
    00000a2c: 	movl	0x38(%rsp), %eax
    00000a30: 	leal	-0x1(%rax), %r11d
    00000a34: 	jmp	.Ltmp3529 # Offset: 2612
    00000a39: 	nopl	(%rax) # Size: 7
.Ltmp3533:
    00000a40: 	leal	(%rbp,%rdx), %eax
    00000a44: 	movslq	(%r12,%rdx,4), %r15
    00000a48: 	movl	%edx, %ecx
    00000a4a: 	cltq
    00000a4c: 	movslq	(%r13,%rax,4), %rsi
    00000a51: 	leaq	(%r15,%r15,4), %rax
    00000a55: 	addq	%rax, %rsi
    00000a58: 	leal	0x1(%rdx), %eax
    00000a5b: 	cmpl	%edx, %r14d
    00000a5e: 	jg	.Ltmp3530 # Offset: 2654
    00000a64: 	addq	%r15, %rsi
.Ltmp3537:
    00000a67: 	leal	(%rbx,%rcx), %r15d
    00000a6b: 	movslq	%r15d, %r15
    00000a6e: 	movslq	(%r13,%r15,4), %r15
    00000a73: 	leaq	(%r15,%r15,4), %r15
    00000a77: 	addq	%r15, %rsi
    00000a7a: 	movslq	(%r10,%rdx,4), %r15
    00000a7e: 	leaq	(%rsi,%r15,8), %rsi
    00000a82: 	cmpl	%edi, %r14d
    00000a85: 	jg	.Ltmp3531 # Offset: 2693
    00000a8b: 	leaq	(%r15,%r15,4), %rdi
    00000a8f: 	addq	%rsi, %rdi
.Ltmp3535:
    00000a92: 	addl	%r11d, %ecx
    00000a95: 	movslq	%ecx, %rcx
    00000a98: 	movslq	(%r13,%rcx,4), %rcx
    00000a9d: 	addq	%rcx, %rdi
.Ltmp3534:
    00000aa0: 	movslq	(%r8,%rdx,4), %rcx
    00000aa4: 	movslq	0x4(%r8,%rdx,4), %rsi
    00000aa9: 	leaq	(%rcx,%rcx,4), %rcx
    00000aad: 	addq	%rdi, %rcx
    00000ab0: 	addq	%rsi, %rcx
    00000ab3: 	leaq	0x2f(%rcx), %rsi
    00000ab7: 	addq	$0x10, %rcx
    00000abb: 	cmovnsq	%rcx, %rsi
    00000abf: 	sarq	$0x5, %rsi
    00000ac3: 	movl	%esi, (%r9,%rdx,4)
    00000ac7: 	addq	$0x1, %rdx
    00000acb: 	cmpl	%edx, 0x30(%rsp)
    00000acf: 	jle	.Ltmp3532 # Offset: 2767
.Ltmp3529:
    00000ad5: 	movl	%edx, %edi
    00000ad7: 	testq	%rdx, %rdx
    00000ada: 	jne	.Ltmp3533 # Offset: 2778
    00000ae0: 	movslq	(%r12), %rax
    00000ae4: 	movq	0x20(%rsp), %rdi
    00000ae9: 	leaq	(%rax,%rax,4), %rcx
    00000aed: 	movq	0x8(%rsp), %rax
    00000af2: 	movslq	(%r13,%rdi,4), %rsi
    00000af7: 	movq	0x10(%rsp), %rdi
    00000afc: 	movslq	(%rax), %rax
    00000aff: 	addq	%rax, %rcx
    00000b02: 	movl	$0x1, %eax
    00000b07: 	addq	%rcx, %rsi
    00000b0a: 	movslq	(%rdi), %rcx
    00000b0d: 	movq	0x28(%rsp), %rdi
    00000b12: 	leaq	(%rcx,%rcx,4), %rcx
    00000b16: 	addq	%rsi, %rcx
    00000b19: 	movslq	(%r10), %rsi
    00000b1c: 	leaq	(%rcx,%rsi,8), %rsi
    00000b20: 	movslq	(%r13,%rdi,4), %rcx
    00000b25: 	leaq	(%rcx,%rcx,4), %rdi
    00000b29: 	addq	%rsi, %rdi
.Ltmp3536:
    00000b2c: 	movq	0x18(%rsp), %rsi
    00000b31: 	movslq	(%rsi), %rcx
    00000b34: 	addq	%rcx, %rdi
    00000b37: 	jmp	.Ltmp3534 # Offset: 2871
    00000b3c: 	nopl	(%rax) # Size: 4
.Ltmp3531:
    00000b40: 	movl	0x40(%rsp), %edi
    00000b44: 	addl	%ecx, %edi
    00000b46: 	movslq	%edi, %rdi
    00000b49: 	movslq	(%r13,%rdi,4), %rdi
    00000b4e: 	leaq	(%rdi,%rdi,4), %rdi
    00000b52: 	addq	%rsi, %rdi
    00000b55: 	testq	%rdx, %rdx
    00000b58: 	jne	.Ltmp3535 # Offset: 2904
    00000b5e: 	jmp	.Ltmp3536 # Offset: 2910
.Ltmp3530:
    00000b60: 	movl	0x3c(%rsp), %r15d
    00000b65: 	addl	%edx, %r15d
    00000b68: 	movslq	%r15d, %r15
    00000b6b: 	movslq	(%r13,%r15,4), %r15
    00000b70: 	addq	%r15, %rsi
    00000b73: 	jmp	.Ltmp3537 # Offset: 2931
    00000b78: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3526:
    00000b80: 	leaq	(%r11,%r10,2), %rdx
    00000b84: 	leaq	(%rdx,%rbx), %r9
    00000b88: 	leaq	0x2f(%r9), %rdx
    00000b8c: 	addq	$0x10, %r9
    00000b90: 	cmovnsq	%r9, %rdx
    00000b94: 	jmp	.Ltmp3538 # Offset: 2964
    00000b99: 	nopl	(%rax) # Size: 7
.Ltmp3524:
    00000ba0: 	movslq	(%r8), %r10
    00000ba3: 	leaq	(%r10,%r10,4), %r10
    00000ba7: 	addq	%r10, %rdx
    00000baa: 	jmp	.Ltmp3539 # Offset: 2986
    00000baf: 	nop # Size: 1
.Ltmp3518:
    00000bb0: 	movq	0x78(%rsp), %rax
    00000bb5: 	movl	$0x1, %esi
    00000bba: 	movslq	(%rax), %rax
    00000bbd: 	leaq	(%rax,%rax,4), %rdx
    00000bc1: 	addq	%rax, %rdx
    00000bc4: 	leal	0x2(%rdi), %eax
    00000bc7: 	cltq
    00000bc9: 	movslq	(%r13,%rax,4), %rax
    00000bce: 	addq	%rdx, %rax
    00000bd1: 	movslq	(%r9), %rdx
    00000bd4: 	leaq	(%rdx,%rdx,4), %rbp
    00000bd8: 	addq	%rbp, %rax
    00000bdb: 	leaq	(%rax,%rdx,8), %r10
    00000bdf: 	leal	0x2(%r8), %eax
    00000be3: 	cltq
    00000be5: 	movslq	(%r13,%rax,4), %rax
    00000bea: 	leaq	(%rax,%rax,4), %rcx
    00000bee: 	addq	%r10, %rcx
.Ltmp3542:
    00000bf1: 	addq	%rdx, %rcx
    00000bf4: 	movslq	0x4(%r9), %rax
    00000bf8: 	movq	0x58(%rsp), %rbx
    00000bfd: 	addq	%rbp, %rcx
    00000c00: 	addq	%rcx, %rax
    00000c03: 	leaq	0x2f(%rax), %rdx
    00000c07: 	addq	$0x10, %rax
    00000c0b: 	cmovsq	%rdx, %rax
    00000c0f: 	addl	$0x1, %r8d
    00000c13: 	addl	$0x1, %edi
    00000c16: 	sarq	$0x5, %rax
    00000c1a: 	cmpl	$0x1, 0x30(%rsp)
    00000c1f: 	movl	%eax, (%rbx)
    00000c21: 	movl	$0x1, %eax
    00000c26: 	jg	.Ltmp3521 # Offset: 3110
    00000c2c: 	jmp	.Ltmp3540 # Offset: 3116
    00000c31: 	nopl	(%rax) # Size: 7
.Ltmp3520:
    00000c38: 	leal	0x2(%r8), %ecx
    00000c3c: 	movslq	%ecx, %rcx
    00000c3f: 	movslq	(%r13,%rcx,4), %rcx
    00000c44: 	leaq	(%rcx,%rcx,4), %rcx
    00000c48: 	addq	%r15, %rcx
    00000c4b: 	testq	%rax, %rax
    00000c4e: 	jne	.Ltmp3541 # Offset: 3150
    00000c54: 	jmp	.Ltmp3542 # Offset: 3156
    00000c56: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3519:
    00000c60: 	leal	0x2(%rdi), %ecx
    00000c63: 	movslq	%ecx, %rcx
    00000c66: 	movslq	(%r13,%rcx,4), %rcx
    00000c6b: 	addq	%rcx, %rdx
    00000c6e: 	jmp	.Ltmp3543 # Offset: 3182
    00000c73: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3517:
    00000c78: 	movl	0xa0(%rsp), %eax
    00000c7f: 	xorl	%esi, %esi
    00000c81: 	leal	-0x1(%rax), %r12d
    00000c85: 	jmp	.Ltmp3544 # Offset: 3205
    00000c8a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3469:
    00000c90: 	xorl	%ecx, %ecx
    00000c92: 	jmp	.Ltmp3484 # Offset: 3218
.Ltmp3501:
    00000c97: 	movl	$0x1, %eax
    00000c9c: 	jmp	.Ltmp3545 # Offset: 3228
.Ltmp3508:
    00000ca1: 	movq	%rbx, %rdi
    00000ca4: 	leaq	0xd0(%rsp), %rsi
    00000cac: 	xorl	%edx, %edx
    00000cae: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3246
    00000cb3: 	movq	%rax, (%rbx)
    00000cb6: 	movq	%rax, %rdi
    00000cb9: 	movq	0xd0(%rsp), %rax
    00000cc1: 	movq	%rax, 0x10(%rbx)
.Ltmp3548:
    00000cc5: 	movq	%r12, %rdx
    00000cc8: 	movq	%rbp, %rsi
    00000ccb: 	callq	memcpy@PLT # Offset: 3275
    00000cd0: 	movq	0xd0(%rsp), %r12
    00000cd8: 	movq	(%rbx), %rdi
    00000cdb: 	jmp	.Ltmp3546 # Offset: 3291
.Ltmp3505:
    00000ce0: 	movq	0xc0(%rsp), %rsi
    00000ce8: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000cef: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3311
    00000cf4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000cfb: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000d02: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000d09: 	jne	.Ltmp3547 # Offset: 3337
.Ltmp3510:
    00000d0f: 	movq	-0x8(%rdx), %rax
    00000d13: 	addq	$0x200, %rax
    00000d19: 	jmp	.Ltmp3547 # Offset: 3353
.Ltmp3509:
    00000d1e: 	testq	%r12, %r12
    00000d21: 	je	.Ltmp3546 # Offset: 3361
    00000d27: 	jmp	.Ltmp3548 # Offset: 3367
    00000d29: 	nopl	(%rax) # Size: 7
.Ltmp3499:
    00000d30: 	xorl	%edx, %edx
    00000d32: 	jmp	.Ltmp3549 # Offset: 3378
.Ltmp3467:
    00000d37: 	movl	0xc8(%rsp), %eax
    00000d3e: 	subl	$0x2, %eax
    00000d41: 	movl	%eax, 0xcc(%rsp)
    00000d48: 	jmp	.Ltmp3550 # Offset: 3400
.Ltmp3507:
    00000d4d: 	leaq	DATAat0x38158(%rip), %rdi
    00000d54: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3412
.Ltmp3511:
    00000d59: 	callq	__stack_chk_fail@PLT # Offset: 3417
DWARF CFI Instructions:
    <empty>
End of Function "_Z15convolution2D_2IilEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15convolution2D_2IddEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 282
  State       : disassembled
  Address     : 0x295f0
  Size        : 0xeb4
  MaxSize     : 0xec0
  Offset      : 0x295f0
  Section     : .text
  Orc Section : .local.text._Z15convolution2D_2IddEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0281:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%ecx, %ebx
    00000010: 	subq	$0xe8, %rsp
    00000017: 	movq	%rdi, (%rsp)
    0000001b: 	movq	%rsi, 0x50(%rsp)
    00000020: 	movl	%edx, 0xc8(%rsp)
    00000027: 	movl	%r8d, 0x60(%rsp)
    0000002c: 	movq	%r9, 0xc0(%rsp)
    00000034: 	movq	%fs:0x28, %rax
    0000003d: 	movq	%rax, 0xd8(%rsp)
    00000045: 	xorl	%eax, %eax
    00000047: 	callq	clock@PLT # Offset: 71
    0000004c: 	movq	(%rsp), %r10
    00000050: 	movq	%rax, start_time(%rip)
    00000057: 	movl	iterations(%rip), %eax
    0000005d: 	testl	%eax, %eax
    0000005f: 	movl	%eax, 0xa8(%rsp)
    00000066: 	jle	.Ltmp3551 # Offset: 102
    0000006c: 	movslq	0x60(%rsp), %rax
    00000071: 	leal	-0x1(%rbx), %r11d
    00000075: 	pxor	%xmm3, %xmm3
    00000079: 	movq	%r10, %r12
    0000007c: 	movsd	DATAat0x38910(%rip), %xmm6
    00000084: 	movl	%r11d, %r15d
    00000087: 	movl	%ebx, %r13d
    0000008a: 	movl	$0x0, 0x84(%rsp)
    00000095: 	leaq	(,%rax,8), %rcx
    0000009d: 	movq	%rax, %rsi
    000000a0: 	leaq	(%r10,%rcx), %rax
    000000a4: 	movq	%rcx, 0x78(%rsp)
    000000a9: 	movq	%rax, 0x88(%rsp)
    000000b1: 	movl	0xc8(%rsp), %eax
    000000b8: 	leal	-0x1(%rax), %edi
    000000bb: 	movl	%edi, 0x80(%rsp)
    000000c2: 	leal	-0x2(%rax), %edi
    000000c5: 	movl	%edi, 0xcc(%rsp)
    000000cc: 	imull	%esi, %edi
    000000cf: 	movslq	%edi, %rax
    000000d2: 	movl	%edi, 0xa4(%rsp)
    000000d9: 	addl	%esi, %edi
    000000db: 	leaq	(%r10,%rax,8), %rax
    000000df: 	movl	%edi, 0xa0(%rsp)
    000000e6: 	movq	%rax, 0x90(%rsp)
    000000ee: 	movslq	%edi, %rax
    000000f1: 	shlq	$0x3, %rax
    000000f5: 	leaq	(%r10,%rax), %rdi
    000000f9: 	movq	%rdi, 0x98(%rsp)
    00000101: 	leal	(%rsi,%rsi), %edi
    00000104: 	movslq	%edi, %rdx
    00000107: 	movl	%edi, 0xac(%rsp)
    0000010e: 	leaq	(%r10,%rdx,8), %rdi
    00000112: 	movq	%rdi, 0xb0(%rsp)
    0000011a: 	movq	0x50(%rsp), %rdi
    0000011f: 	addq	%rdi, %rax
    00000122: 	movq	%rdi, %rdx
    00000125: 	addq	%rcx, %rdx
    00000128: 	movq	%rax, 0x58(%rsp)
    0000012d: 	cmpl	%r11d, %ebx
    00000130: 	movl	%r11d, %eax
    00000133: 	cmovlel	%ebx, %eax
    00000136: 	movq	%rdx, 0xb8(%rsp)
    0000013e: 	movl	%eax, (%rsp)
    00000141: 	leal	-0x1(%rsi), %eax
    00000144: 	movl	%eax, 0x74(%rsp)
    00000148: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3584:
    00000150: 	testl	%r13d, %r13d
    00000153: 	jle	.Ltmp3552 # Offset: 339
    00000159: 	testl	%r15d, %r15d
    0000015c: 	jle	.Ltmp3553 # Offset: 348
    00000162: 	movsd	DATAat0x38910(%rip), %xmm0
    0000016a: 	movsd	DATAat0x389b0(%rip), %xmm4
    00000172: 	xorl	%eax, %eax
    00000174: 	movsd	DATAat0x389a0(%rip), %xmm5
    0000017c: 	movq	0x88(%rsp), %rsi
    00000184: 	nopl	(%rax) # Size: 4
.Ltmp3557:
    00000188: 	movl	%eax, %edi
    0000018a: 	testq	%rax, %rax
    0000018d: 	je	.Ltmp3554 # Offset: 397
    00000193: 	movsd	(%r12,%rax,8), %xmm1
    00000199: 	movsd	-0x8(%r12,%rax,8), %xmm7
    000001a0: 	movl	%eax, %edx
    000001a2: 	leal	0x1(%rax), %ecx
    000001a5: 	movapd	%xmm1, %xmm8
    000001aa: 	movapd	%xmm7, %xmm2
    000001ae: 	mulsd	%xmm0, %xmm8
    000001b3: 	addsd	%xmm3, %xmm2
    000001b7: 	addsd	%xmm8, %xmm2
    000001bc: 	cmpl	%eax, %r15d
    000001bf: 	jg	.Ltmp3555 # Offset: 447
    000001c5: 	addsd	%xmm1, %xmm2
.Ltmp3583:
    000001c9: 	mulsd	%xmm0, %xmm7
    000001cd: 	mulsd	%xmm4, %xmm1
    000001d1: 	addsd	%xmm2, %xmm7
    000001d5: 	addsd	%xmm7, %xmm1
    000001d9: 	cmpl	%edi, %r15d
    000001dc: 	jg	.Ltmp3556 # Offset: 476
    000001e2: 	addsd	%xmm8, %xmm1
.Ltmp3567:
    000001e7: 	movsd	(%rsi,%rax,8), %xmm2
    000001ec: 	addl	0x74(%rsp), %edx
    000001f0: 	movslq	%edx, %rdx
    000001f3: 	movq	0x50(%rsp), %rbx
    000001f8: 	mulsd	%xmm0, %xmm2
    000001fc: 	addsd	(%r12,%rdx,8), %xmm1
    00000202: 	addsd	%xmm2, %xmm1
    00000206: 	addsd	0x8(%rsi,%rax,8), %xmm1
    0000020c: 	addsd	%xmm3, %xmm1
    00000210: 	mulsd	%xmm5, %xmm1
    00000214: 	movsd	%xmm1, (%rbx,%rax,8)
    00000219: 	addq	$0x1, %rax
    0000021d: 	cmpl	%eax, (%rsp)
    00000220: 	jg	.Ltmp3557 # Offset: 544
    00000226: 	cmpl	%ecx, %r13d
    00000229: 	jle	.Ltmp3558 # Offset: 553
.Ltmp3568:
    0000022f: 	movslq	%ecx, %rax
    00000232: 	movq	0x88(%rsp), %rsi
    0000023a: 	subl	$0x1, %ecx
    0000023d: 	jmp	.Ltmp3559 # Offset: 573
    00000242: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3564:
    00000248: 	movslq	%ecx, %rdi
    0000024b: 	movsd	(%r12,%rdi,8), %xmm2
    00000251: 	addsd	%xmm3, %xmm2
.Ltmp3565:
    00000255: 	movsd	(%r12,%rax,8), %xmm1
    0000025b: 	movapd	%xmm1, %xmm7
    0000025f: 	mulsd	%xmm0, %xmm7
    00000263: 	addsd	%xmm7, %xmm2
    00000267: 	cmpl	%edx, %r15d
    0000026a: 	jle	.Ltmp3560 # Offset: 618
    00000270: 	addsd	0x8(%r12,%rax,8), %xmm2
.Ltmp3582:
    00000277: 	testl	%edx, %edx
    00000279: 	je	.Ltmp3561 # Offset: 633
    0000027f: 	movslq	%ecx, %rdi
    00000282: 	movsd	(%r12,%rdi,8), %xmm8
    00000288: 	mulsd	%xmm0, %xmm8
    0000028d: 	addsd	%xmm8, %xmm2
.Ltmp3581:
    00000292: 	mulsd	%xmm4, %xmm1
    00000296: 	addsd	%xmm2, %xmm1
    0000029a: 	cmpl	%edx, %r15d
    0000029d: 	jle	.Ltmp3562 # Offset: 669
    000002a3: 	movsd	0x8(%r12,%rax,8), %xmm2
    000002aa: 	mulsd	%xmm0, %xmm2
    000002ae: 	addsd	%xmm2, %xmm1
.Ltmp3580:
    000002b2: 	testl	%edx, %edx
    000002b4: 	je	.Ltmp3563 # Offset: 692
    000002ba: 	movl	0x74(%rsp), %ebx
    000002be: 	leal	(%rbx,%rax), %edx
    000002c1: 	movslq	%edx, %rdx
    000002c4: 	addsd	(%r12,%rdx,8), %xmm1
.Ltmp3579:
    000002ca: 	movsd	(%rsi,%rax,8), %xmm2
    000002cf: 	movq	0x50(%rsp), %rbx
    000002d4: 	addl	$0x1, %ecx
    000002d7: 	movapd	%xmm2, %xmm7
    000002db: 	mulsd	%xmm0, %xmm7
    000002df: 	addsd	%xmm7, %xmm1
    000002e3: 	addsd	%xmm2, %xmm1
    000002e7: 	addsd	%xmm3, %xmm1
    000002eb: 	mulsd	%xmm5, %xmm1
    000002ef: 	movsd	%xmm1, (%rbx,%rax,8)
    000002f4: 	addq	$0x1, %rax
    000002f8: 	cmpl	%eax, %r13d
    000002fb: 	jle	.Ltmp3558 # Offset: 763
.Ltmp3559:
    00000301: 	movl	%eax, %edx
    00000303: 	testl	%eax, %eax
    00000305: 	jne	.Ltmp3564 # Offset: 773
    0000030b: 	movsd	(%r12), %xmm2
    00000311: 	addsd	%xmm3, %xmm2
    00000315: 	jmp	.Ltmp3565 # Offset: 789
    0000031a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3554:
    00000320: 	movsd	(%r12), %xmm1
    00000326: 	xorl	%edx, %edx
    00000328: 	movl	$0x1, %ecx
    0000032d: 	movapd	%xmm1, %xmm8
    00000332: 	movapd	%xmm1, %xmm2
    00000336: 	mulsd	%xmm0, %xmm8
    0000033b: 	addsd	%xmm3, %xmm2
    0000033f: 	addsd	%xmm8, %xmm2
.Ltmp3555:
    00000344: 	addsd	0x8(%r12,%rax,8), %xmm2
    0000034b: 	testq	%rax, %rax
    0000034e: 	jne	.Ltmp3566 # Offset: 846
    00000354: 	mulsd	%xmm4, %xmm1
    00000358: 	addsd	%xmm8, %xmm2
    0000035d: 	addsd	%xmm2, %xmm1
.Ltmp3556:
    00000361: 	movsd	0x8(%r12,%rax,8), %xmm2
    00000368: 	mulsd	%xmm0, %xmm2
    0000036c: 	addsd	%xmm2, %xmm1
    00000370: 	testq	%rax, %rax
    00000373: 	jne	.Ltmp3567 # Offset: 883
    00000379: 	movsd	(%rsi,%rax,8), %xmm2
    0000037e: 	addsd	(%rsi), %xmm1
    00000382: 	movq	0x50(%rsp), %rbx
    00000387: 	cmpl	$0x1, (%rsp)
    0000038b: 	mulsd	%xmm0, %xmm2
    0000038f: 	addsd	%xmm2, %xmm1
    00000393: 	addsd	0x8(%rsi,%rax,8), %xmm1
    00000399: 	addsd	%xmm3, %xmm1
    0000039d: 	mulsd	%xmm5, %xmm1
    000003a1: 	movsd	%xmm1, (%rbx,%rax,8)
    000003a6: 	movl	$0x1, %eax
    000003ab: 	jg	.Ltmp3557 # Offset: 939
    000003b1: 	cmpl	%ecx, %r13d
    000003b4: 	jg	.Ltmp3568 # Offset: 948
    000003ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3558:
    000003c0: 	cmpl	$0x1, 0x80(%rsp)
    000003c8: 	jle	.Ltmp3569 # Offset: 968
    000003ce: 	movl	0x60(%rsp), %eax
    000003d2: 	movl	$0x0, 0x44(%rsp)
    000003da: 	movq	%r12, %r14
    000003dd: 	movl	$0x0, 0x34(%rsp)
    000003e5: 	movq	0x88(%rsp), %r10
    000003ed: 	movl	%eax, 0x70(%rsp)
    000003f1: 	movl	0xac(%rsp), %eax
    000003f8: 	movl	$0x1, 0x64(%rsp)
    00000400: 	movq	0xb8(%rsp), %r9
    00000408: 	movl	%eax, 0x38(%rsp)
    0000040c: 	movq	0xb0(%rsp), %r8
    00000414: 	movq	$0x0, 0x68(%rsp)
    0000041d: 	nopl	(%rax) # Size: 3
.Ltmp3608:
    00000420: 	movq	0x68(%rsp), %rax
    00000425: 	movl	0x60(%rsp), %ebx
    00000429: 	addl	$0x1, 0x64(%rsp)
    0000042e: 	leaq	(%r12,%rax,8), %rax
    00000432: 	movq	%rax, 0x8(%rsp)
    00000437: 	movl	0x34(%rsp), %eax
    0000043b: 	movl	%eax, 0x4c(%rsp)
    0000043f: 	addl	%ebx, %eax
    00000441: 	movl	%eax, 0x34(%rsp)
    00000445: 	cltq
    00000447: 	movq	%rax, 0x68(%rsp)
    0000044c: 	leaq	(%r12,%rax,8), %rax
    00000450: 	movq	%rax, 0x10(%rsp)
    00000455: 	movslq	0x38(%rsp), %rax
    0000045a: 	leaq	(%r12,%rax,8), %rax
    0000045e: 	movq	%rax, 0x18(%rsp)
    00000463: 	movl	0x70(%rsp), %eax
    00000467: 	movl	%eax, 0x48(%rsp)
    0000046b: 	addl	%ebx, %eax
    0000046d: 	movl	%eax, 0x70(%rsp)
    00000471: 	testl	%r15d, %r15d
    00000474: 	jg	.Ltmp3570 # Offset: 1140
    0000047a: 	xorl	%eax, %eax
.Ltmp3607:
    0000047c: 	movl	0x34(%rsp), %edi
    00000480: 	movl	0x4c(%rsp), %ebp
    00000484: 	cltq
    00000486: 	movl	0x44(%rsp), %ebx
    0000048a: 	movl	0x38(%rsp), %esi
    0000048e: 	leal	-0x1(%rdi), %r11d
    00000492: 	movl	0x48(%rsp), %edi
    00000496: 	subl	$0x1, %ebp
    00000499: 	addl	$0x1, %ebx
    0000049c: 	subl	$0x1, %esi
    0000049f: 	addl	$0x1, %edi
    000004a2: 	jmp	.Ltmp3571 # Offset: 1186
    000004a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3577:
    000004b0: 	leal	(%rbp,%rax), %ecx
    000004b4: 	movslq	%ecx, %rcx
    000004b7: 	movsd	(%r12,%rcx,8), %xmm7
    000004bd: 	addsd	%xmm3, %xmm7
.Ltmp3578:
    000004c1: 	movsd	(%r14,%rax,8), %xmm2
    000004c7: 	movapd	%xmm2, %xmm1
    000004cb: 	mulsd	%xmm0, %xmm1
    000004cf: 	addsd	%xmm7, %xmm1
    000004d3: 	cmpl	%edx, %r15d
    000004d6: 	jle	.Ltmp3572 # Offset: 1238
    000004dc: 	leal	(%rbx,%rax), %ecx
    000004df: 	movslq	%ecx, %rcx
    000004e2: 	addsd	(%r12,%rcx,8), %xmm1
.Ltmp3602:
    000004e8: 	testl	%edx, %edx
    000004ea: 	je	.Ltmp3573 # Offset: 1258
    000004f0: 	leal	(%r11,%rax), %ecx
    000004f4: 	movslq	%ecx, %rcx
    000004f7: 	movsd	(%r12,%rcx,8), %xmm2
    000004fd: 	mulsd	%xmm0, %xmm2
    00000501: 	addsd	%xmm2, %xmm1
.Ltmp3601:
    00000505: 	movsd	(%r10,%rax,8), %xmm7
    0000050b: 	movapd	%xmm7, %xmm2
    0000050f: 	mulsd	%xmm4, %xmm2
    00000513: 	addsd	%xmm1, %xmm2
    00000517: 	cmpl	%edx, %r15d
    0000051a: 	jle	.Ltmp3574 # Offset: 1306
    00000520: 	leal	(%rdi,%rax), %ecx
    00000523: 	movslq	%ecx, %rcx
    00000526: 	movsd	(%r12,%rcx,8), %xmm1
    0000052c: 	mulsd	%xmm0, %xmm1
    00000530: 	addsd	%xmm1, %xmm2
.Ltmp3600:
    00000534: 	testl	%edx, %edx
    00000536: 	je	.Ltmp3575 # Offset: 1334
    0000053c: 	movsd	(%r8,%rax,8), %xmm7
    00000542: 	leal	(%rsi,%rax), %edx
    00000545: 	movslq	%edx, %rdx
    00000548: 	movapd	%xmm7, %xmm1
    0000054c: 	addsd	(%r12,%rdx,8), %xmm2
    00000552: 	mulsd	%xmm0, %xmm1
    00000556: 	addsd	%xmm2, %xmm1
    0000055a: 	addsd	%xmm7, %xmm1
.Ltmp3599:
    0000055e: 	addsd	%xmm3, %xmm1
    00000562: 	mulsd	%xmm5, %xmm1
    00000566: 	movsd	%xmm1, (%r9,%rax,8)
    0000056c: 	addq	$0x1, %rax
    00000570: 	cmpl	%eax, %r13d
    00000573: 	jle	.Ltmp3576 # Offset: 1395
.Ltmp3571:
    00000579: 	movl	%eax, %edx
    0000057b: 	testl	%eax, %eax
    0000057d: 	jne	.Ltmp3577 # Offset: 1405
    00000583: 	movq	0x8(%rsp), %rcx
    00000588: 	movsd	(%rcx), %xmm7
    0000058c: 	addsd	%xmm3, %xmm7
    00000590: 	jmp	.Ltmp3578 # Offset: 1424
    00000595: 	nopl	(%rax) # Size: 3
.Ltmp3563:
    00000598: 	addsd	(%rsi), %xmm1
    0000059c: 	jmp	.Ltmp3579 # Offset: 1436
    000005a1: 	nopl	(%rax) # Size: 7
.Ltmp3562:
    000005a8: 	addsd	%xmm7, %xmm1
    000005ac: 	jmp	.Ltmp3580 # Offset: 1452
    000005b1: 	nopl	(%rax) # Size: 7
.Ltmp3561:
    000005b8: 	addsd	%xmm7, %xmm2
    000005bc: 	jmp	.Ltmp3581 # Offset: 1468
    000005c1: 	nopl	(%rax) # Size: 7
.Ltmp3560:
    000005c8: 	addsd	%xmm1, %xmm2
    000005cc: 	jmp	.Ltmp3582 # Offset: 1484
    000005d1: 	nopl	(%rax) # Size: 7
.Ltmp3566:
    000005d8: 	movsd	-0x8(%r12,%rax,8), %xmm7
    000005df: 	jmp	.Ltmp3583 # Offset: 1503
    000005e4: 	nopl	(%rax) # Size: 4
.Ltmp3552:
    000005e8: 	addl	$0x1, 0x84(%rsp)
    000005f0: 	movl	0x84(%rsp), %eax
    000005f7: 	cmpl	0xa8(%rsp), %eax
    000005fe: 	jne	.Ltmp3584 # Offset: 1534
    00000604: 	movl	%r13d, %ebx
.Ltmp3638:
    00000607: 	movl	0xc8(%rsp), %edi
    0000060e: 	movl	0xcc(%rsp), %eax
    00000615: 	pxor	%xmm2, %xmm2
    00000619: 	movl	%edi, %edx
    0000061b: 	addl	%ebx, %eax
    0000061d: 	imull	%ebx, %edx
    00000620: 	addl	%eax, %eax
    00000622: 	subl	%eax, %edx
    00000624: 	cvtsi2sd	%edx, %xmm2
    00000628: 	mulsd	init_value(%rip), %xmm2
    00000630: 	cmpl	$0x2, %edi
    00000633: 	jle	.Ltmp3585 # Offset: 1587
    00000639: 	subl	$0x1, %edi
    0000063c: 	movl	0x60(%rsp), %r12d
    00000641: 	movq	0x50(%rsp), %r11
    00000646: 	movapd	%xmm3, %xmm0
    0000064a: 	movl	%edi, %r8d
    0000064d: 	leal	-0x2(%rbx), %edi
    00000650: 	movl	$0x1, %ecx
    00000655: 	movl	%edi, %eax
    00000657: 	movl	%edi, %r9d
    0000065a: 	movl	%edi, %r10d
    0000065d: 	movl	%r12d, %edx
    00000660: 	shrl	%eax
    00000662: 	andl	$-0x2, %r9d
    00000666: 	orl	$0x1, %r10d
    0000066a: 	leal	-0x1(%rax), %esi
    0000066d: 	addq	$0x1, %rsi
    00000671: 	shlq	$0x4, %rsi
    00000675: 	nopl	(%rax) # Size: 3
.Ltmp3589:
    00000678: 	cmpl	$0x2, %ebx
    0000067b: 	jle	.Ltmp3586 # Offset: 1659
    0000067d: 	cmpl	$0x3, %ebx
    00000680: 	je	.Ltmp3587 # Offset: 1664
    00000686: 	movslq	%edx, %rax
    00000689: 	leaq	0x8(%r11,%rax,8), %rax
    0000068e: 	leaq	(%rsi,%rax), %rbp
    00000692: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3588:
    00000698: 	movsd	(%rax), %xmm1
    0000069c: 	addq	$0x10, %rax
    000006a0: 	addsd	%xmm1, %xmm0
    000006a4: 	movsd	-0x8(%rax), %xmm1
    000006a9: 	addsd	%xmm1, %xmm0
    000006ad: 	cmpq	%rax, %rbp
    000006b0: 	jne	.Ltmp3588 # Offset: 1712
    000006b2: 	movl	%r10d, %eax
    000006b5: 	cmpl	%edi, %r9d
    000006b8: 	je	.Ltmp3586 # Offset: 1720
.Ltmp3633:
    000006ba: 	addl	%edx, %eax
    000006bc: 	cltq
    000006be: 	addsd	(%r11,%rax,8), %xmm0
.Ltmp3586:
    000006c4: 	addl	$0x1, %ecx
    000006c7: 	addl	%r12d, %edx
    000006ca: 	cmpl	%ecx, %r8d
    000006cd: 	jne	.Ltmp3589 # Offset: 1741
    000006cf: 	movq	DATAat0x38920(%rip), %xmm1
    000006d7: 	movapd	%xmm0, %xmm3
    000006db: 	subsd	%xmm2, %xmm3
    000006df: 	movapd	%xmm0, %xmm2
    000006e3: 	andpd	%xmm1, %xmm2
    000006e7: 	comisd	DATAat0x38a60(%rip), %xmm2
    000006ef: 	jbe	.Ltmp3590 # Offset: 1775
    000006f1: 	divsd	%xmm0, %xmm3
.Ltmp3590:
    000006f5: 	movsd	DATAat0x38a68(%rip), %xmm0
    000006fd: 	andpd	%xmm1, %xmm3
    00000701: 	comisd	%xmm3, %xmm0
    00000705: 	jbe	.Ltmp3591 # Offset: 1797
.Ltmp3635:
    0000070b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000712: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000719: 	subq	$0x20, %rax
    0000071d: 	cmpq	%rax, %rbx
    00000720: 	je	.Ltmp3592 # Offset: 1824
    00000726: 	movq	0xc0(%rsp), %rax
    0000072e: 	leaq	0x10(%rbx), %rdi
    00000732: 	movq	%rdi, (%rbx)
    00000735: 	movq	(%rax), %rbp
    00000738: 	movq	0x8(%rax), %r12
    0000073c: 	movq	%rbp, %rax
    0000073f: 	addq	%r12, %rax
    00000742: 	je	.Ltmp3593 # Offset: 1858
    00000744: 	testq	%rbp, %rbp
    00000747: 	je	.Ltmp3594 # Offset: 1863
.Ltmp3593:
    0000074d: 	movq	%r12, 0xd0(%rsp)
    00000755: 	cmpq	$0xf, %r12
    00000759: 	ja	.Ltmp3595 # Offset: 1881
    0000075f: 	cmpq	$0x1, %r12
    00000763: 	jne	.Ltmp3596 # Offset: 1891
    00000769: 	movzbl	(%rbp), %eax
    0000076d: 	movb	%al, 0x10(%rbx)
.Ltmp3634:
    00000770: 	movq	%r12, 0x8(%rbx)
    00000774: 	movb	$0x0, (%rdi,%r12)
    00000779: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000780: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000787: 	addq	$0x20, %rax
    0000078b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000792: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000799: 	je	.Ltmp3597 # Offset: 1945
.Ltmp3636:
    0000079f: 	movq	-0x20(%rax), %rbp
    000007a3: 	callq	clock@PLT # Offset: 1955
    000007a8: 	movq	%rax, end_time(%rip)
    000007af: 	movq	0xd8(%rsp), %rdx
    000007b7: 	subq	%fs:0x28, %rdx
    000007c0: 	jne	.Ltmp3598 # Offset: 1984
    000007c6: 	subq	start_time(%rip), %rax
    000007cd: 	pxor	%xmm0, %xmm0
    000007d1: 	movq	%rbp, %rdi
    000007d4: 	cvtsi2sd	%rax, %xmm0
    000007d9: 	divsd	DATAat0x38a48(%rip), %xmm0
    000007e1: 	addq	$0xe8, %rsp
    000007e8: 	popq	%rbx
    000007e9: 	popq	%rbp
    000007ea: 	popq	%r12
    000007ec: 	popq	%r13
    000007ee: 	popq	%r14
    000007f0: 	popq	%r15
    000007f2: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 2034
    000007f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3575:
    00000800: 	movsd	(%r8,%rax,8), %xmm1
    00000806: 	movq	0x18(%rsp), %rcx
    0000080b: 	movapd	%xmm1, %xmm7
    0000080f: 	addsd	(%rcx), %xmm2
    00000813: 	mulsd	%xmm0, %xmm7
    00000817: 	addsd	%xmm7, %xmm2
    0000081b: 	addsd	%xmm2, %xmm1
    0000081f: 	jmp	.Ltmp3599 # Offset: 2079
    00000824: 	nopl	(%rax) # Size: 4
.Ltmp3574:
    00000828: 	mulsd	%xmm0, %xmm7
    0000082c: 	addsd	%xmm7, %xmm2
    00000830: 	jmp	.Ltmp3600 # Offset: 2096
    00000835: 	nopl	(%rax) # Size: 3
.Ltmp3573:
    00000838: 	movq	0x10(%rsp), %rcx
    0000083d: 	movsd	(%rcx), %xmm2
    00000841: 	mulsd	%xmm0, %xmm2
    00000845: 	addsd	%xmm2, %xmm1
    00000849: 	jmp	.Ltmp3601 # Offset: 2121
    0000084e: 	nop # Size: 2
.Ltmp3572:
    00000850: 	addsd	%xmm2, %xmm1
    00000854: 	jmp	.Ltmp3602 # Offset: 2132
    00000859: 	nopl	(%rax) # Size: 7
.Ltmp3570:
    00000860: 	movl	0x44(%rsp), %eax
    00000864: 	xorl	%edx, %edx
    00000866: 	addl	$0x1, %eax
    00000869: 	movl	%eax, 0x3c(%rsp)
    0000086d: 	cltq
    0000086f: 	movq	%rax, 0x20(%rsp)
    00000874: 	movl	0x48(%rsp), %eax
    00000878: 	addl	$0x1, %eax
    0000087b: 	movl	%eax, 0x40(%rsp)
    0000087f: 	cltq
    00000881: 	movq	%rax, 0x28(%rsp)
    00000886: 	movl	0x4c(%rsp), %eax
    0000088a: 	leal	-0x1(%rax), %ebp
    0000088d: 	movl	0x34(%rsp), %eax
    00000891: 	leal	-0x1(%rax), %ebx
    00000894: 	movl	0x38(%rsp), %eax
    00000898: 	leal	-0x1(%rax), %r11d
    0000089c: 	nopl	(%rax) # Size: 4
.Ltmp3606:
    000008a0: 	movl	%edx, %edi
    000008a2: 	testq	%rdx, %rdx
    000008a5: 	je	.Ltmp3603 # Offset: 2213
    000008ab: 	movsd	(%r14,%rdx,8), %xmm2
    000008b1: 	leal	(%rbp,%rdx), %eax
    000008b5: 	movl	%edx, %ecx
    000008b7: 	cltq
    000008b9: 	movapd	%xmm2, %xmm1
    000008bd: 	movsd	(%r12,%rax,8), %xmm7
    000008c3: 	leal	0x1(%rdx), %eax
    000008c6: 	mulsd	%xmm0, %xmm1
    000008ca: 	addsd	%xmm3, %xmm7
    000008ce: 	addsd	%xmm7, %xmm1
    000008d2: 	cmpl	%edx, %r15d
    000008d5: 	jg	.Ltmp3604 # Offset: 2261
    000008db: 	addsd	%xmm2, %xmm1
.Ltmp3621:
    000008df: 	leal	(%rbx,%rcx), %esi
    000008e2: 	movsd	(%r10,%rdx,8), %xmm7
    000008e8: 	movslq	%esi, %rsi
    000008eb: 	movsd	(%r12,%rsi,8), %xmm2
    000008f1: 	mulsd	%xmm0, %xmm2
    000008f5: 	addsd	%xmm1, %xmm2
    000008f9: 	movapd	%xmm7, %xmm1
    000008fd: 	mulsd	%xmm4, %xmm1
    00000901: 	addsd	%xmm2, %xmm1
    00000905: 	cmpl	%edi, %r15d
    00000908: 	jg	.Ltmp3605 # Offset: 2312
    0000090e: 	mulsd	%xmm0, %xmm7
    00000912: 	addsd	%xmm7, %xmm1
.Ltmp3622:
    00000916: 	movsd	(%r8,%rdx,8), %xmm2
    0000091c: 	addl	%r11d, %ecx
    0000091f: 	movslq	%ecx, %rcx
    00000922: 	mulsd	%xmm0, %xmm2
    00000926: 	addsd	(%r12,%rcx,8), %xmm1
    0000092c: 	addsd	%xmm2, %xmm1
    00000930: 	addsd	0x8(%r8,%rdx,8), %xmm1
    00000937: 	addsd	%xmm3, %xmm1
    0000093b: 	mulsd	%xmm5, %xmm1
    0000093f: 	movsd	%xmm1, (%r9,%rdx,8)
    00000945: 	addq	$0x1, %rdx
    00000949: 	cmpl	%edx, (%rsp)
    0000094c: 	jg	.Ltmp3606 # Offset: 2380
    00000952: 	cmpl	%eax, %r13d
    00000955: 	jg	.Ltmp3607 # Offset: 2389
    0000095b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3576:
    00000960: 	movq	0x78(%rsp), %rax
    00000965: 	movl	0x60(%rsp), %ebx
    00000969: 	addl	%ebx, 0x38(%rsp)
    0000096d: 	addl	%ebx, 0x44(%rsp)
    00000971: 	addq	%rax, %r8
    00000974: 	movl	0x64(%rsp), %ebx
    00000978: 	addq	%rax, %r9
    0000097b: 	addq	%rax, %r10
    0000097e: 	addq	%rax, %r14
    00000981: 	cmpl	%ebx, 0x80(%rsp)
    00000988: 	jne	.Ltmp3608 # Offset: 2440
.Ltmp3569:
    0000098e: 	testl	%r15d, %r15d
    00000991: 	jle	.Ltmp3609 # Offset: 2449
    00000997: 	movl	0xa0(%rsp), %eax
    0000099e: 	movq	0x90(%rsp), %rdi
    000009a6: 	movq	0x98(%rsp), %rsi
    000009ae: 	leal	-0x1(%rax), %r9d
    000009b2: 	movl	0xa4(%rsp), %eax
    000009b9: 	movl	%r9d, %ecx
    000009bc: 	leal	-0x1(%rax), %edx
    000009bf: 	xorl	%eax, %eax
    000009c1: 	nopl	(%rax) # Size: 7
.Ltmp3613:
    000009c8: 	movl	%eax, %r11d
    000009cb: 	testq	%rax, %rax
    000009ce: 	je	.Ltmp3610 # Offset: 2510
    000009d4: 	movsd	(%rdi,%rax,8), %xmm2
    000009d9: 	movslq	%edx, %r8
    000009dc: 	movsd	(%r12,%r8,8), %xmm7
    000009e2: 	leal	0x1(%rax), %r8d
    000009e6: 	movapd	%xmm2, %xmm1
    000009ea: 	mulsd	%xmm0, %xmm1
    000009ee: 	addsd	%xmm3, %xmm7
    000009f2: 	addsd	%xmm7, %xmm1
    000009f6: 	cmpl	%eax, %r15d
    000009f9: 	jg	.Ltmp3611 # Offset: 2553
    000009ff: 	addsd	%xmm2, %xmm1
.Ltmp3631:
    00000a03: 	movslq	%ecx, %r10
    00000a06: 	movsd	(%rsi,%rax,8), %xmm7
    00000a0b: 	movsd	(%r12,%r10,8), %xmm2
    00000a11: 	movapd	%xmm7, %xmm8
    00000a16: 	mulsd	%xmm0, %xmm2
    00000a1a: 	mulsd	%xmm0, %xmm8
    00000a1f: 	addsd	%xmm1, %xmm2
    00000a23: 	movapd	%xmm7, %xmm1
    00000a27: 	mulsd	%xmm4, %xmm1
    00000a2b: 	addsd	%xmm2, %xmm1
    00000a2f: 	cmpl	%r11d, %r15d
    00000a32: 	jg	.Ltmp3612 # Offset: 2610
    00000a38: 	addsd	%xmm8, %xmm1
.Ltmp3629:
    00000a3d: 	addsd	(%r12,%r10,8), %xmm1
    00000a43: 	movq	0x58(%rsp), %rbx
    00000a48: 	addl	$0x1, %ecx
    00000a4b: 	addl	$0x1, %edx
    00000a4e: 	addsd	%xmm8, %xmm1
    00000a53: 	addsd	0x8(%rsi,%rax,8), %xmm1
    00000a59: 	addsd	%xmm3, %xmm1
    00000a5d: 	mulsd	%xmm5, %xmm1
    00000a61: 	movsd	%xmm1, (%rbx,%rax,8)
    00000a66: 	addq	$0x1, %rax
    00000a6a: 	cmpl	%eax, (%rsp)
    00000a6d: 	jg	.Ltmp3613 # Offset: 2669
.Ltmp3628:
    00000a73: 	cmpl	%r8d, %r13d
    00000a76: 	jle	.Ltmp3552 # Offset: 2678
.Ltmp3632:
    00000a7c: 	movl	0xa4(%rsp), %ebx
    00000a83: 	movq	0x90(%rsp), %rdx
    00000a8b: 	movslq	%r8d, %rax
    00000a8e: 	leal	(%r9,%r8), %ecx
    00000a92: 	movq	0x98(%rsp), %rdi
    00000a9a: 	leal	0x1(%r8,%rbx), %esi
    00000a9f: 	jmp	.Ltmp3614 # Offset: 2719
    00000aa4: 	nopl	(%rax) # Size: 4
.Ltmp3619:
    00000aa8: 	leal	-0x2(%rsi), %r9d
    00000aac: 	movslq	%r9d, %r9
    00000aaf: 	movsd	(%r12,%r9,8), %xmm7
    00000ab5: 	addsd	%xmm3, %xmm7
.Ltmp3620:
    00000ab9: 	movsd	(%rdx,%rax,8), %xmm2
    00000abe: 	movapd	%xmm2, %xmm1
    00000ac2: 	mulsd	%xmm0, %xmm1
    00000ac6: 	addsd	%xmm7, %xmm1
    00000aca: 	cmpl	%r15d, %r8d
    00000acd: 	jge	.Ltmp3615 # Offset: 2765
    00000ad3: 	movslq	%esi, %r9
    00000ad6: 	addsd	(%r12,%r9,8), %xmm1
.Ltmp3627:
    00000adc: 	testl	%r8d, %r8d
    00000adf: 	je	.Ltmp3616 # Offset: 2783
    00000ae5: 	movslq	%ecx, %r9
    00000ae8: 	movsd	(%r12,%r9,8), %xmm2
    00000aee: 	mulsd	%xmm0, %xmm2
    00000af2: 	addsd	%xmm1, %xmm2
.Ltmp3626:
    00000af6: 	movsd	(%rdi,%rax,8), %xmm7
    00000afb: 	movapd	%xmm7, %xmm1
    00000aff: 	mulsd	%xmm4, %xmm1
    00000b03: 	addsd	%xmm2, %xmm1
    00000b07: 	movapd	%xmm7, %xmm2
    00000b0b: 	mulsd	%xmm0, %xmm2
    00000b0f: 	cmpl	%r15d, %r8d
    00000b12: 	jge	.Ltmp3617 # Offset: 2834
    00000b18: 	leal	0x2(%rcx), %r9d
    00000b1c: 	movslq	%r9d, %r9
    00000b1f: 	movsd	(%r12,%r9,8), %xmm8
    00000b25: 	mulsd	%xmm0, %xmm8
    00000b2a: 	addsd	%xmm8, %xmm1
.Ltmp3625:
    00000b2f: 	testl	%r8d, %r8d
    00000b32: 	je	.Ltmp3618 # Offset: 2866
    00000b38: 	movslq	%ecx, %r8
    00000b3b: 	addsd	(%r12,%r8,8), %xmm1
.Ltmp3624:
    00000b41: 	addsd	%xmm2, %xmm1
    00000b45: 	movq	0x58(%rsp), %rbx
    00000b4a: 	addl	$0x1, %ecx
    00000b4d: 	addl	$0x1, %esi
    00000b50: 	addsd	%xmm7, %xmm1
    00000b54: 	addsd	%xmm3, %xmm1
    00000b58: 	mulsd	%xmm5, %xmm1
    00000b5c: 	movsd	%xmm1, (%rbx,%rax,8)
    00000b61: 	addq	$0x1, %rax
    00000b65: 	cmpl	%eax, %r13d
    00000b68: 	jle	.Ltmp3552 # Offset: 2920
.Ltmp3614:
    00000b6e: 	movl	%eax, %r8d
    00000b71: 	testl	%eax, %eax
    00000b73: 	jne	.Ltmp3619 # Offset: 2931
    00000b79: 	movsd	(%rdx), %xmm7
    00000b7d: 	addsd	%xmm3, %xmm7
    00000b81: 	jmp	.Ltmp3620 # Offset: 2945
    00000b86: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3603:
    00000b90: 	movq	0x8(%rsp), %rax
    00000b95: 	movsd	(%r14), %xmm1
    00000b9a: 	movq	0x20(%rsp), %rdi
    00000b9f: 	movsd	(%rax), %xmm2
    00000ba3: 	mulsd	%xmm0, %xmm1
    00000ba7: 	movl	$0x1, %eax
    00000bac: 	addsd	%xmm3, %xmm2
    00000bb0: 	addsd	%xmm2, %xmm1
    00000bb4: 	addsd	(%r12,%rdi,8), %xmm1
    00000bba: 	movq	0x10(%rsp), %rdi
    00000bbf: 	movsd	(%rdi), %xmm2
    00000bc3: 	movq	0x28(%rsp), %rdi
    00000bc8: 	mulsd	%xmm0, %xmm2
    00000bcc: 	addsd	%xmm2, %xmm1
    00000bd0: 	movsd	(%r10), %xmm2
    00000bd5: 	mulsd	%xmm4, %xmm2
    00000bd9: 	addsd	%xmm1, %xmm2
    00000bdd: 	movsd	(%r12,%rdi,8), %xmm1
    00000be3: 	mulsd	%xmm0, %xmm1
    00000be7: 	addsd	%xmm2, %xmm1
.Ltmp3623:
    00000beb: 	movsd	(%r8), %xmm2
    00000bf0: 	movq	0x18(%rsp), %rsi
    00000bf5: 	movl	$0x1, %edx
    00000bfa: 	cmpl	$0x1, (%rsp)
    00000bfe: 	mulsd	%xmm0, %xmm2
    00000c02: 	addsd	(%rsi), %xmm1
    00000c06: 	addsd	%xmm2, %xmm1
    00000c0a: 	addsd	0x8(%r8), %xmm1
    00000c10: 	addsd	%xmm3, %xmm1
    00000c14: 	mulsd	%xmm5, %xmm1
    00000c18: 	movsd	%xmm1, (%r9)
    00000c1d: 	jg	.Ltmp3606 # Offset: 3101
    00000c23: 	cmpl	%eax, %r13d
    00000c26: 	jg	.Ltmp3607 # Offset: 3110
    00000c2c: 	jmp	.Ltmp3576 # Offset: 3116
    00000c31: 	nopl	(%rax) # Size: 7
.Ltmp3604:
    00000c38: 	movl	0x3c(%rsp), %esi
    00000c3c: 	addl	%edx, %esi
    00000c3e: 	movslq	%esi, %rsi
    00000c41: 	addsd	(%r12,%rsi,8), %xmm1
    00000c47: 	jmp	.Ltmp3621 # Offset: 3143
    00000c4c: 	nopl	(%rax) # Size: 4
.Ltmp3605:
    00000c50: 	movl	0x40(%rsp), %esi
    00000c54: 	addl	%ecx, %esi
    00000c56: 	movslq	%esi, %rsi
    00000c59: 	movsd	(%r12,%rsi,8), %xmm2
    00000c5f: 	mulsd	%xmm0, %xmm2
    00000c63: 	addsd	%xmm2, %xmm1
    00000c67: 	testq	%rdx, %rdx
    00000c6a: 	jne	.Ltmp3622 # Offset: 3178
    00000c70: 	jmp	.Ltmp3623 # Offset: 3184
    00000c75: 	nopl	(%rax) # Size: 3
.Ltmp3618:
    00000c78: 	addsd	%xmm7, %xmm1
    00000c7c: 	jmp	.Ltmp3624 # Offset: 3196
    00000c81: 	nopl	(%rax) # Size: 7
.Ltmp3617:
    00000c88: 	addsd	%xmm2, %xmm1
    00000c8c: 	jmp	.Ltmp3625 # Offset: 3212
    00000c91: 	nopl	(%rax) # Size: 7
.Ltmp3616:
    00000c98: 	movsd	(%rdi), %xmm2
    00000c9c: 	mulsd	%xmm0, %xmm2
    00000ca0: 	addsd	%xmm1, %xmm2
    00000ca4: 	jmp	.Ltmp3626 # Offset: 3236
    00000ca9: 	nopl	(%rax) # Size: 7
.Ltmp3615:
    00000cb0: 	addsd	%xmm2, %xmm1
    00000cb4: 	jmp	.Ltmp3627 # Offset: 3252
    00000cb9: 	nopl	(%rax) # Size: 7
.Ltmp3610:
    00000cc0: 	movsd	(%rdi), %xmm1
    00000cc4: 	movsd	(%rsi), %xmm7
    00000cc8: 	leal	0x2(%rdx), %eax
    00000ccb: 	movl	$0x1, %r8d
    00000cd1: 	cltq
    00000cd3: 	movapd	%xmm1, %xmm2
    00000cd7: 	movapd	%xmm7, %xmm8
    00000cdc: 	mulsd	%xmm0, %xmm1
    00000ce0: 	addsd	%xmm3, %xmm2
    00000ce4: 	mulsd	%xmm0, %xmm8
    00000ce9: 	addsd	%xmm2, %xmm1
    00000ced: 	movapd	%xmm7, %xmm2
    00000cf1: 	addsd	(%r12,%rax,8), %xmm1
    00000cf7: 	mulsd	%xmm4, %xmm2
    00000cfb: 	leal	0x2(%rcx), %eax
    00000cfe: 	cltq
    00000d00: 	addsd	%xmm8, %xmm1
    00000d05: 	addsd	%xmm2, %xmm1
    00000d09: 	movsd	(%r12,%rax,8), %xmm2
    00000d0f: 	mulsd	%xmm0, %xmm2
    00000d13: 	addsd	%xmm2, %xmm1
.Ltmp3630:
    00000d17: 	addsd	%xmm7, %xmm1
    00000d1b: 	movq	0x58(%rsp), %rax
    00000d20: 	addl	$0x1, %ecx
    00000d23: 	addl	$0x1, %edx
    00000d26: 	cmpl	$0x1, (%rsp)
    00000d2a: 	addsd	%xmm8, %xmm1
    00000d2f: 	addsd	0x8(%rsi), %xmm1
    00000d34: 	addsd	%xmm3, %xmm1
    00000d38: 	mulsd	%xmm5, %xmm1
    00000d3c: 	movsd	%xmm1, (%rax)
    00000d40: 	movl	$0x1, %eax
    00000d45: 	jg	.Ltmp3613 # Offset: 3397
    00000d4b: 	jmp	.Ltmp3628 # Offset: 3403
.Ltmp3612:
    00000d50: 	leal	0x2(%rcx), %r11d
    00000d54: 	movslq	%r11d, %r11
    00000d57: 	movsd	(%r12,%r11,8), %xmm2
    00000d5d: 	mulsd	%xmm0, %xmm2
    00000d61: 	addsd	%xmm2, %xmm1
    00000d65: 	testq	%rax, %rax
    00000d68: 	jne	.Ltmp3629 # Offset: 3432
    00000d6e: 	jmp	.Ltmp3630 # Offset: 3438
.Ltmp3611:
    00000d70: 	leal	0x2(%rdx), %r10d
    00000d74: 	movslq	%r10d, %r10
    00000d77: 	addsd	(%r12,%r10,8), %xmm1
    00000d7d: 	jmp	.Ltmp3631 # Offset: 3453
    00000d82: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3609:
    00000d88: 	movl	0xa0(%rsp), %eax
    00000d8f: 	xorl	%r8d, %r8d
    00000d92: 	leal	-0x1(%rax), %r9d
    00000d96: 	jmp	.Ltmp3632 # Offset: 3478
    00000d9b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3553:
    00000da0: 	movsd	DATAat0x389b0(%rip), %xmm4
    00000da8: 	movsd	DATAat0x389a0(%rip), %xmm5
    00000db0: 	xorl	%ecx, %ecx
    00000db2: 	movapd	%xmm6, %xmm0
    00000db6: 	jmp	.Ltmp3568 # Offset: 3510
.Ltmp3587:
    00000dbb: 	movl	$0x1, %eax
    00000dc0: 	jmp	.Ltmp3633 # Offset: 3520
.Ltmp3595:
    00000dc5: 	movq	%rbx, %rdi
    00000dc8: 	leaq	0xd0(%rsp), %rsi
    00000dd0: 	xorl	%edx, %edx
    00000dd2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3538
    00000dd7: 	movq	%rax, (%rbx)
    00000dda: 	movq	%rax, %rdi
    00000ddd: 	movq	0xd0(%rsp), %rax
    00000de5: 	movq	%rax, 0x10(%rbx)
.Ltmp3637:
    00000de9: 	movq	%r12, %rdx
    00000dec: 	movq	%rbp, %rsi
    00000def: 	callq	memcpy@PLT # Offset: 3567
    00000df4: 	movq	0xd0(%rsp), %r12
    00000dfc: 	movq	(%rbx), %rdi
    00000dff: 	jmp	.Ltmp3634 # Offset: 3583
.Ltmp3591:
    00000e04: 	movq	0xc0(%rsp), %rax
    00000e0c: 	leaq	DATAat0x381c8(%rip), %rsi
    00000e13: 	movl	$0x1, %edi
    00000e18: 	movq	(%rax), %rdx
    00000e1b: 	xorl	%eax, %eax
    00000e1d: 	callq	__printf_chk@PLT # Offset: 3613
    00000e22: 	jmp	.Ltmp3635 # Offset: 3618
.Ltmp3592:
    00000e27: 	movq	0xc0(%rsp), %rsi
    00000e2f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000e36: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 3638
    00000e3b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000e42: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000e49: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000e50: 	jne	.Ltmp3636 # Offset: 3664
.Ltmp3597:
    00000e56: 	movq	-0x8(%rdx), %rax
    00000e5a: 	addq	$0x200, %rax
    00000e60: 	jmp	.Ltmp3636 # Offset: 3680
.Ltmp3596:
    00000e65: 	testq	%r12, %r12
    00000e68: 	je	.Ltmp3634 # Offset: 3688
    00000e6e: 	jmp	.Ltmp3637 # Offset: 3694
    00000e73: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3585:
    00000e78: 	subsd	%xmm2, %xmm3
    00000e7c: 	movq	DATAat0x38920(%rip), %xmm1
    00000e84: 	jmp	.Ltmp3590 # Offset: 3716
.Ltmp3551:
    00000e89: 	movl	0xc8(%rsp), %eax
    00000e90: 	pxor	%xmm3, %xmm3
    00000e94: 	subl	$0x2, %eax
    00000e97: 	movl	%eax, 0xcc(%rsp)
    00000e9e: 	jmp	.Ltmp3638 # Offset: 3742
.Ltmp3594:
    00000ea3: 	leaq	DATAat0x38158(%rip), %rdi
    00000eaa: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 3754
.Ltmp3598:
    00000eaf: 	callq	__stack_chk_fail@PLT # Offset: 3759
DWARF CFI Instructions:
    <empty>
End of Function "_Z15convolution2D_2IddEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15convolution2D_5IilEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 283
  State       : disassembled
  Address     : 0x2a4b0
  Size        : 0x8cf
  MaxSize     : 0x8d0
  Offset      : 0x2a4b0
  Section     : .text
  Orc Section : .local.text._Z15convolution2D_5IilEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0282:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rsi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0xf8, %rsp
    0000001b: 	movl	%edx, 0xc8(%rsp)
    00000022: 	movl	%ecx, 0xcc(%rsp)
    00000029: 	movl	%r8d, 0xd8(%rsp)
    00000031: 	movq	%r9, 0xd0(%rsp)
    00000039: 	movq	%fs:0x28, %rax
    00000042: 	movq	%rax, 0xe8(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	callq	clock@PLT # Offset: 76
    00000051: 	movq	%rax, start_time(%rip)
    00000058: 	movl	iterations(%rip), %eax
    0000005e: 	testl	%eax, %eax
    00000060: 	jle	.Ltmp3639 # Offset: 96
    00000066: 	movslq	0xd8(%rsp), %r12
    0000006e: 	movl	0xcc(%rsp), %r10d
    00000076: 	movl	$0x0, 0x1c(%rsp)
    0000007e: 	movq	%r12, %r14
    00000081: 	shlq	$0x2, %r12
    00000085: 	leal	-0x2(%r10), %ecx
    00000089: 	leal	-0x1(%r10), %r15d
    0000008d: 	leaq	(%rbx,%r12), %rax
    00000091: 	movl	%r15d, 0xc(%rsp)
    00000096: 	movq	%rax, 0x20(%rsp)
    0000009b: 	leaq	0x4(%rbx,%r12), %rax
    000000a0: 	movq	%rax, 0x28(%rsp)
    000000a5: 	movslq	%ecx, %rax
    000000a8: 	leaq	(%rbx,%rax,4), %r13
    000000ac: 	movslq	%r15d, %rax
    000000af: 	leaq	(,%rax,4), %rdi
    000000b7: 	leaq	(%rbx,%rdi), %rax
    000000bb: 	movq	%rax, 0x30(%rsp)
    000000c0: 	leal	(%rcx,%r14), %eax
    000000c4: 	cltq
    000000c6: 	leaq	(%rbx,%rax,4), %rax
    000000ca: 	movq	%rax, 0x38(%rsp)
    000000cf: 	movl	%r15d, %eax
    000000d2: 	addl	%r14d, %eax
    000000d5: 	cltq
    000000d7: 	leaq	(%rbx,%rax,4), %rax
    000000db: 	movq	%rax, 0x40(%rsp)
    000000e0: 	leaq	(%rbp,%rdi), %rax
    000000e5: 	movq	%rax, 0x48(%rsp)
    000000ea: 	movl	0xc8(%rsp), %eax
    000000f1: 	leal	-0x1(%rax), %edx
    000000f4: 	movl	%edx, 0x18(%rsp)
    000000f8: 	leal	-0x2(%rax), %edx
    000000fb: 	movl	%edx, 0xdc(%rsp)
    00000102: 	imull	%r14d, %edx
    00000106: 	movslq	%edx, %r8
    00000109: 	leal	(%rdx,%r14), %esi
    0000010d: 	leaq	(%rbx,%r8,4), %rax
    00000111: 	movq	%rax, 0x50(%rsp)
    00000116: 	leal	0x1(%rdx), %eax
    00000119: 	cltq
    0000011b: 	leaq	(%rbx,%rax,4), %rax
    0000011f: 	movq	%rax, 0x58(%rsp)
    00000124: 	movslq	%esi, %rax
    00000127: 	leaq	(,%rax,4), %r11
    0000012f: 	leaq	(%rbx,%r11), %rax
    00000133: 	movq	%r11, 0x60(%rsp)
    00000138: 	movq	%rax, 0x68(%rsp)
    0000013d: 	leal	0x1(%rsi), %eax
    00000140: 	cltq
    00000142: 	leaq	(%rbx,%rax,4), %rax
    00000146: 	movq	%rax, 0x70(%rsp)
    0000014b: 	leaq	(%rbp,%r11), %rax
    00000150: 	movq	%rax, 0x78(%rsp)
    00000155: 	leal	(%rcx,%rdx), %eax
    00000158: 	cltq
    0000015a: 	leaq	(%rbx,%rax,4), %rax
    0000015e: 	movq	%rax, 0x80(%rsp)
    00000166: 	leal	(%rdx,%r15), %eax
    0000016a: 	cltq
    0000016c: 	leaq	(%rbx,%rax,4), %rax
    00000170: 	movq	%rax, 0x88(%rsp)
    00000178: 	leal	(%rcx,%rsi), %eax
    0000017b: 	cltq
    0000017d: 	leaq	(%rbx,%rax,4), %rax
    00000181: 	movq	%rax, 0x90(%rsp)
    00000189: 	leal	(%rsi,%r15), %eax
    0000018d: 	cltq
    0000018f: 	shlq	$0x2, %rax
    00000193: 	leaq	(%rbx,%rax), %rcx
    00000197: 	addq	%rbp, %rax
    0000019a: 	movq	%rcx, 0x98(%rsp)
    000001a2: 	leaq	0x4(%rbx), %rcx
    000001a6: 	movq	%rax, 0xa0(%rsp)
    000001ae: 	leal	-0x3(%r10), %eax
    000001b2: 	leaq	(%rcx,%rax,4), %rdx
    000001b6: 	movq	%rdx, 0xb8(%rsp)
    000001be: 	leal	(%r14,%r14), %edx
    000001c2: 	movslq	%edx, %rdx
    000001c5: 	shlq	$0x2, %rdx
    000001c9: 	movq	%rdx, 0xb0(%rsp)
    000001d1: 	leaq	0x4(%rdi), %rdx
    000001d5: 	leaq	(%rbp,%rdx), %rdi
    000001da: 	leaq	(%rbx,%rdx), %r15
    000001de: 	leaq	(%r8,%rax), %rdx
    000001e2: 	movq	%rdi, 0x10(%rsp)
    000001e7: 	addq	$0x2, %rax
    000001eb: 	leaq	(%rcx,%rdx,4), %rdi
    000001ef: 	movq	%rax, 0xa8(%rsp)
    000001f7: 	movq	%rdi, 0xc0(%rsp)
    000001ff: 	nop # Size: 1
.Ltmp3648:
    00000200: 	movslq	(%rbx), %rax
    00000203: 	movq	0x20(%rsp), %rdi
    00000208: 	movq	0x28(%rsp), %rcx
    0000020d: 	leaq	(%rax,%rax,8), %rdx
    00000211: 	leaq	(%rax,%rdx,2), %rdx
    00000215: 	movslq	0x4(%rbx), %rax
    00000219: 	leaq	(%rax,%rax,2), %rax
    0000021d: 	leaq	(%rdx,%rax,2), %rdx
    00000221: 	movslq	(%rdi), %rax
    00000224: 	leaq	(%rax,%rax,2), %rax
    00000228: 	leaq	(%rdx,%rax,2), %rax
    0000022c: 	movslq	(%rcx), %rdx
    0000022f: 	addq	%rdx, %rax
    00000232: 	leaq	0x2f(%rax), %rdx
    00000236: 	addq	$0x10, %rax
    0000023a: 	cmovnsq	%rax, %rdx
    0000023e: 	movl	$0x1, %eax
    00000243: 	sarq	$0x5, %rdx
    00000247: 	cmpl	$0x1, 0xc(%rsp)
    0000024c: 	movl	%edx, (%rbp)
    0000024f: 	movq	%rdi, %rdx
    00000252: 	movq	0xa8(%rsp), %rdi
    0000025a: 	jle	.Ltmp3640 # Offset: 602
    0000025c: 	nopl	(%rax) # Size: 4
.Ltmp3641:
    00000260: 	movslq	-0x4(%rbx,%rax,4), %rcx
    00000265: 	leaq	(%rcx,%rcx,2), %rsi
    00000269: 	movslq	(%rbx,%rax,4), %rcx
    0000026d: 	leaq	(%rcx,%rcx,2), %r8
    00000271: 	leaq	(%rcx,%r8,4), %rcx
    00000275: 	leaq	(%rcx,%rsi,2), %rsi
    00000279: 	movslq	0x4(%rbx,%rax,4), %rcx
    0000027e: 	leaq	(%rcx,%rcx,2), %rcx
    00000282: 	leaq	(%rsi,%rcx,2), %rsi
    00000286: 	movslq	(%rdx), %rcx
    00000289: 	addq	%rsi, %rcx
    0000028c: 	movslq	0x4(%rdx), %rsi
    00000290: 	leaq	(%rsi,%rsi,4), %rsi
    00000294: 	addq	%rcx, %rsi
    00000297: 	movslq	0x8(%rdx), %rcx
    0000029b: 	addq	%rsi, %rcx
    0000029e: 	leaq	0x2f(%rcx), %rsi
    000002a2: 	addq	$0x10, %rcx
    000002a6: 	cmovsq	%rsi, %rcx
    000002aa: 	addq	$0x4, %rdx
    000002ae: 	sarq	$0x5, %rcx
    000002b2: 	movl	%ecx, (%rbp,%rax,4)
    000002b6: 	addq	$0x1, %rax
    000002ba: 	cmpq	%rax, %rdi
    000002bd: 	jne	.Ltmp3641 # Offset: 701
.Ltmp3640:
    000002bf: 	movslq	(%r13), %rax
    000002c3: 	movq	0x40(%rsp), %rdi
    000002c8: 	leaq	(%rax,%rax,2), %rdx
    000002cc: 	movq	0x30(%rsp), %rax
    000002d1: 	movslq	(%rax), %rax
    000002d4: 	leaq	(%rax,%rax,8), %rcx
    000002d8: 	leaq	(%rax,%rcx,2), %rax
    000002dc: 	leaq	(%rax,%rdx,2), %rdx
    000002e0: 	movq	0x38(%rsp), %rax
    000002e5: 	movslq	(%rax), %rax
    000002e8: 	addq	%rdx, %rax
    000002eb: 	movslq	(%rdi), %rdx
    000002ee: 	movq	0x48(%rsp), %rdi
    000002f3: 	leaq	(%rdx,%rdx,2), %rdx
    000002f7: 	leaq	(%rax,%rdx,2), %rdx
    000002fb: 	leaq	0x2f(%rdx), %rax
    000002ff: 	addq	$0x10, %rdx
    00000303: 	cmovnsq	%rdx, %rax
    00000307: 	sarq	$0x5, %rax
    0000030b: 	cmpl	$0x1, 0x18(%rsp)
    00000310: 	movl	%eax, (%rdi)
    00000312: 	jle	.Ltmp3642 # Offset: 786
    00000318: 	movq	0xb0(%rsp), %r11
    00000320: 	movq	%r12, %r9
    00000323: 	xorl	%r10d, %r10d
    00000326: 	movl	$0x1, %r14d
    0000032c: 	movq	0xb8(%rsp), %r8
    00000334: 	nopl	(%rax) # Size: 4
.Ltmp3645:
    00000338: 	movslq	(%rbx,%r10), %rax
    0000033c: 	addl	$0x1, %r14d
    00000340: 	leaq	(%rbx,%r11), %rdi
    00000344: 	leaq	(%rax,%rax,2), %rdx
    00000348: 	movslq	0x4(%rbx,%r10), %rax
    0000034d: 	leaq	(%rax,%rdx,2), %rdx
    00000351: 	movslq	(%rbx,%r9), %rax
    00000355: 	leaq	(%rax,%rax,2), %rcx
    00000359: 	leaq	(%rax,%rcx,4), %rax
    0000035d: 	leaq	(%rbx,%r10), %rcx
    00000361: 	addq	%rax, %rdx
    00000364: 	movslq	0x4(%rbx,%r9), %rax
    00000369: 	leaq	(%rax,%rax,4), %rax
    0000036d: 	addq	%rdx, %rax
    00000370: 	movslq	(%rbx,%r11), %rdx
    00000374: 	leaq	(%rdx,%rdx,2), %rdx
    00000378: 	leaq	(%rax,%rdx,2), %rdx
    0000037c: 	movslq	0x4(%rbx,%r11), %rax
    00000381: 	addq	%rdx, %rax
    00000384: 	leaq	0x2f(%rax), %rdx
    00000388: 	addq	$0x10, %rax
    0000038c: 	cmovnsq	%rax, %rdx
    00000390: 	sarq	$0x5, %rdx
    00000394: 	cmpl	$0x1, 0xc(%rsp)
    00000399: 	movl	%edx, (%rbp,%r9)
    0000039e: 	movq	%r9, %rdx
    000003a1: 	jle	.Ltmp3643 # Offset: 929
    000003a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3644:
    000003a8: 	movslq	0x4(%rcx), %rax
    000003ac: 	movslq	(%rcx), %rsi
    000003af: 	leaq	(%rax,%rax,4), %rax
    000003b3: 	addq	%rsi, %rax
    000003b6: 	movslq	0x8(%rcx), %rsi
    000003ba: 	addq	%rax, %rsi
    000003bd: 	movslq	(%rbx,%rdx), %rax
    000003c1: 	leaq	(%rax,%rax,4), %rax
    000003c5: 	addq	%rsi, %rax
    000003c8: 	movslq	0x4(%rbx,%rdx), %rsi
    000003cd: 	leaq	(%rax,%rsi,8), %rax
    000003d1: 	movslq	0x8(%rbx,%rdx), %rsi
    000003d6: 	leaq	(%rsi,%rsi,4), %rsi
    000003da: 	addq	%rax, %rsi
    000003dd: 	movslq	(%rdi), %rax
    000003e0: 	addq	%rsi, %rax
    000003e3: 	movslq	0x4(%rdi), %rsi
    000003e7: 	leaq	(%rsi,%rsi,4), %rsi
    000003eb: 	addq	%rax, %rsi
    000003ee: 	movslq	0x8(%rdi), %rax
    000003f2: 	addq	%rsi, %rax
    000003f5: 	leaq	0x2f(%rax), %rsi
    000003f9: 	addq	$0x10, %rax
    000003fd: 	cmovnsq	%rax, %rsi
    00000401: 	addq	$0x4, %rcx
    00000405: 	addq	$0x4, %rdi
    00000409: 	sarq	$0x5, %rsi
    0000040d: 	movl	%esi, 0x4(%rbp,%rdx)
    00000411: 	addq	$0x4, %rdx
    00000415: 	cmpq	%rcx, %r8
    00000418: 	jne	.Ltmp3644 # Offset: 1048
.Ltmp3643:
    0000041a: 	movslq	-0x4(%r15,%r10), %rax
    0000041f: 	movslq	(%r13,%r10), %rdx
    00000424: 	movq	0x10(%rsp), %rdi
    00000429: 	leaq	(%rax,%rax,2), %rax
    0000042d: 	leaq	(%rdx,%rax,2), %rdx
    00000431: 	movslq	(%r13,%r9), %rax
    00000436: 	leaq	(%rax,%rax,4), %rax
    0000043a: 	addq	%rdx, %rax
    0000043d: 	movslq	-0x4(%r15,%r9), %rdx
    00000442: 	leaq	(%rdx,%rdx,2), %rcx
    00000446: 	leaq	(%rdx,%rcx,4), %rdx
    0000044a: 	addq	%rax, %rdx
    0000044d: 	movslq	(%r13,%r11), %rax
    00000452: 	addq	%rdx, %rax
    00000455: 	movslq	-0x4(%r15,%r11), %rdx
    0000045a: 	leaq	(%rdx,%rdx,2), %rdx
    0000045e: 	leaq	(%rax,%rdx,2), %rdx
    00000462: 	leaq	0x2f(%rdx), %rax
    00000466: 	addq	$0x10, %rdx
    0000046a: 	cmovnsq	%rdx, %rax
    0000046e: 	addq	%r12, %r8
    00000471: 	addq	%r12, %r10
    00000474: 	addq	%r12, %r11
    00000477: 	sarq	$0x5, %rax
    0000047b: 	movl	%eax, -0x4(%rdi,%r9)
    00000480: 	addq	%r12, %r9
    00000483: 	cmpl	0x18(%rsp), %r14d
    00000488: 	jne	.Ltmp3645 # Offset: 1160
.Ltmp3642:
    0000048e: 	movq	0x50(%rsp), %rdi
    00000493: 	movslq	(%rdi), %rax
    00000496: 	leaq	(%rax,%rax,2), %rdx
    0000049a: 	movq	0x58(%rsp), %rax
    0000049f: 	movslq	(%rax), %rax
    000004a2: 	leaq	(%rax,%rdx,2), %rdx
    000004a6: 	movq	0x68(%rsp), %rax
    000004ab: 	movslq	(%rax), %rax
    000004ae: 	leaq	(%rax,%rax,8), %rcx
    000004b2: 	leaq	(%rax,%rcx,2), %rax
    000004b6: 	movq	0x70(%rsp), %rcx
    000004bb: 	addq	%rdx, %rax
    000004be: 	movslq	(%rcx), %rdx
    000004c1: 	movq	0x78(%rsp), %rcx
    000004c6: 	leaq	(%rdx,%rdx,2), %rdx
    000004ca: 	leaq	(%rax,%rdx,2), %rdx
    000004ce: 	leaq	0x2f(%rdx), %rax
    000004d2: 	addq	$0x10, %rdx
    000004d6: 	cmovnsq	%rdx, %rax
    000004da: 	movq	0x60(%rsp), %rdx
    000004df: 	sarq	$0x5, %rax
    000004e3: 	cmpl	$0x1, 0xc(%rsp)
    000004e8: 	movl	%eax, (%rcx)
    000004ea: 	movq	%rdi, %rax
    000004ed: 	movq	0xc0(%rsp), %rdi
    000004f5: 	jle	.Ltmp3646 # Offset: 1269
    000004f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3647:
    00000500: 	movslq	0x4(%rax), %rcx
    00000504: 	movslq	(%rax), %r8
    00000507: 	leaq	(%rcx,%rcx,4), %rsi
    0000050b: 	movslq	0x8(%rax), %rcx
    0000050f: 	addq	%r8, %rsi
    00000512: 	addq	%rsi, %rcx
    00000515: 	movslq	(%rbx,%rdx), %rsi
    00000519: 	leaq	(%rsi,%rsi,2), %rsi
    0000051d: 	leaq	(%rcx,%rsi,2), %rsi
    00000521: 	movslq	0x4(%rbx,%rdx), %rcx
    00000526: 	leaq	(%rcx,%rcx,2), %r8
    0000052a: 	leaq	(%rcx,%r8,4), %rcx
    0000052e: 	addq	%rsi, %rcx
    00000531: 	movslq	0x8(%rbx,%rdx), %rsi
    00000536: 	leaq	(%rsi,%rsi,2), %rsi
    0000053a: 	leaq	(%rcx,%rsi,2), %rsi
    0000053e: 	leaq	0x2f(%rsi), %rcx
    00000542: 	addq	$0x10, %rsi
    00000546: 	cmovnsq	%rsi, %rcx
    0000054a: 	addq	$0x4, %rax
    0000054e: 	sarq	$0x5, %rcx
    00000552: 	movl	%ecx, 0x4(%rbp,%rdx)
    00000556: 	addq	$0x4, %rdx
    0000055a: 	cmpq	%rdi, %rax
    0000055d: 	jne	.Ltmp3647 # Offset: 1373
.Ltmp3646:
    0000055f: 	movq	0x80(%rsp), %rax
    00000567: 	movslq	(%rax), %rdx
    0000056a: 	movq	0x88(%rsp), %rax
    00000572: 	movslq	(%rax), %rax
    00000575: 	leaq	(%rax,%rax,2), %rax
    00000579: 	leaq	(%rdx,%rax,2), %rdx
    0000057d: 	movq	0x90(%rsp), %rax
    00000585: 	movslq	(%rax), %rax
    00000588: 	leaq	(%rax,%rax,2), %rax
    0000058c: 	leaq	(%rdx,%rax,2), %rdx
    00000590: 	movq	0x98(%rsp), %rax
    00000598: 	movslq	(%rax), %rax
    0000059b: 	leaq	(%rax,%rax,8), %rcx
    0000059f: 	leaq	(%rax,%rcx,2), %rax
    000005a3: 	addq	%rdx, %rax
    000005a6: 	leaq	0x2f(%rax), %rdx
    000005aa: 	addq	$0x10, %rax
    000005ae: 	cmovnsq	%rax, %rdx
    000005b2: 	movq	0xa0(%rsp), %rax
    000005ba: 	addl	$0x1, 0x1c(%rsp)
    000005bf: 	sarq	$0x5, %rdx
    000005c3: 	movl	%edx, (%rax)
    000005c5: 	movl	0x1c(%rsp), %eax
    000005c9: 	cmpl	%eax, iterations(%rip)
    000005cf: 	jg	.Ltmp3648 # Offset: 1487
.Ltmp3666:
    000005d5: 	movl	0xdc(%rsp), %eax
    000005dc: 	xorl	%edx, %edx
    000005de: 	addl	0xcc(%rsp), %eax
    000005e5: 	cmpl	$0x2, 0xc8(%rsp)
    000005ed: 	leal	(%rax,%rax), %r14d
    000005f1: 	jle	.Ltmp3649 # Offset: 1521
    000005f7: 	movl	0xcc(%rsp), %eax
    000005fe: 	movl	0xc8(%rsp), %ebx
    00000605: 	xorl	%edx, %edx
    00000607: 	movl	$0x1, %esi
    0000060c: 	movl	0xd8(%rsp), %r13d
    00000614: 	leal	-0x2(%rax), %r10d
    00000618: 	leal	-0x1(%rax), %edi
    0000061b: 	leal	-0x3(%rax), %r11d
    0000061f: 	movl	%r10d, %eax
    00000622: 	leal	-0x1(%rbx), %r9d
    00000626: 	movl	%r10d, %ebx
    00000629: 	shrl	$0x2, %eax
    0000062c: 	andl	$-0x4, %ebx
    0000062f: 	movl	%r13d, %ecx
    00000632: 	leal	-0x1(%rax), %r8d
    00000636: 	leal	0x1(%rbx), %r12d
    0000063a: 	addq	$0x1, %r8
    0000063e: 	shlq	$0x4, %r8
    00000642: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3653:
    00000648: 	cmpl	$0x1, %edi
    0000064b: 	jle	.Ltmp3650 # Offset: 1611
    00000651: 	cmpl	$0x2, %r11d
    00000655: 	jbe	.Ltmp3651 # Offset: 1621
    0000065b: 	movslq	%ecx, %rax
    0000065e: 	pxor	%xmm0, %xmm0
    00000662: 	leaq	0x4(%rbp,%rax,4), %rax
    00000667: 	leaq	(%r8,%rax), %r15
    0000066b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3652:
    00000670: 	movdqu	(%rax), %xmm2
    00000674: 	addq	$0x10, %rax
    00000678: 	paddd	%xmm2, %xmm0
    0000067c: 	cmpq	%r15, %rax
    0000067f: 	jne	.Ltmp3652 # Offset: 1663
    00000681: 	movdqa	%xmm0, %xmm1
    00000685: 	psrldq	$0x8, %xmm1
    0000068a: 	paddd	%xmm1, %xmm0
    0000068e: 	movdqa	%xmm0, %xmm1
    00000692: 	psrldq	$0x4, %xmm1
    00000697: 	paddd	%xmm1, %xmm0
    0000069b: 	movd	%xmm0, %eax
    0000069f: 	addl	%eax, %edx
    000006a1: 	movl	%r12d, %eax
    000006a4: 	cmpl	%ebx, %r10d
    000006a7: 	je	.Ltmp3650 # Offset: 1703
.Ltmp3662:
    000006a9: 	leal	(%rcx,%rax), %r15d
    000006ad: 	movslq	%r15d, %r15
    000006b0: 	addl	(%rbp,%r15,4), %edx
    000006b5: 	leal	0x1(%rax), %r15d
    000006b9: 	cmpl	%edi, %r15d
    000006bc: 	jge	.Ltmp3650 # Offset: 1724
    000006be: 	addl	%ecx, %r15d
    000006c1: 	addl	$0x2, %eax
    000006c4: 	movslq	%r15d, %r15
    000006c7: 	addl	(%rbp,%r15,4), %edx
    000006cc: 	cmpl	%eax, %edi
    000006ce: 	jle	.Ltmp3650 # Offset: 1742
    000006d0: 	addl	%ecx, %eax
    000006d2: 	cltq
    000006d4: 	addl	(%rbp,%rax,4), %edx
.Ltmp3650:
    000006d8: 	addl	$0x1, %esi
    000006db: 	addl	%r13d, %ecx
    000006de: 	cmpl	%r9d, %esi
    000006e1: 	jne	.Ltmp3653 # Offset: 1761
.Ltmp3649:
    000006e7: 	cvttsd2si	init_value(%rip), %ecx
    000006ef: 	movl	0xc8(%rsp), %eax
    000006f6: 	imull	0xcc(%rsp), %eax
    000006fe: 	subl	%r14d, %eax
    00000701: 	imull	%ecx, %eax
    00000704: 	cmpl	%edx, %eax
    00000706: 	je	.Ltmp3654 # Offset: 1798
    00000708: 	movq	0xd0(%rsp), %rax
    00000710: 	leaq	DATAat0x381c8(%rip), %rsi
    00000717: 	movl	$0x1, %edi
    0000071c: 	movq	(%rax), %rdx
    0000071f: 	xorl	%eax, %eax
    00000721: 	callq	__printf_chk@PLT # Offset: 1825
.Ltmp3654:
    00000726: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000072d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000734: 	subq	$0x20, %rax
    00000738: 	cmpq	%rax, %rbx
    0000073b: 	je	.Ltmp3655 # Offset: 1851
    00000741: 	movq	0xd0(%rsp), %rax
    00000749: 	leaq	0x10(%rbx), %rdi
    0000074d: 	movq	%rdi, (%rbx)
    00000750: 	movq	(%rax), %rbp
    00000753: 	movq	0x8(%rax), %r12
    00000757: 	movq	%rbp, %rax
    0000075a: 	addq	%r12, %rax
    0000075d: 	je	.Ltmp3656 # Offset: 1885
    0000075f: 	testq	%rbp, %rbp
    00000762: 	je	.Ltmp3657 # Offset: 1890
.Ltmp3656:
    00000768: 	movq	%r12, 0xe0(%rsp)
    00000770: 	cmpq	$0xf, %r12
    00000774: 	ja	.Ltmp3658 # Offset: 1908
    0000077a: 	cmpq	$0x1, %r12
    0000077e: 	jne	.Ltmp3659 # Offset: 1918
    00000784: 	movzbl	(%rbp), %eax
    00000788: 	movb	%al, 0x10(%rbx)
.Ltmp3663:
    0000078b: 	movq	%r12, 0x8(%rbx)
    0000078f: 	movb	$0x0, (%rdi,%r12)
    00000794: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000079b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000007a2: 	addq	$0x20, %rax
    000007a6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000007ad: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000007b4: 	je	.Ltmp3660 # Offset: 1972
.Ltmp3664:
    000007ba: 	movq	-0x20(%rax), %rbp
    000007be: 	callq	clock@PLT # Offset: 1982
    000007c3: 	movq	%rax, end_time(%rip)
    000007ca: 	movq	0xe8(%rsp), %rdx
    000007d2: 	subq	%fs:0x28, %rdx
    000007db: 	jne	.Ltmp3661 # Offset: 2011
    000007e1: 	subq	start_time(%rip), %rax
    000007e8: 	pxor	%xmm0, %xmm0
    000007ec: 	movq	%rbp, %rdi
    000007ef: 	cvtsi2sd	%rax, %xmm0
    000007f4: 	divsd	DATAat0x38a48(%rip), %xmm0
    000007fc: 	addq	$0xf8, %rsp
    00000803: 	popq	%rbx
    00000804: 	popq	%rbp
    00000805: 	popq	%r12
    00000807: 	popq	%r13
    00000809: 	popq	%r14
    0000080b: 	popq	%r15
    0000080d: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 2061
.Ltmp3651:
    00000812: 	movl	$0x1, %eax
    00000817: 	jmp	.Ltmp3662 # Offset: 2071
.Ltmp3658:
    0000081c: 	movq	%rbx, %rdi
    0000081f: 	leaq	0xe0(%rsp), %rsi
    00000827: 	xorl	%edx, %edx
    00000829: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2089
    0000082e: 	movq	%rax, (%rbx)
    00000831: 	movq	%rax, %rdi
    00000834: 	movq	0xe0(%rsp), %rax
    0000083c: 	movq	%rax, 0x10(%rbx)
.Ltmp3665:
    00000840: 	movq	%r12, %rdx
    00000843: 	movq	%rbp, %rsi
    00000846: 	callq	memcpy@PLT # Offset: 2118
    0000084b: 	movq	0xe0(%rsp), %r12
    00000853: 	movq	(%rbx), %rdi
    00000856: 	jmp	.Ltmp3663 # Offset: 2134
.Ltmp3655:
    0000085b: 	movq	0xd0(%rsp), %rsi
    00000863: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000086a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 2154
    0000086f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000876: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000087d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000884: 	jne	.Ltmp3664 # Offset: 2180
.Ltmp3660:
    0000088a: 	movq	-0x8(%rdx), %rax
    0000088e: 	addq	$0x200, %rax
    00000894: 	jmp	.Ltmp3664 # Offset: 2196
.Ltmp3659:
    00000899: 	testq	%r12, %r12
    0000089c: 	je	.Ltmp3663 # Offset: 2204
    000008a2: 	jmp	.Ltmp3665 # Offset: 2210
    000008a4: 	nopl	(%rax) # Size: 4
.Ltmp3639:
    000008a8: 	movl	0xc8(%rsp), %eax
    000008af: 	subl	$0x2, %eax
    000008b2: 	movl	%eax, 0xdc(%rsp)
    000008b9: 	jmp	.Ltmp3666 # Offset: 2233
.Ltmp3657:
    000008be: 	leaq	DATAat0x38158(%rip), %rdi
    000008c5: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 2245
.Ltmp3661:
    000008ca: 	callq	__stack_chk_fail@PLT # Offset: 2250
DWARF CFI Instructions:
    <empty>
End of Function "_Z15convolution2D_5IilEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15convolution2D_5IsiEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 284
  State       : disassembled
  Address     : 0x2ad80
  Size        : 0x1b57
  MaxSize     : 0x1b60
  Offset      : 0x2ad80
  Section     : .text
  Orc Section : .local.text._Z15convolution2D_5IsiEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0283:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x348, %rsp
    00000018: 	movq	%rsi, 0x68(%rsp)
    0000001d: 	movl	%edx, 0x2ac(%rsp)
    00000024: 	movl	%ecx, 0xa4(%rsp)
    0000002b: 	movl	%r8d, 0x328(%rsp)
    00000033: 	movq	%r9, 0x318(%rsp)
    0000003b: 	movq	%fs:0x28, %rax
    00000044: 	movq	%rax, 0x338(%rsp)
    0000004c: 	xorl	%eax, %eax
    0000004e: 	callq	clock@PLT # Offset: 78
    00000053: 	movq	%rax, start_time(%rip)
    0000005a: 	movl	iterations(%rip), %eax
    00000060: 	movl	%eax, 0x124(%rsp)
    00000067: 	testl	%eax, %eax
    00000069: 	jle	.Ltmp3667 # Offset: 105
    0000006f: 	movslq	0x328(%rsp), %r9
    00000077: 	leaq	(%r9,%r9), %r11
    0000007b: 	movq	%r9, %r12
    0000007e: 	leaq	(%r14,%r11), %rax
    00000082: 	movq	%r11, 0x30(%rsp)
    00000087: 	movq	%rax, 0x78(%rsp)
    0000008c: 	leaq	0x2(%r14,%r11), %rax
    00000091: 	movq	%rax, 0x90(%rsp)
    00000099: 	movl	0xa4(%rsp), %eax
    000000a0: 	leal	-0x2(%rax), %r15d
    000000a4: 	leal	-0x1(%rax), %r13d
    000000a8: 	addl	%r15d, %r12d
    000000ab: 	movslq	%r13d, %rax
    000000ae: 	movslq	%r15d, %rdi
    000000b1: 	movl	%r15d, 0x70(%rsp)
    000000b6: 	leaq	(%rax,%rax), %rdx
    000000ba: 	movslq	%r12d, %rax
    000000bd: 	movq	%rdi, 0x38(%rsp)
    000000c2: 	leaq	(%r14,%rdi,2), %rdi
    000000c6: 	leaq	(%r14,%rax,2), %rbx
    000000ca: 	leal	(%r13,%r9), %eax
    000000cf: 	movq	%rdi, 0xb8(%rsp)
    000000d7: 	cltq
    000000d9: 	leaq	(%r14,%rdx), %rdi
    000000dd: 	movq	%rbx, 0xc8(%rsp)
    000000e5: 	movq	0x68(%rsp), %rbx
    000000ea: 	movq	%rdi, 0xc0(%rsp)
    000000f2: 	leaq	(%r14,%rax,2), %rdi
    000000f6: 	movq	%rdi, 0xd0(%rsp)
    000000fe: 	movl	0x2ac(%rsp), %edi
    00000105: 	addq	%rbx, %rdx
    00000108: 	movq	%rdx, 0xd8(%rsp)
    00000110: 	leal	-0x1(%rdi), %ecx
    00000113: 	movl	%ecx, 0x48(%rsp)
    00000117: 	leal	-0x2(%rdi), %ecx
    0000011a: 	movl	%ecx, 0x32c(%rsp)
    00000121: 	imull	%r9d, %ecx
    00000125: 	movslq	%ecx, %r10
    00000128: 	leal	0x1(%rcx), %eax
    0000012b: 	leal	(%rcx,%r9), %esi
    0000012f: 	leaq	(%r10,%r10), %r8
    00000133: 	cltq
    00000135: 	leaq	(%r14,%r8), %rdi
    00000139: 	movq	%rdi, 0x88(%rsp)
    00000141: 	leaq	(%r14,%rax,2), %rdi
    00000145: 	movslq	%esi, %rax
    00000148: 	leaq	(%rax,%rax), %rbp
    0000014c: 	leal	0x1(%rsi), %eax
    0000014f: 	movq	%rdi, 0xe0(%rsp)
    00000157: 	cltq
    00000159: 	leaq	(%r14,%rbp), %rdi
    0000015d: 	movq	%rbp, 0x2b0(%rsp)
    00000165: 	movq	%rdi, 0x98(%rsp)
    0000016d: 	leaq	(%r14,%rax,2), %rdi
    00000171: 	leal	(%rcx,%r15), %eax
    00000175: 	movq	%rdi, 0xe8(%rsp)
    0000017d: 	cltq
    0000017f: 	movq	%rbx, %rdi
    00000182: 	addq	%rbp, %rbx
    00000185: 	movq	%rbx, 0xf0(%rsp)
    0000018d: 	leaq	(%r14,%rax,2), %rbx
    00000191: 	leal	(%r13,%rcx), %eax
    00000196: 	cltq
    00000198: 	movq	%rbx, 0xf8(%rsp)
    000001a0: 	leaq	(%r14,%rax,2), %rbx
    000001a4: 	leal	(%rsi,%r15), %eax
    000001a8: 	cltq
    000001aa: 	movq	%rbx, 0x100(%rsp)
    000001b2: 	leaq	(%r14,%rax,2), %rbx
    000001b6: 	leal	(%r13,%rsi), %eax
    000001bb: 	cltq
    000001bd: 	movq	%rbx, 0x108(%rsp)
    000001c5: 	addq	%rax, %rax
    000001c8: 	leaq	(%r14,%rax), %rbx
    000001cc: 	movq	%rbx, 0x110(%rsp)
    000001d4: 	movq	%rax, %rbx
    000001d7: 	movl	0xa4(%rsp), %eax
    000001de: 	addq	%rdi, %rbx
    000001e1: 	movq	%rbx, 0x118(%rsp)
    000001e9: 	movq	%rdi, %rbx
    000001ec: 	leal	-0x3(%rax), %ebp
    000001ef: 	subq	%r14, %rbx
    000001f2: 	cmpq	$0x10, %rbx
    000001f6: 	movq	%rdi, %rbx
    000001f9: 	seta	%dl
    000001fc: 	cmpl	$0x6, %ebp
    000001ff: 	seta	%al
    00000202: 	andl	%eax, %edx
    00000204: 	leaq	0x2(%rdi), %rax
    00000208: 	subq	0x90(%rsp), %rax
    00000210: 	cmpq	$0x10, %rax
    00000214: 	movb	%dl, 0x145(%rsp)
    0000021b: 	seta	%al
    0000021e: 	andl	%edx, %eax
    00000220: 	movb	%al, 0x147(%rsp)
    00000227: 	leaq	0x4(%r14,%r11), %rax
    0000022c: 	movl	%r15d, %r11d
    0000022f: 	shrl	$0x3, %r15d
    00000233: 	movq	%rax, 0x170(%rsp)
    0000023b: 	movl	%r15d, %eax
    0000023e: 	andl	$-0x8, %r11d
    00000242: 	subl	$0x1, %eax
    00000245: 	leal	0x1(%r11), %edx
    00000249: 	addq	$0x1, %rax
    0000024d: 	shlq	$0x4, %rax
    00000251: 	movq	%rax, %r15
    00000254: 	movslq	%r11d, %rax
    00000257: 	leaq	(%r14,%rax,2), %rax
    0000025b: 	movq	%rax, 0x1b0(%rsp)
    00000263: 	movslq	%edx, %rax
    00000266: 	leaq	(%rax,%rax), %rdi
    0000026a: 	movq	%rax, 0x60(%rsp)
    0000026f: 	leaq	(%r14,%rdi), %rax
    00000273: 	movl	%r11d, 0x4c(%rsp)
    00000278: 	addq	%rbx, %rdi
    0000027b: 	movq	%rax, 0x1b8(%rsp)
    00000283: 	leal	0x2(%r11), %eax
    00000287: 	movl	%eax, 0xa0(%rsp)
    0000028e: 	cltq
    00000290: 	leaq	(%rax,%rax), %r11
    00000294: 	movq	%rdi, 0x1e0(%rsp)
    0000029c: 	movl	0x4c(%rsp), %edi
    000002a0: 	leaq	(%r14,%r11), %rax
    000002a4: 	movq	%rax, 0x1c0(%rsp)
    000002ac: 	movl	0x4c(%rsp), %eax
    000002b0: 	addl	%r9d, %eax
    000002b3: 	cltq
    000002b5: 	leaq	(%r14,%rax,2), %rax
    000002b9: 	movq	%rax, 0x1c8(%rsp)
    000002c1: 	leal	(%r9,%rdx), %eax
    000002c5: 	cltq
    000002c7: 	leaq	(%r14,%rax,2), %rax
    000002cb: 	movq	%rax, 0x1d0(%rsp)
    000002d3: 	movl	0xa0(%rsp), %eax
    000002da: 	addl	%r9d, %eax
    000002dd: 	cltq
    000002df: 	leaq	(%r14,%rax,2), %rax
    000002e3: 	movq	%rax, 0x1d8(%rsp)
    000002eb: 	leal	0x3(%rdi), %eax
    000002ee: 	movl	%eax, 0xb0(%rsp)
    000002f5: 	cltq
    000002f7: 	leaq	(%rax,%rax), %rdi
    000002fb: 	leaq	(%r14,%rdi), %rax
    000002ff: 	addq	%rbx, %rdi
    00000302: 	movq	%rax, 0x200(%rsp)
    0000030a: 	movl	0xb0(%rsp), %eax
    00000311: 	movq	%rdi, 0x258(%rsp)
    00000319: 	movl	0x4c(%rsp), %edi
    0000031d: 	addl	%r9d, %eax
    00000320: 	cltq
    00000322: 	addl	$0x5, %edi
    00000325: 	leaq	(%r14,%rax,2), %rax
    00000329: 	movl	%edi, 0x120(%rsp)
    00000330: 	movq	%rax, 0x208(%rsp)
    00000338: 	movq	%r11, %rax
    0000033b: 	movl	0x4c(%rsp), %r11d
    00000340: 	addq	%rbx, %rax
    00000343: 	movq	%rax, 0x210(%rsp)
    0000034b: 	leal	0x4(%r11), %eax
    0000034f: 	movl	%eax, 0xb4(%rsp)
    00000356: 	cltq
    00000358: 	leaq	(%rax,%rax), %r11
    0000035c: 	leaq	(%r14,%r11), %rax
    00000360: 	addq	%rbx, %r11
    00000363: 	movq	%rax, 0x248(%rsp)
    0000036b: 	movl	0xb4(%rsp), %eax
    00000372: 	movq	%r11, 0x270(%rsp)
    0000037a: 	movl	0x4c(%rsp), %r11d
    0000037f: 	addl	%r9d, %eax
    00000382: 	cltq
    00000384: 	addl	$0x6, %r11d
    00000388: 	leaq	(%r14,%rax,2), %rax
    0000038c: 	movl	%r11d, 0x140(%rsp)
    00000394: 	movq	%rax, 0x250(%rsp)
    0000039c: 	movslq	%edi, %rax
    0000039f: 	leaq	(%rax,%rax), %rdi
    000003a3: 	leaq	(%r14,%rdi), %rax
    000003a7: 	addq	%rbx, %rdi
    000003aa: 	movq	%rax, 0x260(%rsp)
    000003b2: 	movl	0x120(%rsp), %eax
    000003b9: 	addl	%r9d, %eax
    000003bc: 	cltq
    000003be: 	leaq	(%r14,%rax,2), %rax
    000003c2: 	movq	%rax, 0x268(%rsp)
    000003ca: 	movslq	%r11d, %rax
    000003cd: 	leaq	(%rax,%rax), %r11
    000003d1: 	leaq	(%r14,%r11), %rax
    000003d5: 	movq	%rax, 0x290(%rsp)
    000003dd: 	movl	0x140(%rsp), %eax
    000003e4: 	movq	%rdi, 0x2a0(%rsp)
    000003ec: 	movl	0x4c(%rsp), %edi
    000003f0: 	addl	%r9d, %eax
    000003f3: 	cltq
    000003f5: 	leaq	(%r14,%rax,2), %r12
    000003f9: 	movq	%r12, 0x298(%rsp)
    00000401: 	movq	%rbx, %r12
    00000404: 	leal	0x7(%rdi), %ebx
    00000407: 	addl	$0x8, %edi
    0000040a: 	movslq	%ebx, %rax
    0000040d: 	movl	%ebx, 0x2a8(%rsp)
    00000414: 	addq	%r12, %r11
    00000417: 	leaq	(%rax,%rax), %rbx
    0000041b: 	movq	%r11, 0x310(%rsp)
    00000423: 	movl	0x328(%rsp), %r11d
    0000042b: 	leaq	(%r14,%rbx), %rax
    0000042f: 	addq	%r12, %rbx
    00000432: 	movq	%rax, 0x300(%rsp)
    0000043a: 	movl	0x328(%rsp), %eax
    00000441: 	addl	0x2a8(%rsp), %eax
    00000448: 	movq	%rbx, 0x2e0(%rsp)
    00000450: 	cltq
    00000452: 	leaq	(%r14,%rax,2), %rax
    00000456: 	movq	%rax, 0x308(%rsp)
    0000045e: 	movslq	%edi, %rax
    00000461: 	leaq	(%r14,%rax,2), %rax
    00000465: 	movq	%rax, 0x2d0(%rsp)
    0000046d: 	leal	(%r11,%rdi), %eax
    00000471: 	cltq
    00000473: 	leaq	(%r14,%rax,2), %rax
    00000477: 	movq	%rax, 0x2d8(%rsp)
    0000047f: 	leal	(%r11,%r11), %eax
    00000483: 	leaq	0x2(%r14,%r8), %r11
    00000488: 	cltq
    0000048a: 	movq	%r11, 0x160(%rsp)
    00000492: 	leaq	0x4(%r14,%r8), %r8
    00000497: 	leaq	(%r14,%rax,2), %rbx
    0000049b: 	movq	%r8, 0x158(%rsp)
    000004a3: 	movq	%rbx, 0x138(%rsp)
    000004ab: 	movq	%r12, %rbx
    000004ae: 	addq	0x30(%rsp), %r12
    000004b3: 	movq	%r12, 0x130(%rsp)
    000004bb: 	leaq	(,%r9,4), %r12
    000004c3: 	movq	%r12, 0x128(%rsp)
    000004cb: 	movl	%ebp, %r12d
    000004ce: 	movq	0x2b0(%rsp), %rbp
    000004d6: 	movq	%r12, 0xa8(%rsp)
    000004de: 	leaq	0x2(%rbp), %r9
    000004e2: 	leaq	(%rbx,%r9), %r12
    000004e6: 	leaq	(%r14,%r9), %r8
    000004ea: 	movl	0xa0(%rsp), %r9d
    000004f2: 	movq	%r12, 0x168(%rsp)
    000004fa: 	subq	%r11, %r12
    000004fd: 	movl	0x4c(%rsp), %r11d
    00000502: 	cmpq	$0x10, %r12
    00000506: 	movq	%r8, 0x150(%rsp)
    0000050e: 	movzbl	0x145(%rsp), %r12d
    00000517: 	leaq	0x4(%r14,%rbp), %r8
    0000051c: 	seta	%al
    0000051f: 	movq	%r8, 0x148(%rsp)
    00000527: 	andl	%eax, %r12d
    0000052a: 	leal	(%rcx,%r11), %eax
    0000052e: 	cltq
    00000530: 	movb	%r12b, 0x146(%rsp)
    00000538: 	leaq	(%r14,%rax,2), %r8
    0000053c: 	leal	(%rcx,%rdx), %eax
    0000053f: 	cltq
    00000541: 	movq	%r8, 0x188(%rsp)
    00000549: 	leaq	(%r14,%rax,2), %r8
    0000054d: 	leal	(%rcx,%r9), %eax
    00000551: 	cltq
    00000553: 	movq	%r8, 0x190(%rsp)
    0000055b: 	leaq	(%r14,%rax,2), %r8
    0000055f: 	leal	(%rsi,%r11), %eax
    00000563: 	cltq
    00000565: 	movq	%r8, 0x1a8(%rsp)
    0000056d: 	leaq	(%r14,%rax,2), %r8
    00000571: 	leal	(%rsi,%rdx), %eax
    00000574: 	leal	(%rsi,%r9), %edx
    00000578: 	movq	%r8, 0x198(%rsp)
    00000580: 	cltq
    00000582: 	movl	0xb0(%rsp), %r11d
    0000058a: 	movslq	%edx, %rdx
    0000058d: 	addq	%rax, %rax
    00000590: 	movq	0xa8(%rsp), %r12
    00000598: 	movl	$0x0, 0x74(%rsp)
    000005a0: 	movdqa	DATAat0x38950(%rip), %xmm11
    000005a9: 	addq	%rdx, %rdx
    000005ac: 	leaq	(%r14,%rax), %r8
    000005b0: 	leaq	(%r14,%rdx), %r9
    000005b4: 	movq	%r8, 0x1a0(%rsp)
    000005bc: 	movq	%r9, 0x178(%rsp)
    000005c4: 	movq	%rax, %r9
    000005c7: 	leal	(%rcx,%r11), %eax
    000005cb: 	addq	%rbx, %r9
    000005ce: 	cltq
    000005d0: 	movq	%r9, 0x180(%rsp)
    000005d8: 	leaq	(%r14,%rax,2), %r9
    000005dc: 	leal	(%rsi,%r11), %eax
    000005e0: 	movl	0x120(%rsp), %r11d
    000005e8: 	cltq
    000005ea: 	movq	%r9, 0x1e8(%rsp)
    000005f2: 	leaq	(%rax,%rax), %r8
    000005f6: 	leaq	(%r14,%r8), %r9
    000005fa: 	addq	%rbx, %r8
    000005fd: 	movq	%r9, 0x1f0(%rsp)
    00000605: 	movq	%rdx, %r9
    00000608: 	movl	0xb4(%rsp), %edx
    0000060f: 	movq	%r8, 0x230(%rsp)
    00000617: 	addq	%rbx, %r9
    0000061a: 	leal	(%rcx,%rdx), %eax
    0000061d: 	movq	%r9, 0x1f8(%rsp)
    00000625: 	cltq
    00000627: 	leaq	(%r14,%rax,2), %rax
    0000062b: 	movq	%rax, 0x220(%rsp)
    00000633: 	leal	(%rsi,%rdx), %eax
    00000636: 	cltq
    00000638: 	leaq	(%rax,%rax), %rdx
    0000063c: 	leaq	(%r14,%rdx), %rax
    00000640: 	movq	%rax, 0x228(%rsp)
    00000648: 	leal	(%rcx,%r11), %eax
    0000064c: 	cltq
    0000064e: 	leaq	(%r14,%rax,2), %rax
    00000652: 	movq	%rax, 0x238(%rsp)
    0000065a: 	leal	(%rsi,%r11), %eax
    0000065e: 	movl	0x2a8(%rsp), %r11d
    00000666: 	cltq
    00000668: 	leaq	(%rax,%rax), %r8
    0000066c: 	leaq	(%r14,%r8), %rax
    00000670: 	addq	%rbx, %r8
    00000673: 	movq	%rax, 0x240(%rsp)
    0000067b: 	movq	%rdx, %rax
    0000067e: 	movl	0x140(%rsp), %edx
    00000685: 	addq	%rbx, %rax
    00000688: 	movq	%r8, 0x288(%rsp)
    00000690: 	movq	%rax, 0x218(%rsp)
    00000698: 	leal	(%rcx,%rdx), %eax
    0000069b: 	cltq
    0000069d: 	leaq	(%r14,%rax,2), %rax
    000006a1: 	movq	%rax, 0x278(%rsp)
    000006a9: 	leal	(%rsi,%rdx), %eax
    000006ac: 	cltq
    000006ae: 	leaq	(%rax,%rax), %rdx
    000006b2: 	leaq	(%r14,%rdx), %rax
    000006b6: 	addq	%rbx, %rdx
    000006b9: 	movq	%rax, 0x280(%rsp)
    000006c1: 	leal	(%rcx,%r11), %eax
    000006c5: 	cltq
    000006c7: 	movq	%rdx, 0x2f8(%rsp)
    000006cf: 	leaq	(%r14,%rax,2), %rax
    000006d3: 	movq	%rax, 0x2e8(%rsp)
    000006db: 	leal	(%rsi,%r11), %eax
    000006df: 	cltq
    000006e1: 	leaq	(%rax,%rax), %r8
    000006e5: 	leaq	(%r14,%r8), %rax
    000006e9: 	addq	%rbx, %r8
    000006ec: 	movq	%rax, 0x2f0(%rsp)
    000006f4: 	leal	(%rcx,%rdi), %eax
    000006f7: 	cltq
    000006f9: 	movq	%r8, 0x2b8(%rsp)
    00000701: 	leaq	(%r14,%rax,2), %rax
    00000705: 	movq	%rax, 0x2c8(%rsp)
    0000070d: 	leal	(%rsi,%rdi), %eax
    00000710: 	cltq
    00000712: 	leaq	(%r14,%rax,2), %rax
    00000716: 	movq	%rax, 0x2c0(%rsp)
    0000071e: 	leaq	(%r10,%r12), %rax
    00000722: 	leaq	0x2(%r14,%rax,2), %rax
    00000727: 	movq	%rax, 0x320(%rsp)
    0000072f: 	nop # Size: 1
.Ltmp3680:
    00000730: 	movswl	(%r14), %eax
    00000734: 	movq	0x90(%rsp), %rdi
    0000073c: 	leal	(%rax,%rax,8), %edx
    0000073f: 	leal	(%rax,%rdx,2), %edx
    00000742: 	movswl	0x2(%r14), %eax
    00000747: 	leal	(%rax,%rax,2), %eax
    0000074a: 	leal	(%rdx,%rax,2), %edx
    0000074d: 	movq	0x78(%rsp), %rax
    00000752: 	movswl	(%rax), %eax
    00000755: 	leal	(%rax,%rax,2), %eax
    00000758: 	leal	(%rdx,%rax,2), %eax
    0000075b: 	movswl	(%rdi), %edx
    0000075e: 	addl	%edx, %eax
    00000760: 	leal	0x2f(%rax), %edx
    00000763: 	addl	$0x10, %eax
    00000766: 	cmovnsl	%eax, %edx
    00000769: 	movq	0x68(%rsp), %rax
    0000076e: 	sarl	$0x5, %edx
    00000771: 	movw	%dx, (%rax)
    00000774: 	cmpl	$0x1, %r13d
    00000778: 	jle	.Ltmp3668 # Offset: 1912
    0000077e: 	cmpb	$0x0, 0x147(%rsp)
    00000786: 	je	.Ltmp3669 # Offset: 1926
    0000078c: 	movq	%rdi, %rcx
    0000078f: 	movq	0x78(%rsp), %rdx
    00000794: 	movq	0x68(%rsp), %rdi
    00000799: 	xorl	%eax, %eax
    0000079b: 	movdqa	DATAat0x38860(%rip), %xmm4
    000007a3: 	movq	0x170(%rsp), %rsi
    000007ab: 	pxor	%xmm14, %xmm14
    000007b0: 	movdqa	DATAat0x38950(%rip), %xmm15
    000007b9: 	movdqa	DATAat0x38960(%rip), %xmm12
    000007c2: 	movaps	%xmm4, (%rsp)
    000007c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3670:
    000007d0: 	movdqu	(%rdx,%rax), %xmm6
    000007d5: 	movdqu	(%r14,%rax), %xmm8
    000007db: 	pmullw	DATAat0x38930(%rip), %xmm8
    000007e4: 	movdqa	%xmm8, %xmm2
    000007e9: 	movdqu	0x2(%r14,%rax), %xmm1
    000007f0: 	movdqu	(%r14,%rax), %xmm5
    000007f6: 	movdqa	%xmm14, %xmm10
    000007fb: 	pmullw	DATAat0x38940(%rip), %xmm1
    00000803: 	movdqa	%xmm1, %xmm0
    00000807: 	pcmpgtw	%xmm6, %xmm10
    0000080c: 	movdqu	0x2(%r14,%rax), %xmm4
    00000813: 	pmulhw	DATAat0x38930(%rip), %xmm5
    0000081b: 	punpcklwd	%xmm5, %xmm2
    0000081f: 	pmulhw	DATAat0x38940(%rip), %xmm4
    00000827: 	punpcklwd	%xmm4, %xmm0
    0000082b: 	movdqu	0x4(%r14,%rax), %xmm7
    00000832: 	paddd	%xmm2, %xmm0
    00000836: 	movdqu	(%rsi,%rax), %xmm13
    0000083c: 	punpckhwd	%xmm5, %xmm8
    00000841: 	pmullw	DATAat0x38930(%rip), %xmm7
    00000849: 	movdqa	%xmm7, %xmm2
    0000084d: 	movdqu	0x4(%r14,%rax), %xmm3
    00000854: 	punpckhwd	%xmm4, %xmm1
    00000858: 	pmulhw	DATAat0x38930(%rip), %xmm3
    00000860: 	punpcklwd	%xmm3, %xmm2
    00000864: 	punpckhwd	%xmm3, %xmm7
    00000868: 	movdqu	(%rdx,%rax), %xmm3
    0000086d: 	paddd	%xmm8, %xmm1
    00000872: 	paddd	%xmm2, %xmm0
    00000876: 	movdqa	%xmm6, %xmm2
    0000087a: 	movdqu	(%rcx,%rax), %xmm6
    0000087f: 	paddd	%xmm7, %xmm1
    00000883: 	punpcklwd	%xmm10, %xmm2
    00000888: 	punpckhwd	%xmm10, %xmm3
    0000088d: 	paddd	%xmm2, %xmm0
    00000891: 	movdqu	(%rcx,%rax), %xmm2
    00000896: 	pmullw	%xmm15, %xmm6
    0000089b: 	paddd	%xmm3, %xmm1
    0000089f: 	pxor	%xmm3, %xmm3
    000008a3: 	pmulhw	%xmm15, %xmm2
    000008a8: 	movdqa	%xmm6, %xmm9
    000008ad: 	punpcklwd	%xmm2, %xmm9
    000008b2: 	punpckhwd	%xmm2, %xmm6
    000008b6: 	movdqu	(%rsi,%rax), %xmm2
    000008bb: 	paddd	%xmm9, %xmm0
    000008c0: 	movdqa	%xmm14, %xmm9
    000008c5: 	paddd	%xmm6, %xmm1
    000008c9: 	pcmpgtw	%xmm13, %xmm9
    000008ce: 	punpcklwd	%xmm9, %xmm13
    000008d3: 	punpckhwd	%xmm9, %xmm2
    000008d8: 	paddd	%xmm13, %xmm0
    000008dd: 	movdqa	(%rsp), %xmm13
    000008e3: 	paddd	%xmm2, %xmm1
    000008e7: 	pxor	%xmm2, %xmm2
    000008eb: 	paddd	%xmm13, %xmm0
    000008f0: 	paddd	%xmm13, %xmm1
    000008f5: 	pcmpgtd	%xmm0, %xmm3
    000008f9: 	pcmpgtd	%xmm1, %xmm2
    000008fd: 	pand	%xmm12, %xmm3
    00000902: 	pand	%xmm12, %xmm2
    00000907: 	paddd	%xmm2, %xmm1
    0000090b: 	paddd	%xmm3, %xmm0
    0000090f: 	psrad	$0x5, %xmm1
    00000914: 	psrad	$0x5, %xmm0
    00000919: 	movdqa	%xmm0, %xmm2
    0000091d: 	punpcklwd	%xmm1, %xmm0
    00000921: 	punpckhwd	%xmm1, %xmm2
    00000925: 	movdqa	%xmm0, %xmm1
    00000929: 	punpckhwd	%xmm2, %xmm1
    0000092d: 	punpcklwd	%xmm2, %xmm0
    00000931: 	punpcklwd	%xmm1, %xmm0
    00000935: 	movups	%xmm0, 0x2(%rdi,%rax)
    0000093a: 	addq	$0x10, %rax
    0000093e: 	cmpq	%r15, %rax
    00000941: 	jne	.Ltmp3670 # Offset: 2369
    00000947: 	movl	0x4c(%rsp), %edi
    0000094b: 	cmpl	%edi, 0x70(%rsp)
    0000094f: 	je	.Ltmp3668 # Offset: 2383
    00000955: 	movq	0x1b0(%rsp), %rax
    0000095d: 	movq	0x1b8(%rsp), %rsi
    00000965: 	movq	0x1c0(%rsp), %rdi
    0000096d: 	movq	0x1c8(%rsp), %rbx
    00000975: 	movswl	(%rax), %eax
    00000978: 	movq	0x1d0(%rsp), %r11
    00000980: 	leal	(%rax,%rax,2), %edx
    00000983: 	movswl	(%rsi), %eax
    00000986: 	leal	(%rax,%rax,2), %ecx
    00000989: 	leal	(%rax,%rcx,4), %eax
    0000098c: 	leal	(%rax,%rdx,2), %edx
    0000098f: 	movswl	(%rdi), %eax
    00000992: 	leal	(%rax,%rax,2), %eax
    00000995: 	leal	(%rdx,%rax,2), %eax
    00000998: 	movswl	(%rbx), %edx
    0000099b: 	movq	0x1d8(%rsp), %rbx
    000009a3: 	addl	%eax, %edx
    000009a5: 	movswl	(%r11), %eax
    000009a9: 	leal	(%rax,%rax,4), %eax
    000009ac: 	addl	%edx, %eax
    000009ae: 	movswl	(%rbx), %edx
    000009b1: 	addl	%edx, %eax
    000009b3: 	leal	0x2f(%rax), %edx
    000009b6: 	addl	$0x10, %eax
    000009b9: 	cmovnsl	%eax, %edx
    000009bc: 	movq	0x1e0(%rsp), %rax
    000009c4: 	sarl	$0x5, %edx
    000009c7: 	movw	%dx, (%rax)
    000009ca: 	cmpl	0xa0(%rsp), %r13d
    000009d2: 	jle	.Ltmp3668 # Offset: 2514
    000009d8: 	movswl	(%rsi), %eax
    000009db: 	movq	0x200(%rsp), %rsi
    000009e3: 	leal	(%rax,%rax,2), %edx
    000009e6: 	movswl	(%rdi), %eax
    000009e9: 	leal	(%rax,%rax,2), %ecx
    000009ec: 	leal	(%rax,%rcx,4), %eax
    000009ef: 	leal	(%rax,%rdx,2), %edx
    000009f2: 	movswl	(%rsi), %eax
    000009f5: 	leal	(%rax,%rax,2), %eax
    000009f8: 	leal	(%rdx,%rax,2), %eax
    000009fb: 	movswl	(%r11), %edx
    000009ff: 	movq	0x208(%rsp), %r11
    00000a07: 	addl	%eax, %edx
    00000a09: 	movswl	(%rbx), %eax
    00000a0c: 	leal	(%rax,%rax,4), %eax
    00000a0f: 	addl	%edx, %eax
    00000a11: 	movswl	(%r11), %edx
    00000a15: 	addl	%edx, %eax
    00000a17: 	leal	0x2f(%rax), %edx
    00000a1a: 	addl	$0x10, %eax
    00000a1d: 	cmovnsl	%eax, %edx
    00000a20: 	movq	0x210(%rsp), %rax
    00000a28: 	sarl	$0x5, %edx
    00000a2b: 	movw	%dx, (%rax)
    00000a2e: 	cmpl	0xb0(%rsp), %r13d
    00000a36: 	jle	.Ltmp3668 # Offset: 2614
    00000a3c: 	movswl	(%rdi), %eax
    00000a3f: 	movq	%rsi, %rdi
    00000a42: 	leal	(%rax,%rax,2), %edx
    00000a45: 	movswl	(%rsi), %eax
    00000a48: 	movq	0x248(%rsp), %rsi
    00000a50: 	leal	(%rax,%rax,2), %ecx
    00000a53: 	leal	(%rax,%rcx,4), %eax
    00000a56: 	leal	(%rax,%rdx,2), %edx
    00000a59: 	movswl	(%rsi), %eax
    00000a5c: 	leal	(%rax,%rax,2), %eax
    00000a5f: 	leal	(%rdx,%rax,2), %eax
    00000a62: 	movswl	(%rbx), %edx
    00000a65: 	movq	%r11, %rbx
    00000a68: 	addl	%eax, %edx
    00000a6a: 	movswl	(%r11), %eax
    00000a6e: 	movq	0x250(%rsp), %r11
    00000a76: 	leal	(%rax,%rax,4), %eax
    00000a79: 	addl	%edx, %eax
    00000a7b: 	movswl	(%r11), %edx
    00000a7f: 	addl	%edx, %eax
    00000a81: 	leal	0x2f(%rax), %edx
    00000a84: 	addl	$0x10, %eax
    00000a87: 	cmovnsl	%eax, %edx
    00000a8a: 	movq	0x258(%rsp), %rax
    00000a92: 	sarl	$0x5, %edx
    00000a95: 	movw	%dx, (%rax)
    00000a98: 	cmpl	0xb4(%rsp), %r13d
    00000aa0: 	jle	.Ltmp3668 # Offset: 2720
    00000aa6: 	movswl	(%rdi), %eax
    00000aa9: 	movq	%rsi, %rdi
    00000aac: 	leal	(%rax,%rax,2), %edx
    00000aaf: 	movswl	(%rsi), %eax
    00000ab2: 	movq	0x268(%rsp), %rsi
    00000aba: 	leal	(%rax,%rax,2), %ecx
    00000abd: 	leal	(%rax,%rcx,4), %eax
    00000ac0: 	movq	0x260(%rsp), %rcx
    00000ac8: 	leal	(%rax,%rdx,2), %edx
    00000acb: 	movswl	(%rcx), %eax
    00000ace: 	leal	(%rax,%rax,2), %eax
    00000ad1: 	leal	(%rdx,%rax,2), %eax
    00000ad4: 	movswl	(%rbx), %edx
    00000ad7: 	addl	%eax, %edx
    00000ad9: 	movswl	(%r11), %eax
    00000add: 	leal	(%rax,%rax,4), %eax
    00000ae0: 	addl	%edx, %eax
    00000ae2: 	movswl	(%rsi), %edx
    00000ae5: 	addl	%edx, %eax
    00000ae7: 	leal	0x2f(%rax), %edx
    00000aea: 	addl	$0x10, %eax
    00000aed: 	cmovnsl	%eax, %edx
    00000af0: 	movq	0x270(%rsp), %rax
    00000af8: 	sarl	$0x5, %edx
    00000afb: 	movw	%dx, (%rax)
    00000afe: 	cmpl	0x120(%rsp), %r13d
    00000b06: 	jle	.Ltmp3668 # Offset: 2822
    00000b0c: 	movswl	(%rdi), %eax
    00000b0f: 	movq	%rcx, %rdi
    00000b12: 	movq	%rsi, %rbx
    00000b15: 	leal	(%rax,%rax,2), %edx
    00000b18: 	movswl	(%rcx), %eax
    00000b1b: 	leal	(%rax,%rax,2), %ecx
    00000b1e: 	leal	(%rax,%rcx,4), %eax
    00000b21: 	movq	0x290(%rsp), %rcx
    00000b29: 	leal	(%rax,%rdx,2), %edx
    00000b2c: 	movswl	(%rcx), %eax
    00000b2f: 	leal	(%rax,%rax,2), %eax
    00000b32: 	leal	(%rdx,%rax,2), %eax
    00000b35: 	movswl	(%r11), %edx
    00000b39: 	addl	%eax, %edx
    00000b3b: 	movswl	(%rsi), %eax
    00000b3e: 	movq	0x298(%rsp), %rsi
    00000b46: 	leal	(%rax,%rax,4), %eax
    00000b49: 	addl	%edx, %eax
    00000b4b: 	movswl	(%rsi), %edx
    00000b4e: 	addl	%edx, %eax
    00000b50: 	leal	0x2f(%rax), %edx
    00000b53: 	addl	$0x10, %eax
    00000b56: 	cmovnsl	%eax, %edx
    00000b59: 	movq	0x2a0(%rsp), %rax
    00000b61: 	sarl	$0x5, %edx
    00000b64: 	movw	%dx, (%rax)
    00000b67: 	cmpl	0x140(%rsp), %r13d
    00000b6f: 	jle	.Ltmp3668 # Offset: 2927
    00000b75: 	movswl	(%rdi), %eax
    00000b78: 	movq	%rcx, %rdi
    00000b7b: 	leal	(%rax,%rax,2), %edx
    00000b7e: 	movswl	(%rcx), %eax
    00000b81: 	leal	(%rax,%rax,2), %ecx
    00000b84: 	leal	(%rax,%rcx,4), %eax
    00000b87: 	movq	0x300(%rsp), %rcx
    00000b8f: 	leal	(%rax,%rdx,2), %edx
    00000b92: 	movswl	(%rcx), %eax
    00000b95: 	leal	(%rax,%rax,2), %eax
    00000b98: 	leal	(%rdx,%rax,2), %eax
    00000b9b: 	movswl	(%rbx), %edx
    00000b9e: 	movq	%rsi, %rbx
    00000ba1: 	addl	%eax, %edx
    00000ba3: 	movswl	(%rsi), %eax
    00000ba6: 	movq	0x308(%rsp), %rsi
    00000bae: 	leal	(%rax,%rax,4), %eax
    00000bb1: 	addl	%edx, %eax
    00000bb3: 	movswl	(%rsi), %edx
    00000bb6: 	addl	%edx, %eax
    00000bb8: 	leal	0x2f(%rax), %edx
    00000bbb: 	addl	$0x10, %eax
    00000bbe: 	cmovnsl	%eax, %edx
    00000bc1: 	movq	0x310(%rsp), %rax
    00000bc9: 	sarl	$0x5, %edx
    00000bcc: 	movw	%dx, (%rax)
    00000bcf: 	cmpl	0x2a8(%rsp), %r13d
    00000bd7: 	jle	.Ltmp3668 # Offset: 3031
    00000bd9: 	movswl	(%rdi), %eax
    00000bdc: 	movq	0x2d8(%rsp), %rdi
    00000be4: 	leal	(%rax,%rax,2), %edx
    00000be7: 	movswl	(%rcx), %eax
    00000bea: 	leal	(%rax,%rax,2), %ecx
    00000bed: 	leal	(%rax,%rcx,4), %eax
    00000bf0: 	leal	(%rax,%rdx,2), %edx
    00000bf3: 	movq	0x2d0(%rsp), %rax
    00000bfb: 	movswl	(%rax), %eax
    00000bfe: 	leal	(%rax,%rax,2), %eax
    00000c01: 	leal	(%rdx,%rax,2), %eax
    00000c04: 	movswl	(%rbx), %edx
    00000c07: 	addl	%eax, %edx
    00000c09: 	movswl	(%rsi), %eax
    00000c0c: 	leal	(%rax,%rax,4), %eax
    00000c0f: 	addl	%edx, %eax
    00000c11: 	movswl	(%rdi), %edx
    00000c14: 	addl	%edx, %eax
    00000c16: 	leal	0x2f(%rax), %edx
    00000c19: 	addl	$0x10, %eax
    00000c1c: 	cmovnsl	%eax, %edx
    00000c1f: 	movq	0x2e0(%rsp), %rax
    00000c27: 	sarl	$0x5, %edx
    00000c2a: 	movw	%dx, (%rax)
.Ltmp3668:
    00000c2d: 	movq	0xb8(%rsp), %rax
    00000c35: 	movq	0xd0(%rsp), %rdi
    00000c3d: 	movswl	(%rax), %eax
    00000c40: 	leal	(%rax,%rax,2), %edx
    00000c43: 	movq	0xc0(%rsp), %rax
    00000c4b: 	movswl	(%rax), %eax
    00000c4e: 	leal	(%rax,%rax,8), %ecx
    00000c51: 	leal	(%rax,%rcx,2), %eax
    00000c54: 	leal	(%rax,%rdx,2), %edx
    00000c57: 	movq	0xc8(%rsp), %rax
    00000c5f: 	movswl	(%rax), %eax
    00000c62: 	addl	%edx, %eax
    00000c64: 	movswl	(%rdi), %edx
    00000c67: 	movq	0xd8(%rsp), %rdi
    00000c6f: 	leal	(%rdx,%rdx,2), %edx
    00000c72: 	leal	(%rax,%rdx,2), %edx
    00000c75: 	leal	0x2f(%rdx), %eax
    00000c78: 	addl	$0x10, %edx
    00000c7b: 	cmovnsl	%edx, %eax
    00000c7e: 	sarl	$0x5, %eax
    00000c81: 	cmpl	$0x1, 0x48(%rsp)
    00000c86: 	movw	%ax, (%rdi)
    00000c89: 	jle	.Ltmp3671 # Offset: 3209
    00000c8f: 	movq	0x128(%rsp), %rax
    00000c97: 	movslq	0xa4(%rsp), %rbx
    00000c9f: 	movl	$0x1, 0x24(%rsp)
    00000ca7: 	movq	%r14, %rdx
    00000caa: 	movq	0x78(%rsp), %rcx
    00000caf: 	movq	%r15, 0x50(%rsp)
    00000cb4: 	pxor	%xmm4, %xmm4
    00000cb8: 	leaq	0x2(%rax), %r11
    00000cbc: 	addq	$0x4, %rax
    00000cc0: 	movq	0x130(%rsp), %rdi
    00000cc8: 	movq	%rbx, %r15
    00000ccb: 	movq	%r11, 0x40(%rsp)
    00000cd0: 	movq	0xa8(%rsp), %r11
    00000cd8: 	movq	%rax, 0x58(%rsp)
    00000cdd: 	movq	0x138(%rsp), %rsi
    00000ce5: 	leaq	0x2(%r11,%r11), %r11
    00000cea: 	movq	%r11, 0x80(%rsp)
    00000cf2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3676:
    00000cf8: 	movswl	(%rdx), %eax
    00000cfb: 	addl	$0x1, 0x24(%rsp)
    00000d00: 	leal	(%rax,%rax,2), %r8d
    00000d04: 	movswl	0x2(%rdx), %eax
    00000d08: 	leal	(%rax,%r8,2), %r8d
    00000d0c: 	movswl	(%rcx), %eax
    00000d0f: 	leal	(%rax,%rax,2), %r9d
    00000d13: 	leal	(%rax,%r9,4), %eax
    00000d17: 	addl	%eax, %r8d
    00000d1a: 	movswl	0x2(%rcx), %eax
    00000d1e: 	leal	(%rax,%rax,4), %eax
    00000d21: 	addl	%r8d, %eax
    00000d24: 	movswl	(%rsi), %r8d
    00000d28: 	leal	(%r8,%r8,2), %r8d
    00000d2c: 	leal	(%rax,%r8,2), %eax
    00000d30: 	movswl	0x2(%rsi), %r8d
    00000d35: 	addl	%r8d, %eax
    00000d38: 	leal	0x2f(%rax), %r8d
    00000d3c: 	addl	$0x10, %eax
    00000d3f: 	cmovnsl	%eax, %r8d
    00000d43: 	sarl	$0x5, %r8d
    00000d47: 	movw	%r8w, (%rdi)
    00000d4b: 	cmpl	$0x1, %r13d
    00000d4f: 	jle	.Ltmp3672 # Offset: 3407
    00000d55: 	movq	0x40(%rsp), %rax
    00000d5a: 	leaq	0x2(%rdi), %r8
    00000d5e: 	leaq	0x2(%rdx), %r9
    00000d62: 	leaq	(%rax,%rdx), %r10
    00000d66: 	movq	%r8, %rax
    00000d69: 	subq	%r9, %rax
    00000d6c: 	cmpq	$0x10, %rax
    00000d70: 	seta	%al
    00000d73: 	testb	%al, 0x145(%rsp)
    00000d7a: 	je	.Ltmp3673 # Offset: 3450
    00000d80: 	movq	%r8, %rax
    00000d83: 	subq	%r10, %rax
    00000d86: 	cmpq	$0x10, %rax
    00000d8a: 	jbe	.Ltmp3673 # Offset: 3466
    00000d90: 	movq	0x58(%rsp), %rax
    00000d95: 	movq	%rdi, 0x28(%rsp)
    00000d9a: 	leaq	0x4(%rdx), %r12
    00000d9e: 	leaq	0x2(%rcx), %rbp
    00000da2: 	movq	0x50(%rsp), %rdi
    00000da7: 	leaq	0x4(%rcx), %rbx
    00000dab: 	leaq	(%rax,%rdx), %r11
    00000daf: 	xorl	%eax, %eax
    00000db1: 	nopl	(%rax) # Size: 7
.Ltmp3674:
    00000db8: 	movdqu	(%r9,%rax), %xmm10
    00000dbe: 	movdqu	(%rdx,%rax), %xmm6
    00000dc3: 	movdqa	%xmm4, %xmm14
    00000dc8: 	movdqa	%xmm4, %xmm13
    00000dcd: 	movdqu	(%r9,%rax), %xmm5
    00000dd3: 	movdqu	(%rcx,%rax), %xmm9
    00000dd9: 	movdqa	%xmm4, %xmm15
    00000dde: 	pmullw	%xmm11, %xmm10
    00000de3: 	movdqu	(%r12,%rax), %xmm3
    00000de9: 	pcmpgtw	%xmm6, %xmm14
    00000dee: 	movdqa	%xmm6, %xmm0
    00000df2: 	pmulhw	%xmm11, %xmm5
    00000df7: 	movdqu	(%rcx,%rax), %xmm6
    00000dfc: 	pmullw	%xmm11, %xmm9
    00000e01: 	movdqu	(%rbx,%rax), %xmm7
    00000e06: 	pcmpgtw	%xmm3, %xmm13
    00000e0b: 	movdqu	(%rbx,%rax), %xmm2
    00000e10: 	movdqu	(%rbp,%rax), %xmm8
    00000e17: 	pmullw	DATAat0x38970(%rip), %xmm8
    00000e20: 	pmulhw	%xmm11, %xmm6
    00000e25: 	pmullw	%xmm11, %xmm7
    00000e2a: 	punpcklwd	%xmm14, %xmm0
    00000e2f: 	pmulhw	%xmm11, %xmm2
    00000e34: 	movdqa	%xmm10, %xmm1
    00000e39: 	punpcklwd	%xmm5, %xmm1
    00000e3d: 	punpckhwd	%xmm5, %xmm10
    00000e42: 	movdqu	(%rdx,%rax), %xmm5
    00000e47: 	paddd	%xmm1, %xmm0
    00000e4b: 	movdqa	%xmm3, %xmm1
    00000e4f: 	movdqu	(%rbp,%rax), %xmm3
    00000e55: 	pmulhw	DATAat0x38970(%rip), %xmm3
    00000e5d: 	punpcklwd	%xmm13, %xmm1
    00000e62: 	movaps	%xmm6, (%rsp)
    00000e66: 	punpckhwd	%xmm14, %xmm5
    00000e6b: 	paddd	%xmm1, %xmm0
    00000e6f: 	movdqa	%xmm9, %xmm1
    00000e74: 	paddd	%xmm10, %xmm5
    00000e79: 	movdqu	(%r12,%rax), %xmm10
    00000e7f: 	punpcklwd	%xmm6, %xmm1
    00000e83: 	punpckhwd	(%rsp), %xmm9
    00000e89: 	paddd	%xmm1, %xmm0
    00000e8d: 	movdqa	%xmm8, %xmm1
    00000e92: 	punpckhwd	%xmm13, %xmm10
    00000e97: 	punpcklwd	%xmm3, %xmm1
    00000e9b: 	paddd	%xmm5, %xmm10
    00000ea0: 	punpckhwd	%xmm3, %xmm8
    00000ea5: 	paddd	%xmm1, %xmm0
    00000ea9: 	movdqa	%xmm7, %xmm1
    00000ead: 	paddd	%xmm9, %xmm10
    00000eb2: 	punpcklwd	%xmm2, %xmm1
    00000eb6: 	punpckhwd	%xmm2, %xmm7
    00000eba: 	movdqu	(%rsi,%rax), %xmm2
    00000ebf: 	pxor	%xmm3, %xmm3
    00000ec3: 	paddd	%xmm1, %xmm0
    00000ec7: 	movdqu	(%rsi,%rax), %xmm1
    00000ecc: 	paddd	%xmm8, %xmm10
    00000ed1: 	paddd	%xmm10, %xmm7
    00000ed6: 	pcmpgtw	%xmm1, %xmm15
    00000edb: 	punpcklwd	%xmm15, %xmm1
    00000ee0: 	punpckhwd	%xmm15, %xmm2
    00000ee5: 	paddd	%xmm1, %xmm0
    00000ee9: 	movdqu	(%r10,%rax), %xmm1
    00000eef: 	paddd	%xmm2, %xmm7
    00000ef3: 	movdqu	(%r11,%rax), %xmm2
    00000ef9: 	pmullw	%xmm11, %xmm1
    00000efe: 	movdqa	%xmm1, %xmm6
    00000f02: 	movdqu	(%r10,%rax), %xmm1
    00000f08: 	movdqa	%xmm6, %xmm12
    00000f0d: 	pmulhw	%xmm11, %xmm1
    00000f12: 	punpcklwd	%xmm1, %xmm12
    00000f17: 	punpckhwd	%xmm1, %xmm6
    00000f1b: 	paddd	%xmm12, %xmm0
    00000f20: 	movdqa	%xmm4, %xmm12
    00000f25: 	paddd	%xmm6, %xmm7
    00000f29: 	movaps	%xmm0, 0x10(%rsp)
    00000f2e: 	movdqu	(%r11,%rax), %xmm0
    00000f34: 	movdqa	%xmm7, %xmm1
    00000f38: 	pcmpgtw	%xmm0, %xmm12
    00000f3d: 	punpckhwd	%xmm12, %xmm2
    00000f42: 	punpcklwd	%xmm12, %xmm0
    00000f47: 	paddd	0x10(%rsp), %xmm0
    00000f4d: 	paddd	%xmm2, %xmm1
    00000f51: 	paddd	DATAat0x38860(%rip), %xmm0
    00000f59: 	pxor	%xmm2, %xmm2
    00000f5d: 	paddd	DATAat0x38860(%rip), %xmm1
    00000f65: 	pcmpgtd	%xmm0, %xmm3
    00000f69: 	pand	DATAat0x38960(%rip), %xmm3
    00000f71: 	pcmpgtd	%xmm1, %xmm2
    00000f75: 	pand	DATAat0x38960(%rip), %xmm2
    00000f7d: 	paddd	%xmm3, %xmm0
    00000f81: 	paddd	%xmm2, %xmm1
    00000f85: 	psrad	$0x5, %xmm0
    00000f8a: 	psrad	$0x5, %xmm1
    00000f8f: 	movdqa	%xmm0, %xmm2
    00000f93: 	punpcklwd	%xmm1, %xmm0
    00000f97: 	punpckhwd	%xmm1, %xmm2
    00000f9b: 	movdqa	%xmm0, %xmm1
    00000f9f: 	punpcklwd	%xmm2, %xmm0
    00000fa3: 	punpckhwd	%xmm2, %xmm1
    00000fa7: 	punpcklwd	%xmm1, %xmm0
    00000fab: 	movups	%xmm0, (%r8,%rax)
    00000fb0: 	addq	$0x10, %rax
    00000fb4: 	cmpq	%rax, %rdi
    00000fb7: 	jne	.Ltmp3674 # Offset: 4023
    00000fbd: 	movq	0x28(%rsp), %rdi
    00000fc2: 	movl	0x4c(%rsp), %ebx
    00000fc6: 	cmpl	%ebx, 0x70(%rsp)
    00000fca: 	je	.Ltmp3672 # Offset: 4042
    00000fd0: 	movq	0x60(%rsp), %rax
    00000fd5: 	nopl	(%rax) # Size: 3
.Ltmp3675:
    00000fd8: 	movswl	(%rdx,%rax,2), %r8d
    00000fdd: 	movswl	-0x2(%rdx,%rax,2), %r9d
    00000fe3: 	leal	(%r8,%r8,4), %r8d
    00000fe7: 	addl	%r9d, %r8d
    00000fea: 	movswl	0x2(%rdx,%rax,2), %r9d
    00000ff0: 	addl	%r8d, %r9d
    00000ff3: 	movswl	-0x2(%rcx,%rax,2), %r8d
    00000ff9: 	leal	(%r8,%r8,4), %r8d
    00000ffd: 	addl	%r9d, %r8d
    00001000: 	movswl	(%rcx,%rax,2), %r9d
    00001005: 	leal	(%r8,%r9,8), %r10d
    00001009: 	movswl	0x2(%rcx,%rax,2), %r8d
    0000100f: 	leal	(%r8,%r8,4), %r9d
    00001013: 	movswl	-0x2(%rsi,%rax,2), %r8d
    00001019: 	addl	%r10d, %r9d
    0000101c: 	addl	%r9d, %r8d
    0000101f: 	movswl	(%rsi,%rax,2), %r9d
    00001024: 	leal	(%r9,%r9,4), %r9d
    00001028: 	addl	%r8d, %r9d
    0000102b: 	movswl	0x2(%rsi,%rax,2), %r8d
    00001031: 	addl	%r9d, %r8d
    00001034: 	leal	0x2f(%r8), %r9d
    00001038: 	addl	$0x10, %r8d
    0000103c: 	cmovsl	%r9d, %r8d
    00001040: 	sarl	$0x5, %r8d
    00001044: 	movw	%r8w, (%rdi,%rax,2)
    00001049: 	addq	$0x1, %rax
    0000104d: 	cmpl	%eax, %r13d
    00001050: 	jg	.Ltmp3675 # Offset: 4176
.Ltmp3672:
    00001052: 	movq	0x38(%rsp), %rbx
    00001057: 	movswl	-0x2(%rdx,%r15,2), %eax
    0000105d: 	movswl	(%rdx,%rbx,2), %r8d
    00001062: 	leal	(%rax,%rax,2), %eax
    00001065: 	leal	(%r8,%rax,2), %r8d
    00001069: 	movswl	(%rcx,%rbx,2), %eax
    0000106d: 	leal	(%rax,%rax,4), %eax
    00001070: 	addl	%r8d, %eax
    00001073: 	movswl	-0x2(%rcx,%r15,2), %r8d
    00001079: 	leal	(%r8,%r8,2), %r9d
    0000107d: 	leal	(%r8,%r9,4), %r8d
    00001081: 	addl	%eax, %r8d
    00001084: 	movswl	(%rsi,%rbx,2), %eax
    00001088: 	movl	0x48(%rsp), %ebx
    0000108c: 	addl	%r8d, %eax
    0000108f: 	movswl	-0x2(%rsi,%r15,2), %r8d
    00001095: 	leal	(%r8,%r8,2), %r8d
    00001099: 	leal	(%rax,%r8,2), %r8d
    0000109d: 	leal	0x2f(%r8), %eax
    000010a1: 	addl	$0x10, %r8d
    000010a5: 	cmovnsl	%r8d, %eax
    000010a9: 	sarl	$0x5, %eax
    000010ac: 	movw	%ax, -0x2(%rdi,%r15,2)
    000010b2: 	movq	0x30(%rsp), %rax
    000010b7: 	addq	%rax, %rdx
    000010ba: 	addq	%rax, %rcx
    000010bd: 	addq	%rax, %rsi
    000010c0: 	addq	%rax, %rdi
    000010c3: 	cmpl	%ebx, 0x24(%rsp)
    000010c7: 	jne	.Ltmp3676 # Offset: 4295
    000010cd: 	movq	0x50(%rsp), %r15
.Ltmp3671:
    000010d2: 	movq	0x88(%rsp), %rax
    000010da: 	movq	0xe8(%rsp), %rdi
    000010e2: 	movswl	(%rax), %eax
    000010e5: 	leal	(%rax,%rax,2), %edx
    000010e8: 	movq	0xe0(%rsp), %rax
    000010f0: 	movswl	(%rax), %eax
    000010f3: 	leal	(%rax,%rdx,2), %edx
    000010f6: 	movq	0x98(%rsp), %rax
    000010fe: 	movswl	(%rax), %eax
    00001101: 	leal	(%rax,%rax,8), %ecx
    00001104: 	leal	(%rax,%rcx,2), %eax
    00001107: 	addl	%edx, %eax
    00001109: 	movswl	(%rdi), %edx
    0000110c: 	movq	0xf0(%rsp), %rdi
    00001114: 	leal	(%rdx,%rdx,2), %edx
    00001117: 	leal	(%rax,%rdx,2), %edx
    0000111a: 	leal	0x2f(%rdx), %eax
    0000111d: 	addl	$0x10, %edx
    00001120: 	cmovnsl	%edx, %eax
    00001123: 	sarl	$0x5, %eax
    00001126: 	movw	%ax, (%rdi)
    00001129: 	cmpl	$0x1, %r13d
    0000112d: 	jle	.Ltmp3677 # Offset: 4397
    00001133: 	cmpb	$0x0, 0x146(%rsp)
    0000113b: 	je	.Ltmp3678 # Offset: 4411
    00001141: 	movdqa	DATAat0x38860(%rip), %xmm4
    00001149: 	xorl	%eax, %eax
    0000114b: 	movdqa	DATAat0x38930(%rip), %xmm12
    00001154: 	movq	0x88(%rsp), %rdx
    0000115c: 	movq	0x98(%rsp), %rcx
    00001164: 	movdqa	DATAat0x38950(%rip), %xmm15
    0000116d: 	movq	0x148(%rsp), %rsi
    00001175: 	movaps	%xmm4, (%rsp)
    00001179: 	movq	0x150(%rsp), %rdi
    00001181: 	movq	0x158(%rsp), %r8
    00001189: 	movq	0x160(%rsp), %r9
    00001191: 	movq	0x168(%rsp), %r10
    00001199: 	movdqa	DATAat0x38960(%rip), %xmm13
    000011a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3679:
    000011a8: 	movdqu	(%r9,%rax), %xmm8
    000011ae: 	movdqu	(%r9,%rax), %xmm4
    000011b4: 	pxor	%xmm10, %xmm10
    000011b9: 	pxor	%xmm9, %xmm9
    000011be: 	movdqu	(%rdx,%rax), %xmm6
    000011c3: 	movdqu	(%rcx,%rax), %xmm7
    000011c8: 	pmullw	%xmm15, %xmm8
    000011cd: 	pmulhw	%xmm15, %xmm4
    000011d2: 	movdqu	(%rcx,%rax), %xmm3
    000011d7: 	movdqu	(%rdi,%rax), %xmm2
    000011dc: 	pcmpgtw	%xmm6, %xmm10
    000011e1: 	movdqa	%xmm6, %xmm0
    000011e5: 	movdqu	(%r8,%rax), %xmm6
    000011eb: 	movdqu	(%rsi,%rax), %xmm5
    000011f0: 	pmullw	%xmm12, %xmm7
    000011f5: 	pmulhw	%xmm12, %xmm3
    000011fa: 	pmulhw	DATAat0x38940(%rip), %xmm2
    00001202: 	pcmpgtw	%xmm6, %xmm9
    00001207: 	pmullw	%xmm12, %xmm5
    0000120c: 	punpcklwd	%xmm10, %xmm0
    00001211: 	movdqa	%xmm8, %xmm1
    00001216: 	punpckhwd	%xmm4, %xmm8
    0000121b: 	punpcklwd	%xmm4, %xmm1
    0000121f: 	movdqu	(%rdx,%rax), %xmm4
    00001224: 	paddd	%xmm1, %xmm0
    00001228: 	movdqa	%xmm6, %xmm1
    0000122c: 	movdqu	(%rdi,%rax), %xmm6
    00001231: 	pmullw	DATAat0x38940(%rip), %xmm6
    00001239: 	punpcklwd	%xmm9, %xmm1
    0000123e: 	punpckhwd	%xmm10, %xmm4
    00001243: 	movdqa	%xmm5, %xmm14
    00001248: 	paddd	%xmm1, %xmm0
    0000124c: 	movdqa	%xmm7, %xmm1
    00001250: 	paddd	%xmm8, %xmm4
    00001255: 	movdqu	(%r8,%rax), %xmm8
    0000125b: 	punpcklwd	%xmm3, %xmm1
    0000125f: 	punpckhwd	%xmm3, %xmm7
    00001263: 	paddd	%xmm1, %xmm0
    00001267: 	movdqa	%xmm6, %xmm1
    0000126b: 	punpckhwd	%xmm9, %xmm8
    00001270: 	punpcklwd	%xmm2, %xmm1
    00001274: 	paddd	%xmm8, %xmm4
    00001279: 	punpckhwd	%xmm2, %xmm6
    0000127d: 	paddd	%xmm1, %xmm0
    00001281: 	movdqu	(%rsi,%rax), %xmm1
    00001286: 	paddd	%xmm7, %xmm4
    0000128a: 	pxor	%xmm2, %xmm2
    0000128e: 	paddd	%xmm4, %xmm6
    00001292: 	pmulhw	%xmm12, %xmm1
    00001297: 	punpcklwd	%xmm1, %xmm14
    0000129c: 	punpckhwd	%xmm1, %xmm5
    000012a0: 	pxor	%xmm1, %xmm1
    000012a4: 	paddd	%xmm14, %xmm0
    000012a9: 	movdqa	(%rsp), %xmm14
    000012af: 	paddd	%xmm6, %xmm5
    000012b3: 	paddd	%xmm14, %xmm5
    000012b8: 	paddd	%xmm14, %xmm0
    000012bd: 	pcmpgtd	%xmm5, %xmm2
    000012c1: 	pcmpgtd	%xmm0, %xmm1
    000012c5: 	pand	%xmm13, %xmm2
    000012ca: 	pand	%xmm13, %xmm1
    000012cf: 	paddd	%xmm5, %xmm2
    000012d3: 	paddd	%xmm1, %xmm0
    000012d7: 	movdqa	%xmm2, %xmm1
    000012db: 	psrad	$0x5, %xmm0
    000012e0: 	psrad	$0x5, %xmm1
    000012e5: 	movdqa	%xmm0, %xmm2
    000012e9: 	punpcklwd	%xmm1, %xmm0
    000012ed: 	punpckhwd	%xmm1, %xmm2
    000012f1: 	movdqa	%xmm0, %xmm1
    000012f5: 	punpcklwd	%xmm2, %xmm0
    000012f9: 	punpckhwd	%xmm2, %xmm1
    000012fd: 	punpcklwd	%xmm1, %xmm0
    00001301: 	movups	%xmm0, (%r10,%rax)
    00001306: 	addq	$0x10, %rax
    0000130a: 	cmpq	%rax, %r15
    0000130d: 	jne	.Ltmp3679 # Offset: 4877
    00001313: 	movl	0x4c(%rsp), %edi
    00001317: 	cmpl	%edi, 0x70(%rsp)
    0000131b: 	je	.Ltmp3677 # Offset: 4891
    00001321: 	movq	0x190(%rsp), %rsi
    00001329: 	movq	0x188(%rsp), %rax
    00001331: 	movq	0x1a8(%rsp), %rdi
    00001339: 	movq	0x198(%rsp), %rbx
    00001341: 	movswl	(%rsi), %edx
    00001344: 	movswl	(%rax), %eax
    00001347: 	movq	0x1a0(%rsp), %r11
    0000134f: 	leal	(%rdx,%rdx,4), %edx
    00001352: 	addl	%eax, %edx
    00001354: 	movswl	(%rdi), %eax
    00001357: 	addl	%edx, %eax
    00001359: 	movswl	(%rbx), %edx
    0000135c: 	movq	0x178(%rsp), %rbx
    00001364: 	leal	(%rdx,%rdx,2), %edx
    00001367: 	leal	(%rax,%rdx,2), %edx
    0000136a: 	movswl	(%r11), %eax
    0000136e: 	leal	(%rax,%rax,2), %ecx
    00001371: 	leal	(%rax,%rcx,4), %eax
    00001374: 	movq	0x180(%rsp), %rcx
    0000137c: 	addl	%edx, %eax
    0000137e: 	movswl	(%rbx), %edx
    00001381: 	leal	(%rdx,%rdx,2), %edx
    00001384: 	leal	(%rax,%rdx,2), %edx
    00001387: 	leal	0x2f(%rdx), %eax
    0000138a: 	addl	$0x10, %edx
    0000138d: 	cmovnsl	%edx, %eax
    00001390: 	sarl	$0x5, %eax
    00001393: 	movw	%ax, (%rcx)
    00001396: 	cmpl	0xa0(%rsp), %r13d
    0000139e: 	jle	.Ltmp3677 # Offset: 5022
    000013a4: 	movswl	(%rdi), %edx
    000013a7: 	movswl	(%rsi), %eax
    000013aa: 	movq	0x1e8(%rsp), %rsi
    000013b2: 	leal	(%rdx,%rdx,4), %edx
    000013b5: 	addl	%eax, %edx
    000013b7: 	movswl	(%rsi), %eax
    000013ba: 	addl	%edx, %eax
    000013bc: 	movswl	(%r11), %edx
    000013c0: 	leal	(%rdx,%rdx,2), %edx
    000013c3: 	leal	(%rax,%rdx,2), %edx
    000013c6: 	movswl	(%rbx), %eax
    000013c9: 	leal	(%rax,%rax,2), %ecx
    000013cc: 	leal	(%rax,%rcx,4), %eax
    000013cf: 	movq	0x1f0(%rsp), %rcx
    000013d7: 	addl	%edx, %eax
    000013d9: 	movswl	(%rcx), %edx
    000013dc: 	leal	(%rdx,%rdx,2), %edx
    000013df: 	leal	(%rax,%rdx,2), %edx
    000013e2: 	leal	0x2f(%rdx), %eax
    000013e5: 	addl	$0x10, %edx
    000013e8: 	cmovnsl	%edx, %eax
    000013eb: 	movq	0x1f8(%rsp), %rdx
    000013f3: 	sarl	$0x5, %eax
    000013f6: 	movw	%ax, (%rdx)
    000013f9: 	cmpl	0xb0(%rsp), %r13d
    00001401: 	jle	.Ltmp3677 # Offset: 5121
    00001407: 	movswl	(%rsi), %edx
    0000140a: 	movswl	(%rdi), %eax
    0000140d: 	movq	%rsi, %rdi
    00001410: 	movq	0x220(%rsp), %rsi
    00001418: 	leal	(%rdx,%rdx,4), %edx
    0000141b: 	addl	%eax, %edx
    0000141d: 	movswl	(%rsi), %eax
    00001420: 	addl	%edx, %eax
    00001422: 	movswl	(%rbx), %edx
    00001425: 	movq	%rcx, %rbx
    00001428: 	leal	(%rdx,%rdx,2), %edx
    0000142b: 	leal	(%rax,%rdx,2), %edx
    0000142e: 	movswl	(%rcx), %eax
    00001431: 	leal	(%rax,%rax,2), %ecx
    00001434: 	leal	(%rax,%rcx,4), %eax
    00001437: 	movq	0x228(%rsp), %rcx
    0000143f: 	addl	%edx, %eax
    00001441: 	movswl	(%rcx), %edx
    00001444: 	leal	(%rdx,%rdx,2), %edx
    00001447: 	leal	(%rax,%rdx,2), %edx
    0000144a: 	leal	0x2f(%rdx), %eax
    0000144d: 	addl	$0x10, %edx
    00001450: 	cmovnsl	%edx, %eax
    00001453: 	movq	0x230(%rsp), %rdx
    0000145b: 	sarl	$0x5, %eax
    0000145e: 	movw	%ax, (%rdx)
    00001461: 	cmpl	0xb4(%rsp), %r13d
    00001469: 	jle	.Ltmp3677 # Offset: 5225
    0000146f: 	movswl	(%rsi), %edx
    00001472: 	movswl	(%rdi), %eax
    00001475: 	movq	%rsi, %rdi
    00001478: 	movq	0x238(%rsp), %rsi
    00001480: 	leal	(%rdx,%rdx,4), %edx
    00001483: 	addl	%eax, %edx
    00001485: 	movswl	(%rsi), %eax
    00001488: 	addl	%edx, %eax
    0000148a: 	movswl	(%rbx), %edx
    0000148d: 	movq	%rcx, %rbx
    00001490: 	leal	(%rdx,%rdx,2), %edx
    00001493: 	leal	(%rax,%rdx,2), %edx
    00001496: 	movswl	(%rcx), %eax
    00001499: 	leal	(%rax,%rax,2), %ecx
    0000149c: 	leal	(%rax,%rcx,4), %eax
    0000149f: 	movq	0x240(%rsp), %rcx
    000014a7: 	addl	%edx, %eax
    000014a9: 	movswl	(%rcx), %edx
    000014ac: 	leal	(%rdx,%rdx,2), %edx
    000014af: 	leal	(%rax,%rdx,2), %edx
    000014b2: 	leal	0x2f(%rdx), %eax
    000014b5: 	addl	$0x10, %edx
    000014b8: 	cmovnsl	%edx, %eax
    000014bb: 	movq	0x218(%rsp), %rdx
    000014c3: 	sarl	$0x5, %eax
    000014c6: 	movw	%ax, (%rdx)
    000014c9: 	cmpl	0x120(%rsp), %r13d
    000014d1: 	jle	.Ltmp3677 # Offset: 5329
    000014d7: 	movswl	(%rsi), %edx
    000014da: 	movswl	(%rdi), %eax
    000014dd: 	movq	%rsi, %rdi
    000014e0: 	movq	0x278(%rsp), %rsi
    000014e8: 	leal	(%rdx,%rdx,4), %edx
    000014eb: 	addl	%eax, %edx
    000014ed: 	movswl	(%rsi), %eax
    000014f0: 	addl	%edx, %eax
    000014f2: 	movswl	(%rbx), %edx
    000014f5: 	movq	%rcx, %rbx
    000014f8: 	leal	(%rdx,%rdx,2), %edx
    000014fb: 	leal	(%rax,%rdx,2), %edx
    000014fe: 	movswl	(%rcx), %eax
    00001501: 	leal	(%rax,%rax,2), %ecx
    00001504: 	leal	(%rax,%rcx,4), %eax
    00001507: 	movq	0x280(%rsp), %rcx
    0000150f: 	addl	%edx, %eax
    00001511: 	movswl	(%rcx), %edx
    00001514: 	leal	(%rdx,%rdx,2), %edx
    00001517: 	leal	(%rax,%rdx,2), %edx
    0000151a: 	leal	0x2f(%rdx), %eax
    0000151d: 	addl	$0x10, %edx
    00001520: 	cmovnsl	%edx, %eax
    00001523: 	movq	0x288(%rsp), %rdx
    0000152b: 	sarl	$0x5, %eax
    0000152e: 	movw	%ax, (%rdx)
    00001531: 	cmpl	0x140(%rsp), %r13d
    00001539: 	jle	.Ltmp3677 # Offset: 5433
    0000153f: 	movswl	(%rsi), %edx
    00001542: 	movswl	(%rdi), %eax
    00001545: 	movq	%rsi, %rdi
    00001548: 	movq	0x2e8(%rsp), %rsi
    00001550: 	leal	(%rdx,%rdx,4), %edx
    00001553: 	addl	%eax, %edx
    00001555: 	movswl	(%rsi), %eax
    00001558: 	addl	%edx, %eax
    0000155a: 	movswl	(%rbx), %edx
    0000155d: 	movq	%rcx, %rbx
    00001560: 	leal	(%rdx,%rdx,2), %edx
    00001563: 	leal	(%rax,%rdx,2), %edx
    00001566: 	movswl	(%rcx), %eax
    00001569: 	leal	(%rax,%rax,2), %ecx
    0000156c: 	leal	(%rax,%rcx,4), %eax
    0000156f: 	movq	0x2f0(%rsp), %rcx
    00001577: 	addl	%edx, %eax
    00001579: 	movswl	(%rcx), %edx
    0000157c: 	leal	(%rdx,%rdx,2), %edx
    0000157f: 	leal	(%rax,%rdx,2), %edx
    00001582: 	leal	0x2f(%rdx), %eax
    00001585: 	addl	$0x10, %edx
    00001588: 	cmovnsl	%edx, %eax
    0000158b: 	movq	0x2f8(%rsp), %rdx
    00001593: 	sarl	$0x5, %eax
    00001596: 	movw	%ax, (%rdx)
    00001599: 	cmpl	0x2a8(%rsp), %r13d
    000015a1: 	jle	.Ltmp3677 # Offset: 5537
    000015a3: 	movswl	(%rsi), %edx
    000015a6: 	movswl	(%rdi), %eax
    000015a9: 	movq	0x2c0(%rsp), %rdi
    000015b1: 	leal	(%rdx,%rdx,4), %edx
    000015b4: 	addl	%eax, %edx
    000015b6: 	movq	0x2c8(%rsp), %rax
    000015be: 	movswl	(%rax), %eax
    000015c1: 	addl	%edx, %eax
    000015c3: 	movswl	(%rbx), %edx
    000015c6: 	leal	(%rdx,%rdx,2), %edx
    000015c9: 	leal	(%rax,%rdx,2), %edx
    000015cc: 	movswl	(%rcx), %eax
    000015cf: 	leal	(%rax,%rax,2), %ecx
    000015d2: 	leal	(%rax,%rcx,4), %eax
    000015d5: 	addl	%edx, %eax
    000015d7: 	movswl	(%rdi), %edx
    000015da: 	movq	0x2b8(%rsp), %rdi
    000015e2: 	leal	(%rdx,%rdx,2), %edx
    000015e5: 	leal	(%rax,%rdx,2), %edx
    000015e8: 	leal	0x2f(%rdx), %eax
    000015eb: 	addl	$0x10, %edx
    000015ee: 	cmovnsl	%edx, %eax
    000015f1: 	sarl	$0x5, %eax
    000015f4: 	movw	%ax, (%rdi)
.Ltmp3677:
    000015f7: 	movq	0xf8(%rsp), %rax
    000015ff: 	movswl	(%rax), %edx
    00001602: 	movq	0x100(%rsp), %rax
    0000160a: 	movswl	(%rax), %eax
    0000160d: 	leal	(%rax,%rax,2), %eax
    00001610: 	leal	(%rdx,%rax,2), %edx
    00001613: 	movq	0x108(%rsp), %rax
    0000161b: 	movswl	(%rax), %eax
    0000161e: 	leal	(%rax,%rax,2), %eax
    00001621: 	leal	(%rdx,%rax,2), %edx
    00001624: 	movq	0x110(%rsp), %rax
    0000162c: 	movswl	(%rax), %eax
    0000162f: 	leal	(%rax,%rax,8), %ecx
    00001632: 	leal	(%rax,%rcx,2), %eax
    00001635: 	addl	%edx, %eax
    00001637: 	leal	0x2f(%rax), %edx
    0000163a: 	addl	$0x10, %eax
    0000163d: 	cmovnsl	%eax, %edx
    00001640: 	movq	0x118(%rsp), %rax
    00001648: 	addl	$0x1, 0x74(%rsp)
    0000164d: 	sarl	$0x5, %edx
    00001650: 	movw	%dx, (%rax)
    00001653: 	movl	0x74(%rsp), %eax
    00001657: 	cmpl	0x124(%rsp), %eax
    0000165e: 	jne	.Ltmp3680 # Offset: 5726
.Ltmp3701:
    00001664: 	movl	0x32c(%rsp), %eax
    0000166b: 	xorl	%edx, %edx
    0000166d: 	addl	0xa4(%rsp), %eax
    00001674: 	cmpl	$0x2, 0x2ac(%rsp)
    0000167c: 	leal	(%rax,%rax), %r13d
    00001680: 	jle	.Ltmp3681 # Offset: 5760
    00001686: 	movl	0xa4(%rsp), %eax
    0000168d: 	movl	0x2ac(%rsp), %edi
    00001694: 	xorl	%edx, %edx
    00001696: 	movl	0x328(%rsp), %r14d
    0000169e: 	movq	0x68(%rsp), %r12
    000016a3: 	leal	-0x2(%rax), %r10d
    000016a7: 	leal	-0x1(%rax), %esi
    000016aa: 	leal	-0x3(%rax), %r11d
    000016ae: 	movl	%r10d, %eax
    000016b1: 	movl	%r10d, %ebx
    000016b4: 	movl	%r14d, %ecx
    000016b7: 	shrl	$0x3, %eax
    000016ba: 	andl	$-0x8, %ebx
    000016bd: 	leal	-0x1(%rdi), %r9d
    000016c1: 	movl	$0x1, %edi
    000016c6: 	leal	-0x1(%rax), %r8d
    000016ca: 	leal	0x1(%rbx), %ebp
    000016cd: 	addq	$0x1, %r8
    000016d1: 	shlq	$0x4, %r8
    000016d5: 	nopl	(%rax) # Size: 3
.Ltmp3685:
    000016d8: 	cmpl	$0x1, %esi
    000016db: 	jle	.Ltmp3682 # Offset: 5851
    000016e1: 	cmpl	$0x6, %r11d
    000016e5: 	jbe	.Ltmp3683 # Offset: 5861
    000016eb: 	movslq	%ecx, %rax
    000016ee: 	pxor	%xmm0, %xmm0
    000016f2: 	leaq	0x2(%r12,%rax,2), %rax
    000016f7: 	leaq	(%r8,%rax), %r15
    000016fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3684:
    00001700: 	movdqu	(%rax), %xmm4
    00001704: 	addq	$0x10, %rax
    00001708: 	paddw	%xmm4, %xmm0
    0000170c: 	cmpq	%rax, %r15
    0000170f: 	jne	.Ltmp3684 # Offset: 5903
    00001711: 	movdqa	%xmm0, %xmm1
    00001715: 	psrldq	$0x8, %xmm1
    0000171a: 	paddw	%xmm1, %xmm0
    0000171e: 	movdqa	%xmm0, %xmm1
    00001722: 	psrldq	$0x4, %xmm1
    00001727: 	paddw	%xmm1, %xmm0
    0000172b: 	movdqa	%xmm0, %xmm1
    0000172f: 	psrldq	$0x2, %xmm1
    00001734: 	paddw	%xmm1, %xmm0
    00001738: 	pextrw	$0x0, %xmm0, %eax
    0000173d: 	addl	%eax, %edx
    0000173f: 	cmpl	%ebx, %r10d
    00001742: 	je	.Ltmp3682 # Offset: 5954
    00001748: 	movl	%ebp, %eax
.Ltmp3697:
    0000174a: 	leal	(%rcx,%rax), %r15d
    0000174e: 	movslq	%r15d, %r15
    00001751: 	addw	(%r12,%r15,2), %dx
    00001756: 	leal	0x1(%rax), %r15d
    0000175a: 	cmpl	%esi, %r15d
    0000175d: 	jge	.Ltmp3682 # Offset: 5981
    0000175f: 	addl	%ecx, %r15d
    00001762: 	movslq	%r15d, %r15
    00001765: 	addw	(%r12,%r15,2), %dx
    0000176a: 	leal	0x2(%rax), %r15d
    0000176e: 	cmpl	%esi, %r15d
    00001771: 	jge	.Ltmp3682 # Offset: 6001
    00001773: 	addl	%ecx, %r15d
    00001776: 	movslq	%r15d, %r15
    00001779: 	addw	(%r12,%r15,2), %dx
    0000177e: 	leal	0x3(%rax), %r15d
    00001782: 	cmpl	%esi, %r15d
    00001785: 	jge	.Ltmp3682 # Offset: 6021
    00001787: 	addl	%ecx, %r15d
    0000178a: 	movslq	%r15d, %r15
    0000178d: 	addw	(%r12,%r15,2), %dx
    00001792: 	leal	0x4(%rax), %r15d
    00001796: 	cmpl	%esi, %r15d
    00001799: 	jge	.Ltmp3682 # Offset: 6041
    0000179b: 	addl	%ecx, %r15d
    0000179e: 	movslq	%r15d, %r15
    000017a1: 	addw	(%r12,%r15,2), %dx
    000017a6: 	leal	0x5(%rax), %r15d
    000017aa: 	cmpl	%esi, %r15d
    000017ad: 	jge	.Ltmp3682 # Offset: 6061
    000017af: 	addl	%ecx, %r15d
    000017b2: 	addl	$0x6, %eax
    000017b5: 	movslq	%r15d, %r15
    000017b8: 	addw	(%r12,%r15,2), %dx
    000017bd: 	cmpl	%esi, %eax
    000017bf: 	jge	.Ltmp3682 # Offset: 6079
    000017c1: 	addl	%ecx, %eax
    000017c3: 	cltq
    000017c5: 	addw	(%r12,%rax,2), %dx
.Ltmp3682:
    000017ca: 	addl	$0x1, %edi
    000017cd: 	addl	%r14d, %ecx
    000017d0: 	cmpl	%edi, %r9d
    000017d3: 	jne	.Ltmp3685 # Offset: 6099
.Ltmp3681:
    000017d9: 	cvttsd2si	init_value(%rip), %ecx
    000017e1: 	movzwl	0x2ac(%rsp), %eax
    000017e9: 	imulw	0xa4(%rsp), %ax
    000017f2: 	subl	%r13d, %eax
    000017f5: 	imull	%ecx, %eax
    000017f8: 	cmpw	%dx, %ax
    000017fb: 	je	.Ltmp3686 # Offset: 6139
    000017fd: 	movq	0x318(%rsp), %rax
    00001805: 	leaq	DATAat0x381c8(%rip), %rsi
    0000180c: 	movl	$0x1, %edi
    00001811: 	movq	(%rax), %rdx
    00001814: 	xorl	%eax, %eax
    00001816: 	callq	__printf_chk@PLT # Offset: 6166
.Ltmp3686:
    0000181b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00001822: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00001829: 	subq	$0x20, %rax
    0000182d: 	cmpq	%rax, %rbx
    00001830: 	je	.Ltmp3687 # Offset: 6192
    00001836: 	movq	0x318(%rsp), %rax
    0000183e: 	leaq	0x10(%rbx), %rdi
    00001842: 	movq	%rdi, (%rbx)
    00001845: 	movq	(%rax), %rbp
    00001848: 	movq	0x8(%rax), %r12
    0000184c: 	movq	%rbp, %rax
    0000184f: 	addq	%r12, %rax
    00001852: 	je	.Ltmp3688 # Offset: 6226
    00001854: 	testq	%rbp, %rbp
    00001857: 	je	.Ltmp3689 # Offset: 6231
.Ltmp3688:
    0000185d: 	movq	%r12, 0x330(%rsp)
    00001865: 	cmpq	$0xf, %r12
    00001869: 	ja	.Ltmp3690 # Offset: 6249
    0000186f: 	cmpq	$0x1, %r12
    00001873: 	jne	.Ltmp3691 # Offset: 6259
    00001879: 	movzbl	(%rbp), %eax
    0000187d: 	movb	%al, 0x10(%rbx)
.Ltmp3698:
    00001880: 	movq	%r12, 0x8(%rbx)
    00001884: 	movb	$0x0, (%rdi,%r12)
    00001889: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001890: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001897: 	addq	$0x20, %rax
    0000189b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000018a2: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000018a9: 	je	.Ltmp3692 # Offset: 6313
.Ltmp3699:
    000018af: 	movq	-0x20(%rax), %rbp
    000018b3: 	callq	clock@PLT # Offset: 6323
    000018b8: 	movq	%rax, end_time(%rip)
    000018bf: 	movq	0x338(%rsp), %rdx
    000018c7: 	subq	%fs:0x28, %rdx
    000018d0: 	jne	.Ltmp3693 # Offset: 6352
    000018d6: 	subq	start_time(%rip), %rax
    000018dd: 	pxor	%xmm0, %xmm0
    000018e1: 	movq	%rbp, %rdi
    000018e4: 	cvtsi2sd	%rax, %xmm0
    000018e9: 	divsd	DATAat0x38a48(%rip), %xmm0
    000018f1: 	addq	$0x348, %rsp
    000018f8: 	popq	%rbx
    000018f9: 	popq	%rbp
    000018fa: 	popq	%r12
    000018fc: 	popq	%r13
    000018fe: 	popq	%r14
    00001900: 	popq	%r15
    00001902: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 6402
    00001907: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3673:
    00001910: 	movq	%rcx, %r9
    00001913: 	movq	0x68(%rsp), %r10
    00001918: 	movq	%rsi, %r11
    0000191b: 	movq	%rdx, %r8
    0000191e: 	movq	0x80(%rsp), %rax
    00001926: 	subq	%r14, %r9
    00001929: 	leaq	(%rax,%rdx), %rbx
    0000192d: 	nopl	(%rax) # Size: 3
.Ltmp3694:
    00001930: 	movswl	0x2(%r8), %eax
    00001935: 	movswl	(%r8), %ebp
    00001939: 	leal	(%rax,%rax,4), %eax
    0000193c: 	addl	%ebp, %eax
    0000193e: 	movswl	0x4(%r8), %ebp
    00001943: 	addl	%eax, %ebp
    00001945: 	movswl	(%r14,%r9), %eax
    0000194a: 	leal	(%rax,%rax,4), %eax
    0000194d: 	addl	%ebp, %eax
    0000194f: 	movswl	0x2(%r14,%r9), %ebp
    00001955: 	leal	(%rax,%rbp,8), %r12d
    00001959: 	movswl	0x4(%r14,%r9), %eax
    0000195f: 	leal	(%rax,%rax,4), %ebp
    00001962: 	movswl	(%r11), %eax
    00001966: 	addl	%r12d, %ebp
    00001969: 	addl	%ebp, %eax
    0000196b: 	movswl	0x2(%r11), %ebp
    00001970: 	leal	(%rbp,%rbp,4), %ebp
    00001974: 	addl	%eax, %ebp
    00001976: 	movswl	0x4(%r11), %eax
    0000197b: 	addl	%ebp, %eax
    0000197d: 	leal	0x2f(%rax), %ebp
    00001980: 	addl	$0x10, %eax
    00001983: 	cmovsl	%ebp, %eax
    00001986: 	addq	$0x2, %r8
    0000198a: 	addq	$0x2, %r11
    0000198e: 	sarl	$0x5, %eax
    00001991: 	movw	%ax, 0x2(%r10,%r9)
    00001997: 	addq	$0x2, %r9
    0000199b: 	cmpq	%r8, %rbx
    0000199e: 	jne	.Ltmp3694 # Offset: 6558
    000019a0: 	jmp	.Ltmp3672 # Offset: 6560
.Ltmp3678:
    000019a5: 	movq	0x2b0(%rsp), %rdx
    000019ad: 	movq	0x88(%rsp), %rax
    000019b5: 	movq	0x320(%rsp), %rdi
    000019bd: 	movq	0x68(%rsp), %r8
    000019c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3695:
    000019c8: 	movswl	0x2(%rax), %ecx
    000019cc: 	movswl	(%rax), %r9d
    000019d0: 	leal	(%rcx,%rcx,4), %esi
    000019d3: 	movswl	0x4(%rax), %ecx
    000019d7: 	addl	%r9d, %esi
    000019da: 	addl	%esi, %ecx
    000019dc: 	movswl	(%r14,%rdx), %esi
    000019e1: 	leal	(%rsi,%rsi,2), %esi
    000019e4: 	leal	(%rcx,%rsi,2), %esi
    000019e7: 	movswl	0x2(%r14,%rdx), %ecx
    000019ed: 	leal	(%rcx,%rcx,2), %r9d
    000019f1: 	leal	(%rcx,%r9,4), %ecx
    000019f5: 	addl	%esi, %ecx
    000019f7: 	movswl	0x4(%r14,%rdx), %esi
    000019fd: 	leal	(%rsi,%rsi,2), %esi
    00001a00: 	leal	(%rcx,%rsi,2), %esi
    00001a03: 	leal	0x2f(%rsi), %ecx
    00001a06: 	addl	$0x10, %esi
    00001a09: 	cmovnsl	%esi, %ecx
    00001a0c: 	addq	$0x2, %rax
    00001a10: 	sarl	$0x5, %ecx
    00001a13: 	movw	%cx, 0x2(%r8,%rdx)
    00001a19: 	addq	$0x2, %rdx
    00001a1d: 	cmpq	%rdi, %rax
    00001a20: 	jne	.Ltmp3695 # Offset: 6688
    00001a22: 	jmp	.Ltmp3677 # Offset: 6690
.Ltmp3669:
    00001a27: 	movq	%rax, %rdi
    00001a2a: 	movq	0xa8(%rsp), %rax
    00001a32: 	movq	0x78(%rsp), %rdx
    00001a37: 	leaq	0x2(%rax), %r8
    00001a3b: 	movl	$0x1, %eax
.Ltmp3696:
    00001a40: 	movswl	-0x2(%r14,%rax,2), %ecx
    00001a46: 	leal	(%rcx,%rcx,2), %esi
    00001a49: 	movswl	(%r14,%rax,2), %ecx
    00001a4e: 	leal	(%rcx,%rcx,2), %r9d
    00001a52: 	leal	(%rcx,%r9,4), %ecx
    00001a56: 	leal	(%rcx,%rsi,2), %esi
    00001a59: 	movswl	0x2(%r14,%rax,2), %ecx
    00001a5f: 	leal	(%rcx,%rcx,2), %ecx
    00001a62: 	leal	(%rsi,%rcx,2), %esi
    00001a65: 	movswl	(%rdx), %ecx
    00001a68: 	addl	%esi, %ecx
    00001a6a: 	movswl	0x2(%rdx), %esi
    00001a6e: 	leal	(%rsi,%rsi,4), %esi
    00001a71: 	addl	%ecx, %esi
    00001a73: 	movswl	0x4(%rdx), %ecx
    00001a77: 	addl	%esi, %ecx
    00001a79: 	leal	0x2f(%rcx), %esi
    00001a7c: 	addl	$0x10, %ecx
    00001a7f: 	cmovsl	%esi, %ecx
    00001a82: 	addq	$0x2, %rdx
    00001a86: 	sarl	$0x5, %ecx
    00001a89: 	movw	%cx, (%rdi,%rax,2)
    00001a8d: 	addq	$0x1, %rax
    00001a91: 	cmpq	%r8, %rax
    00001a94: 	jne	.Ltmp3696 # Offset: 6804
    00001a96: 	jmp	.Ltmp3668 # Offset: 6806
.Ltmp3683:
    00001a9b: 	movl	$0x1, %eax
    00001aa0: 	jmp	.Ltmp3697 # Offset: 6816
.Ltmp3690:
    00001aa5: 	movq	%rbx, %rdi
    00001aa8: 	leaq	0x330(%rsp), %rsi
    00001ab0: 	xorl	%edx, %edx
    00001ab2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6834
    00001ab7: 	movq	%rax, (%rbx)
    00001aba: 	movq	%rax, %rdi
    00001abd: 	movq	0x330(%rsp), %rax
    00001ac5: 	movq	%rax, 0x10(%rbx)
.Ltmp3700:
    00001ac9: 	movq	%r12, %rdx
    00001acc: 	movq	%rbp, %rsi
    00001acf: 	callq	memcpy@PLT # Offset: 6863
    00001ad4: 	movq	0x330(%rsp), %r12
    00001adc: 	movq	(%rbx), %rdi
    00001adf: 	jmp	.Ltmp3698 # Offset: 6879
.Ltmp3687:
    00001ae4: 	movq	0x318(%rsp), %rsi
    00001aec: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001af3: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6899
    00001af8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001aff: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001b06: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001b0d: 	jne	.Ltmp3699 # Offset: 6925
.Ltmp3692:
    00001b13: 	movq	-0x8(%rdx), %rax
    00001b17: 	addq	$0x200, %rax
    00001b1d: 	jmp	.Ltmp3699 # Offset: 6941
.Ltmp3691:
    00001b22: 	testq	%r12, %r12
    00001b25: 	je	.Ltmp3698 # Offset: 6949
    00001b2b: 	jmp	.Ltmp3700 # Offset: 6955
    00001b2d: 	nopl	(%rax) # Size: 3
.Ltmp3667:
    00001b30: 	movl	0x2ac(%rsp), %eax
    00001b37: 	subl	$0x2, %eax
    00001b3a: 	movl	%eax, 0x32c(%rsp)
    00001b41: 	jmp	.Ltmp3701 # Offset: 6977
.Ltmp3689:
    00001b46: 	leaq	DATAat0x38158(%rip), %rdi
    00001b4d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6989
.Ltmp3693:
    00001b52: 	callq	__stack_chk_fail@PLT # Offset: 6994
DWARF CFI Instructions:
    <empty>
End of Function "_Z15convolution2D_5IsiEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15convolution2D_5IddEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 285
  State       : disassembled
  Address     : 0x2c8e0
  Size        : 0x105c
  MaxSize     : 0x1060
  Offset      : 0x2c8e0
  Section     : .text
  Orc Section : .local.text._Z15convolution2D_5IddEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0284:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x1f8, %rsp
    00000018: 	movq	%rsi, (%rsp)
    0000001c: 	movl	%edx, 0x1d8(%rsp)
    00000023: 	movl	%ecx, 0x104(%rsp)
    0000002a: 	movl	%r8d, 0x34(%rsp)
    0000002f: 	movq	%r9, 0x1c0(%rsp)
    00000037: 	movq	%fs:0x28, %rax
    00000040: 	movq	%rax, 0x1e8(%rsp)
    00000048: 	xorl	%eax, %eax
    0000004a: 	callq	clock@PLT # Offset: 74
    0000004f: 	movq	%rax, start_time(%rip)
    00000056: 	movl	iterations(%rip), %eax
    0000005c: 	movl	%eax, 0x180(%rsp)
    00000063: 	testl	%eax, %eax
    00000065: 	jle	.Ltmp3702 # Offset: 101
    0000006b: 	movslq	0x34(%rsp), %rax
    00000070: 	movl	0x104(%rsp), %r13d
    00000078: 	pxor	%xmm3, %xmm3
    0000007c: 	movq	(%rsp), %r11
    00000080: 	leaq	(,%rax,8), %r12
    00000088: 	movq	%rax, %rbx
    0000008b: 	leal	-0x1(%r13), %r10d
    0000008f: 	leaq	(%r15,%r12), %rax
    00000093: 	leaq	0x8(%r12), %r8
    00000098: 	movq	%r12, 0x40(%rsp)
    0000009d: 	movq	%rax, 0xd8(%rsp)
    000000a5: 	leaq	(%r15,%r8), %rax
    000000a9: 	leal	-0x2(%r13), %r14d
    000000ad: 	movq	%rax, 0xe8(%rsp)
    000000b5: 	movslq	%r10d, %rax
    000000b8: 	movslq	%r14d, %rdi
    000000bb: 	leaq	(,%rax,8), %rdx
    000000c3: 	movl	%ebx, %eax
    000000c5: 	movq	%rdi, 0x48(%rsp)
    000000ca: 	leaq	(%r15,%rdi,8), %rdi
    000000ce: 	addl	%r14d, %eax
    000000d1: 	movq	%rdi, 0x108(%rsp)
    000000d9: 	leaq	(%r15,%rdx), %rdi
    000000dd: 	addq	%r11, %rdx
    000000e0: 	cltq
    000000e2: 	movq	%rdi, 0x110(%rsp)
    000000ea: 	leaq	(%r15,%rax,8), %rdi
    000000ee: 	movl	%ebx, %eax
    000000f0: 	movl	%r14d, 0x64(%rsp)
    000000f5: 	addl	%r10d, %eax
    000000f8: 	movq	%rdi, 0x118(%rsp)
    00000100: 	cltq
    00000102: 	movq	%rdx, 0x128(%rsp)
    0000010a: 	leaq	(%r15,%rax,8), %rdi
    0000010e: 	movl	%r10d, 0x30(%rsp)
    00000113: 	movq	%rdi, 0x120(%rsp)
    0000011b: 	movl	0x1d8(%rsp), %edi
    00000122: 	leal	-0x2(%rdi), %ecx
    00000125: 	leal	-0x1(%rdi), %esi
    00000128: 	movl	%ecx, 0x1dc(%rsp)
    0000012f: 	imull	%ebx, %ecx
    00000132: 	movl	%esi, 0x50(%rsp)
    00000136: 	movslq	%ecx, %r9
    00000139: 	leal	0x1(%rcx), %eax
    0000013c: 	leaq	(,%r9,8), %rdi
    00000144: 	cltq
    00000146: 	leaq	(%r15,%rdi), %rsi
    0000014a: 	movq	%rsi, 0xe0(%rsp)
    00000152: 	leaq	(%r15,%rax,8), %rsi
    00000156: 	movq	%rsi, 0x130(%rsp)
    0000015e: 	leal	(%rbx,%rcx), %esi
    00000161: 	movslq	%esi, %rax
    00000164: 	leaq	(,%rax,8), %rbp
    0000016c: 	leal	0x1(%rsi), %eax
    0000016f: 	leaq	(%r15,%rbp), %rdx
    00000173: 	cltq
    00000175: 	movq	%rbp, 0x1b8(%rsp)
    0000017d: 	movq	%rdx, 0xf0(%rsp)
    00000185: 	leaq	(%r15,%rax,8), %rdx
    00000189: 	leal	(%rcx,%r14), %eax
    0000018d: 	movq	%rdx, 0x138(%rsp)
    00000195: 	cltq
    00000197: 	movq	%r11, %rdx
    0000019a: 	addq	%rbp, %r11
    0000019d: 	movq	%r11, 0x140(%rsp)
    000001a5: 	leaq	(%r15,%rax,8), %r11
    000001a9: 	leal	(%r10,%rcx), %eax
    000001ad: 	cltq
    000001af: 	movq	%r11, 0x148(%rsp)
    000001b7: 	leaq	(%r15,%rax,8), %r11
    000001bb: 	leal	(%rsi,%r14), %eax
    000001bf: 	cltq
    000001c1: 	movq	%r11, 0x150(%rsp)
    000001c9: 	leaq	(%r15,%rax,8), %r11
    000001cd: 	leal	(%r10,%rsi), %eax
    000001d1: 	movl	%r13d, %r10d
    000001d4: 	cltq
    000001d6: 	movq	%r11, 0x158(%rsp)
    000001de: 	shlq	$0x3, %rax
    000001e2: 	leaq	(%r15,%rax), %r11
    000001e6: 	addq	%rdx, %rax
    000001e9: 	movq	%rax, 0x168(%rsp)
    000001f1: 	movq	%rdx, %rax
    000001f4: 	subq	%r15, %rax
    000001f7: 	movq	%r11, 0x160(%rsp)
    000001ff: 	movq	%rdx, %r11
    00000202: 	cmpq	$0x10, %rax
    00000206: 	seta	%dl
    00000209: 	cmpl	$0x3, %r13d
    0000020d: 	setne	%al
    00000210: 	andl	%eax, %edx
    00000212: 	leaq	0x8(%r11), %rax
    00000216: 	subq	0xe8(%rsp), %rax
    0000021e: 	cmpq	$0x10, %rax
    00000222: 	movb	%dl, 0x63(%rsp)
    00000226: 	seta	%al
    00000229: 	addq	%r11, %r8
    0000022c: 	andl	%edx, %eax
    0000022e: 	movl	%r14d, %edx
    00000231: 	shrl	%r14d
    00000234: 	movb	%al, 0x186(%rsp)
    0000023b: 	leaq	0x10(%r15,%r12), %rax
    00000240: 	movq	%rax, 0x1b0(%rsp)
    00000248: 	movl	%r14d, %eax
    0000024b: 	movl	%edx, %r14d
    0000024e: 	subl	$0x1, %eax
    00000251: 	andl	$-0x2, %r14d
    00000255: 	addq	$0x1, %rax
    00000259: 	shlq	$0x4, %rax
    0000025d: 	movq	%rax, 0x58(%rsp)
    00000262: 	movslq	%r14d, %rax
    00000265: 	movl	%edx, %r14d
    00000268: 	movsd	DATAat0x38a70(%rip), %xmm12
    00000271: 	movq	%rax, %r13
    00000274: 	orl	$0x1, %r14d
    00000278: 	leaq	(%r15,%rax,8), %rax
    0000027c: 	movq	%r8, 0x178(%rsp)
    00000284: 	movq	%rax, 0xa0(%rsp)
    0000028c: 	movslq	%r14d, %rax
    0000028f: 	leal	0x2(%r13), %ebp
    00000293: 	leaq	0x8(%r15,%rdi), %r8
    00000298: 	leaq	(,%rax,8), %rdx
    000002a0: 	movl	%r14d, %r12d
    000002a3: 	movq	%r8, 0x1a0(%rsp)
    000002ab: 	movsd	DATAat0x38980(%rip), %xmm6
    000002b3: 	leaq	(%r15,%rdx), %rax
    000002b7: 	movl	$0x0, 0x100(%rsp)
    000002c2: 	movsd	DATAat0x389a0(%rip), %xmm4
    000002ca: 	movq	%rax, 0xa8(%rsp)
    000002d2: 	movslq	%ebp, %rax
    000002d5: 	movapd	DATAat0x38980(%rip), %xmm11
    000002de: 	leaq	(%r15,%rax,8), %rax
    000002e2: 	movq	%rax, 0xb0(%rsp)
    000002ea: 	leal	(%rbx,%r13), %eax
    000002ee: 	cltq
    000002f0: 	leaq	(%r15,%rax,8), %rax
    000002f4: 	movq	%rax, 0xb8(%rsp)
    000002fc: 	leal	(%rbx,%r14), %eax
    00000300: 	leal	-0x3(%r10), %r14d
    00000304: 	cltq
    00000306: 	movq	%r14, 0x1c8(%rsp)
    0000030e: 	leaq	(%r15,%rax,8), %rax
    00000312: 	movq	%rax, 0xc0(%rsp)
    0000031a: 	leal	(%rbx,%rbp), %eax
    0000031d: 	cltq
    0000031f: 	leaq	(%r15,%rax,8), %rax
    00000323: 	movq	%rax, 0xc8(%rsp)
    0000032b: 	movq	%rdx, %rax
    0000032e: 	addq	%r11, %rax
    00000331: 	movq	%rax, 0xd0(%rsp)
    00000339: 	leal	(%rbx,%rbx), %eax
    0000033c: 	movq	0x1b8(%rsp), %rbx
    00000344: 	movl	%eax, 0x54(%rsp)
    00000348: 	cltq
    0000034a: 	leaq	0x8(%rbx), %rdx
    0000034e: 	leaq	(%r15,%rax,8), %rax
    00000352: 	movq	%rax, 0x170(%rsp)
    0000035a: 	leaq	(%r11,%rdx), %rax
    0000035e: 	movq	%rax, 0x1a8(%rsp)
    00000366: 	subq	%r8, %rax
    00000369: 	cmpq	$0x10, %rax
    0000036d: 	seta	%al
    00000370: 	andb	0x63(%rsp), %al
    00000374: 	movb	%al, 0x187(%rsp)
    0000037b: 	leaq	0x10(%r15,%rdi), %rax
    00000380: 	movq	%rax, 0x198(%rsp)
    00000388: 	leaq	(%r15,%rdx), %rax
    0000038c: 	leal	(%rsi,%r12), %edx
    00000390: 	movq	%rax, 0x190(%rsp)
    00000398: 	leaq	0x10(%r15,%rbx), %rax
    0000039d: 	movslq	%edx, %rdx
    000003a0: 	movq	%rax, 0x188(%rsp)
    000003a8: 	leal	(%rcx,%r13), %eax
    000003ac: 	shlq	$0x3, %rdx
    000003b0: 	cltq
    000003b2: 	leaq	(%r15,%rax,8), %rax
    000003b6: 	movq	%rax, 0x98(%rsp)
    000003be: 	leal	(%rcx,%r12), %eax
    000003c2: 	cltq
    000003c4: 	leaq	(%r15,%rax,8), %rax
    000003c8: 	movq	%rax, 0x90(%rsp)
    000003d0: 	leal	(%rcx,%rbp), %eax
    000003d3: 	cltq
    000003d5: 	leaq	(%r15,%rax,8), %rax
    000003d9: 	movq	%rax, 0x88(%rsp)
    000003e1: 	leal	(%rsi,%r13), %eax
    000003e5: 	cltq
    000003e7: 	leaq	(%r15,%rax,8), %rax
    000003eb: 	movq	%rax, 0x80(%rsp)
    000003f3: 	leaq	(%r15,%rdx), %rax
    000003f7: 	addq	%r11, %rdx
    000003fa: 	movq	%rax, 0x78(%rsp)
    000003ff: 	leal	(%rsi,%rbp), %eax
    00000402: 	cltq
    00000404: 	movq	%rdx, 0x68(%rsp)
    00000409: 	leaq	(%r15,%rax,8), %rax
    0000040d: 	movq	%rax, 0x70(%rsp)
    00000412: 	leaq	(%r9,%r14), %rax
    00000416: 	leaq	0x8(%r15,%rax,8), %rax
    0000041b: 	movq	%rax, 0x1d0(%rsp)
    00000423: 	leaq	0x8(,%r14,8), %rax
    0000042b: 	movq	%rax, 0xf8(%rsp)
    00000433: 	movl	%ebp, %eax
    00000435: 	movapd	DATAat0x38910(%rip), %xmm2
    0000043d: 	movl	%r12d, %ebp
    00000440: 	movapd	DATAat0x389a0(%rip), %xmm10
    00000449: 	movl	%eax, %r12d
    0000044c: 	movapd	DATAat0x389b0(%rip), %xmm9
    00000455: 	nopl	(%rax) # Size: 3
.Ltmp3714:
    00000458: 	movsd	(%r15), %xmm0
    0000045d: 	movsd	0x8(%r15), %xmm1
    00000463: 	movq	0xd8(%rsp), %rax
    0000046b: 	cmpl	$0x1, 0x30(%rsp)
    00000470: 	mulsd	%xmm12, %xmm0
    00000475: 	mulsd	%xmm6, %xmm1
    00000479: 	addsd	%xmm0, %xmm1
    0000047d: 	movsd	(%rax), %xmm0
    00000481: 	movq	0xe8(%rsp), %rax
    00000489: 	mulsd	%xmm6, %xmm0
    0000048d: 	addsd	%xmm1, %xmm0
    00000491: 	addsd	(%rax), %xmm0
    00000495: 	movq	(%rsp), %rax
    00000499: 	addsd	%xmm3, %xmm0
    0000049d: 	mulsd	%xmm4, %xmm0
    000004a1: 	movsd	%xmm0, (%rax)
    000004a5: 	jle	.Ltmp3703 # Offset: 1189
    000004ab: 	cmpb	$0x0, 0x186(%rsp)
    000004b3: 	je	.Ltmp3704 # Offset: 1203
    000004b9: 	movapd	DATAat0x38990(%rip), %xmm7
    000004c1: 	movapd	DATAat0x38910(%rip), %xmm5
    000004c9: 	movq	%rax, %r8
    000004cc: 	pxor	%xmm8, %xmm8
    000004d1: 	movapd	DATAat0x389a0(%rip), %xmm1
    000004d9: 	movq	0xd8(%rsp), %rdx
    000004e1: 	xorl	%eax, %eax
    000004e3: 	movq	0xe8(%rsp), %rcx
    000004eb: 	movq	0x58(%rsp), %rsi
    000004f0: 	movq	0x1b0(%rsp), %rdi
    000004f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3705:
    00000500: 	movupd	(%r15,%rax), %xmm0
    00000506: 	movupd	0x8(%r15,%rax), %xmm13
    0000050d: 	movupd	(%rdx,%rax), %xmm15
    00000513: 	mulpd	%xmm7, %xmm13
    00000518: 	mulpd	%xmm11, %xmm0
    0000051d: 	addpd	%xmm13, %xmm0
    00000522: 	movupd	0x10(%r15,%rax), %xmm13
    00000529: 	mulpd	%xmm11, %xmm13
    0000052e: 	addpd	%xmm13, %xmm0
    00000533: 	movupd	(%rcx,%rax), %xmm13
    00000539: 	mulpd	%xmm5, %xmm13
    0000053e: 	addpd	%xmm15, %xmm0
    00000543: 	movupd	(%rdi,%rax), %xmm15
    00000549: 	addpd	%xmm13, %xmm0
    0000054e: 	addpd	%xmm15, %xmm0
    00000553: 	addpd	%xmm8, %xmm0
    00000558: 	mulpd	%xmm1, %xmm0
    0000055c: 	movups	%xmm0, 0x8(%r8,%rax)
    00000562: 	addq	$0x10, %rax
    00000566: 	cmpq	%rsi, %rax
    00000569: 	jne	.Ltmp3705 # Offset: 1385
    0000056b: 	cmpl	%r13d, 0x64(%rsp)
    00000570: 	je	.Ltmp3703 # Offset: 1392
    00000576: 	movq	0xa0(%rsp), %rax
    0000057e: 	movsd	DATAat0x38990(%rip), %xmm5
    00000586: 	movsd	DATAat0x38910(%rip), %xmm1
    0000058e: 	movsd	(%rax), %xmm0
    00000592: 	movq	0xa8(%rsp), %rax
    0000059a: 	mulsd	%xmm6, %xmm0
    0000059e: 	mulsd	(%rax), %xmm5
    000005a2: 	movq	0xb0(%rsp), %rax
    000005aa: 	addsd	%xmm0, %xmm5
    000005ae: 	movsd	(%rax), %xmm0
    000005b2: 	movq	0xb8(%rsp), %rax
    000005ba: 	mulsd	%xmm6, %xmm0
    000005be: 	addsd	%xmm5, %xmm0
    000005c2: 	addsd	(%rax), %xmm0
    000005c6: 	movq	0xc0(%rsp), %rax
    000005ce: 	mulsd	(%rax), %xmm1
    000005d2: 	movq	0xc8(%rsp), %rax
    000005da: 	addsd	%xmm1, %xmm0
    000005de: 	addsd	(%rax), %xmm0
    000005e2: 	movq	0xd0(%rsp), %rax
    000005ea: 	addsd	%xmm3, %xmm0
    000005ee: 	mulsd	%xmm4, %xmm0
    000005f2: 	movsd	%xmm0, (%rax)
.Ltmp3703:
    000005f6: 	movq	0x108(%rsp), %rax
    000005fe: 	cmpl	$0x1, 0x50(%rsp)
    00000603: 	movsd	(%rax), %xmm0
    00000607: 	movq	0x110(%rsp), %rax
    0000060f: 	movsd	(%rax), %xmm1
    00000613: 	mulsd	%xmm6, %xmm0
    00000617: 	movq	0x118(%rsp), %rax
    0000061f: 	mulsd	%xmm12, %xmm1
    00000624: 	addsd	%xmm0, %xmm1
    00000628: 	addsd	(%rax), %xmm1
    0000062c: 	movq	0x120(%rsp), %rax
    00000634: 	movsd	(%rax), %xmm0
    00000638: 	movq	0x128(%rsp), %rax
    00000640: 	mulsd	%xmm6, %xmm0
    00000644: 	addsd	%xmm1, %xmm0
    00000648: 	addsd	%xmm3, %xmm0
    0000064c: 	mulsd	%xmm4, %xmm0
    00000650: 	movsd	%xmm0, (%rax)
    00000654: 	jle	.Ltmp3706 # Offset: 1620
    0000065a: 	movslq	0x104(%rsp), %rax
    00000662: 	movl	0x34(%rsp), %esi
    00000666: 	movq	%r15, %rdi
    00000669: 	pxor	%xmm8, %xmm8
    0000066e: 	movq	0x178(%rsp), %r10
    00000676: 	movl	$0x1, 0x20(%rsp)
    0000067e: 	movq	%rax, 0x38(%rsp)
    00000683: 	movq	0x170(%rsp), %r8
    0000068b: 	movq	0xd8(%rsp), %r9
    00000693: 	movsd	DATAat0x38990(%rip), %xmm5
    0000069b: 	movq	%r10, %rbx
    0000069e: 	movsd	DATAat0x38910(%rip), %xmm1
    000006a6: 	movsd	DATAat0x389b0(%rip), %xmm7
    000006ae: 	nop # Size: 2
.Ltmp3710:
    000006b0: 	movsd	(%r9), %xmm0
    000006b5: 	movsd	(%rdi), %xmm13
    000006ba: 	movl	%esi, %edx
    000006bc: 	movl	%esi, %ecx
    000006be: 	movl	0x54(%rsp), %eax
    000006c2: 	subl	0x34(%rsp), %edx
    000006c6: 	mulsd	%xmm5, %xmm0
    000006ca: 	addl	$0x1, 0x20(%rsp)
    000006cf: 	cmpl	$0x1, 0x30(%rsp)
    000006d4: 	mulsd	%xmm6, %xmm13
    000006d9: 	leal	(%rdx,%rax), %esi
    000006dc: 	addsd	0x8(%rdi), %xmm13
    000006e2: 	addsd	%xmm13, %xmm0
    000006e7: 	movsd	0x8(%r9), %xmm13
    000006ed: 	mulsd	%xmm1, %xmm13
    000006f2: 	addsd	%xmm0, %xmm13
    000006f7: 	movsd	(%r8), %xmm0
    000006fc: 	mulsd	%xmm6, %xmm0
    00000700: 	addsd	%xmm13, %xmm0
    00000705: 	addsd	0x8(%r8), %xmm0
    0000070b: 	addsd	%xmm3, %xmm0
    0000070f: 	mulsd	%xmm4, %xmm0
    00000713: 	movsd	%xmm0, -0x8(%rbx)
    00000718: 	jle	.Ltmp3707 # Offset: 1816
    0000071e: 	leaq	0x8(%rdi), %r10
    00000722: 	movq	%rbx, %rax
    00000725: 	leaq	0x8(%r8), %r11
    00000729: 	subq	%r10, %rax
    0000072c: 	cmpq	$0x10, %rax
    00000730: 	seta	%al
    00000733: 	testb	%al, 0x63(%rsp)
    00000737: 	je	.Ltmp3708 # Offset: 1847
    0000073d: 	movq	%rbx, %rax
    00000740: 	subq	%r11, %rax
    00000743: 	cmpq	$0x10, %rax
    00000747: 	jbe	.Ltmp3708 # Offset: 1863
    0000074d: 	leaq	0x8(%r9), %rax
    00000751: 	movl	%esi, 0x24(%rsp)
    00000755: 	leaq	0x10(%rdi), %r14
    00000759: 	movq	%rax, 0x8(%rsp)
    0000075e: 	leaq	0x10(%r9), %rax
    00000762: 	movq	%rax, 0x10(%rsp)
    00000767: 	leaq	0x10(%r8), %rax
    0000076b: 	movq	%rax, 0x18(%rsp)
    00000770: 	movq	0x18(%rsp), %rsi
    00000775: 	xorl	%eax, %eax
    00000777: 	movl	%ecx, 0x28(%rsp)
    0000077b: 	movq	0x10(%rsp), %rcx
    00000780: 	movl	%edx, 0x2c(%rsp)
    00000784: 	movq	0x8(%rsp), %rdx
    00000789: 	movl	%ebp, 0x8(%rsp)
    0000078d: 	movq	0x58(%rsp), %rbp
    00000792: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3709:
    00000798: 	movupd	(%r10,%rax), %xmm0
    0000079e: 	movupd	(%rdi,%rax), %xmm15
    000007a4: 	movupd	(%r9,%rax), %xmm13
    000007aa: 	movupd	(%r14,%rax), %xmm14
    000007b0: 	mulpd	%xmm2, %xmm0
    000007b4: 	mulpd	%xmm2, %xmm13
    000007b9: 	addpd	%xmm15, %xmm0
    000007be: 	movupd	(%r8,%rax), %xmm15
    000007c4: 	addpd	%xmm14, %xmm0
    000007c9: 	movupd	(%rsi,%rax), %xmm14
    000007cf: 	addpd	%xmm13, %xmm0
    000007d4: 	movupd	(%rdx,%rax), %xmm13
    000007da: 	mulpd	%xmm9, %xmm13
    000007df: 	addpd	%xmm13, %xmm0
    000007e4: 	movupd	(%rcx,%rax), %xmm13
    000007ea: 	mulpd	%xmm2, %xmm13
    000007ef: 	addpd	%xmm13, %xmm0
    000007f4: 	movupd	(%r11,%rax), %xmm13
    000007fa: 	mulpd	%xmm2, %xmm13
    000007ff: 	addpd	%xmm15, %xmm0
    00000804: 	addpd	%xmm13, %xmm0
    00000809: 	addpd	%xmm14, %xmm0
    0000080e: 	addpd	%xmm8, %xmm0
    00000813: 	mulpd	%xmm10, %xmm0
    00000818: 	movups	%xmm0, (%rbx,%rax)
    0000081c: 	addq	$0x10, %rax
    00000820: 	cmpq	%rax, %rbp
    00000823: 	jne	.Ltmp3709 # Offset: 2083
    00000829: 	movl	0x24(%rsp), %esi
    0000082d: 	movl	0x28(%rsp), %ecx
    00000831: 	movl	0x2c(%rsp), %edx
    00000835: 	movl	0x8(%rsp), %ebp
    00000839: 	cmpl	%r13d, 0x64(%rsp)
    0000083e: 	je	.Ltmp3707 # Offset: 2110
    00000844: 	leal	(%rdx,%rbp), %r10d
    00000848: 	leal	(%rdx,%r13), %eax
    0000084c: 	addl	%r12d, %edx
    0000084f: 	movslq	%r10d, %r10
    00000852: 	cltq
    00000854: 	movslq	%edx, %rdx
    00000857: 	movsd	(%r15,%r10,8), %xmm0
    0000085d: 	mulsd	%xmm1, %xmm0
    00000861: 	addsd	(%r15,%rax,8), %xmm0
    00000867: 	leal	(%rcx,%r13), %eax
    0000086b: 	cltq
    0000086d: 	addsd	(%r15,%rdx,8), %xmm0
    00000873: 	leal	(%rsi,%r13), %edx
    00000877: 	movsd	(%r15,%rax,8), %xmm13
    0000087d: 	leal	(%rcx,%rbp), %eax
    00000880: 	addl	%r12d, %ecx
    00000883: 	movslq	%edx, %rdx
    00000886: 	cltq
    00000888: 	movslq	%ecx, %rcx
    0000088b: 	mulsd	%xmm1, %xmm13
    00000890: 	addsd	%xmm0, %xmm13
    00000895: 	movsd	(%r15,%rax,8), %xmm0
    0000089b: 	mulsd	%xmm7, %xmm0
    0000089f: 	addsd	%xmm13, %xmm0
    000008a4: 	movsd	(%r15,%rcx,8), %xmm13
    000008aa: 	movq	(%rsp), %rcx
    000008ae: 	mulsd	%xmm1, %xmm13
    000008b3: 	addsd	%xmm0, %xmm13
    000008b8: 	addsd	(%r15,%rdx,8), %xmm13
    000008be: 	leal	(%rsi,%rbp), %edx
    000008c1: 	movslq	%edx, %rdx
    000008c4: 	movsd	(%r15,%rdx,8), %xmm0
    000008ca: 	leal	(%rsi,%r12), %edx
    000008ce: 	movslq	%edx, %rdx
    000008d1: 	mulsd	%xmm1, %xmm0
    000008d5: 	addsd	%xmm13, %xmm0
    000008da: 	addsd	(%r15,%rdx,8), %xmm0
    000008e0: 	addsd	%xmm3, %xmm0
    000008e4: 	mulsd	%xmm4, %xmm0
    000008e8: 	movsd	%xmm0, (%rcx,%rax,8)
.Ltmp3707:
    000008ed: 	movq	0x48(%rsp), %rcx
    000008f2: 	movq	0x38(%rsp), %rax
    000008f7: 	movsd	(%r9,%rcx,8), %xmm0
    000008fd: 	movsd	-0x8(%rdi,%rax,8), %xmm13
    00000904: 	mulsd	%xmm1, %xmm0
    00000908: 	mulsd	%xmm6, %xmm13
    0000090d: 	addsd	(%rdi,%rcx,8), %xmm13
    00000913: 	addsd	%xmm13, %xmm0
    00000918: 	movsd	-0x8(%r9,%rax,8), %xmm13
    0000091f: 	mulsd	%xmm5, %xmm13
    00000924: 	addsd	%xmm0, %xmm13
    00000929: 	movsd	-0x8(%r8,%rax,8), %xmm0
    00000930: 	addsd	(%r8,%rcx,8), %xmm13
    00000936: 	movl	0x50(%rsp), %ecx
    0000093a: 	mulsd	%xmm6, %xmm0
    0000093e: 	addsd	%xmm13, %xmm0
    00000943: 	addsd	%xmm3, %xmm0
    00000947: 	mulsd	%xmm4, %xmm0
    0000094b: 	movsd	%xmm0, -0x10(%rbx,%rax,8)
    00000951: 	movq	0x40(%rsp), %rax
    00000956: 	addq	%rax, %rdi
    00000959: 	addq	%rax, %r9
    0000095c: 	addq	%rax, %r8
    0000095f: 	addq	%rax, %rbx
    00000962: 	cmpl	%ecx, 0x20(%rsp)
    00000966: 	jne	.Ltmp3710 # Offset: 2406
.Ltmp3706:
    0000096c: 	movq	0xe0(%rsp), %rax
    00000974: 	cmpl	$0x1, 0x30(%rsp)
    00000979: 	movsd	(%rax), %xmm0
    0000097d: 	movq	0x130(%rsp), %rax
    00000985: 	mulsd	%xmm6, %xmm0
    00000989: 	addsd	(%rax), %xmm0
    0000098d: 	movq	0xf0(%rsp), %rax
    00000995: 	movsd	(%rax), %xmm1
    00000999: 	movq	0x138(%rsp), %rax
    000009a1: 	mulsd	%xmm12, %xmm1
    000009a6: 	addsd	%xmm0, %xmm1
    000009aa: 	movsd	(%rax), %xmm0
    000009ae: 	movq	0x140(%rsp), %rax
    000009b6: 	mulsd	%xmm6, %xmm0
    000009ba: 	addsd	%xmm1, %xmm0
    000009be: 	addsd	%xmm3, %xmm0
    000009c2: 	mulsd	%xmm4, %xmm0
    000009c6: 	movsd	%xmm0, (%rax)
    000009ca: 	jle	.Ltmp3711 # Offset: 2506
    000009d0: 	cmpb	$0x0, 0x187(%rsp)
    000009d8: 	je	.Ltmp3712 # Offset: 2520
    000009de: 	movapd	DATAat0x38980(%rip), %xmm8
    000009e7: 	movq	0x58(%rsp), %rdx
    000009ec: 	xorl	%eax, %eax
    000009ee: 	pxor	%xmm13, %xmm13
    000009f3: 	movapd	DATAat0x38990(%rip), %xmm7
    000009fb: 	movapd	DATAat0x38910(%rip), %xmm5
    00000a03: 	movapd	DATAat0x389a0(%rip), %xmm1
    00000a0b: 	movq	0xe0(%rsp), %rcx
    00000a13: 	movq	0xf0(%rsp), %rsi
    00000a1b: 	movq	0x188(%rsp), %rdi
    00000a23: 	movq	0x190(%rsp), %r8
    00000a2b: 	movq	0x198(%rsp), %r9
    00000a33: 	movq	0x1a0(%rsp), %r10
    00000a3b: 	movq	0x1a8(%rsp), %r11
    00000a43: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3713:
    00000a48: 	movupd	(%r10,%rax), %xmm0
    00000a4e: 	movupd	(%rcx,%rax), %xmm15
    00000a54: 	movupd	(%rsi,%rax), %xmm14
    00000a5a: 	mulpd	%xmm5, %xmm0
    00000a5e: 	mulpd	%xmm8, %xmm14
    00000a63: 	addpd	%xmm15, %xmm0
    00000a68: 	movupd	(%r9,%rax), %xmm15
    00000a6e: 	addpd	%xmm15, %xmm0
    00000a73: 	addpd	%xmm14, %xmm0
    00000a78: 	movupd	(%r8,%rax), %xmm14
    00000a7e: 	mulpd	%xmm7, %xmm14
    00000a83: 	addpd	%xmm14, %xmm0
    00000a88: 	movupd	(%rdi,%rax), %xmm14
    00000a8e: 	mulpd	%xmm8, %xmm14
    00000a93: 	addpd	%xmm14, %xmm0
    00000a98: 	addpd	%xmm13, %xmm0
    00000a9d: 	mulpd	%xmm1, %xmm0
    00000aa1: 	movups	%xmm0, (%r11,%rax)
    00000aa6: 	addq	$0x10, %rax
    00000aaa: 	cmpq	%rax, %rdx
    00000aad: 	jne	.Ltmp3713 # Offset: 2733
    00000aaf: 	cmpl	%r13d, 0x64(%rsp)
    00000ab4: 	je	.Ltmp3711 # Offset: 2740
    00000ab6: 	movq	0x90(%rsp), %rax
    00000abe: 	movsd	DATAat0x38910(%rip), %xmm1
    00000ac6: 	movsd	DATAat0x38990(%rip), %xmm5
    00000ace: 	mulsd	(%rax), %xmm1
    00000ad2: 	movq	0x98(%rsp), %rax
    00000ada: 	addsd	(%rax), %xmm1
    00000ade: 	movq	0x88(%rsp), %rax
    00000ae6: 	addsd	(%rax), %xmm1
    00000aea: 	movq	0x80(%rsp), %rax
    00000af2: 	movsd	(%rax), %xmm0
    00000af6: 	movq	0x78(%rsp), %rax
    00000afb: 	mulsd	%xmm6, %xmm0
    00000aff: 	mulsd	(%rax), %xmm5
    00000b03: 	movq	0x70(%rsp), %rax
    00000b08: 	addsd	%xmm1, %xmm0
    00000b0c: 	addsd	%xmm0, %xmm5
    00000b10: 	movsd	(%rax), %xmm0
    00000b14: 	movq	0x68(%rsp), %rax
    00000b19: 	mulsd	%xmm6, %xmm0
    00000b1d: 	addsd	%xmm5, %xmm0
    00000b21: 	addsd	%xmm3, %xmm0
    00000b25: 	mulsd	%xmm4, %xmm0
    00000b29: 	movsd	%xmm0, (%rax)
.Ltmp3711:
    00000b2d: 	movq	0x150(%rsp), %rax
    00000b35: 	addl	$0x1, 0x100(%rsp)
    00000b3d: 	movsd	(%rax), %xmm0
    00000b41: 	movq	0x148(%rsp), %rax
    00000b49: 	mulsd	%xmm6, %xmm0
    00000b4d: 	addsd	(%rax), %xmm0
    00000b51: 	movq	0x158(%rsp), %rax
    00000b59: 	movsd	(%rax), %xmm1
    00000b5d: 	movq	0x160(%rsp), %rax
    00000b65: 	mulsd	%xmm6, %xmm1
    00000b69: 	addsd	%xmm0, %xmm1
    00000b6d: 	movsd	(%rax), %xmm0
    00000b71: 	movq	0x168(%rsp), %rax
    00000b79: 	mulsd	%xmm12, %xmm0
    00000b7e: 	addsd	%xmm1, %xmm0
    00000b82: 	addsd	%xmm3, %xmm0
    00000b86: 	mulsd	%xmm4, %xmm0
    00000b8a: 	movsd	%xmm0, (%rax)
    00000b8e: 	movl	0x100(%rsp), %eax
    00000b95: 	cmpl	0x180(%rsp), %eax
    00000b9c: 	jne	.Ltmp3714 # Offset: 2972
.Ltmp3737:
    00000ba2: 	movl	0x1d8(%rsp), %ebx
    00000ba9: 	movl	0x104(%rsp), %edi
    00000bb0: 	pxor	%xmm2, %xmm2
    00000bb4: 	movl	0x1dc(%rsp), %edx
    00000bbb: 	movl	%ebx, %eax
    00000bbd: 	imull	%edi, %eax
    00000bc0: 	addl	%edi, %edx
    00000bc2: 	addl	%edx, %edx
    00000bc4: 	subl	%edx, %eax
    00000bc6: 	cvtsi2sd	%eax, %xmm2
    00000bca: 	mulsd	init_value(%rip), %xmm2
    00000bd2: 	cmpl	$0x2, %ebx
    00000bd5: 	jle	.Ltmp3715 # Offset: 3029
    00000bdb: 	movl	%edi, %ebp
    00000bdd: 	leal	-0x2(%rdi), %edi
    00000be0: 	movl	0x34(%rsp), %r12d
    00000be5: 	movl	%ebx, %r8d
    00000be8: 	movl	%edi, %eax
    00000bea: 	movl	%edi, %r9d
    00000bed: 	movl	%edi, %r10d
    00000bf0: 	movq	(%rsp), %r11
    00000bf4: 	shrl	%eax
    00000bf6: 	subl	$0x1, %r8d
    00000bfa: 	andl	$-0x2, %r9d
    00000bfe: 	orl	$0x1, %r10d
    00000c02: 	leal	-0x1(%rax), %esi
    00000c05: 	movl	%r12d, %edx
    00000c08: 	movapd	%xmm3, %xmm0
    00000c0c: 	movl	$0x1, %ecx
    00000c11: 	addq	$0x1, %rsi
    00000c15: 	shlq	$0x4, %rsi
    00000c19: 	nopl	(%rax) # Size: 7
.Ltmp3719:
    00000c20: 	cmpl	$0x2, %ebp
    00000c23: 	jle	.Ltmp3716 # Offset: 3107
    00000c25: 	cmpl	$0x3, %ebp
    00000c28: 	je	.Ltmp3717 # Offset: 3112
    00000c2e: 	movslq	%edx, %rax
    00000c31: 	leaq	0x8(%r11,%rax,8), %rax
    00000c36: 	leaq	(%rsi,%rax), %rbx
    00000c3a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3718:
    00000c40: 	movsd	(%rax), %xmm1
    00000c44: 	addq	$0x10, %rax
    00000c48: 	addsd	%xmm1, %xmm0
    00000c4c: 	movsd	-0x8(%rax), %xmm1
    00000c51: 	addsd	%xmm1, %xmm0
    00000c55: 	cmpq	%rbx, %rax
    00000c58: 	jne	.Ltmp3718 # Offset: 3160
    00000c5a: 	movl	%r10d, %eax
    00000c5d: 	cmpl	%r9d, %edi
    00000c60: 	je	.Ltmp3716 # Offset: 3168
.Ltmp3732:
    00000c62: 	addl	%edx, %eax
    00000c64: 	cltq
    00000c66: 	addsd	(%r11,%rax,8), %xmm0
.Ltmp3716:
    00000c6c: 	addl	$0x1, %ecx
    00000c6f: 	addl	%r12d, %edx
    00000c72: 	cmpl	%r8d, %ecx
    00000c75: 	jne	.Ltmp3719 # Offset: 3189
    00000c77: 	movq	DATAat0x38920(%rip), %xmm1
    00000c7f: 	movapd	%xmm0, %xmm3
    00000c83: 	subsd	%xmm2, %xmm3
    00000c87: 	movapd	%xmm0, %xmm2
    00000c8b: 	andpd	%xmm1, %xmm2
    00000c8f: 	comisd	DATAat0x38a60(%rip), %xmm2
    00000c97: 	jbe	.Ltmp3720 # Offset: 3223
    00000c99: 	divsd	%xmm0, %xmm3
.Ltmp3720:
    00000c9d: 	movsd	DATAat0x38a68(%rip), %xmm0
    00000ca5: 	andpd	%xmm1, %xmm3
    00000ca9: 	comisd	%xmm3, %xmm0
    00000cad: 	jbe	.Ltmp3721 # Offset: 3245
.Ltmp3734:
    00000cb3: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000cba: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000cc1: 	subq	$0x20, %rax
    00000cc5: 	cmpq	%rax, %rbx
    00000cc8: 	je	.Ltmp3722 # Offset: 3272
    00000cce: 	movq	0x1c0(%rsp), %rax
    00000cd6: 	leaq	0x10(%rbx), %rdi
    00000cda: 	movq	%rdi, (%rbx)
    00000cdd: 	movq	(%rax), %rbp
    00000ce0: 	movq	0x8(%rax), %r12
    00000ce4: 	movq	%rbp, %rax
    00000ce7: 	addq	%r12, %rax
    00000cea: 	je	.Ltmp3723 # Offset: 3306
    00000cec: 	testq	%rbp, %rbp
    00000cef: 	je	.Ltmp3724 # Offset: 3311
.Ltmp3723:
    00000cf5: 	movq	%r12, 0x1e0(%rsp)
    00000cfd: 	cmpq	$0xf, %r12
    00000d01: 	ja	.Ltmp3725 # Offset: 3329
    00000d07: 	cmpq	$0x1, %r12
    00000d0b: 	jne	.Ltmp3726 # Offset: 3339
    00000d11: 	movzbl	(%rbp), %eax
    00000d15: 	movb	%al, 0x10(%rbx)
.Ltmp3733:
    00000d18: 	movq	%r12, 0x8(%rbx)
    00000d1c: 	movb	$0x0, (%rdi,%r12)
    00000d21: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000d28: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000d2f: 	addq	$0x20, %rax
    00000d33: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000d3a: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000d41: 	je	.Ltmp3727 # Offset: 3393
.Ltmp3735:
    00000d47: 	movq	-0x20(%rax), %rbp
    00000d4b: 	callq	clock@PLT # Offset: 3403
    00000d50: 	movq	%rax, end_time(%rip)
    00000d57: 	movq	0x1e8(%rsp), %rdx
    00000d5f: 	subq	%fs:0x28, %rdx
    00000d68: 	jne	.Ltmp3728 # Offset: 3432
    00000d6e: 	subq	start_time(%rip), %rax
    00000d75: 	pxor	%xmm0, %xmm0
    00000d79: 	movq	%rbp, %rdi
    00000d7c: 	cvtsi2sd	%rax, %xmm0
    00000d81: 	divsd	DATAat0x38a48(%rip), %xmm0
    00000d89: 	addq	$0x1f8, %rsp
    00000d90: 	popq	%rbx
    00000d91: 	popq	%rbp
    00000d92: 	popq	%r12
    00000d94: 	popq	%r13
    00000d96: 	popq	%r14
    00000d98: 	popq	%r15
    00000d9a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 3482
    00000d9f: 	nop # Size: 1
.Ltmp3708:
    00000da0: 	movq	0xf8(%rsp), %rax
    00000da8: 	movq	%r9, %rdx
    00000dab: 	movq	(%rsp), %r11
    00000daf: 	movq	%r8, %rcx
    00000db2: 	subq	%r15, %rdx
    00000db5: 	leaq	(%rax,%rdi), %r10
    00000db9: 	movq	%rdi, %rax
    00000dbc: 	nopl	(%rax) # Size: 4
.Ltmp3729:
    00000dc0: 	movsd	(%r15,%rdx), %xmm13
    00000dc6: 	movsd	0x8(%rax), %xmm0
    00000dcb: 	addq	$0x8, %rax
    00000dcf: 	addq	$0x8, %rcx
    00000dd3: 	mulsd	%xmm1, %xmm13
    00000dd8: 	mulsd	%xmm1, %xmm0
    00000ddc: 	addsd	-0x8(%rax), %xmm0
    00000de1: 	addsd	0x8(%rax), %xmm0
    00000de6: 	addsd	%xmm0, %xmm13
    00000deb: 	movsd	0x8(%r15,%rdx), %xmm0
    00000df2: 	mulsd	%xmm7, %xmm0
    00000df6: 	addsd	%xmm13, %xmm0
    00000dfb: 	movsd	0x10(%r15,%rdx), %xmm13
    00000e02: 	mulsd	%xmm1, %xmm13
    00000e07: 	addsd	%xmm0, %xmm13
    00000e0c: 	movsd	(%rcx), %xmm0
    00000e10: 	addsd	-0x8(%rcx), %xmm13
    00000e16: 	mulsd	%xmm1, %xmm0
    00000e1a: 	addsd	%xmm13, %xmm0
    00000e1f: 	addsd	0x8(%rcx), %xmm0
    00000e24: 	addsd	%xmm3, %xmm0
    00000e28: 	mulsd	%xmm4, %xmm0
    00000e2c: 	movsd	%xmm0, 0x8(%r11,%rdx)
    00000e33: 	addq	$0x8, %rdx
    00000e37: 	cmpq	%rax, %r10
    00000e3a: 	jne	.Ltmp3729 # Offset: 3642
    00000e3c: 	jmp	.Ltmp3707 # Offset: 3644
.Ltmp3704:
    00000e41: 	movq	%rax, %rsi
    00000e44: 	movq	0x1c8(%rsp), %rax
    00000e4c: 	movq	0xd8(%rsp), %rdx
    00000e54: 	movsd	DATAat0x38990(%rip), %xmm5
    00000e5c: 	movsd	DATAat0x38910(%rip), %xmm1
    00000e64: 	leaq	0x2(%rax), %rcx
    00000e68: 	movl	$0x1, %eax
    00000e6d: 	nopl	(%rax) # Size: 3
.Ltmp3730:
    00000e70: 	movsd	-0x8(%r15,%rax,8), %xmm7
    00000e77: 	movsd	(%r15,%rax,8), %xmm0
    00000e7d: 	addq	$0x8, %rdx
    00000e81: 	mulsd	%xmm6, %xmm7
    00000e85: 	mulsd	%xmm5, %xmm0
    00000e89: 	addsd	%xmm7, %xmm0
    00000e8d: 	movsd	0x8(%r15,%rax,8), %xmm7
    00000e94: 	mulsd	%xmm6, %xmm7
    00000e98: 	addsd	%xmm0, %xmm7
    00000e9c: 	movsd	(%rdx), %xmm0
    00000ea0: 	addsd	-0x8(%rdx), %xmm7
    00000ea5: 	mulsd	%xmm1, %xmm0
    00000ea9: 	addsd	%xmm7, %xmm0
    00000ead: 	addsd	0x8(%rdx), %xmm0
    00000eb2: 	addsd	%xmm3, %xmm0
    00000eb6: 	mulsd	%xmm4, %xmm0
    00000eba: 	movsd	%xmm0, (%rsi,%rax,8)
    00000ebf: 	addq	$0x1, %rax
    00000ec3: 	cmpq	%rcx, %rax
    00000ec6: 	jne	.Ltmp3730 # Offset: 3782
    00000ec8: 	jmp	.Ltmp3703 # Offset: 3784
.Ltmp3712:
    00000ecd: 	movq	0x1b8(%rsp), %rdx
    00000ed5: 	movq	0xe0(%rsp), %rax
    00000edd: 	movsd	DATAat0x38990(%rip), %xmm5
    00000ee5: 	movsd	DATAat0x38910(%rip), %xmm1
    00000eed: 	movq	0x1d0(%rsp), %rcx
    00000ef5: 	movq	(%rsp), %rsi
    00000ef9: 	nopl	(%rax) # Size: 7
.Ltmp3731:
    00000f00: 	movsd	(%r15,%rdx), %xmm7
    00000f06: 	movsd	0x8(%rax), %xmm0
    00000f0b: 	addq	$0x8, %rax
    00000f0f: 	mulsd	%xmm6, %xmm7
    00000f13: 	mulsd	%xmm1, %xmm0
    00000f17: 	addsd	-0x8(%rax), %xmm0
    00000f1c: 	addsd	0x8(%rax), %xmm0
    00000f21: 	addsd	%xmm7, %xmm0
    00000f25: 	movsd	0x8(%r15,%rdx), %xmm7
    00000f2c: 	mulsd	%xmm5, %xmm7
    00000f30: 	addsd	%xmm0, %xmm7
    00000f34: 	movsd	0x10(%r15,%rdx), %xmm0
    00000f3b: 	mulsd	%xmm6, %xmm0
    00000f3f: 	addsd	%xmm7, %xmm0
    00000f43: 	addsd	%xmm3, %xmm0
    00000f47: 	mulsd	%xmm4, %xmm0
    00000f4b: 	movsd	%xmm0, 0x8(%rsi,%rdx)
    00000f51: 	addq	$0x8, %rdx
    00000f55: 	cmpq	%rax, %rcx
    00000f58: 	jne	.Ltmp3731 # Offset: 3928
    00000f5a: 	jmp	.Ltmp3711 # Offset: 3930
.Ltmp3717:
    00000f5f: 	movl	$0x1, %eax
    00000f64: 	jmp	.Ltmp3732 # Offset: 3940
.Ltmp3725:
    00000f69: 	movq	%rbx, %rdi
    00000f6c: 	leaq	0x1e0(%rsp), %rsi
    00000f74: 	xorl	%edx, %edx
    00000f76: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3958
    00000f7b: 	movq	%rax, (%rbx)
    00000f7e: 	movq	%rax, %rdi
    00000f81: 	movq	0x1e0(%rsp), %rax
    00000f89: 	movq	%rax, 0x10(%rbx)
.Ltmp3736:
    00000f8d: 	movq	%r12, %rdx
    00000f90: 	movq	%rbp, %rsi
    00000f93: 	callq	memcpy@PLT # Offset: 3987
    00000f98: 	movq	0x1e0(%rsp), %r12
    00000fa0: 	movq	(%rbx), %rdi
    00000fa3: 	jmp	.Ltmp3733 # Offset: 4003
.Ltmp3721:
    00000fa8: 	movq	0x1c0(%rsp), %rax
    00000fb0: 	leaq	DATAat0x381c8(%rip), %rsi
    00000fb7: 	movl	$0x1, %edi
    00000fbc: 	movq	(%rax), %rdx
    00000fbf: 	xorl	%eax, %eax
    00000fc1: 	callq	__printf_chk@PLT # Offset: 4033
    00000fc6: 	jmp	.Ltmp3734 # Offset: 4038
.Ltmp3722:
    00000fcb: 	movq	0x1c0(%rsp), %rsi
    00000fd3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000fda: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4058
    00000fdf: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000fe6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000fed: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000ff4: 	jne	.Ltmp3735 # Offset: 4084
.Ltmp3727:
    00000ffa: 	movq	-0x8(%rdx), %rax
    00000ffe: 	addq	$0x200, %rax
    00001004: 	jmp	.Ltmp3735 # Offset: 4100
.Ltmp3726:
    00001009: 	testq	%r12, %r12
    0000100c: 	je	.Ltmp3733 # Offset: 4108
    00001012: 	jmp	.Ltmp3736 # Offset: 4114
    00001017: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3715:
    00001020: 	subsd	%xmm2, %xmm3
    00001024: 	movq	DATAat0x38920(%rip), %xmm1
    0000102c: 	jmp	.Ltmp3720 # Offset: 4140
.Ltmp3702:
    00001031: 	movl	0x1d8(%rsp), %eax
    00001038: 	pxor	%xmm3, %xmm3
    0000103c: 	subl	$0x2, %eax
    0000103f: 	movl	%eax, 0x1dc(%rsp)
    00001046: 	jmp	.Ltmp3737 # Offset: 4166
.Ltmp3724:
    0000104b: 	leaq	DATAat0x38158(%rip), %rdi
    00001052: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4178
.Ltmp3728:
    00001057: 	callq	__stack_chk_fail@PLT # Offset: 4183
DWARF CFI Instructions:
    <empty>
End of Function "_Z15convolution2D_5IddEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15convolution2D_4IilEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 286
  State       : disassembled
  Address     : 0x2d940
  Size        : 0x8f7
  MaxSize     : 0x900
  Offset      : 0x2d940
  Section     : .text
  Orc Section : .local.text._Z15convolution2D_4IilEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0285:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rsi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0xf8, %rsp
    0000001b: 	movl	%edx, 0xc8(%rsp)
    00000022: 	movl	%ecx, 0xcc(%rsp)
    00000029: 	movl	%r8d, 0xd8(%rsp)
    00000031: 	movq	%r9, 0xd0(%rsp)
    00000039: 	movq	%fs:0x28, %rax
    00000042: 	movq	%rax, 0xe8(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	callq	clock@PLT # Offset: 76
    00000051: 	movq	%rax, start_time(%rip)
    00000058: 	movl	iterations(%rip), %eax
    0000005e: 	testl	%eax, %eax
    00000060: 	jle	.Ltmp3738 # Offset: 96
    00000066: 	movslq	0xd8(%rsp), %r12
    0000006e: 	movl	0xcc(%rsp), %r11d
    00000076: 	movl	$0x0, 0x1c(%rsp)
    0000007e: 	movq	%r12, %r14
    00000081: 	shlq	$0x2, %r12
    00000085: 	leal	-0x2(%r11), %ecx
    00000089: 	leal	-0x1(%r11), %r15d
    0000008d: 	leaq	(%rbx,%r12), %rax
    00000091: 	movl	%r15d, 0xc(%rsp)
    00000096: 	movq	%rax, 0x20(%rsp)
    0000009b: 	leaq	0x4(%rbx,%r12), %rax
    000000a0: 	movq	%rax, 0x28(%rsp)
    000000a5: 	movslq	%ecx, %rax
    000000a8: 	leaq	(%rbx,%rax,4), %r13
    000000ac: 	movslq	%r15d, %rax
    000000af: 	leaq	(,%rax,4), %rdi
    000000b7: 	leaq	(%rbx,%rdi), %rax
    000000bb: 	movq	%rax, 0x30(%rsp)
    000000c0: 	leal	(%rcx,%r14), %eax
    000000c4: 	cltq
    000000c6: 	leaq	(%rbx,%rax,4), %rax
    000000ca: 	movq	%rax, 0x38(%rsp)
    000000cf: 	movl	%r15d, %eax
    000000d2: 	addl	%r14d, %eax
    000000d5: 	cltq
    000000d7: 	leaq	(%rbx,%rax,4), %rax
    000000db: 	movq	%rax, 0x40(%rsp)
    000000e0: 	leaq	(%rbp,%rdi), %rax
    000000e5: 	movq	%rax, 0x48(%rsp)
    000000ea: 	movl	0xc8(%rsp), %eax
    000000f1: 	leal	-0x1(%rax), %edx
    000000f4: 	movl	%edx, 0x18(%rsp)
    000000f8: 	leal	-0x2(%rax), %edx
    000000fb: 	movl	%edx, 0xdc(%rsp)
    00000102: 	imull	%r14d, %edx
    00000106: 	movslq	%edx, %r8
    00000109: 	leal	(%rdx,%r14), %esi
    0000010d: 	leaq	(%rbx,%r8,4), %rax
    00000111: 	movq	%rax, 0x50(%rsp)
    00000116: 	leal	0x1(%rdx), %eax
    00000119: 	cltq
    0000011b: 	leaq	(%rbx,%rax,4), %rax
    0000011f: 	movq	%rax, 0x58(%rsp)
    00000124: 	movslq	%esi, %rax
    00000127: 	leaq	(,%rax,4), %r10
    0000012f: 	leaq	(%rbx,%r10), %rax
    00000133: 	movq	%r10, 0x60(%rsp)
    00000138: 	movq	%rax, 0x68(%rsp)
    0000013d: 	leal	0x1(%rsi), %eax
    00000140: 	cltq
    00000142: 	leaq	(%rbx,%rax,4), %rax
    00000146: 	movq	%rax, 0x70(%rsp)
    0000014b: 	leaq	(%rbp,%r10), %rax
    00000150: 	movq	%rax, 0x78(%rsp)
    00000155: 	leal	(%rcx,%rdx), %eax
    00000158: 	cltq
    0000015a: 	leaq	(%rbx,%rax,4), %rax
    0000015e: 	movq	%rax, 0x80(%rsp)
    00000166: 	leal	(%rdx,%r15), %eax
    0000016a: 	cltq
    0000016c: 	leaq	(%rbx,%rax,4), %rax
    00000170: 	movq	%rax, 0x88(%rsp)
    00000178: 	leal	(%rcx,%rsi), %eax
    0000017b: 	cltq
    0000017d: 	leaq	(%rbx,%rax,4), %rax
    00000181: 	movq	%rax, 0x90(%rsp)
    00000189: 	leal	(%rsi,%r15), %eax
    0000018d: 	cltq
    0000018f: 	shlq	$0x2, %rax
    00000193: 	leaq	(%rbx,%rax), %rcx
    00000197: 	addq	%rbp, %rax
    0000019a: 	movq	%rcx, 0x98(%rsp)
    000001a2: 	leaq	0x4(%rbx), %rcx
    000001a6: 	movq	%rax, 0xa0(%rsp)
    000001ae: 	leal	-0x3(%r11), %eax
    000001b2: 	leaq	(%rcx,%rax,4), %rdx
    000001b6: 	movq	%rdx, 0xb8(%rsp)
    000001be: 	leal	(%r14,%r14), %edx
    000001c2: 	movslq	%edx, %rdx
    000001c5: 	shlq	$0x2, %rdx
    000001c9: 	movq	%rdx, 0xb0(%rsp)
    000001d1: 	leaq	0x4(%rdi), %rdx
    000001d5: 	leaq	(%rbp,%rdx), %rdi
    000001da: 	leaq	(%rbx,%rdx), %r15
    000001de: 	leaq	(%r8,%rax), %rdx
    000001e2: 	movq	%rdi, 0x10(%rsp)
    000001e7: 	addq	$0x2, %rax
    000001eb: 	leaq	(%rcx,%rdx,4), %rdi
    000001ef: 	movq	%rax, 0xa8(%rsp)
    000001f7: 	movq	%rdi, 0xc0(%rsp)
    000001ff: 	nop # Size: 1
.Ltmp3747:
    00000200: 	movslq	(%rbx), %rax
    00000203: 	movslq	0x4(%rbx), %rdx
    00000207: 	movq	0x28(%rsp), %rdi
    0000020c: 	leaq	(%rax,%rax,4), %rcx
    00000210: 	leaq	(%rax,%rcx,2), %rcx
    00000214: 	addq	%rdx, %rcx
    00000217: 	leaq	(%rdx,%rdx,4), %rdx
    0000021b: 	leaq	(%rcx,%rax,8), %rax
    0000021f: 	movq	0x20(%rsp), %rcx
    00000224: 	addq	%rax, %rdx
    00000227: 	movslq	(%rcx), %rax
    0000022a: 	addq	%rax, %rdx
    0000022d: 	leaq	(%rax,%rax,4), %rax
    00000231: 	addq	%rdx, %rax
    00000234: 	movslq	(%rdi), %rdx
    00000237: 	movq	0xa8(%rsp), %rdi
    0000023f: 	addq	%rdx, %rax
    00000242: 	leaq	0x2f(%rax), %rdx
    00000246: 	addq	$0x10, %rax
    0000024a: 	cmovnsq	%rax, %rdx
    0000024e: 	movl	$0x1, %eax
    00000253: 	sarq	$0x5, %rdx
    00000257: 	cmpl	$0x1, 0xc(%rsp)
    0000025c: 	movl	%edx, (%rbp)
    0000025f: 	jle	.Ltmp3739 # Offset: 607
    00000261: 	nopl	(%rax) # Size: 7
.Ltmp3740:
    00000268: 	movslq	(%rbx,%rax,4), %r9
    0000026c: 	movslq	-0x4(%rbx,%rax,4), %r8
    00000271: 	movslq	0x4(%rbx,%rax,4), %rsi
    00000276: 	leaq	(%r9,%r9,4), %rdx
    0000027a: 	addq	%r8, %rdx
    0000027d: 	leaq	(%r8,%r8,4), %r8
    00000281: 	addq	%rsi, %rdx
    00000284: 	leaq	(%rsi,%rsi,4), %rsi
    00000288: 	addq	%r8, %rdx
    0000028b: 	leaq	(%rdx,%r9,8), %rdx
    0000028f: 	addq	%rdx, %rsi
    00000292: 	movslq	(%rcx), %rdx
    00000295: 	addq	%rsi, %rdx
    00000298: 	movslq	0x4(%rcx), %rsi
    0000029c: 	leaq	(%rsi,%rsi,4), %rsi
    000002a0: 	addq	%rdx, %rsi
    000002a3: 	movslq	0x8(%rcx), %rdx
    000002a7: 	addq	%rsi, %rdx
    000002aa: 	leaq	0x2f(%rdx), %rsi
    000002ae: 	addq	$0x10, %rdx
    000002b2: 	cmovsq	%rsi, %rdx
    000002b6: 	addq	$0x4, %rcx
    000002ba: 	sarq	$0x5, %rdx
    000002be: 	movl	%edx, (%rbp,%rax,4)
    000002c2: 	addq	$0x1, %rax
    000002c6: 	cmpq	%rax, %rdi
    000002c9: 	jne	.Ltmp3740 # Offset: 713
.Ltmp3739:
    000002cb: 	movq	0x30(%rsp), %rax
    000002d0: 	movslq	(%r13), %rdx
    000002d4: 	movq	0x38(%rsp), %rdi
    000002d9: 	movslq	(%rax), %rax
    000002dc: 	leaq	(%rax,%rax,4), %rsi
    000002e0: 	leaq	(%rdx,%rsi), %rcx
    000002e4: 	leaq	(%rdx,%rdx,4), %rdx
    000002e8: 	addq	%rax, %rcx
    000002eb: 	addq	%rcx, %rdx
    000002ee: 	movslq	(%rdi), %rcx
    000002f1: 	leaq	(%rdx,%rax,8), %rax
    000002f5: 	addq	%rsi, %rax
    000002f8: 	addq	%rax, %rcx
    000002fb: 	movq	0x40(%rsp), %rax
    00000300: 	movslq	(%rax), %rdx
    00000303: 	leaq	(%rdx,%rdx,4), %rax
    00000307: 	addq	%rcx, %rax
    0000030a: 	addq	%rdx, %rax
    0000030d: 	leaq	0x2f(%rax), %rdx
    00000311: 	addq	$0x10, %rax
    00000315: 	cmovnsq	%rax, %rdx
    00000319: 	movq	0x48(%rsp), %rax
    0000031e: 	sarq	$0x5, %rdx
    00000322: 	cmpl	$0x1, 0x18(%rsp)
    00000327: 	movl	%edx, (%rax)
    00000329: 	jle	.Ltmp3741 # Offset: 809
    0000032f: 	movq	0xb0(%rsp), %r11
    00000337: 	movq	%r12, %r9
    0000033a: 	xorl	%r10d, %r10d
    0000033d: 	movl	$0x1, %r14d
    00000343: 	movq	0xb8(%rsp), %r8
    0000034b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3744:
    00000350: 	movslq	(%rbx,%r10), %rax
    00000354: 	addl	$0x1, %r14d
    00000358: 	leaq	(%rbx,%r11), %rdi
    0000035c: 	leaq	(%rax,%rax,2), %rdx
    00000360: 	movslq	0x4(%rbx,%r10), %rax
    00000365: 	leaq	(%rax,%rdx,2), %rcx
    00000369: 	movslq	(%rbx,%r9), %rdx
    0000036d: 	leaq	(%rdx,%rdx,4), %rax
    00000371: 	addq	%rcx, %rax
    00000374: 	leaq	(%rbx,%r10), %rcx
    00000378: 	leaq	(%rax,%rdx,8), %rdx
    0000037c: 	movslq	0x4(%rbx,%r9), %rax
    00000381: 	leaq	(%rax,%rax,4), %rax
    00000385: 	addq	%rdx, %rax
    00000388: 	movslq	(%rbx,%r11), %rdx
    0000038c: 	addq	%rdx, %rax
    0000038f: 	leaq	(%rdx,%rdx,4), %rdx
    00000393: 	addq	%rax, %rdx
    00000396: 	movslq	0x4(%rbx,%r11), %rax
    0000039b: 	addq	%rdx, %rax
    0000039e: 	leaq	0x2f(%rax), %rdx
    000003a2: 	addq	$0x10, %rax
    000003a6: 	cmovnsq	%rax, %rdx
    000003aa: 	sarq	$0x5, %rdx
    000003ae: 	cmpl	$0x1, 0xc(%rsp)
    000003b3: 	movl	%edx, (%rbp,%r9)
    000003b8: 	movq	%r9, %rdx
    000003bb: 	jle	.Ltmp3742 # Offset: 955
    000003bd: 	nopl	(%rax) # Size: 3
.Ltmp3743:
    000003c0: 	movslq	0x4(%rcx), %rax
    000003c4: 	movslq	(%rcx), %rsi
    000003c7: 	leaq	(%rax,%rax,4), %rax
    000003cb: 	addq	%rsi, %rax
    000003ce: 	movslq	0x8(%rcx), %rsi
    000003d2: 	addq	%rax, %rsi
    000003d5: 	movslq	(%rbx,%rdx), %rax
    000003d9: 	leaq	(%rax,%rax,4), %rax
    000003dd: 	addq	%rsi, %rax
    000003e0: 	movslq	0x4(%rbx,%rdx), %rsi
    000003e5: 	leaq	(%rax,%rsi,8), %rax
    000003e9: 	movslq	0x8(%rbx,%rdx), %rsi
    000003ee: 	leaq	(%rsi,%rsi,4), %rsi
    000003f2: 	addq	%rax, %rsi
    000003f5: 	movslq	(%rdi), %rax
    000003f8: 	addq	%rsi, %rax
    000003fb: 	movslq	0x4(%rdi), %rsi
    000003ff: 	leaq	(%rsi,%rsi,4), %rsi
    00000403: 	addq	%rax, %rsi
    00000406: 	movslq	0x8(%rdi), %rax
    0000040a: 	addq	%rsi, %rax
    0000040d: 	leaq	0x2f(%rax), %rsi
    00000411: 	addq	$0x10, %rax
    00000415: 	cmovnsq	%rax, %rsi
    00000419: 	addq	$0x4, %rcx
    0000041d: 	addq	$0x4, %rdi
    00000421: 	sarq	$0x5, %rsi
    00000425: 	movl	%esi, 0x4(%rbp,%rdx)
    00000429: 	addq	$0x4, %rdx
    0000042d: 	cmpq	%rcx, %r8
    00000430: 	jne	.Ltmp3743 # Offset: 1072
.Ltmp3742:
    00000432: 	movslq	-0x4(%r15,%r10), %rdx
    00000437: 	movslq	(%r13,%r10), %rax
    0000043c: 	leaq	(%rdx,%rdx,4), %rcx
    00000440: 	addq	%rcx, %rax
    00000443: 	movslq	(%r13,%r11), %rcx
    00000448: 	addq	%rdx, %rax
    0000044b: 	movslq	(%r13,%r9), %rdx
    00000450: 	leaq	(%rdx,%rdx,4), %rdx
    00000454: 	addq	%rax, %rdx
    00000457: 	movslq	-0x4(%r15,%r9), %rax
    0000045c: 	leaq	(%rdx,%rax,8), %rdx
    00000460: 	leaq	(%rax,%rax,4), %rax
    00000464: 	addq	%rdx, %rax
    00000467: 	addq	%rax, %rcx
    0000046a: 	movslq	-0x4(%r15,%r11), %rax
    0000046f: 	leaq	(%rax,%rax,4), %rdx
    00000473: 	addq	%rcx, %rdx
    00000476: 	addq	%rdx, %rax
    00000479: 	leaq	0x2f(%rax), %rdx
    0000047d: 	addq	$0x10, %rax
    00000481: 	cmovnsq	%rax, %rdx
    00000485: 	movq	0x10(%rsp), %rax
    0000048a: 	addq	%r12, %r8
    0000048d: 	addq	%r12, %r10
    00000490: 	addq	%r12, %r11
    00000493: 	sarq	$0x5, %rdx
    00000497: 	movl	%edx, -0x4(%rax,%r9)
    0000049c: 	addq	%r12, %r9
    0000049f: 	cmpl	0x18(%rsp), %r14d
    000004a4: 	jne	.Ltmp3744 # Offset: 1188
.Ltmp3741:
    000004aa: 	movq	0x50(%rsp), %r14
    000004af: 	movslq	(%r14), %rax
    000004b2: 	leaq	(%rax,%rax,2), %rdx
    000004b6: 	movq	0x58(%rsp), %rax
    000004bb: 	movslq	(%rax), %rax
    000004be: 	leaq	(%rax,%rdx,2), %rcx
    000004c2: 	movq	0x68(%rsp), %rax
    000004c7: 	movslq	(%rax), %rdx
    000004ca: 	leaq	(%rdx,%rdx,4), %rax
    000004ce: 	addq	%rax, %rcx
    000004d1: 	leaq	(%rcx,%rdx,8), %rdi
    000004d5: 	movq	0x70(%rsp), %rcx
    000004da: 	movslq	(%rcx), %rcx
    000004dd: 	leaq	(%rcx,%rcx,4), %rsi
    000004e1: 	addq	%rdi, %rsi
    000004e4: 	movq	0xc0(%rsp), %rdi
    000004ec: 	addq	%rsi, %rdx
    000004ef: 	addq	%rdx, %rax
    000004f2: 	addq	%rcx, %rax
    000004f5: 	leaq	0x2f(%rax), %rdx
    000004f9: 	addq	$0x10, %rax
    000004fd: 	cmovnsq	%rax, %rdx
    00000501: 	movq	0x78(%rsp), %rax
    00000506: 	sarq	$0x5, %rdx
    0000050a: 	cmpl	$0x1, 0xc(%rsp)
    0000050f: 	movl	%edx, (%rax)
    00000511: 	movq	0x60(%rsp), %rdx
    00000516: 	movq	%r14, %rax
    00000519: 	jle	.Ltmp3745 # Offset: 1305
    0000051b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3746:
    00000520: 	movslq	0x4(%rax), %rcx
    00000524: 	movslq	(%rax), %rsi
    00000527: 	movslq	0x8(%rax), %r8
    0000052b: 	leaq	(%rcx,%rcx,4), %rcx
    0000052f: 	addq	%rsi, %rcx
    00000532: 	movslq	(%rbx,%rdx), %rsi
    00000536: 	addq	%rcx, %r8
    00000539: 	leaq	(%rsi,%rsi,4), %rcx
    0000053d: 	addq	%r8, %rcx
    00000540: 	movslq	0x4(%rbx,%rdx), %r8
    00000545: 	leaq	(%rcx,%r8,8), %r10
    00000549: 	movslq	0x8(%rbx,%rdx), %rcx
    0000054e: 	leaq	(%r8,%r8,4), %r8
    00000552: 	leaq	(%rcx,%rcx,4), %r9
    00000556: 	addq	%r10, %r9
    00000559: 	addq	%r9, %rsi
    0000055c: 	addq	%r8, %rsi
    0000055f: 	addq	%rsi, %rcx
    00000562: 	leaq	0x2f(%rcx), %rsi
    00000566: 	addq	$0x10, %rcx
    0000056a: 	cmovsq	%rsi, %rcx
    0000056e: 	addq	$0x4, %rax
    00000572: 	sarq	$0x5, %rcx
    00000576: 	movl	%ecx, 0x4(%rbp,%rdx)
    0000057a: 	addq	$0x4, %rdx
    0000057e: 	cmpq	%rdi, %rax
    00000581: 	jne	.Ltmp3746 # Offset: 1409
.Ltmp3745:
    00000583: 	movq	0x88(%rsp), %rax
    0000058b: 	movslq	(%rax), %rdx
    0000058e: 	movq	0x80(%rsp), %rax
    00000596: 	movslq	(%rax), %rax
    00000599: 	leaq	(%rdx,%rdx,4), %rcx
    0000059d: 	addq	%rax, %rcx
    000005a0: 	movq	0x90(%rsp), %rax
    000005a8: 	addq	%rdx, %rcx
    000005ab: 	movslq	(%rax), %rdx
    000005ae: 	leaq	(%rdx,%rdx,4), %rax
    000005b2: 	addq	%rax, %rcx
    000005b5: 	movq	0x98(%rsp), %rax
    000005bd: 	movslq	(%rax), %rax
    000005c0: 	leaq	(%rax,%rax,4), %rsi
    000005c4: 	leaq	(%rcx,%rax,8), %rcx
    000005c8: 	leaq	(%rdx,%rsi,2), %rdx
    000005cc: 	addq	%rcx, %rdx
    000005cf: 	addq	%rdx, %rax
    000005d2: 	leaq	0x2f(%rax), %rdx
    000005d6: 	addq	$0x10, %rax
    000005da: 	cmovnsq	%rax, %rdx
    000005de: 	movq	0xa0(%rsp), %rax
    000005e6: 	addl	$0x1, 0x1c(%rsp)
    000005eb: 	sarq	$0x5, %rdx
    000005ef: 	movl	%edx, (%rax)
    000005f1: 	movl	0x1c(%rsp), %eax
    000005f5: 	cmpl	%eax, iterations(%rip)
    000005fb: 	jg	.Ltmp3747 # Offset: 1531
.Ltmp3765:
    00000601: 	movl	0xdc(%rsp), %eax
    00000608: 	xorl	%edx, %edx
    0000060a: 	addl	0xcc(%rsp), %eax
    00000611: 	cmpl	$0x2, 0xc8(%rsp)
    00000619: 	leal	(%rax,%rax), %r14d
    0000061d: 	jle	.Ltmp3748 # Offset: 1565
    00000623: 	movl	0xcc(%rsp), %eax
    0000062a: 	movl	0xc8(%rsp), %ebx
    00000631: 	xorl	%edx, %edx
    00000633: 	movl	$0x1, %esi
    00000638: 	movl	0xd8(%rsp), %r13d
    00000640: 	leal	-0x2(%rax), %r10d
    00000644: 	leal	-0x1(%rax), %edi
    00000647: 	leal	-0x3(%rax), %r11d
    0000064b: 	movl	%r10d, %eax
    0000064e: 	leal	-0x1(%rbx), %r9d
    00000652: 	movl	%r10d, %ebx
    00000655: 	shrl	$0x2, %eax
    00000658: 	andl	$-0x4, %ebx
    0000065b: 	movl	%r13d, %ecx
    0000065e: 	leal	-0x1(%rax), %r8d
    00000662: 	leal	0x1(%rbx), %r12d
    00000666: 	addq	$0x1, %r8
    0000066a: 	shlq	$0x4, %r8
    0000066e: 	nop # Size: 2
.Ltmp3752:
    00000670: 	cmpl	$0x1, %edi
    00000673: 	jle	.Ltmp3749 # Offset: 1651
    00000679: 	cmpl	$0x2, %r11d
    0000067d: 	jbe	.Ltmp3750 # Offset: 1661
    00000683: 	movslq	%ecx, %rax
    00000686: 	pxor	%xmm0, %xmm0
    0000068a: 	leaq	0x4(%rbp,%rax,4), %rax
    0000068f: 	leaq	(%r8,%rax), %r15
    00000693: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3751:
    00000698: 	movdqu	(%rax), %xmm2
    0000069c: 	addq	$0x10, %rax
    000006a0: 	paddd	%xmm2, %xmm0
    000006a4: 	cmpq	%r15, %rax
    000006a7: 	jne	.Ltmp3751 # Offset: 1703
    000006a9: 	movdqa	%xmm0, %xmm1
    000006ad: 	psrldq	$0x8, %xmm1
    000006b2: 	paddd	%xmm1, %xmm0
    000006b6: 	movdqa	%xmm0, %xmm1
    000006ba: 	psrldq	$0x4, %xmm1
    000006bf: 	paddd	%xmm1, %xmm0
    000006c3: 	movd	%xmm0, %eax
    000006c7: 	addl	%eax, %edx
    000006c9: 	movl	%r12d, %eax
    000006cc: 	cmpl	%ebx, %r10d
    000006cf: 	je	.Ltmp3749 # Offset: 1743
.Ltmp3761:
    000006d1: 	leal	(%rcx,%rax), %r15d
    000006d5: 	movslq	%r15d, %r15
    000006d8: 	addl	(%rbp,%r15,4), %edx
    000006dd: 	leal	0x1(%rax), %r15d
    000006e1: 	cmpl	%edi, %r15d
    000006e4: 	jge	.Ltmp3749 # Offset: 1764
    000006e6: 	addl	%ecx, %r15d
    000006e9: 	addl	$0x2, %eax
    000006ec: 	movslq	%r15d, %r15
    000006ef: 	addl	(%rbp,%r15,4), %edx
    000006f4: 	cmpl	%eax, %edi
    000006f6: 	jle	.Ltmp3749 # Offset: 1782
    000006f8: 	addl	%ecx, %eax
    000006fa: 	cltq
    000006fc: 	addl	(%rbp,%rax,4), %edx
.Ltmp3749:
    00000700: 	addl	$0x1, %esi
    00000703: 	addl	%r13d, %ecx
    00000706: 	cmpl	%r9d, %esi
    00000709: 	jne	.Ltmp3752 # Offset: 1801
.Ltmp3748:
    0000070f: 	cvttsd2si	init_value(%rip), %ecx
    00000717: 	movl	0xc8(%rsp), %eax
    0000071e: 	imull	0xcc(%rsp), %eax
    00000726: 	subl	%r14d, %eax
    00000729: 	imull	%ecx, %eax
    0000072c: 	cmpl	%edx, %eax
    0000072e: 	je	.Ltmp3753 # Offset: 1838
    00000730: 	movq	0xd0(%rsp), %rax
    00000738: 	leaq	DATAat0x381c8(%rip), %rsi
    0000073f: 	movl	$0x1, %edi
    00000744: 	movq	(%rax), %rdx
    00000747: 	xorl	%eax, %eax
    00000749: 	callq	__printf_chk@PLT # Offset: 1865
.Ltmp3753:
    0000074e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000755: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000075c: 	subq	$0x20, %rax
    00000760: 	cmpq	%rax, %rbx
    00000763: 	je	.Ltmp3754 # Offset: 1891
    00000769: 	movq	0xd0(%rsp), %rax
    00000771: 	leaq	0x10(%rbx), %rdi
    00000775: 	movq	%rdi, (%rbx)
    00000778: 	movq	(%rax), %rbp
    0000077b: 	movq	0x8(%rax), %r12
    0000077f: 	movq	%rbp, %rax
    00000782: 	addq	%r12, %rax
    00000785: 	je	.Ltmp3755 # Offset: 1925
    00000787: 	testq	%rbp, %rbp
    0000078a: 	je	.Ltmp3756 # Offset: 1930
.Ltmp3755:
    00000790: 	movq	%r12, 0xe0(%rsp)
    00000798: 	cmpq	$0xf, %r12
    0000079c: 	ja	.Ltmp3757 # Offset: 1948
    000007a2: 	cmpq	$0x1, %r12
    000007a6: 	jne	.Ltmp3758 # Offset: 1958
    000007ac: 	movzbl	(%rbp), %eax
    000007b0: 	movb	%al, 0x10(%rbx)
.Ltmp3762:
    000007b3: 	movq	%r12, 0x8(%rbx)
    000007b7: 	movb	$0x0, (%rdi,%r12)
    000007bc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000007c3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000007ca: 	addq	$0x20, %rax
    000007ce: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000007d5: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000007dc: 	je	.Ltmp3759 # Offset: 2012
.Ltmp3763:
    000007e2: 	movq	-0x20(%rax), %rbp
    000007e6: 	callq	clock@PLT # Offset: 2022
    000007eb: 	movq	%rax, end_time(%rip)
    000007f2: 	movq	0xe8(%rsp), %rdx
    000007fa: 	subq	%fs:0x28, %rdx
    00000803: 	jne	.Ltmp3760 # Offset: 2051
    00000809: 	subq	start_time(%rip), %rax
    00000810: 	pxor	%xmm0, %xmm0
    00000814: 	movq	%rbp, %rdi
    00000817: 	cvtsi2sd	%rax, %xmm0
    0000081c: 	divsd	DATAat0x38a48(%rip), %xmm0
    00000824: 	addq	$0xf8, %rsp
    0000082b: 	popq	%rbx
    0000082c: 	popq	%rbp
    0000082d: 	popq	%r12
    0000082f: 	popq	%r13
    00000831: 	popq	%r14
    00000833: 	popq	%r15
    00000835: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 2101
.Ltmp3750:
    0000083a: 	movl	$0x1, %eax
    0000083f: 	jmp	.Ltmp3761 # Offset: 2111
.Ltmp3757:
    00000844: 	movq	%rbx, %rdi
    00000847: 	leaq	0xe0(%rsp), %rsi
    0000084f: 	xorl	%edx, %edx
    00000851: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2129
    00000856: 	movq	%rax, (%rbx)
    00000859: 	movq	%rax, %rdi
    0000085c: 	movq	0xe0(%rsp), %rax
    00000864: 	movq	%rax, 0x10(%rbx)
.Ltmp3764:
    00000868: 	movq	%r12, %rdx
    0000086b: 	movq	%rbp, %rsi
    0000086e: 	callq	memcpy@PLT # Offset: 2158
    00000873: 	movq	0xe0(%rsp), %r12
    0000087b: 	movq	(%rbx), %rdi
    0000087e: 	jmp	.Ltmp3762 # Offset: 2174
.Ltmp3754:
    00000883: 	movq	0xd0(%rsp), %rsi
    0000088b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000892: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 2194
    00000897: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000089e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000008a5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000008ac: 	jne	.Ltmp3763 # Offset: 2220
.Ltmp3759:
    000008b2: 	movq	-0x8(%rdx), %rax
    000008b6: 	addq	$0x200, %rax
    000008bc: 	jmp	.Ltmp3763 # Offset: 2236
.Ltmp3758:
    000008c1: 	testq	%r12, %r12
    000008c4: 	je	.Ltmp3762 # Offset: 2244
    000008ca: 	jmp	.Ltmp3764 # Offset: 2250
    000008cc: 	nopl	(%rax) # Size: 4
.Ltmp3738:
    000008d0: 	movl	0xc8(%rsp), %eax
    000008d7: 	subl	$0x2, %eax
    000008da: 	movl	%eax, 0xdc(%rsp)
    000008e1: 	jmp	.Ltmp3765 # Offset: 2273
.Ltmp3756:
    000008e6: 	leaq	DATAat0x38158(%rip), %rdi
    000008ed: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 2285
.Ltmp3760:
    000008f2: 	callq	__stack_chk_fail@PLT # Offset: 2290
DWARF CFI Instructions:
    <empty>
End of Function "_Z15convolution2D_4IilEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15TestOneTypeConvIilEvv" after disassembly {
  Number      : 287
  State       : disassembled
  Address     : 0x2e240
  Size        : 0x81d
  MaxSize     : 0x820
  Offset      : 0x2e240
  Section     : .text
  Orc Section : .local.text._Z15TestOneTypeConvIilEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0286:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x138000(%rsp), %r11
.Ltmp3766:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp3766 # Offset: 37
    00000027: 	subq	$0x878, %rsp
    0000002e: 	movq	%fs:0x28, %rax
    00000037: 	movq	%rax, 0x138868(%rsp)
    0000003f: 	xorl	%eax, %eax
    00000041: 	leaq	0x30(%rsp), %rax
    00000046: 	movl	$0x33746e69, 0x30(%rsp)
    0000004e: 	leaq	0x60(%rsp), %r14
    00000053: 	movq	%rax, (%rsp)
    00000057: 	leaq	0x9c460(%rsp), %r12
    0000005f: 	movq	%rax, 0x20(%rsp)
    00000064: 	movl	$0x5f32, %eax
    00000069: 	movw	%ax, 0x34(%rsp)
    0000006e: 	cvttsd2si	init_value(%rip), %eax
    00000076: 	movb	$0x74, 0x36(%rsp)
    0000007b: 	movq	$0x7, 0x28(%rsp)
    00000084: 	movb	$0x0, 0x37(%rsp)
    00000089: 	movd	%eax, %xmm0
    0000008d: 	movq	%r14, %rax
    00000090: 	pshufd	$0x0, %xmm0, %xmm0
    00000095: 	nopl	(%rax) # Size: 3
.Ltmp3767:
    00000098: 	movaps	%xmm0, (%rax)
    0000009b: 	addq	$0x10, %rax
    0000009f: 	cmpq	%r12, %rax
    000000a2: 	jne	.Ltmp3767 # Offset: 162
    000000a4: 	leaq	0x40(%rsp), %rbp
    000000a9: 	movslq	iterations(%rip), %rax
    000000b0: 	leaq	0x50(%rsp), %rbx
    000000b5: 	movq	$0x7, 0x48(%rsp)
    000000be: 	leaq	DATAat0x387ae(%rip), %rsi
    000000c5: 	movq	%rbp, %rdi
    000000c8: 	movq	%rbx, 0x40(%rsp)
    000000cd: 	movq	%rax, %r15
    000000d0: 	imulq	$0x5d9f7391, %rax, %rax
    000000d7: 	movb	$0x0, 0x57(%rsp)
    000000dc: 	movl	%r15d, %edx
    000000df: 	sarl	$0x1f, %edx
    000000e2: 	sarq	$0x27, %rax
    000000e6: 	subl	%edx, %eax
    000000e8: 	movl	$0x12, %edx
    000000ed: 	movl	%eax, iterations(%rip)
    000000f3: 	movl	0x30(%rsp), %eax
    000000f7: 	movl	%eax, 0x50(%rsp)
    000000fb: 	movzwl	0x34(%rsp), %eax
    00000100: 	movw	%ax, 0x54(%rsp)
    00000105: 	movzbl	0x36(%rsp), %eax
    0000010a: 	movb	%al, 0x56(%rsp)
    0000010e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 270
    00000113: 	movq	%rbp, %r9
    00000116: 	movl	$0x190, %r8d
    0000011c: 	movq	%r12, %rsi
    0000011f: 	movq	%r14, %rdi
    00000122: 	movl	$0x190, %ecx
    00000127: 	movl	$0x190, %edx
    0000012c: 	callq	_Z15convolution2D_1IilEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 300
    00000131: 	movq	0x40(%rsp), %rdi
    00000136: 	cmpq	%rbx, %rdi
    00000139: 	je	.Ltmp3768 # Offset: 313
    0000013b: 	movq	0x50(%rsp), %rax
    00000140: 	leaq	0x1(%rax), %rsi
    00000144: 	callq	_ZdlPvm@PLT # Offset: 324
.Ltmp3768:
    00000149: 	movq	0x20(%rsp), %rax
    0000014e: 	movq	0x28(%rsp), %r13
    00000153: 	movq	%rbx, 0x40(%rsp)
    00000158: 	movq	%rax, %rcx
    0000015b: 	movq	%rax, 0x8(%rsp)
    00000160: 	addq	%r13, %rcx
    00000163: 	je	.Ltmp3769 # Offset: 355
    00000165: 	testq	%rax, %rax
    00000168: 	je	.Ltmp3770 # Offset: 360
.Ltmp3769:
    0000016e: 	movq	%r13, 0x18(%rsp)
    00000173: 	cmpq	$0xf, %r13
    00000177: 	ja	.Ltmp3771 # Offset: 375
    0000017d: 	cmpq	$0x1, %r13
    00000181: 	jne	.Ltmp3772 # Offset: 385
    00000187: 	movq	0x8(%rsp), %rax
    0000018c: 	movzbl	(%rax), %eax
    0000018f: 	movb	%al, 0x50(%rsp)
    00000193: 	movq	%rbx, %rax
.Ltmp3802:
    00000196: 	movq	%r13, 0x48(%rsp)
    0000019b: 	movb	$0x0, (%rax,%r13)
    000001a0: 	movabsq	$0x3fffffffffffffff, %rax
    000001aa: 	subq	0x48(%rsp), %rax
    000001af: 	cmpq	$0x11, %rax
    000001b3: 	jbe	.Ltmp3773 # Offset: 435
    000001b9: 	movl	$0x12, %edx
    000001be: 	leaq	DATAat0x387c1(%rip), %rsi
    000001c5: 	movq	%rbp, %rdi
    000001c8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 456
    000001cd: 	movq	%rbp, %r9
    000001d0: 	movl	$0x190, %r8d
    000001d6: 	movq	%r12, %rsi
    000001d9: 	movq	%r14, %rdi
    000001dc: 	movl	$0x190, %ecx
    000001e1: 	movl	$0x190, %edx
    000001e6: 	callq	_Z15convolution2D_2IilEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 486
    000001eb: 	movq	0x40(%rsp), %rdi
    000001f0: 	cmpq	%rbx, %rdi
    000001f3: 	je	.Ltmp3774 # Offset: 499
    000001f5: 	movq	0x50(%rsp), %rax
    000001fa: 	leaq	0x1(%rax), %rsi
    000001fe: 	callq	_ZdlPvm@PLT # Offset: 510
.Ltmp3774:
    00000203: 	movq	0x20(%rsp), %rax
    00000208: 	movq	0x28(%rsp), %r13
    0000020d: 	movq	%rbx, 0x40(%rsp)
    00000212: 	movq	%rax, %rcx
    00000215: 	movq	%rax, 0x8(%rsp)
    0000021a: 	addq	%r13, %rcx
    0000021d: 	je	.Ltmp3775 # Offset: 541
    0000021f: 	testq	%rax, %rax
    00000222: 	je	.Ltmp3776 # Offset: 546
.Ltmp3775:
    00000228: 	movq	%r13, 0x18(%rsp)
    0000022d: 	cmpq	$0xf, %r13
    00000231: 	ja	.Ltmp3777 # Offset: 561
    00000237: 	cmpq	$0x1, %r13
    0000023b: 	jne	.Ltmp3778 # Offset: 571
    00000241: 	movq	0x8(%rsp), %rax
    00000246: 	movzbl	(%rax), %eax
    00000249: 	movb	%al, 0x50(%rsp)
    0000024d: 	movq	%rbx, %rax
.Ltmp3806:
    00000250: 	movq	%r13, 0x48(%rsp)
    00000255: 	movb	$0x0, (%rax,%r13)
    0000025a: 	movabsq	$0x3fffffffffffffff, %rax
    00000264: 	subq	0x48(%rsp), %rax
    00000269: 	cmpq	$0x11, %rax
    0000026d: 	jbe	.Ltmp3779 # Offset: 621
    00000273: 	movl	$0x12, %edx
    00000278: 	leaq	DATAat0x387d4(%rip), %rsi
    0000027f: 	movq	%rbp, %rdi
    00000282: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 642
    00000287: 	movq	%rbp, %r9
    0000028a: 	movl	$0x190, %r8d
    00000290: 	movq	%r12, %rsi
    00000293: 	movq	%r14, %rdi
    00000296: 	movl	$0x190, %ecx
    0000029b: 	movl	$0x190, %edx
    000002a0: 	callq	_Z15convolution2D_3IilEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 672
    000002a5: 	movq	0x40(%rsp), %rdi
    000002aa: 	cmpq	%rbx, %rdi
    000002ad: 	je	.Ltmp3780 # Offset: 685
    000002af: 	movq	0x50(%rsp), %rax
    000002b4: 	leaq	0x1(%rax), %rsi
    000002b8: 	callq	_ZdlPvm@PLT # Offset: 696
.Ltmp3780:
    000002bd: 	movq	0x20(%rsp), %rax
    000002c2: 	movq	0x28(%rsp), %r13
    000002c7: 	movq	%rbx, 0x40(%rsp)
    000002cc: 	movq	%rax, %rcx
    000002cf: 	movq	%rax, 0x8(%rsp)
    000002d4: 	addq	%r13, %rcx
    000002d7: 	je	.Ltmp3781 # Offset: 727
    000002d9: 	testq	%rax, %rax
    000002dc: 	je	.Ltmp3782 # Offset: 732
.Ltmp3781:
    000002e2: 	movq	%r13, 0x18(%rsp)
    000002e7: 	cmpq	$0xf, %r13
    000002eb: 	ja	.Ltmp3783 # Offset: 747
    000002f1: 	cmpq	$0x1, %r13
    000002f5: 	jne	.Ltmp3784 # Offset: 757
    000002fb: 	movq	0x8(%rsp), %rax
    00000300: 	movzbl	(%rax), %eax
    00000303: 	movb	%al, 0x50(%rsp)
    00000307: 	movq	%rbx, %rax
.Ltmp3804:
    0000030a: 	movq	%r13, 0x48(%rsp)
    0000030f: 	movb	$0x0, (%rax,%r13)
    00000314: 	movabsq	$0x3fffffffffffffff, %rax
    0000031e: 	subq	0x48(%rsp), %rax
    00000323: 	cmpq	$0x11, %rax
    00000327: 	jbe	.Ltmp3785 # Offset: 807
    0000032d: 	movl	$0x12, %edx
    00000332: 	leaq	DATAat0x387e7(%rip), %rsi
    00000339: 	movq	%rbp, %rdi
    0000033c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 828
    00000341: 	movq	%rbp, %r9
    00000344: 	movl	$0x190, %r8d
    0000034a: 	movq	%r12, %rsi
    0000034d: 	movq	%r14, %rdi
    00000350: 	movl	$0x190, %ecx
    00000355: 	movl	$0x190, %edx
    0000035a: 	callq	_Z15convolution2D_4IilEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 858
    0000035f: 	movq	0x40(%rsp), %rdi
    00000364: 	cmpq	%rbx, %rdi
    00000367: 	je	.Ltmp3786 # Offset: 871
    00000369: 	movq	0x50(%rsp), %rax
    0000036e: 	leaq	0x1(%rax), %rsi
    00000372: 	callq	_ZdlPvm@PLT # Offset: 882
.Ltmp3786:
    00000377: 	movq	0x20(%rsp), %rax
    0000037c: 	movq	0x28(%rsp), %r13
    00000381: 	movq	%rbx, 0x40(%rsp)
    00000386: 	movq	%rax, %rcx
    00000389: 	movq	%rax, 0x8(%rsp)
    0000038e: 	addq	%r13, %rcx
    00000391: 	je	.Ltmp3787 # Offset: 913
    00000393: 	testq	%rax, %rax
    00000396: 	je	.Ltmp3788 # Offset: 918
.Ltmp3787:
    0000039c: 	movq	%r13, 0x18(%rsp)
    000003a1: 	cmpq	$0xf, %r13
    000003a5: 	ja	.Ltmp3789 # Offset: 933
    000003ab: 	cmpq	$0x1, %r13
    000003af: 	jne	.Ltmp3790 # Offset: 943
    000003b5: 	movq	0x8(%rsp), %rax
    000003ba: 	movzbl	(%rax), %eax
    000003bd: 	movb	%al, 0x50(%rsp)
    000003c1: 	movq	%rbx, %rax
.Ltmp3810:
    000003c4: 	movq	%r13, 0x48(%rsp)
    000003c9: 	movb	$0x0, (%rax,%r13)
    000003ce: 	movabsq	$0x3fffffffffffffff, %rax
    000003d8: 	subq	0x48(%rsp), %rax
    000003dd: 	cmpq	$0x11, %rax
    000003e1: 	jbe	.Ltmp3791 # Offset: 993
    000003e7: 	movl	$0x12, %edx
    000003ec: 	leaq	DATAat0x387fa(%rip), %rsi
    000003f3: 	movq	%rbp, %rdi
    000003f6: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1014
    000003fb: 	movq	%rbp, %r9
    000003fe: 	movl	$0x190, %r8d
    00000404: 	movq	%r12, %rsi
    00000407: 	movq	%r14, %rdi
    0000040a: 	movl	$0x190, %ecx
    0000040f: 	movl	$0x190, %edx
    00000414: 	callq	_Z15convolution2D_5IilEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1044
    00000419: 	movq	0x40(%rsp), %rdi
    0000041e: 	cmpq	%rbx, %rdi
    00000421: 	je	.Ltmp3792 # Offset: 1057
    00000423: 	movq	0x50(%rsp), %rax
    00000428: 	leaq	0x1(%rax), %rsi
    0000042c: 	callq	_ZdlPvm@PLT # Offset: 1068
.Ltmp3792:
    00000431: 	movq	0x20(%rsp), %r13
    00000436: 	movq	0x28(%rsp), %r12
    0000043b: 	movq	%rbx, 0x40(%rsp)
    00000440: 	movq	%r13, %rax
    00000443: 	addq	%r12, %rax
    00000446: 	je	.Ltmp3793 # Offset: 1094
    00000448: 	testq	%r13, %r13
    0000044b: 	je	.Ltmp3794 # Offset: 1099
.Ltmp3793:
    00000451: 	movq	%r12, 0x18(%rsp)
    00000456: 	cmpq	$0xf, %r12
    0000045a: 	ja	.Ltmp3795 # Offset: 1114
    00000460: 	cmpq	$0x1, %r12
    00000464: 	jne	.Ltmp3796 # Offset: 1124
    0000046a: 	movzbl	(%r13), %eax
    0000046f: 	movb	%al, 0x50(%rsp)
    00000473: 	movq	%rbx, %rax
.Ltmp3808:
    00000476: 	movq	%r12, 0x48(%rsp)
    0000047b: 	movb	$0x0, (%rax,%r12)
    00000480: 	movabsq	$0x3fffffffffffffff, %rax
    0000048a: 	subq	0x48(%rsp), %rax
    0000048f: 	cmpq	$0x1f, %rax
    00000493: 	jbe	.Ltmp3797 # Offset: 1171
    00000499: 	movl	$0x20, %edx
    0000049e: 	leaq	DATAat0x38810(%rip), %rsi
    000004a5: 	movq	%rbp, %rdi
    000004a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1192
    000004ad: 	movl	iterations(%rip), %edx
    000004b3: 	movq	0x40(%rsp), %rdi
    000004b8: 	xorl	%r8d, %r8d
    000004bb: 	xorl	%ecx, %ecx
    000004bd: 	movl	$0x1f40, %esi
    000004c2: 	callq	_Z9summarizePKciiii # Offset: 1218
    000004c7: 	movq	0x40(%rsp), %rdi
    000004cc: 	movl	%r15d, iterations(%rip)
    000004d3: 	cmpq	%rbx, %rdi
    000004d6: 	je	.Ltmp3798 # Offset: 1238
    000004d8: 	movq	0x50(%rsp), %rax
    000004dd: 	leaq	0x1(%rax), %rsi
    000004e1: 	callq	_ZdlPvm@PLT # Offset: 1249
.Ltmp3798:
    000004e6: 	movq	0x20(%rsp), %rdi
    000004eb: 	cmpq	(%rsp), %rdi
    000004ef: 	je	.Ltmp3799 # Offset: 1263
    000004f1: 	movq	0x30(%rsp), %rax
    000004f6: 	leaq	0x1(%rax), %rsi
    000004fa: 	callq	_ZdlPvm@PLT # Offset: 1274
.Ltmp3799:
    000004ff: 	movq	0x138868(%rsp), %rax
    00000507: 	subq	%fs:0x28, %rax
    00000510: 	jne	.Ltmp3800 # Offset: 1296
    00000516: 	addq	$0x138878, %rsp
    0000051d: 	popq	%rbx
    0000051e: 	popq	%rbp
    0000051f: 	popq	%r12
    00000521: 	popq	%r13
    00000523: 	popq	%r14
    00000525: 	popq	%r15
    00000527: 	retq # Offset: 1319
    00000528: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3772:
    00000530: 	testq	%r13, %r13
    00000533: 	jne	.Ltmp3801 # Offset: 1331
    00000539: 	movq	%rbx, %rax
    0000053c: 	jmp	.Ltmp3802 # Offset: 1340
    00000541: 	nopl	(%rax) # Size: 7
.Ltmp3784:
    00000548: 	testq	%r13, %r13
    0000054b: 	jne	.Ltmp3803 # Offset: 1355
    00000551: 	movq	%rbx, %rax
    00000554: 	jmp	.Ltmp3804 # Offset: 1364
    00000559: 	nopl	(%rax) # Size: 7
.Ltmp3778:
    00000560: 	testq	%r13, %r13
    00000563: 	jne	.Ltmp3805 # Offset: 1379
    00000569: 	movq	%rbx, %rax
    0000056c: 	jmp	.Ltmp3806 # Offset: 1388
    00000571: 	nopl	(%rax) # Size: 7
.Ltmp3796:
    00000578: 	testq	%r12, %r12
    0000057b: 	jne	.Ltmp3807 # Offset: 1403
    00000581: 	movq	%rbx, %rax
    00000584: 	jmp	.Ltmp3808 # Offset: 1412
    00000589: 	nopl	(%rax) # Size: 7
.Ltmp3790:
    00000590: 	testq	%r13, %r13
    00000593: 	jne	.Ltmp3809 # Offset: 1427
    00000599: 	movq	%rbx, %rax
    0000059c: 	jmp	.Ltmp3810 # Offset: 1436
    000005a1: 	nopl	(%rax) # Size: 7
.Ltmp3777:
    000005a8: 	leaq	0x18(%rsp), %rsi
    000005ad: 	xorl	%edx, %edx
    000005af: 	movq	%rbp, %rdi
    000005b2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1458
    000005b7: 	movq	%rax, 0x40(%rsp)
    000005bc: 	movq	%rax, %rdi
    000005bf: 	movq	0x18(%rsp), %rax
    000005c4: 	movq	%rax, 0x50(%rsp)
.Ltmp3813:
    000005c9: 	movq	0x8(%rsp), %rsi
    000005ce: 	movq	%r13, %rdx
    000005d1: 	callq	memcpy@PLT # Offset: 1489
    000005d6: 	movq	0x18(%rsp), %r13
    000005db: 	movq	0x40(%rsp), %rax
    000005e0: 	jmp	.Ltmp3806 # Offset: 1504
    000005e5: 	nopl	(%rax) # Size: 3
.Ltmp3771:
    000005e8: 	leaq	0x18(%rsp), %rsi
    000005ed: 	xorl	%edx, %edx
    000005ef: 	movq	%rbp, %rdi
    000005f2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1522
    000005f7: 	movq	%rax, 0x40(%rsp)
    000005fc: 	movq	%rax, %rdi
    000005ff: 	movq	0x18(%rsp), %rax
    00000604: 	movq	%rax, 0x50(%rsp)
.Ltmp3811:
    00000609: 	movq	0x8(%rsp), %rsi
    0000060e: 	movq	%r13, %rdx
    00000611: 	callq	memcpy@PLT # Offset: 1553
    00000616: 	movq	0x18(%rsp), %r13
    0000061b: 	movq	0x40(%rsp), %rax
    00000620: 	jmp	.Ltmp3802 # Offset: 1568
    00000625: 	nopl	(%rax) # Size: 3
.Ltmp3789:
    00000628: 	leaq	0x18(%rsp), %rsi
    0000062d: 	xorl	%edx, %edx
    0000062f: 	movq	%rbp, %rdi
    00000632: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1586
    00000637: 	movq	%rax, 0x40(%rsp)
    0000063c: 	movq	%rax, %rdi
    0000063f: 	movq	0x18(%rsp), %rax
    00000644: 	movq	%rax, 0x50(%rsp)
.Ltmp3815:
    00000649: 	movq	0x8(%rsp), %rsi
    0000064e: 	movq	%r13, %rdx
    00000651: 	callq	memcpy@PLT # Offset: 1617
    00000656: 	movq	0x18(%rsp), %r13
    0000065b: 	movq	0x40(%rsp), %rax
    00000660: 	jmp	.Ltmp3810 # Offset: 1632
    00000665: 	nopl	(%rax) # Size: 3
.Ltmp3795:
    00000668: 	leaq	0x18(%rsp), %rsi
    0000066d: 	xorl	%edx, %edx
    0000066f: 	movq	%rbp, %rdi
    00000672: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1650
    00000677: 	movq	%rax, 0x40(%rsp)
    0000067c: 	movq	%rax, %rdi
    0000067f: 	movq	0x18(%rsp), %rax
    00000684: 	movq	%rax, 0x50(%rsp)
.Ltmp3814:
    00000689: 	movq	%r12, %rdx
    0000068c: 	movq	%r13, %rsi
    0000068f: 	callq	memcpy@PLT # Offset: 1679
    00000694: 	movq	0x18(%rsp), %r12
    00000699: 	movq	0x40(%rsp), %rax
    0000069e: 	jmp	.Ltmp3808 # Offset: 1694
    000006a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3783:
    000006a8: 	leaq	0x18(%rsp), %rsi
    000006ad: 	xorl	%edx, %edx
    000006af: 	movq	%rbp, %rdi
    000006b2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1714
    000006b7: 	movq	%rax, 0x40(%rsp)
    000006bc: 	movq	%rax, %rdi
    000006bf: 	movq	0x18(%rsp), %rax
    000006c4: 	movq	%rax, 0x50(%rsp)
.Ltmp3812:
    000006c9: 	movq	0x8(%rsp), %rsi
    000006ce: 	movq	%r13, %rdx
    000006d1: 	callq	memcpy@PLT # Offset: 1745
    000006d6: 	movq	0x18(%rsp), %r13
    000006db: 	movq	0x40(%rsp), %rax
    000006e0: 	jmp	.Ltmp3804 # Offset: 1760
.Ltmp3770:
    000006e5: 	leaq	DATAat0x38158(%rip), %rdi
    000006ec: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1772
.Ltmp3773:
    000006f1: 	leaq	DATAat0x38182(%rip), %rdi
    000006f8: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 1784
.Ltmp3776:
    000006fd: 	leaq	DATAat0x38158(%rip), %rdi
    00000704: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1796
.Ltmp3779:
    00000709: 	leaq	DATAat0x38182(%rip), %rdi
    00000710: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 1808
.Ltmp3782:
    00000715: 	leaq	DATAat0x38158(%rip), %rdi
    0000071c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1820
.Ltmp3785:
    00000721: 	leaq	DATAat0x38182(%rip), %rdi
    00000728: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 1832
.Ltmp3788:
    0000072d: 	leaq	DATAat0x38158(%rip), %rdi
    00000734: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1844
.Ltmp3791:
    00000739: 	leaq	DATAat0x38182(%rip), %rdi
    00000740: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 1856
.Ltmp3794:
    00000745: 	leaq	DATAat0x38158(%rip), %rdi
    0000074c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1868
.Ltmp3797:
    00000751: 	leaq	DATAat0x38182(%rip), %rdi
    00000758: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 1880
.Ltmp3800:
    0000075d: 	callq	__stack_chk_fail@PLT # Offset: 1885
.Ltmp3801:
    00000762: 	movq	%rbx, %rdi
    00000765: 	jmp	.Ltmp3811 # Offset: 1893
.Ltmp3803:
    0000076a: 	movq	%rbx, %rdi
    0000076d: 	jmp	.Ltmp3812 # Offset: 1901
.Ltmp3805:
    00000772: 	movq	%rbx, %rdi
    00000775: 	jmp	.Ltmp3813 # Offset: 1909
.Ltmp3807:
    0000077a: 	movq	%rbx, %rdi
    0000077d: 	jmp	.Ltmp3814 # Offset: 1917
.Ltmp3809:
    00000782: 	movq	%rbx, %rdi
    00000785: 	jmp	.Ltmp3815 # Offset: 1925
    0000078a: 	endbr64
.Ltmp3817:
    0000078e: 	movq	%rax, %rbp
    00000791: 	jmp	.Ltmp3816 # Offset: 1937
    00000793: 	endbr64
    00000797: 	jmp	.Ltmp3817 # Offset: 1943
    00000799: 	endbr64
    0000079d: 	jmp	.Ltmp3817 # Offset: 1949
    0000079f: 	endbr64
    000007a3: 	jmp	.Ltmp3817 # Offset: 1955
    000007a5: 	endbr64
    000007a9: 	movq	%rax, %rbp
    000007ac: 	jmp	.Ltmp3818 # Offset: 1964
.Ltmp3816:
    000007ae: 	movq	0x40(%rsp), %rdi
    000007b3: 	cmpq	%rbx, %rdi
    000007b6: 	je	.Ltmp3818 # Offset: 1974
    000007b8: 	movq	0x50(%rsp), %rax
    000007bd: 	leaq	0x1(%rax), %rsi
    000007c1: 	callq	_ZdlPvm@PLT # Offset: 1985
.Ltmp3818:
    000007c6: 	movq	0x20(%rsp), %rdi
    000007cb: 	cmpq	(%rsp), %rdi
    000007cf: 	je	.Ltmp3819 # Offset: 1999
    000007d1: 	movq	0x30(%rsp), %rax
    000007d6: 	leaq	0x1(%rax), %rsi
    000007da: 	callq	_ZdlPvm@PLT # Offset: 2010
.Ltmp3819:
    000007df: 	movq	%rbp, %rdi
    000007e2: 	callq	_Unwind_Resume@PLT # Offset: 2018
    000007e7: 	endbr64
    000007eb: 	jmp	.Ltmp3817 # Offset: 2027
    000007ed: 	endbr64
    000007f1: 	jmp	.Ltmp3817 # Offset: 2033
    000007f3: 	endbr64
    000007f7: 	jmp	.Ltmp3817 # Offset: 2039
    000007f9: 	endbr64
    000007fd: 	jmp	.Ltmp3817 # Offset: 2045
    000007ff: 	endbr64
    00000803: 	jmp	.Ltmp3817 # Offset: 2051
    00000805: 	endbr64
    00000809: 	jmp	.Ltmp3817 # Offset: 2057
    0000080b: 	endbr64
    0000080f: 	jmp	.Ltmp3817 # Offset: 2063
    00000814: 	endbr64
    00000818: 	jmp	.Ltmp3817 # Offset: 2072
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestOneTypeConvIilEvv"

Binary Function "_Z15convolution2D_4IsiEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 288
  State       : disassembled
  Address     : 0x2ea60
  Size        : 0x185f
  MaxSize     : 0x1860
  Offset      : 0x2ea60
  Section     : .text
  Orc Section : .local.text._Z15convolution2D_4IsiEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0287:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x298, %rsp
    00000018: 	movq	%rsi, 0x80(%rsp)
    00000020: 	movl	%edx, 0x230(%rsp)
    00000027: 	movl	%ecx, 0x128(%rsp)
    0000002e: 	movl	%r8d, 0x278(%rsp)
    00000036: 	movq	%r9, 0x268(%rsp)
    0000003e: 	movq	%fs:0x28, %rax
    00000047: 	movq	%rax, 0x288(%rsp)
    0000004f: 	xorl	%eax, %eax
    00000051: 	callq	clock@PLT # Offset: 81
    00000056: 	movq	%rax, start_time(%rip)
    0000005d: 	movl	iterations(%rip), %eax
    00000063: 	movl	%eax, 0x12c(%rsp)
    0000006a: 	testl	%eax, %eax
    0000006c: 	jle	.Ltmp3820 # Offset: 108
    00000072: 	movslq	0x278(%rsp), %rdi
    0000007a: 	movl	0x128(%rsp), %r9d
    00000082: 	movq	0x80(%rsp), %rbp
    0000008a: 	leaq	(%rdi,%rdi), %r12
    0000008e: 	leal	-0x1(%r9), %r13d
    00000092: 	leaq	(%r14,%r12), %rax
    00000096: 	leal	-0x2(%r9), %r15d
    0000009a: 	movq	%r12, 0x50(%rsp)
    0000009f: 	movslq	%r15d, %rsi
    000000a2: 	movq	%rax, 0x90(%rsp)
    000000aa: 	leaq	0x2(%r14,%r12), %rax
    000000af: 	leaq	(,%rdi,4), %rbx
    000000b7: 	movq	%rax, 0xb0(%rsp)
    000000bf: 	movslq	%r13d, %rax
    000000c2: 	leaq	(%rax,%rax), %rdx
    000000c6: 	movl	%edi, %eax
    000000c8: 	movq	%rsi, 0x58(%rsp)
    000000cd: 	leaq	(%r14,%rsi,2), %rsi
    000000d1: 	addl	%r15d, %eax
    000000d4: 	movq	%rsi, 0xc8(%rsp)
    000000dc: 	leaq	(%r14,%rdx), %rsi
    000000e0: 	addq	%rbp, %rdx
    000000e3: 	cltq
    000000e5: 	movq	%rsi, 0xd0(%rsp)
    000000ed: 	leaq	(%r14,%rax,2), %rsi
    000000f1: 	leal	(%r13,%rdi), %eax
    000000f6: 	movl	%r15d, 0x6c(%rsp)
    000000fb: 	cltq
    000000fd: 	movq	%rsi, 0xd8(%rsp)
    00000105: 	leaq	(%r14,%rax,2), %rsi
    00000109: 	movq	%rdx, 0xe8(%rsp)
    00000111: 	movq	%rsi, 0xe0(%rsp)
    00000119: 	movl	0x230(%rsp), %esi
    00000120: 	leal	-0x2(%rsi), %edx
    00000123: 	leal	-0x1(%rsi), %ecx
    00000126: 	movl	%edx, 0x27c(%rsp)
    0000012d: 	imull	%edi, %edx
    00000130: 	movl	%ecx, 0x68(%rsp)
    00000134: 	movslq	%edx, %r8
    00000137: 	leal	0x1(%rdx), %eax
    0000013a: 	leaq	(%r8,%r8), %rsi
    0000013e: 	cltq
    00000140: 	leaq	(%r14,%rsi), %rcx
    00000144: 	movq	%rcx, 0x98(%rsp)
    0000014c: 	leaq	(%r14,%rax,2), %rcx
    00000150: 	movq	%rcx, 0xf0(%rsp)
    00000158: 	leal	(%rdx,%rdi), %ecx
    0000015b: 	movslq	%ecx, %rax
    0000015e: 	leaq	(%rax,%rax), %r10
    00000162: 	leal	0x1(%rcx), %eax
    00000165: 	leaq	(%r14,%r10), %r11
    00000169: 	cltq
    0000016b: 	movq	%r10, 0x228(%rsp)
    00000173: 	movq	%r11, 0xa0(%rsp)
    0000017b: 	leaq	(%r14,%rax,2), %r11
    0000017f: 	leal	(%rdx,%r15), %eax
    00000183: 	movq	%r11, 0xf8(%rsp)
    0000018b: 	cltq
    0000018d: 	movq	%rbp, %r11
    00000190: 	addq	%r10, %rbp
    00000193: 	movq	%rbp, 0xb8(%rsp)
    0000019b: 	leaq	(%r14,%rax,2), %rbp
    0000019f: 	leal	-0x3(%r9), %r10d
    000001a3: 	leal	(%r13,%rdx), %eax
    000001a8: 	movq	%rbp, 0x100(%rsp)
    000001b0: 	movq	%r11, %rbp
    000001b3: 	cltq
    000001b5: 	subq	%r14, %rbp
    000001b8: 	leaq	(%r14,%rax,2), %rdx
    000001bc: 	leal	(%rcx,%r15), %eax
    000001c0: 	cltq
    000001c2: 	movq	%rdx, 0x108(%rsp)
    000001ca: 	leaq	(%r14,%rax,2), %rdx
    000001ce: 	leal	(%r13,%rcx), %eax
    000001d3: 	cltq
    000001d5: 	movq	%rdx, 0x110(%rsp)
    000001dd: 	addq	%rax, %rax
    000001e0: 	leaq	(%r14,%rax), %rcx
    000001e4: 	addq	%r11, %rax
    000001e7: 	cmpq	$0x10, %rbp
    000001eb: 	movq	%r11, %rbp
    000001ee: 	seta	%dl
    000001f1: 	cmpl	$0x6, %r10d
    000001f5: 	movq	%rcx, 0x118(%rsp)
    000001fd: 	movq	%rax, 0x120(%rsp)
    00000205: 	movl	%edx, %ecx
    00000207: 	seta	%al
    0000020a: 	andl	%eax, %ecx
    0000020c: 	leaq	0x2(%r11), %rax
    00000210: 	subq	0xb0(%rsp), %rax
    00000218: 	movl	%r15d, %r11d
    0000021b: 	cmpq	$0x10, %rax
    0000021f: 	movb	%cl, 0x149(%rsp)
    00000226: 	seta	%al
    00000229: 	shrl	$0x3, %r15d
    0000022d: 	andl	$-0x8, %r11d
    00000231: 	andl	%ecx, %eax
    00000233: 	leal	0x1(%r11), %ecx
    00000237: 	movl	%r11d, 0x88(%rsp)
    0000023f: 	movb	%al, 0x14b(%rsp)
    00000246: 	leaq	0x4(%r14,%r12), %rax
    0000024b: 	movq	%rax, 0x178(%rsp)
    00000253: 	movl	%r15d, %eax
    00000256: 	subl	$0x1, %eax
    00000259: 	addq	$0x1, %rax
    0000025d: 	shlq	$0x4, %rax
    00000261: 	movq	%rax, %r15
    00000264: 	movslq	%r11d, %rax
    00000267: 	leaq	(%r14,%rax,2), %rax
    0000026b: 	movq	%rax, 0x188(%rsp)
    00000273: 	movslq	%ecx, %rax
    00000276: 	leaq	(%rax,%rax), %rdx
    0000027a: 	movq	%rax, 0x78(%rsp)
    0000027f: 	leaq	(%r14,%rdx), %rax
    00000283: 	addq	%rbp, %rdx
    00000286: 	movq	%rax, 0x190(%rsp)
    0000028e: 	leal	0x2(%r11), %eax
    00000292: 	movl	%eax, 0x14c(%rsp)
    00000299: 	cltq
    0000029b: 	leaq	(%rax,%rax), %r9
    0000029f: 	movq	%rdx, 0x180(%rsp)
    000002a7: 	leaq	(%r14,%r9), %rax
    000002ab: 	addq	%rbp, %r9
    000002ae: 	movq	%rax, 0x198(%rsp)
    000002b6: 	movl	%edi, %eax
    000002b8: 	addl	%r11d, %eax
    000002bb: 	movq	%r9, 0x1c8(%rsp)
    000002c3: 	leal	0x4(%r11), %r9d
    000002c7: 	cltq
    000002c9: 	movl	%r9d, 0x208(%rsp)
    000002d1: 	leaq	(%r14,%rax,2), %rax
    000002d5: 	movq	%rax, 0x1a0(%rsp)
    000002dd: 	leal	(%rdi,%rcx), %eax
    000002e0: 	cltq
    000002e2: 	leaq	(%r14,%rax,2), %rcx
    000002e6: 	movl	0x14c(%rsp), %eax
    000002ed: 	movq	%rcx, 0x1a8(%rsp)
    000002f5: 	addl	%edi, %eax
    000002f7: 	cltq
    000002f9: 	leaq	(%r14,%rax,2), %rax
    000002fd: 	movq	%rax, 0x1b0(%rsp)
    00000305: 	leal	0x3(%r11), %eax
    00000309: 	movl	%eax, %ecx
    0000030b: 	movl	%eax, 0x1d8(%rsp)
    00000312: 	cltq
    00000314: 	leaq	(%rax,%rax), %rdx
    00000318: 	leaq	(%r14,%rdx), %rax
    0000031c: 	addq	%rbp, %rdx
    0000031f: 	movq	%rax, 0x1b8(%rsp)
    00000327: 	movl	%edi, %eax
    00000329: 	addl	%ecx, %eax
    0000032b: 	movq	%rdx, 0x1f0(%rsp)
    00000333: 	cltq
    00000335: 	leaq	(%r14,%rax,2), %rax
    00000339: 	movq	%rax, 0x1c0(%rsp)
    00000341: 	movslq	%r9d, %rax
    00000344: 	leaq	(%rax,%rax), %rcx
    00000348: 	leaq	(%r14,%rcx), %rax
    0000034c: 	movq	%rax, 0x1e0(%rsp)
    00000354: 	movl	%edi, %eax
    00000356: 	addl	%r9d, %eax
    00000359: 	leal	0x5(%r11), %r9d
    0000035d: 	cltq
    0000035f: 	movl	%r9d, 0x1dc(%rsp)
    00000367: 	leaq	(%r14,%rax,2), %rax
    0000036b: 	movq	%rax, 0x1e8(%rsp)
    00000373: 	movslq	%r9d, %rax
    00000376: 	leaq	(%rax,%rax), %rdx
    0000037a: 	leaq	(%r14,%rdx), %rax
    0000037e: 	addq	%rbp, %rdx
    00000381: 	movq	%rax, 0x1d0(%rsp)
    00000389: 	movl	%edi, %eax
    0000038b: 	addl	%r9d, %eax
    0000038e: 	leal	0x6(%r11), %r9d
    00000392: 	movq	%rdx, 0x220(%rsp)
    0000039a: 	leal	0x7(%r11), %edx
    0000039e: 	cltq
    000003a0: 	movl	%r9d, 0x20c(%rsp)
    000003a8: 	leaq	(%r14,%rax,2), %rax
    000003ac: 	movl	%edx, 0x234(%rsp)
    000003b3: 	movq	%rax, 0x200(%rsp)
    000003bb: 	movq	%rcx, %rax
    000003be: 	addq	%rbp, %rax
    000003c1: 	movq	%rax, 0x1f8(%rsp)
    000003c9: 	movslq	%r9d, %rax
    000003cc: 	leaq	(%rax,%rax), %rcx
    000003d0: 	leaq	(%r14,%rcx), %rax
    000003d4: 	movq	%rax, 0x210(%rsp)
    000003dc: 	movl	%edi, %eax
    000003de: 	addl	%r9d, %eax
    000003e1: 	cltq
    000003e3: 	leaq	(%r14,%rax,2), %rax
    000003e7: 	movq	%rax, 0x218(%rsp)
    000003ef: 	movslq	%edx, %rax
    000003f2: 	leaq	(%rax,%rax), %r9
    000003f6: 	leaq	(%r14,%r9), %rax
    000003fa: 	addq	%rbp, %r9
    000003fd: 	movq	%rax, 0x250(%rsp)
    00000405: 	movl	%edi, %eax
    00000407: 	addl	%edx, %eax
    00000409: 	movq	%r9, 0x248(%rsp)
    00000411: 	cltq
    00000413: 	leaq	(%r14,%rax,2), %rax
    00000417: 	movq	%rax, 0x258(%rsp)
    0000041f: 	movq	%rcx, %rax
    00000422: 	addq	%rbp, %rax
    00000425: 	movq	%rax, 0x260(%rsp)
    0000042d: 	leal	0x8(%r11), %eax
    00000431: 	leaq	0x2(%r14,%rsi), %r11
    00000436: 	movslq	%eax, %rdx
    00000439: 	addl	%edi, %eax
    0000043b: 	cltq
    0000043d: 	leaq	(%r14,%rdx,2), %rdx
    00000441: 	leaq	(%r14,%rax,2), %rax
    00000445: 	movq	%rdx, 0x238(%rsp)
    0000044d: 	movq	%rax, 0x240(%rsp)
    00000455: 	leal	(%rdi,%rdi), %eax
    00000458: 	cltq
    0000045a: 	leaq	(%r14,%rax,2), %rax
    0000045e: 	movq	%rax, 0x130(%rsp)
    00000466: 	movq	0x228(%rsp), %rdi
    0000046e: 	movq	%rbp, %rax
    00000471: 	addq	%r12, %rbp
    00000474: 	movq	%rbx, 0x140(%rsp)
    0000047c: 	movl	%r10d, %ebx
    0000047f: 	movdqa	DATAat0x38950(%rip), %xmm11
    00000488: 	leaq	0x2(%rdi), %rdx
    0000048c: 	movq	%rbp, 0x138(%rsp)
    00000494: 	leaq	(%rax,%rdx), %rax
    00000498: 	movq	%rbx, 0xc0(%rsp)
    000004a0: 	movq	%rax, 0x170(%rsp)
    000004a8: 	subq	%r11, %rax
    000004ab: 	cmpq	$0x10, %rax
    000004af: 	movq	%r11, 0x168(%rsp)
    000004b7: 	movl	$0x0, 0x8c(%rsp)
    000004c2: 	seta	%al
    000004c5: 	andb	0x149(%rsp), %al
    000004cc: 	movb	%al, 0x14a(%rsp)
    000004d3: 	leaq	0x4(%r14,%rsi), %rax
    000004d8: 	movq	%rax, 0x160(%rsp)
    000004e0: 	leaq	(%r14,%rdx), %rax
    000004e4: 	movq	%rax, 0x158(%rsp)
    000004ec: 	leaq	0x4(%r14,%rdi), %rax
    000004f1: 	movq	%rax, 0x150(%rsp)
    000004f9: 	leaq	(%r8,%rbx), %rax
    000004fd: 	leaq	0x2(%r14,%rax,2), %rax
    00000502: 	movq	%rax, 0x270(%rsp)
    0000050a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3834:
    00000510: 	movswl	(%r14), %eax
    00000514: 	movswl	0x2(%r14), %edx
    00000519: 	movq	0xb0(%rsp), %rdi
    00000521: 	leal	(%rax,%rax,4), %ecx
    00000524: 	leal	(%rax,%rcx,2), %ecx
    00000527: 	addl	%edx, %ecx
    00000529: 	leal	(%rdx,%rdx,4), %edx
    0000052c: 	leal	(%rcx,%rax,8), %eax
    0000052f: 	addl	%eax, %edx
    00000531: 	movq	0x90(%rsp), %rax
    00000539: 	movswl	(%rax), %eax
    0000053c: 	addl	%eax, %edx
    0000053e: 	leal	(%rax,%rax,4), %eax
    00000541: 	addl	%edx, %eax
    00000543: 	movswl	(%rdi), %edx
    00000546: 	addl	%edx, %eax
    00000548: 	leal	0x2f(%rax), %edx
    0000054b: 	addl	$0x10, %eax
    0000054e: 	cmovnsl	%eax, %edx
    00000551: 	movq	0x80(%rsp), %rax
    00000559: 	sarl	$0x5, %edx
    0000055c: 	movw	%dx, (%rax)
    0000055f: 	cmpl	$0x1, %r13d
    00000563: 	jle	.Ltmp3821 # Offset: 1379
    00000569: 	cmpb	$0x0, 0x14b(%rsp)
    00000571: 	je	.Ltmp3822 # Offset: 1393
    00000577: 	movdqa	DATAat0x38860(%rip), %xmm4
    0000057f: 	movq	%rdi, %rcx
    00000582: 	xorl	%eax, %eax
    00000584: 	movq	0x90(%rsp), %rdx
    0000058c: 	movq	0x178(%rsp), %rsi
    00000594: 	movq	0x80(%rsp), %rdi
    0000059c: 	movaps	%xmm4, (%rsp)
    000005a0: 	movdqa	DATAat0x38960(%rip), %xmm4
    000005a8: 	movaps	%xmm4, 0x10(%rsp)
    000005ad: 	nopl	(%rax) # Size: 3
.Ltmp3823:
    000005b0: 	movdqu	0x2(%r14,%rax), %xmm5
    000005b7: 	pxor	%xmm14, %xmm14
    000005bc: 	pxor	%xmm7, %xmm7
    000005c0: 	movdqu	(%r14,%rax), %xmm3
    000005c6: 	movdqu	0x4(%r14,%rax), %xmm2
    000005cd: 	movdqu	(%rdx,%rax), %xmm8
    000005d3: 	movdqa	%xmm5, %xmm4
    000005d7: 	movdqa	%xmm5, %xmm13
    000005dc: 	movdqa	%xmm3, %xmm1
    000005e0: 	movdqa	DATAat0x38970(%rip), %xmm9
    000005e9: 	pmullw	%xmm11, %xmm4
    000005ee: 	pmulhw	%xmm11, %xmm13
    000005f3: 	movdqa	%xmm3, %xmm6
    000005f7: 	pcmpgtw	%xmm3, %xmm14
    000005fc: 	pcmpgtw	%xmm2, %xmm7
    00000600: 	movdqa	%xmm2, %xmm12
    00000605: 	pmulhw	%xmm11, %xmm6
    0000060a: 	pmullw	%xmm5, %xmm9
    0000060f: 	pmulhw	DATAat0x38970(%rip), %xmm5
    00000617: 	pmulhw	%xmm11, %xmm12
    0000061c: 	punpcklwd	%xmm14, %xmm1
    00000621: 	movaps	%xmm7, 0x20(%rsp)
    00000626: 	movdqa	%xmm4, %xmm0
    0000062a: 	punpckhwd	%xmm13, %xmm4
    0000062f: 	punpcklwd	%xmm13, %xmm0
    00000634: 	paddd	%xmm1, %xmm0
    00000638: 	movdqa	%xmm2, %xmm1
    0000063c: 	movdqa	%xmm6, %xmm15
    00000641: 	punpcklwd	%xmm7, %xmm1
    00000645: 	movaps	%xmm15, 0x30(%rsp)
    0000064b: 	paddd	%xmm1, %xmm0
    0000064f: 	movdqa	%xmm3, %xmm1
    00000653: 	punpckhwd	%xmm14, %xmm3
    00000658: 	pmullw	%xmm11, %xmm1
    0000065d: 	paddd	%xmm3, %xmm4
    00000661: 	pxor	%xmm3, %xmm3
    00000665: 	movdqa	%xmm1, %xmm6
    00000669: 	punpckhwd	0x30(%rsp), %xmm1
    0000066f: 	punpcklwd	%xmm15, %xmm6
    00000674: 	paddd	%xmm6, %xmm0
    00000678: 	movdqa	%xmm5, %xmm6
    0000067c: 	movdqa	%xmm9, %xmm5
    00000681: 	punpcklwd	%xmm6, %xmm5
    00000685: 	movaps	%xmm6, 0x40(%rsp)
    0000068a: 	punpckhwd	0x40(%rsp), %xmm9
    00000691: 	paddd	%xmm5, %xmm0
    00000695: 	movdqa	%xmm2, %xmm5
    00000699: 	punpckhwd	0x20(%rsp), %xmm2
    0000069f: 	pmullw	%xmm11, %xmm5
    000006a4: 	paddd	%xmm4, %xmm2
    000006a8: 	movdqa	0x10(%rsp), %xmm4
    000006ae: 	paddd	%xmm2, %xmm1
    000006b2: 	movdqu	(%rdx,%rax), %xmm2
    000006b7: 	paddd	%xmm9, %xmm1
    000006bc: 	movdqa	%xmm5, %xmm7
    000006c0: 	punpcklwd	%xmm12, %xmm5
    000006c5: 	paddd	%xmm5, %xmm0
    000006c9: 	pxor	%xmm5, %xmm5
    000006cd: 	punpckhwd	%xmm12, %xmm7
    000006d2: 	pcmpgtw	%xmm8, %xmm5
    000006d7: 	paddd	%xmm7, %xmm1
    000006db: 	movdqa	%xmm5, %xmm15
    000006e0: 	movdqa	%xmm8, %xmm5
    000006e5: 	movdqu	(%rsi,%rax), %xmm8
    000006eb: 	punpcklwd	%xmm15, %xmm5
    000006f0: 	punpckhwd	%xmm15, %xmm2
    000006f5: 	paddd	%xmm5, %xmm0
    000006f9: 	movdqu	(%rcx,%rax), %xmm5
    000006fe: 	paddd	%xmm2, %xmm1
    00000702: 	movdqu	(%rsi,%rax), %xmm2
    00000707: 	pmullw	%xmm11, %xmm5
    0000070c: 	movdqa	%xmm5, %xmm6
    00000710: 	movdqu	(%rcx,%rax), %xmm5
    00000715: 	movdqa	%xmm6, %xmm10
    0000071a: 	pmulhw	%xmm11, %xmm5
    0000071f: 	punpcklwd	%xmm5, %xmm10
    00000724: 	punpckhwd	%xmm5, %xmm6
    00000728: 	paddd	%xmm10, %xmm0
    0000072d: 	pxor	%xmm10, %xmm10
    00000732: 	paddd	%xmm6, %xmm1
    00000736: 	pcmpgtw	%xmm8, %xmm10
    0000073b: 	punpcklwd	%xmm10, %xmm8
    00000740: 	punpckhwd	%xmm10, %xmm2
    00000745: 	paddd	%xmm8, %xmm0
    0000074a: 	movdqa	(%rsp), %xmm8
    00000750: 	paddd	%xmm2, %xmm1
    00000754: 	pxor	%xmm2, %xmm2
    00000758: 	paddd	%xmm8, %xmm0
    0000075d: 	paddd	%xmm8, %xmm1
    00000762: 	pcmpgtd	%xmm0, %xmm3
    00000766: 	pcmpgtd	%xmm1, %xmm2
    0000076a: 	pand	%xmm4, %xmm3
    0000076e: 	pand	%xmm4, %xmm2
    00000772: 	paddd	%xmm2, %xmm1
    00000776: 	paddd	%xmm3, %xmm0
    0000077a: 	psrad	$0x5, %xmm1
    0000077f: 	psrad	$0x5, %xmm0
    00000784: 	movdqa	%xmm0, %xmm2
    00000788: 	punpcklwd	%xmm1, %xmm0
    0000078c: 	punpckhwd	%xmm1, %xmm2
    00000790: 	movdqa	%xmm0, %xmm1
    00000794: 	punpckhwd	%xmm2, %xmm1
    00000798: 	punpcklwd	%xmm2, %xmm0
    0000079c: 	punpcklwd	%xmm1, %xmm0
    000007a0: 	movups	%xmm0, 0x2(%rdi,%rax)
    000007a5: 	addq	$0x10, %rax
    000007a9: 	cmpq	%r15, %rax
    000007ac: 	jne	.Ltmp3823 # Offset: 1964
    000007b2: 	movl	0x88(%rsp), %edi
    000007b9: 	cmpl	%edi, 0x6c(%rsp)
    000007bd: 	je	.Ltmp3821 # Offset: 1981
    000007c3: 	movq	0x190(%rsp), %r11
    000007cb: 	movq	0x188(%rsp), %rax
    000007d3: 	movq	0x198(%rsp), %rdi
    000007db: 	movq	0x1a0(%rsp), %rbx
    000007e3: 	movswl	(%r11), %esi
    000007e7: 	movswl	(%rax), %ecx
    000007ea: 	movswl	(%rdi), %edx
    000007ed: 	movq	0x1a8(%rsp), %r10
    000007f5: 	leal	(%rsi,%rsi,4), %eax
    000007f8: 	addl	%ecx, %eax
    000007fa: 	leal	(%rcx,%rcx,4), %ecx
    000007fd: 	addl	%edx, %eax
    000007ff: 	addl	%eax, %ecx
    00000801: 	leal	(%rdx,%rdx,4), %eax
    00000804: 	movswl	(%rbx), %edx
    00000807: 	movq	0x1b0(%rsp), %rbx
    0000080f: 	leal	(%rcx,%rsi,8), %ecx
    00000812: 	addl	%ecx, %eax
    00000814: 	addl	%eax, %edx
    00000816: 	movswl	(%r10), %eax
    0000081a: 	leal	(%rax,%rax,4), %eax
    0000081d: 	addl	%edx, %eax
    0000081f: 	movswl	(%rbx), %edx
    00000822: 	addl	%edx, %eax
    00000824: 	leal	0x2f(%rax), %edx
    00000827: 	addl	$0x10, %eax
    0000082a: 	cmovnsl	%eax, %edx
    0000082d: 	movq	0x180(%rsp), %rax
    00000835: 	sarl	$0x5, %edx
    00000838: 	movw	%dx, (%rax)
    0000083b: 	cmpl	%r13d, 0x14c(%rsp)
    00000843: 	jge	.Ltmp3821 # Offset: 2115
    00000849: 	movswl	(%r11), %ecx
    0000084d: 	movswl	(%rdi), %esi
    00000850: 	movq	0x1b8(%rsp), %r11
    00000858: 	leal	(%rsi,%rsi,4), %eax
    0000085b: 	movswl	(%r11), %edx
    0000085f: 	addl	%ecx, %eax
    00000861: 	leal	(%rcx,%rcx,4), %ecx
    00000864: 	addl	%edx, %eax
    00000866: 	addl	%eax, %ecx
    00000868: 	leal	(%rdx,%rdx,4), %eax
    0000086b: 	movswl	(%r10), %edx
    0000086f: 	movq	0x1c0(%rsp), %r10
    00000877: 	leal	(%rcx,%rsi,8), %ecx
    0000087a: 	addl	%ecx, %eax
    0000087c: 	addl	%eax, %edx
    0000087e: 	movswl	(%rbx), %eax
    00000881: 	leal	(%rax,%rax,4), %eax
    00000884: 	addl	%edx, %eax
    00000886: 	movswl	(%r10), %edx
    0000088a: 	addl	%edx, %eax
    0000088c: 	leal	0x2f(%rax), %edx
    0000088f: 	addl	$0x10, %eax
    00000892: 	cmovnsl	%eax, %edx
    00000895: 	movq	0x1c8(%rsp), %rax
    0000089d: 	sarl	$0x5, %edx
    000008a0: 	movw	%dx, (%rax)
    000008a3: 	cmpl	%r13d, 0x1d8(%rsp)
    000008ab: 	jge	.Ltmp3821 # Offset: 2219
    000008b1: 	movswl	(%rdi), %ecx
    000008b4: 	movswl	(%r11), %esi
    000008b8: 	movq	%r11, %rdi
    000008bb: 	movq	0x1e0(%rsp), %r11
    000008c3: 	leal	(%rsi,%rsi,4), %eax
    000008c6: 	movswl	(%r11), %edx
    000008ca: 	addl	%ecx, %eax
    000008cc: 	leal	(%rcx,%rcx,4), %ecx
    000008cf: 	addl	%edx, %eax
    000008d1: 	addl	%eax, %ecx
    000008d3: 	leal	(%rdx,%rdx,4), %eax
    000008d6: 	movswl	(%rbx), %edx
    000008d9: 	movq	%r10, %rbx
    000008dc: 	leal	(%rcx,%rsi,8), %ecx
    000008df: 	addl	%ecx, %eax
    000008e1: 	addl	%eax, %edx
    000008e3: 	movswl	(%r10), %eax
    000008e7: 	movq	0x1e8(%rsp), %r10
    000008ef: 	leal	(%rax,%rax,4), %eax
    000008f2: 	addl	%edx, %eax
    000008f4: 	movswl	(%r10), %edx
    000008f8: 	addl	%edx, %eax
    000008fa: 	leal	0x2f(%rax), %edx
    000008fd: 	addl	$0x10, %eax
    00000900: 	cmovnsl	%eax, %edx
    00000903: 	movq	0x1f0(%rsp), %rax
    0000090b: 	sarl	$0x5, %edx
    0000090e: 	movw	%dx, (%rax)
    00000911: 	cmpl	0x208(%rsp), %r13d
    00000919: 	jle	.Ltmp3821 # Offset: 2329
    0000091f: 	movswl	(%rdi), %ecx
    00000922: 	movswl	(%r11), %esi
    00000926: 	movq	%r11, %rdi
    00000929: 	movq	0x1d0(%rsp), %r11
    00000931: 	leal	(%rsi,%rsi,4), %eax
    00000934: 	movswl	(%r11), %edx
    00000938: 	addl	%ecx, %eax
    0000093a: 	leal	(%rcx,%rcx,4), %ecx
    0000093d: 	addl	%edx, %eax
    0000093f: 	addl	%eax, %ecx
    00000941: 	leal	(%rdx,%rdx,4), %eax
    00000944: 	movswl	(%rbx), %edx
    00000947: 	movq	%r10, %rbx
    0000094a: 	leal	(%rcx,%rsi,8), %ecx
    0000094d: 	addl	%ecx, %eax
    0000094f: 	addl	%eax, %edx
    00000951: 	movswl	(%r10), %eax
    00000955: 	movq	0x200(%rsp), %r10
    0000095d: 	leal	(%rax,%rax,4), %eax
    00000960: 	addl	%edx, %eax
    00000962: 	movswl	(%r10), %edx
    00000966: 	addl	%edx, %eax
    00000968: 	leal	0x2f(%rax), %edx
    0000096b: 	addl	$0x10, %eax
    0000096e: 	cmovnsl	%eax, %edx
    00000971: 	movq	0x1f8(%rsp), %rax
    00000979: 	sarl	$0x5, %edx
    0000097c: 	movw	%dx, (%rax)
    0000097f: 	cmpl	0x1dc(%rsp), %r13d
    00000987: 	jle	.Ltmp3821 # Offset: 2439
    0000098d: 	movswl	(%rdi), %ecx
    00000990: 	movswl	(%r11), %esi
    00000994: 	movq	%r11, %rdi
    00000997: 	movq	0x210(%rsp), %r11
    0000099f: 	leal	(%rsi,%rsi,4), %eax
    000009a2: 	movswl	(%r11), %edx
    000009a6: 	addl	%ecx, %eax
    000009a8: 	leal	(%rcx,%rcx,4), %ecx
    000009ab: 	addl	%edx, %eax
    000009ad: 	addl	%eax, %ecx
    000009af: 	leal	(%rdx,%rdx,4), %eax
    000009b2: 	movswl	(%rbx), %edx
    000009b5: 	movq	%r10, %rbx
    000009b8: 	leal	(%rcx,%rsi,8), %ecx
    000009bb: 	addl	%ecx, %eax
    000009bd: 	addl	%eax, %edx
    000009bf: 	movswl	(%r10), %eax
    000009c3: 	movq	0x218(%rsp), %r10
    000009cb: 	leal	(%rax,%rax,4), %eax
    000009ce: 	addl	%edx, %eax
    000009d0: 	movswl	(%r10), %edx
    000009d4: 	addl	%edx, %eax
    000009d6: 	leal	0x2f(%rax), %edx
    000009d9: 	addl	$0x10, %eax
    000009dc: 	cmovnsl	%eax, %edx
    000009df: 	movq	0x220(%rsp), %rax
    000009e7: 	sarl	$0x5, %edx
    000009ea: 	movw	%dx, (%rax)
    000009ed: 	cmpl	0x20c(%rsp), %r13d
    000009f5: 	jle	.Ltmp3821 # Offset: 2549
    000009fb: 	movswl	(%rdi), %ecx
    000009fe: 	movswl	(%r11), %esi
    00000a02: 	movq	%r11, %rdi
    00000a05: 	movq	0x250(%rsp), %r11
    00000a0d: 	leal	(%rsi,%rsi,4), %eax
    00000a10: 	movswl	(%r11), %edx
    00000a14: 	addl	%ecx, %eax
    00000a16: 	leal	(%rcx,%rcx,4), %ecx
    00000a19: 	addl	%edx, %eax
    00000a1b: 	addl	%eax, %ecx
    00000a1d: 	leal	(%rdx,%rdx,4), %eax
    00000a20: 	movswl	(%rbx), %edx
    00000a23: 	movq	%r10, %rbx
    00000a26: 	leal	(%rcx,%rsi,8), %ecx
    00000a29: 	addl	%ecx, %eax
    00000a2b: 	addl	%eax, %edx
    00000a2d: 	movswl	(%r10), %eax
    00000a31: 	movq	0x258(%rsp), %r10
    00000a39: 	leal	(%rax,%rax,4), %eax
    00000a3c: 	addl	%edx, %eax
    00000a3e: 	movswl	(%r10), %edx
    00000a42: 	addl	%edx, %eax
    00000a44: 	leal	0x2f(%rax), %edx
    00000a47: 	addl	$0x10, %eax
    00000a4a: 	cmovnsl	%eax, %edx
    00000a4d: 	movq	0x260(%rsp), %rax
    00000a55: 	sarl	$0x5, %edx
    00000a58: 	movw	%dx, (%rax)
    00000a5b: 	cmpl	0x234(%rsp), %r13d
    00000a63: 	jle	.Ltmp3821 # Offset: 2659
    00000a65: 	movswl	(%rdi), %ecx
    00000a68: 	movswl	(%r11), %esi
    00000a6c: 	movq	0x238(%rsp), %rdi
    00000a74: 	leal	(%rsi,%rsi,4), %eax
    00000a77: 	movswl	(%rdi), %edx
    00000a7a: 	addl	%ecx, %eax
    00000a7c: 	leal	(%rcx,%rcx,4), %ecx
    00000a7f: 	movq	0x240(%rsp), %rdi
    00000a87: 	addl	%edx, %eax
    00000a89: 	addl	%eax, %ecx
    00000a8b: 	leal	(%rdx,%rdx,4), %eax
    00000a8e: 	movswl	(%rbx), %edx
    00000a91: 	leal	(%rcx,%rsi,8), %ecx
    00000a94: 	addl	%ecx, %eax
    00000a96: 	addl	%eax, %edx
    00000a98: 	movswl	(%r10), %eax
    00000a9c: 	leal	(%rax,%rax,4), %eax
    00000a9f: 	addl	%edx, %eax
    00000aa1: 	movswl	(%rdi), %edx
    00000aa4: 	addl	%edx, %eax
    00000aa6: 	leal	0x2f(%rax), %edx
    00000aa9: 	addl	$0x10, %eax
    00000aac: 	cmovnsl	%eax, %edx
    00000aaf: 	movq	0x248(%rsp), %rax
    00000ab7: 	sarl	$0x5, %edx
    00000aba: 	movw	%dx, (%rax)
.Ltmp3821:
    00000abd: 	movq	0xc8(%rsp), %rax
    00000ac5: 	movq	0xd8(%rsp), %rdi
    00000acd: 	movswl	(%rax), %edx
    00000ad0: 	movq	0xd0(%rsp), %rax
    00000ad8: 	movswl	(%rax), %eax
    00000adb: 	leal	(%rax,%rax,4), %esi
    00000ade: 	leal	(%rdx,%rsi), %ecx
    00000ae1: 	leal	(%rdx,%rdx,4), %edx
    00000ae4: 	addl	%eax, %ecx
    00000ae6: 	addl	%ecx, %edx
    00000ae8: 	movswl	(%rdi), %ecx
    00000aeb: 	leal	(%rdx,%rax,8), %eax
    00000aee: 	addl	%esi, %eax
    00000af0: 	addl	%eax, %ecx
    00000af2: 	movq	0xe0(%rsp), %rax
    00000afa: 	movswl	(%rax), %edx
    00000afd: 	leal	(%rdx,%rdx,4), %eax
    00000b00: 	addl	%ecx, %eax
    00000b02: 	addl	%edx, %eax
    00000b04: 	leal	0x2f(%rax), %edx
    00000b07: 	addl	$0x10, %eax
    00000b0a: 	cmovnsl	%eax, %edx
    00000b0d: 	movq	0xe8(%rsp), %rax
    00000b15: 	sarl	$0x5, %edx
    00000b18: 	cmpl	$0x1, 0x68(%rsp)
    00000b1d: 	movw	%dx, (%rax)
    00000b20: 	jle	.Ltmp3824 # Offset: 2848
    00000b26: 	movq	0x140(%rsp), %rax
    00000b2e: 	movslq	0x128(%rsp), %rbx
    00000b36: 	movl	$0x1, 0x20(%rsp)
    00000b3e: 	movq	%r14, %rdx
    00000b41: 	movq	0x138(%rsp), %rdi
    00000b49: 	movq	%r15, 0x60(%rsp)
    00000b4e: 	pxor	%xmm4, %xmm4
    00000b52: 	leaq	0x2(%rax), %r11
    00000b56: 	addq	$0x4, %rax
    00000b5a: 	movq	0x130(%rsp), %rsi
    00000b62: 	movq	%rbx, %r15
    00000b65: 	movq	%r11, 0x40(%rsp)
    00000b6a: 	movq	0xc0(%rsp), %r11
    00000b72: 	movq	%rax, 0x70(%rsp)
    00000b77: 	movq	0x90(%rsp), %rcx
    00000b7f: 	leaq	0x2(%r11,%r11), %r11
    00000b84: 	movq	%r11, 0xa8(%rsp)
    00000b8c: 	nopl	(%rax) # Size: 4
.Ltmp3829:
    00000b90: 	movswl	(%rdx), %eax
    00000b93: 	addl	$0x1, 0x20(%rsp)
    00000b98: 	leal	(%rax,%rax,2), %r8d
    00000b9c: 	movswl	0x2(%rdx), %eax
    00000ba0: 	leal	(%rax,%r8,2), %r9d
    00000ba4: 	movswl	(%rcx), %r8d
    00000ba8: 	leal	(%r8,%r8,4), %eax
    00000bac: 	addl	%r9d, %eax
    00000baf: 	leal	(%rax,%r8,8), %eax
    00000bb3: 	movswl	0x2(%rcx), %r8d
    00000bb8: 	leal	(%r8,%r8,4), %r8d
    00000bbc: 	addl	%eax, %r8d
    00000bbf: 	movswl	(%rsi), %eax
    00000bc2: 	addl	%eax, %r8d
    00000bc5: 	leal	(%rax,%rax,4), %eax
    00000bc8: 	addl	%r8d, %eax
    00000bcb: 	movswl	0x2(%rsi), %r8d
    00000bd0: 	addl	%r8d, %eax
    00000bd3: 	leal	0x2f(%rax), %r8d
    00000bd7: 	addl	$0x10, %eax
    00000bda: 	cmovnsl	%eax, %r8d
    00000bde: 	sarl	$0x5, %r8d
    00000be2: 	movw	%r8w, (%rdi)
    00000be6: 	cmpl	$0x1, %r13d
    00000bea: 	jle	.Ltmp3825 # Offset: 3050
    00000bf0: 	movq	0x40(%rsp), %rax
    00000bf5: 	leaq	0x2(%rdi), %r8
    00000bf9: 	leaq	0x2(%rdx), %r9
    00000bfd: 	leaq	(%rax,%rdx), %r10
    00000c01: 	movq	%r8, %rax
    00000c04: 	subq	%r9, %rax
    00000c07: 	cmpq	$0x10, %rax
    00000c0b: 	seta	%al
    00000c0e: 	testb	%al, 0x149(%rsp)
    00000c15: 	je	.Ltmp3826 # Offset: 3093
    00000c1b: 	movq	%r8, %rax
    00000c1e: 	subq	%r10, %rax
    00000c21: 	cmpq	$0x10, %rax
    00000c25: 	jbe	.Ltmp3826 # Offset: 3109
    00000c2b: 	movq	0x70(%rsp), %rax
    00000c30: 	movq	%rdi, 0x30(%rsp)
    00000c35: 	leaq	0x4(%rdx), %r12
    00000c39: 	leaq	0x2(%rcx), %rbp
    00000c3d: 	movq	0x60(%rsp), %rdi
    00000c42: 	leaq	0x4(%rcx), %rbx
    00000c46: 	leaq	(%rax,%rdx), %r11
    00000c4a: 	xorl	%eax, %eax
    00000c4c: 	nopl	(%rax) # Size: 4
.Ltmp3827:
    00000c50: 	movdqu	(%r9,%rax), %xmm10
    00000c56: 	movdqu	(%r9,%rax), %xmm5
    00000c5c: 	movdqa	%xmm4, %xmm14
    00000c61: 	movdqa	%xmm4, %xmm13
    00000c66: 	movdqu	(%rdx,%rax), %xmm3
    00000c6b: 	movdqu	(%rcx,%rax), %xmm9
    00000c71: 	movdqa	%xmm4, %xmm15
    00000c76: 	pmullw	%xmm11, %xmm10
    00000c7b: 	pmulhw	%xmm11, %xmm5
    00000c80: 	movdqu	(%rbx,%rax), %xmm6
    00000c85: 	movdqu	(%rbx,%rax), %xmm2
    00000c8a: 	pcmpgtw	%xmm3, %xmm14
    00000c8f: 	pmullw	%xmm11, %xmm9
    00000c94: 	movdqa	%xmm3, %xmm0
    00000c98: 	movdqu	(%r12,%rax), %xmm3
    00000c9e: 	pmullw	%xmm11, %xmm6
    00000ca3: 	pmulhw	%xmm11, %xmm2
    00000ca8: 	movdqu	(%rbp,%rax), %xmm8
    00000caf: 	pmullw	DATAat0x38970(%rip), %xmm8
    00000cb8: 	pcmpgtw	%xmm3, %xmm13
    00000cbd: 	movdqu	(%rbp,%rax), %xmm7
    00000cc3: 	pmulhw	DATAat0x38970(%rip), %xmm7
    00000ccb: 	movaps	%xmm7, (%rsp)
    00000ccf: 	punpcklwd	%xmm14, %xmm0
    00000cd4: 	movdqa	%xmm10, %xmm1
    00000cd9: 	punpckhwd	%xmm5, %xmm10
    00000cde: 	punpcklwd	%xmm5, %xmm1
    00000ce2: 	movdqu	(%rdx,%rax), %xmm5
    00000ce7: 	paddd	%xmm1, %xmm0
    00000ceb: 	movdqa	%xmm3, %xmm1
    00000cef: 	movdqu	(%rcx,%rax), %xmm3
    00000cf4: 	punpcklwd	%xmm13, %xmm1
    00000cf9: 	punpckhwd	%xmm14, %xmm5
    00000cfe: 	pmulhw	%xmm11, %xmm3
    00000d03: 	paddd	%xmm1, %xmm0
    00000d07: 	movdqa	%xmm9, %xmm1
    00000d0c: 	paddd	%xmm10, %xmm5
    00000d11: 	movdqu	(%r12,%rax), %xmm10
    00000d17: 	punpckhwd	%xmm13, %xmm10
    00000d1c: 	paddd	%xmm5, %xmm10
    00000d21: 	punpcklwd	%xmm3, %xmm1
    00000d25: 	punpckhwd	%xmm3, %xmm9
    00000d2a: 	paddd	%xmm1, %xmm0
    00000d2e: 	movdqa	%xmm8, %xmm1
    00000d33: 	punpckhwd	(%rsp), %xmm8
    00000d39: 	punpcklwd	%xmm7, %xmm1
    00000d3d: 	movdqa	%xmm6, %xmm7
    00000d41: 	paddd	%xmm9, %xmm10
    00000d46: 	paddd	%xmm1, %xmm0
    00000d4a: 	movdqa	%xmm6, %xmm1
    00000d4e: 	movdqu	(%rsi,%rax), %xmm6
    00000d53: 	punpckhwd	%xmm2, %xmm7
    00000d57: 	punpcklwd	%xmm2, %xmm1
    00000d5b: 	movdqu	(%rsi,%rax), %xmm2
    00000d60: 	paddd	%xmm8, %xmm10
    00000d65: 	pcmpgtw	%xmm6, %xmm15
    00000d6a: 	paddd	%xmm1, %xmm0
    00000d6e: 	movdqa	%xmm6, %xmm1
    00000d72: 	movdqu	(%r10,%rax), %xmm6
    00000d78: 	paddd	%xmm10, %xmm7
    00000d7d: 	pmullw	%xmm11, %xmm6
    00000d82: 	punpcklwd	%xmm15, %xmm1
    00000d87: 	punpckhwd	%xmm15, %xmm2
    00000d8c: 	paddd	%xmm1, %xmm0
    00000d90: 	movdqu	(%r10,%rax), %xmm1
    00000d96: 	paddd	%xmm2, %xmm7
    00000d9a: 	pxor	%xmm2, %xmm2
    00000d9e: 	pmulhw	%xmm11, %xmm1
    00000da3: 	movdqa	%xmm6, %xmm12
    00000da8: 	punpcklwd	%xmm1, %xmm12
    00000dad: 	punpckhwd	%xmm1, %xmm6
    00000db1: 	movdqu	(%r11,%rax), %xmm1
    00000db7: 	paddd	%xmm12, %xmm0
    00000dbc: 	movdqa	%xmm4, %xmm12
    00000dc1: 	paddd	%xmm7, %xmm6
    00000dc5: 	movaps	%xmm0, 0x10(%rsp)
    00000dca: 	movdqu	(%r11,%rax), %xmm0
    00000dd0: 	pcmpgtw	%xmm0, %xmm12
    00000dd5: 	punpckhwd	%xmm12, %xmm1
    00000dda: 	punpcklwd	%xmm12, %xmm0
    00000ddf: 	paddd	0x10(%rsp), %xmm0
    00000de5: 	paddd	%xmm1, %xmm6
    00000de9: 	paddd	DATAat0x38860(%rip), %xmm6
    00000df1: 	pxor	%xmm1, %xmm1
    00000df5: 	paddd	DATAat0x38860(%rip), %xmm0
    00000dfd: 	pcmpgtd	%xmm6, %xmm2
    00000e01: 	pand	DATAat0x38960(%rip), %xmm2
    00000e09: 	pcmpgtd	%xmm0, %xmm1
    00000e0d: 	pand	DATAat0x38960(%rip), %xmm1
    00000e15: 	paddd	%xmm6, %xmm2
    00000e19: 	paddd	%xmm1, %xmm0
    00000e1d: 	movdqa	%xmm2, %xmm1
    00000e21: 	psrad	$0x5, %xmm1
    00000e26: 	psrad	$0x5, %xmm0
    00000e2b: 	movdqa	%xmm0, %xmm2
    00000e2f: 	punpcklwd	%xmm1, %xmm0
    00000e33: 	punpckhwd	%xmm1, %xmm2
    00000e37: 	movdqa	%xmm0, %xmm1
    00000e3b: 	punpckhwd	%xmm2, %xmm1
    00000e3f: 	punpcklwd	%xmm2, %xmm0
    00000e43: 	punpcklwd	%xmm1, %xmm0
    00000e47: 	movups	%xmm0, (%r8,%rax)
    00000e4c: 	addq	$0x10, %rax
    00000e50: 	cmpq	%rdi, %rax
    00000e53: 	jne	.Ltmp3827 # Offset: 3667
    00000e59: 	movq	0x30(%rsp), %rdi
    00000e5e: 	movl	0x88(%rsp), %ebx
    00000e65: 	cmpl	%ebx, 0x6c(%rsp)
    00000e69: 	je	.Ltmp3825 # Offset: 3689
    00000e6b: 	movq	0x78(%rsp), %rax
.Ltmp3828:
    00000e70: 	movswl	(%rdx,%rax,2), %r8d
    00000e75: 	movswl	-0x2(%rdx,%rax,2), %r9d
    00000e7b: 	leal	(%r8,%r8,4), %r8d
    00000e7f: 	addl	%r9d, %r8d
    00000e82: 	movswl	0x2(%rdx,%rax,2), %r9d
    00000e88: 	addl	%r8d, %r9d
    00000e8b: 	movswl	-0x2(%rcx,%rax,2), %r8d
    00000e91: 	leal	(%r8,%r8,4), %r8d
    00000e95: 	addl	%r9d, %r8d
    00000e98: 	movswl	(%rcx,%rax,2), %r9d
    00000e9d: 	leal	(%r8,%r9,8), %r10d
    00000ea1: 	movswl	0x2(%rcx,%rax,2), %r8d
    00000ea7: 	leal	(%r8,%r8,4), %r9d
    00000eab: 	movswl	-0x2(%rsi,%rax,2), %r8d
    00000eb1: 	addl	%r10d, %r9d
    00000eb4: 	addl	%r9d, %r8d
    00000eb7: 	movswl	(%rsi,%rax,2), %r9d
    00000ebc: 	leal	(%r9,%r9,4), %r9d
    00000ec0: 	addl	%r8d, %r9d
    00000ec3: 	movswl	0x2(%rsi,%rax,2), %r8d
    00000ec9: 	addl	%r9d, %r8d
    00000ecc: 	leal	0x2f(%r8), %r9d
    00000ed0: 	addl	$0x10, %r8d
    00000ed4: 	cmovsl	%r9d, %r8d
    00000ed8: 	sarl	$0x5, %r8d
    00000edc: 	movw	%r8w, (%rdi,%rax,2)
    00000ee1: 	addq	$0x1, %rax
    00000ee5: 	cmpl	%eax, %r13d
    00000ee8: 	jg	.Ltmp3828 # Offset: 3816
.Ltmp3825:
    00000eea: 	movq	0x58(%rsp), %rbx
    00000eef: 	movswl	-0x2(%rdx,%r15,2), %r8d
    00000ef5: 	movswl	(%rdx,%rbx,2), %eax
    00000ef9: 	leal	(%r8,%r8,4), %r9d
    00000efd: 	addl	%r9d, %eax
    00000f00: 	movswl	(%rsi,%rbx,2), %r9d
    00000f05: 	addl	%r8d, %eax
    00000f08: 	movswl	(%rcx,%rbx,2), %r8d
    00000f0d: 	movl	0x68(%rsp), %ebx
    00000f11: 	leal	(%r8,%r8,4), %r8d
    00000f15: 	addl	%eax, %r8d
    00000f18: 	movswl	-0x2(%rcx,%r15,2), %eax
    00000f1e: 	leal	(%r8,%rax,8), %r8d
    00000f22: 	leal	(%rax,%rax,4), %eax
    00000f25: 	addl	%r8d, %eax
    00000f28: 	movswl	-0x2(%rsi,%r15,2), %r8d
    00000f2e: 	addl	%eax, %r9d
    00000f31: 	leal	(%r8,%r8,4), %eax
    00000f35: 	addl	%r9d, %eax
    00000f38: 	addl	%r8d, %eax
    00000f3b: 	leal	0x2f(%rax), %r8d
    00000f3f: 	addl	$0x10, %eax
    00000f42: 	cmovnsl	%eax, %r8d
    00000f46: 	movq	0x50(%rsp), %rax
    00000f4b: 	sarl	$0x5, %r8d
    00000f4f: 	addq	%rax, %rdx
    00000f52: 	addq	%rax, %rcx
    00000f55: 	addq	%rax, %rsi
    00000f58: 	movw	%r8w, -0x2(%rdi,%r15,2)
    00000f5e: 	addq	%rax, %rdi
    00000f61: 	cmpl	%ebx, 0x20(%rsp)
    00000f65: 	jne	.Ltmp3829 # Offset: 3941
    00000f6b: 	movq	0x60(%rsp), %r15
.Ltmp3824:
    00000f70: 	movq	0x98(%rsp), %rax
    00000f78: 	movq	0xf8(%rsp), %rbx
    00000f80: 	movswl	(%rax), %eax
    00000f83: 	leal	(%rax,%rax,2), %edx
    00000f86: 	movq	0xf0(%rsp), %rax
    00000f8e: 	movswl	(%rax), %eax
    00000f91: 	leal	(%rax,%rdx,2), %ecx
    00000f94: 	movq	0xa0(%rsp), %rax
    00000f9c: 	movswl	(%rax), %edx
    00000f9f: 	leal	(%rdx,%rdx,4), %eax
    00000fa2: 	addl	%eax, %ecx
    00000fa4: 	leal	(%rcx,%rdx,8), %edi
    00000fa7: 	movswl	(%rbx), %ecx
    00000faa: 	leal	(%rcx,%rcx,4), %esi
    00000fad: 	addl	%edi, %esi
    00000faf: 	addl	%esi, %edx
    00000fb1: 	addl	%edx, %eax
    00000fb3: 	addl	%ecx, %eax
    00000fb5: 	leal	0x2f(%rax), %edx
    00000fb8: 	addl	$0x10, %eax
    00000fbb: 	cmovnsl	%eax, %edx
    00000fbe: 	movq	0xb8(%rsp), %rax
    00000fc6: 	sarl	$0x5, %edx
    00000fc9: 	movw	%dx, (%rax)
    00000fcc: 	cmpl	$0x1, %r13d
    00000fd0: 	jle	.Ltmp3830 # Offset: 4048
    00000fd6: 	cmpb	$0x0, 0x14a(%rsp)
    00000fde: 	je	.Ltmp3831 # Offset: 4062
    00000fe4: 	movdqa	DATAat0x38950(%rip), %xmm8
    00000fed: 	movdqa	DATAat0x38860(%rip), %xmm4
    00000ff5: 	xorl	%eax, %eax
    00000ff7: 	pxor	%xmm7, %xmm7
    00000ffb: 	movq	0x98(%rsp), %rdx
    00001003: 	movq	0xa0(%rsp), %rcx
    0000100b: 	movaps	%xmm4, (%rsp)
    0000100f: 	movdqa	DATAat0x38960(%rip), %xmm4
    00001017: 	movq	0x150(%rsp), %rsi
    0000101f: 	movq	0x158(%rsp), %rdi
    00001027: 	movq	0x160(%rsp), %r8
    0000102f: 	movq	0x168(%rsp), %r9
    00001037: 	movq	0x170(%rsp), %r10
    0000103f: 	movaps	%xmm4, 0x10(%rsp)
    00001044: 	nopl	(%rax) # Size: 4
.Ltmp3832:
    00001048: 	movdqu	(%r9,%rax), %xmm9
    0000104e: 	movdqu	(%r9,%rax), %xmm3
    00001054: 	movdqa	%xmm7, %xmm4
    00001058: 	movdqu	(%rdx,%rax), %xmm5
    0000105d: 	movdqu	(%r8,%rax), %xmm6
    00001063: 	pmullw	%xmm8, %xmm9
    00001068: 	pmulhw	%xmm8, %xmm3
    0000106d: 	movdqu	(%rdi,%rax), %xmm2
    00001072: 	movdqu	(%rcx,%rax), %xmm14
    00001078: 	pcmpgtw	%xmm5, %xmm4
    0000107c: 	movdqa	%xmm5, %xmm0
    00001080: 	movdqa	%xmm7, %xmm5
    00001084: 	movdqu	(%rsi,%rax), %xmm12
    0000108a: 	pcmpgtw	%xmm6, %xmm5
    0000108e: 	pmulhw	%xmm8, %xmm14
    00001093: 	movdqa	%xmm2, %xmm13
    00001098: 	pmulhw	DATAat0x38970(%rip), %xmm13
    000010a1: 	pmulhw	%xmm8, %xmm12
    000010a6: 	punpcklwd	%xmm4, %xmm0
    000010aa: 	movaps	%xmm4, 0x20(%rsp)
    000010af: 	movdqa	%xmm9, %xmm1
    000010b4: 	movaps	%xmm5, 0x30(%rsp)
    000010b9: 	punpckhwd	%xmm3, %xmm9
    000010be: 	punpcklwd	%xmm3, %xmm1
    000010c2: 	paddd	%xmm1, %xmm0
    000010c6: 	movdqa	%xmm6, %xmm1
    000010ca: 	punpcklwd	%xmm5, %xmm1
    000010ce: 	paddd	%xmm1, %xmm0
    000010d2: 	movdqu	(%rcx,%rax), %xmm1
    000010d7: 	pmullw	%xmm8, %xmm1
    000010dc: 	movdqa	%xmm1, %xmm6
    000010e0: 	movaps	%xmm1, 0x40(%rsp)
    000010e5: 	movdqu	(%rcx,%rax), %xmm1
    000010ea: 	punpcklwd	%xmm14, %xmm6
    000010ef: 	paddd	%xmm6, %xmm0
    000010f3: 	movdqa	DATAat0x38970(%rip), %xmm6
    000010fb: 	movdqa	%xmm1, %xmm10
    00001100: 	pmullw	%xmm2, %xmm6
    00001104: 	movdqa	%xmm6, %xmm15
    00001109: 	punpckhwd	%xmm13, %xmm6
    0000110e: 	punpcklwd	%xmm13, %xmm15
    00001113: 	paddd	%xmm15, %xmm0
    00001118: 	movdqu	(%rsi,%rax), %xmm15
    0000111e: 	pmullw	%xmm8, %xmm15
    00001123: 	movdqa	%xmm15, %xmm5
    00001128: 	punpcklwd	%xmm12, %xmm15
    0000112d: 	paddd	%xmm15, %xmm0
    00001132: 	movdqa	%xmm7, %xmm15
    00001137: 	punpckhwd	%xmm12, %xmm5
    0000113c: 	pcmpgtw	%xmm1, %xmm15
    00001141: 	movdqu	(%rsi,%rax), %xmm1
    00001146: 	punpcklwd	%xmm15, %xmm10
    0000114b: 	paddd	%xmm10, %xmm0
    00001150: 	movdqa	%xmm2, %xmm10
    00001155: 	pmullw	%xmm8, %xmm10
    0000115a: 	pmulhw	%xmm8, %xmm2
    0000115f: 	movdqa	%xmm10, %xmm4
    00001164: 	punpcklwd	%xmm2, %xmm10
    00001169: 	paddd	%xmm10, %xmm0
    0000116e: 	movdqa	%xmm7, %xmm10
    00001173: 	punpckhwd	%xmm2, %xmm4
    00001177: 	pcmpgtw	%xmm1, %xmm10
    0000117c: 	punpcklwd	%xmm10, %xmm1
    00001181: 	paddd	%xmm1, %xmm0
    00001185: 	movdqu	(%rdx,%rax), %xmm1
    0000118a: 	punpckhwd	0x20(%rsp), %xmm1
    00001190: 	paddd	(%rsp), %xmm0
    00001195: 	paddd	%xmm1, %xmm9
    0000119a: 	movdqu	(%r8,%rax), %xmm1
    000011a0: 	punpckhwd	0x30(%rsp), %xmm1
    000011a6: 	movdqa	%xmm1, %xmm3
    000011aa: 	movdqa	0x40(%rsp), %xmm1
    000011b0: 	paddd	%xmm9, %xmm3
    000011b5: 	punpckhwd	%xmm14, %xmm1
    000011ba: 	paddd	%xmm3, %xmm1
    000011be: 	movdqu	(%rcx,%rax), %xmm3
    000011c3: 	paddd	%xmm6, %xmm1
    000011c7: 	punpckhwd	%xmm15, %xmm3
    000011cc: 	paddd	%xmm5, %xmm1
    000011d0: 	paddd	%xmm3, %xmm1
    000011d4: 	pxor	%xmm3, %xmm3
    000011d8: 	movdqa	%xmm1, %xmm2
    000011dc: 	pxor	%xmm1, %xmm1
    000011e0: 	paddd	%xmm4, %xmm2
    000011e4: 	movdqu	(%rsi,%rax), %xmm4
    000011e9: 	pcmpgtd	%xmm0, %xmm1
    000011ed: 	punpckhwd	%xmm10, %xmm4
    000011f2: 	paddd	%xmm4, %xmm2
    000011f6: 	paddd	(%rsp), %xmm2
    000011fb: 	movdqa	0x10(%rsp), %xmm4
    00001201: 	pcmpgtd	%xmm2, %xmm3
    00001205: 	pand	%xmm4, %xmm1
    00001209: 	paddd	%xmm1, %xmm0
    0000120d: 	psrad	$0x5, %xmm0
    00001212: 	pand	%xmm4, %xmm3
    00001216: 	paddd	%xmm2, %xmm3
    0000121a: 	movdqa	%xmm0, %xmm2
    0000121e: 	movdqa	%xmm3, %xmm1
    00001222: 	psrad	$0x5, %xmm1
    00001227: 	punpcklwd	%xmm1, %xmm0
    0000122b: 	punpckhwd	%xmm1, %xmm2
    0000122f: 	movdqa	%xmm0, %xmm1
    00001233: 	punpcklwd	%xmm2, %xmm0
    00001237: 	punpckhwd	%xmm2, %xmm1
    0000123b: 	punpcklwd	%xmm1, %xmm0
    0000123f: 	movups	%xmm0, (%r10,%rax)
    00001244: 	addq	$0x10, %rax
    00001248: 	cmpq	%r15, %rax
    0000124b: 	jne	.Ltmp3832 # Offset: 4683
    00001251: 	movl	0x88(%rsp), %edi
    00001258: 	cmpl	%edi, 0x6c(%rsp)
    0000125c: 	je	.Ltmp3830 # Offset: 4700
    0000125e: 	movq	0x78(%rsp), %rax
    00001263: 	movq	0x98(%rsp), %rsi
    0000126b: 	movq	0xa0(%rsp), %rdi
    00001273: 	movq	0xb8(%rsp), %r8
    0000127b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3833:
    00001280: 	movswl	(%rsi,%rax,2), %edx
    00001284: 	movswl	-0x2(%rdi,%rax,2), %r10d
    0000128a: 	movswl	0x2(%rdi,%rax,2), %r9d
    00001290: 	leal	(%rdx,%rdx,4), %ecx
    00001293: 	movswl	-0x2(%rsi,%rax,2), %edx
    00001298: 	addl	%edx, %ecx
    0000129a: 	movswl	0x2(%rsi,%rax,2), %edx
    0000129f: 	addl	%ecx, %edx
    000012a1: 	leal	(%r10,%r10,4), %ecx
    000012a5: 	addl	%edx, %ecx
    000012a7: 	movswl	(%rdi,%rax,2), %edx
    000012ab: 	leal	(%rcx,%rdx,8), %r11d
    000012af: 	leal	(%r9,%r9,4), %ecx
    000012b3: 	addl	%r11d, %ecx
    000012b6: 	leal	(%rdx,%rdx,4), %edx
    000012b9: 	addl	%r10d, %ecx
    000012bc: 	addl	%ecx, %edx
    000012be: 	addl	%r9d, %edx
    000012c1: 	leal	0x2f(%rdx), %ecx
    000012c4: 	addl	$0x10, %edx
    000012c7: 	cmovsl	%ecx, %edx
    000012ca: 	sarl	$0x5, %edx
    000012cd: 	movw	%dx, (%r8,%rax,2)
    000012d2: 	addq	$0x1, %rax
    000012d6: 	cmpl	%eax, %r13d
    000012d9: 	jg	.Ltmp3833 # Offset: 4825
.Ltmp3830:
    000012db: 	movq	0x108(%rsp), %rax
    000012e3: 	movswl	(%rax), %edx
    000012e6: 	movq	0x100(%rsp), %rax
    000012ee: 	movswl	(%rax), %eax
    000012f1: 	leal	(%rdx,%rdx,4), %ecx
    000012f4: 	addl	%eax, %ecx
    000012f6: 	movq	0x110(%rsp), %rax
    000012fe: 	addl	%edx, %ecx
    00001300: 	movswl	(%rax), %edx
    00001303: 	leal	(%rdx,%rdx,4), %eax
    00001306: 	addl	%eax, %ecx
    00001308: 	movq	0x118(%rsp), %rax
    00001310: 	movswl	(%rax), %eax
    00001313: 	leal	(%rax,%rax,4), %esi
    00001316: 	leal	(%rcx,%rax,8), %ecx
    00001319: 	leal	(%rdx,%rsi,2), %edx
    0000131c: 	addl	%ecx, %edx
    0000131e: 	addl	%edx, %eax
    00001320: 	leal	0x2f(%rax), %edx
    00001323: 	addl	$0x10, %eax
    00001326: 	cmovnsl	%eax, %edx
    00001329: 	movq	0x120(%rsp), %rax
    00001331: 	addl	$0x1, 0x8c(%rsp)
    00001339: 	sarl	$0x5, %edx
    0000133c: 	movw	%dx, (%rax)
    0000133f: 	movl	0x8c(%rsp), %eax
    00001346: 	cmpl	0x12c(%rsp), %eax
    0000134d: 	jne	.Ltmp3834 # Offset: 4941
.Ltmp3855:
    00001353: 	movl	0x27c(%rsp), %eax
    0000135a: 	xorl	%edx, %edx
    0000135c: 	addl	0x128(%rsp), %eax
    00001363: 	cmpl	$0x2, 0x230(%rsp)
    0000136b: 	leal	(%rax,%rax), %r13d
    0000136f: 	jle	.Ltmp3835 # Offset: 4975
    00001375: 	movl	0x128(%rsp), %eax
    0000137c: 	movl	0x230(%rsp), %edi
    00001383: 	xorl	%edx, %edx
    00001385: 	movl	0x278(%rsp), %r14d
    0000138d: 	movq	0x80(%rsp), %r12
    00001395: 	leal	-0x2(%rax), %r10d
    00001399: 	leal	-0x1(%rax), %esi
    0000139c: 	leal	-0x3(%rax), %r11d
    000013a0: 	movl	%r10d, %eax
    000013a3: 	movl	%r10d, %ebx
    000013a6: 	movl	%r14d, %ecx
    000013a9: 	shrl	$0x3, %eax
    000013ac: 	andl	$-0x8, %ebx
    000013af: 	leal	-0x1(%rdi), %r9d
    000013b3: 	movl	$0x1, %edi
    000013b8: 	leal	-0x1(%rax), %r8d
    000013bc: 	leal	0x1(%rbx), %ebp
    000013bf: 	addq	$0x1, %r8
    000013c3: 	shlq	$0x4, %r8
    000013c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3839:
    000013d0: 	cmpl	$0x1, %esi
    000013d3: 	jle	.Ltmp3836 # Offset: 5075
    000013d9: 	cmpl	$0x6, %r11d
    000013dd: 	jbe	.Ltmp3837 # Offset: 5085
    000013e3: 	movslq	%ecx, %rax
    000013e6: 	pxor	%xmm0, %xmm0
    000013ea: 	leaq	0x2(%r12,%rax,2), %rax
    000013ef: 	leaq	(%r8,%rax), %r15
    000013f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3838:
    000013f8: 	movdqu	(%rax), %xmm4
    000013fc: 	addq	$0x10, %rax
    00001400: 	paddw	%xmm4, %xmm0
    00001404: 	cmpq	%rax, %r15
    00001407: 	jne	.Ltmp3838 # Offset: 5127
    00001409: 	movdqa	%xmm0, %xmm1
    0000140d: 	psrldq	$0x8, %xmm1
    00001412: 	paddw	%xmm1, %xmm0
    00001416: 	movdqa	%xmm0, %xmm1
    0000141a: 	psrldq	$0x4, %xmm1
    0000141f: 	paddw	%xmm1, %xmm0
    00001423: 	movdqa	%xmm0, %xmm1
    00001427: 	psrldq	$0x2, %xmm1
    0000142c: 	paddw	%xmm1, %xmm0
    00001430: 	pextrw	$0x0, %xmm0, %eax
    00001435: 	addl	%eax, %edx
    00001437: 	cmpl	%ebx, %r10d
    0000143a: 	je	.Ltmp3836 # Offset: 5178
    00001440: 	movl	%ebp, %eax
.Ltmp3851:
    00001442: 	leal	(%rcx,%rax), %r15d
    00001446: 	movslq	%r15d, %r15
    00001449: 	addw	(%r12,%r15,2), %dx
    0000144e: 	leal	0x1(%rax), %r15d
    00001452: 	cmpl	%esi, %r15d
    00001455: 	jge	.Ltmp3836 # Offset: 5205
    00001457: 	addl	%ecx, %r15d
    0000145a: 	movslq	%r15d, %r15
    0000145d: 	addw	(%r12,%r15,2), %dx
    00001462: 	leal	0x2(%rax), %r15d
    00001466: 	cmpl	%esi, %r15d
    00001469: 	jge	.Ltmp3836 # Offset: 5225
    0000146b: 	addl	%ecx, %r15d
    0000146e: 	movslq	%r15d, %r15
    00001471: 	addw	(%r12,%r15,2), %dx
    00001476: 	leal	0x3(%rax), %r15d
    0000147a: 	cmpl	%esi, %r15d
    0000147d: 	jge	.Ltmp3836 # Offset: 5245
    0000147f: 	addl	%ecx, %r15d
    00001482: 	movslq	%r15d, %r15
    00001485: 	addw	(%r12,%r15,2), %dx
    0000148a: 	leal	0x4(%rax), %r15d
    0000148e: 	cmpl	%esi, %r15d
    00001491: 	jge	.Ltmp3836 # Offset: 5265
    00001493: 	addl	%ecx, %r15d
    00001496: 	movslq	%r15d, %r15
    00001499: 	addw	(%r12,%r15,2), %dx
    0000149e: 	leal	0x5(%rax), %r15d
    000014a2: 	cmpl	%esi, %r15d
    000014a5: 	jge	.Ltmp3836 # Offset: 5285
    000014a7: 	addl	%ecx, %r15d
    000014aa: 	addl	$0x6, %eax
    000014ad: 	movslq	%r15d, %r15
    000014b0: 	addw	(%r12,%r15,2), %dx
    000014b5: 	cmpl	%esi, %eax
    000014b7: 	jge	.Ltmp3836 # Offset: 5303
    000014b9: 	addl	%ecx, %eax
    000014bb: 	cltq
    000014bd: 	addw	(%r12,%rax,2), %dx
.Ltmp3836:
    000014c2: 	addl	$0x1, %edi
    000014c5: 	addl	%r14d, %ecx
    000014c8: 	cmpl	%edi, %r9d
    000014cb: 	jne	.Ltmp3839 # Offset: 5323
.Ltmp3835:
    000014d1: 	cvttsd2si	init_value(%rip), %ecx
    000014d9: 	movzwl	0x230(%rsp), %eax
    000014e1: 	imulw	0x128(%rsp), %ax
    000014ea: 	subl	%r13d, %eax
    000014ed: 	imull	%ecx, %eax
    000014f0: 	cmpw	%dx, %ax
    000014f3: 	je	.Ltmp3840 # Offset: 5363
    000014f5: 	movq	0x268(%rsp), %rax
    000014fd: 	leaq	DATAat0x381c8(%rip), %rsi
    00001504: 	movl	$0x1, %edi
    00001509: 	movq	(%rax), %rdx
    0000150c: 	xorl	%eax, %eax
    0000150e: 	callq	__printf_chk@PLT # Offset: 5390
.Ltmp3840:
    00001513: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000151a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00001521: 	subq	$0x20, %rax
    00001525: 	cmpq	%rax, %rbx
    00001528: 	je	.Ltmp3841 # Offset: 5416
    0000152e: 	movq	0x268(%rsp), %rax
    00001536: 	leaq	0x10(%rbx), %rdi
    0000153a: 	movq	%rdi, (%rbx)
    0000153d: 	movq	(%rax), %rbp
    00001540: 	movq	0x8(%rax), %r12
    00001544: 	movq	%rbp, %rax
    00001547: 	addq	%r12, %rax
    0000154a: 	je	.Ltmp3842 # Offset: 5450
    0000154c: 	testq	%rbp, %rbp
    0000154f: 	je	.Ltmp3843 # Offset: 5455
.Ltmp3842:
    00001555: 	movq	%r12, 0x280(%rsp)
    0000155d: 	cmpq	$0xf, %r12
    00001561: 	ja	.Ltmp3844 # Offset: 5473
    00001567: 	cmpq	$0x1, %r12
    0000156b: 	jne	.Ltmp3845 # Offset: 5483
    00001571: 	movzbl	(%rbp), %eax
    00001575: 	movb	%al, 0x10(%rbx)
.Ltmp3852:
    00001578: 	movq	%r12, 0x8(%rbx)
    0000157c: 	movb	$0x0, (%rdi,%r12)
    00001581: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001588: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000158f: 	addq	$0x20, %rax
    00001593: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000159a: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000015a1: 	je	.Ltmp3846 # Offset: 5537
.Ltmp3853:
    000015a7: 	movq	-0x20(%rax), %rbp
    000015ab: 	callq	clock@PLT # Offset: 5547
    000015b0: 	movq	%rax, end_time(%rip)
    000015b7: 	movq	0x288(%rsp), %rdx
    000015bf: 	subq	%fs:0x28, %rdx
    000015c8: 	jne	.Ltmp3847 # Offset: 5576
    000015ce: 	subq	start_time(%rip), %rax
    000015d5: 	pxor	%xmm0, %xmm0
    000015d9: 	movq	%rbp, %rdi
    000015dc: 	cvtsi2sd	%rax, %xmm0
    000015e1: 	divsd	DATAat0x38a48(%rip), %xmm0
    000015e9: 	addq	$0x298, %rsp
    000015f0: 	popq	%rbx
    000015f1: 	popq	%rbp
    000015f2: 	popq	%r12
    000015f4: 	popq	%r13
    000015f6: 	popq	%r14
    000015f8: 	popq	%r15
    000015fa: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 5626
    000015ff: 	nop # Size: 1
.Ltmp3826:
    00001600: 	movq	0xa8(%rsp), %rax
    00001608: 	movq	%rcx, %r9
    0000160b: 	movq	%rsi, %r11
    0000160e: 	movq	%rdx, %r8
    00001611: 	movq	0x80(%rsp), %r10
    00001619: 	subq	%r14, %r9
    0000161c: 	leaq	(%rax,%rdx), %rbx
.Ltmp3848:
    00001620: 	movswl	0x2(%r8), %eax
    00001625: 	movswl	(%r8), %ebp
    00001629: 	leal	(%rax,%rax,4), %eax
    0000162c: 	addl	%ebp, %eax
    0000162e: 	movswl	0x4(%r8), %ebp
    00001633: 	addl	%eax, %ebp
    00001635: 	movswl	(%r14,%r9), %eax
    0000163a: 	leal	(%rax,%rax,4), %eax
    0000163d: 	addl	%ebp, %eax
    0000163f: 	movswl	0x2(%r14,%r9), %ebp
    00001645: 	leal	(%rax,%rbp,8), %r12d
    00001649: 	movswl	0x4(%r14,%r9), %eax
    0000164f: 	leal	(%rax,%rax,4), %ebp
    00001652: 	movswl	(%r11), %eax
    00001656: 	addl	%r12d, %ebp
    00001659: 	addl	%ebp, %eax
    0000165b: 	movswl	0x2(%r11), %ebp
    00001660: 	leal	(%rbp,%rbp,4), %ebp
    00001664: 	addl	%eax, %ebp
    00001666: 	movswl	0x4(%r11), %eax
    0000166b: 	addl	%ebp, %eax
    0000166d: 	leal	0x2f(%rax), %ebp
    00001670: 	addl	$0x10, %eax
    00001673: 	cmovsl	%ebp, %eax
    00001676: 	addq	$0x2, %r8
    0000167a: 	addq	$0x2, %r11
    0000167e: 	sarl	$0x5, %eax
    00001681: 	movw	%ax, 0x2(%r10,%r9)
    00001687: 	addq	$0x2, %r9
    0000168b: 	cmpq	%rbx, %r8
    0000168e: 	jne	.Ltmp3848 # Offset: 5774
    00001690: 	jmp	.Ltmp3825 # Offset: 5776
.Ltmp3831:
    00001695: 	movq	0x228(%rsp), %rdx
    0000169d: 	movq	0x98(%rsp), %rax
    000016a5: 	movq	0x270(%rsp), %rdi
    000016ad: 	movq	0x80(%rsp), %r8
    000016b5: 	nopl	(%rax) # Size: 3
.Ltmp3849:
    000016b8: 	movswl	0x2(%rax), %ecx
    000016bc: 	movswl	(%r14,%rdx), %r10d
    000016c1: 	movswl	0x4(%r14,%rdx), %r9d
    000016c7: 	leal	(%rcx,%rcx,4), %esi
    000016ca: 	movswl	(%rax), %ecx
    000016cd: 	addl	%ecx, %esi
    000016cf: 	movswl	0x4(%rax), %ecx
    000016d3: 	addl	%esi, %ecx
    000016d5: 	leal	(%r10,%r10,4), %esi
    000016d9: 	addl	%ecx, %esi
    000016db: 	movswl	0x2(%r14,%rdx), %ecx
    000016e1: 	leal	(%rsi,%rcx,8), %r11d
    000016e5: 	leal	(%r9,%r9,4), %esi
    000016e9: 	addl	%r11d, %esi
    000016ec: 	leal	(%rcx,%rcx,4), %ecx
    000016ef: 	addl	%r10d, %esi
    000016f2: 	addl	%esi, %ecx
    000016f4: 	addl	%r9d, %ecx
    000016f7: 	leal	0x2f(%rcx), %esi
    000016fa: 	addl	$0x10, %ecx
    000016fd: 	cmovsl	%esi, %ecx
    00001700: 	addq	$0x2, %rax
    00001704: 	sarl	$0x5, %ecx
    00001707: 	movw	%cx, 0x2(%r8,%rdx)
    0000170d: 	addq	$0x2, %rdx
    00001711: 	cmpq	%rax, %rdi
    00001714: 	jne	.Ltmp3849 # Offset: 5908
    00001716: 	jmp	.Ltmp3830 # Offset: 5910
.Ltmp3822:
    0000171b: 	movq	%rax, %rdi
    0000171e: 	movq	0xc0(%rsp), %rax
    00001726: 	movq	0x90(%rsp), %rcx
    0000172e: 	leaq	0x2(%rax), %r9
    00001732: 	movl	$0x1, %eax
    00001737: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3850:
    00001740: 	movswl	(%r14,%rax,2), %r10d
    00001745: 	movswl	-0x2(%r14,%rax,2), %r8d
    0000174b: 	movswl	0x2(%r14,%rax,2), %esi
    00001751: 	leal	(%r10,%r10,4), %edx
    00001755: 	addl	%r8d, %edx
    00001758: 	leal	(%r8,%r8,4), %r8d
    0000175c: 	addl	%esi, %edx
    0000175e: 	leal	(%rsi,%rsi,4), %esi
    00001761: 	addl	%r8d, %edx
    00001764: 	leal	(%rdx,%r10,8), %edx
    00001768: 	addl	%edx, %esi
    0000176a: 	movswl	(%rcx), %edx
    0000176d: 	addl	%esi, %edx
    0000176f: 	movswl	0x2(%rcx), %esi
    00001773: 	leal	(%rsi,%rsi,4), %esi
    00001776: 	addl	%edx, %esi
    00001778: 	movswl	0x4(%rcx), %edx
    0000177c: 	addl	%esi, %edx
    0000177e: 	leal	0x2f(%rdx), %esi
    00001781: 	addl	$0x10, %edx
    00001784: 	cmovsl	%esi, %edx
    00001787: 	addq	$0x2, %rcx
    0000178b: 	sarl	$0x5, %edx
    0000178e: 	movw	%dx, (%rdi,%rax,2)
    00001792: 	addq	$0x1, %rax
    00001796: 	cmpq	%r9, %rax
    00001799: 	jne	.Ltmp3850 # Offset: 6041
    0000179b: 	jmp	.Ltmp3821 # Offset: 6043
.Ltmp3837:
    000017a0: 	movl	$0x1, %eax
    000017a5: 	jmp	.Ltmp3851 # Offset: 6053
.Ltmp3844:
    000017aa: 	movq	%rbx, %rdi
    000017ad: 	leaq	0x280(%rsp), %rsi
    000017b5: 	xorl	%edx, %edx
    000017b7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6071
    000017bc: 	movq	%rax, (%rbx)
    000017bf: 	movq	%rax, %rdi
    000017c2: 	movq	0x280(%rsp), %rax
    000017ca: 	movq	%rax, 0x10(%rbx)
.Ltmp3854:
    000017ce: 	movq	%r12, %rdx
    000017d1: 	movq	%rbp, %rsi
    000017d4: 	callq	memcpy@PLT # Offset: 6100
    000017d9: 	movq	0x280(%rsp), %r12
    000017e1: 	movq	(%rbx), %rdi
    000017e4: 	jmp	.Ltmp3852 # Offset: 6116
.Ltmp3841:
    000017e9: 	movq	0x268(%rsp), %rsi
    000017f1: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000017f8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6136
    000017fd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001804: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000180b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001812: 	jne	.Ltmp3853 # Offset: 6162
.Ltmp3846:
    00001818: 	movq	-0x8(%rdx), %rax
    0000181c: 	addq	$0x200, %rax
    00001822: 	jmp	.Ltmp3853 # Offset: 6178
.Ltmp3845:
    00001827: 	testq	%r12, %r12
    0000182a: 	je	.Ltmp3852 # Offset: 6186
    00001830: 	jmp	.Ltmp3854 # Offset: 6192
    00001832: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3820:
    00001838: 	movl	0x230(%rsp), %eax
    0000183f: 	subl	$0x2, %eax
    00001842: 	movl	%eax, 0x27c(%rsp)
    00001849: 	jmp	.Ltmp3855 # Offset: 6217
.Ltmp3843:
    0000184e: 	leaq	DATAat0x38158(%rip), %rdi
    00001855: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6229
.Ltmp3847:
    0000185a: 	callq	__stack_chk_fail@PLT # Offset: 6234
DWARF CFI Instructions:
    <empty>
End of Function "_Z15convolution2D_4IsiEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15TestOneTypeConvIsiEvv" after disassembly {
  Number      : 289
  State       : disassembled
  Address     : 0x302c0
  Size        : 0x1da9
  MaxSize     : 0x1db0
  Offset      : 0x302c0
  Section     : .text
  Orc Section : .local.text._Z15TestOneTypeConvIsiEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0288:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x9c000(%rsp), %r11
.Ltmp3856:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp3856 # Offset: 37
    00000027: 	subq	$0x4e8, %rsp
    0000002e: 	movq	%fs:0x28, %rax
    00000037: 	movq	%rax, 0x9c4d8(%rsp)
    0000003f: 	xorl	%eax, %eax
    00000041: 	leaq	0xa0(%rsp), %rax
    00000049: 	leaq	0x4e2d0(%rsp), %rdx
    00000051: 	movl	$0x31746e69, 0xa0(%rsp)
    0000005c: 	movq	%rax, 0x70(%rsp)
    00000061: 	movq	%rax, 0x90(%rsp)
    00000069: 	movl	$0x5f36, %eax
    0000006e: 	movw	%ax, 0xa4(%rsp)
    00000076: 	cvttsd2si	init_value(%rip), %eax
    0000007e: 	movb	$0x74, 0xa6(%rsp)
    00000086: 	movq	$0x7, 0x98(%rsp)
    00000092: 	movb	$0x0, 0xa7(%rsp)
    0000009a: 	movd	%eax, %xmm0
    0000009e: 	leaq	0xd0(%rsp), %rax
    000000a6: 	movq	%rdx, 0x38(%rsp)
    000000ab: 	movq	%rax, 0x30(%rsp)
    000000b0: 	punpcklwd	%xmm0, %xmm0
    000000b4: 	pshufd	$0x0, %xmm0, %xmm0
    000000b9: 	nopl	(%rax) # Size: 7
.Ltmp3857:
    000000c0: 	movaps	%xmm0, (%rax)
    000000c3: 	addq	$0x10, %rax
    000000c7: 	cmpq	%rax, %rdx
    000000ca: 	jne	.Ltmp3857 # Offset: 202
    000000cc: 	movslq	iterations(%rip), %rax
    000000d3: 	leaq	0xb0(%rsp), %rdi
    000000db: 	leaq	DATAat0x387ae(%rip), %rsi
    000000e2: 	movq	$0x7, 0xb8(%rsp)
    000000ee: 	movq	%rdi, 0x50(%rsp)
    000000f3: 	movq	%rax, %rdx
    000000f6: 	movl	%eax, 0x7c(%rsp)
    000000fa: 	imulq	$0x5d9f7391, %rax, %rax
    00000101: 	sarl	$0x1f, %edx
    00000104: 	movb	$0x0, 0xc7(%rsp)
    0000010c: 	sarq	$0x27, %rax
    00000110: 	subl	%edx, %eax
    00000112: 	movl	$0x12, %edx
    00000117: 	movl	%eax, iterations(%rip)
    0000011d: 	leaq	0xc0(%rsp), %rax
    00000125: 	movq	%rax, 0x48(%rsp)
    0000012a: 	movq	%rax, 0xb0(%rsp)
    00000132: 	movl	0xa0(%rsp), %eax
    00000139: 	movl	%eax, 0xc0(%rsp)
    00000140: 	movzwl	0xa4(%rsp), %eax
    00000148: 	movw	%ax, 0xc4(%rsp)
    00000150: 	movzbl	0xa6(%rsp), %eax
    00000158: 	movb	%al, 0xc6(%rsp)
    0000015f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 351
    00000164: 	callq	clock@PLT # Offset: 356
    00000169: 	movq	%rax, start_time(%rip)
    00000170: 	movl	iterations(%rip), %eax
    00000176: 	movl	%eax, 0x60(%rsp)
    0000017a: 	testl	%eax, %eax
    0000017c: 	jle	.Ltmp3858 # Offset: 380
    00000182: 	movswl	0xd0(%rsp), %eax
    0000018a: 	movl	$0x0, 0x40(%rsp)
    00000192: 	movw	%ax, 0x58(%rsp)
    00000197: 	movl	%eax, 0x78(%rsp)
    0000019b: 	leaq	0x3f0(%rsp), %rax
    000001a3: 	movq	%rax, 0x68(%rsp)
    000001a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3881:
    000001b0: 	movq	0x68(%rsp), %rax
    000001b5: 	movswl	0x58(%rsp), %edx
    000001ba: 	movl	$0x190, %r14d
    000001c0: 	xorl	%r15d, %r15d
    000001c3: 	movq	%rax, 0x8(%rsp)
    000001c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3866:
    000001d0: 	leal	-0x320(%r14), %eax
    000001d7: 	leal	-0x190(%r14), %ecx
    000001de: 	movl	%r14d, %ebx
    000001e1: 	movq	0x30(%rsp), %r9
    000001e6: 	movl	%eax, 0x18(%rsp)
    000001ea: 	leal	(%rdx,%rdx,4), %eax
    000001ed: 	movq	%rcx, %rbp
    000001f0: 	leal	-0x18f(%r14), %r10d
    000001f7: 	movq	%rbx, 0x28(%rsp)
    000001fc: 	leaq	(%rcx,%rcx), %rbx
    00000200: 	movl	$0xffffffff, %edi
    00000205: 	movl	$0x1, %r11d
    0000020b: 	movl	%eax, 0x1c(%rsp)
    0000020f: 	leal	-0x31f(%r14), %r13d
    00000216: 	xorl	%eax, %eax
    00000218: 	movq	%rbx, 0x20(%rsp)
    0000021d: 	testl	%r15d, %r15d
    00000220: 	je	.Ltmp3859 # Offset: 544
    00000226: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3869:
    00000230: 	leal	(%r13,%rdi), %ecx
    00000235: 	movslq	%ecx, %rcx
    00000238: 	movswl	0xd0(%rsp,%rcx,2), %esi
    00000240: 	leal	(%rsi,%rsi,4), %r8d
    00000244: 	testl	%eax, %eax
    00000246: 	je	.Ltmp3860 # Offset: 582
    0000024c: 	movl	0x18(%rsp), %ebx
    00000250: 	leal	(%rbx,%rdi), %ecx
    00000253: 	movslq	%ecx, %rcx
    00000256: 	movswl	0xd0(%rsp,%rcx,2), %ecx
    0000025e: 	addl	%r8d, %ecx
    00000261: 	cmpl	$0x18f, %eax
    00000266: 	jne	.Ltmp3861 # Offset: 614
.Ltmp3871:
    0000026c: 	addl	%esi, %ecx
.Ltmp3867:
    0000026e: 	leal	(%rbp,%rdi), %esi
    00000272: 	leal	(%rbp,%rax), %r8d
    00000277: 	movslq	%esi, %rsi
    0000027a: 	addq	%r8, %r8
    0000027d: 	movswl	0xd0(%rsp,%rsi,2), %esi
    00000285: 	leal	(%rsi,%rsi,4), %esi
    00000288: 	addl	%esi, %ecx
    0000028a: 	movl	%edx, %esi
    0000028c: 	leal	(%rcx,%rdx,8), %ebx
    0000028f: 	cmpl	$0x18f, %eax
    00000294: 	jne	.Ltmp3862 # Offset: 660
    0000029a: 	leal	(%rdx,%rdx,4), %ecx
    0000029d: 	addl	%ecx, %ebx
    0000029f: 	cmpl	$0x18f, %r15d
    000002a6: 	je	.Ltmp3863 # Offset: 678
.Ltmp3873:
    000002ac: 	leal	(%r14,%rdi), %edx
    000002b0: 	movslq	%edx, %rdx
    000002b3: 	movswl	0xd0(%rsp,%rdx,2), %esi
    000002bb: 	leal	(%r14,%rax), %edx
    000002bf: 	movswl	0xd0(%rsp,%rdx,2), %edx
    000002c7: 	addl	%ebx, %esi
    000002c9: 	leal	(%rdx,%rdx,4), %ecx
    000002cc: 	addl	%esi, %ecx
    000002ce: 	cmpl	$0x18f, %eax
    000002d3: 	jne	.Ltmp3864 # Offset: 723
    000002d9: 	addl	%ecx, %edx
.Ltmp3878:
    000002db: 	leal	0x2f(%rdx), %eax
    000002de: 	addl	$0x10, %edx
    000002e1: 	cmovnsl	%edx, %eax
    000002e4: 	addl	$0x1, %r15d
    000002e8: 	addl	$0x190, %r14d
    000002ef: 	sarl	$0x5, %eax
    000002f2: 	movw	%ax, 0x4e2d0(%rsp,%r8)
    000002fb: 	cmpl	$0x190, %r15d
    00000302: 	je	.Ltmp3865 # Offset: 770
    00000308: 	movq	0x8(%rsp), %rax
    0000030d: 	movswl	(%rax), %edx
    00000310: 	addq	$0x320, %rax
    00000316: 	movq	%rax, 0x8(%rsp)
    0000031b: 	jmp	.Ltmp3866 # Offset: 795
.Ltmp3860:
    00000320: 	movq	0x8(%rsp), %rbx
    00000325: 	movswl	-0x640(%rbx), %ecx
    0000032c: 	addl	%r8d, %ecx
.Ltmp3861:
    0000032f: 	leal	(%r13,%rax), %esi
    00000334: 	movslq	%esi, %rsi
    00000337: 	movswl	0xd0(%rsp,%rsi,2), %esi
    0000033f: 	addl	%esi, %ecx
.Ltmp3872:
    00000341: 	testl	%eax, %eax
    00000343: 	jne	.Ltmp3867 # Offset: 835
    00000349: 	addl	0x1c(%rsp), %ecx
    0000034d: 	movslq	%r10d, %r12
    00000350: 	movl	%edx, %esi
    00000352: 	movq	0x20(%rsp), %r8
    00000357: 	leal	(%rcx,%rdx,8), %ecx
    0000035a: 	movswl	0xd0(%rsp,%r12,2), %edx
    00000363: 	leal	(%rdx,%rdx,4), %ebx
    00000366: 	addl	%ecx, %ebx
    00000368: 	cmpl	$0x18f, %r15d
    0000036f: 	je	.Ltmp3868 # Offset: 879
.Ltmp3874:
    00000375: 	movq	0x8(%rsp), %rsi
    0000037a: 	movswl	(%rsi), %esi
    0000037d: 	addl	%ebx, %esi
    0000037f: 	movq	0x28(%rsp), %rbx
    00000384: 	movswl	0xd0(%rsp,%rbx,2), %ecx
    0000038c: 	leal	(%rcx,%rcx,4), %ecx
    0000038f: 	addl	%esi, %ecx
.Ltmp3879:
    00000391: 	leal	(%r14,%r11), %esi
    00000395: 	movswl	0xd0(%rsp,%rsi,2), %esi
    0000039d: 	addl	%esi, %ecx
.Ltmp3876:
    0000039f: 	leal	0x2f(%rcx), %esi
    000003a2: 	addl	$0x10, %ecx
    000003a5: 	cmovnsl	%ecx, %esi
    000003a8: 	addl	$0x1, %eax
    000003ab: 	addl	$0x1, %r11d
    000003af: 	addq	$0x2, %r9
    000003b3: 	addl	$0x1, %r10d
    000003b7: 	addl	$0x1, %edi
    000003ba: 	sarl	$0x5, %esi
    000003bd: 	movw	%si, 0x4e2d0(%rsp,%r8)
    000003c6: 	testl	%r15d, %r15d
    000003c9: 	jne	.Ltmp3869 # Offset: 969
.Ltmp3859:
    000003cf: 	movswl	(%r9), %esi
    000003d3: 	leal	(%rsi,%rsi,4), %ecx
    000003d6: 	testl	%eax, %eax
    000003d8: 	je	.Ltmp3870 # Offset: 984
    000003de: 	movswl	-0x2(%r9), %r8d
    000003e3: 	addl	%r8d, %ecx
    000003e6: 	cmpl	$0x18f, %eax
    000003eb: 	je	.Ltmp3871 # Offset: 1003
    000003f1: 	movswl	0x2(%r9), %esi
    000003f6: 	addl	%esi, %ecx
    000003f8: 	jmp	.Ltmp3872 # Offset: 1016
    000003fd: 	nopl	(%rax) # Size: 3
.Ltmp3862:
    00000400: 	movslq	%r10d, %r12
    00000403: 	movswl	0xd0(%rsp,%r12,2), %edx
    0000040c: 	leal	(%rdx,%rdx,4), %ecx
    0000040f: 	addl	%ecx, %ebx
    00000411: 	cmpl	$0x18f, %r15d
    00000418: 	je	.Ltmp3868 # Offset: 1048
    0000041a: 	testl	%eax, %eax
    0000041c: 	jne	.Ltmp3873 # Offset: 1052
    00000422: 	jmp	.Ltmp3874 # Offset: 1058
    00000427: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3868:
    00000430: 	leal	(%rsi,%rsi,4), %ecx
    00000433: 	leal	(%rsi,%rbx), %edx
    00000436: 	movl	%eax, 0x14(%rsp)
    0000043a: 	addl	%ecx, %edx
    0000043c: 	testl	%eax, %eax
    0000043e: 	jne	.Ltmp3875 # Offset: 1086
.Ltmp3880:
    00000440: 	movswl	0x4dee2(%r9), %ecx
    00000448: 	addl	%edx, %ecx
    0000044a: 	movswl	0xd0(%rsp,%r12,2), %edx
    00000453: 	jmp	.Ltmp3876 # Offset: 1107
    00000458: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3863:
    00000460: 	movl	$0x18f, 0x14(%rsp)
.Ltmp3875:
    00000468: 	movswl	0x4dede(%r9), %edx
    00000470: 	addl	%ebx, %edx
    00000472: 	addl	%ecx, %edx
    00000474: 	cmpl	$0x18f, 0x14(%rsp)
    0000047c: 	jne	.Ltmp3877 # Offset: 1148
    0000047e: 	addl	%esi, %edx
    00000480: 	jmp	.Ltmp3878 # Offset: 1152
    00000485: 	nopl	(%rax) # Size: 3
.Ltmp3864:
    00000488: 	movslq	%r10d, %rdx
    0000048b: 	movswl	0xd0(%rsp,%rdx,2), %edx
    00000493: 	jmp	.Ltmp3879 # Offset: 1171
    00000498: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3870:
    000004a0: 	movswl	0x2(%r9), %esi
    000004a5: 	addl	0x78(%rsp), %ecx
    000004a9: 	addl	%esi, %ecx
    000004ab: 	jmp	.Ltmp3872 # Offset: 1195
.Ltmp3877:
    000004b0: 	movslq	%r10d, %r12
    000004b3: 	jmp	.Ltmp3880 # Offset: 1203
    000004b5: 	nopl	(%rax) # Size: 3
.Ltmp3865:
    000004b8: 	addl	$0x1, 0x40(%rsp)
    000004bd: 	movl	0x40(%rsp), %eax
    000004c1: 	cmpl	0x60(%rsp), %eax
    000004c5: 	jne	.Ltmp3881 # Offset: 1221
.Ltmp3858:
    000004cb: 	movq	0x38(%rsp), %rcx
    000004d0: 	leaq	0x4e5f0(%rsp), %rdx
    000004d8: 	leaq	0x9c7f0(%rsp), %rdi
    000004e0: 	xorl	%esi, %esi
    000004e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3883:
    000004e8: 	movq	%rcx, %rax
    000004eb: 	pxor	%xmm0, %xmm0
    000004ef: 	nop # Size: 1
.Ltmp3882:
    000004f0: 	paddw	(%rax), %xmm0
    000004f4: 	addq	$0x10, %rax
    000004f8: 	cmpq	%rax, %rdx
    000004fb: 	jne	.Ltmp3882 # Offset: 1275
    000004fd: 	movdqa	%xmm0, %xmm1
    00000501: 	addq	$0x320, %rdx
    00000508: 	addq	$0x320, %rcx
    0000050f: 	psrldq	$0x8, %xmm1
    00000514: 	paddw	%xmm1, %xmm0
    00000518: 	movdqa	%xmm0, %xmm1
    0000051c: 	psrldq	$0x4, %xmm1
    00000521: 	paddw	%xmm1, %xmm0
    00000525: 	movdqa	%xmm0, %xmm1
    00000529: 	psrldq	$0x2, %xmm1
    0000052e: 	paddw	%xmm1, %xmm0
    00000532: 	pextrw	$0x0, %xmm0, %eax
    00000537: 	addl	%eax, %esi
    00000539: 	cmpq	%rdx, %rdi
    0000053c: 	jne	.Ltmp3883 # Offset: 1340
    0000053e: 	cvttsd2si	init_value(%rip), %eax
    00000546: 	imulw	$0x7100, %ax, %ax
    0000054b: 	cmpw	%si, %ax
    0000054e: 	jne	.Ltmp3884 # Offset: 1358
.Ltmp3985:
    00000554: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000055b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000562: 	subq	$0x20, %rax
    00000566: 	cmpq	%rax, %rbx
    00000569: 	je	.Ltmp3885 # Offset: 1385
    0000056f: 	leaq	0x10(%rbx), %rdi
    00000573: 	movq	0xb8(%rsp), %r12
    0000057b: 	movq	%rdi, (%rbx)
    0000057e: 	movq	0xb0(%rsp), %rbp
    00000586: 	movq	%rbp, %rax
    00000589: 	addq	%r12, %rax
    0000058c: 	je	.Ltmp3886 # Offset: 1420
    0000058e: 	testq	%rbp, %rbp
    00000591: 	je	.Ltmp3887 # Offset: 1425
.Ltmp3886:
    00000597: 	movq	%r12, 0x88(%rsp)
    0000059f: 	cmpq	$0xf, %r12
    000005a3: 	ja	.Ltmp3888 # Offset: 1443
    000005a9: 	cmpq	$0x1, %r12
    000005ad: 	jne	.Ltmp3889 # Offset: 1453
    000005b3: 	movzbl	(%rbp), %eax
    000005b7: 	movb	%al, 0x10(%rbx)
.Ltmp3903:
    000005ba: 	movq	%r12, 0x8(%rbx)
    000005be: 	movb	$0x0, (%rdi,%r12)
    000005c3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000005ca: 	addq	$0x20, %rax
    000005ce: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp3999:
    000005d5: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000005dc: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000005e3: 	je	.Ltmp3890 # Offset: 1507
.Ltmp3996:
    000005e9: 	movq	-0x20(%rax), %rbp
    000005ed: 	callq	clock@PLT # Offset: 1517
    000005f2: 	pxor	%xmm0, %xmm0
    000005f6: 	movq	%rax, end_time(%rip)
    000005fd: 	movq	%rbp, %rdi
    00000600: 	subq	start_time(%rip), %rax
    00000607: 	cvtsi2sd	%rax, %xmm0
    0000060c: 	divsd	DATAat0x38a48(%rip), %xmm0
    00000614: 	callq	_Z13record_resultdPKc # Offset: 1556
    00000619: 	movq	0xb0(%rsp), %rdi
    00000621: 	cmpq	0x48(%rsp), %rdi
    00000626: 	je	.Ltmp3891 # Offset: 1574
    00000628: 	movq	0xc0(%rsp), %rax
    00000630: 	leaq	0x1(%rax), %rsi
    00000634: 	callq	_ZdlPvm@PLT # Offset: 1588
.Ltmp3891:
    00000639: 	movq	0x48(%rsp), %rax
    0000063e: 	movq	0x90(%rsp), %rbp
    00000646: 	movq	0x98(%rsp), %r12
    0000064e: 	movq	%rax, 0xb0(%rsp)
    00000656: 	movq	%rbp, %rax
    00000659: 	addq	%r12, %rax
    0000065c: 	je	.Ltmp3892 # Offset: 1628
    0000065e: 	testq	%rbp, %rbp
    00000661: 	je	.Ltmp3893 # Offset: 1633
.Ltmp3892:
    00000667: 	movq	%r12, 0x88(%rsp)
    0000066f: 	cmpq	$0xf, %r12
    00000673: 	ja	.Ltmp3894 # Offset: 1651
    00000679: 	cmpq	$0x1, %r12
    0000067d: 	jne	.Ltmp3895 # Offset: 1661
    00000683: 	movzbl	(%rbp), %eax
    00000687: 	movb	%al, 0xc0(%rsp)
    0000068e: 	movq	0x48(%rsp), %rax
.Ltmp3986:
    00000693: 	movq	%r12, 0xb8(%rsp)
    0000069b: 	movb	$0x0, (%rax,%r12)
    000006a0: 	movabsq	$0x3fffffffffffffff, %rax
    000006aa: 	subq	0xb8(%rsp), %rax
    000006b2: 	cmpq	$0x11, %rax
    000006b6: 	jbe	.Ltmp3896 # Offset: 1718
    000006bc: 	movq	0x50(%rsp), %rdi
    000006c1: 	movl	$0x12, %edx
    000006c6: 	leaq	DATAat0x387c1(%rip), %rsi
    000006cd: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1741
    000006d2: 	callq	clock@PLT # Offset: 1746
    000006d7: 	movq	%rax, start_time(%rip)
    000006de: 	movl	iterations(%rip), %eax
    000006e4: 	movl	%eax, 0x1c(%rsp)
    000006e8: 	testl	%eax, %eax
    000006ea: 	jle	.Ltmp3897 # Offset: 1770
    000006f0: 	movswl	0xd0(%rsp), %eax
    000006f8: 	movl	$0x0, 0x14(%rsp)
    00000700: 	movw	%ax, 0x78(%rsp)
    00000705: 	movl	%eax, 0x40(%rsp)
    00000709: 	movswl	0x3f0(%rsp), %eax
    00000711: 	movl	%eax, 0x58(%rsp)
    00000715: 	movswl	0x4dc90(%rsp), %eax
    0000071d: 	movl	%eax, 0x18(%rsp)
    00000721: 	movswl	0x4dfb0(%rsp), %eax
    00000729: 	leal	(%rax,%rax,4), %eax
    0000072c: 	movl	%eax, 0x20(%rsp)
    00000730: 	leaq	0xd2(%rsp), %rax
    00000738: 	movq	%rax, 0x60(%rsp)
    0000073d: 	leaq	0x4dc8e(%rsp), %rax
    00000745: 	movq	%rax, 0x28(%rsp)
    0000074a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3917:
    00000750: 	movq	0x60(%rsp), %rdx
    00000755: 	movswl	0x78(%rsp), %eax
    0000075a: 	xorl	%ecx, %ecx
    0000075c: 	movl	0x40(%rsp), %r8d
    00000761: 	movl	0x58(%rsp), %r9d
    00000766: 	movq	0x38(%rsp), %rdi
    0000076b: 	jmp	.Ltmp3898 # Offset: 1899
    0000076d: 	nopl	(%rax) # Size: 3
.Ltmp3901:
    00000770: 	movswl	-0x4(%rdx), %esi
    00000774: 	leal	(%rsi,%r11), %r10d
    00000778: 	cmpl	$0x18f, %ecx
    0000077e: 	jne	.Ltmp3899 # Offset: 1918
    00000784: 	addl	%eax, %r10d
    00000787: 	leal	(%rsi,%rsi,4), %esi
    0000078a: 	addl	%r10d, %esi
    0000078d: 	movswl	0x31c(%rdx), %r10d
    00000795: 	leal	(%rsi,%rax,8), %eax
    00000798: 	addl	%r11d, %eax
    0000079b: 	addl	%eax, %r10d
    0000079e: 	movswl	0x31e(%rdx), %eax
    000007a5: 	leal	(%rax,%rax,4), %esi
    000007a8: 	addl	%r10d, %esi
    000007ab: 	addl	%esi, %eax
.Ltmp3902:
    000007ad: 	leal	0x2f(%rax), %esi
    000007b0: 	addl	$0x10, %eax
    000007b3: 	cmovsl	%esi, %eax
    000007b6: 	sarl	$0x5, %eax
    000007b9: 	movw	%ax, (%rdi,%rcx,2)
    000007bd: 	addq	$0x1, %rcx
    000007c1: 	cmpq	$0x190, %rcx
    000007c8: 	je	.Ltmp3900 # Offset: 1992
    000007ce: 	movswl	(%rdx), %eax
    000007d1: 	addq	$0x2, %rdx
.Ltmp3898:
    000007d5: 	leal	(%rax,%rax,4), %r11d
    000007d9: 	testq	%rcx, %rcx
    000007dc: 	jne	.Ltmp3901 # Offset: 2012
    000007de: 	movswl	(%rdx), %esi
    000007e1: 	leal	(%r8,%r11,2), %r10d
    000007e5: 	addl	%esi, %r10d
    000007e8: 	leal	(%r10,%rax,8), %r10d
    000007ec: 	leal	(%rsi,%rsi,4), %eax
    000007ef: 	movswl	0x31e(%rdx), %esi
    000007f6: 	addl	%r10d, %eax
    000007f9: 	addl	%r9d, %eax
    000007fc: 	leal	(%rsi,%rsi,4), %esi
    000007ff: 	addl	%eax, %esi
.Ltmp3904:
    00000801: 	movswl	0x320(%rdx), %eax
    00000808: 	addl	%esi, %eax
    0000080a: 	jmp	.Ltmp3902 # Offset: 2058
.Ltmp3888:
    0000080c: 	leaq	0x88(%rsp), %rsi
    00000814: 	xorl	%edx, %edx
    00000816: 	movq	%rbx, %rdi
    00000819: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2073
    0000081e: 	movq	%rax, (%rbx)
    00000821: 	movq	%rax, %rdi
    00000824: 	movq	0x88(%rsp), %rax
    0000082c: 	movq	%rax, 0x10(%rbx)
.Ltmp4002:
    00000830: 	movq	%r12, %rdx
    00000833: 	movq	%rbp, %rsi
    00000836: 	callq	memcpy@PLT # Offset: 2102
    0000083b: 	movq	0x88(%rsp), %r12
    00000843: 	movq	(%rbx), %rdi
    00000846: 	jmp	.Ltmp3903 # Offset: 2118
    0000084b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3899:
    00000850: 	movswl	(%rdx), %r11d
    00000854: 	leal	(%rsi,%rsi,4), %esi
    00000857: 	addl	%r11d, %r10d
    0000085a: 	addl	%r10d, %esi
    0000085d: 	leal	(%rsi,%rax,8), %eax
    00000860: 	leal	(%r11,%r11,4), %esi
    00000864: 	addl	%eax, %esi
    00000866: 	movswl	0x31c(%rdx), %eax
    0000086d: 	addl	%esi, %eax
    0000086f: 	movswl	0x31e(%rdx), %esi
    00000876: 	leal	(%rsi,%rsi,4), %esi
    00000879: 	addl	%eax, %esi
    0000087b: 	jmp	.Ltmp3904 # Offset: 2171
    0000087d: 	nopl	(%rax) # Size: 3
.Ltmp3900:
    00000880: 	movq	0x30(%rsp), %rbp
    00000885: 	movswl	0x78(%rsp), %eax
    0000088a: 	movl	$0x320, %esi
    0000088f: 	jmp	.Ltmp3905 # Offset: 2191
    00000894: 	nopl	(%rax) # Size: 4
.Ltmp3910:
    00000898: 	leal	-0x2(%r9), %r11d
    0000089c: 	movslq	%r11d, %r11
    0000089f: 	movswl	0xd0(%rsp,%r11,2), %r11d
    000008a8: 	addl	%r14d, %r11d
    000008ab: 	cmpl	$0x18f, %edx
    000008b1: 	jne	.Ltmp3906 # Offset: 2225
    000008b7: 	addl	%eax, %r11d
.Ltmp3914:
    000008ba: 	leal	(%r10,%r8), %eax
    000008be: 	leal	(%r10,%rdx), %r14d
    000008c2: 	cltq
    000008c4: 	addq	%r14, %r14
    000008c7: 	movswl	0xd0(%rsp,%rax,2), %eax
    000008cf: 	leal	(%rax,%rax,4), %eax
    000008d2: 	addl	%r11d, %eax
    000008d5: 	leal	(%rax,%rcx,8), %eax
    000008d8: 	cmpl	$0x18f, %r15d
    000008df: 	jne	.Ltmp3907 # Offset: 2271
    000008e5: 	leal	(%rcx,%rcx,4), %ecx
    000008e8: 	addl	%ecx, %eax
.Ltmp3913:
    000008ea: 	leal	(%rsi,%r8), %ecx
    000008ee: 	movslq	%ecx, %rcx
    000008f1: 	movswl	0xd0(%rsp,%rcx,2), %r11d
    000008fa: 	addl	%eax, %r11d
    000008fd: 	leal	(%rsi,%rdx), %eax
    00000900: 	movswl	0xd0(%rsp,%rax,2), %ecx
    00000908: 	leal	(%rcx,%rcx,4), %eax
    0000090b: 	addl	%r11d, %eax
    0000090e: 	cmpl	$0x18f, %r15d
    00000915: 	jne	.Ltmp3908 # Offset: 2325
    0000091b: 	addl	%eax, %ecx
    0000091d: 	leal	0x2f(%rcx), %eax
    00000920: 	addl	$0x10, %ecx
    00000923: 	cmovnsl	%ecx, %eax
    00000926: 	addl	$0x190, %esi
    0000092c: 	addq	$0x320, %rbp
    00000933: 	sarl	$0x5, %eax
    00000936: 	movw	%ax, 0x4e2d0(%rsp,%r14)
    0000093f: 	cmpl	$0x27100, %esi
    00000945: 	je	.Ltmp3909 # Offset: 2373
    0000094b: 	movswl	(%rbp), %eax
.Ltmp3905:
    0000094f: 	leal	-0x190(%rsi), %r11d
    00000956: 	movswl	0x320(%rbp), %ecx
    0000095d: 	movl	$0x1, %edi
    00000962: 	leal	-0x31f(%rsi), %r9d
    00000969: 	leaq	(%r11,%r11), %rbx
    0000096d: 	movq	%r11, %r10
    00000970: 	movl	$0xffffffff, %r8d
    00000976: 	xorl	%edx, %edx
    00000978: 	movq	%rbx, 0x8(%rsp)
    0000097d: 	leal	(%rcx,%rcx,4), %r13d
    00000981: 	movswl	%ax, %r12d
    00000985: 	movl	%esi, %ebx
    00000987: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3911:
    00000990: 	leal	(%rax,%rax,4), %r14d
    00000994: 	movl	%edx, %r15d
    00000997: 	testq	%rdx, %rdx
    0000099a: 	jne	.Ltmp3910 # Offset: 2458
    000009a0: 	movslq	%r9d, %rax
    000009a3: 	addl	%r12d, %r14d
    000009a6: 	movswl	0xd0(%rsp,%rax,2), %eax
    000009ae: 	addl	%r14d, %eax
    000009b1: 	movq	0x8(%rsp), %r14
    000009b6: 	addl	%r13d, %eax
    000009b9: 	leal	(%rax,%rcx,8), %r11d
    000009bd: 	leal	(%r10,%rdi), %eax
    000009c1: 	movswl	0xd0(%rsp,%rax,2), %ecx
    000009c9: 	leal	(%rcx,%rcx,4), %eax
    000009cc: 	addl	%r11d, %eax
    000009cf: 	movswl	0x640(%rbp), %r11d
    000009d7: 	addl	%eax, %r11d
    000009da: 	movswl	0xd0(%rsp,%rbx,2), %eax
    000009e2: 	leal	(%rax,%rax,4), %eax
    000009e5: 	addl	%r11d, %eax
.Ltmp3912:
    000009e8: 	leal	(%rsi,%rdi), %r11d
    000009ec: 	movslq	%r11d, %r11
    000009ef: 	movswl	0xd0(%rsp,%r11,2), %r11d
    000009f8: 	addl	%r11d, %eax
    000009fb: 	leal	0x2f(%rax), %r11d
    000009ff: 	addl	$0x10, %eax
    00000a02: 	cmovnsl	%eax, %r11d
    00000a06: 	movswl	0x2(%rbp,%rdx,2), %eax
    00000a0b: 	addl	$0x1, %edi
    00000a0e: 	addq	$0x1, %rdx
    00000a12: 	addl	$0x1, %r9d
    00000a16: 	addl	$0x1, %r8d
    00000a1a: 	sarl	$0x5, %r11d
    00000a1e: 	movw	%r11w, 0x4e2d0(%rsp,%r14)
    00000a27: 	jmp	.Ltmp3911 # Offset: 2599
    00000a2c: 	nopl	(%rax) # Size: 4
.Ltmp3908:
    00000a30: 	leal	(%r10,%rdi), %ecx
    00000a34: 	movswl	0xd0(%rsp,%rcx,2), %ecx
    00000a3c: 	jmp	.Ltmp3912 # Offset: 2620
    00000a3e: 	nop # Size: 2
.Ltmp3907:
    00000a40: 	leal	(%r10,%rdi), %ecx
    00000a44: 	movswl	0xd0(%rsp,%rcx,2), %ecx
    00000a4c: 	leal	(%rcx,%rcx,4), %ecx
    00000a4f: 	addl	%ecx, %eax
    00000a51: 	jmp	.Ltmp3913 # Offset: 2641
    00000a56: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3906:
    00000a60: 	movslq	%r9d, %rax
    00000a63: 	movswl	0xd0(%rsp,%rax,2), %eax
    00000a6b: 	addl	%eax, %r11d
    00000a6e: 	jmp	.Ltmp3914 # Offset: 2670
    00000a73: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3909:
    00000a78: 	movq	0x28(%rsp), %rax
    00000a7d: 	movl	$0x4dee0, %ecx
    00000a82: 	xorl	%edx, %edx
.Ltmp3983:
    00000a84: 	movswl	0x2(%rax), %edi
    00000a88: 	leal	(%rdi,%rdi,4), %esi
    00000a8b: 	testl	%edx, %edx
    00000a8d: 	je	.Ltmp3915 # Offset: 2701
.Ltmp3982:
    00000a93: 	movswl	(%rax), %r8d
    00000a97: 	addl	%r8d, %esi
    00000a9a: 	cmpl	$0x18f, %edx
    00000aa0: 	jne	.Ltmp3916 # Offset: 2720
    00000aa6: 	movswl	0x320(%rax), %edx
    00000aad: 	addl	%edi, %esi
    00000aaf: 	movswl	0x322(%rax), %eax
    00000ab6: 	leal	(%rdx,%rdx,4), %edi
    00000ab9: 	addl	%edi, %esi
    00000abb: 	leal	(%rax,%rax,4), %edi
    00000abe: 	leal	(%rsi,%rax,8), %esi
    00000ac1: 	leal	(%rsi,%rdi,2), %esi
    00000ac4: 	addl	%esi, %edx
    00000ac6: 	addl	%edx, %eax
    00000ac8: 	leal	0x2f(%rax), %edx
    00000acb: 	addl	$0x10, %eax
    00000ace: 	cmovsl	%edx, %eax
    00000ad1: 	addl	$0x1, 0x14(%rsp)
    00000ad6: 	sarl	$0x5, %eax
    00000ad9: 	movw	%ax, 0x4e2d0(%rsp,%rcx)
    00000ae1: 	movl	0x14(%rsp), %eax
    00000ae5: 	cmpl	0x1c(%rsp), %eax
    00000ae9: 	jne	.Ltmp3917 # Offset: 2793
.Ltmp3897:
    00000aef: 	movq	0x38(%rsp), %rax
    00000af4: 	leaq	0x4e902(%rsp), %rcx
    00000afc: 	leaq	0x4e5f2(%rsp), %rsi
    00000b04: 	movq	%rcx, 0x68(%rsp)
    00000b09: 	leaq	0x4e1f2(%rax), %r8
    00000b10: 	movq	%rsi, 0x60(%rsp)
    00000b15: 	xorl	%eax, %eax
    00000b17: 	movq	%r8, 0x58(%rsp)
    00000b1c: 	nopl	(%rax) # Size: 4
.Ltmp3919:
    00000b20: 	movq	%rsi, %rdx
    00000b23: 	pxor	%xmm0, %xmm0
    00000b27: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3918:
    00000b30: 	movdqu	(%rdx), %xmm2
    00000b34: 	addq	$0x10, %rdx
    00000b38: 	paddw	%xmm2, %xmm0
    00000b3c: 	cmpq	%rdx, %rcx
    00000b3f: 	jne	.Ltmp3918 # Offset: 2879
    00000b41: 	movdqa	%xmm0, %xmm1
    00000b45: 	addq	$0x320, %rcx
    00000b4c: 	addq	$0x320, %rsi
    00000b53: 	psrldq	$0x8, %xmm1
    00000b58: 	paddw	%xmm1, %xmm0
    00000b5c: 	movdqa	%xmm0, %xmm1
    00000b60: 	psrldq	$0x4, %xmm1
    00000b65: 	paddw	%xmm1, %xmm0
    00000b69: 	movq	-0x320(%rcx), %xmm1
    00000b71: 	pextrw	$0x0, %xmm1, %edi
    00000b76: 	pextrw	$0x1, %xmm1, %edx
    00000b7b: 	addl	%edi, %edx
    00000b7d: 	pextrw	$0x2, %xmm1, %edi
    00000b82: 	addl	%edi, %edx
    00000b84: 	pextrw	$0x3, %xmm1, %edi
    00000b89: 	movdqa	%xmm0, %xmm1
    00000b8d: 	psrldq	$0x2, %xmm1
    00000b92: 	addl	%edi, %edx
    00000b94: 	paddw	%xmm1, %xmm0
    00000b98: 	pextrw	$0x0, %xmm0, %edi
    00000b9d: 	addl	%edi, %eax
    00000b9f: 	addl	%edx, %eax
    00000ba1: 	addw	-0x318(%rcx), %ax
    00000ba8: 	addw	-0x316(%rcx), %ax
    00000baf: 	cmpq	%rcx, %r8
    00000bb2: 	jne	.Ltmp3919 # Offset: 2994
    00000bb8: 	cvttsd2si	init_value(%rip), %edx
    00000bc0: 	imulw	$0x6ac4, %dx, %dx
    00000bc5: 	cmpw	%ax, %dx
    00000bc8: 	je	.Ltmp3920 # Offset: 3016
    00000bca: 	movq	0xb0(%rsp), %rdx
    00000bd2: 	leaq	DATAat0x381c8(%rip), %rsi
    00000bd9: 	movl	$0x1, %edi
    00000bde: 	xorl	%eax, %eax
    00000be0: 	callq	__printf_chk@PLT # Offset: 3040
.Ltmp3920:
    00000be5: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000bec: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000bf3: 	subq	$0x20, %rax
    00000bf7: 	cmpq	%rax, %rbx
    00000bfa: 	je	.Ltmp3921 # Offset: 3066
    00000c00: 	leaq	0x10(%rbx), %rdi
    00000c04: 	movq	0xb8(%rsp), %r12
    00000c0c: 	movq	%rdi, (%rbx)
    00000c0f: 	movq	0xb0(%rsp), %rbp
    00000c17: 	movq	%rbp, %rax
    00000c1a: 	addq	%r12, %rax
    00000c1d: 	je	.Ltmp3922 # Offset: 3101
    00000c1f: 	testq	%rbp, %rbp
    00000c22: 	je	.Ltmp3923 # Offset: 3106
.Ltmp3922:
    00000c28: 	movq	%r12, 0x88(%rsp)
    00000c30: 	cmpq	$0xf, %r12
    00000c34: 	ja	.Ltmp3924 # Offset: 3124
    00000c3a: 	cmpq	$0x1, %r12
    00000c3e: 	jne	.Ltmp3925 # Offset: 3134
    00000c44: 	movzbl	(%rbp), %eax
    00000c48: 	movb	%al, 0x10(%rbx)
.Ltmp4000:
    00000c4b: 	movq	%r12, 0x8(%rbx)
    00000c4f: 	movb	$0x0, (%rdi,%r12)
    00000c54: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000c5b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000c62: 	addq	$0x20, %rax
    00000c66: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000c6d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000c74: 	je	.Ltmp3926 # Offset: 3188
.Ltmp3997:
    00000c7a: 	movq	-0x20(%rax), %rbp
    00000c7e: 	callq	clock@PLT # Offset: 3198
    00000c83: 	pxor	%xmm0, %xmm0
    00000c87: 	movq	%rax, end_time(%rip)
    00000c8e: 	movq	%rbp, %rdi
    00000c91: 	subq	start_time(%rip), %rax
    00000c98: 	cvtsi2sd	%rax, %xmm0
    00000c9d: 	divsd	DATAat0x38a48(%rip), %xmm0
    00000ca5: 	callq	_Z13record_resultdPKc # Offset: 3237
    00000caa: 	movq	0xb0(%rsp), %rdi
    00000cb2: 	cmpq	0x48(%rsp), %rdi
    00000cb7: 	je	.Ltmp3927 # Offset: 3255
    00000cb9: 	movq	0xc0(%rsp), %rax
    00000cc1: 	leaq	0x1(%rax), %rsi
    00000cc5: 	callq	_ZdlPvm@PLT # Offset: 3269
.Ltmp3927:
    00000cca: 	movq	0x48(%rsp), %rax
    00000ccf: 	movq	0x90(%rsp), %rbp
    00000cd7: 	movq	0x98(%rsp), %r12
    00000cdf: 	movq	%rax, 0xb0(%rsp)
    00000ce7: 	movq	%rbp, %rax
    00000cea: 	addq	%r12, %rax
    00000ced: 	je	.Ltmp3928 # Offset: 3309
    00000cef: 	testq	%rbp, %rbp
    00000cf2: 	je	.Ltmp3929 # Offset: 3314
.Ltmp3928:
    00000cf8: 	movq	%r12, 0x88(%rsp)
    00000d00: 	cmpq	$0xf, %r12
    00000d04: 	ja	.Ltmp3930 # Offset: 3332
    00000d0a: 	cmpq	$0x1, %r12
    00000d0e: 	jne	.Ltmp3931 # Offset: 3342
    00000d14: 	movzbl	(%rbp), %eax
    00000d18: 	movb	%al, 0xc0(%rsp)
    00000d1f: 	movq	0x48(%rsp), %rax
.Ltmp3995:
    00000d24: 	movq	%r12, 0xb8(%rsp)
    00000d2c: 	movb	$0x0, (%rax,%r12)
    00000d31: 	movabsq	$0x3fffffffffffffff, %rax
    00000d3b: 	subq	0xb8(%rsp), %rax
    00000d43: 	cmpq	$0x11, %rax
    00000d47: 	jbe	.Ltmp3932 # Offset: 3399
    00000d4d: 	movq	0x50(%rsp), %rdi
    00000d52: 	movl	$0x12, %edx
    00000d57: 	leaq	DATAat0x387d4(%rip), %rsi
    00000d5e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3422
    00000d63: 	callq	clock@PLT # Offset: 3427
    00000d68: 	movq	%rax, start_time(%rip)
    00000d6f: 	movl	iterations(%rip), %eax
    00000d75: 	movl	%eax, 0x1c(%rsp)
    00000d79: 	testl	%eax, %eax
    00000d7b: 	jle	.Ltmp3933 # Offset: 3451
    00000d81: 	movswl	0xd0(%rsp), %eax
    00000d89: 	movl	$0x0, 0x18(%rsp)
    00000d91: 	leal	(%rax,%rax,2), %edx
    00000d94: 	movw	%ax, 0x78(%rsp)
    00000d99: 	movswl	0xd2(%rsp), %eax
    00000da1: 	leal	(%rax,%rdx,2), %eax
    00000da4: 	movswl	0x3ee(%rsp), %edx
    00000dac: 	movl	%eax, 0x20(%rsp)
    00000db0: 	movswl	0x3ec(%rsp), %eax
    00000db8: 	addl	%edx, %eax
    00000dba: 	leal	(%rdx,%rdx,4), %edx
    00000dbd: 	addl	%edx, %eax
    00000dbf: 	movl	%eax, 0x28(%rsp)
    00000dc3: 	movq	0x38(%rsp), %rax
    00000dc8: 	addq	$0x31e, %rax
    00000dce: 	movq	%rax, 0x40(%rsp)
    00000dd3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3951:
    00000dd8: 	movq	0x38(%rsp), %rax
    00000ddd: 	movq	0x40(%rsp), %rsi
    00000de2: 	xorl	%r15d, %r15d
    00000de5: 	movq	0x30(%rsp), %rdx
    00000dea: 	movswl	0x78(%rsp), %r8d
    00000df0: 	movq	%rax, 0x8(%rsp)
    00000df5: 	xorl	%eax, %eax
    00000df7: 	testl	%eax, %eax
    00000df9: 	je	.Ltmp3934 # Offset: 3577
    00000dff: 	nop # Size: 1
.Ltmp3945:
    00000e00: 	movswl	-0x320(%rdx), %ecx
    00000e07: 	leal	(%rcx,%rcx,2), %edi
    00000e0a: 	movswl	-0x31e(%rdx), %ecx
    00000e11: 	leal	(%rcx,%rdi,2), %ecx
    00000e14: 	leal	(%r8,%r8,4), %edi
    00000e18: 	addl	%edi, %ecx
    00000e1a: 	leal	(%rcx,%r8,8), %r10d
    00000e1e: 	movswl	0x2(%rdx), %ecx
    00000e22: 	leal	(%rcx,%rcx,4), %r9d
    00000e26: 	addl	%r10d, %r9d
    00000e29: 	cmpl	$0x18f, %eax
    00000e2e: 	jne	.Ltmp3935 # Offset: 3630
    00000e34: 	addl	%r9d, %r8d
    00000e37: 	addl	%r8d, %edi
    00000e3a: 	addl	%ecx, %edi
.Ltmp3946:
    00000e3c: 	leal	0x2f(%rdi), %r8d
    00000e40: 	addl	$0x10, %edi
    00000e43: 	movl	%r15d, 0x14(%rsp)
    00000e48: 	movswl	(%rdx), %r9d
    00000e4c: 	cmovsl	%r8d, %edi
    00000e50: 	leal	0x192(%r15), %r11d
    00000e57: 	leal	-0x18f(%r15), %r8d
    00000e5e: 	leal	-0x18e(%r15), %ebp
    00000e65: 	sarl	$0x5, %edi
    00000e68: 	movw	%di, -0x31e(%rsi)
    00000e6f: 	movl	$0x3, %edi
.Ltmp3948:
    00000e74: 	testl	%eax, %eax
    00000e76: 	je	.Ltmp3936 # Offset: 3702
.Ltmp3939:
    00000e7c: 	leal	-0x1(%r8), %r10d
    00000e80: 	movslq	%r8d, %r13
    00000e83: 	movslq	%ebp, %r14
    00000e86: 	movl	%r9d, %r12d
    00000e89: 	movslq	%r10d, %r10
    00000e8c: 	leal	(%r9,%r9,4), %r9d
    00000e90: 	movl	%ecx, %r15d
    00000e93: 	movswl	0xd0(%rsp,%r10,2), %ebx
    00000e9c: 	movswl	0xd0(%rsp,%r13,2), %r10d
    00000ea5: 	leal	(%r10,%r10,4), %r10d
    00000ea9: 	addl	%r10d, %ebx
    00000eac: 	movswl	0xd0(%rsp,%r14,2), %r10d
    00000eb5: 	addl	%ebx, %r10d
    00000eb8: 	addl	%r10d, %r9d
    00000ebb: 	leal	(%r9,%rcx,8), %r10d
    00000ebf: 	movswl	-0x2(%rdx,%rdi,2), %r9d
    00000ec5: 	leal	(%r9,%r9,4), %ebx
    00000ec9: 	addl	%ebx, %r10d
    00000ecc: 	cmpl	$0x18f, %eax
    00000ed1: 	jne	.Ltmp3937 # Offset: 3793
    00000ed7: 	addl	%r12d, %r10d
    00000eda: 	leal	(%rcx,%rcx,4), %r12d
    00000ede: 	addl	%r12d, %r10d
    00000ee1: 	addl	%r9d, %r10d
    00000ee4: 	leal	0x2f(%r10), %r12d
    00000ee8: 	addl	$0x10, %r10d
    00000eec: 	cmovnsl	%r10d, %r12d
    00000ef0: 	movq	0x8(%rsp), %r10
    00000ef5: 	sarl	$0x5, %r12d
    00000ef9: 	movw	%r12w, -0x4(%r10,%rdi,2)
    00000eff: 	movslq	%edi, %r12
.Ltmp3984:
    00000f02: 	movswl	0xd0(%rsp,%r14,2), %r10d
    00000f0b: 	addl	$0x2, %r8d
    00000f0f: 	leal	(%rcx,%rcx,4), %ecx
    00000f12: 	movslq	%r11d, %r14
    00000f15: 	movswl	0xd0(%rsp,%r13,2), %r13d
    00000f1e: 	leal	(%r10,%r10,4), %r10d
    00000f22: 	addl	%r13d, %r10d
    00000f25: 	movslq	%r8d, %r13
    00000f28: 	movswl	0xd0(%rsp,%r13,2), %r13d
    00000f31: 	addl	%r10d, %r13d
    00000f34: 	addl	%r13d, %ecx
    00000f37: 	leal	(%rcx,%r9,8), %r13d
    00000f3b: 	movswl	(%rdx,%rdi,2), %ecx
    00000f3f: 	leal	(%rcx,%rcx,4), %r10d
    00000f43: 	addl	%r13d, %r10d
    00000f46: 	leal	-0x1(%r11), %r13d
    00000f4a: 	cmpl	$0x18f, %eax
    00000f4f: 	jne	.Ltmp3938 # Offset: 3919
    00000f55: 	addl	%r10d, %r15d
    00000f58: 	addl	%r15d, %ebx
    00000f5b: 	addl	%ecx, %ebx
    00000f5d: 	leal	0x2f(%rbx), %r10d
    00000f61: 	addl	$0x10, %ebx
    00000f64: 	cmovnsl	%ebx, %r10d
    00000f68: 	movq	0x8(%rsp), %rbx
    00000f6d: 	addl	$0x2, %r11d
    00000f71: 	addl	$0x2, %ebp
    00000f74: 	sarl	$0x5, %r10d
    00000f78: 	movw	%r10w, -0x2(%rbx,%rdi,2)
    00000f7e: 	addq	$0x2, %rdi
    00000f82: 	cmpq	$0x18f, %rdi
    00000f89: 	jne	.Ltmp3939 # Offset: 3977
.Ltmp3949:
    00000f8f: 	movl	0x14(%rsp), %r15d
    00000f94: 	movq	0x30(%rsp), %rbx
    00000f99: 	leaq	-0x4(%rsi), %r9
    00000f9d: 	leaq	0x31a(%rdx), %r8
    00000fa4: 	leal	0x31c(%r15), %edi
    00000fab: 	leaq	(%rbx,%r12,2), %r11
    00000faf: 	leal	-0x3(%r15), %ecx
    00000fb3: 	jmp	.Ltmp3940 # Offset: 4019
    00000fb8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3943:
    00000fc0: 	leal	-0x1(%rcx), %r10d
    00000fc4: 	movslq	%ecx, %rbx
    00000fc7: 	addl	$0x1, %ecx
    00000fca: 	movswl	(%r8), %r12d
    00000fce: 	movswl	0xd0(%rsp,%rbx,2), %ebx
    00000fd6: 	movslq	%r10d, %r10
    00000fd9: 	movswl	0xd0(%rsp,%r10,2), %r10d
    00000fe2: 	leal	(%rbx,%rbx,4), %ebx
    00000fe5: 	addl	%ebx, %r10d
    00000fe8: 	movslq	%ecx, %rbx
    00000feb: 	movswl	0xd0(%rsp,%rbx,2), %ebp
    00000ff3: 	movswl	-0x2(%r8), %ebx
    00000ff8: 	addl	%r10d, %ebp
    00000ffb: 	leal	(%rbx,%rbx,4), %r10d
    00000fff: 	addl	%ebp, %r10d
    00001002: 	movswl	0x2(%r8), %ebp
    00001007: 	leal	(%r10,%r12,8), %r13d
    0000100b: 	leal	(%rbp,%rbp,4), %r10d
    00001010: 	addl	%r13d, %r10d
    00001013: 	cmpl	$0x18f, %eax
    00001018: 	jne	.Ltmp3941 # Offset: 4120
    0000101e: 	addl	%r10d, %ebx
    00001021: 	leal	(%r12,%r12,4), %r10d
    00001025: 	addl	%ebx, %r10d
    00001028: 	addl	%ebp, %r10d
    0000102b: 	leal	0x2f(%r10), %ebx
    0000102f: 	addl	$0x10, %r10d
    00001033: 	cmovsl	%ebx, %r10d
    00001037: 	addq	$0x2, %r9
    0000103b: 	addq	$0x2, %r8
    0000103f: 	addq	$0x2, %r11
    00001043: 	sarl	$0x5, %r10d
    00001047: 	movw	%r10w, -0x2(%r9)
    0000104c: 	leal	0x1(%rdi), %r10d
    00001050: 	cmpq	%rsi, %r9
    00001053: 	je	.Ltmp3942 # Offset: 4179
.Ltmp3944:
    00001059: 	movl	%r10d, %edi
.Ltmp3940:
    0000105c: 	testl	%eax, %eax
    0000105e: 	jne	.Ltmp3943 # Offset: 4190
    00001064: 	movswl	(%r11), %r10d
    00001068: 	movswl	-0x2(%r11), %ebx
    0000106d: 	addl	$0x1, %ecx
    00001070: 	leal	(%r10,%r10,4), %r10d
    00001074: 	addl	%ebx, %r10d
    00001077: 	movswl	0x2(%r11), %ebx
    0000107c: 	addl	%r10d, %ebx
    0000107f: 	movswl	-0x2(%r8), %r10d
    00001084: 	leal	(%r10,%r10,4), %r10d
    00001088: 	addl	%ebx, %r10d
    0000108b: 	movswl	(%r8), %ebx
    0000108f: 	leal	(%r10,%rbx,8), %ebx
    00001093: 	movswl	0x2(%r8), %r10d
    00001098: 	leal	(%r10,%r10,4), %r10d
    0000109c: 	addl	%ebx, %r10d
.Ltmp3941:
    0000109f: 	movslq	%edi, %rbx
    000010a2: 	movswl	0xd0(%rsp,%rbx,2), %ebp
    000010aa: 	addl	%r10d, %ebp
    000010ad: 	leal	0x1(%rdi), %r10d
    000010b1: 	addl	$0x2, %edi
    000010b4: 	movslq	%r10d, %rbx
    000010b7: 	movslq	%edi, %rdi
    000010ba: 	movswl	0xd0(%rsp,%rbx,2), %ebx
    000010c2: 	movswl	0xd0(%rsp,%rdi,2), %edi
    000010ca: 	leal	(%rbx,%rbx,4), %ebx
    000010cd: 	addl	%ebp, %ebx
    000010cf: 	addl	%ebx, %edi
    000010d1: 	leal	0x2f(%rdi), %ebx
    000010d4: 	addl	$0x10, %edi
    000010d7: 	cmovsl	%ebx, %edi
    000010da: 	addq	$0x2, %r9
    000010de: 	addq	$0x2, %r8
    000010e2: 	addq	$0x2, %r11
    000010e6: 	sarl	$0x5, %edi
    000010e9: 	movw	%di, -0x2(%r9)
    000010ee: 	cmpq	%r9, %rsi
    000010f1: 	jne	.Ltmp3944 # Offset: 4337
    000010f7: 	testl	%eax, %eax
    000010f9: 	jne	.Ltmp3942 # Offset: 4345
    000010ff: 	movswl	0x31c(%rdx), %ecx
    00001106: 	addl	$0x190, %r15d
    0000110d: 	addq	$0x320, 0x8(%rsp)
    00001116: 	addq	$0x320, %rdx
    0000111d: 	leal	(%rcx,%rcx,4), %edi
    00001120: 	movswl	-0x2(%rdx), %ecx
    00001124: 	addl	0x28(%rsp), %edi
    00001128: 	leal	(%rdi,%rcx,8), %edi
    0000112b: 	leal	(%rcx,%rcx,4), %ecx
    0000112e: 	addl	%edi, %ecx
.Ltmp3950:
    00001130: 	movswl	0x31c(%rdx), %r8d
    00001138: 	addl	$0x1, %eax
    0000113b: 	addl	%ecx, %r8d
    0000113e: 	movswl	0x31e(%rdx), %ecx
    00001145: 	leal	(%rcx,%rcx,4), %edi
    00001148: 	addl	%r8d, %edi
    0000114b: 	movswl	(%rdx), %r8d
    0000114f: 	addl	%edi, %ecx
    00001151: 	leal	0x2f(%rcx), %edi
    00001154: 	addl	$0x10, %ecx
    00001157: 	cmovsl	%edi, %ecx
    0000115a: 	addq	$0x320, %rsi
    00001161: 	sarl	$0x5, %ecx
    00001164: 	movw	%cx, -0x320(%rsi)
    0000116b: 	testl	%eax, %eax
    0000116d: 	jne	.Ltmp3945 # Offset: 4461
.Ltmp3934:
    00001173: 	leal	(%r8,%r8,4), %ecx
    00001177: 	addl	0x20(%rsp), %ecx
    0000117b: 	leal	(%rcx,%r8,8), %edi
    0000117f: 	movswl	0x2(%rdx), %ecx
    00001183: 	leal	(%rcx,%rcx,4), %r9d
    00001187: 	addl	%edi, %r9d
.Ltmp3935:
    0000118a: 	movswl	0x320(%rdx), %edi
    00001191: 	addl	%edi, %r9d
    00001194: 	leal	(%rdi,%rdi,4), %r8d
    00001198: 	movswl	0x322(%rdx), %edi
    0000119f: 	addl	%r9d, %r8d
    000011a2: 	addl	%r8d, %edi
    000011a5: 	jmp	.Ltmp3946 # Offset: 4517
    000011aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3936:
    000011b0: 	movq	0x30(%rsp), %r15
    000011b5: 	leal	(%r9,%r9,4), %r9d
    000011b9: 	movswl	-0x4(%r15,%rdi,2), %r10d
    000011bf: 	leal	(%r10,%r10,4), %ebx
    000011c3: 	movswl	-0x6(%r15,%rdi,2), %r10d
    000011c9: 	addl	%r10d, %ebx
    000011cc: 	movswl	-0x2(%r15,%rdi,2), %r10d
    000011d2: 	movl	%ecx, %r15d
    000011d5: 	addl	%ebx, %r10d
    000011d8: 	addl	%r10d, %r9d
    000011db: 	leal	(%r9,%rcx,8), %r10d
    000011df: 	movswl	-0x2(%rdx,%rdi,2), %r9d
    000011e5: 	leal	(%r9,%r9,4), %ebx
    000011e9: 	addl	%ebx, %r10d
.Ltmp3937:
    000011ec: 	leal	-0x2(%r11), %r12d
    000011f0: 	leal	-0x1(%r11), %r13d
    000011f4: 	movslq	%r11d, %r14
    000011f7: 	movslq	%r12d, %r12
    000011fa: 	movswl	0xd0(%rsp,%r12,2), %r12d
    00001203: 	addl	%r10d, %r12d
    00001206: 	movslq	%r13d, %r10
    00001209: 	movswl	0xd0(%rsp,%r10,2), %r10d
    00001212: 	leal	(%r10,%r10,4), %r10d
    00001216: 	addl	%r12d, %r10d
    00001219: 	movswl	0xd0(%rsp,%r14,2), %r12d
    00001222: 	addl	%r12d, %r10d
    00001225: 	leal	0x2f(%r10), %r12d
    00001229: 	addl	$0x10, %r10d
    0000122d: 	cmovnsl	%r10d, %r12d
    00001231: 	movq	0x8(%rsp), %r10
    00001236: 	sarl	$0x5, %r12d
    0000123a: 	movw	%r12w, -0x4(%r10,%rdi,2)
    00001240: 	movslq	%edi, %r12
    00001243: 	testl	%eax, %eax
    00001245: 	jne	.Ltmp3947 # Offset: 4677
    0000124b: 	movq	0x30(%rsp), %r15
    00001250: 	leal	(%rcx,%rcx,4), %ecx
    00001253: 	addl	$0x2, %r8d
    00001257: 	movswl	-0x2(%r15,%rdi,2), %r10d
    0000125d: 	leal	(%r10,%r10,4), %ebx
    00001261: 	movswl	-0x4(%r15,%rdi,2), %r10d
    00001267: 	addl	%ebx, %r10d
    0000126a: 	movswl	(%r15,%rdi,2), %ebx
    0000126f: 	addl	%ebx, %r10d
    00001272: 	addl	%r10d, %ecx
    00001275: 	leal	(%rcx,%r9,8), %ebx
    00001279: 	movswl	(%rdx,%rdi,2), %ecx
    0000127d: 	leal	(%rcx,%rcx,4), %r10d
    00001281: 	addl	%ebx, %r10d
.Ltmp3938:
    00001284: 	movslq	%r13d, %r13
    00001287: 	movq	0x8(%rsp), %r15
    0000128c: 	movswl	0xd0(%rsp,%r13,2), %ebx
    00001295: 	addl	%ebx, %r10d
    00001298: 	movswl	0xd0(%rsp,%r14,2), %ebx
    000012a1: 	leal	(%rbx,%rbx,4), %ebx
    000012a4: 	addl	%r10d, %ebx
    000012a7: 	leal	0x1(%r11), %r10d
    000012ab: 	movslq	%r10d, %r10
    000012ae: 	movswl	0xd0(%rsp,%r10,2), %r10d
    000012b7: 	addl	%ebx, %r10d
    000012ba: 	leal	0x2f(%r10), %ebx
    000012be: 	addl	$0x10, %r10d
    000012c2: 	cmovnsl	%r10d, %ebx
    000012c6: 	addl	$0x2, %r11d
    000012ca: 	addl	$0x2, %ebp
    000012cd: 	sarl	$0x5, %ebx
    000012d0: 	movw	%bx, -0x2(%r15,%rdi,2)
    000012d6: 	addq	$0x2, %rdi
    000012da: 	cmpq	$0x18f, %rdi
    000012e1: 	jne	.Ltmp3948 # Offset: 4833
    000012e7: 	jmp	.Ltmp3949 # Offset: 4839
    000012ec: 	nopl	(%rax) # Size: 4
.Ltmp3942:
    000012f0: 	movswl	-0x2(%rdx), %ecx
    000012f4: 	movswl	-0x4(%rdx), %edi
    000012f8: 	addl	$0x190, %r15d
    000012ff: 	addq	$0x320, %rdx
    00001306: 	addq	$0x320, 0x8(%rsp)
    0000130f: 	leal	(%rcx,%rcx,4), %r8d
    00001313: 	addl	%r8d, %edi
    00001316: 	movswl	-0x4(%rdx), %r8d
    0000131b: 	addl	%edi, %ecx
    0000131d: 	leal	(%r8,%r8,4), %edi
    00001321: 	addl	%edi, %ecx
    00001323: 	movswl	-0x2(%rdx), %edi
    00001327: 	leal	(%rcx,%rdi,8), %ecx
    0000132a: 	leal	(%rdi,%rdi,4), %r9d
    0000132e: 	addl	%r9d, %ecx
    00001331: 	cmpl	$0x18f, %eax
    00001336: 	jne	.Ltmp3950 # Offset: 4918
    0000133c: 	addl	%ecx, %r8d
    0000133f: 	addl	%r8d, %r9d
    00001342: 	addl	%r9d, %edi
    00001345: 	leal	0x2f(%rdi), %eax
    00001348: 	addl	$0x10, %edi
    0000134b: 	cmovnsl	%edi, %eax
    0000134e: 	addl	$0x1, 0x18(%rsp)
    00001353: 	sarl	$0x5, %eax
    00001356: 	movw	%ax, 0x9c4ce(%rsp)
    0000135e: 	movl	0x18(%rsp), %eax
    00001362: 	cmpl	%eax, 0x1c(%rsp)
    00001366: 	jne	.Ltmp3951 # Offset: 4966
.Ltmp3933:
    0000136c: 	movq	0x58(%rsp), %r8
    00001371: 	movq	0x60(%rsp), %rdi
    00001376: 	xorl	%eax, %eax
    00001378: 	movq	0x68(%rsp), %rcx
    0000137d: 	nopl	(%rax) # Size: 3
.Ltmp3953:
    00001380: 	movq	%rdi, %rdx
    00001383: 	pxor	%xmm0, %xmm0
    00001387: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3952:
    00001390: 	movdqu	(%rdx), %xmm3
    00001394: 	addq	$0x10, %rdx
    00001398: 	paddw	%xmm3, %xmm0
    0000139c: 	cmpq	%rdx, %rcx
    0000139f: 	jne	.Ltmp3952 # Offset: 5023
    000013a1: 	movdqa	%xmm0, %xmm1
    000013a5: 	addq	$0x320, %rcx
    000013ac: 	addq	$0x320, %rdi
    000013b3: 	psrldq	$0x8, %xmm1
    000013b8: 	paddw	%xmm1, %xmm0
    000013bc: 	movdqa	%xmm0, %xmm1
    000013c0: 	psrldq	$0x4, %xmm1
    000013c5: 	paddw	%xmm1, %xmm0
    000013c9: 	movq	-0x320(%rcx), %xmm1
    000013d1: 	pextrw	$0x0, %xmm1, %esi
    000013d6: 	pextrw	$0x1, %xmm1, %edx
    000013db: 	addl	%esi, %edx
    000013dd: 	pextrw	$0x2, %xmm1, %esi
    000013e2: 	addl	%esi, %edx
    000013e4: 	pextrw	$0x3, %xmm1, %esi
    000013e9: 	movdqa	%xmm0, %xmm1
    000013ed: 	psrldq	$0x2, %xmm1
    000013f2: 	addl	%esi, %edx
    000013f4: 	paddw	%xmm1, %xmm0
    000013f8: 	pextrw	$0x0, %xmm0, %esi
    000013fd: 	addl	%esi, %eax
    000013ff: 	addl	%edx, %eax
    00001401: 	addw	-0x318(%rcx), %ax
    00001408: 	addw	-0x316(%rcx), %ax
    0000140f: 	cmpq	%rcx, %r8
    00001412: 	jne	.Ltmp3953 # Offset: 5138
    00001418: 	cvttsd2si	init_value(%rip), %edx
    00001420: 	imulw	$0x6ac4, %dx, %dx
    00001425: 	cmpw	%ax, %dx
    00001428: 	je	.Ltmp3954 # Offset: 5160
    0000142a: 	movq	0xb0(%rsp), %rdx
    00001432: 	leaq	DATAat0x381c8(%rip), %rsi
    00001439: 	movl	$0x1, %edi
    0000143e: 	xorl	%eax, %eax
    00001440: 	callq	__printf_chk@PLT # Offset: 5184
.Ltmp3954:
    00001445: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000144c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00001453: 	subq	$0x20, %rax
    00001457: 	cmpq	%rax, %rbx
    0000145a: 	je	.Ltmp3955 # Offset: 5210
    00001460: 	leaq	0x10(%rbx), %rdi
    00001464: 	movq	0xb8(%rsp), %r12
    0000146c: 	movq	%rdi, (%rbx)
    0000146f: 	movq	0xb0(%rsp), %rbp
    00001477: 	movq	%rbp, %rax
    0000147a: 	addq	%r12, %rax
    0000147d: 	je	.Ltmp3956 # Offset: 5245
    0000147f: 	testq	%rbp, %rbp
    00001482: 	je	.Ltmp3957 # Offset: 5250
.Ltmp3956:
    00001488: 	movq	%r12, 0x88(%rsp)
    00001490: 	cmpq	$0xf, %r12
    00001494: 	ja	.Ltmp3958 # Offset: 5268
    0000149a: 	cmpq	$0x1, %r12
    0000149e: 	jne	.Ltmp3959 # Offset: 5278
    000014a4: 	movzbl	(%rbp), %eax
    000014a8: 	movb	%al, 0x10(%rbx)
.Ltmp4003:
    000014ab: 	movq	%r12, 0x8(%rbx)
    000014af: 	movb	$0x0, (%rdi,%r12)
    000014b4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000014bb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000014c2: 	addq	$0x20, %rax
    000014c6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000014cd: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000014d4: 	je	.Ltmp3960 # Offset: 5332
.Ltmp3998:
    000014da: 	movq	-0x20(%rax), %rbp
    000014de: 	callq	clock@PLT # Offset: 5342
    000014e3: 	pxor	%xmm0, %xmm0
    000014e7: 	movq	%rax, end_time(%rip)
    000014ee: 	movq	%rbp, %rdi
    000014f1: 	subq	start_time(%rip), %rax
    000014f8: 	cvtsi2sd	%rax, %xmm0
    000014fd: 	divsd	DATAat0x38a48(%rip), %xmm0
    00001505: 	callq	_Z13record_resultdPKc # Offset: 5381
    0000150a: 	movq	0xb0(%rsp), %rdi
    00001512: 	cmpq	0x48(%rsp), %rdi
    00001517: 	je	.Ltmp3961 # Offset: 5399
    00001519: 	movq	0xc0(%rsp), %rax
    00001521: 	leaq	0x1(%rax), %rsi
    00001525: 	callq	_ZdlPvm@PLT # Offset: 5413
.Ltmp3961:
    0000152a: 	movq	0x48(%rsp), %rax
    0000152f: 	movq	0x90(%rsp), %rbp
    00001537: 	movq	0x98(%rsp), %r12
    0000153f: 	movq	%rax, 0xb0(%rsp)
    00001547: 	movq	%rbp, %rax
    0000154a: 	addq	%r12, %rax
    0000154d: 	je	.Ltmp3962 # Offset: 5453
    0000154f: 	testq	%rbp, %rbp
    00001552: 	je	.Ltmp3963 # Offset: 5458
.Ltmp3962:
    00001558: 	movq	%r12, 0x88(%rsp)
    00001560: 	cmpq	$0xf, %r12
    00001564: 	ja	.Ltmp3964 # Offset: 5476
    0000156a: 	cmpq	$0x1, %r12
    0000156e: 	jne	.Ltmp3965 # Offset: 5486
    00001574: 	movzbl	(%rbp), %eax
    00001578: 	movb	%al, 0xc0(%rsp)
    0000157f: 	movq	0x48(%rsp), %rax
.Ltmp3993:
    00001584: 	movq	%r12, 0xb8(%rsp)
    0000158c: 	movb	$0x0, (%rax,%r12)
    00001591: 	movabsq	$0x3fffffffffffffff, %rax
    0000159b: 	subq	0xb8(%rsp), %rax
    000015a3: 	cmpq	$0x11, %rax
    000015a7: 	jbe	.Ltmp3966 # Offset: 5543
    000015ad: 	movq	0x50(%rsp), %rdi
    000015b2: 	movl	$0x12, %edx
    000015b7: 	leaq	DATAat0x387e7(%rip), %rsi
    000015be: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5566
    000015c3: 	movq	0x50(%rsp), %r9
    000015c8: 	movq	0x38(%rsp), %rsi
    000015cd: 	movl	$0x190, %ecx
    000015d2: 	movl	$0x190, %r8d
    000015d8: 	movq	0x30(%rsp), %rdi
    000015dd: 	movl	$0x190, %edx
    000015e2: 	callq	_Z15convolution2D_4IsiEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5602
    000015e7: 	movq	0xb0(%rsp), %rdi
    000015ef: 	cmpq	0x48(%rsp), %rdi
    000015f4: 	je	.Ltmp3967 # Offset: 5620
    000015f6: 	movq	0xc0(%rsp), %rax
    000015fe: 	leaq	0x1(%rax), %rsi
    00001602: 	callq	_ZdlPvm@PLT # Offset: 5634
.Ltmp3967:
    00001607: 	movq	0x48(%rsp), %rax
    0000160c: 	movq	0x90(%rsp), %rbp
    00001614: 	movq	0x98(%rsp), %r12
    0000161c: 	movq	%rax, 0xb0(%rsp)
    00001624: 	movq	%rbp, %rax
    00001627: 	addq	%r12, %rax
    0000162a: 	je	.Ltmp3968 # Offset: 5674
    0000162c: 	testq	%rbp, %rbp
    0000162f: 	je	.Ltmp3969 # Offset: 5679
.Ltmp3968:
    00001635: 	movq	%r12, 0x88(%rsp)
    0000163d: 	cmpq	$0xf, %r12
    00001641: 	ja	.Ltmp3970 # Offset: 5697
    00001647: 	cmpq	$0x1, %r12
    0000164b: 	jne	.Ltmp3971 # Offset: 5707
    00001651: 	movzbl	(%rbp), %eax
    00001655: 	movb	%al, 0xc0(%rsp)
    0000165c: 	movq	0x48(%rsp), %rax
.Ltmp3991:
    00001661: 	movq	%r12, 0xb8(%rsp)
    00001669: 	movb	$0x0, (%rax,%r12)
    0000166e: 	movabsq	$0x3fffffffffffffff, %rax
    00001678: 	subq	0xb8(%rsp), %rax
    00001680: 	cmpq	$0x11, %rax
    00001684: 	jbe	.Ltmp3972 # Offset: 5764
    0000168a: 	movq	0x50(%rsp), %rdi
    0000168f: 	movl	$0x12, %edx
    00001694: 	leaq	DATAat0x387fa(%rip), %rsi
    0000169b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5787
    000016a0: 	movq	0x50(%rsp), %r9
    000016a5: 	movq	0x38(%rsp), %rsi
    000016aa: 	movl	$0x190, %ecx
    000016af: 	movl	$0x190, %r8d
    000016b5: 	movq	0x30(%rsp), %rdi
    000016ba: 	movl	$0x190, %edx
    000016bf: 	callq	_Z15convolution2D_5IsiEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5823
    000016c4: 	movq	0xb0(%rsp), %rdi
    000016cc: 	cmpq	0x48(%rsp), %rdi
    000016d1: 	je	.Ltmp3973 # Offset: 5841
    000016d3: 	movq	0xc0(%rsp), %rax
    000016db: 	leaq	0x1(%rax), %rsi
    000016df: 	callq	_ZdlPvm@PLT # Offset: 5855
.Ltmp3973:
    000016e4: 	movq	0x48(%rsp), %rax
    000016e9: 	movq	0x90(%rsp), %rbp
    000016f1: 	movq	0x98(%rsp), %r12
    000016f9: 	movq	%rax, 0xb0(%rsp)
    00001701: 	movq	%rbp, %rax
    00001704: 	addq	%r12, %rax
    00001707: 	je	.Ltmp3974 # Offset: 5895
    00001709: 	testq	%rbp, %rbp
    0000170c: 	je	.Ltmp3975 # Offset: 5900
.Ltmp3974:
    00001712: 	movq	%r12, 0x88(%rsp)
    0000171a: 	cmpq	$0xf, %r12
    0000171e: 	ja	.Ltmp3976 # Offset: 5918
    00001724: 	cmpq	$0x1, %r12
    00001728: 	jne	.Ltmp3977 # Offset: 5928
    0000172e: 	movzbl	(%rbp), %eax
    00001732: 	movb	%al, 0xc0(%rsp)
    00001739: 	movq	0x48(%rsp), %rax
.Ltmp3989:
    0000173e: 	movq	%r12, 0xb8(%rsp)
    00001746: 	movb	$0x0, (%rax,%r12)
    0000174b: 	movabsq	$0x3fffffffffffffff, %rax
    00001755: 	subq	0xb8(%rsp), %rax
    0000175d: 	cmpq	$0x1f, %rax
    00001761: 	jbe	.Ltmp3978 # Offset: 5985
    00001767: 	movq	0x50(%rsp), %rdi
    0000176c: 	movl	$0x20, %edx
    00001771: 	leaq	DATAat0x38810(%rip), %rsi
    00001778: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6008
    0000177d: 	movl	iterations(%rip), %edx
    00001783: 	xorl	%r8d, %r8d
    00001786: 	xorl	%ecx, %ecx
    00001788: 	movl	$0x1f40, %esi
    0000178d: 	movq	0xb0(%rsp), %rdi
    00001795: 	callq	_Z9summarizePKciiii # Offset: 6037
    0000179a: 	movl	0x7c(%rsp), %eax
    0000179e: 	movq	0xb0(%rsp), %rdi
    000017a6: 	movl	%eax, iterations(%rip)
    000017ac: 	cmpq	0x48(%rsp), %rdi
    000017b1: 	je	.Ltmp3979 # Offset: 6065
    000017b3: 	movq	0xc0(%rsp), %rax
    000017bb: 	leaq	0x1(%rax), %rsi
    000017bf: 	callq	_ZdlPvm@PLT # Offset: 6079
.Ltmp3979:
    000017c4: 	movq	0x90(%rsp), %rdi
    000017cc: 	cmpq	0x70(%rsp), %rdi
    000017d1: 	je	.Ltmp3980 # Offset: 6097
    000017d3: 	movq	0xa0(%rsp), %rax
    000017db: 	leaq	0x1(%rax), %rsi
    000017df: 	callq	_ZdlPvm@PLT # Offset: 6111
.Ltmp3980:
    000017e4: 	movq	0x9c4d8(%rsp), %rax
    000017ec: 	subq	%fs:0x28, %rax
    000017f5: 	jne	.Ltmp3981 # Offset: 6133
    000017fb: 	addq	$0x9c4e8, %rsp
    00001802: 	popq	%rbx
    00001803: 	popq	%rbp
    00001804: 	popq	%r12
    00001806: 	popq	%r13
    00001808: 	popq	%r14
    0000180a: 	popq	%r15
    0000180c: 	retq # Offset: 6156
    0000180d: 	nopl	(%rax) # Size: 3
.Ltmp3916:
    00001810: 	movswl	0x320(%rax), %edi
    00001817: 	movswl	0x4(%rax), %r8d
    0000181c: 	addl	%esi, %r8d
    0000181f: 	leal	(%rdi,%rdi,4), %esi
    00001822: 	addl	%r8d, %esi
    00001825: 	movswl	0x322(%rax), %r8d
    0000182d: 	leal	(%rsi,%r8,8), %r10d
    00001831: 	movswl	0x324(%rax), %esi
    00001838: 	leal	(%r8,%r8,4), %r8d
    0000183c: 	leal	(%rsi,%rsi,4), %r9d
    00001840: 	addl	%r10d, %r9d
    00001843: 	addl	%r9d, %edi
    00001846: 	addl	%r8d, %edi
    00001849: 	addl	%edi, %esi
    0000184b: 	leal	0x2f(%rsi), %edi
    0000184e: 	addl	$0x10, %esi
    00001851: 	cmovsl	%edi, %esi
    00001854: 	movq	0x38(%rsp), %rdi
    00001859: 	addq	$0x2, %rax
    0000185d: 	addl	$0x1, %edx
    00001860: 	sarl	$0x5, %esi
    00001863: 	movw	%si, (%rdi,%rcx)
    00001867: 	movswl	0x2(%rax), %edi
    0000186b: 	addq	$0x2, %rcx
    0000186f: 	leal	(%rdi,%rdi,4), %esi
    00001872: 	testl	%edx, %edx
    00001874: 	jne	.Ltmp3982 # Offset: 6260
.Ltmp3915:
    0000187a: 	movswl	0x4(%rax), %edx
    0000187e: 	movswl	0x322(%rax), %edi
    00001885: 	addl	0x18(%rsp), %esi
    00001889: 	addl	%esi, %edx
    0000188b: 	addl	0x20(%rsp), %edx
    0000188f: 	leal	(%rdx,%rdi,8), %r8d
    00001893: 	movswl	0x324(%rax), %edx
    0000189a: 	leal	(%rdx,%rdx,4), %esi
    0000189d: 	addl	%r8d, %esi
    000018a0: 	addl	%edi, %esi
    000018a2: 	leal	(%rdi,%rdi,4), %edi
    000018a5: 	addl	%edi, %esi
    000018a7: 	movq	0x38(%rsp), %rdi
    000018ac: 	addl	%esi, %edx
    000018ae: 	leal	0x2f(%rdx), %esi
    000018b1: 	addl	$0x10, %edx
    000018b4: 	cmovsl	%esi, %edx
    000018b7: 	addq	$0x2, %rax
    000018bb: 	sarl	$0x5, %edx
    000018be: 	movw	%dx, (%rdi,%rcx)
    000018c2: 	addq	$0x2, %rcx
    000018c6: 	movl	$0x1, %edx
    000018cb: 	jmp	.Ltmp3983 # Offset: 6347
.Ltmp3947:
    000018d0: 	movslq	%r8d, %r13
    000018d3: 	movslq	%ebp, %r14
    000018d6: 	jmp	.Ltmp3984 # Offset: 6358
.Ltmp3884:
    000018db: 	movq	0xb0(%rsp), %rdx
    000018e3: 	leaq	DATAat0x381c8(%rip), %rsi
    000018ea: 	movl	$0x1, %edi
    000018ef: 	xorl	%eax, %eax
    000018f1: 	callq	__printf_chk@PLT # Offset: 6385
    000018f6: 	jmp	.Ltmp3985 # Offset: 6390
.Ltmp3894:
    000018fb: 	movq	0x50(%rsp), %rdi
    00001900: 	leaq	0x88(%rsp), %rsi
    00001908: 	xorl	%edx, %edx
    0000190a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6410
    0000190f: 	movq	%rax, 0xb0(%rsp)
    00001917: 	movq	%rax, %rdi
    0000191a: 	movq	0x88(%rsp), %rax
    00001922: 	movq	%rax, 0xc0(%rsp)
.Ltmp4005:
    0000192a: 	movq	%r12, %rdx
    0000192d: 	movq	%rbp, %rsi
    00001930: 	callq	memcpy@PLT # Offset: 6448
    00001935: 	movq	0x88(%rsp), %r12
    0000193d: 	movq	0xb0(%rsp), %rax
    00001945: 	jmp	.Ltmp3986 # Offset: 6469
.Ltmp3895:
    0000194a: 	testq	%r12, %r12
    0000194d: 	jne	.Ltmp3987 # Offset: 6477
    00001953: 	movq	0x48(%rsp), %rax
    00001958: 	jmp	.Ltmp3986 # Offset: 6488
.Ltmp3977:
    0000195d: 	testq	%r12, %r12
    00001960: 	jne	.Ltmp3988 # Offset: 6496
    00001966: 	movq	0x48(%rsp), %rax
    0000196b: 	jmp	.Ltmp3989 # Offset: 6507
.Ltmp3976:
    00001970: 	movq	0x50(%rsp), %rdi
    00001975: 	leaq	0x88(%rsp), %rsi
    0000197d: 	xorl	%edx, %edx
    0000197f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6527
    00001984: 	movq	%rax, 0xb0(%rsp)
    0000198c: 	movq	%rax, %rdi
    0000198f: 	movq	0x88(%rsp), %rax
    00001997: 	movq	%rax, 0xc0(%rsp)
.Ltmp4006:
    0000199f: 	movq	%r12, %rdx
    000019a2: 	movq	%rbp, %rsi
    000019a5: 	callq	memcpy@PLT # Offset: 6565
    000019aa: 	movq	0x88(%rsp), %r12
    000019b2: 	movq	0xb0(%rsp), %rax
    000019ba: 	jmp	.Ltmp3989 # Offset: 6586
.Ltmp3971:
    000019bf: 	testq	%r12, %r12
    000019c2: 	jne	.Ltmp3990 # Offset: 6594
    000019c8: 	movq	0x48(%rsp), %rax
    000019cd: 	jmp	.Ltmp3991 # Offset: 6605
.Ltmp3970:
    000019d2: 	movq	0x50(%rsp), %rdi
    000019d7: 	leaq	0x88(%rsp), %rsi
    000019df: 	xorl	%edx, %edx
    000019e1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6625
    000019e6: 	movq	%rax, 0xb0(%rsp)
    000019ee: 	movq	%rax, %rdi
    000019f1: 	movq	0x88(%rsp), %rax
    000019f9: 	movq	%rax, 0xc0(%rsp)
.Ltmp4007:
    00001a01: 	movq	%r12, %rdx
    00001a04: 	movq	%rbp, %rsi
    00001a07: 	callq	memcpy@PLT # Offset: 6663
    00001a0c: 	movq	0x88(%rsp), %r12
    00001a14: 	movq	0xb0(%rsp), %rax
    00001a1c: 	jmp	.Ltmp3991 # Offset: 6684
.Ltmp3965:
    00001a21: 	testq	%r12, %r12
    00001a24: 	jne	.Ltmp3992 # Offset: 6692
    00001a2a: 	movq	0x48(%rsp), %rax
    00001a2f: 	jmp	.Ltmp3993 # Offset: 6703
.Ltmp3964:
    00001a34: 	movq	0x50(%rsp), %rdi
    00001a39: 	leaq	0x88(%rsp), %rsi
    00001a41: 	xorl	%edx, %edx
    00001a43: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6723
    00001a48: 	movq	%rax, 0xb0(%rsp)
    00001a50: 	movq	%rax, %rdi
    00001a53: 	movq	0x88(%rsp), %rax
    00001a5b: 	movq	%rax, 0xc0(%rsp)
.Ltmp4008:
    00001a63: 	movq	%r12, %rdx
    00001a66: 	movq	%rbp, %rsi
    00001a69: 	callq	memcpy@PLT # Offset: 6761
    00001a6e: 	movq	0x88(%rsp), %r12
    00001a76: 	movq	0xb0(%rsp), %rax
    00001a7e: 	jmp	.Ltmp3993 # Offset: 6782
.Ltmp3931:
    00001a83: 	testq	%r12, %r12
    00001a86: 	jne	.Ltmp3994 # Offset: 6790
    00001a8c: 	movq	0x48(%rsp), %rax
    00001a91: 	jmp	.Ltmp3995 # Offset: 6801
.Ltmp3930:
    00001a96: 	movq	0x50(%rsp), %rdi
    00001a9b: 	leaq	0x88(%rsp), %rsi
    00001aa3: 	xorl	%edx, %edx
    00001aa5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6821
    00001aaa: 	movq	%rax, 0xb0(%rsp)
    00001ab2: 	movq	%rax, %rdi
    00001ab5: 	movq	0x88(%rsp), %rax
    00001abd: 	movq	%rax, 0xc0(%rsp)
.Ltmp4009:
    00001ac5: 	movq	%r12, %rdx
    00001ac8: 	movq	%rbp, %rsi
    00001acb: 	callq	memcpy@PLT # Offset: 6859
    00001ad0: 	movq	0x88(%rsp), %r12
    00001ad8: 	movq	0xb0(%rsp), %rax
    00001ae0: 	jmp	.Ltmp3995 # Offset: 6880
.Ltmp3890:
    00001ae5: 	movq	-0x8(%rdx), %rax
    00001ae9: 	addq	$0x200, %rax
    00001aef: 	jmp	.Ltmp3996 # Offset: 6895
.Ltmp3921:
    00001af4: 	movq	0x50(%rsp), %rsi
    00001af9: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001b00: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6912
    00001b05: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001b0c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001b13: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001b1a: 	jne	.Ltmp3997 # Offset: 6938
.Ltmp3926:
    00001b20: 	movq	-0x8(%rdx), %rax
    00001b24: 	addq	$0x200, %rax
    00001b2a: 	jmp	.Ltmp3997 # Offset: 6954
.Ltmp3955:
    00001b2f: 	movq	0x50(%rsp), %rsi
    00001b34: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001b3b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6971
    00001b40: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001b47: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001b4e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001b55: 	jne	.Ltmp3998 # Offset: 6997
.Ltmp3960:
    00001b5b: 	movq	-0x8(%rdx), %rax
    00001b5f: 	addq	$0x200, %rax
    00001b65: 	jmp	.Ltmp3998 # Offset: 7013
.Ltmp3885:
    00001b6a: 	movq	0x50(%rsp), %rsi
    00001b6f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001b76: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7030
    00001b7b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001b82: 	jmp	.Ltmp3999 # Offset: 7042
.Ltmp3925:
    00001b87: 	testq	%r12, %r12
    00001b8a: 	je	.Ltmp4000 # Offset: 7050
    00001b90: 	jmp	.Ltmp4001 # Offset: 7056
    00001b92: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3924:
    00001b98: 	leaq	0x88(%rsp), %rsi
    00001ba0: 	xorl	%edx, %edx
    00001ba2: 	movq	%rbx, %rdi
    00001ba5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7077
    00001baa: 	movq	%rax, (%rbx)
    00001bad: 	movq	%rax, %rdi
    00001bb0: 	movq	0x88(%rsp), %rax
    00001bb8: 	movq	%rax, 0x10(%rbx)
.Ltmp4001:
    00001bbc: 	movq	%r12, %rdx
    00001bbf: 	movq	%rbp, %rsi
    00001bc2: 	callq	memcpy@PLT # Offset: 7106
    00001bc7: 	movq	0x88(%rsp), %r12
    00001bcf: 	movq	(%rbx), %rdi
    00001bd2: 	jmp	.Ltmp4000 # Offset: 7122
.Ltmp3889:
    00001bd7: 	testq	%r12, %r12
    00001bda: 	je	.Ltmp3903 # Offset: 7130
    00001be0: 	jmp	.Ltmp4002 # Offset: 7136
    00001be5: 	nopl	(%rax) # Size: 3
.Ltmp3959:
    00001be8: 	testq	%r12, %r12
    00001beb: 	je	.Ltmp4003 # Offset: 7147
    00001bf1: 	jmp	.Ltmp4004 # Offset: 7153
    00001bf3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3958:
    00001bf8: 	leaq	0x88(%rsp), %rsi
    00001c00: 	xorl	%edx, %edx
    00001c02: 	movq	%rbx, %rdi
    00001c05: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7173
    00001c0a: 	movq	%rax, (%rbx)
    00001c0d: 	movq	%rax, %rdi
    00001c10: 	movq	0x88(%rsp), %rax
    00001c18: 	movq	%rax, 0x10(%rbx)
.Ltmp4004:
    00001c1c: 	movq	%r12, %rdx
    00001c1f: 	movq	%rbp, %rsi
    00001c22: 	callq	memcpy@PLT # Offset: 7202
    00001c27: 	movq	0x88(%rsp), %r12
    00001c2f: 	movq	(%rbx), %rdi
    00001c32: 	jmp	.Ltmp4003 # Offset: 7218
.Ltmp3893:
    00001c37: 	leaq	DATAat0x38158(%rip), %rdi
    00001c3e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7230
.Ltmp3896:
    00001c43: 	leaq	DATAat0x38182(%rip), %rdi
    00001c4a: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7242
.Ltmp3887:
    00001c4f: 	leaq	DATAat0x38158(%rip), %rdi
    00001c56: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7254
.Ltmp3923:
    00001c5b: 	leaq	DATAat0x38158(%rip), %rdi
    00001c62: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7266
.Ltmp3929:
    00001c67: 	leaq	DATAat0x38158(%rip), %rdi
    00001c6e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7278
.Ltmp3932:
    00001c73: 	leaq	DATAat0x38182(%rip), %rdi
    00001c7a: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7290
.Ltmp3957:
    00001c7f: 	leaq	DATAat0x38158(%rip), %rdi
    00001c86: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7302
.Ltmp3963:
    00001c8b: 	leaq	DATAat0x38158(%rip), %rdi
    00001c92: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7314
.Ltmp3966:
    00001c97: 	leaq	DATAat0x38182(%rip), %rdi
    00001c9e: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7326
.Ltmp3969:
    00001ca3: 	leaq	DATAat0x38158(%rip), %rdi
    00001caa: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7338
.Ltmp3972:
    00001caf: 	leaq	DATAat0x38182(%rip), %rdi
    00001cb6: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7350
.Ltmp3975:
    00001cbb: 	leaq	DATAat0x38158(%rip), %rdi
    00001cc2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7362
.Ltmp3978:
    00001cc7: 	leaq	DATAat0x38182(%rip), %rdi
    00001cce: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7374
.Ltmp3981:
    00001cd3: 	callq	__stack_chk_fail@PLT # Offset: 7379
.Ltmp3987:
    00001cd8: 	movq	0x48(%rsp), %rdi
    00001cdd: 	jmp	.Ltmp4005 # Offset: 7389
.Ltmp3988:
    00001ce2: 	movq	0x48(%rsp), %rdi
    00001ce7: 	jmp	.Ltmp4006 # Offset: 7399
.Ltmp3990:
    00001cec: 	movq	0x48(%rsp), %rdi
    00001cf1: 	jmp	.Ltmp4007 # Offset: 7409
.Ltmp3992:
    00001cf6: 	movq	0x48(%rsp), %rdi
    00001cfb: 	jmp	.Ltmp4008 # Offset: 7419
.Ltmp3994:
    00001d00: 	movq	0x48(%rsp), %rdi
    00001d05: 	jmp	.Ltmp4009 # Offset: 7429
    00001d0a: 	endbr64
.Ltmp4011:
    00001d0e: 	movq	%rax, %rbp
    00001d11: 	jmp	.Ltmp4010 # Offset: 7441
    00001d13: 	endbr64
    00001d17: 	jmp	.Ltmp4011 # Offset: 7447
    00001d19: 	endbr64
    00001d1d: 	jmp	.Ltmp4011 # Offset: 7453
    00001d1f: 	endbr64
    00001d23: 	jmp	.Ltmp4011 # Offset: 7459
    00001d25: 	endbr64
    00001d29: 	jmp	.Ltmp4011 # Offset: 7465
    00001d2b: 	endbr64
    00001d2f: 	jmp	.Ltmp4011 # Offset: 7471
    00001d31: 	endbr64
    00001d35: 	jmp	.Ltmp4011 # Offset: 7477
    00001d37: 	endbr64
    00001d3b: 	jmp	.Ltmp4011 # Offset: 7483
    00001d3d: 	endbr64
    00001d41: 	jmp	.Ltmp4011 # Offset: 7489
    00001d43: 	endbr64
    00001d47: 	jmp	.Ltmp4011 # Offset: 7495
    00001d49: 	endbr64
    00001d4d: 	movq	%rax, %rbp
    00001d50: 	jmp	.Ltmp4012 # Offset: 7504
    00001d52: 	endbr64
    00001d56: 	jmp	.Ltmp4011 # Offset: 7510
.Ltmp4010:
    00001d58: 	movq	0xb0(%rsp), %rdi
    00001d60: 	cmpq	0x48(%rsp), %rdi
    00001d65: 	je	.Ltmp4012 # Offset: 7525
    00001d67: 	movq	0xc0(%rsp), %rax
    00001d6f: 	leaq	0x1(%rax), %rsi
    00001d73: 	callq	_ZdlPvm@PLT # Offset: 7539
.Ltmp4012:
    00001d78: 	movq	0x90(%rsp), %rdi
    00001d80: 	cmpq	0x70(%rsp), %rdi
    00001d85: 	je	.Ltmp4013 # Offset: 7557
    00001d87: 	movq	0xa0(%rsp), %rax
    00001d8f: 	leaq	0x1(%rax), %rsi
    00001d93: 	callq	_ZdlPvm@PLT # Offset: 7571
.Ltmp4013:
    00001d98: 	movq	%rbp, %rdi
    00001d9b: 	callq	_Unwind_Resume@PLT # Offset: 7579
    00001da0: 	endbr64
    00001da4: 	jmp	.Ltmp4011 # Offset: 7588
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestOneTypeConvIsiEvv"

Binary Function "_Z15TestOneTypeConvIhtEvv" after disassembly {
  Number      : 290
  State       : disassembled
  Address     : 0x32070
  Size        : 0x4394
  MaxSize     : 0x43a0
  Offset      : 0x32070
  Section     : .text
  Orc Section : .local.text._Z15TestOneTypeConvIhtEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0289:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x4e000(%rsp), %r11
.Ltmp4014:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp4014 # Offset: 37
    00000027: 	subq	$0x3e8, %rsp
    0000002e: 	movl	$0x27100, %edx
    00000033: 	movq	%fs:0x28, %rax
    0000003c: 	movq	%rax, 0x4e3d8(%rsp)
    00000044: 	xorl	%eax, %eax
    00000046: 	leaq	0x1a0(%rsp), %rax
    0000004e: 	movl	$0x746e6975, 0x1a0(%rsp)
    00000059: 	movq	%rax, 0x150(%rsp)
    00000061: 	movq	%rax, 0x190(%rsp)
    00000069: 	movl	$0x5f38, %eax
    0000006e: 	movw	%ax, 0x1a4(%rsp)
    00000076: 	cvttsd2si	init_value(%rip), %eax
    0000007e: 	movb	$0x74, 0x1a6(%rsp)
    00000086: 	movq	$0x7, 0x198(%rsp)
    00000092: 	movb	$0x0, 0x1a7(%rsp)
    0000009a: 	movzbl	%al, %esi
    0000009d: 	movl	%eax, 0x78(%rsp)
    000000a1: 	movb	%al, 0x50(%rsp)
    000000a5: 	leaq	0x1d0(%rsp), %rax
    000000ad: 	movq	%rax, %rdi
    000000b0: 	movq	%rax, 0x28(%rsp)
    000000b5: 	callq	memset@PLT # Offset: 181
    000000ba: 	movslq	iterations(%rip), %rax
    000000c1: 	leaq	0x1b0(%rsp), %rdi
    000000c9: 	movl	$0x12, %edx
    000000ce: 	leaq	DATAat0x387ae(%rip), %rsi
    000000d5: 	movq	%rdi, 0xa8(%rsp)
    000000dd: 	movq	%rax, %rbx
    000000e0: 	movl	%eax, 0x158(%rsp)
    000000e7: 	imulq	$0x5d9f7391, %rax, %rax
    000000ee: 	sarl	$0x1f, %ebx
    000000f1: 	movb	$0x0, 0x1c7(%rsp)
    000000f9: 	movq	$0x7, 0x1b8(%rsp)
    00000105: 	sarq	$0x27, %rax
    00000109: 	subl	%ebx, %eax
    0000010b: 	movl	%eax, iterations(%rip)
    00000111: 	leaq	0x1c0(%rsp), %rax
    00000119: 	movq	%rax, 0x70(%rsp)
    0000011e: 	movq	%rax, 0x1b0(%rsp)
    00000126: 	movl	0x1a0(%rsp), %eax
    0000012d: 	movl	%eax, 0x1c0(%rsp)
    00000134: 	movzwl	0x1a4(%rsp), %eax
    0000013c: 	movw	%ax, 0x1c4(%rsp)
    00000144: 	movzbl	0x1a6(%rsp), %eax
    0000014c: 	movb	%al, 0x1c6(%rsp)
    00000153: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 339
    00000158: 	callq	clock@PLT # Offset: 344
    0000015d: 	movq	%rax, start_time(%rip)
    00000164: 	movl	iterations(%rip), %eax
    0000016a: 	movl	%eax, 0x60(%rsp)
    0000016e: 	testl	%eax, %eax
    00000170: 	jle	.Ltmp4015 # Offset: 368
    00000176: 	movzbl	0x78(%rsp), %eax
    0000017b: 	movl	$0x0, 0x58(%rsp)
    00000183: 	movw	%ax, 0x48(%rsp)
    00000188: 	leaq	0x360(%rsp), %rax
    00000190: 	movq	%rax, 0x40(%rsp)
    00000195: 	nopl	(%rax) # Size: 3
.Ltmp4035:
    00000198: 	movq	0x40(%rsp), %rax
    0000019d: 	movzbl	0x50(%rsp), %r13d
    000001a3: 	xorl	%r15d, %r15d
    000001a6: 	movq	$0x0, 0x10(%rsp)
    000001af: 	movq	%rax, 0x8(%rsp)
    000001b4: 	nopl	(%rax) # Size: 4
.Ltmp4022:
    000001b8: 	movq	0x10(%rsp), %rax
    000001bd: 	movq	0x28(%rsp), %r8
    000001c2: 	movl	$0xffffffff, %edi
    000001c7: 	xorl	%ecx, %ecx
    000001c9: 	movl	$0x1, %r11d
    000001cf: 	movl	%eax, %r12d
    000001d2: 	leal	0x190(%rax), %r9d
    000001d9: 	leal	0x1(%rax), %r10d
    000001dd: 	movl	%eax, %ebx
    000001df: 	leal	(%r13,%r13,4), %eax
    000001e4: 	subl	$0x190, %ebx
    000001ea: 	leal	-0x18f(%r12), %r14d
    000001f2: 	movw	%ax, 0x30(%rsp)
    000001f7: 	movl	%r9d, %eax
    000001fa: 	movl	%ebx, 0x20(%rsp)
    000001fe: 	movq	%rax, 0x38(%rsp)
    00000203: 	testl	%r15d, %r15d
    00000206: 	je	.Ltmp4016 # Offset: 518
    0000020c: 	nopl	(%rax) # Size: 4
.Ltmp4025:
    00000210: 	leal	(%rdi,%r14), %eax
    00000214: 	cltq
    00000216: 	movzbl	0x1d0(%rsp,%rax), %eax
    0000021e: 	leal	(%rax,%rax,4), %edx
    00000221: 	testl	%ecx, %ecx
    00000223: 	je	.Ltmp4017 # Offset: 547
    00000229: 	movl	0x20(%rsp), %ebx
    0000022d: 	leal	(%rbx,%rdi), %esi
    00000230: 	movslq	%esi, %rsi
    00000233: 	movzbl	0x1d0(%rsp,%rsi), %ebp
    0000023b: 	addl	%edx, %ebp
    0000023d: 	cmpl	$0x18f, %ecx
    00000243: 	jne	.Ltmp4018 # Offset: 579
.Ltmp4027:
    00000249: 	addl	%eax, %ebp
.Ltmp4023:
    0000024b: 	leal	(%r12,%rdi), %eax
    0000024f: 	movl	%r13d, %esi
    00000252: 	leal	(%r12,%rcx), %ebx
    00000256: 	cltq
    00000258: 	movzbl	0x1d0(%rsp,%rax), %edx
    00000260: 	leal	(%rdx,%rdx,4), %edx
    00000263: 	leal	(%rdx,%rsi,8), %edx
    00000266: 	addl	%ebp, %edx
    00000268: 	cmpl	$0x18f, %ecx
    0000026e: 	jne	.Ltmp4019 # Offset: 622
    00000274: 	leal	(%rsi,%rsi,4), %r13d
    00000278: 	addl	%r13d, %edx
    0000027b: 	cmpl	$0x18f, %r15d
    00000282: 	je	.Ltmp4020 # Offset: 642
    00000288: 	leal	0x18f(%r9), %eax
    0000028f: 	addl	%edi, %r9d
    00000292: 	movzbl	0x1d0(%rsp,%rax), %esi
    0000029a: 	movslq	%r9d, %r9
    0000029d: 	movzbl	0x1d0(%rsp,%r9), %eax
    000002a6: 	leal	(%rsi,%rsi,4), %ecx
    000002a9: 	addl	%ecx, %eax
    000002ab: 	addl	%edx, %eax
.Ltmp4031:
    000002ad: 	addq	$0x190, 0x10(%rsp)
    000002b6: 	addl	%esi, %eax
    000002b8: 	addl	$0x1, %r15d
    000002bc: 	leal	0x80(,%rax,8), %eax
    000002c3: 	movb	%ah, 0x272d0(%rsp,%rbx)
    000002ca: 	cmpl	$0x190, %r15d
    000002d1: 	je	.Ltmp4021 # Offset: 721
    000002d7: 	movq	0x8(%rsp), %rax
    000002dc: 	movzbl	(%rax), %r13d
    000002e0: 	addq	$0x190, %rax
    000002e6: 	movq	%rax, 0x8(%rsp)
    000002eb: 	jmp	.Ltmp4022 # Offset: 747
.Ltmp4017:
    000002f0: 	movq	0x8(%rsp), %rax
    000002f5: 	movzbl	-0x320(%rax), %ebp
    000002fc: 	addl	%edx, %ebp
.Ltmp4018:
    000002fe: 	leal	(%rcx,%r14), %eax
    00000302: 	cltq
    00000304: 	movzbl	0x1d0(%rsp,%rax), %eax
    0000030c: 	addl	%eax, %ebp
.Ltmp4028:
    0000030e: 	testl	%ecx, %ecx
    00000310: 	jne	.Ltmp4023 # Offset: 784
    00000316: 	movzwl	0x30(%rsp), %eax
    0000031b: 	movl	%r13d, %esi
    0000031e: 	movq	0x10(%rsp), %rbx
    00000323: 	leal	(%rax,%rsi,8), %eax
    00000326: 	addl	%ebp, %eax
    00000328: 	movslq	%r10d, %rbp
    0000032b: 	movzbl	0x1d0(%rsp,%rbp), %r13d
    00000334: 	leal	(%r13,%r13,4), %edx
    00000339: 	addl	%eax, %edx
    0000033b: 	cmpl	$0x18f, %r15d
    00000342: 	je	.Ltmp4024 # Offset: 834
.Ltmp4029:
    00000348: 	movq	0x38(%rsp), %rax
    0000034d: 	movq	0x8(%rsp), %rsi
    00000352: 	movzbl	0x1d0(%rsp,%rax), %eax
    0000035a: 	movzbl	(%rsi), %esi
    0000035d: 	leal	(%rax,%rax,4), %eax
    00000360: 	addl	%esi, %eax
    00000362: 	addl	%edx, %eax
.Ltmp4030:
    00000364: 	leal	(%r9,%r11), %edx
    00000368: 	movzbl	0x1d0(%rsp,%rdx), %edx
    00000370: 	addl	%edx, %eax
.Ltmp4033:
    00000372: 	addl	$0x1, %ecx
    00000375: 	addl	$0x1, %r11d
    00000379: 	addq	$0x1, %r8
    0000037d: 	addl	$0x1, %r10d
    00000381: 	leal	0x80(,%rax,8), %eax
    00000388: 	addl	$0x1, %edi
    0000038b: 	movb	%ah, 0x272d0(%rsp,%rbx)
    00000392: 	testl	%r15d, %r15d
    00000395: 	jne	.Ltmp4025 # Offset: 917
.Ltmp4016:
    0000039b: 	movzbl	(%r8), %eax
    0000039f: 	leal	(%rax,%rax,4), %ebp
    000003a2: 	testl	%ecx, %ecx
    000003a4: 	je	.Ltmp4026 # Offset: 932
    000003aa: 	movzbl	-0x1(%r8), %edx
    000003af: 	addl	%edx, %ebp
    000003b1: 	cmpl	$0x18f, %ecx
    000003b7: 	je	.Ltmp4027 # Offset: 951
    000003bd: 	movzbl	0x1(%r8), %eax
    000003c2: 	addl	%eax, %ebp
    000003c4: 	jmp	.Ltmp4028 # Offset: 964
    000003c9: 	nopl	(%rax) # Size: 7
.Ltmp4019:
    000003d0: 	movslq	%r10d, %rbp
    000003d3: 	movzbl	0x1d0(%rsp,%rbp), %r13d
    000003dc: 	leal	(%r13,%r13,4), %eax
    000003e1: 	addl	%eax, %edx
    000003e3: 	cmpl	$0x18f, %r15d
    000003ea: 	je	.Ltmp4024 # Offset: 1002
    000003ec: 	testl	%ecx, %ecx
    000003ee: 	je	.Ltmp4029 # Offset: 1006
    000003f4: 	leal	(%r9,%rcx), %eax
    000003f8: 	movzbl	0x1d0(%rsp,%rax), %esi
    00000400: 	leal	(%r9,%rdi), %eax
    00000404: 	cltq
    00000406: 	movzbl	0x1d0(%rsp,%rax), %eax
    0000040e: 	leal	(%rsi,%rsi,4), %ebp
    00000411: 	addl	%ebp, %eax
    00000413: 	addl	%edx, %eax
    00000415: 	cmpl	$0x18f, %ecx
    0000041b: 	jne	.Ltmp4030 # Offset: 1051
    00000421: 	jmp	.Ltmp4031 # Offset: 1057
    00000426: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4024:
    00000430: 	leal	(%rsi,%rsi,4), %r13d
    00000434: 	leal	(%rdx,%rsi), %eax
    00000437: 	movl	%ecx, 0x18(%rsp)
    0000043b: 	addl	%r13d, %eax
    0000043e: 	testl	%ecx, %ecx
    00000440: 	jne	.Ltmp4032 # Offset: 1088
.Ltmp4034:
    00000442: 	movzbl	0x26f71(%r8), %edx
    0000044a: 	movzbl	0x1d0(%rsp,%rbp), %r13d
    00000453: 	addl	%edx, %eax
    00000455: 	jmp	.Ltmp4033 # Offset: 1109
    0000045a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4020:
    00000460: 	movl	$0x18f, 0x18(%rsp)
.Ltmp4032:
    00000468: 	movzbl	0x26f6f(%r8), %eax
    00000470: 	addl	%r13d, %edx
    00000473: 	addl	%edx, %eax
    00000475: 	cmpl	$0x18f, 0x18(%rsp)
    0000047d: 	je	.Ltmp4031 # Offset: 1149
    00000483: 	movslq	%r10d, %rbp
    00000486: 	jmp	.Ltmp4034 # Offset: 1158
    00000488: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4026:
    00000490: 	movzbl	0x1(%r8), %eax
    00000495: 	addw	0x48(%rsp), %bp
    0000049a: 	addl	%eax, %ebp
    0000049c: 	jmp	.Ltmp4028 # Offset: 1180
    000004a1: 	nopl	(%rax) # Size: 7
.Ltmp4021:
    000004a8: 	addl	$0x1, 0x58(%rsp)
    000004ad: 	movl	0x58(%rsp), %eax
    000004b1: 	cmpl	0x60(%rsp), %eax
    000004b5: 	jne	.Ltmp4035 # Offset: 1205
.Ltmp4015:
    000004bb: 	leaq	0x272d0(%rsp), %rax
    000004c3: 	leaq	0x27460(%rsp), %rdx
    000004cb: 	pxor	%xmm2, %xmm2
    000004cf: 	xorl	%esi, %esi
    000004d1: 	movq	%rax, 0x30(%rsp)
    000004d6: 	leaq	0x4e560(%rsp), %rdi
    000004de: 	movq	%rax, %rcx
    000004e1: 	nopl	(%rax) # Size: 7
.Ltmp4037:
    000004e8: 	movq	%rcx, %rax
    000004eb: 	pxor	%xmm0, %xmm0
    000004ef: 	nop # Size: 1
.Ltmp4036:
    000004f0: 	paddb	(%rax), %xmm0
    000004f4: 	addq	$0x10, %rax
    000004f8: 	cmpq	%rax, %rdx
    000004fb: 	jne	.Ltmp4036 # Offset: 1275
    000004fd: 	movdqa	%xmm0, %xmm1
    00000501: 	addq	$0x190, %rdx
    00000508: 	addq	$0x190, %rcx
    0000050f: 	psrldq	$0x8, %xmm1
    00000514: 	paddb	%xmm1, %xmm0
    00000518: 	psadbw	%xmm2, %xmm0
    0000051c: 	movd	%xmm0, %eax
    00000520: 	addl	%eax, %esi
    00000522: 	cmpq	%rdx, %rdi
    00000525: 	jne	.Ltmp4037 # Offset: 1317
    00000527: 	testb	%sil, %sil
    0000052a: 	jne	.Ltmp4038 # Offset: 1322
.Ltmp4174:
    00000530: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000537: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000053e: 	subq	$0x20, %rax
    00000542: 	cmpq	%rax, %rbx
    00000545: 	je	.Ltmp4039 # Offset: 1349
    0000054b: 	leaq	0x10(%rbx), %rdi
    0000054f: 	movq	0x1b8(%rsp), %r12
    00000557: 	movq	%rdi, (%rbx)
    0000055a: 	movq	0x1b0(%rsp), %rbp
    00000562: 	movq	%rbp, %rax
    00000565: 	addq	%r12, %rax
    00000568: 	je	.Ltmp4040 # Offset: 1384
    0000056a: 	testq	%rbp, %rbp
    0000056d: 	je	.Ltmp4041 # Offset: 1389
.Ltmp4040:
    00000573: 	movq	%r12, 0x188(%rsp)
    0000057b: 	cmpq	$0xf, %r12
    0000057f: 	ja	.Ltmp4042 # Offset: 1407
    00000585: 	cmpq	$0x1, %r12
    00000589: 	jne	.Ltmp4043 # Offset: 1417
    0000058f: 	movzbl	(%rbp), %eax
    00000593: 	movb	%al, 0x10(%rbx)
.Ltmp4057:
    00000596: 	movq	%r12, 0x8(%rbx)
    0000059a: 	movb	$0x0, (%rdi,%r12)
    0000059f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000005a6: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000005ad: 	addq	$0x20, %rax
    000005b1: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000005b8: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000005bf: 	je	.Ltmp4044 # Offset: 1471
.Ltmp4186:
    000005c5: 	movq	-0x20(%rax), %rbp
    000005c9: 	callq	clock@PLT # Offset: 1481
    000005ce: 	pxor	%xmm0, %xmm0
    000005d2: 	movq	%rax, end_time(%rip)
    000005d9: 	movq	%rbp, %rdi
    000005dc: 	subq	start_time(%rip), %rax
    000005e3: 	cvtsi2sd	%rax, %xmm0
    000005e8: 	divsd	DATAat0x38a48(%rip), %xmm0
    000005f0: 	callq	_Z13record_resultdPKc # Offset: 1520
    000005f5: 	movq	0x1b0(%rsp), %rdi
    000005fd: 	cmpq	0x70(%rsp), %rdi
    00000602: 	je	.Ltmp4045 # Offset: 1538
    00000604: 	movq	0x1c0(%rsp), %rax
    0000060c: 	leaq	0x1(%rax), %rsi
    00000610: 	callq	_ZdlPvm@PLT # Offset: 1552
.Ltmp4045:
    00000615: 	movq	0x70(%rsp), %rax
    0000061a: 	movq	0x190(%rsp), %rbp
    00000622: 	movq	0x198(%rsp), %r12
    0000062a: 	movq	%rax, 0x1b0(%rsp)
    00000632: 	movq	%rbp, %rax
    00000635: 	addq	%r12, %rax
    00000638: 	je	.Ltmp4046 # Offset: 1592
    0000063a: 	testq	%rbp, %rbp
    0000063d: 	je	.Ltmp4047 # Offset: 1597
.Ltmp4046:
    00000643: 	movq	%r12, 0x188(%rsp)
    0000064b: 	cmpq	$0xf, %r12
    0000064f: 	ja	.Ltmp4048 # Offset: 1615
    00000655: 	cmpq	$0x1, %r12
    00000659: 	jne	.Ltmp4049 # Offset: 1625
    0000065f: 	movzbl	(%rbp), %eax
    00000663: 	movb	%al, 0x1c0(%rsp)
    0000066a: 	movq	0x70(%rsp), %rax
.Ltmp4183:
    0000066f: 	movq	%r12, 0x1b8(%rsp)
    00000677: 	movb	$0x0, (%rax,%r12)
    0000067c: 	movabsq	$0x3fffffffffffffff, %rax
    00000686: 	subq	0x1b8(%rsp), %rax
    0000068e: 	cmpq	$0x11, %rax
    00000692: 	jbe	.Ltmp4050 # Offset: 1682
    00000698: 	movq	0xa8(%rsp), %rdi
    000006a0: 	movl	$0x12, %edx
    000006a5: 	leaq	DATAat0x387c1(%rip), %rsi
    000006ac: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1708
    000006b1: 	callq	clock@PLT # Offset: 1713
    000006b6: 	movq	%rax, start_time(%rip)
    000006bd: 	movl	iterations(%rip), %eax
    000006c3: 	movl	%eax, 0x58(%rsp)
    000006c7: 	testl	%eax, %eax
    000006c9: 	jle	.Ltmp4051 # Offset: 1737
    000006cf: 	movzbl	0x78(%rsp), %eax
    000006d4: 	movl	$0x0, 0x40(%rsp)
    000006dc: 	movw	%ax, 0x48(%rsp)
    000006e1: 	leal	(%rax,%rax,4), %eax
    000006e4: 	movw	%ax, 0x60(%rsp)
    000006e9: 	leaq	0x1d1(%rsp), %rax
    000006f1: 	movq	%rax, 0x38(%rsp)
    000006f6: 	leaq	0x26fb0(%rsp), %rax
    000006fe: 	movq	%rax, 0x8(%rsp)
    00000703: 	leaq	0x26faf(%rsp), %rax
    0000070b: 	movq	%rax, 0x68(%rsp)
.Ltmp4069:
    00000710: 	movq	0x38(%rsp), %rdx
    00000715: 	movzbl	0x50(%rsp), %eax
    0000071a: 	xorl	%ecx, %ecx
    0000071c: 	movzwl	0x48(%rsp), %r8d
    00000722: 	movq	0x30(%rsp), %rdi
    00000727: 	jmp	.Ltmp4052 # Offset: 1831
    00000729: 	nopl	(%rax) # Size: 7
.Ltmp4055:
    00000730: 	movzbl	-0x2(%rdx), %r9d
    00000735: 	leal	(%r9,%rsi), %r10d
    00000739: 	cmpl	$0x18f, %ecx
    0000073f: 	jne	.Ltmp4053 # Offset: 1855
    00000745: 	addl	%eax, %r10d
    00000748: 	leal	(%r9,%r9,4), %r9d
    0000074c: 	leal	(%r10,%rax,8), %eax
    00000750: 	addl	%eax, %r9d
    00000753: 	movzbl	0x18f(%rdx), %eax
    0000075a: 	addl	%r9d, %esi
    0000075d: 	movzbl	0x18e(%rdx), %r9d
    00000765: 	leal	(%rax,%rax,4), %r10d
    00000769: 	addl	%r10d, %r9d
    0000076c: 	addl	%r9d, %esi
    0000076f: 	addl	%esi, %eax
.Ltmp4056:
    00000771: 	leal	0x80(,%rax,8), %eax
    00000778: 	movb	%ah, (%rdi,%rcx)
    0000077b: 	addq	$0x1, %rcx
    0000077f: 	cmpq	$0x190, %rcx
    00000786: 	je	.Ltmp4054 # Offset: 1926
    0000078c: 	movzbl	(%rdx), %eax
    0000078f: 	addq	$0x1, %rdx
.Ltmp4052:
    00000793: 	leal	(%rax,%rax,4), %esi
    00000796: 	testq	%rcx, %rcx
    00000799: 	jne	.Ltmp4055 # Offset: 1945
    0000079b: 	movzbl	(%rdx), %r9d
    0000079f: 	addl	%r8d, %esi
    000007a2: 	leal	(%rax,%rax,2), %r10d
    000007a6: 	leal	(%rax,%r10,4), %eax
    000007aa: 	addl	%r9d, %esi
    000007ad: 	leal	(%r9,%r9,4), %r9d
    000007b1: 	addl	%esi, %eax
    000007b3: 	movzbl	0x18f(%rdx), %esi
    000007ba: 	addl	%eax, %r9d
    000007bd: 	leal	(%rsi,%rsi,4), %esi
    000007c0: 	addl	%r8d, %esi
    000007c3: 	addl	%r9d, %esi
.Ltmp4058:
    000007c6: 	movzbl	0x190(%rdx), %eax
    000007cd: 	addl	%esi, %eax
    000007cf: 	jmp	.Ltmp4056 # Offset: 1999
.Ltmp4042:
    000007d1: 	leaq	0x188(%rsp), %rsi
    000007d9: 	xorl	%edx, %edx
    000007db: 	movq	%rbx, %rdi
    000007de: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2014
    000007e3: 	movq	%rax, (%rbx)
    000007e6: 	movq	%rax, %rdi
    000007e9: 	movq	0x188(%rsp), %rax
    000007f1: 	movq	%rax, 0x10(%rbx)
.Ltmp4196:
    000007f5: 	movq	%r12, %rdx
    000007f8: 	movq	%rbp, %rsi
    000007fb: 	callq	memcpy@PLT # Offset: 2043
    00000800: 	movq	0x188(%rsp), %r12
    00000808: 	movq	(%rbx), %rdi
    0000080b: 	jmp	.Ltmp4057 # Offset: 2059
.Ltmp4053:
    00000810: 	movzbl	(%rdx), %esi
    00000813: 	movzbl	-0x2(%rdx), %r9d
    00000818: 	addl	%esi, %r10d
    0000081b: 	leal	(%r9,%r9,4), %r9d
    0000081f: 	leal	(%rsi,%rsi,4), %esi
    00000822: 	leal	(%r10,%rax,8), %eax
    00000826: 	addl	%eax, %r9d
    00000829: 	movzbl	0x18f(%rdx), %eax
    00000830: 	addl	%esi, %r9d
    00000833: 	movzbl	0x18e(%rdx), %esi
    0000083a: 	leal	(%rax,%rax,4), %eax
    0000083d: 	addl	%eax, %esi
    0000083f: 	addl	%r9d, %esi
    00000842: 	jmp	.Ltmp4058 # Offset: 2114
    00000847: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4054:
    00000850: 	movq	0x28(%rsp), %r12
    00000855: 	movzbl	0x50(%rsp), %eax
    0000085a: 	movl	$0x320, %r13d
    00000860: 	jmp	.Ltmp4059 # Offset: 2144
    00000865: 	nopl	(%rax) # Size: 3
.Ltmp4063:
    00000868: 	leal	-0x2(%r9), %edx
    0000086c: 	movslq	%edx, %rdx
    0000086f: 	movzbl	0x1d0(%rsp,%rdx), %edx
    00000877: 	addl	%r11d, %edx
    0000087a: 	cmpl	$0x18f, %ecx
    00000880: 	jne	.Ltmp4060 # Offset: 2176
    00000886: 	addl	%eax, %edx
    00000888: 	leal	(%r10,%r8), %eax
    0000088c: 	movq	0x20(%rsp), %r11
    00000891: 	cltq
    00000893: 	movzbl	0x1d0(%rsp,%rax), %eax
    0000089b: 	leal	(%rax,%rax,4), %eax
    0000089e: 	leal	(%rax,%rsi,8), %eax
    000008a1: 	leal	(%rsi,%rsi,4), %esi
    000008a4: 	addl	%edx, %eax
    000008a6: 	addl	%esi, %eax
.Ltmp4066:
    000008a8: 	leal	(%r13,%rcx), %edx
    000008ad: 	movzbl	0x1d0(%rsp,%rdx), %esi
    000008b5: 	leal	(%r13,%r8), %edx
    000008ba: 	movslq	%edx, %rdx
    000008bd: 	movzbl	0x1d0(%rsp,%rdx), %edx
    000008c5: 	leal	(%rsi,%rsi,4), %ebp
    000008c8: 	addl	%ebp, %edx
    000008ca: 	addl	%edx, %eax
    000008cc: 	cmpl	$0x18f, %ebx
    000008d2: 	jne	.Ltmp4061 # Offset: 2258
    000008d8: 	leal	0x10(%rsi,%rax), %esi
    000008dc: 	addq	$0x190, %r12
    000008e3: 	addl	$0x190, %r13d
    000008ea: 	movzwl	%si, %esi
    000008ed: 	sarl	$0x5, %esi
    000008f0: 	movb	%sil, 0x272d0(%rsp,%r11)
    000008f8: 	cmpq	%r12, 0x8(%rsp)
    000008fd: 	je	.Ltmp4062 # Offset: 2301
    00000903: 	movzbl	(%r12), %eax
.Ltmp4059:
    00000908: 	leal	-0x190(%r13), %r10d
    0000090f: 	xorl	%ecx, %ecx
    00000911: 	movzbl	%al, %r15d
    00000915: 	movl	%r13d, %r14d
    00000918: 	movzbl	0x190(%r12), %esi
    00000921: 	movl	$0xffffffff, %r8d
    00000927: 	movl	$0x1, %edi
    0000092c: 	leal	-0x31f(%r13), %r9d
    00000933: 	leal	(%rsi,%rsi,4), %ebx
    00000936: 	movw	%bx, 0x10(%rsp)
    0000093b: 	movl	%r10d, %ebx
    0000093e: 	movq	%rbx, 0x18(%rsp)
    00000943: 	leal	-0x1(%r13), %ebx
    00000947: 	movq	%rbx, 0x20(%rsp)
    0000094c: 	nopl	(%rax) # Size: 4
.Ltmp4064:
    00000950: 	leal	(%rax,%rax,4), %r11d
    00000954: 	movl	%ecx, %ebx
    00000956: 	testq	%rcx, %rcx
    00000959: 	jne	.Ltmp4063 # Offset: 2393
    0000095f: 	movslq	%r9d, %rax
    00000962: 	addl	%r15d, %r11d
    00000965: 	movzbl	0x1d0(%rsp,%rax), %edx
    0000096d: 	movzwl	0x10(%rsp), %eax
    00000972: 	addl	%r11d, %edx
    00000975: 	leal	(%rax,%rsi,8), %eax
    00000978: 	movq	0x18(%rsp), %r11
    0000097d: 	addl	%edx, %eax
    0000097f: 	leal	(%r10,%rdi), %edx
    00000983: 	movzbl	0x1d0(%rsp,%rdx), %esi
    0000098b: 	movzbl	0x320(%r12), %edx
    00000994: 	leal	(%rsi,%rsi,4), %ebx
    00000997: 	addl	%eax, %ebx
    00000999: 	movzbl	0x1d0(%rsp,%r14), %eax
    000009a2: 	leal	(%rax,%rax,4), %eax
    000009a5: 	addl	%edx, %eax
    000009a7: 	addl	%ebx, %eax
.Ltmp4065:
    000009a9: 	leal	(%r13,%rdi), %edx
    000009ae: 	addl	$0x1, %r9d
    000009b2: 	addl	$0x1, %edi
    000009b5: 	addl	$0x1, %r8d
    000009b9: 	movslq	%edx, %rdx
    000009bc: 	movzbl	0x1d0(%rsp,%rdx), %edx
    000009c4: 	leal	0x10(%rax,%rdx), %edx
    000009c8: 	movzbl	0x1(%r12,%rcx), %eax
    000009ce: 	addq	$0x1, %rcx
    000009d2: 	movzwl	%dx, %edx
    000009d5: 	sarl	$0x5, %edx
    000009d8: 	movb	%dl, 0x272d0(%rsp,%r11)
    000009e0: 	jmp	.Ltmp4064 # Offset: 2528
    000009e5: 	nopl	(%rax) # Size: 3
.Ltmp4061:
    000009e8: 	leal	(%r10,%rdi), %edx
    000009ec: 	movzbl	0x1d0(%rsp,%rdx), %esi
    000009f4: 	jmp	.Ltmp4065 # Offset: 2548
    000009f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4060:
    00000a00: 	movslq	%r9d, %rax
    00000a03: 	leal	(%r10,%rcx), %r11d
    00000a07: 	movzbl	0x1d0(%rsp,%rax), %eax
    00000a0f: 	addl	%eax, %edx
    00000a11: 	leal	(%r10,%r8), %eax
    00000a15: 	cltq
    00000a17: 	movzbl	0x1d0(%rsp,%rax), %eax
    00000a1f: 	leal	(%rax,%rax,4), %eax
    00000a22: 	leal	(%rax,%rsi,8), %eax
    00000a25: 	addl	%edx, %eax
    00000a27: 	leal	(%r10,%rdi), %edx
    00000a2b: 	movzbl	0x1d0(%rsp,%rdx), %edx
    00000a33: 	leal	(%rdx,%rdx,4), %edx
    00000a36: 	addl	%edx, %eax
    00000a38: 	jmp	.Ltmp4066 # Offset: 2616
    00000a3d: 	nopl	(%rax) # Size: 3
.Ltmp4062:
    00000a40: 	movq	0x68(%rsp), %rax
    00000a45: 	movl	$0x26f70, %edi
    00000a4a: 	xorl	%esi, %esi
.Ltmp4105:
    00000a4c: 	movzbl	0x1(%rax), %ecx
    00000a50: 	leal	(%rcx,%rcx,4), %edx
    00000a53: 	testl	%esi, %esi
    00000a55: 	je	.Ltmp4067 # Offset: 2645
.Ltmp4104:
    00000a5b: 	movzbl	(%rax), %r8d
    00000a5f: 	addl	%r8d, %edx
    00000a62: 	cmpl	$0x18f, %esi
    00000a68: 	jne	.Ltmp4068 # Offset: 2664
    00000a6e: 	movzbl	0x190(%rax), %esi
    00000a75: 	addl	%ecx, %edx
    00000a77: 	movzbl	0x191(%rax), %ecx
    00000a7e: 	addl	$0x1, 0x40(%rsp)
    00000a83: 	leal	(%rsi,%rsi,4), %eax
    00000a86: 	leal	(%rax,%rcx,8), %eax
    00000a89: 	addl	%eax, %edx
    00000a8b: 	leal	(%rcx,%rcx,4), %eax
    00000a8e: 	leal	(%rdx,%rax,2), %eax
    00000a91: 	addl	%esi, %eax
    00000a93: 	leal	0x10(%rcx,%rax), %ecx
    00000a97: 	movl	0x40(%rsp), %eax
    00000a9b: 	movzwl	%cx, %ecx
    00000a9e: 	sarl	$0x5, %ecx
    00000aa1: 	movb	%cl, 0x272d0(%rsp,%rdi)
    00000aa8: 	cmpl	0x58(%rsp), %eax
    00000aac: 	jne	.Ltmp4069 # Offset: 2732
.Ltmp4051:
    00000ab2: 	movq	0x30(%rsp), %rax
    00000ab7: 	xorl	%ecx, %ecx
    00000ab9: 	pxor	%xmm3, %xmm3
    00000abd: 	pxor	%xmm2, %xmm2
    00000ac1: 	leaq	0x275e1(%rsp), %rdx
    00000ac9: 	leaq	0x27461(%rsp), %rsi
    00000ad1: 	movl	%ecx, %r8d
    00000ad4: 	leaq	0x270f1(%rax), %r9
    00000adb: 	movq	%rdx, 0x148(%rsp)
    00000ae3: 	movq	%rsi, 0x140(%rsp)
    00000aeb: 	movq	%r9, 0x68(%rsp)
.Ltmp4071:
    00000af0: 	movq	%rsi, %rax
    00000af3: 	pxor	%xmm0, %xmm0
    00000af7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4070:
    00000b00: 	movdqu	(%rax), %xmm4
    00000b04: 	addq	$0x10, %rax
    00000b08: 	paddb	%xmm4, %xmm0
    00000b0c: 	cmpq	%rdx, %rax
    00000b0f: 	jne	.Ltmp4070 # Offset: 2831
    00000b11: 	movdqa	%xmm0, %xmm1
    00000b15: 	addq	$0x190, %rsi
    00000b1c: 	psrldq	$0x8, %xmm1
    00000b21: 	paddb	%xmm1, %xmm0
    00000b25: 	psadbw	%xmm3, %xmm0
    00000b29: 	movd	%xmm0, %edx
    00000b2d: 	movq	(%rax), %xmm0
    00000b31: 	movdqa	%xmm0, %xmm4
    00000b35: 	psadbw	%xmm2, %xmm4
    00000b39: 	movq	%xmm4, 0x178(%rsp)
    00000b42: 	movzbl	0x9(%rax), %ecx
    00000b46: 	addb	0x8(%rax), %cl
    00000b49: 	movq	%xmm4, %rdi
    00000b4e: 	addl	%r8d, %ecx
    00000b51: 	addb	0xa(%rax), %cl
    00000b54: 	addb	0xb(%rax), %cl
    00000b57: 	movl	%edi, %r10d
    00000b5a: 	addb	0xc(%rax), %cl
    00000b5d: 	addb	0xd(%rax), %cl
    00000b60: 	addl	%ecx, %edx
    00000b62: 	leal	(%rdx,%r10), %r8d
    00000b66: 	leaq	0x190(%rax), %rdx
    00000b6d: 	cmpq	%r9, %rdx
    00000b70: 	jne	.Ltmp4071 # Offset: 2928
    00000b76: 	cvttsd2si	init_value(%rip), %eax
    00000b7e: 	movl	%eax, %edx
    00000b80: 	shll	$0x4, %edx
    00000b83: 	subl	%edx, %eax
    00000b85: 	shll	$0x2, %eax
    00000b88: 	cmpb	%r8b, %al
    00000b8b: 	je	.Ltmp4072 # Offset: 2955
    00000b8d: 	movq	0x1b0(%rsp), %rdx
    00000b95: 	leaq	DATAat0x381c8(%rip), %rsi
    00000b9c: 	movl	$0x1, %edi
    00000ba1: 	xorl	%eax, %eax
    00000ba3: 	callq	__printf_chk@PLT # Offset: 2979
.Ltmp4072:
    00000ba8: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000baf: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000bb6: 	subq	$0x20, %rax
    00000bba: 	cmpq	%rax, %rbx
    00000bbd: 	je	.Ltmp4073 # Offset: 3005
    00000bc3: 	leaq	0x10(%rbx), %rdi
    00000bc7: 	movq	0x1b8(%rsp), %r12
    00000bcf: 	movq	%rdi, (%rbx)
    00000bd2: 	movq	0x1b0(%rsp), %rbp
    00000bda: 	movq	%rbp, %rax
    00000bdd: 	addq	%r12, %rax
    00000be0: 	je	.Ltmp4074 # Offset: 3040
    00000be2: 	testq	%rbp, %rbp
    00000be5: 	je	.Ltmp4075 # Offset: 3045
.Ltmp4074:
    00000beb: 	movq	%r12, 0x188(%rsp)
    00000bf3: 	cmpq	$0xf, %r12
    00000bf7: 	ja	.Ltmp4076 # Offset: 3063
    00000bfd: 	cmpq	$0x1, %r12
    00000c01: 	jne	.Ltmp4077 # Offset: 3073
    00000c07: 	movzbl	(%rbp), %eax
    00000c0b: 	movb	%al, 0x10(%rbx)
.Ltmp4197:
    00000c0e: 	movq	%r12, 0x8(%rbx)
    00000c12: 	movb	$0x0, (%rdi,%r12)
    00000c17: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000c1e: 	addq	$0x20, %rax
    00000c22: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp4187:
    00000c29: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000c30: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000c37: 	je	.Ltmp4078 # Offset: 3127
.Ltmp4185:
    00000c3d: 	movq	-0x20(%rax), %rbp
    00000c41: 	callq	clock@PLT # Offset: 3137
    00000c46: 	pxor	%xmm0, %xmm0
    00000c4a: 	movq	%rax, end_time(%rip)
    00000c51: 	movq	%rbp, %rdi
    00000c54: 	subq	start_time(%rip), %rax
    00000c5b: 	cvtsi2sd	%rax, %xmm0
    00000c60: 	divsd	DATAat0x38a48(%rip), %xmm0
    00000c68: 	callq	_Z13record_resultdPKc # Offset: 3176
    00000c6d: 	movq	0x1b0(%rsp), %rdi
    00000c75: 	cmpq	0x70(%rsp), %rdi
    00000c7a: 	je	.Ltmp4079 # Offset: 3194
    00000c7c: 	movq	0x1c0(%rsp), %rax
    00000c84: 	leaq	0x1(%rax), %rsi
    00000c88: 	callq	_ZdlPvm@PLT # Offset: 3208
.Ltmp4079:
    00000c8d: 	movq	0x70(%rsp), %rax
    00000c92: 	movq	0x190(%rsp), %rbp
    00000c9a: 	movq	0x198(%rsp), %r12
    00000ca2: 	movq	%rax, 0x1b0(%rsp)
    00000caa: 	movq	%rbp, %rax
    00000cad: 	addq	%r12, %rax
    00000cb0: 	je	.Ltmp4080 # Offset: 3248
    00000cb2: 	testq	%rbp, %rbp
    00000cb5: 	je	.Ltmp4081 # Offset: 3253
.Ltmp4080:
    00000cbb: 	movq	%r12, 0x188(%rsp)
    00000cc3: 	cmpq	$0xf, %r12
    00000cc7: 	ja	.Ltmp4082 # Offset: 3271
    00000ccd: 	cmpq	$0x1, %r12
    00000cd1: 	jne	.Ltmp4083 # Offset: 3281
    00000cd7: 	movzbl	(%rbp), %eax
    00000cdb: 	movb	%al, 0x1c0(%rsp)
    00000ce2: 	movq	0x70(%rsp), %rax
.Ltmp4179:
    00000ce7: 	movq	%r12, 0x1b8(%rsp)
    00000cef: 	movb	$0x0, (%rax,%r12)
    00000cf4: 	movabsq	$0x3fffffffffffffff, %rax
    00000cfe: 	subq	0x1b8(%rsp), %rax
    00000d06: 	cmpq	$0x11, %rax
    00000d0a: 	jbe	.Ltmp4084 # Offset: 3338
    00000d10: 	movq	0xa8(%rsp), %rdi
    00000d18: 	movl	$0x12, %edx
    00000d1d: 	leaq	DATAat0x387d4(%rip), %rsi
    00000d24: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3364
    00000d29: 	callq	clock@PLT # Offset: 3369
    00000d2e: 	movq	%rax, start_time(%rip)
    00000d35: 	movl	iterations(%rip), %eax
    00000d3b: 	movl	%eax, 0x58(%rsp)
    00000d3f: 	testl	%eax, %eax
    00000d41: 	jle	.Ltmp4085 # Offset: 3393
    00000d47: 	movzbl	0x78(%rsp), %eax
    00000d4c: 	movl	$0x0, 0x20(%rsp)
    00000d54: 	leal	(,%rax,8), %edx
    00000d5b: 	subl	%eax, %edx
    00000d5d: 	movq	0x30(%rsp), %rax
    00000d62: 	movw	%dx, 0x38(%rsp)
    00000d67: 	addq	$0x18f, %rax
    00000d6d: 	movq	%rax, 0x78(%rsp)
    00000d72: 	leaq	0x2745d(%rsp), %rax
    00000d7a: 	movq	%rax, 0x80(%rsp)
    00000d82: 	leaq	0x1ce(%rsp), %rax
    00000d8a: 	movq	%rax, 0x40(%rsp)
    00000d8f: 	leaq	0x1cf(%rsp), %rax
    00000d97: 	movq	%rax, 0x48(%rsp)
    00000d9c: 	leaq	0x1cd(%rsp), %rax
    00000da4: 	movq	%rax, 0x60(%rsp)
    00000da9: 	nopl	(%rax) # Size: 7
.Ltmp4106:
    00000db0: 	movl	0x80(%rsp), %eax
    00000db7: 	xorl	%r10d, %r10d
    00000dba: 	movl	$0xfffffffd, 0x18(%rsp)
    00000dc2: 	movl	$0x0, 0x8(%rsp)
    00000dca: 	movq	0x28(%rsp), %rbx
    00000dcf: 	movq	0x78(%rsp), %rbp
    00000dd4: 	movq	0x30(%rsp), %r12
    00000dd9: 	movl	%eax, 0x10(%rsp)
    00000ddd: 	movzbl	0x50(%rsp), %edx
    00000de2: 	testl	%r10d, %r10d
    00000de5: 	je	.Ltmp4086 # Offset: 3557
    00000deb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4098:
    00000df0: 	movzbl	-0x190(%rbx), %edi
    00000df7: 	movzbl	-0x18f(%rbx), %eax
    00000dfe: 	movzbl	0x1(%rbx), %ecx
    00000e02: 	leal	(%rdi,%rdi,2), %edi
    00000e05: 	leal	(%rax,%rdi,2), %edi
    00000e08: 	leal	(%rdx,%rdx,2), %eax
    00000e0b: 	leal	(%rcx,%rcx,4), %esi
    00000e0e: 	leal	(%rdx,%rax,4), %edx
    00000e11: 	addl	%edx, %esi
    00000e13: 	addl	%edi, %esi
    00000e15: 	cmpl	$0x18f, %r10d
    00000e1c: 	jne	.Ltmp4087 # Offset: 3612
    00000e22: 	leal	(%rcx,%rax,2), %eax
    00000e25: 	addl	%esi, %eax
.Ltmp4099:
    00000e27: 	leal	0x80(,%rax,8), %eax
    00000e2e: 	movzbl	(%rbx), %r11d
    00000e32: 	movzbl	%ah, %eax
    00000e35: 	movb	%al, (%r12)
    00000e39: 	movl	0x8(%rsp), %eax
    00000e3d: 	leal	0x192(%rax), %edi
    00000e43: 	leal	-0x18f(%rax), %esi
    00000e49: 	leal	-0x18e(%rax), %r13d
    00000e50: 	movl	$0x3, %eax
.Ltmp4101:
    00000e55: 	testl	%r10d, %r10d
    00000e58: 	je	.Ltmp4088 # Offset: 3672
.Ltmp4091:
    00000e5e: 	movslq	%esi, %r8
    00000e61: 	movl	%r11d, %r15d
    00000e64: 	movzbl	-0x1(%rax,%rbx), %r11d
    00000e6a: 	movzbl	0x1d0(%rsp,%r8), %edx
    00000e73: 	addl	%r11d, %r15d
    00000e76: 	leal	(%rdx,%rdx,4), %r9d
    00000e7a: 	movslq	%r13d, %rdx
    00000e7d: 	movzbl	0x1d0(%rsp,%rdx), %r14d
    00000e86: 	addl	%r14d, %r9d
    00000e89: 	leal	-0x1(%rsi), %r14d
    00000e8d: 	movslq	%r14d, %r14
    00000e90: 	movzbl	0x1d0(%rsp,%r14), %r14d
    00000e99: 	addl	%r14d, %r9d
    00000e9c: 	movl	%ecx, %r14d
    00000e9f: 	leal	(%r15,%r15,4), %ecx
    00000ea3: 	leal	(%rcx,%r14,8), %ecx
    00000ea7: 	addl	%r9d, %ecx
    00000eaa: 	cmpl	$0x18f, %r10d
    00000eb1: 	jne	.Ltmp4089 # Offset: 3761
    00000eb7: 	leal	(%r14,%r14,4), %r9d
    00000ebb: 	addl	%r15d, %r9d
    00000ebe: 	movl	%eax, %r15d
    00000ec1: 	leal	0x10(%rcx,%r9), %ecx
    00000ec6: 	movzwl	%cx, %ecx
    00000ec9: 	sarl	$0x5, %ecx
    00000ecc: 	movb	%cl, -0x2(%r12,%rax)
.Ltmp4129:
    00000ed1: 	movzbl	0x1d0(%rsp,%rdx), %edx
    00000ed9: 	addl	$0x2, %esi
    00000edc: 	movslq	%edi, %r9
    00000edf: 	movzbl	0x1d0(%rsp,%r8), %ecx
    00000ee8: 	leal	(%rdx,%rdx,4), %edx
    00000eeb: 	addl	%ecx, %edx
    00000eed: 	movslq	%esi, %rcx
    00000ef0: 	movzbl	0x1d0(%rsp,%rcx), %r8d
    00000ef9: 	movzbl	(%rbx,%rax), %ecx
    00000efd: 	addl	%ecx, %r14d
    00000f00: 	addl	%edx, %r8d
    00000f03: 	leal	(%r14,%r14,4), %edx
    00000f07: 	leal	(%rdx,%r11,8), %edx
    00000f0b: 	addl	%r8d, %edx
    00000f0e: 	leal	-0x1(%rdi), %r8d
    00000f12: 	cmpl	$0x18f, %r10d
    00000f19: 	jne	.Ltmp4090 # Offset: 3865
    00000f1f: 	leal	(%r11,%r11,4), %r8d
    00000f23: 	addl	$0x2, %edi
    00000f26: 	addl	$0x2, %r13d
    00000f2a: 	addl	%r14d, %r8d
    00000f2d: 	leal	0x10(%rdx,%r8), %edx
    00000f32: 	movzwl	%dx, %edx
    00000f35: 	sarl	$0x5, %edx
    00000f38: 	movb	%dl, -0x1(%r12,%rax)
    00000f3d: 	addq	$0x2, %rax
    00000f41: 	cmpq	$0x18f, %rax
    00000f47: 	jne	.Ltmp4091 # Offset: 3911
.Ltmp4102:
    00000f4d: 	movl	0x8(%rsp), %eax
    00000f51: 	movl	0x10(%rsp), %edi
    00000f55: 	movslq	%r15d, %r9
    00000f58: 	leaq	0x18d(%r12), %rdx
    00000f60: 	leaq	0x18d(%rbx), %rcx
    00000f67: 	addq	0x28(%rsp), %r9
    00000f6c: 	leal	0x31c(%rax), %esi
    00000f72: 	movl	0x18(%rsp), %eax
    00000f76: 	movslq	%esi, %r8
    00000f79: 	movl	%eax, %r15d
    00000f7c: 	leal	-0x1(%rax), %r14d
    00000f80: 	leal	0x1(%rax), %r13d
    00000f84: 	subl	%edi, %r15d
    00000f87: 	subl	%edi, %r14d
    00000f8a: 	subl	%edi, %r13d
    00000f8d: 	jmp	.Ltmp4092 # Offset: 3981
    00000f92: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4095:
    00000f98: 	leal	(%r15,%rdx), %eax
    00000f9c: 	leal	(%r14,%rdx), %esi
    00000fa0: 	movzbl	(%rcx), %edi
    00000fa3: 	cltq
    00000fa5: 	movslq	%esi, %rsi
    00000fa8: 	movzbl	0x1d0(%rsp,%rax), %eax
    00000fb0: 	movzbl	0x1d0(%rsp,%rsi), %esi
    00000fb8: 	leal	(%rax,%rax,4), %eax
    00000fbb: 	addl	%esi, %eax
    00000fbd: 	leal	(%r13,%rdx), %esi
    00000fc2: 	movslq	%esi, %rsi
    00000fc5: 	movzbl	0x1d0(%rsp,%rsi), %r11d
    00000fce: 	movzbl	0x1(%rcx), %esi
    00000fd2: 	addl	%eax, %r11d
    00000fd5: 	movzbl	-0x1(%rcx), %eax
    00000fd9: 	addl	%eax, %esi
    00000fdb: 	leal	(%rsi,%rsi,4), %eax
    00000fde: 	leal	(%rax,%rdi,8), %eax
    00000fe1: 	addl	%r11d, %eax
    00000fe4: 	cmpl	$0x18f, %r10d
    00000feb: 	jne	.Ltmp4093 # Offset: 4075
    00000fed: 	leal	(%rdi,%rdi,4), %edi
    00000ff0: 	addq	$0x1, %rdx
    00000ff4: 	addq	$0x1, %rcx
    00000ff8: 	addq	$0x1, %r9
    00000ffc: 	addl	%esi, %edi
    00000ffe: 	leal	0x10(%rax,%rdi), %eax
    00001002: 	leal	0x1(%r8), %edi
    00001006: 	movzwl	%ax, %eax
    00001009: 	sarl	$0x5, %eax
    0000100c: 	movb	%al, -0x1(%rdx)
    0000100f: 	cmpq	%rbp, %rdx
    00001012: 	je	.Ltmp4094 # Offset: 4114
.Ltmp4096:
    00001018: 	movslq	%edi, %r8
.Ltmp4092:
    0000101b: 	testl	%r10d, %r10d
    0000101e: 	jne	.Ltmp4095 # Offset: 4126
    00001024: 	movzbl	0x1(%r9), %eax
    00001029: 	movzbl	-0x1(%r9), %esi
    0000102e: 	movzbl	0x1(%rcx), %edi
    00001032: 	addl	%eax, %esi
    00001034: 	movzbl	(%r9), %eax
    00001038: 	leal	(%rax,%rax,4), %eax
    0000103b: 	addl	%eax, %esi
    0000103d: 	movzbl	-0x1(%rcx), %eax
    00001041: 	addl	%edi, %eax
    00001043: 	movzbl	(%rcx), %edi
    00001046: 	leal	(%rax,%rax,4), %eax
    00001049: 	leal	(%rax,%rdi,8), %eax
    0000104c: 	addl	%esi, %eax
.Ltmp4093:
    0000104e: 	leal	0x2(%r8), %esi
    00001052: 	leal	0x1(%r8), %edi
    00001056: 	addq	$0x1, %rdx
    0000105a: 	addq	$0x1, %rcx
    0000105e: 	movzbl	0x1d0(%rsp,%r8), %r8d
    00001067: 	movslq	%esi, %rsi
    0000106a: 	addq	$0x1, %r9
    0000106e: 	movzbl	0x1d0(%rsp,%rsi), %esi
    00001076: 	addl	%r8d, %esi
    00001079: 	movslq	%edi, %r8
    0000107c: 	movzbl	0x1d0(%rsp,%r8), %r8d
    00001085: 	leal	(%r8,%r8,4), %r8d
    00001089: 	addl	%r8d, %esi
    0000108c: 	leal	0x10(%rax,%rsi), %eax
    00001090: 	movzwl	%ax, %eax
    00001093: 	sarl	$0x5, %eax
    00001096: 	movb	%al, -0x1(%rdx)
    00001099: 	cmpq	%rdx, %rbp
    0000109c: 	jne	.Ltmp4096 # Offset: 4252
    000010a2: 	movzwl	0x38(%rsp), %ecx
    000010a7: 	testl	%r10d, %r10d
    000010aa: 	jne	.Ltmp4094 # Offset: 4266
.Ltmp4103:
    000010b0: 	movzbl	0x18e(%rbx), %edx
    000010b7: 	movzbl	0x18f(%rbx), %esi
    000010be: 	addq	$0x190, %r12
    000010c5: 	addq	$0x190, %rbx
    000010cc: 	addl	$0x190, 0x8(%rsp)
    000010d4: 	addq	$0x190, %rbp
    000010db: 	leal	(%rdx,%rdx,4), %eax
    000010de: 	leal	(%rsi,%rsi,4), %edi
    000010e1: 	addl	$0x190, 0x18(%rsp)
    000010e9: 	leal	(%rax,%rsi,8), %eax
    000010ec: 	addl	$0x190, 0x10(%rsp)
    000010f4: 	addl	%edi, %eax
    000010f6: 	addl	%ecx, %eax
    000010f8: 	cmpl	$0x18f, %r10d
    000010ff: 	je	.Ltmp4097 # Offset: 4351
    00001105: 	movzbl	0x18f(%rbx), %ecx
    0000110c: 	movzbl	0x18e(%rbx), %edx
    00001113: 	addl	$0x1, %r10d
    00001117: 	leal	0x10(%rdx,%rcx), %edx
    0000111b: 	leal	(%rcx,%rcx,4), %ecx
    0000111e: 	addl	%ecx, %edx
    00001120: 	addl	%edx, %eax
    00001122: 	movzbl	(%rbx), %edx
    00001125: 	movzwl	%ax, %eax
    00001128: 	sarl	$0x5, %eax
    0000112b: 	movb	%al, -0x1(%r12)
    00001130: 	testl	%r10d, %r10d
    00001133: 	jne	.Ltmp4098 # Offset: 4403
.Ltmp4086:
    00001139: 	movzbl	0x1(%rbx), %ecx
    0000113d: 	leal	(%rdx,%rdx,2), %eax
    00001140: 	leal	(%rdx,%rax,4), %eax
    00001143: 	leal	(%rcx,%rcx,4), %esi
    00001146: 	addl	%eax, %esi
    00001148: 	addw	0x38(%rsp), %si
.Ltmp4087:
    0000114d: 	movzbl	0x190(%rbx), %edx
    00001154: 	movzbl	0x191(%rbx), %eax
    0000115b: 	addl	%edx, %eax
    0000115d: 	leal	(%rdx,%rdx,4), %edx
    00001160: 	addl	%edx, %eax
    00001162: 	addl	%esi, %eax
    00001164: 	jmp	.Ltmp4099 # Offset: 4452
    00001169: 	nopl	(%rax) # Size: 7
.Ltmp4088:
    00001170: 	movq	0x48(%rsp), %r14
    00001175: 	movq	0x60(%rsp), %rdx
    0000117a: 	movzbl	(%r14,%rax), %r8d
    0000117f: 	movzbl	(%rdx,%rax), %edx
    00001183: 	movq	0x40(%rsp), %r14
    00001188: 	addl	%r8d, %edx
    0000118b: 	movzbl	(%r14,%rax), %r8d
    00001190: 	movl	%ecx, %r14d
    00001193: 	leal	(%r8,%r8,4), %r8d
    00001197: 	addl	%r8d, %edx
    0000119a: 	movl	%r11d, %r8d
    0000119d: 	movzbl	-0x1(%rax,%rbx), %r11d
    000011a3: 	leal	(%r8,%r11), %ecx
    000011a7: 	leal	(%rcx,%rcx,4), %ecx
    000011aa: 	leal	(%rcx,%r14,8), %ecx
    000011ae: 	addl	%edx, %ecx
.Ltmp4089:
    000011b0: 	leal	-0x2(%rdi), %edx
    000011b3: 	movslq	%edi, %r9
    000011b6: 	movzbl	0x1d0(%rsp,%r9), %r8d
    000011bf: 	movslq	%edx, %rdx
    000011c2: 	movzbl	0x1d0(%rsp,%rdx), %edx
    000011ca: 	addl	%r8d, %edx
    000011cd: 	leal	-0x1(%rdi), %r8d
    000011d1: 	movslq	%r8d, %r15
    000011d4: 	movzbl	0x1d0(%rsp,%r15), %r15d
    000011dd: 	leal	(%r15,%r15,4), %r15d
    000011e1: 	addl	%r15d, %edx
    000011e4: 	movl	%eax, %r15d
    000011e7: 	leal	0x10(%rcx,%rdx), %edx
    000011eb: 	movzwl	%dx, %edx
    000011ee: 	sarl	$0x5, %edx
    000011f1: 	movb	%dl, -0x2(%r12,%rax)
    000011f6: 	testl	%r10d, %r10d
    000011f9: 	jne	.Ltmp4100 # Offset: 4601
    000011ff: 	movq	0x28(%rsp), %rcx
    00001204: 	addl	$0x2, %esi
    00001207: 	movzbl	(%rcx,%rax), %edx
    0000120b: 	movq	0x40(%rsp), %rcx
    00001210: 	movzbl	(%rcx,%rax), %ecx
    00001214: 	addl	%ecx, %edx
    00001216: 	movq	0x48(%rsp), %rcx
    0000121b: 	movzbl	(%rcx,%rax), %ecx
    0000121f: 	leal	(%rcx,%rcx,4), %ecx
    00001222: 	addl	%ecx, %edx
    00001224: 	movzbl	(%rbx,%rax), %ecx
    00001228: 	addl	%ecx, %r14d
    0000122b: 	leal	(%r14,%r14,4), %r14d
    0000122f: 	leal	(%r14,%r11,8), %r14d
    00001233: 	addl	%r14d, %edx
.Ltmp4090:
    00001236: 	leal	0x1(%rdi), %r14d
    0000123a: 	movslq	%r8d, %r8
    0000123d: 	addl	$0x2, %edi
    00001240: 	addl	$0x2, %r13d
    00001244: 	movzbl	0x1d0(%rsp,%r8), %r8d
    0000124d: 	movslq	%r14d, %r14
    00001250: 	movzbl	0x1d0(%rsp,%r9), %r9d
    00001259: 	movzbl	0x1d0(%rsp,%r14), %r14d
    00001262: 	leal	(%r9,%r9,4), %r9d
    00001266: 	addl	%r14d, %r8d
    00001269: 	addl	%r9d, %r8d
    0000126c: 	leal	0x10(%rdx,%r8), %edx
    00001271: 	movzwl	%dx, %edx
    00001274: 	sarl	$0x5, %edx
    00001277: 	movb	%dl, -0x1(%r12,%rax)
    0000127c: 	addq	$0x2, %rax
    00001280: 	cmpq	$0x18f, %rax
    00001286: 	jne	.Ltmp4101 # Offset: 4742
    0000128c: 	jmp	.Ltmp4102 # Offset: 4748
    00001291: 	nopl	(%rax) # Size: 7
.Ltmp4094:
    00001298: 	movzbl	-0x1(%rbx), %eax
    0000129c: 	movzbl	-0x2(%rbx), %ecx
    000012a0: 	addl	%eax, %ecx
    000012a2: 	leal	(%rax,%rax,4), %eax
    000012a5: 	addl	%eax, %ecx
    000012a7: 	jmp	.Ltmp4103 # Offset: 4775
    000012ac: 	nopl	(%rax) # Size: 4
.Ltmp4068:
    000012b0: 	movzbl	0x2(%rax), %ecx
    000012b4: 	addq	$0x1, %rax
    000012b8: 	movq	0x30(%rsp), %rbx
    000012bd: 	addl	$0x1, %esi
    000012c0: 	movzbl	0x18f(%rax), %r8d
    000012c8: 	addl	%ecx, %edx
    000012ca: 	movzbl	0x190(%rax), %ecx
    000012d1: 	leal	(%r8,%r8,4), %r9d
    000012d5: 	leal	(%r9,%rcx,8), %r9d
    000012d9: 	leal	(%rcx,%rcx,4), %ecx
    000012dc: 	addl	%edx, %r9d
    000012df: 	movzbl	0x191(%rax), %edx
    000012e6: 	leal	(%rdx,%rdx,4), %r10d
    000012ea: 	addl	%r10d, %r9d
    000012ed: 	addl	%r9d, %r8d
    000012f0: 	addl	%r8d, %ecx
    000012f3: 	leal	0x10(%rdx,%rcx), %edx
    000012f7: 	movzbl	0x1(%rax), %ecx
    000012fb: 	movzwl	%dx, %edx
    000012fe: 	sarl	$0x5, %edx
    00001301: 	movb	%dl, (%rbx,%rdi)
    00001304: 	addq	$0x1, %rdi
    00001308: 	leal	(%rcx,%rcx,4), %edx
    0000130b: 	testl	%esi, %esi
    0000130d: 	jne	.Ltmp4104 # Offset: 4877
.Ltmp4067:
    00001313: 	movzbl	0x2(%rax), %ecx
    00001317: 	addw	0x48(%rsp), %dx
    0000131c: 	addq	$0x1, %rax
    00001320: 	movzwl	0x60(%rsp), %ebx
    00001325: 	addl	%ecx, %edx
    00001327: 	movzbl	0x190(%rax), %ecx
    0000132e: 	leal	(%rbx,%rcx,8), %r8d
    00001332: 	movq	0x30(%rsp), %rbx
    00001337: 	addl	%edx, %r8d
    0000133a: 	movzbl	0x191(%rax), %edx
    00001341: 	leal	(%rdx,%rdx,4), %esi
    00001344: 	addl	%r8d, %esi
    00001347: 	leal	(%rcx,%rcx,4), %r8d
    0000134b: 	addl	%r8d, %esi
    0000134e: 	addl	%esi, %ecx
    00001350: 	movl	$0x1, %esi
    00001355: 	leal	0x10(%rdx,%rcx), %edx
    00001359: 	movzwl	%dx, %edx
    0000135c: 	sarl	$0x5, %edx
    0000135f: 	movb	%dl, (%rbx,%rdi)
    00001362: 	addq	$0x1, %rdi
    00001366: 	jmp	.Ltmp4105 # Offset: 4966
    0000136b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4097:
    00001370: 	leal	0x10(%rdx,%rsi), %edx
    00001374: 	addl	$0x1, 0x20(%rsp)
    00001379: 	addl	%edi, %edx
    0000137b: 	addl	%edx, %eax
    0000137d: 	movzwl	%ax, %eax
    00001380: 	sarl	$0x5, %eax
    00001383: 	movb	%al, 0x4e3cf(%rsp)
    0000138a: 	movl	0x20(%rsp), %eax
    0000138e: 	cmpl	%eax, 0x58(%rsp)
    00001392: 	jne	.Ltmp4106 # Offset: 5010
.Ltmp4085:
    00001398: 	xorl	%ecx, %ecx
    0000139a: 	movq	0x68(%rsp), %r9
    0000139f: 	pxor	%xmm3, %xmm3
    000013a3: 	pxor	%xmm2, %xmm2
    000013a7: 	movq	0x140(%rsp), %rsi
    000013af: 	movq	0x148(%rsp), %rdx
    000013b7: 	movl	%ecx, %r8d
    000013ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4108:
    000013c0: 	movq	%rsi, %rax
    000013c3: 	pxor	%xmm0, %xmm0
    000013c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4107:
    000013d0: 	movdqu	(%rax), %xmm4
    000013d4: 	addq	$0x10, %rax
    000013d8: 	paddb	%xmm4, %xmm0
    000013dc: 	cmpq	%rdx, %rax
    000013df: 	jne	.Ltmp4107 # Offset: 5087
    000013e1: 	movdqa	%xmm0, %xmm1
    000013e5: 	addq	$0x190, %rsi
    000013ec: 	psrldq	$0x8, %xmm1
    000013f1: 	paddb	%xmm1, %xmm0
    000013f5: 	psadbw	%xmm3, %xmm0
    000013f9: 	movd	%xmm0, %edx
    000013fd: 	movq	(%rax), %xmm0
    00001401: 	movdqa	%xmm0, %xmm4
    00001405: 	psadbw	%xmm2, %xmm4
    00001409: 	movq	%xmm4, 0x170(%rsp)
    00001412: 	movzbl	0x9(%rax), %ecx
    00001416: 	addb	0x8(%rax), %cl
    00001419: 	movq	%xmm4, %rdi
    0000141e: 	addl	%r8d, %ecx
    00001421: 	addb	0xa(%rax), %cl
    00001424: 	addb	0xb(%rax), %cl
    00001427: 	movl	%edi, %r10d
    0000142a: 	addb	0xc(%rax), %cl
    0000142d: 	addb	0xd(%rax), %cl
    00001430: 	addl	%ecx, %edx
    00001432: 	leal	(%rdx,%r10), %r8d
    00001436: 	leaq	0x190(%rax), %rdx
    0000143d: 	cmpq	%r9, %rdx
    00001440: 	jne	.Ltmp4108 # Offset: 5184
    00001446: 	cvttsd2si	init_value(%rip), %eax
    0000144e: 	movl	%eax, %edx
    00001450: 	shll	$0x4, %edx
    00001453: 	subl	%edx, %eax
    00001455: 	shll	$0x2, %eax
    00001458: 	cmpb	%r8b, %al
    0000145b: 	je	.Ltmp4109 # Offset: 5211
    0000145d: 	movq	0x1b0(%rsp), %rdx
    00001465: 	leaq	DATAat0x381c8(%rip), %rsi
    0000146c: 	movl	$0x1, %edi
    00001471: 	xorl	%eax, %eax
    00001473: 	callq	__printf_chk@PLT # Offset: 5235
.Ltmp4109:
    00001478: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000147f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00001486: 	subq	$0x20, %rax
    0000148a: 	cmpq	%rax, %rbx
    0000148d: 	je	.Ltmp4110 # Offset: 5261
    00001493: 	leaq	0x10(%rbx), %rdi
    00001497: 	movq	0x1b8(%rsp), %r12
    0000149f: 	movq	%rdi, (%rbx)
    000014a2: 	movq	0x1b0(%rsp), %rbp
    000014aa: 	movq	%rbp, %rax
    000014ad: 	addq	%r12, %rax
    000014b0: 	je	.Ltmp4111 # Offset: 5296
    000014b2: 	testq	%rbp, %rbp
    000014b5: 	je	.Ltmp4112 # Offset: 5301
.Ltmp4111:
    000014bb: 	movq	%r12, 0x188(%rsp)
    000014c3: 	cmpq	$0xf, %r12
    000014c7: 	ja	.Ltmp4113 # Offset: 5319
    000014cd: 	cmpq	$0x1, %r12
    000014d1: 	jne	.Ltmp4114 # Offset: 5329
    000014d7: 	movzbl	(%rbp), %eax
    000014db: 	movb	%al, 0x10(%rbx)
.Ltmp4199:
    000014de: 	movq	%r12, 0x8(%rbx)
    000014e2: 	movb	$0x0, (%rdi,%r12)
    000014e7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000014ee: 	addq	$0x20, %rax
    000014f2: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp4189:
    000014f9: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001500: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001507: 	je	.Ltmp4115 # Offset: 5383
.Ltmp4188:
    0000150d: 	movq	-0x20(%rax), %rbp
    00001511: 	callq	clock@PLT # Offset: 5393
    00001516: 	pxor	%xmm0, %xmm0
    0000151a: 	movq	%rax, end_time(%rip)
    00001521: 	movq	%rbp, %rdi
    00001524: 	subq	start_time(%rip), %rax
    0000152b: 	cvtsi2sd	%rax, %xmm0
    00001530: 	divsd	DATAat0x38a48(%rip), %xmm0
    00001538: 	callq	_Z13record_resultdPKc # Offset: 5432
    0000153d: 	movq	0x1b0(%rsp), %rdi
    00001545: 	cmpq	0x70(%rsp), %rdi
    0000154a: 	je	.Ltmp4116 # Offset: 5450
    0000154c: 	movq	0x1c0(%rsp), %rax
    00001554: 	leaq	0x1(%rax), %rsi
    00001558: 	callq	_ZdlPvm@PLT # Offset: 5464
.Ltmp4116:
    0000155d: 	movq	0x70(%rsp), %rax
    00001562: 	movq	0x190(%rsp), %rbp
    0000156a: 	movq	0x198(%rsp), %r12
    00001572: 	movq	%rax, 0x1b0(%rsp)
    0000157a: 	movq	%rbp, %rax
    0000157d: 	addq	%r12, %rax
    00001580: 	je	.Ltmp4117 # Offset: 5504
    00001582: 	testq	%rbp, %rbp
    00001585: 	je	.Ltmp4118 # Offset: 5509
.Ltmp4117:
    0000158b: 	movq	%r12, 0x188(%rsp)
    00001593: 	cmpq	$0xf, %r12
    00001597: 	ja	.Ltmp4119 # Offset: 5527
    0000159d: 	cmpq	$0x1, %r12
    000015a1: 	jne	.Ltmp4120 # Offset: 5537
    000015a7: 	movzbl	(%rbp), %eax
    000015ab: 	movb	%al, 0x1c0(%rsp)
    000015b2: 	movq	0x70(%rsp), %rax
.Ltmp4182:
    000015b7: 	movq	%r12, 0x1b8(%rsp)
    000015bf: 	movb	$0x0, (%rax,%r12)
    000015c4: 	movabsq	$0x3fffffffffffffff, %rax
    000015ce: 	subq	0x1b8(%rsp), %rax
    000015d6: 	cmpq	$0x11, %rax
    000015da: 	jbe	.Ltmp4121 # Offset: 5594
    000015e0: 	movq	0xa8(%rsp), %rdi
    000015e8: 	movl	$0x12, %edx
    000015ed: 	leaq	DATAat0x387e7(%rip), %rsi
    000015f4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5620
    000015f9: 	callq	clock@PLT # Offset: 5625
    000015fe: 	movq	%rax, start_time(%rip)
    00001605: 	movl	iterations(%rip), %eax
    0000160b: 	movl	%eax, 0xb4(%rsp)
    00001612: 	testl	%eax, %eax
    00001614: 	jle	.Ltmp4122 # Offset: 5652
    0000161a: 	movzbl	0x1d0(%rsp), %eax
    00001622: 	movzbl	0x1d1(%rsp), %edx
    0000162a: 	pxor	%xmm0, %xmm0
    0000162e: 	movzbl	0x360(%rsp), %ebx
    00001636: 	movzbl	0x361(%rsp), %edi
    0000163e: 	leal	0x10(%rdx,%rax), %ecx
    00001642: 	movb	%al, 0xb8(%rsp)
    00001649: 	leal	(%rax,%rax,8), %eax
    0000164c: 	movzbl	0x4ee(%rsp), %r15d
    00001655: 	addl	%ebx, %ecx
    00001657: 	addl	%ebx, %edx
    00001659: 	movw	%bx, 0xbc(%rsp)
    00001661: 	movzbl	0x35f(%rsp), %ebx
    00001669: 	addl	%edi, %ecx
    0000166b: 	leal	(%rdx,%rdx,4), %edx
    0000166e: 	movw	%di, 0x13e(%rsp)
    00001676: 	movzbl	0x35e(%rsp), %edi
    0000167e: 	leal	(%rcx,%rax,2), %eax
    00001681: 	movzbl	0x4ef(%rsp), %r14d
    0000168a: 	movzbl	0x26fb1(%rsp), %esi
    00001692: 	addl	%edx, %eax
    00001694: 	leal	0x10(%rdi,%rbx), %edx
    00001698: 	movzbl	0x27141(%rsp), %ecx
    000016a0: 	movzbl	0x272ce(%rsp), %r8d
    000016a9: 	shrl	$0x5, %eax
    000016ac: 	addl	%r15d, %edx
    000016af: 	movzbl	0x272cf(%rsp), %r9d
    000016b8: 	movzbl	0x4e2(%rsp), %ebp
    000016c0: 	andl	$0xff, %eax
    000016c5: 	addl	%r14d, %edx
    000016c8: 	movzbl	0x4e1(%rsp), %r11d
    000016d1: 	movl	%eax, 0xc0(%rsp)
    000016d8: 	leal	(%rbx,%rbx,8), %eax
    000016db: 	leal	(%rdx,%rax,2), %eax
    000016de: 	leal	(%rdi,%r14), %edx
    000016e2: 	leal	(%rdx,%rdx,4), %edx
    000016e5: 	addl	%edx, %eax
    000016e7: 	movzbl	0x26fb0(%rsp), %edx
    000016ef: 	shrl	$0x5, %eax
    000016f2: 	andl	$0xff, %eax
    000016f7: 	leal	(%rdx,%rdx,2), %edx
    000016fa: 	movl	%eax, 0xc4(%rsp)
    00001701: 	movzbl	0x27140(%rsp), %eax
    00001709: 	leal	0x10(%rsi,%rax), %esi
    0000170d: 	leal	(%rax,%rax,8), %eax
    00001710: 	addl	%ecx, %esi
    00001712: 	leal	(%rcx,%rcx,4), %ecx
    00001715: 	leal	(%rsi,%rdx,2), %edx
    00001718: 	movzbl	0x2713f(%rsp), %esi
    00001720: 	leal	(%rdx,%rax,2), %eax
    00001723: 	addl	%ecx, %eax
    00001725: 	movzbl	0x2713e(%rsp), %ecx
    0000172d: 	movw	%si, 0x10(%rsp)
    00001732: 	shrl	$0x5, %eax
    00001735: 	leal	0x10(%rcx,%rsi), %edx
    00001739: 	andl	$0xff, %eax
    0000173e: 	movw	%cx, 0x8(%rsp)
    00001743: 	movzbl	0x351(%rsp), %ecx
    0000174b: 	addl	%r8d, %edx
    0000174e: 	movl	%eax, 0xc8(%rsp)
    00001755: 	leal	(%r9,%r9,8), %eax
    00001759: 	addl	%r9d, %edx
    0000175c: 	leal	(%rdx,%rax,2), %eax
    0000175f: 	leal	(%rsi,%r8), %edx
    00001763: 	movzbl	0x352(%rsp), %esi
    0000176b: 	leal	(%rdx,%rdx,4), %edx
    0000176e: 	addl	%edx, %eax
    00001770: 	leal	(%rcx,%r11), %edx
    00001774: 	movzwl	%ax, %eax
    00001777: 	sarl	$0x5, %eax
    0000177a: 	movl	%eax, 0x15c(%rsp)
    00001781: 	movzbl	0x350(%rsp), %eax
    00001789: 	leal	(%rax,%rsi), %r10d
    0000178d: 	movzbl	0x4e0(%rsp), %eax
    00001795: 	addl	%r10d, %edx
    00001798: 	leal	0x10(%rbp,%rax), %eax
    0000179c: 	leal	(%rdx,%rdx,4), %edx
    0000179f: 	leal	(%rax,%rcx,8), %eax
    000017a2: 	addl	%r10d, %eax
    000017a5: 	addl	%edx, %eax
    000017a7: 	leal	(%rsi,%rbp), %edx
    000017aa: 	shrl	$0x5, %eax
    000017ad: 	andl	$0xff, %eax
    000017b2: 	movl	%eax, 0x10c(%rsp)
    000017b9: 	movzbl	0x353(%rsp), %r10d
    000017c2: 	movzbl	0x4e3(%rsp), %r12d
    000017cb: 	movzbl	0x4e4(%rsp), %r13d
    000017d4: 	addl	%r10d, %ecx
    000017d7: 	leal	0x10(%r11,%r12), %eax
    000017dc: 	addl	%ecx, %edx
    000017de: 	movzbl	0x354(%rsp), %r11d
    000017e7: 	leal	(%rax,%rsi,8), %eax
    000017ea: 	leal	(%rdx,%rdx,4), %edx
    000017ed: 	addl	%ecx, %eax
    000017ef: 	leal	(%r10,%r12), %ecx
    000017f3: 	addl	%edx, %eax
    000017f5: 	leal	(%rsi,%r11), %edx
    000017f9: 	movzbl	0x355(%rsp), %esi
    00001801: 	shrl	$0x5, %eax
    00001804: 	addl	%edx, %ecx
    00001806: 	andl	$0xff, %eax
    0000180b: 	leal	(%rcx,%rcx,4), %ecx
    0000180e: 	movl	%eax, 0x110(%rsp)
    00001815: 	leal	0x10(%rbp,%r13), %eax
    0000181a: 	movzbl	0x4e5(%rsp), %ebp
    00001822: 	leal	(%rax,%r10,8), %eax
    00001826: 	addl	%edx, %eax
    00001828: 	leal	(%r10,%rsi), %edx
    0000182c: 	movzbl	0x356(%rsp), %r10d
    00001835: 	addl	%ecx, %eax
    00001837: 	leal	(%r11,%r13), %ecx
    0000183b: 	shrl	$0x5, %eax
    0000183e: 	addl	%edx, %ecx
    00001840: 	andl	$0xff, %eax
    00001845: 	leal	(%rcx,%rcx,4), %ecx
    00001848: 	movl	%eax, 0x114(%rsp)
    0000184f: 	leal	0x10(%r12,%rbp), %eax
    00001854: 	movzbl	0x4e6(%rsp), %r12d
    0000185d: 	leal	(%rax,%r11,8), %eax
    00001861: 	addl	%edx, %eax
    00001863: 	leal	(%r11,%r10), %edx
    00001867: 	movzbl	0x357(%rsp), %r11d
    00001870: 	addl	%ecx, %eax
    00001872: 	leal	(%rsi,%rbp), %ecx
    00001875: 	shrl	$0x5, %eax
    00001878: 	addl	%edx, %ecx
    0000187a: 	andl	$0xff, %eax
    0000187f: 	leal	(%rcx,%rcx,4), %ecx
    00001882: 	movl	%eax, 0x118(%rsp)
    00001889: 	leal	0x10(%r13,%r12), %eax
    0000188e: 	movzbl	0x4e7(%rsp), %r13d
    00001897: 	leal	(%rax,%rsi,8), %eax
    0000189a: 	addl	%edx, %eax
    0000189c: 	leal	(%rsi,%r11), %edx
    000018a0: 	movzbl	0x358(%rsp), %esi
    000018a8: 	addl	%ecx, %eax
    000018aa: 	leal	(%r10,%r12), %ecx
    000018ae: 	shrl	$0x5, %eax
    000018b1: 	addl	%edx, %ecx
    000018b3: 	andl	$0xff, %eax
    000018b8: 	leal	(%rcx,%rcx,4), %ecx
    000018bb: 	movl	%eax, 0x11c(%rsp)
    000018c2: 	leal	0x10(%rbp,%r13), %eax
    000018c7: 	movzbl	0x4e8(%rsp), %ebp
    000018cf: 	leal	(%rax,%r10,8), %eax
    000018d3: 	addl	%edx, %eax
    000018d5: 	leal	(%r10,%rsi), %edx
    000018d9: 	movzbl	0x359(%rsp), %r10d
    000018e2: 	addl	%ecx, %eax
    000018e4: 	leal	(%r11,%r13), %ecx
    000018e8: 	shrl	$0x5, %eax
    000018eb: 	addl	%edx, %ecx
    000018ed: 	andl	$0xff, %eax
    000018f2: 	leal	(%rcx,%rcx,4), %ecx
    000018f5: 	movl	%eax, 0x120(%rsp)
    000018fc: 	leal	0x10(%r12,%rbp), %eax
    00001901: 	movzbl	0x4e9(%rsp), %r12d
    0000190a: 	leal	(%rax,%r11,8), %eax
    0000190e: 	addl	%edx, %eax
    00001910: 	leal	(%r11,%r10), %edx
    00001914: 	movzbl	0x35a(%rsp), %r11d
    0000191d: 	addl	%ecx, %eax
    0000191f: 	leal	(%rsi,%rbp), %ecx
    00001922: 	shrl	$0x5, %eax
    00001925: 	addl	%edx, %ecx
    00001927: 	andl	$0xff, %eax
    0000192c: 	leal	(%rcx,%rcx,4), %ecx
    0000192f: 	movl	%eax, 0x124(%rsp)
    00001936: 	leal	0x10(%r13,%r12), %eax
    0000193b: 	movzbl	0x4ea(%rsp), %r13d
    00001944: 	leal	(%rax,%rsi,8), %eax
    00001947: 	addl	%edx, %eax
    00001949: 	leal	(%rsi,%r11), %edx
    0000194d: 	movzbl	0x35b(%rsp), %esi
    00001955: 	addl	%ecx, %eax
    00001957: 	leal	(%r10,%r12), %ecx
    0000195b: 	shrl	$0x5, %eax
    0000195e: 	addl	%edx, %ecx
    00001960: 	andl	$0xff, %eax
    00001965: 	leal	(%rcx,%rcx,4), %ecx
    00001968: 	movl	%eax, 0x128(%rsp)
    0000196f: 	leal	0x10(%rbp,%r13), %eax
    00001974: 	movzbl	0x4eb(%rsp), %ebp
    0000197c: 	leal	(%rax,%r10,8), %eax
    00001980: 	addl	%edx, %eax
    00001982: 	leal	(%r10,%rsi), %edx
    00001986: 	movzbl	0x35c(%rsp), %r10d
    0000198f: 	addl	%ecx, %eax
    00001991: 	leal	(%r11,%r13), %ecx
    00001995: 	shrl	$0x5, %eax
    00001998: 	andl	$0xff, %eax
    0000199d: 	addl	%edx, %ecx
    0000199f: 	movl	%eax, 0x12c(%rsp)
    000019a6: 	leal	0x10(%r12,%rbp), %eax
    000019ab: 	leal	(%rcx,%rcx,4), %ecx
    000019ae: 	movzbl	0x4ec(%rsp), %r12d
    000019b7: 	leal	(%rax,%r11,8), %eax
    000019bb: 	addl	%edx, %eax
    000019bd: 	leal	(%r10,%r11), %edx
    000019c1: 	movzbl	0x35d(%rsp), %r11d
    000019ca: 	addl	%ecx, %eax
    000019cc: 	leal	(%rsi,%rbp), %ecx
    000019cf: 	shrl	$0x5, %eax
    000019d2: 	addl	%edx, %ecx
    000019d4: 	andl	$0xff, %eax
    000019d9: 	leal	(%rcx,%rcx,4), %ecx
    000019dc: 	movl	%eax, 0x130(%rsp)
    000019e3: 	leal	0x10(%r12,%r13), %eax
    000019e8: 	leal	(%rax,%rsi,8), %eax
    000019eb: 	addl	%edx, %eax
    000019ed: 	leal	(%r11,%rsi), %edx
    000019f1: 	movzbl	0x4ed(%rsp), %esi
    000019f9: 	addl	%ecx, %eax
    000019fb: 	leal	(%r12,%r10), %ecx
    000019ff: 	shrl	$0x5, %eax
    00001a02: 	addl	%edx, %ecx
    00001a04: 	andl	$0xff, %eax
    00001a09: 	leal	(%rcx,%rcx,4), %ecx
    00001a0c: 	movl	%eax, 0xdc(%rsp)
    00001a13: 	leal	0x10(%rsi,%rbp), %eax
    00001a17: 	leal	(%rax,%r10,8), %eax
    00001a1b: 	addl	%edx, %eax
    00001a1d: 	leal	(%rdi,%r10), %edx
    00001a21: 	addl	%ecx, %eax
    00001a23: 	leal	(%rsi,%r11), %ecx
    00001a27: 	shrl	$0x5, %eax
    00001a2a: 	addl	%edx, %ecx
    00001a2c: 	andl	$0xff, %eax
    00001a31: 	leal	(%rcx,%rcx,4), %ecx
    00001a34: 	movl	%eax, 0xcc(%rsp)
    00001a3b: 	leal	0x10(%r15,%r12), %eax
    00001a40: 	movzbl	0x27132(%rsp), %r10d
    00001a49: 	leal	(%rax,%r11,8), %eax
    00001a4d: 	addl	%edx, %eax
    00001a4f: 	leal	(%rdi,%r15), %edx
    00001a53: 	addl	%ecx, %eax
    00001a55: 	leal	(%rbx,%r11), %ecx
    00001a59: 	movzbl	0x27131(%rsp), %ebx
    00001a61: 	movzbl	0x27133(%rsp), %r11d
    00001a6a: 	shrl	$0x5, %eax
    00001a6d: 	addl	%ecx, %edx
    00001a6f: 	andl	$0xff, %eax
    00001a74: 	leal	(%rdx,%rdx,4), %edx
    00001a77: 	movl	%eax, 0x138(%rsp)
    00001a7e: 	leal	0x10(%r14,%rsi), %eax
    00001a83: 	movzbl	0x272c3(%rsp), %esi
    00001a8b: 	leal	(%rax,%rdi,8), %eax
    00001a8e: 	movzbl	0x272c1(%rsp), %edi
    00001a96: 	addl	%ecx, %eax
    00001a98: 	movzbl	0x272c2(%rsp), %ecx
    00001aa0: 	addl	%edx, %eax
    00001aa2: 	movzbl	0x272c0(%rsp), %edx
    00001aaa: 	shrl	$0x5, %eax
    00001aad: 	andl	$0xff, %eax
    00001ab2: 	movl	%eax, 0xd0(%rsp)
    00001ab9: 	movzbl	0x27130(%rsp), %eax
    00001ac1: 	leal	0x10(%r10,%rax), %eax
    00001ac6: 	addl	%edx, %eax
    00001ac8: 	addl	%ebx, %edx
    00001aca: 	addl	%edi, %edx
    00001acc: 	addl	%ecx, %eax
    00001ace: 	addl	%ecx, %edx
    00001ad0: 	leal	(%rax,%rdi,8), %eax
    00001ad3: 	leal	(%rdx,%rdx,4), %edx
    00001ad6: 	addl	%edx, %eax
    00001ad8: 	leal	(%r10,%rdi), %edx
    00001adc: 	shrl	$0x5, %eax
    00001adf: 	addl	%ecx, %edx
    00001ae1: 	andl	$0xff, %eax
    00001ae6: 	addl	%esi, %edx
    00001ae8: 	movl	%eax, 0xe4(%rsp)
    00001aef: 	leal	0x10(%rbx,%rdi), %eax
    00001af3: 	leal	(%rdx,%rdx,4), %edx
    00001af6: 	movzbl	0x27134(%rsp), %ebx
    00001afe: 	addl	%r11d, %eax
    00001b01: 	movzbl	0x272c4(%rsp), %edi
    00001b09: 	addl	%esi, %eax
    00001b0b: 	leal	(%rax,%rcx,8), %eax
    00001b0e: 	addl	%edx, %eax
    00001b10: 	leal	(%rcx,%r11), %edx
    00001b14: 	shrl	$0x5, %eax
    00001b17: 	addl	%esi, %edx
    00001b19: 	andl	$0xff, %eax
    00001b1e: 	addl	%edi, %edx
    00001b20: 	movl	%eax, 0xe8(%rsp)
    00001b27: 	leal	0x10(%r10,%rcx), %eax
    00001b2c: 	leal	(%rdx,%rdx,4), %edx
    00001b2f: 	movzbl	0x27135(%rsp), %r10d
    00001b38: 	addl	%ebx, %eax
    00001b3a: 	movzbl	0x272c5(%rsp), %ecx
    00001b42: 	addl	%edi, %eax
    00001b44: 	leal	(%rax,%rsi,8), %eax
    00001b47: 	addl	%edx, %eax
    00001b49: 	leal	(%rsi,%rbx), %edx
    00001b4c: 	shrl	$0x5, %eax
    00001b4f: 	addl	%edi, %edx
    00001b51: 	andl	$0xff, %eax
    00001b56: 	addl	%ecx, %edx
    00001b58: 	movl	%eax, 0xec(%rsp)
    00001b5f: 	leal	0x10(%r11,%rsi), %eax
    00001b64: 	leal	(%rdx,%rdx,4), %edx
    00001b67: 	movzbl	0x27136(%rsp), %r11d
    00001b70: 	addl	%r10d, %eax
    00001b73: 	movzbl	0x272c6(%rsp), %esi
    00001b7b: 	addl	%ecx, %eax
    00001b7d: 	leal	(%rax,%rdi,8), %eax
    00001b80: 	addl	%edx, %eax
    00001b82: 	leal	(%rdi,%r10), %edx
    00001b86: 	shrl	$0x5, %eax
    00001b89: 	addl	%ecx, %edx
    00001b8b: 	andl	$0xff, %eax
    00001b90: 	addl	%esi, %edx
    00001b92: 	movl	%eax, 0xf0(%rsp)
    00001b99: 	leal	0x10(%rbx,%rdi), %eax
    00001b9d: 	leal	(%rdx,%rdx,4), %edx
    00001ba0: 	movzbl	0x27137(%rsp), %ebx
    00001ba8: 	addl	%r11d, %eax
    00001bab: 	movzbl	0x272c7(%rsp), %edi
    00001bb3: 	addl	%esi, %eax
    00001bb5: 	leal	(%rax,%rcx,8), %eax
    00001bb8: 	addl	%edx, %eax
    00001bba: 	leal	(%rcx,%r11), %edx
    00001bbe: 	shrl	$0x5, %eax
    00001bc1: 	andl	$0xff, %eax
    00001bc6: 	movl	%eax, 0xf4(%rsp)
    00001bcd: 	leal	0x10(%r10,%rcx), %eax
    00001bd2: 	movzbl	0x27138(%rsp), %r10d
    00001bdb: 	addl	%ebx, %eax
    00001bdd: 	movzbl	0x272c8(%rsp), %ecx
    00001be5: 	addl	%edi, %eax
    00001be7: 	addl	%esi, %edx
    00001be9: 	addl	%edi, %edx
    00001beb: 	leal	(%rax,%rsi,8), %eax
    00001bee: 	leal	(%rdx,%rdx,4), %edx
    00001bf1: 	addl	%edx, %eax
    00001bf3: 	leal	(%rsi,%rbx), %edx
    00001bf6: 	shrl	$0x5, %eax
    00001bf9: 	addl	%edi, %edx
    00001bfb: 	andl	$0xff, %eax
    00001c00: 	addl	%ecx, %edx
    00001c02: 	movl	%eax, 0xf8(%rsp)
    00001c09: 	leal	0x10(%r11,%rsi), %eax
    00001c0e: 	leal	(%rdx,%rdx,4), %edx
    00001c11: 	movzbl	0x27139(%rsp), %r11d
    00001c1a: 	addl	%r10d, %eax
    00001c1d: 	movzbl	0x272c9(%rsp), %esi
    00001c25: 	addl	%ecx, %eax
    00001c27: 	leal	(%rax,%rdi,8), %eax
    00001c2a: 	addl	%edx, %eax
    00001c2c: 	leal	(%rdi,%r10), %edx
    00001c30: 	shrl	$0x5, %eax
    00001c33: 	addl	%ecx, %edx
    00001c35: 	andl	$0xff, %eax
    00001c3a: 	addl	%esi, %edx
    00001c3c: 	movl	%eax, 0xfc(%rsp)
    00001c43: 	leal	0x10(%rbx,%rdi), %eax
    00001c47: 	leal	(%rdx,%rdx,4), %edx
    00001c4a: 	movzbl	0x2713a(%rsp), %ebx
    00001c52: 	addl	%r11d, %eax
    00001c55: 	movzbl	0x272ca(%rsp), %edi
    00001c5d: 	addl	%esi, %eax
    00001c5f: 	leal	(%rax,%rcx,8), %eax
    00001c62: 	addl	%edx, %eax
    00001c64: 	leal	(%rcx,%r11), %edx
    00001c68: 	shrl	$0x5, %eax
    00001c6b: 	addl	%esi, %edx
    00001c6d: 	andl	$0xff, %eax
    00001c72: 	addl	%edi, %edx
    00001c74: 	movl	%eax, 0x100(%rsp)
    00001c7b: 	leal	0x10(%r10,%rcx), %eax
    00001c80: 	leal	(%rdx,%rdx,4), %edx
    00001c83: 	addl	%ebx, %eax
    00001c85: 	addl	%edi, %eax
    00001c87: 	leal	(%rax,%rsi,8), %eax
    00001c8a: 	addl	%edx, %eax
    00001c8c: 	leal	(%rsi,%rbx), %edx
    00001c8f: 	shrl	$0x5, %eax
    00001c92: 	addl	%edi, %edx
    00001c94: 	andl	$0xff, %eax
    00001c99: 	movl	%eax, 0x104(%rsp)
    00001ca0: 	movzbl	0x272cb(%rsp), %ecx
    00001ca8: 	leal	0x10(%r11,%rsi), %eax
    00001cad: 	movzbl	0x272cc(%rsp), %esi
    00001cb5: 	movzbl	0x2713b(%rsp), %r10d
    00001cbe: 	movl	$0x0, 0x60(%rsp)
    00001cc6: 	movzbl	0x2713c(%rsp), %r11d
    00001ccf: 	addl	%ecx, %edx
    00001cd1: 	movdqa	DATAat0x389c0(%rip), %xmm10
    00001cda: 	movdqa	DATAat0x389d0(%rip), %xmm13
    00001ce3: 	addl	%r10d, %eax
    00001ce6: 	leal	(%rdx,%rdx,4), %edx
    00001ce9: 	movdqa	DATAat0x389e0(%rip), %xmm12
    00001cf2: 	addl	%ecx, %eax
    00001cf4: 	movdqa	%xmm10, %xmm14
    00001cf9: 	leal	(%rax,%rdi,8), %eax
    00001cfc: 	punpcklbw	%xmm0, %xmm14
    00001d01: 	addl	%edx, %eax
    00001d03: 	leal	(%rdi,%r10), %edx
    00001d07: 	shrl	$0x5, %eax
    00001d0a: 	andl	$0xff, %eax
    00001d0f: 	addl	%ecx, %edx
    00001d11: 	movl	%eax, 0x108(%rsp)
    00001d18: 	leal	0x10(%rbx,%rdi), %eax
    00001d1c: 	addl	%esi, %edx
    00001d1e: 	movzbl	0x2713d(%rsp), %ebx
    00001d26: 	addl	%r11d, %eax
    00001d29: 	leal	(%rdx,%rdx,4), %edx
    00001d2c: 	movzbl	0x272cd(%rsp), %edi
    00001d34: 	addl	%esi, %eax
    00001d36: 	leal	(%rax,%rcx,8), %eax
    00001d39: 	addl	%edx, %eax
    00001d3b: 	leal	(%r11,%rcx), %edx
    00001d3f: 	shrl	$0x5, %eax
    00001d42: 	addl	%esi, %edx
    00001d44: 	andl	$0xff, %eax
    00001d49: 	addl	%edi, %edx
    00001d4b: 	movl	%eax, 0xe0(%rsp)
    00001d52: 	leal	0x10(%r10,%rcx), %eax
    00001d57: 	leal	(%rdx,%rdx,4), %edx
    00001d5a: 	movzwl	0x8(%rsp), %ecx
    00001d5f: 	addl	%ebx, %eax
    00001d61: 	addl	%edi, %eax
    00001d63: 	leal	(%rax,%rsi,8), %eax
    00001d66: 	addl	%edx, %eax
    00001d68: 	leal	(%rbx,%rsi), %edx
    00001d6b: 	shrl	$0x5, %eax
    00001d6e: 	addl	%edi, %edx
    00001d70: 	andl	$0xff, %eax
    00001d75: 	addl	%r8d, %edx
    00001d78: 	movl	%eax, 0xd4(%rsp)
    00001d7f: 	leal	0x10(%rsi,%r11), %eax
    00001d84: 	leal	(%rdx,%rdx,4), %edx
    00001d87: 	addl	%ecx, %eax
    00001d89: 	addl	%r8d, %eax
    00001d8c: 	leal	(%rax,%rdi,8), %eax
    00001d8f: 	addl	%edx, %eax
    00001d91: 	leal	(%rcx,%rdi), %edx
    00001d94: 	shrl	$0x5, %eax
    00001d97: 	addl	%r8d, %edx
    00001d9a: 	andl	$0xff, %eax
    00001d9f: 	addl	%r9d, %edx
    00001da2: 	movl	%eax, 0x134(%rsp)
    00001da9: 	leal	0x10(%rdi,%rbx), %eax
    00001dad: 	addw	0x10(%rsp), %ax
    00001db2: 	leal	(%rdx,%rdx,4), %edx
    00001db5: 	addl	%r9d, %eax
    00001db8: 	leal	(%rax,%r8,8), %eax
    00001dbc: 	addl	%edx, %eax
    00001dbe: 	shrl	$0x5, %eax
    00001dc1: 	andl	$0xff, %eax
    00001dc6: 	movl	%eax, 0xd8(%rsp)
    00001dcd: 	leaq	0x360(%rsp), %rax
    00001dd5: 	movq	%rax, 0x40(%rsp)
    00001dda: 	leaq	0x1d1(%rsp), %rax
    00001de2: 	movq	%rax, 0x38(%rsp)
    00001de7: 	leaq	0x26fb0(%rsp), %rax
    00001def: 	movq	%rax, 0x8(%rsp)
    00001df4: 	leaq	0x272d1(%rsp), %rax
    00001dfc: 	movq	%rax, 0x90(%rsp)
    00001e04: 	leaq	0x362(%rsp), %rax
    00001e0c: 	movq	%rax, 0xa0(%rsp)
    00001e14: 	movq	0x30(%rsp), %rax
    00001e19: 	addq	$0x181, %rax
    00001e1f: 	movq	%rax, 0x88(%rsp)
    00001e27: 	leaq	0x35f(%rsp), %rax
    00001e2f: 	movq	%rax, 0x98(%rsp)
    00001e37: 	leaq	0x40(%rsp), %rax
    00001e3c: 	movq	%rax, 0x20(%rsp)
    00001e41: 	leaq	0x272cf(%rsp), %rax
    00001e49: 	movq	%rax, 0x50(%rsp)
    00001e4e: 	leaq	0x41(%rsp), %rax
    00001e53: 	movq	%rax, 0x48(%rsp)
    00001e58: 	leaq	0x361(%rsp), %rax
    00001e60: 	movq	%rax, 0x58(%rsp)
    00001e65: 	leaq	0x4e241(%rsp), %rax
    00001e6d: 	movq	%rax, 0x78(%rsp)
    00001e72: 	leaq	0x27142(%rsp), %rax
    00001e7a: 	movq	%rax, 0x80(%rsp)
    00001e82: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4131:
    00001e88: 	movzbl	0xc0(%rsp), %eax
    00001e90: 	movq	0x90(%rsp), %rdx
    00001e98: 	movq	0x88(%rsp), %rcx
    00001ea0: 	movb	%al, 0x272d0(%rsp)
    00001ea7: 	movq	0xa0(%rsp), %rax
    00001eaf: 	nop # Size: 1
.Ltmp4123:
    00001eb0: 	movdqa	-0x192(%rax), %xmm4
    00001eb8: 	movdqa	-0x2(%rax), %xmm7
    00001ebd: 	addq	$0x10, %rdx
    00001ec1: 	addq	$0x10, %rax
    00001ec5: 	movdqu	-0x1a1(%rax), %xmm6
    00001ecd: 	movdqu	-0x1a0(%rax), %xmm1
    00001ed5: 	movdqa	%xmm4, %xmm9
    00001eda: 	punpckhbw	%xmm0, %xmm4
    00001ede: 	movdqu	-0x10(%rax), %xmm5
    00001ee3: 	movdqu	-0x11(%rax), %xmm3
    00001ee8: 	movdqa	%xmm1, %xmm2
    00001eec: 	movdqa	%xmm6, %xmm8
    00001ef1: 	punpckhbw	%xmm0, %xmm1
    00001ef5: 	paddw	%xmm1, %xmm4
    00001ef9: 	punpcklbw	%xmm0, %xmm8
    00001efe: 	movdqa	%xmm14, %xmm1
    00001f03: 	pmullw	%xmm8, %xmm1
    00001f08: 	punpcklbw	%xmm0, %xmm2
    00001f0c: 	punpcklbw	%xmm0, %xmm9
    00001f11: 	paddw	%xmm2, %xmm9
    00001f16: 	movdqa	%xmm7, %xmm2
    00001f1a: 	punpckhbw	%xmm0, %xmm6
    00001f1e: 	punpcklbw	%xmm0, %xmm2
    00001f22: 	punpckhbw	%xmm0, %xmm7
    00001f26: 	paddw	%xmm2, %xmm1
    00001f2a: 	movdqa	%xmm5, %xmm2
    00001f2e: 	punpckhbw	%xmm0, %xmm5
    00001f32: 	punpcklbw	%xmm0, %xmm2
    00001f36: 	paddw	%xmm13, %xmm5
    00001f3b: 	paddw	%xmm13, %xmm2
    00001f40: 	paddw	%xmm2, %xmm1
    00001f44: 	movdqa	%xmm3, %xmm2
    00001f48: 	punpckhbw	%xmm0, %xmm3
    00001f4c: 	punpcklbw	%xmm0, %xmm2
    00001f50: 	paddw	%xmm6, %xmm3
    00001f54: 	paddw	%xmm8, %xmm2
    00001f59: 	paddw	%xmm4, %xmm3
    00001f5d: 	paddw	%xmm9, %xmm2
    00001f62: 	movdqa	%xmm2, %xmm8
    00001f67: 	psllw	$0x2, %xmm8
    00001f6d: 	paddw	%xmm8, %xmm2
    00001f72: 	paddw	%xmm9, %xmm2
    00001f77: 	paddw	%xmm2, %xmm1
    00001f7b: 	movdqa	%xmm6, %xmm2
    00001f7f: 	pmullw	%xmm14, %xmm2
    00001f84: 	psrlw	$0x5, %xmm1
    00001f89: 	pand	%xmm12, %xmm1
    00001f8e: 	paddw	%xmm7, %xmm2
    00001f92: 	paddw	%xmm5, %xmm2
    00001f96: 	movdqa	%xmm3, %xmm5
    00001f9a: 	psllw	$0x2, %xmm5
    00001f9f: 	paddw	%xmm5, %xmm3
    00001fa3: 	paddw	%xmm4, %xmm3
    00001fa7: 	paddw	%xmm3, %xmm2
    00001fab: 	psrlw	$0x5, %xmm2
    00001fb0: 	pand	%xmm12, %xmm2
    00001fb5: 	packuswb	%xmm2, %xmm1
    00001fb9: 	movups	%xmm1, -0x10(%rdx)
    00001fbd: 	cmpq	%rcx, %rdx
    00001fc0: 	jne	.Ltmp4123 # Offset: 8128
    00001fc6: 	movzbl	0x10c(%rsp), %eax
    00001fce: 	movq	0x98(%rsp), %r9
    00001fd6: 	xorl	%r14d, %r14d
    00001fd9: 	movb	%al, 0x27451(%rsp)
    00001fe0: 	movzbl	0x110(%rsp), %eax
    00001fe8: 	movb	%al, 0x27452(%rsp)
    00001fef: 	movzbl	0x114(%rsp), %eax
    00001ff7: 	movb	%al, 0x27453(%rsp)
    00001ffe: 	movzbl	0x118(%rsp), %eax
    00002006: 	movb	%al, 0x27454(%rsp)
    0000200d: 	movzbl	0x11c(%rsp), %eax
    00002015: 	movb	%al, 0x27455(%rsp)
    0000201c: 	movzbl	0x120(%rsp), %eax
    00002024: 	movb	%al, 0x27456(%rsp)
    0000202b: 	movzbl	0x124(%rsp), %eax
    00002033: 	movb	%al, 0x27457(%rsp)
    0000203a: 	movzbl	0x128(%rsp), %eax
    00002042: 	movb	%al, 0x27458(%rsp)
    00002049: 	movzbl	0x12c(%rsp), %eax
    00002051: 	movb	%al, 0x27459(%rsp)
    00002058: 	movzbl	0x130(%rsp), %eax
    00002060: 	movb	%al, 0x2745a(%rsp)
    00002067: 	movzbl	0xdc(%rsp), %eax
    0000206f: 	movb	%al, 0x2745b(%rsp)
    00002076: 	movzbl	0xcc(%rsp), %eax
    0000207e: 	movb	%al, 0x2745c(%rsp)
    00002085: 	movzbl	0x138(%rsp), %eax
    0000208d: 	movb	%al, 0x2745d(%rsp)
    00002094: 	movzbl	0xd0(%rsp), %eax
    0000209c: 	movb	%al, 0x2745e(%rsp)
    000020a3: 	movzbl	0xc4(%rsp), %eax
    000020ab: 	movb	%al, 0x2745f(%rsp)
    000020b2: 	movq	0x28(%rsp), %rax
    000020b7: 	movq	0x30(%rsp), %rbx
    000020bc: 	movzwl	0x13e(%rsp), %edi
    000020c4: 	movzbl	0xb8(%rsp), %edx
    000020cc: 	movzwl	0xbc(%rsp), %r15d
    000020d5: 	movw	%di, 0x18(%rsp)
    000020da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4128:
    000020e0: 	movl	%r15d, %ecx
    000020e3: 	leal	(%rdx,%rdx,2), %edx
    000020e6: 	movzbl	0x320(%rax), %r15d
    000020ee: 	leaq	0x1(%rax), %r13
    000020f2: 	leal	(,%rcx,8), %esi
    000020f9: 	addw	0x18(%rsp), %cx
    000020fe: 	movzbl	0x321(%rax), %edi
    00002105: 	leaq	0x2(%rax), %r12
    00002109: 	leal	0x10(%rsi,%rdx,2), %edx
    0000210d: 	movzbl	0x1(%rax), %esi
    00002111: 	addl	%r15d, %ecx
    00002114: 	leaq	0x190(%rax), %r10
    0000211b: 	leal	(%rcx,%rcx,4), %ecx
    0000211e: 	movw	%di, 0x18(%rsp)
    00002123: 	leaq	0x191(%rax), %rbp
    0000212a: 	addl	%esi, %edx
    0000212c: 	leaq	0x192(%rax), %r11
    00002133: 	leaq	0x320(%rax), %r8
    0000213a: 	addl	%r15d, %edx
    0000213d: 	leaq	0x322(%rax), %rsi
    00002144: 	addl	%edi, %edx
    00002146: 	leaq	0x321(%rax), %rdi
    0000214d: 	addl	%ecx, %edx
    0000214f: 	leaq	0x191(%rbx), %rcx
    00002156: 	movzwl	%dx, %edx
    00002159: 	sarl	$0x5, %edx
    0000215c: 	movb	%dl, 0x190(%rbx)
    00002162: 	xorl	%edx, %edx
    00002164: 	nopl	(%rax) # Size: 4
.Ltmp4124:
    00002168: 	movdqu	(%r13,%rdx), %xmm3
    0000216f: 	movdqa	(%r10,%rdx), %xmm11
    00002175: 	movdqu	(%r11,%rdx), %xmm5
    0000217b: 	movdqu	(%rdi,%rdx), %xmm10
    00002181: 	movdqa	%xmm11, %xmm1
    00002186: 	movdqa	%xmm3, %xmm6
    0000218a: 	movdqu	(%rsi,%rdx), %xmm4
    0000218f: 	movdqu	(%r12,%rdx), %xmm8
    00002195: 	punpcklbw	%xmm0, %xmm1
    00002199: 	punpcklbw	%xmm0, %xmm6
    0000219d: 	movdqa	%xmm10, %xmm7
    000021a2: 	movdqu	(%rbp,%rdx), %xmm2
    000021a8: 	paddw	%xmm1, %xmm6
    000021ac: 	movdqa	%xmm5, %xmm1
    000021b0: 	punpcklbw	%xmm0, %xmm7
    000021b4: 	movdqa	(%r8,%rdx), %xmm9
    000021ba: 	punpcklbw	%xmm0, %xmm1
    000021be: 	punpckhbw	%xmm0, %xmm11
    000021c3: 	punpckhbw	%xmm0, %xmm3
    000021c7: 	paddw	%xmm7, %xmm1
    000021cb: 	punpckhbw	%xmm0, %xmm10
    000021d0: 	punpckhbw	%xmm0, %xmm5
    000021d4: 	paddw	%xmm1, %xmm6
    000021d8: 	movdqa	%xmm8, %xmm7
    000021dd: 	paddw	%xmm10, %xmm5
    000021e2: 	movdqa	%xmm6, %xmm1
    000021e6: 	paddw	%xmm11, %xmm3
    000021eb: 	punpcklbw	%xmm0, %xmm7
    000021ef: 	psllw	$0x2, %xmm1
    000021f4: 	paddw	%xmm5, %xmm3
    000021f8: 	movdqa	%xmm9, %xmm15
    000021fd: 	paddw	%xmm6, %xmm1
    00002201: 	movdqa	%xmm4, %xmm6
    00002205: 	movdqa	%xmm3, %xmm5
    00002209: 	punpcklbw	%xmm0, %xmm6
    0000220d: 	punpckhbw	%xmm0, %xmm4
    00002211: 	punpcklbw	%xmm0, %xmm15
    00002216: 	paddw	%xmm13, %xmm6
    0000221b: 	psllw	$0x2, %xmm5
    00002220: 	punpckhbw	%xmm0, %xmm9
    00002225: 	paddw	%xmm6, %xmm1
    00002229: 	movdqa	(%rax,%rdx), %xmm6
    0000222e: 	paddw	%xmm3, %xmm5
    00002232: 	movdqa	%xmm4, %xmm3
    00002236: 	paddw	%xmm13, %xmm3
    0000223b: 	movdqa	%xmm5, %xmm4
    0000223f: 	punpckhbw	%xmm0, %xmm8
    00002244: 	punpcklbw	%xmm0, %xmm6
    00002248: 	paddw	%xmm3, %xmm4
    0000224c: 	movdqa	(%rax,%rdx), %xmm3
    00002251: 	paddw	%xmm7, %xmm6
    00002255: 	movdqa	%xmm2, %xmm7
    00002259: 	punpckhbw	%xmm0, %xmm2
    0000225d: 	punpcklbw	%xmm0, %xmm7
    00002261: 	pmullw	%xmm14, %xmm2
    00002266: 	punpckhbw	%xmm0, %xmm3
    0000226a: 	pmullw	%xmm14, %xmm7
    0000226f: 	paddw	%xmm3, %xmm8
    00002274: 	paddw	%xmm9, %xmm2
    00002279: 	paddw	%xmm15, %xmm7
    0000227e: 	paddw	%xmm8, %xmm2
    00002283: 	paddw	%xmm7, %xmm6
    00002287: 	paddw	%xmm4, %xmm2
    0000228b: 	paddw	%xmm6, %xmm1
    0000228f: 	psrlw	$0x5, %xmm2
    00002294: 	psrlw	$0x5, %xmm1
    00002299: 	pand	%xmm12, %xmm2
    0000229e: 	pand	%xmm12, %xmm1
    000022a3: 	packuswb	%xmm2, %xmm1
    000022a7: 	movups	%xmm1, (%rcx,%rdx)
    000022ab: 	addq	$0x10, %rdx
    000022af: 	cmpq	$0x180, %rdx
    000022b6: 	jne	.Ltmp4124 # Offset: 8886
    000022bc: 	movl	$0x181, 0x10(%rsp)
    000022c4: 	movzbl	0x180(%rax), %r13d
    000022cc: 	leaq	0x312(%r14), %r8
    000022d3: 	addq	$0x190, %r14
    000022da: 	movzbl	0x181(%rax), %r12d
    000022e2: 	movzbl	0x310(%rax), %edx
    000022e9: 	movzbl	0x311(%rax), %ebp
    000022f0: 	movzbl	0x4a1(%rax), %esi
    000022f7: 	movzbl	0x4a0(%rax), %ecx
.Ltmp4125:
    000022fe: 	movq	0x20(%rsp), %rdi
    00002303: 	movl	%r13d, %r11d
    00002306: 	addl	$0x2, 0x10(%rsp)
    0000230b: 	leal	0x10(%r11,%rcx), %r11d
    00002310: 	movzbl	(%rdi,%r8), %r13d
    00002315: 	movq	0x40(%rsp), %rdi
    0000231a: 	leal	(%r11,%rbp,8), %r11d
    0000231e: 	movzbl	(%rdi,%r8), %ecx
    00002323: 	leal	(%rdx,%r12), %edi
    00002327: 	movq	0x28(%rsp), %rdx
    0000232c: 	addl	%r13d, %r11d
    0000232f: 	addl	%esi, %edi
    00002331: 	movzbl	(%rdx,%r8), %edx
    00002336: 	addl	%ecx, %r11d
    00002339: 	addl	%edx, %edi
    0000233b: 	leal	(%rdi,%rdi,4), %edi
    0000233e: 	addl	%r11d, %edi
    00002341: 	movq	0x50(%rsp), %r11
    00002346: 	movzwl	%di, %edi
    00002349: 	sarl	$0x5, %edi
    0000234c: 	movb	%dil, (%r11,%r8)
    00002350: 	leal	0x10(%rsi,%r12), %edi
    00002355: 	movq	0x48(%rsp), %rsi
    0000235a: 	leal	(%rcx,%r13), %r11d
    0000235e: 	addl	%ebp, %r11d
    00002361: 	movq	0x38(%rsp), %rbp
    00002366: 	movzbl	(%rsi,%r8), %r12d
    0000236b: 	movq	0x58(%rsp), %rsi
    00002370: 	movzbl	(%rbp,%r8), %ebp
    00002376: 	movzbl	(%rsi,%r8), %esi
    0000237b: 	addl	%r12d, %edi
    0000237e: 	addl	%ebp, %r11d
    00002381: 	addl	%esi, %edi
    00002383: 	leal	(%r11,%r11,4), %r11d
    00002387: 	leal	(%rdi,%rdx,8), %edi
    0000238a: 	addl	%r11d, %edi
    0000238d: 	movq	0x30(%rsp), %r11
    00002392: 	movzwl	%di, %edi
    00002395: 	sarl	$0x5, %edi
    00002398: 	movb	%dil, (%r11,%r8)
    0000239c: 	addq	$0x2, %r8
    000023a0: 	cmpl	$0x18d, 0x10(%rsp)
    000023a8: 	jne	.Ltmp4125 # Offset: 9128
    000023ae: 	leaq	0x18d(%rax), %rsi
    000023b5: 	leaq	0x31d(%rax), %r8
    000023bc: 	leaq	0x4ad(%rax), %rdi
    000023c3: 	leaq	0x31d(%rbx), %r11
    000023ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4126:
    000023d0: 	movzbl	-0x1(%rsi), %ecx
    000023d4: 	movzbl	0x1(%rsi), %edx
    000023d8: 	addq	$0x1, %rsi
    000023dc: 	addq	$0x1, %r8
    000023e0: 	movzbl	-0x1(%rsi), %ebp
    000023e4: 	addq	$0x1, %rdi
    000023e8: 	addq	$0x1, %r11
    000023ec: 	leal	0x10(%rdx,%rcx), %edx
    000023f0: 	movzbl	-0x2(%rdi), %ecx
    000023f4: 	addl	%ecx, %edx
    000023f6: 	movzbl	(%rdi), %ecx
    000023f9: 	addl	%ecx, %edx
    000023fb: 	movzbl	-0x1(%r8), %ecx
    00002400: 	leal	(%rdx,%rcx,8), %ecx
    00002403: 	movzbl	-0x2(%r8), %edx
    00002408: 	addl	%ebp, %edx
    0000240a: 	movzbl	(%r8), %ebp
    0000240e: 	addl	%ebp, %edx
    00002410: 	movzbl	-0x1(%rdi), %ebp
    00002414: 	addl	%ebp, %edx
    00002416: 	leal	(%rdx,%rdx,4), %edx
    00002419: 	addl	%edx, %ecx
    0000241b: 	movzwl	%cx, %ecx
    0000241e: 	sarl	$0x5, %ecx
    00002421: 	movb	%cl, -0x1(%r11)
    00002425: 	cmpq	%rsi, %r9
    00002428: 	jne	.Ltmp4126 # Offset: 9256
    0000242a: 	movzbl	0x18f(%rax), %edi
    00002431: 	movzbl	0x18e(%rax), %edx
    00002438: 	addq	$0x190, %rbx
    0000243f: 	addq	$0x190, %r9
    00002446: 	movzbl	0x4ae(%rax), %esi
    0000244d: 	movzbl	0x4af(%rax), %ecx
    00002454: 	leal	0x10(%rdi,%rdx), %edx
    00002458: 	addl	%esi, %edx
    0000245a: 	movzbl	0x31f(%rax), %esi
    00002461: 	movzbl	0x31e(%rax), %eax
    00002468: 	addl	%ecx, %edx
    0000246a: 	addl	%edi, %eax
    0000246c: 	leal	(%rdx,%rsi,8), %edx
    0000246f: 	addl	%esi, %eax
    00002471: 	addl	%ecx, %eax
    00002473: 	leal	(%rax,%rax,4), %eax
    00002476: 	addl	%eax, %edx
    00002478: 	movzwl	%dx, %edx
    0000247b: 	sarl	$0x5, %edx
    0000247e: 	movb	%dl, 0x18f(%rbx)
    00002484: 	cmpq	%r10, 0x8(%rsp)
    00002489: 	je	.Ltmp4127 # Offset: 9353
    0000248b: 	movzbl	(%r10), %edx
    0000248f: 	movq	%r10, %rax
    00002492: 	jmp	.Ltmp4128 # Offset: 9362
    00002497: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4100:
    000024a0: 	movslq	%esi, %r8
    000024a3: 	movslq	%r13d, %rdx
    000024a6: 	jmp	.Ltmp4129 # Offset: 9382
    000024ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4127:
    000024b0: 	movzbl	0xc8(%rsp), %eax
    000024b8: 	movq	0x78(%rsp), %rdx
    000024bd: 	movq	0x68(%rsp), %rcx
    000024c2: 	movb	%al, 0x4e240(%rsp)
    000024c9: 	movq	0x80(%rsp), %rax
    000024d1: 	nopl	(%rax) # Size: 7
.Ltmp4130:
    000024d8: 	movdqu	-0x1(%rax), %xmm3
    000024dd: 	movdqa	-0x2(%rax), %xmm6
    000024e2: 	addq	$0x10, %rdx
    000024e6: 	addq	$0x10, %rax
    000024ea: 	movdqu	-0x1a1(%rax), %xmm4
    000024f2: 	movdqu	-0x10(%rax), %xmm8
    000024f8: 	movdqa	%xmm3, %xmm2
    000024fc: 	movdqa	%xmm6, %xmm10
    00002501: 	punpckhbw	%xmm0, %xmm3
    00002505: 	movdqa	-0x1a2(%rax), %xmm5
    0000250d: 	movdqa	%xmm8, %xmm11
    00002512: 	movdqa	%xmm4, %xmm9
    00002517: 	punpcklbw	%xmm0, %xmm2
    0000251b: 	movdqu	-0x1a0(%rax), %xmm7
    00002523: 	punpcklbw	%xmm0, %xmm10
    00002528: 	punpcklbw	%xmm0, %xmm11
    0000252d: 	movdqa	%xmm2, %xmm1
    00002531: 	punpcklbw	%xmm0, %xmm9
    00002536: 	paddw	%xmm11, %xmm1
    0000253b: 	paddw	%xmm13, %xmm11
    00002540: 	paddw	%xmm10, %xmm9
    00002545: 	pmullw	%xmm14, %xmm2
    0000254a: 	punpckhbw	%xmm0, %xmm6
    0000254e: 	paddw	%xmm1, %xmm9
    00002553: 	punpckhbw	%xmm0, %xmm8
    00002558: 	punpckhbw	%xmm0, %xmm4
    0000255c: 	movdqa	%xmm9, %xmm1
    00002561: 	paddw	%xmm6, %xmm4
    00002565: 	psllw	$0x2, %xmm1
    0000256a: 	paddw	%xmm9, %xmm1
    0000256f: 	movdqa	%xmm5, %xmm9
    00002574: 	punpckhbw	%xmm0, %xmm5
    00002578: 	paddw	%xmm11, %xmm1
    0000257d: 	movdqa	%xmm7, %xmm11
    00002582: 	punpcklbw	%xmm0, %xmm9
    00002587: 	punpcklbw	%xmm0, %xmm11
    0000258c: 	paddw	%xmm10, %xmm2
    00002591: 	punpckhbw	%xmm0, %xmm7
    00002595: 	paddw	%xmm11, %xmm9
    0000259a: 	paddw	%xmm7, %xmm5
    0000259e: 	paddw	%xmm9, %xmm2
    000025a3: 	paddw	%xmm2, %xmm1
    000025a7: 	movdqa	%xmm3, %xmm2
    000025ab: 	pmullw	%xmm14, %xmm3
    000025b0: 	psrlw	$0x5, %xmm1
    000025b5: 	paddw	%xmm8, %xmm2
    000025ba: 	paddw	%xmm2, %xmm4
    000025be: 	paddw	%xmm13, %xmm8
    000025c3: 	pand	%xmm12, %xmm1
    000025c8: 	movdqa	%xmm4, %xmm2
    000025cc: 	psllw	$0x2, %xmm2
    000025d1: 	paddw	%xmm4, %xmm2
    000025d5: 	paddw	%xmm6, %xmm3
    000025d9: 	paddw	%xmm8, %xmm2
    000025de: 	paddw	%xmm3, %xmm5
    000025e2: 	paddw	%xmm5, %xmm2
    000025e6: 	psrlw	$0x5, %xmm2
    000025eb: 	pand	%xmm12, %xmm2
    000025f0: 	packuswb	%xmm2, %xmm1
    000025f4: 	movups	%xmm1, -0x10(%rdx)
    000025f8: 	cmpq	%rcx, %rdx
    000025fb: 	jne	.Ltmp4130 # Offset: 9723
    00002601: 	movzbl	0xe4(%rsp), %eax
    00002609: 	addl	$0x1, 0x60(%rsp)
    0000260e: 	movb	%al, 0x4e3c1(%rsp)
    00002615: 	movzbl	0xe8(%rsp), %eax
    0000261d: 	movb	%al, 0x4e3c2(%rsp)
    00002624: 	movzbl	0xec(%rsp), %eax
    0000262c: 	movb	%al, 0x4e3c3(%rsp)
    00002633: 	movzbl	0xf0(%rsp), %eax
    0000263b: 	movb	%al, 0x4e3c4(%rsp)
    00002642: 	movzbl	0xf4(%rsp), %eax
    0000264a: 	movb	%al, 0x4e3c5(%rsp)
    00002651: 	movzbl	0xf8(%rsp), %eax
    00002659: 	movb	%al, 0x4e3c6(%rsp)
    00002660: 	movzbl	0xfc(%rsp), %eax
    00002668: 	movb	%al, 0x4e3c7(%rsp)
    0000266f: 	movzbl	0x100(%rsp), %eax
    00002677: 	movb	%al, 0x4e3c8(%rsp)
    0000267e: 	movzbl	0x104(%rsp), %eax
    00002686: 	movb	%al, 0x4e3c9(%rsp)
    0000268d: 	movzbl	0x108(%rsp), %eax
    00002695: 	movb	%al, 0x4e3ca(%rsp)
    0000269c: 	movzbl	0xe0(%rsp), %eax
    000026a4: 	movb	%al, 0x4e3cb(%rsp)
    000026ab: 	movzbl	0xd4(%rsp), %eax
    000026b3: 	movb	%al, 0x4e3cc(%rsp)
    000026ba: 	movzbl	0x134(%rsp), %eax
    000026c2: 	movb	%al, 0x4e3cd(%rsp)
    000026c9: 	movzbl	0xd8(%rsp), %eax
    000026d1: 	movb	%al, 0x4e3ce(%rsp)
    000026d8: 	movl	0x60(%rsp), %eax
    000026dc: 	cmpl	%eax, 0xb4(%rsp)
    000026e3: 	jne	.Ltmp4131 # Offset: 9955
    000026e9: 	movzbl	0x15c(%rsp), %eax
    000026f1: 	movb	%al, 0x4e3cf(%rsp)
.Ltmp4122:
    000026f8: 	xorl	%edx, %edx
    000026fa: 	movq	0x68(%rsp), %r9
    000026ff: 	pxor	%xmm3, %xmm3
    00002703: 	pxor	%xmm2, %xmm2
    00002707: 	movq	0x140(%rsp), %rsi
    0000270f: 	movq	0x148(%rsp), %rcx
    00002717: 	movl	%edx, %r8d
    0000271a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4133:
    00002720: 	movq	%rsi, %rax
    00002723: 	pxor	%xmm0, %xmm0
    00002727: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4132:
    00002730: 	movdqu	(%rax), %xmm4
    00002734: 	addq	$0x10, %rax
    00002738: 	paddb	%xmm4, %xmm0
    0000273c: 	cmpq	%rax, %rcx
    0000273f: 	jne	.Ltmp4132 # Offset: 10047
    00002741: 	movdqa	%xmm0, %xmm1
    00002745: 	addq	$0x190, %rcx
    0000274c: 	addq	$0x190, %rsi
    00002753: 	psrldq	$0x8, %xmm1
    00002758: 	paddb	%xmm1, %xmm0
    0000275c: 	psadbw	%xmm3, %xmm0
    00002760: 	movd	%xmm0, %eax
    00002764: 	movq	-0x190(%rcx), %xmm0
    0000276c: 	movdqa	%xmm0, %xmm7
    00002770: 	psadbw	%xmm2, %xmm7
    00002774: 	movq	%xmm7, 0x168(%rsp)
    0000277d: 	movq	%xmm7, %rdi
    00002782: 	movzbl	-0x187(%rcx), %edx
    00002789: 	addb	-0x188(%rcx), %dl
    0000278f: 	addl	%r8d, %edx
    00002792: 	addb	-0x186(%rcx), %dl
    00002798: 	addb	-0x185(%rcx), %dl
    0000279e: 	movl	%edi, %r10d
    000027a1: 	addb	-0x184(%rcx), %dl
    000027a7: 	addb	-0x183(%rcx), %dl
    000027ad: 	addl	%edx, %eax
    000027af: 	leal	(%rax,%r10), %r8d
    000027b3: 	cmpq	%r9, %rcx
    000027b6: 	jne	.Ltmp4133 # Offset: 10166
    000027bc: 	cvttsd2si	init_value(%rip), %eax
    000027c4: 	movl	%eax, %ecx
    000027c6: 	shll	$0x4, %ecx
    000027c9: 	subl	%ecx, %eax
    000027cb: 	shll	$0x2, %eax
    000027ce: 	cmpb	%r8b, %al
    000027d1: 	je	.Ltmp4134 # Offset: 10193
    000027d3: 	movq	0x1b0(%rsp), %rdx
    000027db: 	leaq	DATAat0x381c8(%rip), %rsi
    000027e2: 	movl	$0x1, %edi
    000027e7: 	xorl	%eax, %eax
    000027e9: 	callq	__printf_chk@PLT # Offset: 10217
.Ltmp4134:
    000027ee: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000027f5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000027fc: 	subq	$0x20, %rax
    00002800: 	cmpq	%rax, %rbx
    00002803: 	je	.Ltmp4135 # Offset: 10243
    00002809: 	leaq	0x10(%rbx), %rdi
    0000280d: 	movq	0x1b8(%rsp), %r12
    00002815: 	movq	%rdi, (%rbx)
    00002818: 	movq	0x1b0(%rsp), %rbp
    00002820: 	movq	%rbp, %rax
    00002823: 	addq	%r12, %rax
    00002826: 	je	.Ltmp4136 # Offset: 10278
    00002828: 	testq	%rbp, %rbp
    0000282b: 	je	.Ltmp4137 # Offset: 10283
.Ltmp4136:
    00002831: 	movq	%r12, 0x188(%rsp)
    00002839: 	cmpq	$0xf, %r12
    0000283d: 	ja	.Ltmp4138 # Offset: 10301
    00002843: 	cmpq	$0x1, %r12
    00002847: 	jne	.Ltmp4139 # Offset: 10311
    0000284d: 	movzbl	(%rbp), %eax
    00002851: 	movb	%al, 0x10(%rbx)
.Ltmp4201:
    00002854: 	movq	%r12, 0x8(%rbx)
    00002858: 	movb	$0x0, (%rdi,%r12)
    0000285d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002864: 	addq	$0x20, %rax
    00002868: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp4191:
    0000286f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00002876: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000287d: 	je	.Ltmp4140 # Offset: 10365
.Ltmp4190:
    00002883: 	movq	-0x20(%rax), %rbp
    00002887: 	callq	clock@PLT # Offset: 10375
    0000288c: 	pxor	%xmm0, %xmm0
    00002890: 	movq	%rax, end_time(%rip)
    00002897: 	movq	%rbp, %rdi
    0000289a: 	subq	start_time(%rip), %rax
    000028a1: 	cvtsi2sd	%rax, %xmm0
    000028a6: 	divsd	DATAat0x38a48(%rip), %xmm0
    000028ae: 	callq	_Z13record_resultdPKc # Offset: 10414
    000028b3: 	movq	0x1b0(%rsp), %rdi
    000028bb: 	cmpq	0x70(%rsp), %rdi
    000028c0: 	je	.Ltmp4141 # Offset: 10432
    000028c2: 	movq	0x1c0(%rsp), %rax
    000028ca: 	leaq	0x1(%rax), %rsi
    000028ce: 	callq	_ZdlPvm@PLT # Offset: 10446
.Ltmp4141:
    000028d3: 	movq	0x70(%rsp), %rax
    000028d8: 	movq	0x190(%rsp), %rbp
    000028e0: 	movq	0x198(%rsp), %r12
    000028e8: 	movq	%rax, 0x1b0(%rsp)
    000028f0: 	movq	%rbp, %rax
    000028f3: 	addq	%r12, %rax
    000028f6: 	je	.Ltmp4142 # Offset: 10486
    000028f8: 	testq	%rbp, %rbp
    000028fb: 	je	.Ltmp4143 # Offset: 10491
.Ltmp4142:
    00002901: 	movq	%r12, 0x188(%rsp)
    00002909: 	cmpq	$0xf, %r12
    0000290d: 	ja	.Ltmp4144 # Offset: 10509
    00002913: 	cmpq	$0x1, %r12
    00002917: 	jne	.Ltmp4145 # Offset: 10519
    0000291d: 	movzbl	(%rbp), %eax
    00002921: 	movb	%al, 0x1c0(%rsp)
    00002928: 	movq	0x70(%rsp), %rax
.Ltmp4177:
    0000292d: 	movq	%r12, 0x1b8(%rsp)
    00002935: 	movb	$0x0, (%rax,%r12)
    0000293a: 	movabsq	$0x3fffffffffffffff, %rax
    00002944: 	subq	0x1b8(%rsp), %rax
    0000294c: 	cmpq	$0x11, %rax
    00002950: 	jbe	.Ltmp4146 # Offset: 10576
    00002956: 	movq	0xa8(%rsp), %rdi
    0000295e: 	movl	$0x12, %edx
    00002963: 	leaq	DATAat0x387fa(%rip), %rsi
    0000296a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 10602
    0000296f: 	callq	clock@PLT # Offset: 10607
    00002974: 	movq	%rax, start_time(%rip)
    0000297b: 	movl	iterations(%rip), %eax
    00002981: 	movl	%eax, 0xe4(%rsp)
    00002988: 	testl	%eax, %eax
    0000298a: 	jle	.Ltmp4147 # Offset: 10634
    00002990: 	movzbl	0x1d0(%rsp), %ecx
    00002998: 	movzbl	0x360(%rsp), %edi
    000029a0: 	pxor	%xmm0, %xmm0
    000029a4: 	movzbl	0x1d1(%rsp), %eax
    000029ac: 	movzbl	0x361(%rsp), %ebx
    000029b4: 	leal	(%rcx,%rcx,8), %edx
    000029b7: 	movb	%cl, 0xd4(%rsp)
    000029be: 	movzbl	0x35f(%rsp), %r13d
    000029c7: 	addl	%edi, %eax
    000029c9: 	leal	(%rcx,%rdx,2), %edx
    000029cc: 	movzbl	0x35e(%rsp), %esi
    000029d4: 	movzbl	0x4ef(%rsp), %r15d
    000029dd: 	leal	0x10(%rdx,%rbx), %edx
    000029e1: 	leal	(%rax,%rax,2), %eax
    000029e4: 	movzbl	0x4ee(%rsp), %ebp
    000029ec: 	movzbl	0x26fb1(%rsp), %ecx
    000029f4: 	leal	(%rdx,%rax,2), %eax
    000029f7: 	leal	(%r13,%r13,8), %edx
    000029fc: 	movzbl	0x272cf(%rsp), %r14d
    00002a05: 	movw	%di, 0x138(%rsp)
    00002a0d: 	shrl	$0x5, %eax
    00002a10: 	leal	(%r13,%rdx,2), %edx
    00002a15: 	movzbl	0x272ce(%rsp), %edi
    00002a1d: 	movzbl	0x2713e(%rsp), %r12d
    00002a26: 	andl	$0xff, %eax
    00002a2b: 	leal	0x10(%rbp,%rdx), %edx
    00002a2f: 	movzbl	0x351(%rsp), %r9d
    00002a38: 	movzbl	0x4e2(%rsp), %r10d
    00002a41: 	movzbl	0x352(%rsp), %r8d
    00002a4a: 	movl	%eax, 0xd8(%rsp)
    00002a51: 	leal	(%rsi,%r15), %eax
    00002a55: 	leal	(%rax,%rax,2), %eax
    00002a58: 	movw	%bx, 0x13e(%rsp)
    00002a60: 	leal	(%rdx,%rax,2), %eax
    00002a63: 	movzbl	0x27140(%rsp), %edx
    00002a6b: 	shrl	$0x5, %eax
    00002a6e: 	andl	$0xff, %eax
    00002a73: 	movl	%eax, 0xdc(%rsp)
    00002a7a: 	leal	(%rdx,%rdx,8), %eax
    00002a7d: 	leal	(%rdx,%rax,2), %eax
    00002a80: 	leal	0x10(%rcx,%rax), %edx
    00002a84: 	movzbl	0x27141(%rsp), %ecx
    00002a8c: 	movzbl	0x26fb0(%rsp), %eax
    00002a94: 	addl	%ecx, %eax
    00002a96: 	movzbl	0x4e0(%rsp), %ecx
    00002a9e: 	leal	(%rax,%rax,2), %eax
    00002aa1: 	leal	(%rdx,%rax,2), %eax
    00002aa4: 	leal	(%r14,%r14,8), %edx
    00002aa8: 	shrl	$0x5, %eax
    00002aab: 	leal	(%r14,%rdx,2), %edx
    00002aaf: 	leal	0x10(%r10,%rcx), %ecx
    00002ab4: 	andl	$0xff, %eax
    00002ab9: 	leal	0x10(%r12,%rdx), %edx
    00002abe: 	movl	%eax, 0xe0(%rsp)
    00002ac5: 	movzbl	0x2713f(%rsp), %eax
    00002acd: 	movw	%ax, 0x8(%rsp)
    00002ad2: 	addl	%edi, %eax
    00002ad4: 	leal	(%rax,%rax,2), %eax
    00002ad7: 	leal	(%rdx,%rax,2), %eax
    00002ada: 	movzbl	0x4e1(%rsp), %edx
    00002ae2: 	movzwl	%ax, %eax
    00002ae5: 	movl	%eax, %ebx
    00002ae7: 	leal	(%r9,%r9,2), %eax
    00002aeb: 	leal	(%r9,%rax,4), %eax
    00002aef: 	sarl	$0x5, %ebx
    00002af2: 	addl	%eax, %ecx
    00002af4: 	leal	(%rdx,%rdx,4), %eax
    00002af7: 	movl	%ebx, 0x15c(%rsp)
    00002afe: 	addl	%eax, %ecx
    00002b00: 	movzbl	0x350(%rsp), %eax
    00002b08: 	addl	%r8d, %eax
    00002b0b: 	leal	(%rax,%rax,2), %eax
    00002b0e: 	leal	(%rcx,%rax,2), %eax
    00002b11: 	movzbl	0x353(%rsp), %ecx
    00002b19: 	shrl	$0x5, %eax
    00002b1c: 	movzbl	%al, %ebx
    00002b1f: 	movl	%ebx, 0xc4(%rsp)
    00002b26: 	movzbl	0x4e3(%rsp), %r11d
    00002b2f: 	leal	0x10(%r11,%rdx), %eax
    00002b34: 	leal	(%r8,%r8,2), %edx
    00002b38: 	leal	(%r8,%rdx,4), %edx
    00002b3c: 	addl	%eax, %edx
    00002b3e: 	leal	(%r10,%r10,4), %eax
    00002b42: 	addl	%eax, %edx
    00002b44: 	leal	(%r9,%rcx), %eax
    00002b48: 	movzbl	0x354(%rsp), %r9d
    00002b51: 	leal	(%rax,%rax,2), %eax
    00002b54: 	leal	(%rdx,%rax,2), %eax
    00002b57: 	leal	(%rcx,%rcx,2), %edx
    00002b5a: 	shrl	$0x5, %eax
    00002b5d: 	leal	(%rcx,%rdx,4), %edx
    00002b60: 	movzbl	%al, %ebx
    00002b63: 	movl	%ebx, 0x10c(%rsp)
    00002b6a: 	movzbl	0x4e4(%rsp), %ebx
    00002b72: 	leal	0x10(%r10,%rbx), %eax
    00002b77: 	movzbl	0x4e5(%rsp), %r10d
    00002b80: 	addl	%eax, %edx
    00002b82: 	leal	(%r11,%r11,4), %eax
    00002b86: 	addl	%eax, %edx
    00002b88: 	leal	(%r8,%r9), %eax
    00002b8c: 	movzbl	0x355(%rsp), %r8d
    00002b95: 	leal	(%rax,%rax,2), %eax
    00002b98: 	leal	(%rdx,%rax,2), %eax
    00002b9b: 	shrl	$0x5, %eax
    00002b9e: 	movzbl	%al, %edx
    00002ba1: 	leal	0x10(%r11,%r10), %eax
    00002ba6: 	movzbl	0x4e6(%rsp), %r11d
    00002baf: 	movl	%edx, 0x110(%rsp)
    00002bb6: 	leal	(%r9,%r9,2), %edx
    00002bba: 	leal	(%r9,%rdx,4), %edx
    00002bbe: 	addl	%eax, %edx
    00002bc0: 	leal	(%rbx,%rbx,4), %eax
    00002bc3: 	addl	%eax, %edx
    00002bc5: 	leal	(%rcx,%r8), %eax
    00002bc9: 	leal	(%rax,%rax,2), %eax
    00002bcc: 	leal	(%rdx,%rax,2), %eax
    00002bcf: 	leal	(%r8,%r8,2), %edx
    00002bd3: 	shrl	$0x5, %eax
    00002bd6: 	leal	(%r8,%rdx,4), %edx
    00002bda: 	movzbl	%al, %ecx
    00002bdd: 	leal	0x10(%rbx,%r11), %eax
    00002be2: 	movl	%ecx, 0x114(%rsp)
    00002be9: 	movzbl	0x356(%rsp), %ecx
    00002bf1: 	addl	%eax, %edx
    00002bf3: 	leal	(%r10,%r10,4), %eax
    00002bf7: 	addl	%eax, %edx
    00002bf9: 	leal	(%r9,%rcx), %eax
    00002bfd: 	movzbl	0x357(%rsp), %r9d
    00002c06: 	leal	(%rax,%rax,2), %eax
    00002c09: 	leal	(%rdx,%rax,2), %eax
    00002c0c: 	leal	(%rcx,%rcx,2), %edx
    00002c0f: 	shrl	$0x5, %eax
    00002c12: 	leal	(%rcx,%rdx,4), %edx
    00002c15: 	movzbl	%al, %ebx
    00002c18: 	movl	%ebx, 0x118(%rsp)
    00002c1f: 	movzbl	0x4e7(%rsp), %ebx
    00002c27: 	leal	0x10(%r10,%rbx), %eax
    00002c2c: 	movzbl	0x4e8(%rsp), %r10d
    00002c35: 	addl	%eax, %edx
    00002c37: 	leal	(%r11,%r11,4), %eax
    00002c3b: 	addl	%eax, %edx
    00002c3d: 	leal	(%r8,%r9), %eax
    00002c41: 	movzbl	0x358(%rsp), %r8d
    00002c4a: 	leal	(%rax,%rax,2), %eax
    00002c4d: 	leal	(%rdx,%rax,2), %eax
    00002c50: 	shrl	$0x5, %eax
    00002c53: 	movzbl	%al, %edx
    00002c56: 	leal	0x10(%r11,%r10), %eax
    00002c5b: 	movzbl	0x4e9(%rsp), %r11d
    00002c64: 	movl	%edx, 0x11c(%rsp)
    00002c6b: 	leal	(%r9,%r9,2), %edx
    00002c6f: 	leal	(%r9,%rdx,4), %edx
    00002c73: 	addl	%eax, %edx
    00002c75: 	leal	(%rbx,%rbx,4), %eax
    00002c78: 	addl	%eax, %edx
    00002c7a: 	leal	(%rcx,%r8), %eax
    00002c7e: 	leal	(%rax,%rax,2), %eax
    00002c81: 	leal	(%rdx,%rax,2), %eax
    00002c84: 	leal	(%r8,%r8,2), %edx
    00002c88: 	shrl	$0x5, %eax
    00002c8b: 	leal	(%r8,%rdx,4), %edx
    00002c8f: 	movzbl	%al, %ecx
    00002c92: 	leal	0x10(%rbx,%r11), %eax
    00002c97: 	movl	%ecx, 0x120(%rsp)
    00002c9e: 	movzbl	0x359(%rsp), %ecx
    00002ca6: 	addl	%eax, %edx
    00002ca8: 	leal	(%r10,%r10,4), %eax
    00002cac: 	addl	%eax, %edx
    00002cae: 	leal	(%r9,%rcx), %eax
    00002cb2: 	movzbl	0x35a(%rsp), %r9d
    00002cbb: 	leal	(%rax,%rax,2), %eax
    00002cbe: 	leal	(%rdx,%rax,2), %eax
    00002cc1: 	leal	(%rcx,%rcx,2), %edx
    00002cc4: 	shrl	$0x5, %eax
    00002cc7: 	leal	(%rcx,%rdx,4), %edx
    00002cca: 	movzbl	%al, %ebx
    00002ccd: 	movl	%ebx, 0x124(%rsp)
    00002cd4: 	movzbl	0x4ea(%rsp), %ebx
    00002cdc: 	leal	0x10(%r10,%rbx), %eax
    00002ce1: 	movzbl	0x4eb(%rsp), %r10d
    00002cea: 	addl	%eax, %edx
    00002cec: 	leal	(%r11,%r11,4), %eax
    00002cf0: 	addl	%eax, %edx
    00002cf2: 	leal	(%r8,%r9), %eax
    00002cf6: 	movzbl	0x35b(%rsp), %r8d
    00002cff: 	leal	(%rax,%rax,2), %eax
    00002d02: 	leal	(%rdx,%rax,2), %eax
    00002d05: 	shrl	$0x5, %eax
    00002d08: 	movzbl	%al, %edx
    00002d0b: 	leal	0x10(%r11,%r10), %eax
    00002d10: 	movzbl	0x4ec(%rsp), %r11d
    00002d19: 	movl	%edx, 0x128(%rsp)
    00002d20: 	leal	(%r9,%r9,2), %edx
    00002d24: 	leal	(%r9,%rdx,4), %edx
    00002d28: 	addl	%eax, %edx
    00002d2a: 	leal	(%rbx,%rbx,4), %eax
    00002d2d: 	addl	%eax, %edx
    00002d2f: 	leal	(%rcx,%r8), %eax
    00002d33: 	leal	(%rax,%rax,2), %eax
    00002d36: 	leal	(%rdx,%rax,2), %eax
    00002d39: 	leal	(%r8,%r8,2), %edx
    00002d3d: 	shrl	$0x5, %eax
    00002d40: 	leal	(%r8,%rdx,4), %edx
    00002d44: 	movzbl	%al, %ecx
    00002d47: 	leal	0x10(%r11,%rbx), %eax
    00002d4c: 	movl	%ecx, 0x12c(%rsp)
    00002d53: 	movzbl	0x35c(%rsp), %ecx
    00002d5b: 	addl	%eax, %edx
    00002d5d: 	leal	(%r10,%r10,4), %eax
    00002d61: 	addl	%eax, %edx
    00002d63: 	leal	(%rcx,%r9), %eax
    00002d67: 	movzbl	0x35d(%rsp), %r9d
    00002d70: 	leal	(%rax,%rax,2), %eax
    00002d73: 	leal	(%rdx,%rax,2), %eax
    00002d76: 	leal	(%rcx,%rcx,2), %edx
    00002d79: 	shrl	$0x5, %eax
    00002d7c: 	leal	(%rcx,%rdx,4), %edx
    00002d7f: 	movzbl	%al, %ebx
    00002d82: 	movl	%ebx, 0xf4(%rsp)
    00002d89: 	movzbl	0x4ed(%rsp), %ebx
    00002d91: 	leal	0x10(%rbx,%r10), %eax
    00002d96: 	addl	%eax, %edx
    00002d98: 	leal	(%r11,%r11,4), %eax
    00002d9c: 	addl	%eax, %edx
    00002d9e: 	leal	(%r9,%r8), %eax
    00002da2: 	leal	(%rax,%rax,2), %eax
    00002da5: 	leal	(%rdx,%rax,2), %eax
    00002da8: 	shrl	$0x5, %eax
    00002dab: 	movzbl	%al, %edx
    00002dae: 	leal	0x10(%rbp,%r11), %eax
    00002db3: 	movl	%edx, 0xe8(%rsp)
    00002dba: 	leal	(%r9,%r9,2), %edx
    00002dbe: 	leal	(%r9,%rdx,4), %edx
    00002dc2: 	addl	%eax, %edx
    00002dc4: 	leal	(%rbx,%rbx,4), %eax
    00002dc7: 	addl	%eax, %edx
    00002dc9: 	leal	(%rsi,%rcx), %eax
    00002dcc: 	leal	(%rax,%rax,2), %eax
    00002dcf: 	leal	(%rdx,%rax,2), %eax
    00002dd2: 	leal	(%rsi,%rsi,2), %edx
    00002dd5: 	shrl	$0x5, %eax
    00002dd8: 	leal	(%rsi,%rdx,4), %edx
    00002ddb: 	movzbl	%al, %ecx
    00002dde: 	leal	0x10(%r15,%rbx), %eax
    00002de3: 	addl	%eax, %edx
    00002de5: 	leal	(%rbp,%rbp,4), %eax
    00002de9: 	movl	%ecx, 0x134(%rsp)
    00002df0: 	movzbl	0x27131(%rsp), %r11d
    00002df9: 	addl	%eax, %edx
    00002dfb: 	leal	(%r13,%r9), %eax
    00002e00: 	movzbl	0x27132(%rsp), %r9d
    00002e09: 	movzbl	0x272c1(%rsp), %r8d
    00002e12: 	leal	(%rax,%rax,2), %eax
    00002e15: 	movzbl	0x272c2(%rsp), %ecx
    00002e1d: 	movzbl	0x27133(%rsp), %r10d
    00002e26: 	leal	(%rdx,%rax,2), %eax
    00002e29: 	movzbl	0x27130(%rsp), %edx
    00002e31: 	movzbl	0x272c3(%rsp), %esi
    00002e39: 	shrl	$0x5, %eax
    00002e3c: 	movzbl	%al, %ebx
    00002e3f: 	leal	0x10(%r9,%rdx), %edx
    00002e44: 	leal	(%r11,%r11,4), %eax
    00002e48: 	addl	%eax, %edx
    00002e4a: 	leal	(%r8,%r8,2), %eax
    00002e4e: 	movl	%ebx, 0xec(%rsp)
    00002e55: 	leal	(%r8,%rax,4), %eax
    00002e59: 	addl	%eax, %edx
    00002e5b: 	movzbl	0x272c0(%rsp), %eax
    00002e63: 	addl	%ecx, %eax
    00002e65: 	leal	(%rax,%rax,2), %eax
    00002e68: 	leal	(%rdx,%rax,2), %eax
    00002e6b: 	leal	0x10(%r10,%r11), %edx
    00002e70: 	movzbl	0x27134(%rsp), %r11d
    00002e79: 	shrl	$0x5, %eax
    00002e7c: 	movzbl	%al, %ebx
    00002e7f: 	leal	(%r9,%r9,4), %eax
    00002e83: 	addl	%eax, %edx
    00002e85: 	leal	(%rcx,%rcx,2), %eax
    00002e88: 	movl	%ebx, 0xd0(%rsp)
    00002e8f: 	leal	(%rcx,%rax,4), %eax
    00002e92: 	addl	%eax, %edx
    00002e94: 	leal	(%r8,%rsi), %eax
    00002e98: 	movzbl	0x272c4(%rsp), %r8d
    00002ea1: 	leal	(%rax,%rax,2), %eax
    00002ea4: 	leal	(%rdx,%rax,2), %eax
    00002ea7: 	leal	0x10(%r11,%r9), %edx
    00002eac: 	movzbl	0x27135(%rsp), %r9d
    00002eb5: 	shrl	$0x5, %eax
    00002eb8: 	movzbl	%al, %ebx
    00002ebb: 	leal	(%r10,%r10,4), %eax
    00002ebf: 	addl	%eax, %edx
    00002ec1: 	leal	(%rsi,%rsi,2), %eax
    00002ec4: 	movl	%ebx, 0xc8(%rsp)
    00002ecb: 	leal	(%rsi,%rax,4), %eax
    00002ece: 	addl	%eax, %edx
    00002ed0: 	leal	(%r8,%rcx), %eax
    00002ed4: 	movzbl	0x272c5(%rsp), %ecx
    00002edc: 	leal	(%rax,%rax,2), %eax
    00002edf: 	leal	(%rdx,%rax,2), %eax
    00002ee2: 	leal	0x10(%r10,%r9), %edx
    00002ee7: 	movzbl	0x27136(%rsp), %r10d
    00002ef0: 	shrl	$0x5, %eax
    00002ef3: 	movzbl	%al, %ebx
    00002ef6: 	leal	(%r11,%r11,4), %eax
    00002efa: 	addl	%eax, %edx
    00002efc: 	leal	(%r8,%r8,2), %eax
    00002f00: 	movl	%ebx, 0xb8(%rsp)
    00002f07: 	leal	(%r8,%rax,4), %eax
    00002f0b: 	addl	%eax, %edx
    00002f0d: 	leal	(%rsi,%rcx), %eax
    00002f10: 	movzbl	0x272c6(%rsp), %esi
    00002f18: 	leal	(%rax,%rax,2), %eax
    00002f1b: 	leal	(%rdx,%rax,2), %eax
    00002f1e: 	leal	0x10(%r11,%r10), %edx
    00002f23: 	movzbl	0x27137(%rsp), %r11d
    00002f2c: 	shrl	$0x5, %eax
    00002f2f: 	movzbl	%al, %ebx
    00002f32: 	leal	(%r9,%r9,4), %eax
    00002f36: 	addl	%eax, %edx
    00002f38: 	leal	(%rcx,%rcx,2), %eax
    00002f3b: 	movl	%ebx, 0x108(%rsp)
    00002f42: 	leal	(%rcx,%rax,4), %eax
    00002f45: 	addl	%eax, %edx
    00002f47: 	leal	(%r8,%rsi), %eax
    00002f4b: 	movzbl	0x272c7(%rsp), %r8d
    00002f54: 	leal	(%rax,%rax,2), %eax
    00002f57: 	leal	(%rdx,%rax,2), %eax
    00002f5a: 	leal	0x10(%r11,%r9), %edx
    00002f5f: 	movzbl	0x27138(%rsp), %r9d
    00002f68: 	shrl	$0x5, %eax
    00002f6b: 	movzbl	%al, %ebx
    00002f6e: 	leal	(%r10,%r10,4), %eax
    00002f72: 	addl	%eax, %edx
    00002f74: 	leal	(%rsi,%rsi,2), %eax
    00002f77: 	movl	%ebx, 0x100(%rsp)
    00002f7e: 	leal	(%rsi,%rax,4), %eax
    00002f81: 	addl	%eax, %edx
    00002f83: 	leal	(%r8,%rcx), %eax
    00002f87: 	movzbl	0x272c8(%rsp), %ecx
    00002f8f: 	leal	(%rax,%rax,2), %eax
    00002f92: 	leal	(%rdx,%rax,2), %eax
    00002f95: 	leal	0x10(%r9,%r10), %edx
    00002f9a: 	movzbl	0x27139(%rsp), %r10d
    00002fa3: 	shrl	$0x5, %eax
    00002fa6: 	movzbl	%al, %ebx
    00002fa9: 	leal	(%r11,%r11,4), %eax
    00002fad: 	addl	%eax, %edx
    00002faf: 	leal	(%r8,%r8,2), %eax
    00002fb3: 	movl	%ebx, 0xbc(%rsp)
    00002fba: 	leal	(%r8,%rax,4), %eax
    00002fbe: 	addl	%eax, %edx
    00002fc0: 	leal	(%rcx,%rsi), %eax
    00002fc3: 	movzbl	0x272c9(%rsp), %esi
    00002fcb: 	leal	(%rax,%rax,2), %eax
    00002fce: 	leal	(%rdx,%rax,2), %eax
    00002fd1: 	leal	0x10(%r10,%r11), %edx
    00002fd6: 	movzbl	0x2713a(%rsp), %r11d
    00002fdf: 	shrl	$0x5, %eax
    00002fe2: 	movzbl	%al, %ebx
    00002fe5: 	leal	(%r9,%r9,4), %eax
    00002fe9: 	addl	%eax, %edx
    00002feb: 	leal	(%rcx,%rcx,2), %eax
    00002fee: 	movl	%ebx, 0xb4(%rsp)
    00002ff5: 	leal	(%rcx,%rax,4), %eax
    00002ff8: 	addl	%eax, %edx
    00002ffa: 	leal	(%rsi,%r8), %eax
    00002ffe: 	movzbl	0x272ca(%rsp), %r8d
    00003007: 	leal	(%rax,%rax,2), %eax
    0000300a: 	leal	(%rdx,%rax,2), %eax
    0000300d: 	leal	0x10(%r11,%r9), %edx
    00003012: 	shrl	$0x5, %eax
    00003015: 	movzbl	%al, %ebx
    00003018: 	leal	(%r10,%r10,4), %eax
    0000301c: 	addl	%eax, %edx
    0000301e: 	leal	(%rsi,%rsi,2), %eax
    00003021: 	movl	%ebx, 0xc0(%rsp)
    00003028: 	leal	(%rsi,%rax,4), %eax
    0000302b: 	addl	%eax, %edx
    0000302d: 	leal	(%r8,%rcx), %eax
    00003031: 	leal	(%rax,%rax,2), %eax
    00003034: 	leal	(%rdx,%rax,2), %eax
    00003037: 	shrl	$0x5, %eax
    0000303a: 	movzbl	%al, %ebx
    0000303d: 	leal	(%r11,%r11,4), %eax
    00003041: 	movl	%ebx, 0xcc(%rsp)
    00003048: 	movzbl	0x2713b(%rsp), %r9d
    00003051: 	movzbl	0x272cb(%rsp), %ecx
    00003059: 	movdqa	DATAat0x389c0(%rip), %xmm10
    00003062: 	movl	$0x0, 0x60(%rsp)
    0000306a: 	movdqa	DATAat0x389f0(%rip), %xmm14
    00003073: 	leal	0x10(%r10,%r9), %edx
    00003078: 	movzbl	0x2713c(%rsp), %r10d
    00003081: 	movdqa	DATAat0x38a00(%rip), %xmm15
    0000308a: 	addl	%eax, %edx
    0000308c: 	leal	(%r8,%r8,2), %eax
    00003090: 	movdqa	DATAat0x389d0(%rip), %xmm13
    00003099: 	leal	(%r8,%rax,4), %eax
    0000309d: 	punpcklbw	%xmm0, %xmm14
    000030a2: 	punpcklbw	%xmm0, %xmm10
    000030a7: 	movdqa	DATAat0x389e0(%rip), %xmm12
    000030b0: 	addl	%eax, %edx
    000030b2: 	leal	(%rcx,%rsi), %eax
    000030b5: 	movzbl	0x272cc(%rsp), %esi
    000030bd: 	punpcklbw	%xmm0, %xmm15
    000030c2: 	leal	(%rax,%rax,2), %eax
    000030c5: 	leal	(%rdx,%rax,2), %eax
    000030c8: 	leal	0x10(%r11,%r10), %edx
    000030cd: 	movzbl	0x2713d(%rsp), %r11d
    000030d6: 	shrl	$0x5, %eax
    000030d9: 	movzbl	%al, %ebx
    000030dc: 	leal	(%r9,%r9,4), %eax
    000030e0: 	addl	%eax, %edx
    000030e2: 	leal	(%rcx,%rcx,2), %eax
    000030e5: 	movl	%ebx, 0xfc(%rsp)
    000030ec: 	leal	(%rcx,%rax,4), %eax
    000030ef: 	addl	%eax, %edx
    000030f1: 	leal	(%r8,%rsi), %eax
    000030f5: 	movzbl	0x272cd(%rsp), %r8d
    000030fe: 	leal	(%rax,%rax,2), %eax
    00003101: 	leal	(%rdx,%rax,2), %eax
    00003104: 	leal	0x10(%r9,%r11), %edx
    00003109: 	shrl	$0x5, %eax
    0000310c: 	movzbl	%al, %ebx
    0000310f: 	leal	(%r10,%r10,4), %eax
    00003113: 	addl	%eax, %edx
    00003115: 	leal	(%rsi,%rsi,2), %eax
    00003118: 	movl	%ebx, 0x104(%rsp)
    0000311f: 	leal	(%rsi,%rax,4), %eax
    00003122: 	addl	%eax, %edx
    00003124: 	leal	(%r8,%rcx), %eax
    00003128: 	leal	(%rax,%rax,2), %eax
    0000312b: 	leal	(%rdx,%rax,2), %eax
    0000312e: 	leal	0x10(%r12,%r10), %edx
    00003133: 	shrl	$0x5, %eax
    00003136: 	movzbl	%al, %ebx
    00003139: 	leal	(%r11,%r11,4), %eax
    0000313d: 	addl	%eax, %edx
    0000313f: 	leal	(%r8,%r8,2), %eax
    00003143: 	movl	%ebx, 0xf8(%rsp)
    0000314a: 	leal	(%r8,%rax,4), %eax
    0000314e: 	addl	%eax, %edx
    00003150: 	leal	(%rdi,%rsi), %eax
    00003153: 	leal	(%rax,%rax,2), %eax
    00003156: 	leal	(%rdx,%rax,2), %eax
    00003159: 	shrl	$0x5, %eax
    0000315c: 	movzbl	%al, %ebx
    0000315f: 	movzwl	0x8(%rsp), %eax
    00003164: 	movl	%ebx, 0x130(%rsp)
    0000316b: 	leal	0x10(%r11,%rax), %edx
    00003170: 	leal	(%r12,%r12,4), %eax
    00003174: 	addl	%eax, %edx
    00003176: 	leal	(%rdi,%rdi,2), %eax
    00003179: 	leal	(%rdi,%rax,4), %eax
    0000317c: 	addl	%eax, %edx
    0000317e: 	leal	(%r14,%r8), %eax
    00003182: 	leal	(%rax,%rax,2), %eax
    00003185: 	leal	(%rdx,%rax,2), %eax
    00003188: 	shrl	$0x5, %eax
    0000318b: 	andl	$0xff, %eax
    00003190: 	movl	%eax, 0xf0(%rsp)
    00003197: 	leaq	0x360(%rsp), %rax
    0000319f: 	movq	%rax, 0x40(%rsp)
    000031a4: 	leaq	0x1d1(%rsp), %rax
    000031ac: 	movq	%rax, 0x38(%rsp)
    000031b1: 	leaq	0x26fb0(%rsp), %rax
    000031b9: 	movq	%rax, 0x8(%rsp)
    000031be: 	leaq	0x272d1(%rsp), %rax
    000031c6: 	movq	%rax, 0x90(%rsp)
    000031ce: 	leaq	0x362(%rsp), %rax
    000031d6: 	movq	%rax, 0xa0(%rsp)
    000031de: 	movq	0x30(%rsp), %rax
    000031e3: 	addq	$0x181, %rax
    000031e9: 	movq	%rax, 0x88(%rsp)
    000031f1: 	leaq	0x35f(%rsp), %rax
    000031f9: 	movq	%rax, 0x98(%rsp)
    00003201: 	leaq	0x40(%rsp), %rax
    00003206: 	movq	%rax, 0x20(%rsp)
    0000320b: 	leaq	0x272cf(%rsp), %rax
    00003213: 	movq	%rax, 0x50(%rsp)
    00003218: 	leaq	0x41(%rsp), %rax
    0000321d: 	movq	%rax, 0x48(%rsp)
    00003222: 	leaq	0x361(%rsp), %rax
    0000322a: 	movq	%rax, 0x58(%rsp)
    0000322f: 	leaq	0x4e241(%rsp), %rax
    00003237: 	movq	%rax, 0x78(%rsp)
    0000323c: 	leaq	0x27142(%rsp), %rax
    00003244: 	movq	%rax, 0x80(%rsp)
    0000324c: 	nopl	(%rax) # Size: 4
.Ltmp4155:
    00003250: 	movzbl	0xd8(%rsp), %eax
    00003258: 	movq	0x90(%rsp), %rdx
    00003260: 	movq	0x88(%rsp), %rcx
    00003268: 	movb	%al, 0x272d0(%rsp)
    0000326f: 	movq	0xa0(%rsp), %rax
    00003277: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4148:
    00003280: 	movdqu	-0x191(%rax), %xmm1
    00003288: 	movdqu	(%rax), %xmm6
    0000328c: 	addq	$0x10, %rdx
    00003290: 	addq	$0x10, %rax
    00003294: 	movdqa	-0x12(%rax), %xmm8
    0000329a: 	movdqu	-0x11(%rax), %xmm2
    0000329f: 	movdqa	%xmm1, %xmm3
    000032a3: 	punpckhbw	%xmm0, %xmm1
    000032a7: 	movdqa	%xmm6, %xmm9
    000032ac: 	movdqa	-0x1a2(%rax), %xmm4
    000032b4: 	punpcklbw	%xmm0, %xmm3
    000032b8: 	movdqa	%xmm8, %xmm7
    000032bd: 	movdqu	-0x1a0(%rax), %xmm5
    000032c5: 	punpcklbw	%xmm0, %xmm9
    000032ca: 	pmullw	%xmm14, %xmm3
    000032cf: 	punpcklbw	%xmm0, %xmm7
    000032d3: 	punpckhbw	%xmm0, %xmm8
    000032d8: 	pmullw	%xmm14, %xmm1
    000032dd: 	punpckhbw	%xmm0, %xmm6
    000032e1: 	paddw	%xmm7, %xmm3
    000032e5: 	movdqa	%xmm2, %xmm7
    000032e9: 	punpckhbw	%xmm0, %xmm2
    000032ed: 	punpcklbw	%xmm0, %xmm7
    000032f1: 	pmullw	%xmm15, %xmm2
    000032f6: 	paddw	%xmm8, %xmm1
    000032fb: 	pmullw	%xmm15, %xmm7
    00003300: 	paddw	%xmm6, %xmm2
    00003304: 	paddw	%xmm9, %xmm7
    00003309: 	movdqa	%xmm4, %xmm9
    0000330e: 	punpckhbw	%xmm0, %xmm4
    00003312: 	paddw	%xmm7, %xmm3
    00003316: 	movdqa	%xmm5, %xmm7
    0000331a: 	punpcklbw	%xmm0, %xmm9
    0000331f: 	punpcklbw	%xmm0, %xmm7
    00003323: 	punpckhbw	%xmm0, %xmm5
    00003327: 	paddw	%xmm2, %xmm1
    0000332b: 	paddw	%xmm7, %xmm9
    00003330: 	paddw	%xmm5, %xmm4
    00003334: 	movdqa	%xmm9, %xmm7
    00003339: 	movdqa	%xmm4, %xmm2
    0000333d: 	psllw	$0x1, %xmm7
    00003342: 	psllw	$0x1, %xmm2
    00003347: 	paddw	%xmm9, %xmm7
    0000334c: 	paddw	%xmm4, %xmm2
    00003350: 	psllw	$0x1, %xmm7
    00003355: 	psllw	$0x1, %xmm2
    0000335a: 	paddw	%xmm13, %xmm7
    0000335f: 	paddw	%xmm13, %xmm2
    00003364: 	paddw	%xmm7, %xmm3
    00003368: 	paddw	%xmm2, %xmm1
    0000336c: 	psrlw	$0x5, %xmm3
    00003371: 	psrlw	$0x5, %xmm1
    00003376: 	pand	%xmm12, %xmm3
    0000337b: 	pand	%xmm12, %xmm1
    00003380: 	packuswb	%xmm1, %xmm3
    00003384: 	movups	%xmm3, -0x10(%rdx)
    00003388: 	cmpq	%rdx, %rcx
    0000338b: 	jne	.Ltmp4148 # Offset: 13195
    00003391: 	movzbl	0xc4(%rsp), %eax
    00003399: 	movq	0x98(%rsp), %r9
    000033a1: 	xorl	%r15d, %r15d
    000033a4: 	movb	%al, 0x27451(%rsp)
    000033ab: 	movzbl	0x10c(%rsp), %eax
    000033b3: 	movb	%al, 0x27452(%rsp)
    000033ba: 	movzbl	0x110(%rsp), %eax
    000033c2: 	movb	%al, 0x27453(%rsp)
    000033c9: 	movzbl	0x114(%rsp), %eax
    000033d1: 	movb	%al, 0x27454(%rsp)
    000033d8: 	movzbl	0x118(%rsp), %eax
    000033e0: 	movb	%al, 0x27455(%rsp)
    000033e7: 	movzbl	0x11c(%rsp), %eax
    000033ef: 	movb	%al, 0x27456(%rsp)
    000033f6: 	movzbl	0x120(%rsp), %eax
    000033fe: 	movb	%al, 0x27457(%rsp)
    00003405: 	movzbl	0x124(%rsp), %eax
    0000340d: 	movb	%al, 0x27458(%rsp)
    00003414: 	movzbl	0x128(%rsp), %eax
    0000341c: 	movb	%al, 0x27459(%rsp)
    00003423: 	movzbl	0x12c(%rsp), %eax
    0000342b: 	movb	%al, 0x2745a(%rsp)
    00003432: 	movzbl	0xf4(%rsp), %eax
    0000343a: 	movb	%al, 0x2745b(%rsp)
    00003441: 	movzbl	0xe8(%rsp), %eax
    00003449: 	movb	%al, 0x2745c(%rsp)
    00003450: 	movzbl	0x134(%rsp), %eax
    00003458: 	movb	%al, 0x2745d(%rsp)
    0000345f: 	movzbl	0xec(%rsp), %eax
    00003467: 	movb	%al, 0x2745e(%rsp)
    0000346e: 	movzbl	0xdc(%rsp), %eax
    00003476: 	movb	%al, 0x2745f(%rsp)
    0000347d: 	movq	0x28(%rsp), %rax
    00003482: 	movq	0x30(%rsp), %r14
    00003487: 	movzwl	0x13e(%rsp), %ebx
    0000348f: 	movzbl	0xd4(%rsp), %edx
    00003497: 	movzwl	0x138(%rsp), %r11d
    000034a0: 	movw	%bx, 0x18(%rsp)
    000034a5: 	nopl	(%rax) # Size: 3
.Ltmp4153:
    000034a8: 	movzwl	0x18(%rsp), %ebx
    000034ad: 	leal	(%r11,%r11,2), %ecx
    000034b1: 	leaq	0x1(%rax), %r13
    000034b5: 	leal	(%r11,%rcx,4), %esi
    000034b9: 	movzbl	0x320(%rax), %r11d
    000034c1: 	leaq	0x2(%rax), %r12
    000034c5: 	leal	(%rbx,%rbx,4), %ecx
    000034c8: 	movzbl	0x321(%rax), %ebx
    000034cf: 	leaq	0x190(%rax), %r10
    000034d6: 	leal	0x10(%rsi,%rcx), %ecx
    000034da: 	movzbl	0x1(%rax), %esi
    000034de: 	addl	%r11d, %edx
    000034e1: 	leaq	0x191(%rax), %rbp
    000034e8: 	leal	(%rdx,%rdx,2), %edx
    000034eb: 	movw	%bx, 0x18(%rsp)
    000034f0: 	leaq	0x320(%rax), %r8
    000034f7: 	addl	%esi, %ecx
    000034f9: 	leaq	0x321(%rax), %rdi
    00003500: 	leaq	0x322(%rax), %rsi
    00003507: 	addl	%ebx, %ecx
    00003509: 	leaq	0x192(%rax), %rbx
    00003510: 	leal	(%rcx,%rdx,2), %edx
    00003513: 	leaq	0x191(%r14), %rcx
    0000351a: 	movzwl	%dx, %edx
    0000351d: 	sarl	$0x5, %edx
    00003520: 	movb	%dl, 0x190(%r14)
    00003527: 	xorl	%edx, %edx
    00003529: 	nopl	(%rax) # Size: 7
.Ltmp4149:
    00003530: 	movdqu	(%r13,%rdx), %xmm2
    00003537: 	movdqa	(%r10,%rdx), %xmm9
    0000353d: 	movdqu	(%rbx,%rdx), %xmm4
    00003542: 	movdqu	(%rdi,%rdx), %xmm8
    00003548: 	movdqa	%xmm9, %xmm5
    0000354d: 	movdqa	%xmm2, %xmm1
    00003551: 	movdqu	(%rsi,%rdx), %xmm3
    00003556: 	movdqa	(%rax,%rdx), %xmm7
    0000355b: 	punpcklbw	%xmm0, %xmm5
    0000355f: 	punpcklbw	%xmm0, %xmm1
    00003563: 	movdqa	%xmm8, %xmm6
    00003568: 	movdqa	(%r8,%rdx), %xmm11
    0000356e: 	paddw	%xmm5, %xmm1
    00003572: 	movdqa	%xmm4, %xmm5
    00003576: 	punpcklbw	%xmm0, %xmm6
    0000357a: 	punpcklbw	%xmm0, %xmm5
    0000357e: 	punpckhbw	%xmm0, %xmm9
    00003583: 	punpckhbw	%xmm0, %xmm2
    00003587: 	paddw	%xmm6, %xmm5
    0000358b: 	movdqu	(%r12,%rdx), %xmm6
    00003591: 	punpckhbw	%xmm0, %xmm8
    00003596: 	punpckhbw	%xmm0, %xmm4
    0000359a: 	paddw	%xmm1, %xmm5
    0000359e: 	paddw	%xmm8, %xmm4
    000035a3: 	punpcklbw	%xmm0, %xmm11
    000035a8: 	movdqa	%xmm5, %xmm1
    000035ac: 	punpcklbw	%xmm0, %xmm6
    000035b0: 	paddw	%xmm9, %xmm2
    000035b5: 	psllw	$0x2, %xmm1
    000035ba: 	paddw	%xmm4, %xmm2
    000035be: 	paddw	%xmm5, %xmm1
    000035c2: 	movdqa	%xmm3, %xmm5
    000035c6: 	movdqa	%xmm2, %xmm4
    000035ca: 	punpcklbw	%xmm0, %xmm5
    000035ce: 	psllw	$0x2, %xmm4
    000035d3: 	punpckhbw	%xmm0, %xmm3
    000035d7: 	paddw	%xmm13, %xmm5
    000035dc: 	paddw	%xmm4, %xmm2
    000035e0: 	movdqa	(%r8,%rdx), %xmm4
    000035e6: 	paddw	%xmm5, %xmm1
    000035ea: 	movdqa	%xmm7, %xmm5
    000035ee: 	punpckhbw	%xmm0, %xmm7
    000035f2: 	punpcklbw	%xmm0, %xmm5
    000035f6: 	punpckhbw	%xmm0, %xmm4
    000035fa: 	paddw	%xmm6, %xmm5
    000035fe: 	movdqu	(%rbp,%rdx), %xmm6
    00003604: 	punpcklbw	%xmm0, %xmm6
    00003608: 	pmullw	%xmm10, %xmm6
    0000360d: 	paddw	%xmm11, %xmm6
    00003612: 	paddw	%xmm6, %xmm5
    00003616: 	paddw	%xmm5, %xmm1
    0000361a: 	movdqa	%xmm3, %xmm5
    0000361e: 	movdqa	%xmm2, %xmm3
    00003622: 	movdqu	(%r12,%rdx), %xmm2
    00003628: 	paddw	%xmm13, %xmm5
    0000362d: 	psrlw	$0x5, %xmm1
    00003632: 	punpckhbw	%xmm0, %xmm2
    00003636: 	paddw	%xmm5, %xmm3
    0000363a: 	pand	%xmm12, %xmm1
    0000363f: 	paddw	%xmm2, %xmm7
    00003643: 	movdqu	(%rbp,%rdx), %xmm2
    00003649: 	punpckhbw	%xmm0, %xmm2
    0000364d: 	pmullw	%xmm10, %xmm2
    00003652: 	paddw	%xmm4, %xmm2
    00003656: 	paddw	%xmm2, %xmm7
    0000365a: 	paddw	%xmm7, %xmm3
    0000365e: 	psrlw	$0x5, %xmm3
    00003663: 	pand	%xmm12, %xmm3
    00003668: 	packuswb	%xmm3, %xmm1
    0000366c: 	movups	%xmm1, (%rcx,%rdx)
    00003670: 	addq	$0x10, %rdx
    00003674: 	cmpq	$0x180, %rdx
    0000367b: 	jne	.Ltmp4149 # Offset: 13947
    00003681: 	movl	$0x181, 0x10(%rsp)
    00003689: 	movzbl	0x180(%rax), %r13d
    00003691: 	leaq	0x312(%r15), %r8
    00003698: 	addq	$0x190, %r15
    0000369f: 	movzbl	0x181(%rax), %r12d
    000036a7: 	movzbl	0x310(%rax), %edx
    000036ae: 	movzbl	0x311(%rax), %ebp
    000036b5: 	movzbl	0x4a1(%rax), %esi
    000036bc: 	movzbl	0x4a0(%rax), %ecx
.Ltmp4150:
    000036c3: 	movq	0x20(%rsp), %rdi
    000036c8: 	movl	%r13d, %ebx
    000036cb: 	addl	$0x2, 0x10(%rsp)
    000036d0: 	leal	0x10(%rbx,%rcx), %ebx
    000036d4: 	movzbl	(%rdi,%r8), %r13d
    000036d9: 	movq	0x40(%rsp), %rdi
    000036de: 	leal	(%rbx,%rbp,8), %ebx
    000036e1: 	movzbl	(%rdi,%r8), %ecx
    000036e6: 	leal	(%rdx,%r12), %edi
    000036ea: 	movq	0x28(%rsp), %rdx
    000036ef: 	addl	%r13d, %ebx
    000036f2: 	addl	%esi, %edi
    000036f4: 	movzbl	(%rdx,%r8), %edx
    000036f9: 	addl	%ecx, %ebx
    000036fb: 	addl	%edx, %edi
    000036fd: 	leal	(%rdi,%rdi,4), %edi
    00003700: 	addl	%ebx, %edi
    00003702: 	movq	0x50(%rsp), %rbx
    00003707: 	movzwl	%di, %edi
    0000370a: 	sarl	$0x5, %edi
    0000370d: 	movb	%dil, (%rbx,%r8)
    00003711: 	leal	0x10(%rsi,%r12), %edi
    00003716: 	movq	0x48(%rsp), %rsi
    0000371b: 	leal	(%rcx,%r13), %ebx
    0000371f: 	addl	%ebp, %ebx
    00003721: 	movq	0x38(%rsp), %rbp
    00003726: 	movzbl	(%rsi,%r8), %r12d
    0000372b: 	movq	0x58(%rsp), %rsi
    00003730: 	movzbl	(%rbp,%r8), %ebp
    00003736: 	movzbl	(%rsi,%r8), %esi
    0000373b: 	addl	%r12d, %edi
    0000373e: 	addl	%ebp, %ebx
    00003740: 	addl	%esi, %edi
    00003742: 	leal	(%rbx,%rbx,4), %ebx
    00003745: 	leal	(%rdi,%rdx,8), %edi
    00003748: 	addl	%ebx, %edi
    0000374a: 	movq	0x30(%rsp), %rbx
    0000374f: 	movzwl	%di, %edi
    00003752: 	sarl	$0x5, %edi
    00003755: 	movb	%dil, (%rbx,%r8)
    00003759: 	addq	$0x2, %r8
    0000375d: 	cmpl	$0x18d, 0x10(%rsp)
    00003765: 	jne	.Ltmp4150 # Offset: 14181
    0000376b: 	leaq	0x18d(%rax), %rsi
    00003772: 	leaq	0x31d(%rax), %r8
    00003779: 	leaq	0x4ad(%rax), %rdi
    00003780: 	leaq	0x31d(%r14), %rbx
    00003787: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4151:
    00003790: 	movzbl	-0x1(%rsi), %ecx
    00003794: 	movzbl	0x1(%rsi), %edx
    00003798: 	addq	$0x1, %rsi
    0000379c: 	addq	$0x1, %r8
    000037a0: 	movzbl	-0x1(%rsi), %ebp
    000037a4: 	addq	$0x1, %rdi
    000037a8: 	addq	$0x1, %rbx
    000037ac: 	leal	0x10(%rdx,%rcx), %edx
    000037b0: 	movzbl	-0x2(%rdi), %ecx
    000037b4: 	addl	%ecx, %edx
    000037b6: 	movzbl	(%rdi), %ecx
    000037b9: 	addl	%ecx, %edx
    000037bb: 	movzbl	-0x1(%r8), %ecx
    000037c0: 	leal	(%rdx,%rcx,8), %ecx
    000037c3: 	movzbl	-0x2(%r8), %edx
    000037c8: 	addl	%ebp, %edx
    000037ca: 	movzbl	(%r8), %ebp
    000037ce: 	addl	%ebp, %edx
    000037d0: 	movzbl	-0x1(%rdi), %ebp
    000037d4: 	addl	%ebp, %edx
    000037d6: 	leal	(%rdx,%rdx,4), %edx
    000037d9: 	addl	%edx, %ecx
    000037db: 	movzwl	%cx, %ecx
    000037de: 	sarl	$0x5, %ecx
    000037e1: 	movb	%cl, -0x1(%rbx)
    000037e4: 	cmpq	%rsi, %r9
    000037e7: 	jne	.Ltmp4151 # Offset: 14311
    000037e9: 	movzbl	0x4ae(%rax), %edx
    000037f0: 	movzbl	0x18e(%rax), %ecx
    000037f7: 	addq	$0x190, %r14
    000037fe: 	addq	$0x190, %r9
    00003805: 	movzbl	0x31f(%rax), %esi
    0000380c: 	leal	0x10(%rcx,%rdx), %ecx
    00003810: 	movzbl	0x31e(%rax), %edx
    00003817: 	leal	(%rdx,%rdx,4), %edx
    0000381a: 	addl	%edx, %ecx
    0000381c: 	leal	(%rsi,%rsi,2), %edx
    0000381f: 	leal	(%rsi,%rdx,4), %edx
    00003822: 	addl	%ecx, %edx
    00003824: 	movzbl	0x18f(%rax), %ecx
    0000382b: 	movzbl	0x4af(%rax), %eax
    00003832: 	addl	%eax, %ecx
    00003834: 	leal	(%rcx,%rcx,2), %ecx
    00003837: 	leal	(%rdx,%rcx,2), %ecx
    0000383a: 	movzwl	%cx, %ecx
    0000383d: 	sarl	$0x5, %ecx
    00003840: 	movb	%cl, 0x18f(%r14)
    00003847: 	cmpq	0x8(%rsp), %r10
    0000384c: 	je	.Ltmp4152 # Offset: 14412
    0000384e: 	movzbl	(%r10), %edx
    00003852: 	movq	%r10, %rax
    00003855: 	jmp	.Ltmp4153 # Offset: 14421
    0000385a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4152:
    00003860: 	movzbl	0xe0(%rsp), %eax
    00003868: 	movq	0x78(%rsp), %rdx
    0000386d: 	movq	0x68(%rsp), %rcx
    00003872: 	movb	%al, 0x4e240(%rsp)
    00003879: 	movq	0x80(%rsp), %rax
    00003881: 	nopl	(%rax) # Size: 7
.Ltmp4154:
    00003888: 	movdqu	-0x1(%rax), %xmm2
    0000388d: 	movdqu	-0x190(%rax), %xmm6
    00003895: 	addq	$0x10, %rdx
    00003899: 	addq	$0x10, %rax
    0000389d: 	movdqu	-0x1a1(%rax), %xmm1
    000038a5: 	movdqa	-0x1a2(%rax), %xmm7
    000038ad: 	movdqa	%xmm2, %xmm3
    000038b1: 	movdqa	%xmm6, %xmm8
    000038b6: 	punpckhbw	%xmm0, %xmm2
    000038ba: 	movdqa	-0x12(%rax), %xmm4
    000038bf: 	punpcklbw	%xmm0, %xmm3
    000038c3: 	punpcklbw	%xmm0, %xmm8
    000038c8: 	movdqa	%xmm7, %xmm9
    000038cd: 	movdqu	-0x10(%rax), %xmm5
    000038d2: 	pmullw	%xmm14, %xmm3
    000038d7: 	pmullw	%xmm14, %xmm2
    000038dc: 	punpcklbw	%xmm0, %xmm9
    000038e1: 	punpckhbw	%xmm0, %xmm7
    000038e5: 	punpckhbw	%xmm0, %xmm6
    000038e9: 	paddw	%xmm8, %xmm3
    000038ee: 	movdqa	%xmm1, %xmm8
    000038f3: 	punpckhbw	%xmm0, %xmm1
    000038f7: 	punpcklbw	%xmm0, %xmm8
    000038fc: 	pmullw	%xmm15, %xmm1
    00003901: 	paddw	%xmm6, %xmm2
    00003905: 	pmullw	%xmm15, %xmm8
    0000390a: 	paddw	%xmm7, %xmm1
    0000390e: 	paddw	%xmm9, %xmm8
    00003913: 	movdqa	%xmm4, %xmm9
    00003918: 	punpckhbw	%xmm0, %xmm4
    0000391c: 	paddw	%xmm8, %xmm3
    00003921: 	movdqa	%xmm5, %xmm8
    00003926: 	punpcklbw	%xmm0, %xmm9
    0000392b: 	punpcklbw	%xmm0, %xmm8
    00003930: 	punpckhbw	%xmm0, %xmm5
    00003934: 	paddw	%xmm2, %xmm1
    00003938: 	paddw	%xmm8, %xmm9
    0000393d: 	paddw	%xmm5, %xmm4
    00003941: 	movdqa	%xmm9, %xmm8
    00003946: 	movdqa	%xmm4, %xmm2
    0000394a: 	psllw	$0x1, %xmm8
    00003950: 	psllw	$0x1, %xmm2
    00003955: 	paddw	%xmm9, %xmm8
    0000395a: 	paddw	%xmm4, %xmm2
    0000395e: 	psllw	$0x1, %xmm8
    00003964: 	psllw	$0x1, %xmm2
    00003969: 	paddw	%xmm13, %xmm8
    0000396e: 	paddw	%xmm13, %xmm2
    00003973: 	paddw	%xmm8, %xmm3
    00003978: 	paddw	%xmm2, %xmm1
    0000397c: 	psrlw	$0x5, %xmm3
    00003981: 	psrlw	$0x5, %xmm1
    00003986: 	pand	%xmm12, %xmm3
    0000398b: 	pand	%xmm12, %xmm1
    00003990: 	packuswb	%xmm1, %xmm3
    00003994: 	movups	%xmm3, -0x10(%rdx)
    00003998: 	cmpq	%rcx, %rdx
    0000399b: 	jne	.Ltmp4154 # Offset: 14747
    000039a1: 	movzbl	0xd0(%rsp), %eax
    000039a9: 	addl	$0x1, 0x60(%rsp)
    000039ae: 	movb	%al, 0x4e3c1(%rsp)
    000039b5: 	movzbl	0xc8(%rsp), %eax
    000039bd: 	movb	%al, 0x4e3c2(%rsp)
    000039c4: 	movzbl	0xb8(%rsp), %eax
    000039cc: 	movb	%al, 0x4e3c3(%rsp)
    000039d3: 	movzbl	0x108(%rsp), %eax
    000039db: 	movb	%al, 0x4e3c4(%rsp)
    000039e2: 	movzbl	0x100(%rsp), %eax
    000039ea: 	movb	%al, 0x4e3c5(%rsp)
    000039f1: 	movzbl	0xbc(%rsp), %eax
    000039f9: 	movb	%al, 0x4e3c6(%rsp)
    00003a00: 	movzbl	0xb4(%rsp), %eax
    00003a08: 	movb	%al, 0x4e3c7(%rsp)
    00003a0f: 	movzbl	0xc0(%rsp), %eax
    00003a17: 	movb	%al, 0x4e3c8(%rsp)
    00003a1e: 	movzbl	0xcc(%rsp), %eax
    00003a26: 	movb	%al, 0x4e3c9(%rsp)
    00003a2d: 	movzbl	0xfc(%rsp), %eax
    00003a35: 	movb	%al, 0x4e3ca(%rsp)
    00003a3c: 	movzbl	0x104(%rsp), %eax
    00003a44: 	movb	%al, 0x4e3cb(%rsp)
    00003a4b: 	movzbl	0xf8(%rsp), %eax
    00003a53: 	movb	%al, 0x4e3cc(%rsp)
    00003a5a: 	movzbl	0x130(%rsp), %eax
    00003a62: 	movb	%al, 0x4e3cd(%rsp)
    00003a69: 	movzbl	0xf0(%rsp), %eax
    00003a71: 	movb	%al, 0x4e3ce(%rsp)
    00003a78: 	movl	0x60(%rsp), %eax
    00003a7c: 	cmpl	0xe4(%rsp), %eax
    00003a83: 	jne	.Ltmp4155 # Offset: 14979
    00003a89: 	movzbl	0x15c(%rsp), %eax
    00003a91: 	movb	%al, 0x4e3cf(%rsp)
.Ltmp4147:
    00003a98: 	xorl	%eax, %eax
    00003a9a: 	movq	0x68(%rsp), %r9
    00003a9f: 	pxor	%xmm3, %xmm3
    00003aa3: 	pxor	%xmm2, %xmm2
    00003aa7: 	movq	0x140(%rsp), %rdi
    00003aaf: 	movq	0x148(%rsp), %rcx
    00003ab7: 	movl	%eax, %r8d
    00003aba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4157:
    00003ac0: 	movq	%rdi, %rdx
    00003ac3: 	pxor	%xmm0, %xmm0
    00003ac7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4156:
    00003ad0: 	movdqu	(%rdx), %xmm4
    00003ad4: 	addq	$0x10, %rdx
    00003ad8: 	paddb	%xmm4, %xmm0
    00003adc: 	cmpq	%rdx, %rcx
    00003adf: 	jne	.Ltmp4156 # Offset: 15071
    00003ae1: 	movdqa	%xmm0, %xmm1
    00003ae5: 	addq	$0x190, %rcx
    00003aec: 	addq	$0x190, %rdi
    00003af3: 	psrldq	$0x8, %xmm1
    00003af8: 	paddb	%xmm1, %xmm0
    00003afc: 	psadbw	%xmm3, %xmm0
    00003b00: 	movd	%xmm0, %edx
    00003b04: 	movq	-0x190(%rcx), %xmm0
    00003b0c: 	movdqa	%xmm0, %xmm4
    00003b10: 	psadbw	%xmm2, %xmm4
    00003b14: 	movq	%xmm4, 0x160(%rsp)
    00003b1d: 	movq	%xmm4, %rsi
    00003b22: 	movzbl	-0x187(%rcx), %eax
    00003b29: 	addb	-0x188(%rcx), %al
    00003b2f: 	addl	%r8d, %eax
    00003b32: 	addb	-0x186(%rcx), %al
    00003b38: 	addb	-0x185(%rcx), %al
    00003b3e: 	movl	%esi, %r10d
    00003b41: 	addb	-0x184(%rcx), %al
    00003b47: 	addb	-0x183(%rcx), %al
    00003b4d: 	addl	%edx, %eax
    00003b4f: 	leal	(%rax,%r10), %r8d
    00003b53: 	cmpq	%r9, %rcx
    00003b56: 	jne	.Ltmp4157 # Offset: 15190
    00003b5c: 	cvttsd2si	init_value(%rip), %edx
    00003b64: 	movl	%edx, %ecx
    00003b66: 	shll	$0x4, %ecx
    00003b69: 	subl	%ecx, %edx
    00003b6b: 	shll	$0x2, %edx
    00003b6e: 	cmpb	%r8b, %dl
    00003b71: 	je	.Ltmp4158 # Offset: 15217
    00003b73: 	movq	0x1b0(%rsp), %rdx
    00003b7b: 	leaq	DATAat0x381c8(%rip), %rsi
    00003b82: 	movl	$0x1, %edi
    00003b87: 	xorl	%eax, %eax
    00003b89: 	callq	__printf_chk@PLT # Offset: 15241
.Ltmp4158:
    00003b8e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00003b95: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00003b9c: 	subq	$0x20, %rax
    00003ba0: 	cmpq	%rax, %rbx
    00003ba3: 	je	.Ltmp4159 # Offset: 15267
    00003ba9: 	leaq	0x10(%rbx), %rdi
    00003bad: 	movq	0x1b8(%rsp), %r12
    00003bb5: 	movq	%rdi, (%rbx)
    00003bb8: 	movq	0x1b0(%rsp), %rbp
    00003bc0: 	movq	%rbp, %rax
    00003bc3: 	addq	%r12, %rax
    00003bc6: 	je	.Ltmp4160 # Offset: 15302
    00003bc8: 	testq	%rbp, %rbp
    00003bcb: 	je	.Ltmp4161 # Offset: 15307
.Ltmp4160:
    00003bd1: 	movq	%r12, 0x188(%rsp)
    00003bd9: 	cmpq	$0xf, %r12
    00003bdd: 	ja	.Ltmp4162 # Offset: 15325
    00003be3: 	cmpq	$0x1, %r12
    00003be7: 	jne	.Ltmp4163 # Offset: 15335
    00003bed: 	movzbl	(%rbp), %eax
    00003bf1: 	movb	%al, 0x10(%rbx)
.Ltmp4194:
    00003bf4: 	movq	%r12, 0x8(%rbx)
    00003bf8: 	movb	$0x0, (%rdi,%r12)
    00003bfd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003c04: 	addq	$0x20, %rax
    00003c08: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp4193:
    00003c0f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00003c16: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003c1d: 	je	.Ltmp4164 # Offset: 15389
.Ltmp4192:
    00003c23: 	movq	-0x20(%rax), %rbp
    00003c27: 	callq	clock@PLT # Offset: 15399
    00003c2c: 	pxor	%xmm0, %xmm0
    00003c30: 	movq	%rax, end_time(%rip)
    00003c37: 	movq	%rbp, %rdi
    00003c3a: 	subq	start_time(%rip), %rax
    00003c41: 	cvtsi2sd	%rax, %xmm0
    00003c46: 	divsd	DATAat0x38a48(%rip), %xmm0
    00003c4e: 	callq	_Z13record_resultdPKc # Offset: 15438
    00003c53: 	movq	0x1b0(%rsp), %rdi
    00003c5b: 	cmpq	0x70(%rsp), %rdi
    00003c60: 	je	.Ltmp4165 # Offset: 15456
    00003c62: 	movq	0x1c0(%rsp), %rax
    00003c6a: 	leaq	0x1(%rax), %rsi
    00003c6e: 	callq	_ZdlPvm@PLT # Offset: 15470
.Ltmp4165:
    00003c73: 	movq	0x70(%rsp), %rax
    00003c78: 	movq	0x190(%rsp), %rbp
    00003c80: 	movq	0x198(%rsp), %r12
    00003c88: 	movq	%rax, 0x1b0(%rsp)
    00003c90: 	movq	%rbp, %rax
    00003c93: 	addq	%r12, %rax
    00003c96: 	je	.Ltmp4166 # Offset: 15510
    00003c98: 	testq	%rbp, %rbp
    00003c9b: 	je	.Ltmp4167 # Offset: 15515
.Ltmp4166:
    00003ca1: 	movq	%r12, 0x188(%rsp)
    00003ca9: 	cmpq	$0xf, %r12
    00003cad: 	ja	.Ltmp4168 # Offset: 15533
    00003cb3: 	cmpq	$0x1, %r12
    00003cb7: 	jne	.Ltmp4169 # Offset: 15543
    00003cbd: 	movzbl	(%rbp), %eax
    00003cc1: 	movb	%al, 0x1c0(%rsp)
    00003cc8: 	movq	0x70(%rsp), %rax
.Ltmp4175:
    00003ccd: 	movq	%r12, 0x1b8(%rsp)
    00003cd5: 	movb	$0x0, (%rax,%r12)
    00003cda: 	movabsq	$0x3fffffffffffffff, %rax
    00003ce4: 	subq	0x1b8(%rsp), %rax
    00003cec: 	cmpq	$0x1f, %rax
    00003cf0: 	jbe	.Ltmp4170 # Offset: 15600
    00003cf6: 	movq	0xa8(%rsp), %rdi
    00003cfe: 	movl	$0x20, %edx
    00003d03: 	leaq	DATAat0x38810(%rip), %rsi
    00003d0a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 15626
    00003d0f: 	movl	iterations(%rip), %edx
    00003d15: 	xorl	%r8d, %r8d
    00003d18: 	xorl	%ecx, %ecx
    00003d1a: 	movl	$0x1f40, %esi
    00003d1f: 	movq	0x1b0(%rsp), %rdi
    00003d27: 	callq	_Z9summarizePKciiii # Offset: 15655
    00003d2c: 	movl	0x158(%rsp), %eax
    00003d33: 	movq	0x1b0(%rsp), %rdi
    00003d3b: 	movl	%eax, iterations(%rip)
    00003d41: 	cmpq	0x70(%rsp), %rdi
    00003d46: 	je	.Ltmp4171 # Offset: 15686
    00003d48: 	movq	0x1c0(%rsp), %rax
    00003d50: 	leaq	0x1(%rax), %rsi
    00003d54: 	callq	_ZdlPvm@PLT # Offset: 15700
.Ltmp4171:
    00003d59: 	movq	0x190(%rsp), %rdi
    00003d61: 	cmpq	0x150(%rsp), %rdi
    00003d69: 	je	.Ltmp4172 # Offset: 15721
    00003d6b: 	movq	0x1a0(%rsp), %rax
    00003d73: 	leaq	0x1(%rax), %rsi
    00003d77: 	callq	_ZdlPvm@PLT # Offset: 15735
.Ltmp4172:
    00003d7c: 	movq	0x4e3d8(%rsp), %rax
    00003d84: 	subq	%fs:0x28, %rax
    00003d8d: 	jne	.Ltmp4173 # Offset: 15757
    00003d93: 	addq	$0x4e3e8, %rsp
    00003d9a: 	popq	%rbx
    00003d9b: 	popq	%rbp
    00003d9c: 	popq	%r12
    00003d9e: 	popq	%r13
    00003da0: 	popq	%r14
    00003da2: 	popq	%r15
    00003da4: 	retq # Offset: 15780
.Ltmp4038:
    00003da5: 	movq	0x1b0(%rsp), %rdx
    00003dad: 	leaq	DATAat0x381c8(%rip), %rsi
    00003db4: 	movl	$0x1, %edi
    00003db9: 	xorl	%eax, %eax
    00003dbb: 	callq	__printf_chk@PLT # Offset: 15803
    00003dc0: 	jmp	.Ltmp4174 # Offset: 15808
.Ltmp4168:
    00003dc5: 	movq	0xa8(%rsp), %rdi
    00003dcd: 	leaq	0x188(%rsp), %rsi
    00003dd5: 	xorl	%edx, %edx
    00003dd7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15831
    00003ddc: 	movq	%rax, 0x1b0(%rsp)
    00003de4: 	movq	%rax, %rdi
    00003de7: 	movq	0x188(%rsp), %rax
    00003def: 	movq	%rax, 0x1c0(%rsp)
.Ltmp4205:
    00003df7: 	movq	%r12, %rdx
    00003dfa: 	movq	%rbp, %rsi
    00003dfd: 	callq	memcpy@PLT # Offset: 15869
    00003e02: 	movq	0x188(%rsp), %r12
    00003e0a: 	movq	0x1b0(%rsp), %rax
    00003e12: 	jmp	.Ltmp4175 # Offset: 15890
.Ltmp4145:
    00003e17: 	testq	%r12, %r12
    00003e1a: 	jne	.Ltmp4176 # Offset: 15898
    00003e20: 	movq	0x70(%rsp), %rax
    00003e25: 	jmp	.Ltmp4177 # Offset: 15909
.Ltmp4144:
    00003e2a: 	movq	0xa8(%rsp), %rdi
    00003e32: 	leaq	0x188(%rsp), %rsi
    00003e3a: 	xorl	%edx, %edx
    00003e3c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15932
    00003e41: 	movq	%rax, 0x1b0(%rsp)
    00003e49: 	movq	%rax, %rdi
    00003e4c: 	movq	0x188(%rsp), %rax
    00003e54: 	movq	%rax, 0x1c0(%rsp)
.Ltmp4203:
    00003e5c: 	movq	%r12, %rdx
    00003e5f: 	movq	%rbp, %rsi
    00003e62: 	callq	memcpy@PLT # Offset: 15970
    00003e67: 	movq	0x188(%rsp), %r12
    00003e6f: 	movq	0x1b0(%rsp), %rax
    00003e77: 	jmp	.Ltmp4177 # Offset: 15991
.Ltmp4083:
    00003e7c: 	testq	%r12, %r12
    00003e7f: 	jne	.Ltmp4178 # Offset: 15999
    00003e85: 	movq	0x70(%rsp), %rax
    00003e8a: 	jmp	.Ltmp4179 # Offset: 16010
.Ltmp4082:
    00003e8f: 	movq	0xa8(%rsp), %rdi
    00003e97: 	leaq	0x188(%rsp), %rsi
    00003e9f: 	xorl	%edx, %edx
    00003ea1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 16033
    00003ea6: 	movq	%rax, 0x1b0(%rsp)
    00003eae: 	movq	%rax, %rdi
    00003eb1: 	movq	0x188(%rsp), %rax
    00003eb9: 	movq	%rax, 0x1c0(%rsp)
.Ltmp4204:
    00003ec1: 	movq	%r12, %rdx
    00003ec4: 	movq	%rbp, %rsi
    00003ec7: 	callq	memcpy@PLT # Offset: 16071
    00003ecc: 	movq	0x188(%rsp), %r12
    00003ed4: 	movq	0x1b0(%rsp), %rax
    00003edc: 	jmp	.Ltmp4179 # Offset: 16092
.Ltmp4169:
    00003ee1: 	testq	%r12, %r12
    00003ee4: 	jne	.Ltmp4180 # Offset: 16100
    00003eea: 	movq	0x70(%rsp), %rax
    00003eef: 	jmp	.Ltmp4175 # Offset: 16111
.Ltmp4120:
    00003ef4: 	testq	%r12, %r12
    00003ef7: 	jne	.Ltmp4181 # Offset: 16119
    00003efd: 	movq	0x70(%rsp), %rax
    00003f02: 	jmp	.Ltmp4182 # Offset: 16130
.Ltmp4119:
    00003f07: 	movq	0xa8(%rsp), %rdi
    00003f0f: 	leaq	0x188(%rsp), %rsi
    00003f17: 	xorl	%edx, %edx
    00003f19: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 16153
    00003f1e: 	movq	%rax, 0x1b0(%rsp)
    00003f26: 	movq	%rax, %rdi
    00003f29: 	movq	0x188(%rsp), %rax
    00003f31: 	movq	%rax, 0x1c0(%rsp)
.Ltmp4206:
    00003f39: 	movq	%r12, %rdx
    00003f3c: 	movq	%rbp, %rsi
    00003f3f: 	callq	memcpy@PLT # Offset: 16191
    00003f44: 	movq	0x188(%rsp), %r12
    00003f4c: 	movq	0x1b0(%rsp), %rax
    00003f54: 	jmp	.Ltmp4182 # Offset: 16212
.Ltmp4048:
    00003f59: 	movq	0xa8(%rsp), %rdi
    00003f61: 	leaq	0x188(%rsp), %rsi
    00003f69: 	xorl	%edx, %edx
    00003f6b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 16235
    00003f70: 	movq	%rax, 0x1b0(%rsp)
    00003f78: 	movq	%rax, %rdi
    00003f7b: 	movq	0x188(%rsp), %rax
    00003f83: 	movq	%rax, 0x1c0(%rsp)
.Ltmp4207:
    00003f8b: 	movq	%r12, %rdx
    00003f8e: 	movq	%rbp, %rsi
    00003f91: 	callq	memcpy@PLT # Offset: 16273
    00003f96: 	movq	0x188(%rsp), %r12
    00003f9e: 	movq	0x1b0(%rsp), %rax
    00003fa6: 	jmp	.Ltmp4183 # Offset: 16294
.Ltmp4049:
    00003fab: 	testq	%r12, %r12
    00003fae: 	jne	.Ltmp4184 # Offset: 16302
    00003fb4: 	movq	0x70(%rsp), %rax
    00003fb9: 	jmp	.Ltmp4183 # Offset: 16313
.Ltmp4078:
    00003fbe: 	movq	-0x8(%rdx), %rax
    00003fc2: 	addq	$0x200, %rax
    00003fc8: 	jmp	.Ltmp4185 # Offset: 16328
.Ltmp4039:
    00003fcd: 	movq	0xa8(%rsp), %rsi
    00003fd5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003fdc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 16348
    00003fe1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003fe8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00003fef: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003ff6: 	jne	.Ltmp4186 # Offset: 16374
.Ltmp4044:
    00003ffc: 	movq	-0x8(%rdx), %rax
    00004000: 	addq	$0x200, %rax
    00004006: 	jmp	.Ltmp4186 # Offset: 16390
.Ltmp4073:
    0000400b: 	movq	0xa8(%rsp), %rsi
    00004013: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000401a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 16410
    0000401f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00004026: 	jmp	.Ltmp4187 # Offset: 16422
.Ltmp4115:
    0000402b: 	movq	-0x8(%rdx), %rax
    0000402f: 	addq	$0x200, %rax
    00004035: 	jmp	.Ltmp4188 # Offset: 16437
.Ltmp4110:
    0000403a: 	movq	0xa8(%rsp), %rsi
    00004042: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00004049: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 16457
    0000404e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00004055: 	jmp	.Ltmp4189 # Offset: 16469
.Ltmp4140:
    0000405a: 	movq	-0x8(%rdx), %rax
    0000405e: 	addq	$0x200, %rax
    00004064: 	jmp	.Ltmp4190 # Offset: 16484
.Ltmp4135:
    00004069: 	movq	0xa8(%rsp), %rsi
    00004071: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00004078: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 16504
    0000407d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00004084: 	jmp	.Ltmp4191 # Offset: 16516
.Ltmp4164:
    00004089: 	movq	-0x8(%rdx), %rax
    0000408d: 	addq	$0x200, %rax
    00004093: 	jmp	.Ltmp4192 # Offset: 16531
.Ltmp4159:
    00004098: 	movq	0xa8(%rsp), %rsi
    000040a0: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000040a7: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 16551
    000040ac: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000040b3: 	jmp	.Ltmp4193 # Offset: 16563
.Ltmp4163:
    000040b8: 	testq	%r12, %r12
    000040bb: 	je	.Ltmp4194 # Offset: 16571
    000040c1: 	jmp	.Ltmp4195 # Offset: 16577
    000040c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4162:
    000040c8: 	leaq	0x188(%rsp), %rsi
    000040d0: 	xorl	%edx, %edx
    000040d2: 	movq	%rbx, %rdi
    000040d5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 16597
    000040da: 	movq	%rax, (%rbx)
    000040dd: 	movq	%rax, %rdi
    000040e0: 	movq	0x188(%rsp), %rax
    000040e8: 	movq	%rax, 0x10(%rbx)
.Ltmp4195:
    000040ec: 	movq	%r12, %rdx
    000040ef: 	movq	%rbp, %rsi
    000040f2: 	callq	memcpy@PLT # Offset: 16626
    000040f7: 	movq	0x188(%rsp), %r12
    000040ff: 	movq	(%rbx), %rdi
    00004102: 	jmp	.Ltmp4194 # Offset: 16642
.Ltmp4043:
    00004107: 	testq	%r12, %r12
    0000410a: 	je	.Ltmp4057 # Offset: 16650
    00004110: 	jmp	.Ltmp4196 # Offset: 16656
    00004115: 	nopl	(%rax) # Size: 3
.Ltmp4077:
    00004118: 	testq	%r12, %r12
    0000411b: 	je	.Ltmp4197 # Offset: 16667
    00004121: 	jmp	.Ltmp4198 # Offset: 16673
    00004123: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4076:
    00004128: 	leaq	0x188(%rsp), %rsi
    00004130: 	xorl	%edx, %edx
    00004132: 	movq	%rbx, %rdi
    00004135: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 16693
    0000413a: 	movq	%rax, (%rbx)
    0000413d: 	movq	%rax, %rdi
    00004140: 	movq	0x188(%rsp), %rax
    00004148: 	movq	%rax, 0x10(%rbx)
.Ltmp4198:
    0000414c: 	movq	%r12, %rdx
    0000414f: 	movq	%rbp, %rsi
    00004152: 	callq	memcpy@PLT # Offset: 16722
    00004157: 	movq	0x188(%rsp), %r12
    0000415f: 	movq	(%rbx), %rdi
    00004162: 	jmp	.Ltmp4197 # Offset: 16738
.Ltmp4114:
    00004167: 	testq	%r12, %r12
    0000416a: 	je	.Ltmp4199 # Offset: 16746
    00004170: 	jmp	.Ltmp4200 # Offset: 16752
    00004172: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4113:
    00004178: 	leaq	0x188(%rsp), %rsi
    00004180: 	xorl	%edx, %edx
    00004182: 	movq	%rbx, %rdi
    00004185: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 16773
    0000418a: 	movq	%rax, (%rbx)
    0000418d: 	movq	%rax, %rdi
    00004190: 	movq	0x188(%rsp), %rax
    00004198: 	movq	%rax, 0x10(%rbx)
.Ltmp4200:
    0000419c: 	movq	%r12, %rdx
    0000419f: 	movq	%rbp, %rsi
    000041a2: 	callq	memcpy@PLT # Offset: 16802
    000041a7: 	movq	0x188(%rsp), %r12
    000041af: 	movq	(%rbx), %rdi
    000041b2: 	jmp	.Ltmp4199 # Offset: 16818
.Ltmp4139:
    000041b7: 	testq	%r12, %r12
    000041ba: 	je	.Ltmp4201 # Offset: 16826
    000041c0: 	jmp	.Ltmp4202 # Offset: 16832
    000041c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4138:
    000041c8: 	leaq	0x188(%rsp), %rsi
    000041d0: 	xorl	%edx, %edx
    000041d2: 	movq	%rbx, %rdi
    000041d5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 16853
    000041da: 	movq	%rax, (%rbx)
    000041dd: 	movq	%rax, %rdi
    000041e0: 	movq	0x188(%rsp), %rax
    000041e8: 	movq	%rax, 0x10(%rbx)
.Ltmp4202:
    000041ec: 	movq	%r12, %rdx
    000041ef: 	movq	%rbp, %rsi
    000041f2: 	callq	memcpy@PLT # Offset: 16882
    000041f7: 	movq	0x188(%rsp), %r12
    000041ff: 	movq	(%rbx), %rdi
    00004202: 	jmp	.Ltmp4201 # Offset: 16898
.Ltmp4047:
    00004207: 	leaq	DATAat0x38158(%rip), %rdi
    0000420e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16910
.Ltmp4050:
    00004213: 	leaq	DATAat0x38182(%rip), %rdi
    0000421a: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16922
.Ltmp4041:
    0000421f: 	leaq	DATAat0x38158(%rip), %rdi
    00004226: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16934
.Ltmp4075:
    0000422b: 	leaq	DATAat0x38158(%rip), %rdi
    00004232: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16946
.Ltmp4081:
    00004237: 	leaq	DATAat0x38158(%rip), %rdi
    0000423e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16958
.Ltmp4084:
    00004243: 	leaq	DATAat0x38182(%rip), %rdi
    0000424a: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16970
.Ltmp4112:
    0000424f: 	leaq	DATAat0x38158(%rip), %rdi
    00004256: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16982
.Ltmp4118:
    0000425b: 	leaq	DATAat0x38158(%rip), %rdi
    00004262: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16994
.Ltmp4121:
    00004267: 	leaq	DATAat0x38182(%rip), %rdi
    0000426e: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17006
.Ltmp4137:
    00004273: 	leaq	DATAat0x38158(%rip), %rdi
    0000427a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17018
.Ltmp4143:
    0000427f: 	leaq	DATAat0x38158(%rip), %rdi
    00004286: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17030
.Ltmp4146:
    0000428b: 	leaq	DATAat0x38182(%rip), %rdi
    00004292: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17042
.Ltmp4161:
    00004297: 	leaq	DATAat0x38158(%rip), %rdi
    0000429e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17054
.Ltmp4167:
    000042a3: 	leaq	DATAat0x38158(%rip), %rdi
    000042aa: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17066
.Ltmp4170:
    000042af: 	leaq	DATAat0x38182(%rip), %rdi
    000042b6: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17078
.Ltmp4173:
    000042bb: 	callq	__stack_chk_fail@PLT # Offset: 17083
.Ltmp4176:
    000042c0: 	movq	0x70(%rsp), %rdi
    000042c5: 	jmp	.Ltmp4203 # Offset: 17093
.Ltmp4178:
    000042ca: 	movq	0x70(%rsp), %rdi
    000042cf: 	jmp	.Ltmp4204 # Offset: 17103
.Ltmp4180:
    000042d4: 	movq	0x70(%rsp), %rdi
    000042d9: 	jmp	.Ltmp4205 # Offset: 17113
.Ltmp4181:
    000042de: 	movq	0x70(%rsp), %rdi
    000042e3: 	jmp	.Ltmp4206 # Offset: 17123
.Ltmp4184:
    000042e8: 	movq	0x70(%rsp), %rdi
    000042ed: 	jmp	.Ltmp4207 # Offset: 17133
    000042f2: 	endbr64
.Ltmp4209:
    000042f6: 	movq	%rax, %rbp
    000042f9: 	jmp	.Ltmp4208 # Offset: 17145
    000042fb: 	endbr64
    000042ff: 	jmp	.Ltmp4209 # Offset: 17151
    00004301: 	endbr64
    00004305: 	jmp	.Ltmp4209 # Offset: 17157
    00004307: 	endbr64
    0000430b: 	jmp	.Ltmp4209 # Offset: 17163
    0000430d: 	endbr64
    00004311: 	jmp	.Ltmp4209 # Offset: 17169
    00004313: 	endbr64
    00004317: 	jmp	.Ltmp4209 # Offset: 17175
    00004319: 	endbr64
    0000431d: 	jmp	.Ltmp4209 # Offset: 17181
    0000431f: 	endbr64
    00004323: 	jmp	.Ltmp4209 # Offset: 17187
    00004325: 	endbr64
    00004329: 	jmp	.Ltmp4209 # Offset: 17193
    0000432b: 	endbr64
    0000432f: 	jmp	.Ltmp4209 # Offset: 17199
    00004331: 	endbr64
    00004335: 	movq	%rax, %rbp
    00004338: 	jmp	.Ltmp4210 # Offset: 17208
    0000433a: 	endbr64
    0000433e: 	jmp	.Ltmp4209 # Offset: 17214
.Ltmp4208:
    00004340: 	movq	0x1b0(%rsp), %rdi
    00004348: 	cmpq	0x70(%rsp), %rdi
    0000434d: 	je	.Ltmp4210 # Offset: 17229
    0000434f: 	movq	0x1c0(%rsp), %rax
    00004357: 	leaq	0x1(%rax), %rsi
    0000435b: 	callq	_ZdlPvm@PLT # Offset: 17243
.Ltmp4210:
    00004360: 	movq	0x190(%rsp), %rdi
    00004368: 	cmpq	0x150(%rsp), %rdi
    00004370: 	je	.Ltmp4211 # Offset: 17264
    00004372: 	movq	0x1a0(%rsp), %rax
    0000437a: 	leaq	0x1(%rax), %rsi
    0000437e: 	callq	_ZdlPvm@PLT # Offset: 17278
.Ltmp4211:
    00004383: 	movq	%rbp, %rdi
    00004386: 	callq	_Unwind_Resume@PLT # Offset: 17286
    0000438b: 	endbr64
    0000438f: 	jmp	.Ltmp4209 # Offset: 17295
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestOneTypeConvIhtEvv"

Binary Function "_Z15convolution2D_4IddEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 291
  State       : disassembled
  Address     : 0x36410
  Size        : 0x123c
  MaxSize     : 0x1240
  Offset      : 0x36410
  Section     : .text
  Orc Section : .local.text._Z15convolution2D_4IddEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0290:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x1f8, %rsp
    00000018: 	movq	%rsi, (%rsp)
    0000001c: 	movl	%edx, 0x1d8(%rsp)
    00000023: 	movl	%ecx, 0x104(%rsp)
    0000002a: 	movl	%r8d, 0x34(%rsp)
    0000002f: 	movq	%r9, 0x1c0(%rsp)
    00000037: 	movq	%fs:0x28, %rax
    00000040: 	movq	%rax, 0x1e8(%rsp)
    00000048: 	xorl	%eax, %eax
    0000004a: 	callq	clock@PLT # Offset: 74
    0000004f: 	movq	%rax, start_time(%rip)
    00000056: 	movl	iterations(%rip), %eax
    0000005c: 	movl	%eax, 0x180(%rsp)
    00000063: 	testl	%eax, %eax
    00000065: 	jle	.Ltmp4212 # Offset: 101
    0000006b: 	movslq	0x34(%rsp), %rax
    00000070: 	movl	0x104(%rsp), %r13d
    00000078: 	pxor	%xmm2, %xmm2
    0000007c: 	movq	(%rsp), %r10
    00000080: 	leaq	(,%rax,8), %r12
    00000088: 	movq	%rax, %rbx
    0000008b: 	leal	-0x1(%r13), %r11d
    0000008f: 	leaq	(%r15,%r12), %rax
    00000093: 	leaq	0x8(%r12), %r8
    00000098: 	movl	%r11d, 0x30(%rsp)
    0000009d: 	movq	%rax, 0xd8(%rsp)
    000000a5: 	leaq	(%r15,%r8), %rax
    000000a9: 	leal	-0x2(%r13), %r14d
    000000ad: 	movq	%rax, 0xe8(%rsp)
    000000b5: 	movslq	%r11d, %rax
    000000b8: 	movslq	%r14d, %rdi
    000000bb: 	leaq	(,%rax,8), %rdx
    000000c3: 	movl	%ebx, %eax
    000000c5: 	movq	%rdi, 0x48(%rsp)
    000000ca: 	leaq	(%r15,%rdi,8), %rdi
    000000ce: 	addl	%r14d, %eax
    000000d1: 	movq	%rdi, 0x108(%rsp)
    000000d9: 	leaq	(%r15,%rdx), %rdi
    000000dd: 	addq	%r10, %rdx
    000000e0: 	cltq
    000000e2: 	movq	%rdi, 0x110(%rsp)
    000000ea: 	leaq	(%r15,%rax,8), %rdi
    000000ee: 	movl	%ebx, %eax
    000000f0: 	movl	%r14d, 0x64(%rsp)
    000000f5: 	addl	%r11d, %eax
    000000f8: 	movq	%rdi, 0x118(%rsp)
    00000100: 	cltq
    00000102: 	movq	%rdx, 0x128(%rsp)
    0000010a: 	leaq	(%r15,%rax,8), %rdi
    0000010e: 	movq	%r12, 0x40(%rsp)
    00000113: 	movq	%rdi, 0x120(%rsp)
    0000011b: 	movl	0x1d8(%rsp), %edi
    00000122: 	leal	-0x2(%rdi), %ecx
    00000125: 	leal	-0x1(%rdi), %esi
    00000128: 	movl	%ecx, 0x1dc(%rsp)
    0000012f: 	imull	%ebx, %ecx
    00000132: 	movl	%esi, 0x50(%rsp)
    00000136: 	movslq	%ecx, %r9
    00000139: 	leal	0x1(%rcx), %eax
    0000013c: 	leaq	(,%r9,8), %rdi
    00000144: 	cltq
    00000146: 	leaq	(%r15,%rdi), %rsi
    0000014a: 	movq	%rsi, 0xe0(%rsp)
    00000152: 	leaq	(%r15,%rax,8), %rsi
    00000156: 	movq	%rsi, 0x130(%rsp)
    0000015e: 	leal	(%rbx,%rcx), %esi
    00000161: 	movslq	%esi, %rax
    00000164: 	leaq	(,%rax,8), %rbp
    0000016c: 	leal	0x1(%rsi), %eax
    0000016f: 	leaq	(%r15,%rbp), %rdx
    00000173: 	cltq
    00000175: 	movq	%rbp, 0x1b8(%rsp)
    0000017d: 	movq	%rdx, 0xf0(%rsp)
    00000185: 	leaq	(%r15,%rax,8), %rdx
    00000189: 	leal	(%rcx,%r14), %eax
    0000018d: 	movq	%rdx, 0x138(%rsp)
    00000195: 	cltq
    00000197: 	movq	%r10, %rdx
    0000019a: 	addq	%rbp, %r10
    0000019d: 	movq	%r10, 0x140(%rsp)
    000001a5: 	leaq	(%r15,%rax,8), %r10
    000001a9: 	leal	(%r11,%rcx), %eax
    000001ad: 	cltq
    000001af: 	movq	%r10, 0x148(%rsp)
    000001b7: 	leaq	(%r15,%rax,8), %r10
    000001bb: 	leal	(%rsi,%r14), %eax
    000001bf: 	cltq
    000001c1: 	movq	%r10, 0x150(%rsp)
    000001c9: 	leaq	(%r15,%rax,8), %r10
    000001cd: 	leal	(%r11,%rsi), %eax
    000001d1: 	cltq
    000001d3: 	movq	%r10, 0x158(%rsp)
    000001db: 	shlq	$0x3, %rax
    000001df: 	leaq	(%r15,%rax), %r10
    000001e3: 	addq	%rdx, %rax
    000001e6: 	movq	%rax, 0x168(%rsp)
    000001ee: 	movq	%rdx, %rax
    000001f1: 	subq	%r15, %rax
    000001f4: 	movq	%r10, 0x160(%rsp)
    000001fc: 	movq	%rdx, %r10
    000001ff: 	cmpq	$0x10, %rax
    00000203: 	seta	%dl
    00000206: 	cmpl	$0x3, %r13d
    0000020a: 	setne	%al
    0000020d: 	andl	%eax, %edx
    0000020f: 	leaq	0x8(%r10), %rax
    00000213: 	subq	0xe8(%rsp), %rax
    0000021b: 	cmpq	$0x10, %rax
    0000021f: 	movl	%edx, %r11d
    00000222: 	movb	%dl, 0x63(%rsp)
    00000226: 	leaq	0x10(%r15,%r12), %rdx
    0000022b: 	seta	%al
    0000022e: 	movq	%rdx, 0x1b0(%rsp)
    00000236: 	movl	%r14d, %edx
    00000239: 	shrl	%r14d
    0000023c: 	andl	%r11d, %eax
    0000023f: 	addq	%r10, %r8
    00000242: 	movb	%al, 0x186(%rsp)
    00000249: 	movl	%r14d, %eax
    0000024c: 	movl	%edx, %r14d
    0000024f: 	subl	$0x1, %eax
    00000252: 	andl	$-0x2, %r14d
    00000256: 	addq	$0x1, %rax
    0000025a: 	shlq	$0x4, %rax
    0000025e: 	movq	%rax, 0x58(%rsp)
    00000263: 	movslq	%r14d, %rax
    00000266: 	movl	%edx, %r14d
    00000269: 	movsd	DATAat0x38910(%rip), %xmm1
    00000271: 	orl	$0x1, %r14d
    00000275: 	movq	%rax, %r13
    00000278: 	leaq	(%r15,%rax,8), %rdx
    0000027c: 	movq	%r8, 0x178(%rsp)
    00000284: 	movslq	%r14d, %rax
    00000287: 	leal	0x2(%r13), %ebp
    0000028b: 	leaq	0x8(%r15,%rdi), %r8
    00000290: 	movl	%r14d, %r12d
    00000293: 	movq	%rdx, 0xb0(%rsp)
    0000029b: 	leaq	(,%rax,8), %rdx
    000002a3: 	movslq	%ebp, %rax
    000002a6: 	movsd	DATAat0x389b0(%rip), %xmm5
    000002ae: 	leaq	(%r15,%rdx), %r14
    000002b2: 	addq	%r10, %rdx
    000002b5: 	movq	%r8, 0x1a0(%rsp)
    000002bd: 	movsd	DATAat0x389a0(%rip), %xmm4
    000002c5: 	movq	%r14, 0x70(%rsp)
    000002ca: 	leaq	(%r15,%rax,8), %r14
    000002ce: 	leal	(%rbx,%r13), %eax
    000002d2: 	movapd	DATAat0x38910(%rip), %xmm3
    000002da: 	cltq
    000002dc: 	movq	%r14, 0x68(%rsp)
    000002e1: 	leaq	(%r15,%rax,8), %r14
    000002e5: 	leal	(%rbx,%r12), %eax
    000002e9: 	movq	%rdx, 0xd0(%rsp)
    000002f1: 	cltq
    000002f3: 	leal	(%rbx,%rbx), %edx
    000002f6: 	movq	%r14, 0xb8(%rsp)
    000002fe: 	leaq	(%r15,%rax,8), %r14
    00000302: 	leal	(%rbx,%rbp), %eax
    00000305: 	movq	0x1b8(%rsp), %rbx
    0000030d: 	movl	%edx, 0x54(%rsp)
    00000311: 	cltq
    00000313: 	movq	%r14, 0xc0(%rsp)
    0000031b: 	movl	$0x0, 0x100(%rsp)
    00000326: 	leaq	(%r15,%rax,8), %r14
    0000032a: 	movslq	%edx, %rax
    0000032d: 	leaq	(%r15,%rax,8), %rdx
    00000331: 	movl	0x104(%rsp), %eax
    00000338: 	movq	%r14, 0xc8(%rsp)
    00000340: 	movq	%rdx, 0x170(%rsp)
    00000348: 	leaq	0x8(%rbx), %rdx
    0000034c: 	leal	-0x3(%rax), %r14d
    00000350: 	leaq	(%r10,%rdx), %rax
    00000354: 	movq	%rax, 0x1a8(%rsp)
    0000035c: 	subq	%r8, %rax
    0000035f: 	cmpq	$0x10, %rax
    00000363: 	movq	%r14, 0x1c8(%rsp)
    0000036b: 	seta	%al
    0000036e: 	andl	%r11d, %eax
    00000371: 	movb	%al, 0x187(%rsp)
    00000378: 	leaq	0x10(%r15,%rdi), %rax
    0000037d: 	movq	%rax, 0x198(%rsp)
    00000385: 	leaq	(%r15,%rdx), %rax
    00000389: 	leal	(%rsi,%r12), %edx
    0000038d: 	movq	%rax, 0x190(%rsp)
    00000395: 	leaq	0x10(%r15,%rbx), %rax
    0000039a: 	movslq	%edx, %rdx
    0000039d: 	movq	%rax, 0x188(%rsp)
    000003a5: 	leal	(%rcx,%r13), %eax
    000003a9: 	shlq	$0x3, %rdx
    000003ad: 	cltq
    000003af: 	leaq	(%r15,%rax,8), %rax
    000003b3: 	movq	%rax, 0xa8(%rsp)
    000003bb: 	leal	(%rcx,%r12), %eax
    000003bf: 	cltq
    000003c1: 	leaq	(%r15,%rax,8), %rax
    000003c5: 	movq	%rax, 0xa0(%rsp)
    000003cd: 	leal	(%rcx,%rbp), %eax
    000003d0: 	cltq
    000003d2: 	leaq	(%r15,%rax,8), %rax
    000003d6: 	movq	%rax, 0x98(%rsp)
    000003de: 	leal	(%rsi,%r13), %eax
    000003e2: 	cltq
    000003e4: 	leaq	(%r15,%rax,8), %rax
    000003e8: 	movq	%rax, 0x90(%rsp)
    000003f0: 	leaq	(%r15,%rdx), %rax
    000003f4: 	addq	%r10, %rdx
    000003f7: 	movq	%rax, 0x88(%rsp)
    000003ff: 	leal	(%rsi,%rbp), %eax
    00000402: 	cltq
    00000404: 	movq	%rdx, 0x78(%rsp)
    00000409: 	leaq	(%r15,%rax,8), %rax
    0000040d: 	movq	%rax, 0x80(%rsp)
    00000415: 	leaq	(%r9,%r14), %rax
    00000419: 	leaq	0x8(%r15,%rax,8), %rax
    0000041e: 	movq	%rax, 0x1d0(%rsp)
    00000426: 	leaq	0x8(,%r14,8), %rax
    0000042e: 	movq	%rax, 0xf8(%rsp)
    00000436: 	movl	%ebp, %eax
    00000438: 	movapd	DATAat0x389b0(%rip), %xmm8
    00000441: 	movl	%r12d, %ebp
    00000444: 	movapd	DATAat0x389a0(%rip), %xmm7
    0000044c: 	movl	%eax, %r12d
    0000044f: 	nop # Size: 1
.Ltmp4224:
    00000450: 	movsd	(%r15), %xmm6
    00000455: 	movsd	0x8(%r15), %xmm0
    0000045b: 	movq	0xd8(%rsp), %rax
    00000463: 	cmpl	$0x1, 0x30(%rsp)
    00000468: 	movapd	%xmm6, %xmm10
    0000046d: 	movapd	%xmm6, %xmm9
    00000472: 	mulsd	%xmm1, %xmm10
    00000477: 	addsd	%xmm2, %xmm9
    0000047c: 	mulsd	%xmm5, %xmm6
    00000480: 	addsd	%xmm10, %xmm9
    00000485: 	addsd	%xmm0, %xmm9
    0000048a: 	mulsd	%xmm1, %xmm0
    0000048e: 	addsd	%xmm9, %xmm10
    00000493: 	addsd	%xmm10, %xmm6
    00000498: 	addsd	%xmm0, %xmm6
    0000049c: 	movsd	(%rax), %xmm0
    000004a0: 	movq	0xe8(%rsp), %rax
    000004a8: 	addsd	%xmm0, %xmm6
    000004ac: 	mulsd	%xmm1, %xmm0
    000004b0: 	addsd	%xmm6, %xmm0
    000004b4: 	addsd	(%rax), %xmm0
    000004b8: 	movq	(%rsp), %rax
    000004bc: 	addsd	%xmm2, %xmm0
    000004c0: 	mulsd	%xmm4, %xmm0
    000004c4: 	movsd	%xmm0, (%rax)
    000004c8: 	jle	.Ltmp4213 # Offset: 1224
    000004ce: 	cmpb	$0x0, 0x186(%rsp)
    000004d6: 	je	.Ltmp4214 # Offset: 1238
    000004dc: 	movapd	DATAat0x389b0(%rip), %xmm10
    000004e5: 	movq	0x58(%rsp), %rsi
    000004ea: 	movq	%rax, %r8
    000004ed: 	pxor	%xmm6, %xmm6
    000004f1: 	movapd	DATAat0x389a0(%rip), %xmm9
    000004fa: 	movq	0xd8(%rsp), %rdx
    00000502: 	xorl	%eax, %eax
    00000504: 	movq	0xe8(%rsp), %rcx
    0000050c: 	movq	0x1b0(%rsp), %rdi
    00000514: 	nopl	(%rax) # Size: 4
.Ltmp4215:
    00000518: 	movupd	0x8(%r15,%rax), %xmm11
    0000051f: 	movupd	(%r15,%rax), %xmm0
    00000525: 	movupd	0x10(%r15,%rax), %xmm13
    0000052c: 	movupd	(%rdx,%rax), %xmm14
    00000532: 	mulpd	%xmm3, %xmm11
    00000537: 	addpd	%xmm6, %xmm0
    0000053b: 	movupd	(%rdi,%rax), %xmm15
    00000541: 	addpd	%xmm11, %xmm0
    00000546: 	movupd	(%r15,%rax), %xmm11
    0000054c: 	mulpd	%xmm3, %xmm11
    00000551: 	addpd	%xmm13, %xmm0
    00000556: 	addpd	%xmm11, %xmm0
    0000055b: 	movupd	0x8(%r15,%rax), %xmm11
    00000562: 	mulpd	%xmm10, %xmm11
    00000567: 	addpd	%xmm11, %xmm0
    0000056c: 	movapd	%xmm13, %xmm11
    00000571: 	mulpd	%xmm3, %xmm11
    00000576: 	addpd	%xmm11, %xmm0
    0000057b: 	movupd	(%rcx,%rax), %xmm11
    00000581: 	mulpd	%xmm3, %xmm11
    00000586: 	addpd	%xmm14, %xmm0
    0000058b: 	addpd	%xmm11, %xmm0
    00000590: 	addpd	%xmm15, %xmm0
    00000595: 	addpd	%xmm6, %xmm0
    00000599: 	mulpd	%xmm9, %xmm0
    0000059e: 	movups	%xmm0, 0x8(%r8,%rax)
    000005a4: 	addq	$0x10, %rax
    000005a8: 	cmpq	%rsi, %rax
    000005ab: 	jne	.Ltmp4215 # Offset: 1451
    000005b1: 	cmpl	%r13d, 0x64(%rsp)
    000005b6: 	je	.Ltmp4213 # Offset: 1462
    000005bc: 	movq	0xb0(%rsp), %rax
    000005c4: 	movsd	(%rax), %xmm9
    000005c9: 	movq	0x70(%rsp), %rax
    000005ce: 	movsd	(%rax), %xmm6
    000005d2: 	movapd	%xmm9, %xmm0
    000005d7: 	movq	0x68(%rsp), %rax
    000005dc: 	addsd	%xmm2, %xmm0
    000005e0: 	mulsd	%xmm1, %xmm9
    000005e5: 	movapd	%xmm6, %xmm10
    000005ea: 	mulsd	%xmm1, %xmm10
    000005ef: 	mulsd	%xmm5, %xmm6
    000005f3: 	addsd	%xmm0, %xmm10
    000005f8: 	movsd	(%rax), %xmm0
    000005fc: 	movq	0xb8(%rsp), %rax
    00000604: 	addsd	%xmm0, %xmm10
    00000609: 	mulsd	%xmm1, %xmm0
    0000060d: 	addsd	%xmm10, %xmm9
    00000612: 	addsd	%xmm9, %xmm6
    00000617: 	addsd	%xmm0, %xmm6
    0000061b: 	addsd	(%rax), %xmm6
    0000061f: 	movq	0xc0(%rsp), %rax
    00000627: 	movsd	(%rax), %xmm0
    0000062b: 	movq	0xc8(%rsp), %rax
    00000633: 	mulsd	%xmm1, %xmm0
    00000637: 	addsd	%xmm6, %xmm0
    0000063b: 	addsd	(%rax), %xmm0
    0000063f: 	movq	0xd0(%rsp), %rax
    00000647: 	addsd	%xmm2, %xmm0
    0000064b: 	mulsd	%xmm4, %xmm0
    0000064f: 	movsd	%xmm0, (%rax)
.Ltmp4213:
    00000653: 	movq	0x108(%rsp), %rax
    0000065b: 	cmpl	$0x1, 0x50(%rsp)
    00000660: 	movsd	(%rax), %xmm9
    00000665: 	movq	0x110(%rsp), %rax
    0000066d: 	movsd	(%rax), %xmm0
    00000671: 	movapd	%xmm9, %xmm10
    00000676: 	movq	0x118(%rsp), %rax
    0000067e: 	addsd	%xmm2, %xmm10
    00000683: 	mulsd	%xmm1, %xmm9
    00000688: 	movapd	%xmm0, %xmm6
    0000068c: 	mulsd	%xmm1, %xmm6
    00000690: 	addsd	%xmm6, %xmm10
    00000695: 	addsd	%xmm0, %xmm10
    0000069a: 	mulsd	%xmm5, %xmm0
    0000069e: 	addsd	%xmm10, %xmm9
    000006a3: 	addsd	%xmm9, %xmm0
    000006a8: 	addsd	%xmm0, %xmm6
    000006ac: 	addsd	(%rax), %xmm6
    000006b0: 	movq	0x120(%rsp), %rax
    000006b8: 	movsd	(%rax), %xmm0
    000006bc: 	movq	0x128(%rsp), %rax
    000006c4: 	movapd	%xmm0, %xmm9
    000006c9: 	mulsd	%xmm1, %xmm9
    000006ce: 	addsd	%xmm9, %xmm6
    000006d3: 	addsd	%xmm6, %xmm0
    000006d7: 	addsd	%xmm2, %xmm0
    000006db: 	mulsd	%xmm4, %xmm0
    000006df: 	movsd	%xmm0, (%rax)
    000006e3: 	jle	.Ltmp4216 # Offset: 1763
    000006e9: 	movslq	0x104(%rsp), %rax
    000006f1: 	movl	0x34(%rsp), %esi
    000006f5: 	movq	%r15, %rdi
    000006f8: 	pxor	%xmm6, %xmm6
    000006fc: 	movq	0x178(%rsp), %r10
    00000704: 	movl	$0x1, 0x20(%rsp)
    0000070c: 	movq	%rax, 0x38(%rsp)
    00000711: 	movq	0x170(%rsp), %r8
    00000719: 	movq	0xd8(%rsp), %r9
    00000721: 	movq	%r10, %rbx
    00000724: 	nopl	(%rax) # Size: 4
.Ltmp4220:
    00000728: 	movsd	(%rdi), %xmm0
    0000072c: 	movl	0x54(%rsp), %eax
    00000730: 	movl	%esi, %edx
    00000732: 	movl	%esi, %ecx
    00000734: 	subl	0x34(%rsp), %edx
    00000738: 	addl	$0x1, 0x20(%rsp)
    0000073d: 	movapd	%xmm0, %xmm9
    00000742: 	cmpl	$0x1, 0x30(%rsp)
    00000747: 	leal	(%rdx,%rax), %esi
    0000074a: 	mulsd	%xmm1, %xmm0
    0000074e: 	addsd	%xmm2, %xmm9
    00000753: 	addsd	%xmm9, %xmm0
    00000758: 	movsd	(%r9), %xmm9
    0000075d: 	addsd	0x8(%rdi), %xmm0
    00000762: 	movapd	%xmm9, %xmm10
    00000767: 	mulsd	%xmm1, %xmm10
    0000076c: 	mulsd	%xmm5, %xmm9
    00000771: 	addsd	%xmm10, %xmm0
    00000776: 	addsd	%xmm0, %xmm9
    0000077b: 	movsd	0x8(%r9), %xmm0
    00000781: 	mulsd	%xmm1, %xmm0
    00000785: 	addsd	%xmm0, %xmm9
    0000078a: 	movsd	(%r8), %xmm0
    0000078f: 	addsd	%xmm0, %xmm9
    00000794: 	mulsd	%xmm1, %xmm0
    00000798: 	addsd	%xmm9, %xmm0
    0000079d: 	addsd	0x8(%r8), %xmm0
    000007a3: 	addsd	%xmm2, %xmm0
    000007a7: 	mulsd	%xmm4, %xmm0
    000007ab: 	movsd	%xmm0, -0x8(%rbx)
    000007b0: 	jle	.Ltmp4217 # Offset: 1968
    000007b6: 	leaq	0x8(%rdi), %r10
    000007ba: 	movq	%rbx, %rax
    000007bd: 	leaq	0x8(%r8), %r11
    000007c1: 	subq	%r10, %rax
    000007c4: 	cmpq	$0x10, %rax
    000007c8: 	seta	%al
    000007cb: 	testb	%al, 0x63(%rsp)
    000007cf: 	je	.Ltmp4218 # Offset: 1999
    000007d5: 	movq	%rbx, %rax
    000007d8: 	subq	%r11, %rax
    000007db: 	cmpq	$0x10, %rax
    000007df: 	jbe	.Ltmp4218 # Offset: 2015
    000007e5: 	leaq	0x8(%r9), %rax
    000007e9: 	movl	%esi, 0x24(%rsp)
    000007ed: 	leaq	0x10(%rdi), %r14
    000007f1: 	movq	%rax, 0x8(%rsp)
    000007f6: 	leaq	0x10(%r9), %rax
    000007fa: 	movq	%rax, 0x10(%rsp)
    000007ff: 	leaq	0x10(%r8), %rax
    00000803: 	movq	%rax, 0x18(%rsp)
    00000808: 	movq	0x18(%rsp), %rsi
    0000080d: 	xorl	%eax, %eax
    0000080f: 	movl	%ecx, 0x28(%rsp)
    00000813: 	movq	0x10(%rsp), %rcx
    00000818: 	movl	%edx, 0x2c(%rsp)
    0000081c: 	movq	0x8(%rsp), %rdx
    00000821: 	movl	%ebp, 0x8(%rsp)
    00000825: 	movq	0x58(%rsp), %rbp
    0000082a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4219:
    00000830: 	movupd	(%r10,%rax), %xmm0
    00000836: 	movupd	(%rdi,%rax), %xmm9
    0000083c: 	movupd	(%r14,%rax), %xmm13
    00000842: 	movupd	(%r8,%rax), %xmm14
    00000848: 	mulpd	%xmm3, %xmm0
    0000084c: 	addpd	%xmm6, %xmm9
    00000851: 	movupd	(%rsi,%rax), %xmm15
    00000857: 	addpd	%xmm9, %xmm0
    0000085c: 	movupd	(%r9,%rax), %xmm9
    00000862: 	mulpd	%xmm3, %xmm9
    00000867: 	addpd	%xmm13, %xmm0
    0000086c: 	addpd	%xmm9, %xmm0
    00000871: 	movupd	(%rdx,%rax), %xmm9
    00000877: 	mulpd	%xmm8, %xmm9
    0000087c: 	addpd	%xmm9, %xmm0
    00000881: 	movupd	(%rcx,%rax), %xmm9
    00000887: 	mulpd	%xmm3, %xmm9
    0000088c: 	addpd	%xmm9, %xmm0
    00000891: 	movupd	(%r11,%rax), %xmm9
    00000897: 	mulpd	%xmm3, %xmm9
    0000089c: 	addpd	%xmm14, %xmm0
    000008a1: 	addpd	%xmm9, %xmm0
    000008a6: 	addpd	%xmm15, %xmm0
    000008ab: 	addpd	%xmm6, %xmm0
    000008af: 	mulpd	%xmm7, %xmm0
    000008b3: 	movups	%xmm0, (%rbx,%rax)
    000008b7: 	addq	$0x10, %rax
    000008bb: 	cmpq	%rax, %rbp
    000008be: 	jne	.Ltmp4219 # Offset: 2238
    000008c4: 	movl	0x24(%rsp), %esi
    000008c8: 	movl	0x28(%rsp), %ecx
    000008cc: 	movl	0x2c(%rsp), %edx
    000008d0: 	movl	0x8(%rsp), %ebp
    000008d4: 	cmpl	%r13d, 0x64(%rsp)
    000008d9: 	je	.Ltmp4217 # Offset: 2265
    000008df: 	leal	(%rdx,%r13), %eax
    000008e3: 	cltq
    000008e5: 	movsd	(%r15,%rax,8), %xmm9
    000008eb: 	leal	(%rdx,%rbp), %eax
    000008ee: 	addl	%r12d, %edx
    000008f1: 	cltq
    000008f3: 	movslq	%edx, %rdx
    000008f6: 	movsd	(%r15,%rax,8), %xmm0
    000008fc: 	addsd	%xmm2, %xmm9
    00000901: 	leal	(%rcx,%r13), %eax
    00000905: 	cltq
    00000907: 	mulsd	%xmm1, %xmm0
    0000090b: 	addsd	%xmm9, %xmm0
    00000910: 	movsd	(%r15,%rax,8), %xmm9
    00000916: 	leal	(%rcx,%rbp), %eax
    00000919: 	addl	%r12d, %ecx
    0000091c: 	addsd	(%r15,%rdx,8), %xmm0
    00000922: 	cltq
    00000924: 	leal	(%rsi,%r13), %edx
    00000928: 	movslq	%ecx, %rcx
    0000092b: 	mulsd	%xmm1, %xmm9
    00000930: 	movslq	%edx, %rdx
    00000933: 	addsd	%xmm0, %xmm9
    00000938: 	movsd	(%r15,%rax,8), %xmm0
    0000093e: 	mulsd	%xmm5, %xmm0
    00000942: 	addsd	%xmm9, %xmm0
    00000947: 	movsd	(%r15,%rcx,8), %xmm9
    0000094d: 	movq	(%rsp), %rcx
    00000951: 	mulsd	%xmm1, %xmm9
    00000956: 	addsd	%xmm0, %xmm9
    0000095b: 	addsd	(%r15,%rdx,8), %xmm9
    00000961: 	leal	(%rsi,%rbp), %edx
    00000964: 	movslq	%edx, %rdx
    00000967: 	movsd	(%r15,%rdx,8), %xmm0
    0000096d: 	leal	(%rsi,%r12), %edx
    00000971: 	movslq	%edx, %rdx
    00000974: 	mulsd	%xmm1, %xmm0
    00000978: 	addsd	%xmm9, %xmm0
    0000097d: 	addsd	(%r15,%rdx,8), %xmm0
    00000983: 	addsd	%xmm2, %xmm0
    00000987: 	mulsd	%xmm4, %xmm0
    0000098b: 	movsd	%xmm0, (%rcx,%rax,8)
.Ltmp4217:
    00000990: 	movq	0x38(%rsp), %rax
    00000995: 	movq	0x48(%rsp), %rcx
    0000099a: 	movsd	-0x8(%rdi,%rax,8), %xmm0
    000009a0: 	movsd	(%rdi,%rcx,8), %xmm10
    000009a6: 	movapd	%xmm0, %xmm9
    000009ab: 	addsd	%xmm2, %xmm10
    000009b0: 	mulsd	%xmm1, %xmm9
    000009b5: 	addsd	%xmm10, %xmm9
    000009ba: 	movsd	(%r9,%rcx,8), %xmm10
    000009c0: 	mulsd	%xmm1, %xmm10
    000009c5: 	addsd	%xmm9, %xmm0
    000009ca: 	addsd	%xmm0, %xmm10
    000009cf: 	movsd	-0x8(%r9,%rax,8), %xmm0
    000009d6: 	movapd	%xmm0, %xmm9
    000009db: 	mulsd	%xmm5, %xmm9
    000009e0: 	mulsd	%xmm1, %xmm0
    000009e4: 	addsd	%xmm10, %xmm9
    000009e9: 	addsd	%xmm0, %xmm9
    000009ee: 	movsd	-0x8(%r8,%rax,8), %xmm0
    000009f5: 	addsd	(%r8,%rcx,8), %xmm9
    000009fb: 	movl	0x50(%rsp), %ecx
    000009ff: 	movapd	%xmm0, %xmm10
    00000a04: 	mulsd	%xmm1, %xmm10
    00000a09: 	addsd	%xmm10, %xmm9
    00000a0e: 	addsd	%xmm9, %xmm0
    00000a13: 	addsd	%xmm2, %xmm0
    00000a17: 	mulsd	%xmm4, %xmm0
    00000a1b: 	movsd	%xmm0, -0x10(%rbx,%rax,8)
    00000a21: 	movq	0x40(%rsp), %rax
    00000a26: 	addq	%rax, %rdi
    00000a29: 	addq	%rax, %r9
    00000a2c: 	addq	%rax, %r8
    00000a2f: 	addq	%rax, %rbx
    00000a32: 	cmpl	%ecx, 0x20(%rsp)
    00000a36: 	jne	.Ltmp4220 # Offset: 2614
.Ltmp4216:
    00000a3c: 	movq	0xe0(%rsp), %rax
    00000a44: 	cmpl	$0x1, 0x30(%rsp)
    00000a49: 	movsd	(%rax), %xmm0
    00000a4d: 	movq	0x130(%rsp), %rax
    00000a55: 	movapd	%xmm0, %xmm6
    00000a59: 	mulsd	%xmm1, %xmm0
    00000a5d: 	addsd	%xmm2, %xmm6
    00000a61: 	addsd	%xmm6, %xmm0
    00000a65: 	addsd	(%rax), %xmm0
    00000a69: 	movq	0xf0(%rsp), %rax
    00000a71: 	movsd	(%rax), %xmm6
    00000a75: 	movq	0x138(%rsp), %rax
    00000a7d: 	movapd	%xmm6, %xmm9
    00000a82: 	movapd	%xmm6, %xmm11
    00000a87: 	mulsd	%xmm1, %xmm9
    00000a8c: 	mulsd	%xmm5, %xmm11
    00000a91: 	addsd	%xmm9, %xmm0
    00000a96: 	addsd	%xmm0, %xmm11
    00000a9b: 	movsd	(%rax), %xmm0
    00000a9f: 	movq	0x140(%rsp), %rax
    00000aa7: 	movapd	%xmm0, %xmm10
    00000aac: 	mulsd	%xmm1, %xmm10
    00000ab1: 	addsd	%xmm11, %xmm10
    00000ab6: 	addsd	%xmm10, %xmm6
    00000abb: 	addsd	%xmm6, %xmm9
    00000ac0: 	addsd	%xmm9, %xmm0
    00000ac5: 	addsd	%xmm2, %xmm0
    00000ac9: 	mulsd	%xmm4, %xmm0
    00000acd: 	movsd	%xmm0, (%rax)
    00000ad1: 	jle	.Ltmp4221 # Offset: 2769
    00000ad7: 	cmpb	$0x0, 0x187(%rsp)
    00000adf: 	je	.Ltmp4222 # Offset: 2783
    00000ae5: 	movapd	DATAat0x38910(%rip), %xmm6
    00000aed: 	movq	0x58(%rsp), %rdx
    00000af2: 	xorl	%eax, %eax
    00000af4: 	pxor	%xmm11, %xmm11
    00000af9: 	movq	0xe0(%rsp), %rcx
    00000b01: 	movq	0xf0(%rsp), %rsi
    00000b09: 	movq	0x188(%rsp), %rdi
    00000b11: 	movq	0x190(%rsp), %r8
    00000b19: 	movq	0x198(%rsp), %r9
    00000b21: 	movq	0x1a0(%rsp), %r10
    00000b29: 	movapd	DATAat0x389b0(%rip), %xmm10
    00000b32: 	movq	0x1a8(%rsp), %r11
    00000b3a: 	movapd	DATAat0x389a0(%rip), %xmm9
    00000b43: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4223:
    00000b48: 	movupd	(%r10,%rax), %xmm0
    00000b4e: 	movupd	(%rcx,%rax), %xmm12
    00000b54: 	movupd	(%r9,%rax), %xmm13
    00000b5a: 	movupd	(%rsi,%rax), %xmm14
    00000b60: 	mulpd	%xmm6, %xmm0
    00000b64: 	addpd	%xmm11, %xmm12
    00000b69: 	movupd	(%rdi,%rax), %xmm15
    00000b6f: 	addpd	%xmm12, %xmm0
    00000b74: 	movupd	(%rsi,%rax), %xmm12
    00000b7a: 	mulpd	%xmm6, %xmm12
    00000b7f: 	addpd	%xmm13, %xmm0
    00000b84: 	addpd	%xmm12, %xmm0
    00000b89: 	movupd	(%r8,%rax), %xmm12
    00000b8f: 	mulpd	%xmm10, %xmm12
    00000b94: 	addpd	%xmm12, %xmm0
    00000b99: 	movupd	(%rdi,%rax), %xmm12
    00000b9f: 	mulpd	%xmm6, %xmm12
    00000ba4: 	addpd	%xmm12, %xmm0
    00000ba9: 	movupd	(%r8,%rax), %xmm12
    00000baf: 	mulpd	%xmm6, %xmm12
    00000bb4: 	addpd	%xmm14, %xmm0
    00000bb9: 	addpd	%xmm12, %xmm0
    00000bbe: 	addpd	%xmm15, %xmm0
    00000bc3: 	addpd	%xmm11, %xmm0
    00000bc8: 	mulpd	%xmm9, %xmm0
    00000bcd: 	movups	%xmm0, (%r11,%rax)
    00000bd2: 	addq	$0x10, %rax
    00000bd6: 	cmpq	%rax, %rdx
    00000bd9: 	jne	.Ltmp4223 # Offset: 3033
    00000bdf: 	cmpl	%r13d, 0x64(%rsp)
    00000be4: 	je	.Ltmp4221 # Offset: 3044
    00000bea: 	movq	0xa8(%rsp), %rax
    00000bf2: 	movsd	(%rax), %xmm6
    00000bf6: 	movq	0xa0(%rsp), %rax
    00000bfe: 	movsd	(%rax), %xmm0
    00000c02: 	addsd	%xmm2, %xmm6
    00000c06: 	movq	0x98(%rsp), %rax
    00000c0e: 	mulsd	%xmm1, %xmm0
    00000c12: 	addsd	%xmm6, %xmm0
    00000c16: 	addsd	(%rax), %xmm0
    00000c1a: 	movq	0x90(%rsp), %rax
    00000c22: 	movsd	(%rax), %xmm10
    00000c27: 	movq	0x88(%rsp), %rax
    00000c2f: 	movapd	%xmm10, %xmm6
    00000c34: 	mulsd	%xmm1, %xmm6
    00000c38: 	addsd	%xmm0, %xmm6
    00000c3c: 	movsd	(%rax), %xmm0
    00000c40: 	movq	0x80(%rsp), %rax
    00000c48: 	movapd	%xmm0, %xmm9
    00000c4d: 	movsd	(%rax), %xmm11
    00000c52: 	movq	0x78(%rsp), %rax
    00000c57: 	mulsd	%xmm5, %xmm9
    00000c5c: 	mulsd	%xmm1, %xmm0
    00000c60: 	addsd	%xmm6, %xmm9
    00000c65: 	movapd	%xmm11, %xmm6
    00000c6a: 	mulsd	%xmm1, %xmm6
    00000c6e: 	addsd	%xmm9, %xmm6
    00000c73: 	addsd	%xmm10, %xmm6
    00000c78: 	addsd	%xmm6, %xmm0
    00000c7c: 	addsd	%xmm11, %xmm0
    00000c81: 	addsd	%xmm2, %xmm0
    00000c85: 	mulsd	%xmm4, %xmm0
    00000c89: 	movsd	%xmm0, (%rax)
.Ltmp4221:
    00000c8d: 	movq	0x148(%rsp), %rax
    00000c95: 	addl	$0x1, 0x100(%rsp)
    00000c9d: 	movsd	(%rax), %xmm9
    00000ca2: 	movq	0x150(%rsp), %rax
    00000caa: 	movsd	(%rax), %xmm0
    00000cae: 	movq	0x158(%rsp), %rax
    00000cb6: 	addsd	%xmm2, %xmm9
    00000cbb: 	movapd	%xmm0, %xmm6
    00000cbf: 	movsd	(%rax), %xmm10
    00000cc4: 	movq	0x160(%rsp), %rax
    00000ccc: 	mulsd	%xmm1, %xmm6
    00000cd0: 	addsd	%xmm9, %xmm6
    00000cd5: 	movapd	%xmm10, %xmm9
    00000cda: 	mulsd	%xmm1, %xmm9
    00000cdf: 	addsd	%xmm6, %xmm0
    00000ce3: 	addsd	%xmm0, %xmm9
    00000ce8: 	movsd	(%rax), %xmm0
    00000cec: 	movq	0x168(%rsp), %rax
    00000cf4: 	movapd	%xmm0, %xmm6
    00000cf8: 	mulsd	%xmm5, %xmm6
    00000cfc: 	addsd	%xmm9, %xmm6
    00000d01: 	movapd	%xmm0, %xmm9
    00000d06: 	mulsd	%xmm1, %xmm9
    00000d0b: 	addsd	%xmm9, %xmm6
    00000d10: 	addsd	%xmm6, %xmm10
    00000d15: 	addsd	%xmm10, %xmm9
    00000d1a: 	addsd	%xmm9, %xmm0
    00000d1f: 	addsd	%xmm2, %xmm0
    00000d23: 	mulsd	%xmm4, %xmm0
    00000d27: 	movsd	%xmm0, (%rax)
    00000d2b: 	movl	0x100(%rsp), %eax
    00000d32: 	cmpl	0x180(%rsp), %eax
    00000d39: 	jne	.Ltmp4224 # Offset: 3385
.Ltmp4247:
    00000d3f: 	movl	0x1d8(%rsp), %ebx
    00000d46: 	movl	0x104(%rsp), %edi
    00000d4d: 	pxor	%xmm3, %xmm3
    00000d51: 	movl	0x1dc(%rsp), %edx
    00000d58: 	movl	%ebx, %eax
    00000d5a: 	imull	%edi, %eax
    00000d5d: 	addl	%edi, %edx
    00000d5f: 	addl	%edx, %edx
    00000d61: 	subl	%edx, %eax
    00000d63: 	cvtsi2sd	%eax, %xmm3
    00000d67: 	mulsd	init_value(%rip), %xmm3
    00000d6f: 	cmpl	$0x2, %ebx
    00000d72: 	jle	.Ltmp4225 # Offset: 3442
    00000d78: 	movl	%edi, %ebp
    00000d7a: 	leal	-0x2(%rdi), %edi
    00000d7d: 	movl	0x34(%rsp), %r12d
    00000d82: 	movl	%ebx, %r8d
    00000d85: 	movl	%edi, %eax
    00000d87: 	movl	%edi, %r9d
    00000d8a: 	movl	%edi, %r10d
    00000d8d: 	movq	(%rsp), %r11
    00000d91: 	shrl	%eax
    00000d93: 	subl	$0x1, %r8d
    00000d97: 	andl	$-0x2, %r9d
    00000d9b: 	orl	$0x1, %r10d
    00000d9f: 	leal	-0x1(%rax), %esi
    00000da2: 	movl	%r12d, %edx
    00000da5: 	movapd	%xmm2, %xmm0
    00000da9: 	movl	$0x1, %ecx
    00000dae: 	addq	$0x1, %rsi
    00000db2: 	shlq	$0x4, %rsi
    00000db6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4229:
    00000dc0: 	cmpl	$0x2, %ebp
    00000dc3: 	jle	.Ltmp4226 # Offset: 3523
    00000dc5: 	cmpl	$0x3, %ebp
    00000dc8: 	je	.Ltmp4227 # Offset: 3528
    00000dce: 	movslq	%edx, %rax
    00000dd1: 	leaq	0x8(%r11,%rax,8), %rax
    00000dd6: 	leaq	(%rsi,%rax), %rbx
    00000dda: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4228:
    00000de0: 	movsd	(%rax), %xmm1
    00000de4: 	addq	$0x10, %rax
    00000de8: 	addsd	%xmm1, %xmm0
    00000dec: 	movsd	-0x8(%rax), %xmm1
    00000df1: 	addsd	%xmm1, %xmm0
    00000df5: 	cmpq	%rbx, %rax
    00000df8: 	jne	.Ltmp4228 # Offset: 3576
    00000dfa: 	movl	%r10d, %eax
    00000dfd: 	cmpl	%r9d, %edi
    00000e00: 	je	.Ltmp4226 # Offset: 3584
.Ltmp4242:
    00000e02: 	addl	%edx, %eax
    00000e04: 	cltq
    00000e06: 	addsd	(%r11,%rax,8), %xmm0
.Ltmp4226:
    00000e0c: 	addl	$0x1, %ecx
    00000e0f: 	addl	%r12d, %edx
    00000e12: 	cmpl	%r8d, %ecx
    00000e15: 	jne	.Ltmp4229 # Offset: 3605
    00000e17: 	movq	DATAat0x38920(%rip), %xmm1
    00000e1f: 	movapd	%xmm0, %xmm2
    00000e23: 	subsd	%xmm3, %xmm2
    00000e27: 	movapd	%xmm0, %xmm3
    00000e2b: 	andpd	%xmm1, %xmm3
    00000e2f: 	comisd	DATAat0x38a60(%rip), %xmm3
    00000e37: 	jbe	.Ltmp4230 # Offset: 3639
    00000e39: 	divsd	%xmm0, %xmm2
.Ltmp4230:
    00000e3d: 	movsd	DATAat0x38a68(%rip), %xmm0
    00000e45: 	andpd	%xmm1, %xmm2
    00000e49: 	comisd	%xmm2, %xmm0
    00000e4d: 	jbe	.Ltmp4231 # Offset: 3661
.Ltmp4244:
    00000e53: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000e5a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000e61: 	subq	$0x20, %rax
    00000e65: 	cmpq	%rax, %rbx
    00000e68: 	je	.Ltmp4232 # Offset: 3688
    00000e6e: 	movq	0x1c0(%rsp), %rax
    00000e76: 	leaq	0x10(%rbx), %rdi
    00000e7a: 	movq	%rdi, (%rbx)
    00000e7d: 	movq	(%rax), %rbp
    00000e80: 	movq	0x8(%rax), %r12
    00000e84: 	movq	%rbp, %rax
    00000e87: 	addq	%r12, %rax
    00000e8a: 	je	.Ltmp4233 # Offset: 3722
    00000e8c: 	testq	%rbp, %rbp
    00000e8f: 	je	.Ltmp4234 # Offset: 3727
.Ltmp4233:
    00000e95: 	movq	%r12, 0x1e0(%rsp)
    00000e9d: 	cmpq	$0xf, %r12
    00000ea1: 	ja	.Ltmp4235 # Offset: 3745
    00000ea7: 	cmpq	$0x1, %r12
    00000eab: 	jne	.Ltmp4236 # Offset: 3755
    00000eb1: 	movzbl	(%rbp), %eax
    00000eb5: 	movb	%al, 0x10(%rbx)
.Ltmp4243:
    00000eb8: 	movq	%r12, 0x8(%rbx)
    00000ebc: 	movb	$0x0, (%rdi,%r12)
    00000ec1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000ec8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000ecf: 	addq	$0x20, %rax
    00000ed3: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000eda: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000ee1: 	je	.Ltmp4237 # Offset: 3809
.Ltmp4245:
    00000ee7: 	movq	-0x20(%rax), %rbp
    00000eeb: 	callq	clock@PLT # Offset: 3819
    00000ef0: 	movq	%rax, end_time(%rip)
    00000ef7: 	movq	0x1e8(%rsp), %rdx
    00000eff: 	subq	%fs:0x28, %rdx
    00000f08: 	jne	.Ltmp4238 # Offset: 3848
    00000f0e: 	subq	start_time(%rip), %rax
    00000f15: 	pxor	%xmm0, %xmm0
    00000f19: 	movq	%rbp, %rdi
    00000f1c: 	cvtsi2sd	%rax, %xmm0
    00000f21: 	divsd	DATAat0x38a48(%rip), %xmm0
    00000f29: 	addq	$0x1f8, %rsp
    00000f30: 	popq	%rbx
    00000f31: 	popq	%rbp
    00000f32: 	popq	%r12
    00000f34: 	popq	%r13
    00000f36: 	popq	%r14
    00000f38: 	popq	%r15
    00000f3a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 3898
    00000f3f: 	nop # Size: 1
.Ltmp4218:
    00000f40: 	movq	0xf8(%rsp), %rax
    00000f48: 	movq	%r9, %rdx
    00000f4b: 	movq	(%rsp), %r11
    00000f4f: 	movq	%r8, %rcx
    00000f52: 	subq	%r15, %rdx
    00000f55: 	leaq	(%rax,%rdi), %r10
    00000f59: 	movq	%rdi, %rax
    00000f5c: 	nopl	(%rax) # Size: 4
.Ltmp4239:
    00000f60: 	movsd	0x8(%rax), %xmm0
    00000f65: 	movsd	(%rax), %xmm9
    00000f6a: 	addq	$0x8, %rax
    00000f6e: 	addq	$0x8, %rcx
    00000f72: 	mulsd	%xmm1, %xmm0
    00000f76: 	addsd	%xmm2, %xmm9
    00000f7b: 	addsd	%xmm9, %xmm0
    00000f80: 	movsd	(%r15,%rdx), %xmm9
    00000f86: 	addsd	0x8(%rax), %xmm0
    00000f8b: 	mulsd	%xmm1, %xmm9
    00000f90: 	addsd	%xmm0, %xmm9
    00000f95: 	movsd	0x8(%r15,%rdx), %xmm0
    00000f9c: 	mulsd	%xmm5, %xmm0
    00000fa0: 	addsd	%xmm9, %xmm0
    00000fa5: 	movsd	0x10(%r15,%rdx), %xmm9
    00000fac: 	mulsd	%xmm1, %xmm9
    00000fb1: 	addsd	%xmm0, %xmm9
    00000fb6: 	movsd	(%rcx), %xmm0
    00000fba: 	addsd	-0x8(%rcx), %xmm9
    00000fc0: 	mulsd	%xmm1, %xmm0
    00000fc4: 	addsd	%xmm9, %xmm0
    00000fc9: 	addsd	0x8(%rcx), %xmm0
    00000fce: 	addsd	%xmm2, %xmm0
    00000fd2: 	mulsd	%xmm4, %xmm0
    00000fd6: 	movsd	%xmm0, 0x8(%r11,%rdx)
    00000fdd: 	addq	$0x8, %rdx
    00000fe1: 	cmpq	%rax, %r10
    00000fe4: 	jne	.Ltmp4239 # Offset: 4068
    00000fea: 	jmp	.Ltmp4217 # Offset: 4074
.Ltmp4214:
    00000fef: 	movq	%rax, %rsi
    00000ff2: 	movq	0x1c8(%rsp), %rax
    00000ffa: 	movq	0xd8(%rsp), %rdx
    00001002: 	leaq	0x2(%rax), %rcx
    00001006: 	movl	$0x1, %eax
    0000100b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4240:
    00001010: 	movsd	(%r15,%rax,8), %xmm6
    00001016: 	movsd	-0x8(%r15,%rax,8), %xmm9
    0000101d: 	addq	$0x8, %rdx
    00001021: 	movapd	%xmm6, %xmm10
    00001026: 	movapd	%xmm9, %xmm0
    0000102b: 	mulsd	%xmm1, %xmm10
    00001030: 	addsd	%xmm2, %xmm0
    00001034: 	mulsd	%xmm1, %xmm9
    00001039: 	mulsd	%xmm5, %xmm6
    0000103d: 	addsd	%xmm0, %xmm10
    00001042: 	movsd	0x8(%r15,%rax,8), %xmm0
    00001049: 	addsd	%xmm0, %xmm10
    0000104e: 	mulsd	%xmm1, %xmm0
    00001052: 	addsd	%xmm10, %xmm9
    00001057: 	addsd	%xmm9, %xmm6
    0000105c: 	addsd	%xmm0, %xmm6
    00001060: 	movsd	(%rdx), %xmm0
    00001064: 	addsd	-0x8(%rdx), %xmm6
    00001069: 	mulsd	%xmm1, %xmm0
    0000106d: 	addsd	%xmm6, %xmm0
    00001071: 	addsd	0x8(%rdx), %xmm0
    00001076: 	addsd	%xmm2, %xmm0
    0000107a: 	mulsd	%xmm4, %xmm0
    0000107e: 	movsd	%xmm0, (%rsi,%rax,8)
    00001083: 	addq	$0x1, %rax
    00001087: 	cmpq	%rax, %rcx
    0000108a: 	jne	.Ltmp4240 # Offset: 4234
    0000108c: 	jmp	.Ltmp4213 # Offset: 4236
.Ltmp4222:
    00001091: 	movq	0x1b8(%rsp), %rdx
    00001099: 	movq	0xe0(%rsp), %rax
    000010a1: 	movq	0x1d0(%rsp), %rcx
    000010a9: 	movq	(%rsp), %rsi
    000010ad: 	nopl	(%rax) # Size: 3
.Ltmp4241:
    000010b0: 	movsd	0x8(%rax), %xmm0
    000010b5: 	movsd	(%rax), %xmm6
    000010b9: 	addq	$0x8, %rax
    000010bd: 	movsd	(%r15,%rdx), %xmm10
    000010c3: 	movsd	0x10(%r15,%rdx), %xmm11
    000010ca: 	mulsd	%xmm1, %xmm0
    000010ce: 	addsd	%xmm2, %xmm6
    000010d2: 	addsd	%xmm6, %xmm0
    000010d6: 	movapd	%xmm10, %xmm6
    000010db: 	addsd	0x8(%rax), %xmm0
    000010e0: 	mulsd	%xmm1, %xmm6
    000010e4: 	addsd	%xmm0, %xmm6
    000010e8: 	movsd	0x8(%r15,%rdx), %xmm0
    000010ef: 	movapd	%xmm0, %xmm9
    000010f4: 	mulsd	%xmm5, %xmm9
    000010f9: 	mulsd	%xmm1, %xmm0
    000010fd: 	addsd	%xmm6, %xmm9
    00001102: 	movapd	%xmm11, %xmm6
    00001107: 	mulsd	%xmm1, %xmm6
    0000110b: 	addsd	%xmm9, %xmm6
    00001110: 	addsd	%xmm10, %xmm6
    00001115: 	addsd	%xmm6, %xmm0
    00001119: 	addsd	%xmm11, %xmm0
    0000111e: 	addsd	%xmm2, %xmm0
    00001122: 	mulsd	%xmm4, %xmm0
    00001126: 	movsd	%xmm0, 0x8(%rsi,%rdx)
    0000112c: 	addq	$0x8, %rdx
    00001130: 	cmpq	%rax, %rcx
    00001133: 	jne	.Ltmp4241 # Offset: 4403
    00001139: 	jmp	.Ltmp4221 # Offset: 4409
.Ltmp4227:
    0000113e: 	movl	$0x1, %eax
    00001143: 	jmp	.Ltmp4242 # Offset: 4419
.Ltmp4235:
    00001148: 	movq	%rbx, %rdi
    0000114b: 	leaq	0x1e0(%rsp), %rsi
    00001153: 	xorl	%edx, %edx
    00001155: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4437
    0000115a: 	movq	%rax, (%rbx)
    0000115d: 	movq	%rax, %rdi
    00001160: 	movq	0x1e0(%rsp), %rax
    00001168: 	movq	%rax, 0x10(%rbx)
.Ltmp4246:
    0000116c: 	movq	%r12, %rdx
    0000116f: 	movq	%rbp, %rsi
    00001172: 	callq	memcpy@PLT # Offset: 4466
    00001177: 	movq	0x1e0(%rsp), %r12
    0000117f: 	movq	(%rbx), %rdi
    00001182: 	jmp	.Ltmp4243 # Offset: 4482
.Ltmp4231:
    00001187: 	movq	0x1c0(%rsp), %rax
    0000118f: 	leaq	DATAat0x381c8(%rip), %rsi
    00001196: 	movl	$0x1, %edi
    0000119b: 	movq	(%rax), %rdx
    0000119e: 	xorl	%eax, %eax
    000011a0: 	callq	__printf_chk@PLT # Offset: 4512
    000011a5: 	jmp	.Ltmp4244 # Offset: 4517
.Ltmp4232:
    000011aa: 	movq	0x1c0(%rsp), %rsi
    000011b2: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000011b9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4537
    000011be: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000011c5: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000011cc: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000011d3: 	jne	.Ltmp4245 # Offset: 4563
.Ltmp4237:
    000011d9: 	movq	-0x8(%rdx), %rax
    000011dd: 	addq	$0x200, %rax
    000011e3: 	jmp	.Ltmp4245 # Offset: 4579
.Ltmp4236:
    000011e8: 	testq	%r12, %r12
    000011eb: 	je	.Ltmp4243 # Offset: 4587
    000011f1: 	jmp	.Ltmp4246 # Offset: 4593
    000011f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4225:
    00001200: 	subsd	%xmm3, %xmm2
    00001204: 	movq	DATAat0x38920(%rip), %xmm1
    0000120c: 	jmp	.Ltmp4230 # Offset: 4620
.Ltmp4212:
    00001211: 	movl	0x1d8(%rsp), %eax
    00001218: 	pxor	%xmm2, %xmm2
    0000121c: 	subl	$0x2, %eax
    0000121f: 	movl	%eax, 0x1dc(%rsp)
    00001226: 	jmp	.Ltmp4247 # Offset: 4646
.Ltmp4234:
    0000122b: 	leaq	DATAat0x38158(%rip), %rdi
    00001232: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 4658
.Ltmp4238:
    00001237: 	callq	__stack_chk_fail@PLT # Offset: 4663
DWARF CFI Instructions:
    <empty>
End of Function "_Z15convolution2D_4IddEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15TestOneTypeConvIddEvv" after disassembly {
  Number      : 292
  State       : disassembled
  Address     : 0x37650
  Size        : 0x80d
  MaxSize     : 0x80d
  Offset      : 0x37650
  Section     : .text
  Orc Section : .local.text._Z15TestOneTypeConvIddEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0291:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x271000(%rsp), %r11
.Ltmp4248:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp4248 # Offset: 37
    00000027: 	subq	$0x78, %rsp
    0000002b: 	movsd	init_value(%rip), %xmm0
    00000033: 	unpcklpd	%xmm0, %xmm0
    00000037: 	movq	%fs:0x28, %rax
    00000040: 	movq	%rax, 0x271068(%rsp)
    00000048: 	xorl	%eax, %eax
    0000004a: 	leaq	0x30(%rsp), %rax
    0000004f: 	movl	$0x62756f64, 0x30(%rsp)
    00000057: 	leaq	0x60(%rsp), %r14
    0000005c: 	movb	$0x0, 0x36(%rsp)
    00000061: 	leaq	0x138860(%rsp), %r12
    00000069: 	movq	$0x6, 0x28(%rsp)
    00000072: 	movq	%rax, (%rsp)
    00000076: 	movq	%rax, 0x20(%rsp)
    0000007b: 	movl	$0x656c, %eax
    00000080: 	movw	%ax, 0x34(%rsp)
    00000085: 	movq	%r14, %rax
    00000088: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4249:
    00000090: 	movaps	%xmm0, (%rax)
    00000093: 	addq	$0x10, %rax
    00000097: 	cmpq	%r12, %rax
    0000009a: 	jne	.Ltmp4249 # Offset: 154
    0000009c: 	leaq	0x40(%rsp), %rbp
    000000a1: 	movslq	iterations(%rip), %rax
    000000a8: 	leaq	0x50(%rsp), %rbx
    000000ad: 	movq	$0x6, 0x48(%rsp)
    000000b6: 	leaq	DATAat0x387ae(%rip), %rsi
    000000bd: 	movq	%rbp, %rdi
    000000c0: 	movq	%rbx, 0x40(%rsp)
    000000c5: 	movq	%rax, %r15
    000000c8: 	imulq	$0x5d9f7391, %rax, %rax
    000000cf: 	movb	$0x0, 0x56(%rsp)
    000000d4: 	movl	%r15d, %edx
    000000d7: 	sarl	$0x1f, %edx
    000000da: 	sarq	$0x27, %rax
    000000de: 	subl	%edx, %eax
    000000e0: 	movl	$0x12, %edx
    000000e5: 	movl	%eax, iterations(%rip)
    000000eb: 	movl	0x30(%rsp), %eax
    000000ef: 	movl	%eax, 0x50(%rsp)
    000000f3: 	movzwl	0x34(%rsp), %eax
    000000f8: 	movw	%ax, 0x54(%rsp)
    000000fd: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 253
    00000102: 	movq	%rbp, %r9
    00000105: 	movl	$0x190, %r8d
    0000010b: 	movq	%r12, %rsi
    0000010e: 	movq	%r14, %rdi
    00000111: 	movl	$0x190, %ecx
    00000116: 	movl	$0x190, %edx
    0000011b: 	callq	_Z15convolution2D_1IddEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 283
    00000120: 	movq	0x40(%rsp), %rdi
    00000125: 	cmpq	%rbx, %rdi
    00000128: 	je	.Ltmp4250 # Offset: 296
    0000012a: 	movq	0x50(%rsp), %rax
    0000012f: 	leaq	0x1(%rax), %rsi
    00000133: 	callq	_ZdlPvm@PLT # Offset: 307
.Ltmp4250:
    00000138: 	movq	0x20(%rsp), %rax
    0000013d: 	movq	0x28(%rsp), %r13
    00000142: 	movq	%rbx, 0x40(%rsp)
    00000147: 	movq	%rax, %rcx
    0000014a: 	movq	%rax, 0x8(%rsp)
    0000014f: 	addq	%r13, %rcx
    00000152: 	je	.Ltmp4251 # Offset: 338
    00000154: 	testq	%rax, %rax
    00000157: 	je	.Ltmp4252 # Offset: 343
.Ltmp4251:
    0000015d: 	movq	%r13, 0x18(%rsp)
    00000162: 	cmpq	$0xf, %r13
    00000166: 	ja	.Ltmp4253 # Offset: 358
    0000016c: 	cmpq	$0x1, %r13
    00000170: 	jne	.Ltmp4254 # Offset: 368
    00000176: 	movq	0x8(%rsp), %rax
    0000017b: 	movzbl	(%rax), %eax
    0000017e: 	movb	%al, 0x50(%rsp)
    00000182: 	movq	%rbx, %rax
.Ltmp4284:
    00000185: 	movq	%r13, 0x48(%rsp)
    0000018a: 	movb	$0x0, (%rax,%r13)
    0000018f: 	movabsq	$0x3fffffffffffffff, %rax
    00000199: 	subq	0x48(%rsp), %rax
    0000019e: 	cmpq	$0x11, %rax
    000001a2: 	jbe	.Ltmp4255 # Offset: 418
    000001a8: 	movl	$0x12, %edx
    000001ad: 	leaq	DATAat0x387c1(%rip), %rsi
    000001b4: 	movq	%rbp, %rdi
    000001b7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 439
    000001bc: 	movq	%rbp, %r9
    000001bf: 	movl	$0x190, %r8d
    000001c5: 	movq	%r12, %rsi
    000001c8: 	movq	%r14, %rdi
    000001cb: 	movl	$0x190, %ecx
    000001d0: 	movl	$0x190, %edx
    000001d5: 	callq	_Z15convolution2D_2IddEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 469
    000001da: 	movq	0x40(%rsp), %rdi
    000001df: 	cmpq	%rbx, %rdi
    000001e2: 	je	.Ltmp4256 # Offset: 482
    000001e4: 	movq	0x50(%rsp), %rax
    000001e9: 	leaq	0x1(%rax), %rsi
    000001ed: 	callq	_ZdlPvm@PLT # Offset: 493
.Ltmp4256:
    000001f2: 	movq	0x20(%rsp), %rax
    000001f7: 	movq	0x28(%rsp), %r13
    000001fc: 	movq	%rbx, 0x40(%rsp)
    00000201: 	movq	%rax, %rcx
    00000204: 	movq	%rax, 0x8(%rsp)
    00000209: 	addq	%r13, %rcx
    0000020c: 	je	.Ltmp4257 # Offset: 524
    0000020e: 	testq	%rax, %rax
    00000211: 	je	.Ltmp4258 # Offset: 529
.Ltmp4257:
    00000217: 	movq	%r13, 0x18(%rsp)
    0000021c: 	cmpq	$0xf, %r13
    00000220: 	ja	.Ltmp4259 # Offset: 544
    00000226: 	cmpq	$0x1, %r13
    0000022a: 	jne	.Ltmp4260 # Offset: 554
    00000230: 	movq	0x8(%rsp), %rax
    00000235: 	movzbl	(%rax), %eax
    00000238: 	movb	%al, 0x50(%rsp)
    0000023c: 	movq	%rbx, %rax
.Ltmp4288:
    0000023f: 	movq	%r13, 0x48(%rsp)
    00000244: 	movb	$0x0, (%rax,%r13)
    00000249: 	movabsq	$0x3fffffffffffffff, %rax
    00000253: 	subq	0x48(%rsp), %rax
    00000258: 	cmpq	$0x11, %rax
    0000025c: 	jbe	.Ltmp4261 # Offset: 604
    00000262: 	movl	$0x12, %edx
    00000267: 	leaq	DATAat0x387d4(%rip), %rsi
    0000026e: 	movq	%rbp, %rdi
    00000271: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 625
    00000276: 	movq	%rbp, %r9
    00000279: 	movl	$0x190, %r8d
    0000027f: 	movq	%r12, %rsi
    00000282: 	movq	%r14, %rdi
    00000285: 	movl	$0x190, %ecx
    0000028a: 	movl	$0x190, %edx
    0000028f: 	callq	_Z15convolution2D_3IddEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 655
    00000294: 	movq	0x40(%rsp), %rdi
    00000299: 	cmpq	%rbx, %rdi
    0000029c: 	je	.Ltmp4262 # Offset: 668
    0000029e: 	movq	0x50(%rsp), %rax
    000002a3: 	leaq	0x1(%rax), %rsi
    000002a7: 	callq	_ZdlPvm@PLT # Offset: 679
.Ltmp4262:
    000002ac: 	movq	0x20(%rsp), %rax
    000002b1: 	movq	0x28(%rsp), %r13
    000002b6: 	movq	%rbx, 0x40(%rsp)
    000002bb: 	movq	%rax, %rcx
    000002be: 	movq	%rax, 0x8(%rsp)
    000002c3: 	addq	%r13, %rcx
    000002c6: 	je	.Ltmp4263 # Offset: 710
    000002c8: 	testq	%rax, %rax
    000002cb: 	je	.Ltmp4264 # Offset: 715
.Ltmp4263:
    000002d1: 	movq	%r13, 0x18(%rsp)
    000002d6: 	cmpq	$0xf, %r13
    000002da: 	ja	.Ltmp4265 # Offset: 730
    000002e0: 	cmpq	$0x1, %r13
    000002e4: 	jne	.Ltmp4266 # Offset: 740
    000002ea: 	movq	0x8(%rsp), %rax
    000002ef: 	movzbl	(%rax), %eax
    000002f2: 	movb	%al, 0x50(%rsp)
    000002f6: 	movq	%rbx, %rax
.Ltmp4286:
    000002f9: 	movq	%r13, 0x48(%rsp)
    000002fe: 	movb	$0x0, (%rax,%r13)
    00000303: 	movabsq	$0x3fffffffffffffff, %rax
    0000030d: 	subq	0x48(%rsp), %rax
    00000312: 	cmpq	$0x11, %rax
    00000316: 	jbe	.Ltmp4267 # Offset: 790
    0000031c: 	movl	$0x12, %edx
    00000321: 	leaq	DATAat0x387e7(%rip), %rsi
    00000328: 	movq	%rbp, %rdi
    0000032b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 811
    00000330: 	movq	%rbp, %r9
    00000333: 	movl	$0x190, %r8d
    00000339: 	movq	%r12, %rsi
    0000033c: 	movq	%r14, %rdi
    0000033f: 	movl	$0x190, %ecx
    00000344: 	movl	$0x190, %edx
    00000349: 	callq	_Z15convolution2D_4IddEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 841
    0000034e: 	movq	0x40(%rsp), %rdi
    00000353: 	cmpq	%rbx, %rdi
    00000356: 	je	.Ltmp4268 # Offset: 854
    00000358: 	movq	0x50(%rsp), %rax
    0000035d: 	leaq	0x1(%rax), %rsi
    00000361: 	callq	_ZdlPvm@PLT # Offset: 865
.Ltmp4268:
    00000366: 	movq	0x20(%rsp), %rax
    0000036b: 	movq	0x28(%rsp), %r13
    00000370: 	movq	%rbx, 0x40(%rsp)
    00000375: 	movq	%rax, %rcx
    00000378: 	movq	%rax, 0x8(%rsp)
    0000037d: 	addq	%r13, %rcx
    00000380: 	je	.Ltmp4269 # Offset: 896
    00000382: 	testq	%rax, %rax
    00000385: 	je	.Ltmp4270 # Offset: 901
.Ltmp4269:
    0000038b: 	movq	%r13, 0x18(%rsp)
    00000390: 	cmpq	$0xf, %r13
    00000394: 	ja	.Ltmp4271 # Offset: 916
    0000039a: 	cmpq	$0x1, %r13
    0000039e: 	jne	.Ltmp4272 # Offset: 926
    000003a4: 	movq	0x8(%rsp), %rax
    000003a9: 	movzbl	(%rax), %eax
    000003ac: 	movb	%al, 0x50(%rsp)
    000003b0: 	movq	%rbx, %rax
.Ltmp4292:
    000003b3: 	movq	%r13, 0x48(%rsp)
    000003b8: 	movb	$0x0, (%rax,%r13)
    000003bd: 	movabsq	$0x3fffffffffffffff, %rax
    000003c7: 	subq	0x48(%rsp), %rax
    000003cc: 	cmpq	$0x11, %rax
    000003d0: 	jbe	.Ltmp4273 # Offset: 976
    000003d6: 	movl	$0x12, %edx
    000003db: 	leaq	DATAat0x387fa(%rip), %rsi
    000003e2: 	movq	%rbp, %rdi
    000003e5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 997
    000003ea: 	movq	%rbp, %r9
    000003ed: 	movl	$0x190, %r8d
    000003f3: 	movq	%r12, %rsi
    000003f6: 	movq	%r14, %rdi
    000003f9: 	movl	$0x190, %ecx
    000003fe: 	movl	$0x190, %edx
    00000403: 	callq	_Z15convolution2D_5IddEvPKT_PS0_iiiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1027
    00000408: 	movq	0x40(%rsp), %rdi
    0000040d: 	cmpq	%rbx, %rdi
    00000410: 	je	.Ltmp4274 # Offset: 1040
    00000412: 	movq	0x50(%rsp), %rax
    00000417: 	leaq	0x1(%rax), %rsi
    0000041b: 	callq	_ZdlPvm@PLT # Offset: 1051
.Ltmp4274:
    00000420: 	movq	0x20(%rsp), %r13
    00000425: 	movq	0x28(%rsp), %r12
    0000042a: 	movq	%rbx, 0x40(%rsp)
    0000042f: 	movq	%r13, %rax
    00000432: 	addq	%r12, %rax
    00000435: 	je	.Ltmp4275 # Offset: 1077
    00000437: 	testq	%r13, %r13
    0000043a: 	je	.Ltmp4276 # Offset: 1082
.Ltmp4275:
    00000440: 	movq	%r12, 0x18(%rsp)
    00000445: 	cmpq	$0xf, %r12
    00000449: 	ja	.Ltmp4277 # Offset: 1097
    0000044f: 	cmpq	$0x1, %r12
    00000453: 	jne	.Ltmp4278 # Offset: 1107
    00000459: 	movzbl	(%r13), %eax
    0000045e: 	movb	%al, 0x50(%rsp)
    00000462: 	movq	%rbx, %rax
.Ltmp4290:
    00000465: 	movq	%r12, 0x48(%rsp)
    0000046a: 	movb	$0x0, (%rax,%r12)
    0000046f: 	movabsq	$0x3fffffffffffffff, %rax
    00000479: 	subq	0x48(%rsp), %rax
    0000047e: 	cmpq	$0x1f, %rax
    00000482: 	jbe	.Ltmp4279 # Offset: 1154
    00000488: 	movl	$0x20, %edx
    0000048d: 	leaq	DATAat0x38810(%rip), %rsi
    00000494: 	movq	%rbp, %rdi
    00000497: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1175
    0000049c: 	movl	iterations(%rip), %edx
    000004a2: 	movq	0x40(%rsp), %rdi
    000004a7: 	xorl	%r8d, %r8d
    000004aa: 	xorl	%ecx, %ecx
    000004ac: 	movl	$0x1f40, %esi
    000004b1: 	callq	_Z9summarizePKciiii # Offset: 1201
    000004b6: 	movq	0x40(%rsp), %rdi
    000004bb: 	movl	%r15d, iterations(%rip)
    000004c2: 	cmpq	%rbx, %rdi
    000004c5: 	je	.Ltmp4280 # Offset: 1221
    000004c7: 	movq	0x50(%rsp), %rax
    000004cc: 	leaq	0x1(%rax), %rsi
    000004d0: 	callq	_ZdlPvm@PLT # Offset: 1232
.Ltmp4280:
    000004d5: 	movq	0x20(%rsp), %rdi
    000004da: 	cmpq	(%rsp), %rdi
    000004de: 	je	.Ltmp4281 # Offset: 1246
    000004e0: 	movq	0x30(%rsp), %rax
    000004e5: 	leaq	0x1(%rax), %rsi
    000004e9: 	callq	_ZdlPvm@PLT # Offset: 1257
.Ltmp4281:
    000004ee: 	movq	0x271068(%rsp), %rax
    000004f6: 	subq	%fs:0x28, %rax
    000004ff: 	jne	.Ltmp4282 # Offset: 1279
    00000505: 	addq	$0x271078, %rsp
    0000050c: 	popq	%rbx
    0000050d: 	popq	%rbp
    0000050e: 	popq	%r12
    00000510: 	popq	%r13
    00000512: 	popq	%r14
    00000514: 	popq	%r15
    00000516: 	retq # Offset: 1302
    00000517: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4254:
    00000520: 	testq	%r13, %r13
    00000523: 	jne	.Ltmp4283 # Offset: 1315
    00000529: 	movq	%rbx, %rax
    0000052c: 	jmp	.Ltmp4284 # Offset: 1324
    00000531: 	nopl	(%rax) # Size: 7
.Ltmp4266:
    00000538: 	testq	%r13, %r13
    0000053b: 	jne	.Ltmp4285 # Offset: 1339
    00000541: 	movq	%rbx, %rax
    00000544: 	jmp	.Ltmp4286 # Offset: 1348
    00000549: 	nopl	(%rax) # Size: 7
.Ltmp4260:
    00000550: 	testq	%r13, %r13
    00000553: 	jne	.Ltmp4287 # Offset: 1363
    00000559: 	movq	%rbx, %rax
    0000055c: 	jmp	.Ltmp4288 # Offset: 1372
    00000561: 	nopl	(%rax) # Size: 7
.Ltmp4278:
    00000568: 	testq	%r12, %r12
    0000056b: 	jne	.Ltmp4289 # Offset: 1387
    00000571: 	movq	%rbx, %rax
    00000574: 	jmp	.Ltmp4290 # Offset: 1396
    00000579: 	nopl	(%rax) # Size: 7
.Ltmp4272:
    00000580: 	testq	%r13, %r13
    00000583: 	jne	.Ltmp4291 # Offset: 1411
    00000589: 	movq	%rbx, %rax
    0000058c: 	jmp	.Ltmp4292 # Offset: 1420
    00000591: 	nopl	(%rax) # Size: 7
.Ltmp4259:
    00000598: 	leaq	0x18(%rsp), %rsi
    0000059d: 	xorl	%edx, %edx
    0000059f: 	movq	%rbp, %rdi
    000005a2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1442
    000005a7: 	movq	%rax, 0x40(%rsp)
    000005ac: 	movq	%rax, %rdi
    000005af: 	movq	0x18(%rsp), %rax
    000005b4: 	movq	%rax, 0x50(%rsp)
.Ltmp4295:
    000005b9: 	movq	0x8(%rsp), %rsi
    000005be: 	movq	%r13, %rdx
    000005c1: 	callq	memcpy@PLT # Offset: 1473
    000005c6: 	movq	0x18(%rsp), %r13
    000005cb: 	movq	0x40(%rsp), %rax
    000005d0: 	jmp	.Ltmp4288 # Offset: 1488
    000005d5: 	nopl	(%rax) # Size: 3
.Ltmp4253:
    000005d8: 	leaq	0x18(%rsp), %rsi
    000005dd: 	xorl	%edx, %edx
    000005df: 	movq	%rbp, %rdi
    000005e2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1506
    000005e7: 	movq	%rax, 0x40(%rsp)
    000005ec: 	movq	%rax, %rdi
    000005ef: 	movq	0x18(%rsp), %rax
    000005f4: 	movq	%rax, 0x50(%rsp)
.Ltmp4293:
    000005f9: 	movq	0x8(%rsp), %rsi
    000005fe: 	movq	%r13, %rdx
    00000601: 	callq	memcpy@PLT # Offset: 1537
    00000606: 	movq	0x18(%rsp), %r13
    0000060b: 	movq	0x40(%rsp), %rax
    00000610: 	jmp	.Ltmp4284 # Offset: 1552
    00000615: 	nopl	(%rax) # Size: 3
.Ltmp4271:
    00000618: 	leaq	0x18(%rsp), %rsi
    0000061d: 	xorl	%edx, %edx
    0000061f: 	movq	%rbp, %rdi
    00000622: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1570
    00000627: 	movq	%rax, 0x40(%rsp)
    0000062c: 	movq	%rax, %rdi
    0000062f: 	movq	0x18(%rsp), %rax
    00000634: 	movq	%rax, 0x50(%rsp)
.Ltmp4297:
    00000639: 	movq	0x8(%rsp), %rsi
    0000063e: 	movq	%r13, %rdx
    00000641: 	callq	memcpy@PLT # Offset: 1601
    00000646: 	movq	0x18(%rsp), %r13
    0000064b: 	movq	0x40(%rsp), %rax
    00000650: 	jmp	.Ltmp4292 # Offset: 1616
    00000655: 	nopl	(%rax) # Size: 3
.Ltmp4277:
    00000658: 	leaq	0x18(%rsp), %rsi
    0000065d: 	xorl	%edx, %edx
    0000065f: 	movq	%rbp, %rdi
    00000662: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1634
    00000667: 	movq	%rax, 0x40(%rsp)
    0000066c: 	movq	%rax, %rdi
    0000066f: 	movq	0x18(%rsp), %rax
    00000674: 	movq	%rax, 0x50(%rsp)
.Ltmp4296:
    00000679: 	movq	%r12, %rdx
    0000067c: 	movq	%r13, %rsi
    0000067f: 	callq	memcpy@PLT # Offset: 1663
    00000684: 	movq	0x18(%rsp), %r12
    00000689: 	movq	0x40(%rsp), %rax
    0000068e: 	jmp	.Ltmp4290 # Offset: 1678
    00000693: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4265:
    00000698: 	leaq	0x18(%rsp), %rsi
    0000069d: 	xorl	%edx, %edx
    0000069f: 	movq	%rbp, %rdi
    000006a2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1698
    000006a7: 	movq	%rax, 0x40(%rsp)
    000006ac: 	movq	%rax, %rdi
    000006af: 	movq	0x18(%rsp), %rax
    000006b4: 	movq	%rax, 0x50(%rsp)
.Ltmp4294:
    000006b9: 	movq	0x8(%rsp), %rsi
    000006be: 	movq	%r13, %rdx
    000006c1: 	callq	memcpy@PLT # Offset: 1729
    000006c6: 	movq	0x18(%rsp), %r13
    000006cb: 	movq	0x40(%rsp), %rax
    000006d0: 	jmp	.Ltmp4286 # Offset: 1744
.Ltmp4252:
    000006d5: 	leaq	DATAat0x38158(%rip), %rdi
    000006dc: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1756
.Ltmp4255:
    000006e1: 	leaq	DATAat0x38182(%rip), %rdi
    000006e8: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 1768
.Ltmp4258:
    000006ed: 	leaq	DATAat0x38158(%rip), %rdi
    000006f4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1780
.Ltmp4261:
    000006f9: 	leaq	DATAat0x38182(%rip), %rdi
    00000700: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 1792
.Ltmp4264:
    00000705: 	leaq	DATAat0x38158(%rip), %rdi
    0000070c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1804
.Ltmp4267:
    00000711: 	leaq	DATAat0x38182(%rip), %rdi
    00000718: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 1816
.Ltmp4270:
    0000071d: 	leaq	DATAat0x38158(%rip), %rdi
    00000724: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1828
.Ltmp4273:
    00000729: 	leaq	DATAat0x38182(%rip), %rdi
    00000730: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 1840
.Ltmp4276:
    00000735: 	leaq	DATAat0x38158(%rip), %rdi
    0000073c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1852
.Ltmp4279:
    00000741: 	leaq	DATAat0x38182(%rip), %rdi
    00000748: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 1864
.Ltmp4282:
    0000074d: 	callq	__stack_chk_fail@PLT # Offset: 1869
.Ltmp4283:
    00000752: 	movq	%rbx, %rdi
    00000755: 	jmp	.Ltmp4293 # Offset: 1877
.Ltmp4285:
    0000075a: 	movq	%rbx, %rdi
    0000075d: 	jmp	.Ltmp4294 # Offset: 1885
.Ltmp4287:
    00000762: 	movq	%rbx, %rdi
    00000765: 	jmp	.Ltmp4295 # Offset: 1893
.Ltmp4289:
    0000076a: 	movq	%rbx, %rdi
    0000076d: 	jmp	.Ltmp4296 # Offset: 1901
.Ltmp4291:
    00000772: 	movq	%rbx, %rdi
    00000775: 	jmp	.Ltmp4297 # Offset: 1909
    0000077a: 	endbr64
.Ltmp4299:
    0000077e: 	movq	%rax, %rbp
    00000781: 	jmp	.Ltmp4298 # Offset: 1921
    00000783: 	endbr64
    00000787: 	jmp	.Ltmp4299 # Offset: 1927
    00000789: 	endbr64
    0000078d: 	jmp	.Ltmp4299 # Offset: 1933
    0000078f: 	endbr64
    00000793: 	jmp	.Ltmp4299 # Offset: 1939
    00000795: 	endbr64
    00000799: 	movq	%rax, %rbp
    0000079c: 	jmp	.Ltmp4300 # Offset: 1948
.Ltmp4298:
    0000079e: 	movq	0x40(%rsp), %rdi
    000007a3: 	cmpq	%rbx, %rdi
    000007a6: 	je	.Ltmp4300 # Offset: 1958
    000007a8: 	movq	0x50(%rsp), %rax
    000007ad: 	leaq	0x1(%rax), %rsi
    000007b1: 	callq	_ZdlPvm@PLT # Offset: 1969
.Ltmp4300:
    000007b6: 	movq	0x20(%rsp), %rdi
    000007bb: 	cmpq	(%rsp), %rdi
    000007bf: 	je	.Ltmp4301 # Offset: 1983
    000007c1: 	movq	0x30(%rsp), %rax
    000007c6: 	leaq	0x1(%rax), %rsi
    000007ca: 	callq	_ZdlPvm@PLT # Offset: 1994
.Ltmp4301:
    000007cf: 	movq	%rbp, %rdi
    000007d2: 	callq	_Unwind_Resume@PLT # Offset: 2002
    000007d7: 	endbr64
    000007db: 	jmp	.Ltmp4299 # Offset: 2011
    000007dd: 	endbr64
    000007e1: 	jmp	.Ltmp4299 # Offset: 2017
    000007e3: 	endbr64
    000007e7: 	jmp	.Ltmp4299 # Offset: 2023
    000007e9: 	endbr64
    000007ed: 	jmp	.Ltmp4299 # Offset: 2029
    000007ef: 	endbr64
    000007f3: 	jmp	.Ltmp4299 # Offset: 2035
    000007f5: 	endbr64
    000007f9: 	jmp	.Ltmp4299 # Offset: 2041
    000007fb: 	endbr64
    000007ff: 	jmp	.Ltmp4299 # Offset: 2047
    00000804: 	endbr64
    00000808: 	jmp	.Ltmp4299 # Offset: 2056
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestOneTypeConvIddEvv"

Binary Function "_fini" after disassembly {
  Number      : 293
  State       : disassembled
  Address     : 0x37e60
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x37e60
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0292:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 294 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 3508 instructions were shortened
BOLT-INFO: removed 765 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 289 out of 322 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x205794
