BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x9fe8(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 2
  State       : disassembled
  Address     : 0x11a0
  Size        : 0xec3
  MaxSize     : 0xed0
  Offset      : 0x11a0
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB01:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	pushq	%rbx
    0000000c: 	leaq	-0xf000(%rsp), %r11
.Ltmp1:
    00000014: 	subq	$0x1000, %rsp
    0000001b: 	orq	$0x0, (%rsp)
    00000020: 	cmpq	%r11, %rsp
    00000023: 	jne	.Ltmp1 # Offset: 35
    00000025: 	subq	$0xa10, %rsp
    0000002c: 	movq	%fs:0x28, %rax
    00000035: 	movq	%rax, 0xfa08(%rsp)
    0000003d: 	xorl	%eax, %eax
    0000003f: 	testl	%edi, %edi
    00000041: 	jle	.Ltmp2 # Offset: 65
    00000047: 	leal	-0x1(%rdi), %eax
    0000004a: 	movl	%edi, %r13d
    0000004d: 	movq	%rsi, %r14
    00000050: 	movq	%rsi, %rbp
    00000053: 	leaq	0x8(%rsi,%rax,8), %rbx
    00000058: 	leaq	DATAat0x672d(%rip), %r12
    0000005f: 	nop # Size: 1
.Ltmp3:
    00000060: 	movq	(%rbp), %rdx
    00000064: 	movq	%r12, %rsi
    00000067: 	movl	$0x1, %edi
    0000006c: 	xorl	%eax, %eax
    0000006e: 	addq	$0x8, %rbp
    00000072: 	callq	__printf_chk@PLT # Offset: 114
    00000077: 	cmpq	%rbx, %rbp
    0000007a: 	jne	.Ltmp3 # Offset: 122
    0000007c: 	xorl	%eax, %eax
    0000007e: 	leaq	DATAat0x6713(%rip), %rsi
    00000085: 	movl	$0x1, %edi
    0000008a: 	callq	__printf_chk@PLT # Offset: 138
    0000008f: 	cmpl	$0x1, %r13d
    00000093: 	jg	.Ltmp4 # Offset: 147
.Ltmp7:
    00000099: 	movslq	init_value(%rip), %rax
    000000a0: 	movq	%rsp, %r12
    000000a3: 	leaq	0x7d00(%rsp), %r8
    000000ab: 	movabsq	$0x5851f42d4c957f2d, %rdi
    000000b5: 	movabsq	$0x14057b7ef767814f, %rsi
    000000bf: 	movq	%r12, %rbp
    000000c2: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp5:
    000000d0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000d7: 	addq	$0x4, %rbp
    000000db: 	imulq	%rdi, %rax
    000000df: 	addq	%rsi, %rax
    000000e2: 	movq	%rax, %rdx
    000000e5: 	movq	%rax, %rcx
    000000e8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000ef: 	shrq	$0x14, %rdx
    000000f3: 	shlq	$0x17, %rcx
    000000f7: 	xorq	%rcx, %rdx
    000000fa: 	xorq	%rdx, %rax
    000000fd: 	sarq	$0x3, %rax
    00000101: 	movl	%eax, -0x4(%rbp)
    00000104: 	cmpq	%r8, %rbp
    00000107: 	jne	.Ltmp5 # Offset: 263
    00000109: 	leaq	_Z12copy_for_optIiEvPKT_PS0_i(%rip), %r13
    00000110: 	leaq	DATAat0x6118(%rip), %r8
    00000117: 	movq	%rbp, %rsi
    0000011a: 	movq	%r12, %rdi
    0000011d: 	movq	%r13, %rcx
    00000120: 	movl	$0x1f40, %edx
    00000125: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 293
    0000012a: 	movl	$0x1f40, %edx
    0000012f: 	movq	%rbp, %rsi
    00000132: 	movq	%r12, %rdi
    00000135: 	leaq	DATAat0x6731(%rip), %r8
    0000013c: 	leaq	_Z9copy_for1IiEvPKT_PS0_i(%rip), %rcx
    00000143: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 323
    00000148: 	movl	$0x1f40, %edx
    0000014d: 	movq	%rbp, %rsi
    00000150: 	movq	%r12, %rdi
    00000153: 	leaq	DATAat0x674d(%rip), %r8
    0000015a: 	leaq	_Z9copy_for2IiEvPKT_PS0_i(%rip), %rcx
    00000161: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 353
    00000166: 	movl	$0x1f40, %edx
    0000016b: 	movq	%rbp, %rsi
    0000016e: 	movq	%r12, %rdi
    00000171: 	leaq	DATAat0x6769(%rip), %r8
    00000178: 	leaq	_Z9copy_for3IiEvPKT_PS0_i(%rip), %rcx
    0000017f: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 383
    00000184: 	movl	$0x1f40, %edx
    00000189: 	movq	%rbp, %rsi
    0000018c: 	movq	%r12, %rdi
    0000018f: 	leaq	DATAat0x6785(%rip), %r8
    00000196: 	leaq	_Z9copy_for4IiEvPKT_PS0_i(%rip), %rcx
    0000019d: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 413
    000001a2: 	movl	$0x1f40, %edx
    000001a7: 	movq	%rbp, %rsi
    000001aa: 	movq	%r12, %rdi
    000001ad: 	leaq	DATAat0x67a1(%rip), %r8
    000001b4: 	leaq	_Z9copy_for5IiEvPKT_PS0_i(%rip), %rcx
    000001bb: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 443
    000001c0: 	movl	$0x1f40, %edx
    000001c5: 	movq	%rbp, %rsi
    000001c8: 	movq	%r12, %rdi
    000001cb: 	leaq	DATAat0x67bd(%rip), %r8
    000001d2: 	leaq	_Z9copy_for6IiEvPKT_PS0_i(%rip), %rcx
    000001d9: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 473
    000001de: 	movl	$0x1f40, %edx
    000001e3: 	movq	%rbp, %rsi
    000001e6: 	movq	%r12, %rdi
    000001e9: 	leaq	DATAat0x67d9(%rip), %r8
    000001f0: 	leaq	_Z9copy_for7IiEvPKT_PS0_i(%rip), %rcx
    000001f7: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 503
    000001fc: 	movl	$0x1f40, %edx
    00000201: 	movq	%rbp, %rsi
    00000204: 	movq	%r12, %rdi
    00000207: 	leaq	DATAat0x67f5(%rip), %r8
    0000020e: 	leaq	_Z9copy_for8IiEvPKT_PS0_i(%rip), %rcx
    00000215: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 533
    0000021a: 	movl	$0x1f40, %edx
    0000021f: 	movq	%rbp, %rsi
    00000222: 	movq	%r12, %rdi
    00000225: 	leaq	DATAat0x6811(%rip), %r8
    0000022c: 	leaq	_Z9copy_for9IiEvPKT_PS0_i(%rip), %rcx
    00000233: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 563
    00000238: 	movl	$0x1f40, %edx
    0000023d: 	movq	%rbp, %rsi
    00000240: 	movq	%r12, %rdi
    00000243: 	leaq	DATAat0x682d(%rip), %r8
    0000024a: 	leaq	_Z10copy_for10IiEvPKT_PS0_i(%rip), %rcx
    00000251: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 593
    00000256: 	movl	$0x1f40, %edx
    0000025b: 	movq	%rbp, %rsi
    0000025e: 	movq	%r12, %rdi
    00000261: 	leaq	DATAat0x684a(%rip), %r8
    00000268: 	leaq	_Z10copy_for11IiEvPKT_PS0_i(%rip), %rcx
    0000026f: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 623
    00000274: 	movl	$0x1f40, %edx
    00000279: 	movq	%rbp, %rsi
    0000027c: 	movq	%r12, %rdi
    0000027f: 	leaq	DATAat0x6867(%rip), %r8
    00000286: 	leaq	_Z10copy_for12IiEvPKT_PS0_i(%rip), %rcx
    0000028d: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 653
    00000292: 	movl	$0x1f40, %edx
    00000297: 	movq	%rbp, %rsi
    0000029a: 	movq	%r12, %rdi
    0000029d: 	leaq	DATAat0x6884(%rip), %r8
    000002a4: 	leaq	_Z10copy_for13IiEvPKT_PS0_i(%rip), %rcx
    000002ab: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 683
    000002b0: 	movl	$0x1f40, %edx
    000002b5: 	movq	%rbp, %rsi
    000002b8: 	movq	%r12, %rdi
    000002bb: 	leaq	DATAat0x68a1(%rip), %r8
    000002c2: 	leaq	_Z10copy_for14IiEvPKT_PS0_i(%rip), %rcx
    000002c9: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 713
    000002ce: 	movl	$0x1f40, %edx
    000002d3: 	movq	%rbp, %rsi
    000002d6: 	movq	%r12, %rdi
    000002d9: 	leaq	DATAat0x68be(%rip), %r8
    000002e0: 	leaq	_Z10copy_for15IiEvPKT_PS0_i(%rip), %rcx
    000002e7: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 743
    000002ec: 	movl	$0x1f40, %edx
    000002f1: 	movq	%rbp, %rsi
    000002f4: 	movq	%r12, %rdi
    000002f7: 	leaq	DATAat0x68db(%rip), %r8
    000002fe: 	leaq	_Z10copy_for16IiEvPKT_PS0_i(%rip), %rcx
    00000305: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 773
    0000030a: 	movl	$0x1f40, %edx
    0000030f: 	movq	%rbp, %rsi
    00000312: 	movq	%r12, %rdi
    00000315: 	leaq	DATAat0x68f8(%rip), %r8
    0000031c: 	leaq	_Z10copy_for17IiEvPKT_PS0_i(%rip), %rcx
    00000323: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 803
    00000328: 	movl	$0x1f40, %edx
    0000032d: 	movq	%rbp, %rsi
    00000330: 	movq	%r12, %rdi
    00000333: 	leaq	DATAat0x6915(%rip), %r8
    0000033a: 	leaq	_Z10copy_for18IiEvPKT_PS0_i(%rip), %rcx
    00000341: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 833
    00000346: 	movl	iterations(%rip), %edx
    0000034c: 	xorl	%r8d, %r8d
    0000034f: 	xorl	%ecx, %ecx
    00000351: 	movl	$0x1f40, %esi
    00000356: 	leaq	DATAat0x6932(%rip), %rdi
    0000035d: 	callq	_Z9summarizePKciiii # Offset: 861
    00000362: 	movl	$0x1f40, %edx
    00000367: 	movq	%rbp, %rsi
    0000036a: 	movq	%r12, %rdi
    0000036d: 	leaq	DATAat0x6138(%rip), %r8
    00000374: 	leaq	_Z14copy_while_optIiEvPKT_PS0_i(%rip), %rcx
    0000037b: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 891
    00000380: 	movl	$0x1f40, %edx
    00000385: 	movq	%rbp, %rsi
    00000388: 	movq	%r12, %rdi
    0000038b: 	leaq	DATAat0x694a(%rip), %r8
    00000392: 	leaq	_Z11copy_while1IiEvPKT_PS0_i(%rip), %rcx
    00000399: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 921
    0000039e: 	movl	$0x1f40, %edx
    000003a3: 	movq	%rbp, %rsi
    000003a6: 	movq	%r12, %rdi
    000003a9: 	leaq	DATAat0x6968(%rip), %r8
    000003b0: 	leaq	_Z11copy_while2IiEvPKT_PS0_i(%rip), %rcx
    000003b7: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 951
    000003bc: 	movl	$0x1f40, %edx
    000003c1: 	movq	%rbp, %rsi
    000003c4: 	movq	%r12, %rdi
    000003c7: 	leaq	DATAat0x6986(%rip), %r8
    000003ce: 	leaq	_Z11copy_while3IiEvPKT_PS0_i(%rip), %rcx
    000003d5: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 981
    000003da: 	movl	$0x1f40, %edx
    000003df: 	movq	%rbp, %rsi
    000003e2: 	movq	%r12, %rdi
    000003e5: 	leaq	DATAat0x69a4(%rip), %r8
    000003ec: 	leaq	_Z11copy_while4IiEvPKT_PS0_i(%rip), %rcx
    000003f3: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1011
    000003f8: 	movl	$0x1f40, %edx
    000003fd: 	movq	%rbp, %rsi
    00000400: 	movq	%r12, %rdi
    00000403: 	leaq	DATAat0x69c2(%rip), %r8
    0000040a: 	leaq	_Z11copy_while5IiEvPKT_PS0_i(%rip), %rcx
    00000411: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1041
    00000416: 	movl	$0x1f40, %edx
    0000041b: 	movq	%rbp, %rsi
    0000041e: 	movq	%r12, %rdi
    00000421: 	leaq	DATAat0x69e0(%rip), %r8
    00000428: 	leaq	_Z11copy_while6IiEvPKT_PS0_i(%rip), %rcx
    0000042f: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1071
    00000434: 	movl	$0x1f40, %edx
    00000439: 	movq	%rbp, %rsi
    0000043c: 	movq	%r12, %rdi
    0000043f: 	leaq	DATAat0x69fe(%rip), %r8
    00000446: 	leaq	_Z11copy_while7IiEvPKT_PS0_i(%rip), %rcx
    0000044d: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1101
    00000452: 	movl	$0x1f40, %edx
    00000457: 	movq	%rbp, %rsi
    0000045a: 	movq	%r12, %rdi
    0000045d: 	leaq	DATAat0x6a1c(%rip), %r8
    00000464: 	leaq	_Z11copy_while8IiEvPKT_PS0_i(%rip), %rcx
    0000046b: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1131
    00000470: 	movl	$0x1f40, %edx
    00000475: 	movq	%rbp, %rsi
    00000478: 	movq	%r12, %rdi
    0000047b: 	leaq	DATAat0x6a3a(%rip), %r8
    00000482: 	leaq	_Z11copy_while9IiEvPKT_PS0_i(%rip), %rcx
    00000489: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1161
    0000048e: 	movl	$0x1f40, %edx
    00000493: 	movq	%rbp, %rsi
    00000496: 	movq	%r12, %rdi
    00000499: 	leaq	DATAat0x6160(%rip), %r8
    000004a0: 	leaq	_Z12copy_while10IiEvPKT_PS0_i(%rip), %rcx
    000004a7: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1191
    000004ac: 	movl	$0x1f40, %edx
    000004b1: 	movq	%rbp, %rsi
    000004b4: 	movq	%r12, %rdi
    000004b7: 	leaq	DATAat0x6180(%rip), %r8
    000004be: 	leaq	_Z12copy_while11IiEvPKT_PS0_i(%rip), %rcx
    000004c5: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1221
    000004ca: 	movl	$0x1f40, %edx
    000004cf: 	movq	%rbp, %rsi
    000004d2: 	movq	%r12, %rdi
    000004d5: 	leaq	DATAat0x61a0(%rip), %r8
    000004dc: 	leaq	_Z12copy_while12IiEvPKT_PS0_i(%rip), %rcx
    000004e3: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1251
    000004e8: 	movl	$0x1f40, %edx
    000004ed: 	movq	%rbp, %rsi
    000004f0: 	movq	%r12, %rdi
    000004f3: 	leaq	DATAat0x61c0(%rip), %r8
    000004fa: 	leaq	_Z12copy_while13IiEvPKT_PS0_i(%rip), %rcx
    00000501: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1281
    00000506: 	movl	$0x1f40, %edx
    0000050b: 	movq	%rbp, %rsi
    0000050e: 	movq	%r12, %rdi
    00000511: 	leaq	DATAat0x61e0(%rip), %r8
    00000518: 	leaq	_Z12copy_while14IiEvPKT_PS0_i(%rip), %rcx
    0000051f: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1311
    00000524: 	movl	$0x1f40, %edx
    00000529: 	movq	%rbp, %rsi
    0000052c: 	movq	%r12, %rdi
    0000052f: 	leaq	DATAat0x6200(%rip), %r8
    00000536: 	leaq	_Z12copy_while15IiEvPKT_PS0_i(%rip), %rcx
    0000053d: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1341
    00000542: 	movl	$0x1f40, %edx
    00000547: 	movq	%rbp, %rsi
    0000054a: 	movq	%r12, %rdi
    0000054d: 	leaq	DATAat0x6220(%rip), %r8
    00000554: 	leaq	_Z12copy_while16IiEvPKT_PS0_i(%rip), %rcx
    0000055b: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1371
    00000560: 	movl	$0x1f40, %edx
    00000565: 	movq	%rbp, %rsi
    00000568: 	movq	%r12, %rdi
    0000056b: 	leaq	DATAat0x6240(%rip), %r8
    00000572: 	leaq	_Z12copy_while17IiEvPKT_PS0_i(%rip), %rcx
    00000579: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1401
    0000057e: 	movl	$0x1f40, %edx
    00000583: 	movq	%rbp, %rsi
    00000586: 	movq	%r12, %rdi
    00000589: 	leaq	DATAat0x6260(%rip), %r8
    00000590: 	leaq	_Z12copy_while18IiEvPKT_PS0_i(%rip), %rcx
    00000597: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1431
    0000059c: 	movl	iterations(%rip), %edx
    000005a2: 	xorl	%r8d, %r8d
    000005a5: 	xorl	%ecx, %ecx
    000005a7: 	movl	$0x1f40, %esi
    000005ac: 	leaq	DATAat0x6a58(%rip), %rdi
    000005b3: 	callq	_Z9summarizePKciiii # Offset: 1459
    000005b8: 	movl	$0x1f40, %edx
    000005bd: 	movq	%rbp, %rsi
    000005c0: 	movq	%r12, %rdi
    000005c3: 	leaq	DATAat0x6a72(%rip), %r8
    000005ca: 	leaq	_Z11copy_do_optIiEvPKT_PS0_i(%rip), %rcx
    000005d1: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1489
    000005d6: 	movl	$0x1f40, %edx
    000005db: 	movq	%rbp, %rsi
    000005de: 	movq	%r12, %rdi
    000005e1: 	leaq	DATAat0x6a90(%rip), %r8
    000005e8: 	leaq	_Z8copy_do1IiEvPKT_PS0_i(%rip), %rcx
    000005ef: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1519
    000005f4: 	movl	$0x1f40, %edx
    000005f9: 	movq	%rbp, %rsi
    000005fc: 	movq	%r12, %rdi
    000005ff: 	leaq	DATAat0x6aab(%rip), %r8
    00000606: 	leaq	_Z8copy_do2IiEvPKT_PS0_i(%rip), %rcx
    0000060d: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1549
    00000612: 	movl	$0x1f40, %edx
    00000617: 	movq	%rbp, %rsi
    0000061a: 	movq	%r12, %rdi
    0000061d: 	leaq	DATAat0x6ac6(%rip), %r8
    00000624: 	leaq	_Z8copy_do3IiEvPKT_PS0_i(%rip), %rcx
    0000062b: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1579
    00000630: 	movl	$0x1f40, %edx
    00000635: 	movq	%rbp, %rsi
    00000638: 	movq	%r12, %rdi
    0000063b: 	leaq	DATAat0x6ae1(%rip), %r8
    00000642: 	leaq	_Z8copy_do4IiEvPKT_PS0_i(%rip), %rcx
    00000649: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1609
    0000064e: 	movl	$0x1f40, %edx
    00000653: 	movq	%rbp, %rsi
    00000656: 	movq	%r12, %rdi
    00000659: 	leaq	DATAat0x6afc(%rip), %r8
    00000660: 	leaq	_Z8copy_do5IiEvPKT_PS0_i(%rip), %rcx
    00000667: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1639
    0000066c: 	movl	$0x1f40, %edx
    00000671: 	movq	%rbp, %rsi
    00000674: 	movq	%r12, %rdi
    00000677: 	leaq	DATAat0x6b17(%rip), %r8
    0000067e: 	leaq	_Z8copy_do6IiEvPKT_PS0_i(%rip), %rcx
    00000685: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1669
    0000068a: 	movl	$0x1f40, %edx
    0000068f: 	movq	%rbp, %rsi
    00000692: 	movq	%r12, %rdi
    00000695: 	leaq	DATAat0x6b32(%rip), %r8
    0000069c: 	leaq	_Z8copy_do7IiEvPKT_PS0_i(%rip), %rcx
    000006a3: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1699
    000006a8: 	movl	$0x1f40, %edx
    000006ad: 	movq	%rbp, %rsi
    000006b0: 	movq	%r12, %rdi
    000006b3: 	leaq	DATAat0x6b4d(%rip), %r8
    000006ba: 	leaq	_Z8copy_do8IiEvPKT_PS0_i(%rip), %rcx
    000006c1: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1729
    000006c6: 	movl	$0x1f40, %edx
    000006cb: 	movq	%rbp, %rsi
    000006ce: 	movq	%r12, %rdi
    000006d1: 	leaq	DATAat0x6b68(%rip), %r8
    000006d8: 	leaq	_Z8copy_do9IiEvPKT_PS0_i(%rip), %rcx
    000006df: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1759
    000006e4: 	movl	$0x1f40, %edx
    000006e9: 	movq	%rbp, %rsi
    000006ec: 	movq	%r12, %rdi
    000006ef: 	leaq	DATAat0x6b83(%rip), %r8
    000006f6: 	leaq	_Z9copy_do10IiEvPKT_PS0_i(%rip), %rcx
    000006fd: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1789
    00000702: 	movl	$0x1f40, %edx
    00000707: 	movq	%rbp, %rsi
    0000070a: 	movq	%r12, %rdi
    0000070d: 	leaq	DATAat0x6b9f(%rip), %r8
    00000714: 	leaq	_Z9copy_do11IiEvPKT_PS0_i(%rip), %rcx
    0000071b: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1819
    00000720: 	movl	$0x1f40, %edx
    00000725: 	movq	%rbp, %rsi
    00000728: 	movq	%r12, %rdi
    0000072b: 	leaq	DATAat0x6bbb(%rip), %r8
    00000732: 	leaq	_Z9copy_do12IiEvPKT_PS0_i(%rip), %rcx
    00000739: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1849
    0000073e: 	movl	$0x1f40, %edx
    00000743: 	movq	%rbp, %rsi
    00000746: 	movq	%r12, %rdi
    00000749: 	leaq	DATAat0x6bd7(%rip), %r8
    00000750: 	leaq	_Z9copy_do13IiEvPKT_PS0_i(%rip), %rcx
    00000757: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1879
    0000075c: 	movl	$0x1f40, %edx
    00000761: 	movq	%rbp, %rsi
    00000764: 	movq	%r12, %rdi
    00000767: 	leaq	DATAat0x6bf3(%rip), %r8
    0000076e: 	leaq	_Z9copy_do14IiEvPKT_PS0_i(%rip), %rcx
    00000775: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1909
    0000077a: 	movl	$0x1f40, %edx
    0000077f: 	movq	%rbp, %rsi
    00000782: 	movq	%r12, %rdi
    00000785: 	leaq	DATAat0x6c0f(%rip), %r8
    0000078c: 	leaq	_Z9copy_do15IiEvPKT_PS0_i(%rip), %rcx
    00000793: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1939
    00000798: 	movl	$0x1f40, %edx
    0000079d: 	movq	%rbp, %rsi
    000007a0: 	movq	%r12, %rdi
    000007a3: 	leaq	DATAat0x6c2b(%rip), %r8
    000007aa: 	leaq	_Z9copy_do16IiEvPKT_PS0_i(%rip), %rcx
    000007b1: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1969
    000007b6: 	movl	$0x1f40, %edx
    000007bb: 	movq	%rbp, %rsi
    000007be: 	movq	%r12, %rdi
    000007c1: 	leaq	DATAat0x6c47(%rip), %r8
    000007c8: 	leaq	_Z9copy_do17IiEvPKT_PS0_i(%rip), %rcx
    000007cf: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 1999
    000007d4: 	movl	$0x1f40, %edx
    000007d9: 	movq	%rbp, %rsi
    000007dc: 	movq	%r12, %rdi
    000007df: 	leaq	DATAat0x6c63(%rip), %r8
    000007e6: 	leaq	_Z9copy_do18IiEvPKT_PS0_i(%rip), %rcx
    000007ed: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 2029
    000007f2: 	movl	iterations(%rip), %edx
    000007f8: 	xorl	%r8d, %r8d
    000007fb: 	movl	$0x1f40, %esi
    00000800: 	xorl	%ecx, %ecx
    00000802: 	leaq	DATAat0x6c7f(%rip), %rdi
    00000809: 	callq	_Z9summarizePKciiii # Offset: 2057
    0000080e: 	movl	$0x1f40, %edx
    00000813: 	movq	%rbp, %rsi
    00000816: 	movq	%r12, %rdi
    00000819: 	leaq	DATAat0x6280(%rip), %r8
    00000820: 	leaq	_Z13copy_goto_optIiEvPKT_PS0_i(%rip), %rcx
    00000827: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 2087
    0000082c: 	movl	$0x1f40, %edx
    00000831: 	movq	%rbp, %rsi
    00000834: 	movq	%r12, %rdi
    00000837: 	leaq	DATAat0x6c96(%rip), %r8
    0000083e: 	leaq	_Z10copy_goto1IiEvPKT_PS0_i(%rip), %rcx
    00000845: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 2117
    0000084a: 	movl	$0x1f40, %edx
    0000084f: 	movq	%rbp, %rsi
    00000852: 	movq	%r12, %rdi
    00000855: 	leaq	DATAat0x6cb3(%rip), %r8
    0000085c: 	leaq	_Z10copy_goto2IiEvPKT_PS0_i(%rip), %rcx
    00000863: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 2147
    00000868: 	movl	$0x1f40, %edx
    0000086d: 	movq	%rbp, %rsi
    00000870: 	movq	%r12, %rdi
    00000873: 	leaq	DATAat0x6cd0(%rip), %r8
    0000087a: 	leaq	_Z10copy_goto3IiEvPKT_PS0_i(%rip), %rcx
    00000881: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 2177
    00000886: 	movl	$0x1f40, %edx
    0000088b: 	movq	%rbp, %rsi
    0000088e: 	movq	%r12, %rdi
    00000891: 	leaq	DATAat0x6ced(%rip), %r8
    00000898: 	leaq	_Z10copy_goto4IiEvPKT_PS0_i(%rip), %rcx
    0000089f: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 2207
    000008a4: 	movl	$0x1f40, %edx
    000008a9: 	movq	%rbp, %rsi
    000008ac: 	movq	%r12, %rdi
    000008af: 	leaq	DATAat0x6d0a(%rip), %r8
    000008b6: 	leaq	_Z10copy_goto5IiEvPKT_PS0_i(%rip), %rcx
    000008bd: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 2237
    000008c2: 	movl	$0x1f40, %edx
    000008c7: 	movq	%rbp, %rsi
    000008ca: 	movq	%r12, %rdi
    000008cd: 	leaq	DATAat0x6d27(%rip), %r8
    000008d4: 	leaq	_Z10copy_goto6IiEvPKT_PS0_i(%rip), %rcx
    000008db: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 2267
    000008e0: 	movl	$0x1f40, %edx
    000008e5: 	movq	%rbp, %rsi
    000008e8: 	movq	%r12, %rdi
    000008eb: 	leaq	DATAat0x6d44(%rip), %r8
    000008f2: 	leaq	_Z10copy_goto7IiEvPKT_PS0_i(%rip), %rcx
    000008f9: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 2297
    000008fe: 	movl	$0x1f40, %edx
    00000903: 	movq	%rbp, %rsi
    00000906: 	movq	%r12, %rdi
    00000909: 	leaq	DATAat0x6d61(%rip), %r8
    00000910: 	leaq	_Z10copy_goto8IiEvPKT_PS0_i(%rip), %rcx
    00000917: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 2327
    0000091c: 	movl	$0x1f40, %edx
    00000921: 	movq	%rbp, %rsi
    00000924: 	movq	%r12, %rdi
    00000927: 	leaq	DATAat0x6d7e(%rip), %r8
    0000092e: 	leaq	_Z10copy_goto9IiEvPKT_PS0_i(%rip), %rcx
    00000935: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 2357
    0000093a: 	movl	$0x1f40, %edx
    0000093f: 	movq	%rbp, %rsi
    00000942: 	movq	%r12, %rdi
    00000945: 	leaq	DATAat0x6d9b(%rip), %r8
    0000094c: 	leaq	_Z11copy_goto10IiEvPKT_PS0_i(%rip), %rcx
    00000953: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 2387
    00000958: 	movl	$0x1f40, %edx
    0000095d: 	movq	%rbp, %rsi
    00000960: 	movq	%r12, %rdi
    00000963: 	leaq	DATAat0x6db9(%rip), %r8
    0000096a: 	leaq	_Z11copy_goto11IiEvPKT_PS0_i(%rip), %rcx
    00000971: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 2417
    00000976: 	movl	$0x1f40, %edx
    0000097b: 	movq	%rbp, %rsi
    0000097e: 	movq	%r12, %rdi
    00000981: 	leaq	DATAat0x6dd7(%rip), %r8
    00000988: 	leaq	_Z11copy_goto12IiEvPKT_PS0_i(%rip), %rcx
    0000098f: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 2447
    00000994: 	movl	$0x1f40, %edx
    00000999: 	movq	%rbp, %rsi
    0000099c: 	movq	%r12, %rdi
    0000099f: 	leaq	DATAat0x6df5(%rip), %r8
    000009a6: 	leaq	_Z11copy_goto13IiEvPKT_PS0_i(%rip), %rcx
    000009ad: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 2477
    000009b2: 	movl	$0x1f40, %edx
    000009b7: 	movq	%rbp, %rsi
    000009ba: 	movq	%r12, %rdi
    000009bd: 	leaq	DATAat0x6e13(%rip), %r8
    000009c4: 	leaq	_Z11copy_goto14IiEvPKT_PS0_i(%rip), %rcx
    000009cb: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 2507
    000009d0: 	movl	$0x1f40, %edx
    000009d5: 	movq	%rbp, %rsi
    000009d8: 	movq	%r12, %rdi
    000009db: 	leaq	DATAat0x6e31(%rip), %r8
    000009e2: 	leaq	_Z11copy_goto15IiEvPKT_PS0_i(%rip), %rcx
    000009e9: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 2537
    000009ee: 	movl	$0x1f40, %edx
    000009f3: 	movq	%rbp, %rsi
    000009f6: 	movq	%r12, %rdi
    000009f9: 	leaq	DATAat0x6e4f(%rip), %r8
    00000a00: 	leaq	_Z11copy_goto16IiEvPKT_PS0_i(%rip), %rcx
    00000a07: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 2567
    00000a0c: 	movl	$0x1f40, %edx
    00000a11: 	movq	%rbp, %rsi
    00000a14: 	movq	%r12, %rdi
    00000a17: 	leaq	DATAat0x6e6d(%rip), %r8
    00000a1e: 	leaq	_Z11copy_goto17IiEvPKT_PS0_i(%rip), %rcx
    00000a25: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 2597
    00000a2a: 	movl	$0x1f40, %edx
    00000a2f: 	movq	%rbp, %rsi
    00000a32: 	movq	%r12, %rdi
    00000a35: 	leaq	DATAat0x6e8b(%rip), %r8
    00000a3c: 	leaq	_Z11copy_goto18IiEvPKT_PS0_i(%rip), %rcx
    00000a43: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 2627
    00000a48: 	movl	iterations(%rip), %edx
    00000a4e: 	xorl	%r8d, %r8d
    00000a51: 	xorl	%ecx, %ecx
    00000a53: 	movl	$0x1f40, %esi
    00000a58: 	leaq	DATAat0x6ea9(%rip), %rdi
    00000a5f: 	callq	_Z9summarizePKciiii # Offset: 2655
    00000a64: 	subq	$0x8, %rsp
    00000a68: 	movl	$0x1f21, %ecx
    00000a6d: 	leaq	DATAat0x62a0(%rip), %rax
    00000a74: 	pushq	%rax
    00000a75: 	leaq	_Z17copyrange_for_optIiEvPKT_PS0_iii(%rip), %r9
    00000a7c: 	movl	$0x1d, %edx
    00000a81: 	movq	%rbp, %rsi
    00000a84: 	movl	$0x1f40, %r8d
    00000a8a: 	movq	%r12, %rdi
    00000a8d: 	callq	_Z14test_copyrangeIiPFvPKiPiiiiEEvPKT_PS5_iiiT0_PKc # Offset: 2701
    00000a92: 	movl	$0x1f21, %ecx
    00000a97: 	movq	%rbp, %rsi
    00000a9a: 	movq	%r12, %rdi
    00000a9d: 	leaq	DATAat0x62c8(%rip), %rax
    00000aa4: 	movl	$0x1f40, %r8d
    00000aaa: 	movl	$0x1d, %edx
    00000aaf: 	leaq	_Z14copyrange_for1IiEvPKT_PS0_iii(%rip), %r9
    00000ab6: 	movq	%rax, (%rsp)
    00000aba: 	callq	_Z14test_copyrangeIiPFvPKiPiiiiEEvPKT_PS5_iiiT0_PKc # Offset: 2746
    00000abf: 	movl	$0x1f21, %ecx
    00000ac4: 	movq	%rbp, %rsi
    00000ac7: 	movq	%r12, %rdi
    00000aca: 	leaq	DATAat0x62f0(%rip), %rax
    00000ad1: 	movl	$0x1f40, %r8d
    00000ad7: 	movl	$0x1d, %edx
    00000adc: 	leaq	_Z14copyrange_for2IiEvPKT_PS0_iii(%rip), %r9
    00000ae3: 	movq	%rax, (%rsp)
    00000ae7: 	callq	_Z14test_copyrangeIiPFvPKiPiiiiEEvPKT_PS5_iiiT0_PKc # Offset: 2791
    00000aec: 	movl	$0x1f21, %ecx
    00000af1: 	movq	%rbp, %rsi
    00000af4: 	movq	%r12, %rdi
    00000af7: 	leaq	DATAat0x6318(%rip), %rax
    00000afe: 	movl	$0x1f40, %r8d
    00000b04: 	movl	$0x1d, %edx
    00000b09: 	leaq	_Z14copyrange_for3IiEvPKT_PS0_iii(%rip), %r9
    00000b10: 	movq	%rax, (%rsp)
    00000b14: 	callq	_Z14test_copyrangeIiPFvPKiPiiiiEEvPKT_PS5_iiiT0_PKc # Offset: 2836
    00000b19: 	movl	$0x1f21, %ecx
    00000b1e: 	movq	%rbp, %rsi
    00000b21: 	movq	%r12, %rdi
    00000b24: 	leaq	DATAat0x6340(%rip), %rax
    00000b2b: 	movl	$0x1f40, %r8d
    00000b31: 	movl	$0x1d, %edx
    00000b36: 	leaq	_Z14copyrange_for4IiEvPKT_PS0_iii(%rip), %r9
    00000b3d: 	movq	%rax, (%rsp)
    00000b41: 	callq	_Z14test_copyrangeIiPFvPKiPiiiiEEvPKT_PS5_iiiT0_PKc # Offset: 2881
    00000b46: 	movl	$0x1f21, %ecx
    00000b4b: 	movq	%rbp, %rsi
    00000b4e: 	movq	%r12, %rdi
    00000b51: 	leaq	DATAat0x6368(%rip), %rax
    00000b58: 	movl	$0x1f40, %r8d
    00000b5e: 	movl	$0x1d, %edx
    00000b63: 	leaq	_Z14copyrange_for5IiEvPKT_PS0_iii(%rip), %r9
    00000b6a: 	movq	%rax, (%rsp)
    00000b6e: 	callq	_Z14test_copyrangeIiPFvPKiPiiiiEEvPKT_PS5_iiiT0_PKc # Offset: 2926
    00000b73: 	movl	$0x1f21, %ecx
    00000b78: 	movq	%rbp, %rsi
    00000b7b: 	movq	%r12, %rdi
    00000b7e: 	leaq	DATAat0x6390(%rip), %rax
    00000b85: 	movl	$0x1f40, %r8d
    00000b8b: 	movl	$0x1d, %edx
    00000b90: 	leaq	_Z14copyrange_for6IiEvPKT_PS0_iii(%rip), %r9
    00000b97: 	movq	%rax, (%rsp)
    00000b9b: 	callq	_Z14test_copyrangeIiPFvPKiPiiiiEEvPKT_PS5_iiiT0_PKc # Offset: 2971
    00000ba0: 	movl	$0x1f21, %ecx
    00000ba5: 	movq	%rbp, %rsi
    00000ba8: 	movq	%r12, %rdi
    00000bab: 	leaq	DATAat0x63b8(%rip), %rax
    00000bb2: 	movl	$0x1f40, %r8d
    00000bb8: 	movl	$0x1d, %edx
    00000bbd: 	leaq	_Z14copyrange_for7IiEvPKT_PS0_iii(%rip), %r9
    00000bc4: 	movq	%rax, (%rsp)
    00000bc8: 	callq	_Z14test_copyrangeIiPFvPKiPiiiiEEvPKT_PS5_iiiT0_PKc # Offset: 3016
    00000bcd: 	movl	$0x1f21, %ecx
    00000bd2: 	movq	%rbp, %rsi
    00000bd5: 	movq	%r12, %rdi
    00000bd8: 	leaq	_Z14copyrange_for8IiEvPKT_PS0_iii(%rip), %r9
    00000bdf: 	movl	$0x1f40, %r8d
    00000be5: 	movl	$0x1d, %edx
    00000bea: 	leaq	DATAat0x63e0(%rip), %rax
    00000bf1: 	movq	%rax, (%rsp)
    00000bf5: 	callq	_Z14test_copyrangeIiPFvPKiPiiiiEEvPKT_PS5_iiiT0_PKc # Offset: 3061
    00000bfa: 	popq	%rax
    00000bfb: 	popq	%rdx
    00000bfc: 	xorl	%r8d, %r8d
    00000bff: 	movl	iterations(%rip), %edx
    00000c05: 	xorl	%ecx, %ecx
    00000c07: 	movl	$0x1f40, %esi
    00000c0c: 	leaq	DATAat0x6ec2(%rip), %rdi
    00000c13: 	callq	_Z9summarizePKciiii # Offset: 3091
    00000c18: 	movq	%r13, %rcx
    00000c1b: 	movl	$0x1f40, %edx
    00000c20: 	movq	%rbp, %rsi
    00000c23: 	leaq	DATAat0x6408(%rip), %r8
    00000c2a: 	movq	%r12, %rdi
    00000c2d: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 3117
    00000c32: 	movl	$0x1f40, %edx
    00000c37: 	movq	%rbp, %rsi
    00000c3a: 	movq	%r12, %rdi
    00000c3d: 	leaq	DATAat0x6430(%rip), %r8
    00000c44: 	leaq	_Z16copy_for_unused1IiEvPKT_PS0_i(%rip), %rcx
    00000c4b: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 3147
    00000c50: 	movl	$0x1f40, %edx
    00000c55: 	movq	%rbp, %rsi
    00000c58: 	movq	%r12, %rdi
    00000c5b: 	leaq	DATAat0x6458(%rip), %r8
    00000c62: 	leaq	_Z16copy_for_unused2IiEvPKT_PS0_i(%rip), %rcx
    00000c69: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 3177
    00000c6e: 	movl	$0x1f40, %edx
    00000c73: 	movq	%rbp, %rsi
    00000c76: 	movq	%r12, %rdi
    00000c79: 	leaq	DATAat0x6480(%rip), %r8
    00000c80: 	leaq	_Z16copy_for_unused3IiEvPKT_PS0_i(%rip), %rcx
    00000c87: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 3207
    00000c8c: 	movl	$0x1f40, %edx
    00000c91: 	movq	%rbp, %rsi
    00000c94: 	movq	%r12, %rdi
    00000c97: 	leaq	DATAat0x64a8(%rip), %r8
    00000c9e: 	leaq	_Z16copy_for_unused4IiEvPKT_PS0_i(%rip), %rcx
    00000ca5: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 3237
    00000caa: 	movl	$0x1f40, %edx
    00000caf: 	movq	%rbp, %rsi
    00000cb2: 	movq	%r12, %rdi
    00000cb5: 	leaq	DATAat0x64d0(%rip), %r8
    00000cbc: 	leaq	_Z16copy_for_unused5IiEvPKT_PS0_i(%rip), %rcx
    00000cc3: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 3267
    00000cc8: 	movl	$0x1f40, %edx
    00000ccd: 	movq	%rbp, %rsi
    00000cd0: 	movq	%r12, %rdi
    00000cd3: 	leaq	DATAat0x64f8(%rip), %r8
    00000cda: 	leaq	_Z16copy_for_unused6IiEvPKT_PS0_i(%rip), %rcx
    00000ce1: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 3297
    00000ce6: 	movl	$0x1f40, %edx
    00000ceb: 	movq	%rbp, %rsi
    00000cee: 	movq	%r12, %rdi
    00000cf1: 	leaq	DATAat0x6520(%rip), %r8
    00000cf8: 	leaq	_Z16copy_for_unused7IiEvPKT_PS0_i(%rip), %rcx
    00000cff: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 3327
    00000d04: 	movl	iterations(%rip), %edx
    00000d0a: 	xorl	%r8d, %r8d
    00000d0d: 	xorl	%ecx, %ecx
    00000d0f: 	movl	$0x1f40, %esi
    00000d14: 	leaq	DATAat0x6548(%rip), %rdi
    00000d1b: 	callq	_Z9summarizePKciiii # Offset: 3355
    00000d20: 	movq	%r13, %rcx
    00000d23: 	movl	$0x1f40, %edx
    00000d28: 	movq	%rbp, %rsi
    00000d2b: 	leaq	DATAat0x6568(%rip), %r8
    00000d32: 	movq	%r12, %rdi
    00000d35: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 3381
    00000d3a: 	movl	$0x1f40, %edx
    00000d3f: 	movq	%rbp, %rsi
    00000d42: 	movq	%r12, %rdi
    00000d45: 	leaq	DATAat0x6590(%rip), %r8
    00000d4c: 	leaq	_Z16copy_for_reduce1IiEvPKT_PS0_i(%rip), %rcx
    00000d53: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 3411
    00000d58: 	movl	$0x1f40, %edx
    00000d5d: 	movq	%rbp, %rsi
    00000d60: 	movq	%r12, %rdi
    00000d63: 	leaq	DATAat0x65b8(%rip), %r8
    00000d6a: 	leaq	_Z16copy_for_reduce2IiEvPKT_PS0_i(%rip), %rcx
    00000d71: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 3441
    00000d76: 	movl	$0x1f40, %edx
    00000d7b: 	movq	%rbp, %rsi
    00000d7e: 	movq	%r12, %rdi
    00000d81: 	leaq	DATAat0x65e0(%rip), %r8
    00000d88: 	leaq	_Z16copy_for_reduce3IiEvPKT_PS0_i(%rip), %rcx
    00000d8f: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 3471
    00000d94: 	movl	$0x1f40, %edx
    00000d99: 	movq	%rbp, %rsi
    00000d9c: 	movq	%r12, %rdi
    00000d9f: 	leaq	DATAat0x6608(%rip), %r8
    00000da6: 	leaq	_Z16copy_for_reduce4IiEvPKT_PS0_i(%rip), %rcx
    00000dad: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 3501
    00000db2: 	movl	$0x1f40, %edx
    00000db7: 	movq	%rbp, %rsi
    00000dba: 	movq	%r12, %rdi
    00000dbd: 	leaq	DATAat0x6630(%rip), %r8
    00000dc4: 	leaq	_Z16copy_for_reduce5IiEvPKT_PS0_i(%rip), %rcx
    00000dcb: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 3531
    00000dd0: 	movl	$0x1f40, %edx
    00000dd5: 	movq	%rbp, %rsi
    00000dd8: 	movq	%r12, %rdi
    00000ddb: 	leaq	DATAat0x6658(%rip), %r8
    00000de2: 	leaq	_Z16copy_for_reduce6IiEvPKT_PS0_i(%rip), %rcx
    00000de9: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 3561
    00000dee: 	movl	$0x1f40, %edx
    00000df3: 	movq	%rbp, %rsi
    00000df6: 	movq	%r12, %rdi
    00000df9: 	leaq	DATAat0x6680(%rip), %r8
    00000e00: 	leaq	_Z16copy_for_reduce7IiEvPKT_PS0_i(%rip), %rcx
    00000e07: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 3591
    00000e0c: 	movl	$0x1f40, %edx
    00000e11: 	movq	%rbp, %rsi
    00000e14: 	movq	%r12, %rdi
    00000e17: 	leaq	DATAat0x66a8(%rip), %r8
    00000e1e: 	leaq	_Z16copy_for_reduce8IiEvPKT_PS0_i(%rip), %rcx
    00000e25: 	callq	_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc # Offset: 3621
    00000e2a: 	movl	iterations(%rip), %edx
    00000e30: 	xorl	%r8d, %r8d
    00000e33: 	xorl	%ecx, %ecx
    00000e35: 	movl	$0x1f40, %esi
    00000e3a: 	leaq	DATAat0x66d0(%rip), %rdi
    00000e41: 	callq	_Z9summarizePKciiii # Offset: 3649
    00000e46: 	movq	0xfa08(%rsp), %rax
    00000e4e: 	subq	%fs:0x28, %rax
    00000e57: 	jne	.Ltmp6 # Offset: 3671
    00000e59: 	addq	$0xfa10, %rsp
    00000e60: 	xorl	%eax, %eax
    00000e62: 	popq	%rbx
    00000e63: 	popq	%rbp
    00000e64: 	popq	%r12
    00000e66: 	popq	%r13
    00000e68: 	popq	%r14
    00000e6a: 	retq # Offset: 3690
.Ltmp4:
    00000e6b: 	movq	0x8(%r14), %rdi
    00000e6f: 	movl	$0xa, %edx
    00000e74: 	xorl	%esi, %esi
    00000e76: 	callq	strtol@PLT # Offset: 3702
    00000e7b: 	movl	%eax, iterations(%rip)
    00000e81: 	cmpl	$0x2, %r13d
    00000e85: 	jle	.Ltmp7 # Offset: 3717
    00000e8b: 	movq	0x10(%r14), %rdi
    00000e8f: 	movl	$0xa, %edx
    00000e94: 	xorl	%esi, %esi
    00000e96: 	callq	strtol@PLT # Offset: 3734
    00000e9b: 	movl	%eax, init_value(%rip)
    00000ea1: 	jmp	.Ltmp7 # Offset: 3745
.Ltmp2:
    00000ea6: 	leaq	DATAat0x6713(%rip), %rsi
    00000ead: 	movl	$0x1, %edi
    00000eb2: 	xorl	%eax, %eax
    00000eb4: 	callq	__printf_chk@PLT # Offset: 3764
    00000eb9: 	jmp	.Ltmp7 # Offset: 3769
.Ltmp6:
    00000ebe: 	callq	__stack_chk_fail@PLT # Offset: 3774
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 3
  State       : disassembled
  Address     : 0x2070
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x2070
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB02:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x9fd8(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 4
  State       : disassembled
  Address     : 0x20a0
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x20a0
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB03:
    00000000: 	leaq	"completed.0/1"(%rip), %rdi
    00000007: 	leaq	"completed.0/1"(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp8 # Offset: 17
    00000013: 	movq	DATAat0x9fe0(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp8 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp8:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 5
  State       : disassembled
  Address     : 0x20d0
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x20d0
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	leaq	"completed.0/1"(%rip), %rdi
    00000007: 	leaq	"completed.0/1"(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp9 # Offset: 34
    00000024: 	movq	DATAat0x9ff0(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp9 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp9:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x2110
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x2110
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp10 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp11 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp11:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp10:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x2150
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x2150
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 8
  State       : disassembled
  Address     : 0x2160
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x2160
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp12 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp13 # Offset: 38
.Ltmp12:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp14 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp13:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp14:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x6008(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 9
  State       : disassembled
  Address     : 0x2200
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x2200
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp15 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp16 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp17:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp17 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp30:
    00000069: 	leaq	DATAat0x672f(%rip), %rbp
    00000070: 	leaq	DATAat0x6028(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x6068(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp18 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x6f08(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x6098(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x6f00(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp19 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp23:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp20 # Offset: 244
    000000fa: 	movq	DATAat0x6ef0(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp24:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x6ef0(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp21 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp21:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x6714(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x6f08(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp22 # Offset: 398
.Ltmp19:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp23 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp24 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp20:
    000001c8: 	movq	DATAat0x6ef8(%rip), %rsi
    000001cf: 	movq	DATAat0x6ef0(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp21 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp22:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp18 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp25 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp26:
    00000210: 	addq	$0x10, %rax
.Ltmp25:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp26 # Offset: 542
.Ltmp31:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x60c8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp27 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp28 # Offset: 592
.Ltmp27:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp15:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp28:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp29:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp29 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x66ef(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp15 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp16:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp30 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp18:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp31 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 10
  State       : disassembled
  Address     : 0x2530
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x2530
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp32 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp33 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp34:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp34 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp39:
    0000006a: 	leaq	DATAat0x672f(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x60f0(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x6715(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x672f(%rip), %r8
    000000a1: 	leaq	DATAat0x6703(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp35 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp36:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x6714(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp36 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp35 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp37 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp38:
    00000140: 	addq	$0x10, %rax
.Ltmp37:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp38 # Offset: 334
.Ltmp40:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x60c8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp32:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp33:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp39 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp35:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp40 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 11
  State       : disassembled
  Address     : 0x26e0
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x26e0
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x2700
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x2700
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x6f00(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark6scrandEm" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x2740
  Size        : 0xc
  MaxSize     : 0x10
  Offset      : 0x2740
  Section     : .text
  Orc Section : .local.text._ZN9benchmark6scrandEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	movq	%rdi, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000000b: 	retq # Offset: 11
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark6scrandEm"

Binary Function "_ZN9benchmark7crand64Ev" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x2750
  Size        : 0x42
  MaxSize     : 0x50
  Offset      : 0x2750
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand64Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rdx
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rax
    00000015: 	imulq	%rax, %rdx
    00000019: 	movabsq	$0x14057b7ef767814f, %rax
    00000023: 	addq	%rax, %rdx
    00000026: 	movq	%rdx, %rax
    00000029: 	movq	%rdx, %rcx
    0000002c: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rax
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rax
    0000003e: 	xorq	%rdx, %rax
    00000041: 	retq # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand64Ev"

Binary Function "_ZN9benchmark7crand32Ev" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x27a0
  Size        : 0x41
  MaxSize     : 0x50
  Offset      : 0x27a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand32Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rdx
    00000015: 	imulq	%rdx, %rax
    00000019: 	movabsq	$0x14057b7ef767814f, %rdx
    00000023: 	addq	%rdx, %rax
    00000026: 	movq	%rax, %rdx
    00000029: 	movq	%rax, %rcx
    0000002c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rdx
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rdx
    0000003e: 	xorl	%edx, %eax
    00000040: 	retq # Offset: 64
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand32Ev"

Binary Function "_Z12copy_for_optIiEvPKT_PS0_i" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x27f0
  Size        : 0xa8
  MaxSize     : 0xb0
  Offset      : 0x27f0
  Section     : .text
  Orc Section : .local.text._Z12copy_for_optIiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp41 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp42 # Offset: 29
    0000001f: 	leal	-0x1(%rdx), %eax
    00000022: 	cmpl	$0x2, %eax
    00000025: 	jbe	.Ltmp42 # Offset: 37
    00000027: 	movl	%edx, %edi
    00000029: 	xorl	%eax, %eax
    0000002b: 	shrl	$0x2, %edi
    0000002e: 	shlq	$0x4, %rdi
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp43:
    00000038: 	movdqu	(%rcx,%rax), %xmm0
    0000003d: 	movups	%xmm0, (%rsi,%rax)
    00000041: 	addq	$0x10, %rax
    00000045: 	cmpq	%rdi, %rax
    00000048: 	jne	.Ltmp43 # Offset: 72
    0000004a: 	movl	%edx, %eax
    0000004c: 	andl	$-0x4, %eax
    0000004f: 	testb	$0x3, %dl
    00000052: 	je	.Ltmp41 # Offset: 82
    00000054: 	movl	%eax, %r8d
    00000057: 	movl	(%rcx,%r8,4), %r9d
    0000005b: 	leaq	(,%r8,4), %rdi
    00000063: 	movl	%r9d, (%rsi,%r8,4)
    00000067: 	leal	0x1(%rax), %r8d
    0000006b: 	cmpl	%r8d, %edx
    0000006e: 	jle	.Ltmp41 # Offset: 110
    00000070: 	movl	0x4(%rcx,%rdi), %r8d
    00000075: 	addl	$0x2, %eax
    00000078: 	movl	%r8d, 0x4(%rsi,%rdi)
    0000007d: 	cmpl	%eax, %edx
    0000007f: 	jle	.Ltmp41 # Offset: 127
    00000081: 	movl	0x8(%rcx,%rdi), %eax
    00000085: 	movl	%eax, 0x8(%rsi,%rdi)
    00000089: 	retq # Offset: 137
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp42:
    00000090: 	movl	%edx, %edx
    00000092: 	xorl	%eax, %eax
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp44:
    00000098: 	movl	(%rcx,%rax,4), %edi
    0000009b: 	movl	%edi, (%rsi,%rax,4)
    0000009e: 	addq	$0x1, %rax
    000000a2: 	cmpq	%rdx, %rax
    000000a5: 	jne	.Ltmp44 # Offset: 165
.Ltmp41:
    000000a7: 	retq # Offset: 167
DWARF CFI Instructions:
    <empty>
End of Function "_Z12copy_for_optIiEvPKT_PS0_i"

Binary Function "_Z9copy_for1IiEvPKT_PS0_i" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x28a0
  Size        : 0xa8
  MaxSize     : 0xb0
  Offset      : 0x28a0
  Section     : .text
  Orc Section : .local.text._Z9copy_for1IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp45 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp46 # Offset: 29
    0000001f: 	leal	-0x1(%rdx), %eax
    00000022: 	cmpl	$0x2, %eax
    00000025: 	jbe	.Ltmp46 # Offset: 37
    00000027: 	movl	%edx, %edi
    00000029: 	xorl	%eax, %eax
    0000002b: 	shrl	$0x2, %edi
    0000002e: 	shlq	$0x4, %rdi
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp47:
    00000038: 	movdqu	(%rcx,%rax), %xmm0
    0000003d: 	movups	%xmm0, (%rsi,%rax)
    00000041: 	addq	$0x10, %rax
    00000045: 	cmpq	%rdi, %rax
    00000048: 	jne	.Ltmp47 # Offset: 72
    0000004a: 	movl	%edx, %eax
    0000004c: 	andl	$-0x4, %eax
    0000004f: 	testb	$0x3, %dl
    00000052: 	je	.Ltmp45 # Offset: 82
    00000054: 	movl	%eax, %r8d
    00000057: 	movl	(%rcx,%r8,4), %r9d
    0000005b: 	leaq	(,%r8,4), %rdi
    00000063: 	movl	%r9d, (%rsi,%r8,4)
    00000067: 	leal	0x1(%rax), %r8d
    0000006b: 	cmpl	%r8d, %edx
    0000006e: 	jle	.Ltmp45 # Offset: 110
    00000070: 	movl	0x4(%rcx,%rdi), %r8d
    00000075: 	addl	$0x2, %eax
    00000078: 	movl	%r8d, 0x4(%rsi,%rdi)
    0000007d: 	cmpl	%eax, %edx
    0000007f: 	jle	.Ltmp45 # Offset: 127
    00000081: 	movl	0x8(%rcx,%rdi), %eax
    00000085: 	movl	%eax, 0x8(%rsi,%rdi)
    00000089: 	retq # Offset: 137
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp46:
    00000090: 	movl	%edx, %edx
    00000092: 	xorl	%eax, %eax
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp48:
    00000098: 	movl	(%rcx,%rax,4), %edi
    0000009b: 	movl	%edi, (%rsi,%rax,4)
    0000009e: 	addq	$0x1, %rax
    000000a2: 	cmpq	%rdx, %rax
    000000a5: 	jne	.Ltmp48 # Offset: 165
.Ltmp45:
    000000a7: 	retq # Offset: 167
DWARF CFI Instructions:
    <empty>
End of Function "_Z9copy_for1IiEvPKT_PS0_i"

Binary Function "_Z9copy_for2IiEvPKT_PS0_i" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x2950
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x2950
  Section     : .text
  Orc Section : .local.text._Z9copy_for2IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	testl	%edx, %edx
    00000006: 	jle	.Ltmp49 # Offset: 6
    00000008: 	addl	%edx, %edx
    0000000a: 	xorl	%ecx, %ecx
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp50:
    00000010: 	movl	%ecx, %eax
    00000012: 	addl	$0x2, %ecx
    00000015: 	sarl	%eax
    00000017: 	cltq
    00000019: 	movl	(%rdi,%rax,4), %r8d
    0000001d: 	movl	%r8d, (%rsi,%rax,4)
    00000021: 	cmpl	%edx, %ecx
    00000023: 	jne	.Ltmp50 # Offset: 35
.Ltmp49:
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_Z9copy_for2IiEvPKT_PS0_i"

Binary Function "_Z9copy_for3IiEvPKT_PS0_i" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x2980
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x2980
  Section     : .text
  Orc Section : .local.text._Z9copy_for3IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	testl	%edx, %edx
    00000006: 	jle	.Ltmp51 # Offset: 6
    00000008: 	leal	(%rdx,%rdx,2), %r9d
    0000000c: 	movl	$0xaaaaaaab, %r8d
    00000012: 	xorl	%edx, %edx
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp52:
    00000018: 	movl	%edx, %eax
    0000001a: 	addl	$0x3, %edx
    0000001d: 	imulq	%r8, %rax
    00000021: 	shrq	$0x21, %rax
    00000025: 	movl	(%rdi,%rax,4), %ecx
    00000028: 	movl	%ecx, (%rsi,%rax,4)
    0000002b: 	cmpl	%r9d, %edx
    0000002e: 	jne	.Ltmp52 # Offset: 46
.Ltmp51:
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z9copy_for3IiEvPKT_PS0_i"

Binary Function "_Z9copy_for4IiEvPKT_PS0_i" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x29c0
  Size        : 0x41
  MaxSize     : 0x50
  Offset      : 0x29c0
  Section     : .text
  Orc Section : .local.text._Z9copy_for4IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp53 # Offset: 9
    0000000b: 	imull	$0xad, %edx, %edx
    00000011: 	xorl	%ecx, %ecx
    00000013: 	nopl	(%rax,%rax) # Size: 5
.Ltmp54:
    00000018: 	movslq	%ecx, %rax
    0000001b: 	movl	%ecx, %edi
    0000001d: 	addl	$0xad, %ecx
    00000023: 	imulq	$0x17ad2209, %rax, %rax
    0000002a: 	sarl	$0x1f, %edi
    0000002d: 	sarq	$0x24, %rax
    00000031: 	subl	%edi, %eax
    00000033: 	cltq
    00000035: 	movl	(%r8,%rax,4), %edi
    00000039: 	movl	%edi, (%rsi,%rax,4)
    0000003c: 	cmpl	%edx, %ecx
    0000003e: 	jne	.Ltmp54 # Offset: 62
.Ltmp53:
    00000040: 	retq # Offset: 64
DWARF CFI Instructions:
    <empty>
End of Function "_Z9copy_for4IiEvPKT_PS0_i"

Binary Function "_Z9copy_for5IiEvPKT_PS0_i" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x2a10
  Size        : 0x57
  MaxSize     : 0x60
  Offset      : 0x2a10
  Section     : .text
  Orc Section : .local.text._Z9copy_for5IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp55 # Offset: 9
    0000000b: 	leal	(%rdx,%rdx,2), %r10d
    0000000f: 	xorl	%ecx, %ecx
    00000011: 	xorl	%edx, %edx
    00000013: 	movl	$0xaaaaaaab, %r9d
    00000019: 	nopl	(%rax) # Size: 7
.Ltmp56:
    00000020: 	movslq	%ecx, %rax
    00000023: 	movl	%ecx, %esi
    00000025: 	addl	$0xad, %ecx
    0000002b: 	imulq	$0x17ad2209, %rax, %rax
    00000032: 	sarl	$0x1f, %esi
    00000035: 	sarq	$0x24, %rax
    00000039: 	subl	%esi, %eax
    0000003b: 	cltq
    0000003d: 	movl	(%rdi,%rax,4), %esi
    00000040: 	movl	%edx, %eax
    00000042: 	addl	$0x3, %edx
    00000045: 	imulq	%r9, %rax
    00000049: 	shrq	$0x21, %rax
    0000004d: 	movl	%esi, (%r8,%rax,4)
    00000051: 	cmpl	%r10d, %edx
    00000054: 	jne	.Ltmp56 # Offset: 84
.Ltmp55:
    00000056: 	retq # Offset: 86
DWARF CFI Instructions:
    <empty>
End of Function "_Z9copy_for5IiEvPKT_PS0_i"

Binary Function "_Z9copy_for6IiEvPKT_PS0_i" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x2a70
  Size        : 0xc0
  MaxSize     : 0xc0
  Offset      : 0x2a70
  Section     : .text
  Orc Section : .local.text._Z9copy_for6IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp57 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp58 # Offset: 29
    00000023: 	leal	-0x1(%rdx), %eax
    00000026: 	cmpl	$0x2, %eax
    00000029: 	jbe	.Ltmp58 # Offset: 41
    0000002b: 	movl	%edx, %edi
    0000002d: 	xorl	%eax, %eax
    0000002f: 	shrl	$0x2, %edi
    00000032: 	shlq	$0x4, %rdi
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp59:
    00000040: 	movdqu	(%rcx,%rax), %xmm0
    00000045: 	movups	%xmm0, (%rsi,%rax)
    00000049: 	addq	$0x10, %rax
    0000004d: 	cmpq	%rdi, %rax
    00000050: 	jne	.Ltmp59 # Offset: 80
    00000052: 	movl	%edx, %edi
    00000054: 	andl	$-0x4, %edi
    00000057: 	leal	0x2(%rdi), %r8d
    0000005b: 	leal	0x63(%rdi), %eax
    0000005e: 	cmpl	%edi, %edx
    00000060: 	je	.Ltmp57 # Offset: 96
    00000062: 	cltq
    00000064: 	addl	$0x1, %edi
    00000067: 	shlq	$0x2, %rax
    0000006b: 	movl	-0x18c(%rcx,%rax), %r9d
    00000073: 	movl	%r9d, -0x18c(%rsi,%rax)
    0000007b: 	cmpl	%edi, %edx
    0000007d: 	jle	.Ltmp57 # Offset: 125
    0000007f: 	movl	-0x188(%rcx,%rax), %edi
    00000086: 	movl	%edi, -0x188(%rsi,%rax)
    0000008d: 	cmpl	%r8d, %edx
    00000090: 	jle	.Ltmp57 # Offset: 144
    00000092: 	movl	-0x184(%rcx,%rax), %edx
    00000099: 	movl	%edx, -0x184(%rsi,%rax)
    000000a0: 	retq # Offset: 160
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp58:
    000000a8: 	movl	%edx, %edx
    000000aa: 	xorl	%eax, %eax
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp60:
    000000b0: 	movl	(%rcx,%rax,4), %edi
    000000b3: 	movl	%edi, (%rsi,%rax,4)
    000000b6: 	addq	$0x1, %rax
    000000ba: 	cmpq	%rax, %rdx
    000000bd: 	jne	.Ltmp60 # Offset: 189
.Ltmp57:
    000000bf: 	retq # Offset: 191
DWARF CFI Instructions:
    <empty>
End of Function "_Z9copy_for6IiEvPKT_PS0_i"

Binary Function "_Z9copy_for7IiEvPKT_PS0_i" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x2b30
  Size        : 0xc0
  MaxSize     : 0xc0
  Offset      : 0x2b30
  Section     : .text
  Orc Section : .local.text._Z9copy_for7IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp61 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp62 # Offset: 29
    00000023: 	leal	-0x1(%rdx), %eax
    00000026: 	cmpl	$0x2, %eax
    00000029: 	jbe	.Ltmp62 # Offset: 41
    0000002b: 	movl	%edx, %edi
    0000002d: 	xorl	%eax, %eax
    0000002f: 	shrl	$0x2, %edi
    00000032: 	shlq	$0x4, %rdi
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp63:
    00000040: 	movdqu	(%rcx,%rax), %xmm0
    00000045: 	movups	%xmm0, (%rsi,%rax)
    00000049: 	addq	$0x10, %rax
    0000004d: 	cmpq	%rdi, %rax
    00000050: 	jne	.Ltmp63 # Offset: 80
    00000052: 	movl	%edx, %eax
    00000054: 	andl	$-0x4, %eax
    00000057: 	leal	0x63(%rax), %edi
    0000005a: 	cmpl	%eax, %edx
    0000005c: 	je	.Ltmp61 # Offset: 92
    0000005e: 	movslq	%edi, %rdi
    00000061: 	movl	%eax, %r8d
    00000064: 	movl	-0x18c(%rcx,%rdi,4), %edi
    0000006b: 	leaq	(,%r8,4), %r9
    00000073: 	movl	%edi, (%rsi,%r8,4)
    00000077: 	leal	0x1(%rax), %edi
    0000007a: 	cmpl	%edi, %edx
    0000007c: 	jle	.Ltmp61 # Offset: 124
    0000007e: 	movl	0x4(%rcx,%r9), %r8d
    00000083: 	movslq	%edi, %rdi
    00000086: 	addl	$0x2, %eax
    00000089: 	leaq	(,%rdi,4), %r10
    00000091: 	movl	%r8d, (%rsi,%rdi,4)
    00000095: 	cmpl	%eax, %edx
    00000097: 	jle	.Ltmp61 # Offset: 151
    00000099: 	movl	0x4(%rcx,%r10), %edx
    0000009e: 	cltq
    000000a0: 	movl	%edx, (%rsi,%rax,4)
    000000a3: 	retq # Offset: 163
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp62:
    000000a8: 	movl	%edx, %edx
    000000aa: 	xorl	%eax, %eax
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp64:
    000000b0: 	movl	(%rcx,%rax,4), %edi
    000000b3: 	movl	%edi, (%rsi,%rax,4)
    000000b6: 	addq	$0x1, %rax
    000000ba: 	cmpq	%rax, %rdx
    000000bd: 	jne	.Ltmp64 # Offset: 189
.Ltmp61:
    000000bf: 	retq # Offset: 191
DWARF CFI Instructions:
    <empty>
End of Function "_Z9copy_for7IiEvPKT_PS0_i"

Binary Function "_Z9copy_for8IiEvPKT_PS0_i" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x2bf0
  Size        : 0x57
  MaxSize     : 0x60
  Offset      : 0x2bf0
  Section     : .text
  Orc Section : .local.text._Z9copy_for8IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp65 # Offset: 9
    0000000b: 	leal	(%rdx,%rdx,2), %r10d
    0000000f: 	xorl	%ecx, %ecx
    00000011: 	xorl	%edx, %edx
    00000013: 	movl	$0xaaaaaaab, %r9d
    00000019: 	nopl	(%rax) # Size: 7
.Ltmp66:
    00000020: 	movslq	%ecx, %rax
    00000023: 	movl	%ecx, %esi
    00000025: 	addl	$0xad, %ecx
    0000002b: 	imulq	$0x17ad2209, %rax, %rax
    00000032: 	sarl	$0x1f, %esi
    00000035: 	sarq	$0x24, %rax
    00000039: 	subl	%esi, %eax
    0000003b: 	cltq
    0000003d: 	movl	(%rdi,%rax,4), %esi
    00000040: 	movl	%edx, %eax
    00000042: 	addl	$0x3, %edx
    00000045: 	imulq	%r9, %rax
    00000049: 	shrq	$0x21, %rax
    0000004d: 	movl	%esi, (%r8,%rax,4)
    00000051: 	cmpl	%edx, %r10d
    00000054: 	jne	.Ltmp66 # Offset: 84
.Ltmp65:
    00000056: 	retq # Offset: 86
DWARF CFI Instructions:
    <empty>
End of Function "_Z9copy_for8IiEvPKT_PS0_i"

Binary Function "_Z9copy_for9IiEvPKT_PS0_i" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x2c50
  Size        : 0xe0
  MaxSize     : 0xe0
  Offset      : 0x2c50
  Section     : .text
  Orc Section : .local.text._Z9copy_for9IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp67 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp68 # Offset: 29
    00000023: 	leal	-0x1(%rdx), %eax
    00000026: 	cmpl	$0x2, %eax
    00000029: 	jbe	.Ltmp68 # Offset: 41
    0000002f: 	movl	%edx, %edi
    00000031: 	xorl	%eax, %eax
    00000033: 	shrl	$0x2, %edi
    00000036: 	shlq	$0x4, %rdi
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp69:
    00000040: 	movdqu	(%rcx,%rax), %xmm0
    00000045: 	movups	%xmm0, (%rsi,%rax)
    00000049: 	addq	$0x10, %rax
    0000004d: 	cmpq	%rdi, %rax
    00000050: 	jne	.Ltmp69 # Offset: 80
    00000052: 	movl	%edx, %eax
    00000054: 	andl	$-0x4, %eax
    00000057: 	leal	-0xff(%rax), %edi
    0000005d: 	cmpl	%eax, %edx
    0000005f: 	je	.Ltmp67 # Offset: 95
    00000061: 	movslq	%edi, %rdi
    00000064: 	shlq	$0x2, %rdi
    00000068: 	movl	0x3fc(%rcx,%rdi), %r8d
    00000070: 	movl	%r8d, 0x3fc(%rsi,%rdi)
    00000078: 	leal	0x1(%rax), %r8d
    0000007c: 	leal	-0xfe(%rax), %edi
    00000082: 	cmpl	%r8d, %edx
    00000085: 	jle	.Ltmp67 # Offset: 133
    00000087: 	movslq	%edi, %rdi
    0000008a: 	shlq	$0x2, %rdi
    0000008e: 	movl	0x3fc(%rcx,%rdi), %r8d
    00000096: 	movl	%r8d, 0x3fc(%rsi,%rdi)
    0000009e: 	leal	-0xfd(%rax), %edi
    000000a4: 	addl	$0x2, %eax
    000000a7: 	cmpl	%eax, %edx
    000000a9: 	jle	.Ltmp67 # Offset: 169
    000000ab: 	movslq	%edi, %rax
    000000ae: 	shlq	$0x2, %rax
    000000b2: 	movl	0x3fc(%rcx,%rax), %edx
    000000b9: 	movl	%edx, 0x3fc(%rsi,%rax)
    000000c0: 	retq # Offset: 192
    000000c1: 	nopl	(%rax) # Size: 7
.Ltmp68:
    000000c8: 	movl	%edx, %edx
    000000ca: 	xorl	%eax, %eax
    000000cc: 	nopl	(%rax) # Size: 4
.Ltmp70:
    000000d0: 	movl	(%rcx,%rax,4), %edi
    000000d3: 	movl	%edi, (%rsi,%rax,4)
    000000d6: 	addq	$0x1, %rax
    000000da: 	cmpq	%rax, %rdx
    000000dd: 	jne	.Ltmp70 # Offset: 221
.Ltmp67:
    000000df: 	retq # Offset: 223
DWARF CFI Instructions:
    <empty>
End of Function "_Z9copy_for9IiEvPKT_PS0_i"

Binary Function "_Z10copy_for10IiEvPKT_PS0_i" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x2d30
  Size        : 0x67
  MaxSize     : 0x70
  Offset      : 0x2d30
  Section     : .text
  Orc Section : .local.text._Z10copy_for10IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp71 # Offset: 9
    0000000b: 	leal	0x129(%rdx,%rdx,2), %r10d
    00000013: 	movl	$0xffff53ad, %ecx
    00000018: 	movl	$0x129, %edx
    0000001d: 	movl	$0xaaaaaaab, %r9d
    00000023: 	nopl	(%rax,%rax) # Size: 5
.Ltmp72:
    00000028: 	movslq	%ecx, %rax
    0000002b: 	movl	%ecx, %esi
    0000002d: 	addl	$0xad, %ecx
    00000033: 	imulq	$0x17ad2209, %rax, %rax
    0000003a: 	sarl	$0x1f, %esi
    0000003d: 	sarq	$0x24, %rax
    00000041: 	subl	%esi, %eax
    00000043: 	cltq
    00000045: 	movl	0x3fc(%rdi,%rax,4), %esi
    0000004c: 	movl	%edx, %eax
    0000004e: 	addl	$0x3, %edx
    00000051: 	imulq	%r9, %rax
    00000055: 	shrq	$0x21, %rax
    00000059: 	movl	%esi, -0x18c(%r8,%rax,4)
    00000061: 	cmpl	%r10d, %edx
    00000064: 	jne	.Ltmp72 # Offset: 100
.Ltmp71:
    00000066: 	retq # Offset: 102
DWARF CFI Instructions:
    <empty>
End of Function "_Z10copy_for10IiEvPKT_PS0_i"

Binary Function "_Z10copy_for11IiEvPKT_PS0_i" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x2da0
  Size        : 0x32
  MaxSize     : 0x40
  Offset      : 0x2da0
  Section     : .text
  Orc Section : .local.text._Z10copy_for11IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	testl	%edx, %edx
    00000006: 	jle	.Ltmp73 # Offset: 6
    00000008: 	shll	$0x8, %edx
    0000000b: 	xorl	%ecx, %ecx
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp74:
    00000010: 	leal	(%rcx,%rcx), %eax
    00000013: 	sarl	$0x9, %eax
    00000016: 	cltq
    00000018: 	movl	(%rdi,%rax,4), %r8d
    0000001c: 	movl	%ecx, %eax
    0000001e: 	addl	$0x100, %ecx
    00000024: 	sarl	$0x8, %eax
    00000027: 	cltq
    00000029: 	movl	%r8d, (%rsi,%rax,4)
    0000002d: 	cmpl	%ecx, %edx
    0000002f: 	jne	.Ltmp74 # Offset: 47
.Ltmp73:
    00000031: 	retq # Offset: 49
DWARF CFI Instructions:
    <empty>
End of Function "_Z10copy_for11IiEvPKT_PS0_i"

Binary Function "_Z10copy_for12IiEvPKT_PS0_i" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x2de0
  Size        : 0x32
  MaxSize     : 0x40
  Offset      : 0x2de0
  Section     : .text
  Orc Section : .local.text._Z10copy_for12IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	testl	%edx, %edx
    00000006: 	jle	.Ltmp75 # Offset: 6
    00000008: 	shll	$0x8, %edx
    0000000b: 	xorl	%ecx, %ecx
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp76:
    00000010: 	leal	(%rcx,%rcx), %eax
    00000013: 	sarl	$0x9, %eax
    00000016: 	cltq
    00000018: 	movl	(%rdi,%rax,4), %r8d
    0000001c: 	movl	%ecx, %eax
    0000001e: 	addl	$0x100, %ecx
    00000024: 	sarl	$0x8, %eax
    00000027: 	cltq
    00000029: 	movl	%r8d, (%rsi,%rax,4)
    0000002d: 	cmpl	%ecx, %edx
    0000002f: 	jne	.Ltmp76 # Offset: 47
.Ltmp75:
    00000031: 	retq # Offset: 49
DWARF CFI Instructions:
    <empty>
End of Function "_Z10copy_for12IiEvPKT_PS0_i"

Binary Function "_Z10copy_for13IiEvPKT_PS0_i" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x2e20
  Size        : 0x4e
  MaxSize     : 0x50
  Offset      : 0x2e20
  Section     : .text
  Orc Section : .local.text._Z10copy_for13IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp77 # Offset: 9
    0000000b: 	addl	$0x3d, %edx
    0000000e: 	movl	$0x3d00, %ecx
    00000013: 	movl	$0xffffde00, %edi
    00000018: 	shll	$0x8, %edx
    0000001b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp78:
    00000020: 	movl	%edi, %eax
    00000022: 	addl	$0x200, %edi
    00000028: 	sarl	$0x9, %eax
    0000002b: 	addl	$0x11, %eax
    0000002e: 	cltq
    00000030: 	movl	(%r9,%rax,4), %r8d
    00000034: 	movl	%ecx, %eax
    00000036: 	addl	$0x100, %ecx
    0000003c: 	sarl	$0x8, %eax
    0000003f: 	cltq
    00000041: 	movl	%r8d, -0xf4(%rsi,%rax,4)
    00000049: 	cmpl	%ecx, %edx
    0000004b: 	jne	.Ltmp78 # Offset: 75
.Ltmp77:
    0000004d: 	retq # Offset: 77
DWARF CFI Instructions:
    <empty>
End of Function "_Z10copy_for13IiEvPKT_PS0_i"

Binary Function "_Z10copy_for14IiEvPKT_PS0_i" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x2e70
  Size        : 0x62
  MaxSize     : 0x70
  Offset      : 0x2e70
  Section     : .text
  Orc Section : .local.text._Z10copy_for14IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	imull	$0x47, %edx, %edi
    0000000a: 	movq	%rsi, %r9
    0000000d: 	testl	%edi, %edi
    0000000f: 	jle	.Ltmp79 # Offset: 15
    00000011: 	xorl	%edx, %edx
    00000013: 	xorl	%esi, %esi
    00000015: 	movl	$0x25, %ecx
    0000001a: 	movl	$0xaaaaaaab, %r10d
.Ltmp80:
    00000020: 	movslq	%edx, %rax
    00000023: 	movl	%edx, %r11d
    00000026: 	addl	$0xad, %edx
    0000002c: 	imulq	$0x17ad2209, %rax, %rax
    00000033: 	sarl	$0x1f, %r11d
    00000037: 	sarq	$0x24, %rax
    0000003b: 	subl	%r11d, %eax
    0000003e: 	cltq
    00000040: 	movl	(%r8,%rax,4), %r11d
    00000044: 	movl	%esi, %eax
    00000046: 	addl	$0x3, %esi
    00000049: 	imulq	%r10, %rax
    0000004d: 	shrq	$0x21, %rax
    00000051: 	movl	%r11d, (%r9,%rax,4)
    00000055: 	movl	%ecx, %eax
    00000057: 	addl	$0x47, %ecx
    0000005a: 	addl	$0x23, %eax
    0000005d: 	cmpl	%eax, %edi
    0000005f: 	jge	.Ltmp80 # Offset: 95
.Ltmp79:
    00000061: 	retq # Offset: 97
DWARF CFI Instructions:
    <empty>
End of Function "_Z10copy_for14IiEvPKT_PS0_i"

Binary Function "_Z10copy_for15IiEvPKT_PS0_i" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x2ee0
  Size        : 0xb8
  MaxSize     : 0xc0
  Offset      : 0x2ee0
  Section     : .text
  Orc Section : .local.text._Z10copy_for15IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp81 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp82 # Offset: 29
    00000023: 	leal	-0x1(%rdx), %eax
    00000026: 	cmpl	$0x2, %eax
    00000029: 	jbe	.Ltmp82 # Offset: 41
    0000002b: 	movl	%edx, %edi
    0000002d: 	xorl	%eax, %eax
    0000002f: 	shrl	$0x2, %edi
    00000032: 	shlq	$0x4, %rdi
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp83:
    00000040: 	movdqu	(%rcx,%rax), %xmm0
    00000045: 	movups	%xmm0, (%rsi,%rax)
    00000049: 	addq	$0x10, %rax
    0000004d: 	cmpq	%rdi, %rax
    00000050: 	jne	.Ltmp83 # Offset: 80
    00000052: 	movl	%edx, %eax
    00000054: 	movl	%edx, %edi
    00000056: 	andl	$-0x4, %eax
    00000059: 	andl	$0x3, %edi
    0000005c: 	testb	$0x3, %dl
    0000005f: 	je	.Ltmp81 # Offset: 95
    00000061: 	movl	%eax, %r8d
    00000064: 	movl	(%rcx,%r8,4), %r9d
    00000068: 	movl	%r9d, (%rsi,%r8,4)
    0000006c: 	leal	0x1(%rax), %r8d
    00000070: 	leal	-0x1(%rdi), %r9d
    00000074: 	cmpl	%r8d, %edx
    00000077: 	jle	.Ltmp81 # Offset: 119
    00000079: 	movl	%edx, %r8d
    0000007c: 	addl	$0x2, %eax
    0000007f: 	subl	$0x2, %edi
    00000082: 	subl	%r9d, %r8d
    00000085: 	movslq	%r8d, %r8
    00000088: 	movl	(%rcx,%r8,4), %r9d
    0000008c: 	movl	%r9d, (%rsi,%r8,4)
    00000090: 	cmpl	%eax, %edx
    00000092: 	jle	.Ltmp81 # Offset: 146
    00000094: 	subl	%edi, %edx
    00000096: 	movslq	%edx, %rdx
    00000099: 	movl	(%rcx,%rdx,4), %eax
    0000009c: 	movl	%eax, (%rsi,%rdx,4)
    0000009f: 	retq # Offset: 159
.Ltmp82:
    000000a0: 	movl	%edx, %edx
    000000a2: 	xorl	%eax, %eax
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp84:
    000000a8: 	movl	(%rcx,%rax,4), %edi
    000000ab: 	movl	%edi, (%rsi,%rax,4)
    000000ae: 	addq	$0x1, %rax
    000000b2: 	cmpq	%rax, %rdx
    000000b5: 	jne	.Ltmp84 # Offset: 181
.Ltmp81:
    000000b7: 	retq # Offset: 183
DWARF CFI Instructions:
    <empty>
End of Function "_Z10copy_for15IiEvPKT_PS0_i"

Binary Function "_Z10copy_for16IiEvPKT_PS0_i" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x2fa0
  Size        : 0x68
  MaxSize     : 0x70
  Offset      : 0x2fa0
  Section     : .text
  Orc Section : .local.text._Z10copy_for16IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	imull	$0xad, %edx, %esi
    0000000d: 	leal	(%rdx,%rdx,2), %ecx
    00000010: 	movl	%edx, %r9d
    00000013: 	testl	%edx, %edx
    00000015: 	jle	.Ltmp85 # Offset: 21
    00000017: 	nopw	(%rax,%rax) # Size: 9
.Ltmp86:
    00000020: 	movslq	%esi, %rdx
    00000023: 	movl	%esi, %eax
    00000025: 	subl	$0xad, %esi
    0000002b: 	imulq	$0x17ad2209, %rdx, %rdx
    00000032: 	sarl	$0x1f, %eax
    00000035: 	sarq	$0x24, %rdx
    00000039: 	subl	%edx, %eax
    0000003b: 	movslq	%ecx, %rdx
    0000003e: 	imulq	$0x55555556, %rdx, %rdx
    00000045: 	addl	%r9d, %eax
    00000048: 	cltq
    0000004a: 	movl	(%rdi,%rax,4), %r10d
    0000004e: 	movl	%ecx, %eax
    00000050: 	shrq	$0x20, %rdx
    00000054: 	sarl	$0x1f, %eax
    00000057: 	subl	%edx, %eax
    00000059: 	addl	%r9d, %eax
    0000005c: 	cltq
    0000005e: 	movl	%r10d, (%r8,%rax,4)
    00000062: 	subl	$0x3, %ecx
    00000065: 	jne	.Ltmp86 # Offset: 101
.Ltmp85:
    00000067: 	retq # Offset: 103
DWARF CFI Instructions:
    <empty>
End of Function "_Z10copy_for16IiEvPKT_PS0_i"

Binary Function "_Z10copy_for17IiEvPKT_PS0_i" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x3010
  Size        : 0xa8
  MaxSize     : 0xb0
  Offset      : 0x3010
  Section     : .text
  Orc Section : .local.text._Z10copy_for17IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp87 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp88 # Offset: 29
    0000001f: 	leal	-0x1(%rdx), %eax
    00000022: 	cmpl	$0x2, %eax
    00000025: 	jbe	.Ltmp88 # Offset: 37
    00000027: 	movl	%edx, %edi
    00000029: 	xorl	%eax, %eax
    0000002b: 	shrl	$0x2, %edi
    0000002e: 	shlq	$0x4, %rdi
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp89:
    00000038: 	movdqu	(%rcx,%rax), %xmm0
    0000003d: 	movups	%xmm0, (%rsi,%rax)
    00000041: 	addq	$0x10, %rax
    00000045: 	cmpq	%rdi, %rax
    00000048: 	jne	.Ltmp89 # Offset: 72
    0000004a: 	movl	%edx, %edi
    0000004c: 	movl	%edx, %eax
    0000004e: 	andl	$-0x4, %edi
    00000051: 	andl	$0x3, %eax
    00000054: 	testb	$0x3, %dl
    00000057: 	je	.Ltmp87 # Offset: 87
    00000059: 	movl	(%rcx,%rdi,4), %r8d
    0000005d: 	movl	%r8d, (%rsi,%rdi,4)
    00000061: 	movl	%eax, %r8d
    00000064: 	subl	$0x1, %r8d
    00000068: 	je	.Ltmp87 # Offset: 104
    0000006a: 	movl	%edx, %edi
    0000006c: 	subl	%r8d, %edi
    0000006f: 	movslq	%edi, %rdi
    00000072: 	movl	(%rcx,%rdi,4), %r8d
    00000076: 	movl	%r8d, (%rsi,%rdi,4)
    0000007a: 	subl	$0x2, %eax
    0000007d: 	je	.Ltmp87 # Offset: 125
    0000007f: 	subl	%eax, %edx
    00000081: 	movslq	%edx, %rdx
    00000084: 	movl	(%rcx,%rdx,4), %eax
    00000087: 	movl	%eax, (%rsi,%rdx,4)
    0000008a: 	retq # Offset: 138
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp88:
    00000090: 	movslq	%edx, %rdx
    00000093: 	xorl	%eax, %eax
    00000095: 	nopl	(%rax) # Size: 3
.Ltmp90:
    00000098: 	movl	(%rcx,%rax,4), %edi
    0000009b: 	movl	%edi, (%rsi,%rax,4)
    0000009e: 	addq	$0x1, %rax
    000000a2: 	cmpq	%rdx, %rax
    000000a5: 	jne	.Ltmp90 # Offset: 165
.Ltmp87:
    000000a7: 	retq # Offset: 167
DWARF CFI Instructions:
    <empty>
End of Function "_Z10copy_for17IiEvPKT_PS0_i"

Binary Function "_Z10copy_for18IiEvPKT_PS0_i" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x30c0
  Size        : 0x68
  MaxSize     : 0x70
  Offset      : 0x30c0
  Section     : .text
  Orc Section : .local.text._Z10copy_for18IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	imull	$0xad, %edx, %esi
    0000000d: 	leal	(%rdx,%rdx,2), %ecx
    00000010: 	movl	%edx, %r9d
    00000013: 	testl	%edx, %edx
    00000015: 	jle	.Ltmp91 # Offset: 21
    00000017: 	nopw	(%rax,%rax) # Size: 9
.Ltmp92:
    00000020: 	movslq	%esi, %rdx
    00000023: 	movl	%esi, %eax
    00000025: 	subl	$0xad, %esi
    0000002b: 	imulq	$0x17ad2209, %rdx, %rdx
    00000032: 	sarl	$0x1f, %eax
    00000035: 	sarq	$0x24, %rdx
    00000039: 	subl	%edx, %eax
    0000003b: 	movslq	%ecx, %rdx
    0000003e: 	imulq	$0x55555556, %rdx, %rdx
    00000045: 	addl	%r9d, %eax
    00000048: 	cltq
    0000004a: 	movl	(%rdi,%rax,4), %r10d
    0000004e: 	movl	%ecx, %eax
    00000050: 	shrq	$0x20, %rdx
    00000054: 	sarl	$0x1f, %eax
    00000057: 	subl	%edx, %eax
    00000059: 	addl	%r9d, %eax
    0000005c: 	cltq
    0000005e: 	movl	%r10d, (%r8,%rax,4)
    00000062: 	subl	$0x3, %ecx
    00000065: 	jne	.Ltmp92 # Offset: 101
.Ltmp91:
    00000067: 	retq # Offset: 103
DWARF CFI Instructions:
    <empty>
End of Function "_Z10copy_for18IiEvPKT_PS0_i"

Binary Function "_Z14copy_while_optIiEvPKT_PS0_i" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x3130
  Size        : 0xa8
  MaxSize     : 0xb0
  Offset      : 0x3130
  Section     : .text
  Orc Section : .local.text._Z14copy_while_optIiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp93 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp94 # Offset: 29
    0000001f: 	leal	-0x1(%rdx), %eax
    00000022: 	cmpl	$0x2, %eax
    00000025: 	jbe	.Ltmp94 # Offset: 37
    00000027: 	movl	%edx, %edi
    00000029: 	xorl	%eax, %eax
    0000002b: 	shrl	$0x2, %edi
    0000002e: 	shlq	$0x4, %rdi
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp95:
    00000038: 	movdqu	(%rcx,%rax), %xmm0
    0000003d: 	movups	%xmm0, (%rsi,%rax)
    00000041: 	addq	$0x10, %rax
    00000045: 	cmpq	%rdi, %rax
    00000048: 	jne	.Ltmp95 # Offset: 72
    0000004a: 	movl	%edx, %eax
    0000004c: 	andl	$-0x4, %eax
    0000004f: 	testb	$0x3, %dl
    00000052: 	je	.Ltmp93 # Offset: 82
    00000054: 	movl	%eax, %r8d
    00000057: 	movl	(%rcx,%r8,4), %r9d
    0000005b: 	leaq	(,%r8,4), %rdi
    00000063: 	movl	%r9d, (%rsi,%r8,4)
    00000067: 	leal	0x1(%rax), %r8d
    0000006b: 	cmpl	%r8d, %edx
    0000006e: 	jle	.Ltmp93 # Offset: 110
    00000070: 	movl	0x4(%rcx,%rdi), %r8d
    00000075: 	addl	$0x2, %eax
    00000078: 	movl	%r8d, 0x4(%rsi,%rdi)
    0000007d: 	cmpl	%eax, %edx
    0000007f: 	jle	.Ltmp93 # Offset: 127
    00000081: 	movl	0x8(%rcx,%rdi), %eax
    00000085: 	movl	%eax, 0x8(%rsi,%rdi)
    00000089: 	retq # Offset: 137
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp94:
    00000090: 	movl	%edx, %edx
    00000092: 	xorl	%eax, %eax
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp96:
    00000098: 	movl	(%rcx,%rax,4), %edi
    0000009b: 	movl	%edi, (%rsi,%rax,4)
    0000009e: 	addq	$0x1, %rax
    000000a2: 	cmpq	%rdx, %rax
    000000a5: 	jne	.Ltmp96 # Offset: 165
.Ltmp93:
    000000a7: 	retq # Offset: 167
DWARF CFI Instructions:
    <empty>
End of Function "_Z14copy_while_optIiEvPKT_PS0_i"

Binary Function "_Z11copy_while1IiEvPKT_PS0_i" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x31e0
  Size        : 0xa8
  MaxSize     : 0xb0
  Offset      : 0x31e0
  Section     : .text
  Orc Section : .local.text._Z11copy_while1IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp97 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp98 # Offset: 29
    0000001f: 	leal	-0x1(%rdx), %eax
    00000022: 	cmpl	$0x2, %eax
    00000025: 	jbe	.Ltmp98 # Offset: 37
    00000027: 	movl	%edx, %edi
    00000029: 	xorl	%eax, %eax
    0000002b: 	shrl	$0x2, %edi
    0000002e: 	shlq	$0x4, %rdi
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp99:
    00000038: 	movdqu	(%rcx,%rax), %xmm0
    0000003d: 	movups	%xmm0, (%rsi,%rax)
    00000041: 	addq	$0x10, %rax
    00000045: 	cmpq	%rdi, %rax
    00000048: 	jne	.Ltmp99 # Offset: 72
    0000004a: 	movl	%edx, %eax
    0000004c: 	andl	$-0x4, %eax
    0000004f: 	testb	$0x3, %dl
    00000052: 	je	.Ltmp97 # Offset: 82
    00000054: 	movl	%eax, %r8d
    00000057: 	movl	(%rcx,%r8,4), %r9d
    0000005b: 	leaq	(,%r8,4), %rdi
    00000063: 	movl	%r9d, (%rsi,%r8,4)
    00000067: 	leal	0x1(%rax), %r8d
    0000006b: 	cmpl	%r8d, %edx
    0000006e: 	jle	.Ltmp97 # Offset: 110
    00000070: 	movl	0x4(%rcx,%rdi), %r8d
    00000075: 	addl	$0x2, %eax
    00000078: 	movl	%r8d, 0x4(%rsi,%rdi)
    0000007d: 	cmpl	%eax, %edx
    0000007f: 	jle	.Ltmp97 # Offset: 127
    00000081: 	movl	0x8(%rcx,%rdi), %eax
    00000085: 	movl	%eax, 0x8(%rsi,%rdi)
    00000089: 	retq # Offset: 137
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp98:
    00000090: 	movl	%edx, %edx
    00000092: 	xorl	%eax, %eax
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp100:
    00000098: 	movl	(%rcx,%rax,4), %edi
    0000009b: 	movl	%edi, (%rsi,%rax,4)
    0000009e: 	addq	$0x1, %rax
    000000a2: 	cmpq	%rdx, %rax
    000000a5: 	jne	.Ltmp100 # Offset: 165
.Ltmp97:
    000000a7: 	retq # Offset: 167
DWARF CFI Instructions:
    <empty>
End of Function "_Z11copy_while1IiEvPKT_PS0_i"

Binary Function "_Z11copy_while2IiEvPKT_PS0_i" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x3290
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x3290
  Section     : .text
  Orc Section : .local.text._Z11copy_while2IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	testl	%edx, %edx
    00000006: 	jle	.Ltmp101 # Offset: 6
    00000008: 	addl	%edx, %edx
    0000000a: 	xorl	%ecx, %ecx
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp102:
    00000010: 	movl	%ecx, %eax
    00000012: 	addl	$0x2, %ecx
    00000015: 	sarl	%eax
    00000017: 	cltq
    00000019: 	movl	(%rdi,%rax,4), %r8d
    0000001d: 	movl	%r8d, (%rsi,%rax,4)
    00000021: 	cmpl	%edx, %ecx
    00000023: 	jne	.Ltmp102 # Offset: 35
.Ltmp101:
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_Z11copy_while2IiEvPKT_PS0_i"

Binary Function "_Z11copy_while3IiEvPKT_PS0_i" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x32c0
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x32c0
  Section     : .text
  Orc Section : .local.text._Z11copy_while3IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	testl	%edx, %edx
    00000006: 	jle	.Ltmp103 # Offset: 6
    00000008: 	leal	(%rdx,%rdx,2), %r9d
    0000000c: 	movl	$0xaaaaaaab, %r8d
    00000012: 	xorl	%edx, %edx
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp104:
    00000018: 	movl	%edx, %eax
    0000001a: 	addl	$0x3, %edx
    0000001d: 	imulq	%r8, %rax
    00000021: 	shrq	$0x21, %rax
    00000025: 	movl	(%rdi,%rax,4), %ecx
    00000028: 	movl	%ecx, (%rsi,%rax,4)
    0000002b: 	cmpl	%r9d, %edx
    0000002e: 	jne	.Ltmp104 # Offset: 46
.Ltmp103:
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z11copy_while3IiEvPKT_PS0_i"

Binary Function "_Z11copy_while4IiEvPKT_PS0_i" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x3300
  Size        : 0x41
  MaxSize     : 0x50
  Offset      : 0x3300
  Section     : .text
  Orc Section : .local.text._Z11copy_while4IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp105 # Offset: 9
    0000000b: 	imull	$0xad, %edx, %edx
    00000011: 	xorl	%ecx, %ecx
    00000013: 	nopl	(%rax,%rax) # Size: 5
.Ltmp106:
    00000018: 	movslq	%ecx, %rax
    0000001b: 	movl	%ecx, %edi
    0000001d: 	addl	$0xad, %ecx
    00000023: 	imulq	$0x17ad2209, %rax, %rax
    0000002a: 	sarl	$0x1f, %edi
    0000002d: 	sarq	$0x24, %rax
    00000031: 	subl	%edi, %eax
    00000033: 	cltq
    00000035: 	movl	(%r8,%rax,4), %edi
    00000039: 	movl	%edi, (%rsi,%rax,4)
    0000003c: 	cmpl	%edx, %ecx
    0000003e: 	jne	.Ltmp106 # Offset: 62
.Ltmp105:
    00000040: 	retq # Offset: 64
DWARF CFI Instructions:
    <empty>
End of Function "_Z11copy_while4IiEvPKT_PS0_i"

Binary Function "_Z11copy_while5IiEvPKT_PS0_i" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x3350
  Size        : 0x57
  MaxSize     : 0x60
  Offset      : 0x3350
  Section     : .text
  Orc Section : .local.text._Z11copy_while5IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp107 # Offset: 9
    0000000b: 	leal	(%rdx,%rdx,2), %r10d
    0000000f: 	xorl	%ecx, %ecx
    00000011: 	xorl	%edx, %edx
    00000013: 	movl	$0xaaaaaaab, %r9d
    00000019: 	nopl	(%rax) # Size: 7
.Ltmp108:
    00000020: 	movslq	%ecx, %rax
    00000023: 	movl	%ecx, %esi
    00000025: 	addl	$0xad, %ecx
    0000002b: 	imulq	$0x17ad2209, %rax, %rax
    00000032: 	sarl	$0x1f, %esi
    00000035: 	sarq	$0x24, %rax
    00000039: 	subl	%esi, %eax
    0000003b: 	cltq
    0000003d: 	movl	(%rdi,%rax,4), %esi
    00000040: 	movl	%edx, %eax
    00000042: 	addl	$0x3, %edx
    00000045: 	imulq	%r9, %rax
    00000049: 	shrq	$0x21, %rax
    0000004d: 	movl	%esi, (%r8,%rax,4)
    00000051: 	cmpl	%r10d, %edx
    00000054: 	jne	.Ltmp108 # Offset: 84
.Ltmp107:
    00000056: 	retq # Offset: 86
DWARF CFI Instructions:
    <empty>
End of Function "_Z11copy_while5IiEvPKT_PS0_i"

Binary Function "_Z11copy_while6IiEvPKT_PS0_i" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x33b0
  Size        : 0xc0
  MaxSize     : 0xc0
  Offset      : 0x33b0
  Section     : .text
  Orc Section : .local.text._Z11copy_while6IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp109 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp110 # Offset: 29
    00000023: 	leal	-0x1(%rdx), %eax
    00000026: 	cmpl	$0x2, %eax
    00000029: 	jbe	.Ltmp110 # Offset: 41
    0000002b: 	movl	%edx, %edi
    0000002d: 	xorl	%eax, %eax
    0000002f: 	shrl	$0x2, %edi
    00000032: 	shlq	$0x4, %rdi
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp111:
    00000040: 	movdqu	(%rcx,%rax), %xmm0
    00000045: 	movups	%xmm0, (%rsi,%rax)
    00000049: 	addq	$0x10, %rax
    0000004d: 	cmpq	%rdi, %rax
    00000050: 	jne	.Ltmp111 # Offset: 80
    00000052: 	movl	%edx, %edi
    00000054: 	andl	$-0x4, %edi
    00000057: 	leal	0x2(%rdi), %r8d
    0000005b: 	leal	0x63(%rdi), %eax
    0000005e: 	cmpl	%edi, %edx
    00000060: 	je	.Ltmp109 # Offset: 96
    00000062: 	cltq
    00000064: 	addl	$0x1, %edi
    00000067: 	shlq	$0x2, %rax
    0000006b: 	movl	-0x18c(%rcx,%rax), %r9d
    00000073: 	movl	%r9d, -0x18c(%rsi,%rax)
    0000007b: 	cmpl	%edi, %edx
    0000007d: 	jle	.Ltmp109 # Offset: 125
    0000007f: 	movl	-0x188(%rcx,%rax), %edi
    00000086: 	movl	%edi, -0x188(%rsi,%rax)
    0000008d: 	cmpl	%r8d, %edx
    00000090: 	jle	.Ltmp109 # Offset: 144
    00000092: 	movl	-0x184(%rcx,%rax), %edx
    00000099: 	movl	%edx, -0x184(%rsi,%rax)
    000000a0: 	retq # Offset: 160
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp110:
    000000a8: 	movl	%edx, %edx
    000000aa: 	xorl	%eax, %eax
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp112:
    000000b0: 	movl	(%rcx,%rax,4), %edi
    000000b3: 	movl	%edi, (%rsi,%rax,4)
    000000b6: 	addq	$0x1, %rax
    000000ba: 	cmpq	%rax, %rdx
    000000bd: 	jne	.Ltmp112 # Offset: 189
.Ltmp109:
    000000bf: 	retq # Offset: 191
DWARF CFI Instructions:
    <empty>
End of Function "_Z11copy_while6IiEvPKT_PS0_i"

Binary Function "_Z11copy_while7IiEvPKT_PS0_i" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x3470
  Size        : 0xc0
  MaxSize     : 0xc0
  Offset      : 0x3470
  Section     : .text
  Orc Section : .local.text._Z11copy_while7IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp113 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp114 # Offset: 29
    00000023: 	leal	-0x1(%rdx), %eax
    00000026: 	cmpl	$0x2, %eax
    00000029: 	jbe	.Ltmp114 # Offset: 41
    0000002b: 	movl	%edx, %edi
    0000002d: 	xorl	%eax, %eax
    0000002f: 	shrl	$0x2, %edi
    00000032: 	shlq	$0x4, %rdi
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp115:
    00000040: 	movdqu	(%rcx,%rax), %xmm0
    00000045: 	movups	%xmm0, (%rsi,%rax)
    00000049: 	addq	$0x10, %rax
    0000004d: 	cmpq	%rdi, %rax
    00000050: 	jne	.Ltmp115 # Offset: 80
    00000052: 	movl	%edx, %eax
    00000054: 	andl	$-0x4, %eax
    00000057: 	leal	0x63(%rax), %edi
    0000005a: 	cmpl	%eax, %edx
    0000005c: 	je	.Ltmp113 # Offset: 92
    0000005e: 	movslq	%edi, %rdi
    00000061: 	movl	%eax, %r8d
    00000064: 	movl	-0x18c(%rcx,%rdi,4), %edi
    0000006b: 	leaq	(,%r8,4), %r9
    00000073: 	movl	%edi, (%rsi,%r8,4)
    00000077: 	leal	0x1(%rax), %edi
    0000007a: 	cmpl	%edi, %edx
    0000007c: 	jle	.Ltmp113 # Offset: 124
    0000007e: 	movl	0x4(%rcx,%r9), %r8d
    00000083: 	movslq	%edi, %rdi
    00000086: 	addl	$0x2, %eax
    00000089: 	leaq	(,%rdi,4), %r10
    00000091: 	movl	%r8d, (%rsi,%rdi,4)
    00000095: 	cmpl	%eax, %edx
    00000097: 	jle	.Ltmp113 # Offset: 151
    00000099: 	movl	0x4(%rcx,%r10), %edx
    0000009e: 	cltq
    000000a0: 	movl	%edx, (%rsi,%rax,4)
    000000a3: 	retq # Offset: 163
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp114:
    000000a8: 	movl	%edx, %edx
    000000aa: 	xorl	%eax, %eax
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp116:
    000000b0: 	movl	(%rcx,%rax,4), %edi
    000000b3: 	movl	%edi, (%rsi,%rax,4)
    000000b6: 	addq	$0x1, %rax
    000000ba: 	cmpq	%rax, %rdx
    000000bd: 	jne	.Ltmp116 # Offset: 189
.Ltmp113:
    000000bf: 	retq # Offset: 191
DWARF CFI Instructions:
    <empty>
End of Function "_Z11copy_while7IiEvPKT_PS0_i"

Binary Function "_Z11copy_while8IiEvPKT_PS0_i" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0x3530
  Size        : 0x57
  MaxSize     : 0x60
  Offset      : 0x3530
  Section     : .text
  Orc Section : .local.text._Z11copy_while8IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp117 # Offset: 9
    0000000b: 	leal	(%rdx,%rdx,2), %r10d
    0000000f: 	xorl	%ecx, %ecx
    00000011: 	xorl	%edx, %edx
    00000013: 	movl	$0xaaaaaaab, %r9d
    00000019: 	nopl	(%rax) # Size: 7
.Ltmp118:
    00000020: 	movslq	%ecx, %rax
    00000023: 	movl	%ecx, %esi
    00000025: 	addl	$0xad, %ecx
    0000002b: 	imulq	$0x17ad2209, %rax, %rax
    00000032: 	sarl	$0x1f, %esi
    00000035: 	sarq	$0x24, %rax
    00000039: 	subl	%esi, %eax
    0000003b: 	cltq
    0000003d: 	movl	(%rdi,%rax,4), %esi
    00000040: 	movl	%edx, %eax
    00000042: 	addl	$0x3, %edx
    00000045: 	imulq	%r9, %rax
    00000049: 	shrq	$0x21, %rax
    0000004d: 	movl	%esi, (%r8,%rax,4)
    00000051: 	cmpl	%edx, %r10d
    00000054: 	jne	.Ltmp118 # Offset: 84
.Ltmp117:
    00000056: 	retq # Offset: 86
DWARF CFI Instructions:
    <empty>
End of Function "_Z11copy_while8IiEvPKT_PS0_i"

Binary Function "_Z11copy_while9IiEvPKT_PS0_i" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0x3590
  Size        : 0xe0
  MaxSize     : 0xe0
  Offset      : 0x3590
  Section     : .text
  Orc Section : .local.text._Z11copy_while9IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp119 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp120 # Offset: 29
    00000023: 	leal	-0x1(%rdx), %eax
    00000026: 	cmpl	$0x2, %eax
    00000029: 	jbe	.Ltmp120 # Offset: 41
    0000002f: 	movl	%edx, %edi
    00000031: 	xorl	%eax, %eax
    00000033: 	shrl	$0x2, %edi
    00000036: 	shlq	$0x4, %rdi
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp121:
    00000040: 	movdqu	(%rcx,%rax), %xmm0
    00000045: 	movups	%xmm0, (%rsi,%rax)
    00000049: 	addq	$0x10, %rax
    0000004d: 	cmpq	%rdi, %rax
    00000050: 	jne	.Ltmp121 # Offset: 80
    00000052: 	movl	%edx, %eax
    00000054: 	andl	$-0x4, %eax
    00000057: 	leal	-0xff(%rax), %edi
    0000005d: 	cmpl	%eax, %edx
    0000005f: 	je	.Ltmp119 # Offset: 95
    00000061: 	movslq	%edi, %rdi
    00000064: 	shlq	$0x2, %rdi
    00000068: 	movl	0x3fc(%rcx,%rdi), %r8d
    00000070: 	movl	%r8d, 0x3fc(%rsi,%rdi)
    00000078: 	leal	0x1(%rax), %r8d
    0000007c: 	leal	-0xfe(%rax), %edi
    00000082: 	cmpl	%r8d, %edx
    00000085: 	jle	.Ltmp119 # Offset: 133
    00000087: 	movslq	%edi, %rdi
    0000008a: 	shlq	$0x2, %rdi
    0000008e: 	movl	0x3fc(%rcx,%rdi), %r8d
    00000096: 	movl	%r8d, 0x3fc(%rsi,%rdi)
    0000009e: 	leal	-0xfd(%rax), %edi
    000000a4: 	addl	$0x2, %eax
    000000a7: 	cmpl	%eax, %edx
    000000a9: 	jle	.Ltmp119 # Offset: 169
    000000ab: 	movslq	%edi, %rax
    000000ae: 	shlq	$0x2, %rax
    000000b2: 	movl	0x3fc(%rcx,%rax), %edx
    000000b9: 	movl	%edx, 0x3fc(%rsi,%rax)
    000000c0: 	retq # Offset: 192
    000000c1: 	nopl	(%rax) # Size: 7
.Ltmp120:
    000000c8: 	movl	%edx, %edx
    000000ca: 	xorl	%eax, %eax
    000000cc: 	nopl	(%rax) # Size: 4
.Ltmp122:
    000000d0: 	movl	(%rcx,%rax,4), %edi
    000000d3: 	movl	%edi, (%rsi,%rax,4)
    000000d6: 	addq	$0x1, %rax
    000000da: 	cmpq	%rax, %rdx
    000000dd: 	jne	.Ltmp122 # Offset: 221
.Ltmp119:
    000000df: 	retq # Offset: 223
DWARF CFI Instructions:
    <empty>
End of Function "_Z11copy_while9IiEvPKT_PS0_i"

Binary Function "_Z12copy_while10IiEvPKT_PS0_i" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0x3670
  Size        : 0x67
  MaxSize     : 0x70
  Offset      : 0x3670
  Section     : .text
  Orc Section : .local.text._Z12copy_while10IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp123 # Offset: 9
    0000000b: 	leal	0x129(%rdx,%rdx,2), %r10d
    00000013: 	movl	$0xffff53ad, %ecx
    00000018: 	movl	$0x129, %edx
    0000001d: 	movl	$0xaaaaaaab, %r9d
    00000023: 	nopl	(%rax,%rax) # Size: 5
.Ltmp124:
    00000028: 	movslq	%ecx, %rax
    0000002b: 	movl	%ecx, %esi
    0000002d: 	addl	$0xad, %ecx
    00000033: 	imulq	$0x17ad2209, %rax, %rax
    0000003a: 	sarl	$0x1f, %esi
    0000003d: 	sarq	$0x24, %rax
    00000041: 	subl	%esi, %eax
    00000043: 	cltq
    00000045: 	movl	0x3fc(%rdi,%rax,4), %esi
    0000004c: 	movl	%edx, %eax
    0000004e: 	addl	$0x3, %edx
    00000051: 	imulq	%r9, %rax
    00000055: 	shrq	$0x21, %rax
    00000059: 	movl	%esi, -0x18c(%r8,%rax,4)
    00000061: 	cmpl	%r10d, %edx
    00000064: 	jne	.Ltmp124 # Offset: 100
.Ltmp123:
    00000066: 	retq # Offset: 102
DWARF CFI Instructions:
    <empty>
End of Function "_Z12copy_while10IiEvPKT_PS0_i"

Binary Function "_Z12copy_while11IiEvPKT_PS0_i" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0x36e0
  Size        : 0x32
  MaxSize     : 0x40
  Offset      : 0x36e0
  Section     : .text
  Orc Section : .local.text._Z12copy_while11IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	testl	%edx, %edx
    00000006: 	jle	.Ltmp125 # Offset: 6
    00000008: 	shll	$0x8, %edx
    0000000b: 	xorl	%ecx, %ecx
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp126:
    00000010: 	leal	(%rcx,%rcx), %eax
    00000013: 	sarl	$0x9, %eax
    00000016: 	cltq
    00000018: 	movl	(%rdi,%rax,4), %r8d
    0000001c: 	movl	%ecx, %eax
    0000001e: 	addl	$0x100, %ecx
    00000024: 	sarl	$0x8, %eax
    00000027: 	cltq
    00000029: 	movl	%r8d, (%rsi,%rax,4)
    0000002d: 	cmpl	%ecx, %edx
    0000002f: 	jne	.Ltmp126 # Offset: 47
.Ltmp125:
    00000031: 	retq # Offset: 49
DWARF CFI Instructions:
    <empty>
End of Function "_Z12copy_while11IiEvPKT_PS0_i"

Binary Function "_Z12copy_while12IiEvPKT_PS0_i" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0x3720
  Size        : 0x32
  MaxSize     : 0x40
  Offset      : 0x3720
  Section     : .text
  Orc Section : .local.text._Z12copy_while12IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	testl	%edx, %edx
    00000006: 	jle	.Ltmp127 # Offset: 6
    00000008: 	shll	$0x8, %edx
    0000000b: 	xorl	%ecx, %ecx
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp128:
    00000010: 	leal	(%rcx,%rcx), %eax
    00000013: 	sarl	$0x9, %eax
    00000016: 	cltq
    00000018: 	movl	(%rdi,%rax,4), %r8d
    0000001c: 	movl	%ecx, %eax
    0000001e: 	addl	$0x100, %ecx
    00000024: 	sarl	$0x8, %eax
    00000027: 	cltq
    00000029: 	movl	%r8d, (%rsi,%rax,4)
    0000002d: 	cmpl	%ecx, %edx
    0000002f: 	jne	.Ltmp128 # Offset: 47
.Ltmp127:
    00000031: 	retq # Offset: 49
DWARF CFI Instructions:
    <empty>
End of Function "_Z12copy_while12IiEvPKT_PS0_i"

Binary Function "_Z12copy_while13IiEvPKT_PS0_i" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0x3760
  Size        : 0x4e
  MaxSize     : 0x50
  Offset      : 0x3760
  Section     : .text
  Orc Section : .local.text._Z12copy_while13IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp129 # Offset: 9
    0000000b: 	addl	$0x3d, %edx
    0000000e: 	movl	$0x3d00, %ecx
    00000013: 	movl	$0xffffde00, %edi
    00000018: 	shll	$0x8, %edx
    0000001b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp130:
    00000020: 	movl	%edi, %eax
    00000022: 	addl	$0x200, %edi
    00000028: 	sarl	$0x9, %eax
    0000002b: 	addl	$0x11, %eax
    0000002e: 	cltq
    00000030: 	movl	(%r9,%rax,4), %r8d
    00000034: 	movl	%ecx, %eax
    00000036: 	addl	$0x100, %ecx
    0000003c: 	sarl	$0x8, %eax
    0000003f: 	cltq
    00000041: 	movl	%r8d, -0xf4(%rsi,%rax,4)
    00000049: 	cmpl	%ecx, %edx
    0000004b: 	jne	.Ltmp130 # Offset: 75
.Ltmp129:
    0000004d: 	retq # Offset: 77
DWARF CFI Instructions:
    <empty>
End of Function "_Z12copy_while13IiEvPKT_PS0_i"

Binary Function "_Z12copy_while14IiEvPKT_PS0_i" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0x37b0
  Size        : 0x62
  MaxSize     : 0x70
  Offset      : 0x37b0
  Section     : .text
  Orc Section : .local.text._Z12copy_while14IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	imull	$0x47, %edx, %edi
    0000000a: 	movq	%rsi, %r9
    0000000d: 	testl	%edi, %edi
    0000000f: 	jle	.Ltmp131 # Offset: 15
    00000011: 	xorl	%edx, %edx
    00000013: 	xorl	%esi, %esi
    00000015: 	movl	$0x25, %ecx
    0000001a: 	movl	$0xaaaaaaab, %r10d
.Ltmp132:
    00000020: 	movslq	%edx, %rax
    00000023: 	movl	%edx, %r11d
    00000026: 	addl	$0xad, %edx
    0000002c: 	imulq	$0x17ad2209, %rax, %rax
    00000033: 	sarl	$0x1f, %r11d
    00000037: 	sarq	$0x24, %rax
    0000003b: 	subl	%r11d, %eax
    0000003e: 	cltq
    00000040: 	movl	(%r8,%rax,4), %r11d
    00000044: 	movl	%esi, %eax
    00000046: 	addl	$0x3, %esi
    00000049: 	imulq	%r10, %rax
    0000004d: 	shrq	$0x21, %rax
    00000051: 	movl	%r11d, (%r9,%rax,4)
    00000055: 	movl	%ecx, %eax
    00000057: 	addl	$0x47, %ecx
    0000005a: 	addl	$0x23, %eax
    0000005d: 	cmpl	%eax, %edi
    0000005f: 	jge	.Ltmp132 # Offset: 95
.Ltmp131:
    00000061: 	retq # Offset: 97
DWARF CFI Instructions:
    <empty>
End of Function "_Z12copy_while14IiEvPKT_PS0_i"

Binary Function "_Z12copy_while15IiEvPKT_PS0_i" after disassembly {
  Number      : 50
  State       : disassembled
  Address     : 0x3820
  Size        : 0xb8
  MaxSize     : 0xc0
  Offset      : 0x3820
  Section     : .text
  Orc Section : .local.text._Z12copy_while15IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp133 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp134 # Offset: 29
    00000023: 	leal	-0x1(%rdx), %eax
    00000026: 	cmpl	$0x2, %eax
    00000029: 	jbe	.Ltmp134 # Offset: 41
    0000002b: 	movl	%edx, %edi
    0000002d: 	xorl	%eax, %eax
    0000002f: 	shrl	$0x2, %edi
    00000032: 	shlq	$0x4, %rdi
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp135:
    00000040: 	movdqu	(%rcx,%rax), %xmm0
    00000045: 	movups	%xmm0, (%rsi,%rax)
    00000049: 	addq	$0x10, %rax
    0000004d: 	cmpq	%rdi, %rax
    00000050: 	jne	.Ltmp135 # Offset: 80
    00000052: 	movl	%edx, %eax
    00000054: 	movl	%edx, %edi
    00000056: 	andl	$-0x4, %eax
    00000059: 	andl	$0x3, %edi
    0000005c: 	testb	$0x3, %dl
    0000005f: 	je	.Ltmp133 # Offset: 95
    00000061: 	movl	%eax, %r8d
    00000064: 	movl	(%rcx,%r8,4), %r9d
    00000068: 	movl	%r9d, (%rsi,%r8,4)
    0000006c: 	leal	0x1(%rax), %r8d
    00000070: 	leal	-0x1(%rdi), %r9d
    00000074: 	cmpl	%r8d, %edx
    00000077: 	jle	.Ltmp133 # Offset: 119
    00000079: 	movl	%edx, %r8d
    0000007c: 	addl	$0x2, %eax
    0000007f: 	subl	$0x2, %edi
    00000082: 	subl	%r9d, %r8d
    00000085: 	movslq	%r8d, %r8
    00000088: 	movl	(%rcx,%r8,4), %r9d
    0000008c: 	movl	%r9d, (%rsi,%r8,4)
    00000090: 	cmpl	%eax, %edx
    00000092: 	jle	.Ltmp133 # Offset: 146
    00000094: 	subl	%edi, %edx
    00000096: 	movslq	%edx, %rdx
    00000099: 	movl	(%rcx,%rdx,4), %eax
    0000009c: 	movl	%eax, (%rsi,%rdx,4)
    0000009f: 	retq # Offset: 159
.Ltmp134:
    000000a0: 	movl	%edx, %edx
    000000a2: 	xorl	%eax, %eax
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp136:
    000000a8: 	movl	(%rcx,%rax,4), %edi
    000000ab: 	movl	%edi, (%rsi,%rax,4)
    000000ae: 	addq	$0x1, %rax
    000000b2: 	cmpq	%rax, %rdx
    000000b5: 	jne	.Ltmp136 # Offset: 181
.Ltmp133:
    000000b7: 	retq # Offset: 183
DWARF CFI Instructions:
    <empty>
End of Function "_Z12copy_while15IiEvPKT_PS0_i"

Binary Function "_Z12copy_while16IiEvPKT_PS0_i" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0x38e0
  Size        : 0x68
  MaxSize     : 0x70
  Offset      : 0x38e0
  Section     : .text
  Orc Section : .local.text._Z12copy_while16IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	imull	$0xad, %edx, %esi
    0000000d: 	leal	(%rdx,%rdx,2), %ecx
    00000010: 	movl	%edx, %r9d
    00000013: 	testl	%edx, %edx
    00000015: 	jle	.Ltmp137 # Offset: 21
    00000017: 	nopw	(%rax,%rax) # Size: 9
.Ltmp138:
    00000020: 	movslq	%esi, %rdx
    00000023: 	movl	%esi, %eax
    00000025: 	subl	$0xad, %esi
    0000002b: 	imulq	$0x17ad2209, %rdx, %rdx
    00000032: 	sarl	$0x1f, %eax
    00000035: 	sarq	$0x24, %rdx
    00000039: 	subl	%edx, %eax
    0000003b: 	movslq	%ecx, %rdx
    0000003e: 	imulq	$0x55555556, %rdx, %rdx
    00000045: 	addl	%r9d, %eax
    00000048: 	cltq
    0000004a: 	movl	(%rdi,%rax,4), %r10d
    0000004e: 	movl	%ecx, %eax
    00000050: 	shrq	$0x20, %rdx
    00000054: 	sarl	$0x1f, %eax
    00000057: 	subl	%edx, %eax
    00000059: 	addl	%r9d, %eax
    0000005c: 	cltq
    0000005e: 	movl	%r10d, (%r8,%rax,4)
    00000062: 	subl	$0x3, %ecx
    00000065: 	jne	.Ltmp138 # Offset: 101
.Ltmp137:
    00000067: 	retq # Offset: 103
DWARF CFI Instructions:
    <empty>
End of Function "_Z12copy_while16IiEvPKT_PS0_i"

Binary Function "_Z12copy_while17IiEvPKT_PS0_i" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0x3950
  Size        : 0xa8
  MaxSize     : 0xb0
  Offset      : 0x3950
  Section     : .text
  Orc Section : .local.text._Z12copy_while17IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp139 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp140 # Offset: 29
    0000001f: 	leal	-0x1(%rdx), %eax
    00000022: 	cmpl	$0x2, %eax
    00000025: 	jbe	.Ltmp140 # Offset: 37
    00000027: 	movl	%edx, %edi
    00000029: 	xorl	%eax, %eax
    0000002b: 	shrl	$0x2, %edi
    0000002e: 	shlq	$0x4, %rdi
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp141:
    00000038: 	movdqu	(%rcx,%rax), %xmm0
    0000003d: 	movups	%xmm0, (%rsi,%rax)
    00000041: 	addq	$0x10, %rax
    00000045: 	cmpq	%rdi, %rax
    00000048: 	jne	.Ltmp141 # Offset: 72
    0000004a: 	movl	%edx, %edi
    0000004c: 	movl	%edx, %eax
    0000004e: 	andl	$-0x4, %edi
    00000051: 	andl	$0x3, %eax
    00000054: 	testb	$0x3, %dl
    00000057: 	je	.Ltmp139 # Offset: 87
    00000059: 	movl	(%rcx,%rdi,4), %r8d
    0000005d: 	movl	%r8d, (%rsi,%rdi,4)
    00000061: 	movl	%eax, %r8d
    00000064: 	subl	$0x1, %r8d
    00000068: 	je	.Ltmp139 # Offset: 104
    0000006a: 	movl	%edx, %edi
    0000006c: 	subl	%r8d, %edi
    0000006f: 	movslq	%edi, %rdi
    00000072: 	movl	(%rcx,%rdi,4), %r8d
    00000076: 	movl	%r8d, (%rsi,%rdi,4)
    0000007a: 	subl	$0x2, %eax
    0000007d: 	je	.Ltmp139 # Offset: 125
    0000007f: 	subl	%eax, %edx
    00000081: 	movslq	%edx, %rdx
    00000084: 	movl	(%rcx,%rdx,4), %eax
    00000087: 	movl	%eax, (%rsi,%rdx,4)
    0000008a: 	retq # Offset: 138
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp140:
    00000090: 	movslq	%edx, %rdx
    00000093: 	xorl	%eax, %eax
    00000095: 	nopl	(%rax) # Size: 3
.Ltmp142:
    00000098: 	movl	(%rcx,%rax,4), %edi
    0000009b: 	movl	%edi, (%rsi,%rax,4)
    0000009e: 	addq	$0x1, %rax
    000000a2: 	cmpq	%rdx, %rax
    000000a5: 	jne	.Ltmp142 # Offset: 165
.Ltmp139:
    000000a7: 	retq # Offset: 167
DWARF CFI Instructions:
    <empty>
End of Function "_Z12copy_while17IiEvPKT_PS0_i"

Binary Function "_Z12copy_while18IiEvPKT_PS0_i" after disassembly {
  Number      : 53
  State       : disassembled
  Address     : 0x3a00
  Size        : 0x68
  MaxSize     : 0x70
  Offset      : 0x3a00
  Section     : .text
  Orc Section : .local.text._Z12copy_while18IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	imull	$0xad, %edx, %esi
    0000000d: 	leal	(%rdx,%rdx,2), %ecx
    00000010: 	movl	%edx, %r9d
    00000013: 	testl	%edx, %edx
    00000015: 	jle	.Ltmp143 # Offset: 21
    00000017: 	nopw	(%rax,%rax) # Size: 9
.Ltmp144:
    00000020: 	movslq	%esi, %rdx
    00000023: 	movl	%esi, %eax
    00000025: 	subl	$0xad, %esi
    0000002b: 	imulq	$0x17ad2209, %rdx, %rdx
    00000032: 	sarl	$0x1f, %eax
    00000035: 	sarq	$0x24, %rdx
    00000039: 	subl	%edx, %eax
    0000003b: 	movslq	%ecx, %rdx
    0000003e: 	imulq	$0x55555556, %rdx, %rdx
    00000045: 	addl	%r9d, %eax
    00000048: 	cltq
    0000004a: 	movl	(%rdi,%rax,4), %r10d
    0000004e: 	movl	%ecx, %eax
    00000050: 	shrq	$0x20, %rdx
    00000054: 	sarl	$0x1f, %eax
    00000057: 	subl	%edx, %eax
    00000059: 	addl	%r9d, %eax
    0000005c: 	cltq
    0000005e: 	movl	%r10d, (%r8,%rax,4)
    00000062: 	subl	$0x3, %ecx
    00000065: 	jne	.Ltmp144 # Offset: 101
.Ltmp143:
    00000067: 	retq # Offset: 103
DWARF CFI Instructions:
    <empty>
End of Function "_Z12copy_while18IiEvPKT_PS0_i"

Binary Function "_Z9copy_do14IiEvPKT_PS0_i" after disassembly {
  Number      : 54
  State       : disassembled
  Address     : 0x3a70
  Size        : 0x62
  MaxSize     : 0x70
  Offset      : 0x3a70
  Section     : .text
  Orc Section : .local.text._Z9copy_do14IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	imull	$0x47, %edx, %edi
    0000000a: 	movq	%rsi, %r9
    0000000d: 	testl	%edi, %edi
    0000000f: 	jle	.Ltmp145 # Offset: 15
    00000011: 	xorl	%edx, %edx
    00000013: 	xorl	%esi, %esi
    00000015: 	movl	$0x25, %ecx
    0000001a: 	movl	$0xaaaaaaab, %r10d
.Ltmp146:
    00000020: 	movslq	%edx, %rax
    00000023: 	movl	%edx, %r11d
    00000026: 	addl	$0xad, %edx
    0000002c: 	imulq	$0x17ad2209, %rax, %rax
    00000033: 	sarl	$0x1f, %r11d
    00000037: 	sarq	$0x24, %rax
    0000003b: 	subl	%r11d, %eax
    0000003e: 	cltq
    00000040: 	movl	(%r8,%rax,4), %r11d
    00000044: 	movl	%esi, %eax
    00000046: 	addl	$0x3, %esi
    00000049: 	imulq	%r10, %rax
    0000004d: 	shrq	$0x21, %rax
    00000051: 	movl	%r11d, (%r9,%rax,4)
    00000055: 	movl	%ecx, %eax
    00000057: 	addl	$0x47, %ecx
    0000005a: 	addl	$0x23, %eax
    0000005d: 	cmpl	%eax, %edi
    0000005f: 	jge	.Ltmp146 # Offset: 95
.Ltmp145:
    00000061: 	retq # Offset: 97
DWARF CFI Instructions:
    <empty>
End of Function "_Z9copy_do14IiEvPKT_PS0_i"

Binary Function "_Z9copy_do16IiEvPKT_PS0_i" after disassembly {
  Number      : 55
  State       : disassembled
  Address     : 0x3ae0
  Size        : 0x68
  MaxSize     : 0x70
  Offset      : 0x3ae0
  Section     : .text
  Orc Section : .local.text._Z9copy_do16IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	movl	%edx, %r9d
    0000000a: 	testl	%edx, %edx
    0000000c: 	jle	.Ltmp147 # Offset: 12
    0000000e: 	imull	$0xad, %edx, %esi
    00000014: 	leal	(%rdx,%rdx,2), %ecx
    00000017: 	nopw	(%rax,%rax) # Size: 9
.Ltmp148:
    00000020: 	movslq	%esi, %rdx
    00000023: 	movl	%esi, %eax
    00000025: 	subl	$0xad, %esi
    0000002b: 	imulq	$0x17ad2209, %rdx, %rdx
    00000032: 	sarl	$0x1f, %eax
    00000035: 	sarq	$0x24, %rdx
    00000039: 	subl	%edx, %eax
    0000003b: 	movslq	%ecx, %rdx
    0000003e: 	imulq	$0x55555556, %rdx, %rdx
    00000045: 	addl	%r9d, %eax
    00000048: 	cltq
    0000004a: 	movl	(%rdi,%rax,4), %r10d
    0000004e: 	movl	%ecx, %eax
    00000050: 	shrq	$0x20, %rdx
    00000054: 	sarl	$0x1f, %eax
    00000057: 	subl	%edx, %eax
    00000059: 	addl	%r9d, %eax
    0000005c: 	cltq
    0000005e: 	movl	%r10d, (%r8,%rax,4)
    00000062: 	subl	$0x3, %ecx
    00000065: 	jne	.Ltmp148 # Offset: 101
.Ltmp147:
    00000067: 	retq # Offset: 103
DWARF CFI Instructions:
    <empty>
End of Function "_Z9copy_do16IiEvPKT_PS0_i"

Binary Function "_Z9copy_do18IiEvPKT_PS0_i" after disassembly {
  Number      : 56
  State       : disassembled
  Address     : 0x3b50
  Size        : 0x68
  MaxSize     : 0x70
  Offset      : 0x3b50
  Section     : .text
  Orc Section : .local.text._Z9copy_do18IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	movl	%edx, %r9d
    0000000a: 	testl	%edx, %edx
    0000000c: 	jle	.Ltmp149 # Offset: 12
    0000000e: 	imull	$0xad, %edx, %esi
    00000014: 	leal	(%rdx,%rdx,2), %ecx
    00000017: 	nopw	(%rax,%rax) # Size: 9
.Ltmp150:
    00000020: 	movslq	%esi, %rdx
    00000023: 	movl	%esi, %eax
    00000025: 	subl	$0xad, %esi
    0000002b: 	imulq	$0x17ad2209, %rdx, %rdx
    00000032: 	sarl	$0x1f, %eax
    00000035: 	sarq	$0x24, %rdx
    00000039: 	subl	%edx, %eax
    0000003b: 	movslq	%ecx, %rdx
    0000003e: 	imulq	$0x55555556, %rdx, %rdx
    00000045: 	addl	%r9d, %eax
    00000048: 	cltq
    0000004a: 	movl	(%rdi,%rax,4), %r10d
    0000004e: 	movl	%ecx, %eax
    00000050: 	shrq	$0x20, %rdx
    00000054: 	sarl	$0x1f, %eax
    00000057: 	subl	%edx, %eax
    00000059: 	addl	%r9d, %eax
    0000005c: 	cltq
    0000005e: 	movl	%r10d, (%r8,%rax,4)
    00000062: 	subl	$0x3, %ecx
    00000065: 	jne	.Ltmp150 # Offset: 101
.Ltmp149:
    00000067: 	retq # Offset: 103
DWARF CFI Instructions:
    <empty>
End of Function "_Z9copy_do18IiEvPKT_PS0_i"

Binary Function "_Z11copy_goto14IiEvPKT_PS0_i" after disassembly {
  Number      : 57
  State       : disassembled
  Address     : 0x3bc0
  Size        : 0x62
  MaxSize     : 0x70
  Offset      : 0x3bc0
  Section     : .text
  Orc Section : .local.text._Z11copy_goto14IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	imull	$0x47, %edx, %edi
    0000000a: 	movq	%rsi, %r9
    0000000d: 	testl	%edi, %edi
    0000000f: 	jle	.Ltmp151 # Offset: 15
    00000011: 	xorl	%edx, %edx
    00000013: 	xorl	%esi, %esi
    00000015: 	movl	$0x25, %ecx
    0000001a: 	movl	$0xaaaaaaab, %r10d
.Ltmp152:
    00000020: 	movslq	%edx, %rax
    00000023: 	movl	%edx, %r11d
    00000026: 	addl	$0xad, %edx
    0000002c: 	imulq	$0x17ad2209, %rax, %rax
    00000033: 	sarl	$0x1f, %r11d
    00000037: 	sarq	$0x24, %rax
    0000003b: 	subl	%r11d, %eax
    0000003e: 	cltq
    00000040: 	movl	(%r8,%rax,4), %r11d
    00000044: 	movl	%esi, %eax
    00000046: 	addl	$0x3, %esi
    00000049: 	imulq	%r10, %rax
    0000004d: 	shrq	$0x21, %rax
    00000051: 	movl	%r11d, (%r9,%rax,4)
    00000055: 	movl	%ecx, %eax
    00000057: 	addl	$0x47, %ecx
    0000005a: 	addl	$0x23, %eax
    0000005d: 	cmpl	%eax, %edi
    0000005f: 	jge	.Ltmp152 # Offset: 95
.Ltmp151:
    00000061: 	retq # Offset: 97
DWARF CFI Instructions:
    <empty>
End of Function "_Z11copy_goto14IiEvPKT_PS0_i"

Binary Function "_Z11copy_goto16IiEvPKT_PS0_i" after disassembly {
  Number      : 58
  State       : disassembled
  Address     : 0x3c30
  Size        : 0x68
  MaxSize     : 0x70
  Offset      : 0x3c30
  Section     : .text
  Orc Section : .local.text._Z11copy_goto16IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	movl	%edx, %r9d
    0000000a: 	testl	%edx, %edx
    0000000c: 	jle	.Ltmp153 # Offset: 12
    0000000e: 	imull	$0xad, %edx, %esi
    00000014: 	leal	(%rdx,%rdx,2), %ecx
    00000017: 	nopw	(%rax,%rax) # Size: 9
.Ltmp154:
    00000020: 	movslq	%esi, %rdx
    00000023: 	movl	%esi, %eax
    00000025: 	subl	$0xad, %esi
    0000002b: 	imulq	$0x17ad2209, %rdx, %rdx
    00000032: 	sarl	$0x1f, %eax
    00000035: 	sarq	$0x24, %rdx
    00000039: 	subl	%edx, %eax
    0000003b: 	movslq	%ecx, %rdx
    0000003e: 	imulq	$0x55555556, %rdx, %rdx
    00000045: 	addl	%r9d, %eax
    00000048: 	cltq
    0000004a: 	movl	(%rdi,%rax,4), %r10d
    0000004e: 	movl	%ecx, %eax
    00000050: 	shrq	$0x20, %rdx
    00000054: 	sarl	$0x1f, %eax
    00000057: 	subl	%edx, %eax
    00000059: 	addl	%r9d, %eax
    0000005c: 	cltq
    0000005e: 	movl	%r10d, (%r8,%rax,4)
    00000062: 	subl	$0x3, %ecx
    00000065: 	jne	.Ltmp154 # Offset: 101
.Ltmp153:
    00000067: 	retq # Offset: 103
DWARF CFI Instructions:
    <empty>
End of Function "_Z11copy_goto16IiEvPKT_PS0_i"

Binary Function "_Z11copy_goto18IiEvPKT_PS0_i" after disassembly {
  Number      : 59
  State       : disassembled
  Address     : 0x3ca0
  Size        : 0x68
  MaxSize     : 0x70
  Offset      : 0x3ca0
  Section     : .text
  Orc Section : .local.text._Z11copy_goto18IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	movl	%edx, %r9d
    0000000a: 	testl	%edx, %edx
    0000000c: 	jle	.Ltmp155 # Offset: 12
    0000000e: 	imull	$0xad, %edx, %esi
    00000014: 	leal	(%rdx,%rdx,2), %ecx
    00000017: 	nopw	(%rax,%rax) # Size: 9
.Ltmp156:
    00000020: 	movslq	%esi, %rdx
    00000023: 	movl	%esi, %eax
    00000025: 	subl	$0xad, %esi
    0000002b: 	imulq	$0x17ad2209, %rdx, %rdx
    00000032: 	sarl	$0x1f, %eax
    00000035: 	sarq	$0x24, %rdx
    00000039: 	subl	%edx, %eax
    0000003b: 	movslq	%ecx, %rdx
    0000003e: 	imulq	$0x55555556, %rdx, %rdx
    00000045: 	addl	%r9d, %eax
    00000048: 	cltq
    0000004a: 	movl	(%rdi,%rax,4), %r10d
    0000004e: 	movl	%ecx, %eax
    00000050: 	shrq	$0x20, %rdx
    00000054: 	sarl	$0x1f, %eax
    00000057: 	subl	%edx, %eax
    00000059: 	addl	%r9d, %eax
    0000005c: 	cltq
    0000005e: 	movl	%r10d, (%r8,%rax,4)
    00000062: 	subl	$0x3, %ecx
    00000065: 	jne	.Ltmp156 # Offset: 101
.Ltmp155:
    00000067: 	retq # Offset: 103
DWARF CFI Instructions:
    <empty>
End of Function "_Z11copy_goto18IiEvPKT_PS0_i"

Binary Function "_Z17copyrange_for_optIiEvPKT_PS0_iii" after disassembly {
  Number      : 60
  State       : disassembled
  Address     : 0x3d10
  Size        : 0xd9
  MaxSize     : 0xe0
  Offset      : 0x3d10
  Section     : .text
  Orc Section : .local.text._Z17copyrange_for_optIiEvPKT_PS0_iii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	endbr64
    00000004: 	cmpl	%ecx, %edx
    00000006: 	jge	.Ltmp157 # Offset: 6
    0000000c: 	movslq	%edx, %rax
    0000000f: 	movl	%ecx, %r11d
    00000012: 	movl	%ecx, %r8d
    00000015: 	pushq	%rbx
    00000016: 	leaq	(,%rax,4), %rcx
    0000001e: 	movq	%rsi, %r9
    00000021: 	subl	%edx, %r11d
    00000024: 	leaq	(%rsi,%rcx), %r10
    00000028: 	leaq	0x4(%rdi,%rcx), %rbx
    0000002d: 	movq	%r10, %rsi
    00000030: 	subq	%rbx, %rsi
    00000033: 	cmpq	$0x8, %rsi
    00000037: 	jbe	.Ltmp158 # Offset: 55
    00000039: 	leal	-0x1(%r11), %esi
    0000003d: 	cmpl	$0x2, %esi
    00000040: 	jbe	.Ltmp158 # Offset: 64
    00000042: 	movl	%r11d, %esi
    00000045: 	addq	%rdi, %rcx
    00000048: 	xorl	%eax, %eax
    0000004a: 	shrl	$0x2, %esi
    0000004d: 	shlq	$0x4, %rsi
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp159:
    00000058: 	movdqu	(%rcx,%rax), %xmm0
    0000005d: 	movups	%xmm0, (%r10,%rax)
    00000062: 	addq	$0x10, %rax
    00000066: 	cmpq	%rax, %rsi
    00000069: 	jne	.Ltmp159 # Offset: 105
    0000006b: 	movl	%r11d, %eax
    0000006e: 	andl	$-0x4, %eax
    00000071: 	addl	%eax, %edx
    00000073: 	cmpl	%eax, %r11d
    00000076: 	je	.Ltmp160 # Offset: 118
    00000078: 	movslq	%edx, %rax
    0000007b: 	movl	(%rdi,%rax,4), %ecx
    0000007e: 	movl	%ecx, (%r9,%rax,4)
    00000082: 	leal	0x1(%rdx), %eax
    00000085: 	cmpl	%eax, %r8d
    00000088: 	jle	.Ltmp160 # Offset: 136
    0000008a: 	cltq
    0000008c: 	addl	$0x2, %edx
    0000008f: 	movl	(%rdi,%rax,4), %esi
    00000092: 	leaq	(,%rax,4), %rcx
    0000009a: 	movl	%esi, (%r9,%rax,4)
    0000009e: 	cmpl	%edx, %r8d
    000000a1: 	jle	.Ltmp160 # Offset: 161
    000000a3: 	movl	0x4(%rdi,%rcx), %eax
    000000a7: 	movl	%eax, 0x4(%r9,%rcx)
.Ltmp160:
    000000ac: 	popq	%rbx
    000000ad: 	retq # Offset: 173
    000000ae: 	nop # Size: 2
.Ltmp158:
    000000b0: 	movl	(%rdi,%rax,4), %edx
    000000b3: 	movl	%edx, (%r9,%rax,4)
    000000b7: 	addq	$0x1, %rax
    000000bb: 	cmpl	%eax, %r8d
    000000be: 	jle	.Ltmp160 # Offset: 190
    000000c0: 	movl	(%rdi,%rax,4), %edx
    000000c3: 	movl	%edx, (%r9,%rax,4)
    000000c7: 	addq	$0x1, %rax
    000000cb: 	cmpl	%eax, %r8d
    000000ce: 	jg	.Ltmp158 # Offset: 206
    000000d0: 	jmp	.Ltmp160 # Offset: 208
    000000d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp157:
    000000d8: 	retq # Offset: 216
DWARF CFI Instructions:
    <empty>
End of Function "_Z17copyrange_for_optIiEvPKT_PS0_iii"

Binary Function "_Z14copyrange_for1IiEvPKT_PS0_iii" after disassembly {
  Number      : 61
  State       : disassembled
  Address     : 0x3df0
  Size        : 0xd9
  MaxSize     : 0xe0
  Offset      : 0x3df0
  Section     : .text
  Orc Section : .local.text._Z14copyrange_for1IiEvPKT_PS0_iii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	endbr64
    00000004: 	cmpl	%ecx, %edx
    00000006: 	jge	.Ltmp161 # Offset: 6
    0000000c: 	movslq	%edx, %rax
    0000000f: 	movl	%ecx, %r11d
    00000012: 	movl	%ecx, %r8d
    00000015: 	pushq	%rbx
    00000016: 	leaq	(,%rax,4), %rcx
    0000001e: 	movq	%rsi, %r9
    00000021: 	subl	%edx, %r11d
    00000024: 	leaq	(%rsi,%rcx), %r10
    00000028: 	leaq	0x4(%rdi,%rcx), %rbx
    0000002d: 	movq	%r10, %rsi
    00000030: 	subq	%rbx, %rsi
    00000033: 	cmpq	$0x8, %rsi
    00000037: 	jbe	.Ltmp162 # Offset: 55
    00000039: 	leal	-0x1(%r11), %esi
    0000003d: 	cmpl	$0x2, %esi
    00000040: 	jbe	.Ltmp162 # Offset: 64
    00000042: 	movl	%r11d, %esi
    00000045: 	addq	%rdi, %rcx
    00000048: 	xorl	%eax, %eax
    0000004a: 	shrl	$0x2, %esi
    0000004d: 	shlq	$0x4, %rsi
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp163:
    00000058: 	movdqu	(%rcx,%rax), %xmm0
    0000005d: 	movups	%xmm0, (%r10,%rax)
    00000062: 	addq	$0x10, %rax
    00000066: 	cmpq	%rax, %rsi
    00000069: 	jne	.Ltmp163 # Offset: 105
    0000006b: 	movl	%r11d, %eax
    0000006e: 	andl	$-0x4, %eax
    00000071: 	addl	%eax, %edx
    00000073: 	cmpl	%eax, %r11d
    00000076: 	je	.Ltmp164 # Offset: 118
    00000078: 	movslq	%edx, %rax
    0000007b: 	movl	(%rdi,%rax,4), %ecx
    0000007e: 	movl	%ecx, (%r9,%rax,4)
    00000082: 	leal	0x1(%rdx), %eax
    00000085: 	cmpl	%eax, %r8d
    00000088: 	jle	.Ltmp164 # Offset: 136
    0000008a: 	cltq
    0000008c: 	addl	$0x2, %edx
    0000008f: 	movl	(%rdi,%rax,4), %esi
    00000092: 	leaq	(,%rax,4), %rcx
    0000009a: 	movl	%esi, (%r9,%rax,4)
    0000009e: 	cmpl	%edx, %r8d
    000000a1: 	jle	.Ltmp164 # Offset: 161
    000000a3: 	movl	0x4(%rdi,%rcx), %eax
    000000a7: 	movl	%eax, 0x4(%r9,%rcx)
.Ltmp164:
    000000ac: 	popq	%rbx
    000000ad: 	retq # Offset: 173
    000000ae: 	nop # Size: 2
.Ltmp162:
    000000b0: 	movl	(%rdi,%rax,4), %edx
    000000b3: 	movl	%edx, (%r9,%rax,4)
    000000b7: 	addq	$0x1, %rax
    000000bb: 	cmpl	%eax, %r8d
    000000be: 	jle	.Ltmp164 # Offset: 190
    000000c0: 	movl	(%rdi,%rax,4), %edx
    000000c3: 	movl	%edx, (%r9,%rax,4)
    000000c7: 	addq	$0x1, %rax
    000000cb: 	cmpl	%eax, %r8d
    000000ce: 	jg	.Ltmp162 # Offset: 206
    000000d0: 	jmp	.Ltmp164 # Offset: 208
    000000d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp161:
    000000d8: 	retq # Offset: 216
DWARF CFI Instructions:
    <empty>
End of Function "_Z14copyrange_for1IiEvPKT_PS0_iii"

Binary Function "_Z14copyrange_for2IiEvPKT_PS0_iii" after disassembly {
  Number      : 62
  State       : disassembled
  Address     : 0x3ed0
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x3ed0
  Section     : .text
  Orc Section : .local.text._Z14copyrange_for2IiEvPKT_PS0_iii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	testl	%r8d, %r8d
    0000000a: 	jle	.Ltmp165 # Offset: 10
    0000000c: 	movslq	%r8d, %r8
    0000000f: 	xorl	%eax, %eax
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp167:
    00000018: 	cmpl	%eax, %ecx
    0000001a: 	jle	.Ltmp166 # Offset: 26
    0000001c: 	cmpl	%eax, %edx
    0000001e: 	jg	.Ltmp166 # Offset: 30
    00000020: 	movl	(%r9,%rax,4), %edi
    00000024: 	movl	%edi, (%rsi,%rax,4)
.Ltmp166:
    00000027: 	addq	$0x1, %rax
    0000002b: 	cmpq	%rax, %r8
    0000002e: 	jne	.Ltmp167 # Offset: 46
.Ltmp165:
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z14copyrange_for2IiEvPKT_PS0_iii"

Binary Function "_Z14copyrange_for3IiEvPKT_PS0_iii" after disassembly {
  Number      : 63
  State       : disassembled
  Address     : 0x3f10
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x3f10
  Section     : .text
  Orc Section : .local.text._Z14copyrange_for3IiEvPKT_PS0_iii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	testl	%r8d, %r8d
    0000000a: 	jle	.Ltmp168 # Offset: 10
    0000000c: 	movslq	%r8d, %r8
    0000000f: 	xorl	%eax, %eax
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp170:
    00000018: 	cmpl	%eax, %ecx
    0000001a: 	jle	.Ltmp169 # Offset: 26
    0000001c: 	cmpl	%eax, %edx
    0000001e: 	jg	.Ltmp169 # Offset: 30
    00000020: 	movl	(%r9,%rax,4), %edi
    00000024: 	movl	%edi, (%rsi,%rax,4)
.Ltmp169:
    00000027: 	addq	$0x1, %rax
    0000002b: 	cmpq	%rax, %r8
    0000002e: 	jne	.Ltmp170 # Offset: 46
.Ltmp168:
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z14copyrange_for3IiEvPKT_PS0_iii"

Binary Function "_Z14copyrange_for4IiEvPKT_PS0_iii" after disassembly {
  Number      : 64
  State       : disassembled
  Address     : 0x3f50
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x3f50
  Section     : .text
  Orc Section : .local.text._Z14copyrange_for4IiEvPKT_PS0_iii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB063:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	testl	%r8d, %r8d
    0000000a: 	jle	.Ltmp171 # Offset: 10
    0000000c: 	movslq	%r8d, %r8
    0000000f: 	xorl	%eax, %eax
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp173:
    00000018: 	cmpl	%eax, %ecx
    0000001a: 	jle	.Ltmp172 # Offset: 26
    0000001c: 	cmpl	%eax, %edx
    0000001e: 	jg	.Ltmp172 # Offset: 30
    00000020: 	movl	(%r9,%rax,4), %edi
    00000024: 	movl	%edi, (%rsi,%rax,4)
.Ltmp172:
    00000027: 	addq	$0x1, %rax
    0000002b: 	cmpq	%rax, %r8
    0000002e: 	jne	.Ltmp173 # Offset: 46
.Ltmp171:
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z14copyrange_for4IiEvPKT_PS0_iii"

Binary Function "_Z14copyrange_for5IiEvPKT_PS0_iii" after disassembly {
  Number      : 65
  State       : disassembled
  Address     : 0x3f90
  Size        : 0xb6
  MaxSize     : 0xc0
  Offset      : 0x3f90
  Section     : .text
  Orc Section : .local.text._Z14copyrange_for5IiEvPKT_PS0_iii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB064:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	leal	(,%rdx,8), %r11d
    0000000e: 	movq	%rdi, %r9
    00000011: 	movq	%rsi, %r10
    00000014: 	pushq	%rbp
    00000015: 	imull	$0xad, %edx, %esi
    0000001b: 	subl	%edx, %r11d
    0000001e: 	pushq	%rbx
    0000001f: 	imull	$0xad, %ecx, %edi
    00000025: 	leal	(,%rcx,8), %ebx
    0000002c: 	subl	%ecx, %ebx
    0000002e: 	testl	%r8d, %r8d
    00000031: 	jle	.Ltmp174 # Offset: 49
    00000033: 	leal	(,%r8,8), %ebp
    0000003b: 	xorl	%ecx, %ecx
    0000003d: 	xorl	%eax, %eax
    0000003f: 	subl	%r8d, %ebp
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp176:
    00000048: 	cmpl	%eax, %ebx
    0000004a: 	setle	%dl
    0000004d: 	cmpl	%eax, %r11d
    00000050: 	setg	%r8b
    00000054: 	orl	%r8d, %edx
    00000057: 	cmpl	%ecx, %esi
    00000059: 	setg	%r8b
    0000005d: 	orb	%r8b, %dl
    00000060: 	jne	.Ltmp175 # Offset: 96
    00000062: 	cmpl	%ecx, %edi
    00000064: 	jle	.Ltmp175 # Offset: 100
    00000066: 	movslq	%ecx, %rdx
    00000069: 	movl	%ecx, %r8d
    0000006c: 	movl	%eax, %r12d
    0000006f: 	imulq	$0x17ad2209, %rdx, %rdx
    00000076: 	sarl	$0x1f, %r8d
    0000007a: 	imulq	$0x24924925, %r12, %r12
    00000081: 	sarq	$0x24, %rdx
    00000085: 	subl	%r8d, %edx
    00000088: 	shrq	$0x20, %r12
    0000008c: 	movslq	%edx, %rdx
    0000008f: 	movl	(%r9,%rdx,4), %r8d
    00000093: 	movl	%eax, %edx
    00000095: 	subl	%r12d, %edx
    00000098: 	shrl	%edx
    0000009a: 	addl	%r12d, %edx
    0000009d: 	shrl	$0x2, %edx
    000000a0: 	movl	%r8d, (%r10,%rdx,4)
.Ltmp175:
    000000a4: 	addl	$0x7, %eax
    000000a7: 	addl	$0xad, %ecx
    000000ad: 	cmpl	%ebp, %eax
    000000af: 	jne	.Ltmp176 # Offset: 175
.Ltmp174:
    000000b1: 	popq	%rbx
    000000b2: 	popq	%rbp
    000000b3: 	popq	%r12
    000000b5: 	retq # Offset: 181
DWARF CFI Instructions:
    <empty>
End of Function "_Z14copyrange_for5IiEvPKT_PS0_iii"

Binary Function "_Z14copyrange_for6IiEvPKT_PS0_iii" after disassembly {
  Number      : 66
  State       : disassembled
  Address     : 0x4050
  Size        : 0xc9
  MaxSize     : 0xd0
  Offset      : 0x4050
  Section     : .text
  Orc Section : .local.text._Z14copyrange_for6IiEvPKT_PS0_iii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB065:
    00000000: 	endbr64
    00000004: 	movl	%edx, %r9d
    00000007: 	leal	-0x1(%rcx), %edx
    0000000a: 	movq	%rsi, %r8
    0000000d: 	cmpl	%r9d, %edx
    00000010: 	jl	.Ltmp177 # Offset: 16
    00000016: 	movq	%r8, %rcx
    00000019: 	movl	%edx, %r10d
    0000001c: 	movslq	%edx, %rax
    0000001f: 	subq	%rdi, %rcx
    00000022: 	subl	%r9d, %r10d
    00000025: 	leaq	(,%rax,4), %rsi
    0000002d: 	addq	$0xc, %rcx
    00000031: 	cmpq	$0x8, %rcx
    00000035: 	jbe	.Ltmp178 # Offset: 53
    0000003b: 	cmpl	$0x2, %r10d
    0000003f: 	jbe	.Ltmp178 # Offset: 63
    00000041: 	addl	$0x1, %r10d
    00000045: 	subq	$0xc, %rsi
    00000049: 	xorl	%eax, %eax
    0000004b: 	movl	%r10d, %ecx
    0000004e: 	leaq	(%rdi,%rsi), %r11
    00000052: 	addq	%r8, %rsi
    00000055: 	shrl	$0x2, %ecx
    00000058: 	negq	%rcx
    0000005b: 	shlq	$0x4, %rcx
    0000005f: 	nop # Size: 1
.Ltmp179:
    00000060: 	movdqu	(%r11,%rax), %xmm0
    00000066: 	movups	%xmm0, (%rsi,%rax)
    0000006a: 	subq	$0x10, %rax
    0000006e: 	cmpq	%rcx, %rax
    00000071: 	jne	.Ltmp179 # Offset: 113
    00000073: 	movl	%r10d, %eax
    00000076: 	andl	$-0x4, %eax
    00000079: 	subl	%eax, %edx
    0000007b: 	cmpl	%eax, %r10d
    0000007e: 	je	.Ltmp177 # Offset: 126
    00000080: 	movslq	%edx, %rax
    00000083: 	movl	(%rdi,%rax,4), %ecx
    00000086: 	movl	%ecx, (%r8,%rax,4)
    0000008a: 	leal	-0x1(%rdx), %eax
    0000008d: 	cmpl	%eax, %r9d
    00000090: 	jg	.Ltmp177 # Offset: 144
    00000092: 	cltq
    00000094: 	subl	$0x2, %edx
    00000097: 	movl	(%rdi,%rax,4), %esi
    0000009a: 	leaq	(,%rax,4), %rcx
    000000a2: 	movl	%esi, (%r8,%rax,4)
    000000a6: 	cmpl	%edx, %r9d
    000000a9: 	jg	.Ltmp177 # Offset: 169
    000000ab: 	movl	-0x4(%rdi,%rcx), %eax
    000000af: 	movl	%eax, -0x4(%r8,%rcx)
    000000b4: 	retq # Offset: 180
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp178:
    000000b8: 	movl	(%rdi,%rax,4), %edx
    000000bb: 	movl	%edx, (%r8,%rax,4)
    000000bf: 	subq	$0x1, %rax
    000000c3: 	cmpl	%eax, %r9d
    000000c6: 	jle	.Ltmp178 # Offset: 198
.Ltmp177:
    000000c8: 	retq # Offset: 200
DWARF CFI Instructions:
    <empty>
End of Function "_Z14copyrange_for6IiEvPKT_PS0_iii"

Binary Function "_Z14copyrange_for7IiEvPKT_PS0_iii" after disassembly {
  Number      : 67
  State       : disassembled
  Address     : 0x4120
  Size        : 0x2c
  MaxSize     : 0x30
  Offset      : 0x4120
  Section     : .text
  Orc Section : .local.text._Z14copyrange_for7IiEvPKT_PS0_iii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB066:
    00000000: 	endbr64
    00000004: 	testl	%r8d, %r8d
    00000007: 	jle	.Ltmp180 # Offset: 7
    00000009: 	movslq	%r8d, %r8
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp182:
    00000010: 	cmpl	%r8d, %ecx
    00000013: 	jle	.Ltmp181 # Offset: 19
    00000015: 	cmpl	%r8d, %edx
    00000018: 	jg	.Ltmp181 # Offset: 24
    0000001a: 	movl	(%rdi,%r8,4), %eax
    0000001e: 	movl	%eax, (%rsi,%r8,4)
.Ltmp181:
    00000022: 	subq	$0x1, %r8
    00000026: 	testl	%r8d, %r8d
    00000029: 	jg	.Ltmp182 # Offset: 41
.Ltmp180:
    0000002b: 	retq # Offset: 43
DWARF CFI Instructions:
    <empty>
End of Function "_Z14copyrange_for7IiEvPKT_PS0_iii"

Binary Function "_Z14copyrange_for8IiEvPKT_PS0_iii" after disassembly {
  Number      : 68
  State       : disassembled
  Address     : 0x4150
  Size        : 0x60
  MaxSize     : 0x60
  Offset      : 0x4150
  Section     : .text
  Orc Section : .local.text._Z14copyrange_for8IiEvPKT_PS0_iii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB067:
    00000000: 	endbr64
    00000004: 	leal	(,%r8,8), %eax
    0000000c: 	leal	(,%rdx,8), %r10d
    00000014: 	leal	(,%rcx,8), %r9d
    0000001c: 	subl	%r8d, %eax
    0000001f: 	subl	%edx, %r10d
    00000022: 	subl	%ecx, %r9d
    00000025: 	testl	%eax, %eax
    00000027: 	jle	.Ltmp183 # Offset: 39
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp185:
    00000030: 	cmpl	%eax, %r9d
    00000033: 	jle	.Ltmp184 # Offset: 51
    00000035: 	cmpl	%eax, %r10d
    00000038: 	jg	.Ltmp184 # Offset: 56
    0000003a: 	movl	%eax, %ecx
    0000003c: 	movl	%eax, %edx
    0000003e: 	imulq	$0x24924925, %rcx, %rcx
    00000045: 	shrq	$0x20, %rcx
    00000049: 	subl	%ecx, %edx
    0000004b: 	shrl	%edx
    0000004d: 	addl	%ecx, %edx
    0000004f: 	shrl	$0x2, %edx
    00000052: 	movl	(%rdi,%rdx,4), %ecx
    00000055: 	movl	%ecx, (%rsi,%rdx,4)
.Ltmp184:
    00000058: 	subl	$0x7, %eax
    0000005b: 	testl	%eax, %eax
    0000005d: 	jg	.Ltmp185 # Offset: 93
.Ltmp183:
    0000005f: 	retq # Offset: 95
DWARF CFI Instructions:
    <empty>
End of Function "_Z14copyrange_for8IiEvPKT_PS0_iii"

Binary Function "_Z16copy_for_unused1IiEvPKT_PS0_i" after disassembly {
  Number      : 69
  State       : disassembled
  Address     : 0x41b0
  Size        : 0xa8
  MaxSize     : 0xb0
  Offset      : 0x41b0
  Section     : .text
  Orc Section : .local.text._Z16copy_for_unused1IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB068:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp186 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp187 # Offset: 29
    0000001f: 	leal	-0x1(%rdx), %eax
    00000022: 	cmpl	$0x2, %eax
    00000025: 	jbe	.Ltmp187 # Offset: 37
    00000027: 	movl	%edx, %edi
    00000029: 	xorl	%eax, %eax
    0000002b: 	shrl	$0x2, %edi
    0000002e: 	shlq	$0x4, %rdi
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp188:
    00000038: 	movdqu	(%rcx,%rax), %xmm0
    0000003d: 	movups	%xmm0, (%rsi,%rax)
    00000041: 	addq	$0x10, %rax
    00000045: 	cmpq	%rdi, %rax
    00000048: 	jne	.Ltmp188 # Offset: 72
    0000004a: 	movl	%edx, %eax
    0000004c: 	andl	$-0x4, %eax
    0000004f: 	testb	$0x3, %dl
    00000052: 	je	.Ltmp186 # Offset: 82
    00000054: 	movl	%eax, %r8d
    00000057: 	movl	(%rcx,%r8,4), %r9d
    0000005b: 	leaq	(,%r8,4), %rdi
    00000063: 	movl	%r9d, (%rsi,%r8,4)
    00000067: 	leal	0x1(%rax), %r8d
    0000006b: 	cmpl	%r8d, %edx
    0000006e: 	jle	.Ltmp186 # Offset: 110
    00000070: 	movl	0x4(%rcx,%rdi), %r8d
    00000075: 	addl	$0x2, %eax
    00000078: 	movl	%r8d, 0x4(%rsi,%rdi)
    0000007d: 	cmpl	%eax, %edx
    0000007f: 	jle	.Ltmp186 # Offset: 127
    00000081: 	movl	0x8(%rcx,%rdi), %eax
    00000085: 	movl	%eax, 0x8(%rsi,%rdi)
    00000089: 	retq # Offset: 137
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp187:
    00000090: 	movl	%edx, %edx
    00000092: 	xorl	%eax, %eax
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp189:
    00000098: 	movl	(%rcx,%rax,4), %edi
    0000009b: 	movl	%edi, (%rsi,%rax,4)
    0000009e: 	addq	$0x1, %rax
    000000a2: 	cmpq	%rdx, %rax
    000000a5: 	jne	.Ltmp189 # Offset: 165
.Ltmp186:
    000000a7: 	retq # Offset: 167
DWARF CFI Instructions:
    <empty>
End of Function "_Z16copy_for_unused1IiEvPKT_PS0_i"

Binary Function "_Z16copy_for_unused2IiEvPKT_PS0_i" after disassembly {
  Number      : 70
  State       : disassembled
  Address     : 0x4260
  Size        : 0xa8
  MaxSize     : 0xb0
  Offset      : 0x4260
  Section     : .text
  Orc Section : .local.text._Z16copy_for_unused2IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB069:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp190 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp191 # Offset: 29
    0000001f: 	leal	-0x1(%rdx), %eax
    00000022: 	cmpl	$0x2, %eax
    00000025: 	jbe	.Ltmp191 # Offset: 37
    00000027: 	movl	%edx, %edi
    00000029: 	xorl	%eax, %eax
    0000002b: 	shrl	$0x2, %edi
    0000002e: 	shlq	$0x4, %rdi
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp192:
    00000038: 	movdqu	(%rcx,%rax), %xmm0
    0000003d: 	movups	%xmm0, (%rsi,%rax)
    00000041: 	addq	$0x10, %rax
    00000045: 	cmpq	%rdi, %rax
    00000048: 	jne	.Ltmp192 # Offset: 72
    0000004a: 	movl	%edx, %eax
    0000004c: 	andl	$-0x4, %eax
    0000004f: 	testb	$0x3, %dl
    00000052: 	je	.Ltmp190 # Offset: 82
    00000054: 	movl	%eax, %r8d
    00000057: 	movl	(%rcx,%r8,4), %r9d
    0000005b: 	leaq	(,%r8,4), %rdi
    00000063: 	movl	%r9d, (%rsi,%r8,4)
    00000067: 	leal	0x1(%rax), %r8d
    0000006b: 	cmpl	%r8d, %edx
    0000006e: 	jle	.Ltmp190 # Offset: 110
    00000070: 	movl	0x4(%rcx,%rdi), %r8d
    00000075: 	addl	$0x2, %eax
    00000078: 	movl	%r8d, 0x4(%rsi,%rdi)
    0000007d: 	cmpl	%eax, %edx
    0000007f: 	jle	.Ltmp190 # Offset: 127
    00000081: 	movl	0x8(%rcx,%rdi), %eax
    00000085: 	movl	%eax, 0x8(%rsi,%rdi)
    00000089: 	retq # Offset: 137
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp191:
    00000090: 	movl	%edx, %edx
    00000092: 	xorl	%eax, %eax
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp193:
    00000098: 	movl	(%rcx,%rax,4), %edi
    0000009b: 	movl	%edi, (%rsi,%rax,4)
    0000009e: 	addq	$0x1, %rax
    000000a2: 	cmpq	%rdx, %rax
    000000a5: 	jne	.Ltmp193 # Offset: 165
.Ltmp190:
    000000a7: 	retq # Offset: 167
DWARF CFI Instructions:
    <empty>
End of Function "_Z16copy_for_unused2IiEvPKT_PS0_i"

Binary Function "_Z16copy_for_unused3IiEvPKT_PS0_i" after disassembly {
  Number      : 71
  State       : disassembled
  Address     : 0x4310
  Size        : 0xa8
  MaxSize     : 0xb0
  Offset      : 0x4310
  Section     : .text
  Orc Section : .local.text._Z16copy_for_unused3IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB070:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp194 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp195 # Offset: 29
    0000001f: 	leal	-0x1(%rdx), %eax
    00000022: 	cmpl	$0x2, %eax
    00000025: 	jbe	.Ltmp195 # Offset: 37
    00000027: 	movl	%edx, %edi
    00000029: 	xorl	%eax, %eax
    0000002b: 	shrl	$0x2, %edi
    0000002e: 	shlq	$0x4, %rdi
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp196:
    00000038: 	movdqu	(%rcx,%rax), %xmm0
    0000003d: 	movups	%xmm0, (%rsi,%rax)
    00000041: 	addq	$0x10, %rax
    00000045: 	cmpq	%rdi, %rax
    00000048: 	jne	.Ltmp196 # Offset: 72
    0000004a: 	movl	%edx, %eax
    0000004c: 	andl	$-0x4, %eax
    0000004f: 	testb	$0x3, %dl
    00000052: 	je	.Ltmp194 # Offset: 82
    00000054: 	movl	%eax, %r8d
    00000057: 	movl	(%rcx,%r8,4), %r9d
    0000005b: 	leaq	(,%r8,4), %rdi
    00000063: 	movl	%r9d, (%rsi,%r8,4)
    00000067: 	leal	0x1(%rax), %r8d
    0000006b: 	cmpl	%r8d, %edx
    0000006e: 	jle	.Ltmp194 # Offset: 110
    00000070: 	movl	0x4(%rcx,%rdi), %r8d
    00000075: 	addl	$0x2, %eax
    00000078: 	movl	%r8d, 0x4(%rsi,%rdi)
    0000007d: 	cmpl	%eax, %edx
    0000007f: 	jle	.Ltmp194 # Offset: 127
    00000081: 	movl	0x8(%rcx,%rdi), %eax
    00000085: 	movl	%eax, 0x8(%rsi,%rdi)
    00000089: 	retq # Offset: 137
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp195:
    00000090: 	movl	%edx, %edx
    00000092: 	xorl	%eax, %eax
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp197:
    00000098: 	movl	(%rcx,%rax,4), %edi
    0000009b: 	movl	%edi, (%rsi,%rax,4)
    0000009e: 	addq	$0x1, %rax
    000000a2: 	cmpq	%rdx, %rax
    000000a5: 	jne	.Ltmp197 # Offset: 165
.Ltmp194:
    000000a7: 	retq # Offset: 167
DWARF CFI Instructions:
    <empty>
End of Function "_Z16copy_for_unused3IiEvPKT_PS0_i"

Binary Function "_Z16copy_for_unused4IiEvPKT_PS0_i" after disassembly {
  Number      : 72
  State       : disassembled
  Address     : 0x43c0
  Size        : 0xa8
  MaxSize     : 0xb0
  Offset      : 0x43c0
  Section     : .text
  Orc Section : .local.text._Z16copy_for_unused4IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB071:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp198 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp199 # Offset: 29
    0000001f: 	leal	-0x1(%rdx), %eax
    00000022: 	cmpl	$0x2, %eax
    00000025: 	jbe	.Ltmp199 # Offset: 37
    00000027: 	movl	%edx, %edi
    00000029: 	xorl	%eax, %eax
    0000002b: 	shrl	$0x2, %edi
    0000002e: 	shlq	$0x4, %rdi
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp200:
    00000038: 	movdqu	(%rcx,%rax), %xmm0
    0000003d: 	movups	%xmm0, (%rsi,%rax)
    00000041: 	addq	$0x10, %rax
    00000045: 	cmpq	%rdi, %rax
    00000048: 	jne	.Ltmp200 # Offset: 72
    0000004a: 	movl	%edx, %eax
    0000004c: 	andl	$-0x4, %eax
    0000004f: 	testb	$0x3, %dl
    00000052: 	je	.Ltmp198 # Offset: 82
    00000054: 	movl	%eax, %r8d
    00000057: 	movl	(%rcx,%r8,4), %r9d
    0000005b: 	leaq	(,%r8,4), %rdi
    00000063: 	movl	%r9d, (%rsi,%r8,4)
    00000067: 	leal	0x1(%rax), %r8d
    0000006b: 	cmpl	%r8d, %edx
    0000006e: 	jle	.Ltmp198 # Offset: 110
    00000070: 	movl	0x4(%rcx,%rdi), %r8d
    00000075: 	addl	$0x2, %eax
    00000078: 	movl	%r8d, 0x4(%rsi,%rdi)
    0000007d: 	cmpl	%eax, %edx
    0000007f: 	jle	.Ltmp198 # Offset: 127
    00000081: 	movl	0x8(%rcx,%rdi), %eax
    00000085: 	movl	%eax, 0x8(%rsi,%rdi)
    00000089: 	retq # Offset: 137
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp199:
    00000090: 	movl	%edx, %edx
    00000092: 	xorl	%eax, %eax
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp201:
    00000098: 	movl	(%rcx,%rax,4), %edi
    0000009b: 	movl	%edi, (%rsi,%rax,4)
    0000009e: 	addq	$0x1, %rax
    000000a2: 	cmpq	%rdx, %rax
    000000a5: 	jne	.Ltmp201 # Offset: 165
.Ltmp198:
    000000a7: 	retq # Offset: 167
DWARF CFI Instructions:
    <empty>
End of Function "_Z16copy_for_unused4IiEvPKT_PS0_i"

Binary Function "_Z16copy_for_unused5IiEvPKT_PS0_i" after disassembly {
  Number      : 73
  State       : disassembled
  Address     : 0x4470
  Size        : 0xa8
  MaxSize     : 0xb0
  Offset      : 0x4470
  Section     : .text
  Orc Section : .local.text._Z16copy_for_unused5IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB072:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp202 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp203 # Offset: 29
    0000001f: 	leal	-0x1(%rdx), %eax
    00000022: 	cmpl	$0x2, %eax
    00000025: 	jbe	.Ltmp203 # Offset: 37
    00000027: 	movl	%edx, %edi
    00000029: 	xorl	%eax, %eax
    0000002b: 	shrl	$0x2, %edi
    0000002e: 	shlq	$0x4, %rdi
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp204:
    00000038: 	movdqu	(%rcx,%rax), %xmm0
    0000003d: 	movups	%xmm0, (%rsi,%rax)
    00000041: 	addq	$0x10, %rax
    00000045: 	cmpq	%rdi, %rax
    00000048: 	jne	.Ltmp204 # Offset: 72
    0000004a: 	movl	%edx, %eax
    0000004c: 	andl	$-0x4, %eax
    0000004f: 	testb	$0x3, %dl
    00000052: 	je	.Ltmp202 # Offset: 82
    00000054: 	movl	%eax, %r8d
    00000057: 	movl	(%rcx,%r8,4), %r9d
    0000005b: 	leaq	(,%r8,4), %rdi
    00000063: 	movl	%r9d, (%rsi,%r8,4)
    00000067: 	leal	0x1(%rax), %r8d
    0000006b: 	cmpl	%r8d, %edx
    0000006e: 	jle	.Ltmp202 # Offset: 110
    00000070: 	movl	0x4(%rcx,%rdi), %r8d
    00000075: 	addl	$0x2, %eax
    00000078: 	movl	%r8d, 0x4(%rsi,%rdi)
    0000007d: 	cmpl	%eax, %edx
    0000007f: 	jle	.Ltmp202 # Offset: 127
    00000081: 	movl	0x8(%rcx,%rdi), %eax
    00000085: 	movl	%eax, 0x8(%rsi,%rdi)
    00000089: 	retq # Offset: 137
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp203:
    00000090: 	movl	%edx, %edx
    00000092: 	xorl	%eax, %eax
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp205:
    00000098: 	movl	(%rcx,%rax,4), %edi
    0000009b: 	movl	%edi, (%rsi,%rax,4)
    0000009e: 	addq	$0x1, %rax
    000000a2: 	cmpq	%rdx, %rax
    000000a5: 	jne	.Ltmp205 # Offset: 165
.Ltmp202:
    000000a7: 	retq # Offset: 167
DWARF CFI Instructions:
    <empty>
End of Function "_Z16copy_for_unused5IiEvPKT_PS0_i"

Binary Function "_Z16copy_for_unused6IiEvPKT_PS0_i" after disassembly {
  Number      : 74
  State       : disassembled
  Address     : 0x4520
  Size        : 0xa8
  MaxSize     : 0xb0
  Offset      : 0x4520
  Section     : .text
  Orc Section : .local.text._Z16copy_for_unused6IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB073:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp206 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp207 # Offset: 29
    0000001f: 	leal	-0x1(%rdx), %eax
    00000022: 	cmpl	$0x2, %eax
    00000025: 	jbe	.Ltmp207 # Offset: 37
    00000027: 	movl	%edx, %edi
    00000029: 	xorl	%eax, %eax
    0000002b: 	shrl	$0x2, %edi
    0000002e: 	shlq	$0x4, %rdi
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp208:
    00000038: 	movdqu	(%rcx,%rax), %xmm0
    0000003d: 	movups	%xmm0, (%rsi,%rax)
    00000041: 	addq	$0x10, %rax
    00000045: 	cmpq	%rdi, %rax
    00000048: 	jne	.Ltmp208 # Offset: 72
    0000004a: 	movl	%edx, %eax
    0000004c: 	andl	$-0x4, %eax
    0000004f: 	testb	$0x3, %dl
    00000052: 	je	.Ltmp206 # Offset: 82
    00000054: 	movl	%eax, %r8d
    00000057: 	movl	(%rcx,%r8,4), %r9d
    0000005b: 	leaq	(,%r8,4), %rdi
    00000063: 	movl	%r9d, (%rsi,%r8,4)
    00000067: 	leal	0x1(%rax), %r8d
    0000006b: 	cmpl	%r8d, %edx
    0000006e: 	jle	.Ltmp206 # Offset: 110
    00000070: 	movl	0x4(%rcx,%rdi), %r8d
    00000075: 	addl	$0x2, %eax
    00000078: 	movl	%r8d, 0x4(%rsi,%rdi)
    0000007d: 	cmpl	%eax, %edx
    0000007f: 	jle	.Ltmp206 # Offset: 127
    00000081: 	movl	0x8(%rcx,%rdi), %eax
    00000085: 	movl	%eax, 0x8(%rsi,%rdi)
    00000089: 	retq # Offset: 137
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp207:
    00000090: 	movl	%edx, %edx
    00000092: 	xorl	%eax, %eax
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp209:
    00000098: 	movl	(%rcx,%rax,4), %edi
    0000009b: 	movl	%edi, (%rsi,%rax,4)
    0000009e: 	addq	$0x1, %rax
    000000a2: 	cmpq	%rdx, %rax
    000000a5: 	jne	.Ltmp209 # Offset: 165
.Ltmp206:
    000000a7: 	retq # Offset: 167
DWARF CFI Instructions:
    <empty>
End of Function "_Z16copy_for_unused6IiEvPKT_PS0_i"

Binary Function "_Z16copy_for_unused7IiEvPKT_PS0_i" after disassembly {
  Number      : 75
  State       : disassembled
  Address     : 0x45d0
  Size        : 0xa8
  MaxSize     : 0xb0
  Offset      : 0x45d0
  Section     : .text
  Orc Section : .local.text._Z16copy_for_unused7IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB074:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp210 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp211 # Offset: 29
    0000001f: 	leal	-0x1(%rdx), %eax
    00000022: 	cmpl	$0x2, %eax
    00000025: 	jbe	.Ltmp211 # Offset: 37
    00000027: 	movl	%edx, %edi
    00000029: 	xorl	%eax, %eax
    0000002b: 	shrl	$0x2, %edi
    0000002e: 	shlq	$0x4, %rdi
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp212:
    00000038: 	movdqu	(%rcx,%rax), %xmm0
    0000003d: 	movups	%xmm0, (%rsi,%rax)
    00000041: 	addq	$0x10, %rax
    00000045: 	cmpq	%rdi, %rax
    00000048: 	jne	.Ltmp212 # Offset: 72
    0000004a: 	movl	%edx, %eax
    0000004c: 	andl	$-0x4, %eax
    0000004f: 	testb	$0x3, %dl
    00000052: 	je	.Ltmp210 # Offset: 82
    00000054: 	movl	%eax, %r8d
    00000057: 	movl	(%rcx,%r8,4), %r9d
    0000005b: 	leaq	(,%r8,4), %rdi
    00000063: 	movl	%r9d, (%rsi,%r8,4)
    00000067: 	leal	0x1(%rax), %r8d
    0000006b: 	cmpl	%r8d, %edx
    0000006e: 	jle	.Ltmp210 # Offset: 110
    00000070: 	movl	0x4(%rcx,%rdi), %r8d
    00000075: 	addl	$0x2, %eax
    00000078: 	movl	%r8d, 0x4(%rsi,%rdi)
    0000007d: 	cmpl	%eax, %edx
    0000007f: 	jle	.Ltmp210 # Offset: 127
    00000081: 	movl	0x8(%rcx,%rdi), %eax
    00000085: 	movl	%eax, 0x8(%rsi,%rdi)
    00000089: 	retq # Offset: 137
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp211:
    00000090: 	movl	%edx, %edx
    00000092: 	xorl	%eax, %eax
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp213:
    00000098: 	movl	(%rcx,%rax,4), %edi
    0000009b: 	movl	%edi, (%rsi,%rax,4)
    0000009e: 	addq	$0x1, %rax
    000000a2: 	cmpq	%rdx, %rax
    000000a5: 	jne	.Ltmp213 # Offset: 165
.Ltmp210:
    000000a7: 	retq # Offset: 167
DWARF CFI Instructions:
    <empty>
End of Function "_Z16copy_for_unused7IiEvPKT_PS0_i"

Binary Function "_Z16copy_for_reduce1IiEvPKT_PS0_i" after disassembly {
  Number      : 76
  State       : disassembled
  Address     : 0x4680
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x4680
  Section     : .text
  Orc Section : .local.text._Z16copy_for_reduce1IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB075:
    00000000: 	endbr64
    00000004: 	testl	%edx, %edx
    00000006: 	jle	.Ltmp214 # Offset: 6
    00000008: 	shll	$0x2, %edx
    0000000b: 	xorl	%ecx, %ecx
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp215:
    00000010: 	leal	(%rcx,%rcx), %eax
    00000013: 	sarl	$0x3, %eax
    00000016: 	cltq
    00000018: 	movl	(%rdi,%rax,4), %r8d
    0000001c: 	movl	%ecx, %eax
    0000001e: 	addl	$0x4, %ecx
    00000021: 	sarl	$0x2, %eax
    00000024: 	cltq
    00000026: 	movl	%r8d, (%rsi,%rax,4)
    0000002a: 	cmpl	%ecx, %edx
    0000002c: 	jne	.Ltmp215 # Offset: 44
.Ltmp214:
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_Z16copy_for_reduce1IiEvPKT_PS0_i"

Binary Function "_Z16copy_for_reduce2IiEvPKT_PS0_i" after disassembly {
  Number      : 77
  State       : disassembled
  Address     : 0x46b0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x46b0
  Section     : .text
  Orc Section : .local.text._Z16copy_for_reduce2IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB076:
    00000000: 	endbr64
    00000004: 	testl	%edx, %edx
    00000006: 	jle	.Ltmp216 # Offset: 6
    00000008: 	shll	$0x2, %edx
    0000000b: 	xorl	%ecx, %ecx
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp217:
    00000010: 	leal	(%rcx,%rcx), %eax
    00000013: 	sarl	$0x3, %eax
    00000016: 	cltq
    00000018: 	movl	(%rdi,%rax,4), %r8d
    0000001c: 	movl	%ecx, %eax
    0000001e: 	addl	$0x4, %ecx
    00000021: 	sarl	$0x2, %eax
    00000024: 	cltq
    00000026: 	movl	%r8d, (%rsi,%rax,4)
    0000002a: 	cmpl	%ecx, %edx
    0000002c: 	jne	.Ltmp217 # Offset: 44
.Ltmp216:
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_Z16copy_for_reduce2IiEvPKT_PS0_i"

Binary Function "_Z16copy_for_reduce3IiEvPKT_PS0_i" after disassembly {
  Number      : 78
  State       : disassembled
  Address     : 0x46e0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x46e0
  Section     : .text
  Orc Section : .local.text._Z16copy_for_reduce3IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB077:
    00000000: 	endbr64
    00000004: 	testl	%edx, %edx
    00000006: 	jle	.Ltmp218 # Offset: 6
    00000008: 	shll	$0x2, %edx
    0000000b: 	xorl	%ecx, %ecx
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp219:
    00000010: 	leal	(%rcx,%rcx), %eax
    00000013: 	sarl	$0x3, %eax
    00000016: 	cltq
    00000018: 	movl	(%rdi,%rax,4), %r8d
    0000001c: 	movl	%ecx, %eax
    0000001e: 	addl	$0x4, %ecx
    00000021: 	sarl	$0x2, %eax
    00000024: 	cltq
    00000026: 	movl	%r8d, (%rsi,%rax,4)
    0000002a: 	cmpl	%ecx, %edx
    0000002c: 	jne	.Ltmp219 # Offset: 44
.Ltmp218:
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_Z16copy_for_reduce3IiEvPKT_PS0_i"

Binary Function "_Z16copy_for_reduce4IiEvPKT_PS0_i" after disassembly {
  Number      : 79
  State       : disassembled
  Address     : 0x4710
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x4710
  Section     : .text
  Orc Section : .local.text._Z16copy_for_reduce4IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB078:
    00000000: 	endbr64
    00000004: 	testl	%edx, %edx
    00000006: 	jle	.Ltmp220 # Offset: 6
    00000008: 	shll	$0x2, %edx
    0000000b: 	xorl	%ecx, %ecx
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp221:
    00000010: 	leal	(%rcx,%rcx), %eax
    00000013: 	sarl	$0x3, %eax
    00000016: 	cltq
    00000018: 	movl	(%rdi,%rax,4), %r8d
    0000001c: 	movl	%ecx, %eax
    0000001e: 	addl	$0x4, %ecx
    00000021: 	sarl	$0x2, %eax
    00000024: 	cltq
    00000026: 	movl	%r8d, (%rsi,%rax,4)
    0000002a: 	cmpl	%ecx, %edx
    0000002c: 	jne	.Ltmp221 # Offset: 44
.Ltmp220:
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_Z16copy_for_reduce4IiEvPKT_PS0_i"

Binary Function "_Z16copy_for_reduce5IiEvPKT_PS0_i" after disassembly {
  Number      : 80
  State       : disassembled
  Address     : 0x4740
  Size        : 0x46
  MaxSize     : 0x50
  Offset      : 0x4740
  Section     : .text
  Orc Section : .local.text._Z16copy_for_reduce5IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB079:
    00000000: 	endbr64
    00000004: 	testl	%edx, %edx
    00000006: 	jle	.Ltmp222 # Offset: 6
    00000008: 	leal	0x4(,%rdx,4), %r9d
    00000010: 	movl	$0x4, %eax
    00000015: 	movl	$0x18, %ecx
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp223:
    00000020: 	movl	%ecx, %edx
    00000022: 	addl	$0x8, %ecx
    00000025: 	sarl	$0x3, %edx
    00000028: 	movslq	%edx, %rdx
    0000002b: 	movl	-0xc(%rdi,%rdx,4), %r8d
    00000030: 	movl	%eax, %edx
    00000032: 	addl	$0x4, %eax
    00000035: 	sarl	$0x2, %edx
    00000038: 	movslq	%edx, %rdx
    0000003b: 	movl	%r8d, -0x4(%rsi,%rdx,4)
    00000040: 	cmpl	%eax, %r9d
    00000043: 	jne	.Ltmp223 # Offset: 67
.Ltmp222:
    00000045: 	retq # Offset: 69
DWARF CFI Instructions:
    <empty>
End of Function "_Z16copy_for_reduce5IiEvPKT_PS0_i"

Binary Function "_Z16copy_for_reduce6IiEvPKT_PS0_i" after disassembly {
  Number      : 81
  State       : disassembled
  Address     : 0x4790
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x4790
  Section     : .text
  Orc Section : .local.text._Z16copy_for_reduce6IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB080:
    00000000: 	endbr64
    00000004: 	testl	%edx, %edx
    00000006: 	jle	.Ltmp224 # Offset: 6
    00000008: 	shll	$0x2, %edx
    0000000b: 	xorl	%ecx, %ecx
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp225:
    00000010: 	leal	(%rcx,%rcx), %eax
    00000013: 	sarl	$0x3, %eax
    00000016: 	cltq
    00000018: 	movl	(%rdi,%rax,4), %r8d
    0000001c: 	movl	%ecx, %eax
    0000001e: 	addl	$0x4, %ecx
    00000021: 	sarl	$0x2, %eax
    00000024: 	cltq
    00000026: 	movl	%r8d, (%rsi,%rax,4)
    0000002a: 	cmpl	%ecx, %edx
    0000002c: 	jne	.Ltmp225 # Offset: 44
.Ltmp224:
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_Z16copy_for_reduce6IiEvPKT_PS0_i"

Binary Function "_Z16copy_for_reduce7IiEvPKT_PS0_i" after disassembly {
  Number      : 82
  State       : disassembled
  Address     : 0x47c0
  Size        : 0x46
  MaxSize     : 0x50
  Offset      : 0x47c0
  Section     : .text
  Orc Section : .local.text._Z16copy_for_reduce7IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB081:
    00000000: 	endbr64
    00000004: 	testl	%edx, %edx
    00000006: 	jle	.Ltmp226 # Offset: 6
    00000008: 	leal	0xc(,%rdx,4), %r9d
    00000010: 	movl	$0xc, %eax
    00000015: 	movl	$0x20, %ecx
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp227:
    00000020: 	movl	%ecx, %edx
    00000022: 	addl	$0x8, %ecx
    00000025: 	sarl	$0x3, %edx
    00000028: 	movslq	%edx, %rdx
    0000002b: 	movl	-0x10(%rdi,%rdx,4), %r8d
    00000030: 	movl	%eax, %edx
    00000032: 	addl	$0x4, %eax
    00000035: 	sarl	$0x2, %edx
    00000038: 	movslq	%edx, %rdx
    0000003b: 	movl	%r8d, -0xc(%rsi,%rdx,4)
    00000040: 	cmpl	%eax, %r9d
    00000043: 	jne	.Ltmp227 # Offset: 67
.Ltmp226:
    00000045: 	retq # Offset: 69
DWARF CFI Instructions:
    <empty>
End of Function "_Z16copy_for_reduce7IiEvPKT_PS0_i"

Binary Function "_Z16copy_for_reduce8IiEvPKT_PS0_i" after disassembly {
  Number      : 83
  State       : disassembled
  Address     : 0x4810
  Size        : 0x46
  MaxSize     : 0x50
  Offset      : 0x4810
  Section     : .text
  Orc Section : .local.text._Z16copy_for_reduce8IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB082:
    00000000: 	endbr64
    00000004: 	testl	%edx, %edx
    00000006: 	jle	.Ltmp228 # Offset: 6
    00000008: 	leal	0xc(,%rdx,4), %r9d
    00000010: 	movl	$0xc, %eax
    00000015: 	movl	$0x20, %ecx
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp229:
    00000020: 	movl	%ecx, %edx
    00000022: 	addl	$0x8, %ecx
    00000025: 	sarl	$0x3, %edx
    00000028: 	movslq	%edx, %rdx
    0000002b: 	movl	-0x10(%rdi,%rdx,4), %r8d
    00000030: 	movl	%eax, %edx
    00000032: 	addl	$0x4, %eax
    00000035: 	sarl	$0x2, %edx
    00000038: 	movslq	%edx, %rdx
    0000003b: 	movl	%r8d, -0xc(%rsi,%rdx,4)
    00000040: 	cmpl	%eax, %r9d
    00000043: 	jne	.Ltmp229 # Offset: 67
.Ltmp228:
    00000045: 	retq # Offset: 69
DWARF CFI Instructions:
    <empty>
End of Function "_Z16copy_for_reduce8IiEvPKT_PS0_i"

Binary Function "_Z8copy_do1IiEvPKT_PS0_i" after disassembly {
  Number      : 84
  State       : disassembled
  Address     : 0x4860
  Size        : 0xa8
  MaxSize     : 0xb0
  Offset      : 0x4860
  Section     : .text
  Orc Section : .local.text._Z8copy_do1IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB083:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp230 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp231 # Offset: 29
    0000001f: 	leal	-0x1(%rdx), %eax
    00000022: 	cmpl	$0x2, %eax
    00000025: 	jbe	.Ltmp231 # Offset: 37
    00000027: 	movl	%edx, %edi
    00000029: 	xorl	%eax, %eax
    0000002b: 	shrl	$0x2, %edi
    0000002e: 	shlq	$0x4, %rdi
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp232:
    00000038: 	movdqu	(%rcx,%rax), %xmm0
    0000003d: 	movups	%xmm0, (%rsi,%rax)
    00000041: 	addq	$0x10, %rax
    00000045: 	cmpq	%rdi, %rax
    00000048: 	jne	.Ltmp232 # Offset: 72
    0000004a: 	movl	%edx, %eax
    0000004c: 	andl	$-0x4, %eax
    0000004f: 	testb	$0x3, %dl
    00000052: 	je	.Ltmp230 # Offset: 82
    00000054: 	movl	%eax, %r8d
    00000057: 	movl	(%rcx,%r8,4), %r9d
    0000005b: 	leaq	(,%r8,4), %rdi
    00000063: 	movl	%r9d, (%rsi,%r8,4)
    00000067: 	leal	0x1(%rax), %r8d
    0000006b: 	cmpl	%r8d, %edx
    0000006e: 	jle	.Ltmp230 # Offset: 110
    00000070: 	movl	0x4(%rcx,%rdi), %r8d
    00000075: 	addl	$0x2, %eax
    00000078: 	movl	%r8d, 0x4(%rsi,%rdi)
    0000007d: 	cmpl	%eax, %edx
    0000007f: 	jle	.Ltmp230 # Offset: 127
    00000081: 	movl	0x8(%rcx,%rdi), %eax
    00000085: 	movl	%eax, 0x8(%rsi,%rdi)
    00000089: 	retq # Offset: 137
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp231:
    00000090: 	movl	%edx, %edx
    00000092: 	xorl	%eax, %eax
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp233:
    00000098: 	movl	(%rcx,%rax,4), %edi
    0000009b: 	movl	%edi, (%rsi,%rax,4)
    0000009e: 	addq	$0x1, %rax
    000000a2: 	cmpq	%rdx, %rax
    000000a5: 	jne	.Ltmp233 # Offset: 165
.Ltmp230:
    000000a7: 	retq # Offset: 167
DWARF CFI Instructions:
    <empty>
End of Function "_Z8copy_do1IiEvPKT_PS0_i"

Binary Function "_Z8copy_do2IiEvPKT_PS0_i" after disassembly {
  Number      : 85
  State       : disassembled
  Address     : 0x4910
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x4910
  Section     : .text
  Orc Section : .local.text._Z8copy_do2IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB084:
    00000000: 	endbr64
    00000004: 	testl	%edx, %edx
    00000006: 	jle	.Ltmp234 # Offset: 6
    00000008: 	addl	%edx, %edx
    0000000a: 	xorl	%ecx, %ecx
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp235:
    00000010: 	movl	%ecx, %eax
    00000012: 	addl	$0x2, %ecx
    00000015: 	sarl	%eax
    00000017: 	cltq
    00000019: 	movl	(%rdi,%rax,4), %r8d
    0000001d: 	movl	%r8d, (%rsi,%rax,4)
    00000021: 	cmpl	%edx, %ecx
    00000023: 	jne	.Ltmp235 # Offset: 35
.Ltmp234:
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_Z8copy_do2IiEvPKT_PS0_i"

Binary Function "_Z8copy_do3IiEvPKT_PS0_i" after disassembly {
  Number      : 86
  State       : disassembled
  Address     : 0x4940
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x4940
  Section     : .text
  Orc Section : .local.text._Z8copy_do3IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB085:
    00000000: 	endbr64
    00000004: 	testl	%edx, %edx
    00000006: 	jle	.Ltmp236 # Offset: 6
    00000008: 	leal	(%rdx,%rdx,2), %r9d
    0000000c: 	movl	$0xaaaaaaab, %r8d
    00000012: 	xorl	%edx, %edx
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp237:
    00000018: 	movl	%edx, %eax
    0000001a: 	addl	$0x3, %edx
    0000001d: 	imulq	%r8, %rax
    00000021: 	shrq	$0x21, %rax
    00000025: 	movl	(%rdi,%rax,4), %ecx
    00000028: 	movl	%ecx, (%rsi,%rax,4)
    0000002b: 	cmpl	%r9d, %edx
    0000002e: 	jne	.Ltmp237 # Offset: 46
.Ltmp236:
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z8copy_do3IiEvPKT_PS0_i"

Binary Function "_Z8copy_do4IiEvPKT_PS0_i" after disassembly {
  Number      : 87
  State       : disassembled
  Address     : 0x4980
  Size        : 0x41
  MaxSize     : 0x50
  Offset      : 0x4980
  Section     : .text
  Orc Section : .local.text._Z8copy_do4IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB086:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp238 # Offset: 9
    0000000b: 	imull	$0xad, %edx, %edx
    00000011: 	xorl	%ecx, %ecx
    00000013: 	nopl	(%rax,%rax) # Size: 5
.Ltmp239:
    00000018: 	movslq	%ecx, %rax
    0000001b: 	movl	%ecx, %edi
    0000001d: 	addl	$0xad, %ecx
    00000023: 	imulq	$0x17ad2209, %rax, %rax
    0000002a: 	sarl	$0x1f, %edi
    0000002d: 	sarq	$0x24, %rax
    00000031: 	subl	%edi, %eax
    00000033: 	cltq
    00000035: 	movl	(%r8,%rax,4), %edi
    00000039: 	movl	%edi, (%rsi,%rax,4)
    0000003c: 	cmpl	%edx, %ecx
    0000003e: 	jne	.Ltmp239 # Offset: 62
.Ltmp238:
    00000040: 	retq # Offset: 64
DWARF CFI Instructions:
    <empty>
End of Function "_Z8copy_do4IiEvPKT_PS0_i"

Binary Function "_Z8copy_do5IiEvPKT_PS0_i" after disassembly {
  Number      : 88
  State       : disassembled
  Address     : 0x49d0
  Size        : 0x57
  MaxSize     : 0x60
  Offset      : 0x49d0
  Section     : .text
  Orc Section : .local.text._Z8copy_do5IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB087:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp240 # Offset: 9
    0000000b: 	leal	(%rdx,%rdx,2), %r10d
    0000000f: 	xorl	%ecx, %ecx
    00000011: 	xorl	%edx, %edx
    00000013: 	movl	$0xaaaaaaab, %r9d
    00000019: 	nopl	(%rax) # Size: 7
.Ltmp241:
    00000020: 	movslq	%ecx, %rax
    00000023: 	movl	%ecx, %esi
    00000025: 	addl	$0xad, %ecx
    0000002b: 	imulq	$0x17ad2209, %rax, %rax
    00000032: 	sarl	$0x1f, %esi
    00000035: 	sarq	$0x24, %rax
    00000039: 	subl	%esi, %eax
    0000003b: 	cltq
    0000003d: 	movl	(%rdi,%rax,4), %esi
    00000040: 	movl	%edx, %eax
    00000042: 	addl	$0x3, %edx
    00000045: 	imulq	%r9, %rax
    00000049: 	shrq	$0x21, %rax
    0000004d: 	movl	%esi, (%r8,%rax,4)
    00000051: 	cmpl	%r10d, %edx
    00000054: 	jne	.Ltmp241 # Offset: 84
.Ltmp240:
    00000056: 	retq # Offset: 86
DWARF CFI Instructions:
    <empty>
End of Function "_Z8copy_do5IiEvPKT_PS0_i"

Binary Function "_Z8copy_do6IiEvPKT_PS0_i" after disassembly {
  Number      : 89
  State       : disassembled
  Address     : 0x4a30
  Size        : 0xc0
  MaxSize     : 0xc0
  Offset      : 0x4a30
  Section     : .text
  Orc Section : .local.text._Z8copy_do6IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB088:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp242 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp243 # Offset: 29
    00000023: 	leal	-0x1(%rdx), %eax
    00000026: 	cmpl	$0x2, %eax
    00000029: 	jbe	.Ltmp243 # Offset: 41
    0000002b: 	movl	%edx, %edi
    0000002d: 	xorl	%eax, %eax
    0000002f: 	shrl	$0x2, %edi
    00000032: 	shlq	$0x4, %rdi
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp244:
    00000040: 	movdqu	(%rcx,%rax), %xmm0
    00000045: 	movups	%xmm0, (%rsi,%rax)
    00000049: 	addq	$0x10, %rax
    0000004d: 	cmpq	%rdi, %rax
    00000050: 	jne	.Ltmp244 # Offset: 80
    00000052: 	movl	%edx, %edi
    00000054: 	andl	$-0x4, %edi
    00000057: 	leal	0x2(%rdi), %r8d
    0000005b: 	leal	0x63(%rdi), %eax
    0000005e: 	cmpl	%edi, %edx
    00000060: 	je	.Ltmp242 # Offset: 96
    00000062: 	cltq
    00000064: 	addl	$0x1, %edi
    00000067: 	shlq	$0x2, %rax
    0000006b: 	movl	-0x18c(%rcx,%rax), %r9d
    00000073: 	movl	%r9d, -0x18c(%rsi,%rax)
    0000007b: 	cmpl	%edi, %edx
    0000007d: 	jle	.Ltmp242 # Offset: 125
    0000007f: 	movl	-0x188(%rcx,%rax), %edi
    00000086: 	movl	%edi, -0x188(%rsi,%rax)
    0000008d: 	cmpl	%r8d, %edx
    00000090: 	jle	.Ltmp242 # Offset: 144
    00000092: 	movl	-0x184(%rcx,%rax), %edx
    00000099: 	movl	%edx, -0x184(%rsi,%rax)
    000000a0: 	retq # Offset: 160
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp243:
    000000a8: 	movl	%edx, %edx
    000000aa: 	xorl	%eax, %eax
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp245:
    000000b0: 	movl	(%rcx,%rax,4), %edi
    000000b3: 	movl	%edi, (%rsi,%rax,4)
    000000b6: 	addq	$0x1, %rax
    000000ba: 	cmpq	%rax, %rdx
    000000bd: 	jne	.Ltmp245 # Offset: 189
.Ltmp242:
    000000bf: 	retq # Offset: 191
DWARF CFI Instructions:
    <empty>
End of Function "_Z8copy_do6IiEvPKT_PS0_i"

Binary Function "_Z8copy_do7IiEvPKT_PS0_i" after disassembly {
  Number      : 90
  State       : disassembled
  Address     : 0x4af0
  Size        : 0xc0
  MaxSize     : 0xc0
  Offset      : 0x4af0
  Section     : .text
  Orc Section : .local.text._Z8copy_do7IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB089:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp246 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp247 # Offset: 29
    00000023: 	leal	-0x1(%rdx), %eax
    00000026: 	cmpl	$0x2, %eax
    00000029: 	jbe	.Ltmp247 # Offset: 41
    0000002b: 	movl	%edx, %edi
    0000002d: 	xorl	%eax, %eax
    0000002f: 	shrl	$0x2, %edi
    00000032: 	shlq	$0x4, %rdi
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp248:
    00000040: 	movdqu	(%rcx,%rax), %xmm0
    00000045: 	movups	%xmm0, (%rsi,%rax)
    00000049: 	addq	$0x10, %rax
    0000004d: 	cmpq	%rdi, %rax
    00000050: 	jne	.Ltmp248 # Offset: 80
    00000052: 	movl	%edx, %eax
    00000054: 	andl	$-0x4, %eax
    00000057: 	leal	0x63(%rax), %edi
    0000005a: 	cmpl	%eax, %edx
    0000005c: 	je	.Ltmp246 # Offset: 92
    0000005e: 	movslq	%edi, %rdi
    00000061: 	movl	%eax, %r8d
    00000064: 	movl	-0x18c(%rcx,%rdi,4), %edi
    0000006b: 	leaq	(,%r8,4), %r9
    00000073: 	movl	%edi, (%rsi,%r8,4)
    00000077: 	leal	0x1(%rax), %edi
    0000007a: 	cmpl	%edi, %edx
    0000007c: 	jle	.Ltmp246 # Offset: 124
    0000007e: 	movl	0x4(%rcx,%r9), %r8d
    00000083: 	movslq	%edi, %rdi
    00000086: 	addl	$0x2, %eax
    00000089: 	leaq	(,%rdi,4), %r10
    00000091: 	movl	%r8d, (%rsi,%rdi,4)
    00000095: 	cmpl	%eax, %edx
    00000097: 	jle	.Ltmp246 # Offset: 151
    00000099: 	movl	0x4(%rcx,%r10), %edx
    0000009e: 	cltq
    000000a0: 	movl	%edx, (%rsi,%rax,4)
    000000a3: 	retq # Offset: 163
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp247:
    000000a8: 	movl	%edx, %edx
    000000aa: 	xorl	%eax, %eax
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp249:
    000000b0: 	movl	(%rcx,%rax,4), %edi
    000000b3: 	movl	%edi, (%rsi,%rax,4)
    000000b6: 	addq	$0x1, %rax
    000000ba: 	cmpq	%rax, %rdx
    000000bd: 	jne	.Ltmp249 # Offset: 189
.Ltmp246:
    000000bf: 	retq # Offset: 191
DWARF CFI Instructions:
    <empty>
End of Function "_Z8copy_do7IiEvPKT_PS0_i"

Binary Function "_Z8copy_do8IiEvPKT_PS0_i" after disassembly {
  Number      : 91
  State       : disassembled
  Address     : 0x4bb0
  Size        : 0x57
  MaxSize     : 0x60
  Offset      : 0x4bb0
  Section     : .text
  Orc Section : .local.text._Z8copy_do8IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB090:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp250 # Offset: 9
    0000000b: 	leal	(%rdx,%rdx,2), %r10d
    0000000f: 	xorl	%ecx, %ecx
    00000011: 	xorl	%edx, %edx
    00000013: 	movl	$0xaaaaaaab, %r9d
    00000019: 	nopl	(%rax) # Size: 7
.Ltmp251:
    00000020: 	movslq	%edx, %rax
    00000023: 	movl	%edx, %esi
    00000025: 	addl	$0xad, %edx
    0000002b: 	imulq	$0x17ad2209, %rax, %rax
    00000032: 	sarl	$0x1f, %esi
    00000035: 	sarq	$0x24, %rax
    00000039: 	subl	%esi, %eax
    0000003b: 	cltq
    0000003d: 	movl	(%rdi,%rax,4), %esi
    00000040: 	movl	%ecx, %eax
    00000042: 	addl	$0x3, %ecx
    00000045: 	imulq	%r9, %rax
    00000049: 	shrq	$0x21, %rax
    0000004d: 	movl	%esi, (%r8,%rax,4)
    00000051: 	cmpl	%ecx, %r10d
    00000054: 	jne	.Ltmp251 # Offset: 84
.Ltmp250:
    00000056: 	retq # Offset: 86
DWARF CFI Instructions:
    <empty>
End of Function "_Z8copy_do8IiEvPKT_PS0_i"

Binary Function "_Z8copy_do9IiEvPKT_PS0_i" after disassembly {
  Number      : 92
  State       : disassembled
  Address     : 0x4c10
  Size        : 0xe0
  MaxSize     : 0xe0
  Offset      : 0x4c10
  Section     : .text
  Orc Section : .local.text._Z8copy_do9IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB091:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp252 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp253 # Offset: 29
    00000023: 	leal	-0x1(%rdx), %eax
    00000026: 	cmpl	$0x2, %eax
    00000029: 	jbe	.Ltmp253 # Offset: 41
    0000002f: 	movl	%edx, %edi
    00000031: 	xorl	%eax, %eax
    00000033: 	shrl	$0x2, %edi
    00000036: 	shlq	$0x4, %rdi
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp254:
    00000040: 	movdqu	(%rcx,%rax), %xmm0
    00000045: 	movups	%xmm0, (%rsi,%rax)
    00000049: 	addq	$0x10, %rax
    0000004d: 	cmpq	%rdi, %rax
    00000050: 	jne	.Ltmp254 # Offset: 80
    00000052: 	movl	%edx, %eax
    00000054: 	andl	$-0x4, %eax
    00000057: 	leal	-0xff(%rax), %edi
    0000005d: 	cmpl	%eax, %edx
    0000005f: 	je	.Ltmp252 # Offset: 95
    00000061: 	movslq	%edi, %rdi
    00000064: 	shlq	$0x2, %rdi
    00000068: 	movl	0x3fc(%rcx,%rdi), %r8d
    00000070: 	movl	%r8d, 0x3fc(%rsi,%rdi)
    00000078: 	leal	0x1(%rax), %r8d
    0000007c: 	leal	-0xfe(%rax), %edi
    00000082: 	cmpl	%r8d, %edx
    00000085: 	jle	.Ltmp252 # Offset: 133
    00000087: 	movslq	%edi, %rdi
    0000008a: 	shlq	$0x2, %rdi
    0000008e: 	movl	0x3fc(%rcx,%rdi), %r8d
    00000096: 	movl	%r8d, 0x3fc(%rsi,%rdi)
    0000009e: 	leal	-0xfd(%rax), %edi
    000000a4: 	addl	$0x2, %eax
    000000a7: 	cmpl	%eax, %edx
    000000a9: 	jle	.Ltmp252 # Offset: 169
    000000ab: 	movslq	%edi, %rax
    000000ae: 	shlq	$0x2, %rax
    000000b2: 	movl	0x3fc(%rcx,%rax), %edx
    000000b9: 	movl	%edx, 0x3fc(%rsi,%rax)
    000000c0: 	retq # Offset: 192
    000000c1: 	nopl	(%rax) # Size: 7
.Ltmp253:
    000000c8: 	movl	%edx, %edx
    000000ca: 	xorl	%eax, %eax
    000000cc: 	nopl	(%rax) # Size: 4
.Ltmp255:
    000000d0: 	movl	(%rcx,%rax,4), %edi
    000000d3: 	movl	%edi, (%rsi,%rax,4)
    000000d6: 	addq	$0x1, %rax
    000000da: 	cmpq	%rax, %rdx
    000000dd: 	jne	.Ltmp255 # Offset: 221
.Ltmp252:
    000000df: 	retq # Offset: 223
DWARF CFI Instructions:
    <empty>
End of Function "_Z8copy_do9IiEvPKT_PS0_i"

Binary Function "_Z9copy_do10IiEvPKT_PS0_i" after disassembly {
  Number      : 93
  State       : disassembled
  Address     : 0x4cf0
  Size        : 0x67
  MaxSize     : 0x70
  Offset      : 0x4cf0
  Section     : .text
  Orc Section : .local.text._Z9copy_do10IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB092:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp256 # Offset: 9
    0000000b: 	leal	0x129(%rdx,%rdx,2), %r10d
    00000013: 	movl	$0xffff53ad, %ecx
    00000018: 	movl	$0x129, %edx
    0000001d: 	movl	$0xaaaaaaab, %r9d
    00000023: 	nopl	(%rax,%rax) # Size: 5
.Ltmp257:
    00000028: 	movslq	%ecx, %rax
    0000002b: 	movl	%ecx, %esi
    0000002d: 	addl	$0xad, %ecx
    00000033: 	imulq	$0x17ad2209, %rax, %rax
    0000003a: 	sarl	$0x1f, %esi
    0000003d: 	sarq	$0x24, %rax
    00000041: 	subl	%esi, %eax
    00000043: 	cltq
    00000045: 	movl	0x3fc(%rdi,%rax,4), %esi
    0000004c: 	movl	%edx, %eax
    0000004e: 	addl	$0x3, %edx
    00000051: 	imulq	%r9, %rax
    00000055: 	shrq	$0x21, %rax
    00000059: 	movl	%esi, -0x18c(%r8,%rax,4)
    00000061: 	cmpl	%r10d, %edx
    00000064: 	jne	.Ltmp257 # Offset: 100
.Ltmp256:
    00000066: 	retq # Offset: 102
DWARF CFI Instructions:
    <empty>
End of Function "_Z9copy_do10IiEvPKT_PS0_i"

Binary Function "_Z9copy_do12IiEvPKT_PS0_i" after disassembly {
  Number      : 94
  State       : disassembled
  Address     : 0x4d60
  Size        : 0x32
  MaxSize     : 0x40
  Offset      : 0x4d60
  Section     : .text
  Orc Section : .local.text._Z9copy_do12IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB093:
    00000000: 	endbr64
    00000004: 	testl	%edx, %edx
    00000006: 	jle	.Ltmp258 # Offset: 6
    00000008: 	shll	$0x8, %edx
    0000000b: 	xorl	%ecx, %ecx
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp259:
    00000010: 	leal	(%rcx,%rcx), %eax
    00000013: 	sarl	$0x9, %eax
    00000016: 	cltq
    00000018: 	movl	(%rdi,%rax,4), %r8d
    0000001c: 	movl	%ecx, %eax
    0000001e: 	addl	$0x100, %ecx
    00000024: 	sarl	$0x8, %eax
    00000027: 	cltq
    00000029: 	movl	%r8d, (%rsi,%rax,4)
    0000002d: 	cmpl	%ecx, %edx
    0000002f: 	jne	.Ltmp259 # Offset: 47
.Ltmp258:
    00000031: 	retq # Offset: 49
DWARF CFI Instructions:
    <empty>
End of Function "_Z9copy_do12IiEvPKT_PS0_i"

Binary Function "_Z9copy_do13IiEvPKT_PS0_i" after disassembly {
  Number      : 95
  State       : disassembled
  Address     : 0x4da0
  Size        : 0x4e
  MaxSize     : 0x50
  Offset      : 0x4da0
  Section     : .text
  Orc Section : .local.text._Z9copy_do13IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB094:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp260 # Offset: 9
    0000000b: 	addl	$0x3d, %edx
    0000000e: 	movl	$0x3d00, %ecx
    00000013: 	movl	$0xffffde00, %edi
    00000018: 	shll	$0x8, %edx
    0000001b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp261:
    00000020: 	movl	%edi, %eax
    00000022: 	addl	$0x200, %edi
    00000028: 	sarl	$0x9, %eax
    0000002b: 	addl	$0x11, %eax
    0000002e: 	cltq
    00000030: 	movl	(%r9,%rax,4), %r8d
    00000034: 	movl	%ecx, %eax
    00000036: 	addl	$0x100, %ecx
    0000003c: 	sarl	$0x8, %eax
    0000003f: 	cltq
    00000041: 	movl	%r8d, -0xf4(%rsi,%rax,4)
    00000049: 	cmpl	%ecx, %edx
    0000004b: 	jne	.Ltmp261 # Offset: 75
.Ltmp260:
    0000004d: 	retq # Offset: 77
DWARF CFI Instructions:
    <empty>
End of Function "_Z9copy_do13IiEvPKT_PS0_i"

Binary Function "_Z9copy_do15IiEvPKT_PS0_i" after disassembly {
  Number      : 96
  State       : disassembled
  Address     : 0x4df0
  Size        : 0xa8
  MaxSize     : 0xb0
  Offset      : 0x4df0
  Section     : .text
  Orc Section : .local.text._Z9copy_do15IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB095:
    00000000: 	endbr64
    00000004: 	testl	%edx, %edx
    00000006: 	jle	.Ltmp262 # Offset: 6
    0000000c: 	leaq	0x4(%rdi), %rcx
    00000010: 	movq	%rsi, %rax
    00000013: 	subq	%rcx, %rax
    00000016: 	cmpq	$0x8, %rax
    0000001a: 	jbe	.Ltmp263 # Offset: 26
    0000001c: 	leal	-0x1(%rdx), %eax
    0000001f: 	cmpl	$0x2, %eax
    00000022: 	jbe	.Ltmp263 # Offset: 34
    00000024: 	movl	%edx, %ecx
    00000026: 	xorl	%eax, %eax
    00000028: 	shrl	$0x2, %ecx
    0000002b: 	shlq	$0x4, %rcx
    0000002f: 	nop # Size: 1
.Ltmp264:
    00000030: 	movdqu	(%rdi,%rax), %xmm0
    00000035: 	movups	%xmm0, (%rsi,%rax)
    00000039: 	addq	$0x10, %rax
    0000003d: 	cmpq	%rcx, %rax
    00000040: 	jne	.Ltmp264 # Offset: 64
    00000042: 	movl	%edx, %eax
    00000044: 	movl	%edx, %ecx
    00000046: 	andl	$-0x4, %eax
    00000049: 	andl	$0x3, %ecx
    0000004c: 	testb	$0x3, %dl
    0000004f: 	je	.Ltmp262 # Offset: 79
    00000051: 	movl	%eax, %r8d
    00000054: 	movl	(%rdi,%r8,4), %r9d
    00000058: 	movl	%r9d, (%rsi,%r8,4)
    0000005c: 	leal	0x1(%rax), %r8d
    00000060: 	leal	-0x1(%rcx), %r9d
    00000064: 	cmpl	%r8d, %edx
    00000067: 	jle	.Ltmp262 # Offset: 103
    00000069: 	movl	%edx, %r8d
    0000006c: 	addl	$0x2, %eax
    0000006f: 	subl	$0x2, %ecx
    00000072: 	subl	%r9d, %r8d
    00000075: 	movslq	%r8d, %r8
    00000078: 	movl	(%rdi,%r8,4), %r9d
    0000007c: 	movl	%r9d, (%rsi,%r8,4)
    00000080: 	cmpl	%eax, %edx
    00000082: 	jle	.Ltmp262 # Offset: 130
    00000084: 	subl	%ecx, %edx
    00000086: 	movslq	%edx, %rdx
    00000089: 	movl	(%rdi,%rdx,4), %eax
    0000008c: 	movl	%eax, (%rsi,%rdx,4)
    0000008f: 	retq # Offset: 143
.Ltmp263:
    00000090: 	movl	%edx, %edx
    00000092: 	xorl	%eax, %eax
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp265:
    00000098: 	movl	(%rdi,%rax,4), %ecx
    0000009b: 	movl	%ecx, (%rsi,%rax,4)
    0000009e: 	addq	$0x1, %rax
    000000a2: 	cmpq	%rax, %rdx
    000000a5: 	jne	.Ltmp265 # Offset: 165
.Ltmp262:
    000000a7: 	retq # Offset: 167
DWARF CFI Instructions:
    <empty>
End of Function "_Z9copy_do15IiEvPKT_PS0_i"

Binary Function "_Z9copy_do17IiEvPKT_PS0_i" after disassembly {
  Number      : 97
  State       : disassembled
  Address     : 0x4ea0
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x4ea0
  Section     : .text
  Orc Section : .local.text._Z9copy_do17IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB096:
    00000000: 	endbr64
    00000004: 	testl	%edx, %edx
    00000006: 	jle	.Ltmp266 # Offset: 6
    0000000c: 	leaq	0x4(%rdi), %rcx
    00000010: 	movq	%rsi, %rax
    00000013: 	subq	%rcx, %rax
    00000016: 	cmpq	$0x8, %rax
    0000001a: 	jbe	.Ltmp267 # Offset: 26
    0000001c: 	leal	-0x1(%rdx), %eax
    0000001f: 	cmpl	$0x2, %eax
    00000022: 	jbe	.Ltmp267 # Offset: 34
    00000024: 	movl	%edx, %ecx
    00000026: 	xorl	%eax, %eax
    00000028: 	shrl	$0x2, %ecx
    0000002b: 	shlq	$0x4, %rcx
    0000002f: 	nop # Size: 1
.Ltmp268:
    00000030: 	movdqu	(%rdi,%rax), %xmm0
    00000035: 	movups	%xmm0, (%rsi,%rax)
    00000039: 	addq	$0x10, %rax
    0000003d: 	cmpq	%rcx, %rax
    00000040: 	jne	.Ltmp268 # Offset: 64
    00000042: 	movl	%edx, %ecx
    00000044: 	movl	%edx, %eax
    00000046: 	andl	$-0x4, %ecx
    00000049: 	andl	$0x3, %eax
    0000004c: 	testb	$0x3, %dl
    0000004f: 	je	.Ltmp266 # Offset: 79
    00000051: 	movl	(%rdi,%rcx,4), %r8d
    00000055: 	movl	%r8d, (%rsi,%rcx,4)
    00000059: 	movl	%eax, %r8d
    0000005c: 	subl	$0x1, %r8d
    00000060: 	je	.Ltmp266 # Offset: 96
    00000062: 	movl	%edx, %ecx
    00000064: 	subl	%r8d, %ecx
    00000067: 	movslq	%ecx, %rcx
    0000006a: 	movl	(%rdi,%rcx,4), %r8d
    0000006e: 	movl	%r8d, (%rsi,%rcx,4)
    00000072: 	subl	$0x2, %eax
    00000075: 	je	.Ltmp266 # Offset: 117
    00000077: 	subl	%eax, %edx
    00000079: 	movslq	%edx, %rdx
    0000007c: 	movl	(%rdi,%rdx,4), %eax
    0000007f: 	movl	%eax, (%rsi,%rdx,4)
    00000082: 	retq # Offset: 130
    00000083: 	nopl	(%rax,%rax) # Size: 5
.Ltmp267:
    00000088: 	movslq	%edx, %rdx
    0000008b: 	xorl	%eax, %eax
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp269:
    00000090: 	movl	(%rdi,%rax,4), %ecx
    00000093: 	movl	%ecx, (%rsi,%rax,4)
    00000096: 	addq	$0x1, %rax
    0000009a: 	cmpq	%rdx, %rax
    0000009d: 	jne	.Ltmp269 # Offset: 157
.Ltmp266:
    0000009f: 	retq # Offset: 159
DWARF CFI Instructions:
    <empty>
End of Function "_Z9copy_do17IiEvPKT_PS0_i"

Binary Function "_Z13copy_goto_optIiEvPKT_PS0_i" after disassembly {
  Number      : 98
  State       : disassembled
  Address     : 0x4f40
  Size        : 0xa8
  MaxSize     : 0xb0
  Offset      : 0x4f40
  Section     : .text
  Orc Section : .local.text._Z13copy_goto_optIiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB097:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp270 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp271 # Offset: 29
    0000001f: 	leal	-0x1(%rdx), %eax
    00000022: 	cmpl	$0x2, %eax
    00000025: 	jbe	.Ltmp271 # Offset: 37
    00000027: 	movl	%edx, %edi
    00000029: 	xorl	%eax, %eax
    0000002b: 	shrl	$0x2, %edi
    0000002e: 	shlq	$0x4, %rdi
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp272:
    00000038: 	movdqu	(%rcx,%rax), %xmm0
    0000003d: 	movups	%xmm0, (%rsi,%rax)
    00000041: 	addq	$0x10, %rax
    00000045: 	cmpq	%rdi, %rax
    00000048: 	jne	.Ltmp272 # Offset: 72
    0000004a: 	movl	%edx, %eax
    0000004c: 	andl	$-0x4, %eax
    0000004f: 	testb	$0x3, %dl
    00000052: 	je	.Ltmp270 # Offset: 82
    00000054: 	movl	%eax, %r8d
    00000057: 	movl	(%rcx,%r8,4), %r9d
    0000005b: 	leaq	(,%r8,4), %rdi
    00000063: 	movl	%r9d, (%rsi,%r8,4)
    00000067: 	leal	0x1(%rax), %r8d
    0000006b: 	cmpl	%r8d, %edx
    0000006e: 	jle	.Ltmp270 # Offset: 110
    00000070: 	movl	0x4(%rcx,%rdi), %r8d
    00000075: 	addl	$0x2, %eax
    00000078: 	movl	%r8d, 0x4(%rsi,%rdi)
    0000007d: 	cmpl	%eax, %edx
    0000007f: 	jle	.Ltmp270 # Offset: 127
    00000081: 	movl	0x8(%rcx,%rdi), %eax
    00000085: 	movl	%eax, 0x8(%rsi,%rdi)
    00000089: 	retq # Offset: 137
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp271:
    00000090: 	movl	%edx, %edx
    00000092: 	xorl	%eax, %eax
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp273:
    00000098: 	movl	(%rcx,%rax,4), %edi
    0000009b: 	movl	%edi, (%rsi,%rax,4)
    0000009e: 	addq	$0x1, %rax
    000000a2: 	cmpq	%rdx, %rax
    000000a5: 	jne	.Ltmp273 # Offset: 165
.Ltmp270:
    000000a7: 	retq # Offset: 167
DWARF CFI Instructions:
    <empty>
End of Function "_Z13copy_goto_optIiEvPKT_PS0_i"

Binary Function "_Z10copy_goto2IiEvPKT_PS0_i" after disassembly {
  Number      : 99
  State       : disassembled
  Address     : 0x4ff0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x4ff0
  Section     : .text
  Orc Section : .local.text._Z10copy_goto2IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB098:
    00000000: 	endbr64
    00000004: 	testl	%edx, %edx
    00000006: 	jle	.Ltmp274 # Offset: 6
    00000008: 	addl	%edx, %edx
    0000000a: 	xorl	%ecx, %ecx
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp275:
    00000010: 	movl	%ecx, %eax
    00000012: 	addl	$0x2, %ecx
    00000015: 	sarl	%eax
    00000017: 	cltq
    00000019: 	movl	(%rdi,%rax,4), %r8d
    0000001d: 	movl	%r8d, (%rsi,%rax,4)
    00000021: 	cmpl	%edx, %ecx
    00000023: 	jne	.Ltmp275 # Offset: 35
.Ltmp274:
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_Z10copy_goto2IiEvPKT_PS0_i"

Binary Function "_Z10copy_goto3IiEvPKT_PS0_i" after disassembly {
  Number      : 100
  State       : disassembled
  Address     : 0x5020
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x5020
  Section     : .text
  Orc Section : .local.text._Z10copy_goto3IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB099:
    00000000: 	endbr64
    00000004: 	testl	%edx, %edx
    00000006: 	jle	.Ltmp276 # Offset: 6
    00000008: 	leal	(%rdx,%rdx,2), %r9d
    0000000c: 	movl	$0xaaaaaaab, %r8d
    00000012: 	xorl	%edx, %edx
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp277:
    00000018: 	movl	%edx, %eax
    0000001a: 	addl	$0x3, %edx
    0000001d: 	imulq	%r8, %rax
    00000021: 	shrq	$0x21, %rax
    00000025: 	movl	(%rdi,%rax,4), %ecx
    00000028: 	movl	%ecx, (%rsi,%rax,4)
    0000002b: 	cmpl	%r9d, %edx
    0000002e: 	jne	.Ltmp277 # Offset: 46
.Ltmp276:
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z10copy_goto3IiEvPKT_PS0_i"

Binary Function "_Z10copy_goto4IiEvPKT_PS0_i" after disassembly {
  Number      : 101
  State       : disassembled
  Address     : 0x5060
  Size        : 0x41
  MaxSize     : 0x50
  Offset      : 0x5060
  Section     : .text
  Orc Section : .local.text._Z10copy_goto4IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0100:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp278 # Offset: 9
    0000000b: 	imull	$0xad, %edx, %edx
    00000011: 	xorl	%ecx, %ecx
    00000013: 	nopl	(%rax,%rax) # Size: 5
.Ltmp279:
    00000018: 	movslq	%ecx, %rax
    0000001b: 	movl	%ecx, %edi
    0000001d: 	addl	$0xad, %ecx
    00000023: 	imulq	$0x17ad2209, %rax, %rax
    0000002a: 	sarl	$0x1f, %edi
    0000002d: 	sarq	$0x24, %rax
    00000031: 	subl	%edi, %eax
    00000033: 	cltq
    00000035: 	movl	(%r8,%rax,4), %edi
    00000039: 	movl	%edi, (%rsi,%rax,4)
    0000003c: 	cmpl	%edx, %ecx
    0000003e: 	jne	.Ltmp279 # Offset: 62
.Ltmp278:
    00000040: 	retq # Offset: 64
DWARF CFI Instructions:
    <empty>
End of Function "_Z10copy_goto4IiEvPKT_PS0_i"

Binary Function "_Z10copy_goto5IiEvPKT_PS0_i" after disassembly {
  Number      : 102
  State       : disassembled
  Address     : 0x50b0
  Size        : 0x57
  MaxSize     : 0x60
  Offset      : 0x50b0
  Section     : .text
  Orc Section : .local.text._Z10copy_goto5IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0101:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp280 # Offset: 9
    0000000b: 	leal	(%rdx,%rdx,2), %r10d
    0000000f: 	xorl	%ecx, %ecx
    00000011: 	xorl	%edx, %edx
    00000013: 	movl	$0xaaaaaaab, %r9d
    00000019: 	nopl	(%rax) # Size: 7
.Ltmp281:
    00000020: 	movslq	%ecx, %rax
    00000023: 	movl	%ecx, %esi
    00000025: 	addl	$0xad, %ecx
    0000002b: 	imulq	$0x17ad2209, %rax, %rax
    00000032: 	sarl	$0x1f, %esi
    00000035: 	sarq	$0x24, %rax
    00000039: 	subl	%esi, %eax
    0000003b: 	cltq
    0000003d: 	movl	(%rdi,%rax,4), %esi
    00000040: 	movl	%edx, %eax
    00000042: 	addl	$0x3, %edx
    00000045: 	imulq	%r9, %rax
    00000049: 	shrq	$0x21, %rax
    0000004d: 	movl	%esi, (%r8,%rax,4)
    00000051: 	cmpl	%r10d, %edx
    00000054: 	jne	.Ltmp281 # Offset: 84
.Ltmp280:
    00000056: 	retq # Offset: 86
DWARF CFI Instructions:
    <empty>
End of Function "_Z10copy_goto5IiEvPKT_PS0_i"

Binary Function "_Z10copy_goto6IiEvPKT_PS0_i" after disassembly {
  Number      : 103
  State       : disassembled
  Address     : 0x5110
  Size        : 0xc0
  MaxSize     : 0xc0
  Offset      : 0x5110
  Section     : .text
  Orc Section : .local.text._Z10copy_goto6IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0102:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp282 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp283 # Offset: 29
    00000023: 	leal	-0x1(%rdx), %eax
    00000026: 	cmpl	$0x2, %eax
    00000029: 	jbe	.Ltmp283 # Offset: 41
    0000002b: 	movl	%edx, %edi
    0000002d: 	xorl	%eax, %eax
    0000002f: 	shrl	$0x2, %edi
    00000032: 	shlq	$0x4, %rdi
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp284:
    00000040: 	movdqu	(%rcx,%rax), %xmm0
    00000045: 	movups	%xmm0, (%rsi,%rax)
    00000049: 	addq	$0x10, %rax
    0000004d: 	cmpq	%rdi, %rax
    00000050: 	jne	.Ltmp284 # Offset: 80
    00000052: 	movl	%edx, %edi
    00000054: 	andl	$-0x4, %edi
    00000057: 	leal	0x2(%rdi), %r8d
    0000005b: 	leal	0x63(%rdi), %eax
    0000005e: 	cmpl	%edi, %edx
    00000060: 	je	.Ltmp282 # Offset: 96
    00000062: 	cltq
    00000064: 	addl	$0x1, %edi
    00000067: 	shlq	$0x2, %rax
    0000006b: 	movl	-0x18c(%rcx,%rax), %r9d
    00000073: 	movl	%r9d, -0x18c(%rsi,%rax)
    0000007b: 	cmpl	%edi, %edx
    0000007d: 	jle	.Ltmp282 # Offset: 125
    0000007f: 	movl	-0x188(%rcx,%rax), %edi
    00000086: 	movl	%edi, -0x188(%rsi,%rax)
    0000008d: 	cmpl	%r8d, %edx
    00000090: 	jle	.Ltmp282 # Offset: 144
    00000092: 	movl	-0x184(%rcx,%rax), %edx
    00000099: 	movl	%edx, -0x184(%rsi,%rax)
    000000a0: 	retq # Offset: 160
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp283:
    000000a8: 	movl	%edx, %edx
    000000aa: 	xorl	%eax, %eax
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp285:
    000000b0: 	movl	(%rcx,%rax,4), %edi
    000000b3: 	movl	%edi, (%rsi,%rax,4)
    000000b6: 	addq	$0x1, %rax
    000000ba: 	cmpq	%rax, %rdx
    000000bd: 	jne	.Ltmp285 # Offset: 189
.Ltmp282:
    000000bf: 	retq # Offset: 191
DWARF CFI Instructions:
    <empty>
End of Function "_Z10copy_goto6IiEvPKT_PS0_i"

Binary Function "_Z10copy_goto7IiEvPKT_PS0_i" after disassembly {
  Number      : 104
  State       : disassembled
  Address     : 0x51d0
  Size        : 0xc0
  MaxSize     : 0xc0
  Offset      : 0x51d0
  Section     : .text
  Orc Section : .local.text._Z10copy_goto7IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0103:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp286 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp287 # Offset: 29
    00000023: 	leal	-0x1(%rdx), %eax
    00000026: 	cmpl	$0x2, %eax
    00000029: 	jbe	.Ltmp287 # Offset: 41
    0000002b: 	movl	%edx, %edi
    0000002d: 	xorl	%eax, %eax
    0000002f: 	shrl	$0x2, %edi
    00000032: 	shlq	$0x4, %rdi
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp288:
    00000040: 	movdqu	(%rcx,%rax), %xmm0
    00000045: 	movups	%xmm0, (%rsi,%rax)
    00000049: 	addq	$0x10, %rax
    0000004d: 	cmpq	%rdi, %rax
    00000050: 	jne	.Ltmp288 # Offset: 80
    00000052: 	movl	%edx, %eax
    00000054: 	andl	$-0x4, %eax
    00000057: 	leal	0x63(%rax), %edi
    0000005a: 	cmpl	%eax, %edx
    0000005c: 	je	.Ltmp286 # Offset: 92
    0000005e: 	movslq	%edi, %rdi
    00000061: 	movl	%eax, %r8d
    00000064: 	movl	-0x18c(%rcx,%rdi,4), %edi
    0000006b: 	leaq	(,%r8,4), %r9
    00000073: 	movl	%edi, (%rsi,%r8,4)
    00000077: 	leal	0x1(%rax), %edi
    0000007a: 	cmpl	%edi, %edx
    0000007c: 	jle	.Ltmp286 # Offset: 124
    0000007e: 	movl	0x4(%rcx,%r9), %r8d
    00000083: 	movslq	%edi, %rdi
    00000086: 	addl	$0x2, %eax
    00000089: 	leaq	(,%rdi,4), %r10
    00000091: 	movl	%r8d, (%rsi,%rdi,4)
    00000095: 	cmpl	%eax, %edx
    00000097: 	jle	.Ltmp286 # Offset: 151
    00000099: 	movl	0x4(%rcx,%r10), %edx
    0000009e: 	cltq
    000000a0: 	movl	%edx, (%rsi,%rax,4)
    000000a3: 	retq # Offset: 163
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp287:
    000000a8: 	movl	%edx, %edx
    000000aa: 	xorl	%eax, %eax
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp289:
    000000b0: 	movl	(%rcx,%rax,4), %edi
    000000b3: 	movl	%edi, (%rsi,%rax,4)
    000000b6: 	addq	$0x1, %rax
    000000ba: 	cmpq	%rax, %rdx
    000000bd: 	jne	.Ltmp289 # Offset: 189
.Ltmp286:
    000000bf: 	retq # Offset: 191
DWARF CFI Instructions:
    <empty>
End of Function "_Z10copy_goto7IiEvPKT_PS0_i"

Binary Function "_Z10copy_goto8IiEvPKT_PS0_i" after disassembly {
  Number      : 105
  State       : disassembled
  Address     : 0x5290
  Size        : 0x57
  MaxSize     : 0x60
  Offset      : 0x5290
  Section     : .text
  Orc Section : .local.text._Z10copy_goto8IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0104:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp290 # Offset: 9
    0000000b: 	leal	(%rdx,%rdx,2), %r10d
    0000000f: 	xorl	%ecx, %ecx
    00000011: 	xorl	%edx, %edx
    00000013: 	movl	$0xaaaaaaab, %r9d
    00000019: 	nopl	(%rax) # Size: 7
.Ltmp291:
    00000020: 	movslq	%edx, %rax
    00000023: 	movl	%edx, %esi
    00000025: 	addl	$0xad, %edx
    0000002b: 	imulq	$0x17ad2209, %rax, %rax
    00000032: 	sarl	$0x1f, %esi
    00000035: 	sarq	$0x24, %rax
    00000039: 	subl	%esi, %eax
    0000003b: 	cltq
    0000003d: 	movl	(%rdi,%rax,4), %esi
    00000040: 	movl	%ecx, %eax
    00000042: 	addl	$0x3, %ecx
    00000045: 	imulq	%r9, %rax
    00000049: 	shrq	$0x21, %rax
    0000004d: 	movl	%esi, (%r8,%rax,4)
    00000051: 	cmpl	%ecx, %r10d
    00000054: 	jne	.Ltmp291 # Offset: 84
.Ltmp290:
    00000056: 	retq # Offset: 86
DWARF CFI Instructions:
    <empty>
End of Function "_Z10copy_goto8IiEvPKT_PS0_i"

Binary Function "_Z10copy_goto9IiEvPKT_PS0_i" after disassembly {
  Number      : 106
  State       : disassembled
  Address     : 0x52f0
  Size        : 0xe0
  MaxSize     : 0xe0
  Offset      : 0x52f0
  Section     : .text
  Orc Section : .local.text._Z10copy_goto9IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0105:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp292 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp293 # Offset: 29
    00000023: 	leal	-0x1(%rdx), %eax
    00000026: 	cmpl	$0x2, %eax
    00000029: 	jbe	.Ltmp293 # Offset: 41
    0000002f: 	movl	%edx, %edi
    00000031: 	xorl	%eax, %eax
    00000033: 	shrl	$0x2, %edi
    00000036: 	shlq	$0x4, %rdi
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp294:
    00000040: 	movdqu	(%rcx,%rax), %xmm0
    00000045: 	movups	%xmm0, (%rsi,%rax)
    00000049: 	addq	$0x10, %rax
    0000004d: 	cmpq	%rdi, %rax
    00000050: 	jne	.Ltmp294 # Offset: 80
    00000052: 	movl	%edx, %eax
    00000054: 	andl	$-0x4, %eax
    00000057: 	leal	-0xff(%rax), %edi
    0000005d: 	cmpl	%eax, %edx
    0000005f: 	je	.Ltmp292 # Offset: 95
    00000061: 	movslq	%edi, %rdi
    00000064: 	shlq	$0x2, %rdi
    00000068: 	movl	0x3fc(%rcx,%rdi), %r8d
    00000070: 	movl	%r8d, 0x3fc(%rsi,%rdi)
    00000078: 	leal	0x1(%rax), %r8d
    0000007c: 	leal	-0xfe(%rax), %edi
    00000082: 	cmpl	%r8d, %edx
    00000085: 	jle	.Ltmp292 # Offset: 133
    00000087: 	movslq	%edi, %rdi
    0000008a: 	shlq	$0x2, %rdi
    0000008e: 	movl	0x3fc(%rcx,%rdi), %r8d
    00000096: 	movl	%r8d, 0x3fc(%rsi,%rdi)
    0000009e: 	leal	-0xfd(%rax), %edi
    000000a4: 	addl	$0x2, %eax
    000000a7: 	cmpl	%eax, %edx
    000000a9: 	jle	.Ltmp292 # Offset: 169
    000000ab: 	movslq	%edi, %rax
    000000ae: 	shlq	$0x2, %rax
    000000b2: 	movl	0x3fc(%rcx,%rax), %edx
    000000b9: 	movl	%edx, 0x3fc(%rsi,%rax)
    000000c0: 	retq # Offset: 192
    000000c1: 	nopl	(%rax) # Size: 7
.Ltmp293:
    000000c8: 	movl	%edx, %edx
    000000ca: 	xorl	%eax, %eax
    000000cc: 	nopl	(%rax) # Size: 4
.Ltmp295:
    000000d0: 	movl	(%rcx,%rax,4), %edi
    000000d3: 	movl	%edi, (%rsi,%rax,4)
    000000d6: 	addq	$0x1, %rax
    000000da: 	cmpq	%rax, %rdx
    000000dd: 	jne	.Ltmp295 # Offset: 221
.Ltmp292:
    000000df: 	retq # Offset: 223
DWARF CFI Instructions:
    <empty>
End of Function "_Z10copy_goto9IiEvPKT_PS0_i"

Binary Function "_Z11copy_goto10IiEvPKT_PS0_i" after disassembly {
  Number      : 107
  State       : disassembled
  Address     : 0x53d0
  Size        : 0x67
  MaxSize     : 0x70
  Offset      : 0x53d0
  Section     : .text
  Orc Section : .local.text._Z11copy_goto10IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0106:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp296 # Offset: 9
    0000000b: 	leal	0x129(%rdx,%rdx,2), %r10d
    00000013: 	movl	$0xffff53ad, %ecx
    00000018: 	movl	$0x129, %edx
    0000001d: 	movl	$0xaaaaaaab, %r9d
    00000023: 	nopl	(%rax,%rax) # Size: 5
.Ltmp297:
    00000028: 	movslq	%ecx, %rax
    0000002b: 	movl	%ecx, %esi
    0000002d: 	addl	$0xad, %ecx
    00000033: 	imulq	$0x17ad2209, %rax, %rax
    0000003a: 	sarl	$0x1f, %esi
    0000003d: 	sarq	$0x24, %rax
    00000041: 	subl	%esi, %eax
    00000043: 	cltq
    00000045: 	movl	0x3fc(%rdi,%rax,4), %esi
    0000004c: 	movl	%edx, %eax
    0000004e: 	addl	$0x3, %edx
    00000051: 	imulq	%r9, %rax
    00000055: 	shrq	$0x21, %rax
    00000059: 	movl	%esi, -0x18c(%r8,%rax,4)
    00000061: 	cmpl	%r10d, %edx
    00000064: 	jne	.Ltmp297 # Offset: 100
.Ltmp296:
    00000066: 	retq # Offset: 102
DWARF CFI Instructions:
    <empty>
End of Function "_Z11copy_goto10IiEvPKT_PS0_i"

Binary Function "_Z11copy_goto11IiEvPKT_PS0_i" after disassembly {
  Number      : 108
  State       : disassembled
  Address     : 0x5440
  Size        : 0x32
  MaxSize     : 0x40
  Offset      : 0x5440
  Section     : .text
  Orc Section : .local.text._Z11copy_goto11IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0107:
    00000000: 	endbr64
    00000004: 	testl	%edx, %edx
    00000006: 	jle	.Ltmp298 # Offset: 6
    00000008: 	shll	$0x8, %edx
    0000000b: 	xorl	%ecx, %ecx
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp299:
    00000010: 	leal	(%rcx,%rcx), %eax
    00000013: 	sarl	$0x9, %eax
    00000016: 	cltq
    00000018: 	movl	(%rdi,%rax,4), %r8d
    0000001c: 	movl	%ecx, %eax
    0000001e: 	addl	$0x100, %ecx
    00000024: 	sarl	$0x8, %eax
    00000027: 	cltq
    00000029: 	movl	%r8d, (%rsi,%rax,4)
    0000002d: 	cmpl	%ecx, %edx
    0000002f: 	jne	.Ltmp299 # Offset: 47
.Ltmp298:
    00000031: 	retq # Offset: 49
DWARF CFI Instructions:
    <empty>
End of Function "_Z11copy_goto11IiEvPKT_PS0_i"

Binary Function "_Z11copy_goto13IiEvPKT_PS0_i" after disassembly {
  Number      : 109
  State       : disassembled
  Address     : 0x5480
  Size        : 0x4e
  MaxSize     : 0x50
  Offset      : 0x5480
  Section     : .text
  Orc Section : .local.text._Z11copy_goto13IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0108:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp300 # Offset: 9
    0000000b: 	addl	$0x3d, %edx
    0000000e: 	movl	$0x3d00, %ecx
    00000013: 	movl	$0xffffde00, %edi
    00000018: 	shll	$0x8, %edx
    0000001b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp301:
    00000020: 	movl	%edi, %eax
    00000022: 	addl	$0x200, %edi
    00000028: 	sarl	$0x9, %eax
    0000002b: 	addl	$0x11, %eax
    0000002e: 	cltq
    00000030: 	movl	(%r9,%rax,4), %r8d
    00000034: 	movl	%ecx, %eax
    00000036: 	addl	$0x100, %ecx
    0000003c: 	sarl	$0x8, %eax
    0000003f: 	cltq
    00000041: 	movl	%r8d, -0xf4(%rsi,%rax,4)
    00000049: 	cmpl	%ecx, %edx
    0000004b: 	jne	.Ltmp301 # Offset: 75
.Ltmp300:
    0000004d: 	retq # Offset: 77
DWARF CFI Instructions:
    <empty>
End of Function "_Z11copy_goto13IiEvPKT_PS0_i"

Binary Function "_Z11copy_goto15IiEvPKT_PS0_i" after disassembly {
  Number      : 110
  State       : disassembled
  Address     : 0x54d0
  Size        : 0xa8
  MaxSize     : 0xb0
  Offset      : 0x54d0
  Section     : .text
  Orc Section : .local.text._Z11copy_goto15IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0109:
    00000000: 	endbr64
    00000004: 	testl	%edx, %edx
    00000006: 	jle	.Ltmp302 # Offset: 6
    0000000c: 	leaq	0x4(%rdi), %rcx
    00000010: 	movq	%rsi, %rax
    00000013: 	subq	%rcx, %rax
    00000016: 	cmpq	$0x8, %rax
    0000001a: 	jbe	.Ltmp303 # Offset: 26
    0000001c: 	leal	-0x1(%rdx), %eax
    0000001f: 	cmpl	$0x2, %eax
    00000022: 	jbe	.Ltmp303 # Offset: 34
    00000024: 	movl	%edx, %ecx
    00000026: 	xorl	%eax, %eax
    00000028: 	shrl	$0x2, %ecx
    0000002b: 	shlq	$0x4, %rcx
    0000002f: 	nop # Size: 1
.Ltmp304:
    00000030: 	movdqu	(%rdi,%rax), %xmm0
    00000035: 	movups	%xmm0, (%rsi,%rax)
    00000039: 	addq	$0x10, %rax
    0000003d: 	cmpq	%rcx, %rax
    00000040: 	jne	.Ltmp304 # Offset: 64
    00000042: 	movl	%edx, %eax
    00000044: 	movl	%edx, %ecx
    00000046: 	andl	$-0x4, %eax
    00000049: 	andl	$0x3, %ecx
    0000004c: 	testb	$0x3, %dl
    0000004f: 	je	.Ltmp302 # Offset: 79
    00000051: 	movl	%eax, %r8d
    00000054: 	movl	(%rdi,%r8,4), %r9d
    00000058: 	movl	%r9d, (%rsi,%r8,4)
    0000005c: 	leal	0x1(%rax), %r8d
    00000060: 	leal	-0x1(%rcx), %r9d
    00000064: 	cmpl	%r8d, %edx
    00000067: 	jle	.Ltmp302 # Offset: 103
    00000069: 	movl	%edx, %r8d
    0000006c: 	addl	$0x2, %eax
    0000006f: 	subl	$0x2, %ecx
    00000072: 	subl	%r9d, %r8d
    00000075: 	movslq	%r8d, %r8
    00000078: 	movl	(%rdi,%r8,4), %r9d
    0000007c: 	movl	%r9d, (%rsi,%r8,4)
    00000080: 	cmpl	%eax, %edx
    00000082: 	jle	.Ltmp302 # Offset: 130
    00000084: 	subl	%ecx, %edx
    00000086: 	movslq	%edx, %rdx
    00000089: 	movl	(%rdi,%rdx,4), %eax
    0000008c: 	movl	%eax, (%rsi,%rdx,4)
    0000008f: 	retq # Offset: 143
.Ltmp303:
    00000090: 	movl	%edx, %edx
    00000092: 	xorl	%eax, %eax
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp305:
    00000098: 	movl	(%rdi,%rax,4), %ecx
    0000009b: 	movl	%ecx, (%rsi,%rax,4)
    0000009e: 	addq	$0x1, %rax
    000000a2: 	cmpq	%rax, %rdx
    000000a5: 	jne	.Ltmp305 # Offset: 165
.Ltmp302:
    000000a7: 	retq # Offset: 167
DWARF CFI Instructions:
    <empty>
End of Function "_Z11copy_goto15IiEvPKT_PS0_i"

Binary Function "_Z11copy_goto17IiEvPKT_PS0_i" after disassembly {
  Number      : 111
  State       : disassembled
  Address     : 0x5580
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x5580
  Section     : .text
  Orc Section : .local.text._Z11copy_goto17IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0110:
    00000000: 	endbr64
    00000004: 	testl	%edx, %edx
    00000006: 	jle	.Ltmp306 # Offset: 6
    0000000c: 	leaq	0x4(%rdi), %rcx
    00000010: 	movq	%rsi, %rax
    00000013: 	subq	%rcx, %rax
    00000016: 	cmpq	$0x8, %rax
    0000001a: 	jbe	.Ltmp307 # Offset: 26
    0000001c: 	leal	-0x1(%rdx), %eax
    0000001f: 	cmpl	$0x2, %eax
    00000022: 	jbe	.Ltmp307 # Offset: 34
    00000024: 	movl	%edx, %ecx
    00000026: 	xorl	%eax, %eax
    00000028: 	shrl	$0x2, %ecx
    0000002b: 	shlq	$0x4, %rcx
    0000002f: 	nop # Size: 1
.Ltmp308:
    00000030: 	movdqu	(%rdi,%rax), %xmm0
    00000035: 	movups	%xmm0, (%rsi,%rax)
    00000039: 	addq	$0x10, %rax
    0000003d: 	cmpq	%rcx, %rax
    00000040: 	jne	.Ltmp308 # Offset: 64
    00000042: 	movl	%edx, %ecx
    00000044: 	movl	%edx, %eax
    00000046: 	andl	$-0x4, %ecx
    00000049: 	andl	$0x3, %eax
    0000004c: 	testb	$0x3, %dl
    0000004f: 	je	.Ltmp306 # Offset: 79
    00000051: 	movl	(%rdi,%rcx,4), %r8d
    00000055: 	movl	%r8d, (%rsi,%rcx,4)
    00000059: 	movl	%eax, %r8d
    0000005c: 	subl	$0x1, %r8d
    00000060: 	je	.Ltmp306 # Offset: 96
    00000062: 	movl	%edx, %ecx
    00000064: 	subl	%r8d, %ecx
    00000067: 	movslq	%ecx, %rcx
    0000006a: 	movl	(%rdi,%rcx,4), %r8d
    0000006e: 	movl	%r8d, (%rsi,%rcx,4)
    00000072: 	subl	$0x2, %eax
    00000075: 	je	.Ltmp306 # Offset: 117
    00000077: 	subl	%eax, %edx
    00000079: 	movslq	%edx, %rdx
    0000007c: 	movl	(%rdi,%rdx,4), %eax
    0000007f: 	movl	%eax, (%rsi,%rdx,4)
    00000082: 	retq # Offset: 130
    00000083: 	nopl	(%rax,%rax) # Size: 5
.Ltmp307:
    00000088: 	movslq	%edx, %rdx
    0000008b: 	xorl	%eax, %eax
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp309:
    00000090: 	movl	(%rdi,%rax,4), %ecx
    00000093: 	movl	%ecx, (%rsi,%rax,4)
    00000096: 	addq	$0x1, %rax
    0000009a: 	cmpq	%rdx, %rax
    0000009d: 	jne	.Ltmp309 # Offset: 157
.Ltmp306:
    0000009f: 	retq # Offset: 159
DWARF CFI Instructions:
    <empty>
End of Function "_Z11copy_goto17IiEvPKT_PS0_i"

Binary Function "_Z10copy_goto1IiEvPKT_PS0_i" after disassembly {
  Number      : 112
  State       : disassembled
  Address     : 0x5620
  Size        : 0xa8
  MaxSize     : 0xb0
  Offset      : 0x5620
  Section     : .text
  Orc Section : .local.text._Z10copy_goto1IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0111:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp310 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp311 # Offset: 29
    0000001f: 	leal	-0x1(%rdx), %eax
    00000022: 	cmpl	$0x2, %eax
    00000025: 	jbe	.Ltmp311 # Offset: 37
    00000027: 	movl	%edx, %edi
    00000029: 	xorl	%eax, %eax
    0000002b: 	shrl	$0x2, %edi
    0000002e: 	shlq	$0x4, %rdi
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp312:
    00000038: 	movdqu	(%rcx,%rax), %xmm0
    0000003d: 	movups	%xmm0, (%rsi,%rax)
    00000041: 	addq	$0x10, %rax
    00000045: 	cmpq	%rdi, %rax
    00000048: 	jne	.Ltmp312 # Offset: 72
    0000004a: 	movl	%edx, %eax
    0000004c: 	andl	$-0x4, %eax
    0000004f: 	testb	$0x3, %dl
    00000052: 	je	.Ltmp310 # Offset: 82
    00000054: 	movl	%eax, %r8d
    00000057: 	movl	(%rcx,%r8,4), %r9d
    0000005b: 	leaq	(,%r8,4), %rdi
    00000063: 	movl	%r9d, (%rsi,%r8,4)
    00000067: 	leal	0x1(%rax), %r8d
    0000006b: 	cmpl	%r8d, %edx
    0000006e: 	jle	.Ltmp310 # Offset: 110
    00000070: 	movl	0x4(%rcx,%rdi), %r8d
    00000075: 	addl	$0x2, %eax
    00000078: 	movl	%r8d, 0x4(%rsi,%rdi)
    0000007d: 	cmpl	%eax, %edx
    0000007f: 	jle	.Ltmp310 # Offset: 127
    00000081: 	movl	0x8(%rcx,%rdi), %eax
    00000085: 	movl	%eax, 0x8(%rsi,%rdi)
    00000089: 	retq # Offset: 137
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp311:
    00000090: 	movl	%edx, %edx
    00000092: 	xorl	%eax, %eax
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp313:
    00000098: 	movl	(%rcx,%rax,4), %edi
    0000009b: 	movl	%edi, (%rsi,%rax,4)
    0000009e: 	addq	$0x1, %rax
    000000a2: 	cmpq	%rdx, %rax
    000000a5: 	jne	.Ltmp313 # Offset: 165
.Ltmp310:
    000000a7: 	retq # Offset: 167
DWARF CFI Instructions:
    <empty>
End of Function "_Z10copy_goto1IiEvPKT_PS0_i"

Binary Function "_Z11copy_do_optIiEvPKT_PS0_i" after disassembly {
  Number      : 113
  State       : disassembled
  Address     : 0x56d0
  Size        : 0xa8
  MaxSize     : 0xb0
  Offset      : 0x56d0
  Section     : .text
  Orc Section : .local.text._Z11copy_do_optIiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0112:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%edx, %edx
    00000009: 	jle	.Ltmp314 # Offset: 9
    0000000f: 	leaq	0x4(%rdi), %rdi
    00000013: 	movq	%rsi, %rax
    00000016: 	subq	%rdi, %rax
    00000019: 	cmpq	$0x8, %rax
    0000001d: 	jbe	.Ltmp315 # Offset: 29
    0000001f: 	leal	-0x1(%rdx), %eax
    00000022: 	cmpl	$0x2, %eax
    00000025: 	jbe	.Ltmp315 # Offset: 37
    00000027: 	movl	%edx, %edi
    00000029: 	xorl	%eax, %eax
    0000002b: 	shrl	$0x2, %edi
    0000002e: 	shlq	$0x4, %rdi
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp316:
    00000038: 	movdqu	(%rcx,%rax), %xmm0
    0000003d: 	movups	%xmm0, (%rsi,%rax)
    00000041: 	addq	$0x10, %rax
    00000045: 	cmpq	%rdi, %rax
    00000048: 	jne	.Ltmp316 # Offset: 72
    0000004a: 	movl	%edx, %eax
    0000004c: 	andl	$-0x4, %eax
    0000004f: 	testb	$0x3, %dl
    00000052: 	je	.Ltmp314 # Offset: 82
    00000054: 	movl	%eax, %r8d
    00000057: 	movl	(%rcx,%r8,4), %r9d
    0000005b: 	leaq	(,%r8,4), %rdi
    00000063: 	movl	%r9d, (%rsi,%r8,4)
    00000067: 	leal	0x1(%rax), %r8d
    0000006b: 	cmpl	%r8d, %edx
    0000006e: 	jle	.Ltmp314 # Offset: 110
    00000070: 	movl	0x4(%rcx,%rdi), %r8d
    00000075: 	addl	$0x2, %eax
    00000078: 	movl	%r8d, 0x4(%rsi,%rdi)
    0000007d: 	cmpl	%eax, %edx
    0000007f: 	jle	.Ltmp314 # Offset: 127
    00000081: 	movl	0x8(%rcx,%rdi), %eax
    00000085: 	movl	%eax, 0x8(%rsi,%rdi)
    00000089: 	retq # Offset: 137
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp315:
    00000090: 	movl	%edx, %edx
    00000092: 	xorl	%eax, %eax
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp317:
    00000098: 	movl	(%rcx,%rax,4), %edi
    0000009b: 	movl	%edi, (%rsi,%rax,4)
    0000009e: 	addq	$0x1, %rax
    000000a2: 	cmpq	%rdx, %rax
    000000a5: 	jne	.Ltmp317 # Offset: 165
.Ltmp314:
    000000a7: 	retq # Offset: 167
DWARF CFI Instructions:
    <empty>
End of Function "_Z11copy_do_optIiEvPKT_PS0_i"

Binary Function "_Z11copy_goto12IiEvPKT_PS0_i" after disassembly {
  Number      : 114
  State       : disassembled
  Address     : 0x5780
  Size        : 0x32
  MaxSize     : 0x40
  Offset      : 0x5780
  Section     : .text
  Orc Section : .local.text._Z11copy_goto12IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0113:
    00000000: 	endbr64
    00000004: 	testl	%edx, %edx
    00000006: 	jle	.Ltmp318 # Offset: 6
    00000008: 	shll	$0x8, %edx
    0000000b: 	xorl	%ecx, %ecx
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp319:
    00000010: 	leal	(%rcx,%rcx), %eax
    00000013: 	sarl	$0x9, %eax
    00000016: 	cltq
    00000018: 	movl	(%rdi,%rax,4), %r8d
    0000001c: 	movl	%ecx, %eax
    0000001e: 	addl	$0x100, %ecx
    00000024: 	sarl	$0x8, %eax
    00000027: 	cltq
    00000029: 	movl	%r8d, (%rsi,%rax,4)
    0000002d: 	cmpl	%ecx, %edx
    0000002f: 	jne	.Ltmp319 # Offset: 47
.Ltmp318:
    00000031: 	retq # Offset: 49
DWARF CFI Instructions:
    <empty>
End of Function "_Z11copy_goto12IiEvPKT_PS0_i"

Binary Function "_Z9copy_do11IiEvPKT_PS0_i" after disassembly {
  Number      : 115
  State       : disassembled
  Address     : 0x57c0
  Size        : 0x32
  MaxSize     : 0x40
  Offset      : 0x57c0
  Section     : .text
  Orc Section : .local.text._Z9copy_do11IiEvPKT_PS0_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0114:
    00000000: 	endbr64
    00000004: 	testl	%edx, %edx
    00000006: 	jle	.Ltmp320 # Offset: 6
    00000008: 	shll	$0x8, %edx
    0000000b: 	xorl	%ecx, %ecx
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp321:
    00000010: 	leal	(%rcx,%rcx), %eax
    00000013: 	sarl	$0x9, %eax
    00000016: 	cltq
    00000018: 	movl	(%rdi,%rax,4), %r8d
    0000001c: 	movl	%ecx, %eax
    0000001e: 	addl	$0x100, %ecx
    00000024: 	sarl	$0x8, %eax
    00000027: 	cltq
    00000029: 	movl	%r8d, (%rsi,%rax,4)
    0000002d: 	cmpl	%ecx, %edx
    0000002f: 	jne	.Ltmp321 # Offset: 47
.Ltmp320:
    00000031: 	retq # Offset: 49
DWARF CFI Instructions:
    <empty>
End of Function "_Z9copy_do11IiEvPKT_PS0_i"

Binary Function "_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc" after disassembly {
  Number      : 116
  State       : disassembled
  Address     : 0x5800
  Size        : 0x136
  MaxSize     : 0x140
  Offset      : 0x5800
  Section     : .text
  Orc Section : .local.text._Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0115:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movslq	%edx, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rcx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rdi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%r13, %rbx
    0000001d: 	shlq	$0x2, %r13
    00000021: 	leaq	(%rsi,%r13), %rcx
    00000025: 	subq	$0x18, %rsp
    00000029: 	movq	%r8, 0x8(%rsp)
    0000002e: 	cmpq	%rsi, %rcx
    00000031: 	je	.Ltmp322 # Offset: 49
    00000033: 	movabsq	$0x5851f42d4c957f2d, %rdi
    0000003d: 	movq	%rsi, %rdx
    00000040: 	movabsq	$0x14057b7ef767814f, %rsi
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp323:
    00000050: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000057: 	addq	$0x4, %rdx
    0000005b: 	imulq	%rdi, %rax
    0000005f: 	addq	%rsi, %rax
    00000062: 	movq	%rax, %r8
    00000065: 	movq	%rax, %r9
    00000068: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000006f: 	shrq	$0x14, %r8
    00000073: 	shlq	$0x17, %r9
    00000077: 	xorq	%r9, %r8
    0000007a: 	xorq	%r8, %rax
    0000007d: 	sarq	$0x3, %rax
    00000081: 	movl	%eax, -0x4(%rdx)
    00000084: 	cmpq	%rdx, %rcx
    00000087: 	jne	.Ltmp323 # Offset: 135
.Ltmp322:
    00000089: 	callq	clock@PLT # Offset: 137
    0000008e: 	movq	%rax, start_time(%rip)
    00000095: 	movl	iterations(%rip), %eax
    0000009b: 	testl	%eax, %eax
    0000009d: 	jle	.Ltmp324 # Offset: 157
    0000009f: 	xorl	%r14d, %r14d
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp325:
    000000a8: 	movl	%ebx, %edx
    000000aa: 	movq	%r15, %rsi
    000000ad: 	movq	%rbp, %rdi
    000000b0: 	addl	$0x1, %r14d
    000000b4: 	callq	*%r12 # Offset: 180
    000000b7: 	cmpl	%r14d, iterations(%rip)
    000000be: 	jg	.Ltmp325 # Offset: 190
.Ltmp324:
    000000c0: 	callq	clock@PLT # Offset: 192
    000000c5: 	movq	0x8(%rsp), %rdi
    000000ca: 	pxor	%xmm0, %xmm0
    000000ce: 	movq	%rax, end_time(%rip)
    000000d5: 	subq	start_time(%rip), %rax
    000000dc: 	cvtsi2sd	%rax, %xmm0
    000000e1: 	divsd	DATAat0x6f00(%rip), %xmm0
    000000e9: 	callq	_Z13record_resultdPKc # Offset: 233
    000000ee: 	movq	%r13, %rdx
    000000f1: 	movq	%rbp, %rsi
    000000f4: 	movq	%r15, %rdi
    000000f7: 	callq	memcmp@PLT # Offset: 247
    000000fc: 	testl	%eax, %eax
    000000fe: 	jne	.Ltmp326 # Offset: 254
    00000100: 	addq	$0x18, %rsp
    00000104: 	popq	%rbx
    00000105: 	popq	%rbp
    00000106: 	popq	%r12
    00000108: 	popq	%r13
    0000010a: 	popq	%r14
    0000010c: 	popq	%r15
    0000010e: 	retq # Offset: 270
    0000010f: 	nop # Size: 1
.Ltmp326:
    00000110: 	movq	0x8(%rsp), %rdx
    00000115: 	addq	$0x18, %rsp
    00000119: 	leaq	DATAat0x6edf(%rip), %rsi
    00000120: 	xorl	%eax, %eax
    00000122: 	popq	%rbx
    00000123: 	movl	$0x1, %edi
    00000128: 	popq	%rbp
    00000129: 	popq	%r12
    0000012b: 	popq	%r13
    0000012d: 	popq	%r14
    0000012f: 	popq	%r15
    00000131: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 305
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_copyIiPFvPKiPiiEEvPKT_PS5_iT0_PKc"

Binary Function "_Z14test_copyrangeIiPFvPKiPiiiiEEvPKT_PS5_iiiT0_PKc" after disassembly {
  Number      : 117
  State       : disassembled
  Address     : 0x5940
  Size        : 0x220
  MaxSize     : 0x220
  Offset      : 0x5940
  Section     : .text
  Orc Section : .local.text._Z14test_copyrangeIiPFvPKiPiiiiEEvPKT_PS5_iiiT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0116:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movl	%r8d, %r12d
    00000015: 	pushq	%rbp
    00000016: 	movl	%ecx, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movl	%edx, %ebx
    0000001b: 	subq	$0x28, %rsp
    0000001f: 	movq	0x60(%rsp), %rax
    00000024: 	movq	%r9, 0x8(%rsp)
    00000029: 	movq	%rax, 0x18(%rsp)
    0000002e: 	movslq	%r8d, %rax
    00000031: 	shlq	$0x2, %rax
    00000035: 	leaq	(%rdi,%rax), %rsi
    00000039: 	movq	%rax, 0x10(%rsp)
    0000003e: 	cmpq	%rdi, %rsi
    00000041: 	je	.Ltmp327 # Offset: 65
    00000047: 	leaq	-0x4(%rax), %rdx
    0000004b: 	leaq	0x4(%rdi), %rcx
    0000004f: 	movq	%r15, %rax
    00000052: 	subq	%rcx, %rax
    00000055: 	cmpq	$0x8, %rax
    00000059: 	jbe	.Ltmp328 # Offset: 89
    0000005f: 	cmpq	$0x8, %rdx
    00000063: 	jbe	.Ltmp328 # Offset: 99
    00000069: 	shrq	$0x2, %rdx
    0000006d: 	xorl	%eax, %eax
    0000006f: 	addq	$0x1, %rdx
    00000073: 	movq	%rdx, %rcx
    00000076: 	shrq	$0x2, %rcx
    0000007a: 	shlq	$0x4, %rcx
    0000007e: 	nop # Size: 2
.Ltmp329:
    00000080: 	movdqu	(%r14,%rax), %xmm1
    00000086: 	movups	%xmm1, (%r15,%rax)
    0000008b: 	addq	$0x10, %rax
    0000008f: 	cmpq	%rax, %rcx
    00000092: 	jne	.Ltmp329 # Offset: 146
    00000094: 	movq	%rdx, %rcx
    00000097: 	andq	$-0x4, %rcx
    0000009b: 	leaq	(,%rcx,4), %rax
    000000a3: 	leaq	(%r14,%rax), %rdi
    000000a7: 	addq	%r15, %rax
    000000aa: 	cmpq	%rcx, %rdx
    000000ad: 	je	.Ltmp327 # Offset: 173
    000000af: 	movl	(%rdi), %edx
    000000b1: 	movl	%edx, (%rax)
    000000b3: 	leaq	0x4(%rdi), %rdx
    000000b7: 	cmpq	%rdx, %rsi
    000000ba: 	je	.Ltmp327 # Offset: 186
    000000bc: 	movl	0x4(%rdi), %edx
    000000bf: 	movl	%edx, 0x4(%rax)
    000000c2: 	leaq	0x8(%rdi), %rdx
    000000c6: 	cmpq	%rdx, %rsi
    000000c9: 	je	.Ltmp327 # Offset: 201
    000000cb: 	movl	0x8(%rdi), %edx
    000000ce: 	movl	%edx, 0x8(%rax)
.Ltmp327:
    000000d1: 	movslq	%ebp, %rax
    000000d4: 	leaq	(%r15,%rax,4), %rcx
    000000d8: 	movslq	%ebx, %rax
    000000db: 	leaq	(%r15,%rax,4), %rdx
    000000df: 	cmpq	%rdx, %rcx
    000000e2: 	je	.Ltmp330 # Offset: 226
    000000e4: 	movabsq	$0x5851f42d4c957f2d, %rdi
    000000ee: 	movabsq	$0x14057b7ef767814f, %rsi
    000000f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp331:
    00000100: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000107: 	addq	$0x4, %rdx
    0000010b: 	imulq	%rdi, %rax
    0000010f: 	addq	%rsi, %rax
    00000112: 	movq	%rax, %r8
    00000115: 	movq	%rax, %r9
    00000118: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000011f: 	shrq	$0x14, %r8
    00000123: 	shlq	$0x17, %r9
    00000127: 	xorq	%r9, %r8
    0000012a: 	xorq	%r8, %rax
    0000012d: 	sarq	$0x3, %rax
    00000131: 	movl	%eax, -0x4(%rdx)
    00000134: 	cmpq	%rdx, %rcx
    00000137: 	jne	.Ltmp331 # Offset: 311
.Ltmp330:
    00000139: 	callq	clock@PLT # Offset: 313
    0000013e: 	movq	%rax, start_time(%rip)
    00000145: 	movl	iterations(%rip), %eax
    0000014b: 	testl	%eax, %eax
    0000014d: 	jle	.Ltmp332 # Offset: 333
    0000014f: 	xorl	%r13d, %r13d
    00000152: 	nopw	(%rax,%rax) # Size: 6
.Ltmp333:
    00000158: 	movq	0x8(%rsp), %rax
    0000015d: 	movl	%r12d, %r8d
    00000160: 	movl	%ebp, %ecx
    00000162: 	movl	%ebx, %edx
    00000164: 	movq	%r15, %rsi
    00000167: 	movq	%r14, %rdi
    0000016a: 	addl	$0x1, %r13d
    0000016e: 	callq	*%rax # Offset: 366
    00000170: 	cmpl	%r13d, iterations(%rip)
    00000177: 	jg	.Ltmp333 # Offset: 375
.Ltmp332:
    00000179: 	callq	clock@PLT # Offset: 377
    0000017e: 	movq	0x18(%rsp), %rdi
    00000183: 	pxor	%xmm0, %xmm0
    00000187: 	movq	%rax, end_time(%rip)
    0000018e: 	subq	start_time(%rip), %rax
    00000195: 	cvtsi2sd	%rax, %xmm0
    0000019a: 	divsd	DATAat0x6f00(%rip), %xmm0
    000001a2: 	callq	_Z13record_resultdPKc # Offset: 418
    000001a7: 	movq	0x10(%rsp), %rdx
    000001ac: 	movq	%r14, %rsi
    000001af: 	movq	%r15, %rdi
    000001b2: 	callq	memcmp@PLT # Offset: 434
    000001b7: 	testl	%eax, %eax
    000001b9: 	jne	.Ltmp334 # Offset: 441
    000001bb: 	addq	$0x28, %rsp
    000001bf: 	popq	%rbx
    000001c0: 	popq	%rbp
    000001c1: 	popq	%r12
    000001c3: 	popq	%r13
    000001c5: 	popq	%r14
    000001c7: 	popq	%r15
    000001c9: 	retq # Offset: 457
    000001ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp334:
    000001d0: 	movq	0x18(%rsp), %rdx
    000001d5: 	addq	$0x28, %rsp
    000001d9: 	leaq	DATAat0x6edf(%rip), %rsi
    000001e0: 	xorl	%eax, %eax
    000001e2: 	popq	%rbx
    000001e3: 	movl	$0x1, %edi
    000001e8: 	popq	%rbp
    000001e9: 	popq	%r12
    000001eb: 	popq	%r13
    000001ed: 	popq	%r14
    000001ef: 	popq	%r15
    000001f1: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 497
    000001f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp328:
    00000200: 	xorl	%eax, %eax
    00000202: 	nopw	(%rax,%rax) # Size: 6
.Ltmp335:
    00000208: 	movl	(%r14,%rax), %edx
    0000020c: 	movl	%edx, (%r15,%rax)
    00000210: 	addq	$0x4, %rax
    00000214: 	cmpq	%rax, 0x10(%rsp)
    00000219: 	jne	.Ltmp335 # Offset: 537
    0000021b: 	jmp	.Ltmp327 # Offset: 539
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_copyrangeIiPFvPKiPiiiiEEvPKT_PS5_iiiT0_PKc"

Binary Function "_fini" after disassembly {
  Number      : 118
  State       : disassembled
  Address     : 0x5b60
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x5b60
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0117:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 119 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 83 instructions were shortened
BOLT-INFO: removed 58 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 116 out of 131 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x20191c
