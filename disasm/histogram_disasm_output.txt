BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x400000, offset 0x400000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0x13020, which lies outside .bss
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x12fe8(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 2
  State       : disassembled
  Address     : 0x1300
  Size        : 0x31a8
  MaxSize     : 0x31b0
  Offset      : 0x1300
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB01:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x48, %rsp
    00000012: 	testl	%edi, %edi
    00000014: 	jle	.Ltmp1 # Offset: 20
    0000001a: 	leal	-0x1(%rdi), %eax
    0000001d: 	movl	%edi, %r13d
    00000020: 	movq	%rsi, %r14
    00000023: 	movq	%rsi, %rbx
    00000026: 	leaq	0x8(%rsi,%rax,8), %r12
    0000002b: 	leaq	DATAat0x105d6(%rip), %rbp
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2:
    00000038: 	movq	(%rbx), %rdx
    0000003b: 	movq	%rbp, %rsi
    0000003e: 	movl	$0x1, %edi
    00000043: 	xorl	%eax, %eax
    00000045: 	addq	$0x8, %rbx
    00000049: 	callq	__printf_chk@PLT # Offset: 73
    0000004e: 	cmpq	%rbx, %r12
    00000051: 	jne	.Ltmp2 # Offset: 81
    00000053: 	xorl	%eax, %eax
    00000055: 	leaq	DATAat0x105bc(%rip), %rsi
    0000005c: 	movl	$0x1, %edi
    00000061: 	callq	__printf_chk@PLT # Offset: 97
    00000066: 	cmpl	$0x1, %r13d
    0000006a: 	jg	.Ltmp3 # Offset: 106
.Ltmp147:
    00000070: 	movl	init_value(%rip), %edi
    00000076: 	callq	srand@PLT # Offset: 118
    0000007b: 	leaq	inputData8(%rip), %rdx
    00000082: 	movabsq	$0x5851f42d4c957f2d, %r8
    0000008c: 	movabsq	$0x14057b7ef767814f, %rdi
    00000096: 	leaq	0x7d00(%rdx), %rbx
    0000009d: 	nopl	(%rax) # Size: 3
.Ltmp4:
    000000a0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000a7: 	addq	$0x1, %rdx
    000000ab: 	imulq	%r8, %rax
    000000af: 	addq	%rdi, %rax
    000000b2: 	movq	%rax, %rcx
    000000b5: 	movq	%rax, %rsi
    000000b8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000bf: 	shrq	$0x14, %rcx
    000000c3: 	shlq	$0x17, %rsi
    000000c7: 	xorq	%rsi, %rcx
    000000ca: 	xorq	%rcx, %rax
    000000cd: 	sarq	$0x3, %rax
    000000d1: 	movb	%al, -0x1(%rdx)
    000000d4: 	cmpq	%rbx, %rdx
    000000d7: 	jne	.Ltmp4 # Offset: 215
    000000d9: 	leaq	inputData16(%rip), %rdx
    000000e0: 	movabsq	$0x5851f42d4c957f2d, %r8
    000000ea: 	movabsq	$0x14057b7ef767814f, %rdi
    000000f4: 	leaq	0xfa00(%rdx), %r9
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5:
    00000100: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000107: 	addq	$0x2, %rdx
    0000010b: 	imulq	%r8, %rax
    0000010f: 	addq	%rdi, %rax
    00000112: 	movq	%rax, %rcx
    00000115: 	movq	%rax, %rsi
    00000118: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000011f: 	shrq	$0x14, %rcx
    00000123: 	shlq	$0x17, %rsi
    00000127: 	xorq	%rsi, %rcx
    0000012a: 	xorq	%rcx, %rax
    0000012d: 	sarq	$0x3, %rax
    00000131: 	movw	%ax, -0x2(%rdx)
    00000135: 	cmpq	%r9, %rdx
    00000138: 	jne	.Ltmp5 # Offset: 312
    0000013a: 	leaq	inputData32(%rip), %rbp
    00000141: 	nopl	(%rax) # Size: 7
.Ltmp6:
    00000148: 	callq	rand@PLT # Offset: 328
    0000014d: 	pxor	%xmm0, %xmm0
    00000151: 	addq	$0x4, %rbp
    00000155: 	andl	$0xffffff, %eax
    0000015a: 	cvtsi2ss	%eax, %xmm0
    0000015e: 	mulss	DATAat0x10964(%rip), %xmm0
    00000166: 	leaq	inputData16(%rip), %rax
    0000016d: 	subss	DATAat0x10968(%rip), %xmm0
    00000175: 	movss	%xmm0, -0x4(%rbp)
    0000017a: 	cmpq	%rax, %rbp
    0000017d: 	jne	.Ltmp6 # Offset: 381
    0000017f: 	leaq	inputData64(%rip), %rbp
    00000186: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp7:
    00000190: 	callq	rand@PLT # Offset: 400
    00000195: 	pxor	%xmm0, %xmm0
    00000199: 	addq	$0x8, %rbp
    0000019d: 	andl	$0xffffff, %eax
    000001a2: 	cvtsi2ss	%eax, %xmm0
    000001a6: 	mulss	DATAat0x10964(%rip), %xmm0
    000001ae: 	leaq	inputData32(%rip), %rax
    000001b5: 	subss	DATAat0x10968(%rip), %xmm0
    000001bd: 	cvtss2sd	%xmm0, %xmm0
    000001c1: 	movsd	%xmm0, -0x8(%rbp)
    000001c6: 	cmpq	%rax, %rbp
    000001c9: 	jne	.Ltmp7 # Offset: 457
    000001cb: 	leaq	referenceHistogram(%rip), %rsi
    000001d2: 	xorl	%eax, %eax
    000001d4: 	movl	$0x100, %ecx
    000001d9: 	movq	%rsi, %rdi
    000001dc: 	leaq	inputData8(%rip), %r12
    000001e3: 	rep		stosq	%rax, %es:(%rdi)
    000001e6: 	movq	%r12, %rax
    000001e9: 	nopl	(%rax) # Size: 7
.Ltmp8:
    000001f0: 	movzbl	(%rax), %edx
    000001f3: 	addq	$0x1, %rax
    000001f7: 	addq	$0x1, (%rsi,%rdx,8)
    000001fc: 	cmpq	%rax, %rbx
    000001ff: 	jne	.Ltmp8 # Offset: 511
    00000201: 	leaq	referenceHistogramS(%rip), %rcx
    00000208: 	movl	$0x80000, %edx
    0000020d: 	xorl	%esi, %esi
    0000020f: 	movq	%rcx, %rdi
    00000212: 	callq	memset@PLT # Offset: 530
    00000217: 	movq	%rax, %rcx
    0000021a: 	leaq	inputData16(%rip), %rax
    00000221: 	leaq	0xfa00(%rax), %r9
    00000228: 	nopl	(%rax,%rax) # Size: 8
.Ltmp9:
    00000230: 	movzwl	(%rax), %edx
    00000233: 	addq	$0x2, %rax
    00000237: 	addq	$0x1, (%rcx,%rdx,8)
    0000023c: 	cmpq	%rax, %r9
    0000023f: 	jne	.Ltmp9 # Offset: 575
    00000241: 	callq	clock@PLT # Offset: 577
    00000246: 	movl	iterations(%rip), %r8d
    0000024d: 	movq	%rax, start_time(%rip)
    00000254: 	testl	%r8d, %r8d
    00000257: 	jle	.Ltmp10 # Offset: 599
    00000259: 	xorl	%esi, %esi
    0000025b: 	leaq	histogram16(%rip), %rbp
    00000262: 	xorl	%eax, %eax
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp12:
    00000268: 	movl	$0x40, %ecx
    0000026d: 	movq	%rbp, %rdi
    00000270: 	movq	%r12, %rdx
    00000273: 	rep		stosq	%rax, %es:(%rdi)
    00000276: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp11:
    00000280: 	movzbl	(%rdx), %ecx
    00000283: 	addq	$0x1, %rdx
    00000287: 	addw	$0x1, (%rbp,%rcx,2)
    0000028d: 	cmpq	%rdx, %rbx
    00000290: 	jne	.Ltmp11 # Offset: 656
    00000292: 	addl	$0x1, %esi
    00000295: 	cmpl	%r8d, %esi
    00000298: 	jne	.Ltmp12 # Offset: 664
.Ltmp10:
    0000029a: 	leaq	histogram16(%rip), %r10
    000002a1: 	leaq	referenceHistogram(%rip), %rax
    000002a8: 	xorl	%r8d, %r8d
    000002ab: 	movq	%rax, 0x8(%rsp)
    000002b0: 	movq	%rax, %r15
    000002b3: 	movq	%r10, %rbp
    000002b6: 	movq	%r10, %r14
    000002b9: 	jmp	.Ltmp13 # Offset: 697
    000002bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp15:
    000002c0: 	addq	$0x1, %r8
    000002c4: 	addq	$0x2, %r14
    000002c8: 	addq	$0x8, %r15
    000002cc: 	cmpq	$0x100, %r8
    000002d3: 	je	.Ltmp14 # Offset: 723
.Ltmp13:
    000002d9: 	movzwl	(%r15), %eax
    000002dd: 	cmpw	%ax, (%r14)
    000002e1: 	je	.Ltmp15 # Offset: 737
    000002e3: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    000002ea: 	movl	$0x5, %edx
    000002ef: 	movq	%r10, 0x20(%rsp)
    000002f4: 	leaq	DATAat0x108e4(%rip), %rsi
    000002fb: 	movq	%r13, %rdi
    000002fe: 	movq	%r8, 0x10(%rsp)
    00000303: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 771
    00000308: 	leaq	DATAat0x10118(%rip), %rax
    0000030f: 	movl	$0x1e, %edx
    00000314: 	movq	%r13, %rdi
    00000317: 	movq	%rax, %rsi
    0000031a: 	movq	%rax, 0x18(%rsp)
    0000031f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 799
    00000324: 	movl	$0xf, %edx
    00000329: 	leaq	DATAat0x108ea(%rip), %rsi
    00000330: 	movq	%r13, %rdi
    00000333: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 819
    00000338: 	movq	0x10(%rsp), %rsi
    0000033d: 	movq	%r13, %rdi
    00000340: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 832
    00000345: 	movl	$0xb, %edx
    0000034a: 	leaq	DATAat0x108fa(%rip), %rsi
    00000351: 	movq	%rax, %rdi
    00000354: 	movq	%rax, 0x10(%rsp)
    00000359: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 857
    0000035e: 	movq	(%r15), %rsi
    00000361: 	movq	0x10(%rsp), %rdi
    00000366: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 870
    0000036b: 	movl	$0x4, %edx
    00000370: 	leaq	DATAat0x10906(%rip), %rsi
    00000377: 	movq	%rax, %rdi
    0000037a: 	movq	%rax, %r15
    0000037d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 893
    00000382: 	movzwl	(%r14), %esi
    00000386: 	movq	%r15, %rdi
    00000389: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 905
    0000038e: 	movl	$0x2, %edx
    00000393: 	leaq	DATAat0x1090b(%rip), %rsi
    0000039a: 	movq	%rax, %r14
    0000039d: 	movq	%rax, %rdi
    000003a0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 928
    000003a5: 	movq	(%r14), %rax
    000003a8: 	movq	0x20(%rsp), %r10
    000003ad: 	movq	-0x18(%rax), %rax
    000003b1: 	movq	0xf0(%r14,%rax), %r15
    000003b9: 	testq	%r15, %r15
    000003bc: 	je	.Ltmp16 # Offset: 956
    000003c2: 	cmpb	$0x0, 0x38(%r15)
    000003c7: 	je	.Ltmp17 # Offset: 967
    000003cd: 	movzbl	0x43(%r15), %edx
.Ltmp148:
    000003d2: 	movsbl	%dl, %esi
    000003d5: 	movq	%r14, %rdi
    000003d8: 	movq	%r10, 0x10(%rsp)
    000003dd: 	callq	_ZNSo3putEc@PLT # Offset: 989
    000003e2: 	movq	%rax, %rdi
    000003e5: 	callq	_ZNSo5flushEv@PLT # Offset: 997
    000003ea: 	movq	0x10(%rsp), %r10
.Ltmp169:
    000003ef: 	movq	%r10, 0x10(%rsp)
    000003f4: 	callq	clock@PLT # Offset: 1012
    000003f9: 	movq	0x18(%rsp), %rdi
    000003fe: 	pxor	%xmm0, %xmm0
    00000402: 	movq	%rax, end_time(%rip)
    00000409: 	subq	start_time(%rip), %rax
    00000410: 	cvtsi2sd	%rax, %xmm0
    00000415: 	divsd	DATAat0x10920(%rip), %xmm0
    0000041d: 	callq	_Z13record_resultdPKc # Offset: 1053
    00000422: 	callq	clock@PLT # Offset: 1058
    00000427: 	movl	iterations(%rip), %esi
    0000042d: 	movq	0x10(%rsp), %r10
    00000432: 	movq	%rax, start_time(%rip)
    00000439: 	testl	%esi, %esi
    0000043b: 	jle	.Ltmp18 # Offset: 1083
    0000043d: 	xorl	%edx, %edx
    0000043f: 	leaq	histogram32(%rip), %r15
    00000446: 	xorl	%eax, %eax
    00000448: 	nopl	(%rax,%rax) # Size: 8
.Ltmp20:
    00000450: 	movl	$0x80, %ecx
    00000455: 	movq	%r15, %rdi
    00000458: 	rep		stosq	%rax, %es:(%rdi)
    0000045b: 	movq	%r12, %rcx
    0000045e: 	nop # Size: 2
.Ltmp19:
    00000460: 	movzbl	(%rcx), %edi
    00000463: 	addq	$0x1, %rcx
    00000467: 	addl	$0x1, (%r15,%rdi,4)
    0000046c: 	cmpq	%rcx, %rbx
    0000046f: 	jne	.Ltmp19 # Offset: 1135
    00000471: 	addl	$0x1, %edx
    00000474: 	cmpl	%esi, %edx
    00000476: 	jne	.Ltmp20 # Offset: 1142
.Ltmp18:
    00000478: 	leaq	histogram32(%rip), %r11
    0000047f: 	leaq	referenceHistogram(%rip), %r14
    00000486: 	xorl	%r8d, %r8d
    00000489: 	movq	%r11, %r15
    0000048c: 	movq	%r11, %r13
    0000048f: 	jmp	.Ltmp21 # Offset: 1167
    00000491: 	nopl	(%rax) # Size: 7
.Ltmp23:
    00000498: 	addq	$0x1, %r8
    0000049c: 	addq	$0x4, %r13
    000004a0: 	addq	$0x8, %r14
    000004a4: 	cmpq	$0x100, %r8
    000004ab: 	je	.Ltmp22 # Offset: 1195
.Ltmp21:
    000004b1: 	movl	(%r14), %eax
    000004b4: 	cmpl	%eax, (%r13)
    000004b8: 	je	.Ltmp23 # Offset: 1208
    000004ba: 	movl	$0x5, %edx
    000004bf: 	leaq	DATAat0x108e4(%rip), %rsi
    000004c6: 	movq	%r8, 0x10(%rsp)
    000004cb: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    000004d2: 	movq	%r10, 0x28(%rsp)
    000004d7: 	movq	%r11, 0x18(%rsp)
    000004dc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1244
    000004e1: 	leaq	DATAat0x10138(%rip), %rax
    000004e8: 	movl	$0x1e, %edx
    000004ed: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    000004f4: 	movq	%rax, %rsi
    000004f7: 	movq	%rax, 0x20(%rsp)
    000004fc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1276
    00000501: 	movl	$0xf, %edx
    00000506: 	leaq	DATAat0x108ea(%rip), %rsi
    0000050d: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    00000514: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1300
    00000519: 	movq	0x10(%rsp), %rsi
    0000051e: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    00000525: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 1317
    0000052a: 	movl	$0xb, %edx
    0000052f: 	leaq	DATAat0x108fa(%rip), %rsi
    00000536: 	movq	%rax, %rdi
    00000539: 	movq	%rax, 0x10(%rsp)
    0000053e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1342
    00000543: 	movq	(%r14), %rsi
    00000546: 	movq	0x10(%rsp), %rdi
    0000054b: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 1355
    00000550: 	movl	$0x4, %edx
    00000555: 	leaq	DATAat0x10906(%rip), %rsi
    0000055c: 	movq	%rax, %rdi
    0000055f: 	movq	%rax, %r14
    00000562: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1378
    00000567: 	movl	(%r13), %esi
    0000056b: 	movq	%r14, %rdi
    0000056e: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 1390
    00000573: 	movl	$0x2, %edx
    00000578: 	leaq	DATAat0x1090b(%rip), %rsi
    0000057f: 	movq	%rax, %r13
    00000582: 	movq	%rax, %rdi
    00000585: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1413
    0000058a: 	movq	(%r13), %rax
    0000058e: 	movq	-0x18(%rax), %rax
    00000592: 	movq	0xf0(%r13,%rax), %r14
    0000059a: 	testq	%r14, %r14
    0000059d: 	je	.Ltmp16 # Offset: 1437
    000005a3: 	cmpb	$0x0, 0x38(%r14)
    000005a8: 	movq	0x18(%rsp), %r11
    000005ad: 	movq	0x28(%rsp), %r10
    000005b2: 	je	.Ltmp24 # Offset: 1458
    000005b8: 	movzbl	0x43(%r14), %edx
.Ltmp157:
    000005bd: 	movsbl	%dl, %esi
    000005c0: 	movq	%r13, %rdi
    000005c3: 	movq	%r11, 0x18(%rsp)
    000005c8: 	movq	%r10, 0x10(%rsp)
    000005cd: 	callq	_ZNSo3putEc@PLT # Offset: 1485
    000005d2: 	movq	%rax, %rdi
    000005d5: 	callq	_ZNSo5flushEv@PLT # Offset: 1493
    000005da: 	movq	0x10(%rsp), %r10
    000005df: 	movq	0x18(%rsp), %r11
.Ltmp168:
    000005e4: 	movq	%r11, 0x18(%rsp)
    000005e9: 	movq	%r10, 0x10(%rsp)
    000005ee: 	callq	clock@PLT # Offset: 1518
    000005f3: 	movq	0x20(%rsp), %rdi
    000005f8: 	pxor	%xmm0, %xmm0
    000005fc: 	movq	%rax, end_time(%rip)
    00000603: 	subq	start_time(%rip), %rax
    0000060a: 	cvtsi2sd	%rax, %xmm0
    0000060f: 	divsd	DATAat0x10920(%rip), %xmm0
    00000617: 	callq	_Z13record_resultdPKc # Offset: 1559
    0000061c: 	callq	clock@PLT # Offset: 1564
    00000621: 	movl	iterations(%rip), %esi
    00000627: 	movq	0x10(%rsp), %r10
    0000062c: 	movq	%rax, start_time(%rip)
    00000633: 	movq	0x18(%rsp), %r11
    00000638: 	testl	%esi, %esi
    0000063a: 	jle	.Ltmp25 # Offset: 1594
    0000063c: 	xorl	%edx, %edx
    0000063e: 	leaq	histogram64(%rip), %r14
    00000645: 	xorl	%eax, %eax
    00000647: 	nopw	(%rax,%rax) # Size: 9
.Ltmp27:
    00000650: 	movl	$0x100, %ecx
    00000655: 	movq	%r14, %rdi
    00000658: 	rep		stosq	%rax, %es:(%rdi)
    0000065b: 	movq	%r12, %rcx
    0000065e: 	nop # Size: 2
.Ltmp26:
    00000660: 	movzbl	(%rcx), %edi
    00000663: 	addq	$0x1, %rcx
    00000667: 	addq	$0x1, (%r14,%rdi,8)
    0000066c: 	cmpq	%rcx, %rbx
    0000066f: 	jne	.Ltmp26 # Offset: 1647
    00000671: 	addl	$0x1, %edx
    00000674: 	cmpl	%esi, %edx
    00000676: 	jne	.Ltmp27 # Offset: 1654
.Ltmp25:
    00000678: 	leaq	histogram64(%rip), %rax
    0000067f: 	leaq	referenceHistogram(%rip), %rcx
    00000686: 	xorl	%r8d, %r8d
    00000689: 	movq	%rax, 0x10(%rsp)
    0000068e: 	movq	%rax, %r13
    00000691: 	movq	%rax, %r14
    00000694: 	jmp	.Ltmp28 # Offset: 1684
    00000696: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp30:
    000006a0: 	addq	$0x1, %r8
    000006a4: 	addq	$0x8, %r13
    000006a8: 	addq	$0x8, %rcx
    000006ac: 	cmpq	$0x100, %r8
    000006b3: 	je	.Ltmp29 # Offset: 1715
.Ltmp28:
    000006b9: 	movq	(%rcx), %rax
    000006bc: 	cmpq	%rax, (%r13)
    000006c0: 	je	.Ltmp30 # Offset: 1728
    000006c2: 	movl	$0x5, %edx
    000006c7: 	leaq	DATAat0x108e4(%rip), %rsi
    000006ce: 	movq	%r8, 0x18(%rsp)
    000006d3: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    000006da: 	movq	%r10, 0x30(%rsp)
    000006df: 	movq	%r11, 0x20(%rsp)
    000006e4: 	movq	%rcx, 0x38(%rsp)
    000006e9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1769
    000006ee: 	leaq	DATAat0x10158(%rip), %rax
    000006f5: 	movl	$0x1e, %edx
    000006fa: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    00000701: 	movq	%rax, %rsi
    00000704: 	movq	%rax, 0x28(%rsp)
    00000709: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1801
    0000070e: 	movl	$0xf, %edx
    00000713: 	leaq	DATAat0x108ea(%rip), %rsi
    0000071a: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    00000721: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1825
    00000726: 	movq	0x18(%rsp), %rsi
    0000072b: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    00000732: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 1842
    00000737: 	movl	$0xb, %edx
    0000073c: 	leaq	DATAat0x108fa(%rip), %rsi
    00000743: 	movq	%rax, %rdi
    00000746: 	movq	%rax, 0x18(%rsp)
    0000074b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1867
    00000750: 	movq	0x38(%rsp), %rcx
    00000755: 	movq	0x18(%rsp), %rdi
    0000075a: 	movq	(%rcx), %rsi
    0000075d: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 1885
    00000762: 	movl	$0x4, %edx
    00000767: 	leaq	DATAat0x10906(%rip), %rsi
    0000076e: 	movq	%rax, %rdi
    00000771: 	movq	%rax, 0x18(%rsp)
    00000776: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1910
    0000077b: 	movq	(%r13), %rsi
    0000077f: 	movq	0x18(%rsp), %rdi
    00000784: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 1924
    00000789: 	movl	$0x2, %edx
    0000078e: 	leaq	DATAat0x1090b(%rip), %rsi
    00000795: 	movq	%rax, %r13
    00000798: 	movq	%rax, %rdi
    0000079b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1947
    000007a0: 	movq	(%r13), %rax
    000007a4: 	movq	-0x18(%rax), %rax
    000007a8: 	movq	0xf0(%r13,%rax), %rdi
    000007b0: 	testq	%rdi, %rdi
    000007b3: 	je	.Ltmp16 # Offset: 1971
    000007b9: 	cmpb	$0x0, 0x38(%rdi)
    000007bd: 	movq	0x20(%rsp), %r11
    000007c2: 	movq	0x30(%rsp), %r10
    000007c7: 	je	.Ltmp31 # Offset: 1991
    000007cd: 	movzbl	0x43(%rdi), %edx
.Ltmp156:
    000007d1: 	movsbl	%dl, %esi
    000007d4: 	movq	%r13, %rdi
    000007d7: 	movq	%r11, 0x20(%rsp)
    000007dc: 	movq	%r10, 0x18(%rsp)
    000007e1: 	callq	_ZNSo3putEc@PLT # Offset: 2017
    000007e6: 	movq	%rax, %rdi
    000007e9: 	callq	_ZNSo5flushEv@PLT # Offset: 2025
    000007ee: 	movq	0x18(%rsp), %r10
    000007f3: 	movq	0x20(%rsp), %r11
.Ltmp167:
    000007f8: 	movq	%r11, 0x20(%rsp)
    000007fd: 	movq	%r10, 0x18(%rsp)
    00000802: 	callq	clock@PLT # Offset: 2050
    00000807: 	movq	0x28(%rsp), %rdi
    0000080c: 	pxor	%xmm0, %xmm0
    00000810: 	movq	%rax, end_time(%rip)
    00000817: 	subq	start_time(%rip), %rax
    0000081e: 	cvtsi2sd	%rax, %xmm0
    00000823: 	divsd	DATAat0x10920(%rip), %xmm0
    0000082b: 	callq	_Z13record_resultdPKc # Offset: 2091
    00000830: 	movq	%rbp, %rdx
    00000833: 	movl	$0x7d00, %esi
    00000838: 	movq	%r12, %rdi
    0000083b: 	leaq	DATAat0x10178(%rip), %rcx
    00000842: 	callq	_Z15test_histogram2IhtEvPKT_iPT0_PKc # Offset: 2114
    00000847: 	movq	%r15, %rdx
    0000084a: 	movl	$0x7d00, %esi
    0000084f: 	movq	%r12, %rdi
    00000852: 	leaq	DATAat0x10198(%rip), %rcx
    00000859: 	callq	_Z15test_histogram2IhjEvPKT_iPT0_PKc # Offset: 2137
    0000085e: 	movq	%r14, %rdx
    00000861: 	movl	$0x7d00, %esi
    00000866: 	movq	%r12, %rdi
    00000869: 	leaq	DATAat0x101b8(%rip), %rcx
    00000870: 	callq	_Z15test_histogram2IhmEvPKT_iPT0_PKc # Offset: 2160
    00000875: 	callq	clock@PLT # Offset: 2165
    0000087a: 	movq	0x18(%rsp), %r10
    0000087f: 	movq	0x20(%rsp), %r11
    00000884: 	movl	iterations(%rip), %r8d
    0000088b: 	movq	%rax, start_time(%rip)
    00000892: 	testl	%r8d, %r8d
    00000895: 	jle	.Ltmp32 # Offset: 2197
    00000897: 	xorl	%esi, %esi
    00000899: 	xorl	%eax, %eax
    0000089b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp34:
    000008a0: 	movl	$0x40, %ecx
    000008a5: 	movq	%rbp, %rdi
    000008a8: 	rep		stosq	%rax, %es:(%rdi)
    000008ab: 	movq	%r12, %rdi
    000008ae: 	nop # Size: 2
.Ltmp33:
    000008b0: 	movl	(%rdi), %edx
    000008b2: 	addq	$0x4, %rdi
    000008b6: 	movl	%edx, %ecx
    000008b8: 	shrl	$0x18, %ecx
    000008bb: 	addw	$0x1, (%rbp,%rcx,2)
    000008c1: 	movl	%edx, %ecx
    000008c3: 	shrl	$0x10, %ecx
    000008c6: 	movzbl	%cl, %ecx
    000008c9: 	addw	$0x1, (%rbp,%rcx,2)
    000008cf: 	movl	%edx, %ecx
    000008d1: 	movzbl	%dl, %edx
    000008d4: 	shrl	$0x8, %ecx
    000008d7: 	movzbl	%cl, %ecx
    000008da: 	addw	$0x1, (%rbp,%rcx,2)
    000008e0: 	addw	$0x1, (%rbp,%rdx,2)
    000008e6: 	cmpq	%rdi, %rbx
    000008e9: 	jne	.Ltmp33 # Offset: 2281
    000008eb: 	addl	$0x1, %esi
    000008ee: 	cmpl	%r8d, %esi
    000008f1: 	jne	.Ltmp34 # Offset: 2289
.Ltmp32:
    000008f3: 	leaq	referenceHistogram(%rip), %r13
    000008fa: 	xorl	%r8d, %r8d
    000008fd: 	jmp	.Ltmp35 # Offset: 2301
    000008ff: 	nop # Size: 1
.Ltmp37:
    00000900: 	addq	$0x1, %r8
    00000904: 	addq	$0x2, %r10
    00000908: 	addq	$0x8, %r13
    0000090c: 	cmpq	$0x100, %r8
    00000913: 	je	.Ltmp36 # Offset: 2323
.Ltmp35:
    00000919: 	movzwl	(%r13), %eax
    0000091e: 	cmpw	%ax, (%r10)
    00000922: 	je	.Ltmp37 # Offset: 2338
    00000924: 	movl	$0x5, %edx
    00000929: 	leaq	DATAat0x108e4(%rip), %rsi
    00000930: 	movq	%r8, 0x18(%rsp)
    00000935: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    0000093c: 	movq	%r11, 0x28(%rsp)
    00000941: 	movq	%r10, 0x30(%rsp)
    00000946: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2374
    0000094b: 	leaq	DATAat0x101d8(%rip), %rax
    00000952: 	movl	$0x1e, %edx
    00000957: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    0000095e: 	movq	%rax, %rsi
    00000961: 	movq	%rax, 0x20(%rsp)
    00000966: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2406
    0000096b: 	movl	$0xf, %edx
    00000970: 	leaq	DATAat0x108ea(%rip), %rsi
    00000977: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    0000097e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2430
    00000983: 	movq	0x18(%rsp), %rsi
    00000988: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    0000098f: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 2447
    00000994: 	movl	$0xb, %edx
    00000999: 	leaq	DATAat0x108fa(%rip), %rsi
    000009a0: 	movq	%rax, %rdi
    000009a3: 	movq	%rax, 0x18(%rsp)
    000009a8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2472
    000009ad: 	movq	(%r13), %rsi
    000009b1: 	movq	0x18(%rsp), %rdi
    000009b6: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 2486
    000009bb: 	movl	$0x4, %edx
    000009c0: 	leaq	DATAat0x10906(%rip), %rsi
    000009c7: 	movq	%rax, %rdi
    000009ca: 	movq	%rax, %r13
    000009cd: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2509
    000009d2: 	movq	0x30(%rsp), %r10
    000009d7: 	movq	%r13, %rdi
    000009da: 	movzwl	(%r10), %esi
    000009de: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 2526
    000009e3: 	movl	$0x2, %edx
    000009e8: 	leaq	DATAat0x1090b(%rip), %rsi
    000009ef: 	movq	%rax, %r13
    000009f2: 	movq	%rax, %rdi
    000009f5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2549
    000009fa: 	movq	(%r13), %rax
    000009fe: 	movq	-0x18(%rax), %rax
    00000a02: 	movq	0xf0(%r13,%rax), %rdi
    00000a0a: 	testq	%rdi, %rdi
    00000a0d: 	je	.Ltmp16 # Offset: 2573
    00000a13: 	cmpb	$0x0, 0x38(%rdi)
    00000a17: 	movq	0x28(%rsp), %r11
    00000a1c: 	je	.Ltmp38 # Offset: 2588
    00000a22: 	movzbl	0x43(%rdi), %edx
.Ltmp155:
    00000a26: 	movsbl	%dl, %esi
    00000a29: 	movq	%r13, %rdi
    00000a2c: 	movq	%r11, 0x18(%rsp)
    00000a31: 	callq	_ZNSo3putEc@PLT # Offset: 2609
    00000a36: 	movq	%rax, %rdi
    00000a39: 	callq	_ZNSo5flushEv@PLT # Offset: 2617
    00000a3e: 	movq	0x18(%rsp), %r11
.Ltmp166:
    00000a43: 	movq	%r11, 0x18(%rsp)
    00000a48: 	callq	clock@PLT # Offset: 2632
    00000a4d: 	movq	0x20(%rsp), %rdi
    00000a52: 	pxor	%xmm0, %xmm0
    00000a56: 	movq	%rax, end_time(%rip)
    00000a5d: 	subq	start_time(%rip), %rax
    00000a64: 	cvtsi2sd	%rax, %xmm0
    00000a69: 	divsd	DATAat0x10920(%rip), %xmm0
    00000a71: 	callq	_Z13record_resultdPKc # Offset: 2673
    00000a76: 	callq	clock@PLT # Offset: 2678
    00000a7b: 	movl	iterations(%rip), %r8d
    00000a82: 	movq	0x18(%rsp), %r11
    00000a87: 	movq	%rax, start_time(%rip)
    00000a8e: 	testl	%r8d, %r8d
    00000a91: 	jle	.Ltmp39 # Offset: 2705
    00000a93: 	xorl	%esi, %esi
    00000a95: 	xorl	%eax, %eax
    00000a97: 	nopw	(%rax,%rax) # Size: 9
.Ltmp41:
    00000aa0: 	movl	$0x80, %ecx
    00000aa5: 	movq	%r15, %rdi
    00000aa8: 	rep		stosq	%rax, %es:(%rdi)
    00000aab: 	movq	%r12, %rdi
    00000aae: 	nop # Size: 2
.Ltmp40:
    00000ab0: 	movl	(%rdi), %edx
    00000ab2: 	addq	$0x4, %rdi
    00000ab6: 	movl	%edx, %ecx
    00000ab8: 	shrl	$0x18, %ecx
    00000abb: 	addl	$0x1, (%r15,%rcx,4)
    00000ac0: 	movl	%edx, %ecx
    00000ac2: 	shrl	$0x10, %ecx
    00000ac5: 	movzbl	%cl, %ecx
    00000ac8: 	addl	$0x1, (%r15,%rcx,4)
    00000acd: 	movl	%edx, %ecx
    00000acf: 	movzbl	%dl, %edx
    00000ad2: 	shrl	$0x8, %ecx
    00000ad5: 	movzbl	%cl, %ecx
    00000ad8: 	addl	$0x1, (%r15,%rcx,4)
    00000add: 	addl	$0x1, (%r15,%rdx,4)
    00000ae2: 	cmpq	%rdi, %rbx
    00000ae5: 	jne	.Ltmp40 # Offset: 2789
    00000ae7: 	addl	$0x1, %esi
    00000aea: 	cmpl	%r8d, %esi
    00000aed: 	jne	.Ltmp41 # Offset: 2797
.Ltmp39:
    00000aef: 	leaq	referenceHistogram(%rip), %r13
    00000af6: 	xorl	%r8d, %r8d
    00000af9: 	jmp	.Ltmp42 # Offset: 2809
    00000afb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp44:
    00000b00: 	addq	$0x1, %r8
    00000b04: 	addq	$0x4, %r11
    00000b08: 	addq	$0x8, %r13
    00000b0c: 	cmpq	$0x100, %r8
    00000b13: 	je	.Ltmp43 # Offset: 2835
.Ltmp42:
    00000b19: 	movl	(%r13), %eax
    00000b1d: 	cmpl	%eax, (%r11)
    00000b20: 	je	.Ltmp44 # Offset: 2848
    00000b22: 	movl	$0x5, %edx
    00000b27: 	leaq	DATAat0x108e4(%rip), %rsi
    00000b2e: 	movq	%r8, 0x20(%rsp)
    00000b33: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    00000b3a: 	movq	%r11, 0x28(%rsp)
    00000b3f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2879
    00000b44: 	leaq	DATAat0x101f8(%rip), %rax
    00000b4b: 	movl	$0x1e, %edx
    00000b50: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    00000b57: 	movq	%rax, %rsi
    00000b5a: 	movq	%rax, 0x18(%rsp)
    00000b5f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2911
    00000b64: 	movl	$0xf, %edx
    00000b69: 	leaq	DATAat0x108ea(%rip), %rsi
    00000b70: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    00000b77: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2935
    00000b7c: 	movq	0x20(%rsp), %rsi
    00000b81: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    00000b88: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 2952
    00000b8d: 	movl	$0xb, %edx
    00000b92: 	leaq	DATAat0x108fa(%rip), %rsi
    00000b99: 	movq	%rax, %rdi
    00000b9c: 	movq	%rax, 0x20(%rsp)
    00000ba1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 2977
    00000ba6: 	movq	(%r13), %rsi
    00000baa: 	movq	0x20(%rsp), %rdi
    00000baf: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 2991
    00000bb4: 	movl	$0x4, %edx
    00000bb9: 	leaq	DATAat0x10906(%rip), %rsi
    00000bc0: 	movq	%rax, %rdi
    00000bc3: 	movq	%rax, %r13
    00000bc6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3014
    00000bcb: 	movq	0x28(%rsp), %r11
    00000bd0: 	movq	%r13, %rdi
    00000bd3: 	movl	(%r11), %esi
    00000bd6: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 3030
    00000bdb: 	movl	$0x2, %edx
    00000be0: 	leaq	DATAat0x1090b(%rip), %rsi
    00000be7: 	movq	%rax, %r13
    00000bea: 	movq	%rax, %rdi
    00000bed: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3053
    00000bf2: 	movq	(%r13), %rax
    00000bf6: 	movq	-0x18(%rax), %rax
    00000bfa: 	movq	0xf0(%r13,%rax), %rdi
    00000c02: 	testq	%rdi, %rdi
    00000c05: 	je	.Ltmp16 # Offset: 3077
    00000c0b: 	cmpb	$0x0, 0x38(%rdi)
    00000c0f: 	je	.Ltmp45 # Offset: 3087
    00000c15: 	movzbl	0x43(%rdi), %edx
.Ltmp165:
    00000c19: 	movq	%r13, %rdi
    00000c1c: 	movsbl	%dl, %esi
    00000c1f: 	callq	_ZNSo3putEc@PLT # Offset: 3103
    00000c24: 	movq	%rax, %rdi
    00000c27: 	callq	_ZNSo5flushEv@PLT # Offset: 3111
.Ltmp171:
    00000c2c: 	callq	clock@PLT # Offset: 3116
    00000c31: 	movq	0x18(%rsp), %rdi
    00000c36: 	pxor	%xmm0, %xmm0
    00000c3a: 	movq	%rax, end_time(%rip)
    00000c41: 	subq	start_time(%rip), %rax
    00000c48: 	cvtsi2sd	%rax, %xmm0
    00000c4d: 	divsd	DATAat0x10920(%rip), %xmm0
    00000c55: 	callq	_Z13record_resultdPKc # Offset: 3157
    00000c5a: 	callq	clock@PLT # Offset: 3162
    00000c5f: 	movl	iterations(%rip), %r8d
    00000c66: 	movq	%rax, start_time(%rip)
    00000c6d: 	testl	%r8d, %r8d
    00000c70: 	jle	.Ltmp46 # Offset: 3184
    00000c72: 	xorl	%esi, %esi
    00000c74: 	xorl	%eax, %eax
    00000c76: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp48:
    00000c80: 	movl	$0x100, %ecx
    00000c85: 	movq	%r14, %rdi
    00000c88: 	rep		stosq	%rax, %es:(%rdi)
    00000c8b: 	movq	%r12, %rdi
    00000c8e: 	nop # Size: 2
.Ltmp47:
    00000c90: 	movl	(%rdi), %edx
    00000c92: 	addq	$0x4, %rdi
    00000c96: 	movl	%edx, %ecx
    00000c98: 	shrl	$0x18, %ecx
    00000c9b: 	addq	$0x1, (%r14,%rcx,8)
    00000ca0: 	movl	%edx, %ecx
    00000ca2: 	shrl	$0x10, %ecx
    00000ca5: 	movzbl	%cl, %ecx
    00000ca8: 	addq	$0x1, (%r14,%rcx,8)
    00000cad: 	movl	%edx, %ecx
    00000caf: 	movzbl	%dl, %edx
    00000cb2: 	shrl	$0x8, %ecx
    00000cb5: 	movzbl	%cl, %ecx
    00000cb8: 	addq	$0x1, (%r14,%rcx,8)
    00000cbd: 	addq	$0x1, (%r14,%rdx,8)
    00000cc2: 	cmpq	%rdi, %rbx
    00000cc5: 	jne	.Ltmp47 # Offset: 3269
    00000cc7: 	addl	$0x1, %esi
    00000cca: 	cmpl	%r8d, %esi
    00000ccd: 	jne	.Ltmp48 # Offset: 3277
.Ltmp46:
    00000ccf: 	movq	0x8(%rsp), %rax
    00000cd4: 	movq	0x10(%rsp), %rdx
    00000cd9: 	xorl	%ebx, %ebx
    00000cdb: 	jmp	.Ltmp49 # Offset: 3291
    00000cdd: 	nopl	(%rax) # Size: 3
.Ltmp51:
    00000ce0: 	addq	$0x1, %rbx
    00000ce4: 	addq	$0x8, %rdx
    00000ce8: 	addq	$0x8, %rax
    00000cec: 	cmpq	$0x100, %rbx
    00000cf3: 	je	.Ltmp50 # Offset: 3315
.Ltmp49:
    00000cf9: 	movq	(%rax), %rdi
    00000cfc: 	cmpq	%rdi, (%rdx)
    00000cff: 	je	.Ltmp51 # Offset: 3327
    00000d01: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    00000d08: 	movq	%rdx, 0x10(%rsp)
    00000d0d: 	movl	$0x5, %edx
    00000d12: 	leaq	DATAat0x108e4(%rip), %rsi
    00000d19: 	movq	%r13, %rdi
    00000d1c: 	movq	%rax, 0x8(%rsp)
    00000d21: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3361
    00000d26: 	leaq	DATAat0x10218(%rip), %rdi
    00000d2d: 	movl	$0x1e, %edx
    00000d32: 	movq	%rdi, %rsi
    00000d35: 	movq	%rdi, 0x18(%rsp)
    00000d3a: 	movq	%r13, %rdi
    00000d3d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3389
    00000d42: 	movl	$0xf, %edx
    00000d47: 	leaq	DATAat0x108ea(%rip), %rsi
    00000d4e: 	movq	%r13, %rdi
    00000d51: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3409
    00000d56: 	movq	%rbx, %rsi
    00000d59: 	movq	%r13, %rdi
    00000d5c: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 3420
    00000d61: 	movl	$0xb, %edx
    00000d66: 	leaq	DATAat0x108fa(%rip), %rsi
    00000d6d: 	movq	%rax, %rdi
    00000d70: 	movq	%rax, %rbx
    00000d73: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3443
    00000d78: 	movq	0x8(%rsp), %rax
    00000d7d: 	movq	%rbx, %rdi
    00000d80: 	movq	(%rax), %rsi
    00000d83: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 3459
    00000d88: 	movl	$0x4, %edx
    00000d8d: 	leaq	DATAat0x10906(%rip), %rsi
    00000d94: 	movq	%rax, %rdi
    00000d97: 	movq	%rax, %rbx
    00000d9a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3482
    00000d9f: 	movq	0x10(%rsp), %rax
    00000da4: 	movq	%rbx, %rdi
    00000da7: 	movq	(%rax), %rsi
    00000daa: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 3498
    00000daf: 	movl	$0x2, %edx
    00000db4: 	leaq	DATAat0x1090b(%rip), %rsi
    00000dbb: 	movq	%rax, %rbx
    00000dbe: 	movq	%rax, %rdi
    00000dc1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 3521
    00000dc6: 	movq	(%rbx), %rax
    00000dc9: 	movq	-0x18(%rax), %rax
    00000dcd: 	movq	0xf0(%rbx,%rax), %rdi
    00000dd5: 	testq	%rdi, %rdi
    00000dd8: 	je	.Ltmp16 # Offset: 3544
    00000dde: 	cmpb	$0x0, 0x38(%rdi)
    00000de2: 	je	.Ltmp52 # Offset: 3554
    00000de8: 	movzbl	0x43(%rdi), %eax
.Ltmp164:
    00000dec: 	movq	%rbx, %rdi
    00000def: 	movsbl	%al, %esi
    00000df2: 	callq	_ZNSo3putEc@PLT # Offset: 3570
    00000df7: 	movq	%rax, %rdi
    00000dfa: 	callq	_ZNSo5flushEv@PLT # Offset: 3578
.Ltmp170:
    00000dff: 	callq	clock@PLT # Offset: 3583
    00000e04: 	movq	0x18(%rsp), %rdi
    00000e09: 	pxor	%xmm0, %xmm0
    00000e0d: 	movq	%rax, end_time(%rip)
    00000e14: 	subq	start_time(%rip), %rax
    00000e1b: 	cvtsi2sd	%rax, %xmm0
    00000e20: 	divsd	DATAat0x10920(%rip), %xmm0
    00000e28: 	callq	_Z13record_resultdPKc # Offset: 3624
    00000e2d: 	movq	%rbp, %rdx
    00000e30: 	movl	$0x7d00, %esi
    00000e35: 	movq	%r12, %rdi
    00000e38: 	leaq	DATAat0x10238(%rip), %rcx
    00000e3f: 	callq	_Z15test_histogram4IhtEvPKT_iPT0_PKc # Offset: 3647
    00000e44: 	movq	%r15, %rdx
    00000e47: 	movl	$0x7d00, %esi
    00000e4c: 	movq	%r12, %rdi
    00000e4f: 	leaq	DATAat0x10258(%rip), %rcx
    00000e56: 	callq	_Z15test_histogram4IhjEvPKT_iPT0_PKc # Offset: 3670
    00000e5b: 	movq	%r14, %rdx
    00000e5e: 	movl	$0x7d00, %esi
    00000e63: 	movq	%r12, %rdi
    00000e66: 	leaq	DATAat0x10278(%rip), %rcx
    00000e6d: 	callq	_Z15test_histogram4IhmEvPKT_iPT0_PKc # Offset: 3693
    00000e72: 	movq	%rbp, %rdx
    00000e75: 	movl	$0x7d00, %esi
    00000e7a: 	movq	%r12, %rdi
    00000e7d: 	leaq	DATAat0x10298(%rip), %rcx
    00000e84: 	callq	_Z15test_histogram5IhtEvPKT_iPT0_PKc # Offset: 3716
    00000e89: 	movq	%r15, %rdx
    00000e8c: 	movl	$0x7d00, %esi
    00000e91: 	movq	%r12, %rdi
    00000e94: 	leaq	DATAat0x102b8(%rip), %rcx
    00000e9b: 	callq	_Z15test_histogram5IhjEvPKT_iPT0_PKc # Offset: 3739
    00000ea0: 	movq	%r14, %rdx
    00000ea3: 	movl	$0x7d00, %esi
    00000ea8: 	movq	%r12, %rdi
    00000eab: 	leaq	DATAat0x102d8(%rip), %rcx
    00000eb2: 	callq	_Z15test_histogram5IhmEvPKT_iPT0_PKc # Offset: 3762
    00000eb7: 	movq	%rbp, %rdx
    00000eba: 	movl	$0x7d00, %esi
    00000ebf: 	movq	%r12, %rdi
    00000ec2: 	leaq	DATAat0x102f8(%rip), %rcx
    00000ec9: 	callq	_Z15test_histogram6ItEvPKhiPT_PKc # Offset: 3785
    00000ece: 	movq	%r15, %rdx
    00000ed1: 	movl	$0x7d00, %esi
    00000ed6: 	movq	%r12, %rdi
    00000ed9: 	leaq	DATAat0x10318(%rip), %rcx
    00000ee0: 	callq	_Z15test_histogram6IjEvPKhiPT_PKc # Offset: 3808
    00000ee5: 	movq	%r14, %rdx
    00000ee8: 	movl	$0x7d00, %esi
    00000eed: 	movq	%r12, %rdi
    00000ef0: 	leaq	DATAat0x10338(%rip), %rcx
    00000ef7: 	callq	_Z15test_histogram6ImEvPKhiPT_PKc # Offset: 3831
    00000efc: 	movl	iterations(%rip), %edx
    00000f02: 	xorl	%r8d, %r8d
    00000f05: 	xorl	%ecx, %ecx
    00000f07: 	movl	$0x7d00, %esi
    00000f0c: 	leaq	DATAat0x105da(%rip), %rdi
    00000f13: 	callq	_Z9summarizePKciiii # Offset: 3859
    00000f18: 	callq	clock@PLT # Offset: 3864
    00000f1d: 	movl	iterations(%rip), %ebx
    00000f23: 	movq	%rax, start_time(%rip)
    00000f2a: 	testl	%ebx, %ebx
    00000f2c: 	jle	.Ltmp53 # Offset: 3884
    00000f2e: 	xorl	%r12d, %r12d
    00000f31: 	leaq	histogram16S(%rip), %rbp
    00000f38: 	nopl	(%rax,%rax) # Size: 8
.Ltmp55:
    00000f40: 	movl	$0x20000, %edx
    00000f45: 	xorl	%esi, %esi
    00000f47: 	movq	%rbp, %rdi
    00000f4a: 	callq	memset@PLT # Offset: 3914
    00000f4f: 	leaq	inputData16(%rip), %rax
    00000f56: 	leaq	0xfa00(%rax), %r9
    00000f5d: 	nopl	(%rax) # Size: 3
.Ltmp54:
    00000f60: 	movzwl	(%rax), %edx
    00000f63: 	addq	$0x2, %rax
    00000f67: 	addw	$0x1, (%rbp,%rdx,2)
    00000f6d: 	cmpq	%rax, %r9
    00000f70: 	jne	.Ltmp54 # Offset: 3952
    00000f72: 	addl	$0x1, %r12d
    00000f76: 	cmpl	%ebx, %r12d
    00000f79: 	jne	.Ltmp55 # Offset: 3961
.Ltmp53:
    00000f7b: 	leaq	histogram16S(%rip), %r13
    00000f82: 	leaq	referenceHistogramS(%rip), %rax
    00000f89: 	xorl	%r15d, %r15d
    00000f8c: 	movq	%rax, 0x10(%rsp)
    00000f91: 	movq	%rax, %r12
    00000f94: 	movq	%r13, %rbp
    00000f97: 	movq	%r13, %rbx
    00000f9a: 	jmp	.Ltmp56 # Offset: 3994
    00000f9c: 	nopl	(%rax) # Size: 4
.Ltmp58:
    00000fa0: 	addq	$0x1, %r15
    00000fa4: 	addq	$0x2, %rbx
    00000fa8: 	addq	$0x8, %r12
    00000fac: 	cmpq	$0x10000, %r15
    00000fb3: 	je	.Ltmp57 # Offset: 4019
.Ltmp56:
    00000fb9: 	movzwl	(%r12), %eax
    00000fbe: 	cmpw	%ax, (%rbx)
    00000fc1: 	je	.Ltmp58 # Offset: 4033
    00000fc3: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000fca: 	movl	$0x5, %edx
    00000fcf: 	leaq	DATAat0x108e4(%rip), %rsi
    00000fd6: 	movq	%r14, %rdi
    00000fd9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4057
    00000fde: 	leaq	DATAat0x10358(%rip), %rax
    00000fe5: 	movl	$0x1f, %edx
    00000fea: 	movq	%r14, %rdi
    00000fed: 	movq	%rax, %rsi
    00000ff0: 	movq	%rax, 0x8(%rsp)
    00000ff5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4085
    00000ffa: 	movl	$0xf, %edx
    00000fff: 	leaq	DATAat0x108ea(%rip), %rsi
    00001006: 	movq	%r14, %rdi
    00001009: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4105
    0000100e: 	movq	%r15, %rsi
    00001011: 	movq	%r14, %rdi
    00001014: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 4116
    00001019: 	movl	$0xb, %edx
    0000101e: 	leaq	DATAat0x108fa(%rip), %rsi
    00001025: 	movq	%rax, %rdi
    00001028: 	movq	%rax, %r15
    0000102b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4139
    00001030: 	movq	(%r12), %rsi
    00001034: 	movq	%r15, %rdi
    00001037: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 4151
    0000103c: 	movl	$0x4, %edx
    00001041: 	leaq	DATAat0x10906(%rip), %rsi
    00001048: 	movq	%rax, %rdi
    0000104b: 	movq	%rax, %r12
    0000104e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4174
    00001053: 	movzwl	(%rbx), %esi
    00001056: 	movq	%r12, %rdi
    00001059: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 4185
    0000105e: 	movl	$0x2, %edx
    00001063: 	leaq	DATAat0x1090b(%rip), %rsi
    0000106a: 	movq	%rax, %r12
    0000106d: 	movq	%rax, %rdi
    00001070: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4208
    00001075: 	movq	(%r12), %rax
    00001079: 	movq	-0x18(%rax), %rax
    0000107d: 	movq	0xf0(%r12,%rax), %r15
    00001085: 	testq	%r15, %r15
    00001088: 	je	.Ltmp16 # Offset: 4232
    0000108e: 	cmpb	$0x0, 0x38(%r15)
    00001093: 	je	.Ltmp59 # Offset: 4243
    00001099: 	movzbl	0x43(%r15), %eax
.Ltmp163:
    0000109e: 	movq	%r12, %rdi
    000010a1: 	movsbl	%al, %esi
    000010a4: 	callq	_ZNSo3putEc@PLT # Offset: 4260
    000010a9: 	movq	%rax, %rdi
    000010ac: 	callq	_ZNSo5flushEv@PLT # Offset: 4268
.Ltmp183:
    000010b1: 	callq	clock@PLT # Offset: 4273
    000010b6: 	movq	0x8(%rsp), %rdi
    000010bb: 	pxor	%xmm0, %xmm0
    000010bf: 	movq	%rax, end_time(%rip)
    000010c6: 	subq	start_time(%rip), %rax
    000010cd: 	cvtsi2sd	%rax, %xmm0
    000010d2: 	divsd	DATAat0x10920(%rip), %xmm0
    000010da: 	callq	_Z13record_resultdPKc # Offset: 4314
    000010df: 	callq	clock@PLT # Offset: 4319
    000010e4: 	movl	iterations(%rip), %ebx
    000010ea: 	movq	%rax, start_time(%rip)
    000010f1: 	testl	%ebx, %ebx
    000010f3: 	jle	.Ltmp60 # Offset: 4339
    000010f5: 	xorl	%r14d, %r14d
    000010f8: 	leaq	histogram32S(%rip), %r12
    000010ff: 	nop # Size: 1
.Ltmp62:
    00001100: 	movl	$0x40000, %edx
    00001105: 	xorl	%esi, %esi
    00001107: 	movq	%r12, %rdi
    0000110a: 	callq	memset@PLT # Offset: 4362
    0000110f: 	leaq	inputData16(%rip), %rax
    00001116: 	leaq	0xfa00(%rax), %r9
    0000111d: 	nopl	(%rax) # Size: 3
.Ltmp61:
    00001120: 	movzwl	(%rax), %edx
    00001123: 	addq	$0x2, %rax
    00001127: 	addl	$0x1, (%r12,%rdx,4)
    0000112c: 	cmpq	%rax, %r9
    0000112f: 	jne	.Ltmp61 # Offset: 4399
    00001131: 	addl	$0x1, %r14d
    00001135: 	cmpl	%ebx, %r14d
    00001138: 	jne	.Ltmp62 # Offset: 4408
.Ltmp60:
    0000113a: 	leaq	histogram32S(%rip), %rax
    00001141: 	leaq	referenceHistogramS(%rip), %rcx
    00001148: 	xorl	%r10d, %r10d
    0000114b: 	movq	%rax, 0x8(%rsp)
    00001150: 	movq	%rax, %rbx
    00001153: 	movq	%rax, %r12
    00001156: 	jmp	.Ltmp63 # Offset: 4438
    00001158: 	nopl	(%rax,%rax) # Size: 8
.Ltmp65:
    00001160: 	addq	$0x1, %r10
    00001164: 	addq	$0x4, %rbx
    00001168: 	addq	$0x8, %rcx
    0000116c: 	cmpq	$0x10000, %r10
    00001173: 	je	.Ltmp64 # Offset: 4467
.Ltmp63:
    00001179: 	movl	(%rcx), %eax
    0000117b: 	cmpl	%eax, (%rbx)
    0000117d: 	je	.Ltmp65 # Offset: 4477
    0000117f: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00001186: 	movl	$0x5, %edx
    0000118b: 	leaq	DATAat0x108e4(%rip), %rsi
    00001192: 	movq	%r10, 0x20(%rsp)
    00001197: 	movq	%r14, %rdi
    0000119a: 	leaq	DATAat0x10378(%rip), %r15
    000011a1: 	movq	%rcx, 0x18(%rsp)
    000011a6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4518
    000011ab: 	movq	%r14, %rdi
    000011ae: 	movl	$0x1f, %edx
    000011b3: 	movq	%r15, %rsi
    000011b6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4534
    000011bb: 	movl	$0xf, %edx
    000011c0: 	movq	%r14, %rdi
    000011c3: 	leaq	DATAat0x108ea(%rip), %rsi
    000011ca: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4554
    000011cf: 	movq	0x20(%rsp), %rsi
    000011d4: 	movq	%r14, %rdi
    000011d7: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 4567
    000011dc: 	movl	$0xb, %edx
    000011e1: 	leaq	DATAat0x108fa(%rip), %rsi
    000011e8: 	movq	%rax, %rdi
    000011eb: 	movq	%rax, %r14
    000011ee: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4590
    000011f3: 	movq	0x18(%rsp), %rcx
    000011f8: 	movq	%r14, %rdi
    000011fb: 	movq	(%rcx), %rsi
    000011fe: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 4606
    00001203: 	movl	$0x4, %edx
    00001208: 	leaq	DATAat0x10906(%rip), %rsi
    0000120f: 	movq	%rax, %rdi
    00001212: 	movq	%rax, %r14
    00001215: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4629
    0000121a: 	movl	(%rbx), %esi
    0000121c: 	movq	%r14, %rdi
    0000121f: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 4639
    00001224: 	movl	$0x2, %edx
    00001229: 	leaq	DATAat0x1090b(%rip), %rsi
    00001230: 	movq	%rax, %r14
    00001233: 	movq	%rax, %rdi
    00001236: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4662
    0000123b: 	movq	(%r14), %rax
    0000123e: 	movq	-0x18(%rax), %rax
    00001242: 	movq	0xf0(%r14,%rax), %rbx
    0000124a: 	testq	%rbx, %rbx
    0000124d: 	je	.Ltmp16 # Offset: 4685
    00001253: 	cmpb	$0x0, 0x38(%rbx)
    00001257: 	je	.Ltmp66 # Offset: 4695
    0000125d: 	movzbl	0x43(%rbx), %eax
.Ltmp162:
    00001261: 	movq	%r14, %rdi
    00001264: 	movsbl	%al, %esi
    00001267: 	callq	_ZNSo3putEc@PLT # Offset: 4711
    0000126c: 	movq	%rax, %rdi
    0000126f: 	callq	_ZNSo5flushEv@PLT # Offset: 4719
.Ltmp182:
    00001274: 	callq	clock@PLT # Offset: 4724
    00001279: 	movq	%r15, %rdi
    0000127c: 	pxor	%xmm0, %xmm0
    00001280: 	movq	%rax, end_time(%rip)
    00001287: 	subq	start_time(%rip), %rax
    0000128e: 	cvtsi2sd	%rax, %xmm0
    00001293: 	divsd	DATAat0x10920(%rip), %xmm0
    0000129b: 	callq	_Z13record_resultdPKc # Offset: 4763
    000012a0: 	callq	clock@PLT # Offset: 4768
    000012a5: 	movl	iterations(%rip), %ebx
    000012ab: 	movq	%rax, start_time(%rip)
    000012b2: 	testl	%ebx, %ebx
    000012b4: 	jle	.Ltmp67 # Offset: 4788
    000012b6: 	xorl	%r15d, %r15d
    000012b9: 	leaq	histogram64S(%rip), %r14
.Ltmp69:
    000012c0: 	movl	$0x80000, %edx
    000012c5: 	xorl	%esi, %esi
    000012c7: 	movq	%r14, %rdi
    000012ca: 	callq	memset@PLT # Offset: 4810
    000012cf: 	leaq	inputData16(%rip), %rax
    000012d6: 	leaq	0xfa00(%rax), %r9
    000012dd: 	nopl	(%rax) # Size: 3
.Ltmp68:
    000012e0: 	movzwl	(%rax), %edx
    000012e3: 	addq	$0x2, %rax
    000012e7: 	addq	$0x1, (%r14,%rdx,8)
    000012ec: 	cmpq	%rax, %r9
    000012ef: 	jne	.Ltmp68 # Offset: 4847
    000012f1: 	addl	$0x1, %r15d
    000012f5: 	cmpl	%ebx, %r15d
    000012f8: 	jne	.Ltmp69 # Offset: 4856
.Ltmp67:
    000012fa: 	leaq	histogram64S(%rip), %rbx
    00001301: 	leaq	referenceHistogramS(%rip), %rcx
    00001308: 	xorl	%r11d, %r11d
    0000130b: 	movq	%rbx, %r14
    0000130e: 	movq	%rbx, %r15
    00001311: 	jmp	.Ltmp70 # Offset: 4881
    00001313: 	nopl	(%rax,%rax) # Size: 5
.Ltmp72:
    00001318: 	addq	$0x1, %r11
    0000131c: 	addq	$0x8, %r15
    00001320: 	addq	$0x8, %rcx
    00001324: 	cmpq	$0x10000, %r11
    0000132b: 	je	.Ltmp71 # Offset: 4907
.Ltmp70:
    00001331: 	movq	(%rcx), %rax
    00001334: 	cmpq	%rax, (%r15)
    00001337: 	je	.Ltmp72 # Offset: 4919
    00001339: 	movl	$0x5, %edx
    0000133e: 	leaq	DATAat0x108e4(%rip), %rsi
    00001345: 	movq	%r11, 0x20(%rsp)
    0000134a: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    00001351: 	movq	%rcx, 0x28(%rsp)
    00001356: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4950
    0000135b: 	leaq	DATAat0x10398(%rip), %rax
    00001362: 	movl	$0x1f, %edx
    00001367: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    0000136e: 	movq	%rax, %rsi
    00001371: 	movq	%rax, 0x18(%rsp)
    00001376: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 4982
    0000137b: 	movl	$0xf, %edx
    00001380: 	leaq	DATAat0x108ea(%rip), %rsi
    00001387: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    0000138e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5006
    00001393: 	movq	0x20(%rsp), %rsi
    00001398: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    0000139f: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 5023
    000013a4: 	movl	$0xb, %edx
    000013a9: 	leaq	DATAat0x108fa(%rip), %rsi
    000013b0: 	movq	%rax, %rdi
    000013b3: 	movq	%rax, 0x20(%rsp)
    000013b8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5048
    000013bd: 	movq	0x28(%rsp), %rcx
    000013c2: 	movq	0x20(%rsp), %rdi
    000013c7: 	movq	(%rcx), %rsi
    000013ca: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 5066
    000013cf: 	movl	$0x4, %edx
    000013d4: 	leaq	DATAat0x10906(%rip), %rsi
    000013db: 	movq	%rax, %rdi
    000013de: 	movq	%rax, 0x20(%rsp)
    000013e3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5091
    000013e8: 	movq	(%r15), %rsi
    000013eb: 	movq	0x20(%rsp), %rdi
    000013f0: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 5104
    000013f5: 	movl	$0x2, %edx
    000013fa: 	leaq	DATAat0x1090b(%rip), %rsi
    00001401: 	movq	%rax, %r15
    00001404: 	movq	%rax, %rdi
    00001407: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5127
    0000140c: 	movq	(%r15), %rax
    0000140f: 	movq	-0x18(%rax), %rax
    00001413: 	movq	0xf0(%r15,%rax), %rdi
    0000141b: 	testq	%rdi, %rdi
    0000141e: 	je	.Ltmp16 # Offset: 5150
    00001424: 	cmpb	$0x0, 0x38(%rdi)
    00001428: 	je	.Ltmp73 # Offset: 5160
    0000142e: 	movzbl	0x43(%rdi), %edx
.Ltmp161:
    00001432: 	movq	%r15, %rdi
    00001435: 	movsbl	%dl, %esi
    00001438: 	callq	_ZNSo3putEc@PLT # Offset: 5176
    0000143d: 	movq	%rax, %rdi
    00001440: 	callq	_ZNSo5flushEv@PLT # Offset: 5184
.Ltmp181:
    00001445: 	callq	clock@PLT # Offset: 5189
    0000144a: 	movq	0x18(%rsp), %rdi
    0000144f: 	pxor	%xmm0, %xmm0
    00001453: 	movq	%rax, end_time(%rip)
    0000145a: 	subq	start_time(%rip), %rax
    00001461: 	cvtsi2sd	%rax, %xmm0
    00001466: 	divsd	DATAat0x10920(%rip), %xmm0
    0000146e: 	callq	_Z13record_resultdPKc # Offset: 5230
    00001473: 	leaq	DATAat0x103b8(%rip), %rcx
    0000147a: 	movq	%rbp, %rdx
    0000147d: 	movl	$0x7d00, %esi
    00001482: 	leaq	inputData16(%rip), %rdi
    00001489: 	callq	_Z15test_histogram2IttEvPKT_iPT0_PKc # Offset: 5257
    0000148e: 	leaq	DATAat0x103d8(%rip), %rcx
    00001495: 	movq	%r12, %rdx
    00001498: 	movl	$0x7d00, %esi
    0000149d: 	leaq	inputData16(%rip), %rdi
    000014a4: 	callq	_Z15test_histogram2ItjEvPKT_iPT0_PKc # Offset: 5284
    000014a9: 	leaq	DATAat0x103f8(%rip), %rcx
    000014b0: 	movq	%r14, %rdx
    000014b3: 	movl	$0x7d00, %esi
    000014b8: 	leaq	inputData16(%rip), %rdi
    000014bf: 	callq	_Z15test_histogram2ItmEvPKT_iPT0_PKc # Offset: 5311
    000014c4: 	callq	clock@PLT # Offset: 5316
    000014c9: 	movq	%rax, start_time(%rip)
    000014d0: 	movl	iterations(%rip), %eax
    000014d6: 	testl	%eax, %eax
    000014d8: 	jle	.Ltmp74 # Offset: 5336
    000014de: 	xorl	%r15d, %r15d
    000014e1: 	movq	%rbx, 0x18(%rsp)
    000014e6: 	movl	%r15d, %ebx
    000014e9: 	movl	%eax, %r15d
    000014ec: 	nopl	(%rax) # Size: 4
.Ltmp76:
    000014f0: 	xorl	%esi, %esi
    000014f2: 	movl	$0x20000, %edx
    000014f7: 	movq	%rbp, %rdi
    000014fa: 	callq	memset@PLT # Offset: 5370
    000014ff: 	leaq	inputData16(%rip), %rsi
    00001506: 	leaq	0xfa00(%rsi), %r9
    0000150d: 	nopl	(%rax) # Size: 3
.Ltmp75:
    00001510: 	movq	(%rsi), %rax
    00001513: 	addq	$0x8, %rsi
    00001517: 	movq	%rax, %rdx
    0000151a: 	shrq	$0x30, %rdx
    0000151e: 	addw	$0x1, (%rbp,%rdx,2)
    00001524: 	movq	%rax, %rdx
    00001527: 	shrq	$0x1f, %rdx
    0000152b: 	andl	$0x1fffe, %edx
    00001531: 	addw	$0x1, (%rbp,%rdx)
    00001537: 	movq	%rax, %rdx
    0000153a: 	movzwl	%ax, %eax
    0000153d: 	shrq	$0xf, %rdx
    00001541: 	andl	$0x1fffe, %edx
    00001547: 	addw	$0x1, (%rbp,%rdx)
    0000154d: 	addw	$0x1, (%rbp,%rax,2)
    00001553: 	cmpq	%rsi, %r9
    00001556: 	jne	.Ltmp75 # Offset: 5462
    00001558: 	addl	$0x1, %ebx
    0000155b: 	cmpl	%r15d, %ebx
    0000155e: 	jne	.Ltmp76 # Offset: 5470
    00001560: 	movq	0x18(%rsp), %rbx
.Ltmp74:
    00001565: 	leaq	referenceHistogramS(%rip), %r15
    0000156c: 	xorl	%r11d, %r11d
    0000156f: 	jmp	.Ltmp77 # Offset: 5487
    00001571: 	nopl	(%rax) # Size: 7
.Ltmp79:
    00001578: 	addq	$0x1, %r11
    0000157c: 	addq	$0x2, %r13
    00001580: 	addq	$0x8, %r15
    00001584: 	cmpq	$0x10000, %r11
    0000158b: 	je	.Ltmp78 # Offset: 5515
.Ltmp77:
    00001591: 	movzwl	(%r15), %eax
    00001595: 	cmpw	%ax, (%r13)
    0000159a: 	je	.Ltmp79 # Offset: 5530
    0000159c: 	movl	$0x5, %edx
    000015a1: 	leaq	DATAat0x108e4(%rip), %rsi
    000015a8: 	movq	%r11, 0x20(%rsp)
    000015ad: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    000015b4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5556
    000015b9: 	leaq	DATAat0x10418(%rip), %rax
    000015c0: 	movl	$0x1f, %edx
    000015c5: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    000015cc: 	movq	%rax, %rsi
    000015cf: 	movq	%rax, 0x18(%rsp)
    000015d4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5588
    000015d9: 	movl	$0xf, %edx
    000015de: 	leaq	DATAat0x108ea(%rip), %rsi
    000015e5: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    000015ec: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5612
    000015f1: 	movq	0x20(%rsp), %rsi
    000015f6: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    000015fd: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 5629
    00001602: 	movl	$0xb, %edx
    00001607: 	leaq	DATAat0x108fa(%rip), %rsi
    0000160e: 	movq	%rax, %rdi
    00001611: 	movq	%rax, 0x20(%rsp)
    00001616: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5654
    0000161b: 	movq	(%r15), %rsi
    0000161e: 	movq	0x20(%rsp), %rdi
    00001623: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 5667
    00001628: 	movl	$0x4, %edx
    0000162d: 	leaq	DATAat0x10906(%rip), %rsi
    00001634: 	movq	%rax, %rdi
    00001637: 	movq	%rax, %r15
    0000163a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5690
    0000163f: 	movzwl	(%r13), %esi
    00001644: 	movq	%r15, %rdi
    00001647: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 5703
    0000164c: 	movl	$0x2, %edx
    00001651: 	leaq	DATAat0x1090b(%rip), %rsi
    00001658: 	movq	%rax, %r13
    0000165b: 	movq	%rax, %rdi
    0000165e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 5726
    00001663: 	movq	(%r13), %rax
    00001667: 	movq	-0x18(%rax), %rax
    0000166b: 	movq	0xf0(%r13,%rax), %r15
    00001673: 	testq	%r15, %r15
    00001676: 	je	.Ltmp16 # Offset: 5750
    0000167c: 	cmpb	$0x0, 0x38(%r15)
    00001681: 	je	.Ltmp80 # Offset: 5761
    00001687: 	movzbl	0x43(%r15), %edx
.Ltmp160:
    0000168c: 	movq	%r13, %rdi
    0000168f: 	movsbl	%dl, %esi
    00001692: 	callq	_ZNSo3putEc@PLT # Offset: 5778
    00001697: 	movq	%rax, %rdi
    0000169a: 	callq	_ZNSo5flushEv@PLT # Offset: 5786
.Ltmp180:
    0000169f: 	callq	clock@PLT # Offset: 5791
    000016a4: 	movq	0x18(%rsp), %rdi
    000016a9: 	pxor	%xmm0, %xmm0
    000016ad: 	movq	%rax, end_time(%rip)
    000016b4: 	subq	start_time(%rip), %rax
    000016bb: 	cvtsi2sd	%rax, %xmm0
    000016c0: 	divsd	DATAat0x10920(%rip), %xmm0
    000016c8: 	callq	_Z13record_resultdPKc # Offset: 5832
    000016cd: 	callq	clock@PLT # Offset: 5837
    000016d2: 	movl	iterations(%rip), %r13d
    000016d9: 	movq	%rax, start_time(%rip)
    000016e0: 	testl	%r13d, %r13d
    000016e3: 	jle	.Ltmp81 # Offset: 5859
    000016e5: 	xorl	%r15d, %r15d
    000016e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp83:
    000016f0: 	movl	$0x40000, %edx
    000016f5: 	xorl	%esi, %esi
    000016f7: 	movq	%r12, %rdi
    000016fa: 	callq	memset@PLT # Offset: 5882
    000016ff: 	leaq	inputData16(%rip), %rcx
    00001706: 	leaq	0xfa00(%rcx), %r9
    0000170d: 	nopl	(%rax) # Size: 3
.Ltmp82:
    00001710: 	movq	(%rcx), %rax
    00001713: 	addq	$0x8, %rcx
    00001717: 	movq	%rax, %rdx
    0000171a: 	shrq	$0x30, %rdx
    0000171e: 	addl	$0x1, (%r12,%rdx,4)
    00001723: 	movq	%rax, %rdx
    00001726: 	shrq	$0x1e, %rdx
    0000172a: 	andl	$0x3fffc, %edx
    00001730: 	addl	$0x1, (%r12,%rdx)
    00001735: 	movq	%rax, %rdx
    00001738: 	movzwl	%ax, %eax
    0000173b: 	shrq	$0xe, %rdx
    0000173f: 	andl	$0x3fffc, %edx
    00001745: 	addl	$0x1, (%r12,%rdx)
    0000174a: 	addl	$0x1, (%r12,%rax,4)
    0000174f: 	cmpq	%rcx, %r9
    00001752: 	jne	.Ltmp82 # Offset: 5970
    00001754: 	addl	$0x1, %r15d
    00001758: 	cmpl	%r13d, %r15d
    0000175b: 	jne	.Ltmp83 # Offset: 5979
.Ltmp81:
    0000175d: 	movq	0x8(%rsp), %rax
    00001762: 	leaq	referenceHistogramS(%rip), %r15
    00001769: 	xorl	%r11d, %r11d
    0000176c: 	jmp	.Ltmp84 # Offset: 5996
    0000176e: 	nop # Size: 2
.Ltmp86:
    00001770: 	addq	$0x1, %r11
    00001774: 	addq	$0x4, %rax
    00001778: 	addq	$0x8, %r15
    0000177c: 	cmpq	$0x10000, %r11
    00001783: 	je	.Ltmp85 # Offset: 6019
.Ltmp84:
    00001789: 	movl	(%r15), %esi
    0000178c: 	cmpl	%esi, (%rax)
    0000178e: 	je	.Ltmp86 # Offset: 6030
    00001790: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    00001797: 	movl	$0x5, %edx
    0000179c: 	movq	%r11, 0x20(%rsp)
    000017a1: 	leaq	DATAat0x108e4(%rip), %rsi
    000017a8: 	movq	%r13, %rdi
    000017ab: 	movq	%rax, 0x8(%rsp)
    000017b0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6064
    000017b5: 	leaq	DATAat0x10438(%rip), %rdi
    000017bc: 	movl	$0x1f, %edx
    000017c1: 	movq	%rdi, %rsi
    000017c4: 	movq	%rdi, 0x18(%rsp)
    000017c9: 	movq	%r13, %rdi
    000017cc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6092
    000017d1: 	movl	$0xf, %edx
    000017d6: 	movq	%r13, %rdi
    000017d9: 	leaq	DATAat0x108ea(%rip), %rsi
    000017e0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6112
    000017e5: 	movq	0x20(%rsp), %rsi
    000017ea: 	movq	%r13, %rdi
    000017ed: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 6125
    000017f2: 	movl	$0xb, %edx
    000017f7: 	leaq	DATAat0x108fa(%rip), %rsi
    000017fe: 	movq	%rax, %rdi
    00001801: 	movq	%rax, 0x20(%rsp)
    00001806: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6150
    0000180b: 	movq	(%r15), %rsi
    0000180e: 	movq	0x20(%rsp), %rdi
    00001813: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 6163
    00001818: 	movl	$0x4, %edx
    0000181d: 	leaq	DATAat0x10906(%rip), %rsi
    00001824: 	movq	%rax, %rdi
    00001827: 	movq	%rax, %r15
    0000182a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6186
    0000182f: 	movq	0x8(%rsp), %rax
    00001834: 	movq	%r15, %rdi
    00001837: 	movl	(%rax), %esi
    00001839: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 6201
    0000183e: 	movl	$0x2, %edx
    00001843: 	leaq	DATAat0x1090b(%rip), %rsi
    0000184a: 	movq	%rax, %r13
    0000184d: 	movq	%rax, %rdi
    00001850: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6224
    00001855: 	movq	(%r13), %rax
    00001859: 	movq	-0x18(%rax), %rax
    0000185d: 	movq	0xf0(%r13,%rax), %r15
    00001865: 	testq	%r15, %r15
    00001868: 	je	.Ltmp16 # Offset: 6248
    0000186e: 	cmpb	$0x0, 0x38(%r15)
    00001873: 	je	.Ltmp87 # Offset: 6259
    00001879: 	movzbl	0x43(%r15), %edx
.Ltmp159:
    0000187e: 	movq	%r13, %rdi
    00001881: 	movsbl	%dl, %esi
    00001884: 	callq	_ZNSo3putEc@PLT # Offset: 6276
    00001889: 	movq	%rax, %rdi
    0000188c: 	callq	_ZNSo5flushEv@PLT # Offset: 6284
.Ltmp179:
    00001891: 	callq	clock@PLT # Offset: 6289
    00001896: 	movq	0x18(%rsp), %rdi
    0000189b: 	pxor	%xmm0, %xmm0
    0000189f: 	movq	%rax, end_time(%rip)
    000018a6: 	subq	start_time(%rip), %rax
    000018ad: 	cvtsi2sd	%rax, %xmm0
    000018b2: 	divsd	DATAat0x10920(%rip), %xmm0
    000018ba: 	callq	_Z13record_resultdPKc # Offset: 6330
    000018bf: 	callq	clock@PLT # Offset: 6335
    000018c4: 	movl	iterations(%rip), %r15d
    000018cb: 	movq	%rax, start_time(%rip)
    000018d2: 	testl	%r15d, %r15d
    000018d5: 	jle	.Ltmp88 # Offset: 6357
    000018d7: 	xorl	%r13d, %r13d
    000018da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp90:
    000018e0: 	movl	$0x80000, %edx
    000018e5: 	xorl	%esi, %esi
    000018e7: 	movq	%r14, %rdi
    000018ea: 	callq	memset@PLT # Offset: 6378
    000018ef: 	leaq	inputData16(%rip), %rcx
    000018f6: 	leaq	0xfa00(%rcx), %r9
    000018fd: 	nopl	(%rax) # Size: 3
.Ltmp89:
    00001900: 	movq	(%rcx), %rax
    00001903: 	addq	$0x8, %rcx
    00001907: 	movq	%rax, %rdx
    0000190a: 	shrq	$0x30, %rdx
    0000190e: 	addq	$0x1, (%r14,%rdx,8)
    00001913: 	movq	%rax, %rdx
    00001916: 	shrq	$0x1d, %rdx
    0000191a: 	andl	$0x7fff8, %edx
    00001920: 	addq	$0x1, (%r14,%rdx)
    00001925: 	movq	%rax, %rdx
    00001928: 	movzwl	%ax, %eax
    0000192b: 	shrq	$0xd, %rdx
    0000192f: 	andl	$0x7fff8, %edx
    00001935: 	addq	$0x1, (%r14,%rdx)
    0000193a: 	addq	$0x1, (%r14,%rax,8)
    0000193f: 	cmpq	%rcx, %r9
    00001942: 	jne	.Ltmp89 # Offset: 6466
    00001944: 	addl	$0x1, %r13d
    00001948: 	cmpl	%r15d, %r13d
    0000194b: 	jne	.Ltmp90 # Offset: 6475
.Ltmp88:
    0000194d: 	movq	0x10(%rsp), %rax
    00001952: 	xorl	%r13d, %r13d
    00001955: 	jmp	.Ltmp91 # Offset: 6485
    00001957: 	nopw	(%rax,%rax) # Size: 9
.Ltmp93:
    00001960: 	addq	$0x1, %r13
    00001964: 	addq	$0x8, %rbx
    00001968: 	addq	$0x8, %rax
    0000196c: 	cmpq	$0x10000, %r13
    00001973: 	je	.Ltmp92 # Offset: 6515
.Ltmp91:
    00001979: 	movq	(%rax), %rdi
    0000197c: 	cmpq	%rdi, (%rbx)
    0000197f: 	je	.Ltmp93 # Offset: 6527
    00001981: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r15
    00001988: 	movl	$0x5, %edx
    0000198d: 	movq	%rax, 0x10(%rsp)
    00001992: 	leaq	DATAat0x108e4(%rip), %rsi
    00001999: 	movq	%r15, %rdi
    0000199c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6556
    000019a1: 	leaq	DATAat0x10458(%rip), %rdi
    000019a8: 	movl	$0x1f, %edx
    000019ad: 	movq	%rdi, %rsi
    000019b0: 	movq	%rdi, 0x8(%rsp)
    000019b5: 	movq	%r15, %rdi
    000019b8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6584
    000019bd: 	movl	$0xf, %edx
    000019c2: 	movq	%r15, %rdi
    000019c5: 	leaq	DATAat0x108ea(%rip), %rsi
    000019cc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6604
    000019d1: 	movq	%r13, %rsi
    000019d4: 	movq	%r15, %rdi
    000019d7: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 6615
    000019dc: 	movl	$0xb, %edx
    000019e1: 	leaq	DATAat0x108fa(%rip), %rsi
    000019e8: 	movq	%rax, %rdi
    000019eb: 	movq	%rax, %r13
    000019ee: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6638
    000019f3: 	movq	0x10(%rsp), %rax
    000019f8: 	movq	%r13, %rdi
    000019fb: 	movq	(%rax), %rsi
    000019fe: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 6654
    00001a03: 	movl	$0x4, %edx
    00001a08: 	leaq	DATAat0x10906(%rip), %rsi
    00001a0f: 	movq	%rax, %rdi
    00001a12: 	movq	%rax, %r13
    00001a15: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6677
    00001a1a: 	movq	(%rbx), %rsi
    00001a1d: 	movq	%r13, %rdi
    00001a20: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 6688
    00001a25: 	movl	$0x2, %edx
    00001a2a: 	leaq	DATAat0x1090b(%rip), %rsi
    00001a31: 	movq	%rax, %r13
    00001a34: 	movq	%rax, %rdi
    00001a37: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 6711
    00001a3c: 	movq	(%r13), %rax
    00001a40: 	movq	-0x18(%rax), %rax
    00001a44: 	movq	0xf0(%r13,%rax), %r15
    00001a4c: 	testq	%r15, %r15
    00001a4f: 	je	.Ltmp16 # Offset: 6735
    00001a55: 	cmpb	$0x0, 0x38(%r15)
    00001a5a: 	je	.Ltmp94 # Offset: 6746
    00001a60: 	movzbl	0x43(%r15), %eax
.Ltmp158:
    00001a65: 	movq	%r13, %rdi
    00001a68: 	movsbl	%al, %esi
    00001a6b: 	callq	_ZNSo3putEc@PLT # Offset: 6763
    00001a70: 	movq	%rax, %rdi
    00001a73: 	callq	_ZNSo5flushEv@PLT # Offset: 6771
.Ltmp178:
    00001a78: 	callq	clock@PLT # Offset: 6776
    00001a7d: 	movq	0x8(%rsp), %rdi
    00001a82: 	pxor	%xmm0, %xmm0
    00001a86: 	leaq	referenceHistogramF(%rip), %rbx
    00001a8d: 	movq	%rax, end_time(%rip)
    00001a94: 	subq	start_time(%rip), %rax
    00001a9b: 	cvtsi2sd	%rax, %xmm0
    00001aa0: 	divsd	DATAat0x10920(%rip), %xmm0
    00001aa8: 	callq	_Z13record_resultdPKc # Offset: 6824
    00001aad: 	leaq	DATAat0x10478(%rip), %rcx
    00001ab4: 	movq	%rbp, %rdx
    00001ab7: 	movl	$0x7d00, %esi
    00001abc: 	leaq	inputData16(%rip), %rdi
    00001ac3: 	callq	_Z15test_histogram4IttEvPKT_iPT0_PKc # Offset: 6851
    00001ac8: 	leaq	DATAat0x10498(%rip), %rcx
    00001acf: 	movq	%r12, %rdx
    00001ad2: 	movl	$0x7d00, %esi
    00001ad7: 	leaq	inputData16(%rip), %rdi
    00001ade: 	callq	_Z15test_histogram4ItjEvPKT_iPT0_PKc # Offset: 6878
    00001ae3: 	leaq	DATAat0x104b8(%rip), %rcx
    00001aea: 	movq	%r14, %rdx
    00001aed: 	movl	$0x7d00, %esi
    00001af2: 	leaq	inputData16(%rip), %rdi
    00001af9: 	callq	_Z15test_histogram4ItmEvPKT_iPT0_PKc # Offset: 6905
    00001afe: 	leaq	DATAat0x104d8(%rip), %rcx
    00001b05: 	movq	%rbp, %rdx
    00001b08: 	movl	$0x7d00, %esi
    00001b0d: 	leaq	inputData16(%rip), %rdi
    00001b14: 	callq	_Z15test_histogram5IttEvPKT_iPT0_PKc # Offset: 6932
    00001b19: 	leaq	DATAat0x104f8(%rip), %rcx
    00001b20: 	movq	%r12, %rdx
    00001b23: 	movl	$0x7d00, %esi
    00001b28: 	leaq	inputData16(%rip), %rdi
    00001b2f: 	callq	_Z15test_histogram5ItjEvPKT_iPT0_PKc # Offset: 6959
    00001b34: 	leaq	DATAat0x10518(%rip), %rcx
    00001b3b: 	movq	%r14, %rdx
    00001b3e: 	movl	$0x7d00, %esi
    00001b43: 	leaq	inputData16(%rip), %rdi
    00001b4a: 	callq	_Z15test_histogram5ItmEvPKT_iPT0_PKc # Offset: 6986
    00001b4f: 	leaq	DATAat0x10538(%rip), %rcx
    00001b56: 	movq	%rbp, %rdx
    00001b59: 	movl	$0x7d00, %esi
    00001b5e: 	leaq	inputData16(%rip), %rdi
    00001b65: 	callq	_Z15test_histogram6ItEvPKtiPT_PKc # Offset: 7013
    00001b6a: 	leaq	DATAat0x10558(%rip), %rcx
    00001b71: 	movq	%r12, %rdx
    00001b74: 	movl	$0x7d00, %esi
    00001b79: 	leaq	inputData16(%rip), %rdi
    00001b80: 	callq	_Z15test_histogram6IjEvPKtiPT_PKc # Offset: 7040
    00001b85: 	leaq	DATAat0x10578(%rip), %rcx
    00001b8c: 	movq	%r14, %rdx
    00001b8f: 	movl	$0x7d00, %esi
    00001b94: 	leaq	inputData16(%rip), %rdi
    00001b9b: 	callq	_Z15test_histogram6ImEvPKtiPT_PKc # Offset: 7067
    00001ba0: 	movl	iterations(%rip), %edx
    00001ba6: 	xorl	%ecx, %ecx
    00001ba8: 	xorl	%r8d, %r8d
    00001bab: 	movl	$0x7d00, %esi
    00001bb0: 	leaq	DATAat0x105ec(%rip), %rdi
    00001bb7: 	callq	_Z9summarizePKciiii # Offset: 7095
    00001bbc: 	movl	iterations(%rip), %edx
    00001bc2: 	movq	%rbx, %rdi
    00001bc5: 	testl	%edx, %edx
    00001bc7: 	leal	0x3(%rdx), %eax
    00001bca: 	cmovnsl	%edx, %eax
    00001bcd: 	movl	$0x10000, %edx
    00001bd2: 	xorl	%esi, %esi
    00001bd4: 	sarl	$0x2, %eax
    00001bd7: 	movl	%eax, iterations(%rip)
    00001bdd: 	callq	memset@PLT # Offset: 7133
    00001be2: 	movss	DATAat0x1096c(%rip), %xmm1
    00001bea: 	movsd	DATAat0x10938(%rip), %xmm2
    00001bf2: 	movq	%rbx, %rcx
    00001bf5: 	leaq	inputData32(%rip), %rax
    00001bfc: 	nopl	(%rax) # Size: 4
.Ltmp96:
    00001c00: 	movss	(%rax), %xmm0
    00001c04: 	addss	%xmm1, %xmm0
    00001c08: 	cvtss2sd	%xmm0, %xmm0
    00001c0c: 	mulsd	%xmm2, %xmm0
    00001c10: 	cvttsd2si	%xmm0, %edx
    00001c14: 	cmpl	$0x1fff, %edx
    00001c1a: 	ja	.Ltmp95 # Offset: 7194
    00001c1c: 	movslq	%edx, %rdx
    00001c1f: 	addq	$0x1, (%rcx,%rdx,8)
.Ltmp95:
    00001c24: 	addq	$0x4, %rax
    00001c28: 	leaq	inputData16(%rip), %rbx
    00001c2f: 	cmpq	%rbx, %rax
    00001c32: 	jne	.Ltmp96 # Offset: 7218
    00001c34: 	callq	clock@PLT # Offset: 7220
    00001c39: 	movl	iterations(%rip), %ebx
    00001c3f: 	movq	%rax, start_time(%rip)
    00001c46: 	testl	%ebx, %ebx
    00001c48: 	jle	.Ltmp97 # Offset: 7240
    00001c4a: 	xorl	%ebp, %ebp
    00001c4c: 	leaq	histogram16F(%rip), %r12
    00001c53: 	nopl	(%rax,%rax) # Size: 5
.Ltmp100:
    00001c58: 	xorl	%esi, %esi
    00001c5a: 	movl	$0x4000, %edx
    00001c5f: 	movq	%r12, %rdi
    00001c62: 	callq	memset@PLT # Offset: 7266
    00001c67: 	movq	DATAat0x10938(%rip), %rsi
    00001c6e: 	movss	DATAat0x1096c(%rip), %xmm1
    00001c76: 	leaq	inputData32(%rip), %rax
    00001c7d: 	movq	%rsi, %xmm2
    00001c82: 	nopw	(%rax,%rax) # Size: 6
.Ltmp99:
    00001c88: 	movss	(%rax), %xmm0
    00001c8c: 	addss	%xmm1, %xmm0
    00001c90: 	cvtss2sd	%xmm0, %xmm0
    00001c94: 	mulsd	%xmm2, %xmm0
    00001c98: 	cvttsd2si	%xmm0, %edx
    00001c9c: 	cmpl	$0x1fff, %edx
    00001ca2: 	ja	.Ltmp98 # Offset: 7330
    00001ca4: 	movslq	%edx, %rdx
    00001ca7: 	addw	$0x1, (%r12,%rdx,2)
.Ltmp98:
    00001cad: 	addq	$0x4, %rax
    00001cb1: 	leaq	inputData16(%rip), %rsi
    00001cb8: 	cmpq	%rsi, %rax
    00001cbb: 	jne	.Ltmp99 # Offset: 7355
    00001cbd: 	addl	$0x1, %ebp
    00001cc0: 	cmpl	%ebp, %ebx
    00001cc2: 	jne	.Ltmp100 # Offset: 7362
.Ltmp97:
    00001cc4: 	leaq	histogram16F(%rip), %r13
    00001ccb: 	leaq	referenceHistogramF(%rip), %r15
    00001cd2: 	xorl	%r8d, %r8d
    00001cd5: 	movq	%r15, 0x10(%rsp)
    00001cda: 	movq	%r13, %r12
    00001cdd: 	movq	%r13, %rbx
    00001ce0: 	movq	%r15, 0x18(%rsp)
    00001ce5: 	jmp	.Ltmp101 # Offset: 7397
    00001ce7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp103:
    00001cf0: 	addq	$0x1, %r8
    00001cf4: 	addq	$0x2, %rbx
    00001cf8: 	addq	$0x8, %r15
    00001cfc: 	cmpq	$0x2000, %r8
    00001d03: 	je	.Ltmp102 # Offset: 7427
.Ltmp101:
    00001d09: 	movzwl	(%r15), %eax
    00001d0d: 	cmpw	%ax, (%rbx)
    00001d10: 	je	.Ltmp103 # Offset: 7440
    00001d12: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00001d19: 	movl	$0x5, %edx
    00001d1e: 	leaq	DATAat0x108e4(%rip), %rsi
    00001d25: 	movq	%r8, 0x8(%rsp)
    00001d2a: 	movq	%r14, %rdi
    00001d2d: 	leaq	DATAat0x105ff(%rip), %rbp
    00001d34: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 7476
    00001d39: 	movq	%r14, %rdi
    00001d3c: 	movl	$0x1c, %edx
    00001d41: 	movq	%rbp, %rsi
    00001d44: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 7492
    00001d49: 	movl	$0xf, %edx
    00001d4e: 	movq	%r14, %rdi
    00001d51: 	leaq	DATAat0x108ea(%rip), %rsi
    00001d58: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 7512
    00001d5d: 	movq	0x8(%rsp), %rsi
    00001d62: 	movq	%r14, %rdi
    00001d65: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 7525
    00001d6a: 	movl	$0xb, %edx
    00001d6f: 	leaq	DATAat0x108fa(%rip), %rsi
    00001d76: 	movq	%rax, %rdi
    00001d79: 	movq	%rax, %r14
    00001d7c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 7548
    00001d81: 	movq	(%r15), %rsi
    00001d84: 	movq	%r14, %rdi
    00001d87: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 7559
    00001d8c: 	movl	$0x4, %edx
    00001d91: 	leaq	DATAat0x10906(%rip), %rsi
    00001d98: 	movq	%rax, %rdi
    00001d9b: 	movq	%rax, %r15
    00001d9e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 7582
    00001da3: 	movzwl	(%rbx), %esi
    00001da6: 	movq	%r15, %rdi
    00001da9: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 7593
    00001dae: 	movl	$0x2, %edx
    00001db3: 	leaq	DATAat0x1090b(%rip), %rsi
    00001dba: 	movq	%rax, %r15
    00001dbd: 	movq	%rax, %rdi
    00001dc0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 7616
    00001dc5: 	movq	(%r15), %rax
    00001dc8: 	movq	-0x18(%rax), %rax
    00001dcc: 	movq	0xf0(%r15,%rax), %r14
    00001dd4: 	testq	%r14, %r14
    00001dd7: 	je	.Ltmp16 # Offset: 7639
    00001ddd: 	cmpb	$0x0, 0x38(%r14)
    00001de2: 	je	.Ltmp104 # Offset: 7650
    00001de8: 	movzbl	0x43(%r14), %eax
.Ltmp152:
    00001ded: 	movq	%r15, %rdi
    00001df0: 	movsbl	%al, %esi
    00001df3: 	callq	_ZNSo3putEc@PLT # Offset: 7667
    00001df8: 	movq	%rax, %rdi
    00001dfb: 	callq	_ZNSo5flushEv@PLT # Offset: 7675
.Ltmp177:
    00001e00: 	callq	clock@PLT # Offset: 7680
    00001e05: 	movq	%rbp, %rdi
    00001e08: 	pxor	%xmm0, %xmm0
    00001e0c: 	movq	%rax, end_time(%rip)
    00001e13: 	subq	start_time(%rip), %rax
    00001e1a: 	cvtsi2sd	%rax, %xmm0
    00001e1f: 	divsd	DATAat0x10920(%rip), %xmm0
    00001e27: 	callq	_Z13record_resultdPKc # Offset: 7719
    00001e2c: 	callq	clock@PLT # Offset: 7724
    00001e31: 	movl	iterations(%rip), %ebx
    00001e37: 	movq	%rax, start_time(%rip)
    00001e3e: 	testl	%ebx, %ebx
    00001e40: 	jle	.Ltmp105 # Offset: 7744
    00001e42: 	xorl	%ebp, %ebp
    00001e44: 	leaq	histogram32F(%rip), %r14
    00001e4b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp108:
    00001e50: 	movq	%r14, %rdi
    00001e53: 	movl	$0x8000, %edx
    00001e58: 	xorl	%esi, %esi
    00001e5a: 	callq	memset@PLT # Offset: 7770
    00001e5f: 	movq	DATAat0x10938(%rip), %rdi
    00001e66: 	movss	DATAat0x1096c(%rip), %xmm1
    00001e6e: 	leaq	inputData32(%rip), %rax
    00001e75: 	movq	%rdi, %xmm2
    00001e7a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp107:
    00001e80: 	movss	(%rax), %xmm0
    00001e84: 	addss	%xmm1, %xmm0
    00001e88: 	cvtss2sd	%xmm0, %xmm0
    00001e8c: 	mulsd	%xmm2, %xmm0
    00001e90: 	cvttsd2si	%xmm0, %edx
    00001e94: 	cmpl	$0x1fff, %edx
    00001e9a: 	ja	.Ltmp106 # Offset: 7834
    00001e9c: 	movslq	%edx, %rdx
    00001e9f: 	addl	$0x1, (%r14,%rdx,4)
.Ltmp106:
    00001ea4: 	addq	$0x4, %rax
    00001ea8: 	leaq	inputData16(%rip), %rsi
    00001eaf: 	cmpq	%rsi, %rax
    00001eb2: 	jne	.Ltmp107 # Offset: 7858
    00001eb4: 	addl	$0x1, %ebp
    00001eb7: 	cmpl	%ebp, %ebx
    00001eb9: 	jne	.Ltmp108 # Offset: 7865
.Ltmp105:
    00001ebb: 	leaq	histogram32F(%rip), %rax
    00001ec2: 	leaq	referenceHistogramF(%rip), %rcx
    00001ec9: 	xorl	%r8d, %r8d
    00001ecc: 	movq	%rax, 0x8(%rsp)
    00001ed1: 	movq	%rax, %rbx
    00001ed4: 	movq	%rax, %r14
    00001ed7: 	jmp	.Ltmp109 # Offset: 7895
    00001ed9: 	nopl	(%rax) # Size: 7
.Ltmp111:
    00001ee0: 	addq	$0x1, %r8
    00001ee4: 	addq	$0x4, %rbx
    00001ee8: 	addq	$0x8, %rcx
    00001eec: 	cmpq	$0x2000, %r8
    00001ef3: 	je	.Ltmp110 # Offset: 7923
.Ltmp109:
    00001ef9: 	movl	(%rcx), %eax
    00001efb: 	cmpl	%eax, (%rbx)
    00001efd: 	je	.Ltmp111 # Offset: 7933
    00001eff: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rbp
    00001f06: 	movl	$0x5, %edx
    00001f0b: 	leaq	DATAat0x108e4(%rip), %rsi
    00001f12: 	movq	%r8, 0x20(%rsp)
    00001f17: 	movq	%rbp, %rdi
    00001f1a: 	leaq	DATAat0x1061c(%rip), %r15
    00001f21: 	movq	%rcx, 0x28(%rsp)
    00001f26: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 7974
    00001f2b: 	movq	%rbp, %rdi
    00001f2e: 	movl	$0x1c, %edx
    00001f33: 	movq	%r15, %rsi
    00001f36: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 7990
    00001f3b: 	movl	$0xf, %edx
    00001f40: 	movq	%rbp, %rdi
    00001f43: 	leaq	DATAat0x108ea(%rip), %rsi
    00001f4a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 8010
    00001f4f: 	movq	0x20(%rsp), %rsi
    00001f54: 	movq	%rbp, %rdi
    00001f57: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 8023
    00001f5c: 	movl	$0xb, %edx
    00001f61: 	leaq	DATAat0x108fa(%rip), %rsi
    00001f68: 	movq	%rax, %rdi
    00001f6b: 	movq	%rax, %rbp
    00001f6e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 8046
    00001f73: 	movq	0x28(%rsp), %rcx
    00001f78: 	movq	%rbp, %rdi
    00001f7b: 	movq	(%rcx), %rsi
    00001f7e: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 8062
    00001f83: 	movl	$0x4, %edx
    00001f88: 	leaq	DATAat0x10906(%rip), %rsi
    00001f8f: 	movq	%rax, %rdi
    00001f92: 	movq	%rax, %rbp
    00001f95: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 8085
    00001f9a: 	movl	(%rbx), %esi
    00001f9c: 	movq	%rbp, %rdi
    00001f9f: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 8095
    00001fa4: 	movl	$0x2, %edx
    00001fa9: 	leaq	DATAat0x1090b(%rip), %rsi
    00001fb0: 	movq	%rax, %rbp
    00001fb3: 	movq	%rax, %rdi
    00001fb6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 8118
    00001fbb: 	movq	(%rbp), %rax
    00001fbf: 	movq	-0x18(%rax), %rax
    00001fc3: 	movq	0xf0(%rbp,%rax), %rbx
    00001fcb: 	testq	%rbx, %rbx
    00001fce: 	je	.Ltmp16 # Offset: 8142
    00001fd4: 	cmpb	$0x0, 0x38(%rbx)
    00001fd8: 	je	.Ltmp112 # Offset: 8152
    00001fde: 	movzbl	0x43(%rbx), %eax
.Ltmp151:
    00001fe2: 	movq	%rbp, %rdi
    00001fe5: 	movsbl	%al, %esi
    00001fe8: 	callq	_ZNSo3putEc@PLT # Offset: 8168
    00001fed: 	movq	%rax, %rdi
    00001ff0: 	callq	_ZNSo5flushEv@PLT # Offset: 8176
.Ltmp176:
    00001ff5: 	callq	clock@PLT # Offset: 8181
    00001ffa: 	movq	%r15, %rdi
    00001ffd: 	pxor	%xmm0, %xmm0
    00002001: 	movq	%rax, end_time(%rip)
    00002008: 	subq	start_time(%rip), %rax
    0000200f: 	cvtsi2sd	%rax, %xmm0
    00002014: 	divsd	DATAat0x10920(%rip), %xmm0
    0000201c: 	callq	_Z13record_resultdPKc # Offset: 8220
    00002021: 	callq	clock@PLT # Offset: 8225
    00002026: 	movl	iterations(%rip), %ebx
    0000202c: 	movq	%rax, start_time(%rip)
    00002033: 	testl	%ebx, %ebx
    00002035: 	jle	.Ltmp113 # Offset: 8245
    00002037: 	xorl	%r15d, %r15d
    0000203a: 	leaq	histogram64F(%rip), %rbp
    00002041: 	nopl	(%rax) # Size: 7
.Ltmp116:
    00002048: 	xorl	%esi, %esi
    0000204a: 	movl	$0x10000, %edx
    0000204f: 	movq	%rbp, %rdi
    00002052: 	callq	memset@PLT # Offset: 8274
    00002057: 	movq	DATAat0x10938(%rip), %rsi
    0000205e: 	movss	DATAat0x1096c(%rip), %xmm1
    00002066: 	leaq	inputData32(%rip), %rax
    0000206d: 	movq	%rsi, %xmm2
    00002072: 	nopw	(%rax,%rax) # Size: 6
.Ltmp115:
    00002078: 	movss	(%rax), %xmm0
    0000207c: 	addss	%xmm1, %xmm0
    00002080: 	cvtss2sd	%xmm0, %xmm0
    00002084: 	mulsd	%xmm2, %xmm0
    00002088: 	cvttsd2si	%xmm0, %edx
    0000208c: 	cmpl	$0x1fff, %edx
    00002092: 	ja	.Ltmp114 # Offset: 8338
    00002094: 	movslq	%edx, %rdx
    00002097: 	addq	$0x1, (%rbp,%rdx,8)
.Ltmp114:
    0000209d: 	addq	$0x4, %rax
    000020a1: 	leaq	inputData16(%rip), %rsi
    000020a8: 	cmpq	%rsi, %rax
    000020ab: 	jne	.Ltmp115 # Offset: 8363
    000020ad: 	addl	$0x1, %r15d
    000020b1: 	cmpl	%r15d, %ebx
    000020b4: 	jne	.Ltmp116 # Offset: 8372
.Ltmp113:
    000020b6: 	leaq	histogram64F(%rip), %rbx
    000020bd: 	leaq	referenceHistogramF(%rip), %rcx
    000020c4: 	xorl	%r8d, %r8d
    000020c7: 	movq	%rbx, %rbp
    000020ca: 	movq	%rbx, %r15
    000020cd: 	jmp	.Ltmp117 # Offset: 8397
    000020cf: 	nop # Size: 1
.Ltmp119:
    000020d0: 	addq	$0x1, %r8
    000020d4: 	addq	$0x8, %r15
    000020d8: 	addq	$0x8, %rcx
    000020dc: 	cmpq	$0x2000, %r8
    000020e3: 	je	.Ltmp118 # Offset: 8419
.Ltmp117:
    000020e9: 	movq	(%rcx), %rax
    000020ec: 	cmpq	%rax, (%r15)
    000020ef: 	je	.Ltmp119 # Offset: 8431
    000020f1: 	movl	$0x5, %edx
    000020f6: 	leaq	DATAat0x108e4(%rip), %rsi
    000020fd: 	movq	%r8, 0x28(%rsp)
    00002102: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    00002109: 	movq	%rcx, 0x30(%rsp)
    0000210e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 8462
    00002113: 	leaq	DATAat0x10639(%rip), %rax
    0000211a: 	movl	$0x1c, %edx
    0000211f: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    00002126: 	movq	%rax, %rsi
    00002129: 	movq	%rax, 0x20(%rsp)
    0000212e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 8494
    00002133: 	movl	$0xf, %edx
    00002138: 	leaq	DATAat0x108ea(%rip), %rsi
    0000213f: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    00002146: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 8518
    0000214b: 	movq	0x28(%rsp), %rsi
    00002150: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %rdi
    00002157: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 8535
    0000215c: 	movl	$0xb, %edx
    00002161: 	leaq	DATAat0x108fa(%rip), %rsi
    00002168: 	movq	%rax, %rdi
    0000216b: 	movq	%rax, 0x28(%rsp)
    00002170: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 8560
    00002175: 	movq	0x30(%rsp), %rcx
    0000217a: 	movq	0x28(%rsp), %rdi
    0000217f: 	movq	(%rcx), %rsi
    00002182: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 8578
    00002187: 	movl	$0x4, %edx
    0000218c: 	leaq	DATAat0x10906(%rip), %rsi
    00002193: 	movq	%rax, %rdi
    00002196: 	movq	%rax, 0x28(%rsp)
    0000219b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 8603
    000021a0: 	movq	(%r15), %rsi
    000021a3: 	movq	0x28(%rsp), %rdi
    000021a8: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 8616
    000021ad: 	movl	$0x2, %edx
    000021b2: 	leaq	DATAat0x1090b(%rip), %rsi
    000021b9: 	movq	%rax, %r15
    000021bc: 	movq	%rax, %rdi
    000021bf: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 8639
    000021c4: 	movq	(%r15), %rax
    000021c7: 	movq	-0x18(%rax), %rax
    000021cb: 	movq	0xf0(%r15,%rax), %rdi
    000021d3: 	testq	%rdi, %rdi
    000021d6: 	je	.Ltmp16 # Offset: 8662
    000021dc: 	cmpb	$0x0, 0x38(%rdi)
    000021e0: 	je	.Ltmp120 # Offset: 8672
    000021e6: 	movzbl	0x43(%rdi), %eax
.Ltmp150:
    000021ea: 	movq	%r15, %rdi
    000021ed: 	movsbl	%al, %esi
    000021f0: 	callq	_ZNSo3putEc@PLT # Offset: 8688
    000021f5: 	movq	%rax, %rdi
    000021f8: 	callq	_ZNSo5flushEv@PLT # Offset: 8696
.Ltmp175:
    000021fd: 	callq	clock@PLT # Offset: 8701
    00002202: 	movq	0x20(%rsp), %rdi
    00002207: 	pxor	%xmm0, %xmm0
    0000220b: 	movq	%rax, end_time(%rip)
    00002212: 	subq	start_time(%rip), %rax
    00002219: 	cvtsi2sd	%rax, %xmm0
    0000221e: 	divsd	DATAat0x10920(%rip), %xmm0
    00002226: 	callq	_Z13record_resultdPKc # Offset: 8742
    0000222b: 	movss	DATAat0x10970(%rip), %xmm1
    00002233: 	movq	%r12, %rdx
    00002236: 	movl	$0x7d00, %esi
    0000223b: 	movss	DATAat0x10974(%rip), %xmm0
    00002243: 	leaq	DATAat0x10656(%rip), %rcx
    0000224a: 	leaq	inputData32(%rip), %rdi
    00002251: 	callq	_Z20test_histogramFloat2IftEvPKT_iPT0_S0_S0_PKc # Offset: 8785
    00002256: 	movss	DATAat0x10970(%rip), %xmm1
    0000225e: 	movq	%r14, %rdx
    00002261: 	movl	$0x7d00, %esi
    00002266: 	movss	DATAat0x10974(%rip), %xmm0
    0000226e: 	leaq	DATAat0x10673(%rip), %rcx
    00002275: 	leaq	inputData32(%rip), %rdi
    0000227c: 	callq	_Z20test_histogramFloat2IfjEvPKT_iPT0_S0_S0_PKc # Offset: 8828
    00002281: 	movss	DATAat0x10970(%rip), %xmm1
    00002289: 	movq	%rbp, %rdx
    0000228c: 	movl	$0x7d00, %esi
    00002291: 	movss	DATAat0x10974(%rip), %xmm0
    00002299: 	leaq	DATAat0x10690(%rip), %rcx
    000022a0: 	leaq	inputData32(%rip), %rdi
    000022a7: 	callq	_Z20test_histogramFloat2IfmEvPKT_iPT0_S0_S0_PKc # Offset: 8871
    000022ac: 	movss	DATAat0x10970(%rip), %xmm1
    000022b4: 	movq	%r12, %rdx
    000022b7: 	movl	$0x7d00, %esi
    000022bc: 	movss	DATAat0x10974(%rip), %xmm0
    000022c4: 	leaq	DATAat0x106ad(%rip), %rcx
    000022cb: 	leaq	inputData32(%rip), %rdi
    000022d2: 	callq	_Z20test_histogramFloat4IftEvPKT_iPT0_S0_S0_PKc # Offset: 8914
    000022d7: 	movss	DATAat0x10970(%rip), %xmm1
    000022df: 	movq	%r14, %rdx
    000022e2: 	movl	$0x7d00, %esi
    000022e7: 	movss	DATAat0x10974(%rip), %xmm0
    000022ef: 	leaq	DATAat0x106ca(%rip), %rcx
    000022f6: 	leaq	inputData32(%rip), %rdi
    000022fd: 	callq	_Z20test_histogramFloat4IfjEvPKT_iPT0_S0_S0_PKc # Offset: 8957
    00002302: 	movss	DATAat0x10970(%rip), %xmm1
    0000230a: 	movq	%rbp, %rdx
    0000230d: 	movl	$0x7d00, %esi
    00002312: 	movss	DATAat0x10974(%rip), %xmm0
    0000231a: 	leaq	DATAat0x106e7(%rip), %rcx
    00002321: 	leaq	inputData32(%rip), %rdi
    00002328: 	callq	_Z20test_histogramFloat4IfmEvPKT_iPT0_S0_S0_PKc # Offset: 9000
    0000232d: 	movss	DATAat0x10970(%rip), %xmm1
    00002335: 	movq	%r12, %rdx
    00002338: 	movl	$0x7d00, %esi
    0000233d: 	movss	DATAat0x10974(%rip), %xmm0
    00002345: 	leaq	DATAat0x10704(%rip), %rcx
    0000234c: 	leaq	inputData32(%rip), %rdi
    00002353: 	callq	_Z20test_histogramFloat5IftEvPKT_iPT0_S0_S0_PKc # Offset: 9043
    00002358: 	movss	DATAat0x10970(%rip), %xmm1
    00002360: 	movq	%r14, %rdx
    00002363: 	movl	$0x7d00, %esi
    00002368: 	movss	DATAat0x10974(%rip), %xmm0
    00002370: 	leaq	DATAat0x10721(%rip), %rcx
    00002377: 	leaq	inputData32(%rip), %rdi
    0000237e: 	callq	_Z20test_histogramFloat5IfjEvPKT_iPT0_S0_S0_PKc # Offset: 9086
    00002383: 	movss	DATAat0x10970(%rip), %xmm1
    0000238b: 	movq	%rbp, %rdx
    0000238e: 	movl	$0x7d00, %esi
    00002393: 	movss	DATAat0x10974(%rip), %xmm0
    0000239b: 	leaq	DATAat0x1073e(%rip), %rcx
    000023a2: 	leaq	inputData32(%rip), %rdi
    000023a9: 	callq	_Z20test_histogramFloat5IfmEvPKT_iPT0_S0_S0_PKc # Offset: 9129
    000023ae: 	movl	iterations(%rip), %edx
    000023b4: 	xorl	%ecx, %ecx
    000023b6: 	xorl	%r8d, %r8d
    000023b9: 	movl	$0x7d00, %esi
    000023be: 	leaq	DATAat0x1075b(%rip), %rdi
    000023c5: 	callq	_Z9summarizePKciiii # Offset: 9157
    000023ca: 	movq	0x18(%rsp), %r15
    000023cf: 	movl	$0x10000, %edx
    000023d4: 	xorl	%esi, %esi
    000023d6: 	movq	%r15, %rdi
    000023d9: 	callq	memset@PLT # Offset: 9177
    000023de: 	movsd	DATAat0x10940(%rip), %xmm1
    000023e6: 	movsd	DATAat0x10948(%rip), %xmm2
    000023ee: 	movq	%r15, %rcx
    000023f1: 	leaq	inputData64(%rip), %rax
    000023f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp122:
    00002400: 	movsd	(%rax), %xmm0
    00002404: 	addsd	%xmm1, %xmm0
    00002408: 	mulsd	%xmm2, %xmm0
    0000240c: 	cvttsd2si	%xmm0, %edx
    00002410: 	cmpl	$0x1fff, %edx
    00002416: 	ja	.Ltmp121 # Offset: 9238
    00002418: 	movslq	%edx, %rdx
    0000241b: 	addq	$0x1, (%rcx,%rdx,8)
.Ltmp121:
    00002420: 	addq	$0x8, %rax
    00002424: 	leaq	inputData32(%rip), %rdi
    0000242b: 	cmpq	%rdi, %rax
    0000242e: 	jne	.Ltmp122 # Offset: 9262
    00002430: 	callq	clock@PLT # Offset: 9264
    00002435: 	movq	%rax, start_time(%rip)
    0000243c: 	movl	iterations(%rip), %eax
    00002442: 	testl	%eax, %eax
    00002444: 	jle	.Ltmp123 # Offset: 9284
    0000244a: 	xorl	%r15d, %r15d
    0000244d: 	movq	%r12, %rcx
    00002450: 	movl	%r15d, %r12d
    00002453: 	movl	%eax, %r15d
    00002456: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp126:
    00002460: 	movq	%rcx, %rdi
    00002463: 	xorl	%esi, %esi
    00002465: 	movl	$0x4000, %edx
    0000246a: 	callq	memset@PLT # Offset: 9322
    0000246f: 	movq	DATAat0x10948(%rip), %rsi
    00002476: 	movq	DATAat0x10940(%rip), %rdi
    0000247d: 	movq	%rax, %rcx
    00002480: 	leaq	inputData64(%rip), %rax
    00002487: 	movq	%rsi, %xmm2
    0000248c: 	movq	%rdi, %xmm1
    00002491: 	nopl	(%rax) # Size: 7
.Ltmp125:
    00002498: 	movsd	(%rax), %xmm0
    0000249c: 	addsd	%xmm1, %xmm0
    000024a0: 	mulsd	%xmm2, %xmm0
    000024a4: 	cvttsd2si	%xmm0, %edx
    000024a8: 	cmpl	$0x1fff, %edx
    000024ae: 	ja	.Ltmp124 # Offset: 9390
    000024b0: 	movslq	%edx, %rdx
    000024b3: 	addw	$0x1, (%rcx,%rdx,2)
.Ltmp124:
    000024b8: 	addq	$0x8, %rax
    000024bc: 	leaq	inputData32(%rip), %rsi
    000024c3: 	cmpq	%rsi, %rax
    000024c6: 	jne	.Ltmp125 # Offset: 9414
    000024c8: 	addl	$0x1, %r12d
    000024cc: 	cmpl	%r12d, %r15d
    000024cf: 	jne	.Ltmp126 # Offset: 9423
    000024d1: 	movq	%rcx, %r12
.Ltmp123:
    000024d4: 	leaq	referenceHistogramF(%rip), %rcx
    000024db: 	xorl	%r8d, %r8d
    000024de: 	jmp	.Ltmp127 # Offset: 9438
.Ltmp129:
    000024e0: 	addq	$0x1, %r8
    000024e4: 	addq	$0x2, %r13
    000024e8: 	addq	$0x8, %rcx
    000024ec: 	cmpq	$0x2000, %r8
    000024f3: 	je	.Ltmp128 # Offset: 9459
.Ltmp127:
    000024f9: 	movzwl	(%rcx), %eax
    000024fc: 	cmpw	%ax, (%r13)
    00002501: 	je	.Ltmp129 # Offset: 9473
    00002503: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r15
    0000250a: 	movl	$0x5, %edx
    0000250f: 	movq	%r8, 0x20(%rsp)
    00002514: 	leaq	DATAat0x108e4(%rip), %rsi
    0000251b: 	movq	%r15, %rdi
    0000251e: 	movq	%rcx, 0x28(%rsp)
    00002523: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9507
    00002528: 	leaq	DATAat0x1076b(%rip), %rax
    0000252f: 	movl	$0x1d, %edx
    00002534: 	movq	%r15, %rdi
    00002537: 	movq	%rax, %rsi
    0000253a: 	movq	%rax, 0x18(%rsp)
    0000253f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9535
    00002544: 	movl	$0xf, %edx
    00002549: 	leaq	DATAat0x108ea(%rip), %rsi
    00002550: 	movq	%r15, %rdi
    00002553: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9555
    00002558: 	movq	0x20(%rsp), %rsi
    0000255d: 	movq	%r15, %rdi
    00002560: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 9568
    00002565: 	movl	$0xb, %edx
    0000256a: 	leaq	DATAat0x108fa(%rip), %rsi
    00002571: 	movq	%rax, %rdi
    00002574: 	movq	%rax, 0x20(%rsp)
    00002579: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9593
    0000257e: 	movq	0x28(%rsp), %rcx
    00002583: 	movq	0x20(%rsp), %rdi
    00002588: 	movq	(%rcx), %rsi
    0000258b: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 9611
    00002590: 	movl	$0x4, %edx
    00002595: 	leaq	DATAat0x10906(%rip), %rsi
    0000259c: 	movq	%rax, %rdi
    0000259f: 	movq	%rax, 0x20(%rsp)
    000025a4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9636
    000025a9: 	movzwl	(%r13), %esi
    000025ae: 	movq	0x20(%rsp), %rdi
    000025b3: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 9651
    000025b8: 	movl	$0x2, %edx
    000025bd: 	leaq	DATAat0x1090b(%rip), %rsi
    000025c4: 	movq	%rax, %r13
    000025c7: 	movq	%rax, %rdi
    000025ca: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 9674
    000025cf: 	movq	(%r13), %rax
    000025d3: 	movq	-0x18(%rax), %rax
    000025d7: 	movq	0xf0(%r13,%rax), %rdi
    000025df: 	testq	%rdi, %rdi
    000025e2: 	je	.Ltmp16 # Offset: 9698
    000025e8: 	cmpb	$0x0, 0x38(%rdi)
    000025ec: 	je	.Ltmp130 # Offset: 9708
    000025f2: 	movzbl	0x43(%rdi), %eax
.Ltmp149:
    000025f6: 	movq	%r13, %rdi
    000025f9: 	movsbl	%al, %esi
    000025fc: 	callq	_ZNSo3putEc@PLT # Offset: 9724
    00002601: 	movq	%rax, %rdi
    00002604: 	callq	_ZNSo5flushEv@PLT # Offset: 9732
.Ltmp174:
    00002609: 	callq	clock@PLT # Offset: 9737
    0000260e: 	movq	0x18(%rsp), %rdi
    00002613: 	pxor	%xmm0, %xmm0
    00002617: 	movq	%rax, end_time(%rip)
    0000261e: 	subq	start_time(%rip), %rax
    00002625: 	cvtsi2sd	%rax, %xmm0
    0000262a: 	divsd	DATAat0x10920(%rip), %xmm0
    00002632: 	callq	_Z13record_resultdPKc # Offset: 9778
    00002637: 	callq	clock@PLT # Offset: 9783
    0000263c: 	movl	iterations(%rip), %r13d
    00002643: 	movq	%rax, start_time(%rip)
    0000264a: 	testl	%r13d, %r13d
    0000264d: 	jle	.Ltmp131 # Offset: 9805
    0000264f: 	xorl	%r15d, %r15d
    00002652: 	nopw	(%rax,%rax) # Size: 6
.Ltmp134:
    00002658: 	xorl	%esi, %esi
    0000265a: 	movq	%r14, %rdi
    0000265d: 	movl	$0x8000, %edx
    00002662: 	callq	memset@PLT # Offset: 9826
    00002667: 	movq	DATAat0x10948(%rip), %rsi
    0000266e: 	movq	DATAat0x10940(%rip), %rdi
    00002675: 	leaq	inputData64(%rip), %rax
    0000267c: 	movq	%rsi, %xmm2
    00002681: 	movq	%rdi, %xmm1
    00002686: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp133:
    00002690: 	movsd	(%rax), %xmm0
    00002694: 	addsd	%xmm1, %xmm0
    00002698: 	mulsd	%xmm2, %xmm0
    0000269c: 	cvttsd2si	%xmm0, %edx
    000026a0: 	cmpl	$0x1fff, %edx
    000026a6: 	ja	.Ltmp132 # Offset: 9894
    000026a8: 	movslq	%edx, %rdx
    000026ab: 	addl	$0x1, (%r14,%rdx,4)
.Ltmp132:
    000026b0: 	addq	$0x8, %rax
    000026b4: 	leaq	inputData32(%rip), %rdi
    000026bb: 	cmpq	%rax, %rdi
    000026be: 	jne	.Ltmp133 # Offset: 9918
    000026c0: 	addl	$0x1, %r15d
    000026c4: 	cmpl	%r15d, %r13d
    000026c7: 	jne	.Ltmp134 # Offset: 9927
.Ltmp131:
    000026c9: 	movq	0x8(%rsp), %rax
    000026ce: 	leaq	referenceHistogramF(%rip), %r15
    000026d5: 	xorl	%r8d, %r8d
    000026d8: 	jmp	.Ltmp135 # Offset: 9944
    000026da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp137:
    000026e0: 	addq	$0x1, %r8
    000026e4: 	addq	$0x4, %rax
    000026e8: 	addq	$0x8, %r15
    000026ec: 	cmpq	$0x2000, %r8
    000026f3: 	je	.Ltmp136 # Offset: 9971
.Ltmp135:
    000026f9: 	movl	(%r15), %esi
    000026fc: 	cmpl	%esi, (%rax)
    000026fe: 	je	.Ltmp137 # Offset: 9982
    00002700: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    00002707: 	movl	$0x5, %edx
    0000270c: 	movq	%r8, 0x20(%rsp)
    00002711: 	leaq	DATAat0x108e4(%rip), %rsi
    00002718: 	movq	%r13, %rdi
    0000271b: 	movq	%rax, 0x8(%rsp)
    00002720: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10016
    00002725: 	leaq	DATAat0x10789(%rip), %rdi
    0000272c: 	movl	$0x1d, %edx
    00002731: 	movq	%rdi, %rsi
    00002734: 	movq	%rdi, 0x18(%rsp)
    00002739: 	movq	%r13, %rdi
    0000273c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10044
    00002741: 	movl	$0xf, %edx
    00002746: 	movq	%r13, %rdi
    00002749: 	leaq	DATAat0x108ea(%rip), %rsi
    00002750: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10064
    00002755: 	movq	0x20(%rsp), %rsi
    0000275a: 	movq	%r13, %rdi
    0000275d: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 10077
    00002762: 	movl	$0xb, %edx
    00002767: 	leaq	DATAat0x108fa(%rip), %rsi
    0000276e: 	movq	%rax, %rdi
    00002771: 	movq	%rax, 0x20(%rsp)
    00002776: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10102
    0000277b: 	movq	(%r15), %rsi
    0000277e: 	movq	0x20(%rsp), %rdi
    00002783: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 10115
    00002788: 	movl	$0x4, %edx
    0000278d: 	leaq	DATAat0x10906(%rip), %rsi
    00002794: 	movq	%rax, %rdi
    00002797: 	movq	%rax, %r15
    0000279a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10138
    0000279f: 	movq	0x8(%rsp), %rax
    000027a4: 	movq	%r15, %rdi
    000027a7: 	movl	(%rax), %esi
    000027a9: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 10153
    000027ae: 	movl	$0x2, %edx
    000027b3: 	leaq	DATAat0x1090b(%rip), %rsi
    000027ba: 	movq	%rax, %r13
    000027bd: 	movq	%rax, %rdi
    000027c0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10176
    000027c5: 	movq	(%r13), %rax
    000027c9: 	movq	-0x18(%rax), %rax
    000027cd: 	movq	0xf0(%r13,%rax), %r15
    000027d5: 	testq	%r15, %r15
    000027d8: 	je	.Ltmp16 # Offset: 10200
    000027de: 	cmpb	$0x0, 0x38(%r15)
    000027e3: 	je	.Ltmp138 # Offset: 10211
    000027e9: 	movzbl	0x43(%r15), %eax
.Ltmp153:
    000027ee: 	movq	%r13, %rdi
    000027f1: 	movsbl	%al, %esi
    000027f4: 	callq	_ZNSo3putEc@PLT # Offset: 10228
    000027f9: 	movq	%rax, %rdi
    000027fc: 	callq	_ZNSo5flushEv@PLT # Offset: 10236
.Ltmp173:
    00002801: 	callq	clock@PLT # Offset: 10241
    00002806: 	movq	0x18(%rsp), %rdi
    0000280b: 	pxor	%xmm0, %xmm0
    0000280f: 	movq	%rax, end_time(%rip)
    00002816: 	subq	start_time(%rip), %rax
    0000281d: 	cvtsi2sd	%rax, %xmm0
    00002822: 	divsd	DATAat0x10920(%rip), %xmm0
    0000282a: 	callq	_Z13record_resultdPKc # Offset: 10282
    0000282f: 	callq	clock@PLT # Offset: 10287
    00002834: 	movl	iterations(%rip), %r15d
    0000283b: 	movq	%rax, start_time(%rip)
    00002842: 	testl	%r15d, %r15d
    00002845: 	jle	.Ltmp139 # Offset: 10309
    00002847: 	xorl	%r13d, %r13d
    0000284a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp142:
    00002850: 	movq	%rbp, %rdi
    00002853: 	movl	$0x10000, %edx
    00002858: 	xorl	%esi, %esi
    0000285a: 	callq	memset@PLT # Offset: 10330
    0000285f: 	movq	DATAat0x10948(%rip), %rdi
    00002866: 	leaq	inputData64(%rip), %rax
    0000286d: 	movq	%rdi, %xmm2
    00002872: 	movq	DATAat0x10940(%rip), %rdi
    00002879: 	movq	%rdi, %xmm1
    0000287e: 	nop # Size: 2
.Ltmp141:
    00002880: 	movsd	(%rax), %xmm0
    00002884: 	addsd	%xmm1, %xmm0
    00002888: 	mulsd	%xmm2, %xmm0
    0000288c: 	cvttsd2si	%xmm0, %edx
    00002890: 	cmpl	$0x1fff, %edx
    00002896: 	ja	.Ltmp140 # Offset: 10390
    00002898: 	movslq	%edx, %rdx
    0000289b: 	addq	$0x1, (%rbp,%rdx,8)
.Ltmp140:
    000028a1: 	addq	$0x8, %rax
    000028a5: 	leaq	inputData32(%rip), %rsi
    000028ac: 	cmpq	%rsi, %rax
    000028af: 	jne	.Ltmp141 # Offset: 10415
    000028b1: 	addl	$0x1, %r13d
    000028b5: 	cmpl	%r13d, %r15d
    000028b8: 	jne	.Ltmp142 # Offset: 10424
.Ltmp139:
    000028ba: 	movq	0x10(%rsp), %rax
    000028bf: 	xorl	%r13d, %r13d
    000028c2: 	jmp	.Ltmp143 # Offset: 10434
    000028c4: 	nopl	(%rax) # Size: 4
.Ltmp145:
    000028c8: 	addq	$0x1, %r13
    000028cc: 	addq	$0x8, %rbx
    000028d0: 	addq	$0x8, %rax
    000028d4: 	cmpq	$0x2000, %r13
    000028db: 	je	.Ltmp144 # Offset: 10459
.Ltmp143:
    000028e1: 	movq	(%rax), %rdi
    000028e4: 	cmpq	%rdi, (%rbx)
    000028e7: 	je	.Ltmp145 # Offset: 10471
    000028e9: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r15
    000028f0: 	movl	$0x5, %edx
    000028f5: 	movq	%rax, 0x10(%rsp)
    000028fa: 	leaq	DATAat0x108e4(%rip), %rsi
    00002901: 	movq	%r15, %rdi
    00002904: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10500
    00002909: 	leaq	DATAat0x107a7(%rip), %rdi
    00002910: 	movl	$0x1d, %edx
    00002915: 	movq	%rdi, %rsi
    00002918: 	movq	%rdi, 0x8(%rsp)
    0000291d: 	movq	%r15, %rdi
    00002920: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10528
    00002925: 	movl	$0xf, %edx
    0000292a: 	movq	%r15, %rdi
    0000292d: 	leaq	DATAat0x108ea(%rip), %rsi
    00002934: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10548
    00002939: 	movq	%r13, %rsi
    0000293c: 	movq	%r15, %rdi
    0000293f: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 10559
    00002944: 	movl	$0xb, %edx
    00002949: 	leaq	DATAat0x108fa(%rip), %rsi
    00002950: 	movq	%rax, %rdi
    00002953: 	movq	%rax, %r13
    00002956: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10582
    0000295b: 	movq	0x10(%rsp), %rax
    00002960: 	movq	%r13, %rdi
    00002963: 	movq	(%rax), %rsi
    00002966: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 10598
    0000296b: 	movl	$0x4, %edx
    00002970: 	leaq	DATAat0x10906(%rip), %rsi
    00002977: 	movq	%rax, %rdi
    0000297a: 	movq	%rax, %r13
    0000297d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10621
    00002982: 	movq	(%rbx), %rsi
    00002985: 	movq	%r13, %rdi
    00002988: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 10632
    0000298d: 	movl	$0x2, %edx
    00002992: 	leaq	DATAat0x1090b(%rip), %rsi
    00002999: 	movq	%rax, %r13
    0000299c: 	movq	%rax, %rdi
    0000299f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 10655
    000029a4: 	movq	(%r13), %rax
    000029a8: 	movq	-0x18(%rax), %rax
    000029ac: 	movq	0xf0(%r13,%rax), %r15
    000029b4: 	testq	%r15, %r15
    000029b7: 	je	.Ltmp16 # Offset: 10679
    000029bd: 	cmpb	$0x0, 0x38(%r15)
    000029c2: 	je	.Ltmp146 # Offset: 10690
    000029c8: 	movzbl	0x43(%r15), %eax
.Ltmp154:
    000029cd: 	movq	%r13, %rdi
    000029d0: 	movsbl	%al, %esi
    000029d3: 	callq	_ZNSo3putEc@PLT # Offset: 10707
    000029d8: 	movq	%rax, %rdi
    000029db: 	callq	_ZNSo5flushEv@PLT # Offset: 10715
.Ltmp172:
    000029e0: 	callq	clock@PLT # Offset: 10720
    000029e5: 	movq	0x8(%rsp), %rdi
    000029ea: 	pxor	%xmm0, %xmm0
    000029ee: 	movq	%rax, end_time(%rip)
    000029f5: 	subq	start_time(%rip), %rax
    000029fc: 	cvtsi2sd	%rax, %xmm0
    00002a01: 	divsd	DATAat0x10920(%rip), %xmm0
    00002a09: 	callq	_Z13record_resultdPKc # Offset: 10761
    00002a0e: 	movq	DATAat0x10958(%rip), %rax
    00002a15: 	movq	%r12, %rdx
    00002a18: 	movsd	DATAat0x10950(%rip), %xmm1
    00002a20: 	leaq	DATAat0x107c5(%rip), %rcx
    00002a27: 	movl	$0x7d00, %esi
    00002a2c: 	leaq	inputData64(%rip), %rdi
    00002a33: 	movq	%rax, %xmm0
    00002a38: 	callq	_Z20test_histogramFloat2IdtEvPKT_iPT0_S0_S0_PKc # Offset: 10808
    00002a3d: 	movq	DATAat0x10950(%rip), %rax
    00002a44: 	movq	%r14, %rdx
    00002a47: 	leaq	DATAat0x107e3(%rip), %rcx
    00002a4e: 	movl	$0x7d00, %esi
    00002a53: 	leaq	inputData64(%rip), %rdi
    00002a5a: 	movq	%rax, %xmm1
    00002a5f: 	movq	DATAat0x10958(%rip), %rax
    00002a66: 	movq	%rax, %xmm0
    00002a6b: 	callq	_Z20test_histogramFloat2IdjEvPKT_iPT0_S0_S0_PKc # Offset: 10859
    00002a70: 	movq	DATAat0x10950(%rip), %rax
    00002a77: 	movq	%rbp, %rdx
    00002a7a: 	leaq	DATAat0x10801(%rip), %rcx
    00002a81: 	movl	$0x7d00, %esi
    00002a86: 	leaq	inputData64(%rip), %rdi
    00002a8d: 	movq	%rax, %xmm1
    00002a92: 	movq	DATAat0x10958(%rip), %rax
    00002a99: 	movq	%rax, %xmm0
    00002a9e: 	callq	_Z20test_histogramFloat2IdmEvPKT_iPT0_S0_S0_PKc # Offset: 10910
    00002aa3: 	movq	DATAat0x10950(%rip), %rax
    00002aaa: 	movq	%r12, %rdx
    00002aad: 	leaq	DATAat0x1081f(%rip), %rcx
    00002ab4: 	movl	$0x7d00, %esi
    00002ab9: 	leaq	inputData64(%rip), %rdi
    00002ac0: 	movq	%rax, %xmm1
    00002ac5: 	movq	DATAat0x10958(%rip), %rax
    00002acc: 	movq	%rax, %xmm0
    00002ad1: 	callq	_Z20test_histogramFloat4IdtEvPKT_iPT0_S0_S0_PKc # Offset: 10961
    00002ad6: 	movq	DATAat0x10950(%rip), %rax
    00002add: 	movq	%r14, %rdx
    00002ae0: 	leaq	DATAat0x1083d(%rip), %rcx
    00002ae7: 	movl	$0x7d00, %esi
    00002aec: 	leaq	inputData64(%rip), %rdi
    00002af3: 	movq	%rax, %xmm1
    00002af8: 	movq	DATAat0x10958(%rip), %rax
    00002aff: 	movq	%rax, %xmm0
    00002b04: 	callq	_Z20test_histogramFloat4IdjEvPKT_iPT0_S0_S0_PKc # Offset: 11012
    00002b09: 	movq	DATAat0x10950(%rip), %rax
    00002b10: 	movq	%rbp, %rdx
    00002b13: 	leaq	DATAat0x1085b(%rip), %rcx
    00002b1a: 	movl	$0x7d00, %esi
    00002b1f: 	leaq	inputData64(%rip), %rdi
    00002b26: 	movq	%rax, %xmm1
    00002b2b: 	movq	DATAat0x10958(%rip), %rax
    00002b32: 	movq	%rax, %xmm0
    00002b37: 	callq	_Z20test_histogramFloat4IdmEvPKT_iPT0_S0_S0_PKc # Offset: 11063
    00002b3c: 	movq	DATAat0x10950(%rip), %rax
    00002b43: 	movq	%r12, %rdx
    00002b46: 	leaq	DATAat0x10879(%rip), %rcx
    00002b4d: 	movl	$0x7d00, %esi
    00002b52: 	leaq	inputData64(%rip), %rdi
    00002b59: 	movq	%rax, %xmm1
    00002b5e: 	movq	DATAat0x10958(%rip), %rax
    00002b65: 	movq	%rax, %xmm0
    00002b6a: 	callq	_Z20test_histogramFloat5IdtEvPKT_iPT0_S0_S0_PKc # Offset: 11114
    00002b6f: 	movq	DATAat0x10950(%rip), %rax
    00002b76: 	movq	%r14, %rdx
    00002b79: 	leaq	DATAat0x10897(%rip), %rcx
    00002b80: 	movl	$0x7d00, %esi
    00002b85: 	leaq	inputData64(%rip), %rdi
    00002b8c: 	movq	%rax, %xmm1
    00002b91: 	movq	DATAat0x10958(%rip), %rax
    00002b98: 	movq	%rax, %xmm0
    00002b9d: 	callq	_Z20test_histogramFloat5IdjEvPKT_iPT0_S0_S0_PKc # Offset: 11165
    00002ba2: 	movq	DATAat0x10950(%rip), %rax
    00002ba9: 	movq	%rbp, %rdx
    00002bac: 	leaq	DATAat0x108b5(%rip), %rcx
    00002bb3: 	movl	$0x7d00, %esi
    00002bb8: 	leaq	inputData64(%rip), %rdi
    00002bbf: 	movq	%rax, %xmm1
    00002bc4: 	movq	DATAat0x10958(%rip), %rax
    00002bcb: 	movq	%rax, %xmm0
    00002bd0: 	callq	_Z20test_histogramFloat5IdmEvPKT_iPT0_S0_S0_PKc # Offset: 11216
    00002bd5: 	movl	iterations(%rip), %edx
    00002bdb: 	xorl	%r8d, %r8d
    00002bde: 	xorl	%ecx, %ecx
    00002be0: 	movl	$0x7d00, %esi
    00002be5: 	leaq	DATAat0x108d3(%rip), %rdi
    00002bec: 	callq	_Z9summarizePKciiii # Offset: 11244
    00002bf1: 	addq	$0x48, %rsp
    00002bf5: 	xorl	%eax, %eax
    00002bf7: 	popq	%rbx
    00002bf8: 	popq	%rbp
    00002bf9: 	popq	%r12
    00002bfb: 	popq	%r13
    00002bfd: 	popq	%r14
    00002bff: 	popq	%r15
    00002c01: 	retq # Offset: 11265
.Ltmp3:
    00002c02: 	movq	0x8(%r14), %rdi
    00002c06: 	movl	$0xa, %edx
    00002c0b: 	xorl	%esi, %esi
    00002c0d: 	callq	strtol@PLT # Offset: 11277
    00002c12: 	movl	%eax, iterations(%rip)
    00002c18: 	cmpl	$0x2, %r13d
    00002c1c: 	jle	.Ltmp147 # Offset: 11292
    00002c22: 	movq	0x10(%r14), %rdi
    00002c26: 	movl	$0xa, %edx
    00002c2b: 	xorl	%esi, %esi
    00002c2d: 	callq	strtol@PLT # Offset: 11309
    00002c32: 	movl	%eax, init_value(%rip)
    00002c38: 	jmp	.Ltmp147 # Offset: 11320
.Ltmp17:
    00002c3d: 	movq	%r15, %rdi
    00002c40: 	movq	%r10, 0x10(%rsp)
    00002c45: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 11333
    00002c4a: 	movq	(%r15), %rax
    00002c4d: 	movq	0x10(%rsp), %r10
    00002c52: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rcx
    00002c59: 	movl	$0xa, %edx
    00002c5e: 	movq	0x30(%rax), %rax
    00002c62: 	cmpq	%rcx, %rax
    00002c65: 	je	.Ltmp148 # Offset: 11365
    00002c6b: 	movl	$0xa, %esi
    00002c70: 	movq	%r15, %rdi
    00002c73: 	callq	*%rax # Offset: 11379
    00002c75: 	movq	0x10(%rsp), %r10
    00002c7a: 	movl	%eax, %edx
    00002c7c: 	jmp	.Ltmp148 # Offset: 11388
.Ltmp130:
    00002c81: 	movq	%rdi, 0x20(%rsp)
    00002c86: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 11398
    00002c8b: 	movq	0x20(%rsp), %rdi
    00002c90: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rcx
    00002c97: 	movq	(%rdi), %rax
    00002c9a: 	movq	0x30(%rax), %rdx
    00002c9e: 	movl	$0xa, %eax
    00002ca3: 	cmpq	%rcx, %rdx
    00002ca6: 	je	.Ltmp149 # Offset: 11430
    00002cac: 	movl	$0xa, %esi
    00002cb1: 	callq	*%rdx # Offset: 11441
    00002cb3: 	jmp	.Ltmp149 # Offset: 11443
.Ltmp120:
    00002cb8: 	movq	%rdi, 0x28(%rsp)
    00002cbd: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 11453
    00002cc2: 	movq	0x28(%rsp), %rdi
    00002cc7: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rcx
    00002cce: 	movq	(%rdi), %rax
    00002cd1: 	movq	0x30(%rax), %rdx
    00002cd5: 	movl	$0xa, %eax
    00002cda: 	cmpq	%rcx, %rdx
    00002cdd: 	je	.Ltmp150 # Offset: 11485
    00002ce3: 	movl	$0xa, %esi
    00002ce8: 	callq	*%rdx # Offset: 11496
    00002cea: 	jmp	.Ltmp150 # Offset: 11498
.Ltmp112:
    00002cef: 	movq	%rbx, %rdi
    00002cf2: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 11506
    00002cf7: 	movq	(%rbx), %rax
    00002cfa: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rcx
    00002d01: 	movq	0x30(%rax), %rdx
    00002d05: 	movl	$0xa, %eax
    00002d0a: 	cmpq	%rcx, %rdx
    00002d0d: 	je	.Ltmp151 # Offset: 11533
    00002d13: 	movl	$0xa, %esi
    00002d18: 	movq	%rbx, %rdi
    00002d1b: 	callq	*%rdx # Offset: 11547
    00002d1d: 	jmp	.Ltmp151 # Offset: 11549
.Ltmp104:
    00002d22: 	movq	%r14, %rdi
    00002d25: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 11557
    00002d2a: 	movq	(%r14), %rax
    00002d2d: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rcx
    00002d34: 	movq	0x30(%rax), %rdx
    00002d38: 	movl	$0xa, %eax
    00002d3d: 	cmpq	%rcx, %rdx
    00002d40: 	je	.Ltmp152 # Offset: 11584
    00002d46: 	movl	$0xa, %esi
    00002d4b: 	movq	%r14, %rdi
    00002d4e: 	callq	*%rdx # Offset: 11598
    00002d50: 	jmp	.Ltmp152 # Offset: 11600
.Ltmp138:
    00002d55: 	movq	%r15, %rdi
    00002d58: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 11608
    00002d5d: 	movq	(%r15), %rax
    00002d60: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rcx
    00002d67: 	movq	0x30(%rax), %rdx
    00002d6b: 	movl	$0xa, %eax
    00002d70: 	cmpq	%rcx, %rdx
    00002d73: 	je	.Ltmp153 # Offset: 11635
    00002d79: 	movl	$0xa, %esi
    00002d7e: 	movq	%r15, %rdi
    00002d81: 	callq	*%rdx # Offset: 11649
    00002d83: 	jmp	.Ltmp153 # Offset: 11651
.Ltmp146:
    00002d88: 	movq	%r15, %rdi
    00002d8b: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 11659
    00002d90: 	movq	(%r15), %rax
    00002d93: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rcx
    00002d9a: 	movq	0x30(%rax), %rdx
    00002d9e: 	movl	$0xa, %eax
    00002da3: 	cmpq	%rcx, %rdx
    00002da6: 	je	.Ltmp154 # Offset: 11686
    00002dac: 	movl	$0xa, %esi
    00002db1: 	movq	%r15, %rdi
    00002db4: 	callq	*%rdx # Offset: 11700
    00002db6: 	jmp	.Ltmp154 # Offset: 11702
.Ltmp38:
    00002dbb: 	movq	%r11, 0x28(%rsp)
    00002dc0: 	movq	%rdi, 0x18(%rsp)
    00002dc5: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 11717
    00002dca: 	movq	0x18(%rsp), %rdi
    00002dcf: 	movq	0x28(%rsp), %r11
    00002dd4: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rcx
    00002ddb: 	movl	$0xa, %edx
    00002de0: 	movq	(%rdi), %rax
    00002de3: 	movq	0x30(%rax), %rax
    00002de7: 	cmpq	%rcx, %rax
    00002dea: 	je	.Ltmp155 # Offset: 11754
    00002df0: 	movq	%r11, 0x18(%rsp)
    00002df5: 	movl	$0xa, %esi
    00002dfa: 	callq	*%rax # Offset: 11770
    00002dfc: 	movq	0x18(%rsp), %r11
    00002e01: 	movl	%eax, %edx
    00002e03: 	jmp	.Ltmp155 # Offset: 11779
.Ltmp31:
    00002e08: 	movq	%r11, 0x30(%rsp)
    00002e0d: 	movq	%r10, 0x20(%rsp)
    00002e12: 	movq	%rdi, 0x18(%rsp)
    00002e17: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 11799
    00002e1c: 	movq	0x18(%rsp), %rdi
    00002e21: 	movq	0x20(%rsp), %r10
    00002e26: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rcx
    00002e2d: 	movq	0x30(%rsp), %r11
    00002e32: 	movl	$0xa, %edx
    00002e37: 	movq	(%rdi), %rax
    00002e3a: 	movq	0x30(%rax), %rax
    00002e3e: 	cmpq	%rcx, %rax
    00002e41: 	je	.Ltmp156 # Offset: 11841
    00002e47: 	movq	%r11, 0x20(%rsp)
    00002e4c: 	movl	$0xa, %esi
    00002e51: 	movq	%r10, 0x18(%rsp)
    00002e56: 	callq	*%rax # Offset: 11862
    00002e58: 	movq	0x20(%rsp), %r11
    00002e5d: 	movq	0x18(%rsp), %r10
    00002e62: 	movl	%eax, %edx
    00002e64: 	jmp	.Ltmp156 # Offset: 11876
.Ltmp24:
    00002e69: 	movq	%r14, %rdi
    00002e6c: 	movq	%r11, 0x18(%rsp)
    00002e71: 	movq	%r10, 0x10(%rsp)
    00002e76: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 11894
    00002e7b: 	movq	(%r14), %rax
    00002e7e: 	movq	0x10(%rsp), %r10
    00002e83: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rcx
    00002e8a: 	movq	0x18(%rsp), %r11
    00002e8f: 	movl	$0xa, %edx
    00002e94: 	movq	0x30(%rax), %rax
    00002e98: 	cmpq	%rcx, %rax
    00002e9b: 	je	.Ltmp157 # Offset: 11931
    00002ea1: 	movl	$0xa, %esi
    00002ea6: 	movq	%r14, %rdi
    00002ea9: 	callq	*%rax # Offset: 11945
    00002eab: 	movq	0x18(%rsp), %r11
    00002eb0: 	movq	0x10(%rsp), %r10
    00002eb5: 	movl	%eax, %edx
    00002eb7: 	jmp	.Ltmp157 # Offset: 11959
.Ltmp94:
    00002ebc: 	movq	%r15, %rdi
    00002ebf: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 11967
    00002ec4: 	movq	(%r15), %rax
    00002ec7: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rcx
    00002ece: 	movq	0x30(%rax), %rdx
    00002ed2: 	movl	$0xa, %eax
    00002ed7: 	cmpq	%rcx, %rdx
    00002eda: 	je	.Ltmp158 # Offset: 11994
    00002ee0: 	movl	$0xa, %esi
    00002ee5: 	movq	%r15, %rdi
    00002ee8: 	callq	*%rdx # Offset: 12008
    00002eea: 	jmp	.Ltmp158 # Offset: 12010
.Ltmp87:
    00002eef: 	movq	%r15, %rdi
    00002ef2: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 12018
    00002ef7: 	movq	(%r15), %rax
    00002efa: 	movl	$0xa, %edx
    00002eff: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rcx
    00002f06: 	movq	0x30(%rax), %rax
    00002f0a: 	cmpq	%rcx, %rax
    00002f0d: 	je	.Ltmp159 # Offset: 12045
    00002f13: 	movl	$0xa, %esi
    00002f18: 	movq	%r15, %rdi
    00002f1b: 	callq	*%rax # Offset: 12059
    00002f1d: 	movl	%eax, %edx
    00002f1f: 	jmp	.Ltmp159 # Offset: 12063
.Ltmp80:
    00002f24: 	movq	%r15, %rdi
    00002f27: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 12071
    00002f2c: 	movq	(%r15), %rax
    00002f2f: 	movl	$0xa, %edx
    00002f34: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rcx
    00002f3b: 	movq	0x30(%rax), %rax
    00002f3f: 	cmpq	%rcx, %rax
    00002f42: 	je	.Ltmp160 # Offset: 12098
    00002f48: 	movl	$0xa, %esi
    00002f4d: 	movq	%r15, %rdi
    00002f50: 	callq	*%rax # Offset: 12112
    00002f52: 	movl	%eax, %edx
    00002f54: 	jmp	.Ltmp160 # Offset: 12116
.Ltmp73:
    00002f59: 	movq	%rdi, 0x20(%rsp)
    00002f5e: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 12126
    00002f63: 	movq	0x20(%rsp), %rdi
    00002f68: 	movl	$0xa, %edx
    00002f6d: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rcx
    00002f74: 	movq	(%rdi), %rax
    00002f77: 	movq	0x30(%rax), %rax
    00002f7b: 	cmpq	%rcx, %rax
    00002f7e: 	je	.Ltmp161 # Offset: 12158
    00002f84: 	movl	$0xa, %esi
    00002f89: 	callq	*%rax # Offset: 12169
    00002f8b: 	movl	%eax, %edx
    00002f8d: 	jmp	.Ltmp161 # Offset: 12173
.Ltmp66:
    00002f92: 	movq	%rbx, %rdi
    00002f95: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 12181
    00002f9a: 	movq	(%rbx), %rax
    00002f9d: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rcx
    00002fa4: 	movq	0x30(%rax), %rdx
    00002fa8: 	movl	$0xa, %eax
    00002fad: 	cmpq	%rcx, %rdx
    00002fb0: 	je	.Ltmp162 # Offset: 12208
    00002fb6: 	movl	$0xa, %esi
    00002fbb: 	movq	%rbx, %rdi
    00002fbe: 	callq	*%rdx # Offset: 12222
    00002fc0: 	jmp	.Ltmp162 # Offset: 12224
.Ltmp59:
    00002fc5: 	movq	%r15, %rdi
    00002fc8: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 12232
    00002fcd: 	movq	(%r15), %rax
    00002fd0: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rcx
    00002fd7: 	movq	0x30(%rax), %rdx
    00002fdb: 	movl	$0xa, %eax
    00002fe0: 	cmpq	%rcx, %rdx
    00002fe3: 	je	.Ltmp163 # Offset: 12259
    00002fe9: 	movl	$0xa, %esi
    00002fee: 	movq	%r15, %rdi
    00002ff1: 	callq	*%rdx # Offset: 12273
    00002ff3: 	jmp	.Ltmp163 # Offset: 12275
.Ltmp52:
    00002ff8: 	movq	%rdi, 0x8(%rsp)
    00002ffd: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 12285
    00003002: 	movq	0x8(%rsp), %rdi
    00003007: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rcx
    0000300e: 	movq	(%rdi), %rax
    00003011: 	movq	0x30(%rax), %rdx
    00003015: 	movl	$0xa, %eax
    0000301a: 	cmpq	%rcx, %rdx
    0000301d: 	je	.Ltmp164 # Offset: 12317
    00003023: 	movl	$0xa, %esi
    00003028: 	callq	*%rdx # Offset: 12328
    0000302a: 	jmp	.Ltmp164 # Offset: 12330
.Ltmp45:
    0000302f: 	movq	%rdi, 0x20(%rsp)
    00003034: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 12340
    00003039: 	movq	0x20(%rsp), %rdi
    0000303e: 	movl	$0xa, %edx
    00003043: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rcx
    0000304a: 	movq	(%rdi), %rax
    0000304d: 	movq	0x30(%rax), %rax
    00003051: 	cmpq	%rcx, %rax
    00003054: 	je	.Ltmp165 # Offset: 12372
    0000305a: 	movl	$0xa, %esi
    0000305f: 	callq	*%rax # Offset: 12383
    00003061: 	movl	%eax, %edx
    00003063: 	jmp	.Ltmp165 # Offset: 12387
.Ltmp36:
    00003068: 	leaq	DATAat0x101d8(%rip), %rax
    0000306f: 	movq	%rax, 0x20(%rsp)
    00003074: 	jmp	.Ltmp166 # Offset: 12404
.Ltmp29:
    00003079: 	leaq	DATAat0x10158(%rip), %rax
    00003080: 	movq	%rax, 0x28(%rsp)
    00003085: 	jmp	.Ltmp167 # Offset: 12421
.Ltmp22:
    0000308a: 	leaq	DATAat0x10138(%rip), %rax
    00003091: 	movq	%rax, 0x20(%rsp)
    00003096: 	jmp	.Ltmp168 # Offset: 12438
.Ltmp14:
    0000309b: 	leaq	DATAat0x10118(%rip), %rax
    000030a2: 	movq	%rax, 0x18(%rsp)
    000030a7: 	jmp	.Ltmp169 # Offset: 12455
.Ltmp50:
    000030ac: 	leaq	DATAat0x10218(%rip), %rax
    000030b3: 	movq	%rax, 0x18(%rsp)
    000030b8: 	jmp	.Ltmp170 # Offset: 12472
.Ltmp43:
    000030bd: 	leaq	DATAat0x101f8(%rip), %rax
    000030c4: 	movq	%rax, 0x18(%rsp)
    000030c9: 	jmp	.Ltmp171 # Offset: 12489
.Ltmp144:
    000030ce: 	leaq	DATAat0x107a7(%rip), %rax
    000030d5: 	movq	%rax, 0x8(%rsp)
    000030da: 	jmp	.Ltmp172 # Offset: 12506
.Ltmp136:
    000030df: 	leaq	DATAat0x10789(%rip), %rax
    000030e6: 	movq	%rax, 0x18(%rsp)
    000030eb: 	jmp	.Ltmp173 # Offset: 12523
.Ltmp128:
    000030f0: 	leaq	DATAat0x1076b(%rip), %rax
    000030f7: 	movq	%rax, 0x18(%rsp)
    000030fc: 	jmp	.Ltmp174 # Offset: 12540
.Ltmp118:
    00003101: 	leaq	DATAat0x10639(%rip), %rax
    00003108: 	movq	%rax, 0x20(%rsp)
    0000310d: 	jmp	.Ltmp175 # Offset: 12557
.Ltmp110:
    00003112: 	leaq	DATAat0x1061c(%rip), %r15
    00003119: 	jmp	.Ltmp176 # Offset: 12569
.Ltmp102:
    0000311e: 	leaq	DATAat0x105ff(%rip), %rbp
    00003125: 	jmp	.Ltmp177 # Offset: 12581
.Ltmp92:
    0000312a: 	leaq	DATAat0x10458(%rip), %rax
    00003131: 	movq	%rax, 0x8(%rsp)
    00003136: 	jmp	.Ltmp178 # Offset: 12598
.Ltmp85:
    0000313b: 	leaq	DATAat0x10438(%rip), %rax
    00003142: 	movq	%rax, 0x18(%rsp)
    00003147: 	jmp	.Ltmp179 # Offset: 12615
.Ltmp78:
    0000314c: 	leaq	DATAat0x10418(%rip), %rax
    00003153: 	movq	%rax, 0x18(%rsp)
    00003158: 	jmp	.Ltmp180 # Offset: 12632
.Ltmp71:
    0000315d: 	leaq	DATAat0x10398(%rip), %rax
    00003164: 	movq	%rax, 0x18(%rsp)
    00003169: 	jmp	.Ltmp181 # Offset: 12649
.Ltmp64:
    0000316e: 	leaq	DATAat0x10378(%rip), %r15
    00003175: 	jmp	.Ltmp182 # Offset: 12661
.Ltmp57:
    0000317a: 	leaq	DATAat0x10358(%rip), %rax
    00003181: 	movq	%rax, 0x8(%rsp)
    00003186: 	jmp	.Ltmp183 # Offset: 12678
.Ltmp1:
    0000318b: 	leaq	DATAat0x105bc(%rip), %rsi
    00003192: 	movl	$0x1, %edi
    00003197: 	xorl	%eax, %eax
    00003199: 	callq	__printf_chk@PLT # Offset: 12697
    0000319e: 	jmp	.Ltmp147 # Offset: 12702
.Ltmp16:
    000031a3: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 12707
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_GLOBAL__sub_I_results/1(*2)" after disassembly {
  All names   : _GLOBAL__sub_I_results/1
                _GLOBAL__sub_I_results/histogram.cpp/1
  Number      : 3
  State       : disassembled
  Address     : 0x44b0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x44b0
  Section     : .text
  Orc Section : .local.text._GLOBAL__sub_I_results/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB02:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	leaq	"_ZStL8__ioinit/1"(%rip), %rbp
    0000000c: 	movq	%rbp, %rdi
    0000000f: 	callq	_ZNSt8ios_base4InitC1Ev@PLT # Offset: 15
    00000014: 	movq	DATAat0x12ff8(%rip), %rdi
    0000001b: 	movq	%rbp, %rsi
    0000001e: 	popq	%rbp
    0000001f: 	leaq	__dso_handle(%rip), %rdx
    00000026: 	jmp	__cxa_atexit@PLT # TAILCALL  # Offset: 38
DWARF CFI Instructions:
    <empty>
End of Function "_GLOBAL__sub_I_results/1(*2)"

Binary Function "_start" after disassembly {
  Number      : 4
  State       : disassembled
  Address     : 0x44e0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x44e0
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB03:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x12fd8(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 5
  State       : disassembled
  Address     : 0x4510
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x4510
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp184 # Offset: 17
    00000013: 	movq	DATAat0x12fe0(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp184 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp184:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x4540
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x4540
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp185 # Offset: 34
    00000024: 	movq	DATAat0x12ff0(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp185 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp185:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x4580
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x4580
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp186 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp187 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp187:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp186:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x45c0
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x45c0
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 9
  State       : disassembled
  Address     : 0x45d0
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x45d0
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp188 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp189 # Offset: 38
.Ltmp188:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp190 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp189:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp190:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x10008(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 10
  State       : disassembled
  Address     : 0x4670
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x4670
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp191 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp192 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp193:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp193 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp206:
    00000069: 	leaq	DATAat0x105d8(%rip), %rbp
    00000070: 	leaq	DATAat0x10028(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x10068(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp194 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x10928(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x10098(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x10920(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp195 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp199:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp196 # Offset: 244
    000000fa: 	movq	DATAat0x10910(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp200:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x10910(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp197 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp197:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x105bd(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x10928(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp198 # Offset: 398
.Ltmp195:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp199 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp200 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp196:
    000001c8: 	movq	DATAat0x10918(%rip), %rsi
    000001cf: 	movq	DATAat0x10910(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp197 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp198:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp194 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp201 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp202:
    00000210: 	addq	$0x10, %rax
.Ltmp201:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp202 # Offset: 542
.Ltmp207:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x100c8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp203 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp204 # Offset: 592
.Ltmp203:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp191:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp204:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp205:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp205 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x10598(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp191 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp192:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp206 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp194:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp207 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 11
  State       : disassembled
  Address     : 0x49a0
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x49a0
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp208 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp209 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp210:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp210 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp215:
    0000006a: 	leaq	DATAat0x105d8(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x100f0(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x105be(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x105d8(%rip), %r8
    000000a1: 	leaq	DATAat0x105ac(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp211 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp212:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x105bd(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp212 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp211 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp213 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp214:
    00000140: 	addq	$0x10, %rax
.Ltmp213:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp214 # Offset: 334
.Ltmp216:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x100c8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp208:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp209:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp215 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp211:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp216 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x4b50
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x4b50
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x4b70
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x4b70
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x10920(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark6scrandEm" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x4bb0
  Size        : 0xc
  MaxSize     : 0x10
  Offset      : 0x4bb0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark6scrandEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	movq	%rdi, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000000b: 	retq # Offset: 11
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark6scrandEm"

Binary Function "_ZN9benchmark7crand64Ev" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x4bc0
  Size        : 0x42
  MaxSize     : 0x50
  Offset      : 0x4bc0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand64Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rdx
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rax
    00000015: 	imulq	%rax, %rdx
    00000019: 	movabsq	$0x14057b7ef767814f, %rax
    00000023: 	addq	%rax, %rdx
    00000026: 	movq	%rdx, %rax
    00000029: 	movq	%rdx, %rcx
    0000002c: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rax
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rax
    0000003e: 	xorq	%rdx, %rax
    00000041: 	retq # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand64Ev"

Binary Function "_ZN9benchmark7crand32Ev" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x4c10
  Size        : 0x41
  MaxSize     : 0x50
  Offset      : 0x4c10
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand32Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rdx
    00000015: 	imulq	%rdx, %rax
    00000019: 	movabsq	$0x14057b7ef767814f, %rdx
    00000023: 	addq	%rdx, %rax
    00000026: 	movq	%rax, %rdx
    00000029: 	movq	%rax, %rcx
    0000002c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rdx
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rdx
    0000003e: 	xorl	%edx, %eax
    00000040: 	retq # Offset: 64
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand32Ev"

Binary Function "_ZNKSt5ctypeIcE8do_widenEc" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x4c60
  Size        : 0x7
  MaxSize     : 0x10
  Offset      : 0x4c60
  Section     : .text
  Orc Section : .local.text._ZNKSt5ctypeIcE8do_widenEc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	movl	%esi, %eax
    00000006: 	retq # Offset: 6
DWARF CFI Instructions:
    <empty>
End of Function "_ZNKSt5ctypeIcE8do_widenEc"

Binary Function "_Z15test_histogram2IhtEvPKT_iPT0_PKc" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x4c70
  Size        : 0x2e8
  MaxSize     : 0x2f0
  Offset      : 0x4c70
  Section     : .text
  Orc Section : .local.text._Z15test_histogram2IhtEvPKT_iPT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movl	%esi, %r12d
    00000012: 	pushq	%rbp
    00000013: 	movq	%rcx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rdx, %rbx
    0000001a: 	subq	$0x8, %rsp
    0000001e: 	callq	clock@PLT # Offset: 30
    00000023: 	movq	%rax, start_time(%rip)
    0000002a: 	movl	iterations(%rip), %eax
    00000030: 	testl	%eax, %eax
    00000032: 	jle	.Ltmp217 # Offset: 50
    00000038: 	leal	-0x4(%r12), %eax
    0000003d: 	xorl	%r8d, %r8d
    00000040: 	leaq	0x208(%rbx), %r10
    00000047: 	shrl	$0x2, %eax
    0000004a: 	leaq	0x8(%rbx), %r9
    0000004e: 	movl	%eax, %edx
    00000050: 	leal	0x4(,%rax,4), %r11d
    00000058: 	xorl	%eax, %eax
    0000005a: 	leaq	0x4(%r13,%rdx,4), %rsi
    0000005f: 	nop # Size: 1
.Ltmp221:
    00000060: 	movq	%r9, %rdi
    00000063: 	movq	%rbx, %rcx
    00000066: 	movq	%rax, (%rbx)
    00000069: 	andq	$-0x8, %rdi
    0000006d: 	movq	%rax, -0x10(%r10)
    00000071: 	subq	%rdi, %rcx
    00000074: 	addl	$0x200, %ecx
    0000007a: 	shrl	$0x3, %ecx
    0000007d: 	rep		stosq	%rax, %es:(%rdi)
    00000080: 	cmpl	$0x3, %r12d
    00000084: 	jle	.Ltmp218 # Offset: 132
    0000008a: 	movq	%r13, %rdx
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp219:
    00000090: 	movzbl	0x1(%rdx), %r14d
    00000095: 	movzbl	0x2(%rdx), %edi
    00000099: 	addq	$0x4, %rdx
    0000009d: 	movzbl	-0x1(%rdx), %ecx
    000000a1: 	movzbl	-0x4(%rdx), %r15d
    000000a6: 	addw	$0x1, (%rbx,%r15,2)
    000000ac: 	addw	$0x1, (%rbx,%r14,2)
    000000b2: 	addw	$0x1, (%rbx,%rdi,2)
    000000b7: 	addw	$0x1, (%rbx,%rcx,2)
    000000bc: 	cmpq	%rdx, %rsi
    000000bf: 	jne	.Ltmp219 # Offset: 191
    000000c1: 	movl	%r11d, %edx
.Ltmp228:
    000000c4: 	cmpl	%edx, %r12d
    000000c7: 	jle	.Ltmp220 # Offset: 199
    000000c9: 	movslq	%edx, %rcx
    000000cc: 	movzbl	(%r13,%rcx), %ecx
    000000d2: 	addw	$0x1, (%rbx,%rcx,2)
    000000d7: 	leal	0x1(%rdx), %ecx
    000000da: 	cmpl	%ecx, %r12d
    000000dd: 	jle	.Ltmp220 # Offset: 221
    000000df: 	movslq	%ecx, %rcx
    000000e2: 	movzbl	(%r13,%rcx), %ecx
    000000e8: 	addw	$0x1, (%rbx,%rcx,2)
    000000ed: 	leal	0x2(%rdx), %ecx
    000000f0: 	cmpl	%ecx, %r12d
    000000f3: 	jle	.Ltmp220 # Offset: 243
    000000f5: 	movslq	%ecx, %rcx
    000000f8: 	addl	$0x3, %edx
    000000fb: 	movzbl	(%r13,%rcx), %ecx
    00000101: 	addw	$0x1, (%rbx,%rcx,2)
    00000106: 	cmpl	%edx, %r12d
    00000109: 	jle	.Ltmp220 # Offset: 265
    0000010b: 	movslq	%edx, %rdx
    0000010e: 	movzbl	(%r13,%rdx), %edx
    00000114: 	addw	$0x1, (%rbx,%rdx,2)
.Ltmp220:
    00000119: 	addl	$0x1, %r8d
    0000011d: 	cmpl	%r8d, iterations(%rip)
    00000124: 	jg	.Ltmp221 # Offset: 292
.Ltmp217:
    0000012a: 	leaq	referenceHistogram(%rip), %r12
    00000131: 	xorl	%r13d, %r13d
    00000134: 	jmp	.Ltmp222 # Offset: 308
    00000136: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp224:
    00000140: 	addq	$0x1, %r13
    00000144: 	addq	$0x2, %rbx
    00000148: 	addq	$0x8, %r12
    0000014c: 	cmpq	$0x100, %r13
    00000153: 	je	.Ltmp223 # Offset: 339
.Ltmp222:
    00000159: 	movzwl	(%r12), %eax
    0000015e: 	cmpw	%ax, (%rbx)
    00000161: 	je	.Ltmp224 # Offset: 353
    00000163: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    0000016a: 	movl	$0x5, %edx
    0000016f: 	leaq	DATAat0x108e4(%rip), %rsi
    00000176: 	movq	%r14, %rdi
    00000179: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 377
    0000017e: 	testq	%rbp, %rbp
    00000181: 	je	.Ltmp225 # Offset: 385
    00000187: 	movq	%rbp, %rdi
    0000018a: 	callq	strlen@PLT # Offset: 394
    0000018f: 	movq	%rbp, %rsi
    00000192: 	movq	%r14, %rdi
    00000195: 	movq	%rax, %rdx
    00000198: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 408
.Ltmp230:
    0000019d: 	movl	$0xf, %edx
    000001a2: 	leaq	DATAat0x108ea(%rip), %rsi
    000001a9: 	movq	%r14, %rdi
    000001ac: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 428
    000001b1: 	movq	%r13, %rsi
    000001b4: 	movq	%r14, %rdi
    000001b7: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 439
    000001bc: 	movl	$0xb, %edx
    000001c1: 	leaq	DATAat0x108fa(%rip), %rsi
    000001c8: 	movq	%rax, %rdi
    000001cb: 	movq	%rax, %r13
    000001ce: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 462
    000001d3: 	movq	(%r12), %rsi
    000001d7: 	movq	%r13, %rdi
    000001da: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 474
    000001df: 	movl	$0x4, %edx
    000001e4: 	leaq	DATAat0x10906(%rip), %rsi
    000001eb: 	movq	%rax, %rdi
    000001ee: 	movq	%rax, %r12
    000001f1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 497
    000001f6: 	movzwl	(%rbx), %esi
    000001f9: 	movq	%r12, %rdi
    000001fc: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 508
    00000201: 	movl	$0x2, %edx
    00000206: 	leaq	DATAat0x1090b(%rip), %rsi
    0000020d: 	movq	%rax, %r12
    00000210: 	movq	%rax, %rdi
    00000213: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 531
    00000218: 	movq	(%r12), %rax
    0000021c: 	movq	-0x18(%rax), %rax
    00000220: 	movq	0xf0(%r12,%rax), %r13
    00000228: 	testq	%r13, %r13
    0000022b: 	je	.Ltmp226 # Offset: 555
    00000231: 	cmpb	$0x0, 0x38(%r13)
    00000236: 	je	.Ltmp227 # Offset: 566
    00000238: 	movsbl	0x43(%r13), %esi
.Ltmp229:
    0000023d: 	movq	%r12, %rdi
    00000240: 	callq	_ZNSo3putEc@PLT # Offset: 576
    00000245: 	movq	%rax, %rdi
    00000248: 	callq	_ZNSo5flushEv@PLT # Offset: 584
.Ltmp223:
    0000024d: 	callq	clock@PLT # Offset: 589
    00000252: 	pxor	%xmm0, %xmm0
    00000256: 	movq	%rbp, %rdi
    00000259: 	movq	%rax, end_time(%rip)
    00000260: 	subq	start_time(%rip), %rax
    00000267: 	cvtsi2sd	%rax, %xmm0
    0000026c: 	divsd	DATAat0x10920(%rip), %xmm0
    00000274: 	addq	$0x8, %rsp
    00000278: 	popq	%rbx
    00000279: 	popq	%rbp
    0000027a: 	popq	%r12
    0000027c: 	popq	%r13
    0000027e: 	popq	%r14
    00000280: 	popq	%r15
    00000282: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 642
    00000287: 	nopw	(%rax,%rax) # Size: 9
.Ltmp218:
    00000290: 	xorl	%edx, %edx
    00000292: 	jmp	.Ltmp228 # Offset: 658
.Ltmp227:
    00000297: 	movq	%r13, %rdi
    0000029a: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 666
    0000029f: 	movq	(%r13), %rax
    000002a3: 	movl	$0xa, %esi
    000002a8: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    000002af: 	movq	0x30(%rax), %rax
    000002b3: 	cmpq	%rdx, %rax
    000002b6: 	je	.Ltmp229 # Offset: 694
    000002b8: 	movq	%r13, %rdi
    000002bb: 	callq	*%rax # Offset: 699
    000002bd: 	movsbl	%al, %esi
    000002c0: 	jmp	.Ltmp229 # Offset: 704
.Ltmp225:
    000002c5: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000002cc: 	movq	-0x18(%rax), %rdi
    000002d0: 	addq	%r14, %rdi
    000002d3: 	movl	0x20(%rdi), %esi
    000002d6: 	orl	$0x1, %esi
    000002d9: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 729
    000002de: 	jmp	.Ltmp230 # Offset: 734
.Ltmp226:
    000002e3: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 739
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_histogram2IhtEvPKT_iPT0_PKc"

Binary Function "_Z15test_histogram2IhjEvPKT_iPT0_PKc" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x4f60
  Size        : 0x2cd
  MaxSize     : 0x2d0
  Offset      : 0x4f60
  Section     : .text
  Orc Section : .local.text._Z15test_histogram2IhjEvPKT_iPT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movl	%esi, %r12d
    00000012: 	pushq	%rbp
    00000013: 	movq	%rcx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rdx, %rbx
    0000001a: 	subq	$0x8, %rsp
    0000001e: 	callq	clock@PLT # Offset: 30
    00000023: 	movq	%rax, start_time(%rip)
    0000002a: 	movl	iterations(%rip), %eax
    00000030: 	testl	%eax, %eax
    00000032: 	jle	.Ltmp231 # Offset: 50
    00000038: 	leal	-0x4(%r12), %eax
    0000003d: 	xorl	%r8d, %r8d
    00000040: 	leaq	0x408(%rbx), %r10
    00000047: 	shrl	$0x2, %eax
    0000004a: 	leaq	0x8(%rbx), %r9
    0000004e: 	movl	%eax, %edx
    00000050: 	leal	0x4(,%rax,4), %r11d
    00000058: 	xorl	%eax, %eax
    0000005a: 	leaq	0x4(%r13,%rdx,4), %rsi
    0000005f: 	nop # Size: 1
.Ltmp235:
    00000060: 	movq	%r9, %rdi
    00000063: 	movq	%rbx, %rcx
    00000066: 	movq	%rax, (%rbx)
    00000069: 	andq	$-0x8, %rdi
    0000006d: 	movq	%rax, -0x10(%r10)
    00000071: 	subq	%rdi, %rcx
    00000074: 	addl	$0x400, %ecx
    0000007a: 	shrl	$0x3, %ecx
    0000007d: 	rep		stosq	%rax, %es:(%rdi)
    00000080: 	cmpl	$0x3, %r12d
    00000084: 	jle	.Ltmp232 # Offset: 132
    0000008a: 	movq	%r13, %rdx
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp233:
    00000090: 	movzbl	0x1(%rdx), %r14d
    00000095: 	movzbl	0x2(%rdx), %edi
    00000099: 	addq	$0x4, %rdx
    0000009d: 	movzbl	-0x1(%rdx), %ecx
    000000a1: 	movzbl	-0x4(%rdx), %r15d
    000000a6: 	addl	$0x1, (%rbx,%r15,4)
    000000ab: 	addl	$0x1, (%rbx,%r14,4)
    000000b0: 	addl	$0x1, (%rbx,%rdi,4)
    000000b4: 	addl	$0x1, (%rbx,%rcx,4)
    000000b8: 	cmpq	%rdx, %rsi
    000000bb: 	jne	.Ltmp233 # Offset: 187
    000000bd: 	movl	%r11d, %edx
.Ltmp242:
    000000c0: 	cmpl	%edx, %r12d
    000000c3: 	jle	.Ltmp234 # Offset: 195
    000000c5: 	movslq	%edx, %rcx
    000000c8: 	movzbl	(%r13,%rcx), %ecx
    000000ce: 	addl	$0x1, (%rbx,%rcx,4)
    000000d2: 	leal	0x1(%rdx), %ecx
    000000d5: 	cmpl	%ecx, %r12d
    000000d8: 	jle	.Ltmp234 # Offset: 216
    000000da: 	movslq	%ecx, %rcx
    000000dd: 	movzbl	(%r13,%rcx), %ecx
    000000e3: 	addl	$0x1, (%rbx,%rcx,4)
    000000e7: 	leal	0x2(%rdx), %ecx
    000000ea: 	cmpl	%ecx, %r12d
    000000ed: 	jle	.Ltmp234 # Offset: 237
    000000ef: 	movslq	%ecx, %rcx
    000000f2: 	addl	$0x3, %edx
    000000f5: 	movzbl	(%r13,%rcx), %ecx
    000000fb: 	addl	$0x1, (%rbx,%rcx,4)
    000000ff: 	cmpl	%edx, %r12d
    00000102: 	jle	.Ltmp234 # Offset: 258
    00000104: 	movslq	%edx, %rdx
    00000107: 	movzbl	(%r13,%rdx), %edx
    0000010d: 	addl	$0x1, (%rbx,%rdx,4)
.Ltmp234:
    00000111: 	addl	$0x1, %r8d
    00000115: 	cmpl	%r8d, iterations(%rip)
    0000011c: 	jg	.Ltmp235 # Offset: 284
.Ltmp231:
    00000122: 	leaq	referenceHistogram(%rip), %r12
    00000129: 	xorl	%r13d, %r13d
    0000012c: 	jmp	.Ltmp236 # Offset: 300
    0000012e: 	nop # Size: 2
.Ltmp238:
    00000130: 	addq	$0x1, %r13
    00000134: 	addq	$0x4, %rbx
    00000138: 	addq	$0x8, %r12
    0000013c: 	cmpq	$0x100, %r13
    00000143: 	je	.Ltmp237 # Offset: 323
.Ltmp236:
    00000149: 	movl	(%r12), %eax
    0000014d: 	cmpl	%eax, (%rbx)
    0000014f: 	je	.Ltmp238 # Offset: 335
    00000151: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000158: 	movl	$0x5, %edx
    0000015d: 	leaq	DATAat0x108e4(%rip), %rsi
    00000164: 	movq	%r14, %rdi
    00000167: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 359
    0000016c: 	testq	%rbp, %rbp
    0000016f: 	je	.Ltmp239 # Offset: 367
    00000175: 	movq	%rbp, %rdi
    00000178: 	callq	strlen@PLT # Offset: 376
    0000017d: 	movq	%rbp, %rsi
    00000180: 	movq	%r14, %rdi
    00000183: 	movq	%rax, %rdx
    00000186: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 390
.Ltmp244:
    0000018b: 	movl	$0xf, %edx
    00000190: 	leaq	DATAat0x108ea(%rip), %rsi
    00000197: 	movq	%r14, %rdi
    0000019a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 410
    0000019f: 	movq	%r13, %rsi
    000001a2: 	movq	%r14, %rdi
    000001a5: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 421
    000001aa: 	movl	$0xb, %edx
    000001af: 	leaq	DATAat0x108fa(%rip), %rsi
    000001b6: 	movq	%rax, %rdi
    000001b9: 	movq	%rax, %r13
    000001bc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 444
    000001c1: 	movq	(%r12), %rsi
    000001c5: 	movq	%r13, %rdi
    000001c8: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 456
    000001cd: 	movl	$0x4, %edx
    000001d2: 	leaq	DATAat0x10906(%rip), %rsi
    000001d9: 	movq	%rax, %rdi
    000001dc: 	movq	%rax, %r12
    000001df: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 479
    000001e4: 	movl	(%rbx), %esi
    000001e6: 	movq	%r12, %rdi
    000001e9: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 489
    000001ee: 	movl	$0x2, %edx
    000001f3: 	leaq	DATAat0x1090b(%rip), %rsi
    000001fa: 	movq	%rax, %r12
    000001fd: 	movq	%rax, %rdi
    00000200: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 512
    00000205: 	movq	(%r12), %rax
    00000209: 	movq	-0x18(%rax), %rax
    0000020d: 	movq	0xf0(%r12,%rax), %r13
    00000215: 	testq	%r13, %r13
    00000218: 	je	.Ltmp240 # Offset: 536
    0000021e: 	cmpb	$0x0, 0x38(%r13)
    00000223: 	je	.Ltmp241 # Offset: 547
    00000225: 	movsbl	0x43(%r13), %esi
.Ltmp243:
    0000022a: 	movq	%r12, %rdi
    0000022d: 	callq	_ZNSo3putEc@PLT # Offset: 557
    00000232: 	movq	%rax, %rdi
    00000235: 	callq	_ZNSo5flushEv@PLT # Offset: 565
.Ltmp237:
    0000023a: 	callq	clock@PLT # Offset: 570
    0000023f: 	pxor	%xmm0, %xmm0
    00000243: 	movq	%rbp, %rdi
    00000246: 	movq	%rax, end_time(%rip)
    0000024d: 	subq	start_time(%rip), %rax
    00000254: 	cvtsi2sd	%rax, %xmm0
    00000259: 	divsd	DATAat0x10920(%rip), %xmm0
    00000261: 	addq	$0x8, %rsp
    00000265: 	popq	%rbx
    00000266: 	popq	%rbp
    00000267: 	popq	%r12
    00000269: 	popq	%r13
    0000026b: 	popq	%r14
    0000026d: 	popq	%r15
    0000026f: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 623
    00000274: 	nopl	(%rax) # Size: 4
.Ltmp232:
    00000278: 	xorl	%edx, %edx
    0000027a: 	jmp	.Ltmp242 # Offset: 634
.Ltmp241:
    0000027f: 	movq	%r13, %rdi
    00000282: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 642
    00000287: 	movq	(%r13), %rax
    0000028b: 	movl	$0xa, %esi
    00000290: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    00000297: 	movq	0x30(%rax), %rax
    0000029b: 	cmpq	%rdx, %rax
    0000029e: 	je	.Ltmp243 # Offset: 670
    000002a0: 	movq	%r13, %rdi
    000002a3: 	callq	*%rax # Offset: 675
    000002a5: 	movsbl	%al, %esi
    000002a8: 	jmp	.Ltmp243 # Offset: 680
.Ltmp239:
    000002aa: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000002b1: 	movq	-0x18(%rax), %rdi
    000002b5: 	addq	%r14, %rdi
    000002b8: 	movl	0x20(%rdi), %esi
    000002bb: 	orl	$0x1, %esi
    000002be: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 702
    000002c3: 	jmp	.Ltmp244 # Offset: 707
.Ltmp240:
    000002c8: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 712
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_histogram2IhjEvPKT_iPT0_PKc"

Binary Function "_Z15test_histogram2IhmEvPKT_iPT0_PKc" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x5230
  Size        : 0x2d5
  MaxSize     : 0x2e0
  Offset      : 0x5230
  Section     : .text
  Orc Section : .local.text._Z15test_histogram2IhmEvPKT_iPT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movl	%esi, %r12d
    00000012: 	pushq	%rbp
    00000013: 	movq	%rcx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rdx, %rbx
    0000001a: 	subq	$0x8, %rsp
    0000001e: 	callq	clock@PLT # Offset: 30
    00000023: 	movq	%rax, start_time(%rip)
    0000002a: 	movl	iterations(%rip), %eax
    00000030: 	testl	%eax, %eax
    00000032: 	jle	.Ltmp245 # Offset: 50
    00000038: 	leal	-0x4(%r12), %eax
    0000003d: 	xorl	%r8d, %r8d
    00000040: 	leaq	0x808(%rbx), %r10
    00000047: 	shrl	$0x2, %eax
    0000004a: 	leaq	0x8(%rbx), %r9
    0000004e: 	movl	%eax, %edx
    00000050: 	leal	0x4(,%rax,4), %r11d
    00000058: 	xorl	%eax, %eax
    0000005a: 	leaq	0x4(%r13,%rdx,4), %rsi
    0000005f: 	nop # Size: 1
.Ltmp249:
    00000060: 	movq	%r9, %rdi
    00000063: 	movq	%rbx, %rcx
    00000066: 	movq	%rax, (%rbx)
    00000069: 	andq	$-0x8, %rdi
    0000006d: 	movq	%rax, -0x10(%r10)
    00000071: 	subq	%rdi, %rcx
    00000074: 	addl	$0x800, %ecx
    0000007a: 	shrl	$0x3, %ecx
    0000007d: 	rep		stosq	%rax, %es:(%rdi)
    00000080: 	cmpl	$0x3, %r12d
    00000084: 	jle	.Ltmp246 # Offset: 132
    0000008a: 	movq	%r13, %rdx
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp247:
    00000090: 	movzbl	0x1(%rdx), %r14d
    00000095: 	movzbl	0x2(%rdx), %edi
    00000099: 	addq	$0x4, %rdx
    0000009d: 	movzbl	-0x1(%rdx), %ecx
    000000a1: 	movzbl	-0x4(%rdx), %r15d
    000000a6: 	addq	$0x1, (%rbx,%r15,8)
    000000ab: 	addq	$0x1, (%rbx,%r14,8)
    000000b0: 	addq	$0x1, (%rbx,%rdi,8)
    000000b5: 	addq	$0x1, (%rbx,%rcx,8)
    000000ba: 	cmpq	%rdx, %rsi
    000000bd: 	jne	.Ltmp247 # Offset: 189
    000000bf: 	movl	%r11d, %edx
.Ltmp256:
    000000c2: 	cmpl	%edx, %r12d
    000000c5: 	jle	.Ltmp248 # Offset: 197
    000000c7: 	movslq	%edx, %rcx
    000000ca: 	movzbl	(%r13,%rcx), %ecx
    000000d0: 	addq	$0x1, (%rbx,%rcx,8)
    000000d5: 	leal	0x1(%rdx), %ecx
    000000d8: 	cmpl	%ecx, %r12d
    000000db: 	jle	.Ltmp248 # Offset: 219
    000000dd: 	movslq	%ecx, %rcx
    000000e0: 	movzbl	(%r13,%rcx), %ecx
    000000e6: 	addq	$0x1, (%rbx,%rcx,8)
    000000eb: 	leal	0x2(%rdx), %ecx
    000000ee: 	cmpl	%ecx, %r12d
    000000f1: 	jle	.Ltmp248 # Offset: 241
    000000f3: 	movslq	%ecx, %rcx
    000000f6: 	addl	$0x3, %edx
    000000f9: 	movzbl	(%r13,%rcx), %ecx
    000000ff: 	addq	$0x1, (%rbx,%rcx,8)
    00000104: 	cmpl	%edx, %r12d
    00000107: 	jle	.Ltmp248 # Offset: 263
    00000109: 	movslq	%edx, %rdx
    0000010c: 	movzbl	(%r13,%rdx), %edx
    00000112: 	addq	$0x1, (%rbx,%rdx,8)
.Ltmp248:
    00000117: 	addl	$0x1, %r8d
    0000011b: 	cmpl	%r8d, iterations(%rip)
    00000122: 	jg	.Ltmp249 # Offset: 290
.Ltmp245:
    00000128: 	leaq	referenceHistogram(%rip), %r12
    0000012f: 	xorl	%r13d, %r13d
    00000132: 	jmp	.Ltmp250 # Offset: 306
    00000134: 	nopl	(%rax) # Size: 4
.Ltmp252:
    00000138: 	addq	$0x1, %r13
    0000013c: 	addq	$0x8, %rbx
    00000140: 	addq	$0x8, %r12
    00000144: 	cmpq	$0x100, %r13
    0000014b: 	je	.Ltmp251 # Offset: 331
.Ltmp250:
    00000151: 	movq	(%r12), %rax
    00000155: 	cmpq	%rax, (%rbx)
    00000158: 	je	.Ltmp252 # Offset: 344
    0000015a: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000161: 	movl	$0x5, %edx
    00000166: 	leaq	DATAat0x108e4(%rip), %rsi
    0000016d: 	movq	%r14, %rdi
    00000170: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 368
    00000175: 	testq	%rbp, %rbp
    00000178: 	je	.Ltmp253 # Offset: 376
    0000017e: 	movq	%rbp, %rdi
    00000181: 	callq	strlen@PLT # Offset: 385
    00000186: 	movq	%rbp, %rsi
    00000189: 	movq	%r14, %rdi
    0000018c: 	movq	%rax, %rdx
    0000018f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 399
.Ltmp258:
    00000194: 	movl	$0xf, %edx
    00000199: 	leaq	DATAat0x108ea(%rip), %rsi
    000001a0: 	movq	%r14, %rdi
    000001a3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 419
    000001a8: 	movq	%r13, %rsi
    000001ab: 	movq	%r14, %rdi
    000001ae: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 430
    000001b3: 	movl	$0xb, %edx
    000001b8: 	leaq	DATAat0x108fa(%rip), %rsi
    000001bf: 	movq	%rax, %rdi
    000001c2: 	movq	%rax, %r13
    000001c5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 453
    000001ca: 	movq	(%r12), %rsi
    000001ce: 	movq	%r13, %rdi
    000001d1: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 465
    000001d6: 	movl	$0x4, %edx
    000001db: 	leaq	DATAat0x10906(%rip), %rsi
    000001e2: 	movq	%rax, %rdi
    000001e5: 	movq	%rax, %r12
    000001e8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 488
    000001ed: 	movq	(%rbx), %rsi
    000001f0: 	movq	%r12, %rdi
    000001f3: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 499
    000001f8: 	movl	$0x2, %edx
    000001fd: 	leaq	DATAat0x1090b(%rip), %rsi
    00000204: 	movq	%rax, %r12
    00000207: 	movq	%rax, %rdi
    0000020a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 522
    0000020f: 	movq	(%r12), %rax
    00000213: 	movq	-0x18(%rax), %rax
    00000217: 	movq	0xf0(%r12,%rax), %r13
    0000021f: 	testq	%r13, %r13
    00000222: 	je	.Ltmp254 # Offset: 546
    00000228: 	cmpb	$0x0, 0x38(%r13)
    0000022d: 	je	.Ltmp255 # Offset: 557
    0000022f: 	movsbl	0x43(%r13), %esi
.Ltmp257:
    00000234: 	movq	%r12, %rdi
    00000237: 	callq	_ZNSo3putEc@PLT # Offset: 567
    0000023c: 	movq	%rax, %rdi
    0000023f: 	callq	_ZNSo5flushEv@PLT # Offset: 575
.Ltmp251:
    00000244: 	callq	clock@PLT # Offset: 580
    00000249: 	pxor	%xmm0, %xmm0
    0000024d: 	movq	%rbp, %rdi
    00000250: 	movq	%rax, end_time(%rip)
    00000257: 	subq	start_time(%rip), %rax
    0000025e: 	cvtsi2sd	%rax, %xmm0
    00000263: 	divsd	DATAat0x10920(%rip), %xmm0
    0000026b: 	addq	$0x8, %rsp
    0000026f: 	popq	%rbx
    00000270: 	popq	%rbp
    00000271: 	popq	%r12
    00000273: 	popq	%r13
    00000275: 	popq	%r14
    00000277: 	popq	%r15
    00000279: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 633
    0000027e: 	nop # Size: 2
.Ltmp246:
    00000280: 	xorl	%edx, %edx
    00000282: 	jmp	.Ltmp256 # Offset: 642
.Ltmp255:
    00000287: 	movq	%r13, %rdi
    0000028a: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 650
    0000028f: 	movq	(%r13), %rax
    00000293: 	movl	$0xa, %esi
    00000298: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    0000029f: 	movq	0x30(%rax), %rax
    000002a3: 	cmpq	%rdx, %rax
    000002a6: 	je	.Ltmp257 # Offset: 678
    000002a8: 	movq	%r13, %rdi
    000002ab: 	callq	*%rax # Offset: 683
    000002ad: 	movsbl	%al, %esi
    000002b0: 	jmp	.Ltmp257 # Offset: 688
.Ltmp253:
    000002b2: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000002b9: 	movq	-0x18(%rax), %rdi
    000002bd: 	addq	%r14, %rdi
    000002c0: 	movl	0x20(%rdi), %esi
    000002c3: 	orl	$0x1, %esi
    000002c6: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 710
    000002cb: 	jmp	.Ltmp258 # Offset: 715
.Ltmp254:
    000002d0: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 720
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_histogram2IhmEvPKT_iPT0_PKc"

Binary Function "_Z15test_histogram4IhtEvPKT_iPT0_PKc" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x5510
  Size        : 0x353
  MaxSize     : 0x360
  Offset      : 0x5510
  Section     : .text
  Orc Section : .local.text._Z15test_histogram4IhtEvPKT_iPT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%esi, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdx, %rbx
    00000016: 	subq	$0x228, %rsp
    0000001d: 	movq	%rcx, 0x8(%rsp)
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0x218(%rsp)
    00000033: 	xorl	%eax, %eax
    00000035: 	callq	clock@PLT # Offset: 53
    0000003a: 	movq	%rax, start_time(%rip)
    00000041: 	movl	iterations(%rip), %eax
    00000047: 	testl	%eax, %eax
    00000049: 	jle	.Ltmp259 # Offset: 73
    0000004f: 	leal	-0x4(%rbp), %eax
    00000052: 	xorl	%r10d, %r10d
    00000055: 	leaq	0x208(%rbx), %r13
    0000005c: 	shrl	$0x2, %eax
    0000005f: 	leaq	0x8(%rbx), %r11
    00000063: 	leaq	0x10(%rsp), %r8
    00000068: 	movl	%eax, %edx
    0000006a: 	leal	0x4(,%rax,4), %r14d
    00000072: 	xorl	%eax, %eax
    00000074: 	leaq	0x4(%r12,%rdx,4), %r9
.Ltmp264:
    00000079: 	movq	%r11, %rdi
    0000007c: 	movq	%rbx, %rcx
    0000007f: 	movq	%rax, (%rbx)
    00000082: 	andq	$-0x8, %rdi
    00000086: 	movq	%rax, -0x10(%r13)
    0000008a: 	subq	%rdi, %rcx
    0000008d: 	addl	$0x200, %ecx
    00000093: 	shrl	$0x3, %ecx
    00000096: 	rep		stosq	%rax, %es:(%rdi)
    00000099: 	movl	$0x40, %ecx
    0000009e: 	movq	%r8, %rdi
    000000a1: 	rep		stosq	%rax, %es:(%rdi)
    000000a4: 	cmpl	$0x3, %ebp
    000000a7: 	jle	.Ltmp260 # Offset: 167
    000000ad: 	movq	%r12, %rdx
.Ltmp261:
    000000b0: 	movzbl	0x1(%rdx), %edi
    000000b4: 	movzbl	0x3(%rdx), %ecx
    000000b8: 	addq	$0x4, %rdx
    000000bc: 	movzbl	-0x2(%rdx), %esi
    000000c0: 	movzbl	-0x4(%rdx), %r15d
    000000c5: 	addw	$0x1, 0x10(%rsp,%rdi,2)
    000000cb: 	addw	$0x1, (%rbx,%r15,2)
    000000d1: 	addw	$0x1, 0x10(%rsp,%rcx,2)
    000000d7: 	addw	$0x1, (%rbx,%rsi,2)
    000000dc: 	cmpq	%rdx, %r9
    000000df: 	jne	.Ltmp261 # Offset: 223
    000000e1: 	movl	%r14d, %edx
.Ltmp272:
    000000e4: 	cmpl	%edx, %ebp
    000000e6: 	jle	.Ltmp262 # Offset: 230
    000000e8: 	movslq	%edx, %rcx
    000000eb: 	movzbl	(%r12,%rcx), %ecx
    000000f0: 	addw	$0x1, (%rbx,%rcx,2)
    000000f5: 	leal	0x1(%rdx), %ecx
    000000f8: 	cmpl	%ecx, %ebp
    000000fa: 	jle	.Ltmp262 # Offset: 250
    000000fc: 	movslq	%ecx, %rcx
    000000ff: 	movzbl	(%r12,%rcx), %ecx
    00000104: 	addw	$0x1, (%rbx,%rcx,2)
    00000109: 	leal	0x2(%rdx), %ecx
    0000010c: 	cmpl	%ecx, %ebp
    0000010e: 	jle	.Ltmp262 # Offset: 270
    00000110: 	movslq	%ecx, %rcx
    00000113: 	addl	$0x3, %edx
    00000116: 	movzbl	(%r12,%rcx), %ecx
    0000011b: 	addw	$0x1, (%rbx,%rcx,2)
    00000120: 	cmpl	%edx, %ebp
    00000122: 	jle	.Ltmp262 # Offset: 290
    00000124: 	movslq	%edx, %rdx
    00000127: 	movzbl	(%r12,%rdx), %edx
    0000012c: 	addw	$0x1, (%rbx,%rdx,2)
.Ltmp262:
    00000131: 	xorl	%edx, %edx
    00000133: 	nopl	(%rax,%rax) # Size: 5
.Ltmp263:
    00000138: 	movdqu	(%rbx,%rdx), %xmm0
    0000013d: 	paddw	(%r8,%rdx), %xmm0
    00000143: 	movups	%xmm0, (%rbx,%rdx)
    00000147: 	addq	$0x10, %rdx
    0000014b: 	cmpq	$0x200, %rdx
    00000152: 	jne	.Ltmp263 # Offset: 338
    00000154: 	addl	$0x1, %r10d
    00000158: 	cmpl	%r10d, iterations(%rip)
    0000015f: 	jg	.Ltmp264 # Offset: 351
.Ltmp259:
    00000165: 	leaq	referenceHistogram(%rip), %rbp
    0000016c: 	xorl	%r12d, %r12d
    0000016f: 	jmp	.Ltmp265 # Offset: 367
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp267:
    00000178: 	addq	$0x1, %r12
    0000017c: 	addq	$0x2, %rbx
    00000180: 	addq	$0x8, %rbp
    00000184: 	cmpq	$0x100, %r12
    0000018b: 	je	.Ltmp266 # Offset: 395
.Ltmp265:
    00000191: 	movzwl	(%rbp), %eax
    00000195: 	cmpw	%ax, (%rbx)
    00000198: 	je	.Ltmp267 # Offset: 408
    0000019a: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    000001a1: 	movl	$0x5, %edx
    000001a6: 	leaq	DATAat0x108e4(%rip), %rsi
    000001ad: 	movq	%r13, %rdi
    000001b0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 432
    000001b5: 	cmpq	$0x0, 0x8(%rsp)
    000001bb: 	je	.Ltmp268 # Offset: 443
    000001c1: 	movq	0x8(%rsp), %r14
    000001c6: 	movq	%r14, %rdi
    000001c9: 	callq	strlen@PLT # Offset: 457
    000001ce: 	movq	%r14, %rsi
    000001d1: 	movq	%r13, %rdi
    000001d4: 	movq	%rax, %rdx
    000001d7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 471
.Ltmp274:
    000001dc: 	movl	$0xf, %edx
    000001e1: 	leaq	DATAat0x108ea(%rip), %rsi
    000001e8: 	movq	%r13, %rdi
    000001eb: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 491
    000001f0: 	movq	%r12, %rsi
    000001f3: 	movq	%r13, %rdi
    000001f6: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 502
    000001fb: 	movl	$0xb, %edx
    00000200: 	leaq	DATAat0x108fa(%rip), %rsi
    00000207: 	movq	%rax, %rdi
    0000020a: 	movq	%rax, %r12
    0000020d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 525
    00000212: 	movq	(%rbp), %rsi
    00000216: 	movq	%r12, %rdi
    00000219: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 537
    0000021e: 	movl	$0x4, %edx
    00000223: 	leaq	DATAat0x10906(%rip), %rsi
    0000022a: 	movq	%rax, %rdi
    0000022d: 	movq	%rax, %rbp
    00000230: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 560
    00000235: 	movzwl	(%rbx), %esi
    00000238: 	movq	%rbp, %rdi
    0000023b: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 571
    00000240: 	movl	$0x2, %edx
    00000245: 	leaq	DATAat0x1090b(%rip), %rsi
    0000024c: 	movq	%rax, %rbp
    0000024f: 	movq	%rax, %rdi
    00000252: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 594
    00000257: 	movq	(%rbp), %rax
    0000025b: 	movq	-0x18(%rax), %rax
    0000025f: 	movq	0xf0(%rbp,%rax), %r12
    00000267: 	testq	%r12, %r12
    0000026a: 	je	.Ltmp269 # Offset: 618
    00000270: 	cmpb	$0x0, 0x38(%r12)
    00000276: 	je	.Ltmp270 # Offset: 630
    00000278: 	movsbl	0x43(%r12), %esi
    0000027e: 	movq	%rbp, %rdi
    00000281: 	callq	_ZNSo3putEc@PLT # Offset: 641
    00000286: 	movq	%rax, %rdi
    00000289: 	callq	_ZNSo5flushEv@PLT # Offset: 649
.Ltmp266:
    0000028e: 	callq	clock@PLT # Offset: 654
    00000293: 	movq	%rax, end_time(%rip)
    0000029a: 	movq	0x218(%rsp), %rdx
    000002a2: 	subq	%fs:0x28, %rdx
    000002ab: 	jne	.Ltmp271 # Offset: 683
    000002b1: 	subq	start_time(%rip), %rax
    000002b8: 	pxor	%xmm0, %xmm0
    000002bc: 	movq	0x8(%rsp), %rdi
    000002c1: 	cvtsi2sd	%rax, %xmm0
    000002c6: 	divsd	DATAat0x10920(%rip), %xmm0
    000002ce: 	addq	$0x228, %rsp
    000002d5: 	popq	%rbx
    000002d6: 	popq	%rbp
    000002d7: 	popq	%r12
    000002d9: 	popq	%r13
    000002db: 	popq	%r14
    000002dd: 	popq	%r15
    000002df: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 735
.Ltmp260:
    000002e4: 	xorl	%edx, %edx
    000002e6: 	jmp	.Ltmp272 # Offset: 742
.Ltmp270:
    000002eb: 	movq	%r12, %rdi
    000002ee: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 750
    000002f3: 	movq	(%r12), %rax
    000002f7: 	movl	$0xa, %esi
    000002fc: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    00000303: 	movq	0x30(%rax), %rax
    00000307: 	cmpq	%rdx, %rax
    0000030a: 	jne	.Ltmp273 # Offset: 778
.Ltmp275:
    0000030c: 	movq	%rbp, %rdi
    0000030f: 	callq	_ZNSo3putEc@PLT # Offset: 783
    00000314: 	movq	%rax, %rdi
    00000317: 	callq	_ZNSo5flushEv@PLT # Offset: 791
    0000031c: 	jmp	.Ltmp266 # Offset: 796
.Ltmp268:
    00000321: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000328: 	movq	-0x18(%rax), %rdi
    0000032c: 	addq	%r13, %rdi
    0000032f: 	movl	0x20(%rdi), %esi
    00000332: 	orl	$0x1, %esi
    00000335: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 821
    0000033a: 	jmp	.Ltmp274 # Offset: 826
.Ltmp273:
    0000033f: 	movq	%r12, %rdi
    00000342: 	callq	*%rax # Offset: 834
    00000344: 	movsbl	%al, %esi
    00000347: 	jmp	.Ltmp275 # Offset: 839
.Ltmp271:
    00000349: 	callq	__stack_chk_fail@PLT # Offset: 841
.Ltmp269:
    0000034e: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 846
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_histogram4IhtEvPKT_iPT0_PKc"

Binary Function "_Z15test_histogram4IhjEvPKT_iPT0_PKc" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x5870
  Size        : 0x348
  MaxSize     : 0x350
  Offset      : 0x5870
  Section     : .text
  Orc Section : .local.text._Z15test_histogram4IhjEvPKT_iPT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%esi, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdx, %rbx
    00000016: 	subq	$0x428, %rsp
    0000001d: 	movq	%rcx, 0x8(%rsp)
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0x418(%rsp)
    00000033: 	xorl	%eax, %eax
    00000035: 	callq	clock@PLT # Offset: 53
    0000003a: 	movq	%rax, start_time(%rip)
    00000041: 	movl	iterations(%rip), %eax
    00000047: 	testl	%eax, %eax
    00000049: 	jle	.Ltmp276 # Offset: 73
    0000004f: 	leal	-0x4(%rbp), %eax
    00000052: 	xorl	%r10d, %r10d
    00000055: 	leaq	0x408(%rbx), %r13
    0000005c: 	shrl	$0x2, %eax
    0000005f: 	leaq	0x8(%rbx), %r11
    00000063: 	leaq	0x10(%rsp), %r8
    00000068: 	movl	%eax, %edx
    0000006a: 	leal	0x4(,%rax,4), %r14d
    00000072: 	xorl	%eax, %eax
    00000074: 	leaq	0x4(%r12,%rdx,4), %r9
.Ltmp281:
    00000079: 	movq	%r11, %rdi
    0000007c: 	movq	%rbx, %rcx
    0000007f: 	movq	%rax, (%rbx)
    00000082: 	andq	$-0x8, %rdi
    00000086: 	movq	%rax, -0x10(%r13)
    0000008a: 	subq	%rdi, %rcx
    0000008d: 	addl	$0x400, %ecx
    00000093: 	shrl	$0x3, %ecx
    00000096: 	rep		stosq	%rax, %es:(%rdi)
    00000099: 	movl	$0x80, %ecx
    0000009e: 	movq	%r8, %rdi
    000000a1: 	rep		stosq	%rax, %es:(%rdi)
    000000a4: 	cmpl	$0x3, %ebp
    000000a7: 	jle	.Ltmp277 # Offset: 167
    000000ad: 	movq	%r12, %rdx
.Ltmp278:
    000000b0: 	movzbl	0x1(%rdx), %edi
    000000b4: 	movzbl	0x3(%rdx), %ecx
    000000b8: 	addq	$0x4, %rdx
    000000bc: 	movzbl	-0x2(%rdx), %esi
    000000c0: 	movzbl	-0x4(%rdx), %r15d
    000000c5: 	addl	$0x1, 0x10(%rsp,%rdi,4)
    000000ca: 	addl	$0x1, (%rbx,%r15,4)
    000000cf: 	addl	$0x1, 0x10(%rsp,%rcx,4)
    000000d4: 	addl	$0x1, (%rbx,%rsi,4)
    000000d8: 	cmpq	%rdx, %r9
    000000db: 	jne	.Ltmp278 # Offset: 219
    000000dd: 	movl	%r14d, %edx
.Ltmp289:
    000000e0: 	cmpl	%edx, %ebp
    000000e2: 	jle	.Ltmp279 # Offset: 226
    000000e4: 	movslq	%edx, %rcx
    000000e7: 	movzbl	(%r12,%rcx), %ecx
    000000ec: 	addl	$0x1, (%rbx,%rcx,4)
    000000f0: 	leal	0x1(%rdx), %ecx
    000000f3: 	cmpl	%ecx, %ebp
    000000f5: 	jle	.Ltmp279 # Offset: 245
    000000f7: 	movslq	%ecx, %rcx
    000000fa: 	movzbl	(%r12,%rcx), %ecx
    000000ff: 	addl	$0x1, (%rbx,%rcx,4)
    00000103: 	leal	0x2(%rdx), %ecx
    00000106: 	cmpl	%ecx, %ebp
    00000108: 	jle	.Ltmp279 # Offset: 264
    0000010a: 	movslq	%ecx, %rcx
    0000010d: 	addl	$0x3, %edx
    00000110: 	movzbl	(%r12,%rcx), %ecx
    00000115: 	addl	$0x1, (%rbx,%rcx,4)
    00000119: 	cmpl	%edx, %ebp
    0000011b: 	jle	.Ltmp279 # Offset: 283
    0000011d: 	movslq	%edx, %rdx
    00000120: 	movzbl	(%r12,%rdx), %edx
    00000125: 	addl	$0x1, (%rbx,%rdx,4)
.Ltmp279:
    00000129: 	xorl	%edx, %edx
    0000012b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp280:
    00000130: 	movdqu	(%rbx,%rdx), %xmm0
    00000135: 	paddd	(%r8,%rdx), %xmm0
    0000013b: 	movups	%xmm0, (%rbx,%rdx)
    0000013f: 	addq	$0x10, %rdx
    00000143: 	cmpq	$0x400, %rdx
    0000014a: 	jne	.Ltmp280 # Offset: 330
    0000014c: 	addl	$0x1, %r10d
    00000150: 	cmpl	%r10d, iterations(%rip)
    00000157: 	jg	.Ltmp281 # Offset: 343
.Ltmp276:
    0000015d: 	leaq	referenceHistogram(%rip), %rbp
    00000164: 	xorl	%r12d, %r12d
    00000167: 	jmp	.Ltmp282 # Offset: 359
    00000169: 	nopl	(%rax) # Size: 7
.Ltmp284:
    00000170: 	addq	$0x1, %r12
    00000174: 	addq	$0x4, %rbx
    00000178: 	addq	$0x8, %rbp
    0000017c: 	cmpq	$0x100, %r12
    00000183: 	je	.Ltmp283 # Offset: 387
.Ltmp282:
    00000189: 	movl	(%rbp), %eax
    0000018c: 	cmpl	%eax, (%rbx)
    0000018e: 	je	.Ltmp284 # Offset: 398
    00000190: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    00000197: 	movl	$0x5, %edx
    0000019c: 	leaq	DATAat0x108e4(%rip), %rsi
    000001a3: 	movq	%r13, %rdi
    000001a6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 422
    000001ab: 	cmpq	$0x0, 0x8(%rsp)
    000001b1: 	je	.Ltmp285 # Offset: 433
    000001b7: 	movq	0x8(%rsp), %r14
    000001bc: 	movq	%r14, %rdi
    000001bf: 	callq	strlen@PLT # Offset: 447
    000001c4: 	movq	%r14, %rsi
    000001c7: 	movq	%r13, %rdi
    000001ca: 	movq	%rax, %rdx
    000001cd: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 461
.Ltmp291:
    000001d2: 	movl	$0xf, %edx
    000001d7: 	leaq	DATAat0x108ea(%rip), %rsi
    000001de: 	movq	%r13, %rdi
    000001e1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 481
    000001e6: 	movq	%r12, %rsi
    000001e9: 	movq	%r13, %rdi
    000001ec: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 492
    000001f1: 	movl	$0xb, %edx
    000001f6: 	leaq	DATAat0x108fa(%rip), %rsi
    000001fd: 	movq	%rax, %rdi
    00000200: 	movq	%rax, %r12
    00000203: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 515
    00000208: 	movq	(%rbp), %rsi
    0000020c: 	movq	%r12, %rdi
    0000020f: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 527
    00000214: 	movl	$0x4, %edx
    00000219: 	leaq	DATAat0x10906(%rip), %rsi
    00000220: 	movq	%rax, %rdi
    00000223: 	movq	%rax, %rbp
    00000226: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 550
    0000022b: 	movl	(%rbx), %esi
    0000022d: 	movq	%rbp, %rdi
    00000230: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 560
    00000235: 	movl	$0x2, %edx
    0000023a: 	leaq	DATAat0x1090b(%rip), %rsi
    00000241: 	movq	%rax, %rbp
    00000244: 	movq	%rax, %rdi
    00000247: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 583
    0000024c: 	movq	(%rbp), %rax
    00000250: 	movq	-0x18(%rax), %rax
    00000254: 	movq	0xf0(%rbp,%rax), %r12
    0000025c: 	testq	%r12, %r12
    0000025f: 	je	.Ltmp286 # Offset: 607
    00000265: 	cmpb	$0x0, 0x38(%r12)
    0000026b: 	je	.Ltmp287 # Offset: 619
    0000026d: 	movsbl	0x43(%r12), %esi
    00000273: 	movq	%rbp, %rdi
    00000276: 	callq	_ZNSo3putEc@PLT # Offset: 630
    0000027b: 	movq	%rax, %rdi
    0000027e: 	callq	_ZNSo5flushEv@PLT # Offset: 638
.Ltmp283:
    00000283: 	callq	clock@PLT # Offset: 643
    00000288: 	movq	%rax, end_time(%rip)
    0000028f: 	movq	0x418(%rsp), %rdx
    00000297: 	subq	%fs:0x28, %rdx
    000002a0: 	jne	.Ltmp288 # Offset: 672
    000002a6: 	subq	start_time(%rip), %rax
    000002ad: 	pxor	%xmm0, %xmm0
    000002b1: 	movq	0x8(%rsp), %rdi
    000002b6: 	cvtsi2sd	%rax, %xmm0
    000002bb: 	divsd	DATAat0x10920(%rip), %xmm0
    000002c3: 	addq	$0x428, %rsp
    000002ca: 	popq	%rbx
    000002cb: 	popq	%rbp
    000002cc: 	popq	%r12
    000002ce: 	popq	%r13
    000002d0: 	popq	%r14
    000002d2: 	popq	%r15
    000002d4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 724
.Ltmp277:
    000002d9: 	xorl	%edx, %edx
    000002db: 	jmp	.Ltmp289 # Offset: 731
.Ltmp287:
    000002e0: 	movq	%r12, %rdi
    000002e3: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 739
    000002e8: 	movq	(%r12), %rax
    000002ec: 	movl	$0xa, %esi
    000002f1: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    000002f8: 	movq	0x30(%rax), %rax
    000002fc: 	cmpq	%rdx, %rax
    000002ff: 	jne	.Ltmp290 # Offset: 767
.Ltmp292:
    00000301: 	movq	%rbp, %rdi
    00000304: 	callq	_ZNSo3putEc@PLT # Offset: 772
    00000309: 	movq	%rax, %rdi
    0000030c: 	callq	_ZNSo5flushEv@PLT # Offset: 780
    00000311: 	jmp	.Ltmp283 # Offset: 785
.Ltmp285:
    00000316: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000031d: 	movq	-0x18(%rax), %rdi
    00000321: 	addq	%r13, %rdi
    00000324: 	movl	0x20(%rdi), %esi
    00000327: 	orl	$0x1, %esi
    0000032a: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 810
    0000032f: 	jmp	.Ltmp291 # Offset: 815
.Ltmp290:
    00000334: 	movq	%r12, %rdi
    00000337: 	callq	*%rax # Offset: 823
    00000339: 	movsbl	%al, %esi
    0000033c: 	jmp	.Ltmp292 # Offset: 828
.Ltmp288:
    0000033e: 	callq	__stack_chk_fail@PLT # Offset: 830
.Ltmp286:
    00000343: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 835
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_histogram4IhjEvPKT_iPT0_PKc"

Binary Function "_Z15test_histogram4IhmEvPKT_iPT0_PKc" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x5bc0
  Size        : 0x34b
  MaxSize     : 0x350
  Offset      : 0x5bc0
  Section     : .text
  Orc Section : .local.text._Z15test_histogram4IhmEvPKT_iPT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%esi, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdx, %rbx
    00000016: 	subq	$0x828, %rsp
    0000001d: 	movq	%rcx, 0x8(%rsp)
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0x818(%rsp)
    00000033: 	xorl	%eax, %eax
    00000035: 	callq	clock@PLT # Offset: 53
    0000003a: 	movq	%rax, start_time(%rip)
    00000041: 	movl	iterations(%rip), %eax
    00000047: 	testl	%eax, %eax
    00000049: 	jle	.Ltmp293 # Offset: 73
    0000004f: 	leal	-0x4(%rbp), %eax
    00000052: 	xorl	%r9d, %r9d
    00000055: 	leaq	0x808(%rbx), %r11
    0000005c: 	shrl	$0x2, %eax
    0000005f: 	leaq	0x8(%rbx), %r10
    00000063: 	leaq	0x10(%rsp), %rsi
    00000068: 	movl	%eax, %edx
    0000006a: 	leal	0x4(,%rax,4), %r13d
    00000072: 	xorl	%eax, %eax
    00000074: 	leaq	0x4(%r12,%rdx,4), %r8
.Ltmp298:
    00000079: 	movq	%r10, %rdi
    0000007c: 	movq	%rbx, %rcx
    0000007f: 	movq	%rax, (%rbx)
    00000082: 	andq	$-0x8, %rdi
    00000086: 	movq	%rax, -0x10(%r11)
    0000008a: 	subq	%rdi, %rcx
    0000008d: 	addl	$0x800, %ecx
    00000093: 	shrl	$0x3, %ecx
    00000096: 	rep		stosq	%rax, %es:(%rdi)
    00000099: 	movl	$0x100, %ecx
    0000009e: 	movq	%rsi, %rdi
    000000a1: 	rep		stosq	%rax, %es:(%rdi)
    000000a4: 	cmpl	$0x3, %ebp
    000000a7: 	jle	.Ltmp294 # Offset: 167
    000000ad: 	movq	%r12, %rdx
.Ltmp295:
    000000b0: 	movzbl	0x1(%rdx), %r14d
    000000b5: 	movzbl	0x3(%rdx), %ecx
    000000b9: 	addq	$0x4, %rdx
    000000bd: 	movzbl	-0x2(%rdx), %edi
    000000c1: 	movzbl	-0x4(%rdx), %r15d
    000000c6: 	addq	$0x1, 0x10(%rsp,%r14,8)
    000000cc: 	addq	$0x1, (%rbx,%r15,8)
    000000d1: 	addq	$0x1, 0x10(%rsp,%rcx,8)
    000000d7: 	addq	$0x1, (%rbx,%rdi,8)
    000000dc: 	cmpq	%rdx, %r8
    000000df: 	jne	.Ltmp295 # Offset: 223
    000000e1: 	movl	%r13d, %edx
.Ltmp306:
    000000e4: 	cmpl	%edx, %ebp
    000000e6: 	jle	.Ltmp296 # Offset: 230
    000000e8: 	movslq	%edx, %rcx
    000000eb: 	movzbl	(%r12,%rcx), %ecx
    000000f0: 	addq	$0x1, (%rbx,%rcx,8)
    000000f5: 	leal	0x1(%rdx), %ecx
    000000f8: 	cmpl	%ecx, %ebp
    000000fa: 	jle	.Ltmp296 # Offset: 250
    000000fc: 	movslq	%ecx, %rcx
    000000ff: 	movzbl	(%r12,%rcx), %ecx
    00000104: 	addq	$0x1, (%rbx,%rcx,8)
    00000109: 	leal	0x2(%rdx), %ecx
    0000010c: 	cmpl	%ecx, %ebp
    0000010e: 	jle	.Ltmp296 # Offset: 270
    00000110: 	movslq	%ecx, %rcx
    00000113: 	addl	$0x3, %edx
    00000116: 	movzbl	(%r12,%rcx), %ecx
    0000011b: 	addq	$0x1, (%rbx,%rcx,8)
    00000120: 	cmpl	%edx, %ebp
    00000122: 	jle	.Ltmp296 # Offset: 290
    00000124: 	movslq	%edx, %rdx
    00000127: 	movzbl	(%r12,%rdx), %edx
    0000012c: 	addq	$0x1, (%rbx,%rdx,8)
.Ltmp296:
    00000131: 	xorl	%edx, %edx
    00000133: 	nopl	(%rax,%rax) # Size: 5
.Ltmp297:
    00000138: 	movdqu	(%rbx,%rdx), %xmm0
    0000013d: 	paddq	(%rsi,%rdx), %xmm0
    00000142: 	movups	%xmm0, (%rbx,%rdx)
    00000146: 	addq	$0x10, %rdx
    0000014a: 	cmpq	$0x800, %rdx
    00000151: 	jne	.Ltmp297 # Offset: 337
    00000153: 	addl	$0x1, %r9d
    00000157: 	cmpl	%r9d, iterations(%rip)
    0000015e: 	jg	.Ltmp298 # Offset: 350
.Ltmp293:
    00000164: 	leaq	referenceHistogram(%rip), %rbp
    0000016b: 	xorl	%r12d, %r12d
    0000016e: 	jmp	.Ltmp299 # Offset: 366
.Ltmp301:
    00000170: 	addq	$0x1, %r12
    00000174: 	addq	$0x8, %rbx
    00000178: 	addq	$0x8, %rbp
    0000017c: 	cmpq	$0x100, %r12
    00000183: 	je	.Ltmp300 # Offset: 387
.Ltmp299:
    00000189: 	movq	(%rbp), %rax
    0000018d: 	cmpq	%rax, (%rbx)
    00000190: 	je	.Ltmp301 # Offset: 400
    00000192: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    00000199: 	movl	$0x5, %edx
    0000019e: 	leaq	DATAat0x108e4(%rip), %rsi
    000001a5: 	movq	%r13, %rdi
    000001a8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 424
    000001ad: 	cmpq	$0x0, 0x8(%rsp)
    000001b3: 	je	.Ltmp302 # Offset: 435
    000001b9: 	movq	0x8(%rsp), %r15
    000001be: 	movq	%r15, %rdi
    000001c1: 	callq	strlen@PLT # Offset: 449
    000001c6: 	movq	%r15, %rsi
    000001c9: 	movq	%r13, %rdi
    000001cc: 	movq	%rax, %rdx
    000001cf: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 463
.Ltmp308:
    000001d4: 	movl	$0xf, %edx
    000001d9: 	leaq	DATAat0x108ea(%rip), %rsi
    000001e0: 	movq	%r13, %rdi
    000001e3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 483
    000001e8: 	movq	%r12, %rsi
    000001eb: 	movq	%r13, %rdi
    000001ee: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 494
    000001f3: 	movl	$0xb, %edx
    000001f8: 	leaq	DATAat0x108fa(%rip), %rsi
    000001ff: 	movq	%rax, %rdi
    00000202: 	movq	%rax, %r12
    00000205: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 517
    0000020a: 	movq	(%rbp), %rsi
    0000020e: 	movq	%r12, %rdi
    00000211: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 529
    00000216: 	movl	$0x4, %edx
    0000021b: 	leaq	DATAat0x10906(%rip), %rsi
    00000222: 	movq	%rax, %rdi
    00000225: 	movq	%rax, %rbp
    00000228: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 552
    0000022d: 	movq	(%rbx), %rsi
    00000230: 	movq	%rbp, %rdi
    00000233: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 563
    00000238: 	movl	$0x2, %edx
    0000023d: 	leaq	DATAat0x1090b(%rip), %rsi
    00000244: 	movq	%rax, %rbp
    00000247: 	movq	%rax, %rdi
    0000024a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 586
    0000024f: 	movq	(%rbp), %rax
    00000253: 	movq	-0x18(%rax), %rax
    00000257: 	movq	0xf0(%rbp,%rax), %r12
    0000025f: 	testq	%r12, %r12
    00000262: 	je	.Ltmp303 # Offset: 610
    00000268: 	cmpb	$0x0, 0x38(%r12)
    0000026e: 	je	.Ltmp304 # Offset: 622
    00000270: 	movsbl	0x43(%r12), %esi
    00000276: 	movq	%rbp, %rdi
    00000279: 	callq	_ZNSo3putEc@PLT # Offset: 633
    0000027e: 	movq	%rax, %rdi
    00000281: 	callq	_ZNSo5flushEv@PLT # Offset: 641
.Ltmp300:
    00000286: 	callq	clock@PLT # Offset: 646
    0000028b: 	movq	%rax, end_time(%rip)
    00000292: 	movq	0x818(%rsp), %rdx
    0000029a: 	subq	%fs:0x28, %rdx
    000002a3: 	jne	.Ltmp305 # Offset: 675
    000002a9: 	subq	start_time(%rip), %rax
    000002b0: 	pxor	%xmm0, %xmm0
    000002b4: 	movq	0x8(%rsp), %rdi
    000002b9: 	cvtsi2sd	%rax, %xmm0
    000002be: 	divsd	DATAat0x10920(%rip), %xmm0
    000002c6: 	addq	$0x828, %rsp
    000002cd: 	popq	%rbx
    000002ce: 	popq	%rbp
    000002cf: 	popq	%r12
    000002d1: 	popq	%r13
    000002d3: 	popq	%r14
    000002d5: 	popq	%r15
    000002d7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 727
.Ltmp294:
    000002dc: 	xorl	%edx, %edx
    000002de: 	jmp	.Ltmp306 # Offset: 734
.Ltmp304:
    000002e3: 	movq	%r12, %rdi
    000002e6: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 742
    000002eb: 	movq	(%r12), %rax
    000002ef: 	movl	$0xa, %esi
    000002f4: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    000002fb: 	movq	0x30(%rax), %rax
    000002ff: 	cmpq	%rdx, %rax
    00000302: 	jne	.Ltmp307 # Offset: 770
.Ltmp309:
    00000304: 	movq	%rbp, %rdi
    00000307: 	callq	_ZNSo3putEc@PLT # Offset: 775
    0000030c: 	movq	%rax, %rdi
    0000030f: 	callq	_ZNSo5flushEv@PLT # Offset: 783
    00000314: 	jmp	.Ltmp300 # Offset: 788
.Ltmp302:
    00000319: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000320: 	movq	-0x18(%rax), %rdi
    00000324: 	addq	%r13, %rdi
    00000327: 	movl	0x20(%rdi), %esi
    0000032a: 	orl	$0x1, %esi
    0000032d: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 813
    00000332: 	jmp	.Ltmp308 # Offset: 818
.Ltmp307:
    00000337: 	movq	%r12, %rdi
    0000033a: 	callq	*%rax # Offset: 826
    0000033c: 	movsbl	%al, %esi
    0000033f: 	jmp	.Ltmp309 # Offset: 831
.Ltmp305:
    00000341: 	callq	__stack_chk_fail@PLT # Offset: 833
.Ltmp303:
    00000346: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 838
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_histogram4IhmEvPKT_iPT0_PKc"

Binary Function "_Z15test_histogram5IhtEvPKT_iPT0_PKc" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x5f10
  Size        : 0x39b
  MaxSize     : 0x3a0
  Offset      : 0x5f10
  Section     : .text
  Orc Section : .local.text._Z15test_histogram5IhtEvPKT_iPT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%esi, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdx, %rbx
    00000016: 	subq	$0x638, %rsp
    0000001d: 	movq	%rcx, 0x18(%rsp)
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0x628(%rsp)
    00000033: 	xorl	%eax, %eax
    00000035: 	callq	clock@PLT # Offset: 53
    0000003a: 	movq	%rax, start_time(%rip)
    00000041: 	movl	iterations(%rip), %eax
    00000047: 	testl	%eax, %eax
    00000049: 	jle	.Ltmp310 # Offset: 73
    0000004f: 	leal	-0x4(%rbp), %eax
    00000052: 	xorl	%r13d, %r13d
    00000055: 	leaq	0x208(%rbx), %r14
    0000005c: 	shrl	$0x2, %eax
    0000005f: 	leaq	0x20(%rsp), %r10
    00000064: 	leaq	0x220(%rsp), %r9
    0000006c: 	movl	%eax, %edx
    0000006e: 	leal	0x4(,%rax,4), %eax
    00000075: 	leaq	0x420(%rsp), %r8
    0000007d: 	movl	%eax, 0x14(%rsp)
    00000081: 	leaq	0x8(%rbx), %rax
    00000085: 	leaq	0x4(%r12,%rdx,4), %r11
    0000008a: 	movq	%rax, 0x8(%rsp)
    0000008f: 	xorl	%eax, %eax
.Ltmp315:
    00000091: 	movq	%rax, (%rbx)
    00000094: 	movq	%rbx, %rcx
    00000097: 	movq	%rax, -0x10(%r14)
    0000009b: 	movq	0x8(%rsp), %rdi
    000000a0: 	andq	$-0x8, %rdi
    000000a4: 	subq	%rdi, %rcx
    000000a7: 	addl	$0x200, %ecx
    000000ad: 	shrl	$0x3, %ecx
    000000b0: 	rep		stosq	%rax, %es:(%rdi)
    000000b3: 	movl	$0x40, %ecx
    000000b8: 	movq	%r10, %rdi
    000000bb: 	rep		stosq	%rax, %es:(%rdi)
    000000be: 	movl	$0x40, %ecx
    000000c3: 	movq	%r9, %rdi
    000000c6: 	rep		stosq	%rax, %es:(%rdi)
    000000c9: 	movl	$0x40, %ecx
    000000ce: 	movq	%r8, %rdi
    000000d1: 	rep		stosq	%rax, %es:(%rdi)
    000000d4: 	cmpl	$0x3, %ebp
    000000d7: 	jle	.Ltmp311 # Offset: 215
    000000dd: 	movq	%r12, %rdx
.Ltmp312:
    000000e0: 	movzbl	0x1(%rdx), %edi
    000000e4: 	movzbl	0x2(%rdx), %esi
    000000e8: 	addq	$0x4, %rdx
    000000ec: 	movzbl	-0x1(%rdx), %ecx
    000000f0: 	movzbl	-0x4(%rdx), %r15d
    000000f5: 	addw	$0x1, 0x20(%rsp,%rdi,2)
    000000fb: 	addw	$0x1, (%rbx,%r15,2)
    00000101: 	addw	$0x1, 0x220(%rsp,%rsi,2)
    0000010a: 	addw	$0x1, 0x420(%rsp,%rcx,2)
    00000113: 	cmpq	%rdx, %r11
    00000116: 	jne	.Ltmp312 # Offset: 278
    00000118: 	movl	0x14(%rsp), %edx
.Ltmp323:
    0000011c: 	cmpl	%edx, %ebp
    0000011e: 	jle	.Ltmp313 # Offset: 286
    00000120: 	movslq	%edx, %rcx
    00000123: 	movzbl	(%r12,%rcx), %ecx
    00000128: 	addw	$0x1, (%rbx,%rcx,2)
    0000012d: 	leal	0x1(%rdx), %ecx
    00000130: 	cmpl	%ebp, %ecx
    00000132: 	jge	.Ltmp313 # Offset: 306
    00000134: 	movslq	%ecx, %rcx
    00000137: 	movzbl	(%r12,%rcx), %ecx
    0000013c: 	addw	$0x1, (%rbx,%rcx,2)
    00000141: 	leal	0x2(%rdx), %ecx
    00000144: 	cmpl	%ecx, %ebp
    00000146: 	jle	.Ltmp313 # Offset: 326
    00000148: 	movslq	%ecx, %rcx
    0000014b: 	addl	$0x3, %edx
    0000014e: 	movzbl	(%r12,%rcx), %ecx
    00000153: 	addw	$0x1, (%rbx,%rcx,2)
    00000158: 	cmpl	%edx, %ebp
    0000015a: 	jle	.Ltmp313 # Offset: 346
    0000015c: 	movslq	%edx, %rdx
    0000015f: 	movzbl	(%r12,%rdx), %edx
    00000164: 	addw	$0x1, (%rbx,%rdx,2)
.Ltmp313:
    00000169: 	xorl	%edx, %edx
    0000016b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp314:
    00000170: 	movdqu	(%rbx,%rdx), %xmm1
    00000175: 	movdqa	(%r8,%rdx), %xmm0
    0000017b: 	paddw	(%r10,%rdx), %xmm1
    00000181: 	paddw	(%r9,%rdx), %xmm0
    00000187: 	paddw	%xmm1, %xmm0
    0000018b: 	movups	%xmm0, (%rbx,%rdx)
    0000018f: 	addq	$0x10, %rdx
    00000193: 	cmpq	$0x200, %rdx
    0000019a: 	jne	.Ltmp314 # Offset: 410
    0000019c: 	addl	$0x1, %r13d
    000001a0: 	cmpl	%r13d, iterations(%rip)
    000001a7: 	jg	.Ltmp315 # Offset: 423
.Ltmp310:
    000001ad: 	leaq	referenceHistogram(%rip), %rbp
    000001b4: 	xorl	%r12d, %r12d
    000001b7: 	jmp	.Ltmp316 # Offset: 439
    000001b9: 	nopl	(%rax) # Size: 7
.Ltmp318:
    000001c0: 	addq	$0x1, %r12
    000001c4: 	addq	$0x2, %rbx
    000001c8: 	addq	$0x8, %rbp
    000001cc: 	cmpq	$0x100, %r12
    000001d3: 	je	.Ltmp317 # Offset: 467
.Ltmp316:
    000001d9: 	movzwl	(%rbp), %eax
    000001dd: 	cmpw	%ax, (%rbx)
    000001e0: 	je	.Ltmp318 # Offset: 480
    000001e2: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    000001e9: 	movl	$0x5, %edx
    000001ee: 	leaq	DATAat0x108e4(%rip), %rsi
    000001f5: 	movq	%r13, %rdi
    000001f8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 504
    000001fd: 	cmpq	$0x0, 0x18(%rsp)
    00000203: 	je	.Ltmp319 # Offset: 515
    00000209: 	movq	0x18(%rsp), %r14
    0000020e: 	movq	%r14, %rdi
    00000211: 	callq	strlen@PLT # Offset: 529
    00000216: 	movq	%r14, %rsi
    00000219: 	movq	%r13, %rdi
    0000021c: 	movq	%rax, %rdx
    0000021f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 543
.Ltmp325:
    00000224: 	movl	$0xf, %edx
    00000229: 	leaq	DATAat0x108ea(%rip), %rsi
    00000230: 	movq	%r13, %rdi
    00000233: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 563
    00000238: 	movq	%r12, %rsi
    0000023b: 	movq	%r13, %rdi
    0000023e: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 574
    00000243: 	movl	$0xb, %edx
    00000248: 	leaq	DATAat0x108fa(%rip), %rsi
    0000024f: 	movq	%rax, %rdi
    00000252: 	movq	%rax, %r12
    00000255: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 597
    0000025a: 	movq	(%rbp), %rsi
    0000025e: 	movq	%r12, %rdi
    00000261: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 609
    00000266: 	movl	$0x4, %edx
    0000026b: 	leaq	DATAat0x10906(%rip), %rsi
    00000272: 	movq	%rax, %rdi
    00000275: 	movq	%rax, %rbp
    00000278: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 632
    0000027d: 	movzwl	(%rbx), %esi
    00000280: 	movq	%rbp, %rdi
    00000283: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 643
    00000288: 	movl	$0x2, %edx
    0000028d: 	leaq	DATAat0x1090b(%rip), %rsi
    00000294: 	movq	%rax, %rbp
    00000297: 	movq	%rax, %rdi
    0000029a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 666
    0000029f: 	movq	(%rbp), %rax
    000002a3: 	movq	-0x18(%rax), %rax
    000002a7: 	movq	0xf0(%rbp,%rax), %r12
    000002af: 	testq	%r12, %r12
    000002b2: 	je	.Ltmp320 # Offset: 690
    000002b8: 	cmpb	$0x0, 0x38(%r12)
    000002be: 	je	.Ltmp321 # Offset: 702
    000002c0: 	movsbl	0x43(%r12), %esi
    000002c6: 	movq	%rbp, %rdi
    000002c9: 	callq	_ZNSo3putEc@PLT # Offset: 713
    000002ce: 	movq	%rax, %rdi
    000002d1: 	callq	_ZNSo5flushEv@PLT # Offset: 721
.Ltmp317:
    000002d6: 	callq	clock@PLT # Offset: 726
    000002db: 	movq	%rax, end_time(%rip)
    000002e2: 	movq	0x628(%rsp), %rdx
    000002ea: 	subq	%fs:0x28, %rdx
    000002f3: 	jne	.Ltmp322 # Offset: 755
    000002f9: 	subq	start_time(%rip), %rax
    00000300: 	pxor	%xmm0, %xmm0
    00000304: 	movq	0x18(%rsp), %rdi
    00000309: 	cvtsi2sd	%rax, %xmm0
    0000030e: 	divsd	DATAat0x10920(%rip), %xmm0
    00000316: 	addq	$0x638, %rsp
    0000031d: 	popq	%rbx
    0000031e: 	popq	%rbp
    0000031f: 	popq	%r12
    00000321: 	popq	%r13
    00000323: 	popq	%r14
    00000325: 	popq	%r15
    00000327: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 807
.Ltmp311:
    0000032c: 	xorl	%edx, %edx
    0000032e: 	jmp	.Ltmp323 # Offset: 814
.Ltmp321:
    00000333: 	movq	%r12, %rdi
    00000336: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 822
    0000033b: 	movq	(%r12), %rax
    0000033f: 	movl	$0xa, %esi
    00000344: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    0000034b: 	movq	0x30(%rax), %rax
    0000034f: 	cmpq	%rdx, %rax
    00000352: 	jne	.Ltmp324 # Offset: 850
.Ltmp326:
    00000354: 	movq	%rbp, %rdi
    00000357: 	callq	_ZNSo3putEc@PLT # Offset: 855
    0000035c: 	movq	%rax, %rdi
    0000035f: 	callq	_ZNSo5flushEv@PLT # Offset: 863
    00000364: 	jmp	.Ltmp317 # Offset: 868
.Ltmp319:
    00000369: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000370: 	movq	-0x18(%rax), %rdi
    00000374: 	addq	%r13, %rdi
    00000377: 	movl	0x20(%rdi), %esi
    0000037a: 	orl	$0x1, %esi
    0000037d: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 893
    00000382: 	jmp	.Ltmp325 # Offset: 898
.Ltmp324:
    00000387: 	movq	%r12, %rdi
    0000038a: 	callq	*%rax # Offset: 906
    0000038c: 	movsbl	%al, %esi
    0000038f: 	jmp	.Ltmp326 # Offset: 911
.Ltmp322:
    00000391: 	callq	__stack_chk_fail@PLT # Offset: 913
.Ltmp320:
    00000396: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 918
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_histogram5IhtEvPKT_iPT0_PKc"

Binary Function "_Z15test_histogram5IhjEvPKT_iPT0_PKc" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x62b0
  Size        : 0x390
  MaxSize     : 0x390
  Offset      : 0x62b0
  Section     : .text
  Orc Section : .local.text._Z15test_histogram5IhjEvPKT_iPT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%esi, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdx, %rbx
    00000016: 	subq	$0xc38, %rsp
    0000001d: 	movq	%rcx, 0x18(%rsp)
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0xc28(%rsp)
    00000033: 	xorl	%eax, %eax
    00000035: 	callq	clock@PLT # Offset: 53
    0000003a: 	movq	%rax, start_time(%rip)
    00000041: 	movl	iterations(%rip), %eax
    00000047: 	testl	%eax, %eax
    00000049: 	jle	.Ltmp327 # Offset: 73
    0000004f: 	leal	-0x4(%rbp), %eax
    00000052: 	xorl	%r13d, %r13d
    00000055: 	leaq	0x408(%rbx), %r14
    0000005c: 	shrl	$0x2, %eax
    0000005f: 	leaq	0x20(%rsp), %r10
    00000064: 	leaq	0x420(%rsp), %r9
    0000006c: 	movl	%eax, %edx
    0000006e: 	leal	0x4(,%rax,4), %eax
    00000075: 	leaq	0x820(%rsp), %r8
    0000007d: 	movl	%eax, 0x14(%rsp)
    00000081: 	leaq	0x8(%rbx), %rax
    00000085: 	leaq	0x4(%r12,%rdx,4), %r11
    0000008a: 	movq	%rax, 0x8(%rsp)
    0000008f: 	xorl	%eax, %eax
.Ltmp332:
    00000091: 	movq	%rax, (%rbx)
    00000094: 	movq	%rbx, %rcx
    00000097: 	movq	%rax, -0x10(%r14)
    0000009b: 	movq	0x8(%rsp), %rdi
    000000a0: 	andq	$-0x8, %rdi
    000000a4: 	subq	%rdi, %rcx
    000000a7: 	addl	$0x400, %ecx
    000000ad: 	shrl	$0x3, %ecx
    000000b0: 	rep		stosq	%rax, %es:(%rdi)
    000000b3: 	movl	$0x80, %ecx
    000000b8: 	movq	%r10, %rdi
    000000bb: 	rep		stosq	%rax, %es:(%rdi)
    000000be: 	movl	$0x80, %ecx
    000000c3: 	movq	%r9, %rdi
    000000c6: 	rep		stosq	%rax, %es:(%rdi)
    000000c9: 	movl	$0x80, %ecx
    000000ce: 	movq	%r8, %rdi
    000000d1: 	rep		stosq	%rax, %es:(%rdi)
    000000d4: 	cmpl	$0x3, %ebp
    000000d7: 	jle	.Ltmp328 # Offset: 215
    000000dd: 	movq	%r12, %rdx
.Ltmp329:
    000000e0: 	movzbl	0x1(%rdx), %edi
    000000e4: 	movzbl	0x2(%rdx), %esi
    000000e8: 	addq	$0x4, %rdx
    000000ec: 	movzbl	-0x1(%rdx), %ecx
    000000f0: 	movzbl	-0x4(%rdx), %r15d
    000000f5: 	addl	$0x1, 0x20(%rsp,%rdi,4)
    000000fa: 	addl	$0x1, (%rbx,%r15,4)
    000000ff: 	addl	$0x1, 0x420(%rsp,%rsi,4)
    00000107: 	addl	$0x1, 0x820(%rsp,%rcx,4)
    0000010f: 	cmpq	%rdx, %r11
    00000112: 	jne	.Ltmp329 # Offset: 274
    00000114: 	movl	0x14(%rsp), %edx
.Ltmp340:
    00000118: 	cmpl	%edx, %ebp
    0000011a: 	jle	.Ltmp330 # Offset: 282
    0000011c: 	movslq	%edx, %rcx
    0000011f: 	movzbl	(%r12,%rcx), %ecx
    00000124: 	addl	$0x1, (%rbx,%rcx,4)
    00000128: 	leal	0x1(%rdx), %ecx
    0000012b: 	cmpl	%ebp, %ecx
    0000012d: 	jge	.Ltmp330 # Offset: 301
    0000012f: 	movslq	%ecx, %rcx
    00000132: 	movzbl	(%r12,%rcx), %ecx
    00000137: 	addl	$0x1, (%rbx,%rcx,4)
    0000013b: 	leal	0x2(%rdx), %ecx
    0000013e: 	cmpl	%ecx, %ebp
    00000140: 	jle	.Ltmp330 # Offset: 320
    00000142: 	movslq	%ecx, %rcx
    00000145: 	addl	$0x3, %edx
    00000148: 	movzbl	(%r12,%rcx), %ecx
    0000014d: 	addl	$0x1, (%rbx,%rcx,4)
    00000151: 	cmpl	%edx, %ebp
    00000153: 	jle	.Ltmp330 # Offset: 339
    00000155: 	movslq	%edx, %rdx
    00000158: 	movzbl	(%r12,%rdx), %edx
    0000015d: 	addl	$0x1, (%rbx,%rdx,4)
.Ltmp330:
    00000161: 	xorl	%edx, %edx
    00000163: 	nopl	(%rax,%rax) # Size: 5
.Ltmp331:
    00000168: 	movdqu	(%rbx,%rdx), %xmm1
    0000016d: 	movdqa	(%r8,%rdx), %xmm0
    00000173: 	paddd	(%r10,%rdx), %xmm1
    00000179: 	paddd	(%r9,%rdx), %xmm0
    0000017f: 	paddd	%xmm1, %xmm0
    00000183: 	movups	%xmm0, (%rbx,%rdx)
    00000187: 	addq	$0x10, %rdx
    0000018b: 	cmpq	$0x400, %rdx
    00000192: 	jne	.Ltmp331 # Offset: 402
    00000194: 	addl	$0x1, %r13d
    00000198: 	cmpl	%r13d, iterations(%rip)
    0000019f: 	jg	.Ltmp332 # Offset: 415
.Ltmp327:
    000001a5: 	leaq	referenceHistogram(%rip), %rbp
    000001ac: 	xorl	%r12d, %r12d
    000001af: 	jmp	.Ltmp333 # Offset: 431
    000001b1: 	nopl	(%rax) # Size: 7
.Ltmp335:
    000001b8: 	addq	$0x1, %r12
    000001bc: 	addq	$0x4, %rbx
    000001c0: 	addq	$0x8, %rbp
    000001c4: 	cmpq	$0x100, %r12
    000001cb: 	je	.Ltmp334 # Offset: 459
.Ltmp333:
    000001d1: 	movl	(%rbp), %eax
    000001d4: 	cmpl	%eax, (%rbx)
    000001d6: 	je	.Ltmp335 # Offset: 470
    000001d8: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    000001df: 	movl	$0x5, %edx
    000001e4: 	leaq	DATAat0x108e4(%rip), %rsi
    000001eb: 	movq	%r13, %rdi
    000001ee: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 494
    000001f3: 	cmpq	$0x0, 0x18(%rsp)
    000001f9: 	je	.Ltmp336 # Offset: 505
    000001ff: 	movq	0x18(%rsp), %r14
    00000204: 	movq	%r14, %rdi
    00000207: 	callq	strlen@PLT # Offset: 519
    0000020c: 	movq	%r14, %rsi
    0000020f: 	movq	%r13, %rdi
    00000212: 	movq	%rax, %rdx
    00000215: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 533
.Ltmp342:
    0000021a: 	movl	$0xf, %edx
    0000021f: 	leaq	DATAat0x108ea(%rip), %rsi
    00000226: 	movq	%r13, %rdi
    00000229: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 553
    0000022e: 	movq	%r12, %rsi
    00000231: 	movq	%r13, %rdi
    00000234: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 564
    00000239: 	movl	$0xb, %edx
    0000023e: 	leaq	DATAat0x108fa(%rip), %rsi
    00000245: 	movq	%rax, %rdi
    00000248: 	movq	%rax, %r12
    0000024b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 587
    00000250: 	movq	(%rbp), %rsi
    00000254: 	movq	%r12, %rdi
    00000257: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 599
    0000025c: 	movl	$0x4, %edx
    00000261: 	leaq	DATAat0x10906(%rip), %rsi
    00000268: 	movq	%rax, %rdi
    0000026b: 	movq	%rax, %rbp
    0000026e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 622
    00000273: 	movl	(%rbx), %esi
    00000275: 	movq	%rbp, %rdi
    00000278: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 632
    0000027d: 	movl	$0x2, %edx
    00000282: 	leaq	DATAat0x1090b(%rip), %rsi
    00000289: 	movq	%rax, %rbp
    0000028c: 	movq	%rax, %rdi
    0000028f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 655
    00000294: 	movq	(%rbp), %rax
    00000298: 	movq	-0x18(%rax), %rax
    0000029c: 	movq	0xf0(%rbp,%rax), %r12
    000002a4: 	testq	%r12, %r12
    000002a7: 	je	.Ltmp337 # Offset: 679
    000002ad: 	cmpb	$0x0, 0x38(%r12)
    000002b3: 	je	.Ltmp338 # Offset: 691
    000002b5: 	movsbl	0x43(%r12), %esi
    000002bb: 	movq	%rbp, %rdi
    000002be: 	callq	_ZNSo3putEc@PLT # Offset: 702
    000002c3: 	movq	%rax, %rdi
    000002c6: 	callq	_ZNSo5flushEv@PLT # Offset: 710
.Ltmp334:
    000002cb: 	callq	clock@PLT # Offset: 715
    000002d0: 	movq	%rax, end_time(%rip)
    000002d7: 	movq	0xc28(%rsp), %rdx
    000002df: 	subq	%fs:0x28, %rdx
    000002e8: 	jne	.Ltmp339 # Offset: 744
    000002ee: 	subq	start_time(%rip), %rax
    000002f5: 	pxor	%xmm0, %xmm0
    000002f9: 	movq	0x18(%rsp), %rdi
    000002fe: 	cvtsi2sd	%rax, %xmm0
    00000303: 	divsd	DATAat0x10920(%rip), %xmm0
    0000030b: 	addq	$0xc38, %rsp
    00000312: 	popq	%rbx
    00000313: 	popq	%rbp
    00000314: 	popq	%r12
    00000316: 	popq	%r13
    00000318: 	popq	%r14
    0000031a: 	popq	%r15
    0000031c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 796
.Ltmp328:
    00000321: 	xorl	%edx, %edx
    00000323: 	jmp	.Ltmp340 # Offset: 803
.Ltmp338:
    00000328: 	movq	%r12, %rdi
    0000032b: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 811
    00000330: 	movq	(%r12), %rax
    00000334: 	movl	$0xa, %esi
    00000339: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    00000340: 	movq	0x30(%rax), %rax
    00000344: 	cmpq	%rdx, %rax
    00000347: 	jne	.Ltmp341 # Offset: 839
.Ltmp343:
    00000349: 	movq	%rbp, %rdi
    0000034c: 	callq	_ZNSo3putEc@PLT # Offset: 844
    00000351: 	movq	%rax, %rdi
    00000354: 	callq	_ZNSo5flushEv@PLT # Offset: 852
    00000359: 	jmp	.Ltmp334 # Offset: 857
.Ltmp336:
    0000035e: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000365: 	movq	-0x18(%rax), %rdi
    00000369: 	addq	%r13, %rdi
    0000036c: 	movl	0x20(%rdi), %esi
    0000036f: 	orl	$0x1, %esi
    00000372: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 882
    00000377: 	jmp	.Ltmp342 # Offset: 887
.Ltmp341:
    0000037c: 	movq	%r12, %rdi
    0000037f: 	callq	*%rax # Offset: 895
    00000381: 	movsbl	%al, %esi
    00000384: 	jmp	.Ltmp343 # Offset: 900
.Ltmp339:
    00000386: 	callq	__stack_chk_fail@PLT # Offset: 902
.Ltmp337:
    0000038b: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 907
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_histogram5IhjEvPKT_iPT0_PKc"

Binary Function "_Z15test_histogram5IhmEvPKT_iPT0_PKc" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x6640
  Size        : 0x3ab
  MaxSize     : 0x3b0
  Offset      : 0x6640
  Section     : .text
  Orc Section : .local.text._Z15test_histogram5IhmEvPKT_iPT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x1000, %rsp
    00000015: 	orq	$0x0, (%rsp)
    0000001a: 	subq	$0x838, %rsp
    00000021: 	movq	%rcx, 0x18(%rsp)
    00000026: 	movq	%rdi, %r12
    00000029: 	movl	%esi, %ebp
    0000002b: 	movq	%rdx, %rbx
    0000002e: 	movq	%fs:0x28, %rax
    00000037: 	movq	%rax, 0x1828(%rsp)
    0000003f: 	xorl	%eax, %eax
    00000041: 	callq	clock@PLT # Offset: 65
    00000046: 	movq	%rax, start_time(%rip)
    0000004d: 	movl	iterations(%rip), %eax
    00000053: 	testl	%eax, %eax
    00000055: 	jle	.Ltmp344 # Offset: 85
    0000005b: 	leal	-0x4(%rbp), %eax
    0000005e: 	xorl	%r11d, %r11d
    00000061: 	leaq	0x808(%rbx), %r13
    00000068: 	shrl	$0x2, %eax
    0000006b: 	leaq	0x20(%rsp), %r9
    00000070: 	leaq	0x820(%rsp), %r8
    00000078: 	movl	%eax, %edx
    0000007a: 	leal	0x4(,%rax,4), %eax
    00000081: 	leaq	0x1020(%rsp), %rsi
    00000089: 	movl	%eax, 0x14(%rsp)
    0000008d: 	leaq	0x8(%rbx), %rax
    00000091: 	leaq	0x4(%r12,%rdx,4), %r10
    00000096: 	movq	%rax, 0x8(%rsp)
    0000009b: 	xorl	%eax, %eax
.Ltmp349:
    0000009d: 	movq	%rax, (%rbx)
    000000a0: 	movq	%rbx, %rcx
    000000a3: 	movq	%rax, -0x10(%r13)
    000000a7: 	movq	0x8(%rsp), %rdi
    000000ac: 	andq	$-0x8, %rdi
    000000b0: 	subq	%rdi, %rcx
    000000b3: 	addl	$0x800, %ecx
    000000b9: 	shrl	$0x3, %ecx
    000000bc: 	rep		stosq	%rax, %es:(%rdi)
    000000bf: 	movl	$0x100, %ecx
    000000c4: 	movq	%r9, %rdi
    000000c7: 	rep		stosq	%rax, %es:(%rdi)
    000000ca: 	movl	$0x100, %ecx
    000000cf: 	movq	%r8, %rdi
    000000d2: 	rep		stosq	%rax, %es:(%rdi)
    000000d5: 	movl	$0x100, %ecx
    000000da: 	movq	%rsi, %rdi
    000000dd: 	rep		stosq	%rax, %es:(%rdi)
    000000e0: 	cmpl	$0x3, %ebp
    000000e3: 	jle	.Ltmp345 # Offset: 227
    000000e9: 	movq	%r12, %rdx
    000000ec: 	nopl	(%rax) # Size: 4
.Ltmp346:
    000000f0: 	movzbl	0x1(%rdx), %r14d
    000000f5: 	movzbl	0x2(%rdx), %edi
    000000f9: 	addq	$0x4, %rdx
    000000fd: 	movzbl	-0x1(%rdx), %ecx
    00000101: 	movzbl	-0x4(%rdx), %r15d
    00000106: 	addq	$0x1, 0x20(%rsp,%r14,8)
    0000010c: 	addq	$0x1, (%rbx,%r15,8)
    00000111: 	addq	$0x1, 0x820(%rsp,%rdi,8)
    0000011a: 	addq	$0x1, 0x1020(%rsp,%rcx,8)
    00000123: 	cmpq	%rdx, %r10
    00000126: 	jne	.Ltmp346 # Offset: 294
    00000128: 	movl	0x14(%rsp), %edx
.Ltmp357:
    0000012c: 	cmpl	%edx, %ebp
    0000012e: 	jle	.Ltmp347 # Offset: 302
    00000130: 	movslq	%edx, %rcx
    00000133: 	movzbl	(%r12,%rcx), %ecx
    00000138: 	addq	$0x1, (%rbx,%rcx,8)
    0000013d: 	leal	0x1(%rdx), %ecx
    00000140: 	cmpl	%ebp, %ecx
    00000142: 	jge	.Ltmp347 # Offset: 322
    00000144: 	movslq	%ecx, %rcx
    00000147: 	movzbl	(%r12,%rcx), %ecx
    0000014c: 	addq	$0x1, (%rbx,%rcx,8)
    00000151: 	leal	0x2(%rdx), %ecx
    00000154: 	cmpl	%ecx, %ebp
    00000156: 	jle	.Ltmp347 # Offset: 342
    00000158: 	movslq	%ecx, %rcx
    0000015b: 	addl	$0x3, %edx
    0000015e: 	movzbl	(%r12,%rcx), %ecx
    00000163: 	addq	$0x1, (%rbx,%rcx,8)
    00000168: 	cmpl	%edx, %ebp
    0000016a: 	jle	.Ltmp347 # Offset: 362
    0000016c: 	movslq	%edx, %rdx
    0000016f: 	movzbl	(%r12,%rdx), %edx
    00000174: 	addq	$0x1, (%rbx,%rdx,8)
.Ltmp347:
    00000179: 	xorl	%edx, %edx
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp348:
    00000180: 	movdqu	(%rbx,%rdx), %xmm1
    00000185: 	movdqa	(%rsi,%rdx), %xmm0
    0000018a: 	paddq	(%r9,%rdx), %xmm1
    00000190: 	paddq	(%r8,%rdx), %xmm0
    00000196: 	paddq	%xmm1, %xmm0
    0000019a: 	movups	%xmm0, (%rbx,%rdx)
    0000019e: 	addq	$0x10, %rdx
    000001a2: 	cmpq	$0x800, %rdx
    000001a9: 	jne	.Ltmp348 # Offset: 425
    000001ab: 	addl	$0x1, %r11d
    000001af: 	cmpl	%r11d, iterations(%rip)
    000001b6: 	jg	.Ltmp349 # Offset: 438
.Ltmp344:
    000001bc: 	leaq	referenceHistogram(%rip), %rbp
    000001c3: 	xorl	%r12d, %r12d
    000001c6: 	jmp	.Ltmp350 # Offset: 454
    000001c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp352:
    000001d0: 	addq	$0x1, %r12
    000001d4: 	addq	$0x8, %rbx
    000001d8: 	addq	$0x8, %rbp
    000001dc: 	cmpq	$0x100, %r12
    000001e3: 	je	.Ltmp351 # Offset: 483
.Ltmp350:
    000001e9: 	movq	(%rbp), %rax
    000001ed: 	cmpq	%rax, (%rbx)
    000001f0: 	je	.Ltmp352 # Offset: 496
    000001f2: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    000001f9: 	movl	$0x5, %edx
    000001fe: 	leaq	DATAat0x108e4(%rip), %rsi
    00000205: 	movq	%r13, %rdi
    00000208: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 520
    0000020d: 	cmpq	$0x0, 0x18(%rsp)
    00000213: 	je	.Ltmp353 # Offset: 531
    00000219: 	movq	0x18(%rsp), %r15
    0000021e: 	movq	%r15, %rdi
    00000221: 	callq	strlen@PLT # Offset: 545
    00000226: 	movq	%r15, %rsi
    00000229: 	movq	%r13, %rdi
    0000022c: 	movq	%rax, %rdx
    0000022f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 559
.Ltmp359:
    00000234: 	movl	$0xf, %edx
    00000239: 	leaq	DATAat0x108ea(%rip), %rsi
    00000240: 	movq	%r13, %rdi
    00000243: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 579
    00000248: 	movq	%r12, %rsi
    0000024b: 	movq	%r13, %rdi
    0000024e: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 590
    00000253: 	movl	$0xb, %edx
    00000258: 	leaq	DATAat0x108fa(%rip), %rsi
    0000025f: 	movq	%rax, %rdi
    00000262: 	movq	%rax, %r12
    00000265: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 613
    0000026a: 	movq	(%rbp), %rsi
    0000026e: 	movq	%r12, %rdi
    00000271: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 625
    00000276: 	movl	$0x4, %edx
    0000027b: 	leaq	DATAat0x10906(%rip), %rsi
    00000282: 	movq	%rax, %rdi
    00000285: 	movq	%rax, %rbp
    00000288: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 648
    0000028d: 	movq	(%rbx), %rsi
    00000290: 	movq	%rbp, %rdi
    00000293: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 659
    00000298: 	movl	$0x2, %edx
    0000029d: 	leaq	DATAat0x1090b(%rip), %rsi
    000002a4: 	movq	%rax, %rbp
    000002a7: 	movq	%rax, %rdi
    000002aa: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 682
    000002af: 	movq	(%rbp), %rax
    000002b3: 	movq	-0x18(%rax), %rax
    000002b7: 	movq	0xf0(%rbp,%rax), %r12
    000002bf: 	testq	%r12, %r12
    000002c2: 	je	.Ltmp354 # Offset: 706
    000002c8: 	cmpb	$0x0, 0x38(%r12)
    000002ce: 	je	.Ltmp355 # Offset: 718
    000002d0: 	movsbl	0x43(%r12), %esi
    000002d6: 	movq	%rbp, %rdi
    000002d9: 	callq	_ZNSo3putEc@PLT # Offset: 729
    000002de: 	movq	%rax, %rdi
    000002e1: 	callq	_ZNSo5flushEv@PLT # Offset: 737
.Ltmp351:
    000002e6: 	callq	clock@PLT # Offset: 742
    000002eb: 	movq	%rax, end_time(%rip)
    000002f2: 	movq	0x1828(%rsp), %rdx
    000002fa: 	subq	%fs:0x28, %rdx
    00000303: 	jne	.Ltmp356 # Offset: 771
    00000309: 	subq	start_time(%rip), %rax
    00000310: 	pxor	%xmm0, %xmm0
    00000314: 	movq	0x18(%rsp), %rdi
    00000319: 	cvtsi2sd	%rax, %xmm0
    0000031e: 	divsd	DATAat0x10920(%rip), %xmm0
    00000326: 	addq	$0x1838, %rsp
    0000032d: 	popq	%rbx
    0000032e: 	popq	%rbp
    0000032f: 	popq	%r12
    00000331: 	popq	%r13
    00000333: 	popq	%r14
    00000335: 	popq	%r15
    00000337: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 823
.Ltmp345:
    0000033c: 	xorl	%edx, %edx
    0000033e: 	jmp	.Ltmp357 # Offset: 830
.Ltmp355:
    00000343: 	movq	%r12, %rdi
    00000346: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 838
    0000034b: 	movq	(%r12), %rax
    0000034f: 	movl	$0xa, %esi
    00000354: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    0000035b: 	movq	0x30(%rax), %rax
    0000035f: 	cmpq	%rdx, %rax
    00000362: 	jne	.Ltmp358 # Offset: 866
.Ltmp360:
    00000364: 	movq	%rbp, %rdi
    00000367: 	callq	_ZNSo3putEc@PLT # Offset: 871
    0000036c: 	movq	%rax, %rdi
    0000036f: 	callq	_ZNSo5flushEv@PLT # Offset: 879
    00000374: 	jmp	.Ltmp351 # Offset: 884
.Ltmp353:
    00000379: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000380: 	movq	-0x18(%rax), %rdi
    00000384: 	addq	%r13, %rdi
    00000387: 	movl	0x20(%rdi), %esi
    0000038a: 	orl	$0x1, %esi
    0000038d: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 909
    00000392: 	jmp	.Ltmp359 # Offset: 914
.Ltmp358:
    00000397: 	movq	%r12, %rdi
    0000039a: 	callq	*%rax # Offset: 922
    0000039c: 	movsbl	%al, %esi
    0000039f: 	jmp	.Ltmp360 # Offset: 927
.Ltmp356:
    000003a1: 	callq	__stack_chk_fail@PLT # Offset: 929
.Ltmp354:
    000003a6: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 934
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_histogram5IhmEvPKT_iPT0_PKc"

Binary Function "_Z15test_histogram6ItEvPKhiPT_PKc" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x69f0
  Size        : 0x56b
  MaxSize     : 0x570
  Offset      : 0x69f0
  Section     : .text
  Orc Section : .local.text._Z15test_histogram6ItEvPKhiPT_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdx, %rbx
    00000014: 	subq	$0x668, %rsp
    0000001b: 	movl	%esi, 0x10(%rsp)
    0000001f: 	movq	%rcx, 0x48(%rsp)
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x658(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	callq	clock@PLT # Offset: 55
    0000003c: 	movl	iterations(%rip), %edx
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp361 # Offset: 75
    00000051: 	movq	%r13, %rax
    00000054: 	movl	$0x0, 0x14(%rsp)
    0000005c: 	leaq	0x50(%rsp), %r11
    00000061: 	leaq	0x250(%rsp), %r10
    00000069: 	andl	$0x3, %eax
    0000006c: 	leaq	0x450(%rsp), %r9
    00000074: 	movq	%rax, 0x30(%rsp)
    00000079: 	movl	0x10(%rsp), %eax
    0000007d: 	leal	-0xf(%rax), %edi
    00000080: 	movl	%edi, 0x18(%rsp)
    00000084: 	leal	-0x3(%rax), %edi
    00000087: 	movl	%edi, 0x1c(%rsp)
    0000008b: 	leaq	0x208(%rbx), %rdi
    00000092: 	movq	%rdi, 0x28(%rsp)
    00000097: 	leaq	0x8(%rbx), %rdi
    0000009b: 	movq	%rdi, 0x20(%rsp)
    000000a0: 	movl	%eax, %edi
    000000a2: 	subl	$0x1, %eax
    000000a5: 	leaq	0x1(%r13,%rax), %r12
    000000aa: 	movl	%edi, %eax
    000000ac: 	leal	-0x10(%rdi), %edi
    000000af: 	movl	%edi, 0x40(%rsp)
    000000b3: 	subl	$0x4, %eax
    000000b6: 	leaq	0x10(%r13), %rdi
    000000ba: 	movq	%rdi, 0x38(%rsp)
    000000bf: 	movl	%eax, 0x44(%rsp)
.Ltmp370:
    000000c3: 	movq	$0x0, (%rbx)
    000000ca: 	movq	0x28(%rsp), %rax
    000000cf: 	movq	%rbx, %rcx
    000000d2: 	movq	$0x0, -0x10(%rax)
    000000da: 	movq	0x20(%rsp), %rdi
    000000df: 	xorl	%eax, %eax
    000000e1: 	andq	$-0x8, %rdi
    000000e5: 	subq	%rdi, %rcx
    000000e8: 	addl	$0x200, %ecx
    000000ee: 	shrl	$0x3, %ecx
    000000f1: 	rep		stosq	%rax, %es:(%rdi)
    000000f4: 	movl	$0x40, %ecx
    000000f9: 	movq	%r11, %rdi
    000000fc: 	rep		stosq	%rax, %es:(%rdi)
    000000ff: 	movl	$0x40, %ecx
    00000104: 	movq	%r10, %rdi
    00000107: 	rep		stosq	%rax, %es:(%rdi)
    0000010a: 	movl	$0x40, %ecx
    0000010f: 	movq	%r9, %rdi
    00000112: 	rep		stosq	%rax, %es:(%rdi)
    00000115: 	movl	0x10(%rsp), %eax
    00000119: 	testl	%eax, %eax
    0000011b: 	jle	.Ltmp362 # Offset: 283
    00000121: 	cmpq	$0x0, 0x30(%rsp)
    00000127: 	je	.Ltmp362 # Offset: 295
    0000012d: 	movq	%r13, %rax
.Ltmp363:
    00000130: 	movzbl	(%rax), %edx
    00000133: 	addq	$0x1, %rax
    00000137: 	addw	$0x1, (%rbx,%rdx,2)
    0000013c: 	cmpq	%rax, %r12
    0000013f: 	jne	.Ltmp363 # Offset: 319
    00000141: 	movl	0x10(%rsp), %ebp
.Ltmp378:
    00000145: 	cmpl	0x18(%rsp), %ebp
    00000149: 	jge	.Ltmp364 # Offset: 329
    0000014f: 	movl	0x40(%rsp), %r15d
    00000154: 	movslq	%ebp, %r14
    00000157: 	movq	%rbx, 0x8(%rsp)
    0000015c: 	leaq	(%r13,%r14), %rdi
    00000161: 	addq	0x38(%rsp), %r14
    00000166: 	subl	%ebp, %r15d
    00000169: 	shrl	$0x4, %r15d
    0000016d: 	movl	%r15d, %eax
    00000170: 	shlq	$0x4, %rax
    00000174: 	addq	%rax, %r14
    00000177: 	nopw	(%rax,%rax) # Size: 9
.Ltmp365:
    00000180: 	movl	(%rdi), %esi
    00000182: 	movq	0x8(%rsp), %rbx
    00000187: 	addq	$0x10, %rdi
    0000018b: 	movl	-0xc(%rdi), %ecx
    0000018e: 	movl	-0x8(%rdi), %edx
    00000191: 	movl	%esi, %r8d
    00000194: 	movl	-0x4(%rdi), %eax
    00000197: 	shrl	$0x18, %r8d
    0000019b: 	addw	$0x1, (%rbx,%r8,2)
    000001a1: 	movl	%esi, %r8d
    000001a4: 	movl	%esi, %ebx
    000001a6: 	movzbl	%sil, %esi
    000001aa: 	addw	$0x1, 0x450(%rsp,%rsi,2)
    000001b3: 	shrl	$0x10, %r8d
    000001b7: 	movzbl	%bh, %ebx
    000001ba: 	movl	%ecx, %esi
    000001bc: 	movzbl	%r8b, %r8d
    000001c0: 	shrl	$0x18, %esi
    000001c3: 	addw	$0x1, 0x50(%rsp,%r8,2)
    000001ca: 	movslq	%ebx, %r8
    000001cd: 	movq	0x8(%rsp), %rbx
    000001d2: 	addw	$0x1, 0x250(%rsp,%r8,2)
    000001dc: 	addw	$0x1, (%rbx,%rsi,2)
    000001e1: 	movl	%ecx, %esi
    000001e3: 	shrl	$0x10, %esi
    000001e6: 	movzbl	%sil, %esi
    000001ea: 	addw	$0x1, 0x50(%rsp,%rsi,2)
    000001f0: 	movzbl	%ch, %esi
    000001f3: 	movzbl	%cl, %ecx
    000001f6: 	addw	$0x1, 0x450(%rsp,%rcx,2)
    000001ff: 	movl	%edx, %ecx
    00000201: 	movslq	%esi, %rsi
    00000204: 	addw	$0x1, 0x250(%rsp,%rsi,2)
    0000020d: 	shrl	$0x18, %ecx
    00000210: 	addw	$0x1, (%rbx,%rcx,2)
    00000215: 	movl	%edx, %ecx
    00000217: 	shrl	$0x10, %ecx
    0000021a: 	movzbl	%cl, %ecx
    0000021d: 	addw	$0x1, 0x50(%rsp,%rcx,2)
    00000223: 	movzbl	%dh, %ecx
    00000226: 	movzbl	%dl, %edx
    00000229: 	addw	$0x1, 0x450(%rsp,%rdx,2)
    00000232: 	movl	%eax, %edx
    00000234: 	movslq	%ecx, %rcx
    00000237: 	addw	$0x1, 0x250(%rsp,%rcx,2)
    00000240: 	shrl	$0x18, %edx
    00000243: 	addw	$0x1, (%rbx,%rdx,2)
    00000248: 	movl	%eax, %edx
    0000024a: 	shrl	$0x10, %edx
    0000024d: 	movzbl	%dl, %edx
    00000250: 	addw	$0x1, 0x50(%rsp,%rdx,2)
    00000256: 	movzbl	%ah, %edx
    00000259: 	movzbl	%al, %eax
    0000025c: 	addw	$0x1, 0x450(%rsp,%rax,2)
    00000265: 	movslq	%edx, %rdx
    00000268: 	addw	$0x1, 0x250(%rsp,%rdx,2)
    00000271: 	cmpq	%rdi, %r14
    00000274: 	jne	.Ltmp365 # Offset: 628
    0000027a: 	shll	$0x4, %r15d
    0000027e: 	leal	0x10(%rbp,%r15), %ebp
.Ltmp364:
    00000283: 	cmpl	0x1c(%rsp), %ebp
    00000287: 	jge	.Ltmp366 # Offset: 647
    00000289: 	movl	0x44(%rsp), %edi
    0000028d: 	movslq	%ebp, %rax
    00000290: 	leaq	(%r13,%rax), %rcx
    00000295: 	leaq	0x4(%r13,%rax), %rax
    0000029a: 	subl	%ebp, %edi
    0000029c: 	shrl	$0x2, %edi
    0000029f: 	movl	%edi, %edx
    000002a1: 	leaq	(%rax,%rdx,4), %rsi
    000002a5: 	nopl	(%rax) # Size: 3
.Ltmp367:
    000002a8: 	movl	(%rcx), %eax
    000002aa: 	addq	$0x4, %rcx
    000002ae: 	movl	%eax, %edx
    000002b0: 	shrl	$0x18, %edx
    000002b3: 	addw	$0x1, (%rbx,%rdx,2)
    000002b8: 	movl	%eax, %edx
    000002ba: 	shrl	$0x10, %edx
    000002bd: 	movzbl	%dl, %edx
    000002c0: 	addw	$0x1, 0x50(%rsp,%rdx,2)
    000002c6: 	movzbl	%ah, %edx
    000002c9: 	movzbl	%al, %eax
    000002cc: 	addw	$0x1, 0x450(%rsp,%rax,2)
    000002d5: 	movslq	%edx, %rdx
    000002d8: 	addw	$0x1, 0x250(%rsp,%rdx,2)
    000002e1: 	cmpq	%rcx, %rsi
    000002e4: 	jne	.Ltmp367 # Offset: 740
    000002e6: 	leal	0x4(%rbp,%rdi,4), %ebp
.Ltmp366:
    000002ea: 	cmpl	%ebp, 0x10(%rsp)
    000002ee: 	jle	.Ltmp368 # Offset: 750
    000002f0: 	movslq	%ebp, %rax
    000002f3: 	movl	0x10(%rsp), %edi
    000002f7: 	movzbl	(%r13,%rax), %eax
    000002fd: 	addw	$0x1, (%rbx,%rax,2)
    00000302: 	leal	0x1(%rbp), %eax
    00000305: 	cmpl	%edi, %eax
    00000307: 	jge	.Ltmp368 # Offset: 775
    00000309: 	cltq
    0000030b: 	movzbl	(%r13,%rax), %eax
    00000311: 	addw	$0x1, (%rbx,%rax,2)
    00000316: 	leal	0x2(%rbp), %eax
    00000319: 	cmpl	%eax, %edi
    0000031b: 	jle	.Ltmp368 # Offset: 795
    0000031d: 	cltq
    0000031f: 	addl	$0x3, %ebp
    00000322: 	movzbl	(%r13,%rax), %eax
    00000328: 	addw	$0x1, (%rbx,%rax,2)
    0000032d: 	cmpl	%ebp, %edi
    0000032f: 	jle	.Ltmp368 # Offset: 815
    00000331: 	movslq	%ebp, %rbp
    00000334: 	movzbl	(%r13,%rbp), %eax
    0000033a: 	addw	$0x1, (%rbx,%rax,2)
.Ltmp368:
    0000033f: 	xorl	%eax, %eax
    00000341: 	nopl	(%rax) # Size: 7
.Ltmp369:
    00000348: 	movdqu	(%rbx,%rax), %xmm0
    0000034d: 	paddw	(%r11,%rax), %xmm0
    00000353: 	paddw	(%r10,%rax), %xmm0
    00000359: 	paddw	(%r9,%rax), %xmm0
    0000035f: 	movups	%xmm0, (%rbx,%rax)
    00000363: 	addq	$0x10, %rax
    00000367: 	cmpq	$0x200, %rax
    0000036d: 	jne	.Ltmp369 # Offset: 877
    0000036f: 	addl	$0x1, 0x14(%rsp)
    00000374: 	movl	0x14(%rsp), %eax
    00000378: 	cmpl	%eax, iterations(%rip)
    0000037e: 	jg	.Ltmp370 # Offset: 894
.Ltmp361:
    00000384: 	leaq	referenceHistogram(%rip), %rbp
    0000038b: 	xorl	%r12d, %r12d
    0000038e: 	jmp	.Ltmp371 # Offset: 910
.Ltmp373:
    00000390: 	addq	$0x1, %r12
    00000394: 	addq	$0x2, %rbx
    00000398: 	addq	$0x8, %rbp
    0000039c: 	cmpq	$0x100, %r12
    000003a3: 	je	.Ltmp372 # Offset: 931
.Ltmp371:
    000003a9: 	movzwl	(%rbp), %eax
    000003ad: 	cmpw	%ax, (%rbx)
    000003b0: 	je	.Ltmp373 # Offset: 944
    000003b2: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    000003b9: 	movl	$0x5, %edx
    000003be: 	leaq	DATAat0x108e4(%rip), %rsi
    000003c5: 	movq	%r13, %rdi
    000003c8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 968
    000003cd: 	cmpq	$0x0, 0x48(%rsp)
    000003d3: 	je	.Ltmp374 # Offset: 979
    000003d9: 	movq	0x48(%rsp), %r15
    000003de: 	movq	%r15, %rdi
    000003e1: 	callq	strlen@PLT # Offset: 993
    000003e6: 	movq	%r15, %rsi
    000003e9: 	movq	%r13, %rdi
    000003ec: 	movq	%rax, %rdx
    000003ef: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1007
.Ltmp380:
    000003f4: 	movl	$0xf, %edx
    000003f9: 	leaq	DATAat0x108ea(%rip), %rsi
    00000400: 	movq	%r13, %rdi
    00000403: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1027
    00000408: 	movq	%r12, %rsi
    0000040b: 	movq	%r13, %rdi
    0000040e: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 1038
    00000413: 	movl	$0xb, %edx
    00000418: 	leaq	DATAat0x108fa(%rip), %rsi
    0000041f: 	movq	%rax, %rdi
    00000422: 	movq	%rax, %r12
    00000425: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1061
    0000042a: 	movq	(%rbp), %rsi
    0000042e: 	movq	%r12, %rdi
    00000431: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 1073
    00000436: 	movl	$0x4, %edx
    0000043b: 	leaq	DATAat0x10906(%rip), %rsi
    00000442: 	movq	%rax, %rdi
    00000445: 	movq	%rax, %rbp
    00000448: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1096
    0000044d: 	movzwl	(%rbx), %esi
    00000450: 	movq	%rbp, %rdi
    00000453: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 1107
    00000458: 	movl	$0x2, %edx
    0000045d: 	leaq	DATAat0x1090b(%rip), %rsi
    00000464: 	movq	%rax, %rbp
    00000467: 	movq	%rax, %rdi
    0000046a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1130
    0000046f: 	movq	(%rbp), %rax
    00000473: 	movq	-0x18(%rax), %rax
    00000477: 	movq	0xf0(%rbp,%rax), %r12
    0000047f: 	testq	%r12, %r12
    00000482: 	je	.Ltmp375 # Offset: 1154
    00000488: 	cmpb	$0x0, 0x38(%r12)
    0000048e: 	je	.Ltmp376 # Offset: 1166
    00000490: 	movsbl	0x43(%r12), %esi
    00000496: 	movq	%rbp, %rdi
    00000499: 	callq	_ZNSo3putEc@PLT # Offset: 1177
    0000049e: 	movq	%rax, %rdi
    000004a1: 	callq	_ZNSo5flushEv@PLT # Offset: 1185
.Ltmp372:
    000004a6: 	callq	clock@PLT # Offset: 1190
    000004ab: 	movq	%rax, end_time(%rip)
    000004b2: 	movq	0x658(%rsp), %rdx
    000004ba: 	subq	%fs:0x28, %rdx
    000004c3: 	jne	.Ltmp377 # Offset: 1219
    000004c9: 	subq	start_time(%rip), %rax
    000004d0: 	pxor	%xmm0, %xmm0
    000004d4: 	movq	0x48(%rsp), %rdi
    000004d9: 	cvtsi2sd	%rax, %xmm0
    000004de: 	divsd	DATAat0x10920(%rip), %xmm0
    000004e6: 	addq	$0x668, %rsp
    000004ed: 	popq	%rbx
    000004ee: 	popq	%rbp
    000004ef: 	popq	%r12
    000004f1: 	popq	%r13
    000004f3: 	popq	%r14
    000004f5: 	popq	%r15
    000004f7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1271
.Ltmp362:
    000004fc: 	xorl	%ebp, %ebp
    000004fe: 	jmp	.Ltmp378 # Offset: 1278
.Ltmp376:
    00000503: 	movq	%r12, %rdi
    00000506: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 1286
    0000050b: 	movq	(%r12), %rax
    0000050f: 	movl	$0xa, %esi
    00000514: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    0000051b: 	movq	0x30(%rax), %rax
    0000051f: 	cmpq	%rdx, %rax
    00000522: 	jne	.Ltmp379 # Offset: 1314
.Ltmp381:
    00000524: 	movq	%rbp, %rdi
    00000527: 	callq	_ZNSo3putEc@PLT # Offset: 1319
    0000052c: 	movq	%rax, %rdi
    0000052f: 	callq	_ZNSo5flushEv@PLT # Offset: 1327
    00000534: 	jmp	.Ltmp372 # Offset: 1332
.Ltmp374:
    00000539: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000540: 	movq	-0x18(%rax), %rdi
    00000544: 	addq	%r13, %rdi
    00000547: 	movl	0x20(%rdi), %esi
    0000054a: 	orl	$0x1, %esi
    0000054d: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1357
    00000552: 	jmp	.Ltmp380 # Offset: 1362
.Ltmp379:
    00000557: 	movq	%r12, %rdi
    0000055a: 	callq	*%rax # Offset: 1370
    0000055c: 	movsbl	%al, %esi
    0000055f: 	jmp	.Ltmp381 # Offset: 1375
.Ltmp377:
    00000561: 	callq	__stack_chk_fail@PLT # Offset: 1377
.Ltmp375:
    00000566: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 1382
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_histogram6ItEvPKhiPT_PKc"

Binary Function "_Z15test_histogram6IjEvPKhiPT_PKc" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x6f60
  Size        : 0x558
  MaxSize     : 0x560
  Offset      : 0x6f60
  Section     : .text
  Orc Section : .local.text._Z15test_histogram6IjEvPKhiPT_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdx, %rbx
    00000014: 	subq	$0xc68, %rsp
    0000001b: 	movl	%esi, 0x10(%rsp)
    0000001f: 	movq	%rcx, 0x48(%rsp)
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0xc58(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	callq	clock@PLT # Offset: 55
    0000003c: 	movl	iterations(%rip), %edx
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp382 # Offset: 75
    00000051: 	movq	%r13, %rax
    00000054: 	movl	$0x0, 0x14(%rsp)
    0000005c: 	leaq	0x50(%rsp), %r11
    00000061: 	leaq	0x450(%rsp), %r10
    00000069: 	andl	$0x3, %eax
    0000006c: 	leaq	0x850(%rsp), %r9
    00000074: 	movq	%rax, 0x30(%rsp)
    00000079: 	movl	0x10(%rsp), %eax
    0000007d: 	leal	-0xf(%rax), %edi
    00000080: 	movl	%edi, 0x18(%rsp)
    00000084: 	leal	-0x3(%rax), %edi
    00000087: 	movl	%edi, 0x1c(%rsp)
    0000008b: 	leaq	0x408(%rbx), %rdi
    00000092: 	movq	%rdi, 0x28(%rsp)
    00000097: 	leaq	0x8(%rbx), %rdi
    0000009b: 	movq	%rdi, 0x20(%rsp)
    000000a0: 	movl	%eax, %edi
    000000a2: 	subl	$0x1, %eax
    000000a5: 	leaq	0x1(%r13,%rax), %r12
    000000aa: 	movl	%edi, %eax
    000000ac: 	leal	-0x10(%rdi), %edi
    000000af: 	movl	%edi, 0x40(%rsp)
    000000b3: 	subl	$0x4, %eax
    000000b6: 	leaq	0x10(%r13), %rdi
    000000ba: 	movq	%rdi, 0x38(%rsp)
    000000bf: 	movl	%eax, 0x44(%rsp)
.Ltmp391:
    000000c3: 	movq	$0x0, (%rbx)
    000000ca: 	movq	0x28(%rsp), %rax
    000000cf: 	movq	%rbx, %rcx
    000000d2: 	movq	$0x0, -0x10(%rax)
    000000da: 	movq	0x20(%rsp), %rdi
    000000df: 	xorl	%eax, %eax
    000000e1: 	andq	$-0x8, %rdi
    000000e5: 	subq	%rdi, %rcx
    000000e8: 	addl	$0x400, %ecx
    000000ee: 	shrl	$0x3, %ecx
    000000f1: 	rep		stosq	%rax, %es:(%rdi)
    000000f4: 	movl	$0x80, %ecx
    000000f9: 	movq	%r11, %rdi
    000000fc: 	rep		stosq	%rax, %es:(%rdi)
    000000ff: 	movl	$0x80, %ecx
    00000104: 	movq	%r10, %rdi
    00000107: 	rep		stosq	%rax, %es:(%rdi)
    0000010a: 	movl	$0x80, %ecx
    0000010f: 	movq	%r9, %rdi
    00000112: 	rep		stosq	%rax, %es:(%rdi)
    00000115: 	movl	0x10(%rsp), %eax
    00000119: 	testl	%eax, %eax
    0000011b: 	jle	.Ltmp383 # Offset: 283
    00000121: 	cmpq	$0x0, 0x30(%rsp)
    00000127: 	je	.Ltmp383 # Offset: 295
    0000012d: 	movq	%r13, %rax
.Ltmp384:
    00000130: 	movzbl	(%rax), %edx
    00000133: 	addq	$0x1, %rax
    00000137: 	addl	$0x1, (%rbx,%rdx,4)
    0000013b: 	cmpq	%rax, %r12
    0000013e: 	jne	.Ltmp384 # Offset: 318
    00000140: 	movl	0x10(%rsp), %ebp
.Ltmp399:
    00000144: 	cmpl	0x18(%rsp), %ebp
    00000148: 	jge	.Ltmp385 # Offset: 328
    0000014e: 	movl	0x40(%rsp), %r15d
    00000153: 	movslq	%ebp, %r14
    00000156: 	movq	%rbx, 0x8(%rsp)
    0000015b: 	leaq	(%r13,%r14), %rdi
    00000160: 	addq	0x38(%rsp), %r14
    00000165: 	subl	%ebp, %r15d
    00000168: 	shrl	$0x4, %r15d
    0000016c: 	movl	%r15d, %eax
    0000016f: 	shlq	$0x4, %rax
    00000173: 	addq	%rax, %r14
    00000176: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp386:
    00000180: 	movl	(%rdi), %esi
    00000182: 	movq	0x8(%rsp), %rbx
    00000187: 	addq	$0x10, %rdi
    0000018b: 	movl	-0xc(%rdi), %ecx
    0000018e: 	movl	-0x8(%rdi), %edx
    00000191: 	movl	%esi, %r8d
    00000194: 	movl	-0x4(%rdi), %eax
    00000197: 	shrl	$0x18, %r8d
    0000019b: 	addl	$0x1, (%rbx,%r8,4)
    000001a0: 	movl	%esi, %r8d
    000001a3: 	movl	%esi, %ebx
    000001a5: 	movzbl	%sil, %esi
    000001a9: 	shrl	$0x10, %r8d
    000001ad: 	movzbl	%bh, %ebx
    000001b0: 	addl	$0x1, 0x850(%rsp,%rsi,4)
    000001b8: 	movl	%ecx, %esi
    000001ba: 	movzbl	%r8b, %r8d
    000001be: 	shrl	$0x18, %esi
    000001c1: 	addl	$0x1, 0x50(%rsp,%r8,4)
    000001c7: 	movslq	%ebx, %r8
    000001ca: 	movq	0x8(%rsp), %rbx
    000001cf: 	addl	$0x1, 0x450(%rsp,%r8,4)
    000001d8: 	addl	$0x1, (%rbx,%rsi,4)
    000001dc: 	movl	%ecx, %esi
    000001de: 	shrl	$0x10, %esi
    000001e1: 	movzbl	%sil, %esi
    000001e5: 	addl	$0x1, 0x50(%rsp,%rsi,4)
    000001ea: 	movzbl	%ch, %esi
    000001ed: 	movzbl	%cl, %ecx
    000001f0: 	addl	$0x1, 0x850(%rsp,%rcx,4)
    000001f8: 	movl	%edx, %ecx
    000001fa: 	movslq	%esi, %rsi
    000001fd: 	shrl	$0x18, %ecx
    00000200: 	addl	$0x1, 0x450(%rsp,%rsi,4)
    00000208: 	addl	$0x1, (%rbx,%rcx,4)
    0000020c: 	movl	%edx, %ecx
    0000020e: 	shrl	$0x10, %ecx
    00000211: 	movzbl	%cl, %ecx
    00000214: 	addl	$0x1, 0x50(%rsp,%rcx,4)
    00000219: 	movzbl	%dh, %ecx
    0000021c: 	movzbl	%dl, %edx
    0000021f: 	addl	$0x1, 0x850(%rsp,%rdx,4)
    00000227: 	movl	%eax, %edx
    00000229: 	movslq	%ecx, %rcx
    0000022c: 	shrl	$0x18, %edx
    0000022f: 	addl	$0x1, 0x450(%rsp,%rcx,4)
    00000237: 	addl	$0x1, (%rbx,%rdx,4)
    0000023b: 	movl	%eax, %edx
    0000023d: 	shrl	$0x10, %edx
    00000240: 	movzbl	%dl, %edx
    00000243: 	addl	$0x1, 0x50(%rsp,%rdx,4)
    00000248: 	movzbl	%ah, %edx
    0000024b: 	movzbl	%al, %eax
    0000024e: 	movslq	%edx, %rdx
    00000251: 	addl	$0x1, 0x850(%rsp,%rax,4)
    00000259: 	addl	$0x1, 0x450(%rsp,%rdx,4)
    00000261: 	cmpq	%rdi, %r14
    00000264: 	jne	.Ltmp386 # Offset: 612
    0000026a: 	shll	$0x4, %r15d
    0000026e: 	leal	0x10(%rbp,%r15), %ebp
.Ltmp385:
    00000273: 	cmpl	0x1c(%rsp), %ebp
    00000277: 	jge	.Ltmp387 # Offset: 631
    00000279: 	movl	0x44(%rsp), %edi
    0000027d: 	movslq	%ebp, %rax
    00000280: 	leaq	(%r13,%rax), %rcx
    00000285: 	leaq	0x4(%r13,%rax), %rax
    0000028a: 	subl	%ebp, %edi
    0000028c: 	shrl	$0x2, %edi
    0000028f: 	movl	%edi, %edx
    00000291: 	leaq	(%rax,%rdx,4), %rsi
    00000295: 	nopl	(%rax) # Size: 3
.Ltmp388:
    00000298: 	movl	(%rcx), %eax
    0000029a: 	addq	$0x4, %rcx
    0000029e: 	movl	%eax, %edx
    000002a0: 	shrl	$0x18, %edx
    000002a3: 	addl	$0x1, (%rbx,%rdx,4)
    000002a7: 	movl	%eax, %edx
    000002a9: 	shrl	$0x10, %edx
    000002ac: 	movzbl	%dl, %edx
    000002af: 	addl	$0x1, 0x50(%rsp,%rdx,4)
    000002b4: 	movzbl	%ah, %edx
    000002b7: 	movzbl	%al, %eax
    000002ba: 	movslq	%edx, %rdx
    000002bd: 	addl	$0x1, 0x850(%rsp,%rax,4)
    000002c5: 	addl	$0x1, 0x450(%rsp,%rdx,4)
    000002cd: 	cmpq	%rcx, %rsi
    000002d0: 	jne	.Ltmp388 # Offset: 720
    000002d2: 	leal	0x4(%rbp,%rdi,4), %ebp
.Ltmp387:
    000002d6: 	cmpl	%ebp, 0x10(%rsp)
    000002da: 	jle	.Ltmp389 # Offset: 730
    000002dc: 	movslq	%ebp, %rax
    000002df: 	movl	0x10(%rsp), %edi
    000002e3: 	movzbl	(%r13,%rax), %eax
    000002e9: 	addl	$0x1, (%rbx,%rax,4)
    000002ed: 	leal	0x1(%rbp), %eax
    000002f0: 	cmpl	%edi, %eax
    000002f2: 	jge	.Ltmp389 # Offset: 754
    000002f4: 	cltq
    000002f6: 	movzbl	(%r13,%rax), %eax
    000002fc: 	addl	$0x1, (%rbx,%rax,4)
    00000300: 	leal	0x2(%rbp), %eax
    00000303: 	cmpl	%eax, %edi
    00000305: 	jle	.Ltmp389 # Offset: 773
    00000307: 	cltq
    00000309: 	addl	$0x3, %ebp
    0000030c: 	movzbl	(%r13,%rax), %eax
    00000312: 	addl	$0x1, (%rbx,%rax,4)
    00000316: 	cmpl	%ebp, %edi
    00000318: 	jle	.Ltmp389 # Offset: 792
    0000031a: 	movslq	%ebp, %rbp
    0000031d: 	movzbl	(%r13,%rbp), %eax
    00000323: 	addl	$0x1, (%rbx,%rax,4)
.Ltmp389:
    00000327: 	xorl	%eax, %eax
    00000329: 	nopl	(%rax) # Size: 7
.Ltmp390:
    00000330: 	movdqu	(%rbx,%rax), %xmm0
    00000335: 	paddd	(%r11,%rax), %xmm0
    0000033b: 	paddd	(%r10,%rax), %xmm0
    00000341: 	paddd	(%r9,%rax), %xmm0
    00000347: 	movups	%xmm0, (%rbx,%rax)
    0000034b: 	addq	$0x10, %rax
    0000034f: 	cmpq	$0x400, %rax
    00000355: 	jne	.Ltmp390 # Offset: 853
    00000357: 	addl	$0x1, 0x14(%rsp)
    0000035c: 	movl	0x14(%rsp), %eax
    00000360: 	cmpl	%eax, iterations(%rip)
    00000366: 	jg	.Ltmp391 # Offset: 870
.Ltmp382:
    0000036c: 	leaq	referenceHistogram(%rip), %rbp
    00000373: 	xorl	%r12d, %r12d
    00000376: 	jmp	.Ltmp392 # Offset: 886
    00000378: 	nopl	(%rax,%rax) # Size: 8
.Ltmp394:
    00000380: 	addq	$0x1, %r12
    00000384: 	addq	$0x4, %rbx
    00000388: 	addq	$0x8, %rbp
    0000038c: 	cmpq	$0x100, %r12
    00000393: 	je	.Ltmp393 # Offset: 915
.Ltmp392:
    00000399: 	movl	(%rbp), %eax
    0000039c: 	cmpl	%eax, (%rbx)
    0000039e: 	je	.Ltmp394 # Offset: 926
    000003a0: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    000003a7: 	movl	$0x5, %edx
    000003ac: 	leaq	DATAat0x108e4(%rip), %rsi
    000003b3: 	movq	%r13, %rdi
    000003b6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 950
    000003bb: 	cmpq	$0x0, 0x48(%rsp)
    000003c1: 	je	.Ltmp395 # Offset: 961
    000003c7: 	movq	0x48(%rsp), %r15
    000003cc: 	movq	%r15, %rdi
    000003cf: 	callq	strlen@PLT # Offset: 975
    000003d4: 	movq	%r15, %rsi
    000003d7: 	movq	%r13, %rdi
    000003da: 	movq	%rax, %rdx
    000003dd: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 989
.Ltmp401:
    000003e2: 	movl	$0xf, %edx
    000003e7: 	leaq	DATAat0x108ea(%rip), %rsi
    000003ee: 	movq	%r13, %rdi
    000003f1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1009
    000003f6: 	movq	%r12, %rsi
    000003f9: 	movq	%r13, %rdi
    000003fc: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 1020
    00000401: 	movl	$0xb, %edx
    00000406: 	leaq	DATAat0x108fa(%rip), %rsi
    0000040d: 	movq	%rax, %rdi
    00000410: 	movq	%rax, %r12
    00000413: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1043
    00000418: 	movq	(%rbp), %rsi
    0000041c: 	movq	%r12, %rdi
    0000041f: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 1055
    00000424: 	movl	$0x4, %edx
    00000429: 	leaq	DATAat0x10906(%rip), %rsi
    00000430: 	movq	%rax, %rdi
    00000433: 	movq	%rax, %rbp
    00000436: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1078
    0000043b: 	movl	(%rbx), %esi
    0000043d: 	movq	%rbp, %rdi
    00000440: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 1088
    00000445: 	movl	$0x2, %edx
    0000044a: 	leaq	DATAat0x1090b(%rip), %rsi
    00000451: 	movq	%rax, %rbp
    00000454: 	movq	%rax, %rdi
    00000457: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1111
    0000045c: 	movq	(%rbp), %rax
    00000460: 	movq	-0x18(%rax), %rax
    00000464: 	movq	0xf0(%rbp,%rax), %r12
    0000046c: 	testq	%r12, %r12
    0000046f: 	je	.Ltmp396 # Offset: 1135
    00000475: 	cmpb	$0x0, 0x38(%r12)
    0000047b: 	je	.Ltmp397 # Offset: 1147
    0000047d: 	movsbl	0x43(%r12), %esi
    00000483: 	movq	%rbp, %rdi
    00000486: 	callq	_ZNSo3putEc@PLT # Offset: 1158
    0000048b: 	movq	%rax, %rdi
    0000048e: 	callq	_ZNSo5flushEv@PLT # Offset: 1166
.Ltmp393:
    00000493: 	callq	clock@PLT # Offset: 1171
    00000498: 	movq	%rax, end_time(%rip)
    0000049f: 	movq	0xc58(%rsp), %rdx
    000004a7: 	subq	%fs:0x28, %rdx
    000004b0: 	jne	.Ltmp398 # Offset: 1200
    000004b6: 	subq	start_time(%rip), %rax
    000004bd: 	pxor	%xmm0, %xmm0
    000004c1: 	movq	0x48(%rsp), %rdi
    000004c6: 	cvtsi2sd	%rax, %xmm0
    000004cb: 	divsd	DATAat0x10920(%rip), %xmm0
    000004d3: 	addq	$0xc68, %rsp
    000004da: 	popq	%rbx
    000004db: 	popq	%rbp
    000004dc: 	popq	%r12
    000004de: 	popq	%r13
    000004e0: 	popq	%r14
    000004e2: 	popq	%r15
    000004e4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1252
.Ltmp383:
    000004e9: 	xorl	%ebp, %ebp
    000004eb: 	jmp	.Ltmp399 # Offset: 1259
.Ltmp397:
    000004f0: 	movq	%r12, %rdi
    000004f3: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 1267
    000004f8: 	movq	(%r12), %rax
    000004fc: 	movl	$0xa, %esi
    00000501: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    00000508: 	movq	0x30(%rax), %rax
    0000050c: 	cmpq	%rdx, %rax
    0000050f: 	jne	.Ltmp400 # Offset: 1295
.Ltmp402:
    00000511: 	movq	%rbp, %rdi
    00000514: 	callq	_ZNSo3putEc@PLT # Offset: 1300
    00000519: 	movq	%rax, %rdi
    0000051c: 	callq	_ZNSo5flushEv@PLT # Offset: 1308
    00000521: 	jmp	.Ltmp393 # Offset: 1313
.Ltmp395:
    00000526: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000052d: 	movq	-0x18(%rax), %rdi
    00000531: 	addq	%r13, %rdi
    00000534: 	movl	0x20(%rdi), %esi
    00000537: 	orl	$0x1, %esi
    0000053a: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1338
    0000053f: 	jmp	.Ltmp401 # Offset: 1343
.Ltmp400:
    00000544: 	movq	%r12, %rdi
    00000547: 	callq	*%rax # Offset: 1351
    00000549: 	movsbl	%al, %esi
    0000054c: 	jmp	.Ltmp402 # Offset: 1356
.Ltmp398:
    0000054e: 	callq	__stack_chk_fail@PLT # Offset: 1358
.Ltmp396:
    00000553: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 1363
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_histogram6IjEvPKhiPT_PKc"

Binary Function "_Z15test_histogram6ImEvPKhiPT_PKc" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x74c0
  Size        : 0x57b
  MaxSize     : 0x580
  Offset      : 0x74c0
  Section     : .text
  Orc Section : .local.text._Z15test_histogram6ImEvPKhiPT_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x1000, %rsp
    00000015: 	orq	$0x0, (%rsp)
    0000001a: 	subq	$0x868, %rsp
    00000021: 	movl	%esi, 0x10(%rsp)
    00000025: 	movq	%rdx, %rbx
    00000028: 	movq	%rdi, %r13
    0000002b: 	movq	%rcx, 0x48(%rsp)
    00000030: 	movq	%fs:0x28, %rax
    00000039: 	movq	%rax, 0x1858(%rsp)
    00000041: 	xorl	%eax, %eax
    00000043: 	callq	clock@PLT # Offset: 67
    00000048: 	movl	iterations(%rip), %edx
    0000004e: 	movq	%rax, start_time(%rip)
    00000055: 	testl	%edx, %edx
    00000057: 	jle	.Ltmp403 # Offset: 87
    0000005d: 	movq	%r13, %rax
    00000060: 	movl	$0x0, 0x14(%rsp)
    00000068: 	leaq	0x50(%rsp), %r10
    0000006d: 	leaq	0x850(%rsp), %r9
    00000075: 	andl	$0x3, %eax
    00000078: 	leaq	0x1050(%rsp), %r8
    00000080: 	movq	%rax, 0x30(%rsp)
    00000085: 	movl	0x10(%rsp), %eax
    00000089: 	leal	-0xf(%rax), %edi
    0000008c: 	movl	%edi, 0x18(%rsp)
    00000090: 	leal	-0x3(%rax), %edi
    00000093: 	movl	%edi, 0x1c(%rsp)
    00000097: 	leaq	0x808(%rbx), %rdi
    0000009e: 	movq	%rdi, 0x20(%rsp)
    000000a3: 	leaq	0x8(%rbx), %rdi
    000000a7: 	movq	%rdi, 0x28(%rsp)
    000000ac: 	movl	%eax, %edi
    000000ae: 	subl	$0x1, %eax
    000000b1: 	leaq	0x1(%r13,%rax), %r12
    000000b6: 	movl	%edi, %eax
    000000b8: 	leal	-0x10(%rdi), %edi
    000000bb: 	movl	%edi, 0x40(%rsp)
    000000bf: 	subl	$0x4, %eax
    000000c2: 	leaq	0x10(%r13), %rdi
    000000c6: 	movq	%rdi, 0x38(%rsp)
    000000cb: 	movl	%eax, 0x44(%rsp)
.Ltmp412:
    000000cf: 	movq	$0x0, (%rbx)
    000000d6: 	movq	0x20(%rsp), %rax
    000000db: 	movq	%rbx, %rcx
    000000de: 	movq	$0x0, -0x10(%rax)
    000000e6: 	movq	0x28(%rsp), %rdi
    000000eb: 	xorl	%eax, %eax
    000000ed: 	andq	$-0x8, %rdi
    000000f1: 	subq	%rdi, %rcx
    000000f4: 	addl	$0x800, %ecx
    000000fa: 	shrl	$0x3, %ecx
    000000fd: 	rep		stosq	%rax, %es:(%rdi)
    00000100: 	movl	$0x100, %ecx
    00000105: 	movq	%r10, %rdi
    00000108: 	rep		stosq	%rax, %es:(%rdi)
    0000010b: 	movl	$0x100, %ecx
    00000110: 	movq	%r9, %rdi
    00000113: 	rep		stosq	%rax, %es:(%rdi)
    00000116: 	movl	$0x100, %ecx
    0000011b: 	movq	%r8, %rdi
    0000011e: 	rep		stosq	%rax, %es:(%rdi)
    00000121: 	movl	0x10(%rsp), %eax
    00000125: 	testl	%eax, %eax
    00000127: 	jle	.Ltmp404 # Offset: 295
    0000012d: 	cmpq	$0x0, 0x30(%rsp)
    00000133: 	je	.Ltmp404 # Offset: 307
    00000139: 	movq	%r13, %rax
    0000013c: 	nopl	(%rax) # Size: 4
.Ltmp405:
    00000140: 	movzbl	(%rax), %edx
    00000143: 	addq	$0x1, %rax
    00000147: 	addq	$0x1, (%rbx,%rdx,8)
    0000014c: 	cmpq	%rax, %r12
    0000014f: 	jne	.Ltmp405 # Offset: 335
    00000151: 	movl	0x10(%rsp), %ebp
.Ltmp420:
    00000155: 	cmpl	0x18(%rsp), %ebp
    00000159: 	jge	.Ltmp406 # Offset: 345
    0000015f: 	movl	0x40(%rsp), %r15d
    00000164: 	movslq	%ebp, %r14
    00000167: 	movq	%rbx, 0x8(%rsp)
    0000016c: 	leaq	(%r13,%r14), %rdi
    00000171: 	addq	0x38(%rsp), %r14
    00000176: 	subl	%ebp, %r15d
    00000179: 	shrl	$0x4, %r15d
    0000017d: 	movl	%r15d, %eax
    00000180: 	shlq	$0x4, %rax
    00000184: 	addq	%rax, %r14
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp407:
    00000190: 	movl	(%rdi), %esi
    00000192: 	movq	0x8(%rsp), %rbx
    00000197: 	addq	$0x10, %rdi
    0000019b: 	movl	-0xc(%rdi), %ecx
    0000019e: 	movl	-0x8(%rdi), %edx
    000001a1: 	movl	%esi, %r11d
    000001a4: 	movl	-0x4(%rdi), %eax
    000001a7: 	shrl	$0x18, %r11d
    000001ab: 	addq	$0x1, (%rbx,%r11,8)
    000001b0: 	movl	%esi, %r11d
    000001b3: 	movl	%esi, %ebx
    000001b5: 	movzbl	%sil, %esi
    000001b9: 	addq	$0x1, 0x1050(%rsp,%rsi,8)
    000001c2: 	shrl	$0x10, %r11d
    000001c6: 	movzbl	%bh, %ebx
    000001c9: 	movl	%ecx, %esi
    000001cb: 	movzbl	%r11b, %r11d
    000001cf: 	shrl	$0x18, %esi
    000001d2: 	addq	$0x1, 0x50(%rsp,%r11,8)
    000001d8: 	movslq	%ebx, %r11
    000001db: 	movq	0x8(%rsp), %rbx
    000001e0: 	addq	$0x1, 0x850(%rsp,%r11,8)
    000001e9: 	addq	$0x1, (%rbx,%rsi,8)
    000001ee: 	movl	%ecx, %esi
    000001f0: 	shrl	$0x10, %esi
    000001f3: 	movzbl	%sil, %esi
    000001f7: 	addq	$0x1, 0x50(%rsp,%rsi,8)
    000001fd: 	movzbl	%ch, %esi
    00000200: 	movzbl	%cl, %ecx
    00000203: 	addq	$0x1, 0x1050(%rsp,%rcx,8)
    0000020c: 	movl	%edx, %ecx
    0000020e: 	movslq	%esi, %rsi
    00000211: 	addq	$0x1, 0x850(%rsp,%rsi,8)
    0000021a: 	shrl	$0x18, %ecx
    0000021d: 	addq	$0x1, (%rbx,%rcx,8)
    00000222: 	movl	%edx, %ecx
    00000224: 	shrl	$0x10, %ecx
    00000227: 	movzbl	%cl, %ecx
    0000022a: 	addq	$0x1, 0x50(%rsp,%rcx,8)
    00000230: 	movzbl	%dh, %ecx
    00000233: 	movzbl	%dl, %edx
    00000236: 	addq	$0x1, 0x1050(%rsp,%rdx,8)
    0000023f: 	movl	%eax, %edx
    00000241: 	movslq	%ecx, %rcx
    00000244: 	addq	$0x1, 0x850(%rsp,%rcx,8)
    0000024d: 	shrl	$0x18, %edx
    00000250: 	addq	$0x1, (%rbx,%rdx,8)
    00000255: 	movl	%eax, %edx
    00000257: 	shrl	$0x10, %edx
    0000025a: 	movzbl	%dl, %edx
    0000025d: 	addq	$0x1, 0x50(%rsp,%rdx,8)
    00000263: 	movzbl	%ah, %edx
    00000266: 	movzbl	%al, %eax
    00000269: 	addq	$0x1, 0x1050(%rsp,%rax,8)
    00000272: 	movslq	%edx, %rdx
    00000275: 	addq	$0x1, 0x850(%rsp,%rdx,8)
    0000027e: 	cmpq	%rdi, %r14
    00000281: 	jne	.Ltmp407 # Offset: 641
    00000287: 	shll	$0x4, %r15d
    0000028b: 	leal	0x10(%rbp,%r15), %ebp
.Ltmp406:
    00000290: 	cmpl	0x1c(%rsp), %ebp
    00000294: 	jge	.Ltmp408 # Offset: 660
    00000296: 	movl	0x44(%rsp), %edi
    0000029a: 	movslq	%ebp, %rax
    0000029d: 	leaq	(%r13,%rax), %rcx
    000002a2: 	leaq	0x4(%r13,%rax), %rax
    000002a7: 	subl	%ebp, %edi
    000002a9: 	shrl	$0x2, %edi
    000002ac: 	movl	%edi, %edx
    000002ae: 	leaq	(%rax,%rdx,4), %rsi
    000002b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp409:
    000002b8: 	movl	(%rcx), %eax
    000002ba: 	addq	$0x4, %rcx
    000002be: 	movl	%eax, %edx
    000002c0: 	shrl	$0x18, %edx
    000002c3: 	addq	$0x1, (%rbx,%rdx,8)
    000002c8: 	movl	%eax, %edx
    000002ca: 	shrl	$0x10, %edx
    000002cd: 	movzbl	%dl, %edx
    000002d0: 	addq	$0x1, 0x50(%rsp,%rdx,8)
    000002d6: 	movzbl	%ah, %edx
    000002d9: 	movzbl	%al, %eax
    000002dc: 	addq	$0x1, 0x1050(%rsp,%rax,8)
    000002e5: 	movslq	%edx, %rdx
    000002e8: 	addq	$0x1, 0x850(%rsp,%rdx,8)
    000002f1: 	cmpq	%rcx, %rsi
    000002f4: 	jne	.Ltmp409 # Offset: 756
    000002f6: 	leal	0x4(%rbp,%rdi,4), %ebp
.Ltmp408:
    000002fa: 	cmpl	%ebp, 0x10(%rsp)
    000002fe: 	jle	.Ltmp410 # Offset: 766
    00000300: 	movslq	%ebp, %rax
    00000303: 	movl	0x10(%rsp), %edi
    00000307: 	movzbl	(%r13,%rax), %eax
    0000030d: 	addq	$0x1, (%rbx,%rax,8)
    00000312: 	leal	0x1(%rbp), %eax
    00000315: 	cmpl	%edi, %eax
    00000317: 	jge	.Ltmp410 # Offset: 791
    00000319: 	cltq
    0000031b: 	movzbl	(%r13,%rax), %eax
    00000321: 	addq	$0x1, (%rbx,%rax,8)
    00000326: 	leal	0x2(%rbp), %eax
    00000329: 	cmpl	%eax, %edi
    0000032b: 	jle	.Ltmp410 # Offset: 811
    0000032d: 	cltq
    0000032f: 	addl	$0x3, %ebp
    00000332: 	movzbl	(%r13,%rax), %eax
    00000338: 	addq	$0x1, (%rbx,%rax,8)
    0000033d: 	cmpl	%ebp, %edi
    0000033f: 	jle	.Ltmp410 # Offset: 831
    00000341: 	movslq	%ebp, %rbp
    00000344: 	movzbl	(%r13,%rbp), %eax
    0000034a: 	addq	$0x1, (%rbx,%rax,8)
.Ltmp410:
    0000034f: 	xorl	%eax, %eax
    00000351: 	nopl	(%rax) # Size: 7
.Ltmp411:
    00000358: 	movdqu	(%rbx,%rax), %xmm0
    0000035d: 	paddq	(%r10,%rax), %xmm0
    00000363: 	paddq	(%r9,%rax), %xmm0
    00000369: 	paddq	(%r8,%rax), %xmm0
    0000036f: 	movups	%xmm0, (%rbx,%rax)
    00000373: 	addq	$0x10, %rax
    00000377: 	cmpq	$0x800, %rax
    0000037d: 	jne	.Ltmp411 # Offset: 893
    0000037f: 	addl	$0x1, 0x14(%rsp)
    00000384: 	movl	0x14(%rsp), %eax
    00000388: 	cmpl	%eax, iterations(%rip)
    0000038e: 	jg	.Ltmp412 # Offset: 910
.Ltmp403:
    00000394: 	leaq	referenceHistogram(%rip), %rbp
    0000039b: 	xorl	%r12d, %r12d
    0000039e: 	jmp	.Ltmp413 # Offset: 926
.Ltmp415:
    000003a0: 	addq	$0x1, %r12
    000003a4: 	addq	$0x8, %rbx
    000003a8: 	addq	$0x8, %rbp
    000003ac: 	cmpq	$0x100, %r12
    000003b3: 	je	.Ltmp414 # Offset: 947
.Ltmp413:
    000003b9: 	movq	(%rbp), %rax
    000003bd: 	cmpq	%rax, (%rbx)
    000003c0: 	je	.Ltmp415 # Offset: 960
    000003c2: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    000003c9: 	movl	$0x5, %edx
    000003ce: 	leaq	DATAat0x108e4(%rip), %rsi
    000003d5: 	movq	%r13, %rdi
    000003d8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 984
    000003dd: 	cmpq	$0x0, 0x48(%rsp)
    000003e3: 	je	.Ltmp416 # Offset: 995
    000003e9: 	movq	0x48(%rsp), %r15
    000003ee: 	movq	%r15, %rdi
    000003f1: 	callq	strlen@PLT # Offset: 1009
    000003f6: 	movq	%r15, %rsi
    000003f9: 	movq	%r13, %rdi
    000003fc: 	movq	%rax, %rdx
    000003ff: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1023
.Ltmp422:
    00000404: 	movl	$0xf, %edx
    00000409: 	leaq	DATAat0x108ea(%rip), %rsi
    00000410: 	movq	%r13, %rdi
    00000413: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1043
    00000418: 	movq	%r12, %rsi
    0000041b: 	movq	%r13, %rdi
    0000041e: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 1054
    00000423: 	movl	$0xb, %edx
    00000428: 	leaq	DATAat0x108fa(%rip), %rsi
    0000042f: 	movq	%rax, %rdi
    00000432: 	movq	%rax, %r12
    00000435: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1077
    0000043a: 	movq	(%rbp), %rsi
    0000043e: 	movq	%r12, %rdi
    00000441: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 1089
    00000446: 	movl	$0x4, %edx
    0000044b: 	leaq	DATAat0x10906(%rip), %rsi
    00000452: 	movq	%rax, %rdi
    00000455: 	movq	%rax, %rbp
    00000458: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1112
    0000045d: 	movq	(%rbx), %rsi
    00000460: 	movq	%rbp, %rdi
    00000463: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 1123
    00000468: 	movl	$0x2, %edx
    0000046d: 	leaq	DATAat0x1090b(%rip), %rsi
    00000474: 	movq	%rax, %rbp
    00000477: 	movq	%rax, %rdi
    0000047a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1146
    0000047f: 	movq	(%rbp), %rax
    00000483: 	movq	-0x18(%rax), %rax
    00000487: 	movq	0xf0(%rbp,%rax), %r12
    0000048f: 	testq	%r12, %r12
    00000492: 	je	.Ltmp417 # Offset: 1170
    00000498: 	cmpb	$0x0, 0x38(%r12)
    0000049e: 	je	.Ltmp418 # Offset: 1182
    000004a0: 	movsbl	0x43(%r12), %esi
    000004a6: 	movq	%rbp, %rdi
    000004a9: 	callq	_ZNSo3putEc@PLT # Offset: 1193
    000004ae: 	movq	%rax, %rdi
    000004b1: 	callq	_ZNSo5flushEv@PLT # Offset: 1201
.Ltmp414:
    000004b6: 	callq	clock@PLT # Offset: 1206
    000004bb: 	movq	%rax, end_time(%rip)
    000004c2: 	movq	0x1858(%rsp), %rdx
    000004ca: 	subq	%fs:0x28, %rdx
    000004d3: 	jne	.Ltmp419 # Offset: 1235
    000004d9: 	subq	start_time(%rip), %rax
    000004e0: 	pxor	%xmm0, %xmm0
    000004e4: 	movq	0x48(%rsp), %rdi
    000004e9: 	cvtsi2sd	%rax, %xmm0
    000004ee: 	divsd	DATAat0x10920(%rip), %xmm0
    000004f6: 	addq	$0x1868, %rsp
    000004fd: 	popq	%rbx
    000004fe: 	popq	%rbp
    000004ff: 	popq	%r12
    00000501: 	popq	%r13
    00000503: 	popq	%r14
    00000505: 	popq	%r15
    00000507: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1287
.Ltmp404:
    0000050c: 	xorl	%ebp, %ebp
    0000050e: 	jmp	.Ltmp420 # Offset: 1294
.Ltmp418:
    00000513: 	movq	%r12, %rdi
    00000516: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 1302
    0000051b: 	movq	(%r12), %rax
    0000051f: 	movl	$0xa, %esi
    00000524: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    0000052b: 	movq	0x30(%rax), %rax
    0000052f: 	cmpq	%rdx, %rax
    00000532: 	jne	.Ltmp421 # Offset: 1330
.Ltmp423:
    00000534: 	movq	%rbp, %rdi
    00000537: 	callq	_ZNSo3putEc@PLT # Offset: 1335
    0000053c: 	movq	%rax, %rdi
    0000053f: 	callq	_ZNSo5flushEv@PLT # Offset: 1343
    00000544: 	jmp	.Ltmp414 # Offset: 1348
.Ltmp416:
    00000549: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000550: 	movq	-0x18(%rax), %rdi
    00000554: 	addq	%r13, %rdi
    00000557: 	movl	0x20(%rdi), %esi
    0000055a: 	orl	$0x1, %esi
    0000055d: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1373
    00000562: 	jmp	.Ltmp422 # Offset: 1378
.Ltmp421:
    00000567: 	movq	%r12, %rdi
    0000056a: 	callq	*%rax # Offset: 1386
    0000056c: 	movsbl	%al, %esi
    0000056f: 	jmp	.Ltmp423 # Offset: 1391
.Ltmp419:
    00000571: 	callq	__stack_chk_fail@PLT # Offset: 1393
.Ltmp417:
    00000576: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 1398
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_histogram6ImEvPKhiPT_PKc"

Binary Function "_Z15test_histogram2IttEvPKT_iPT0_PKc" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x7a40
  Size        : 0x2c8
  MaxSize     : 0x2d0
  Offset      : 0x7a40
  Section     : .text
  Orc Section : .local.text._Z15test_histogram2IttEvPKT_iPT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdx, %rbx
    00000017: 	subq	$0x18, %rsp
    0000001b: 	movq	%rcx, 0x8(%rsp)
    00000020: 	callq	clock@PLT # Offset: 32
    00000025: 	movq	%rax, start_time(%rip)
    0000002c: 	movl	iterations(%rip), %eax
    00000032: 	testl	%eax, %eax
    00000034: 	jle	.Ltmp424 # Offset: 52
    0000003a: 	leal	-0x4(%r14), %eax
    0000003e: 	xorl	%r12d, %r12d
    00000041: 	shrl	$0x2, %eax
    00000044: 	movl	%eax, %edx
    00000046: 	leal	0x4(,%rax,4), %ebp
    0000004d: 	leaq	0x8(%r15,%rdx,8), %r13
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp428:
    00000058: 	xorl	%esi, %esi
    0000005a: 	movl	$0x20000, %edx
    0000005f: 	movq	%rbx, %rdi
    00000062: 	callq	memset@PLT # Offset: 98
    00000067: 	cmpl	$0x3, %r14d
    0000006b: 	jle	.Ltmp425 # Offset: 107
    00000071: 	movq	%r15, %rax
    00000074: 	nopl	(%rax) # Size: 4
.Ltmp426:
    00000078: 	movzwl	0x2(%rax), %esi
    0000007c: 	movzwl	0x4(%rax), %ecx
    00000080: 	addq	$0x8, %rax
    00000084: 	movzwl	-0x2(%rax), %edx
    00000088: 	movzwl	-0x8(%rax), %edi
    0000008c: 	addw	$0x1, (%rbx,%rdi,2)
    00000091: 	addw	$0x1, (%rbx,%rsi,2)
    00000096: 	addw	$0x1, (%rbx,%rcx,2)
    0000009b: 	addw	$0x1, (%rbx,%rdx,2)
    000000a0: 	cmpq	%rax, %r13
    000000a3: 	jne	.Ltmp426 # Offset: 163
    000000a5: 	movl	%ebp, %eax
.Ltmp435:
    000000a7: 	cmpl	%eax, %r14d
    000000aa: 	jle	.Ltmp427 # Offset: 170
    000000ac: 	movslq	%eax, %rdx
    000000af: 	leaq	(%rdx,%rdx), %rcx
    000000b3: 	movzwl	(%r15,%rdx,2), %edx
    000000b8: 	addw	$0x1, (%rbx,%rdx,2)
    000000bd: 	leal	0x1(%rax), %edx
    000000c0: 	cmpl	%edx, %r14d
    000000c3: 	jle	.Ltmp427 # Offset: 195
    000000c5: 	movzwl	0x2(%r15,%rcx), %edx
    000000cb: 	addw	$0x1, (%rbx,%rdx,2)
    000000d0: 	leal	0x2(%rax), %edx
    000000d3: 	cmpl	%edx, %r14d
    000000d6: 	jle	.Ltmp427 # Offset: 214
    000000d8: 	movzwl	0x4(%r15,%rcx), %edx
    000000de: 	addl	$0x3, %eax
    000000e1: 	addw	$0x1, (%rbx,%rdx,2)
    000000e6: 	cmpl	%eax, %r14d
    000000e9: 	jle	.Ltmp427 # Offset: 233
    000000eb: 	movzwl	0x6(%r15,%rcx), %eax
    000000f1: 	addw	$0x1, (%rbx,%rax,2)
.Ltmp427:
    000000f6: 	addl	$0x1, %r12d
    000000fa: 	cmpl	%r12d, iterations(%rip)
    00000101: 	jg	.Ltmp428 # Offset: 257
.Ltmp424:
    00000107: 	leaq	referenceHistogramS(%rip), %rbp
    0000010e: 	xorl	%r13d, %r13d
    00000111: 	jmp	.Ltmp429 # Offset: 273
    00000113: 	nopl	(%rax,%rax) # Size: 5
.Ltmp431:
    00000118: 	addq	$0x1, %r13
    0000011c: 	addq	$0x2, %rbx
    00000120: 	addq	$0x8, %rbp
    00000124: 	cmpq	$0x10000, %r13
    0000012b: 	je	.Ltmp430 # Offset: 299
.Ltmp429:
    00000131: 	movzwl	(%rbp), %eax
    00000135: 	cmpw	%ax, (%rbx)
    00000138: 	je	.Ltmp431 # Offset: 312
    0000013a: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000141: 	movl	$0x5, %edx
    00000146: 	leaq	DATAat0x108e4(%rip), %rsi
    0000014d: 	movq	%r14, %rdi
    00000150: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 336
    00000155: 	cmpq	$0x0, 0x8(%rsp)
    0000015b: 	je	.Ltmp432 # Offset: 347
    00000161: 	movq	0x8(%rsp), %r15
    00000166: 	movq	%r15, %rdi
    00000169: 	callq	strlen@PLT # Offset: 361
    0000016e: 	movq	%r15, %rsi
    00000171: 	movq	%r14, %rdi
    00000174: 	movq	%rax, %rdx
    00000177: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 375
.Ltmp437:
    0000017c: 	movl	$0xf, %edx
    00000181: 	leaq	DATAat0x108ea(%rip), %rsi
    00000188: 	movq	%r14, %rdi
    0000018b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 395
    00000190: 	movq	%r13, %rsi
    00000193: 	movq	%r14, %rdi
    00000196: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 406
    0000019b: 	movl	$0xb, %edx
    000001a0: 	leaq	DATAat0x108fa(%rip), %rsi
    000001a7: 	movq	%rax, %rdi
    000001aa: 	movq	%rax, %r13
    000001ad: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 429
    000001b2: 	movq	(%rbp), %rsi
    000001b6: 	movq	%r13, %rdi
    000001b9: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 441
    000001be: 	movl	$0x4, %edx
    000001c3: 	leaq	DATAat0x10906(%rip), %rsi
    000001ca: 	movq	%rax, %rdi
    000001cd: 	movq	%rax, %rbp
    000001d0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 464
    000001d5: 	movzwl	(%rbx), %esi
    000001d8: 	movq	%rbp, %rdi
    000001db: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 475
    000001e0: 	movl	$0x2, %edx
    000001e5: 	leaq	DATAat0x1090b(%rip), %rsi
    000001ec: 	movq	%rax, %rbp
    000001ef: 	movq	%rax, %rdi
    000001f2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 498
    000001f7: 	movq	(%rbp), %rax
    000001fb: 	movq	-0x18(%rax), %rax
    000001ff: 	movq	0xf0(%rbp,%rax), %r13
    00000207: 	testq	%r13, %r13
    0000020a: 	je	.Ltmp433 # Offset: 522
    00000210: 	cmpb	$0x0, 0x38(%r13)
    00000215: 	je	.Ltmp434 # Offset: 533
    00000217: 	movsbl	0x43(%r13), %esi
.Ltmp436:
    0000021c: 	movq	%rbp, %rdi
    0000021f: 	callq	_ZNSo3putEc@PLT # Offset: 543
    00000224: 	movq	%rax, %rdi
    00000227: 	callq	_ZNSo5flushEv@PLT # Offset: 551
.Ltmp430:
    0000022c: 	callq	clock@PLT # Offset: 556
    00000231: 	pxor	%xmm0, %xmm0
    00000235: 	movq	0x8(%rsp), %rdi
    0000023a: 	movq	%rax, end_time(%rip)
    00000241: 	subq	start_time(%rip), %rax
    00000248: 	cvtsi2sd	%rax, %xmm0
    0000024d: 	divsd	DATAat0x10920(%rip), %xmm0
    00000255: 	addq	$0x18, %rsp
    00000259: 	popq	%rbx
    0000025a: 	popq	%rbp
    0000025b: 	popq	%r12
    0000025d: 	popq	%r13
    0000025f: 	popq	%r14
    00000261: 	popq	%r15
    00000263: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 611
    00000268: 	nopl	(%rax,%rax) # Size: 8
.Ltmp425:
    00000270: 	xorl	%eax, %eax
    00000272: 	jmp	.Ltmp435 # Offset: 626
.Ltmp434:
    00000277: 	movq	%r13, %rdi
    0000027a: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 634
    0000027f: 	movq	(%r13), %rax
    00000283: 	movl	$0xa, %esi
    00000288: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    0000028f: 	movq	0x30(%rax), %rax
    00000293: 	cmpq	%rdx, %rax
    00000296: 	je	.Ltmp436 # Offset: 662
    00000298: 	movq	%r13, %rdi
    0000029b: 	callq	*%rax # Offset: 667
    0000029d: 	movsbl	%al, %esi
    000002a0: 	jmp	.Ltmp436 # Offset: 672
.Ltmp432:
    000002a5: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000002ac: 	movq	-0x18(%rax), %rdi
    000002b0: 	addq	%r14, %rdi
    000002b3: 	movl	0x20(%rdi), %esi
    000002b6: 	orl	$0x1, %esi
    000002b9: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 697
    000002be: 	jmp	.Ltmp437 # Offset: 702
.Ltmp433:
    000002c3: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 707
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_histogram2IttEvPKT_iPT0_PKc"

Binary Function "_Z15test_histogram2ItjEvPKT_iPT0_PKc" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x7d10
  Size        : 0x2b8
  MaxSize     : 0x2c0
  Offset      : 0x7d10
  Section     : .text
  Orc Section : .local.text._Z15test_histogram2ItjEvPKT_iPT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdx, %rbx
    00000017: 	subq	$0x18, %rsp
    0000001b: 	movq	%rcx, 0x8(%rsp)
    00000020: 	callq	clock@PLT # Offset: 32
    00000025: 	movq	%rax, start_time(%rip)
    0000002c: 	movl	iterations(%rip), %eax
    00000032: 	testl	%eax, %eax
    00000034: 	jle	.Ltmp438 # Offset: 52
    0000003a: 	leal	-0x4(%r14), %eax
    0000003e: 	xorl	%r12d, %r12d
    00000041: 	shrl	$0x2, %eax
    00000044: 	movl	%eax, %edx
    00000046: 	leal	0x4(,%rax,4), %ebp
    0000004d: 	leaq	0x8(%r15,%rdx,8), %r13
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp442:
    00000058: 	xorl	%esi, %esi
    0000005a: 	movl	$0x40000, %edx
    0000005f: 	movq	%rbx, %rdi
    00000062: 	callq	memset@PLT # Offset: 98
    00000067: 	cmpl	$0x3, %r14d
    0000006b: 	jle	.Ltmp439 # Offset: 107
    00000071: 	movq	%r15, %rax
    00000074: 	nopl	(%rax) # Size: 4
.Ltmp440:
    00000078: 	movzwl	0x2(%rax), %esi
    0000007c: 	movzwl	0x4(%rax), %ecx
    00000080: 	addq	$0x8, %rax
    00000084: 	movzwl	-0x2(%rax), %edx
    00000088: 	movzwl	-0x8(%rax), %edi
    0000008c: 	addl	$0x1, (%rbx,%rdi,4)
    00000090: 	addl	$0x1, (%rbx,%rsi,4)
    00000094: 	addl	$0x1, (%rbx,%rcx,4)
    00000098: 	addl	$0x1, (%rbx,%rdx,4)
    0000009c: 	cmpq	%rax, %r13
    0000009f: 	jne	.Ltmp440 # Offset: 159
    000000a1: 	movl	%ebp, %eax
.Ltmp449:
    000000a3: 	cmpl	%eax, %r14d
    000000a6: 	jle	.Ltmp441 # Offset: 166
    000000a8: 	movslq	%eax, %rdx
    000000ab: 	leaq	(%rdx,%rdx), %rcx
    000000af: 	movzwl	(%r15,%rdx,2), %edx
    000000b4: 	addl	$0x1, (%rbx,%rdx,4)
    000000b8: 	leal	0x1(%rax), %edx
    000000bb: 	cmpl	%edx, %r14d
    000000be: 	jle	.Ltmp441 # Offset: 190
    000000c0: 	movzwl	0x2(%r15,%rcx), %edx
    000000c6: 	addl	$0x1, (%rbx,%rdx,4)
    000000ca: 	leal	0x2(%rax), %edx
    000000cd: 	cmpl	%edx, %r14d
    000000d0: 	jle	.Ltmp441 # Offset: 208
    000000d2: 	movzwl	0x4(%r15,%rcx), %edx
    000000d8: 	addl	$0x3, %eax
    000000db: 	addl	$0x1, (%rbx,%rdx,4)
    000000df: 	cmpl	%eax, %r14d
    000000e2: 	jle	.Ltmp441 # Offset: 226
    000000e4: 	movzwl	0x6(%r15,%rcx), %eax
    000000ea: 	addl	$0x1, (%rbx,%rax,4)
.Ltmp441:
    000000ee: 	addl	$0x1, %r12d
    000000f2: 	cmpl	%r12d, iterations(%rip)
    000000f9: 	jg	.Ltmp442 # Offset: 249
.Ltmp438:
    000000ff: 	leaq	referenceHistogramS(%rip), %rbp
    00000106: 	xorl	%r13d, %r13d
    00000109: 	jmp	.Ltmp443 # Offset: 265
    0000010b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp445:
    00000110: 	addq	$0x1, %r13
    00000114: 	addq	$0x4, %rbx
    00000118: 	addq	$0x8, %rbp
    0000011c: 	cmpq	$0x10000, %r13
    00000123: 	je	.Ltmp444 # Offset: 291
.Ltmp443:
    00000129: 	movl	(%rbp), %eax
    0000012c: 	cmpl	%eax, (%rbx)
    0000012e: 	je	.Ltmp445 # Offset: 302
    00000130: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000137: 	movl	$0x5, %edx
    0000013c: 	leaq	DATAat0x108e4(%rip), %rsi
    00000143: 	movq	%r14, %rdi
    00000146: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 326
    0000014b: 	cmpq	$0x0, 0x8(%rsp)
    00000151: 	je	.Ltmp446 # Offset: 337
    00000157: 	movq	0x8(%rsp), %r15
    0000015c: 	movq	%r15, %rdi
    0000015f: 	callq	strlen@PLT # Offset: 351
    00000164: 	movq	%r15, %rsi
    00000167: 	movq	%r14, %rdi
    0000016a: 	movq	%rax, %rdx
    0000016d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 365
.Ltmp451:
    00000172: 	movl	$0xf, %edx
    00000177: 	leaq	DATAat0x108ea(%rip), %rsi
    0000017e: 	movq	%r14, %rdi
    00000181: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 385
    00000186: 	movq	%r13, %rsi
    00000189: 	movq	%r14, %rdi
    0000018c: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 396
    00000191: 	movl	$0xb, %edx
    00000196: 	leaq	DATAat0x108fa(%rip), %rsi
    0000019d: 	movq	%rax, %rdi
    000001a0: 	movq	%rax, %r13
    000001a3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 419
    000001a8: 	movq	(%rbp), %rsi
    000001ac: 	movq	%r13, %rdi
    000001af: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 431
    000001b4: 	movl	$0x4, %edx
    000001b9: 	leaq	DATAat0x10906(%rip), %rsi
    000001c0: 	movq	%rax, %rdi
    000001c3: 	movq	%rax, %rbp
    000001c6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 454
    000001cb: 	movl	(%rbx), %esi
    000001cd: 	movq	%rbp, %rdi
    000001d0: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 464
    000001d5: 	movl	$0x2, %edx
    000001da: 	leaq	DATAat0x1090b(%rip), %rsi
    000001e1: 	movq	%rax, %rbp
    000001e4: 	movq	%rax, %rdi
    000001e7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 487
    000001ec: 	movq	(%rbp), %rax
    000001f0: 	movq	-0x18(%rax), %rax
    000001f4: 	movq	0xf0(%rbp,%rax), %r13
    000001fc: 	testq	%r13, %r13
    000001ff: 	je	.Ltmp447 # Offset: 511
    00000205: 	cmpb	$0x0, 0x38(%r13)
    0000020a: 	je	.Ltmp448 # Offset: 522
    0000020c: 	movsbl	0x43(%r13), %esi
.Ltmp450:
    00000211: 	movq	%rbp, %rdi
    00000214: 	callq	_ZNSo3putEc@PLT # Offset: 532
    00000219: 	movq	%rax, %rdi
    0000021c: 	callq	_ZNSo5flushEv@PLT # Offset: 540
.Ltmp444:
    00000221: 	callq	clock@PLT # Offset: 545
    00000226: 	pxor	%xmm0, %xmm0
    0000022a: 	movq	0x8(%rsp), %rdi
    0000022f: 	movq	%rax, end_time(%rip)
    00000236: 	subq	start_time(%rip), %rax
    0000023d: 	cvtsi2sd	%rax, %xmm0
    00000242: 	divsd	DATAat0x10920(%rip), %xmm0
    0000024a: 	addq	$0x18, %rsp
    0000024e: 	popq	%rbx
    0000024f: 	popq	%rbp
    00000250: 	popq	%r12
    00000252: 	popq	%r13
    00000254: 	popq	%r14
    00000256: 	popq	%r15
    00000258: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 600
    0000025d: 	nopl	(%rax) # Size: 3
.Ltmp439:
    00000260: 	xorl	%eax, %eax
    00000262: 	jmp	.Ltmp449 # Offset: 610
.Ltmp448:
    00000267: 	movq	%r13, %rdi
    0000026a: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 618
    0000026f: 	movq	(%r13), %rax
    00000273: 	movl	$0xa, %esi
    00000278: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    0000027f: 	movq	0x30(%rax), %rax
    00000283: 	cmpq	%rdx, %rax
    00000286: 	je	.Ltmp450 # Offset: 646
    00000288: 	movq	%r13, %rdi
    0000028b: 	callq	*%rax # Offset: 651
    0000028d: 	movsbl	%al, %esi
    00000290: 	jmp	.Ltmp450 # Offset: 656
.Ltmp446:
    00000295: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000029c: 	movq	-0x18(%rax), %rdi
    000002a0: 	addq	%r14, %rdi
    000002a3: 	movl	0x20(%rdi), %esi
    000002a6: 	orl	$0x1, %esi
    000002a9: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 681
    000002ae: 	jmp	.Ltmp451 # Offset: 686
.Ltmp447:
    000002b3: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 691
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_histogram2ItjEvPKT_iPT0_PKc"

Binary Function "_Z15test_histogram2ItmEvPKT_iPT0_PKc" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x7fd0
  Size        : 0x2c8
  MaxSize     : 0x2d0
  Offset      : 0x7fd0
  Section     : .text
  Orc Section : .local.text._Z15test_histogram2ItmEvPKT_iPT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdx, %rbx
    00000017: 	subq	$0x18, %rsp
    0000001b: 	movq	%rcx, 0x8(%rsp)
    00000020: 	callq	clock@PLT # Offset: 32
    00000025: 	movq	%rax, start_time(%rip)
    0000002c: 	movl	iterations(%rip), %eax
    00000032: 	testl	%eax, %eax
    00000034: 	jle	.Ltmp452 # Offset: 52
    0000003a: 	leal	-0x4(%r14), %eax
    0000003e: 	xorl	%r12d, %r12d
    00000041: 	shrl	$0x2, %eax
    00000044: 	movl	%eax, %edx
    00000046: 	leal	0x4(,%rax,4), %ebp
    0000004d: 	leaq	0x8(%r15,%rdx,8), %r13
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp456:
    00000058: 	xorl	%esi, %esi
    0000005a: 	movl	$0x80000, %edx
    0000005f: 	movq	%rbx, %rdi
    00000062: 	callq	memset@PLT # Offset: 98
    00000067: 	cmpl	$0x3, %r14d
    0000006b: 	jle	.Ltmp453 # Offset: 107
    00000071: 	movq	%r15, %rax
    00000074: 	nopl	(%rax) # Size: 4
.Ltmp454:
    00000078: 	movzwl	0x2(%rax), %esi
    0000007c: 	movzwl	0x4(%rax), %ecx
    00000080: 	addq	$0x8, %rax
    00000084: 	movzwl	-0x2(%rax), %edx
    00000088: 	movzwl	-0x8(%rax), %edi
    0000008c: 	addq	$0x1, (%rbx,%rdi,8)
    00000091: 	addq	$0x1, (%rbx,%rsi,8)
    00000096: 	addq	$0x1, (%rbx,%rcx,8)
    0000009b: 	addq	$0x1, (%rbx,%rdx,8)
    000000a0: 	cmpq	%rax, %r13
    000000a3: 	jne	.Ltmp454 # Offset: 163
    000000a5: 	movl	%ebp, %eax
.Ltmp463:
    000000a7: 	cmpl	%eax, %r14d
    000000aa: 	jle	.Ltmp455 # Offset: 170
    000000ac: 	movslq	%eax, %rdx
    000000af: 	leaq	(%rdx,%rdx), %rcx
    000000b3: 	movzwl	(%r15,%rdx,2), %edx
    000000b8: 	addq	$0x1, (%rbx,%rdx,8)
    000000bd: 	leal	0x1(%rax), %edx
    000000c0: 	cmpl	%edx, %r14d
    000000c3: 	jle	.Ltmp455 # Offset: 195
    000000c5: 	movzwl	0x2(%r15,%rcx), %edx
    000000cb: 	addq	$0x1, (%rbx,%rdx,8)
    000000d0: 	leal	0x2(%rax), %edx
    000000d3: 	cmpl	%edx, %r14d
    000000d6: 	jle	.Ltmp455 # Offset: 214
    000000d8: 	movzwl	0x4(%r15,%rcx), %edx
    000000de: 	addl	$0x3, %eax
    000000e1: 	addq	$0x1, (%rbx,%rdx,8)
    000000e6: 	cmpl	%eax, %r14d
    000000e9: 	jle	.Ltmp455 # Offset: 233
    000000eb: 	movzwl	0x6(%r15,%rcx), %eax
    000000f1: 	addq	$0x1, (%rbx,%rax,8)
.Ltmp455:
    000000f6: 	addl	$0x1, %r12d
    000000fa: 	cmpl	%r12d, iterations(%rip)
    00000101: 	jg	.Ltmp456 # Offset: 257
.Ltmp452:
    00000107: 	leaq	referenceHistogramS(%rip), %rbp
    0000010e: 	xorl	%r13d, %r13d
    00000111: 	jmp	.Ltmp457 # Offset: 273
    00000113: 	nopl	(%rax,%rax) # Size: 5
.Ltmp459:
    00000118: 	addq	$0x1, %r13
    0000011c: 	addq	$0x8, %rbx
    00000120: 	addq	$0x8, %rbp
    00000124: 	cmpq	$0x10000, %r13
    0000012b: 	je	.Ltmp458 # Offset: 299
.Ltmp457:
    00000131: 	movq	(%rbp), %rax
    00000135: 	cmpq	%rax, (%rbx)
    00000138: 	je	.Ltmp459 # Offset: 312
    0000013a: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000141: 	movl	$0x5, %edx
    00000146: 	leaq	DATAat0x108e4(%rip), %rsi
    0000014d: 	movq	%r14, %rdi
    00000150: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 336
    00000155: 	cmpq	$0x0, 0x8(%rsp)
    0000015b: 	je	.Ltmp460 # Offset: 347
    00000161: 	movq	0x8(%rsp), %r15
    00000166: 	movq	%r15, %rdi
    00000169: 	callq	strlen@PLT # Offset: 361
    0000016e: 	movq	%r15, %rsi
    00000171: 	movq	%r14, %rdi
    00000174: 	movq	%rax, %rdx
    00000177: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 375
.Ltmp465:
    0000017c: 	movl	$0xf, %edx
    00000181: 	leaq	DATAat0x108ea(%rip), %rsi
    00000188: 	movq	%r14, %rdi
    0000018b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 395
    00000190: 	movq	%r13, %rsi
    00000193: 	movq	%r14, %rdi
    00000196: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 406
    0000019b: 	movl	$0xb, %edx
    000001a0: 	leaq	DATAat0x108fa(%rip), %rsi
    000001a7: 	movq	%rax, %rdi
    000001aa: 	movq	%rax, %r13
    000001ad: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 429
    000001b2: 	movq	(%rbp), %rsi
    000001b6: 	movq	%r13, %rdi
    000001b9: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 441
    000001be: 	movl	$0x4, %edx
    000001c3: 	leaq	DATAat0x10906(%rip), %rsi
    000001ca: 	movq	%rax, %rdi
    000001cd: 	movq	%rax, %rbp
    000001d0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 464
    000001d5: 	movq	(%rbx), %rsi
    000001d8: 	movq	%rbp, %rdi
    000001db: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 475
    000001e0: 	movl	$0x2, %edx
    000001e5: 	leaq	DATAat0x1090b(%rip), %rsi
    000001ec: 	movq	%rax, %rbp
    000001ef: 	movq	%rax, %rdi
    000001f2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 498
    000001f7: 	movq	(%rbp), %rax
    000001fb: 	movq	-0x18(%rax), %rax
    000001ff: 	movq	0xf0(%rbp,%rax), %r13
    00000207: 	testq	%r13, %r13
    0000020a: 	je	.Ltmp461 # Offset: 522
    00000210: 	cmpb	$0x0, 0x38(%r13)
    00000215: 	je	.Ltmp462 # Offset: 533
    00000217: 	movsbl	0x43(%r13), %esi
.Ltmp464:
    0000021c: 	movq	%rbp, %rdi
    0000021f: 	callq	_ZNSo3putEc@PLT # Offset: 543
    00000224: 	movq	%rax, %rdi
    00000227: 	callq	_ZNSo5flushEv@PLT # Offset: 551
.Ltmp458:
    0000022c: 	callq	clock@PLT # Offset: 556
    00000231: 	pxor	%xmm0, %xmm0
    00000235: 	movq	0x8(%rsp), %rdi
    0000023a: 	movq	%rax, end_time(%rip)
    00000241: 	subq	start_time(%rip), %rax
    00000248: 	cvtsi2sd	%rax, %xmm0
    0000024d: 	divsd	DATAat0x10920(%rip), %xmm0
    00000255: 	addq	$0x18, %rsp
    00000259: 	popq	%rbx
    0000025a: 	popq	%rbp
    0000025b: 	popq	%r12
    0000025d: 	popq	%r13
    0000025f: 	popq	%r14
    00000261: 	popq	%r15
    00000263: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 611
    00000268: 	nopl	(%rax,%rax) # Size: 8
.Ltmp453:
    00000270: 	xorl	%eax, %eax
    00000272: 	jmp	.Ltmp463 # Offset: 626
.Ltmp462:
    00000277: 	movq	%r13, %rdi
    0000027a: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 634
    0000027f: 	movq	(%r13), %rax
    00000283: 	movl	$0xa, %esi
    00000288: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    0000028f: 	movq	0x30(%rax), %rax
    00000293: 	cmpq	%rdx, %rax
    00000296: 	je	.Ltmp464 # Offset: 662
    00000298: 	movq	%r13, %rdi
    0000029b: 	callq	*%rax # Offset: 667
    0000029d: 	movsbl	%al, %esi
    000002a0: 	jmp	.Ltmp464 # Offset: 672
.Ltmp460:
    000002a5: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000002ac: 	movq	-0x18(%rax), %rdi
    000002b0: 	addq	%r14, %rdi
    000002b3: 	movl	0x20(%rdi), %esi
    000002b6: 	orl	$0x1, %esi
    000002b9: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 697
    000002be: 	jmp	.Ltmp465 # Offset: 702
.Ltmp461:
    000002c3: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 707
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_histogram2ItmEvPKT_iPT0_PKc"

Binary Function "_Z15test_histogram4IttEvPKT_iPT0_PKc" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x82a0
  Size        : 0x359
  MaxSize     : 0x360
  Offset      : 0x82a0
  Section     : .text
  Orc Section : .local.text._Z15test_histogram4IttEvPKT_iPT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x20000(%rsp), %r11
.Ltmp466:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp466 # Offset: 37
    00000027: 	subq	$0x28, %rsp
    0000002b: 	movq	%rcx, 0x8(%rsp)
    00000030: 	movq	%rdi, %rbp
    00000033: 	movl	%esi, %r15d
    00000036: 	movq	%rdx, %rbx
    00000039: 	movq	%fs:0x28, %rax
    00000042: 	movq	%rax, 0x20018(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	callq	clock@PLT # Offset: 76
    00000051: 	movq	%rax, start_time(%rip)
    00000058: 	movl	iterations(%rip), %eax
    0000005e: 	testl	%eax, %eax
    00000060: 	jle	.Ltmp467 # Offset: 96
    00000066: 	leal	-0x4(%r15), %eax
    0000006a: 	xorl	%r12d, %r12d
    0000006d: 	leaq	0x10(%rsp), %r13
    00000072: 	shrl	$0x2, %eax
    00000075: 	movl	%eax, %edx
    00000077: 	leal	0x4(,%rax,4), %eax
    0000007e: 	movl	%eax, 0x4(%rsp)
    00000082: 	leaq	0x8(%rbp,%rdx,8), %r14
.Ltmp472:
    00000087: 	xorl	%esi, %esi
    00000089: 	movl	$0x20000, %edx
    0000008e: 	movq	%rbx, %rdi
    00000091: 	callq	memset@PLT # Offset: 145
    00000096: 	xorl	%esi, %esi
    00000098: 	movl	$0x20000, %edx
    0000009d: 	movq	%r13, %rdi
    000000a0: 	callq	memset@PLT # Offset: 160
    000000a5: 	cmpl	$0x3, %r15d
    000000a9: 	jle	.Ltmp468 # Offset: 169
    000000af: 	movq	%rbp, %rax
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp469:
    000000b8: 	movzwl	0x2(%rax), %edi
    000000bc: 	movzwl	0x6(%rax), %edx
    000000c0: 	addq	$0x8, %rax
    000000c4: 	movzwl	-0x4(%rax), %esi
    000000c8: 	movzwl	-0x8(%rax), %r9d
    000000cd: 	addw	$0x1, 0x10(%rsp,%rdi,2)
    000000d3: 	addw	$0x1, (%rbx,%r9,2)
    000000d9: 	addw	$0x1, 0x10(%rsp,%rdx,2)
    000000df: 	addw	$0x1, (%rbx,%rsi,2)
    000000e4: 	cmpq	%rax, %r14
    000000e7: 	jne	.Ltmp469 # Offset: 231
    000000e9: 	movl	0x4(%rsp), %eax
.Ltmp480:
    000000ed: 	cmpl	%eax, %r15d
    000000f0: 	jle	.Ltmp470 # Offset: 240
    000000f2: 	movslq	%eax, %rdx
    000000f5: 	leaq	(%rdx,%rdx), %rsi
    000000f9: 	movzwl	(%rbp,%rdx,2), %edx
    000000fe: 	addw	$0x1, (%rbx,%rdx,2)
    00000103: 	leal	0x1(%rax), %edx
    00000106: 	cmpl	%edx, %r15d
    00000109: 	jle	.Ltmp470 # Offset: 265
    0000010b: 	movzwl	0x2(%rbp,%rsi), %edx
    00000110: 	addw	$0x1, (%rbx,%rdx,2)
    00000115: 	leal	0x2(%rax), %edx
    00000118: 	cmpl	%edx, %r15d
    0000011b: 	jle	.Ltmp470 # Offset: 283
    0000011d: 	movzwl	0x4(%rbp,%rsi), %edx
    00000122: 	addl	$0x3, %eax
    00000125: 	addw	$0x1, (%rbx,%rdx,2)
    0000012a: 	cmpl	%eax, %r15d
    0000012d: 	jle	.Ltmp470 # Offset: 301
    0000012f: 	movzwl	0x6(%rbp,%rsi), %eax
    00000134: 	addw	$0x1, (%rbx,%rax,2)
.Ltmp470:
    00000139: 	xorl	%eax, %eax
    0000013b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp471:
    00000140: 	movdqu	(%rbx,%rax), %xmm0
    00000145: 	paddw	(%r13,%rax), %xmm0
    0000014c: 	movups	%xmm0, (%rbx,%rax)
    00000150: 	addq	$0x10, %rax
    00000154: 	cmpq	$0x20000, %rax
    0000015a: 	jne	.Ltmp471 # Offset: 346
    0000015c: 	addl	$0x1, %r12d
    00000160: 	cmpl	%r12d, iterations(%rip)
    00000167: 	jg	.Ltmp472 # Offset: 359
.Ltmp467:
    0000016d: 	leaq	referenceHistogramS(%rip), %rbp
    00000174: 	xorl	%r13d, %r13d
    00000177: 	jmp	.Ltmp473 # Offset: 375
    00000179: 	nopl	(%rax) # Size: 7
.Ltmp475:
    00000180: 	addq	$0x1, %r13
    00000184: 	addq	$0x2, %rbx
    00000188: 	addq	$0x8, %rbp
    0000018c: 	cmpq	$0x10000, %r13
    00000193: 	je	.Ltmp474 # Offset: 403
.Ltmp473:
    00000199: 	movzwl	(%rbp), %eax
    0000019d: 	cmpw	%ax, (%rbx)
    000001a0: 	je	.Ltmp475 # Offset: 416
    000001a2: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    000001a9: 	movl	$0x5, %edx
    000001ae: 	leaq	DATAat0x108e4(%rip), %rsi
    000001b5: 	movq	%r14, %rdi
    000001b8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 440
    000001bd: 	cmpq	$0x0, 0x8(%rsp)
    000001c3: 	je	.Ltmp476 # Offset: 451
    000001c9: 	movq	0x8(%rsp), %r15
    000001ce: 	movq	%r15, %rdi
    000001d1: 	callq	strlen@PLT # Offset: 465
    000001d6: 	movq	%r15, %rsi
    000001d9: 	movq	%r14, %rdi
    000001dc: 	movq	%rax, %rdx
    000001df: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 479
.Ltmp482:
    000001e4: 	movl	$0xf, %edx
    000001e9: 	leaq	DATAat0x108ea(%rip), %rsi
    000001f0: 	movq	%r14, %rdi
    000001f3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 499
    000001f8: 	movq	%r13, %rsi
    000001fb: 	movq	%r14, %rdi
    000001fe: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 510
    00000203: 	movl	$0xb, %edx
    00000208: 	leaq	DATAat0x108fa(%rip), %rsi
    0000020f: 	movq	%rax, %rdi
    00000212: 	movq	%rax, %r13
    00000215: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 533
    0000021a: 	movq	(%rbp), %rsi
    0000021e: 	movq	%r13, %rdi
    00000221: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 545
    00000226: 	movl	$0x4, %edx
    0000022b: 	leaq	DATAat0x10906(%rip), %rsi
    00000232: 	movq	%rax, %rdi
    00000235: 	movq	%rax, %rbp
    00000238: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 568
    0000023d: 	movzwl	(%rbx), %esi
    00000240: 	movq	%rbp, %rdi
    00000243: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 579
    00000248: 	movl	$0x2, %edx
    0000024d: 	leaq	DATAat0x1090b(%rip), %rsi
    00000254: 	movq	%rax, %rbp
    00000257: 	movq	%rax, %rdi
    0000025a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 602
    0000025f: 	movq	(%rbp), %rax
    00000263: 	movq	-0x18(%rax), %rax
    00000267: 	movq	0xf0(%rbp,%rax), %r13
    0000026f: 	testq	%r13, %r13
    00000272: 	je	.Ltmp477 # Offset: 626
    00000278: 	cmpb	$0x0, 0x38(%r13)
    0000027d: 	je	.Ltmp478 # Offset: 637
    0000027f: 	movsbl	0x43(%r13), %esi
    00000284: 	movq	%rbp, %rdi
    00000287: 	callq	_ZNSo3putEc@PLT # Offset: 647
    0000028c: 	movq	%rax, %rdi
    0000028f: 	callq	_ZNSo5flushEv@PLT # Offset: 655
.Ltmp474:
    00000294: 	callq	clock@PLT # Offset: 660
    00000299: 	movq	%rax, end_time(%rip)
    000002a0: 	movq	0x20018(%rsp), %rdx
    000002a8: 	subq	%fs:0x28, %rdx
    000002b1: 	jne	.Ltmp479 # Offset: 689
    000002b7: 	subq	start_time(%rip), %rax
    000002be: 	pxor	%xmm0, %xmm0
    000002c2: 	movq	0x8(%rsp), %rdi
    000002c7: 	cvtsi2sd	%rax, %xmm0
    000002cc: 	divsd	DATAat0x10920(%rip), %xmm0
    000002d4: 	addq	$0x20028, %rsp
    000002db: 	popq	%rbx
    000002dc: 	popq	%rbp
    000002dd: 	popq	%r12
    000002df: 	popq	%r13
    000002e1: 	popq	%r14
    000002e3: 	popq	%r15
    000002e5: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 741
.Ltmp468:
    000002ea: 	xorl	%eax, %eax
    000002ec: 	jmp	.Ltmp480 # Offset: 748
.Ltmp478:
    000002f1: 	movq	%r13, %rdi
    000002f4: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 756
    000002f9: 	movq	(%r13), %rax
    000002fd: 	movl	$0xa, %esi
    00000302: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    00000309: 	movq	0x30(%rax), %rax
    0000030d: 	cmpq	%rdx, %rax
    00000310: 	jne	.Ltmp481 # Offset: 784
.Ltmp483:
    00000312: 	movq	%rbp, %rdi
    00000315: 	callq	_ZNSo3putEc@PLT # Offset: 789
    0000031a: 	movq	%rax, %rdi
    0000031d: 	callq	_ZNSo5flushEv@PLT # Offset: 797
    00000322: 	jmp	.Ltmp474 # Offset: 802
.Ltmp476:
    00000327: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000032e: 	movq	-0x18(%rax), %rdi
    00000332: 	addq	%r14, %rdi
    00000335: 	movl	0x20(%rdi), %esi
    00000338: 	orl	$0x1, %esi
    0000033b: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 827
    00000340: 	jmp	.Ltmp482 # Offset: 832
.Ltmp481:
    00000345: 	movq	%r13, %rdi
    00000348: 	callq	*%rax # Offset: 840
    0000034a: 	movsbl	%al, %esi
    0000034d: 	jmp	.Ltmp483 # Offset: 845
.Ltmp479:
    0000034f: 	callq	__stack_chk_fail@PLT # Offset: 847
.Ltmp477:
    00000354: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 852
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_histogram4IttEvPKT_iPT0_PKc"

Binary Function "_Z15test_histogram4ItjEvPKT_iPT0_PKc" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x8600
  Size        : 0x34e
  MaxSize     : 0x350
  Offset      : 0x8600
  Section     : .text
  Orc Section : .local.text._Z15test_histogram4ItjEvPKT_iPT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x40000(%rsp), %r11
.Ltmp484:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp484 # Offset: 37
    00000027: 	subq	$0x28, %rsp
    0000002b: 	movq	%rcx, 0x8(%rsp)
    00000030: 	movq	%rdi, %rbp
    00000033: 	movl	%esi, %r15d
    00000036: 	movq	%rdx, %rbx
    00000039: 	movq	%fs:0x28, %rax
    00000042: 	movq	%rax, 0x40018(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	callq	clock@PLT # Offset: 76
    00000051: 	movq	%rax, start_time(%rip)
    00000058: 	movl	iterations(%rip), %eax
    0000005e: 	testl	%eax, %eax
    00000060: 	jle	.Ltmp485 # Offset: 96
    00000066: 	leal	-0x4(%r15), %eax
    0000006a: 	xorl	%r12d, %r12d
    0000006d: 	leaq	0x10(%rsp), %r13
    00000072: 	shrl	$0x2, %eax
    00000075: 	movl	%eax, %edx
    00000077: 	leal	0x4(,%rax,4), %eax
    0000007e: 	movl	%eax, 0x4(%rsp)
    00000082: 	leaq	0x8(%rbp,%rdx,8), %r14
.Ltmp490:
    00000087: 	xorl	%esi, %esi
    00000089: 	movl	$0x40000, %edx
    0000008e: 	movq	%rbx, %rdi
    00000091: 	callq	memset@PLT # Offset: 145
    00000096: 	xorl	%esi, %esi
    00000098: 	movl	$0x40000, %edx
    0000009d: 	movq	%r13, %rdi
    000000a0: 	callq	memset@PLT # Offset: 160
    000000a5: 	cmpl	$0x3, %r15d
    000000a9: 	jle	.Ltmp486 # Offset: 169
    000000af: 	movq	%rbp, %rax
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp487:
    000000b8: 	movzwl	0x2(%rax), %edi
    000000bc: 	movzwl	0x6(%rax), %edx
    000000c0: 	addq	$0x8, %rax
    000000c4: 	movzwl	-0x4(%rax), %esi
    000000c8: 	movzwl	-0x8(%rax), %r9d
    000000cd: 	addl	$0x1, 0x10(%rsp,%rdi,4)
    000000d2: 	addl	$0x1, (%rbx,%r9,4)
    000000d7: 	addl	$0x1, 0x10(%rsp,%rdx,4)
    000000dc: 	addl	$0x1, (%rbx,%rsi,4)
    000000e0: 	cmpq	%rax, %r14
    000000e3: 	jne	.Ltmp487 # Offset: 227
    000000e5: 	movl	0x4(%rsp), %eax
.Ltmp498:
    000000e9: 	cmpl	%eax, %r15d
    000000ec: 	jle	.Ltmp488 # Offset: 236
    000000ee: 	movslq	%eax, %rdx
    000000f1: 	leaq	(%rdx,%rdx), %rsi
    000000f5: 	movzwl	(%rbp,%rdx,2), %edx
    000000fa: 	addl	$0x1, (%rbx,%rdx,4)
    000000fe: 	leal	0x1(%rax), %edx
    00000101: 	cmpl	%edx, %r15d
    00000104: 	jle	.Ltmp488 # Offset: 260
    00000106: 	movzwl	0x2(%rbp,%rsi), %edx
    0000010b: 	addl	$0x1, (%rbx,%rdx,4)
    0000010f: 	leal	0x2(%rax), %edx
    00000112: 	cmpl	%edx, %r15d
    00000115: 	jle	.Ltmp488 # Offset: 277
    00000117: 	movzwl	0x4(%rbp,%rsi), %edx
    0000011c: 	addl	$0x3, %eax
    0000011f: 	addl	$0x1, (%rbx,%rdx,4)
    00000123: 	cmpl	%eax, %r15d
    00000126: 	jle	.Ltmp488 # Offset: 294
    00000128: 	movzwl	0x6(%rbp,%rsi), %eax
    0000012d: 	addl	$0x1, (%rbx,%rax,4)
.Ltmp488:
    00000131: 	xorl	%eax, %eax
    00000133: 	nopl	(%rax,%rax) # Size: 5
.Ltmp489:
    00000138: 	movdqu	(%rbx,%rax), %xmm0
    0000013d: 	paddd	(%r13,%rax), %xmm0
    00000144: 	movups	%xmm0, (%rbx,%rax)
    00000148: 	addq	$0x10, %rax
    0000014c: 	cmpq	$0x40000, %rax
    00000152: 	jne	.Ltmp489 # Offset: 338
    00000154: 	addl	$0x1, %r12d
    00000158: 	cmpl	%r12d, iterations(%rip)
    0000015f: 	jg	.Ltmp490 # Offset: 351
.Ltmp485:
    00000165: 	leaq	referenceHistogramS(%rip), %rbp
    0000016c: 	xorl	%r13d, %r13d
    0000016f: 	jmp	.Ltmp491 # Offset: 367
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp493:
    00000178: 	addq	$0x1, %r13
    0000017c: 	addq	$0x4, %rbx
    00000180: 	addq	$0x8, %rbp
    00000184: 	cmpq	$0x10000, %r13
    0000018b: 	je	.Ltmp492 # Offset: 395
.Ltmp491:
    00000191: 	movl	(%rbp), %eax
    00000194: 	cmpl	%eax, (%rbx)
    00000196: 	je	.Ltmp493 # Offset: 406
    00000198: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    0000019f: 	movl	$0x5, %edx
    000001a4: 	leaq	DATAat0x108e4(%rip), %rsi
    000001ab: 	movq	%r14, %rdi
    000001ae: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 430
    000001b3: 	cmpq	$0x0, 0x8(%rsp)
    000001b9: 	je	.Ltmp494 # Offset: 441
    000001bf: 	movq	0x8(%rsp), %r15
    000001c4: 	movq	%r15, %rdi
    000001c7: 	callq	strlen@PLT # Offset: 455
    000001cc: 	movq	%r15, %rsi
    000001cf: 	movq	%r14, %rdi
    000001d2: 	movq	%rax, %rdx
    000001d5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 469
.Ltmp500:
    000001da: 	movl	$0xf, %edx
    000001df: 	leaq	DATAat0x108ea(%rip), %rsi
    000001e6: 	movq	%r14, %rdi
    000001e9: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 489
    000001ee: 	movq	%r13, %rsi
    000001f1: 	movq	%r14, %rdi
    000001f4: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 500
    000001f9: 	movl	$0xb, %edx
    000001fe: 	leaq	DATAat0x108fa(%rip), %rsi
    00000205: 	movq	%rax, %rdi
    00000208: 	movq	%rax, %r13
    0000020b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 523
    00000210: 	movq	(%rbp), %rsi
    00000214: 	movq	%r13, %rdi
    00000217: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 535
    0000021c: 	movl	$0x4, %edx
    00000221: 	leaq	DATAat0x10906(%rip), %rsi
    00000228: 	movq	%rax, %rdi
    0000022b: 	movq	%rax, %rbp
    0000022e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 558
    00000233: 	movl	(%rbx), %esi
    00000235: 	movq	%rbp, %rdi
    00000238: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 568
    0000023d: 	movl	$0x2, %edx
    00000242: 	leaq	DATAat0x1090b(%rip), %rsi
    00000249: 	movq	%rax, %rbp
    0000024c: 	movq	%rax, %rdi
    0000024f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 591
    00000254: 	movq	(%rbp), %rax
    00000258: 	movq	-0x18(%rax), %rax
    0000025c: 	movq	0xf0(%rbp,%rax), %r13
    00000264: 	testq	%r13, %r13
    00000267: 	je	.Ltmp495 # Offset: 615
    0000026d: 	cmpb	$0x0, 0x38(%r13)
    00000272: 	je	.Ltmp496 # Offset: 626
    00000274: 	movsbl	0x43(%r13), %esi
    00000279: 	movq	%rbp, %rdi
    0000027c: 	callq	_ZNSo3putEc@PLT # Offset: 636
    00000281: 	movq	%rax, %rdi
    00000284: 	callq	_ZNSo5flushEv@PLT # Offset: 644
.Ltmp492:
    00000289: 	callq	clock@PLT # Offset: 649
    0000028e: 	movq	%rax, end_time(%rip)
    00000295: 	movq	0x40018(%rsp), %rdx
    0000029d: 	subq	%fs:0x28, %rdx
    000002a6: 	jne	.Ltmp497 # Offset: 678
    000002ac: 	subq	start_time(%rip), %rax
    000002b3: 	pxor	%xmm0, %xmm0
    000002b7: 	movq	0x8(%rsp), %rdi
    000002bc: 	cvtsi2sd	%rax, %xmm0
    000002c1: 	divsd	DATAat0x10920(%rip), %xmm0
    000002c9: 	addq	$0x40028, %rsp
    000002d0: 	popq	%rbx
    000002d1: 	popq	%rbp
    000002d2: 	popq	%r12
    000002d4: 	popq	%r13
    000002d6: 	popq	%r14
    000002d8: 	popq	%r15
    000002da: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 730
.Ltmp486:
    000002df: 	xorl	%eax, %eax
    000002e1: 	jmp	.Ltmp498 # Offset: 737
.Ltmp496:
    000002e6: 	movq	%r13, %rdi
    000002e9: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 745
    000002ee: 	movq	(%r13), %rax
    000002f2: 	movl	$0xa, %esi
    000002f7: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    000002fe: 	movq	0x30(%rax), %rax
    00000302: 	cmpq	%rdx, %rax
    00000305: 	jne	.Ltmp499 # Offset: 773
.Ltmp501:
    00000307: 	movq	%rbp, %rdi
    0000030a: 	callq	_ZNSo3putEc@PLT # Offset: 778
    0000030f: 	movq	%rax, %rdi
    00000312: 	callq	_ZNSo5flushEv@PLT # Offset: 786
    00000317: 	jmp	.Ltmp492 # Offset: 791
.Ltmp494:
    0000031c: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000323: 	movq	-0x18(%rax), %rdi
    00000327: 	addq	%r14, %rdi
    0000032a: 	movl	0x20(%rdi), %esi
    0000032d: 	orl	$0x1, %esi
    00000330: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 816
    00000335: 	jmp	.Ltmp500 # Offset: 821
.Ltmp499:
    0000033a: 	movq	%r13, %rdi
    0000033d: 	callq	*%rax # Offset: 829
    0000033f: 	movsbl	%al, %esi
    00000342: 	jmp	.Ltmp501 # Offset: 834
.Ltmp497:
    00000344: 	callq	__stack_chk_fail@PLT # Offset: 836
.Ltmp495:
    00000349: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 841
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_histogram4ItjEvPKT_iPT0_PKc"

Binary Function "_Z15test_histogram4ItmEvPKT_iPT0_PKc" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x8950
  Size        : 0x35b
  MaxSize     : 0x360
  Offset      : 0x8950
  Section     : .text
  Orc Section : .local.text._Z15test_histogram4ItmEvPKT_iPT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x80000(%rsp), %r11
.Ltmp502:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp502 # Offset: 37
    00000027: 	subq	$0x28, %rsp
    0000002b: 	movq	%rcx, 0x8(%rsp)
    00000030: 	movq	%rdi, %r12
    00000033: 	movl	%esi, %r15d
    00000036: 	movq	%rdx, %rbx
    00000039: 	movq	%fs:0x28, %rax
    00000042: 	movq	%rax, 0x80018(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	callq	clock@PLT # Offset: 76
    00000051: 	movq	%rax, start_time(%rip)
    00000058: 	movl	iterations(%rip), %eax
    0000005e: 	testl	%eax, %eax
    00000060: 	jle	.Ltmp503 # Offset: 96
    00000066: 	leal	-0x4(%r15), %eax
    0000006a: 	xorl	%r13d, %r13d
    0000006d: 	leaq	0x10(%rsp), %rbp
    00000072: 	shrl	$0x2, %eax
    00000075: 	movl	%eax, %edx
    00000077: 	leal	0x4(,%rax,4), %eax
    0000007e: 	movl	%eax, 0x4(%rsp)
    00000082: 	leaq	0x8(%r12,%rdx,8), %r14
.Ltmp508:
    00000087: 	xorl	%esi, %esi
    00000089: 	movl	$0x80000, %edx
    0000008e: 	movq	%rbx, %rdi
    00000091: 	callq	memset@PLT # Offset: 145
    00000096: 	xorl	%esi, %esi
    00000098: 	movl	$0x80000, %edx
    0000009d: 	movq	%rbp, %rdi
    000000a0: 	callq	memset@PLT # Offset: 160
    000000a5: 	cmpl	$0x3, %r15d
    000000a9: 	jle	.Ltmp504 # Offset: 169
    000000af: 	movq	%r12, %rax
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp505:
    000000b8: 	movzwl	0x2(%rax), %edi
    000000bc: 	movzwl	0x6(%rax), %edx
    000000c0: 	addq	$0x8, %rax
    000000c4: 	movzwl	-0x4(%rax), %esi
    000000c8: 	movzwl	-0x8(%rax), %r9d
    000000cd: 	addq	$0x1, 0x10(%rsp,%rdi,8)
    000000d3: 	addq	$0x1, (%rbx,%r9,8)
    000000d8: 	addq	$0x1, 0x10(%rsp,%rdx,8)
    000000de: 	addq	$0x1, (%rbx,%rsi,8)
    000000e3: 	cmpq	%rax, %r14
    000000e6: 	jne	.Ltmp505 # Offset: 230
    000000e8: 	movl	0x4(%rsp), %eax
.Ltmp516:
    000000ec: 	cmpl	%eax, %r15d
    000000ef: 	jle	.Ltmp506 # Offset: 239
    000000f1: 	movslq	%eax, %rdx
    000000f4: 	leaq	(%rdx,%rdx), %rsi
    000000f8: 	movzwl	(%r12,%rdx,2), %edx
    000000fd: 	addq	$0x1, (%rbx,%rdx,8)
    00000102: 	leal	0x1(%rax), %edx
    00000105: 	cmpl	%edx, %r15d
    00000108: 	jle	.Ltmp506 # Offset: 264
    0000010a: 	movzwl	0x2(%r12,%rsi), %edx
    00000110: 	addq	$0x1, (%rbx,%rdx,8)
    00000115: 	leal	0x2(%rax), %edx
    00000118: 	cmpl	%edx, %r15d
    0000011b: 	jle	.Ltmp506 # Offset: 283
    0000011d: 	movzwl	0x4(%r12,%rsi), %edx
    00000123: 	addl	$0x3, %eax
    00000126: 	addq	$0x1, (%rbx,%rdx,8)
    0000012b: 	cmpl	%eax, %r15d
    0000012e: 	jle	.Ltmp506 # Offset: 302
    00000130: 	movzwl	0x6(%r12,%rsi), %eax
    00000136: 	addq	$0x1, (%rbx,%rax,8)
.Ltmp506:
    0000013b: 	xorl	%eax, %eax
    0000013d: 	nopl	(%rax) # Size: 3
.Ltmp507:
    00000140: 	movdqu	(%rbx,%rax), %xmm0
    00000145: 	paddq	(%rbp,%rax), %xmm0
    0000014b: 	movups	%xmm0, (%rbx,%rax)
    0000014f: 	addq	$0x10, %rax
    00000153: 	cmpq	$0x80000, %rax
    00000159: 	jne	.Ltmp507 # Offset: 345
    0000015b: 	addl	$0x1, %r13d
    0000015f: 	cmpl	%r13d, iterations(%rip)
    00000166: 	jg	.Ltmp508 # Offset: 358
.Ltmp503:
    0000016c: 	leaq	referenceHistogramS(%rip), %rbp
    00000173: 	xorl	%r12d, %r12d
    00000176: 	jmp	.Ltmp509 # Offset: 374
    00000178: 	nopl	(%rax,%rax) # Size: 8
.Ltmp511:
    00000180: 	addq	$0x1, %r12
    00000184: 	addq	$0x8, %rbx
    00000188: 	addq	$0x8, %rbp
    0000018c: 	cmpq	$0x10000, %r12
    00000193: 	je	.Ltmp510 # Offset: 403
.Ltmp509:
    00000199: 	movq	(%rbp), %rax
    0000019d: 	cmpq	%rax, (%rbx)
    000001a0: 	je	.Ltmp511 # Offset: 416
    000001a2: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    000001a9: 	movl	$0x5, %edx
    000001ae: 	leaq	DATAat0x108e4(%rip), %rsi
    000001b5: 	movq	%r14, %rdi
    000001b8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 440
    000001bd: 	cmpq	$0x0, 0x8(%rsp)
    000001c3: 	je	.Ltmp512 # Offset: 451
    000001c9: 	movq	0x8(%rsp), %r15
    000001ce: 	movq	%r15, %rdi
    000001d1: 	callq	strlen@PLT # Offset: 465
    000001d6: 	movq	%r15, %rsi
    000001d9: 	movq	%r14, %rdi
    000001dc: 	movq	%rax, %rdx
    000001df: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 479
.Ltmp518:
    000001e4: 	movl	$0xf, %edx
    000001e9: 	leaq	DATAat0x108ea(%rip), %rsi
    000001f0: 	movq	%r14, %rdi
    000001f3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 499
    000001f8: 	movq	%r12, %rsi
    000001fb: 	movq	%r14, %rdi
    000001fe: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 510
    00000203: 	movl	$0xb, %edx
    00000208: 	leaq	DATAat0x108fa(%rip), %rsi
    0000020f: 	movq	%rax, %rdi
    00000212: 	movq	%rax, %r12
    00000215: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 533
    0000021a: 	movq	(%rbp), %rsi
    0000021e: 	movq	%r12, %rdi
    00000221: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 545
    00000226: 	movl	$0x4, %edx
    0000022b: 	leaq	DATAat0x10906(%rip), %rsi
    00000232: 	movq	%rax, %rdi
    00000235: 	movq	%rax, %rbp
    00000238: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 568
    0000023d: 	movq	(%rbx), %rsi
    00000240: 	movq	%rbp, %rdi
    00000243: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 579
    00000248: 	movl	$0x2, %edx
    0000024d: 	leaq	DATAat0x1090b(%rip), %rsi
    00000254: 	movq	%rax, %rbp
    00000257: 	movq	%rax, %rdi
    0000025a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 602
    0000025f: 	movq	(%rbp), %rax
    00000263: 	movq	-0x18(%rax), %rax
    00000267: 	movq	0xf0(%rbp,%rax), %r12
    0000026f: 	testq	%r12, %r12
    00000272: 	je	.Ltmp513 # Offset: 626
    00000278: 	cmpb	$0x0, 0x38(%r12)
    0000027e: 	je	.Ltmp514 # Offset: 638
    00000280: 	movsbl	0x43(%r12), %esi
    00000286: 	movq	%rbp, %rdi
    00000289: 	callq	_ZNSo3putEc@PLT # Offset: 649
    0000028e: 	movq	%rax, %rdi
    00000291: 	callq	_ZNSo5flushEv@PLT # Offset: 657
.Ltmp510:
    00000296: 	callq	clock@PLT # Offset: 662
    0000029b: 	movq	%rax, end_time(%rip)
    000002a2: 	movq	0x80018(%rsp), %rdx
    000002aa: 	subq	%fs:0x28, %rdx
    000002b3: 	jne	.Ltmp515 # Offset: 691
    000002b9: 	subq	start_time(%rip), %rax
    000002c0: 	pxor	%xmm0, %xmm0
    000002c4: 	movq	0x8(%rsp), %rdi
    000002c9: 	cvtsi2sd	%rax, %xmm0
    000002ce: 	divsd	DATAat0x10920(%rip), %xmm0
    000002d6: 	addq	$0x80028, %rsp
    000002dd: 	popq	%rbx
    000002de: 	popq	%rbp
    000002df: 	popq	%r12
    000002e1: 	popq	%r13
    000002e3: 	popq	%r14
    000002e5: 	popq	%r15
    000002e7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 743
.Ltmp504:
    000002ec: 	xorl	%eax, %eax
    000002ee: 	jmp	.Ltmp516 # Offset: 750
.Ltmp514:
    000002f3: 	movq	%r12, %rdi
    000002f6: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 758
    000002fb: 	movq	(%r12), %rax
    000002ff: 	movl	$0xa, %esi
    00000304: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    0000030b: 	movq	0x30(%rax), %rax
    0000030f: 	cmpq	%rdx, %rax
    00000312: 	jne	.Ltmp517 # Offset: 786
.Ltmp519:
    00000314: 	movq	%rbp, %rdi
    00000317: 	callq	_ZNSo3putEc@PLT # Offset: 791
    0000031c: 	movq	%rax, %rdi
    0000031f: 	callq	_ZNSo5flushEv@PLT # Offset: 799
    00000324: 	jmp	.Ltmp510 # Offset: 804
.Ltmp512:
    00000329: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000330: 	movq	-0x18(%rax), %rdi
    00000334: 	addq	%r14, %rdi
    00000337: 	movl	0x20(%rdi), %esi
    0000033a: 	orl	$0x1, %esi
    0000033d: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 829
    00000342: 	jmp	.Ltmp518 # Offset: 834
.Ltmp517:
    00000347: 	movq	%r12, %rdi
    0000034a: 	callq	*%rax # Offset: 842
    0000034c: 	movsbl	%al, %esi
    0000034f: 	jmp	.Ltmp519 # Offset: 847
.Ltmp515:
    00000351: 	callq	__stack_chk_fail@PLT # Offset: 849
.Ltmp513:
    00000356: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 854
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_histogram4ItmEvPKT_iPT0_PKc"

Binary Function "_Z15test_histogram5IttEvPKT_iPT0_PKc" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x8cb0
  Size        : 0x3bb
  MaxSize     : 0x3c0
  Offset      : 0x8cb0
  Section     : .text
  Orc Section : .local.text._Z15test_histogram5IttEvPKT_iPT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x60000(%rsp), %r11
.Ltmp520:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp520 # Offset: 37
    00000027: 	subq	$0x38, %rsp
    0000002b: 	movq	%rdi, 0x8(%rsp)
    00000030: 	movq	%rdx, %rbx
    00000033: 	movl	%esi, (%rsp)
    00000036: 	movq	%rcx, 0x18(%rsp)
    0000003b: 	movq	%fs:0x28, %rax
    00000044: 	movq	%rax, 0x60028(%rsp)
    0000004c: 	xorl	%eax, %eax
    0000004e: 	callq	clock@PLT # Offset: 78
    00000053: 	movl	(%rsp), %r8d
    00000057: 	movq	0x8(%rsp), %r9
    0000005c: 	movq	%rax, start_time(%rip)
    00000063: 	movl	iterations(%rip), %eax
    00000069: 	testl	%eax, %eax
    0000006b: 	jle	.Ltmp521 # Offset: 107
    00000071: 	leal	-0x4(%r8), %eax
    00000075: 	xorl	%r14d, %r14d
    00000078: 	leaq	0x20(%rsp), %r15
    0000007d: 	shrl	$0x2, %eax
    00000080: 	leaq	0x20020(%rsp), %r12
    00000088: 	leaq	0x40020(%rsp), %rbp
    00000090: 	movl	%eax, %edx
    00000092: 	leal	0x4(,%rax,4), %eax
    00000099: 	movl	%eax, 0x14(%rsp)
    0000009d: 	leaq	0x8(%r9,%rdx,8), %r13
.Ltmp526:
    000000a2: 	xorl	%esi, %esi
    000000a4: 	movl	$0x20000, %edx
    000000a9: 	movq	%rbx, %rdi
    000000ac: 	movl	%r8d, 0x8(%rsp)
    000000b1: 	movq	%r9, (%rsp)
    000000b5: 	callq	memset@PLT # Offset: 181
    000000ba: 	xorl	%esi, %esi
    000000bc: 	movl	$0x20000, %edx
    000000c1: 	movq	%r15, %rdi
    000000c4: 	callq	memset@PLT # Offset: 196
    000000c9: 	xorl	%esi, %esi
    000000cb: 	movl	$0x20000, %edx
    000000d0: 	movq	%r12, %rdi
    000000d3: 	callq	memset@PLT # Offset: 211
    000000d8: 	xorl	%esi, %esi
    000000da: 	movl	$0x20000, %edx
    000000df: 	movq	%rbp, %rdi
    000000e2: 	callq	memset@PLT # Offset: 226
    000000e7: 	movl	0x8(%rsp), %r8d
    000000ec: 	movq	(%rsp), %r9
    000000f0: 	cmpl	$0x3, %r8d
    000000f4: 	jle	.Ltmp522 # Offset: 244
    000000fa: 	movq	%r9, %rax
    000000fd: 	nopl	(%rax) # Size: 3
.Ltmp523:
    00000100: 	movzwl	0x2(%rax), %edi
    00000104: 	movzwl	0x4(%rax), %esi
    00000108: 	addq	$0x8, %rax
    0000010c: 	movzwl	-0x2(%rax), %edx
    00000110: 	movzwl	-0x8(%rax), %r11d
    00000115: 	addw	$0x1, 0x20(%rsp,%rdi,2)
    0000011b: 	addw	$0x1, (%rbx,%r11,2)
    00000121: 	addw	$0x1, 0x20020(%rsp,%rsi,2)
    0000012a: 	addw	$0x1, 0x40020(%rsp,%rdx,2)
    00000133: 	cmpq	%rax, %r13
    00000136: 	jne	.Ltmp523 # Offset: 310
    00000138: 	movl	0x14(%rsp), %eax
.Ltmp534:
    0000013c: 	cmpl	%eax, %r8d
    0000013f: 	jle	.Ltmp524 # Offset: 319
    00000141: 	movslq	%eax, %rdx
    00000144: 	leaq	(%rdx,%rdx), %rsi
    00000148: 	movzwl	(%r9,%rdx,2), %edx
    0000014d: 	addw	$0x1, (%rbx,%rdx,2)
    00000152: 	leal	0x1(%rax), %edx
    00000155: 	cmpl	%edx, %r8d
    00000158: 	jle	.Ltmp524 # Offset: 344
    0000015a: 	movzwl	0x2(%r9,%rsi), %edx
    00000160: 	addw	$0x1, (%rbx,%rdx,2)
    00000165: 	leal	0x2(%rax), %edx
    00000168: 	cmpl	%edx, %r8d
    0000016b: 	jle	.Ltmp524 # Offset: 363
    0000016d: 	movzwl	0x4(%r9,%rsi), %edx
    00000173: 	addl	$0x3, %eax
    00000176: 	addw	$0x1, (%rbx,%rdx,2)
    0000017b: 	cmpl	%eax, %r8d
    0000017e: 	jle	.Ltmp524 # Offset: 382
    00000180: 	movzwl	0x6(%r9,%rsi), %eax
    00000186: 	addw	$0x1, (%rbx,%rax,2)
.Ltmp524:
    0000018b: 	xorl	%eax, %eax
    0000018d: 	nopl	(%rax) # Size: 3
.Ltmp525:
    00000190: 	movdqu	(%rbx,%rax), %xmm1
    00000195: 	movdqa	(%rbp,%rax), %xmm0
    0000019b: 	paddw	(%r15,%rax), %xmm1
    000001a1: 	paddw	(%r12,%rax), %xmm0
    000001a7: 	paddw	%xmm1, %xmm0
    000001ab: 	movups	%xmm0, (%rbx,%rax)
    000001af: 	addq	$0x10, %rax
    000001b3: 	cmpq	$0x20000, %rax
    000001b9: 	jne	.Ltmp525 # Offset: 441
    000001bb: 	addl	$0x1, %r14d
    000001bf: 	cmpl	%r14d, iterations(%rip)
    000001c6: 	jg	.Ltmp526 # Offset: 454
.Ltmp521:
    000001cc: 	leaq	referenceHistogramS(%rip), %rbp
    000001d3: 	xorl	%r12d, %r12d
    000001d6: 	jmp	.Ltmp527 # Offset: 470
    000001d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp529:
    000001e0: 	addq	$0x1, %r12
    000001e4: 	addq	$0x2, %rbx
    000001e8: 	addq	$0x8, %rbp
    000001ec: 	cmpq	$0x10000, %r12
    000001f3: 	je	.Ltmp528 # Offset: 499
.Ltmp527:
    000001f9: 	movzwl	(%rbp), %eax
    000001fd: 	cmpw	%ax, (%rbx)
    00000200: 	je	.Ltmp529 # Offset: 512
    00000202: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    00000209: 	movl	$0x5, %edx
    0000020e: 	leaq	DATAat0x108e4(%rip), %rsi
    00000215: 	movq	%r13, %rdi
    00000218: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 536
    0000021d: 	cmpq	$0x0, 0x18(%rsp)
    00000223: 	je	.Ltmp530 # Offset: 547
    00000229: 	movq	0x18(%rsp), %r14
    0000022e: 	movq	%r14, %rdi
    00000231: 	callq	strlen@PLT # Offset: 561
    00000236: 	movq	%r14, %rsi
    00000239: 	movq	%r13, %rdi
    0000023c: 	movq	%rax, %rdx
    0000023f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 575
.Ltmp536:
    00000244: 	movl	$0xf, %edx
    00000249: 	leaq	DATAat0x108ea(%rip), %rsi
    00000250: 	movq	%r13, %rdi
    00000253: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 595
    00000258: 	movq	%r12, %rsi
    0000025b: 	movq	%r13, %rdi
    0000025e: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 606
    00000263: 	movl	$0xb, %edx
    00000268: 	leaq	DATAat0x108fa(%rip), %rsi
    0000026f: 	movq	%rax, %rdi
    00000272: 	movq	%rax, %r12
    00000275: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 629
    0000027a: 	movq	(%rbp), %rsi
    0000027e: 	movq	%r12, %rdi
    00000281: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 641
    00000286: 	movl	$0x4, %edx
    0000028b: 	leaq	DATAat0x10906(%rip), %rsi
    00000292: 	movq	%rax, %rdi
    00000295: 	movq	%rax, %rbp
    00000298: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 664
    0000029d: 	movzwl	(%rbx), %esi
    000002a0: 	movq	%rbp, %rdi
    000002a3: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 675
    000002a8: 	movl	$0x2, %edx
    000002ad: 	leaq	DATAat0x1090b(%rip), %rsi
    000002b4: 	movq	%rax, %rbp
    000002b7: 	movq	%rax, %rdi
    000002ba: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 698
    000002bf: 	movq	(%rbp), %rax
    000002c3: 	movq	-0x18(%rax), %rax
    000002c7: 	movq	0xf0(%rbp,%rax), %r12
    000002cf: 	testq	%r12, %r12
    000002d2: 	je	.Ltmp531 # Offset: 722
    000002d8: 	cmpb	$0x0, 0x38(%r12)
    000002de: 	je	.Ltmp532 # Offset: 734
    000002e0: 	movsbl	0x43(%r12), %esi
    000002e6: 	movq	%rbp, %rdi
    000002e9: 	callq	_ZNSo3putEc@PLT # Offset: 745
    000002ee: 	movq	%rax, %rdi
    000002f1: 	callq	_ZNSo5flushEv@PLT # Offset: 753
.Ltmp528:
    000002f6: 	callq	clock@PLT # Offset: 758
    000002fb: 	movq	%rax, end_time(%rip)
    00000302: 	movq	0x60028(%rsp), %rdx
    0000030a: 	subq	%fs:0x28, %rdx
    00000313: 	jne	.Ltmp533 # Offset: 787
    00000319: 	subq	start_time(%rip), %rax
    00000320: 	pxor	%xmm0, %xmm0
    00000324: 	movq	0x18(%rsp), %rdi
    00000329: 	cvtsi2sd	%rax, %xmm0
    0000032e: 	divsd	DATAat0x10920(%rip), %xmm0
    00000336: 	addq	$0x60038, %rsp
    0000033d: 	popq	%rbx
    0000033e: 	popq	%rbp
    0000033f: 	popq	%r12
    00000341: 	popq	%r13
    00000343: 	popq	%r14
    00000345: 	popq	%r15
    00000347: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 839
.Ltmp522:
    0000034c: 	xorl	%eax, %eax
    0000034e: 	jmp	.Ltmp534 # Offset: 846
.Ltmp532:
    00000353: 	movq	%r12, %rdi
    00000356: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 854
    0000035b: 	movq	(%r12), %rax
    0000035f: 	movl	$0xa, %esi
    00000364: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    0000036b: 	movq	0x30(%rax), %rax
    0000036f: 	cmpq	%rdx, %rax
    00000372: 	jne	.Ltmp535 # Offset: 882
.Ltmp537:
    00000374: 	movq	%rbp, %rdi
    00000377: 	callq	_ZNSo3putEc@PLT # Offset: 887
    0000037c: 	movq	%rax, %rdi
    0000037f: 	callq	_ZNSo5flushEv@PLT # Offset: 895
    00000384: 	jmp	.Ltmp528 # Offset: 900
.Ltmp530:
    00000389: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000390: 	movq	-0x18(%rax), %rdi
    00000394: 	addq	%r13, %rdi
    00000397: 	movl	0x20(%rdi), %esi
    0000039a: 	orl	$0x1, %esi
    0000039d: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 925
    000003a2: 	jmp	.Ltmp536 # Offset: 930
.Ltmp535:
    000003a7: 	movq	%r12, %rdi
    000003aa: 	callq	*%rax # Offset: 938
    000003ac: 	movsbl	%al, %esi
    000003af: 	jmp	.Ltmp537 # Offset: 943
.Ltmp533:
    000003b1: 	callq	__stack_chk_fail@PLT # Offset: 945
.Ltmp531:
    000003b6: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 950
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_histogram5IttEvPKT_iPT0_PKc"

Binary Function "_Z15test_histogram5ItjEvPKT_iPT0_PKc" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x9070
  Size        : 0x3a8
  MaxSize     : 0x3b0
  Offset      : 0x9070
  Section     : .text
  Orc Section : .local.text._Z15test_histogram5ItjEvPKT_iPT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0xc0000(%rsp), %r11
.Ltmp538:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp538 # Offset: 37
    00000027: 	subq	$0x38, %rsp
    0000002b: 	movq	%rdi, 0x8(%rsp)
    00000030: 	movq	%rdx, %rbx
    00000033: 	movl	%esi, (%rsp)
    00000036: 	movq	%rcx, 0x18(%rsp)
    0000003b: 	movq	%fs:0x28, %rax
    00000044: 	movq	%rax, 0xc0028(%rsp)
    0000004c: 	xorl	%eax, %eax
    0000004e: 	callq	clock@PLT # Offset: 78
    00000053: 	movl	(%rsp), %r8d
    00000057: 	movq	0x8(%rsp), %r9
    0000005c: 	movq	%rax, start_time(%rip)
    00000063: 	movl	iterations(%rip), %eax
    00000069: 	testl	%eax, %eax
    0000006b: 	jle	.Ltmp539 # Offset: 107
    00000071: 	leal	-0x4(%r8), %eax
    00000075: 	xorl	%r14d, %r14d
    00000078: 	leaq	0x20(%rsp), %r15
    0000007d: 	shrl	$0x2, %eax
    00000080: 	leaq	0x40020(%rsp), %r12
    00000088: 	leaq	0x80020(%rsp), %rbp
    00000090: 	movl	%eax, %edx
    00000092: 	leal	0x4(,%rax,4), %eax
    00000099: 	movl	%eax, 0x14(%rsp)
    0000009d: 	leaq	0x8(%r9,%rdx,8), %r13
.Ltmp544:
    000000a2: 	xorl	%esi, %esi
    000000a4: 	movl	$0x40000, %edx
    000000a9: 	movq	%rbx, %rdi
    000000ac: 	movl	%r8d, 0x8(%rsp)
    000000b1: 	movq	%r9, (%rsp)
    000000b5: 	callq	memset@PLT # Offset: 181
    000000ba: 	xorl	%esi, %esi
    000000bc: 	movl	$0x40000, %edx
    000000c1: 	movq	%r15, %rdi
    000000c4: 	callq	memset@PLT # Offset: 196
    000000c9: 	xorl	%esi, %esi
    000000cb: 	movl	$0x40000, %edx
    000000d0: 	movq	%r12, %rdi
    000000d3: 	callq	memset@PLT # Offset: 211
    000000d8: 	xorl	%esi, %esi
    000000da: 	movl	$0x40000, %edx
    000000df: 	movq	%rbp, %rdi
    000000e2: 	callq	memset@PLT # Offset: 226
    000000e7: 	movl	0x8(%rsp), %r8d
    000000ec: 	movq	(%rsp), %r9
    000000f0: 	cmpl	$0x3, %r8d
    000000f4: 	jle	.Ltmp540 # Offset: 244
    000000fa: 	movq	%r9, %rax
    000000fd: 	nopl	(%rax) # Size: 3
.Ltmp541:
    00000100: 	movzwl	0x2(%rax), %edi
    00000104: 	movzwl	0x4(%rax), %esi
    00000108: 	addq	$0x8, %rax
    0000010c: 	movzwl	-0x2(%rax), %edx
    00000110: 	movzwl	-0x8(%rax), %r11d
    00000115: 	addl	$0x1, 0x20(%rsp,%rdi,4)
    0000011a: 	addl	$0x1, (%rbx,%r11,4)
    0000011f: 	addl	$0x1, 0x40020(%rsp,%rsi,4)
    00000127: 	addl	$0x1, 0x80020(%rsp,%rdx,4)
    0000012f: 	cmpq	%rax, %r13
    00000132: 	jne	.Ltmp541 # Offset: 306
    00000134: 	movl	0x14(%rsp), %eax
.Ltmp552:
    00000138: 	cmpl	%eax, %r8d
    0000013b: 	jle	.Ltmp542 # Offset: 315
    0000013d: 	movslq	%eax, %rdx
    00000140: 	leaq	(%rdx,%rdx), %rsi
    00000144: 	movzwl	(%r9,%rdx,2), %edx
    00000149: 	addl	$0x1, (%rbx,%rdx,4)
    0000014d: 	leal	0x1(%rax), %edx
    00000150: 	cmpl	%edx, %r8d
    00000153: 	jle	.Ltmp542 # Offset: 339
    00000155: 	movzwl	0x2(%r9,%rsi), %edx
    0000015b: 	addl	$0x1, (%rbx,%rdx,4)
    0000015f: 	leal	0x2(%rax), %edx
    00000162: 	cmpl	%edx, %r8d
    00000165: 	jle	.Ltmp542 # Offset: 357
    00000167: 	movzwl	0x4(%r9,%rsi), %edx
    0000016d: 	addl	$0x3, %eax
    00000170: 	addl	$0x1, (%rbx,%rdx,4)
    00000174: 	cmpl	%eax, %r8d
    00000177: 	jle	.Ltmp542 # Offset: 375
    00000179: 	movzwl	0x6(%r9,%rsi), %eax
    0000017f: 	addl	$0x1, (%rbx,%rax,4)
.Ltmp542:
    00000183: 	xorl	%eax, %eax
    00000185: 	nopl	(%rax) # Size: 3
.Ltmp543:
    00000188: 	movdqu	(%rbx,%rax), %xmm1
    0000018d: 	movdqa	(%rbp,%rax), %xmm0
    00000193: 	paddd	(%r15,%rax), %xmm1
    00000199: 	paddd	(%r12,%rax), %xmm0
    0000019f: 	paddd	%xmm1, %xmm0
    000001a3: 	movups	%xmm0, (%rbx,%rax)
    000001a7: 	addq	$0x10, %rax
    000001ab: 	cmpq	$0x40000, %rax
    000001b1: 	jne	.Ltmp543 # Offset: 433
    000001b3: 	addl	$0x1, %r14d
    000001b7: 	cmpl	%r14d, iterations(%rip)
    000001be: 	jg	.Ltmp544 # Offset: 446
.Ltmp539:
    000001c4: 	leaq	referenceHistogramS(%rip), %rbp
    000001cb: 	xorl	%r12d, %r12d
    000001ce: 	jmp	.Ltmp545 # Offset: 462
.Ltmp547:
    000001d0: 	addq	$0x1, %r12
    000001d4: 	addq	$0x4, %rbx
    000001d8: 	addq	$0x8, %rbp
    000001dc: 	cmpq	$0x10000, %r12
    000001e3: 	je	.Ltmp546 # Offset: 483
.Ltmp545:
    000001e9: 	movl	(%rbp), %eax
    000001ec: 	cmpl	%eax, (%rbx)
    000001ee: 	je	.Ltmp547 # Offset: 494
    000001f0: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    000001f7: 	movl	$0x5, %edx
    000001fc: 	leaq	DATAat0x108e4(%rip), %rsi
    00000203: 	movq	%r13, %rdi
    00000206: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 518
    0000020b: 	cmpq	$0x0, 0x18(%rsp)
    00000211: 	je	.Ltmp548 # Offset: 529
    00000217: 	movq	0x18(%rsp), %r14
    0000021c: 	movq	%r14, %rdi
    0000021f: 	callq	strlen@PLT # Offset: 543
    00000224: 	movq	%r14, %rsi
    00000227: 	movq	%r13, %rdi
    0000022a: 	movq	%rax, %rdx
    0000022d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 557
.Ltmp554:
    00000232: 	movl	$0xf, %edx
    00000237: 	leaq	DATAat0x108ea(%rip), %rsi
    0000023e: 	movq	%r13, %rdi
    00000241: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 577
    00000246: 	movq	%r12, %rsi
    00000249: 	movq	%r13, %rdi
    0000024c: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 588
    00000251: 	movl	$0xb, %edx
    00000256: 	leaq	DATAat0x108fa(%rip), %rsi
    0000025d: 	movq	%rax, %rdi
    00000260: 	movq	%rax, %r12
    00000263: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 611
    00000268: 	movq	(%rbp), %rsi
    0000026c: 	movq	%r12, %rdi
    0000026f: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 623
    00000274: 	movl	$0x4, %edx
    00000279: 	leaq	DATAat0x10906(%rip), %rsi
    00000280: 	movq	%rax, %rdi
    00000283: 	movq	%rax, %rbp
    00000286: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 646
    0000028b: 	movl	(%rbx), %esi
    0000028d: 	movq	%rbp, %rdi
    00000290: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 656
    00000295: 	movl	$0x2, %edx
    0000029a: 	leaq	DATAat0x1090b(%rip), %rsi
    000002a1: 	movq	%rax, %rbp
    000002a4: 	movq	%rax, %rdi
    000002a7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 679
    000002ac: 	movq	(%rbp), %rax
    000002b0: 	movq	-0x18(%rax), %rax
    000002b4: 	movq	0xf0(%rbp,%rax), %r12
    000002bc: 	testq	%r12, %r12
    000002bf: 	je	.Ltmp549 # Offset: 703
    000002c5: 	cmpb	$0x0, 0x38(%r12)
    000002cb: 	je	.Ltmp550 # Offset: 715
    000002cd: 	movsbl	0x43(%r12), %esi
    000002d3: 	movq	%rbp, %rdi
    000002d6: 	callq	_ZNSo3putEc@PLT # Offset: 726
    000002db: 	movq	%rax, %rdi
    000002de: 	callq	_ZNSo5flushEv@PLT # Offset: 734
.Ltmp546:
    000002e3: 	callq	clock@PLT # Offset: 739
    000002e8: 	movq	%rax, end_time(%rip)
    000002ef: 	movq	0xc0028(%rsp), %rdx
    000002f7: 	subq	%fs:0x28, %rdx
    00000300: 	jne	.Ltmp551 # Offset: 768
    00000306: 	subq	start_time(%rip), %rax
    0000030d: 	pxor	%xmm0, %xmm0
    00000311: 	movq	0x18(%rsp), %rdi
    00000316: 	cvtsi2sd	%rax, %xmm0
    0000031b: 	divsd	DATAat0x10920(%rip), %xmm0
    00000323: 	addq	$0xc0038, %rsp
    0000032a: 	popq	%rbx
    0000032b: 	popq	%rbp
    0000032c: 	popq	%r12
    0000032e: 	popq	%r13
    00000330: 	popq	%r14
    00000332: 	popq	%r15
    00000334: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 820
.Ltmp540:
    00000339: 	xorl	%eax, %eax
    0000033b: 	jmp	.Ltmp552 # Offset: 827
.Ltmp550:
    00000340: 	movq	%r12, %rdi
    00000343: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 835
    00000348: 	movq	(%r12), %rax
    0000034c: 	movl	$0xa, %esi
    00000351: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    00000358: 	movq	0x30(%rax), %rax
    0000035c: 	cmpq	%rdx, %rax
    0000035f: 	jne	.Ltmp553 # Offset: 863
.Ltmp555:
    00000361: 	movq	%rbp, %rdi
    00000364: 	callq	_ZNSo3putEc@PLT # Offset: 868
    00000369: 	movq	%rax, %rdi
    0000036c: 	callq	_ZNSo5flushEv@PLT # Offset: 876
    00000371: 	jmp	.Ltmp546 # Offset: 881
.Ltmp548:
    00000376: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000037d: 	movq	-0x18(%rax), %rdi
    00000381: 	addq	%r13, %rdi
    00000384: 	movl	0x20(%rdi), %esi
    00000387: 	orl	$0x1, %esi
    0000038a: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 906
    0000038f: 	jmp	.Ltmp554 # Offset: 911
.Ltmp553:
    00000394: 	movq	%r12, %rdi
    00000397: 	callq	*%rax # Offset: 919
    00000399: 	movsbl	%al, %esi
    0000039c: 	jmp	.Ltmp555 # Offset: 924
.Ltmp551:
    0000039e: 	callq	__stack_chk_fail@PLT # Offset: 926
.Ltmp549:
    000003a3: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 931
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_histogram5ItjEvPKT_iPT0_PKc"

Binary Function "_Z15test_histogram5ItmEvPKT_iPT0_PKc" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x9420
  Size        : 0x3bb
  MaxSize     : 0x3c0
  Offset      : 0x9420
  Section     : .text
  Orc Section : .local.text._Z15test_histogram5ItmEvPKT_iPT0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x180000(%rsp), %r11
.Ltmp556:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp556 # Offset: 37
    00000027: 	subq	$0x38, %rsp
    0000002b: 	movq	%rdi, 0x8(%rsp)
    00000030: 	movq	%rdx, %rbx
    00000033: 	movl	%esi, (%rsp)
    00000036: 	movq	%rcx, 0x18(%rsp)
    0000003b: 	movq	%fs:0x28, %rax
    00000044: 	movq	%rax, 0x180028(%rsp)
    0000004c: 	xorl	%eax, %eax
    0000004e: 	callq	clock@PLT # Offset: 78
    00000053: 	movl	(%rsp), %r8d
    00000057: 	movq	0x8(%rsp), %r9
    0000005c: 	movq	%rax, start_time(%rip)
    00000063: 	movl	iterations(%rip), %eax
    00000069: 	testl	%eax, %eax
    0000006b: 	jle	.Ltmp557 # Offset: 107
    00000071: 	leal	-0x4(%r8), %eax
    00000075: 	xorl	%r14d, %r14d
    00000078: 	leaq	0x20(%rsp), %r15
    0000007d: 	shrl	$0x2, %eax
    00000080: 	leaq	0x80020(%rsp), %r12
    00000088: 	leaq	0x100020(%rsp), %rbp
    00000090: 	movl	%eax, %edx
    00000092: 	leal	0x4(,%rax,4), %eax
    00000099: 	movl	%eax, 0x14(%rsp)
    0000009d: 	leaq	0x8(%r9,%rdx,8), %r13
.Ltmp562:
    000000a2: 	xorl	%esi, %esi
    000000a4: 	movl	$0x80000, %edx
    000000a9: 	movq	%rbx, %rdi
    000000ac: 	movl	%r8d, 0x8(%rsp)
    000000b1: 	movq	%r9, (%rsp)
    000000b5: 	callq	memset@PLT # Offset: 181
    000000ba: 	xorl	%esi, %esi
    000000bc: 	movl	$0x80000, %edx
    000000c1: 	movq	%r15, %rdi
    000000c4: 	callq	memset@PLT # Offset: 196
    000000c9: 	xorl	%esi, %esi
    000000cb: 	movl	$0x80000, %edx
    000000d0: 	movq	%r12, %rdi
    000000d3: 	callq	memset@PLT # Offset: 211
    000000d8: 	xorl	%esi, %esi
    000000da: 	movl	$0x80000, %edx
    000000df: 	movq	%rbp, %rdi
    000000e2: 	callq	memset@PLT # Offset: 226
    000000e7: 	movl	0x8(%rsp), %r8d
    000000ec: 	movq	(%rsp), %r9
    000000f0: 	cmpl	$0x3, %r8d
    000000f4: 	jle	.Ltmp558 # Offset: 244
    000000fa: 	movq	%r9, %rax
    000000fd: 	nopl	(%rax) # Size: 3
.Ltmp559:
    00000100: 	movzwl	0x2(%rax), %edi
    00000104: 	movzwl	0x4(%rax), %esi
    00000108: 	addq	$0x8, %rax
    0000010c: 	movzwl	-0x2(%rax), %edx
    00000110: 	movzwl	-0x8(%rax), %r11d
    00000115: 	addq	$0x1, 0x20(%rsp,%rdi,8)
    0000011b: 	addq	$0x1, (%rbx,%r11,8)
    00000120: 	addq	$0x1, 0x80020(%rsp,%rsi,8)
    00000129: 	addq	$0x1, 0x100020(%rsp,%rdx,8)
    00000132: 	cmpq	%rax, %r13
    00000135: 	jne	.Ltmp559 # Offset: 309
    00000137: 	movl	0x14(%rsp), %eax
.Ltmp570:
    0000013b: 	cmpl	%eax, %r8d
    0000013e: 	jle	.Ltmp560 # Offset: 318
    00000140: 	movslq	%eax, %rdx
    00000143: 	leaq	(%rdx,%rdx), %rsi
    00000147: 	movzwl	(%r9,%rdx,2), %edx
    0000014c: 	addq	$0x1, (%rbx,%rdx,8)
    00000151: 	leal	0x1(%rax), %edx
    00000154: 	cmpl	%edx, %r8d
    00000157: 	jle	.Ltmp560 # Offset: 343
    00000159: 	movzwl	0x2(%r9,%rsi), %edx
    0000015f: 	addq	$0x1, (%rbx,%rdx,8)
    00000164: 	leal	0x2(%rax), %edx
    00000167: 	cmpl	%edx, %r8d
    0000016a: 	jle	.Ltmp560 # Offset: 362
    0000016c: 	movzwl	0x4(%r9,%rsi), %edx
    00000172: 	addl	$0x3, %eax
    00000175: 	addq	$0x1, (%rbx,%rdx,8)
    0000017a: 	cmpl	%eax, %r8d
    0000017d: 	jle	.Ltmp560 # Offset: 381
    0000017f: 	movzwl	0x6(%r9,%rsi), %eax
    00000185: 	addq	$0x1, (%rbx,%rax,8)
.Ltmp560:
    0000018a: 	xorl	%eax, %eax
    0000018c: 	nopl	(%rax) # Size: 4
.Ltmp561:
    00000190: 	movdqu	(%rbx,%rax), %xmm1
    00000195: 	movdqa	(%rbp,%rax), %xmm0
    0000019b: 	paddq	(%r15,%rax), %xmm1
    000001a1: 	paddq	(%r12,%rax), %xmm0
    000001a7: 	paddq	%xmm1, %xmm0
    000001ab: 	movups	%xmm0, (%rbx,%rax)
    000001af: 	addq	$0x10, %rax
    000001b3: 	cmpq	$0x80000, %rax
    000001b9: 	jne	.Ltmp561 # Offset: 441
    000001bb: 	addl	$0x1, %r14d
    000001bf: 	cmpl	%r14d, iterations(%rip)
    000001c6: 	jg	.Ltmp562 # Offset: 454
.Ltmp557:
    000001cc: 	leaq	referenceHistogramS(%rip), %rbp
    000001d3: 	xorl	%r12d, %r12d
    000001d6: 	jmp	.Ltmp563 # Offset: 470
    000001d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp565:
    000001e0: 	addq	$0x1, %r12
    000001e4: 	addq	$0x8, %rbx
    000001e8: 	addq	$0x8, %rbp
    000001ec: 	cmpq	$0x10000, %r12
    000001f3: 	je	.Ltmp564 # Offset: 499
.Ltmp563:
    000001f9: 	movq	(%rbp), %rax
    000001fd: 	cmpq	%rax, (%rbx)
    00000200: 	je	.Ltmp565 # Offset: 512
    00000202: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    00000209: 	movl	$0x5, %edx
    0000020e: 	leaq	DATAat0x108e4(%rip), %rsi
    00000215: 	movq	%r13, %rdi
    00000218: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 536
    0000021d: 	cmpq	$0x0, 0x18(%rsp)
    00000223: 	je	.Ltmp566 # Offset: 547
    00000229: 	movq	0x18(%rsp), %r14
    0000022e: 	movq	%r14, %rdi
    00000231: 	callq	strlen@PLT # Offset: 561
    00000236: 	movq	%r14, %rsi
    00000239: 	movq	%r13, %rdi
    0000023c: 	movq	%rax, %rdx
    0000023f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 575
.Ltmp572:
    00000244: 	movl	$0xf, %edx
    00000249: 	leaq	DATAat0x108ea(%rip), %rsi
    00000250: 	movq	%r13, %rdi
    00000253: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 595
    00000258: 	movq	%r12, %rsi
    0000025b: 	movq	%r13, %rdi
    0000025e: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 606
    00000263: 	movl	$0xb, %edx
    00000268: 	leaq	DATAat0x108fa(%rip), %rsi
    0000026f: 	movq	%rax, %rdi
    00000272: 	movq	%rax, %r12
    00000275: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 629
    0000027a: 	movq	(%rbp), %rsi
    0000027e: 	movq	%r12, %rdi
    00000281: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 641
    00000286: 	movl	$0x4, %edx
    0000028b: 	leaq	DATAat0x10906(%rip), %rsi
    00000292: 	movq	%rax, %rdi
    00000295: 	movq	%rax, %rbp
    00000298: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 664
    0000029d: 	movq	(%rbx), %rsi
    000002a0: 	movq	%rbp, %rdi
    000002a3: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 675
    000002a8: 	movl	$0x2, %edx
    000002ad: 	leaq	DATAat0x1090b(%rip), %rsi
    000002b4: 	movq	%rax, %rbp
    000002b7: 	movq	%rax, %rdi
    000002ba: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 698
    000002bf: 	movq	(%rbp), %rax
    000002c3: 	movq	-0x18(%rax), %rax
    000002c7: 	movq	0xf0(%rbp,%rax), %r12
    000002cf: 	testq	%r12, %r12
    000002d2: 	je	.Ltmp567 # Offset: 722
    000002d8: 	cmpb	$0x0, 0x38(%r12)
    000002de: 	je	.Ltmp568 # Offset: 734
    000002e0: 	movsbl	0x43(%r12), %esi
    000002e6: 	movq	%rbp, %rdi
    000002e9: 	callq	_ZNSo3putEc@PLT # Offset: 745
    000002ee: 	movq	%rax, %rdi
    000002f1: 	callq	_ZNSo5flushEv@PLT # Offset: 753
.Ltmp564:
    000002f6: 	callq	clock@PLT # Offset: 758
    000002fb: 	movq	%rax, end_time(%rip)
    00000302: 	movq	0x180028(%rsp), %rdx
    0000030a: 	subq	%fs:0x28, %rdx
    00000313: 	jne	.Ltmp569 # Offset: 787
    00000319: 	subq	start_time(%rip), %rax
    00000320: 	pxor	%xmm0, %xmm0
    00000324: 	movq	0x18(%rsp), %rdi
    00000329: 	cvtsi2sd	%rax, %xmm0
    0000032e: 	divsd	DATAat0x10920(%rip), %xmm0
    00000336: 	addq	$0x180038, %rsp
    0000033d: 	popq	%rbx
    0000033e: 	popq	%rbp
    0000033f: 	popq	%r12
    00000341: 	popq	%r13
    00000343: 	popq	%r14
    00000345: 	popq	%r15
    00000347: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 839
.Ltmp558:
    0000034c: 	xorl	%eax, %eax
    0000034e: 	jmp	.Ltmp570 # Offset: 846
.Ltmp568:
    00000353: 	movq	%r12, %rdi
    00000356: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 854
    0000035b: 	movq	(%r12), %rax
    0000035f: 	movl	$0xa, %esi
    00000364: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    0000036b: 	movq	0x30(%rax), %rax
    0000036f: 	cmpq	%rdx, %rax
    00000372: 	jne	.Ltmp571 # Offset: 882
.Ltmp573:
    00000374: 	movq	%rbp, %rdi
    00000377: 	callq	_ZNSo3putEc@PLT # Offset: 887
    0000037c: 	movq	%rax, %rdi
    0000037f: 	callq	_ZNSo5flushEv@PLT # Offset: 895
    00000384: 	jmp	.Ltmp564 # Offset: 900
.Ltmp566:
    00000389: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000390: 	movq	-0x18(%rax), %rdi
    00000394: 	addq	%r13, %rdi
    00000397: 	movl	0x20(%rdi), %esi
    0000039a: 	orl	$0x1, %esi
    0000039d: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 925
    000003a2: 	jmp	.Ltmp572 # Offset: 930
.Ltmp571:
    000003a7: 	movq	%r12, %rdi
    000003aa: 	callq	*%rax # Offset: 938
    000003ac: 	movsbl	%al, %esi
    000003af: 	jmp	.Ltmp573 # Offset: 943
.Ltmp569:
    000003b1: 	callq	__stack_chk_fail@PLT # Offset: 945
.Ltmp567:
    000003b6: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 950
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_histogram5ItmEvPKT_iPT0_PKc"

Binary Function "_Z15test_histogram6ItEvPKtiPT_PKc" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x97e0
  Size        : 0x54c
  MaxSize     : 0x550
  Offset      : 0x97e0
  Section     : .text
  Orc Section : .local.text._Z15test_histogram6ItEvPKtiPT_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x60000(%rsp), %r11
.Ltmp574:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp574 # Offset: 37
    00000027: 	subq	$0x38, %rsp
    0000002b: 	movq	%rcx, 0x18(%rsp)
    00000030: 	movq	%rdi, %r14
    00000033: 	movl	%esi, %r15d
    00000036: 	movq	%rdx, %rbx
    00000039: 	movq	%fs:0x28, %rax
    00000042: 	movq	%rax, 0x60028(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	callq	clock@PLT # Offset: 76
    00000051: 	movq	%rax, start_time(%rip)
    00000058: 	movl	iterations(%rip), %eax
    0000005e: 	testl	%eax, %eax
    00000060: 	jle	.Ltmp575 # Offset: 96
    00000066: 	movq	%r14, %rax
    00000069: 	movl	$0x0, (%rsp)
    00000070: 	movl	%r15d, %r8d
    00000073: 	leaq	0x20(%rsp), %r13
    00000078: 	andl	$0x7, %eax
    0000007b: 	leaq	0x20020(%rsp), %r12
    00000083: 	leaq	0x40020(%rsp), %rbp
    0000008b: 	movq	%rax, 0x10(%rsp)
    00000090: 	leal	-0xf(%r15), %eax
    00000094: 	movl	%eax, 0x8(%rsp)
    00000098: 	leal	-0x3(%r15), %eax
    0000009c: 	movl	%eax, 0xc(%rsp)
    000000a0: 	leal	-0x1(%r15), %eax
    000000a4: 	leaq	0x2(%r14,%rax,2), %r15
.Ltmp584:
    000000a9: 	movl	$0x20000, %edx
    000000ae: 	xorl	%esi, %esi
    000000b0: 	movq	%rbx, %rdi
    000000b3: 	movl	%r8d, 0x4(%rsp)
    000000b8: 	callq	memset@PLT # Offset: 184
    000000bd: 	movl	$0x20000, %edx
    000000c2: 	xorl	%esi, %esi
    000000c4: 	movq	%r13, %rdi
    000000c7: 	callq	memset@PLT # Offset: 199
    000000cc: 	movl	$0x20000, %edx
    000000d1: 	xorl	%esi, %esi
    000000d3: 	movq	%r12, %rdi
    000000d6: 	callq	memset@PLT # Offset: 214
    000000db: 	movl	$0x20000, %edx
    000000e0: 	xorl	%esi, %esi
    000000e2: 	movq	%rbp, %rdi
    000000e5: 	callq	memset@PLT # Offset: 229
    000000ea: 	movl	0x4(%rsp), %r8d
    000000ef: 	testl	%r8d, %r8d
    000000f2: 	jle	.Ltmp576 # Offset: 242
    000000f8: 	cmpq	$0x0, 0x10(%rsp)
    000000fe: 	je	.Ltmp576 # Offset: 254
    00000104: 	movq	%r14, %rax
    00000107: 	nopw	(%rax,%rax) # Size: 9
.Ltmp577:
    00000110: 	movzwl	(%rax), %edx
    00000113: 	addq	$0x2, %rax
    00000117: 	addw	$0x1, (%rbx,%rdx,2)
    0000011c: 	cmpq	%rax, %r15
    0000011f: 	jne	.Ltmp577 # Offset: 287
    00000121: 	movl	%r8d, %r10d
.Ltmp592:
    00000124: 	cmpl	0x8(%rsp), %r10d
    00000129: 	jge	.Ltmp578 # Offset: 297
    0000012f: 	leal	-0x10(%r8), %eax
    00000133: 	movslq	%r10d, %rdx
    00000136: 	subl	%r10d, %eax
    00000139: 	leaq	(%r14,%rdx,2), %rdi
    0000013d: 	shrl	$0x4, %eax
    00000140: 	movl	%eax, 0x4(%rsp)
    00000144: 	shlq	$0x4, %rax
    00000148: 	addq	%rdx, %rax
    0000014b: 	leaq	0x20(%r14,%rax,2), %r11
.Ltmp579:
    00000150: 	movq	(%rdi), %rsi
    00000153: 	movq	0x8(%rdi), %rcx
    00000157: 	addq	$0x20, %rdi
    0000015b: 	movq	-0x10(%rdi), %rdx
    0000015f: 	movq	-0x8(%rdi), %rax
    00000163: 	movq	%rsi, %r9
    00000166: 	shrq	$0x30, %r9
    0000016a: 	addw	$0x1, (%rbx,%r9,2)
    00000170: 	movq	%rsi, %r9
    00000173: 	shrq	$0x20, %r9
    00000177: 	movzwl	%r9w, %r9d
    0000017b: 	addw	$0x1, 0x20(%rsp,%r9,2)
    00000182: 	movl	%esi, %r9d
    00000185: 	movzwl	%si, %esi
    00000188: 	addw	$0x1, 0x40020(%rsp,%rsi,2)
    00000191: 	movq	%rcx, %rsi
    00000194: 	shrl	$0x10, %r9d
    00000198: 	addw	$0x1, 0x20020(%rsp,%r9,2)
    000001a2: 	shrq	$0x30, %rsi
    000001a6: 	addw	$0x1, (%rbx,%rsi,2)
    000001ab: 	movq	%rcx, %rsi
    000001ae: 	shrq	$0x20, %rsi
    000001b2: 	movzwl	%si, %esi
    000001b5: 	addw	$0x1, 0x20(%rsp,%rsi,2)
    000001bb: 	movl	%ecx, %esi
    000001bd: 	movzwl	%cx, %ecx
    000001c0: 	addw	$0x1, 0x40020(%rsp,%rcx,2)
    000001c9: 	movq	%rdx, %rcx
    000001cc: 	shrl	$0x10, %esi
    000001cf: 	addw	$0x1, 0x20020(%rsp,%rsi,2)
    000001d8: 	shrq	$0x30, %rcx
    000001dc: 	addw	$0x1, (%rbx,%rcx,2)
    000001e1: 	movq	%rdx, %rcx
    000001e4: 	shrq	$0x20, %rcx
    000001e8: 	movzwl	%cx, %ecx
    000001eb: 	addw	$0x1, 0x20(%rsp,%rcx,2)
    000001f1: 	movl	%edx, %ecx
    000001f3: 	movzwl	%dx, %edx
    000001f6: 	addw	$0x1, 0x40020(%rsp,%rdx,2)
    000001ff: 	movq	%rax, %rdx
    00000202: 	shrl	$0x10, %ecx
    00000205: 	addw	$0x1, 0x20020(%rsp,%rcx,2)
    0000020e: 	shrq	$0x30, %rdx
    00000212: 	addw	$0x1, (%rbx,%rdx,2)
    00000217: 	movq	%rax, %rdx
    0000021a: 	shrq	$0x20, %rdx
    0000021e: 	movzwl	%dx, %edx
    00000221: 	addw	$0x1, 0x20(%rsp,%rdx,2)
    00000227: 	movl	%eax, %edx
    00000229: 	movzwl	%ax, %eax
    0000022c: 	shrl	$0x10, %edx
    0000022f: 	addw	$0x1, 0x20020(%rsp,%rdx,2)
    00000238: 	addw	$0x1, 0x40020(%rsp,%rax,2)
    00000241: 	cmpq	%rdi, %r11
    00000244: 	jne	.Ltmp579 # Offset: 580
    0000024a: 	movl	0x4(%rsp), %eax
    0000024e: 	shll	$0x4, %eax
    00000251: 	leal	0x10(%r10,%rax), %r10d
.Ltmp578:
    00000256: 	cmpl	0xc(%rsp), %r10d
    0000025b: 	jge	.Ltmp580 # Offset: 603
    0000025d: 	leal	-0x4(%r8), %edi
    00000261: 	movslq	%r10d, %rax
    00000264: 	subl	%r10d, %edi
    00000267: 	leaq	(%r14,%rax,2), %rcx
    0000026b: 	shrl	$0x2, %edi
    0000026e: 	movl	%edi, %edx
    00000270: 	leaq	(%rax,%rdx,4), %rax
    00000274: 	leaq	0x8(%r14,%rax,2), %rsi
    00000279: 	nopl	(%rax) # Size: 7
.Ltmp581:
    00000280: 	movq	(%rcx), %rax
    00000283: 	addq	$0x8, %rcx
    00000287: 	movq	%rax, %rdx
    0000028a: 	shrq	$0x30, %rdx
    0000028e: 	addw	$0x1, (%rbx,%rdx,2)
    00000293: 	movq	%rax, %rdx
    00000296: 	shrq	$0x20, %rdx
    0000029a: 	movzwl	%dx, %edx
    0000029d: 	addw	$0x1, 0x20(%rsp,%rdx,2)
    000002a3: 	movl	%eax, %edx
    000002a5: 	movzwl	%ax, %eax
    000002a8: 	addw	$0x1, 0x40020(%rsp,%rax,2)
    000002b1: 	shrl	$0x10, %edx
    000002b4: 	addw	$0x1, 0x20020(%rsp,%rdx,2)
    000002bd: 	cmpq	%rcx, %rsi
    000002c0: 	jne	.Ltmp581 # Offset: 704
    000002c2: 	leal	0x4(%r10,%rdi,4), %r10d
.Ltmp580:
    000002c7: 	cmpl	%r10d, %r8d
    000002ca: 	jle	.Ltmp582 # Offset: 714
    000002cc: 	movslq	%r10d, %rax
    000002cf: 	leaq	(%rax,%rax), %rdx
    000002d3: 	movzwl	(%r14,%rax,2), %eax
    000002d8: 	addw	$0x1, (%rbx,%rax,2)
    000002dd: 	leal	0x1(%r10), %eax
    000002e1: 	cmpl	%eax, %r8d
    000002e4: 	jle	.Ltmp582 # Offset: 740
    000002e6: 	movzwl	0x2(%r14,%rdx), %eax
    000002ec: 	addw	$0x1, (%rbx,%rax,2)
    000002f1: 	leal	0x2(%r10), %eax
    000002f5: 	cmpl	%eax, %r8d
    000002f8: 	jle	.Ltmp582 # Offset: 760
    000002fa: 	movzwl	0x4(%r14,%rdx), %eax
    00000300: 	addl	$0x3, %r10d
    00000304: 	addw	$0x1, (%rbx,%rax,2)
    00000309: 	cmpl	%r10d, %r8d
    0000030c: 	jle	.Ltmp582 # Offset: 780
    0000030e: 	movzwl	0x6(%r14,%rdx), %eax
    00000314: 	addw	$0x1, (%rbx,%rax,2)
.Ltmp582:
    00000319: 	xorl	%eax, %eax
    0000031b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp583:
    00000320: 	movdqu	(%rbx,%rax), %xmm0
    00000325: 	paddw	(%r13,%rax), %xmm0
    0000032c: 	paddw	(%r12,%rax), %xmm0
    00000332: 	paddw	(%rbp,%rax), %xmm0
    00000338: 	movups	%xmm0, (%rbx,%rax)
    0000033c: 	addq	$0x10, %rax
    00000340: 	cmpq	$0x20000, %rax
    00000346: 	jne	.Ltmp583 # Offset: 838
    00000348: 	addl	$0x1, (%rsp)
    0000034c: 	movl	(%rsp), %eax
    0000034f: 	cmpl	%eax, iterations(%rip)
    00000355: 	jg	.Ltmp584 # Offset: 853
.Ltmp575:
    0000035b: 	leaq	referenceHistogramS(%rip), %rbp
    00000362: 	xorl	%r12d, %r12d
    00000365: 	jmp	.Ltmp585 # Offset: 869
    00000367: 	nopw	(%rax,%rax) # Size: 9
.Ltmp587:
    00000370: 	addq	$0x1, %r12
    00000374: 	addq	$0x2, %rbx
    00000378: 	addq	$0x8, %rbp
    0000037c: 	cmpq	$0x10000, %r12
    00000383: 	je	.Ltmp586 # Offset: 899
.Ltmp585:
    00000389: 	movzwl	(%rbp), %eax
    0000038d: 	cmpw	%ax, (%rbx)
    00000390: 	je	.Ltmp587 # Offset: 912
    00000392: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    00000399: 	movl	$0x5, %edx
    0000039e: 	leaq	DATAat0x108e4(%rip), %rsi
    000003a5: 	movq	%r13, %rdi
    000003a8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 936
    000003ad: 	cmpq	$0x0, 0x18(%rsp)
    000003b3: 	je	.Ltmp588 # Offset: 947
    000003b9: 	movq	0x18(%rsp), %r14
    000003be: 	movq	%r14, %rdi
    000003c1: 	callq	strlen@PLT # Offset: 961
    000003c6: 	movq	%r14, %rsi
    000003c9: 	movq	%r13, %rdi
    000003cc: 	movq	%rax, %rdx
    000003cf: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 975
.Ltmp594:
    000003d4: 	movl	$0xf, %edx
    000003d9: 	leaq	DATAat0x108ea(%rip), %rsi
    000003e0: 	movq	%r13, %rdi
    000003e3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 995
    000003e8: 	movq	%r12, %rsi
    000003eb: 	movq	%r13, %rdi
    000003ee: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 1006
    000003f3: 	movl	$0xb, %edx
    000003f8: 	leaq	DATAat0x108fa(%rip), %rsi
    000003ff: 	movq	%rax, %rdi
    00000402: 	movq	%rax, %r12
    00000405: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1029
    0000040a: 	movq	(%rbp), %rsi
    0000040e: 	movq	%r12, %rdi
    00000411: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 1041
    00000416: 	movl	$0x4, %edx
    0000041b: 	leaq	DATAat0x10906(%rip), %rsi
    00000422: 	movq	%rax, %rdi
    00000425: 	movq	%rax, %rbp
    00000428: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1064
    0000042d: 	movzwl	(%rbx), %esi
    00000430: 	movq	%rbp, %rdi
    00000433: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 1075
    00000438: 	movl	$0x2, %edx
    0000043d: 	leaq	DATAat0x1090b(%rip), %rsi
    00000444: 	movq	%rax, %rbp
    00000447: 	movq	%rax, %rdi
    0000044a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1098
    0000044f: 	movq	(%rbp), %rax
    00000453: 	movq	-0x18(%rax), %rax
    00000457: 	movq	0xf0(%rbp,%rax), %r12
    0000045f: 	testq	%r12, %r12
    00000462: 	je	.Ltmp589 # Offset: 1122
    00000468: 	cmpb	$0x0, 0x38(%r12)
    0000046e: 	je	.Ltmp590 # Offset: 1134
    00000470: 	movsbl	0x43(%r12), %esi
    00000476: 	movq	%rbp, %rdi
    00000479: 	callq	_ZNSo3putEc@PLT # Offset: 1145
    0000047e: 	movq	%rax, %rdi
    00000481: 	callq	_ZNSo5flushEv@PLT # Offset: 1153
.Ltmp586:
    00000486: 	callq	clock@PLT # Offset: 1158
    0000048b: 	movq	%rax, end_time(%rip)
    00000492: 	movq	0x60028(%rsp), %rdx
    0000049a: 	subq	%fs:0x28, %rdx
    000004a3: 	jne	.Ltmp591 # Offset: 1187
    000004a9: 	subq	start_time(%rip), %rax
    000004b0: 	pxor	%xmm0, %xmm0
    000004b4: 	movq	0x18(%rsp), %rdi
    000004b9: 	cvtsi2sd	%rax, %xmm0
    000004be: 	divsd	DATAat0x10920(%rip), %xmm0
    000004c6: 	addq	$0x60038, %rsp
    000004cd: 	popq	%rbx
    000004ce: 	popq	%rbp
    000004cf: 	popq	%r12
    000004d1: 	popq	%r13
    000004d3: 	popq	%r14
    000004d5: 	popq	%r15
    000004d7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1239
.Ltmp576:
    000004dc: 	xorl	%r10d, %r10d
    000004df: 	jmp	.Ltmp592 # Offset: 1247
.Ltmp590:
    000004e4: 	movq	%r12, %rdi
    000004e7: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 1255
    000004ec: 	movq	(%r12), %rax
    000004f0: 	movl	$0xa, %esi
    000004f5: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    000004fc: 	movq	0x30(%rax), %rax
    00000500: 	cmpq	%rdx, %rax
    00000503: 	jne	.Ltmp593 # Offset: 1283
.Ltmp595:
    00000505: 	movq	%rbp, %rdi
    00000508: 	callq	_ZNSo3putEc@PLT # Offset: 1288
    0000050d: 	movq	%rax, %rdi
    00000510: 	callq	_ZNSo5flushEv@PLT # Offset: 1296
    00000515: 	jmp	.Ltmp586 # Offset: 1301
.Ltmp588:
    0000051a: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000521: 	movq	-0x18(%rax), %rdi
    00000525: 	addq	%r13, %rdi
    00000528: 	movl	0x20(%rdi), %esi
    0000052b: 	orl	$0x1, %esi
    0000052e: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1326
    00000533: 	jmp	.Ltmp594 # Offset: 1331
.Ltmp593:
    00000538: 	movq	%r12, %rdi
    0000053b: 	callq	*%rax # Offset: 1339
    0000053d: 	movsbl	%al, %esi
    00000540: 	jmp	.Ltmp595 # Offset: 1344
.Ltmp591:
    00000542: 	callq	__stack_chk_fail@PLT # Offset: 1346
.Ltmp589:
    00000547: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 1351
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_histogram6ItEvPKtiPT_PKc"

Binary Function "_Z15test_histogram6IjEvPKtiPT_PKc" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x9d30
  Size        : 0x529
  MaxSize     : 0x530
  Offset      : 0x9d30
  Section     : .text
  Orc Section : .local.text._Z15test_histogram6IjEvPKtiPT_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0xc0000(%rsp), %r11
.Ltmp596:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp596 # Offset: 37
    00000027: 	subq	$0x38, %rsp
    0000002b: 	movq	%rcx, 0x18(%rsp)
    00000030: 	movq	%rdi, %r14
    00000033: 	movl	%esi, %r15d
    00000036: 	movq	%rdx, %rbx
    00000039: 	movq	%fs:0x28, %rax
    00000042: 	movq	%rax, 0xc0028(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	callq	clock@PLT # Offset: 76
    00000051: 	movq	%rax, start_time(%rip)
    00000058: 	movl	iterations(%rip), %eax
    0000005e: 	testl	%eax, %eax
    00000060: 	jle	.Ltmp597 # Offset: 96
    00000066: 	movq	%r14, %rax
    00000069: 	movl	$0x0, (%rsp)
    00000070: 	movl	%r15d, %r8d
    00000073: 	leaq	0x20(%rsp), %r13
    00000078: 	andl	$0x7, %eax
    0000007b: 	leaq	0x40020(%rsp), %r12
    00000083: 	leaq	0x80020(%rsp), %rbp
    0000008b: 	movq	%rax, 0x10(%rsp)
    00000090: 	leal	-0xf(%r15), %eax
    00000094: 	movl	%eax, 0x8(%rsp)
    00000098: 	leal	-0x3(%r15), %eax
    0000009c: 	movl	%eax, 0xc(%rsp)
    000000a0: 	leal	-0x1(%r15), %eax
    000000a4: 	leaq	0x2(%r14,%rax,2), %r15
.Ltmp606:
    000000a9: 	movl	$0x40000, %edx
    000000ae: 	xorl	%esi, %esi
    000000b0: 	movq	%rbx, %rdi
    000000b3: 	movl	%r8d, 0x4(%rsp)
    000000b8: 	callq	memset@PLT # Offset: 184
    000000bd: 	movl	$0x40000, %edx
    000000c2: 	xorl	%esi, %esi
    000000c4: 	movq	%r13, %rdi
    000000c7: 	callq	memset@PLT # Offset: 199
    000000cc: 	movl	$0x40000, %edx
    000000d1: 	xorl	%esi, %esi
    000000d3: 	movq	%r12, %rdi
    000000d6: 	callq	memset@PLT # Offset: 214
    000000db: 	movl	$0x40000, %edx
    000000e0: 	xorl	%esi, %esi
    000000e2: 	movq	%rbp, %rdi
    000000e5: 	callq	memset@PLT # Offset: 229
    000000ea: 	movl	0x4(%rsp), %r8d
    000000ef: 	testl	%r8d, %r8d
    000000f2: 	jle	.Ltmp598 # Offset: 242
    000000f8: 	cmpq	$0x0, 0x10(%rsp)
    000000fe: 	je	.Ltmp598 # Offset: 254
    00000104: 	movq	%r14, %rax
    00000107: 	nopw	(%rax,%rax) # Size: 9
.Ltmp599:
    00000110: 	movzwl	(%rax), %edx
    00000113: 	addq	$0x2, %rax
    00000117: 	addl	$0x1, (%rbx,%rdx,4)
    0000011b: 	cmpq	%rax, %r15
    0000011e: 	jne	.Ltmp599 # Offset: 286
    00000120: 	movl	%r8d, %r10d
.Ltmp614:
    00000123: 	cmpl	0x8(%rsp), %r10d
    00000128: 	jge	.Ltmp600 # Offset: 296
    0000012e: 	leal	-0x10(%r8), %eax
    00000132: 	movslq	%r10d, %rdx
    00000135: 	subl	%r10d, %eax
    00000138: 	leaq	(%r14,%rdx,2), %rdi
    0000013c: 	shrl	$0x4, %eax
    0000013f: 	movl	%eax, 0x4(%rsp)
    00000143: 	shlq	$0x4, %rax
    00000147: 	addq	%rdx, %rax
    0000014a: 	leaq	0x20(%r14,%rax,2), %r11
    0000014f: 	nop # Size: 1
.Ltmp601:
    00000150: 	movq	(%rdi), %rsi
    00000153: 	movq	0x8(%rdi), %rcx
    00000157: 	addq	$0x20, %rdi
    0000015b: 	movq	-0x10(%rdi), %rdx
    0000015f: 	movq	-0x8(%rdi), %rax
    00000163: 	movq	%rsi, %r9
    00000166: 	shrq	$0x30, %r9
    0000016a: 	addl	$0x1, (%rbx,%r9,4)
    0000016f: 	movq	%rsi, %r9
    00000172: 	shrq	$0x20, %r9
    00000176: 	movzwl	%r9w, %r9d
    0000017a: 	addl	$0x1, 0x20(%rsp,%r9,4)
    00000180: 	movl	%esi, %r9d
    00000183: 	movzwl	%si, %esi
    00000186: 	addl	$0x1, 0x80020(%rsp,%rsi,4)
    0000018e: 	movq	%rcx, %rsi
    00000191: 	shrl	$0x10, %r9d
    00000195: 	addl	$0x1, 0x40020(%rsp,%r9,4)
    0000019e: 	shrq	$0x30, %rsi
    000001a2: 	addl	$0x1, (%rbx,%rsi,4)
    000001a6: 	movq	%rcx, %rsi
    000001a9: 	shrq	$0x20, %rsi
    000001ad: 	movzwl	%si, %esi
    000001b0: 	addl	$0x1, 0x20(%rsp,%rsi,4)
    000001b5: 	movl	%ecx, %esi
    000001b7: 	movzwl	%cx, %ecx
    000001ba: 	addl	$0x1, 0x80020(%rsp,%rcx,4)
    000001c2: 	movq	%rdx, %rcx
    000001c5: 	shrl	$0x10, %esi
    000001c8: 	shrq	$0x30, %rcx
    000001cc: 	addl	$0x1, 0x40020(%rsp,%rsi,4)
    000001d4: 	addl	$0x1, (%rbx,%rcx,4)
    000001d8: 	movq	%rdx, %rcx
    000001db: 	shrq	$0x20, %rcx
    000001df: 	movzwl	%cx, %ecx
    000001e2: 	addl	$0x1, 0x20(%rsp,%rcx,4)
    000001e7: 	movl	%edx, %ecx
    000001e9: 	movzwl	%dx, %edx
    000001ec: 	addl	$0x1, 0x80020(%rsp,%rdx,4)
    000001f4: 	movq	%rax, %rdx
    000001f7: 	shrl	$0x10, %ecx
    000001fa: 	shrq	$0x30, %rdx
    000001fe: 	addl	$0x1, 0x40020(%rsp,%rcx,4)
    00000206: 	addl	$0x1, (%rbx,%rdx,4)
    0000020a: 	movq	%rax, %rdx
    0000020d: 	shrq	$0x20, %rdx
    00000211: 	movzwl	%dx, %edx
    00000214: 	addl	$0x1, 0x20(%rsp,%rdx,4)
    00000219: 	movl	%eax, %edx
    0000021b: 	movzwl	%ax, %eax
    0000021e: 	shrl	$0x10, %edx
    00000221: 	addl	$0x1, 0x40020(%rsp,%rdx,4)
    00000229: 	addl	$0x1, 0x80020(%rsp,%rax,4)
    00000231: 	cmpq	%rdi, %r11
    00000234: 	jne	.Ltmp601 # Offset: 564
    0000023a: 	movl	0x4(%rsp), %eax
    0000023e: 	shll	$0x4, %eax
    00000241: 	leal	0x10(%r10,%rax), %r10d
.Ltmp600:
    00000246: 	cmpl	0xc(%rsp), %r10d
    0000024b: 	jge	.Ltmp602 # Offset: 587
    0000024d: 	leal	-0x4(%r8), %edi
    00000251: 	movslq	%r10d, %rax
    00000254: 	subl	%r10d, %edi
    00000257: 	leaq	(%r14,%rax,2), %rcx
    0000025b: 	shrl	$0x2, %edi
    0000025e: 	movl	%edi, %edx
    00000260: 	leaq	(%rax,%rdx,4), %rax
    00000264: 	leaq	0x8(%r14,%rax,2), %rsi
    00000269: 	nopl	(%rax) # Size: 7
.Ltmp603:
    00000270: 	movq	(%rcx), %rax
    00000273: 	addq	$0x8, %rcx
    00000277: 	movq	%rax, %rdx
    0000027a: 	shrq	$0x30, %rdx
    0000027e: 	addl	$0x1, (%rbx,%rdx,4)
    00000282: 	movq	%rax, %rdx
    00000285: 	shrq	$0x20, %rdx
    00000289: 	movzwl	%dx, %edx
    0000028c: 	addl	$0x1, 0x20(%rsp,%rdx,4)
    00000291: 	movl	%eax, %edx
    00000293: 	movzwl	%ax, %eax
    00000296: 	shrl	$0x10, %edx
    00000299: 	addl	$0x1, 0x80020(%rsp,%rax,4)
    000002a1: 	addl	$0x1, 0x40020(%rsp,%rdx,4)
    000002a9: 	cmpq	%rcx, %rsi
    000002ac: 	jne	.Ltmp603 # Offset: 684
    000002ae: 	leal	0x4(%r10,%rdi,4), %r10d
.Ltmp602:
    000002b3: 	cmpl	%r10d, %r8d
    000002b6: 	jle	.Ltmp604 # Offset: 694
    000002b8: 	movslq	%r10d, %rax
    000002bb: 	leaq	(%rax,%rax), %rdx
    000002bf: 	movzwl	(%r14,%rax,2), %eax
    000002c4: 	addl	$0x1, (%rbx,%rax,4)
    000002c8: 	leal	0x1(%r10), %eax
    000002cc: 	cmpl	%eax, %r8d
    000002cf: 	jle	.Ltmp604 # Offset: 719
    000002d1: 	movzwl	0x2(%r14,%rdx), %eax
    000002d7: 	addl	$0x1, (%rbx,%rax,4)
    000002db: 	leal	0x2(%r10), %eax
    000002df: 	cmpl	%eax, %r8d
    000002e2: 	jle	.Ltmp604 # Offset: 738
    000002e4: 	movzwl	0x4(%r14,%rdx), %eax
    000002ea: 	addl	$0x3, %r10d
    000002ee: 	addl	$0x1, (%rbx,%rax,4)
    000002f2: 	cmpl	%r10d, %r8d
    000002f5: 	jle	.Ltmp604 # Offset: 757
    000002f7: 	movzwl	0x6(%r14,%rdx), %eax
    000002fd: 	addl	$0x1, (%rbx,%rax,4)
.Ltmp604:
    00000301: 	xorl	%eax, %eax
    00000303: 	nopl	(%rax,%rax) # Size: 5
.Ltmp605:
    00000308: 	movdqu	(%rbx,%rax), %xmm0
    0000030d: 	paddd	(%r13,%rax), %xmm0
    00000314: 	paddd	(%r12,%rax), %xmm0
    0000031a: 	paddd	(%rbp,%rax), %xmm0
    00000320: 	movups	%xmm0, (%rbx,%rax)
    00000324: 	addq	$0x10, %rax
    00000328: 	cmpq	$0x40000, %rax
    0000032e: 	jne	.Ltmp605 # Offset: 814
    00000330: 	addl	$0x1, (%rsp)
    00000334: 	movl	(%rsp), %eax
    00000337: 	cmpl	%eax, iterations(%rip)
    0000033d: 	jg	.Ltmp606 # Offset: 829
.Ltmp597:
    00000343: 	leaq	referenceHistogramS(%rip), %rbp
    0000034a: 	xorl	%r12d, %r12d
    0000034d: 	jmp	.Ltmp607 # Offset: 845
    0000034f: 	nop # Size: 1
.Ltmp609:
    00000350: 	addq	$0x1, %r12
    00000354: 	addq	$0x4, %rbx
    00000358: 	addq	$0x8, %rbp
    0000035c: 	cmpq	$0x10000, %r12
    00000363: 	je	.Ltmp608 # Offset: 867
.Ltmp607:
    00000369: 	movl	(%rbp), %eax
    0000036c: 	cmpl	%eax, (%rbx)
    0000036e: 	je	.Ltmp609 # Offset: 878
    00000370: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    00000377: 	movl	$0x5, %edx
    0000037c: 	leaq	DATAat0x108e4(%rip), %rsi
    00000383: 	movq	%r13, %rdi
    00000386: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 902
    0000038b: 	cmpq	$0x0, 0x18(%rsp)
    00000391: 	je	.Ltmp610 # Offset: 913
    00000397: 	movq	0x18(%rsp), %r14
    0000039c: 	movq	%r14, %rdi
    0000039f: 	callq	strlen@PLT # Offset: 927
    000003a4: 	movq	%r14, %rsi
    000003a7: 	movq	%r13, %rdi
    000003aa: 	movq	%rax, %rdx
    000003ad: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 941
.Ltmp616:
    000003b2: 	movl	$0xf, %edx
    000003b7: 	leaq	DATAat0x108ea(%rip), %rsi
    000003be: 	movq	%r13, %rdi
    000003c1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 961
    000003c6: 	movq	%r12, %rsi
    000003c9: 	movq	%r13, %rdi
    000003cc: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 972
    000003d1: 	movl	$0xb, %edx
    000003d6: 	leaq	DATAat0x108fa(%rip), %rsi
    000003dd: 	movq	%rax, %rdi
    000003e0: 	movq	%rax, %r12
    000003e3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 995
    000003e8: 	movq	(%rbp), %rsi
    000003ec: 	movq	%r12, %rdi
    000003ef: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 1007
    000003f4: 	movl	$0x4, %edx
    000003f9: 	leaq	DATAat0x10906(%rip), %rsi
    00000400: 	movq	%rax, %rdi
    00000403: 	movq	%rax, %rbp
    00000406: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1030
    0000040b: 	movl	(%rbx), %esi
    0000040d: 	movq	%rbp, %rdi
    00000410: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 1040
    00000415: 	movl	$0x2, %edx
    0000041a: 	leaq	DATAat0x1090b(%rip), %rsi
    00000421: 	movq	%rax, %rbp
    00000424: 	movq	%rax, %rdi
    00000427: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1063
    0000042c: 	movq	(%rbp), %rax
    00000430: 	movq	-0x18(%rax), %rax
    00000434: 	movq	0xf0(%rbp,%rax), %r12
    0000043c: 	testq	%r12, %r12
    0000043f: 	je	.Ltmp611 # Offset: 1087
    00000445: 	cmpb	$0x0, 0x38(%r12)
    0000044b: 	je	.Ltmp612 # Offset: 1099
    0000044d: 	movsbl	0x43(%r12), %esi
    00000453: 	movq	%rbp, %rdi
    00000456: 	callq	_ZNSo3putEc@PLT # Offset: 1110
    0000045b: 	movq	%rax, %rdi
    0000045e: 	callq	_ZNSo5flushEv@PLT # Offset: 1118
.Ltmp608:
    00000463: 	callq	clock@PLT # Offset: 1123
    00000468: 	movq	%rax, end_time(%rip)
    0000046f: 	movq	0xc0028(%rsp), %rdx
    00000477: 	subq	%fs:0x28, %rdx
    00000480: 	jne	.Ltmp613 # Offset: 1152
    00000486: 	subq	start_time(%rip), %rax
    0000048d: 	pxor	%xmm0, %xmm0
    00000491: 	movq	0x18(%rsp), %rdi
    00000496: 	cvtsi2sd	%rax, %xmm0
    0000049b: 	divsd	DATAat0x10920(%rip), %xmm0
    000004a3: 	addq	$0xc0038, %rsp
    000004aa: 	popq	%rbx
    000004ab: 	popq	%rbp
    000004ac: 	popq	%r12
    000004ae: 	popq	%r13
    000004b0: 	popq	%r14
    000004b2: 	popq	%r15
    000004b4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1204
.Ltmp598:
    000004b9: 	xorl	%r10d, %r10d
    000004bc: 	jmp	.Ltmp614 # Offset: 1212
.Ltmp612:
    000004c1: 	movq	%r12, %rdi
    000004c4: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 1220
    000004c9: 	movq	(%r12), %rax
    000004cd: 	movl	$0xa, %esi
    000004d2: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    000004d9: 	movq	0x30(%rax), %rax
    000004dd: 	cmpq	%rdx, %rax
    000004e0: 	jne	.Ltmp615 # Offset: 1248
.Ltmp617:
    000004e2: 	movq	%rbp, %rdi
    000004e5: 	callq	_ZNSo3putEc@PLT # Offset: 1253
    000004ea: 	movq	%rax, %rdi
    000004ed: 	callq	_ZNSo5flushEv@PLT # Offset: 1261
    000004f2: 	jmp	.Ltmp608 # Offset: 1266
.Ltmp610:
    000004f7: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000004fe: 	movq	-0x18(%rax), %rdi
    00000502: 	addq	%r13, %rdi
    00000505: 	movl	0x20(%rdi), %esi
    00000508: 	orl	$0x1, %esi
    0000050b: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1291
    00000510: 	jmp	.Ltmp616 # Offset: 1296
.Ltmp615:
    00000515: 	movq	%r12, %rdi
    00000518: 	callq	*%rax # Offset: 1304
    0000051a: 	movsbl	%al, %esi
    0000051d: 	jmp	.Ltmp617 # Offset: 1309
.Ltmp613:
    0000051f: 	callq	__stack_chk_fail@PLT # Offset: 1311
.Ltmp611:
    00000524: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 1316
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_histogram6IjEvPKtiPT_PKc"

Binary Function "_Z15test_histogram6ImEvPKtiPT_PKc" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0xa260
  Size        : 0x54c
  MaxSize     : 0x550
  Offset      : 0xa260
  Section     : .text
  Orc Section : .local.text._Z15test_histogram6ImEvPKtiPT_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x180000(%rsp), %r11
.Ltmp618:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp618 # Offset: 37
    00000027: 	subq	$0x38, %rsp
    0000002b: 	movq	%rcx, 0x18(%rsp)
    00000030: 	movq	%rdi, %r14
    00000033: 	movl	%esi, %r15d
    00000036: 	movq	%rdx, %rbx
    00000039: 	movq	%fs:0x28, %rax
    00000042: 	movq	%rax, 0x180028(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	callq	clock@PLT # Offset: 76
    00000051: 	movq	%rax, start_time(%rip)
    00000058: 	movl	iterations(%rip), %eax
    0000005e: 	testl	%eax, %eax
    00000060: 	jle	.Ltmp619 # Offset: 96
    00000066: 	movq	%r14, %rax
    00000069: 	movl	$0x0, (%rsp)
    00000070: 	movl	%r15d, %r8d
    00000073: 	leaq	0x20(%rsp), %r13
    00000078: 	andl	$0x7, %eax
    0000007b: 	leaq	0x80020(%rsp), %r12
    00000083: 	leaq	0x100020(%rsp), %rbp
    0000008b: 	movq	%rax, 0x10(%rsp)
    00000090: 	leal	-0xf(%r15), %eax
    00000094: 	movl	%eax, 0x8(%rsp)
    00000098: 	leal	-0x3(%r15), %eax
    0000009c: 	movl	%eax, 0xc(%rsp)
    000000a0: 	leal	-0x1(%r15), %eax
    000000a4: 	leaq	0x2(%r14,%rax,2), %r15
.Ltmp628:
    000000a9: 	movl	$0x80000, %edx
    000000ae: 	xorl	%esi, %esi
    000000b0: 	movq	%rbx, %rdi
    000000b3: 	movl	%r8d, 0x4(%rsp)
    000000b8: 	callq	memset@PLT # Offset: 184
    000000bd: 	movl	$0x80000, %edx
    000000c2: 	xorl	%esi, %esi
    000000c4: 	movq	%r13, %rdi
    000000c7: 	callq	memset@PLT # Offset: 199
    000000cc: 	movl	$0x80000, %edx
    000000d1: 	xorl	%esi, %esi
    000000d3: 	movq	%r12, %rdi
    000000d6: 	callq	memset@PLT # Offset: 214
    000000db: 	movl	$0x80000, %edx
    000000e0: 	xorl	%esi, %esi
    000000e2: 	movq	%rbp, %rdi
    000000e5: 	callq	memset@PLT # Offset: 229
    000000ea: 	movl	0x4(%rsp), %r8d
    000000ef: 	testl	%r8d, %r8d
    000000f2: 	jle	.Ltmp620 # Offset: 242
    000000f8: 	cmpq	$0x0, 0x10(%rsp)
    000000fe: 	je	.Ltmp620 # Offset: 254
    00000104: 	movq	%r14, %rax
    00000107: 	nopw	(%rax,%rax) # Size: 9
.Ltmp621:
    00000110: 	movzwl	(%rax), %edx
    00000113: 	addq	$0x2, %rax
    00000117: 	addq	$0x1, (%rbx,%rdx,8)
    0000011c: 	cmpq	%rax, %r15
    0000011f: 	jne	.Ltmp621 # Offset: 287
    00000121: 	movl	%r8d, %r10d
.Ltmp636:
    00000124: 	cmpl	0x8(%rsp), %r10d
    00000129: 	jge	.Ltmp622 # Offset: 297
    0000012f: 	leal	-0x10(%r8), %eax
    00000133: 	movslq	%r10d, %rdx
    00000136: 	subl	%r10d, %eax
    00000139: 	leaq	(%r14,%rdx,2), %rdi
    0000013d: 	shrl	$0x4, %eax
    00000140: 	movl	%eax, 0x4(%rsp)
    00000144: 	shlq	$0x4, %rax
    00000148: 	addq	%rdx, %rax
    0000014b: 	leaq	0x20(%r14,%rax,2), %r11
.Ltmp623:
    00000150: 	movq	(%rdi), %rsi
    00000153: 	movq	0x8(%rdi), %rcx
    00000157: 	addq	$0x20, %rdi
    0000015b: 	movq	-0x10(%rdi), %rdx
    0000015f: 	movq	-0x8(%rdi), %rax
    00000163: 	movq	%rsi, %r9
    00000166: 	shrq	$0x30, %r9
    0000016a: 	addq	$0x1, (%rbx,%r9,8)
    0000016f: 	movq	%rsi, %r9
    00000172: 	shrq	$0x20, %r9
    00000176: 	movzwl	%r9w, %r9d
    0000017a: 	addq	$0x1, 0x20(%rsp,%r9,8)
    00000180: 	movl	%esi, %r9d
    00000183: 	movzwl	%si, %esi
    00000186: 	addq	$0x1, 0x100020(%rsp,%rsi,8)
    0000018f: 	movq	%rcx, %rsi
    00000192: 	shrl	$0x10, %r9d
    00000196: 	addq	$0x1, 0x80020(%rsp,%r9,8)
    0000019f: 	shrq	$0x30, %rsi
    000001a3: 	addq	$0x1, (%rbx,%rsi,8)
    000001a8: 	movq	%rcx, %rsi
    000001ab: 	shrq	$0x20, %rsi
    000001af: 	movzwl	%si, %esi
    000001b2: 	addq	$0x1, 0x20(%rsp,%rsi,8)
    000001b8: 	movl	%ecx, %esi
    000001ba: 	movzwl	%cx, %ecx
    000001bd: 	addq	$0x1, 0x100020(%rsp,%rcx,8)
    000001c6: 	movq	%rdx, %rcx
    000001c9: 	shrl	$0x10, %esi
    000001cc: 	addq	$0x1, 0x80020(%rsp,%rsi,8)
    000001d5: 	shrq	$0x30, %rcx
    000001d9: 	addq	$0x1, (%rbx,%rcx,8)
    000001de: 	movq	%rdx, %rcx
    000001e1: 	shrq	$0x20, %rcx
    000001e5: 	movzwl	%cx, %ecx
    000001e8: 	addq	$0x1, 0x20(%rsp,%rcx,8)
    000001ee: 	movl	%edx, %ecx
    000001f0: 	movzwl	%dx, %edx
    000001f3: 	addq	$0x1, 0x100020(%rsp,%rdx,8)
    000001fc: 	movq	%rax, %rdx
    000001ff: 	shrl	$0x10, %ecx
    00000202: 	addq	$0x1, 0x80020(%rsp,%rcx,8)
    0000020b: 	shrq	$0x30, %rdx
    0000020f: 	addq	$0x1, (%rbx,%rdx,8)
    00000214: 	movq	%rax, %rdx
    00000217: 	shrq	$0x20, %rdx
    0000021b: 	movzwl	%dx, %edx
    0000021e: 	addq	$0x1, 0x20(%rsp,%rdx,8)
    00000224: 	movl	%eax, %edx
    00000226: 	movzwl	%ax, %eax
    00000229: 	shrl	$0x10, %edx
    0000022c: 	addq	$0x1, 0x80020(%rsp,%rdx,8)
    00000235: 	addq	$0x1, 0x100020(%rsp,%rax,8)
    0000023e: 	cmpq	%rdi, %r11
    00000241: 	jne	.Ltmp623 # Offset: 577
    00000247: 	movl	0x4(%rsp), %eax
    0000024b: 	shll	$0x4, %eax
    0000024e: 	leal	0x10(%r10,%rax), %r10d
.Ltmp622:
    00000253: 	cmpl	0xc(%rsp), %r10d
    00000258: 	jge	.Ltmp624 # Offset: 600
    0000025a: 	leal	-0x4(%r8), %edi
    0000025e: 	movslq	%r10d, %rax
    00000261: 	subl	%r10d, %edi
    00000264: 	leaq	(%r14,%rax,2), %rcx
    00000268: 	shrl	$0x2, %edi
    0000026b: 	movl	%edi, %edx
    0000026d: 	leaq	(%rax,%rdx,4), %rax
    00000271: 	leaq	0x8(%r14,%rax,2), %rsi
    00000276: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp625:
    00000280: 	movq	(%rcx), %rax
    00000283: 	addq	$0x8, %rcx
    00000287: 	movq	%rax, %rdx
    0000028a: 	shrq	$0x30, %rdx
    0000028e: 	addq	$0x1, (%rbx,%rdx,8)
    00000293: 	movq	%rax, %rdx
    00000296: 	shrq	$0x20, %rdx
    0000029a: 	movzwl	%dx, %edx
    0000029d: 	addq	$0x1, 0x20(%rsp,%rdx,8)
    000002a3: 	movl	%eax, %edx
    000002a5: 	movzwl	%ax, %eax
    000002a8: 	addq	$0x1, 0x100020(%rsp,%rax,8)
    000002b1: 	shrl	$0x10, %edx
    000002b4: 	addq	$0x1, 0x80020(%rsp,%rdx,8)
    000002bd: 	cmpq	%rcx, %rsi
    000002c0: 	jne	.Ltmp625 # Offset: 704
    000002c2: 	leal	0x4(%r10,%rdi,4), %r10d
.Ltmp624:
    000002c7: 	cmpl	%r10d, %r8d
    000002ca: 	jle	.Ltmp626 # Offset: 714
    000002cc: 	movslq	%r10d, %rax
    000002cf: 	leaq	(%rax,%rax), %rdx
    000002d3: 	movzwl	(%r14,%rax,2), %eax
    000002d8: 	addq	$0x1, (%rbx,%rax,8)
    000002dd: 	leal	0x1(%r10), %eax
    000002e1: 	cmpl	%eax, %r8d
    000002e4: 	jle	.Ltmp626 # Offset: 740
    000002e6: 	movzwl	0x2(%r14,%rdx), %eax
    000002ec: 	addq	$0x1, (%rbx,%rax,8)
    000002f1: 	leal	0x2(%r10), %eax
    000002f5: 	cmpl	%eax, %r8d
    000002f8: 	jle	.Ltmp626 # Offset: 760
    000002fa: 	movzwl	0x4(%r14,%rdx), %eax
    00000300: 	addl	$0x3, %r10d
    00000304: 	addq	$0x1, (%rbx,%rax,8)
    00000309: 	cmpl	%r10d, %r8d
    0000030c: 	jle	.Ltmp626 # Offset: 780
    0000030e: 	movzwl	0x6(%r14,%rdx), %eax
    00000314: 	addq	$0x1, (%rbx,%rax,8)
.Ltmp626:
    00000319: 	xorl	%eax, %eax
    0000031b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp627:
    00000320: 	movdqu	(%rbx,%rax), %xmm0
    00000325: 	paddq	(%r13,%rax), %xmm0
    0000032c: 	paddq	(%r12,%rax), %xmm0
    00000332: 	paddq	(%rbp,%rax), %xmm0
    00000338: 	movups	%xmm0, (%rbx,%rax)
    0000033c: 	addq	$0x10, %rax
    00000340: 	cmpq	$0x80000, %rax
    00000346: 	jne	.Ltmp627 # Offset: 838
    00000348: 	addl	$0x1, (%rsp)
    0000034c: 	movl	(%rsp), %eax
    0000034f: 	cmpl	%eax, iterations(%rip)
    00000355: 	jg	.Ltmp628 # Offset: 853
.Ltmp619:
    0000035b: 	leaq	referenceHistogramS(%rip), %rbp
    00000362: 	xorl	%r12d, %r12d
    00000365: 	jmp	.Ltmp629 # Offset: 869
    00000367: 	nopw	(%rax,%rax) # Size: 9
.Ltmp631:
    00000370: 	addq	$0x1, %r12
    00000374: 	addq	$0x8, %rbx
    00000378: 	addq	$0x8, %rbp
    0000037c: 	cmpq	$0x10000, %r12
    00000383: 	je	.Ltmp630 # Offset: 899
.Ltmp629:
    00000389: 	movq	(%rbp), %rax
    0000038d: 	cmpq	%rax, (%rbx)
    00000390: 	je	.Ltmp631 # Offset: 912
    00000392: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    00000399: 	movl	$0x5, %edx
    0000039e: 	leaq	DATAat0x108e4(%rip), %rsi
    000003a5: 	movq	%r13, %rdi
    000003a8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 936
    000003ad: 	cmpq	$0x0, 0x18(%rsp)
    000003b3: 	je	.Ltmp632 # Offset: 947
    000003b9: 	movq	0x18(%rsp), %r14
    000003be: 	movq	%r14, %rdi
    000003c1: 	callq	strlen@PLT # Offset: 961
    000003c6: 	movq	%r14, %rsi
    000003c9: 	movq	%r13, %rdi
    000003cc: 	movq	%rax, %rdx
    000003cf: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 975
.Ltmp638:
    000003d4: 	movl	$0xf, %edx
    000003d9: 	leaq	DATAat0x108ea(%rip), %rsi
    000003e0: 	movq	%r13, %rdi
    000003e3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 995
    000003e8: 	movq	%r12, %rsi
    000003eb: 	movq	%r13, %rdi
    000003ee: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 1006
    000003f3: 	movl	$0xb, %edx
    000003f8: 	leaq	DATAat0x108fa(%rip), %rsi
    000003ff: 	movq	%rax, %rdi
    00000402: 	movq	%rax, %r12
    00000405: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1029
    0000040a: 	movq	(%rbp), %rsi
    0000040e: 	movq	%r12, %rdi
    00000411: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 1041
    00000416: 	movl	$0x4, %edx
    0000041b: 	leaq	DATAat0x10906(%rip), %rsi
    00000422: 	movq	%rax, %rdi
    00000425: 	movq	%rax, %rbp
    00000428: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1064
    0000042d: 	movq	(%rbx), %rsi
    00000430: 	movq	%rbp, %rdi
    00000433: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 1075
    00000438: 	movl	$0x2, %edx
    0000043d: 	leaq	DATAat0x1090b(%rip), %rsi
    00000444: 	movq	%rax, %rbp
    00000447: 	movq	%rax, %rdi
    0000044a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1098
    0000044f: 	movq	(%rbp), %rax
    00000453: 	movq	-0x18(%rax), %rax
    00000457: 	movq	0xf0(%rbp,%rax), %r12
    0000045f: 	testq	%r12, %r12
    00000462: 	je	.Ltmp633 # Offset: 1122
    00000468: 	cmpb	$0x0, 0x38(%r12)
    0000046e: 	je	.Ltmp634 # Offset: 1134
    00000470: 	movsbl	0x43(%r12), %esi
    00000476: 	movq	%rbp, %rdi
    00000479: 	callq	_ZNSo3putEc@PLT # Offset: 1145
    0000047e: 	movq	%rax, %rdi
    00000481: 	callq	_ZNSo5flushEv@PLT # Offset: 1153
.Ltmp630:
    00000486: 	callq	clock@PLT # Offset: 1158
    0000048b: 	movq	%rax, end_time(%rip)
    00000492: 	movq	0x180028(%rsp), %rdx
    0000049a: 	subq	%fs:0x28, %rdx
    000004a3: 	jne	.Ltmp635 # Offset: 1187
    000004a9: 	subq	start_time(%rip), %rax
    000004b0: 	pxor	%xmm0, %xmm0
    000004b4: 	movq	0x18(%rsp), %rdi
    000004b9: 	cvtsi2sd	%rax, %xmm0
    000004be: 	divsd	DATAat0x10920(%rip), %xmm0
    000004c6: 	addq	$0x180038, %rsp
    000004cd: 	popq	%rbx
    000004ce: 	popq	%rbp
    000004cf: 	popq	%r12
    000004d1: 	popq	%r13
    000004d3: 	popq	%r14
    000004d5: 	popq	%r15
    000004d7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1239
.Ltmp620:
    000004dc: 	xorl	%r10d, %r10d
    000004df: 	jmp	.Ltmp636 # Offset: 1247
.Ltmp634:
    000004e4: 	movq	%r12, %rdi
    000004e7: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 1255
    000004ec: 	movq	(%r12), %rax
    000004f0: 	movl	$0xa, %esi
    000004f5: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    000004fc: 	movq	0x30(%rax), %rax
    00000500: 	cmpq	%rdx, %rax
    00000503: 	jne	.Ltmp637 # Offset: 1283
.Ltmp639:
    00000505: 	movq	%rbp, %rdi
    00000508: 	callq	_ZNSo3putEc@PLT # Offset: 1288
    0000050d: 	movq	%rax, %rdi
    00000510: 	callq	_ZNSo5flushEv@PLT # Offset: 1296
    00000515: 	jmp	.Ltmp630 # Offset: 1301
.Ltmp632:
    0000051a: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000521: 	movq	-0x18(%rax), %rdi
    00000525: 	addq	%r13, %rdi
    00000528: 	movl	0x20(%rdi), %esi
    0000052b: 	orl	$0x1, %esi
    0000052e: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1326
    00000533: 	jmp	.Ltmp638 # Offset: 1331
.Ltmp637:
    00000538: 	movq	%r12, %rdi
    0000053b: 	callq	*%rax # Offset: 1339
    0000053d: 	movsbl	%al, %esi
    00000540: 	jmp	.Ltmp639 # Offset: 1344
.Ltmp635:
    00000542: 	callq	__stack_chk_fail@PLT # Offset: 1346
.Ltmp633:
    00000547: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 1351
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_histogram6ImEvPKtiPT_PKc"

Binary Function "_Z20test_histogramFloat2IftEvPKT_iPT0_S0_S0_PKc" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0xa7b0
  Size        : 0x408
  MaxSize     : 0x410
  Offset      : 0xa7b0
  Section     : .text
  Orc Section : .local.text._Z20test_histogramFloat2IftEvPKT_iPT0_S0_S0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0x14(%rsp)
    00000021: 	movss	%xmm1, 0x8(%rsp)
    00000027: 	movq	%rcx, 0x18(%rsp)
    0000002c: 	callq	clock@PLT # Offset: 44
    00000031: 	movss	0x8(%rsp), %xmm0
    00000037: 	movss	0x14(%rsp), %xmm2
    0000003d: 	movq	%rax, start_time(%rip)
    00000044: 	movss	DATAat0x10960(%rip), %xmm1
    0000004c: 	subss	%xmm2, %xmm0
    00000050: 	movl	iterations(%rip), %eax
    00000056: 	divss	%xmm0, %xmm1
    0000005a: 	testl	%eax, %eax
    0000005c: 	jle	.Ltmp640 # Offset: 92
    00000062: 	leal	-0x4(%r14), %eax
    00000066: 	xorl	%ebp, %ebp
    00000068: 	cvtss2sd	%xmm1, %xmm1
    0000006c: 	shrl	$0x2, %eax
    0000006f: 	movl	%eax, %edx
    00000071: 	leal	0x4(,%rax,4), %ebx
    00000078: 	shlq	$0x4, %rdx
    0000007c: 	leaq	0x10(%r15,%rdx), %r13
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp651:
    00000088: 	xorl	%esi, %esi
    0000008a: 	movl	$0x4000, %edx
    0000008f: 	movq	%r12, %rdi
    00000092: 	movss	%xmm2, 0x14(%rsp)
    00000098: 	movsd	%xmm1, 0x8(%rsp)
    0000009e: 	callq	memset@PLT # Offset: 158
    000000a3: 	cmpl	$0x3, %r14d
    000000a7: 	movsd	0x8(%rsp), %xmm1
    000000ad: 	movss	0x14(%rsp), %xmm2
    000000b3: 	jle	.Ltmp641 # Offset: 179
    000000b9: 	movq	%r15, %rax
    000000bc: 	nopl	(%rax) # Size: 4
.Ltmp646:
    000000c0: 	movss	(%rax), %xmm0
    000000c4: 	subss	%xmm2, %xmm0
    000000c8: 	cvtss2sd	%xmm0, %xmm0
    000000cc: 	mulsd	%xmm1, %xmm0
    000000d0: 	cvttsd2si	%xmm0, %esi
    000000d4: 	movss	0x4(%rax), %xmm0
    000000d9: 	subss	%xmm2, %xmm0
    000000dd: 	cvtss2sd	%xmm0, %xmm0
    000000e1: 	mulsd	%xmm1, %xmm0
    000000e5: 	cvttsd2si	%xmm0, %edx
    000000e9: 	movss	0x8(%rax), %xmm0
    000000ee: 	subss	%xmm2, %xmm0
    000000f2: 	cvtss2sd	%xmm0, %xmm0
    000000f6: 	mulsd	%xmm1, %xmm0
    000000fa: 	cvttsd2si	%xmm0, %r8d
    000000ff: 	movss	0xc(%rax), %xmm0
    00000104: 	subss	%xmm2, %xmm0
    00000108: 	cvtss2sd	%xmm0, %xmm0
    0000010c: 	mulsd	%xmm1, %xmm0
    00000110: 	cvttsd2si	%xmm0, %edi
    00000114: 	cmpl	$0x1fff, %esi
    0000011a: 	ja	.Ltmp642 # Offset: 282
    0000011c: 	movslq	%esi, %rsi
    0000011f: 	addw	$0x1, (%r12,%rsi,2)
.Ltmp642:
    00000125: 	cmpl	$0x1fff, %edx
    0000012b: 	ja	.Ltmp643 # Offset: 299
    0000012d: 	movslq	%edx, %rdx
    00000130: 	addw	$0x1, (%r12,%rdx,2)
.Ltmp643:
    00000136: 	cmpl	$0x1fff, %r8d
    0000013d: 	ja	.Ltmp644 # Offset: 317
    0000013f: 	movslq	%r8d, %r8
    00000142: 	addw	$0x1, (%r12,%r8,2)
.Ltmp644:
    00000148: 	cmpl	$0x1fff, %edi
    0000014e: 	ja	.Ltmp645 # Offset: 334
    00000150: 	movslq	%edi, %rdi
    00000153: 	addw	$0x1, (%r12,%rdi,2)
.Ltmp645:
    00000159: 	addq	$0x10, %rax
    0000015d: 	cmpq	%rax, %r13
    00000160: 	jne	.Ltmp646 # Offset: 352
    00000166: 	movl	%ebx, %eax
.Ltmp658:
    00000168: 	cmpl	%eax, %r14d
    0000016b: 	jle	.Ltmp647 # Offset: 363
    00000171: 	movslq	%eax, %rsi
    00000174: 	movss	(%r15,%rsi,4), %xmm0
    0000017a: 	leaq	(,%rsi,4), %rdx
    00000182: 	subss	%xmm2, %xmm0
    00000186: 	cvtss2sd	%xmm0, %xmm0
    0000018a: 	mulsd	%xmm1, %xmm0
    0000018e: 	cvttsd2si	%xmm0, %esi
    00000192: 	cmpl	$0x1fff, %esi
    00000198: 	ja	.Ltmp648 # Offset: 408
    0000019a: 	movslq	%esi, %rsi
    0000019d: 	addw	$0x1, (%r12,%rsi,2)
.Ltmp648:
    000001a3: 	leal	0x1(%rax), %esi
    000001a6: 	cmpl	%esi, %r14d
    000001a9: 	jle	.Ltmp647 # Offset: 425
    000001af: 	movss	0x4(%r15,%rdx), %xmm0
    000001b6: 	subss	%xmm2, %xmm0
    000001ba: 	cvtss2sd	%xmm0, %xmm0
    000001be: 	mulsd	%xmm1, %xmm0
    000001c2: 	cvttsd2si	%xmm0, %esi
    000001c6: 	cmpl	$0x1fff, %esi
    000001cc: 	ja	.Ltmp649 # Offset: 460
    000001ce: 	movslq	%esi, %rsi
    000001d1: 	addw	$0x1, (%r12,%rsi,2)
.Ltmp649:
    000001d7: 	leal	0x2(%rax), %esi
    000001da: 	cmpl	%esi, %r14d
    000001dd: 	jle	.Ltmp647 # Offset: 477
    000001df: 	movss	0x8(%r15,%rdx), %xmm0
    000001e6: 	subss	%xmm2, %xmm0
    000001ea: 	cvtss2sd	%xmm0, %xmm0
    000001ee: 	mulsd	%xmm1, %xmm0
    000001f2: 	cvttsd2si	%xmm0, %esi
    000001f6: 	cmpl	$0x1fff, %esi
    000001fc: 	ja	.Ltmp650 # Offset: 508
    000001fe: 	movslq	%esi, %rsi
    00000201: 	addw	$0x1, (%r12,%rsi,2)
.Ltmp650:
    00000207: 	addl	$0x3, %eax
    0000020a: 	cmpl	%eax, %r14d
    0000020d: 	jle	.Ltmp647 # Offset: 525
    0000020f: 	movss	0xc(%r15,%rdx), %xmm0
    00000216: 	subss	%xmm2, %xmm0
    0000021a: 	cvtss2sd	%xmm0, %xmm0
    0000021e: 	mulsd	%xmm1, %xmm0
    00000222: 	cvttsd2si	%xmm0, %eax
    00000226: 	cmpl	$0x1fff, %eax
    0000022b: 	ja	.Ltmp647 # Offset: 555
    0000022d: 	cltq
    0000022f: 	addw	$0x1, (%r12,%rax,2)
    00000235: 	nopl	(%rax) # Size: 3
.Ltmp647:
    00000238: 	addl	$0x1, %ebp
    0000023b: 	cmpl	%ebp, iterations(%rip)
    00000241: 	jg	.Ltmp651 # Offset: 577
.Ltmp640:
    00000247: 	leaq	referenceHistogramF(%rip), %rbx
    0000024e: 	xorl	%r13d, %r13d
    00000251: 	jmp	.Ltmp652 # Offset: 593
    00000253: 	nopl	(%rax,%rax) # Size: 5
.Ltmp654:
    00000258: 	addq	$0x1, %r13
    0000025c: 	addq	$0x2, %r12
    00000260: 	addq	$0x8, %rbx
    00000264: 	cmpq	$0x2000, %r13
    0000026b: 	je	.Ltmp653 # Offset: 619
.Ltmp652:
    00000271: 	movzwl	(%rbx), %eax
    00000274: 	cmpw	%ax, (%r12)
    00000279: 	je	.Ltmp654 # Offset: 633
    0000027b: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000282: 	movl	$0x5, %edx
    00000287: 	leaq	DATAat0x108e4(%rip), %rsi
    0000028e: 	movq	%r14, %rdi
    00000291: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 657
    00000296: 	cmpq	$0x0, 0x18(%rsp)
    0000029c: 	je	.Ltmp655 # Offset: 668
    000002a2: 	movq	0x18(%rsp), %r15
    000002a7: 	movq	%r15, %rdi
    000002aa: 	callq	strlen@PLT # Offset: 682
    000002af: 	movq	%r15, %rsi
    000002b2: 	movq	%r14, %rdi
    000002b5: 	movq	%rax, %rdx
    000002b8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 696
.Ltmp660:
    000002bd: 	movl	$0xf, %edx
    000002c2: 	leaq	DATAat0x108ea(%rip), %rsi
    000002c9: 	movq	%r14, %rdi
    000002cc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 716
    000002d1: 	movq	%r13, %rsi
    000002d4: 	movq	%r14, %rdi
    000002d7: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 727
    000002dc: 	movl	$0xb, %edx
    000002e1: 	leaq	DATAat0x108fa(%rip), %rsi
    000002e8: 	movq	%rax, %rdi
    000002eb: 	movq	%rax, %r13
    000002ee: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 750
    000002f3: 	movq	(%rbx), %rsi
    000002f6: 	movq	%r13, %rdi
    000002f9: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 761
    000002fe: 	movl	$0x4, %edx
    00000303: 	leaq	DATAat0x10906(%rip), %rsi
    0000030a: 	movq	%rax, %rdi
    0000030d: 	movq	%rax, %r13
    00000310: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 784
    00000315: 	movzwl	(%r12), %esi
    0000031a: 	movq	%r13, %rdi
    0000031d: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 797
    00000322: 	movl	$0x2, %edx
    00000327: 	leaq	DATAat0x1090b(%rip), %rsi
    0000032e: 	movq	%rax, %r12
    00000331: 	movq	%rax, %rdi
    00000334: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 820
    00000339: 	movq	(%r12), %rax
    0000033d: 	movq	-0x18(%rax), %rax
    00000341: 	movq	0xf0(%r12,%rax), %r13
    00000349: 	testq	%r13, %r13
    0000034c: 	je	.Ltmp656 # Offset: 844
    00000352: 	cmpb	$0x0, 0x38(%r13)
    00000357: 	je	.Ltmp657 # Offset: 855
    00000359: 	movsbl	0x43(%r13), %esi
.Ltmp659:
    0000035e: 	movq	%r12, %rdi
    00000361: 	callq	_ZNSo3putEc@PLT # Offset: 865
    00000366: 	movq	%rax, %rdi
    00000369: 	callq	_ZNSo5flushEv@PLT # Offset: 873
.Ltmp653:
    0000036e: 	callq	clock@PLT # Offset: 878
    00000373: 	pxor	%xmm0, %xmm0
    00000377: 	movq	0x18(%rsp), %rdi
    0000037c: 	movq	%rax, end_time(%rip)
    00000383: 	subq	start_time(%rip), %rax
    0000038a: 	cvtsi2sd	%rax, %xmm0
    0000038f: 	divsd	DATAat0x10920(%rip), %xmm0
    00000397: 	addq	$0x28, %rsp
    0000039b: 	popq	%rbx
    0000039c: 	popq	%rbp
    0000039d: 	popq	%r12
    0000039f: 	popq	%r13
    000003a1: 	popq	%r14
    000003a3: 	popq	%r15
    000003a5: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 933
    000003aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp641:
    000003b0: 	xorl	%eax, %eax
    000003b2: 	jmp	.Ltmp658 # Offset: 946
.Ltmp657:
    000003b7: 	movq	%r13, %rdi
    000003ba: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 954
    000003bf: 	movq	(%r13), %rax
    000003c3: 	movl	$0xa, %esi
    000003c8: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    000003cf: 	movq	0x30(%rax), %rax
    000003d3: 	cmpq	%rdx, %rax
    000003d6: 	je	.Ltmp659 # Offset: 982
    000003d8: 	movq	%r13, %rdi
    000003db: 	callq	*%rax # Offset: 987
    000003dd: 	movsbl	%al, %esi
    000003e0: 	jmp	.Ltmp659 # Offset: 992
.Ltmp655:
    000003e5: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000003ec: 	movq	-0x18(%rax), %rdi
    000003f0: 	addq	%r14, %rdi
    000003f3: 	movl	0x20(%rdi), %esi
    000003f6: 	orl	$0x1, %esi
    000003f9: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1017
    000003fe: 	jmp	.Ltmp660 # Offset: 1022
.Ltmp656:
    00000403: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 1027
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_histogramFloat2IftEvPKT_iPT0_S0_S0_PKc"

Binary Function "_Z20test_histogramFloat2IfjEvPKT_iPT0_S0_S0_PKc" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0xabc0
  Size        : 0x3f8
  MaxSize     : 0x400
  Offset      : 0xabc0
  Section     : .text
  Orc Section : .local.text._Z20test_histogramFloat2IfjEvPKT_iPT0_S0_S0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0x14(%rsp)
    00000021: 	movss	%xmm1, 0x8(%rsp)
    00000027: 	movq	%rcx, 0x18(%rsp)
    0000002c: 	callq	clock@PLT # Offset: 44
    00000031: 	movss	0x8(%rsp), %xmm0
    00000037: 	movss	0x14(%rsp), %xmm2
    0000003d: 	movq	%rax, start_time(%rip)
    00000044: 	movss	DATAat0x10960(%rip), %xmm1
    0000004c: 	subss	%xmm2, %xmm0
    00000050: 	movl	iterations(%rip), %eax
    00000056: 	divss	%xmm0, %xmm1
    0000005a: 	testl	%eax, %eax
    0000005c: 	jle	.Ltmp661 # Offset: 92
    00000062: 	leal	-0x4(%r14), %eax
    00000066: 	xorl	%ebp, %ebp
    00000068: 	cvtss2sd	%xmm1, %xmm1
    0000006c: 	shrl	$0x2, %eax
    0000006f: 	movl	%eax, %edx
    00000071: 	leal	0x4(,%rax,4), %ebx
    00000078: 	shlq	$0x4, %rdx
    0000007c: 	leaq	0x10(%r15,%rdx), %r13
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp672:
    00000088: 	xorl	%esi, %esi
    0000008a: 	movl	$0x8000, %edx
    0000008f: 	movq	%r12, %rdi
    00000092: 	movss	%xmm2, 0x14(%rsp)
    00000098: 	movsd	%xmm1, 0x8(%rsp)
    0000009e: 	callq	memset@PLT # Offset: 158
    000000a3: 	cmpl	$0x3, %r14d
    000000a7: 	movsd	0x8(%rsp), %xmm1
    000000ad: 	movss	0x14(%rsp), %xmm2
    000000b3: 	jle	.Ltmp662 # Offset: 179
    000000b9: 	movq	%r15, %rax
    000000bc: 	nopl	(%rax) # Size: 4
.Ltmp667:
    000000c0: 	movss	(%rax), %xmm0
    000000c4: 	subss	%xmm2, %xmm0
    000000c8: 	cvtss2sd	%xmm0, %xmm0
    000000cc: 	mulsd	%xmm1, %xmm0
    000000d0: 	cvttsd2si	%xmm0, %esi
    000000d4: 	movss	0x4(%rax), %xmm0
    000000d9: 	subss	%xmm2, %xmm0
    000000dd: 	cvtss2sd	%xmm0, %xmm0
    000000e1: 	mulsd	%xmm1, %xmm0
    000000e5: 	cvttsd2si	%xmm0, %edx
    000000e9: 	movss	0x8(%rax), %xmm0
    000000ee: 	subss	%xmm2, %xmm0
    000000f2: 	cvtss2sd	%xmm0, %xmm0
    000000f6: 	mulsd	%xmm1, %xmm0
    000000fa: 	cvttsd2si	%xmm0, %r8d
    000000ff: 	movss	0xc(%rax), %xmm0
    00000104: 	subss	%xmm2, %xmm0
    00000108: 	cvtss2sd	%xmm0, %xmm0
    0000010c: 	mulsd	%xmm1, %xmm0
    00000110: 	cvttsd2si	%xmm0, %edi
    00000114: 	cmpl	$0x1fff, %esi
    0000011a: 	ja	.Ltmp663 # Offset: 282
    0000011c: 	movslq	%esi, %rsi
    0000011f: 	addl	$0x1, (%r12,%rsi,4)
.Ltmp663:
    00000124: 	cmpl	$0x1fff, %edx
    0000012a: 	ja	.Ltmp664 # Offset: 298
    0000012c: 	movslq	%edx, %rdx
    0000012f: 	addl	$0x1, (%r12,%rdx,4)
.Ltmp664:
    00000134: 	cmpl	$0x1fff, %r8d
    0000013b: 	ja	.Ltmp665 # Offset: 315
    0000013d: 	movslq	%r8d, %r8
    00000140: 	addl	$0x1, (%r12,%r8,4)
.Ltmp665:
    00000145: 	cmpl	$0x1fff, %edi
    0000014b: 	ja	.Ltmp666 # Offset: 331
    0000014d: 	movslq	%edi, %rdi
    00000150: 	addl	$0x1, (%r12,%rdi,4)
.Ltmp666:
    00000155: 	addq	$0x10, %rax
    00000159: 	cmpq	%rax, %r13
    0000015c: 	jne	.Ltmp667 # Offset: 348
    00000162: 	movl	%ebx, %eax
.Ltmp679:
    00000164: 	cmpl	%eax, %r14d
    00000167: 	jle	.Ltmp668 # Offset: 359
    0000016d: 	movslq	%eax, %rsi
    00000170: 	movss	(%r15,%rsi,4), %xmm0
    00000176: 	leaq	(,%rsi,4), %rdx
    0000017e: 	subss	%xmm2, %xmm0
    00000182: 	cvtss2sd	%xmm0, %xmm0
    00000186: 	mulsd	%xmm1, %xmm0
    0000018a: 	cvttsd2si	%xmm0, %esi
    0000018e: 	cmpl	$0x1fff, %esi
    00000194: 	ja	.Ltmp669 # Offset: 404
    00000196: 	movslq	%esi, %rsi
    00000199: 	addl	$0x1, (%r12,%rsi,4)
.Ltmp669:
    0000019e: 	leal	0x1(%rax), %esi
    000001a1: 	cmpl	%esi, %r14d
    000001a4: 	jle	.Ltmp668 # Offset: 420
    000001aa: 	movss	0x4(%r15,%rdx), %xmm0
    000001b1: 	subss	%xmm2, %xmm0
    000001b5: 	cvtss2sd	%xmm0, %xmm0
    000001b9: 	mulsd	%xmm1, %xmm0
    000001bd: 	cvttsd2si	%xmm0, %esi
    000001c1: 	cmpl	$0x1fff, %esi
    000001c7: 	ja	.Ltmp670 # Offset: 455
    000001c9: 	movslq	%esi, %rsi
    000001cc: 	addl	$0x1, (%r12,%rsi,4)
.Ltmp670:
    000001d1: 	leal	0x2(%rax), %esi
    000001d4: 	cmpl	%esi, %r14d
    000001d7: 	jle	.Ltmp668 # Offset: 471
    000001d9: 	movss	0x8(%r15,%rdx), %xmm0
    000001e0: 	subss	%xmm2, %xmm0
    000001e4: 	cvtss2sd	%xmm0, %xmm0
    000001e8: 	mulsd	%xmm1, %xmm0
    000001ec: 	cvttsd2si	%xmm0, %esi
    000001f0: 	cmpl	$0x1fff, %esi
    000001f6: 	ja	.Ltmp671 # Offset: 502
    000001f8: 	movslq	%esi, %rsi
    000001fb: 	addl	$0x1, (%r12,%rsi,4)
.Ltmp671:
    00000200: 	addl	$0x3, %eax
    00000203: 	cmpl	%eax, %r14d
    00000206: 	jle	.Ltmp668 # Offset: 518
    00000208: 	movss	0xc(%r15,%rdx), %xmm0
    0000020f: 	subss	%xmm2, %xmm0
    00000213: 	cvtss2sd	%xmm0, %xmm0
    00000217: 	mulsd	%xmm1, %xmm0
    0000021b: 	cvttsd2si	%xmm0, %eax
    0000021f: 	cmpl	$0x1fff, %eax
    00000224: 	ja	.Ltmp668 # Offset: 548
    00000226: 	cltq
    00000228: 	addl	$0x1, (%r12,%rax,4)
    0000022d: 	nopl	(%rax) # Size: 3
.Ltmp668:
    00000230: 	addl	$0x1, %ebp
    00000233: 	cmpl	%ebp, iterations(%rip)
    00000239: 	jg	.Ltmp672 # Offset: 569
.Ltmp661:
    0000023f: 	leaq	referenceHistogramF(%rip), %rbx
    00000246: 	xorl	%r13d, %r13d
    00000249: 	jmp	.Ltmp673 # Offset: 585
    0000024b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp675:
    00000250: 	addq	$0x1, %r13
    00000254: 	addq	$0x4, %r12
    00000258: 	addq	$0x8, %rbx
    0000025c: 	cmpq	$0x2000, %r13
    00000263: 	je	.Ltmp674 # Offset: 611
.Ltmp673:
    00000269: 	movl	(%rbx), %eax
    0000026b: 	cmpl	%eax, (%r12)
    0000026f: 	je	.Ltmp675 # Offset: 623
    00000271: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000278: 	movl	$0x5, %edx
    0000027d: 	leaq	DATAat0x108e4(%rip), %rsi
    00000284: 	movq	%r14, %rdi
    00000287: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 647
    0000028c: 	cmpq	$0x0, 0x18(%rsp)
    00000292: 	je	.Ltmp676 # Offset: 658
    00000298: 	movq	0x18(%rsp), %r15
    0000029d: 	movq	%r15, %rdi
    000002a0: 	callq	strlen@PLT # Offset: 672
    000002a5: 	movq	%r15, %rsi
    000002a8: 	movq	%r14, %rdi
    000002ab: 	movq	%rax, %rdx
    000002ae: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 686
.Ltmp681:
    000002b3: 	movl	$0xf, %edx
    000002b8: 	leaq	DATAat0x108ea(%rip), %rsi
    000002bf: 	movq	%r14, %rdi
    000002c2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 706
    000002c7: 	movq	%r13, %rsi
    000002ca: 	movq	%r14, %rdi
    000002cd: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 717
    000002d2: 	movl	$0xb, %edx
    000002d7: 	leaq	DATAat0x108fa(%rip), %rsi
    000002de: 	movq	%rax, %rdi
    000002e1: 	movq	%rax, %r13
    000002e4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 740
    000002e9: 	movq	(%rbx), %rsi
    000002ec: 	movq	%r13, %rdi
    000002ef: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 751
    000002f4: 	movl	$0x4, %edx
    000002f9: 	leaq	DATAat0x10906(%rip), %rsi
    00000300: 	movq	%rax, %rdi
    00000303: 	movq	%rax, %r13
    00000306: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 774
    0000030b: 	movl	(%r12), %esi
    0000030f: 	movq	%r13, %rdi
    00000312: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 786
    00000317: 	movl	$0x2, %edx
    0000031c: 	leaq	DATAat0x1090b(%rip), %rsi
    00000323: 	movq	%rax, %r12
    00000326: 	movq	%rax, %rdi
    00000329: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 809
    0000032e: 	movq	(%r12), %rax
    00000332: 	movq	-0x18(%rax), %rax
    00000336: 	movq	0xf0(%r12,%rax), %r13
    0000033e: 	testq	%r13, %r13
    00000341: 	je	.Ltmp677 # Offset: 833
    00000347: 	cmpb	$0x0, 0x38(%r13)
    0000034c: 	je	.Ltmp678 # Offset: 844
    0000034e: 	movsbl	0x43(%r13), %esi
.Ltmp680:
    00000353: 	movq	%r12, %rdi
    00000356: 	callq	_ZNSo3putEc@PLT # Offset: 854
    0000035b: 	movq	%rax, %rdi
    0000035e: 	callq	_ZNSo5flushEv@PLT # Offset: 862
.Ltmp674:
    00000363: 	callq	clock@PLT # Offset: 867
    00000368: 	pxor	%xmm0, %xmm0
    0000036c: 	movq	0x18(%rsp), %rdi
    00000371: 	movq	%rax, end_time(%rip)
    00000378: 	subq	start_time(%rip), %rax
    0000037f: 	cvtsi2sd	%rax, %xmm0
    00000384: 	divsd	DATAat0x10920(%rip), %xmm0
    0000038c: 	addq	$0x28, %rsp
    00000390: 	popq	%rbx
    00000391: 	popq	%rbp
    00000392: 	popq	%r12
    00000394: 	popq	%r13
    00000396: 	popq	%r14
    00000398: 	popq	%r15
    0000039a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 922
    0000039f: 	nop # Size: 1
.Ltmp662:
    000003a0: 	xorl	%eax, %eax
    000003a2: 	jmp	.Ltmp679 # Offset: 930
.Ltmp678:
    000003a7: 	movq	%r13, %rdi
    000003aa: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 938
    000003af: 	movq	(%r13), %rax
    000003b3: 	movl	$0xa, %esi
    000003b8: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    000003bf: 	movq	0x30(%rax), %rax
    000003c3: 	cmpq	%rdx, %rax
    000003c6: 	je	.Ltmp680 # Offset: 966
    000003c8: 	movq	%r13, %rdi
    000003cb: 	callq	*%rax # Offset: 971
    000003cd: 	movsbl	%al, %esi
    000003d0: 	jmp	.Ltmp680 # Offset: 976
.Ltmp676:
    000003d5: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000003dc: 	movq	-0x18(%rax), %rdi
    000003e0: 	addq	%r14, %rdi
    000003e3: 	movl	0x20(%rdi), %esi
    000003e6: 	orl	$0x1, %esi
    000003e9: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1001
    000003ee: 	jmp	.Ltmp681 # Offset: 1006
.Ltmp677:
    000003f3: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 1011
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_histogramFloat2IfjEvPKT_iPT0_S0_S0_PKc"

Binary Function "_Z20test_histogramFloat2IfmEvPKT_iPT0_S0_S0_PKc" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0xafc0
  Size        : 0x3f8
  MaxSize     : 0x400
  Offset      : 0xafc0
  Section     : .text
  Orc Section : .local.text._Z20test_histogramFloat2IfmEvPKT_iPT0_S0_S0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0x14(%rsp)
    00000021: 	movss	%xmm1, 0x8(%rsp)
    00000027: 	movq	%rcx, 0x18(%rsp)
    0000002c: 	callq	clock@PLT # Offset: 44
    00000031: 	movss	0x8(%rsp), %xmm0
    00000037: 	movss	0x14(%rsp), %xmm2
    0000003d: 	movq	%rax, start_time(%rip)
    00000044: 	movss	DATAat0x10960(%rip), %xmm1
    0000004c: 	subss	%xmm2, %xmm0
    00000050: 	movl	iterations(%rip), %eax
    00000056: 	divss	%xmm0, %xmm1
    0000005a: 	testl	%eax, %eax
    0000005c: 	jle	.Ltmp682 # Offset: 92
    00000062: 	leal	-0x4(%r14), %eax
    00000066: 	xorl	%ebp, %ebp
    00000068: 	cvtss2sd	%xmm1, %xmm1
    0000006c: 	shrl	$0x2, %eax
    0000006f: 	movl	%eax, %edx
    00000071: 	leal	0x4(,%rax,4), %ebx
    00000078: 	shlq	$0x4, %rdx
    0000007c: 	leaq	0x10(%r15,%rdx), %r13
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp693:
    00000088: 	xorl	%esi, %esi
    0000008a: 	movl	$0x10000, %edx
    0000008f: 	movq	%r12, %rdi
    00000092: 	movss	%xmm2, 0x14(%rsp)
    00000098: 	movsd	%xmm1, 0x8(%rsp)
    0000009e: 	callq	memset@PLT # Offset: 158
    000000a3: 	cmpl	$0x3, %r14d
    000000a7: 	movsd	0x8(%rsp), %xmm1
    000000ad: 	movss	0x14(%rsp), %xmm2
    000000b3: 	jle	.Ltmp683 # Offset: 179
    000000b9: 	movq	%r15, %rax
    000000bc: 	nopl	(%rax) # Size: 4
.Ltmp688:
    000000c0: 	movss	(%rax), %xmm0
    000000c4: 	subss	%xmm2, %xmm0
    000000c8: 	cvtss2sd	%xmm0, %xmm0
    000000cc: 	mulsd	%xmm1, %xmm0
    000000d0: 	cvttsd2si	%xmm0, %esi
    000000d4: 	movss	0x4(%rax), %xmm0
    000000d9: 	subss	%xmm2, %xmm0
    000000dd: 	cvtss2sd	%xmm0, %xmm0
    000000e1: 	mulsd	%xmm1, %xmm0
    000000e5: 	cvttsd2si	%xmm0, %edx
    000000e9: 	movss	0x8(%rax), %xmm0
    000000ee: 	subss	%xmm2, %xmm0
    000000f2: 	cvtss2sd	%xmm0, %xmm0
    000000f6: 	mulsd	%xmm1, %xmm0
    000000fa: 	cvttsd2si	%xmm0, %r8d
    000000ff: 	movss	0xc(%rax), %xmm0
    00000104: 	subss	%xmm2, %xmm0
    00000108: 	cvtss2sd	%xmm0, %xmm0
    0000010c: 	mulsd	%xmm1, %xmm0
    00000110: 	cvttsd2si	%xmm0, %edi
    00000114: 	cmpl	$0x1fff, %esi
    0000011a: 	ja	.Ltmp684 # Offset: 282
    0000011c: 	movslq	%esi, %rsi
    0000011f: 	addq	$0x1, (%r12,%rsi,8)
.Ltmp684:
    00000124: 	cmpl	$0x1fff, %edx
    0000012a: 	ja	.Ltmp685 # Offset: 298
    0000012c: 	movslq	%edx, %rdx
    0000012f: 	addq	$0x1, (%r12,%rdx,8)
.Ltmp685:
    00000134: 	cmpl	$0x1fff, %r8d
    0000013b: 	ja	.Ltmp686 # Offset: 315
    0000013d: 	movslq	%r8d, %r8
    00000140: 	addq	$0x1, (%r12,%r8,8)
.Ltmp686:
    00000145: 	cmpl	$0x1fff, %edi
    0000014b: 	ja	.Ltmp687 # Offset: 331
    0000014d: 	movslq	%edi, %rdi
    00000150: 	addq	$0x1, (%r12,%rdi,8)
.Ltmp687:
    00000155: 	addq	$0x10, %rax
    00000159: 	cmpq	%rax, %r13
    0000015c: 	jne	.Ltmp688 # Offset: 348
    00000162: 	movl	%ebx, %eax
.Ltmp700:
    00000164: 	cmpl	%eax, %r14d
    00000167: 	jle	.Ltmp689 # Offset: 359
    0000016d: 	movslq	%eax, %rsi
    00000170: 	movss	(%r15,%rsi,4), %xmm0
    00000176: 	leaq	(,%rsi,4), %rdx
    0000017e: 	subss	%xmm2, %xmm0
    00000182: 	cvtss2sd	%xmm0, %xmm0
    00000186: 	mulsd	%xmm1, %xmm0
    0000018a: 	cvttsd2si	%xmm0, %esi
    0000018e: 	cmpl	$0x1fff, %esi
    00000194: 	ja	.Ltmp690 # Offset: 404
    00000196: 	movslq	%esi, %rsi
    00000199: 	addq	$0x1, (%r12,%rsi,8)
.Ltmp690:
    0000019e: 	leal	0x1(%rax), %esi
    000001a1: 	cmpl	%esi, %r14d
    000001a4: 	jle	.Ltmp689 # Offset: 420
    000001aa: 	movss	0x4(%r15,%rdx), %xmm0
    000001b1: 	subss	%xmm2, %xmm0
    000001b5: 	cvtss2sd	%xmm0, %xmm0
    000001b9: 	mulsd	%xmm1, %xmm0
    000001bd: 	cvttsd2si	%xmm0, %esi
    000001c1: 	cmpl	$0x1fff, %esi
    000001c7: 	ja	.Ltmp691 # Offset: 455
    000001c9: 	movslq	%esi, %rsi
    000001cc: 	addq	$0x1, (%r12,%rsi,8)
.Ltmp691:
    000001d1: 	leal	0x2(%rax), %esi
    000001d4: 	cmpl	%esi, %r14d
    000001d7: 	jle	.Ltmp689 # Offset: 471
    000001d9: 	movss	0x8(%r15,%rdx), %xmm0
    000001e0: 	subss	%xmm2, %xmm0
    000001e4: 	cvtss2sd	%xmm0, %xmm0
    000001e8: 	mulsd	%xmm1, %xmm0
    000001ec: 	cvttsd2si	%xmm0, %esi
    000001f0: 	cmpl	$0x1fff, %esi
    000001f6: 	ja	.Ltmp692 # Offset: 502
    000001f8: 	movslq	%esi, %rsi
    000001fb: 	addq	$0x1, (%r12,%rsi,8)
.Ltmp692:
    00000200: 	addl	$0x3, %eax
    00000203: 	cmpl	%eax, %r14d
    00000206: 	jle	.Ltmp689 # Offset: 518
    00000208: 	movss	0xc(%r15,%rdx), %xmm0
    0000020f: 	subss	%xmm2, %xmm0
    00000213: 	cvtss2sd	%xmm0, %xmm0
    00000217: 	mulsd	%xmm1, %xmm0
    0000021b: 	cvttsd2si	%xmm0, %eax
    0000021f: 	cmpl	$0x1fff, %eax
    00000224: 	ja	.Ltmp689 # Offset: 548
    00000226: 	cltq
    00000228: 	addq	$0x1, (%r12,%rax,8)
    0000022d: 	nopl	(%rax) # Size: 3
.Ltmp689:
    00000230: 	addl	$0x1, %ebp
    00000233: 	cmpl	%ebp, iterations(%rip)
    00000239: 	jg	.Ltmp693 # Offset: 569
.Ltmp682:
    0000023f: 	leaq	referenceHistogramF(%rip), %rbx
    00000246: 	xorl	%r13d, %r13d
    00000249: 	jmp	.Ltmp694 # Offset: 585
    0000024b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp696:
    00000250: 	addq	$0x1, %r13
    00000254: 	addq	$0x8, %r12
    00000258: 	addq	$0x8, %rbx
    0000025c: 	cmpq	$0x2000, %r13
    00000263: 	je	.Ltmp695 # Offset: 611
.Ltmp694:
    00000269: 	movq	(%rbx), %rax
    0000026c: 	cmpq	%rax, (%r12)
    00000270: 	je	.Ltmp696 # Offset: 624
    00000272: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000279: 	movl	$0x5, %edx
    0000027e: 	leaq	DATAat0x108e4(%rip), %rsi
    00000285: 	movq	%r14, %rdi
    00000288: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 648
    0000028d: 	cmpq	$0x0, 0x18(%rsp)
    00000293: 	je	.Ltmp697 # Offset: 659
    00000299: 	movq	0x18(%rsp), %r15
    0000029e: 	movq	%r15, %rdi
    000002a1: 	callq	strlen@PLT # Offset: 673
    000002a6: 	movq	%r15, %rsi
    000002a9: 	movq	%r14, %rdi
    000002ac: 	movq	%rax, %rdx
    000002af: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 687
.Ltmp702:
    000002b4: 	movl	$0xf, %edx
    000002b9: 	leaq	DATAat0x108ea(%rip), %rsi
    000002c0: 	movq	%r14, %rdi
    000002c3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 707
    000002c8: 	movq	%r13, %rsi
    000002cb: 	movq	%r14, %rdi
    000002ce: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 718
    000002d3: 	movl	$0xb, %edx
    000002d8: 	leaq	DATAat0x108fa(%rip), %rsi
    000002df: 	movq	%rax, %rdi
    000002e2: 	movq	%rax, %r13
    000002e5: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 741
    000002ea: 	movq	(%rbx), %rsi
    000002ed: 	movq	%r13, %rdi
    000002f0: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 752
    000002f5: 	movl	$0x4, %edx
    000002fa: 	leaq	DATAat0x10906(%rip), %rsi
    00000301: 	movq	%rax, %rdi
    00000304: 	movq	%rax, %r13
    00000307: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 775
    0000030c: 	movq	(%r12), %rsi
    00000310: 	movq	%r13, %rdi
    00000313: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 787
    00000318: 	movl	$0x2, %edx
    0000031d: 	leaq	DATAat0x1090b(%rip), %rsi
    00000324: 	movq	%rax, %r12
    00000327: 	movq	%rax, %rdi
    0000032a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 810
    0000032f: 	movq	(%r12), %rax
    00000333: 	movq	-0x18(%rax), %rax
    00000337: 	movq	0xf0(%r12,%rax), %r13
    0000033f: 	testq	%r13, %r13
    00000342: 	je	.Ltmp698 # Offset: 834
    00000348: 	cmpb	$0x0, 0x38(%r13)
    0000034d: 	je	.Ltmp699 # Offset: 845
    0000034f: 	movsbl	0x43(%r13), %esi
.Ltmp701:
    00000354: 	movq	%r12, %rdi
    00000357: 	callq	_ZNSo3putEc@PLT # Offset: 855
    0000035c: 	movq	%rax, %rdi
    0000035f: 	callq	_ZNSo5flushEv@PLT # Offset: 863
.Ltmp695:
    00000364: 	callq	clock@PLT # Offset: 868
    00000369: 	pxor	%xmm0, %xmm0
    0000036d: 	movq	0x18(%rsp), %rdi
    00000372: 	movq	%rax, end_time(%rip)
    00000379: 	subq	start_time(%rip), %rax
    00000380: 	cvtsi2sd	%rax, %xmm0
    00000385: 	divsd	DATAat0x10920(%rip), %xmm0
    0000038d: 	addq	$0x28, %rsp
    00000391: 	popq	%rbx
    00000392: 	popq	%rbp
    00000393: 	popq	%r12
    00000395: 	popq	%r13
    00000397: 	popq	%r14
    00000399: 	popq	%r15
    0000039b: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 923
.Ltmp683:
    000003a0: 	xorl	%eax, %eax
    000003a2: 	jmp	.Ltmp700 # Offset: 930
.Ltmp699:
    000003a7: 	movq	%r13, %rdi
    000003aa: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 938
    000003af: 	movq	(%r13), %rax
    000003b3: 	movl	$0xa, %esi
    000003b8: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    000003bf: 	movq	0x30(%rax), %rax
    000003c3: 	cmpq	%rdx, %rax
    000003c6: 	je	.Ltmp701 # Offset: 966
    000003c8: 	movq	%r13, %rdi
    000003cb: 	callq	*%rax # Offset: 971
    000003cd: 	movsbl	%al, %esi
    000003d0: 	jmp	.Ltmp701 # Offset: 976
.Ltmp697:
    000003d5: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000003dc: 	movq	-0x18(%rax), %rdi
    000003e0: 	addq	%r14, %rdi
    000003e3: 	movl	0x20(%rdi), %esi
    000003e6: 	orl	$0x1, %esi
    000003e9: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1001
    000003ee: 	jmp	.Ltmp702 # Offset: 1006
.Ltmp698:
    000003f3: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 1011
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_histogramFloat2IfmEvPKT_iPT0_S0_S0_PKc"

Binary Function "_Z20test_histogramFloat4IftEvPKT_iPT0_S0_S0_PKc" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0xb3c0
  Size        : 0x491
  MaxSize     : 0x4a0
  Offset      : 0xb3c0
  Section     : .text
  Orc Section : .local.text._Z20test_histogramFloat4IftEvPKT_iPT0_S0_S0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x4000(%rsp), %r11
.Ltmp703:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp703 # Offset: 37
    00000027: 	subq	$0x38, %rsp
    0000002b: 	movq	%rcx, 0x18(%rsp)
    00000030: 	movq	%rdi, %rbp
    00000033: 	movl	%esi, %r15d
    00000036: 	movq	%rdx, %rbx
    00000039: 	movss	%xmm0, 0x10(%rsp)
    0000003f: 	movss	%xmm1, 0x8(%rsp)
    00000045: 	movq	%fs:0x28, %rax
    0000004e: 	movq	%rax, 0x4028(%rsp)
    00000056: 	xorl	%eax, %eax
    00000058: 	callq	clock@PLT # Offset: 88
    0000005d: 	movss	0x8(%rsp), %xmm0
    00000063: 	movss	0x10(%rsp), %xmm2
    00000069: 	movq	%rax, start_time(%rip)
    00000070: 	movss	DATAat0x10960(%rip), %xmm1
    00000078: 	subss	%xmm2, %xmm0
    0000007c: 	movl	iterations(%rip), %eax
    00000082: 	divss	%xmm0, %xmm1
    00000086: 	testl	%eax, %eax
    00000088: 	jle	.Ltmp704 # Offset: 136
    0000008e: 	leal	-0x4(%r15), %eax
    00000092: 	xorl	%r12d, %r12d
    00000095: 	leaq	0x20(%rsp), %r13
    0000009a: 	cvtss2sd	%xmm1, %xmm1
    0000009e: 	shrl	$0x2, %eax
    000000a1: 	movl	%eax, %edx
    000000a3: 	leal	0x4(,%rax,4), %eax
    000000aa: 	movl	%eax, 0x14(%rsp)
    000000ae: 	shlq	$0x4, %rdx
    000000b2: 	leaq	0x10(%rbp,%rdx), %r14
.Ltmp716:
    000000b7: 	xorl	%esi, %esi
    000000b9: 	movl	$0x4000, %edx
    000000be: 	movq	%rbx, %rdi
    000000c1: 	movss	%xmm2, 0x10(%rsp)
    000000c7: 	movsd	%xmm1, 0x8(%rsp)
    000000cd: 	callq	memset@PLT # Offset: 205
    000000d2: 	xorl	%esi, %esi
    000000d4: 	movl	$0x4000, %edx
    000000d9: 	movq	%r13, %rdi
    000000dc: 	callq	memset@PLT # Offset: 220
    000000e1: 	cmpl	$0x3, %r15d
    000000e5: 	movsd	0x8(%rsp), %xmm1
    000000eb: 	movss	0x10(%rsp), %xmm2
    000000f1: 	jle	.Ltmp705 # Offset: 241
    000000f7: 	movq	%rbp, %rax
    000000fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp710:
    00000100: 	movss	(%rax), %xmm0
    00000104: 	subss	%xmm2, %xmm0
    00000108: 	cvtss2sd	%xmm0, %xmm0
    0000010c: 	mulsd	%xmm1, %xmm0
    00000110: 	cvttsd2si	%xmm0, %esi
    00000114: 	movss	0x4(%rax), %xmm0
    00000119: 	subss	%xmm2, %xmm0
    0000011d: 	cvtss2sd	%xmm0, %xmm0
    00000121: 	mulsd	%xmm1, %xmm0
    00000125: 	cvttsd2si	%xmm0, %edx
    00000129: 	movss	0x8(%rax), %xmm0
    0000012e: 	subss	%xmm2, %xmm0
    00000132: 	cvtss2sd	%xmm0, %xmm0
    00000136: 	mulsd	%xmm1, %xmm0
    0000013a: 	cvttsd2si	%xmm0, %edi
    0000013e: 	movss	0xc(%rax), %xmm0
    00000143: 	subss	%xmm2, %xmm0
    00000147: 	cvtss2sd	%xmm0, %xmm0
    0000014b: 	mulsd	%xmm1, %xmm0
    0000014f: 	cvttsd2si	%xmm0, %r9d
    00000154: 	cmpl	$0x1fff, %esi
    0000015a: 	ja	.Ltmp706 # Offset: 346
    0000015c: 	movslq	%esi, %rsi
    0000015f: 	addw	$0x1, (%rbx,%rsi,2)
.Ltmp706:
    00000164: 	cmpl	$0x1fff, %edx
    0000016a: 	ja	.Ltmp707 # Offset: 362
    0000016c: 	movslq	%edx, %rdx
    0000016f: 	addw	$0x1, 0x20(%rsp,%rdx,2)
.Ltmp707:
    00000175: 	cmpl	$0x1fff, %edi
    0000017b: 	ja	.Ltmp708 # Offset: 379
    0000017d: 	movslq	%edi, %rdi
    00000180: 	addw	$0x1, (%rbx,%rdi,2)
.Ltmp708:
    00000185: 	cmpl	$0x1fff, %r9d
    0000018c: 	ja	.Ltmp709 # Offset: 396
    0000018e: 	movslq	%r9d, %r9
    00000191: 	addw	$0x1, 0x20(%rsp,%r9,2)
.Ltmp709:
    00000198: 	addq	$0x10, %rax
    0000019c: 	cmpq	%rax, %r14
    0000019f: 	jne	.Ltmp710 # Offset: 415
    000001a5: 	movl	0x14(%rsp), %eax
.Ltmp724:
    000001a9: 	cmpl	%r15d, %eax
    000001ac: 	jge	.Ltmp711 # Offset: 428
    000001b2: 	movslq	%eax, %rsi
    000001b5: 	movss	(%rbp,%rsi,4), %xmm0
    000001bb: 	leaq	(,%rsi,4), %rdx
    000001c3: 	subss	%xmm2, %xmm0
    000001c7: 	cvtss2sd	%xmm0, %xmm0
    000001cb: 	mulsd	%xmm1, %xmm0
    000001cf: 	cvttsd2si	%xmm0, %esi
    000001d3: 	cmpl	$0x1fff, %esi
    000001d9: 	ja	.Ltmp712 # Offset: 473
    000001db: 	movslq	%esi, %rsi
    000001de: 	addw	$0x1, (%rbx,%rsi,2)
.Ltmp712:
    000001e3: 	leal	0x1(%rax), %esi
    000001e6: 	cmpl	%esi, %r15d
    000001e9: 	jle	.Ltmp711 # Offset: 489
    000001ef: 	movss	0x4(%rbp,%rdx), %xmm0
    000001f5: 	subss	%xmm2, %xmm0
    000001f9: 	cvtss2sd	%xmm0, %xmm0
    000001fd: 	mulsd	%xmm1, %xmm0
    00000201: 	cvttsd2si	%xmm0, %esi
    00000205: 	cmpl	$0x1fff, %esi
    0000020b: 	ja	.Ltmp713 # Offset: 523
    0000020d: 	movslq	%esi, %rsi
    00000210: 	addw	$0x1, (%rbx,%rsi,2)
.Ltmp713:
    00000215: 	leal	0x2(%rax), %esi
    00000218: 	cmpl	%esi, %r15d
    0000021b: 	jle	.Ltmp711 # Offset: 539
    0000021d: 	movss	0x8(%rbp,%rdx), %xmm0
    00000223: 	subss	%xmm2, %xmm0
    00000227: 	cvtss2sd	%xmm0, %xmm0
    0000022b: 	mulsd	%xmm1, %xmm0
    0000022f: 	cvttsd2si	%xmm0, %esi
    00000233: 	cmpl	$0x1fff, %esi
    00000239: 	ja	.Ltmp714 # Offset: 569
    0000023b: 	movslq	%esi, %rsi
    0000023e: 	addw	$0x1, (%rbx,%rsi,2)
.Ltmp714:
    00000243: 	addl	$0x3, %eax
    00000246: 	cmpl	%eax, %r15d
    00000249: 	jle	.Ltmp711 # Offset: 585
    0000024b: 	movss	0xc(%rbp,%rdx), %xmm0
    00000251: 	subss	%xmm2, %xmm0
    00000255: 	cvtss2sd	%xmm0, %xmm0
    00000259: 	mulsd	%xmm1, %xmm0
    0000025d: 	cvttsd2si	%xmm0, %eax
    00000261: 	cmpl	$0x1fff, %eax
    00000266: 	ja	.Ltmp711 # Offset: 614
    00000268: 	cltq
    0000026a: 	addw	$0x1, (%rbx,%rax,2)
.Ltmp711:
    0000026f: 	xorl	%eax, %eax
    00000271: 	nopl	(%rax) # Size: 7
.Ltmp715:
    00000278: 	movdqu	(%rbx,%rax), %xmm0
    0000027d: 	paddw	(%r13,%rax), %xmm0
    00000284: 	movups	%xmm0, (%rbx,%rax)
    00000288: 	addq	$0x10, %rax
    0000028c: 	cmpq	$0x4000, %rax
    00000292: 	jne	.Ltmp715 # Offset: 658
    00000294: 	addl	$0x1, %r12d
    00000298: 	cmpl	%r12d, iterations(%rip)
    0000029f: 	jg	.Ltmp716 # Offset: 671
.Ltmp704:
    000002a5: 	leaq	referenceHistogramF(%rip), %rbp
    000002ac: 	xorl	%r13d, %r13d
    000002af: 	jmp	.Ltmp717 # Offset: 687
    000002b1: 	nopl	(%rax) # Size: 7
.Ltmp719:
    000002b8: 	addq	$0x1, %r13
    000002bc: 	addq	$0x2, %rbx
    000002c0: 	addq	$0x8, %rbp
    000002c4: 	cmpq	$0x2000, %r13
    000002cb: 	je	.Ltmp718 # Offset: 715
.Ltmp717:
    000002d1: 	movzwl	(%rbp), %eax
    000002d5: 	cmpw	%ax, (%rbx)
    000002d8: 	je	.Ltmp719 # Offset: 728
    000002da: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    000002e1: 	movl	$0x5, %edx
    000002e6: 	leaq	DATAat0x108e4(%rip), %rsi
    000002ed: 	movq	%r14, %rdi
    000002f0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 752
    000002f5: 	cmpq	$0x0, 0x18(%rsp)
    000002fb: 	je	.Ltmp720 # Offset: 763
    00000301: 	movq	0x18(%rsp), %r15
    00000306: 	movq	%r15, %rdi
    00000309: 	callq	strlen@PLT # Offset: 777
    0000030e: 	movq	%r15, %rsi
    00000311: 	movq	%r14, %rdi
    00000314: 	movq	%rax, %rdx
    00000317: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 791
.Ltmp726:
    0000031c: 	movl	$0xf, %edx
    00000321: 	leaq	DATAat0x108ea(%rip), %rsi
    00000328: 	movq	%r14, %rdi
    0000032b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 811
    00000330: 	movq	%r13, %rsi
    00000333: 	movq	%r14, %rdi
    00000336: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 822
    0000033b: 	movl	$0xb, %edx
    00000340: 	leaq	DATAat0x108fa(%rip), %rsi
    00000347: 	movq	%rax, %rdi
    0000034a: 	movq	%rax, %r13
    0000034d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 845
    00000352: 	movq	(%rbp), %rsi
    00000356: 	movq	%r13, %rdi
    00000359: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 857
    0000035e: 	movl	$0x4, %edx
    00000363: 	leaq	DATAat0x10906(%rip), %rsi
    0000036a: 	movq	%rax, %rdi
    0000036d: 	movq	%rax, %rbp
    00000370: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 880
    00000375: 	movzwl	(%rbx), %esi
    00000378: 	movq	%rbp, %rdi
    0000037b: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 891
    00000380: 	movl	$0x2, %edx
    00000385: 	leaq	DATAat0x1090b(%rip), %rsi
    0000038c: 	movq	%rax, %rbp
    0000038f: 	movq	%rax, %rdi
    00000392: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 914
    00000397: 	movq	(%rbp), %rax
    0000039b: 	movq	-0x18(%rax), %rax
    0000039f: 	movq	0xf0(%rbp,%rax), %r13
    000003a7: 	testq	%r13, %r13
    000003aa: 	je	.Ltmp721 # Offset: 938
    000003b0: 	cmpb	$0x0, 0x38(%r13)
    000003b5: 	je	.Ltmp722 # Offset: 949
    000003b7: 	movsbl	0x43(%r13), %esi
    000003bc: 	movq	%rbp, %rdi
    000003bf: 	callq	_ZNSo3putEc@PLT # Offset: 959
    000003c4: 	movq	%rax, %rdi
    000003c7: 	callq	_ZNSo5flushEv@PLT # Offset: 967
.Ltmp718:
    000003cc: 	callq	clock@PLT # Offset: 972
    000003d1: 	movq	%rax, end_time(%rip)
    000003d8: 	movq	0x4028(%rsp), %rdx
    000003e0: 	subq	%fs:0x28, %rdx
    000003e9: 	jne	.Ltmp723 # Offset: 1001
    000003ef: 	subq	start_time(%rip), %rax
    000003f6: 	pxor	%xmm0, %xmm0
    000003fa: 	movq	0x18(%rsp), %rdi
    000003ff: 	cvtsi2sd	%rax, %xmm0
    00000404: 	divsd	DATAat0x10920(%rip), %xmm0
    0000040c: 	addq	$0x4038, %rsp
    00000413: 	popq	%rbx
    00000414: 	popq	%rbp
    00000415: 	popq	%r12
    00000417: 	popq	%r13
    00000419: 	popq	%r14
    0000041b: 	popq	%r15
    0000041d: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1053
.Ltmp705:
    00000422: 	xorl	%eax, %eax
    00000424: 	jmp	.Ltmp724 # Offset: 1060
.Ltmp722:
    00000429: 	movq	%r13, %rdi
    0000042c: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 1068
    00000431: 	movq	(%r13), %rax
    00000435: 	movl	$0xa, %esi
    0000043a: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    00000441: 	movq	0x30(%rax), %rax
    00000445: 	cmpq	%rdx, %rax
    00000448: 	jne	.Ltmp725 # Offset: 1096
.Ltmp727:
    0000044a: 	movq	%rbp, %rdi
    0000044d: 	callq	_ZNSo3putEc@PLT # Offset: 1101
    00000452: 	movq	%rax, %rdi
    00000455: 	callq	_ZNSo5flushEv@PLT # Offset: 1109
    0000045a: 	jmp	.Ltmp718 # Offset: 1114
.Ltmp720:
    0000045f: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000466: 	movq	-0x18(%rax), %rdi
    0000046a: 	addq	%r14, %rdi
    0000046d: 	movl	0x20(%rdi), %esi
    00000470: 	orl	$0x1, %esi
    00000473: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1139
    00000478: 	jmp	.Ltmp726 # Offset: 1144
.Ltmp725:
    0000047d: 	movq	%r13, %rdi
    00000480: 	callq	*%rax # Offset: 1152
    00000482: 	movsbl	%al, %esi
    00000485: 	jmp	.Ltmp727 # Offset: 1157
.Ltmp723:
    00000487: 	callq	__stack_chk_fail@PLT # Offset: 1159
.Ltmp721:
    0000048c: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 1164
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_histogramFloat4IftEvPKT_iPT0_S0_S0_PKc"

Binary Function "_Z20test_histogramFloat4IfjEvPKT_iPT0_S0_S0_PKc" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0xb860
  Size        : 0x47e
  MaxSize     : 0x480
  Offset      : 0xb860
  Section     : .text
  Orc Section : .local.text._Z20test_histogramFloat4IfjEvPKT_iPT0_S0_S0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x8000(%rsp), %r11
.Ltmp728:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp728 # Offset: 37
    00000027: 	subq	$0x38, %rsp
    0000002b: 	movq	%rcx, 0x18(%rsp)
    00000030: 	movq	%rdi, %rbp
    00000033: 	movl	%esi, %r15d
    00000036: 	movq	%rdx, %rbx
    00000039: 	movss	%xmm0, 0x10(%rsp)
    0000003f: 	movss	%xmm1, 0x8(%rsp)
    00000045: 	movq	%fs:0x28, %rax
    0000004e: 	movq	%rax, 0x8028(%rsp)
    00000056: 	xorl	%eax, %eax
    00000058: 	callq	clock@PLT # Offset: 88
    0000005d: 	movss	0x8(%rsp), %xmm0
    00000063: 	movss	0x10(%rsp), %xmm2
    00000069: 	movq	%rax, start_time(%rip)
    00000070: 	movss	DATAat0x10960(%rip), %xmm1
    00000078: 	subss	%xmm2, %xmm0
    0000007c: 	movl	iterations(%rip), %eax
    00000082: 	divss	%xmm0, %xmm1
    00000086: 	testl	%eax, %eax
    00000088: 	jle	.Ltmp729 # Offset: 136
    0000008e: 	leal	-0x4(%r15), %eax
    00000092: 	xorl	%r12d, %r12d
    00000095: 	leaq	0x20(%rsp), %r13
    0000009a: 	cvtss2sd	%xmm1, %xmm1
    0000009e: 	shrl	$0x2, %eax
    000000a1: 	movl	%eax, %edx
    000000a3: 	leal	0x4(,%rax,4), %eax
    000000aa: 	movl	%eax, 0x14(%rsp)
    000000ae: 	shlq	$0x4, %rdx
    000000b2: 	leaq	0x10(%rbp,%rdx), %r14
.Ltmp741:
    000000b7: 	xorl	%esi, %esi
    000000b9: 	movl	$0x8000, %edx
    000000be: 	movq	%rbx, %rdi
    000000c1: 	movss	%xmm2, 0x10(%rsp)
    000000c7: 	movsd	%xmm1, 0x8(%rsp)
    000000cd: 	callq	memset@PLT # Offset: 205
    000000d2: 	xorl	%esi, %esi
    000000d4: 	movl	$0x8000, %edx
    000000d9: 	movq	%r13, %rdi
    000000dc: 	callq	memset@PLT # Offset: 220
    000000e1: 	cmpl	$0x3, %r15d
    000000e5: 	movsd	0x8(%rsp), %xmm1
    000000eb: 	movss	0x10(%rsp), %xmm2
    000000f1: 	jle	.Ltmp730 # Offset: 241
    000000f7: 	movq	%rbp, %rax
    000000fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp735:
    00000100: 	movss	(%rax), %xmm0
    00000104: 	subss	%xmm2, %xmm0
    00000108: 	cvtss2sd	%xmm0, %xmm0
    0000010c: 	mulsd	%xmm1, %xmm0
    00000110: 	cvttsd2si	%xmm0, %esi
    00000114: 	movss	0x4(%rax), %xmm0
    00000119: 	subss	%xmm2, %xmm0
    0000011d: 	cvtss2sd	%xmm0, %xmm0
    00000121: 	mulsd	%xmm1, %xmm0
    00000125: 	cvttsd2si	%xmm0, %edx
    00000129: 	movss	0x8(%rax), %xmm0
    0000012e: 	subss	%xmm2, %xmm0
    00000132: 	cvtss2sd	%xmm0, %xmm0
    00000136: 	mulsd	%xmm1, %xmm0
    0000013a: 	cvttsd2si	%xmm0, %edi
    0000013e: 	movss	0xc(%rax), %xmm0
    00000143: 	subss	%xmm2, %xmm0
    00000147: 	cvtss2sd	%xmm0, %xmm0
    0000014b: 	mulsd	%xmm1, %xmm0
    0000014f: 	cvttsd2si	%xmm0, %r9d
    00000154: 	cmpl	$0x1fff, %esi
    0000015a: 	ja	.Ltmp731 # Offset: 346
    0000015c: 	movslq	%esi, %rsi
    0000015f: 	addl	$0x1, (%rbx,%rsi,4)
.Ltmp731:
    00000163: 	cmpl	$0x1fff, %edx
    00000169: 	ja	.Ltmp732 # Offset: 361
    0000016b: 	movslq	%edx, %rdx
    0000016e: 	addl	$0x1, 0x20(%rsp,%rdx,4)
.Ltmp732:
    00000173: 	cmpl	$0x1fff, %edi
    00000179: 	ja	.Ltmp733 # Offset: 377
    0000017b: 	movslq	%edi, %rdi
    0000017e: 	addl	$0x1, (%rbx,%rdi,4)
.Ltmp733:
    00000182: 	cmpl	$0x1fff, %r9d
    00000189: 	ja	.Ltmp734 # Offset: 393
    0000018b: 	movslq	%r9d, %r9
    0000018e: 	addl	$0x1, 0x20(%rsp,%r9,4)
.Ltmp734:
    00000194: 	addq	$0x10, %rax
    00000198: 	cmpq	%rax, %r14
    0000019b: 	jne	.Ltmp735 # Offset: 411
    000001a1: 	movl	0x14(%rsp), %eax
.Ltmp749:
    000001a5: 	cmpl	%r15d, %eax
    000001a8: 	jge	.Ltmp736 # Offset: 424
    000001ae: 	movslq	%eax, %rsi
    000001b1: 	movss	(%rbp,%rsi,4), %xmm0
    000001b7: 	leaq	(,%rsi,4), %rdx
    000001bf: 	subss	%xmm2, %xmm0
    000001c3: 	cvtss2sd	%xmm0, %xmm0
    000001c7: 	mulsd	%xmm1, %xmm0
    000001cb: 	cvttsd2si	%xmm0, %esi
    000001cf: 	cmpl	$0x1fff, %esi
    000001d5: 	ja	.Ltmp737 # Offset: 469
    000001d7: 	movslq	%esi, %rsi
    000001da: 	addl	$0x1, (%rbx,%rsi,4)
.Ltmp737:
    000001de: 	leal	0x1(%rax), %esi
    000001e1: 	cmpl	%esi, %r15d
    000001e4: 	jle	.Ltmp736 # Offset: 484
    000001e6: 	movss	0x4(%rbp,%rdx), %xmm0
    000001ec: 	subss	%xmm2, %xmm0
    000001f0: 	cvtss2sd	%xmm0, %xmm0
    000001f4: 	mulsd	%xmm1, %xmm0
    000001f8: 	cvttsd2si	%xmm0, %esi
    000001fc: 	cmpl	$0x1fff, %esi
    00000202: 	ja	.Ltmp738 # Offset: 514
    00000204: 	movslq	%esi, %rsi
    00000207: 	addl	$0x1, (%rbx,%rsi,4)
.Ltmp738:
    0000020b: 	leal	0x2(%rax), %esi
    0000020e: 	cmpl	%esi, %r15d
    00000211: 	jle	.Ltmp736 # Offset: 529
    00000213: 	movss	0x8(%rbp,%rdx), %xmm0
    00000219: 	subss	%xmm2, %xmm0
    0000021d: 	cvtss2sd	%xmm0, %xmm0
    00000221: 	mulsd	%xmm1, %xmm0
    00000225: 	cvttsd2si	%xmm0, %esi
    00000229: 	cmpl	$0x1fff, %esi
    0000022f: 	ja	.Ltmp739 # Offset: 559
    00000231: 	movslq	%esi, %rsi
    00000234: 	addl	$0x1, (%rbx,%rsi,4)
.Ltmp739:
    00000238: 	addl	$0x3, %eax
    0000023b: 	cmpl	%eax, %r15d
    0000023e: 	jle	.Ltmp736 # Offset: 574
    00000240: 	movss	0xc(%rbp,%rdx), %xmm0
    00000246: 	subss	%xmm2, %xmm0
    0000024a: 	cvtss2sd	%xmm0, %xmm0
    0000024e: 	mulsd	%xmm1, %xmm0
    00000252: 	cvttsd2si	%xmm0, %eax
    00000256: 	cmpl	$0x1fff, %eax
    0000025b: 	ja	.Ltmp736 # Offset: 603
    0000025d: 	cltq
    0000025f: 	addl	$0x1, (%rbx,%rax,4)
.Ltmp736:
    00000263: 	xorl	%eax, %eax
    00000265: 	nopl	(%rax) # Size: 3
.Ltmp740:
    00000268: 	movdqu	(%rbx,%rax), %xmm0
    0000026d: 	paddd	(%r13,%rax), %xmm0
    00000274: 	movups	%xmm0, (%rbx,%rax)
    00000278: 	addq	$0x10, %rax
    0000027c: 	cmpq	$0x8000, %rax
    00000282: 	jne	.Ltmp740 # Offset: 642
    00000284: 	addl	$0x1, %r12d
    00000288: 	cmpl	%r12d, iterations(%rip)
    0000028f: 	jg	.Ltmp741 # Offset: 655
.Ltmp729:
    00000295: 	leaq	referenceHistogramF(%rip), %rbp
    0000029c: 	xorl	%r13d, %r13d
    0000029f: 	jmp	.Ltmp742 # Offset: 671
    000002a1: 	nopl	(%rax) # Size: 7
.Ltmp744:
    000002a8: 	addq	$0x1, %r13
    000002ac: 	addq	$0x4, %rbx
    000002b0: 	addq	$0x8, %rbp
    000002b4: 	cmpq	$0x2000, %r13
    000002bb: 	je	.Ltmp743 # Offset: 699
.Ltmp742:
    000002c1: 	movl	(%rbp), %eax
    000002c4: 	cmpl	%eax, (%rbx)
    000002c6: 	je	.Ltmp744 # Offset: 710
    000002c8: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    000002cf: 	movl	$0x5, %edx
    000002d4: 	leaq	DATAat0x108e4(%rip), %rsi
    000002db: 	movq	%r14, %rdi
    000002de: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 734
    000002e3: 	cmpq	$0x0, 0x18(%rsp)
    000002e9: 	je	.Ltmp745 # Offset: 745
    000002ef: 	movq	0x18(%rsp), %r15
    000002f4: 	movq	%r15, %rdi
    000002f7: 	callq	strlen@PLT # Offset: 759
    000002fc: 	movq	%r15, %rsi
    000002ff: 	movq	%r14, %rdi
    00000302: 	movq	%rax, %rdx
    00000305: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 773
.Ltmp751:
    0000030a: 	movl	$0xf, %edx
    0000030f: 	leaq	DATAat0x108ea(%rip), %rsi
    00000316: 	movq	%r14, %rdi
    00000319: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 793
    0000031e: 	movq	%r13, %rsi
    00000321: 	movq	%r14, %rdi
    00000324: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 804
    00000329: 	movl	$0xb, %edx
    0000032e: 	leaq	DATAat0x108fa(%rip), %rsi
    00000335: 	movq	%rax, %rdi
    00000338: 	movq	%rax, %r13
    0000033b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 827
    00000340: 	movq	(%rbp), %rsi
    00000344: 	movq	%r13, %rdi
    00000347: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 839
    0000034c: 	movl	$0x4, %edx
    00000351: 	leaq	DATAat0x10906(%rip), %rsi
    00000358: 	movq	%rax, %rdi
    0000035b: 	movq	%rax, %rbp
    0000035e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 862
    00000363: 	movl	(%rbx), %esi
    00000365: 	movq	%rbp, %rdi
    00000368: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 872
    0000036d: 	movl	$0x2, %edx
    00000372: 	leaq	DATAat0x1090b(%rip), %rsi
    00000379: 	movq	%rax, %rbp
    0000037c: 	movq	%rax, %rdi
    0000037f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 895
    00000384: 	movq	(%rbp), %rax
    00000388: 	movq	-0x18(%rax), %rax
    0000038c: 	movq	0xf0(%rbp,%rax), %r13
    00000394: 	testq	%r13, %r13
    00000397: 	je	.Ltmp746 # Offset: 919
    0000039d: 	cmpb	$0x0, 0x38(%r13)
    000003a2: 	je	.Ltmp747 # Offset: 930
    000003a4: 	movsbl	0x43(%r13), %esi
    000003a9: 	movq	%rbp, %rdi
    000003ac: 	callq	_ZNSo3putEc@PLT # Offset: 940
    000003b1: 	movq	%rax, %rdi
    000003b4: 	callq	_ZNSo5flushEv@PLT # Offset: 948
.Ltmp743:
    000003b9: 	callq	clock@PLT # Offset: 953
    000003be: 	movq	%rax, end_time(%rip)
    000003c5: 	movq	0x8028(%rsp), %rdx
    000003cd: 	subq	%fs:0x28, %rdx
    000003d6: 	jne	.Ltmp748 # Offset: 982
    000003dc: 	subq	start_time(%rip), %rax
    000003e3: 	pxor	%xmm0, %xmm0
    000003e7: 	movq	0x18(%rsp), %rdi
    000003ec: 	cvtsi2sd	%rax, %xmm0
    000003f1: 	divsd	DATAat0x10920(%rip), %xmm0
    000003f9: 	addq	$0x8038, %rsp
    00000400: 	popq	%rbx
    00000401: 	popq	%rbp
    00000402: 	popq	%r12
    00000404: 	popq	%r13
    00000406: 	popq	%r14
    00000408: 	popq	%r15
    0000040a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1034
.Ltmp730:
    0000040f: 	xorl	%eax, %eax
    00000411: 	jmp	.Ltmp749 # Offset: 1041
.Ltmp747:
    00000416: 	movq	%r13, %rdi
    00000419: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 1049
    0000041e: 	movq	(%r13), %rax
    00000422: 	movl	$0xa, %esi
    00000427: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    0000042e: 	movq	0x30(%rax), %rax
    00000432: 	cmpq	%rdx, %rax
    00000435: 	jne	.Ltmp750 # Offset: 1077
.Ltmp752:
    00000437: 	movq	%rbp, %rdi
    0000043a: 	callq	_ZNSo3putEc@PLT # Offset: 1082
    0000043f: 	movq	%rax, %rdi
    00000442: 	callq	_ZNSo5flushEv@PLT # Offset: 1090
    00000447: 	jmp	.Ltmp743 # Offset: 1095
.Ltmp745:
    0000044c: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000453: 	movq	-0x18(%rax), %rdi
    00000457: 	addq	%r14, %rdi
    0000045a: 	movl	0x20(%rdi), %esi
    0000045d: 	orl	$0x1, %esi
    00000460: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1120
    00000465: 	jmp	.Ltmp751 # Offset: 1125
.Ltmp750:
    0000046a: 	movq	%r13, %rdi
    0000046d: 	callq	*%rax # Offset: 1133
    0000046f: 	movsbl	%al, %esi
    00000472: 	jmp	.Ltmp752 # Offset: 1138
.Ltmp748:
    00000474: 	callq	__stack_chk_fail@PLT # Offset: 1140
.Ltmp746:
    00000479: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 1145
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_histogramFloat4IfjEvPKT_iPT0_S0_S0_PKc"

Binary Function "_Z20test_histogramFloat4IfmEvPKT_iPT0_S0_S0_PKc" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0xbce0
  Size        : 0x489
  MaxSize     : 0x490
  Offset      : 0xbce0
  Section     : .text
  Orc Section : .local.text._Z20test_histogramFloat4IfmEvPKT_iPT0_S0_S0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x10000(%rsp), %r11
.Ltmp753:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp753 # Offset: 37
    00000027: 	subq	$0x38, %rsp
    0000002b: 	movq	%rcx, 0x18(%rsp)
    00000030: 	movq	%rdi, %rbp
    00000033: 	movl	%esi, %r15d
    00000036: 	movq	%rdx, %rbx
    00000039: 	movss	%xmm0, 0x10(%rsp)
    0000003f: 	movss	%xmm1, 0x8(%rsp)
    00000045: 	movq	%fs:0x28, %rax
    0000004e: 	movq	%rax, 0x10028(%rsp)
    00000056: 	xorl	%eax, %eax
    00000058: 	callq	clock@PLT # Offset: 88
    0000005d: 	movss	0x8(%rsp), %xmm0
    00000063: 	movss	0x10(%rsp), %xmm2
    00000069: 	movq	%rax, start_time(%rip)
    00000070: 	movss	DATAat0x10960(%rip), %xmm1
    00000078: 	subss	%xmm2, %xmm0
    0000007c: 	movl	iterations(%rip), %eax
    00000082: 	divss	%xmm0, %xmm1
    00000086: 	testl	%eax, %eax
    00000088: 	jle	.Ltmp754 # Offset: 136
    0000008e: 	leal	-0x4(%r15), %eax
    00000092: 	xorl	%r12d, %r12d
    00000095: 	leaq	0x20(%rsp), %r13
    0000009a: 	cvtss2sd	%xmm1, %xmm1
    0000009e: 	shrl	$0x2, %eax
    000000a1: 	movl	%eax, %edx
    000000a3: 	leal	0x4(,%rax,4), %eax
    000000aa: 	movl	%eax, 0x14(%rsp)
    000000ae: 	shlq	$0x4, %rdx
    000000b2: 	leaq	0x10(%rbp,%rdx), %r14
.Ltmp766:
    000000b7: 	xorl	%esi, %esi
    000000b9: 	movl	$0x10000, %edx
    000000be: 	movq	%rbx, %rdi
    000000c1: 	movss	%xmm2, 0x10(%rsp)
    000000c7: 	movsd	%xmm1, 0x8(%rsp)
    000000cd: 	callq	memset@PLT # Offset: 205
    000000d2: 	xorl	%esi, %esi
    000000d4: 	movl	$0x10000, %edx
    000000d9: 	movq	%r13, %rdi
    000000dc: 	callq	memset@PLT # Offset: 220
    000000e1: 	cmpl	$0x3, %r15d
    000000e5: 	movsd	0x8(%rsp), %xmm1
    000000eb: 	movss	0x10(%rsp), %xmm2
    000000f1: 	jle	.Ltmp755 # Offset: 241
    000000f7: 	movq	%rbp, %rax
    000000fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp760:
    00000100: 	movss	(%rax), %xmm0
    00000104: 	subss	%xmm2, %xmm0
    00000108: 	cvtss2sd	%xmm0, %xmm0
    0000010c: 	mulsd	%xmm1, %xmm0
    00000110: 	cvttsd2si	%xmm0, %esi
    00000114: 	movss	0x4(%rax), %xmm0
    00000119: 	subss	%xmm2, %xmm0
    0000011d: 	cvtss2sd	%xmm0, %xmm0
    00000121: 	mulsd	%xmm1, %xmm0
    00000125: 	cvttsd2si	%xmm0, %edx
    00000129: 	movss	0x8(%rax), %xmm0
    0000012e: 	subss	%xmm2, %xmm0
    00000132: 	cvtss2sd	%xmm0, %xmm0
    00000136: 	mulsd	%xmm1, %xmm0
    0000013a: 	cvttsd2si	%xmm0, %edi
    0000013e: 	movss	0xc(%rax), %xmm0
    00000143: 	subss	%xmm2, %xmm0
    00000147: 	cvtss2sd	%xmm0, %xmm0
    0000014b: 	mulsd	%xmm1, %xmm0
    0000014f: 	cvttsd2si	%xmm0, %r9d
    00000154: 	cmpl	$0x1fff, %esi
    0000015a: 	ja	.Ltmp756 # Offset: 346
    0000015c: 	movslq	%esi, %rsi
    0000015f: 	addq	$0x1, (%rbx,%rsi,8)
.Ltmp756:
    00000164: 	cmpl	$0x1fff, %edx
    0000016a: 	ja	.Ltmp757 # Offset: 362
    0000016c: 	movslq	%edx, %rdx
    0000016f: 	addq	$0x1, 0x20(%rsp,%rdx,8)
.Ltmp757:
    00000175: 	cmpl	$0x1fff, %edi
    0000017b: 	ja	.Ltmp758 # Offset: 379
    0000017d: 	movslq	%edi, %rdi
    00000180: 	addq	$0x1, (%rbx,%rdi,8)
.Ltmp758:
    00000185: 	cmpl	$0x1fff, %r9d
    0000018c: 	ja	.Ltmp759 # Offset: 396
    0000018e: 	movslq	%r9d, %r9
    00000191: 	addq	$0x1, 0x20(%rsp,%r9,8)
.Ltmp759:
    00000197: 	addq	$0x10, %rax
    0000019b: 	cmpq	%rax, %r14
    0000019e: 	jne	.Ltmp760 # Offset: 414
    000001a4: 	movl	0x14(%rsp), %eax
.Ltmp774:
    000001a8: 	cmpl	%r15d, %eax
    000001ab: 	jge	.Ltmp761 # Offset: 427
    000001b1: 	movslq	%eax, %rsi
    000001b4: 	movss	(%rbp,%rsi,4), %xmm0
    000001ba: 	leaq	(,%rsi,4), %rdx
    000001c2: 	subss	%xmm2, %xmm0
    000001c6: 	cvtss2sd	%xmm0, %xmm0
    000001ca: 	mulsd	%xmm1, %xmm0
    000001ce: 	cvttsd2si	%xmm0, %esi
    000001d2: 	cmpl	$0x1fff, %esi
    000001d8: 	ja	.Ltmp762 # Offset: 472
    000001da: 	movslq	%esi, %rsi
    000001dd: 	addq	$0x1, (%rbx,%rsi,8)
.Ltmp762:
    000001e2: 	leal	0x1(%rax), %esi
    000001e5: 	cmpl	%esi, %r15d
    000001e8: 	jle	.Ltmp761 # Offset: 488
    000001ee: 	movss	0x4(%rbp,%rdx), %xmm0
    000001f4: 	subss	%xmm2, %xmm0
    000001f8: 	cvtss2sd	%xmm0, %xmm0
    000001fc: 	mulsd	%xmm1, %xmm0
    00000200: 	cvttsd2si	%xmm0, %esi
    00000204: 	cmpl	$0x1fff, %esi
    0000020a: 	ja	.Ltmp763 # Offset: 522
    0000020c: 	movslq	%esi, %rsi
    0000020f: 	addq	$0x1, (%rbx,%rsi,8)
.Ltmp763:
    00000214: 	leal	0x2(%rax), %esi
    00000217: 	cmpl	%esi, %r15d
    0000021a: 	jle	.Ltmp761 # Offset: 538
    0000021c: 	movss	0x8(%rbp,%rdx), %xmm0
    00000222: 	subss	%xmm2, %xmm0
    00000226: 	cvtss2sd	%xmm0, %xmm0
    0000022a: 	mulsd	%xmm1, %xmm0
    0000022e: 	cvttsd2si	%xmm0, %esi
    00000232: 	cmpl	$0x1fff, %esi
    00000238: 	ja	.Ltmp764 # Offset: 568
    0000023a: 	movslq	%esi, %rsi
    0000023d: 	addq	$0x1, (%rbx,%rsi,8)
.Ltmp764:
    00000242: 	addl	$0x3, %eax
    00000245: 	cmpl	%eax, %r15d
    00000248: 	jle	.Ltmp761 # Offset: 584
    0000024a: 	movss	0xc(%rbp,%rdx), %xmm0
    00000250: 	subss	%xmm2, %xmm0
    00000254: 	cvtss2sd	%xmm0, %xmm0
    00000258: 	mulsd	%xmm1, %xmm0
    0000025c: 	cvttsd2si	%xmm0, %eax
    00000260: 	cmpl	$0x1fff, %eax
    00000265: 	ja	.Ltmp761 # Offset: 613
    00000267: 	cltq
    00000269: 	addq	$0x1, (%rbx,%rax,8)
.Ltmp761:
    0000026e: 	xorl	%eax, %eax
.Ltmp765:
    00000270: 	movdqu	(%rbx,%rax), %xmm0
    00000275: 	paddq	(%r13,%rax), %xmm0
    0000027c: 	movups	%xmm0, (%rbx,%rax)
    00000280: 	addq	$0x10, %rax
    00000284: 	cmpq	$0x10000, %rax
    0000028a: 	jne	.Ltmp765 # Offset: 650
    0000028c: 	addl	$0x1, %r12d
    00000290: 	cmpl	%r12d, iterations(%rip)
    00000297: 	jg	.Ltmp766 # Offset: 663
.Ltmp754:
    0000029d: 	leaq	referenceHistogramF(%rip), %rbp
    000002a4: 	xorl	%r13d, %r13d
    000002a7: 	jmp	.Ltmp767 # Offset: 679
    000002a9: 	nopl	(%rax) # Size: 7
.Ltmp769:
    000002b0: 	addq	$0x1, %r13
    000002b4: 	addq	$0x8, %rbx
    000002b8: 	addq	$0x8, %rbp
    000002bc: 	cmpq	$0x2000, %r13
    000002c3: 	je	.Ltmp768 # Offset: 707
.Ltmp767:
    000002c9: 	movq	(%rbp), %rax
    000002cd: 	cmpq	%rax, (%rbx)
    000002d0: 	je	.Ltmp769 # Offset: 720
    000002d2: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    000002d9: 	movl	$0x5, %edx
    000002de: 	leaq	DATAat0x108e4(%rip), %rsi
    000002e5: 	movq	%r14, %rdi
    000002e8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 744
    000002ed: 	cmpq	$0x0, 0x18(%rsp)
    000002f3: 	je	.Ltmp770 # Offset: 755
    000002f9: 	movq	0x18(%rsp), %r15
    000002fe: 	movq	%r15, %rdi
    00000301: 	callq	strlen@PLT # Offset: 769
    00000306: 	movq	%r15, %rsi
    00000309: 	movq	%r14, %rdi
    0000030c: 	movq	%rax, %rdx
    0000030f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 783
.Ltmp776:
    00000314: 	movl	$0xf, %edx
    00000319: 	leaq	DATAat0x108ea(%rip), %rsi
    00000320: 	movq	%r14, %rdi
    00000323: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 803
    00000328: 	movq	%r13, %rsi
    0000032b: 	movq	%r14, %rdi
    0000032e: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 814
    00000333: 	movl	$0xb, %edx
    00000338: 	leaq	DATAat0x108fa(%rip), %rsi
    0000033f: 	movq	%rax, %rdi
    00000342: 	movq	%rax, %r13
    00000345: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 837
    0000034a: 	movq	(%rbp), %rsi
    0000034e: 	movq	%r13, %rdi
    00000351: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 849
    00000356: 	movl	$0x4, %edx
    0000035b: 	leaq	DATAat0x10906(%rip), %rsi
    00000362: 	movq	%rax, %rdi
    00000365: 	movq	%rax, %rbp
    00000368: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 872
    0000036d: 	movq	(%rbx), %rsi
    00000370: 	movq	%rbp, %rdi
    00000373: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 883
    00000378: 	movl	$0x2, %edx
    0000037d: 	leaq	DATAat0x1090b(%rip), %rsi
    00000384: 	movq	%rax, %rbp
    00000387: 	movq	%rax, %rdi
    0000038a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 906
    0000038f: 	movq	(%rbp), %rax
    00000393: 	movq	-0x18(%rax), %rax
    00000397: 	movq	0xf0(%rbp,%rax), %r13
    0000039f: 	testq	%r13, %r13
    000003a2: 	je	.Ltmp771 # Offset: 930
    000003a8: 	cmpb	$0x0, 0x38(%r13)
    000003ad: 	je	.Ltmp772 # Offset: 941
    000003af: 	movsbl	0x43(%r13), %esi
    000003b4: 	movq	%rbp, %rdi
    000003b7: 	callq	_ZNSo3putEc@PLT # Offset: 951
    000003bc: 	movq	%rax, %rdi
    000003bf: 	callq	_ZNSo5flushEv@PLT # Offset: 959
.Ltmp768:
    000003c4: 	callq	clock@PLT # Offset: 964
    000003c9: 	movq	%rax, end_time(%rip)
    000003d0: 	movq	0x10028(%rsp), %rdx
    000003d8: 	subq	%fs:0x28, %rdx
    000003e1: 	jne	.Ltmp773 # Offset: 993
    000003e7: 	subq	start_time(%rip), %rax
    000003ee: 	pxor	%xmm0, %xmm0
    000003f2: 	movq	0x18(%rsp), %rdi
    000003f7: 	cvtsi2sd	%rax, %xmm0
    000003fc: 	divsd	DATAat0x10920(%rip), %xmm0
    00000404: 	addq	$0x10038, %rsp
    0000040b: 	popq	%rbx
    0000040c: 	popq	%rbp
    0000040d: 	popq	%r12
    0000040f: 	popq	%r13
    00000411: 	popq	%r14
    00000413: 	popq	%r15
    00000415: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1045
.Ltmp755:
    0000041a: 	xorl	%eax, %eax
    0000041c: 	jmp	.Ltmp774 # Offset: 1052
.Ltmp772:
    00000421: 	movq	%r13, %rdi
    00000424: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 1060
    00000429: 	movq	(%r13), %rax
    0000042d: 	movl	$0xa, %esi
    00000432: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    00000439: 	movq	0x30(%rax), %rax
    0000043d: 	cmpq	%rdx, %rax
    00000440: 	jne	.Ltmp775 # Offset: 1088
.Ltmp777:
    00000442: 	movq	%rbp, %rdi
    00000445: 	callq	_ZNSo3putEc@PLT # Offset: 1093
    0000044a: 	movq	%rax, %rdi
    0000044d: 	callq	_ZNSo5flushEv@PLT # Offset: 1101
    00000452: 	jmp	.Ltmp768 # Offset: 1106
.Ltmp770:
    00000457: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000045e: 	movq	-0x18(%rax), %rdi
    00000462: 	addq	%r14, %rdi
    00000465: 	movl	0x20(%rdi), %esi
    00000468: 	orl	$0x1, %esi
    0000046b: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1131
    00000470: 	jmp	.Ltmp776 # Offset: 1136
.Ltmp775:
    00000475: 	movq	%r13, %rdi
    00000478: 	callq	*%rax # Offset: 1144
    0000047a: 	movsbl	%al, %esi
    0000047d: 	jmp	.Ltmp777 # Offset: 1149
.Ltmp773:
    0000047f: 	callq	__stack_chk_fail@PLT # Offset: 1151
.Ltmp771:
    00000484: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 1156
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_histogramFloat4IfmEvPKT_iPT0_S0_S0_PKc"

Binary Function "_Z20test_histogramFloat5IftEvPKT_iPT0_S0_S0_PKc" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0xc170
  Size        : 0x4f3
  MaxSize     : 0x500
  Offset      : 0xc170
  Section     : .text
  Orc Section : .local.text._Z20test_histogramFloat5IftEvPKT_iPT0_S0_S0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0xc000(%rsp), %r11
.Ltmp778:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp778 # Offset: 37
    00000027: 	subq	$0x48, %rsp
    0000002b: 	movq	%rdi, 0x18(%rsp)
    00000030: 	movq	%rdx, %rbx
    00000033: 	movl	%esi, 0x20(%rsp)
    00000037: 	movq	%rcx, 0x28(%rsp)
    0000003c: 	movss	%xmm0, 0x10(%rsp)
    00000042: 	movss	%xmm1, 0x8(%rsp)
    00000048: 	movq	%fs:0x28, %rax
    00000051: 	movq	%rax, 0xc038(%rsp)
    00000059: 	xorl	%eax, %eax
    0000005b: 	callq	clock@PLT # Offset: 91
    00000060: 	movss	0x8(%rsp), %xmm0
    00000066: 	movss	0x10(%rsp), %xmm2
    0000006c: 	movq	%rax, start_time(%rip)
    00000073: 	movl	iterations(%rip), %eax
    00000079: 	subss	%xmm2, %xmm0
    0000007d: 	movl	0x20(%rsp), %r8d
    00000082: 	movq	0x18(%rsp), %r9
    00000087: 	movss	DATAat0x10960(%rip), %xmm1
    0000008f: 	testl	%eax, %eax
    00000091: 	divss	%xmm0, %xmm1
    00000095: 	jle	.Ltmp779 # Offset: 149
    0000009b: 	leal	-0x4(%r8), %eax
    0000009f: 	xorl	%r14d, %r14d
    000000a2: 	leaq	0x30(%rsp), %r15
    000000a7: 	cvtss2sd	%xmm1, %xmm1
    000000ab: 	shrl	$0x2, %eax
    000000ae: 	leaq	0x4030(%rsp), %r12
    000000b6: 	leaq	0x8030(%rsp), %rbp
    000000be: 	movl	%eax, %edx
    000000c0: 	leal	0x4(,%rax,4), %eax
    000000c7: 	movl	%eax, 0x24(%rsp)
    000000cb: 	shlq	$0x4, %rdx
    000000cf: 	leaq	0x10(%r9,%rdx), %r13
.Ltmp791:
    000000d4: 	xorl	%esi, %esi
    000000d6: 	movl	$0x4000, %edx
    000000db: 	movq	%rbx, %rdi
    000000de: 	movl	%r8d, 0x20(%rsp)
    000000e3: 	movq	%r9, 0x10(%rsp)
    000000e8: 	movss	%xmm2, 0x18(%rsp)
    000000ee: 	movsd	%xmm1, 0x8(%rsp)
    000000f4: 	callq	memset@PLT # Offset: 244
    000000f9: 	xorl	%esi, %esi
    000000fb: 	movl	$0x4000, %edx
    00000100: 	movq	%r15, %rdi
    00000103: 	callq	memset@PLT # Offset: 259
    00000108: 	xorl	%esi, %esi
    0000010a: 	movl	$0x4000, %edx
    0000010f: 	movq	%r12, %rdi
    00000112: 	callq	memset@PLT # Offset: 274
    00000117: 	xorl	%esi, %esi
    00000119: 	movl	$0x4000, %edx
    0000011e: 	movq	%rbp, %rdi
    00000121: 	callq	memset@PLT # Offset: 289
    00000126: 	movl	0x20(%rsp), %r8d
    0000012b: 	movq	0x10(%rsp), %r9
    00000130: 	movsd	0x8(%rsp), %xmm1
    00000136: 	movss	0x18(%rsp), %xmm2
    0000013c: 	cmpl	$0x3, %r8d
    00000140: 	jle	.Ltmp780 # Offset: 320
    00000146: 	movq	%r9, %rax
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp785:
    00000150: 	movss	(%rax), %xmm0
    00000154: 	subss	%xmm2, %xmm0
    00000158: 	cvtss2sd	%xmm0, %xmm0
    0000015c: 	mulsd	%xmm1, %xmm0
    00000160: 	cvttsd2si	%xmm0, %edi
    00000164: 	movss	0x4(%rax), %xmm0
    00000169: 	subss	%xmm2, %xmm0
    0000016d: 	cvtss2sd	%xmm0, %xmm0
    00000171: 	mulsd	%xmm1, %xmm0
    00000175: 	cvttsd2si	%xmm0, %esi
    00000179: 	movss	0x8(%rax), %xmm0
    0000017e: 	subss	%xmm2, %xmm0
    00000182: 	cvtss2sd	%xmm0, %xmm0
    00000186: 	mulsd	%xmm1, %xmm0
    0000018a: 	cvttsd2si	%xmm0, %edx
    0000018e: 	movss	0xc(%rax), %xmm0
    00000193: 	subss	%xmm2, %xmm0
    00000197: 	cvtss2sd	%xmm0, %xmm0
    0000019b: 	mulsd	%xmm1, %xmm0
    0000019f: 	cvttsd2si	%xmm0, %r11d
    000001a4: 	cmpl	$0x1fff, %edi
    000001aa: 	ja	.Ltmp781 # Offset: 426
    000001ac: 	movslq	%edi, %rdi
    000001af: 	addw	$0x1, (%rbx,%rdi,2)
.Ltmp781:
    000001b4: 	cmpl	$0x1fff, %esi
    000001ba: 	ja	.Ltmp782 # Offset: 442
    000001bc: 	movslq	%esi, %rsi
    000001bf: 	addw	$0x1, 0x30(%rsp,%rsi,2)
.Ltmp782:
    000001c5: 	cmpl	$0x1fff, %edx
    000001cb: 	ja	.Ltmp783 # Offset: 459
    000001cd: 	movslq	%edx, %rdx
    000001d0: 	addw	$0x1, 0x4030(%rsp,%rdx,2)
.Ltmp783:
    000001d9: 	cmpl	$0x1fff, %r11d
    000001e0: 	ja	.Ltmp784 # Offset: 480
    000001e2: 	movslq	%r11d, %r11
    000001e5: 	addw	$0x1, 0x8030(%rsp,%r11,2)
.Ltmp784:
    000001ef: 	addq	$0x10, %rax
    000001f3: 	cmpq	%rax, %r13
    000001f6: 	jne	.Ltmp785 # Offset: 502
    000001fc: 	movl	0x24(%rsp), %eax
.Ltmp799:
    00000200: 	cmpl	%r8d, %eax
    00000203: 	jge	.Ltmp786 # Offset: 515
    00000209: 	movslq	%eax, %rsi
    0000020c: 	movss	(%r9,%rsi,4), %xmm0
    00000212: 	leaq	(,%rsi,4), %rdx
    0000021a: 	subss	%xmm2, %xmm0
    0000021e: 	cvtss2sd	%xmm0, %xmm0
    00000222: 	mulsd	%xmm1, %xmm0
    00000226: 	cvttsd2si	%xmm0, %esi
    0000022a: 	cmpl	$0x1fff, %esi
    00000230: 	ja	.Ltmp787 # Offset: 560
    00000232: 	movslq	%esi, %rsi
    00000235: 	addw	$0x1, (%rbx,%rsi,2)
.Ltmp787:
    0000023a: 	leal	0x1(%rax), %esi
    0000023d: 	cmpl	%esi, %r8d
    00000240: 	jle	.Ltmp786 # Offset: 576
    00000246: 	movss	0x4(%r9,%rdx), %xmm0
    0000024d: 	subss	%xmm2, %xmm0
    00000251: 	cvtss2sd	%xmm0, %xmm0
    00000255: 	mulsd	%xmm1, %xmm0
    00000259: 	cvttsd2si	%xmm0, %esi
    0000025d: 	cmpl	$0x1fff, %esi
    00000263: 	ja	.Ltmp788 # Offset: 611
    00000265: 	movslq	%esi, %rsi
    00000268: 	addw	$0x1, (%rbx,%rsi,2)
.Ltmp788:
    0000026d: 	leal	0x2(%rax), %esi
    00000270: 	cmpl	%esi, %r8d
    00000273: 	jle	.Ltmp786 # Offset: 627
    00000275: 	movss	0x8(%r9,%rdx), %xmm0
    0000027c: 	subss	%xmm2, %xmm0
    00000280: 	cvtss2sd	%xmm0, %xmm0
    00000284: 	mulsd	%xmm1, %xmm0
    00000288: 	cvttsd2si	%xmm0, %esi
    0000028c: 	cmpl	$0x1fff, %esi
    00000292: 	ja	.Ltmp789 # Offset: 658
    00000294: 	movslq	%esi, %rsi
    00000297: 	addw	$0x1, (%rbx,%rsi,2)
.Ltmp789:
    0000029c: 	addl	$0x3, %eax
    0000029f: 	cmpl	%eax, %r8d
    000002a2: 	jle	.Ltmp786 # Offset: 674
    000002a4: 	movss	0xc(%r9,%rdx), %xmm0
    000002ab: 	subss	%xmm2, %xmm0
    000002af: 	cvtss2sd	%xmm0, %xmm0
    000002b3: 	mulsd	%xmm1, %xmm0
    000002b7: 	cvttsd2si	%xmm0, %eax
    000002bb: 	cmpl	$0x1fff, %eax
    000002c0: 	ja	.Ltmp786 # Offset: 704
    000002c2: 	cltq
    000002c4: 	addw	$0x1, (%rbx,%rax,2)
.Ltmp786:
    000002c9: 	xorl	%eax, %eax
    000002cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp790:
    000002d0: 	movdqu	(%rbx,%rax), %xmm0
    000002d5: 	paddw	(%r15,%rax), %xmm0
    000002db: 	paddw	(%r12,%rax), %xmm0
    000002e1: 	paddw	(%rbp,%rax), %xmm0
    000002e7: 	movups	%xmm0, (%rbx,%rax)
    000002eb: 	addq	$0x10, %rax
    000002ef: 	cmpq	$0x4000, %rax
    000002f5: 	jne	.Ltmp790 # Offset: 757
    000002f7: 	addl	$0x1, %r14d
    000002fb: 	cmpl	%r14d, iterations(%rip)
    00000302: 	jg	.Ltmp791 # Offset: 770
.Ltmp779:
    00000308: 	leaq	referenceHistogramF(%rip), %rbp
    0000030f: 	xorl	%r12d, %r12d
    00000312: 	jmp	.Ltmp792 # Offset: 786
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp794:
    00000318: 	addq	$0x1, %r12
    0000031c: 	addq	$0x2, %rbx
    00000320: 	addq	$0x8, %rbp
    00000324: 	cmpq	$0x2000, %r12
    0000032b: 	je	.Ltmp793 # Offset: 811
.Ltmp792:
    00000331: 	movzwl	(%rbp), %eax
    00000335: 	cmpw	%ax, (%rbx)
    00000338: 	je	.Ltmp794 # Offset: 824
    0000033a: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    00000341: 	movl	$0x5, %edx
    00000346: 	leaq	DATAat0x108e4(%rip), %rsi
    0000034d: 	movq	%r13, %rdi
    00000350: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 848
    00000355: 	cmpq	$0x0, 0x28(%rsp)
    0000035b: 	je	.Ltmp795 # Offset: 859
    00000361: 	movq	0x28(%rsp), %r14
    00000366: 	movq	%r14, %rdi
    00000369: 	callq	strlen@PLT # Offset: 873
    0000036e: 	movq	%r14, %rsi
    00000371: 	movq	%r13, %rdi
    00000374: 	movq	%rax, %rdx
    00000377: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 887
.Ltmp801:
    0000037c: 	movl	$0xf, %edx
    00000381: 	leaq	DATAat0x108ea(%rip), %rsi
    00000388: 	movq	%r13, %rdi
    0000038b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 907
    00000390: 	movq	%r12, %rsi
    00000393: 	movq	%r13, %rdi
    00000396: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 918
    0000039b: 	movl	$0xb, %edx
    000003a0: 	leaq	DATAat0x108fa(%rip), %rsi
    000003a7: 	movq	%rax, %rdi
    000003aa: 	movq	%rax, %r12
    000003ad: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 941
    000003b2: 	movq	(%rbp), %rsi
    000003b6: 	movq	%r12, %rdi
    000003b9: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 953
    000003be: 	movl	$0x4, %edx
    000003c3: 	leaq	DATAat0x10906(%rip), %rsi
    000003ca: 	movq	%rax, %rdi
    000003cd: 	movq	%rax, %rbp
    000003d0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 976
    000003d5: 	movzwl	(%rbx), %esi
    000003d8: 	movq	%rbp, %rdi
    000003db: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 987
    000003e0: 	movl	$0x2, %edx
    000003e5: 	leaq	DATAat0x1090b(%rip), %rsi
    000003ec: 	movq	%rax, %rbp
    000003ef: 	movq	%rax, %rdi
    000003f2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1010
    000003f7: 	movq	(%rbp), %rax
    000003fb: 	movq	-0x18(%rax), %rax
    000003ff: 	movq	0xf0(%rbp,%rax), %r12
    00000407: 	testq	%r12, %r12
    0000040a: 	je	.Ltmp796 # Offset: 1034
    00000410: 	cmpb	$0x0, 0x38(%r12)
    00000416: 	je	.Ltmp797 # Offset: 1046
    00000418: 	movsbl	0x43(%r12), %esi
    0000041e: 	movq	%rbp, %rdi
    00000421: 	callq	_ZNSo3putEc@PLT # Offset: 1057
    00000426: 	movq	%rax, %rdi
    00000429: 	callq	_ZNSo5flushEv@PLT # Offset: 1065
.Ltmp793:
    0000042e: 	callq	clock@PLT # Offset: 1070
    00000433: 	movq	%rax, end_time(%rip)
    0000043a: 	movq	0xc038(%rsp), %rdx
    00000442: 	subq	%fs:0x28, %rdx
    0000044b: 	jne	.Ltmp798 # Offset: 1099
    00000451: 	subq	start_time(%rip), %rax
    00000458: 	pxor	%xmm0, %xmm0
    0000045c: 	movq	0x28(%rsp), %rdi
    00000461: 	cvtsi2sd	%rax, %xmm0
    00000466: 	divsd	DATAat0x10920(%rip), %xmm0
    0000046e: 	addq	$0xc048, %rsp
    00000475: 	popq	%rbx
    00000476: 	popq	%rbp
    00000477: 	popq	%r12
    00000479: 	popq	%r13
    0000047b: 	popq	%r14
    0000047d: 	popq	%r15
    0000047f: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1151
.Ltmp780:
    00000484: 	xorl	%eax, %eax
    00000486: 	jmp	.Ltmp799 # Offset: 1158
.Ltmp797:
    0000048b: 	movq	%r12, %rdi
    0000048e: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 1166
    00000493: 	movq	(%r12), %rax
    00000497: 	movl	$0xa, %esi
    0000049c: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    000004a3: 	movq	0x30(%rax), %rax
    000004a7: 	cmpq	%rdx, %rax
    000004aa: 	jne	.Ltmp800 # Offset: 1194
.Ltmp802:
    000004ac: 	movq	%rbp, %rdi
    000004af: 	callq	_ZNSo3putEc@PLT # Offset: 1199
    000004b4: 	movq	%rax, %rdi
    000004b7: 	callq	_ZNSo5flushEv@PLT # Offset: 1207
    000004bc: 	jmp	.Ltmp793 # Offset: 1212
.Ltmp795:
    000004c1: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000004c8: 	movq	-0x18(%rax), %rdi
    000004cc: 	addq	%r13, %rdi
    000004cf: 	movl	0x20(%rdi), %esi
    000004d2: 	orl	$0x1, %esi
    000004d5: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1237
    000004da: 	jmp	.Ltmp801 # Offset: 1242
.Ltmp800:
    000004df: 	movq	%r12, %rdi
    000004e2: 	callq	*%rax # Offset: 1250
    000004e4: 	movsbl	%al, %esi
    000004e7: 	jmp	.Ltmp802 # Offset: 1255
.Ltmp798:
    000004e9: 	callq	__stack_chk_fail@PLT # Offset: 1257
.Ltmp796:
    000004ee: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 1262
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_histogramFloat5IftEvPKT_iPT0_S0_S0_PKc"

Binary Function "_Z20test_histogramFloat5IfjEvPKT_iPT0_S0_S0_PKc" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0xc670
  Size        : 0x4e8
  MaxSize     : 0x4f0
  Offset      : 0xc670
  Section     : .text
  Orc Section : .local.text._Z20test_histogramFloat5IfjEvPKT_iPT0_S0_S0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x18000(%rsp), %r11
.Ltmp803:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp803 # Offset: 37
    00000027: 	subq	$0x48, %rsp
    0000002b: 	movq	%rdi, 0x18(%rsp)
    00000030: 	movq	%rdx, %rbx
    00000033: 	movl	%esi, 0x20(%rsp)
    00000037: 	movq	%rcx, 0x28(%rsp)
    0000003c: 	movss	%xmm0, 0x10(%rsp)
    00000042: 	movss	%xmm1, 0x8(%rsp)
    00000048: 	movq	%fs:0x28, %rax
    00000051: 	movq	%rax, 0x18038(%rsp)
    00000059: 	xorl	%eax, %eax
    0000005b: 	callq	clock@PLT # Offset: 91
    00000060: 	movss	0x8(%rsp), %xmm0
    00000066: 	movss	0x10(%rsp), %xmm2
    0000006c: 	movq	%rax, start_time(%rip)
    00000073: 	movl	iterations(%rip), %eax
    00000079: 	subss	%xmm2, %xmm0
    0000007d: 	movl	0x20(%rsp), %r8d
    00000082: 	movq	0x18(%rsp), %r9
    00000087: 	movss	DATAat0x10960(%rip), %xmm1
    0000008f: 	testl	%eax, %eax
    00000091: 	divss	%xmm0, %xmm1
    00000095: 	jle	.Ltmp804 # Offset: 149
    0000009b: 	leal	-0x4(%r8), %eax
    0000009f: 	xorl	%r14d, %r14d
    000000a2: 	leaq	0x30(%rsp), %r15
    000000a7: 	cvtss2sd	%xmm1, %xmm1
    000000ab: 	shrl	$0x2, %eax
    000000ae: 	leaq	0x8030(%rsp), %r12
    000000b6: 	leaq	0x10030(%rsp), %rbp
    000000be: 	movl	%eax, %edx
    000000c0: 	leal	0x4(,%rax,4), %eax
    000000c7: 	movl	%eax, 0x24(%rsp)
    000000cb: 	shlq	$0x4, %rdx
    000000cf: 	leaq	0x10(%r9,%rdx), %r13
.Ltmp816:
    000000d4: 	xorl	%esi, %esi
    000000d6: 	movl	$0x8000, %edx
    000000db: 	movq	%rbx, %rdi
    000000de: 	movl	%r8d, 0x20(%rsp)
    000000e3: 	movq	%r9, 0x10(%rsp)
    000000e8: 	movss	%xmm2, 0x18(%rsp)
    000000ee: 	movsd	%xmm1, 0x8(%rsp)
    000000f4: 	callq	memset@PLT # Offset: 244
    000000f9: 	xorl	%esi, %esi
    000000fb: 	movl	$0x8000, %edx
    00000100: 	movq	%r15, %rdi
    00000103: 	callq	memset@PLT # Offset: 259
    00000108: 	xorl	%esi, %esi
    0000010a: 	movl	$0x8000, %edx
    0000010f: 	movq	%r12, %rdi
    00000112: 	callq	memset@PLT # Offset: 274
    00000117: 	xorl	%esi, %esi
    00000119: 	movl	$0x8000, %edx
    0000011e: 	movq	%rbp, %rdi
    00000121: 	callq	memset@PLT # Offset: 289
    00000126: 	movl	0x20(%rsp), %r8d
    0000012b: 	movq	0x10(%rsp), %r9
    00000130: 	movsd	0x8(%rsp), %xmm1
    00000136: 	movss	0x18(%rsp), %xmm2
    0000013c: 	cmpl	$0x3, %r8d
    00000140: 	jle	.Ltmp805 # Offset: 320
    00000146: 	movq	%r9, %rax
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp810:
    00000150: 	movss	(%rax), %xmm0
    00000154: 	subss	%xmm2, %xmm0
    00000158: 	cvtss2sd	%xmm0, %xmm0
    0000015c: 	mulsd	%xmm1, %xmm0
    00000160: 	cvttsd2si	%xmm0, %edi
    00000164: 	movss	0x4(%rax), %xmm0
    00000169: 	subss	%xmm2, %xmm0
    0000016d: 	cvtss2sd	%xmm0, %xmm0
    00000171: 	mulsd	%xmm1, %xmm0
    00000175: 	cvttsd2si	%xmm0, %esi
    00000179: 	movss	0x8(%rax), %xmm0
    0000017e: 	subss	%xmm2, %xmm0
    00000182: 	cvtss2sd	%xmm0, %xmm0
    00000186: 	mulsd	%xmm1, %xmm0
    0000018a: 	cvttsd2si	%xmm0, %edx
    0000018e: 	movss	0xc(%rax), %xmm0
    00000193: 	subss	%xmm2, %xmm0
    00000197: 	cvtss2sd	%xmm0, %xmm0
    0000019b: 	mulsd	%xmm1, %xmm0
    0000019f: 	cvttsd2si	%xmm0, %r11d
    000001a4: 	cmpl	$0x1fff, %edi
    000001aa: 	ja	.Ltmp806 # Offset: 426
    000001ac: 	movslq	%edi, %rdi
    000001af: 	addl	$0x1, (%rbx,%rdi,4)
.Ltmp806:
    000001b3: 	cmpl	$0x1fff, %esi
    000001b9: 	ja	.Ltmp807 # Offset: 441
    000001bb: 	movslq	%esi, %rsi
    000001be: 	addl	$0x1, 0x30(%rsp,%rsi,4)
.Ltmp807:
    000001c3: 	cmpl	$0x1fff, %edx
    000001c9: 	ja	.Ltmp808 # Offset: 457
    000001cb: 	movslq	%edx, %rdx
    000001ce: 	addl	$0x1, 0x8030(%rsp,%rdx,4)
.Ltmp808:
    000001d6: 	cmpl	$0x1fff, %r11d
    000001dd: 	ja	.Ltmp809 # Offset: 477
    000001df: 	movslq	%r11d, %r11
    000001e2: 	addl	$0x1, 0x10030(%rsp,%r11,4)
.Ltmp809:
    000001eb: 	addq	$0x10, %rax
    000001ef: 	cmpq	%rax, %r13
    000001f2: 	jne	.Ltmp810 # Offset: 498
    000001f8: 	movl	0x24(%rsp), %eax
.Ltmp824:
    000001fc: 	cmpl	%r8d, %eax
    000001ff: 	jge	.Ltmp811 # Offset: 511
    00000205: 	movslq	%eax, %rsi
    00000208: 	movss	(%r9,%rsi,4), %xmm0
    0000020e: 	leaq	(,%rsi,4), %rdx
    00000216: 	subss	%xmm2, %xmm0
    0000021a: 	cvtss2sd	%xmm0, %xmm0
    0000021e: 	mulsd	%xmm1, %xmm0
    00000222: 	cvttsd2si	%xmm0, %esi
    00000226: 	cmpl	$0x1fff, %esi
    0000022c: 	ja	.Ltmp812 # Offset: 556
    0000022e: 	movslq	%esi, %rsi
    00000231: 	addl	$0x1, (%rbx,%rsi,4)
.Ltmp812:
    00000235: 	leal	0x1(%rax), %esi
    00000238: 	cmpl	%esi, %r8d
    0000023b: 	jle	.Ltmp811 # Offset: 571
    00000241: 	movss	0x4(%r9,%rdx), %xmm0
    00000248: 	subss	%xmm2, %xmm0
    0000024c: 	cvtss2sd	%xmm0, %xmm0
    00000250: 	mulsd	%xmm1, %xmm0
    00000254: 	cvttsd2si	%xmm0, %esi
    00000258: 	cmpl	$0x1fff, %esi
    0000025e: 	ja	.Ltmp813 # Offset: 606
    00000260: 	movslq	%esi, %rsi
    00000263: 	addl	$0x1, (%rbx,%rsi,4)
.Ltmp813:
    00000267: 	leal	0x2(%rax), %esi
    0000026a: 	cmpl	%esi, %r8d
    0000026d: 	jle	.Ltmp811 # Offset: 621
    0000026f: 	movss	0x8(%r9,%rdx), %xmm0
    00000276: 	subss	%xmm2, %xmm0
    0000027a: 	cvtss2sd	%xmm0, %xmm0
    0000027e: 	mulsd	%xmm1, %xmm0
    00000282: 	cvttsd2si	%xmm0, %esi
    00000286: 	cmpl	$0x1fff, %esi
    0000028c: 	ja	.Ltmp814 # Offset: 652
    0000028e: 	movslq	%esi, %rsi
    00000291: 	addl	$0x1, (%rbx,%rsi,4)
.Ltmp814:
    00000295: 	addl	$0x3, %eax
    00000298: 	cmpl	%eax, %r8d
    0000029b: 	jle	.Ltmp811 # Offset: 667
    0000029d: 	movss	0xc(%r9,%rdx), %xmm0
    000002a4: 	subss	%xmm2, %xmm0
    000002a8: 	cvtss2sd	%xmm0, %xmm0
    000002ac: 	mulsd	%xmm1, %xmm0
    000002b0: 	cvttsd2si	%xmm0, %eax
    000002b4: 	cmpl	$0x1fff, %eax
    000002b9: 	ja	.Ltmp811 # Offset: 697
    000002bb: 	cltq
    000002bd: 	addl	$0x1, (%rbx,%rax,4)
.Ltmp811:
    000002c1: 	xorl	%eax, %eax
    000002c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp815:
    000002c8: 	movdqu	(%rbx,%rax), %xmm0
    000002cd: 	paddd	(%r15,%rax), %xmm0
    000002d3: 	paddd	(%r12,%rax), %xmm0
    000002d9: 	paddd	(%rbp,%rax), %xmm0
    000002df: 	movups	%xmm0, (%rbx,%rax)
    000002e3: 	addq	$0x10, %rax
    000002e7: 	cmpq	$0x8000, %rax
    000002ed: 	jne	.Ltmp815 # Offset: 749
    000002ef: 	addl	$0x1, %r14d
    000002f3: 	cmpl	%r14d, iterations(%rip)
    000002fa: 	jg	.Ltmp816 # Offset: 762
.Ltmp804:
    00000300: 	leaq	referenceHistogramF(%rip), %rbp
    00000307: 	xorl	%r12d, %r12d
    0000030a: 	jmp	.Ltmp817 # Offset: 778
    0000030c: 	nopl	(%rax) # Size: 4
.Ltmp819:
    00000310: 	addq	$0x1, %r12
    00000314: 	addq	$0x4, %rbx
    00000318: 	addq	$0x8, %rbp
    0000031c: 	cmpq	$0x2000, %r12
    00000323: 	je	.Ltmp818 # Offset: 803
.Ltmp817:
    00000329: 	movl	(%rbp), %eax
    0000032c: 	cmpl	%eax, (%rbx)
    0000032e: 	je	.Ltmp819 # Offset: 814
    00000330: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    00000337: 	movl	$0x5, %edx
    0000033c: 	leaq	DATAat0x108e4(%rip), %rsi
    00000343: 	movq	%r13, %rdi
    00000346: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 838
    0000034b: 	cmpq	$0x0, 0x28(%rsp)
    00000351: 	je	.Ltmp820 # Offset: 849
    00000357: 	movq	0x28(%rsp), %r14
    0000035c: 	movq	%r14, %rdi
    0000035f: 	callq	strlen@PLT # Offset: 863
    00000364: 	movq	%r14, %rsi
    00000367: 	movq	%r13, %rdi
    0000036a: 	movq	%rax, %rdx
    0000036d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 877
.Ltmp826:
    00000372: 	movl	$0xf, %edx
    00000377: 	leaq	DATAat0x108ea(%rip), %rsi
    0000037e: 	movq	%r13, %rdi
    00000381: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 897
    00000386: 	movq	%r12, %rsi
    00000389: 	movq	%r13, %rdi
    0000038c: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 908
    00000391: 	movl	$0xb, %edx
    00000396: 	leaq	DATAat0x108fa(%rip), %rsi
    0000039d: 	movq	%rax, %rdi
    000003a0: 	movq	%rax, %r12
    000003a3: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 931
    000003a8: 	movq	(%rbp), %rsi
    000003ac: 	movq	%r12, %rdi
    000003af: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 943
    000003b4: 	movl	$0x4, %edx
    000003b9: 	leaq	DATAat0x10906(%rip), %rsi
    000003c0: 	movq	%rax, %rdi
    000003c3: 	movq	%rax, %rbp
    000003c6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 966
    000003cb: 	movl	(%rbx), %esi
    000003cd: 	movq	%rbp, %rdi
    000003d0: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 976
    000003d5: 	movl	$0x2, %edx
    000003da: 	leaq	DATAat0x1090b(%rip), %rsi
    000003e1: 	movq	%rax, %rbp
    000003e4: 	movq	%rax, %rdi
    000003e7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 999
    000003ec: 	movq	(%rbp), %rax
    000003f0: 	movq	-0x18(%rax), %rax
    000003f4: 	movq	0xf0(%rbp,%rax), %r12
    000003fc: 	testq	%r12, %r12
    000003ff: 	je	.Ltmp821 # Offset: 1023
    00000405: 	cmpb	$0x0, 0x38(%r12)
    0000040b: 	je	.Ltmp822 # Offset: 1035
    0000040d: 	movsbl	0x43(%r12), %esi
    00000413: 	movq	%rbp, %rdi
    00000416: 	callq	_ZNSo3putEc@PLT # Offset: 1046
    0000041b: 	movq	%rax, %rdi
    0000041e: 	callq	_ZNSo5flushEv@PLT # Offset: 1054
.Ltmp818:
    00000423: 	callq	clock@PLT # Offset: 1059
    00000428: 	movq	%rax, end_time(%rip)
    0000042f: 	movq	0x18038(%rsp), %rdx
    00000437: 	subq	%fs:0x28, %rdx
    00000440: 	jne	.Ltmp823 # Offset: 1088
    00000446: 	subq	start_time(%rip), %rax
    0000044d: 	pxor	%xmm0, %xmm0
    00000451: 	movq	0x28(%rsp), %rdi
    00000456: 	cvtsi2sd	%rax, %xmm0
    0000045b: 	divsd	DATAat0x10920(%rip), %xmm0
    00000463: 	addq	$0x18048, %rsp
    0000046a: 	popq	%rbx
    0000046b: 	popq	%rbp
    0000046c: 	popq	%r12
    0000046e: 	popq	%r13
    00000470: 	popq	%r14
    00000472: 	popq	%r15
    00000474: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1140
.Ltmp805:
    00000479: 	xorl	%eax, %eax
    0000047b: 	jmp	.Ltmp824 # Offset: 1147
.Ltmp822:
    00000480: 	movq	%r12, %rdi
    00000483: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 1155
    00000488: 	movq	(%r12), %rax
    0000048c: 	movl	$0xa, %esi
    00000491: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    00000498: 	movq	0x30(%rax), %rax
    0000049c: 	cmpq	%rdx, %rax
    0000049f: 	jne	.Ltmp825 # Offset: 1183
.Ltmp827:
    000004a1: 	movq	%rbp, %rdi
    000004a4: 	callq	_ZNSo3putEc@PLT # Offset: 1188
    000004a9: 	movq	%rax, %rdi
    000004ac: 	callq	_ZNSo5flushEv@PLT # Offset: 1196
    000004b1: 	jmp	.Ltmp818 # Offset: 1201
.Ltmp820:
    000004b6: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000004bd: 	movq	-0x18(%rax), %rdi
    000004c1: 	addq	%r13, %rdi
    000004c4: 	movl	0x20(%rdi), %esi
    000004c7: 	orl	$0x1, %esi
    000004ca: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1226
    000004cf: 	jmp	.Ltmp826 # Offset: 1231
.Ltmp825:
    000004d4: 	movq	%r12, %rdi
    000004d7: 	callq	*%rax # Offset: 1239
    000004d9: 	movsbl	%al, %esi
    000004dc: 	jmp	.Ltmp827 # Offset: 1244
.Ltmp823:
    000004de: 	callq	__stack_chk_fail@PLT # Offset: 1246
.Ltmp821:
    000004e3: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 1251
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_histogramFloat5IfjEvPKT_iPT0_S0_S0_PKc"

Binary Function "_Z20test_histogramFloat5IfmEvPKT_iPT0_S0_S0_PKc" after disassembly {
  Number      : 50
  State       : disassembled
  Address     : 0xcb60
  Size        : 0x4f3
  MaxSize     : 0x500
  Offset      : 0xcb60
  Section     : .text
  Orc Section : .local.text._Z20test_histogramFloat5IfmEvPKT_iPT0_S0_S0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x30000(%rsp), %r11
.Ltmp828:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp828 # Offset: 37
    00000027: 	subq	$0x48, %rsp
    0000002b: 	movq	%rdi, 0x18(%rsp)
    00000030: 	movq	%rdx, %rbx
    00000033: 	movl	%esi, 0x20(%rsp)
    00000037: 	movq	%rcx, 0x28(%rsp)
    0000003c: 	movss	%xmm0, 0x10(%rsp)
    00000042: 	movss	%xmm1, 0x8(%rsp)
    00000048: 	movq	%fs:0x28, %rax
    00000051: 	movq	%rax, 0x30038(%rsp)
    00000059: 	xorl	%eax, %eax
    0000005b: 	callq	clock@PLT # Offset: 91
    00000060: 	movss	0x8(%rsp), %xmm0
    00000066: 	movss	0x10(%rsp), %xmm2
    0000006c: 	movq	%rax, start_time(%rip)
    00000073: 	movl	iterations(%rip), %eax
    00000079: 	subss	%xmm2, %xmm0
    0000007d: 	movl	0x20(%rsp), %r8d
    00000082: 	movq	0x18(%rsp), %r9
    00000087: 	movss	DATAat0x10960(%rip), %xmm1
    0000008f: 	testl	%eax, %eax
    00000091: 	divss	%xmm0, %xmm1
    00000095: 	jle	.Ltmp829 # Offset: 149
    0000009b: 	leal	-0x4(%r8), %eax
    0000009f: 	xorl	%r14d, %r14d
    000000a2: 	leaq	0x30(%rsp), %r15
    000000a7: 	cvtss2sd	%xmm1, %xmm1
    000000ab: 	shrl	$0x2, %eax
    000000ae: 	leaq	0x10030(%rsp), %r12
    000000b6: 	leaq	0x20030(%rsp), %rbp
    000000be: 	movl	%eax, %edx
    000000c0: 	leal	0x4(,%rax,4), %eax
    000000c7: 	movl	%eax, 0x24(%rsp)
    000000cb: 	shlq	$0x4, %rdx
    000000cf: 	leaq	0x10(%r9,%rdx), %r13
.Ltmp841:
    000000d4: 	xorl	%esi, %esi
    000000d6: 	movl	$0x10000, %edx
    000000db: 	movq	%rbx, %rdi
    000000de: 	movl	%r8d, 0x20(%rsp)
    000000e3: 	movq	%r9, 0x10(%rsp)
    000000e8: 	movss	%xmm2, 0x18(%rsp)
    000000ee: 	movsd	%xmm1, 0x8(%rsp)
    000000f4: 	callq	memset@PLT # Offset: 244
    000000f9: 	xorl	%esi, %esi
    000000fb: 	movl	$0x10000, %edx
    00000100: 	movq	%r15, %rdi
    00000103: 	callq	memset@PLT # Offset: 259
    00000108: 	xorl	%esi, %esi
    0000010a: 	movl	$0x10000, %edx
    0000010f: 	movq	%r12, %rdi
    00000112: 	callq	memset@PLT # Offset: 274
    00000117: 	xorl	%esi, %esi
    00000119: 	movl	$0x10000, %edx
    0000011e: 	movq	%rbp, %rdi
    00000121: 	callq	memset@PLT # Offset: 289
    00000126: 	movl	0x20(%rsp), %r8d
    0000012b: 	movq	0x10(%rsp), %r9
    00000130: 	movsd	0x8(%rsp), %xmm1
    00000136: 	movss	0x18(%rsp), %xmm2
    0000013c: 	cmpl	$0x3, %r8d
    00000140: 	jle	.Ltmp830 # Offset: 320
    00000146: 	movq	%r9, %rax
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp835:
    00000150: 	movss	(%rax), %xmm0
    00000154: 	subss	%xmm2, %xmm0
    00000158: 	cvtss2sd	%xmm0, %xmm0
    0000015c: 	mulsd	%xmm1, %xmm0
    00000160: 	cvttsd2si	%xmm0, %edi
    00000164: 	movss	0x4(%rax), %xmm0
    00000169: 	subss	%xmm2, %xmm0
    0000016d: 	cvtss2sd	%xmm0, %xmm0
    00000171: 	mulsd	%xmm1, %xmm0
    00000175: 	cvttsd2si	%xmm0, %esi
    00000179: 	movss	0x8(%rax), %xmm0
    0000017e: 	subss	%xmm2, %xmm0
    00000182: 	cvtss2sd	%xmm0, %xmm0
    00000186: 	mulsd	%xmm1, %xmm0
    0000018a: 	cvttsd2si	%xmm0, %edx
    0000018e: 	movss	0xc(%rax), %xmm0
    00000193: 	subss	%xmm2, %xmm0
    00000197: 	cvtss2sd	%xmm0, %xmm0
    0000019b: 	mulsd	%xmm1, %xmm0
    0000019f: 	cvttsd2si	%xmm0, %r11d
    000001a4: 	cmpl	$0x1fff, %edi
    000001aa: 	ja	.Ltmp831 # Offset: 426
    000001ac: 	movslq	%edi, %rdi
    000001af: 	addq	$0x1, (%rbx,%rdi,8)
.Ltmp831:
    000001b4: 	cmpl	$0x1fff, %esi
    000001ba: 	ja	.Ltmp832 # Offset: 442
    000001bc: 	movslq	%esi, %rsi
    000001bf: 	addq	$0x1, 0x30(%rsp,%rsi,8)
.Ltmp832:
    000001c5: 	cmpl	$0x1fff, %edx
    000001cb: 	ja	.Ltmp833 # Offset: 459
    000001cd: 	movslq	%edx, %rdx
    000001d0: 	addq	$0x1, 0x10030(%rsp,%rdx,8)
.Ltmp833:
    000001d9: 	cmpl	$0x1fff, %r11d
    000001e0: 	ja	.Ltmp834 # Offset: 480
    000001e2: 	movslq	%r11d, %r11
    000001e5: 	addq	$0x1, 0x20030(%rsp,%r11,8)
.Ltmp834:
    000001ee: 	addq	$0x10, %rax
    000001f2: 	cmpq	%rax, %r13
    000001f5: 	jne	.Ltmp835 # Offset: 501
    000001fb: 	movl	0x24(%rsp), %eax
.Ltmp849:
    000001ff: 	cmpl	%r8d, %eax
    00000202: 	jge	.Ltmp836 # Offset: 514
    00000208: 	movslq	%eax, %rsi
    0000020b: 	movss	(%r9,%rsi,4), %xmm0
    00000211: 	leaq	(,%rsi,4), %rdx
    00000219: 	subss	%xmm2, %xmm0
    0000021d: 	cvtss2sd	%xmm0, %xmm0
    00000221: 	mulsd	%xmm1, %xmm0
    00000225: 	cvttsd2si	%xmm0, %esi
    00000229: 	cmpl	$0x1fff, %esi
    0000022f: 	ja	.Ltmp837 # Offset: 559
    00000231: 	movslq	%esi, %rsi
    00000234: 	addq	$0x1, (%rbx,%rsi,8)
.Ltmp837:
    00000239: 	leal	0x1(%rax), %esi
    0000023c: 	cmpl	%esi, %r8d
    0000023f: 	jle	.Ltmp836 # Offset: 575
    00000245: 	movss	0x4(%r9,%rdx), %xmm0
    0000024c: 	subss	%xmm2, %xmm0
    00000250: 	cvtss2sd	%xmm0, %xmm0
    00000254: 	mulsd	%xmm1, %xmm0
    00000258: 	cvttsd2si	%xmm0, %esi
    0000025c: 	cmpl	$0x1fff, %esi
    00000262: 	ja	.Ltmp838 # Offset: 610
    00000264: 	movslq	%esi, %rsi
    00000267: 	addq	$0x1, (%rbx,%rsi,8)
.Ltmp838:
    0000026c: 	leal	0x2(%rax), %esi
    0000026f: 	cmpl	%esi, %r8d
    00000272: 	jle	.Ltmp836 # Offset: 626
    00000274: 	movss	0x8(%r9,%rdx), %xmm0
    0000027b: 	subss	%xmm2, %xmm0
    0000027f: 	cvtss2sd	%xmm0, %xmm0
    00000283: 	mulsd	%xmm1, %xmm0
    00000287: 	cvttsd2si	%xmm0, %esi
    0000028b: 	cmpl	$0x1fff, %esi
    00000291: 	ja	.Ltmp839 # Offset: 657
    00000293: 	movslq	%esi, %rsi
    00000296: 	addq	$0x1, (%rbx,%rsi,8)
.Ltmp839:
    0000029b: 	addl	$0x3, %eax
    0000029e: 	cmpl	%eax, %r8d
    000002a1: 	jle	.Ltmp836 # Offset: 673
    000002a3: 	movss	0xc(%r9,%rdx), %xmm0
    000002aa: 	subss	%xmm2, %xmm0
    000002ae: 	cvtss2sd	%xmm0, %xmm0
    000002b2: 	mulsd	%xmm1, %xmm0
    000002b6: 	cvttsd2si	%xmm0, %eax
    000002ba: 	cmpl	$0x1fff, %eax
    000002bf: 	ja	.Ltmp836 # Offset: 703
    000002c1: 	cltq
    000002c3: 	addq	$0x1, (%rbx,%rax,8)
.Ltmp836:
    000002c8: 	xorl	%eax, %eax
    000002ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp840:
    000002d0: 	movdqu	(%rbx,%rax), %xmm0
    000002d5: 	paddq	(%r15,%rax), %xmm0
    000002db: 	paddq	(%r12,%rax), %xmm0
    000002e1: 	paddq	(%rbp,%rax), %xmm0
    000002e7: 	movups	%xmm0, (%rbx,%rax)
    000002eb: 	addq	$0x10, %rax
    000002ef: 	cmpq	$0x10000, %rax
    000002f5: 	jne	.Ltmp840 # Offset: 757
    000002f7: 	addl	$0x1, %r14d
    000002fb: 	cmpl	%r14d, iterations(%rip)
    00000302: 	jg	.Ltmp841 # Offset: 770
.Ltmp829:
    00000308: 	leaq	referenceHistogramF(%rip), %rbp
    0000030f: 	xorl	%r12d, %r12d
    00000312: 	jmp	.Ltmp842 # Offset: 786
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp844:
    00000318: 	addq	$0x1, %r12
    0000031c: 	addq	$0x8, %rbx
    00000320: 	addq	$0x8, %rbp
    00000324: 	cmpq	$0x2000, %r12
    0000032b: 	je	.Ltmp843 # Offset: 811
.Ltmp842:
    00000331: 	movq	(%rbp), %rax
    00000335: 	cmpq	%rax, (%rbx)
    00000338: 	je	.Ltmp844 # Offset: 824
    0000033a: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    00000341: 	movl	$0x5, %edx
    00000346: 	leaq	DATAat0x108e4(%rip), %rsi
    0000034d: 	movq	%r13, %rdi
    00000350: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 848
    00000355: 	cmpq	$0x0, 0x28(%rsp)
    0000035b: 	je	.Ltmp845 # Offset: 859
    00000361: 	movq	0x28(%rsp), %r14
    00000366: 	movq	%r14, %rdi
    00000369: 	callq	strlen@PLT # Offset: 873
    0000036e: 	movq	%r14, %rsi
    00000371: 	movq	%r13, %rdi
    00000374: 	movq	%rax, %rdx
    00000377: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 887
.Ltmp851:
    0000037c: 	movl	$0xf, %edx
    00000381: 	leaq	DATAat0x108ea(%rip), %rsi
    00000388: 	movq	%r13, %rdi
    0000038b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 907
    00000390: 	movq	%r12, %rsi
    00000393: 	movq	%r13, %rdi
    00000396: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 918
    0000039b: 	movl	$0xb, %edx
    000003a0: 	leaq	DATAat0x108fa(%rip), %rsi
    000003a7: 	movq	%rax, %rdi
    000003aa: 	movq	%rax, %r12
    000003ad: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 941
    000003b2: 	movq	(%rbp), %rsi
    000003b6: 	movq	%r12, %rdi
    000003b9: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 953
    000003be: 	movl	$0x4, %edx
    000003c3: 	leaq	DATAat0x10906(%rip), %rsi
    000003ca: 	movq	%rax, %rdi
    000003cd: 	movq	%rax, %rbp
    000003d0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 976
    000003d5: 	movq	(%rbx), %rsi
    000003d8: 	movq	%rbp, %rdi
    000003db: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 987
    000003e0: 	movl	$0x2, %edx
    000003e5: 	leaq	DATAat0x1090b(%rip), %rsi
    000003ec: 	movq	%rax, %rbp
    000003ef: 	movq	%rax, %rdi
    000003f2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 1010
    000003f7: 	movq	(%rbp), %rax
    000003fb: 	movq	-0x18(%rax), %rax
    000003ff: 	movq	0xf0(%rbp,%rax), %r12
    00000407: 	testq	%r12, %r12
    0000040a: 	je	.Ltmp846 # Offset: 1034
    00000410: 	cmpb	$0x0, 0x38(%r12)
    00000416: 	je	.Ltmp847 # Offset: 1046
    00000418: 	movsbl	0x43(%r12), %esi
    0000041e: 	movq	%rbp, %rdi
    00000421: 	callq	_ZNSo3putEc@PLT # Offset: 1057
    00000426: 	movq	%rax, %rdi
    00000429: 	callq	_ZNSo5flushEv@PLT # Offset: 1065
.Ltmp843:
    0000042e: 	callq	clock@PLT # Offset: 1070
    00000433: 	movq	%rax, end_time(%rip)
    0000043a: 	movq	0x30038(%rsp), %rdx
    00000442: 	subq	%fs:0x28, %rdx
    0000044b: 	jne	.Ltmp848 # Offset: 1099
    00000451: 	subq	start_time(%rip), %rax
    00000458: 	pxor	%xmm0, %xmm0
    0000045c: 	movq	0x28(%rsp), %rdi
    00000461: 	cvtsi2sd	%rax, %xmm0
    00000466: 	divsd	DATAat0x10920(%rip), %xmm0
    0000046e: 	addq	$0x30048, %rsp
    00000475: 	popq	%rbx
    00000476: 	popq	%rbp
    00000477: 	popq	%r12
    00000479: 	popq	%r13
    0000047b: 	popq	%r14
    0000047d: 	popq	%r15
    0000047f: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1151
.Ltmp830:
    00000484: 	xorl	%eax, %eax
    00000486: 	jmp	.Ltmp849 # Offset: 1158
.Ltmp847:
    0000048b: 	movq	%r12, %rdi
    0000048e: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 1166
    00000493: 	movq	(%r12), %rax
    00000497: 	movl	$0xa, %esi
    0000049c: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    000004a3: 	movq	0x30(%rax), %rax
    000004a7: 	cmpq	%rdx, %rax
    000004aa: 	jne	.Ltmp850 # Offset: 1194
.Ltmp852:
    000004ac: 	movq	%rbp, %rdi
    000004af: 	callq	_ZNSo3putEc@PLT # Offset: 1199
    000004b4: 	movq	%rax, %rdi
    000004b7: 	callq	_ZNSo5flushEv@PLT # Offset: 1207
    000004bc: 	jmp	.Ltmp843 # Offset: 1212
.Ltmp845:
    000004c1: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000004c8: 	movq	-0x18(%rax), %rdi
    000004cc: 	addq	%r13, %rdi
    000004cf: 	movl	0x20(%rdi), %esi
    000004d2: 	orl	$0x1, %esi
    000004d5: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1237
    000004da: 	jmp	.Ltmp851 # Offset: 1242
.Ltmp850:
    000004df: 	movq	%r12, %rdi
    000004e2: 	callq	*%rax # Offset: 1250
    000004e4: 	movsbl	%al, %esi
    000004e7: 	jmp	.Ltmp852 # Offset: 1255
.Ltmp848:
    000004e9: 	callq	__stack_chk_fail@PLT # Offset: 1257
.Ltmp846:
    000004ee: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 1262
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_histogramFloat5IfmEvPKT_iPT0_S0_S0_PKc"

Binary Function "_Z20test_histogramFloat2IdtEvPKT_iPT0_S0_S0_PKc" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0xd060
  Size        : 0x3e0
  MaxSize     : 0x3e0
  Offset      : 0xd060
  Section     : .text
  Orc Section : .local.text._Z20test_histogramFloat2IdtEvPKT_iPT0_S0_S0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movsd	%xmm1, 0x8(%rsp)
    00000021: 	movq	%rcx, 0x18(%rsp)
    00000026: 	movsd	%xmm0, 0x10(%rsp)
    0000002c: 	callq	clock@PLT # Offset: 44
    00000031: 	movsd	0x8(%rsp), %xmm1
    00000037: 	movsd	0x10(%rsp), %xmm2
    0000003d: 	movq	%rax, start_time(%rip)
    00000044: 	movsd	DATAat0x10930(%rip), %xmm3
    0000004c: 	subsd	%xmm2, %xmm1
    00000050: 	movl	iterations(%rip), %eax
    00000056: 	divsd	%xmm1, %xmm3
    0000005a: 	testl	%eax, %eax
    0000005c: 	jle	.Ltmp853 # Offset: 92
    00000062: 	leal	-0x4(%r14), %eax
    00000066: 	xorl	%ebp, %ebp
    00000068: 	shrl	$0x2, %eax
    0000006b: 	movl	%eax, %edx
    0000006d: 	leal	0x4(,%rax,4), %ebx
    00000074: 	shlq	$0x5, %rdx
    00000078: 	leaq	0x20(%r15,%rdx), %r13
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp864:
    00000080: 	xorl	%esi, %esi
    00000082: 	movl	$0x4000, %edx
    00000087: 	movq	%r12, %rdi
    0000008a: 	movsd	%xmm2, 0x10(%rsp)
    00000090: 	movsd	%xmm3, 0x8(%rsp)
    00000096: 	callq	memset@PLT # Offset: 150
    0000009b: 	cmpl	$0x3, %r14d
    0000009f: 	movsd	0x8(%rsp), %xmm3
    000000a5: 	movsd	0x10(%rsp), %xmm2
    000000ab: 	jle	.Ltmp854 # Offset: 171
    000000b1: 	movq	%r15, %rax
    000000b4: 	nopl	(%rax) # Size: 4
.Ltmp859:
    000000b8: 	movsd	(%rax), %xmm0
    000000bc: 	subsd	%xmm2, %xmm0
    000000c0: 	mulsd	%xmm3, %xmm0
    000000c4: 	cvttsd2si	%xmm0, %edx
    000000c8: 	movsd	0x8(%rax), %xmm0
    000000cd: 	subsd	%xmm2, %xmm0
    000000d1: 	mulsd	%xmm3, %xmm0
    000000d5: 	cvttsd2si	%xmm0, %edi
    000000d9: 	movsd	0x10(%rax), %xmm0
    000000de: 	subsd	%xmm2, %xmm0
    000000e2: 	mulsd	%xmm3, %xmm0
    000000e6: 	cvttsd2si	%xmm0, %r8d
    000000eb: 	movsd	0x18(%rax), %xmm0
    000000f0: 	subsd	%xmm2, %xmm0
    000000f4: 	mulsd	%xmm3, %xmm0
    000000f8: 	cvttsd2si	%xmm0, %esi
    000000fc: 	cmpl	$0x1fff, %edx
    00000102: 	ja	.Ltmp855 # Offset: 258
    00000104: 	movslq	%edx, %rdx
    00000107: 	addw	$0x1, (%r12,%rdx,2)
.Ltmp855:
    0000010d: 	cmpl	$0x1fff, %edi
    00000113: 	ja	.Ltmp856 # Offset: 275
    00000115: 	movslq	%edi, %rdi
    00000118: 	addw	$0x1, (%r12,%rdi,2)
.Ltmp856:
    0000011e: 	cmpl	$0x1fff, %r8d
    00000125: 	ja	.Ltmp857 # Offset: 293
    00000127: 	movslq	%r8d, %r8
    0000012a: 	addw	$0x1, (%r12,%r8,2)
.Ltmp857:
    00000130: 	cmpl	$0x1fff, %esi
    00000136: 	ja	.Ltmp858 # Offset: 310
    00000138: 	movslq	%esi, %rsi
    0000013b: 	addw	$0x1, (%r12,%rsi,2)
.Ltmp858:
    00000141: 	addq	$0x20, %rax
    00000145: 	cmpq	%rax, %r13
    00000148: 	jne	.Ltmp859 # Offset: 328
    0000014e: 	movl	%ebx, %eax
.Ltmp871:
    00000150: 	cmpl	%eax, %r14d
    00000153: 	jle	.Ltmp860 # Offset: 339
    00000159: 	movslq	%eax, %rsi
    0000015c: 	movsd	(%r15,%rsi,8), %xmm0
    00000162: 	leaq	(,%rsi,8), %rdx
    0000016a: 	subsd	%xmm2, %xmm0
    0000016e: 	mulsd	%xmm3, %xmm0
    00000172: 	cvttsd2si	%xmm0, %esi
    00000176: 	cmpl	$0x1fff, %esi
    0000017c: 	ja	.Ltmp861 # Offset: 380
    0000017e: 	movslq	%esi, %rsi
    00000181: 	addw	$0x1, (%r12,%rsi,2)
.Ltmp861:
    00000187: 	leal	0x1(%rax), %esi
    0000018a: 	cmpl	%esi, %r14d
    0000018d: 	jle	.Ltmp860 # Offset: 397
    00000193: 	movsd	0x8(%r15,%rdx), %xmm0
    0000019a: 	subsd	%xmm2, %xmm0
    0000019e: 	mulsd	%xmm3, %xmm0
    000001a2: 	cvttsd2si	%xmm0, %esi
    000001a6: 	cmpl	$0x1fff, %esi
    000001ac: 	ja	.Ltmp862 # Offset: 428
    000001ae: 	movslq	%esi, %rsi
    000001b1: 	addw	$0x1, (%r12,%rsi,2)
.Ltmp862:
    000001b7: 	leal	0x2(%rax), %esi
    000001ba: 	cmpl	%esi, %r14d
    000001bd: 	jle	.Ltmp860 # Offset: 445
    000001bf: 	movsd	0x10(%r15,%rdx), %xmm0
    000001c6: 	subsd	%xmm2, %xmm0
    000001ca: 	mulsd	%xmm3, %xmm0
    000001ce: 	cvttsd2si	%xmm0, %esi
    000001d2: 	cmpl	$0x1fff, %esi
    000001d8: 	ja	.Ltmp863 # Offset: 472
    000001da: 	movslq	%esi, %rsi
    000001dd: 	addw	$0x1, (%r12,%rsi,2)
.Ltmp863:
    000001e3: 	addl	$0x3, %eax
    000001e6: 	cmpl	%eax, %r14d
    000001e9: 	jle	.Ltmp860 # Offset: 489
    000001eb: 	movsd	0x18(%r15,%rdx), %xmm0
    000001f2: 	subsd	%xmm2, %xmm0
    000001f6: 	mulsd	%xmm3, %xmm0
    000001fa: 	cvttsd2si	%xmm0, %eax
    000001fe: 	cmpl	$0x1fff, %eax
    00000203: 	ja	.Ltmp860 # Offset: 515
    00000205: 	cltq
    00000207: 	addw	$0x1, (%r12,%rax,2)
    0000020d: 	nopl	(%rax) # Size: 3
.Ltmp860:
    00000210: 	addl	$0x1, %ebp
    00000213: 	cmpl	%ebp, iterations(%rip)
    00000219: 	jg	.Ltmp864 # Offset: 537
.Ltmp853:
    0000021f: 	leaq	referenceHistogramF(%rip), %rbx
    00000226: 	xorl	%r13d, %r13d
    00000229: 	jmp	.Ltmp865 # Offset: 553
    0000022b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp867:
    00000230: 	addq	$0x1, %r13
    00000234: 	addq	$0x2, %r12
    00000238: 	addq	$0x8, %rbx
    0000023c: 	cmpq	$0x2000, %r13
    00000243: 	je	.Ltmp866 # Offset: 579
.Ltmp865:
    00000249: 	movzwl	(%rbx), %eax
    0000024c: 	cmpw	%ax, (%r12)
    00000251: 	je	.Ltmp867 # Offset: 593
    00000253: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    0000025a: 	movl	$0x5, %edx
    0000025f: 	leaq	DATAat0x108e4(%rip), %rsi
    00000266: 	movq	%r14, %rdi
    00000269: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 617
    0000026e: 	cmpq	$0x0, 0x18(%rsp)
    00000274: 	je	.Ltmp868 # Offset: 628
    0000027a: 	movq	0x18(%rsp), %r15
    0000027f: 	movq	%r15, %rdi
    00000282: 	callq	strlen@PLT # Offset: 642
    00000287: 	movq	%r15, %rsi
    0000028a: 	movq	%r14, %rdi
    0000028d: 	movq	%rax, %rdx
    00000290: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 656
.Ltmp873:
    00000295: 	movl	$0xf, %edx
    0000029a: 	leaq	DATAat0x108ea(%rip), %rsi
    000002a1: 	movq	%r14, %rdi
    000002a4: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 676
    000002a9: 	movq	%r13, %rsi
    000002ac: 	movq	%r14, %rdi
    000002af: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 687
    000002b4: 	movl	$0xb, %edx
    000002b9: 	leaq	DATAat0x108fa(%rip), %rsi
    000002c0: 	movq	%rax, %rdi
    000002c3: 	movq	%rax, %r13
    000002c6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 710
    000002cb: 	movq	(%rbx), %rsi
    000002ce: 	movq	%r13, %rdi
    000002d1: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 721
    000002d6: 	movl	$0x4, %edx
    000002db: 	leaq	DATAat0x10906(%rip), %rsi
    000002e2: 	movq	%rax, %rdi
    000002e5: 	movq	%rax, %r13
    000002e8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 744
    000002ed: 	movzwl	(%r12), %esi
    000002f2: 	movq	%r13, %rdi
    000002f5: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 757
    000002fa: 	movl	$0x2, %edx
    000002ff: 	leaq	DATAat0x1090b(%rip), %rsi
    00000306: 	movq	%rax, %r12
    00000309: 	movq	%rax, %rdi
    0000030c: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 780
    00000311: 	movq	(%r12), %rax
    00000315: 	movq	-0x18(%rax), %rax
    00000319: 	movq	0xf0(%r12,%rax), %r13
    00000321: 	testq	%r13, %r13
    00000324: 	je	.Ltmp869 # Offset: 804
    0000032a: 	cmpb	$0x0, 0x38(%r13)
    0000032f: 	je	.Ltmp870 # Offset: 815
    00000331: 	movsbl	0x43(%r13), %esi
.Ltmp872:
    00000336: 	movq	%r12, %rdi
    00000339: 	callq	_ZNSo3putEc@PLT # Offset: 825
    0000033e: 	movq	%rax, %rdi
    00000341: 	callq	_ZNSo5flushEv@PLT # Offset: 833
.Ltmp866:
    00000346: 	callq	clock@PLT # Offset: 838
    0000034b: 	pxor	%xmm0, %xmm0
    0000034f: 	movq	0x18(%rsp), %rdi
    00000354: 	movq	%rax, end_time(%rip)
    0000035b: 	subq	start_time(%rip), %rax
    00000362: 	cvtsi2sd	%rax, %xmm0
    00000367: 	divsd	DATAat0x10920(%rip), %xmm0
    0000036f: 	addq	$0x28, %rsp
    00000373: 	popq	%rbx
    00000374: 	popq	%rbp
    00000375: 	popq	%r12
    00000377: 	popq	%r13
    00000379: 	popq	%r14
    0000037b: 	popq	%r15
    0000037d: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 893
    00000382: 	nopw	(%rax,%rax) # Size: 6
.Ltmp854:
    00000388: 	xorl	%eax, %eax
    0000038a: 	jmp	.Ltmp871 # Offset: 906
.Ltmp870:
    0000038f: 	movq	%r13, %rdi
    00000392: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 914
    00000397: 	movq	(%r13), %rax
    0000039b: 	movl	$0xa, %esi
    000003a0: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    000003a7: 	movq	0x30(%rax), %rax
    000003ab: 	cmpq	%rdx, %rax
    000003ae: 	je	.Ltmp872 # Offset: 942
    000003b0: 	movq	%r13, %rdi
    000003b3: 	callq	*%rax # Offset: 947
    000003b5: 	movsbl	%al, %esi
    000003b8: 	jmp	.Ltmp872 # Offset: 952
.Ltmp868:
    000003bd: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000003c4: 	movq	-0x18(%rax), %rdi
    000003c8: 	addq	%r14, %rdi
    000003cb: 	movl	0x20(%rdi), %esi
    000003ce: 	orl	$0x1, %esi
    000003d1: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 977
    000003d6: 	jmp	.Ltmp873 # Offset: 982
.Ltmp869:
    000003db: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 987
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_histogramFloat2IdtEvPKT_iPT0_S0_S0_PKc"

Binary Function "_Z20test_histogramFloat2IdjEvPKT_iPT0_S0_S0_PKc" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0xd440
  Size        : 0x3d8
  MaxSize     : 0x3e0
  Offset      : 0xd440
  Section     : .text
  Orc Section : .local.text._Z20test_histogramFloat2IdjEvPKT_iPT0_S0_S0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movsd	%xmm1, 0x8(%rsp)
    00000021: 	movq	%rcx, 0x18(%rsp)
    00000026: 	movsd	%xmm0, 0x10(%rsp)
    0000002c: 	callq	clock@PLT # Offset: 44
    00000031: 	movsd	0x8(%rsp), %xmm1
    00000037: 	movsd	0x10(%rsp), %xmm2
    0000003d: 	movq	%rax, start_time(%rip)
    00000044: 	movsd	DATAat0x10930(%rip), %xmm3
    0000004c: 	subsd	%xmm2, %xmm1
    00000050: 	movl	iterations(%rip), %eax
    00000056: 	divsd	%xmm1, %xmm3
    0000005a: 	testl	%eax, %eax
    0000005c: 	jle	.Ltmp874 # Offset: 92
    00000062: 	leal	-0x4(%r14), %eax
    00000066: 	xorl	%ebp, %ebp
    00000068: 	shrl	$0x2, %eax
    0000006b: 	movl	%eax, %edx
    0000006d: 	leal	0x4(,%rax,4), %ebx
    00000074: 	shlq	$0x5, %rdx
    00000078: 	leaq	0x20(%r15,%rdx), %r13
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp885:
    00000080: 	xorl	%esi, %esi
    00000082: 	movl	$0x8000, %edx
    00000087: 	movq	%r12, %rdi
    0000008a: 	movsd	%xmm2, 0x10(%rsp)
    00000090: 	movsd	%xmm3, 0x8(%rsp)
    00000096: 	callq	memset@PLT # Offset: 150
    0000009b: 	cmpl	$0x3, %r14d
    0000009f: 	movsd	0x8(%rsp), %xmm3
    000000a5: 	movsd	0x10(%rsp), %xmm2
    000000ab: 	jle	.Ltmp875 # Offset: 171
    000000b1: 	movq	%r15, %rax
    000000b4: 	nopl	(%rax) # Size: 4
.Ltmp880:
    000000b8: 	movsd	(%rax), %xmm0
    000000bc: 	subsd	%xmm2, %xmm0
    000000c0: 	mulsd	%xmm3, %xmm0
    000000c4: 	cvttsd2si	%xmm0, %edx
    000000c8: 	movsd	0x8(%rax), %xmm0
    000000cd: 	subsd	%xmm2, %xmm0
    000000d1: 	mulsd	%xmm3, %xmm0
    000000d5: 	cvttsd2si	%xmm0, %edi
    000000d9: 	movsd	0x10(%rax), %xmm0
    000000de: 	subsd	%xmm2, %xmm0
    000000e2: 	mulsd	%xmm3, %xmm0
    000000e6: 	cvttsd2si	%xmm0, %r8d
    000000eb: 	movsd	0x18(%rax), %xmm0
    000000f0: 	subsd	%xmm2, %xmm0
    000000f4: 	mulsd	%xmm3, %xmm0
    000000f8: 	cvttsd2si	%xmm0, %esi
    000000fc: 	cmpl	$0x1fff, %edx
    00000102: 	ja	.Ltmp876 # Offset: 258
    00000104: 	movslq	%edx, %rdx
    00000107: 	addl	$0x1, (%r12,%rdx,4)
.Ltmp876:
    0000010c: 	cmpl	$0x1fff, %edi
    00000112: 	ja	.Ltmp877 # Offset: 274
    00000114: 	movslq	%edi, %rdi
    00000117: 	addl	$0x1, (%r12,%rdi,4)
.Ltmp877:
    0000011c: 	cmpl	$0x1fff, %r8d
    00000123: 	ja	.Ltmp878 # Offset: 291
    00000125: 	movslq	%r8d, %r8
    00000128: 	addl	$0x1, (%r12,%r8,4)
.Ltmp878:
    0000012d: 	cmpl	$0x1fff, %esi
    00000133: 	ja	.Ltmp879 # Offset: 307
    00000135: 	movslq	%esi, %rsi
    00000138: 	addl	$0x1, (%r12,%rsi,4)
.Ltmp879:
    0000013d: 	addq	$0x20, %rax
    00000141: 	cmpq	%rax, %r13
    00000144: 	jne	.Ltmp880 # Offset: 324
    0000014a: 	movl	%ebx, %eax
.Ltmp892:
    0000014c: 	cmpl	%eax, %r14d
    0000014f: 	jle	.Ltmp881 # Offset: 335
    00000155: 	movslq	%eax, %rsi
    00000158: 	movsd	(%r15,%rsi,8), %xmm0
    0000015e: 	leaq	(,%rsi,8), %rdx
    00000166: 	subsd	%xmm2, %xmm0
    0000016a: 	mulsd	%xmm3, %xmm0
    0000016e: 	cvttsd2si	%xmm0, %esi
    00000172: 	cmpl	$0x1fff, %esi
    00000178: 	ja	.Ltmp882 # Offset: 376
    0000017a: 	movslq	%esi, %rsi
    0000017d: 	addl	$0x1, (%r12,%rsi,4)
.Ltmp882:
    00000182: 	leal	0x1(%rax), %esi
    00000185: 	cmpl	%esi, %r14d
    00000188: 	jle	.Ltmp881 # Offset: 392
    0000018a: 	movsd	0x8(%r15,%rdx), %xmm0
    00000191: 	subsd	%xmm2, %xmm0
    00000195: 	mulsd	%xmm3, %xmm0
    00000199: 	cvttsd2si	%xmm0, %esi
    0000019d: 	cmpl	$0x1fff, %esi
    000001a3: 	ja	.Ltmp883 # Offset: 419
    000001a5: 	movslq	%esi, %rsi
    000001a8: 	addl	$0x1, (%r12,%rsi,4)
.Ltmp883:
    000001ad: 	leal	0x2(%rax), %esi
    000001b0: 	cmpl	%esi, %r14d
    000001b3: 	jle	.Ltmp881 # Offset: 435
    000001b5: 	movsd	0x10(%r15,%rdx), %xmm0
    000001bc: 	subsd	%xmm2, %xmm0
    000001c0: 	mulsd	%xmm3, %xmm0
    000001c4: 	cvttsd2si	%xmm0, %esi
    000001c8: 	cmpl	$0x1fff, %esi
    000001ce: 	ja	.Ltmp884 # Offset: 462
    000001d0: 	movslq	%esi, %rsi
    000001d3: 	addl	$0x1, (%r12,%rsi,4)
.Ltmp884:
    000001d8: 	addl	$0x3, %eax
    000001db: 	cmpl	%eax, %r14d
    000001de: 	jle	.Ltmp881 # Offset: 478
    000001e0: 	movsd	0x18(%r15,%rdx), %xmm0
    000001e7: 	subsd	%xmm2, %xmm0
    000001eb: 	mulsd	%xmm3, %xmm0
    000001ef: 	cvttsd2si	%xmm0, %eax
    000001f3: 	cmpl	$0x1fff, %eax
    000001f8: 	ja	.Ltmp881 # Offset: 504
    000001fa: 	cltq
    000001fc: 	addl	$0x1, (%r12,%rax,4)
    00000201: 	nopl	(%rax) # Size: 7
.Ltmp881:
    00000208: 	addl	$0x1, %ebp
    0000020b: 	cmpl	%ebp, iterations(%rip)
    00000211: 	jg	.Ltmp885 # Offset: 529
.Ltmp874:
    00000217: 	leaq	referenceHistogramF(%rip), %rbx
    0000021e: 	xorl	%r13d, %r13d
    00000221: 	jmp	.Ltmp886 # Offset: 545
    00000223: 	nopl	(%rax,%rax) # Size: 5
.Ltmp888:
    00000228: 	addq	$0x1, %r13
    0000022c: 	addq	$0x4, %r12
    00000230: 	addq	$0x8, %rbx
    00000234: 	cmpq	$0x2000, %r13
    0000023b: 	je	.Ltmp887 # Offset: 571
.Ltmp886:
    00000241: 	movl	(%rbx), %eax
    00000243: 	cmpl	%eax, (%r12)
    00000247: 	je	.Ltmp888 # Offset: 583
    00000249: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000250: 	movl	$0x5, %edx
    00000255: 	leaq	DATAat0x108e4(%rip), %rsi
    0000025c: 	movq	%r14, %rdi
    0000025f: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 607
    00000264: 	cmpq	$0x0, 0x18(%rsp)
    0000026a: 	je	.Ltmp889 # Offset: 618
    00000270: 	movq	0x18(%rsp), %r15
    00000275: 	movq	%r15, %rdi
    00000278: 	callq	strlen@PLT # Offset: 632
    0000027d: 	movq	%r15, %rsi
    00000280: 	movq	%r14, %rdi
    00000283: 	movq	%rax, %rdx
    00000286: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 646
.Ltmp894:
    0000028b: 	movl	$0xf, %edx
    00000290: 	leaq	DATAat0x108ea(%rip), %rsi
    00000297: 	movq	%r14, %rdi
    0000029a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 666
    0000029f: 	movq	%r13, %rsi
    000002a2: 	movq	%r14, %rdi
    000002a5: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 677
    000002aa: 	movl	$0xb, %edx
    000002af: 	leaq	DATAat0x108fa(%rip), %rsi
    000002b6: 	movq	%rax, %rdi
    000002b9: 	movq	%rax, %r13
    000002bc: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 700
    000002c1: 	movq	(%rbx), %rsi
    000002c4: 	movq	%r13, %rdi
    000002c7: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 711
    000002cc: 	movl	$0x4, %edx
    000002d1: 	leaq	DATAat0x10906(%rip), %rsi
    000002d8: 	movq	%rax, %rdi
    000002db: 	movq	%rax, %r13
    000002de: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 734
    000002e3: 	movl	(%r12), %esi
    000002e7: 	movq	%r13, %rdi
    000002ea: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 746
    000002ef: 	movl	$0x2, %edx
    000002f4: 	leaq	DATAat0x1090b(%rip), %rsi
    000002fb: 	movq	%rax, %r12
    000002fe: 	movq	%rax, %rdi
    00000301: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 769
    00000306: 	movq	(%r12), %rax
    0000030a: 	movq	-0x18(%rax), %rax
    0000030e: 	movq	0xf0(%r12,%rax), %r13
    00000316: 	testq	%r13, %r13
    00000319: 	je	.Ltmp890 # Offset: 793
    0000031f: 	cmpb	$0x0, 0x38(%r13)
    00000324: 	je	.Ltmp891 # Offset: 804
    00000326: 	movsbl	0x43(%r13), %esi
.Ltmp893:
    0000032b: 	movq	%r12, %rdi
    0000032e: 	callq	_ZNSo3putEc@PLT # Offset: 814
    00000333: 	movq	%rax, %rdi
    00000336: 	callq	_ZNSo5flushEv@PLT # Offset: 822
.Ltmp887:
    0000033b: 	callq	clock@PLT # Offset: 827
    00000340: 	pxor	%xmm0, %xmm0
    00000344: 	movq	0x18(%rsp), %rdi
    00000349: 	movq	%rax, end_time(%rip)
    00000350: 	subq	start_time(%rip), %rax
    00000357: 	cvtsi2sd	%rax, %xmm0
    0000035c: 	divsd	DATAat0x10920(%rip), %xmm0
    00000364: 	addq	$0x28, %rsp
    00000368: 	popq	%rbx
    00000369: 	popq	%rbp
    0000036a: 	popq	%r12
    0000036c: 	popq	%r13
    0000036e: 	popq	%r14
    00000370: 	popq	%r15
    00000372: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 882
    00000377: 	nopw	(%rax,%rax) # Size: 9
.Ltmp875:
    00000380: 	xorl	%eax, %eax
    00000382: 	jmp	.Ltmp892 # Offset: 898
.Ltmp891:
    00000387: 	movq	%r13, %rdi
    0000038a: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 906
    0000038f: 	movq	(%r13), %rax
    00000393: 	movl	$0xa, %esi
    00000398: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    0000039f: 	movq	0x30(%rax), %rax
    000003a3: 	cmpq	%rdx, %rax
    000003a6: 	je	.Ltmp893 # Offset: 934
    000003a8: 	movq	%r13, %rdi
    000003ab: 	callq	*%rax # Offset: 939
    000003ad: 	movsbl	%al, %esi
    000003b0: 	jmp	.Ltmp893 # Offset: 944
.Ltmp889:
    000003b5: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000003bc: 	movq	-0x18(%rax), %rdi
    000003c0: 	addq	%r14, %rdi
    000003c3: 	movl	0x20(%rdi), %esi
    000003c6: 	orl	$0x1, %esi
    000003c9: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 969
    000003ce: 	jmp	.Ltmp894 # Offset: 974
.Ltmp890:
    000003d3: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 979
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_histogramFloat2IdjEvPKT_iPT0_S0_S0_PKc"

Binary Function "_Z20test_histogramFloat2IdmEvPKT_iPT0_S0_S0_PKc" after disassembly {
  Number      : 53
  State       : disassembled
  Address     : 0xd820
  Size        : 0x3d8
  MaxSize     : 0x3e0
  Offset      : 0xd820
  Section     : .text
  Orc Section : .local.text._Z20test_histogramFloat2IdmEvPKT_iPT0_S0_S0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movsd	%xmm1, 0x8(%rsp)
    00000021: 	movq	%rcx, 0x18(%rsp)
    00000026: 	movsd	%xmm0, 0x10(%rsp)
    0000002c: 	callq	clock@PLT # Offset: 44
    00000031: 	movsd	0x8(%rsp), %xmm1
    00000037: 	movsd	0x10(%rsp), %xmm2
    0000003d: 	movq	%rax, start_time(%rip)
    00000044: 	movsd	DATAat0x10930(%rip), %xmm3
    0000004c: 	subsd	%xmm2, %xmm1
    00000050: 	movl	iterations(%rip), %eax
    00000056: 	divsd	%xmm1, %xmm3
    0000005a: 	testl	%eax, %eax
    0000005c: 	jle	.Ltmp895 # Offset: 92
    00000062: 	leal	-0x4(%r14), %eax
    00000066: 	xorl	%ebp, %ebp
    00000068: 	shrl	$0x2, %eax
    0000006b: 	movl	%eax, %edx
    0000006d: 	leal	0x4(,%rax,4), %ebx
    00000074: 	shlq	$0x5, %rdx
    00000078: 	leaq	0x20(%r15,%rdx), %r13
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp906:
    00000080: 	xorl	%esi, %esi
    00000082: 	movl	$0x10000, %edx
    00000087: 	movq	%r12, %rdi
    0000008a: 	movsd	%xmm2, 0x10(%rsp)
    00000090: 	movsd	%xmm3, 0x8(%rsp)
    00000096: 	callq	memset@PLT # Offset: 150
    0000009b: 	cmpl	$0x3, %r14d
    0000009f: 	movsd	0x8(%rsp), %xmm3
    000000a5: 	movsd	0x10(%rsp), %xmm2
    000000ab: 	jle	.Ltmp896 # Offset: 171
    000000b1: 	movq	%r15, %rax
    000000b4: 	nopl	(%rax) # Size: 4
.Ltmp901:
    000000b8: 	movsd	(%rax), %xmm0
    000000bc: 	subsd	%xmm2, %xmm0
    000000c0: 	mulsd	%xmm3, %xmm0
    000000c4: 	cvttsd2si	%xmm0, %edx
    000000c8: 	movsd	0x8(%rax), %xmm0
    000000cd: 	subsd	%xmm2, %xmm0
    000000d1: 	mulsd	%xmm3, %xmm0
    000000d5: 	cvttsd2si	%xmm0, %edi
    000000d9: 	movsd	0x10(%rax), %xmm0
    000000de: 	subsd	%xmm2, %xmm0
    000000e2: 	mulsd	%xmm3, %xmm0
    000000e6: 	cvttsd2si	%xmm0, %r8d
    000000eb: 	movsd	0x18(%rax), %xmm0
    000000f0: 	subsd	%xmm2, %xmm0
    000000f4: 	mulsd	%xmm3, %xmm0
    000000f8: 	cvttsd2si	%xmm0, %esi
    000000fc: 	cmpl	$0x1fff, %edx
    00000102: 	ja	.Ltmp897 # Offset: 258
    00000104: 	movslq	%edx, %rdx
    00000107: 	addq	$0x1, (%r12,%rdx,8)
.Ltmp897:
    0000010c: 	cmpl	$0x1fff, %edi
    00000112: 	ja	.Ltmp898 # Offset: 274
    00000114: 	movslq	%edi, %rdi
    00000117: 	addq	$0x1, (%r12,%rdi,8)
.Ltmp898:
    0000011c: 	cmpl	$0x1fff, %r8d
    00000123: 	ja	.Ltmp899 # Offset: 291
    00000125: 	movslq	%r8d, %r8
    00000128: 	addq	$0x1, (%r12,%r8,8)
.Ltmp899:
    0000012d: 	cmpl	$0x1fff, %esi
    00000133: 	ja	.Ltmp900 # Offset: 307
    00000135: 	movslq	%esi, %rsi
    00000138: 	addq	$0x1, (%r12,%rsi,8)
.Ltmp900:
    0000013d: 	addq	$0x20, %rax
    00000141: 	cmpq	%r13, %rax
    00000144: 	jne	.Ltmp901 # Offset: 324
    0000014a: 	movl	%ebx, %eax
.Ltmp913:
    0000014c: 	cmpl	%eax, %r14d
    0000014f: 	jle	.Ltmp902 # Offset: 335
    00000155: 	movslq	%eax, %rsi
    00000158: 	movsd	(%r15,%rsi,8), %xmm0
    0000015e: 	leaq	(,%rsi,8), %rdx
    00000166: 	subsd	%xmm2, %xmm0
    0000016a: 	mulsd	%xmm3, %xmm0
    0000016e: 	cvttsd2si	%xmm0, %esi
    00000172: 	cmpl	$0x1fff, %esi
    00000178: 	ja	.Ltmp903 # Offset: 376
    0000017a: 	movslq	%esi, %rsi
    0000017d: 	addq	$0x1, (%r12,%rsi,8)
.Ltmp903:
    00000182: 	leal	0x1(%rax), %esi
    00000185: 	cmpl	%esi, %r14d
    00000188: 	jle	.Ltmp902 # Offset: 392
    0000018a: 	movsd	0x8(%r15,%rdx), %xmm0
    00000191: 	subsd	%xmm2, %xmm0
    00000195: 	mulsd	%xmm3, %xmm0
    00000199: 	cvttsd2si	%xmm0, %esi
    0000019d: 	cmpl	$0x1fff, %esi
    000001a3: 	ja	.Ltmp904 # Offset: 419
    000001a5: 	movslq	%esi, %rsi
    000001a8: 	addq	$0x1, (%r12,%rsi,8)
.Ltmp904:
    000001ad: 	leal	0x2(%rax), %esi
    000001b0: 	cmpl	%esi, %r14d
    000001b3: 	jle	.Ltmp902 # Offset: 435
    000001b5: 	movsd	0x10(%r15,%rdx), %xmm0
    000001bc: 	subsd	%xmm2, %xmm0
    000001c0: 	mulsd	%xmm3, %xmm0
    000001c4: 	cvttsd2si	%xmm0, %esi
    000001c8: 	cmpl	$0x1fff, %esi
    000001ce: 	ja	.Ltmp905 # Offset: 462
    000001d0: 	movslq	%esi, %rsi
    000001d3: 	addq	$0x1, (%r12,%rsi,8)
.Ltmp905:
    000001d8: 	addl	$0x3, %eax
    000001db: 	cmpl	%eax, %r14d
    000001de: 	jle	.Ltmp902 # Offset: 478
    000001e0: 	movsd	0x18(%r15,%rdx), %xmm0
    000001e7: 	subsd	%xmm2, %xmm0
    000001eb: 	mulsd	%xmm3, %xmm0
    000001ef: 	cvttsd2si	%xmm0, %eax
    000001f3: 	cmpl	$0x1fff, %eax
    000001f8: 	ja	.Ltmp902 # Offset: 504
    000001fa: 	cltq
    000001fc: 	addq	$0x1, (%r12,%rax,8)
    00000201: 	nopl	(%rax) # Size: 7
.Ltmp902:
    00000208: 	addl	$0x1, %ebp
    0000020b: 	cmpl	%ebp, iterations(%rip)
    00000211: 	jg	.Ltmp906 # Offset: 529
.Ltmp895:
    00000217: 	leaq	referenceHistogramF(%rip), %rbx
    0000021e: 	xorl	%r13d, %r13d
    00000221: 	jmp	.Ltmp907 # Offset: 545
    00000223: 	nopl	(%rax,%rax) # Size: 5
.Ltmp909:
    00000228: 	addq	$0x1, %r13
    0000022c: 	addq	$0x8, %r12
    00000230: 	addq	$0x8, %rbx
    00000234: 	cmpq	$0x2000, %r13
    0000023b: 	je	.Ltmp908 # Offset: 571
.Ltmp907:
    00000241: 	movq	(%rbx), %rax
    00000244: 	cmpq	%rax, (%r12)
    00000248: 	je	.Ltmp909 # Offset: 584
    0000024a: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    00000251: 	movl	$0x5, %edx
    00000256: 	leaq	DATAat0x108e4(%rip), %rsi
    0000025d: 	movq	%r14, %rdi
    00000260: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 608
    00000265: 	cmpq	$0x0, 0x18(%rsp)
    0000026b: 	je	.Ltmp910 # Offset: 619
    00000271: 	movq	0x18(%rsp), %r15
    00000276: 	movq	%r15, %rdi
    00000279: 	callq	strlen@PLT # Offset: 633
    0000027e: 	movq	%r15, %rsi
    00000281: 	movq	%r14, %rdi
    00000284: 	movq	%rax, %rdx
    00000287: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 647
.Ltmp915:
    0000028c: 	movl	$0xf, %edx
    00000291: 	leaq	DATAat0x108ea(%rip), %rsi
    00000298: 	movq	%r14, %rdi
    0000029b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 667
    000002a0: 	movq	%r13, %rsi
    000002a3: 	movq	%r14, %rdi
    000002a6: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 678
    000002ab: 	movl	$0xb, %edx
    000002b0: 	leaq	DATAat0x108fa(%rip), %rsi
    000002b7: 	movq	%rax, %rdi
    000002ba: 	movq	%rax, %r13
    000002bd: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 701
    000002c2: 	movq	(%rbx), %rsi
    000002c5: 	movq	%r13, %rdi
    000002c8: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 712
    000002cd: 	movl	$0x4, %edx
    000002d2: 	leaq	DATAat0x10906(%rip), %rsi
    000002d9: 	movq	%rax, %rdi
    000002dc: 	movq	%rax, %r13
    000002df: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 735
    000002e4: 	movq	(%r12), %rsi
    000002e8: 	movq	%r13, %rdi
    000002eb: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 747
    000002f0: 	movl	$0x2, %edx
    000002f5: 	leaq	DATAat0x1090b(%rip), %rsi
    000002fc: 	movq	%rax, %r12
    000002ff: 	movq	%rax, %rdi
    00000302: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 770
    00000307: 	movq	(%r12), %rax
    0000030b: 	movq	-0x18(%rax), %rax
    0000030f: 	movq	0xf0(%r12,%rax), %r13
    00000317: 	testq	%r13, %r13
    0000031a: 	je	.Ltmp911 # Offset: 794
    00000320: 	cmpb	$0x0, 0x38(%r13)
    00000325: 	je	.Ltmp912 # Offset: 805
    00000327: 	movsbl	0x43(%r13), %esi
.Ltmp914:
    0000032c: 	movq	%r12, %rdi
    0000032f: 	callq	_ZNSo3putEc@PLT # Offset: 815
    00000334: 	movq	%rax, %rdi
    00000337: 	callq	_ZNSo5flushEv@PLT # Offset: 823
.Ltmp908:
    0000033c: 	callq	clock@PLT # Offset: 828
    00000341: 	pxor	%xmm0, %xmm0
    00000345: 	movq	0x18(%rsp), %rdi
    0000034a: 	movq	%rax, end_time(%rip)
    00000351: 	subq	start_time(%rip), %rax
    00000358: 	cvtsi2sd	%rax, %xmm0
    0000035d: 	divsd	DATAat0x10920(%rip), %xmm0
    00000365: 	addq	$0x28, %rsp
    00000369: 	popq	%rbx
    0000036a: 	popq	%rbp
    0000036b: 	popq	%r12
    0000036d: 	popq	%r13
    0000036f: 	popq	%r14
    00000371: 	popq	%r15
    00000373: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 883
    00000378: 	nopl	(%rax,%rax) # Size: 8
.Ltmp896:
    00000380: 	xorl	%eax, %eax
    00000382: 	jmp	.Ltmp913 # Offset: 898
.Ltmp912:
    00000387: 	movq	%r13, %rdi
    0000038a: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 906
    0000038f: 	movq	(%r13), %rax
    00000393: 	movl	$0xa, %esi
    00000398: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    0000039f: 	movq	0x30(%rax), %rax
    000003a3: 	cmpq	%rdx, %rax
    000003a6: 	je	.Ltmp914 # Offset: 934
    000003a8: 	movq	%r13, %rdi
    000003ab: 	callq	*%rax # Offset: 939
    000003ad: 	movsbl	%al, %esi
    000003b0: 	jmp	.Ltmp914 # Offset: 944
.Ltmp910:
    000003b5: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    000003bc: 	movq	-0x18(%rax), %rdi
    000003c0: 	addq	%r14, %rdi
    000003c3: 	movl	0x20(%rdi), %esi
    000003c6: 	orl	$0x1, %esi
    000003c9: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 969
    000003ce: 	jmp	.Ltmp915 # Offset: 974
.Ltmp911:
    000003d3: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 979
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_histogramFloat2IdmEvPKT_iPT0_S0_S0_PKc"

Binary Function "_Z20test_histogramFloat4IdtEvPKT_iPT0_S0_S0_PKc" after disassembly {
  Number      : 54
  State       : disassembled
  Address     : 0xdc00
  Size        : 0x461
  MaxSize     : 0x470
  Offset      : 0xdc00
  Section     : .text
  Orc Section : .local.text._Z20test_histogramFloat4IdtEvPKT_iPT0_S0_S0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x4000(%rsp), %r11
.Ltmp916:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp916 # Offset: 37
    00000027: 	subq	$0x38, %rsp
    0000002b: 	movq	%rcx, 0x18(%rsp)
    00000030: 	movq	%rdi, %rbp
    00000033: 	movl	%esi, %r15d
    00000036: 	movq	%rdx, %rbx
    00000039: 	movsd	%xmm0, 0x8(%rsp)
    0000003f: 	movsd	%xmm1, (%rsp)
    00000044: 	movq	%fs:0x28, %rax
    0000004d: 	movq	%rax, 0x4028(%rsp)
    00000055: 	xorl	%eax, %eax
    00000057: 	callq	clock@PLT # Offset: 87
    0000005c: 	movsd	(%rsp), %xmm0
    00000061: 	movsd	0x8(%rsp), %xmm2
    00000067: 	movq	%rax, start_time(%rip)
    0000006e: 	movsd	DATAat0x10930(%rip), %xmm1
    00000076: 	subsd	%xmm2, %xmm0
    0000007a: 	movl	iterations(%rip), %eax
    00000080: 	divsd	%xmm0, %xmm1
    00000084: 	testl	%eax, %eax
    00000086: 	jle	.Ltmp917 # Offset: 134
    0000008c: 	leal	-0x4(%r15), %eax
    00000090: 	xorl	%r12d, %r12d
    00000093: 	leaq	0x20(%rsp), %r13
    00000098: 	shrl	$0x2, %eax
    0000009b: 	movl	%eax, %edx
    0000009d: 	leal	0x4(,%rax,4), %eax
    000000a4: 	movl	%eax, 0x14(%rsp)
    000000a8: 	shlq	$0x5, %rdx
    000000ac: 	leaq	0x20(%rbp,%rdx), %r14
.Ltmp929:
    000000b1: 	xorl	%esi, %esi
    000000b3: 	movl	$0x4000, %edx
    000000b8: 	movq	%rbx, %rdi
    000000bb: 	movsd	%xmm2, 0x8(%rsp)
    000000c1: 	movsd	%xmm1, (%rsp)
    000000c6: 	callq	memset@PLT # Offset: 198
    000000cb: 	xorl	%esi, %esi
    000000cd: 	movl	$0x4000, %edx
    000000d2: 	movq	%r13, %rdi
    000000d5: 	callq	memset@PLT # Offset: 213
    000000da: 	cmpl	$0x3, %r15d
    000000de: 	movsd	(%rsp), %xmm1
    000000e3: 	movsd	0x8(%rsp), %xmm2
    000000e9: 	jle	.Ltmp918 # Offset: 233
    000000ef: 	movq	%rbp, %rax
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp923:
    000000f8: 	movsd	(%rax), %xmm0
    000000fc: 	subsd	%xmm2, %xmm0
    00000100: 	mulsd	%xmm1, %xmm0
    00000104: 	cvttsd2si	%xmm0, %edx
    00000108: 	movsd	0x8(%rax), %xmm0
    0000010d: 	subsd	%xmm2, %xmm0
    00000111: 	mulsd	%xmm1, %xmm0
    00000115: 	cvttsd2si	%xmm0, %esi
    00000119: 	movsd	0x10(%rax), %xmm0
    0000011e: 	subsd	%xmm2, %xmm0
    00000122: 	mulsd	%xmm1, %xmm0
    00000126: 	cvttsd2si	%xmm0, %r9d
    0000012b: 	movsd	0x18(%rax), %xmm0
    00000130: 	subsd	%xmm2, %xmm0
    00000134: 	mulsd	%xmm1, %xmm0
    00000138: 	cvttsd2si	%xmm0, %edi
    0000013c: 	cmpl	$0x1fff, %edx
    00000142: 	ja	.Ltmp919 # Offset: 322
    00000144: 	movslq	%edx, %rdx
    00000147: 	addw	$0x1, (%rbx,%rdx,2)
.Ltmp919:
    0000014c: 	cmpl	$0x1fff, %esi
    00000152: 	ja	.Ltmp920 # Offset: 338
    00000154: 	movslq	%esi, %rsi
    00000157: 	addw	$0x1, 0x20(%rsp,%rsi,2)
.Ltmp920:
    0000015d: 	cmpl	$0x1fff, %r9d
    00000164: 	ja	.Ltmp921 # Offset: 356
    00000166: 	movslq	%r9d, %r9
    00000169: 	addw	$0x1, (%rbx,%r9,2)
.Ltmp921:
    0000016f: 	cmpl	$0x1fff, %edi
    00000175: 	ja	.Ltmp922 # Offset: 373
    00000177: 	movslq	%edi, %rdi
    0000017a: 	addw	$0x1, 0x20(%rsp,%rdi,2)
.Ltmp922:
    00000180: 	addq	$0x20, %rax
    00000184: 	cmpq	%rax, %r14
    00000187: 	jne	.Ltmp923 # Offset: 391
    0000018d: 	movl	0x14(%rsp), %eax
.Ltmp937:
    00000191: 	cmpl	%r15d, %eax
    00000194: 	jge	.Ltmp924 # Offset: 404
    0000019a: 	movslq	%eax, %rsi
    0000019d: 	movsd	(%rbp,%rsi,8), %xmm0
    000001a3: 	leaq	(,%rsi,8), %rdx
    000001ab: 	subsd	%xmm2, %xmm0
    000001af: 	mulsd	%xmm1, %xmm0
    000001b3: 	cvttsd2si	%xmm0, %esi
    000001b7: 	cmpl	$0x1fff, %esi
    000001bd: 	ja	.Ltmp925 # Offset: 445
    000001bf: 	movslq	%esi, %rsi
    000001c2: 	addw	$0x1, (%rbx,%rsi,2)
.Ltmp925:
    000001c7: 	leal	0x1(%rax), %esi
    000001ca: 	cmpl	%esi, %r15d
    000001cd: 	jle	.Ltmp924 # Offset: 461
    000001cf: 	movsd	0x8(%rbp,%rdx), %xmm0
    000001d5: 	subsd	%xmm2, %xmm0
    000001d9: 	mulsd	%xmm1, %xmm0
    000001dd: 	cvttsd2si	%xmm0, %esi
    000001e1: 	cmpl	$0x1fff, %esi
    000001e7: 	ja	.Ltmp926 # Offset: 487
    000001e9: 	movslq	%esi, %rsi
    000001ec: 	addw	$0x1, (%rbx,%rsi,2)
.Ltmp926:
    000001f1: 	leal	0x2(%rax), %esi
    000001f4: 	cmpl	%esi, %r15d
    000001f7: 	jle	.Ltmp924 # Offset: 503
    000001f9: 	movsd	0x10(%rbp,%rdx), %xmm0
    000001ff: 	subsd	%xmm2, %xmm0
    00000203: 	mulsd	%xmm1, %xmm0
    00000207: 	cvttsd2si	%xmm0, %esi
    0000020b: 	cmpl	$0x1fff, %esi
    00000211: 	ja	.Ltmp927 # Offset: 529
    00000213: 	movslq	%esi, %rsi
    00000216: 	addw	$0x1, (%rbx,%rsi,2)
.Ltmp927:
    0000021b: 	addl	$0x3, %eax
    0000021e: 	cmpl	%eax, %r15d
    00000221: 	jle	.Ltmp924 # Offset: 545
    00000223: 	movsd	0x18(%rbp,%rdx), %xmm0
    00000229: 	subsd	%xmm2, %xmm0
    0000022d: 	mulsd	%xmm1, %xmm0
    00000231: 	cvttsd2si	%xmm0, %eax
    00000235: 	cmpl	$0x1fff, %eax
    0000023a: 	ja	.Ltmp924 # Offset: 570
    0000023c: 	cltq
    0000023e: 	addw	$0x1, (%rbx,%rax,2)
.Ltmp924:
    00000243: 	xorl	%eax, %eax
    00000245: 	nopl	(%rax) # Size: 3
.Ltmp928:
    00000248: 	movdqu	(%rbx,%rax), %xmm0
    0000024d: 	paddw	(%r13,%rax), %xmm0
    00000254: 	movups	%xmm0, (%rbx,%rax)
    00000258: 	addq	$0x10, %rax
    0000025c: 	cmpq	$0x4000, %rax
    00000262: 	jne	.Ltmp928 # Offset: 610
    00000264: 	addl	$0x1, %r12d
    00000268: 	cmpl	%r12d, iterations(%rip)
    0000026f: 	jg	.Ltmp929 # Offset: 623
.Ltmp917:
    00000275: 	leaq	referenceHistogramF(%rip), %rbp
    0000027c: 	xorl	%r13d, %r13d
    0000027f: 	jmp	.Ltmp930 # Offset: 639
    00000281: 	nopl	(%rax) # Size: 7
.Ltmp932:
    00000288: 	addq	$0x1, %r13
    0000028c: 	addq	$0x2, %rbx
    00000290: 	addq	$0x8, %rbp
    00000294: 	cmpq	$0x2000, %r13
    0000029b: 	je	.Ltmp931 # Offset: 667
.Ltmp930:
    000002a1: 	movzwl	(%rbp), %eax
    000002a5: 	cmpw	%ax, (%rbx)
    000002a8: 	je	.Ltmp932 # Offset: 680
    000002aa: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    000002b1: 	movl	$0x5, %edx
    000002b6: 	leaq	DATAat0x108e4(%rip), %rsi
    000002bd: 	movq	%r14, %rdi
    000002c0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 704
    000002c5: 	cmpq	$0x0, 0x18(%rsp)
    000002cb: 	je	.Ltmp933 # Offset: 715
    000002d1: 	movq	0x18(%rsp), %r15
    000002d6: 	movq	%r15, %rdi
    000002d9: 	callq	strlen@PLT # Offset: 729
    000002de: 	movq	%r15, %rsi
    000002e1: 	movq	%r14, %rdi
    000002e4: 	movq	%rax, %rdx
    000002e7: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 743
.Ltmp939:
    000002ec: 	movl	$0xf, %edx
    000002f1: 	leaq	DATAat0x108ea(%rip), %rsi
    000002f8: 	movq	%r14, %rdi
    000002fb: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 763
    00000300: 	movq	%r13, %rsi
    00000303: 	movq	%r14, %rdi
    00000306: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 774
    0000030b: 	movl	$0xb, %edx
    00000310: 	leaq	DATAat0x108fa(%rip), %rsi
    00000317: 	movq	%rax, %rdi
    0000031a: 	movq	%rax, %r13
    0000031d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 797
    00000322: 	movq	(%rbp), %rsi
    00000326: 	movq	%r13, %rdi
    00000329: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 809
    0000032e: 	movl	$0x4, %edx
    00000333: 	leaq	DATAat0x10906(%rip), %rsi
    0000033a: 	movq	%rax, %rdi
    0000033d: 	movq	%rax, %rbp
    00000340: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 832
    00000345: 	movzwl	(%rbx), %esi
    00000348: 	movq	%rbp, %rdi
    0000034b: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 843
    00000350: 	movl	$0x2, %edx
    00000355: 	leaq	DATAat0x1090b(%rip), %rsi
    0000035c: 	movq	%rax, %rbp
    0000035f: 	movq	%rax, %rdi
    00000362: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 866
    00000367: 	movq	(%rbp), %rax
    0000036b: 	movq	-0x18(%rax), %rax
    0000036f: 	movq	0xf0(%rbp,%rax), %r13
    00000377: 	testq	%r13, %r13
    0000037a: 	je	.Ltmp934 # Offset: 890
    00000380: 	cmpb	$0x0, 0x38(%r13)
    00000385: 	je	.Ltmp935 # Offset: 901
    00000387: 	movsbl	0x43(%r13), %esi
    0000038c: 	movq	%rbp, %rdi
    0000038f: 	callq	_ZNSo3putEc@PLT # Offset: 911
    00000394: 	movq	%rax, %rdi
    00000397: 	callq	_ZNSo5flushEv@PLT # Offset: 919
.Ltmp931:
    0000039c: 	callq	clock@PLT # Offset: 924
    000003a1: 	movq	%rax, end_time(%rip)
    000003a8: 	movq	0x4028(%rsp), %rdx
    000003b0: 	subq	%fs:0x28, %rdx
    000003b9: 	jne	.Ltmp936 # Offset: 953
    000003bf: 	subq	start_time(%rip), %rax
    000003c6: 	pxor	%xmm0, %xmm0
    000003ca: 	movq	0x18(%rsp), %rdi
    000003cf: 	cvtsi2sd	%rax, %xmm0
    000003d4: 	divsd	DATAat0x10920(%rip), %xmm0
    000003dc: 	addq	$0x4038, %rsp
    000003e3: 	popq	%rbx
    000003e4: 	popq	%rbp
    000003e5: 	popq	%r12
    000003e7: 	popq	%r13
    000003e9: 	popq	%r14
    000003eb: 	popq	%r15
    000003ed: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1005
.Ltmp918:
    000003f2: 	xorl	%eax, %eax
    000003f4: 	jmp	.Ltmp937 # Offset: 1012
.Ltmp935:
    000003f9: 	movq	%r13, %rdi
    000003fc: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 1020
    00000401: 	movq	(%r13), %rax
    00000405: 	movl	$0xa, %esi
    0000040a: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    00000411: 	movq	0x30(%rax), %rax
    00000415: 	cmpq	%rdx, %rax
    00000418: 	jne	.Ltmp938 # Offset: 1048
.Ltmp940:
    0000041a: 	movq	%rbp, %rdi
    0000041d: 	callq	_ZNSo3putEc@PLT # Offset: 1053
    00000422: 	movq	%rax, %rdi
    00000425: 	callq	_ZNSo5flushEv@PLT # Offset: 1061
    0000042a: 	jmp	.Ltmp931 # Offset: 1066
.Ltmp933:
    0000042f: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000436: 	movq	-0x18(%rax), %rdi
    0000043a: 	addq	%r14, %rdi
    0000043d: 	movl	0x20(%rdi), %esi
    00000440: 	orl	$0x1, %esi
    00000443: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1091
    00000448: 	jmp	.Ltmp939 # Offset: 1096
.Ltmp938:
    0000044d: 	movq	%r13, %rdi
    00000450: 	callq	*%rax # Offset: 1104
    00000452: 	movsbl	%al, %esi
    00000455: 	jmp	.Ltmp940 # Offset: 1109
.Ltmp936:
    00000457: 	callq	__stack_chk_fail@PLT # Offset: 1111
.Ltmp934:
    0000045c: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 1116
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_histogramFloat4IdtEvPKT_iPT0_S0_S0_PKc"

Binary Function "_Z20test_histogramFloat4IdjEvPKT_iPT0_S0_S0_PKc" after disassembly {
  Number      : 55
  State       : disassembled
  Address     : 0xe070
  Size        : 0x456
  MaxSize     : 0x460
  Offset      : 0xe070
  Section     : .text
  Orc Section : .local.text._Z20test_histogramFloat4IdjEvPKT_iPT0_S0_S0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x8000(%rsp), %r11
.Ltmp941:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp941 # Offset: 37
    00000027: 	subq	$0x38, %rsp
    0000002b: 	movq	%rcx, 0x18(%rsp)
    00000030: 	movq	%rdi, %rbp
    00000033: 	movl	%esi, %r15d
    00000036: 	movq	%rdx, %rbx
    00000039: 	movsd	%xmm0, 0x8(%rsp)
    0000003f: 	movsd	%xmm1, (%rsp)
    00000044: 	movq	%fs:0x28, %rax
    0000004d: 	movq	%rax, 0x8028(%rsp)
    00000055: 	xorl	%eax, %eax
    00000057: 	callq	clock@PLT # Offset: 87
    0000005c: 	movsd	(%rsp), %xmm0
    00000061: 	movsd	0x8(%rsp), %xmm2
    00000067: 	movq	%rax, start_time(%rip)
    0000006e: 	movsd	DATAat0x10930(%rip), %xmm1
    00000076: 	subsd	%xmm2, %xmm0
    0000007a: 	movl	iterations(%rip), %eax
    00000080: 	divsd	%xmm0, %xmm1
    00000084: 	testl	%eax, %eax
    00000086: 	jle	.Ltmp942 # Offset: 134
    0000008c: 	leal	-0x4(%r15), %eax
    00000090: 	xorl	%r12d, %r12d
    00000093: 	leaq	0x20(%rsp), %r13
    00000098: 	shrl	$0x2, %eax
    0000009b: 	movl	%eax, %edx
    0000009d: 	leal	0x4(,%rax,4), %eax
    000000a4: 	movl	%eax, 0x14(%rsp)
    000000a8: 	shlq	$0x5, %rdx
    000000ac: 	leaq	0x20(%rbp,%rdx), %r14
.Ltmp954:
    000000b1: 	xorl	%esi, %esi
    000000b3: 	movl	$0x8000, %edx
    000000b8: 	movq	%rbx, %rdi
    000000bb: 	movsd	%xmm2, 0x8(%rsp)
    000000c1: 	movsd	%xmm1, (%rsp)
    000000c6: 	callq	memset@PLT # Offset: 198
    000000cb: 	xorl	%esi, %esi
    000000cd: 	movl	$0x8000, %edx
    000000d2: 	movq	%r13, %rdi
    000000d5: 	callq	memset@PLT # Offset: 213
    000000da: 	cmpl	$0x3, %r15d
    000000de: 	movsd	(%rsp), %xmm1
    000000e3: 	movsd	0x8(%rsp), %xmm2
    000000e9: 	jle	.Ltmp943 # Offset: 233
    000000ef: 	movq	%rbp, %rax
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp948:
    000000f8: 	movsd	(%rax), %xmm0
    000000fc: 	subsd	%xmm2, %xmm0
    00000100: 	mulsd	%xmm1, %xmm0
    00000104: 	cvttsd2si	%xmm0, %edx
    00000108: 	movsd	0x8(%rax), %xmm0
    0000010d: 	subsd	%xmm2, %xmm0
    00000111: 	mulsd	%xmm1, %xmm0
    00000115: 	cvttsd2si	%xmm0, %esi
    00000119: 	movsd	0x10(%rax), %xmm0
    0000011e: 	subsd	%xmm2, %xmm0
    00000122: 	mulsd	%xmm1, %xmm0
    00000126: 	cvttsd2si	%xmm0, %r9d
    0000012b: 	movsd	0x18(%rax), %xmm0
    00000130: 	subsd	%xmm2, %xmm0
    00000134: 	mulsd	%xmm1, %xmm0
    00000138: 	cvttsd2si	%xmm0, %edi
    0000013c: 	cmpl	$0x1fff, %edx
    00000142: 	ja	.Ltmp944 # Offset: 322
    00000144: 	movslq	%edx, %rdx
    00000147: 	addl	$0x1, (%rbx,%rdx,4)
.Ltmp944:
    0000014b: 	cmpl	$0x1fff, %esi
    00000151: 	ja	.Ltmp945 # Offset: 337
    00000153: 	movslq	%esi, %rsi
    00000156: 	addl	$0x1, 0x20(%rsp,%rsi,4)
.Ltmp945:
    0000015b: 	cmpl	$0x1fff, %r9d
    00000162: 	ja	.Ltmp946 # Offset: 354
    00000164: 	movslq	%r9d, %r9
    00000167: 	addl	$0x1, (%rbx,%r9,4)
.Ltmp946:
    0000016c: 	cmpl	$0x1fff, %edi
    00000172: 	ja	.Ltmp947 # Offset: 370
    00000174: 	movslq	%edi, %rdi
    00000177: 	addl	$0x1, 0x20(%rsp,%rdi,4)
.Ltmp947:
    0000017c: 	addq	$0x20, %rax
    00000180: 	cmpq	%rax, %r14
    00000183: 	jne	.Ltmp948 # Offset: 387
    00000189: 	movl	0x14(%rsp), %eax
.Ltmp962:
    0000018d: 	cmpl	%r15d, %eax
    00000190: 	jge	.Ltmp949 # Offset: 400
    00000196: 	movslq	%eax, %rsi
    00000199: 	movsd	(%rbp,%rsi,8), %xmm0
    0000019f: 	leaq	(,%rsi,8), %rdx
    000001a7: 	subsd	%xmm2, %xmm0
    000001ab: 	mulsd	%xmm1, %xmm0
    000001af: 	cvttsd2si	%xmm0, %esi
    000001b3: 	cmpl	$0x1fff, %esi
    000001b9: 	ja	.Ltmp950 # Offset: 441
    000001bb: 	movslq	%esi, %rsi
    000001be: 	addl	$0x1, (%rbx,%rsi,4)
.Ltmp950:
    000001c2: 	leal	0x1(%rax), %esi
    000001c5: 	cmpl	%esi, %r15d
    000001c8: 	jle	.Ltmp949 # Offset: 456
    000001ca: 	movsd	0x8(%rbp,%rdx), %xmm0
    000001d0: 	subsd	%xmm2, %xmm0
    000001d4: 	mulsd	%xmm1, %xmm0
    000001d8: 	cvttsd2si	%xmm0, %esi
    000001dc: 	cmpl	$0x1fff, %esi
    000001e2: 	ja	.Ltmp951 # Offset: 482
    000001e4: 	movslq	%esi, %rsi
    000001e7: 	addl	$0x1, (%rbx,%rsi,4)
.Ltmp951:
    000001eb: 	leal	0x2(%rax), %esi
    000001ee: 	cmpl	%esi, %r15d
    000001f1: 	jle	.Ltmp949 # Offset: 497
    000001f3: 	movsd	0x10(%rbp,%rdx), %xmm0
    000001f9: 	subsd	%xmm2, %xmm0
    000001fd: 	mulsd	%xmm1, %xmm0
    00000201: 	cvttsd2si	%xmm0, %esi
    00000205: 	cmpl	$0x1fff, %esi
    0000020b: 	ja	.Ltmp952 # Offset: 523
    0000020d: 	movslq	%esi, %rsi
    00000210: 	addl	$0x1, (%rbx,%rsi,4)
.Ltmp952:
    00000214: 	addl	$0x3, %eax
    00000217: 	cmpl	%eax, %r15d
    0000021a: 	jle	.Ltmp949 # Offset: 538
    0000021c: 	movsd	0x18(%rbp,%rdx), %xmm0
    00000222: 	subsd	%xmm2, %xmm0
    00000226: 	mulsd	%xmm1, %xmm0
    0000022a: 	cvttsd2si	%xmm0, %eax
    0000022e: 	cmpl	$0x1fff, %eax
    00000233: 	ja	.Ltmp949 # Offset: 563
    00000235: 	cltq
    00000237: 	addl	$0x1, (%rbx,%rax,4)
.Ltmp949:
    0000023b: 	xorl	%eax, %eax
    0000023d: 	nopl	(%rax) # Size: 3
.Ltmp953:
    00000240: 	movdqu	(%rbx,%rax), %xmm0
    00000245: 	paddd	(%r13,%rax), %xmm0
    0000024c: 	movups	%xmm0, (%rbx,%rax)
    00000250: 	addq	$0x10, %rax
    00000254: 	cmpq	$0x8000, %rax
    0000025a: 	jne	.Ltmp953 # Offset: 602
    0000025c: 	addl	$0x1, %r12d
    00000260: 	cmpl	%r12d, iterations(%rip)
    00000267: 	jg	.Ltmp954 # Offset: 615
.Ltmp942:
    0000026d: 	leaq	referenceHistogramF(%rip), %rbp
    00000274: 	xorl	%r13d, %r13d
    00000277: 	jmp	.Ltmp955 # Offset: 631
    00000279: 	nopl	(%rax) # Size: 7
.Ltmp957:
    00000280: 	addq	$0x1, %r13
    00000284: 	addq	$0x4, %rbx
    00000288: 	addq	$0x8, %rbp
    0000028c: 	cmpq	$0x2000, %r13
    00000293: 	je	.Ltmp956 # Offset: 659
.Ltmp955:
    00000299: 	movl	(%rbp), %eax
    0000029c: 	cmpl	%eax, (%rbx)
    0000029e: 	je	.Ltmp957 # Offset: 670
    000002a0: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    000002a7: 	movl	$0x5, %edx
    000002ac: 	leaq	DATAat0x108e4(%rip), %rsi
    000002b3: 	movq	%r14, %rdi
    000002b6: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 694
    000002bb: 	cmpq	$0x0, 0x18(%rsp)
    000002c1: 	je	.Ltmp958 # Offset: 705
    000002c7: 	movq	0x18(%rsp), %r15
    000002cc: 	movq	%r15, %rdi
    000002cf: 	callq	strlen@PLT # Offset: 719
    000002d4: 	movq	%r15, %rsi
    000002d7: 	movq	%r14, %rdi
    000002da: 	movq	%rax, %rdx
    000002dd: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 733
.Ltmp964:
    000002e2: 	movl	$0xf, %edx
    000002e7: 	leaq	DATAat0x108ea(%rip), %rsi
    000002ee: 	movq	%r14, %rdi
    000002f1: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 753
    000002f6: 	movq	%r13, %rsi
    000002f9: 	movq	%r14, %rdi
    000002fc: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 764
    00000301: 	movl	$0xb, %edx
    00000306: 	leaq	DATAat0x108fa(%rip), %rsi
    0000030d: 	movq	%rax, %rdi
    00000310: 	movq	%rax, %r13
    00000313: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 787
    00000318: 	movq	(%rbp), %rsi
    0000031c: 	movq	%r13, %rdi
    0000031f: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 799
    00000324: 	movl	$0x4, %edx
    00000329: 	leaq	DATAat0x10906(%rip), %rsi
    00000330: 	movq	%rax, %rdi
    00000333: 	movq	%rax, %rbp
    00000336: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 822
    0000033b: 	movl	(%rbx), %esi
    0000033d: 	movq	%rbp, %rdi
    00000340: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 832
    00000345: 	movl	$0x2, %edx
    0000034a: 	leaq	DATAat0x1090b(%rip), %rsi
    00000351: 	movq	%rax, %rbp
    00000354: 	movq	%rax, %rdi
    00000357: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 855
    0000035c: 	movq	(%rbp), %rax
    00000360: 	movq	-0x18(%rax), %rax
    00000364: 	movq	0xf0(%rbp,%rax), %r13
    0000036c: 	testq	%r13, %r13
    0000036f: 	je	.Ltmp959 # Offset: 879
    00000375: 	cmpb	$0x0, 0x38(%r13)
    0000037a: 	je	.Ltmp960 # Offset: 890
    0000037c: 	movsbl	0x43(%r13), %esi
    00000381: 	movq	%rbp, %rdi
    00000384: 	callq	_ZNSo3putEc@PLT # Offset: 900
    00000389: 	movq	%rax, %rdi
    0000038c: 	callq	_ZNSo5flushEv@PLT # Offset: 908
.Ltmp956:
    00000391: 	callq	clock@PLT # Offset: 913
    00000396: 	movq	%rax, end_time(%rip)
    0000039d: 	movq	0x8028(%rsp), %rdx
    000003a5: 	subq	%fs:0x28, %rdx
    000003ae: 	jne	.Ltmp961 # Offset: 942
    000003b4: 	subq	start_time(%rip), %rax
    000003bb: 	pxor	%xmm0, %xmm0
    000003bf: 	movq	0x18(%rsp), %rdi
    000003c4: 	cvtsi2sd	%rax, %xmm0
    000003c9: 	divsd	DATAat0x10920(%rip), %xmm0
    000003d1: 	addq	$0x8038, %rsp
    000003d8: 	popq	%rbx
    000003d9: 	popq	%rbp
    000003da: 	popq	%r12
    000003dc: 	popq	%r13
    000003de: 	popq	%r14
    000003e0: 	popq	%r15
    000003e2: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 994
.Ltmp943:
    000003e7: 	xorl	%eax, %eax
    000003e9: 	jmp	.Ltmp962 # Offset: 1001
.Ltmp960:
    000003ee: 	movq	%r13, %rdi
    000003f1: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 1009
    000003f6: 	movq	(%r13), %rax
    000003fa: 	movl	$0xa, %esi
    000003ff: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    00000406: 	movq	0x30(%rax), %rax
    0000040a: 	cmpq	%rdx, %rax
    0000040d: 	jne	.Ltmp963 # Offset: 1037
.Ltmp965:
    0000040f: 	movq	%rbp, %rdi
    00000412: 	callq	_ZNSo3putEc@PLT # Offset: 1042
    00000417: 	movq	%rax, %rdi
    0000041a: 	callq	_ZNSo5flushEv@PLT # Offset: 1050
    0000041f: 	jmp	.Ltmp956 # Offset: 1055
.Ltmp958:
    00000424: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    0000042b: 	movq	-0x18(%rax), %rdi
    0000042f: 	addq	%r14, %rdi
    00000432: 	movl	0x20(%rdi), %esi
    00000435: 	orl	$0x1, %esi
    00000438: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1080
    0000043d: 	jmp	.Ltmp964 # Offset: 1085
.Ltmp963:
    00000442: 	movq	%r13, %rdi
    00000445: 	callq	*%rax # Offset: 1093
    00000447: 	movsbl	%al, %esi
    0000044a: 	jmp	.Ltmp965 # Offset: 1098
.Ltmp961:
    0000044c: 	callq	__stack_chk_fail@PLT # Offset: 1100
.Ltmp959:
    00000451: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 1105
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_histogramFloat4IdjEvPKT_iPT0_S0_S0_PKc"

Binary Function "_Z20test_histogramFloat4IdmEvPKT_iPT0_S0_S0_PKc" after disassembly {
  Number      : 56
  State       : disassembled
  Address     : 0xe4d0
  Size        : 0x46b
  MaxSize     : 0x470
  Offset      : 0xe4d0
  Section     : .text
  Orc Section : .local.text._Z20test_histogramFloat4IdmEvPKT_iPT0_S0_S0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x10000(%rsp), %r11
.Ltmp966:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp966 # Offset: 37
    00000027: 	subq	$0x38, %rsp
    0000002b: 	movq	%rcx, 0x18(%rsp)
    00000030: 	movq	%rdi, %r12
    00000033: 	movl	%esi, %r15d
    00000036: 	movq	%rdx, %rbx
    00000039: 	movsd	%xmm0, 0x8(%rsp)
    0000003f: 	movsd	%xmm1, (%rsp)
    00000044: 	movq	%fs:0x28, %rax
    0000004d: 	movq	%rax, 0x10028(%rsp)
    00000055: 	xorl	%eax, %eax
    00000057: 	callq	clock@PLT # Offset: 87
    0000005c: 	movsd	(%rsp), %xmm0
    00000061: 	movsd	0x8(%rsp), %xmm2
    00000067: 	movq	%rax, start_time(%rip)
    0000006e: 	movsd	DATAat0x10930(%rip), %xmm1
    00000076: 	subsd	%xmm2, %xmm0
    0000007a: 	movl	iterations(%rip), %eax
    00000080: 	divsd	%xmm0, %xmm1
    00000084: 	testl	%eax, %eax
    00000086: 	jle	.Ltmp967 # Offset: 134
    0000008c: 	leal	-0x4(%r15), %eax
    00000090: 	xorl	%r13d, %r13d
    00000093: 	leaq	0x20(%rsp), %rbp
    00000098: 	shrl	$0x2, %eax
    0000009b: 	movl	%eax, %edx
    0000009d: 	leal	0x4(,%rax,4), %eax
    000000a4: 	movl	%eax, 0x14(%rsp)
    000000a8: 	shlq	$0x5, %rdx
    000000ac: 	leaq	0x20(%r12,%rdx), %r14
.Ltmp979:
    000000b1: 	xorl	%esi, %esi
    000000b3: 	movl	$0x10000, %edx
    000000b8: 	movq	%rbx, %rdi
    000000bb: 	movsd	%xmm2, 0x8(%rsp)
    000000c1: 	movsd	%xmm1, (%rsp)
    000000c6: 	callq	memset@PLT # Offset: 198
    000000cb: 	xorl	%esi, %esi
    000000cd: 	movl	$0x10000, %edx
    000000d2: 	movq	%rbp, %rdi
    000000d5: 	callq	memset@PLT # Offset: 213
    000000da: 	cmpl	$0x3, %r15d
    000000de: 	movsd	(%rsp), %xmm1
    000000e3: 	movsd	0x8(%rsp), %xmm2
    000000e9: 	jle	.Ltmp968 # Offset: 233
    000000ef: 	movq	%r12, %rax
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp973:
    000000f8: 	movsd	(%rax), %xmm0
    000000fc: 	subsd	%xmm2, %xmm0
    00000100: 	mulsd	%xmm1, %xmm0
    00000104: 	cvttsd2si	%xmm0, %edx
    00000108: 	movsd	0x8(%rax), %xmm0
    0000010d: 	subsd	%xmm2, %xmm0
    00000111: 	mulsd	%xmm1, %xmm0
    00000115: 	cvttsd2si	%xmm0, %esi
    00000119: 	movsd	0x10(%rax), %xmm0
    0000011e: 	subsd	%xmm2, %xmm0
    00000122: 	mulsd	%xmm1, %xmm0
    00000126: 	cvttsd2si	%xmm0, %r9d
    0000012b: 	movsd	0x18(%rax), %xmm0
    00000130: 	subsd	%xmm2, %xmm0
    00000134: 	mulsd	%xmm1, %xmm0
    00000138: 	cvttsd2si	%xmm0, %edi
    0000013c: 	cmpl	$0x1fff, %edx
    00000142: 	ja	.Ltmp969 # Offset: 322
    00000144: 	movslq	%edx, %rdx
    00000147: 	addq	$0x1, (%rbx,%rdx,8)
.Ltmp969:
    0000014c: 	cmpl	$0x1fff, %esi
    00000152: 	ja	.Ltmp970 # Offset: 338
    00000154: 	movslq	%esi, %rsi
    00000157: 	addq	$0x1, 0x20(%rsp,%rsi,8)
.Ltmp970:
    0000015d: 	cmpl	$0x1fff, %r9d
    00000164: 	ja	.Ltmp971 # Offset: 356
    00000166: 	movslq	%r9d, %r9
    00000169: 	addq	$0x1, (%rbx,%r9,8)
.Ltmp971:
    0000016e: 	cmpl	$0x1fff, %edi
    00000174: 	ja	.Ltmp972 # Offset: 372
    00000176: 	movslq	%edi, %rdi
    00000179: 	addq	$0x1, 0x20(%rsp,%rdi,8)
.Ltmp972:
    0000017f: 	addq	$0x20, %rax
    00000183: 	cmpq	%rax, %r14
    00000186: 	jne	.Ltmp973 # Offset: 390
    0000018c: 	movl	0x14(%rsp), %eax
.Ltmp987:
    00000190: 	cmpl	%r15d, %eax
    00000193: 	jge	.Ltmp974 # Offset: 403
    00000199: 	movslq	%eax, %rsi
    0000019c: 	movsd	(%r12,%rsi,8), %xmm0
    000001a2: 	leaq	(,%rsi,8), %rdx
    000001aa: 	subsd	%xmm2, %xmm0
    000001ae: 	mulsd	%xmm1, %xmm0
    000001b2: 	cvttsd2si	%xmm0, %esi
    000001b6: 	cmpl	$0x1fff, %esi
    000001bc: 	ja	.Ltmp975 # Offset: 444
    000001be: 	movslq	%esi, %rsi
    000001c1: 	addq	$0x1, (%rbx,%rsi,8)
.Ltmp975:
    000001c6: 	leal	0x1(%rax), %esi
    000001c9: 	cmpl	%esi, %r15d
    000001cc: 	jle	.Ltmp974 # Offset: 460
    000001ce: 	movsd	0x8(%r12,%rdx), %xmm0
    000001d5: 	subsd	%xmm2, %xmm0
    000001d9: 	mulsd	%xmm1, %xmm0
    000001dd: 	cvttsd2si	%xmm0, %esi
    000001e1: 	cmpl	$0x1fff, %esi
    000001e7: 	ja	.Ltmp976 # Offset: 487
    000001e9: 	movslq	%esi, %rsi
    000001ec: 	addq	$0x1, (%rbx,%rsi,8)
.Ltmp976:
    000001f1: 	leal	0x2(%rax), %esi
    000001f4: 	cmpl	%esi, %r15d
    000001f7: 	jle	.Ltmp974 # Offset: 503
    000001f9: 	movsd	0x10(%r12,%rdx), %xmm0
    00000200: 	subsd	%xmm2, %xmm0
    00000204: 	mulsd	%xmm1, %xmm0
    00000208: 	cvttsd2si	%xmm0, %esi
    0000020c: 	cmpl	$0x1fff, %esi
    00000212: 	ja	.Ltmp977 # Offset: 530
    00000214: 	movslq	%esi, %rsi
    00000217: 	addq	$0x1, (%rbx,%rsi,8)
.Ltmp977:
    0000021c: 	addl	$0x3, %eax
    0000021f: 	cmpl	%eax, %r15d
    00000222: 	jle	.Ltmp974 # Offset: 546
    00000224: 	movsd	0x18(%r12,%rdx), %xmm0
    0000022b: 	subsd	%xmm2, %xmm0
    0000022f: 	mulsd	%xmm1, %xmm0
    00000233: 	cvttsd2si	%xmm0, %eax
    00000237: 	cmpl	$0x1fff, %eax
    0000023c: 	ja	.Ltmp974 # Offset: 572
    0000023e: 	cltq
    00000240: 	addq	$0x1, (%rbx,%rax,8)
.Ltmp974:
    00000245: 	xorl	%eax, %eax
    00000247: 	nopw	(%rax,%rax) # Size: 9
.Ltmp978:
    00000250: 	movdqu	(%rbx,%rax), %xmm0
    00000255: 	paddq	(%rbp,%rax), %xmm0
    0000025b: 	movups	%xmm0, (%rbx,%rax)
    0000025f: 	addq	$0x10, %rax
    00000263: 	cmpq	$0x10000, %rax
    00000269: 	jne	.Ltmp978 # Offset: 617
    0000026b: 	addl	$0x1, %r13d
    0000026f: 	cmpl	%r13d, iterations(%rip)
    00000276: 	jg	.Ltmp979 # Offset: 630
.Ltmp967:
    0000027c: 	leaq	referenceHistogramF(%rip), %rbp
    00000283: 	xorl	%r12d, %r12d
    00000286: 	jmp	.Ltmp980 # Offset: 646
    00000288: 	nopl	(%rax,%rax) # Size: 8
.Ltmp982:
    00000290: 	addq	$0x1, %r12
    00000294: 	addq	$0x8, %rbx
    00000298: 	addq	$0x8, %rbp
    0000029c: 	cmpq	$0x2000, %r12
    000002a3: 	je	.Ltmp981 # Offset: 675
.Ltmp980:
    000002a9: 	movq	(%rbp), %rax
    000002ad: 	cmpq	%rax, (%rbx)
    000002b0: 	je	.Ltmp982 # Offset: 688
    000002b2: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r14
    000002b9: 	movl	$0x5, %edx
    000002be: 	leaq	DATAat0x108e4(%rip), %rsi
    000002c5: 	movq	%r14, %rdi
    000002c8: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 712
    000002cd: 	cmpq	$0x0, 0x18(%rsp)
    000002d3: 	je	.Ltmp983 # Offset: 723
    000002d9: 	movq	0x18(%rsp), %r15
    000002de: 	movq	%r15, %rdi
    000002e1: 	callq	strlen@PLT # Offset: 737
    000002e6: 	movq	%r15, %rsi
    000002e9: 	movq	%r14, %rdi
    000002ec: 	movq	%rax, %rdx
    000002ef: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 751
.Ltmp989:
    000002f4: 	movl	$0xf, %edx
    000002f9: 	leaq	DATAat0x108ea(%rip), %rsi
    00000300: 	movq	%r14, %rdi
    00000303: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 771
    00000308: 	movq	%r12, %rsi
    0000030b: 	movq	%r14, %rdi
    0000030e: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 782
    00000313: 	movl	$0xb, %edx
    00000318: 	leaq	DATAat0x108fa(%rip), %rsi
    0000031f: 	movq	%rax, %rdi
    00000322: 	movq	%rax, %r12
    00000325: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 805
    0000032a: 	movq	(%rbp), %rsi
    0000032e: 	movq	%r12, %rdi
    00000331: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 817
    00000336: 	movl	$0x4, %edx
    0000033b: 	leaq	DATAat0x10906(%rip), %rsi
    00000342: 	movq	%rax, %rdi
    00000345: 	movq	%rax, %rbp
    00000348: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 840
    0000034d: 	movq	(%rbx), %rsi
    00000350: 	movq	%rbp, %rdi
    00000353: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 851
    00000358: 	movl	$0x2, %edx
    0000035d: 	leaq	DATAat0x1090b(%rip), %rsi
    00000364: 	movq	%rax, %rbp
    00000367: 	movq	%rax, %rdi
    0000036a: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 874
    0000036f: 	movq	(%rbp), %rax
    00000373: 	movq	-0x18(%rax), %rax
    00000377: 	movq	0xf0(%rbp,%rax), %r12
    0000037f: 	testq	%r12, %r12
    00000382: 	je	.Ltmp984 # Offset: 898
    00000388: 	cmpb	$0x0, 0x38(%r12)
    0000038e: 	je	.Ltmp985 # Offset: 910
    00000390: 	movsbl	0x43(%r12), %esi
    00000396: 	movq	%rbp, %rdi
    00000399: 	callq	_ZNSo3putEc@PLT # Offset: 921
    0000039e: 	movq	%rax, %rdi
    000003a1: 	callq	_ZNSo5flushEv@PLT # Offset: 929
.Ltmp981:
    000003a6: 	callq	clock@PLT # Offset: 934
    000003ab: 	movq	%rax, end_time(%rip)
    000003b2: 	movq	0x10028(%rsp), %rdx
    000003ba: 	subq	%fs:0x28, %rdx
    000003c3: 	jne	.Ltmp986 # Offset: 963
    000003c9: 	subq	start_time(%rip), %rax
    000003d0: 	pxor	%xmm0, %xmm0
    000003d4: 	movq	0x18(%rsp), %rdi
    000003d9: 	cvtsi2sd	%rax, %xmm0
    000003de: 	divsd	DATAat0x10920(%rip), %xmm0
    000003e6: 	addq	$0x10038, %rsp
    000003ed: 	popq	%rbx
    000003ee: 	popq	%rbp
    000003ef: 	popq	%r12
    000003f1: 	popq	%r13
    000003f3: 	popq	%r14
    000003f5: 	popq	%r15
    000003f7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1015
.Ltmp968:
    000003fc: 	xorl	%eax, %eax
    000003fe: 	jmp	.Ltmp987 # Offset: 1022
.Ltmp985:
    00000403: 	movq	%r12, %rdi
    00000406: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 1030
    0000040b: 	movq	(%r12), %rax
    0000040f: 	movl	$0xa, %esi
    00000414: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    0000041b: 	movq	0x30(%rax), %rax
    0000041f: 	cmpq	%rdx, %rax
    00000422: 	jne	.Ltmp988 # Offset: 1058
.Ltmp990:
    00000424: 	movq	%rbp, %rdi
    00000427: 	callq	_ZNSo3putEc@PLT # Offset: 1063
    0000042c: 	movq	%rax, %rdi
    0000042f: 	callq	_ZNSo5flushEv@PLT # Offset: 1071
    00000434: 	jmp	.Ltmp981 # Offset: 1076
.Ltmp983:
    00000439: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000440: 	movq	-0x18(%rax), %rdi
    00000444: 	addq	%r14, %rdi
    00000447: 	movl	0x20(%rdi), %esi
    0000044a: 	orl	$0x1, %esi
    0000044d: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1101
    00000452: 	jmp	.Ltmp989 # Offset: 1106
.Ltmp988:
    00000457: 	movq	%r12, %rdi
    0000045a: 	callq	*%rax # Offset: 1114
    0000045c: 	movsbl	%al, %esi
    0000045f: 	jmp	.Ltmp990 # Offset: 1119
.Ltmp986:
    00000461: 	callq	__stack_chk_fail@PLT # Offset: 1121
.Ltmp984:
    00000466: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 1126
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_histogramFloat4IdmEvPKT_iPT0_S0_S0_PKc"

Binary Function "_Z20test_histogramFloat5IdtEvPKT_iPT0_S0_S0_PKc" after disassembly {
  Number      : 57
  State       : disassembled
  Address     : 0xe940
  Size        : 0x4c3
  MaxSize     : 0x4d0
  Offset      : 0xe940
  Section     : .text
  Orc Section : .local.text._Z20test_histogramFloat5IdtEvPKT_iPT0_S0_S0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0xc000(%rsp), %r11
.Ltmp991:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp991 # Offset: 37
    00000027: 	subq	$0x48, %rsp
    0000002b: 	movq	%rdi, 0x18(%rsp)
    00000030: 	movq	%rdx, %rbx
    00000033: 	movl	%esi, 0x20(%rsp)
    00000037: 	movq	%rcx, 0x28(%rsp)
    0000003c: 	movsd	%xmm0, 0x10(%rsp)
    00000042: 	movsd	%xmm1, 0x8(%rsp)
    00000048: 	movq	%fs:0x28, %rax
    00000051: 	movq	%rax, 0xc038(%rsp)
    00000059: 	xorl	%eax, %eax
    0000005b: 	callq	clock@PLT # Offset: 91
    00000060: 	movsd	0x8(%rsp), %xmm0
    00000066: 	movsd	0x10(%rsp), %xmm2
    0000006c: 	movq	%rax, start_time(%rip)
    00000073: 	movl	iterations(%rip), %eax
    00000079: 	subsd	%xmm2, %xmm0
    0000007d: 	movl	0x20(%rsp), %r8d
    00000082: 	movq	0x18(%rsp), %r9
    00000087: 	movsd	DATAat0x10930(%rip), %xmm1
    0000008f: 	testl	%eax, %eax
    00000091: 	divsd	%xmm0, %xmm1
    00000095: 	jle	.Ltmp992 # Offset: 149
    0000009b: 	leal	-0x4(%r8), %eax
    0000009f: 	xorl	%r14d, %r14d
    000000a2: 	leaq	0x30(%rsp), %r15
    000000a7: 	shrl	$0x2, %eax
    000000aa: 	leaq	0x4030(%rsp), %r12
    000000b2: 	leaq	0x8030(%rsp), %rbp
    000000ba: 	movl	%eax, %edx
    000000bc: 	leal	0x4(,%rax,4), %eax
    000000c3: 	movl	%eax, 0x24(%rsp)
    000000c7: 	shlq	$0x5, %rdx
    000000cb: 	leaq	0x20(%r9,%rdx), %r13
.Ltmp1004:
    000000d0: 	xorl	%esi, %esi
    000000d2: 	movl	$0x4000, %edx
    000000d7: 	movq	%rbx, %rdi
    000000da: 	movl	%r8d, 0x20(%rsp)
    000000df: 	movq	%r9, 0x10(%rsp)
    000000e4: 	movsd	%xmm2, 0x18(%rsp)
    000000ea: 	movsd	%xmm1, 0x8(%rsp)
    000000f0: 	callq	memset@PLT # Offset: 240
    000000f5: 	xorl	%esi, %esi
    000000f7: 	movl	$0x4000, %edx
    000000fc: 	movq	%r15, %rdi
    000000ff: 	callq	memset@PLT # Offset: 255
    00000104: 	xorl	%esi, %esi
    00000106: 	movl	$0x4000, %edx
    0000010b: 	movq	%r12, %rdi
    0000010e: 	callq	memset@PLT # Offset: 270
    00000113: 	xorl	%esi, %esi
    00000115: 	movl	$0x4000, %edx
    0000011a: 	movq	%rbp, %rdi
    0000011d: 	callq	memset@PLT # Offset: 285
    00000122: 	movl	0x20(%rsp), %r8d
    00000127: 	movq	0x10(%rsp), %r9
    0000012c: 	movsd	0x8(%rsp), %xmm1
    00000132: 	movsd	0x18(%rsp), %xmm2
    00000138: 	cmpl	$0x3, %r8d
    0000013c: 	jle	.Ltmp993 # Offset: 316
    00000142: 	movq	%r9, %rax
    00000145: 	nopl	(%rax) # Size: 3
.Ltmp998:
    00000148: 	movsd	(%rax), %xmm0
    0000014c: 	subsd	%xmm2, %xmm0
    00000150: 	mulsd	%xmm1, %xmm0
    00000154: 	cvttsd2si	%xmm0, %edi
    00000158: 	movsd	0x8(%rax), %xmm0
    0000015d: 	subsd	%xmm2, %xmm0
    00000161: 	mulsd	%xmm1, %xmm0
    00000165: 	cvttsd2si	%xmm0, %esi
    00000169: 	movsd	0x10(%rax), %xmm0
    0000016e: 	subsd	%xmm2, %xmm0
    00000172: 	mulsd	%xmm1, %xmm0
    00000176: 	cvttsd2si	%xmm0, %edx
    0000017a: 	movsd	0x18(%rax), %xmm0
    0000017f: 	subsd	%xmm2, %xmm0
    00000183: 	mulsd	%xmm1, %xmm0
    00000187: 	cvttsd2si	%xmm0, %r11d
    0000018c: 	cmpl	$0x1fff, %edi
    00000192: 	ja	.Ltmp994 # Offset: 402
    00000194: 	movslq	%edi, %rdi
    00000197: 	addw	$0x1, (%rbx,%rdi,2)
.Ltmp994:
    0000019c: 	cmpl	$0x1fff, %esi
    000001a2: 	ja	.Ltmp995 # Offset: 418
    000001a4: 	movslq	%esi, %rsi
    000001a7: 	addw	$0x1, 0x30(%rsp,%rsi,2)
.Ltmp995:
    000001ad: 	cmpl	$0x1fff, %edx
    000001b3: 	ja	.Ltmp996 # Offset: 435
    000001b5: 	movslq	%edx, %rdx
    000001b8: 	addw	$0x1, 0x4030(%rsp,%rdx,2)
.Ltmp996:
    000001c1: 	cmpl	$0x1fff, %r11d
    000001c8: 	ja	.Ltmp997 # Offset: 456
    000001ca: 	movslq	%r11d, %r11
    000001cd: 	addw	$0x1, 0x8030(%rsp,%r11,2)
.Ltmp997:
    000001d7: 	addq	$0x20, %rax
    000001db: 	cmpq	%rax, %r13
    000001de: 	jne	.Ltmp998 # Offset: 478
    000001e4: 	movl	0x24(%rsp), %eax
.Ltmp1012:
    000001e8: 	cmpl	%r8d, %eax
    000001eb: 	jge	.Ltmp999 # Offset: 491
    000001f1: 	movslq	%eax, %rsi
    000001f4: 	movsd	(%r9,%rsi,8), %xmm0
    000001fa: 	leaq	(,%rsi,8), %rdx
    00000202: 	subsd	%xmm2, %xmm0
    00000206: 	mulsd	%xmm1, %xmm0
    0000020a: 	cvttsd2si	%xmm0, %esi
    0000020e: 	cmpl	$0x1fff, %esi
    00000214: 	ja	.Ltmp1000 # Offset: 532
    00000216: 	movslq	%esi, %rsi
    00000219: 	addw	$0x1, (%rbx,%rsi,2)
.Ltmp1000:
    0000021e: 	leal	0x1(%rax), %esi
    00000221: 	cmpl	%esi, %r8d
    00000224: 	jle	.Ltmp999 # Offset: 548
    00000226: 	movsd	0x8(%r9,%rdx), %xmm0
    0000022d: 	subsd	%xmm2, %xmm0
    00000231: 	mulsd	%xmm1, %xmm0
    00000235: 	cvttsd2si	%xmm0, %esi
    00000239: 	cmpl	$0x1fff, %esi
    0000023f: 	ja	.Ltmp1001 # Offset: 575
    00000241: 	movslq	%esi, %rsi
    00000244: 	addw	$0x1, (%rbx,%rsi,2)
.Ltmp1001:
    00000249: 	leal	0x2(%rax), %esi
    0000024c: 	cmpl	%esi, %r8d
    0000024f: 	jle	.Ltmp999 # Offset: 591
    00000251: 	movsd	0x10(%r9,%rdx), %xmm0
    00000258: 	subsd	%xmm2, %xmm0
    0000025c: 	mulsd	%xmm1, %xmm0
    00000260: 	cvttsd2si	%xmm0, %esi
    00000264: 	cmpl	$0x1fff, %esi
    0000026a: 	ja	.Ltmp1002 # Offset: 618
    0000026c: 	movslq	%esi, %rsi
    0000026f: 	addw	$0x1, (%rbx,%rsi,2)
.Ltmp1002:
    00000274: 	addl	$0x3, %eax
    00000277: 	cmpl	%eax, %r8d
    0000027a: 	jle	.Ltmp999 # Offset: 634
    0000027c: 	movsd	0x18(%r9,%rdx), %xmm0
    00000283: 	subsd	%xmm2, %xmm0
    00000287: 	mulsd	%xmm1, %xmm0
    0000028b: 	cvttsd2si	%xmm0, %eax
    0000028f: 	cmpl	$0x1fff, %eax
    00000294: 	ja	.Ltmp999 # Offset: 660
    00000296: 	cltq
    00000298: 	addw	$0x1, (%rbx,%rax,2)
.Ltmp999:
    0000029d: 	xorl	%eax, %eax
    0000029f: 	nop # Size: 1
.Ltmp1003:
    000002a0: 	movdqu	(%rbx,%rax), %xmm0
    000002a5: 	paddw	(%r15,%rax), %xmm0
    000002ab: 	paddw	(%r12,%rax), %xmm0
    000002b1: 	paddw	(%rbp,%rax), %xmm0
    000002b7: 	movups	%xmm0, (%rbx,%rax)
    000002bb: 	addq	$0x10, %rax
    000002bf: 	cmpq	$0x4000, %rax
    000002c5: 	jne	.Ltmp1003 # Offset: 709
    000002c7: 	addl	$0x1, %r14d
    000002cb: 	cmpl	%r14d, iterations(%rip)
    000002d2: 	jg	.Ltmp1004 # Offset: 722
.Ltmp992:
    000002d8: 	leaq	referenceHistogramF(%rip), %rbp
    000002df: 	xorl	%r12d, %r12d
    000002e2: 	jmp	.Ltmp1005 # Offset: 738
    000002e4: 	nopl	(%rax) # Size: 4
.Ltmp1007:
    000002e8: 	addq	$0x1, %r12
    000002ec: 	addq	$0x2, %rbx
    000002f0: 	addq	$0x8, %rbp
    000002f4: 	cmpq	$0x2000, %r12
    000002fb: 	je	.Ltmp1006 # Offset: 763
.Ltmp1005:
    00000301: 	movzwl	(%rbp), %eax
    00000305: 	cmpw	%ax, (%rbx)
    00000308: 	je	.Ltmp1007 # Offset: 776
    0000030a: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    00000311: 	movl	$0x5, %edx
    00000316: 	leaq	DATAat0x108e4(%rip), %rsi
    0000031d: 	movq	%r13, %rdi
    00000320: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 800
    00000325: 	cmpq	$0x0, 0x28(%rsp)
    0000032b: 	je	.Ltmp1008 # Offset: 811
    00000331: 	movq	0x28(%rsp), %r14
    00000336: 	movq	%r14, %rdi
    00000339: 	callq	strlen@PLT # Offset: 825
    0000033e: 	movq	%r14, %rsi
    00000341: 	movq	%r13, %rdi
    00000344: 	movq	%rax, %rdx
    00000347: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 839
.Ltmp1014:
    0000034c: 	movl	$0xf, %edx
    00000351: 	leaq	DATAat0x108ea(%rip), %rsi
    00000358: 	movq	%r13, %rdi
    0000035b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 859
    00000360: 	movq	%r12, %rsi
    00000363: 	movq	%r13, %rdi
    00000366: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 870
    0000036b: 	movl	$0xb, %edx
    00000370: 	leaq	DATAat0x108fa(%rip), %rsi
    00000377: 	movq	%rax, %rdi
    0000037a: 	movq	%rax, %r12
    0000037d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 893
    00000382: 	movq	(%rbp), %rsi
    00000386: 	movq	%r12, %rdi
    00000389: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 905
    0000038e: 	movl	$0x4, %edx
    00000393: 	leaq	DATAat0x10906(%rip), %rsi
    0000039a: 	movq	%rax, %rdi
    0000039d: 	movq	%rax, %rbp
    000003a0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 928
    000003a5: 	movzwl	(%rbx), %esi
    000003a8: 	movq	%rbp, %rdi
    000003ab: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 939
    000003b0: 	movl	$0x2, %edx
    000003b5: 	leaq	DATAat0x1090b(%rip), %rsi
    000003bc: 	movq	%rax, %rbp
    000003bf: 	movq	%rax, %rdi
    000003c2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 962
    000003c7: 	movq	(%rbp), %rax
    000003cb: 	movq	-0x18(%rax), %rax
    000003cf: 	movq	0xf0(%rbp,%rax), %r12
    000003d7: 	testq	%r12, %r12
    000003da: 	je	.Ltmp1009 # Offset: 986
    000003e0: 	cmpb	$0x0, 0x38(%r12)
    000003e6: 	je	.Ltmp1010 # Offset: 998
    000003e8: 	movsbl	0x43(%r12), %esi
    000003ee: 	movq	%rbp, %rdi
    000003f1: 	callq	_ZNSo3putEc@PLT # Offset: 1009
    000003f6: 	movq	%rax, %rdi
    000003f9: 	callq	_ZNSo5flushEv@PLT # Offset: 1017
.Ltmp1006:
    000003fe: 	callq	clock@PLT # Offset: 1022
    00000403: 	movq	%rax, end_time(%rip)
    0000040a: 	movq	0xc038(%rsp), %rdx
    00000412: 	subq	%fs:0x28, %rdx
    0000041b: 	jne	.Ltmp1011 # Offset: 1051
    00000421: 	subq	start_time(%rip), %rax
    00000428: 	pxor	%xmm0, %xmm0
    0000042c: 	movq	0x28(%rsp), %rdi
    00000431: 	cvtsi2sd	%rax, %xmm0
    00000436: 	divsd	DATAat0x10920(%rip), %xmm0
    0000043e: 	addq	$0xc048, %rsp
    00000445: 	popq	%rbx
    00000446: 	popq	%rbp
    00000447: 	popq	%r12
    00000449: 	popq	%r13
    0000044b: 	popq	%r14
    0000044d: 	popq	%r15
    0000044f: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1103
.Ltmp993:
    00000454: 	xorl	%eax, %eax
    00000456: 	jmp	.Ltmp1012 # Offset: 1110
.Ltmp1010:
    0000045b: 	movq	%r12, %rdi
    0000045e: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 1118
    00000463: 	movq	(%r12), %rax
    00000467: 	movl	$0xa, %esi
    0000046c: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    00000473: 	movq	0x30(%rax), %rax
    00000477: 	cmpq	%rdx, %rax
    0000047a: 	jne	.Ltmp1013 # Offset: 1146
.Ltmp1015:
    0000047c: 	movq	%rbp, %rdi
    0000047f: 	callq	_ZNSo3putEc@PLT # Offset: 1151
    00000484: 	movq	%rax, %rdi
    00000487: 	callq	_ZNSo5flushEv@PLT # Offset: 1159
    0000048c: 	jmp	.Ltmp1006 # Offset: 1164
.Ltmp1008:
    00000491: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000498: 	movq	-0x18(%rax), %rdi
    0000049c: 	addq	%r13, %rdi
    0000049f: 	movl	0x20(%rdi), %esi
    000004a2: 	orl	$0x1, %esi
    000004a5: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1189
    000004aa: 	jmp	.Ltmp1014 # Offset: 1194
.Ltmp1013:
    000004af: 	movq	%r12, %rdi
    000004b2: 	callq	*%rax # Offset: 1202
    000004b4: 	movsbl	%al, %esi
    000004b7: 	jmp	.Ltmp1015 # Offset: 1207
.Ltmp1011:
    000004b9: 	callq	__stack_chk_fail@PLT # Offset: 1209
.Ltmp1009:
    000004be: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 1214
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_histogramFloat5IdtEvPKT_iPT0_S0_S0_PKc"

Binary Function "_Z20test_histogramFloat5IdjEvPKT_iPT0_S0_S0_PKc" after disassembly {
  Number      : 58
  State       : disassembled
  Address     : 0xee10
  Size        : 0x4c0
  MaxSize     : 0x4c0
  Offset      : 0xee10
  Section     : .text
  Orc Section : .local.text._Z20test_histogramFloat5IdjEvPKT_iPT0_S0_S0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x18000(%rsp), %r11
.Ltmp1016:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp1016 # Offset: 37
    00000027: 	subq	$0x48, %rsp
    0000002b: 	movq	%rdi, 0x18(%rsp)
    00000030: 	movq	%rdx, %rbx
    00000033: 	movl	%esi, 0x20(%rsp)
    00000037: 	movq	%rcx, 0x28(%rsp)
    0000003c: 	movsd	%xmm0, 0x10(%rsp)
    00000042: 	movsd	%xmm1, 0x8(%rsp)
    00000048: 	movq	%fs:0x28, %rax
    00000051: 	movq	%rax, 0x18038(%rsp)
    00000059: 	xorl	%eax, %eax
    0000005b: 	callq	clock@PLT # Offset: 91
    00000060: 	movsd	0x8(%rsp), %xmm0
    00000066: 	movsd	0x10(%rsp), %xmm2
    0000006c: 	movq	%rax, start_time(%rip)
    00000073: 	movl	iterations(%rip), %eax
    00000079: 	subsd	%xmm2, %xmm0
    0000007d: 	movl	0x20(%rsp), %r8d
    00000082: 	movq	0x18(%rsp), %r9
    00000087: 	movsd	DATAat0x10930(%rip), %xmm1
    0000008f: 	testl	%eax, %eax
    00000091: 	divsd	%xmm0, %xmm1
    00000095: 	jle	.Ltmp1017 # Offset: 149
    0000009b: 	leal	-0x4(%r8), %eax
    0000009f: 	xorl	%r14d, %r14d
    000000a2: 	leaq	0x30(%rsp), %r15
    000000a7: 	shrl	$0x2, %eax
    000000aa: 	leaq	0x8030(%rsp), %r12
    000000b2: 	leaq	0x10030(%rsp), %rbp
    000000ba: 	movl	%eax, %edx
    000000bc: 	leal	0x4(,%rax,4), %eax
    000000c3: 	movl	%eax, 0x24(%rsp)
    000000c7: 	shlq	$0x5, %rdx
    000000cb: 	leaq	0x20(%r9,%rdx), %r13
.Ltmp1029:
    000000d0: 	xorl	%esi, %esi
    000000d2: 	movl	$0x8000, %edx
    000000d7: 	movq	%rbx, %rdi
    000000da: 	movl	%r8d, 0x20(%rsp)
    000000df: 	movq	%r9, 0x10(%rsp)
    000000e4: 	movsd	%xmm2, 0x18(%rsp)
    000000ea: 	movsd	%xmm1, 0x8(%rsp)
    000000f0: 	callq	memset@PLT # Offset: 240
    000000f5: 	xorl	%esi, %esi
    000000f7: 	movl	$0x8000, %edx
    000000fc: 	movq	%r15, %rdi
    000000ff: 	callq	memset@PLT # Offset: 255
    00000104: 	xorl	%esi, %esi
    00000106: 	movl	$0x8000, %edx
    0000010b: 	movq	%r12, %rdi
    0000010e: 	callq	memset@PLT # Offset: 270
    00000113: 	xorl	%esi, %esi
    00000115: 	movl	$0x8000, %edx
    0000011a: 	movq	%rbp, %rdi
    0000011d: 	callq	memset@PLT # Offset: 285
    00000122: 	movl	0x20(%rsp), %r8d
    00000127: 	movq	0x10(%rsp), %r9
    0000012c: 	movsd	0x8(%rsp), %xmm1
    00000132: 	movsd	0x18(%rsp), %xmm2
    00000138: 	cmpl	$0x3, %r8d
    0000013c: 	jle	.Ltmp1018 # Offset: 316
    00000142: 	movq	%r9, %rax
    00000145: 	nopl	(%rax) # Size: 3
.Ltmp1023:
    00000148: 	movsd	(%rax), %xmm0
    0000014c: 	subsd	%xmm2, %xmm0
    00000150: 	mulsd	%xmm1, %xmm0
    00000154: 	cvttsd2si	%xmm0, %edi
    00000158: 	movsd	0x8(%rax), %xmm0
    0000015d: 	subsd	%xmm2, %xmm0
    00000161: 	mulsd	%xmm1, %xmm0
    00000165: 	cvttsd2si	%xmm0, %esi
    00000169: 	movsd	0x10(%rax), %xmm0
    0000016e: 	subsd	%xmm2, %xmm0
    00000172: 	mulsd	%xmm1, %xmm0
    00000176: 	cvttsd2si	%xmm0, %edx
    0000017a: 	movsd	0x18(%rax), %xmm0
    0000017f: 	subsd	%xmm2, %xmm0
    00000183: 	mulsd	%xmm1, %xmm0
    00000187: 	cvttsd2si	%xmm0, %r11d
    0000018c: 	cmpl	$0x1fff, %edi
    00000192: 	ja	.Ltmp1019 # Offset: 402
    00000194: 	movslq	%edi, %rdi
    00000197: 	addl	$0x1, (%rbx,%rdi,4)
.Ltmp1019:
    0000019b: 	cmpl	$0x1fff, %esi
    000001a1: 	ja	.Ltmp1020 # Offset: 417
    000001a3: 	movslq	%esi, %rsi
    000001a6: 	addl	$0x1, 0x30(%rsp,%rsi,4)
.Ltmp1020:
    000001ab: 	cmpl	$0x1fff, %edx
    000001b1: 	ja	.Ltmp1021 # Offset: 433
    000001b3: 	movslq	%edx, %rdx
    000001b6: 	addl	$0x1, 0x8030(%rsp,%rdx,4)
.Ltmp1021:
    000001be: 	cmpl	$0x1fff, %r11d
    000001c5: 	ja	.Ltmp1022 # Offset: 453
    000001c7: 	movslq	%r11d, %r11
    000001ca: 	addl	$0x1, 0x10030(%rsp,%r11,4)
.Ltmp1022:
    000001d3: 	addq	$0x20, %rax
    000001d7: 	cmpq	%rax, %r13
    000001da: 	jne	.Ltmp1023 # Offset: 474
    000001e0: 	movl	0x24(%rsp), %eax
.Ltmp1037:
    000001e4: 	cmpl	%r8d, %eax
    000001e7: 	jge	.Ltmp1024 # Offset: 487
    000001ed: 	movslq	%eax, %rsi
    000001f0: 	movsd	(%r9,%rsi,8), %xmm0
    000001f6: 	leaq	(,%rsi,8), %rdx
    000001fe: 	subsd	%xmm2, %xmm0
    00000202: 	mulsd	%xmm1, %xmm0
    00000206: 	cvttsd2si	%xmm0, %esi
    0000020a: 	cmpl	$0x1fff, %esi
    00000210: 	ja	.Ltmp1025 # Offset: 528
    00000212: 	movslq	%esi, %rsi
    00000215: 	addl	$0x1, (%rbx,%rsi,4)
.Ltmp1025:
    00000219: 	leal	0x1(%rax), %esi
    0000021c: 	cmpl	%esi, %r8d
    0000021f: 	jle	.Ltmp1024 # Offset: 543
    00000221: 	movsd	0x8(%r9,%rdx), %xmm0
    00000228: 	subsd	%xmm2, %xmm0
    0000022c: 	mulsd	%xmm1, %xmm0
    00000230: 	cvttsd2si	%xmm0, %esi
    00000234: 	cmpl	$0x1fff, %esi
    0000023a: 	ja	.Ltmp1026 # Offset: 570
    0000023c: 	movslq	%esi, %rsi
    0000023f: 	addl	$0x1, (%rbx,%rsi,4)
.Ltmp1026:
    00000243: 	leal	0x2(%rax), %esi
    00000246: 	cmpl	%esi, %r8d
    00000249: 	jle	.Ltmp1024 # Offset: 585
    0000024b: 	movsd	0x10(%r9,%rdx), %xmm0
    00000252: 	subsd	%xmm2, %xmm0
    00000256: 	mulsd	%xmm1, %xmm0
    0000025a: 	cvttsd2si	%xmm0, %esi
    0000025e: 	cmpl	$0x1fff, %esi
    00000264: 	ja	.Ltmp1027 # Offset: 612
    00000266: 	movslq	%esi, %rsi
    00000269: 	addl	$0x1, (%rbx,%rsi,4)
.Ltmp1027:
    0000026d: 	addl	$0x3, %eax
    00000270: 	cmpl	%eax, %r8d
    00000273: 	jle	.Ltmp1024 # Offset: 627
    00000275: 	movsd	0x18(%r9,%rdx), %xmm0
    0000027c: 	subsd	%xmm2, %xmm0
    00000280: 	mulsd	%xmm1, %xmm0
    00000284: 	cvttsd2si	%xmm0, %eax
    00000288: 	cmpl	$0x1fff, %eax
    0000028d: 	ja	.Ltmp1024 # Offset: 653
    0000028f: 	cltq
    00000291: 	addl	$0x1, (%rbx,%rax,4)
.Ltmp1024:
    00000295: 	xorl	%eax, %eax
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1028:
    000002a0: 	movdqu	(%rbx,%rax), %xmm0
    000002a5: 	paddd	(%r15,%rax), %xmm0
    000002ab: 	paddd	(%r12,%rax), %xmm0
    000002b1: 	paddd	(%rbp,%rax), %xmm0
    000002b7: 	movups	%xmm0, (%rbx,%rax)
    000002bb: 	addq	$0x10, %rax
    000002bf: 	cmpq	$0x8000, %rax
    000002c5: 	jne	.Ltmp1028 # Offset: 709
    000002c7: 	addl	$0x1, %r14d
    000002cb: 	cmpl	%r14d, iterations(%rip)
    000002d2: 	jg	.Ltmp1029 # Offset: 722
.Ltmp1017:
    000002d8: 	leaq	referenceHistogramF(%rip), %rbp
    000002df: 	xorl	%r12d, %r12d
    000002e2: 	jmp	.Ltmp1030 # Offset: 738
    000002e4: 	nopl	(%rax) # Size: 4
.Ltmp1032:
    000002e8: 	addq	$0x1, %r12
    000002ec: 	addq	$0x4, %rbx
    000002f0: 	addq	$0x8, %rbp
    000002f4: 	cmpq	$0x2000, %r12
    000002fb: 	je	.Ltmp1031 # Offset: 763
.Ltmp1030:
    00000301: 	movl	(%rbp), %eax
    00000304: 	cmpl	%eax, (%rbx)
    00000306: 	je	.Ltmp1032 # Offset: 774
    00000308: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    0000030f: 	movl	$0x5, %edx
    00000314: 	leaq	DATAat0x108e4(%rip), %rsi
    0000031b: 	movq	%r13, %rdi
    0000031e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 798
    00000323: 	cmpq	$0x0, 0x28(%rsp)
    00000329: 	je	.Ltmp1033 # Offset: 809
    0000032f: 	movq	0x28(%rsp), %r14
    00000334: 	movq	%r14, %rdi
    00000337: 	callq	strlen@PLT # Offset: 823
    0000033c: 	movq	%r14, %rsi
    0000033f: 	movq	%r13, %rdi
    00000342: 	movq	%rax, %rdx
    00000345: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 837
.Ltmp1039:
    0000034a: 	movl	$0xf, %edx
    0000034f: 	leaq	DATAat0x108ea(%rip), %rsi
    00000356: 	movq	%r13, %rdi
    00000359: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 857
    0000035e: 	movq	%r12, %rsi
    00000361: 	movq	%r13, %rdi
    00000364: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 868
    00000369: 	movl	$0xb, %edx
    0000036e: 	leaq	DATAat0x108fa(%rip), %rsi
    00000375: 	movq	%rax, %rdi
    00000378: 	movq	%rax, %r12
    0000037b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 891
    00000380: 	movq	(%rbp), %rsi
    00000384: 	movq	%r12, %rdi
    00000387: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 903
    0000038c: 	movl	$0x4, %edx
    00000391: 	leaq	DATAat0x10906(%rip), %rsi
    00000398: 	movq	%rax, %rdi
    0000039b: 	movq	%rax, %rbp
    0000039e: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 926
    000003a3: 	movl	(%rbx), %esi
    000003a5: 	movq	%rbp, %rdi
    000003a8: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 936
    000003ad: 	movl	$0x2, %edx
    000003b2: 	leaq	DATAat0x1090b(%rip), %rsi
    000003b9: 	movq	%rax, %rbp
    000003bc: 	movq	%rax, %rdi
    000003bf: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 959
    000003c4: 	movq	(%rbp), %rax
    000003c8: 	movq	-0x18(%rax), %rax
    000003cc: 	movq	0xf0(%rbp,%rax), %r12
    000003d4: 	testq	%r12, %r12
    000003d7: 	je	.Ltmp1034 # Offset: 983
    000003dd: 	cmpb	$0x0, 0x38(%r12)
    000003e3: 	je	.Ltmp1035 # Offset: 995
    000003e5: 	movsbl	0x43(%r12), %esi
    000003eb: 	movq	%rbp, %rdi
    000003ee: 	callq	_ZNSo3putEc@PLT # Offset: 1006
    000003f3: 	movq	%rax, %rdi
    000003f6: 	callq	_ZNSo5flushEv@PLT # Offset: 1014
.Ltmp1031:
    000003fb: 	callq	clock@PLT # Offset: 1019
    00000400: 	movq	%rax, end_time(%rip)
    00000407: 	movq	0x18038(%rsp), %rdx
    0000040f: 	subq	%fs:0x28, %rdx
    00000418: 	jne	.Ltmp1036 # Offset: 1048
    0000041e: 	subq	start_time(%rip), %rax
    00000425: 	pxor	%xmm0, %xmm0
    00000429: 	movq	0x28(%rsp), %rdi
    0000042e: 	cvtsi2sd	%rax, %xmm0
    00000433: 	divsd	DATAat0x10920(%rip), %xmm0
    0000043b: 	addq	$0x18048, %rsp
    00000442: 	popq	%rbx
    00000443: 	popq	%rbp
    00000444: 	popq	%r12
    00000446: 	popq	%r13
    00000448: 	popq	%r14
    0000044a: 	popq	%r15
    0000044c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1100
.Ltmp1018:
    00000451: 	xorl	%eax, %eax
    00000453: 	jmp	.Ltmp1037 # Offset: 1107
.Ltmp1035:
    00000458: 	movq	%r12, %rdi
    0000045b: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 1115
    00000460: 	movq	(%r12), %rax
    00000464: 	movl	$0xa, %esi
    00000469: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    00000470: 	movq	0x30(%rax), %rax
    00000474: 	cmpq	%rdx, %rax
    00000477: 	jne	.Ltmp1038 # Offset: 1143
.Ltmp1040:
    00000479: 	movq	%rbp, %rdi
    0000047c: 	callq	_ZNSo3putEc@PLT # Offset: 1148
    00000481: 	movq	%rax, %rdi
    00000484: 	callq	_ZNSo5flushEv@PLT # Offset: 1156
    00000489: 	jmp	.Ltmp1031 # Offset: 1161
.Ltmp1033:
    0000048e: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000495: 	movq	-0x18(%rax), %rdi
    00000499: 	addq	%r13, %rdi
    0000049c: 	movl	0x20(%rdi), %esi
    0000049f: 	orl	$0x1, %esi
    000004a2: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1186
    000004a7: 	jmp	.Ltmp1039 # Offset: 1191
.Ltmp1038:
    000004ac: 	movq	%r12, %rdi
    000004af: 	callq	*%rax # Offset: 1199
    000004b1: 	movsbl	%al, %esi
    000004b4: 	jmp	.Ltmp1040 # Offset: 1204
.Ltmp1036:
    000004b6: 	callq	__stack_chk_fail@PLT # Offset: 1206
.Ltmp1034:
    000004bb: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 1211
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_histogramFloat5IdjEvPKT_iPT0_S0_S0_PKc"

Binary Function "_Z20test_histogramFloat5IdmEvPKT_iPT0_S0_S0_PKc" after disassembly {
  Number      : 59
  State       : disassembled
  Address     : 0xf2d0
  Size        : 0x4c3
  MaxSize     : 0x4c3
  Offset      : 0xf2d0
  Section     : .text
  Orc Section : .local.text._Z20test_histogramFloat5IdmEvPKT_iPT0_S0_S0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x30000(%rsp), %r11
.Ltmp1041:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp1041 # Offset: 37
    00000027: 	subq	$0x48, %rsp
    0000002b: 	movq	%rdi, 0x18(%rsp)
    00000030: 	movq	%rdx, %rbx
    00000033: 	movl	%esi, 0x20(%rsp)
    00000037: 	movq	%rcx, 0x28(%rsp)
    0000003c: 	movsd	%xmm0, 0x10(%rsp)
    00000042: 	movsd	%xmm1, 0x8(%rsp)
    00000048: 	movq	%fs:0x28, %rax
    00000051: 	movq	%rax, 0x30038(%rsp)
    00000059: 	xorl	%eax, %eax
    0000005b: 	callq	clock@PLT # Offset: 91
    00000060: 	movsd	0x8(%rsp), %xmm0
    00000066: 	movsd	0x10(%rsp), %xmm2
    0000006c: 	movq	%rax, start_time(%rip)
    00000073: 	movl	iterations(%rip), %eax
    00000079: 	subsd	%xmm2, %xmm0
    0000007d: 	movl	0x20(%rsp), %r8d
    00000082: 	movq	0x18(%rsp), %r9
    00000087: 	movsd	DATAat0x10930(%rip), %xmm1
    0000008f: 	testl	%eax, %eax
    00000091: 	divsd	%xmm0, %xmm1
    00000095: 	jle	.Ltmp1042 # Offset: 149
    0000009b: 	leal	-0x4(%r8), %eax
    0000009f: 	xorl	%r14d, %r14d
    000000a2: 	leaq	0x30(%rsp), %r15
    000000a7: 	shrl	$0x2, %eax
    000000aa: 	leaq	0x10030(%rsp), %r12
    000000b2: 	leaq	0x20030(%rsp), %rbp
    000000ba: 	movl	%eax, %edx
    000000bc: 	leal	0x4(,%rax,4), %eax
    000000c3: 	movl	%eax, 0x24(%rsp)
    000000c7: 	shlq	$0x5, %rdx
    000000cb: 	leaq	0x20(%r9,%rdx), %r13
.Ltmp1054:
    000000d0: 	xorl	%esi, %esi
    000000d2: 	movl	$0x10000, %edx
    000000d7: 	movq	%rbx, %rdi
    000000da: 	movl	%r8d, 0x20(%rsp)
    000000df: 	movq	%r9, 0x10(%rsp)
    000000e4: 	movsd	%xmm2, 0x18(%rsp)
    000000ea: 	movsd	%xmm1, 0x8(%rsp)
    000000f0: 	callq	memset@PLT # Offset: 240
    000000f5: 	xorl	%esi, %esi
    000000f7: 	movl	$0x10000, %edx
    000000fc: 	movq	%r15, %rdi
    000000ff: 	callq	memset@PLT # Offset: 255
    00000104: 	xorl	%esi, %esi
    00000106: 	movl	$0x10000, %edx
    0000010b: 	movq	%r12, %rdi
    0000010e: 	callq	memset@PLT # Offset: 270
    00000113: 	xorl	%esi, %esi
    00000115: 	movl	$0x10000, %edx
    0000011a: 	movq	%rbp, %rdi
    0000011d: 	callq	memset@PLT # Offset: 285
    00000122: 	movl	0x20(%rsp), %r8d
    00000127: 	movq	0x10(%rsp), %r9
    0000012c: 	movsd	0x8(%rsp), %xmm1
    00000132: 	movsd	0x18(%rsp), %xmm2
    00000138: 	cmpl	$0x3, %r8d
    0000013c: 	jle	.Ltmp1043 # Offset: 316
    00000142: 	movq	%r9, %rax
    00000145: 	nopl	(%rax) # Size: 3
.Ltmp1048:
    00000148: 	movsd	(%rax), %xmm0
    0000014c: 	subsd	%xmm2, %xmm0
    00000150: 	mulsd	%xmm1, %xmm0
    00000154: 	cvttsd2si	%xmm0, %edi
    00000158: 	movsd	0x8(%rax), %xmm0
    0000015d: 	subsd	%xmm2, %xmm0
    00000161: 	mulsd	%xmm1, %xmm0
    00000165: 	cvttsd2si	%xmm0, %esi
    00000169: 	movsd	0x10(%rax), %xmm0
    0000016e: 	subsd	%xmm2, %xmm0
    00000172: 	mulsd	%xmm1, %xmm0
    00000176: 	cvttsd2si	%xmm0, %edx
    0000017a: 	movsd	0x18(%rax), %xmm0
    0000017f: 	subsd	%xmm2, %xmm0
    00000183: 	mulsd	%xmm1, %xmm0
    00000187: 	cvttsd2si	%xmm0, %r11d
    0000018c: 	cmpl	$0x1fff, %edi
    00000192: 	ja	.Ltmp1044 # Offset: 402
    00000194: 	movslq	%edi, %rdi
    00000197: 	addq	$0x1, (%rbx,%rdi,8)
.Ltmp1044:
    0000019c: 	cmpl	$0x1fff, %esi
    000001a2: 	ja	.Ltmp1045 # Offset: 418
    000001a4: 	movslq	%esi, %rsi
    000001a7: 	addq	$0x1, 0x30(%rsp,%rsi,8)
.Ltmp1045:
    000001ad: 	cmpl	$0x1fff, %edx
    000001b3: 	ja	.Ltmp1046 # Offset: 435
    000001b5: 	movslq	%edx, %rdx
    000001b8: 	addq	$0x1, 0x10030(%rsp,%rdx,8)
.Ltmp1046:
    000001c1: 	cmpl	$0x1fff, %r11d
    000001c8: 	ja	.Ltmp1047 # Offset: 456
    000001ca: 	movslq	%r11d, %r11
    000001cd: 	addq	$0x1, 0x20030(%rsp,%r11,8)
.Ltmp1047:
    000001d6: 	addq	$0x20, %rax
    000001da: 	cmpq	%rax, %r13
    000001dd: 	jne	.Ltmp1048 # Offset: 477
    000001e3: 	movl	0x24(%rsp), %eax
.Ltmp1062:
    000001e7: 	cmpl	%r8d, %eax
    000001ea: 	jge	.Ltmp1049 # Offset: 490
    000001f0: 	movslq	%eax, %rsi
    000001f3: 	movsd	(%r9,%rsi,8), %xmm0
    000001f9: 	leaq	(,%rsi,8), %rdx
    00000201: 	subsd	%xmm2, %xmm0
    00000205: 	mulsd	%xmm1, %xmm0
    00000209: 	cvttsd2si	%xmm0, %esi
    0000020d: 	cmpl	$0x1fff, %esi
    00000213: 	ja	.Ltmp1050 # Offset: 531
    00000215: 	movslq	%esi, %rsi
    00000218: 	addq	$0x1, (%rbx,%rsi,8)
.Ltmp1050:
    0000021d: 	leal	0x1(%rax), %esi
    00000220: 	cmpl	%esi, %r8d
    00000223: 	jle	.Ltmp1049 # Offset: 547
    00000225: 	movsd	0x8(%r9,%rdx), %xmm0
    0000022c: 	subsd	%xmm2, %xmm0
    00000230: 	mulsd	%xmm1, %xmm0
    00000234: 	cvttsd2si	%xmm0, %esi
    00000238: 	cmpl	$0x1fff, %esi
    0000023e: 	ja	.Ltmp1051 # Offset: 574
    00000240: 	movslq	%esi, %rsi
    00000243: 	addq	$0x1, (%rbx,%rsi,8)
.Ltmp1051:
    00000248: 	leal	0x2(%rax), %esi
    0000024b: 	cmpl	%esi, %r8d
    0000024e: 	jle	.Ltmp1049 # Offset: 590
    00000250: 	movsd	0x10(%r9,%rdx), %xmm0
    00000257: 	subsd	%xmm2, %xmm0
    0000025b: 	mulsd	%xmm1, %xmm0
    0000025f: 	cvttsd2si	%xmm0, %esi
    00000263: 	cmpl	$0x1fff, %esi
    00000269: 	ja	.Ltmp1052 # Offset: 617
    0000026b: 	movslq	%esi, %rsi
    0000026e: 	addq	$0x1, (%rbx,%rsi,8)
.Ltmp1052:
    00000273: 	addl	$0x3, %eax
    00000276: 	cmpl	%eax, %r8d
    00000279: 	jle	.Ltmp1049 # Offset: 633
    0000027b: 	movsd	0x18(%r9,%rdx), %xmm0
    00000282: 	subsd	%xmm2, %xmm0
    00000286: 	mulsd	%xmm1, %xmm0
    0000028a: 	cvttsd2si	%xmm0, %eax
    0000028e: 	cmpl	$0x1fff, %eax
    00000293: 	ja	.Ltmp1049 # Offset: 659
    00000295: 	cltq
    00000297: 	addq	$0x1, (%rbx,%rax,8)
.Ltmp1049:
    0000029c: 	xorl	%eax, %eax
    0000029e: 	nop # Size: 2
.Ltmp1053:
    000002a0: 	movdqu	(%rbx,%rax), %xmm0
    000002a5: 	paddq	(%r15,%rax), %xmm0
    000002ab: 	paddq	(%r12,%rax), %xmm0
    000002b1: 	paddq	(%rbp,%rax), %xmm0
    000002b7: 	movups	%xmm0, (%rbx,%rax)
    000002bb: 	addq	$0x10, %rax
    000002bf: 	cmpq	$0x10000, %rax
    000002c5: 	jne	.Ltmp1053 # Offset: 709
    000002c7: 	addl	$0x1, %r14d
    000002cb: 	cmpl	%r14d, iterations(%rip)
    000002d2: 	jg	.Ltmp1054 # Offset: 722
.Ltmp1042:
    000002d8: 	leaq	referenceHistogramF(%rip), %rbp
    000002df: 	xorl	%r12d, %r12d
    000002e2: 	jmp	.Ltmp1055 # Offset: 738
    000002e4: 	nopl	(%rax) # Size: 4
.Ltmp1057:
    000002e8: 	addq	$0x1, %r12
    000002ec: 	addq	$0x8, %rbx
    000002f0: 	addq	$0x8, %rbp
    000002f4: 	cmpq	$0x2000, %r12
    000002fb: 	je	.Ltmp1056 # Offset: 763
.Ltmp1055:
    00000301: 	movq	(%rbp), %rax
    00000305: 	cmpq	%rax, (%rbx)
    00000308: 	je	.Ltmp1057 # Offset: 776
    0000030a: 	leaq	_ZSt4cout@GLIBCXX_3.4(%rip), %r13
    00000311: 	movl	$0x5, %edx
    00000316: 	leaq	DATAat0x108e4(%rip), %rsi
    0000031d: 	movq	%r13, %rdi
    00000320: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 800
    00000325: 	cmpq	$0x0, 0x28(%rsp)
    0000032b: 	je	.Ltmp1058 # Offset: 811
    00000331: 	movq	0x28(%rsp), %r14
    00000336: 	movq	%r14, %rdi
    00000339: 	callq	strlen@PLT # Offset: 825
    0000033e: 	movq	%r14, %rsi
    00000341: 	movq	%r13, %rdi
    00000344: 	movq	%rax, %rdx
    00000347: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 839
.Ltmp1064:
    0000034c: 	movl	$0xf, %edx
    00000351: 	leaq	DATAat0x108ea(%rip), %rsi
    00000358: 	movq	%r13, %rdi
    0000035b: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 859
    00000360: 	movq	%r12, %rsi
    00000363: 	movq	%r13, %rdi
    00000366: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 870
    0000036b: 	movl	$0xb, %edx
    00000370: 	leaq	DATAat0x108fa(%rip), %rsi
    00000377: 	movq	%rax, %rdi
    0000037a: 	movq	%rax, %r12
    0000037d: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 893
    00000382: 	movq	(%rbp), %rsi
    00000386: 	movq	%r12, %rdi
    00000389: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 905
    0000038e: 	movl	$0x4, %edx
    00000393: 	leaq	DATAat0x10906(%rip), %rsi
    0000039a: 	movq	%rax, %rdi
    0000039d: 	movq	%rax, %rbp
    000003a0: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 928
    000003a5: 	movq	(%rbx), %rsi
    000003a8: 	movq	%rbp, %rdi
    000003ab: 	callq	_ZNSo9_M_insertImEERSoT_@PLT # Offset: 939
    000003b0: 	movl	$0x2, %edx
    000003b5: 	leaq	DATAat0x1090b(%rip), %rsi
    000003bc: 	movq	%rax, %rbp
    000003bf: 	movq	%rax, %rdi
    000003c2: 	callq	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT # Offset: 962
    000003c7: 	movq	(%rbp), %rax
    000003cb: 	movq	-0x18(%rax), %rax
    000003cf: 	movq	0xf0(%rbp,%rax), %r12
    000003d7: 	testq	%r12, %r12
    000003da: 	je	.Ltmp1059 # Offset: 986
    000003e0: 	cmpb	$0x0, 0x38(%r12)
    000003e6: 	je	.Ltmp1060 # Offset: 998
    000003e8: 	movsbl	0x43(%r12), %esi
    000003ee: 	movq	%rbp, %rdi
    000003f1: 	callq	_ZNSo3putEc@PLT # Offset: 1009
    000003f6: 	movq	%rax, %rdi
    000003f9: 	callq	_ZNSo5flushEv@PLT # Offset: 1017
.Ltmp1056:
    000003fe: 	callq	clock@PLT # Offset: 1022
    00000403: 	movq	%rax, end_time(%rip)
    0000040a: 	movq	0x30038(%rsp), %rdx
    00000412: 	subq	%fs:0x28, %rdx
    0000041b: 	jne	.Ltmp1061 # Offset: 1051
    00000421: 	subq	start_time(%rip), %rax
    00000428: 	pxor	%xmm0, %xmm0
    0000042c: 	movq	0x28(%rsp), %rdi
    00000431: 	cvtsi2sd	%rax, %xmm0
    00000436: 	divsd	DATAat0x10920(%rip), %xmm0
    0000043e: 	addq	$0x30048, %rsp
    00000445: 	popq	%rbx
    00000446: 	popq	%rbp
    00000447: 	popq	%r12
    00000449: 	popq	%r13
    0000044b: 	popq	%r14
    0000044d: 	popq	%r15
    0000044f: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1103
.Ltmp1043:
    00000454: 	xorl	%eax, %eax
    00000456: 	jmp	.Ltmp1062 # Offset: 1110
.Ltmp1060:
    0000045b: 	movq	%r12, %rdi
    0000045e: 	callq	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT # Offset: 1118
    00000463: 	movq	(%r12), %rax
    00000467: 	movl	$0xa, %esi
    0000046c: 	leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx
    00000473: 	movq	0x30(%rax), %rax
    00000477: 	cmpq	%rdx, %rax
    0000047a: 	jne	.Ltmp1063 # Offset: 1146
.Ltmp1065:
    0000047c: 	movq	%rbp, %rdi
    0000047f: 	callq	_ZNSo3putEc@PLT # Offset: 1151
    00000484: 	movq	%rax, %rdi
    00000487: 	callq	_ZNSo5flushEv@PLT # Offset: 1159
    0000048c: 	jmp	.Ltmp1056 # Offset: 1164
.Ltmp1058:
    00000491: 	movq	_ZSt4cout@GLIBCXX_3.4(%rip), %rax
    00000498: 	movq	-0x18(%rax), %rdi
    0000049c: 	addq	%r13, %rdi
    0000049f: 	movl	0x20(%rdi), %esi
    000004a2: 	orl	$0x1, %esi
    000004a5: 	callq	_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@PLT # Offset: 1189
    000004aa: 	jmp	.Ltmp1064 # Offset: 1194
.Ltmp1063:
    000004af: 	movq	%r12, %rdi
    000004b2: 	callq	*%rax # Offset: 1202
    000004b4: 	movsbl	%al, %esi
    000004b7: 	jmp	.Ltmp1065 # Offset: 1207
.Ltmp1061:
    000004b9: 	callq	__stack_chk_fail@PLT # Offset: 1209
.Ltmp1059:
    000004be: 	callq	_ZSt16__throw_bad_castv@PLT # Offset: 1214
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_histogramFloat5IdmEvPKT_iPT0_S0_S0_PKc"

Binary Function "_fini" after disassembly {
  Number      : 60
  State       : disassembled
  Address     : 0xf794
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0xf794
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 61 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 601 instructions were shortened
BOLT-INFO: removed 80 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 58 out of 84 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x402370
