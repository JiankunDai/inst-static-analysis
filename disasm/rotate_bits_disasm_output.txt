BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0xc018, which lies outside .bss
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0xbfe8(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 2
  State       : disassembled
  Address     : 0x1160
  Size        : 0x2b88
  MaxSize     : 0x2b90
  Offset      : 0x1160
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB01:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	testl	%edi, %edi
    00000014: 	jle	.Ltmp1 # Offset: 20
    0000001a: 	leal	-0x1(%rdi), %eax
    0000001d: 	movl	%edi, %r13d
    00000020: 	movq	%rsi, %r14
    00000023: 	movq	%rsi, %rbx
    00000026: 	leaq	0x8(%rsi,%rax,8), %r12
    0000002b: 	leaq	DATAat0x9755(%rip), %rbp
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2:
    00000038: 	movq	(%rbx), %rdx
    0000003b: 	movq	%rbp, %rsi
    0000003e: 	movl	$0x1, %edi
    00000043: 	xorl	%eax, %eax
    00000045: 	addq	$0x8, %rbx
    00000049: 	callq	__printf_chk@PLT # Offset: 73
    0000004e: 	cmpq	%rbx, %r12
    00000051: 	jne	.Ltmp2 # Offset: 81
    00000053: 	xorl	%eax, %eax
    00000055: 	leaq	DATAat0x973b(%rip), %rsi
    0000005c: 	movl	$0x1, %edi
    00000061: 	callq	__printf_chk@PLT # Offset: 97
    00000066: 	cmpl	$0x1, %r13d
    0000006a: 	jg	.Ltmp3 # Offset: 106
.Ltmp127:
    00000070: 	movl	$0x5, %r12d
.Ltmp128:
    00000076: 	movl	init_value(%rip), %edx
    0000007c: 	leaq	data8unsigned(%rip), %rdi
    00000083: 	movabsq	$0x101010101010101, %rcx
    0000008d: 	leaq	data32unsigned(%rip), %r13
    00000094: 	movzbl	%dl, %eax
    00000097: 	movd	%edx, %xmm0
    0000009b: 	imulq	%rcx, %rax
    0000009f: 	punpcklwd	%xmm0, %xmm0
    000000a3: 	movl	$0x3e8, %ecx
    000000a8: 	pshufd	$0x0, %xmm0, %xmm0
    000000ad: 	rep		stosq	%rax, %es:(%rdi)
    000000b0: 	leaq	-0x3e80(%r13), %rax
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4:
    000000c0: 	movaps	%xmm0, (%rax)
    000000c3: 	addq	$0x10, %rax
    000000c7: 	cmpq	%r13, %rax
    000000ca: 	jne	.Ltmp4 # Offset: 202
    000000cc: 	movd	%edx, %xmm6
    000000d0: 	leaq	data64unsigned(%rip), %rbp
    000000d7: 	pshufd	$0x0, %xmm6, %xmm0
    000000dc: 	leaq	-0x7d00(%rbp), %rax
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5:
    000000e8: 	movaps	%xmm0, (%rax)
    000000eb: 	addq	$0x10, %rax
    000000ef: 	cmpq	%rax, %rbp
    000000f2: 	jne	.Ltmp5 # Offset: 242
    000000f4: 	movd	%edx, %xmm0
    000000f8: 	leaq	end_time(%rip), %rbx
    000000ff: 	punpcklqdq	%xmm0, %xmm0
    00000103: 	leaq	-0xfa00(%rbx), %rax
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6:
    00000110: 	movaps	%xmm0, (%rax)
    00000113: 	addq	$0x10, %rax
    00000117: 	cmpq	%rbx, %rax
    0000011a: 	jne	.Ltmp6 # Offset: 282
    0000011c: 	leaq	data8unsigned(%rip), %rdi
    00000123: 	leaq	DATAat0x9759(%rip), %rdx
    0000012a: 	movl	$0x1f40, %esi
    0000012f: 	callq	_Z13test_constantIh21rotate_right_constantIhEEvPT_iPKc # Offset: 303
    00000134: 	callq	clock@PLT # Offset: 308
    00000139: 	movl	iterations(%rip), %edi
    0000013f: 	movq	%rax, start_time(%rip)
    00000146: 	testl	%edi, %edi
    00000148: 	jle	.Ltmp7 # Offset: 328
    0000014e: 	movl	init_value(%rip), %eax
    00000154: 	movdqa	DATAat0x99c0(%rip), %xmm2
    0000015c: 	xorl	%r15d, %r15d
    0000015f: 	leaq	data16unsigned(%rip), %r14
    00000166: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp10:
    00000170: 	leaq	data8unsigned(%rip), %rdx
    00000177: 	pxor	%xmm3, %xmm3
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp8:
    00000180: 	movdqa	(%rdx), %xmm1
    00000184: 	addq	$0x10, %rdx
    00000188: 	movdqa	%xmm1, %xmm0
    0000018c: 	paddb	%xmm1, %xmm0
    00000190: 	psrlw	$0x5, %xmm1
    00000195: 	paddb	%xmm0, %xmm0
    00000199: 	pand	%xmm2, %xmm1
    0000019d: 	paddb	%xmm0, %xmm0
    000001a1: 	por	%xmm1, %xmm0
    000001a5: 	paddb	%xmm0, %xmm3
    000001a9: 	cmpq	%rdx, %r14
    000001ac: 	jne	.Ltmp8 # Offset: 428
    000001ae: 	movdqa	%xmm3, %xmm0
    000001b2: 	movl	%eax, %ecx
    000001b4: 	psrldq	$0x8, %xmm0
    000001b9: 	rolb	$0x3, %cl
    000001bc: 	paddb	%xmm0, %xmm3
    000001c0: 	pxor	%xmm0, %xmm0
    000001c4: 	shll	$0x6, %ecx
    000001c7: 	psadbw	%xmm0, %xmm3
    000001cb: 	movd	%xmm3, %edx
    000001cf: 	cmpb	%dl, %cl
    000001d1: 	je	.Ltmp9 # Offset: 465
    000001d3: 	movl	current_test(%rip), %edx
    000001d9: 	xorl	%eax, %eax
    000001db: 	movaps	%xmm2, (%rsp)
    000001df: 	addl	$0x1, %r15d
    000001e3: 	movl	$0x1, %edi
    000001e8: 	leaq	DATAat0x998d(%rip), %rsi
    000001ef: 	callq	__printf_chk@PLT # Offset: 495
    000001f4: 	movl	iterations(%rip), %edi
    000001fa: 	cmpl	%r15d, %edi
    000001fd: 	jle	.Ltmp7 # Offset: 509
    000001ff: 	movl	init_value(%rip), %eax
    00000205: 	movdqa	(%rsp), %xmm2
    0000020a: 	jmp	.Ltmp10 # Offset: 522
    0000020f: 	nop # Size: 1
.Ltmp9:
    00000210: 	addl	$0x1, %r15d
    00000214: 	cmpl	%edi, %r15d
    00000217: 	jl	.Ltmp10 # Offset: 535
.Ltmp7:
    0000021d: 	callq	clock@PLT # Offset: 541
    00000222: 	leaq	DATAat0x9118(%rip), %rdi
    00000229: 	pxor	%xmm0, %xmm0
    0000022d: 	movq	%rax, end_time(%rip)
    00000234: 	subq	start_time(%rip), %rax
    0000023b: 	cvtsi2sd	%rax, %xmm0
    00000240: 	divsd	DATAat0x99b0(%rip), %xmm0
    00000248: 	callq	_Z13record_resultdPKc # Offset: 584
    0000024d: 	callq	clock@PLT # Offset: 589
    00000252: 	movl	iterations(%rip), %edi
    00000258: 	movq	%rax, start_time(%rip)
    0000025f: 	testl	%edi, %edi
    00000261: 	jle	.Ltmp11 # Offset: 609
    00000267: 	movl	init_value(%rip), %eax
    0000026d: 	movdqa	DATAat0x99c0(%rip), %xmm2
    00000275: 	xorl	%r15d, %r15d
    00000278: 	leaq	data16unsigned(%rip), %r14
    0000027f: 	nop # Size: 1
.Ltmp14:
    00000280: 	leaq	data8unsigned(%rip), %rdx
    00000287: 	pxor	%xmm1, %xmm1
    0000028b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp12:
    00000290: 	movdqa	(%rdx), %xmm0
    00000294: 	addq	$0x10, %rdx
    00000298: 	psrlw	$0x5, %xmm0
    0000029d: 	pand	%xmm2, %xmm0
    000002a1: 	paddb	%xmm0, %xmm1
    000002a5: 	cmpq	%r14, %rdx
    000002a8: 	jne	.Ltmp12 # Offset: 680
    000002aa: 	movdqa	%xmm1, %xmm0
    000002ae: 	movl	%eax, %ecx
    000002b0: 	psrldq	$0x8, %xmm0
    000002b5: 	shrb	$0x5, %cl
    000002b8: 	paddb	%xmm0, %xmm1
    000002bc: 	pxor	%xmm0, %xmm0
    000002c0: 	shll	$0x6, %ecx
    000002c3: 	psadbw	%xmm0, %xmm1
    000002c7: 	movd	%xmm1, %edx
    000002cb: 	cmpb	%dl, %cl
    000002cd: 	je	.Ltmp13 # Offset: 717
    000002cf: 	movl	current_test(%rip), %edx
    000002d5: 	xorl	%eax, %eax
    000002d7: 	movaps	%xmm2, (%rsp)
    000002db: 	addl	$0x1, %r15d
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x998d(%rip), %rsi
    000002eb: 	callq	__printf_chk@PLT # Offset: 747
    000002f0: 	movl	iterations(%rip), %edi
    000002f6: 	cmpl	%r15d, %edi
    000002f9: 	jle	.Ltmp11 # Offset: 761
    000002fb: 	movl	init_value(%rip), %eax
    00000301: 	movdqa	(%rsp), %xmm2
    00000306: 	jmp	.Ltmp14 # Offset: 774
    0000030b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp13:
    00000310: 	addl	$0x1, %r15d
    00000314: 	cmpl	%edi, %r15d
    00000317: 	jl	.Ltmp14 # Offset: 791
.Ltmp11:
    0000031d: 	callq	clock@PLT # Offset: 797
    00000322: 	leaq	DATAat0x9138(%rip), %rdi
    00000329: 	pxor	%xmm0, %xmm0
    0000032d: 	movq	%rax, end_time(%rip)
    00000334: 	subq	start_time(%rip), %rax
    0000033b: 	cvtsi2sd	%rax, %xmm0
    00000340: 	divsd	DATAat0x99b0(%rip), %xmm0
    00000348: 	callq	_Z13record_resultdPKc # Offset: 840
    0000034d: 	callq	clock@PLT # Offset: 845
    00000352: 	movl	iterations(%rip), %edi
    00000358: 	movq	%rax, start_time(%rip)
    0000035f: 	testl	%edi, %edi
    00000361: 	jle	.Ltmp15 # Offset: 865
    00000367: 	movl	init_value(%rip), %eax
    0000036d: 	movdqa	DATAat0x99c0(%rip), %xmm2
    00000375: 	xorl	%r15d, %r15d
    00000378: 	leaq	data16unsigned(%rip), %r14
    0000037f: 	nop # Size: 1
.Ltmp18:
    00000380: 	leaq	data8unsigned(%rip), %rdx
    00000387: 	pxor	%xmm1, %xmm1
    0000038b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp16:
    00000390: 	movdqa	(%rdx), %xmm0
    00000394: 	addq	$0x10, %rdx
    00000398: 	psrlw	$0x5, %xmm0
    0000039d: 	pand	%xmm2, %xmm0
    000003a1: 	paddb	%xmm0, %xmm1
    000003a5: 	cmpq	%rdx, %r14
    000003a8: 	jne	.Ltmp16 # Offset: 936
    000003aa: 	movdqa	%xmm1, %xmm0
    000003ae: 	movl	%eax, %ecx
    000003b0: 	psrldq	$0x8, %xmm0
    000003b5: 	shrb	$0x5, %cl
    000003b8: 	paddb	%xmm0, %xmm1
    000003bc: 	pxor	%xmm0, %xmm0
    000003c0: 	shll	$0x6, %ecx
    000003c3: 	psadbw	%xmm0, %xmm1
    000003c7: 	movd	%xmm1, %edx
    000003cb: 	cmpb	%dl, %cl
    000003cd: 	je	.Ltmp17 # Offset: 973
    000003cf: 	movl	current_test(%rip), %edx
    000003d5: 	xorl	%eax, %eax
    000003d7: 	movaps	%xmm2, (%rsp)
    000003db: 	addl	$0x1, %r15d
    000003df: 	movl	$0x1, %edi
    000003e4: 	leaq	DATAat0x998d(%rip), %rsi
    000003eb: 	callq	__printf_chk@PLT # Offset: 1003
    000003f0: 	movl	iterations(%rip), %edi
    000003f6: 	cmpl	%edi, %r15d
    000003f9: 	jge	.Ltmp15 # Offset: 1017
    000003fb: 	movl	init_value(%rip), %eax
    00000401: 	movdqa	(%rsp), %xmm2
    00000406: 	jmp	.Ltmp18 # Offset: 1030
    0000040b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp17:
    00000410: 	addl	$0x1, %r15d
    00000414: 	cmpl	%edi, %r15d
    00000417: 	jl	.Ltmp18 # Offset: 1047
.Ltmp15:
    0000041d: 	callq	clock@PLT # Offset: 1053
    00000422: 	leaq	DATAat0x9158(%rip), %rdi
    00000429: 	pxor	%xmm0, %xmm0
    0000042d: 	movq	%rax, end_time(%rip)
    00000434: 	subq	start_time(%rip), %rax
    0000043b: 	cvtsi2sd	%rax, %xmm0
    00000440: 	divsd	DATAat0x99b0(%rip), %xmm0
    00000448: 	callq	_Z13record_resultdPKc # Offset: 1096
    0000044d: 	leaq	DATAat0x9178(%rip), %rdx
    00000454: 	movl	$0x1f40, %esi
    00000459: 	leaq	data16unsigned(%rip), %rdi
    00000460: 	callq	_Z13test_constantIt21rotate_right_constantItEEvPT_iPKc # Offset: 1120
    00000465: 	leaq	DATAat0x9198(%rip), %rdx
    0000046c: 	movl	$0x1f40, %esi
    00000471: 	leaq	data16unsigned(%rip), %rdi
    00000478: 	callq	_Z13test_constantIt22rotate_right_constant2ItEEvPT_iPKc # Offset: 1144
    0000047d: 	leaq	DATAat0x91b8(%rip), %rdx
    00000484: 	movl	$0x1f40, %esi
    00000489: 	leaq	data16unsigned(%rip), %rdi
    00000490: 	callq	_Z13test_constantIt22rotate_right_constant3ItEEvPT_iPKc # Offset: 1168
    00000495: 	leaq	DATAat0x91d8(%rip), %rdx
    0000049c: 	movl	$0x1f40, %esi
    000004a1: 	leaq	data16unsigned(%rip), %rdi
    000004a8: 	callq	_Z13test_constantIt22rotate_right_constant4ItEEvPT_iPKc # Offset: 1192
    000004ad: 	leaq	DATAat0x91f8(%rip), %rdx
    000004b4: 	movl	$0x1f40, %esi
    000004b9: 	leaq	data32unsigned(%rip), %rdi
    000004c0: 	callq	_Z13test_constantIj21rotate_right_constantIjEEvPT_iPKc # Offset: 1216
    000004c5: 	leaq	DATAat0x9218(%rip), %rdx
    000004cc: 	movl	$0x1f40, %esi
    000004d1: 	leaq	data32unsigned(%rip), %rdi
    000004d8: 	callq	_Z13test_constantIj22rotate_right_constant2IjEEvPT_iPKc # Offset: 1240
    000004dd: 	leaq	DATAat0x9238(%rip), %rdx
    000004e4: 	movl	$0x1f40, %esi
    000004e9: 	leaq	data32unsigned(%rip), %rdi
    000004f0: 	callq	_Z13test_constantIj22rotate_right_constant3IjEEvPT_iPKc # Offset: 1264
    000004f5: 	leaq	DATAat0x9258(%rip), %rdx
    000004fc: 	movl	$0x1f40, %esi
    00000501: 	leaq	data32unsigned(%rip), %rdi
    00000508: 	callq	_Z13test_constantIj22rotate_right_constant4IjEEvPT_iPKc # Offset: 1288
    0000050d: 	leaq	DATAat0x9278(%rip), %rdx
    00000514: 	movl	$0x1f40, %esi
    00000519: 	leaq	data64unsigned(%rip), %rdi
    00000520: 	callq	_Z13test_constantIm21rotate_right_constantImEEvPT_iPKc # Offset: 1312
    00000525: 	leaq	DATAat0x9298(%rip), %rdx
    0000052c: 	movl	$0x1f40, %esi
    00000531: 	leaq	data64unsigned(%rip), %rdi
    00000538: 	callq	_Z13test_constantIm22rotate_right_constant2ImEEvPT_iPKc # Offset: 1336
    0000053d: 	leaq	DATAat0x92b8(%rip), %rdx
    00000544: 	movl	$0x1f40, %esi
    00000549: 	leaq	data64unsigned(%rip), %rdi
    00000550: 	callq	_Z13test_constantIm22rotate_right_constant3ImEEvPT_iPKc # Offset: 1360
    00000555: 	leaq	DATAat0x92d8(%rip), %rdx
    0000055c: 	movl	$0x1f40, %esi
    00000561: 	leaq	data64unsigned(%rip), %rdi
    00000568: 	callq	_Z13test_constantIm22rotate_right_constant4ImEEvPT_iPKc # Offset: 1384
    0000056d: 	movl	iterations(%rip), %edx
    00000573: 	xorl	%r8d, %r8d
    00000576: 	xorl	%ecx, %ecx
    00000578: 	movl	$0x1f40, %esi
    0000057d: 	leaq	DATAat0x9777(%rip), %rdi
    00000584: 	callq	_Z9summarizePKciiii # Offset: 1412
    00000589: 	movl	$0x1f40, %esi
    0000058e: 	leaq	DATAat0x978d(%rip), %rdx
    00000595: 	leaq	data8unsigned(%rip), %rdi
    0000059c: 	callq	_Z13test_constantIh20rotate_left_constantIhEEvPT_iPKc # Offset: 1436
    000005a1: 	callq	clock@PLT # Offset: 1441
    000005a6: 	movl	iterations(%rip), %esi
    000005ac: 	movq	%rax, start_time(%rip)
    000005b3: 	testl	%esi, %esi
    000005b5: 	jle	.Ltmp19 # Offset: 1461
    000005bb: 	movl	init_value(%rip), %eax
    000005c1: 	movdqa	DATAat0x99d0(%rip), %xmm2
    000005c9: 	xorl	%r15d, %r15d
    000005cc: 	leaq	data16unsigned(%rip), %r14
    000005d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp22:
    000005d8: 	leaq	data8unsigned(%rip), %rdx
    000005df: 	pxor	%xmm3, %xmm3
    000005e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp20:
    000005e8: 	movdqa	(%rdx), %xmm1
    000005ec: 	addq	$0x10, %rdx
    000005f0: 	movdqa	%xmm1, %xmm0
    000005f4: 	paddb	%xmm1, %xmm0
    000005f8: 	psrlw	$0x3, %xmm1
    000005fd: 	paddb	%xmm0, %xmm0
    00000601: 	pand	%xmm2, %xmm1
    00000605: 	paddb	%xmm0, %xmm0
    00000609: 	paddb	%xmm0, %xmm0
    0000060d: 	paddb	%xmm0, %xmm0
    00000611: 	por	%xmm1, %xmm0
    00000615: 	paddb	%xmm0, %xmm3
    00000619: 	cmpq	%r14, %rdx
    0000061c: 	jne	.Ltmp20 # Offset: 1564
    0000061e: 	movdqa	%xmm3, %xmm0
    00000622: 	movl	%eax, %ecx
    00000624: 	psrldq	$0x8, %xmm0
    00000629: 	rorb	$0x3, %cl
    0000062c: 	paddb	%xmm0, %xmm3
    00000630: 	pxor	%xmm0, %xmm0
    00000634: 	shll	$0x6, %ecx
    00000637: 	psadbw	%xmm0, %xmm3
    0000063b: 	movd	%xmm3, %edx
    0000063f: 	cmpb	%dl, %cl
    00000641: 	je	.Ltmp21 # Offset: 1601
    00000643: 	movl	current_test(%rip), %edx
    00000649: 	xorl	%eax, %eax
    0000064b: 	movaps	%xmm2, (%rsp)
    0000064f: 	addl	$0x1, %r15d
    00000653: 	leaq	DATAat0x998d(%rip), %rsi
    0000065a: 	movl	$0x1, %edi
    0000065f: 	callq	__printf_chk@PLT # Offset: 1631
    00000664: 	movl	iterations(%rip), %esi
    0000066a: 	cmpl	%esi, %r15d
    0000066d: 	jge	.Ltmp19 # Offset: 1645
    0000066f: 	movl	init_value(%rip), %eax
    00000675: 	movdqa	(%rsp), %xmm2
    0000067a: 	jmp	.Ltmp22 # Offset: 1658
    0000067f: 	nop # Size: 1
.Ltmp21:
    00000680: 	addl	$0x1, %r15d
    00000684: 	cmpl	%esi, %r15d
    00000687: 	jl	.Ltmp22 # Offset: 1671
.Ltmp19:
    0000068d: 	callq	clock@PLT # Offset: 1677
    00000692: 	leaq	DATAat0x97aa(%rip), %rdi
    00000699: 	pxor	%xmm0, %xmm0
    0000069d: 	movq	%rax, end_time(%rip)
    000006a4: 	subq	start_time(%rip), %rax
    000006ab: 	cvtsi2sd	%rax, %xmm0
    000006b0: 	divsd	DATAat0x99b0(%rip), %xmm0
    000006b8: 	callq	_Z13record_resultdPKc # Offset: 1720
    000006bd: 	callq	clock@PLT # Offset: 1725
    000006c2: 	movl	iterations(%rip), %esi
    000006c8: 	movq	%rax, start_time(%rip)
    000006cf: 	testl	%esi, %esi
    000006d1: 	jle	.Ltmp23 # Offset: 1745
    000006d7: 	movl	init_value(%rip), %eax
    000006dd: 	movdqa	DATAat0x99d0(%rip), %xmm2
    000006e5: 	xorl	%r15d, %r15d
    000006e8: 	leaq	data16unsigned(%rip), %r14
    000006ef: 	nop # Size: 1
.Ltmp26:
    000006f0: 	leaq	data8unsigned(%rip), %rdx
    000006f7: 	pxor	%xmm1, %xmm1
    000006fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp24:
    00000700: 	movdqa	(%rdx), %xmm0
    00000704: 	addq	$0x10, %rdx
    00000708: 	psrlw	$0x3, %xmm0
    0000070d: 	pand	%xmm2, %xmm0
    00000711: 	paddb	%xmm0, %xmm1
    00000715: 	cmpq	%rdx, %r14
    00000718: 	jne	.Ltmp24 # Offset: 1816
    0000071a: 	movdqa	%xmm1, %xmm0
    0000071e: 	movl	%eax, %ecx
    00000720: 	psrldq	$0x8, %xmm0
    00000725: 	shrb	$0x3, %cl
    00000728: 	paddb	%xmm0, %xmm1
    0000072c: 	pxor	%xmm0, %xmm0
    00000730: 	shll	$0x6, %ecx
    00000733: 	psadbw	%xmm0, %xmm1
    00000737: 	movd	%xmm1, %edx
    0000073b: 	cmpb	%dl, %cl
    0000073d: 	je	.Ltmp25 # Offset: 1853
    0000073f: 	movl	current_test(%rip), %edx
    00000745: 	xorl	%eax, %eax
    00000747: 	movaps	%xmm2, (%rsp)
    0000074b: 	addl	$0x1, %r15d
    0000074f: 	leaq	DATAat0x998d(%rip), %rsi
    00000756: 	movl	$0x1, %edi
    0000075b: 	callq	__printf_chk@PLT # Offset: 1883
    00000760: 	movl	iterations(%rip), %esi
    00000766: 	cmpl	%esi, %r15d
    00000769: 	jge	.Ltmp23 # Offset: 1897
    0000076b: 	movl	init_value(%rip), %eax
    00000771: 	movdqa	(%rsp), %xmm2
    00000776: 	jmp	.Ltmp26 # Offset: 1910
    0000077b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp25:
    00000780: 	addl	$0x1, %r15d
    00000784: 	cmpl	%esi, %r15d
    00000787: 	jl	.Ltmp26 # Offset: 1927
.Ltmp23:
    0000078d: 	callq	clock@PLT # Offset: 1933
    00000792: 	leaq	DATAat0x97c8(%rip), %rdi
    00000799: 	pxor	%xmm0, %xmm0
    0000079d: 	movq	%rax, end_time(%rip)
    000007a4: 	subq	start_time(%rip), %rax
    000007ab: 	cvtsi2sd	%rax, %xmm0
    000007b0: 	divsd	DATAat0x99b0(%rip), %xmm0
    000007b8: 	callq	_Z13record_resultdPKc # Offset: 1976
    000007bd: 	callq	clock@PLT # Offset: 1981
    000007c2: 	movl	iterations(%rip), %esi
    000007c8: 	movq	%rax, start_time(%rip)
    000007cf: 	testl	%esi, %esi
    000007d1: 	jle	.Ltmp27 # Offset: 2001
    000007d7: 	movl	init_value(%rip), %eax
    000007dd: 	movdqa	DATAat0x99d0(%rip), %xmm2
    000007e5: 	xorl	%r15d, %r15d
    000007e8: 	leaq	data16unsigned(%rip), %r14
    000007ef: 	nop # Size: 1
.Ltmp30:
    000007f0: 	leaq	data8unsigned(%rip), %rdx
    000007f7: 	pxor	%xmm1, %xmm1
    000007fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp28:
    00000800: 	movdqa	(%rdx), %xmm0
    00000804: 	addq	$0x10, %rdx
    00000808: 	psrlw	$0x3, %xmm0
    0000080d: 	pand	%xmm2, %xmm0
    00000811: 	paddb	%xmm0, %xmm1
    00000815: 	cmpq	%r14, %rdx
    00000818: 	jne	.Ltmp28 # Offset: 2072
    0000081a: 	movdqa	%xmm1, %xmm0
    0000081e: 	movl	%eax, %ecx
    00000820: 	psrldq	$0x8, %xmm0
    00000825: 	shrb	$0x3, %cl
    00000828: 	paddb	%xmm0, %xmm1
    0000082c: 	pxor	%xmm0, %xmm0
    00000830: 	shll	$0x6, %ecx
    00000833: 	psadbw	%xmm0, %xmm1
    00000837: 	movd	%xmm1, %edx
    0000083b: 	cmpb	%dl, %cl
    0000083d: 	je	.Ltmp29 # Offset: 2109
    0000083f: 	movl	current_test(%rip), %edx
    00000845: 	xorl	%eax, %eax
    00000847: 	movaps	%xmm2, (%rsp)
    0000084b: 	addl	$0x1, %r15d
    0000084f: 	leaq	DATAat0x998d(%rip), %rsi
    00000856: 	movl	$0x1, %edi
    0000085b: 	callq	__printf_chk@PLT # Offset: 2139
    00000860: 	movl	iterations(%rip), %esi
    00000866: 	cmpl	%esi, %r15d
    00000869: 	jge	.Ltmp27 # Offset: 2153
    0000086b: 	movl	init_value(%rip), %eax
    00000871: 	movdqa	(%rsp), %xmm2
    00000876: 	jmp	.Ltmp30 # Offset: 2166
    0000087b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp29:
    00000880: 	addl	$0x1, %r15d
    00000884: 	cmpl	%esi, %r15d
    00000887: 	jl	.Ltmp30 # Offset: 2183
.Ltmp27:
    0000088d: 	callq	clock@PLT # Offset: 2189
    00000892: 	leaq	DATAat0x97e6(%rip), %rdi
    00000899: 	pxor	%xmm0, %xmm0
    0000089d: 	movq	%rax, end_time(%rip)
    000008a4: 	subq	start_time(%rip), %rax
    000008ab: 	cvtsi2sd	%rax, %xmm0
    000008b0: 	divsd	DATAat0x99b0(%rip), %xmm0
    000008b8: 	callq	_Z13record_resultdPKc # Offset: 2232
    000008bd: 	leaq	DATAat0x9804(%rip), %rdx
    000008c4: 	movl	$0x1f40, %esi
    000008c9: 	leaq	data16unsigned(%rip), %rdi
    000008d0: 	callq	_Z13test_constantIt20rotate_left_constantItEEvPT_iPKc # Offset: 2256
    000008d5: 	leaq	DATAat0x92f8(%rip), %rdx
    000008dc: 	movl	$0x1f40, %esi
    000008e1: 	leaq	data16unsigned(%rip), %rdi
    000008e8: 	callq	_Z13test_constantIt21rotate_left_constant2ItEEvPT_iPKc # Offset: 2280
    000008ed: 	leaq	DATAat0x9318(%rip), %rdx
    000008f4: 	movl	$0x1f40, %esi
    000008f9: 	leaq	data16unsigned(%rip), %rdi
    00000900: 	callq	_Z13test_constantIt21rotate_left_constant3ItEEvPT_iPKc # Offset: 2304
    00000905: 	leaq	DATAat0x9338(%rip), %rdx
    0000090c: 	movl	$0x1f40, %esi
    00000911: 	leaq	data16unsigned(%rip), %rdi
    00000918: 	callq	_Z13test_constantIt21rotate_left_constant4ItEEvPT_iPKc # Offset: 2328
    0000091d: 	leaq	DATAat0x9822(%rip), %rdx
    00000924: 	movl	$0x1f40, %esi
    00000929: 	leaq	data32unsigned(%rip), %rdi
    00000930: 	callq	_Z13test_constantIj20rotate_left_constantIjEEvPT_iPKc # Offset: 2352
    00000935: 	leaq	DATAat0x9358(%rip), %rdx
    0000093c: 	movl	$0x1f40, %esi
    00000941: 	leaq	data32unsigned(%rip), %rdi
    00000948: 	callq	_Z13test_constantIj21rotate_left_constant2IjEEvPT_iPKc # Offset: 2376
    0000094d: 	leaq	DATAat0x9378(%rip), %rdx
    00000954: 	movl	$0x1f40, %esi
    00000959: 	leaq	data32unsigned(%rip), %rdi
    00000960: 	callq	_Z13test_constantIj21rotate_left_constant3IjEEvPT_iPKc # Offset: 2400
    00000965: 	leaq	DATAat0x9398(%rip), %rdx
    0000096c: 	movl	$0x1f40, %esi
    00000971: 	leaq	data32unsigned(%rip), %rdi
    00000978: 	callq	_Z13test_constantIj21rotate_left_constant4IjEEvPT_iPKc # Offset: 2424
    0000097d: 	leaq	DATAat0x9840(%rip), %rdx
    00000984: 	movl	$0x1f40, %esi
    00000989: 	leaq	data64unsigned(%rip), %rdi
    00000990: 	callq	_Z13test_constantIm20rotate_left_constantImEEvPT_iPKc # Offset: 2448
    00000995: 	leaq	DATAat0x93b8(%rip), %rdx
    0000099c: 	movl	$0x1f40, %esi
    000009a1: 	leaq	data64unsigned(%rip), %rdi
    000009a8: 	callq	_Z13test_constantIm21rotate_left_constant2ImEEvPT_iPKc # Offset: 2472
    000009ad: 	leaq	DATAat0x93d8(%rip), %rdx
    000009b4: 	movl	$0x1f40, %esi
    000009b9: 	leaq	data64unsigned(%rip), %rdi
    000009c0: 	callq	_Z13test_constantIm21rotate_left_constant3ImEEvPT_iPKc # Offset: 2496
    000009c5: 	leaq	DATAat0x93f8(%rip), %rdx
    000009cc: 	movl	$0x1f40, %esi
    000009d1: 	leaq	data64unsigned(%rip), %rdi
    000009d8: 	callq	_Z13test_constantIm21rotate_left_constant4ImEEvPT_iPKc # Offset: 2520
    000009dd: 	movl	iterations(%rip), %edx
    000009e3: 	xorl	%r8d, %r8d
    000009e6: 	xorl	%ecx, %ecx
    000009e8: 	movl	$0x1f40, %esi
    000009ed: 	leaq	DATAat0x985e(%rip), %rdi
    000009f4: 	callq	_Z9summarizePKciiii # Offset: 2548
    000009f9: 	callq	clock@PLT # Offset: 2553
    000009fe: 	movl	iterations(%rip), %esi
    00000a04: 	movq	%rax, start_time(%rip)
    00000a0b: 	testl	%esi, %esi
    00000a0d: 	jle	.Ltmp31 # Offset: 2573
    00000a13: 	movl	%r12d, %edx
    00000a16: 	movl	init_value(%rip), %eax
    00000a1c: 	movzbl	%r12b, %ecx
    00000a20: 	xorl	%r15d, %r15d
    00000a23: 	negl	%edx
    00000a25: 	leaq	data16unsigned(%rip), %r14
    00000a2c: 	movd	%r12d, %xmm1
    00000a31: 	movdqa	DATAat0x9a00(%rip), %xmm0
    00000a39: 	movl	%edx, %edi
    00000a3b: 	pxor	%xmm6, %xmm6
    00000a3f: 	andl	$0x7, %edi
    00000a42: 	movq	%rdi, %xmm7
    00000a47: 	nopw	(%rax,%rax) # Size: 9
.Ltmp34:
    00000a50: 	leaq	data8unsigned(%rip), %rdx
    00000a57: 	pxor	%xmm5, %xmm5
    00000a5b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp32:
    00000a60: 	movdqa	(%rdx), %xmm2
    00000a64: 	addq	$0x10, %rdx
    00000a68: 	movdqa	%xmm2, %xmm3
    00000a6c: 	punpckhbw	%xmm6, %xmm2
    00000a70: 	punpcklbw	%xmm6, %xmm3
    00000a74: 	movdqa	%xmm2, %xmm8
    00000a79: 	psllw	%xmm7, %xmm8
    00000a7e: 	psrlw	%xmm1, %xmm2
    00000a82: 	movdqa	%xmm3, %xmm4
    00000a86: 	psllw	%xmm7, %xmm4
    00000a8a: 	psrlw	%xmm1, %xmm3
    00000a8e: 	pand	%xmm0, %xmm8
    00000a93: 	pand	%xmm0, %xmm2
    00000a97: 	pand	%xmm0, %xmm4
    00000a9b: 	pand	%xmm0, %xmm3
    00000a9f: 	packuswb	%xmm8, %xmm4
    00000aa4: 	packuswb	%xmm2, %xmm3
    00000aa8: 	por	%xmm3, %xmm4
    00000aac: 	paddb	%xmm4, %xmm5
    00000ab0: 	cmpq	%rdx, %r14
    00000ab3: 	jne	.Ltmp32 # Offset: 2739
    00000ab5: 	movdqa	%xmm5, %xmm2
    00000ab9: 	movl	%eax, %edi
    00000abb: 	psrldq	$0x8, %xmm2
    00000ac0: 	rorb	%cl, %dil
    00000ac3: 	paddb	%xmm2, %xmm5
    00000ac7: 	shll	$0x6, %edi
    00000aca: 	psadbw	%xmm6, %xmm5
    00000ace: 	movd	%xmm5, %edx
    00000ad2: 	cmpb	%dl, %dil
    00000ad5: 	je	.Ltmp33 # Offset: 2773
    00000ad7: 	movl	current_test(%rip), %edx
    00000add: 	xorl	%eax, %eax
    00000adf: 	movl	%ecx, 0x18(%rsp)
    00000ae3: 	addl	$0x1, %r15d
    00000ae7: 	leaq	DATAat0x998d(%rip), %rsi
    00000aee: 	movl	$0x1, %edi
    00000af3: 	movaps	%xmm0, (%rsp)
    00000af7: 	movq	%xmm7, 0x28(%rsp)
    00000afd: 	movq	%xmm1, 0x20(%rsp)
    00000b03: 	callq	__printf_chk@PLT # Offset: 2819
    00000b08: 	movl	iterations(%rip), %esi
    00000b0e: 	cmpl	%esi, %r15d
    00000b11: 	jge	.Ltmp31 # Offset: 2833
    00000b13: 	movl	init_value(%rip), %eax
    00000b19: 	movdqa	(%rsp), %xmm0
    00000b1e: 	pxor	%xmm6, %xmm6
    00000b22: 	movl	0x18(%rsp), %ecx
    00000b26: 	movq	0x20(%rsp), %xmm1
    00000b2c: 	movq	0x28(%rsp), %xmm7
    00000b32: 	jmp	.Ltmp34 # Offset: 2866
    00000b37: 	nopw	(%rax,%rax) # Size: 9
.Ltmp33:
    00000b40: 	addl	$0x1, %r15d
    00000b44: 	cmpl	%esi, %r15d
    00000b47: 	jl	.Ltmp34 # Offset: 2887
.Ltmp31:
    00000b4d: 	callq	clock@PLT # Offset: 2893
    00000b52: 	leaq	DATAat0x9873(%rip), %rdi
    00000b59: 	pxor	%xmm0, %xmm0
    00000b5d: 	movq	%rax, end_time(%rip)
    00000b64: 	subq	start_time(%rip), %rax
    00000b6b: 	cvtsi2sd	%rax, %xmm0
    00000b70: 	divsd	DATAat0x99b0(%rip), %xmm0
    00000b78: 	callq	_Z13record_resultdPKc # Offset: 2936
    00000b7d: 	callq	clock@PLT # Offset: 2941
    00000b82: 	movl	iterations(%rip), %esi
    00000b88: 	movq	%rax, start_time(%rip)
    00000b8f: 	testl	%esi, %esi
    00000b91: 	jle	.Ltmp35 # Offset: 2961
    00000b97: 	movl	%r12d, %edx
    00000b9a: 	movl	init_value(%rip), %eax
    00000ba0: 	movzbl	%r12b, %ecx
    00000ba4: 	xorl	%r15d, %r15d
    00000ba7: 	negl	%edx
    00000ba9: 	leaq	data16unsigned(%rip), %r14
    00000bb0: 	movd	%r12d, %xmm1
    00000bb5: 	movdqa	DATAat0x9a00(%rip), %xmm0
    00000bbd: 	movl	%edx, %edi
    00000bbf: 	pxor	%xmm6, %xmm6
    00000bc3: 	andl	$0x7, %edi
    00000bc6: 	movq	%rdi, %xmm7
    00000bcb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp38:
    00000bd0: 	leaq	data8unsigned(%rip), %rdx
    00000bd7: 	pxor	%xmm5, %xmm5
    00000bdb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp36:
    00000be0: 	movdqa	(%rdx), %xmm2
    00000be4: 	addq	$0x10, %rdx
    00000be8: 	movdqa	%xmm2, %xmm3
    00000bec: 	punpckhbw	%xmm6, %xmm2
    00000bf0: 	punpcklbw	%xmm6, %xmm3
    00000bf4: 	movdqa	%xmm2, %xmm8
    00000bf9: 	psllw	%xmm7, %xmm8
    00000bfe: 	psrlw	%xmm1, %xmm2
    00000c02: 	movdqa	%xmm3, %xmm4
    00000c06: 	psllw	%xmm7, %xmm4
    00000c0a: 	psrlw	%xmm1, %xmm3
    00000c0e: 	pand	%xmm0, %xmm8
    00000c13: 	pand	%xmm0, %xmm2
    00000c17: 	pand	%xmm0, %xmm4
    00000c1b: 	pand	%xmm0, %xmm3
    00000c1f: 	packuswb	%xmm8, %xmm4
    00000c24: 	packuswb	%xmm2, %xmm3
    00000c28: 	por	%xmm3, %xmm4
    00000c2c: 	paddb	%xmm4, %xmm5
    00000c30: 	cmpq	%r14, %rdx
    00000c33: 	jne	.Ltmp36 # Offset: 3123
    00000c35: 	movdqa	%xmm5, %xmm2
    00000c39: 	movl	%eax, %edi
    00000c3b: 	psrldq	$0x8, %xmm2
    00000c40: 	rorb	%cl, %dil
    00000c43: 	paddb	%xmm2, %xmm5
    00000c47: 	shll	$0x6, %edi
    00000c4a: 	psadbw	%xmm6, %xmm5
    00000c4e: 	movd	%xmm5, %edx
    00000c52: 	cmpb	%dl, %dil
    00000c55: 	je	.Ltmp37 # Offset: 3157
    00000c57: 	movl	current_test(%rip), %edx
    00000c5d: 	xorl	%eax, %eax
    00000c5f: 	movl	%ecx, 0x18(%rsp)
    00000c63: 	addl	$0x1, %r15d
    00000c67: 	leaq	DATAat0x998d(%rip), %rsi
    00000c6e: 	movl	$0x1, %edi
    00000c73: 	movaps	%xmm0, (%rsp)
    00000c77: 	movq	%xmm7, 0x28(%rsp)
    00000c7d: 	movq	%xmm1, 0x20(%rsp)
    00000c83: 	callq	__printf_chk@PLT # Offset: 3203
    00000c88: 	movl	iterations(%rip), %esi
    00000c8e: 	cmpl	%esi, %r15d
    00000c91: 	jge	.Ltmp35 # Offset: 3217
    00000c93: 	movl	init_value(%rip), %eax
    00000c99: 	movdqa	(%rsp), %xmm0
    00000c9e: 	pxor	%xmm6, %xmm6
    00000ca2: 	movl	0x18(%rsp), %ecx
    00000ca6: 	movq	0x20(%rsp), %xmm1
    00000cac: 	movq	0x28(%rsp), %xmm7
    00000cb2: 	jmp	.Ltmp38 # Offset: 3250
    00000cb7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp37:
    00000cc0: 	addl	$0x1, %r15d
    00000cc4: 	cmpl	%esi, %r15d
    00000cc7: 	jl	.Ltmp38 # Offset: 3271
.Ltmp35:
    00000ccd: 	callq	clock@PLT # Offset: 3277
    00000cd2: 	leaq	DATAat0x9418(%rip), %rdi
    00000cd9: 	pxor	%xmm0, %xmm0
    00000cdd: 	movq	%rax, end_time(%rip)
    00000ce4: 	subq	start_time(%rip), %rax
    00000ceb: 	cvtsi2sd	%rax, %xmm0
    00000cf0: 	divsd	DATAat0x99b0(%rip), %xmm0
    00000cf8: 	callq	_Z13record_resultdPKc # Offset: 3320
    00000cfd: 	callq	clock@PLT # Offset: 3325
    00000d02: 	movl	iterations(%rip), %edi
    00000d08: 	movq	%rax, start_time(%rip)
    00000d0f: 	testl	%edi, %edi
    00000d11: 	jle	.Ltmp39 # Offset: 3345
    00000d17: 	movslq	%r12d, %rsi
    00000d1a: 	movl	init_value(%rip), %eax
    00000d20: 	movzbl	%r12b, %ecx
    00000d24: 	xorl	%r15d, %r15d
    00000d27: 	movdqa	DATAat0x9a00(%rip), %xmm0
    00000d2f: 	leaq	data16unsigned(%rip), %r14
    00000d36: 	movq	%rsi, %xmm3
    00000d3b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp42:
    00000d40: 	pxor	%xmm6, %xmm6
    00000d44: 	leaq	data8unsigned(%rip), %rdx
    00000d4b: 	pxor	%xmm5, %xmm5
    00000d4f: 	movdqa	%xmm6, %xmm7
    00000d53: 	nopl	(%rax,%rax) # Size: 5
.Ltmp40:
    00000d58: 	movdqa	(%rdx), %xmm4
    00000d5c: 	addq	$0x10, %rdx
    00000d60: 	movdqa	%xmm4, %xmm2
    00000d64: 	punpckhbw	%xmm7, %xmm4
    00000d68: 	punpcklbw	%xmm7, %xmm2
    00000d6c: 	movdqa	%xmm2, %xmm1
    00000d70: 	punpckhwd	%xmm5, %xmm2
    00000d74: 	punpcklwd	%xmm5, %xmm1
    00000d78: 	psrad	%xmm3, %xmm2
    00000d7c: 	psrad	%xmm3, %xmm1
    00000d80: 	movdqa	%xmm1, %xmm8
    00000d85: 	punpcklwd	%xmm2, %xmm1
    00000d89: 	punpckhwd	%xmm2, %xmm8
    00000d8e: 	movdqa	%xmm1, %xmm2
    00000d92: 	punpckhwd	%xmm8, %xmm2
    00000d97: 	punpcklwd	%xmm8, %xmm1
    00000d9c: 	punpcklwd	%xmm2, %xmm1
    00000da0: 	movdqa	%xmm4, %xmm2
    00000da4: 	punpckhwd	%xmm5, %xmm4
    00000da8: 	punpcklwd	%xmm5, %xmm2
    00000dac: 	psrad	%xmm3, %xmm4
    00000db0: 	pand	%xmm0, %xmm1
    00000db4: 	psrad	%xmm3, %xmm2
    00000db8: 	movdqa	%xmm2, %xmm8
    00000dbd: 	punpcklwd	%xmm4, %xmm2
    00000dc1: 	punpckhwd	%xmm4, %xmm8
    00000dc6: 	movdqa	%xmm2, %xmm4
    00000dca: 	punpckhwd	%xmm8, %xmm4
    00000dcf: 	punpcklwd	%xmm8, %xmm2
    00000dd4: 	punpcklwd	%xmm4, %xmm2
    00000dd8: 	pand	%xmm0, %xmm2
    00000ddc: 	packuswb	%xmm2, %xmm1
    00000de0: 	paddb	%xmm1, %xmm6
    00000de4: 	cmpq	%rdx, %r14
    00000de7: 	jne	.Ltmp40 # Offset: 3559
    00000ded: 	movdqa	%xmm6, %xmm1
    00000df1: 	movzbl	%al, %edx
    00000df4: 	psrldq	$0x8, %xmm1
    00000df9: 	sarl	%cl, %edx
    00000dfb: 	paddb	%xmm1, %xmm6
    00000dff: 	shll	$0x6, %edx
    00000e02: 	psadbw	%xmm7, %xmm6
    00000e06: 	movd	%xmm6, %esi
    00000e0a: 	cmpb	%sil, %dl
    00000e0d: 	je	.Ltmp41 # Offset: 3597
    00000e0f: 	movl	current_test(%rip), %edx
    00000e15: 	xorl	%eax, %eax
    00000e17: 	movl	%ecx, 0x18(%rsp)
    00000e1b: 	addl	$0x1, %r15d
    00000e1f: 	movl	$0x1, %edi
    00000e24: 	leaq	DATAat0x998d(%rip), %rsi
    00000e2b: 	movq	%xmm3, 0x20(%rsp)
    00000e31: 	movaps	%xmm0, (%rsp)
    00000e35: 	callq	__printf_chk@PLT # Offset: 3637
    00000e3a: 	movl	iterations(%rip), %edi
    00000e40: 	cmpl	%edi, %r15d
    00000e43: 	jge	.Ltmp39 # Offset: 3651
    00000e45: 	movl	init_value(%rip), %eax
    00000e4b: 	movdqa	(%rsp), %xmm0
    00000e50: 	movl	0x18(%rsp), %ecx
    00000e54: 	movq	0x20(%rsp), %xmm3
    00000e5a: 	jmp	.Ltmp42 # Offset: 3674
    00000e5f: 	nop # Size: 1
.Ltmp41:
    00000e60: 	addl	$0x1, %r15d
    00000e64: 	cmpl	%edi, %r15d
    00000e67: 	jl	.Ltmp42 # Offset: 3687
.Ltmp39:
    00000e6d: 	callq	clock@PLT # Offset: 3693
    00000e72: 	leaq	DATAat0x9438(%rip), %rdi
    00000e79: 	pxor	%xmm0, %xmm0
    00000e7d: 	movq	%rax, end_time(%rip)
    00000e84: 	subq	start_time(%rip), %rax
    00000e8b: 	cvtsi2sd	%rax, %xmm0
    00000e90: 	divsd	DATAat0x99b0(%rip), %xmm0
    00000e98: 	callq	_Z13record_resultdPKc # Offset: 3736
    00000e9d: 	callq	clock@PLT # Offset: 3741
    00000ea2: 	movl	iterations(%rip), %edi
    00000ea8: 	movq	%rax, start_time(%rip)
    00000eaf: 	testl	%edi, %edi
    00000eb1: 	jle	.Ltmp43 # Offset: 3761
    00000eb7: 	movslq	%r12d, %rsi
    00000eba: 	movl	init_value(%rip), %eax
    00000ec0: 	movzbl	%r12b, %ecx
    00000ec4: 	xorl	%r15d, %r15d
    00000ec7: 	movdqa	DATAat0x9a00(%rip), %xmm0
    00000ecf: 	leaq	data16unsigned(%rip), %r14
    00000ed6: 	movq	%rsi, %xmm3
    00000edb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp46:
    00000ee0: 	pxor	%xmm6, %xmm6
    00000ee4: 	leaq	data8unsigned(%rip), %rdx
    00000eeb: 	pxor	%xmm5, %xmm5
    00000eef: 	movdqa	%xmm6, %xmm7
    00000ef3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp44:
    00000ef8: 	movdqa	(%rdx), %xmm4
    00000efc: 	addq	$0x10, %rdx
    00000f00: 	movdqa	%xmm4, %xmm2
    00000f04: 	punpckhbw	%xmm7, %xmm4
    00000f08: 	punpcklbw	%xmm7, %xmm2
    00000f0c: 	movdqa	%xmm2, %xmm1
    00000f10: 	punpckhwd	%xmm5, %xmm2
    00000f14: 	punpcklwd	%xmm5, %xmm1
    00000f18: 	psrad	%xmm3, %xmm2
    00000f1c: 	psrad	%xmm3, %xmm1
    00000f20: 	movdqa	%xmm1, %xmm8
    00000f25: 	punpcklwd	%xmm2, %xmm1
    00000f29: 	punpckhwd	%xmm2, %xmm8
    00000f2e: 	movdqa	%xmm1, %xmm2
    00000f32: 	punpckhwd	%xmm8, %xmm2
    00000f37: 	punpcklwd	%xmm8, %xmm1
    00000f3c: 	punpcklwd	%xmm2, %xmm1
    00000f40: 	movdqa	%xmm4, %xmm2
    00000f44: 	punpckhwd	%xmm5, %xmm4
    00000f48: 	punpcklwd	%xmm5, %xmm2
    00000f4c: 	psrad	%xmm3, %xmm4
    00000f50: 	pand	%xmm0, %xmm1
    00000f54: 	psrad	%xmm3, %xmm2
    00000f58: 	movdqa	%xmm2, %xmm8
    00000f5d: 	punpcklwd	%xmm4, %xmm2
    00000f61: 	punpckhwd	%xmm4, %xmm8
    00000f66: 	movdqa	%xmm2, %xmm4
    00000f6a: 	punpckhwd	%xmm8, %xmm4
    00000f6f: 	punpcklwd	%xmm8, %xmm2
    00000f74: 	punpcklwd	%xmm4, %xmm2
    00000f78: 	pand	%xmm0, %xmm2
    00000f7c: 	packuswb	%xmm2, %xmm1
    00000f80: 	paddb	%xmm1, %xmm6
    00000f84: 	cmpq	%r14, %rdx
    00000f87: 	jne	.Ltmp44 # Offset: 3975
    00000f8d: 	movdqa	%xmm6, %xmm1
    00000f91: 	movzbl	%al, %edx
    00000f94: 	psrldq	$0x8, %xmm1
    00000f99: 	sarl	%cl, %edx
    00000f9b: 	paddb	%xmm1, %xmm6
    00000f9f: 	shll	$0x6, %edx
    00000fa2: 	psadbw	%xmm7, %xmm6
    00000fa6: 	movd	%xmm6, %esi
    00000faa: 	cmpb	%sil, %dl
    00000fad: 	je	.Ltmp45 # Offset: 4013
    00000faf: 	movl	current_test(%rip), %edx
    00000fb5: 	xorl	%eax, %eax
    00000fb7: 	movl	%ecx, 0x18(%rsp)
    00000fbb: 	addl	$0x1, %r15d
    00000fbf: 	movl	$0x1, %edi
    00000fc4: 	leaq	DATAat0x998d(%rip), %rsi
    00000fcb: 	movq	%xmm3, 0x20(%rsp)
    00000fd1: 	movaps	%xmm0, (%rsp)
    00000fd5: 	callq	__printf_chk@PLT # Offset: 4053
    00000fda: 	movl	iterations(%rip), %edi
    00000fe0: 	cmpl	%edi, %r15d
    00000fe3: 	jge	.Ltmp43 # Offset: 4067
    00000fe5: 	movl	init_value(%rip), %eax
    00000feb: 	movdqa	(%rsp), %xmm0
    00000ff0: 	movl	0x18(%rsp), %ecx
    00000ff4: 	movq	0x20(%rsp), %xmm3
    00000ffa: 	jmp	.Ltmp46 # Offset: 4090
    00000fff: 	nop # Size: 1
.Ltmp45:
    00001000: 	addl	$0x1, %r15d
    00001004: 	cmpl	%edi, %r15d
    00001007: 	jl	.Ltmp46 # Offset: 4103
.Ltmp43:
    0000100d: 	callq	clock@PLT # Offset: 4109
    00001012: 	leaq	DATAat0x9458(%rip), %rdi
    00001019: 	pxor	%xmm0, %xmm0
    0000101d: 	movq	%rax, end_time(%rip)
    00001024: 	subq	start_time(%rip), %rax
    0000102b: 	cvtsi2sd	%rax, %xmm0
    00001030: 	divsd	DATAat0x99b0(%rip), %xmm0
    00001038: 	callq	_Z13record_resultdPKc # Offset: 4152
    0000103d: 	callq	clock@PLT # Offset: 4157
    00001042: 	movl	iterations(%rip), %esi
    00001048: 	movq	%rax, start_time(%rip)
    0000104f: 	testl	%esi, %esi
    00001051: 	jle	.Ltmp47 # Offset: 4177
    00001057: 	movl	%r12d, %edx
    0000105a: 	movl	init_value(%rip), %eax
    00001060: 	movzwl	%r12w, %ecx
    00001064: 	xorl	%r15d, %r15d
    00001067: 	negl	%edx
    00001069: 	movd	%r12d, %xmm1
    0000106e: 	leaq	DATAat0x998d(%rip), %r14
    00001075: 	movl	%edx, %edi
    00001077: 	andl	$0xf, %edi
    0000107a: 	movq	%rdi, %xmm4
    0000107f: 	nop # Size: 1
.Ltmp50:
    00001080: 	leaq	data16unsigned(%rip), %rdx
    00001087: 	pxor	%xmm3, %xmm3
    0000108b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp48:
    00001090: 	movdqa	(%rdx), %xmm0
    00001094: 	addq	$0x10, %rdx
    00001098: 	movdqa	%xmm0, %xmm2
    0000109c: 	psrlw	%xmm1, %xmm0
    000010a0: 	psllw	%xmm4, %xmm2
    000010a4: 	por	%xmm2, %xmm0
    000010a8: 	paddw	%xmm0, %xmm3
    000010ac: 	cmpq	%rdx, %r13
    000010af: 	jne	.Ltmp48 # Offset: 4271
    000010b1: 	movdqa	%xmm3, %xmm0
    000010b5: 	movl	%eax, %edx
    000010b7: 	psrldq	$0x8, %xmm0
    000010bc: 	rorw	%cl, %dx
    000010bf: 	imulw	$0x1f40, %dx, %dx
    000010c4: 	paddw	%xmm0, %xmm3
    000010c8: 	movdqa	%xmm3, %xmm0
    000010cc: 	psrldq	$0x4, %xmm0
    000010d1: 	paddw	%xmm0, %xmm3
    000010d5: 	movdqa	%xmm3, %xmm0
    000010d9: 	psrldq	$0x2, %xmm0
    000010de: 	paddw	%xmm0, %xmm3
    000010e2: 	pextrw	$0x0, %xmm3, %edi
    000010e7: 	cmpw	%di, %dx
    000010ea: 	je	.Ltmp49 # Offset: 4330
    000010ec: 	movl	current_test(%rip), %edx
    000010f2: 	movq	%r14, %rsi
    000010f5: 	movl	$0x1, %edi
    000010fa: 	xorl	%eax, %eax
    000010fc: 	movl	%ecx, (%rsp)
    000010ff: 	addl	$0x1, %r15d
    00001103: 	movq	%xmm4, 0x20(%rsp)
    00001109: 	movq	%xmm1, 0x18(%rsp)
    0000110f: 	callq	__printf_chk@PLT # Offset: 4367
    00001114: 	movl	iterations(%rip), %esi
    0000111a: 	cmpl	%esi, %r15d
    0000111d: 	jge	.Ltmp47 # Offset: 4381
    0000111f: 	movl	init_value(%rip), %eax
    00001125: 	movl	(%rsp), %ecx
    00001128: 	movq	0x18(%rsp), %xmm1
    0000112e: 	movq	0x20(%rsp), %xmm4
    00001134: 	jmp	.Ltmp50 # Offset: 4404
    00001139: 	nopl	(%rax) # Size: 7
.Ltmp49:
    00001140: 	addl	$0x1, %r15d
    00001144: 	cmpl	%esi, %r15d
    00001147: 	jl	.Ltmp50 # Offset: 4423
.Ltmp47:
    0000114d: 	callq	clock@PLT # Offset: 4429
    00001152: 	leaq	DATAat0x9478(%rip), %rdi
    00001159: 	pxor	%xmm0, %xmm0
    0000115d: 	movq	%rax, end_time(%rip)
    00001164: 	subq	start_time(%rip), %rax
    0000116b: 	cvtsi2sd	%rax, %xmm0
    00001170: 	divsd	DATAat0x99b0(%rip), %xmm0
    00001178: 	callq	_Z13record_resultdPKc # Offset: 4472
    0000117d: 	callq	clock@PLT # Offset: 4477
    00001182: 	movl	iterations(%rip), %esi
    00001188: 	movq	%rax, start_time(%rip)
    0000118f: 	testl	%esi, %esi
    00001191: 	jle	.Ltmp51 # Offset: 4497
    00001197: 	movl	%r12d, %edx
    0000119a: 	movl	init_value(%rip), %eax
    000011a0: 	movzwl	%r12w, %ecx
    000011a4: 	xorl	%r15d, %r15d
    000011a7: 	negl	%edx
    000011a9: 	movd	%r12d, %xmm1
    000011ae: 	leaq	DATAat0x998d(%rip), %r14
    000011b5: 	movl	%edx, %edi
    000011b7: 	andl	$0xf, %edi
    000011ba: 	movq	%rdi, %xmm4
    000011bf: 	nop # Size: 1
.Ltmp54:
    000011c0: 	leaq	data16unsigned(%rip), %rdx
    000011c7: 	pxor	%xmm3, %xmm3
    000011cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp52:
    000011d0: 	movdqa	(%rdx), %xmm0
    000011d4: 	addq	$0x10, %rdx
    000011d8: 	movdqa	%xmm0, %xmm2
    000011dc: 	psrlw	%xmm1, %xmm0
    000011e0: 	psllw	%xmm4, %xmm2
    000011e4: 	por	%xmm2, %xmm0
    000011e8: 	paddw	%xmm0, %xmm3
    000011ec: 	cmpq	%rdx, %r13
    000011ef: 	jne	.Ltmp52 # Offset: 4591
    000011f1: 	movdqa	%xmm3, %xmm0
    000011f5: 	movl	%eax, %edx
    000011f7: 	psrldq	$0x8, %xmm0
    000011fc: 	rorw	%cl, %dx
    000011ff: 	imulw	$0x1f40, %dx, %dx
    00001204: 	paddw	%xmm0, %xmm3
    00001208: 	movdqa	%xmm3, %xmm0
    0000120c: 	psrldq	$0x4, %xmm0
    00001211: 	paddw	%xmm0, %xmm3
    00001215: 	movdqa	%xmm3, %xmm0
    00001219: 	psrldq	$0x2, %xmm0
    0000121e: 	paddw	%xmm0, %xmm3
    00001222: 	pextrw	$0x0, %xmm3, %edi
    00001227: 	cmpw	%di, %dx
    0000122a: 	je	.Ltmp53 # Offset: 4650
    0000122c: 	movl	current_test(%rip), %edx
    00001232: 	movq	%r14, %rsi
    00001235: 	movl	$0x1, %edi
    0000123a: 	xorl	%eax, %eax
    0000123c: 	movl	%ecx, (%rsp)
    0000123f: 	addl	$0x1, %r15d
    00001243: 	movq	%xmm4, 0x20(%rsp)
    00001249: 	movq	%xmm1, 0x18(%rsp)
    0000124f: 	callq	__printf_chk@PLT # Offset: 4687
    00001254: 	movl	iterations(%rip), %esi
    0000125a: 	cmpl	%esi, %r15d
    0000125d: 	jge	.Ltmp51 # Offset: 4701
    0000125f: 	movl	init_value(%rip), %eax
    00001265: 	movl	(%rsp), %ecx
    00001268: 	movq	0x18(%rsp), %xmm1
    0000126e: 	movq	0x20(%rsp), %xmm4
    00001274: 	jmp	.Ltmp54 # Offset: 4724
    00001279: 	nopl	(%rax) # Size: 7
.Ltmp53:
    00001280: 	addl	$0x1, %r15d
    00001284: 	cmpl	%esi, %r15d
    00001287: 	jl	.Ltmp54 # Offset: 4743
.Ltmp51:
    0000128d: 	callq	clock@PLT # Offset: 4749
    00001292: 	leaq	DATAat0x9498(%rip), %rdi
    00001299: 	pxor	%xmm0, %xmm0
    0000129d: 	movq	%rax, end_time(%rip)
    000012a4: 	subq	start_time(%rip), %rax
    000012ab: 	cvtsi2sd	%rax, %xmm0
    000012b0: 	divsd	DATAat0x99b0(%rip), %xmm0
    000012b8: 	callq	_Z13record_resultdPKc # Offset: 4792
    000012bd: 	callq	clock@PLT # Offset: 4797
    000012c2: 	movl	iterations(%rip), %esi
    000012c8: 	movq	%rax, start_time(%rip)
    000012cf: 	testl	%esi, %esi
    000012d1: 	jle	.Ltmp55 # Offset: 4817
    000012d7: 	movslq	%r12d, %rdi
    000012da: 	movl	init_value(%rip), %eax
    000012e0: 	movzwl	%r12w, %ecx
    000012e4: 	xorl	%r15d, %r15d
    000012e7: 	movq	%rdi, %xmm3
    000012ec: 	leaq	DATAat0x998d(%rip), %r14
    000012f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp58:
    000012f8: 	pxor	%xmm2, %xmm2
    000012fc: 	leaq	data16unsigned(%rip), %rdx
    00001303: 	movdqa	%xmm2, %xmm5
    00001307: 	nopw	(%rax,%rax) # Size: 9
.Ltmp56:
    00001310: 	movdqa	(%rdx), %xmm1
    00001314: 	addq	$0x10, %rdx
    00001318: 	movdqa	%xmm1, %xmm0
    0000131c: 	punpckhwd	%xmm5, %xmm1
    00001320: 	punpcklwd	%xmm5, %xmm0
    00001324: 	psrad	%xmm3, %xmm1
    00001328: 	psrad	%xmm3, %xmm0
    0000132c: 	movdqa	%xmm0, %xmm4
    00001330: 	punpcklwd	%xmm1, %xmm0
    00001334: 	punpckhwd	%xmm1, %xmm4
    00001338: 	movdqa	%xmm0, %xmm1
    0000133c: 	punpckhwd	%xmm4, %xmm1
    00001340: 	punpcklwd	%xmm4, %xmm0
    00001344: 	punpcklwd	%xmm1, %xmm0
    00001348: 	paddw	%xmm0, %xmm2
    0000134c: 	cmpq	%rdx, %r13
    0000134f: 	jne	.Ltmp56 # Offset: 4943
    00001351: 	movdqa	%xmm2, %xmm0
    00001355: 	movzwl	%ax, %edx
    00001358: 	psrldq	$0x8, %xmm0
    0000135d: 	sarl	%cl, %edx
    0000135f: 	imulw	$0x1f40, %dx, %dx
    00001364: 	paddw	%xmm0, %xmm2
    00001368: 	movdqa	%xmm2, %xmm0
    0000136c: 	psrldq	$0x4, %xmm0
    00001371: 	paddw	%xmm0, %xmm2
    00001375: 	movdqa	%xmm2, %xmm0
    00001379: 	psrldq	$0x2, %xmm0
    0000137e: 	paddw	%xmm0, %xmm2
    00001382: 	pextrw	$0x0, %xmm2, %edi
    00001387: 	cmpw	%di, %dx
    0000138a: 	je	.Ltmp57 # Offset: 5002
    0000138c: 	movl	current_test(%rip), %edx
    00001392: 	movq	%r14, %rsi
    00001395: 	movl	$0x1, %edi
    0000139a: 	xorl	%eax, %eax
    0000139c: 	movl	%ecx, (%rsp)
    0000139f: 	addl	$0x1, %r15d
    000013a3: 	movq	%xmm3, 0x18(%rsp)
    000013a9: 	callq	__printf_chk@PLT # Offset: 5033
    000013ae: 	movl	iterations(%rip), %esi
    000013b4: 	cmpl	%esi, %r15d
    000013b7: 	jge	.Ltmp55 # Offset: 5047
    000013b9: 	movl	init_value(%rip), %eax
    000013bf: 	movl	(%rsp), %ecx
    000013c2: 	movq	0x18(%rsp), %xmm3
    000013c8: 	jmp	.Ltmp58 # Offset: 5064
    000013cd: 	nopl	(%rax) # Size: 3
.Ltmp57:
    000013d0: 	addl	$0x1, %r15d
    000013d4: 	cmpl	%esi, %r15d
    000013d7: 	jl	.Ltmp58 # Offset: 5079
.Ltmp55:
    000013dd: 	callq	clock@PLT # Offset: 5085
    000013e2: 	leaq	DATAat0x94b8(%rip), %rdi
    000013e9: 	pxor	%xmm0, %xmm0
    000013ed: 	movq	%rax, end_time(%rip)
    000013f4: 	subq	start_time(%rip), %rax
    000013fb: 	cvtsi2sd	%rax, %xmm0
    00001400: 	divsd	DATAat0x99b0(%rip), %xmm0
    00001408: 	callq	_Z13record_resultdPKc # Offset: 5128
    0000140d: 	callq	clock@PLT # Offset: 5133
    00001412: 	movl	iterations(%rip), %esi
    00001418: 	movq	%rax, start_time(%rip)
    0000141f: 	testl	%esi, %esi
    00001421: 	jle	.Ltmp59 # Offset: 5153
    00001427: 	movslq	%r12d, %rdi
    0000142a: 	movl	init_value(%rip), %eax
    00001430: 	movzwl	%r12w, %ecx
    00001434: 	xorl	%r15d, %r15d
    00001437: 	movq	%rdi, %xmm3
    0000143c: 	leaq	DATAat0x998d(%rip), %r14
    00001443: 	nopl	(%rax,%rax) # Size: 5
.Ltmp62:
    00001448: 	pxor	%xmm2, %xmm2
    0000144c: 	leaq	data16unsigned(%rip), %rdx
    00001453: 	movdqa	%xmm2, %xmm5
    00001457: 	nopw	(%rax,%rax) # Size: 9
.Ltmp60:
    00001460: 	movdqa	(%rdx), %xmm1
    00001464: 	addq	$0x10, %rdx
    00001468: 	movdqa	%xmm1, %xmm0
    0000146c: 	punpckhwd	%xmm5, %xmm1
    00001470: 	punpcklwd	%xmm5, %xmm0
    00001474: 	psrad	%xmm3, %xmm1
    00001478: 	psrad	%xmm3, %xmm0
    0000147c: 	movdqa	%xmm0, %xmm4
    00001480: 	punpcklwd	%xmm1, %xmm0
    00001484: 	punpckhwd	%xmm1, %xmm4
    00001488: 	movdqa	%xmm0, %xmm1
    0000148c: 	punpckhwd	%xmm4, %xmm1
    00001490: 	punpcklwd	%xmm4, %xmm0
    00001494: 	punpcklwd	%xmm1, %xmm0
    00001498: 	paddw	%xmm0, %xmm2
    0000149c: 	cmpq	%rdx, %r13
    0000149f: 	jne	.Ltmp60 # Offset: 5279
    000014a1: 	movdqa	%xmm2, %xmm0
    000014a5: 	movzwl	%ax, %edx
    000014a8: 	psrldq	$0x8, %xmm0
    000014ad: 	sarl	%cl, %edx
    000014af: 	imulw	$0x1f40, %dx, %dx
    000014b4: 	paddw	%xmm0, %xmm2
    000014b8: 	movdqa	%xmm2, %xmm0
    000014bc: 	psrldq	$0x4, %xmm0
    000014c1: 	paddw	%xmm0, %xmm2
    000014c5: 	movdqa	%xmm2, %xmm0
    000014c9: 	psrldq	$0x2, %xmm0
    000014ce: 	paddw	%xmm0, %xmm2
    000014d2: 	pextrw	$0x0, %xmm2, %edi
    000014d7: 	cmpw	%di, %dx
    000014da: 	je	.Ltmp61 # Offset: 5338
    000014dc: 	movl	current_test(%rip), %edx
    000014e2: 	movq	%r14, %rsi
    000014e5: 	movl	$0x1, %edi
    000014ea: 	xorl	%eax, %eax
    000014ec: 	movl	%ecx, (%rsp)
    000014ef: 	addl	$0x1, %r15d
    000014f3: 	movq	%xmm3, 0x18(%rsp)
    000014f9: 	callq	__printf_chk@PLT # Offset: 5369
    000014fe: 	movl	iterations(%rip), %esi
    00001504: 	cmpl	%esi, %r15d
    00001507: 	jge	.Ltmp59 # Offset: 5383
    00001509: 	movl	init_value(%rip), %eax
    0000150f: 	movl	(%rsp), %ecx
    00001512: 	movq	0x18(%rsp), %xmm3
    00001518: 	jmp	.Ltmp62 # Offset: 5400
    0000151d: 	nopl	(%rax) # Size: 3
.Ltmp61:
    00001520: 	addl	$0x1, %r15d
    00001524: 	cmpl	%esi, %r15d
    00001527: 	jl	.Ltmp62 # Offset: 5415
.Ltmp59:
    0000152d: 	callq	clock@PLT # Offset: 5421
    00001532: 	leaq	DATAat0x94d8(%rip), %rdi
    00001539: 	pxor	%xmm0, %xmm0
    0000153d: 	xorl	%r15d, %r15d
    00001540: 	movq	%rax, end_time(%rip)
    00001547: 	subq	start_time(%rip), %rax
    0000154e: 	leaq	DATAat0x998d(%rip), %r14
    00001555: 	cvtsi2sd	%rax, %xmm0
    0000155a: 	divsd	DATAat0x99b0(%rip), %xmm0
    00001562: 	callq	_Z13record_resultdPKc # Offset: 5474
    00001567: 	callq	clock@PLT # Offset: 5479
    0000156c: 	movl	%r12d, %edx
    0000156f: 	movl	iterations(%rip), %esi
    00001575: 	movd	%r12d, %xmm1
    0000157a: 	negl	%edx
    0000157c: 	movq	%rax, start_time(%rip)
    00001583: 	movl	init_value(%rip), %eax
    00001589: 	movl	%edx, %ecx
    0000158b: 	andl	$0x1f, %ecx
    0000158e: 	movq	%rcx, %xmm4
    00001593: 	testl	%esi, %esi
    00001595: 	jle	.Ltmp63 # Offset: 5525
    0000159b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp66:
    000015a0: 	leaq	data32unsigned(%rip), %rdx
    000015a7: 	pxor	%xmm3, %xmm3
    000015ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp64:
    000015b0: 	movdqa	(%rdx), %xmm0
    000015b4: 	addq	$0x10, %rdx
    000015b8: 	movdqa	%xmm0, %xmm2
    000015bc: 	psrld	%xmm1, %xmm0
    000015c0: 	pslld	%xmm4, %xmm2
    000015c4: 	por	%xmm2, %xmm0
    000015c8: 	paddd	%xmm0, %xmm3
    000015cc: 	cmpq	%rbp, %rdx
    000015cf: 	jne	.Ltmp64 # Offset: 5583
    000015d1: 	movdqa	%xmm3, %xmm0
    000015d5: 	movl	%eax, %edi
    000015d7: 	movl	%r12d, %ecx
    000015da: 	psrldq	$0x8, %xmm0
    000015df: 	rorl	%cl, %edi
    000015e1: 	imull	$0x1f40, %edi, %edi
    000015e7: 	paddd	%xmm0, %xmm3
    000015eb: 	movdqa	%xmm3, %xmm0
    000015ef: 	psrldq	$0x4, %xmm0
    000015f4: 	paddd	%xmm0, %xmm3
    000015f8: 	movd	%xmm3, %edx
    000015fc: 	cmpl	%edx, %edi
    000015fe: 	je	.Ltmp65 # Offset: 5630
    00001600: 	movl	current_test(%rip), %edx
    00001606: 	movq	%r14, %rsi
    00001609: 	movl	$0x1, %edi
    0000160e: 	xorl	%eax, %eax
    00001610: 	movq	%xmm4, 0x18(%rsp)
    00001616: 	addl	$0x1, %r15d
    0000161a: 	movq	%xmm1, (%rsp)
    0000161f: 	callq	__printf_chk@PLT # Offset: 5663
    00001624: 	movl	iterations(%rip), %esi
    0000162a: 	cmpl	%esi, %r15d
    0000162d: 	jge	.Ltmp63 # Offset: 5677
    0000162f: 	movl	init_value(%rip), %eax
    00001635: 	movq	(%rsp), %xmm1
    0000163a: 	movq	0x18(%rsp), %xmm4
    00001640: 	jmp	.Ltmp66 # Offset: 5696
    00001645: 	nopl	(%rax) # Size: 3
.Ltmp65:
    00001648: 	addl	$0x1, %r15d
    0000164c: 	cmpl	%esi, %r15d
    0000164f: 	jl	.Ltmp66 # Offset: 5711
.Ltmp63:
    00001655: 	callq	clock@PLT # Offset: 5717
    0000165a: 	leaq	DATAat0x94f8(%rip), %rdi
    00001661: 	pxor	%xmm0, %xmm0
    00001665: 	xorl	%r15d, %r15d
    00001668: 	movq	%rax, end_time(%rip)
    0000166f: 	subq	start_time(%rip), %rax
    00001676: 	leaq	DATAat0x998d(%rip), %r14
    0000167d: 	cvtsi2sd	%rax, %xmm0
    00001682: 	divsd	DATAat0x99b0(%rip), %xmm0
    0000168a: 	callq	_Z13record_resultdPKc # Offset: 5770
    0000168f: 	callq	clock@PLT # Offset: 5775
    00001694: 	movl	%r12d, %edx
    00001697: 	movl	iterations(%rip), %esi
    0000169d: 	movd	%r12d, %xmm1
    000016a2: 	negl	%edx
    000016a4: 	movq	%rax, start_time(%rip)
    000016ab: 	movl	init_value(%rip), %eax
    000016b1: 	movl	%edx, %ecx
    000016b3: 	andl	$0x1f, %ecx
    000016b6: 	movq	%rcx, %xmm4
    000016bb: 	testl	%esi, %esi
    000016bd: 	jle	.Ltmp67 # Offset: 5821
    000016c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp70:
    000016c8: 	leaq	data32unsigned(%rip), %rdx
    000016cf: 	pxor	%xmm3, %xmm3
    000016d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp68:
    000016d8: 	movdqa	(%rdx), %xmm0
    000016dc: 	addq	$0x10, %rdx
    000016e0: 	movdqa	%xmm0, %xmm2
    000016e4: 	psrld	%xmm1, %xmm0
    000016e8: 	pslld	%xmm4, %xmm2
    000016ec: 	por	%xmm2, %xmm0
    000016f0: 	paddd	%xmm0, %xmm3
    000016f4: 	cmpq	%rbp, %rdx
    000016f7: 	jne	.Ltmp68 # Offset: 5879
    000016f9: 	movdqa	%xmm3, %xmm0
    000016fd: 	movl	%eax, %edi
    000016ff: 	movl	%r12d, %ecx
    00001702: 	psrldq	$0x8, %xmm0
    00001707: 	rorl	%cl, %edi
    00001709: 	imull	$0x1f40, %edi, %edi
    0000170f: 	paddd	%xmm0, %xmm3
    00001713: 	movdqa	%xmm3, %xmm0
    00001717: 	psrldq	$0x4, %xmm0
    0000171c: 	paddd	%xmm0, %xmm3
    00001720: 	movd	%xmm3, %edx
    00001724: 	cmpl	%edx, %edi
    00001726: 	je	.Ltmp69 # Offset: 5926
    00001728: 	movl	current_test(%rip), %edx
    0000172e: 	movq	%r14, %rsi
    00001731: 	movl	$0x1, %edi
    00001736: 	xorl	%eax, %eax
    00001738: 	movq	%xmm4, 0x18(%rsp)
    0000173e: 	addl	$0x1, %r15d
    00001742: 	movq	%xmm1, (%rsp)
    00001747: 	callq	__printf_chk@PLT # Offset: 5959
    0000174c: 	movl	iterations(%rip), %esi
    00001752: 	cmpl	%esi, %r15d
    00001755: 	jge	.Ltmp67 # Offset: 5973
    00001757: 	movl	init_value(%rip), %eax
    0000175d: 	movq	(%rsp), %xmm1
    00001762: 	movq	0x18(%rsp), %xmm4
    00001768: 	jmp	.Ltmp70 # Offset: 5992
    0000176d: 	nopl	(%rax) # Size: 3
.Ltmp69:
    00001770: 	addl	$0x1, %r15d
    00001774: 	cmpl	%esi, %r15d
    00001777: 	jl	.Ltmp70 # Offset: 6007
.Ltmp67:
    0000177d: 	callq	clock@PLT # Offset: 6013
    00001782: 	leaq	DATAat0x9518(%rip), %rdi
    00001789: 	pxor	%xmm0, %xmm0
    0000178d: 	xorl	%r15d, %r15d
    00001790: 	movq	%rax, end_time(%rip)
    00001797: 	subq	start_time(%rip), %rax
    0000179e: 	leaq	DATAat0x998d(%rip), %r14
    000017a5: 	cvtsi2sd	%rax, %xmm0
    000017aa: 	divsd	DATAat0x99b0(%rip), %xmm0
    000017b2: 	callq	_Z13record_resultdPKc # Offset: 6066
    000017b7: 	leaq	DATAat0x9538(%rip), %rcx
    000017be: 	movl	%r12d, %edx
    000017c1: 	movl	$0x1f40, %esi
    000017c6: 	leaq	data32unsigned(%rip), %rdi
    000017cd: 	callq	_Z19test_variable_shiftIj22rotate_right_variable3IjEEvPT_iiPKc # Offset: 6093
    000017d2: 	leaq	DATAat0x9558(%rip), %rcx
    000017d9: 	movl	%r12d, %edx
    000017dc: 	movl	$0x1f40, %esi
    000017e1: 	leaq	data32unsigned(%rip), %rdi
    000017e8: 	callq	_Z19test_variable_shiftIj22rotate_right_variable4IjEEvPT_iiPKc # Offset: 6120
    000017ed: 	callq	clock@PLT # Offset: 6125
    000017f2: 	movl	iterations(%rip), %esi
    000017f8: 	movl	init_value(%rip), %edx
    000017fe: 	movd	%r12d, %xmm1
    00001803: 	movq	%rax, start_time(%rip)
    0000180a: 	movl	%r12d, %eax
    0000180d: 	negl	%eax
    0000180f: 	movl	%eax, %ecx
    00001811: 	andl	$0x3f, %ecx
    00001814: 	movq	%rcx, %xmm4
    00001819: 	testl	%esi, %esi
    0000181b: 	jle	.Ltmp71 # Offset: 6171
    00001821: 	nopl	(%rax) # Size: 7
.Ltmp74:
    00001828: 	leaq	data64unsigned(%rip), %rax
    0000182f: 	pxor	%xmm3, %xmm3
    00001833: 	nopl	(%rax,%rax) # Size: 5
.Ltmp72:
    00001838: 	movdqa	(%rax), %xmm0
    0000183c: 	addq	$0x10, %rax
    00001840: 	movdqa	%xmm0, %xmm2
    00001844: 	psrlq	%xmm1, %xmm0
    00001848: 	psllq	%xmm4, %xmm2
    0000184c: 	por	%xmm2, %xmm0
    00001850: 	paddq	%xmm0, %xmm3
    00001854: 	cmpq	%rax, %rbx
    00001857: 	jne	.Ltmp72 # Offset: 6231
    00001859: 	movq	%rdx, %rdi
    0000185c: 	movl	%r12d, %ecx
    0000185f: 	movdqa	%xmm3, %xmm0
    00001863: 	rorq	%cl, %rdi
    00001866: 	psrldq	$0x8, %xmm0
    0000186b: 	imulq	$0x1f40, %rdi, %rdi
    00001872: 	paddq	%xmm0, %xmm3
    00001876: 	movq	%xmm3, %rax
    0000187b: 	cmpq	%rax, %rdi
    0000187e: 	je	.Ltmp73 # Offset: 6270
    00001880: 	movl	current_test(%rip), %edx
    00001886: 	movq	%r14, %rsi
    00001889: 	movl	$0x1, %edi
    0000188e: 	xorl	%eax, %eax
    00001890: 	movq	%xmm4, 0x18(%rsp)
    00001896: 	addl	$0x1, %r15d
    0000189a: 	movq	%xmm1, (%rsp)
    0000189f: 	callq	__printf_chk@PLT # Offset: 6303
    000018a4: 	movl	iterations(%rip), %esi
    000018aa: 	cmpl	%esi, %r15d
    000018ad: 	jge	.Ltmp71 # Offset: 6317
    000018af: 	movl	init_value(%rip), %edx
    000018b5: 	movq	(%rsp), %xmm1
    000018ba: 	movq	0x18(%rsp), %xmm4
    000018c0: 	jmp	.Ltmp74 # Offset: 6336
    000018c5: 	nopl	(%rax) # Size: 3
.Ltmp73:
    000018c8: 	addl	$0x1, %r15d
    000018cc: 	cmpl	%esi, %r15d
    000018cf: 	jl	.Ltmp74 # Offset: 6351
.Ltmp71:
    000018d5: 	callq	clock@PLT # Offset: 6357
    000018da: 	leaq	DATAat0x9578(%rip), %rdi
    000018e1: 	pxor	%xmm0, %xmm0
    000018e5: 	xorl	%r15d, %r15d
    000018e8: 	movq	%rax, end_time(%rip)
    000018ef: 	subq	start_time(%rip), %rax
    000018f6: 	leaq	DATAat0x998d(%rip), %r14
    000018fd: 	cvtsi2sd	%rax, %xmm0
    00001902: 	divsd	DATAat0x99b0(%rip), %xmm0
    0000190a: 	callq	_Z13record_resultdPKc # Offset: 6410
    0000190f: 	callq	clock@PLT # Offset: 6415
    00001914: 	movl	iterations(%rip), %esi
    0000191a: 	movl	init_value(%rip), %edx
    00001920: 	movd	%r12d, %xmm1
    00001925: 	movq	%rax, start_time(%rip)
    0000192c: 	movl	%r12d, %eax
    0000192f: 	negl	%eax
    00001931: 	movl	%eax, %ecx
    00001933: 	andl	$0x3f, %ecx
    00001936: 	movq	%rcx, %xmm4
    0000193b: 	testl	%esi, %esi
    0000193d: 	jle	.Ltmp75 # Offset: 6461
    00001943: 	nopl	(%rax,%rax) # Size: 5
.Ltmp78:
    00001948: 	leaq	data64unsigned(%rip), %rax
    0000194f: 	pxor	%xmm3, %xmm3
    00001953: 	nopl	(%rax,%rax) # Size: 5
.Ltmp76:
    00001958: 	movdqa	(%rax), %xmm0
    0000195c: 	addq	$0x10, %rax
    00001960: 	movdqa	%xmm0, %xmm2
    00001964: 	psrlq	%xmm1, %xmm0
    00001968: 	psllq	%xmm4, %xmm2
    0000196c: 	por	%xmm2, %xmm0
    00001970: 	paddq	%xmm0, %xmm3
    00001974: 	cmpq	%rax, %rbx
    00001977: 	jne	.Ltmp76 # Offset: 6519
    00001979: 	movq	%rdx, %rdi
    0000197c: 	movl	%r12d, %ecx
    0000197f: 	movdqa	%xmm3, %xmm0
    00001983: 	rorq	%cl, %rdi
    00001986: 	psrldq	$0x8, %xmm0
    0000198b: 	imulq	$0x1f40, %rdi, %rdi
    00001992: 	paddq	%xmm0, %xmm3
    00001996: 	movq	%xmm3, %rax
    0000199b: 	cmpq	%rax, %rdi
    0000199e: 	je	.Ltmp77 # Offset: 6558
    000019a0: 	movl	current_test(%rip), %edx
    000019a6: 	movq	%r14, %rsi
    000019a9: 	movl	$0x1, %edi
    000019ae: 	xorl	%eax, %eax
    000019b0: 	movq	%xmm4, 0x18(%rsp)
    000019b6: 	addl	$0x1, %r15d
    000019ba: 	movq	%xmm1, (%rsp)
    000019bf: 	callq	__printf_chk@PLT # Offset: 6591
    000019c4: 	movl	iterations(%rip), %esi
    000019ca: 	cmpl	%esi, %r15d
    000019cd: 	jge	.Ltmp75 # Offset: 6605
    000019cf: 	movl	init_value(%rip), %edx
    000019d5: 	movq	(%rsp), %xmm1
    000019da: 	movq	0x18(%rsp), %xmm4
    000019e0: 	jmp	.Ltmp78 # Offset: 6624
    000019e5: 	nopl	(%rax) # Size: 3
.Ltmp77:
    000019e8: 	addl	$0x1, %r15d
    000019ec: 	cmpl	%esi, %r15d
    000019ef: 	jl	.Ltmp78 # Offset: 6639
.Ltmp75:
    000019f5: 	callq	clock@PLT # Offset: 6645
    000019fa: 	leaq	DATAat0x9598(%rip), %rdi
    00001a01: 	pxor	%xmm0, %xmm0
    00001a05: 	movq	%rax, end_time(%rip)
    00001a0c: 	subq	start_time(%rip), %rax
    00001a13: 	cvtsi2sd	%rax, %xmm0
    00001a18: 	divsd	DATAat0x99b0(%rip), %xmm0
    00001a20: 	callq	_Z13record_resultdPKc # Offset: 6688
    00001a25: 	leaq	DATAat0x95b8(%rip), %rcx
    00001a2c: 	movl	%r12d, %edx
    00001a2f: 	movl	$0x1f40, %esi
    00001a34: 	leaq	data64unsigned(%rip), %rdi
    00001a3b: 	callq	_Z19test_variable_shiftIm22rotate_right_variable3ImEEvPT_iiPKc # Offset: 6715
    00001a40: 	leaq	DATAat0x95d8(%rip), %rcx
    00001a47: 	movl	%r12d, %edx
    00001a4a: 	movl	$0x1f40, %esi
    00001a4f: 	leaq	data64unsigned(%rip), %rdi
    00001a56: 	callq	_Z19test_variable_shiftIm22rotate_right_variable4ImEEvPT_iiPKc # Offset: 6742
    00001a5b: 	movl	iterations(%rip), %edx
    00001a61: 	xorl	%r8d, %r8d
    00001a64: 	xorl	%ecx, %ecx
    00001a66: 	movl	$0x1f40, %esi
    00001a6b: 	leaq	DATAat0x9891(%rip), %rdi
    00001a72: 	callq	_Z9summarizePKciiii # Offset: 6770
    00001a77: 	callq	clock@PLT # Offset: 6775
    00001a7c: 	movl	iterations(%rip), %esi
    00001a82: 	movq	%rax, start_time(%rip)
    00001a89: 	testl	%esi, %esi
    00001a8b: 	jle	.Ltmp79 # Offset: 6795
    00001a91: 	movl	%r12d, %edx
    00001a94: 	movl	init_value(%rip), %eax
    00001a9a: 	movzbl	%r12b, %ecx
    00001a9e: 	xorl	%r15d, %r15d
    00001aa1: 	negl	%edx
    00001aa3: 	leaq	data16unsigned(%rip), %r14
    00001aaa: 	movd	%r12d, %xmm1
    00001aaf: 	movdqa	DATAat0x9a00(%rip), %xmm0
    00001ab7: 	movl	%edx, %edi
    00001ab9: 	pxor	%xmm6, %xmm6
    00001abd: 	andl	$0x7, %edi
    00001ac0: 	movq	%rdi, %xmm7
    00001ac5: 	nopl	(%rax) # Size: 3
.Ltmp82:
    00001ac8: 	leaq	data8unsigned(%rip), %rdx
    00001acf: 	pxor	%xmm5, %xmm5
    00001ad3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp80:
    00001ad8: 	movdqa	(%rdx), %xmm2
    00001adc: 	addq	$0x10, %rdx
    00001ae0: 	movdqa	%xmm2, %xmm3
    00001ae4: 	punpckhbw	%xmm6, %xmm2
    00001ae8: 	punpcklbw	%xmm6, %xmm3
    00001aec: 	movdqa	%xmm2, %xmm8
    00001af1: 	psrlw	%xmm7, %xmm8
    00001af6: 	psllw	%xmm1, %xmm2
    00001afa: 	movdqa	%xmm3, %xmm4
    00001afe: 	psrlw	%xmm7, %xmm4
    00001b02: 	psllw	%xmm1, %xmm3
    00001b06: 	pand	%xmm0, %xmm8
    00001b0b: 	pand	%xmm0, %xmm2
    00001b0f: 	pand	%xmm0, %xmm4
    00001b13: 	pand	%xmm0, %xmm3
    00001b17: 	packuswb	%xmm8, %xmm4
    00001b1c: 	packuswb	%xmm2, %xmm3
    00001b20: 	por	%xmm3, %xmm4
    00001b24: 	paddb	%xmm4, %xmm5
    00001b28: 	cmpq	%rdx, %r14
    00001b2b: 	jne	.Ltmp80 # Offset: 6955
    00001b2d: 	movdqa	%xmm5, %xmm2
    00001b31: 	movl	%eax, %edi
    00001b33: 	psrldq	$0x8, %xmm2
    00001b38: 	rolb	%cl, %dil
    00001b3b: 	paddb	%xmm2, %xmm5
    00001b3f: 	shll	$0x6, %edi
    00001b42: 	psadbw	%xmm6, %xmm5
    00001b46: 	movd	%xmm5, %edx
    00001b4a: 	cmpb	%dl, %dil
    00001b4d: 	je	.Ltmp81 # Offset: 6989
    00001b4f: 	movl	current_test(%rip), %edx
    00001b55: 	xorl	%eax, %eax
    00001b57: 	movl	%ecx, 0x18(%rsp)
    00001b5b: 	addl	$0x1, %r15d
    00001b5f: 	leaq	DATAat0x998d(%rip), %rsi
    00001b66: 	movl	$0x1, %edi
    00001b6b: 	movaps	%xmm0, (%rsp)
    00001b6f: 	movq	%xmm7, 0x28(%rsp)
    00001b75: 	movq	%xmm1, 0x20(%rsp)
    00001b7b: 	callq	__printf_chk@PLT # Offset: 7035
    00001b80: 	movl	iterations(%rip), %esi
    00001b86: 	cmpl	%esi, %r15d
    00001b89: 	jge	.Ltmp79 # Offset: 7049
    00001b8b: 	movl	init_value(%rip), %eax
    00001b91: 	movdqa	(%rsp), %xmm0
    00001b96: 	pxor	%xmm6, %xmm6
    00001b9a: 	movl	0x18(%rsp), %ecx
    00001b9e: 	movq	0x20(%rsp), %xmm1
    00001ba4: 	movq	0x28(%rsp), %xmm7
    00001baa: 	jmp	.Ltmp82 # Offset: 7082
    00001baf: 	nop # Size: 1
.Ltmp81:
    00001bb0: 	addl	$0x1, %r15d
    00001bb4: 	cmpl	%esi, %r15d
    00001bb7: 	jl	.Ltmp82 # Offset: 7095
.Ltmp79:
    00001bbd: 	callq	clock@PLT # Offset: 7101
    00001bc2: 	leaq	DATAat0x98a7(%rip), %rdi
    00001bc9: 	pxor	%xmm0, %xmm0
    00001bcd: 	movq	%rax, end_time(%rip)
    00001bd4: 	subq	start_time(%rip), %rax
    00001bdb: 	cvtsi2sd	%rax, %xmm0
    00001be0: 	divsd	DATAat0x99b0(%rip), %xmm0
    00001be8: 	callq	_Z13record_resultdPKc # Offset: 7144
    00001bed: 	callq	clock@PLT # Offset: 7149
    00001bf2: 	movl	iterations(%rip), %esi
    00001bf8: 	movq	%rax, start_time(%rip)
    00001bff: 	testl	%esi, %esi
    00001c01: 	jle	.Ltmp83 # Offset: 7169
    00001c07: 	movl	%r12d, %edx
    00001c0a: 	movl	init_value(%rip), %eax
    00001c10: 	movzbl	%r12b, %ecx
    00001c14: 	xorl	%r15d, %r15d
    00001c17: 	negl	%edx
    00001c19: 	leaq	data16unsigned(%rip), %r14
    00001c20: 	movd	%r12d, %xmm1
    00001c25: 	movdqa	DATAat0x9a00(%rip), %xmm0
    00001c2d: 	movl	%edx, %edi
    00001c2f: 	pxor	%xmm6, %xmm6
    00001c33: 	andl	$0x7, %edi
    00001c36: 	movq	%rdi, %xmm7
    00001c3b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp86:
    00001c40: 	leaq	data8unsigned(%rip), %rdx
    00001c47: 	pxor	%xmm5, %xmm5
    00001c4b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp84:
    00001c50: 	movdqa	(%rdx), %xmm2
    00001c54: 	addq	$0x10, %rdx
    00001c58: 	movdqa	%xmm2, %xmm3
    00001c5c: 	punpckhbw	%xmm6, %xmm2
    00001c60: 	punpcklbw	%xmm6, %xmm3
    00001c64: 	movdqa	%xmm2, %xmm8
    00001c69: 	psrlw	%xmm7, %xmm8
    00001c6e: 	psllw	%xmm1, %xmm2
    00001c72: 	movdqa	%xmm3, %xmm4
    00001c76: 	psrlw	%xmm7, %xmm4
    00001c7a: 	psllw	%xmm1, %xmm3
    00001c7e: 	pand	%xmm0, %xmm8
    00001c83: 	pand	%xmm0, %xmm2
    00001c87: 	pand	%xmm0, %xmm4
    00001c8b: 	pand	%xmm0, %xmm3
    00001c8f: 	packuswb	%xmm8, %xmm4
    00001c94: 	packuswb	%xmm2, %xmm3
    00001c98: 	por	%xmm3, %xmm4
    00001c9c: 	paddb	%xmm4, %xmm5
    00001ca0: 	cmpq	%r14, %rdx
    00001ca3: 	jne	.Ltmp84 # Offset: 7331
    00001ca5: 	movdqa	%xmm5, %xmm2
    00001ca9: 	movl	%eax, %edi
    00001cab: 	psrldq	$0x8, %xmm2
    00001cb0: 	rolb	%cl, %dil
    00001cb3: 	paddb	%xmm2, %xmm5
    00001cb7: 	shll	$0x6, %edi
    00001cba: 	psadbw	%xmm6, %xmm5
    00001cbe: 	movd	%xmm5, %edx
    00001cc2: 	cmpb	%dl, %dil
    00001cc5: 	je	.Ltmp85 # Offset: 7365
    00001cc7: 	movl	current_test(%rip), %edx
    00001ccd: 	xorl	%eax, %eax
    00001ccf: 	movl	%ecx, 0x18(%rsp)
    00001cd3: 	addl	$0x1, %r15d
    00001cd7: 	leaq	DATAat0x998d(%rip), %rsi
    00001cde: 	movl	$0x1, %edi
    00001ce3: 	movaps	%xmm0, (%rsp)
    00001ce7: 	movq	%xmm7, 0x28(%rsp)
    00001ced: 	movq	%xmm1, 0x20(%rsp)
    00001cf3: 	callq	__printf_chk@PLT # Offset: 7411
    00001cf8: 	movl	iterations(%rip), %esi
    00001cfe: 	cmpl	%esi, %r15d
    00001d01: 	jge	.Ltmp83 # Offset: 7425
    00001d03: 	movl	init_value(%rip), %eax
    00001d09: 	movdqa	(%rsp), %xmm0
    00001d0e: 	pxor	%xmm6, %xmm6
    00001d12: 	movl	0x18(%rsp), %ecx
    00001d16: 	movq	0x20(%rsp), %xmm1
    00001d1c: 	movq	0x28(%rsp), %xmm7
    00001d22: 	jmp	.Ltmp86 # Offset: 7458
    00001d27: 	nopw	(%rax,%rax) # Size: 9
.Ltmp85:
    00001d30: 	addl	$0x1, %r15d
    00001d34: 	cmpl	%esi, %r15d
    00001d37: 	jl	.Ltmp86 # Offset: 7479
.Ltmp83:
    00001d3d: 	callq	clock@PLT # Offset: 7485
    00001d42: 	leaq	DATAat0x98c4(%rip), %rdi
    00001d49: 	pxor	%xmm0, %xmm0
    00001d4d: 	movq	%rax, end_time(%rip)
    00001d54: 	subq	start_time(%rip), %rax
    00001d5b: 	cvtsi2sd	%rax, %xmm0
    00001d60: 	divsd	DATAat0x99b0(%rip), %xmm0
    00001d68: 	callq	_Z13record_resultdPKc # Offset: 7528
    00001d6d: 	callq	clock@PLT # Offset: 7533
    00001d72: 	movl	iterations(%rip), %edi
    00001d78: 	movq	%rax, start_time(%rip)
    00001d7f: 	testl	%edi, %edi
    00001d81: 	jle	.Ltmp87 # Offset: 7553
    00001d87: 	movl	$0x8, %ecx
    00001d8c: 	movzbl	%r12b, %eax
    00001d90: 	xorl	%r15d, %r15d
    00001d93: 	movdqa	DATAat0x9a00(%rip), %xmm0
    00001d9b: 	movl	%ecx, %edx
    00001d9d: 	subl	%eax, %ecx
    00001d9f: 	movl	init_value(%rip), %eax
    00001da5: 	leaq	data16unsigned(%rip), %r14
    00001dac: 	subl	%r12d, %edx
    00001daf: 	movslq	%edx, %rsi
    00001db2: 	movq	%rsi, %xmm5
    00001db7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp90:
    00001dc0: 	pxor	%xmm6, %xmm6
    00001dc4: 	leaq	data8unsigned(%rip), %rdx
    00001dcb: 	pxor	%xmm4, %xmm4
    00001dcf: 	movdqa	%xmm6, %xmm7
    00001dd3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp88:
    00001dd8: 	movdqa	(%rdx), %xmm3
    00001ddc: 	addq	$0x10, %rdx
    00001de0: 	movdqa	%xmm3, %xmm2
    00001de4: 	punpckhbw	%xmm7, %xmm3
    00001de8: 	punpcklbw	%xmm7, %xmm2
    00001dec: 	movdqa	%xmm2, %xmm1
    00001df0: 	punpckhwd	%xmm4, %xmm2
    00001df4: 	punpcklwd	%xmm4, %xmm1
    00001df8: 	psrad	%xmm5, %xmm2
    00001dfc: 	psrad	%xmm5, %xmm1
    00001e00: 	movdqa	%xmm1, %xmm8
    00001e05: 	punpcklwd	%xmm2, %xmm1
    00001e09: 	punpckhwd	%xmm2, %xmm8
    00001e0e: 	movdqa	%xmm1, %xmm2
    00001e12: 	punpckhwd	%xmm8, %xmm2
    00001e17: 	punpcklwd	%xmm8, %xmm1
    00001e1c: 	punpcklwd	%xmm2, %xmm1
    00001e20: 	movdqa	%xmm3, %xmm2
    00001e24: 	punpckhwd	%xmm4, %xmm3
    00001e28: 	punpcklwd	%xmm4, %xmm2
    00001e2c: 	psrad	%xmm5, %xmm3
    00001e30: 	pand	%xmm0, %xmm1
    00001e34: 	psrad	%xmm5, %xmm2
    00001e38: 	movdqa	%xmm2, %xmm8
    00001e3d: 	punpcklwd	%xmm3, %xmm2
    00001e41: 	punpckhwd	%xmm3, %xmm8
    00001e46: 	movdqa	%xmm2, %xmm3
    00001e4a: 	punpckhwd	%xmm8, %xmm3
    00001e4f: 	punpcklwd	%xmm8, %xmm2
    00001e54: 	punpcklwd	%xmm3, %xmm2
    00001e58: 	pand	%xmm0, %xmm2
    00001e5c: 	packuswb	%xmm2, %xmm1
    00001e60: 	paddb	%xmm1, %xmm6
    00001e64: 	cmpq	%r14, %rdx
    00001e67: 	jne	.Ltmp88 # Offset: 7783
    00001e6d: 	movdqa	%xmm6, %xmm1
    00001e71: 	movzbl	%al, %edx
    00001e74: 	psrldq	$0x8, %xmm1
    00001e79: 	sarl	%cl, %edx
    00001e7b: 	paddb	%xmm1, %xmm6
    00001e7f: 	shll	$0x6, %edx
    00001e82: 	psadbw	%xmm7, %xmm6
    00001e86: 	movd	%xmm6, %esi
    00001e8a: 	cmpb	%sil, %dl
    00001e8d: 	je	.Ltmp89 # Offset: 7821
    00001e8f: 	movl	current_test(%rip), %edx
    00001e95: 	xorl	%eax, %eax
    00001e97: 	movl	%ecx, 0x18(%rsp)
    00001e9b: 	addl	$0x1, %r15d
    00001e9f: 	movl	$0x1, %edi
    00001ea4: 	leaq	DATAat0x998d(%rip), %rsi
    00001eab: 	movq	%xmm5, 0x20(%rsp)
    00001eb1: 	movaps	%xmm0, (%rsp)
    00001eb5: 	callq	__printf_chk@PLT # Offset: 7861
    00001eba: 	movl	iterations(%rip), %edi
    00001ec0: 	cmpl	%edi, %r15d
    00001ec3: 	jge	.Ltmp87 # Offset: 7875
    00001ec5: 	movl	init_value(%rip), %eax
    00001ecb: 	movdqa	(%rsp), %xmm0
    00001ed0: 	movl	0x18(%rsp), %ecx
    00001ed4: 	movq	0x20(%rsp), %xmm5
    00001eda: 	jmp	.Ltmp90 # Offset: 7898
    00001edf: 	nop # Size: 1
.Ltmp89:
    00001ee0: 	addl	$0x1, %r15d
    00001ee4: 	cmpl	%edi, %r15d
    00001ee7: 	jl	.Ltmp90 # Offset: 7911
.Ltmp87:
    00001eed: 	callq	clock@PLT # Offset: 7917
    00001ef2: 	leaq	DATAat0x98e2(%rip), %rdi
    00001ef9: 	pxor	%xmm0, %xmm0
    00001efd: 	movq	%rax, end_time(%rip)
    00001f04: 	subq	start_time(%rip), %rax
    00001f0b: 	cvtsi2sd	%rax, %xmm0
    00001f10: 	divsd	DATAat0x99b0(%rip), %xmm0
    00001f18: 	callq	_Z13record_resultdPKc # Offset: 7960
    00001f1d: 	callq	clock@PLT # Offset: 7965
    00001f22: 	movl	iterations(%rip), %edi
    00001f28: 	movq	%rax, start_time(%rip)
    00001f2f: 	testl	%edi, %edi
    00001f31: 	jle	.Ltmp91 # Offset: 7985
    00001f37: 	movl	$0x8, %ecx
    00001f3c: 	movzbl	%r12b, %eax
    00001f40: 	xorl	%r15d, %r15d
    00001f43: 	movdqa	DATAat0x9a00(%rip), %xmm0
    00001f4b: 	movl	%ecx, %edx
    00001f4d: 	subl	%eax, %ecx
    00001f4f: 	movl	init_value(%rip), %eax
    00001f55: 	leaq	data16unsigned(%rip), %r14
    00001f5c: 	subl	%r12d, %edx
    00001f5f: 	movslq	%edx, %rsi
    00001f62: 	movq	%rsi, %xmm5
    00001f67: 	nopw	(%rax,%rax) # Size: 9
.Ltmp94:
    00001f70: 	pxor	%xmm6, %xmm6
    00001f74: 	leaq	data8unsigned(%rip), %rdx
    00001f7b: 	pxor	%xmm4, %xmm4
    00001f7f: 	movdqa	%xmm6, %xmm7
    00001f83: 	nopl	(%rax,%rax) # Size: 5
.Ltmp92:
    00001f88: 	movdqa	(%rdx), %xmm3
    00001f8c: 	addq	$0x10, %rdx
    00001f90: 	movdqa	%xmm3, %xmm2
    00001f94: 	punpckhbw	%xmm7, %xmm3
    00001f98: 	punpcklbw	%xmm7, %xmm2
    00001f9c: 	movdqa	%xmm2, %xmm1
    00001fa0: 	punpckhwd	%xmm4, %xmm2
    00001fa4: 	punpcklwd	%xmm4, %xmm1
    00001fa8: 	psrad	%xmm5, %xmm2
    00001fac: 	psrad	%xmm5, %xmm1
    00001fb0: 	movdqa	%xmm1, %xmm8
    00001fb5: 	punpcklwd	%xmm2, %xmm1
    00001fb9: 	punpckhwd	%xmm2, %xmm8
    00001fbe: 	movdqa	%xmm1, %xmm2
    00001fc2: 	punpckhwd	%xmm8, %xmm2
    00001fc7: 	punpcklwd	%xmm8, %xmm1
    00001fcc: 	punpcklwd	%xmm2, %xmm1
    00001fd0: 	movdqa	%xmm3, %xmm2
    00001fd4: 	punpckhwd	%xmm4, %xmm3
    00001fd8: 	punpcklwd	%xmm4, %xmm2
    00001fdc: 	psrad	%xmm5, %xmm3
    00001fe0: 	pand	%xmm0, %xmm1
    00001fe4: 	psrad	%xmm5, %xmm2
    00001fe8: 	movdqa	%xmm2, %xmm8
    00001fed: 	punpcklwd	%xmm3, %xmm2
    00001ff1: 	punpckhwd	%xmm3, %xmm8
    00001ff6: 	movdqa	%xmm2, %xmm3
    00001ffa: 	punpckhwd	%xmm8, %xmm3
    00001fff: 	punpcklwd	%xmm8, %xmm2
    00002004: 	punpcklwd	%xmm3, %xmm2
    00002008: 	pand	%xmm0, %xmm2
    0000200c: 	packuswb	%xmm2, %xmm1
    00002010: 	paddb	%xmm1, %xmm6
    00002014: 	cmpq	%r14, %rdx
    00002017: 	jne	.Ltmp92 # Offset: 8215
    0000201d: 	movdqa	%xmm6, %xmm1
    00002021: 	movzbl	%al, %edx
    00002024: 	psrldq	$0x8, %xmm1
    00002029: 	sarl	%cl, %edx
    0000202b: 	paddb	%xmm1, %xmm6
    0000202f: 	shll	$0x6, %edx
    00002032: 	psadbw	%xmm7, %xmm6
    00002036: 	movd	%xmm6, %esi
    0000203a: 	cmpb	%sil, %dl
    0000203d: 	je	.Ltmp93 # Offset: 8253
    0000203f: 	movl	current_test(%rip), %edx
    00002045: 	xorl	%eax, %eax
    00002047: 	movl	%ecx, 0x18(%rsp)
    0000204b: 	addl	$0x1, %r15d
    0000204f: 	movl	$0x1, %edi
    00002054: 	leaq	DATAat0x998d(%rip), %rsi
    0000205b: 	movq	%xmm5, 0x20(%rsp)
    00002061: 	movaps	%xmm0, (%rsp)
    00002065: 	callq	__printf_chk@PLT # Offset: 8293
    0000206a: 	movl	iterations(%rip), %edi
    00002070: 	cmpl	%edi, %r15d
    00002073: 	jge	.Ltmp91 # Offset: 8307
    00002075: 	movl	init_value(%rip), %eax
    0000207b: 	movdqa	(%rsp), %xmm0
    00002080: 	movl	0x18(%rsp), %ecx
    00002084: 	movq	0x20(%rsp), %xmm5
    0000208a: 	jmp	.Ltmp94 # Offset: 8330
    0000208f: 	nop # Size: 1
.Ltmp93:
    00002090: 	addl	$0x1, %r15d
    00002094: 	cmpl	%edi, %r15d
    00002097: 	jl	.Ltmp94 # Offset: 8343
.Ltmp91:
    0000209d: 	callq	clock@PLT # Offset: 8349
    000020a2: 	leaq	DATAat0x9900(%rip), %rdi
    000020a9: 	pxor	%xmm0, %xmm0
    000020ad: 	movq	%rax, end_time(%rip)
    000020b4: 	subq	start_time(%rip), %rax
    000020bb: 	cvtsi2sd	%rax, %xmm0
    000020c0: 	divsd	DATAat0x99b0(%rip), %xmm0
    000020c8: 	callq	_Z13record_resultdPKc # Offset: 8392
    000020cd: 	callq	clock@PLT # Offset: 8397
    000020d2: 	movl	iterations(%rip), %esi
    000020d8: 	movq	%rax, start_time(%rip)
    000020df: 	testl	%esi, %esi
    000020e1: 	jle	.Ltmp95 # Offset: 8417
    000020e7: 	movl	%r12d, %edx
    000020ea: 	movl	init_value(%rip), %eax
    000020f0: 	movzwl	%r12w, %ecx
    000020f4: 	xorl	%r15d, %r15d
    000020f7: 	negl	%edx
    000020f9: 	movd	%r12d, %xmm1
    000020fe: 	leaq	DATAat0x998d(%rip), %r14
    00002105: 	movl	%edx, %edi
    00002107: 	andl	$0xf, %edi
    0000210a: 	movq	%rdi, %xmm4
    0000210f: 	nop # Size: 1
.Ltmp98:
    00002110: 	leaq	data16unsigned(%rip), %rdx
    00002117: 	pxor	%xmm3, %xmm3
    0000211b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp96:
    00002120: 	movdqa	(%rdx), %xmm0
    00002124: 	addq	$0x10, %rdx
    00002128: 	movdqa	%xmm0, %xmm2
    0000212c: 	psllw	%xmm1, %xmm0
    00002130: 	psrlw	%xmm4, %xmm2
    00002134: 	por	%xmm2, %xmm0
    00002138: 	paddw	%xmm0, %xmm3
    0000213c: 	cmpq	%rdx, %r13
    0000213f: 	jne	.Ltmp96 # Offset: 8511
    00002141: 	movdqa	%xmm3, %xmm0
    00002145: 	movl	%eax, %edx
    00002147: 	psrldq	$0x8, %xmm0
    0000214c: 	rolw	%cl, %dx
    0000214f: 	imulw	$0x1f40, %dx, %dx
    00002154: 	paddw	%xmm0, %xmm3
    00002158: 	movdqa	%xmm3, %xmm0
    0000215c: 	psrldq	$0x4, %xmm0
    00002161: 	paddw	%xmm0, %xmm3
    00002165: 	movdqa	%xmm3, %xmm0
    00002169: 	psrldq	$0x2, %xmm0
    0000216e: 	paddw	%xmm0, %xmm3
    00002172: 	pextrw	$0x0, %xmm3, %edi
    00002177: 	cmpw	%di, %dx
    0000217a: 	je	.Ltmp97 # Offset: 8570
    0000217c: 	movl	current_test(%rip), %edx
    00002182: 	movq	%r14, %rsi
    00002185: 	movl	$0x1, %edi
    0000218a: 	xorl	%eax, %eax
    0000218c: 	movl	%ecx, (%rsp)
    0000218f: 	addl	$0x1, %r15d
    00002193: 	movq	%xmm4, 0x20(%rsp)
    00002199: 	movq	%xmm1, 0x18(%rsp)
    0000219f: 	callq	__printf_chk@PLT # Offset: 8607
    000021a4: 	movl	iterations(%rip), %esi
    000021aa: 	cmpl	%esi, %r15d
    000021ad: 	jge	.Ltmp95 # Offset: 8621
    000021af: 	movl	init_value(%rip), %eax
    000021b5: 	movl	(%rsp), %ecx
    000021b8: 	movq	0x18(%rsp), %xmm1
    000021be: 	movq	0x20(%rsp), %xmm4
    000021c4: 	jmp	.Ltmp98 # Offset: 8644
    000021c9: 	nopl	(%rax) # Size: 7
.Ltmp97:
    000021d0: 	addl	$0x1, %r15d
    000021d4: 	cmpl	%esi, %r15d
    000021d7: 	jl	.Ltmp98 # Offset: 8663
.Ltmp95:
    000021dd: 	callq	clock@PLT # Offset: 8669
    000021e2: 	leaq	DATAat0x991e(%rip), %rdi
    000021e9: 	pxor	%xmm0, %xmm0
    000021ed: 	movq	%rax, end_time(%rip)
    000021f4: 	subq	start_time(%rip), %rax
    000021fb: 	cvtsi2sd	%rax, %xmm0
    00002200: 	divsd	DATAat0x99b0(%rip), %xmm0
    00002208: 	callq	_Z13record_resultdPKc # Offset: 8712
    0000220d: 	callq	clock@PLT # Offset: 8717
    00002212: 	movl	iterations(%rip), %esi
    00002218: 	movq	%rax, start_time(%rip)
    0000221f: 	testl	%esi, %esi
    00002221: 	jle	.Ltmp99 # Offset: 8737
    00002227: 	movl	%r12d, %edx
    0000222a: 	movl	init_value(%rip), %eax
    00002230: 	movzwl	%r12w, %ecx
    00002234: 	xorl	%r15d, %r15d
    00002237: 	negl	%edx
    00002239: 	movd	%r12d, %xmm1
    0000223e: 	leaq	DATAat0x998d(%rip), %r14
    00002245: 	movl	%edx, %edi
    00002247: 	andl	$0xf, %edi
    0000224a: 	movq	%rdi, %xmm4
    0000224f: 	nop # Size: 1
.Ltmp102:
    00002250: 	leaq	data16unsigned(%rip), %rdx
    00002257: 	pxor	%xmm3, %xmm3
    0000225b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp100:
    00002260: 	movdqa	(%rdx), %xmm0
    00002264: 	addq	$0x10, %rdx
    00002268: 	movdqa	%xmm0, %xmm2
    0000226c: 	psllw	%xmm1, %xmm0
    00002270: 	psrlw	%xmm4, %xmm2
    00002274: 	por	%xmm2, %xmm0
    00002278: 	paddw	%xmm0, %xmm3
    0000227c: 	cmpq	%rdx, %r13
    0000227f: 	jne	.Ltmp100 # Offset: 8831
    00002281: 	movdqa	%xmm3, %xmm0
    00002285: 	movl	%eax, %edx
    00002287: 	psrldq	$0x8, %xmm0
    0000228c: 	rolw	%cl, %dx
    0000228f: 	imulw	$0x1f40, %dx, %dx
    00002294: 	paddw	%xmm0, %xmm3
    00002298: 	movdqa	%xmm3, %xmm0
    0000229c: 	psrldq	$0x4, %xmm0
    000022a1: 	paddw	%xmm0, %xmm3
    000022a5: 	movdqa	%xmm3, %xmm0
    000022a9: 	psrldq	$0x2, %xmm0
    000022ae: 	paddw	%xmm0, %xmm3
    000022b2: 	pextrw	$0x0, %xmm3, %edi
    000022b7: 	cmpw	%di, %dx
    000022ba: 	je	.Ltmp101 # Offset: 8890
    000022bc: 	movl	current_test(%rip), %edx
    000022c2: 	movq	%r14, %rsi
    000022c5: 	movl	$0x1, %edi
    000022ca: 	xorl	%eax, %eax
    000022cc: 	movl	%ecx, (%rsp)
    000022cf: 	addl	$0x1, %r15d
    000022d3: 	movq	%xmm4, 0x20(%rsp)
    000022d9: 	movq	%xmm1, 0x18(%rsp)
    000022df: 	callq	__printf_chk@PLT # Offset: 8927
    000022e4: 	movl	iterations(%rip), %esi
    000022ea: 	cmpl	%esi, %r15d
    000022ed: 	jge	.Ltmp99 # Offset: 8941
    000022ef: 	movl	init_value(%rip), %eax
    000022f5: 	movl	(%rsp), %ecx
    000022f8: 	movq	0x18(%rsp), %xmm1
    000022fe: 	movq	0x20(%rsp), %xmm4
    00002304: 	jmp	.Ltmp102 # Offset: 8964
    00002309: 	nopl	(%rax) # Size: 7
.Ltmp101:
    00002310: 	addl	$0x1, %r15d
    00002314: 	cmpl	%esi, %r15d
    00002317: 	jl	.Ltmp102 # Offset: 8983
.Ltmp99:
    0000231d: 	callq	clock@PLT # Offset: 8989
    00002322: 	leaq	DATAat0x95f8(%rip), %rdi
    00002329: 	pxor	%xmm0, %xmm0
    0000232d: 	movq	%rax, end_time(%rip)
    00002334: 	subq	start_time(%rip), %rax
    0000233b: 	cvtsi2sd	%rax, %xmm0
    00002340: 	divsd	DATAat0x99b0(%rip), %xmm0
    00002348: 	callq	_Z13record_resultdPKc # Offset: 9032
    0000234d: 	callq	clock@PLT # Offset: 9037
    00002352: 	movl	iterations(%rip), %esi
    00002358: 	movq	%rax, start_time(%rip)
    0000235f: 	testl	%esi, %esi
    00002361: 	jle	.Ltmp103 # Offset: 9057
    00002367: 	movl	$0x10, %ecx
    0000236c: 	movzwl	%r12w, %eax
    00002370: 	xorl	%r15d, %r15d
    00002373: 	movl	%ecx, %edx
    00002375: 	subl	%eax, %ecx
    00002377: 	movl	init_value(%rip), %eax
    0000237d: 	leaq	DATAat0x998d(%rip), %r14
    00002384: 	subl	%r12d, %edx
    00002387: 	movslq	%edx, %rdi
    0000238a: 	movq	%rdi, %xmm5
    0000238f: 	nop # Size: 1
.Ltmp106:
    00002390: 	pxor	%xmm2, %xmm2
    00002394: 	leaq	data16unsigned(%rip), %rdx
    0000239b: 	movdqa	%xmm2, %xmm4
    0000239f: 	nop # Size: 1
.Ltmp104:
    000023a0: 	movdqa	(%rdx), %xmm1
    000023a4: 	addq	$0x10, %rdx
    000023a8: 	movdqa	%xmm1, %xmm0
    000023ac: 	punpckhwd	%xmm4, %xmm1
    000023b0: 	punpcklwd	%xmm4, %xmm0
    000023b4: 	psrad	%xmm5, %xmm1
    000023b8: 	psrad	%xmm5, %xmm0
    000023bc: 	movdqa	%xmm0, %xmm3
    000023c0: 	punpcklwd	%xmm1, %xmm0
    000023c4: 	punpckhwd	%xmm1, %xmm3
    000023c8: 	movdqa	%xmm0, %xmm1
    000023cc: 	punpckhwd	%xmm3, %xmm1
    000023d0: 	punpcklwd	%xmm3, %xmm0
    000023d4: 	punpcklwd	%xmm1, %xmm0
    000023d8: 	paddw	%xmm0, %xmm2
    000023dc: 	cmpq	%rdx, %r13
    000023df: 	jne	.Ltmp104 # Offset: 9183
    000023e1: 	movdqa	%xmm2, %xmm0
    000023e5: 	movzwl	%ax, %edx
    000023e8: 	psrldq	$0x8, %xmm0
    000023ed: 	sarl	%cl, %edx
    000023ef: 	imulw	$0x1f40, %dx, %dx
    000023f4: 	paddw	%xmm0, %xmm2
    000023f8: 	movdqa	%xmm2, %xmm0
    000023fc: 	psrldq	$0x4, %xmm0
    00002401: 	paddw	%xmm0, %xmm2
    00002405: 	movdqa	%xmm2, %xmm0
    00002409: 	psrldq	$0x2, %xmm0
    0000240e: 	paddw	%xmm0, %xmm2
    00002412: 	pextrw	$0x0, %xmm2, %edi
    00002417: 	cmpw	%di, %dx
    0000241a: 	je	.Ltmp105 # Offset: 9242
    0000241c: 	movl	current_test(%rip), %edx
    00002422: 	movq	%r14, %rsi
    00002425: 	movl	$0x1, %edi
    0000242a: 	xorl	%eax, %eax
    0000242c: 	movl	%ecx, (%rsp)
    0000242f: 	addl	$0x1, %r15d
    00002433: 	movq	%xmm5, 0x18(%rsp)
    00002439: 	callq	__printf_chk@PLT # Offset: 9273
    0000243e: 	movl	iterations(%rip), %esi
    00002444: 	cmpl	%esi, %r15d
    00002447: 	jge	.Ltmp103 # Offset: 9287
    00002449: 	movl	init_value(%rip), %eax
    0000244f: 	movl	(%rsp), %ecx
    00002452: 	movq	0x18(%rsp), %xmm5
    00002458: 	jmp	.Ltmp106 # Offset: 9304
    0000245d: 	nopl	(%rax) # Size: 3
.Ltmp105:
    00002460: 	addl	$0x1, %r15d
    00002464: 	cmpl	%esi, %r15d
    00002467: 	jl	.Ltmp106 # Offset: 9319
.Ltmp103:
    0000246d: 	callq	clock@PLT # Offset: 9325
    00002472: 	leaq	DATAat0x9618(%rip), %rdi
    00002479: 	pxor	%xmm0, %xmm0
    0000247d: 	movq	%rax, end_time(%rip)
    00002484: 	subq	start_time(%rip), %rax
    0000248b: 	cvtsi2sd	%rax, %xmm0
    00002490: 	divsd	DATAat0x99b0(%rip), %xmm0
    00002498: 	callq	_Z13record_resultdPKc # Offset: 9368
    0000249d: 	callq	clock@PLT # Offset: 9373
    000024a2: 	movl	iterations(%rip), %esi
    000024a8: 	movq	%rax, start_time(%rip)
    000024af: 	testl	%esi, %esi
    000024b1: 	jle	.Ltmp107 # Offset: 9393
    000024b7: 	movl	$0x10, %ecx
    000024bc: 	movzwl	%r12w, %eax
    000024c0: 	xorl	%r15d, %r15d
    000024c3: 	movl	%ecx, %edx
    000024c5: 	subl	%eax, %ecx
    000024c7: 	movl	init_value(%rip), %eax
    000024cd: 	leaq	DATAat0x998d(%rip), %r14
    000024d4: 	subl	%r12d, %edx
    000024d7: 	movslq	%edx, %rdi
    000024da: 	movq	%rdi, %xmm5
    000024df: 	nop # Size: 1
.Ltmp110:
    000024e0: 	pxor	%xmm2, %xmm2
    000024e4: 	leaq	data16unsigned(%rip), %rdx
    000024eb: 	movdqa	%xmm2, %xmm4
    000024ef: 	nop # Size: 1
.Ltmp108:
    000024f0: 	movdqa	(%rdx), %xmm1
    000024f4: 	addq	$0x10, %rdx
    000024f8: 	movdqa	%xmm1, %xmm0
    000024fc: 	punpckhwd	%xmm4, %xmm1
    00002500: 	punpcklwd	%xmm4, %xmm0
    00002504: 	psrad	%xmm5, %xmm1
    00002508: 	psrad	%xmm5, %xmm0
    0000250c: 	movdqa	%xmm0, %xmm3
    00002510: 	punpcklwd	%xmm1, %xmm0
    00002514: 	punpckhwd	%xmm1, %xmm3
    00002518: 	movdqa	%xmm0, %xmm1
    0000251c: 	punpckhwd	%xmm3, %xmm1
    00002520: 	punpcklwd	%xmm3, %xmm0
    00002524: 	punpcklwd	%xmm1, %xmm0
    00002528: 	paddw	%xmm0, %xmm2
    0000252c: 	cmpq	%rdx, %r13
    0000252f: 	jne	.Ltmp108 # Offset: 9519
    00002531: 	movdqa	%xmm2, %xmm0
    00002535: 	movzwl	%ax, %edx
    00002538: 	psrldq	$0x8, %xmm0
    0000253d: 	sarl	%cl, %edx
    0000253f: 	imulw	$0x1f40, %dx, %dx
    00002544: 	paddw	%xmm0, %xmm2
    00002548: 	movdqa	%xmm2, %xmm0
    0000254c: 	psrldq	$0x4, %xmm0
    00002551: 	paddw	%xmm0, %xmm2
    00002555: 	movdqa	%xmm2, %xmm0
    00002559: 	psrldq	$0x2, %xmm0
    0000255e: 	paddw	%xmm0, %xmm2
    00002562: 	pextrw	$0x0, %xmm2, %edi
    00002567: 	cmpw	%di, %dx
    0000256a: 	je	.Ltmp109 # Offset: 9578
    0000256c: 	movl	current_test(%rip), %edx
    00002572: 	movq	%r14, %rsi
    00002575: 	movl	$0x1, %edi
    0000257a: 	xorl	%eax, %eax
    0000257c: 	movl	%ecx, (%rsp)
    0000257f: 	addl	$0x1, %r15d
    00002583: 	movq	%xmm5, 0x18(%rsp)
    00002589: 	callq	__printf_chk@PLT # Offset: 9609
    0000258e: 	movl	iterations(%rip), %esi
    00002594: 	cmpl	%esi, %r15d
    00002597: 	jge	.Ltmp107 # Offset: 9623
    00002599: 	movl	init_value(%rip), %eax
    0000259f: 	movl	(%rsp), %ecx
    000025a2: 	movq	0x18(%rsp), %xmm5
    000025a8: 	jmp	.Ltmp110 # Offset: 9640
    000025ad: 	nopl	(%rax) # Size: 3
.Ltmp109:
    000025b0: 	addl	$0x1, %r15d
    000025b4: 	cmpl	%esi, %r15d
    000025b7: 	jl	.Ltmp110 # Offset: 9655
.Ltmp107:
    000025bd: 	callq	clock@PLT # Offset: 9661
    000025c2: 	leaq	DATAat0x9638(%rip), %rdi
    000025c9: 	pxor	%xmm0, %xmm0
    000025cd: 	xorl	%r14d, %r14d
    000025d0: 	movq	%rax, end_time(%rip)
    000025d7: 	subq	start_time(%rip), %rax
    000025de: 	leaq	DATAat0x998d(%rip), %r13
    000025e5: 	cvtsi2sd	%rax, %xmm0
    000025ea: 	divsd	DATAat0x99b0(%rip), %xmm0
    000025f2: 	callq	_Z13record_resultdPKc # Offset: 9714
    000025f7: 	callq	clock@PLT # Offset: 9719
    000025fc: 	movl	%r12d, %edx
    000025ff: 	movl	iterations(%rip), %esi
    00002605: 	movd	%r12d, %xmm1
    0000260a: 	negl	%edx
    0000260c: 	movq	%rax, start_time(%rip)
    00002613: 	movl	init_value(%rip), %eax
    00002619: 	movl	%edx, %ecx
    0000261b: 	andl	$0x1f, %ecx
    0000261e: 	movq	%rcx, %xmm4
    00002623: 	testl	%esi, %esi
    00002625: 	jle	.Ltmp111 # Offset: 9765
    0000262b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp114:
    00002630: 	leaq	data32unsigned(%rip), %rdx
    00002637: 	pxor	%xmm3, %xmm3
    0000263b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp112:
    00002640: 	movdqa	(%rdx), %xmm0
    00002644: 	addq	$0x10, %rdx
    00002648: 	movdqa	%xmm0, %xmm2
    0000264c: 	pslld	%xmm1, %xmm0
    00002650: 	psrld	%xmm4, %xmm2
    00002654: 	por	%xmm2, %xmm0
    00002658: 	paddd	%xmm0, %xmm3
    0000265c: 	cmpq	%rbp, %rdx
    0000265f: 	jne	.Ltmp112 # Offset: 9823
    00002661: 	movdqa	%xmm3, %xmm0
    00002665: 	movl	%eax, %edi
    00002667: 	movl	%r12d, %ecx
    0000266a: 	psrldq	$0x8, %xmm0
    0000266f: 	roll	%cl, %edi
    00002671: 	imull	$0x1f40, %edi, %edi
    00002677: 	paddd	%xmm0, %xmm3
    0000267b: 	movdqa	%xmm3, %xmm0
    0000267f: 	psrldq	$0x4, %xmm0
    00002684: 	paddd	%xmm0, %xmm3
    00002688: 	movd	%xmm3, %edx
    0000268c: 	cmpl	%edx, %edi
    0000268e: 	je	.Ltmp113 # Offset: 9870
    00002690: 	movl	current_test(%rip), %edx
    00002696: 	movq	%r13, %rsi
    00002699: 	movl	$0x1, %edi
    0000269e: 	xorl	%eax, %eax
    000026a0: 	movq	%xmm4, 0x18(%rsp)
    000026a6: 	addl	$0x1, %r14d
    000026aa: 	movq	%xmm1, (%rsp)
    000026af: 	callq	__printf_chk@PLT # Offset: 9903
    000026b4: 	movl	iterations(%rip), %esi
    000026ba: 	cmpl	%esi, %r14d
    000026bd: 	jge	.Ltmp111 # Offset: 9917
    000026bf: 	movl	init_value(%rip), %eax
    000026c5: 	movq	(%rsp), %xmm1
    000026ca: 	movq	0x18(%rsp), %xmm4
    000026d0: 	jmp	.Ltmp114 # Offset: 9936
    000026d5: 	nopl	(%rax) # Size: 3
.Ltmp113:
    000026d8: 	addl	$0x1, %r14d
    000026dc: 	cmpl	%esi, %r14d
    000026df: 	jl	.Ltmp114 # Offset: 9951
.Ltmp111:
    000026e5: 	callq	clock@PLT # Offset: 9957
    000026ea: 	leaq	DATAat0x993c(%rip), %rdi
    000026f1: 	pxor	%xmm0, %xmm0
    000026f5: 	xorl	%r14d, %r14d
    000026f8: 	movq	%rax, end_time(%rip)
    000026ff: 	subq	start_time(%rip), %rax
    00002706: 	leaq	DATAat0x998d(%rip), %r13
    0000270d: 	cvtsi2sd	%rax, %xmm0
    00002712: 	divsd	DATAat0x99b0(%rip), %xmm0
    0000271a: 	callq	_Z13record_resultdPKc # Offset: 10010
    0000271f: 	callq	clock@PLT # Offset: 10015
    00002724: 	movl	%r12d, %edx
    00002727: 	movl	iterations(%rip), %esi
    0000272d: 	movd	%r12d, %xmm1
    00002732: 	negl	%edx
    00002734: 	movq	%rax, start_time(%rip)
    0000273b: 	movl	init_value(%rip), %eax
    00002741: 	movl	%edx, %ecx
    00002743: 	andl	$0x1f, %ecx
    00002746: 	movq	%rcx, %xmm4
    0000274b: 	testl	%esi, %esi
    0000274d: 	jle	.Ltmp115 # Offset: 10061
    00002753: 	nopl	(%rax,%rax) # Size: 5
.Ltmp118:
    00002758: 	leaq	data32unsigned(%rip), %rdx
    0000275f: 	pxor	%xmm3, %xmm3
    00002763: 	nopl	(%rax,%rax) # Size: 5
.Ltmp116:
    00002768: 	movdqa	(%rdx), %xmm0
    0000276c: 	addq	$0x10, %rdx
    00002770: 	movdqa	%xmm0, %xmm2
    00002774: 	pslld	%xmm1, %xmm0
    00002778: 	psrld	%xmm4, %xmm2
    0000277c: 	por	%xmm2, %xmm0
    00002780: 	paddd	%xmm0, %xmm3
    00002784: 	cmpq	%rdx, %rbp
    00002787: 	jne	.Ltmp116 # Offset: 10119
    00002789: 	movdqa	%xmm3, %xmm0
    0000278d: 	movl	%eax, %edi
    0000278f: 	movl	%r12d, %ecx
    00002792: 	psrldq	$0x8, %xmm0
    00002797: 	roll	%cl, %edi
    00002799: 	imull	$0x1f40, %edi, %edi
    0000279f: 	paddd	%xmm0, %xmm3
    000027a3: 	movdqa	%xmm3, %xmm0
    000027a7: 	psrldq	$0x4, %xmm0
    000027ac: 	paddd	%xmm0, %xmm3
    000027b0: 	movd	%xmm3, %edx
    000027b4: 	cmpl	%edx, %edi
    000027b6: 	je	.Ltmp117 # Offset: 10166
    000027b8: 	movl	current_test(%rip), %edx
    000027be: 	movq	%r13, %rsi
    000027c1: 	movl	$0x1, %edi
    000027c6: 	xorl	%eax, %eax
    000027c8: 	movq	%xmm1, 0x18(%rsp)
    000027ce: 	addl	$0x1, %r14d
    000027d2: 	movq	%xmm4, (%rsp)
    000027d7: 	callq	__printf_chk@PLT # Offset: 10199
    000027dc: 	movl	iterations(%rip), %esi
    000027e2: 	cmpl	%esi, %r14d
    000027e5: 	jge	.Ltmp115 # Offset: 10213
    000027e7: 	movl	init_value(%rip), %eax
    000027ed: 	movq	(%rsp), %xmm4
    000027f2: 	movq	0x18(%rsp), %xmm1
    000027f8: 	jmp	.Ltmp118 # Offset: 10232
    000027fd: 	nopl	(%rax) # Size: 3
.Ltmp117:
    00002800: 	addl	$0x1, %r14d
    00002804: 	cmpl	%esi, %r14d
    00002807: 	jl	.Ltmp118 # Offset: 10247
.Ltmp115:
    0000280d: 	callq	clock@PLT # Offset: 10253
    00002812: 	leaq	DATAat0x9658(%rip), %rdi
    00002819: 	pxor	%xmm0, %xmm0
    0000281d: 	xorl	%r13d, %r13d
    00002820: 	movq	%rax, end_time(%rip)
    00002827: 	subq	start_time(%rip), %rax
    0000282e: 	leaq	DATAat0x998d(%rip), %rbp
    00002835: 	cvtsi2sd	%rax, %xmm0
    0000283a: 	divsd	DATAat0x99b0(%rip), %xmm0
    00002842: 	callq	_Z13record_resultdPKc # Offset: 10306
    00002847: 	leaq	DATAat0x9678(%rip), %rcx
    0000284e: 	movl	%r12d, %edx
    00002851: 	movl	$0x1f40, %esi
    00002856: 	leaq	data32unsigned(%rip), %rdi
    0000285d: 	callq	_Z19test_variable_shiftIj21rotate_left_variable3IjEEvPT_iiPKc # Offset: 10333
    00002862: 	leaq	DATAat0x9698(%rip), %rcx
    00002869: 	movl	%r12d, %edx
    0000286c: 	movl	$0x1f40, %esi
    00002871: 	leaq	data32unsigned(%rip), %rdi
    00002878: 	callq	_Z19test_variable_shiftIj21rotate_left_variable4IjEEvPT_iiPKc # Offset: 10360
    0000287d: 	callq	clock@PLT # Offset: 10365
    00002882: 	movl	iterations(%rip), %esi
    00002888: 	movl	init_value(%rip), %edx
    0000288e: 	movd	%r12d, %xmm1
    00002893: 	movq	%rax, start_time(%rip)
    0000289a: 	movl	%r12d, %eax
    0000289d: 	negl	%eax
    0000289f: 	movl	%eax, %ecx
    000028a1: 	andl	$0x3f, %ecx
    000028a4: 	movq	%rcx, %xmm4
    000028a9: 	testl	%esi, %esi
    000028ab: 	jle	.Ltmp119 # Offset: 10411
    000028b1: 	nopl	(%rax) # Size: 7
.Ltmp122:
    000028b8: 	leaq	data64unsigned(%rip), %rax
    000028bf: 	pxor	%xmm3, %xmm3
    000028c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp120:
    000028c8: 	movdqa	(%rax), %xmm0
    000028cc: 	addq	$0x10, %rax
    000028d0: 	movdqa	%xmm0, %xmm2
    000028d4: 	psllq	%xmm1, %xmm0
    000028d8: 	psrlq	%xmm4, %xmm2
    000028dc: 	por	%xmm2, %xmm0
    000028e0: 	paddq	%xmm0, %xmm3
    000028e4: 	cmpq	%rax, %rbx
    000028e7: 	jne	.Ltmp120 # Offset: 10471
    000028e9: 	movq	%rdx, %rdi
    000028ec: 	movl	%r12d, %ecx
    000028ef: 	movdqa	%xmm3, %xmm0
    000028f3: 	rolq	%cl, %rdi
    000028f6: 	psrldq	$0x8, %xmm0
    000028fb: 	imulq	$0x1f40, %rdi, %rdi
    00002902: 	paddq	%xmm0, %xmm3
    00002906: 	movq	%xmm3, %rax
    0000290b: 	cmpq	%rax, %rdi
    0000290e: 	je	.Ltmp121 # Offset: 10510
    00002910: 	movl	current_test(%rip), %edx
    00002916: 	movq	%rbp, %rsi
    00002919: 	movl	$0x1, %edi
    0000291e: 	xorl	%eax, %eax
    00002920: 	movq	%xmm4, 0x18(%rsp)
    00002926: 	addl	$0x1, %r13d
    0000292a: 	movq	%xmm1, (%rsp)
    0000292f: 	callq	__printf_chk@PLT # Offset: 10543
    00002934: 	movl	iterations(%rip), %esi
    0000293a: 	cmpl	%esi, %r13d
    0000293d: 	jge	.Ltmp119 # Offset: 10557
    0000293f: 	movl	init_value(%rip), %edx
    00002945: 	movq	(%rsp), %xmm1
    0000294a: 	movq	0x18(%rsp), %xmm4
    00002950: 	jmp	.Ltmp122 # Offset: 10576
    00002955: 	nopl	(%rax) # Size: 3
.Ltmp121:
    00002958: 	addl	$0x1, %r13d
    0000295c: 	cmpl	%esi, %r13d
    0000295f: 	jl	.Ltmp122 # Offset: 10591
.Ltmp119:
    00002965: 	callq	clock@PLT # Offset: 10597
    0000296a: 	leaq	DATAat0x995a(%rip), %rdi
    00002971: 	pxor	%xmm0, %xmm0
    00002975: 	xorl	%r13d, %r13d
    00002978: 	movq	%rax, end_time(%rip)
    0000297f: 	subq	start_time(%rip), %rax
    00002986: 	leaq	DATAat0x998d(%rip), %rbp
    0000298d: 	cvtsi2sd	%rax, %xmm0
    00002992: 	divsd	DATAat0x99b0(%rip), %xmm0
    0000299a: 	callq	_Z13record_resultdPKc # Offset: 10650
    0000299f: 	callq	clock@PLT # Offset: 10655
    000029a4: 	movl	iterations(%rip), %esi
    000029aa: 	movl	init_value(%rip), %edx
    000029b0: 	movd	%r12d, %xmm1
    000029b5: 	movq	%rax, start_time(%rip)
    000029bc: 	movl	%r12d, %eax
    000029bf: 	negl	%eax
    000029c1: 	movl	%eax, %ecx
    000029c3: 	andl	$0x3f, %ecx
    000029c6: 	movq	%rcx, %xmm4
    000029cb: 	testl	%esi, %esi
    000029cd: 	jle	.Ltmp123 # Offset: 10701
    000029d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp126:
    000029d8: 	leaq	data64unsigned(%rip), %rax
    000029df: 	pxor	%xmm3, %xmm3
    000029e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp124:
    000029e8: 	movdqa	(%rax), %xmm0
    000029ec: 	addq	$0x10, %rax
    000029f0: 	movdqa	%xmm0, %xmm2
    000029f4: 	psllq	%xmm1, %xmm0
    000029f8: 	psrlq	%xmm4, %xmm2
    000029fc: 	por	%xmm2, %xmm0
    00002a00: 	paddq	%xmm0, %xmm3
    00002a04: 	cmpq	%rax, %rbx
    00002a07: 	jne	.Ltmp124 # Offset: 10759
    00002a09: 	movq	%rdx, %rdi
    00002a0c: 	movl	%r12d, %ecx
    00002a0f: 	movdqa	%xmm3, %xmm0
    00002a13: 	rolq	%cl, %rdi
    00002a16: 	psrldq	$0x8, %xmm0
    00002a1b: 	imulq	$0x1f40, %rdi, %rdi
    00002a22: 	paddq	%xmm0, %xmm3
    00002a26: 	movq	%xmm3, %rax
    00002a2b: 	cmpq	%rax, %rdi
    00002a2e: 	je	.Ltmp125 # Offset: 10798
    00002a30: 	movl	current_test(%rip), %edx
    00002a36: 	movq	%rbp, %rsi
    00002a39: 	movl	$0x1, %edi
    00002a3e: 	xorl	%eax, %eax
    00002a40: 	movq	%xmm4, 0x18(%rsp)
    00002a46: 	addl	$0x1, %r13d
    00002a4a: 	movq	%xmm1, (%rsp)
    00002a4f: 	callq	__printf_chk@PLT # Offset: 10831
    00002a54: 	movl	iterations(%rip), %esi
    00002a5a: 	cmpl	%esi, %r13d
    00002a5d: 	jge	.Ltmp123 # Offset: 10845
    00002a5f: 	movl	init_value(%rip), %edx
    00002a65: 	movq	(%rsp), %xmm1
    00002a6a: 	movq	0x18(%rsp), %xmm4
    00002a70: 	jmp	.Ltmp126 # Offset: 10864
    00002a75: 	nopl	(%rax) # Size: 3
.Ltmp125:
    00002a78: 	addl	$0x1, %r13d
    00002a7c: 	cmpl	%esi, %r13d
    00002a7f: 	jl	.Ltmp126 # Offset: 10879
.Ltmp123:
    00002a85: 	callq	clock@PLT # Offset: 10885
    00002a8a: 	leaq	DATAat0x96b8(%rip), %rdi
    00002a91: 	pxor	%xmm0, %xmm0
    00002a95: 	movq	%rax, end_time(%rip)
    00002a9c: 	subq	start_time(%rip), %rax
    00002aa3: 	cvtsi2sd	%rax, %xmm0
    00002aa8: 	divsd	DATAat0x99b0(%rip), %xmm0
    00002ab0: 	callq	_Z13record_resultdPKc # Offset: 10928
    00002ab5: 	movl	%r12d, %edx
    00002ab8: 	leaq	DATAat0x96d8(%rip), %rcx
    00002abf: 	movl	$0x1f40, %esi
    00002ac4: 	leaq	data64unsigned(%rip), %rdi
    00002acb: 	callq	_Z19test_variable_shiftIm21rotate_left_variable3ImEEvPT_iiPKc # Offset: 10955
    00002ad0: 	movl	%r12d, %edx
    00002ad3: 	leaq	DATAat0x96f8(%rip), %rcx
    00002ada: 	movl	$0x1f40, %esi
    00002adf: 	leaq	data64unsigned(%rip), %rdi
    00002ae6: 	callq	_Z19test_variable_shiftIm21rotate_left_variable4ImEEvPT_iiPKc # Offset: 10982
    00002aeb: 	movl	iterations(%rip), %edx
    00002af1: 	xorl	%r8d, %r8d
    00002af4: 	xorl	%ecx, %ecx
    00002af6: 	movl	$0x1f40, %esi
    00002afb: 	leaq	DATAat0x9978(%rip), %rdi
    00002b02: 	callq	_Z9summarizePKciiii # Offset: 11010
    00002b07: 	addq	$0x38, %rsp
    00002b0b: 	xorl	%eax, %eax
    00002b0d: 	popq	%rbx
    00002b0e: 	popq	%rbp
    00002b0f: 	popq	%r12
    00002b11: 	popq	%r13
    00002b13: 	popq	%r14
    00002b15: 	popq	%r15
    00002b17: 	retq # Offset: 11031
.Ltmp3:
    00002b18: 	movq	0x8(%r14), %rdi
    00002b1c: 	movl	$0xa, %edx
    00002b21: 	xorl	%esi, %esi
    00002b23: 	callq	strtol@PLT # Offset: 11043
    00002b28: 	movl	%eax, iterations(%rip)
    00002b2e: 	cmpl	$0x2, %r13d
    00002b32: 	jle	.Ltmp127 # Offset: 11058
    00002b38: 	movq	0x10(%r14), %rdi
    00002b3c: 	movl	$0xa, %edx
    00002b41: 	xorl	%esi, %esi
    00002b43: 	callq	strtol@PLT # Offset: 11075
    00002b48: 	movl	%eax, init_value(%rip)
    00002b4e: 	cmpl	$0x3, %r13d
    00002b52: 	jle	.Ltmp127 # Offset: 11090
    00002b58: 	movq	0x18(%r14), %rdi
    00002b5c: 	movl	$0xa, %edx
    00002b61: 	xorl	%esi, %esi
    00002b63: 	callq	strtol@PLT # Offset: 11107
    00002b68: 	movl	%eax, %r12d
    00002b6b: 	jmp	.Ltmp128 # Offset: 11115
.Ltmp1:
    00002b70: 	leaq	DATAat0x973b(%rip), %rsi
    00002b77: 	movl	$0x1, %edi
    00002b7c: 	xorl	%eax, %eax
    00002b7e: 	callq	__printf_chk@PLT # Offset: 11134
    00002b83: 	jmp	.Ltmp127 # Offset: 11139
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 3
  State       : disassembled
  Address     : 0x3cf0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x3cf0
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB02:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0xbfd8(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 4
  State       : disassembled
  Address     : 0x3d20
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x3d20
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB03:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp129 # Offset: 17
    00000013: 	movq	DATAat0xbfe0(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp129 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp129:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 5
  State       : disassembled
  Address     : 0x3d50
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x3d50
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp130 # Offset: 34
    00000024: 	movq	DATAat0xbff0(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp130 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp130:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x3d90
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x3d90
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp131 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp132 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp132:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp131:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x3dd0
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x3dd0
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 8
  State       : disassembled
  Address     : 0x3de0
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x3de0
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp133 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp134 # Offset: 38
.Ltmp133:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp135 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp134:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp135:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x9008(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 9
  State       : disassembled
  Address     : 0x3e80
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x3e80
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp136 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp137 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp138:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp138 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp151:
    00000069: 	leaq	DATAat0x9757(%rip), %rbp
    00000070: 	leaq	DATAat0x9028(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x9068(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp139 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x99b8(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x9098(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x99b0(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp140 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp144:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp141 # Offset: 244
    000000fa: 	movq	DATAat0x99a0(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp145:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x99a0(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp142 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp142:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x973c(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x99b8(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp143 # Offset: 398
.Ltmp140:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp144 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp145 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp141:
    000001c8: 	movq	DATAat0x99a8(%rip), %rsi
    000001cf: 	movq	DATAat0x99a0(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp142 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp143:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp139 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp146 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp147:
    00000210: 	addq	$0x10, %rax
.Ltmp146:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp147 # Offset: 542
.Ltmp152:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x90c8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp148 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp149 # Offset: 592
.Ltmp148:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp136:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp149:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp150:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp150 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x9717(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp136 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp137:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp151 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp139:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp152 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 10
  State       : disassembled
  Address     : 0x41b0
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x41b0
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp153 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp154 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp155:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp155 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp160:
    0000006a: 	leaq	DATAat0x9757(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x90f0(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x973d(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x9757(%rip), %r8
    000000a1: 	leaq	DATAat0x972b(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp156 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp157:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x973c(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp157 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp156 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp158 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp159:
    00000140: 	addq	$0x10, %rax
.Ltmp158:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp159 # Offset: 334
.Ltmp161:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x90c8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp153:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp154:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp160 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp156:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp161 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 11
  State       : disassembled
  Address     : 0x4360
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x4360
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x4380
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x4380
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x99b0(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_Z13test_constantIh21rotate_right_constantIhEEvPT_iPKc" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x43c0
  Size        : 0x302
  MaxSize     : 0x310
  Offset      : 0x43c0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIh21rotate_right_constantIhEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movl	%esi, %r13d
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp162 # Offset: 49
    00000037: 	leal	-0x1(%r13), %eax
    0000003b: 	movl	%r13d, %ebx
    0000003e: 	movl	init_value(%rip), %edi
    00000044: 	xorl	%r12d, %r12d
    00000047: 	movl	%eax, 0x4(%rsp)
    0000004b: 	movl	%r13d, %eax
    0000004e: 	movdqa	DATAat0x99c0(%rip), %xmm3
    00000056: 	andl	$-0x10, %ebx
    00000059: 	shrl	$0x4, %eax
    0000005c: 	leaq	DATAat0x998d(%rip), %rbp
    00000063: 	subl	$0x1, %eax
    00000066: 	shlq	$0x4, %rax
    0000006a: 	leaq	0x10(%r14,%rax), %r15
    0000006f: 	nop # Size: 1
.Ltmp167:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r13d, %r13d
    00000075: 	jle	.Ltmp163 # Offset: 117
    0000007b: 	cmpl	$0xe, 0x4(%rsp)
    00000080: 	jbe	.Ltmp164 # Offset: 128
    00000086: 	movq	%r14, %rax
    00000089: 	pxor	%xmm2, %xmm2
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp165:
    00000090: 	movdqu	(%rax), %xmm1
    00000094: 	addq	$0x10, %rax
    00000098: 	movdqa	%xmm1, %xmm0
    0000009c: 	paddb	%xmm1, %xmm0
    000000a0: 	psrlw	$0x5, %xmm1
    000000a5: 	paddb	%xmm0, %xmm0
    000000a9: 	pand	%xmm3, %xmm1
    000000ad: 	paddb	%xmm0, %xmm0
    000000b1: 	por	%xmm1, %xmm0
    000000b5: 	paddb	%xmm0, %xmm2
    000000b9: 	cmpq	%r15, %rax
    000000bc: 	jne	.Ltmp165 # Offset: 188
    000000be: 	movdqa	%xmm2, %xmm0
    000000c2: 	pxor	%xmm4, %xmm4
    000000c6: 	psrldq	$0x8, %xmm0
    000000cb: 	paddb	%xmm0, %xmm2
    000000cf: 	psadbw	%xmm4, %xmm2
    000000d3: 	movd	%xmm2, %eax
    000000d7: 	cmpl	%r13d, %ebx
    000000da: 	je	.Ltmp163 # Offset: 218
    000000e0: 	movl	%ebx, %edx
.Ltmp168:
    000000e2: 	movslq	%edx, %r9
    000000e5: 	movzbl	(%r14,%r9), %r9d
    000000ea: 	rolb	$0x3, %r9b
    000000ee: 	addl	%r9d, %eax
    000000f1: 	leal	0x1(%rdx), %r9d
    000000f5: 	cmpl	%r9d, %r13d
    000000f8: 	jle	.Ltmp163 # Offset: 248
    000000fe: 	movslq	%r9d, %r9
    00000101: 	movzbl	(%r14,%r9), %r9d
    00000106: 	rolb	$0x3, %r9b
    0000010a: 	addl	%r9d, %eax
    0000010d: 	leal	0x2(%rdx), %r9d
    00000111: 	cmpl	%r9d, %r13d
    00000114: 	jle	.Ltmp163 # Offset: 276
    0000011a: 	movslq	%r9d, %r9
    0000011d: 	movzbl	(%r14,%r9), %r9d
    00000122: 	rolb	$0x3, %r9b
    00000126: 	addl	%r9d, %eax
    00000129: 	leal	0x3(%rdx), %r9d
    0000012d: 	cmpl	%r13d, %r9d
    00000130: 	jge	.Ltmp163 # Offset: 304
    00000136: 	movslq	%r9d, %r9
    00000139: 	movzbl	(%r14,%r9), %r9d
    0000013e: 	rolb	$0x3, %r9b
    00000142: 	addl	%r9d, %eax
    00000145: 	leal	0x4(%rdx), %r9d
    00000149: 	cmpl	%r9d, %r13d
    0000014c: 	jle	.Ltmp163 # Offset: 332
    00000152: 	movslq	%r9d, %r9
    00000155: 	movzbl	(%r14,%r9), %r9d
    0000015a: 	rolb	$0x3, %r9b
    0000015e: 	addl	%r9d, %eax
    00000161: 	leal	0x5(%rdx), %r9d
    00000165: 	cmpl	%r9d, %r13d
    00000168: 	jle	.Ltmp163 # Offset: 360
    0000016e: 	movslq	%r9d, %r9
    00000171: 	movzbl	(%r14,%r9), %r9d
    00000176: 	rolb	$0x3, %r9b
    0000017a: 	addl	%r9d, %eax
    0000017d: 	leal	0x6(%rdx), %r9d
    00000181: 	cmpl	%r9d, %r13d
    00000184: 	jle	.Ltmp163 # Offset: 388
    0000018a: 	movslq	%r9d, %r9
    0000018d: 	movzbl	(%r14,%r9), %r9d
    00000192: 	rolb	$0x3, %r9b
    00000196: 	addl	%r9d, %eax
    00000199: 	leal	0x7(%rdx), %r9d
    0000019d: 	cmpl	%r9d, %r13d
    000001a0: 	jle	.Ltmp163 # Offset: 416
    000001a6: 	movslq	%r9d, %r9
    000001a9: 	movzbl	(%r14,%r9), %r9d
    000001ae: 	rolb	$0x3, %r9b
    000001b2: 	addl	%r9d, %eax
    000001b5: 	leal	0x8(%rdx), %r9d
    000001b9: 	cmpl	%r9d, %r13d
    000001bc: 	jle	.Ltmp163 # Offset: 444
    000001c2: 	movslq	%r9d, %r9
    000001c5: 	movzbl	(%r14,%r9), %r9d
    000001ca: 	rolb	$0x3, %r9b
    000001ce: 	addl	%r9d, %eax
    000001d1: 	leal	0x9(%rdx), %r9d
    000001d5: 	cmpl	%r9d, %r13d
    000001d8: 	jle	.Ltmp163 # Offset: 472
    000001de: 	movslq	%r9d, %r9
    000001e1: 	movzbl	(%r14,%r9), %r9d
    000001e6: 	rolb	$0x3, %r9b
    000001ea: 	addl	%r9d, %eax
    000001ed: 	leal	0xa(%rdx), %r9d
    000001f1: 	cmpl	%r9d, %r13d
    000001f4: 	jle	.Ltmp163 # Offset: 500
    000001f6: 	movslq	%r9d, %r9
    000001f9: 	movzbl	(%r14,%r9), %r9d
    000001fe: 	rolb	$0x3, %r9b
    00000202: 	addl	%r9d, %eax
    00000205: 	leal	0xb(%rdx), %r9d
    00000209: 	cmpl	%r9d, %r13d
    0000020c: 	jle	.Ltmp163 # Offset: 524
    0000020e: 	movslq	%r9d, %r9
    00000211: 	movzbl	(%r14,%r9), %r9d
    00000216: 	rolb	$0x3, %r9b
    0000021a: 	addl	%r9d, %eax
    0000021d: 	leal	0xc(%rdx), %r9d
    00000221: 	cmpl	%r9d, %r13d
    00000224: 	jle	.Ltmp163 # Offset: 548
    00000226: 	movslq	%r9d, %r9
    00000229: 	movzbl	(%r14,%r9), %r9d
    0000022e: 	rolb	$0x3, %r9b
    00000232: 	addl	%r9d, %eax
    00000235: 	leal	0xd(%rdx), %r9d
    00000239: 	cmpl	%r9d, %r13d
    0000023c: 	jle	.Ltmp163 # Offset: 572
    0000023e: 	movslq	%r9d, %r9
    00000241: 	addl	$0xe, %edx
    00000244: 	movzbl	(%r14,%r9), %r9d
    00000249: 	rolb	$0x3, %r9b
    0000024d: 	addl	%r9d, %eax
    00000250: 	cmpl	%edx, %r13d
    00000253: 	jle	.Ltmp163 # Offset: 595
    00000255: 	movslq	%edx, %rdx
    00000258: 	movzbl	(%r14,%rdx), %edx
    0000025d: 	rolb	$0x3, %dl
    00000260: 	addl	%edx, %eax
    00000262: 	nopw	(%rax,%rax) # Size: 6
.Ltmp163:
    00000268: 	movl	%edi, %edx
    0000026a: 	rolb	$0x3, %dl
    0000026d: 	shll	$0x6, %edx
    00000270: 	cmpb	%al, %dl
    00000272: 	je	.Ltmp166 # Offset: 626
    00000274: 	movl	current_test(%rip), %edx
    0000027a: 	movq	%rbp, %rsi
    0000027d: 	movl	$0x1, %edi
    00000282: 	xorl	%eax, %eax
    00000284: 	addl	$0x1, %r12d
    00000288: 	callq	__printf_chk@PLT # Offset: 648
    0000028d: 	movl	iterations(%rip), %esi
    00000293: 	cmpl	%esi, %r12d
    00000296: 	jge	.Ltmp162 # Offset: 662
    00000298: 	movl	init_value(%rip), %edi
    0000029e: 	movdqa	DATAat0x99c0(%rip), %xmm3
    000002a6: 	jmp	.Ltmp167 # Offset: 678
    000002ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp166:
    000002b0: 	addl	$0x1, %r12d
    000002b4: 	cmpl	%esi, %r12d
    000002b7: 	jl	.Ltmp167 # Offset: 695
.Ltmp162:
    000002bd: 	callq	clock@PLT # Offset: 701
    000002c2: 	pxor	%xmm0, %xmm0
    000002c6: 	movq	0x8(%rsp), %rdi
    000002cb: 	movq	%rax, end_time(%rip)
    000002d2: 	subq	start_time(%rip), %rax
    000002d9: 	cvtsi2sd	%rax, %xmm0
    000002de: 	divsd	DATAat0x99b0(%rip), %xmm0
    000002e6: 	addq	$0x18, %rsp
    000002ea: 	popq	%rbx
    000002eb: 	popq	%rbp
    000002ec: 	popq	%r12
    000002ee: 	popq	%r13
    000002f0: 	popq	%r14
    000002f2: 	popq	%r15
    000002f4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 756
.Ltmp164:
    000002f9: 	xorl	%edx, %edx
    000002fb: 	xorl	%eax, %eax
    000002fd: 	jmp	.Ltmp168 # Offset: 765
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIh21rotate_right_constantIhEEvPT_iPKc"

Binary Function "_Z13test_constantIt21rotate_right_constantItEEvPT_iPKc" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x46d0
  Size        : 0x214
  MaxSize     : 0x220
  Offset      : 0x46d0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIt21rotate_right_constantItEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp169 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebx
    0000003e: 	movl	init_value(%rip), %edi
    00000044: 	xorl	%r12d, %r12d
    00000047: 	movl	%eax, 0x4(%rsp)
    0000004b: 	movl	%r14d, %eax
    0000004e: 	andl	$-0x8, %ebx
    00000051: 	leaq	DATAat0x998d(%rip), %rbp
    00000058: 	shrl	$0x3, %eax
    0000005b: 	subl	$0x1, %eax
    0000005e: 	shlq	$0x4, %rax
    00000062: 	leaq	0x10(%r15,%rax), %r13
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp175:
    00000070: 	xorl	%edx, %edx
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp170 # Offset: 117
    0000007b: 	cmpl	$0x6, 0x4(%rsp)
    00000080: 	jbe	.Ltmp171 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm2, %xmm2
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp172:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	movdqa	%xmm0, %xmm1
    0000009c: 	psrlw	$0x5, %xmm0
    000000a1: 	psllw	$0xb, %xmm1
    000000a6: 	por	%xmm1, %xmm0
    000000aa: 	paddw	%xmm0, %xmm2
    000000ae: 	cmpq	%r13, %rax
    000000b1: 	jne	.Ltmp172 # Offset: 177
    000000b3: 	movdqa	%xmm2, %xmm0
    000000b7: 	psrldq	$0x8, %xmm0
    000000bc: 	paddw	%xmm0, %xmm2
    000000c0: 	movdqa	%xmm2, %xmm0
    000000c4: 	psrldq	$0x4, %xmm0
    000000c9: 	paddw	%xmm0, %xmm2
    000000cd: 	movdqa	%xmm2, %xmm0
    000000d1: 	psrldq	$0x2, %xmm0
    000000d6: 	paddw	%xmm0, %xmm2
    000000da: 	pextrw	$0x0, %xmm2, %edx
    000000df: 	cmpl	%r14d, %ebx
    000000e2: 	je	.Ltmp170 # Offset: 226
    000000e8: 	movl	%ebx, %eax
    000000ea: 	movl	%ebx, %ecx
.Ltmp176:
    000000ec: 	movl	%r14d, %r8d
    000000ef: 	subl	%eax, %r8d
    000000f2: 	leal	-0x1(%r8), %r9d
    000000f6: 	cmpl	$0x2, %r9d
    000000fa: 	jbe	.Ltmp173 # Offset: 250
    000000fc: 	movq	(%r15,%rax,2), %xmm1
    00000102: 	movdqa	%xmm1, %xmm0
    00000106: 	psllw	$0xb, %xmm1
    0000010b: 	psrlw	$0x5, %xmm0
    00000110: 	por	%xmm1, %xmm0
    00000114: 	pextrw	$0x0, %xmm0, %eax
    00000119: 	pextrw	$0x1, %xmm0, %r9d
    0000011f: 	addl	%r9d, %eax
    00000122: 	addl	%edx, %eax
    00000124: 	pextrw	$0x2, %xmm0, %edx
    00000129: 	addl	%edx, %eax
    0000012b: 	pextrw	$0x3, %xmm0, %edx
    00000130: 	addl	%eax, %edx
    00000132: 	movl	%r8d, %eax
    00000135: 	andl	$-0x4, %eax
    00000138: 	addl	%eax, %ecx
    0000013a: 	cmpl	%eax, %r8d
    0000013d: 	je	.Ltmp170 # Offset: 317
.Ltmp173:
    0000013f: 	movslq	%ecx, %rax
    00000142: 	leaq	(%rax,%rax), %r8
    00000146: 	movzwl	(%r15,%rax,2), %eax
    0000014b: 	rorw	$0x5, %ax
    0000014f: 	addl	%eax, %edx
    00000151: 	leal	0x1(%rcx), %eax
    00000154: 	cmpl	%eax, %r14d
    00000157: 	jle	.Ltmp170 # Offset: 343
    00000159: 	movzwl	0x2(%r15,%r8), %eax
    0000015f: 	addl	$0x2, %ecx
    00000162: 	rorw	$0x5, %ax
    00000166: 	addl	%eax, %edx
    00000168: 	cmpl	%ecx, %r14d
    0000016b: 	jle	.Ltmp170 # Offset: 363
    0000016d: 	movzwl	0x4(%r15,%r8), %eax
    00000173: 	rorw	$0x5, %ax
    00000177: 	addl	%eax, %edx
.Ltmp170:
    00000179: 	movl	%edi, %eax
    0000017b: 	rorw	$0x5, %ax
    0000017f: 	imulw	$0x1f40, %ax, %ax
    00000184: 	cmpw	%dx, %ax
    00000187: 	je	.Ltmp174 # Offset: 391
    00000189: 	movl	current_test(%rip), %edx
    0000018f: 	movq	%rbp, %rsi
    00000192: 	movl	$0x1, %edi
    00000197: 	xorl	%eax, %eax
    00000199: 	addl	$0x1, %r12d
    0000019d: 	callq	__printf_chk@PLT # Offset: 413
    000001a2: 	movl	iterations(%rip), %esi
    000001a8: 	cmpl	%r12d, %esi
    000001ab: 	jle	.Ltmp169 # Offset: 427
    000001ad: 	movl	init_value(%rip), %edi
    000001b3: 	jmp	.Ltmp175 # Offset: 435
    000001b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp174:
    000001c0: 	addl	$0x1, %r12d
    000001c4: 	cmpl	%esi, %r12d
    000001c7: 	jl	.Ltmp175 # Offset: 455
.Ltmp169:
    000001cd: 	callq	clock@PLT # Offset: 461
    000001d2: 	pxor	%xmm0, %xmm0
    000001d6: 	movq	0x8(%rsp), %rdi
    000001db: 	movq	%rax, end_time(%rip)
    000001e2: 	subq	start_time(%rip), %rax
    000001e9: 	cvtsi2sd	%rax, %xmm0
    000001ee: 	divsd	DATAat0x99b0(%rip), %xmm0
    000001f6: 	addq	$0x18, %rsp
    000001fa: 	popq	%rbx
    000001fb: 	popq	%rbp
    000001fc: 	popq	%r12
    000001fe: 	popq	%r13
    00000200: 	popq	%r14
    00000202: 	popq	%r15
    00000204: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 516
.Ltmp171:
    00000209: 	xorl	%eax, %eax
    0000020b: 	xorl	%ecx, %ecx
    0000020d: 	xorl	%edx, %edx
    0000020f: 	jmp	.Ltmp176 # Offset: 527
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIt21rotate_right_constantItEEvPT_iPKc"

Binary Function "_Z13test_constantIt22rotate_right_constant2ItEEvPT_iPKc" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x48f0
  Size        : 0x212
  MaxSize     : 0x220
  Offset      : 0x48f0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIt22rotate_right_constant2ItEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x18, %rsp
    00000017: 	movq	%rdx, 0x8(%rsp)
    0000001c: 	callq	clock@PLT # Offset: 28
    00000021: 	movl	iterations(%rip), %esi
    00000027: 	movq	%rax, start_time(%rip)
    0000002e: 	testl	%esi, %esi
    00000030: 	jle	.Ltmp177 # Offset: 48
    00000036: 	leal	-0x1(%rbx), %eax
    00000039: 	movl	%ebx, %ebp
    0000003b: 	movl	init_value(%rip), %edi
    00000041: 	xorl	%r13d, %r13d
    00000044: 	movl	%eax, 0x4(%rsp)
    00000048: 	movl	%ebx, %eax
    0000004a: 	andl	$-0x8, %ebp
    0000004d: 	leaq	DATAat0x998d(%rip), %r12
    00000054: 	shrl	$0x3, %eax
    00000057: 	subl	$0x1, %eax
    0000005a: 	shlq	$0x4, %rax
    0000005e: 	leaq	0x10(%r14,%rax), %r15
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp182:
    00000068: 	xorl	%eax, %eax
    0000006a: 	testl	%ebx, %ebx
    0000006c: 	jle	.Ltmp178 # Offset: 108
    00000072: 	cmpl	$0x6, 0x4(%rsp)
    00000077: 	jbe	.Ltmp179 # Offset: 119
    0000007d: 	movq	%r14, %rax
    00000080: 	pxor	%xmm2, %xmm2
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp180:
    00000088: 	movdqu	(%rax), %xmm0
    0000008c: 	addq	$0x10, %rax
    00000090: 	movdqa	%xmm0, %xmm1
    00000094: 	psllw	$0xb, %xmm0
    00000099: 	psrlw	$0x5, %xmm1
    0000009e: 	por	%xmm1, %xmm0
    000000a2: 	paddw	%xmm0, %xmm2
    000000a6: 	cmpq	%r15, %rax
    000000a9: 	jne	.Ltmp180 # Offset: 169
    000000ab: 	movdqa	%xmm2, %xmm0
    000000af: 	psrldq	$0x8, %xmm0
    000000b4: 	paddw	%xmm0, %xmm2
    000000b8: 	movdqa	%xmm2, %xmm0
    000000bc: 	psrldq	$0x4, %xmm0
    000000c1: 	paddw	%xmm0, %xmm2
    000000c5: 	movdqa	%xmm2, %xmm0
    000000c9: 	psrldq	$0x2, %xmm0
    000000ce: 	paddw	%xmm0, %xmm2
    000000d2: 	pextrw	$0x0, %xmm2, %eax
    000000d7: 	cmpl	%ebx, %ebp
    000000d9: 	je	.Ltmp178 # Offset: 217
    000000df: 	movl	%ebp, %edx
.Ltmp183:
    000000e1: 	movslq	%edx, %r10
    000000e4: 	leaq	(%r10,%r10), %r9
    000000e8: 	movzwl	(%r14,%r10,2), %r10d
    000000ed: 	rorw	$0x5, %r10w
    000000f2: 	addl	%r10d, %eax
    000000f5: 	leal	0x1(%rdx), %r10d
    000000f9: 	cmpl	%r10d, %ebx
    000000fc: 	jle	.Ltmp178 # Offset: 252
    000000fe: 	movzwl	0x2(%r14,%r9), %r10d
    00000104: 	rorw	$0x5, %r10w
    00000109: 	addl	%r10d, %eax
    0000010c: 	leal	0x2(%rdx), %r10d
    00000110: 	cmpl	%r10d, %ebx
    00000113: 	jle	.Ltmp178 # Offset: 275
    00000115: 	movzwl	0x4(%r14,%r9), %r10d
    0000011b: 	rorw	$0x5, %r10w
    00000120: 	addl	%r10d, %eax
    00000123: 	leal	0x3(%rdx), %r10d
    00000127: 	cmpl	%r10d, %ebx
    0000012a: 	jle	.Ltmp178 # Offset: 298
    0000012c: 	movzwl	0x6(%r14,%r9), %r10d
    00000132: 	rorw	$0x5, %r10w
    00000137: 	addl	%r10d, %eax
    0000013a: 	leal	0x4(%rdx), %r10d
    0000013e: 	cmpl	%r10d, %ebx
    00000141: 	jle	.Ltmp178 # Offset: 321
    00000143: 	movzwl	0x8(%r14,%r9), %r10d
    00000149: 	rorw	$0x5, %r10w
    0000014e: 	addl	%r10d, %eax
    00000151: 	leal	0x5(%rdx), %r10d
    00000155: 	cmpl	%r10d, %ebx
    00000158: 	jle	.Ltmp178 # Offset: 344
    0000015a: 	movzwl	0xa(%r14,%r9), %r10d
    00000160: 	addl	$0x6, %edx
    00000163: 	rorw	$0x5, %r10w
    00000168: 	addl	%r10d, %eax
    0000016b: 	cmpl	%edx, %ebx
    0000016d: 	jle	.Ltmp178 # Offset: 365
    0000016f: 	movzwl	0xc(%r14,%r9), %edx
    00000175: 	rorw	$0x5, %dx
    00000179: 	addl	%edx, %eax
.Ltmp178:
    0000017b: 	movl	%edi, %edx
    0000017d: 	rorw	$0x5, %dx
    00000181: 	imulw	$0x1f40, %dx, %dx
    00000186: 	cmpw	%ax, %dx
    00000189: 	je	.Ltmp181 # Offset: 393
    0000018b: 	movl	current_test(%rip), %edx
    00000191: 	movq	%r12, %rsi
    00000194: 	movl	$0x1, %edi
    00000199: 	xorl	%eax, %eax
    0000019b: 	addl	$0x1, %r13d
    0000019f: 	callq	__printf_chk@PLT # Offset: 415
    000001a4: 	movl	iterations(%rip), %esi
    000001aa: 	cmpl	%r13d, %esi
    000001ad: 	jle	.Ltmp177 # Offset: 429
    000001af: 	movl	init_value(%rip), %edi
    000001b5: 	jmp	.Ltmp182 # Offset: 437
    000001ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp181:
    000001c0: 	addl	$0x1, %r13d
    000001c4: 	cmpl	%esi, %r13d
    000001c7: 	jl	.Ltmp182 # Offset: 455
.Ltmp177:
    000001cd: 	callq	clock@PLT # Offset: 461
    000001d2: 	pxor	%xmm0, %xmm0
    000001d6: 	movq	0x8(%rsp), %rdi
    000001db: 	movq	%rax, end_time(%rip)
    000001e2: 	subq	start_time(%rip), %rax
    000001e9: 	cvtsi2sd	%rax, %xmm0
    000001ee: 	divsd	DATAat0x99b0(%rip), %xmm0
    000001f6: 	addq	$0x18, %rsp
    000001fa: 	popq	%rbx
    000001fb: 	popq	%rbp
    000001fc: 	popq	%r12
    000001fe: 	popq	%r13
    00000200: 	popq	%r14
    00000202: 	popq	%r15
    00000204: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 516
.Ltmp179:
    00000209: 	xorl	%edx, %edx
    0000020b: 	xorl	%eax, %eax
    0000020d: 	jmp	.Ltmp183 # Offset: 525
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIt22rotate_right_constant2ItEEvPT_iPKc"

Binary Function "_Z13test_constantIt22rotate_right_constant3ItEEvPT_iPKc" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x4b10
  Size        : 0x1f4
  MaxSize     : 0x200
  Offset      : 0x4b10
  Section     : .text
  Orc Section : .local.text._Z13test_constantIt22rotate_right_constant3ItEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp184 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebx
    0000003e: 	movl	init_value(%rip), %edi
    00000044: 	xorl	%r12d, %r12d
    00000047: 	movl	%eax, 0x4(%rsp)
    0000004b: 	movl	%r14d, %eax
    0000004e: 	andl	$-0x8, %ebx
    00000051: 	leaq	DATAat0x998d(%rip), %rbp
    00000058: 	shrl	$0x3, %eax
    0000005b: 	subl	$0x1, %eax
    0000005e: 	shlq	$0x4, %rax
    00000062: 	leaq	0x10(%r15,%rax), %r13
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp190:
    00000070: 	xorl	%edx, %edx
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp185 # Offset: 117
    0000007b: 	cmpl	$0x6, 0x4(%rsp)
    00000080: 	jbe	.Ltmp186 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp187:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	psrlw	$0x5, %xmm0
    0000009d: 	paddw	%xmm0, %xmm1
    000000a1: 	cmpq	%r13, %rax
    000000a4: 	jne	.Ltmp187 # Offset: 164
    000000a6: 	movdqa	%xmm1, %xmm0
    000000aa: 	psrldq	$0x8, %xmm0
    000000af: 	paddw	%xmm0, %xmm1
    000000b3: 	movdqa	%xmm1, %xmm0
    000000b7: 	psrldq	$0x4, %xmm0
    000000bc: 	paddw	%xmm0, %xmm1
    000000c0: 	movdqa	%xmm1, %xmm0
    000000c4: 	psrldq	$0x2, %xmm0
    000000c9: 	paddw	%xmm0, %xmm1
    000000cd: 	pextrw	$0x0, %xmm1, %edx
    000000d2: 	cmpl	%r14d, %ebx
    000000d5: 	je	.Ltmp185 # Offset: 213
    000000db: 	movl	%ebx, %eax
    000000dd: 	movl	%ebx, %ecx
.Ltmp191:
    000000df: 	movl	%r14d, %r8d
    000000e2: 	subl	%eax, %r8d
    000000e5: 	leal	-0x1(%r8), %r9d
    000000e9: 	cmpl	$0x2, %r9d
    000000ed: 	jbe	.Ltmp188 # Offset: 237
    000000ef: 	movq	(%r15,%rax,2), %xmm0
    000000f5: 	psrlw	$0x5, %xmm0
    000000fa: 	pextrw	$0x0, %xmm0, %eax
    000000ff: 	pextrw	$0x1, %xmm0, %r9d
    00000105: 	addl	%r9d, %eax
    00000108: 	addl	%edx, %eax
    0000010a: 	pextrw	$0x2, %xmm0, %edx
    0000010f: 	addl	%edx, %eax
    00000111: 	pextrw	$0x3, %xmm0, %edx
    00000116: 	addl	%eax, %edx
    00000118: 	movl	%r8d, %eax
    0000011b: 	andl	$-0x4, %eax
    0000011e: 	addl	%eax, %ecx
    00000120: 	cmpl	%eax, %r8d
    00000123: 	je	.Ltmp185 # Offset: 291
.Ltmp188:
    00000125: 	movslq	%ecx, %rax
    00000128: 	leaq	(%rax,%rax), %r8
    0000012c: 	movzwl	(%r15,%rax,2), %eax
    00000131: 	shrw	$0x5, %ax
    00000135: 	addl	%eax, %edx
    00000137: 	leal	0x1(%rcx), %eax
    0000013a: 	cmpl	%eax, %r14d
    0000013d: 	jle	.Ltmp185 # Offset: 317
    0000013f: 	movzwl	0x2(%r15,%r8), %eax
    00000145: 	addl	$0x2, %ecx
    00000148: 	shrw	$0x5, %ax
    0000014c: 	addl	%eax, %edx
    0000014e: 	cmpl	%ecx, %r14d
    00000151: 	jle	.Ltmp185 # Offset: 337
    00000153: 	movzwl	0x4(%r15,%r8), %eax
    00000159: 	shrw	$0x5, %ax
    0000015d: 	addl	%eax, %edx
.Ltmp185:
    0000015f: 	movl	%edi, %eax
    00000161: 	shrw	$0x5, %ax
    00000165: 	imulw	$0x1f40, %ax, %ax
    0000016a: 	cmpw	%dx, %ax
    0000016d: 	je	.Ltmp189 # Offset: 365
    0000016f: 	movl	current_test(%rip), %edx
    00000175: 	movq	%rbp, %rsi
    00000178: 	movl	$0x1, %edi
    0000017d: 	xorl	%eax, %eax
    0000017f: 	addl	$0x1, %r12d
    00000183: 	callq	__printf_chk@PLT # Offset: 387
    00000188: 	movl	iterations(%rip), %esi
    0000018e: 	cmpl	%r12d, %esi
    00000191: 	jle	.Ltmp184 # Offset: 401
    00000193: 	movl	init_value(%rip), %edi
    00000199: 	jmp	.Ltmp190 # Offset: 409
    0000019e: 	nop # Size: 2
.Ltmp189:
    000001a0: 	addl	$0x1, %r12d
    000001a4: 	cmpl	%esi, %r12d
    000001a7: 	jl	.Ltmp190 # Offset: 423
.Ltmp184:
    000001ad: 	callq	clock@PLT # Offset: 429
    000001b2: 	pxor	%xmm0, %xmm0
    000001b6: 	movq	0x8(%rsp), %rdi
    000001bb: 	movq	%rax, end_time(%rip)
    000001c2: 	subq	start_time(%rip), %rax
    000001c9: 	cvtsi2sd	%rax, %xmm0
    000001ce: 	divsd	DATAat0x99b0(%rip), %xmm0
    000001d6: 	addq	$0x18, %rsp
    000001da: 	popq	%rbx
    000001db: 	popq	%rbp
    000001dc: 	popq	%r12
    000001de: 	popq	%r13
    000001e0: 	popq	%r14
    000001e2: 	popq	%r15
    000001e4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 484
.Ltmp186:
    000001e9: 	xorl	%eax, %eax
    000001eb: 	xorl	%ecx, %ecx
    000001ed: 	xorl	%edx, %edx
    000001ef: 	jmp	.Ltmp191 # Offset: 495
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIt22rotate_right_constant3ItEEvPT_iPKc"

Binary Function "_Z13test_constantIt22rotate_right_constant4ItEEvPT_iPKc" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x4d10
  Size        : 0x1f4
  MaxSize     : 0x200
  Offset      : 0x4d10
  Section     : .text
  Orc Section : .local.text._Z13test_constantIt22rotate_right_constant4ItEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp192 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebx
    0000003e: 	movl	init_value(%rip), %edi
    00000044: 	xorl	%r12d, %r12d
    00000047: 	movl	%eax, 0x4(%rsp)
    0000004b: 	movl	%r14d, %eax
    0000004e: 	andl	$-0x8, %ebx
    00000051: 	leaq	DATAat0x998d(%rip), %rbp
    00000058: 	shrl	$0x3, %eax
    0000005b: 	subl	$0x1, %eax
    0000005e: 	shlq	$0x4, %rax
    00000062: 	leaq	0x10(%r15,%rax), %r13
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp198:
    00000070: 	xorl	%edx, %edx
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp193 # Offset: 117
    0000007b: 	cmpl	$0x6, 0x4(%rsp)
    00000080: 	jbe	.Ltmp194 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp195:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	psrlw	$0x5, %xmm0
    0000009d: 	paddw	%xmm0, %xmm1
    000000a1: 	cmpq	%r13, %rax
    000000a4: 	jne	.Ltmp195 # Offset: 164
    000000a6: 	movdqa	%xmm1, %xmm0
    000000aa: 	psrldq	$0x8, %xmm0
    000000af: 	paddw	%xmm0, %xmm1
    000000b3: 	movdqa	%xmm1, %xmm0
    000000b7: 	psrldq	$0x4, %xmm0
    000000bc: 	paddw	%xmm0, %xmm1
    000000c0: 	movdqa	%xmm1, %xmm0
    000000c4: 	psrldq	$0x2, %xmm0
    000000c9: 	paddw	%xmm0, %xmm1
    000000cd: 	pextrw	$0x0, %xmm1, %edx
    000000d2: 	cmpl	%r14d, %ebx
    000000d5: 	je	.Ltmp193 # Offset: 213
    000000db: 	movl	%ebx, %eax
    000000dd: 	movl	%ebx, %ecx
.Ltmp199:
    000000df: 	movl	%r14d, %r8d
    000000e2: 	subl	%eax, %r8d
    000000e5: 	leal	-0x1(%r8), %r9d
    000000e9: 	cmpl	$0x2, %r9d
    000000ed: 	jbe	.Ltmp196 # Offset: 237
    000000ef: 	movq	(%r15,%rax,2), %xmm0
    000000f5: 	psrlw	$0x5, %xmm0
    000000fa: 	pextrw	$0x0, %xmm0, %eax
    000000ff: 	pextrw	$0x1, %xmm0, %r9d
    00000105: 	addl	%r9d, %eax
    00000108: 	addl	%edx, %eax
    0000010a: 	pextrw	$0x2, %xmm0, %edx
    0000010f: 	addl	%edx, %eax
    00000111: 	pextrw	$0x3, %xmm0, %edx
    00000116: 	addl	%eax, %edx
    00000118: 	movl	%r8d, %eax
    0000011b: 	andl	$-0x4, %eax
    0000011e: 	addl	%eax, %ecx
    00000120: 	cmpl	%eax, %r8d
    00000123: 	je	.Ltmp193 # Offset: 291
.Ltmp196:
    00000125: 	movslq	%ecx, %rax
    00000128: 	leaq	(%rax,%rax), %r8
    0000012c: 	movzwl	(%r15,%rax,2), %eax
    00000131: 	shrw	$0x5, %ax
    00000135: 	addl	%eax, %edx
    00000137: 	leal	0x1(%rcx), %eax
    0000013a: 	cmpl	%eax, %r14d
    0000013d: 	jle	.Ltmp193 # Offset: 317
    0000013f: 	movzwl	0x2(%r15,%r8), %eax
    00000145: 	addl	$0x2, %ecx
    00000148: 	shrw	$0x5, %ax
    0000014c: 	addl	%eax, %edx
    0000014e: 	cmpl	%ecx, %r14d
    00000151: 	jle	.Ltmp193 # Offset: 337
    00000153: 	movzwl	0x4(%r15,%r8), %eax
    00000159: 	shrw	$0x5, %ax
    0000015d: 	addl	%eax, %edx
.Ltmp193:
    0000015f: 	movl	%edi, %eax
    00000161: 	shrw	$0x5, %ax
    00000165: 	imulw	$0x1f40, %ax, %ax
    0000016a: 	cmpw	%dx, %ax
    0000016d: 	je	.Ltmp197 # Offset: 365
    0000016f: 	movl	current_test(%rip), %edx
    00000175: 	movq	%rbp, %rsi
    00000178: 	movl	$0x1, %edi
    0000017d: 	xorl	%eax, %eax
    0000017f: 	addl	$0x1, %r12d
    00000183: 	callq	__printf_chk@PLT # Offset: 387
    00000188: 	movl	iterations(%rip), %esi
    0000018e: 	cmpl	%r12d, %esi
    00000191: 	jle	.Ltmp192 # Offset: 401
    00000193: 	movl	init_value(%rip), %edi
    00000199: 	jmp	.Ltmp198 # Offset: 409
    0000019e: 	nop # Size: 2
.Ltmp197:
    000001a0: 	addl	$0x1, %r12d
    000001a4: 	cmpl	%esi, %r12d
    000001a7: 	jl	.Ltmp198 # Offset: 423
.Ltmp192:
    000001ad: 	callq	clock@PLT # Offset: 429
    000001b2: 	pxor	%xmm0, %xmm0
    000001b6: 	movq	0x8(%rsp), %rdi
    000001bb: 	movq	%rax, end_time(%rip)
    000001c2: 	subq	start_time(%rip), %rax
    000001c9: 	cvtsi2sd	%rax, %xmm0
    000001ce: 	divsd	DATAat0x99b0(%rip), %xmm0
    000001d6: 	addq	$0x18, %rsp
    000001da: 	popq	%rbx
    000001db: 	popq	%rbp
    000001dc: 	popq	%r12
    000001de: 	popq	%r13
    000001e0: 	popq	%r14
    000001e2: 	popq	%r15
    000001e4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 484
.Ltmp194:
    000001e9: 	xorl	%eax, %eax
    000001eb: 	xorl	%ecx, %ecx
    000001ed: 	xorl	%edx, %edx
    000001ef: 	jmp	.Ltmp199 # Offset: 495
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIt22rotate_right_constant4ItEEvPT_iPKc"

Binary Function "_Z13test_constantIj21rotate_right_constantIjEEvPT_iPKc" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x4f10
  Size        : 0x1aa
  MaxSize     : 0x1b0
  Offset      : 0x4f10
  Section     : .text
  Orc Section : .local.text._Z13test_constantIj21rotate_right_constantIjEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp200 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebp
    0000003e: 	movl	init_value(%rip), %edi
    00000044: 	xorl	%r13d, %r13d
    00000047: 	movl	%eax, 0x4(%rsp)
    0000004b: 	movl	%r14d, %eax
    0000004e: 	andl	$-0x4, %ebp
    00000051: 	leaq	DATAat0x998d(%rip), %r12
    00000058: 	shrl	$0x2, %eax
    0000005b: 	subl	$0x1, %eax
    0000005e: 	shlq	$0x4, %rax
    00000062: 	leaq	0x10(%r15,%rax), %rbx
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp205:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp201 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp202 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm2, %xmm2
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp203:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	movdqa	%xmm0, %xmm1
    0000009c: 	pslld	$0x1b, %xmm0
    000000a1: 	psrld	$0x5, %xmm1
    000000a6: 	por	%xmm1, %xmm0
    000000aa: 	paddd	%xmm0, %xmm2
    000000ae: 	cmpq	%rbx, %rax
    000000b1: 	jne	.Ltmp203 # Offset: 177
    000000b3: 	movdqa	%xmm2, %xmm0
    000000b7: 	movl	%ebp, %edx
    000000b9: 	psrldq	$0x8, %xmm0
    000000be: 	paddd	%xmm0, %xmm2
    000000c2: 	movdqa	%xmm2, %xmm0
    000000c6: 	psrldq	$0x4, %xmm0
    000000cb: 	paddd	%xmm0, %xmm2
    000000cf: 	movd	%xmm2, %eax
    000000d3: 	cmpl	%ebp, %r14d
    000000d6: 	je	.Ltmp201 # Offset: 214
.Ltmp206:
    000000d8: 	movslq	%edx, %r9
    000000db: 	leaq	(,%r9,4), %r10
    000000e3: 	movl	(%r15,%r9,4), %r9d
    000000e7: 	rorl	$0x5, %r9d
    000000eb: 	addl	%r9d, %eax
    000000ee: 	leal	0x1(%rdx), %r9d
    000000f2: 	cmpl	%r9d, %r14d
    000000f5: 	jle	.Ltmp201 # Offset: 245
    000000f7: 	movl	0x4(%r15,%r10), %r9d
    000000fc: 	addl	$0x2, %edx
    000000ff: 	rorl	$0x5, %r9d
    00000103: 	addl	%r9d, %eax
    00000106: 	cmpl	%edx, %r14d
    00000109: 	jle	.Ltmp201 # Offset: 265
    0000010b: 	movl	0x8(%r15,%r10), %edx
    00000110: 	rorl	$0x5, %edx
    00000113: 	addl	%edx, %eax
.Ltmp201:
    00000115: 	movl	%edi, %edx
    00000117: 	rorl	$0x5, %edx
    0000011a: 	imull	$0x1f40, %edx, %edx
    00000120: 	cmpl	%eax, %edx
    00000122: 	je	.Ltmp204 # Offset: 290
    00000124: 	movl	current_test(%rip), %edx
    0000012a: 	movq	%r12, %rsi
    0000012d: 	movl	$0x1, %edi
    00000132: 	xorl	%eax, %eax
    00000134: 	addl	$0x1, %r13d
    00000138: 	callq	__printf_chk@PLT # Offset: 312
    0000013d: 	movl	iterations(%rip), %esi
    00000143: 	cmpl	%r13d, %esi
    00000146: 	jle	.Ltmp200 # Offset: 326
    00000148: 	movl	init_value(%rip), %edi
    0000014e: 	jmp	.Ltmp205 # Offset: 334
    00000153: 	nopl	(%rax,%rax) # Size: 5
.Ltmp204:
    00000158: 	addl	$0x1, %r13d
    0000015c: 	cmpl	%esi, %r13d
    0000015f: 	jl	.Ltmp205 # Offset: 351
.Ltmp200:
    00000165: 	callq	clock@PLT # Offset: 357
    0000016a: 	pxor	%xmm0, %xmm0
    0000016e: 	movq	0x8(%rsp), %rdi
    00000173: 	movq	%rax, end_time(%rip)
    0000017a: 	subq	start_time(%rip), %rax
    00000181: 	cvtsi2sd	%rax, %xmm0
    00000186: 	divsd	DATAat0x99b0(%rip), %xmm0
    0000018e: 	addq	$0x18, %rsp
    00000192: 	popq	%rbx
    00000193: 	popq	%rbp
    00000194: 	popq	%r12
    00000196: 	popq	%r13
    00000198: 	popq	%r14
    0000019a: 	popq	%r15
    0000019c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 412
.Ltmp202:
    000001a1: 	xorl	%edx, %edx
    000001a3: 	xorl	%eax, %eax
    000001a5: 	jmp	.Ltmp206 # Offset: 421
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIj21rotate_right_constantIjEEvPT_iPKc"

Binary Function "_Z13test_constantIj22rotate_right_constant2IjEEvPT_iPKc" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x50c0
  Size        : 0x1aa
  MaxSize     : 0x1b0
  Offset      : 0x50c0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIj22rotate_right_constant2IjEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp207 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebp
    0000003e: 	movl	init_value(%rip), %edi
    00000044: 	xorl	%r13d, %r13d
    00000047: 	movl	%eax, 0x4(%rsp)
    0000004b: 	movl	%r14d, %eax
    0000004e: 	andl	$-0x4, %ebp
    00000051: 	leaq	DATAat0x998d(%rip), %r12
    00000058: 	shrl	$0x2, %eax
    0000005b: 	subl	$0x1, %eax
    0000005e: 	shlq	$0x4, %rax
    00000062: 	leaq	0x10(%r15,%rax), %rbx
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp212:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp208 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp209 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm2, %xmm2
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp210:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	movdqa	%xmm0, %xmm1
    0000009c: 	pslld	$0x1b, %xmm0
    000000a1: 	psrld	$0x5, %xmm1
    000000a6: 	por	%xmm1, %xmm0
    000000aa: 	paddd	%xmm0, %xmm2
    000000ae: 	cmpq	%rbx, %rax
    000000b1: 	jne	.Ltmp210 # Offset: 177
    000000b3: 	movdqa	%xmm2, %xmm0
    000000b7: 	movl	%ebp, %edx
    000000b9: 	psrldq	$0x8, %xmm0
    000000be: 	paddd	%xmm0, %xmm2
    000000c2: 	movdqa	%xmm2, %xmm0
    000000c6: 	psrldq	$0x4, %xmm0
    000000cb: 	paddd	%xmm0, %xmm2
    000000cf: 	movd	%xmm2, %eax
    000000d3: 	cmpl	%ebp, %r14d
    000000d6: 	je	.Ltmp208 # Offset: 214
.Ltmp213:
    000000d8: 	movslq	%edx, %r9
    000000db: 	leaq	(,%r9,4), %r10
    000000e3: 	movl	(%r15,%r9,4), %r9d
    000000e7: 	rorl	$0x5, %r9d
    000000eb: 	addl	%r9d, %eax
    000000ee: 	leal	0x1(%rdx), %r9d
    000000f2: 	cmpl	%r9d, %r14d
    000000f5: 	jle	.Ltmp208 # Offset: 245
    000000f7: 	movl	0x4(%r15,%r10), %r9d
    000000fc: 	addl	$0x2, %edx
    000000ff: 	rorl	$0x5, %r9d
    00000103: 	addl	%r9d, %eax
    00000106: 	cmpl	%edx, %r14d
    00000109: 	jle	.Ltmp208 # Offset: 265
    0000010b: 	movl	0x8(%r15,%r10), %edx
    00000110: 	rorl	$0x5, %edx
    00000113: 	addl	%edx, %eax
.Ltmp208:
    00000115: 	movl	%edi, %edx
    00000117: 	rorl	$0x5, %edx
    0000011a: 	imull	$0x1f40, %edx, %edx
    00000120: 	cmpl	%eax, %edx
    00000122: 	je	.Ltmp211 # Offset: 290
    00000124: 	movl	current_test(%rip), %edx
    0000012a: 	movq	%r12, %rsi
    0000012d: 	movl	$0x1, %edi
    00000132: 	xorl	%eax, %eax
    00000134: 	addl	$0x1, %r13d
    00000138: 	callq	__printf_chk@PLT # Offset: 312
    0000013d: 	movl	iterations(%rip), %esi
    00000143: 	cmpl	%r13d, %esi
    00000146: 	jle	.Ltmp207 # Offset: 326
    00000148: 	movl	init_value(%rip), %edi
    0000014e: 	jmp	.Ltmp212 # Offset: 334
    00000153: 	nopl	(%rax,%rax) # Size: 5
.Ltmp211:
    00000158: 	addl	$0x1, %r13d
    0000015c: 	cmpl	%esi, %r13d
    0000015f: 	jl	.Ltmp212 # Offset: 351
.Ltmp207:
    00000165: 	callq	clock@PLT # Offset: 357
    0000016a: 	pxor	%xmm0, %xmm0
    0000016e: 	movq	0x8(%rsp), %rdi
    00000173: 	movq	%rax, end_time(%rip)
    0000017a: 	subq	start_time(%rip), %rax
    00000181: 	cvtsi2sd	%rax, %xmm0
    00000186: 	divsd	DATAat0x99b0(%rip), %xmm0
    0000018e: 	addq	$0x18, %rsp
    00000192: 	popq	%rbx
    00000193: 	popq	%rbp
    00000194: 	popq	%r12
    00000196: 	popq	%r13
    00000198: 	popq	%r14
    0000019a: 	popq	%r15
    0000019c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 412
.Ltmp209:
    000001a1: 	xorl	%edx, %edx
    000001a3: 	xorl	%eax, %eax
    000001a5: 	jmp	.Ltmp213 # Offset: 421
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIj22rotate_right_constant2IjEEvPT_iPKc"

Binary Function "_Z13test_constantIj22rotate_right_constant3IjEEvPT_iPKc" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x5270
  Size        : 0x1aa
  MaxSize     : 0x1b0
  Offset      : 0x5270
  Section     : .text
  Orc Section : .local.text._Z13test_constantIj22rotate_right_constant3IjEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp214 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebp
    0000003e: 	movl	init_value(%rip), %edi
    00000044: 	xorl	%r13d, %r13d
    00000047: 	movl	%eax, 0x4(%rsp)
    0000004b: 	movl	%r14d, %eax
    0000004e: 	andl	$-0x4, %ebp
    00000051: 	leaq	DATAat0x998d(%rip), %r12
    00000058: 	shrl	$0x2, %eax
    0000005b: 	subl	$0x1, %eax
    0000005e: 	shlq	$0x4, %rax
    00000062: 	leaq	0x10(%r15,%rax), %rbx
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp219:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp215 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp216 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm2, %xmm2
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp217:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	movdqa	%xmm0, %xmm1
    0000009c: 	pslld	$0x1b, %xmm0
    000000a1: 	psrld	$0x5, %xmm1
    000000a6: 	por	%xmm1, %xmm0
    000000aa: 	paddd	%xmm0, %xmm2
    000000ae: 	cmpq	%rbx, %rax
    000000b1: 	jne	.Ltmp217 # Offset: 177
    000000b3: 	movdqa	%xmm2, %xmm0
    000000b7: 	movl	%ebp, %edx
    000000b9: 	psrldq	$0x8, %xmm0
    000000be: 	paddd	%xmm0, %xmm2
    000000c2: 	movdqa	%xmm2, %xmm0
    000000c6: 	psrldq	$0x4, %xmm0
    000000cb: 	paddd	%xmm0, %xmm2
    000000cf: 	movd	%xmm2, %eax
    000000d3: 	cmpl	%ebp, %r14d
    000000d6: 	je	.Ltmp215 # Offset: 214
.Ltmp220:
    000000d8: 	movslq	%edx, %r9
    000000db: 	leaq	(,%r9,4), %r10
    000000e3: 	movl	(%r15,%r9,4), %r9d
    000000e7: 	rorl	$0x5, %r9d
    000000eb: 	addl	%r9d, %eax
    000000ee: 	leal	0x1(%rdx), %r9d
    000000f2: 	cmpl	%r9d, %r14d
    000000f5: 	jle	.Ltmp215 # Offset: 245
    000000f7: 	movl	0x4(%r15,%r10), %r9d
    000000fc: 	addl	$0x2, %edx
    000000ff: 	rorl	$0x5, %r9d
    00000103: 	addl	%r9d, %eax
    00000106: 	cmpl	%edx, %r14d
    00000109: 	jle	.Ltmp215 # Offset: 265
    0000010b: 	movl	0x8(%r15,%r10), %edx
    00000110: 	rorl	$0x5, %edx
    00000113: 	addl	%edx, %eax
.Ltmp215:
    00000115: 	movl	%edi, %edx
    00000117: 	rorl	$0x5, %edx
    0000011a: 	imull	$0x1f40, %edx, %edx
    00000120: 	cmpl	%eax, %edx
    00000122: 	je	.Ltmp218 # Offset: 290
    00000124: 	movl	current_test(%rip), %edx
    0000012a: 	movq	%r12, %rsi
    0000012d: 	movl	$0x1, %edi
    00000132: 	xorl	%eax, %eax
    00000134: 	addl	$0x1, %r13d
    00000138: 	callq	__printf_chk@PLT # Offset: 312
    0000013d: 	movl	iterations(%rip), %esi
    00000143: 	cmpl	%r13d, %esi
    00000146: 	jle	.Ltmp214 # Offset: 326
    00000148: 	movl	init_value(%rip), %edi
    0000014e: 	jmp	.Ltmp219 # Offset: 334
    00000153: 	nopl	(%rax,%rax) # Size: 5
.Ltmp218:
    00000158: 	addl	$0x1, %r13d
    0000015c: 	cmpl	%esi, %r13d
    0000015f: 	jl	.Ltmp219 # Offset: 351
.Ltmp214:
    00000165: 	callq	clock@PLT # Offset: 357
    0000016a: 	pxor	%xmm0, %xmm0
    0000016e: 	movq	0x8(%rsp), %rdi
    00000173: 	movq	%rax, end_time(%rip)
    0000017a: 	subq	start_time(%rip), %rax
    00000181: 	cvtsi2sd	%rax, %xmm0
    00000186: 	divsd	DATAat0x99b0(%rip), %xmm0
    0000018e: 	addq	$0x18, %rsp
    00000192: 	popq	%rbx
    00000193: 	popq	%rbp
    00000194: 	popq	%r12
    00000196: 	popq	%r13
    00000198: 	popq	%r14
    0000019a: 	popq	%r15
    0000019c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 412
.Ltmp216:
    000001a1: 	xorl	%edx, %edx
    000001a3: 	xorl	%eax, %eax
    000001a5: 	jmp	.Ltmp220 # Offset: 421
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIj22rotate_right_constant3IjEEvPT_iPKc"

Binary Function "_Z13test_constantIj22rotate_right_constant4IjEEvPT_iPKc" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x5420
  Size        : 0x1aa
  MaxSize     : 0x1b0
  Offset      : 0x5420
  Section     : .text
  Orc Section : .local.text._Z13test_constantIj22rotate_right_constant4IjEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp221 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebp
    0000003e: 	movl	init_value(%rip), %edi
    00000044: 	xorl	%r13d, %r13d
    00000047: 	movl	%eax, 0x4(%rsp)
    0000004b: 	movl	%r14d, %eax
    0000004e: 	andl	$-0x4, %ebp
    00000051: 	leaq	DATAat0x998d(%rip), %r12
    00000058: 	shrl	$0x2, %eax
    0000005b: 	subl	$0x1, %eax
    0000005e: 	shlq	$0x4, %rax
    00000062: 	leaq	0x10(%r15,%rax), %rbx
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp226:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp222 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp223 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm2, %xmm2
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp224:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	movdqa	%xmm0, %xmm1
    0000009c: 	pslld	$0x1b, %xmm0
    000000a1: 	psrld	$0x5, %xmm1
    000000a6: 	por	%xmm1, %xmm0
    000000aa: 	paddd	%xmm0, %xmm2
    000000ae: 	cmpq	%rbx, %rax
    000000b1: 	jne	.Ltmp224 # Offset: 177
    000000b3: 	movdqa	%xmm2, %xmm0
    000000b7: 	movl	%ebp, %edx
    000000b9: 	psrldq	$0x8, %xmm0
    000000be: 	paddd	%xmm0, %xmm2
    000000c2: 	movdqa	%xmm2, %xmm0
    000000c6: 	psrldq	$0x4, %xmm0
    000000cb: 	paddd	%xmm0, %xmm2
    000000cf: 	movd	%xmm2, %eax
    000000d3: 	cmpl	%ebp, %r14d
    000000d6: 	je	.Ltmp222 # Offset: 214
.Ltmp227:
    000000d8: 	movslq	%edx, %r9
    000000db: 	leaq	(,%r9,4), %r10
    000000e3: 	movl	(%r15,%r9,4), %r9d
    000000e7: 	rorl	$0x5, %r9d
    000000eb: 	addl	%r9d, %eax
    000000ee: 	leal	0x1(%rdx), %r9d
    000000f2: 	cmpl	%r9d, %r14d
    000000f5: 	jle	.Ltmp222 # Offset: 245
    000000f7: 	movl	0x4(%r15,%r10), %r9d
    000000fc: 	addl	$0x2, %edx
    000000ff: 	rorl	$0x5, %r9d
    00000103: 	addl	%r9d, %eax
    00000106: 	cmpl	%edx, %r14d
    00000109: 	jle	.Ltmp222 # Offset: 265
    0000010b: 	movl	0x8(%r15,%r10), %edx
    00000110: 	rorl	$0x5, %edx
    00000113: 	addl	%edx, %eax
.Ltmp222:
    00000115: 	movl	%edi, %edx
    00000117: 	rorl	$0x5, %edx
    0000011a: 	imull	$0x1f40, %edx, %edx
    00000120: 	cmpl	%eax, %edx
    00000122: 	je	.Ltmp225 # Offset: 290
    00000124: 	movl	current_test(%rip), %edx
    0000012a: 	movq	%r12, %rsi
    0000012d: 	movl	$0x1, %edi
    00000132: 	xorl	%eax, %eax
    00000134: 	addl	$0x1, %r13d
    00000138: 	callq	__printf_chk@PLT # Offset: 312
    0000013d: 	movl	iterations(%rip), %esi
    00000143: 	cmpl	%r13d, %esi
    00000146: 	jle	.Ltmp221 # Offset: 326
    00000148: 	movl	init_value(%rip), %edi
    0000014e: 	jmp	.Ltmp226 # Offset: 334
    00000153: 	nopl	(%rax,%rax) # Size: 5
.Ltmp225:
    00000158: 	addl	$0x1, %r13d
    0000015c: 	cmpl	%esi, %r13d
    0000015f: 	jl	.Ltmp226 # Offset: 351
.Ltmp221:
    00000165: 	callq	clock@PLT # Offset: 357
    0000016a: 	pxor	%xmm0, %xmm0
    0000016e: 	movq	0x8(%rsp), %rdi
    00000173: 	movq	%rax, end_time(%rip)
    0000017a: 	subq	start_time(%rip), %rax
    00000181: 	cvtsi2sd	%rax, %xmm0
    00000186: 	divsd	DATAat0x99b0(%rip), %xmm0
    0000018e: 	addq	$0x18, %rsp
    00000192: 	popq	%rbx
    00000193: 	popq	%rbp
    00000194: 	popq	%r12
    00000196: 	popq	%r13
    00000198: 	popq	%r14
    0000019a: 	popq	%r15
    0000019c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 412
.Ltmp223:
    000001a1: 	xorl	%edx, %edx
    000001a3: 	xorl	%eax, %eax
    000001a5: 	jmp	.Ltmp227 # Offset: 421
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIj22rotate_right_constant4IjEEvPT_iPKc"

Binary Function "_Z13test_constantIm21rotate_right_constantImEEvPT_iPKc" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x55d0
  Size        : 0x162
  MaxSize     : 0x170
  Offset      : 0x55d0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm21rotate_right_constantImEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp228 # Offset: 49
    00000037: 	movl	%r14d, %eax
    0000003a: 	movl	%r14d, %ebp
    0000003d: 	movl	init_value(%rip), %edi
    00000043: 	xorl	%r15d, %r15d
    00000046: 	shrl	%eax
    00000048: 	andl	$-0x2, %ebp
    0000004b: 	leaq	DATAat0x998d(%rip), %rbx
    00000052: 	subl	$0x1, %eax
    00000055: 	shlq	$0x4, %rax
    00000059: 	leaq	0x10(%r12,%rax), %r13
    0000005e: 	nop # Size: 2
.Ltmp233:
    00000060: 	xorl	%eax, %eax
    00000062: 	testl	%r14d, %r14d
    00000065: 	jle	.Ltmp229 # Offset: 101
    00000067: 	cmpl	$0x1, %r14d
    0000006b: 	je	.Ltmp230 # Offset: 107
    00000071: 	movq	%r12, %rax
    00000074: 	pxor	%xmm2, %xmm2
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp231:
    00000080: 	movdqu	(%rax), %xmm0
    00000084: 	addq	$0x10, %rax
    00000088: 	movdqa	%xmm0, %xmm1
    0000008c: 	psllq	$0x3b, %xmm0
    00000091: 	psrlq	$0x5, %xmm1
    00000096: 	por	%xmm1, %xmm0
    0000009a: 	paddq	%xmm0, %xmm2
    0000009e: 	cmpq	%rax, %r13
    000000a1: 	jne	.Ltmp231 # Offset: 161
    000000a3: 	movdqa	%xmm2, %xmm0
    000000a7: 	movslq	%ebp, %rdx
    000000aa: 	psrldq	$0x8, %xmm0
    000000af: 	paddq	%xmm0, %xmm2
    000000b3: 	movq	%xmm2, %rax
    000000b8: 	cmpl	%r14d, %ebp
    000000bb: 	je	.Ltmp229 # Offset: 187
.Ltmp234:
    000000bd: 	movq	(%r12,%rdx,8), %rdx
    000000c1: 	rorq	$0x5, %rdx
    000000c5: 	addq	%rdx, %rax
.Ltmp229:
    000000c8: 	movq	%rdi, %rdx
    000000cb: 	rorq	$0x5, %rdx
    000000cf: 	imulq	$0x1f40, %rdx, %rdx
    000000d6: 	cmpq	%rax, %rdx
    000000d9: 	je	.Ltmp232 # Offset: 217
    000000db: 	movl	current_test(%rip), %edx
    000000e1: 	movq	%rbx, %rsi
    000000e4: 	movl	$0x1, %edi
    000000e9: 	xorl	%eax, %eax
    000000eb: 	addl	$0x1, %r15d
    000000ef: 	callq	__printf_chk@PLT # Offset: 239
    000000f4: 	movl	iterations(%rip), %esi
    000000fa: 	cmpl	%esi, %r15d
    000000fd: 	jge	.Ltmp228 # Offset: 253
    000000ff: 	movl	init_value(%rip), %edi
    00000105: 	jmp	.Ltmp233 # Offset: 261
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp232:
    00000110: 	addl	$0x1, %r15d
    00000114: 	cmpl	%esi, %r15d
    00000117: 	jl	.Ltmp233 # Offset: 279
.Ltmp228:
    0000011d: 	callq	clock@PLT # Offset: 285
    00000122: 	pxor	%xmm0, %xmm0
    00000126: 	movq	0x8(%rsp), %rdi
    0000012b: 	movq	%rax, end_time(%rip)
    00000132: 	subq	start_time(%rip), %rax
    00000139: 	cvtsi2sd	%rax, %xmm0
    0000013e: 	divsd	DATAat0x99b0(%rip), %xmm0
    00000146: 	addq	$0x18, %rsp
    0000014a: 	popq	%rbx
    0000014b: 	popq	%rbp
    0000014c: 	popq	%r12
    0000014e: 	popq	%r13
    00000150: 	popq	%r14
    00000152: 	popq	%r15
    00000154: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 340
.Ltmp230:
    00000159: 	xorl	%edx, %edx
    0000015b: 	xorl	%eax, %eax
    0000015d: 	jmp	.Ltmp234 # Offset: 349
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm21rotate_right_constantImEEvPT_iPKc"

Binary Function "_Z13test_constantIm22rotate_right_constant2ImEEvPT_iPKc" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x5740
  Size        : 0x162
  MaxSize     : 0x170
  Offset      : 0x5740
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm22rotate_right_constant2ImEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp235 # Offset: 49
    00000037: 	movl	%r14d, %eax
    0000003a: 	movl	%r14d, %ebp
    0000003d: 	movl	init_value(%rip), %edi
    00000043: 	xorl	%r15d, %r15d
    00000046: 	shrl	%eax
    00000048: 	andl	$-0x2, %ebp
    0000004b: 	leaq	DATAat0x998d(%rip), %rbx
    00000052: 	subl	$0x1, %eax
    00000055: 	shlq	$0x4, %rax
    00000059: 	leaq	0x10(%r12,%rax), %r13
    0000005e: 	nop # Size: 2
.Ltmp240:
    00000060: 	xorl	%eax, %eax
    00000062: 	testl	%r14d, %r14d
    00000065: 	jle	.Ltmp236 # Offset: 101
    00000067: 	cmpl	$0x1, %r14d
    0000006b: 	je	.Ltmp237 # Offset: 107
    00000071: 	movq	%r12, %rax
    00000074: 	pxor	%xmm2, %xmm2
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp238:
    00000080: 	movdqu	(%rax), %xmm0
    00000084: 	addq	$0x10, %rax
    00000088: 	movdqa	%xmm0, %xmm1
    0000008c: 	psllq	$0x3b, %xmm0
    00000091: 	psrlq	$0x5, %xmm1
    00000096: 	por	%xmm1, %xmm0
    0000009a: 	paddq	%xmm0, %xmm2
    0000009e: 	cmpq	%rax, %r13
    000000a1: 	jne	.Ltmp238 # Offset: 161
    000000a3: 	movdqa	%xmm2, %xmm0
    000000a7: 	movslq	%ebp, %rdx
    000000aa: 	psrldq	$0x8, %xmm0
    000000af: 	paddq	%xmm0, %xmm2
    000000b3: 	movq	%xmm2, %rax
    000000b8: 	cmpl	%r14d, %ebp
    000000bb: 	je	.Ltmp236 # Offset: 187
.Ltmp241:
    000000bd: 	movq	(%r12,%rdx,8), %rdx
    000000c1: 	rorq	$0x5, %rdx
    000000c5: 	addq	%rdx, %rax
.Ltmp236:
    000000c8: 	movq	%rdi, %rdx
    000000cb: 	rorq	$0x5, %rdx
    000000cf: 	imulq	$0x1f40, %rdx, %rdx
    000000d6: 	cmpq	%rax, %rdx
    000000d9: 	je	.Ltmp239 # Offset: 217
    000000db: 	movl	current_test(%rip), %edx
    000000e1: 	movq	%rbx, %rsi
    000000e4: 	movl	$0x1, %edi
    000000e9: 	xorl	%eax, %eax
    000000eb: 	addl	$0x1, %r15d
    000000ef: 	callq	__printf_chk@PLT # Offset: 239
    000000f4: 	movl	iterations(%rip), %esi
    000000fa: 	cmpl	%esi, %r15d
    000000fd: 	jge	.Ltmp235 # Offset: 253
    000000ff: 	movl	init_value(%rip), %edi
    00000105: 	jmp	.Ltmp240 # Offset: 261
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp239:
    00000110: 	addl	$0x1, %r15d
    00000114: 	cmpl	%esi, %r15d
    00000117: 	jl	.Ltmp240 # Offset: 279
.Ltmp235:
    0000011d: 	callq	clock@PLT # Offset: 285
    00000122: 	pxor	%xmm0, %xmm0
    00000126: 	movq	0x8(%rsp), %rdi
    0000012b: 	movq	%rax, end_time(%rip)
    00000132: 	subq	start_time(%rip), %rax
    00000139: 	cvtsi2sd	%rax, %xmm0
    0000013e: 	divsd	DATAat0x99b0(%rip), %xmm0
    00000146: 	addq	$0x18, %rsp
    0000014a: 	popq	%rbx
    0000014b: 	popq	%rbp
    0000014c: 	popq	%r12
    0000014e: 	popq	%r13
    00000150: 	popq	%r14
    00000152: 	popq	%r15
    00000154: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 340
.Ltmp237:
    00000159: 	xorl	%edx, %edx
    0000015b: 	xorl	%eax, %eax
    0000015d: 	jmp	.Ltmp241 # Offset: 349
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm22rotate_right_constant2ImEEvPT_iPKc"

Binary Function "_Z13test_constantIm22rotate_right_constant3ImEEvPT_iPKc" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x58b0
  Size        : 0x162
  MaxSize     : 0x170
  Offset      : 0x58b0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm22rotate_right_constant3ImEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp242 # Offset: 49
    00000037: 	movl	%r14d, %eax
    0000003a: 	movl	%r14d, %ebp
    0000003d: 	movl	init_value(%rip), %edi
    00000043: 	xorl	%r15d, %r15d
    00000046: 	shrl	%eax
    00000048: 	andl	$-0x2, %ebp
    0000004b: 	leaq	DATAat0x998d(%rip), %rbx
    00000052: 	subl	$0x1, %eax
    00000055: 	shlq	$0x4, %rax
    00000059: 	leaq	0x10(%r12,%rax), %r13
    0000005e: 	nop # Size: 2
.Ltmp247:
    00000060: 	xorl	%eax, %eax
    00000062: 	testl	%r14d, %r14d
    00000065: 	jle	.Ltmp243 # Offset: 101
    00000067: 	cmpl	$0x1, %r14d
    0000006b: 	je	.Ltmp244 # Offset: 107
    00000071: 	movq	%r12, %rax
    00000074: 	pxor	%xmm2, %xmm2
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp245:
    00000080: 	movdqu	(%rax), %xmm0
    00000084: 	addq	$0x10, %rax
    00000088: 	movdqa	%xmm0, %xmm1
    0000008c: 	psllq	$0x3b, %xmm0
    00000091: 	psrlq	$0x5, %xmm1
    00000096: 	por	%xmm1, %xmm0
    0000009a: 	paddq	%xmm0, %xmm2
    0000009e: 	cmpq	%rax, %r13
    000000a1: 	jne	.Ltmp245 # Offset: 161
    000000a3: 	movdqa	%xmm2, %xmm0
    000000a7: 	movslq	%ebp, %rdx
    000000aa: 	psrldq	$0x8, %xmm0
    000000af: 	paddq	%xmm0, %xmm2
    000000b3: 	movq	%xmm2, %rax
    000000b8: 	cmpl	%r14d, %ebp
    000000bb: 	je	.Ltmp243 # Offset: 187
.Ltmp248:
    000000bd: 	movq	(%r12,%rdx,8), %rdx
    000000c1: 	rorq	$0x5, %rdx
    000000c5: 	addq	%rdx, %rax
.Ltmp243:
    000000c8: 	movq	%rdi, %rdx
    000000cb: 	rorq	$0x5, %rdx
    000000cf: 	imulq	$0x1f40, %rdx, %rdx
    000000d6: 	cmpq	%rax, %rdx
    000000d9: 	je	.Ltmp246 # Offset: 217
    000000db: 	movl	current_test(%rip), %edx
    000000e1: 	movq	%rbx, %rsi
    000000e4: 	movl	$0x1, %edi
    000000e9: 	xorl	%eax, %eax
    000000eb: 	addl	$0x1, %r15d
    000000ef: 	callq	__printf_chk@PLT # Offset: 239
    000000f4: 	movl	iterations(%rip), %esi
    000000fa: 	cmpl	%esi, %r15d
    000000fd: 	jge	.Ltmp242 # Offset: 253
    000000ff: 	movl	init_value(%rip), %edi
    00000105: 	jmp	.Ltmp247 # Offset: 261
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp246:
    00000110: 	addl	$0x1, %r15d
    00000114: 	cmpl	%esi, %r15d
    00000117: 	jl	.Ltmp247 # Offset: 279
.Ltmp242:
    0000011d: 	callq	clock@PLT # Offset: 285
    00000122: 	pxor	%xmm0, %xmm0
    00000126: 	movq	0x8(%rsp), %rdi
    0000012b: 	movq	%rax, end_time(%rip)
    00000132: 	subq	start_time(%rip), %rax
    00000139: 	cvtsi2sd	%rax, %xmm0
    0000013e: 	divsd	DATAat0x99b0(%rip), %xmm0
    00000146: 	addq	$0x18, %rsp
    0000014a: 	popq	%rbx
    0000014b: 	popq	%rbp
    0000014c: 	popq	%r12
    0000014e: 	popq	%r13
    00000150: 	popq	%r14
    00000152: 	popq	%r15
    00000154: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 340
.Ltmp244:
    00000159: 	xorl	%edx, %edx
    0000015b: 	xorl	%eax, %eax
    0000015d: 	jmp	.Ltmp248 # Offset: 349
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm22rotate_right_constant3ImEEvPT_iPKc"

Binary Function "_Z13test_constantIm22rotate_right_constant4ImEEvPT_iPKc" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x5a20
  Size        : 0x162
  MaxSize     : 0x170
  Offset      : 0x5a20
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm22rotate_right_constant4ImEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp249 # Offset: 49
    00000037: 	movl	%r14d, %eax
    0000003a: 	movl	%r14d, %ebp
    0000003d: 	movl	init_value(%rip), %edi
    00000043: 	xorl	%r15d, %r15d
    00000046: 	shrl	%eax
    00000048: 	andl	$-0x2, %ebp
    0000004b: 	leaq	DATAat0x998d(%rip), %rbx
    00000052: 	subl	$0x1, %eax
    00000055: 	shlq	$0x4, %rax
    00000059: 	leaq	0x10(%r12,%rax), %r13
    0000005e: 	nop # Size: 2
.Ltmp254:
    00000060: 	xorl	%eax, %eax
    00000062: 	testl	%r14d, %r14d
    00000065: 	jle	.Ltmp250 # Offset: 101
    00000067: 	cmpl	$0x1, %r14d
    0000006b: 	je	.Ltmp251 # Offset: 107
    00000071: 	movq	%r12, %rax
    00000074: 	pxor	%xmm2, %xmm2
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp252:
    00000080: 	movdqu	(%rax), %xmm0
    00000084: 	addq	$0x10, %rax
    00000088: 	movdqa	%xmm0, %xmm1
    0000008c: 	psllq	$0x3b, %xmm0
    00000091: 	psrlq	$0x5, %xmm1
    00000096: 	por	%xmm1, %xmm0
    0000009a: 	paddq	%xmm0, %xmm2
    0000009e: 	cmpq	%rax, %r13
    000000a1: 	jne	.Ltmp252 # Offset: 161
    000000a3: 	movdqa	%xmm2, %xmm0
    000000a7: 	movslq	%ebp, %rdx
    000000aa: 	psrldq	$0x8, %xmm0
    000000af: 	paddq	%xmm0, %xmm2
    000000b3: 	movq	%xmm2, %rax
    000000b8: 	cmpl	%r14d, %ebp
    000000bb: 	je	.Ltmp250 # Offset: 187
.Ltmp255:
    000000bd: 	movq	(%r12,%rdx,8), %rdx
    000000c1: 	rorq	$0x5, %rdx
    000000c5: 	addq	%rdx, %rax
.Ltmp250:
    000000c8: 	movq	%rdi, %rdx
    000000cb: 	rorq	$0x5, %rdx
    000000cf: 	imulq	$0x1f40, %rdx, %rdx
    000000d6: 	cmpq	%rax, %rdx
    000000d9: 	je	.Ltmp253 # Offset: 217
    000000db: 	movl	current_test(%rip), %edx
    000000e1: 	movq	%rbx, %rsi
    000000e4: 	movl	$0x1, %edi
    000000e9: 	xorl	%eax, %eax
    000000eb: 	addl	$0x1, %r15d
    000000ef: 	callq	__printf_chk@PLT # Offset: 239
    000000f4: 	movl	iterations(%rip), %esi
    000000fa: 	cmpl	%esi, %r15d
    000000fd: 	jge	.Ltmp249 # Offset: 253
    000000ff: 	movl	init_value(%rip), %edi
    00000105: 	jmp	.Ltmp254 # Offset: 261
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp253:
    00000110: 	addl	$0x1, %r15d
    00000114: 	cmpl	%esi, %r15d
    00000117: 	jl	.Ltmp254 # Offset: 279
.Ltmp249:
    0000011d: 	callq	clock@PLT # Offset: 285
    00000122: 	pxor	%xmm0, %xmm0
    00000126: 	movq	0x8(%rsp), %rdi
    0000012b: 	movq	%rax, end_time(%rip)
    00000132: 	subq	start_time(%rip), %rax
    00000139: 	cvtsi2sd	%rax, %xmm0
    0000013e: 	divsd	DATAat0x99b0(%rip), %xmm0
    00000146: 	addq	$0x18, %rsp
    0000014a: 	popq	%rbx
    0000014b: 	popq	%rbp
    0000014c: 	popq	%r12
    0000014e: 	popq	%r13
    00000150: 	popq	%r14
    00000152: 	popq	%r15
    00000154: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 340
.Ltmp251:
    00000159: 	xorl	%edx, %edx
    0000015b: 	xorl	%eax, %eax
    0000015d: 	jmp	.Ltmp255 # Offset: 349
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm22rotate_right_constant4ImEEvPT_iPKc"

Binary Function "_Z13test_constantIh20rotate_left_constantIhEEvPT_iPKc" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x5b90
  Size        : 0x30a
  MaxSize     : 0x310
  Offset      : 0x5b90
  Section     : .text
  Orc Section : .local.text._Z13test_constantIh20rotate_left_constantIhEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movl	%esi, %r13d
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp256 # Offset: 49
    00000037: 	leal	-0x1(%r13), %eax
    0000003b: 	movl	%r13d, %ebx
    0000003e: 	movl	init_value(%rip), %edi
    00000044: 	xorl	%r12d, %r12d
    00000047: 	movl	%eax, 0x4(%rsp)
    0000004b: 	movl	%r13d, %eax
    0000004e: 	movdqa	DATAat0x99d0(%rip), %xmm3
    00000056: 	andl	$-0x10, %ebx
    00000059: 	shrl	$0x4, %eax
    0000005c: 	leaq	DATAat0x998d(%rip), %rbp
    00000063: 	subl	$0x1, %eax
    00000066: 	shlq	$0x4, %rax
    0000006a: 	leaq	0x10(%r14,%rax), %r15
    0000006f: 	nop # Size: 1
.Ltmp261:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r13d, %r13d
    00000075: 	jle	.Ltmp257 # Offset: 117
    0000007b: 	cmpl	$0xe, 0x4(%rsp)
    00000080: 	jbe	.Ltmp258 # Offset: 128
    00000086: 	movq	%r14, %rax
    00000089: 	pxor	%xmm2, %xmm2
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp259:
    00000090: 	movdqu	(%rax), %xmm1
    00000094: 	addq	$0x10, %rax
    00000098: 	movdqa	%xmm1, %xmm0
    0000009c: 	paddb	%xmm1, %xmm0
    000000a0: 	psrlw	$0x3, %xmm1
    000000a5: 	paddb	%xmm0, %xmm0
    000000a9: 	pand	%xmm3, %xmm1
    000000ad: 	paddb	%xmm0, %xmm0
    000000b1: 	paddb	%xmm0, %xmm0
    000000b5: 	paddb	%xmm0, %xmm0
    000000b9: 	por	%xmm1, %xmm0
    000000bd: 	paddb	%xmm0, %xmm2
    000000c1: 	cmpq	%r15, %rax
    000000c4: 	jne	.Ltmp259 # Offset: 196
    000000c6: 	movdqa	%xmm2, %xmm0
    000000ca: 	pxor	%xmm4, %xmm4
    000000ce: 	psrldq	$0x8, %xmm0
    000000d3: 	paddb	%xmm0, %xmm2
    000000d7: 	psadbw	%xmm4, %xmm2
    000000db: 	movd	%xmm2, %eax
    000000df: 	cmpl	%r13d, %ebx
    000000e2: 	je	.Ltmp257 # Offset: 226
    000000e8: 	movl	%ebx, %edx
.Ltmp262:
    000000ea: 	movslq	%edx, %r9
    000000ed: 	movzbl	(%r14,%r9), %r9d
    000000f2: 	rorb	$0x3, %r9b
    000000f6: 	addl	%r9d, %eax
    000000f9: 	leal	0x1(%rdx), %r9d
    000000fd: 	cmpl	%r9d, %r13d
    00000100: 	jle	.Ltmp257 # Offset: 256
    00000106: 	movslq	%r9d, %r9
    00000109: 	movzbl	(%r14,%r9), %r9d
    0000010e: 	rorb	$0x3, %r9b
    00000112: 	addl	%r9d, %eax
    00000115: 	leal	0x2(%rdx), %r9d
    00000119: 	cmpl	%r9d, %r13d
    0000011c: 	jle	.Ltmp257 # Offset: 284
    00000122: 	movslq	%r9d, %r9
    00000125: 	movzbl	(%r14,%r9), %r9d
    0000012a: 	rorb	$0x3, %r9b
    0000012e: 	addl	%r9d, %eax
    00000131: 	leal	0x3(%rdx), %r9d
    00000135: 	cmpl	%r13d, %r9d
    00000138: 	jge	.Ltmp257 # Offset: 312
    0000013e: 	movslq	%r9d, %r9
    00000141: 	movzbl	(%r14,%r9), %r9d
    00000146: 	rorb	$0x3, %r9b
    0000014a: 	addl	%r9d, %eax
    0000014d: 	leal	0x4(%rdx), %r9d
    00000151: 	cmpl	%r9d, %r13d
    00000154: 	jle	.Ltmp257 # Offset: 340
    0000015a: 	movslq	%r9d, %r9
    0000015d: 	movzbl	(%r14,%r9), %r9d
    00000162: 	rorb	$0x3, %r9b
    00000166: 	addl	%r9d, %eax
    00000169: 	leal	0x5(%rdx), %r9d
    0000016d: 	cmpl	%r9d, %r13d
    00000170: 	jle	.Ltmp257 # Offset: 368
    00000176: 	movslq	%r9d, %r9
    00000179: 	movzbl	(%r14,%r9), %r9d
    0000017e: 	rorb	$0x3, %r9b
    00000182: 	addl	%r9d, %eax
    00000185: 	leal	0x6(%rdx), %r9d
    00000189: 	cmpl	%r9d, %r13d
    0000018c: 	jle	.Ltmp257 # Offset: 396
    00000192: 	movslq	%r9d, %r9
    00000195: 	movzbl	(%r14,%r9), %r9d
    0000019a: 	rorb	$0x3, %r9b
    0000019e: 	addl	%r9d, %eax
    000001a1: 	leal	0x7(%rdx), %r9d
    000001a5: 	cmpl	%r9d, %r13d
    000001a8: 	jle	.Ltmp257 # Offset: 424
    000001ae: 	movslq	%r9d, %r9
    000001b1: 	movzbl	(%r14,%r9), %r9d
    000001b6: 	rorb	$0x3, %r9b
    000001ba: 	addl	%r9d, %eax
    000001bd: 	leal	0x8(%rdx), %r9d
    000001c1: 	cmpl	%r9d, %r13d
    000001c4: 	jle	.Ltmp257 # Offset: 452
    000001ca: 	movslq	%r9d, %r9
    000001cd: 	movzbl	(%r14,%r9), %r9d
    000001d2: 	rorb	$0x3, %r9b
    000001d6: 	addl	%r9d, %eax
    000001d9: 	leal	0x9(%rdx), %r9d
    000001dd: 	cmpl	%r9d, %r13d
    000001e0: 	jle	.Ltmp257 # Offset: 480
    000001e6: 	movslq	%r9d, %r9
    000001e9: 	movzbl	(%r14,%r9), %r9d
    000001ee: 	rorb	$0x3, %r9b
    000001f2: 	addl	%r9d, %eax
    000001f5: 	leal	0xa(%rdx), %r9d
    000001f9: 	cmpl	%r9d, %r13d
    000001fc: 	jle	.Ltmp257 # Offset: 508
    000001fe: 	movslq	%r9d, %r9
    00000201: 	movzbl	(%r14,%r9), %r9d
    00000206: 	rorb	$0x3, %r9b
    0000020a: 	addl	%r9d, %eax
    0000020d: 	leal	0xb(%rdx), %r9d
    00000211: 	cmpl	%r9d, %r13d
    00000214: 	jle	.Ltmp257 # Offset: 532
    00000216: 	movslq	%r9d, %r9
    00000219: 	movzbl	(%r14,%r9), %r9d
    0000021e: 	rorb	$0x3, %r9b
    00000222: 	addl	%r9d, %eax
    00000225: 	leal	0xc(%rdx), %r9d
    00000229: 	cmpl	%r9d, %r13d
    0000022c: 	jle	.Ltmp257 # Offset: 556
    0000022e: 	movslq	%r9d, %r9
    00000231: 	movzbl	(%r14,%r9), %r9d
    00000236: 	rorb	$0x3, %r9b
    0000023a: 	addl	%r9d, %eax
    0000023d: 	leal	0xd(%rdx), %r9d
    00000241: 	cmpl	%r9d, %r13d
    00000244: 	jle	.Ltmp257 # Offset: 580
    00000246: 	movslq	%r9d, %r9
    00000249: 	addl	$0xe, %edx
    0000024c: 	movzbl	(%r14,%r9), %r9d
    00000251: 	rorb	$0x3, %r9b
    00000255: 	addl	%r9d, %eax
    00000258: 	cmpl	%edx, %r13d
    0000025b: 	jle	.Ltmp257 # Offset: 603
    0000025d: 	movslq	%edx, %rdx
    00000260: 	movzbl	(%r14,%rdx), %edx
    00000265: 	rorb	$0x3, %dl
    00000268: 	addl	%edx, %eax
    0000026a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp257:
    00000270: 	movl	%edi, %edx
    00000272: 	rorb	$0x3, %dl
    00000275: 	shll	$0x6, %edx
    00000278: 	cmpb	%al, %dl
    0000027a: 	je	.Ltmp260 # Offset: 634
    0000027c: 	movl	current_test(%rip), %edx
    00000282: 	movq	%rbp, %rsi
    00000285: 	movl	$0x1, %edi
    0000028a: 	xorl	%eax, %eax
    0000028c: 	addl	$0x1, %r12d
    00000290: 	callq	__printf_chk@PLT # Offset: 656
    00000295: 	movl	iterations(%rip), %esi
    0000029b: 	cmpl	%esi, %r12d
    0000029e: 	jge	.Ltmp256 # Offset: 670
    000002a0: 	movl	init_value(%rip), %edi
    000002a6: 	movdqa	DATAat0x99d0(%rip), %xmm3
    000002ae: 	jmp	.Ltmp261 # Offset: 686
    000002b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp260:
    000002b8: 	addl	$0x1, %r12d
    000002bc: 	cmpl	%esi, %r12d
    000002bf: 	jl	.Ltmp261 # Offset: 703
.Ltmp256:
    000002c5: 	callq	clock@PLT # Offset: 709
    000002ca: 	pxor	%xmm0, %xmm0
    000002ce: 	movq	0x8(%rsp), %rdi
    000002d3: 	movq	%rax, end_time(%rip)
    000002da: 	subq	start_time(%rip), %rax
    000002e1: 	cvtsi2sd	%rax, %xmm0
    000002e6: 	divsd	DATAat0x99b0(%rip), %xmm0
    000002ee: 	addq	$0x18, %rsp
    000002f2: 	popq	%rbx
    000002f3: 	popq	%rbp
    000002f4: 	popq	%r12
    000002f6: 	popq	%r13
    000002f8: 	popq	%r14
    000002fa: 	popq	%r15
    000002fc: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 764
.Ltmp258:
    00000301: 	xorl	%edx, %edx
    00000303: 	xorl	%eax, %eax
    00000305: 	jmp	.Ltmp262 # Offset: 773
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIh20rotate_left_constantIhEEvPT_iPKc"

Binary Function "_Z13test_constantIt20rotate_left_constantItEEvPT_iPKc" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x5ea0
  Size        : 0x214
  MaxSize     : 0x220
  Offset      : 0x5ea0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIt20rotate_left_constantItEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp263 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebx
    0000003e: 	movl	init_value(%rip), %edi
    00000044: 	xorl	%r12d, %r12d
    00000047: 	movl	%eax, 0x4(%rsp)
    0000004b: 	movl	%r14d, %eax
    0000004e: 	andl	$-0x8, %ebx
    00000051: 	leaq	DATAat0x998d(%rip), %rbp
    00000058: 	shrl	$0x3, %eax
    0000005b: 	subl	$0x1, %eax
    0000005e: 	shlq	$0x4, %rax
    00000062: 	leaq	0x10(%r15,%rax), %r13
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp269:
    00000070: 	xorl	%edx, %edx
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp264 # Offset: 117
    0000007b: 	cmpl	$0x6, 0x4(%rsp)
    00000080: 	jbe	.Ltmp265 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm2, %xmm2
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp266:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	movdqa	%xmm0, %xmm1
    0000009c: 	psrlw	$0xb, %xmm0
    000000a1: 	psllw	$0x5, %xmm1
    000000a6: 	por	%xmm1, %xmm0
    000000aa: 	paddw	%xmm0, %xmm2
    000000ae: 	cmpq	%r13, %rax
    000000b1: 	jne	.Ltmp266 # Offset: 177
    000000b3: 	movdqa	%xmm2, %xmm0
    000000b7: 	psrldq	$0x8, %xmm0
    000000bc: 	paddw	%xmm0, %xmm2
    000000c0: 	movdqa	%xmm2, %xmm0
    000000c4: 	psrldq	$0x4, %xmm0
    000000c9: 	paddw	%xmm0, %xmm2
    000000cd: 	movdqa	%xmm2, %xmm0
    000000d1: 	psrldq	$0x2, %xmm0
    000000d6: 	paddw	%xmm0, %xmm2
    000000da: 	pextrw	$0x0, %xmm2, %edx
    000000df: 	cmpl	%r14d, %ebx
    000000e2: 	je	.Ltmp264 # Offset: 226
    000000e8: 	movl	%ebx, %eax
    000000ea: 	movl	%ebx, %ecx
.Ltmp270:
    000000ec: 	movl	%r14d, %r8d
    000000ef: 	subl	%eax, %r8d
    000000f2: 	leal	-0x1(%r8), %r9d
    000000f6: 	cmpl	$0x2, %r9d
    000000fa: 	jbe	.Ltmp267 # Offset: 250
    000000fc: 	movq	(%r15,%rax,2), %xmm1
    00000102: 	movdqa	%xmm1, %xmm0
    00000106: 	psllw	$0x5, %xmm1
    0000010b: 	psrlw	$0xb, %xmm0
    00000110: 	por	%xmm1, %xmm0
    00000114: 	pextrw	$0x0, %xmm0, %eax
    00000119: 	pextrw	$0x1, %xmm0, %r9d
    0000011f: 	addl	%r9d, %eax
    00000122: 	addl	%edx, %eax
    00000124: 	pextrw	$0x2, %xmm0, %edx
    00000129: 	addl	%edx, %eax
    0000012b: 	pextrw	$0x3, %xmm0, %edx
    00000130: 	addl	%eax, %edx
    00000132: 	movl	%r8d, %eax
    00000135: 	andl	$-0x4, %eax
    00000138: 	addl	%eax, %ecx
    0000013a: 	cmpl	%eax, %r8d
    0000013d: 	je	.Ltmp264 # Offset: 317
.Ltmp267:
    0000013f: 	movslq	%ecx, %rax
    00000142: 	leaq	(%rax,%rax), %r8
    00000146: 	movzwl	(%r15,%rax,2), %eax
    0000014b: 	rolw	$0x5, %ax
    0000014f: 	addl	%eax, %edx
    00000151: 	leal	0x1(%rcx), %eax
    00000154: 	cmpl	%eax, %r14d
    00000157: 	jle	.Ltmp264 # Offset: 343
    00000159: 	movzwl	0x2(%r15,%r8), %eax
    0000015f: 	addl	$0x2, %ecx
    00000162: 	rolw	$0x5, %ax
    00000166: 	addl	%eax, %edx
    00000168: 	cmpl	%ecx, %r14d
    0000016b: 	jle	.Ltmp264 # Offset: 363
    0000016d: 	movzwl	0x4(%r15,%r8), %eax
    00000173: 	rolw	$0x5, %ax
    00000177: 	addl	%eax, %edx
.Ltmp264:
    00000179: 	movl	%edi, %eax
    0000017b: 	rolw	$0x5, %ax
    0000017f: 	imulw	$0x1f40, %ax, %ax
    00000184: 	cmpw	%dx, %ax
    00000187: 	je	.Ltmp268 # Offset: 391
    00000189: 	movl	current_test(%rip), %edx
    0000018f: 	movq	%rbp, %rsi
    00000192: 	movl	$0x1, %edi
    00000197: 	xorl	%eax, %eax
    00000199: 	addl	$0x1, %r12d
    0000019d: 	callq	__printf_chk@PLT # Offset: 413
    000001a2: 	movl	iterations(%rip), %esi
    000001a8: 	cmpl	%r12d, %esi
    000001ab: 	jle	.Ltmp263 # Offset: 427
    000001ad: 	movl	init_value(%rip), %edi
    000001b3: 	jmp	.Ltmp269 # Offset: 435
    000001b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp268:
    000001c0: 	addl	$0x1, %r12d
    000001c4: 	cmpl	%esi, %r12d
    000001c7: 	jl	.Ltmp269 # Offset: 455
.Ltmp263:
    000001cd: 	callq	clock@PLT # Offset: 461
    000001d2: 	pxor	%xmm0, %xmm0
    000001d6: 	movq	0x8(%rsp), %rdi
    000001db: 	movq	%rax, end_time(%rip)
    000001e2: 	subq	start_time(%rip), %rax
    000001e9: 	cvtsi2sd	%rax, %xmm0
    000001ee: 	divsd	DATAat0x99b0(%rip), %xmm0
    000001f6: 	addq	$0x18, %rsp
    000001fa: 	popq	%rbx
    000001fb: 	popq	%rbp
    000001fc: 	popq	%r12
    000001fe: 	popq	%r13
    00000200: 	popq	%r14
    00000202: 	popq	%r15
    00000204: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 516
.Ltmp265:
    00000209: 	xorl	%eax, %eax
    0000020b: 	xorl	%ecx, %ecx
    0000020d: 	xorl	%edx, %edx
    0000020f: 	jmp	.Ltmp270 # Offset: 527
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIt20rotate_left_constantItEEvPT_iPKc"

Binary Function "_Z13test_constantIt21rotate_left_constant2ItEEvPT_iPKc" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x60c0
  Size        : 0x212
  MaxSize     : 0x220
  Offset      : 0x60c0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIt21rotate_left_constant2ItEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x18, %rsp
    00000017: 	movq	%rdx, 0x8(%rsp)
    0000001c: 	callq	clock@PLT # Offset: 28
    00000021: 	movl	iterations(%rip), %esi
    00000027: 	movq	%rax, start_time(%rip)
    0000002e: 	testl	%esi, %esi
    00000030: 	jle	.Ltmp271 # Offset: 48
    00000036: 	leal	-0x1(%rbx), %eax
    00000039: 	movl	%ebx, %ebp
    0000003b: 	movl	init_value(%rip), %edi
    00000041: 	xorl	%r13d, %r13d
    00000044: 	movl	%eax, 0x4(%rsp)
    00000048: 	movl	%ebx, %eax
    0000004a: 	andl	$-0x8, %ebp
    0000004d: 	leaq	DATAat0x998d(%rip), %r12
    00000054: 	shrl	$0x3, %eax
    00000057: 	subl	$0x1, %eax
    0000005a: 	shlq	$0x4, %rax
    0000005e: 	leaq	0x10(%r14,%rax), %r15
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp276:
    00000068: 	xorl	%eax, %eax
    0000006a: 	testl	%ebx, %ebx
    0000006c: 	jle	.Ltmp272 # Offset: 108
    00000072: 	cmpl	$0x6, 0x4(%rsp)
    00000077: 	jbe	.Ltmp273 # Offset: 119
    0000007d: 	movq	%r14, %rax
    00000080: 	pxor	%xmm2, %xmm2
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp274:
    00000088: 	movdqu	(%rax), %xmm0
    0000008c: 	addq	$0x10, %rax
    00000090: 	movdqa	%xmm0, %xmm1
    00000094: 	psllw	$0x5, %xmm0
    00000099: 	psrlw	$0xb, %xmm1
    0000009e: 	por	%xmm1, %xmm0
    000000a2: 	paddw	%xmm0, %xmm2
    000000a6: 	cmpq	%r15, %rax
    000000a9: 	jne	.Ltmp274 # Offset: 169
    000000ab: 	movdqa	%xmm2, %xmm0
    000000af: 	psrldq	$0x8, %xmm0
    000000b4: 	paddw	%xmm0, %xmm2
    000000b8: 	movdqa	%xmm2, %xmm0
    000000bc: 	psrldq	$0x4, %xmm0
    000000c1: 	paddw	%xmm0, %xmm2
    000000c5: 	movdqa	%xmm2, %xmm0
    000000c9: 	psrldq	$0x2, %xmm0
    000000ce: 	paddw	%xmm0, %xmm2
    000000d2: 	pextrw	$0x0, %xmm2, %eax
    000000d7: 	cmpl	%ebx, %ebp
    000000d9: 	je	.Ltmp272 # Offset: 217
    000000df: 	movl	%ebp, %edx
.Ltmp277:
    000000e1: 	movslq	%edx, %r10
    000000e4: 	leaq	(%r10,%r10), %r9
    000000e8: 	movzwl	(%r14,%r10,2), %r10d
    000000ed: 	rolw	$0x5, %r10w
    000000f2: 	addl	%r10d, %eax
    000000f5: 	leal	0x1(%rdx), %r10d
    000000f9: 	cmpl	%r10d, %ebx
    000000fc: 	jle	.Ltmp272 # Offset: 252
    000000fe: 	movzwl	0x2(%r14,%r9), %r10d
    00000104: 	rolw	$0x5, %r10w
    00000109: 	addl	%r10d, %eax
    0000010c: 	leal	0x2(%rdx), %r10d
    00000110: 	cmpl	%r10d, %ebx
    00000113: 	jle	.Ltmp272 # Offset: 275
    00000115: 	movzwl	0x4(%r14,%r9), %r10d
    0000011b: 	rolw	$0x5, %r10w
    00000120: 	addl	%r10d, %eax
    00000123: 	leal	0x3(%rdx), %r10d
    00000127: 	cmpl	%r10d, %ebx
    0000012a: 	jle	.Ltmp272 # Offset: 298
    0000012c: 	movzwl	0x6(%r14,%r9), %r10d
    00000132: 	rolw	$0x5, %r10w
    00000137: 	addl	%r10d, %eax
    0000013a: 	leal	0x4(%rdx), %r10d
    0000013e: 	cmpl	%r10d, %ebx
    00000141: 	jle	.Ltmp272 # Offset: 321
    00000143: 	movzwl	0x8(%r14,%r9), %r10d
    00000149: 	rolw	$0x5, %r10w
    0000014e: 	addl	%r10d, %eax
    00000151: 	leal	0x5(%rdx), %r10d
    00000155: 	cmpl	%r10d, %ebx
    00000158: 	jle	.Ltmp272 # Offset: 344
    0000015a: 	movzwl	0xa(%r14,%r9), %r10d
    00000160: 	addl	$0x6, %edx
    00000163: 	rolw	$0x5, %r10w
    00000168: 	addl	%r10d, %eax
    0000016b: 	cmpl	%edx, %ebx
    0000016d: 	jle	.Ltmp272 # Offset: 365
    0000016f: 	movzwl	0xc(%r14,%r9), %edx
    00000175: 	rolw	$0x5, %dx
    00000179: 	addl	%edx, %eax
.Ltmp272:
    0000017b: 	movl	%edi, %edx
    0000017d: 	rolw	$0x5, %dx
    00000181: 	imulw	$0x1f40, %dx, %dx
    00000186: 	cmpw	%ax, %dx
    00000189: 	je	.Ltmp275 # Offset: 393
    0000018b: 	movl	current_test(%rip), %edx
    00000191: 	movq	%r12, %rsi
    00000194: 	movl	$0x1, %edi
    00000199: 	xorl	%eax, %eax
    0000019b: 	addl	$0x1, %r13d
    0000019f: 	callq	__printf_chk@PLT # Offset: 415
    000001a4: 	movl	iterations(%rip), %esi
    000001aa: 	cmpl	%r13d, %esi
    000001ad: 	jle	.Ltmp271 # Offset: 429
    000001af: 	movl	init_value(%rip), %edi
    000001b5: 	jmp	.Ltmp276 # Offset: 437
    000001ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp275:
    000001c0: 	addl	$0x1, %r13d
    000001c4: 	cmpl	%esi, %r13d
    000001c7: 	jl	.Ltmp276 # Offset: 455
.Ltmp271:
    000001cd: 	callq	clock@PLT # Offset: 461
    000001d2: 	pxor	%xmm0, %xmm0
    000001d6: 	movq	0x8(%rsp), %rdi
    000001db: 	movq	%rax, end_time(%rip)
    000001e2: 	subq	start_time(%rip), %rax
    000001e9: 	cvtsi2sd	%rax, %xmm0
    000001ee: 	divsd	DATAat0x99b0(%rip), %xmm0
    000001f6: 	addq	$0x18, %rsp
    000001fa: 	popq	%rbx
    000001fb: 	popq	%rbp
    000001fc: 	popq	%r12
    000001fe: 	popq	%r13
    00000200: 	popq	%r14
    00000202: 	popq	%r15
    00000204: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 516
.Ltmp273:
    00000209: 	xorl	%edx, %edx
    0000020b: 	xorl	%eax, %eax
    0000020d: 	jmp	.Ltmp277 # Offset: 525
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIt21rotate_left_constant2ItEEvPT_iPKc"

Binary Function "_Z13test_constantIt21rotate_left_constant3ItEEvPT_iPKc" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x62e0
  Size        : 0x1f4
  MaxSize     : 0x200
  Offset      : 0x62e0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIt21rotate_left_constant3ItEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp278 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebx
    0000003e: 	movl	init_value(%rip), %edi
    00000044: 	xorl	%r12d, %r12d
    00000047: 	movl	%eax, 0x4(%rsp)
    0000004b: 	movl	%r14d, %eax
    0000004e: 	andl	$-0x8, %ebx
    00000051: 	leaq	DATAat0x998d(%rip), %rbp
    00000058: 	shrl	$0x3, %eax
    0000005b: 	subl	$0x1, %eax
    0000005e: 	shlq	$0x4, %rax
    00000062: 	leaq	0x10(%r15,%rax), %r13
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp284:
    00000070: 	xorl	%edx, %edx
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp279 # Offset: 117
    0000007b: 	cmpl	$0x6, 0x4(%rsp)
    00000080: 	jbe	.Ltmp280 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp281:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	psrlw	$0xb, %xmm0
    0000009d: 	paddw	%xmm0, %xmm1
    000000a1: 	cmpq	%r13, %rax
    000000a4: 	jne	.Ltmp281 # Offset: 164
    000000a6: 	movdqa	%xmm1, %xmm0
    000000aa: 	psrldq	$0x8, %xmm0
    000000af: 	paddw	%xmm0, %xmm1
    000000b3: 	movdqa	%xmm1, %xmm0
    000000b7: 	psrldq	$0x4, %xmm0
    000000bc: 	paddw	%xmm0, %xmm1
    000000c0: 	movdqa	%xmm1, %xmm0
    000000c4: 	psrldq	$0x2, %xmm0
    000000c9: 	paddw	%xmm0, %xmm1
    000000cd: 	pextrw	$0x0, %xmm1, %edx
    000000d2: 	cmpl	%r14d, %ebx
    000000d5: 	je	.Ltmp279 # Offset: 213
    000000db: 	movl	%ebx, %eax
    000000dd: 	movl	%ebx, %ecx
.Ltmp285:
    000000df: 	movl	%r14d, %r8d
    000000e2: 	subl	%eax, %r8d
    000000e5: 	leal	-0x1(%r8), %r9d
    000000e9: 	cmpl	$0x2, %r9d
    000000ed: 	jbe	.Ltmp282 # Offset: 237
    000000ef: 	movq	(%r15,%rax,2), %xmm0
    000000f5: 	psrlw	$0xb, %xmm0
    000000fa: 	pextrw	$0x0, %xmm0, %eax
    000000ff: 	pextrw	$0x1, %xmm0, %r9d
    00000105: 	addl	%r9d, %eax
    00000108: 	addl	%edx, %eax
    0000010a: 	pextrw	$0x2, %xmm0, %edx
    0000010f: 	addl	%edx, %eax
    00000111: 	pextrw	$0x3, %xmm0, %edx
    00000116: 	addl	%eax, %edx
    00000118: 	movl	%r8d, %eax
    0000011b: 	andl	$-0x4, %eax
    0000011e: 	addl	%eax, %ecx
    00000120: 	cmpl	%eax, %r8d
    00000123: 	je	.Ltmp279 # Offset: 291
.Ltmp282:
    00000125: 	movslq	%ecx, %rax
    00000128: 	leaq	(%rax,%rax), %r8
    0000012c: 	movzwl	(%r15,%rax,2), %eax
    00000131: 	shrw	$0xb, %ax
    00000135: 	addl	%eax, %edx
    00000137: 	leal	0x1(%rcx), %eax
    0000013a: 	cmpl	%eax, %r14d
    0000013d: 	jle	.Ltmp279 # Offset: 317
    0000013f: 	movzwl	0x2(%r15,%r8), %eax
    00000145: 	addl	$0x2, %ecx
    00000148: 	shrw	$0xb, %ax
    0000014c: 	addl	%eax, %edx
    0000014e: 	cmpl	%ecx, %r14d
    00000151: 	jle	.Ltmp279 # Offset: 337
    00000153: 	movzwl	0x4(%r15,%r8), %eax
    00000159: 	shrw	$0xb, %ax
    0000015d: 	addl	%eax, %edx
.Ltmp279:
    0000015f: 	movl	%edi, %eax
    00000161: 	shrw	$0xb, %ax
    00000165: 	imulw	$0x1f40, %ax, %ax
    0000016a: 	cmpw	%dx, %ax
    0000016d: 	je	.Ltmp283 # Offset: 365
    0000016f: 	movl	current_test(%rip), %edx
    00000175: 	movq	%rbp, %rsi
    00000178: 	movl	$0x1, %edi
    0000017d: 	xorl	%eax, %eax
    0000017f: 	addl	$0x1, %r12d
    00000183: 	callq	__printf_chk@PLT # Offset: 387
    00000188: 	movl	iterations(%rip), %esi
    0000018e: 	cmpl	%r12d, %esi
    00000191: 	jle	.Ltmp278 # Offset: 401
    00000193: 	movl	init_value(%rip), %edi
    00000199: 	jmp	.Ltmp284 # Offset: 409
    0000019e: 	nop # Size: 2
.Ltmp283:
    000001a0: 	addl	$0x1, %r12d
    000001a4: 	cmpl	%esi, %r12d
    000001a7: 	jl	.Ltmp284 # Offset: 423
.Ltmp278:
    000001ad: 	callq	clock@PLT # Offset: 429
    000001b2: 	pxor	%xmm0, %xmm0
    000001b6: 	movq	0x8(%rsp), %rdi
    000001bb: 	movq	%rax, end_time(%rip)
    000001c2: 	subq	start_time(%rip), %rax
    000001c9: 	cvtsi2sd	%rax, %xmm0
    000001ce: 	divsd	DATAat0x99b0(%rip), %xmm0
    000001d6: 	addq	$0x18, %rsp
    000001da: 	popq	%rbx
    000001db: 	popq	%rbp
    000001dc: 	popq	%r12
    000001de: 	popq	%r13
    000001e0: 	popq	%r14
    000001e2: 	popq	%r15
    000001e4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 484
.Ltmp280:
    000001e9: 	xorl	%eax, %eax
    000001eb: 	xorl	%ecx, %ecx
    000001ed: 	xorl	%edx, %edx
    000001ef: 	jmp	.Ltmp285 # Offset: 495
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIt21rotate_left_constant3ItEEvPT_iPKc"

Binary Function "_Z13test_constantIt21rotate_left_constant4ItEEvPT_iPKc" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x64e0
  Size        : 0x1f4
  MaxSize     : 0x200
  Offset      : 0x64e0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIt21rotate_left_constant4ItEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp286 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebx
    0000003e: 	movl	init_value(%rip), %edi
    00000044: 	xorl	%r12d, %r12d
    00000047: 	movl	%eax, 0x4(%rsp)
    0000004b: 	movl	%r14d, %eax
    0000004e: 	andl	$-0x8, %ebx
    00000051: 	leaq	DATAat0x998d(%rip), %rbp
    00000058: 	shrl	$0x3, %eax
    0000005b: 	subl	$0x1, %eax
    0000005e: 	shlq	$0x4, %rax
    00000062: 	leaq	0x10(%r15,%rax), %r13
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp292:
    00000070: 	xorl	%edx, %edx
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp287 # Offset: 117
    0000007b: 	cmpl	$0x6, 0x4(%rsp)
    00000080: 	jbe	.Ltmp288 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm1, %xmm1
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp289:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	psrlw	$0xb, %xmm0
    0000009d: 	paddw	%xmm0, %xmm1
    000000a1: 	cmpq	%r13, %rax
    000000a4: 	jne	.Ltmp289 # Offset: 164
    000000a6: 	movdqa	%xmm1, %xmm0
    000000aa: 	psrldq	$0x8, %xmm0
    000000af: 	paddw	%xmm0, %xmm1
    000000b3: 	movdqa	%xmm1, %xmm0
    000000b7: 	psrldq	$0x4, %xmm0
    000000bc: 	paddw	%xmm0, %xmm1
    000000c0: 	movdqa	%xmm1, %xmm0
    000000c4: 	psrldq	$0x2, %xmm0
    000000c9: 	paddw	%xmm0, %xmm1
    000000cd: 	pextrw	$0x0, %xmm1, %edx
    000000d2: 	cmpl	%r14d, %ebx
    000000d5: 	je	.Ltmp287 # Offset: 213
    000000db: 	movl	%ebx, %eax
    000000dd: 	movl	%ebx, %ecx
.Ltmp293:
    000000df: 	movl	%r14d, %r8d
    000000e2: 	subl	%eax, %r8d
    000000e5: 	leal	-0x1(%r8), %r9d
    000000e9: 	cmpl	$0x2, %r9d
    000000ed: 	jbe	.Ltmp290 # Offset: 237
    000000ef: 	movq	(%r15,%rax,2), %xmm0
    000000f5: 	psrlw	$0xb, %xmm0
    000000fa: 	pextrw	$0x0, %xmm0, %eax
    000000ff: 	pextrw	$0x1, %xmm0, %r9d
    00000105: 	addl	%r9d, %eax
    00000108: 	addl	%edx, %eax
    0000010a: 	pextrw	$0x2, %xmm0, %edx
    0000010f: 	addl	%edx, %eax
    00000111: 	pextrw	$0x3, %xmm0, %edx
    00000116: 	addl	%eax, %edx
    00000118: 	movl	%r8d, %eax
    0000011b: 	andl	$-0x4, %eax
    0000011e: 	addl	%eax, %ecx
    00000120: 	cmpl	%eax, %r8d
    00000123: 	je	.Ltmp287 # Offset: 291
.Ltmp290:
    00000125: 	movslq	%ecx, %rax
    00000128: 	leaq	(%rax,%rax), %r8
    0000012c: 	movzwl	(%r15,%rax,2), %eax
    00000131: 	shrw	$0xb, %ax
    00000135: 	addl	%eax, %edx
    00000137: 	leal	0x1(%rcx), %eax
    0000013a: 	cmpl	%eax, %r14d
    0000013d: 	jle	.Ltmp287 # Offset: 317
    0000013f: 	movzwl	0x2(%r15,%r8), %eax
    00000145: 	addl	$0x2, %ecx
    00000148: 	shrw	$0xb, %ax
    0000014c: 	addl	%eax, %edx
    0000014e: 	cmpl	%ecx, %r14d
    00000151: 	jle	.Ltmp287 # Offset: 337
    00000153: 	movzwl	0x4(%r15,%r8), %eax
    00000159: 	shrw	$0xb, %ax
    0000015d: 	addl	%eax, %edx
.Ltmp287:
    0000015f: 	movl	%edi, %eax
    00000161: 	shrw	$0xb, %ax
    00000165: 	imulw	$0x1f40, %ax, %ax
    0000016a: 	cmpw	%dx, %ax
    0000016d: 	je	.Ltmp291 # Offset: 365
    0000016f: 	movl	current_test(%rip), %edx
    00000175: 	movq	%rbp, %rsi
    00000178: 	movl	$0x1, %edi
    0000017d: 	xorl	%eax, %eax
    0000017f: 	addl	$0x1, %r12d
    00000183: 	callq	__printf_chk@PLT # Offset: 387
    00000188: 	movl	iterations(%rip), %esi
    0000018e: 	cmpl	%r12d, %esi
    00000191: 	jle	.Ltmp286 # Offset: 401
    00000193: 	movl	init_value(%rip), %edi
    00000199: 	jmp	.Ltmp292 # Offset: 409
    0000019e: 	nop # Size: 2
.Ltmp291:
    000001a0: 	addl	$0x1, %r12d
    000001a4: 	cmpl	%esi, %r12d
    000001a7: 	jl	.Ltmp292 # Offset: 423
.Ltmp286:
    000001ad: 	callq	clock@PLT # Offset: 429
    000001b2: 	pxor	%xmm0, %xmm0
    000001b6: 	movq	0x8(%rsp), %rdi
    000001bb: 	movq	%rax, end_time(%rip)
    000001c2: 	subq	start_time(%rip), %rax
    000001c9: 	cvtsi2sd	%rax, %xmm0
    000001ce: 	divsd	DATAat0x99b0(%rip), %xmm0
    000001d6: 	addq	$0x18, %rsp
    000001da: 	popq	%rbx
    000001db: 	popq	%rbp
    000001dc: 	popq	%r12
    000001de: 	popq	%r13
    000001e0: 	popq	%r14
    000001e2: 	popq	%r15
    000001e4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 484
.Ltmp288:
    000001e9: 	xorl	%eax, %eax
    000001eb: 	xorl	%ecx, %ecx
    000001ed: 	xorl	%edx, %edx
    000001ef: 	jmp	.Ltmp293 # Offset: 495
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIt21rotate_left_constant4ItEEvPT_iPKc"

Binary Function "_Z13test_constantIj20rotate_left_constantIjEEvPT_iPKc" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x66e0
  Size        : 0x1aa
  MaxSize     : 0x1b0
  Offset      : 0x66e0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIj20rotate_left_constantIjEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp294 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebp
    0000003e: 	movl	init_value(%rip), %edi
    00000044: 	xorl	%r13d, %r13d
    00000047: 	movl	%eax, 0x4(%rsp)
    0000004b: 	movl	%r14d, %eax
    0000004e: 	andl	$-0x4, %ebp
    00000051: 	leaq	DATAat0x998d(%rip), %r12
    00000058: 	shrl	$0x2, %eax
    0000005b: 	subl	$0x1, %eax
    0000005e: 	shlq	$0x4, %rax
    00000062: 	leaq	0x10(%r15,%rax), %rbx
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp299:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp295 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp296 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm2, %xmm2
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp297:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	movdqa	%xmm0, %xmm1
    0000009c: 	pslld	$0x5, %xmm0
    000000a1: 	psrld	$0x1b, %xmm1
    000000a6: 	por	%xmm1, %xmm0
    000000aa: 	paddd	%xmm0, %xmm2
    000000ae: 	cmpq	%rbx, %rax
    000000b1: 	jne	.Ltmp297 # Offset: 177
    000000b3: 	movdqa	%xmm2, %xmm0
    000000b7: 	movl	%ebp, %edx
    000000b9: 	psrldq	$0x8, %xmm0
    000000be: 	paddd	%xmm0, %xmm2
    000000c2: 	movdqa	%xmm2, %xmm0
    000000c6: 	psrldq	$0x4, %xmm0
    000000cb: 	paddd	%xmm0, %xmm2
    000000cf: 	movd	%xmm2, %eax
    000000d3: 	cmpl	%ebp, %r14d
    000000d6: 	je	.Ltmp295 # Offset: 214
.Ltmp300:
    000000d8: 	movslq	%edx, %r9
    000000db: 	leaq	(,%r9,4), %r10
    000000e3: 	movl	(%r15,%r9,4), %r9d
    000000e7: 	roll	$0x5, %r9d
    000000eb: 	addl	%r9d, %eax
    000000ee: 	leal	0x1(%rdx), %r9d
    000000f2: 	cmpl	%r9d, %r14d
    000000f5: 	jle	.Ltmp295 # Offset: 245
    000000f7: 	movl	0x4(%r15,%r10), %r9d
    000000fc: 	addl	$0x2, %edx
    000000ff: 	roll	$0x5, %r9d
    00000103: 	addl	%r9d, %eax
    00000106: 	cmpl	%edx, %r14d
    00000109: 	jle	.Ltmp295 # Offset: 265
    0000010b: 	movl	0x8(%r15,%r10), %edx
    00000110: 	roll	$0x5, %edx
    00000113: 	addl	%edx, %eax
.Ltmp295:
    00000115: 	movl	%edi, %edx
    00000117: 	roll	$0x5, %edx
    0000011a: 	imull	$0x1f40, %edx, %edx
    00000120: 	cmpl	%eax, %edx
    00000122: 	je	.Ltmp298 # Offset: 290
    00000124: 	movl	current_test(%rip), %edx
    0000012a: 	movq	%r12, %rsi
    0000012d: 	movl	$0x1, %edi
    00000132: 	xorl	%eax, %eax
    00000134: 	addl	$0x1, %r13d
    00000138: 	callq	__printf_chk@PLT # Offset: 312
    0000013d: 	movl	iterations(%rip), %esi
    00000143: 	cmpl	%r13d, %esi
    00000146: 	jle	.Ltmp294 # Offset: 326
    00000148: 	movl	init_value(%rip), %edi
    0000014e: 	jmp	.Ltmp299 # Offset: 334
    00000153: 	nopl	(%rax,%rax) # Size: 5
.Ltmp298:
    00000158: 	addl	$0x1, %r13d
    0000015c: 	cmpl	%esi, %r13d
    0000015f: 	jl	.Ltmp299 # Offset: 351
.Ltmp294:
    00000165: 	callq	clock@PLT # Offset: 357
    0000016a: 	pxor	%xmm0, %xmm0
    0000016e: 	movq	0x8(%rsp), %rdi
    00000173: 	movq	%rax, end_time(%rip)
    0000017a: 	subq	start_time(%rip), %rax
    00000181: 	cvtsi2sd	%rax, %xmm0
    00000186: 	divsd	DATAat0x99b0(%rip), %xmm0
    0000018e: 	addq	$0x18, %rsp
    00000192: 	popq	%rbx
    00000193: 	popq	%rbp
    00000194: 	popq	%r12
    00000196: 	popq	%r13
    00000198: 	popq	%r14
    0000019a: 	popq	%r15
    0000019c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 412
.Ltmp296:
    000001a1: 	xorl	%edx, %edx
    000001a3: 	xorl	%eax, %eax
    000001a5: 	jmp	.Ltmp300 # Offset: 421
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIj20rotate_left_constantIjEEvPT_iPKc"

Binary Function "_Z13test_constantIj21rotate_left_constant2IjEEvPT_iPKc" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x6890
  Size        : 0x1aa
  MaxSize     : 0x1b0
  Offset      : 0x6890
  Section     : .text
  Orc Section : .local.text._Z13test_constantIj21rotate_left_constant2IjEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp301 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebp
    0000003e: 	movl	init_value(%rip), %edi
    00000044: 	xorl	%r13d, %r13d
    00000047: 	movl	%eax, 0x4(%rsp)
    0000004b: 	movl	%r14d, %eax
    0000004e: 	andl	$-0x4, %ebp
    00000051: 	leaq	DATAat0x998d(%rip), %r12
    00000058: 	shrl	$0x2, %eax
    0000005b: 	subl	$0x1, %eax
    0000005e: 	shlq	$0x4, %rax
    00000062: 	leaq	0x10(%r15,%rax), %rbx
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp306:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp302 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp303 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm2, %xmm2
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp304:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	movdqa	%xmm0, %xmm1
    0000009c: 	pslld	$0x5, %xmm0
    000000a1: 	psrld	$0x1b, %xmm1
    000000a6: 	por	%xmm1, %xmm0
    000000aa: 	paddd	%xmm0, %xmm2
    000000ae: 	cmpq	%rbx, %rax
    000000b1: 	jne	.Ltmp304 # Offset: 177
    000000b3: 	movdqa	%xmm2, %xmm0
    000000b7: 	movl	%ebp, %edx
    000000b9: 	psrldq	$0x8, %xmm0
    000000be: 	paddd	%xmm0, %xmm2
    000000c2: 	movdqa	%xmm2, %xmm0
    000000c6: 	psrldq	$0x4, %xmm0
    000000cb: 	paddd	%xmm0, %xmm2
    000000cf: 	movd	%xmm2, %eax
    000000d3: 	cmpl	%ebp, %r14d
    000000d6: 	je	.Ltmp302 # Offset: 214
.Ltmp307:
    000000d8: 	movslq	%edx, %r9
    000000db: 	leaq	(,%r9,4), %r10
    000000e3: 	movl	(%r15,%r9,4), %r9d
    000000e7: 	roll	$0x5, %r9d
    000000eb: 	addl	%r9d, %eax
    000000ee: 	leal	0x1(%rdx), %r9d
    000000f2: 	cmpl	%r9d, %r14d
    000000f5: 	jle	.Ltmp302 # Offset: 245
    000000f7: 	movl	0x4(%r15,%r10), %r9d
    000000fc: 	addl	$0x2, %edx
    000000ff: 	roll	$0x5, %r9d
    00000103: 	addl	%r9d, %eax
    00000106: 	cmpl	%edx, %r14d
    00000109: 	jle	.Ltmp302 # Offset: 265
    0000010b: 	movl	0x8(%r15,%r10), %edx
    00000110: 	roll	$0x5, %edx
    00000113: 	addl	%edx, %eax
.Ltmp302:
    00000115: 	movl	%edi, %edx
    00000117: 	roll	$0x5, %edx
    0000011a: 	imull	$0x1f40, %edx, %edx
    00000120: 	cmpl	%eax, %edx
    00000122: 	je	.Ltmp305 # Offset: 290
    00000124: 	movl	current_test(%rip), %edx
    0000012a: 	movq	%r12, %rsi
    0000012d: 	movl	$0x1, %edi
    00000132: 	xorl	%eax, %eax
    00000134: 	addl	$0x1, %r13d
    00000138: 	callq	__printf_chk@PLT # Offset: 312
    0000013d: 	movl	iterations(%rip), %esi
    00000143: 	cmpl	%r13d, %esi
    00000146: 	jle	.Ltmp301 # Offset: 326
    00000148: 	movl	init_value(%rip), %edi
    0000014e: 	jmp	.Ltmp306 # Offset: 334
    00000153: 	nopl	(%rax,%rax) # Size: 5
.Ltmp305:
    00000158: 	addl	$0x1, %r13d
    0000015c: 	cmpl	%esi, %r13d
    0000015f: 	jl	.Ltmp306 # Offset: 351
.Ltmp301:
    00000165: 	callq	clock@PLT # Offset: 357
    0000016a: 	pxor	%xmm0, %xmm0
    0000016e: 	movq	0x8(%rsp), %rdi
    00000173: 	movq	%rax, end_time(%rip)
    0000017a: 	subq	start_time(%rip), %rax
    00000181: 	cvtsi2sd	%rax, %xmm0
    00000186: 	divsd	DATAat0x99b0(%rip), %xmm0
    0000018e: 	addq	$0x18, %rsp
    00000192: 	popq	%rbx
    00000193: 	popq	%rbp
    00000194: 	popq	%r12
    00000196: 	popq	%r13
    00000198: 	popq	%r14
    0000019a: 	popq	%r15
    0000019c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 412
.Ltmp303:
    000001a1: 	xorl	%edx, %edx
    000001a3: 	xorl	%eax, %eax
    000001a5: 	jmp	.Ltmp307 # Offset: 421
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIj21rotate_left_constant2IjEEvPT_iPKc"

Binary Function "_Z13test_constantIj21rotate_left_constant3IjEEvPT_iPKc" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x6a40
  Size        : 0x1f3
  MaxSize     : 0x200
  Offset      : 0x6a40
  Section     : .text
  Orc Section : .local.text._Z13test_constantIj21rotate_left_constant3IjEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edi, %edi
    00000031: 	jle	.Ltmp308 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebx
    0000003e: 	movl	init_value(%rip), %esi
    00000044: 	xorl	%r12d, %r12d
    00000047: 	movl	%eax, 0x4(%rsp)
    0000004b: 	movl	%r14d, %eax
    0000004e: 	movdqa	DATAat0x99e0(%rip), %xmm3
    00000056: 	andl	$-0x4, %ebx
    00000059: 	shrl	$0x2, %eax
    0000005c: 	leaq	DATAat0x998d(%rip), %rbp
    00000063: 	subl	$0x1, %eax
    00000066: 	shlq	$0x4, %rax
    0000006a: 	leaq	0x10(%r15,%rax), %r13
    0000006f: 	nop # Size: 1
.Ltmp313:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp309 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp310 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm2, %xmm2
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp311:
    00000090: 	movdqu	(%rax), %xmm1
    00000094: 	addq	$0x10, %rax
    00000098: 	movdqa	%xmm1, %xmm0
    0000009c: 	psrld	$0x1b, %xmm1
    000000a1: 	pslld	$0x5, %xmm0
    000000a6: 	pand	%xmm3, %xmm0
    000000aa: 	por	%xmm1, %xmm0
    000000ae: 	paddd	%xmm0, %xmm2
    000000b2: 	cmpq	%r13, %rax
    000000b5: 	jne	.Ltmp311 # Offset: 181
    000000b7: 	movdqa	%xmm2, %xmm0
    000000bb: 	movl	%ebx, %r9d
    000000be: 	psrldq	$0x8, %xmm0
    000000c3: 	paddd	%xmm0, %xmm2
    000000c7: 	movdqa	%xmm2, %xmm0
    000000cb: 	psrldq	$0x4, %xmm0
    000000d0: 	paddd	%xmm0, %xmm2
    000000d4: 	movd	%xmm2, %eax
    000000d8: 	cmpl	%r14d, %ebx
    000000db: 	je	.Ltmp309 # Offset: 219
.Ltmp314:
    000000dd: 	movslq	%r9d, %rdx
    000000e0: 	movl	(%r15,%rdx,4), %r11d
    000000e4: 	leaq	(,%rdx,4), %r10
    000000ec: 	movl	%r11d, %edx
    000000ef: 	shrl	$0x1b, %r11d
    000000f3: 	shll	$0x5, %edx
    000000f6: 	andl	$0xf8000000, %edx
    000000fc: 	orl	%r11d, %edx
    000000ff: 	addl	%edx, %eax
    00000101: 	leal	0x1(%r9), %edx
    00000105: 	cmpl	%edx, %r14d
    00000108: 	jle	.Ltmp309 # Offset: 264
    0000010a: 	movl	0x4(%r15,%r10), %r11d
    0000010f: 	addl	$0x2, %r9d
    00000113: 	movl	%r11d, %edx
    00000116: 	shrl	$0x1b, %r11d
    0000011a: 	shll	$0x5, %edx
    0000011d: 	andl	$0xf8000000, %edx
    00000123: 	orl	%r11d, %edx
    00000126: 	addl	%edx, %eax
    00000128: 	cmpl	%r9d, %r14d
    0000012b: 	jle	.Ltmp309 # Offset: 299
    0000012d: 	movl	0x8(%r15,%r10), %r9d
    00000132: 	movl	%r9d, %edx
    00000135: 	shrl	$0x1b, %r9d
    00000139: 	shll	$0x5, %edx
    0000013c: 	andl	$0xf8000000, %edx
    00000142: 	orl	%r9d, %edx
    00000145: 	addl	%edx, %eax
.Ltmp309:
    00000147: 	movl	%esi, %edx
    00000149: 	movl	%esi, %r9d
    0000014c: 	shll	$0x5, %edx
    0000014f: 	shrl	$0x1b, %r9d
    00000153: 	andl	$0xf8000000, %edx
    00000159: 	orl	%r9d, %edx
    0000015c: 	imull	$0x1f40, %edx, %edx
    00000162: 	cmpl	%eax, %edx
    00000164: 	je	.Ltmp312 # Offset: 356
    00000166: 	movl	current_test(%rip), %edx
    0000016c: 	movl	$0x1, %edi
    00000171: 	movq	%rbp, %rsi
    00000174: 	xorl	%eax, %eax
    00000176: 	addl	$0x1, %r12d
    0000017a: 	callq	__printf_chk@PLT # Offset: 378
    0000017f: 	movl	iterations(%rip), %edi
    00000185: 	cmpl	%edi, %r12d
    00000188: 	jge	.Ltmp308 # Offset: 392
    0000018a: 	movl	init_value(%rip), %esi
    00000190: 	movdqa	DATAat0x99e0(%rip), %xmm3
    00000198: 	jmp	.Ltmp313 # Offset: 408
    0000019d: 	nopl	(%rax) # Size: 3
.Ltmp312:
    000001a0: 	addl	$0x1, %r12d
    000001a4: 	cmpl	%edi, %r12d
    000001a7: 	jl	.Ltmp313 # Offset: 423
.Ltmp308:
    000001ad: 	callq	clock@PLT # Offset: 429
    000001b2: 	pxor	%xmm0, %xmm0
    000001b6: 	movq	0x8(%rsp), %rdi
    000001bb: 	movq	%rax, end_time(%rip)
    000001c2: 	subq	start_time(%rip), %rax
    000001c9: 	cvtsi2sd	%rax, %xmm0
    000001ce: 	divsd	DATAat0x99b0(%rip), %xmm0
    000001d6: 	addq	$0x18, %rsp
    000001da: 	popq	%rbx
    000001db: 	popq	%rbp
    000001dc: 	popq	%r12
    000001de: 	popq	%r13
    000001e0: 	popq	%r14
    000001e2: 	popq	%r15
    000001e4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 484
.Ltmp310:
    000001e9: 	xorl	%r9d, %r9d
    000001ec: 	xorl	%eax, %eax
    000001ee: 	jmp	.Ltmp314 # Offset: 494
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIj21rotate_left_constant3IjEEvPT_iPKc"

Binary Function "_Z13test_constantIj21rotate_left_constant4IjEEvPT_iPKc" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x6c40
  Size        : 0x1f3
  MaxSize     : 0x200
  Offset      : 0x6c40
  Section     : .text
  Orc Section : .local.text._Z13test_constantIj21rotate_left_constant4IjEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edi, %edi
    00000031: 	jle	.Ltmp315 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebx
    0000003e: 	movl	init_value(%rip), %esi
    00000044: 	xorl	%r12d, %r12d
    00000047: 	movl	%eax, 0x4(%rsp)
    0000004b: 	movl	%r14d, %eax
    0000004e: 	movdqa	DATAat0x99e0(%rip), %xmm3
    00000056: 	andl	$-0x4, %ebx
    00000059: 	shrl	$0x2, %eax
    0000005c: 	leaq	DATAat0x998d(%rip), %rbp
    00000063: 	subl	$0x1, %eax
    00000066: 	shlq	$0x4, %rax
    0000006a: 	leaq	0x10(%r15,%rax), %r13
    0000006f: 	nop # Size: 1
.Ltmp320:
    00000070: 	xorl	%eax, %eax
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp316 # Offset: 117
    0000007b: 	cmpl	$0x2, 0x4(%rsp)
    00000080: 	jbe	.Ltmp317 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm2, %xmm2
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp318:
    00000090: 	movdqu	(%rax), %xmm1
    00000094: 	addq	$0x10, %rax
    00000098: 	movdqa	%xmm1, %xmm0
    0000009c: 	psrld	$0x1b, %xmm1
    000000a1: 	pslld	$0x5, %xmm0
    000000a6: 	pand	%xmm3, %xmm0
    000000aa: 	paddd	%xmm1, %xmm0
    000000ae: 	paddd	%xmm0, %xmm2
    000000b2: 	cmpq	%r13, %rax
    000000b5: 	jne	.Ltmp318 # Offset: 181
    000000b7: 	movdqa	%xmm2, %xmm0
    000000bb: 	movl	%ebx, %r9d
    000000be: 	psrldq	$0x8, %xmm0
    000000c3: 	paddd	%xmm0, %xmm2
    000000c7: 	movdqa	%xmm2, %xmm0
    000000cb: 	psrldq	$0x4, %xmm0
    000000d0: 	paddd	%xmm0, %xmm2
    000000d4: 	movd	%xmm2, %eax
    000000d8: 	cmpl	%r14d, %ebx
    000000db: 	je	.Ltmp316 # Offset: 219
.Ltmp321:
    000000dd: 	movslq	%r9d, %rdx
    000000e0: 	leaq	(,%rdx,4), %r10
    000000e8: 	movl	(%r15,%rdx,4), %edx
    000000ec: 	movl	%edx, %r11d
    000000ef: 	shll	$0x5, %edx
    000000f2: 	shrl	$0x1b, %r11d
    000000f6: 	andl	$0xf8000000, %edx
    000000fc: 	addl	%r11d, %eax
    000000ff: 	addl	%edx, %eax
    00000101: 	leal	0x1(%r9), %edx
    00000105: 	cmpl	%edx, %r14d
    00000108: 	jle	.Ltmp316 # Offset: 264
    0000010a: 	movl	0x4(%r15,%r10), %r11d
    0000010f: 	addl	$0x2, %r9d
    00000113: 	movl	%r11d, %edx
    00000116: 	shrl	$0x1b, %r11d
    0000011a: 	shll	$0x5, %edx
    0000011d: 	andl	$0xf8000000, %edx
    00000123: 	addl	%r11d, %edx
    00000126: 	addl	%edx, %eax
    00000128: 	cmpl	%r9d, %r14d
    0000012b: 	jle	.Ltmp316 # Offset: 299
    0000012d: 	movl	0x8(%r15,%r10), %r9d
    00000132: 	movl	%r9d, %edx
    00000135: 	shrl	$0x1b, %r9d
    00000139: 	shll	$0x5, %edx
    0000013c: 	andl	$0xf8000000, %edx
    00000142: 	addl	%r9d, %edx
    00000145: 	addl	%edx, %eax
.Ltmp316:
    00000147: 	movl	%esi, %edx
    00000149: 	movl	%esi, %r9d
    0000014c: 	shll	$0x5, %edx
    0000014f: 	shrl	$0x1b, %r9d
    00000153: 	andl	$0xf8000000, %edx
    00000159: 	addl	%r9d, %edx
    0000015c: 	imull	$0x1f40, %edx, %edx
    00000162: 	cmpl	%eax, %edx
    00000164: 	je	.Ltmp319 # Offset: 356
    00000166: 	movl	current_test(%rip), %edx
    0000016c: 	movl	$0x1, %edi
    00000171: 	movq	%rbp, %rsi
    00000174: 	xorl	%eax, %eax
    00000176: 	addl	$0x1, %r12d
    0000017a: 	callq	__printf_chk@PLT # Offset: 378
    0000017f: 	movl	iterations(%rip), %edi
    00000185: 	cmpl	%edi, %r12d
    00000188: 	jge	.Ltmp315 # Offset: 392
    0000018a: 	movl	init_value(%rip), %esi
    00000190: 	movdqa	DATAat0x99e0(%rip), %xmm3
    00000198: 	jmp	.Ltmp320 # Offset: 408
    0000019d: 	nopl	(%rax) # Size: 3
.Ltmp319:
    000001a0: 	addl	$0x1, %r12d
    000001a4: 	cmpl	%edi, %r12d
    000001a7: 	jl	.Ltmp320 # Offset: 423
.Ltmp315:
    000001ad: 	callq	clock@PLT # Offset: 429
    000001b2: 	pxor	%xmm0, %xmm0
    000001b6: 	movq	0x8(%rsp), %rdi
    000001bb: 	movq	%rax, end_time(%rip)
    000001c2: 	subq	start_time(%rip), %rax
    000001c9: 	cvtsi2sd	%rax, %xmm0
    000001ce: 	divsd	DATAat0x99b0(%rip), %xmm0
    000001d6: 	addq	$0x18, %rsp
    000001da: 	popq	%rbx
    000001db: 	popq	%rbp
    000001dc: 	popq	%r12
    000001de: 	popq	%r13
    000001e0: 	popq	%r14
    000001e2: 	popq	%r15
    000001e4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 484
.Ltmp317:
    000001e9: 	xorl	%r9d, %r9d
    000001ec: 	xorl	%eax, %eax
    000001ee: 	jmp	.Ltmp321 # Offset: 494
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIj21rotate_left_constant4IjEEvPT_iPKc"

Binary Function "_Z13test_constantIm20rotate_left_constantImEEvPT_iPKc" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x6e40
  Size        : 0x162
  MaxSize     : 0x170
  Offset      : 0x6e40
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm20rotate_left_constantImEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp322 # Offset: 49
    00000037: 	movl	%r14d, %eax
    0000003a: 	movl	%r14d, %ebp
    0000003d: 	movl	init_value(%rip), %edi
    00000043: 	xorl	%r15d, %r15d
    00000046: 	shrl	%eax
    00000048: 	andl	$-0x2, %ebp
    0000004b: 	leaq	DATAat0x998d(%rip), %rbx
    00000052: 	subl	$0x1, %eax
    00000055: 	shlq	$0x4, %rax
    00000059: 	leaq	0x10(%r12,%rax), %r13
    0000005e: 	nop # Size: 2
.Ltmp327:
    00000060: 	xorl	%eax, %eax
    00000062: 	testl	%r14d, %r14d
    00000065: 	jle	.Ltmp323 # Offset: 101
    00000067: 	cmpl	$0x1, %r14d
    0000006b: 	je	.Ltmp324 # Offset: 107
    00000071: 	movq	%r12, %rax
    00000074: 	pxor	%xmm2, %xmm2
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp325:
    00000080: 	movdqu	(%rax), %xmm0
    00000084: 	addq	$0x10, %rax
    00000088: 	movdqa	%xmm0, %xmm1
    0000008c: 	psllq	$0x5, %xmm0
    00000091: 	psrlq	$0x3b, %xmm1
    00000096: 	por	%xmm1, %xmm0
    0000009a: 	paddq	%xmm0, %xmm2
    0000009e: 	cmpq	%rax, %r13
    000000a1: 	jne	.Ltmp325 # Offset: 161
    000000a3: 	movdqa	%xmm2, %xmm0
    000000a7: 	movslq	%ebp, %rdx
    000000aa: 	psrldq	$0x8, %xmm0
    000000af: 	paddq	%xmm0, %xmm2
    000000b3: 	movq	%xmm2, %rax
    000000b8: 	cmpl	%r14d, %ebp
    000000bb: 	je	.Ltmp323 # Offset: 187
.Ltmp328:
    000000bd: 	movq	(%r12,%rdx,8), %rdx
    000000c1: 	rolq	$0x5, %rdx
    000000c5: 	addq	%rdx, %rax
.Ltmp323:
    000000c8: 	movq	%rdi, %rdx
    000000cb: 	rolq	$0x5, %rdx
    000000cf: 	imulq	$0x1f40, %rdx, %rdx
    000000d6: 	cmpq	%rax, %rdx
    000000d9: 	je	.Ltmp326 # Offset: 217
    000000db: 	movl	current_test(%rip), %edx
    000000e1: 	movq	%rbx, %rsi
    000000e4: 	movl	$0x1, %edi
    000000e9: 	xorl	%eax, %eax
    000000eb: 	addl	$0x1, %r15d
    000000ef: 	callq	__printf_chk@PLT # Offset: 239
    000000f4: 	movl	iterations(%rip), %esi
    000000fa: 	cmpl	%esi, %r15d
    000000fd: 	jge	.Ltmp322 # Offset: 253
    000000ff: 	movl	init_value(%rip), %edi
    00000105: 	jmp	.Ltmp327 # Offset: 261
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp326:
    00000110: 	addl	$0x1, %r15d
    00000114: 	cmpl	%esi, %r15d
    00000117: 	jl	.Ltmp327 # Offset: 279
.Ltmp322:
    0000011d: 	callq	clock@PLT # Offset: 285
    00000122: 	pxor	%xmm0, %xmm0
    00000126: 	movq	0x8(%rsp), %rdi
    0000012b: 	movq	%rax, end_time(%rip)
    00000132: 	subq	start_time(%rip), %rax
    00000139: 	cvtsi2sd	%rax, %xmm0
    0000013e: 	divsd	DATAat0x99b0(%rip), %xmm0
    00000146: 	addq	$0x18, %rsp
    0000014a: 	popq	%rbx
    0000014b: 	popq	%rbp
    0000014c: 	popq	%r12
    0000014e: 	popq	%r13
    00000150: 	popq	%r14
    00000152: 	popq	%r15
    00000154: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 340
.Ltmp324:
    00000159: 	xorl	%edx, %edx
    0000015b: 	xorl	%eax, %eax
    0000015d: 	jmp	.Ltmp328 # Offset: 349
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm20rotate_left_constantImEEvPT_iPKc"

Binary Function "_Z13test_constantIm21rotate_left_constant2ImEEvPT_iPKc" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x6fb0
  Size        : 0x162
  MaxSize     : 0x170
  Offset      : 0x6fb0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm21rotate_left_constant2ImEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp329 # Offset: 49
    00000037: 	movl	%r14d, %eax
    0000003a: 	movl	%r14d, %ebp
    0000003d: 	movl	init_value(%rip), %edi
    00000043: 	xorl	%r15d, %r15d
    00000046: 	shrl	%eax
    00000048: 	andl	$-0x2, %ebp
    0000004b: 	leaq	DATAat0x998d(%rip), %rbx
    00000052: 	subl	$0x1, %eax
    00000055: 	shlq	$0x4, %rax
    00000059: 	leaq	0x10(%r12,%rax), %r13
    0000005e: 	nop # Size: 2
.Ltmp334:
    00000060: 	xorl	%eax, %eax
    00000062: 	testl	%r14d, %r14d
    00000065: 	jle	.Ltmp330 # Offset: 101
    00000067: 	cmpl	$0x1, %r14d
    0000006b: 	je	.Ltmp331 # Offset: 107
    00000071: 	movq	%r12, %rax
    00000074: 	pxor	%xmm2, %xmm2
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp332:
    00000080: 	movdqu	(%rax), %xmm0
    00000084: 	addq	$0x10, %rax
    00000088: 	movdqa	%xmm0, %xmm1
    0000008c: 	psllq	$0x5, %xmm0
    00000091: 	psrlq	$0x3b, %xmm1
    00000096: 	por	%xmm1, %xmm0
    0000009a: 	paddq	%xmm0, %xmm2
    0000009e: 	cmpq	%rax, %r13
    000000a1: 	jne	.Ltmp332 # Offset: 161
    000000a3: 	movdqa	%xmm2, %xmm0
    000000a7: 	movslq	%ebp, %rdx
    000000aa: 	psrldq	$0x8, %xmm0
    000000af: 	paddq	%xmm0, %xmm2
    000000b3: 	movq	%xmm2, %rax
    000000b8: 	cmpl	%r14d, %ebp
    000000bb: 	je	.Ltmp330 # Offset: 187
.Ltmp335:
    000000bd: 	movq	(%r12,%rdx,8), %rdx
    000000c1: 	rolq	$0x5, %rdx
    000000c5: 	addq	%rdx, %rax
.Ltmp330:
    000000c8: 	movq	%rdi, %rdx
    000000cb: 	rolq	$0x5, %rdx
    000000cf: 	imulq	$0x1f40, %rdx, %rdx
    000000d6: 	cmpq	%rax, %rdx
    000000d9: 	je	.Ltmp333 # Offset: 217
    000000db: 	movl	current_test(%rip), %edx
    000000e1: 	movq	%rbx, %rsi
    000000e4: 	movl	$0x1, %edi
    000000e9: 	xorl	%eax, %eax
    000000eb: 	addl	$0x1, %r15d
    000000ef: 	callq	__printf_chk@PLT # Offset: 239
    000000f4: 	movl	iterations(%rip), %esi
    000000fa: 	cmpl	%esi, %r15d
    000000fd: 	jge	.Ltmp329 # Offset: 253
    000000ff: 	movl	init_value(%rip), %edi
    00000105: 	jmp	.Ltmp334 # Offset: 261
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp333:
    00000110: 	addl	$0x1, %r15d
    00000114: 	cmpl	%esi, %r15d
    00000117: 	jl	.Ltmp334 # Offset: 279
.Ltmp329:
    0000011d: 	callq	clock@PLT # Offset: 285
    00000122: 	pxor	%xmm0, %xmm0
    00000126: 	movq	0x8(%rsp), %rdi
    0000012b: 	movq	%rax, end_time(%rip)
    00000132: 	subq	start_time(%rip), %rax
    00000139: 	cvtsi2sd	%rax, %xmm0
    0000013e: 	divsd	DATAat0x99b0(%rip), %xmm0
    00000146: 	addq	$0x18, %rsp
    0000014a: 	popq	%rbx
    0000014b: 	popq	%rbp
    0000014c: 	popq	%r12
    0000014e: 	popq	%r13
    00000150: 	popq	%r14
    00000152: 	popq	%r15
    00000154: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 340
.Ltmp331:
    00000159: 	xorl	%edx, %edx
    0000015b: 	xorl	%eax, %eax
    0000015d: 	jmp	.Ltmp335 # Offset: 349
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm21rotate_left_constant2ImEEvPT_iPKc"

Binary Function "_Z13test_constantIm21rotate_left_constant3ImEEvPT_iPKc" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x7120
  Size        : 0x16c
  MaxSize     : 0x170
  Offset      : 0x7120
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm21rotate_left_constant3ImEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %r8d
    00000029: 	movq	%rax, start_time(%rip)
    00000030: 	testl	%r8d, %r8d
    00000033: 	jle	.Ltmp336 # Offset: 51
    00000039: 	movl	%r14d, %eax
    0000003c: 	movl	%r14d, %ecx
    0000003f: 	leaq	DATAat0x998d(%rip), %rbp
    00000046: 	xorl	%r15d, %r15d
    00000049: 	shrl	%eax
    0000004b: 	andl	$-0x2, %ecx
    0000004e: 	movdqa	DATAat0x99f0(%rip), %xmm3
    00000056: 	movabsq	$-0x800000000000000, %r12
    00000060: 	subl	$0x1, %eax
    00000063: 	shlq	$0x4, %rax
    00000067: 	leaq	0x10(%rbx,%rax), %r13
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp341:
    00000070: 	testl	%r14d, %r14d
    00000073: 	jle	.Ltmp337 # Offset: 115
    00000079: 	cmpl	$0x1, %r14d
    0000007d: 	je	.Ltmp338 # Offset: 125
    00000083: 	movq	%rbx, %rax
    00000086: 	pxor	%xmm2, %xmm2
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp339:
    00000090: 	movdqu	(%rax), %xmm1
    00000094: 	addq	$0x10, %rax
    00000098: 	movdqa	%xmm1, %xmm0
    0000009c: 	psrlq	$0x3b, %xmm1
    000000a1: 	psllq	$0x5, %xmm0
    000000a6: 	pand	%xmm3, %xmm0
    000000aa: 	por	%xmm1, %xmm0
    000000ae: 	paddq	%xmm0, %xmm2
    000000b2: 	cmpq	%rax, %r13
    000000b5: 	jne	.Ltmp339 # Offset: 181
    000000b7: 	movdqa	%xmm2, %xmm0
    000000bb: 	movslq	%ecx, %rax
    000000be: 	psrldq	$0x8, %xmm0
    000000c3: 	paddq	%xmm0, %xmm2
    000000c7: 	movq	%xmm2, %rdi
    000000cc: 	cmpl	%r14d, %ecx
    000000cf: 	je	.Ltmp340 # Offset: 207
.Ltmp342:
    000000d1: 	movq	(%rbx,%rax,8), %rdx
    000000d5: 	movq	%rdx, %rax
    000000d8: 	shrq	$0x3b, %rdx
    000000dc: 	shlq	$0x5, %rax
    000000e0: 	andq	%r12, %rax
    000000e3: 	orq	%rdx, %rax
    000000e6: 	addq	%rax, %rdi
.Ltmp340:
    000000e9: 	testq	%rdi, %rdi
    000000ec: 	je	.Ltmp337 # Offset: 236
    000000ee: 	movl	current_test(%rip), %edx
    000000f4: 	movq	%rbp, %rsi
    000000f7: 	movl	$0x1, %edi
    000000fc: 	xorl	%eax, %eax
    000000fe: 	movl	%ecx, 0x4(%rsp)
    00000102: 	callq	__printf_chk@PLT # Offset: 258
    00000107: 	movl	iterations(%rip), %r8d
    0000010e: 	movl	0x4(%rsp), %ecx
    00000112: 	movdqa	DATAat0x99f0(%rip), %xmm3
.Ltmp337:
    0000011a: 	addl	$0x1, %r15d
    0000011e: 	cmpl	%r8d, %r15d
    00000121: 	jl	.Ltmp341 # Offset: 289
.Ltmp336:
    00000127: 	callq	clock@PLT # Offset: 295
    0000012c: 	pxor	%xmm0, %xmm0
    00000130: 	movq	0x8(%rsp), %rdi
    00000135: 	movq	%rax, end_time(%rip)
    0000013c: 	subq	start_time(%rip), %rax
    00000143: 	cvtsi2sd	%rax, %xmm0
    00000148: 	divsd	DATAat0x99b0(%rip), %xmm0
    00000150: 	addq	$0x18, %rsp
    00000154: 	popq	%rbx
    00000155: 	popq	%rbp
    00000156: 	popq	%r12
    00000158: 	popq	%r13
    0000015a: 	popq	%r14
    0000015c: 	popq	%r15
    0000015e: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 350
.Ltmp338:
    00000163: 	xorl	%eax, %eax
    00000165: 	xorl	%edi, %edi
    00000167: 	jmp	.Ltmp342 # Offset: 359
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm21rotate_left_constant3ImEEvPT_iPKc"

Binary Function "_Z13test_constantIm21rotate_left_constant4ImEEvPT_iPKc" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x7290
  Size        : 0x16b
  MaxSize     : 0x170
  Offset      : 0x7290
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm21rotate_left_constant4ImEEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edi, %edi
    00000031: 	jle	.Ltmp343 # Offset: 49
    00000037: 	movl	%r14d, %eax
    0000003a: 	movl	%r14d, %ecx
    0000003d: 	leaq	DATAat0x998d(%rip), %rbp
    00000044: 	xorl	%r15d, %r15d
    00000047: 	shrl	%eax
    00000049: 	andl	$-0x2, %ecx
    0000004c: 	movdqa	DATAat0x99f0(%rip), %xmm3
    00000054: 	movabsq	$-0x800000000000000, %r12
    0000005e: 	subl	$0x1, %eax
    00000061: 	shlq	$0x4, %rax
    00000065: 	leaq	0x10(%rbx,%rax), %r13
    0000006a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp348:
    00000070: 	testl	%r14d, %r14d
    00000073: 	jle	.Ltmp344 # Offset: 115
    00000079: 	cmpl	$0x1, %r14d
    0000007d: 	je	.Ltmp345 # Offset: 125
    00000083: 	movq	%rbx, %rax
    00000086: 	pxor	%xmm0, %xmm0
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp346:
    00000090: 	movdqu	(%rax), %xmm2
    00000094: 	addq	$0x10, %rax
    00000098: 	movdqa	%xmm2, %xmm1
    0000009c: 	psrlq	$0x3b, %xmm2
    000000a1: 	psllq	$0x5, %xmm1
    000000a6: 	pand	%xmm3, %xmm1
    000000aa: 	paddq	%xmm2, %xmm1
    000000ae: 	paddq	%xmm1, %xmm0
    000000b2: 	cmpq	%rax, %r13
    000000b5: 	jne	.Ltmp346 # Offset: 181
    000000b7: 	movdqa	%xmm0, %xmm1
    000000bb: 	movslq	%ecx, %rax
    000000be: 	psrldq	$0x8, %xmm1
    000000c3: 	paddq	%xmm1, %xmm0
    000000c7: 	movq	%xmm0, %rdx
    000000cc: 	cmpl	%r14d, %ecx
    000000cf: 	je	.Ltmp347 # Offset: 207
.Ltmp349:
    000000d1: 	movq	(%rbx,%rax,8), %rax
    000000d5: 	movq	%rax, %r8
    000000d8: 	shlq	$0x5, %rax
    000000dc: 	shrq	$0x3b, %r8
    000000e0: 	andq	%r12, %rax
    000000e3: 	addq	%r8, %rdx
    000000e6: 	addq	%rax, %rdx
.Ltmp347:
    000000e9: 	testq	%rdx, %rdx
    000000ec: 	je	.Ltmp344 # Offset: 236
    000000ee: 	movl	current_test(%rip), %edx
    000000f4: 	movl	$0x1, %edi
    000000f9: 	movq	%rbp, %rsi
    000000fc: 	xorl	%eax, %eax
    000000fe: 	movl	%ecx, 0x4(%rsp)
    00000102: 	callq	__printf_chk@PLT # Offset: 258
    00000107: 	movl	iterations(%rip), %edi
    0000010d: 	movl	0x4(%rsp), %ecx
    00000111: 	movdqa	DATAat0x99f0(%rip), %xmm3
.Ltmp344:
    00000119: 	addl	$0x1, %r15d
    0000011d: 	cmpl	%edi, %r15d
    00000120: 	jl	.Ltmp348 # Offset: 288
.Ltmp343:
    00000126: 	callq	clock@PLT # Offset: 294
    0000012b: 	pxor	%xmm0, %xmm0
    0000012f: 	movq	0x8(%rsp), %rdi
    00000134: 	movq	%rax, end_time(%rip)
    0000013b: 	subq	start_time(%rip), %rax
    00000142: 	cvtsi2sd	%rax, %xmm0
    00000147: 	divsd	DATAat0x99b0(%rip), %xmm0
    0000014f: 	addq	$0x18, %rsp
    00000153: 	popq	%rbx
    00000154: 	popq	%rbp
    00000155: 	popq	%r12
    00000157: 	popq	%r13
    00000159: 	popq	%r14
    0000015b: 	popq	%r15
    0000015d: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 349
.Ltmp345:
    00000162: 	xorl	%eax, %eax
    00000164: 	xorl	%edx, %edx
    00000166: 	jmp	.Ltmp349 # Offset: 358
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm21rotate_left_constant4ImEEvPT_iPKc"

Binary Function "_Z19test_variable_shiftIj22rotate_right_variable3IjEEvPT_iiPKc" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x7400
  Size        : 0x232
  MaxSize     : 0x240
  Offset      : 0x7400
  Section     : .text
  Orc Section : .local.text._Z19test_variable_shiftIj22rotate_right_variable3IjEEvPT_iiPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movl	%edx, %ebp
    00000015: 	pushq	%rbx
    00000016: 	subq	$0x28, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	callq	clock@PLT # Offset: 31
    00000024: 	movl	iterations(%rip), %r10d
    0000002b: 	movq	%rax, start_time(%rip)
    00000032: 	testl	%r10d, %r10d
    00000035: 	jle	.Ltmp350 # Offset: 53
    0000003b: 	leal	-0x1(%r14), %eax
    0000003f: 	xorl	%r8d, %r8d
    00000042: 	movl	$0xffffffff, %r13d
    00000048: 	movl	%ebp, %ecx
    0000004a: 	movl	%eax, 0x8(%rsp)
    0000004e: 	movl	%r14d, %eax
    00000051: 	movl	$0x20, %r12d
    00000057: 	shrl	%cl, %r13d
    0000005a: 	shrl	$0x2, %eax
    0000005d: 	movl	init_value(%rip), %edi
    00000063: 	subl	%ebp, %r12d
    00000066: 	subl	$0x1, %eax
    00000069: 	shlq	$0x4, %rax
    0000006d: 	leaq	0x10(%r15,%rax), %rbx
    00000072: 	movl	%r14d, %eax
    00000075: 	andl	$-0x4, %eax
    00000078: 	movl	%eax, 0xc(%rsp)
    0000007c: 	movq	%r15, %rax
    0000007f: 	movl	%r8d, %r15d
    00000082: 	movq	%rax, %r8
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp355:
    00000088: 	xorl	%edx, %edx
    0000008a: 	testl	%r14d, %r14d
    0000008d: 	jle	.Ltmp351 # Offset: 141
    00000093: 	cmpl	$0x2, 0x8(%rsp)
    00000098: 	jbe	.Ltmp352 # Offset: 152
    0000009e: 	movd	%r13d, %xmm6
    000000a3: 	pxor	%xmm1, %xmm1
    000000a7: 	movd	%ebp, %xmm3
    000000ab: 	movq	%r8, %rax
    000000ae: 	pshufd	$0x0, %xmm6, %xmm5
    000000b3: 	movd	%r12d, %xmm4
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp353:
    000000c0: 	movdqu	(%rax), %xmm0
    000000c4: 	addq	$0x10, %rax
    000000c8: 	movdqa	%xmm0, %xmm2
    000000cc: 	psrld	%xmm3, %xmm0
    000000d0: 	pslld	%xmm4, %xmm2
    000000d4: 	pxor	%xmm2, %xmm0
    000000d8: 	pand	%xmm5, %xmm0
    000000dc: 	pxor	%xmm2, %xmm0
    000000e0: 	paddd	%xmm0, %xmm1
    000000e4: 	cmpq	%rbx, %rax
    000000e7: 	jne	.Ltmp353 # Offset: 231
    000000e9: 	movdqa	%xmm1, %xmm0
    000000ed: 	movl	0xc(%rsp), %eax
    000000f1: 	psrldq	$0x8, %xmm0
    000000f6: 	paddd	%xmm0, %xmm1
    000000fa: 	movl	%eax, %esi
    000000fc: 	movdqa	%xmm1, %xmm0
    00000100: 	psrldq	$0x4, %xmm0
    00000105: 	paddd	%xmm0, %xmm1
    00000109: 	movd	%xmm1, %edx
    0000010d: 	cmpl	%r14d, %eax
    00000110: 	je	.Ltmp351 # Offset: 272
.Ltmp356:
    00000112: 	movslq	%esi, %rax
    00000115: 	movl	%r12d, %ecx
    00000118: 	leaq	(,%rax,4), %r9
    00000120: 	movl	(%r8,%rax,4), %eax
    00000124: 	movl	%eax, %r11d
    00000127: 	shll	%cl, %r11d
    0000012a: 	movl	%ebp, %ecx
    0000012c: 	shrl	%cl, %eax
    0000012e: 	xorl	%r11d, %eax
    00000131: 	andl	%r13d, %eax
    00000134: 	xorl	%r11d, %eax
    00000137: 	addl	%eax, %edx
    00000139: 	leal	0x1(%rsi), %eax
    0000013c: 	cmpl	%eax, %r14d
    0000013f: 	jle	.Ltmp351 # Offset: 319
    00000141: 	movl	0x4(%r8,%r9), %eax
    00000146: 	movl	%r12d, %ecx
    00000149: 	addl	$0x2, %esi
    0000014c: 	movl	%eax, %r11d
    0000014f: 	shll	%cl, %r11d
    00000152: 	movl	%ebp, %ecx
    00000154: 	shrl	%cl, %eax
    00000156: 	xorl	%r11d, %eax
    00000159: 	andl	%r13d, %eax
    0000015c: 	xorl	%r11d, %eax
    0000015f: 	addl	%eax, %edx
    00000161: 	cmpl	%esi, %r14d
    00000164: 	jle	.Ltmp351 # Offset: 356
    00000166: 	movl	0x8(%r8,%r9), %eax
    0000016b: 	movl	%r12d, %ecx
    0000016e: 	movl	%eax, %esi
    00000170: 	shll	%cl, %esi
    00000172: 	movl	%ebp, %ecx
    00000174: 	shrl	%cl, %eax
    00000176: 	xorl	%esi, %eax
    00000178: 	andl	%r13d, %eax
    0000017b: 	xorl	%esi, %eax
    0000017d: 	addl	%eax, %edx
.Ltmp351:
    0000017f: 	movl	%r12d, %ecx
    00000182: 	movl	%edi, %esi
    00000184: 	movl	%edi, %eax
    00000186: 	shll	%cl, %esi
    00000188: 	movl	%ebp, %ecx
    0000018a: 	shrl	%cl, %eax
    0000018c: 	xorl	%esi, %eax
    0000018e: 	andl	%r13d, %eax
    00000191: 	xorl	%esi, %eax
    00000193: 	imull	$0x1f40, %eax, %eax
    00000199: 	cmpl	%edx, %eax
    0000019b: 	je	.Ltmp354 # Offset: 411
    0000019d: 	movl	$0x1, %edi
    000001a2: 	xorl	%eax, %eax
    000001a4: 	movq	%r8, 0x10(%rsp)
    000001a9: 	addl	$0x1, %r15d
    000001ad: 	movl	current_test(%rip), %edx
    000001b3: 	leaq	DATAat0x998d(%rip), %rsi
    000001ba: 	callq	__printf_chk@PLT # Offset: 442
    000001bf: 	movl	iterations(%rip), %r10d
    000001c6: 	cmpl	%r10d, %r15d
    000001c9: 	jge	.Ltmp350 # Offset: 457
    000001cb: 	movl	init_value(%rip), %edi
    000001d1: 	movq	0x10(%rsp), %r8
    000001d6: 	jmp	.Ltmp355 # Offset: 470
    000001db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp354:
    000001e0: 	addl	$0x1, %r15d
    000001e4: 	cmpl	%r10d, %r15d
    000001e7: 	jl	.Ltmp355 # Offset: 487
.Ltmp350:
    000001ed: 	callq	clock@PLT # Offset: 493
    000001f2: 	pxor	%xmm0, %xmm0
    000001f6: 	movq	0x18(%rsp), %rdi
    000001fb: 	movq	%rax, end_time(%rip)
    00000202: 	subq	start_time(%rip), %rax
    00000209: 	cvtsi2sd	%rax, %xmm0
    0000020e: 	divsd	DATAat0x99b0(%rip), %xmm0
    00000216: 	addq	$0x28, %rsp
    0000021a: 	popq	%rbx
    0000021b: 	popq	%rbp
    0000021c: 	popq	%r12
    0000021e: 	popq	%r13
    00000220: 	popq	%r14
    00000222: 	popq	%r15
    00000224: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 548
.Ltmp352:
    00000229: 	xorl	%esi, %esi
    0000022b: 	xorl	%edx, %edx
    0000022d: 	jmp	.Ltmp356 # Offset: 557
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_variable_shiftIj22rotate_right_variable3IjEEvPT_iiPKc"

Binary Function "_Z19test_variable_shiftIj22rotate_right_variable4IjEEvPT_iiPKc" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x7640
  Size        : 0x254
  MaxSize     : 0x260
  Offset      : 0x7640
  Section     : .text
  Orc Section : .local.text._Z19test_variable_shiftIj22rotate_right_variable4IjEEvPT_iiPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	subq	$0x38, %rsp
    00000017: 	movq	%rdi, 0x10(%rsp)
    0000001c: 	movq	%rcx, 0x28(%rsp)
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	movl	iterations(%rip), %eax
    00000033: 	movl	%eax, 0xc(%rsp)
    00000037: 	testl	%eax, %eax
    00000039: 	jle	.Ltmp357 # Offset: 57
    0000003f: 	leal	-0x1(%r14), %eax
    00000043: 	movq	0x10(%rsp), %r8
    00000048: 	movl	%ebp, %ecx
    0000004a: 	xorl	%r9d, %r9d
    0000004d: 	movl	%eax, 0x18(%rsp)
    00000051: 	movl	%r14d, %eax
    00000054: 	movl	$0xffffffff, %r12d
    0000005a: 	movl	$0x20, %r13d
    00000060: 	shrl	$0x2, %eax
    00000063: 	shrl	%cl, %r12d
    00000066: 	movl	init_value(%rip), %edi
    0000006c: 	subl	%ebp, %r13d
    0000006f: 	subl	$0x1, %eax
    00000072: 	movl	%r12d, %r15d
    00000075: 	shlq	$0x4, %rax
    00000079: 	notl	%r15d
    0000007c: 	leaq	0x10(%r8,%rax), %rbx
    00000081: 	movl	%r14d, %eax
    00000084: 	andl	$-0x4, %eax
    00000087: 	movl	%eax, 0x1c(%rsp)
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp362:
    00000090: 	xorl	%eax, %eax
    00000092: 	testl	%r14d, %r14d
    00000095: 	jle	.Ltmp358 # Offset: 149
    0000009b: 	cmpl	$0x2, 0x18(%rsp)
    000000a0: 	jbe	.Ltmp359 # Offset: 160
    000000a6: 	movd	%r12d, %xmm7
    000000ab: 	pxor	%xmm2, %xmm2
    000000af: 	movd	%ebp, %xmm3
    000000b3: 	movq	%r8, %rax
    000000b6: 	pshufd	$0x0, %xmm7, %xmm6
    000000bb: 	movd	%r15d, %xmm7
    000000c0: 	movd	%r13d, %xmm4
    000000c5: 	pshufd	$0x0, %xmm7, %xmm5
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp360:
    000000d0: 	movdqu	(%rax), %xmm0
    000000d4: 	addq	$0x10, %rax
    000000d8: 	movdqa	%xmm0, %xmm1
    000000dc: 	psrld	%xmm3, %xmm0
    000000e0: 	pslld	%xmm4, %xmm1
    000000e4: 	pand	%xmm6, %xmm0
    000000e8: 	pand	%xmm5, %xmm1
    000000ec: 	paddd	%xmm1, %xmm0
    000000f0: 	paddd	%xmm0, %xmm2
    000000f4: 	cmpq	%rbx, %rax
    000000f7: 	jne	.Ltmp360 # Offset: 247
    000000f9: 	movdqa	%xmm2, %xmm0
    000000fd: 	movl	0x1c(%rsp), %esi
    00000101: 	psrldq	$0x8, %xmm0
    00000106: 	paddd	%xmm0, %xmm2
    0000010a: 	movdqa	%xmm2, %xmm0
    0000010e: 	psrldq	$0x4, %xmm0
    00000113: 	paddd	%xmm0, %xmm2
    00000117: 	movd	%xmm2, %eax
    0000011b: 	cmpl	%r14d, %esi
    0000011e: 	je	.Ltmp358 # Offset: 286
.Ltmp363:
    00000120: 	movslq	%esi, %rdx
    00000123: 	movl	%ebp, %ecx
    00000125: 	leaq	(,%rdx,4), %r10
    0000012d: 	movl	(%r8,%rdx,4), %edx
    00000131: 	movl	%edx, %r11d
    00000134: 	shrl	%cl, %r11d
    00000137: 	movl	%r13d, %ecx
    0000013a: 	shll	%cl, %edx
    0000013c: 	andl	%r12d, %r11d
    0000013f: 	andl	%r15d, %edx
    00000142: 	addl	%edx, %r11d
    00000145: 	leal	0x1(%rsi), %edx
    00000148: 	addl	%r11d, %eax
    0000014b: 	cmpl	%edx, %r14d
    0000014e: 	jle	.Ltmp358 # Offset: 334
    00000150: 	movl	0x4(%r8,%r10), %edx
    00000155: 	movl	%ebp, %ecx
    00000157: 	addl	$0x2, %esi
    0000015a: 	movl	%edx, %r11d
    0000015d: 	shrl	%cl, %r11d
    00000160: 	movl	%r13d, %ecx
    00000163: 	shll	%cl, %edx
    00000165: 	andl	%r12d, %r11d
    00000168: 	andl	%r15d, %edx
    0000016b: 	addl	%edx, %r11d
    0000016e: 	addl	%r11d, %eax
    00000171: 	cmpl	%esi, %r14d
    00000174: 	jle	.Ltmp358 # Offset: 372
    00000176: 	movl	0x8(%r8,%r10), %edx
    0000017b: 	movl	%edx, %esi
    0000017d: 	shll	%cl, %esi
    0000017f: 	movl	%ebp, %ecx
    00000181: 	shrl	%cl, %edx
    00000183: 	andl	%r15d, %esi
    00000186: 	andl	%r12d, %edx
    00000189: 	addl	%edx, %esi
    0000018b: 	addl	%esi, %eax
.Ltmp358:
    0000018d: 	movl	%ebp, %ecx
    0000018f: 	movl	%edi, %edx
    00000191: 	movl	%edi, %esi
    00000193: 	shrl	%cl, %edx
    00000195: 	movl	%r13d, %ecx
    00000198: 	shll	%cl, %esi
    0000019a: 	andl	%r12d, %edx
    0000019d: 	movl	%esi, %ecx
    0000019f: 	andl	%r15d, %ecx
    000001a2: 	addl	%ecx, %edx
    000001a4: 	imull	$0x1f40, %edx, %edx
    000001aa: 	cmpl	%eax, %edx
    000001ac: 	je	.Ltmp361 # Offset: 428
    000001ae: 	movl	current_test(%rip), %edx
    000001b4: 	leaq	DATAat0x998d(%rip), %rsi
    000001bb: 	movl	$0x1, %edi
    000001c0: 	xorl	%eax, %eax
    000001c2: 	movl	%r9d, 0x10(%rsp)
    000001c7: 	movq	%r8, 0x20(%rsp)
    000001cc: 	callq	__printf_chk@PLT # Offset: 460
    000001d1: 	movl	0x10(%rsp), %r9d
    000001d6: 	movl	iterations(%rip), %eax
    000001dc: 	addl	$0x1, %r9d
    000001e0: 	movl	%eax, 0xc(%rsp)
    000001e4: 	cmpl	%eax, %r9d
    000001e7: 	jge	.Ltmp357 # Offset: 487
    000001e9: 	movl	init_value(%rip), %edi
    000001ef: 	movq	0x20(%rsp), %r8
    000001f4: 	jmp	.Ltmp362 # Offset: 500
    000001f9: 	nopl	(%rax) # Size: 7
.Ltmp361:
    00000200: 	addl	$0x1, %r9d
    00000204: 	cmpl	0xc(%rsp), %r9d
    00000209: 	jl	.Ltmp362 # Offset: 521
.Ltmp357:
    0000020f: 	callq	clock@PLT # Offset: 527
    00000214: 	pxor	%xmm0, %xmm0
    00000218: 	movq	0x28(%rsp), %rdi
    0000021d: 	movq	%rax, end_time(%rip)
    00000224: 	subq	start_time(%rip), %rax
    0000022b: 	cvtsi2sd	%rax, %xmm0
    00000230: 	divsd	DATAat0x99b0(%rip), %xmm0
    00000238: 	addq	$0x38, %rsp
    0000023c: 	popq	%rbx
    0000023d: 	popq	%rbp
    0000023e: 	popq	%r12
    00000240: 	popq	%r13
    00000242: 	popq	%r14
    00000244: 	popq	%r15
    00000246: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 582
.Ltmp359:
    0000024b: 	xorl	%esi, %esi
    0000024d: 	xorl	%eax, %eax
    0000024f: 	jmp	.Ltmp363 # Offset: 591
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_variable_shiftIj22rotate_right_variable4IjEEvPT_iiPKc"

Binary Function "_Z19test_variable_shiftIm22rotate_right_variable3ImEEvPT_iiPKc" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x78a0
  Size        : 0x1ca
  MaxSize     : 0x1d0
  Offset      : 0x78a0
  Section     : .text
  Orc Section : .local.text._Z19test_variable_shiftIm22rotate_right_variable3ImEEvPT_iiPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%edx, %ebx
    00000013: 	subq	$0x18, %rsp
    00000017: 	movl	%esi, (%rsp)
    0000001a: 	movq	%rcx, 0x8(%rsp)
    0000001f: 	callq	clock@PLT # Offset: 31
    00000024: 	movl	iterations(%rip), %r11d
    0000002b: 	movq	%rax, start_time(%rip)
    00000032: 	testl	%r11d, %r11d
    00000035: 	jle	.Ltmp364 # Offset: 53
    0000003b: 	movl	(%rsp), %r8d
    0000003f: 	movq	$-0x1, %r12
    00000046: 	movl	%ebx, %ecx
    00000048: 	xorl	%r14d, %r14d
    0000004b: 	movl	$0x40, %ebp
    00000050: 	movl	init_value(%rip), %edi
    00000056: 	shrq	%cl, %r12
    00000059: 	movl	%r8d, %eax
    0000005c: 	movl	%r8d, %r10d
    0000005f: 	subl	%ebx, %ebp
    00000061: 	shrl	%eax
    00000063: 	andl	$-0x2, %r10d
    00000067: 	subl	$0x1, %eax
    0000006a: 	shlq	$0x4, %rax
    0000006e: 	leaq	0x10(%r13,%rax), %r15
    00000073: 	nopl	(%rax,%rax) # Size: 5
.Ltmp369:
    00000078: 	xorl	%edx, %edx
    0000007a: 	testl	%r8d, %r8d
    0000007d: 	jle	.Ltmp365 # Offset: 125
    00000083: 	cmpl	$0x1, %r8d
    00000087: 	je	.Ltmp366 # Offset: 135
    0000008d: 	movq	%r12, %xmm5
    00000092: 	pxor	%xmm2, %xmm2
    00000096: 	movd	%ebp, %xmm4
    0000009a: 	movq	%r13, %rax
    0000009d: 	punpcklqdq	%xmm5, %xmm5
    000000a1: 	movd	%ebx, %xmm3
    000000a5: 	nopl	(%rax) # Size: 3
.Ltmp367:
    000000a8: 	movdqu	(%rax), %xmm0
    000000ac: 	addq	$0x10, %rax
    000000b0: 	movdqa	%xmm0, %xmm1
    000000b4: 	psrlq	%xmm3, %xmm0
    000000b8: 	psllq	%xmm4, %xmm1
    000000bc: 	pxor	%xmm1, %xmm0
    000000c0: 	pand	%xmm5, %xmm0
    000000c4: 	pxor	%xmm1, %xmm0
    000000c8: 	paddq	%xmm0, %xmm2
    000000cc: 	cmpq	%rax, %r15
    000000cf: 	jne	.Ltmp367 # Offset: 207
    000000d1: 	movdqa	%xmm2, %xmm0
    000000d5: 	movslq	%r10d, %rax
    000000d8: 	psrldq	$0x8, %xmm0
    000000dd: 	paddq	%xmm0, %xmm2
    000000e1: 	movq	%xmm2, %rdx
    000000e6: 	cmpl	%r8d, %r10d
    000000e9: 	je	.Ltmp365 # Offset: 233
.Ltmp370:
    000000eb: 	movq	(%r13,%rax,8), %rax
    000000f0: 	movl	%ebp, %ecx
    000000f2: 	movq	%rax, %rsi
    000000f5: 	shlq	%cl, %rsi
    000000f8: 	movl	%ebx, %ecx
    000000fa: 	shrq	%cl, %rax
    000000fd: 	xorq	%rsi, %rax
    00000100: 	andq	%r12, %rax
    00000103: 	xorq	%rsi, %rax
    00000106: 	addq	%rax, %rdx
.Ltmp365:
    00000109: 	movl	%ebp, %ecx
    0000010b: 	movq	%rdi, %rsi
    0000010e: 	movq	%rdi, %rax
    00000111: 	shlq	%cl, %rsi
    00000114: 	movl	%ebx, %ecx
    00000116: 	shrq	%cl, %rax
    00000119: 	xorq	%rsi, %rax
    0000011c: 	andq	%r12, %rax
    0000011f: 	xorq	%rsi, %rax
    00000122: 	imulq	$0x1f40, %rax, %rax
    00000129: 	cmpq	%rdx, %rax
    0000012c: 	je	.Ltmp368 # Offset: 300
    0000012e: 	movl	current_test(%rip), %edx
    00000134: 	xorl	%eax, %eax
    00000136: 	movl	%r10d, (%rsp)
    0000013a: 	addl	$0x1, %r14d
    0000013e: 	leaq	DATAat0x998d(%rip), %rsi
    00000145: 	movl	$0x1, %edi
    0000014a: 	movl	%r8d, 0x4(%rsp)
    0000014f: 	callq	__printf_chk@PLT # Offset: 335
    00000154: 	movl	iterations(%rip), %r11d
    0000015b: 	cmpl	%r11d, %r14d
    0000015e: 	jge	.Ltmp364 # Offset: 350
    00000160: 	movl	init_value(%rip), %edi
    00000166: 	movl	(%rsp), %r10d
    0000016a: 	movl	0x4(%rsp), %r8d
    0000016f: 	jmp	.Ltmp369 # Offset: 367
    00000174: 	nopl	(%rax) # Size: 4
.Ltmp368:
    00000178: 	addl	$0x1, %r14d
    0000017c: 	cmpl	%r11d, %r14d
    0000017f: 	jl	.Ltmp369 # Offset: 383
.Ltmp364:
    00000185: 	callq	clock@PLT # Offset: 389
    0000018a: 	pxor	%xmm0, %xmm0
    0000018e: 	movq	0x8(%rsp), %rdi
    00000193: 	movq	%rax, end_time(%rip)
    0000019a: 	subq	start_time(%rip), %rax
    000001a1: 	cvtsi2sd	%rax, %xmm0
    000001a6: 	divsd	DATAat0x99b0(%rip), %xmm0
    000001ae: 	addq	$0x18, %rsp
    000001b2: 	popq	%rbx
    000001b3: 	popq	%rbp
    000001b4: 	popq	%r12
    000001b6: 	popq	%r13
    000001b8: 	popq	%r14
    000001ba: 	popq	%r15
    000001bc: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 444
.Ltmp366:
    000001c1: 	xorl	%eax, %eax
    000001c3: 	xorl	%edx, %edx
    000001c5: 	jmp	.Ltmp370 # Offset: 453
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_variable_shiftIm22rotate_right_variable3ImEEvPT_iiPKc"

Binary Function "_Z19test_variable_shiftIm22rotate_right_variable4ImEEvPT_iiPKc" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x7a70
  Size        : 0x1f2
  MaxSize     : 0x200
  Offset      : 0x7a70
  Section     : .text
  Orc Section : .local.text._Z19test_variable_shiftIm22rotate_right_variable4ImEEvPT_iiPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%edx, %ebx
    00000013: 	subq	$0x28, %rsp
    00000017: 	movl	%esi, 0xc(%rsp)
    0000001b: 	movq	%rcx, 0x18(%rsp)
    00000020: 	callq	clock@PLT # Offset: 32
    00000025: 	movl	iterations(%rip), %r11d
    0000002c: 	movq	%rax, start_time(%rip)
    00000033: 	testl	%r11d, %r11d
    00000036: 	jle	.Ltmp371 # Offset: 54
    0000003c: 	movl	0xc(%rsp), %r8d
    00000041: 	movl	%ebx, %ecx
    00000043: 	movl	$0x40, %r12d
    00000049: 	xorl	%r9d, %r9d
    0000004c: 	movq	$-0x1, %rbp
    00000053: 	movl	init_value(%rip), %edi
    00000059: 	subl	%ebx, %r12d
    0000005c: 	movl	%r8d, %eax
    0000005f: 	shrq	%cl, %rbp
    00000062: 	movl	%r8d, %r10d
    00000065: 	shrl	%eax
    00000067: 	movq	%rbp, %r13
    0000006a: 	andl	$-0x2, %r10d
    0000006e: 	subl	$0x1, %eax
    00000071: 	notq	%r13
    00000074: 	shlq	$0x4, %rax
    00000078: 	leaq	0x10(%r14,%rax), %r15
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp376:
    00000080: 	xorl	%esi, %esi
    00000082: 	testl	%r8d, %r8d
    00000085: 	jle	.Ltmp372 # Offset: 133
    0000008b: 	cmpl	$0x1, %r8d
    0000008f: 	je	.Ltmp373 # Offset: 143
    00000095: 	movq	%rbp, %xmm6
    0000009a: 	pxor	%xmm2, %xmm2
    0000009e: 	movd	%ebx, %xmm3
    000000a2: 	movq	%r14, %rax
    000000a5: 	movq	%r13, %xmm5
    000000aa: 	punpcklqdq	%xmm6, %xmm6
    000000ae: 	movd	%r12d, %xmm4
    000000b3: 	punpcklqdq	%xmm5, %xmm5
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp374:
    000000c0: 	movdqu	(%rax), %xmm0
    000000c4: 	addq	$0x10, %rax
    000000c8: 	movdqa	%xmm0, %xmm1
    000000cc: 	psrlq	%xmm3, %xmm0
    000000d0: 	psllq	%xmm4, %xmm1
    000000d4: 	pand	%xmm6, %xmm0
    000000d8: 	pand	%xmm5, %xmm1
    000000dc: 	paddq	%xmm1, %xmm0
    000000e0: 	paddq	%xmm0, %xmm2
    000000e4: 	cmpq	%rax, %r15
    000000e7: 	jne	.Ltmp374 # Offset: 231
    000000e9: 	movdqa	%xmm2, %xmm0
    000000ed: 	movslq	%r10d, %rax
    000000f0: 	psrldq	$0x8, %xmm0
    000000f5: 	paddq	%xmm0, %xmm2
    000000f9: 	movq	%xmm2, %rsi
    000000fe: 	cmpl	%r8d, %r10d
    00000101: 	je	.Ltmp372 # Offset: 257
.Ltmp377:
    00000103: 	movq	(%r14,%rax,8), %rax
    00000107: 	movl	%r12d, %ecx
    0000010a: 	movq	%rax, %rdx
    0000010d: 	shlq	%cl, %rdx
    00000110: 	movl	%ebx, %ecx
    00000112: 	shrq	%cl, %rax
    00000115: 	andq	%r13, %rdx
    00000118: 	andq	%rbp, %rax
    0000011b: 	addq	%rax, %rdx
    0000011e: 	addq	%rdx, %rsi
.Ltmp372:
    00000121: 	movl	%ebx, %ecx
    00000123: 	movq	%rdi, %rax
    00000126: 	movq	%rdi, %rdx
    00000129: 	shrq	%cl, %rax
    0000012c: 	movl	%r12d, %ecx
    0000012f: 	shlq	%cl, %rdx
    00000132: 	andq	%rbp, %rax
    00000135: 	andq	%r13, %rdx
    00000138: 	addq	%rdx, %rax
    0000013b: 	imulq	$0x1f40, %rax, %rax
    00000142: 	cmpq	%rsi, %rax
    00000145: 	je	.Ltmp375 # Offset: 325
    00000147: 	movl	current_test(%rip), %edx
    0000014d: 	leaq	DATAat0x998d(%rip), %rsi
    00000154: 	movl	$0x1, %edi
    00000159: 	xorl	%eax, %eax
    0000015b: 	movl	%r9d, 0xc(%rsp)
    00000160: 	movl	%r8d, 0x14(%rsp)
    00000165: 	movl	%r10d, 0x10(%rsp)
    0000016a: 	callq	__printf_chk@PLT # Offset: 362
    0000016f: 	movl	0xc(%rsp), %r9d
    00000174: 	movl	iterations(%rip), %r11d
    0000017b: 	addl	$0x1, %r9d
    0000017f: 	cmpl	%r11d, %r9d
    00000182: 	jge	.Ltmp371 # Offset: 386
    00000184: 	movl	init_value(%rip), %edi
    0000018a: 	movl	0x10(%rsp), %r10d
    0000018f: 	movl	0x14(%rsp), %r8d
    00000194: 	jmp	.Ltmp376 # Offset: 404
    00000199: 	nopl	(%rax) # Size: 7
.Ltmp375:
    000001a0: 	addl	$0x1, %r9d
    000001a4: 	cmpl	%r11d, %r9d
    000001a7: 	jl	.Ltmp376 # Offset: 423
.Ltmp371:
    000001ad: 	callq	clock@PLT # Offset: 429
    000001b2: 	pxor	%xmm0, %xmm0
    000001b6: 	movq	0x18(%rsp), %rdi
    000001bb: 	movq	%rax, end_time(%rip)
    000001c2: 	subq	start_time(%rip), %rax
    000001c9: 	cvtsi2sd	%rax, %xmm0
    000001ce: 	divsd	DATAat0x99b0(%rip), %xmm0
    000001d6: 	addq	$0x28, %rsp
    000001da: 	popq	%rbx
    000001db: 	popq	%rbp
    000001dc: 	popq	%r12
    000001de: 	popq	%r13
    000001e0: 	popq	%r14
    000001e2: 	popq	%r15
    000001e4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 484
.Ltmp373:
    000001e9: 	xorl	%eax, %eax
    000001eb: 	xorl	%esi, %esi
    000001ed: 	jmp	.Ltmp377 # Offset: 493
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_variable_shiftIm22rotate_right_variable4ImEEvPT_iiPKc"

Binary Function "_Z19test_variable_shiftIj21rotate_left_variable3IjEEvPT_iiPKc" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0x7c70
  Size        : 0x232
  MaxSize     : 0x240
  Offset      : 0x7c70
  Section     : .text
  Orc Section : .local.text._Z19test_variable_shiftIj21rotate_left_variable3IjEEvPT_iiPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movl	%edx, %ebp
    00000015: 	pushq	%rbx
    00000016: 	subq	$0x28, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	callq	clock@PLT # Offset: 31
    00000024: 	movl	iterations(%rip), %r10d
    0000002b: 	movq	%rax, start_time(%rip)
    00000032: 	testl	%r10d, %r10d
    00000035: 	jle	.Ltmp378 # Offset: 53
    0000003b: 	leal	-0x1(%r14), %eax
    0000003f: 	xorl	%r8d, %r8d
    00000042: 	movl	$0xffffffff, %r13d
    00000048: 	movl	%ebp, %ecx
    0000004a: 	movl	%eax, 0x8(%rsp)
    0000004e: 	movl	%r14d, %eax
    00000051: 	movl	$0x20, %r12d
    00000057: 	shrl	%cl, %r13d
    0000005a: 	shrl	$0x2, %eax
    0000005d: 	movl	init_value(%rip), %edi
    00000063: 	subl	%ebp, %r12d
    00000066: 	subl	$0x1, %eax
    00000069: 	shlq	$0x4, %rax
    0000006d: 	leaq	0x10(%r15,%rax), %rbx
    00000072: 	movl	%r14d, %eax
    00000075: 	andl	$-0x4, %eax
    00000078: 	movl	%eax, 0xc(%rsp)
    0000007c: 	movq	%r15, %rax
    0000007f: 	movl	%r8d, %r15d
    00000082: 	movq	%rax, %r8
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp383:
    00000088: 	xorl	%edx, %edx
    0000008a: 	testl	%r14d, %r14d
    0000008d: 	jle	.Ltmp379 # Offset: 141
    00000093: 	cmpl	$0x2, 0x8(%rsp)
    00000098: 	jbe	.Ltmp380 # Offset: 152
    0000009e: 	movd	%r13d, %xmm6
    000000a3: 	pxor	%xmm1, %xmm1
    000000a7: 	movd	%ebp, %xmm4
    000000ab: 	movq	%r8, %rax
    000000ae: 	pshufd	$0x0, %xmm6, %xmm5
    000000b3: 	movd	%r12d, %xmm3
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp381:
    000000c0: 	movdqu	(%rax), %xmm0
    000000c4: 	addq	$0x10, %rax
    000000c8: 	movdqa	%xmm0, %xmm2
    000000cc: 	psrld	%xmm3, %xmm0
    000000d0: 	pslld	%xmm4, %xmm2
    000000d4: 	pxor	%xmm2, %xmm0
    000000d8: 	pand	%xmm5, %xmm0
    000000dc: 	pxor	%xmm2, %xmm0
    000000e0: 	paddd	%xmm0, %xmm1
    000000e4: 	cmpq	%rbx, %rax
    000000e7: 	jne	.Ltmp381 # Offset: 231
    000000e9: 	movdqa	%xmm1, %xmm0
    000000ed: 	movl	0xc(%rsp), %eax
    000000f1: 	psrldq	$0x8, %xmm0
    000000f6: 	paddd	%xmm0, %xmm1
    000000fa: 	movl	%eax, %esi
    000000fc: 	movdqa	%xmm1, %xmm0
    00000100: 	psrldq	$0x4, %xmm0
    00000105: 	paddd	%xmm0, %xmm1
    00000109: 	movd	%xmm1, %edx
    0000010d: 	cmpl	%r14d, %eax
    00000110: 	je	.Ltmp379 # Offset: 272
.Ltmp384:
    00000112: 	movslq	%esi, %rax
    00000115: 	movl	%ebp, %ecx
    00000117: 	leaq	(,%rax,4), %r9
    0000011f: 	movl	(%r8,%rax,4), %eax
    00000123: 	movl	%eax, %r11d
    00000126: 	shll	%cl, %r11d
    00000129: 	movl	%r12d, %ecx
    0000012c: 	shrl	%cl, %eax
    0000012e: 	xorl	%r11d, %eax
    00000131: 	andl	%r13d, %eax
    00000134: 	xorl	%r11d, %eax
    00000137: 	addl	%eax, %edx
    00000139: 	leal	0x1(%rsi), %eax
    0000013c: 	cmpl	%eax, %r14d
    0000013f: 	jle	.Ltmp379 # Offset: 319
    00000141: 	movl	0x4(%r8,%r9), %eax
    00000146: 	movl	%ebp, %ecx
    00000148: 	addl	$0x2, %esi
    0000014b: 	movl	%eax, %r11d
    0000014e: 	shll	%cl, %r11d
    00000151: 	movl	%r12d, %ecx
    00000154: 	shrl	%cl, %eax
    00000156: 	xorl	%r11d, %eax
    00000159: 	andl	%r13d, %eax
    0000015c: 	xorl	%r11d, %eax
    0000015f: 	addl	%eax, %edx
    00000161: 	cmpl	%esi, %r14d
    00000164: 	jle	.Ltmp379 # Offset: 356
    00000166: 	movl	0x8(%r8,%r9), %eax
    0000016b: 	movl	%ebp, %ecx
    0000016d: 	movl	%eax, %esi
    0000016f: 	shll	%cl, %esi
    00000171: 	movl	%r12d, %ecx
    00000174: 	shrl	%cl, %eax
    00000176: 	xorl	%esi, %eax
    00000178: 	andl	%r13d, %eax
    0000017b: 	xorl	%esi, %eax
    0000017d: 	addl	%eax, %edx
.Ltmp379:
    0000017f: 	movl	%ebp, %ecx
    00000181: 	movl	%edi, %esi
    00000183: 	movl	%edi, %eax
    00000185: 	shll	%cl, %esi
    00000187: 	movl	%r12d, %ecx
    0000018a: 	shrl	%cl, %eax
    0000018c: 	xorl	%esi, %eax
    0000018e: 	andl	%r13d, %eax
    00000191: 	xorl	%esi, %eax
    00000193: 	imull	$0x1f40, %eax, %eax
    00000199: 	cmpl	%edx, %eax
    0000019b: 	je	.Ltmp382 # Offset: 411
    0000019d: 	movl	$0x1, %edi
    000001a2: 	xorl	%eax, %eax
    000001a4: 	movq	%r8, 0x10(%rsp)
    000001a9: 	addl	$0x1, %r15d
    000001ad: 	movl	current_test(%rip), %edx
    000001b3: 	leaq	DATAat0x998d(%rip), %rsi
    000001ba: 	callq	__printf_chk@PLT # Offset: 442
    000001bf: 	movl	iterations(%rip), %r10d
    000001c6: 	cmpl	%r10d, %r15d
    000001c9: 	jge	.Ltmp378 # Offset: 457
    000001cb: 	movl	init_value(%rip), %edi
    000001d1: 	movq	0x10(%rsp), %r8
    000001d6: 	jmp	.Ltmp383 # Offset: 470
    000001db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp382:
    000001e0: 	addl	$0x1, %r15d
    000001e4: 	cmpl	%r10d, %r15d
    000001e7: 	jl	.Ltmp383 # Offset: 487
.Ltmp378:
    000001ed: 	callq	clock@PLT # Offset: 493
    000001f2: 	pxor	%xmm0, %xmm0
    000001f6: 	movq	0x18(%rsp), %rdi
    000001fb: 	movq	%rax, end_time(%rip)
    00000202: 	subq	start_time(%rip), %rax
    00000209: 	cvtsi2sd	%rax, %xmm0
    0000020e: 	divsd	DATAat0x99b0(%rip), %xmm0
    00000216: 	addq	$0x28, %rsp
    0000021a: 	popq	%rbx
    0000021b: 	popq	%rbp
    0000021c: 	popq	%r12
    0000021e: 	popq	%r13
    00000220: 	popq	%r14
    00000222: 	popq	%r15
    00000224: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 548
.Ltmp380:
    00000229: 	xorl	%esi, %esi
    0000022b: 	xorl	%edx, %edx
    0000022d: 	jmp	.Ltmp384 # Offset: 557
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_variable_shiftIj21rotate_left_variable3IjEEvPT_iiPKc"

Binary Function "_Z19test_variable_shiftIj21rotate_left_variable4IjEEvPT_iiPKc" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0x7eb0
  Size        : 0x254
  MaxSize     : 0x260
  Offset      : 0x7eb0
  Section     : .text
  Orc Section : .local.text._Z19test_variable_shiftIj21rotate_left_variable4IjEEvPT_iiPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	subq	$0x38, %rsp
    00000017: 	movq	%rdi, 0x10(%rsp)
    0000001c: 	movq	%rcx, 0x28(%rsp)
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	movl	iterations(%rip), %eax
    00000033: 	movl	%eax, 0xc(%rsp)
    00000037: 	testl	%eax, %eax
    00000039: 	jle	.Ltmp385 # Offset: 57
    0000003f: 	leal	-0x1(%r14), %eax
    00000043: 	movq	0x10(%rsp), %r8
    00000048: 	movl	%ebp, %ecx
    0000004a: 	xorl	%r9d, %r9d
    0000004d: 	movl	%eax, 0x18(%rsp)
    00000051: 	movl	%r14d, %eax
    00000054: 	movl	$0xffffffff, %r12d
    0000005a: 	movl	$0x20, %r13d
    00000060: 	shrl	$0x2, %eax
    00000063: 	shrl	%cl, %r12d
    00000066: 	movl	init_value(%rip), %edi
    0000006c: 	subl	%ebp, %r13d
    0000006f: 	subl	$0x1, %eax
    00000072: 	movl	%r12d, %r15d
    00000075: 	shlq	$0x4, %rax
    00000079: 	notl	%r15d
    0000007c: 	leaq	0x10(%r8,%rax), %rbx
    00000081: 	movl	%r14d, %eax
    00000084: 	andl	$-0x4, %eax
    00000087: 	movl	%eax, 0x1c(%rsp)
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp390:
    00000090: 	xorl	%eax, %eax
    00000092: 	testl	%r14d, %r14d
    00000095: 	jle	.Ltmp386 # Offset: 149
    0000009b: 	cmpl	$0x2, 0x18(%rsp)
    000000a0: 	jbe	.Ltmp387 # Offset: 160
    000000a6: 	movd	%r15d, %xmm7
    000000ab: 	pxor	%xmm2, %xmm2
    000000af: 	movd	%ebp, %xmm3
    000000b3: 	movq	%r8, %rax
    000000b6: 	pshufd	$0x0, %xmm7, %xmm6
    000000bb: 	movd	%r12d, %xmm7
    000000c0: 	movd	%r13d, %xmm4
    000000c5: 	pshufd	$0x0, %xmm7, %xmm5
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp388:
    000000d0: 	movdqu	(%rax), %xmm0
    000000d4: 	addq	$0x10, %rax
    000000d8: 	movdqa	%xmm0, %xmm1
    000000dc: 	pslld	%xmm3, %xmm0
    000000e0: 	psrld	%xmm4, %xmm1
    000000e4: 	pand	%xmm6, %xmm0
    000000e8: 	pand	%xmm5, %xmm1
    000000ec: 	paddd	%xmm1, %xmm0
    000000f0: 	paddd	%xmm0, %xmm2
    000000f4: 	cmpq	%rbx, %rax
    000000f7: 	jne	.Ltmp388 # Offset: 247
    000000f9: 	movdqa	%xmm2, %xmm0
    000000fd: 	movl	0x1c(%rsp), %esi
    00000101: 	psrldq	$0x8, %xmm0
    00000106: 	paddd	%xmm0, %xmm2
    0000010a: 	movdqa	%xmm2, %xmm0
    0000010e: 	psrldq	$0x4, %xmm0
    00000113: 	paddd	%xmm0, %xmm2
    00000117: 	movd	%xmm2, %eax
    0000011b: 	cmpl	%r14d, %esi
    0000011e: 	je	.Ltmp386 # Offset: 286
.Ltmp391:
    00000120: 	movslq	%esi, %rdx
    00000123: 	movl	%ebp, %ecx
    00000125: 	leaq	(,%rdx,4), %r10
    0000012d: 	movl	(%r8,%rdx,4), %edx
    00000131: 	movl	%edx, %r11d
    00000134: 	shll	%cl, %r11d
    00000137: 	movl	%r13d, %ecx
    0000013a: 	shrl	%cl, %edx
    0000013c: 	andl	%r15d, %r11d
    0000013f: 	andl	%r12d, %edx
    00000142: 	addl	%edx, %r11d
    00000145: 	leal	0x1(%rsi), %edx
    00000148: 	addl	%r11d, %eax
    0000014b: 	cmpl	%edx, %r14d
    0000014e: 	jle	.Ltmp386 # Offset: 334
    00000150: 	movl	0x4(%r8,%r10), %edx
    00000155: 	movl	%ebp, %ecx
    00000157: 	addl	$0x2, %esi
    0000015a: 	movl	%edx, %r11d
    0000015d: 	shll	%cl, %r11d
    00000160: 	movl	%r13d, %ecx
    00000163: 	shrl	%cl, %edx
    00000165: 	andl	%r15d, %r11d
    00000168: 	andl	%r12d, %edx
    0000016b: 	addl	%edx, %r11d
    0000016e: 	addl	%r11d, %eax
    00000171: 	cmpl	%esi, %r14d
    00000174: 	jle	.Ltmp386 # Offset: 372
    00000176: 	movl	0x8(%r8,%r10), %edx
    0000017b: 	movl	%edx, %esi
    0000017d: 	shrl	%cl, %esi
    0000017f: 	movl	%ebp, %ecx
    00000181: 	shll	%cl, %edx
    00000183: 	andl	%r12d, %esi
    00000186: 	andl	%r15d, %edx
    00000189: 	addl	%edx, %esi
    0000018b: 	addl	%esi, %eax
.Ltmp386:
    0000018d: 	movl	%ebp, %ecx
    0000018f: 	movl	%edi, %edx
    00000191: 	movl	%edi, %esi
    00000193: 	shll	%cl, %edx
    00000195: 	movl	%r13d, %ecx
    00000198: 	shrl	%cl, %esi
    0000019a: 	andl	%r15d, %edx
    0000019d: 	movl	%esi, %ecx
    0000019f: 	andl	%r12d, %ecx
    000001a2: 	addl	%ecx, %edx
    000001a4: 	imull	$0x1f40, %edx, %edx
    000001aa: 	cmpl	%eax, %edx
    000001ac: 	je	.Ltmp389 # Offset: 428
    000001ae: 	movl	current_test(%rip), %edx
    000001b4: 	leaq	DATAat0x998d(%rip), %rsi
    000001bb: 	movl	$0x1, %edi
    000001c0: 	xorl	%eax, %eax
    000001c2: 	movl	%r9d, 0x10(%rsp)
    000001c7: 	movq	%r8, 0x20(%rsp)
    000001cc: 	callq	__printf_chk@PLT # Offset: 460
    000001d1: 	movl	0x10(%rsp), %r9d
    000001d6: 	movl	iterations(%rip), %eax
    000001dc: 	addl	$0x1, %r9d
    000001e0: 	movl	%eax, 0xc(%rsp)
    000001e4: 	cmpl	%eax, %r9d
    000001e7: 	jge	.Ltmp385 # Offset: 487
    000001e9: 	movl	init_value(%rip), %edi
    000001ef: 	movq	0x20(%rsp), %r8
    000001f4: 	jmp	.Ltmp390 # Offset: 500
    000001f9: 	nopl	(%rax) # Size: 7
.Ltmp389:
    00000200: 	addl	$0x1, %r9d
    00000204: 	cmpl	0xc(%rsp), %r9d
    00000209: 	jl	.Ltmp390 # Offset: 521
.Ltmp385:
    0000020f: 	callq	clock@PLT # Offset: 527
    00000214: 	pxor	%xmm0, %xmm0
    00000218: 	movq	0x28(%rsp), %rdi
    0000021d: 	movq	%rax, end_time(%rip)
    00000224: 	subq	start_time(%rip), %rax
    0000022b: 	cvtsi2sd	%rax, %xmm0
    00000230: 	divsd	DATAat0x99b0(%rip), %xmm0
    00000238: 	addq	$0x38, %rsp
    0000023c: 	popq	%rbx
    0000023d: 	popq	%rbp
    0000023e: 	popq	%r12
    00000240: 	popq	%r13
    00000242: 	popq	%r14
    00000244: 	popq	%r15
    00000246: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 582
.Ltmp387:
    0000024b: 	xorl	%esi, %esi
    0000024d: 	xorl	%eax, %eax
    0000024f: 	jmp	.Ltmp391 # Offset: 591
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_variable_shiftIj21rotate_left_variable4IjEEvPT_iiPKc"

Binary Function "_Z19test_variable_shiftIm21rotate_left_variable3ImEEvPT_iiPKc" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0x8110
  Size        : 0x1ca
  MaxSize     : 0x1d0
  Offset      : 0x8110
  Section     : .text
  Orc Section : .local.text._Z19test_variable_shiftIm21rotate_left_variable3ImEEvPT_iiPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%edx, %ebx
    00000013: 	subq	$0x18, %rsp
    00000017: 	movl	%esi, (%rsp)
    0000001a: 	movq	%rcx, 0x8(%rsp)
    0000001f: 	callq	clock@PLT # Offset: 31
    00000024: 	movl	iterations(%rip), %r11d
    0000002b: 	movq	%rax, start_time(%rip)
    00000032: 	testl	%r11d, %r11d
    00000035: 	jle	.Ltmp392 # Offset: 53
    0000003b: 	movl	(%rsp), %r8d
    0000003f: 	movq	$-0x1, %r12
    00000046: 	movl	%ebx, %ecx
    00000048: 	xorl	%r14d, %r14d
    0000004b: 	movl	$0x40, %ebp
    00000050: 	movl	init_value(%rip), %edi
    00000056: 	shrq	%cl, %r12
    00000059: 	movl	%r8d, %eax
    0000005c: 	movl	%r8d, %r10d
    0000005f: 	subl	%ebx, %ebp
    00000061: 	shrl	%eax
    00000063: 	andl	$-0x2, %r10d
    00000067: 	subl	$0x1, %eax
    0000006a: 	shlq	$0x4, %rax
    0000006e: 	leaq	0x10(%r13,%rax), %r15
    00000073: 	nopl	(%rax,%rax) # Size: 5
.Ltmp397:
    00000078: 	xorl	%edx, %edx
    0000007a: 	testl	%r8d, %r8d
    0000007d: 	jle	.Ltmp393 # Offset: 125
    00000083: 	cmpl	$0x1, %r8d
    00000087: 	je	.Ltmp394 # Offset: 135
    0000008d: 	movq	%r12, %xmm5
    00000092: 	pxor	%xmm2, %xmm2
    00000096: 	movd	%ebx, %xmm4
    0000009a: 	movq	%r13, %rax
    0000009d: 	punpcklqdq	%xmm5, %xmm5
    000000a1: 	movd	%ebp, %xmm3
    000000a5: 	nopl	(%rax) # Size: 3
.Ltmp395:
    000000a8: 	movdqu	(%rax), %xmm0
    000000ac: 	addq	$0x10, %rax
    000000b0: 	movdqa	%xmm0, %xmm1
    000000b4: 	psrlq	%xmm3, %xmm0
    000000b8: 	psllq	%xmm4, %xmm1
    000000bc: 	pxor	%xmm1, %xmm0
    000000c0: 	pand	%xmm5, %xmm0
    000000c4: 	pxor	%xmm1, %xmm0
    000000c8: 	paddq	%xmm0, %xmm2
    000000cc: 	cmpq	%rax, %r15
    000000cf: 	jne	.Ltmp395 # Offset: 207
    000000d1: 	movdqa	%xmm2, %xmm0
    000000d5: 	movslq	%r10d, %rax
    000000d8: 	psrldq	$0x8, %xmm0
    000000dd: 	paddq	%xmm0, %xmm2
    000000e1: 	movq	%xmm2, %rdx
    000000e6: 	cmpl	%r8d, %r10d
    000000e9: 	je	.Ltmp393 # Offset: 233
.Ltmp398:
    000000eb: 	movq	(%r13,%rax,8), %rax
    000000f0: 	movl	%ebx, %ecx
    000000f2: 	movq	%rax, %rsi
    000000f5: 	shlq	%cl, %rsi
    000000f8: 	movl	%ebp, %ecx
    000000fa: 	shrq	%cl, %rax
    000000fd: 	xorq	%rsi, %rax
    00000100: 	andq	%r12, %rax
    00000103: 	xorq	%rsi, %rax
    00000106: 	addq	%rax, %rdx
.Ltmp393:
    00000109: 	movl	%ebx, %ecx
    0000010b: 	movq	%rdi, %rsi
    0000010e: 	movq	%rdi, %rax
    00000111: 	shlq	%cl, %rsi
    00000114: 	movl	%ebp, %ecx
    00000116: 	shrq	%cl, %rax
    00000119: 	xorq	%rsi, %rax
    0000011c: 	andq	%r12, %rax
    0000011f: 	xorq	%rsi, %rax
    00000122: 	imulq	$0x1f40, %rax, %rax
    00000129: 	cmpq	%rdx, %rax
    0000012c: 	je	.Ltmp396 # Offset: 300
    0000012e: 	movl	current_test(%rip), %edx
    00000134: 	xorl	%eax, %eax
    00000136: 	movl	%r10d, (%rsp)
    0000013a: 	addl	$0x1, %r14d
    0000013e: 	leaq	DATAat0x998d(%rip), %rsi
    00000145: 	movl	$0x1, %edi
    0000014a: 	movl	%r8d, 0x4(%rsp)
    0000014f: 	callq	__printf_chk@PLT # Offset: 335
    00000154: 	movl	iterations(%rip), %r11d
    0000015b: 	cmpl	%r11d, %r14d
    0000015e: 	jge	.Ltmp392 # Offset: 350
    00000160: 	movl	init_value(%rip), %edi
    00000166: 	movl	(%rsp), %r10d
    0000016a: 	movl	0x4(%rsp), %r8d
    0000016f: 	jmp	.Ltmp397 # Offset: 367
    00000174: 	nopl	(%rax) # Size: 4
.Ltmp396:
    00000178: 	addl	$0x1, %r14d
    0000017c: 	cmpl	%r11d, %r14d
    0000017f: 	jl	.Ltmp397 # Offset: 383
.Ltmp392:
    00000185: 	callq	clock@PLT # Offset: 389
    0000018a: 	pxor	%xmm0, %xmm0
    0000018e: 	movq	0x8(%rsp), %rdi
    00000193: 	movq	%rax, end_time(%rip)
    0000019a: 	subq	start_time(%rip), %rax
    000001a1: 	cvtsi2sd	%rax, %xmm0
    000001a6: 	divsd	DATAat0x99b0(%rip), %xmm0
    000001ae: 	addq	$0x18, %rsp
    000001b2: 	popq	%rbx
    000001b3: 	popq	%rbp
    000001b4: 	popq	%r12
    000001b6: 	popq	%r13
    000001b8: 	popq	%r14
    000001ba: 	popq	%r15
    000001bc: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 444
.Ltmp394:
    000001c1: 	xorl	%eax, %eax
    000001c3: 	xorl	%edx, %edx
    000001c5: 	jmp	.Ltmp398 # Offset: 453
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_variable_shiftIm21rotate_left_variable3ImEEvPT_iiPKc"

Binary Function "_Z19test_variable_shiftIm21rotate_left_variable4ImEEvPT_iiPKc" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0x82e0
  Size        : 0x1f2
  MaxSize     : 0x1f2
  Offset      : 0x82e0
  Section     : .text
  Orc Section : .local.text._Z19test_variable_shiftIm21rotate_left_variable4ImEEvPT_iiPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%edx, %ebx
    00000013: 	subq	$0x28, %rsp
    00000017: 	movl	%esi, 0xc(%rsp)
    0000001b: 	movq	%rcx, 0x18(%rsp)
    00000020: 	callq	clock@PLT # Offset: 32
    00000025: 	movl	iterations(%rip), %r11d
    0000002c: 	movq	%rax, start_time(%rip)
    00000033: 	testl	%r11d, %r11d
    00000036: 	jle	.Ltmp399 # Offset: 54
    0000003c: 	movl	0xc(%rsp), %r8d
    00000041: 	movl	%ebx, %ecx
    00000043: 	movl	$0x40, %r12d
    00000049: 	xorl	%r9d, %r9d
    0000004c: 	movq	$-0x1, %rbp
    00000053: 	movl	init_value(%rip), %edi
    00000059: 	subl	%ebx, %r12d
    0000005c: 	movl	%r8d, %eax
    0000005f: 	shrq	%cl, %rbp
    00000062: 	movl	%r8d, %r10d
    00000065: 	shrl	%eax
    00000067: 	movq	%rbp, %r13
    0000006a: 	andl	$-0x2, %r10d
    0000006e: 	subl	$0x1, %eax
    00000071: 	notq	%r13
    00000074: 	shlq	$0x4, %rax
    00000078: 	leaq	0x10(%r14,%rax), %r15
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp404:
    00000080: 	xorl	%esi, %esi
    00000082: 	testl	%r8d, %r8d
    00000085: 	jle	.Ltmp400 # Offset: 133
    0000008b: 	cmpl	$0x1, %r8d
    0000008f: 	je	.Ltmp401 # Offset: 143
    00000095: 	movq	%r13, %xmm6
    0000009a: 	pxor	%xmm2, %xmm2
    0000009e: 	movd	%ebx, %xmm3
    000000a2: 	movq	%r14, %rax
    000000a5: 	movq	%rbp, %xmm5
    000000aa: 	punpcklqdq	%xmm6, %xmm6
    000000ae: 	movd	%r12d, %xmm4
    000000b3: 	punpcklqdq	%xmm5, %xmm5
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp402:
    000000c0: 	movdqu	(%rax), %xmm0
    000000c4: 	addq	$0x10, %rax
    000000c8: 	movdqa	%xmm0, %xmm1
    000000cc: 	psllq	%xmm3, %xmm0
    000000d0: 	psrlq	%xmm4, %xmm1
    000000d4: 	pand	%xmm6, %xmm0
    000000d8: 	pand	%xmm5, %xmm1
    000000dc: 	paddq	%xmm1, %xmm0
    000000e0: 	paddq	%xmm0, %xmm2
    000000e4: 	cmpq	%rax, %r15
    000000e7: 	jne	.Ltmp402 # Offset: 231
    000000e9: 	movdqa	%xmm2, %xmm0
    000000ed: 	movslq	%r10d, %rax
    000000f0: 	psrldq	$0x8, %xmm0
    000000f5: 	paddq	%xmm0, %xmm2
    000000f9: 	movq	%xmm2, %rsi
    000000fe: 	cmpl	%r8d, %r10d
    00000101: 	je	.Ltmp400 # Offset: 257
.Ltmp405:
    00000103: 	movq	(%r14,%rax,8), %rax
    00000107: 	movl	%r12d, %ecx
    0000010a: 	movq	%rax, %rdx
    0000010d: 	shrq	%cl, %rdx
    00000110: 	movl	%ebx, %ecx
    00000112: 	shlq	%cl, %rax
    00000115: 	andq	%rbp, %rdx
    00000118: 	andq	%r13, %rax
    0000011b: 	addq	%rax, %rdx
    0000011e: 	addq	%rdx, %rsi
.Ltmp400:
    00000121: 	movl	%ebx, %ecx
    00000123: 	movq	%rdi, %rax
    00000126: 	movq	%rdi, %rdx
    00000129: 	shlq	%cl, %rax
    0000012c: 	movl	%r12d, %ecx
    0000012f: 	shrq	%cl, %rdx
    00000132: 	andq	%r13, %rax
    00000135: 	andq	%rbp, %rdx
    00000138: 	addq	%rdx, %rax
    0000013b: 	imulq	$0x1f40, %rax, %rax
    00000142: 	cmpq	%rsi, %rax
    00000145: 	je	.Ltmp403 # Offset: 325
    00000147: 	movl	current_test(%rip), %edx
    0000014d: 	leaq	DATAat0x998d(%rip), %rsi
    00000154: 	movl	$0x1, %edi
    00000159: 	xorl	%eax, %eax
    0000015b: 	movl	%r9d, 0xc(%rsp)
    00000160: 	movl	%r8d, 0x14(%rsp)
    00000165: 	movl	%r10d, 0x10(%rsp)
    0000016a: 	callq	__printf_chk@PLT # Offset: 362
    0000016f: 	movl	0xc(%rsp), %r9d
    00000174: 	movl	iterations(%rip), %r11d
    0000017b: 	addl	$0x1, %r9d
    0000017f: 	cmpl	%r11d, %r9d
    00000182: 	jge	.Ltmp399 # Offset: 386
    00000184: 	movl	init_value(%rip), %edi
    0000018a: 	movl	0x10(%rsp), %r10d
    0000018f: 	movl	0x14(%rsp), %r8d
    00000194: 	jmp	.Ltmp404 # Offset: 404
    00000199: 	nopl	(%rax) # Size: 7
.Ltmp403:
    000001a0: 	addl	$0x1, %r9d
    000001a4: 	cmpl	%r11d, %r9d
    000001a7: 	jl	.Ltmp404 # Offset: 423
.Ltmp399:
    000001ad: 	callq	clock@PLT # Offset: 429
    000001b2: 	pxor	%xmm0, %xmm0
    000001b6: 	movq	0x18(%rsp), %rdi
    000001bb: 	movq	%rax, end_time(%rip)
    000001c2: 	subq	start_time(%rip), %rax
    000001c9: 	cvtsi2sd	%rax, %xmm0
    000001ce: 	divsd	DATAat0x99b0(%rip), %xmm0
    000001d6: 	addq	$0x28, %rsp
    000001da: 	popq	%rbx
    000001db: 	popq	%rbp
    000001dc: 	popq	%r12
    000001de: 	popq	%r13
    000001e0: 	popq	%r14
    000001e2: 	popq	%r15
    000001e4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 484
.Ltmp401:
    000001e9: 	xorl	%eax, %eax
    000001eb: 	xorl	%esi, %esi
    000001ed: 	jmp	.Ltmp405 # Offset: 493
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_variable_shiftIm21rotate_left_variable4ImEEvPT_iiPKc"

Binary Function "_fini" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0x84d4
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x84d4
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 48 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 341 instructions were shortened
BOLT-INFO: removed 84 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 45 out of 58 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x201b88
