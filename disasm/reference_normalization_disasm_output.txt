BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0x2b030, which lies outside .bss
BOLT-WARNING: split function detected on input : _GLOBAL__sub_I_results.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x2aff0(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 3
  State       : disassembled
  Address     : 0x1450
  Size        : 0xc4
  MaxSize     : 0xd0
  Offset      : 0x1450
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB02:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	pushq	%rbx
    0000000c: 	testl	%edi, %edi
    0000000e: 	jle	.Ltmp1 # Offset: 14
    00000014: 	leal	-0x1(%rdi), %eax
    00000017: 	movl	%edi, %r13d
    0000001a: 	movq	%rsi, %r14
    0000001d: 	movq	%rsi, %rbx
    00000020: 	leaq	0x8(%rsi,%rax,8), %r12
    00000025: 	leaq	DATAat0x24150(%rip), %rbp
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp2:
    00000030: 	movq	(%rbx), %rdx
    00000033: 	movq	%rbp, %rsi
    00000036: 	movl	$0x1, %edi
    0000003b: 	xorl	%eax, %eax
    0000003d: 	addq	$0x8, %rbx
    00000041: 	callq	__printf_chk@PLT # Offset: 65
    00000046: 	cmpq	%r12, %rbx
    00000049: 	jne	.Ltmp2 # Offset: 73
    0000004b: 	xorl	%eax, %eax
    0000004d: 	leaq	DATAat0x24136(%rip), %rsi
    00000054: 	movl	$0x1, %edi
    00000059: 	callq	__printf_chk@PLT # Offset: 89
    0000005e: 	cmpl	$0x1, %r13d
    00000062: 	jg	.Ltmp3 # Offset: 98
.Ltmp4:
    00000064: 	callq	_Z11testOneTypeItEvv # Offset: 100
    00000069: 	callq	_Z11testOneTypeIsEvv # Offset: 105
    0000006e: 	callq	_Z11testOneTypeIdEvv # Offset: 110
    00000073: 	popq	%rbx
    00000074: 	xorl	%eax, %eax
    00000076: 	popq	%rbp
    00000077: 	popq	%r12
    00000079: 	popq	%r13
    0000007b: 	popq	%r14
    0000007d: 	retq # Offset: 125
.Ltmp3:
    0000007e: 	movq	0x8(%r14), %rdi
    00000082: 	movl	$0xa, %edx
    00000087: 	xorl	%esi, %esi
    00000089: 	callq	strtol@PLT # Offset: 137
    0000008e: 	movl	%eax, iterations(%rip)
    00000094: 	cmpl	$0x2, %r13d
    00000098: 	jle	.Ltmp4 # Offset: 152
    0000009a: 	movq	0x10(%r14), %rdi
    0000009e: 	xorl	%esi, %esi
    000000a0: 	callq	strtod@PLT # Offset: 160
    000000a5: 	movsd	%xmm0, init_value(%rip)
    000000ad: 	jmp	.Ltmp4 # Offset: 173
.Ltmp1:
    000000af: 	leaq	DATAat0x24136(%rip), %rsi
    000000b6: 	movl	$0x1, %edi
    000000bb: 	xorl	%eax, %eax
    000000bd: 	callq	__printf_chk@PLT # Offset: 189
    000000c2: 	jmp	.Ltmp4 # Offset: 194
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 5
  State       : disassembled
  Address     : 0x1600
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x1600
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x2afe0(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x1630
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x1630
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp5 # Offset: 17
    00000013: 	movq	DATAat0x2afe8(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp5 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp5:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x1660
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1660
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp6 # Offset: 34
    00000024: 	movq	DATAat0x2aff8(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp6 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x16a0
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x16a0
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp7 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp8 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp8:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp7:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 9
  State       : disassembled
  Address     : 0x16e0
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x16e0
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 10
  State       : disassembled
  Address     : 0x16f0
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x16f0
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp9 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp10 # Offset: 38
.Ltmp9:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp11 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp10:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp11:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x24008(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 11
  State       : disassembled
  Address     : 0x1790
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x1790
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp12 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp13 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp14:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp14 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp27:
    00000069: 	leaq	DATAat0x24152(%rip), %rbp
    00000070: 	leaq	DATAat0x24028(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x24068(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp15 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x24898(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x24098(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x24890(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp16 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp20:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp17 # Offset: 244
    000000fa: 	movq	DATAat0x24880(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp21:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x24880(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp18 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp18:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x24137(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x24898(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp19 # Offset: 398
.Ltmp16:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp20 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp21 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp17:
    000001c8: 	movq	DATAat0x24888(%rip), %rsi
    000001cf: 	movq	DATAat0x24880(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp18 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp19:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp15 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp22 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp23:
    00000210: 	addq	$0x10, %rax
.Ltmp22:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp23 # Offset: 542
.Ltmp28:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x240c8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp24 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp25 # Offset: 592
.Ltmp24:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp12:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp25:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp26:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp26 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x24112(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp12 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp13:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp27 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp15:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp28 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x1ac0
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x1ac0
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp29 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp30 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp31:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp31 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp36:
    0000006a: 	leaq	DATAat0x24152(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x240f0(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x24138(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x24152(%rip), %r8
    000000a1: 	leaq	DATAat0x24126(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp32 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp33:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x24137(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp33 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp32 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp34 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp35:
    00000140: 	addq	$0x10, %rax
.Ltmp34:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp35 # Offset: 334
.Ltmp37:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x240c8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp29:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp30:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp36 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp32:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp37 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x1c70
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x1c70
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x1c90
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x1c90
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x24890(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark6scrandEm" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x1cd0
  Size        : 0xc
  MaxSize     : 0x10
  Offset      : 0x1cd0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark6scrandEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	movq	%rdi, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000000b: 	retq # Offset: 11
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark6scrandEm"

Binary Function "_ZN9benchmark7crand64Ev" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x1ce0
  Size        : 0x42
  MaxSize     : 0x50
  Offset      : 0x1ce0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand64Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rdx
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rax
    00000015: 	imulq	%rax, %rdx
    00000019: 	movabsq	$0x14057b7ef767814f, %rax
    00000023: 	addq	%rax, %rdx
    00000026: 	movq	%rdx, %rax
    00000029: 	movq	%rdx, %rcx
    0000002c: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rax
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rax
    0000003e: 	xorq	%rdx, %rax
    00000041: 	retq # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand64Ev"

Binary Function "_ZN9benchmark7crand32Ev" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x1d30
  Size        : 0x41
  MaxSize     : 0x50
  Offset      : 0x1d30
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand32Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rdx
    00000015: 	imulq	%rdx, %rax
    00000019: 	movabsq	$0x14057b7ef767814f, %rdx
    00000023: 	addq	%rdx, %rax
    00000026: 	movq	%rax, %rdx
    00000029: 	movq	%rax, %rcx
    0000002c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rdx
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rdx
    0000003e: 	xorl	%edx, %eax
    00000040: 	retq # Offset: 64
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand32Ev"

Binary Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x1d80
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1d80
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f38, %edx
    00000017: 	movl	$0x746e6975, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x1db0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1db0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3631746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x1de0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1de0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3233746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x1e10
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1e10
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3436746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x1e40
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1e40
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x1e70
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1e70
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x1ea0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1ea0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f36, %edx
    00000017: 	movl	$0x31746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x1ed0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1ed0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f32, %edx
    00000017: 	movl	$0x33746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x1f00
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1f00
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f34, %edx
    00000017: 	movl	$0x36746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x1f30
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x1f30
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x14(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x616f6c66, 0x10(%rdi)
    00000019: 	movq	$0x5, 0x8(%rdi)
    00000021: 	movb	$0x0, 0x15(%rdi)
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x1f60
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1f60
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x62756f64, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x656c, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x1f90
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0x1f90
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x65, 0x1a(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movl	$0x6c62, %edx
    00000021: 	movq	%rcx, 0x10(%rdi)
    00000025: 	movw	%dx, 0x18(%rdi)
    00000029: 	movq	$0xb, 0x8(%rdi)
    00000031: 	movb	$0x0, 0x1b(%rdi)
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x1fd0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1fd0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f38746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x2000
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x2000
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3631746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x2030
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x2030
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3233746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x2060
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x2060
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3436746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x2090
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2090
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x745f, %edx
    00000017: 	movl	$0x38746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x20c0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x20c0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3631746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x20f0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x20f0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3233746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x2120
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2120
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3436746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x2150
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2150
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x616f6c66, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x2a74, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x2180
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2180
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x656c, %edx
    00000017: 	movl	$0x62756f64, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x21b0
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x21b0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x0, 0x1c(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movl	$0x2a656c62, 0x18(%rdi)
    00000027: 	movq	$0xc, 0x8(%rdi)
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_Z16accumulate_arrayItET_PKS0_S2_S0_" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x21e0
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x21e0
  Section     : .text
  Orc Section : .local.text._Z16accumulate_arrayItET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp38 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp39 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp40:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp40 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp41 # Offset: 130
.Ltmp43:
    00000084: 	leaq	0x1(%rdx), %rsi
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%rsi, %r8
    00000093: 	jle	.Ltmp42 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %rsi
    00000099: 	addw	0x2(%rdi,%rcx), %ax
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp42 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %rsi
    000000a7: 	addw	0x4(%rdi,%rcx), %ax
    000000ac: 	cmpq	%rsi, %r8
    000000af: 	jle	.Ltmp42 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %rsi
    000000b5: 	addw	0x6(%rdi,%rcx), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp42 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %rsi
    000000c3: 	addw	0x8(%rdi,%rcx), %ax
    000000c8: 	cmpq	%rsi, %r8
    000000cb: 	jle	.Ltmp42 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rdi,%rcx), %ax
    000000d6: 	cmpq	%rdx, %r8
    000000d9: 	jle	.Ltmp42 # Offset: 217
    000000db: 	addw	0xc(%rdi,%rcx), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp38:
    000000e8: 	movl	%edx, %eax
.Ltmp42:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp41:
    000000f0: 	retq # Offset: 240
.Ltmp39:
    000000f1: 	movl	%edx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp43 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z16accumulate_arrayItET_PKS0_S2_S0_"

Binary Function "_Z17accumulate_array2ItET_PKS0_S2_S0_" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x22e0
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x22e0
  Section     : .text
  Orc Section : .local.text._Z17accumulate_array2ItET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp44 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp45 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp46:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp46 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp47 # Offset: 130
.Ltmp49:
    00000084: 	leaq	0x1(%rdx), %rsi
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%rsi, %r8
    00000093: 	jle	.Ltmp48 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %rsi
    00000099: 	addw	0x2(%rdi,%rcx), %ax
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp48 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %rsi
    000000a7: 	addw	0x4(%rdi,%rcx), %ax
    000000ac: 	cmpq	%rsi, %r8
    000000af: 	jle	.Ltmp48 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %rsi
    000000b5: 	addw	0x6(%rdi,%rcx), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp48 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %rsi
    000000c3: 	addw	0x8(%rdi,%rcx), %ax
    000000c8: 	cmpq	%rsi, %r8
    000000cb: 	jle	.Ltmp48 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rdi,%rcx), %ax
    000000d6: 	cmpq	%rdx, %r8
    000000d9: 	jle	.Ltmp48 # Offset: 217
    000000db: 	addw	0xc(%rdi,%rcx), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp44:
    000000e8: 	movl	%edx, %eax
.Ltmp48:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp47:
    000000f0: 	retq # Offset: 240
.Ltmp45:
    000000f1: 	movl	%edx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp49 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z17accumulate_array2ItET_PKS0_S2_S0_"

Binary Function "_Z17accumulate_array3ItET_PKS0_S2_S0_" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0x23e0
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x23e0
  Section     : .text
  Orc Section : .local.text._Z17accumulate_array3ItET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp50 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp51 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp52:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp52 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp53 # Offset: 130
.Ltmp55:
    00000084: 	leaq	0x1(%rdx), %rsi
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%rsi, %r8
    00000093: 	jle	.Ltmp54 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %rsi
    00000099: 	addw	0x2(%rdi,%rcx), %ax
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp54 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %rsi
    000000a7: 	addw	0x4(%rdi,%rcx), %ax
    000000ac: 	cmpq	%rsi, %r8
    000000af: 	jle	.Ltmp54 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %rsi
    000000b5: 	addw	0x6(%rdi,%rcx), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp54 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %rsi
    000000c3: 	addw	0x8(%rdi,%rcx), %ax
    000000c8: 	cmpq	%rsi, %r8
    000000cb: 	jle	.Ltmp54 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rdi,%rcx), %ax
    000000d6: 	cmpq	%rdx, %r8
    000000d9: 	jle	.Ltmp54 # Offset: 217
    000000db: 	addw	0xc(%rdi,%rcx), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp50:
    000000e8: 	movl	%edx, %eax
.Ltmp54:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp53:
    000000f0: 	retq # Offset: 240
.Ltmp51:
    000000f1: 	movl	%edx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp55 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z17accumulate_array3ItET_PKS0_S2_S0_"

Binary Function "_Z17accumulate_array4ItET_PKS0_S2_S0_" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0x24e0
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x24e0
  Section     : .text
  Orc Section : .local.text._Z17accumulate_array4ItET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp56 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp57 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp58:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp58 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp59 # Offset: 130
.Ltmp61:
    00000088: 	leaq	0x1(%rdx), %rsi
    0000008c: 	leaq	0xa0(%rdx,%rdx), %rcx
    00000094: 	addw	(%rdi,%rdx,2), %ax
    00000098: 	cmpq	%rsi, %r8
    0000009b: 	jle	.Ltmp60 # Offset: 155
    0000009d: 	leaq	0x2(%rdx), %rsi
    000000a1: 	addw	-0x9e(%rdi,%rcx), %ax
    000000a9: 	cmpq	%rsi, %r8
    000000ac: 	jle	.Ltmp60 # Offset: 172
    000000ae: 	leaq	0x3(%rdx), %rsi
    000000b2: 	addw	-0x9c(%rdi,%rcx), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp60 # Offset: 189
    000000bf: 	leaq	0x4(%rdx), %rsi
    000000c3: 	addw	-0x9a(%rdi,%rcx), %ax
    000000cb: 	cmpq	%rsi, %r8
    000000ce: 	jle	.Ltmp60 # Offset: 206
    000000d0: 	leaq	0x5(%rdx), %rsi
    000000d4: 	addw	-0x98(%rdi,%rcx), %ax
    000000dc: 	cmpq	%rsi, %r8
    000000df: 	jle	.Ltmp60 # Offset: 223
    000000e1: 	addq	$0x6, %rdx
    000000e5: 	addw	-0x96(%rdi,%rcx), %ax
    000000ed: 	cmpq	%rdx, %r8
    000000f0: 	jle	.Ltmp60 # Offset: 240
    000000f2: 	addw	-0x94(%rdi,%rcx), %ax
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp56:
    00000100: 	movl	%edx, %eax
.Ltmp60:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp59:
    00000108: 	retq # Offset: 264
.Ltmp57:
    00000109: 	movl	%edx, %eax
    0000010b: 	xorl	%edx, %edx
    0000010d: 	jmp	.Ltmp61 # Offset: 269
DWARF CFI Instructions:
    <empty>
End of Function "_Z17accumulate_array4ItET_PKS0_S2_S0_"

Binary Function "_Z14accumulate_ptrItET_PKS0_S2_S0_" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0x2600
  Size        : 0xef
  MaxSize     : 0xf0
  Offset      : 0x2600
  Section     : .text
  Orc Section : .local.text._Z14accumulate_ptrItET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp62 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp63 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp64:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp64 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	leaq	(%rdi,%rdx,2), %rdi
    00000082: 	cmpq	%rdx, %r8
    00000085: 	je	.Ltmp65 # Offset: 133
.Ltmp67:
    00000087: 	leaq	0x1(%rdx), %rcx
    0000008b: 	addw	(%rdi), %ax
    0000008e: 	cmpq	%rcx, %r8
    00000091: 	jle	.Ltmp66 # Offset: 145
    00000093: 	leaq	0x2(%rdx), %rcx
    00000097: 	addw	0x2(%rdi), %ax
    0000009b: 	cmpq	%rcx, %r8
    0000009e: 	jle	.Ltmp66 # Offset: 158
    000000a0: 	leaq	0x3(%rdx), %rcx
    000000a4: 	addw	0x4(%rdi), %ax
    000000a8: 	cmpq	%rcx, %r8
    000000ab: 	jle	.Ltmp66 # Offset: 171
    000000ad: 	leaq	0x4(%rdx), %rcx
    000000b1: 	addw	0x6(%rdi), %ax
    000000b5: 	cmpq	%rcx, %r8
    000000b8: 	jle	.Ltmp66 # Offset: 184
    000000ba: 	leaq	0x5(%rdx), %rcx
    000000be: 	addw	0x8(%rdi), %ax
    000000c2: 	cmpq	%rcx, %r8
    000000c5: 	jle	.Ltmp66 # Offset: 197
    000000c7: 	addq	$0x6, %rdx
    000000cb: 	addw	0xa(%rdi), %ax
    000000cf: 	cmpq	%rdx, %r8
    000000d2: 	jle	.Ltmp66 # Offset: 210
    000000d4: 	addw	0xc(%rdi), %ax
    000000d8: 	retq # Offset: 216
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp62:
    000000e0: 	movl	%edx, %eax
.Ltmp66:
    000000e2: 	retq # Offset: 226
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp65:
    000000e8: 	retq # Offset: 232
.Ltmp63:
    000000e9: 	movl	%edx, %eax
    000000eb: 	xorl	%edx, %edx
    000000ed: 	jmp	.Ltmp67 # Offset: 237
DWARF CFI Instructions:
    <empty>
End of Function "_Z14accumulate_ptrItET_PKS0_S2_S0_"

Binary Function "_Z15accumulate_ptr2ItET_PKS0_S2_S0_" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0x26f0
  Size        : 0xef
  MaxSize     : 0xf0
  Offset      : 0x26f0
  Section     : .text
  Orc Section : .local.text._Z15accumulate_ptr2ItET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp68 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp69 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp70:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp70 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	leaq	(%rdi,%rdx,2), %rdi
    00000082: 	cmpq	%rdx, %r8
    00000085: 	je	.Ltmp71 # Offset: 133
.Ltmp73:
    00000087: 	leaq	0x1(%rdx), %rcx
    0000008b: 	addw	(%rdi), %ax
    0000008e: 	cmpq	%rcx, %r8
    00000091: 	jle	.Ltmp72 # Offset: 145
    00000093: 	leaq	0x2(%rdx), %rcx
    00000097: 	addw	0x2(%rdi), %ax
    0000009b: 	cmpq	%rcx, %r8
    0000009e: 	jle	.Ltmp72 # Offset: 158
    000000a0: 	leaq	0x3(%rdx), %rcx
    000000a4: 	addw	0x4(%rdi), %ax
    000000a8: 	cmpq	%rcx, %r8
    000000ab: 	jle	.Ltmp72 # Offset: 171
    000000ad: 	leaq	0x4(%rdx), %rcx
    000000b1: 	addw	0x6(%rdi), %ax
    000000b5: 	cmpq	%rcx, %r8
    000000b8: 	jle	.Ltmp72 # Offset: 184
    000000ba: 	leaq	0x5(%rdx), %rcx
    000000be: 	addw	0x8(%rdi), %ax
    000000c2: 	cmpq	%rcx, %r8
    000000c5: 	jle	.Ltmp72 # Offset: 197
    000000c7: 	addq	$0x6, %rdx
    000000cb: 	addw	0xa(%rdi), %ax
    000000cf: 	cmpq	%rdx, %r8
    000000d2: 	jle	.Ltmp72 # Offset: 210
    000000d4: 	addw	0xc(%rdi), %ax
    000000d8: 	retq # Offset: 216
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp68:
    000000e0: 	movl	%edx, %eax
.Ltmp72:
    000000e2: 	retq # Offset: 226
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp71:
    000000e8: 	retq # Offset: 232
.Ltmp69:
    000000e9: 	movl	%edx, %eax
    000000eb: 	xorl	%edx, %edx
    000000ed: 	jmp	.Ltmp73 # Offset: 237
DWARF CFI Instructions:
    <empty>
End of Function "_Z15accumulate_ptr2ItET_PKS0_S2_S0_"

Binary Function "_Z15accumulate_ptr3ItET_PKS0_S2_S0_" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0x27e0
  Size        : 0xef
  MaxSize     : 0xf0
  Offset      : 0x27e0
  Section     : .text
  Orc Section : .local.text._Z15accumulate_ptr3ItET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp74 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp75 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp76:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp76 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	leaq	(%rdi,%rdx,2), %rdi
    00000082: 	cmpq	%rdx, %r8
    00000085: 	je	.Ltmp77 # Offset: 133
.Ltmp79:
    00000087: 	leaq	0x1(%rdx), %rcx
    0000008b: 	addw	(%rdi), %ax
    0000008e: 	cmpq	%rcx, %r8
    00000091: 	jle	.Ltmp78 # Offset: 145
    00000093: 	leaq	0x2(%rdx), %rcx
    00000097: 	addw	0x2(%rdi), %ax
    0000009b: 	cmpq	%rcx, %r8
    0000009e: 	jle	.Ltmp78 # Offset: 158
    000000a0: 	leaq	0x3(%rdx), %rcx
    000000a4: 	addw	0x4(%rdi), %ax
    000000a8: 	cmpq	%rcx, %r8
    000000ab: 	jle	.Ltmp78 # Offset: 171
    000000ad: 	leaq	0x4(%rdx), %rcx
    000000b1: 	addw	0x6(%rdi), %ax
    000000b5: 	cmpq	%rcx, %r8
    000000b8: 	jle	.Ltmp78 # Offset: 184
    000000ba: 	leaq	0x5(%rdx), %rcx
    000000be: 	addw	0x8(%rdi), %ax
    000000c2: 	cmpq	%rcx, %r8
    000000c5: 	jle	.Ltmp78 # Offset: 197
    000000c7: 	addq	$0x6, %rdx
    000000cb: 	addw	0xa(%rdi), %ax
    000000cf: 	cmpq	%rdx, %r8
    000000d2: 	jle	.Ltmp78 # Offset: 210
    000000d4: 	addw	0xc(%rdi), %ax
    000000d8: 	retq # Offset: 216
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp74:
    000000e0: 	movl	%edx, %eax
.Ltmp78:
    000000e2: 	retq # Offset: 226
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp77:
    000000e8: 	retq # Offset: 232
.Ltmp75:
    000000e9: 	movl	%edx, %eax
    000000eb: 	xorl	%edx, %edx
    000000ed: 	jmp	.Ltmp79 # Offset: 237
DWARF CFI Instructions:
    <empty>
End of Function "_Z15accumulate_ptr3ItET_PKS0_S2_S0_"

Binary Function "_Z15accumulate_ptr4ItET_PKS0_S2_S0_" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0x28d0
  Size        : 0xef
  MaxSize     : 0xf0
  Offset      : 0x28d0
  Section     : .text
  Orc Section : .local.text._Z15accumulate_ptr4ItET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp80 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp81 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp82:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp82 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	leaq	(%rdi,%rdx,2), %rdi
    00000082: 	cmpq	%rdx, %r8
    00000085: 	je	.Ltmp83 # Offset: 133
.Ltmp85:
    00000087: 	leaq	0x1(%rdx), %rcx
    0000008b: 	addw	(%rdi), %ax
    0000008e: 	cmpq	%rcx, %r8
    00000091: 	jle	.Ltmp84 # Offset: 145
    00000093: 	leaq	0x2(%rdx), %rcx
    00000097: 	addw	0x2(%rdi), %ax
    0000009b: 	cmpq	%rcx, %r8
    0000009e: 	jle	.Ltmp84 # Offset: 158
    000000a0: 	leaq	0x3(%rdx), %rcx
    000000a4: 	addw	0x4(%rdi), %ax
    000000a8: 	cmpq	%rcx, %r8
    000000ab: 	jle	.Ltmp84 # Offset: 171
    000000ad: 	leaq	0x4(%rdx), %rcx
    000000b1: 	addw	0x6(%rdi), %ax
    000000b5: 	cmpq	%rcx, %r8
    000000b8: 	jle	.Ltmp84 # Offset: 184
    000000ba: 	leaq	0x5(%rdx), %rcx
    000000be: 	addw	0x8(%rdi), %ax
    000000c2: 	cmpq	%rcx, %r8
    000000c5: 	jle	.Ltmp84 # Offset: 197
    000000c7: 	addq	$0x6, %rdx
    000000cb: 	addw	0xa(%rdi), %ax
    000000cf: 	cmpq	%rdx, %r8
    000000d2: 	jle	.Ltmp84 # Offset: 210
    000000d4: 	addw	0xc(%rdi), %ax
    000000d8: 	retq # Offset: 216
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp80:
    000000e0: 	movl	%edx, %eax
.Ltmp84:
    000000e2: 	retq # Offset: 226
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp83:
    000000e8: 	retq # Offset: 232
.Ltmp81:
    000000e9: 	movl	%edx, %eax
    000000eb: 	xorl	%edx, %edx
    000000ed: 	jmp	.Ltmp85 # Offset: 237
DWARF CFI Instructions:
    <empty>
End of Function "_Z15accumulate_ptr4ItET_PKS0_S2_S0_"

Binary Function "_Z15accumulate_ptr5ItET_PKS0_S2_S0_" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0x29c0
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x29c0
  Section     : .text
  Orc Section : .local.text._Z15accumulate_ptr5ItET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp86 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp87 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp88:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp88 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp89 # Offset: 130
.Ltmp91:
    00000084: 	leaq	0x1(%rdx), %rsi
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%rsi, %r8
    00000093: 	jle	.Ltmp90 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %rsi
    00000099: 	addw	0x2(%rdi,%rcx), %ax
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp90 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %rsi
    000000a7: 	addw	0x4(%rdi,%rcx), %ax
    000000ac: 	cmpq	%rsi, %r8
    000000af: 	jle	.Ltmp90 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %rsi
    000000b5: 	addw	0x6(%rdi,%rcx), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp90 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %rsi
    000000c3: 	addw	0x8(%rdi,%rcx), %ax
    000000c8: 	cmpq	%rsi, %r8
    000000cb: 	jle	.Ltmp90 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rdi,%rcx), %ax
    000000d6: 	cmpq	%rdx, %r8
    000000d9: 	jle	.Ltmp90 # Offset: 217
    000000db: 	addw	0xc(%rdi,%rcx), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp86:
    000000e8: 	movl	%edx, %eax
.Ltmp90:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp89:
    000000f0: 	retq # Offset: 240
.Ltmp87:
    000000f1: 	movl	%edx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp91 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z15accumulate_ptr5ItET_PKS0_S2_S0_"

Binary Function "_Z15accumulate_ptr6ItET_PKS0_S2_S0_" after disassembly {
  Number      : 50
  State       : disassembled
  Address     : 0x2ac0
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x2ac0
  Section     : .text
  Orc Section : .local.text._Z15accumulate_ptr6ItET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp92 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp93 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp94:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp94 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp95 # Offset: 130
.Ltmp97:
    00000084: 	leaq	0x1(%rdx), %rsi
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%rsi, %r8
    00000093: 	jle	.Ltmp96 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %rsi
    00000099: 	addw	0x2(%rdi,%rcx), %ax
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp96 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %rsi
    000000a7: 	addw	0x4(%rdi,%rcx), %ax
    000000ac: 	cmpq	%rsi, %r8
    000000af: 	jle	.Ltmp96 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %rsi
    000000b5: 	addw	0x6(%rdi,%rcx), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp96 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %rsi
    000000c3: 	addw	0x8(%rdi,%rcx), %ax
    000000c8: 	cmpq	%rsi, %r8
    000000cb: 	jle	.Ltmp96 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rdi,%rcx), %ax
    000000d6: 	cmpq	%rdx, %r8
    000000d9: 	jle	.Ltmp96 # Offset: 217
    000000db: 	addw	0xc(%rdi,%rcx), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp92:
    000000e8: 	movl	%edx, %eax
.Ltmp96:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp95:
    000000f0: 	retq # Offset: 240
.Ltmp93:
    000000f1: 	movl	%edx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp97 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z15accumulate_ptr6ItET_PKS0_S2_S0_"

Binary Function "_Z15accumulate_ptr7ItET_PKS0_S2_S0_" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0x2bc0
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x2bc0
  Section     : .text
  Orc Section : .local.text._Z15accumulate_ptr7ItET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp98 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp99 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp100:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp100 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp101 # Offset: 130
.Ltmp103:
    00000084: 	leaq	0x1(%rdx), %rsi
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%rsi, %r8
    00000093: 	jle	.Ltmp102 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %rsi
    00000099: 	addw	0x2(%rdi,%rcx), %ax
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp102 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %rsi
    000000a7: 	addw	0x4(%rdi,%rcx), %ax
    000000ac: 	cmpq	%rsi, %r8
    000000af: 	jle	.Ltmp102 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %rsi
    000000b5: 	addw	0x6(%rdi,%rcx), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp102 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %rsi
    000000c3: 	addw	0x8(%rdi,%rcx), %ax
    000000c8: 	cmpq	%rsi, %r8
    000000cb: 	jle	.Ltmp102 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rdi,%rcx), %ax
    000000d6: 	cmpq	%rdx, %r8
    000000d9: 	jle	.Ltmp102 # Offset: 217
    000000db: 	addw	0xc(%rdi,%rcx), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp98:
    000000e8: 	movl	%edx, %eax
.Ltmp102:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp101:
    000000f0: 	retq # Offset: 240
.Ltmp99:
    000000f1: 	movl	%edx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp103 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z15accumulate_ptr7ItET_PKS0_S2_S0_"

Binary Function "_Z15accumulate_ptr8ItET_PKS0_S2_S0_" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0x2cc0
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x2cc0
  Section     : .text
  Orc Section : .local.text._Z15accumulate_ptr8ItET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp104 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp105 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp106:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp106 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp107 # Offset: 130
.Ltmp109:
    00000084: 	leaq	0x1(%rdx), %rsi
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%rsi, %r8
    00000093: 	jle	.Ltmp108 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %rsi
    00000099: 	addw	0x2(%rdi,%rcx), %ax
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp108 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %rsi
    000000a7: 	addw	0x4(%rdi,%rcx), %ax
    000000ac: 	cmpq	%rsi, %r8
    000000af: 	jle	.Ltmp108 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %rsi
    000000b5: 	addw	0x6(%rdi,%rcx), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp108 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %rsi
    000000c3: 	addw	0x8(%rdi,%rcx), %ax
    000000c8: 	cmpq	%rsi, %r8
    000000cb: 	jle	.Ltmp108 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rdi,%rcx), %ax
    000000d6: 	cmpq	%rdx, %r8
    000000d9: 	jle	.Ltmp108 # Offset: 217
    000000db: 	addw	0xc(%rdi,%rcx), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp104:
    000000e8: 	movl	%edx, %eax
.Ltmp108:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp107:
    000000f0: 	retq # Offset: 240
.Ltmp105:
    000000f1: 	movl	%edx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp109 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z15accumulate_ptr8ItET_PKS0_S2_S0_"

Binary Function "_Z19accumulate_iteratorIPttET0_T_S2_S1_" after disassembly {
  Number      : 53
  State       : disassembled
  Address     : 0x2dc0
  Size        : 0xf5
  MaxSize     : 0x100
  Offset      : 0x2dc0
  Section     : .text
  Orc Section : .local.text._Z19accumulate_iteratorIPttET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp110 # Offset: 7
    0000000d: 	leaq	-0x2(%rsi), %rax
    00000011: 	movq	%rdi, %rcx
    00000014: 	subq	%rdi, %rax
    00000017: 	movq	%rax, %r8
    0000001a: 	shrq	%r8
    0000001d: 	addq	$0x1, %r8
    00000021: 	cmpq	$0xc, %rax
    00000025: 	jbe	.Ltmp111 # Offset: 37
    0000002b: 	movq	%r8, %rax
    0000002e: 	pxor	%xmm0, %xmm0
    00000032: 	shrq	$0x3, %rax
    00000036: 	shlq	$0x4, %rax
    0000003a: 	addq	%rdi, %rax
    0000003d: 	nopl	(%rax) # Size: 3
.Ltmp112:
    00000040: 	movdqu	(%rcx), %xmm2
    00000044: 	addq	$0x10, %rcx
    00000048: 	paddw	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rcx
    0000004f: 	jne	.Ltmp112 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	psrldq	$0x8, %xmm1
    0000005a: 	paddw	%xmm1, %xmm0
    0000005e: 	movdqa	%xmm0, %xmm1
    00000062: 	psrldq	$0x4, %xmm1
    00000067: 	paddw	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	psrldq	$0x2, %xmm1
    00000074: 	paddw	%xmm1, %xmm0
    00000078: 	pextrw	$0x0, %xmm0, %eax
    0000007d: 	addl	%edx, %eax
    0000007f: 	movq	%r8, %rdx
    00000082: 	andq	$-0x8, %rdx
    00000086: 	leaq	(%rdi,%rdx,2), %rdi
    0000008a: 	cmpq	%rdx, %r8
    0000008d: 	je	.Ltmp113 # Offset: 141
.Ltmp115:
    0000008f: 	leaq	0x2(%rdi), %rdx
    00000093: 	addw	(%rdi), %ax
    00000096: 	cmpq	%rdx, %rsi
    00000099: 	je	.Ltmp114 # Offset: 153
    0000009b: 	leaq	0x4(%rdi), %rdx
    0000009f: 	addw	0x2(%rdi), %ax
    000000a3: 	cmpq	%rdx, %rsi
    000000a6: 	je	.Ltmp114 # Offset: 166
    000000a8: 	leaq	0x6(%rdi), %rdx
    000000ac: 	addw	0x4(%rdi), %ax
    000000b0: 	cmpq	%rdx, %rsi
    000000b3: 	je	.Ltmp114 # Offset: 179
    000000b5: 	leaq	0x8(%rdi), %rdx
    000000b9: 	addw	0x6(%rdi), %ax
    000000bd: 	cmpq	%rdx, %rsi
    000000c0: 	je	.Ltmp114 # Offset: 192
    000000c2: 	leaq	0xa(%rdi), %rdx
    000000c6: 	addw	0x8(%rdi), %ax
    000000ca: 	cmpq	%rdx, %rsi
    000000cd: 	je	.Ltmp114 # Offset: 205
    000000cf: 	leaq	0xc(%rdi), %rdx
    000000d3: 	addw	0xa(%rdi), %ax
    000000d7: 	cmpq	%rdx, %rsi
    000000da: 	je	.Ltmp114 # Offset: 218
    000000dc: 	addw	0xc(%rdi), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp110:
    000000e8: 	movl	%edx, %eax
.Ltmp114:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp113:
    000000f0: 	retq # Offset: 240
.Ltmp111:
    000000f1: 	movl	%edx, %eax
    000000f3: 	jmp	.Ltmp115 # Offset: 243
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_iteratorIPttET0_T_S2_S1_"

Binary Function "_Z19accumulate_iteratorIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_" after disassembly {
  Number      : 54
  State       : disassembled
  Address     : 0x2ec0
  Size        : 0x105
  MaxSize     : 0x110
  Offset      : 0x2ec0
  Section     : .text
  Orc Section : .local.text._Z19accumulate_iteratorIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rsi, %rdi
    0000000a: 	movq	%r8, %rsi
    0000000d: 	cmpq	%r8, %rdi
    00000010: 	je	.Ltmp116 # Offset: 16
    00000016: 	leaq	-0x2(%rdi), %rax
    0000001a: 	movq	%r8, %rcx
    0000001d: 	subq	%r8, %rax
    00000020: 	movq	%rax, %r9
    00000023: 	shrq	%r9
    00000026: 	addq	$0x1, %r9
    0000002a: 	cmpq	$0xc, %rax
    0000002e: 	jbe	.Ltmp117 # Offset: 46
    00000034: 	movq	%r9, %rax
    00000037: 	pxor	%xmm0, %xmm0
    0000003b: 	shrq	$0x3, %rax
    0000003f: 	shlq	$0x4, %rax
    00000043: 	addq	%r8, %rax
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp118:
    00000050: 	movdqu	(%rcx), %xmm2
    00000054: 	addq	$0x10, %rcx
    00000058: 	paddw	%xmm2, %xmm0
    0000005c: 	cmpq	%rax, %rcx
    0000005f: 	jne	.Ltmp118 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	psrldq	$0x8, %xmm1
    0000006a: 	paddw	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x4, %xmm1
    00000077: 	paddw	%xmm1, %xmm0
    0000007b: 	movdqa	%xmm0, %xmm1
    0000007f: 	psrldq	$0x2, %xmm1
    00000084: 	paddw	%xmm1, %xmm0
    00000088: 	pextrw	$0x0, %xmm0, %eax
    0000008d: 	addl	%edx, %eax
    0000008f: 	movq	%r9, %rdx
    00000092: 	andq	$-0x8, %rdx
    00000096: 	leaq	(%r8,%rdx,2), %rsi
    0000009a: 	cmpq	%rdx, %r9
    0000009d: 	je	.Ltmp119 # Offset: 157
.Ltmp121:
    0000009f: 	leaq	0x2(%rsi), %rdx
    000000a3: 	addw	(%rsi), %ax
    000000a6: 	cmpq	%rdx, %rdi
    000000a9: 	je	.Ltmp120 # Offset: 169
    000000ab: 	leaq	0x4(%rsi), %rdx
    000000af: 	addw	0x2(%rsi), %ax
    000000b3: 	cmpq	%rdx, %rdi
    000000b6: 	je	.Ltmp120 # Offset: 182
    000000b8: 	leaq	0x6(%rsi), %rdx
    000000bc: 	addw	0x4(%rsi), %ax
    000000c0: 	cmpq	%rdx, %rdi
    000000c3: 	je	.Ltmp120 # Offset: 195
    000000c5: 	leaq	0x8(%rsi), %rdx
    000000c9: 	addw	0x6(%rsi), %ax
    000000cd: 	cmpq	%rdx, %rdi
    000000d0: 	je	.Ltmp120 # Offset: 208
    000000d2: 	leaq	0xa(%rsi), %rdx
    000000d6: 	addw	0x8(%rsi), %ax
    000000da: 	cmpq	%rdx, %rdi
    000000dd: 	je	.Ltmp120 # Offset: 221
    000000df: 	leaq	0xc(%rsi), %rdx
    000000e3: 	addw	0xa(%rsi), %ax
    000000e7: 	cmpq	%rdx, %rdi
    000000ea: 	je	.Ltmp120 # Offset: 234
    000000ec: 	addw	0xc(%rsi), %ax
    000000f0: 	retq # Offset: 240
    000000f1: 	nopl	(%rax) # Size: 7
.Ltmp116:
    000000f8: 	movl	%edx, %eax
.Ltmp120:
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp119:
    00000100: 	retq # Offset: 256
.Ltmp117:
    00000101: 	movl	%edx, %eax
    00000103: 	jmp	.Ltmp121 # Offset: 259
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_iteratorIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_"

Binary Function "_Z20accumulate_iterator2IPttET0_T_S2_S1_" after disassembly {
  Number      : 55
  State       : disassembled
  Address     : 0x2fd0
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x2fd0
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator2IPttET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp122 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp123 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp124:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp124 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp125 # Offset: 130
.Ltmp127:
    00000084: 	leaq	0x1(%rdx), %rsi
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%rsi, %r8
    00000093: 	jle	.Ltmp126 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %rsi
    00000099: 	addw	0x2(%rdi,%rcx), %ax
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp126 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %rsi
    000000a7: 	addw	0x4(%rdi,%rcx), %ax
    000000ac: 	cmpq	%rsi, %r8
    000000af: 	jle	.Ltmp126 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %rsi
    000000b5: 	addw	0x6(%rdi,%rcx), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp126 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %rsi
    000000c3: 	addw	0x8(%rdi,%rcx), %ax
    000000c8: 	cmpq	%rsi, %r8
    000000cb: 	jle	.Ltmp126 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rdi,%rcx), %ax
    000000d6: 	cmpq	%rdx, %r8
    000000d9: 	jle	.Ltmp126 # Offset: 217
    000000db: 	addw	0xc(%rdi,%rcx), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp122:
    000000e8: 	movl	%edx, %eax
.Ltmp126:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp125:
    000000f0: 	retq # Offset: 240
.Ltmp123:
    000000f1: 	movl	%edx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp127 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator2IPttET0_T_S2_S1_"

Binary Function "_Z20accumulate_iterator2IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_" after disassembly {
  Number      : 56
  State       : disassembled
  Address     : 0x30d0
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x30d0
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator2IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp128 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp129 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp130:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp130 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp131 # Offset: 130
.Ltmp133:
    00000084: 	leaq	0x1(%rdx), %rsi
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%r8, %rsi
    00000093: 	jge	.Ltmp132 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %rsi
    00000099: 	addw	0x2(%rcx,%rdi), %ax
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp132 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %rsi
    000000a7: 	addw	0x4(%rcx,%rdi), %ax
    000000ac: 	cmpq	%rsi, %r8
    000000af: 	jle	.Ltmp132 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %rsi
    000000b5: 	addw	0x6(%rcx,%rdi), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp132 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %rsi
    000000c3: 	addw	0x8(%rcx,%rdi), %ax
    000000c8: 	cmpq	%rsi, %r8
    000000cb: 	jle	.Ltmp132 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rcx,%rdi), %ax
    000000d6: 	cmpq	%rdx, %r8
    000000d9: 	jle	.Ltmp132 # Offset: 217
    000000db: 	addw	0xc(%rcx,%rdi), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp128:
    000000e8: 	movl	%edx, %eax
.Ltmp132:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp131:
    000000f0: 	retq # Offset: 240
.Ltmp129:
    000000f1: 	movl	%edx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp133 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator2IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_"

Binary Function "_Z20accumulate_iterator3IPttET0_T_S2_S1_" after disassembly {
  Number      : 57
  State       : disassembled
  Address     : 0x31d0
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x31d0
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator3IPttET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp134 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp135 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp136:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp136 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp137 # Offset: 130
.Ltmp139:
    00000084: 	leaq	0x1(%rdx), %rsi
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%rsi, %r8
    00000093: 	jle	.Ltmp138 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %rsi
    00000099: 	addw	0x2(%rdi,%rcx), %ax
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp138 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %rsi
    000000a7: 	addw	0x4(%rdi,%rcx), %ax
    000000ac: 	cmpq	%rsi, %r8
    000000af: 	jle	.Ltmp138 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %rsi
    000000b5: 	addw	0x6(%rdi,%rcx), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp138 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %rsi
    000000c3: 	addw	0x8(%rdi,%rcx), %ax
    000000c8: 	cmpq	%rsi, %r8
    000000cb: 	jle	.Ltmp138 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rdi,%rcx), %ax
    000000d6: 	cmpq	%rdx, %r8
    000000d9: 	jle	.Ltmp138 # Offset: 217
    000000db: 	addw	0xc(%rdi,%rcx), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp134:
    000000e8: 	movl	%edx, %eax
.Ltmp138:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp137:
    000000f0: 	retq # Offset: 240
.Ltmp135:
    000000f1: 	movl	%edx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp139 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator3IPttET0_T_S2_S1_"

Binary Function "_Z20accumulate_iterator3IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_" after disassembly {
  Number      : 58
  State       : disassembled
  Address     : 0x32d0
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x32d0
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator3IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp140 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp141 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp142:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp142 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp143 # Offset: 130
.Ltmp145:
    00000084: 	leaq	0x1(%rdx), %rsi
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%r8, %rsi
    00000093: 	jge	.Ltmp144 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %rsi
    00000099: 	addw	0x2(%rcx,%rdi), %ax
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp144 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %rsi
    000000a7: 	addw	0x4(%rcx,%rdi), %ax
    000000ac: 	cmpq	%rsi, %r8
    000000af: 	jle	.Ltmp144 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %rsi
    000000b5: 	addw	0x6(%rcx,%rdi), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp144 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %rsi
    000000c3: 	addw	0x8(%rcx,%rdi), %ax
    000000c8: 	cmpq	%rsi, %r8
    000000cb: 	jle	.Ltmp144 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rcx,%rdi), %ax
    000000d6: 	cmpq	%rdx, %r8
    000000d9: 	jle	.Ltmp144 # Offset: 217
    000000db: 	addw	0xc(%rcx,%rdi), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp140:
    000000e8: 	movl	%edx, %eax
.Ltmp144:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp143:
    000000f0: 	retq # Offset: 240
.Ltmp141:
    000000f1: 	movl	%edx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp145 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator3IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_"

Binary Function "_Z20accumulate_iterator4IPttET0_T_S2_S1_" after disassembly {
  Number      : 59
  State       : disassembled
  Address     : 0x33d0
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x33d0
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator4IPttET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp146 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp147 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp148:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp148 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp149 # Offset: 130
.Ltmp151:
    00000084: 	leaq	0x1(%rdx), %rsi
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%rsi, %r8
    00000093: 	jle	.Ltmp150 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %rsi
    00000099: 	addw	0x2(%rdi,%rcx), %ax
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp150 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %rsi
    000000a7: 	addw	0x4(%rdi,%rcx), %ax
    000000ac: 	cmpq	%rsi, %r8
    000000af: 	jle	.Ltmp150 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %rsi
    000000b5: 	addw	0x6(%rdi,%rcx), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp150 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %rsi
    000000c3: 	addw	0x8(%rdi,%rcx), %ax
    000000c8: 	cmpq	%rsi, %r8
    000000cb: 	jle	.Ltmp150 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rdi,%rcx), %ax
    000000d6: 	cmpq	%rdx, %r8
    000000d9: 	jle	.Ltmp150 # Offset: 217
    000000db: 	addw	0xc(%rdi,%rcx), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp146:
    000000e8: 	movl	%edx, %eax
.Ltmp150:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp149:
    000000f0: 	retq # Offset: 240
.Ltmp147:
    000000f1: 	movl	%edx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp151 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator4IPttET0_T_S2_S1_"

Binary Function "_Z20accumulate_iterator4IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_" after disassembly {
  Number      : 60
  State       : disassembled
  Address     : 0x34d0
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x34d0
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator4IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp152 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp153 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp154:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp154 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp155 # Offset: 130
.Ltmp157:
    00000084: 	leaq	0x1(%rdx), %rsi
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%r8, %rsi
    00000093: 	jge	.Ltmp156 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %rsi
    00000099: 	addw	0x2(%rcx,%rdi), %ax
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp156 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %rsi
    000000a7: 	addw	0x4(%rcx,%rdi), %ax
    000000ac: 	cmpq	%rsi, %r8
    000000af: 	jle	.Ltmp156 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %rsi
    000000b5: 	addw	0x6(%rcx,%rdi), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp156 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %rsi
    000000c3: 	addw	0x8(%rcx,%rdi), %ax
    000000c8: 	cmpq	%rsi, %r8
    000000cb: 	jle	.Ltmp156 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rcx,%rdi), %ax
    000000d6: 	cmpq	%rdx, %r8
    000000d9: 	jle	.Ltmp156 # Offset: 217
    000000db: 	addw	0xc(%rcx,%rdi), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp152:
    000000e8: 	movl	%edx, %eax
.Ltmp156:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp155:
    000000f0: 	retq # Offset: 240
.Ltmp153:
    000000f1: 	movl	%edx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp157 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator4IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_"

Binary Function "_Z20accumulate_iterator5IPttET0_T_S2_S1_" after disassembly {
  Number      : 61
  State       : disassembled
  Address     : 0x35d0
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x35d0
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator5IPttET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp158 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp159 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp160:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp160 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp161 # Offset: 130
.Ltmp163:
    00000088: 	leaq	0x1(%rdx), %rsi
    0000008c: 	leaq	0xc8(%rdx,%rdx), %rcx
    00000094: 	addw	(%rdi,%rdx,2), %ax
    00000098: 	cmpq	%rsi, %r8
    0000009b: 	jle	.Ltmp162 # Offset: 155
    0000009d: 	leaq	0x2(%rdx), %rsi
    000000a1: 	addw	-0xc6(%rdi,%rcx), %ax
    000000a9: 	cmpq	%rsi, %r8
    000000ac: 	jle	.Ltmp162 # Offset: 172
    000000ae: 	leaq	0x3(%rdx), %rsi
    000000b2: 	addw	-0xc4(%rdi,%rcx), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp162 # Offset: 189
    000000bf: 	leaq	0x4(%rdx), %rsi
    000000c3: 	addw	-0xc2(%rdi,%rcx), %ax
    000000cb: 	cmpq	%rsi, %r8
    000000ce: 	jle	.Ltmp162 # Offset: 206
    000000d0: 	leaq	0x5(%rdx), %rsi
    000000d4: 	addw	-0xc0(%rdi,%rcx), %ax
    000000dc: 	cmpq	%rsi, %r8
    000000df: 	jle	.Ltmp162 # Offset: 223
    000000e1: 	addq	$0x6, %rdx
    000000e5: 	addw	-0xbe(%rdi,%rcx), %ax
    000000ed: 	cmpq	%rdx, %r8
    000000f0: 	jle	.Ltmp162 # Offset: 240
    000000f2: 	addw	-0xbc(%rdi,%rcx), %ax
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp158:
    00000100: 	movl	%edx, %eax
.Ltmp162:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp161:
    00000108: 	retq # Offset: 264
.Ltmp159:
    00000109: 	movl	%edx, %eax
    0000010b: 	xorl	%edx, %edx
    0000010d: 	jmp	.Ltmp163 # Offset: 269
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator5IPttET0_T_S2_S1_"

Binary Function "_Z20accumulate_iterator5IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_" after disassembly {
  Number      : 62
  State       : disassembled
  Address     : 0x36f0
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x36f0
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator5IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp164 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp165 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp166:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp166 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp167 # Offset: 130
.Ltmp169:
    00000084: 	leaq	0x1(%rdx), %rsi
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%r8, %rsi
    00000093: 	jge	.Ltmp168 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %rsi
    00000099: 	addw	0x2(%rcx,%rdi), %ax
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp168 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %rsi
    000000a7: 	addw	0x4(%rcx,%rdi), %ax
    000000ac: 	cmpq	%rsi, %r8
    000000af: 	jle	.Ltmp168 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %rsi
    000000b5: 	addw	0x6(%rcx,%rdi), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp168 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %rsi
    000000c3: 	addw	0x8(%rcx,%rdi), %ax
    000000c8: 	cmpq	%rsi, %r8
    000000cb: 	jle	.Ltmp168 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rcx,%rdi), %ax
    000000d6: 	cmpq	%rdx, %r8
    000000d9: 	jle	.Ltmp168 # Offset: 217
    000000db: 	addw	0xc(%rcx,%rdi), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp164:
    000000e8: 	movl	%edx, %eax
.Ltmp168:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp167:
    000000f0: 	retq # Offset: 240
.Ltmp165:
    000000f1: 	movl	%edx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp169 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator5IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_"

Binary Function "_Z20accumulate_iterator6IPttET0_T_S2_S1_" after disassembly {
  Number      : 63
  State       : disassembled
  Address     : 0x37f0
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x37f0
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator6IPttET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp170 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp171 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp172:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp172 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp173 # Offset: 130
.Ltmp175:
    00000088: 	leaq	0x1(%rdx), %rsi
    0000008c: 	leaq	0x190(%rdx,%rdx), %rcx
    00000094: 	addw	(%rdi,%rdx,2), %ax
    00000098: 	cmpq	%rsi, %r8
    0000009b: 	jle	.Ltmp174 # Offset: 155
    0000009d: 	leaq	0x2(%rdx), %rsi
    000000a1: 	addw	-0x18e(%rdi,%rcx), %ax
    000000a9: 	cmpq	%rsi, %r8
    000000ac: 	jle	.Ltmp174 # Offset: 172
    000000ae: 	leaq	0x3(%rdx), %rsi
    000000b2: 	addw	-0x18c(%rdi,%rcx), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp174 # Offset: 189
    000000bf: 	leaq	0x4(%rdx), %rsi
    000000c3: 	addw	-0x18a(%rdi,%rcx), %ax
    000000cb: 	cmpq	%rsi, %r8
    000000ce: 	jle	.Ltmp174 # Offset: 206
    000000d0: 	leaq	0x5(%rdx), %rsi
    000000d4: 	addw	-0x188(%rdi,%rcx), %ax
    000000dc: 	cmpq	%rsi, %r8
    000000df: 	jle	.Ltmp174 # Offset: 223
    000000e1: 	addq	$0x6, %rdx
    000000e5: 	addw	-0x186(%rdi,%rcx), %ax
    000000ed: 	cmpq	%rdx, %r8
    000000f0: 	jle	.Ltmp174 # Offset: 240
    000000f2: 	addw	-0x184(%rdi,%rcx), %ax
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp170:
    00000100: 	movl	%edx, %eax
.Ltmp174:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp173:
    00000108: 	retq # Offset: 264
.Ltmp171:
    00000109: 	movl	%edx, %eax
    0000010b: 	xorl	%edx, %edx
    0000010d: 	jmp	.Ltmp175 # Offset: 269
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator6IPttET0_T_S2_S1_"

Binary Function "_Z20accumulate_iterator6IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_" after disassembly {
  Number      : 64
  State       : disassembled
  Address     : 0x3910
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x3910
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator6IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB063:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp176 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp177 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp178:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp178 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp179 # Offset: 130
.Ltmp181:
    00000088: 	leaq	0x1(%rdx), %rsi
    0000008c: 	leaq	0x190(%rdx,%rdx), %rcx
    00000094: 	addw	(%rdi,%rdx,2), %ax
    00000098: 	cmpq	%r8, %rsi
    0000009b: 	jge	.Ltmp180 # Offset: 155
    0000009d: 	leaq	0x2(%rdx), %rsi
    000000a1: 	addw	-0x18e(%rcx,%rdi), %ax
    000000a9: 	cmpq	%rsi, %r8
    000000ac: 	jle	.Ltmp180 # Offset: 172
    000000ae: 	leaq	0x3(%rdx), %rsi
    000000b2: 	addw	-0x18c(%rcx,%rdi), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp180 # Offset: 189
    000000bf: 	leaq	0x4(%rdx), %rsi
    000000c3: 	addw	-0x18a(%rcx,%rdi), %ax
    000000cb: 	cmpq	%rsi, %r8
    000000ce: 	jle	.Ltmp180 # Offset: 206
    000000d0: 	leaq	0x5(%rdx), %rsi
    000000d4: 	addw	-0x188(%rcx,%rdi), %ax
    000000dc: 	cmpq	%rsi, %r8
    000000df: 	jle	.Ltmp180 # Offset: 223
    000000e1: 	addq	$0x6, %rdx
    000000e5: 	addw	-0x186(%rcx,%rdi), %ax
    000000ed: 	cmpq	%rdx, %r8
    000000f0: 	jle	.Ltmp180 # Offset: 240
    000000f2: 	addw	-0x184(%rcx,%rdi), %ax
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp176:
    00000100: 	movl	%edx, %eax
.Ltmp180:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp179:
    00000108: 	retq # Offset: 264
.Ltmp177:
    00000109: 	movl	%edx, %eax
    0000010b: 	xorl	%edx, %edx
    0000010d: 	jmp	.Ltmp181 # Offset: 269
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator6IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_"

Binary Function "_Z20accumulate_iterator7IPttET0_T_S2_S1_" after disassembly {
  Number      : 65
  State       : disassembled
  Address     : 0x3a30
  Size        : 0xf5
  MaxSize     : 0x100
  Offset      : 0x3a30
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator7IPttET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB064:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp182 # Offset: 7
    0000000d: 	leaq	-0x2(%rsi), %rax
    00000011: 	movq	%rdi, %rcx
    00000014: 	subq	%rdi, %rax
    00000017: 	movq	%rax, %r8
    0000001a: 	shrq	%r8
    0000001d: 	addq	$0x1, %r8
    00000021: 	cmpq	$0xc, %rax
    00000025: 	jbe	.Ltmp183 # Offset: 37
    0000002b: 	movq	%r8, %rax
    0000002e: 	pxor	%xmm0, %xmm0
    00000032: 	shrq	$0x3, %rax
    00000036: 	shlq	$0x4, %rax
    0000003a: 	addq	%rdi, %rax
    0000003d: 	nopl	(%rax) # Size: 3
.Ltmp184:
    00000040: 	movdqu	(%rcx), %xmm2
    00000044: 	addq	$0x10, %rcx
    00000048: 	paddw	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rcx
    0000004f: 	jne	.Ltmp184 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	psrldq	$0x8, %xmm1
    0000005a: 	paddw	%xmm1, %xmm0
    0000005e: 	movdqa	%xmm0, %xmm1
    00000062: 	psrldq	$0x4, %xmm1
    00000067: 	paddw	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	psrldq	$0x2, %xmm1
    00000074: 	paddw	%xmm1, %xmm0
    00000078: 	pextrw	$0x0, %xmm0, %eax
    0000007d: 	addl	%edx, %eax
    0000007f: 	movq	%r8, %rdx
    00000082: 	andq	$-0x8, %rdx
    00000086: 	leaq	(%rdi,%rdx,2), %rdi
    0000008a: 	cmpq	%rdx, %r8
    0000008d: 	je	.Ltmp185 # Offset: 141
.Ltmp187:
    0000008f: 	leaq	0x2(%rdi), %rdx
    00000093: 	addw	(%rdi), %ax
    00000096: 	cmpq	%rdx, %rsi
    00000099: 	je	.Ltmp186 # Offset: 153
    0000009b: 	leaq	0x4(%rdi), %rdx
    0000009f: 	addw	0x2(%rdi), %ax
    000000a3: 	cmpq	%rdx, %rsi
    000000a6: 	je	.Ltmp186 # Offset: 166
    000000a8: 	leaq	0x6(%rdi), %rdx
    000000ac: 	addw	0x4(%rdi), %ax
    000000b0: 	cmpq	%rdx, %rsi
    000000b3: 	je	.Ltmp186 # Offset: 179
    000000b5: 	leaq	0x8(%rdi), %rdx
    000000b9: 	addw	0x6(%rdi), %ax
    000000bd: 	cmpq	%rdx, %rsi
    000000c0: 	je	.Ltmp186 # Offset: 192
    000000c2: 	leaq	0xa(%rdi), %rdx
    000000c6: 	addw	0x8(%rdi), %ax
    000000ca: 	cmpq	%rdx, %rsi
    000000cd: 	je	.Ltmp186 # Offset: 205
    000000cf: 	leaq	0xc(%rdi), %rdx
    000000d3: 	addw	0xa(%rdi), %ax
    000000d7: 	cmpq	%rdx, %rsi
    000000da: 	je	.Ltmp186 # Offset: 218
    000000dc: 	addw	0xc(%rdi), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp182:
    000000e8: 	movl	%edx, %eax
.Ltmp186:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp185:
    000000f0: 	retq # Offset: 240
.Ltmp183:
    000000f1: 	movl	%edx, %eax
    000000f3: 	jmp	.Ltmp187 # Offset: 243
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator7IPttET0_T_S2_S1_"

Binary Function "_Z20accumulate_iterator7IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_" after disassembly {
  Number      : 66
  State       : disassembled
  Address     : 0x3b30
  Size        : 0x105
  MaxSize     : 0x110
  Offset      : 0x3b30
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator7IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB065:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rsi, %rdi
    0000000a: 	movq	%r8, %rsi
    0000000d: 	cmpq	%r8, %rdi
    00000010: 	je	.Ltmp188 # Offset: 16
    00000016: 	leaq	-0x2(%rdi), %rax
    0000001a: 	movq	%r8, %rcx
    0000001d: 	subq	%r8, %rax
    00000020: 	movq	%rax, %r9
    00000023: 	shrq	%r9
    00000026: 	addq	$0x1, %r9
    0000002a: 	cmpq	$0xc, %rax
    0000002e: 	jbe	.Ltmp189 # Offset: 46
    00000034: 	movq	%r9, %rax
    00000037: 	pxor	%xmm0, %xmm0
    0000003b: 	shrq	$0x3, %rax
    0000003f: 	shlq	$0x4, %rax
    00000043: 	addq	%r8, %rax
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp190:
    00000050: 	movdqu	(%rcx), %xmm2
    00000054: 	addq	$0x10, %rcx
    00000058: 	paddw	%xmm2, %xmm0
    0000005c: 	cmpq	%rax, %rcx
    0000005f: 	jne	.Ltmp190 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	psrldq	$0x8, %xmm1
    0000006a: 	paddw	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x4, %xmm1
    00000077: 	paddw	%xmm1, %xmm0
    0000007b: 	movdqa	%xmm0, %xmm1
    0000007f: 	psrldq	$0x2, %xmm1
    00000084: 	paddw	%xmm1, %xmm0
    00000088: 	pextrw	$0x0, %xmm0, %eax
    0000008d: 	addl	%edx, %eax
    0000008f: 	movq	%r9, %rdx
    00000092: 	andq	$-0x8, %rdx
    00000096: 	leaq	(%r8,%rdx,2), %rsi
    0000009a: 	cmpq	%rdx, %r9
    0000009d: 	je	.Ltmp191 # Offset: 157
.Ltmp193:
    0000009f: 	leaq	0x2(%rsi), %rdx
    000000a3: 	addw	(%rsi), %ax
    000000a6: 	cmpq	%rdx, %rdi
    000000a9: 	je	.Ltmp192 # Offset: 169
    000000ab: 	leaq	0x4(%rsi), %rdx
    000000af: 	addw	0x2(%rsi), %ax
    000000b3: 	cmpq	%rdx, %rdi
    000000b6: 	je	.Ltmp192 # Offset: 182
    000000b8: 	leaq	0x6(%rsi), %rdx
    000000bc: 	addw	0x4(%rsi), %ax
    000000c0: 	cmpq	%rdx, %rdi
    000000c3: 	je	.Ltmp192 # Offset: 195
    000000c5: 	leaq	0x8(%rsi), %rdx
    000000c9: 	addw	0x6(%rsi), %ax
    000000cd: 	cmpq	%rdx, %rdi
    000000d0: 	je	.Ltmp192 # Offset: 208
    000000d2: 	leaq	0xa(%rsi), %rdx
    000000d6: 	addw	0x8(%rsi), %ax
    000000da: 	cmpq	%rdx, %rdi
    000000dd: 	je	.Ltmp192 # Offset: 221
    000000df: 	leaq	0xc(%rsi), %rdx
    000000e3: 	addw	0xa(%rsi), %ax
    000000e7: 	cmpq	%rdx, %rdi
    000000ea: 	je	.Ltmp192 # Offset: 234
    000000ec: 	addw	0xc(%rsi), %ax
    000000f0: 	retq # Offset: 240
    000000f1: 	nopl	(%rax) # Size: 7
.Ltmp188:
    000000f8: 	movl	%edx, %eax
.Ltmp192:
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp191:
    00000100: 	retq # Offset: 256
.Ltmp189:
    00000101: 	movl	%edx, %eax
    00000103: 	jmp	.Ltmp193 # Offset: 259
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator7IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_"

Binary Function "_Z20accumulate_iterator8IPttET0_T_S2_S1_" after disassembly {
  Number      : 67
  State       : disassembled
  Address     : 0x3c40
  Size        : 0xe1
  MaxSize     : 0xf0
  Offset      : 0x3c40
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator8IPttET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB066:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	cmpq	%rsi, %rdi
    00000009: 	je	.Ltmp194 # Offset: 9
    0000000f: 	leaq	-0x2(%rsi), %rdx
    00000013: 	movq	%rdi, %rcx
    00000016: 	subq	%rdi, %rdx
    00000019: 	movq	%rdx, %r8
    0000001c: 	shrq	%r8
    0000001f: 	addq	$0x1, %r8
    00000023: 	cmpq	$0xc, %rdx
    00000027: 	jbe	.Ltmp195 # Offset: 39
    00000029: 	movq	%r8, %rdx
    0000002c: 	pxor	%xmm0, %xmm0
    00000030: 	shrq	$0x3, %rdx
    00000034: 	shlq	$0x4, %rdx
    00000038: 	addq	%rdi, %rdx
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp196:
    00000040: 	movdqu	(%rcx), %xmm2
    00000044: 	addq	$0x10, %rcx
    00000048: 	paddw	%xmm2, %xmm0
    0000004c: 	cmpq	%rdx, %rcx
    0000004f: 	jne	.Ltmp196 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	psrldq	$0x8, %xmm1
    0000005a: 	paddw	%xmm1, %xmm0
    0000005e: 	movdqa	%xmm0, %xmm1
    00000062: 	psrldq	$0x4, %xmm1
    00000067: 	paddw	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	psrldq	$0x2, %xmm1
    00000074: 	paddw	%xmm1, %xmm0
    00000078: 	pextrw	$0x0, %xmm0, %edx
    0000007d: 	addl	%edx, %eax
    0000007f: 	movq	%r8, %rdx
    00000082: 	andq	$-0x8, %rdx
    00000086: 	leaq	(%rdi,%rdx,2), %rdi
    0000008a: 	cmpq	%rdx, %r8
    0000008d: 	je	.Ltmp194 # Offset: 141
.Ltmp195:
    0000008f: 	leaq	0x2(%rdi), %rdx
    00000093: 	addw	(%rdi), %ax
    00000096: 	cmpq	%rdx, %rsi
    00000099: 	je	.Ltmp194 # Offset: 153
    0000009b: 	leaq	0x4(%rdi), %rdx
    0000009f: 	addw	0x2(%rdi), %ax
    000000a3: 	cmpq	%rdx, %rsi
    000000a6: 	je	.Ltmp194 # Offset: 166
    000000a8: 	leaq	0x6(%rdi), %rdx
    000000ac: 	addw	0x4(%rdi), %ax
    000000b0: 	cmpq	%rdx, %rsi
    000000b3: 	je	.Ltmp194 # Offset: 179
    000000b5: 	leaq	0x8(%rdi), %rdx
    000000b9: 	addw	0x6(%rdi), %ax
    000000bd: 	cmpq	%rdx, %rsi
    000000c0: 	je	.Ltmp194 # Offset: 192
    000000c2: 	leaq	0xa(%rdi), %rdx
    000000c6: 	addw	0x8(%rdi), %ax
    000000ca: 	cmpq	%rdx, %rsi
    000000cd: 	je	.Ltmp194 # Offset: 205
    000000cf: 	leaq	0xc(%rdi), %rdx
    000000d3: 	addw	0xa(%rdi), %ax
    000000d7: 	cmpq	%rdx, %rsi
    000000da: 	je	.Ltmp194 # Offset: 218
    000000dc: 	addw	0xc(%rdi), %ax
.Ltmp194:
    000000e0: 	retq # Offset: 224
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator8IPttET0_T_S2_S1_"

Binary Function "_Z20accumulate_iterator8IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_" after disassembly {
  Number      : 68
  State       : disassembled
  Address     : 0x3d30
  Size        : 0xe1
  MaxSize     : 0xf0
  Offset      : 0x3d30
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator8IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB067:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	movq	%rdi, %rdx
    00000009: 	cmpq	%rsi, %rdi
    0000000c: 	je	.Ltmp197 # Offset: 12
    00000012: 	leaq	-0x2(%rsi), %r9
    00000016: 	movq	%rdi, %rcx
    00000019: 	subq	%rdi, %r9
    0000001c: 	movq	%r9, %r8
    0000001f: 	shrq	%r8
    00000022: 	addq	$0x1, %r8
    00000026: 	cmpq	$0xc, %r9
    0000002a: 	jbe	.Ltmp198 # Offset: 42
    0000002c: 	movq	%r8, %rdx
    0000002f: 	pxor	%xmm0, %xmm0
    00000033: 	shrq	$0x3, %rdx
    00000037: 	shlq	$0x4, %rdx
    0000003b: 	addq	%rdi, %rdx
    0000003e: 	nop # Size: 2
.Ltmp199:
    00000040: 	movdqu	(%rcx), %xmm2
    00000044: 	addq	$0x10, %rcx
    00000048: 	paddw	%xmm2, %xmm0
    0000004c: 	cmpq	%rdx, %rcx
    0000004f: 	jne	.Ltmp199 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movq	%r8, %rcx
    00000058: 	psrldq	$0x8, %xmm1
    0000005d: 	andq	$-0x8, %rcx
    00000061: 	paddw	%xmm1, %xmm0
    00000065: 	movdqa	%xmm0, %xmm1
    00000069: 	psrldq	$0x4, %xmm1
    0000006e: 	paddw	%xmm1, %xmm0
    00000072: 	movdqa	%xmm0, %xmm1
    00000076: 	psrldq	$0x2, %xmm1
    0000007b: 	paddw	%xmm1, %xmm0
    0000007f: 	pextrw	$0x0, %xmm0, %edx
    00000084: 	addl	%edx, %eax
    00000086: 	leaq	(%rdi,%rcx,2), %rdx
    0000008a: 	cmpq	%rcx, %r8
    0000008d: 	je	.Ltmp197 # Offset: 141
.Ltmp198:
    0000008f: 	leaq	0x2(%rdx), %rcx
    00000093: 	addw	(%rdx), %ax
    00000096: 	cmpq	%rcx, %rsi
    00000099: 	je	.Ltmp197 # Offset: 153
    0000009b: 	leaq	0x4(%rdx), %rcx
    0000009f: 	addw	0x2(%rdx), %ax
    000000a3: 	cmpq	%rcx, %rsi
    000000a6: 	je	.Ltmp197 # Offset: 166
    000000a8: 	leaq	0x6(%rdx), %rcx
    000000ac: 	addw	0x4(%rdx), %ax
    000000b0: 	cmpq	%rcx, %rsi
    000000b3: 	je	.Ltmp197 # Offset: 179
    000000b5: 	leaq	0x8(%rdx), %rcx
    000000b9: 	addw	0x6(%rdx), %ax
    000000bd: 	cmpq	%rcx, %rsi
    000000c0: 	je	.Ltmp197 # Offset: 192
    000000c2: 	leaq	0xa(%rdx), %rcx
    000000c6: 	addw	0x8(%rdx), %ax
    000000ca: 	cmpq	%rcx, %rsi
    000000cd: 	je	.Ltmp197 # Offset: 205
    000000cf: 	leaq	0xc(%rdx), %rcx
    000000d3: 	addw	0xa(%rdx), %ax
    000000d7: 	cmpq	%rcx, %rsi
    000000da: 	je	.Ltmp197 # Offset: 218
    000000dc: 	addw	0xc(%rdx), %ax
.Ltmp197:
    000000e0: 	retq # Offset: 224
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator8IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_"

Binary Function "_Z19accumulate_array2D1ItET_PKS0_mmS0_" after disassembly {
  Number      : 69
  State       : disassembled
  Address     : 0x3e20
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x3e20
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array2D1ItET_PKS0_mmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB068:
    00000000: 	endbr64
    00000004: 	imulq	%rdx, %rsi
    00000008: 	testq	%rsi, %rsi
    0000000b: 	je	.Ltmp200 # Offset: 11
    00000011: 	leaq	-0x1(%rsi), %rax
    00000015: 	cmpq	$0x6, %rax
    00000019: 	jbe	.Ltmp201 # Offset: 25
    0000001f: 	movq	%rsi, %rax
    00000022: 	movq	%rdi, %rdx
    00000025: 	pxor	%xmm0, %xmm0
    00000029: 	shrq	$0x3, %rax
    0000002d: 	shlq	$0x4, %rax
    00000031: 	addq	%rdi, %rax
    00000034: 	nopl	(%rax) # Size: 4
.Ltmp202:
    00000038: 	movdqu	(%rdx), %xmm2
    0000003c: 	addq	$0x10, %rdx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rdx
    00000047: 	jne	.Ltmp202 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movq	%rsi, %rdx
    00000050: 	psrldq	$0x8, %xmm1
    00000055: 	andq	$-0x8, %rdx
    00000059: 	paddw	%xmm1, %xmm0
    0000005d: 	movdqa	%xmm0, %xmm1
    00000061: 	psrldq	$0x4, %xmm1
    00000066: 	paddw	%xmm1, %xmm0
    0000006a: 	movdqa	%xmm0, %xmm1
    0000006e: 	psrldq	$0x2, %xmm1
    00000073: 	paddw	%xmm1, %xmm0
    00000077: 	pextrw	$0x0, %xmm0, %eax
    0000007c: 	addl	%ecx, %eax
    0000007e: 	testb	$0x7, %sil
    00000082: 	je	.Ltmp203 # Offset: 130
.Ltmp205:
    00000084: 	leaq	0x1(%rdx), %r8
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%r8, %rsi
    00000093: 	jbe	.Ltmp204 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %r8
    00000099: 	addw	0x2(%rdi,%rcx), %ax
    0000009e: 	cmpq	%r8, %rsi
    000000a1: 	jbe	.Ltmp204 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %r8
    000000a7: 	addw	0x4(%rdi,%rcx), %ax
    000000ac: 	cmpq	%r8, %rsi
    000000af: 	jbe	.Ltmp204 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %r8
    000000b5: 	addw	0x6(%rdi,%rcx), %ax
    000000ba: 	cmpq	%r8, %rsi
    000000bd: 	jbe	.Ltmp204 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %r8
    000000c3: 	addw	0x8(%rdi,%rcx), %ax
    000000c8: 	cmpq	%r8, %rsi
    000000cb: 	jbe	.Ltmp204 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rdi,%rcx), %ax
    000000d6: 	cmpq	%rdx, %rsi
    000000d9: 	jbe	.Ltmp204 # Offset: 217
    000000db: 	addw	0xc(%rdi,%rcx), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp200:
    000000e8: 	movl	%ecx, %eax
.Ltmp204:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp203:
    000000f0: 	retq # Offset: 240
.Ltmp201:
    000000f1: 	movl	%ecx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp205 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array2D1ItET_PKS0_mmS0_"

Binary Function "_Z19accumulate_array2D2ItET_PKS0_mmS0_" after disassembly {
  Number      : 70
  State       : disassembled
  Address     : 0x3f20
  Size        : 0x13e
  MaxSize     : 0x140
  Offset      : 0x3f20
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array2D2ItET_PKS0_mmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB069:
    00000000: 	endbr64
    00000004: 	movl	%ecx, %r8d
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp206 # Offset: 10
    00000010: 	pushq	%r13
    00000012: 	movq	%rdx, %r10
    00000015: 	movq	%rsi, %r11
    00000018: 	xorl	%ecx, %ecx
    0000001a: 	pushq	%r12
    0000001c: 	movq	%rdi, %rsi
    0000001f: 	leaq	-0x1(%rdx), %r12
    00000023: 	andq	$-0x8, %r10
    00000027: 	pushq	%rbp
    00000028: 	xorl	%r9d, %r9d
    0000002b: 	leaq	(%rdx,%rdx), %rbp
    0000002f: 	pushq	%rbx
    00000030: 	movq	%rdx, %rbx
    00000033: 	shrq	$0x3, %rbx
    00000037: 	shlq	$0x4, %rbx
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp210:
    00000040: 	testq	%rdx, %rdx
    00000043: 	je	.Ltmp207 # Offset: 67
    00000049: 	cmpq	$0x6, %r12
    0000004d: 	jbe	.Ltmp208 # Offset: 77
    00000053: 	leaq	(%rbx,%rsi), %r13
    00000057: 	movq	%rsi, %rax
    0000005a: 	pxor	%xmm0, %xmm0
    0000005e: 	nop # Size: 2
.Ltmp209:
    00000060: 	movdqu	(%rax), %xmm2
    00000064: 	addq	$0x10, %rax
    00000068: 	paddw	%xmm2, %xmm0
    0000006c: 	cmpq	%r13, %rax
    0000006f: 	jne	.Ltmp209 # Offset: 111
    00000071: 	movdqa	%xmm0, %xmm1
    00000075: 	psrldq	$0x8, %xmm1
    0000007a: 	paddw	%xmm1, %xmm0
    0000007e: 	movdqa	%xmm0, %xmm1
    00000082: 	psrldq	$0x4, %xmm1
    00000087: 	paddw	%xmm1, %xmm0
    0000008b: 	movdqa	%xmm0, %xmm1
    0000008f: 	psrldq	$0x2, %xmm1
    00000094: 	paddw	%xmm1, %xmm0
    00000098: 	pextrw	$0x0, %xmm0, %eax
    0000009d: 	addl	%eax, %r8d
    000000a0: 	cmpq	%rdx, %r10
    000000a3: 	je	.Ltmp207 # Offset: 163
    000000a5: 	movq	%r10, %rax
.Ltmp211:
    000000a8: 	leaq	(%rax,%rcx), %r13
    000000ac: 	addw	(%rdi,%r13,2), %r8w
    000000b1: 	leaq	0x1(%rax), %r13
    000000b5: 	cmpq	%r13, %rdx
    000000b8: 	jbe	.Ltmp207 # Offset: 184
    000000ba: 	addq	%rcx, %r13
    000000bd: 	addw	(%rdi,%r13,2), %r8w
    000000c2: 	leaq	0x2(%rax), %r13
    000000c6: 	cmpq	%r13, %rdx
    000000c9: 	jbe	.Ltmp207 # Offset: 201
    000000cb: 	addq	%rcx, %r13
    000000ce: 	addw	(%rdi,%r13,2), %r8w
    000000d3: 	leaq	0x3(%rax), %r13
    000000d7: 	cmpq	%r13, %rdx
    000000da: 	jbe	.Ltmp207 # Offset: 218
    000000dc: 	addq	%rcx, %r13
    000000df: 	addw	(%rdi,%r13,2), %r8w
    000000e4: 	leaq	0x4(%rax), %r13
    000000e8: 	cmpq	%r13, %rdx
    000000eb: 	jbe	.Ltmp207 # Offset: 235
    000000ed: 	addq	%rcx, %r13
    000000f0: 	addw	(%rdi,%r13,2), %r8w
    000000f5: 	leaq	0x5(%rax), %r13
    000000f9: 	cmpq	%r13, %rdx
    000000fc: 	jbe	.Ltmp207 # Offset: 252
    000000fe: 	addq	%rcx, %r13
    00000101: 	addq	$0x6, %rax
    00000105: 	addw	(%rdi,%r13,2), %r8w
    0000010a: 	cmpq	%rax, %rdx
    0000010d: 	jbe	.Ltmp207 # Offset: 269
    0000010f: 	addq	%rcx, %rax
    00000112: 	addw	(%rdi,%rax,2), %r8w
.Ltmp207:
    00000117: 	addq	$0x1, %r9
    0000011b: 	addq	%rdx, %rcx
    0000011e: 	addq	%rbp, %rsi
    00000121: 	cmpq	%r9, %r11
    00000124: 	jne	.Ltmp210 # Offset: 292
    0000012a: 	popq	%rbx
    0000012b: 	movl	%r8d, %eax
    0000012e: 	popq	%rbp
    0000012f: 	popq	%r12
    00000131: 	popq	%r13
    00000133: 	retq # Offset: 307
.Ltmp208:
    00000134: 	xorl	%eax, %eax
    00000136: 	jmp	.Ltmp211 # Offset: 310
.Ltmp206:
    0000013b: 	movl	%ecx, %eax
    0000013d: 	retq # Offset: 317
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array2D2ItET_PKS0_mmS0_"

Binary Function "_Z19accumulate_array2D3ItET_PKS0_mmS0_" after disassembly {
  Number      : 71
  State       : disassembled
  Address     : 0x4060
  Size        : 0x13e
  MaxSize     : 0x140
  Offset      : 0x4060
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array2D3ItET_PKS0_mmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB070:
    00000000: 	endbr64
    00000004: 	movl	%ecx, %r8d
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp212 # Offset: 10
    00000010: 	pushq	%r13
    00000012: 	movq	%rdx, %r10
    00000015: 	movq	%rsi, %r11
    00000018: 	xorl	%ecx, %ecx
    0000001a: 	pushq	%r12
    0000001c: 	movq	%rdi, %rsi
    0000001f: 	leaq	-0x1(%rdx), %r12
    00000023: 	andq	$-0x8, %r10
    00000027: 	pushq	%rbp
    00000028: 	xorl	%r9d, %r9d
    0000002b: 	leaq	(%rdx,%rdx), %rbp
    0000002f: 	pushq	%rbx
    00000030: 	movq	%rdx, %rbx
    00000033: 	shrq	$0x3, %rbx
    00000037: 	shlq	$0x4, %rbx
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp216:
    00000040: 	testq	%rdx, %rdx
    00000043: 	je	.Ltmp213 # Offset: 67
    00000049: 	cmpq	$0x6, %r12
    0000004d: 	jbe	.Ltmp214 # Offset: 77
    00000053: 	leaq	(%rbx,%rsi), %r13
    00000057: 	movq	%rsi, %rax
    0000005a: 	pxor	%xmm0, %xmm0
    0000005e: 	nop # Size: 2
.Ltmp215:
    00000060: 	movdqu	(%rax), %xmm2
    00000064: 	addq	$0x10, %rax
    00000068: 	paddw	%xmm2, %xmm0
    0000006c: 	cmpq	%r13, %rax
    0000006f: 	jne	.Ltmp215 # Offset: 111
    00000071: 	movdqa	%xmm0, %xmm1
    00000075: 	psrldq	$0x8, %xmm1
    0000007a: 	paddw	%xmm1, %xmm0
    0000007e: 	movdqa	%xmm0, %xmm1
    00000082: 	psrldq	$0x4, %xmm1
    00000087: 	paddw	%xmm1, %xmm0
    0000008b: 	movdqa	%xmm0, %xmm1
    0000008f: 	psrldq	$0x2, %xmm1
    00000094: 	paddw	%xmm1, %xmm0
    00000098: 	pextrw	$0x0, %xmm0, %eax
    0000009d: 	addl	%eax, %r8d
    000000a0: 	cmpq	%rdx, %r10
    000000a3: 	je	.Ltmp213 # Offset: 163
    000000a5: 	movq	%r10, %rax
.Ltmp217:
    000000a8: 	leaq	(%rax,%rcx), %r13
    000000ac: 	addw	(%rdi,%r13,2), %r8w
    000000b1: 	leaq	0x1(%rax), %r13
    000000b5: 	cmpq	%r13, %rdx
    000000b8: 	jbe	.Ltmp213 # Offset: 184
    000000ba: 	addq	%rcx, %r13
    000000bd: 	addw	(%rdi,%r13,2), %r8w
    000000c2: 	leaq	0x2(%rax), %r13
    000000c6: 	cmpq	%r13, %rdx
    000000c9: 	jbe	.Ltmp213 # Offset: 201
    000000cb: 	addq	%rcx, %r13
    000000ce: 	addw	(%rdi,%r13,2), %r8w
    000000d3: 	leaq	0x3(%rax), %r13
    000000d7: 	cmpq	%r13, %rdx
    000000da: 	jbe	.Ltmp213 # Offset: 218
    000000dc: 	addq	%rcx, %r13
    000000df: 	addw	(%rdi,%r13,2), %r8w
    000000e4: 	leaq	0x4(%rax), %r13
    000000e8: 	cmpq	%r13, %rdx
    000000eb: 	jbe	.Ltmp213 # Offset: 235
    000000ed: 	addq	%rcx, %r13
    000000f0: 	addw	(%rdi,%r13,2), %r8w
    000000f5: 	leaq	0x5(%rax), %r13
    000000f9: 	cmpq	%r13, %rdx
    000000fc: 	jbe	.Ltmp213 # Offset: 252
    000000fe: 	addq	%rcx, %r13
    00000101: 	addq	$0x6, %rax
    00000105: 	addw	(%rdi,%r13,2), %r8w
    0000010a: 	cmpq	%rax, %rdx
    0000010d: 	jbe	.Ltmp213 # Offset: 269
    0000010f: 	addq	%rcx, %rax
    00000112: 	addw	(%rdi,%rax,2), %r8w
.Ltmp213:
    00000117: 	addq	$0x1, %r9
    0000011b: 	addq	%rdx, %rcx
    0000011e: 	addq	%rbp, %rsi
    00000121: 	cmpq	%r9, %r11
    00000124: 	jne	.Ltmp216 # Offset: 292
    0000012a: 	popq	%rbx
    0000012b: 	movl	%r8d, %eax
    0000012e: 	popq	%rbp
    0000012f: 	popq	%r12
    00000131: 	popq	%r13
    00000133: 	retq # Offset: 307
.Ltmp214:
    00000134: 	xorl	%eax, %eax
    00000136: 	jmp	.Ltmp217 # Offset: 310
.Ltmp212:
    0000013b: 	movl	%ecx, %eax
    0000013d: 	retq # Offset: 317
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array2D3ItET_PKS0_mmS0_"

Binary Function "_Z19accumulate_array2D4ItET_PKS0_mmS0_" after disassembly {
  Number      : 72
  State       : disassembled
  Address     : 0x41a0
  Size        : 0x12a
  MaxSize     : 0x130
  Offset      : 0x41a0
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array2D4ItET_PKS0_mmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB071:
    00000000: 	endbr64
    00000004: 	movl	%ecx, %r8d
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp218 # Offset: 10
    00000010: 	movq	%rdx, %r11
    00000013: 	movq	%rdx, %r9
    00000016: 	pushq	%r12
    00000018: 	movq	%rsi, %r10
    0000001b: 	shrq	$0x3, %r11
    0000001f: 	pushq	%rbp
    00000020: 	andq	$-0x8, %r9
    00000024: 	leaq	-0x1(%rdx), %rbp
    00000028: 	pushq	%rbx
    00000029: 	shlq	$0x4, %r11
    0000002d: 	leaq	(%rdx,%rdx), %rbx
    00000031: 	xorl	%esi, %esi
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp222:
    00000038: 	testq	%rdx, %rdx
    0000003b: 	je	.Ltmp219 # Offset: 59
    00000041: 	cmpq	$0x6, %rbp
    00000045: 	jbe	.Ltmp220 # Offset: 69
    0000004b: 	movq	%rdi, %rax
    0000004e: 	leaq	(%r11,%rdi), %rcx
    00000052: 	pxor	%xmm0, %xmm0
    00000056: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp221:
    00000060: 	movdqu	(%rax), %xmm2
    00000064: 	addq	$0x10, %rax
    00000068: 	paddw	%xmm2, %xmm0
    0000006c: 	cmpq	%rcx, %rax
    0000006f: 	jne	.Ltmp221 # Offset: 111
    00000071: 	movdqa	%xmm0, %xmm1
    00000075: 	psrldq	$0x8, %xmm1
    0000007a: 	paddw	%xmm1, %xmm0
    0000007e: 	movdqa	%xmm0, %xmm1
    00000082: 	psrldq	$0x4, %xmm1
    00000087: 	paddw	%xmm1, %xmm0
    0000008b: 	movdqa	%xmm0, %xmm1
    0000008f: 	psrldq	$0x2, %xmm1
    00000094: 	paddw	%xmm1, %xmm0
    00000098: 	pextrw	$0x0, %xmm0, %eax
    0000009d: 	addl	%eax, %r8d
    000000a0: 	cmpq	%r9, %rdx
    000000a3: 	je	.Ltmp219 # Offset: 163
    000000a5: 	movq	%r9, %rax
.Ltmp223:
    000000a8: 	leaq	0x1(%rax), %r12
    000000ac: 	leaq	(%rax,%rax), %rcx
    000000b0: 	addw	(%rdi,%rax,2), %r8w
    000000b5: 	cmpq	%r12, %rdx
    000000b8: 	jbe	.Ltmp219 # Offset: 184
    000000ba: 	leaq	0x2(%rax), %r12
    000000be: 	addw	0x2(%rdi,%rcx), %r8w
    000000c4: 	cmpq	%r12, %rdx
    000000c7: 	jbe	.Ltmp219 # Offset: 199
    000000c9: 	leaq	0x3(%rax), %r12
    000000cd: 	addw	0x4(%rdi,%rcx), %r8w
    000000d3: 	cmpq	%r12, %rdx
    000000d6: 	jbe	.Ltmp219 # Offset: 214
    000000d8: 	leaq	0x4(%rax), %r12
    000000dc: 	addw	0x6(%rdi,%rcx), %r8w
    000000e2: 	cmpq	%r12, %rdx
    000000e5: 	jbe	.Ltmp219 # Offset: 229
    000000e7: 	leaq	0x5(%rax), %r12
    000000eb: 	addw	0x8(%rdi,%rcx), %r8w
    000000f1: 	cmpq	%r12, %rdx
    000000f4: 	jbe	.Ltmp219 # Offset: 244
    000000f6: 	addq	$0x6, %rax
    000000fa: 	addw	0xa(%rdi,%rcx), %r8w
    00000100: 	cmpq	%rax, %rdx
    00000103: 	jbe	.Ltmp219 # Offset: 259
    00000105: 	addw	0xc(%rdi,%rcx), %r8w
.Ltmp219:
    0000010b: 	addq	$0x1, %rsi
    0000010f: 	addq	%rbx, %rdi
    00000112: 	cmpq	%rsi, %r10
    00000115: 	jne	.Ltmp222 # Offset: 277
    0000011b: 	popq	%rbx
    0000011c: 	movl	%r8d, %eax
    0000011f: 	popq	%rbp
    00000120: 	popq	%r12
    00000122: 	retq # Offset: 290
.Ltmp220:
    00000123: 	xorl	%eax, %eax
    00000125: 	jmp	.Ltmp223 # Offset: 293
.Ltmp218:
    00000127: 	movl	%ecx, %eax
    00000129: 	retq # Offset: 297
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array2D4ItET_PKS0_mmS0_"

Binary Function "_Z19accumulate_array2D5ItET_PKS0_mmS0_" after disassembly {
  Number      : 73
  State       : disassembled
  Address     : 0x42d0
  Size        : 0x130
  MaxSize     : 0x130
  Offset      : 0x42d0
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array2D5ItET_PKS0_mmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB072:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r11
    00000007: 	movl	%ecx, %r8d
    0000000a: 	testq	%rsi, %rsi
    0000000d: 	je	.Ltmp224 # Offset: 13
    00000013: 	movq	%rdx, %r10
    00000016: 	movq	%rdx, %r9
    00000019: 	pushq	%r13
    0000001b: 	movq	%rdx, %rsi
    0000001e: 	andq	$-0x8, %r10
    00000022: 	pushq	%r12
    00000024: 	shrq	$0x3, %r9
    00000028: 	xorl	%ecx, %ecx
    0000002a: 	pushq	%rbp
    0000002b: 	leaq	(%r10,%r10), %r12
    0000002f: 	leaq	-0x1(%rdx), %rbp
    00000033: 	pushq	%rbx
    00000034: 	leaq	(%rdx,%rdx), %rbx
    00000038: 	nopl	(%rax,%rax) # Size: 8
.Ltmp229:
    00000040: 	testq	%rsi, %rsi
    00000043: 	je	.Ltmp225 # Offset: 67
    00000049: 	cmpq	$0x6, %rbp
    0000004d: 	jbe	.Ltmp226 # Offset: 77
    00000053: 	xorl	%eax, %eax
    00000055: 	pxor	%xmm0, %xmm0
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp227:
    00000060: 	movq	%rax, %rdx
    00000063: 	addq	$0x1, %rax
    00000067: 	shlq	$0x4, %rdx
    0000006b: 	movdqu	(%rdi,%rdx), %xmm1
    00000070: 	paddw	%xmm1, %xmm0
    00000074: 	cmpq	%rax, %r9
    00000077: 	jne	.Ltmp227 # Offset: 119
    00000079: 	movdqa	%xmm0, %xmm1
    0000007d: 	leaq	(%rdi,%r12), %rdx
    00000081: 	psrldq	$0x8, %xmm1
    00000086: 	paddw	%xmm1, %xmm0
    0000008a: 	movdqa	%xmm0, %xmm1
    0000008e: 	psrldq	$0x4, %xmm1
    00000093: 	paddw	%xmm1, %xmm0
    00000097: 	movdqa	%xmm0, %xmm1
    0000009b: 	psrldq	$0x2, %xmm1
    000000a0: 	paddw	%xmm1, %xmm0
    000000a4: 	pextrw	$0x0, %xmm0, %eax
    000000a9: 	addl	%eax, %r8d
    000000ac: 	cmpq	%r10, %rsi
    000000af: 	je	.Ltmp228 # Offset: 175
    000000b1: 	movq	%r10, %rax
.Ltmp230:
    000000b4: 	leaq	0x1(%rax), %r13
    000000b8: 	addw	(%rdx), %r8w
    000000bc: 	cmpq	%r13, %rsi
    000000bf: 	jbe	.Ltmp228 # Offset: 191
    000000c1: 	leaq	0x2(%rax), %r13
    000000c5: 	addw	0x2(%rdx), %r8w
    000000ca: 	cmpq	%r13, %rsi
    000000cd: 	jbe	.Ltmp228 # Offset: 205
    000000cf: 	leaq	0x3(%rax), %r13
    000000d3: 	addw	0x4(%rdx), %r8w
    000000d8: 	cmpq	%r13, %rsi
    000000db: 	jbe	.Ltmp228 # Offset: 219
    000000dd: 	leaq	0x4(%rax), %r13
    000000e1: 	addw	0x6(%rdx), %r8w
    000000e6: 	cmpq	%r13, %rsi
    000000e9: 	jbe	.Ltmp228 # Offset: 233
    000000eb: 	leaq	0x5(%rax), %r13
    000000ef: 	addw	0x8(%rdx), %r8w
    000000f4: 	cmpq	%r13, %rsi
    000000f7: 	jbe	.Ltmp228 # Offset: 247
    000000f9: 	addq	$0x6, %rax
    000000fd: 	addw	0xa(%rdx), %r8w
    00000102: 	cmpq	%rax, %rsi
    00000105: 	jbe	.Ltmp228 # Offset: 261
    00000107: 	addw	0xc(%rdx), %r8w
.Ltmp228:
    0000010c: 	addq	%rbx, %rdi
.Ltmp225:
    0000010f: 	addq	$0x1, %rcx
    00000113: 	cmpq	%rcx, %r11
    00000116: 	jne	.Ltmp229 # Offset: 278
    0000011c: 	popq	%rbx
    0000011d: 	movl	%r8d, %eax
    00000120: 	popq	%rbp
    00000121: 	popq	%r12
    00000123: 	popq	%r13
    00000125: 	retq # Offset: 293
.Ltmp226:
    00000126: 	movq	%rdi, %rdx
    00000129: 	xorl	%eax, %eax
    0000012b: 	jmp	.Ltmp230 # Offset: 299
.Ltmp224:
    0000012d: 	movl	%ecx, %eax
    0000012f: 	retq # Offset: 303
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array2D5ItET_PKS0_mmS0_"

Binary Function "_Z19accumulate_array2D6ItET_PKS0_mmS0_" after disassembly {
  Number      : 74
  State       : disassembled
  Address     : 0x4400
  Size        : 0x130
  MaxSize     : 0x130
  Offset      : 0x4400
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array2D6ItET_PKS0_mmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB073:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r11
    00000007: 	movl	%ecx, %r8d
    0000000a: 	testq	%rsi, %rsi
    0000000d: 	je	.Ltmp231 # Offset: 13
    00000013: 	movq	%rdx, %r10
    00000016: 	movq	%rdx, %r9
    00000019: 	pushq	%r13
    0000001b: 	movq	%rdx, %rsi
    0000001e: 	andq	$-0x8, %r10
    00000022: 	pushq	%r12
    00000024: 	shrq	$0x3, %r9
    00000028: 	xorl	%ecx, %ecx
    0000002a: 	pushq	%rbp
    0000002b: 	leaq	(%r10,%r10), %r12
    0000002f: 	leaq	-0x1(%rdx), %rbp
    00000033: 	pushq	%rbx
    00000034: 	leaq	(%rdx,%rdx), %rbx
    00000038: 	nopl	(%rax,%rax) # Size: 8
.Ltmp236:
    00000040: 	testq	%rsi, %rsi
    00000043: 	je	.Ltmp232 # Offset: 67
    00000049: 	cmpq	$0x6, %rbp
    0000004d: 	jbe	.Ltmp233 # Offset: 77
    00000053: 	xorl	%eax, %eax
    00000055: 	pxor	%xmm0, %xmm0
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp234:
    00000060: 	movq	%rax, %rdx
    00000063: 	addq	$0x1, %rax
    00000067: 	shlq	$0x4, %rdx
    0000006b: 	movdqu	(%rdi,%rdx), %xmm1
    00000070: 	paddw	%xmm1, %xmm0
    00000074: 	cmpq	%rax, %r9
    00000077: 	jne	.Ltmp234 # Offset: 119
    00000079: 	movdqa	%xmm0, %xmm1
    0000007d: 	leaq	(%rdi,%r12), %rdx
    00000081: 	psrldq	$0x8, %xmm1
    00000086: 	paddw	%xmm1, %xmm0
    0000008a: 	movdqa	%xmm0, %xmm1
    0000008e: 	psrldq	$0x4, %xmm1
    00000093: 	paddw	%xmm1, %xmm0
    00000097: 	movdqa	%xmm0, %xmm1
    0000009b: 	psrldq	$0x2, %xmm1
    000000a0: 	paddw	%xmm1, %xmm0
    000000a4: 	pextrw	$0x0, %xmm0, %eax
    000000a9: 	addl	%eax, %r8d
    000000ac: 	cmpq	%r10, %rsi
    000000af: 	je	.Ltmp235 # Offset: 175
    000000b1: 	movq	%r10, %rax
.Ltmp237:
    000000b4: 	leaq	0x1(%rax), %r13
    000000b8: 	addw	(%rdx), %r8w
    000000bc: 	cmpq	%r13, %rsi
    000000bf: 	jbe	.Ltmp235 # Offset: 191
    000000c1: 	leaq	0x2(%rax), %r13
    000000c5: 	addw	0x2(%rdx), %r8w
    000000ca: 	cmpq	%r13, %rsi
    000000cd: 	jbe	.Ltmp235 # Offset: 205
    000000cf: 	leaq	0x3(%rax), %r13
    000000d3: 	addw	0x4(%rdx), %r8w
    000000d8: 	cmpq	%r13, %rsi
    000000db: 	jbe	.Ltmp235 # Offset: 219
    000000dd: 	leaq	0x4(%rax), %r13
    000000e1: 	addw	0x6(%rdx), %r8w
    000000e6: 	cmpq	%r13, %rsi
    000000e9: 	jbe	.Ltmp235 # Offset: 233
    000000eb: 	leaq	0x5(%rax), %r13
    000000ef: 	addw	0x8(%rdx), %r8w
    000000f4: 	cmpq	%r13, %rsi
    000000f7: 	jbe	.Ltmp235 # Offset: 247
    000000f9: 	addq	$0x6, %rax
    000000fd: 	addw	0xa(%rdx), %r8w
    00000102: 	cmpq	%rax, %rsi
    00000105: 	jbe	.Ltmp235 # Offset: 261
    00000107: 	addw	0xc(%rdx), %r8w
.Ltmp235:
    0000010c: 	addq	%rbx, %rdi
.Ltmp232:
    0000010f: 	addq	$0x1, %rcx
    00000113: 	cmpq	%rcx, %r11
    00000116: 	jne	.Ltmp236 # Offset: 278
    0000011c: 	popq	%rbx
    0000011d: 	movl	%r8d, %eax
    00000120: 	popq	%rbp
    00000121: 	popq	%r12
    00000123: 	popq	%r13
    00000125: 	retq # Offset: 293
.Ltmp233:
    00000126: 	movq	%rdi, %rdx
    00000129: 	xorl	%eax, %eax
    0000012b: 	jmp	.Ltmp237 # Offset: 299
.Ltmp231:
    0000012d: 	movl	%ecx, %eax
    0000012f: 	retq # Offset: 303
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array2D6ItET_PKS0_mmS0_"

Binary Function "_Z19accumulate_array2D7ItET_PKS0_mmS0_" after disassembly {
  Number      : 75
  State       : disassembled
  Address     : 0x4530
  Size        : 0x11e
  MaxSize     : 0x120
  Offset      : 0x4530
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array2D7ItET_PKS0_mmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB074:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r11
    00000007: 	movl	%ecx, %r8d
    0000000a: 	testq	%rsi, %rsi
    0000000d: 	je	.Ltmp238 # Offset: 13
    00000013: 	movq	%rdx, %r9
    00000016: 	movq	%rdx, %r10
    00000019: 	pushq	%r12
    0000001b: 	movq	%rdx, %rsi
    0000001e: 	pushq	%rbp
    0000001f: 	shrq	$0x3, %r9
    00000023: 	leaq	-0x1(%rdx), %rbp
    00000027: 	andq	$-0x8, %r10
    0000002b: 	pushq	%rbx
    0000002c: 	xorl	%ecx, %ecx
    0000002e: 	leaq	(%rdx,%rdx), %rbx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp242:
    00000038: 	testq	%rsi, %rsi
    0000003b: 	je	.Ltmp239 # Offset: 59
    00000041: 	xorl	%eax, %eax
    00000043: 	cmpq	$0x6, %rbp
    00000047: 	jbe	.Ltmp240 # Offset: 71
    00000049: 	pxor	%xmm0, %xmm0
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp241:
    00000050: 	movq	%rax, %rdx
    00000053: 	addq	$0x1, %rax
    00000057: 	shlq	$0x4, %rdx
    0000005b: 	movdqu	(%rdi,%rdx), %xmm1
    00000060: 	paddw	%xmm1, %xmm0
    00000064: 	cmpq	%rax, %r9
    00000067: 	jne	.Ltmp241 # Offset: 103
    00000069: 	movdqa	%xmm0, %xmm1
    0000006d: 	psrldq	$0x8, %xmm1
    00000072: 	paddw	%xmm1, %xmm0
    00000076: 	movdqa	%xmm0, %xmm1
    0000007a: 	psrldq	$0x4, %xmm1
    0000007f: 	paddw	%xmm1, %xmm0
    00000083: 	movdqa	%xmm0, %xmm1
    00000087: 	psrldq	$0x2, %xmm1
    0000008c: 	paddw	%xmm1, %xmm0
    00000090: 	pextrw	$0x0, %xmm0, %eax
    00000095: 	addl	%eax, %r8d
    00000098: 	cmpq	%rsi, %r10
    0000009b: 	je	.Ltmp239 # Offset: 155
    0000009d: 	movq	%r10, %rax
.Ltmp240:
    000000a0: 	leaq	0x1(%rax), %r12
    000000a4: 	leaq	(%rax,%rax), %rdx
    000000a8: 	addw	(%rdi,%rax,2), %r8w
    000000ad: 	cmpq	%r12, %rsi
    000000b0: 	jbe	.Ltmp239 # Offset: 176
    000000b2: 	leaq	0x2(%rax), %r12
    000000b6: 	addw	0x2(%rdi,%rdx), %r8w
    000000bc: 	cmpq	%r12, %rsi
    000000bf: 	jbe	.Ltmp239 # Offset: 191
    000000c1: 	leaq	0x3(%rax), %r12
    000000c5: 	addw	0x4(%rdi,%rdx), %r8w
    000000cb: 	cmpq	%r12, %rsi
    000000ce: 	jbe	.Ltmp239 # Offset: 206
    000000d0: 	leaq	0x4(%rax), %r12
    000000d4: 	addw	0x6(%rdi,%rdx), %r8w
    000000da: 	cmpq	%r12, %rsi
    000000dd: 	jbe	.Ltmp239 # Offset: 221
    000000df: 	leaq	0x5(%rax), %r12
    000000e3: 	addw	0x8(%rdi,%rdx), %r8w
    000000e9: 	cmpq	%r12, %rsi
    000000ec: 	jbe	.Ltmp239 # Offset: 236
    000000ee: 	addq	$0x6, %rax
    000000f2: 	addw	0xa(%rdi,%rdx), %r8w
    000000f8: 	cmpq	%rax, %rsi
    000000fb: 	jbe	.Ltmp239 # Offset: 251
    000000fd: 	addw	0xc(%rdi,%rdx), %r8w
.Ltmp239:
    00000103: 	addq	$0x1, %rcx
    00000107: 	addq	%rbx, %rdi
    0000010a: 	cmpq	%rcx, %r11
    0000010d: 	jne	.Ltmp242 # Offset: 269
    00000113: 	popq	%rbx
    00000114: 	movl	%r8d, %eax
    00000117: 	popq	%rbp
    00000118: 	popq	%r12
    0000011a: 	retq # Offset: 282
.Ltmp238:
    0000011b: 	movl	%ecx, %eax
    0000011d: 	retq # Offset: 285
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array2D7ItET_PKS0_mmS0_"

Binary Function "_Z19accumulate_array2D8ItET_PKS0_mmS0_" after disassembly {
  Number      : 76
  State       : disassembled
  Address     : 0x4650
  Size        : 0x13e
  MaxSize     : 0x140
  Offset      : 0x4650
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array2D8ItET_PKS0_mmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB075:
    00000000: 	endbr64
    00000004: 	movl	%ecx, %r8d
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp243 # Offset: 10
    00000010: 	pushq	%r13
    00000012: 	movq	%rdx, %r10
    00000015: 	movq	%rsi, %r11
    00000018: 	xorl	%ecx, %ecx
    0000001a: 	pushq	%r12
    0000001c: 	movq	%rdi, %rsi
    0000001f: 	leaq	-0x1(%rdx), %r12
    00000023: 	andq	$-0x8, %r10
    00000027: 	pushq	%rbp
    00000028: 	xorl	%r9d, %r9d
    0000002b: 	leaq	(%rdx,%rdx), %rbp
    0000002f: 	pushq	%rbx
    00000030: 	movq	%rdx, %rbx
    00000033: 	shrq	$0x3, %rbx
    00000037: 	shlq	$0x4, %rbx
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp247:
    00000040: 	testq	%rdx, %rdx
    00000043: 	je	.Ltmp244 # Offset: 67
    00000049: 	cmpq	$0x6, %r12
    0000004d: 	jbe	.Ltmp245 # Offset: 77
    00000053: 	leaq	(%rbx,%rsi), %r13
    00000057: 	movq	%rsi, %rax
    0000005a: 	pxor	%xmm0, %xmm0
    0000005e: 	nop # Size: 2
.Ltmp246:
    00000060: 	movdqu	(%rax), %xmm2
    00000064: 	addq	$0x10, %rax
    00000068: 	paddw	%xmm2, %xmm0
    0000006c: 	cmpq	%r13, %rax
    0000006f: 	jne	.Ltmp246 # Offset: 111
    00000071: 	movdqa	%xmm0, %xmm1
    00000075: 	psrldq	$0x8, %xmm1
    0000007a: 	paddw	%xmm1, %xmm0
    0000007e: 	movdqa	%xmm0, %xmm1
    00000082: 	psrldq	$0x4, %xmm1
    00000087: 	paddw	%xmm1, %xmm0
    0000008b: 	movdqa	%xmm0, %xmm1
    0000008f: 	psrldq	$0x2, %xmm1
    00000094: 	paddw	%xmm1, %xmm0
    00000098: 	pextrw	$0x0, %xmm0, %eax
    0000009d: 	addl	%eax, %r8d
    000000a0: 	cmpq	%rdx, %r10
    000000a3: 	je	.Ltmp244 # Offset: 163
    000000a5: 	movq	%r10, %rax
.Ltmp248:
    000000a8: 	leaq	(%rax,%rcx), %r13
    000000ac: 	addw	(%rdi,%r13,2), %r8w
    000000b1: 	leaq	0x1(%rax), %r13
    000000b5: 	cmpq	%r13, %rdx
    000000b8: 	jbe	.Ltmp244 # Offset: 184
    000000ba: 	addq	%rcx, %r13
    000000bd: 	addw	(%rdi,%r13,2), %r8w
    000000c2: 	leaq	0x2(%rax), %r13
    000000c6: 	cmpq	%r13, %rdx
    000000c9: 	jbe	.Ltmp244 # Offset: 201
    000000cb: 	addq	%rcx, %r13
    000000ce: 	addw	(%rdi,%r13,2), %r8w
    000000d3: 	leaq	0x3(%rax), %r13
    000000d7: 	cmpq	%r13, %rdx
    000000da: 	jbe	.Ltmp244 # Offset: 218
    000000dc: 	addq	%rcx, %r13
    000000df: 	addw	(%rdi,%r13,2), %r8w
    000000e4: 	leaq	0x4(%rax), %r13
    000000e8: 	cmpq	%r13, %rdx
    000000eb: 	jbe	.Ltmp244 # Offset: 235
    000000ed: 	addq	%rcx, %r13
    000000f0: 	addw	(%rdi,%r13,2), %r8w
    000000f5: 	leaq	0x5(%rax), %r13
    000000f9: 	cmpq	%r13, %rdx
    000000fc: 	jbe	.Ltmp244 # Offset: 252
    000000fe: 	addq	%rcx, %r13
    00000101: 	addq	$0x6, %rax
    00000105: 	addw	(%rdi,%r13,2), %r8w
    0000010a: 	cmpq	%rax, %rdx
    0000010d: 	jbe	.Ltmp244 # Offset: 269
    0000010f: 	addq	%rcx, %rax
    00000112: 	addw	(%rdi,%rax,2), %r8w
.Ltmp244:
    00000117: 	addq	$0x1, %r9
    0000011b: 	addq	%rdx, %rcx
    0000011e: 	addq	%rbp, %rsi
    00000121: 	cmpq	%r9, %r11
    00000124: 	jne	.Ltmp247 # Offset: 292
    0000012a: 	popq	%rbx
    0000012b: 	movl	%r8d, %eax
    0000012e: 	popq	%rbp
    0000012f: 	popq	%r12
    00000131: 	popq	%r13
    00000133: 	retq # Offset: 307
.Ltmp245:
    00000134: 	xorl	%eax, %eax
    00000136: 	jmp	.Ltmp248 # Offset: 310
.Ltmp243:
    0000013b: 	movl	%ecx, %eax
    0000013d: 	retq # Offset: 317
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array2D8ItET_PKS0_mmS0_"

Binary Function "_Z19accumulate_array2D9ItET_PKS0_mmS0_" after disassembly {
  Number      : 77
  State       : disassembled
  Address     : 0x4790
  Size        : 0x13e
  MaxSize     : 0x140
  Offset      : 0x4790
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array2D9ItET_PKS0_mmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB076:
    00000000: 	endbr64
    00000004: 	movl	%ecx, %r8d
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp249 # Offset: 10
    00000010: 	pushq	%r13
    00000012: 	movq	%rdx, %r10
    00000015: 	movq	%rsi, %r11
    00000018: 	xorl	%ecx, %ecx
    0000001a: 	pushq	%r12
    0000001c: 	movq	%rdi, %rsi
    0000001f: 	leaq	-0x1(%rdx), %r12
    00000023: 	andq	$-0x8, %r10
    00000027: 	pushq	%rbp
    00000028: 	xorl	%r9d, %r9d
    0000002b: 	leaq	(%rdx,%rdx), %rbp
    0000002f: 	pushq	%rbx
    00000030: 	movq	%rdx, %rbx
    00000033: 	shrq	$0x3, %rbx
    00000037: 	shlq	$0x4, %rbx
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp253:
    00000040: 	testq	%rdx, %rdx
    00000043: 	je	.Ltmp250 # Offset: 67
    00000049: 	cmpq	$0x6, %r12
    0000004d: 	jbe	.Ltmp251 # Offset: 77
    00000053: 	leaq	(%rbx,%rsi), %r13
    00000057: 	movq	%rsi, %rax
    0000005a: 	pxor	%xmm0, %xmm0
    0000005e: 	nop # Size: 2
.Ltmp252:
    00000060: 	movdqu	(%rax), %xmm2
    00000064: 	addq	$0x10, %rax
    00000068: 	paddw	%xmm2, %xmm0
    0000006c: 	cmpq	%r13, %rax
    0000006f: 	jne	.Ltmp252 # Offset: 111
    00000071: 	movdqa	%xmm0, %xmm1
    00000075: 	psrldq	$0x8, %xmm1
    0000007a: 	paddw	%xmm1, %xmm0
    0000007e: 	movdqa	%xmm0, %xmm1
    00000082: 	psrldq	$0x4, %xmm1
    00000087: 	paddw	%xmm1, %xmm0
    0000008b: 	movdqa	%xmm0, %xmm1
    0000008f: 	psrldq	$0x2, %xmm1
    00000094: 	paddw	%xmm1, %xmm0
    00000098: 	pextrw	$0x0, %xmm0, %eax
    0000009d: 	addl	%eax, %r8d
    000000a0: 	cmpq	%rdx, %r10
    000000a3: 	je	.Ltmp250 # Offset: 163
    000000a5: 	movq	%r10, %rax
.Ltmp254:
    000000a8: 	leaq	(%rax,%rcx), %r13
    000000ac: 	addw	(%rdi,%r13,2), %r8w
    000000b1: 	leaq	0x1(%rax), %r13
    000000b5: 	cmpq	%r13, %rdx
    000000b8: 	jbe	.Ltmp250 # Offset: 184
    000000ba: 	addq	%rcx, %r13
    000000bd: 	addw	(%rdi,%r13,2), %r8w
    000000c2: 	leaq	0x2(%rax), %r13
    000000c6: 	cmpq	%r13, %rdx
    000000c9: 	jbe	.Ltmp250 # Offset: 201
    000000cb: 	addq	%rcx, %r13
    000000ce: 	addw	(%rdi,%r13,2), %r8w
    000000d3: 	leaq	0x3(%rax), %r13
    000000d7: 	cmpq	%r13, %rdx
    000000da: 	jbe	.Ltmp250 # Offset: 218
    000000dc: 	addq	%rcx, %r13
    000000df: 	addw	(%rdi,%r13,2), %r8w
    000000e4: 	leaq	0x4(%rax), %r13
    000000e8: 	cmpq	%r13, %rdx
    000000eb: 	jbe	.Ltmp250 # Offset: 235
    000000ed: 	addq	%rcx, %r13
    000000f0: 	addw	(%rdi,%r13,2), %r8w
    000000f5: 	leaq	0x5(%rax), %r13
    000000f9: 	cmpq	%r13, %rdx
    000000fc: 	jbe	.Ltmp250 # Offset: 252
    000000fe: 	addq	%rcx, %r13
    00000101: 	addq	$0x6, %rax
    00000105: 	addw	(%rdi,%r13,2), %r8w
    0000010a: 	cmpq	%rax, %rdx
    0000010d: 	jbe	.Ltmp250 # Offset: 269
    0000010f: 	addq	%rcx, %rax
    00000112: 	addw	(%rdi,%rax,2), %r8w
.Ltmp250:
    00000117: 	addq	$0x1, %r9
    0000011b: 	addq	%rdx, %rcx
    0000011e: 	addq	%rbp, %rsi
    00000121: 	cmpq	%r9, %r11
    00000124: 	jne	.Ltmp253 # Offset: 292
    0000012a: 	popq	%rbx
    0000012b: 	movl	%r8d, %eax
    0000012e: 	popq	%rbp
    0000012f: 	popq	%r12
    00000131: 	popq	%r13
    00000133: 	retq # Offset: 307
.Ltmp251:
    00000134: 	xorl	%eax, %eax
    00000136: 	jmp	.Ltmp254 # Offset: 310
.Ltmp249:
    0000013b: 	movl	%ecx, %eax
    0000013d: 	retq # Offset: 317
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array2D9ItET_PKS0_mmS0_"

Binary Function "_Z19accumulate_array3D1ItET_PKS0_mmmS0_" after disassembly {
  Number      : 78
  State       : disassembled
  Address     : 0x48d0
  Size        : 0x100
  MaxSize     : 0x100
  Offset      : 0x48d0
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array3D1ItET_PKS0_mmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB077:
    00000000: 	endbr64
    00000004: 	imulq	%rcx, %rdx
    00000008: 	imulq	%rsi, %rdx
    0000000c: 	testq	%rdx, %rdx
    0000000f: 	je	.Ltmp255 # Offset: 15
    00000015: 	leaq	-0x1(%rdx), %rax
    00000019: 	cmpq	$0x6, %rax
    0000001d: 	jbe	.Ltmp256 # Offset: 29
    00000023: 	movq	%rdx, %rax
    00000026: 	movq	%rdi, %rcx
    00000029: 	pxor	%xmm0, %xmm0
    0000002d: 	shrq	$0x3, %rax
    00000031: 	shlq	$0x4, %rax
    00000035: 	addq	%rdi, %rax
    00000038: 	nopl	(%rax,%rax) # Size: 8
.Ltmp257:
    00000040: 	movdqu	(%rcx), %xmm2
    00000044: 	addq	$0x10, %rcx
    00000048: 	paddw	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rcx
    0000004f: 	jne	.Ltmp257 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movq	%rdx, %rcx
    00000058: 	psrldq	$0x8, %xmm1
    0000005d: 	andq	$-0x8, %rcx
    00000061: 	paddw	%xmm1, %xmm0
    00000065: 	movdqa	%xmm0, %xmm1
    00000069: 	psrldq	$0x4, %xmm1
    0000006e: 	paddw	%xmm1, %xmm0
    00000072: 	movdqa	%xmm0, %xmm1
    00000076: 	psrldq	$0x2, %xmm1
    0000007b: 	paddw	%xmm1, %xmm0
    0000007f: 	pextrw	$0x0, %xmm0, %eax
    00000084: 	addl	%r8d, %eax
    00000087: 	testb	$0x7, %dl
    0000008a: 	je	.Ltmp258 # Offset: 138
.Ltmp260:
    0000008c: 	leaq	0x1(%rcx), %r8
    00000090: 	leaq	(%rcx,%rcx), %rsi
    00000094: 	addw	(%rdi,%rcx,2), %ax
    00000098: 	cmpq	%r8, %rdx
    0000009b: 	jbe	.Ltmp259 # Offset: 155
    0000009d: 	leaq	0x2(%rcx), %r8
    000000a1: 	addw	0x2(%rdi,%rsi), %ax
    000000a6: 	cmpq	%r8, %rdx
    000000a9: 	jbe	.Ltmp259 # Offset: 169
    000000ab: 	leaq	0x3(%rcx), %r8
    000000af: 	addw	0x4(%rdi,%rsi), %ax
    000000b4: 	cmpq	%r8, %rdx
    000000b7: 	jbe	.Ltmp259 # Offset: 183
    000000b9: 	leaq	0x4(%rcx), %r8
    000000bd: 	addw	0x6(%rdi,%rsi), %ax
    000000c2: 	cmpq	%r8, %rdx
    000000c5: 	jbe	.Ltmp259 # Offset: 197
    000000c7: 	leaq	0x5(%rcx), %r8
    000000cb: 	addw	0x8(%rdi,%rsi), %ax
    000000d0: 	cmpq	%r8, %rdx
    000000d3: 	jbe	.Ltmp259 # Offset: 211
    000000d5: 	addq	$0x6, %rcx
    000000d9: 	addw	0xa(%rdi,%rsi), %ax
    000000de: 	cmpq	%rcx, %rdx
    000000e1: 	jbe	.Ltmp259 # Offset: 225
    000000e3: 	addw	0xc(%rdi,%rsi), %ax
    000000e8: 	retq # Offset: 232
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp255:
    000000f0: 	movl	%r8d, %eax
.Ltmp259:
    000000f3: 	retq # Offset: 243
    000000f4: 	nopl	(%rax) # Size: 4
.Ltmp258:
    000000f8: 	retq # Offset: 248
.Ltmp256:
    000000f9: 	movl	%r8d, %eax
    000000fc: 	xorl	%ecx, %ecx
    000000fe: 	jmp	.Ltmp260 # Offset: 254
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array3D1ItET_PKS0_mmmS0_"

Binary Function "_Z19accumulate_array3D2ItET_PKS0_mmmS0_" after disassembly {
  Number      : 79
  State       : disassembled
  Address     : 0x49d0
  Size        : 0x183
  MaxSize     : 0x190
  Offset      : 0x49d0
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array3D2ItET_PKS0_mmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB078:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rsi, -0x10(%rsp)
    00000013: 	testq	%rsi, %rsi
    00000016: 	je	.Ltmp261 # Offset: 22
    0000001c: 	movq	%rdx, %r11
    0000001f: 	movq	%rcx, %r12
    00000022: 	movq	%rcx, %r10
    00000025: 	movq	%rcx, %rdx
    00000028: 	movq	%r11, %rax
    0000002b: 	shrq	$0x3, %r12
    0000002f: 	leaq	(%rcx,%rcx), %rbx
    00000033: 	leaq	-0x1(%rcx), %rbp
    00000037: 	imulq	%rcx, %rax
    0000003b: 	shlq	$0x4, %r12
    0000003f: 	andq	$-0x8, %r10
    00000043: 	xorl	%r13d, %r13d
    00000046: 	xorl	%r14d, %r14d
    00000049: 	movq	%rax, -0x18(%rsp)
    0000004e: 	nop # Size: 2
.Ltmp267:
    00000050: 	testq	%r11, %r11
    00000053: 	je	.Ltmp262 # Offset: 83
    00000059: 	leaq	(%rdi,%r13,2), %rsi
    0000005d: 	movq	%r13, %rcx
    00000060: 	xorl	%r9d, %r9d
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp266:
    00000068: 	testq	%rdx, %rdx
    0000006b: 	je	.Ltmp263 # Offset: 107
    00000071: 	cmpq	$0x6, %rbp
    00000075: 	jbe	.Ltmp264 # Offset: 117
    0000007b: 	leaq	(%r12,%rsi), %r15
    0000007f: 	movq	%rsi, %rax
    00000082: 	pxor	%xmm0, %xmm0
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp265:
    00000090: 	movdqu	(%rax), %xmm2
    00000094: 	addq	$0x10, %rax
    00000098: 	paddw	%xmm2, %xmm0
    0000009c: 	cmpq	%r15, %rax
    0000009f: 	jne	.Ltmp265 # Offset: 159
    000000a1: 	movdqa	%xmm0, %xmm1
    000000a5: 	psrldq	$0x8, %xmm1
    000000aa: 	paddw	%xmm1, %xmm0
    000000ae: 	movdqa	%xmm0, %xmm1
    000000b2: 	psrldq	$0x4, %xmm1
    000000b7: 	paddw	%xmm1, %xmm0
    000000bb: 	movdqa	%xmm0, %xmm1
    000000bf: 	psrldq	$0x2, %xmm1
    000000c4: 	paddw	%xmm1, %xmm0
    000000c8: 	pextrw	$0x0, %xmm0, %eax
    000000cd: 	addl	%eax, %r8d
    000000d0: 	cmpq	%rdx, %r10
    000000d3: 	je	.Ltmp263 # Offset: 211
    000000d5: 	movq	%r10, %rax
.Ltmp268:
    000000d8: 	leaq	(%rax,%rcx), %r15
    000000dc: 	addw	(%rdi,%r15,2), %r8w
    000000e1: 	leaq	0x1(%rax), %r15
    000000e5: 	cmpq	%r15, %rdx
    000000e8: 	jbe	.Ltmp263 # Offset: 232
    000000ea: 	addq	%rcx, %r15
    000000ed: 	addw	(%rdi,%r15,2), %r8w
    000000f2: 	leaq	0x2(%rax), %r15
    000000f6: 	cmpq	%r15, %rdx
    000000f9: 	jbe	.Ltmp263 # Offset: 249
    000000fb: 	addq	%rcx, %r15
    000000fe: 	addw	(%rdi,%r15,2), %r8w
    00000103: 	leaq	0x3(%rax), %r15
    00000107: 	cmpq	%r15, %rdx
    0000010a: 	jbe	.Ltmp263 # Offset: 266
    0000010c: 	addq	%rcx, %r15
    0000010f: 	addw	(%rdi,%r15,2), %r8w
    00000114: 	leaq	0x4(%rax), %r15
    00000118: 	cmpq	%r15, %rdx
    0000011b: 	jbe	.Ltmp263 # Offset: 283
    0000011d: 	addq	%rcx, %r15
    00000120: 	addw	(%rdi,%r15,2), %r8w
    00000125: 	leaq	0x5(%rax), %r15
    00000129: 	cmpq	%r15, %rdx
    0000012c: 	jbe	.Ltmp263 # Offset: 300
    0000012e: 	addq	%rcx, %r15
    00000131: 	addq	$0x6, %rax
    00000135: 	addw	(%rdi,%r15,2), %r8w
    0000013a: 	cmpq	%rax, %rdx
    0000013d: 	jbe	.Ltmp263 # Offset: 317
    0000013f: 	addq	%rcx, %rax
    00000142: 	addw	(%rdi,%rax,2), %r8w
.Ltmp263:
    00000147: 	addq	$0x1, %r9
    0000014b: 	addq	%rdx, %rcx
    0000014e: 	addq	%rbx, %rsi
    00000151: 	cmpq	%r9, %r11
    00000154: 	jne	.Ltmp266 # Offset: 340
.Ltmp262:
    0000015a: 	addq	$0x1, %r14
    0000015e: 	addq	-0x18(%rsp), %r13
    00000163: 	cmpq	%r14, -0x10(%rsp)
    00000168: 	jne	.Ltmp267 # Offset: 360
.Ltmp261:
    0000016e: 	popq	%rbx
    0000016f: 	movl	%r8d, %eax
    00000172: 	popq	%rbp
    00000173: 	popq	%r12
    00000175: 	popq	%r13
    00000177: 	popq	%r14
    00000179: 	popq	%r15
    0000017b: 	retq # Offset: 379
.Ltmp264:
    0000017c: 	xorl	%eax, %eax
    0000017e: 	jmp	.Ltmp268 # Offset: 382
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array3D2ItET_PKS0_mmmS0_"

Binary Function "_Z19accumulate_array3D3ItET_PKS0_mmmS0_" after disassembly {
  Number      : 80
  State       : disassembled
  Address     : 0x4b60
  Size        : 0x183
  MaxSize     : 0x190
  Offset      : 0x4b60
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array3D3ItET_PKS0_mmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB079:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rsi, -0x10(%rsp)
    00000013: 	testq	%rsi, %rsi
    00000016: 	je	.Ltmp269 # Offset: 22
    0000001c: 	movq	%rdx, %r11
    0000001f: 	movq	%rcx, %r12
    00000022: 	movq	%rcx, %r10
    00000025: 	movq	%rcx, %rdx
    00000028: 	movq	%r11, %rax
    0000002b: 	shrq	$0x3, %r12
    0000002f: 	leaq	(%rcx,%rcx), %rbx
    00000033: 	leaq	-0x1(%rcx), %rbp
    00000037: 	imulq	%rcx, %rax
    0000003b: 	shlq	$0x4, %r12
    0000003f: 	andq	$-0x8, %r10
    00000043: 	xorl	%r13d, %r13d
    00000046: 	xorl	%r14d, %r14d
    00000049: 	movq	%rax, -0x18(%rsp)
    0000004e: 	nop # Size: 2
.Ltmp275:
    00000050: 	testq	%r11, %r11
    00000053: 	je	.Ltmp270 # Offset: 83
    00000059: 	leaq	(%rdi,%r13,2), %rsi
    0000005d: 	movq	%r13, %rcx
    00000060: 	xorl	%r9d, %r9d
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp274:
    00000068: 	testq	%rdx, %rdx
    0000006b: 	je	.Ltmp271 # Offset: 107
    00000071: 	cmpq	$0x6, %rbp
    00000075: 	jbe	.Ltmp272 # Offset: 117
    0000007b: 	leaq	(%r12,%rsi), %r15
    0000007f: 	movq	%rsi, %rax
    00000082: 	pxor	%xmm0, %xmm0
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp273:
    00000090: 	movdqu	(%rax), %xmm2
    00000094: 	addq	$0x10, %rax
    00000098: 	paddw	%xmm2, %xmm0
    0000009c: 	cmpq	%r15, %rax
    0000009f: 	jne	.Ltmp273 # Offset: 159
    000000a1: 	movdqa	%xmm0, %xmm1
    000000a5: 	psrldq	$0x8, %xmm1
    000000aa: 	paddw	%xmm1, %xmm0
    000000ae: 	movdqa	%xmm0, %xmm1
    000000b2: 	psrldq	$0x4, %xmm1
    000000b7: 	paddw	%xmm1, %xmm0
    000000bb: 	movdqa	%xmm0, %xmm1
    000000bf: 	psrldq	$0x2, %xmm1
    000000c4: 	paddw	%xmm1, %xmm0
    000000c8: 	pextrw	$0x0, %xmm0, %eax
    000000cd: 	addl	%eax, %r8d
    000000d0: 	cmpq	%rdx, %r10
    000000d3: 	je	.Ltmp271 # Offset: 211
    000000d5: 	movq	%r10, %rax
.Ltmp276:
    000000d8: 	leaq	(%rax,%rcx), %r15
    000000dc: 	addw	(%rdi,%r15,2), %r8w
    000000e1: 	leaq	0x1(%rax), %r15
    000000e5: 	cmpq	%r15, %rdx
    000000e8: 	jbe	.Ltmp271 # Offset: 232
    000000ea: 	addq	%rcx, %r15
    000000ed: 	addw	(%rdi,%r15,2), %r8w
    000000f2: 	leaq	0x2(%rax), %r15
    000000f6: 	cmpq	%r15, %rdx
    000000f9: 	jbe	.Ltmp271 # Offset: 249
    000000fb: 	addq	%rcx, %r15
    000000fe: 	addw	(%rdi,%r15,2), %r8w
    00000103: 	leaq	0x3(%rax), %r15
    00000107: 	cmpq	%r15, %rdx
    0000010a: 	jbe	.Ltmp271 # Offset: 266
    0000010c: 	addq	%rcx, %r15
    0000010f: 	addw	(%rdi,%r15,2), %r8w
    00000114: 	leaq	0x4(%rax), %r15
    00000118: 	cmpq	%r15, %rdx
    0000011b: 	jbe	.Ltmp271 # Offset: 283
    0000011d: 	addq	%rcx, %r15
    00000120: 	addw	(%rdi,%r15,2), %r8w
    00000125: 	leaq	0x5(%rax), %r15
    00000129: 	cmpq	%r15, %rdx
    0000012c: 	jbe	.Ltmp271 # Offset: 300
    0000012e: 	addq	%rcx, %r15
    00000131: 	addq	$0x6, %rax
    00000135: 	addw	(%rdi,%r15,2), %r8w
    0000013a: 	cmpq	%rax, %rdx
    0000013d: 	jbe	.Ltmp271 # Offset: 317
    0000013f: 	addq	%rcx, %rax
    00000142: 	addw	(%rdi,%rax,2), %r8w
.Ltmp271:
    00000147: 	addq	$0x1, %r9
    0000014b: 	addq	%rdx, %rcx
    0000014e: 	addq	%rbx, %rsi
    00000151: 	cmpq	%r9, %r11
    00000154: 	jne	.Ltmp274 # Offset: 340
.Ltmp270:
    0000015a: 	addq	$0x1, %r14
    0000015e: 	addq	-0x18(%rsp), %r13
    00000163: 	cmpq	%r14, -0x10(%rsp)
    00000168: 	jne	.Ltmp275 # Offset: 360
.Ltmp269:
    0000016e: 	popq	%rbx
    0000016f: 	movl	%r8d, %eax
    00000172: 	popq	%rbp
    00000173: 	popq	%r12
    00000175: 	popq	%r13
    00000177: 	popq	%r14
    00000179: 	popq	%r15
    0000017b: 	retq # Offset: 379
.Ltmp272:
    0000017c: 	xorl	%eax, %eax
    0000017e: 	jmp	.Ltmp276 # Offset: 382
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array3D3ItET_PKS0_mmmS0_"

Binary Function "_Z19accumulate_array3D4ItET_PKS0_mmmS0_" after disassembly {
  Number      : 81
  State       : disassembled
  Address     : 0x4cf0
  Size        : 0x157
  MaxSize     : 0x160
  Offset      : 0x4cf0
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array3D4ItET_PKS0_mmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB080:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%r8d, %eax
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rsi, -0x10(%rsp)
    00000016: 	testq	%rsi, %rsi
    00000019: 	je	.Ltmp277 # Offset: 25
    0000001f: 	leaq	(%rcx,%rcx), %rbx
    00000023: 	movq	%rcx, %r13
    00000026: 	movq	%rcx, %r10
    00000029: 	movq	%rdi, %rbp
    0000002c: 	movq	%rbx, %r15
    0000002f: 	shrq	$0x3, %r13
    00000033: 	movq	%rdx, %r11
    00000036: 	movq	%rcx, %rsi
    00000039: 	imulq	%rdx, %r15
    0000003d: 	leaq	-0x1(%rcx), %r12
    00000041: 	shlq	$0x4, %r13
    00000045: 	andq	$-0x8, %r10
    00000049: 	xorl	%r14d, %r14d
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp283:
    00000050: 	movq	%rbp, %rdx
    00000053: 	xorl	%r8d, %r8d
    00000056: 	testq	%r11, %r11
    00000059: 	je	.Ltmp278 # Offset: 89
    0000005f: 	nop # Size: 1
.Ltmp282:
    00000060: 	testq	%rsi, %rsi
    00000063: 	je	.Ltmp279 # Offset: 99
    00000069: 	cmpq	$0x6, %r12
    0000006d: 	jbe	.Ltmp280 # Offset: 109
    00000073: 	movq	%rdx, %rcx
    00000076: 	leaq	(%r13,%rdx), %rdi
    0000007b: 	pxor	%xmm0, %xmm0
    0000007f: 	nop # Size: 1
.Ltmp281:
    00000080: 	movdqu	(%rcx), %xmm2
    00000084: 	addq	$0x10, %rcx
    00000088: 	paddw	%xmm2, %xmm0
    0000008c: 	cmpq	%rdi, %rcx
    0000008f: 	jne	.Ltmp281 # Offset: 143
    00000091: 	movdqa	%xmm0, %xmm1
    00000095: 	psrldq	$0x8, %xmm1
    0000009a: 	paddw	%xmm1, %xmm0
    0000009e: 	movdqa	%xmm0, %xmm1
    000000a2: 	psrldq	$0x4, %xmm1
    000000a7: 	paddw	%xmm1, %xmm0
    000000ab: 	movdqa	%xmm0, %xmm1
    000000af: 	psrldq	$0x2, %xmm1
    000000b4: 	paddw	%xmm1, %xmm0
    000000b8: 	pextrw	$0x0, %xmm0, %ecx
    000000bd: 	addl	%ecx, %eax
    000000bf: 	cmpq	%rsi, %r10
    000000c2: 	je	.Ltmp279 # Offset: 194
    000000c4: 	movq	%r10, %rcx
.Ltmp284:
    000000c7: 	leaq	0x1(%rcx), %r9
    000000cb: 	leaq	(%rcx,%rcx), %rdi
    000000cf: 	addw	(%rdx,%rcx,2), %ax
    000000d3: 	cmpq	%r9, %rsi
    000000d6: 	jbe	.Ltmp279 # Offset: 214
    000000d8: 	leaq	0x2(%rcx), %r9
    000000dc: 	addw	0x2(%rdx,%rdi), %ax
    000000e1: 	cmpq	%r9, %rsi
    000000e4: 	jbe	.Ltmp279 # Offset: 228
    000000e6: 	leaq	0x3(%rcx), %r9
    000000ea: 	addw	0x4(%rdx,%rdi), %ax
    000000ef: 	cmpq	%r9, %rsi
    000000f2: 	jbe	.Ltmp279 # Offset: 242
    000000f4: 	leaq	0x4(%rcx), %r9
    000000f8: 	addw	0x6(%rdx,%rdi), %ax
    000000fd: 	cmpq	%r9, %rsi
    00000100: 	jbe	.Ltmp279 # Offset: 256
    00000102: 	leaq	0x5(%rcx), %r9
    00000106: 	addw	0x8(%rdx,%rdi), %ax
    0000010b: 	cmpq	%r9, %rsi
    0000010e: 	jbe	.Ltmp279 # Offset: 270
    00000110: 	addq	$0x6, %rcx
    00000114: 	addw	0xa(%rdx,%rdi), %ax
    00000119: 	cmpq	%rcx, %rsi
    0000011c: 	jbe	.Ltmp279 # Offset: 284
    0000011e: 	addw	0xc(%rdx,%rdi), %ax
.Ltmp279:
    00000123: 	addq	$0x1, %r8
    00000127: 	addq	%rbx, %rdx
    0000012a: 	cmpq	%r8, %r11
    0000012d: 	jne	.Ltmp282 # Offset: 301
.Ltmp278:
    00000133: 	addq	%r15, %rbp
    00000136: 	addq	$0x1, %r14
    0000013a: 	cmpq	%r14, -0x10(%rsp)
    0000013f: 	jne	.Ltmp283 # Offset: 319
.Ltmp277:
    00000145: 	popq	%rbx
    00000146: 	popq	%rbp
    00000147: 	popq	%r12
    00000149: 	popq	%r13
    0000014b: 	popq	%r14
    0000014d: 	popq	%r15
    0000014f: 	retq # Offset: 335
.Ltmp280:
    00000150: 	xorl	%ecx, %ecx
    00000152: 	jmp	.Ltmp284 # Offset: 338
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array3D4ItET_PKS0_mmmS0_"

Binary Function "_Z19accumulate_array3D5ItET_PKS0_mmmS0_" after disassembly {
  Number      : 82
  State       : disassembled
  Address     : 0x4e50
  Size        : 0x155
  MaxSize     : 0x160
  Offset      : 0x4e50
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array3D5ItET_PKS0_mmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB081:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp285 # Offset: 7
    0000000d: 	movq	%rcx, %r10
    00000010: 	pushq	%r15
    00000012: 	movq	%rdx, %r11
    00000015: 	pushq	%r14
    00000017: 	andq	$-0x8, %r10
    0000001b: 	xorl	%r14d, %r14d
    0000001e: 	pushq	%r13
    00000020: 	leaq	(%r10,%r10), %r13
    00000024: 	pushq	%r12
    00000026: 	leaq	-0x1(%rcx), %r12
    0000002a: 	pushq	%rbp
    0000002b: 	movq	%rsi, %rbp
    0000002e: 	movq	%rcx, %rsi
    00000031: 	pushq	%rbx
    00000032: 	shrq	$0x3, %rsi
    00000036: 	leaq	(%rcx,%rcx), %rbx
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp292:
    00000040: 	xorl	%r9d, %r9d
    00000043: 	testq	%r11, %r11
    00000046: 	je	.Ltmp286 # Offset: 70
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp291:
    00000050: 	testq	%rcx, %rcx
    00000053: 	je	.Ltmp287 # Offset: 83
    00000059: 	cmpq	$0x6, %r12
    0000005d: 	jbe	.Ltmp288 # Offset: 93
    00000063: 	xorl	%eax, %eax
    00000065: 	pxor	%xmm0, %xmm0
    00000069: 	nopl	(%rax) # Size: 7
.Ltmp289:
    00000070: 	movq	%rax, %rdx
    00000073: 	addq	$0x1, %rax
    00000077: 	shlq	$0x4, %rdx
    0000007b: 	movdqu	(%rdi,%rdx), %xmm1
    00000080: 	paddw	%xmm1, %xmm0
    00000084: 	cmpq	%rax, %rsi
    00000087: 	jne	.Ltmp289 # Offset: 135
    00000089: 	movdqa	%xmm0, %xmm1
    0000008d: 	leaq	(%rdi,%r13), %rdx
    00000091: 	psrldq	$0x8, %xmm1
    00000096: 	paddw	%xmm1, %xmm0
    0000009a: 	movdqa	%xmm0, %xmm1
    0000009e: 	psrldq	$0x4, %xmm1
    000000a3: 	paddw	%xmm1, %xmm0
    000000a7: 	movdqa	%xmm0, %xmm1
    000000ab: 	psrldq	$0x2, %xmm1
    000000b0: 	paddw	%xmm1, %xmm0
    000000b4: 	pextrw	$0x0, %xmm0, %eax
    000000b9: 	addl	%eax, %r8d
    000000bc: 	cmpq	%r10, %rcx
    000000bf: 	je	.Ltmp290 # Offset: 191
    000000c1: 	movq	%r10, %rax
.Ltmp293:
    000000c4: 	leaq	0x1(%rax), %r15
    000000c8: 	addw	(%rdx), %r8w
    000000cc: 	cmpq	%r15, %rcx
    000000cf: 	jbe	.Ltmp290 # Offset: 207
    000000d1: 	leaq	0x2(%rax), %r15
    000000d5: 	addw	0x2(%rdx), %r8w
    000000da: 	cmpq	%r15, %rcx
    000000dd: 	jbe	.Ltmp290 # Offset: 221
    000000df: 	leaq	0x3(%rax), %r15
    000000e3: 	addw	0x4(%rdx), %r8w
    000000e8: 	cmpq	%r15, %rcx
    000000eb: 	jbe	.Ltmp290 # Offset: 235
    000000ed: 	leaq	0x4(%rax), %r15
    000000f1: 	addw	0x6(%rdx), %r8w
    000000f6: 	cmpq	%r15, %rcx
    000000f9: 	jbe	.Ltmp290 # Offset: 249
    000000fb: 	leaq	0x5(%rax), %r15
    000000ff: 	addw	0x8(%rdx), %r8w
    00000104: 	cmpq	%r15, %rcx
    00000107: 	jbe	.Ltmp290 # Offset: 263
    00000109: 	addq	$0x6, %rax
    0000010d: 	addw	0xa(%rdx), %r8w
    00000112: 	cmpq	%rax, %rcx
    00000115: 	jbe	.Ltmp290 # Offset: 277
    00000117: 	addw	0xc(%rdx), %r8w
.Ltmp290:
    0000011c: 	addq	%rbx, %rdi
.Ltmp287:
    0000011f: 	addq	$0x1, %r9
    00000123: 	cmpq	%r9, %r11
    00000126: 	jne	.Ltmp291 # Offset: 294
.Ltmp286:
    0000012c: 	addq	$0x1, %r14
    00000130: 	cmpq	%r14, %rbp
    00000133: 	jne	.Ltmp292 # Offset: 307
    00000139: 	popq	%rbx
    0000013a: 	movl	%r8d, %eax
    0000013d: 	popq	%rbp
    0000013e: 	popq	%r12
    00000140: 	popq	%r13
    00000142: 	popq	%r14
    00000144: 	popq	%r15
    00000146: 	retq # Offset: 326
.Ltmp288:
    00000147: 	movq	%rdi, %rdx
    0000014a: 	xorl	%eax, %eax
    0000014c: 	jmp	.Ltmp293 # Offset: 332
.Ltmp285:
    00000151: 	movl	%r8d, %eax
    00000154: 	retq # Offset: 340
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array3D5ItET_PKS0_mmmS0_"

Binary Function "_Z19accumulate_array3D6ItET_PKS0_mmmS0_" after disassembly {
  Number      : 83
  State       : disassembled
  Address     : 0x4fb0
  Size        : 0x155
  MaxSize     : 0x160
  Offset      : 0x4fb0
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array3D6ItET_PKS0_mmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB082:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp294 # Offset: 7
    0000000d: 	movq	%rcx, %r10
    00000010: 	pushq	%r15
    00000012: 	movq	%rdx, %r11
    00000015: 	pushq	%r14
    00000017: 	andq	$-0x8, %r10
    0000001b: 	xorl	%r14d, %r14d
    0000001e: 	pushq	%r13
    00000020: 	leaq	(%r10,%r10), %r13
    00000024: 	pushq	%r12
    00000026: 	leaq	-0x1(%rcx), %r12
    0000002a: 	pushq	%rbp
    0000002b: 	movq	%rsi, %rbp
    0000002e: 	movq	%rcx, %rsi
    00000031: 	pushq	%rbx
    00000032: 	shrq	$0x3, %rsi
    00000036: 	leaq	(%rcx,%rcx), %rbx
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp301:
    00000040: 	xorl	%r9d, %r9d
    00000043: 	testq	%r11, %r11
    00000046: 	je	.Ltmp295 # Offset: 70
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp300:
    00000050: 	testq	%rcx, %rcx
    00000053: 	je	.Ltmp296 # Offset: 83
    00000059: 	cmpq	$0x6, %r12
    0000005d: 	jbe	.Ltmp297 # Offset: 93
    00000063: 	xorl	%eax, %eax
    00000065: 	pxor	%xmm0, %xmm0
    00000069: 	nopl	(%rax) # Size: 7
.Ltmp298:
    00000070: 	movq	%rax, %rdx
    00000073: 	addq	$0x1, %rax
    00000077: 	shlq	$0x4, %rdx
    0000007b: 	movdqu	(%rdi,%rdx), %xmm1
    00000080: 	paddw	%xmm1, %xmm0
    00000084: 	cmpq	%rax, %rsi
    00000087: 	jne	.Ltmp298 # Offset: 135
    00000089: 	movdqa	%xmm0, %xmm1
    0000008d: 	leaq	(%rdi,%r13), %rdx
    00000091: 	psrldq	$0x8, %xmm1
    00000096: 	paddw	%xmm1, %xmm0
    0000009a: 	movdqa	%xmm0, %xmm1
    0000009e: 	psrldq	$0x4, %xmm1
    000000a3: 	paddw	%xmm1, %xmm0
    000000a7: 	movdqa	%xmm0, %xmm1
    000000ab: 	psrldq	$0x2, %xmm1
    000000b0: 	paddw	%xmm1, %xmm0
    000000b4: 	pextrw	$0x0, %xmm0, %eax
    000000b9: 	addl	%eax, %r8d
    000000bc: 	cmpq	%r10, %rcx
    000000bf: 	je	.Ltmp299 # Offset: 191
    000000c1: 	movq	%r10, %rax
.Ltmp302:
    000000c4: 	leaq	0x1(%rax), %r15
    000000c8: 	addw	(%rdx), %r8w
    000000cc: 	cmpq	%r15, %rcx
    000000cf: 	jbe	.Ltmp299 # Offset: 207
    000000d1: 	leaq	0x2(%rax), %r15
    000000d5: 	addw	0x2(%rdx), %r8w
    000000da: 	cmpq	%r15, %rcx
    000000dd: 	jbe	.Ltmp299 # Offset: 221
    000000df: 	leaq	0x3(%rax), %r15
    000000e3: 	addw	0x4(%rdx), %r8w
    000000e8: 	cmpq	%r15, %rcx
    000000eb: 	jbe	.Ltmp299 # Offset: 235
    000000ed: 	leaq	0x4(%rax), %r15
    000000f1: 	addw	0x6(%rdx), %r8w
    000000f6: 	cmpq	%r15, %rcx
    000000f9: 	jbe	.Ltmp299 # Offset: 249
    000000fb: 	leaq	0x5(%rax), %r15
    000000ff: 	addw	0x8(%rdx), %r8w
    00000104: 	cmpq	%r15, %rcx
    00000107: 	jbe	.Ltmp299 # Offset: 263
    00000109: 	addq	$0x6, %rax
    0000010d: 	addw	0xa(%rdx), %r8w
    00000112: 	cmpq	%rax, %rcx
    00000115: 	jbe	.Ltmp299 # Offset: 277
    00000117: 	addw	0xc(%rdx), %r8w
.Ltmp299:
    0000011c: 	addq	%rbx, %rdi
.Ltmp296:
    0000011f: 	addq	$0x1, %r9
    00000123: 	cmpq	%r9, %r11
    00000126: 	jne	.Ltmp300 # Offset: 294
.Ltmp295:
    0000012c: 	addq	$0x1, %r14
    00000130: 	cmpq	%r14, %rbp
    00000133: 	jne	.Ltmp301 # Offset: 307
    00000139: 	popq	%rbx
    0000013a: 	movl	%r8d, %eax
    0000013d: 	popq	%rbp
    0000013e: 	popq	%r12
    00000140: 	popq	%r13
    00000142: 	popq	%r14
    00000144: 	popq	%r15
    00000146: 	retq # Offset: 326
.Ltmp297:
    00000147: 	movq	%rdi, %rdx
    0000014a: 	xorl	%eax, %eax
    0000014c: 	jmp	.Ltmp302 # Offset: 332
.Ltmp294:
    00000151: 	movl	%r8d, %eax
    00000154: 	retq # Offset: 340
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array3D6ItET_PKS0_mmmS0_"

Binary Function "_Z19accumulate_array3D7ItET_PKS0_mmmS0_" after disassembly {
  Number      : 84
  State       : disassembled
  Address     : 0x5110
  Size        : 0x15b
  MaxSize     : 0x160
  Offset      : 0x5110
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array3D7ItET_PKS0_mmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB083:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rsi, -0x10(%rsp)
    00000013: 	testq	%rsi, %rsi
    00000016: 	je	.Ltmp303 # Offset: 22
    0000001c: 	leaq	(%rcx,%rcx), %r12
    00000020: 	movq	%rcx, %rsi
    00000023: 	movq	%rcx, %r11
    00000026: 	movq	%rdi, %rbp
    00000029: 	movq	%r12, %r15
    0000002c: 	movq	%rdx, %rbx
    0000002f: 	leaq	-0x1(%rcx), %r13
    00000033: 	shrq	$0x3, %rsi
    00000037: 	imulq	%rdx, %r15
    0000003b: 	andq	$-0x8, %r11
    0000003f: 	xorl	%r14d, %r14d
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp309:
    00000048: 	movq	%rbp, %rax
    0000004b: 	xorl	%r9d, %r9d
    0000004e: 	testq	%rbx, %rbx
    00000051: 	je	.Ltmp304 # Offset: 81
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp308:
    00000060: 	testq	%rcx, %rcx
    00000063: 	je	.Ltmp305 # Offset: 99
    00000069: 	xorl	%edx, %edx
    0000006b: 	cmpq	$0x6, %r13
    0000006f: 	jbe	.Ltmp306 # Offset: 111
    00000071: 	pxor	%xmm0, %xmm0
    00000075: 	nopl	(%rax) # Size: 3
.Ltmp307:
    00000078: 	movq	%rdx, %rdi
    0000007b: 	addq	$0x1, %rdx
    0000007f: 	shlq	$0x4, %rdi
    00000083: 	movdqu	(%rax,%rdi), %xmm1
    00000088: 	paddw	%xmm1, %xmm0
    0000008c: 	cmpq	%rdx, %rsi
    0000008f: 	jne	.Ltmp307 # Offset: 143
    00000091: 	movdqa	%xmm0, %xmm1
    00000095: 	psrldq	$0x8, %xmm1
    0000009a: 	paddw	%xmm1, %xmm0
    0000009e: 	movdqa	%xmm0, %xmm1
    000000a2: 	psrldq	$0x4, %xmm1
    000000a7: 	paddw	%xmm1, %xmm0
    000000ab: 	movdqa	%xmm0, %xmm1
    000000af: 	psrldq	$0x2, %xmm1
    000000b4: 	paddw	%xmm1, %xmm0
    000000b8: 	pextrw	$0x0, %xmm0, %edx
    000000bd: 	addl	%edx, %r8d
    000000c0: 	cmpq	%r11, %rcx
    000000c3: 	je	.Ltmp305 # Offset: 195
    000000c5: 	movq	%r11, %rdx
.Ltmp306:
    000000c8: 	leaq	0x1(%rdx), %r10
    000000cc: 	leaq	(%rdx,%rdx), %rdi
    000000d0: 	addw	(%rax,%rdx,2), %r8w
    000000d5: 	cmpq	%r10, %rcx
    000000d8: 	jbe	.Ltmp305 # Offset: 216
    000000da: 	leaq	0x2(%rdx), %r10
    000000de: 	addw	0x2(%rax,%rdi), %r8w
    000000e4: 	cmpq	%r10, %rcx
    000000e7: 	jbe	.Ltmp305 # Offset: 231
    000000e9: 	leaq	0x3(%rdx), %r10
    000000ed: 	addw	0x4(%rax,%rdi), %r8w
    000000f3: 	cmpq	%r10, %rcx
    000000f6: 	jbe	.Ltmp305 # Offset: 246
    000000f8: 	leaq	0x4(%rdx), %r10
    000000fc: 	addw	0x6(%rax,%rdi), %r8w
    00000102: 	cmpq	%r10, %rcx
    00000105: 	jbe	.Ltmp305 # Offset: 261
    00000107: 	leaq	0x5(%rdx), %r10
    0000010b: 	addw	0x8(%rax,%rdi), %r8w
    00000111: 	cmpq	%r10, %rcx
    00000114: 	jbe	.Ltmp305 # Offset: 276
    00000116: 	addq	$0x6, %rdx
    0000011a: 	addw	0xa(%rax,%rdi), %r8w
    00000120: 	cmpq	%rdx, %rcx
    00000123: 	jbe	.Ltmp305 # Offset: 291
    00000125: 	addw	0xc(%rax,%rdi), %r8w
.Ltmp305:
    0000012b: 	addq	$0x1, %r9
    0000012f: 	addq	%r12, %rax
    00000132: 	cmpq	%r9, %rbx
    00000135: 	jne	.Ltmp308 # Offset: 309
.Ltmp304:
    0000013b: 	addq	%r15, %rbp
    0000013e: 	addq	$0x1, %r14
    00000142: 	cmpq	%r14, -0x10(%rsp)
    00000147: 	jne	.Ltmp309 # Offset: 327
.Ltmp303:
    0000014d: 	popq	%rbx
    0000014e: 	movl	%r8d, %eax
    00000151: 	popq	%rbp
    00000152: 	popq	%r12
    00000154: 	popq	%r13
    00000156: 	popq	%r14
    00000158: 	popq	%r15
    0000015a: 	retq # Offset: 346
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array3D7ItET_PKS0_mmmS0_"

Binary Function "_Z19accumulate_array3D8ItET_PKS0_mmmS0_" after disassembly {
  Number      : 85
  State       : disassembled
  Address     : 0x5270
  Size        : 0x183
  MaxSize     : 0x190
  Offset      : 0x5270
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array3D8ItET_PKS0_mmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB084:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rsi, -0x10(%rsp)
    00000013: 	testq	%rsi, %rsi
    00000016: 	je	.Ltmp310 # Offset: 22
    0000001c: 	movq	%rdx, %r11
    0000001f: 	movq	%rcx, %r12
    00000022: 	movq	%rcx, %r10
    00000025: 	movq	%rcx, %rdx
    00000028: 	movq	%r11, %rax
    0000002b: 	shrq	$0x3, %r12
    0000002f: 	leaq	(%rcx,%rcx), %rbx
    00000033: 	leaq	-0x1(%rcx), %rbp
    00000037: 	imulq	%rcx, %rax
    0000003b: 	shlq	$0x4, %r12
    0000003f: 	andq	$-0x8, %r10
    00000043: 	xorl	%r13d, %r13d
    00000046: 	xorl	%r14d, %r14d
    00000049: 	movq	%rax, -0x18(%rsp)
    0000004e: 	nop # Size: 2
.Ltmp316:
    00000050: 	testq	%r11, %r11
    00000053: 	je	.Ltmp311 # Offset: 83
    00000059: 	leaq	(%rdi,%r13,2), %rsi
    0000005d: 	movq	%r13, %rcx
    00000060: 	xorl	%r9d, %r9d
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp315:
    00000068: 	testq	%rdx, %rdx
    0000006b: 	je	.Ltmp312 # Offset: 107
    00000071: 	cmpq	$0x6, %rbp
    00000075: 	jbe	.Ltmp313 # Offset: 117
    0000007b: 	leaq	(%r12,%rsi), %r15
    0000007f: 	movq	%rsi, %rax
    00000082: 	pxor	%xmm0, %xmm0
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp314:
    00000090: 	movdqu	(%rax), %xmm2
    00000094: 	addq	$0x10, %rax
    00000098: 	paddw	%xmm2, %xmm0
    0000009c: 	cmpq	%r15, %rax
    0000009f: 	jne	.Ltmp314 # Offset: 159
    000000a1: 	movdqa	%xmm0, %xmm1
    000000a5: 	psrldq	$0x8, %xmm1
    000000aa: 	paddw	%xmm1, %xmm0
    000000ae: 	movdqa	%xmm0, %xmm1
    000000b2: 	psrldq	$0x4, %xmm1
    000000b7: 	paddw	%xmm1, %xmm0
    000000bb: 	movdqa	%xmm0, %xmm1
    000000bf: 	psrldq	$0x2, %xmm1
    000000c4: 	paddw	%xmm1, %xmm0
    000000c8: 	pextrw	$0x0, %xmm0, %eax
    000000cd: 	addl	%eax, %r8d
    000000d0: 	cmpq	%rdx, %r10
    000000d3: 	je	.Ltmp312 # Offset: 211
    000000d5: 	movq	%r10, %rax
.Ltmp317:
    000000d8: 	leaq	(%rax,%rcx), %r15
    000000dc: 	addw	(%rdi,%r15,2), %r8w
    000000e1: 	leaq	0x1(%rax), %r15
    000000e5: 	cmpq	%r15, %rdx
    000000e8: 	jbe	.Ltmp312 # Offset: 232
    000000ea: 	addq	%rcx, %r15
    000000ed: 	addw	(%rdi,%r15,2), %r8w
    000000f2: 	leaq	0x2(%rax), %r15
    000000f6: 	cmpq	%r15, %rdx
    000000f9: 	jbe	.Ltmp312 # Offset: 249
    000000fb: 	addq	%rcx, %r15
    000000fe: 	addw	(%rdi,%r15,2), %r8w
    00000103: 	leaq	0x3(%rax), %r15
    00000107: 	cmpq	%r15, %rdx
    0000010a: 	jbe	.Ltmp312 # Offset: 266
    0000010c: 	addq	%rcx, %r15
    0000010f: 	addw	(%rdi,%r15,2), %r8w
    00000114: 	leaq	0x4(%rax), %r15
    00000118: 	cmpq	%r15, %rdx
    0000011b: 	jbe	.Ltmp312 # Offset: 283
    0000011d: 	addq	%rcx, %r15
    00000120: 	addw	(%rdi,%r15,2), %r8w
    00000125: 	leaq	0x5(%rax), %r15
    00000129: 	cmpq	%r15, %rdx
    0000012c: 	jbe	.Ltmp312 # Offset: 300
    0000012e: 	addq	%rcx, %r15
    00000131: 	addq	$0x6, %rax
    00000135: 	addw	(%rdi,%r15,2), %r8w
    0000013a: 	cmpq	%rax, %rdx
    0000013d: 	jbe	.Ltmp312 # Offset: 317
    0000013f: 	addq	%rcx, %rax
    00000142: 	addw	(%rdi,%rax,2), %r8w
.Ltmp312:
    00000147: 	addq	$0x1, %r9
    0000014b: 	addq	%rdx, %rcx
    0000014e: 	addq	%rbx, %rsi
    00000151: 	cmpq	%r9, %r11
    00000154: 	jne	.Ltmp315 # Offset: 340
.Ltmp311:
    0000015a: 	addq	$0x1, %r14
    0000015e: 	addq	-0x18(%rsp), %r13
    00000163: 	cmpq	%r14, -0x10(%rsp)
    00000168: 	jne	.Ltmp316 # Offset: 360
.Ltmp310:
    0000016e: 	popq	%rbx
    0000016f: 	movl	%r8d, %eax
    00000172: 	popq	%rbp
    00000173: 	popq	%r12
    00000175: 	popq	%r13
    00000177: 	popq	%r14
    00000179: 	popq	%r15
    0000017b: 	retq # Offset: 379
.Ltmp313:
    0000017c: 	xorl	%eax, %eax
    0000017e: 	jmp	.Ltmp317 # Offset: 382
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array3D8ItET_PKS0_mmmS0_"

Binary Function "_Z19accumulate_array3D9ItET_PKS0_mmmS0_" after disassembly {
  Number      : 86
  State       : disassembled
  Address     : 0x5400
  Size        : 0x183
  MaxSize     : 0x190
  Offset      : 0x5400
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array3D9ItET_PKS0_mmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB085:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rsi, -0x10(%rsp)
    00000013: 	testq	%rsi, %rsi
    00000016: 	je	.Ltmp318 # Offset: 22
    0000001c: 	movq	%rdx, %r11
    0000001f: 	movq	%rcx, %r12
    00000022: 	movq	%rcx, %r10
    00000025: 	movq	%rcx, %rdx
    00000028: 	movq	%r11, %rax
    0000002b: 	shrq	$0x3, %r12
    0000002f: 	leaq	(%rcx,%rcx), %rbx
    00000033: 	leaq	-0x1(%rcx), %rbp
    00000037: 	imulq	%rcx, %rax
    0000003b: 	shlq	$0x4, %r12
    0000003f: 	andq	$-0x8, %r10
    00000043: 	xorl	%r13d, %r13d
    00000046: 	xorl	%r14d, %r14d
    00000049: 	movq	%rax, -0x18(%rsp)
    0000004e: 	nop # Size: 2
.Ltmp324:
    00000050: 	testq	%r11, %r11
    00000053: 	je	.Ltmp319 # Offset: 83
    00000059: 	leaq	(%rdi,%r13,2), %rsi
    0000005d: 	movq	%r13, %rcx
    00000060: 	xorl	%r9d, %r9d
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp323:
    00000068: 	testq	%rdx, %rdx
    0000006b: 	je	.Ltmp320 # Offset: 107
    00000071: 	cmpq	$0x6, %rbp
    00000075: 	jbe	.Ltmp321 # Offset: 117
    0000007b: 	leaq	(%r12,%rsi), %r15
    0000007f: 	movq	%rsi, %rax
    00000082: 	pxor	%xmm0, %xmm0
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp322:
    00000090: 	movdqu	(%rax), %xmm2
    00000094: 	addq	$0x10, %rax
    00000098: 	paddw	%xmm2, %xmm0
    0000009c: 	cmpq	%r15, %rax
    0000009f: 	jne	.Ltmp322 # Offset: 159
    000000a1: 	movdqa	%xmm0, %xmm1
    000000a5: 	psrldq	$0x8, %xmm1
    000000aa: 	paddw	%xmm1, %xmm0
    000000ae: 	movdqa	%xmm0, %xmm1
    000000b2: 	psrldq	$0x4, %xmm1
    000000b7: 	paddw	%xmm1, %xmm0
    000000bb: 	movdqa	%xmm0, %xmm1
    000000bf: 	psrldq	$0x2, %xmm1
    000000c4: 	paddw	%xmm1, %xmm0
    000000c8: 	pextrw	$0x0, %xmm0, %eax
    000000cd: 	addl	%eax, %r8d
    000000d0: 	cmpq	%rdx, %r10
    000000d3: 	je	.Ltmp320 # Offset: 211
    000000d5: 	movq	%r10, %rax
.Ltmp325:
    000000d8: 	leaq	(%rax,%rcx), %r15
    000000dc: 	addw	(%rdi,%r15,2), %r8w
    000000e1: 	leaq	0x1(%rax), %r15
    000000e5: 	cmpq	%r15, %rdx
    000000e8: 	jbe	.Ltmp320 # Offset: 232
    000000ea: 	addq	%rcx, %r15
    000000ed: 	addw	(%rdi,%r15,2), %r8w
    000000f2: 	leaq	0x2(%rax), %r15
    000000f6: 	cmpq	%r15, %rdx
    000000f9: 	jbe	.Ltmp320 # Offset: 249
    000000fb: 	addq	%rcx, %r15
    000000fe: 	addw	(%rdi,%r15,2), %r8w
    00000103: 	leaq	0x3(%rax), %r15
    00000107: 	cmpq	%r15, %rdx
    0000010a: 	jbe	.Ltmp320 # Offset: 266
    0000010c: 	addq	%rcx, %r15
    0000010f: 	addw	(%rdi,%r15,2), %r8w
    00000114: 	leaq	0x4(%rax), %r15
    00000118: 	cmpq	%r15, %rdx
    0000011b: 	jbe	.Ltmp320 # Offset: 283
    0000011d: 	addq	%rcx, %r15
    00000120: 	addw	(%rdi,%r15,2), %r8w
    00000125: 	leaq	0x5(%rax), %r15
    00000129: 	cmpq	%r15, %rdx
    0000012c: 	jbe	.Ltmp320 # Offset: 300
    0000012e: 	addq	%rcx, %r15
    00000131: 	addq	$0x6, %rax
    00000135: 	addw	(%rdi,%r15,2), %r8w
    0000013a: 	cmpq	%rax, %rdx
    0000013d: 	jbe	.Ltmp320 # Offset: 317
    0000013f: 	addq	%rcx, %rax
    00000142: 	addw	(%rdi,%rax,2), %r8w
.Ltmp320:
    00000147: 	addq	$0x1, %r9
    0000014b: 	addq	%rdx, %rcx
    0000014e: 	addq	%rbx, %rsi
    00000151: 	cmpq	%r9, %r11
    00000154: 	jne	.Ltmp323 # Offset: 340
.Ltmp319:
    0000015a: 	addq	$0x1, %r14
    0000015e: 	addq	-0x18(%rsp), %r13
    00000163: 	cmpq	%r14, -0x10(%rsp)
    00000168: 	jne	.Ltmp324 # Offset: 360
.Ltmp318:
    0000016e: 	popq	%rbx
    0000016f: 	movl	%r8d, %eax
    00000172: 	popq	%rbp
    00000173: 	popq	%r12
    00000175: 	popq	%r13
    00000177: 	popq	%r14
    00000179: 	popq	%r15
    0000017b: 	retq # Offset: 379
.Ltmp321:
    0000017c: 	xorl	%eax, %eax
    0000017e: 	jmp	.Ltmp325 # Offset: 382
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array3D9ItET_PKS0_mmmS0_"

Binary Function "_Z19accumulate_array4D1ItET_PKS0_mmmmS0_" after disassembly {
  Number      : 87
  State       : disassembled
  Address     : 0x5590
  Size        : 0x100
  MaxSize     : 0x100
  Offset      : 0x5590
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array4D1ItET_PKS0_mmmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB086:
    00000000: 	endbr64
    00000004: 	imulq	%r8, %rcx
    00000008: 	imulq	%rdx, %rcx
    0000000c: 	imulq	%rsi, %rcx
    00000010: 	movq	%rcx, %r8
    00000013: 	testq	%rcx, %rcx
    00000016: 	je	.Ltmp326 # Offset: 22
    0000001c: 	leaq	-0x1(%rcx), %rax
    00000020: 	cmpq	$0x6, %rax
    00000024: 	jbe	.Ltmp327 # Offset: 36
    0000002a: 	movq	%rcx, %rax
    0000002d: 	movq	%rdi, %rdx
    00000030: 	pxor	%xmm0, %xmm0
    00000034: 	shrq	$0x3, %rax
    00000038: 	shlq	$0x4, %rax
    0000003c: 	addq	%rdi, %rax
    0000003f: 	nop # Size: 1
.Ltmp328:
    00000040: 	movdqu	(%rdx), %xmm2
    00000044: 	addq	$0x10, %rdx
    00000048: 	paddw	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rdx
    0000004f: 	jne	.Ltmp328 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movq	%r8, %rdx
    00000058: 	psrldq	$0x8, %xmm1
    0000005d: 	andq	$-0x8, %rdx
    00000061: 	paddw	%xmm1, %xmm0
    00000065: 	movdqa	%xmm0, %xmm1
    00000069: 	psrldq	$0x4, %xmm1
    0000006e: 	paddw	%xmm1, %xmm0
    00000072: 	movdqa	%xmm0, %xmm1
    00000076: 	psrldq	$0x2, %xmm1
    0000007b: 	paddw	%xmm1, %xmm0
    0000007f: 	pextrw	$0x0, %xmm0, %eax
    00000084: 	addl	%r9d, %eax
    00000087: 	testb	$0x7, %r8b
    0000008b: 	je	.Ltmp329 # Offset: 139
.Ltmp331:
    0000008d: 	leaq	0x1(%rdx), %rsi
    00000091: 	leaq	(%rdx,%rdx), %rcx
    00000095: 	addw	(%rdi,%rdx,2), %ax
    00000099: 	cmpq	%rsi, %r8
    0000009c: 	jbe	.Ltmp330 # Offset: 156
    0000009e: 	leaq	0x2(%rdx), %rsi
    000000a2: 	addw	0x2(%rdi,%rcx), %ax
    000000a7: 	cmpq	%rsi, %r8
    000000aa: 	jbe	.Ltmp330 # Offset: 170
    000000ac: 	leaq	0x3(%rdx), %rsi
    000000b0: 	addw	0x4(%rdi,%rcx), %ax
    000000b5: 	cmpq	%rsi, %r8
    000000b8: 	jbe	.Ltmp330 # Offset: 184
    000000ba: 	leaq	0x4(%rdx), %rsi
    000000be: 	addw	0x6(%rdi,%rcx), %ax
    000000c3: 	cmpq	%rsi, %r8
    000000c6: 	jbe	.Ltmp330 # Offset: 198
    000000c8: 	leaq	0x5(%rdx), %rsi
    000000cc: 	addw	0x8(%rdi,%rcx), %ax
    000000d1: 	cmpq	%rsi, %r8
    000000d4: 	jbe	.Ltmp330 # Offset: 212
    000000d6: 	addq	$0x6, %rdx
    000000da: 	addw	0xa(%rdi,%rcx), %ax
    000000df: 	cmpq	%rdx, %r8
    000000e2: 	jbe	.Ltmp330 # Offset: 226
    000000e4: 	addw	0xc(%rdi,%rcx), %ax
    000000e9: 	retq # Offset: 233
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp326:
    000000f0: 	movl	%r9d, %eax
.Ltmp330:
    000000f3: 	retq # Offset: 243
    000000f4: 	nopl	(%rax) # Size: 4
.Ltmp329:
    000000f8: 	retq # Offset: 248
.Ltmp327:
    000000f9: 	movl	%r9d, %eax
    000000fc: 	xorl	%edx, %edx
    000000fe: 	jmp	.Ltmp331 # Offset: 254
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array4D1ItET_PKS0_mmmmS0_"

Binary Function "_Z19accumulate_array4D2ItET_PKS0_mmmmS0_" after disassembly {
  Number      : 88
  State       : disassembled
  Address     : 0x5690
  Size        : 0x1d3
  MaxSize     : 0x1e0
  Offset      : 0x5690
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array4D2ItET_PKS0_mmmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB087:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rdx, %rbx
    00000011: 	movq	%rdx, -0x38(%rsp)
    00000016: 	movq	%r8, %rdx
    00000019: 	movl	%r9d, %r8d
    0000001c: 	movq	%rsi, -0x10(%rsp)
    00000021: 	testq	%rsi, %rsi
    00000024: 	je	.Ltmp332 # Offset: 36
    0000002a: 	movq	%rcx, %rax
    0000002d: 	movq	%rdx, %r12
    00000030: 	movq	%rdx, %r10
    00000033: 	movq	%rcx, %r11
    00000036: 	imulq	%rdx, %rax
    0000003a: 	shrq	$0x3, %r12
    0000003e: 	leaq	-0x1(%rdx), %rbp
    00000042: 	andq	$-0x8, %r10
    00000046: 	movq	$0x0, -0x20(%rsp)
    0000004f: 	shlq	$0x4, %r12
    00000053: 	movq	$0x0, -0x28(%rsp)
    0000005c: 	imulq	%rax, %rbx
    00000060: 	movq	%rax, -0x30(%rsp)
    00000065: 	movq	%rbx, -0x18(%rsp)
    0000006a: 	leaq	(%rdx,%rdx), %rbx
.Ltmp340:
    0000006e: 	xorl	%r14d, %r14d
    00000071: 	cmpq	$0x0, -0x38(%rsp)
    00000077: 	movq	-0x20(%rsp), %r13
    0000007c: 	je	.Ltmp333 # Offset: 124
    00000082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp339:
    00000088: 	testq	%r11, %r11
    0000008b: 	je	.Ltmp334 # Offset: 139
    00000091: 	leaq	(%rdi,%r13,2), %rsi
    00000095: 	movq	%r13, %rcx
    00000098: 	xorl	%r9d, %r9d
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp338:
    000000a0: 	testq	%rdx, %rdx
    000000a3: 	je	.Ltmp335 # Offset: 163
    000000a9: 	cmpq	$0x6, %rbp
    000000ad: 	jbe	.Ltmp336 # Offset: 173
    000000b3: 	leaq	(%r12,%rsi), %r15
    000000b7: 	movq	%rsi, %rax
    000000ba: 	pxor	%xmm0, %xmm0
    000000be: 	nop # Size: 2
.Ltmp337:
    000000c0: 	movdqu	(%rax), %xmm2
    000000c4: 	addq	$0x10, %rax
    000000c8: 	paddw	%xmm2, %xmm0
    000000cc: 	cmpq	%r15, %rax
    000000cf: 	jne	.Ltmp337 # Offset: 207
    000000d1: 	movdqa	%xmm0, %xmm1
    000000d5: 	psrldq	$0x8, %xmm1
    000000da: 	paddw	%xmm1, %xmm0
    000000de: 	movdqa	%xmm0, %xmm1
    000000e2: 	psrldq	$0x4, %xmm1
    000000e7: 	paddw	%xmm1, %xmm0
    000000eb: 	movdqa	%xmm0, %xmm1
    000000ef: 	psrldq	$0x2, %xmm1
    000000f4: 	paddw	%xmm1, %xmm0
    000000f8: 	pextrw	$0x0, %xmm0, %eax
    000000fd: 	addl	%eax, %r8d
    00000100: 	cmpq	%rdx, %r10
    00000103: 	je	.Ltmp335 # Offset: 259
    00000105: 	movq	%r10, %rax
.Ltmp341:
    00000108: 	leaq	(%rax,%rcx), %r15
    0000010c: 	addw	(%rdi,%r15,2), %r8w
    00000111: 	leaq	0x1(%rax), %r15
    00000115: 	cmpq	%r15, %rdx
    00000118: 	jbe	.Ltmp335 # Offset: 280
    0000011a: 	addq	%rcx, %r15
    0000011d: 	addw	(%rdi,%r15,2), %r8w
    00000122: 	leaq	0x2(%rax), %r15
    00000126: 	cmpq	%r15, %rdx
    00000129: 	jbe	.Ltmp335 # Offset: 297
    0000012b: 	addq	%rcx, %r15
    0000012e: 	addw	(%rdi,%r15,2), %r8w
    00000133: 	leaq	0x3(%rax), %r15
    00000137: 	cmpq	%r15, %rdx
    0000013a: 	jbe	.Ltmp335 # Offset: 314
    0000013c: 	addq	%rcx, %r15
    0000013f: 	addw	(%rdi,%r15,2), %r8w
    00000144: 	leaq	0x4(%rax), %r15
    00000148: 	cmpq	%r15, %rdx
    0000014b: 	jbe	.Ltmp335 # Offset: 331
    0000014d: 	addq	%rcx, %r15
    00000150: 	addw	(%rdi,%r15,2), %r8w
    00000155: 	leaq	0x5(%rax), %r15
    00000159: 	cmpq	%r15, %rdx
    0000015c: 	jbe	.Ltmp335 # Offset: 348
    0000015e: 	addq	%rcx, %r15
    00000161: 	addq	$0x6, %rax
    00000165: 	addw	(%rdi,%r15,2), %r8w
    0000016a: 	cmpq	%rax, %rdx
    0000016d: 	jbe	.Ltmp335 # Offset: 365
    0000016f: 	addq	%rcx, %rax
    00000172: 	addw	(%rdi,%rax,2), %r8w
.Ltmp335:
    00000177: 	addq	$0x1, %r9
    0000017b: 	addq	%rdx, %rcx
    0000017e: 	addq	%rbx, %rsi
    00000181: 	cmpq	%r9, %r11
    00000184: 	jne	.Ltmp338 # Offset: 388
.Ltmp334:
    0000018a: 	addq	$0x1, %r14
    0000018e: 	addq	-0x30(%rsp), %r13
    00000193: 	cmpq	%r14, -0x38(%rsp)
    00000198: 	jne	.Ltmp339 # Offset: 408
.Ltmp333:
    0000019e: 	addq	$0x1, -0x28(%rsp)
    000001a4: 	movq	-0x18(%rsp), %rcx
    000001a9: 	movq	-0x28(%rsp), %rax
    000001ae: 	addq	%rcx, -0x20(%rsp)
    000001b3: 	cmpq	%rax, -0x10(%rsp)
    000001b8: 	jne	.Ltmp340 # Offset: 440
.Ltmp332:
    000001be: 	popq	%rbx
    000001bf: 	movl	%r8d, %eax
    000001c2: 	popq	%rbp
    000001c3: 	popq	%r12
    000001c5: 	popq	%r13
    000001c7: 	popq	%r14
    000001c9: 	popq	%r15
    000001cb: 	retq # Offset: 459
.Ltmp336:
    000001cc: 	xorl	%eax, %eax
    000001ce: 	jmp	.Ltmp341 # Offset: 462
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array4D2ItET_PKS0_mmmmS0_"

Binary Function "_Z19accumulate_array4D3ItET_PKS0_mmmmS0_" after disassembly {
  Number      : 89
  State       : disassembled
  Address     : 0x5870
  Size        : 0x1d3
  MaxSize     : 0x1e0
  Offset      : 0x5870
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array4D3ItET_PKS0_mmmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB088:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rdx, %rbx
    00000011: 	movq	%rdx, -0x38(%rsp)
    00000016: 	movq	%r8, %rdx
    00000019: 	movl	%r9d, %r8d
    0000001c: 	movq	%rsi, -0x10(%rsp)
    00000021: 	testq	%rsi, %rsi
    00000024: 	je	.Ltmp342 # Offset: 36
    0000002a: 	movq	%rcx, %rax
    0000002d: 	movq	%rdx, %r12
    00000030: 	movq	%rdx, %r10
    00000033: 	movq	%rcx, %r11
    00000036: 	imulq	%rdx, %rax
    0000003a: 	shrq	$0x3, %r12
    0000003e: 	leaq	-0x1(%rdx), %rbp
    00000042: 	andq	$-0x8, %r10
    00000046: 	movq	$0x0, -0x20(%rsp)
    0000004f: 	shlq	$0x4, %r12
    00000053: 	movq	$0x0, -0x28(%rsp)
    0000005c: 	movq	%rax, -0x30(%rsp)
    00000061: 	imulq	%rbx, %rax
    00000065: 	leaq	(%rdx,%rdx), %rbx
    00000069: 	movq	%rax, -0x18(%rsp)
.Ltmp350:
    0000006e: 	cmpq	$0x0, -0x38(%rsp)
    00000074: 	je	.Ltmp343 # Offset: 116
    0000007a: 	movq	-0x20(%rsp), %r13
    0000007f: 	xorl	%r14d, %r14d
    00000082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp349:
    00000088: 	testq	%r11, %r11
    0000008b: 	je	.Ltmp344 # Offset: 139
    00000091: 	leaq	(%rdi,%r13,2), %rsi
    00000095: 	movq	%r13, %rcx
    00000098: 	xorl	%r9d, %r9d
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp348:
    000000a0: 	testq	%rdx, %rdx
    000000a3: 	je	.Ltmp345 # Offset: 163
    000000a9: 	cmpq	$0x6, %rbp
    000000ad: 	jbe	.Ltmp346 # Offset: 173
    000000b3: 	leaq	(%r12,%rsi), %r15
    000000b7: 	movq	%rsi, %rax
    000000ba: 	pxor	%xmm0, %xmm0
    000000be: 	nop # Size: 2
.Ltmp347:
    000000c0: 	movdqu	(%rax), %xmm2
    000000c4: 	addq	$0x10, %rax
    000000c8: 	paddw	%xmm2, %xmm0
    000000cc: 	cmpq	%r15, %rax
    000000cf: 	jne	.Ltmp347 # Offset: 207
    000000d1: 	movdqa	%xmm0, %xmm1
    000000d5: 	psrldq	$0x8, %xmm1
    000000da: 	paddw	%xmm1, %xmm0
    000000de: 	movdqa	%xmm0, %xmm1
    000000e2: 	psrldq	$0x4, %xmm1
    000000e7: 	paddw	%xmm1, %xmm0
    000000eb: 	movdqa	%xmm0, %xmm1
    000000ef: 	psrldq	$0x2, %xmm1
    000000f4: 	paddw	%xmm1, %xmm0
    000000f8: 	pextrw	$0x0, %xmm0, %eax
    000000fd: 	addl	%eax, %r8d
    00000100: 	cmpq	%rdx, %r10
    00000103: 	je	.Ltmp345 # Offset: 259
    00000105: 	movq	%r10, %rax
.Ltmp351:
    00000108: 	leaq	(%rax,%rcx), %r15
    0000010c: 	addw	(%rdi,%r15,2), %r8w
    00000111: 	leaq	0x1(%rax), %r15
    00000115: 	cmpq	%r15, %rdx
    00000118: 	jbe	.Ltmp345 # Offset: 280
    0000011a: 	addq	%rcx, %r15
    0000011d: 	addw	(%rdi,%r15,2), %r8w
    00000122: 	leaq	0x2(%rax), %r15
    00000126: 	cmpq	%r15, %rdx
    00000129: 	jbe	.Ltmp345 # Offset: 297
    0000012b: 	addq	%rcx, %r15
    0000012e: 	addw	(%rdi,%r15,2), %r8w
    00000133: 	leaq	0x3(%rax), %r15
    00000137: 	cmpq	%r15, %rdx
    0000013a: 	jbe	.Ltmp345 # Offset: 314
    0000013c: 	addq	%rcx, %r15
    0000013f: 	addw	(%rdi,%r15,2), %r8w
    00000144: 	leaq	0x4(%rax), %r15
    00000148: 	cmpq	%r15, %rdx
    0000014b: 	jbe	.Ltmp345 # Offset: 331
    0000014d: 	addq	%rcx, %r15
    00000150: 	addw	(%rdi,%r15,2), %r8w
    00000155: 	leaq	0x5(%rax), %r15
    00000159: 	cmpq	%r15, %rdx
    0000015c: 	jbe	.Ltmp345 # Offset: 348
    0000015e: 	addq	%rcx, %r15
    00000161: 	addq	$0x6, %rax
    00000165: 	addw	(%rdi,%r15,2), %r8w
    0000016a: 	cmpq	%rax, %rdx
    0000016d: 	jbe	.Ltmp345 # Offset: 365
    0000016f: 	addq	%rcx, %rax
    00000172: 	addw	(%rdi,%rax,2), %r8w
.Ltmp345:
    00000177: 	addq	$0x1, %r9
    0000017b: 	addq	%rdx, %rcx
    0000017e: 	addq	%rbx, %rsi
    00000181: 	cmpq	%r9, %r11
    00000184: 	jne	.Ltmp348 # Offset: 388
.Ltmp344:
    0000018a: 	addq	$0x1, %r14
    0000018e: 	addq	-0x30(%rsp), %r13
    00000193: 	cmpq	%r14, -0x38(%rsp)
    00000198: 	jne	.Ltmp349 # Offset: 408
.Ltmp343:
    0000019e: 	addq	$0x1, -0x28(%rsp)
    000001a4: 	movq	-0x18(%rsp), %rcx
    000001a9: 	movq	-0x28(%rsp), %rax
    000001ae: 	addq	%rcx, -0x20(%rsp)
    000001b3: 	cmpq	%rax, -0x10(%rsp)
    000001b8: 	jne	.Ltmp350 # Offset: 440
.Ltmp342:
    000001be: 	popq	%rbx
    000001bf: 	movl	%r8d, %eax
    000001c2: 	popq	%rbp
    000001c3: 	popq	%r12
    000001c5: 	popq	%r13
    000001c7: 	popq	%r14
    000001c9: 	popq	%r15
    000001cb: 	retq # Offset: 459
.Ltmp346:
    000001cc: 	xorl	%eax, %eax
    000001ce: 	jmp	.Ltmp351 # Offset: 462
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array4D3ItET_PKS0_mmmmS0_"

Binary Function "_Z19accumulate_array4D4ItET_PKS0_mmmmS0_" after disassembly {
  Number      : 90
  State       : disassembled
  Address     : 0x5a50
  Size        : 0x1a7
  MaxSize     : 0x1b0
  Offset      : 0x5a50
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array4D4ItET_PKS0_mmmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB089:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%r9d, %eax
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, -0x20(%rsp)
    00000016: 	movq	%rsi, -0x10(%rsp)
    0000001b: 	movq	%rdx, -0x30(%rsp)
    00000020: 	testq	%rsi, %rsi
    00000023: 	je	.Ltmp352 # Offset: 35
    00000029: 	movq	%rdx, %rdi
    0000002c: 	movq	%rcx, %rdx
    0000002f: 	movq	%r8, %r12
    00000032: 	movq	%r8, %r10
    00000035: 	imulq	%r8, %rdx
    00000039: 	shrq	$0x3, %r12
    0000003d: 	movq	%rcx, %r11
    00000040: 	movq	%r8, %rsi
    00000043: 	leaq	(%r8,%r8), %rbx
    00000047: 	leaq	-0x1(%r8), %rbp
    0000004b: 	shlq	$0x4, %r12
    0000004f: 	andq	$-0x8, %r10
    00000053: 	movq	$0x0, -0x28(%rsp)
    0000005c: 	leaq	(%rdx,%rdx), %r15
    00000060: 	imulq	%rdi, %rdx
    00000064: 	addq	%rdx, %rdx
    00000067: 	movq	%rdx, -0x18(%rsp)
.Ltmp360:
    0000006c: 	xorl	%r13d, %r13d
    0000006f: 	cmpq	$0x0, -0x30(%rsp)
    00000075: 	movq	-0x20(%rsp), %r14
    0000007a: 	je	.Ltmp353 # Offset: 122
.Ltmp359:
    00000080: 	movq	%r14, %rdx
    00000083: 	xorl	%r8d, %r8d
    00000086: 	testq	%r11, %r11
    00000089: 	je	.Ltmp354 # Offset: 137
    0000008f: 	nop # Size: 1
.Ltmp358:
    00000090: 	testq	%rsi, %rsi
    00000093: 	je	.Ltmp355 # Offset: 147
    00000099: 	cmpq	$0x6, %rbp
    0000009d: 	jbe	.Ltmp356 # Offset: 157
    000000a3: 	movq	%rdx, %rcx
    000000a6: 	leaq	(%r12,%rdx), %rdi
    000000aa: 	pxor	%xmm0, %xmm0
    000000ae: 	nop # Size: 2
.Ltmp357:
    000000b0: 	movdqu	(%rcx), %xmm2
    000000b4: 	addq	$0x10, %rcx
    000000b8: 	paddw	%xmm2, %xmm0
    000000bc: 	cmpq	%rdi, %rcx
    000000bf: 	jne	.Ltmp357 # Offset: 191
    000000c1: 	movdqa	%xmm0, %xmm1
    000000c5: 	psrldq	$0x8, %xmm1
    000000ca: 	paddw	%xmm1, %xmm0
    000000ce: 	movdqa	%xmm0, %xmm1
    000000d2: 	psrldq	$0x4, %xmm1
    000000d7: 	paddw	%xmm1, %xmm0
    000000db: 	movdqa	%xmm0, %xmm1
    000000df: 	psrldq	$0x2, %xmm1
    000000e4: 	paddw	%xmm1, %xmm0
    000000e8: 	pextrw	$0x0, %xmm0, %ecx
    000000ed: 	addl	%ecx, %eax
    000000ef: 	cmpq	%rsi, %r10
    000000f2: 	je	.Ltmp355 # Offset: 242
    000000f4: 	movq	%r10, %rcx
.Ltmp361:
    000000f7: 	leaq	0x1(%rcx), %r9
    000000fb: 	leaq	(%rcx,%rcx), %rdi
    000000ff: 	addw	(%rdx,%rcx,2), %ax
    00000103: 	cmpq	%r9, %rsi
    00000106: 	jbe	.Ltmp355 # Offset: 262
    00000108: 	leaq	0x2(%rcx), %r9
    0000010c: 	addw	0x2(%rdx,%rdi), %ax
    00000111: 	cmpq	%r9, %rsi
    00000114: 	jbe	.Ltmp355 # Offset: 276
    00000116: 	leaq	0x3(%rcx), %r9
    0000011a: 	addw	0x4(%rdx,%rdi), %ax
    0000011f: 	cmpq	%r9, %rsi
    00000122: 	jbe	.Ltmp355 # Offset: 290
    00000124: 	leaq	0x4(%rcx), %r9
    00000128: 	addw	0x6(%rdx,%rdi), %ax
    0000012d: 	cmpq	%r9, %rsi
    00000130: 	jbe	.Ltmp355 # Offset: 304
    00000132: 	leaq	0x5(%rcx), %r9
    00000136: 	addw	0x8(%rdx,%rdi), %ax
    0000013b: 	cmpq	%r9, %rsi
    0000013e: 	jbe	.Ltmp355 # Offset: 318
    00000140: 	addq	$0x6, %rcx
    00000144: 	addw	0xa(%rdx,%rdi), %ax
    00000149: 	cmpq	%rcx, %rsi
    0000014c: 	jbe	.Ltmp355 # Offset: 332
    0000014e: 	addw	0xc(%rdx,%rdi), %ax
.Ltmp355:
    00000153: 	addq	$0x1, %r8
    00000157: 	addq	%rbx, %rdx
    0000015a: 	cmpq	%r8, %r11
    0000015d: 	jne	.Ltmp358 # Offset: 349
.Ltmp354:
    00000163: 	addq	%r15, %r14
    00000166: 	addq	$0x1, %r13
    0000016a: 	cmpq	%r13, -0x30(%rsp)
    0000016f: 	jne	.Ltmp359 # Offset: 367
.Ltmp353:
    00000175: 	addq	$0x1, -0x28(%rsp)
    0000017b: 	movq	-0x18(%rsp), %rdi
    00000180: 	movq	-0x28(%rsp), %rdx
    00000185: 	addq	%rdi, -0x20(%rsp)
    0000018a: 	cmpq	%rdx, -0x10(%rsp)
    0000018f: 	jne	.Ltmp360 # Offset: 399
.Ltmp352:
    00000195: 	popq	%rbx
    00000196: 	popq	%rbp
    00000197: 	popq	%r12
    00000199: 	popq	%r13
    0000019b: 	popq	%r14
    0000019d: 	popq	%r15
    0000019f: 	retq # Offset: 415
.Ltmp356:
    000001a0: 	xorl	%ecx, %ecx
    000001a2: 	jmp	.Ltmp361 # Offset: 418
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array4D4ItET_PKS0_mmmmS0_"

Binary Function "_Z19accumulate_array4D5ItET_PKS0_mmmmS0_" after disassembly {
  Number      : 91
  State       : disassembled
  Address     : 0x5c00
  Size        : 0x174
  MaxSize     : 0x180
  Offset      : 0x5c00
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array4D5ItET_PKS0_mmmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB090:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%r9d, %eax
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rsi, -0x10(%rsp)
    00000016: 	testq	%rsi, %rsi
    00000019: 	je	.Ltmp362 # Offset: 25
    0000001f: 	movq	%rdx, %r12
    00000022: 	movq	%r8, %rdx
    00000025: 	leaq	-0x1(%r8), %r13
    00000029: 	movq	%rcx, %rbx
    0000002c: 	movq	%rdx, %r11
    0000002f: 	shrq	$0x3, %r8
    00000033: 	leaq	(%rdx,%rdx), %rbp
    00000037: 	movq	$0x0, -0x18(%rsp)
    00000040: 	andq	$-0x8, %r11
    00000044: 	leaq	(%r11,%r11), %r14
.Ltmp371:
    00000048: 	xorl	%r15d, %r15d
    0000004b: 	testq	%r12, %r12
    0000004e: 	je	.Ltmp363 # Offset: 78
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp370:
    00000058: 	xorl	%r9d, %r9d
    0000005b: 	testq	%rbx, %rbx
    0000005e: 	je	.Ltmp364 # Offset: 94
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp369:
    00000068: 	testq	%rdx, %rdx
    0000006b: 	je	.Ltmp365 # Offset: 107
    00000071: 	cmpq	$0x6, %r13
    00000075: 	jbe	.Ltmp366 # Offset: 117
    0000007b: 	xorl	%ecx, %ecx
    0000007d: 	pxor	%xmm0, %xmm0
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp367:
    00000088: 	movq	%rcx, %rsi
    0000008b: 	addq	$0x1, %rcx
    0000008f: 	shlq	$0x4, %rsi
    00000093: 	movdqu	(%rdi,%rsi), %xmm1
    00000098: 	paddw	%xmm1, %xmm0
    0000009c: 	cmpq	%rcx, %r8
    0000009f: 	jne	.Ltmp367 # Offset: 159
    000000a1: 	movdqa	%xmm0, %xmm1
    000000a5: 	leaq	(%rdi,%r14), %rsi
    000000a9: 	psrldq	$0x8, %xmm1
    000000ae: 	paddw	%xmm1, %xmm0
    000000b2: 	movdqa	%xmm0, %xmm1
    000000b6: 	psrldq	$0x4, %xmm1
    000000bb: 	paddw	%xmm1, %xmm0
    000000bf: 	movdqa	%xmm0, %xmm1
    000000c3: 	psrldq	$0x2, %xmm1
    000000c8: 	paddw	%xmm1, %xmm0
    000000cc: 	pextrw	$0x0, %xmm0, %ecx
    000000d1: 	addl	%ecx, %eax
    000000d3: 	cmpq	%rdx, %r11
    000000d6: 	je	.Ltmp368 # Offset: 214
    000000d8: 	movq	%r11, %rcx
.Ltmp372:
    000000db: 	leaq	0x1(%rcx), %r10
    000000df: 	addw	(%rsi), %ax
    000000e2: 	cmpq	%r10, %rdx
    000000e5: 	jbe	.Ltmp368 # Offset: 229
    000000e7: 	leaq	0x2(%rcx), %r10
    000000eb: 	addw	0x2(%rsi), %ax
    000000ef: 	cmpq	%r10, %rdx
    000000f2: 	jbe	.Ltmp368 # Offset: 242
    000000f4: 	leaq	0x3(%rcx), %r10
    000000f8: 	addw	0x4(%rsi), %ax
    000000fc: 	cmpq	%r10, %rdx
    000000ff: 	jbe	.Ltmp368 # Offset: 255
    00000101: 	leaq	0x4(%rcx), %r10
    00000105: 	addw	0x6(%rsi), %ax
    00000109: 	cmpq	%r10, %rdx
    0000010c: 	jbe	.Ltmp368 # Offset: 268
    0000010e: 	leaq	0x5(%rcx), %r10
    00000112: 	addw	0x8(%rsi), %ax
    00000116: 	cmpq	%r10, %rdx
    00000119: 	jbe	.Ltmp368 # Offset: 281
    0000011b: 	addq	$0x6, %rcx
    0000011f: 	addw	0xa(%rsi), %ax
    00000123: 	cmpq	%rcx, %rdx
    00000126: 	jbe	.Ltmp368 # Offset: 294
    00000128: 	addw	0xc(%rsi), %ax
.Ltmp368:
    0000012c: 	addq	%rbp, %rdi
.Ltmp365:
    0000012f: 	addq	$0x1, %r9
    00000133: 	cmpq	%r9, %rbx
    00000136: 	jne	.Ltmp369 # Offset: 310
.Ltmp364:
    0000013c: 	addq	$0x1, %r15
    00000140: 	cmpq	%r15, %r12
    00000143: 	jne	.Ltmp370 # Offset: 323
.Ltmp363:
    00000149: 	addq	$0x1, -0x18(%rsp)
    0000014f: 	movq	-0x18(%rsp), %rcx
    00000154: 	cmpq	%rcx, -0x10(%rsp)
    00000159: 	jne	.Ltmp371 # Offset: 345
.Ltmp362:
    0000015f: 	popq	%rbx
    00000160: 	popq	%rbp
    00000161: 	popq	%r12
    00000163: 	popq	%r13
    00000165: 	popq	%r14
    00000167: 	popq	%r15
    00000169: 	retq # Offset: 361
.Ltmp366:
    0000016a: 	movq	%rdi, %rsi
    0000016d: 	xorl	%ecx, %ecx
    0000016f: 	jmp	.Ltmp372 # Offset: 367
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array4D5ItET_PKS0_mmmmS0_"

Binary Function "_Z19accumulate_array4D6ItET_PKS0_mmmmS0_" after disassembly {
  Number      : 92
  State       : disassembled
  Address     : 0x5d80
  Size        : 0x174
  MaxSize     : 0x180
  Offset      : 0x5d80
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array4D6ItET_PKS0_mmmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB091:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%r9d, %eax
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rsi, -0x10(%rsp)
    00000016: 	testq	%rsi, %rsi
    00000019: 	je	.Ltmp373 # Offset: 25
    0000001f: 	movq	%rdx, %r12
    00000022: 	movq	%r8, %rdx
    00000025: 	leaq	-0x1(%r8), %r13
    00000029: 	movq	%rcx, %rbx
    0000002c: 	movq	%rdx, %r11
    0000002f: 	shrq	$0x3, %r8
    00000033: 	leaq	(%rdx,%rdx), %rbp
    00000037: 	movq	$0x0, -0x18(%rsp)
    00000040: 	andq	$-0x8, %r11
    00000044: 	leaq	(%r11,%r11), %r14
.Ltmp382:
    00000048: 	xorl	%r15d, %r15d
    0000004b: 	testq	%r12, %r12
    0000004e: 	je	.Ltmp374 # Offset: 78
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp381:
    00000058: 	xorl	%r9d, %r9d
    0000005b: 	testq	%rbx, %rbx
    0000005e: 	je	.Ltmp375 # Offset: 94
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp380:
    00000068: 	testq	%rdx, %rdx
    0000006b: 	je	.Ltmp376 # Offset: 107
    00000071: 	cmpq	$0x6, %r13
    00000075: 	jbe	.Ltmp377 # Offset: 117
    0000007b: 	xorl	%ecx, %ecx
    0000007d: 	pxor	%xmm0, %xmm0
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp378:
    00000088: 	movq	%rcx, %rsi
    0000008b: 	addq	$0x1, %rcx
    0000008f: 	shlq	$0x4, %rsi
    00000093: 	movdqu	(%rdi,%rsi), %xmm1
    00000098: 	paddw	%xmm1, %xmm0
    0000009c: 	cmpq	%rcx, %r8
    0000009f: 	jne	.Ltmp378 # Offset: 159
    000000a1: 	movdqa	%xmm0, %xmm1
    000000a5: 	leaq	(%rdi,%r14), %rsi
    000000a9: 	psrldq	$0x8, %xmm1
    000000ae: 	paddw	%xmm1, %xmm0
    000000b2: 	movdqa	%xmm0, %xmm1
    000000b6: 	psrldq	$0x4, %xmm1
    000000bb: 	paddw	%xmm1, %xmm0
    000000bf: 	movdqa	%xmm0, %xmm1
    000000c3: 	psrldq	$0x2, %xmm1
    000000c8: 	paddw	%xmm1, %xmm0
    000000cc: 	pextrw	$0x0, %xmm0, %ecx
    000000d1: 	addl	%ecx, %eax
    000000d3: 	cmpq	%r11, %rdx
    000000d6: 	je	.Ltmp379 # Offset: 214
    000000d8: 	movq	%r11, %rcx
.Ltmp383:
    000000db: 	leaq	0x1(%rcx), %r10
    000000df: 	addw	(%rsi), %ax
    000000e2: 	cmpq	%r10, %rdx
    000000e5: 	jbe	.Ltmp379 # Offset: 229
    000000e7: 	leaq	0x2(%rcx), %r10
    000000eb: 	addw	0x2(%rsi), %ax
    000000ef: 	cmpq	%r10, %rdx
    000000f2: 	jbe	.Ltmp379 # Offset: 242
    000000f4: 	leaq	0x3(%rcx), %r10
    000000f8: 	addw	0x4(%rsi), %ax
    000000fc: 	cmpq	%r10, %rdx
    000000ff: 	jbe	.Ltmp379 # Offset: 255
    00000101: 	leaq	0x4(%rcx), %r10
    00000105: 	addw	0x6(%rsi), %ax
    00000109: 	cmpq	%r10, %rdx
    0000010c: 	jbe	.Ltmp379 # Offset: 268
    0000010e: 	leaq	0x5(%rcx), %r10
    00000112: 	addw	0x8(%rsi), %ax
    00000116: 	cmpq	%r10, %rdx
    00000119: 	jbe	.Ltmp379 # Offset: 281
    0000011b: 	addq	$0x6, %rcx
    0000011f: 	addw	0xa(%rsi), %ax
    00000123: 	cmpq	%rcx, %rdx
    00000126: 	jbe	.Ltmp379 # Offset: 294
    00000128: 	addw	0xc(%rsi), %ax
.Ltmp379:
    0000012c: 	addq	%rbp, %rdi
.Ltmp376:
    0000012f: 	addq	$0x1, %r9
    00000133: 	cmpq	%r9, %rbx
    00000136: 	jne	.Ltmp380 # Offset: 310
.Ltmp375:
    0000013c: 	addq	$0x1, %r15
    00000140: 	cmpq	%r15, %r12
    00000143: 	jne	.Ltmp381 # Offset: 323
.Ltmp374:
    00000149: 	addq	$0x1, -0x18(%rsp)
    0000014f: 	movq	-0x18(%rsp), %rcx
    00000154: 	cmpq	%rcx, -0x10(%rsp)
    00000159: 	jne	.Ltmp382 # Offset: 345
.Ltmp373:
    0000015f: 	popq	%rbx
    00000160: 	popq	%rbp
    00000161: 	popq	%r12
    00000163: 	popq	%r13
    00000165: 	popq	%r14
    00000167: 	popq	%r15
    00000169: 	retq # Offset: 361
.Ltmp377:
    0000016a: 	movq	%rdi, %rsi
    0000016d: 	xorl	%ecx, %ecx
    0000016f: 	jmp	.Ltmp383 # Offset: 367
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array4D6ItET_PKS0_mmmmS0_"

Binary Function "_Z19accumulate_array4D7ItET_PKS0_mmmmS0_" after disassembly {
  Number      : 93
  State       : disassembled
  Address     : 0x5f00
  Size        : 0x1ab
  MaxSize     : 0x1b0
  Offset      : 0x5f00
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array4D7ItET_PKS0_mmmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB092:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rcx, %rbx
    00000011: 	movq	%r8, %rcx
    00000014: 	movl	%r9d, %r8d
    00000017: 	movq	%rdi, -0x20(%rsp)
    0000001c: 	movq	%rsi, -0x10(%rsp)
    00000021: 	movq	%rdx, -0x30(%rsp)
    00000026: 	testq	%rsi, %rsi
    00000029: 	je	.Ltmp384 # Offset: 41
    0000002f: 	movq	%rbx, %rax
    00000032: 	movq	%rcx, %rsi
    00000035: 	leaq	(%rcx,%rcx), %rbp
    00000039: 	movq	%rcx, %r11
    0000003c: 	imulq	%rcx, %rax
    00000040: 	leaq	-0x1(%rcx), %r12
    00000044: 	shrq	$0x3, %rsi
    00000048: 	andq	$-0x8, %r11
    0000004c: 	movq	$0x0, -0x28(%rsp)
    00000055: 	leaq	(%rax,%rax), %r15
    00000059: 	imulq	%rdx, %rax
    0000005d: 	addq	%rax, %rax
    00000060: 	movq	%rax, -0x18(%rsp)
.Ltmp392:
    00000065: 	xorl	%r13d, %r13d
    00000068: 	cmpq	$0x0, -0x30(%rsp)
    0000006e: 	movq	-0x20(%rsp), %r14
    00000073: 	je	.Ltmp385 # Offset: 115
    00000079: 	nopl	(%rax) # Size: 7
.Ltmp391:
    00000080: 	movq	%r14, %rax
    00000083: 	xorl	%r9d, %r9d
    00000086: 	testq	%rbx, %rbx
    00000089: 	je	.Ltmp386 # Offset: 137
    0000008f: 	nop # Size: 1
.Ltmp390:
    00000090: 	testq	%rcx, %rcx
    00000093: 	je	.Ltmp387 # Offset: 147
    00000099: 	xorl	%edx, %edx
    0000009b: 	cmpq	$0x6, %r12
    0000009f: 	jbe	.Ltmp388 # Offset: 159
    000000a1: 	pxor	%xmm0, %xmm0
    000000a5: 	nopl	(%rax) # Size: 3
.Ltmp389:
    000000a8: 	movq	%rdx, %rdi
    000000ab: 	addq	$0x1, %rdx
    000000af: 	shlq	$0x4, %rdi
    000000b3: 	movdqu	(%rax,%rdi), %xmm1
    000000b8: 	paddw	%xmm1, %xmm0
    000000bc: 	cmpq	%rdx, %rsi
    000000bf: 	jne	.Ltmp389 # Offset: 191
    000000c1: 	movdqa	%xmm0, %xmm1
    000000c5: 	psrldq	$0x8, %xmm1
    000000ca: 	paddw	%xmm1, %xmm0
    000000ce: 	movdqa	%xmm0, %xmm1
    000000d2: 	psrldq	$0x4, %xmm1
    000000d7: 	paddw	%xmm1, %xmm0
    000000db: 	movdqa	%xmm0, %xmm1
    000000df: 	psrldq	$0x2, %xmm1
    000000e4: 	paddw	%xmm1, %xmm0
    000000e8: 	pextrw	$0x0, %xmm0, %edx
    000000ed: 	addl	%edx, %r8d
    000000f0: 	cmpq	%r11, %rcx
    000000f3: 	je	.Ltmp387 # Offset: 243
    000000f5: 	movq	%r11, %rdx
.Ltmp388:
    000000f8: 	leaq	0x1(%rdx), %r10
    000000fc: 	leaq	(%rdx,%rdx), %rdi
    00000100: 	addw	(%rax,%rdx,2), %r8w
    00000105: 	cmpq	%r10, %rcx
    00000108: 	jbe	.Ltmp387 # Offset: 264
    0000010a: 	leaq	0x2(%rdx), %r10
    0000010e: 	addw	0x2(%rax,%rdi), %r8w
    00000114: 	cmpq	%r10, %rcx
    00000117: 	jbe	.Ltmp387 # Offset: 279
    00000119: 	leaq	0x3(%rdx), %r10
    0000011d: 	addw	0x4(%rax,%rdi), %r8w
    00000123: 	cmpq	%r10, %rcx
    00000126: 	jbe	.Ltmp387 # Offset: 294
    00000128: 	leaq	0x4(%rdx), %r10
    0000012c: 	addw	0x6(%rax,%rdi), %r8w
    00000132: 	cmpq	%r10, %rcx
    00000135: 	jbe	.Ltmp387 # Offset: 309
    00000137: 	leaq	0x5(%rdx), %r10
    0000013b: 	addw	0x8(%rax,%rdi), %r8w
    00000141: 	cmpq	%r10, %rcx
    00000144: 	jbe	.Ltmp387 # Offset: 324
    00000146: 	addq	$0x6, %rdx
    0000014a: 	addw	0xa(%rax,%rdi), %r8w
    00000150: 	cmpq	%rdx, %rcx
    00000153: 	jbe	.Ltmp387 # Offset: 339
    00000155: 	addw	0xc(%rax,%rdi), %r8w
.Ltmp387:
    0000015b: 	addq	$0x1, %r9
    0000015f: 	addq	%rbp, %rax
    00000162: 	cmpq	%r9, %rbx
    00000165: 	jne	.Ltmp390 # Offset: 357
.Ltmp386:
    0000016b: 	addq	%r15, %r14
    0000016e: 	addq	$0x1, %r13
    00000172: 	cmpq	%r13, -0x30(%rsp)
    00000177: 	jne	.Ltmp391 # Offset: 375
.Ltmp385:
    0000017d: 	addq	$0x1, -0x28(%rsp)
    00000183: 	movq	-0x18(%rsp), %rdx
    00000188: 	movq	-0x28(%rsp), %rax
    0000018d: 	addq	%rdx, -0x20(%rsp)
    00000192: 	cmpq	%rax, -0x10(%rsp)
    00000197: 	jne	.Ltmp392 # Offset: 407
.Ltmp384:
    0000019d: 	popq	%rbx
    0000019e: 	movl	%r8d, %eax
    000001a1: 	popq	%rbp
    000001a2: 	popq	%r12
    000001a4: 	popq	%r13
    000001a6: 	popq	%r14
    000001a8: 	popq	%r15
    000001aa: 	retq # Offset: 426
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array4D7ItET_PKS0_mmmmS0_"

Binary Function "_Z19accumulate_array4D8ItET_PKS0_mmmmS0_" after disassembly {
  Number      : 94
  State       : disassembled
  Address     : 0x60b0
  Size        : 0x1d3
  MaxSize     : 0x1e0
  Offset      : 0x60b0
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array4D8ItET_PKS0_mmmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB093:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rdx, %rbx
    00000011: 	movq	%rdx, -0x38(%rsp)
    00000016: 	movq	%r8, %rdx
    00000019: 	movl	%r9d, %r8d
    0000001c: 	movq	%rsi, -0x10(%rsp)
    00000021: 	testq	%rsi, %rsi
    00000024: 	je	.Ltmp393 # Offset: 36
    0000002a: 	movq	%rcx, %rax
    0000002d: 	movq	%rdx, %r12
    00000030: 	movq	%rdx, %r10
    00000033: 	movq	%rcx, %r11
    00000036: 	imulq	%rdx, %rax
    0000003a: 	shrq	$0x3, %r12
    0000003e: 	leaq	-0x1(%rdx), %rbp
    00000042: 	andq	$-0x8, %r10
    00000046: 	movq	$0x0, -0x20(%rsp)
    0000004f: 	shlq	$0x4, %r12
    00000053: 	movq	$0x0, -0x28(%rsp)
    0000005c: 	movq	%rax, -0x30(%rsp)
    00000061: 	imulq	%rbx, %rax
    00000065: 	leaq	(%rdx,%rdx), %rbx
    00000069: 	movq	%rax, -0x18(%rsp)
.Ltmp401:
    0000006e: 	cmpq	$0x0, -0x38(%rsp)
    00000074: 	je	.Ltmp394 # Offset: 116
    0000007a: 	movq	-0x20(%rsp), %r13
    0000007f: 	xorl	%r14d, %r14d
    00000082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp400:
    00000088: 	testq	%r11, %r11
    0000008b: 	je	.Ltmp395 # Offset: 139
    00000091: 	leaq	(%rdi,%r13,2), %rsi
    00000095: 	movq	%r13, %rcx
    00000098: 	xorl	%r9d, %r9d
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp399:
    000000a0: 	testq	%rdx, %rdx
    000000a3: 	je	.Ltmp396 # Offset: 163
    000000a9: 	cmpq	$0x6, %rbp
    000000ad: 	jbe	.Ltmp397 # Offset: 173
    000000b3: 	leaq	(%r12,%rsi), %r15
    000000b7: 	movq	%rsi, %rax
    000000ba: 	pxor	%xmm0, %xmm0
    000000be: 	nop # Size: 2
.Ltmp398:
    000000c0: 	movdqu	(%rax), %xmm2
    000000c4: 	addq	$0x10, %rax
    000000c8: 	paddw	%xmm2, %xmm0
    000000cc: 	cmpq	%r15, %rax
    000000cf: 	jne	.Ltmp398 # Offset: 207
    000000d1: 	movdqa	%xmm0, %xmm1
    000000d5: 	psrldq	$0x8, %xmm1
    000000da: 	paddw	%xmm1, %xmm0
    000000de: 	movdqa	%xmm0, %xmm1
    000000e2: 	psrldq	$0x4, %xmm1
    000000e7: 	paddw	%xmm1, %xmm0
    000000eb: 	movdqa	%xmm0, %xmm1
    000000ef: 	psrldq	$0x2, %xmm1
    000000f4: 	paddw	%xmm1, %xmm0
    000000f8: 	pextrw	$0x0, %xmm0, %eax
    000000fd: 	addl	%eax, %r8d
    00000100: 	cmpq	%rdx, %r10
    00000103: 	je	.Ltmp396 # Offset: 259
    00000105: 	movq	%r10, %rax
.Ltmp402:
    00000108: 	leaq	(%rax,%rcx), %r15
    0000010c: 	addw	(%rdi,%r15,2), %r8w
    00000111: 	leaq	0x1(%rax), %r15
    00000115: 	cmpq	%r15, %rdx
    00000118: 	jbe	.Ltmp396 # Offset: 280
    0000011a: 	addq	%rcx, %r15
    0000011d: 	addw	(%rdi,%r15,2), %r8w
    00000122: 	leaq	0x2(%rax), %r15
    00000126: 	cmpq	%r15, %rdx
    00000129: 	jbe	.Ltmp396 # Offset: 297
    0000012b: 	addq	%rcx, %r15
    0000012e: 	addw	(%rdi,%r15,2), %r8w
    00000133: 	leaq	0x3(%rax), %r15
    00000137: 	cmpq	%r15, %rdx
    0000013a: 	jbe	.Ltmp396 # Offset: 314
    0000013c: 	addq	%rcx, %r15
    0000013f: 	addw	(%rdi,%r15,2), %r8w
    00000144: 	leaq	0x4(%rax), %r15
    00000148: 	cmpq	%r15, %rdx
    0000014b: 	jbe	.Ltmp396 # Offset: 331
    0000014d: 	addq	%rcx, %r15
    00000150: 	addw	(%rdi,%r15,2), %r8w
    00000155: 	leaq	0x5(%rax), %r15
    00000159: 	cmpq	%r15, %rdx
    0000015c: 	jbe	.Ltmp396 # Offset: 348
    0000015e: 	addq	%rcx, %r15
    00000161: 	addq	$0x6, %rax
    00000165: 	addw	(%rdi,%r15,2), %r8w
    0000016a: 	cmpq	%rax, %rdx
    0000016d: 	jbe	.Ltmp396 # Offset: 365
    0000016f: 	addq	%rcx, %rax
    00000172: 	addw	(%rdi,%rax,2), %r8w
.Ltmp396:
    00000177: 	addq	$0x1, %r9
    0000017b: 	addq	%rdx, %rcx
    0000017e: 	addq	%rbx, %rsi
    00000181: 	cmpq	%r9, %r11
    00000184: 	jne	.Ltmp399 # Offset: 388
.Ltmp395:
    0000018a: 	addq	$0x1, %r14
    0000018e: 	addq	-0x30(%rsp), %r13
    00000193: 	cmpq	%r14, -0x38(%rsp)
    00000198: 	jne	.Ltmp400 # Offset: 408
.Ltmp394:
    0000019e: 	addq	$0x1, -0x28(%rsp)
    000001a4: 	movq	-0x18(%rsp), %rcx
    000001a9: 	movq	-0x28(%rsp), %rax
    000001ae: 	addq	%rcx, -0x20(%rsp)
    000001b3: 	cmpq	%rax, -0x10(%rsp)
    000001b8: 	jne	.Ltmp401 # Offset: 440
.Ltmp393:
    000001be: 	popq	%rbx
    000001bf: 	movl	%r8d, %eax
    000001c2: 	popq	%rbp
    000001c3: 	popq	%r12
    000001c5: 	popq	%r13
    000001c7: 	popq	%r14
    000001c9: 	popq	%r15
    000001cb: 	retq # Offset: 459
.Ltmp397:
    000001cc: 	xorl	%eax, %eax
    000001ce: 	jmp	.Ltmp402 # Offset: 462
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array4D8ItET_PKS0_mmmmS0_"

Binary Function "_Z19accumulate_array4D9ItET_PKS0_mmmmS0_" after disassembly {
  Number      : 95
  State       : disassembled
  Address     : 0x6290
  Size        : 0x1d3
  MaxSize     : 0x1e0
  Offset      : 0x6290
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array4D9ItET_PKS0_mmmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB094:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rdx, %rbx
    00000011: 	movq	%rdx, -0x38(%rsp)
    00000016: 	movq	%r8, %rdx
    00000019: 	movl	%r9d, %r8d
    0000001c: 	movq	%rsi, -0x10(%rsp)
    00000021: 	testq	%rsi, %rsi
    00000024: 	je	.Ltmp403 # Offset: 36
    0000002a: 	movq	%rcx, %rax
    0000002d: 	movq	%rdx, %r12
    00000030: 	movq	%rdx, %r10
    00000033: 	movq	%rcx, %r11
    00000036: 	imulq	%rdx, %rax
    0000003a: 	shrq	$0x3, %r12
    0000003e: 	leaq	-0x1(%rdx), %rbp
    00000042: 	andq	$-0x8, %r10
    00000046: 	movq	$0x0, -0x20(%rsp)
    0000004f: 	shlq	$0x4, %r12
    00000053: 	movq	$0x0, -0x28(%rsp)
    0000005c: 	imulq	%rax, %rbx
    00000060: 	movq	%rax, -0x30(%rsp)
    00000065: 	movq	%rbx, -0x18(%rsp)
    0000006a: 	leaq	(%rdx,%rdx), %rbx
.Ltmp411:
    0000006e: 	xorl	%r14d, %r14d
    00000071: 	cmpq	$0x0, -0x38(%rsp)
    00000077: 	movq	-0x20(%rsp), %r13
    0000007c: 	je	.Ltmp404 # Offset: 124
    00000082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp410:
    00000088: 	testq	%r11, %r11
    0000008b: 	je	.Ltmp405 # Offset: 139
    00000091: 	leaq	(%rdi,%r13,2), %rsi
    00000095: 	movq	%r13, %rcx
    00000098: 	xorl	%r9d, %r9d
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp409:
    000000a0: 	testq	%rdx, %rdx
    000000a3: 	je	.Ltmp406 # Offset: 163
    000000a9: 	cmpq	$0x6, %rbp
    000000ad: 	jbe	.Ltmp407 # Offset: 173
    000000b3: 	leaq	(%r12,%rsi), %r15
    000000b7: 	movq	%rsi, %rax
    000000ba: 	pxor	%xmm0, %xmm0
    000000be: 	nop # Size: 2
.Ltmp408:
    000000c0: 	movdqu	(%rax), %xmm2
    000000c4: 	addq	$0x10, %rax
    000000c8: 	paddw	%xmm2, %xmm0
    000000cc: 	cmpq	%r15, %rax
    000000cf: 	jne	.Ltmp408 # Offset: 207
    000000d1: 	movdqa	%xmm0, %xmm1
    000000d5: 	psrldq	$0x8, %xmm1
    000000da: 	paddw	%xmm1, %xmm0
    000000de: 	movdqa	%xmm0, %xmm1
    000000e2: 	psrldq	$0x4, %xmm1
    000000e7: 	paddw	%xmm1, %xmm0
    000000eb: 	movdqa	%xmm0, %xmm1
    000000ef: 	psrldq	$0x2, %xmm1
    000000f4: 	paddw	%xmm1, %xmm0
    000000f8: 	pextrw	$0x0, %xmm0, %eax
    000000fd: 	addl	%eax, %r8d
    00000100: 	cmpq	%rdx, %r10
    00000103: 	je	.Ltmp406 # Offset: 259
    00000105: 	movq	%r10, %rax
.Ltmp412:
    00000108: 	leaq	(%rax,%rcx), %r15
    0000010c: 	addw	(%rdi,%r15,2), %r8w
    00000111: 	leaq	0x1(%rax), %r15
    00000115: 	cmpq	%r15, %rdx
    00000118: 	jbe	.Ltmp406 # Offset: 280
    0000011a: 	addq	%rcx, %r15
    0000011d: 	addw	(%rdi,%r15,2), %r8w
    00000122: 	leaq	0x2(%rax), %r15
    00000126: 	cmpq	%r15, %rdx
    00000129: 	jbe	.Ltmp406 # Offset: 297
    0000012b: 	addq	%rcx, %r15
    0000012e: 	addw	(%rdi,%r15,2), %r8w
    00000133: 	leaq	0x3(%rax), %r15
    00000137: 	cmpq	%r15, %rdx
    0000013a: 	jbe	.Ltmp406 # Offset: 314
    0000013c: 	addq	%rcx, %r15
    0000013f: 	addw	(%rdi,%r15,2), %r8w
    00000144: 	leaq	0x4(%rax), %r15
    00000148: 	cmpq	%r15, %rdx
    0000014b: 	jbe	.Ltmp406 # Offset: 331
    0000014d: 	addq	%rcx, %r15
    00000150: 	addw	(%rdi,%r15,2), %r8w
    00000155: 	leaq	0x5(%rax), %r15
    00000159: 	cmpq	%r15, %rdx
    0000015c: 	jbe	.Ltmp406 # Offset: 348
    0000015e: 	addq	%rcx, %r15
    00000161: 	addq	$0x6, %rax
    00000165: 	addw	(%rdi,%r15,2), %r8w
    0000016a: 	cmpq	%rax, %rdx
    0000016d: 	jbe	.Ltmp406 # Offset: 365
    0000016f: 	addq	%rcx, %rax
    00000172: 	addw	(%rdi,%rax,2), %r8w
.Ltmp406:
    00000177: 	addq	$0x1, %r9
    0000017b: 	addq	%rdx, %rcx
    0000017e: 	addq	%rbx, %rsi
    00000181: 	cmpq	%r9, %r11
    00000184: 	jne	.Ltmp409 # Offset: 388
.Ltmp405:
    0000018a: 	addq	$0x1, %r14
    0000018e: 	addq	-0x30(%rsp), %r13
    00000193: 	cmpq	%r14, -0x38(%rsp)
    00000198: 	jne	.Ltmp410 # Offset: 408
.Ltmp404:
    0000019e: 	addq	$0x1, -0x28(%rsp)
    000001a4: 	movq	-0x18(%rsp), %rcx
    000001a9: 	movq	-0x28(%rsp), %rax
    000001ae: 	addq	%rcx, -0x20(%rsp)
    000001b3: 	cmpq	%rax, -0x10(%rsp)
    000001b8: 	jne	.Ltmp411 # Offset: 440
.Ltmp403:
    000001be: 	popq	%rbx
    000001bf: 	movl	%r8d, %eax
    000001c2: 	popq	%rbp
    000001c3: 	popq	%r12
    000001c5: 	popq	%r13
    000001c7: 	popq	%r14
    000001c9: 	popq	%r15
    000001cb: 	retq # Offset: 459
.Ltmp407:
    000001cc: 	xorl	%eax, %eax
    000001ce: 	jmp	.Ltmp412 # Offset: 462
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array4D9ItET_PKS0_mmmmS0_"

Binary Function "_Z16accumulate_arrayIsET_PKS0_S2_S0_" after disassembly {
  Number      : 96
  State       : disassembled
  Address     : 0x6470
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x6470
  Section     : .text
  Orc Section : .local.text._Z16accumulate_arrayIsET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB095:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp413 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp414 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp415:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp415 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp416 # Offset: 130
.Ltmp418:
    00000084: 	leaq	0x1(%rdx), %rsi
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%rsi, %r8
    00000093: 	jle	.Ltmp417 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %rsi
    00000099: 	addw	0x2(%rdi,%rcx), %ax
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp417 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %rsi
    000000a7: 	addw	0x4(%rdi,%rcx), %ax
    000000ac: 	cmpq	%rsi, %r8
    000000af: 	jle	.Ltmp417 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %rsi
    000000b5: 	addw	0x6(%rdi,%rcx), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp417 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %rsi
    000000c3: 	addw	0x8(%rdi,%rcx), %ax
    000000c8: 	cmpq	%rsi, %r8
    000000cb: 	jle	.Ltmp417 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rdi,%rcx), %ax
    000000d6: 	cmpq	%rdx, %r8
    000000d9: 	jle	.Ltmp417 # Offset: 217
    000000db: 	addw	0xc(%rdi,%rcx), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp413:
    000000e8: 	movl	%edx, %eax
.Ltmp417:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp416:
    000000f0: 	retq # Offset: 240
.Ltmp414:
    000000f1: 	movl	%edx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp418 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z16accumulate_arrayIsET_PKS0_S2_S0_"

Binary Function "_Z17accumulate_array2IsET_PKS0_S2_S0_" after disassembly {
  Number      : 97
  State       : disassembled
  Address     : 0x6570
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x6570
  Section     : .text
  Orc Section : .local.text._Z17accumulate_array2IsET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB096:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp419 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp420 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp421:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp421 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp422 # Offset: 130
.Ltmp424:
    00000084: 	leaq	0x1(%rdx), %rsi
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%rsi, %r8
    00000093: 	jle	.Ltmp423 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %rsi
    00000099: 	addw	0x2(%rdi,%rcx), %ax
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp423 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %rsi
    000000a7: 	addw	0x4(%rdi,%rcx), %ax
    000000ac: 	cmpq	%rsi, %r8
    000000af: 	jle	.Ltmp423 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %rsi
    000000b5: 	addw	0x6(%rdi,%rcx), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp423 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %rsi
    000000c3: 	addw	0x8(%rdi,%rcx), %ax
    000000c8: 	cmpq	%rsi, %r8
    000000cb: 	jle	.Ltmp423 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rdi,%rcx), %ax
    000000d6: 	cmpq	%rdx, %r8
    000000d9: 	jle	.Ltmp423 # Offset: 217
    000000db: 	addw	0xc(%rdi,%rcx), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp419:
    000000e8: 	movl	%edx, %eax
.Ltmp423:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp422:
    000000f0: 	retq # Offset: 240
.Ltmp420:
    000000f1: 	movl	%edx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp424 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z17accumulate_array2IsET_PKS0_S2_S0_"

Binary Function "_Z17accumulate_array3IsET_PKS0_S2_S0_" after disassembly {
  Number      : 98
  State       : disassembled
  Address     : 0x6670
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x6670
  Section     : .text
  Orc Section : .local.text._Z17accumulate_array3IsET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB097:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp425 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp426 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp427:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp427 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp428 # Offset: 130
.Ltmp430:
    00000084: 	leaq	0x1(%rdx), %rsi
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%rsi, %r8
    00000093: 	jle	.Ltmp429 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %rsi
    00000099: 	addw	0x2(%rdi,%rcx), %ax
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp429 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %rsi
    000000a7: 	addw	0x4(%rdi,%rcx), %ax
    000000ac: 	cmpq	%rsi, %r8
    000000af: 	jle	.Ltmp429 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %rsi
    000000b5: 	addw	0x6(%rdi,%rcx), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp429 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %rsi
    000000c3: 	addw	0x8(%rdi,%rcx), %ax
    000000c8: 	cmpq	%rsi, %r8
    000000cb: 	jle	.Ltmp429 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rdi,%rcx), %ax
    000000d6: 	cmpq	%rdx, %r8
    000000d9: 	jle	.Ltmp429 # Offset: 217
    000000db: 	addw	0xc(%rdi,%rcx), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp425:
    000000e8: 	movl	%edx, %eax
.Ltmp429:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp428:
    000000f0: 	retq # Offset: 240
.Ltmp426:
    000000f1: 	movl	%edx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp430 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z17accumulate_array3IsET_PKS0_S2_S0_"

Binary Function "_Z17accumulate_array4IsET_PKS0_S2_S0_" after disassembly {
  Number      : 99
  State       : disassembled
  Address     : 0x6770
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x6770
  Section     : .text
  Orc Section : .local.text._Z17accumulate_array4IsET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB098:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp431 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp432 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp433:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp433 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp434 # Offset: 130
.Ltmp436:
    00000088: 	leaq	0x1(%rdx), %rsi
    0000008c: 	leaq	0xa0(%rdx,%rdx), %rcx
    00000094: 	addw	(%rdi,%rdx,2), %ax
    00000098: 	cmpq	%rsi, %r8
    0000009b: 	jle	.Ltmp435 # Offset: 155
    0000009d: 	leaq	0x2(%rdx), %rsi
    000000a1: 	addw	-0x9e(%rdi,%rcx), %ax
    000000a9: 	cmpq	%rsi, %r8
    000000ac: 	jle	.Ltmp435 # Offset: 172
    000000ae: 	leaq	0x3(%rdx), %rsi
    000000b2: 	addw	-0x9c(%rdi,%rcx), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp435 # Offset: 189
    000000bf: 	leaq	0x4(%rdx), %rsi
    000000c3: 	addw	-0x9a(%rdi,%rcx), %ax
    000000cb: 	cmpq	%rsi, %r8
    000000ce: 	jle	.Ltmp435 # Offset: 206
    000000d0: 	leaq	0x5(%rdx), %rsi
    000000d4: 	addw	-0x98(%rdi,%rcx), %ax
    000000dc: 	cmpq	%rsi, %r8
    000000df: 	jle	.Ltmp435 # Offset: 223
    000000e1: 	addq	$0x6, %rdx
    000000e5: 	addw	-0x96(%rdi,%rcx), %ax
    000000ed: 	cmpq	%rdx, %r8
    000000f0: 	jle	.Ltmp435 # Offset: 240
    000000f2: 	addw	-0x94(%rdi,%rcx), %ax
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp431:
    00000100: 	movl	%edx, %eax
.Ltmp435:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp434:
    00000108: 	retq # Offset: 264
.Ltmp432:
    00000109: 	movl	%edx, %eax
    0000010b: 	xorl	%edx, %edx
    0000010d: 	jmp	.Ltmp436 # Offset: 269
DWARF CFI Instructions:
    <empty>
End of Function "_Z17accumulate_array4IsET_PKS0_S2_S0_"

Binary Function "_Z14accumulate_ptrIsET_PKS0_S2_S0_" after disassembly {
  Number      : 100
  State       : disassembled
  Address     : 0x6890
  Size        : 0xef
  MaxSize     : 0xf0
  Offset      : 0x6890
  Section     : .text
  Orc Section : .local.text._Z14accumulate_ptrIsET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB099:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp437 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp438 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp439:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp439 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	leaq	(%rdi,%rdx,2), %rdi
    00000082: 	cmpq	%rdx, %r8
    00000085: 	je	.Ltmp440 # Offset: 133
.Ltmp442:
    00000087: 	leaq	0x1(%rdx), %rcx
    0000008b: 	addw	(%rdi), %ax
    0000008e: 	cmpq	%rcx, %r8
    00000091: 	jle	.Ltmp441 # Offset: 145
    00000093: 	leaq	0x2(%rdx), %rcx
    00000097: 	addw	0x2(%rdi), %ax
    0000009b: 	cmpq	%rcx, %r8
    0000009e: 	jle	.Ltmp441 # Offset: 158
    000000a0: 	leaq	0x3(%rdx), %rcx
    000000a4: 	addw	0x4(%rdi), %ax
    000000a8: 	cmpq	%rcx, %r8
    000000ab: 	jle	.Ltmp441 # Offset: 171
    000000ad: 	leaq	0x4(%rdx), %rcx
    000000b1: 	addw	0x6(%rdi), %ax
    000000b5: 	cmpq	%rcx, %r8
    000000b8: 	jle	.Ltmp441 # Offset: 184
    000000ba: 	leaq	0x5(%rdx), %rcx
    000000be: 	addw	0x8(%rdi), %ax
    000000c2: 	cmpq	%rcx, %r8
    000000c5: 	jle	.Ltmp441 # Offset: 197
    000000c7: 	addq	$0x6, %rdx
    000000cb: 	addw	0xa(%rdi), %ax
    000000cf: 	cmpq	%rdx, %r8
    000000d2: 	jle	.Ltmp441 # Offset: 210
    000000d4: 	addw	0xc(%rdi), %ax
    000000d8: 	retq # Offset: 216
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp437:
    000000e0: 	movl	%edx, %eax
.Ltmp441:
    000000e2: 	retq # Offset: 226
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp440:
    000000e8: 	retq # Offset: 232
.Ltmp438:
    000000e9: 	movl	%edx, %eax
    000000eb: 	xorl	%edx, %edx
    000000ed: 	jmp	.Ltmp442 # Offset: 237
DWARF CFI Instructions:
    <empty>
End of Function "_Z14accumulate_ptrIsET_PKS0_S2_S0_"

Binary Function "_Z15accumulate_ptr2IsET_PKS0_S2_S0_" after disassembly {
  Number      : 101
  State       : disassembled
  Address     : 0x6980
  Size        : 0xef
  MaxSize     : 0xf0
  Offset      : 0x6980
  Section     : .text
  Orc Section : .local.text._Z15accumulate_ptr2IsET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0100:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp443 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp444 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp445:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp445 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	leaq	(%rdi,%rdx,2), %rdi
    00000082: 	cmpq	%rdx, %r8
    00000085: 	je	.Ltmp446 # Offset: 133
.Ltmp448:
    00000087: 	leaq	0x1(%rdx), %rcx
    0000008b: 	addw	(%rdi), %ax
    0000008e: 	cmpq	%rcx, %r8
    00000091: 	jle	.Ltmp447 # Offset: 145
    00000093: 	leaq	0x2(%rdx), %rcx
    00000097: 	addw	0x2(%rdi), %ax
    0000009b: 	cmpq	%rcx, %r8
    0000009e: 	jle	.Ltmp447 # Offset: 158
    000000a0: 	leaq	0x3(%rdx), %rcx
    000000a4: 	addw	0x4(%rdi), %ax
    000000a8: 	cmpq	%rcx, %r8
    000000ab: 	jle	.Ltmp447 # Offset: 171
    000000ad: 	leaq	0x4(%rdx), %rcx
    000000b1: 	addw	0x6(%rdi), %ax
    000000b5: 	cmpq	%rcx, %r8
    000000b8: 	jle	.Ltmp447 # Offset: 184
    000000ba: 	leaq	0x5(%rdx), %rcx
    000000be: 	addw	0x8(%rdi), %ax
    000000c2: 	cmpq	%rcx, %r8
    000000c5: 	jle	.Ltmp447 # Offset: 197
    000000c7: 	addq	$0x6, %rdx
    000000cb: 	addw	0xa(%rdi), %ax
    000000cf: 	cmpq	%rdx, %r8
    000000d2: 	jle	.Ltmp447 # Offset: 210
    000000d4: 	addw	0xc(%rdi), %ax
    000000d8: 	retq # Offset: 216
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp443:
    000000e0: 	movl	%edx, %eax
.Ltmp447:
    000000e2: 	retq # Offset: 226
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp446:
    000000e8: 	retq # Offset: 232
.Ltmp444:
    000000e9: 	movl	%edx, %eax
    000000eb: 	xorl	%edx, %edx
    000000ed: 	jmp	.Ltmp448 # Offset: 237
DWARF CFI Instructions:
    <empty>
End of Function "_Z15accumulate_ptr2IsET_PKS0_S2_S0_"

Binary Function "_Z15accumulate_ptr3IsET_PKS0_S2_S0_" after disassembly {
  Number      : 102
  State       : disassembled
  Address     : 0x6a70
  Size        : 0xef
  MaxSize     : 0xf0
  Offset      : 0x6a70
  Section     : .text
  Orc Section : .local.text._Z15accumulate_ptr3IsET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0101:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp449 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp450 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp451:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp451 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	leaq	(%rdi,%rdx,2), %rdi
    00000082: 	cmpq	%r8, %rdx
    00000085: 	je	.Ltmp452 # Offset: 133
.Ltmp454:
    00000087: 	leaq	0x1(%rdx), %rcx
    0000008b: 	addw	(%rdi), %ax
    0000008e: 	cmpq	%rcx, %r8
    00000091: 	jle	.Ltmp453 # Offset: 145
    00000093: 	leaq	0x2(%rdx), %rcx
    00000097: 	addw	0x2(%rdi), %ax
    0000009b: 	cmpq	%rcx, %r8
    0000009e: 	jle	.Ltmp453 # Offset: 158
    000000a0: 	leaq	0x3(%rdx), %rcx
    000000a4: 	addw	0x4(%rdi), %ax
    000000a8: 	cmpq	%rcx, %r8
    000000ab: 	jle	.Ltmp453 # Offset: 171
    000000ad: 	leaq	0x4(%rdx), %rcx
    000000b1: 	addw	0x6(%rdi), %ax
    000000b5: 	cmpq	%rcx, %r8
    000000b8: 	jle	.Ltmp453 # Offset: 184
    000000ba: 	leaq	0x5(%rdx), %rcx
    000000be: 	addw	0x8(%rdi), %ax
    000000c2: 	cmpq	%rcx, %r8
    000000c5: 	jle	.Ltmp453 # Offset: 197
    000000c7: 	addq	$0x6, %rdx
    000000cb: 	addw	0xa(%rdi), %ax
    000000cf: 	cmpq	%rdx, %r8
    000000d2: 	jle	.Ltmp453 # Offset: 210
    000000d4: 	addw	0xc(%rdi), %ax
    000000d8: 	retq # Offset: 216
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp449:
    000000e0: 	movl	%edx, %eax
.Ltmp453:
    000000e2: 	retq # Offset: 226
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp452:
    000000e8: 	retq # Offset: 232
.Ltmp450:
    000000e9: 	movl	%edx, %eax
    000000eb: 	xorl	%edx, %edx
    000000ed: 	jmp	.Ltmp454 # Offset: 237
DWARF CFI Instructions:
    <empty>
End of Function "_Z15accumulate_ptr3IsET_PKS0_S2_S0_"

Binary Function "_Z15accumulate_ptr4IsET_PKS0_S2_S0_" after disassembly {
  Number      : 103
  State       : disassembled
  Address     : 0x6b60
  Size        : 0xef
  MaxSize     : 0xf0
  Offset      : 0x6b60
  Section     : .text
  Orc Section : .local.text._Z15accumulate_ptr4IsET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0102:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp455 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp456 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp457:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp457 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	leaq	(%rdi,%rdx,2), %rdi
    00000082: 	cmpq	%rdx, %r8
    00000085: 	je	.Ltmp458 # Offset: 133
.Ltmp460:
    00000087: 	leaq	0x1(%rdx), %rcx
    0000008b: 	addw	(%rdi), %ax
    0000008e: 	cmpq	%rcx, %r8
    00000091: 	jle	.Ltmp459 # Offset: 145
    00000093: 	leaq	0x2(%rdx), %rcx
    00000097: 	addw	0x2(%rdi), %ax
    0000009b: 	cmpq	%rcx, %r8
    0000009e: 	jle	.Ltmp459 # Offset: 158
    000000a0: 	leaq	0x3(%rdx), %rcx
    000000a4: 	addw	0x4(%rdi), %ax
    000000a8: 	cmpq	%rcx, %r8
    000000ab: 	jle	.Ltmp459 # Offset: 171
    000000ad: 	leaq	0x4(%rdx), %rcx
    000000b1: 	addw	0x6(%rdi), %ax
    000000b5: 	cmpq	%rcx, %r8
    000000b8: 	jle	.Ltmp459 # Offset: 184
    000000ba: 	leaq	0x5(%rdx), %rcx
    000000be: 	addw	0x8(%rdi), %ax
    000000c2: 	cmpq	%rcx, %r8
    000000c5: 	jle	.Ltmp459 # Offset: 197
    000000c7: 	addq	$0x6, %rdx
    000000cb: 	addw	0xa(%rdi), %ax
    000000cf: 	cmpq	%rdx, %r8
    000000d2: 	jle	.Ltmp459 # Offset: 210
    000000d4: 	addw	0xc(%rdi), %ax
    000000d8: 	retq # Offset: 216
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp455:
    000000e0: 	movl	%edx, %eax
.Ltmp459:
    000000e2: 	retq # Offset: 226
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp458:
    000000e8: 	retq # Offset: 232
.Ltmp456:
    000000e9: 	movl	%edx, %eax
    000000eb: 	xorl	%edx, %edx
    000000ed: 	jmp	.Ltmp460 # Offset: 237
DWARF CFI Instructions:
    <empty>
End of Function "_Z15accumulate_ptr4IsET_PKS0_S2_S0_"

Binary Function "_Z15accumulate_ptr5IsET_PKS0_S2_S0_" after disassembly {
  Number      : 104
  State       : disassembled
  Address     : 0x6c50
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x6c50
  Section     : .text
  Orc Section : .local.text._Z15accumulate_ptr5IsET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0103:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp461 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp462 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp463:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp463 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp464 # Offset: 130
.Ltmp466:
    00000084: 	leaq	0x1(%rdx), %rsi
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%rsi, %r8
    00000093: 	jle	.Ltmp465 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %rsi
    00000099: 	addw	0x2(%rdi,%rcx), %ax
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp465 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %rsi
    000000a7: 	addw	0x4(%rdi,%rcx), %ax
    000000ac: 	cmpq	%rsi, %r8
    000000af: 	jle	.Ltmp465 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %rsi
    000000b5: 	addw	0x6(%rdi,%rcx), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp465 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %rsi
    000000c3: 	addw	0x8(%rdi,%rcx), %ax
    000000c8: 	cmpq	%rsi, %r8
    000000cb: 	jle	.Ltmp465 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rdi,%rcx), %ax
    000000d6: 	cmpq	%rdx, %r8
    000000d9: 	jle	.Ltmp465 # Offset: 217
    000000db: 	addw	0xc(%rdi,%rcx), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp461:
    000000e8: 	movl	%edx, %eax
.Ltmp465:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp464:
    000000f0: 	retq # Offset: 240
.Ltmp462:
    000000f1: 	movl	%edx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp466 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z15accumulate_ptr5IsET_PKS0_S2_S0_"

Binary Function "_Z15accumulate_ptr6IsET_PKS0_S2_S0_" after disassembly {
  Number      : 105
  State       : disassembled
  Address     : 0x6d50
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x6d50
  Section     : .text
  Orc Section : .local.text._Z15accumulate_ptr6IsET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0104:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp467 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp468 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp469:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp469 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp470 # Offset: 130
.Ltmp472:
    00000084: 	leaq	0x1(%rdx), %rsi
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%rsi, %r8
    00000093: 	jle	.Ltmp471 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %rsi
    00000099: 	addw	0x2(%rdi,%rcx), %ax
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp471 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %rsi
    000000a7: 	addw	0x4(%rdi,%rcx), %ax
    000000ac: 	cmpq	%rsi, %r8
    000000af: 	jle	.Ltmp471 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %rsi
    000000b5: 	addw	0x6(%rdi,%rcx), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp471 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %rsi
    000000c3: 	addw	0x8(%rdi,%rcx), %ax
    000000c8: 	cmpq	%rsi, %r8
    000000cb: 	jle	.Ltmp471 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rdi,%rcx), %ax
    000000d6: 	cmpq	%rdx, %r8
    000000d9: 	jle	.Ltmp471 # Offset: 217
    000000db: 	addw	0xc(%rdi,%rcx), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp467:
    000000e8: 	movl	%edx, %eax
.Ltmp471:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp470:
    000000f0: 	retq # Offset: 240
.Ltmp468:
    000000f1: 	movl	%edx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp472 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z15accumulate_ptr6IsET_PKS0_S2_S0_"

Binary Function "_Z15accumulate_ptr7IsET_PKS0_S2_S0_" after disassembly {
  Number      : 106
  State       : disassembled
  Address     : 0x6e50
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x6e50
  Section     : .text
  Orc Section : .local.text._Z15accumulate_ptr7IsET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0105:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp473 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp474 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp475:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp475 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp476 # Offset: 130
.Ltmp478:
    00000084: 	leaq	0x1(%rdx), %rsi
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%rsi, %r8
    00000093: 	jle	.Ltmp477 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %rsi
    00000099: 	addw	0x2(%rdi,%rcx), %ax
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp477 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %rsi
    000000a7: 	addw	0x4(%rdi,%rcx), %ax
    000000ac: 	cmpq	%rsi, %r8
    000000af: 	jle	.Ltmp477 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %rsi
    000000b5: 	addw	0x6(%rdi,%rcx), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp477 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %rsi
    000000c3: 	addw	0x8(%rdi,%rcx), %ax
    000000c8: 	cmpq	%rsi, %r8
    000000cb: 	jle	.Ltmp477 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rdi,%rcx), %ax
    000000d6: 	cmpq	%rdx, %r8
    000000d9: 	jle	.Ltmp477 # Offset: 217
    000000db: 	addw	0xc(%rdi,%rcx), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp473:
    000000e8: 	movl	%edx, %eax
.Ltmp477:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp476:
    000000f0: 	retq # Offset: 240
.Ltmp474:
    000000f1: 	movl	%edx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp478 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z15accumulate_ptr7IsET_PKS0_S2_S0_"

Binary Function "_Z15accumulate_ptr8IsET_PKS0_S2_S0_" after disassembly {
  Number      : 107
  State       : disassembled
  Address     : 0x6f50
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x6f50
  Section     : .text
  Orc Section : .local.text._Z15accumulate_ptr8IsET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0106:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp479 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp480 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp481:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp481 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp482 # Offset: 130
.Ltmp484:
    00000084: 	leaq	0x1(%rdx), %rsi
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%rsi, %r8
    00000093: 	jle	.Ltmp483 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %rsi
    00000099: 	addw	0x2(%rdi,%rcx), %ax
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp483 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %rsi
    000000a7: 	addw	0x4(%rdi,%rcx), %ax
    000000ac: 	cmpq	%rsi, %r8
    000000af: 	jle	.Ltmp483 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %rsi
    000000b5: 	addw	0x6(%rdi,%rcx), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp483 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %rsi
    000000c3: 	addw	0x8(%rdi,%rcx), %ax
    000000c8: 	cmpq	%rsi, %r8
    000000cb: 	jle	.Ltmp483 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rdi,%rcx), %ax
    000000d6: 	cmpq	%rdx, %r8
    000000d9: 	jle	.Ltmp483 # Offset: 217
    000000db: 	addw	0xc(%rdi,%rcx), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp479:
    000000e8: 	movl	%edx, %eax
.Ltmp483:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp482:
    000000f0: 	retq # Offset: 240
.Ltmp480:
    000000f1: 	movl	%edx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp484 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z15accumulate_ptr8IsET_PKS0_S2_S0_"

Binary Function "_Z19accumulate_iteratorIPssET0_T_S2_S1_" after disassembly {
  Number      : 108
  State       : disassembled
  Address     : 0x7050
  Size        : 0xf5
  MaxSize     : 0x100
  Offset      : 0x7050
  Section     : .text
  Orc Section : .local.text._Z19accumulate_iteratorIPssET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0107:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp485 # Offset: 7
    0000000d: 	leaq	-0x2(%rsi), %rax
    00000011: 	movq	%rdi, %rcx
    00000014: 	subq	%rdi, %rax
    00000017: 	movq	%rax, %r8
    0000001a: 	shrq	%r8
    0000001d: 	addq	$0x1, %r8
    00000021: 	cmpq	$0xc, %rax
    00000025: 	jbe	.Ltmp486 # Offset: 37
    0000002b: 	movq	%r8, %rax
    0000002e: 	pxor	%xmm0, %xmm0
    00000032: 	shrq	$0x3, %rax
    00000036: 	shlq	$0x4, %rax
    0000003a: 	addq	%rdi, %rax
    0000003d: 	nopl	(%rax) # Size: 3
.Ltmp487:
    00000040: 	movdqu	(%rcx), %xmm2
    00000044: 	addq	$0x10, %rcx
    00000048: 	paddw	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rcx
    0000004f: 	jne	.Ltmp487 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	psrldq	$0x8, %xmm1
    0000005a: 	paddw	%xmm1, %xmm0
    0000005e: 	movdqa	%xmm0, %xmm1
    00000062: 	psrldq	$0x4, %xmm1
    00000067: 	paddw	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	psrldq	$0x2, %xmm1
    00000074: 	paddw	%xmm1, %xmm0
    00000078: 	pextrw	$0x0, %xmm0, %eax
    0000007d: 	addl	%edx, %eax
    0000007f: 	movq	%r8, %rdx
    00000082: 	andq	$-0x8, %rdx
    00000086: 	leaq	(%rdi,%rdx,2), %rdi
    0000008a: 	cmpq	%rdx, %r8
    0000008d: 	je	.Ltmp488 # Offset: 141
.Ltmp490:
    0000008f: 	leaq	0x2(%rdi), %rdx
    00000093: 	addw	(%rdi), %ax
    00000096: 	cmpq	%rdx, %rsi
    00000099: 	je	.Ltmp489 # Offset: 153
    0000009b: 	leaq	0x4(%rdi), %rdx
    0000009f: 	addw	0x2(%rdi), %ax
    000000a3: 	cmpq	%rdx, %rsi
    000000a6: 	je	.Ltmp489 # Offset: 166
    000000a8: 	leaq	0x6(%rdi), %rdx
    000000ac: 	addw	0x4(%rdi), %ax
    000000b0: 	cmpq	%rdx, %rsi
    000000b3: 	je	.Ltmp489 # Offset: 179
    000000b5: 	leaq	0x8(%rdi), %rdx
    000000b9: 	addw	0x6(%rdi), %ax
    000000bd: 	cmpq	%rdx, %rsi
    000000c0: 	je	.Ltmp489 # Offset: 192
    000000c2: 	leaq	0xa(%rdi), %rdx
    000000c6: 	addw	0x8(%rdi), %ax
    000000ca: 	cmpq	%rdx, %rsi
    000000cd: 	je	.Ltmp489 # Offset: 205
    000000cf: 	leaq	0xc(%rdi), %rdx
    000000d3: 	addw	0xa(%rdi), %ax
    000000d7: 	cmpq	%rdx, %rsi
    000000da: 	je	.Ltmp489 # Offset: 218
    000000dc: 	addw	0xc(%rdi), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp485:
    000000e8: 	movl	%edx, %eax
.Ltmp489:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp488:
    000000f0: 	retq # Offset: 240
.Ltmp486:
    000000f1: 	movl	%edx, %eax
    000000f3: 	jmp	.Ltmp490 # Offset: 243
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_iteratorIPssET0_T_S2_S1_"

Binary Function "_Z19accumulate_iteratorIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_" after disassembly {
  Number      : 109
  State       : disassembled
  Address     : 0x7150
  Size        : 0x105
  MaxSize     : 0x110
  Offset      : 0x7150
  Section     : .text
  Orc Section : .local.text._Z19accumulate_iteratorIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0108:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rsi, %rdi
    0000000a: 	movq	%r8, %rsi
    0000000d: 	cmpq	%r8, %rdi
    00000010: 	je	.Ltmp491 # Offset: 16
    00000016: 	leaq	-0x2(%rdi), %rax
    0000001a: 	movq	%r8, %rcx
    0000001d: 	subq	%r8, %rax
    00000020: 	movq	%rax, %r9
    00000023: 	shrq	%r9
    00000026: 	addq	$0x1, %r9
    0000002a: 	cmpq	$0xc, %rax
    0000002e: 	jbe	.Ltmp492 # Offset: 46
    00000034: 	movq	%r9, %rax
    00000037: 	pxor	%xmm0, %xmm0
    0000003b: 	shrq	$0x3, %rax
    0000003f: 	shlq	$0x4, %rax
    00000043: 	addq	%r8, %rax
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp493:
    00000050: 	movdqu	(%rcx), %xmm2
    00000054: 	addq	$0x10, %rcx
    00000058: 	paddw	%xmm2, %xmm0
    0000005c: 	cmpq	%rax, %rcx
    0000005f: 	jne	.Ltmp493 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	psrldq	$0x8, %xmm1
    0000006a: 	paddw	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x4, %xmm1
    00000077: 	paddw	%xmm1, %xmm0
    0000007b: 	movdqa	%xmm0, %xmm1
    0000007f: 	psrldq	$0x2, %xmm1
    00000084: 	paddw	%xmm1, %xmm0
    00000088: 	pextrw	$0x0, %xmm0, %eax
    0000008d: 	addl	%edx, %eax
    0000008f: 	movq	%r9, %rdx
    00000092: 	andq	$-0x8, %rdx
    00000096: 	leaq	(%r8,%rdx,2), %rsi
    0000009a: 	cmpq	%rdx, %r9
    0000009d: 	je	.Ltmp494 # Offset: 157
.Ltmp496:
    0000009f: 	leaq	0x2(%rsi), %rdx
    000000a3: 	addw	(%rsi), %ax
    000000a6: 	cmpq	%rdx, %rdi
    000000a9: 	je	.Ltmp495 # Offset: 169
    000000ab: 	leaq	0x4(%rsi), %rdx
    000000af: 	addw	0x2(%rsi), %ax
    000000b3: 	cmpq	%rdx, %rdi
    000000b6: 	je	.Ltmp495 # Offset: 182
    000000b8: 	leaq	0x6(%rsi), %rdx
    000000bc: 	addw	0x4(%rsi), %ax
    000000c0: 	cmpq	%rdx, %rdi
    000000c3: 	je	.Ltmp495 # Offset: 195
    000000c5: 	leaq	0x8(%rsi), %rdx
    000000c9: 	addw	0x6(%rsi), %ax
    000000cd: 	cmpq	%rdx, %rdi
    000000d0: 	je	.Ltmp495 # Offset: 208
    000000d2: 	leaq	0xa(%rsi), %rdx
    000000d6: 	addw	0x8(%rsi), %ax
    000000da: 	cmpq	%rdx, %rdi
    000000dd: 	je	.Ltmp495 # Offset: 221
    000000df: 	leaq	0xc(%rsi), %rdx
    000000e3: 	addw	0xa(%rsi), %ax
    000000e7: 	cmpq	%rdx, %rdi
    000000ea: 	je	.Ltmp495 # Offset: 234
    000000ec: 	addw	0xc(%rsi), %ax
    000000f0: 	retq # Offset: 240
    000000f1: 	nopl	(%rax) # Size: 7
.Ltmp491:
    000000f8: 	movl	%edx, %eax
.Ltmp495:
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp494:
    00000100: 	retq # Offset: 256
.Ltmp492:
    00000101: 	movl	%edx, %eax
    00000103: 	jmp	.Ltmp496 # Offset: 259
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_iteratorIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_"

Binary Function "_Z20accumulate_iterator2IPssET0_T_S2_S1_" after disassembly {
  Number      : 110
  State       : disassembled
  Address     : 0x7260
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x7260
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator2IPssET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0109:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp497 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp498 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp499:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp499 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp500 # Offset: 130
.Ltmp502:
    00000084: 	leaq	0x1(%rdx), %rsi
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%rsi, %r8
    00000093: 	jle	.Ltmp501 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %rsi
    00000099: 	addw	0x2(%rdi,%rcx), %ax
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp501 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %rsi
    000000a7: 	addw	0x4(%rdi,%rcx), %ax
    000000ac: 	cmpq	%rsi, %r8
    000000af: 	jle	.Ltmp501 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %rsi
    000000b5: 	addw	0x6(%rdi,%rcx), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp501 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %rsi
    000000c3: 	addw	0x8(%rdi,%rcx), %ax
    000000c8: 	cmpq	%rsi, %r8
    000000cb: 	jle	.Ltmp501 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rdi,%rcx), %ax
    000000d6: 	cmpq	%rdx, %r8
    000000d9: 	jle	.Ltmp501 # Offset: 217
    000000db: 	addw	0xc(%rdi,%rcx), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp497:
    000000e8: 	movl	%edx, %eax
.Ltmp501:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp500:
    000000f0: 	retq # Offset: 240
.Ltmp498:
    000000f1: 	movl	%edx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp502 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator2IPssET0_T_S2_S1_"

Binary Function "_Z20accumulate_iterator2IN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_" after disassembly {
  Number      : 111
  State       : disassembled
  Address     : 0x7360
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x7360
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator2IN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0110:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp503 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp504 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp505:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp505 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp506 # Offset: 130
.Ltmp508:
    00000084: 	leaq	0x1(%rdx), %rsi
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%r8, %rsi
    00000093: 	jge	.Ltmp507 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %rsi
    00000099: 	addw	0x2(%rcx,%rdi), %ax
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp507 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %rsi
    000000a7: 	addw	0x4(%rcx,%rdi), %ax
    000000ac: 	cmpq	%rsi, %r8
    000000af: 	jle	.Ltmp507 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %rsi
    000000b5: 	addw	0x6(%rcx,%rdi), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp507 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %rsi
    000000c3: 	addw	0x8(%rcx,%rdi), %ax
    000000c8: 	cmpq	%rsi, %r8
    000000cb: 	jle	.Ltmp507 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rcx,%rdi), %ax
    000000d6: 	cmpq	%rdx, %r8
    000000d9: 	jle	.Ltmp507 # Offset: 217
    000000db: 	addw	0xc(%rcx,%rdi), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp503:
    000000e8: 	movl	%edx, %eax
.Ltmp507:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp506:
    000000f0: 	retq # Offset: 240
.Ltmp504:
    000000f1: 	movl	%edx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp508 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator2IN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_"

Binary Function "_Z20accumulate_iterator3IPssET0_T_S2_S1_" after disassembly {
  Number      : 112
  State       : disassembled
  Address     : 0x7460
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x7460
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator3IPssET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0111:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp509 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp510 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp511:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp511 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp512 # Offset: 130
.Ltmp514:
    00000084: 	leaq	0x1(%rdx), %rsi
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%rsi, %r8
    00000093: 	jle	.Ltmp513 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %rsi
    00000099: 	addw	0x2(%rdi,%rcx), %ax
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp513 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %rsi
    000000a7: 	addw	0x4(%rdi,%rcx), %ax
    000000ac: 	cmpq	%rsi, %r8
    000000af: 	jle	.Ltmp513 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %rsi
    000000b5: 	addw	0x6(%rdi,%rcx), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp513 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %rsi
    000000c3: 	addw	0x8(%rdi,%rcx), %ax
    000000c8: 	cmpq	%rsi, %r8
    000000cb: 	jle	.Ltmp513 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rdi,%rcx), %ax
    000000d6: 	cmpq	%rdx, %r8
    000000d9: 	jle	.Ltmp513 # Offset: 217
    000000db: 	addw	0xc(%rdi,%rcx), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp509:
    000000e8: 	movl	%edx, %eax
.Ltmp513:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp512:
    000000f0: 	retq # Offset: 240
.Ltmp510:
    000000f1: 	movl	%edx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp514 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator3IPssET0_T_S2_S1_"

Binary Function "_Z20accumulate_iterator3IN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_" after disassembly {
  Number      : 113
  State       : disassembled
  Address     : 0x7560
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x7560
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator3IN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0112:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp515 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp516 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp517:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp517 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp518 # Offset: 130
.Ltmp520:
    00000084: 	leaq	0x1(%rdx), %rsi
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%r8, %rsi
    00000093: 	jge	.Ltmp519 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %rsi
    00000099: 	addw	0x2(%rcx,%rdi), %ax
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp519 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %rsi
    000000a7: 	addw	0x4(%rcx,%rdi), %ax
    000000ac: 	cmpq	%rsi, %r8
    000000af: 	jle	.Ltmp519 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %rsi
    000000b5: 	addw	0x6(%rcx,%rdi), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp519 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %rsi
    000000c3: 	addw	0x8(%rcx,%rdi), %ax
    000000c8: 	cmpq	%rsi, %r8
    000000cb: 	jle	.Ltmp519 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rcx,%rdi), %ax
    000000d6: 	cmpq	%rdx, %r8
    000000d9: 	jle	.Ltmp519 # Offset: 217
    000000db: 	addw	0xc(%rcx,%rdi), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp515:
    000000e8: 	movl	%edx, %eax
.Ltmp519:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp518:
    000000f0: 	retq # Offset: 240
.Ltmp516:
    000000f1: 	movl	%edx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp520 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator3IN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_"

Binary Function "_Z20accumulate_iterator4IPssET0_T_S2_S1_" after disassembly {
  Number      : 114
  State       : disassembled
  Address     : 0x7660
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x7660
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator4IPssET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0113:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp521 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp522 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp523:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp523 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp524 # Offset: 130
.Ltmp526:
    00000084: 	leaq	0x1(%rdx), %rsi
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%rsi, %r8
    00000093: 	jle	.Ltmp525 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %rsi
    00000099: 	addw	0x2(%rdi,%rcx), %ax
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp525 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %rsi
    000000a7: 	addw	0x4(%rdi,%rcx), %ax
    000000ac: 	cmpq	%rsi, %r8
    000000af: 	jle	.Ltmp525 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %rsi
    000000b5: 	addw	0x6(%rdi,%rcx), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp525 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %rsi
    000000c3: 	addw	0x8(%rdi,%rcx), %ax
    000000c8: 	cmpq	%rsi, %r8
    000000cb: 	jle	.Ltmp525 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rdi,%rcx), %ax
    000000d6: 	cmpq	%rdx, %r8
    000000d9: 	jle	.Ltmp525 # Offset: 217
    000000db: 	addw	0xc(%rdi,%rcx), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp521:
    000000e8: 	movl	%edx, %eax
.Ltmp525:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp524:
    000000f0: 	retq # Offset: 240
.Ltmp522:
    000000f1: 	movl	%edx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp526 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator4IPssET0_T_S2_S1_"

Binary Function "_Z20accumulate_iterator4IN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_" after disassembly {
  Number      : 115
  State       : disassembled
  Address     : 0x7760
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x7760
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator4IN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0114:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp527 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp528 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp529:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp529 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp530 # Offset: 130
.Ltmp532:
    00000084: 	leaq	0x1(%rdx), %rsi
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%r8, %rsi
    00000093: 	jge	.Ltmp531 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %rsi
    00000099: 	addw	0x2(%rcx,%rdi), %ax
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp531 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %rsi
    000000a7: 	addw	0x4(%rcx,%rdi), %ax
    000000ac: 	cmpq	%rsi, %r8
    000000af: 	jle	.Ltmp531 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %rsi
    000000b5: 	addw	0x6(%rcx,%rdi), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp531 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %rsi
    000000c3: 	addw	0x8(%rcx,%rdi), %ax
    000000c8: 	cmpq	%rsi, %r8
    000000cb: 	jle	.Ltmp531 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rcx,%rdi), %ax
    000000d6: 	cmpq	%rdx, %r8
    000000d9: 	jle	.Ltmp531 # Offset: 217
    000000db: 	addw	0xc(%rcx,%rdi), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp527:
    000000e8: 	movl	%edx, %eax
.Ltmp531:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp530:
    000000f0: 	retq # Offset: 240
.Ltmp528:
    000000f1: 	movl	%edx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp532 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator4IN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_"

Binary Function "_Z20accumulate_iterator5IPssET0_T_S2_S1_" after disassembly {
  Number      : 116
  State       : disassembled
  Address     : 0x7860
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x7860
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator5IPssET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0115:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp533 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp534 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp535:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp535 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp536 # Offset: 130
.Ltmp538:
    00000088: 	leaq	0x1(%rdx), %rsi
    0000008c: 	leaq	0xc8(%rdx,%rdx), %rcx
    00000094: 	addw	(%rdi,%rdx,2), %ax
    00000098: 	cmpq	%rsi, %r8
    0000009b: 	jle	.Ltmp537 # Offset: 155
    0000009d: 	leaq	0x2(%rdx), %rsi
    000000a1: 	addw	-0xc6(%rdi,%rcx), %ax
    000000a9: 	cmpq	%rsi, %r8
    000000ac: 	jle	.Ltmp537 # Offset: 172
    000000ae: 	leaq	0x3(%rdx), %rsi
    000000b2: 	addw	-0xc4(%rdi,%rcx), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp537 # Offset: 189
    000000bf: 	leaq	0x4(%rdx), %rsi
    000000c3: 	addw	-0xc2(%rdi,%rcx), %ax
    000000cb: 	cmpq	%rsi, %r8
    000000ce: 	jle	.Ltmp537 # Offset: 206
    000000d0: 	leaq	0x5(%rdx), %rsi
    000000d4: 	addw	-0xc0(%rdi,%rcx), %ax
    000000dc: 	cmpq	%rsi, %r8
    000000df: 	jle	.Ltmp537 # Offset: 223
    000000e1: 	addq	$0x6, %rdx
    000000e5: 	addw	-0xbe(%rdi,%rcx), %ax
    000000ed: 	cmpq	%rdx, %r8
    000000f0: 	jle	.Ltmp537 # Offset: 240
    000000f2: 	addw	-0xbc(%rdi,%rcx), %ax
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp533:
    00000100: 	movl	%edx, %eax
.Ltmp537:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp536:
    00000108: 	retq # Offset: 264
.Ltmp534:
    00000109: 	movl	%edx, %eax
    0000010b: 	xorl	%edx, %edx
    0000010d: 	jmp	.Ltmp538 # Offset: 269
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator5IPssET0_T_S2_S1_"

Binary Function "_Z20accumulate_iterator5IN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_" after disassembly {
  Number      : 117
  State       : disassembled
  Address     : 0x7980
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x7980
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator5IN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0116:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp539 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp540 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp541:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp541 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp542 # Offset: 130
.Ltmp544:
    00000084: 	leaq	0x1(%rdx), %rsi
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%r8, %rsi
    00000093: 	jge	.Ltmp543 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %rsi
    00000099: 	addw	0x2(%rcx,%rdi), %ax
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp543 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %rsi
    000000a7: 	addw	0x4(%rcx,%rdi), %ax
    000000ac: 	cmpq	%rsi, %r8
    000000af: 	jle	.Ltmp543 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %rsi
    000000b5: 	addw	0x6(%rcx,%rdi), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp543 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %rsi
    000000c3: 	addw	0x8(%rcx,%rdi), %ax
    000000c8: 	cmpq	%rsi, %r8
    000000cb: 	jle	.Ltmp543 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rcx,%rdi), %ax
    000000d6: 	cmpq	%rdx, %r8
    000000d9: 	jle	.Ltmp543 # Offset: 217
    000000db: 	addw	0xc(%rcx,%rdi), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp539:
    000000e8: 	movl	%edx, %eax
.Ltmp543:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp542:
    000000f0: 	retq # Offset: 240
.Ltmp540:
    000000f1: 	movl	%edx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp544 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator5IN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_"

Binary Function "_Z20accumulate_iterator6IPssET0_T_S2_S1_" after disassembly {
  Number      : 118
  State       : disassembled
  Address     : 0x7a80
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x7a80
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator6IPssET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0117:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp545 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp546 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp547:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp547 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp548 # Offset: 130
.Ltmp550:
    00000088: 	leaq	0x1(%rdx), %rsi
    0000008c: 	leaq	0x190(%rdx,%rdx), %rcx
    00000094: 	addw	(%rdi,%rdx,2), %ax
    00000098: 	cmpq	%rsi, %r8
    0000009b: 	jle	.Ltmp549 # Offset: 155
    0000009d: 	leaq	0x2(%rdx), %rsi
    000000a1: 	addw	-0x18e(%rdi,%rcx), %ax
    000000a9: 	cmpq	%rsi, %r8
    000000ac: 	jle	.Ltmp549 # Offset: 172
    000000ae: 	leaq	0x3(%rdx), %rsi
    000000b2: 	addw	-0x18c(%rdi,%rcx), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp549 # Offset: 189
    000000bf: 	leaq	0x4(%rdx), %rsi
    000000c3: 	addw	-0x18a(%rdi,%rcx), %ax
    000000cb: 	cmpq	%rsi, %r8
    000000ce: 	jle	.Ltmp549 # Offset: 206
    000000d0: 	leaq	0x5(%rdx), %rsi
    000000d4: 	addw	-0x188(%rdi,%rcx), %ax
    000000dc: 	cmpq	%rsi, %r8
    000000df: 	jle	.Ltmp549 # Offset: 223
    000000e1: 	addq	$0x6, %rdx
    000000e5: 	addw	-0x186(%rdi,%rcx), %ax
    000000ed: 	cmpq	%rdx, %r8
    000000f0: 	jle	.Ltmp549 # Offset: 240
    000000f2: 	addw	-0x184(%rdi,%rcx), %ax
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp545:
    00000100: 	movl	%edx, %eax
.Ltmp549:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp548:
    00000108: 	retq # Offset: 264
.Ltmp546:
    00000109: 	movl	%edx, %eax
    0000010b: 	xorl	%edx, %edx
    0000010d: 	jmp	.Ltmp550 # Offset: 269
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator6IPssET0_T_S2_S1_"

Binary Function "_Z20accumulate_iterator6IN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_" after disassembly {
  Number      : 119
  State       : disassembled
  Address     : 0x7ba0
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x7ba0
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator6IN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0118:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %r8
    0000000a: 	sarq	%r8
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jle	.Ltmp551 # Offset: 16
    00000016: 	cmpq	$0xe, %rsi
    0000001a: 	jle	.Ltmp552 # Offset: 26
    00000020: 	movq	%r8, %rax
    00000023: 	movq	%rdi, %rcx
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	shrq	$0x3, %rax
    0000002e: 	shlq	$0x4, %rax
    00000032: 	addq	%rdi, %rax
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp553:
    00000038: 	movdqu	(%rcx), %xmm2
    0000003c: 	addq	$0x10, %rcx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rcx
    00000047: 	jne	.Ltmp553 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	psrldq	$0x8, %xmm1
    00000052: 	paddw	%xmm1, %xmm0
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	paddw	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	paddw	%xmm1, %xmm0
    00000070: 	pextrw	$0x0, %xmm0, %eax
    00000075: 	addl	%edx, %eax
    00000077: 	movq	%r8, %rdx
    0000007a: 	andq	$-0x8, %rdx
    0000007e: 	testb	$0x7, %r8b
    00000082: 	je	.Ltmp554 # Offset: 130
.Ltmp556:
    00000088: 	leaq	0x1(%rdx), %rsi
    0000008c: 	leaq	0x190(%rdx,%rdx), %rcx
    00000094: 	addw	(%rdi,%rdx,2), %ax
    00000098: 	cmpq	%r8, %rsi
    0000009b: 	jge	.Ltmp555 # Offset: 155
    0000009d: 	leaq	0x2(%rdx), %rsi
    000000a1: 	addw	-0x18e(%rcx,%rdi), %ax
    000000a9: 	cmpq	%rsi, %r8
    000000ac: 	jle	.Ltmp555 # Offset: 172
    000000ae: 	leaq	0x3(%rdx), %rsi
    000000b2: 	addw	-0x18c(%rcx,%rdi), %ax
    000000ba: 	cmpq	%rsi, %r8
    000000bd: 	jle	.Ltmp555 # Offset: 189
    000000bf: 	leaq	0x4(%rdx), %rsi
    000000c3: 	addw	-0x18a(%rcx,%rdi), %ax
    000000cb: 	cmpq	%rsi, %r8
    000000ce: 	jle	.Ltmp555 # Offset: 206
    000000d0: 	leaq	0x5(%rdx), %rsi
    000000d4: 	addw	-0x188(%rcx,%rdi), %ax
    000000dc: 	cmpq	%rsi, %r8
    000000df: 	jle	.Ltmp555 # Offset: 223
    000000e1: 	addq	$0x6, %rdx
    000000e5: 	addw	-0x186(%rcx,%rdi), %ax
    000000ed: 	cmpq	%rdx, %r8
    000000f0: 	jle	.Ltmp555 # Offset: 240
    000000f2: 	addw	-0x184(%rcx,%rdi), %ax
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp551:
    00000100: 	movl	%edx, %eax
.Ltmp555:
    00000102: 	retq # Offset: 258
    00000103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp554:
    00000108: 	retq # Offset: 264
.Ltmp552:
    00000109: 	movl	%edx, %eax
    0000010b: 	xorl	%edx, %edx
    0000010d: 	jmp	.Ltmp556 # Offset: 269
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator6IN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_"

Binary Function "_Z20accumulate_iterator7IPssET0_T_S2_S1_" after disassembly {
  Number      : 120
  State       : disassembled
  Address     : 0x7cc0
  Size        : 0xf5
  MaxSize     : 0x100
  Offset      : 0x7cc0
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator7IPssET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0119:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp557 # Offset: 7
    0000000d: 	leaq	-0x2(%rsi), %rax
    00000011: 	movq	%rdi, %rcx
    00000014: 	subq	%rdi, %rax
    00000017: 	movq	%rax, %r8
    0000001a: 	shrq	%r8
    0000001d: 	addq	$0x1, %r8
    00000021: 	cmpq	$0xc, %rax
    00000025: 	jbe	.Ltmp558 # Offset: 37
    0000002b: 	movq	%r8, %rax
    0000002e: 	pxor	%xmm0, %xmm0
    00000032: 	shrq	$0x3, %rax
    00000036: 	shlq	$0x4, %rax
    0000003a: 	addq	%rdi, %rax
    0000003d: 	nopl	(%rax) # Size: 3
.Ltmp559:
    00000040: 	movdqu	(%rcx), %xmm2
    00000044: 	addq	$0x10, %rcx
    00000048: 	paddw	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rcx
    0000004f: 	jne	.Ltmp559 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	psrldq	$0x8, %xmm1
    0000005a: 	paddw	%xmm1, %xmm0
    0000005e: 	movdqa	%xmm0, %xmm1
    00000062: 	psrldq	$0x4, %xmm1
    00000067: 	paddw	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	psrldq	$0x2, %xmm1
    00000074: 	paddw	%xmm1, %xmm0
    00000078: 	pextrw	$0x0, %xmm0, %eax
    0000007d: 	addl	%edx, %eax
    0000007f: 	movq	%r8, %rdx
    00000082: 	andq	$-0x8, %rdx
    00000086: 	leaq	(%rdi,%rdx,2), %rdi
    0000008a: 	cmpq	%rdx, %r8
    0000008d: 	je	.Ltmp560 # Offset: 141
.Ltmp562:
    0000008f: 	leaq	0x2(%rdi), %rdx
    00000093: 	addw	(%rdi), %ax
    00000096: 	cmpq	%rdx, %rsi
    00000099: 	je	.Ltmp561 # Offset: 153
    0000009b: 	leaq	0x4(%rdi), %rdx
    0000009f: 	addw	0x2(%rdi), %ax
    000000a3: 	cmpq	%rdx, %rsi
    000000a6: 	je	.Ltmp561 # Offset: 166
    000000a8: 	leaq	0x6(%rdi), %rdx
    000000ac: 	addw	0x4(%rdi), %ax
    000000b0: 	cmpq	%rdx, %rsi
    000000b3: 	je	.Ltmp561 # Offset: 179
    000000b5: 	leaq	0x8(%rdi), %rdx
    000000b9: 	addw	0x6(%rdi), %ax
    000000bd: 	cmpq	%rdx, %rsi
    000000c0: 	je	.Ltmp561 # Offset: 192
    000000c2: 	leaq	0xa(%rdi), %rdx
    000000c6: 	addw	0x8(%rdi), %ax
    000000ca: 	cmpq	%rdx, %rsi
    000000cd: 	je	.Ltmp561 # Offset: 205
    000000cf: 	leaq	0xc(%rdi), %rdx
    000000d3: 	addw	0xa(%rdi), %ax
    000000d7: 	cmpq	%rdx, %rsi
    000000da: 	je	.Ltmp561 # Offset: 218
    000000dc: 	addw	0xc(%rdi), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp557:
    000000e8: 	movl	%edx, %eax
.Ltmp561:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp560:
    000000f0: 	retq # Offset: 240
.Ltmp558:
    000000f1: 	movl	%edx, %eax
    000000f3: 	jmp	.Ltmp562 # Offset: 243
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator7IPssET0_T_S2_S1_"

Binary Function "_Z20accumulate_iterator7IN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_" after disassembly {
  Number      : 121
  State       : disassembled
  Address     : 0x7dc0
  Size        : 0x105
  MaxSize     : 0x110
  Offset      : 0x7dc0
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator7IN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0120:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rsi, %rdi
    0000000a: 	movq	%r8, %rsi
    0000000d: 	cmpq	%r8, %rdi
    00000010: 	je	.Ltmp563 # Offset: 16
    00000016: 	leaq	-0x2(%rdi), %rax
    0000001a: 	movq	%r8, %rcx
    0000001d: 	subq	%r8, %rax
    00000020: 	movq	%rax, %r9
    00000023: 	shrq	%r9
    00000026: 	addq	$0x1, %r9
    0000002a: 	cmpq	$0xc, %rax
    0000002e: 	jbe	.Ltmp564 # Offset: 46
    00000034: 	movq	%r9, %rax
    00000037: 	pxor	%xmm0, %xmm0
    0000003b: 	shrq	$0x3, %rax
    0000003f: 	shlq	$0x4, %rax
    00000043: 	addq	%r8, %rax
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp565:
    00000050: 	movdqu	(%rcx), %xmm2
    00000054: 	addq	$0x10, %rcx
    00000058: 	paddw	%xmm2, %xmm0
    0000005c: 	cmpq	%rax, %rcx
    0000005f: 	jne	.Ltmp565 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	psrldq	$0x8, %xmm1
    0000006a: 	paddw	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x4, %xmm1
    00000077: 	paddw	%xmm1, %xmm0
    0000007b: 	movdqa	%xmm0, %xmm1
    0000007f: 	psrldq	$0x2, %xmm1
    00000084: 	paddw	%xmm1, %xmm0
    00000088: 	pextrw	$0x0, %xmm0, %eax
    0000008d: 	addl	%edx, %eax
    0000008f: 	movq	%r9, %rdx
    00000092: 	andq	$-0x8, %rdx
    00000096: 	leaq	(%r8,%rdx,2), %rsi
    0000009a: 	cmpq	%rdx, %r9
    0000009d: 	je	.Ltmp566 # Offset: 157
.Ltmp568:
    0000009f: 	leaq	0x2(%rsi), %rdx
    000000a3: 	addw	(%rsi), %ax
    000000a6: 	cmpq	%rdx, %rdi
    000000a9: 	je	.Ltmp567 # Offset: 169
    000000ab: 	leaq	0x4(%rsi), %rdx
    000000af: 	addw	0x2(%rsi), %ax
    000000b3: 	cmpq	%rdx, %rdi
    000000b6: 	je	.Ltmp567 # Offset: 182
    000000b8: 	leaq	0x6(%rsi), %rdx
    000000bc: 	addw	0x4(%rsi), %ax
    000000c0: 	cmpq	%rdx, %rdi
    000000c3: 	je	.Ltmp567 # Offset: 195
    000000c5: 	leaq	0x8(%rsi), %rdx
    000000c9: 	addw	0x6(%rsi), %ax
    000000cd: 	cmpq	%rdx, %rdi
    000000d0: 	je	.Ltmp567 # Offset: 208
    000000d2: 	leaq	0xa(%rsi), %rdx
    000000d6: 	addw	0x8(%rsi), %ax
    000000da: 	cmpq	%rdx, %rdi
    000000dd: 	je	.Ltmp567 # Offset: 221
    000000df: 	leaq	0xc(%rsi), %rdx
    000000e3: 	addw	0xa(%rsi), %ax
    000000e7: 	cmpq	%rdx, %rdi
    000000ea: 	je	.Ltmp567 # Offset: 234
    000000ec: 	addw	0xc(%rsi), %ax
    000000f0: 	retq # Offset: 240
    000000f1: 	nopl	(%rax) # Size: 7
.Ltmp563:
    000000f8: 	movl	%edx, %eax
.Ltmp567:
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp566:
    00000100: 	retq # Offset: 256
.Ltmp564:
    00000101: 	movl	%edx, %eax
    00000103: 	jmp	.Ltmp568 # Offset: 259
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator7IN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_"

Binary Function "_Z20accumulate_iterator8IPssET0_T_S2_S1_" after disassembly {
  Number      : 122
  State       : disassembled
  Address     : 0x7ed0
  Size        : 0xe1
  MaxSize     : 0xf0
  Offset      : 0x7ed0
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator8IPssET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0121:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	cmpq	%rsi, %rdi
    00000009: 	je	.Ltmp569 # Offset: 9
    0000000f: 	leaq	-0x2(%rsi), %rdx
    00000013: 	movq	%rdi, %rcx
    00000016: 	subq	%rdi, %rdx
    00000019: 	movq	%rdx, %r8
    0000001c: 	shrq	%r8
    0000001f: 	addq	$0x1, %r8
    00000023: 	cmpq	$0xc, %rdx
    00000027: 	jbe	.Ltmp570 # Offset: 39
    00000029: 	movq	%r8, %rdx
    0000002c: 	pxor	%xmm0, %xmm0
    00000030: 	shrq	$0x3, %rdx
    00000034: 	shlq	$0x4, %rdx
    00000038: 	addq	%rdi, %rdx
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp571:
    00000040: 	movdqu	(%rcx), %xmm2
    00000044: 	addq	$0x10, %rcx
    00000048: 	paddw	%xmm2, %xmm0
    0000004c: 	cmpq	%rdx, %rcx
    0000004f: 	jne	.Ltmp571 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	psrldq	$0x8, %xmm1
    0000005a: 	paddw	%xmm1, %xmm0
    0000005e: 	movdqa	%xmm0, %xmm1
    00000062: 	psrldq	$0x4, %xmm1
    00000067: 	paddw	%xmm1, %xmm0
    0000006b: 	movdqa	%xmm0, %xmm1
    0000006f: 	psrldq	$0x2, %xmm1
    00000074: 	paddw	%xmm1, %xmm0
    00000078: 	pextrw	$0x0, %xmm0, %edx
    0000007d: 	addl	%edx, %eax
    0000007f: 	movq	%r8, %rdx
    00000082: 	andq	$-0x8, %rdx
    00000086: 	leaq	(%rdi,%rdx,2), %rdi
    0000008a: 	cmpq	%rdx, %r8
    0000008d: 	je	.Ltmp569 # Offset: 141
.Ltmp570:
    0000008f: 	leaq	0x2(%rdi), %rdx
    00000093: 	addw	(%rdi), %ax
    00000096: 	cmpq	%rdx, %rsi
    00000099: 	je	.Ltmp569 # Offset: 153
    0000009b: 	leaq	0x4(%rdi), %rdx
    0000009f: 	addw	0x2(%rdi), %ax
    000000a3: 	cmpq	%rdx, %rsi
    000000a6: 	je	.Ltmp569 # Offset: 166
    000000a8: 	leaq	0x6(%rdi), %rdx
    000000ac: 	addw	0x4(%rdi), %ax
    000000b0: 	cmpq	%rdx, %rsi
    000000b3: 	je	.Ltmp569 # Offset: 179
    000000b5: 	leaq	0x8(%rdi), %rdx
    000000b9: 	addw	0x6(%rdi), %ax
    000000bd: 	cmpq	%rdx, %rsi
    000000c0: 	je	.Ltmp569 # Offset: 192
    000000c2: 	leaq	0xa(%rdi), %rdx
    000000c6: 	addw	0x8(%rdi), %ax
    000000ca: 	cmpq	%rdx, %rsi
    000000cd: 	je	.Ltmp569 # Offset: 205
    000000cf: 	leaq	0xc(%rdi), %rdx
    000000d3: 	addw	0xa(%rdi), %ax
    000000d7: 	cmpq	%rdx, %rsi
    000000da: 	je	.Ltmp569 # Offset: 218
    000000dc: 	addw	0xc(%rdi), %ax
.Ltmp569:
    000000e0: 	retq # Offset: 224
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator8IPssET0_T_S2_S1_"

Binary Function "_Z20accumulate_iterator8IN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_" after disassembly {
  Number      : 123
  State       : disassembled
  Address     : 0x7fc0
  Size        : 0xe1
  MaxSize     : 0xf0
  Offset      : 0x7fc0
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator8IN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0122:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	movq	%rdi, %rdx
    00000009: 	cmpq	%rsi, %rdi
    0000000c: 	je	.Ltmp572 # Offset: 12
    00000012: 	leaq	-0x2(%rsi), %r9
    00000016: 	movq	%rdi, %rcx
    00000019: 	subq	%rdi, %r9
    0000001c: 	movq	%r9, %r8
    0000001f: 	shrq	%r8
    00000022: 	addq	$0x1, %r8
    00000026: 	cmpq	$0xc, %r9
    0000002a: 	jbe	.Ltmp573 # Offset: 42
    0000002c: 	movq	%r8, %rdx
    0000002f: 	pxor	%xmm0, %xmm0
    00000033: 	shrq	$0x3, %rdx
    00000037: 	shlq	$0x4, %rdx
    0000003b: 	addq	%rdi, %rdx
    0000003e: 	nop # Size: 2
.Ltmp574:
    00000040: 	movdqu	(%rcx), %xmm2
    00000044: 	addq	$0x10, %rcx
    00000048: 	paddw	%xmm2, %xmm0
    0000004c: 	cmpq	%rdx, %rcx
    0000004f: 	jne	.Ltmp574 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movq	%r8, %rcx
    00000058: 	psrldq	$0x8, %xmm1
    0000005d: 	andq	$-0x8, %rcx
    00000061: 	paddw	%xmm1, %xmm0
    00000065: 	movdqa	%xmm0, %xmm1
    00000069: 	psrldq	$0x4, %xmm1
    0000006e: 	paddw	%xmm1, %xmm0
    00000072: 	movdqa	%xmm0, %xmm1
    00000076: 	psrldq	$0x2, %xmm1
    0000007b: 	paddw	%xmm1, %xmm0
    0000007f: 	pextrw	$0x0, %xmm0, %edx
    00000084: 	addl	%edx, %eax
    00000086: 	leaq	(%rdi,%rcx,2), %rdx
    0000008a: 	cmpq	%rcx, %r8
    0000008d: 	je	.Ltmp572 # Offset: 141
.Ltmp573:
    0000008f: 	leaq	0x2(%rdx), %rcx
    00000093: 	addw	(%rdx), %ax
    00000096: 	cmpq	%rcx, %rsi
    00000099: 	je	.Ltmp572 # Offset: 153
    0000009b: 	leaq	0x4(%rdx), %rcx
    0000009f: 	addw	0x2(%rdx), %ax
    000000a3: 	cmpq	%rcx, %rsi
    000000a6: 	je	.Ltmp572 # Offset: 166
    000000a8: 	leaq	0x6(%rdx), %rcx
    000000ac: 	addw	0x4(%rdx), %ax
    000000b0: 	cmpq	%rcx, %rsi
    000000b3: 	je	.Ltmp572 # Offset: 179
    000000b5: 	leaq	0x8(%rdx), %rcx
    000000b9: 	addw	0x6(%rdx), %ax
    000000bd: 	cmpq	%rcx, %rsi
    000000c0: 	je	.Ltmp572 # Offset: 192
    000000c2: 	leaq	0xa(%rdx), %rcx
    000000c6: 	addw	0x8(%rdx), %ax
    000000ca: 	cmpq	%rcx, %rsi
    000000cd: 	je	.Ltmp572 # Offset: 205
    000000cf: 	leaq	0xc(%rdx), %rcx
    000000d3: 	addw	0xa(%rdx), %ax
    000000d7: 	cmpq	%rcx, %rsi
    000000da: 	je	.Ltmp572 # Offset: 218
    000000dc: 	addw	0xc(%rdx), %ax
.Ltmp572:
    000000e0: 	retq # Offset: 224
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator8IN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_"

Binary Function "_Z19accumulate_array2D1IsET_PKS0_mmS0_" after disassembly {
  Number      : 124
  State       : disassembled
  Address     : 0x80b0
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x80b0
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array2D1IsET_PKS0_mmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0123:
    00000000: 	endbr64
    00000004: 	imulq	%rdx, %rsi
    00000008: 	testq	%rsi, %rsi
    0000000b: 	je	.Ltmp575 # Offset: 11
    00000011: 	leaq	-0x1(%rsi), %rax
    00000015: 	cmpq	$0x6, %rax
    00000019: 	jbe	.Ltmp576 # Offset: 25
    0000001f: 	movq	%rsi, %rax
    00000022: 	movq	%rdi, %rdx
    00000025: 	pxor	%xmm0, %xmm0
    00000029: 	shrq	$0x3, %rax
    0000002d: 	shlq	$0x4, %rax
    00000031: 	addq	%rdi, %rax
    00000034: 	nopl	(%rax) # Size: 4
.Ltmp577:
    00000038: 	movdqu	(%rdx), %xmm2
    0000003c: 	addq	$0x10, %rdx
    00000040: 	paddw	%xmm2, %xmm0
    00000044: 	cmpq	%rax, %rdx
    00000047: 	jne	.Ltmp577 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movq	%rsi, %rdx
    00000050: 	psrldq	$0x8, %xmm1
    00000055: 	andq	$-0x8, %rdx
    00000059: 	paddw	%xmm1, %xmm0
    0000005d: 	movdqa	%xmm0, %xmm1
    00000061: 	psrldq	$0x4, %xmm1
    00000066: 	paddw	%xmm1, %xmm0
    0000006a: 	movdqa	%xmm0, %xmm1
    0000006e: 	psrldq	$0x2, %xmm1
    00000073: 	paddw	%xmm1, %xmm0
    00000077: 	pextrw	$0x0, %xmm0, %eax
    0000007c: 	addl	%ecx, %eax
    0000007e: 	testb	$0x7, %sil
    00000082: 	je	.Ltmp578 # Offset: 130
.Ltmp580:
    00000084: 	leaq	0x1(%rdx), %r8
    00000088: 	leaq	(%rdx,%rdx), %rcx
    0000008c: 	addw	(%rdi,%rdx,2), %ax
    00000090: 	cmpq	%r8, %rsi
    00000093: 	jbe	.Ltmp579 # Offset: 147
    00000095: 	leaq	0x2(%rdx), %r8
    00000099: 	addw	0x2(%rdi,%rcx), %ax
    0000009e: 	cmpq	%r8, %rsi
    000000a1: 	jbe	.Ltmp579 # Offset: 161
    000000a3: 	leaq	0x3(%rdx), %r8
    000000a7: 	addw	0x4(%rdi,%rcx), %ax
    000000ac: 	cmpq	%r8, %rsi
    000000af: 	jbe	.Ltmp579 # Offset: 175
    000000b1: 	leaq	0x4(%rdx), %r8
    000000b5: 	addw	0x6(%rdi,%rcx), %ax
    000000ba: 	cmpq	%r8, %rsi
    000000bd: 	jbe	.Ltmp579 # Offset: 189
    000000bf: 	leaq	0x5(%rdx), %r8
    000000c3: 	addw	0x8(%rdi,%rcx), %ax
    000000c8: 	cmpq	%r8, %rsi
    000000cb: 	jbe	.Ltmp579 # Offset: 203
    000000cd: 	addq	$0x6, %rdx
    000000d1: 	addw	0xa(%rdi,%rcx), %ax
    000000d6: 	cmpq	%rdx, %rsi
    000000d9: 	jbe	.Ltmp579 # Offset: 217
    000000db: 	addw	0xc(%rdi,%rcx), %ax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp575:
    000000e8: 	movl	%ecx, %eax
.Ltmp579:
    000000ea: 	retq # Offset: 234
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp578:
    000000f0: 	retq # Offset: 240
.Ltmp576:
    000000f1: 	movl	%ecx, %eax
    000000f3: 	xorl	%edx, %edx
    000000f5: 	jmp	.Ltmp580 # Offset: 245
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array2D1IsET_PKS0_mmS0_"

Binary Function "_Z19accumulate_array2D2IsET_PKS0_mmS0_" after disassembly {
  Number      : 125
  State       : disassembled
  Address     : 0x81b0
  Size        : 0x13e
  MaxSize     : 0x140
  Offset      : 0x81b0
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array2D2IsET_PKS0_mmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0124:
    00000000: 	endbr64
    00000004: 	movl	%ecx, %r8d
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp581 # Offset: 10
    00000010: 	pushq	%r13
    00000012: 	movq	%rdx, %r10
    00000015: 	movq	%rsi, %r11
    00000018: 	xorl	%ecx, %ecx
    0000001a: 	pushq	%r12
    0000001c: 	movq	%rdi, %rsi
    0000001f: 	leaq	-0x1(%rdx), %r12
    00000023: 	andq	$-0x8, %r10
    00000027: 	pushq	%rbp
    00000028: 	xorl	%r9d, %r9d
    0000002b: 	leaq	(%rdx,%rdx), %rbp
    0000002f: 	pushq	%rbx
    00000030: 	movq	%rdx, %rbx
    00000033: 	shrq	$0x3, %rbx
    00000037: 	shlq	$0x4, %rbx
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp585:
    00000040: 	testq	%rdx, %rdx
    00000043: 	je	.Ltmp582 # Offset: 67
    00000049: 	cmpq	$0x6, %r12
    0000004d: 	jbe	.Ltmp583 # Offset: 77
    00000053: 	leaq	(%rbx,%rsi), %r13
    00000057: 	movq	%rsi, %rax
    0000005a: 	pxor	%xmm0, %xmm0
    0000005e: 	nop # Size: 2
.Ltmp584:
    00000060: 	movdqu	(%rax), %xmm2
    00000064: 	addq	$0x10, %rax
    00000068: 	paddw	%xmm2, %xmm0
    0000006c: 	cmpq	%r13, %rax
    0000006f: 	jne	.Ltmp584 # Offset: 111
    00000071: 	movdqa	%xmm0, %xmm1
    00000075: 	psrldq	$0x8, %xmm1
    0000007a: 	paddw	%xmm1, %xmm0
    0000007e: 	movdqa	%xmm0, %xmm1
    00000082: 	psrldq	$0x4, %xmm1
    00000087: 	paddw	%xmm1, %xmm0
    0000008b: 	movdqa	%xmm0, %xmm1
    0000008f: 	psrldq	$0x2, %xmm1
    00000094: 	paddw	%xmm1, %xmm0
    00000098: 	pextrw	$0x0, %xmm0, %eax
    0000009d: 	addl	%eax, %r8d
    000000a0: 	cmpq	%r10, %rdx
    000000a3: 	je	.Ltmp582 # Offset: 163
    000000a5: 	movq	%r10, %rax
.Ltmp586:
    000000a8: 	leaq	(%rax,%rcx), %r13
    000000ac: 	addw	(%rdi,%r13,2), %r8w
    000000b1: 	leaq	0x1(%rax), %r13
    000000b5: 	cmpq	%r13, %rdx
    000000b8: 	jbe	.Ltmp582 # Offset: 184
    000000ba: 	addq	%rcx, %r13
    000000bd: 	addw	(%rdi,%r13,2), %r8w
    000000c2: 	leaq	0x2(%rax), %r13
    000000c6: 	cmpq	%r13, %rdx
    000000c9: 	jbe	.Ltmp582 # Offset: 201
    000000cb: 	addq	%rcx, %r13
    000000ce: 	addw	(%rdi,%r13,2), %r8w
    000000d3: 	leaq	0x3(%rax), %r13
    000000d7: 	cmpq	%r13, %rdx
    000000da: 	jbe	.Ltmp582 # Offset: 218
    000000dc: 	addq	%rcx, %r13
    000000df: 	addw	(%rdi,%r13,2), %r8w
    000000e4: 	leaq	0x4(%rax), %r13
    000000e8: 	cmpq	%r13, %rdx
    000000eb: 	jbe	.Ltmp582 # Offset: 235
    000000ed: 	addq	%rcx, %r13
    000000f0: 	addw	(%rdi,%r13,2), %r8w
    000000f5: 	leaq	0x5(%rax), %r13
    000000f9: 	cmpq	%r13, %rdx
    000000fc: 	jbe	.Ltmp582 # Offset: 252
    000000fe: 	addq	%rcx, %r13
    00000101: 	addq	$0x6, %rax
    00000105: 	addw	(%rdi,%r13,2), %r8w
    0000010a: 	cmpq	%rax, %rdx
    0000010d: 	jbe	.Ltmp582 # Offset: 269
    0000010f: 	addq	%rcx, %rax
    00000112: 	addw	(%rdi,%rax,2), %r8w
.Ltmp582:
    00000117: 	addq	$0x1, %r9
    0000011b: 	addq	%rdx, %rcx
    0000011e: 	addq	%rbp, %rsi
    00000121: 	cmpq	%r9, %r11
    00000124: 	jne	.Ltmp585 # Offset: 292
    0000012a: 	popq	%rbx
    0000012b: 	movl	%r8d, %eax
    0000012e: 	popq	%rbp
    0000012f: 	popq	%r12
    00000131: 	popq	%r13
    00000133: 	retq # Offset: 307
.Ltmp583:
    00000134: 	xorl	%eax, %eax
    00000136: 	jmp	.Ltmp586 # Offset: 310
.Ltmp581:
    0000013b: 	movl	%ecx, %eax
    0000013d: 	retq # Offset: 317
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array2D2IsET_PKS0_mmS0_"

Binary Function "_Z19accumulate_array2D3IsET_PKS0_mmS0_" after disassembly {
  Number      : 126
  State       : disassembled
  Address     : 0x82f0
  Size        : 0x13e
  MaxSize     : 0x140
  Offset      : 0x82f0
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array2D3IsET_PKS0_mmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0125:
    00000000: 	endbr64
    00000004: 	movl	%ecx, %r8d
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp587 # Offset: 10
    00000010: 	pushq	%r13
    00000012: 	movq	%rdx, %r10
    00000015: 	movq	%rsi, %r11
    00000018: 	xorl	%ecx, %ecx
    0000001a: 	pushq	%r12
    0000001c: 	movq	%rdi, %rsi
    0000001f: 	leaq	-0x1(%rdx), %r12
    00000023: 	andq	$-0x8, %r10
    00000027: 	pushq	%rbp
    00000028: 	xorl	%r9d, %r9d
    0000002b: 	leaq	(%rdx,%rdx), %rbp
    0000002f: 	pushq	%rbx
    00000030: 	movq	%rdx, %rbx
    00000033: 	shrq	$0x3, %rbx
    00000037: 	shlq	$0x4, %rbx
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp591:
    00000040: 	testq	%rdx, %rdx
    00000043: 	je	.Ltmp588 # Offset: 67
    00000049: 	cmpq	$0x6, %r12
    0000004d: 	jbe	.Ltmp589 # Offset: 77
    00000053: 	leaq	(%rbx,%rsi), %r13
    00000057: 	movq	%rsi, %rax
    0000005a: 	pxor	%xmm0, %xmm0
    0000005e: 	nop # Size: 2
.Ltmp590:
    00000060: 	movdqu	(%rax), %xmm2
    00000064: 	addq	$0x10, %rax
    00000068: 	paddw	%xmm2, %xmm0
    0000006c: 	cmpq	%r13, %rax
    0000006f: 	jne	.Ltmp590 # Offset: 111
    00000071: 	movdqa	%xmm0, %xmm1
    00000075: 	psrldq	$0x8, %xmm1
    0000007a: 	paddw	%xmm1, %xmm0
    0000007e: 	movdqa	%xmm0, %xmm1
    00000082: 	psrldq	$0x4, %xmm1
    00000087: 	paddw	%xmm1, %xmm0
    0000008b: 	movdqa	%xmm0, %xmm1
    0000008f: 	psrldq	$0x2, %xmm1
    00000094: 	paddw	%xmm1, %xmm0
    00000098: 	pextrw	$0x0, %xmm0, %eax
    0000009d: 	addl	%eax, %r8d
    000000a0: 	cmpq	%r10, %rdx
    000000a3: 	je	.Ltmp588 # Offset: 163
    000000a5: 	movq	%r10, %rax
.Ltmp592:
    000000a8: 	leaq	(%rax,%rcx), %r13
    000000ac: 	addw	(%rdi,%r13,2), %r8w
    000000b1: 	leaq	0x1(%rax), %r13
    000000b5: 	cmpq	%r13, %rdx
    000000b8: 	jbe	.Ltmp588 # Offset: 184
    000000ba: 	addq	%rcx, %r13
    000000bd: 	addw	(%rdi,%r13,2), %r8w
    000000c2: 	leaq	0x2(%rax), %r13
    000000c6: 	cmpq	%r13, %rdx
    000000c9: 	jbe	.Ltmp588 # Offset: 201
    000000cb: 	addq	%rcx, %r13
    000000ce: 	addw	(%rdi,%r13,2), %r8w
    000000d3: 	leaq	0x3(%rax), %r13
    000000d7: 	cmpq	%r13, %rdx
    000000da: 	jbe	.Ltmp588 # Offset: 218
    000000dc: 	addq	%rcx, %r13
    000000df: 	addw	(%rdi,%r13,2), %r8w
    000000e4: 	leaq	0x4(%rax), %r13
    000000e8: 	cmpq	%r13, %rdx
    000000eb: 	jbe	.Ltmp588 # Offset: 235
    000000ed: 	addq	%rcx, %r13
    000000f0: 	addw	(%rdi,%r13,2), %r8w
    000000f5: 	leaq	0x5(%rax), %r13
    000000f9: 	cmpq	%r13, %rdx
    000000fc: 	jbe	.Ltmp588 # Offset: 252
    000000fe: 	addq	%rcx, %r13
    00000101: 	addq	$0x6, %rax
    00000105: 	addw	(%rdi,%r13,2), %r8w
    0000010a: 	cmpq	%rax, %rdx
    0000010d: 	jbe	.Ltmp588 # Offset: 269
    0000010f: 	addq	%rcx, %rax
    00000112: 	addw	(%rdi,%rax,2), %r8w
.Ltmp588:
    00000117: 	addq	$0x1, %r9
    0000011b: 	addq	%rdx, %rcx
    0000011e: 	addq	%rbp, %rsi
    00000121: 	cmpq	%r9, %r11
    00000124: 	jne	.Ltmp591 # Offset: 292
    0000012a: 	popq	%rbx
    0000012b: 	movl	%r8d, %eax
    0000012e: 	popq	%rbp
    0000012f: 	popq	%r12
    00000131: 	popq	%r13
    00000133: 	retq # Offset: 307
.Ltmp589:
    00000134: 	xorl	%eax, %eax
    00000136: 	jmp	.Ltmp592 # Offset: 310
.Ltmp587:
    0000013b: 	movl	%ecx, %eax
    0000013d: 	retq # Offset: 317
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array2D3IsET_PKS0_mmS0_"

Binary Function "_Z19accumulate_array2D4IsET_PKS0_mmS0_" after disassembly {
  Number      : 127
  State       : disassembled
  Address     : 0x8430
  Size        : 0x12a
  MaxSize     : 0x130
  Offset      : 0x8430
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array2D4IsET_PKS0_mmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0126:
    00000000: 	endbr64
    00000004: 	movl	%ecx, %r8d
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp593 # Offset: 10
    00000010: 	movq	%rdx, %r11
    00000013: 	movq	%rdx, %r9
    00000016: 	pushq	%r12
    00000018: 	movq	%rsi, %r10
    0000001b: 	shrq	$0x3, %r11
    0000001f: 	pushq	%rbp
    00000020: 	andq	$-0x8, %r9
    00000024: 	leaq	-0x1(%rdx), %rbp
    00000028: 	pushq	%rbx
    00000029: 	shlq	$0x4, %r11
    0000002d: 	leaq	(%rdx,%rdx), %rbx
    00000031: 	xorl	%esi, %esi
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp597:
    00000038: 	testq	%rdx, %rdx
    0000003b: 	je	.Ltmp594 # Offset: 59
    00000041: 	cmpq	$0x6, %rbp
    00000045: 	jbe	.Ltmp595 # Offset: 69
    0000004b: 	movq	%rdi, %rax
    0000004e: 	leaq	(%r11,%rdi), %rcx
    00000052: 	pxor	%xmm0, %xmm0
    00000056: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp596:
    00000060: 	movdqu	(%rax), %xmm2
    00000064: 	addq	$0x10, %rax
    00000068: 	paddw	%xmm2, %xmm0
    0000006c: 	cmpq	%rcx, %rax
    0000006f: 	jne	.Ltmp596 # Offset: 111
    00000071: 	movdqa	%xmm0, %xmm1
    00000075: 	psrldq	$0x8, %xmm1
    0000007a: 	paddw	%xmm1, %xmm0
    0000007e: 	movdqa	%xmm0, %xmm1
    00000082: 	psrldq	$0x4, %xmm1
    00000087: 	paddw	%xmm1, %xmm0
    0000008b: 	movdqa	%xmm0, %xmm1
    0000008f: 	psrldq	$0x2, %xmm1
    00000094: 	paddw	%xmm1, %xmm0
    00000098: 	pextrw	$0x0, %xmm0, %eax
    0000009d: 	addl	%eax, %r8d
    000000a0: 	cmpq	%rdx, %r9
    000000a3: 	je	.Ltmp594 # Offset: 163
    000000a5: 	movq	%r9, %rax
.Ltmp598:
    000000a8: 	leaq	0x1(%rax), %r12
    000000ac: 	leaq	(%rax,%rax), %rcx
    000000b0: 	addw	(%rdi,%rax,2), %r8w
    000000b5: 	cmpq	%r12, %rdx
    000000b8: 	jbe	.Ltmp594 # Offset: 184
    000000ba: 	leaq	0x2(%rax), %r12
    000000be: 	addw	0x2(%rdi,%rcx), %r8w
    000000c4: 	cmpq	%r12, %rdx
    000000c7: 	jbe	.Ltmp594 # Offset: 199
    000000c9: 	leaq	0x3(%rax), %r12
    000000cd: 	addw	0x4(%rdi,%rcx), %r8w
    000000d3: 	cmpq	%r12, %rdx
    000000d6: 	jbe	.Ltmp594 # Offset: 214
    000000d8: 	leaq	0x4(%rax), %r12
    000000dc: 	addw	0x6(%rdi,%rcx), %r8w
    000000e2: 	cmpq	%r12, %rdx
    000000e5: 	jbe	.Ltmp594 # Offset: 229
    000000e7: 	leaq	0x5(%rax), %r12
    000000eb: 	addw	0x8(%rdi,%rcx), %r8w
    000000f1: 	cmpq	%r12, %rdx
    000000f4: 	jbe	.Ltmp594 # Offset: 244
    000000f6: 	addq	$0x6, %rax
    000000fa: 	addw	0xa(%rdi,%rcx), %r8w
    00000100: 	cmpq	%rax, %rdx
    00000103: 	jbe	.Ltmp594 # Offset: 259
    00000105: 	addw	0xc(%rdi,%rcx), %r8w
.Ltmp594:
    0000010b: 	addq	$0x1, %rsi
    0000010f: 	addq	%rbx, %rdi
    00000112: 	cmpq	%rsi, %r10
    00000115: 	jne	.Ltmp597 # Offset: 277
    0000011b: 	popq	%rbx
    0000011c: 	movl	%r8d, %eax
    0000011f: 	popq	%rbp
    00000120: 	popq	%r12
    00000122: 	retq # Offset: 290
.Ltmp595:
    00000123: 	xorl	%eax, %eax
    00000125: 	jmp	.Ltmp598 # Offset: 293
.Ltmp593:
    00000127: 	movl	%ecx, %eax
    00000129: 	retq # Offset: 297
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array2D4IsET_PKS0_mmS0_"

Binary Function "_Z19accumulate_array2D5IsET_PKS0_mmS0_" after disassembly {
  Number      : 128
  State       : disassembled
  Address     : 0x8560
  Size        : 0x130
  MaxSize     : 0x130
  Offset      : 0x8560
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array2D5IsET_PKS0_mmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0127:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r11
    00000007: 	movl	%ecx, %r8d
    0000000a: 	testq	%rsi, %rsi
    0000000d: 	je	.Ltmp599 # Offset: 13
    00000013: 	movq	%rdx, %r10
    00000016: 	movq	%rdx, %r9
    00000019: 	pushq	%r13
    0000001b: 	movq	%rdx, %rsi
    0000001e: 	andq	$-0x8, %r10
    00000022: 	pushq	%r12
    00000024: 	shrq	$0x3, %r9
    00000028: 	xorl	%ecx, %ecx
    0000002a: 	pushq	%rbp
    0000002b: 	leaq	(%r10,%r10), %r12
    0000002f: 	leaq	-0x1(%rdx), %rbp
    00000033: 	pushq	%rbx
    00000034: 	leaq	(%rdx,%rdx), %rbx
    00000038: 	nopl	(%rax,%rax) # Size: 8
.Ltmp604:
    00000040: 	testq	%rsi, %rsi
    00000043: 	je	.Ltmp600 # Offset: 67
    00000049: 	cmpq	$0x6, %rbp
    0000004d: 	jbe	.Ltmp601 # Offset: 77
    00000053: 	xorl	%eax, %eax
    00000055: 	pxor	%xmm0, %xmm0
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp602:
    00000060: 	movq	%rax, %rdx
    00000063: 	addq	$0x1, %rax
    00000067: 	shlq	$0x4, %rdx
    0000006b: 	movdqu	(%rdi,%rdx), %xmm1
    00000070: 	paddw	%xmm1, %xmm0
    00000074: 	cmpq	%rax, %r9
    00000077: 	jne	.Ltmp602 # Offset: 119
    00000079: 	movdqa	%xmm0, %xmm1
    0000007d: 	leaq	(%rdi,%r12), %rdx
    00000081: 	psrldq	$0x8, %xmm1
    00000086: 	paddw	%xmm1, %xmm0
    0000008a: 	movdqa	%xmm0, %xmm1
    0000008e: 	psrldq	$0x4, %xmm1
    00000093: 	paddw	%xmm1, %xmm0
    00000097: 	movdqa	%xmm0, %xmm1
    0000009b: 	psrldq	$0x2, %xmm1
    000000a0: 	paddw	%xmm1, %xmm0
    000000a4: 	pextrw	$0x0, %xmm0, %eax
    000000a9: 	addl	%eax, %r8d
    000000ac: 	cmpq	%r10, %rsi
    000000af: 	je	.Ltmp603 # Offset: 175
    000000b1: 	movq	%r10, %rax
.Ltmp605:
    000000b4: 	leaq	0x1(%rax), %r13
    000000b8: 	addw	(%rdx), %r8w
    000000bc: 	cmpq	%r13, %rsi
    000000bf: 	jbe	.Ltmp603 # Offset: 191
    000000c1: 	leaq	0x2(%rax), %r13
    000000c5: 	addw	0x2(%rdx), %r8w
    000000ca: 	cmpq	%r13, %rsi
    000000cd: 	jbe	.Ltmp603 # Offset: 205
    000000cf: 	leaq	0x3(%rax), %r13
    000000d3: 	addw	0x4(%rdx), %r8w
    000000d8: 	cmpq	%r13, %rsi
    000000db: 	jbe	.Ltmp603 # Offset: 219
    000000dd: 	leaq	0x4(%rax), %r13
    000000e1: 	addw	0x6(%rdx), %r8w
    000000e6: 	cmpq	%r13, %rsi
    000000e9: 	jbe	.Ltmp603 # Offset: 233
    000000eb: 	leaq	0x5(%rax), %r13
    000000ef: 	addw	0x8(%rdx), %r8w
    000000f4: 	cmpq	%r13, %rsi
    000000f7: 	jbe	.Ltmp603 # Offset: 247
    000000f9: 	addq	$0x6, %rax
    000000fd: 	addw	0xa(%rdx), %r8w
    00000102: 	cmpq	%rax, %rsi
    00000105: 	jbe	.Ltmp603 # Offset: 261
    00000107: 	addw	0xc(%rdx), %r8w
.Ltmp603:
    0000010c: 	addq	%rbx, %rdi
.Ltmp600:
    0000010f: 	addq	$0x1, %rcx
    00000113: 	cmpq	%rcx, %r11
    00000116: 	jne	.Ltmp604 # Offset: 278
    0000011c: 	popq	%rbx
    0000011d: 	movl	%r8d, %eax
    00000120: 	popq	%rbp
    00000121: 	popq	%r12
    00000123: 	popq	%r13
    00000125: 	retq # Offset: 293
.Ltmp601:
    00000126: 	movq	%rdi, %rdx
    00000129: 	xorl	%eax, %eax
    0000012b: 	jmp	.Ltmp605 # Offset: 299
.Ltmp599:
    0000012d: 	movl	%ecx, %eax
    0000012f: 	retq # Offset: 303
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array2D5IsET_PKS0_mmS0_"

Binary Function "_Z19accumulate_array2D6IsET_PKS0_mmS0_" after disassembly {
  Number      : 129
  State       : disassembled
  Address     : 0x8690
  Size        : 0x130
  MaxSize     : 0x130
  Offset      : 0x8690
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array2D6IsET_PKS0_mmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0128:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r11
    00000007: 	movl	%ecx, %r8d
    0000000a: 	testq	%rsi, %rsi
    0000000d: 	je	.Ltmp606 # Offset: 13
    00000013: 	movq	%rdx, %r10
    00000016: 	movq	%rdx, %r9
    00000019: 	pushq	%r13
    0000001b: 	movq	%rdx, %rsi
    0000001e: 	andq	$-0x8, %r10
    00000022: 	pushq	%r12
    00000024: 	shrq	$0x3, %r9
    00000028: 	xorl	%ecx, %ecx
    0000002a: 	pushq	%rbp
    0000002b: 	leaq	(%r10,%r10), %r12
    0000002f: 	leaq	-0x1(%rdx), %rbp
    00000033: 	pushq	%rbx
    00000034: 	leaq	(%rdx,%rdx), %rbx
    00000038: 	nopl	(%rax,%rax) # Size: 8
.Ltmp611:
    00000040: 	testq	%rsi, %rsi
    00000043: 	je	.Ltmp607 # Offset: 67
    00000049: 	cmpq	$0x6, %rbp
    0000004d: 	jbe	.Ltmp608 # Offset: 77
    00000053: 	xorl	%eax, %eax
    00000055: 	pxor	%xmm0, %xmm0
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp609:
    00000060: 	movq	%rax, %rdx
    00000063: 	addq	$0x1, %rax
    00000067: 	shlq	$0x4, %rdx
    0000006b: 	movdqu	(%rdi,%rdx), %xmm1
    00000070: 	paddw	%xmm1, %xmm0
    00000074: 	cmpq	%rax, %r9
    00000077: 	jne	.Ltmp609 # Offset: 119
    00000079: 	movdqa	%xmm0, %xmm1
    0000007d: 	leaq	(%rdi,%r12), %rdx
    00000081: 	psrldq	$0x8, %xmm1
    00000086: 	paddw	%xmm1, %xmm0
    0000008a: 	movdqa	%xmm0, %xmm1
    0000008e: 	psrldq	$0x4, %xmm1
    00000093: 	paddw	%xmm1, %xmm0
    00000097: 	movdqa	%xmm0, %xmm1
    0000009b: 	psrldq	$0x2, %xmm1
    000000a0: 	paddw	%xmm1, %xmm0
    000000a4: 	pextrw	$0x0, %xmm0, %eax
    000000a9: 	addl	%eax, %r8d
    000000ac: 	cmpq	%rsi, %r10
    000000af: 	je	.Ltmp610 # Offset: 175
    000000b1: 	movq	%r10, %rax
.Ltmp612:
    000000b4: 	leaq	0x1(%rax), %r13
    000000b8: 	addw	(%rdx), %r8w
    000000bc: 	cmpq	%r13, %rsi
    000000bf: 	jbe	.Ltmp610 # Offset: 191
    000000c1: 	leaq	0x2(%rax), %r13
    000000c5: 	addw	0x2(%rdx), %r8w
    000000ca: 	cmpq	%r13, %rsi
    000000cd: 	jbe	.Ltmp610 # Offset: 205
    000000cf: 	leaq	0x3(%rax), %r13
    000000d3: 	addw	0x4(%rdx), %r8w
    000000d8: 	cmpq	%r13, %rsi
    000000db: 	jbe	.Ltmp610 # Offset: 219
    000000dd: 	leaq	0x4(%rax), %r13
    000000e1: 	addw	0x6(%rdx), %r8w
    000000e6: 	cmpq	%r13, %rsi
    000000e9: 	jbe	.Ltmp610 # Offset: 233
    000000eb: 	leaq	0x5(%rax), %r13
    000000ef: 	addw	0x8(%rdx), %r8w
    000000f4: 	cmpq	%r13, %rsi
    000000f7: 	jbe	.Ltmp610 # Offset: 247
    000000f9: 	addq	$0x6, %rax
    000000fd: 	addw	0xa(%rdx), %r8w
    00000102: 	cmpq	%rax, %rsi
    00000105: 	jbe	.Ltmp610 # Offset: 261
    00000107: 	addw	0xc(%rdx), %r8w
.Ltmp610:
    0000010c: 	addq	%rbx, %rdi
.Ltmp607:
    0000010f: 	addq	$0x1, %rcx
    00000113: 	cmpq	%rcx, %r11
    00000116: 	jne	.Ltmp611 # Offset: 278
    0000011c: 	popq	%rbx
    0000011d: 	movl	%r8d, %eax
    00000120: 	popq	%rbp
    00000121: 	popq	%r12
    00000123: 	popq	%r13
    00000125: 	retq # Offset: 293
.Ltmp608:
    00000126: 	movq	%rdi, %rdx
    00000129: 	xorl	%eax, %eax
    0000012b: 	jmp	.Ltmp612 # Offset: 299
.Ltmp606:
    0000012d: 	movl	%ecx, %eax
    0000012f: 	retq # Offset: 303
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array2D6IsET_PKS0_mmS0_"

Binary Function "_Z19accumulate_array2D7IsET_PKS0_mmS0_" after disassembly {
  Number      : 130
  State       : disassembled
  Address     : 0x87c0
  Size        : 0x11e
  MaxSize     : 0x120
  Offset      : 0x87c0
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array2D7IsET_PKS0_mmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0129:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r11
    00000007: 	movl	%ecx, %r8d
    0000000a: 	testq	%rsi, %rsi
    0000000d: 	je	.Ltmp613 # Offset: 13
    00000013: 	movq	%rdx, %r9
    00000016: 	movq	%rdx, %r10
    00000019: 	pushq	%r12
    0000001b: 	movq	%rdx, %rsi
    0000001e: 	pushq	%rbp
    0000001f: 	shrq	$0x3, %r9
    00000023: 	leaq	-0x1(%rdx), %rbp
    00000027: 	andq	$-0x8, %r10
    0000002b: 	pushq	%rbx
    0000002c: 	xorl	%ecx, %ecx
    0000002e: 	leaq	(%rdx,%rdx), %rbx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp617:
    00000038: 	testq	%rsi, %rsi
    0000003b: 	je	.Ltmp614 # Offset: 59
    00000041: 	xorl	%eax, %eax
    00000043: 	cmpq	$0x6, %rbp
    00000047: 	jbe	.Ltmp615 # Offset: 71
    00000049: 	pxor	%xmm0, %xmm0
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp616:
    00000050: 	movq	%rax, %rdx
    00000053: 	addq	$0x1, %rax
    00000057: 	shlq	$0x4, %rdx
    0000005b: 	movdqu	(%rdi,%rdx), %xmm1
    00000060: 	paddw	%xmm1, %xmm0
    00000064: 	cmpq	%rax, %r9
    00000067: 	jne	.Ltmp616 # Offset: 103
    00000069: 	movdqa	%xmm0, %xmm1
    0000006d: 	psrldq	$0x8, %xmm1
    00000072: 	paddw	%xmm1, %xmm0
    00000076: 	movdqa	%xmm0, %xmm1
    0000007a: 	psrldq	$0x4, %xmm1
    0000007f: 	paddw	%xmm1, %xmm0
    00000083: 	movdqa	%xmm0, %xmm1
    00000087: 	psrldq	$0x2, %xmm1
    0000008c: 	paddw	%xmm1, %xmm0
    00000090: 	pextrw	$0x0, %xmm0, %eax
    00000095: 	addl	%eax, %r8d
    00000098: 	cmpq	%r10, %rsi
    0000009b: 	je	.Ltmp614 # Offset: 155
    0000009d: 	movq	%r10, %rax
.Ltmp615:
    000000a0: 	leaq	0x1(%rax), %r12
    000000a4: 	leaq	(%rax,%rax), %rdx
    000000a8: 	addw	(%rdi,%rax,2), %r8w
    000000ad: 	cmpq	%r12, %rsi
    000000b0: 	jbe	.Ltmp614 # Offset: 176
    000000b2: 	leaq	0x2(%rax), %r12
    000000b6: 	addw	0x2(%rdi,%rdx), %r8w
    000000bc: 	cmpq	%r12, %rsi
    000000bf: 	jbe	.Ltmp614 # Offset: 191
    000000c1: 	leaq	0x3(%rax), %r12
    000000c5: 	addw	0x4(%rdi,%rdx), %r8w
    000000cb: 	cmpq	%r12, %rsi
    000000ce: 	jbe	.Ltmp614 # Offset: 206
    000000d0: 	leaq	0x4(%rax), %r12
    000000d4: 	addw	0x6(%rdi,%rdx), %r8w
    000000da: 	cmpq	%r12, %rsi
    000000dd: 	jbe	.Ltmp614 # Offset: 221
    000000df: 	leaq	0x5(%rax), %r12
    000000e3: 	addw	0x8(%rdi,%rdx), %r8w
    000000e9: 	cmpq	%r12, %rsi
    000000ec: 	jbe	.Ltmp614 # Offset: 236
    000000ee: 	addq	$0x6, %rax
    000000f2: 	addw	0xa(%rdi,%rdx), %r8w
    000000f8: 	cmpq	%rax, %rsi
    000000fb: 	jbe	.Ltmp614 # Offset: 251
    000000fd: 	addw	0xc(%rdi,%rdx), %r8w
.Ltmp614:
    00000103: 	addq	$0x1, %rcx
    00000107: 	addq	%rbx, %rdi
    0000010a: 	cmpq	%rcx, %r11
    0000010d: 	jne	.Ltmp617 # Offset: 269
    00000113: 	popq	%rbx
    00000114: 	movl	%r8d, %eax
    00000117: 	popq	%rbp
    00000118: 	popq	%r12
    0000011a: 	retq # Offset: 282
.Ltmp613:
    0000011b: 	movl	%ecx, %eax
    0000011d: 	retq # Offset: 285
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array2D7IsET_PKS0_mmS0_"

Binary Function "_Z19accumulate_array2D8IsET_PKS0_mmS0_" after disassembly {
  Number      : 131
  State       : disassembled
  Address     : 0x88e0
  Size        : 0x13e
  MaxSize     : 0x140
  Offset      : 0x88e0
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array2D8IsET_PKS0_mmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0130:
    00000000: 	endbr64
    00000004: 	movl	%ecx, %r8d
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp618 # Offset: 10
    00000010: 	pushq	%r13
    00000012: 	movq	%rdx, %r10
    00000015: 	movq	%rsi, %r11
    00000018: 	xorl	%ecx, %ecx
    0000001a: 	pushq	%r12
    0000001c: 	movq	%rdi, %rsi
    0000001f: 	leaq	-0x1(%rdx), %r12
    00000023: 	andq	$-0x8, %r10
    00000027: 	pushq	%rbp
    00000028: 	xorl	%r9d, %r9d
    0000002b: 	leaq	(%rdx,%rdx), %rbp
    0000002f: 	pushq	%rbx
    00000030: 	movq	%rdx, %rbx
    00000033: 	shrq	$0x3, %rbx
    00000037: 	shlq	$0x4, %rbx
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp622:
    00000040: 	testq	%rdx, %rdx
    00000043: 	je	.Ltmp619 # Offset: 67
    00000049: 	cmpq	$0x6, %r12
    0000004d: 	jbe	.Ltmp620 # Offset: 77
    00000053: 	leaq	(%rbx,%rsi), %r13
    00000057: 	movq	%rsi, %rax
    0000005a: 	pxor	%xmm0, %xmm0
    0000005e: 	nop # Size: 2
.Ltmp621:
    00000060: 	movdqu	(%rax), %xmm2
    00000064: 	addq	$0x10, %rax
    00000068: 	paddw	%xmm2, %xmm0
    0000006c: 	cmpq	%r13, %rax
    0000006f: 	jne	.Ltmp621 # Offset: 111
    00000071: 	movdqa	%xmm0, %xmm1
    00000075: 	psrldq	$0x8, %xmm1
    0000007a: 	paddw	%xmm1, %xmm0
    0000007e: 	movdqa	%xmm0, %xmm1
    00000082: 	psrldq	$0x4, %xmm1
    00000087: 	paddw	%xmm1, %xmm0
    0000008b: 	movdqa	%xmm0, %xmm1
    0000008f: 	psrldq	$0x2, %xmm1
    00000094: 	paddw	%xmm1, %xmm0
    00000098: 	pextrw	$0x0, %xmm0, %eax
    0000009d: 	addl	%eax, %r8d
    000000a0: 	cmpq	%r10, %rdx
    000000a3: 	je	.Ltmp619 # Offset: 163
    000000a5: 	movq	%r10, %rax
.Ltmp623:
    000000a8: 	leaq	(%rax,%rcx), %r13
    000000ac: 	addw	(%rdi,%r13,2), %r8w
    000000b1: 	leaq	0x1(%rax), %r13
    000000b5: 	cmpq	%r13, %rdx
    000000b8: 	jbe	.Ltmp619 # Offset: 184
    000000ba: 	addq	%rcx, %r13
    000000bd: 	addw	(%rdi,%r13,2), %r8w
    000000c2: 	leaq	0x2(%rax), %r13
    000000c6: 	cmpq	%r13, %rdx
    000000c9: 	jbe	.Ltmp619 # Offset: 201
    000000cb: 	addq	%rcx, %r13
    000000ce: 	addw	(%rdi,%r13,2), %r8w
    000000d3: 	leaq	0x3(%rax), %r13
    000000d7: 	cmpq	%r13, %rdx
    000000da: 	jbe	.Ltmp619 # Offset: 218
    000000dc: 	addq	%rcx, %r13
    000000df: 	addw	(%rdi,%r13,2), %r8w
    000000e4: 	leaq	0x4(%rax), %r13
    000000e8: 	cmpq	%r13, %rdx
    000000eb: 	jbe	.Ltmp619 # Offset: 235
    000000ed: 	addq	%rcx, %r13
    000000f0: 	addw	(%rdi,%r13,2), %r8w
    000000f5: 	leaq	0x5(%rax), %r13
    000000f9: 	cmpq	%r13, %rdx
    000000fc: 	jbe	.Ltmp619 # Offset: 252
    000000fe: 	addq	%rcx, %r13
    00000101: 	addq	$0x6, %rax
    00000105: 	addw	(%rdi,%r13,2), %r8w
    0000010a: 	cmpq	%rax, %rdx
    0000010d: 	jbe	.Ltmp619 # Offset: 269
    0000010f: 	addq	%rcx, %rax
    00000112: 	addw	(%rdi,%rax,2), %r8w
.Ltmp619:
    00000117: 	addq	$0x1, %r9
    0000011b: 	addq	%rdx, %rcx
    0000011e: 	addq	%rbp, %rsi
    00000121: 	cmpq	%r9, %r11
    00000124: 	jne	.Ltmp622 # Offset: 292
    0000012a: 	popq	%rbx
    0000012b: 	movl	%r8d, %eax
    0000012e: 	popq	%rbp
    0000012f: 	popq	%r12
    00000131: 	popq	%r13
    00000133: 	retq # Offset: 307
.Ltmp620:
    00000134: 	xorl	%eax, %eax
    00000136: 	jmp	.Ltmp623 # Offset: 310
.Ltmp618:
    0000013b: 	movl	%ecx, %eax
    0000013d: 	retq # Offset: 317
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array2D8IsET_PKS0_mmS0_"

Binary Function "_Z19accumulate_array2D9IsET_PKS0_mmS0_" after disassembly {
  Number      : 132
  State       : disassembled
  Address     : 0x8a20
  Size        : 0x13e
  MaxSize     : 0x140
  Offset      : 0x8a20
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array2D9IsET_PKS0_mmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0131:
    00000000: 	endbr64
    00000004: 	movl	%ecx, %r8d
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp624 # Offset: 10
    00000010: 	pushq	%r13
    00000012: 	movq	%rdx, %r10
    00000015: 	movq	%rsi, %r11
    00000018: 	xorl	%ecx, %ecx
    0000001a: 	pushq	%r12
    0000001c: 	movq	%rdi, %rsi
    0000001f: 	leaq	-0x1(%rdx), %r12
    00000023: 	andq	$-0x8, %r10
    00000027: 	pushq	%rbp
    00000028: 	xorl	%r9d, %r9d
    0000002b: 	leaq	(%rdx,%rdx), %rbp
    0000002f: 	pushq	%rbx
    00000030: 	movq	%rdx, %rbx
    00000033: 	shrq	$0x3, %rbx
    00000037: 	shlq	$0x4, %rbx
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp628:
    00000040: 	testq	%rdx, %rdx
    00000043: 	je	.Ltmp625 # Offset: 67
    00000049: 	cmpq	$0x6, %r12
    0000004d: 	jbe	.Ltmp626 # Offset: 77
    00000053: 	leaq	(%rbx,%rsi), %r13
    00000057: 	movq	%rsi, %rax
    0000005a: 	pxor	%xmm0, %xmm0
    0000005e: 	nop # Size: 2
.Ltmp627:
    00000060: 	movdqu	(%rax), %xmm2
    00000064: 	addq	$0x10, %rax
    00000068: 	paddw	%xmm2, %xmm0
    0000006c: 	cmpq	%r13, %rax
    0000006f: 	jne	.Ltmp627 # Offset: 111
    00000071: 	movdqa	%xmm0, %xmm1
    00000075: 	psrldq	$0x8, %xmm1
    0000007a: 	paddw	%xmm1, %xmm0
    0000007e: 	movdqa	%xmm0, %xmm1
    00000082: 	psrldq	$0x4, %xmm1
    00000087: 	paddw	%xmm1, %xmm0
    0000008b: 	movdqa	%xmm0, %xmm1
    0000008f: 	psrldq	$0x2, %xmm1
    00000094: 	paddw	%xmm1, %xmm0
    00000098: 	pextrw	$0x0, %xmm0, %eax
    0000009d: 	addl	%eax, %r8d
    000000a0: 	cmpq	%r10, %rdx
    000000a3: 	je	.Ltmp625 # Offset: 163
    000000a5: 	movq	%r10, %rax
.Ltmp629:
    000000a8: 	leaq	(%rax,%rcx), %r13
    000000ac: 	addw	(%rdi,%r13,2), %r8w
    000000b1: 	leaq	0x1(%rax), %r13
    000000b5: 	cmpq	%r13, %rdx
    000000b8: 	jbe	.Ltmp625 # Offset: 184
    000000ba: 	addq	%rcx, %r13
    000000bd: 	addw	(%rdi,%r13,2), %r8w
    000000c2: 	leaq	0x2(%rax), %r13
    000000c6: 	cmpq	%r13, %rdx
    000000c9: 	jbe	.Ltmp625 # Offset: 201
    000000cb: 	addq	%rcx, %r13
    000000ce: 	addw	(%rdi,%r13,2), %r8w
    000000d3: 	leaq	0x3(%rax), %r13
    000000d7: 	cmpq	%r13, %rdx
    000000da: 	jbe	.Ltmp625 # Offset: 218
    000000dc: 	addq	%rcx, %r13
    000000df: 	addw	(%rdi,%r13,2), %r8w
    000000e4: 	leaq	0x4(%rax), %r13
    000000e8: 	cmpq	%r13, %rdx
    000000eb: 	jbe	.Ltmp625 # Offset: 235
    000000ed: 	addq	%rcx, %r13
    000000f0: 	addw	(%rdi,%r13,2), %r8w
    000000f5: 	leaq	0x5(%rax), %r13
    000000f9: 	cmpq	%r13, %rdx
    000000fc: 	jbe	.Ltmp625 # Offset: 252
    000000fe: 	addq	%rcx, %r13
    00000101: 	addq	$0x6, %rax
    00000105: 	addw	(%rdi,%r13,2), %r8w
    0000010a: 	cmpq	%rax, %rdx
    0000010d: 	jbe	.Ltmp625 # Offset: 269
    0000010f: 	addq	%rcx, %rax
    00000112: 	addw	(%rdi,%rax,2), %r8w
.Ltmp625:
    00000117: 	addq	$0x1, %r9
    0000011b: 	addq	%rdx, %rcx
    0000011e: 	addq	%rbp, %rsi
    00000121: 	cmpq	%r9, %r11
    00000124: 	jne	.Ltmp628 # Offset: 292
    0000012a: 	popq	%rbx
    0000012b: 	movl	%r8d, %eax
    0000012e: 	popq	%rbp
    0000012f: 	popq	%r12
    00000131: 	popq	%r13
    00000133: 	retq # Offset: 307
.Ltmp626:
    00000134: 	xorl	%eax, %eax
    00000136: 	jmp	.Ltmp629 # Offset: 310
.Ltmp624:
    0000013b: 	movl	%ecx, %eax
    0000013d: 	retq # Offset: 317
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array2D9IsET_PKS0_mmS0_"

Binary Function "_Z19accumulate_array3D1IsET_PKS0_mmmS0_" after disassembly {
  Number      : 133
  State       : disassembled
  Address     : 0x8b60
  Size        : 0x100
  MaxSize     : 0x100
  Offset      : 0x8b60
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array3D1IsET_PKS0_mmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0132:
    00000000: 	endbr64
    00000004: 	imulq	%rcx, %rdx
    00000008: 	imulq	%rsi, %rdx
    0000000c: 	testq	%rdx, %rdx
    0000000f: 	je	.Ltmp630 # Offset: 15
    00000015: 	leaq	-0x1(%rdx), %rax
    00000019: 	cmpq	$0x6, %rax
    0000001d: 	jbe	.Ltmp631 # Offset: 29
    00000023: 	movq	%rdx, %rax
    00000026: 	movq	%rdi, %rcx
    00000029: 	pxor	%xmm0, %xmm0
    0000002d: 	shrq	$0x3, %rax
    00000031: 	shlq	$0x4, %rax
    00000035: 	addq	%rdi, %rax
    00000038: 	nopl	(%rax,%rax) # Size: 8
.Ltmp632:
    00000040: 	movdqu	(%rcx), %xmm2
    00000044: 	addq	$0x10, %rcx
    00000048: 	paddw	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rcx
    0000004f: 	jne	.Ltmp632 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movq	%rdx, %rcx
    00000058: 	psrldq	$0x8, %xmm1
    0000005d: 	andq	$-0x8, %rcx
    00000061: 	paddw	%xmm1, %xmm0
    00000065: 	movdqa	%xmm0, %xmm1
    00000069: 	psrldq	$0x4, %xmm1
    0000006e: 	paddw	%xmm1, %xmm0
    00000072: 	movdqa	%xmm0, %xmm1
    00000076: 	psrldq	$0x2, %xmm1
    0000007b: 	paddw	%xmm1, %xmm0
    0000007f: 	pextrw	$0x0, %xmm0, %eax
    00000084: 	addl	%r8d, %eax
    00000087: 	testb	$0x7, %dl
    0000008a: 	je	.Ltmp633 # Offset: 138
.Ltmp635:
    0000008c: 	leaq	0x1(%rcx), %r8
    00000090: 	leaq	(%rcx,%rcx), %rsi
    00000094: 	addw	(%rdi,%rcx,2), %ax
    00000098: 	cmpq	%r8, %rdx
    0000009b: 	jbe	.Ltmp634 # Offset: 155
    0000009d: 	leaq	0x2(%rcx), %r8
    000000a1: 	addw	0x2(%rdi,%rsi), %ax
    000000a6: 	cmpq	%r8, %rdx
    000000a9: 	jbe	.Ltmp634 # Offset: 169
    000000ab: 	leaq	0x3(%rcx), %r8
    000000af: 	addw	0x4(%rdi,%rsi), %ax
    000000b4: 	cmpq	%r8, %rdx
    000000b7: 	jbe	.Ltmp634 # Offset: 183
    000000b9: 	leaq	0x4(%rcx), %r8
    000000bd: 	addw	0x6(%rdi,%rsi), %ax
    000000c2: 	cmpq	%r8, %rdx
    000000c5: 	jbe	.Ltmp634 # Offset: 197
    000000c7: 	leaq	0x5(%rcx), %r8
    000000cb: 	addw	0x8(%rdi,%rsi), %ax
    000000d0: 	cmpq	%r8, %rdx
    000000d3: 	jbe	.Ltmp634 # Offset: 211
    000000d5: 	addq	$0x6, %rcx
    000000d9: 	addw	0xa(%rdi,%rsi), %ax
    000000de: 	cmpq	%rcx, %rdx
    000000e1: 	jbe	.Ltmp634 # Offset: 225
    000000e3: 	addw	0xc(%rdi,%rsi), %ax
    000000e8: 	retq # Offset: 232
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp630:
    000000f0: 	movl	%r8d, %eax
.Ltmp634:
    000000f3: 	retq # Offset: 243
    000000f4: 	nopl	(%rax) # Size: 4
.Ltmp633:
    000000f8: 	retq # Offset: 248
.Ltmp631:
    000000f9: 	movl	%r8d, %eax
    000000fc: 	xorl	%ecx, %ecx
    000000fe: 	jmp	.Ltmp635 # Offset: 254
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array3D1IsET_PKS0_mmmS0_"

Binary Function "_Z19accumulate_array3D2IsET_PKS0_mmmS0_" after disassembly {
  Number      : 134
  State       : disassembled
  Address     : 0x8c60
  Size        : 0x183
  MaxSize     : 0x190
  Offset      : 0x8c60
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array3D2IsET_PKS0_mmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0133:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rsi, -0x10(%rsp)
    00000013: 	testq	%rsi, %rsi
    00000016: 	je	.Ltmp636 # Offset: 22
    0000001c: 	movq	%rdx, %r11
    0000001f: 	movq	%rcx, %r12
    00000022: 	movq	%rcx, %r10
    00000025: 	movq	%rcx, %rdx
    00000028: 	movq	%r11, %rax
    0000002b: 	shrq	$0x3, %r12
    0000002f: 	leaq	(%rcx,%rcx), %rbx
    00000033: 	leaq	-0x1(%rcx), %rbp
    00000037: 	imulq	%rcx, %rax
    0000003b: 	shlq	$0x4, %r12
    0000003f: 	andq	$-0x8, %r10
    00000043: 	xorl	%r13d, %r13d
    00000046: 	xorl	%r14d, %r14d
    00000049: 	movq	%rax, -0x18(%rsp)
    0000004e: 	nop # Size: 2
.Ltmp642:
    00000050: 	testq	%r11, %r11
    00000053: 	je	.Ltmp637 # Offset: 83
    00000059: 	leaq	(%rdi,%r13,2), %rsi
    0000005d: 	movq	%r13, %rcx
    00000060: 	xorl	%r9d, %r9d
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp641:
    00000068: 	testq	%rdx, %rdx
    0000006b: 	je	.Ltmp638 # Offset: 107
    00000071: 	cmpq	$0x6, %rbp
    00000075: 	jbe	.Ltmp639 # Offset: 117
    0000007b: 	leaq	(%r12,%rsi), %r15
    0000007f: 	movq	%rsi, %rax
    00000082: 	pxor	%xmm0, %xmm0
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp640:
    00000090: 	movdqu	(%rax), %xmm2
    00000094: 	addq	$0x10, %rax
    00000098: 	paddw	%xmm2, %xmm0
    0000009c: 	cmpq	%r15, %rax
    0000009f: 	jne	.Ltmp640 # Offset: 159
    000000a1: 	movdqa	%xmm0, %xmm1
    000000a5: 	psrldq	$0x8, %xmm1
    000000aa: 	paddw	%xmm1, %xmm0
    000000ae: 	movdqa	%xmm0, %xmm1
    000000b2: 	psrldq	$0x4, %xmm1
    000000b7: 	paddw	%xmm1, %xmm0
    000000bb: 	movdqa	%xmm0, %xmm1
    000000bf: 	psrldq	$0x2, %xmm1
    000000c4: 	paddw	%xmm1, %xmm0
    000000c8: 	pextrw	$0x0, %xmm0, %eax
    000000cd: 	addl	%eax, %r8d
    000000d0: 	cmpq	%r10, %rdx
    000000d3: 	je	.Ltmp638 # Offset: 211
    000000d5: 	movq	%r10, %rax
.Ltmp643:
    000000d8: 	leaq	(%rax,%rcx), %r15
    000000dc: 	addw	(%rdi,%r15,2), %r8w
    000000e1: 	leaq	0x1(%rax), %r15
    000000e5: 	cmpq	%r15, %rdx
    000000e8: 	jbe	.Ltmp638 # Offset: 232
    000000ea: 	addq	%rcx, %r15
    000000ed: 	addw	(%rdi,%r15,2), %r8w
    000000f2: 	leaq	0x2(%rax), %r15
    000000f6: 	cmpq	%r15, %rdx
    000000f9: 	jbe	.Ltmp638 # Offset: 249
    000000fb: 	addq	%rcx, %r15
    000000fe: 	addw	(%rdi,%r15,2), %r8w
    00000103: 	leaq	0x3(%rax), %r15
    00000107: 	cmpq	%r15, %rdx
    0000010a: 	jbe	.Ltmp638 # Offset: 266
    0000010c: 	addq	%rcx, %r15
    0000010f: 	addw	(%rdi,%r15,2), %r8w
    00000114: 	leaq	0x4(%rax), %r15
    00000118: 	cmpq	%r15, %rdx
    0000011b: 	jbe	.Ltmp638 # Offset: 283
    0000011d: 	addq	%rcx, %r15
    00000120: 	addw	(%rdi,%r15,2), %r8w
    00000125: 	leaq	0x5(%rax), %r15
    00000129: 	cmpq	%r15, %rdx
    0000012c: 	jbe	.Ltmp638 # Offset: 300
    0000012e: 	addq	%rcx, %r15
    00000131: 	addq	$0x6, %rax
    00000135: 	addw	(%rdi,%r15,2), %r8w
    0000013a: 	cmpq	%rax, %rdx
    0000013d: 	jbe	.Ltmp638 # Offset: 317
    0000013f: 	addq	%rcx, %rax
    00000142: 	addw	(%rdi,%rax,2), %r8w
.Ltmp638:
    00000147: 	addq	$0x1, %r9
    0000014b: 	addq	%rdx, %rcx
    0000014e: 	addq	%rbx, %rsi
    00000151: 	cmpq	%r9, %r11
    00000154: 	jne	.Ltmp641 # Offset: 340
.Ltmp637:
    0000015a: 	addq	$0x1, %r14
    0000015e: 	addq	-0x18(%rsp), %r13
    00000163: 	cmpq	%r14, -0x10(%rsp)
    00000168: 	jne	.Ltmp642 # Offset: 360
.Ltmp636:
    0000016e: 	popq	%rbx
    0000016f: 	movl	%r8d, %eax
    00000172: 	popq	%rbp
    00000173: 	popq	%r12
    00000175: 	popq	%r13
    00000177: 	popq	%r14
    00000179: 	popq	%r15
    0000017b: 	retq # Offset: 379
.Ltmp639:
    0000017c: 	xorl	%eax, %eax
    0000017e: 	jmp	.Ltmp643 # Offset: 382
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array3D2IsET_PKS0_mmmS0_"

Binary Function "_Z19accumulate_array3D3IsET_PKS0_mmmS0_" after disassembly {
  Number      : 135
  State       : disassembled
  Address     : 0x8df0
  Size        : 0x183
  MaxSize     : 0x190
  Offset      : 0x8df0
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array3D3IsET_PKS0_mmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0134:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rsi, -0x10(%rsp)
    00000013: 	testq	%rsi, %rsi
    00000016: 	je	.Ltmp644 # Offset: 22
    0000001c: 	movq	%rdx, %r11
    0000001f: 	movq	%rcx, %r12
    00000022: 	movq	%rcx, %r10
    00000025: 	movq	%rcx, %rdx
    00000028: 	movq	%r11, %rax
    0000002b: 	shrq	$0x3, %r12
    0000002f: 	leaq	(%rcx,%rcx), %rbx
    00000033: 	leaq	-0x1(%rcx), %rbp
    00000037: 	imulq	%rcx, %rax
    0000003b: 	shlq	$0x4, %r12
    0000003f: 	andq	$-0x8, %r10
    00000043: 	xorl	%r13d, %r13d
    00000046: 	xorl	%r14d, %r14d
    00000049: 	movq	%rax, -0x18(%rsp)
    0000004e: 	nop # Size: 2
.Ltmp650:
    00000050: 	testq	%r11, %r11
    00000053: 	je	.Ltmp645 # Offset: 83
    00000059: 	leaq	(%rdi,%r13,2), %rsi
    0000005d: 	movq	%r13, %rcx
    00000060: 	xorl	%r9d, %r9d
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp649:
    00000068: 	testq	%rdx, %rdx
    0000006b: 	je	.Ltmp646 # Offset: 107
    00000071: 	cmpq	$0x6, %rbp
    00000075: 	jbe	.Ltmp647 # Offset: 117
    0000007b: 	leaq	(%r12,%rsi), %r15
    0000007f: 	movq	%rsi, %rax
    00000082: 	pxor	%xmm0, %xmm0
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp648:
    00000090: 	movdqu	(%rax), %xmm2
    00000094: 	addq	$0x10, %rax
    00000098: 	paddw	%xmm2, %xmm0
    0000009c: 	cmpq	%r15, %rax
    0000009f: 	jne	.Ltmp648 # Offset: 159
    000000a1: 	movdqa	%xmm0, %xmm1
    000000a5: 	psrldq	$0x8, %xmm1
    000000aa: 	paddw	%xmm1, %xmm0
    000000ae: 	movdqa	%xmm0, %xmm1
    000000b2: 	psrldq	$0x4, %xmm1
    000000b7: 	paddw	%xmm1, %xmm0
    000000bb: 	movdqa	%xmm0, %xmm1
    000000bf: 	psrldq	$0x2, %xmm1
    000000c4: 	paddw	%xmm1, %xmm0
    000000c8: 	pextrw	$0x0, %xmm0, %eax
    000000cd: 	addl	%eax, %r8d
    000000d0: 	cmpq	%r10, %rdx
    000000d3: 	je	.Ltmp646 # Offset: 211
    000000d5: 	movq	%r10, %rax
.Ltmp651:
    000000d8: 	leaq	(%rax,%rcx), %r15
    000000dc: 	addw	(%rdi,%r15,2), %r8w
    000000e1: 	leaq	0x1(%rax), %r15
    000000e5: 	cmpq	%r15, %rdx
    000000e8: 	jbe	.Ltmp646 # Offset: 232
    000000ea: 	addq	%rcx, %r15
    000000ed: 	addw	(%rdi,%r15,2), %r8w
    000000f2: 	leaq	0x2(%rax), %r15
    000000f6: 	cmpq	%r15, %rdx
    000000f9: 	jbe	.Ltmp646 # Offset: 249
    000000fb: 	addq	%rcx, %r15
    000000fe: 	addw	(%rdi,%r15,2), %r8w
    00000103: 	leaq	0x3(%rax), %r15
    00000107: 	cmpq	%r15, %rdx
    0000010a: 	jbe	.Ltmp646 # Offset: 266
    0000010c: 	addq	%rcx, %r15
    0000010f: 	addw	(%rdi,%r15,2), %r8w
    00000114: 	leaq	0x4(%rax), %r15
    00000118: 	cmpq	%r15, %rdx
    0000011b: 	jbe	.Ltmp646 # Offset: 283
    0000011d: 	addq	%rcx, %r15
    00000120: 	addw	(%rdi,%r15,2), %r8w
    00000125: 	leaq	0x5(%rax), %r15
    00000129: 	cmpq	%r15, %rdx
    0000012c: 	jbe	.Ltmp646 # Offset: 300
    0000012e: 	addq	%rcx, %r15
    00000131: 	addq	$0x6, %rax
    00000135: 	addw	(%rdi,%r15,2), %r8w
    0000013a: 	cmpq	%rax, %rdx
    0000013d: 	jbe	.Ltmp646 # Offset: 317
    0000013f: 	addq	%rcx, %rax
    00000142: 	addw	(%rdi,%rax,2), %r8w
.Ltmp646:
    00000147: 	addq	$0x1, %r9
    0000014b: 	addq	%rdx, %rcx
    0000014e: 	addq	%rbx, %rsi
    00000151: 	cmpq	%r9, %r11
    00000154: 	jne	.Ltmp649 # Offset: 340
.Ltmp645:
    0000015a: 	addq	$0x1, %r14
    0000015e: 	addq	-0x18(%rsp), %r13
    00000163: 	cmpq	%r14, -0x10(%rsp)
    00000168: 	jne	.Ltmp650 # Offset: 360
.Ltmp644:
    0000016e: 	popq	%rbx
    0000016f: 	movl	%r8d, %eax
    00000172: 	popq	%rbp
    00000173: 	popq	%r12
    00000175: 	popq	%r13
    00000177: 	popq	%r14
    00000179: 	popq	%r15
    0000017b: 	retq # Offset: 379
.Ltmp647:
    0000017c: 	xorl	%eax, %eax
    0000017e: 	jmp	.Ltmp651 # Offset: 382
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array3D3IsET_PKS0_mmmS0_"

Binary Function "_Z19accumulate_array3D4IsET_PKS0_mmmS0_" after disassembly {
  Number      : 136
  State       : disassembled
  Address     : 0x8f80
  Size        : 0x157
  MaxSize     : 0x160
  Offset      : 0x8f80
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array3D4IsET_PKS0_mmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0135:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%r8d, %eax
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rsi, -0x10(%rsp)
    00000016: 	testq	%rsi, %rsi
    00000019: 	je	.Ltmp652 # Offset: 25
    0000001f: 	leaq	(%rcx,%rcx), %rbx
    00000023: 	movq	%rcx, %r13
    00000026: 	movq	%rcx, %r10
    00000029: 	movq	%rdi, %rbp
    0000002c: 	movq	%rbx, %r15
    0000002f: 	shrq	$0x3, %r13
    00000033: 	movq	%rdx, %r11
    00000036: 	movq	%rcx, %rsi
    00000039: 	imulq	%rdx, %r15
    0000003d: 	leaq	-0x1(%rcx), %r12
    00000041: 	shlq	$0x4, %r13
    00000045: 	andq	$-0x8, %r10
    00000049: 	xorl	%r14d, %r14d
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp658:
    00000050: 	movq	%rbp, %rdx
    00000053: 	xorl	%r8d, %r8d
    00000056: 	testq	%r11, %r11
    00000059: 	je	.Ltmp653 # Offset: 89
    0000005f: 	nop # Size: 1
.Ltmp657:
    00000060: 	testq	%rsi, %rsi
    00000063: 	je	.Ltmp654 # Offset: 99
    00000069: 	cmpq	$0x6, %r12
    0000006d: 	jbe	.Ltmp655 # Offset: 109
    00000073: 	movq	%rdx, %rcx
    00000076: 	leaq	(%r13,%rdx), %rdi
    0000007b: 	pxor	%xmm0, %xmm0
    0000007f: 	nop # Size: 1
.Ltmp656:
    00000080: 	movdqu	(%rcx), %xmm2
    00000084: 	addq	$0x10, %rcx
    00000088: 	paddw	%xmm2, %xmm0
    0000008c: 	cmpq	%rdi, %rcx
    0000008f: 	jne	.Ltmp656 # Offset: 143
    00000091: 	movdqa	%xmm0, %xmm1
    00000095: 	psrldq	$0x8, %xmm1
    0000009a: 	paddw	%xmm1, %xmm0
    0000009e: 	movdqa	%xmm0, %xmm1
    000000a2: 	psrldq	$0x4, %xmm1
    000000a7: 	paddw	%xmm1, %xmm0
    000000ab: 	movdqa	%xmm0, %xmm1
    000000af: 	psrldq	$0x2, %xmm1
    000000b4: 	paddw	%xmm1, %xmm0
    000000b8: 	pextrw	$0x0, %xmm0, %ecx
    000000bd: 	addl	%ecx, %eax
    000000bf: 	cmpq	%rsi, %r10
    000000c2: 	je	.Ltmp654 # Offset: 194
    000000c4: 	movq	%r10, %rcx
.Ltmp659:
    000000c7: 	leaq	0x1(%rcx), %r9
    000000cb: 	leaq	(%rcx,%rcx), %rdi
    000000cf: 	addw	(%rdx,%rcx,2), %ax
    000000d3: 	cmpq	%r9, %rsi
    000000d6: 	jbe	.Ltmp654 # Offset: 214
    000000d8: 	leaq	0x2(%rcx), %r9
    000000dc: 	addw	0x2(%rdx,%rdi), %ax
    000000e1: 	cmpq	%r9, %rsi
    000000e4: 	jbe	.Ltmp654 # Offset: 228
    000000e6: 	leaq	0x3(%rcx), %r9
    000000ea: 	addw	0x4(%rdx,%rdi), %ax
    000000ef: 	cmpq	%r9, %rsi
    000000f2: 	jbe	.Ltmp654 # Offset: 242
    000000f4: 	leaq	0x4(%rcx), %r9
    000000f8: 	addw	0x6(%rdx,%rdi), %ax
    000000fd: 	cmpq	%r9, %rsi
    00000100: 	jbe	.Ltmp654 # Offset: 256
    00000102: 	leaq	0x5(%rcx), %r9
    00000106: 	addw	0x8(%rdx,%rdi), %ax
    0000010b: 	cmpq	%r9, %rsi
    0000010e: 	jbe	.Ltmp654 # Offset: 270
    00000110: 	addq	$0x6, %rcx
    00000114: 	addw	0xa(%rdx,%rdi), %ax
    00000119: 	cmpq	%rcx, %rsi
    0000011c: 	jbe	.Ltmp654 # Offset: 284
    0000011e: 	addw	0xc(%rdx,%rdi), %ax
.Ltmp654:
    00000123: 	addq	$0x1, %r8
    00000127: 	addq	%rbx, %rdx
    0000012a: 	cmpq	%r8, %r11
    0000012d: 	jne	.Ltmp657 # Offset: 301
.Ltmp653:
    00000133: 	addq	%r15, %rbp
    00000136: 	addq	$0x1, %r14
    0000013a: 	cmpq	%r14, -0x10(%rsp)
    0000013f: 	jne	.Ltmp658 # Offset: 319
.Ltmp652:
    00000145: 	popq	%rbx
    00000146: 	popq	%rbp
    00000147: 	popq	%r12
    00000149: 	popq	%r13
    0000014b: 	popq	%r14
    0000014d: 	popq	%r15
    0000014f: 	retq # Offset: 335
.Ltmp655:
    00000150: 	xorl	%ecx, %ecx
    00000152: 	jmp	.Ltmp659 # Offset: 338
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array3D4IsET_PKS0_mmmS0_"

Binary Function "_Z19accumulate_array3D5IsET_PKS0_mmmS0_" after disassembly {
  Number      : 137
  State       : disassembled
  Address     : 0x90e0
  Size        : 0x155
  MaxSize     : 0x160
  Offset      : 0x90e0
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array3D5IsET_PKS0_mmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0136:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp660 # Offset: 7
    0000000d: 	movq	%rcx, %r10
    00000010: 	pushq	%r15
    00000012: 	movq	%rdx, %r11
    00000015: 	pushq	%r14
    00000017: 	andq	$-0x8, %r10
    0000001b: 	xorl	%r14d, %r14d
    0000001e: 	pushq	%r13
    00000020: 	leaq	(%r10,%r10), %r13
    00000024: 	pushq	%r12
    00000026: 	leaq	-0x1(%rcx), %r12
    0000002a: 	pushq	%rbp
    0000002b: 	movq	%rsi, %rbp
    0000002e: 	movq	%rcx, %rsi
    00000031: 	pushq	%rbx
    00000032: 	shrq	$0x3, %rsi
    00000036: 	leaq	(%rcx,%rcx), %rbx
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp667:
    00000040: 	xorl	%r9d, %r9d
    00000043: 	testq	%r11, %r11
    00000046: 	je	.Ltmp661 # Offset: 70
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp666:
    00000050: 	testq	%rcx, %rcx
    00000053: 	je	.Ltmp662 # Offset: 83
    00000059: 	cmpq	$0x6, %r12
    0000005d: 	jbe	.Ltmp663 # Offset: 93
    00000063: 	xorl	%eax, %eax
    00000065: 	pxor	%xmm0, %xmm0
    00000069: 	nopl	(%rax) # Size: 7
.Ltmp664:
    00000070: 	movq	%rax, %rdx
    00000073: 	addq	$0x1, %rax
    00000077: 	shlq	$0x4, %rdx
    0000007b: 	movdqu	(%rdi,%rdx), %xmm1
    00000080: 	paddw	%xmm1, %xmm0
    00000084: 	cmpq	%rax, %rsi
    00000087: 	jne	.Ltmp664 # Offset: 135
    00000089: 	movdqa	%xmm0, %xmm1
    0000008d: 	leaq	(%rdi,%r13), %rdx
    00000091: 	psrldq	$0x8, %xmm1
    00000096: 	paddw	%xmm1, %xmm0
    0000009a: 	movdqa	%xmm0, %xmm1
    0000009e: 	psrldq	$0x4, %xmm1
    000000a3: 	paddw	%xmm1, %xmm0
    000000a7: 	movdqa	%xmm0, %xmm1
    000000ab: 	psrldq	$0x2, %xmm1
    000000b0: 	paddw	%xmm1, %xmm0
    000000b4: 	pextrw	$0x0, %xmm0, %eax
    000000b9: 	addl	%eax, %r8d
    000000bc: 	cmpq	%r10, %rcx
    000000bf: 	je	.Ltmp665 # Offset: 191
    000000c1: 	movq	%r10, %rax
.Ltmp668:
    000000c4: 	leaq	0x1(%rax), %r15
    000000c8: 	addw	(%rdx), %r8w
    000000cc: 	cmpq	%r15, %rcx
    000000cf: 	jbe	.Ltmp665 # Offset: 207
    000000d1: 	leaq	0x2(%rax), %r15
    000000d5: 	addw	0x2(%rdx), %r8w
    000000da: 	cmpq	%r15, %rcx
    000000dd: 	jbe	.Ltmp665 # Offset: 221
    000000df: 	leaq	0x3(%rax), %r15
    000000e3: 	addw	0x4(%rdx), %r8w
    000000e8: 	cmpq	%r15, %rcx
    000000eb: 	jbe	.Ltmp665 # Offset: 235
    000000ed: 	leaq	0x4(%rax), %r15
    000000f1: 	addw	0x6(%rdx), %r8w
    000000f6: 	cmpq	%r15, %rcx
    000000f9: 	jbe	.Ltmp665 # Offset: 249
    000000fb: 	leaq	0x5(%rax), %r15
    000000ff: 	addw	0x8(%rdx), %r8w
    00000104: 	cmpq	%r15, %rcx
    00000107: 	jbe	.Ltmp665 # Offset: 263
    00000109: 	addq	$0x6, %rax
    0000010d: 	addw	0xa(%rdx), %r8w
    00000112: 	cmpq	%rax, %rcx
    00000115: 	jbe	.Ltmp665 # Offset: 277
    00000117: 	addw	0xc(%rdx), %r8w
.Ltmp665:
    0000011c: 	addq	%rbx, %rdi
.Ltmp662:
    0000011f: 	addq	$0x1, %r9
    00000123: 	cmpq	%r9, %r11
    00000126: 	jne	.Ltmp666 # Offset: 294
.Ltmp661:
    0000012c: 	addq	$0x1, %r14
    00000130: 	cmpq	%r14, %rbp
    00000133: 	jne	.Ltmp667 # Offset: 307
    00000139: 	popq	%rbx
    0000013a: 	movl	%r8d, %eax
    0000013d: 	popq	%rbp
    0000013e: 	popq	%r12
    00000140: 	popq	%r13
    00000142: 	popq	%r14
    00000144: 	popq	%r15
    00000146: 	retq # Offset: 326
.Ltmp663:
    00000147: 	movq	%rdi, %rdx
    0000014a: 	xorl	%eax, %eax
    0000014c: 	jmp	.Ltmp668 # Offset: 332
.Ltmp660:
    00000151: 	movl	%r8d, %eax
    00000154: 	retq # Offset: 340
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array3D5IsET_PKS0_mmmS0_"

Binary Function "_Z19accumulate_array3D6IsET_PKS0_mmmS0_" after disassembly {
  Number      : 138
  State       : disassembled
  Address     : 0x9240
  Size        : 0x155
  MaxSize     : 0x160
  Offset      : 0x9240
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array3D6IsET_PKS0_mmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0137:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp669 # Offset: 7
    0000000d: 	movq	%rcx, %r10
    00000010: 	pushq	%r15
    00000012: 	movq	%rdx, %r11
    00000015: 	pushq	%r14
    00000017: 	andq	$-0x8, %r10
    0000001b: 	xorl	%r14d, %r14d
    0000001e: 	pushq	%r13
    00000020: 	leaq	(%r10,%r10), %r13
    00000024: 	pushq	%r12
    00000026: 	leaq	-0x1(%rcx), %r12
    0000002a: 	pushq	%rbp
    0000002b: 	movq	%rsi, %rbp
    0000002e: 	movq	%rcx, %rsi
    00000031: 	pushq	%rbx
    00000032: 	shrq	$0x3, %rsi
    00000036: 	leaq	(%rcx,%rcx), %rbx
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp676:
    00000040: 	xorl	%r9d, %r9d
    00000043: 	testq	%r11, %r11
    00000046: 	je	.Ltmp670 # Offset: 70
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp675:
    00000050: 	testq	%rcx, %rcx
    00000053: 	je	.Ltmp671 # Offset: 83
    00000059: 	cmpq	$0x6, %r12
    0000005d: 	jbe	.Ltmp672 # Offset: 93
    00000063: 	xorl	%eax, %eax
    00000065: 	pxor	%xmm0, %xmm0
    00000069: 	nopl	(%rax) # Size: 7
.Ltmp673:
    00000070: 	movq	%rax, %rdx
    00000073: 	addq	$0x1, %rax
    00000077: 	shlq	$0x4, %rdx
    0000007b: 	movdqu	(%rdi,%rdx), %xmm1
    00000080: 	paddw	%xmm1, %xmm0
    00000084: 	cmpq	%rax, %rsi
    00000087: 	jne	.Ltmp673 # Offset: 135
    00000089: 	movdqa	%xmm0, %xmm1
    0000008d: 	leaq	(%rdi,%r13), %rdx
    00000091: 	psrldq	$0x8, %xmm1
    00000096: 	paddw	%xmm1, %xmm0
    0000009a: 	movdqa	%xmm0, %xmm1
    0000009e: 	psrldq	$0x4, %xmm1
    000000a3: 	paddw	%xmm1, %xmm0
    000000a7: 	movdqa	%xmm0, %xmm1
    000000ab: 	psrldq	$0x2, %xmm1
    000000b0: 	paddw	%xmm1, %xmm0
    000000b4: 	pextrw	$0x0, %xmm0, %eax
    000000b9: 	addl	%eax, %r8d
    000000bc: 	cmpq	%rcx, %r10
    000000bf: 	je	.Ltmp674 # Offset: 191
    000000c1: 	movq	%r10, %rax
.Ltmp677:
    000000c4: 	leaq	0x1(%rax), %r15
    000000c8: 	addw	(%rdx), %r8w
    000000cc: 	cmpq	%r15, %rcx
    000000cf: 	jbe	.Ltmp674 # Offset: 207
    000000d1: 	leaq	0x2(%rax), %r15
    000000d5: 	addw	0x2(%rdx), %r8w
    000000da: 	cmpq	%r15, %rcx
    000000dd: 	jbe	.Ltmp674 # Offset: 221
    000000df: 	leaq	0x3(%rax), %r15
    000000e3: 	addw	0x4(%rdx), %r8w
    000000e8: 	cmpq	%r15, %rcx
    000000eb: 	jbe	.Ltmp674 # Offset: 235
    000000ed: 	leaq	0x4(%rax), %r15
    000000f1: 	addw	0x6(%rdx), %r8w
    000000f6: 	cmpq	%r15, %rcx
    000000f9: 	jbe	.Ltmp674 # Offset: 249
    000000fb: 	leaq	0x5(%rax), %r15
    000000ff: 	addw	0x8(%rdx), %r8w
    00000104: 	cmpq	%r15, %rcx
    00000107: 	jbe	.Ltmp674 # Offset: 263
    00000109: 	addq	$0x6, %rax
    0000010d: 	addw	0xa(%rdx), %r8w
    00000112: 	cmpq	%rax, %rcx
    00000115: 	jbe	.Ltmp674 # Offset: 277
    00000117: 	addw	0xc(%rdx), %r8w
.Ltmp674:
    0000011c: 	addq	%rbx, %rdi
.Ltmp671:
    0000011f: 	addq	$0x1, %r9
    00000123: 	cmpq	%r9, %r11
    00000126: 	jne	.Ltmp675 # Offset: 294
.Ltmp670:
    0000012c: 	addq	$0x1, %r14
    00000130: 	cmpq	%r14, %rbp
    00000133: 	jne	.Ltmp676 # Offset: 307
    00000139: 	popq	%rbx
    0000013a: 	movl	%r8d, %eax
    0000013d: 	popq	%rbp
    0000013e: 	popq	%r12
    00000140: 	popq	%r13
    00000142: 	popq	%r14
    00000144: 	popq	%r15
    00000146: 	retq # Offset: 326
.Ltmp672:
    00000147: 	movq	%rdi, %rdx
    0000014a: 	xorl	%eax, %eax
    0000014c: 	jmp	.Ltmp677 # Offset: 332
.Ltmp669:
    00000151: 	movl	%r8d, %eax
    00000154: 	retq # Offset: 340
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array3D6IsET_PKS0_mmmS0_"

Binary Function "_Z19accumulate_array3D7IsET_PKS0_mmmS0_" after disassembly {
  Number      : 139
  State       : disassembled
  Address     : 0x93a0
  Size        : 0x15b
  MaxSize     : 0x160
  Offset      : 0x93a0
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array3D7IsET_PKS0_mmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0138:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rsi, -0x10(%rsp)
    00000013: 	testq	%rsi, %rsi
    00000016: 	je	.Ltmp678 # Offset: 22
    0000001c: 	leaq	(%rcx,%rcx), %r12
    00000020: 	movq	%rcx, %rsi
    00000023: 	movq	%rcx, %r11
    00000026: 	movq	%rdi, %rbp
    00000029: 	movq	%r12, %r15
    0000002c: 	movq	%rdx, %rbx
    0000002f: 	leaq	-0x1(%rcx), %r13
    00000033: 	shrq	$0x3, %rsi
    00000037: 	imulq	%rdx, %r15
    0000003b: 	andq	$-0x8, %r11
    0000003f: 	xorl	%r14d, %r14d
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp684:
    00000048: 	movq	%rbp, %rax
    0000004b: 	xorl	%r9d, %r9d
    0000004e: 	testq	%rbx, %rbx
    00000051: 	je	.Ltmp679 # Offset: 81
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp683:
    00000060: 	testq	%rcx, %rcx
    00000063: 	je	.Ltmp680 # Offset: 99
    00000069: 	xorl	%edx, %edx
    0000006b: 	cmpq	$0x6, %r13
    0000006f: 	jbe	.Ltmp681 # Offset: 111
    00000071: 	pxor	%xmm0, %xmm0
    00000075: 	nopl	(%rax) # Size: 3
.Ltmp682:
    00000078: 	movq	%rdx, %rdi
    0000007b: 	addq	$0x1, %rdx
    0000007f: 	shlq	$0x4, %rdi
    00000083: 	movdqu	(%rax,%rdi), %xmm1
    00000088: 	paddw	%xmm1, %xmm0
    0000008c: 	cmpq	%rdx, %rsi
    0000008f: 	jne	.Ltmp682 # Offset: 143
    00000091: 	movdqa	%xmm0, %xmm1
    00000095: 	psrldq	$0x8, %xmm1
    0000009a: 	paddw	%xmm1, %xmm0
    0000009e: 	movdqa	%xmm0, %xmm1
    000000a2: 	psrldq	$0x4, %xmm1
    000000a7: 	paddw	%xmm1, %xmm0
    000000ab: 	movdqa	%xmm0, %xmm1
    000000af: 	psrldq	$0x2, %xmm1
    000000b4: 	paddw	%xmm1, %xmm0
    000000b8: 	pextrw	$0x0, %xmm0, %edx
    000000bd: 	addl	%edx, %r8d
    000000c0: 	cmpq	%rcx, %r11
    000000c3: 	je	.Ltmp680 # Offset: 195
    000000c5: 	movq	%r11, %rdx
.Ltmp681:
    000000c8: 	leaq	0x1(%rdx), %r10
    000000cc: 	leaq	(%rdx,%rdx), %rdi
    000000d0: 	addw	(%rax,%rdx,2), %r8w
    000000d5: 	cmpq	%r10, %rcx
    000000d8: 	jbe	.Ltmp680 # Offset: 216
    000000da: 	leaq	0x2(%rdx), %r10
    000000de: 	addw	0x2(%rax,%rdi), %r8w
    000000e4: 	cmpq	%r10, %rcx
    000000e7: 	jbe	.Ltmp680 # Offset: 231
    000000e9: 	leaq	0x3(%rdx), %r10
    000000ed: 	addw	0x4(%rax,%rdi), %r8w
    000000f3: 	cmpq	%r10, %rcx
    000000f6: 	jbe	.Ltmp680 # Offset: 246
    000000f8: 	leaq	0x4(%rdx), %r10
    000000fc: 	addw	0x6(%rax,%rdi), %r8w
    00000102: 	cmpq	%r10, %rcx
    00000105: 	jbe	.Ltmp680 # Offset: 261
    00000107: 	leaq	0x5(%rdx), %r10
    0000010b: 	addw	0x8(%rax,%rdi), %r8w
    00000111: 	cmpq	%r10, %rcx
    00000114: 	jbe	.Ltmp680 # Offset: 276
    00000116: 	addq	$0x6, %rdx
    0000011a: 	addw	0xa(%rax,%rdi), %r8w
    00000120: 	cmpq	%rdx, %rcx
    00000123: 	jbe	.Ltmp680 # Offset: 291
    00000125: 	addw	0xc(%rax,%rdi), %r8w
.Ltmp680:
    0000012b: 	addq	$0x1, %r9
    0000012f: 	addq	%r12, %rax
    00000132: 	cmpq	%r9, %rbx
    00000135: 	jne	.Ltmp683 # Offset: 309
.Ltmp679:
    0000013b: 	addq	%r15, %rbp
    0000013e: 	addq	$0x1, %r14
    00000142: 	cmpq	%r14, -0x10(%rsp)
    00000147: 	jne	.Ltmp684 # Offset: 327
.Ltmp678:
    0000014d: 	popq	%rbx
    0000014e: 	movl	%r8d, %eax
    00000151: 	popq	%rbp
    00000152: 	popq	%r12
    00000154: 	popq	%r13
    00000156: 	popq	%r14
    00000158: 	popq	%r15
    0000015a: 	retq # Offset: 346
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array3D7IsET_PKS0_mmmS0_"

Binary Function "_Z19accumulate_array3D8IsET_PKS0_mmmS0_" after disassembly {
  Number      : 140
  State       : disassembled
  Address     : 0x9500
  Size        : 0x183
  MaxSize     : 0x190
  Offset      : 0x9500
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array3D8IsET_PKS0_mmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0139:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rsi, -0x10(%rsp)
    00000013: 	testq	%rsi, %rsi
    00000016: 	je	.Ltmp685 # Offset: 22
    0000001c: 	movq	%rdx, %r11
    0000001f: 	movq	%rcx, %r12
    00000022: 	movq	%rcx, %r10
    00000025: 	movq	%rcx, %rdx
    00000028: 	movq	%r11, %rax
    0000002b: 	shrq	$0x3, %r12
    0000002f: 	leaq	(%rcx,%rcx), %rbx
    00000033: 	leaq	-0x1(%rcx), %rbp
    00000037: 	imulq	%rcx, %rax
    0000003b: 	shlq	$0x4, %r12
    0000003f: 	andq	$-0x8, %r10
    00000043: 	xorl	%r13d, %r13d
    00000046: 	xorl	%r14d, %r14d
    00000049: 	movq	%rax, -0x18(%rsp)
    0000004e: 	nop # Size: 2
.Ltmp691:
    00000050: 	testq	%r11, %r11
    00000053: 	je	.Ltmp686 # Offset: 83
    00000059: 	leaq	(%rdi,%r13,2), %rsi
    0000005d: 	movq	%r13, %rcx
    00000060: 	xorl	%r9d, %r9d
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp690:
    00000068: 	testq	%rdx, %rdx
    0000006b: 	je	.Ltmp687 # Offset: 107
    00000071: 	cmpq	$0x6, %rbp
    00000075: 	jbe	.Ltmp688 # Offset: 117
    0000007b: 	leaq	(%r12,%rsi), %r15
    0000007f: 	movq	%rsi, %rax
    00000082: 	pxor	%xmm0, %xmm0
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp689:
    00000090: 	movdqu	(%rax), %xmm2
    00000094: 	addq	$0x10, %rax
    00000098: 	paddw	%xmm2, %xmm0
    0000009c: 	cmpq	%r15, %rax
    0000009f: 	jne	.Ltmp689 # Offset: 159
    000000a1: 	movdqa	%xmm0, %xmm1
    000000a5: 	psrldq	$0x8, %xmm1
    000000aa: 	paddw	%xmm1, %xmm0
    000000ae: 	movdqa	%xmm0, %xmm1
    000000b2: 	psrldq	$0x4, %xmm1
    000000b7: 	paddw	%xmm1, %xmm0
    000000bb: 	movdqa	%xmm0, %xmm1
    000000bf: 	psrldq	$0x2, %xmm1
    000000c4: 	paddw	%xmm1, %xmm0
    000000c8: 	pextrw	$0x0, %xmm0, %eax
    000000cd: 	addl	%eax, %r8d
    000000d0: 	cmpq	%r10, %rdx
    000000d3: 	je	.Ltmp687 # Offset: 211
    000000d5: 	movq	%r10, %rax
.Ltmp692:
    000000d8: 	leaq	(%rax,%rcx), %r15
    000000dc: 	addw	(%rdi,%r15,2), %r8w
    000000e1: 	leaq	0x1(%rax), %r15
    000000e5: 	cmpq	%r15, %rdx
    000000e8: 	jbe	.Ltmp687 # Offset: 232
    000000ea: 	addq	%rcx, %r15
    000000ed: 	addw	(%rdi,%r15,2), %r8w
    000000f2: 	leaq	0x2(%rax), %r15
    000000f6: 	cmpq	%r15, %rdx
    000000f9: 	jbe	.Ltmp687 # Offset: 249
    000000fb: 	addq	%rcx, %r15
    000000fe: 	addw	(%rdi,%r15,2), %r8w
    00000103: 	leaq	0x3(%rax), %r15
    00000107: 	cmpq	%r15, %rdx
    0000010a: 	jbe	.Ltmp687 # Offset: 266
    0000010c: 	addq	%rcx, %r15
    0000010f: 	addw	(%rdi,%r15,2), %r8w
    00000114: 	leaq	0x4(%rax), %r15
    00000118: 	cmpq	%r15, %rdx
    0000011b: 	jbe	.Ltmp687 # Offset: 283
    0000011d: 	addq	%rcx, %r15
    00000120: 	addw	(%rdi,%r15,2), %r8w
    00000125: 	leaq	0x5(%rax), %r15
    00000129: 	cmpq	%r15, %rdx
    0000012c: 	jbe	.Ltmp687 # Offset: 300
    0000012e: 	addq	%rcx, %r15
    00000131: 	addq	$0x6, %rax
    00000135: 	addw	(%rdi,%r15,2), %r8w
    0000013a: 	cmpq	%rax, %rdx
    0000013d: 	jbe	.Ltmp687 # Offset: 317
    0000013f: 	addq	%rcx, %rax
    00000142: 	addw	(%rdi,%rax,2), %r8w
.Ltmp687:
    00000147: 	addq	$0x1, %r9
    0000014b: 	addq	%rdx, %rcx
    0000014e: 	addq	%rbx, %rsi
    00000151: 	cmpq	%r9, %r11
    00000154: 	jne	.Ltmp690 # Offset: 340
.Ltmp686:
    0000015a: 	addq	$0x1, %r14
    0000015e: 	addq	-0x18(%rsp), %r13
    00000163: 	cmpq	%r14, -0x10(%rsp)
    00000168: 	jne	.Ltmp691 # Offset: 360
.Ltmp685:
    0000016e: 	popq	%rbx
    0000016f: 	movl	%r8d, %eax
    00000172: 	popq	%rbp
    00000173: 	popq	%r12
    00000175: 	popq	%r13
    00000177: 	popq	%r14
    00000179: 	popq	%r15
    0000017b: 	retq # Offset: 379
.Ltmp688:
    0000017c: 	xorl	%eax, %eax
    0000017e: 	jmp	.Ltmp692 # Offset: 382
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array3D8IsET_PKS0_mmmS0_"

Binary Function "_Z19accumulate_array3D9IsET_PKS0_mmmS0_" after disassembly {
  Number      : 141
  State       : disassembled
  Address     : 0x9690
  Size        : 0x183
  MaxSize     : 0x190
  Offset      : 0x9690
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array3D9IsET_PKS0_mmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0140:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rsi, -0x10(%rsp)
    00000013: 	testq	%rsi, %rsi
    00000016: 	je	.Ltmp693 # Offset: 22
    0000001c: 	movq	%rdx, %r11
    0000001f: 	movq	%rcx, %r12
    00000022: 	movq	%rcx, %r10
    00000025: 	movq	%rcx, %rdx
    00000028: 	movq	%r11, %rax
    0000002b: 	shrq	$0x3, %r12
    0000002f: 	leaq	(%rcx,%rcx), %rbx
    00000033: 	leaq	-0x1(%rcx), %rbp
    00000037: 	imulq	%rcx, %rax
    0000003b: 	shlq	$0x4, %r12
    0000003f: 	andq	$-0x8, %r10
    00000043: 	xorl	%r13d, %r13d
    00000046: 	xorl	%r14d, %r14d
    00000049: 	movq	%rax, -0x18(%rsp)
    0000004e: 	nop # Size: 2
.Ltmp699:
    00000050: 	testq	%r11, %r11
    00000053: 	je	.Ltmp694 # Offset: 83
    00000059: 	leaq	(%rdi,%r13,2), %rsi
    0000005d: 	movq	%r13, %rcx
    00000060: 	xorl	%r9d, %r9d
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp698:
    00000068: 	testq	%rdx, %rdx
    0000006b: 	je	.Ltmp695 # Offset: 107
    00000071: 	cmpq	$0x6, %rbp
    00000075: 	jbe	.Ltmp696 # Offset: 117
    0000007b: 	leaq	(%r12,%rsi), %r15
    0000007f: 	movq	%rsi, %rax
    00000082: 	pxor	%xmm0, %xmm0
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp697:
    00000090: 	movdqu	(%rax), %xmm2
    00000094: 	addq	$0x10, %rax
    00000098: 	paddw	%xmm2, %xmm0
    0000009c: 	cmpq	%r15, %rax
    0000009f: 	jne	.Ltmp697 # Offset: 159
    000000a1: 	movdqa	%xmm0, %xmm1
    000000a5: 	psrldq	$0x8, %xmm1
    000000aa: 	paddw	%xmm1, %xmm0
    000000ae: 	movdqa	%xmm0, %xmm1
    000000b2: 	psrldq	$0x4, %xmm1
    000000b7: 	paddw	%xmm1, %xmm0
    000000bb: 	movdqa	%xmm0, %xmm1
    000000bf: 	psrldq	$0x2, %xmm1
    000000c4: 	paddw	%xmm1, %xmm0
    000000c8: 	pextrw	$0x0, %xmm0, %eax
    000000cd: 	addl	%eax, %r8d
    000000d0: 	cmpq	%r10, %rdx
    000000d3: 	je	.Ltmp695 # Offset: 211
    000000d5: 	movq	%r10, %rax
.Ltmp700:
    000000d8: 	leaq	(%rax,%rcx), %r15
    000000dc: 	addw	(%rdi,%r15,2), %r8w
    000000e1: 	leaq	0x1(%rax), %r15
    000000e5: 	cmpq	%r15, %rdx
    000000e8: 	jbe	.Ltmp695 # Offset: 232
    000000ea: 	addq	%rcx, %r15
    000000ed: 	addw	(%rdi,%r15,2), %r8w
    000000f2: 	leaq	0x2(%rax), %r15
    000000f6: 	cmpq	%r15, %rdx
    000000f9: 	jbe	.Ltmp695 # Offset: 249
    000000fb: 	addq	%rcx, %r15
    000000fe: 	addw	(%rdi,%r15,2), %r8w
    00000103: 	leaq	0x3(%rax), %r15
    00000107: 	cmpq	%r15, %rdx
    0000010a: 	jbe	.Ltmp695 # Offset: 266
    0000010c: 	addq	%rcx, %r15
    0000010f: 	addw	(%rdi,%r15,2), %r8w
    00000114: 	leaq	0x4(%rax), %r15
    00000118: 	cmpq	%r15, %rdx
    0000011b: 	jbe	.Ltmp695 # Offset: 283
    0000011d: 	addq	%rcx, %r15
    00000120: 	addw	(%rdi,%r15,2), %r8w
    00000125: 	leaq	0x5(%rax), %r15
    00000129: 	cmpq	%r15, %rdx
    0000012c: 	jbe	.Ltmp695 # Offset: 300
    0000012e: 	addq	%rcx, %r15
    00000131: 	addq	$0x6, %rax
    00000135: 	addw	(%rdi,%r15,2), %r8w
    0000013a: 	cmpq	%rax, %rdx
    0000013d: 	jbe	.Ltmp695 # Offset: 317
    0000013f: 	addq	%rcx, %rax
    00000142: 	addw	(%rdi,%rax,2), %r8w
.Ltmp695:
    00000147: 	addq	$0x1, %r9
    0000014b: 	addq	%rdx, %rcx
    0000014e: 	addq	%rbx, %rsi
    00000151: 	cmpq	%r9, %r11
    00000154: 	jne	.Ltmp698 # Offset: 340
.Ltmp694:
    0000015a: 	addq	$0x1, %r14
    0000015e: 	addq	-0x18(%rsp), %r13
    00000163: 	cmpq	%r14, -0x10(%rsp)
    00000168: 	jne	.Ltmp699 # Offset: 360
.Ltmp693:
    0000016e: 	popq	%rbx
    0000016f: 	movl	%r8d, %eax
    00000172: 	popq	%rbp
    00000173: 	popq	%r12
    00000175: 	popq	%r13
    00000177: 	popq	%r14
    00000179: 	popq	%r15
    0000017b: 	retq # Offset: 379
.Ltmp696:
    0000017c: 	xorl	%eax, %eax
    0000017e: 	jmp	.Ltmp700 # Offset: 382
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array3D9IsET_PKS0_mmmS0_"

Binary Function "_Z19accumulate_array4D1IsET_PKS0_mmmmS0_" after disassembly {
  Number      : 142
  State       : disassembled
  Address     : 0x9820
  Size        : 0x100
  MaxSize     : 0x100
  Offset      : 0x9820
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array4D1IsET_PKS0_mmmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0141:
    00000000: 	endbr64
    00000004: 	imulq	%r8, %rcx
    00000008: 	imulq	%rdx, %rcx
    0000000c: 	imulq	%rsi, %rcx
    00000010: 	movq	%rcx, %r8
    00000013: 	testq	%rcx, %rcx
    00000016: 	je	.Ltmp701 # Offset: 22
    0000001c: 	leaq	-0x1(%rcx), %rax
    00000020: 	cmpq	$0x6, %rax
    00000024: 	jbe	.Ltmp702 # Offset: 36
    0000002a: 	movq	%rcx, %rax
    0000002d: 	movq	%rdi, %rdx
    00000030: 	pxor	%xmm0, %xmm0
    00000034: 	shrq	$0x3, %rax
    00000038: 	shlq	$0x4, %rax
    0000003c: 	addq	%rdi, %rax
    0000003f: 	nop # Size: 1
.Ltmp703:
    00000040: 	movdqu	(%rdx), %xmm2
    00000044: 	addq	$0x10, %rdx
    00000048: 	paddw	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rdx
    0000004f: 	jne	.Ltmp703 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	movq	%r8, %rdx
    00000058: 	psrldq	$0x8, %xmm1
    0000005d: 	andq	$-0x8, %rdx
    00000061: 	paddw	%xmm1, %xmm0
    00000065: 	movdqa	%xmm0, %xmm1
    00000069: 	psrldq	$0x4, %xmm1
    0000006e: 	paddw	%xmm1, %xmm0
    00000072: 	movdqa	%xmm0, %xmm1
    00000076: 	psrldq	$0x2, %xmm1
    0000007b: 	paddw	%xmm1, %xmm0
    0000007f: 	pextrw	$0x0, %xmm0, %eax
    00000084: 	addl	%r9d, %eax
    00000087: 	testb	$0x7, %r8b
    0000008b: 	je	.Ltmp704 # Offset: 139
.Ltmp706:
    0000008d: 	leaq	0x1(%rdx), %rsi
    00000091: 	leaq	(%rdx,%rdx), %rcx
    00000095: 	addw	(%rdi,%rdx,2), %ax
    00000099: 	cmpq	%rsi, %r8
    0000009c: 	jbe	.Ltmp705 # Offset: 156
    0000009e: 	leaq	0x2(%rdx), %rsi
    000000a2: 	addw	0x2(%rdi,%rcx), %ax
    000000a7: 	cmpq	%rsi, %r8
    000000aa: 	jbe	.Ltmp705 # Offset: 170
    000000ac: 	leaq	0x3(%rdx), %rsi
    000000b0: 	addw	0x4(%rdi,%rcx), %ax
    000000b5: 	cmpq	%rsi, %r8
    000000b8: 	jbe	.Ltmp705 # Offset: 184
    000000ba: 	leaq	0x4(%rdx), %rsi
    000000be: 	addw	0x6(%rdi,%rcx), %ax
    000000c3: 	cmpq	%rsi, %r8
    000000c6: 	jbe	.Ltmp705 # Offset: 198
    000000c8: 	leaq	0x5(%rdx), %rsi
    000000cc: 	addw	0x8(%rdi,%rcx), %ax
    000000d1: 	cmpq	%rsi, %r8
    000000d4: 	jbe	.Ltmp705 # Offset: 212
    000000d6: 	addq	$0x6, %rdx
    000000da: 	addw	0xa(%rdi,%rcx), %ax
    000000df: 	cmpq	%rdx, %r8
    000000e2: 	jbe	.Ltmp705 # Offset: 226
    000000e4: 	addw	0xc(%rdi,%rcx), %ax
    000000e9: 	retq # Offset: 233
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp701:
    000000f0: 	movl	%r9d, %eax
.Ltmp705:
    000000f3: 	retq # Offset: 243
    000000f4: 	nopl	(%rax) # Size: 4
.Ltmp704:
    000000f8: 	retq # Offset: 248
.Ltmp702:
    000000f9: 	movl	%r9d, %eax
    000000fc: 	xorl	%edx, %edx
    000000fe: 	jmp	.Ltmp706 # Offset: 254
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array4D1IsET_PKS0_mmmmS0_"

Binary Function "_Z19accumulate_array4D2IsET_PKS0_mmmmS0_" after disassembly {
  Number      : 143
  State       : disassembled
  Address     : 0x9920
  Size        : 0x1d3
  MaxSize     : 0x1e0
  Offset      : 0x9920
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array4D2IsET_PKS0_mmmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0142:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rdx, %rbx
    00000011: 	movq	%rdx, -0x38(%rsp)
    00000016: 	movq	%r8, %rdx
    00000019: 	movl	%r9d, %r8d
    0000001c: 	movq	%rsi, -0x10(%rsp)
    00000021: 	testq	%rsi, %rsi
    00000024: 	je	.Ltmp707 # Offset: 36
    0000002a: 	movq	%rcx, %rax
    0000002d: 	movq	%rdx, %r12
    00000030: 	movq	%rdx, %r10
    00000033: 	movq	%rcx, %r11
    00000036: 	imulq	%rdx, %rax
    0000003a: 	shrq	$0x3, %r12
    0000003e: 	leaq	-0x1(%rdx), %rbp
    00000042: 	andq	$-0x8, %r10
    00000046: 	movq	$0x0, -0x20(%rsp)
    0000004f: 	shlq	$0x4, %r12
    00000053: 	movq	$0x0, -0x28(%rsp)
    0000005c: 	imulq	%rax, %rbx
    00000060: 	movq	%rax, -0x30(%rsp)
    00000065: 	movq	%rbx, -0x18(%rsp)
    0000006a: 	leaq	(%rdx,%rdx), %rbx
.Ltmp715:
    0000006e: 	xorl	%r14d, %r14d
    00000071: 	cmpq	$0x0, -0x38(%rsp)
    00000077: 	movq	-0x20(%rsp), %r13
    0000007c: 	je	.Ltmp708 # Offset: 124
    00000082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp714:
    00000088: 	testq	%r11, %r11
    0000008b: 	je	.Ltmp709 # Offset: 139
    00000091: 	leaq	(%rdi,%r13,2), %rsi
    00000095: 	movq	%r13, %rcx
    00000098: 	xorl	%r9d, %r9d
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp713:
    000000a0: 	testq	%rdx, %rdx
    000000a3: 	je	.Ltmp710 # Offset: 163
    000000a9: 	cmpq	$0x6, %rbp
    000000ad: 	jbe	.Ltmp711 # Offset: 173
    000000b3: 	leaq	(%r12,%rsi), %r15
    000000b7: 	movq	%rsi, %rax
    000000ba: 	pxor	%xmm0, %xmm0
    000000be: 	nop # Size: 2
.Ltmp712:
    000000c0: 	movdqu	(%rax), %xmm2
    000000c4: 	addq	$0x10, %rax
    000000c8: 	paddw	%xmm2, %xmm0
    000000cc: 	cmpq	%r15, %rax
    000000cf: 	jne	.Ltmp712 # Offset: 207
    000000d1: 	movdqa	%xmm0, %xmm1
    000000d5: 	psrldq	$0x8, %xmm1
    000000da: 	paddw	%xmm1, %xmm0
    000000de: 	movdqa	%xmm0, %xmm1
    000000e2: 	psrldq	$0x4, %xmm1
    000000e7: 	paddw	%xmm1, %xmm0
    000000eb: 	movdqa	%xmm0, %xmm1
    000000ef: 	psrldq	$0x2, %xmm1
    000000f4: 	paddw	%xmm1, %xmm0
    000000f8: 	pextrw	$0x0, %xmm0, %eax
    000000fd: 	addl	%eax, %r8d
    00000100: 	cmpq	%rdx, %r10
    00000103: 	je	.Ltmp710 # Offset: 259
    00000105: 	movq	%r10, %rax
.Ltmp716:
    00000108: 	leaq	(%rax,%rcx), %r15
    0000010c: 	addw	(%rdi,%r15,2), %r8w
    00000111: 	leaq	0x1(%rax), %r15
    00000115: 	cmpq	%r15, %rdx
    00000118: 	jbe	.Ltmp710 # Offset: 280
    0000011a: 	addq	%rcx, %r15
    0000011d: 	addw	(%rdi,%r15,2), %r8w
    00000122: 	leaq	0x2(%rax), %r15
    00000126: 	cmpq	%r15, %rdx
    00000129: 	jbe	.Ltmp710 # Offset: 297
    0000012b: 	addq	%rcx, %r15
    0000012e: 	addw	(%rdi,%r15,2), %r8w
    00000133: 	leaq	0x3(%rax), %r15
    00000137: 	cmpq	%r15, %rdx
    0000013a: 	jbe	.Ltmp710 # Offset: 314
    0000013c: 	addq	%rcx, %r15
    0000013f: 	addw	(%rdi,%r15,2), %r8w
    00000144: 	leaq	0x4(%rax), %r15
    00000148: 	cmpq	%r15, %rdx
    0000014b: 	jbe	.Ltmp710 # Offset: 331
    0000014d: 	addq	%rcx, %r15
    00000150: 	addw	(%rdi,%r15,2), %r8w
    00000155: 	leaq	0x5(%rax), %r15
    00000159: 	cmpq	%r15, %rdx
    0000015c: 	jbe	.Ltmp710 # Offset: 348
    0000015e: 	addq	%rcx, %r15
    00000161: 	addq	$0x6, %rax
    00000165: 	addw	(%rdi,%r15,2), %r8w
    0000016a: 	cmpq	%rax, %rdx
    0000016d: 	jbe	.Ltmp710 # Offset: 365
    0000016f: 	addq	%rcx, %rax
    00000172: 	addw	(%rdi,%rax,2), %r8w
.Ltmp710:
    00000177: 	addq	$0x1, %r9
    0000017b: 	addq	%rdx, %rcx
    0000017e: 	addq	%rbx, %rsi
    00000181: 	cmpq	%r9, %r11
    00000184: 	jne	.Ltmp713 # Offset: 388
.Ltmp709:
    0000018a: 	addq	$0x1, %r14
    0000018e: 	addq	-0x30(%rsp), %r13
    00000193: 	cmpq	%r14, -0x38(%rsp)
    00000198: 	jne	.Ltmp714 # Offset: 408
.Ltmp708:
    0000019e: 	addq	$0x1, -0x28(%rsp)
    000001a4: 	movq	-0x18(%rsp), %rcx
    000001a9: 	movq	-0x28(%rsp), %rax
    000001ae: 	addq	%rcx, -0x20(%rsp)
    000001b3: 	cmpq	%rax, -0x10(%rsp)
    000001b8: 	jne	.Ltmp715 # Offset: 440
.Ltmp707:
    000001be: 	popq	%rbx
    000001bf: 	movl	%r8d, %eax
    000001c2: 	popq	%rbp
    000001c3: 	popq	%r12
    000001c5: 	popq	%r13
    000001c7: 	popq	%r14
    000001c9: 	popq	%r15
    000001cb: 	retq # Offset: 459
.Ltmp711:
    000001cc: 	xorl	%eax, %eax
    000001ce: 	jmp	.Ltmp716 # Offset: 462
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array4D2IsET_PKS0_mmmmS0_"

Binary Function "_Z19accumulate_array4D3IsET_PKS0_mmmmS0_" after disassembly {
  Number      : 144
  State       : disassembled
  Address     : 0x9b00
  Size        : 0x1d3
  MaxSize     : 0x1e0
  Offset      : 0x9b00
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array4D3IsET_PKS0_mmmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0143:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rdx, %rbx
    00000011: 	movq	%rdx, -0x38(%rsp)
    00000016: 	movq	%r8, %rdx
    00000019: 	movl	%r9d, %r8d
    0000001c: 	movq	%rsi, -0x10(%rsp)
    00000021: 	testq	%rsi, %rsi
    00000024: 	je	.Ltmp717 # Offset: 36
    0000002a: 	movq	%rcx, %rax
    0000002d: 	movq	%rdx, %r12
    00000030: 	movq	%rdx, %r10
    00000033: 	movq	%rcx, %r11
    00000036: 	imulq	%rdx, %rax
    0000003a: 	shrq	$0x3, %r12
    0000003e: 	leaq	-0x1(%rdx), %rbp
    00000042: 	andq	$-0x8, %r10
    00000046: 	movq	$0x0, -0x20(%rsp)
    0000004f: 	shlq	$0x4, %r12
    00000053: 	movq	$0x0, -0x28(%rsp)
    0000005c: 	movq	%rax, -0x30(%rsp)
    00000061: 	imulq	%rbx, %rax
    00000065: 	leaq	(%rdx,%rdx), %rbx
    00000069: 	movq	%rax, -0x18(%rsp)
.Ltmp725:
    0000006e: 	cmpq	$0x0, -0x38(%rsp)
    00000074: 	je	.Ltmp718 # Offset: 116
    0000007a: 	movq	-0x20(%rsp), %r13
    0000007f: 	xorl	%r14d, %r14d
    00000082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp724:
    00000088: 	testq	%r11, %r11
    0000008b: 	je	.Ltmp719 # Offset: 139
    00000091: 	leaq	(%rdi,%r13,2), %rsi
    00000095: 	movq	%r13, %rcx
    00000098: 	xorl	%r9d, %r9d
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp723:
    000000a0: 	testq	%rdx, %rdx
    000000a3: 	je	.Ltmp720 # Offset: 163
    000000a9: 	cmpq	$0x6, %rbp
    000000ad: 	jbe	.Ltmp721 # Offset: 173
    000000b3: 	leaq	(%r12,%rsi), %r15
    000000b7: 	movq	%rsi, %rax
    000000ba: 	pxor	%xmm0, %xmm0
    000000be: 	nop # Size: 2
.Ltmp722:
    000000c0: 	movdqu	(%rax), %xmm2
    000000c4: 	addq	$0x10, %rax
    000000c8: 	paddw	%xmm2, %xmm0
    000000cc: 	cmpq	%r15, %rax
    000000cf: 	jne	.Ltmp722 # Offset: 207
    000000d1: 	movdqa	%xmm0, %xmm1
    000000d5: 	psrldq	$0x8, %xmm1
    000000da: 	paddw	%xmm1, %xmm0
    000000de: 	movdqa	%xmm0, %xmm1
    000000e2: 	psrldq	$0x4, %xmm1
    000000e7: 	paddw	%xmm1, %xmm0
    000000eb: 	movdqa	%xmm0, %xmm1
    000000ef: 	psrldq	$0x2, %xmm1
    000000f4: 	paddw	%xmm1, %xmm0
    000000f8: 	pextrw	$0x0, %xmm0, %eax
    000000fd: 	addl	%eax, %r8d
    00000100: 	cmpq	%r10, %rdx
    00000103: 	je	.Ltmp720 # Offset: 259
    00000105: 	movq	%r10, %rax
.Ltmp726:
    00000108: 	leaq	(%rax,%rcx), %r15
    0000010c: 	addw	(%rdi,%r15,2), %r8w
    00000111: 	leaq	0x1(%rax), %r15
    00000115: 	cmpq	%r15, %rdx
    00000118: 	jbe	.Ltmp720 # Offset: 280
    0000011a: 	addq	%rcx, %r15
    0000011d: 	addw	(%rdi,%r15,2), %r8w
    00000122: 	leaq	0x2(%rax), %r15
    00000126: 	cmpq	%r15, %rdx
    00000129: 	jbe	.Ltmp720 # Offset: 297
    0000012b: 	addq	%rcx, %r15
    0000012e: 	addw	(%rdi,%r15,2), %r8w
    00000133: 	leaq	0x3(%rax), %r15
    00000137: 	cmpq	%r15, %rdx
    0000013a: 	jbe	.Ltmp720 # Offset: 314
    0000013c: 	addq	%rcx, %r15
    0000013f: 	addw	(%rdi,%r15,2), %r8w
    00000144: 	leaq	0x4(%rax), %r15
    00000148: 	cmpq	%r15, %rdx
    0000014b: 	jbe	.Ltmp720 # Offset: 331
    0000014d: 	addq	%rcx, %r15
    00000150: 	addw	(%rdi,%r15,2), %r8w
    00000155: 	leaq	0x5(%rax), %r15
    00000159: 	cmpq	%r15, %rdx
    0000015c: 	jbe	.Ltmp720 # Offset: 348
    0000015e: 	addq	%rcx, %r15
    00000161: 	addq	$0x6, %rax
    00000165: 	addw	(%rdi,%r15,2), %r8w
    0000016a: 	cmpq	%rax, %rdx
    0000016d: 	jbe	.Ltmp720 # Offset: 365
    0000016f: 	addq	%rcx, %rax
    00000172: 	addw	(%rdi,%rax,2), %r8w
.Ltmp720:
    00000177: 	addq	$0x1, %r9
    0000017b: 	addq	%rdx, %rcx
    0000017e: 	addq	%rbx, %rsi
    00000181: 	cmpq	%r9, %r11
    00000184: 	jne	.Ltmp723 # Offset: 388
.Ltmp719:
    0000018a: 	addq	$0x1, %r14
    0000018e: 	addq	-0x30(%rsp), %r13
    00000193: 	cmpq	%r14, -0x38(%rsp)
    00000198: 	jne	.Ltmp724 # Offset: 408
.Ltmp718:
    0000019e: 	addq	$0x1, -0x28(%rsp)
    000001a4: 	movq	-0x18(%rsp), %rcx
    000001a9: 	movq	-0x28(%rsp), %rax
    000001ae: 	addq	%rcx, -0x20(%rsp)
    000001b3: 	cmpq	%rax, -0x10(%rsp)
    000001b8: 	jne	.Ltmp725 # Offset: 440
.Ltmp717:
    000001be: 	popq	%rbx
    000001bf: 	movl	%r8d, %eax
    000001c2: 	popq	%rbp
    000001c3: 	popq	%r12
    000001c5: 	popq	%r13
    000001c7: 	popq	%r14
    000001c9: 	popq	%r15
    000001cb: 	retq # Offset: 459
.Ltmp721:
    000001cc: 	xorl	%eax, %eax
    000001ce: 	jmp	.Ltmp726 # Offset: 462
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array4D3IsET_PKS0_mmmmS0_"

Binary Function "_Z19accumulate_array4D4IsET_PKS0_mmmmS0_" after disassembly {
  Number      : 145
  State       : disassembled
  Address     : 0x9ce0
  Size        : 0x1a7
  MaxSize     : 0x1b0
  Offset      : 0x9ce0
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array4D4IsET_PKS0_mmmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0144:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%r9d, %eax
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, -0x20(%rsp)
    00000016: 	movq	%rsi, -0x10(%rsp)
    0000001b: 	movq	%rdx, -0x30(%rsp)
    00000020: 	testq	%rsi, %rsi
    00000023: 	je	.Ltmp727 # Offset: 35
    00000029: 	movq	%rdx, %rdi
    0000002c: 	movq	%rcx, %rdx
    0000002f: 	movq	%r8, %r12
    00000032: 	movq	%r8, %r10
    00000035: 	imulq	%r8, %rdx
    00000039: 	shrq	$0x3, %r12
    0000003d: 	movq	%rcx, %r11
    00000040: 	movq	%r8, %rsi
    00000043: 	leaq	(%r8,%r8), %rbx
    00000047: 	leaq	-0x1(%r8), %rbp
    0000004b: 	shlq	$0x4, %r12
    0000004f: 	andq	$-0x8, %r10
    00000053: 	movq	$0x0, -0x28(%rsp)
    0000005c: 	leaq	(%rdx,%rdx), %r15
    00000060: 	imulq	%rdi, %rdx
    00000064: 	addq	%rdx, %rdx
    00000067: 	movq	%rdx, -0x18(%rsp)
.Ltmp735:
    0000006c: 	xorl	%r13d, %r13d
    0000006f: 	cmpq	$0x0, -0x30(%rsp)
    00000075: 	movq	-0x20(%rsp), %r14
    0000007a: 	je	.Ltmp728 # Offset: 122
.Ltmp734:
    00000080: 	movq	%r14, %rdx
    00000083: 	xorl	%r8d, %r8d
    00000086: 	testq	%r11, %r11
    00000089: 	je	.Ltmp729 # Offset: 137
    0000008f: 	nop # Size: 1
.Ltmp733:
    00000090: 	testq	%rsi, %rsi
    00000093: 	je	.Ltmp730 # Offset: 147
    00000099: 	cmpq	$0x6, %rbp
    0000009d: 	jbe	.Ltmp731 # Offset: 157
    000000a3: 	movq	%rdx, %rcx
    000000a6: 	leaq	(%r12,%rdx), %rdi
    000000aa: 	pxor	%xmm0, %xmm0
    000000ae: 	nop # Size: 2
.Ltmp732:
    000000b0: 	movdqu	(%rcx), %xmm2
    000000b4: 	addq	$0x10, %rcx
    000000b8: 	paddw	%xmm2, %xmm0
    000000bc: 	cmpq	%rdi, %rcx
    000000bf: 	jne	.Ltmp732 # Offset: 191
    000000c1: 	movdqa	%xmm0, %xmm1
    000000c5: 	psrldq	$0x8, %xmm1
    000000ca: 	paddw	%xmm1, %xmm0
    000000ce: 	movdqa	%xmm0, %xmm1
    000000d2: 	psrldq	$0x4, %xmm1
    000000d7: 	paddw	%xmm1, %xmm0
    000000db: 	movdqa	%xmm0, %xmm1
    000000df: 	psrldq	$0x2, %xmm1
    000000e4: 	paddw	%xmm1, %xmm0
    000000e8: 	pextrw	$0x0, %xmm0, %ecx
    000000ed: 	addl	%ecx, %eax
    000000ef: 	cmpq	%rsi, %r10
    000000f2: 	je	.Ltmp730 # Offset: 242
    000000f4: 	movq	%r10, %rcx
.Ltmp736:
    000000f7: 	leaq	0x1(%rcx), %r9
    000000fb: 	leaq	(%rcx,%rcx), %rdi
    000000ff: 	addw	(%rdx,%rcx,2), %ax
    00000103: 	cmpq	%r9, %rsi
    00000106: 	jbe	.Ltmp730 # Offset: 262
    00000108: 	leaq	0x2(%rcx), %r9
    0000010c: 	addw	0x2(%rdx,%rdi), %ax
    00000111: 	cmpq	%r9, %rsi
    00000114: 	jbe	.Ltmp730 # Offset: 276
    00000116: 	leaq	0x3(%rcx), %r9
    0000011a: 	addw	0x4(%rdx,%rdi), %ax
    0000011f: 	cmpq	%r9, %rsi
    00000122: 	jbe	.Ltmp730 # Offset: 290
    00000124: 	leaq	0x4(%rcx), %r9
    00000128: 	addw	0x6(%rdx,%rdi), %ax
    0000012d: 	cmpq	%r9, %rsi
    00000130: 	jbe	.Ltmp730 # Offset: 304
    00000132: 	leaq	0x5(%rcx), %r9
    00000136: 	addw	0x8(%rdx,%rdi), %ax
    0000013b: 	cmpq	%r9, %rsi
    0000013e: 	jbe	.Ltmp730 # Offset: 318
    00000140: 	addq	$0x6, %rcx
    00000144: 	addw	0xa(%rdx,%rdi), %ax
    00000149: 	cmpq	%rcx, %rsi
    0000014c: 	jbe	.Ltmp730 # Offset: 332
    0000014e: 	addw	0xc(%rdx,%rdi), %ax
.Ltmp730:
    00000153: 	addq	$0x1, %r8
    00000157: 	addq	%rbx, %rdx
    0000015a: 	cmpq	%r8, %r11
    0000015d: 	jne	.Ltmp733 # Offset: 349
.Ltmp729:
    00000163: 	addq	%r15, %r14
    00000166: 	addq	$0x1, %r13
    0000016a: 	cmpq	%r13, -0x30(%rsp)
    0000016f: 	jne	.Ltmp734 # Offset: 367
.Ltmp728:
    00000175: 	addq	$0x1, -0x28(%rsp)
    0000017b: 	movq	-0x18(%rsp), %rdi
    00000180: 	movq	-0x28(%rsp), %rdx
    00000185: 	addq	%rdi, -0x20(%rsp)
    0000018a: 	cmpq	%rdx, -0x10(%rsp)
    0000018f: 	jne	.Ltmp735 # Offset: 399
.Ltmp727:
    00000195: 	popq	%rbx
    00000196: 	popq	%rbp
    00000197: 	popq	%r12
    00000199: 	popq	%r13
    0000019b: 	popq	%r14
    0000019d: 	popq	%r15
    0000019f: 	retq # Offset: 415
.Ltmp731:
    000001a0: 	xorl	%ecx, %ecx
    000001a2: 	jmp	.Ltmp736 # Offset: 418
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array4D4IsET_PKS0_mmmmS0_"

Binary Function "_Z19accumulate_array4D5IsET_PKS0_mmmmS0_" after disassembly {
  Number      : 146
  State       : disassembled
  Address     : 0x9e90
  Size        : 0x174
  MaxSize     : 0x180
  Offset      : 0x9e90
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array4D5IsET_PKS0_mmmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0145:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%r9d, %eax
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rsi, -0x10(%rsp)
    00000016: 	testq	%rsi, %rsi
    00000019: 	je	.Ltmp737 # Offset: 25
    0000001f: 	movq	%rdx, %r12
    00000022: 	movq	%r8, %rdx
    00000025: 	leaq	-0x1(%r8), %r13
    00000029: 	movq	%rcx, %rbx
    0000002c: 	movq	%rdx, %r11
    0000002f: 	shrq	$0x3, %r8
    00000033: 	leaq	(%rdx,%rdx), %rbp
    00000037: 	movq	$0x0, -0x18(%rsp)
    00000040: 	andq	$-0x8, %r11
    00000044: 	leaq	(%r11,%r11), %r14
.Ltmp746:
    00000048: 	xorl	%r15d, %r15d
    0000004b: 	testq	%r12, %r12
    0000004e: 	je	.Ltmp738 # Offset: 78
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp745:
    00000058: 	xorl	%r9d, %r9d
    0000005b: 	testq	%rbx, %rbx
    0000005e: 	je	.Ltmp739 # Offset: 94
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp744:
    00000068: 	testq	%rdx, %rdx
    0000006b: 	je	.Ltmp740 # Offset: 107
    00000071: 	cmpq	$0x6, %r13
    00000075: 	jbe	.Ltmp741 # Offset: 117
    0000007b: 	xorl	%ecx, %ecx
    0000007d: 	pxor	%xmm0, %xmm0
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp742:
    00000088: 	movq	%rcx, %rsi
    0000008b: 	addq	$0x1, %rcx
    0000008f: 	shlq	$0x4, %rsi
    00000093: 	movdqu	(%rdi,%rsi), %xmm1
    00000098: 	paddw	%xmm1, %xmm0
    0000009c: 	cmpq	%rcx, %r8
    0000009f: 	jne	.Ltmp742 # Offset: 159
    000000a1: 	movdqa	%xmm0, %xmm1
    000000a5: 	leaq	(%rdi,%r14), %rsi
    000000a9: 	psrldq	$0x8, %xmm1
    000000ae: 	paddw	%xmm1, %xmm0
    000000b2: 	movdqa	%xmm0, %xmm1
    000000b6: 	psrldq	$0x4, %xmm1
    000000bb: 	paddw	%xmm1, %xmm0
    000000bf: 	movdqa	%xmm0, %xmm1
    000000c3: 	psrldq	$0x2, %xmm1
    000000c8: 	paddw	%xmm1, %xmm0
    000000cc: 	pextrw	$0x0, %xmm0, %ecx
    000000d1: 	addl	%ecx, %eax
    000000d3: 	cmpq	%r11, %rdx
    000000d6: 	je	.Ltmp743 # Offset: 214
    000000d8: 	movq	%r11, %rcx
.Ltmp747:
    000000db: 	leaq	0x1(%rcx), %r10
    000000df: 	addw	(%rsi), %ax
    000000e2: 	cmpq	%r10, %rdx
    000000e5: 	jbe	.Ltmp743 # Offset: 229
    000000e7: 	leaq	0x2(%rcx), %r10
    000000eb: 	addw	0x2(%rsi), %ax
    000000ef: 	cmpq	%r10, %rdx
    000000f2: 	jbe	.Ltmp743 # Offset: 242
    000000f4: 	leaq	0x3(%rcx), %r10
    000000f8: 	addw	0x4(%rsi), %ax
    000000fc: 	cmpq	%r10, %rdx
    000000ff: 	jbe	.Ltmp743 # Offset: 255
    00000101: 	leaq	0x4(%rcx), %r10
    00000105: 	addw	0x6(%rsi), %ax
    00000109: 	cmpq	%r10, %rdx
    0000010c: 	jbe	.Ltmp743 # Offset: 268
    0000010e: 	leaq	0x5(%rcx), %r10
    00000112: 	addw	0x8(%rsi), %ax
    00000116: 	cmpq	%r10, %rdx
    00000119: 	jbe	.Ltmp743 # Offset: 281
    0000011b: 	addq	$0x6, %rcx
    0000011f: 	addw	0xa(%rsi), %ax
    00000123: 	cmpq	%rcx, %rdx
    00000126: 	jbe	.Ltmp743 # Offset: 294
    00000128: 	addw	0xc(%rsi), %ax
.Ltmp743:
    0000012c: 	addq	%rbp, %rdi
.Ltmp740:
    0000012f: 	addq	$0x1, %r9
    00000133: 	cmpq	%r9, %rbx
    00000136: 	jne	.Ltmp744 # Offset: 310
.Ltmp739:
    0000013c: 	addq	$0x1, %r15
    00000140: 	cmpq	%r15, %r12
    00000143: 	jne	.Ltmp745 # Offset: 323
.Ltmp738:
    00000149: 	addq	$0x1, -0x18(%rsp)
    0000014f: 	movq	-0x18(%rsp), %rcx
    00000154: 	cmpq	%rcx, -0x10(%rsp)
    00000159: 	jne	.Ltmp746 # Offset: 345
.Ltmp737:
    0000015f: 	popq	%rbx
    00000160: 	popq	%rbp
    00000161: 	popq	%r12
    00000163: 	popq	%r13
    00000165: 	popq	%r14
    00000167: 	popq	%r15
    00000169: 	retq # Offset: 361
.Ltmp741:
    0000016a: 	movq	%rdi, %rsi
    0000016d: 	xorl	%ecx, %ecx
    0000016f: 	jmp	.Ltmp747 # Offset: 367
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array4D5IsET_PKS0_mmmmS0_"

Binary Function "_Z19accumulate_array4D6IsET_PKS0_mmmmS0_" after disassembly {
  Number      : 147
  State       : disassembled
  Address     : 0xa010
  Size        : 0x174
  MaxSize     : 0x180
  Offset      : 0xa010
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array4D6IsET_PKS0_mmmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0146:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%r9d, %eax
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rsi, -0x10(%rsp)
    00000016: 	testq	%rsi, %rsi
    00000019: 	je	.Ltmp748 # Offset: 25
    0000001f: 	movq	%rdx, %r12
    00000022: 	movq	%r8, %rdx
    00000025: 	leaq	-0x1(%r8), %r13
    00000029: 	movq	%rcx, %rbx
    0000002c: 	movq	%rdx, %r11
    0000002f: 	shrq	$0x3, %r8
    00000033: 	leaq	(%rdx,%rdx), %rbp
    00000037: 	movq	$0x0, -0x18(%rsp)
    00000040: 	andq	$-0x8, %r11
    00000044: 	leaq	(%r11,%r11), %r14
.Ltmp757:
    00000048: 	xorl	%r15d, %r15d
    0000004b: 	testq	%r12, %r12
    0000004e: 	je	.Ltmp749 # Offset: 78
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp756:
    00000058: 	xorl	%r9d, %r9d
    0000005b: 	testq	%rbx, %rbx
    0000005e: 	je	.Ltmp750 # Offset: 94
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp755:
    00000068: 	testq	%rdx, %rdx
    0000006b: 	je	.Ltmp751 # Offset: 107
    00000071: 	cmpq	$0x6, %r13
    00000075: 	jbe	.Ltmp752 # Offset: 117
    0000007b: 	xorl	%ecx, %ecx
    0000007d: 	pxor	%xmm0, %xmm0
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp753:
    00000088: 	movq	%rcx, %rsi
    0000008b: 	addq	$0x1, %rcx
    0000008f: 	shlq	$0x4, %rsi
    00000093: 	movdqu	(%rdi,%rsi), %xmm1
    00000098: 	paddw	%xmm1, %xmm0
    0000009c: 	cmpq	%rcx, %r8
    0000009f: 	jne	.Ltmp753 # Offset: 159
    000000a1: 	movdqa	%xmm0, %xmm1
    000000a5: 	leaq	(%rdi,%r14), %rsi
    000000a9: 	psrldq	$0x8, %xmm1
    000000ae: 	paddw	%xmm1, %xmm0
    000000b2: 	movdqa	%xmm0, %xmm1
    000000b6: 	psrldq	$0x4, %xmm1
    000000bb: 	paddw	%xmm1, %xmm0
    000000bf: 	movdqa	%xmm0, %xmm1
    000000c3: 	psrldq	$0x2, %xmm1
    000000c8: 	paddw	%xmm1, %xmm0
    000000cc: 	pextrw	$0x0, %xmm0, %ecx
    000000d1: 	addl	%ecx, %eax
    000000d3: 	cmpq	%rdx, %r11
    000000d6: 	je	.Ltmp754 # Offset: 214
    000000d8: 	movq	%r11, %rcx
.Ltmp758:
    000000db: 	leaq	0x1(%rcx), %r10
    000000df: 	addw	(%rsi), %ax
    000000e2: 	cmpq	%r10, %rdx
    000000e5: 	jbe	.Ltmp754 # Offset: 229
    000000e7: 	leaq	0x2(%rcx), %r10
    000000eb: 	addw	0x2(%rsi), %ax
    000000ef: 	cmpq	%r10, %rdx
    000000f2: 	jbe	.Ltmp754 # Offset: 242
    000000f4: 	leaq	0x3(%rcx), %r10
    000000f8: 	addw	0x4(%rsi), %ax
    000000fc: 	cmpq	%r10, %rdx
    000000ff: 	jbe	.Ltmp754 # Offset: 255
    00000101: 	leaq	0x4(%rcx), %r10
    00000105: 	addw	0x6(%rsi), %ax
    00000109: 	cmpq	%r10, %rdx
    0000010c: 	jbe	.Ltmp754 # Offset: 268
    0000010e: 	leaq	0x5(%rcx), %r10
    00000112: 	addw	0x8(%rsi), %ax
    00000116: 	cmpq	%r10, %rdx
    00000119: 	jbe	.Ltmp754 # Offset: 281
    0000011b: 	addq	$0x6, %rcx
    0000011f: 	addw	0xa(%rsi), %ax
    00000123: 	cmpq	%rcx, %rdx
    00000126: 	jbe	.Ltmp754 # Offset: 294
    00000128: 	addw	0xc(%rsi), %ax
.Ltmp754:
    0000012c: 	addq	%rbp, %rdi
.Ltmp751:
    0000012f: 	addq	$0x1, %r9
    00000133: 	cmpq	%r9, %rbx
    00000136: 	jne	.Ltmp755 # Offset: 310
.Ltmp750:
    0000013c: 	addq	$0x1, %r15
    00000140: 	cmpq	%r15, %r12
    00000143: 	jne	.Ltmp756 # Offset: 323
.Ltmp749:
    00000149: 	addq	$0x1, -0x18(%rsp)
    0000014f: 	movq	-0x18(%rsp), %rcx
    00000154: 	cmpq	%rcx, -0x10(%rsp)
    00000159: 	jne	.Ltmp757 # Offset: 345
.Ltmp748:
    0000015f: 	popq	%rbx
    00000160: 	popq	%rbp
    00000161: 	popq	%r12
    00000163: 	popq	%r13
    00000165: 	popq	%r14
    00000167: 	popq	%r15
    00000169: 	retq # Offset: 361
.Ltmp752:
    0000016a: 	movq	%rdi, %rsi
    0000016d: 	xorl	%ecx, %ecx
    0000016f: 	jmp	.Ltmp758 # Offset: 367
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array4D6IsET_PKS0_mmmmS0_"

Binary Function "_Z19accumulate_array4D7IsET_PKS0_mmmmS0_" after disassembly {
  Number      : 148
  State       : disassembled
  Address     : 0xa190
  Size        : 0x1ab
  MaxSize     : 0x1b0
  Offset      : 0xa190
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array4D7IsET_PKS0_mmmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0147:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rcx, %rbx
    00000011: 	movq	%r8, %rcx
    00000014: 	movl	%r9d, %r8d
    00000017: 	movq	%rdi, -0x20(%rsp)
    0000001c: 	movq	%rsi, -0x10(%rsp)
    00000021: 	movq	%rdx, -0x30(%rsp)
    00000026: 	testq	%rsi, %rsi
    00000029: 	je	.Ltmp759 # Offset: 41
    0000002f: 	movq	%rbx, %rax
    00000032: 	movq	%rcx, %rsi
    00000035: 	leaq	(%rcx,%rcx), %rbp
    00000039: 	movq	%rcx, %r11
    0000003c: 	imulq	%rcx, %rax
    00000040: 	leaq	-0x1(%rcx), %r12
    00000044: 	shrq	$0x3, %rsi
    00000048: 	andq	$-0x8, %r11
    0000004c: 	movq	$0x0, -0x28(%rsp)
    00000055: 	leaq	(%rax,%rax), %r15
    00000059: 	imulq	%rdx, %rax
    0000005d: 	addq	%rax, %rax
    00000060: 	movq	%rax, -0x18(%rsp)
.Ltmp767:
    00000065: 	xorl	%r13d, %r13d
    00000068: 	cmpq	$0x0, -0x30(%rsp)
    0000006e: 	movq	-0x20(%rsp), %r14
    00000073: 	je	.Ltmp760 # Offset: 115
    00000079: 	nopl	(%rax) # Size: 7
.Ltmp766:
    00000080: 	movq	%r14, %rax
    00000083: 	xorl	%r9d, %r9d
    00000086: 	testq	%rbx, %rbx
    00000089: 	je	.Ltmp761 # Offset: 137
    0000008f: 	nop # Size: 1
.Ltmp765:
    00000090: 	testq	%rcx, %rcx
    00000093: 	je	.Ltmp762 # Offset: 147
    00000099: 	xorl	%edx, %edx
    0000009b: 	cmpq	$0x6, %r12
    0000009f: 	jbe	.Ltmp763 # Offset: 159
    000000a1: 	pxor	%xmm0, %xmm0
    000000a5: 	nopl	(%rax) # Size: 3
.Ltmp764:
    000000a8: 	movq	%rdx, %rdi
    000000ab: 	addq	$0x1, %rdx
    000000af: 	shlq	$0x4, %rdi
    000000b3: 	movdqu	(%rax,%rdi), %xmm1
    000000b8: 	paddw	%xmm1, %xmm0
    000000bc: 	cmpq	%rdx, %rsi
    000000bf: 	jne	.Ltmp764 # Offset: 191
    000000c1: 	movdqa	%xmm0, %xmm1
    000000c5: 	psrldq	$0x8, %xmm1
    000000ca: 	paddw	%xmm1, %xmm0
    000000ce: 	movdqa	%xmm0, %xmm1
    000000d2: 	psrldq	$0x4, %xmm1
    000000d7: 	paddw	%xmm1, %xmm0
    000000db: 	movdqa	%xmm0, %xmm1
    000000df: 	psrldq	$0x2, %xmm1
    000000e4: 	paddw	%xmm1, %xmm0
    000000e8: 	pextrw	$0x0, %xmm0, %edx
    000000ed: 	addl	%edx, %r8d
    000000f0: 	cmpq	%rcx, %r11
    000000f3: 	je	.Ltmp762 # Offset: 243
    000000f5: 	movq	%r11, %rdx
.Ltmp763:
    000000f8: 	leaq	0x1(%rdx), %r10
    000000fc: 	leaq	(%rdx,%rdx), %rdi
    00000100: 	addw	(%rax,%rdx,2), %r8w
    00000105: 	cmpq	%r10, %rcx
    00000108: 	jbe	.Ltmp762 # Offset: 264
    0000010a: 	leaq	0x2(%rdx), %r10
    0000010e: 	addw	0x2(%rax,%rdi), %r8w
    00000114: 	cmpq	%r10, %rcx
    00000117: 	jbe	.Ltmp762 # Offset: 279
    00000119: 	leaq	0x3(%rdx), %r10
    0000011d: 	addw	0x4(%rax,%rdi), %r8w
    00000123: 	cmpq	%r10, %rcx
    00000126: 	jbe	.Ltmp762 # Offset: 294
    00000128: 	leaq	0x4(%rdx), %r10
    0000012c: 	addw	0x6(%rax,%rdi), %r8w
    00000132: 	cmpq	%r10, %rcx
    00000135: 	jbe	.Ltmp762 # Offset: 309
    00000137: 	leaq	0x5(%rdx), %r10
    0000013b: 	addw	0x8(%rax,%rdi), %r8w
    00000141: 	cmpq	%r10, %rcx
    00000144: 	jbe	.Ltmp762 # Offset: 324
    00000146: 	addq	$0x6, %rdx
    0000014a: 	addw	0xa(%rax,%rdi), %r8w
    00000150: 	cmpq	%rdx, %rcx
    00000153: 	jbe	.Ltmp762 # Offset: 339
    00000155: 	addw	0xc(%rax,%rdi), %r8w
.Ltmp762:
    0000015b: 	addq	$0x1, %r9
    0000015f: 	addq	%rbp, %rax
    00000162: 	cmpq	%r9, %rbx
    00000165: 	jne	.Ltmp765 # Offset: 357
.Ltmp761:
    0000016b: 	addq	%r15, %r14
    0000016e: 	addq	$0x1, %r13
    00000172: 	cmpq	%r13, -0x30(%rsp)
    00000177: 	jne	.Ltmp766 # Offset: 375
.Ltmp760:
    0000017d: 	addq	$0x1, -0x28(%rsp)
    00000183: 	movq	-0x18(%rsp), %rdx
    00000188: 	movq	-0x28(%rsp), %rax
    0000018d: 	addq	%rdx, -0x20(%rsp)
    00000192: 	cmpq	%rax, -0x10(%rsp)
    00000197: 	jne	.Ltmp767 # Offset: 407
.Ltmp759:
    0000019d: 	popq	%rbx
    0000019e: 	movl	%r8d, %eax
    000001a1: 	popq	%rbp
    000001a2: 	popq	%r12
    000001a4: 	popq	%r13
    000001a6: 	popq	%r14
    000001a8: 	popq	%r15
    000001aa: 	retq # Offset: 426
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array4D7IsET_PKS0_mmmmS0_"

Binary Function "_Z19accumulate_array4D8IsET_PKS0_mmmmS0_" after disassembly {
  Number      : 149
  State       : disassembled
  Address     : 0xa340
  Size        : 0x1d3
  MaxSize     : 0x1e0
  Offset      : 0xa340
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array4D8IsET_PKS0_mmmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0148:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rdx, %rbx
    00000011: 	movq	%rdx, -0x38(%rsp)
    00000016: 	movq	%r8, %rdx
    00000019: 	movl	%r9d, %r8d
    0000001c: 	movq	%rsi, -0x10(%rsp)
    00000021: 	testq	%rsi, %rsi
    00000024: 	je	.Ltmp768 # Offset: 36
    0000002a: 	movq	%rcx, %rax
    0000002d: 	movq	%rdx, %r12
    00000030: 	movq	%rdx, %r10
    00000033: 	movq	%rcx, %r11
    00000036: 	imulq	%rdx, %rax
    0000003a: 	shrq	$0x3, %r12
    0000003e: 	leaq	-0x1(%rdx), %rbp
    00000042: 	andq	$-0x8, %r10
    00000046: 	movq	$0x0, -0x20(%rsp)
    0000004f: 	shlq	$0x4, %r12
    00000053: 	movq	$0x0, -0x28(%rsp)
    0000005c: 	movq	%rax, -0x30(%rsp)
    00000061: 	imulq	%rbx, %rax
    00000065: 	leaq	(%rdx,%rdx), %rbx
    00000069: 	movq	%rax, -0x18(%rsp)
.Ltmp776:
    0000006e: 	cmpq	$0x0, -0x38(%rsp)
    00000074: 	je	.Ltmp769 # Offset: 116
    0000007a: 	movq	-0x20(%rsp), %r13
    0000007f: 	xorl	%r14d, %r14d
    00000082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp775:
    00000088: 	testq	%r11, %r11
    0000008b: 	je	.Ltmp770 # Offset: 139
    00000091: 	leaq	(%rdi,%r13,2), %rsi
    00000095: 	movq	%r13, %rcx
    00000098: 	xorl	%r9d, %r9d
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp774:
    000000a0: 	testq	%rdx, %rdx
    000000a3: 	je	.Ltmp771 # Offset: 163
    000000a9: 	cmpq	$0x6, %rbp
    000000ad: 	jbe	.Ltmp772 # Offset: 173
    000000b3: 	leaq	(%r12,%rsi), %r15
    000000b7: 	movq	%rsi, %rax
    000000ba: 	pxor	%xmm0, %xmm0
    000000be: 	nop # Size: 2
.Ltmp773:
    000000c0: 	movdqu	(%rax), %xmm2
    000000c4: 	addq	$0x10, %rax
    000000c8: 	paddw	%xmm2, %xmm0
    000000cc: 	cmpq	%r15, %rax
    000000cf: 	jne	.Ltmp773 # Offset: 207
    000000d1: 	movdqa	%xmm0, %xmm1
    000000d5: 	psrldq	$0x8, %xmm1
    000000da: 	paddw	%xmm1, %xmm0
    000000de: 	movdqa	%xmm0, %xmm1
    000000e2: 	psrldq	$0x4, %xmm1
    000000e7: 	paddw	%xmm1, %xmm0
    000000eb: 	movdqa	%xmm0, %xmm1
    000000ef: 	psrldq	$0x2, %xmm1
    000000f4: 	paddw	%xmm1, %xmm0
    000000f8: 	pextrw	$0x0, %xmm0, %eax
    000000fd: 	addl	%eax, %r8d
    00000100: 	cmpq	%rdx, %r10
    00000103: 	je	.Ltmp771 # Offset: 259
    00000105: 	movq	%r10, %rax
.Ltmp777:
    00000108: 	leaq	(%rax,%rcx), %r15
    0000010c: 	addw	(%rdi,%r15,2), %r8w
    00000111: 	leaq	0x1(%rax), %r15
    00000115: 	cmpq	%r15, %rdx
    00000118: 	jbe	.Ltmp771 # Offset: 280
    0000011a: 	addq	%rcx, %r15
    0000011d: 	addw	(%rdi,%r15,2), %r8w
    00000122: 	leaq	0x2(%rax), %r15
    00000126: 	cmpq	%r15, %rdx
    00000129: 	jbe	.Ltmp771 # Offset: 297
    0000012b: 	addq	%rcx, %r15
    0000012e: 	addw	(%rdi,%r15,2), %r8w
    00000133: 	leaq	0x3(%rax), %r15
    00000137: 	cmpq	%r15, %rdx
    0000013a: 	jbe	.Ltmp771 # Offset: 314
    0000013c: 	addq	%rcx, %r15
    0000013f: 	addw	(%rdi,%r15,2), %r8w
    00000144: 	leaq	0x4(%rax), %r15
    00000148: 	cmpq	%r15, %rdx
    0000014b: 	jbe	.Ltmp771 # Offset: 331
    0000014d: 	addq	%rcx, %r15
    00000150: 	addw	(%rdi,%r15,2), %r8w
    00000155: 	leaq	0x5(%rax), %r15
    00000159: 	cmpq	%r15, %rdx
    0000015c: 	jbe	.Ltmp771 # Offset: 348
    0000015e: 	addq	%rcx, %r15
    00000161: 	addq	$0x6, %rax
    00000165: 	addw	(%rdi,%r15,2), %r8w
    0000016a: 	cmpq	%rax, %rdx
    0000016d: 	jbe	.Ltmp771 # Offset: 365
    0000016f: 	addq	%rcx, %rax
    00000172: 	addw	(%rdi,%rax,2), %r8w
.Ltmp771:
    00000177: 	addq	$0x1, %r9
    0000017b: 	addq	%rdx, %rcx
    0000017e: 	addq	%rbx, %rsi
    00000181: 	cmpq	%r9, %r11
    00000184: 	jne	.Ltmp774 # Offset: 388
.Ltmp770:
    0000018a: 	addq	$0x1, %r14
    0000018e: 	addq	-0x30(%rsp), %r13
    00000193: 	cmpq	%r14, -0x38(%rsp)
    00000198: 	jne	.Ltmp775 # Offset: 408
.Ltmp769:
    0000019e: 	addq	$0x1, -0x28(%rsp)
    000001a4: 	movq	-0x18(%rsp), %rcx
    000001a9: 	movq	-0x28(%rsp), %rax
    000001ae: 	addq	%rcx, -0x20(%rsp)
    000001b3: 	cmpq	%rax, -0x10(%rsp)
    000001b8: 	jne	.Ltmp776 # Offset: 440
.Ltmp768:
    000001be: 	popq	%rbx
    000001bf: 	movl	%r8d, %eax
    000001c2: 	popq	%rbp
    000001c3: 	popq	%r12
    000001c5: 	popq	%r13
    000001c7: 	popq	%r14
    000001c9: 	popq	%r15
    000001cb: 	retq # Offset: 459
.Ltmp772:
    000001cc: 	xorl	%eax, %eax
    000001ce: 	jmp	.Ltmp777 # Offset: 462
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array4D8IsET_PKS0_mmmmS0_"

Binary Function "_Z19accumulate_array4D9IsET_PKS0_mmmmS0_" after disassembly {
  Number      : 150
  State       : disassembled
  Address     : 0xa520
  Size        : 0x1d3
  MaxSize     : 0x1e0
  Offset      : 0xa520
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array4D9IsET_PKS0_mmmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0149:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rdx, %rbx
    00000011: 	movq	%rdx, -0x38(%rsp)
    00000016: 	movq	%r8, %rdx
    00000019: 	movl	%r9d, %r8d
    0000001c: 	movq	%rsi, -0x10(%rsp)
    00000021: 	testq	%rsi, %rsi
    00000024: 	je	.Ltmp778 # Offset: 36
    0000002a: 	movq	%rcx, %rax
    0000002d: 	movq	%rdx, %r12
    00000030: 	movq	%rdx, %r10
    00000033: 	movq	%rcx, %r11
    00000036: 	imulq	%rdx, %rax
    0000003a: 	shrq	$0x3, %r12
    0000003e: 	leaq	-0x1(%rdx), %rbp
    00000042: 	andq	$-0x8, %r10
    00000046: 	movq	$0x0, -0x20(%rsp)
    0000004f: 	shlq	$0x4, %r12
    00000053: 	movq	$0x0, -0x28(%rsp)
    0000005c: 	imulq	%rax, %rbx
    00000060: 	movq	%rax, -0x30(%rsp)
    00000065: 	movq	%rbx, -0x18(%rsp)
    0000006a: 	leaq	(%rdx,%rdx), %rbx
.Ltmp786:
    0000006e: 	xorl	%r14d, %r14d
    00000071: 	cmpq	$0x0, -0x38(%rsp)
    00000077: 	movq	-0x20(%rsp), %r13
    0000007c: 	je	.Ltmp779 # Offset: 124
    00000082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp785:
    00000088: 	testq	%r11, %r11
    0000008b: 	je	.Ltmp780 # Offset: 139
    00000091: 	leaq	(%rdi,%r13,2), %rsi
    00000095: 	movq	%r13, %rcx
    00000098: 	xorl	%r9d, %r9d
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp784:
    000000a0: 	testq	%rdx, %rdx
    000000a3: 	je	.Ltmp781 # Offset: 163
    000000a9: 	cmpq	$0x6, %rbp
    000000ad: 	jbe	.Ltmp782 # Offset: 173
    000000b3: 	leaq	(%r12,%rsi), %r15
    000000b7: 	movq	%rsi, %rax
    000000ba: 	pxor	%xmm0, %xmm0
    000000be: 	nop # Size: 2
.Ltmp783:
    000000c0: 	movdqu	(%rax), %xmm2
    000000c4: 	addq	$0x10, %rax
    000000c8: 	paddw	%xmm2, %xmm0
    000000cc: 	cmpq	%r15, %rax
    000000cf: 	jne	.Ltmp783 # Offset: 207
    000000d1: 	movdqa	%xmm0, %xmm1
    000000d5: 	psrldq	$0x8, %xmm1
    000000da: 	paddw	%xmm1, %xmm0
    000000de: 	movdqa	%xmm0, %xmm1
    000000e2: 	psrldq	$0x4, %xmm1
    000000e7: 	paddw	%xmm1, %xmm0
    000000eb: 	movdqa	%xmm0, %xmm1
    000000ef: 	psrldq	$0x2, %xmm1
    000000f4: 	paddw	%xmm1, %xmm0
    000000f8: 	pextrw	$0x0, %xmm0, %eax
    000000fd: 	addl	%eax, %r8d
    00000100: 	cmpq	%rdx, %r10
    00000103: 	je	.Ltmp781 # Offset: 259
    00000105: 	movq	%r10, %rax
.Ltmp787:
    00000108: 	leaq	(%rax,%rcx), %r15
    0000010c: 	addw	(%rdi,%r15,2), %r8w
    00000111: 	leaq	0x1(%rax), %r15
    00000115: 	cmpq	%r15, %rdx
    00000118: 	jbe	.Ltmp781 # Offset: 280
    0000011a: 	addq	%rcx, %r15
    0000011d: 	addw	(%rdi,%r15,2), %r8w
    00000122: 	leaq	0x2(%rax), %r15
    00000126: 	cmpq	%r15, %rdx
    00000129: 	jbe	.Ltmp781 # Offset: 297
    0000012b: 	addq	%rcx, %r15
    0000012e: 	addw	(%rdi,%r15,2), %r8w
    00000133: 	leaq	0x3(%rax), %r15
    00000137: 	cmpq	%r15, %rdx
    0000013a: 	jbe	.Ltmp781 # Offset: 314
    0000013c: 	addq	%rcx, %r15
    0000013f: 	addw	(%rdi,%r15,2), %r8w
    00000144: 	leaq	0x4(%rax), %r15
    00000148: 	cmpq	%r15, %rdx
    0000014b: 	jbe	.Ltmp781 # Offset: 331
    0000014d: 	addq	%rcx, %r15
    00000150: 	addw	(%rdi,%r15,2), %r8w
    00000155: 	leaq	0x5(%rax), %r15
    00000159: 	cmpq	%r15, %rdx
    0000015c: 	jbe	.Ltmp781 # Offset: 348
    0000015e: 	addq	%rcx, %r15
    00000161: 	addq	$0x6, %rax
    00000165: 	addw	(%rdi,%r15,2), %r8w
    0000016a: 	cmpq	%rax, %rdx
    0000016d: 	jbe	.Ltmp781 # Offset: 365
    0000016f: 	addq	%rcx, %rax
    00000172: 	addw	(%rdi,%rax,2), %r8w
.Ltmp781:
    00000177: 	addq	$0x1, %r9
    0000017b: 	addq	%rdx, %rcx
    0000017e: 	addq	%rbx, %rsi
    00000181: 	cmpq	%r9, %r11
    00000184: 	jne	.Ltmp784 # Offset: 388
.Ltmp780:
    0000018a: 	addq	$0x1, %r14
    0000018e: 	addq	-0x30(%rsp), %r13
    00000193: 	cmpq	%r14, -0x38(%rsp)
    00000198: 	jne	.Ltmp785 # Offset: 408
.Ltmp779:
    0000019e: 	addq	$0x1, -0x28(%rsp)
    000001a4: 	movq	-0x18(%rsp), %rcx
    000001a9: 	movq	-0x28(%rsp), %rax
    000001ae: 	addq	%rcx, -0x20(%rsp)
    000001b3: 	cmpq	%rax, -0x10(%rsp)
    000001b8: 	jne	.Ltmp786 # Offset: 440
.Ltmp778:
    000001be: 	popq	%rbx
    000001bf: 	movl	%r8d, %eax
    000001c2: 	popq	%rbp
    000001c3: 	popq	%r12
    000001c5: 	popq	%r13
    000001c7: 	popq	%r14
    000001c9: 	popq	%r15
    000001cb: 	retq # Offset: 459
.Ltmp782:
    000001cc: 	xorl	%eax, %eax
    000001ce: 	jmp	.Ltmp787 # Offset: 462
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array4D9IsET_PKS0_mmmmS0_"

Binary Function "_Z16accumulate_arrayIdET_PKS0_S2_S0_" after disassembly {
  Number      : 151
  State       : disassembled
  Address     : 0xa700
  Size        : 0x7d
  MaxSize     : 0x80
  Offset      : 0xa700
  Section     : .text
  Orc Section : .local.text._Z16accumulate_arrayIdET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0150:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %rcx
    0000000a: 	sarq	$0x3, %rcx
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jle	.Ltmp788 # Offset: 17
    00000013: 	cmpq	$0x8, %rsi
    00000017: 	jle	.Ltmp789 # Offset: 23
    00000019: 	movq	%rcx, %rdx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	shrq	%rdx
    00000022: 	shlq	$0x4, %rdx
    00000026: 	addq	%rdi, %rdx
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp790:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp790 # Offset: 72
    0000004a: 	movq	%rcx, %rax
    0000004d: 	movapd	%xmm0, %xmm1
    00000051: 	andq	$-0x2, %rax
    00000055: 	andl	$0x1, %ecx
    00000058: 	je	.Ltmp791 # Offset: 88
.Ltmp792:
    0000005a: 	movsd	(%rdi,%rax,8), %xmm1
    0000005f: 	addsd	%xmm0, %xmm1
.Ltmp791:
    00000063: 	movapd	%xmm1, %xmm0
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp788:
    00000070: 	movapd	%xmm0, %xmm1
    00000074: 	movapd	%xmm1, %xmm0
    00000078: 	retq # Offset: 120
.Ltmp789:
    00000079: 	xorl	%eax, %eax
    0000007b: 	jmp	.Ltmp792 # Offset: 123
DWARF CFI Instructions:
    <empty>
End of Function "_Z16accumulate_arrayIdET_PKS0_S2_S0_"

Binary Function "_Z17accumulate_array2IdET_PKS0_S2_S0_" after disassembly {
  Number      : 152
  State       : disassembled
  Address     : 0xa780
  Size        : 0x7d
  MaxSize     : 0x80
  Offset      : 0xa780
  Section     : .text
  Orc Section : .local.text._Z17accumulate_array2IdET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0151:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %rcx
    0000000a: 	sarq	$0x3, %rcx
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jle	.Ltmp793 # Offset: 17
    00000013: 	cmpq	$0x8, %rsi
    00000017: 	jle	.Ltmp794 # Offset: 23
    00000019: 	movq	%rcx, %rdx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	shrq	%rdx
    00000022: 	shlq	$0x4, %rdx
    00000026: 	addq	%rdi, %rdx
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp795:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp795 # Offset: 72
    0000004a: 	movq	%rcx, %rax
    0000004d: 	movapd	%xmm0, %xmm1
    00000051: 	andq	$-0x2, %rax
    00000055: 	andl	$0x1, %ecx
    00000058: 	je	.Ltmp796 # Offset: 88
.Ltmp797:
    0000005a: 	movsd	(%rdi,%rax,8), %xmm1
    0000005f: 	addsd	%xmm0, %xmm1
.Ltmp796:
    00000063: 	movapd	%xmm1, %xmm0
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp793:
    00000070: 	movapd	%xmm0, %xmm1
    00000074: 	movapd	%xmm1, %xmm0
    00000078: 	retq # Offset: 120
.Ltmp794:
    00000079: 	xorl	%eax, %eax
    0000007b: 	jmp	.Ltmp797 # Offset: 123
DWARF CFI Instructions:
    <empty>
End of Function "_Z17accumulate_array2IdET_PKS0_S2_S0_"

Binary Function "_Z17accumulate_array3IdET_PKS0_S2_S0_" after disassembly {
  Number      : 153
  State       : disassembled
  Address     : 0xa800
  Size        : 0x7d
  MaxSize     : 0x80
  Offset      : 0xa800
  Section     : .text
  Orc Section : .local.text._Z17accumulate_array3IdET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0152:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %rcx
    0000000a: 	sarq	$0x3, %rcx
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jle	.Ltmp798 # Offset: 17
    00000013: 	cmpq	$0x8, %rsi
    00000017: 	jle	.Ltmp799 # Offset: 23
    00000019: 	movq	%rcx, %rdx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	shrq	%rdx
    00000022: 	shlq	$0x4, %rdx
    00000026: 	addq	%rdi, %rdx
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp800:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp800 # Offset: 72
    0000004a: 	movq	%rcx, %rax
    0000004d: 	movapd	%xmm0, %xmm1
    00000051: 	andq	$-0x2, %rax
    00000055: 	andl	$0x1, %ecx
    00000058: 	je	.Ltmp801 # Offset: 88
.Ltmp802:
    0000005a: 	movsd	(%rdi,%rax,8), %xmm1
    0000005f: 	addsd	%xmm0, %xmm1
.Ltmp801:
    00000063: 	movapd	%xmm1, %xmm0
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp798:
    00000070: 	movapd	%xmm0, %xmm1
    00000074: 	movapd	%xmm1, %xmm0
    00000078: 	retq # Offset: 120
.Ltmp799:
    00000079: 	xorl	%eax, %eax
    0000007b: 	jmp	.Ltmp802 # Offset: 123
DWARF CFI Instructions:
    <empty>
End of Function "_Z17accumulate_array3IdET_PKS0_S2_S0_"

Binary Function "_Z17accumulate_array4IdET_PKS0_S2_S0_" after disassembly {
  Number      : 154
  State       : disassembled
  Address     : 0xa880
  Size        : 0x7d
  MaxSize     : 0x80
  Offset      : 0xa880
  Section     : .text
  Orc Section : .local.text._Z17accumulate_array4IdET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0153:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %rcx
    0000000a: 	sarq	$0x3, %rcx
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jle	.Ltmp803 # Offset: 17
    00000013: 	cmpq	$0x8, %rsi
    00000017: 	jle	.Ltmp804 # Offset: 23
    00000019: 	movq	%rcx, %rdx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	shrq	%rdx
    00000022: 	shlq	$0x4, %rdx
    00000026: 	addq	%rdi, %rdx
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp805:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp805 # Offset: 72
    0000004a: 	movq	%rcx, %rax
    0000004d: 	movapd	%xmm0, %xmm1
    00000051: 	andq	$-0x2, %rax
    00000055: 	andl	$0x1, %ecx
    00000058: 	je	.Ltmp806 # Offset: 88
.Ltmp807:
    0000005a: 	movsd	(%rdi,%rax,8), %xmm1
    0000005f: 	addsd	%xmm0, %xmm1
.Ltmp806:
    00000063: 	movapd	%xmm1, %xmm0
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp803:
    00000070: 	movapd	%xmm0, %xmm1
    00000074: 	movapd	%xmm1, %xmm0
    00000078: 	retq # Offset: 120
.Ltmp804:
    00000079: 	xorl	%eax, %eax
    0000007b: 	jmp	.Ltmp807 # Offset: 123
DWARF CFI Instructions:
    <empty>
End of Function "_Z17accumulate_array4IdET_PKS0_S2_S0_"

Binary Function "_Z14accumulate_ptrIdET_PKS0_S2_S0_" after disassembly {
  Number      : 155
  State       : disassembled
  Address     : 0xa900
  Size        : 0x79
  MaxSize     : 0x80
  Offset      : 0xa900
  Section     : .text
  Orc Section : .local.text._Z14accumulate_ptrIdET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0154:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %rcx
    0000000a: 	sarq	$0x3, %rcx
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jle	.Ltmp808 # Offset: 17
    00000013: 	cmpq	$0x8, %rsi
    00000017: 	jle	.Ltmp809 # Offset: 23
    00000019: 	movq	%rcx, %rdx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	shrq	%rdx
    00000022: 	shlq	$0x4, %rdx
    00000026: 	addq	%rdi, %rdx
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp810:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp810 # Offset: 72
    0000004a: 	movq	%rcx, %rax
    0000004d: 	movapd	%xmm0, %xmm1
    00000051: 	andq	$-0x2, %rax
    00000055: 	leaq	(%rdi,%rax,8), %rdi
    00000059: 	cmpq	%rax, %rcx
    0000005c: 	je	.Ltmp811 # Offset: 92
.Ltmp809:
    0000005e: 	movsd	(%rdi), %xmm1
    00000062: 	addsd	%xmm0, %xmm1
.Ltmp811:
    00000066: 	movapd	%xmm1, %xmm0
    0000006a: 	retq # Offset: 106
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp808:
    00000070: 	movapd	%xmm0, %xmm1
    00000074: 	movapd	%xmm1, %xmm0
    00000078: 	retq # Offset: 120
DWARF CFI Instructions:
    <empty>
End of Function "_Z14accumulate_ptrIdET_PKS0_S2_S0_"

Binary Function "_Z15accumulate_ptr2IdET_PKS0_S2_S0_" after disassembly {
  Number      : 156
  State       : disassembled
  Address     : 0xa980
  Size        : 0x79
  MaxSize     : 0x80
  Offset      : 0xa980
  Section     : .text
  Orc Section : .local.text._Z15accumulate_ptr2IdET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0155:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %rcx
    0000000a: 	sarq	$0x3, %rcx
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jle	.Ltmp812 # Offset: 17
    00000013: 	cmpq	$0x8, %rsi
    00000017: 	jle	.Ltmp813 # Offset: 23
    00000019: 	movq	%rcx, %rdx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	shrq	%rdx
    00000022: 	shlq	$0x4, %rdx
    00000026: 	addq	%rdi, %rdx
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp814:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp814 # Offset: 72
    0000004a: 	movq	%rcx, %rax
    0000004d: 	movapd	%xmm0, %xmm1
    00000051: 	andq	$-0x2, %rax
    00000055: 	leaq	(%rdi,%rax,8), %rdi
    00000059: 	cmpq	%rax, %rcx
    0000005c: 	je	.Ltmp815 # Offset: 92
.Ltmp813:
    0000005e: 	movsd	(%rdi), %xmm1
    00000062: 	addsd	%xmm0, %xmm1
.Ltmp815:
    00000066: 	movapd	%xmm1, %xmm0
    0000006a: 	retq # Offset: 106
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp812:
    00000070: 	movapd	%xmm0, %xmm1
    00000074: 	movapd	%xmm1, %xmm0
    00000078: 	retq # Offset: 120
DWARF CFI Instructions:
    <empty>
End of Function "_Z15accumulate_ptr2IdET_PKS0_S2_S0_"

Binary Function "_Z15accumulate_ptr3IdET_PKS0_S2_S0_" after disassembly {
  Number      : 157
  State       : disassembled
  Address     : 0xaa00
  Size        : 0x79
  MaxSize     : 0x80
  Offset      : 0xaa00
  Section     : .text
  Orc Section : .local.text._Z15accumulate_ptr3IdET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0156:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %rcx
    0000000a: 	sarq	$0x3, %rcx
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jle	.Ltmp816 # Offset: 17
    00000013: 	cmpq	$0x8, %rsi
    00000017: 	jle	.Ltmp817 # Offset: 23
    00000019: 	movq	%rcx, %rdx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	shrq	%rdx
    00000022: 	shlq	$0x4, %rdx
    00000026: 	addq	%rdi, %rdx
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp818:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp818 # Offset: 72
    0000004a: 	movq	%rcx, %rax
    0000004d: 	movapd	%xmm0, %xmm1
    00000051: 	andq	$-0x2, %rax
    00000055: 	leaq	(%rdi,%rax,8), %rdi
    00000059: 	cmpq	%rax, %rcx
    0000005c: 	je	.Ltmp819 # Offset: 92
.Ltmp817:
    0000005e: 	movsd	(%rdi), %xmm1
    00000062: 	addsd	%xmm0, %xmm1
.Ltmp819:
    00000066: 	movapd	%xmm1, %xmm0
    0000006a: 	retq # Offset: 106
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp816:
    00000070: 	movapd	%xmm0, %xmm1
    00000074: 	movapd	%xmm1, %xmm0
    00000078: 	retq # Offset: 120
DWARF CFI Instructions:
    <empty>
End of Function "_Z15accumulate_ptr3IdET_PKS0_S2_S0_"

Binary Function "_Z15accumulate_ptr4IdET_PKS0_S2_S0_" after disassembly {
  Number      : 158
  State       : disassembled
  Address     : 0xaa80
  Size        : 0x79
  MaxSize     : 0x80
  Offset      : 0xaa80
  Section     : .text
  Orc Section : .local.text._Z15accumulate_ptr4IdET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0157:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %rcx
    0000000a: 	sarq	$0x3, %rcx
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jle	.Ltmp820 # Offset: 17
    00000013: 	cmpq	$0x8, %rsi
    00000017: 	jle	.Ltmp821 # Offset: 23
    00000019: 	movq	%rcx, %rdx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	shrq	%rdx
    00000022: 	shlq	$0x4, %rdx
    00000026: 	addq	%rdi, %rdx
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp822:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp822 # Offset: 72
    0000004a: 	movq	%rcx, %rax
    0000004d: 	movapd	%xmm0, %xmm1
    00000051: 	andq	$-0x2, %rax
    00000055: 	leaq	(%rdi,%rax,8), %rdi
    00000059: 	cmpq	%rax, %rcx
    0000005c: 	je	.Ltmp823 # Offset: 92
.Ltmp821:
    0000005e: 	movsd	(%rdi), %xmm1
    00000062: 	addsd	%xmm0, %xmm1
.Ltmp823:
    00000066: 	movapd	%xmm1, %xmm0
    0000006a: 	retq # Offset: 106
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp820:
    00000070: 	movapd	%xmm0, %xmm1
    00000074: 	movapd	%xmm1, %xmm0
    00000078: 	retq # Offset: 120
DWARF CFI Instructions:
    <empty>
End of Function "_Z15accumulate_ptr4IdET_PKS0_S2_S0_"

Binary Function "_Z15accumulate_ptr5IdET_PKS0_S2_S0_" after disassembly {
  Number      : 159
  State       : disassembled
  Address     : 0xab00
  Size        : 0x7d
  MaxSize     : 0x80
  Offset      : 0xab00
  Section     : .text
  Orc Section : .local.text._Z15accumulate_ptr5IdET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0158:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %rcx
    0000000a: 	sarq	$0x3, %rcx
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jle	.Ltmp824 # Offset: 17
    00000013: 	cmpq	$0x8, %rsi
    00000017: 	jle	.Ltmp825 # Offset: 23
    00000019: 	movq	%rcx, %rdx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	shrq	%rdx
    00000022: 	shlq	$0x4, %rdx
    00000026: 	addq	%rdi, %rdx
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp826:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp826 # Offset: 72
    0000004a: 	movq	%rcx, %rax
    0000004d: 	movapd	%xmm0, %xmm1
    00000051: 	andq	$-0x2, %rax
    00000055: 	andl	$0x1, %ecx
    00000058: 	je	.Ltmp827 # Offset: 88
.Ltmp828:
    0000005a: 	movsd	(%rdi,%rax,8), %xmm1
    0000005f: 	addsd	%xmm0, %xmm1
.Ltmp827:
    00000063: 	movapd	%xmm1, %xmm0
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp824:
    00000070: 	movapd	%xmm0, %xmm1
    00000074: 	movapd	%xmm1, %xmm0
    00000078: 	retq # Offset: 120
.Ltmp825:
    00000079: 	xorl	%eax, %eax
    0000007b: 	jmp	.Ltmp828 # Offset: 123
DWARF CFI Instructions:
    <empty>
End of Function "_Z15accumulate_ptr5IdET_PKS0_S2_S0_"

Binary Function "_Z15accumulate_ptr6IdET_PKS0_S2_S0_" after disassembly {
  Number      : 160
  State       : disassembled
  Address     : 0xab80
  Size        : 0x7d
  MaxSize     : 0x80
  Offset      : 0xab80
  Section     : .text
  Orc Section : .local.text._Z15accumulate_ptr6IdET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0159:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %rcx
    0000000a: 	sarq	$0x3, %rcx
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jle	.Ltmp829 # Offset: 17
    00000013: 	cmpq	$0x8, %rsi
    00000017: 	jle	.Ltmp830 # Offset: 23
    00000019: 	movq	%rcx, %rdx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	shrq	%rdx
    00000022: 	shlq	$0x4, %rdx
    00000026: 	addq	%rdi, %rdx
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp831:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp831 # Offset: 72
    0000004a: 	movq	%rcx, %rax
    0000004d: 	movapd	%xmm0, %xmm1
    00000051: 	andq	$-0x2, %rax
    00000055: 	andl	$0x1, %ecx
    00000058: 	je	.Ltmp832 # Offset: 88
.Ltmp833:
    0000005a: 	movsd	(%rdi,%rax,8), %xmm1
    0000005f: 	addsd	%xmm0, %xmm1
.Ltmp832:
    00000063: 	movapd	%xmm1, %xmm0
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp829:
    00000070: 	movapd	%xmm0, %xmm1
    00000074: 	movapd	%xmm1, %xmm0
    00000078: 	retq # Offset: 120
.Ltmp830:
    00000079: 	xorl	%eax, %eax
    0000007b: 	jmp	.Ltmp833 # Offset: 123
DWARF CFI Instructions:
    <empty>
End of Function "_Z15accumulate_ptr6IdET_PKS0_S2_S0_"

Binary Function "_Z15accumulate_ptr7IdET_PKS0_S2_S0_" after disassembly {
  Number      : 161
  State       : disassembled
  Address     : 0xac00
  Size        : 0x7d
  MaxSize     : 0x80
  Offset      : 0xac00
  Section     : .text
  Orc Section : .local.text._Z15accumulate_ptr7IdET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0160:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %rcx
    0000000a: 	sarq	$0x3, %rcx
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jle	.Ltmp834 # Offset: 17
    00000013: 	cmpq	$0x8, %rsi
    00000017: 	jle	.Ltmp835 # Offset: 23
    00000019: 	movq	%rcx, %rdx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	shrq	%rdx
    00000022: 	shlq	$0x4, %rdx
    00000026: 	addq	%rdi, %rdx
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp836:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp836 # Offset: 72
    0000004a: 	movq	%rcx, %rax
    0000004d: 	movapd	%xmm0, %xmm1
    00000051: 	andq	$-0x2, %rax
    00000055: 	andl	$0x1, %ecx
    00000058: 	je	.Ltmp837 # Offset: 88
.Ltmp838:
    0000005a: 	movsd	(%rdi,%rax,8), %xmm1
    0000005f: 	addsd	%xmm0, %xmm1
.Ltmp837:
    00000063: 	movapd	%xmm1, %xmm0
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp834:
    00000070: 	movapd	%xmm0, %xmm1
    00000074: 	movapd	%xmm1, %xmm0
    00000078: 	retq # Offset: 120
.Ltmp835:
    00000079: 	xorl	%eax, %eax
    0000007b: 	jmp	.Ltmp838 # Offset: 123
DWARF CFI Instructions:
    <empty>
End of Function "_Z15accumulate_ptr7IdET_PKS0_S2_S0_"

Binary Function "_Z15accumulate_ptr8IdET_PKS0_S2_S0_" after disassembly {
  Number      : 162
  State       : disassembled
  Address     : 0xac80
  Size        : 0x7d
  MaxSize     : 0x80
  Offset      : 0xac80
  Section     : .text
  Orc Section : .local.text._Z15accumulate_ptr8IdET_PKS0_S2_S0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0161:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %rcx
    0000000a: 	sarq	$0x3, %rcx
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jle	.Ltmp839 # Offset: 17
    00000013: 	cmpq	$0x8, %rsi
    00000017: 	jle	.Ltmp840 # Offset: 23
    00000019: 	movq	%rcx, %rdx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	shrq	%rdx
    00000022: 	shlq	$0x4, %rdx
    00000026: 	addq	%rdi, %rdx
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp841:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp841 # Offset: 72
    0000004a: 	movq	%rcx, %rax
    0000004d: 	movapd	%xmm0, %xmm1
    00000051: 	andq	$-0x2, %rax
    00000055: 	andl	$0x1, %ecx
    00000058: 	je	.Ltmp842 # Offset: 88
.Ltmp843:
    0000005a: 	movsd	(%rdi,%rax,8), %xmm1
    0000005f: 	addsd	%xmm0, %xmm1
.Ltmp842:
    00000063: 	movapd	%xmm1, %xmm0
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp839:
    00000070: 	movapd	%xmm0, %xmm1
    00000074: 	movapd	%xmm1, %xmm0
    00000078: 	retq # Offset: 120
.Ltmp840:
    00000079: 	xorl	%eax, %eax
    0000007b: 	jmp	.Ltmp843 # Offset: 123
DWARF CFI Instructions:
    <empty>
End of Function "_Z15accumulate_ptr8IdET_PKS0_S2_S0_"

Binary Function "_Z19accumulate_iteratorIPddET0_T_S2_S1_" after disassembly {
  Number      : 163
  State       : disassembled
  Address     : 0xad00
  Size        : 0x79
  MaxSize     : 0x80
  Offset      : 0xad00
  Section     : .text
  Orc Section : .local.text._Z19accumulate_iteratorIPddET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0162:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp844 # Offset: 7
    00000009: 	subq	%rdi, %rsi
    0000000c: 	movq	%rdi, %rax
    0000000f: 	leaq	-0x8(%rsi), %rcx
    00000013: 	shrq	$0x3, %rcx
    00000017: 	addq	$0x1, %rcx
    0000001b: 	cmpq	$0x8, %rsi
    0000001f: 	je	.Ltmp845 # Offset: 31
    00000021: 	movq	%rcx, %rdx
    00000024: 	shrq	%rdx
    00000027: 	shlq	$0x4, %rdx
    0000002b: 	addq	%rdi, %rdx
    0000002e: 	nop # Size: 2
.Ltmp846:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp846 # Offset: 72
    0000004a: 	movq	%rcx, %rax
    0000004d: 	movapd	%xmm0, %xmm1
    00000051: 	andq	$-0x2, %rax
    00000055: 	leaq	(%rdi,%rax,8), %rdi
    00000059: 	cmpq	%rax, %rcx
    0000005c: 	je	.Ltmp847 # Offset: 92
.Ltmp845:
    0000005e: 	movsd	(%rdi), %xmm1
    00000062: 	addsd	%xmm0, %xmm1
.Ltmp847:
    00000066: 	movapd	%xmm1, %xmm0
    0000006a: 	retq # Offset: 106
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp844:
    00000070: 	movapd	%xmm0, %xmm1
    00000074: 	movapd	%xmm1, %xmm0
    00000078: 	retq # Offset: 120
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_iteratorIPddET0_T_S2_S1_"

Binary Function "_Z19accumulate_iteratorIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_" after disassembly {
  Number      : 164
  State       : disassembled
  Address     : 0xad80
  Size        : 0x81
  MaxSize     : 0x90
  Offset      : 0xad80
  Section     : .text
  Orc Section : .local.text._Z19accumulate_iteratorIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0163:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rdx
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp848 # Offset: 10
    0000000c: 	subq	%rdi, %rsi
    0000000f: 	movq	%rdi, %rax
    00000012: 	leaq	-0x8(%rsi), %rcx
    00000016: 	shrq	$0x3, %rcx
    0000001a: 	addq	$0x1, %rcx
    0000001e: 	cmpq	$0x8, %rsi
    00000022: 	je	.Ltmp849 # Offset: 34
    00000024: 	movq	%rcx, %rdx
    00000027: 	shrq	%rdx
    0000002a: 	shlq	$0x4, %rdx
    0000002e: 	addq	%rdi, %rdx
    00000031: 	nopl	(%rax) # Size: 7
.Ltmp850:
    00000038: 	movsd	(%rax), %xmm1
    0000003c: 	addq	$0x10, %rax
    00000040: 	addsd	%xmm1, %xmm0
    00000044: 	movsd	-0x8(%rax), %xmm1
    00000049: 	addsd	%xmm1, %xmm0
    0000004d: 	cmpq	%rax, %rdx
    00000050: 	jne	.Ltmp850 # Offset: 80
    00000052: 	movq	%rcx, %rax
    00000055: 	movapd	%xmm0, %xmm1
    00000059: 	andq	$-0x2, %rax
    0000005d: 	leaq	(%rdi,%rax,8), %rdx
    00000061: 	cmpq	%rax, %rcx
    00000064: 	je	.Ltmp851 # Offset: 100
.Ltmp849:
    00000066: 	movsd	(%rdx), %xmm1
    0000006a: 	addsd	%xmm0, %xmm1
.Ltmp851:
    0000006e: 	movapd	%xmm1, %xmm0
    00000072: 	retq # Offset: 114
    00000073: 	nopl	(%rax,%rax) # Size: 5
.Ltmp848:
    00000078: 	movapd	%xmm0, %xmm1
    0000007c: 	movapd	%xmm1, %xmm0
    00000080: 	retq # Offset: 128
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_iteratorIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_"

Binary Function "_Z20accumulate_iterator2IPddET0_T_S2_S1_" after disassembly {
  Number      : 165
  State       : disassembled
  Address     : 0xae10
  Size        : 0x7d
  MaxSize     : 0x80
  Offset      : 0xae10
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator2IPddET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0164:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %rcx
    0000000a: 	sarq	$0x3, %rcx
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jle	.Ltmp852 # Offset: 17
    00000013: 	cmpq	$0x8, %rsi
    00000017: 	jle	.Ltmp853 # Offset: 23
    00000019: 	movq	%rcx, %rdx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	shrq	%rdx
    00000022: 	shlq	$0x4, %rdx
    00000026: 	addq	%rdi, %rdx
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp854:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp854 # Offset: 72
    0000004a: 	movq	%rcx, %rax
    0000004d: 	movapd	%xmm0, %xmm1
    00000051: 	andq	$-0x2, %rax
    00000055: 	andl	$0x1, %ecx
    00000058: 	je	.Ltmp855 # Offset: 88
.Ltmp856:
    0000005a: 	movsd	(%rdi,%rax,8), %xmm1
    0000005f: 	addsd	%xmm0, %xmm1
.Ltmp855:
    00000063: 	movapd	%xmm1, %xmm0
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp852:
    00000070: 	movapd	%xmm0, %xmm1
    00000074: 	movapd	%xmm1, %xmm0
    00000078: 	retq # Offset: 120
.Ltmp853:
    00000079: 	xorl	%eax, %eax
    0000007b: 	jmp	.Ltmp856 # Offset: 123
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator2IPddET0_T_S2_S1_"

Binary Function "_Z20accumulate_iterator2IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_" after disassembly {
  Number      : 166
  State       : disassembled
  Address     : 0xae90
  Size        : 0x7d
  MaxSize     : 0x80
  Offset      : 0xae90
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator2IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0165:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %rcx
    0000000a: 	sarq	$0x3, %rcx
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jle	.Ltmp857 # Offset: 17
    00000013: 	cmpq	$0x8, %rsi
    00000017: 	jle	.Ltmp858 # Offset: 23
    00000019: 	movq	%rcx, %rdx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	shrq	%rdx
    00000022: 	shlq	$0x4, %rdx
    00000026: 	addq	%rdi, %rdx
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp859:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp859 # Offset: 72
    0000004a: 	movq	%rcx, %rax
    0000004d: 	movapd	%xmm0, %xmm1
    00000051: 	andq	$-0x2, %rax
    00000055: 	andl	$0x1, %ecx
    00000058: 	je	.Ltmp860 # Offset: 88
.Ltmp861:
    0000005a: 	movsd	(%rdi,%rax,8), %xmm1
    0000005f: 	addsd	%xmm0, %xmm1
.Ltmp860:
    00000063: 	movapd	%xmm1, %xmm0
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp857:
    00000070: 	movapd	%xmm0, %xmm1
    00000074: 	movapd	%xmm1, %xmm0
    00000078: 	retq # Offset: 120
.Ltmp858:
    00000079: 	xorl	%eax, %eax
    0000007b: 	jmp	.Ltmp861 # Offset: 123
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator2IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_"

Binary Function "_Z20accumulate_iterator3IPddET0_T_S2_S1_" after disassembly {
  Number      : 167
  State       : disassembled
  Address     : 0xaf10
  Size        : 0x7d
  MaxSize     : 0x80
  Offset      : 0xaf10
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator3IPddET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0166:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %rcx
    0000000a: 	sarq	$0x3, %rcx
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jle	.Ltmp862 # Offset: 17
    00000013: 	cmpq	$0x8, %rsi
    00000017: 	jle	.Ltmp863 # Offset: 23
    00000019: 	movq	%rcx, %rdx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	shrq	%rdx
    00000022: 	shlq	$0x4, %rdx
    00000026: 	addq	%rdi, %rdx
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp864:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp864 # Offset: 72
    0000004a: 	movq	%rcx, %rax
    0000004d: 	movapd	%xmm0, %xmm1
    00000051: 	andq	$-0x2, %rax
    00000055: 	andl	$0x1, %ecx
    00000058: 	je	.Ltmp865 # Offset: 88
.Ltmp866:
    0000005a: 	movsd	(%rdi,%rax,8), %xmm1
    0000005f: 	addsd	%xmm0, %xmm1
.Ltmp865:
    00000063: 	movapd	%xmm1, %xmm0
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp862:
    00000070: 	movapd	%xmm0, %xmm1
    00000074: 	movapd	%xmm1, %xmm0
    00000078: 	retq # Offset: 120
.Ltmp863:
    00000079: 	xorl	%eax, %eax
    0000007b: 	jmp	.Ltmp866 # Offset: 123
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator3IPddET0_T_S2_S1_"

Binary Function "_Z20accumulate_iterator3IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_" after disassembly {
  Number      : 168
  State       : disassembled
  Address     : 0xaf90
  Size        : 0x7d
  MaxSize     : 0x80
  Offset      : 0xaf90
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator3IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0167:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %rcx
    0000000a: 	sarq	$0x3, %rcx
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jle	.Ltmp867 # Offset: 17
    00000013: 	cmpq	$0x8, %rsi
    00000017: 	jle	.Ltmp868 # Offset: 23
    00000019: 	movq	%rcx, %rdx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	shrq	%rdx
    00000022: 	shlq	$0x4, %rdx
    00000026: 	addq	%rdi, %rdx
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp869:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp869 # Offset: 72
    0000004a: 	movq	%rcx, %rax
    0000004d: 	movapd	%xmm0, %xmm1
    00000051: 	andq	$-0x2, %rax
    00000055: 	andl	$0x1, %ecx
    00000058: 	je	.Ltmp870 # Offset: 88
.Ltmp871:
    0000005a: 	movsd	(%rdi,%rax,8), %xmm1
    0000005f: 	addsd	%xmm0, %xmm1
.Ltmp870:
    00000063: 	movapd	%xmm1, %xmm0
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp867:
    00000070: 	movapd	%xmm0, %xmm1
    00000074: 	movapd	%xmm1, %xmm0
    00000078: 	retq # Offset: 120
.Ltmp868:
    00000079: 	xorl	%eax, %eax
    0000007b: 	jmp	.Ltmp871 # Offset: 123
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator3IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_"

Binary Function "_Z20accumulate_iterator4IPddET0_T_S2_S1_" after disassembly {
  Number      : 169
  State       : disassembled
  Address     : 0xb010
  Size        : 0x7d
  MaxSize     : 0x80
  Offset      : 0xb010
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator4IPddET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0168:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %rcx
    0000000a: 	sarq	$0x3, %rcx
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jle	.Ltmp872 # Offset: 17
    00000013: 	cmpq	$0x8, %rsi
    00000017: 	jle	.Ltmp873 # Offset: 23
    00000019: 	movq	%rcx, %rdx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	shrq	%rdx
    00000022: 	shlq	$0x4, %rdx
    00000026: 	addq	%rdi, %rdx
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp874:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp874 # Offset: 72
    0000004a: 	movq	%rcx, %rax
    0000004d: 	movapd	%xmm0, %xmm1
    00000051: 	andq	$-0x2, %rax
    00000055: 	andl	$0x1, %ecx
    00000058: 	je	.Ltmp875 # Offset: 88
.Ltmp876:
    0000005a: 	movsd	(%rdi,%rax,8), %xmm1
    0000005f: 	addsd	%xmm0, %xmm1
.Ltmp875:
    00000063: 	movapd	%xmm1, %xmm0
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp872:
    00000070: 	movapd	%xmm0, %xmm1
    00000074: 	movapd	%xmm1, %xmm0
    00000078: 	retq # Offset: 120
.Ltmp873:
    00000079: 	xorl	%eax, %eax
    0000007b: 	jmp	.Ltmp876 # Offset: 123
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator4IPddET0_T_S2_S1_"

Binary Function "_Z20accumulate_iterator4IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_" after disassembly {
  Number      : 170
  State       : disassembled
  Address     : 0xb090
  Size        : 0x7d
  MaxSize     : 0x80
  Offset      : 0xb090
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator4IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0169:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %rcx
    0000000a: 	sarq	$0x3, %rcx
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jle	.Ltmp877 # Offset: 17
    00000013: 	cmpq	$0x8, %rsi
    00000017: 	jle	.Ltmp878 # Offset: 23
    00000019: 	movq	%rcx, %rdx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	shrq	%rdx
    00000022: 	shlq	$0x4, %rdx
    00000026: 	addq	%rdi, %rdx
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp879:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp879 # Offset: 72
    0000004a: 	movq	%rcx, %rax
    0000004d: 	movapd	%xmm0, %xmm1
    00000051: 	andq	$-0x2, %rax
    00000055: 	andl	$0x1, %ecx
    00000058: 	je	.Ltmp880 # Offset: 88
.Ltmp881:
    0000005a: 	movsd	(%rdi,%rax,8), %xmm1
    0000005f: 	addsd	%xmm0, %xmm1
.Ltmp880:
    00000063: 	movapd	%xmm1, %xmm0
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp877:
    00000070: 	movapd	%xmm0, %xmm1
    00000074: 	movapd	%xmm1, %xmm0
    00000078: 	retq # Offset: 120
.Ltmp878:
    00000079: 	xorl	%eax, %eax
    0000007b: 	jmp	.Ltmp881 # Offset: 123
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator4IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_"

Binary Function "_Z20accumulate_iterator5IPddET0_T_S2_S1_" after disassembly {
  Number      : 171
  State       : disassembled
  Address     : 0xb110
  Size        : 0x7d
  MaxSize     : 0x80
  Offset      : 0xb110
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator5IPddET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0170:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %rcx
    0000000a: 	sarq	$0x3, %rcx
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jle	.Ltmp882 # Offset: 17
    00000013: 	cmpq	$0x8, %rsi
    00000017: 	jle	.Ltmp883 # Offset: 23
    00000019: 	movq	%rcx, %rdx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	shrq	%rdx
    00000022: 	shlq	$0x4, %rdx
    00000026: 	addq	%rdi, %rdx
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp884:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp884 # Offset: 72
    0000004a: 	movq	%rcx, %rax
    0000004d: 	movapd	%xmm0, %xmm1
    00000051: 	andq	$-0x2, %rax
    00000055: 	andl	$0x1, %ecx
    00000058: 	je	.Ltmp885 # Offset: 88
.Ltmp886:
    0000005a: 	movsd	(%rdi,%rax,8), %xmm1
    0000005f: 	addsd	%xmm0, %xmm1
.Ltmp885:
    00000063: 	movapd	%xmm1, %xmm0
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp882:
    00000070: 	movapd	%xmm0, %xmm1
    00000074: 	movapd	%xmm1, %xmm0
    00000078: 	retq # Offset: 120
.Ltmp883:
    00000079: 	xorl	%eax, %eax
    0000007b: 	jmp	.Ltmp886 # Offset: 123
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator5IPddET0_T_S2_S1_"

Binary Function "_Z20accumulate_iterator5IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_" after disassembly {
  Number      : 172
  State       : disassembled
  Address     : 0xb190
  Size        : 0x7d
  MaxSize     : 0x80
  Offset      : 0xb190
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator5IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0171:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %rcx
    0000000a: 	sarq	$0x3, %rcx
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jle	.Ltmp887 # Offset: 17
    00000013: 	cmpq	$0x8, %rsi
    00000017: 	jle	.Ltmp888 # Offset: 23
    00000019: 	movq	%rcx, %rdx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	shrq	%rdx
    00000022: 	shlq	$0x4, %rdx
    00000026: 	addq	%rdi, %rdx
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp889:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp889 # Offset: 72
    0000004a: 	movq	%rcx, %rax
    0000004d: 	movapd	%xmm0, %xmm1
    00000051: 	andq	$-0x2, %rax
    00000055: 	andl	$0x1, %ecx
    00000058: 	je	.Ltmp890 # Offset: 88
.Ltmp891:
    0000005a: 	movsd	(%rdi,%rax,8), %xmm1
    0000005f: 	addsd	%xmm0, %xmm1
.Ltmp890:
    00000063: 	movapd	%xmm1, %xmm0
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp887:
    00000070: 	movapd	%xmm0, %xmm1
    00000074: 	movapd	%xmm1, %xmm0
    00000078: 	retq # Offset: 120
.Ltmp888:
    00000079: 	xorl	%eax, %eax
    0000007b: 	jmp	.Ltmp891 # Offset: 123
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator5IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_"

Binary Function "_Z20accumulate_iterator6IPddET0_T_S2_S1_" after disassembly {
  Number      : 173
  State       : disassembled
  Address     : 0xb210
  Size        : 0x7d
  MaxSize     : 0x80
  Offset      : 0xb210
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator6IPddET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0172:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %rcx
    0000000a: 	sarq	$0x3, %rcx
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jle	.Ltmp892 # Offset: 17
    00000013: 	cmpq	$0x8, %rsi
    00000017: 	jle	.Ltmp893 # Offset: 23
    00000019: 	movq	%rcx, %rdx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	shrq	%rdx
    00000022: 	shlq	$0x4, %rdx
    00000026: 	addq	%rdi, %rdx
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp894:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp894 # Offset: 72
    0000004a: 	movq	%rcx, %rax
    0000004d: 	movapd	%xmm0, %xmm1
    00000051: 	andq	$-0x2, %rax
    00000055: 	andl	$0x1, %ecx
    00000058: 	je	.Ltmp895 # Offset: 88
.Ltmp896:
    0000005a: 	movsd	(%rdi,%rax,8), %xmm1
    0000005f: 	addsd	%xmm0, %xmm1
.Ltmp895:
    00000063: 	movapd	%xmm1, %xmm0
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp892:
    00000070: 	movapd	%xmm0, %xmm1
    00000074: 	movapd	%xmm1, %xmm0
    00000078: 	retq # Offset: 120
.Ltmp893:
    00000079: 	xorl	%eax, %eax
    0000007b: 	jmp	.Ltmp896 # Offset: 123
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator6IPddET0_T_S2_S1_"

Binary Function "_Z20accumulate_iterator6IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_" after disassembly {
  Number      : 174
  State       : disassembled
  Address     : 0xb290
  Size        : 0x7d
  MaxSize     : 0x80
  Offset      : 0xb290
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator6IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0173:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %rcx
    0000000a: 	sarq	$0x3, %rcx
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jle	.Ltmp897 # Offset: 17
    00000013: 	cmpq	$0x8, %rsi
    00000017: 	jle	.Ltmp898 # Offset: 23
    00000019: 	movq	%rcx, %rdx
    0000001c: 	movq	%rdi, %rax
    0000001f: 	shrq	%rdx
    00000022: 	shlq	$0x4, %rdx
    00000026: 	addq	%rdi, %rdx
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp899:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp899 # Offset: 72
    0000004a: 	movq	%rcx, %rax
    0000004d: 	movapd	%xmm0, %xmm1
    00000051: 	andq	$-0x2, %rax
    00000055: 	andl	$0x1, %ecx
    00000058: 	je	.Ltmp900 # Offset: 88
.Ltmp901:
    0000005a: 	movsd	(%rdi,%rax,8), %xmm1
    0000005f: 	addsd	%xmm0, %xmm1
.Ltmp900:
    00000063: 	movapd	%xmm1, %xmm0
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp897:
    00000070: 	movapd	%xmm0, %xmm1
    00000074: 	movapd	%xmm1, %xmm0
    00000078: 	retq # Offset: 120
.Ltmp898:
    00000079: 	xorl	%eax, %eax
    0000007b: 	jmp	.Ltmp901 # Offset: 123
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator6IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_"

Binary Function "_Z20accumulate_iterator7IPddET0_T_S2_S1_" after disassembly {
  Number      : 175
  State       : disassembled
  Address     : 0xb310
  Size        : 0x79
  MaxSize     : 0x80
  Offset      : 0xb310
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator7IPddET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0174:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp902 # Offset: 7
    00000009: 	subq	%rdi, %rsi
    0000000c: 	movq	%rdi, %rax
    0000000f: 	leaq	-0x8(%rsi), %rcx
    00000013: 	shrq	$0x3, %rcx
    00000017: 	addq	$0x1, %rcx
    0000001b: 	cmpq	$0x8, %rsi
    0000001f: 	je	.Ltmp903 # Offset: 31
    00000021: 	movq	%rcx, %rdx
    00000024: 	shrq	%rdx
    00000027: 	shlq	$0x4, %rdx
    0000002b: 	addq	%rdi, %rdx
    0000002e: 	nop # Size: 2
.Ltmp904:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp904 # Offset: 72
    0000004a: 	movq	%rcx, %rax
    0000004d: 	movapd	%xmm0, %xmm1
    00000051: 	andq	$-0x2, %rax
    00000055: 	leaq	(%rdi,%rax,8), %rdi
    00000059: 	cmpq	%rax, %rcx
    0000005c: 	je	.Ltmp905 # Offset: 92
.Ltmp903:
    0000005e: 	movsd	(%rdi), %xmm1
    00000062: 	addsd	%xmm0, %xmm1
.Ltmp905:
    00000066: 	movapd	%xmm1, %xmm0
    0000006a: 	retq # Offset: 106
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp902:
    00000070: 	movapd	%xmm0, %xmm1
    00000074: 	movapd	%xmm1, %xmm0
    00000078: 	retq # Offset: 120
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator7IPddET0_T_S2_S1_"

Binary Function "_Z20accumulate_iterator7IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_" after disassembly {
  Number      : 176
  State       : disassembled
  Address     : 0xb390
  Size        : 0x81
  MaxSize     : 0x90
  Offset      : 0xb390
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator7IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0175:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rdx
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp906 # Offset: 10
    0000000c: 	subq	%rdi, %rsi
    0000000f: 	movq	%rdi, %rax
    00000012: 	leaq	-0x8(%rsi), %rcx
    00000016: 	shrq	$0x3, %rcx
    0000001a: 	addq	$0x1, %rcx
    0000001e: 	cmpq	$0x8, %rsi
    00000022: 	je	.Ltmp907 # Offset: 34
    00000024: 	movq	%rcx, %rdx
    00000027: 	shrq	%rdx
    0000002a: 	shlq	$0x4, %rdx
    0000002e: 	addq	%rdi, %rdx
    00000031: 	nopl	(%rax) # Size: 7
.Ltmp908:
    00000038: 	movsd	(%rax), %xmm1
    0000003c: 	addq	$0x10, %rax
    00000040: 	addsd	%xmm1, %xmm0
    00000044: 	movsd	-0x8(%rax), %xmm1
    00000049: 	addsd	%xmm1, %xmm0
    0000004d: 	cmpq	%rax, %rdx
    00000050: 	jne	.Ltmp908 # Offset: 80
    00000052: 	movq	%rcx, %rax
    00000055: 	movapd	%xmm0, %xmm1
    00000059: 	andq	$-0x2, %rax
    0000005d: 	leaq	(%rdi,%rax,8), %rdx
    00000061: 	cmpq	%rax, %rcx
    00000064: 	je	.Ltmp909 # Offset: 100
.Ltmp907:
    00000066: 	movsd	(%rdx), %xmm1
    0000006a: 	addsd	%xmm0, %xmm1
.Ltmp909:
    0000006e: 	movapd	%xmm1, %xmm0
    00000072: 	retq # Offset: 114
    00000073: 	nopl	(%rax,%rax) # Size: 5
.Ltmp906:
    00000078: 	movapd	%xmm0, %xmm1
    0000007c: 	movapd	%xmm1, %xmm0
    00000080: 	retq # Offset: 128
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator7IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_"

Binary Function "_Z20accumulate_iterator8IPddET0_T_S2_S1_" after disassembly {
  Number      : 177
  State       : disassembled
  Address     : 0xb420
  Size        : 0x79
  MaxSize     : 0x80
  Offset      : 0xb420
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator8IPddET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0176:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp910 # Offset: 7
    00000009: 	subq	%rdi, %rsi
    0000000c: 	movq	%rdi, %rax
    0000000f: 	leaq	-0x8(%rsi), %rcx
    00000013: 	shrq	$0x3, %rcx
    00000017: 	addq	$0x1, %rcx
    0000001b: 	cmpq	$0x8, %rsi
    0000001f: 	je	.Ltmp911 # Offset: 31
    00000021: 	movq	%rcx, %rdx
    00000024: 	shrq	%rdx
    00000027: 	shlq	$0x4, %rdx
    0000002b: 	addq	%rdi, %rdx
    0000002e: 	nop # Size: 2
.Ltmp912:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp912 # Offset: 72
    0000004a: 	movq	%rcx, %rax
    0000004d: 	movapd	%xmm0, %xmm1
    00000051: 	andq	$-0x2, %rax
    00000055: 	leaq	(%rdi,%rax,8), %rdi
    00000059: 	cmpq	%rax, %rcx
    0000005c: 	je	.Ltmp913 # Offset: 92
.Ltmp911:
    0000005e: 	movsd	(%rdi), %xmm1
    00000062: 	addsd	%xmm0, %xmm1
.Ltmp913:
    00000066: 	movapd	%xmm1, %xmm0
    0000006a: 	retq # Offset: 106
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp910:
    00000070: 	movapd	%xmm0, %xmm1
    00000074: 	movapd	%xmm1, %xmm0
    00000078: 	retq # Offset: 120
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator8IPddET0_T_S2_S1_"

Binary Function "_Z20accumulate_iterator8IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_" after disassembly {
  Number      : 178
  State       : disassembled
  Address     : 0xb4a0
  Size        : 0x81
  MaxSize     : 0x90
  Offset      : 0xb4a0
  Section     : .text
  Orc Section : .local.text._Z20accumulate_iterator8IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0177:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rdx
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp914 # Offset: 10
    0000000c: 	subq	%rdi, %rsi
    0000000f: 	movq	%rdi, %rax
    00000012: 	leaq	-0x8(%rsi), %rcx
    00000016: 	shrq	$0x3, %rcx
    0000001a: 	addq	$0x1, %rcx
    0000001e: 	cmpq	$0x8, %rsi
    00000022: 	je	.Ltmp915 # Offset: 34
    00000024: 	movq	%rcx, %rdx
    00000027: 	shrq	%rdx
    0000002a: 	shlq	$0x4, %rdx
    0000002e: 	addq	%rdi, %rdx
    00000031: 	nopl	(%rax) # Size: 7
.Ltmp916:
    00000038: 	movsd	(%rax), %xmm1
    0000003c: 	addq	$0x10, %rax
    00000040: 	addsd	%xmm1, %xmm0
    00000044: 	movsd	-0x8(%rax), %xmm1
    00000049: 	addsd	%xmm1, %xmm0
    0000004d: 	cmpq	%rax, %rdx
    00000050: 	jne	.Ltmp916 # Offset: 80
    00000052: 	movq	%rcx, %rax
    00000055: 	movapd	%xmm0, %xmm1
    00000059: 	andq	$-0x2, %rax
    0000005d: 	leaq	(%rdi,%rax,8), %rdx
    00000061: 	cmpq	%rax, %rcx
    00000064: 	je	.Ltmp917 # Offset: 100
.Ltmp915:
    00000066: 	movsd	(%rdx), %xmm1
    0000006a: 	addsd	%xmm0, %xmm1
.Ltmp917:
    0000006e: 	movapd	%xmm1, %xmm0
    00000072: 	retq # Offset: 114
    00000073: 	nopl	(%rax,%rax) # Size: 5
.Ltmp914:
    00000078: 	movapd	%xmm0, %xmm1
    0000007c: 	movapd	%xmm1, %xmm0
    00000080: 	retq # Offset: 128
DWARF CFI Instructions:
    <empty>
End of Function "_Z20accumulate_iterator8IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_"

Binary Function "_Z19accumulate_array2D1IdET_PKS0_mmS0_" after disassembly {
  Number      : 179
  State       : disassembled
  Address     : 0xb530
  Size        : 0x6d
  MaxSize     : 0x70
  Offset      : 0xb530
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array2D1IdET_PKS0_mmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0178:
    00000000: 	endbr64
    00000004: 	imulq	%rdx, %rsi
    00000008: 	testq	%rsi, %rsi
    0000000b: 	je	.Ltmp918 # Offset: 11
    0000000d: 	cmpq	$0x1, %rsi
    00000011: 	je	.Ltmp919 # Offset: 17
    00000013: 	movq	%rsi, %rdx
    00000016: 	movq	%rdi, %rax
    00000019: 	shrq	%rdx
    0000001c: 	shlq	$0x4, %rdx
    00000020: 	addq	%rdi, %rdx
    00000023: 	nopl	(%rax,%rax) # Size: 5
.Ltmp920:
    00000028: 	movsd	(%rax), %xmm1
    0000002c: 	addq	$0x10, %rax
    00000030: 	addsd	%xmm1, %xmm0
    00000034: 	movsd	-0x8(%rax), %xmm1
    00000039: 	addsd	%xmm1, %xmm0
    0000003d: 	cmpq	%rax, %rdx
    00000040: 	jne	.Ltmp920 # Offset: 64
    00000042: 	movq	%rsi, %rax
    00000045: 	movapd	%xmm0, %xmm1
    00000049: 	andq	$-0x2, %rax
    0000004d: 	andl	$0x1, %esi
    00000050: 	je	.Ltmp921 # Offset: 80
.Ltmp922:
    00000052: 	movsd	(%rdi,%rax,8), %xmm1
    00000057: 	addsd	%xmm0, %xmm1
.Ltmp921:
    0000005b: 	movapd	%xmm1, %xmm0
    0000005f: 	retq # Offset: 95
.Ltmp918:
    00000060: 	movapd	%xmm0, %xmm1
    00000064: 	movapd	%xmm1, %xmm0
    00000068: 	retq # Offset: 104
.Ltmp919:
    00000069: 	xorl	%eax, %eax
    0000006b: 	jmp	.Ltmp922 # Offset: 107
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array2D1IdET_PKS0_mmS0_"

Binary Function "_Z19accumulate_array2D2IdET_PKS0_mmS0_" after disassembly {
  Number      : 180
  State       : disassembled
  Address     : 0xb5a0
  Size        : 0x99
  MaxSize     : 0xa0
  Offset      : 0xb5a0
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array2D2IdET_PKS0_mmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0179:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp923 # Offset: 7
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdi, %rcx
    00000011: 	movq	%rdx, %r11
    00000014: 	movq	%rdx, %rdi
    00000017: 	pushq	%rbx
    00000018: 	movq	%rdx, %rbx
    0000001b: 	leaq	(,%rdx,8), %rbp
    00000023: 	movq	%rsi, %r10
    00000026: 	shrq	%rbx
    00000029: 	movq	%rcx, %r8
    0000002c: 	andq	$-0x2, %r11
    00000030: 	xorl	%edx, %edx
    00000032: 	shlq	$0x4, %rbx
    00000036: 	xorl	%r9d, %r9d
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp927:
    00000040: 	testq	%rdi, %rdi
    00000043: 	je	.Ltmp924 # Offset: 67
    00000045: 	cmpq	$0x1, %rdi
    00000049: 	je	.Ltmp925 # Offset: 73
    0000004b: 	leaq	(%rbx,%r8), %rsi
    0000004f: 	movq	%r8, %rax
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp926:
    00000058: 	movsd	(%rax), %xmm1
    0000005c: 	addq	$0x10, %rax
    00000060: 	addsd	%xmm1, %xmm0
    00000064: 	movsd	-0x8(%rax), %xmm1
    00000069: 	addsd	%xmm1, %xmm0
    0000006d: 	cmpq	%rax, %rsi
    00000070: 	jne	.Ltmp926 # Offset: 112
    00000072: 	movq	%r11, %rax
    00000075: 	cmpq	%rdi, %r11
    00000078: 	je	.Ltmp924 # Offset: 120
.Ltmp928:
    0000007a: 	addq	%rdx, %rax
    0000007d: 	addsd	(%rcx,%rax,8), %xmm0
.Ltmp924:
    00000082: 	addq	$0x1, %r9
    00000086: 	addq	%rdi, %rdx
    00000089: 	addq	%rbp, %r8
    0000008c: 	cmpq	%r9, %r10
    0000008f: 	jne	.Ltmp927 # Offset: 143
    00000091: 	popq	%rbx
    00000092: 	popq	%rbp
    00000093: 	retq # Offset: 147
.Ltmp925:
    00000094: 	xorl	%eax, %eax
    00000096: 	jmp	.Ltmp928 # Offset: 150
.Ltmp923:
    00000098: 	retq # Offset: 152
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array2D2IdET_PKS0_mmS0_"

Binary Function "_Z19accumulate_array2D3IdET_PKS0_mmS0_" after disassembly {
  Number      : 181
  State       : disassembled
  Address     : 0xb640
  Size        : 0x99
  MaxSize     : 0xa0
  Offset      : 0xb640
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array2D3IdET_PKS0_mmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0180:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp929 # Offset: 7
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdi, %rcx
    00000011: 	movq	%rdx, %r11
    00000014: 	movq	%rdx, %rdi
    00000017: 	pushq	%rbx
    00000018: 	movq	%rdx, %rbx
    0000001b: 	leaq	(,%rdx,8), %rbp
    00000023: 	movq	%rsi, %r10
    00000026: 	shrq	%rbx
    00000029: 	movq	%rcx, %r8
    0000002c: 	andq	$-0x2, %r11
    00000030: 	xorl	%edx, %edx
    00000032: 	shlq	$0x4, %rbx
    00000036: 	xorl	%r9d, %r9d
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp933:
    00000040: 	testq	%rdi, %rdi
    00000043: 	je	.Ltmp930 # Offset: 67
    00000045: 	cmpq	$0x1, %rdi
    00000049: 	je	.Ltmp931 # Offset: 73
    0000004b: 	leaq	(%rbx,%r8), %rsi
    0000004f: 	movq	%r8, %rax
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp932:
    00000058: 	movsd	(%rax), %xmm1
    0000005c: 	addq	$0x10, %rax
    00000060: 	addsd	%xmm1, %xmm0
    00000064: 	movsd	-0x8(%rax), %xmm1
    00000069: 	addsd	%xmm1, %xmm0
    0000006d: 	cmpq	%rax, %rsi
    00000070: 	jne	.Ltmp932 # Offset: 112
    00000072: 	movq	%r11, %rax
    00000075: 	cmpq	%rdi, %r11
    00000078: 	je	.Ltmp930 # Offset: 120
.Ltmp934:
    0000007a: 	addq	%rdx, %rax
    0000007d: 	addsd	(%rcx,%rax,8), %xmm0
.Ltmp930:
    00000082: 	addq	$0x1, %r9
    00000086: 	addq	%rdi, %rdx
    00000089: 	addq	%rbp, %r8
    0000008c: 	cmpq	%r9, %r10
    0000008f: 	jne	.Ltmp933 # Offset: 143
    00000091: 	popq	%rbx
    00000092: 	popq	%rbp
    00000093: 	retq # Offset: 147
.Ltmp931:
    00000094: 	xorl	%eax, %eax
    00000096: 	jmp	.Ltmp934 # Offset: 150
.Ltmp929:
    00000098: 	retq # Offset: 152
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array2D3IdET_PKS0_mmS0_"

Binary Function "_Z19accumulate_array2D4IdET_PKS0_mmS0_" after disassembly {
  Number      : 182
  State       : disassembled
  Address     : 0xb6e0
  Size        : 0x80
  MaxSize     : 0x80
  Offset      : 0xb6e0
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array2D4IdET_PKS0_mmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0181:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp935 # Offset: 10
    0000000c: 	movq	%rdx, %r10
    0000000f: 	movq	%rdx, %r9
    00000012: 	leaq	(,%rdx,8), %r11
    0000001a: 	xorl	%r8d, %r8d
    0000001d: 	shrq	%r10
    00000020: 	andq	$-0x2, %r9
    00000024: 	shlq	$0x4, %r10
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp939:
    00000030: 	testq	%rdx, %rdx
    00000033: 	je	.Ltmp936 # Offset: 51
    00000035: 	cmpq	$0x1, %rdx
    00000039: 	je	.Ltmp937 # Offset: 57
    0000003b: 	movq	%rcx, %rax
    0000003e: 	leaq	(%r10,%rcx), %rdi
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp938:
    00000048: 	movsd	(%rax), %xmm1
    0000004c: 	addq	$0x10, %rax
    00000050: 	addsd	%xmm1, %xmm0
    00000054: 	movsd	-0x8(%rax), %xmm1
    00000059: 	addsd	%xmm1, %xmm0
    0000005d: 	cmpq	%rdi, %rax
    00000060: 	jne	.Ltmp938 # Offset: 96
    00000062: 	movq	%r9, %rax
    00000065: 	cmpq	%r9, %rdx
    00000068: 	je	.Ltmp936 # Offset: 104
.Ltmp940:
    0000006a: 	addsd	(%rcx,%rax,8), %xmm0
.Ltmp936:
    0000006f: 	addq	$0x1, %r8
    00000073: 	addq	%r11, %rcx
    00000076: 	cmpq	%r8, %rsi
    00000079: 	jne	.Ltmp939 # Offset: 121
.Ltmp935:
    0000007b: 	retq # Offset: 123
.Ltmp937:
    0000007c: 	xorl	%eax, %eax
    0000007e: 	jmp	.Ltmp940 # Offset: 126
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array2D4IdET_PKS0_mmS0_"

Binary Function "_Z19accumulate_array2D5IdET_PKS0_mmS0_" after disassembly {
  Number      : 183
  State       : disassembled
  Address     : 0xb760
  Size        : 0x82
  MaxSize     : 0x90
  Offset      : 0xb760
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array2D5IdET_PKS0_mmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0182:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp941 # Offset: 7
    00000009: 	movq	%rdx, %r10
    0000000c: 	movq	%rdx, %r8
    0000000f: 	pushq	%rbx
    00000010: 	leaq	(,%rdx,8), %r11
    00000018: 	andq	$-0x2, %r10
    0000001c: 	shrq	%r8
    0000001f: 	xorl	%r9d, %r9d
    00000022: 	leaq	(,%r10,8), %rbx
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp946:
    00000030: 	testq	%rdx, %rdx
    00000033: 	je	.Ltmp942 # Offset: 51
    00000035: 	cmpq	$0x1, %rdx
    00000039: 	je	.Ltmp943 # Offset: 57
    0000003b: 	xorl	%eax, %eax
    0000003d: 	nopl	(%rax) # Size: 3
.Ltmp944:
    00000040: 	movq	%rax, %rcx
    00000043: 	addq	$0x1, %rax
    00000047: 	shlq	$0x4, %rcx
    0000004b: 	movupd	(%rdi,%rcx), %xmm1
    00000050: 	addsd	%xmm1, %xmm0
    00000054: 	unpckhpd	%xmm1, %xmm1
    00000058: 	addsd	%xmm1, %xmm0
    0000005c: 	cmpq	%rax, %r8
    0000005f: 	jne	.Ltmp944 # Offset: 95
    00000061: 	leaq	(%rdi,%rbx), %rax
    00000065: 	cmpq	%r10, %rdx
    00000068: 	je	.Ltmp945 # Offset: 104
.Ltmp947:
    0000006a: 	addsd	(%rax), %xmm0
.Ltmp945:
    0000006e: 	addq	%r11, %rdi
.Ltmp942:
    00000071: 	addq	$0x1, %r9
    00000075: 	cmpq	%r9, %rsi
    00000078: 	jne	.Ltmp946 # Offset: 120
    0000007a: 	popq	%rbx
    0000007b: 	retq # Offset: 123
.Ltmp943:
    0000007c: 	movq	%rdi, %rax
    0000007f: 	jmp	.Ltmp947 # Offset: 127
.Ltmp941:
    00000081: 	retq # Offset: 129
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array2D5IdET_PKS0_mmS0_"

Binary Function "_Z19accumulate_array2D6IdET_PKS0_mmS0_" after disassembly {
  Number      : 184
  State       : disassembled
  Address     : 0xb7f0
  Size        : 0x82
  MaxSize     : 0x90
  Offset      : 0xb7f0
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array2D6IdET_PKS0_mmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0183:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp948 # Offset: 7
    00000009: 	movq	%rdx, %r10
    0000000c: 	movq	%rdx, %r8
    0000000f: 	pushq	%rbx
    00000010: 	xorl	%r9d, %r9d
    00000013: 	andq	$-0x2, %r10
    00000017: 	shrq	%r8
    0000001a: 	leaq	(,%rdx,8), %r11
    00000022: 	leaq	(,%r10,8), %rbx
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp953:
    00000030: 	testq	%rdx, %rdx
    00000033: 	je	.Ltmp949 # Offset: 51
    00000035: 	cmpq	$0x1, %rdx
    00000039: 	je	.Ltmp950 # Offset: 57
    0000003b: 	xorl	%eax, %eax
    0000003d: 	nopl	(%rax) # Size: 3
.Ltmp951:
    00000040: 	movq	%rax, %rcx
    00000043: 	addq	$0x1, %rax
    00000047: 	shlq	$0x4, %rcx
    0000004b: 	movupd	(%rdi,%rcx), %xmm1
    00000050: 	addsd	%xmm1, %xmm0
    00000054: 	unpckhpd	%xmm1, %xmm1
    00000058: 	addsd	%xmm1, %xmm0
    0000005c: 	cmpq	%rax, %r8
    0000005f: 	jne	.Ltmp951 # Offset: 95
    00000061: 	leaq	(%rdi,%rbx), %rax
    00000065: 	cmpq	%r10, %rdx
    00000068: 	je	.Ltmp952 # Offset: 104
.Ltmp954:
    0000006a: 	addsd	(%rax), %xmm0
.Ltmp952:
    0000006e: 	addq	%r11, %rdi
.Ltmp949:
    00000071: 	addq	$0x1, %r9
    00000075: 	cmpq	%r9, %rsi
    00000078: 	jne	.Ltmp953 # Offset: 120
    0000007a: 	popq	%rbx
    0000007b: 	retq # Offset: 123
.Ltmp950:
    0000007c: 	movq	%rdi, %rax
    0000007f: 	jmp	.Ltmp954 # Offset: 127
.Ltmp948:
    00000081: 	retq # Offset: 129
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array2D6IdET_PKS0_mmS0_"

Binary Function "_Z19accumulate_array2D7IdET_PKS0_mmS0_" after disassembly {
  Number      : 185
  State       : disassembled
  Address     : 0xb880
  Size        : 0x73
  MaxSize     : 0x80
  Offset      : 0xb880
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array2D7IdET_PKS0_mmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0184:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp955 # Offset: 10
    0000000c: 	movq	%rdx, %r8
    0000000f: 	movq	%rdx, %r10
    00000012: 	leaq	(,%rdx,8), %r11
    0000001a: 	xorl	%r9d, %r9d
    0000001d: 	shrq	%r8
    00000020: 	andq	$-0x2, %r10
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp959:
    00000028: 	testq	%rdx, %rdx
    0000002b: 	je	.Ltmp956 # Offset: 43
    0000002d: 	xorl	%eax, %eax
    0000002f: 	cmpq	$0x1, %rdx
    00000033: 	je	.Ltmp957 # Offset: 51
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp958:
    00000038: 	movq	%rax, %rdi
    0000003b: 	addq	$0x1, %rax
    0000003f: 	shlq	$0x4, %rdi
    00000043: 	movupd	(%rcx,%rdi), %xmm1
    00000048: 	addsd	%xmm1, %xmm0
    0000004c: 	unpckhpd	%xmm1, %xmm1
    00000050: 	addsd	%xmm1, %xmm0
    00000054: 	cmpq	%rax, %r8
    00000057: 	jne	.Ltmp958 # Offset: 87
    00000059: 	cmpq	%rdx, %r10
    0000005c: 	je	.Ltmp956 # Offset: 92
    0000005e: 	movq	%r10, %rax
.Ltmp957:
    00000061: 	addsd	(%rcx,%rax,8), %xmm0
.Ltmp956:
    00000066: 	addq	$0x1, %r9
    0000006a: 	addq	%r11, %rcx
    0000006d: 	cmpq	%r9, %rsi
    00000070: 	jne	.Ltmp959 # Offset: 112
.Ltmp955:
    00000072: 	retq # Offset: 114
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array2D7IdET_PKS0_mmS0_"

Binary Function "_Z19accumulate_array2D8IdET_PKS0_mmS0_" after disassembly {
  Number      : 186
  State       : disassembled
  Address     : 0xb900
  Size        : 0x99
  MaxSize     : 0xa0
  Offset      : 0xb900
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array2D8IdET_PKS0_mmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0185:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp960 # Offset: 7
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdi, %rcx
    00000011: 	movq	%rdx, %r11
    00000014: 	movq	%rdx, %rdi
    00000017: 	pushq	%rbx
    00000018: 	movq	%rdx, %rbx
    0000001b: 	leaq	(,%rdx,8), %rbp
    00000023: 	movq	%rsi, %r10
    00000026: 	shrq	%rbx
    00000029: 	movq	%rcx, %r8
    0000002c: 	andq	$-0x2, %r11
    00000030: 	xorl	%edx, %edx
    00000032: 	shlq	$0x4, %rbx
    00000036: 	xorl	%r9d, %r9d
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp964:
    00000040: 	testq	%rdi, %rdi
    00000043: 	je	.Ltmp961 # Offset: 67
    00000045: 	cmpq	$0x1, %rdi
    00000049: 	je	.Ltmp962 # Offset: 73
    0000004b: 	leaq	(%rbx,%r8), %rsi
    0000004f: 	movq	%r8, %rax
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp963:
    00000058: 	movsd	(%rax), %xmm1
    0000005c: 	addq	$0x10, %rax
    00000060: 	addsd	%xmm1, %xmm0
    00000064: 	movsd	-0x8(%rax), %xmm1
    00000069: 	addsd	%xmm1, %xmm0
    0000006d: 	cmpq	%rax, %rsi
    00000070: 	jne	.Ltmp963 # Offset: 112
    00000072: 	movq	%r11, %rax
    00000075: 	cmpq	%rdi, %r11
    00000078: 	je	.Ltmp961 # Offset: 120
.Ltmp965:
    0000007a: 	addq	%rdx, %rax
    0000007d: 	addsd	(%rcx,%rax,8), %xmm0
.Ltmp961:
    00000082: 	addq	$0x1, %r9
    00000086: 	addq	%rdi, %rdx
    00000089: 	addq	%rbp, %r8
    0000008c: 	cmpq	%r9, %r10
    0000008f: 	jne	.Ltmp964 # Offset: 143
    00000091: 	popq	%rbx
    00000092: 	popq	%rbp
    00000093: 	retq # Offset: 147
.Ltmp962:
    00000094: 	xorl	%eax, %eax
    00000096: 	jmp	.Ltmp965 # Offset: 150
.Ltmp960:
    00000098: 	retq # Offset: 152
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array2D8IdET_PKS0_mmS0_"

Binary Function "_Z19accumulate_array2D9IdET_PKS0_mmS0_" after disassembly {
  Number      : 187
  State       : disassembled
  Address     : 0xb9a0
  Size        : 0x99
  MaxSize     : 0xa0
  Offset      : 0xb9a0
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array2D9IdET_PKS0_mmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0186:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp966 # Offset: 7
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdi, %rcx
    00000011: 	movq	%rdx, %r11
    00000014: 	movq	%rdx, %rdi
    00000017: 	pushq	%rbx
    00000018: 	movq	%rdx, %rbx
    0000001b: 	leaq	(,%rdx,8), %rbp
    00000023: 	movq	%rsi, %r10
    00000026: 	shrq	%rbx
    00000029: 	movq	%rcx, %r8
    0000002c: 	andq	$-0x2, %r11
    00000030: 	xorl	%edx, %edx
    00000032: 	shlq	$0x4, %rbx
    00000036: 	xorl	%r9d, %r9d
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp970:
    00000040: 	testq	%rdi, %rdi
    00000043: 	je	.Ltmp967 # Offset: 67
    00000045: 	cmpq	$0x1, %rdi
    00000049: 	je	.Ltmp968 # Offset: 73
    0000004b: 	leaq	(%rbx,%r8), %rsi
    0000004f: 	movq	%r8, %rax
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp969:
    00000058: 	movsd	(%rax), %xmm1
    0000005c: 	addq	$0x10, %rax
    00000060: 	addsd	%xmm1, %xmm0
    00000064: 	movsd	-0x8(%rax), %xmm1
    00000069: 	addsd	%xmm1, %xmm0
    0000006d: 	cmpq	%rax, %rsi
    00000070: 	jne	.Ltmp969 # Offset: 112
    00000072: 	movq	%r11, %rax
    00000075: 	cmpq	%rdi, %r11
    00000078: 	je	.Ltmp967 # Offset: 120
.Ltmp971:
    0000007a: 	addq	%rdx, %rax
    0000007d: 	addsd	(%rcx,%rax,8), %xmm0
.Ltmp967:
    00000082: 	addq	$0x1, %r9
    00000086: 	addq	%rdi, %rdx
    00000089: 	addq	%rbp, %r8
    0000008c: 	cmpq	%r9, %r10
    0000008f: 	jne	.Ltmp970 # Offset: 143
    00000091: 	popq	%rbx
    00000092: 	popq	%rbp
    00000093: 	retq # Offset: 147
.Ltmp968:
    00000094: 	xorl	%eax, %eax
    00000096: 	jmp	.Ltmp971 # Offset: 150
.Ltmp966:
    00000098: 	retq # Offset: 152
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array2D9IdET_PKS0_mmS0_"

Binary Function "_Z19accumulate_array3D1IdET_PKS0_mmmS0_" after disassembly {
  Number      : 188
  State       : disassembled
  Address     : 0xba40
  Size        : 0x7d
  MaxSize     : 0x80
  Offset      : 0xba40
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array3D1IdET_PKS0_mmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0187:
    00000000: 	endbr64
    00000004: 	imulq	%rcx, %rdx
    00000008: 	imulq	%rsi, %rdx
    0000000c: 	testq	%rdx, %rdx
    0000000f: 	je	.Ltmp972 # Offset: 15
    00000011: 	cmpq	$0x1, %rdx
    00000015: 	je	.Ltmp973 # Offset: 21
    00000017: 	movq	%rdx, %rcx
    0000001a: 	movq	%rdi, %rax
    0000001d: 	shrq	%rcx
    00000020: 	shlq	$0x4, %rcx
    00000024: 	addq	%rdi, %rcx
    00000027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp974:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rcx
    00000048: 	jne	.Ltmp974 # Offset: 72
    0000004a: 	movq	%rdx, %rax
    0000004d: 	movapd	%xmm0, %xmm1
    00000051: 	andq	$-0x2, %rax
    00000055: 	andl	$0x1, %edx
    00000058: 	je	.Ltmp975 # Offset: 88
.Ltmp976:
    0000005a: 	movsd	(%rdi,%rax,8), %xmm1
    0000005f: 	addsd	%xmm0, %xmm1
.Ltmp975:
    00000063: 	movapd	%xmm1, %xmm0
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp972:
    00000070: 	movapd	%xmm0, %xmm1
    00000074: 	movapd	%xmm1, %xmm0
    00000078: 	retq # Offset: 120
.Ltmp973:
    00000079: 	xorl	%eax, %eax
    0000007b: 	jmp	.Ltmp976 # Offset: 123
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array3D1IdET_PKS0_mmmS0_"

Binary Function "_Z19accumulate_array3D2IdET_PKS0_mmmS0_" after disassembly {
  Number      : 189
  State       : disassembled
  Address     : 0xbac0
  Size        : 0xcd
  MaxSize     : 0xd0
  Offset      : 0xbac0
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array3D2IdET_PKS0_mmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0188:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp977 # Offset: 7
    0000000d: 	pushq	%r15
    0000000f: 	movq	%rcx, %r9
    00000012: 	movq	%rdx, %r10
    00000015: 	leaq	(,%rcx,8), %r11
    0000001d: 	pushq	%r14
    0000001f: 	andq	$-0x2, %r9
    00000023: 	xorl	%r14d, %r14d
    00000026: 	pushq	%r13
    00000028: 	movq	%rdx, %r13
    0000002b: 	pushq	%r12
    0000002d: 	imulq	%rcx, %r13
    00000031: 	xorl	%r12d, %r12d
    00000034: 	pushq	%rbp
    00000035: 	movq	%rcx, %rbp
    00000038: 	shrq	%rbp
    0000003b: 	pushq	%rbx
    0000003c: 	movq	%rsi, %rbx
    0000003f: 	shlq	$0x4, %rbp
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp983:
    00000048: 	testq	%r10, %r10
    0000004b: 	je	.Ltmp978 # Offset: 75
    0000004d: 	leaq	(%rdi,%r12,8), %rsi
    00000051: 	movq	%r12, %rdx
    00000054: 	xorl	%r8d, %r8d
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp982:
    00000060: 	testq	%rcx, %rcx
    00000063: 	je	.Ltmp979 # Offset: 99
    00000065: 	cmpq	$0x1, %rcx
    00000069: 	je	.Ltmp980 # Offset: 105
    0000006b: 	leaq	(%rbp,%rsi), %r15
    00000070: 	movq	%rsi, %rax
    00000073: 	nopl	(%rax,%rax) # Size: 5
.Ltmp981:
    00000078: 	movsd	(%rax), %xmm1
    0000007c: 	addq	$0x10, %rax
    00000080: 	addsd	%xmm1, %xmm0
    00000084: 	movsd	-0x8(%rax), %xmm1
    00000089: 	addsd	%xmm1, %xmm0
    0000008d: 	cmpq	%rax, %r15
    00000090: 	jne	.Ltmp981 # Offset: 144
    00000092: 	movq	%r9, %rax
    00000095: 	cmpq	%rcx, %r9
    00000098: 	je	.Ltmp979 # Offset: 152
.Ltmp984:
    0000009a: 	addq	%rdx, %rax
    0000009d: 	addsd	(%rdi,%rax,8), %xmm0
.Ltmp979:
    000000a2: 	addq	$0x1, %r8
    000000a6: 	addq	%rcx, %rdx
    000000a9: 	addq	%r11, %rsi
    000000ac: 	cmpq	%r8, %r10
    000000af: 	jne	.Ltmp982 # Offset: 175
.Ltmp978:
    000000b1: 	addq	$0x1, %r14
    000000b5: 	addq	%r13, %r12
    000000b8: 	cmpq	%r14, %rbx
    000000bb: 	jne	.Ltmp983 # Offset: 187
    000000bd: 	popq	%rbx
    000000be: 	popq	%rbp
    000000bf: 	popq	%r12
    000000c1: 	popq	%r13
    000000c3: 	popq	%r14
    000000c5: 	popq	%r15
    000000c7: 	retq # Offset: 199
.Ltmp980:
    000000c8: 	xorl	%eax, %eax
    000000ca: 	jmp	.Ltmp984 # Offset: 202
.Ltmp977:
    000000cc: 	retq # Offset: 204
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array3D2IdET_PKS0_mmmS0_"

Binary Function "_Z19accumulate_array3D3IdET_PKS0_mmmS0_" after disassembly {
  Number      : 190
  State       : disassembled
  Address     : 0xbb90
  Size        : 0xcd
  MaxSize     : 0xd0
  Offset      : 0xbb90
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array3D3IdET_PKS0_mmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0189:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp985 # Offset: 7
    0000000d: 	pushq	%r15
    0000000f: 	movq	%rcx, %r9
    00000012: 	movq	%rdx, %r10
    00000015: 	leaq	(,%rcx,8), %r11
    0000001d: 	pushq	%r14
    0000001f: 	andq	$-0x2, %r9
    00000023: 	xorl	%r14d, %r14d
    00000026: 	pushq	%r13
    00000028: 	movq	%rdx, %r13
    0000002b: 	pushq	%r12
    0000002d: 	imulq	%rcx, %r13
    00000031: 	xorl	%r12d, %r12d
    00000034: 	pushq	%rbp
    00000035: 	movq	%rcx, %rbp
    00000038: 	shrq	%rbp
    0000003b: 	pushq	%rbx
    0000003c: 	movq	%rsi, %rbx
    0000003f: 	shlq	$0x4, %rbp
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp991:
    00000048: 	testq	%r10, %r10
    0000004b: 	je	.Ltmp986 # Offset: 75
    0000004d: 	leaq	(%rdi,%r12,8), %rsi
    00000051: 	movq	%r12, %rdx
    00000054: 	xorl	%r8d, %r8d
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp990:
    00000060: 	testq	%rcx, %rcx
    00000063: 	je	.Ltmp987 # Offset: 99
    00000065: 	cmpq	$0x1, %rcx
    00000069: 	je	.Ltmp988 # Offset: 105
    0000006b: 	leaq	(%rbp,%rsi), %r15
    00000070: 	movq	%rsi, %rax
    00000073: 	nopl	(%rax,%rax) # Size: 5
.Ltmp989:
    00000078: 	movsd	(%rax), %xmm1
    0000007c: 	addq	$0x10, %rax
    00000080: 	addsd	%xmm1, %xmm0
    00000084: 	movsd	-0x8(%rax), %xmm1
    00000089: 	addsd	%xmm1, %xmm0
    0000008d: 	cmpq	%rax, %r15
    00000090: 	jne	.Ltmp989 # Offset: 144
    00000092: 	movq	%r9, %rax
    00000095: 	cmpq	%rcx, %r9
    00000098: 	je	.Ltmp987 # Offset: 152
.Ltmp992:
    0000009a: 	addq	%rdx, %rax
    0000009d: 	addsd	(%rdi,%rax,8), %xmm0
.Ltmp987:
    000000a2: 	addq	$0x1, %r8
    000000a6: 	addq	%rcx, %rdx
    000000a9: 	addq	%r11, %rsi
    000000ac: 	cmpq	%r8, %r10
    000000af: 	jne	.Ltmp990 # Offset: 175
.Ltmp986:
    000000b1: 	addq	$0x1, %r14
    000000b5: 	addq	%r13, %r12
    000000b8: 	cmpq	%r14, %rbx
    000000bb: 	jne	.Ltmp991 # Offset: 187
    000000bd: 	popq	%rbx
    000000be: 	popq	%rbp
    000000bf: 	popq	%r12
    000000c1: 	popq	%r13
    000000c3: 	popq	%r14
    000000c5: 	popq	%r15
    000000c7: 	retq # Offset: 199
.Ltmp988:
    000000c8: 	xorl	%eax, %eax
    000000ca: 	jmp	.Ltmp992 # Offset: 202
.Ltmp985:
    000000cc: 	retq # Offset: 204
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array3D3IdET_PKS0_mmmS0_"

Binary Function "_Z19accumulate_array3D4IdET_PKS0_mmmS0_" after disassembly {
  Number      : 191
  State       : disassembled
  Address     : 0xbc60
  Size        : 0xbb
  MaxSize     : 0xc0
  Offset      : 0xbc60
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array3D4IdET_PKS0_mmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0190:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp993 # Offset: 7
    0000000d: 	leaq	(,%rcx,8), %r10
    00000015: 	pushq	%r13
    00000017: 	movq	%rcx, %r8
    0000001a: 	movq	%rdi, %r11
    0000001d: 	pushq	%r12
    0000001f: 	movq	%r10, %r12
    00000022: 	movq	%rdx, %r9
    00000025: 	movq	%rcx, %rdi
    00000028: 	pushq	%rbp
    00000029: 	imulq	%rdx, %r12
    0000002d: 	movq	%rcx, %rbp
    00000030: 	andq	$-0x2, %r8
    00000034: 	shrq	%rbp
    00000037: 	pushq	%rbx
    00000038: 	xorl	%r13d, %r13d
    0000003b: 	movq	%rsi, %rbx
    0000003e: 	shlq	$0x4, %rbp
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp999:
    00000048: 	movq	%r11, %rdx
    0000004b: 	xorl	%esi, %esi
    0000004d: 	testq	%r9, %r9
    00000050: 	je	.Ltmp994 # Offset: 80
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp998:
    00000058: 	testq	%rdi, %rdi
    0000005b: 	je	.Ltmp995 # Offset: 91
    0000005d: 	cmpq	$0x1, %rdi
    00000061: 	je	.Ltmp996 # Offset: 97
    00000063: 	movq	%rdx, %rax
    00000066: 	leaq	(%rbp,%rdx), %rcx
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp997:
    00000070: 	movsd	(%rax), %xmm1
    00000074: 	addq	$0x10, %rax
    00000078: 	addsd	%xmm1, %xmm0
    0000007c: 	movsd	-0x8(%rax), %xmm1
    00000081: 	addsd	%xmm1, %xmm0
    00000085: 	cmpq	%rcx, %rax
    00000088: 	jne	.Ltmp997 # Offset: 136
    0000008a: 	movq	%r8, %rax
    0000008d: 	cmpq	%rdi, %r8
    00000090: 	je	.Ltmp995 # Offset: 144
.Ltmp1000:
    00000092: 	addsd	(%rdx,%rax,8), %xmm0
.Ltmp995:
    00000097: 	addq	$0x1, %rsi
    0000009b: 	addq	%r10, %rdx
    0000009e: 	cmpq	%rsi, %r9
    000000a1: 	jne	.Ltmp998 # Offset: 161
.Ltmp994:
    000000a3: 	addq	$0x1, %r13
    000000a7: 	addq	%r12, %r11
    000000aa: 	cmpq	%r13, %rbx
    000000ad: 	jne	.Ltmp999 # Offset: 173
    000000af: 	popq	%rbx
    000000b0: 	popq	%rbp
    000000b1: 	popq	%r12
    000000b3: 	popq	%r13
    000000b5: 	retq # Offset: 181
.Ltmp996:
    000000b6: 	xorl	%eax, %eax
    000000b8: 	jmp	.Ltmp1000 # Offset: 184
.Ltmp993:
    000000ba: 	retq # Offset: 186
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array3D4IdET_PKS0_mmmS0_"

Binary Function "_Z19accumulate_array3D5IdET_PKS0_mmmS0_" after disassembly {
  Number      : 192
  State       : disassembled
  Address     : 0xbd20
  Size        : 0xae
  MaxSize     : 0xb0
  Offset      : 0xbd20
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array3D5IdET_PKS0_mmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0191:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp1001 # Offset: 7
    0000000d: 	movq	%rcx, %r8
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r11
    00000015: 	movq	%rdx, %r9
    00000018: 	pushq	%rbp
    00000019: 	shrq	%rcx
    0000001c: 	leaq	(,%r8,8), %r10
    00000024: 	xorl	%r12d, %r12d
    00000027: 	pushq	%rbx
    00000028: 	movq	%r8, %rbx
    0000002b: 	andq	$-0x2, %rbx
    0000002f: 	leaq	(,%rbx,8), %rbp
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1008:
    00000040: 	xorl	%esi, %esi
    00000042: 	testq	%r9, %r9
    00000045: 	je	.Ltmp1002 # Offset: 69
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1007:
    00000050: 	testq	%r8, %r8
    00000053: 	je	.Ltmp1003 # Offset: 83
    00000055: 	cmpq	$0x1, %r8
    00000059: 	je	.Ltmp1004 # Offset: 89
    0000005b: 	xorl	%eax, %eax
    0000005d: 	nopl	(%rax) # Size: 3
.Ltmp1005:
    00000060: 	movq	%rax, %rdx
    00000063: 	addq	$0x1, %rax
    00000067: 	shlq	$0x4, %rdx
    0000006b: 	movupd	(%rdi,%rdx), %xmm1
    00000070: 	addsd	%xmm1, %xmm0
    00000074: 	unpckhpd	%xmm1, %xmm1
    00000078: 	addsd	%xmm1, %xmm0
    0000007c: 	cmpq	%rax, %rcx
    0000007f: 	jne	.Ltmp1005 # Offset: 127
    00000081: 	leaq	(%rdi,%rbp), %rax
    00000085: 	cmpq	%rbx, %r8
    00000088: 	je	.Ltmp1006 # Offset: 136
.Ltmp1009:
    0000008a: 	addsd	(%rax), %xmm0
.Ltmp1006:
    0000008e: 	addq	%r10, %rdi
.Ltmp1003:
    00000091: 	addq	$0x1, %rsi
    00000095: 	cmpq	%rsi, %r9
    00000098: 	jne	.Ltmp1007 # Offset: 152
.Ltmp1002:
    0000009a: 	addq	$0x1, %r12
    0000009e: 	cmpq	%r12, %r11
    000000a1: 	jne	.Ltmp1008 # Offset: 161
    000000a3: 	popq	%rbx
    000000a4: 	popq	%rbp
    000000a5: 	popq	%r12
    000000a7: 	retq # Offset: 167
.Ltmp1004:
    000000a8: 	movq	%rdi, %rax
    000000ab: 	jmp	.Ltmp1009 # Offset: 171
.Ltmp1001:
    000000ad: 	retq # Offset: 173
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array3D5IdET_PKS0_mmmS0_"

Binary Function "_Z19accumulate_array3D6IdET_PKS0_mmmS0_" after disassembly {
  Number      : 193
  State       : disassembled
  Address     : 0xbdd0
  Size        : 0xae
  MaxSize     : 0xb0
  Offset      : 0xbdd0
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array3D6IdET_PKS0_mmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0192:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp1010 # Offset: 7
    0000000d: 	movq	%rcx, %r8
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r11
    00000015: 	movq	%rdx, %r9
    00000018: 	pushq	%rbp
    00000019: 	shrq	%rcx
    0000001c: 	xorl	%r12d, %r12d
    0000001f: 	leaq	(,%r8,8), %r10
    00000027: 	pushq	%rbx
    00000028: 	movq	%r8, %rbx
    0000002b: 	andq	$-0x2, %rbx
    0000002f: 	leaq	(,%rbx,8), %rbp
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1017:
    00000040: 	xorl	%esi, %esi
    00000042: 	testq	%r9, %r9
    00000045: 	je	.Ltmp1011 # Offset: 69
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1016:
    00000050: 	testq	%r8, %r8
    00000053: 	je	.Ltmp1012 # Offset: 83
    00000055: 	cmpq	$0x1, %r8
    00000059: 	je	.Ltmp1013 # Offset: 89
    0000005b: 	xorl	%eax, %eax
    0000005d: 	nopl	(%rax) # Size: 3
.Ltmp1014:
    00000060: 	movq	%rax, %rdx
    00000063: 	addq	$0x1, %rax
    00000067: 	shlq	$0x4, %rdx
    0000006b: 	movupd	(%rdi,%rdx), %xmm1
    00000070: 	addsd	%xmm1, %xmm0
    00000074: 	unpckhpd	%xmm1, %xmm1
    00000078: 	addsd	%xmm1, %xmm0
    0000007c: 	cmpq	%rax, %rcx
    0000007f: 	jne	.Ltmp1014 # Offset: 127
    00000081: 	leaq	(%rdi,%rbp), %rax
    00000085: 	cmpq	%rbx, %r8
    00000088: 	je	.Ltmp1015 # Offset: 136
.Ltmp1018:
    0000008a: 	addsd	(%rax), %xmm0
.Ltmp1015:
    0000008e: 	addq	%r10, %rdi
.Ltmp1012:
    00000091: 	addq	$0x1, %rsi
    00000095: 	cmpq	%rsi, %r9
    00000098: 	jne	.Ltmp1016 # Offset: 152
.Ltmp1011:
    0000009a: 	addq	$0x1, %r12
    0000009e: 	cmpq	%r12, %r11
    000000a1: 	jne	.Ltmp1017 # Offset: 161
    000000a3: 	popq	%rbx
    000000a4: 	popq	%rbp
    000000a5: 	popq	%r12
    000000a7: 	retq # Offset: 167
.Ltmp1013:
    000000a8: 	movq	%rdi, %rax
    000000ab: 	jmp	.Ltmp1018 # Offset: 171
.Ltmp1010:
    000000ad: 	retq # Offset: 173
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array3D6IdET_PKS0_mmmS0_"

Binary Function "_Z19accumulate_array3D7IdET_PKS0_mmmS0_" after disassembly {
  Number      : 194
  State       : disassembled
  Address     : 0xbe80
  Size        : 0xae
  MaxSize     : 0xb0
  Offset      : 0xbe80
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array3D7IdET_PKS0_mmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0193:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp1019 # Offset: 7
    0000000d: 	pushq	%r13
    0000000f: 	movq	%rcx, %r9
    00000012: 	movq	%rdi, %r11
    00000015: 	movq	%rdx, %r10
    00000018: 	pushq	%r12
    0000001a: 	movq	%rcx, %r8
    0000001d: 	andq	$-0x2, %r9
    00000021: 	xorl	%r12d, %r12d
    00000024: 	pushq	%rbp
    00000025: 	leaq	(,%rcx,8), %rbp
    0000002d: 	movq	%rbp, %r13
    00000030: 	pushq	%rbx
    00000031: 	movq	%rsi, %rbx
    00000034: 	movq	%rcx, %rsi
    00000037: 	imulq	%rdx, %r13
    0000003b: 	shrq	%rsi
    0000003e: 	nop # Size: 2
.Ltmp1025:
    00000040: 	movq	%r11, %rdx
    00000043: 	xorl	%edi, %edi
    00000045: 	testq	%r10, %r10
    00000048: 	je	.Ltmp1020 # Offset: 72
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1024:
    00000050: 	testq	%r8, %r8
    00000053: 	je	.Ltmp1021 # Offset: 83
    00000055: 	xorl	%eax, %eax
    00000057: 	cmpq	$0x1, %r8
    0000005b: 	je	.Ltmp1022 # Offset: 91
    0000005d: 	nopl	(%rax) # Size: 3
.Ltmp1023:
    00000060: 	movq	%rax, %rcx
    00000063: 	addq	$0x1, %rax
    00000067: 	shlq	$0x4, %rcx
    0000006b: 	movupd	(%rdx,%rcx), %xmm1
    00000070: 	addsd	%xmm1, %xmm0
    00000074: 	unpckhpd	%xmm1, %xmm1
    00000078: 	addsd	%xmm1, %xmm0
    0000007c: 	cmpq	%rax, %rsi
    0000007f: 	jne	.Ltmp1023 # Offset: 127
    00000081: 	cmpq	%r8, %r9
    00000084: 	je	.Ltmp1021 # Offset: 132
    00000086: 	movq	%r9, %rax
.Ltmp1022:
    00000089: 	addsd	(%rdx,%rax,8), %xmm0
.Ltmp1021:
    0000008e: 	addq	$0x1, %rdi
    00000092: 	addq	%rbp, %rdx
    00000095: 	cmpq	%rdi, %r10
    00000098: 	jne	.Ltmp1024 # Offset: 152
.Ltmp1020:
    0000009a: 	addq	$0x1, %r12
    0000009e: 	addq	%r13, %r11
    000000a1: 	cmpq	%r12, %rbx
    000000a4: 	jne	.Ltmp1025 # Offset: 164
    000000a6: 	popq	%rbx
    000000a7: 	popq	%rbp
    000000a8: 	popq	%r12
    000000aa: 	popq	%r13
    000000ac: 	retq # Offset: 172
.Ltmp1019:
    000000ad: 	retq # Offset: 173
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array3D7IdET_PKS0_mmmS0_"

Binary Function "_Z19accumulate_array3D8IdET_PKS0_mmmS0_" after disassembly {
  Number      : 195
  State       : disassembled
  Address     : 0xbf30
  Size        : 0xcd
  MaxSize     : 0xd0
  Offset      : 0xbf30
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array3D8IdET_PKS0_mmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0194:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp1026 # Offset: 7
    0000000d: 	pushq	%r15
    0000000f: 	movq	%rcx, %r9
    00000012: 	movq	%rdx, %r10
    00000015: 	leaq	(,%rcx,8), %r11
    0000001d: 	pushq	%r14
    0000001f: 	andq	$-0x2, %r9
    00000023: 	xorl	%r14d, %r14d
    00000026: 	pushq	%r13
    00000028: 	movq	%rdx, %r13
    0000002b: 	pushq	%r12
    0000002d: 	imulq	%rcx, %r13
    00000031: 	xorl	%r12d, %r12d
    00000034: 	pushq	%rbp
    00000035: 	movq	%rcx, %rbp
    00000038: 	shrq	%rbp
    0000003b: 	pushq	%rbx
    0000003c: 	movq	%rsi, %rbx
    0000003f: 	shlq	$0x4, %rbp
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1032:
    00000048: 	testq	%r10, %r10
    0000004b: 	je	.Ltmp1027 # Offset: 75
    0000004d: 	leaq	(%rdi,%r12,8), %rsi
    00000051: 	movq	%r12, %rdx
    00000054: 	xorl	%r8d, %r8d
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1031:
    00000060: 	testq	%rcx, %rcx
    00000063: 	je	.Ltmp1028 # Offset: 99
    00000065: 	cmpq	$0x1, %rcx
    00000069: 	je	.Ltmp1029 # Offset: 105
    0000006b: 	leaq	(%rbp,%rsi), %r15
    00000070: 	movq	%rsi, %rax
    00000073: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1030:
    00000078: 	movsd	(%rax), %xmm1
    0000007c: 	addq	$0x10, %rax
    00000080: 	addsd	%xmm1, %xmm0
    00000084: 	movsd	-0x8(%rax), %xmm1
    00000089: 	addsd	%xmm1, %xmm0
    0000008d: 	cmpq	%rax, %r15
    00000090: 	jne	.Ltmp1030 # Offset: 144
    00000092: 	movq	%r9, %rax
    00000095: 	cmpq	%rcx, %r9
    00000098: 	je	.Ltmp1028 # Offset: 152
.Ltmp1033:
    0000009a: 	addq	%rdx, %rax
    0000009d: 	addsd	(%rdi,%rax,8), %xmm0
.Ltmp1028:
    000000a2: 	addq	$0x1, %r8
    000000a6: 	addq	%rcx, %rdx
    000000a9: 	addq	%r11, %rsi
    000000ac: 	cmpq	%r8, %r10
    000000af: 	jne	.Ltmp1031 # Offset: 175
.Ltmp1027:
    000000b1: 	addq	$0x1, %r14
    000000b5: 	addq	%r13, %r12
    000000b8: 	cmpq	%r14, %rbx
    000000bb: 	jne	.Ltmp1032 # Offset: 187
    000000bd: 	popq	%rbx
    000000be: 	popq	%rbp
    000000bf: 	popq	%r12
    000000c1: 	popq	%r13
    000000c3: 	popq	%r14
    000000c5: 	popq	%r15
    000000c7: 	retq # Offset: 199
.Ltmp1029:
    000000c8: 	xorl	%eax, %eax
    000000ca: 	jmp	.Ltmp1033 # Offset: 202
.Ltmp1026:
    000000cc: 	retq # Offset: 204
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array3D8IdET_PKS0_mmmS0_"

Binary Function "_Z19accumulate_array3D9IdET_PKS0_mmmS0_" after disassembly {
  Number      : 196
  State       : disassembled
  Address     : 0xc000
  Size        : 0xcd
  MaxSize     : 0xd0
  Offset      : 0xc000
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array3D9IdET_PKS0_mmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0195:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp1034 # Offset: 7
    0000000d: 	pushq	%r15
    0000000f: 	movq	%rcx, %r9
    00000012: 	movq	%rdx, %r10
    00000015: 	leaq	(,%rcx,8), %r11
    0000001d: 	pushq	%r14
    0000001f: 	andq	$-0x2, %r9
    00000023: 	xorl	%r14d, %r14d
    00000026: 	pushq	%r13
    00000028: 	movq	%rdx, %r13
    0000002b: 	pushq	%r12
    0000002d: 	imulq	%rcx, %r13
    00000031: 	xorl	%r12d, %r12d
    00000034: 	pushq	%rbp
    00000035: 	movq	%rcx, %rbp
    00000038: 	shrq	%rbp
    0000003b: 	pushq	%rbx
    0000003c: 	movq	%rsi, %rbx
    0000003f: 	shlq	$0x4, %rbp
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1040:
    00000048: 	testq	%r10, %r10
    0000004b: 	je	.Ltmp1035 # Offset: 75
    0000004d: 	leaq	(%rdi,%r12,8), %rsi
    00000051: 	movq	%r12, %rdx
    00000054: 	xorl	%r8d, %r8d
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1039:
    00000060: 	testq	%rcx, %rcx
    00000063: 	je	.Ltmp1036 # Offset: 99
    00000065: 	cmpq	$0x1, %rcx
    00000069: 	je	.Ltmp1037 # Offset: 105
    0000006b: 	leaq	(%rbp,%rsi), %r15
    00000070: 	movq	%rsi, %rax
    00000073: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1038:
    00000078: 	movsd	(%rax), %xmm1
    0000007c: 	addq	$0x10, %rax
    00000080: 	addsd	%xmm1, %xmm0
    00000084: 	movsd	-0x8(%rax), %xmm1
    00000089: 	addsd	%xmm1, %xmm0
    0000008d: 	cmpq	%rax, %r15
    00000090: 	jne	.Ltmp1038 # Offset: 144
    00000092: 	movq	%r9, %rax
    00000095: 	cmpq	%rcx, %r9
    00000098: 	je	.Ltmp1036 # Offset: 152
.Ltmp1041:
    0000009a: 	addq	%rdx, %rax
    0000009d: 	addsd	(%rdi,%rax,8), %xmm0
.Ltmp1036:
    000000a2: 	addq	$0x1, %r8
    000000a6: 	addq	%rcx, %rdx
    000000a9: 	addq	%r11, %rsi
    000000ac: 	cmpq	%r8, %r10
    000000af: 	jne	.Ltmp1039 # Offset: 175
.Ltmp1035:
    000000b1: 	addq	$0x1, %r14
    000000b5: 	addq	%r13, %r12
    000000b8: 	cmpq	%r14, %rbx
    000000bb: 	jne	.Ltmp1040 # Offset: 187
    000000bd: 	popq	%rbx
    000000be: 	popq	%rbp
    000000bf: 	popq	%r12
    000000c1: 	popq	%r13
    000000c3: 	popq	%r14
    000000c5: 	popq	%r15
    000000c7: 	retq # Offset: 199
.Ltmp1037:
    000000c8: 	xorl	%eax, %eax
    000000ca: 	jmp	.Ltmp1041 # Offset: 202
.Ltmp1034:
    000000cc: 	retq # Offset: 204
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array3D9IdET_PKS0_mmmS0_"

Binary Function "_Z19accumulate_array4D1IdET_PKS0_mmmmS0_" after disassembly {
  Number      : 197
  State       : disassembled
  Address     : 0xc0d0
  Size        : 0x7d
  MaxSize     : 0x80
  Offset      : 0xc0d0
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array4D1IdET_PKS0_mmmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0196:
    00000000: 	endbr64
    00000004: 	imulq	%r8, %rcx
    00000008: 	imulq	%rdx, %rcx
    0000000c: 	imulq	%rsi, %rcx
    00000010: 	testq	%rcx, %rcx
    00000013: 	je	.Ltmp1042 # Offset: 19
    00000015: 	cmpq	$0x1, %rcx
    00000019: 	je	.Ltmp1043 # Offset: 25
    0000001b: 	movq	%rcx, %rdx
    0000001e: 	movq	%rdi, %rax
    00000021: 	shrq	%rdx
    00000024: 	shlq	$0x4, %rdx
    00000028: 	addq	%rdi, %rdx
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1044:
    00000030: 	movsd	(%rax), %xmm1
    00000034: 	addq	$0x10, %rax
    00000038: 	addsd	%xmm1, %xmm0
    0000003c: 	movsd	-0x8(%rax), %xmm1
    00000041: 	addsd	%xmm1, %xmm0
    00000045: 	cmpq	%rax, %rdx
    00000048: 	jne	.Ltmp1044 # Offset: 72
    0000004a: 	movq	%rcx, %rax
    0000004d: 	movapd	%xmm0, %xmm1
    00000051: 	andq	$-0x2, %rax
    00000055: 	andl	$0x1, %ecx
    00000058: 	je	.Ltmp1045 # Offset: 88
.Ltmp1046:
    0000005a: 	movsd	(%rdi,%rax,8), %xmm1
    0000005f: 	addsd	%xmm0, %xmm1
.Ltmp1045:
    00000063: 	movapd	%xmm1, %xmm0
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1042:
    00000070: 	movapd	%xmm0, %xmm1
    00000074: 	movapd	%xmm1, %xmm0
    00000078: 	retq # Offset: 120
.Ltmp1043:
    00000079: 	xorl	%eax, %eax
    0000007b: 	jmp	.Ltmp1046 # Offset: 123
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array4D1IdET_PKS0_mmmmS0_"

Binary Function "_Z19accumulate_array4D2IdET_PKS0_mmmmS0_" after disassembly {
  Number      : 198
  State       : disassembled
  Address     : 0xc150
  Size        : 0x10c
  MaxSize     : 0x110
  Offset      : 0xc150
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array4D2IdET_PKS0_mmmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0197:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rsi, -0x10(%rsp)
    00000013: 	testq	%rsi, %rsi
    00000016: 	je	.Ltmp1047 # Offset: 22
    0000001c: 	movq	%rcx, %r15
    0000001f: 	movq	%r8, %rbp
    00000022: 	movq	%r8, %r10
    00000025: 	movq	%rdx, %r13
    00000028: 	imulq	%r8, %r15
    0000002c: 	shrq	%rbp
    0000002f: 	movq	%rcx, %r11
    00000032: 	movq	%r8, %rsi
    00000035: 	leaq	(,%r8,8), %rbx
    0000003d: 	shlq	$0x4, %rbp
    00000041: 	andq	$-0x2, %r10
    00000045: 	movq	$0x0, -0x20(%rsp)
    0000004e: 	movq	$0x0, -0x28(%rsp)
    00000057: 	movq	%r15, %rax
    0000005a: 	imulq	%rdx, %rax
    0000005e: 	movq	%rax, -0x18(%rsp)
.Ltmp1055:
    00000063: 	movq	-0x20(%rsp), %r12
    00000068: 	xorl	%r14d, %r14d
    0000006b: 	testq	%r13, %r13
    0000006e: 	je	.Ltmp1048 # Offset: 110
.Ltmp1054:
    00000070: 	testq	%r11, %r11
    00000073: 	je	.Ltmp1049 # Offset: 115
    00000075: 	leaq	(%rdi,%r12,8), %rcx
    00000079: 	movq	%r12, %rdx
    0000007c: 	xorl	%r8d, %r8d
    0000007f: 	nop # Size: 1
.Ltmp1053:
    00000080: 	testq	%rsi, %rsi
    00000083: 	je	.Ltmp1050 # Offset: 131
    00000085: 	cmpq	$0x1, %rsi
    00000089: 	je	.Ltmp1051 # Offset: 137
    0000008b: 	leaq	(%rbp,%rcx), %r9
    00000090: 	movq	%rcx, %rax
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1052:
    00000098: 	movsd	(%rax), %xmm1
    0000009c: 	addq	$0x10, %rax
    000000a0: 	addsd	%xmm1, %xmm0
    000000a4: 	movsd	-0x8(%rax), %xmm1
    000000a9: 	addsd	%xmm1, %xmm0
    000000ad: 	cmpq	%rax, %r9
    000000b0: 	jne	.Ltmp1052 # Offset: 176
    000000b2: 	movq	%r10, %rax
    000000b5: 	cmpq	%rsi, %r10
    000000b8: 	je	.Ltmp1050 # Offset: 184
.Ltmp1056:
    000000ba: 	addq	%rdx, %rax
    000000bd: 	addsd	(%rdi,%rax,8), %xmm0
.Ltmp1050:
    000000c2: 	addq	$0x1, %r8
    000000c6: 	addq	%rsi, %rdx
    000000c9: 	addq	%rbx, %rcx
    000000cc: 	cmpq	%r8, %r11
    000000cf: 	jne	.Ltmp1053 # Offset: 207
.Ltmp1049:
    000000d1: 	addq	$0x1, %r14
    000000d5: 	addq	%r15, %r12
    000000d8: 	cmpq	%r14, %r13
    000000db: 	jne	.Ltmp1054 # Offset: 219
.Ltmp1048:
    000000dd: 	addq	$0x1, -0x28(%rsp)
    000000e3: 	movq	-0x18(%rsp), %rdx
    000000e8: 	movq	-0x28(%rsp), %rax
    000000ed: 	addq	%rdx, -0x20(%rsp)
    000000f2: 	cmpq	%rax, -0x10(%rsp)
    000000f7: 	jne	.Ltmp1055 # Offset: 247
.Ltmp1047:
    000000fd: 	popq	%rbx
    000000fe: 	popq	%rbp
    000000ff: 	popq	%r12
    00000101: 	popq	%r13
    00000103: 	popq	%r14
    00000105: 	popq	%r15
    00000107: 	retq # Offset: 263
.Ltmp1051:
    00000108: 	xorl	%eax, %eax
    0000010a: 	jmp	.Ltmp1056 # Offset: 266
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array4D2IdET_PKS0_mmmmS0_"

Binary Function "_Z19accumulate_array4D3IdET_PKS0_mmmmS0_" after disassembly {
  Number      : 199
  State       : disassembled
  Address     : 0xc260
  Size        : 0x10c
  MaxSize     : 0x110
  Offset      : 0xc260
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array4D3IdET_PKS0_mmmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0198:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rsi, -0x10(%rsp)
    00000013: 	testq	%rsi, %rsi
    00000016: 	je	.Ltmp1057 # Offset: 22
    0000001c: 	movq	%rcx, %r15
    0000001f: 	movq	%r8, %rbp
    00000022: 	movq	%r8, %r10
    00000025: 	movq	%rdx, %r13
    00000028: 	imulq	%r8, %r15
    0000002c: 	shrq	%rbp
    0000002f: 	movq	%rcx, %r11
    00000032: 	movq	%r8, %rsi
    00000035: 	leaq	(,%r8,8), %rbx
    0000003d: 	shlq	$0x4, %rbp
    00000041: 	andq	$-0x2, %r10
    00000045: 	movq	$0x0, -0x20(%rsp)
    0000004e: 	movq	$0x0, -0x28(%rsp)
    00000057: 	movq	%r15, %rax
    0000005a: 	imulq	%rdx, %rax
    0000005e: 	movq	%rax, -0x18(%rsp)
.Ltmp1065:
    00000063: 	testq	%r13, %r13
    00000066: 	je	.Ltmp1058 # Offset: 102
    00000068: 	movq	-0x20(%rsp), %r12
    0000006d: 	xorl	%r14d, %r14d
.Ltmp1064:
    00000070: 	testq	%r11, %r11
    00000073: 	je	.Ltmp1059 # Offset: 115
    00000075: 	leaq	(%rdi,%r12,8), %rcx
    00000079: 	movq	%r12, %rdx
    0000007c: 	xorl	%r8d, %r8d
    0000007f: 	nop # Size: 1
.Ltmp1063:
    00000080: 	testq	%rsi, %rsi
    00000083: 	je	.Ltmp1060 # Offset: 131
    00000085: 	cmpq	$0x1, %rsi
    00000089: 	je	.Ltmp1061 # Offset: 137
    0000008b: 	leaq	(%rbp,%rcx), %r9
    00000090: 	movq	%rcx, %rax
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1062:
    00000098: 	movsd	(%rax), %xmm1
    0000009c: 	addq	$0x10, %rax
    000000a0: 	addsd	%xmm1, %xmm0
    000000a4: 	movsd	-0x8(%rax), %xmm1
    000000a9: 	addsd	%xmm1, %xmm0
    000000ad: 	cmpq	%rax, %r9
    000000b0: 	jne	.Ltmp1062 # Offset: 176
    000000b2: 	movq	%r10, %rax
    000000b5: 	cmpq	%rsi, %r10
    000000b8: 	je	.Ltmp1060 # Offset: 184
.Ltmp1066:
    000000ba: 	addq	%rdx, %rax
    000000bd: 	addsd	(%rdi,%rax,8), %xmm0
.Ltmp1060:
    000000c2: 	addq	$0x1, %r8
    000000c6: 	addq	%rsi, %rdx
    000000c9: 	addq	%rbx, %rcx
    000000cc: 	cmpq	%r8, %r11
    000000cf: 	jne	.Ltmp1063 # Offset: 207
.Ltmp1059:
    000000d1: 	addq	$0x1, %r14
    000000d5: 	addq	%r15, %r12
    000000d8: 	cmpq	%r14, %r13
    000000db: 	jne	.Ltmp1064 # Offset: 219
.Ltmp1058:
    000000dd: 	addq	$0x1, -0x28(%rsp)
    000000e3: 	movq	-0x18(%rsp), %rdx
    000000e8: 	movq	-0x28(%rsp), %rax
    000000ed: 	addq	%rdx, -0x20(%rsp)
    000000f2: 	cmpq	%rax, -0x10(%rsp)
    000000f7: 	jne	.Ltmp1065 # Offset: 247
.Ltmp1057:
    000000fd: 	popq	%rbx
    000000fe: 	popq	%rbp
    000000ff: 	popq	%r12
    00000101: 	popq	%r13
    00000103: 	popq	%r14
    00000105: 	popq	%r15
    00000107: 	retq # Offset: 263
.Ltmp1061:
    00000108: 	xorl	%eax, %eax
    0000010a: 	jmp	.Ltmp1066 # Offset: 266
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array4D3IdET_PKS0_mmmmS0_"

Binary Function "_Z19accumulate_array4D4IdET_PKS0_mmmmS0_" after disassembly {
  Number      : 200
  State       : disassembled
  Address     : 0xc370
  Size        : 0xfa
  MaxSize     : 0x100
  Offset      : 0xc370
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array4D4IdET_PKS0_mmmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0199:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rsi, -0x10(%rsp)
    00000013: 	testq	%rsi, %rsi
    00000016: 	je	.Ltmp1067 # Offset: 22
    0000001c: 	movq	%rcx, %rax
    0000001f: 	movq	%r8, %r11
    00000022: 	movq	%rdi, %rbp
    00000025: 	movq	%rdx, %r13
    00000028: 	imulq	%r8, %rax
    0000002c: 	shrq	%r11
    0000002f: 	movq	%r8, %rdi
    00000032: 	movq	%rcx, %r9
    00000035: 	leaq	(,%r8,8), %r10
    0000003d: 	shlq	$0x4, %r11
    00000041: 	andq	$-0x2, %r8
    00000045: 	xorl	%r15d, %r15d
    00000048: 	leaq	(,%rax,8), %r14
    00000050: 	imulq	%rdx, %rax
    00000054: 	shlq	$0x3, %rax
    00000058: 	movq	%rax, -0x18(%rsp)
.Ltmp1075:
    0000005d: 	movq	%rbp, %rbx
    00000060: 	xorl	%esi, %esi
    00000062: 	testq	%r13, %r13
    00000065: 	je	.Ltmp1068 # Offset: 101
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1074:
    00000070: 	movq	%rbx, %rdx
    00000073: 	xorl	%ecx, %ecx
    00000075: 	testq	%r9, %r9
    00000078: 	je	.Ltmp1069 # Offset: 120
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1073:
    00000080: 	testq	%rdi, %rdi
    00000083: 	je	.Ltmp1070 # Offset: 131
    00000085: 	cmpq	$0x1, %rdi
    00000089: 	je	.Ltmp1071 # Offset: 137
    0000008b: 	movq	%rdx, %rax
    0000008e: 	leaq	(%r11,%rdx), %r12
    00000092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1072:
    00000098: 	movsd	(%rax), %xmm1
    0000009c: 	addq	$0x10, %rax
    000000a0: 	addsd	%xmm1, %xmm0
    000000a4: 	movsd	-0x8(%rax), %xmm1
    000000a9: 	addsd	%xmm1, %xmm0
    000000ad: 	cmpq	%r12, %rax
    000000b0: 	jne	.Ltmp1072 # Offset: 176
    000000b2: 	movq	%r8, %rax
    000000b5: 	cmpq	%rdi, %r8
    000000b8: 	je	.Ltmp1070 # Offset: 184
.Ltmp1076:
    000000ba: 	addsd	(%rdx,%rax,8), %xmm0
.Ltmp1070:
    000000bf: 	addq	$0x1, %rcx
    000000c3: 	addq	%r10, %rdx
    000000c6: 	cmpq	%rcx, %r9
    000000c9: 	jne	.Ltmp1073 # Offset: 201
.Ltmp1069:
    000000cb: 	addq	$0x1, %rsi
    000000cf: 	addq	%r14, %rbx
    000000d2: 	cmpq	%rsi, %r13
    000000d5: 	jne	.Ltmp1074 # Offset: 213
.Ltmp1068:
    000000d7: 	addq	-0x18(%rsp), %rbp
    000000dc: 	addq	$0x1, %r15
    000000e0: 	cmpq	%r15, -0x10(%rsp)
    000000e5: 	jne	.Ltmp1075 # Offset: 229
.Ltmp1067:
    000000eb: 	popq	%rbx
    000000ec: 	popq	%rbp
    000000ed: 	popq	%r12
    000000ef: 	popq	%r13
    000000f1: 	popq	%r14
    000000f3: 	popq	%r15
    000000f5: 	retq # Offset: 245
.Ltmp1071:
    000000f6: 	xorl	%eax, %eax
    000000f8: 	jmp	.Ltmp1076 # Offset: 248
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array4D4IdET_PKS0_mmmmS0_"

Binary Function "_Z19accumulate_array4D5IdET_PKS0_mmmmS0_" after disassembly {
  Number      : 201
  State       : disassembled
  Address     : 0xc470
  Size        : 0xcb
  MaxSize     : 0xd0
  Offset      : 0xc470
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array4D5IdET_PKS0_mmmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0200:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp1077 # Offset: 7
    0000000d: 	movq	%r8, %r11
    00000010: 	movq	%rcx, %r9
    00000013: 	movq	%r8, %rcx
    00000016: 	pushq	%r14
    00000018: 	andq	$-0x2, %r11
    0000001c: 	pushq	%r13
    0000001e: 	shrq	%rcx
    00000021: 	xorl	%r14d, %r14d
    00000024: 	pushq	%r12
    00000026: 	leaq	(,%r8,8), %r10
    0000002e: 	leaq	(,%r11,8), %r12
    00000036: 	pushq	%rbp
    00000037: 	movq	%rdx, %rbp
    0000003a: 	pushq	%rbx
    0000003b: 	movq	%rsi, %rbx
.Ltmp1086:
    0000003e: 	xorl	%r13d, %r13d
    00000041: 	testq	%rbp, %rbp
    00000044: 	je	.Ltmp1078 # Offset: 68
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1085:
    00000050: 	xorl	%esi, %esi
    00000052: 	testq	%r9, %r9
    00000055: 	je	.Ltmp1079 # Offset: 85
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1084:
    00000060: 	testq	%r8, %r8
    00000063: 	je	.Ltmp1080 # Offset: 99
    00000065: 	cmpq	$0x1, %r8
    00000069: 	je	.Ltmp1081 # Offset: 105
    0000006b: 	xorl	%eax, %eax
    0000006d: 	nopl	(%rax) # Size: 3
.Ltmp1082:
    00000070: 	movq	%rax, %rdx
    00000073: 	addq	$0x1, %rax
    00000077: 	shlq	$0x4, %rdx
    0000007b: 	movupd	(%rdi,%rdx), %xmm1
    00000080: 	addsd	%xmm1, %xmm0
    00000084: 	unpckhpd	%xmm1, %xmm1
    00000088: 	addsd	%xmm1, %xmm0
    0000008c: 	cmpq	%rax, %rcx
    0000008f: 	jne	.Ltmp1082 # Offset: 143
    00000091: 	leaq	(%rdi,%r12), %rax
    00000095: 	cmpq	%r8, %r11
    00000098: 	je	.Ltmp1083 # Offset: 152
.Ltmp1087:
    0000009a: 	addsd	(%rax), %xmm0
.Ltmp1083:
    0000009e: 	addq	%r10, %rdi
.Ltmp1080:
    000000a1: 	addq	$0x1, %rsi
    000000a5: 	cmpq	%rsi, %r9
    000000a8: 	jne	.Ltmp1084 # Offset: 168
.Ltmp1079:
    000000aa: 	addq	$0x1, %r13
    000000ae: 	cmpq	%r13, %rbp
    000000b1: 	jne	.Ltmp1085 # Offset: 177
.Ltmp1078:
    000000b3: 	addq	$0x1, %r14
    000000b7: 	cmpq	%r14, %rbx
    000000ba: 	jne	.Ltmp1086 # Offset: 186
    000000bc: 	popq	%rbx
    000000bd: 	popq	%rbp
    000000be: 	popq	%r12
    000000c0: 	popq	%r13
    000000c2: 	popq	%r14
    000000c4: 	retq # Offset: 196
.Ltmp1081:
    000000c5: 	movq	%rdi, %rax
    000000c8: 	jmp	.Ltmp1087 # Offset: 200
.Ltmp1077:
    000000ca: 	retq # Offset: 202
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array4D5IdET_PKS0_mmmmS0_"

Binary Function "_Z19accumulate_array4D6IdET_PKS0_mmmmS0_" after disassembly {
  Number      : 202
  State       : disassembled
  Address     : 0xc540
  Size        : 0xcb
  MaxSize     : 0xd0
  Offset      : 0xc540
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array4D6IdET_PKS0_mmmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0201:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp1088 # Offset: 7
    0000000d: 	movq	%r8, %r11
    00000010: 	movq	%rcx, %r9
    00000013: 	movq	%r8, %rcx
    00000016: 	pushq	%r14
    00000018: 	andq	$-0x2, %r11
    0000001c: 	pushq	%r13
    0000001e: 	shrq	%rcx
    00000021: 	xorl	%r14d, %r14d
    00000024: 	pushq	%r12
    00000026: 	leaq	(,%r8,8), %r10
    0000002e: 	leaq	(,%r11,8), %r12
    00000036: 	pushq	%rbp
    00000037: 	movq	%rdx, %rbp
    0000003a: 	pushq	%rbx
    0000003b: 	movq	%rsi, %rbx
.Ltmp1097:
    0000003e: 	xorl	%r13d, %r13d
    00000041: 	testq	%rbp, %rbp
    00000044: 	je	.Ltmp1089 # Offset: 68
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1096:
    00000050: 	xorl	%esi, %esi
    00000052: 	testq	%r9, %r9
    00000055: 	je	.Ltmp1090 # Offset: 85
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1095:
    00000060: 	testq	%r8, %r8
    00000063: 	je	.Ltmp1091 # Offset: 99
    00000065: 	cmpq	$0x1, %r8
    00000069: 	je	.Ltmp1092 # Offset: 105
    0000006b: 	xorl	%eax, %eax
    0000006d: 	nopl	(%rax) # Size: 3
.Ltmp1093:
    00000070: 	movq	%rax, %rdx
    00000073: 	addq	$0x1, %rax
    00000077: 	shlq	$0x4, %rdx
    0000007b: 	movupd	(%rdi,%rdx), %xmm1
    00000080: 	addsd	%xmm1, %xmm0
    00000084: 	unpckhpd	%xmm1, %xmm1
    00000088: 	addsd	%xmm1, %xmm0
    0000008c: 	cmpq	%rax, %rcx
    0000008f: 	jne	.Ltmp1093 # Offset: 143
    00000091: 	leaq	(%rdi,%r12), %rax
    00000095: 	cmpq	%r11, %r8
    00000098: 	je	.Ltmp1094 # Offset: 152
.Ltmp1098:
    0000009a: 	addsd	(%rax), %xmm0
.Ltmp1094:
    0000009e: 	addq	%r10, %rdi
.Ltmp1091:
    000000a1: 	addq	$0x1, %rsi
    000000a5: 	cmpq	%rsi, %r9
    000000a8: 	jne	.Ltmp1095 # Offset: 168
.Ltmp1090:
    000000aa: 	addq	$0x1, %r13
    000000ae: 	cmpq	%r13, %rbp
    000000b1: 	jne	.Ltmp1096 # Offset: 177
.Ltmp1089:
    000000b3: 	addq	$0x1, %r14
    000000b7: 	cmpq	%r14, %rbx
    000000ba: 	jne	.Ltmp1097 # Offset: 186
    000000bc: 	popq	%rbx
    000000bd: 	popq	%rbp
    000000be: 	popq	%r12
    000000c0: 	popq	%r13
    000000c2: 	popq	%r14
    000000c4: 	retq # Offset: 196
.Ltmp1092:
    000000c5: 	movq	%rdi, %rax
    000000c8: 	jmp	.Ltmp1098 # Offset: 200
.Ltmp1088:
    000000ca: 	retq # Offset: 202
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array4D6IdET_PKS0_mmmmS0_"

Binary Function "_Z19accumulate_array4D7IdET_PKS0_mmmmS0_" after disassembly {
  Number      : 203
  State       : disassembled
  Address     : 0xc610
  Size        : 0xed
  MaxSize     : 0xf0
  Offset      : 0xc610
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array4D7IdET_PKS0_mmmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0202:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rsi, -0x10(%rsp)
    00000013: 	testq	%rsi, %rsi
    00000016: 	je	.Ltmp1099 # Offset: 22
    0000001c: 	movq	%rcx, %rax
    0000001f: 	movq	%r8, %rsi
    00000022: 	movq	%r8, %r9
    00000025: 	movq	%rdi, %rbp
    00000028: 	imulq	%r8, %rax
    0000002c: 	movq	%rdx, %r13
    0000002f: 	movq	%rcx, %r10
    00000032: 	shrq	%rsi
    00000035: 	leaq	(,%r8,8), %r11
    0000003d: 	andq	$-0x2, %r9
    00000041: 	xorl	%r15d, %r15d
    00000044: 	leaq	(,%rax,8), %r14
    0000004c: 	imulq	%rdx, %rax
    00000050: 	shlq	$0x3, %rax
    00000054: 	movq	%rax, -0x18(%rsp)
.Ltmp1107:
    00000059: 	movq	%rbp, %r12
    0000005c: 	xorl	%ebx, %ebx
    0000005e: 	testq	%r13, %r13
    00000061: 	je	.Ltmp1100 # Offset: 97
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1106:
    00000068: 	movq	%r12, %rdx
    0000006b: 	xorl	%edi, %edi
    0000006d: 	testq	%r10, %r10
    00000070: 	je	.Ltmp1101 # Offset: 112
    00000072: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1105:
    00000078: 	testq	%r8, %r8
    0000007b: 	je	.Ltmp1102 # Offset: 123
    0000007d: 	xorl	%eax, %eax
    0000007f: 	cmpq	$0x1, %r8
    00000083: 	je	.Ltmp1103 # Offset: 131
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp1104:
    00000088: 	movq	%rax, %rcx
    0000008b: 	addq	$0x1, %rax
    0000008f: 	shlq	$0x4, %rcx
    00000093: 	movupd	(%rdx,%rcx), %xmm2
    00000098: 	addsd	%xmm2, %xmm0
    0000009c: 	unpckhpd	%xmm2, %xmm2
    000000a0: 	addsd	%xmm2, %xmm0
    000000a4: 	cmpq	%rax, %rsi
    000000a7: 	jne	.Ltmp1104 # Offset: 167
    000000a9: 	cmpq	%r9, %r8
    000000ac: 	je	.Ltmp1102 # Offset: 172
    000000ae: 	movq	%r9, %rax
.Ltmp1103:
    000000b1: 	addsd	(%rdx,%rax,8), %xmm0
.Ltmp1102:
    000000b6: 	addq	$0x1, %rdi
    000000ba: 	addq	%r11, %rdx
    000000bd: 	cmpq	%rdi, %r10
    000000c0: 	jne	.Ltmp1105 # Offset: 192
.Ltmp1101:
    000000c2: 	addq	$0x1, %rbx
    000000c6: 	addq	%r14, %r12
    000000c9: 	cmpq	%rbx, %r13
    000000cc: 	jne	.Ltmp1106 # Offset: 204
.Ltmp1100:
    000000ce: 	addq	-0x18(%rsp), %rbp
    000000d3: 	addq	$0x1, %r15
    000000d7: 	cmpq	%r15, -0x10(%rsp)
    000000dc: 	jne	.Ltmp1107 # Offset: 220
.Ltmp1099:
    000000e2: 	popq	%rbx
    000000e3: 	popq	%rbp
    000000e4: 	popq	%r12
    000000e6: 	popq	%r13
    000000e8: 	popq	%r14
    000000ea: 	popq	%r15
    000000ec: 	retq # Offset: 236
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array4D7IdET_PKS0_mmmmS0_"

Binary Function "_Z19accumulate_array4D8IdET_PKS0_mmmmS0_" after disassembly {
  Number      : 204
  State       : disassembled
  Address     : 0xc700
  Size        : 0x10c
  MaxSize     : 0x110
  Offset      : 0xc700
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array4D8IdET_PKS0_mmmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0203:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rsi, -0x10(%rsp)
    00000013: 	testq	%rsi, %rsi
    00000016: 	je	.Ltmp1108 # Offset: 22
    0000001c: 	movq	%rcx, %r15
    0000001f: 	movq	%r8, %rbp
    00000022: 	movq	%r8, %r10
    00000025: 	movq	%rdx, %r13
    00000028: 	imulq	%r8, %r15
    0000002c: 	shrq	%rbp
    0000002f: 	movq	%rcx, %r11
    00000032: 	movq	%r8, %rsi
    00000035: 	leaq	(,%r8,8), %rbx
    0000003d: 	shlq	$0x4, %rbp
    00000041: 	andq	$-0x2, %r10
    00000045: 	movq	$0x0, -0x20(%rsp)
    0000004e: 	movq	$0x0, -0x28(%rsp)
    00000057: 	movq	%r15, %rax
    0000005a: 	imulq	%rdx, %rax
    0000005e: 	movq	%rax, -0x18(%rsp)
.Ltmp1116:
    00000063: 	testq	%r13, %r13
    00000066: 	je	.Ltmp1109 # Offset: 102
    00000068: 	movq	-0x20(%rsp), %r12
    0000006d: 	xorl	%r14d, %r14d
.Ltmp1115:
    00000070: 	testq	%r11, %r11
    00000073: 	je	.Ltmp1110 # Offset: 115
    00000075: 	leaq	(%rdi,%r12,8), %rcx
    00000079: 	movq	%r12, %rdx
    0000007c: 	xorl	%r8d, %r8d
    0000007f: 	nop # Size: 1
.Ltmp1114:
    00000080: 	testq	%rsi, %rsi
    00000083: 	je	.Ltmp1111 # Offset: 131
    00000085: 	cmpq	$0x1, %rsi
    00000089: 	je	.Ltmp1112 # Offset: 137
    0000008b: 	leaq	(%rbp,%rcx), %r9
    00000090: 	movq	%rcx, %rax
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1113:
    00000098: 	movsd	(%rax), %xmm1
    0000009c: 	addq	$0x10, %rax
    000000a0: 	addsd	%xmm1, %xmm0
    000000a4: 	movsd	-0x8(%rax), %xmm1
    000000a9: 	addsd	%xmm1, %xmm0
    000000ad: 	cmpq	%rax, %r9
    000000b0: 	jne	.Ltmp1113 # Offset: 176
    000000b2: 	movq	%r10, %rax
    000000b5: 	cmpq	%rsi, %r10
    000000b8: 	je	.Ltmp1111 # Offset: 184
.Ltmp1117:
    000000ba: 	addq	%rdx, %rax
    000000bd: 	addsd	(%rdi,%rax,8), %xmm0
.Ltmp1111:
    000000c2: 	addq	$0x1, %r8
    000000c6: 	addq	%rsi, %rdx
    000000c9: 	addq	%rbx, %rcx
    000000cc: 	cmpq	%r8, %r11
    000000cf: 	jne	.Ltmp1114 # Offset: 207
.Ltmp1110:
    000000d1: 	addq	$0x1, %r14
    000000d5: 	addq	%r15, %r12
    000000d8: 	cmpq	%r14, %r13
    000000db: 	jne	.Ltmp1115 # Offset: 219
.Ltmp1109:
    000000dd: 	addq	$0x1, -0x28(%rsp)
    000000e3: 	movq	-0x18(%rsp), %rdx
    000000e8: 	movq	-0x28(%rsp), %rax
    000000ed: 	addq	%rdx, -0x20(%rsp)
    000000f2: 	cmpq	%rax, -0x10(%rsp)
    000000f7: 	jne	.Ltmp1116 # Offset: 247
.Ltmp1108:
    000000fd: 	popq	%rbx
    000000fe: 	popq	%rbp
    000000ff: 	popq	%r12
    00000101: 	popq	%r13
    00000103: 	popq	%r14
    00000105: 	popq	%r15
    00000107: 	retq # Offset: 263
.Ltmp1112:
    00000108: 	xorl	%eax, %eax
    0000010a: 	jmp	.Ltmp1117 # Offset: 266
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array4D8IdET_PKS0_mmmmS0_"

Binary Function "_Z19accumulate_array4D9IdET_PKS0_mmmmS0_" after disassembly {
  Number      : 205
  State       : disassembled
  Address     : 0xc810
  Size        : 0x10c
  MaxSize     : 0x110
  Offset      : 0xc810
  Section     : .text
  Orc Section : .local.text._Z19accumulate_array4D9IdET_PKS0_mmmmS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0204:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rsi, -0x10(%rsp)
    00000013: 	testq	%rsi, %rsi
    00000016: 	je	.Ltmp1118 # Offset: 22
    0000001c: 	movq	%rcx, %r15
    0000001f: 	movq	%r8, %rbp
    00000022: 	movq	%r8, %r10
    00000025: 	movq	%rdx, %r13
    00000028: 	imulq	%r8, %r15
    0000002c: 	shrq	%rbp
    0000002f: 	movq	%rcx, %r11
    00000032: 	movq	%r8, %rsi
    00000035: 	leaq	(,%r8,8), %rbx
    0000003d: 	shlq	$0x4, %rbp
    00000041: 	andq	$-0x2, %r10
    00000045: 	movq	$0x0, -0x20(%rsp)
    0000004e: 	movq	$0x0, -0x28(%rsp)
    00000057: 	movq	%r15, %rax
    0000005a: 	imulq	%rdx, %rax
    0000005e: 	movq	%rax, -0x18(%rsp)
.Ltmp1126:
    00000063: 	movq	-0x20(%rsp), %r12
    00000068: 	xorl	%r14d, %r14d
    0000006b: 	testq	%r13, %r13
    0000006e: 	je	.Ltmp1119 # Offset: 110
.Ltmp1125:
    00000070: 	testq	%r11, %r11
    00000073: 	je	.Ltmp1120 # Offset: 115
    00000075: 	leaq	(%rdi,%r12,8), %rcx
    00000079: 	movq	%r12, %rdx
    0000007c: 	xorl	%r8d, %r8d
    0000007f: 	nop # Size: 1
.Ltmp1124:
    00000080: 	testq	%rsi, %rsi
    00000083: 	je	.Ltmp1121 # Offset: 131
    00000085: 	cmpq	$0x1, %rsi
    00000089: 	je	.Ltmp1122 # Offset: 137
    0000008b: 	leaq	(%rbp,%rcx), %r9
    00000090: 	movq	%rcx, %rax
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1123:
    00000098: 	movsd	(%rax), %xmm1
    0000009c: 	addq	$0x10, %rax
    000000a0: 	addsd	%xmm1, %xmm0
    000000a4: 	movsd	-0x8(%rax), %xmm1
    000000a9: 	addsd	%xmm1, %xmm0
    000000ad: 	cmpq	%rax, %r9
    000000b0: 	jne	.Ltmp1123 # Offset: 176
    000000b2: 	movq	%r10, %rax
    000000b5: 	cmpq	%rsi, %r10
    000000b8: 	je	.Ltmp1121 # Offset: 184
.Ltmp1127:
    000000ba: 	addq	%rdx, %rax
    000000bd: 	addsd	(%rdi,%rax,8), %xmm0
.Ltmp1121:
    000000c2: 	addq	$0x1, %r8
    000000c6: 	addq	%rsi, %rdx
    000000c9: 	addq	%rbx, %rcx
    000000cc: 	cmpq	%r8, %r11
    000000cf: 	jne	.Ltmp1124 # Offset: 207
.Ltmp1120:
    000000d1: 	addq	$0x1, %r14
    000000d5: 	addq	%r15, %r12
    000000d8: 	cmpq	%r14, %r13
    000000db: 	jne	.Ltmp1125 # Offset: 219
.Ltmp1119:
    000000dd: 	addq	$0x1, -0x28(%rsp)
    000000e3: 	movq	-0x18(%rsp), %rdx
    000000e8: 	movq	-0x28(%rsp), %rax
    000000ed: 	addq	%rdx, -0x20(%rsp)
    000000f2: 	cmpq	%rax, -0x10(%rsp)
    000000f7: 	jne	.Ltmp1126 # Offset: 247
.Ltmp1118:
    000000fd: 	popq	%rbx
    000000fe: 	popq	%rbp
    000000ff: 	popq	%r12
    00000101: 	popq	%r13
    00000103: 	popq	%r14
    00000105: 	popq	%r15
    00000107: 	retq # Offset: 263
.Ltmp1122:
    00000108: 	xorl	%eax, %eax
    0000010a: 	jmp	.Ltmp1127 # Offset: 266
DWARF CFI Instructions:
    <empty>
End of Function "_Z19accumulate_array4D9IdET_PKS0_mmmmS0_"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
  Number      : 206
  State       : disassembled
  Address     : 0xc920
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0xc920
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0205:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	0x20(%rdi), %rcx
    00000019: 	movq	0x30(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	0x10(%rdi), %rbp
    00000025: 	movq	%rcx, 0x10(%rsp)
    0000002a: 	movq	0x28(%rdi), %rcx
    0000002e: 	movq	%rax, 0x8(%rsp)
    00000033: 	movq	0x48(%rdi), %rax
    00000037: 	leaq	0x8(%rcx), %r12
    0000003b: 	movq	%rcx, 0x18(%rsp)
    00000040: 	movq	%rax, (%rsp)
    00000044: 	cmpq	%r12, %rax
    00000047: 	jbe	.Ltmp1128 # Offset: 71
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp1131:
    00000050: 	movq	(%r12), %r15
    00000054: 	leaq	0x200(%r15), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1130:
    00000060: 	movq	(%r15), %rdi
    00000063: 	leaq	0x10(%r15), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp1129 # Offset: 106
    00000070: 	movq	0x10(%r15), %rax
    00000074: 	addq	$0x20, %r15
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%r15, %rbx
    00000084: 	jne	.Ltmp1130 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp1131 # Offset: 142
.Ltmp1128:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x18(%rsp)
    00000099: 	je	.Ltmp1132 # Offset: 153
    0000009f: 	cmpq	0x10(%rsp), %rbp
    000000a4: 	je	.Ltmp1133 # Offset: 164
.Ltmp1136:
    000000a6: 	movq	(%rbp), %rdi
    000000aa: 	leaq	0x10(%rbp), %rax
    000000ae: 	cmpq	%rax, %rdi
    000000b1: 	je	.Ltmp1134 # Offset: 177
.Ltmp1135:
    000000b3: 	movq	0x10(%rbp), %rax
    000000b7: 	addq	$0x20, %rbp
    000000bb: 	leaq	0x1(%rax), %rsi
    000000bf: 	callq	_ZdlPvm@PLT # Offset: 191
    000000c4: 	cmpq	%rbp, 0x10(%rsp)
    000000c9: 	je	.Ltmp1133 # Offset: 201
    000000cb: 	movq	(%rbp), %rdi
    000000cf: 	leaq	0x10(%rbp), %rax
    000000d3: 	cmpq	%rax, %rdi
    000000d6: 	jne	.Ltmp1135 # Offset: 214
.Ltmp1134:
    000000d8: 	addq	$0x20, %rbp
    000000dc: 	cmpq	%rbp, 0x10(%rsp)
    000000e1: 	jne	.Ltmp1136 # Offset: 225
    000000e3: 	cmpq	%r13, 0x8(%rsp)
    000000e8: 	je	.Ltmp1137 # Offset: 232
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1139:
    000000f0: 	movq	(%r13), %rdi
    000000f4: 	leaq	0x10(%r13), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp1138 # Offset: 251
    000000fd: 	movq	0x10(%r13), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp1138:
    0000010a: 	addq	$0x20, %r13
.Ltmp1133:
    0000010e: 	cmpq	%r13, 0x8(%rsp)
    00000113: 	jne	.Ltmp1139 # Offset: 275
.Ltmp1137:
    00000115: 	movq	(%r14), %rdi
    00000118: 	testq	%rdi, %rdi
    0000011b: 	je	.Ltmp1140 # Offset: 283
.Ltmp1146:
    00000121: 	movq	0x48(%r14), %rax
    00000125: 	movq	0x28(%r14), %rbx
    00000129: 	leaq	0x8(%rax), %rbp
    0000012d: 	cmpq	%rbx, %rbp
    00000130: 	jbe	.Ltmp1141 # Offset: 304
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1142:
    00000138: 	movq	(%rbx), %rdi
    0000013b: 	movl	$0x200, %esi
    00000140: 	addq	$0x8, %rbx
    00000144: 	callq	_ZdlPvm@PLT # Offset: 324
    00000149: 	cmpq	%rbx, %rbp
    0000014c: 	ja	.Ltmp1142 # Offset: 332
    0000014e: 	movq	(%r14), %rdi
.Ltmp1141:
    00000151: 	movq	0x8(%r14), %rsi
    00000155: 	addq	$0x28, %rsp
    00000159: 	popq	%rbx
    0000015a: 	popq	%rbp
    0000015b: 	shlq	$0x3, %rsi
    0000015f: 	popq	%r12
    00000161: 	popq	%r13
    00000163: 	popq	%r14
    00000165: 	popq	%r15
    00000167: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp1129:
    00000170: 	addq	$0x20, %r15
    00000174: 	cmpq	%r15, %rbx
    00000177: 	jne	.Ltmp1130 # Offset: 375
    0000017d: 	addq	$0x8, %r12
    00000181: 	cmpq	%r12, (%rsp)
    00000185: 	ja	.Ltmp1131 # Offset: 389
    0000018b: 	jmp	.Ltmp1128 # Offset: 395
.Ltmp1132:
    00000190: 	cmpq	0x8(%rsp), %rbp
    00000195: 	je	.Ltmp1137 # Offset: 405
.Ltmp1145:
    0000019b: 	movq	(%rbp), %rdi
    0000019f: 	leaq	0x10(%rbp), %rax
    000001a3: 	cmpq	%rax, %rdi
    000001a6: 	je	.Ltmp1143 # Offset: 422
.Ltmp1144:
    000001a8: 	movq	0x10(%rbp), %rax
    000001ac: 	addq	$0x20, %rbp
    000001b0: 	leaq	0x1(%rax), %rsi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	cmpq	%rbp, 0x8(%rsp)
    000001be: 	je	.Ltmp1137 # Offset: 446
    000001c4: 	movq	(%rbp), %rdi
    000001c8: 	leaq	0x10(%rbp), %rax
    000001cc: 	cmpq	%rax, %rdi
    000001cf: 	jne	.Ltmp1144 # Offset: 463
.Ltmp1143:
    000001d1: 	addq	$0x20, %rbp
    000001d5: 	cmpq	%rbp, 0x8(%rsp)
    000001da: 	jne	.Ltmp1145 # Offset: 474
    000001dc: 	movq	(%r14), %rdi
    000001df: 	testq	%rdi, %rdi
    000001e2: 	jne	.Ltmp1146 # Offset: 482
.Ltmp1140:
    000001e8: 	addq	$0x28, %rsp
    000001ec: 	popq	%rbx
    000001ed: 	popq	%rbp
    000001ee: 	popq	%r12
    000001f0: 	popq	%r13
    000001f2: 	popq	%r14
    000001f4: 	popq	%r15
    000001f6: 	retq # Offset: 502
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)"

Binary Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_" after disassembly {
  Number      : 207
  State       : disassembled
  Address     : 0xcb20
  Size        : 0x145
  MaxSize     : 0x150
  Offset      : 0xcb20
  Section     : .text
  Orc Section : .local.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0206:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	movq	%rdi, %r12
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdx, %rbp
    00000011: 	pushq	%rbx
    00000012: 	leaq	0x10(%rdi), %rbx
    00000016: 	subq	$0x10, %rsp
    0000001a: 	movq	0x8(%rsi), %r13
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	movq	%rbx, (%rdi)
    00000031: 	movq	(%rsi), %r14
    00000034: 	movq	%r14, %rax
    00000037: 	addq	%r13, %rax
    0000003a: 	je	.Ltmp1147 # Offset: 58
    0000003c: 	testq	%r14, %r14
    0000003f: 	je	.Ltmp1148 # Offset: 63
.Ltmp1147:
    00000045: 	movq	%r13, (%rsp)
    00000049: 	cmpq	$0xf, %r13
    0000004d: 	ja	.Ltmp1149 # Offset: 77
    0000004f: 	cmpq	$0x1, %r13
    00000053: 	jne	.Ltmp1150 # Offset: 83
    00000055: 	movzbl	(%r14), %eax
    00000059: 	movb	%al, 0x10(%r12)
    0000005e: 	movq	%rbx, %rax
.Ltmp1154:
    00000061: 	movq	%r13, 0x8(%r12)
    00000066: 	movq	%rbp, %rdi
    00000069: 	movb	$0x0, (%rax,%r13)
    0000006e: 	callq	strlen@PLT # Offset: 110
    00000073: 	movq	%rax, %rdx
    00000076: 	movabsq	$0x3fffffffffffffff, %rax
    00000080: 	subq	0x8(%r12), %rax
    00000085: 	cmpq	%rax, %rdx
    00000088: 	ja	.Ltmp1151 # Offset: 136
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movq	%r12, %rdi
    00000090: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 144
    00000095: 	movq	0x8(%rsp), %rax
    0000009a: 	subq	%fs:0x28, %rax
    000000a3: 	jne	.Ltmp1152 # Offset: 163
    000000a5: 	addq	$0x10, %rsp
    000000a9: 	movq	%r12, %rax
    000000ac: 	popq	%rbx
    000000ad: 	popq	%rbp
    000000ae: 	popq	%r12
    000000b0: 	popq	%r13
    000000b2: 	popq	%r14
    000000b4: 	retq # Offset: 180
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp1150:
    000000b8: 	testq	%r13, %r13
    000000bb: 	jne	.Ltmp1153 # Offset: 187
    000000bd: 	movq	%rbx, %rax
    000000c0: 	jmp	.Ltmp1154 # Offset: 192
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1149:
    000000c8: 	movq	%r12, %rdi
    000000cb: 	movq	%rsp, %rsi
    000000ce: 	xorl	%edx, %edx
    000000d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 208
    000000d5: 	movq	%rax, (%r12)
    000000d9: 	movq	%rax, %rdi
    000000dc: 	movq	(%rsp), %rax
    000000e0: 	movq	%rax, 0x10(%r12)
.Ltmp1155:
    000000e5: 	movq	%r13, %rdx
    000000e8: 	movq	%r14, %rsi
    000000eb: 	callq	memcpy@PLT # Offset: 235
    000000f0: 	movq	(%rsp), %r13
    000000f4: 	movq	(%r12), %rax
    000000f8: 	jmp	.Ltmp1154 # Offset: 248
.Ltmp1148:
    000000fd: 	leaq	DATAat0x24158(%rip), %rdi
    00000104: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 260
.Ltmp1151:
    00000109: 	leaq	DATAat0x24182(%rip), %rdi
    00000110: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 272
.Ltmp1152:
    00000115: 	callq	__stack_chk_fail@PLT # Offset: 277
.Ltmp1153:
    0000011a: 	movq	%rbx, %rdi
    0000011d: 	jmp	.Ltmp1155 # Offset: 285
    0000011f: 	endbr64
    00000123: 	movq	%rax, %rbp
    00000126: 	movq	(%r12), %rdi
    0000012a: 	cmpq	%rdi, %rbx
    0000012d: 	je	.Ltmp1156 # Offset: 301
    0000012f: 	movq	0x10(%r12), %rsi
    00000134: 	addq	$0x1, %rsi
    00000138: 	callq	_ZdlPvm@PLT # Offset: 312
.Ltmp1156:
    0000013d: 	movq	%rbp, %rdi
    00000140: 	callq	_Unwind_Resume@PLT # Offset: 320
DWARF CFI Instructions:
    <empty>
End of Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"

Binary Function "_ZNSt6vectorItSaItEE17_M_default_appendEm" after disassembly {
  Number      : 208
  State       : disassembled
  Address     : 0xcc70
  Size        : 0x1d6
  MaxSize     : 0x1e0
  Offset      : 0xcc70
  Section     : .text
  Orc Section : .local.text._ZNSt6vectorItSaItEE17_M_default_appendEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0207:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp1157 # Offset: 7
    0000000d: 	movabsq	$0x3fffffffffffffff, %rax
    00000017: 	pushq	%r15
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rdi, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	movq	%rsi, %rbx
    00000027: 	subq	$0x18, %rsp
    0000002b: 	movq	0x8(%rdi), %rdx
    0000002f: 	movq	(%rdi), %r8
    00000032: 	movq	%rdx, %rbp
    00000035: 	subq	%r8, %rbp
    00000038: 	movq	%rbp, %r13
    0000003b: 	sarq	%r13
    0000003e: 	subq	%r13, %rax
    00000041: 	movq	%rax, %rcx
    00000044: 	movq	0x10(%rdi), %rax
    00000048: 	subq	%rdx, %rax
    0000004b: 	sarq	%rax
    0000004e: 	cmpq	%rax, %rsi
    00000051: 	jbe	.Ltmp1158 # Offset: 81
    00000057: 	cmpq	%rsi, %rcx
    0000005a: 	jb	.Ltmp1159 # Offset: 90
    00000060: 	cmpq	%r13, %rsi
    00000063: 	movq	%r13, %rax
    00000066: 	cmovaeq	%rsi, %rax
    0000006a: 	addq	%r13, %rax
    0000006d: 	jb	.Ltmp1160 # Offset: 109
    00000073: 	testq	%rax, %rax
    00000076: 	jne	.Ltmp1161 # Offset: 118
    0000007c: 	movq	%rbp, %r9
    0000007f: 	xorl	%r14d, %r14d
    00000082: 	xorl	%r15d, %r15d
.Ltmp1168:
    00000085: 	addq	%r15, %rbp
    00000088: 	xorl	%eax, %eax
    0000008a: 	movq	%rbx, %rdx
    0000008d: 	movw	%ax, (%rbp)
    00000091: 	subq	$0x1, %rdx
    00000095: 	je	.Ltmp1162 # Offset: 149
    00000097: 	leaq	0x2(%rbp), %rdi
    0000009b: 	addq	%rdx, %rdx
    0000009e: 	xorl	%esi, %esi
    000000a0: 	movq	%r9, 0x8(%rsp)
    000000a5: 	movq	%r8, (%rsp)
    000000a9: 	callq	memset@PLT # Offset: 169
    000000ae: 	movq	(%rsp), %r8
    000000b2: 	movq	0x8(%rsp), %r9
.Ltmp1162:
    000000b7: 	testq	%r9, %r9
    000000ba: 	jg	.Ltmp1163 # Offset: 186
    000000c0: 	testq	%r8, %r8
    000000c3: 	jne	.Ltmp1164 # Offset: 195
.Ltmp1166:
    000000c9: 	addq	%r13, %rbx
    000000cc: 	movq	%r15, %xmm0
    000000d1: 	movq	%r14, 0x10(%r12)
    000000d6: 	leaq	(%r15,%rbx,2), %rax
    000000da: 	movq	%rax, %xmm1
    000000df: 	punpcklqdq	%xmm1, %xmm0
    000000e3: 	movups	%xmm0, (%r12)
    000000e8: 	addq	$0x18, %rsp
    000000ec: 	popq	%rbx
    000000ed: 	popq	%rbp
    000000ee: 	popq	%r12
    000000f0: 	popq	%r13
    000000f2: 	popq	%r14
    000000f4: 	popq	%r15
    000000f6: 	retq # Offset: 246
    000000f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1158:
    00000100: 	xorl	%ecx, %ecx
    00000102: 	movw	%cx, (%rdx)
    00000105: 	leaq	0x2(%rdx), %rcx
    00000109: 	subq	$0x1, %rbx
    0000010d: 	je	.Ltmp1165 # Offset: 269
    0000010f: 	leaq	(%rcx,%rbx,2), %rax
    00000113: 	movq	%rcx, %rdi
    00000116: 	xorl	%esi, %esi
    00000118: 	subq	%rdx, %rax
    0000011b: 	leaq	-0x2(%rax), %rbx
    0000011f: 	movq	%rbx, %rdx
    00000122: 	callq	memset@PLT # Offset: 290
    00000127: 	movq	%rax, %rcx
    0000012a: 	addq	%rbx, %rcx
.Ltmp1165:
    0000012d: 	movq	%rcx, 0x8(%r12)
    00000132: 	addq	$0x18, %rsp
    00000136: 	popq	%rbx
    00000137: 	popq	%rbp
    00000138: 	popq	%r12
    0000013a: 	popq	%r13
    0000013c: 	popq	%r14
    0000013e: 	popq	%r15
    00000140: 	retq # Offset: 320
    00000141: 	nopl	(%rax) # Size: 7
.Ltmp1157:
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp1163:
    00000150: 	movq	%r8, %rsi
    00000153: 	movq	%r9, %rdx
    00000156: 	movq	%r15, %rdi
    00000159: 	movq	%r8, (%rsp)
    0000015d: 	callq	memmove@PLT # Offset: 349
    00000162: 	movq	0x10(%r12), %rsi
    00000167: 	movq	(%rsp), %r8
    0000016b: 	subq	%r8, %rsi
.Ltmp1167:
    0000016e: 	movq	%r8, %rdi
    00000171: 	callq	_ZdlPvm@PLT # Offset: 369
    00000176: 	jmp	.Ltmp1166 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1164:
    00000180: 	movq	0x10(%r12), %rsi
    00000185: 	subq	%r8, %rsi
    00000188: 	jmp	.Ltmp1167 # Offset: 392
.Ltmp1161:
    0000018a: 	movabsq	$0x3fffffffffffffff, %rdx
    00000194: 	cmpq	%rdx, %rax
    00000197: 	cmovaq	%rdx, %rax
    0000019b: 	leaq	(%rax,%rax), %r14
.Ltmp1169:
    0000019f: 	movq	%r14, %rdi
    000001a2: 	callq	_Znwm@PLT # Offset: 418
    000001a7: 	movq	(%r12), %r8
    000001ab: 	movq	0x8(%r12), %r9
    000001b0: 	movq	%rax, %r15
    000001b3: 	addq	%rax, %r14
    000001b6: 	subq	%r8, %r9
    000001b9: 	jmp	.Ltmp1168 # Offset: 441
.Ltmp1160:
    000001be: 	movabsq	$0x7ffffffffffffffe, %r14
    000001c8: 	jmp	.Ltmp1169 # Offset: 456
.Ltmp1159:
    000001ca: 	leaq	DATAat0x24197(%rip), %rdi
    000001d1: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 465
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt6vectorItSaItEE17_M_default_appendEm"

Binary Function "_ZN9benchmark9quicksortIPtEEvT_S2_" after disassembly {
  Number      : 209
  State       : disassembled
  Address     : 0xce50
  Size        : 0x46e
  MaxSize     : 0x470
  Offset      : 0xce50
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIPtEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0208:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rax
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rax
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rsi, (%rsp)
    0000001c: 	cmpq	$0x2, %rax
    00000020: 	jle	.Ltmp1170 # Offset: 32
.Ltmp1182:
    00000022: 	movzwl	(%rdi), %r8d
    00000026: 	movq	(%rsp), %r13
    0000002a: 	movq	%rdi, %rdx
.Ltmp1175:
    0000002d: 	movzwl	-0x2(%r13), %eax
    00000032: 	leaq	-0x2(%r13), %rcx
    00000036: 	cmpw	%r8w, %ax
    0000003a: 	ja	.Ltmp1171 # Offset: 58
    0000003c: 	cmpq	%rcx, %rdx
    0000003f: 	jae	.Ltmp1172 # Offset: 63
    00000041: 	movzwl	(%rdx), %esi
    00000044: 	cmpw	%si, %r8w
    00000048: 	jbe	.Ltmp1173 # Offset: 72
.Ltmp1174:
    0000004a: 	movzwl	0x2(%rdx), %esi
    0000004e: 	addq	$0x2, %rdx
    00000052: 	cmpw	%r8w, %si
    00000056: 	jb	.Ltmp1174 # Offset: 86
    00000058: 	cmpq	%rdx, %rcx
    0000005b: 	jbe	.Ltmp1172 # Offset: 91
.Ltmp1173:
    0000005d: 	movw	%si, (%rcx)
    00000060: 	movw	%ax, (%rdx)
.Ltmp1171:
    00000063: 	movq	%rcx, %r13
    00000066: 	jmp	.Ltmp1175 # Offset: 102
.Ltmp1170:
    00000068: 	addq	$0x28, %rsp
    0000006c: 	popq	%rbx
    0000006d: 	popq	%rbp
    0000006e: 	popq	%r12
    00000070: 	popq	%r13
    00000072: 	popq	%r14
    00000074: 	popq	%r15
    00000076: 	retq # Offset: 118
.Ltmp1172:
    00000077: 	movq	%r13, %rdx
    0000007a: 	movq	%r13, %r8
    0000007d: 	subq	%rdi, %rdx
    00000080: 	cmpq	$0x2, %rdx
    00000084: 	jle	.Ltmp1176 # Offset: 132
.Ltmp1234:
    00000086: 	movzwl	(%rdi), %r9d
    0000008a: 	movq	%r8, %r14
    0000008d: 	movq	%rdi, %rdx
.Ltmp1181:
    00000090: 	leaq	-0x2(%r14), %rcx
    00000094: 	cmpw	%ax, %r9w
    00000098: 	jb	.Ltmp1177 # Offset: 152
    0000009a: 	cmpq	%rdx, %rcx
    0000009d: 	jbe	.Ltmp1178 # Offset: 157
    0000009f: 	movzwl	(%rdx), %esi
    000000a2: 	cmpw	%si, %r9w
    000000a6: 	jbe	.Ltmp1179 # Offset: 166
.Ltmp1180:
    000000a8: 	movzwl	0x2(%rdx), %esi
    000000ac: 	addq	$0x2, %rdx
    000000b0: 	cmpw	%si, %r9w
    000000b4: 	ja	.Ltmp1180 # Offset: 180
    000000b6: 	cmpq	%rdx, %rcx
    000000b9: 	jbe	.Ltmp1178 # Offset: 185
.Ltmp1179:
    000000bb: 	movw	%si, (%rcx)
    000000be: 	movw	%ax, (%rdx)
.Ltmp1177:
    000000c1: 	movzwl	-0x2(%rcx), %eax
    000000c5: 	movq	%rcx, %r14
    000000c8: 	jmp	.Ltmp1181 # Offset: 200
.Ltmp1233:
    000000ca: 	movq	%r8, %r13
.Ltmp1176:
    000000cd: 	movq	(%rsp), %rax
    000000d1: 	subq	%r13, %rax
    000000d4: 	cmpq	$0x2, %rax
    000000d8: 	jle	.Ltmp1170 # Offset: 216
    000000da: 	movq	%r13, %rdi
    000000dd: 	jmp	.Ltmp1182 # Offset: 221
.Ltmp1178:
    000000e2: 	movq	%r14, %rdx
    000000e5: 	subq	%rdi, %rdx
    000000e8: 	cmpq	$0x2, %rdx
    000000ec: 	jle	.Ltmp1183 # Offset: 236
    000000f2: 	movq	%r8, 0x8(%rsp)
    000000f7: 	movq	%r14, %rbx
.Ltmp1236:
    000000fa: 	movzwl	(%rdi), %r9d
    000000fe: 	movq	%rbx, %r15
    00000101: 	movq	%rdi, %rdx
.Ltmp1188:
    00000104: 	leaq	-0x2(%r15), %rcx
    00000108: 	cmpw	%r9w, %ax
    0000010c: 	ja	.Ltmp1184 # Offset: 268
    0000010e: 	cmpq	%rdx, %rcx
    00000111: 	jbe	.Ltmp1185 # Offset: 273
    00000113: 	movzwl	(%rdx), %esi
    00000116: 	cmpw	%si, %r9w
    0000011a: 	jbe	.Ltmp1186 # Offset: 282
.Ltmp1187:
    0000011c: 	movzwl	0x2(%rdx), %esi
    00000120: 	addq	$0x2, %rdx
    00000124: 	cmpw	%si, %r9w
    00000128: 	ja	.Ltmp1187 # Offset: 296
    0000012a: 	cmpq	%rdx, %rcx
    0000012d: 	jbe	.Ltmp1185 # Offset: 301
.Ltmp1186:
    0000012f: 	movw	%si, (%rcx)
    00000132: 	movw	%ax, (%rdx)
.Ltmp1184:
    00000135: 	movzwl	-0x2(%rcx), %eax
    00000139: 	movq	%rcx, %r15
    0000013c: 	jmp	.Ltmp1188 # Offset: 316
.Ltmp1185:
    0000013e: 	movq	%r15, %rdx
    00000141: 	subq	%rdi, %rdx
    00000144: 	cmpq	$0x2, %rdx
    00000148: 	jle	.Ltmp1189 # Offset: 328
    0000014e: 	movq	%rbx, 0x10(%rsp)
    00000153: 	movq	%r15, %rbx
.Ltmp1232:
    00000156: 	movzwl	(%rdi), %r9d
    0000015a: 	movq	%rbx, %r14
    0000015d: 	movq	%rdi, %rdx
.Ltmp1194:
    00000160: 	leaq	-0x2(%r14), %rcx
    00000164: 	cmpw	%ax, %r9w
    00000168: 	jb	.Ltmp1190 # Offset: 360
    0000016a: 	cmpq	%rdx, %rcx
    0000016d: 	jbe	.Ltmp1191 # Offset: 365
    0000016f: 	movzwl	(%rdx), %esi
    00000172: 	cmpw	%si, %r9w
    00000176: 	jbe	.Ltmp1192 # Offset: 374
.Ltmp1193:
    00000178: 	movzwl	0x2(%rdx), %esi
    0000017c: 	addq	$0x2, %rdx
    00000180: 	cmpw	%si, %r9w
    00000184: 	ja	.Ltmp1193 # Offset: 388
    00000186: 	cmpq	%rdx, %rcx
    00000189: 	jbe	.Ltmp1191 # Offset: 393
.Ltmp1192:
    0000018b: 	movw	%si, (%rcx)
    0000018e: 	movw	%ax, (%rdx)
.Ltmp1190:
    00000191: 	movzwl	-0x2(%rcx), %eax
    00000195: 	movq	%rcx, %r14
    00000198: 	jmp	.Ltmp1194 # Offset: 408
.Ltmp1191:
    0000019a: 	movq	%r14, %rdx
    0000019d: 	subq	%rdi, %rdx
    000001a0: 	cmpq	$0x2, %rdx
    000001a4: 	jle	.Ltmp1195 # Offset: 420
    000001aa: 	movq	%rbx, 0x18(%rsp)
    000001af: 	movq	%r14, %rbx
.Ltmp1230:
    000001b2: 	movzwl	(%rdi), %r9d
    000001b6: 	movq	%rbx, %r14
    000001b9: 	movq	%rdi, %rdx
.Ltmp1200:
    000001bc: 	leaq	-0x2(%r14), %rcx
    000001c0: 	cmpw	%ax, %r9w
    000001c4: 	jb	.Ltmp1196 # Offset: 452
    000001c6: 	cmpq	%rdx, %rcx
    000001c9: 	jbe	.Ltmp1197 # Offset: 457
    000001cb: 	movzwl	(%rdx), %esi
    000001ce: 	cmpw	%si, %r9w
    000001d2: 	jbe	.Ltmp1198 # Offset: 466
.Ltmp1199:
    000001d4: 	movzwl	0x2(%rdx), %esi
    000001d8: 	addq	$0x2, %rdx
    000001dc: 	cmpw	%si, %r9w
    000001e0: 	ja	.Ltmp1199 # Offset: 480
    000001e2: 	cmpq	%rdx, %rcx
    000001e5: 	jbe	.Ltmp1197 # Offset: 485
.Ltmp1198:
    000001e7: 	movw	%si, (%rcx)
    000001ea: 	movw	%ax, (%rdx)
.Ltmp1196:
    000001ed: 	movzwl	-0x2(%rcx), %eax
    000001f1: 	movq	%rcx, %r14
    000001f4: 	jmp	.Ltmp1200 # Offset: 500
.Ltmp1197:
    000001f6: 	movq	%r14, %rdx
    000001f9: 	subq	%rdi, %rdx
    000001fc: 	cmpq	$0x2, %rdx
    00000200: 	jle	.Ltmp1201 # Offset: 512
.Ltmp1228:
    00000206: 	movzwl	(%rdi), %r8d
    0000020a: 	movq	%r14, %r15
    0000020d: 	movq	%rdi, %rdx
.Ltmp1206:
    00000210: 	leaq	-0x2(%r15), %rcx
    00000214: 	cmpw	%ax, %r8w
    00000218: 	jb	.Ltmp1202 # Offset: 536
    0000021a: 	cmpq	%rdx, %rcx
    0000021d: 	jbe	.Ltmp1203 # Offset: 541
    0000021f: 	movzwl	(%rdx), %esi
    00000222: 	cmpw	%si, %r8w
    00000226: 	jbe	.Ltmp1204 # Offset: 550
    00000228: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1205:
    00000230: 	movzwl	0x2(%rdx), %esi
    00000234: 	addq	$0x2, %rdx
    00000238: 	cmpw	%si, %r8w
    0000023c: 	ja	.Ltmp1205 # Offset: 572
    0000023e: 	cmpq	%rdx, %rcx
    00000241: 	jbe	.Ltmp1203 # Offset: 577
.Ltmp1204:
    00000243: 	movw	%si, (%rcx)
    00000246: 	movw	%ax, (%rdx)
.Ltmp1202:
    00000249: 	movzwl	-0x2(%rcx), %eax
    0000024d: 	movq	%rcx, %r15
    00000250: 	jmp	.Ltmp1206 # Offset: 592
.Ltmp1203:
    00000252: 	movq	%r15, %rdx
    00000255: 	subq	%rdi, %rdx
    00000258: 	cmpq	$0x2, %rdx
    0000025c: 	jle	.Ltmp1207 # Offset: 604
.Ltmp1227:
    00000262: 	movzwl	(%rdi), %r8d
    00000266: 	movq	%r15, %r12
    00000269: 	movq	%rdi, %rdx
    0000026c: 	nopl	(%rax) # Size: 4
.Ltmp1225:
    00000270: 	leaq	-0x2(%r12), %rsi
    00000275: 	cmpw	%ax, %r8w
    00000279: 	jb	.Ltmp1208 # Offset: 633
    0000027f: 	cmpq	%rdx, %rsi
    00000282: 	jbe	.Ltmp1209 # Offset: 642
    00000284: 	movzwl	(%rdx), %ecx
    00000287: 	cmpw	%cx, %r8w
    0000028b: 	jbe	.Ltmp1210 # Offset: 651
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp1211:
    00000298: 	movzwl	0x2(%rdx), %ecx
    0000029c: 	addq	$0x2, %rdx
    000002a0: 	cmpw	%cx, %r8w
    000002a4: 	ja	.Ltmp1211 # Offset: 676
    000002a6: 	cmpq	%rdx, %rsi
    000002a9: 	ja	.Ltmp1210 # Offset: 681
.Ltmp1209:
    000002af: 	movq	%r12, %rdx
    000002b2: 	subq	%rdi, %rdx
    000002b5: 	cmpq	$0x2, %rdx
    000002b9: 	jle	.Ltmp1212 # Offset: 697
.Ltmp1224:
    000002bf: 	movzwl	(%rdi), %esi
    000002c2: 	movq	%r12, %rbp
    000002c5: 	movq	%rdi, %rdx
    000002c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1223:
    000002d0: 	leaq	-0x2(%rbp), %rcx
    000002d4: 	cmpw	%si, %ax
    000002d7: 	ja	.Ltmp1213 # Offset: 727
    000002dd: 	cmpq	%rdx, %rcx
    000002e0: 	jbe	.Ltmp1214 # Offset: 736
    000002e2: 	movzwl	(%rdx), %r8d
    000002e6: 	cmpw	%r8w, %si
    000002ea: 	jbe	.Ltmp1215 # Offset: 746
    000002ec: 	nopl	(%rax) # Size: 4
.Ltmp1216:
    000002f0: 	movzwl	0x2(%rdx), %r8d
    000002f5: 	addq	$0x2, %rdx
    000002f9: 	cmpw	%r8w, %si
    000002fd: 	ja	.Ltmp1216 # Offset: 765
    000002ff: 	cmpq	%rdx, %rcx
    00000302: 	ja	.Ltmp1215 # Offset: 770
.Ltmp1214:
    00000304: 	movq	%rbp, %rax
    00000307: 	subq	%rdi, %rax
    0000030a: 	cmpq	$0x2, %rax
    0000030e: 	jle	.Ltmp1217 # Offset: 782
.Ltmp1222:
    00000310: 	movzwl	(%rdi), %ecx
    00000313: 	movq	%rbp, %r13
    00000316: 	movq	%rdi, %rax
    00000319: 	nopl	(%rax) # Size: 7
.Ltmp1226:
    00000320: 	movzwl	-0x2(%r13), %r8d
    00000325: 	leaq	-0x2(%r13), %rsi
    00000329: 	cmpw	%r8w, %cx
    0000032d: 	jb	.Ltmp1218 # Offset: 813
    00000333: 	cmpq	%rax, %rsi
    00000336: 	jbe	.Ltmp1219 # Offset: 822
    00000338: 	movzwl	(%rax), %edx
    0000033b: 	cmpw	%dx, %cx
    0000033e: 	jbe	.Ltmp1220 # Offset: 830
.Ltmp1221:
    00000340: 	movzwl	0x2(%rax), %edx
    00000344: 	addq	$0x2, %rax
    00000348: 	cmpw	%dx, %cx
    0000034b: 	ja	.Ltmp1221 # Offset: 843
    0000034d: 	cmpq	%rax, %rsi
    00000350: 	ja	.Ltmp1220 # Offset: 848
.Ltmp1219:
    00000352: 	movq	%r13, %rsi
    00000355: 	callq	_ZN9benchmark9quicksortIPtEEvT_S2_ # Offset: 853
    0000035a: 	movq	%rbp, %rax
    0000035d: 	subq	%r13, %rax
    00000360: 	cmpq	$0x2, %rax
    00000364: 	jle	.Ltmp1217 # Offset: 868
    00000366: 	movq	%r13, %rdi
    00000369: 	jmp	.Ltmp1222 # Offset: 873
.Ltmp1215:
    0000036b: 	movw	%r8w, (%rcx)
    0000036f: 	movw	%ax, (%rdx)
.Ltmp1213:
    00000372: 	movzwl	-0x2(%rcx), %eax
    00000376: 	movq	%rcx, %rbp
    00000379: 	jmp	.Ltmp1223 # Offset: 889
.Ltmp1217:
    0000037e: 	movq	%r12, %rax
    00000381: 	subq	%rbp, %rax
    00000384: 	cmpq	$0x2, %rax
    00000388: 	jle	.Ltmp1212 # Offset: 904
    0000038a: 	movzwl	-0x2(%r12), %eax
    00000390: 	movq	%rbp, %rdi
    00000393: 	jmp	.Ltmp1224 # Offset: 915
.Ltmp1210:
    00000398: 	movw	%cx, (%rsi)
    0000039b: 	movw	%ax, (%rdx)
.Ltmp1208:
    0000039e: 	movzwl	-0x2(%rsi), %eax
    000003a2: 	movq	%rsi, %r12
    000003a5: 	jmp	.Ltmp1225 # Offset: 933
    000003aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1220:
    000003b0: 	movw	%dx, (%rsi)
    000003b3: 	movw	%r8w, (%rax)
.Ltmp1218:
    000003b7: 	movq	%rsi, %r13
    000003ba: 	jmp	.Ltmp1226 # Offset: 954
.Ltmp1212:
    000003bf: 	movq	%r15, %rax
    000003c2: 	subq	%r12, %rax
    000003c5: 	cmpq	$0x2, %rax
    000003c9: 	jle	.Ltmp1207 # Offset: 969
    000003cb: 	movzwl	-0x2(%r15), %eax
    000003d0: 	movq	%r12, %rdi
    000003d3: 	jmp	.Ltmp1227 # Offset: 979
.Ltmp1207:
    000003d8: 	movq	%r14, %rax
    000003db: 	subq	%r15, %rax
    000003de: 	cmpq	$0x2, %rax
    000003e2: 	jle	.Ltmp1201 # Offset: 994
    000003e4: 	movzwl	-0x2(%r14), %eax
    000003e9: 	movq	%r15, %rdi
    000003ec: 	jmp	.Ltmp1228 # Offset: 1004
.Ltmp1201:
    000003f1: 	movq	%rbx, %rax
    000003f4: 	subq	%r14, %rax
    000003f7: 	cmpq	$0x2, %rax
    000003fb: 	jle	.Ltmp1229 # Offset: 1019
    000003fd: 	movzwl	-0x2(%rbx), %eax
    00000401: 	movq	%r14, %rdi
    00000404: 	jmp	.Ltmp1230 # Offset: 1028
.Ltmp1229:
    00000409: 	movq	%rbx, %r14
    0000040c: 	movq	0x18(%rsp), %rbx
.Ltmp1195:
    00000411: 	movq	%rbx, %rax
    00000414: 	subq	%r14, %rax
    00000417: 	cmpq	$0x2, %rax
    0000041b: 	jle	.Ltmp1231 # Offset: 1051
    0000041d: 	movzwl	-0x2(%rbx), %eax
    00000421: 	movq	%r14, %rdi
    00000424: 	jmp	.Ltmp1232 # Offset: 1060
.Ltmp1235:
    00000429: 	movq	0x8(%rsp), %r8
    0000042e: 	movq	%rbx, %r14
.Ltmp1183:
    00000431: 	movq	%r8, %rax
    00000434: 	subq	%r14, %rax
    00000437: 	cmpq	$0x2, %rax
    0000043b: 	jle	.Ltmp1233 # Offset: 1083
    00000441: 	movzwl	-0x2(%r8), %eax
    00000446: 	movq	%r14, %rdi
    00000449: 	jmp	.Ltmp1234 # Offset: 1097
.Ltmp1231:
    0000044e: 	movq	%rbx, %r15
    00000451: 	movq	0x10(%rsp), %rbx
.Ltmp1189:
    00000456: 	movq	%rbx, %rax
    00000459: 	subq	%r15, %rax
    0000045c: 	cmpq	$0x2, %rax
    00000460: 	jle	.Ltmp1235 # Offset: 1120
    00000462: 	movzwl	-0x2(%rbx), %eax
    00000466: 	movq	%r15, %rdi
    00000469: 	jmp	.Ltmp1236 # Offset: 1129
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIPtEEvT_S2_"

Binary Function "_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEEvT_S8_" after disassembly {
  Number      : 210
  State       : disassembled
  Address     : 0xd2c0
  Size        : 0x6af
  MaxSize     : 0x6b0
  Offset      : 0xd2c0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEEvT_S8_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0209:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x2, %rax
    0000000e: 	jle	.Ltmp1237 # Offset: 14
    00000014: 	pushq	%r14
    00000016: 	movq	%rdi, %r9
    00000019: 	movq	%rdi, %rdx
    0000001c: 	pushq	%r13
    0000001e: 	pushq	%r12
    00000020: 	movq	%rsi, %r12
    00000023: 	pushq	%rbp
    00000024: 	movq	%r12, %rbp
    00000027: 	pushq	%rbx
    00000028: 	movzwl	(%rdi), %esi
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1242:
    00000030: 	movzwl	-0x2(%rbp), %edi
    00000034: 	leaq	-0x2(%rbp), %r8
    00000038: 	cmpw	%si, %di
    0000003b: 	ja	.Ltmp1238 # Offset: 59
    0000003d: 	cmpq	%rdx, %r8
    00000040: 	jbe	.Ltmp1239 # Offset: 64
    00000042: 	movzwl	(%rdx), %ecx
    00000045: 	cmpw	%cx, %si
    00000048: 	jbe	.Ltmp1240 # Offset: 72
    0000004a: 	leaq	0x2(%rdx), %rax
    0000004e: 	nop # Size: 2
.Ltmp1241:
    00000050: 	movq	%rax, %rdx
    00000053: 	movzwl	(%rax), %ecx
    00000056: 	leaq	0x2(%rax), %rax
    0000005a: 	cmpw	%si, %cx
    0000005d: 	jb	.Ltmp1241 # Offset: 93
    0000005f: 	cmpq	%rdx, %r8
    00000062: 	jbe	.Ltmp1239 # Offset: 98
.Ltmp1240:
    00000064: 	movw	%cx, (%r8)
    00000068: 	movw	%di, (%rdx)
.Ltmp1238:
    0000006b: 	movq	%r8, %rbp
    0000006e: 	jmp	.Ltmp1242 # Offset: 110
.Ltmp1239:
    00000070: 	movq	%rbp, %rax
    00000073: 	subq	%r9, %rax
    00000076: 	cmpq	$0x2, %rax
    0000007a: 	jle	.Ltmp1243 # Offset: 122
    0000007c: 	movzwl	(%r9), %esi
    00000080: 	movq	%rbp, %r13
    00000083: 	movq	%r9, %rdx
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1248:
    00000090: 	leaq	-0x2(%r13), %r8
    00000094: 	cmpw	%di, %si
    00000097: 	jb	.Ltmp1244 # Offset: 151
    00000099: 	cmpq	%rdx, %r8
    0000009c: 	jbe	.Ltmp1245 # Offset: 156
    0000009e: 	movzwl	(%rdx), %ecx
    000000a1: 	cmpw	%cx, %si
    000000a4: 	jbe	.Ltmp1246 # Offset: 164
    000000a6: 	leaq	0x2(%rdx), %rax
    000000aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1247:
    000000b0: 	movq	%rax, %rdx
    000000b3: 	movzwl	(%rax), %ecx
    000000b6: 	leaq	0x2(%rax), %rax
    000000ba: 	cmpw	%cx, %si
    000000bd: 	ja	.Ltmp1247 # Offset: 189
    000000bf: 	cmpq	%rdx, %r8
    000000c2: 	jbe	.Ltmp1245 # Offset: 194
.Ltmp1246:
    000000c4: 	movw	%cx, (%r8)
    000000c8: 	movw	%di, (%rdx)
.Ltmp1244:
    000000cb: 	movzwl	-0x2(%r8), %edi
    000000d0: 	movq	%r8, %r13
    000000d3: 	jmp	.Ltmp1248 # Offset: 211
.Ltmp1245:
    000000d5: 	movq	%r13, %rax
    000000d8: 	subq	%r9, %rax
    000000db: 	cmpq	$0x2, %rax
    000000df: 	jg	.Ltmp1249 # Offset: 223
.Ltmp1285:
    000000e5: 	movq	%rbp, %rax
    000000e8: 	subq	%r13, %rax
    000000eb: 	cmpq	$0x2, %rax
    000000ef: 	jg	.Ltmp1250 # Offset: 239
.Ltmp1243:
    000000f5: 	movq	%r12, %rax
    000000f8: 	subq	%rbp, %rax
    000000fb: 	cmpq	$0x2, %rax
    000000ff: 	jle	.Ltmp1251 # Offset: 255
    00000101: 	movzwl	(%rbp), %esi
    00000105: 	movq	%r12, %r13
    00000108: 	movq	%rbp, %rdx
    0000010b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1256:
    00000110: 	movzwl	-0x2(%r13), %edi
    00000115: 	leaq	-0x2(%r13), %r8
    00000119: 	cmpw	%di, %si
    0000011c: 	jb	.Ltmp1252 # Offset: 284
    0000011e: 	cmpq	%rdx, %r8
    00000121: 	jbe	.Ltmp1253 # Offset: 289
    00000123: 	movzwl	(%rdx), %ecx
    00000126: 	cmpw	%cx, %si
    00000129: 	jbe	.Ltmp1254 # Offset: 297
    0000012b: 	leaq	0x2(%rdx), %rax
    0000012f: 	nop # Size: 1
.Ltmp1255:
    00000130: 	movq	%rax, %rdx
    00000133: 	movzwl	(%rax), %ecx
    00000136: 	leaq	0x2(%rax), %rax
    0000013a: 	cmpw	%cx, %si
    0000013d: 	ja	.Ltmp1255 # Offset: 317
    0000013f: 	cmpq	%rdx, %r8
    00000142: 	jbe	.Ltmp1253 # Offset: 322
.Ltmp1254:
    00000144: 	movw	%cx, (%r8)
    00000148: 	movw	%di, (%rdx)
.Ltmp1252:
    0000014b: 	movq	%r8, %r13
    0000014e: 	jmp	.Ltmp1256 # Offset: 334
.Ltmp1253:
    00000150: 	movq	%r13, %rax
    00000153: 	subq	%rbp, %rax
    00000156: 	cmpq	$0x2, %rax
    0000015a: 	jg	.Ltmp1257 # Offset: 346
.Ltmp1308:
    0000015c: 	movq	%r12, %rax
    0000015f: 	subq	%r13, %rax
    00000162: 	cmpq	$0x2, %rax
    00000166: 	jg	.Ltmp1258 # Offset: 358
.Ltmp1251:
    00000168: 	popq	%rbx
    00000169: 	popq	%rbp
    0000016a: 	popq	%r12
    0000016c: 	popq	%r13
    0000016e: 	popq	%r14
    00000170: 	retq # Offset: 368
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp1237:
    00000178: 	retq # Offset: 376
.Ltmp1258:
    00000179: 	movzwl	(%r13), %esi
    0000017e: 	movq	%r12, %rbp
    00000181: 	movq	%r13, %rdx
    00000184: 	nopl	(%rax) # Size: 4
.Ltmp1263:
    00000188: 	movzwl	-0x2(%rbp), %r8d
    0000018d: 	leaq	-0x2(%rbp), %rdi
    00000191: 	cmpw	%r8w, %si
    00000195: 	jb	.Ltmp1259 # Offset: 405
    00000197: 	cmpq	%rdx, %rdi
    0000019a: 	jbe	.Ltmp1260 # Offset: 410
    000001a0: 	movzwl	(%rdx), %ecx
    000001a3: 	cmpw	%si, %cx
    000001a6: 	jae	.Ltmp1261 # Offset: 422
    000001a8: 	leaq	0x2(%rdx), %rax
    000001ac: 	nopl	(%rax) # Size: 4
.Ltmp1262:
    000001b0: 	movq	%rax, %rdx
    000001b3: 	movzwl	(%rax), %ecx
    000001b6: 	leaq	0x2(%rax), %rax
    000001ba: 	cmpw	%cx, %si
    000001bd: 	ja	.Ltmp1262 # Offset: 445
    000001bf: 	cmpq	%rdx, %rdi
    000001c2: 	jbe	.Ltmp1260 # Offset: 450
.Ltmp1261:
    000001c8: 	movw	%cx, (%rdi)
    000001cb: 	movw	%r8w, (%rdx)
.Ltmp1259:
    000001cf: 	movq	%rdi, %rbp
    000001d2: 	jmp	.Ltmp1263 # Offset: 466
.Ltmp1257:
    000001d4: 	movzwl	(%rbp), %esi
    000001d8: 	movq	%r13, %rbx
    000001db: 	movq	%rbp, %rdx
    000001de: 	nop # Size: 2
.Ltmp1268:
    000001e0: 	leaq	-0x2(%rbx), %r8
    000001e4: 	cmpw	%di, %si
    000001e7: 	jb	.Ltmp1264 # Offset: 487
    000001e9: 	cmpq	%rdx, %r8
    000001ec: 	jbe	.Ltmp1265 # Offset: 492
    000001f2: 	movzwl	(%rdx), %ecx
    000001f5: 	cmpw	%si, %cx
    000001f8: 	jae	.Ltmp1266 # Offset: 504
    000001fa: 	leaq	0x2(%rdx), %rax
    000001fe: 	nop # Size: 2
.Ltmp1267:
    00000200: 	movq	%rax, %rdx
    00000203: 	movzwl	(%rax), %ecx
    00000206: 	leaq	0x2(%rax), %rax
    0000020a: 	cmpw	%cx, %si
    0000020d: 	ja	.Ltmp1267 # Offset: 525
    0000020f: 	cmpq	%rdx, %r8
    00000212: 	jbe	.Ltmp1265 # Offset: 530
.Ltmp1266:
    00000218: 	movw	%cx, (%r8)
    0000021c: 	movw	%di, (%rdx)
.Ltmp1264:
    0000021f: 	movzwl	-0x2(%r8), %edi
    00000224: 	movq	%r8, %rbx
    00000227: 	jmp	.Ltmp1268 # Offset: 551
.Ltmp1250:
    00000229: 	movzwl	(%r13), %esi
    0000022e: 	movq	%rbp, %rbx
    00000231: 	movq	%r13, %rdx
    00000234: 	nopl	(%rax) # Size: 4
.Ltmp1273:
    00000238: 	movzwl	-0x2(%rbx), %r8d
    0000023d: 	leaq	-0x2(%rbx), %rdi
    00000241: 	cmpw	%r8w, %si
    00000245: 	jb	.Ltmp1269 # Offset: 581
    00000247: 	cmpq	%rdx, %rdi
    0000024a: 	jbe	.Ltmp1270 # Offset: 586
    00000250: 	movzwl	(%rdx), %ecx
    00000253: 	cmpw	%cx, %si
    00000256: 	jbe	.Ltmp1271 # Offset: 598
    00000258: 	leaq	0x2(%rdx), %rax
    0000025c: 	nopl	(%rax) # Size: 4
.Ltmp1272:
    00000260: 	movq	%rax, %rdx
    00000263: 	movzwl	(%rax), %ecx
    00000266: 	leaq	0x2(%rax), %rax
    0000026a: 	cmpw	%cx, %si
    0000026d: 	ja	.Ltmp1272 # Offset: 621
    0000026f: 	cmpq	%rdx, %rdi
    00000272: 	jbe	.Ltmp1270 # Offset: 626
.Ltmp1271:
    00000278: 	movw	%cx, (%rdi)
    0000027b: 	movw	%r8w, (%rdx)
.Ltmp1269:
    0000027f: 	movq	%rdi, %rbx
    00000282: 	jmp	.Ltmp1273 # Offset: 642
.Ltmp1249:
    00000284: 	movzwl	(%r9), %esi
    00000288: 	movq	%r13, %rbx
    0000028b: 	movq	%r9, %rdx
    0000028e: 	nop # Size: 2
.Ltmp1278:
    00000290: 	leaq	-0x2(%rbx), %r8
    00000294: 	cmpw	%di, %si
    00000297: 	jb	.Ltmp1274 # Offset: 663
    00000299: 	cmpq	%rdx, %r8
    0000029c: 	jbe	.Ltmp1275 # Offset: 668
    0000029e: 	movzwl	(%rdx), %ecx
    000002a1: 	cmpw	%cx, %si
    000002a4: 	jbe	.Ltmp1276 # Offset: 676
    000002a6: 	leaq	0x2(%rdx), %rax
    000002aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1277:
    000002b0: 	movq	%rax, %rdx
    000002b3: 	movzwl	(%rax), %ecx
    000002b6: 	leaq	0x2(%rax), %rax
    000002ba: 	cmpw	%cx, %si
    000002bd: 	ja	.Ltmp1277 # Offset: 701
    000002bf: 	cmpq	%rdx, %r8
    000002c2: 	jbe	.Ltmp1275 # Offset: 706
.Ltmp1276:
    000002c4: 	movw	%cx, (%r8)
    000002c8: 	movw	%di, (%rdx)
.Ltmp1274:
    000002cb: 	movzwl	-0x2(%r8), %edi
    000002d0: 	movq	%r8, %rbx
    000002d3: 	jmp	.Ltmp1278 # Offset: 723
.Ltmp1275:
    000002d5: 	movq	%rbx, %rax
    000002d8: 	subq	%r9, %rax
    000002db: 	cmpq	$0x2, %rax
    000002df: 	jle	.Ltmp1279 # Offset: 735
    000002e1: 	movzwl	(%r9), %esi
    000002e5: 	movq	%rbx, %r14
    000002e8: 	movq	%r9, %rdx
    000002eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1284:
    000002f0: 	movzwl	-0x2(%r14), %r8d
    000002f5: 	leaq	-0x2(%r14), %rdi
    000002f9: 	cmpw	%r8w, %si
    000002fd: 	jb	.Ltmp1280 # Offset: 765
    000002ff: 	cmpq	%rdx, %rdi
    00000302: 	jbe	.Ltmp1281 # Offset: 770
    00000304: 	movzwl	(%rdx), %ecx
    00000307: 	cmpw	%cx, %si
    0000030a: 	jbe	.Ltmp1282 # Offset: 778
    0000030c: 	leaq	0x2(%rdx), %rax
.Ltmp1283:
    00000310: 	movq	%rax, %rdx
    00000313: 	movzwl	(%rax), %ecx
    00000316: 	leaq	0x2(%rax), %rax
    0000031a: 	cmpw	%cx, %si
    0000031d: 	ja	.Ltmp1283 # Offset: 797
    0000031f: 	cmpq	%rdx, %rdi
    00000322: 	jbe	.Ltmp1281 # Offset: 802
.Ltmp1282:
    00000324: 	movw	%cx, (%rdi)
    00000327: 	movw	%r8w, (%rdx)
.Ltmp1280:
    0000032b: 	movq	%rdi, %r14
    0000032e: 	jmp	.Ltmp1284 # Offset: 814
.Ltmp1281:
    00000330: 	movq	%r14, %rsi
    00000333: 	movq	%r9, %rdi
    00000336: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEEvT_S8_ # Offset: 822
    0000033b: 	movq	%rbx, %rsi
    0000033e: 	movq	%r14, %rdi
    00000341: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEEvT_S8_ # Offset: 833
.Ltmp1279:
    00000346: 	movq	%r13, %rax
    00000349: 	movq	%rbx, %r8
    0000034c: 	subq	%rbx, %rax
    0000034f: 	cmpq	$0x2, %rax
    00000353: 	jle	.Ltmp1285 # Offset: 851
    00000359: 	movzwl	(%rbx), %ecx
    0000035c: 	movq	%r13, %r14
    0000035f: 	nop # Size: 1
.Ltmp1290:
    00000360: 	movzwl	-0x2(%r14), %edi
    00000365: 	leaq	-0x2(%r14), %rsi
    00000369: 	cmpw	%di, %cx
    0000036c: 	jb	.Ltmp1286 # Offset: 876
    0000036e: 	cmpq	%rbx, %rsi
    00000371: 	jbe	.Ltmp1287 # Offset: 881
    00000377: 	movzwl	(%rbx), %edx
    0000037a: 	cmpw	%cx, %dx
    0000037d: 	jae	.Ltmp1288 # Offset: 893
    0000037f: 	leaq	0x2(%rbx), %rax
    00000383: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1289:
    00000388: 	movq	%rax, %rbx
    0000038b: 	movzwl	(%rax), %edx
    0000038e: 	leaq	0x2(%rax), %rax
    00000392: 	cmpw	%dx, %cx
    00000395: 	ja	.Ltmp1289 # Offset: 917
    00000397: 	cmpq	%rbx, %rsi
    0000039a: 	jbe	.Ltmp1287 # Offset: 922
.Ltmp1288:
    000003a0: 	movw	%dx, (%rsi)
    000003a3: 	movw	%di, (%rbx)
.Ltmp1286:
    000003a6: 	movq	%rsi, %r14
    000003a9: 	jmp	.Ltmp1290 # Offset: 937
.Ltmp1270:
    000003ab: 	movq	%rbx, %rax
    000003ae: 	subq	%r13, %rax
    000003b1: 	cmpq	$0x2, %rax
    000003b5: 	jle	.Ltmp1291 # Offset: 949
    000003b7: 	movzwl	(%r13), %esi
    000003bc: 	movq	%rbx, %r14
    000003bf: 	movq	%r13, %rdx
    000003c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1296:
    000003c8: 	movzwl	-0x2(%r14), %r8d
    000003cd: 	leaq	-0x2(%r14), %rdi
    000003d1: 	cmpw	%r8w, %si
    000003d5: 	jb	.Ltmp1292 # Offset: 981
    000003d7: 	cmpq	%rdx, %rdi
    000003da: 	jbe	.Ltmp1293 # Offset: 986
    000003dc: 	movzwl	(%rdx), %ecx
    000003df: 	cmpw	%si, %cx
    000003e2: 	jae	.Ltmp1294 # Offset: 994
    000003e4: 	leaq	0x2(%rdx), %rax
    000003e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1295:
    000003f0: 	movq	%rax, %rdx
    000003f3: 	movzwl	(%rax), %ecx
    000003f6: 	leaq	0x2(%rax), %rax
    000003fa: 	cmpw	%cx, %si
    000003fd: 	ja	.Ltmp1295 # Offset: 1021
    000003ff: 	cmpq	%rdx, %rdi
    00000402: 	jbe	.Ltmp1293 # Offset: 1026
.Ltmp1294:
    00000404: 	movw	%cx, (%rdi)
    00000407: 	movw	%r8w, (%rdx)
.Ltmp1292:
    0000040b: 	movq	%rdi, %r14
    0000040e: 	jmp	.Ltmp1296 # Offset: 1038
.Ltmp1293:
    00000410: 	movq	%r14, %rsi
    00000413: 	movq	%r13, %rdi
    00000416: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEEvT_S8_ # Offset: 1046
    0000041b: 	movq	%rbx, %rsi
    0000041e: 	movq	%r14, %rdi
    00000421: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEEvT_S8_ # Offset: 1057
.Ltmp1291:
    00000426: 	movq	%rbp, %rax
    00000429: 	movq	%rbx, %r8
    0000042c: 	subq	%rbx, %rax
    0000042f: 	cmpq	$0x2, %rax
    00000433: 	jle	.Ltmp1243 # Offset: 1075
    00000439: 	movzwl	(%rbx), %ecx
    0000043c: 	movq	%rbp, %r13
    0000043f: 	nop # Size: 1
.Ltmp1301:
    00000440: 	movzwl	-0x2(%r13), %edi
    00000445: 	leaq	-0x2(%r13), %rsi
    00000449: 	cmpw	%di, %cx
    0000044c: 	jb	.Ltmp1297 # Offset: 1100
    0000044e: 	cmpq	%rbx, %rsi
    00000451: 	jbe	.Ltmp1298 # Offset: 1105
    00000457: 	movzwl	(%rbx), %edx
    0000045a: 	cmpw	%dx, %cx
    0000045d: 	jbe	.Ltmp1299 # Offset: 1117
    0000045f: 	leaq	0x2(%rbx), %rax
    00000463: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1300:
    00000468: 	movq	%rax, %rbx
    0000046b: 	movzwl	(%rax), %edx
    0000046e: 	leaq	0x2(%rax), %rax
    00000472: 	cmpw	%dx, %cx
    00000475: 	ja	.Ltmp1300 # Offset: 1141
    00000477: 	cmpq	%rbx, %rsi
    0000047a: 	jbe	.Ltmp1298 # Offset: 1146
.Ltmp1299:
    00000480: 	movw	%dx, (%rsi)
    00000483: 	movw	%di, (%rbx)
.Ltmp1297:
    00000486: 	movq	%rsi, %r13
    00000489: 	jmp	.Ltmp1301 # Offset: 1161
.Ltmp1265:
    0000048b: 	movq	%rbx, %rax
    0000048e: 	subq	%rbp, %rax
    00000491: 	cmpq	$0x2, %rax
    00000495: 	jle	.Ltmp1302 # Offset: 1173
    00000497: 	movzwl	(%rbp), %esi
    0000049b: 	movq	%rbx, %r14
    0000049e: 	movq	%rbp, %rdx
    000004a1: 	nopl	(%rax) # Size: 7
.Ltmp1307:
    000004a8: 	movzwl	-0x2(%r14), %r8d
    000004ad: 	leaq	-0x2(%r14), %rdi
    000004b1: 	cmpw	%r8w, %si
    000004b5: 	jb	.Ltmp1303 # Offset: 1205
    000004b7: 	cmpq	%rdx, %rdi
    000004ba: 	jbe	.Ltmp1304 # Offset: 1210
    000004bc: 	movzwl	(%rdx), %ecx
    000004bf: 	cmpw	%si, %cx
    000004c2: 	jae	.Ltmp1305 # Offset: 1218
    000004c4: 	leaq	0x2(%rdx), %rax
    000004c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1306:
    000004d0: 	movq	%rax, %rdx
    000004d3: 	movzwl	(%rax), %ecx
    000004d6: 	leaq	0x2(%rax), %rax
    000004da: 	cmpw	%cx, %si
    000004dd: 	ja	.Ltmp1306 # Offset: 1245
    000004df: 	cmpq	%rdx, %rdi
    000004e2: 	jbe	.Ltmp1304 # Offset: 1250
.Ltmp1305:
    000004e4: 	movw	%cx, (%rdi)
    000004e7: 	movw	%r8w, (%rdx)
.Ltmp1303:
    000004eb: 	movq	%rdi, %r14
    000004ee: 	jmp	.Ltmp1307 # Offset: 1262
.Ltmp1304:
    000004f0: 	movq	%r14, %rsi
    000004f3: 	movq	%rbp, %rdi
    000004f6: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEEvT_S8_ # Offset: 1270
    000004fb: 	movq	%rbx, %rsi
    000004fe: 	movq	%r14, %rdi
    00000501: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEEvT_S8_ # Offset: 1281
.Ltmp1302:
    00000506: 	movq	%r13, %rax
    00000509: 	movq	%rbx, %r8
    0000050c: 	subq	%rbx, %rax
    0000050f: 	cmpq	$0x2, %rax
    00000513: 	jle	.Ltmp1308 # Offset: 1299
    00000519: 	movzwl	(%rbx), %ecx
    0000051c: 	movq	%r13, %rbp
    0000051f: 	nop # Size: 1
.Ltmp1313:
    00000520: 	movzwl	-0x2(%rbp), %edi
    00000524: 	leaq	-0x2(%rbp), %rsi
    00000528: 	cmpw	%di, %cx
    0000052b: 	jb	.Ltmp1309 # Offset: 1323
    0000052d: 	cmpq	%rbx, %rsi
    00000530: 	jbe	.Ltmp1310 # Offset: 1328
    00000536: 	movzwl	(%rbx), %edx
    00000539: 	cmpw	%dx, %cx
    0000053c: 	jbe	.Ltmp1311 # Offset: 1340
    0000053e: 	leaq	0x2(%rbx), %rax
    00000542: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1312:
    00000548: 	movq	%rax, %rbx
    0000054b: 	movzwl	(%rax), %edx
    0000054e: 	leaq	0x2(%rax), %rax
    00000552: 	cmpw	%dx, %cx
    00000555: 	ja	.Ltmp1312 # Offset: 1365
    00000557: 	cmpq	%rbx, %rsi
    0000055a: 	jbe	.Ltmp1310 # Offset: 1370
.Ltmp1311:
    00000560: 	movw	%dx, (%rsi)
    00000563: 	movw	%di, (%rbx)
.Ltmp1309:
    00000566: 	movq	%rsi, %rbp
    00000569: 	jmp	.Ltmp1313 # Offset: 1385
.Ltmp1260:
    0000056b: 	movq	%rbp, %rax
    0000056e: 	subq	%r13, %rax
    00000571: 	cmpq	$0x2, %rax
    00000575: 	jle	.Ltmp1314 # Offset: 1397
    00000577: 	movzwl	(%r13), %esi
    0000057c: 	movq	%rbp, %r14
    0000057f: 	movq	%r13, %rdx
    00000582: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1319:
    00000588: 	movzwl	-0x2(%r14), %r8d
    0000058d: 	leaq	-0x2(%r14), %rdi
    00000591: 	cmpw	%r8w, %si
    00000595: 	jb	.Ltmp1315 # Offset: 1429
    00000597: 	cmpq	%rdx, %rdi
    0000059a: 	jbe	.Ltmp1316 # Offset: 1434
    0000059c: 	movzwl	(%rdx), %ecx
    0000059f: 	cmpw	%si, %cx
    000005a2: 	jae	.Ltmp1317 # Offset: 1442
    000005a4: 	leaq	0x2(%rdx), %rax
    000005a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1318:
    000005b0: 	movq	%rax, %rdx
    000005b3: 	movzwl	(%rax), %ecx
    000005b6: 	leaq	0x2(%rax), %rax
    000005ba: 	cmpw	%cx, %si
    000005bd: 	ja	.Ltmp1318 # Offset: 1469
    000005bf: 	cmpq	%rdx, %rdi
    000005c2: 	jbe	.Ltmp1316 # Offset: 1474
.Ltmp1317:
    000005c4: 	movw	%cx, (%rdi)
    000005c7: 	movw	%r8w, (%rdx)
.Ltmp1315:
    000005cb: 	movq	%rdi, %r14
    000005ce: 	jmp	.Ltmp1319 # Offset: 1486
.Ltmp1316:
    000005d0: 	movq	%r14, %rsi
    000005d3: 	movq	%r13, %rdi
    000005d6: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEEvT_S8_ # Offset: 1494
    000005db: 	movq	%rbp, %rsi
    000005de: 	movq	%r14, %rdi
    000005e1: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEEvT_S8_ # Offset: 1505
.Ltmp1314:
    000005e6: 	movq	%r12, %rax
    000005e9: 	movq	%rbp, %r8
    000005ec: 	subq	%rbp, %rax
    000005ef: 	cmpq	$0x2, %rax
    000005f3: 	jle	.Ltmp1251 # Offset: 1523
    000005f9: 	movzwl	(%rbp), %ecx
    000005fd: 	movq	%r12, %r13
.Ltmp1324:
    00000600: 	movzwl	-0x2(%r13), %edi
    00000605: 	leaq	-0x2(%r13), %rsi
    00000609: 	cmpw	%di, %cx
    0000060c: 	jb	.Ltmp1320 # Offset: 1548
    0000060e: 	cmpq	%rbp, %rsi
    00000611: 	jbe	.Ltmp1321 # Offset: 1553
    00000613: 	movzwl	(%rbp), %edx
    00000617: 	cmpw	%cx, %dx
    0000061a: 	jae	.Ltmp1322 # Offset: 1562
    0000061c: 	leaq	0x2(%rbp), %rax
.Ltmp1323:
    00000620: 	movq	%rax, %rbp
    00000623: 	movzwl	(%rax), %edx
    00000626: 	leaq	0x2(%rax), %rax
    0000062a: 	cmpw	%dx, %cx
    0000062d: 	ja	.Ltmp1323 # Offset: 1581
    0000062f: 	cmpq	%rbp, %rsi
    00000632: 	jbe	.Ltmp1321 # Offset: 1586
.Ltmp1322:
    00000634: 	movw	%dx, (%rsi)
    00000637: 	movw	%di, (%rbp)
.Ltmp1320:
    0000063b: 	movq	%rsi, %r13
    0000063e: 	jmp	.Ltmp1324 # Offset: 1598
.Ltmp1321:
    00000640: 	movq	%r13, %rsi
    00000643: 	movq	%r8, %rdi
    00000646: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEEvT_S8_ # Offset: 1606
    0000064b: 	popq	%rbx
    0000064c: 	movq	%r12, %rsi
    0000064f: 	popq	%rbp
    00000650: 	movq	%r13, %rdi
    00000653: 	popq	%r12
    00000655: 	popq	%r13
    00000657: 	popq	%r14
    00000659: 	jmp	.LBB0209 # Offset: 1625
.Ltmp1310:
    0000065e: 	movq	%rbp, %rsi
    00000661: 	movq	%r8, %rdi
    00000664: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEEvT_S8_ # Offset: 1636
    00000669: 	movq	%r13, %rsi
    0000066c: 	movq	%rbp, %rdi
    0000066f: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEEvT_S8_ # Offset: 1647
    00000674: 	jmp	.Ltmp1308 # Offset: 1652
.Ltmp1298:
    00000679: 	movq	%r13, %rsi
    0000067c: 	movq	%r8, %rdi
    0000067f: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEEvT_S8_ # Offset: 1663
    00000684: 	movq	%rbp, %rsi
    00000687: 	movq	%r13, %rdi
    0000068a: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEEvT_S8_ # Offset: 1674
    0000068f: 	jmp	.Ltmp1243 # Offset: 1679
.Ltmp1287:
    00000694: 	movq	%r14, %rsi
    00000697: 	movq	%r8, %rdi
    0000069a: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEEvT_S8_ # Offset: 1690
    0000069f: 	movq	%r13, %rsi
    000006a2: 	movq	%r14, %rdi
    000006a5: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEEvT_S8_ # Offset: 1701
    000006aa: 	jmp	.Ltmp1285 # Offset: 1706
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEEvT_S8_"

Binary Function "_ZNSt6vectorIsSaIsEE17_M_default_appendEm" after disassembly {
  Number      : 211
  State       : disassembled
  Address     : 0xd970
  Size        : 0x1d6
  MaxSize     : 0x1e0
  Offset      : 0xd970
  Section     : .text
  Orc Section : .local.text._ZNSt6vectorIsSaIsEE17_M_default_appendEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0210:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp1325 # Offset: 7
    0000000d: 	movabsq	$0x3fffffffffffffff, %rax
    00000017: 	pushq	%r15
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rdi, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	movq	%rsi, %rbx
    00000027: 	subq	$0x18, %rsp
    0000002b: 	movq	0x8(%rdi), %rdx
    0000002f: 	movq	(%rdi), %r8
    00000032: 	movq	%rdx, %rbp
    00000035: 	subq	%r8, %rbp
    00000038: 	movq	%rbp, %r13
    0000003b: 	sarq	%r13
    0000003e: 	subq	%r13, %rax
    00000041: 	movq	%rax, %rcx
    00000044: 	movq	0x10(%rdi), %rax
    00000048: 	subq	%rdx, %rax
    0000004b: 	sarq	%rax
    0000004e: 	cmpq	%rax, %rsi
    00000051: 	jbe	.Ltmp1326 # Offset: 81
    00000057: 	cmpq	%rsi, %rcx
    0000005a: 	jb	.Ltmp1327 # Offset: 90
    00000060: 	cmpq	%r13, %rsi
    00000063: 	movq	%r13, %rax
    00000066: 	cmovaeq	%rsi, %rax
    0000006a: 	addq	%r13, %rax
    0000006d: 	jb	.Ltmp1328 # Offset: 109
    00000073: 	testq	%rax, %rax
    00000076: 	jne	.Ltmp1329 # Offset: 118
    0000007c: 	movq	%rbp, %r9
    0000007f: 	xorl	%r14d, %r14d
    00000082: 	xorl	%r15d, %r15d
.Ltmp1336:
    00000085: 	addq	%r15, %rbp
    00000088: 	xorl	%eax, %eax
    0000008a: 	movq	%rbx, %rdx
    0000008d: 	movw	%ax, (%rbp)
    00000091: 	subq	$0x1, %rdx
    00000095: 	je	.Ltmp1330 # Offset: 149
    00000097: 	leaq	0x2(%rbp), %rdi
    0000009b: 	addq	%rdx, %rdx
    0000009e: 	xorl	%esi, %esi
    000000a0: 	movq	%r9, 0x8(%rsp)
    000000a5: 	movq	%r8, (%rsp)
    000000a9: 	callq	memset@PLT # Offset: 169
    000000ae: 	movq	(%rsp), %r8
    000000b2: 	movq	0x8(%rsp), %r9
.Ltmp1330:
    000000b7: 	testq	%r9, %r9
    000000ba: 	jg	.Ltmp1331 # Offset: 186
    000000c0: 	testq	%r8, %r8
    000000c3: 	jne	.Ltmp1332 # Offset: 195
.Ltmp1334:
    000000c9: 	addq	%r13, %rbx
    000000cc: 	movq	%r15, %xmm0
    000000d1: 	movq	%r14, 0x10(%r12)
    000000d6: 	leaq	(%r15,%rbx,2), %rax
    000000da: 	movq	%rax, %xmm1
    000000df: 	punpcklqdq	%xmm1, %xmm0
    000000e3: 	movups	%xmm0, (%r12)
    000000e8: 	addq	$0x18, %rsp
    000000ec: 	popq	%rbx
    000000ed: 	popq	%rbp
    000000ee: 	popq	%r12
    000000f0: 	popq	%r13
    000000f2: 	popq	%r14
    000000f4: 	popq	%r15
    000000f6: 	retq # Offset: 246
    000000f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1326:
    00000100: 	xorl	%ecx, %ecx
    00000102: 	movw	%cx, (%rdx)
    00000105: 	leaq	0x2(%rdx), %rcx
    00000109: 	subq	$0x1, %rbx
    0000010d: 	je	.Ltmp1333 # Offset: 269
    0000010f: 	leaq	(%rcx,%rbx,2), %rax
    00000113: 	movq	%rcx, %rdi
    00000116: 	xorl	%esi, %esi
    00000118: 	subq	%rdx, %rax
    0000011b: 	leaq	-0x2(%rax), %rbx
    0000011f: 	movq	%rbx, %rdx
    00000122: 	callq	memset@PLT # Offset: 290
    00000127: 	movq	%rax, %rcx
    0000012a: 	addq	%rbx, %rcx
.Ltmp1333:
    0000012d: 	movq	%rcx, 0x8(%r12)
    00000132: 	addq	$0x18, %rsp
    00000136: 	popq	%rbx
    00000137: 	popq	%rbp
    00000138: 	popq	%r12
    0000013a: 	popq	%r13
    0000013c: 	popq	%r14
    0000013e: 	popq	%r15
    00000140: 	retq # Offset: 320
    00000141: 	nopl	(%rax) # Size: 7
.Ltmp1325:
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp1331:
    00000150: 	movq	%r8, %rsi
    00000153: 	movq	%r9, %rdx
    00000156: 	movq	%r15, %rdi
    00000159: 	movq	%r8, (%rsp)
    0000015d: 	callq	memmove@PLT # Offset: 349
    00000162: 	movq	0x10(%r12), %rsi
    00000167: 	movq	(%rsp), %r8
    0000016b: 	subq	%r8, %rsi
.Ltmp1335:
    0000016e: 	movq	%r8, %rdi
    00000171: 	callq	_ZdlPvm@PLT # Offset: 369
    00000176: 	jmp	.Ltmp1334 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1332:
    00000180: 	movq	0x10(%r12), %rsi
    00000185: 	subq	%r8, %rsi
    00000188: 	jmp	.Ltmp1335 # Offset: 392
.Ltmp1329:
    0000018a: 	movabsq	$0x3fffffffffffffff, %rdx
    00000194: 	cmpq	%rdx, %rax
    00000197: 	cmovaq	%rdx, %rax
    0000019b: 	leaq	(%rax,%rax), %r14
.Ltmp1337:
    0000019f: 	movq	%r14, %rdi
    000001a2: 	callq	_Znwm@PLT # Offset: 418
    000001a7: 	movq	(%r12), %r8
    000001ab: 	movq	0x8(%r12), %r9
    000001b0: 	movq	%rax, %r15
    000001b3: 	addq	%rax, %r14
    000001b6: 	subq	%r8, %r9
    000001b9: 	jmp	.Ltmp1336 # Offset: 441
.Ltmp1328:
    000001be: 	movabsq	$0x7ffffffffffffffe, %r14
    000001c8: 	jmp	.Ltmp1337 # Offset: 456
.Ltmp1327:
    000001ca: 	leaq	DATAat0x24197(%rip), %rdi
    000001d1: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 465
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt6vectorIsSaIsEE17_M_default_appendEm"

Binary Function "_ZN9benchmark9quicksortIPsEEvT_S2_" after disassembly {
  Number      : 212
  State       : disassembled
  Address     : 0xdb50
  Size        : 0x46e
  MaxSize     : 0x470
  Offset      : 0xdb50
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIPsEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0211:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rax
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rax
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rsi, (%rsp)
    0000001c: 	cmpq	$0x2, %rax
    00000020: 	jle	.Ltmp1338 # Offset: 32
.Ltmp1350:
    00000022: 	movzwl	(%rdi), %r8d
    00000026: 	movq	(%rsp), %r13
    0000002a: 	movq	%rdi, %rdx
.Ltmp1343:
    0000002d: 	movzwl	-0x2(%r13), %eax
    00000032: 	leaq	-0x2(%r13), %rcx
    00000036: 	cmpw	%r8w, %ax
    0000003a: 	jg	.Ltmp1339 # Offset: 58
    0000003c: 	cmpq	%rcx, %rdx
    0000003f: 	jae	.Ltmp1340 # Offset: 63
    00000041: 	movzwl	(%rdx), %esi
    00000044: 	cmpw	%si, %r8w
    00000048: 	jle	.Ltmp1341 # Offset: 72
.Ltmp1342:
    0000004a: 	movzwl	0x2(%rdx), %esi
    0000004e: 	addq	$0x2, %rdx
    00000052: 	cmpw	%r8w, %si
    00000056: 	jl	.Ltmp1342 # Offset: 86
    00000058: 	cmpq	%rdx, %rcx
    0000005b: 	jbe	.Ltmp1340 # Offset: 91
.Ltmp1341:
    0000005d: 	movw	%si, (%rcx)
    00000060: 	movw	%ax, (%rdx)
.Ltmp1339:
    00000063: 	movq	%rcx, %r13
    00000066: 	jmp	.Ltmp1343 # Offset: 102
.Ltmp1338:
    00000068: 	addq	$0x28, %rsp
    0000006c: 	popq	%rbx
    0000006d: 	popq	%rbp
    0000006e: 	popq	%r12
    00000070: 	popq	%r13
    00000072: 	popq	%r14
    00000074: 	popq	%r15
    00000076: 	retq # Offset: 118
.Ltmp1340:
    00000077: 	movq	%r13, %rdx
    0000007a: 	movq	%r13, %r8
    0000007d: 	subq	%rdi, %rdx
    00000080: 	cmpq	$0x2, %rdx
    00000084: 	jle	.Ltmp1344 # Offset: 132
.Ltmp1402:
    00000086: 	movzwl	(%rdi), %r9d
    0000008a: 	movq	%r8, %r14
    0000008d: 	movq	%rdi, %rdx
.Ltmp1349:
    00000090: 	leaq	-0x2(%r14), %rcx
    00000094: 	cmpw	%ax, %r9w
    00000098: 	jl	.Ltmp1345 # Offset: 152
    0000009a: 	cmpq	%rdx, %rcx
    0000009d: 	jbe	.Ltmp1346 # Offset: 157
    0000009f: 	movzwl	(%rdx), %esi
    000000a2: 	cmpw	%si, %r9w
    000000a6: 	jle	.Ltmp1347 # Offset: 166
.Ltmp1348:
    000000a8: 	movzwl	0x2(%rdx), %esi
    000000ac: 	addq	$0x2, %rdx
    000000b0: 	cmpw	%si, %r9w
    000000b4: 	jg	.Ltmp1348 # Offset: 180
    000000b6: 	cmpq	%rdx, %rcx
    000000b9: 	jbe	.Ltmp1346 # Offset: 185
.Ltmp1347:
    000000bb: 	movw	%si, (%rcx)
    000000be: 	movw	%ax, (%rdx)
.Ltmp1345:
    000000c1: 	movzwl	-0x2(%rcx), %eax
    000000c5: 	movq	%rcx, %r14
    000000c8: 	jmp	.Ltmp1349 # Offset: 200
.Ltmp1401:
    000000ca: 	movq	%r8, %r13
.Ltmp1344:
    000000cd: 	movq	(%rsp), %rax
    000000d1: 	subq	%r13, %rax
    000000d4: 	cmpq	$0x2, %rax
    000000d8: 	jle	.Ltmp1338 # Offset: 216
    000000da: 	movq	%r13, %rdi
    000000dd: 	jmp	.Ltmp1350 # Offset: 221
.Ltmp1346:
    000000e2: 	movq	%r14, %rdx
    000000e5: 	subq	%rdi, %rdx
    000000e8: 	cmpq	$0x2, %rdx
    000000ec: 	jle	.Ltmp1351 # Offset: 236
    000000f2: 	movq	%r8, 0x8(%rsp)
    000000f7: 	movq	%r14, %rbx
.Ltmp1404:
    000000fa: 	movzwl	(%rdi), %r9d
    000000fe: 	movq	%rbx, %r15
    00000101: 	movq	%rdi, %rdx
.Ltmp1356:
    00000104: 	leaq	-0x2(%r15), %rcx
    00000108: 	cmpw	%r9w, %ax
    0000010c: 	jg	.Ltmp1352 # Offset: 268
    0000010e: 	cmpq	%rdx, %rcx
    00000111: 	jbe	.Ltmp1353 # Offset: 273
    00000113: 	movzwl	(%rdx), %esi
    00000116: 	cmpw	%si, %r9w
    0000011a: 	jle	.Ltmp1354 # Offset: 282
.Ltmp1355:
    0000011c: 	movzwl	0x2(%rdx), %esi
    00000120: 	addq	$0x2, %rdx
    00000124: 	cmpw	%si, %r9w
    00000128: 	jg	.Ltmp1355 # Offset: 296
    0000012a: 	cmpq	%rdx, %rcx
    0000012d: 	jbe	.Ltmp1353 # Offset: 301
.Ltmp1354:
    0000012f: 	movw	%si, (%rcx)
    00000132: 	movw	%ax, (%rdx)
.Ltmp1352:
    00000135: 	movzwl	-0x2(%rcx), %eax
    00000139: 	movq	%rcx, %r15
    0000013c: 	jmp	.Ltmp1356 # Offset: 316
.Ltmp1353:
    0000013e: 	movq	%r15, %rdx
    00000141: 	subq	%rdi, %rdx
    00000144: 	cmpq	$0x2, %rdx
    00000148: 	jle	.Ltmp1357 # Offset: 328
    0000014e: 	movq	%rbx, 0x10(%rsp)
    00000153: 	movq	%r15, %rbx
.Ltmp1400:
    00000156: 	movzwl	(%rdi), %r9d
    0000015a: 	movq	%rbx, %r14
    0000015d: 	movq	%rdi, %rdx
.Ltmp1362:
    00000160: 	leaq	-0x2(%r14), %rcx
    00000164: 	cmpw	%ax, %r9w
    00000168: 	jl	.Ltmp1358 # Offset: 360
    0000016a: 	cmpq	%rdx, %rcx
    0000016d: 	jbe	.Ltmp1359 # Offset: 365
    0000016f: 	movzwl	(%rdx), %esi
    00000172: 	cmpw	%si, %r9w
    00000176: 	jle	.Ltmp1360 # Offset: 374
.Ltmp1361:
    00000178: 	movzwl	0x2(%rdx), %esi
    0000017c: 	addq	$0x2, %rdx
    00000180: 	cmpw	%si, %r9w
    00000184: 	jg	.Ltmp1361 # Offset: 388
    00000186: 	cmpq	%rdx, %rcx
    00000189: 	jbe	.Ltmp1359 # Offset: 393
.Ltmp1360:
    0000018b: 	movw	%si, (%rcx)
    0000018e: 	movw	%ax, (%rdx)
.Ltmp1358:
    00000191: 	movzwl	-0x2(%rcx), %eax
    00000195: 	movq	%rcx, %r14
    00000198: 	jmp	.Ltmp1362 # Offset: 408
.Ltmp1359:
    0000019a: 	movq	%r14, %rdx
    0000019d: 	subq	%rdi, %rdx
    000001a0: 	cmpq	$0x2, %rdx
    000001a4: 	jle	.Ltmp1363 # Offset: 420
    000001aa: 	movq	%rbx, 0x18(%rsp)
    000001af: 	movq	%r14, %rbx
.Ltmp1398:
    000001b2: 	movzwl	(%rdi), %r9d
    000001b6: 	movq	%rbx, %r14
    000001b9: 	movq	%rdi, %rdx
.Ltmp1368:
    000001bc: 	leaq	-0x2(%r14), %rcx
    000001c0: 	cmpw	%ax, %r9w
    000001c4: 	jl	.Ltmp1364 # Offset: 452
    000001c6: 	cmpq	%rdx, %rcx
    000001c9: 	jbe	.Ltmp1365 # Offset: 457
    000001cb: 	movzwl	(%rdx), %esi
    000001ce: 	cmpw	%si, %r9w
    000001d2: 	jle	.Ltmp1366 # Offset: 466
.Ltmp1367:
    000001d4: 	movzwl	0x2(%rdx), %esi
    000001d8: 	addq	$0x2, %rdx
    000001dc: 	cmpw	%si, %r9w
    000001e0: 	jg	.Ltmp1367 # Offset: 480
    000001e2: 	cmpq	%rdx, %rcx
    000001e5: 	jbe	.Ltmp1365 # Offset: 485
.Ltmp1366:
    000001e7: 	movw	%si, (%rcx)
    000001ea: 	movw	%ax, (%rdx)
.Ltmp1364:
    000001ed: 	movzwl	-0x2(%rcx), %eax
    000001f1: 	movq	%rcx, %r14
    000001f4: 	jmp	.Ltmp1368 # Offset: 500
.Ltmp1365:
    000001f6: 	movq	%r14, %rdx
    000001f9: 	subq	%rdi, %rdx
    000001fc: 	cmpq	$0x2, %rdx
    00000200: 	jle	.Ltmp1369 # Offset: 512
.Ltmp1396:
    00000206: 	movzwl	(%rdi), %r8d
    0000020a: 	movq	%r14, %r15
    0000020d: 	movq	%rdi, %rdx
.Ltmp1374:
    00000210: 	leaq	-0x2(%r15), %rcx
    00000214: 	cmpw	%ax, %r8w
    00000218: 	jl	.Ltmp1370 # Offset: 536
    0000021a: 	cmpq	%rdx, %rcx
    0000021d: 	jbe	.Ltmp1371 # Offset: 541
    0000021f: 	movzwl	(%rdx), %esi
    00000222: 	cmpw	%si, %r8w
    00000226: 	jle	.Ltmp1372 # Offset: 550
    00000228: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1373:
    00000230: 	movzwl	0x2(%rdx), %esi
    00000234: 	addq	$0x2, %rdx
    00000238: 	cmpw	%si, %r8w
    0000023c: 	jg	.Ltmp1373 # Offset: 572
    0000023e: 	cmpq	%rdx, %rcx
    00000241: 	jbe	.Ltmp1371 # Offset: 577
.Ltmp1372:
    00000243: 	movw	%si, (%rcx)
    00000246: 	movw	%ax, (%rdx)
.Ltmp1370:
    00000249: 	movzwl	-0x2(%rcx), %eax
    0000024d: 	movq	%rcx, %r15
    00000250: 	jmp	.Ltmp1374 # Offset: 592
.Ltmp1371:
    00000252: 	movq	%r15, %rdx
    00000255: 	subq	%rdi, %rdx
    00000258: 	cmpq	$0x2, %rdx
    0000025c: 	jle	.Ltmp1375 # Offset: 604
.Ltmp1395:
    00000262: 	movzwl	(%rdi), %r8d
    00000266: 	movq	%r15, %r12
    00000269: 	movq	%rdi, %rdx
    0000026c: 	nopl	(%rax) # Size: 4
.Ltmp1393:
    00000270: 	leaq	-0x2(%r12), %rsi
    00000275: 	cmpw	%ax, %r8w
    00000279: 	jl	.Ltmp1376 # Offset: 633
    0000027f: 	cmpq	%rdx, %rsi
    00000282: 	jbe	.Ltmp1377 # Offset: 642
    00000284: 	movzwl	(%rdx), %ecx
    00000287: 	cmpw	%cx, %r8w
    0000028b: 	jle	.Ltmp1378 # Offset: 651
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp1379:
    00000298: 	movzwl	0x2(%rdx), %ecx
    0000029c: 	addq	$0x2, %rdx
    000002a0: 	cmpw	%cx, %r8w
    000002a4: 	jg	.Ltmp1379 # Offset: 676
    000002a6: 	cmpq	%rdx, %rsi
    000002a9: 	ja	.Ltmp1378 # Offset: 681
.Ltmp1377:
    000002af: 	movq	%r12, %rdx
    000002b2: 	subq	%rdi, %rdx
    000002b5: 	cmpq	$0x2, %rdx
    000002b9: 	jle	.Ltmp1380 # Offset: 697
.Ltmp1392:
    000002bf: 	movzwl	(%rdi), %esi
    000002c2: 	movq	%r12, %rbp
    000002c5: 	movq	%rdi, %rdx
    000002c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1391:
    000002d0: 	leaq	-0x2(%rbp), %rcx
    000002d4: 	cmpw	%si, %ax
    000002d7: 	jg	.Ltmp1381 # Offset: 727
    000002dd: 	cmpq	%rdx, %rcx
    000002e0: 	jbe	.Ltmp1382 # Offset: 736
    000002e2: 	movzwl	(%rdx), %r8d
    000002e6: 	cmpw	%r8w, %si
    000002ea: 	jle	.Ltmp1383 # Offset: 746
    000002ec: 	nopl	(%rax) # Size: 4
.Ltmp1384:
    000002f0: 	movzwl	0x2(%rdx), %r8d
    000002f5: 	addq	$0x2, %rdx
    000002f9: 	cmpw	%r8w, %si
    000002fd: 	jg	.Ltmp1384 # Offset: 765
    000002ff: 	cmpq	%rdx, %rcx
    00000302: 	ja	.Ltmp1383 # Offset: 770
.Ltmp1382:
    00000304: 	movq	%rbp, %rax
    00000307: 	subq	%rdi, %rax
    0000030a: 	cmpq	$0x2, %rax
    0000030e: 	jle	.Ltmp1385 # Offset: 782
.Ltmp1390:
    00000310: 	movzwl	(%rdi), %ecx
    00000313: 	movq	%rbp, %r13
    00000316: 	movq	%rdi, %rax
    00000319: 	nopl	(%rax) # Size: 7
.Ltmp1394:
    00000320: 	movzwl	-0x2(%r13), %r8d
    00000325: 	leaq	-0x2(%r13), %rsi
    00000329: 	cmpw	%r8w, %cx
    0000032d: 	jl	.Ltmp1386 # Offset: 813
    00000333: 	cmpq	%rax, %rsi
    00000336: 	jbe	.Ltmp1387 # Offset: 822
    00000338: 	movzwl	(%rax), %edx
    0000033b: 	cmpw	%dx, %cx
    0000033e: 	jle	.Ltmp1388 # Offset: 830
.Ltmp1389:
    00000340: 	movzwl	0x2(%rax), %edx
    00000344: 	addq	$0x2, %rax
    00000348: 	cmpw	%dx, %cx
    0000034b: 	jg	.Ltmp1389 # Offset: 843
    0000034d: 	cmpq	%rax, %rsi
    00000350: 	ja	.Ltmp1388 # Offset: 848
.Ltmp1387:
    00000352: 	movq	%r13, %rsi
    00000355: 	callq	_ZN9benchmark9quicksortIPsEEvT_S2_ # Offset: 853
    0000035a: 	movq	%rbp, %rax
    0000035d: 	subq	%r13, %rax
    00000360: 	cmpq	$0x2, %rax
    00000364: 	jle	.Ltmp1385 # Offset: 868
    00000366: 	movq	%r13, %rdi
    00000369: 	jmp	.Ltmp1390 # Offset: 873
.Ltmp1383:
    0000036b: 	movw	%r8w, (%rcx)
    0000036f: 	movw	%ax, (%rdx)
.Ltmp1381:
    00000372: 	movzwl	-0x2(%rcx), %eax
    00000376: 	movq	%rcx, %rbp
    00000379: 	jmp	.Ltmp1391 # Offset: 889
.Ltmp1385:
    0000037e: 	movq	%r12, %rax
    00000381: 	subq	%rbp, %rax
    00000384: 	cmpq	$0x2, %rax
    00000388: 	jle	.Ltmp1380 # Offset: 904
    0000038a: 	movzwl	-0x2(%r12), %eax
    00000390: 	movq	%rbp, %rdi
    00000393: 	jmp	.Ltmp1392 # Offset: 915
.Ltmp1378:
    00000398: 	movw	%cx, (%rsi)
    0000039b: 	movw	%ax, (%rdx)
.Ltmp1376:
    0000039e: 	movzwl	-0x2(%rsi), %eax
    000003a2: 	movq	%rsi, %r12
    000003a5: 	jmp	.Ltmp1393 # Offset: 933
    000003aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1388:
    000003b0: 	movw	%dx, (%rsi)
    000003b3: 	movw	%r8w, (%rax)
.Ltmp1386:
    000003b7: 	movq	%rsi, %r13
    000003ba: 	jmp	.Ltmp1394 # Offset: 954
.Ltmp1380:
    000003bf: 	movq	%r15, %rax
    000003c2: 	subq	%r12, %rax
    000003c5: 	cmpq	$0x2, %rax
    000003c9: 	jle	.Ltmp1375 # Offset: 969
    000003cb: 	movzwl	-0x2(%r15), %eax
    000003d0: 	movq	%r12, %rdi
    000003d3: 	jmp	.Ltmp1395 # Offset: 979
.Ltmp1375:
    000003d8: 	movq	%r14, %rax
    000003db: 	subq	%r15, %rax
    000003de: 	cmpq	$0x2, %rax
    000003e2: 	jle	.Ltmp1369 # Offset: 994
    000003e4: 	movzwl	-0x2(%r14), %eax
    000003e9: 	movq	%r15, %rdi
    000003ec: 	jmp	.Ltmp1396 # Offset: 1004
.Ltmp1369:
    000003f1: 	movq	%rbx, %rax
    000003f4: 	subq	%r14, %rax
    000003f7: 	cmpq	$0x2, %rax
    000003fb: 	jle	.Ltmp1397 # Offset: 1019
    000003fd: 	movzwl	-0x2(%rbx), %eax
    00000401: 	movq	%r14, %rdi
    00000404: 	jmp	.Ltmp1398 # Offset: 1028
.Ltmp1397:
    00000409: 	movq	%rbx, %r14
    0000040c: 	movq	0x18(%rsp), %rbx
.Ltmp1363:
    00000411: 	movq	%rbx, %rax
    00000414: 	subq	%r14, %rax
    00000417: 	cmpq	$0x2, %rax
    0000041b: 	jle	.Ltmp1399 # Offset: 1051
    0000041d: 	movzwl	-0x2(%rbx), %eax
    00000421: 	movq	%r14, %rdi
    00000424: 	jmp	.Ltmp1400 # Offset: 1060
.Ltmp1403:
    00000429: 	movq	0x8(%rsp), %r8
    0000042e: 	movq	%rbx, %r14
.Ltmp1351:
    00000431: 	movq	%r8, %rax
    00000434: 	subq	%r14, %rax
    00000437: 	cmpq	$0x2, %rax
    0000043b: 	jle	.Ltmp1401 # Offset: 1083
    00000441: 	movzwl	-0x2(%r8), %eax
    00000446: 	movq	%r14, %rdi
    00000449: 	jmp	.Ltmp1402 # Offset: 1097
.Ltmp1399:
    0000044e: 	movq	%rbx, %r15
    00000451: 	movq	0x10(%rsp), %rbx
.Ltmp1357:
    00000456: 	movq	%rbx, %rax
    00000459: 	subq	%r15, %rax
    0000045c: 	cmpq	$0x2, %rax
    00000460: 	jle	.Ltmp1403 # Offset: 1120
    00000462: 	movzwl	-0x2(%rbx), %eax
    00000466: 	movq	%r15, %rdi
    00000469: 	jmp	.Ltmp1404 # Offset: 1129
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIPsEEvT_S2_"

Binary Function "_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEEEvT_S8_" after disassembly {
  Number      : 213
  State       : disassembled
  Address     : 0xdfc0
  Size        : 0x6af
  MaxSize     : 0x6b0
  Offset      : 0xdfc0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEEEvT_S8_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0212:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x2, %rax
    0000000e: 	jle	.Ltmp1405 # Offset: 14
    00000014: 	pushq	%r14
    00000016: 	movq	%rdi, %r9
    00000019: 	movq	%rdi, %rdx
    0000001c: 	pushq	%r13
    0000001e: 	pushq	%r12
    00000020: 	movq	%rsi, %r12
    00000023: 	pushq	%rbp
    00000024: 	movq	%r12, %rbp
    00000027: 	pushq	%rbx
    00000028: 	movzwl	(%rdi), %esi
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1410:
    00000030: 	movzwl	-0x2(%rbp), %edi
    00000034: 	leaq	-0x2(%rbp), %r8
    00000038: 	cmpw	%si, %di
    0000003b: 	jg	.Ltmp1406 # Offset: 59
    0000003d: 	cmpq	%rdx, %r8
    00000040: 	jbe	.Ltmp1407 # Offset: 64
    00000042: 	movzwl	(%rdx), %ecx
    00000045: 	cmpw	%cx, %si
    00000048: 	jle	.Ltmp1408 # Offset: 72
    0000004a: 	leaq	0x2(%rdx), %rax
    0000004e: 	nop # Size: 2
.Ltmp1409:
    00000050: 	movq	%rax, %rdx
    00000053: 	movzwl	(%rax), %ecx
    00000056: 	leaq	0x2(%rax), %rax
    0000005a: 	cmpw	%si, %cx
    0000005d: 	jl	.Ltmp1409 # Offset: 93
    0000005f: 	cmpq	%rdx, %r8
    00000062: 	jbe	.Ltmp1407 # Offset: 98
.Ltmp1408:
    00000064: 	movw	%cx, (%r8)
    00000068: 	movw	%di, (%rdx)
.Ltmp1406:
    0000006b: 	movq	%r8, %rbp
    0000006e: 	jmp	.Ltmp1410 # Offset: 110
.Ltmp1407:
    00000070: 	movq	%rbp, %rax
    00000073: 	subq	%r9, %rax
    00000076: 	cmpq	$0x2, %rax
    0000007a: 	jle	.Ltmp1411 # Offset: 122
    0000007c: 	movzwl	(%r9), %esi
    00000080: 	movq	%rbp, %r13
    00000083: 	movq	%r9, %rdx
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1416:
    00000090: 	leaq	-0x2(%r13), %r8
    00000094: 	cmpw	%di, %si
    00000097: 	jl	.Ltmp1412 # Offset: 151
    00000099: 	cmpq	%rdx, %r8
    0000009c: 	jbe	.Ltmp1413 # Offset: 156
    0000009e: 	movzwl	(%rdx), %ecx
    000000a1: 	cmpw	%cx, %si
    000000a4: 	jle	.Ltmp1414 # Offset: 164
    000000a6: 	leaq	0x2(%rdx), %rax
    000000aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1415:
    000000b0: 	movq	%rax, %rdx
    000000b3: 	movzwl	(%rax), %ecx
    000000b6: 	leaq	0x2(%rax), %rax
    000000ba: 	cmpw	%cx, %si
    000000bd: 	jg	.Ltmp1415 # Offset: 189
    000000bf: 	cmpq	%rdx, %r8
    000000c2: 	jbe	.Ltmp1413 # Offset: 194
.Ltmp1414:
    000000c4: 	movw	%cx, (%r8)
    000000c8: 	movw	%di, (%rdx)
.Ltmp1412:
    000000cb: 	movzwl	-0x2(%r8), %edi
    000000d0: 	movq	%r8, %r13
    000000d3: 	jmp	.Ltmp1416 # Offset: 211
.Ltmp1413:
    000000d5: 	movq	%r13, %rax
    000000d8: 	subq	%r9, %rax
    000000db: 	cmpq	$0x2, %rax
    000000df: 	jg	.Ltmp1417 # Offset: 223
.Ltmp1453:
    000000e5: 	movq	%rbp, %rax
    000000e8: 	subq	%r13, %rax
    000000eb: 	cmpq	$0x2, %rax
    000000ef: 	jg	.Ltmp1418 # Offset: 239
.Ltmp1411:
    000000f5: 	movq	%r12, %rax
    000000f8: 	subq	%rbp, %rax
    000000fb: 	cmpq	$0x2, %rax
    000000ff: 	jle	.Ltmp1419 # Offset: 255
    00000101: 	movzwl	(%rbp), %esi
    00000105: 	movq	%r12, %r13
    00000108: 	movq	%rbp, %rdx
    0000010b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1424:
    00000110: 	movzwl	-0x2(%r13), %edi
    00000115: 	leaq	-0x2(%r13), %r8
    00000119: 	cmpw	%di, %si
    0000011c: 	jl	.Ltmp1420 # Offset: 284
    0000011e: 	cmpq	%rdx, %r8
    00000121: 	jbe	.Ltmp1421 # Offset: 289
    00000123: 	movzwl	(%rdx), %ecx
    00000126: 	cmpw	%cx, %si
    00000129: 	jle	.Ltmp1422 # Offset: 297
    0000012b: 	leaq	0x2(%rdx), %rax
    0000012f: 	nop # Size: 1
.Ltmp1423:
    00000130: 	movq	%rax, %rdx
    00000133: 	movzwl	(%rax), %ecx
    00000136: 	leaq	0x2(%rax), %rax
    0000013a: 	cmpw	%cx, %si
    0000013d: 	jg	.Ltmp1423 # Offset: 317
    0000013f: 	cmpq	%rdx, %r8
    00000142: 	jbe	.Ltmp1421 # Offset: 322
.Ltmp1422:
    00000144: 	movw	%cx, (%r8)
    00000148: 	movw	%di, (%rdx)
.Ltmp1420:
    0000014b: 	movq	%r8, %r13
    0000014e: 	jmp	.Ltmp1424 # Offset: 334
.Ltmp1421:
    00000150: 	movq	%r13, %rax
    00000153: 	subq	%rbp, %rax
    00000156: 	cmpq	$0x2, %rax
    0000015a: 	jg	.Ltmp1425 # Offset: 346
.Ltmp1476:
    0000015c: 	movq	%r12, %rax
    0000015f: 	subq	%r13, %rax
    00000162: 	cmpq	$0x2, %rax
    00000166: 	jg	.Ltmp1426 # Offset: 358
.Ltmp1419:
    00000168: 	popq	%rbx
    00000169: 	popq	%rbp
    0000016a: 	popq	%r12
    0000016c: 	popq	%r13
    0000016e: 	popq	%r14
    00000170: 	retq # Offset: 368
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp1405:
    00000178: 	retq # Offset: 376
.Ltmp1426:
    00000179: 	movzwl	(%r13), %esi
    0000017e: 	movq	%r12, %rbp
    00000181: 	movq	%r13, %rdx
    00000184: 	nopl	(%rax) # Size: 4
.Ltmp1431:
    00000188: 	movzwl	-0x2(%rbp), %r8d
    0000018d: 	leaq	-0x2(%rbp), %rdi
    00000191: 	cmpw	%r8w, %si
    00000195: 	jl	.Ltmp1427 # Offset: 405
    00000197: 	cmpq	%rdx, %rdi
    0000019a: 	jbe	.Ltmp1428 # Offset: 410
    000001a0: 	movzwl	(%rdx), %ecx
    000001a3: 	cmpw	%si, %cx
    000001a6: 	jge	.Ltmp1429 # Offset: 422
    000001a8: 	leaq	0x2(%rdx), %rax
    000001ac: 	nopl	(%rax) # Size: 4
.Ltmp1430:
    000001b0: 	movq	%rax, %rdx
    000001b3: 	movzwl	(%rax), %ecx
    000001b6: 	leaq	0x2(%rax), %rax
    000001ba: 	cmpw	%cx, %si
    000001bd: 	jg	.Ltmp1430 # Offset: 445
    000001bf: 	cmpq	%rdx, %rdi
    000001c2: 	jbe	.Ltmp1428 # Offset: 450
.Ltmp1429:
    000001c8: 	movw	%cx, (%rdi)
    000001cb: 	movw	%r8w, (%rdx)
.Ltmp1427:
    000001cf: 	movq	%rdi, %rbp
    000001d2: 	jmp	.Ltmp1431 # Offset: 466
.Ltmp1425:
    000001d4: 	movzwl	(%rbp), %esi
    000001d8: 	movq	%r13, %rbx
    000001db: 	movq	%rbp, %rdx
    000001de: 	nop # Size: 2
.Ltmp1436:
    000001e0: 	leaq	-0x2(%rbx), %r8
    000001e4: 	cmpw	%di, %si
    000001e7: 	jl	.Ltmp1432 # Offset: 487
    000001e9: 	cmpq	%rdx, %r8
    000001ec: 	jbe	.Ltmp1433 # Offset: 492
    000001f2: 	movzwl	(%rdx), %ecx
    000001f5: 	cmpw	%si, %cx
    000001f8: 	jge	.Ltmp1434 # Offset: 504
    000001fa: 	leaq	0x2(%rdx), %rax
    000001fe: 	nop # Size: 2
.Ltmp1435:
    00000200: 	movq	%rax, %rdx
    00000203: 	movzwl	(%rax), %ecx
    00000206: 	leaq	0x2(%rax), %rax
    0000020a: 	cmpw	%cx, %si
    0000020d: 	jg	.Ltmp1435 # Offset: 525
    0000020f: 	cmpq	%rdx, %r8
    00000212: 	jbe	.Ltmp1433 # Offset: 530
.Ltmp1434:
    00000218: 	movw	%cx, (%r8)
    0000021c: 	movw	%di, (%rdx)
.Ltmp1432:
    0000021f: 	movzwl	-0x2(%r8), %edi
    00000224: 	movq	%r8, %rbx
    00000227: 	jmp	.Ltmp1436 # Offset: 551
.Ltmp1418:
    00000229: 	movzwl	(%r13), %esi
    0000022e: 	movq	%rbp, %rbx
    00000231: 	movq	%r13, %rdx
    00000234: 	nopl	(%rax) # Size: 4
.Ltmp1441:
    00000238: 	movzwl	-0x2(%rbx), %r8d
    0000023d: 	leaq	-0x2(%rbx), %rdi
    00000241: 	cmpw	%r8w, %si
    00000245: 	jl	.Ltmp1437 # Offset: 581
    00000247: 	cmpq	%rdx, %rdi
    0000024a: 	jbe	.Ltmp1438 # Offset: 586
    00000250: 	movzwl	(%rdx), %ecx
    00000253: 	cmpw	%cx, %si
    00000256: 	jle	.Ltmp1439 # Offset: 598
    00000258: 	leaq	0x2(%rdx), %rax
    0000025c: 	nopl	(%rax) # Size: 4
.Ltmp1440:
    00000260: 	movq	%rax, %rdx
    00000263: 	movzwl	(%rax), %ecx
    00000266: 	leaq	0x2(%rax), %rax
    0000026a: 	cmpw	%cx, %si
    0000026d: 	jg	.Ltmp1440 # Offset: 621
    0000026f: 	cmpq	%rdx, %rdi
    00000272: 	jbe	.Ltmp1438 # Offset: 626
.Ltmp1439:
    00000278: 	movw	%cx, (%rdi)
    0000027b: 	movw	%r8w, (%rdx)
.Ltmp1437:
    0000027f: 	movq	%rdi, %rbx
    00000282: 	jmp	.Ltmp1441 # Offset: 642
.Ltmp1417:
    00000284: 	movzwl	(%r9), %esi
    00000288: 	movq	%r13, %rbx
    0000028b: 	movq	%r9, %rdx
    0000028e: 	nop # Size: 2
.Ltmp1446:
    00000290: 	leaq	-0x2(%rbx), %r8
    00000294: 	cmpw	%di, %si
    00000297: 	jl	.Ltmp1442 # Offset: 663
    00000299: 	cmpq	%rdx, %r8
    0000029c: 	jbe	.Ltmp1443 # Offset: 668
    0000029e: 	movzwl	(%rdx), %ecx
    000002a1: 	cmpw	%cx, %si
    000002a4: 	jle	.Ltmp1444 # Offset: 676
    000002a6: 	leaq	0x2(%rdx), %rax
    000002aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1445:
    000002b0: 	movq	%rax, %rdx
    000002b3: 	movzwl	(%rax), %ecx
    000002b6: 	leaq	0x2(%rax), %rax
    000002ba: 	cmpw	%cx, %si
    000002bd: 	jg	.Ltmp1445 # Offset: 701
    000002bf: 	cmpq	%rdx, %r8
    000002c2: 	jbe	.Ltmp1443 # Offset: 706
.Ltmp1444:
    000002c4: 	movw	%cx, (%r8)
    000002c8: 	movw	%di, (%rdx)
.Ltmp1442:
    000002cb: 	movzwl	-0x2(%r8), %edi
    000002d0: 	movq	%r8, %rbx
    000002d3: 	jmp	.Ltmp1446 # Offset: 723
.Ltmp1443:
    000002d5: 	movq	%rbx, %rax
    000002d8: 	subq	%r9, %rax
    000002db: 	cmpq	$0x2, %rax
    000002df: 	jle	.Ltmp1447 # Offset: 735
    000002e1: 	movzwl	(%r9), %esi
    000002e5: 	movq	%rbx, %r14
    000002e8: 	movq	%r9, %rdx
    000002eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1452:
    000002f0: 	movzwl	-0x2(%r14), %r8d
    000002f5: 	leaq	-0x2(%r14), %rdi
    000002f9: 	cmpw	%r8w, %si
    000002fd: 	jl	.Ltmp1448 # Offset: 765
    000002ff: 	cmpq	%rdx, %rdi
    00000302: 	jbe	.Ltmp1449 # Offset: 770
    00000304: 	movzwl	(%rdx), %ecx
    00000307: 	cmpw	%cx, %si
    0000030a: 	jle	.Ltmp1450 # Offset: 778
    0000030c: 	leaq	0x2(%rdx), %rax
.Ltmp1451:
    00000310: 	movq	%rax, %rdx
    00000313: 	movzwl	(%rax), %ecx
    00000316: 	leaq	0x2(%rax), %rax
    0000031a: 	cmpw	%cx, %si
    0000031d: 	jg	.Ltmp1451 # Offset: 797
    0000031f: 	cmpq	%rdx, %rdi
    00000322: 	jbe	.Ltmp1449 # Offset: 802
.Ltmp1450:
    00000324: 	movw	%cx, (%rdi)
    00000327: 	movw	%r8w, (%rdx)
.Ltmp1448:
    0000032b: 	movq	%rdi, %r14
    0000032e: 	jmp	.Ltmp1452 # Offset: 814
.Ltmp1449:
    00000330: 	movq	%r14, %rsi
    00000333: 	movq	%r9, %rdi
    00000336: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEEEvT_S8_ # Offset: 822
    0000033b: 	movq	%rbx, %rsi
    0000033e: 	movq	%r14, %rdi
    00000341: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEEEvT_S8_ # Offset: 833
.Ltmp1447:
    00000346: 	movq	%r13, %rax
    00000349: 	movq	%rbx, %r8
    0000034c: 	subq	%rbx, %rax
    0000034f: 	cmpq	$0x2, %rax
    00000353: 	jle	.Ltmp1453 # Offset: 851
    00000359: 	movzwl	(%rbx), %ecx
    0000035c: 	movq	%r13, %r14
    0000035f: 	nop # Size: 1
.Ltmp1458:
    00000360: 	movzwl	-0x2(%r14), %edi
    00000365: 	leaq	-0x2(%r14), %rsi
    00000369: 	cmpw	%di, %cx
    0000036c: 	jl	.Ltmp1454 # Offset: 876
    0000036e: 	cmpq	%rbx, %rsi
    00000371: 	jbe	.Ltmp1455 # Offset: 881
    00000377: 	movzwl	(%rbx), %edx
    0000037a: 	cmpw	%cx, %dx
    0000037d: 	jge	.Ltmp1456 # Offset: 893
    0000037f: 	leaq	0x2(%rbx), %rax
    00000383: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1457:
    00000388: 	movq	%rax, %rbx
    0000038b: 	movzwl	(%rax), %edx
    0000038e: 	leaq	0x2(%rax), %rax
    00000392: 	cmpw	%dx, %cx
    00000395: 	jg	.Ltmp1457 # Offset: 917
    00000397: 	cmpq	%rbx, %rsi
    0000039a: 	jbe	.Ltmp1455 # Offset: 922
.Ltmp1456:
    000003a0: 	movw	%dx, (%rsi)
    000003a3: 	movw	%di, (%rbx)
.Ltmp1454:
    000003a6: 	movq	%rsi, %r14
    000003a9: 	jmp	.Ltmp1458 # Offset: 937
.Ltmp1438:
    000003ab: 	movq	%rbx, %rax
    000003ae: 	subq	%r13, %rax
    000003b1: 	cmpq	$0x2, %rax
    000003b5: 	jle	.Ltmp1459 # Offset: 949
    000003b7: 	movzwl	(%r13), %esi
    000003bc: 	movq	%rbx, %r14
    000003bf: 	movq	%r13, %rdx
    000003c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1464:
    000003c8: 	movzwl	-0x2(%r14), %r8d
    000003cd: 	leaq	-0x2(%r14), %rdi
    000003d1: 	cmpw	%r8w, %si
    000003d5: 	jl	.Ltmp1460 # Offset: 981
    000003d7: 	cmpq	%rdx, %rdi
    000003da: 	jbe	.Ltmp1461 # Offset: 986
    000003dc: 	movzwl	(%rdx), %ecx
    000003df: 	cmpw	%si, %cx
    000003e2: 	jge	.Ltmp1462 # Offset: 994
    000003e4: 	leaq	0x2(%rdx), %rax
    000003e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1463:
    000003f0: 	movq	%rax, %rdx
    000003f3: 	movzwl	(%rax), %ecx
    000003f6: 	leaq	0x2(%rax), %rax
    000003fa: 	cmpw	%cx, %si
    000003fd: 	jg	.Ltmp1463 # Offset: 1021
    000003ff: 	cmpq	%rdx, %rdi
    00000402: 	jbe	.Ltmp1461 # Offset: 1026
.Ltmp1462:
    00000404: 	movw	%cx, (%rdi)
    00000407: 	movw	%r8w, (%rdx)
.Ltmp1460:
    0000040b: 	movq	%rdi, %r14
    0000040e: 	jmp	.Ltmp1464 # Offset: 1038
.Ltmp1461:
    00000410: 	movq	%r14, %rsi
    00000413: 	movq	%r13, %rdi
    00000416: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEEEvT_S8_ # Offset: 1046
    0000041b: 	movq	%rbx, %rsi
    0000041e: 	movq	%r14, %rdi
    00000421: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEEEvT_S8_ # Offset: 1057
.Ltmp1459:
    00000426: 	movq	%rbp, %rax
    00000429: 	movq	%rbx, %r8
    0000042c: 	subq	%rbx, %rax
    0000042f: 	cmpq	$0x2, %rax
    00000433: 	jle	.Ltmp1411 # Offset: 1075
    00000439: 	movzwl	(%rbx), %ecx
    0000043c: 	movq	%rbp, %r13
    0000043f: 	nop # Size: 1
.Ltmp1469:
    00000440: 	movzwl	-0x2(%r13), %edi
    00000445: 	leaq	-0x2(%r13), %rsi
    00000449: 	cmpw	%di, %cx
    0000044c: 	jl	.Ltmp1465 # Offset: 1100
    0000044e: 	cmpq	%rbx, %rsi
    00000451: 	jbe	.Ltmp1466 # Offset: 1105
    00000457: 	movzwl	(%rbx), %edx
    0000045a: 	cmpw	%dx, %cx
    0000045d: 	jle	.Ltmp1467 # Offset: 1117
    0000045f: 	leaq	0x2(%rbx), %rax
    00000463: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1468:
    00000468: 	movq	%rax, %rbx
    0000046b: 	movzwl	(%rax), %edx
    0000046e: 	leaq	0x2(%rax), %rax
    00000472: 	cmpw	%dx, %cx
    00000475: 	jg	.Ltmp1468 # Offset: 1141
    00000477: 	cmpq	%rbx, %rsi
    0000047a: 	jbe	.Ltmp1466 # Offset: 1146
.Ltmp1467:
    00000480: 	movw	%dx, (%rsi)
    00000483: 	movw	%di, (%rbx)
.Ltmp1465:
    00000486: 	movq	%rsi, %r13
    00000489: 	jmp	.Ltmp1469 # Offset: 1161
.Ltmp1433:
    0000048b: 	movq	%rbx, %rax
    0000048e: 	subq	%rbp, %rax
    00000491: 	cmpq	$0x2, %rax
    00000495: 	jle	.Ltmp1470 # Offset: 1173
    00000497: 	movzwl	(%rbp), %esi
    0000049b: 	movq	%rbx, %r14
    0000049e: 	movq	%rbp, %rdx
    000004a1: 	nopl	(%rax) # Size: 7
.Ltmp1475:
    000004a8: 	movzwl	-0x2(%r14), %r8d
    000004ad: 	leaq	-0x2(%r14), %rdi
    000004b1: 	cmpw	%r8w, %si
    000004b5: 	jl	.Ltmp1471 # Offset: 1205
    000004b7: 	cmpq	%rdx, %rdi
    000004ba: 	jbe	.Ltmp1472 # Offset: 1210
    000004bc: 	movzwl	(%rdx), %ecx
    000004bf: 	cmpw	%si, %cx
    000004c2: 	jge	.Ltmp1473 # Offset: 1218
    000004c4: 	leaq	0x2(%rdx), %rax
    000004c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1474:
    000004d0: 	movq	%rax, %rdx
    000004d3: 	movzwl	(%rax), %ecx
    000004d6: 	leaq	0x2(%rax), %rax
    000004da: 	cmpw	%cx, %si
    000004dd: 	jg	.Ltmp1474 # Offset: 1245
    000004df: 	cmpq	%rdx, %rdi
    000004e2: 	jbe	.Ltmp1472 # Offset: 1250
.Ltmp1473:
    000004e4: 	movw	%cx, (%rdi)
    000004e7: 	movw	%r8w, (%rdx)
.Ltmp1471:
    000004eb: 	movq	%rdi, %r14
    000004ee: 	jmp	.Ltmp1475 # Offset: 1262
.Ltmp1472:
    000004f0: 	movq	%r14, %rsi
    000004f3: 	movq	%rbp, %rdi
    000004f6: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEEEvT_S8_ # Offset: 1270
    000004fb: 	movq	%rbx, %rsi
    000004fe: 	movq	%r14, %rdi
    00000501: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEEEvT_S8_ # Offset: 1281
.Ltmp1470:
    00000506: 	movq	%r13, %rax
    00000509: 	movq	%rbx, %r8
    0000050c: 	subq	%rbx, %rax
    0000050f: 	cmpq	$0x2, %rax
    00000513: 	jle	.Ltmp1476 # Offset: 1299
    00000519: 	movzwl	(%rbx), %ecx
    0000051c: 	movq	%r13, %rbp
    0000051f: 	nop # Size: 1
.Ltmp1481:
    00000520: 	movzwl	-0x2(%rbp), %edi
    00000524: 	leaq	-0x2(%rbp), %rsi
    00000528: 	cmpw	%di, %cx
    0000052b: 	jl	.Ltmp1477 # Offset: 1323
    0000052d: 	cmpq	%rbx, %rsi
    00000530: 	jbe	.Ltmp1478 # Offset: 1328
    00000536: 	movzwl	(%rbx), %edx
    00000539: 	cmpw	%dx, %cx
    0000053c: 	jle	.Ltmp1479 # Offset: 1340
    0000053e: 	leaq	0x2(%rbx), %rax
    00000542: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1480:
    00000548: 	movq	%rax, %rbx
    0000054b: 	movzwl	(%rax), %edx
    0000054e: 	leaq	0x2(%rax), %rax
    00000552: 	cmpw	%dx, %cx
    00000555: 	jg	.Ltmp1480 # Offset: 1365
    00000557: 	cmpq	%rbx, %rsi
    0000055a: 	jbe	.Ltmp1478 # Offset: 1370
.Ltmp1479:
    00000560: 	movw	%dx, (%rsi)
    00000563: 	movw	%di, (%rbx)
.Ltmp1477:
    00000566: 	movq	%rsi, %rbp
    00000569: 	jmp	.Ltmp1481 # Offset: 1385
.Ltmp1428:
    0000056b: 	movq	%rbp, %rax
    0000056e: 	subq	%r13, %rax
    00000571: 	cmpq	$0x2, %rax
    00000575: 	jle	.Ltmp1482 # Offset: 1397
    00000577: 	movzwl	(%r13), %esi
    0000057c: 	movq	%rbp, %r14
    0000057f: 	movq	%r13, %rdx
    00000582: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1487:
    00000588: 	movzwl	-0x2(%r14), %r8d
    0000058d: 	leaq	-0x2(%r14), %rdi
    00000591: 	cmpw	%r8w, %si
    00000595: 	jl	.Ltmp1483 # Offset: 1429
    00000597: 	cmpq	%rdx, %rdi
    0000059a: 	jbe	.Ltmp1484 # Offset: 1434
    0000059c: 	movzwl	(%rdx), %ecx
    0000059f: 	cmpw	%si, %cx
    000005a2: 	jge	.Ltmp1485 # Offset: 1442
    000005a4: 	leaq	0x2(%rdx), %rax
    000005a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1486:
    000005b0: 	movq	%rax, %rdx
    000005b3: 	movzwl	(%rax), %ecx
    000005b6: 	leaq	0x2(%rax), %rax
    000005ba: 	cmpw	%cx, %si
    000005bd: 	jg	.Ltmp1486 # Offset: 1469
    000005bf: 	cmpq	%rdx, %rdi
    000005c2: 	jbe	.Ltmp1484 # Offset: 1474
.Ltmp1485:
    000005c4: 	movw	%cx, (%rdi)
    000005c7: 	movw	%r8w, (%rdx)
.Ltmp1483:
    000005cb: 	movq	%rdi, %r14
    000005ce: 	jmp	.Ltmp1487 # Offset: 1486
.Ltmp1484:
    000005d0: 	movq	%r14, %rsi
    000005d3: 	movq	%r13, %rdi
    000005d6: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEEEvT_S8_ # Offset: 1494
    000005db: 	movq	%rbp, %rsi
    000005de: 	movq	%r14, %rdi
    000005e1: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEEEvT_S8_ # Offset: 1505
.Ltmp1482:
    000005e6: 	movq	%r12, %rax
    000005e9: 	movq	%rbp, %r8
    000005ec: 	subq	%rbp, %rax
    000005ef: 	cmpq	$0x2, %rax
    000005f3: 	jle	.Ltmp1419 # Offset: 1523
    000005f9: 	movzwl	(%rbp), %ecx
    000005fd: 	movq	%r12, %r13
.Ltmp1492:
    00000600: 	movzwl	-0x2(%r13), %edi
    00000605: 	leaq	-0x2(%r13), %rsi
    00000609: 	cmpw	%di, %cx
    0000060c: 	jl	.Ltmp1488 # Offset: 1548
    0000060e: 	cmpq	%rbp, %rsi
    00000611: 	jbe	.Ltmp1489 # Offset: 1553
    00000613: 	movzwl	(%rbp), %edx
    00000617: 	cmpw	%cx, %dx
    0000061a: 	jge	.Ltmp1490 # Offset: 1562
    0000061c: 	leaq	0x2(%rbp), %rax
.Ltmp1491:
    00000620: 	movq	%rax, %rbp
    00000623: 	movzwl	(%rax), %edx
    00000626: 	leaq	0x2(%rax), %rax
    0000062a: 	cmpw	%dx, %cx
    0000062d: 	jg	.Ltmp1491 # Offset: 1581
    0000062f: 	cmpq	%rbp, %rsi
    00000632: 	jbe	.Ltmp1489 # Offset: 1586
.Ltmp1490:
    00000634: 	movw	%dx, (%rsi)
    00000637: 	movw	%di, (%rbp)
.Ltmp1488:
    0000063b: 	movq	%rsi, %r13
    0000063e: 	jmp	.Ltmp1492 # Offset: 1598
.Ltmp1489:
    00000640: 	movq	%r13, %rsi
    00000643: 	movq	%r8, %rdi
    00000646: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEEEvT_S8_ # Offset: 1606
    0000064b: 	popq	%rbx
    0000064c: 	movq	%r12, %rsi
    0000064f: 	popq	%rbp
    00000650: 	movq	%r13, %rdi
    00000653: 	popq	%r12
    00000655: 	popq	%r13
    00000657: 	popq	%r14
    00000659: 	jmp	.LBB0212 # Offset: 1625
.Ltmp1478:
    0000065e: 	movq	%rbp, %rsi
    00000661: 	movq	%r8, %rdi
    00000664: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEEEvT_S8_ # Offset: 1636
    00000669: 	movq	%r13, %rsi
    0000066c: 	movq	%rbp, %rdi
    0000066f: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEEEvT_S8_ # Offset: 1647
    00000674: 	jmp	.Ltmp1476 # Offset: 1652
.Ltmp1466:
    00000679: 	movq	%r13, %rsi
    0000067c: 	movq	%r8, %rdi
    0000067f: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEEEvT_S8_ # Offset: 1663
    00000684: 	movq	%rbp, %rsi
    00000687: 	movq	%r13, %rdi
    0000068a: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEEEvT_S8_ # Offset: 1674
    0000068f: 	jmp	.Ltmp1411 # Offset: 1679
.Ltmp1455:
    00000694: 	movq	%r14, %rsi
    00000697: 	movq	%r8, %rdi
    0000069a: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEEEvT_S8_ # Offset: 1690
    0000069f: 	movq	%r13, %rsi
    000006a2: 	movq	%r14, %rdi
    000006a5: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEEEvT_S8_ # Offset: 1701
    000006aa: 	jmp	.Ltmp1453 # Offset: 1706
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEEEvT_S8_"

Binary Function "_ZNSt6vectorIdSaIdEE17_M_default_appendEm" after disassembly {
  Number      : 214
  State       : disassembled
  Address     : 0xe670
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0xe670
  Section     : .text
  Orc Section : .local.text._ZNSt6vectorIdSaIdEE17_M_default_appendEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0213:
    00000000: 	endbr64
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp1493 # Offset: 7
    0000000d: 	movabsq	$0xfffffffffffffff, %rax
    00000017: 	pushq	%r15
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rdi, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	movq	%rsi, %rbx
    00000027: 	subq	$0x18, %rsp
    0000002b: 	movq	0x8(%rdi), %rdx
    0000002f: 	movq	(%rdi), %r8
    00000032: 	movq	%rdx, %rbp
    00000035: 	subq	%r8, %rbp
    00000038: 	movq	%rbp, %r13
    0000003b: 	sarq	$0x3, %r13
    0000003f: 	subq	%r13, %rax
    00000042: 	movq	%rax, %rcx
    00000045: 	movq	0x10(%rdi), %rax
    00000049: 	subq	%rdx, %rax
    0000004c: 	sarq	$0x3, %rax
    00000050: 	cmpq	%rax, %rsi
    00000053: 	jbe	.Ltmp1494 # Offset: 83
    00000059: 	cmpq	%rsi, %rcx
    0000005c: 	jb	.Ltmp1495 # Offset: 92
    00000062: 	cmpq	%r13, %rsi
    00000065: 	movq	%r13, %rax
    00000068: 	cmovaeq	%rsi, %rax
    0000006c: 	addq	%r13, %rax
    0000006f: 	jb	.Ltmp1496 # Offset: 111
    00000075: 	testq	%rax, %rax
    00000078: 	jne	.Ltmp1497 # Offset: 120
    0000007e: 	movq	%rbp, %r9
    00000081: 	xorl	%r14d, %r14d
    00000084: 	xorl	%r15d, %r15d
.Ltmp1504:
    00000087: 	addq	%r15, %rbp
    0000008a: 	movq	%rbx, %rdx
    0000008d: 	movq	$0x0, (%rbp)
    00000095: 	subq	$0x1, %rdx
    00000099: 	je	.Ltmp1498 # Offset: 153
    0000009b: 	leaq	0x8(%rbp), %rdi
    0000009f: 	shlq	$0x3, %rdx
    000000a3: 	xorl	%esi, %esi
    000000a5: 	movq	%r9, 0x8(%rsp)
    000000aa: 	movq	%r8, (%rsp)
    000000ae: 	callq	memset@PLT # Offset: 174
    000000b3: 	movq	(%rsp), %r8
    000000b7: 	movq	0x8(%rsp), %r9
.Ltmp1498:
    000000bc: 	testq	%r9, %r9
    000000bf: 	jg	.Ltmp1499 # Offset: 191
    000000c5: 	testq	%r8, %r8
    000000c8: 	jne	.Ltmp1500 # Offset: 200
.Ltmp1502:
    000000ce: 	addq	%r13, %rbx
    000000d1: 	movq	%r15, %xmm0
    000000d6: 	movq	%r14, 0x10(%r12)
    000000db: 	leaq	(%r15,%rbx,8), %rax
    000000df: 	movq	%rax, %xmm1
    000000e4: 	punpcklqdq	%xmm1, %xmm0
    000000e8: 	movups	%xmm0, (%r12)
    000000ed: 	addq	$0x18, %rsp
    000000f1: 	popq	%rbx
    000000f2: 	popq	%rbp
    000000f3: 	popq	%r12
    000000f5: 	popq	%r13
    000000f7: 	popq	%r14
    000000f9: 	popq	%r15
    000000fb: 	retq # Offset: 251
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp1494:
    00000100: 	movq	$0x0, (%rdx)
    00000107: 	leaq	0x8(%rdx), %rcx
    0000010b: 	subq	$0x1, %rbx
    0000010f: 	je	.Ltmp1501 # Offset: 271
    00000111: 	leaq	(%rcx,%rbx,8), %rax
    00000115: 	movq	%rcx, %rdi
    00000118: 	xorl	%esi, %esi
    0000011a: 	subq	%rdx, %rax
    0000011d: 	leaq	-0x8(%rax), %rbx
    00000121: 	movq	%rbx, %rdx
    00000124: 	callq	memset@PLT # Offset: 292
    00000129: 	movq	%rax, %rcx
    0000012c: 	addq	%rbx, %rcx
.Ltmp1501:
    0000012f: 	movq	%rcx, 0x8(%r12)
    00000134: 	addq	$0x18, %rsp
    00000138: 	popq	%rbx
    00000139: 	popq	%rbp
    0000013a: 	popq	%r12
    0000013c: 	popq	%r13
    0000013e: 	popq	%r14
    00000140: 	popq	%r15
    00000142: 	retq # Offset: 322
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1493:
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp1499:
    00000150: 	movq	%r8, %rsi
    00000153: 	movq	%r9, %rdx
    00000156: 	movq	%r15, %rdi
    00000159: 	movq	%r8, (%rsp)
    0000015d: 	callq	memmove@PLT # Offset: 349
    00000162: 	movq	0x10(%r12), %rsi
    00000167: 	movq	(%rsp), %r8
    0000016b: 	subq	%r8, %rsi
.Ltmp1503:
    0000016e: 	movq	%r8, %rdi
    00000171: 	callq	_ZdlPvm@PLT # Offset: 369
    00000176: 	jmp	.Ltmp1502 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1500:
    00000180: 	movq	0x10(%r12), %rsi
    00000185: 	subq	%r8, %rsi
    00000188: 	jmp	.Ltmp1503 # Offset: 392
.Ltmp1497:
    0000018a: 	movabsq	$0xfffffffffffffff, %rdx
    00000194: 	cmpq	%rdx, %rax
    00000197: 	cmovaq	%rdx, %rax
    0000019b: 	leaq	(,%rax,8), %r14
.Ltmp1505:
    000001a3: 	movq	%r14, %rdi
    000001a6: 	callq	_Znwm@PLT # Offset: 422
    000001ab: 	movq	(%r12), %r8
    000001af: 	movq	0x8(%r12), %r9
    000001b4: 	movq	%rax, %r15
    000001b7: 	addq	%rax, %r14
    000001ba: 	subq	%r8, %r9
    000001bd: 	jmp	.Ltmp1504 # Offset: 445
.Ltmp1496:
    000001c2: 	movabsq	$0x7ffffffffffffff8, %r14
    000001cc: 	jmp	.Ltmp1505 # Offset: 460
.Ltmp1495:
    000001ce: 	leaq	DATAat0x24197(%rip), %rdi
    000001d5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 469
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt6vectorIdSaIdEE17_M_default_appendEm"

Binary Function "_ZN9benchmark9quicksortIPdEEvT_S2_" after disassembly {
  Number      : 215
  State       : disassembled
  Address     : 0xe850
  Size        : 0x4a0
  MaxSize     : 0x4a0
  Offset      : 0xe850
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIPdEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0214:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rax
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rax
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rsi, 0x18(%rsp)
    0000001d: 	cmpq	$0x8, %rax
    00000021: 	jle	.Ltmp1506 # Offset: 33
.Ltmp1518:
    00000023: 	movsd	(%rdi), %xmm2
    00000027: 	movq	0x18(%rsp), %r13
    0000002c: 	movq	%rdi, %rax
.Ltmp1511:
    0000002f: 	movsd	-0x8(%r13), %xmm0
    00000035: 	leaq	-0x8(%r13), %rdx
    00000039: 	comisd	%xmm2, %xmm0
    0000003d: 	ja	.Ltmp1507 # Offset: 61
    0000003f: 	cmpq	%rdx, %rax
    00000042: 	jae	.Ltmp1508 # Offset: 66
    00000044: 	movsd	(%rax), %xmm1
    00000048: 	comisd	%xmm1, %xmm2
    0000004c: 	jbe	.Ltmp1509 # Offset: 76
.Ltmp1510:
    0000004e: 	movsd	0x8(%rax), %xmm1
    00000053: 	addq	$0x8, %rax
    00000057: 	comisd	%xmm1, %xmm2
    0000005b: 	ja	.Ltmp1510 # Offset: 91
    0000005d: 	cmpq	%rax, %rdx
    00000060: 	jbe	.Ltmp1508 # Offset: 96
.Ltmp1509:
    00000062: 	movsd	%xmm1, (%rdx)
    00000066: 	movsd	%xmm0, (%rax)
.Ltmp1507:
    0000006a: 	movq	%rdx, %r13
    0000006d: 	jmp	.Ltmp1511 # Offset: 109
.Ltmp1506:
    0000006f: 	addq	$0x28, %rsp
    00000073: 	popq	%rbx
    00000074: 	popq	%rbp
    00000075: 	popq	%r12
    00000077: 	popq	%r13
    00000079: 	popq	%r14
    0000007b: 	popq	%r15
    0000007d: 	retq # Offset: 125
.Ltmp1508:
    0000007e: 	movq	%r13, %rax
    00000081: 	subq	%rdi, %rax
    00000084: 	cmpq	$0x8, %rax
    00000088: 	jle	.Ltmp1512 # Offset: 136
.Ltmp1568:
    0000008a: 	movsd	(%rdi), %xmm2
    0000008e: 	movq	%r13, %r14
    00000091: 	movq	%rdi, %rax
.Ltmp1517:
    00000094: 	comisd	%xmm2, %xmm0
    00000098: 	leaq	-0x8(%r14), %rdx
    0000009c: 	ja	.Ltmp1513 # Offset: 156
    0000009e: 	cmpq	%rax, %rdx
    000000a1: 	jbe	.Ltmp1514 # Offset: 161
    000000a3: 	movsd	(%rax), %xmm1
    000000a7: 	comisd	%xmm1, %xmm2
    000000ab: 	jbe	.Ltmp1515 # Offset: 171
.Ltmp1516:
    000000ad: 	movsd	0x8(%rax), %xmm1
    000000b2: 	addq	$0x8, %rax
    000000b6: 	comisd	%xmm1, %xmm2
    000000ba: 	ja	.Ltmp1516 # Offset: 186
    000000bc: 	cmpq	%rax, %rdx
    000000bf: 	jbe	.Ltmp1514 # Offset: 191
.Ltmp1515:
    000000c1: 	movsd	%xmm1, (%rdx)
    000000c5: 	movsd	%xmm0, (%rax)
.Ltmp1513:
    000000c9: 	movsd	-0x8(%rdx), %xmm0
    000000ce: 	movq	%rdx, %r14
    000000d1: 	jmp	.Ltmp1517 # Offset: 209
.Ltmp1512:
    000000d3: 	movq	0x18(%rsp), %rax
    000000d8: 	subq	%r13, %rax
    000000db: 	cmpq	$0x8, %rax
    000000df: 	jle	.Ltmp1506 # Offset: 223
    000000e1: 	movq	%r13, %rdi
    000000e4: 	jmp	.Ltmp1518 # Offset: 228
.Ltmp1514:
    000000e9: 	movq	%r14, %rax
    000000ec: 	subq	%rdi, %rax
    000000ef: 	cmpq	$0x8, %rax
    000000f3: 	jle	.Ltmp1519 # Offset: 243
.Ltmp1567:
    000000f9: 	movsd	(%rdi), %xmm2
    000000fd: 	movq	%r14, %r15
    00000100: 	movq	%rdi, %rax
.Ltmp1524:
    00000103: 	comisd	%xmm2, %xmm0
    00000107: 	leaq	-0x8(%r15), %rdx
    0000010b: 	ja	.Ltmp1520 # Offset: 267
    0000010d: 	cmpq	%rax, %rdx
    00000110: 	jbe	.Ltmp1521 # Offset: 272
    00000112: 	movsd	(%rax), %xmm1
    00000116: 	comisd	%xmm1, %xmm2
    0000011a: 	jbe	.Ltmp1522 # Offset: 282
.Ltmp1523:
    0000011c: 	movsd	0x8(%rax), %xmm1
    00000121: 	addq	$0x8, %rax
    00000125: 	comisd	%xmm1, %xmm2
    00000129: 	ja	.Ltmp1523 # Offset: 297
    0000012b: 	cmpq	%rax, %rdx
    0000012e: 	jbe	.Ltmp1521 # Offset: 302
.Ltmp1522:
    00000130: 	movsd	%xmm1, (%rdx)
    00000134: 	movsd	%xmm0, (%rax)
.Ltmp1520:
    00000138: 	movsd	-0x8(%rdx), %xmm0
    0000013d: 	movq	%rdx, %r15
    00000140: 	jmp	.Ltmp1524 # Offset: 320
.Ltmp1521:
    00000142: 	movq	%r15, %rax
    00000145: 	subq	%rdi, %rax
    00000148: 	cmpq	$0x8, %rax
    0000014c: 	jle	.Ltmp1525 # Offset: 332
.Ltmp1566:
    00000152: 	movsd	(%rdi), %xmm2
    00000156: 	movq	%r15, %rbx
    00000159: 	movq	%rdi, %rax
.Ltmp1530:
    0000015c: 	comisd	%xmm2, %xmm0
    00000160: 	leaq	-0x8(%rbx), %rcx
    00000164: 	ja	.Ltmp1526 # Offset: 356
    00000166: 	cmpq	%rax, %rcx
    00000169: 	jbe	.Ltmp1527 # Offset: 361
    0000016b: 	movsd	(%rax), %xmm1
    0000016f: 	comisd	%xmm1, %xmm2
    00000173: 	jbe	.Ltmp1528 # Offset: 371
.Ltmp1529:
    00000175: 	movsd	0x8(%rax), %xmm1
    0000017a: 	addq	$0x8, %rax
    0000017e: 	comisd	%xmm1, %xmm2
    00000182: 	ja	.Ltmp1529 # Offset: 386
    00000184: 	cmpq	%rax, %rcx
    00000187: 	jbe	.Ltmp1527 # Offset: 391
.Ltmp1528:
    00000189: 	movsd	%xmm1, (%rcx)
    0000018d: 	movsd	%xmm0, (%rax)
.Ltmp1526:
    00000191: 	movsd	-0x8(%rcx), %xmm0
    00000196: 	movq	%rcx, %rbx
    00000199: 	jmp	.Ltmp1530 # Offset: 409
.Ltmp1527:
    0000019b: 	movq	%rbx, %rax
    0000019e: 	subq	%rdi, %rax
    000001a1: 	cmpq	$0x8, %rax
    000001a5: 	jle	.Ltmp1531 # Offset: 421
.Ltmp1565:
    000001ab: 	movsd	(%rdi), %xmm2
    000001af: 	movq	%rbx, %rcx
    000001b2: 	movq	%rdi, %rax
.Ltmp1536:
    000001b5: 	comisd	%xmm2, %xmm0
    000001b9: 	leaq	-0x8(%rcx), %rsi
    000001bd: 	ja	.Ltmp1532 # Offset: 445
    000001bf: 	cmpq	%rax, %rsi
    000001c2: 	jbe	.Ltmp1533 # Offset: 450
    000001c4: 	movsd	(%rax), %xmm1
    000001c8: 	comisd	%xmm1, %xmm2
    000001cc: 	jbe	.Ltmp1534 # Offset: 460
.Ltmp1535:
    000001ce: 	movsd	0x8(%rax), %xmm1
    000001d3: 	addq	$0x8, %rax
    000001d7: 	comisd	%xmm1, %xmm2
    000001db: 	ja	.Ltmp1535 # Offset: 475
    000001dd: 	cmpq	%rax, %rsi
    000001e0: 	jbe	.Ltmp1533 # Offset: 480
.Ltmp1534:
    000001e2: 	movsd	%xmm1, (%rsi)
    000001e6: 	movsd	%xmm0, (%rax)
.Ltmp1532:
    000001ea: 	movsd	-0x8(%rsi), %xmm0
    000001ef: 	movq	%rsi, %rcx
    000001f2: 	jmp	.Ltmp1536 # Offset: 498
.Ltmp1533:
    000001f4: 	movq	%rcx, %rax
    000001f7: 	subq	%rdi, %rax
    000001fa: 	cmpq	$0x8, %rax
    000001fe: 	jle	.Ltmp1537 # Offset: 510
.Ltmp1564:
    00000204: 	movsd	(%rdi), %xmm2
    00000208: 	movq	%rcx, %r12
    0000020b: 	movq	%rdi, %rax
.Ltmp1542:
    0000020e: 	comisd	%xmm2, %xmm0
    00000212: 	leaq	-0x8(%r12), %rsi
    00000217: 	ja	.Ltmp1538 # Offset: 535
    00000219: 	cmpq	%rax, %rsi
    0000021c: 	jbe	.Ltmp1539 # Offset: 540
    0000021e: 	movsd	(%rax), %xmm1
    00000222: 	comisd	%xmm1, %xmm2
    00000226: 	jbe	.Ltmp1540 # Offset: 550
    00000228: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1541:
    00000230: 	movsd	0x8(%rax), %xmm1
    00000235: 	addq	$0x8, %rax
    00000239: 	comisd	%xmm1, %xmm2
    0000023d: 	ja	.Ltmp1541 # Offset: 573
    0000023f: 	cmpq	%rax, %rsi
    00000242: 	jbe	.Ltmp1539 # Offset: 578
.Ltmp1540:
    00000244: 	movsd	%xmm1, (%rsi)
    00000248: 	movsd	%xmm0, (%rax)
.Ltmp1538:
    0000024c: 	movsd	-0x8(%rsi), %xmm0
    00000251: 	movq	%rsi, %r12
    00000254: 	jmp	.Ltmp1542 # Offset: 596
.Ltmp1539:
    00000256: 	movq	%r12, %rax
    00000259: 	subq	%rdi, %rax
    0000025c: 	cmpq	$0x8, %rax
    00000260: 	jle	.Ltmp1543 # Offset: 608
.Ltmp1563:
    00000266: 	movsd	(%rdi), %xmm2
    0000026a: 	movq	%r12, %r8
    0000026d: 	movq	%rdi, %rax
.Ltmp1561:
    00000270: 	comisd	%xmm2, %xmm0
    00000274: 	leaq	-0x8(%r8), %rsi
    00000278: 	ja	.Ltmp1544 # Offset: 632
    0000027e: 	cmpq	%rax, %rsi
    00000281: 	jbe	.Ltmp1545 # Offset: 641
    00000283: 	movsd	(%rax), %xmm1
    00000287: 	comisd	%xmm1, %xmm2
    0000028b: 	jbe	.Ltmp1546 # Offset: 651
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp1547:
    00000298: 	movsd	0x8(%rax), %xmm1
    0000029d: 	addq	$0x8, %rax
    000002a1: 	comisd	%xmm1, %xmm2
    000002a5: 	ja	.Ltmp1547 # Offset: 677
    000002a7: 	cmpq	%rax, %rsi
    000002aa: 	ja	.Ltmp1546 # Offset: 682
.Ltmp1545:
    000002b0: 	movq	%r8, %rax
    000002b3: 	subq	%rdi, %rax
    000002b6: 	cmpq	$0x8, %rax
    000002ba: 	jle	.Ltmp1548 # Offset: 698
.Ltmp1560:
    000002c0: 	movsd	(%rdi), %xmm1
    000002c4: 	movq	%r8, %rbp
    000002c7: 	movq	%rdi, %rax
    000002ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1559:
    000002d0: 	comisd	%xmm1, %xmm0
    000002d4: 	leaq	-0x8(%rbp), %rsi
    000002d8: 	ja	.Ltmp1549 # Offset: 728
    000002de: 	cmpq	%rax, %rsi
    000002e1: 	jbe	.Ltmp1550 # Offset: 737
    000002e3: 	movsd	(%rax), %xmm2
    000002e7: 	comisd	%xmm2, %xmm1
    000002eb: 	jbe	.Ltmp1551 # Offset: 747
    000002f1: 	nopl	(%rax) # Size: 7
.Ltmp1552:
    000002f8: 	movsd	0x8(%rax), %xmm2
    000002fd: 	addq	$0x8, %rax
    00000301: 	comisd	%xmm2, %xmm1
    00000305: 	ja	.Ltmp1552 # Offset: 773
    00000307: 	cmpq	%rax, %rsi
    0000030a: 	ja	.Ltmp1551 # Offset: 778
.Ltmp1550:
    00000310: 	movq	%rbp, %rax
    00000313: 	subq	%rdi, %rax
    00000316: 	cmpq	$0x8, %rax
    0000031a: 	jle	.Ltmp1553 # Offset: 794
.Ltmp1558:
    00000320: 	movsd	(%rdi), %xmm1
    00000324: 	movq	%rbp, %rsi
    00000327: 	movq	%rdi, %rax
    0000032a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1562:
    00000330: 	movsd	-0x8(%rsi), %xmm2
    00000335: 	leaq	-0x8(%rsi), %r9
    00000339: 	comisd	%xmm1, %xmm2
    0000033d: 	ja	.Ltmp1554 # Offset: 829
    00000343: 	cmpq	%rax, %r9
    00000346: 	jbe	.Ltmp1555 # Offset: 838
    00000348: 	movsd	(%rax), %xmm0
    0000034c: 	comisd	%xmm0, %xmm1
    00000350: 	jbe	.Ltmp1556 # Offset: 848
    00000356: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1557:
    00000360: 	movsd	0x8(%rax), %xmm0
    00000365: 	addq	$0x8, %rax
    00000369: 	comisd	%xmm0, %xmm1
    0000036d: 	ja	.Ltmp1557 # Offset: 877
    0000036f: 	cmpq	%rax, %r9
    00000372: 	ja	.Ltmp1556 # Offset: 882
.Ltmp1555:
    00000374: 	movq	%r8, 0x10(%rsp)
    00000379: 	movq	%rcx, 0x8(%rsp)
    0000037e: 	movq	%rsi, (%rsp)
    00000382: 	callq	_ZN9benchmark9quicksortIPdEEvT_S2_ # Offset: 898
    00000387: 	movq	(%rsp), %rsi
    0000038b: 	movq	%rbp, %rax
    0000038e: 	movq	0x8(%rsp), %rcx
    00000393: 	movq	0x10(%rsp), %r8
    00000398: 	subq	%rsi, %rax
    0000039b: 	cmpq	$0x8, %rax
    0000039f: 	jle	.Ltmp1553 # Offset: 927
    000003a1: 	movq	%rsi, %rdi
    000003a4: 	jmp	.Ltmp1558 # Offset: 932
.Ltmp1551:
    000003a9: 	movsd	%xmm2, (%rsi)
    000003ad: 	movsd	%xmm0, (%rax)
.Ltmp1549:
    000003b1: 	movsd	-0x8(%rsi), %xmm0
    000003b6: 	movq	%rsi, %rbp
    000003b9: 	jmp	.Ltmp1559 # Offset: 953
.Ltmp1553:
    000003be: 	movq	%r8, %rax
    000003c1: 	subq	%rbp, %rax
    000003c4: 	cmpq	$0x8, %rax
    000003c8: 	jle	.Ltmp1548 # Offset: 968
    000003ca: 	movsd	-0x8(%r8), %xmm0
    000003d0: 	movq	%rbp, %rdi
    000003d3: 	jmp	.Ltmp1560 # Offset: 979
.Ltmp1546:
    000003d8: 	movsd	%xmm1, (%rsi)
    000003dc: 	movsd	%xmm0, (%rax)
.Ltmp1544:
    000003e0: 	movsd	-0x8(%rsi), %xmm0
    000003e5: 	movq	%rsi, %r8
    000003e8: 	jmp	.Ltmp1561 # Offset: 1000
    000003ed: 	nopl	(%rax) # Size: 3
.Ltmp1556:
    000003f0: 	movsd	%xmm0, (%r9)
    000003f5: 	movsd	%xmm2, (%rax)
.Ltmp1554:
    000003f9: 	movq	%r9, %rsi
    000003fc: 	jmp	.Ltmp1562 # Offset: 1020
.Ltmp1548:
    00000401: 	movq	%r12, %rax
    00000404: 	subq	%r8, %rax
    00000407: 	cmpq	$0x8, %rax
    0000040b: 	jle	.Ltmp1543 # Offset: 1035
    0000040d: 	movsd	-0x8(%r12), %xmm0
    00000414: 	movq	%r8, %rdi
    00000417: 	jmp	.Ltmp1563 # Offset: 1047
.Ltmp1543:
    0000041c: 	movq	%rcx, %rax
    0000041f: 	subq	%r12, %rax
    00000422: 	cmpq	$0x8, %rax
    00000426: 	jle	.Ltmp1537 # Offset: 1062
    00000428: 	movsd	-0x8(%rcx), %xmm0
    0000042d: 	movq	%r12, %rdi
    00000430: 	jmp	.Ltmp1564 # Offset: 1072
.Ltmp1537:
    00000435: 	movq	%rbx, %rax
    00000438: 	subq	%rcx, %rax
    0000043b: 	cmpq	$0x8, %rax
    0000043f: 	jle	.Ltmp1531 # Offset: 1087
    00000441: 	movsd	-0x8(%rbx), %xmm0
    00000446: 	movq	%rcx, %rdi
    00000449: 	jmp	.Ltmp1565 # Offset: 1097
.Ltmp1531:
    0000044e: 	movq	%r15, %rax
    00000451: 	subq	%rbx, %rax
    00000454: 	cmpq	$0x8, %rax
    00000458: 	jle	.Ltmp1525 # Offset: 1112
    0000045a: 	movsd	-0x8(%r15), %xmm0
    00000460: 	movq	%rbx, %rdi
    00000463: 	jmp	.Ltmp1566 # Offset: 1123
.Ltmp1525:
    00000468: 	movq	%r14, %rax
    0000046b: 	subq	%r15, %rax
    0000046e: 	cmpq	$0x8, %rax
    00000472: 	jle	.Ltmp1519 # Offset: 1138
    00000474: 	movsd	-0x8(%r14), %xmm0
    0000047a: 	movq	%r15, %rdi
    0000047d: 	jmp	.Ltmp1567 # Offset: 1149
.Ltmp1519:
    00000482: 	movq	%r13, %rax
    00000485: 	subq	%r14, %rax
    00000488: 	cmpq	$0x8, %rax
    0000048c: 	jle	.Ltmp1512 # Offset: 1164
    00000492: 	movsd	-0x8(%r13), %xmm0
    00000498: 	movq	%r14, %rdi
    0000049b: 	jmp	.Ltmp1568 # Offset: 1179
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIPdEEvT_S2_"

Binary Function "_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_" after disassembly {
  Number      : 216
  State       : disassembled
  Address     : 0xecf0
  Size        : 0x73f
  MaxSize     : 0x740
  Offset      : 0xecf0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0215:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	cmpq	$0x8, %rax
    0000000e: 	jle	.Ltmp1569 # Offset: 14
    00000014: 	pushq	%r14
    00000016: 	movq	%rdi, %rdx
    00000019: 	pushq	%r13
    0000001b: 	pushq	%r12
    0000001d: 	movq	%rsi, %r12
    00000020: 	pushq	%rbp
    00000021: 	movq	%rsi, %rbp
    00000024: 	pushq	%rbx
    00000025: 	movsd	(%rdi), %xmm1
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp1574:
    00000030: 	movsd	-0x8(%rbp), %xmm2
    00000035: 	leaq	-0x8(%rbp), %rcx
    00000039: 	comisd	%xmm1, %xmm2
    0000003d: 	ja	.Ltmp1570 # Offset: 61
    0000003f: 	cmpq	%rdx, %rcx
    00000042: 	jbe	.Ltmp1571 # Offset: 66
    00000044: 	movsd	(%rdx), %xmm0
    00000048: 	leaq	0x8(%rdx), %rax
    0000004c: 	comisd	%xmm0, %xmm1
    00000050: 	jbe	.Ltmp1572 # Offset: 80
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1573:
    00000058: 	movq	%rax, %rdx
    0000005b: 	movsd	(%rax), %xmm0
    0000005f: 	leaq	0x8(%rax), %rax
    00000063: 	comisd	%xmm0, %xmm1
    00000067: 	ja	.Ltmp1573 # Offset: 103
    00000069: 	cmpq	%rdx, %rcx
    0000006c: 	jbe	.Ltmp1571 # Offset: 108
.Ltmp1572:
    0000006e: 	movsd	%xmm0, (%rcx)
    00000072: 	movsd	%xmm2, (%rdx)
.Ltmp1570:
    00000076: 	movq	%rcx, %rbp
    00000079: 	jmp	.Ltmp1574 # Offset: 121
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1571:
    00000080: 	movq	%rbp, %rax
    00000083: 	subq	%rdi, %rax
    00000086: 	cmpq	$0x8, %rax
    0000008a: 	jle	.Ltmp1575 # Offset: 138
    0000008c: 	movsd	(%rdi), %xmm1
    00000090: 	movq	%rbp, %r13
    00000093: 	movq	%rdi, %rdx
    00000096: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1580:
    000000a0: 	comisd	%xmm1, %xmm2
    000000a4: 	leaq	-0x8(%r13), %rcx
    000000a8: 	ja	.Ltmp1576 # Offset: 168
    000000aa: 	cmpq	%rdx, %rcx
    000000ad: 	jbe	.Ltmp1577 # Offset: 173
    000000af: 	movsd	(%rdx), %xmm0
    000000b3: 	leaq	0x8(%rdx), %rax
    000000b7: 	comisd	%xmm0, %xmm1
    000000bb: 	jbe	.Ltmp1578 # Offset: 187
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp1579:
    000000c0: 	movq	%rax, %rdx
    000000c3: 	movsd	(%rax), %xmm0
    000000c7: 	leaq	0x8(%rax), %rax
    000000cb: 	comisd	%xmm0, %xmm1
    000000cf: 	ja	.Ltmp1579 # Offset: 207
    000000d1: 	cmpq	%rdx, %rcx
    000000d4: 	jbe	.Ltmp1577 # Offset: 212
.Ltmp1578:
    000000d6: 	movsd	%xmm0, (%rcx)
    000000da: 	movsd	%xmm2, (%rdx)
.Ltmp1576:
    000000de: 	movsd	-0x8(%rcx), %xmm2
    000000e3: 	movq	%rcx, %r13
    000000e6: 	jmp	.Ltmp1580 # Offset: 230
.Ltmp1577:
    000000e8: 	movq	%r13, %rax
    000000eb: 	subq	%rdi, %rax
    000000ee: 	cmpq	$0x8, %rax
    000000f2: 	jg	.Ltmp1581 # Offset: 242
.Ltmp1617:
    000000f8: 	movq	%rbp, %rax
    000000fb: 	subq	%r13, %rax
    000000fe: 	cmpq	$0x8, %rax
    00000102: 	jg	.Ltmp1582 # Offset: 258
.Ltmp1575:
    00000108: 	movq	%r12, %rax
    0000010b: 	subq	%rbp, %rax
    0000010e: 	cmpq	$0x8, %rax
    00000112: 	jle	.Ltmp1583 # Offset: 274
    00000114: 	movsd	(%rbp), %xmm1
    00000119: 	movq	%r12, %r13
    0000011c: 	movq	%rbp, %rdx
    0000011f: 	nop # Size: 1
.Ltmp1588:
    00000120: 	movsd	-0x8(%r13), %xmm2
    00000126: 	leaq	-0x8(%r13), %rcx
    0000012a: 	comisd	%xmm1, %xmm2
    0000012e: 	ja	.Ltmp1584 # Offset: 302
    00000130: 	cmpq	%rdx, %rcx
    00000133: 	jbe	.Ltmp1585 # Offset: 307
    00000135: 	movsd	(%rdx), %xmm0
    00000139: 	leaq	0x8(%rdx), %rax
    0000013d: 	comisd	%xmm0, %xmm1
    00000141: 	jbe	.Ltmp1586 # Offset: 321
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1587:
    00000148: 	movq	%rax, %rdx
    0000014b: 	movsd	(%rax), %xmm0
    0000014f: 	leaq	0x8(%rax), %rax
    00000153: 	comisd	%xmm0, %xmm1
    00000157: 	ja	.Ltmp1587 # Offset: 343
    00000159: 	cmpq	%rdx, %rcx
    0000015c: 	jbe	.Ltmp1585 # Offset: 348
.Ltmp1586:
    0000015e: 	movsd	%xmm0, (%rcx)
    00000162: 	movsd	%xmm2, (%rdx)
.Ltmp1584:
    00000166: 	movq	%rcx, %r13
    00000169: 	jmp	.Ltmp1588 # Offset: 361
.Ltmp1585:
    0000016b: 	movq	%r13, %rax
    0000016e: 	subq	%rbp, %rax
    00000171: 	cmpq	$0x8, %rax
    00000175: 	jg	.Ltmp1589 # Offset: 373
.Ltmp1640:
    0000017b: 	movq	%r12, %rax
    0000017e: 	subq	%r13, %rax
    00000181: 	cmpq	$0x8, %rax
    00000185: 	jg	.Ltmp1590 # Offset: 389
.Ltmp1583:
    00000187: 	popq	%rbx
    00000188: 	popq	%rbp
    00000189: 	popq	%r12
    0000018b: 	popq	%r13
    0000018d: 	popq	%r14
    0000018f: 	retq # Offset: 399
.Ltmp1569:
    00000190: 	retq # Offset: 400
.Ltmp1590:
    00000191: 	movsd	(%r13), %xmm1
    00000197: 	movq	%r12, %rbp
    0000019a: 	movq	%r13, %rdx
    0000019d: 	nopl	(%rax) # Size: 3
.Ltmp1595:
    000001a0: 	movsd	-0x8(%rbp), %xmm2
    000001a5: 	leaq	-0x8(%rbp), %rcx
    000001a9: 	comisd	%xmm1, %xmm2
    000001ad: 	ja	.Ltmp1591 # Offset: 429
    000001af: 	cmpq	%rdx, %rcx
    000001b2: 	jbe	.Ltmp1592 # Offset: 434
    000001b8: 	movsd	(%rdx), %xmm0
    000001bc: 	leaq	0x8(%rdx), %rax
    000001c0: 	comisd	%xmm0, %xmm1
    000001c4: 	jbe	.Ltmp1593 # Offset: 452
    000001c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1594:
    000001d0: 	movq	%rax, %rdx
    000001d3: 	movsd	(%rax), %xmm0
    000001d7: 	leaq	0x8(%rax), %rax
    000001db: 	comisd	%xmm0, %xmm1
    000001df: 	ja	.Ltmp1594 # Offset: 479
    000001e1: 	cmpq	%rdx, %rcx
    000001e4: 	jbe	.Ltmp1592 # Offset: 484
.Ltmp1593:
    000001ea: 	movsd	%xmm0, (%rcx)
    000001ee: 	movsd	%xmm2, (%rdx)
.Ltmp1591:
    000001f2: 	movq	%rcx, %rbp
    000001f5: 	jmp	.Ltmp1595 # Offset: 501
.Ltmp1589:
    000001f7: 	movsd	(%rbp), %xmm1
    000001fc: 	movq	%r13, %rbx
    000001ff: 	movq	%rbp, %rdx
    00000202: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1600:
    00000208: 	comisd	%xmm1, %xmm2
    0000020c: 	leaq	-0x8(%rbx), %rcx
    00000210: 	ja	.Ltmp1596 # Offset: 528
    00000212: 	cmpq	%rdx, %rcx
    00000215: 	jbe	.Ltmp1597 # Offset: 533
    0000021b: 	movsd	(%rdx), %xmm0
    0000021f: 	leaq	0x8(%rdx), %rax
    00000223: 	comisd	%xmm0, %xmm1
    00000227: 	jbe	.Ltmp1598 # Offset: 551
    00000229: 	nopl	(%rax) # Size: 7
.Ltmp1599:
    00000230: 	movq	%rax, %rdx
    00000233: 	movsd	(%rax), %xmm0
    00000237: 	leaq	0x8(%rax), %rax
    0000023b: 	comisd	%xmm0, %xmm1
    0000023f: 	ja	.Ltmp1599 # Offset: 575
    00000241: 	cmpq	%rdx, %rcx
    00000244: 	jbe	.Ltmp1597 # Offset: 580
.Ltmp1598:
    0000024a: 	movsd	%xmm0, (%rcx)
    0000024e: 	movsd	%xmm2, (%rdx)
.Ltmp1596:
    00000252: 	movsd	-0x8(%rcx), %xmm2
    00000257: 	movq	%rcx, %rbx
    0000025a: 	jmp	.Ltmp1600 # Offset: 602
.Ltmp1582:
    0000025c: 	movsd	(%r13), %xmm1
    00000262: 	movq	%rbp, %rbx
    00000265: 	movq	%r13, %rdx
    00000268: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1605:
    00000270: 	movsd	-0x8(%rbx), %xmm2
    00000275: 	leaq	-0x8(%rbx), %rcx
    00000279: 	comisd	%xmm1, %xmm2
    0000027d: 	ja	.Ltmp1601 # Offset: 637
    0000027f: 	cmpq	%rdx, %rcx
    00000282: 	jbe	.Ltmp1602 # Offset: 642
    00000288: 	movsd	(%rdx), %xmm0
    0000028c: 	leaq	0x8(%rdx), %rax
    00000290: 	comisd	%xmm0, %xmm1
    00000294: 	jbe	.Ltmp1603 # Offset: 660
    00000296: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1604:
    000002a0: 	movq	%rax, %rdx
    000002a3: 	movsd	(%rax), %xmm0
    000002a7: 	leaq	0x8(%rax), %rax
    000002ab: 	comisd	%xmm0, %xmm1
    000002af: 	ja	.Ltmp1604 # Offset: 687
    000002b1: 	cmpq	%rdx, %rcx
    000002b4: 	jbe	.Ltmp1602 # Offset: 692
.Ltmp1603:
    000002ba: 	movsd	%xmm0, (%rcx)
    000002be: 	movsd	%xmm2, (%rdx)
.Ltmp1601:
    000002c2: 	movq	%rcx, %rbx
    000002c5: 	jmp	.Ltmp1605 # Offset: 709
.Ltmp1581:
    000002c7: 	movsd	(%rdi), %xmm1
    000002cb: 	movq	%r13, %rbx
    000002ce: 	movq	%rdi, %rdx
    000002d1: 	nopl	(%rax) # Size: 7
.Ltmp1610:
    000002d8: 	comisd	%xmm1, %xmm2
    000002dc: 	leaq	-0x8(%rbx), %rcx
    000002e0: 	ja	.Ltmp1606 # Offset: 736
    000002e2: 	cmpq	%rdx, %rcx
    000002e5: 	jbe	.Ltmp1607 # Offset: 741
    000002e7: 	movsd	(%rdx), %xmm0
    000002eb: 	leaq	0x8(%rdx), %rax
    000002ef: 	comisd	%xmm0, %xmm1
    000002f3: 	jbe	.Ltmp1608 # Offset: 755
    000002f5: 	nopl	(%rax) # Size: 3
.Ltmp1609:
    000002f8: 	movq	%rax, %rdx
    000002fb: 	movsd	(%rax), %xmm0
    000002ff: 	leaq	0x8(%rax), %rax
    00000303: 	comisd	%xmm0, %xmm1
    00000307: 	ja	.Ltmp1609 # Offset: 775
    00000309: 	cmpq	%rdx, %rcx
    0000030c: 	jbe	.Ltmp1607 # Offset: 780
.Ltmp1608:
    0000030e: 	movsd	%xmm0, (%rcx)
    00000312: 	movsd	%xmm2, (%rdx)
.Ltmp1606:
    00000316: 	movsd	-0x8(%rcx), %xmm2
    0000031b: 	movq	%rcx, %rbx
    0000031e: 	jmp	.Ltmp1610 # Offset: 798
.Ltmp1607:
    00000320: 	movq	%rbx, %rax
    00000323: 	subq	%rdi, %rax
    00000326: 	cmpq	$0x8, %rax
    0000032a: 	jle	.Ltmp1611 # Offset: 810
    0000032c: 	movsd	(%rdi), %xmm1
    00000330: 	movq	%rbx, %r14
    00000333: 	movq	%rdi, %rdx
    00000336: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1616:
    00000340: 	movsd	-0x8(%r14), %xmm2
    00000346: 	leaq	-0x8(%r14), %rcx
    0000034a: 	comisd	%xmm1, %xmm2
    0000034e: 	ja	.Ltmp1612 # Offset: 846
    00000350: 	cmpq	%rdx, %rcx
    00000353: 	jbe	.Ltmp1613 # Offset: 851
    00000355: 	movsd	(%rdx), %xmm0
    00000359: 	leaq	0x8(%rdx), %rax
    0000035d: 	comisd	%xmm0, %xmm1
    00000361: 	jbe	.Ltmp1614 # Offset: 865
    00000363: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1615:
    00000368: 	movq	%rax, %rdx
    0000036b: 	movsd	(%rax), %xmm0
    0000036f: 	leaq	0x8(%rax), %rax
    00000373: 	comisd	%xmm0, %xmm1
    00000377: 	ja	.Ltmp1615 # Offset: 887
    00000379: 	cmpq	%rdx, %rcx
    0000037c: 	jbe	.Ltmp1613 # Offset: 892
.Ltmp1614:
    0000037e: 	movsd	%xmm0, (%rcx)
    00000382: 	movsd	%xmm2, (%rdx)
.Ltmp1612:
    00000386: 	movq	%rcx, %r14
    00000389: 	jmp	.Ltmp1616 # Offset: 905
.Ltmp1613:
    0000038b: 	movq	%r14, %rsi
    0000038e: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 910
    00000393: 	movq	%rbx, %rsi
    00000396: 	movq	%r14, %rdi
    00000399: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 921
.Ltmp1611:
    0000039e: 	movq	%r13, %rax
    000003a1: 	movq	%rbx, %rdi
    000003a4: 	subq	%rbx, %rax
    000003a7: 	cmpq	$0x8, %rax
    000003ab: 	jle	.Ltmp1617 # Offset: 939
    000003b1: 	movsd	(%rbx), %xmm1
    000003b5: 	movq	%r13, %r14
    000003b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1622:
    000003c0: 	movsd	-0x8(%r14), %xmm2
    000003c6: 	leaq	-0x8(%r14), %rdx
    000003ca: 	comisd	%xmm1, %xmm2
    000003ce: 	ja	.Ltmp1618 # Offset: 974
    000003d0: 	cmpq	%rbx, %rdx
    000003d3: 	jbe	.Ltmp1619 # Offset: 979
    000003d9: 	movsd	(%rbx), %xmm0
    000003dd: 	leaq	0x8(%rbx), %rax
    000003e1: 	comisd	%xmm0, %xmm1
    000003e5: 	jbe	.Ltmp1620 # Offset: 997
    000003e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1621:
    000003f0: 	movq	%rax, %rbx
    000003f3: 	movsd	(%rax), %xmm0
    000003f7: 	leaq	0x8(%rax), %rax
    000003fb: 	comisd	%xmm0, %xmm1
    000003ff: 	ja	.Ltmp1621 # Offset: 1023
    00000401: 	cmpq	%rbx, %rdx
    00000404: 	jbe	.Ltmp1619 # Offset: 1028
.Ltmp1620:
    0000040a: 	movsd	%xmm0, (%rdx)
    0000040e: 	movsd	%xmm2, (%rbx)
.Ltmp1618:
    00000412: 	movq	%rdx, %r14
    00000415: 	jmp	.Ltmp1622 # Offset: 1045
.Ltmp1602:
    00000417: 	movq	%rbx, %rax
    0000041a: 	subq	%r13, %rax
    0000041d: 	cmpq	$0x8, %rax
    00000421: 	jle	.Ltmp1623 # Offset: 1057
    00000423: 	movsd	(%r13), %xmm1
    00000429: 	movq	%rbx, %r14
    0000042c: 	movq	%r13, %rdx
    0000042f: 	nop # Size: 1
.Ltmp1628:
    00000430: 	movsd	-0x8(%r14), %xmm2
    00000436: 	leaq	-0x8(%r14), %rcx
    0000043a: 	comisd	%xmm1, %xmm2
    0000043e: 	ja	.Ltmp1624 # Offset: 1086
    00000440: 	cmpq	%rdx, %rcx
    00000443: 	jbe	.Ltmp1625 # Offset: 1091
    00000445: 	movsd	(%rdx), %xmm0
    00000449: 	leaq	0x8(%rdx), %rax
    0000044d: 	comisd	%xmm0, %xmm1
    00000451: 	jbe	.Ltmp1626 # Offset: 1105
    00000453: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1627:
    00000458: 	movq	%rax, %rdx
    0000045b: 	movsd	(%rax), %xmm0
    0000045f: 	leaq	0x8(%rax), %rax
    00000463: 	comisd	%xmm0, %xmm1
    00000467: 	ja	.Ltmp1627 # Offset: 1127
    00000469: 	cmpq	%rdx, %rcx
    0000046c: 	jbe	.Ltmp1625 # Offset: 1132
.Ltmp1626:
    0000046e: 	movsd	%xmm0, (%rcx)
    00000472: 	movsd	%xmm2, (%rdx)
.Ltmp1624:
    00000476: 	movq	%rcx, %r14
    00000479: 	jmp	.Ltmp1628 # Offset: 1145
.Ltmp1625:
    0000047b: 	movq	%r14, %rsi
    0000047e: 	movq	%r13, %rdi
    00000481: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 1153
    00000486: 	movq	%rbx, %rsi
    00000489: 	movq	%r14, %rdi
    0000048c: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 1164
.Ltmp1623:
    00000491: 	movq	%rbp, %rax
    00000494: 	movq	%rbx, %rdi
    00000497: 	subq	%rbx, %rax
    0000049a: 	cmpq	$0x8, %rax
    0000049e: 	jle	.Ltmp1575 # Offset: 1182
    000004a4: 	movsd	(%rbx), %xmm1
    000004a8: 	movq	%rbp, %r13
    000004ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1633:
    000004b0: 	movsd	-0x8(%r13), %xmm2
    000004b6: 	leaq	-0x8(%r13), %rdx
    000004ba: 	comisd	%xmm1, %xmm2
    000004be: 	ja	.Ltmp1629 # Offset: 1214
    000004c0: 	cmpq	%rbx, %rdx
    000004c3: 	jbe	.Ltmp1630 # Offset: 1219
    000004c9: 	movsd	(%rbx), %xmm0
    000004cd: 	leaq	0x8(%rbx), %rax
    000004d1: 	comisd	%xmm0, %xmm1
    000004d5: 	jbe	.Ltmp1631 # Offset: 1237
    000004d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1632:
    000004e0: 	movq	%rax, %rbx
    000004e3: 	movsd	(%rax), %xmm0
    000004e7: 	leaq	0x8(%rax), %rax
    000004eb: 	comisd	%xmm0, %xmm1
    000004ef: 	ja	.Ltmp1632 # Offset: 1263
    000004f1: 	cmpq	%rbx, %rdx
    000004f4: 	jbe	.Ltmp1630 # Offset: 1268
.Ltmp1631:
    000004fa: 	movsd	%xmm0, (%rdx)
    000004fe: 	movsd	%xmm2, (%rbx)
.Ltmp1629:
    00000502: 	movq	%rdx, %r13
    00000505: 	jmp	.Ltmp1633 # Offset: 1285
.Ltmp1597:
    00000507: 	movq	%rbx, %rax
    0000050a: 	subq	%rbp, %rax
    0000050d: 	cmpq	$0x8, %rax
    00000511: 	jle	.Ltmp1634 # Offset: 1297
    00000513: 	movsd	(%rbp), %xmm1
    00000518: 	movq	%rbx, %r14
    0000051b: 	movq	%rbp, %rdx
    0000051e: 	nop # Size: 2
.Ltmp1639:
    00000520: 	movsd	-0x8(%r14), %xmm2
    00000526: 	leaq	-0x8(%r14), %rcx
    0000052a: 	comisd	%xmm1, %xmm2
    0000052e: 	ja	.Ltmp1635 # Offset: 1326
    00000530: 	cmpq	%rdx, %rcx
    00000533: 	jbe	.Ltmp1636 # Offset: 1331
    00000535: 	movsd	(%rdx), %xmm0
    00000539: 	leaq	0x8(%rdx), %rax
    0000053d: 	comisd	%xmm0, %xmm1
    00000541: 	jbe	.Ltmp1637 # Offset: 1345
    00000543: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1638:
    00000548: 	movq	%rax, %rdx
    0000054b: 	movsd	(%rax), %xmm0
    0000054f: 	leaq	0x8(%rax), %rax
    00000553: 	comisd	%xmm0, %xmm1
    00000557: 	ja	.Ltmp1638 # Offset: 1367
    00000559: 	cmpq	%rdx, %rcx
    0000055c: 	jbe	.Ltmp1636 # Offset: 1372
.Ltmp1637:
    0000055e: 	movsd	%xmm0, (%rcx)
    00000562: 	movsd	%xmm2, (%rdx)
.Ltmp1635:
    00000566: 	movq	%rcx, %r14
    00000569: 	jmp	.Ltmp1639 # Offset: 1385
.Ltmp1636:
    0000056b: 	movq	%r14, %rsi
    0000056e: 	movq	%rbp, %rdi
    00000571: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 1393
    00000576: 	movq	%rbx, %rsi
    00000579: 	movq	%r14, %rdi
    0000057c: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 1404
.Ltmp1634:
    00000581: 	movq	%r13, %rax
    00000584: 	movq	%rbx, %rdi
    00000587: 	subq	%rbx, %rax
    0000058a: 	cmpq	$0x8, %rax
    0000058e: 	jle	.Ltmp1640 # Offset: 1422
    00000594: 	movsd	(%rbx), %xmm1
    00000598: 	movq	%r13, %rbp
    0000059b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1645:
    000005a0: 	movsd	-0x8(%rbp), %xmm2
    000005a5: 	leaq	-0x8(%rbp), %rdx
    000005a9: 	comisd	%xmm1, %xmm2
    000005ad: 	ja	.Ltmp1641 # Offset: 1453
    000005af: 	cmpq	%rbx, %rdx
    000005b2: 	jbe	.Ltmp1642 # Offset: 1458
    000005b8: 	movsd	(%rbx), %xmm0
    000005bc: 	leaq	0x8(%rbx), %rax
    000005c0: 	comisd	%xmm0, %xmm1
    000005c4: 	jbe	.Ltmp1643 # Offset: 1476
    000005c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1644:
    000005d0: 	movq	%rax, %rbx
    000005d3: 	movsd	(%rax), %xmm0
    000005d7: 	leaq	0x8(%rax), %rax
    000005db: 	comisd	%xmm0, %xmm1
    000005df: 	ja	.Ltmp1644 # Offset: 1503
    000005e1: 	cmpq	%rbx, %rdx
    000005e4: 	jbe	.Ltmp1642 # Offset: 1508
.Ltmp1643:
    000005ea: 	movsd	%xmm0, (%rdx)
    000005ee: 	movsd	%xmm2, (%rbx)
.Ltmp1641:
    000005f2: 	movq	%rdx, %rbp
    000005f5: 	jmp	.Ltmp1645 # Offset: 1525
.Ltmp1592:
    000005f7: 	movq	%rbp, %rax
    000005fa: 	subq	%r13, %rax
    000005fd: 	cmpq	$0x8, %rax
    00000601: 	jle	.Ltmp1646 # Offset: 1537
    00000603: 	movsd	(%r13), %xmm1
    00000609: 	movq	%rbp, %r14
    0000060c: 	movq	%r13, %rdx
    0000060f: 	nop # Size: 1
.Ltmp1651:
    00000610: 	movsd	-0x8(%r14), %xmm2
    00000616: 	leaq	-0x8(%r14), %rcx
    0000061a: 	comisd	%xmm1, %xmm2
    0000061e: 	ja	.Ltmp1647 # Offset: 1566
    00000620: 	cmpq	%rdx, %rcx
    00000623: 	jbe	.Ltmp1648 # Offset: 1571
    00000625: 	movsd	(%rdx), %xmm0
    00000629: 	leaq	0x8(%rdx), %rax
    0000062d: 	comisd	%xmm0, %xmm1
    00000631: 	jbe	.Ltmp1649 # Offset: 1585
    00000633: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1650:
    00000638: 	movq	%rax, %rdx
    0000063b: 	movsd	(%rax), %xmm0
    0000063f: 	leaq	0x8(%rax), %rax
    00000643: 	comisd	%xmm0, %xmm1
    00000647: 	ja	.Ltmp1650 # Offset: 1607
    00000649: 	cmpq	%rdx, %rcx
    0000064c: 	jbe	.Ltmp1648 # Offset: 1612
.Ltmp1649:
    0000064e: 	movsd	%xmm0, (%rcx)
    00000652: 	movsd	%xmm2, (%rdx)
.Ltmp1647:
    00000656: 	movq	%rcx, %r14
    00000659: 	jmp	.Ltmp1651 # Offset: 1625
.Ltmp1648:
    0000065b: 	movq	%r14, %rsi
    0000065e: 	movq	%r13, %rdi
    00000661: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 1633
    00000666: 	movq	%rbp, %rsi
    00000669: 	movq	%r14, %rdi
    0000066c: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 1644
.Ltmp1646:
    00000671: 	movq	%r12, %rax
    00000674: 	movq	%rbp, %rdi
    00000677: 	subq	%rbp, %rax
    0000067a: 	cmpq	$0x8, %rax
    0000067e: 	jle	.Ltmp1583 # Offset: 1662
    00000684: 	movsd	(%rbp), %xmm1
    00000689: 	movq	%r12, %r13
    0000068c: 	nopl	(%rax) # Size: 4
.Ltmp1656:
    00000690: 	movsd	-0x8(%r13), %xmm2
    00000696: 	leaq	-0x8(%r13), %rdx
    0000069a: 	comisd	%xmm1, %xmm2
    0000069e: 	ja	.Ltmp1652 # Offset: 1694
    000006a0: 	cmpq	%rbp, %rdx
    000006a3: 	jbe	.Ltmp1653 # Offset: 1699
    000006a5: 	movsd	(%rbp), %xmm0
    000006aa: 	leaq	0x8(%rbp), %rax
    000006ae: 	comisd	%xmm0, %xmm1
    000006b2: 	jbe	.Ltmp1654 # Offset: 1714
    000006b4: 	nopl	(%rax) # Size: 4
.Ltmp1655:
    000006b8: 	movq	%rax, %rbp
    000006bb: 	movsd	(%rax), %xmm0
    000006bf: 	leaq	0x8(%rax), %rax
    000006c3: 	comisd	%xmm0, %xmm1
    000006c7: 	ja	.Ltmp1655 # Offset: 1735
    000006c9: 	cmpq	%rbp, %rdx
    000006cc: 	jbe	.Ltmp1653 # Offset: 1740
.Ltmp1654:
    000006ce: 	movsd	%xmm0, (%rdx)
    000006d2: 	movsd	%xmm2, (%rbp)
.Ltmp1652:
    000006d7: 	movq	%rdx, %r13
    000006da: 	jmp	.Ltmp1656 # Offset: 1754
.Ltmp1653:
    000006dc: 	movq	%r13, %rsi
    000006df: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 1759
    000006e4: 	popq	%rbx
    000006e5: 	movq	%r12, %rsi
    000006e8: 	popq	%rbp
    000006e9: 	movq	%r13, %rdi
    000006ec: 	popq	%r12
    000006ee: 	popq	%r13
    000006f0: 	popq	%r14
    000006f2: 	jmp	.LBB0215 # Offset: 1778
.Ltmp1642:
    000006f7: 	movq	%rbp, %rsi
    000006fa: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 1786
    000006ff: 	movq	%r13, %rsi
    00000702: 	movq	%rbp, %rdi
    00000705: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 1797
    0000070a: 	jmp	.Ltmp1640 # Offset: 1802
.Ltmp1630:
    0000070f: 	movq	%r13, %rsi
    00000712: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 1810
    00000717: 	movq	%rbp, %rsi
    0000071a: 	movq	%r13, %rdi
    0000071d: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 1821
    00000722: 	jmp	.Ltmp1575 # Offset: 1826
.Ltmp1619:
    00000727: 	movq	%r14, %rsi
    0000072a: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 1834
    0000072f: 	movq	%r13, %rsi
    00000732: 	movq	%r14, %rdi
    00000735: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 1845
    0000073a: 	jmp	.Ltmp1617 # Offset: 1850
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_" after disassembly {
  Number      : 217
  State       : disassembled
  Address     : 0xf430
  Size        : 0x328
  MaxSize     : 0x330
  Offset      : 0xf430
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0216:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rsi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x18, %rsp
    00000015: 	movq	0x48(%rdi), %r12
    00000019: 	movq	0x28(%rdi), %rsi
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	movq	0x30(%rdi), %rax
    00000031: 	subq	0x38(%rdi), %rax
    00000035: 	movq	%r12, %r13
    00000038: 	sarq	$0x5, %rax
    0000003c: 	subq	%rsi, %r13
    0000003f: 	movq	%r13, %rcx
    00000042: 	sarq	$0x3, %rcx
    00000046: 	cmpq	$0x1, %r12
    0000004a: 	movq	%rcx, %rdx
    0000004d: 	adcq	$-0x1, %rdx
    00000051: 	shlq	$0x4, %rdx
    00000055: 	addq	%rdx, %rax
    00000058: 	movq	0x20(%rdi), %rdx
    0000005c: 	subq	0x10(%rdi), %rdx
    00000060: 	sarq	$0x5, %rdx
    00000064: 	addq	%rdx, %rax
    00000067: 	movabsq	$0x3ffffffffffffff, %rdx
    00000071: 	cmpq	%rdx, %rax
    00000074: 	je	.Ltmp1657 # Offset: 116
    0000007a: 	movq	0x8(%rdi), %rdx
    0000007e: 	movq	%rdi, %rbx
    00000081: 	movq	(%rdi), %rdi
    00000084: 	movq	%r12, %rax
    00000087: 	subq	%rdi, %rax
    0000008a: 	movq	%rdx, %r8
    0000008d: 	sarq	$0x3, %rax
    00000091: 	subq	%rax, %r8
    00000094: 	cmpq	$0x1, %r8
    00000098: 	jbe	.Ltmp1658 # Offset: 152
.Ltmp1669:
    0000009e: 	movl	$0x200, %edi
    000000a3: 	callq	_Znwm@PLT # Offset: 163
    000000a8: 	movq	%rax, 0x8(%r12)
    000000ad: 	movq	0x30(%rbx), %r13
    000000b1: 	movq	0x8(%rbp), %r12
    000000b5: 	leaq	0x10(%r13), %rdi
    000000b9: 	movq	%rdi, (%r13)
    000000bd: 	movq	(%rbp), %r14
    000000c1: 	movq	%r14, %rax
    000000c4: 	addq	%r12, %rax
    000000c7: 	je	.Ltmp1659 # Offset: 199
    000000c9: 	testq	%r14, %r14
    000000cc: 	je	.Ltmp1660 # Offset: 204
.Ltmp1659:
    000000d2: 	movq	%r12, (%rsp)
    000000d6: 	cmpq	$0xf, %r12
    000000da: 	ja	.Ltmp1661 # Offset: 218
    000000e0: 	cmpq	$0x1, %r12
    000000e4: 	jne	.Ltmp1662 # Offset: 228
    000000e6: 	movzbl	(%r14), %eax
    000000ea: 	movb	%al, 0x10(%r13)
.Ltmp1664:
    000000ee: 	movq	%r12, 0x8(%r13)
    000000f2: 	movb	$0x0, (%rdi,%r12)
    000000f7: 	movq	0x48(%rbx), %rdx
    000000fb: 	movq	0x8(%rdx), %rax
    000000ff: 	addq	$0x8, %rdx
    00000103: 	movq	%rdx, %xmm1
    00000108: 	movq	%rax, %xmm0
    0000010d: 	addq	$0x200, %rax
    00000113: 	punpcklqdq	%xmm0, %xmm0
    00000117: 	movups	%xmm0, 0x30(%rbx)
    0000011b: 	movq	%rax, %xmm0
    00000120: 	punpcklqdq	%xmm1, %xmm0
    00000124: 	movups	%xmm0, 0x40(%rbx)
    00000128: 	movq	0x8(%rsp), %rax
    0000012d: 	subq	%fs:0x28, %rax
    00000136: 	jne	.Ltmp1663 # Offset: 310
    0000013c: 	addq	$0x18, %rsp
    00000140: 	popq	%rbx
    00000141: 	popq	%rbp
    00000142: 	popq	%r12
    00000144: 	popq	%r13
    00000146: 	popq	%r14
    00000148: 	popq	%r15
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1662:
    00000150: 	testq	%r12, %r12
    00000153: 	je	.Ltmp1664 # Offset: 339
    00000155: 	jmp	.Ltmp1665 # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1658:
    00000160: 	leaq	0x2(%rcx), %r14
    00000164: 	leaq	(%r14,%r14), %rax
    00000168: 	cmpq	%rax, %rdx
    0000016b: 	ja	.Ltmp1666 # Offset: 363
    00000171: 	testq	%rdx, %rdx
    00000174: 	movl	$0x1, %eax
    00000179: 	cmovneq	%rdx, %rax
    0000017d: 	leaq	0x2(%rdx,%rax), %r15
    00000182: 	movq	%r15, %rax
    00000185: 	shrq	$0x3c, %rax
    00000189: 	jne	.Ltmp1667 # Offset: 393
    0000018f: 	leaq	(,%r15,8), %rdi
    00000197: 	callq	_Znwm@PLT # Offset: 407
    0000019c: 	movq	0x28(%rbx), %rsi
    000001a0: 	movq	%rax, %r12
    000001a3: 	movq	%r15, %rax
    000001a6: 	subq	%r14, %rax
    000001a9: 	shrq	%rax
    000001ac: 	leaq	(%r12,%rax,8), %r14
    000001b0: 	movq	0x48(%rbx), %rax
    000001b4: 	leaq	0x8(%rax), %rdx
    000001b8: 	cmpq	%rsi, %rdx
    000001bb: 	je	.Ltmp1668 # Offset: 443
    000001bd: 	subq	%rsi, %rdx
    000001c0: 	movq	%r14, %rdi
    000001c3: 	callq	memmove@PLT # Offset: 451
.Ltmp1668:
    000001c8: 	movq	0x8(%rbx), %rax
    000001cc: 	movq	(%rbx), %rdi
    000001cf: 	leaq	(,%rax,8), %rsi
    000001d7: 	callq	_ZdlPvm@PLT # Offset: 471
    000001dc: 	movq	%r12, (%rbx)
    000001df: 	movq	%r15, 0x8(%rbx)
.Ltmp1671:
    000001e3: 	movq	(%r14), %rax
    000001e6: 	movq	(%r14), %xmm0
    000001eb: 	leaq	(%r14,%r13), %r12
    000001ef: 	movq	%r14, 0x28(%rbx)
    000001f3: 	movq	%r12, 0x48(%rbx)
    000001f7: 	addq	$0x200, %rax
    000001fd: 	movq	%rax, %xmm2
    00000202: 	punpcklqdq	%xmm2, %xmm0
    00000206: 	movups	%xmm0, 0x18(%rbx)
    0000020a: 	movq	(%r12), %rax
    0000020e: 	movq	(%r12), %xmm0
    00000214: 	addq	$0x200, %rax
    0000021a: 	movq	%rax, %xmm3
    0000021f: 	punpcklqdq	%xmm3, %xmm0
    00000223: 	movups	%xmm0, 0x38(%rbx)
    00000227: 	jmp	.Ltmp1669 # Offset: 551
    0000022c: 	nopl	(%rax) # Size: 4
.Ltmp1661:
    00000230: 	movq	%rsp, %rsi
    00000233: 	xorl	%edx, %edx
    00000235: 	movq	%r13, %rdi
    00000238: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 568
    0000023d: 	movq	%rax, (%r13)
    00000241: 	movq	%rax, %rdi
    00000244: 	movq	(%rsp), %rax
    00000248: 	movq	%rax, 0x10(%r13)
.Ltmp1665:
    0000024c: 	movq	%r12, %rdx
    0000024f: 	movq	%r14, %rsi
    00000252: 	callq	memcpy@PLT # Offset: 594
    00000257: 	movq	(%rsp), %r12
    0000025b: 	movq	(%r13), %rdi
    0000025f: 	jmp	.Ltmp1664 # Offset: 607
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp1666:
    00000268: 	subq	%r14, %rdx
    0000026b: 	addq	$0x8, %r12
    0000026f: 	shrq	%rdx
    00000272: 	leaq	(%rdi,%rdx,8), %r14
    00000276: 	movq	%r12, %rdx
    00000279: 	subq	%rsi, %rdx
    0000027c: 	cmpq	%r14, %rsi
    0000027f: 	jbe	.Ltmp1670 # Offset: 639
    00000281: 	cmpq	%r12, %rsi
    00000284: 	je	.Ltmp1671 # Offset: 644
    0000028a: 	movq	%r14, %rdi
    0000028d: 	callq	memmove@PLT # Offset: 653
    00000292: 	jmp	.Ltmp1671 # Offset: 658
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1670:
    000002a0: 	cmpq	%r12, %rsi
    000002a3: 	je	.Ltmp1671 # Offset: 675
    000002a9: 	leaq	0x8(%r13), %rdi
    000002ad: 	subq	%rdx, %rdi
    000002b0: 	addq	%r14, %rdi
    000002b3: 	callq	memmove@PLT # Offset: 691
    000002b8: 	jmp	.Ltmp1671 # Offset: 696
.Ltmp1660:
    000002bd: 	leaq	DATAat0x24158(%rip), %rdi
    000002c4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 708
    000002c9: 	nopl	(%rax) # Size: 7
.Ltmp1667:
    000002d0: 	shrq	$0x3d, %r15
    000002d4: 	je	.Ltmp1672 # Offset: 724
    000002d6: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 726
.Ltmp1672:
    000002db: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 731
.Ltmp1657:
    000002e0: 	leaq	DATAat0x241b8(%rip), %rdi
    000002e7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 743
.Ltmp1663:
    000002ec: 	callq	__stack_chk_fail@PLT # Offset: 748
    000002f1: 	endbr64
    000002f5: 	movq	%rax, %rdi
    000002f8: 	callq	__cxa_begin_catch@PLT # Offset: 760
    000002fd: 	movq	0x48(%rbx), %rax
    00000301: 	movl	$0x200, %esi
    00000306: 	movq	0x8(%rax), %rdi
    0000030a: 	callq	_ZdlPvm@PLT # Offset: 778
    0000030f: 	callq	__cxa_rethrow@PLT # Offset: 783
    00000314: 	endbr64
    00000318: 	movq	%rax, %rbp
    0000031b: 	callq	__cxa_end_catch@PLT # Offset: 795
    00000320: 	movq	%rbp, %rdi
    00000323: 	callq	_Unwind_Resume@PLT # Offset: 803
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_"

Binary Function "_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.7/1(*2)" after disassembly {
  All names   : _Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.7/1
                _Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.7/reference_normalization.cpp/1
  Number      : 218
  State       : disassembled
  Address     : 0xf760
  Size        : 0x2d5
  MaxSize     : 0x2e0
  Offset      : 0xf760
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.7/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0217:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rsi, %r14
    00000007: 	pushq	%r13
    00000009: 	movq	%rdi, %r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	subq	$0x38, %rsp
    00000014: 	movq	%rdx, 0x18(%rsp)
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x28(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	callq	clock@PLT # Offset: 41
    0000002e: 	movl	iterations(%rip), %edx
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	testl	%edx, %edx
    0000003d: 	jle	.Ltmp1673 # Offset: 61
    00000043: 	movq	%r14, %r8
    00000046: 	movsd	init_value(%rip), %xmm2
    0000004e: 	pxor	%xmm4, %xmm4
    00000052: 	movsd	DATAat0x248a0(%rip), %xmm3
    0000005a: 	subq	%r13, %r8
    0000005d: 	leaq	DATAat0x246f9(%rip), %rsi
    00000064: 	leaq	-0x8(%r8), %r15
    00000068: 	shrq	$0x3, %r15
    0000006c: 	addq	$0x1, %r15
    00000070: 	movq	%r15, %rbp
    00000073: 	movq	%r15, %r9
    00000076: 	shrq	%rbp
    00000079: 	andq	$-0x2, %r9
    0000007d: 	shlq	$0x4, %rbp
    00000081: 	leaq	(%r13,%r9,8), %rbx
    00000086: 	addq	%r13, %rbp
    00000089: 	cmpq	$0x8, %r8
    0000008d: 	cmoveq	%r13, %rbx
    00000091: 	xorl	%r12d, %r12d
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp1678:
    00000098: 	movapd	%xmm4, %xmm0
    0000009c: 	cmpq	%r14, %r13
    0000009f: 	je	.Ltmp1674 # Offset: 159
    000000a1: 	cmpq	$0x8, %r8
    000000a5: 	je	.Ltmp1675 # Offset: 165
    000000ab: 	movq	%r13, %rax
    000000ae: 	movapd	%xmm4, %xmm0
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1676:
    000000b8: 	movsd	(%rax), %xmm1
    000000bc: 	addq	$0x10, %rax
    000000c0: 	addsd	%xmm1, %xmm0
    000000c4: 	movsd	-0x8(%rax), %xmm1
    000000c9: 	addsd	%xmm1, %xmm0
    000000cd: 	cmpq	%rax, %rbp
    000000d0: 	jne	.Ltmp1676 # Offset: 208
    000000d2: 	cmpq	%r15, %r9
    000000d5: 	je	.Ltmp1674 # Offset: 213
.Ltmp1686:
    000000d7: 	addsd	(%rbx), %xmm0
.Ltmp1674:
    000000db: 	movapd	%xmm2, %xmm1
    000000df: 	mulsd	%xmm3, %xmm1
    000000e3: 	ucomisd	%xmm0, %xmm1
    000000e7: 	jp	.Ltmp1677 # Offset: 231
    000000ed: 	jne	.Ltmp1677 # Offset: 237
    000000f3: 	addl	$0x1, %r12d
    000000f7: 	cmpl	%edx, %r12d
    000000fa: 	jl	.Ltmp1678 # Offset: 250
.Ltmp1673:
    000000fc: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000103: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000010a: 	subq	$0x20, %rax
    0000010e: 	cmpq	%rax, %rbx
    00000111: 	je	.Ltmp1679 # Offset: 273
    00000117: 	movq	0x18(%rsp), %rax
    0000011c: 	leaq	0x10(%rbx), %rdi
    00000120: 	movq	%rdi, (%rbx)
    00000123: 	movq	(%rax), %rbp
    00000126: 	movq	0x8(%rax), %r12
    0000012a: 	movq	%rbp, %rax
    0000012d: 	addq	%r12, %rax
    00000130: 	je	.Ltmp1680 # Offset: 304
    00000132: 	testq	%rbp, %rbp
    00000135: 	je	.Ltmp1681 # Offset: 309
.Ltmp1680:
    0000013b: 	movq	%r12, 0x20(%rsp)
    00000140: 	cmpq	$0xf, %r12
    00000144: 	ja	.Ltmp1682 # Offset: 324
    0000014a: 	cmpq	$0x1, %r12
    0000014e: 	jne	.Ltmp1683 # Offset: 334
    00000154: 	movzbl	(%rbp), %eax
    00000158: 	movb	%al, 0x10(%rbx)
.Ltmp1687:
    0000015b: 	movq	%r12, 0x8(%rbx)
    0000015f: 	movb	$0x0, (%rdi,%r12)
    00000164: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000016b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000172: 	addq	$0x20, %rax
    00000176: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000017d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000184: 	je	.Ltmp1684 # Offset: 388
.Ltmp1688:
    0000018a: 	movq	-0x20(%rax), %rbp
    0000018e: 	callq	clock@PLT # Offset: 398
    00000193: 	movq	%rax, end_time(%rip)
    0000019a: 	movq	0x28(%rsp), %rdx
    0000019f: 	subq	%fs:0x28, %rdx
    000001a8: 	jne	.Ltmp1685 # Offset: 424
    000001ae: 	subq	start_time(%rip), %rax
    000001b5: 	pxor	%xmm0, %xmm0
    000001b9: 	movq	%rbp, %rdi
    000001bc: 	cvtsi2sd	%rax, %xmm0
    000001c1: 	divsd	DATAat0x24890(%rip), %xmm0
    000001c9: 	addq	$0x38, %rsp
    000001cd: 	popq	%rbx
    000001ce: 	popq	%rbp
    000001cf: 	popq	%r12
    000001d1: 	popq	%r13
    000001d3: 	popq	%r14
    000001d5: 	popq	%r15
    000001d7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 471
    000001dc: 	nopl	(%rax) # Size: 4
.Ltmp1677:
    000001e0: 	movq	0x18(%rsp), %rax
    000001e5: 	movl	$0x1, %edi
    000001ea: 	movq	%r8, 0x10(%rsp)
    000001ef: 	addl	$0x1, %r12d
    000001f3: 	movq	%r9, 0x8(%rsp)
    000001f8: 	movq	(%rax), %rdx
    000001fb: 	xorl	%eax, %eax
    000001fd: 	callq	__printf_chk@PLT # Offset: 509
    00000202: 	movl	iterations(%rip), %edx
    00000208: 	cmpl	%r12d, %edx
    0000020b: 	jle	.Ltmp1673 # Offset: 523
    00000211: 	movq	DATAat0x248a0(%rip), %rax
    00000218: 	movq	0x8(%rsp), %r9
    0000021d: 	pxor	%xmm4, %xmm4
    00000221: 	leaq	DATAat0x246f9(%rip), %rsi
    00000228: 	movsd	init_value(%rip), %xmm2
    00000230: 	movq	0x10(%rsp), %r8
    00000235: 	movq	%rax, %xmm3
    0000023a: 	jmp	.Ltmp1678 # Offset: 570
.Ltmp1675:
    0000023f: 	movapd	%xmm4, %xmm0
    00000243: 	jmp	.Ltmp1686 # Offset: 579
.Ltmp1682:
    00000248: 	movq	%rbx, %rdi
    0000024b: 	leaq	0x20(%rsp), %rsi
    00000250: 	xorl	%edx, %edx
    00000252: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 594
    00000257: 	movq	%rax, (%rbx)
    0000025a: 	movq	%rax, %rdi
    0000025d: 	movq	0x20(%rsp), %rax
    00000262: 	movq	%rax, 0x10(%rbx)
.Ltmp1689:
    00000266: 	movq	%r12, %rdx
    00000269: 	movq	%rbp, %rsi
    0000026c: 	callq	memcpy@PLT # Offset: 620
    00000271: 	movq	0x20(%rsp), %r12
    00000276: 	movq	(%rbx), %rdi
    00000279: 	jmp	.Ltmp1687 # Offset: 633
.Ltmp1679:
    0000027e: 	movq	0x18(%rsp), %rsi
    00000283: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000028a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 650
    0000028f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000296: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000029d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002a4: 	jne	.Ltmp1688 # Offset: 676
.Ltmp1684:
    000002aa: 	movq	-0x8(%rdx), %rax
    000002ae: 	addq	$0x200, %rax
    000002b4: 	jmp	.Ltmp1688 # Offset: 692
.Ltmp1683:
    000002b9: 	testq	%r12, %r12
    000002bc: 	je	.Ltmp1687 # Offset: 700
    000002c2: 	jmp	.Ltmp1689 # Offset: 706
.Ltmp1685:
    000002c4: 	callq	__stack_chk_fail@PLT # Offset: 708
.Ltmp1681:
    000002c9: 	leaq	DATAat0x24158(%rip), %rdi
    000002d0: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 720
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.7/1(*2)"

Binary Function "_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1(*2)" after disassembly {
  All names   : _Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1
                _Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/reference_normalization.cpp/1
  Number      : 219
  State       : disassembled
  Address     : 0xfa40
  Size        : 0x2d5
  MaxSize     : 0x2e0
  Offset      : 0xfa40
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0218:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rsi, %r14
    00000007: 	pushq	%r13
    00000009: 	movq	%rdi, %r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	subq	$0x38, %rsp
    00000014: 	movq	%rdx, 0x18(%rsp)
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x28(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	callq	clock@PLT # Offset: 41
    0000002e: 	movl	iterations(%rip), %edx
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	testl	%edx, %edx
    0000003d: 	jle	.Ltmp1690 # Offset: 61
    00000043: 	movq	%r14, %r8
    00000046: 	movsd	init_value(%rip), %xmm2
    0000004e: 	pxor	%xmm4, %xmm4
    00000052: 	movsd	DATAat0x248a0(%rip), %xmm3
    0000005a: 	subq	%r13, %r8
    0000005d: 	leaq	DATAat0x246f9(%rip), %rsi
    00000064: 	leaq	-0x8(%r8), %r15
    00000068: 	shrq	$0x3, %r15
    0000006c: 	addq	$0x1, %r15
    00000070: 	movq	%r15, %rbp
    00000073: 	movq	%r15, %r9
    00000076: 	shrq	%rbp
    00000079: 	andq	$-0x2, %r9
    0000007d: 	shlq	$0x4, %rbp
    00000081: 	leaq	(%r13,%r9,8), %rbx
    00000086: 	addq	%r13, %rbp
    00000089: 	cmpq	$0x8, %r8
    0000008d: 	cmoveq	%r13, %rbx
    00000091: 	xorl	%r12d, %r12d
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp1695:
    00000098: 	movapd	%xmm4, %xmm0
    0000009c: 	cmpq	%r14, %r13
    0000009f: 	je	.Ltmp1691 # Offset: 159
    000000a1: 	cmpq	$0x8, %r8
    000000a5: 	je	.Ltmp1692 # Offset: 165
    000000ab: 	movq	%r13, %rax
    000000ae: 	movapd	%xmm4, %xmm0
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1693:
    000000b8: 	movsd	(%rax), %xmm1
    000000bc: 	addq	$0x10, %rax
    000000c0: 	addsd	%xmm1, %xmm0
    000000c4: 	movsd	-0x8(%rax), %xmm1
    000000c9: 	addsd	%xmm1, %xmm0
    000000cd: 	cmpq	%rax, %rbp
    000000d0: 	jne	.Ltmp1693 # Offset: 208
    000000d2: 	cmpq	%r15, %r9
    000000d5: 	je	.Ltmp1691 # Offset: 213
.Ltmp1703:
    000000d7: 	addsd	(%rbx), %xmm0
.Ltmp1691:
    000000db: 	movapd	%xmm2, %xmm1
    000000df: 	mulsd	%xmm3, %xmm1
    000000e3: 	ucomisd	%xmm0, %xmm1
    000000e7: 	jp	.Ltmp1694 # Offset: 231
    000000ed: 	jne	.Ltmp1694 # Offset: 237
    000000f3: 	addl	$0x1, %r12d
    000000f7: 	cmpl	%edx, %r12d
    000000fa: 	jl	.Ltmp1695 # Offset: 250
.Ltmp1690:
    000000fc: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000103: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000010a: 	subq	$0x20, %rax
    0000010e: 	cmpq	%rax, %rbx
    00000111: 	je	.Ltmp1696 # Offset: 273
    00000117: 	movq	0x18(%rsp), %rax
    0000011c: 	leaq	0x10(%rbx), %rdi
    00000120: 	movq	%rdi, (%rbx)
    00000123: 	movq	(%rax), %rbp
    00000126: 	movq	0x8(%rax), %r12
    0000012a: 	movq	%rbp, %rax
    0000012d: 	addq	%r12, %rax
    00000130: 	je	.Ltmp1697 # Offset: 304
    00000132: 	testq	%rbp, %rbp
    00000135: 	je	.Ltmp1698 # Offset: 309
.Ltmp1697:
    0000013b: 	movq	%r12, 0x20(%rsp)
    00000140: 	cmpq	$0xf, %r12
    00000144: 	ja	.Ltmp1699 # Offset: 324
    0000014a: 	cmpq	$0x1, %r12
    0000014e: 	jne	.Ltmp1700 # Offset: 334
    00000154: 	movzbl	(%rbp), %eax
    00000158: 	movb	%al, 0x10(%rbx)
.Ltmp1704:
    0000015b: 	movq	%r12, 0x8(%rbx)
    0000015f: 	movb	$0x0, (%rdi,%r12)
    00000164: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000016b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000172: 	addq	$0x20, %rax
    00000176: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000017d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000184: 	je	.Ltmp1701 # Offset: 388
.Ltmp1705:
    0000018a: 	movq	-0x20(%rax), %rbp
    0000018e: 	callq	clock@PLT # Offset: 398
    00000193: 	movq	%rax, end_time(%rip)
    0000019a: 	movq	0x28(%rsp), %rdx
    0000019f: 	subq	%fs:0x28, %rdx
    000001a8: 	jne	.Ltmp1702 # Offset: 424
    000001ae: 	subq	start_time(%rip), %rax
    000001b5: 	pxor	%xmm0, %xmm0
    000001b9: 	movq	%rbp, %rdi
    000001bc: 	cvtsi2sd	%rax, %xmm0
    000001c1: 	divsd	DATAat0x24890(%rip), %xmm0
    000001c9: 	addq	$0x38, %rsp
    000001cd: 	popq	%rbx
    000001ce: 	popq	%rbp
    000001cf: 	popq	%r12
    000001d1: 	popq	%r13
    000001d3: 	popq	%r14
    000001d5: 	popq	%r15
    000001d7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 471
    000001dc: 	nopl	(%rax) # Size: 4
.Ltmp1694:
    000001e0: 	movq	0x18(%rsp), %rax
    000001e5: 	movl	$0x1, %edi
    000001ea: 	movq	%r8, 0x10(%rsp)
    000001ef: 	addl	$0x1, %r12d
    000001f3: 	movq	%r9, 0x8(%rsp)
    000001f8: 	movq	(%rax), %rdx
    000001fb: 	xorl	%eax, %eax
    000001fd: 	callq	__printf_chk@PLT # Offset: 509
    00000202: 	movl	iterations(%rip), %edx
    00000208: 	cmpl	%r12d, %edx
    0000020b: 	jle	.Ltmp1690 # Offset: 523
    00000211: 	movq	DATAat0x248a0(%rip), %rax
    00000218: 	movq	0x8(%rsp), %r9
    0000021d: 	pxor	%xmm4, %xmm4
    00000221: 	leaq	DATAat0x246f9(%rip), %rsi
    00000228: 	movsd	init_value(%rip), %xmm2
    00000230: 	movq	0x10(%rsp), %r8
    00000235: 	movq	%rax, %xmm3
    0000023a: 	jmp	.Ltmp1695 # Offset: 570
.Ltmp1692:
    0000023f: 	movapd	%xmm4, %xmm0
    00000243: 	jmp	.Ltmp1703 # Offset: 579
.Ltmp1699:
    00000248: 	movq	%rbx, %rdi
    0000024b: 	leaq	0x20(%rsp), %rsi
    00000250: 	xorl	%edx, %edx
    00000252: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 594
    00000257: 	movq	%rax, (%rbx)
    0000025a: 	movq	%rax, %rdi
    0000025d: 	movq	0x20(%rsp), %rax
    00000262: 	movq	%rax, 0x10(%rbx)
.Ltmp1706:
    00000266: 	movq	%r12, %rdx
    00000269: 	movq	%rbp, %rsi
    0000026c: 	callq	memcpy@PLT # Offset: 620
    00000271: 	movq	0x20(%rsp), %r12
    00000276: 	movq	(%rbx), %rdi
    00000279: 	jmp	.Ltmp1704 # Offset: 633
.Ltmp1696:
    0000027e: 	movq	0x18(%rsp), %rsi
    00000283: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000028a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 650
    0000028f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000296: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000029d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002a4: 	jne	.Ltmp1705 # Offset: 676
.Ltmp1701:
    000002aa: 	movq	-0x8(%rdx), %rax
    000002ae: 	addq	$0x200, %rax
    000002b4: 	jmp	.Ltmp1705 # Offset: 692
.Ltmp1700:
    000002b9: 	testq	%r12, %r12
    000002bc: 	je	.Ltmp1704 # Offset: 700
    000002c2: 	jmp	.Ltmp1706 # Offset: 706
.Ltmp1702:
    000002c4: 	callq	__stack_chk_fail@PLT # Offset: 708
.Ltmp1698:
    000002c9: 	leaq	DATAat0x24158(%rip), %rdi
    000002d0: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 720
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1(*2)"

Binary Function "_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1(*2)" after disassembly {
  All names   : _Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1
                _Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/reference_normalization.cpp/1
  Number      : 220
  State       : disassembled
  Address     : 0xfd20
  Size        : 0x361
  MaxSize     : 0x370
  Offset      : 0xfd20
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0219:
    00000000: 	pushq	%r15
    00000002: 	movq	%rsi, %r15
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	movq	%rdi, %r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	subq	$0x68, %rsp
    00000014: 	movq	%rdx, 0x30(%rsp)
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x58(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	callq	clock@PLT # Offset: 41
    0000002e: 	movl	iterations(%rip), %esi
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	testl	%esi, %esi
    0000003d: 	jle	.Ltmp1707 # Offset: 61
    00000043: 	leaq	-0x2(%r15), %r11
    00000047: 	movsd	init_value(%rip), %xmm2
    0000004f: 	movq	%r11, %rcx
    00000052: 	subq	%r13, %rcx
    00000055: 	movq	%rcx, %rbp
    00000058: 	shrq	%rbp
    0000005b: 	addq	$0x1, %rbp
    0000005f: 	movq	%rbp, %rbx
    00000062: 	movq	%rbp, %rax
    00000065: 	shrq	$0x3, %rbx
    00000069: 	andq	$-0x8, %rax
    0000006d: 	shlq	$0x4, %rbx
    00000071: 	leaq	(%r13,%rax,2), %r8
    00000076: 	movq	%rax, 0x8(%rsp)
    0000007b: 	addq	%r13, %rbx
    0000007e: 	cmpq	$0xc, %rcx
    00000082: 	cmovbeq	%r13, %r8
    00000086: 	xorl	%r14d, %r14d
    00000089: 	leaq	0x2(%r8), %rax
    0000008d: 	movq	%r8, %r12
    00000090: 	movq	%rax, 0x18(%rsp)
    00000095: 	leaq	0x4(%r8), %rax
    00000099: 	movq	%rax, 0x20(%rsp)
    0000009e: 	leaq	0x6(%r8), %rax
    000000a2: 	movq	%rax, 0x28(%rsp)
    000000a7: 	leaq	0x8(%r8), %rax
    000000ab: 	movq	%rax, 0x38(%rsp)
    000000b0: 	leaq	0xa(%r8), %rax
    000000b4: 	movq	%rax, 0x40(%rsp)
    000000b9: 	leaq	0xc(%r8), %rax
    000000bd: 	movq	%rax, 0x48(%rsp)
    000000c2: 	movq	%rbp, %rax
    000000c5: 	movq	%rcx, %rbp
    000000c8: 	movq	%rax, %rcx
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1712:
    000000d0: 	xorl	%eax, %eax
    000000d2: 	cmpq	%r15, %r13
    000000d5: 	je	.Ltmp1708 # Offset: 213
    000000db: 	cmpq	$0xc, %rbp
    000000df: 	jbe	.Ltmp1709 # Offset: 223
    000000e5: 	movq	%r13, %rax
    000000e8: 	pxor	%xmm0, %xmm0
    000000ec: 	nopl	(%rax) # Size: 4
.Ltmp1710:
    000000f0: 	movdqu	(%rax), %xmm3
    000000f4: 	addq	$0x10, %rax
    000000f8: 	paddw	%xmm3, %xmm0
    000000fc: 	cmpq	%rbx, %rax
    000000ff: 	jne	.Ltmp1710 # Offset: 255
    00000101: 	movdqa	%xmm0, %xmm1
    00000105: 	psrldq	$0x8, %xmm1
    0000010a: 	paddw	%xmm1, %xmm0
    0000010e: 	movdqa	%xmm0, %xmm1
    00000112: 	psrldq	$0x4, %xmm1
    00000117: 	paddw	%xmm1, %xmm0
    0000011b: 	movdqa	%xmm0, %xmm1
    0000011f: 	psrldq	$0x2, %xmm1
    00000124: 	paddw	%xmm1, %xmm0
    00000128: 	pextrw	$0x0, %xmm0, %eax
    0000012d: 	cmpq	%rcx, 0x8(%rsp)
    00000132: 	je	.Ltmp1708 # Offset: 306
.Ltmp1720:
    00000134: 	addw	(%r12), %ax
    00000139: 	cmpq	0x18(%rsp), %r15
    0000013e: 	je	.Ltmp1708 # Offset: 318
    00000140: 	addw	0x2(%r12), %ax
    00000146: 	cmpq	0x20(%rsp), %r15
    0000014b: 	je	.Ltmp1708 # Offset: 331
    0000014d: 	addw	0x4(%r12), %ax
    00000153: 	cmpq	0x28(%rsp), %r15
    00000158: 	je	.Ltmp1708 # Offset: 344
    0000015a: 	addw	0x6(%r12), %ax
    00000160: 	cmpq	0x38(%rsp), %r15
    00000165: 	je	.Ltmp1708 # Offset: 357
    00000167: 	addw	0x8(%r12), %ax
    0000016d: 	cmpq	0x40(%rsp), %r15
    00000172: 	je	.Ltmp1708 # Offset: 370
    00000174: 	addw	0xa(%r12), %ax
    0000017a: 	cmpq	0x48(%rsp), %r15
    0000017f: 	je	.Ltmp1708 # Offset: 383
    00000181: 	addw	0xc(%r12), %ax
.Ltmp1708:
    00000187: 	movsd	DATAat0x248a0(%rip), %xmm0
    0000018f: 	mulsd	%xmm2, %xmm0
    00000193: 	cvttsd2si	%xmm0, %edx
    00000197: 	cmpw	%ax, %dx
    0000019a: 	je	.Ltmp1711 # Offset: 410
    0000019c: 	movq	0x30(%rsp), %rax
    000001a1: 	leaq	DATAat0x246f9(%rip), %rsi
    000001a8: 	movl	$0x1, %edi
    000001ad: 	movq	%rcx, 0x10(%rsp)
    000001b2: 	addl	$0x1, %r14d
    000001b6: 	movq	(%rax), %rdx
    000001b9: 	xorl	%eax, %eax
    000001bb: 	callq	__printf_chk@PLT # Offset: 443
    000001c0: 	movl	iterations(%rip), %esi
    000001c6: 	cmpl	%r14d, %esi
    000001c9: 	jle	.Ltmp1707 # Offset: 457
    000001cb: 	movsd	init_value(%rip), %xmm2
    000001d3: 	movq	0x10(%rsp), %rcx
    000001d8: 	jmp	.Ltmp1712 # Offset: 472
    000001dd: 	nopl	(%rax) # Size: 3
.Ltmp1711:
    000001e0: 	addl	$0x1, %r14d
    000001e4: 	cmpl	%esi, %r14d
    000001e7: 	jl	.Ltmp1712 # Offset: 487
.Ltmp1707:
    000001ed: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001f4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001fb: 	subq	$0x20, %rax
    000001ff: 	cmpq	%rax, %rbx
    00000202: 	je	.Ltmp1713 # Offset: 514
    00000208: 	movq	0x30(%rsp), %rax
    0000020d: 	leaq	0x10(%rbx), %rdi
    00000211: 	movq	%rdi, (%rbx)
    00000214: 	movq	(%rax), %rbp
    00000217: 	movq	0x8(%rax), %r12
    0000021b: 	movq	%rbp, %rax
    0000021e: 	addq	%r12, %rax
    00000221: 	je	.Ltmp1714 # Offset: 545
    00000223: 	testq	%rbp, %rbp
    00000226: 	je	.Ltmp1715 # Offset: 550
.Ltmp1714:
    0000022c: 	movq	%r12, 0x50(%rsp)
    00000231: 	cmpq	$0xf, %r12
    00000235: 	ja	.Ltmp1716 # Offset: 565
    0000023b: 	cmpq	$0x1, %r12
    0000023f: 	jne	.Ltmp1717 # Offset: 575
    00000245: 	movzbl	(%rbp), %eax
    00000249: 	movb	%al, 0x10(%rbx)
.Ltmp1721:
    0000024c: 	movq	%r12, 0x8(%rbx)
    00000250: 	movb	$0x0, (%rdi,%r12)
    00000255: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000025c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000263: 	addq	$0x20, %rax
    00000267: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000026e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000275: 	je	.Ltmp1718 # Offset: 629
.Ltmp1722:
    0000027b: 	movq	-0x20(%rax), %rbp
    0000027f: 	callq	clock@PLT # Offset: 639
    00000284: 	movq	%rax, end_time(%rip)
    0000028b: 	movq	0x58(%rsp), %rdx
    00000290: 	subq	%fs:0x28, %rdx
    00000299: 	jne	.Ltmp1719 # Offset: 665
    0000029f: 	subq	start_time(%rip), %rax
    000002a6: 	pxor	%xmm0, %xmm0
    000002aa: 	movq	%rbp, %rdi
    000002ad: 	cvtsi2sd	%rax, %xmm0
    000002b2: 	divsd	DATAat0x24890(%rip), %xmm0
    000002ba: 	addq	$0x68, %rsp
    000002be: 	popq	%rbx
    000002bf: 	popq	%rbp
    000002c0: 	popq	%r12
    000002c2: 	popq	%r13
    000002c4: 	popq	%r14
    000002c6: 	popq	%r15
    000002c8: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 712
.Ltmp1709:
    000002cd: 	xorl	%eax, %eax
    000002cf: 	jmp	.Ltmp1720 # Offset: 719
.Ltmp1716:
    000002d4: 	movq	%rbx, %rdi
    000002d7: 	leaq	0x50(%rsp), %rsi
    000002dc: 	xorl	%edx, %edx
    000002de: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 734
    000002e3: 	movq	%rax, (%rbx)
    000002e6: 	movq	%rax, %rdi
    000002e9: 	movq	0x50(%rsp), %rax
    000002ee: 	movq	%rax, 0x10(%rbx)
.Ltmp1723:
    000002f2: 	movq	%r12, %rdx
    000002f5: 	movq	%rbp, %rsi
    000002f8: 	callq	memcpy@PLT # Offset: 760
    000002fd: 	movq	0x50(%rsp), %r12
    00000302: 	movq	(%rbx), %rdi
    00000305: 	jmp	.Ltmp1721 # Offset: 773
.Ltmp1713:
    0000030a: 	movq	0x30(%rsp), %rsi
    0000030f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000316: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 790
    0000031b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000322: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000329: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000330: 	jne	.Ltmp1722 # Offset: 816
.Ltmp1718:
    00000336: 	movq	-0x8(%rdx), %rax
    0000033a: 	addq	$0x200, %rax
    00000340: 	jmp	.Ltmp1722 # Offset: 832
.Ltmp1717:
    00000345: 	testq	%r12, %r12
    00000348: 	je	.Ltmp1721 # Offset: 840
    0000034e: 	jmp	.Ltmp1723 # Offset: 846
.Ltmp1719:
    00000350: 	callq	__stack_chk_fail@PLT # Offset: 848
.Ltmp1715:
    00000355: 	leaq	DATAat0x24158(%rip), %rdi
    0000035c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 860
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1(*2)"

Binary Function "_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1(*2)" after disassembly {
  All names   : _Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1
                _Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/reference_normalization.cpp/1
  Number      : 221
  State       : disassembled
  Address     : 0x10090
  Size        : 0x361
  MaxSize     : 0x370
  Offset      : 0x10090
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0220:
    00000000: 	pushq	%r15
    00000002: 	movq	%rsi, %r15
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	movq	%rdi, %r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	subq	$0x68, %rsp
    00000014: 	movq	%rdx, 0x30(%rsp)
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x58(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	callq	clock@PLT # Offset: 41
    0000002e: 	movl	iterations(%rip), %esi
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	testl	%esi, %esi
    0000003d: 	jle	.Ltmp1724 # Offset: 61
    00000043: 	leaq	-0x2(%r15), %r11
    00000047: 	movsd	init_value(%rip), %xmm2
    0000004f: 	movq	%r11, %rcx
    00000052: 	subq	%r13, %rcx
    00000055: 	movq	%rcx, %rbp
    00000058: 	shrq	%rbp
    0000005b: 	addq	$0x1, %rbp
    0000005f: 	movq	%rbp, %rbx
    00000062: 	movq	%rbp, %rax
    00000065: 	shrq	$0x3, %rbx
    00000069: 	andq	$-0x8, %rax
    0000006d: 	shlq	$0x4, %rbx
    00000071: 	leaq	(%r13,%rax,2), %r8
    00000076: 	movq	%rax, 0x8(%rsp)
    0000007b: 	addq	%r13, %rbx
    0000007e: 	cmpq	$0xc, %rcx
    00000082: 	cmovbeq	%r13, %r8
    00000086: 	xorl	%r14d, %r14d
    00000089: 	leaq	0x2(%r8), %rax
    0000008d: 	movq	%r8, %r12
    00000090: 	movq	%rax, 0x18(%rsp)
    00000095: 	leaq	0x4(%r8), %rax
    00000099: 	movq	%rax, 0x20(%rsp)
    0000009e: 	leaq	0x6(%r8), %rax
    000000a2: 	movq	%rax, 0x28(%rsp)
    000000a7: 	leaq	0x8(%r8), %rax
    000000ab: 	movq	%rax, 0x38(%rsp)
    000000b0: 	leaq	0xa(%r8), %rax
    000000b4: 	movq	%rax, 0x40(%rsp)
    000000b9: 	leaq	0xc(%r8), %rax
    000000bd: 	movq	%rax, 0x48(%rsp)
    000000c2: 	movq	%rbp, %rax
    000000c5: 	movq	%rcx, %rbp
    000000c8: 	movq	%rax, %rcx
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1729:
    000000d0: 	xorl	%eax, %eax
    000000d2: 	cmpq	%r15, %r13
    000000d5: 	je	.Ltmp1725 # Offset: 213
    000000db: 	cmpq	$0xc, %rbp
    000000df: 	jbe	.Ltmp1726 # Offset: 223
    000000e5: 	movq	%r13, %rax
    000000e8: 	pxor	%xmm0, %xmm0
    000000ec: 	nopl	(%rax) # Size: 4
.Ltmp1727:
    000000f0: 	movdqu	(%rax), %xmm3
    000000f4: 	addq	$0x10, %rax
    000000f8: 	paddw	%xmm3, %xmm0
    000000fc: 	cmpq	%rbx, %rax
    000000ff: 	jne	.Ltmp1727 # Offset: 255
    00000101: 	movdqa	%xmm0, %xmm1
    00000105: 	psrldq	$0x8, %xmm1
    0000010a: 	paddw	%xmm1, %xmm0
    0000010e: 	movdqa	%xmm0, %xmm1
    00000112: 	psrldq	$0x4, %xmm1
    00000117: 	paddw	%xmm1, %xmm0
    0000011b: 	movdqa	%xmm0, %xmm1
    0000011f: 	psrldq	$0x2, %xmm1
    00000124: 	paddw	%xmm1, %xmm0
    00000128: 	pextrw	$0x0, %xmm0, %eax
    0000012d: 	cmpq	%rcx, 0x8(%rsp)
    00000132: 	je	.Ltmp1725 # Offset: 306
.Ltmp1737:
    00000134: 	addw	(%r12), %ax
    00000139: 	cmpq	0x18(%rsp), %r15
    0000013e: 	je	.Ltmp1725 # Offset: 318
    00000140: 	addw	0x2(%r12), %ax
    00000146: 	cmpq	0x20(%rsp), %r15
    0000014b: 	je	.Ltmp1725 # Offset: 331
    0000014d: 	addw	0x4(%r12), %ax
    00000153: 	cmpq	0x28(%rsp), %r15
    00000158: 	je	.Ltmp1725 # Offset: 344
    0000015a: 	addw	0x6(%r12), %ax
    00000160: 	cmpq	0x38(%rsp), %r15
    00000165: 	je	.Ltmp1725 # Offset: 357
    00000167: 	addw	0x8(%r12), %ax
    0000016d: 	cmpq	0x40(%rsp), %r15
    00000172: 	je	.Ltmp1725 # Offset: 370
    00000174: 	addw	0xa(%r12), %ax
    0000017a: 	cmpq	0x48(%rsp), %r15
    0000017f: 	je	.Ltmp1725 # Offset: 383
    00000181: 	addw	0xc(%r12), %ax
.Ltmp1725:
    00000187: 	movsd	DATAat0x248a0(%rip), %xmm0
    0000018f: 	mulsd	%xmm2, %xmm0
    00000193: 	cvttsd2si	%xmm0, %edx
    00000197: 	cmpw	%ax, %dx
    0000019a: 	je	.Ltmp1728 # Offset: 410
    0000019c: 	movq	0x30(%rsp), %rax
    000001a1: 	leaq	DATAat0x246f9(%rip), %rsi
    000001a8: 	movl	$0x1, %edi
    000001ad: 	movq	%rcx, 0x10(%rsp)
    000001b2: 	addl	$0x1, %r14d
    000001b6: 	movq	(%rax), %rdx
    000001b9: 	xorl	%eax, %eax
    000001bb: 	callq	__printf_chk@PLT # Offset: 443
    000001c0: 	movl	iterations(%rip), %esi
    000001c6: 	cmpl	%r14d, %esi
    000001c9: 	jle	.Ltmp1724 # Offset: 457
    000001cb: 	movsd	init_value(%rip), %xmm2
    000001d3: 	movq	0x10(%rsp), %rcx
    000001d8: 	jmp	.Ltmp1729 # Offset: 472
    000001dd: 	nopl	(%rax) # Size: 3
.Ltmp1728:
    000001e0: 	addl	$0x1, %r14d
    000001e4: 	cmpl	%r14d, %esi
    000001e7: 	jg	.Ltmp1729 # Offset: 487
.Ltmp1724:
    000001ed: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001f4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001fb: 	subq	$0x20, %rax
    000001ff: 	cmpq	%rax, %rbx
    00000202: 	je	.Ltmp1730 # Offset: 514
    00000208: 	movq	0x30(%rsp), %rax
    0000020d: 	leaq	0x10(%rbx), %rdi
    00000211: 	movq	%rdi, (%rbx)
    00000214: 	movq	(%rax), %rbp
    00000217: 	movq	0x8(%rax), %r12
    0000021b: 	movq	%rbp, %rax
    0000021e: 	addq	%r12, %rax
    00000221: 	je	.Ltmp1731 # Offset: 545
    00000223: 	testq	%rbp, %rbp
    00000226: 	je	.Ltmp1732 # Offset: 550
.Ltmp1731:
    0000022c: 	movq	%r12, 0x50(%rsp)
    00000231: 	cmpq	$0xf, %r12
    00000235: 	ja	.Ltmp1733 # Offset: 565
    0000023b: 	cmpq	$0x1, %r12
    0000023f: 	jne	.Ltmp1734 # Offset: 575
    00000245: 	movzbl	(%rbp), %eax
    00000249: 	movb	%al, 0x10(%rbx)
.Ltmp1738:
    0000024c: 	movq	%r12, 0x8(%rbx)
    00000250: 	movb	$0x0, (%rdi,%r12)
    00000255: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000025c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000263: 	addq	$0x20, %rax
    00000267: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000026e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000275: 	je	.Ltmp1735 # Offset: 629
.Ltmp1739:
    0000027b: 	movq	-0x20(%rax), %rbp
    0000027f: 	callq	clock@PLT # Offset: 639
    00000284: 	movq	%rax, end_time(%rip)
    0000028b: 	movq	0x58(%rsp), %rdx
    00000290: 	subq	%fs:0x28, %rdx
    00000299: 	jne	.Ltmp1736 # Offset: 665
    0000029f: 	subq	start_time(%rip), %rax
    000002a6: 	pxor	%xmm0, %xmm0
    000002aa: 	movq	%rbp, %rdi
    000002ad: 	cvtsi2sd	%rax, %xmm0
    000002b2: 	divsd	DATAat0x24890(%rip), %xmm0
    000002ba: 	addq	$0x68, %rsp
    000002be: 	popq	%rbx
    000002bf: 	popq	%rbp
    000002c0: 	popq	%r12
    000002c2: 	popq	%r13
    000002c4: 	popq	%r14
    000002c6: 	popq	%r15
    000002c8: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 712
.Ltmp1726:
    000002cd: 	xorl	%eax, %eax
    000002cf: 	jmp	.Ltmp1737 # Offset: 719
.Ltmp1733:
    000002d4: 	movq	%rbx, %rdi
    000002d7: 	leaq	0x50(%rsp), %rsi
    000002dc: 	xorl	%edx, %edx
    000002de: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 734
    000002e3: 	movq	%rax, (%rbx)
    000002e6: 	movq	%rax, %rdi
    000002e9: 	movq	0x50(%rsp), %rax
    000002ee: 	movq	%rax, 0x10(%rbx)
.Ltmp1740:
    000002f2: 	movq	%r12, %rdx
    000002f5: 	movq	%rbp, %rsi
    000002f8: 	callq	memcpy@PLT # Offset: 760
    000002fd: 	movq	0x50(%rsp), %r12
    00000302: 	movq	(%rbx), %rdi
    00000305: 	jmp	.Ltmp1738 # Offset: 773
.Ltmp1730:
    0000030a: 	movq	0x30(%rsp), %rsi
    0000030f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000316: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 790
    0000031b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000322: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000329: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000330: 	jne	.Ltmp1739 # Offset: 816
.Ltmp1735:
    00000336: 	movq	-0x8(%rdx), %rax
    0000033a: 	addq	$0x200, %rax
    00000340: 	jmp	.Ltmp1739 # Offset: 832
.Ltmp1734:
    00000345: 	testq	%r12, %r12
    00000348: 	je	.Ltmp1738 # Offset: 840
    0000034e: 	jmp	.Ltmp1740 # Offset: 846
.Ltmp1736:
    00000350: 	callq	__stack_chk_fail@PLT # Offset: 848
.Ltmp1732:
    00000355: 	leaq	DATAat0x24158(%rip), %rdi
    0000035c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 860
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1(*2)"

Binary Function "_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.7/1(*2)" after disassembly {
  All names   : _Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.7/1
                _Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.7/reference_normalization.cpp/1
  Number      : 222
  State       : disassembled
  Address     : 0x10400
  Size        : 0x361
  MaxSize     : 0x370
  Offset      : 0x10400
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.7/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0221:
    00000000: 	pushq	%r15
    00000002: 	movq	%rsi, %r15
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	movq	%rdi, %r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	subq	$0x68, %rsp
    00000014: 	movq	%rdx, 0x30(%rsp)
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x58(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	callq	clock@PLT # Offset: 41
    0000002e: 	movl	iterations(%rip), %esi
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	testl	%esi, %esi
    0000003d: 	jle	.Ltmp1741 # Offset: 61
    00000043: 	leaq	-0x2(%r15), %r11
    00000047: 	movsd	init_value(%rip), %xmm2
    0000004f: 	movq	%r11, %rcx
    00000052: 	subq	%r13, %rcx
    00000055: 	movq	%rcx, %rbp
    00000058: 	shrq	%rbp
    0000005b: 	addq	$0x1, %rbp
    0000005f: 	movq	%rbp, %rbx
    00000062: 	movq	%rbp, %rax
    00000065: 	shrq	$0x3, %rbx
    00000069: 	andq	$-0x8, %rax
    0000006d: 	shlq	$0x4, %rbx
    00000071: 	leaq	(%r13,%rax,2), %r8
    00000076: 	movq	%rax, 0x8(%rsp)
    0000007b: 	addq	%r13, %rbx
    0000007e: 	cmpq	$0xc, %rcx
    00000082: 	cmovbeq	%r13, %r8
    00000086: 	xorl	%r14d, %r14d
    00000089: 	leaq	0x2(%r8), %rax
    0000008d: 	movq	%r8, %r12
    00000090: 	movq	%rax, 0x18(%rsp)
    00000095: 	leaq	0x4(%r8), %rax
    00000099: 	movq	%rax, 0x20(%rsp)
    0000009e: 	leaq	0x6(%r8), %rax
    000000a2: 	movq	%rax, 0x28(%rsp)
    000000a7: 	leaq	0x8(%r8), %rax
    000000ab: 	movq	%rax, 0x38(%rsp)
    000000b0: 	leaq	0xa(%r8), %rax
    000000b4: 	movq	%rax, 0x40(%rsp)
    000000b9: 	leaq	0xc(%r8), %rax
    000000bd: 	movq	%rax, 0x48(%rsp)
    000000c2: 	movq	%rbp, %rax
    000000c5: 	movq	%rcx, %rbp
    000000c8: 	movq	%rax, %rcx
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1746:
    000000d0: 	xorl	%eax, %eax
    000000d2: 	cmpq	%r15, %r13
    000000d5: 	je	.Ltmp1742 # Offset: 213
    000000db: 	cmpq	$0xc, %rbp
    000000df: 	jbe	.Ltmp1743 # Offset: 223
    000000e5: 	movq	%r13, %rax
    000000e8: 	pxor	%xmm0, %xmm0
    000000ec: 	nopl	(%rax) # Size: 4
.Ltmp1744:
    000000f0: 	movdqu	(%rax), %xmm3
    000000f4: 	addq	$0x10, %rax
    000000f8: 	paddw	%xmm3, %xmm0
    000000fc: 	cmpq	%rbx, %rax
    000000ff: 	jne	.Ltmp1744 # Offset: 255
    00000101: 	movdqa	%xmm0, %xmm1
    00000105: 	psrldq	$0x8, %xmm1
    0000010a: 	paddw	%xmm1, %xmm0
    0000010e: 	movdqa	%xmm0, %xmm1
    00000112: 	psrldq	$0x4, %xmm1
    00000117: 	paddw	%xmm1, %xmm0
    0000011b: 	movdqa	%xmm0, %xmm1
    0000011f: 	psrldq	$0x2, %xmm1
    00000124: 	paddw	%xmm1, %xmm0
    00000128: 	pextrw	$0x0, %xmm0, %eax
    0000012d: 	cmpq	%rcx, 0x8(%rsp)
    00000132: 	je	.Ltmp1742 # Offset: 306
.Ltmp1754:
    00000134: 	addw	(%r12), %ax
    00000139: 	cmpq	0x18(%rsp), %r15
    0000013e: 	je	.Ltmp1742 # Offset: 318
    00000140: 	addw	0x2(%r12), %ax
    00000146: 	cmpq	0x20(%rsp), %r15
    0000014b: 	je	.Ltmp1742 # Offset: 331
    0000014d: 	addw	0x4(%r12), %ax
    00000153: 	cmpq	0x28(%rsp), %r15
    00000158: 	je	.Ltmp1742 # Offset: 344
    0000015a: 	addw	0x6(%r12), %ax
    00000160: 	cmpq	0x38(%rsp), %r15
    00000165: 	je	.Ltmp1742 # Offset: 357
    00000167: 	addw	0x8(%r12), %ax
    0000016d: 	cmpq	0x40(%rsp), %r15
    00000172: 	je	.Ltmp1742 # Offset: 370
    00000174: 	addw	0xa(%r12), %ax
    0000017a: 	cmpq	0x48(%rsp), %r15
    0000017f: 	je	.Ltmp1742 # Offset: 383
    00000181: 	addw	0xc(%r12), %ax
.Ltmp1742:
    00000187: 	movsd	DATAat0x248a0(%rip), %xmm0
    0000018f: 	mulsd	%xmm2, %xmm0
    00000193: 	cvttsd2si	%xmm0, %edx
    00000197: 	cmpw	%ax, %dx
    0000019a: 	je	.Ltmp1745 # Offset: 410
    0000019c: 	movq	0x30(%rsp), %rax
    000001a1: 	leaq	DATAat0x246f9(%rip), %rsi
    000001a8: 	movl	$0x1, %edi
    000001ad: 	movq	%rcx, 0x10(%rsp)
    000001b2: 	addl	$0x1, %r14d
    000001b6: 	movq	(%rax), %rdx
    000001b9: 	xorl	%eax, %eax
    000001bb: 	callq	__printf_chk@PLT # Offset: 443
    000001c0: 	movl	iterations(%rip), %esi
    000001c6: 	cmpl	%r14d, %esi
    000001c9: 	jle	.Ltmp1741 # Offset: 457
    000001cb: 	movsd	init_value(%rip), %xmm2
    000001d3: 	movq	0x10(%rsp), %rcx
    000001d8: 	jmp	.Ltmp1746 # Offset: 472
    000001dd: 	nopl	(%rax) # Size: 3
.Ltmp1745:
    000001e0: 	addl	$0x1, %r14d
    000001e4: 	cmpl	%esi, %r14d
    000001e7: 	jl	.Ltmp1746 # Offset: 487
.Ltmp1741:
    000001ed: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001f4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001fb: 	subq	$0x20, %rax
    000001ff: 	cmpq	%rax, %rbx
    00000202: 	je	.Ltmp1747 # Offset: 514
    00000208: 	movq	0x30(%rsp), %rax
    0000020d: 	leaq	0x10(%rbx), %rdi
    00000211: 	movq	%rdi, (%rbx)
    00000214: 	movq	(%rax), %rbp
    00000217: 	movq	0x8(%rax), %r12
    0000021b: 	movq	%rbp, %rax
    0000021e: 	addq	%r12, %rax
    00000221: 	je	.Ltmp1748 # Offset: 545
    00000223: 	testq	%rbp, %rbp
    00000226: 	je	.Ltmp1749 # Offset: 550
.Ltmp1748:
    0000022c: 	movq	%r12, 0x50(%rsp)
    00000231: 	cmpq	$0xf, %r12
    00000235: 	ja	.Ltmp1750 # Offset: 565
    0000023b: 	cmpq	$0x1, %r12
    0000023f: 	jne	.Ltmp1751 # Offset: 575
    00000245: 	movzbl	(%rbp), %eax
    00000249: 	movb	%al, 0x10(%rbx)
.Ltmp1755:
    0000024c: 	movq	%r12, 0x8(%rbx)
    00000250: 	movb	$0x0, (%rdi,%r12)
    00000255: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000025c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000263: 	addq	$0x20, %rax
    00000267: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000026e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000275: 	je	.Ltmp1752 # Offset: 629
.Ltmp1756:
    0000027b: 	movq	-0x20(%rax), %rbp
    0000027f: 	callq	clock@PLT # Offset: 639
    00000284: 	movq	%rax, end_time(%rip)
    0000028b: 	movq	0x58(%rsp), %rdx
    00000290: 	subq	%fs:0x28, %rdx
    00000299: 	jne	.Ltmp1753 # Offset: 665
    0000029f: 	subq	start_time(%rip), %rax
    000002a6: 	pxor	%xmm0, %xmm0
    000002aa: 	movq	%rbp, %rdi
    000002ad: 	cvtsi2sd	%rax, %xmm0
    000002b2: 	divsd	DATAat0x24890(%rip), %xmm0
    000002ba: 	addq	$0x68, %rsp
    000002be: 	popq	%rbx
    000002bf: 	popq	%rbp
    000002c0: 	popq	%r12
    000002c2: 	popq	%r13
    000002c4: 	popq	%r14
    000002c6: 	popq	%r15
    000002c8: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 712
.Ltmp1743:
    000002cd: 	xorl	%eax, %eax
    000002cf: 	jmp	.Ltmp1754 # Offset: 719
.Ltmp1750:
    000002d4: 	movq	%rbx, %rdi
    000002d7: 	leaq	0x50(%rsp), %rsi
    000002dc: 	xorl	%edx, %edx
    000002de: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 734
    000002e3: 	movq	%rax, (%rbx)
    000002e6: 	movq	%rax, %rdi
    000002e9: 	movq	0x50(%rsp), %rax
    000002ee: 	movq	%rax, 0x10(%rbx)
.Ltmp1757:
    000002f2: 	movq	%r12, %rdx
    000002f5: 	movq	%rbp, %rsi
    000002f8: 	callq	memcpy@PLT # Offset: 760
    000002fd: 	movq	0x50(%rsp), %r12
    00000302: 	movq	(%rbx), %rdi
    00000305: 	jmp	.Ltmp1755 # Offset: 773
.Ltmp1747:
    0000030a: 	movq	0x30(%rsp), %rsi
    0000030f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000316: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 790
    0000031b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000322: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000329: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000330: 	jne	.Ltmp1756 # Offset: 816
.Ltmp1752:
    00000336: 	movq	-0x8(%rdx), %rax
    0000033a: 	addq	$0x200, %rax
    00000340: 	jmp	.Ltmp1756 # Offset: 832
.Ltmp1751:
    00000345: 	testq	%r12, %r12
    00000348: 	je	.Ltmp1755 # Offset: 840
    0000034e: 	jmp	.Ltmp1757 # Offset: 846
.Ltmp1753:
    00000350: 	callq	__stack_chk_fail@PLT # Offset: 848
.Ltmp1749:
    00000355: 	leaq	DATAat0x24158(%rip), %rdi
    0000035c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 860
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.7/1(*2)"

Binary Function "_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.7/1(*2)" after disassembly {
  All names   : _Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.7/1
                _Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.7/reference_normalization.cpp/1
  Number      : 223
  State       : disassembled
  Address     : 0x10770
  Size        : 0x361
  MaxSize     : 0x370
  Offset      : 0x10770
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.7/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0222:
    00000000: 	pushq	%r15
    00000002: 	movq	%rsi, %r15
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	movq	%rdi, %r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	subq	$0x68, %rsp
    00000014: 	movq	%rdx, 0x30(%rsp)
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x58(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	callq	clock@PLT # Offset: 41
    0000002e: 	movl	iterations(%rip), %esi
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	testl	%esi, %esi
    0000003d: 	jle	.Ltmp1758 # Offset: 61
    00000043: 	leaq	-0x2(%r15), %r11
    00000047: 	movsd	init_value(%rip), %xmm2
    0000004f: 	movq	%r11, %rcx
    00000052: 	subq	%r13, %rcx
    00000055: 	movq	%rcx, %rbp
    00000058: 	shrq	%rbp
    0000005b: 	addq	$0x1, %rbp
    0000005f: 	movq	%rbp, %rbx
    00000062: 	movq	%rbp, %rax
    00000065: 	shrq	$0x3, %rbx
    00000069: 	andq	$-0x8, %rax
    0000006d: 	shlq	$0x4, %rbx
    00000071: 	leaq	(%r13,%rax,2), %r8
    00000076: 	movq	%rax, 0x8(%rsp)
    0000007b: 	addq	%r13, %rbx
    0000007e: 	cmpq	$0xc, %rcx
    00000082: 	cmovbeq	%r13, %r8
    00000086: 	xorl	%r14d, %r14d
    00000089: 	leaq	0x2(%r8), %rax
    0000008d: 	movq	%r8, %r12
    00000090: 	movq	%rax, 0x18(%rsp)
    00000095: 	leaq	0x4(%r8), %rax
    00000099: 	movq	%rax, 0x20(%rsp)
    0000009e: 	leaq	0x6(%r8), %rax
    000000a2: 	movq	%rax, 0x28(%rsp)
    000000a7: 	leaq	0x8(%r8), %rax
    000000ab: 	movq	%rax, 0x38(%rsp)
    000000b0: 	leaq	0xa(%r8), %rax
    000000b4: 	movq	%rax, 0x40(%rsp)
    000000b9: 	leaq	0xc(%r8), %rax
    000000bd: 	movq	%rax, 0x48(%rsp)
    000000c2: 	movq	%rbp, %rax
    000000c5: 	movq	%rcx, %rbp
    000000c8: 	movq	%rax, %rcx
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1763:
    000000d0: 	xorl	%eax, %eax
    000000d2: 	cmpq	%r15, %r13
    000000d5: 	je	.Ltmp1759 # Offset: 213
    000000db: 	cmpq	$0xc, %rbp
    000000df: 	jbe	.Ltmp1760 # Offset: 223
    000000e5: 	movq	%r13, %rax
    000000e8: 	pxor	%xmm0, %xmm0
    000000ec: 	nopl	(%rax) # Size: 4
.Ltmp1761:
    000000f0: 	movdqu	(%rax), %xmm3
    000000f4: 	addq	$0x10, %rax
    000000f8: 	paddw	%xmm3, %xmm0
    000000fc: 	cmpq	%rbx, %rax
    000000ff: 	jne	.Ltmp1761 # Offset: 255
    00000101: 	movdqa	%xmm0, %xmm1
    00000105: 	psrldq	$0x8, %xmm1
    0000010a: 	paddw	%xmm1, %xmm0
    0000010e: 	movdqa	%xmm0, %xmm1
    00000112: 	psrldq	$0x4, %xmm1
    00000117: 	paddw	%xmm1, %xmm0
    0000011b: 	movdqa	%xmm0, %xmm1
    0000011f: 	psrldq	$0x2, %xmm1
    00000124: 	paddw	%xmm1, %xmm0
    00000128: 	pextrw	$0x0, %xmm0, %eax
    0000012d: 	cmpq	%rcx, 0x8(%rsp)
    00000132: 	je	.Ltmp1759 # Offset: 306
.Ltmp1771:
    00000134: 	addw	(%r12), %ax
    00000139: 	cmpq	0x18(%rsp), %r15
    0000013e: 	je	.Ltmp1759 # Offset: 318
    00000140: 	addw	0x2(%r12), %ax
    00000146: 	cmpq	0x20(%rsp), %r15
    0000014b: 	je	.Ltmp1759 # Offset: 331
    0000014d: 	addw	0x4(%r12), %ax
    00000153: 	cmpq	0x28(%rsp), %r15
    00000158: 	je	.Ltmp1759 # Offset: 344
    0000015a: 	addw	0x6(%r12), %ax
    00000160: 	cmpq	0x38(%rsp), %r15
    00000165: 	je	.Ltmp1759 # Offset: 357
    00000167: 	addw	0x8(%r12), %ax
    0000016d: 	cmpq	0x40(%rsp), %r15
    00000172: 	je	.Ltmp1759 # Offset: 370
    00000174: 	addw	0xa(%r12), %ax
    0000017a: 	cmpq	0x48(%rsp), %r15
    0000017f: 	je	.Ltmp1759 # Offset: 383
    00000181: 	addw	0xc(%r12), %ax
.Ltmp1759:
    00000187: 	movsd	DATAat0x248a0(%rip), %xmm0
    0000018f: 	mulsd	%xmm2, %xmm0
    00000193: 	cvttsd2si	%xmm0, %edx
    00000197: 	cmpw	%ax, %dx
    0000019a: 	je	.Ltmp1762 # Offset: 410
    0000019c: 	movq	0x30(%rsp), %rax
    000001a1: 	leaq	DATAat0x246f9(%rip), %rsi
    000001a8: 	movl	$0x1, %edi
    000001ad: 	movq	%rcx, 0x10(%rsp)
    000001b2: 	addl	$0x1, %r14d
    000001b6: 	movq	(%rax), %rdx
    000001b9: 	xorl	%eax, %eax
    000001bb: 	callq	__printf_chk@PLT # Offset: 443
    000001c0: 	movl	iterations(%rip), %esi
    000001c6: 	cmpl	%r14d, %esi
    000001c9: 	jle	.Ltmp1758 # Offset: 457
    000001cb: 	movsd	init_value(%rip), %xmm2
    000001d3: 	movq	0x10(%rsp), %rcx
    000001d8: 	jmp	.Ltmp1763 # Offset: 472
    000001dd: 	nopl	(%rax) # Size: 3
.Ltmp1762:
    000001e0: 	addl	$0x1, %r14d
    000001e4: 	cmpl	%esi, %r14d
    000001e7: 	jl	.Ltmp1763 # Offset: 487
.Ltmp1758:
    000001ed: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001f4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001fb: 	subq	$0x20, %rax
    000001ff: 	cmpq	%rax, %rbx
    00000202: 	je	.Ltmp1764 # Offset: 514
    00000208: 	movq	0x30(%rsp), %rax
    0000020d: 	leaq	0x10(%rbx), %rdi
    00000211: 	movq	%rdi, (%rbx)
    00000214: 	movq	(%rax), %rbp
    00000217: 	movq	0x8(%rax), %r12
    0000021b: 	movq	%rbp, %rax
    0000021e: 	addq	%r12, %rax
    00000221: 	je	.Ltmp1765 # Offset: 545
    00000223: 	testq	%rbp, %rbp
    00000226: 	je	.Ltmp1766 # Offset: 550
.Ltmp1765:
    0000022c: 	movq	%r12, 0x50(%rsp)
    00000231: 	cmpq	$0xf, %r12
    00000235: 	ja	.Ltmp1767 # Offset: 565
    0000023b: 	cmpq	$0x1, %r12
    0000023f: 	jne	.Ltmp1768 # Offset: 575
    00000245: 	movzbl	(%rbp), %eax
    00000249: 	movb	%al, 0x10(%rbx)
.Ltmp1772:
    0000024c: 	movq	%r12, 0x8(%rbx)
    00000250: 	movb	$0x0, (%rdi,%r12)
    00000255: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000025c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000263: 	addq	$0x20, %rax
    00000267: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000026e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000275: 	je	.Ltmp1769 # Offset: 629
.Ltmp1773:
    0000027b: 	movq	-0x20(%rax), %rbp
    0000027f: 	callq	clock@PLT # Offset: 639
    00000284: 	movq	%rax, end_time(%rip)
    0000028b: 	movq	0x58(%rsp), %rdx
    00000290: 	subq	%fs:0x28, %rdx
    00000299: 	jne	.Ltmp1770 # Offset: 665
    0000029f: 	subq	start_time(%rip), %rax
    000002a6: 	pxor	%xmm0, %xmm0
    000002aa: 	movq	%rbp, %rdi
    000002ad: 	cvtsi2sd	%rax, %xmm0
    000002b2: 	divsd	DATAat0x24890(%rip), %xmm0
    000002ba: 	addq	$0x68, %rsp
    000002be: 	popq	%rbx
    000002bf: 	popq	%rbp
    000002c0: 	popq	%r12
    000002c2: 	popq	%r13
    000002c4: 	popq	%r14
    000002c6: 	popq	%r15
    000002c8: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 712
.Ltmp1760:
    000002cd: 	xorl	%eax, %eax
    000002cf: 	jmp	.Ltmp1771 # Offset: 719
.Ltmp1767:
    000002d4: 	movq	%rbx, %rdi
    000002d7: 	leaq	0x50(%rsp), %rsi
    000002dc: 	xorl	%edx, %edx
    000002de: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 734
    000002e3: 	movq	%rax, (%rbx)
    000002e6: 	movq	%rax, %rdi
    000002e9: 	movq	0x50(%rsp), %rax
    000002ee: 	movq	%rax, 0x10(%rbx)
.Ltmp1774:
    000002f2: 	movq	%r12, %rdx
    000002f5: 	movq	%rbp, %rsi
    000002f8: 	callq	memcpy@PLT # Offset: 760
    000002fd: 	movq	0x50(%rsp), %r12
    00000302: 	movq	(%rbx), %rdi
    00000305: 	jmp	.Ltmp1772 # Offset: 773
.Ltmp1764:
    0000030a: 	movq	0x30(%rsp), %rsi
    0000030f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000316: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 790
    0000031b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000322: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000329: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000330: 	jne	.Ltmp1773 # Offset: 816
.Ltmp1769:
    00000336: 	movq	-0x8(%rdx), %rax
    0000033a: 	addq	$0x200, %rax
    00000340: 	jmp	.Ltmp1773 # Offset: 832
.Ltmp1768:
    00000345: 	testq	%r12, %r12
    00000348: 	je	.Ltmp1772 # Offset: 840
    0000034e: 	jmp	.Ltmp1774 # Offset: 846
.Ltmp1770:
    00000350: 	callq	__stack_chk_fail@PLT # Offset: 848
.Ltmp1766:
    00000355: 	leaq	DATAat0x24158(%rip), %rdi
    0000035c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 860
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.7/1(*2)"

Binary Function "_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/reference_normalization.cpp/1
  Number      : 224
  State       : disassembled
  Address     : 0x10ae0
  Size        : 0x2de
  MaxSize     : 0x2e0
  Offset      : 0x10ae0
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0223:
    00000000: 	pushq	%r15
    00000002: 	movq	%rdi, %r15
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	movq	%rsi, %r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	subq	$0x38, %rsp
    00000014: 	movq	%rdx, 0x18(%rsp)
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x28(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	callq	clock@PLT # Offset: 41
    0000002e: 	movl	iterations(%rip), %edx
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	testl	%edx, %edx
    0000003d: 	jle	.Ltmp1775 # Offset: 61
    00000043: 	movq	%r13, %r14
    00000046: 	movsd	init_value(%rip), %xmm2
    0000004e: 	movsd	DATAat0x248a0(%rip), %xmm3
    00000056: 	pxor	%xmm4, %xmm4
    0000005a: 	subq	%r15, %r14
    0000005d: 	leaq	-0x8(%r14), %rcx
    00000061: 	shrq	$0x3, %rcx
    00000065: 	addq	$0x1, %rcx
    00000069: 	movq	%rcx, %rbp
    0000006c: 	movq	%rcx, %r10
    0000006f: 	shrq	%rbp
    00000072: 	andq	$-0x2, %r10
    00000076: 	shlq	$0x4, %rbp
    0000007a: 	leaq	(%r15,%r10,8), %rbx
    0000007e: 	addq	%r15, %rbp
    00000081: 	cmpq	$0x8, %r14
    00000085: 	cmoveq	%r15, %rbx
    00000089: 	xorl	%r12d, %r12d
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp1781:
    00000090: 	cmpq	%r13, %r15
    00000093: 	je	.Ltmp1776 # Offset: 147
.Ltmp1789:
    00000099: 	cmpq	$0x8, %r14
    0000009d: 	je	.Ltmp1777 # Offset: 157
    000000a3: 	movq	%r15, %rax
    000000a6: 	movapd	%xmm4, %xmm0
    000000aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1778:
    000000b0: 	movsd	(%rax), %xmm1
    000000b4: 	addq	$0x10, %rax
    000000b8: 	addsd	%xmm1, %xmm0
    000000bc: 	movsd	-0x8(%rax), %xmm1
    000000c1: 	addsd	%xmm1, %xmm0
    000000c5: 	cmpq	%rax, %rbp
    000000c8: 	jne	.Ltmp1778 # Offset: 200
    000000ca: 	cmpq	%rcx, %r10
    000000cd: 	je	.Ltmp1779 # Offset: 205
.Ltmp1790:
    000000cf: 	addsd	(%rbx), %xmm0
.Ltmp1779:
    000000d3: 	movapd	%xmm2, %xmm1
    000000d7: 	mulsd	%xmm3, %xmm1
    000000db: 	ucomisd	%xmm0, %xmm1
    000000df: 	jp	.Ltmp1780 # Offset: 223
    000000e5: 	jne	.Ltmp1780 # Offset: 229
    000000eb: 	addl	$0x1, %r12d
    000000ef: 	cmpl	%edx, %r12d
    000000f2: 	jl	.Ltmp1781 # Offset: 242
.Ltmp1775:
    000000f4: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000fb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000102: 	subq	$0x20, %rax
    00000106: 	cmpq	%rax, %rbx
    00000109: 	je	.Ltmp1782 # Offset: 265
    0000010f: 	movq	0x18(%rsp), %rax
    00000114: 	leaq	0x10(%rbx), %rdi
    00000118: 	movq	%rdi, (%rbx)
    0000011b: 	movq	(%rax), %rbp
    0000011e: 	movq	0x8(%rax), %r12
    00000122: 	movq	%rbp, %rax
    00000125: 	addq	%r12, %rax
    00000128: 	je	.Ltmp1783 # Offset: 296
    0000012a: 	testq	%rbp, %rbp
    0000012d: 	je	.Ltmp1784 # Offset: 301
.Ltmp1783:
    00000133: 	movq	%r12, 0x20(%rsp)
    00000138: 	cmpq	$0xf, %r12
    0000013c: 	ja	.Ltmp1785 # Offset: 316
    00000142: 	cmpq	$0x1, %r12
    00000146: 	jne	.Ltmp1786 # Offset: 326
    0000014c: 	movzbl	(%rbp), %eax
    00000150: 	movb	%al, 0x10(%rbx)
.Ltmp1791:
    00000153: 	movq	%r12, 0x8(%rbx)
    00000157: 	movb	$0x0, (%rdi,%r12)
    0000015c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000163: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000016a: 	addq	$0x20, %rax
    0000016e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000175: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000017c: 	je	.Ltmp1787 # Offset: 380
.Ltmp1792:
    00000182: 	movq	-0x20(%rax), %rbp
    00000186: 	callq	clock@PLT # Offset: 390
    0000018b: 	movq	%rax, end_time(%rip)
    00000192: 	movq	0x28(%rsp), %rdx
    00000197: 	subq	%fs:0x28, %rdx
    000001a0: 	jne	.Ltmp1788 # Offset: 416
    000001a6: 	subq	start_time(%rip), %rax
    000001ad: 	pxor	%xmm0, %xmm0
    000001b1: 	movq	%rbp, %rdi
    000001b4: 	cvtsi2sd	%rax, %xmm0
    000001b9: 	divsd	DATAat0x24890(%rip), %xmm0
    000001c1: 	addq	$0x38, %rsp
    000001c5: 	popq	%rbx
    000001c6: 	popq	%rbp
    000001c7: 	popq	%r12
    000001c9: 	popq	%r13
    000001cb: 	popq	%r14
    000001cd: 	popq	%r15
    000001cf: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 463
    000001d4: 	nopl	(%rax) # Size: 4
.Ltmp1780:
    000001d8: 	movq	0x18(%rsp), %rax
    000001dd: 	leaq	DATAat0x246f9(%rip), %rsi
    000001e4: 	movl	$0x1, %edi
    000001e9: 	movq	%rcx, 0x10(%rsp)
    000001ee: 	movq	%r10, 0x8(%rsp)
    000001f3: 	addl	$0x1, %r12d
    000001f7: 	movq	(%rax), %rdx
    000001fa: 	xorl	%eax, %eax
    000001fc: 	callq	__printf_chk@PLT # Offset: 508
    00000201: 	movl	iterations(%rip), %edx
    00000207: 	cmpl	%r12d, %edx
    0000020a: 	jle	.Ltmp1775 # Offset: 522
    00000210: 	movq	DATAat0x248a0(%rip), %rax
    00000217: 	movq	0x8(%rsp), %r10
    0000021c: 	pxor	%xmm4, %xmm4
    00000220: 	movsd	init_value(%rip), %xmm2
    00000228: 	movq	0x10(%rsp), %rcx
    0000022d: 	movq	%rax, %xmm3
    00000232: 	cmpq	%r13, %r15
    00000235: 	jne	.Ltmp1789 # Offset: 565
.Ltmp1776:
    0000023b: 	movapd	%xmm4, %xmm0
    0000023f: 	jmp	.Ltmp1779 # Offset: 575
    00000244: 	nopl	(%rax) # Size: 4
.Ltmp1777:
    00000248: 	movapd	%xmm4, %xmm0
    0000024c: 	jmp	.Ltmp1790 # Offset: 588
.Ltmp1785:
    00000251: 	movq	%rbx, %rdi
    00000254: 	leaq	0x20(%rsp), %rsi
    00000259: 	xorl	%edx, %edx
    0000025b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 603
    00000260: 	movq	%rax, (%rbx)
    00000263: 	movq	%rax, %rdi
    00000266: 	movq	0x20(%rsp), %rax
    0000026b: 	movq	%rax, 0x10(%rbx)
.Ltmp1793:
    0000026f: 	movq	%r12, %rdx
    00000272: 	movq	%rbp, %rsi
    00000275: 	callq	memcpy@PLT # Offset: 629
    0000027a: 	movq	0x20(%rsp), %r12
    0000027f: 	movq	(%rbx), %rdi
    00000282: 	jmp	.Ltmp1791 # Offset: 642
.Ltmp1782:
    00000287: 	movq	0x18(%rsp), %rsi
    0000028c: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000293: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 659
    00000298: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000029f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002a6: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002ad: 	jne	.Ltmp1792 # Offset: 685
.Ltmp1787:
    000002b3: 	movq	-0x8(%rdx), %rax
    000002b7: 	addq	$0x200, %rax
    000002bd: 	jmp	.Ltmp1792 # Offset: 701
.Ltmp1786:
    000002c2: 	testq	%r12, %r12
    000002c5: 	je	.Ltmp1791 # Offset: 709
    000002cb: 	jmp	.Ltmp1793 # Offset: 715
.Ltmp1788:
    000002cd: 	callq	__stack_chk_fail@PLT # Offset: 717
.Ltmp1784:
    000002d2: 	leaq	DATAat0x24158(%rip), %rdi
    000002d9: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 729
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z15test_accumulateIdPdPFdPKdS2_dEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 225
  State       : disassembled
  Address     : 0x10dc0
  Size        : 0x23c
  MaxSize     : 0x240
  Offset      : 0x10dc0
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateIdPdPFdPKdS2_dEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0224:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	xorl	%r15d, %r15d
    00000009: 	pushq	%r14
    0000000b: 	leaq	DATAat0x246f9(%rip), %r14
    00000012: 	pushq	%r13
    00000014: 	movq	%rcx, %r13
    00000017: 	pushq	%r12
    00000019: 	movq	%rdi, %r12
    0000001c: 	pushq	%rbp
    0000001d: 	movq	%rsi, %rbp
    00000020: 	pushq	%rbx
    00000021: 	movq	%rdx, %rbx
    00000024: 	subq	$0x28, %rsp
    00000028: 	movsd	%xmm0, 0x8(%rsp)
    0000002e: 	movq	%fs:0x28, %rax
    00000037: 	movq	%rax, 0x18(%rsp)
    0000003c: 	xorl	%eax, %eax
    0000003e: 	callq	clock@PLT # Offset: 62
    00000043: 	movq	%rax, start_time(%rip)
    0000004a: 	movl	iterations(%rip), %eax
    00000050: 	testl	%eax, %eax
    00000052: 	jle	.Ltmp1794 # Offset: 82
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp1796:
    00000058: 	movsd	0x8(%rsp), %xmm0
    0000005e: 	movq	%rbp, %rsi
    00000061: 	movq	%r12, %rdi
    00000064: 	callq	*%rbx # Offset: 100
    00000066: 	movapd	%xmm0, %xmm1
    0000006a: 	movsd	DATAat0x248a0(%rip), %xmm0
    00000072: 	mulsd	init_value(%rip), %xmm0
    0000007a: 	ucomisd	%xmm0, %xmm1
    0000007e: 	jp	.Ltmp1795 # Offset: 126
    00000084: 	jne	.Ltmp1795 # Offset: 132
    0000008a: 	addl	$0x1, %r15d
    0000008e: 	cmpl	%r15d, iterations(%rip)
    00000095: 	jg	.Ltmp1796 # Offset: 149
.Ltmp1794:
    00000097: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000009e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000a5: 	subq	$0x20, %rax
    000000a9: 	cmpq	%rax, %rbx
    000000ac: 	je	.Ltmp1797 # Offset: 172
    000000b2: 	leaq	0x10(%rbx), %rdi
    000000b6: 	movq	0x8(%r13), %r12
    000000ba: 	movq	%rdi, (%rbx)
    000000bd: 	movq	(%r13), %rbp
    000000c1: 	movq	%rbp, %rax
    000000c4: 	addq	%r12, %rax
    000000c7: 	je	.Ltmp1798 # Offset: 199
    000000c9: 	testq	%rbp, %rbp
    000000cc: 	je	.Ltmp1799 # Offset: 204
.Ltmp1798:
    000000d2: 	movq	%r12, 0x10(%rsp)
    000000d7: 	cmpq	$0xf, %r12
    000000db: 	ja	.Ltmp1800 # Offset: 219
    000000e1: 	cmpq	$0x1, %r12
    000000e5: 	jne	.Ltmp1801 # Offset: 229
    000000eb: 	movzbl	(%rbp), %eax
    000000ef: 	movb	%al, 0x10(%rbx)
.Ltmp1804:
    000000f2: 	movq	%r12, 0x8(%rbx)
    000000f6: 	movb	$0x0, (%rdi,%r12)
    000000fb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000102: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000109: 	addq	$0x20, %rax
    0000010d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000114: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000011b: 	je	.Ltmp1802 # Offset: 283
.Ltmp1805:
    00000121: 	movq	-0x20(%rax), %rbp
    00000125: 	callq	clock@PLT # Offset: 293
    0000012a: 	movq	%rax, end_time(%rip)
    00000131: 	movq	0x18(%rsp), %rdx
    00000136: 	subq	%fs:0x28, %rdx
    0000013f: 	jne	.Ltmp1803 # Offset: 319
    00000145: 	subq	start_time(%rip), %rax
    0000014c: 	pxor	%xmm0, %xmm0
    00000150: 	movq	%rbp, %rdi
    00000153: 	cvtsi2sd	%rax, %xmm0
    00000158: 	divsd	DATAat0x24890(%rip), %xmm0
    00000160: 	addq	$0x28, %rsp
    00000164: 	popq	%rbx
    00000165: 	popq	%rbp
    00000166: 	popq	%r12
    00000168: 	popq	%r13
    0000016a: 	popq	%r14
    0000016c: 	popq	%r15
    0000016e: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 366
    00000173: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1795:
    00000178: 	movq	(%r13), %rdx
    0000017c: 	xorl	%eax, %eax
    0000017e: 	movq	%r14, %rsi
    00000181: 	movl	$0x1, %edi
    00000186: 	addl	$0x1, %r15d
    0000018a: 	callq	__printf_chk@PLT # Offset: 394
    0000018f: 	cmpl	%r15d, iterations(%rip)
    00000196: 	jg	.Ltmp1796 # Offset: 406
    0000019c: 	jmp	.Ltmp1794 # Offset: 412
    000001a1: 	nopl	(%rax) # Size: 7
.Ltmp1800:
    000001a8: 	movq	%rbx, %rdi
    000001ab: 	leaq	0x10(%rsp), %rsi
    000001b0: 	xorl	%edx, %edx
    000001b2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 434
    000001b7: 	movq	%rax, (%rbx)
    000001ba: 	movq	%rax, %rdi
    000001bd: 	movq	0x10(%rsp), %rax
    000001c2: 	movq	%rax, 0x10(%rbx)
.Ltmp1806:
    000001c6: 	movq	%r12, %rdx
    000001c9: 	movq	%rbp, %rsi
    000001cc: 	callq	memcpy@PLT # Offset: 460
    000001d1: 	movq	0x10(%rsp), %r12
    000001d6: 	movq	(%rbx), %rdi
    000001d9: 	jmp	.Ltmp1804 # Offset: 473
    000001de: 	nop # Size: 2
.Ltmp1797:
    000001e0: 	movq	%r13, %rsi
    000001e3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001ea: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 490
    000001ef: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001f6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001fd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000204: 	jne	.Ltmp1805 # Offset: 516
.Ltmp1802:
    0000020a: 	movq	-0x8(%rdx), %rax
    0000020e: 	addq	$0x200, %rax
    00000214: 	jmp	.Ltmp1805 # Offset: 532
    00000219: 	nopl	(%rax) # Size: 7
.Ltmp1801:
    00000220: 	testq	%r12, %r12
    00000223: 	je	.Ltmp1804 # Offset: 547
    00000229: 	jmp	.Ltmp1806 # Offset: 553
.Ltmp1803:
    0000022b: 	callq	__stack_chk_fail@PLT # Offset: 555
.Ltmp1799:
    00000230: 	leaq	DATAat0x24158(%rip), %rdi
    00000237: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 567
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateIdPdPFdPKdS2_dEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15test_accumulateIdN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFdS6_S6_dEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 226
  State       : disassembled
  Address     : 0x11000
  Size        : 0x23c
  MaxSize     : 0x240
  Offset      : 0x11000
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateIdN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFdS6_S6_dEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0225:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	xorl	%r15d, %r15d
    00000009: 	pushq	%r14
    0000000b: 	leaq	DATAat0x246f9(%rip), %r14
    00000012: 	pushq	%r13
    00000014: 	movq	%rcx, %r13
    00000017: 	pushq	%r12
    00000019: 	movq	%rdi, %r12
    0000001c: 	pushq	%rbp
    0000001d: 	movq	%rsi, %rbp
    00000020: 	pushq	%rbx
    00000021: 	movq	%rdx, %rbx
    00000024: 	subq	$0x28, %rsp
    00000028: 	movsd	%xmm0, 0x8(%rsp)
    0000002e: 	movq	%fs:0x28, %rax
    00000037: 	movq	%rax, 0x18(%rsp)
    0000003c: 	xorl	%eax, %eax
    0000003e: 	callq	clock@PLT # Offset: 62
    00000043: 	movq	%rax, start_time(%rip)
    0000004a: 	movl	iterations(%rip), %eax
    00000050: 	testl	%eax, %eax
    00000052: 	jle	.Ltmp1807 # Offset: 82
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp1809:
    00000058: 	movsd	0x8(%rsp), %xmm0
    0000005e: 	movq	%rbp, %rsi
    00000061: 	movq	%r12, %rdi
    00000064: 	callq	*%rbx # Offset: 100
    00000066: 	movapd	%xmm0, %xmm1
    0000006a: 	movsd	DATAat0x248a0(%rip), %xmm0
    00000072: 	mulsd	init_value(%rip), %xmm0
    0000007a: 	ucomisd	%xmm0, %xmm1
    0000007e: 	jp	.Ltmp1808 # Offset: 126
    00000084: 	jne	.Ltmp1808 # Offset: 132
    0000008a: 	addl	$0x1, %r15d
    0000008e: 	cmpl	%r15d, iterations(%rip)
    00000095: 	jg	.Ltmp1809 # Offset: 149
.Ltmp1807:
    00000097: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000009e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000a5: 	subq	$0x20, %rax
    000000a9: 	cmpq	%rax, %rbx
    000000ac: 	je	.Ltmp1810 # Offset: 172
    000000b2: 	leaq	0x10(%rbx), %rdi
    000000b6: 	movq	0x8(%r13), %r12
    000000ba: 	movq	%rdi, (%rbx)
    000000bd: 	movq	(%r13), %rbp
    000000c1: 	movq	%rbp, %rax
    000000c4: 	addq	%r12, %rax
    000000c7: 	je	.Ltmp1811 # Offset: 199
    000000c9: 	testq	%rbp, %rbp
    000000cc: 	je	.Ltmp1812 # Offset: 204
.Ltmp1811:
    000000d2: 	movq	%r12, 0x10(%rsp)
    000000d7: 	cmpq	$0xf, %r12
    000000db: 	ja	.Ltmp1813 # Offset: 219
    000000e1: 	cmpq	$0x1, %r12
    000000e5: 	jne	.Ltmp1814 # Offset: 229
    000000eb: 	movzbl	(%rbp), %eax
    000000ef: 	movb	%al, 0x10(%rbx)
.Ltmp1817:
    000000f2: 	movq	%r12, 0x8(%rbx)
    000000f6: 	movb	$0x0, (%rdi,%r12)
    000000fb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000102: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000109: 	addq	$0x20, %rax
    0000010d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000114: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000011b: 	je	.Ltmp1815 # Offset: 283
.Ltmp1818:
    00000121: 	movq	-0x20(%rax), %rbp
    00000125: 	callq	clock@PLT # Offset: 293
    0000012a: 	movq	%rax, end_time(%rip)
    00000131: 	movq	0x18(%rsp), %rdx
    00000136: 	subq	%fs:0x28, %rdx
    0000013f: 	jne	.Ltmp1816 # Offset: 319
    00000145: 	subq	start_time(%rip), %rax
    0000014c: 	pxor	%xmm0, %xmm0
    00000150: 	movq	%rbp, %rdi
    00000153: 	cvtsi2sd	%rax, %xmm0
    00000158: 	divsd	DATAat0x24890(%rip), %xmm0
    00000160: 	addq	$0x28, %rsp
    00000164: 	popq	%rbx
    00000165: 	popq	%rbp
    00000166: 	popq	%r12
    00000168: 	popq	%r13
    0000016a: 	popq	%r14
    0000016c: 	popq	%r15
    0000016e: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 366
    00000173: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1808:
    00000178: 	movq	(%r13), %rdx
    0000017c: 	xorl	%eax, %eax
    0000017e: 	movq	%r14, %rsi
    00000181: 	movl	$0x1, %edi
    00000186: 	addl	$0x1, %r15d
    0000018a: 	callq	__printf_chk@PLT # Offset: 394
    0000018f: 	cmpl	%r15d, iterations(%rip)
    00000196: 	jg	.Ltmp1809 # Offset: 406
    0000019c: 	jmp	.Ltmp1807 # Offset: 412
    000001a1: 	nopl	(%rax) # Size: 7
.Ltmp1813:
    000001a8: 	movq	%rbx, %rdi
    000001ab: 	leaq	0x10(%rsp), %rsi
    000001b0: 	xorl	%edx, %edx
    000001b2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 434
    000001b7: 	movq	%rax, (%rbx)
    000001ba: 	movq	%rax, %rdi
    000001bd: 	movq	0x10(%rsp), %rax
    000001c2: 	movq	%rax, 0x10(%rbx)
.Ltmp1819:
    000001c6: 	movq	%r12, %rdx
    000001c9: 	movq	%rbp, %rsi
    000001cc: 	callq	memcpy@PLT # Offset: 460
    000001d1: 	movq	0x10(%rsp), %r12
    000001d6: 	movq	(%rbx), %rdi
    000001d9: 	jmp	.Ltmp1817 # Offset: 473
    000001de: 	nop # Size: 2
.Ltmp1810:
    000001e0: 	movq	%r13, %rsi
    000001e3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001ea: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 490
    000001ef: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001f6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001fd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000204: 	jne	.Ltmp1818 # Offset: 516
.Ltmp1815:
    0000020a: 	movq	-0x8(%rdx), %rax
    0000020e: 	addq	$0x200, %rax
    00000214: 	jmp	.Ltmp1818 # Offset: 532
    00000219: 	nopl	(%rax) # Size: 7
.Ltmp1814:
    00000220: 	testq	%r12, %r12
    00000223: 	je	.Ltmp1817 # Offset: 547
    00000229: 	jmp	.Ltmp1819 # Offset: 553
.Ltmp1816:
    0000022b: 	callq	__stack_chk_fail@PLT # Offset: 555
.Ltmp1812:
    00000230: 	leaq	DATAat0x24158(%rip), %rdi
    00000237: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 567
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateIdN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFdS6_S6_dEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15test_accumulateIsPsPFsPKsS2_sEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 227
  State       : disassembled
  Address     : 0x11240
  Size        : 0x23c
  MaxSize     : 0x240
  Offset      : 0x11240
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateIsPsPFsPKsS2_sEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0226:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x246f9(%rip), %r15
    0000000d: 	pushq	%r14
    0000000f: 	movq	%rcx, %r14
    00000012: 	pushq	%r13
    00000014: 	movq	%rsi, %r13
    00000017: 	pushq	%r12
    00000019: 	movq	%rdi, %r12
    0000001c: 	pushq	%rbp
    0000001d: 	movl	%edx, %ebp
    0000001f: 	pushq	%rbx
    00000020: 	movswl	%bp, %ebp
    00000023: 	xorl	%ebx, %ebx
    00000025: 	subq	$0x28, %rsp
    00000029: 	movq	%r8, 0x8(%rsp)
    0000002e: 	movq	%fs:0x28, %rax
    00000037: 	movq	%rax, 0x18(%rsp)
    0000003c: 	xorl	%eax, %eax
    0000003e: 	callq	clock@PLT # Offset: 62
    00000043: 	movq	%rax, start_time(%rip)
    0000004a: 	movl	iterations(%rip), %eax
    00000050: 	testl	%eax, %eax
    00000052: 	jle	.Ltmp1820 # Offset: 82
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp1822:
    00000058: 	movl	%ebp, %edx
    0000005a: 	movq	%r13, %rsi
    0000005d: 	movq	%r12, %rdi
    00000060: 	callq	*%r14 # Offset: 96
    00000063: 	movsd	DATAat0x248a0(%rip), %xmm0
    0000006b: 	mulsd	init_value(%rip), %xmm0
    00000073: 	movl	%eax, %r8d
    00000076: 	cvttsd2si	%xmm0, %eax
    0000007a: 	cmpw	%ax, %r8w
    0000007e: 	je	.Ltmp1821 # Offset: 126
    00000084: 	movq	0x8(%rsp), %rax
    00000089: 	movq	%r15, %rsi
    0000008c: 	movl	$0x1, %edi
    00000091: 	addl	$0x1, %ebx
    00000094: 	movq	(%rax), %rdx
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	cmpl	%ebx, iterations(%rip)
    000000a4: 	jg	.Ltmp1822 # Offset: 164
.Ltmp1820:
    000000a6: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000ad: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000b4: 	subq	$0x20, %rax
    000000b8: 	cmpq	%rax, %rbx
    000000bb: 	je	.Ltmp1823 # Offset: 187
    000000c1: 	movq	0x8(%rsp), %rax
    000000c6: 	leaq	0x10(%rbx), %rdi
    000000ca: 	movq	%rdi, (%rbx)
    000000cd: 	movq	(%rax), %rbp
    000000d0: 	movq	0x8(%rax), %r12
    000000d4: 	movq	%rbp, %rax
    000000d7: 	addq	%r12, %rax
    000000da: 	je	.Ltmp1824 # Offset: 218
    000000dc: 	testq	%rbp, %rbp
    000000df: 	je	.Ltmp1825 # Offset: 223
.Ltmp1824:
    000000e5: 	movq	%r12, 0x10(%rsp)
    000000ea: 	cmpq	$0xf, %r12
    000000ee: 	ja	.Ltmp1826 # Offset: 238
    000000f4: 	cmpq	$0x1, %r12
    000000f8: 	jne	.Ltmp1827 # Offset: 248
    000000fe: 	movzbl	(%rbp), %eax
    00000102: 	movb	%al, 0x10(%rbx)
.Ltmp1830:
    00000105: 	movq	%r12, 0x8(%rbx)
    00000109: 	movb	$0x0, (%rdi,%r12)
    0000010e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000115: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000011c: 	addq	$0x20, %rax
    00000120: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000127: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000012e: 	je	.Ltmp1828 # Offset: 302
.Ltmp1831:
    00000134: 	movq	-0x20(%rax), %rbp
    00000138: 	callq	clock@PLT # Offset: 312
    0000013d: 	movq	%rax, end_time(%rip)
    00000144: 	movq	0x18(%rsp), %rdx
    00000149: 	subq	%fs:0x28, %rdx
    00000152: 	jne	.Ltmp1829 # Offset: 338
    00000158: 	subq	start_time(%rip), %rax
    0000015f: 	pxor	%xmm0, %xmm0
    00000163: 	movq	%rbp, %rdi
    00000166: 	cvtsi2sd	%rax, %xmm0
    0000016b: 	divsd	DATAat0x24890(%rip), %xmm0
    00000173: 	addq	$0x28, %rsp
    00000177: 	popq	%rbx
    00000178: 	popq	%rbp
    00000179: 	popq	%r12
    0000017b: 	popq	%r13
    0000017d: 	popq	%r14
    0000017f: 	popq	%r15
    00000181: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 385
    00000186: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1821:
    00000190: 	addl	$0x1, %ebx
    00000193: 	cmpl	%ebx, iterations(%rip)
    00000199: 	jg	.Ltmp1822 # Offset: 409
    0000019f: 	jmp	.Ltmp1820 # Offset: 415
    000001a4: 	nopl	(%rax) # Size: 4
.Ltmp1826:
    000001a8: 	movq	%rbx, %rdi
    000001ab: 	leaq	0x10(%rsp), %rsi
    000001b0: 	xorl	%edx, %edx
    000001b2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 434
    000001b7: 	movq	%rax, (%rbx)
    000001ba: 	movq	%rax, %rdi
    000001bd: 	movq	0x10(%rsp), %rax
    000001c2: 	movq	%rax, 0x10(%rbx)
.Ltmp1832:
    000001c6: 	movq	%r12, %rdx
    000001c9: 	movq	%rbp, %rsi
    000001cc: 	callq	memcpy@PLT # Offset: 460
    000001d1: 	movq	0x10(%rsp), %r12
    000001d6: 	movq	(%rbx), %rdi
    000001d9: 	jmp	.Ltmp1830 # Offset: 473
    000001de: 	nop # Size: 2
.Ltmp1823:
    000001e0: 	movq	0x8(%rsp), %rsi
    000001e5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001ec: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 492
    000001f1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001f8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001ff: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000206: 	jne	.Ltmp1831 # Offset: 518
.Ltmp1828:
    0000020c: 	movq	-0x8(%rdx), %rax
    00000210: 	addq	$0x200, %rax
    00000216: 	jmp	.Ltmp1831 # Offset: 534
    0000021b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1827:
    00000220: 	testq	%r12, %r12
    00000223: 	je	.Ltmp1830 # Offset: 547
    00000229: 	jmp	.Ltmp1832 # Offset: 553
.Ltmp1829:
    0000022b: 	callq	__stack_chk_fail@PLT # Offset: 555
.Ltmp1825:
    00000230: 	leaq	DATAat0x24158(%rip), %rdi
    00000237: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 567
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateIsPsPFsPKsS2_sEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/reference_normalization.cpp/1
  Number      : 228
  State       : disassembled
  Address     : 0x11480
  Size        : 0x354
  MaxSize     : 0x360
  Offset      : 0x11480
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0227:
    00000000: 	pushq	%r15
    00000002: 	movq	%rsi, %r15
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	movq	%rdi, %r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	subq	$0x68, %rsp
    00000014: 	movq	%rdx, 0x28(%rsp)
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x58(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	callq	clock@PLT # Offset: 41
    0000002e: 	movl	iterations(%rip), %esi
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	testl	%esi, %esi
    0000003d: 	jle	.Ltmp1833 # Offset: 61
    00000043: 	leaq	-0x2(%r15), %rbx
    00000047: 	subq	%r12, %rbx
    0000004a: 	movq	%rbx, %rbp
    0000004d: 	shrq	%rbp
    00000050: 	leaq	0x1(%rbp), %rax
    00000054: 	movq	%rax, %rcx
    00000057: 	movq	%rax, 0x10(%rsp)
    0000005c: 	andq	$-0x8, %rax
    00000060: 	shrq	$0x3, %rcx
    00000064: 	leaq	(%r12,%rax,2), %r9
    00000068: 	movq	%rax, 0x8(%rsp)
    0000006d: 	shlq	$0x4, %rcx
    00000071: 	cmpq	$0xc, %rbx
    00000075: 	cmovbeq	%r12, %r9
    00000079: 	leaq	(%rcx,%r12), %rbp
    0000007d: 	xorl	%r14d, %r14d
    00000080: 	leaq	0x2(%r9), %rax
    00000084: 	movq	%r9, %r13
    00000087: 	movq	%rax, 0x18(%rsp)
    0000008c: 	leaq	0x4(%r9), %rax
    00000090: 	movq	%rax, 0x20(%rsp)
    00000095: 	leaq	0x6(%r9), %rax
    00000099: 	movq	%rax, 0x30(%rsp)
    0000009e: 	leaq	0x8(%r9), %rax
    000000a2: 	movq	%rax, 0x38(%rsp)
    000000a7: 	leaq	0xa(%r9), %rax
    000000ab: 	movq	%rax, 0x40(%rsp)
    000000b0: 	leaq	0xc(%r9), %rax
    000000b4: 	movq	%rax, 0x48(%rsp)
.Ltmp1839:
    000000b9: 	movsd	init_value(%rip), %xmm1
    000000c1: 	cmpq	%r15, %r12
    000000c4: 	je	.Ltmp1834 # Offset: 196
.Ltmp1847:
    000000ca: 	cmpq	$0xc, %rbx
    000000ce: 	jbe	.Ltmp1835 # Offset: 206
    000000d4: 	movq	%r12, %rax
    000000d7: 	pxor	%xmm0, %xmm0
    000000db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1836:
    000000e0: 	movdqu	(%rax), %xmm3
    000000e4: 	addq	$0x10, %rax
    000000e8: 	paddw	%xmm3, %xmm0
    000000ec: 	cmpq	%rbp, %rax
    000000ef: 	jne	.Ltmp1836 # Offset: 239
    000000f1: 	movdqa	%xmm0, %xmm2
    000000f5: 	movq	0x10(%rsp), %rdi
    000000fa: 	psrldq	$0x8, %xmm2
    000000ff: 	paddw	%xmm2, %xmm0
    00000103: 	movdqa	%xmm0, %xmm2
    00000107: 	psrldq	$0x4, %xmm2
    0000010c: 	paddw	%xmm2, %xmm0
    00000110: 	movdqa	%xmm0, %xmm2
    00000114: 	psrldq	$0x2, %xmm2
    00000119: 	paddw	%xmm2, %xmm0
    0000011d: 	pextrw	$0x0, %xmm0, %eax
    00000122: 	cmpq	%rdi, 0x8(%rsp)
    00000127: 	je	.Ltmp1837 # Offset: 295
.Ltmp1848:
    00000129: 	addw	(%r13), %ax
    0000012e: 	cmpq	0x18(%rsp), %r15
    00000133: 	je	.Ltmp1837 # Offset: 307
    00000135: 	addw	0x2(%r13), %ax
    0000013a: 	cmpq	0x20(%rsp), %r15
    0000013f: 	je	.Ltmp1837 # Offset: 319
    00000141: 	addw	0x4(%r13), %ax
    00000146: 	cmpq	0x30(%rsp), %r15
    0000014b: 	je	.Ltmp1837 # Offset: 331
    0000014d: 	addw	0x6(%r13), %ax
    00000152: 	cmpq	0x38(%rsp), %r15
    00000157: 	je	.Ltmp1837 # Offset: 343
    00000159: 	addw	0x8(%r13), %ax
    0000015e: 	cmpq	0x40(%rsp), %r15
    00000163: 	je	.Ltmp1837 # Offset: 355
    00000165: 	addw	0xa(%r13), %ax
    0000016a: 	cmpq	0x48(%rsp), %r15
    0000016f: 	je	.Ltmp1837 # Offset: 367
    00000171: 	addw	0xc(%r13), %ax
.Ltmp1837:
    00000176: 	movsd	DATAat0x248a0(%rip), %xmm0
    0000017e: 	mulsd	%xmm1, %xmm0
    00000182: 	cvttsd2si	%xmm0, %edx
    00000186: 	cmpw	%ax, %dx
    00000189: 	je	.Ltmp1838 # Offset: 393
    0000018f: 	movq	0x28(%rsp), %rax
    00000194: 	leaq	DATAat0x246f9(%rip), %rsi
    0000019b: 	movl	$0x1, %edi
    000001a0: 	addl	$0x1, %r14d
    000001a4: 	movq	(%rax), %rdx
    000001a7: 	xorl	%eax, %eax
    000001a9: 	callq	__printf_chk@PLT # Offset: 425
    000001ae: 	movl	iterations(%rip), %esi
    000001b4: 	cmpl	%r14d, %esi
    000001b7: 	jg	.Ltmp1839 # Offset: 439
.Ltmp1833:
    000001bd: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001c4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001cb: 	subq	$0x20, %rax
    000001cf: 	cmpq	%rax, %rbx
    000001d2: 	je	.Ltmp1840 # Offset: 466
    000001d8: 	movq	0x28(%rsp), %rax
    000001dd: 	leaq	0x10(%rbx), %rdi
    000001e1: 	movq	%rdi, (%rbx)
    000001e4: 	movq	(%rax), %rbp
    000001e7: 	movq	0x8(%rax), %r12
    000001eb: 	movq	%rbp, %rax
    000001ee: 	addq	%r12, %rax
    000001f1: 	je	.Ltmp1841 # Offset: 497
    000001f3: 	testq	%rbp, %rbp
    000001f6: 	je	.Ltmp1842 # Offset: 502
.Ltmp1841:
    000001fc: 	movq	%r12, 0x50(%rsp)
    00000201: 	cmpq	$0xf, %r12
    00000205: 	ja	.Ltmp1843 # Offset: 517
    0000020b: 	cmpq	$0x1, %r12
    0000020f: 	jne	.Ltmp1844 # Offset: 527
    00000215: 	movzbl	(%rbp), %eax
    00000219: 	movb	%al, 0x10(%rbx)
.Ltmp1849:
    0000021c: 	movq	%r12, 0x8(%rbx)
    00000220: 	movb	$0x0, (%rdi,%r12)
    00000225: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000022c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000233: 	addq	$0x20, %rax
    00000237: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000023e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000245: 	je	.Ltmp1845 # Offset: 581
.Ltmp1850:
    0000024b: 	movq	-0x20(%rax), %rbp
    0000024f: 	callq	clock@PLT # Offset: 591
    00000254: 	movq	%rax, end_time(%rip)
    0000025b: 	movq	0x58(%rsp), %rdx
    00000260: 	subq	%fs:0x28, %rdx
    00000269: 	jne	.Ltmp1846 # Offset: 617
    0000026f: 	subq	start_time(%rip), %rax
    00000276: 	pxor	%xmm0, %xmm0
    0000027a: 	movq	%rbp, %rdi
    0000027d: 	cvtsi2sd	%rax, %xmm0
    00000282: 	divsd	DATAat0x24890(%rip), %xmm0
    0000028a: 	addq	$0x68, %rsp
    0000028e: 	popq	%rbx
    0000028f: 	popq	%rbp
    00000290: 	popq	%r12
    00000292: 	popq	%r13
    00000294: 	popq	%r14
    00000296: 	popq	%r15
    00000298: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 664
    0000029d: 	nopl	(%rax) # Size: 3
.Ltmp1838:
    000002a0: 	addl	$0x1, %r14d
    000002a4: 	cmpl	%esi, %r14d
    000002a7: 	jge	.Ltmp1833 # Offset: 679
    000002ad: 	cmpq	%r15, %r12
    000002b0: 	jne	.Ltmp1847 # Offset: 688
.Ltmp1834:
    000002b6: 	xorl	%eax, %eax
    000002b8: 	jmp	.Ltmp1837 # Offset: 696
    000002bd: 	nopl	(%rax) # Size: 3
.Ltmp1835:
    000002c0: 	xorl	%eax, %eax
    000002c2: 	jmp	.Ltmp1848 # Offset: 706
.Ltmp1843:
    000002c7: 	movq	%rbx, %rdi
    000002ca: 	leaq	0x50(%rsp), %rsi
    000002cf: 	xorl	%edx, %edx
    000002d1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 721
    000002d6: 	movq	%rax, (%rbx)
    000002d9: 	movq	%rax, %rdi
    000002dc: 	movq	0x50(%rsp), %rax
    000002e1: 	movq	%rax, 0x10(%rbx)
.Ltmp1851:
    000002e5: 	movq	%r12, %rdx
    000002e8: 	movq	%rbp, %rsi
    000002eb: 	callq	memcpy@PLT # Offset: 747
    000002f0: 	movq	0x50(%rsp), %r12
    000002f5: 	movq	(%rbx), %rdi
    000002f8: 	jmp	.Ltmp1849 # Offset: 760
.Ltmp1840:
    000002fd: 	movq	0x28(%rsp), %rsi
    00000302: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000309: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 777
    0000030e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000315: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000031c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000323: 	jne	.Ltmp1850 # Offset: 803
.Ltmp1845:
    00000329: 	movq	-0x8(%rdx), %rax
    0000032d: 	addq	$0x200, %rax
    00000333: 	jmp	.Ltmp1850 # Offset: 819
.Ltmp1844:
    00000338: 	testq	%r12, %r12
    0000033b: 	je	.Ltmp1849 # Offset: 827
    00000341: 	jmp	.Ltmp1851 # Offset: 833
.Ltmp1846:
    00000343: 	callq	__stack_chk_fail@PLT # Offset: 835
.Ltmp1842:
    00000348: 	leaq	DATAat0x24158(%rip), %rdi
    0000034f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 847
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z15test_accumulateItPtPFtPKtS2_tEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 229
  State       : disassembled
  Address     : 0x117e0
  Size        : 0x23c
  MaxSize     : 0x240
  Offset      : 0x117e0
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateItPtPFtPKtS2_tEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0228:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x246f9(%rip), %r15
    0000000d: 	pushq	%r14
    0000000f: 	movq	%rcx, %r14
    00000012: 	pushq	%r13
    00000014: 	movq	%rsi, %r13
    00000017: 	pushq	%r12
    00000019: 	movq	%rdi, %r12
    0000001c: 	pushq	%rbp
    0000001d: 	movl	%edx, %ebp
    0000001f: 	pushq	%rbx
    00000020: 	movzwl	%bp, %ebp
    00000023: 	xorl	%ebx, %ebx
    00000025: 	subq	$0x28, %rsp
    00000029: 	movq	%r8, 0x8(%rsp)
    0000002e: 	movq	%fs:0x28, %rax
    00000037: 	movq	%rax, 0x18(%rsp)
    0000003c: 	xorl	%eax, %eax
    0000003e: 	callq	clock@PLT # Offset: 62
    00000043: 	movq	%rax, start_time(%rip)
    0000004a: 	movl	iterations(%rip), %eax
    00000050: 	testl	%eax, %eax
    00000052: 	jle	.Ltmp1852 # Offset: 82
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp1854:
    00000058: 	movl	%ebp, %edx
    0000005a: 	movq	%r13, %rsi
    0000005d: 	movq	%r12, %rdi
    00000060: 	callq	*%r14 # Offset: 96
    00000063: 	movsd	DATAat0x248a0(%rip), %xmm0
    0000006b: 	mulsd	init_value(%rip), %xmm0
    00000073: 	movl	%eax, %r8d
    00000076: 	cvttsd2si	%xmm0, %eax
    0000007a: 	cmpw	%ax, %r8w
    0000007e: 	je	.Ltmp1853 # Offset: 126
    00000084: 	movq	0x8(%rsp), %rax
    00000089: 	movq	%r15, %rsi
    0000008c: 	movl	$0x1, %edi
    00000091: 	addl	$0x1, %ebx
    00000094: 	movq	(%rax), %rdx
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	cmpl	%ebx, iterations(%rip)
    000000a4: 	jg	.Ltmp1854 # Offset: 164
.Ltmp1852:
    000000a6: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000ad: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000b4: 	subq	$0x20, %rax
    000000b8: 	cmpq	%rax, %rbx
    000000bb: 	je	.Ltmp1855 # Offset: 187
    000000c1: 	movq	0x8(%rsp), %rax
    000000c6: 	leaq	0x10(%rbx), %rdi
    000000ca: 	movq	%rdi, (%rbx)
    000000cd: 	movq	(%rax), %rbp
    000000d0: 	movq	0x8(%rax), %r12
    000000d4: 	movq	%rbp, %rax
    000000d7: 	addq	%r12, %rax
    000000da: 	je	.Ltmp1856 # Offset: 218
    000000dc: 	testq	%rbp, %rbp
    000000df: 	je	.Ltmp1857 # Offset: 223
.Ltmp1856:
    000000e5: 	movq	%r12, 0x10(%rsp)
    000000ea: 	cmpq	$0xf, %r12
    000000ee: 	ja	.Ltmp1858 # Offset: 238
    000000f4: 	cmpq	$0x1, %r12
    000000f8: 	jne	.Ltmp1859 # Offset: 248
    000000fe: 	movzbl	(%rbp), %eax
    00000102: 	movb	%al, 0x10(%rbx)
.Ltmp1862:
    00000105: 	movq	%r12, 0x8(%rbx)
    00000109: 	movb	$0x0, (%rdi,%r12)
    0000010e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000115: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000011c: 	addq	$0x20, %rax
    00000120: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000127: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000012e: 	je	.Ltmp1860 # Offset: 302
.Ltmp1863:
    00000134: 	movq	-0x20(%rax), %rbp
    00000138: 	callq	clock@PLT # Offset: 312
    0000013d: 	movq	%rax, end_time(%rip)
    00000144: 	movq	0x18(%rsp), %rdx
    00000149: 	subq	%fs:0x28, %rdx
    00000152: 	jne	.Ltmp1861 # Offset: 338
    00000158: 	subq	start_time(%rip), %rax
    0000015f: 	pxor	%xmm0, %xmm0
    00000163: 	movq	%rbp, %rdi
    00000166: 	cvtsi2sd	%rax, %xmm0
    0000016b: 	divsd	DATAat0x24890(%rip), %xmm0
    00000173: 	addq	$0x28, %rsp
    00000177: 	popq	%rbx
    00000178: 	popq	%rbp
    00000179: 	popq	%r12
    0000017b: 	popq	%r13
    0000017d: 	popq	%r14
    0000017f: 	popq	%r15
    00000181: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 385
    00000186: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1853:
    00000190: 	addl	$0x1, %ebx
    00000193: 	cmpl	%ebx, iterations(%rip)
    00000199: 	jg	.Ltmp1854 # Offset: 409
    0000019f: 	jmp	.Ltmp1852 # Offset: 415
    000001a4: 	nopl	(%rax) # Size: 4
.Ltmp1858:
    000001a8: 	movq	%rbx, %rdi
    000001ab: 	leaq	0x10(%rsp), %rsi
    000001b0: 	xorl	%edx, %edx
    000001b2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 434
    000001b7: 	movq	%rax, (%rbx)
    000001ba: 	movq	%rax, %rdi
    000001bd: 	movq	0x10(%rsp), %rax
    000001c2: 	movq	%rax, 0x10(%rbx)
.Ltmp1864:
    000001c6: 	movq	%r12, %rdx
    000001c9: 	movq	%rbp, %rsi
    000001cc: 	callq	memcpy@PLT # Offset: 460
    000001d1: 	movq	0x10(%rsp), %r12
    000001d6: 	movq	(%rbx), %rdi
    000001d9: 	jmp	.Ltmp1862 # Offset: 473
    000001de: 	nop # Size: 2
.Ltmp1855:
    000001e0: 	movq	0x8(%rsp), %rsi
    000001e5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001ec: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 492
    000001f1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001f8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001ff: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000206: 	jne	.Ltmp1863 # Offset: 518
.Ltmp1860:
    0000020c: 	movq	-0x8(%rdx), %rax
    00000210: 	addq	$0x200, %rax
    00000216: 	jmp	.Ltmp1863 # Offset: 534
    0000021b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1859:
    00000220: 	testq	%r12, %r12
    00000223: 	je	.Ltmp1862 # Offset: 547
    00000229: 	jmp	.Ltmp1864 # Offset: 553
.Ltmp1861:
    0000022b: 	callq	__stack_chk_fail@PLT # Offset: 555
.Ltmp1857:
    00000230: 	leaq	DATAat0x24158(%rip), %rdi
    00000237: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 567
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateItPtPFtPKtS2_tEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_accumulate2DIdPdPFdPKdmmdEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 230
  State       : disassembled
  Address     : 0x11a20
  Size        : 0x23c
  MaxSize     : 0x240
  Offset      : 0x11a20
  Section     : .text
  Orc Section : .local.text._Z17test_accumulate2DIdPdPFdPKdmmdEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0229:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	xorl	%r15d, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%r8, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rdi, %r13
    00000013: 	pushq	%r12
    00000015: 	movq	%rsi, %r12
    00000018: 	pushq	%rbp
    00000019: 	movq	%rdx, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rcx, %rbx
    00000020: 	subq	$0x28, %rsp
    00000024: 	movsd	%xmm0, 0x8(%rsp)
    0000002a: 	movq	%fs:0x28, %rax
    00000033: 	movq	%rax, 0x18(%rsp)
    00000038: 	xorl	%eax, %eax
    0000003a: 	callq	clock@PLT # Offset: 58
    0000003f: 	movq	%rax, start_time(%rip)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	testl	%eax, %eax
    0000004e: 	jle	.Ltmp1865 # Offset: 78
.Ltmp1867:
    00000050: 	movsd	0x8(%rsp), %xmm0
    00000056: 	movq	%rbp, %rdx
    00000059: 	movq	%r12, %rsi
    0000005c: 	movq	%r13, %rdi
    0000005f: 	callq	*%rbx # Offset: 95
    00000061: 	movapd	%xmm0, %xmm1
    00000065: 	movsd	DATAat0x248a8(%rip), %xmm0
    0000006d: 	mulsd	init_value(%rip), %xmm0
    00000075: 	ucomisd	%xmm0, %xmm1
    00000079: 	jp	.Ltmp1866 # Offset: 121
    0000007f: 	jne	.Ltmp1866 # Offset: 127
    00000085: 	addl	$0x1, %r15d
    00000089: 	cmpl	%r15d, iterations(%rip)
    00000090: 	jg	.Ltmp1867 # Offset: 144
.Ltmp1865:
    00000092: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000099: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000a0: 	subq	$0x20, %rax
    000000a4: 	cmpq	%rax, %rbx
    000000a7: 	je	.Ltmp1868 # Offset: 167
    000000ad: 	leaq	0x10(%rbx), %rdi
    000000b1: 	movq	0x8(%r14), %r12
    000000b5: 	movq	%rdi, (%rbx)
    000000b8: 	movq	(%r14), %rbp
    000000bb: 	movq	%rbp, %rax
    000000be: 	addq	%r12, %rax
    000000c1: 	je	.Ltmp1869 # Offset: 193
    000000c3: 	testq	%rbp, %rbp
    000000c6: 	je	.Ltmp1870 # Offset: 198
.Ltmp1869:
    000000cc: 	movq	%r12, 0x10(%rsp)
    000000d1: 	cmpq	$0xf, %r12
    000000d5: 	ja	.Ltmp1871 # Offset: 213
    000000db: 	cmpq	$0x1, %r12
    000000df: 	jne	.Ltmp1872 # Offset: 223
    000000e5: 	movzbl	(%rbp), %eax
    000000e9: 	movb	%al, 0x10(%rbx)
.Ltmp1875:
    000000ec: 	movq	%r12, 0x8(%rbx)
    000000f0: 	movb	$0x0, (%rdi,%r12)
    000000f5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000fc: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000103: 	addq	$0x20, %rax
    00000107: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000010e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000115: 	je	.Ltmp1873 # Offset: 277
.Ltmp1876:
    0000011b: 	movq	-0x20(%rax), %rbp
    0000011f: 	callq	clock@PLT # Offset: 287
    00000124: 	movq	%rax, end_time(%rip)
    0000012b: 	movq	0x18(%rsp), %rdx
    00000130: 	subq	%fs:0x28, %rdx
    00000139: 	jne	.Ltmp1874 # Offset: 313
    0000013f: 	subq	start_time(%rip), %rax
    00000146: 	pxor	%xmm0, %xmm0
    0000014a: 	movq	%rbp, %rdi
    0000014d: 	cvtsi2sd	%rax, %xmm0
    00000152: 	divsd	DATAat0x24890(%rip), %xmm0
    0000015a: 	addq	$0x28, %rsp
    0000015e: 	popq	%rbx
    0000015f: 	popq	%rbp
    00000160: 	popq	%r12
    00000162: 	popq	%r13
    00000164: 	popq	%r14
    00000166: 	popq	%r15
    00000168: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 360
    0000016d: 	nopl	(%rax) # Size: 3
.Ltmp1866:
    00000170: 	movq	(%r14), %rdx
    00000173: 	xorl	%eax, %eax
    00000175: 	leaq	DATAat0x246f9(%rip), %rsi
    0000017c: 	addl	$0x1, %r15d
    00000180: 	movl	$0x1, %edi
    00000185: 	callq	__printf_chk@PLT # Offset: 389
    0000018a: 	cmpl	%r15d, iterations(%rip)
    00000191: 	jg	.Ltmp1867 # Offset: 401
    00000197: 	jmp	.Ltmp1865 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp1871:
    000001a0: 	movq	%rbx, %rdi
    000001a3: 	leaq	0x10(%rsp), %rsi
    000001a8: 	xorl	%edx, %edx
    000001aa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 426
    000001af: 	movq	%rax, (%rbx)
    000001b2: 	movq	%rax, %rdi
    000001b5: 	movq	0x10(%rsp), %rax
    000001ba: 	movq	%rax, 0x10(%rbx)
.Ltmp1877:
    000001be: 	movq	%r12, %rdx
    000001c1: 	movq	%rbp, %rsi
    000001c4: 	callq	memcpy@PLT # Offset: 452
    000001c9: 	movq	0x10(%rsp), %r12
    000001ce: 	movq	(%rbx), %rdi
    000001d1: 	jmp	.Ltmp1875 # Offset: 465
    000001d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1868:
    000001e0: 	movq	%r14, %rsi
    000001e3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001ea: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 490
    000001ef: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001f6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001fd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000204: 	jne	.Ltmp1876 # Offset: 516
.Ltmp1873:
    0000020a: 	movq	-0x8(%rdx), %rax
    0000020e: 	addq	$0x200, %rax
    00000214: 	jmp	.Ltmp1876 # Offset: 532
    00000219: 	nopl	(%rax) # Size: 7
.Ltmp1872:
    00000220: 	testq	%r12, %r12
    00000223: 	je	.Ltmp1875 # Offset: 547
    00000229: 	jmp	.Ltmp1877 # Offset: 553
.Ltmp1874:
    0000022b: 	callq	__stack_chk_fail@PLT # Offset: 555
.Ltmp1870:
    00000230: 	leaq	DATAat0x24158(%rip), %rdi
    00000237: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 567
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_accumulate2DIdPdPFdPKdmmdEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15test_accumulateItN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFtS6_S6_tEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 231
  State       : disassembled
  Address     : 0x11c60
  Size        : 0x23c
  MaxSize     : 0x240
  Offset      : 0x11c60
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateItN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFtS6_S6_tEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0230:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x246f9(%rip), %r15
    0000000d: 	pushq	%r14
    0000000f: 	movq	%rcx, %r14
    00000012: 	pushq	%r13
    00000014: 	movq	%rsi, %r13
    00000017: 	pushq	%r12
    00000019: 	movq	%rdi, %r12
    0000001c: 	pushq	%rbp
    0000001d: 	movl	%edx, %ebp
    0000001f: 	pushq	%rbx
    00000020: 	movzwl	%bp, %ebp
    00000023: 	xorl	%ebx, %ebx
    00000025: 	subq	$0x28, %rsp
    00000029: 	movq	%r8, 0x8(%rsp)
    0000002e: 	movq	%fs:0x28, %rax
    00000037: 	movq	%rax, 0x18(%rsp)
    0000003c: 	xorl	%eax, %eax
    0000003e: 	callq	clock@PLT # Offset: 62
    00000043: 	movq	%rax, start_time(%rip)
    0000004a: 	movl	iterations(%rip), %eax
    00000050: 	testl	%eax, %eax
    00000052: 	jle	.Ltmp1878 # Offset: 82
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp1880:
    00000058: 	movl	%ebp, %edx
    0000005a: 	movq	%r13, %rsi
    0000005d: 	movq	%r12, %rdi
    00000060: 	callq	*%r14 # Offset: 96
    00000063: 	movsd	DATAat0x248a0(%rip), %xmm0
    0000006b: 	mulsd	init_value(%rip), %xmm0
    00000073: 	movl	%eax, %r8d
    00000076: 	cvttsd2si	%xmm0, %eax
    0000007a: 	cmpw	%ax, %r8w
    0000007e: 	je	.Ltmp1879 # Offset: 126
    00000084: 	movq	0x8(%rsp), %rax
    00000089: 	movq	%r15, %rsi
    0000008c: 	movl	$0x1, %edi
    00000091: 	addl	$0x1, %ebx
    00000094: 	movq	(%rax), %rdx
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	cmpl	%ebx, iterations(%rip)
    000000a4: 	jg	.Ltmp1880 # Offset: 164
.Ltmp1878:
    000000a6: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000ad: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000b4: 	subq	$0x20, %rax
    000000b8: 	cmpq	%rax, %rbx
    000000bb: 	je	.Ltmp1881 # Offset: 187
    000000c1: 	movq	0x8(%rsp), %rax
    000000c6: 	leaq	0x10(%rbx), %rdi
    000000ca: 	movq	%rdi, (%rbx)
    000000cd: 	movq	(%rax), %rbp
    000000d0: 	movq	0x8(%rax), %r12
    000000d4: 	movq	%rbp, %rax
    000000d7: 	addq	%r12, %rax
    000000da: 	je	.Ltmp1882 # Offset: 218
    000000dc: 	testq	%rbp, %rbp
    000000df: 	je	.Ltmp1883 # Offset: 223
.Ltmp1882:
    000000e5: 	movq	%r12, 0x10(%rsp)
    000000ea: 	cmpq	$0xf, %r12
    000000ee: 	ja	.Ltmp1884 # Offset: 238
    000000f4: 	cmpq	$0x1, %r12
    000000f8: 	jne	.Ltmp1885 # Offset: 248
    000000fe: 	movzbl	(%rbp), %eax
    00000102: 	movb	%al, 0x10(%rbx)
.Ltmp1888:
    00000105: 	movq	%r12, 0x8(%rbx)
    00000109: 	movb	$0x0, (%rdi,%r12)
    0000010e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000115: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000011c: 	addq	$0x20, %rax
    00000120: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000127: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000012e: 	je	.Ltmp1886 # Offset: 302
.Ltmp1889:
    00000134: 	movq	-0x20(%rax), %rbp
    00000138: 	callq	clock@PLT # Offset: 312
    0000013d: 	movq	%rax, end_time(%rip)
    00000144: 	movq	0x18(%rsp), %rdx
    00000149: 	subq	%fs:0x28, %rdx
    00000152: 	jne	.Ltmp1887 # Offset: 338
    00000158: 	subq	start_time(%rip), %rax
    0000015f: 	pxor	%xmm0, %xmm0
    00000163: 	movq	%rbp, %rdi
    00000166: 	cvtsi2sd	%rax, %xmm0
    0000016b: 	divsd	DATAat0x24890(%rip), %xmm0
    00000173: 	addq	$0x28, %rsp
    00000177: 	popq	%rbx
    00000178: 	popq	%rbp
    00000179: 	popq	%r12
    0000017b: 	popq	%r13
    0000017d: 	popq	%r14
    0000017f: 	popq	%r15
    00000181: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 385
    00000186: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1879:
    00000190: 	addl	$0x1, %ebx
    00000193: 	cmpl	%ebx, iterations(%rip)
    00000199: 	jg	.Ltmp1880 # Offset: 409
    0000019f: 	jmp	.Ltmp1878 # Offset: 415
    000001a4: 	nopl	(%rax) # Size: 4
.Ltmp1884:
    000001a8: 	movq	%rbx, %rdi
    000001ab: 	leaq	0x10(%rsp), %rsi
    000001b0: 	xorl	%edx, %edx
    000001b2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 434
    000001b7: 	movq	%rax, (%rbx)
    000001ba: 	movq	%rax, %rdi
    000001bd: 	movq	0x10(%rsp), %rax
    000001c2: 	movq	%rax, 0x10(%rbx)
.Ltmp1890:
    000001c6: 	movq	%r12, %rdx
    000001c9: 	movq	%rbp, %rsi
    000001cc: 	callq	memcpy@PLT # Offset: 460
    000001d1: 	movq	0x10(%rsp), %r12
    000001d6: 	movq	(%rbx), %rdi
    000001d9: 	jmp	.Ltmp1888 # Offset: 473
    000001de: 	nop # Size: 2
.Ltmp1881:
    000001e0: 	movq	0x8(%rsp), %rsi
    000001e5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001ec: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 492
    000001f1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001f8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001ff: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000206: 	jne	.Ltmp1889 # Offset: 518
.Ltmp1886:
    0000020c: 	movq	-0x8(%rdx), %rax
    00000210: 	addq	$0x200, %rax
    00000216: 	jmp	.Ltmp1889 # Offset: 534
    0000021b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1885:
    00000220: 	testq	%r12, %r12
    00000223: 	je	.Ltmp1888 # Offset: 547
    00000229: 	jmp	.Ltmp1890 # Offset: 553
.Ltmp1887:
    0000022b: 	callq	__stack_chk_fail@PLT # Offset: 555
.Ltmp1883:
    00000230: 	leaq	DATAat0x24158(%rip), %rdi
    00000237: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 567
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateItN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFtS6_S6_tEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15test_accumulateIsN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEPFsS6_S6_sEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 232
  State       : disassembled
  Address     : 0x11ea0
  Size        : 0x23c
  MaxSize     : 0x240
  Offset      : 0x11ea0
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateIsN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEPFsS6_S6_sEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0231:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x246f9(%rip), %r15
    0000000d: 	pushq	%r14
    0000000f: 	movq	%rcx, %r14
    00000012: 	pushq	%r13
    00000014: 	movq	%rsi, %r13
    00000017: 	pushq	%r12
    00000019: 	movq	%rdi, %r12
    0000001c: 	pushq	%rbp
    0000001d: 	movl	%edx, %ebp
    0000001f: 	pushq	%rbx
    00000020: 	movswl	%bp, %ebp
    00000023: 	xorl	%ebx, %ebx
    00000025: 	subq	$0x28, %rsp
    00000029: 	movq	%r8, 0x8(%rsp)
    0000002e: 	movq	%fs:0x28, %rax
    00000037: 	movq	%rax, 0x18(%rsp)
    0000003c: 	xorl	%eax, %eax
    0000003e: 	callq	clock@PLT # Offset: 62
    00000043: 	movq	%rax, start_time(%rip)
    0000004a: 	movl	iterations(%rip), %eax
    00000050: 	testl	%eax, %eax
    00000052: 	jle	.Ltmp1891 # Offset: 82
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp1893:
    00000058: 	movl	%ebp, %edx
    0000005a: 	movq	%r13, %rsi
    0000005d: 	movq	%r12, %rdi
    00000060: 	callq	*%r14 # Offset: 96
    00000063: 	movsd	DATAat0x248a0(%rip), %xmm0
    0000006b: 	mulsd	init_value(%rip), %xmm0
    00000073: 	movl	%eax, %r8d
    00000076: 	cvttsd2si	%xmm0, %eax
    0000007a: 	cmpw	%ax, %r8w
    0000007e: 	je	.Ltmp1892 # Offset: 126
    00000084: 	movq	0x8(%rsp), %rax
    00000089: 	movq	%r15, %rsi
    0000008c: 	movl	$0x1, %edi
    00000091: 	addl	$0x1, %ebx
    00000094: 	movq	(%rax), %rdx
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	cmpl	%ebx, iterations(%rip)
    000000a4: 	jg	.Ltmp1893 # Offset: 164
.Ltmp1891:
    000000a6: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000ad: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000b4: 	subq	$0x20, %rax
    000000b8: 	cmpq	%rax, %rbx
    000000bb: 	je	.Ltmp1894 # Offset: 187
    000000c1: 	movq	0x8(%rsp), %rax
    000000c6: 	leaq	0x10(%rbx), %rdi
    000000ca: 	movq	%rdi, (%rbx)
    000000cd: 	movq	(%rax), %rbp
    000000d0: 	movq	0x8(%rax), %r12
    000000d4: 	movq	%rbp, %rax
    000000d7: 	addq	%r12, %rax
    000000da: 	je	.Ltmp1895 # Offset: 218
    000000dc: 	testq	%rbp, %rbp
    000000df: 	je	.Ltmp1896 # Offset: 223
.Ltmp1895:
    000000e5: 	movq	%r12, 0x10(%rsp)
    000000ea: 	cmpq	$0xf, %r12
    000000ee: 	ja	.Ltmp1897 # Offset: 238
    000000f4: 	cmpq	$0x1, %r12
    000000f8: 	jne	.Ltmp1898 # Offset: 248
    000000fe: 	movzbl	(%rbp), %eax
    00000102: 	movb	%al, 0x10(%rbx)
.Ltmp1901:
    00000105: 	movq	%r12, 0x8(%rbx)
    00000109: 	movb	$0x0, (%rdi,%r12)
    0000010e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000115: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000011c: 	addq	$0x20, %rax
    00000120: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000127: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000012e: 	je	.Ltmp1899 # Offset: 302
.Ltmp1902:
    00000134: 	movq	-0x20(%rax), %rbp
    00000138: 	callq	clock@PLT # Offset: 312
    0000013d: 	movq	%rax, end_time(%rip)
    00000144: 	movq	0x18(%rsp), %rdx
    00000149: 	subq	%fs:0x28, %rdx
    00000152: 	jne	.Ltmp1900 # Offset: 338
    00000158: 	subq	start_time(%rip), %rax
    0000015f: 	pxor	%xmm0, %xmm0
    00000163: 	movq	%rbp, %rdi
    00000166: 	cvtsi2sd	%rax, %xmm0
    0000016b: 	divsd	DATAat0x24890(%rip), %xmm0
    00000173: 	addq	$0x28, %rsp
    00000177: 	popq	%rbx
    00000178: 	popq	%rbp
    00000179: 	popq	%r12
    0000017b: 	popq	%r13
    0000017d: 	popq	%r14
    0000017f: 	popq	%r15
    00000181: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 385
    00000186: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1892:
    00000190: 	addl	$0x1, %ebx
    00000193: 	cmpl	%ebx, iterations(%rip)
    00000199: 	jg	.Ltmp1893 # Offset: 409
    0000019f: 	jmp	.Ltmp1891 # Offset: 415
    000001a4: 	nopl	(%rax) # Size: 4
.Ltmp1897:
    000001a8: 	movq	%rbx, %rdi
    000001ab: 	leaq	0x10(%rsp), %rsi
    000001b0: 	xorl	%edx, %edx
    000001b2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 434
    000001b7: 	movq	%rax, (%rbx)
    000001ba: 	movq	%rax, %rdi
    000001bd: 	movq	0x10(%rsp), %rax
    000001c2: 	movq	%rax, 0x10(%rbx)
.Ltmp1903:
    000001c6: 	movq	%r12, %rdx
    000001c9: 	movq	%rbp, %rsi
    000001cc: 	callq	memcpy@PLT # Offset: 460
    000001d1: 	movq	0x10(%rsp), %r12
    000001d6: 	movq	(%rbx), %rdi
    000001d9: 	jmp	.Ltmp1901 # Offset: 473
    000001de: 	nop # Size: 2
.Ltmp1894:
    000001e0: 	movq	0x8(%rsp), %rsi
    000001e5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001ec: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 492
    000001f1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001f8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001ff: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000206: 	jne	.Ltmp1902 # Offset: 518
.Ltmp1899:
    0000020c: 	movq	-0x8(%rdx), %rax
    00000210: 	addq	$0x200, %rax
    00000216: 	jmp	.Ltmp1902 # Offset: 534
    0000021b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1898:
    00000220: 	testq	%r12, %r12
    00000223: 	je	.Ltmp1901 # Offset: 547
    00000229: 	jmp	.Ltmp1903 # Offset: 553
.Ltmp1900:
    0000022b: 	callq	__stack_chk_fail@PLT # Offset: 555
.Ltmp1896:
    00000230: 	leaq	DATAat0x24158(%rip), %rdi
    00000237: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 567
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateIsN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEPFsS6_S6_sEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/reference_normalization.cpp/1
  Number      : 233
  State       : disassembled
  Address     : 0x120e0
  Size        : 0x354
  MaxSize     : 0x360
  Offset      : 0x120e0
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0232:
    00000000: 	pushq	%r15
    00000002: 	movq	%rsi, %r15
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	movq	%rdi, %r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	subq	$0x68, %rsp
    00000014: 	movq	%rdx, 0x28(%rsp)
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x58(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	callq	clock@PLT # Offset: 41
    0000002e: 	movl	iterations(%rip), %esi
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	testl	%esi, %esi
    0000003d: 	jle	.Ltmp1904 # Offset: 61
    00000043: 	leaq	-0x2(%r15), %rbx
    00000047: 	subq	%r12, %rbx
    0000004a: 	movq	%rbx, %rbp
    0000004d: 	shrq	%rbp
    00000050: 	leaq	0x1(%rbp), %rax
    00000054: 	movq	%rax, %rcx
    00000057: 	movq	%rax, 0x10(%rsp)
    0000005c: 	andq	$-0x8, %rax
    00000060: 	shrq	$0x3, %rcx
    00000064: 	leaq	(%r12,%rax,2), %r9
    00000068: 	movq	%rax, 0x8(%rsp)
    0000006d: 	shlq	$0x4, %rcx
    00000071: 	cmpq	$0xc, %rbx
    00000075: 	cmovbeq	%r12, %r9
    00000079: 	leaq	(%rcx,%r12), %rbp
    0000007d: 	xorl	%r14d, %r14d
    00000080: 	leaq	0x2(%r9), %rax
    00000084: 	movq	%r9, %r13
    00000087: 	movq	%rax, 0x18(%rsp)
    0000008c: 	leaq	0x4(%r9), %rax
    00000090: 	movq	%rax, 0x20(%rsp)
    00000095: 	leaq	0x6(%r9), %rax
    00000099: 	movq	%rax, 0x30(%rsp)
    0000009e: 	leaq	0x8(%r9), %rax
    000000a2: 	movq	%rax, 0x38(%rsp)
    000000a7: 	leaq	0xa(%r9), %rax
    000000ab: 	movq	%rax, 0x40(%rsp)
    000000b0: 	leaq	0xc(%r9), %rax
    000000b4: 	movq	%rax, 0x48(%rsp)
.Ltmp1910:
    000000b9: 	movsd	init_value(%rip), %xmm1
    000000c1: 	cmpq	%r15, %r12
    000000c4: 	je	.Ltmp1905 # Offset: 196
.Ltmp1918:
    000000ca: 	cmpq	$0xc, %rbx
    000000ce: 	jbe	.Ltmp1906 # Offset: 206
    000000d4: 	movq	%r12, %rax
    000000d7: 	pxor	%xmm0, %xmm0
    000000db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1907:
    000000e0: 	movdqu	(%rax), %xmm3
    000000e4: 	addq	$0x10, %rax
    000000e8: 	paddw	%xmm3, %xmm0
    000000ec: 	cmpq	%rbp, %rax
    000000ef: 	jne	.Ltmp1907 # Offset: 239
    000000f1: 	movdqa	%xmm0, %xmm2
    000000f5: 	movq	0x10(%rsp), %rdi
    000000fa: 	psrldq	$0x8, %xmm2
    000000ff: 	paddw	%xmm2, %xmm0
    00000103: 	movdqa	%xmm0, %xmm2
    00000107: 	psrldq	$0x4, %xmm2
    0000010c: 	paddw	%xmm2, %xmm0
    00000110: 	movdqa	%xmm0, %xmm2
    00000114: 	psrldq	$0x2, %xmm2
    00000119: 	paddw	%xmm2, %xmm0
    0000011d: 	pextrw	$0x0, %xmm0, %eax
    00000122: 	cmpq	%rdi, 0x8(%rsp)
    00000127: 	je	.Ltmp1908 # Offset: 295
.Ltmp1919:
    00000129: 	addw	(%r13), %ax
    0000012e: 	cmpq	0x18(%rsp), %r15
    00000133: 	je	.Ltmp1908 # Offset: 307
    00000135: 	addw	0x2(%r13), %ax
    0000013a: 	cmpq	0x20(%rsp), %r15
    0000013f: 	je	.Ltmp1908 # Offset: 319
    00000141: 	addw	0x4(%r13), %ax
    00000146: 	cmpq	0x30(%rsp), %r15
    0000014b: 	je	.Ltmp1908 # Offset: 331
    0000014d: 	addw	0x6(%r13), %ax
    00000152: 	cmpq	0x38(%rsp), %r15
    00000157: 	je	.Ltmp1908 # Offset: 343
    00000159: 	addw	0x8(%r13), %ax
    0000015e: 	cmpq	0x40(%rsp), %r15
    00000163: 	je	.Ltmp1908 # Offset: 355
    00000165: 	addw	0xa(%r13), %ax
    0000016a: 	cmpq	0x48(%rsp), %r15
    0000016f: 	je	.Ltmp1908 # Offset: 367
    00000171: 	addw	0xc(%r13), %ax
.Ltmp1908:
    00000176: 	movsd	DATAat0x248a0(%rip), %xmm0
    0000017e: 	mulsd	%xmm1, %xmm0
    00000182: 	cvttsd2si	%xmm0, %edx
    00000186: 	cmpw	%ax, %dx
    00000189: 	je	.Ltmp1909 # Offset: 393
    0000018f: 	movq	0x28(%rsp), %rax
    00000194: 	leaq	DATAat0x246f9(%rip), %rsi
    0000019b: 	movl	$0x1, %edi
    000001a0: 	addl	$0x1, %r14d
    000001a4: 	movq	(%rax), %rdx
    000001a7: 	xorl	%eax, %eax
    000001a9: 	callq	__printf_chk@PLT # Offset: 425
    000001ae: 	movl	iterations(%rip), %esi
    000001b4: 	cmpl	%r14d, %esi
    000001b7: 	jg	.Ltmp1910 # Offset: 439
.Ltmp1904:
    000001bd: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001c4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001cb: 	subq	$0x20, %rax
    000001cf: 	cmpq	%rax, %rbx
    000001d2: 	je	.Ltmp1911 # Offset: 466
    000001d8: 	movq	0x28(%rsp), %rax
    000001dd: 	leaq	0x10(%rbx), %rdi
    000001e1: 	movq	%rdi, (%rbx)
    000001e4: 	movq	(%rax), %rbp
    000001e7: 	movq	0x8(%rax), %r12
    000001eb: 	movq	%rbp, %rax
    000001ee: 	addq	%r12, %rax
    000001f1: 	je	.Ltmp1912 # Offset: 497
    000001f3: 	testq	%rbp, %rbp
    000001f6: 	je	.Ltmp1913 # Offset: 502
.Ltmp1912:
    000001fc: 	movq	%r12, 0x50(%rsp)
    00000201: 	cmpq	$0xf, %r12
    00000205: 	ja	.Ltmp1914 # Offset: 517
    0000020b: 	cmpq	$0x1, %r12
    0000020f: 	jne	.Ltmp1915 # Offset: 527
    00000215: 	movzbl	(%rbp), %eax
    00000219: 	movb	%al, 0x10(%rbx)
.Ltmp1920:
    0000021c: 	movq	%r12, 0x8(%rbx)
    00000220: 	movb	$0x0, (%rdi,%r12)
    00000225: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000022c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000233: 	addq	$0x20, %rax
    00000237: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000023e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000245: 	je	.Ltmp1916 # Offset: 581
.Ltmp1921:
    0000024b: 	movq	-0x20(%rax), %rbp
    0000024f: 	callq	clock@PLT # Offset: 591
    00000254: 	movq	%rax, end_time(%rip)
    0000025b: 	movq	0x58(%rsp), %rdx
    00000260: 	subq	%fs:0x28, %rdx
    00000269: 	jne	.Ltmp1917 # Offset: 617
    0000026f: 	subq	start_time(%rip), %rax
    00000276: 	pxor	%xmm0, %xmm0
    0000027a: 	movq	%rbp, %rdi
    0000027d: 	cvtsi2sd	%rax, %xmm0
    00000282: 	divsd	DATAat0x24890(%rip), %xmm0
    0000028a: 	addq	$0x68, %rsp
    0000028e: 	popq	%rbx
    0000028f: 	popq	%rbp
    00000290: 	popq	%r12
    00000292: 	popq	%r13
    00000294: 	popq	%r14
    00000296: 	popq	%r15
    00000298: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 664
    0000029d: 	nopl	(%rax) # Size: 3
.Ltmp1909:
    000002a0: 	addl	$0x1, %r14d
    000002a4: 	cmpl	%esi, %r14d
    000002a7: 	jge	.Ltmp1904 # Offset: 679
    000002ad: 	cmpq	%r15, %r12
    000002b0: 	jne	.Ltmp1918 # Offset: 688
.Ltmp1905:
    000002b6: 	xorl	%eax, %eax
    000002b8: 	jmp	.Ltmp1908 # Offset: 696
    000002bd: 	nopl	(%rax) # Size: 3
.Ltmp1906:
    000002c0: 	xorl	%eax, %eax
    000002c2: 	jmp	.Ltmp1919 # Offset: 706
.Ltmp1914:
    000002c7: 	movq	%rbx, %rdi
    000002ca: 	leaq	0x50(%rsp), %rsi
    000002cf: 	xorl	%edx, %edx
    000002d1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 721
    000002d6: 	movq	%rax, (%rbx)
    000002d9: 	movq	%rax, %rdi
    000002dc: 	movq	0x50(%rsp), %rax
    000002e1: 	movq	%rax, 0x10(%rbx)
.Ltmp1922:
    000002e5: 	movq	%r12, %rdx
    000002e8: 	movq	%rbp, %rsi
    000002eb: 	callq	memcpy@PLT # Offset: 747
    000002f0: 	movq	0x50(%rsp), %r12
    000002f5: 	movq	(%rbx), %rdi
    000002f8: 	jmp	.Ltmp1920 # Offset: 760
.Ltmp1911:
    000002fd: 	movq	0x28(%rsp), %rsi
    00000302: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000309: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 777
    0000030e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000315: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000031c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000323: 	jne	.Ltmp1921 # Offset: 803
.Ltmp1916:
    00000329: 	movq	-0x8(%rdx), %rax
    0000032d: 	addq	$0x200, %rax
    00000333: 	jmp	.Ltmp1921 # Offset: 819
.Ltmp1915:
    00000338: 	testq	%r12, %r12
    0000033b: 	je	.Ltmp1920 # Offset: 827
    00000341: 	jmp	.Ltmp1922 # Offset: 833
.Ltmp1917:
    00000343: 	callq	__stack_chk_fail@PLT # Offset: 835
.Ltmp1913:
    00000348: 	leaq	DATAat0x24158(%rip), %rdi
    0000034f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 847
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z17test_accumulate2DIsPsPFsPKsmmsEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 234
  State       : disassembled
  Address     : 0x12440
  Size        : 0x22c
  MaxSize     : 0x230
  Offset      : 0x12440
  Section     : .text
  Orc Section : .local.text._Z17test_accumulate2DIsPsPFsPKsmmsEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0233:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rdx, %r13
    00000013: 	pushq	%r12
    00000015: 	movq	%r8, %r12
    00000018: 	pushq	%rbp
    00000019: 	movl	%ecx, %ebp
    0000001b: 	pushq	%rbx
    0000001c: 	movswl	%bp, %ebp
    0000001f: 	xorl	%ebx, %ebx
    00000021: 	subq	$0x28, %rsp
    00000025: 	movq	%r9, 0x8(%rsp)
    0000002a: 	movq	%fs:0x28, %rax
    00000033: 	movq	%rax, 0x18(%rsp)
    00000038: 	xorl	%eax, %eax
    0000003a: 	callq	clock@PLT # Offset: 58
    0000003f: 	movq	%rax, start_time(%rip)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	testl	%eax, %eax
    0000004e: 	jle	.Ltmp1923 # Offset: 78
.Ltmp1925:
    00000050: 	movl	%ebp, %ecx
    00000052: 	movq	%r13, %rdx
    00000055: 	movq	%r14, %rsi
    00000058: 	movq	%r15, %rdi
    0000005b: 	callq	*%r12 # Offset: 91
    0000005e: 	movl	%eax, %r8d
    00000061: 	cvttsd2si	init_value(%rip), %eax
    00000069: 	leal	(%rax,%rax,8), %eax
    0000006c: 	shll	$0xa, %eax
    0000006f: 	cmpw	%ax, %r8w
    00000073: 	je	.Ltmp1924 # Offset: 115
    00000079: 	movq	0x8(%rsp), %rax
    0000007e: 	leaq	DATAat0x246f9(%rip), %rsi
    00000085: 	movl	$0x1, %edi
    0000008a: 	addl	$0x1, %ebx
    0000008d: 	movq	(%rax), %rdx
    00000090: 	xorl	%eax, %eax
    00000092: 	callq	__printf_chk@PLT # Offset: 146
    00000097: 	cmpl	%ebx, iterations(%rip)
    0000009d: 	jg	.Ltmp1925 # Offset: 157
.Ltmp1923:
    0000009f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000a6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000ad: 	subq	$0x20, %rax
    000000b1: 	cmpq	%rax, %rbx
    000000b4: 	je	.Ltmp1926 # Offset: 180
    000000ba: 	movq	0x8(%rsp), %rax
    000000bf: 	leaq	0x10(%rbx), %rdi
    000000c3: 	movq	%rdi, (%rbx)
    000000c6: 	movq	(%rax), %rbp
    000000c9: 	movq	0x8(%rax), %r12
    000000cd: 	movq	%rbp, %rax
    000000d0: 	addq	%r12, %rax
    000000d3: 	je	.Ltmp1927 # Offset: 211
    000000d5: 	testq	%rbp, %rbp
    000000d8: 	je	.Ltmp1928 # Offset: 216
.Ltmp1927:
    000000de: 	movq	%r12, 0x10(%rsp)
    000000e3: 	cmpq	$0xf, %r12
    000000e7: 	ja	.Ltmp1929 # Offset: 231
    000000ed: 	cmpq	$0x1, %r12
    000000f1: 	jne	.Ltmp1930 # Offset: 241
    000000f7: 	movzbl	(%rbp), %eax
    000000fb: 	movb	%al, 0x10(%rbx)
.Ltmp1933:
    000000fe: 	movq	%r12, 0x8(%rbx)
    00000102: 	movb	$0x0, (%rdi,%r12)
    00000107: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000010e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000115: 	addq	$0x20, %rax
    00000119: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000120: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000127: 	je	.Ltmp1931 # Offset: 295
.Ltmp1934:
    0000012d: 	movq	-0x20(%rax), %rbp
    00000131: 	callq	clock@PLT # Offset: 305
    00000136: 	movq	%rax, end_time(%rip)
    0000013d: 	movq	0x18(%rsp), %rdx
    00000142: 	subq	%fs:0x28, %rdx
    0000014b: 	jne	.Ltmp1932 # Offset: 331
    00000151: 	subq	start_time(%rip), %rax
    00000158: 	pxor	%xmm0, %xmm0
    0000015c: 	movq	%rbp, %rdi
    0000015f: 	cvtsi2sd	%rax, %xmm0
    00000164: 	divsd	DATAat0x24890(%rip), %xmm0
    0000016c: 	addq	$0x28, %rsp
    00000170: 	popq	%rbx
    00000171: 	popq	%rbp
    00000172: 	popq	%r12
    00000174: 	popq	%r13
    00000176: 	popq	%r14
    00000178: 	popq	%r15
    0000017a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 378
    0000017f: 	nop # Size: 1
.Ltmp1924:
    00000180: 	addl	$0x1, %ebx
    00000183: 	cmpl	%ebx, iterations(%rip)
    00000189: 	jg	.Ltmp1925 # Offset: 393
    0000018f: 	jmp	.Ltmp1923 # Offset: 399
    00000194: 	nopl	(%rax) # Size: 4
.Ltmp1929:
    00000198: 	movq	%rbx, %rdi
    0000019b: 	leaq	0x10(%rsp), %rsi
    000001a0: 	xorl	%edx, %edx
    000001a2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 418
    000001a7: 	movq	%rax, (%rbx)
    000001aa: 	movq	%rax, %rdi
    000001ad: 	movq	0x10(%rsp), %rax
    000001b2: 	movq	%rax, 0x10(%rbx)
.Ltmp1935:
    000001b6: 	movq	%r12, %rdx
    000001b9: 	movq	%rbp, %rsi
    000001bc: 	callq	memcpy@PLT # Offset: 444
    000001c1: 	movq	0x10(%rsp), %r12
    000001c6: 	movq	(%rbx), %rdi
    000001c9: 	jmp	.Ltmp1933 # Offset: 457
    000001ce: 	nop # Size: 2
.Ltmp1926:
    000001d0: 	movq	0x8(%rsp), %rsi
    000001d5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001dc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 476
    000001e1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001e8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001ef: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001f6: 	jne	.Ltmp1934 # Offset: 502
.Ltmp1931:
    000001fc: 	movq	-0x8(%rdx), %rax
    00000200: 	addq	$0x200, %rax
    00000206: 	jmp	.Ltmp1934 # Offset: 518
    0000020b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1930:
    00000210: 	testq	%r12, %r12
    00000213: 	je	.Ltmp1933 # Offset: 531
    00000219: 	jmp	.Ltmp1935 # Offset: 537
.Ltmp1932:
    0000021b: 	callq	__stack_chk_fail@PLT # Offset: 539
.Ltmp1928:
    00000220: 	leaq	DATAat0x24158(%rip), %rdi
    00000227: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 551
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_accumulate2DIsPsPFsPKsmmsEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_accumulate2DItPtPFtPKtmmtEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 235
  State       : disassembled
  Address     : 0x12670
  Size        : 0x22c
  MaxSize     : 0x230
  Offset      : 0x12670
  Section     : .text
  Orc Section : .local.text._Z17test_accumulate2DItPtPFtPKtmmtEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0234:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rdx, %r13
    00000013: 	pushq	%r12
    00000015: 	movq	%r8, %r12
    00000018: 	pushq	%rbp
    00000019: 	movl	%ecx, %ebp
    0000001b: 	pushq	%rbx
    0000001c: 	movzwl	%bp, %ebp
    0000001f: 	xorl	%ebx, %ebx
    00000021: 	subq	$0x28, %rsp
    00000025: 	movq	%r9, 0x8(%rsp)
    0000002a: 	movq	%fs:0x28, %rax
    00000033: 	movq	%rax, 0x18(%rsp)
    00000038: 	xorl	%eax, %eax
    0000003a: 	callq	clock@PLT # Offset: 58
    0000003f: 	movq	%rax, start_time(%rip)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	testl	%eax, %eax
    0000004e: 	jle	.Ltmp1936 # Offset: 78
.Ltmp1938:
    00000050: 	movl	%ebp, %ecx
    00000052: 	movq	%r13, %rdx
    00000055: 	movq	%r14, %rsi
    00000058: 	movq	%r15, %rdi
    0000005b: 	callq	*%r12 # Offset: 91
    0000005e: 	movl	%eax, %r8d
    00000061: 	cvttsd2si	init_value(%rip), %eax
    00000069: 	leal	(%rax,%rax,8), %eax
    0000006c: 	shll	$0xa, %eax
    0000006f: 	cmpw	%ax, %r8w
    00000073: 	je	.Ltmp1937 # Offset: 115
    00000079: 	movq	0x8(%rsp), %rax
    0000007e: 	leaq	DATAat0x246f9(%rip), %rsi
    00000085: 	movl	$0x1, %edi
    0000008a: 	addl	$0x1, %ebx
    0000008d: 	movq	(%rax), %rdx
    00000090: 	xorl	%eax, %eax
    00000092: 	callq	__printf_chk@PLT # Offset: 146
    00000097: 	cmpl	%ebx, iterations(%rip)
    0000009d: 	jg	.Ltmp1938 # Offset: 157
.Ltmp1936:
    0000009f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000a6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000ad: 	subq	$0x20, %rax
    000000b1: 	cmpq	%rax, %rbx
    000000b4: 	je	.Ltmp1939 # Offset: 180
    000000ba: 	movq	0x8(%rsp), %rax
    000000bf: 	leaq	0x10(%rbx), %rdi
    000000c3: 	movq	%rdi, (%rbx)
    000000c6: 	movq	(%rax), %rbp
    000000c9: 	movq	0x8(%rax), %r12
    000000cd: 	movq	%rbp, %rax
    000000d0: 	addq	%r12, %rax
    000000d3: 	je	.Ltmp1940 # Offset: 211
    000000d5: 	testq	%rbp, %rbp
    000000d8: 	je	.Ltmp1941 # Offset: 216
.Ltmp1940:
    000000de: 	movq	%r12, 0x10(%rsp)
    000000e3: 	cmpq	$0xf, %r12
    000000e7: 	ja	.Ltmp1942 # Offset: 231
    000000ed: 	cmpq	$0x1, %r12
    000000f1: 	jne	.Ltmp1943 # Offset: 241
    000000f7: 	movzbl	(%rbp), %eax
    000000fb: 	movb	%al, 0x10(%rbx)
.Ltmp1946:
    000000fe: 	movq	%r12, 0x8(%rbx)
    00000102: 	movb	$0x0, (%rdi,%r12)
    00000107: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000010e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000115: 	addq	$0x20, %rax
    00000119: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000120: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000127: 	je	.Ltmp1944 # Offset: 295
.Ltmp1947:
    0000012d: 	movq	-0x20(%rax), %rbp
    00000131: 	callq	clock@PLT # Offset: 305
    00000136: 	movq	%rax, end_time(%rip)
    0000013d: 	movq	0x18(%rsp), %rdx
    00000142: 	subq	%fs:0x28, %rdx
    0000014b: 	jne	.Ltmp1945 # Offset: 331
    00000151: 	subq	start_time(%rip), %rax
    00000158: 	pxor	%xmm0, %xmm0
    0000015c: 	movq	%rbp, %rdi
    0000015f: 	cvtsi2sd	%rax, %xmm0
    00000164: 	divsd	DATAat0x24890(%rip), %xmm0
    0000016c: 	addq	$0x28, %rsp
    00000170: 	popq	%rbx
    00000171: 	popq	%rbp
    00000172: 	popq	%r12
    00000174: 	popq	%r13
    00000176: 	popq	%r14
    00000178: 	popq	%r15
    0000017a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 378
    0000017f: 	nop # Size: 1
.Ltmp1937:
    00000180: 	addl	$0x1, %ebx
    00000183: 	cmpl	%ebx, iterations(%rip)
    00000189: 	jg	.Ltmp1938 # Offset: 393
    0000018f: 	jmp	.Ltmp1936 # Offset: 399
    00000194: 	nopl	(%rax) # Size: 4
.Ltmp1942:
    00000198: 	movq	%rbx, %rdi
    0000019b: 	leaq	0x10(%rsp), %rsi
    000001a0: 	xorl	%edx, %edx
    000001a2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 418
    000001a7: 	movq	%rax, (%rbx)
    000001aa: 	movq	%rax, %rdi
    000001ad: 	movq	0x10(%rsp), %rax
    000001b2: 	movq	%rax, 0x10(%rbx)
.Ltmp1948:
    000001b6: 	movq	%r12, %rdx
    000001b9: 	movq	%rbp, %rsi
    000001bc: 	callq	memcpy@PLT # Offset: 444
    000001c1: 	movq	0x10(%rsp), %r12
    000001c6: 	movq	(%rbx), %rdi
    000001c9: 	jmp	.Ltmp1946 # Offset: 457
    000001ce: 	nop # Size: 2
.Ltmp1939:
    000001d0: 	movq	0x8(%rsp), %rsi
    000001d5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001dc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 476
    000001e1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001e8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001ef: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001f6: 	jne	.Ltmp1947 # Offset: 502
.Ltmp1944:
    000001fc: 	movq	-0x8(%rdx), %rax
    00000200: 	addq	$0x200, %rax
    00000206: 	jmp	.Ltmp1947 # Offset: 518
    0000020b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1943:
    00000210: 	testq	%r12, %r12
    00000213: 	je	.Ltmp1946 # Offset: 531
    00000219: 	jmp	.Ltmp1948 # Offset: 537
.Ltmp1945:
    0000021b: 	callq	__stack_chk_fail@PLT # Offset: 539
.Ltmp1941:
    00000220: 	leaq	DATAat0x24158(%rip), %rdi
    00000227: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 551
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_accumulate2DItPtPFtPKtmmtEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.5/1(*2)" after disassembly {
  All names   : _Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.5/1
                _Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.5/reference_normalization.cpp/1
  Number      : 236
  State       : disassembled
  Address     : 0x128a0
  Size        : 0x2cc
  MaxSize     : 0x2d0
  Offset      : 0x128a0
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.5/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0235:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rsi, %r14
    00000007: 	pushq	%r13
    00000009: 	movq	%rdx, %r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	subq	$0x28, %rsp
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0x18(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	callq	clock@PLT # Offset: 39
    0000002c: 	movl	iterations(%rip), %edx
    00000032: 	movq	%rax, start_time(%rip)
    00000039: 	testl	%edx, %edx
    0000003b: 	jle	.Ltmp1949 # Offset: 59
    00000041: 	subq	%rbx, %r14
    00000044: 	movl	$0x1, %eax
    00000049: 	pxor	%xmm4, %xmm4
    0000004d: 	movsd	init_value(%rip), %xmm2
    00000055: 	movq	%r14, %rcx
    00000058: 	movsd	DATAat0x248a0(%rip), %xmm3
    00000060: 	leaq	DATAat0x246f9(%rip), %rsi
    00000067: 	sarq	$0x3, %rcx
    0000006b: 	testq	%r14, %r14
    0000006e: 	cmovleq	%rax, %rcx
    00000072: 	xorl	%r12d, %r12d
    00000075: 	movq	%rcx, %rbp
    00000078: 	movq	%rcx, %r15
    0000007b: 	shrq	%rbp
    0000007e: 	andq	$-0x2, %r15
    00000082: 	shlq	$0x4, %rbp
    00000086: 	addq	%rbx, %rbp
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp1955:
    00000090: 	testq	%r14, %r14
    00000093: 	jle	.Ltmp1950 # Offset: 147
.Ltmp1963:
    00000099: 	cmpq	$0x8, %r14
    0000009d: 	jle	.Ltmp1951 # Offset: 157
    000000a3: 	movq	%rbx, %rax
    000000a6: 	movapd	%xmm4, %xmm0
    000000aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1952:
    000000b0: 	movsd	(%rax), %xmm1
    000000b4: 	addq	$0x10, %rax
    000000b8: 	addsd	%xmm1, %xmm0
    000000bc: 	movsd	-0x8(%rax), %xmm1
    000000c1: 	addsd	%xmm1, %xmm0
    000000c5: 	cmpq	%rax, %rbp
    000000c8: 	jne	.Ltmp1952 # Offset: 200
    000000ca: 	movq	%r15, %rax
    000000cd: 	cmpq	%rcx, %r15
    000000d0: 	je	.Ltmp1953 # Offset: 208
.Ltmp1964:
    000000d2: 	addsd	(%rbx,%rax,8), %xmm0
.Ltmp1953:
    000000d7: 	movapd	%xmm2, %xmm1
    000000db: 	mulsd	%xmm3, %xmm1
    000000df: 	ucomisd	%xmm0, %xmm1
    000000e3: 	jp	.Ltmp1954 # Offset: 227
    000000e9: 	jne	.Ltmp1954 # Offset: 233
    000000ef: 	addl	$0x1, %r12d
    000000f3: 	cmpl	%edx, %r12d
    000000f6: 	jl	.Ltmp1955 # Offset: 246
.Ltmp1949:
    000000f8: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000ff: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000106: 	subq	$0x20, %rax
    0000010a: 	cmpq	%rax, %rbx
    0000010d: 	je	.Ltmp1956 # Offset: 269
    00000113: 	leaq	0x10(%rbx), %rdi
    00000117: 	movq	0x8(%r13), %r12
    0000011b: 	movq	%rdi, (%rbx)
    0000011e: 	movq	(%r13), %rbp
    00000122: 	movq	%rbp, %rax
    00000125: 	addq	%r12, %rax
    00000128: 	je	.Ltmp1957 # Offset: 296
    0000012a: 	testq	%rbp, %rbp
    0000012d: 	je	.Ltmp1958 # Offset: 301
.Ltmp1957:
    00000133: 	movq	%r12, 0x10(%rsp)
    00000138: 	cmpq	$0xf, %r12
    0000013c: 	ja	.Ltmp1959 # Offset: 316
    00000142: 	cmpq	$0x1, %r12
    00000146: 	jne	.Ltmp1960 # Offset: 326
    0000014c: 	movzbl	(%rbp), %eax
    00000150: 	movb	%al, 0x10(%rbx)
.Ltmp1965:
    00000153: 	movq	%r12, 0x8(%rbx)
    00000157: 	movb	$0x0, (%rdi,%r12)
    0000015c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000163: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000016a: 	addq	$0x20, %rax
    0000016e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000175: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000017c: 	je	.Ltmp1961 # Offset: 380
.Ltmp1966:
    00000182: 	movq	-0x20(%rax), %rbp
    00000186: 	callq	clock@PLT # Offset: 390
    0000018b: 	movq	%rax, end_time(%rip)
    00000192: 	movq	0x18(%rsp), %rdx
    00000197: 	subq	%fs:0x28, %rdx
    000001a0: 	jne	.Ltmp1962 # Offset: 416
    000001a6: 	subq	start_time(%rip), %rax
    000001ad: 	pxor	%xmm0, %xmm0
    000001b1: 	movq	%rbp, %rdi
    000001b4: 	cvtsi2sd	%rax, %xmm0
    000001b9: 	divsd	DATAat0x24890(%rip), %xmm0
    000001c1: 	addq	$0x28, %rsp
    000001c5: 	popq	%rbx
    000001c6: 	popq	%rbp
    000001c7: 	popq	%r12
    000001c9: 	popq	%r13
    000001cb: 	popq	%r14
    000001cd: 	popq	%r15
    000001cf: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 463
    000001d4: 	nopl	(%rax) # Size: 4
.Ltmp1954:
    000001d8: 	movq	(%r13), %rdx
    000001dc: 	movl	$0x1, %edi
    000001e1: 	xorl	%eax, %eax
    000001e3: 	movq	%rcx, 0x8(%rsp)
    000001e8: 	addl	$0x1, %r12d
    000001ec: 	callq	__printf_chk@PLT # Offset: 492
    000001f1: 	movl	iterations(%rip), %edx
    000001f7: 	cmpl	%edx, %r12d
    000001fa: 	jge	.Ltmp1949 # Offset: 506
    00000200: 	movq	DATAat0x248a0(%rip), %rax
    00000207: 	movq	0x8(%rsp), %rcx
    0000020c: 	pxor	%xmm4, %xmm4
    00000210: 	leaq	DATAat0x246f9(%rip), %rsi
    00000217: 	movsd	init_value(%rip), %xmm2
    0000021f: 	movq	%rax, %xmm3
    00000224: 	testq	%r14, %r14
    00000227: 	jg	.Ltmp1963 # Offset: 551
.Ltmp1950:
    0000022d: 	movapd	%xmm4, %xmm0
    00000231: 	jmp	.Ltmp1953 # Offset: 561
.Ltmp1951:
    00000236: 	movapd	%xmm4, %xmm0
    0000023a: 	xorl	%eax, %eax
    0000023c: 	jmp	.Ltmp1964 # Offset: 572
.Ltmp1959:
    00000241: 	movq	%rbx, %rdi
    00000244: 	leaq	0x10(%rsp), %rsi
    00000249: 	xorl	%edx, %edx
    0000024b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 587
    00000250: 	movq	%rax, (%rbx)
    00000253: 	movq	%rax, %rdi
    00000256: 	movq	0x10(%rsp), %rax
    0000025b: 	movq	%rax, 0x10(%rbx)
.Ltmp1967:
    0000025f: 	movq	%r12, %rdx
    00000262: 	movq	%rbp, %rsi
    00000265: 	callq	memcpy@PLT # Offset: 613
    0000026a: 	movq	0x10(%rsp), %r12
    0000026f: 	movq	(%rbx), %rdi
    00000272: 	jmp	.Ltmp1965 # Offset: 626
.Ltmp1956:
    00000277: 	movq	%r13, %rsi
    0000027a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000281: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 641
    00000286: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000028d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000294: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000029b: 	jne	.Ltmp1966 # Offset: 667
.Ltmp1961:
    000002a1: 	movq	-0x8(%rdx), %rax
    000002a5: 	addq	$0x200, %rax
    000002ab: 	jmp	.Ltmp1966 # Offset: 683
.Ltmp1960:
    000002b0: 	testq	%r12, %r12
    000002b3: 	je	.Ltmp1965 # Offset: 691
    000002b9: 	jmp	.Ltmp1967 # Offset: 697
.Ltmp1962:
    000002bb: 	callq	__stack_chk_fail@PLT # Offset: 699
.Ltmp1958:
    000002c0: 	leaq	DATAat0x24158(%rip), %rdi
    000002c7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 711
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.5/1(*2)"

Binary Function "_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.4/1(*2)" after disassembly {
  All names   : _Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.4/1
                _Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.4/reference_normalization.cpp/1
  Number      : 237
  State       : disassembled
  Address     : 0x12b70
  Size        : 0x2cc
  MaxSize     : 0x2d0
  Offset      : 0x12b70
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.4/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0236:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rsi, %r14
    00000007: 	pushq	%r13
    00000009: 	movq	%rdx, %r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	subq	$0x28, %rsp
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0x18(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	callq	clock@PLT # Offset: 39
    0000002c: 	movl	iterations(%rip), %edx
    00000032: 	movq	%rax, start_time(%rip)
    00000039: 	testl	%edx, %edx
    0000003b: 	jle	.Ltmp1968 # Offset: 59
    00000041: 	subq	%rbx, %r14
    00000044: 	movl	$0x1, %eax
    00000049: 	pxor	%xmm4, %xmm4
    0000004d: 	movsd	init_value(%rip), %xmm2
    00000055: 	movq	%r14, %rcx
    00000058: 	movsd	DATAat0x248a0(%rip), %xmm3
    00000060: 	leaq	DATAat0x246f9(%rip), %rsi
    00000067: 	sarq	$0x3, %rcx
    0000006b: 	testq	%r14, %r14
    0000006e: 	cmovleq	%rax, %rcx
    00000072: 	xorl	%r12d, %r12d
    00000075: 	movq	%rcx, %rbp
    00000078: 	movq	%rcx, %r15
    0000007b: 	shrq	%rbp
    0000007e: 	andq	$-0x2, %r15
    00000082: 	shlq	$0x4, %rbp
    00000086: 	addq	%rbx, %rbp
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp1974:
    00000090: 	testq	%r14, %r14
    00000093: 	jle	.Ltmp1969 # Offset: 147
.Ltmp1982:
    00000099: 	cmpq	$0x8, %r14
    0000009d: 	jle	.Ltmp1970 # Offset: 157
    000000a3: 	movq	%rbx, %rax
    000000a6: 	movapd	%xmm4, %xmm0
    000000aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1971:
    000000b0: 	movsd	(%rax), %xmm1
    000000b4: 	addq	$0x10, %rax
    000000b8: 	addsd	%xmm1, %xmm0
    000000bc: 	movsd	-0x8(%rax), %xmm1
    000000c1: 	addsd	%xmm1, %xmm0
    000000c5: 	cmpq	%rax, %rbp
    000000c8: 	jne	.Ltmp1971 # Offset: 200
    000000ca: 	movq	%r15, %rax
    000000cd: 	cmpq	%rcx, %r15
    000000d0: 	je	.Ltmp1972 # Offset: 208
.Ltmp1983:
    000000d2: 	addsd	(%rbx,%rax,8), %xmm0
.Ltmp1972:
    000000d7: 	movapd	%xmm2, %xmm1
    000000db: 	mulsd	%xmm3, %xmm1
    000000df: 	ucomisd	%xmm0, %xmm1
    000000e3: 	jp	.Ltmp1973 # Offset: 227
    000000e9: 	jne	.Ltmp1973 # Offset: 233
    000000ef: 	addl	$0x1, %r12d
    000000f3: 	cmpl	%edx, %r12d
    000000f6: 	jl	.Ltmp1974 # Offset: 246
.Ltmp1968:
    000000f8: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000ff: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000106: 	subq	$0x20, %rax
    0000010a: 	cmpq	%rax, %rbx
    0000010d: 	je	.Ltmp1975 # Offset: 269
    00000113: 	leaq	0x10(%rbx), %rdi
    00000117: 	movq	0x8(%r13), %r12
    0000011b: 	movq	%rdi, (%rbx)
    0000011e: 	movq	(%r13), %rbp
    00000122: 	movq	%rbp, %rax
    00000125: 	addq	%r12, %rax
    00000128: 	je	.Ltmp1976 # Offset: 296
    0000012a: 	testq	%rbp, %rbp
    0000012d: 	je	.Ltmp1977 # Offset: 301
.Ltmp1976:
    00000133: 	movq	%r12, 0x10(%rsp)
    00000138: 	cmpq	$0xf, %r12
    0000013c: 	ja	.Ltmp1978 # Offset: 316
    00000142: 	cmpq	$0x1, %r12
    00000146: 	jne	.Ltmp1979 # Offset: 326
    0000014c: 	movzbl	(%rbp), %eax
    00000150: 	movb	%al, 0x10(%rbx)
.Ltmp1984:
    00000153: 	movq	%r12, 0x8(%rbx)
    00000157: 	movb	$0x0, (%rdi,%r12)
    0000015c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000163: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000016a: 	addq	$0x20, %rax
    0000016e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000175: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000017c: 	je	.Ltmp1980 # Offset: 380
.Ltmp1985:
    00000182: 	movq	-0x20(%rax), %rbp
    00000186: 	callq	clock@PLT # Offset: 390
    0000018b: 	movq	%rax, end_time(%rip)
    00000192: 	movq	0x18(%rsp), %rdx
    00000197: 	subq	%fs:0x28, %rdx
    000001a0: 	jne	.Ltmp1981 # Offset: 416
    000001a6: 	subq	start_time(%rip), %rax
    000001ad: 	pxor	%xmm0, %xmm0
    000001b1: 	movq	%rbp, %rdi
    000001b4: 	cvtsi2sd	%rax, %xmm0
    000001b9: 	divsd	DATAat0x24890(%rip), %xmm0
    000001c1: 	addq	$0x28, %rsp
    000001c5: 	popq	%rbx
    000001c6: 	popq	%rbp
    000001c7: 	popq	%r12
    000001c9: 	popq	%r13
    000001cb: 	popq	%r14
    000001cd: 	popq	%r15
    000001cf: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 463
    000001d4: 	nopl	(%rax) # Size: 4
.Ltmp1973:
    000001d8: 	movq	(%r13), %rdx
    000001dc: 	movl	$0x1, %edi
    000001e1: 	xorl	%eax, %eax
    000001e3: 	movq	%rcx, 0x8(%rsp)
    000001e8: 	addl	$0x1, %r12d
    000001ec: 	callq	__printf_chk@PLT # Offset: 492
    000001f1: 	movl	iterations(%rip), %edx
    000001f7: 	cmpl	%edx, %r12d
    000001fa: 	jge	.Ltmp1968 # Offset: 506
    00000200: 	movq	DATAat0x248a0(%rip), %rax
    00000207: 	movq	0x8(%rsp), %rcx
    0000020c: 	pxor	%xmm4, %xmm4
    00000210: 	leaq	DATAat0x246f9(%rip), %rsi
    00000217: 	movsd	init_value(%rip), %xmm2
    0000021f: 	movq	%rax, %xmm3
    00000224: 	testq	%r14, %r14
    00000227: 	jg	.Ltmp1982 # Offset: 551
.Ltmp1969:
    0000022d: 	movapd	%xmm4, %xmm0
    00000231: 	jmp	.Ltmp1972 # Offset: 561
.Ltmp1970:
    00000236: 	movapd	%xmm4, %xmm0
    0000023a: 	xorl	%eax, %eax
    0000023c: 	jmp	.Ltmp1983 # Offset: 572
.Ltmp1978:
    00000241: 	movq	%rbx, %rdi
    00000244: 	leaq	0x10(%rsp), %rsi
    00000249: 	xorl	%edx, %edx
    0000024b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 587
    00000250: 	movq	%rax, (%rbx)
    00000253: 	movq	%rax, %rdi
    00000256: 	movq	0x10(%rsp), %rax
    0000025b: 	movq	%rax, 0x10(%rbx)
.Ltmp1986:
    0000025f: 	movq	%r12, %rdx
    00000262: 	movq	%rbp, %rsi
    00000265: 	callq	memcpy@PLT # Offset: 613
    0000026a: 	movq	0x10(%rsp), %r12
    0000026f: 	movq	(%rbx), %rdi
    00000272: 	jmp	.Ltmp1984 # Offset: 626
.Ltmp1975:
    00000277: 	movq	%r13, %rsi
    0000027a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000281: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 641
    00000286: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000028d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000294: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000029b: 	jne	.Ltmp1985 # Offset: 667
.Ltmp1980:
    000002a1: 	movq	-0x8(%rdx), %rax
    000002a5: 	addq	$0x200, %rax
    000002ab: 	jmp	.Ltmp1985 # Offset: 683
.Ltmp1979:
    000002b0: 	testq	%r12, %r12
    000002b3: 	je	.Ltmp1984 # Offset: 691
    000002b9: 	jmp	.Ltmp1986 # Offset: 697
.Ltmp1981:
    000002bb: 	callq	__stack_chk_fail@PLT # Offset: 699
.Ltmp1977:
    000002c0: 	leaq	DATAat0x24158(%rip), %rdi
    000002c7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 711
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.4/1(*2)"

Binary Function "_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.6/1(*2)" after disassembly {
  All names   : _Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.6/1
                _Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.6/reference_normalization.cpp/1
  Number      : 238
  State       : disassembled
  Address     : 0x12e40
  Size        : 0x2cc
  MaxSize     : 0x2d0
  Offset      : 0x12e40
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.6/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0237:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rsi, %r14
    00000007: 	pushq	%r13
    00000009: 	movq	%rdx, %r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	subq	$0x28, %rsp
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0x18(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	callq	clock@PLT # Offset: 39
    0000002c: 	movl	iterations(%rip), %edx
    00000032: 	movq	%rax, start_time(%rip)
    00000039: 	testl	%edx, %edx
    0000003b: 	jle	.Ltmp1987 # Offset: 59
    00000041: 	subq	%rbx, %r14
    00000044: 	movl	$0x1, %eax
    00000049: 	pxor	%xmm4, %xmm4
    0000004d: 	movsd	init_value(%rip), %xmm2
    00000055: 	movq	%r14, %rcx
    00000058: 	movsd	DATAat0x248a0(%rip), %xmm3
    00000060: 	leaq	DATAat0x246f9(%rip), %rsi
    00000067: 	sarq	$0x3, %rcx
    0000006b: 	testq	%r14, %r14
    0000006e: 	cmovleq	%rax, %rcx
    00000072: 	xorl	%r12d, %r12d
    00000075: 	movq	%rcx, %rbp
    00000078: 	movq	%rcx, %r15
    0000007b: 	shrq	%rbp
    0000007e: 	andq	$-0x2, %r15
    00000082: 	shlq	$0x4, %rbp
    00000086: 	addq	%rbx, %rbp
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp1993:
    00000090: 	testq	%r14, %r14
    00000093: 	jle	.Ltmp1988 # Offset: 147
.Ltmp2001:
    00000099: 	cmpq	$0x8, %r14
    0000009d: 	jle	.Ltmp1989 # Offset: 157
    000000a3: 	movq	%rbx, %rax
    000000a6: 	movapd	%xmm4, %xmm0
    000000aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1990:
    000000b0: 	movsd	(%rax), %xmm1
    000000b4: 	addq	$0x10, %rax
    000000b8: 	addsd	%xmm1, %xmm0
    000000bc: 	movsd	-0x8(%rax), %xmm1
    000000c1: 	addsd	%xmm1, %xmm0
    000000c5: 	cmpq	%rax, %rbp
    000000c8: 	jne	.Ltmp1990 # Offset: 200
    000000ca: 	movq	%r15, %rax
    000000cd: 	cmpq	%rcx, %r15
    000000d0: 	je	.Ltmp1991 # Offset: 208
.Ltmp2002:
    000000d2: 	addsd	(%rbx,%rax,8), %xmm0
.Ltmp1991:
    000000d7: 	movapd	%xmm2, %xmm1
    000000db: 	mulsd	%xmm3, %xmm1
    000000df: 	ucomisd	%xmm0, %xmm1
    000000e3: 	jp	.Ltmp1992 # Offset: 227
    000000e9: 	jne	.Ltmp1992 # Offset: 233
    000000ef: 	addl	$0x1, %r12d
    000000f3: 	cmpl	%edx, %r12d
    000000f6: 	jl	.Ltmp1993 # Offset: 246
.Ltmp1987:
    000000f8: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000ff: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000106: 	subq	$0x20, %rax
    0000010a: 	cmpq	%rax, %rbx
    0000010d: 	je	.Ltmp1994 # Offset: 269
    00000113: 	leaq	0x10(%rbx), %rdi
    00000117: 	movq	0x8(%r13), %r12
    0000011b: 	movq	%rdi, (%rbx)
    0000011e: 	movq	(%r13), %rbp
    00000122: 	movq	%rbp, %rax
    00000125: 	addq	%r12, %rax
    00000128: 	je	.Ltmp1995 # Offset: 296
    0000012a: 	testq	%rbp, %rbp
    0000012d: 	je	.Ltmp1996 # Offset: 301
.Ltmp1995:
    00000133: 	movq	%r12, 0x10(%rsp)
    00000138: 	cmpq	$0xf, %r12
    0000013c: 	ja	.Ltmp1997 # Offset: 316
    00000142: 	cmpq	$0x1, %r12
    00000146: 	jne	.Ltmp1998 # Offset: 326
    0000014c: 	movzbl	(%rbp), %eax
    00000150: 	movb	%al, 0x10(%rbx)
.Ltmp2003:
    00000153: 	movq	%r12, 0x8(%rbx)
    00000157: 	movb	$0x0, (%rdi,%r12)
    0000015c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000163: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000016a: 	addq	$0x20, %rax
    0000016e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000175: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000017c: 	je	.Ltmp1999 # Offset: 380
.Ltmp2004:
    00000182: 	movq	-0x20(%rax), %rbp
    00000186: 	callq	clock@PLT # Offset: 390
    0000018b: 	movq	%rax, end_time(%rip)
    00000192: 	movq	0x18(%rsp), %rdx
    00000197: 	subq	%fs:0x28, %rdx
    000001a0: 	jne	.Ltmp2000 # Offset: 416
    000001a6: 	subq	start_time(%rip), %rax
    000001ad: 	pxor	%xmm0, %xmm0
    000001b1: 	movq	%rbp, %rdi
    000001b4: 	cvtsi2sd	%rax, %xmm0
    000001b9: 	divsd	DATAat0x24890(%rip), %xmm0
    000001c1: 	addq	$0x28, %rsp
    000001c5: 	popq	%rbx
    000001c6: 	popq	%rbp
    000001c7: 	popq	%r12
    000001c9: 	popq	%r13
    000001cb: 	popq	%r14
    000001cd: 	popq	%r15
    000001cf: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 463
    000001d4: 	nopl	(%rax) # Size: 4
.Ltmp1992:
    000001d8: 	movq	(%r13), %rdx
    000001dc: 	movl	$0x1, %edi
    000001e1: 	xorl	%eax, %eax
    000001e3: 	movq	%rcx, 0x8(%rsp)
    000001e8: 	addl	$0x1, %r12d
    000001ec: 	callq	__printf_chk@PLT # Offset: 492
    000001f1: 	movl	iterations(%rip), %edx
    000001f7: 	cmpl	%edx, %r12d
    000001fa: 	jge	.Ltmp1987 # Offset: 506
    00000200: 	movq	DATAat0x248a0(%rip), %rax
    00000207: 	movq	0x8(%rsp), %rcx
    0000020c: 	pxor	%xmm4, %xmm4
    00000210: 	leaq	DATAat0x246f9(%rip), %rsi
    00000217: 	movsd	init_value(%rip), %xmm2
    0000021f: 	movq	%rax, %xmm3
    00000224: 	testq	%r14, %r14
    00000227: 	jg	.Ltmp2001 # Offset: 551
.Ltmp1988:
    0000022d: 	movapd	%xmm4, %xmm0
    00000231: 	jmp	.Ltmp1991 # Offset: 561
.Ltmp1989:
    00000236: 	movapd	%xmm4, %xmm0
    0000023a: 	xorl	%eax, %eax
    0000023c: 	jmp	.Ltmp2002 # Offset: 572
.Ltmp1997:
    00000241: 	movq	%rbx, %rdi
    00000244: 	leaq	0x10(%rsp), %rsi
    00000249: 	xorl	%edx, %edx
    0000024b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 587
    00000250: 	movq	%rax, (%rbx)
    00000253: 	movq	%rax, %rdi
    00000256: 	movq	0x10(%rsp), %rax
    0000025b: 	movq	%rax, 0x10(%rbx)
.Ltmp2005:
    0000025f: 	movq	%r12, %rdx
    00000262: 	movq	%rbp, %rsi
    00000265: 	callq	memcpy@PLT # Offset: 613
    0000026a: 	movq	0x10(%rsp), %r12
    0000026f: 	movq	(%rbx), %rdi
    00000272: 	jmp	.Ltmp2003 # Offset: 626
.Ltmp1994:
    00000277: 	movq	%r13, %rsi
    0000027a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000281: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 641
    00000286: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000028d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000294: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000029b: 	jne	.Ltmp2004 # Offset: 667
.Ltmp1999:
    000002a1: 	movq	-0x8(%rdx), %rax
    000002a5: 	addq	$0x200, %rax
    000002ab: 	jmp	.Ltmp2004 # Offset: 683
.Ltmp1998:
    000002b0: 	testq	%r12, %r12
    000002b3: 	je	.Ltmp2003 # Offset: 691
    000002b9: 	jmp	.Ltmp2005 # Offset: 697
.Ltmp2000:
    000002bb: 	callq	__stack_chk_fail@PLT # Offset: 699
.Ltmp1996:
    000002c0: 	leaq	DATAat0x24158(%rip), %rdi
    000002c7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 711
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.6/1(*2)"

Binary Function "_Z17test_accumulate3DIdPdPFdPKdmmmdEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 239
  State       : disassembled
  Address     : 0x13110
  Size        : 0x24c
  MaxSize     : 0x250
  Offset      : 0x13110
  Section     : .text
  Orc Section : .local.text._Z17test_accumulate3DIdPdPFdPKdmmmdEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0238:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	xorl	%r15d, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdi, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rsi, %r13
    00000013: 	pushq	%r12
    00000015: 	movq	%rdx, %r12
    00000018: 	pushq	%rbp
    00000019: 	movq	%rcx, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%r8, %rbx
    00000020: 	subq	$0x28, %rsp
    00000024: 	movq	%r9, 0x8(%rsp)
    00000029: 	movsd	%xmm0, (%rsp)
    0000002e: 	movq	%fs:0x28, %rax
    00000037: 	movq	%rax, 0x18(%rsp)
    0000003c: 	xorl	%eax, %eax
    0000003e: 	callq	clock@PLT # Offset: 62
    00000043: 	movq	%rax, start_time(%rip)
    0000004a: 	movl	iterations(%rip), %eax
    00000050: 	testl	%eax, %eax
    00000052: 	jle	.Ltmp2006 # Offset: 82
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp2008:
    00000058: 	movsd	(%rsp), %xmm0
    0000005d: 	movq	%rbp, %rcx
    00000060: 	movq	%r12, %rdx
    00000063: 	movq	%r13, %rsi
    00000066: 	movq	%r14, %rdi
    00000069: 	callq	*%rbx # Offset: 105
    0000006b: 	movapd	%xmm0, %xmm1
    0000006f: 	movsd	DATAat0x248b0(%rip), %xmm0
    00000077: 	mulsd	init_value(%rip), %xmm0
    0000007f: 	ucomisd	%xmm0, %xmm1
    00000083: 	jp	.Ltmp2007 # Offset: 131
    00000089: 	jne	.Ltmp2007 # Offset: 137
    0000008f: 	addl	$0x1, %r15d
    00000093: 	cmpl	%r15d, iterations(%rip)
    0000009a: 	jg	.Ltmp2008 # Offset: 154
.Ltmp2006:
    0000009c: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000a3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000aa: 	subq	$0x20, %rax
    000000ae: 	cmpq	%rax, %rbx
    000000b1: 	je	.Ltmp2009 # Offset: 177
    000000b7: 	movq	0x8(%rsp), %rax
    000000bc: 	leaq	0x10(%rbx), %rdi
    000000c0: 	movq	%rdi, (%rbx)
    000000c3: 	movq	(%rax), %rbp
    000000c6: 	movq	0x8(%rax), %r12
    000000ca: 	movq	%rbp, %rax
    000000cd: 	addq	%r12, %rax
    000000d0: 	je	.Ltmp2010 # Offset: 208
    000000d2: 	testq	%rbp, %rbp
    000000d5: 	je	.Ltmp2011 # Offset: 213
.Ltmp2010:
    000000db: 	movq	%r12, 0x10(%rsp)
    000000e0: 	cmpq	$0xf, %r12
    000000e4: 	ja	.Ltmp2012 # Offset: 228
    000000ea: 	cmpq	$0x1, %r12
    000000ee: 	jne	.Ltmp2013 # Offset: 238
    000000f4: 	movzbl	(%rbp), %eax
    000000f8: 	movb	%al, 0x10(%rbx)
.Ltmp2016:
    000000fb: 	movq	%r12, 0x8(%rbx)
    000000ff: 	movb	$0x0, (%rdi,%r12)
    00000104: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000010b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000112: 	addq	$0x20, %rax
    00000116: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000011d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000124: 	je	.Ltmp2014 # Offset: 292
.Ltmp2017:
    0000012a: 	movq	-0x20(%rax), %rbp
    0000012e: 	callq	clock@PLT # Offset: 302
    00000133: 	movq	%rax, end_time(%rip)
    0000013a: 	movq	0x18(%rsp), %rdx
    0000013f: 	subq	%fs:0x28, %rdx
    00000148: 	jne	.Ltmp2015 # Offset: 328
    0000014e: 	subq	start_time(%rip), %rax
    00000155: 	pxor	%xmm0, %xmm0
    00000159: 	movq	%rbp, %rdi
    0000015c: 	cvtsi2sd	%rax, %xmm0
    00000161: 	divsd	DATAat0x24890(%rip), %xmm0
    00000169: 	addq	$0x28, %rsp
    0000016d: 	popq	%rbx
    0000016e: 	popq	%rbp
    0000016f: 	popq	%r12
    00000171: 	popq	%r13
    00000173: 	popq	%r14
    00000175: 	popq	%r15
    00000177: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 375
    0000017c: 	nopl	(%rax) # Size: 4
.Ltmp2007:
    00000180: 	movq	0x8(%rsp), %rax
    00000185: 	leaq	DATAat0x246f9(%rip), %rsi
    0000018c: 	movl	$0x1, %edi
    00000191: 	addl	$0x1, %r15d
    00000195: 	movq	(%rax), %rdx
    00000198: 	xorl	%eax, %eax
    0000019a: 	callq	__printf_chk@PLT # Offset: 410
    0000019f: 	cmpl	%r15d, iterations(%rip)
    000001a6: 	jg	.Ltmp2008 # Offset: 422
    000001ac: 	jmp	.Ltmp2006 # Offset: 428
    000001b1: 	nopl	(%rax) # Size: 7
.Ltmp2012:
    000001b8: 	movq	%rbx, %rdi
    000001bb: 	leaq	0x10(%rsp), %rsi
    000001c0: 	xorl	%edx, %edx
    000001c2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 450
    000001c7: 	movq	%rax, (%rbx)
    000001ca: 	movq	%rax, %rdi
    000001cd: 	movq	0x10(%rsp), %rax
    000001d2: 	movq	%rax, 0x10(%rbx)
.Ltmp2018:
    000001d6: 	movq	%r12, %rdx
    000001d9: 	movq	%rbp, %rsi
    000001dc: 	callq	memcpy@PLT # Offset: 476
    000001e1: 	movq	0x10(%rsp), %r12
    000001e6: 	movq	(%rbx), %rdi
    000001e9: 	jmp	.Ltmp2016 # Offset: 489
    000001ee: 	nop # Size: 2
.Ltmp2009:
    000001f0: 	movq	0x8(%rsp), %rsi
    000001f5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001fc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 508
    00000201: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000208: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000020f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000216: 	jne	.Ltmp2017 # Offset: 534
.Ltmp2014:
    0000021c: 	movq	-0x8(%rdx), %rax
    00000220: 	addq	$0x200, %rax
    00000226: 	jmp	.Ltmp2017 # Offset: 550
    0000022b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2013:
    00000230: 	testq	%r12, %r12
    00000233: 	je	.Ltmp2016 # Offset: 563
    00000239: 	jmp	.Ltmp2018 # Offset: 569
.Ltmp2015:
    0000023b: 	callq	__stack_chk_fail@PLT # Offset: 571
.Ltmp2011:
    00000240: 	leaq	DATAat0x24158(%rip), %rdi
    00000247: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 583
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_accumulate3DIdPdPFdPKdmmmdEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_accumulate4DIdPdPFdPKdmmmmdEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 240
  State       : disassembled
  Address     : 0x13360
  Size        : 0x25c
  MaxSize     : 0x260
  Offset      : 0x13360
  Section     : .text
  Orc Section : .local.text._Z17test_accumulate4DIdPdPFdPKdmmmmdEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0239:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rdx, %r13
    00000013: 	pushq	%r12
    00000015: 	movq	%rcx, %r12
    00000018: 	pushq	%rbp
    00000019: 	movq	%r8, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	xorl	%ebx, %ebx
    0000001f: 	subq	$0x38, %rsp
    00000023: 	movq	0x70(%rsp), %rax
    00000028: 	movq	%r9, 0x10(%rsp)
    0000002d: 	movsd	%xmm0, 0x8(%rsp)
    00000033: 	movq	%rax, 0x18(%rsp)
    00000038: 	movq	%fs:0x28, %rax
    00000041: 	movq	%rax, 0x28(%rsp)
    00000046: 	xorl	%eax, %eax
    00000048: 	callq	clock@PLT # Offset: 72
    0000004d: 	movq	%rax, start_time(%rip)
    00000054: 	movl	iterations(%rip), %eax
    0000005a: 	testl	%eax, %eax
    0000005c: 	jle	.Ltmp2019 # Offset: 92
    0000005e: 	nop # Size: 2
.Ltmp2021:
    00000060: 	movsd	0x8(%rsp), %xmm0
    00000066: 	movq	%rbp, %r8
    00000069: 	movq	%r12, %rcx
    0000006c: 	movq	%r13, %rdx
    0000006f: 	movq	0x10(%rsp), %rax
    00000074: 	movq	%r14, %rsi
    00000077: 	movq	%r15, %rdi
    0000007a: 	callq	*%rax # Offset: 122
    0000007c: 	movapd	%xmm0, %xmm1
    00000080: 	movsd	DATAat0x248b8(%rip), %xmm0
    00000088: 	mulsd	init_value(%rip), %xmm0
    00000090: 	ucomisd	%xmm0, %xmm1
    00000094: 	jp	.Ltmp2020 # Offset: 148
    0000009a: 	jne	.Ltmp2020 # Offset: 154
    000000a0: 	addl	$0x1, %ebx
    000000a3: 	cmpl	%ebx, iterations(%rip)
    000000a9: 	jg	.Ltmp2021 # Offset: 169
.Ltmp2019:
    000000ab: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000b2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000b9: 	subq	$0x20, %rax
    000000bd: 	cmpq	%rax, %rbx
    000000c0: 	je	.Ltmp2022 # Offset: 192
    000000c6: 	movq	0x18(%rsp), %rax
    000000cb: 	leaq	0x10(%rbx), %rdi
    000000cf: 	movq	%rdi, (%rbx)
    000000d2: 	movq	(%rax), %rbp
    000000d5: 	movq	0x8(%rax), %r12
    000000d9: 	movq	%rbp, %rax
    000000dc: 	addq	%r12, %rax
    000000df: 	je	.Ltmp2023 # Offset: 223
    000000e1: 	testq	%rbp, %rbp
    000000e4: 	je	.Ltmp2024 # Offset: 228
.Ltmp2023:
    000000ea: 	movq	%r12, 0x20(%rsp)
    000000ef: 	cmpq	$0xf, %r12
    000000f3: 	ja	.Ltmp2025 # Offset: 243
    000000f9: 	cmpq	$0x1, %r12
    000000fd: 	jne	.Ltmp2026 # Offset: 253
    00000103: 	movzbl	(%rbp), %eax
    00000107: 	movb	%al, 0x10(%rbx)
.Ltmp2029:
    0000010a: 	movq	%r12, 0x8(%rbx)
    0000010e: 	movb	$0x0, (%rdi,%r12)
    00000113: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000011a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000121: 	addq	$0x20, %rax
    00000125: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000012c: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000133: 	je	.Ltmp2027 # Offset: 307
.Ltmp2030:
    00000139: 	movq	-0x20(%rax), %rbp
    0000013d: 	callq	clock@PLT # Offset: 317
    00000142: 	movq	%rax, end_time(%rip)
    00000149: 	movq	0x28(%rsp), %rdx
    0000014e: 	subq	%fs:0x28, %rdx
    00000157: 	jne	.Ltmp2028 # Offset: 343
    0000015d: 	subq	start_time(%rip), %rax
    00000164: 	pxor	%xmm0, %xmm0
    00000168: 	movq	%rbp, %rdi
    0000016b: 	cvtsi2sd	%rax, %xmm0
    00000170: 	divsd	DATAat0x24890(%rip), %xmm0
    00000178: 	addq	$0x38, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 390
    0000018b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2020:
    00000190: 	movq	0x18(%rsp), %rax
    00000195: 	leaq	DATAat0x246f9(%rip), %rsi
    0000019c: 	movl	$0x1, %edi
    000001a1: 	addl	$0x1, %ebx
    000001a4: 	movq	(%rax), %rdx
    000001a7: 	xorl	%eax, %eax
    000001a9: 	callq	__printf_chk@PLT # Offset: 425
    000001ae: 	cmpl	%ebx, iterations(%rip)
    000001b4: 	jg	.Ltmp2021 # Offset: 436
    000001ba: 	jmp	.Ltmp2019 # Offset: 442
    000001bf: 	nop # Size: 1
.Ltmp2025:
    000001c0: 	movq	%rbx, %rdi
    000001c3: 	leaq	0x20(%rsp), %rsi
    000001c8: 	xorl	%edx, %edx
    000001ca: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 458
    000001cf: 	movq	%rax, (%rbx)
    000001d2: 	movq	%rax, %rdi
    000001d5: 	movq	0x20(%rsp), %rax
    000001da: 	movq	%rax, 0x10(%rbx)
.Ltmp2031:
    000001de: 	movq	%r12, %rdx
    000001e1: 	movq	%rbp, %rsi
    000001e4: 	callq	memcpy@PLT # Offset: 484
    000001e9: 	movq	0x20(%rsp), %r12
    000001ee: 	movq	(%rbx), %rdi
    000001f1: 	jmp	.Ltmp2029 # Offset: 497
    000001f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2022:
    00000200: 	movq	0x18(%rsp), %rsi
    00000205: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000020c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 524
    00000211: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000218: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000021f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000226: 	jne	.Ltmp2030 # Offset: 550
.Ltmp2027:
    0000022c: 	movq	-0x8(%rdx), %rax
    00000230: 	addq	$0x200, %rax
    00000236: 	jmp	.Ltmp2030 # Offset: 566
    0000023b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2026:
    00000240: 	testq	%r12, %r12
    00000243: 	je	.Ltmp2029 # Offset: 579
    00000249: 	jmp	.Ltmp2031 # Offset: 585
.Ltmp2028:
    0000024b: 	callq	__stack_chk_fail@PLT # Offset: 587
.Ltmp2024:
    00000250: 	leaq	DATAat0x24158(%rip), %rdi
    00000257: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 599
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_accumulate4DIdPdPFdPKdmmmmdEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.6/1(*2)" after disassembly {
  All names   : _Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.6/1
                _Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.6/reference_normalization.cpp/1
  Number      : 241
  State       : disassembled
  Address     : 0x135c0
  Size        : 0x32b
  MaxSize     : 0x330
  Offset      : 0x135c0
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.6/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0240:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rdi, %r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rbx
    00000010: 	subq	$0x28, %rsp
    00000014: 	movq	%rdx, 0x8(%rsp)
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x18(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	callq	clock@PLT # Offset: 41
    0000002e: 	movl	iterations(%rip), %edi
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	testl	%edi, %edi
    0000003d: 	jle	.Ltmp2032 # Offset: 61
    00000043: 	subq	%r14, %rbx
    00000046: 	movl	$0x1, %ebp
    0000004b: 	movsd	init_value(%rip), %xmm2
    00000053: 	movq	%rbx, %r15
    00000056: 	movq	%rbx, %r8
    00000059: 	sarq	%r15
    0000005c: 	testq	%rbx, %rbx
    0000005f: 	cmovgq	%r15, %rbp
    00000063: 	xorl	%r12d, %r12d
    00000066: 	movq	%rbp, %rbx
    00000069: 	movq	%rbp, %r13
    0000006c: 	shrq	$0x3, %rbx
    00000070: 	andq	$-0x8, %r13
    00000074: 	shlq	$0x4, %rbx
    00000078: 	addq	%r14, %rbx
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2039:
    00000080: 	testq	%r8, %r8
    00000083: 	jle	.Ltmp2033 # Offset: 131
.Ltmp2038:
    00000089: 	cmpq	$0xe, %r8
    0000008d: 	jle	.Ltmp2034 # Offset: 141
    00000093: 	movq	%r14, %rax
    00000096: 	pxor	%xmm0, %xmm0
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2035:
    000000a0: 	movdqu	(%rax), %xmm3
    000000a4: 	addq	$0x10, %rax
    000000a8: 	paddw	%xmm3, %xmm0
    000000ac: 	cmpq	%rbx, %rax
    000000af: 	jne	.Ltmp2035 # Offset: 175
    000000b1: 	movdqa	%xmm0, %xmm1
    000000b5: 	psrldq	$0x8, %xmm1
    000000ba: 	paddw	%xmm1, %xmm0
    000000be: 	movdqa	%xmm0, %xmm1
    000000c2: 	psrldq	$0x4, %xmm1
    000000c7: 	paddw	%xmm1, %xmm0
    000000cb: 	movdqa	%xmm0, %xmm1
    000000cf: 	psrldq	$0x2, %xmm1
    000000d4: 	paddw	%xmm1, %xmm0
    000000d8: 	pextrw	$0x0, %xmm0, %eax
    000000dd: 	cmpq	%rbp, %r13
    000000e0: 	je	.Ltmp2036 # Offset: 224
    000000e2: 	movq	%r13, %rdx
.Ltmp2047:
    000000e5: 	leaq	0x1(%rdx), %r10
    000000e9: 	leaq	(%rdx,%rdx), %rsi
    000000ed: 	addw	(%r14,%rdx,2), %ax
    000000f2: 	cmpq	%r10, %r15
    000000f5: 	jle	.Ltmp2036 # Offset: 245
    000000f7: 	leaq	0x2(%rdx), %r10
    000000fb: 	addw	0x2(%r14,%rsi), %ax
    00000101: 	cmpq	%r10, %r15
    00000104: 	jle	.Ltmp2036 # Offset: 260
    00000106: 	leaq	0x3(%rdx), %r10
    0000010a: 	addw	0x4(%r14,%rsi), %ax
    00000110: 	cmpq	%r10, %r15
    00000113: 	jle	.Ltmp2036 # Offset: 275
    00000115: 	leaq	0x4(%rdx), %r10
    00000119: 	addw	0x6(%r14,%rsi), %ax
    0000011f: 	cmpq	%r10, %r15
    00000122: 	jle	.Ltmp2036 # Offset: 290
    00000124: 	leaq	0x5(%rdx), %r10
    00000128: 	addw	0x8(%r14,%rsi), %ax
    0000012e: 	cmpq	%r10, %r15
    00000131: 	jle	.Ltmp2036 # Offset: 305
    00000133: 	addq	$0x6, %rdx
    00000137: 	addw	0xa(%r14,%rsi), %ax
    0000013d: 	cmpq	%rdx, %r15
    00000140: 	jle	.Ltmp2036 # Offset: 320
    00000142: 	addw	0xc(%r14,%rsi), %ax
.Ltmp2036:
    00000148: 	movsd	DATAat0x248a0(%rip), %xmm0
    00000150: 	mulsd	%xmm2, %xmm0
    00000154: 	cvttsd2si	%xmm0, %edx
    00000158: 	cmpw	%ax, %dx
    0000015b: 	je	.Ltmp2037 # Offset: 347
    0000015d: 	movq	0x8(%rsp), %rax
    00000162: 	movl	$0x1, %edi
    00000167: 	movq	%r8, (%rsp)
    0000016b: 	addl	$0x1, %r12d
    0000016f: 	leaq	DATAat0x246f9(%rip), %rsi
    00000176: 	movq	(%rax), %rdx
    00000179: 	xorl	%eax, %eax
    0000017b: 	callq	__printf_chk@PLT # Offset: 379
    00000180: 	movl	iterations(%rip), %edi
    00000186: 	cmpl	%edi, %r12d
    00000189: 	jge	.Ltmp2032 # Offset: 393
    0000018b: 	movq	(%rsp), %r8
    0000018f: 	movsd	init_value(%rip), %xmm2
    00000197: 	testq	%r8, %r8
    0000019a: 	jg	.Ltmp2038 # Offset: 410
.Ltmp2033:
    000001a0: 	xorl	%eax, %eax
    000001a2: 	jmp	.Ltmp2036 # Offset: 418
    000001a4: 	nopl	(%rax) # Size: 4
.Ltmp2037:
    000001a8: 	addl	$0x1, %r12d
    000001ac: 	cmpl	%edi, %r12d
    000001af: 	jl	.Ltmp2039 # Offset: 431
.Ltmp2032:
    000001b5: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001bc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001c3: 	subq	$0x20, %rax
    000001c7: 	cmpq	%rax, %rbx
    000001ca: 	je	.Ltmp2040 # Offset: 458
    000001d0: 	movq	0x8(%rsp), %rax
    000001d5: 	leaq	0x10(%rbx), %rdi
    000001d9: 	movq	%rdi, (%rbx)
    000001dc: 	movq	(%rax), %rbp
    000001df: 	movq	0x8(%rax), %r12
    000001e3: 	movq	%rbp, %rax
    000001e6: 	addq	%r12, %rax
    000001e9: 	je	.Ltmp2041 # Offset: 489
    000001eb: 	testq	%rbp, %rbp
    000001ee: 	je	.Ltmp2042 # Offset: 494
.Ltmp2041:
    000001f4: 	movq	%r12, 0x10(%rsp)
    000001f9: 	cmpq	$0xf, %r12
    000001fd: 	ja	.Ltmp2043 # Offset: 509
    00000203: 	cmpq	$0x1, %r12
    00000207: 	jne	.Ltmp2044 # Offset: 519
    0000020d: 	movzbl	(%rbp), %eax
    00000211: 	movb	%al, 0x10(%rbx)
.Ltmp2048:
    00000214: 	movq	%r12, 0x8(%rbx)
    00000218: 	movb	$0x0, (%rdi,%r12)
    0000021d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000224: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000022b: 	addq	$0x20, %rax
    0000022f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000236: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000023d: 	je	.Ltmp2045 # Offset: 573
.Ltmp2049:
    00000243: 	movq	-0x20(%rax), %rbp
    00000247: 	callq	clock@PLT # Offset: 583
    0000024c: 	movq	%rax, end_time(%rip)
    00000253: 	movq	0x18(%rsp), %rdx
    00000258: 	subq	%fs:0x28, %rdx
    00000261: 	jne	.Ltmp2046 # Offset: 609
    00000267: 	subq	start_time(%rip), %rax
    0000026e: 	pxor	%xmm0, %xmm0
    00000272: 	movq	%rbp, %rdi
    00000275: 	cvtsi2sd	%rax, %xmm0
    0000027a: 	divsd	DATAat0x24890(%rip), %xmm0
    00000282: 	addq	$0x28, %rsp
    00000286: 	popq	%rbx
    00000287: 	popq	%rbp
    00000288: 	popq	%r12
    0000028a: 	popq	%r13
    0000028c: 	popq	%r14
    0000028e: 	popq	%r15
    00000290: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 656
.Ltmp2034:
    00000295: 	xorl	%eax, %eax
    00000297: 	xorl	%edx, %edx
    00000299: 	jmp	.Ltmp2047 # Offset: 665
.Ltmp2043:
    0000029e: 	movq	%rbx, %rdi
    000002a1: 	leaq	0x10(%rsp), %rsi
    000002a6: 	xorl	%edx, %edx
    000002a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 680
    000002ad: 	movq	%rax, (%rbx)
    000002b0: 	movq	%rax, %rdi
    000002b3: 	movq	0x10(%rsp), %rax
    000002b8: 	movq	%rax, 0x10(%rbx)
.Ltmp2050:
    000002bc: 	movq	%r12, %rdx
    000002bf: 	movq	%rbp, %rsi
    000002c2: 	callq	memcpy@PLT # Offset: 706
    000002c7: 	movq	0x10(%rsp), %r12
    000002cc: 	movq	(%rbx), %rdi
    000002cf: 	jmp	.Ltmp2048 # Offset: 719
.Ltmp2040:
    000002d4: 	movq	0x8(%rsp), %rsi
    000002d9: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002e0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 736
    000002e5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002ec: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002f3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002fa: 	jne	.Ltmp2049 # Offset: 762
.Ltmp2045:
    00000300: 	movq	-0x8(%rdx), %rax
    00000304: 	addq	$0x200, %rax
    0000030a: 	jmp	.Ltmp2049 # Offset: 778
.Ltmp2044:
    0000030f: 	testq	%r12, %r12
    00000312: 	je	.Ltmp2048 # Offset: 786
    00000318: 	jmp	.Ltmp2050 # Offset: 792
.Ltmp2046:
    0000031a: 	callq	__stack_chk_fail@PLT # Offset: 794
.Ltmp2042:
    0000031f: 	leaq	DATAat0x24158(%rip), %rdi
    00000326: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 806
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.6/1(*2)"

Binary Function "_Z17test_accumulate3DItPtPFtPKtmmmtEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 242
  State       : disassembled
  Address     : 0x138f0
  Size        : 0x24c
  MaxSize     : 0x250
  Offset      : 0x138f0
  Section     : .text
  Orc Section : .local.text._Z17test_accumulate3DItPtPFtPKtmmmtEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0241:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rdx, %r13
    00000013: 	pushq	%r12
    00000015: 	movq	%rcx, %r12
    00000018: 	pushq	%rbp
    00000019: 	movl	%r8d, %ebp
    0000001c: 	pushq	%rbx
    0000001d: 	movzwl	%bp, %ebp
    00000020: 	xorl	%ebx, %ebx
    00000022: 	subq	$0x28, %rsp
    00000026: 	movq	0x60(%rsp), %rax
    0000002b: 	movq	%r9, (%rsp)
    0000002f: 	movq	%rax, 0x8(%rsp)
    00000034: 	movq	%fs:0x28, %rax
    0000003d: 	movq	%rax, 0x18(%rsp)
    00000042: 	xorl	%eax, %eax
    00000044: 	callq	clock@PLT # Offset: 68
    00000049: 	movq	%rax, start_time(%rip)
    00000050: 	movl	iterations(%rip), %eax
    00000056: 	testl	%eax, %eax
    00000058: 	jle	.Ltmp2051 # Offset: 88
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2053:
    00000060: 	movl	%ebp, %r8d
    00000063: 	movq	%r13, %rdx
    00000066: 	movq	(%rsp), %rax
    0000006a: 	movq	%r12, %rcx
    0000006d: 	movq	%r14, %rsi
    00000070: 	movq	%r15, %rdi
    00000073: 	callq	*%rax # Offset: 115
    00000075: 	movl	%eax, %r8d
    00000078: 	cvttsd2si	init_value(%rip), %eax
    00000080: 	movl	%eax, %edx
    00000082: 	shll	$0x7, %edx
    00000085: 	subl	%edx, %eax
    00000087: 	addl	%eax, %eax
    00000089: 	cmpw	%ax, %r8w
    0000008d: 	je	.Ltmp2052 # Offset: 141
    00000093: 	movq	0x8(%rsp), %rax
    00000098: 	leaq	DATAat0x246f9(%rip), %rsi
    0000009f: 	movl	$0x1, %edi
    000000a4: 	addl	$0x1, %ebx
    000000a7: 	movq	(%rax), %rdx
    000000aa: 	xorl	%eax, %eax
    000000ac: 	callq	__printf_chk@PLT # Offset: 172
    000000b1: 	cmpl	%ebx, iterations(%rip)
    000000b7: 	jg	.Ltmp2053 # Offset: 183
.Ltmp2051:
    000000b9: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000c0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000c7: 	subq	$0x20, %rax
    000000cb: 	cmpq	%rax, %rbx
    000000ce: 	je	.Ltmp2054 # Offset: 206
    000000d4: 	movq	0x8(%rsp), %rax
    000000d9: 	leaq	0x10(%rbx), %rdi
    000000dd: 	movq	%rdi, (%rbx)
    000000e0: 	movq	(%rax), %rbp
    000000e3: 	movq	0x8(%rax), %r12
    000000e7: 	movq	%rbp, %rax
    000000ea: 	addq	%r12, %rax
    000000ed: 	je	.Ltmp2055 # Offset: 237
    000000ef: 	testq	%rbp, %rbp
    000000f2: 	je	.Ltmp2056 # Offset: 242
.Ltmp2055:
    000000f8: 	movq	%r12, 0x10(%rsp)
    000000fd: 	cmpq	$0xf, %r12
    00000101: 	ja	.Ltmp2057 # Offset: 257
    00000107: 	cmpq	$0x1, %r12
    0000010b: 	jne	.Ltmp2058 # Offset: 267
    00000111: 	movzbl	(%rbp), %eax
    00000115: 	movb	%al, 0x10(%rbx)
.Ltmp2061:
    00000118: 	movq	%r12, 0x8(%rbx)
    0000011c: 	movb	$0x0, (%rdi,%r12)
    00000121: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000128: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000012f: 	addq	$0x20, %rax
    00000133: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000013a: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000141: 	je	.Ltmp2059 # Offset: 321
.Ltmp2062:
    00000147: 	movq	-0x20(%rax), %rbp
    0000014b: 	callq	clock@PLT # Offset: 331
    00000150: 	movq	%rax, end_time(%rip)
    00000157: 	movq	0x18(%rsp), %rdx
    0000015c: 	subq	%fs:0x28, %rdx
    00000165: 	jne	.Ltmp2060 # Offset: 357
    0000016b: 	subq	start_time(%rip), %rax
    00000172: 	pxor	%xmm0, %xmm0
    00000176: 	movq	%rbp, %rdi
    00000179: 	cvtsi2sd	%rax, %xmm0
    0000017e: 	divsd	DATAat0x24890(%rip), %xmm0
    00000186: 	addq	$0x28, %rsp
    0000018a: 	popq	%rbx
    0000018b: 	popq	%rbp
    0000018c: 	popq	%r12
    0000018e: 	popq	%r13
    00000190: 	popq	%r14
    00000192: 	popq	%r15
    00000194: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 404
    00000199: 	nopl	(%rax) # Size: 7
.Ltmp2052:
    000001a0: 	addl	$0x1, %ebx
    000001a3: 	cmpl	%ebx, iterations(%rip)
    000001a9: 	jg	.Ltmp2053 # Offset: 425
    000001af: 	jmp	.Ltmp2051 # Offset: 431
    000001b4: 	nopl	(%rax) # Size: 4
.Ltmp2057:
    000001b8: 	movq	%rbx, %rdi
    000001bb: 	leaq	0x10(%rsp), %rsi
    000001c0: 	xorl	%edx, %edx
    000001c2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 450
    000001c7: 	movq	%rax, (%rbx)
    000001ca: 	movq	%rax, %rdi
    000001cd: 	movq	0x10(%rsp), %rax
    000001d2: 	movq	%rax, 0x10(%rbx)
.Ltmp2063:
    000001d6: 	movq	%r12, %rdx
    000001d9: 	movq	%rbp, %rsi
    000001dc: 	callq	memcpy@PLT # Offset: 476
    000001e1: 	movq	0x10(%rsp), %r12
    000001e6: 	movq	(%rbx), %rdi
    000001e9: 	jmp	.Ltmp2061 # Offset: 489
    000001ee: 	nop # Size: 2
.Ltmp2054:
    000001f0: 	movq	0x8(%rsp), %rsi
    000001f5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001fc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 508
    00000201: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000208: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000020f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000216: 	jne	.Ltmp2062 # Offset: 534
.Ltmp2059:
    0000021c: 	movq	-0x8(%rdx), %rax
    00000220: 	addq	$0x200, %rax
    00000226: 	jmp	.Ltmp2062 # Offset: 550
    0000022b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2058:
    00000230: 	testq	%r12, %r12
    00000233: 	je	.Ltmp2061 # Offset: 563
    00000239: 	jmp	.Ltmp2063 # Offset: 569
.Ltmp2060:
    0000023b: 	callq	__stack_chk_fail@PLT # Offset: 571
.Ltmp2056:
    00000240: 	leaq	DATAat0x24158(%rip), %rdi
    00000247: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 583
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_accumulate3DItPtPFtPKtmmmtEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.4/1(*2)" after disassembly {
  All names   : _Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.4/1
                _Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.4/reference_normalization.cpp/1
  Number      : 243
  State       : disassembled
  Address     : 0x13b40
  Size        : 0x32b
  MaxSize     : 0x330
  Offset      : 0x13b40
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.4/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0242:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rdi, %r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rbx
    00000010: 	subq	$0x28, %rsp
    00000014: 	movq	%rdx, 0x8(%rsp)
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x18(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	callq	clock@PLT # Offset: 41
    0000002e: 	movl	iterations(%rip), %edi
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	testl	%edi, %edi
    0000003d: 	jle	.Ltmp2064 # Offset: 61
    00000043: 	subq	%r14, %rbx
    00000046: 	movl	$0x1, %ebp
    0000004b: 	movsd	init_value(%rip), %xmm2
    00000053: 	movq	%rbx, %r15
    00000056: 	movq	%rbx, %r8
    00000059: 	sarq	%r15
    0000005c: 	testq	%rbx, %rbx
    0000005f: 	cmovgq	%r15, %rbp
    00000063: 	xorl	%r12d, %r12d
    00000066: 	movq	%rbp, %rbx
    00000069: 	movq	%rbp, %r13
    0000006c: 	shrq	$0x3, %rbx
    00000070: 	andq	$-0x8, %r13
    00000074: 	shlq	$0x4, %rbx
    00000078: 	addq	%r14, %rbx
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2071:
    00000080: 	testq	%r8, %r8
    00000083: 	jle	.Ltmp2065 # Offset: 131
.Ltmp2070:
    00000089: 	cmpq	$0xe, %r8
    0000008d: 	jle	.Ltmp2066 # Offset: 141
    00000093: 	movq	%r14, %rax
    00000096: 	pxor	%xmm0, %xmm0
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2067:
    000000a0: 	movdqu	(%rax), %xmm3
    000000a4: 	addq	$0x10, %rax
    000000a8: 	paddw	%xmm3, %xmm0
    000000ac: 	cmpq	%rbx, %rax
    000000af: 	jne	.Ltmp2067 # Offset: 175
    000000b1: 	movdqa	%xmm0, %xmm1
    000000b5: 	psrldq	$0x8, %xmm1
    000000ba: 	paddw	%xmm1, %xmm0
    000000be: 	movdqa	%xmm0, %xmm1
    000000c2: 	psrldq	$0x4, %xmm1
    000000c7: 	paddw	%xmm1, %xmm0
    000000cb: 	movdqa	%xmm0, %xmm1
    000000cf: 	psrldq	$0x2, %xmm1
    000000d4: 	paddw	%xmm1, %xmm0
    000000d8: 	pextrw	$0x0, %xmm0, %eax
    000000dd: 	cmpq	%rbp, %r13
    000000e0: 	je	.Ltmp2068 # Offset: 224
    000000e2: 	movq	%r13, %rdx
.Ltmp2079:
    000000e5: 	leaq	0x1(%rdx), %r10
    000000e9: 	leaq	(%rdx,%rdx), %rsi
    000000ed: 	addw	(%r14,%rdx,2), %ax
    000000f2: 	cmpq	%r10, %r15
    000000f5: 	jle	.Ltmp2068 # Offset: 245
    000000f7: 	leaq	0x2(%rdx), %r10
    000000fb: 	addw	0x2(%r14,%rsi), %ax
    00000101: 	cmpq	%r10, %r15
    00000104: 	jle	.Ltmp2068 # Offset: 260
    00000106: 	leaq	0x3(%rdx), %r10
    0000010a: 	addw	0x4(%r14,%rsi), %ax
    00000110: 	cmpq	%r10, %r15
    00000113: 	jle	.Ltmp2068 # Offset: 275
    00000115: 	leaq	0x4(%rdx), %r10
    00000119: 	addw	0x6(%r14,%rsi), %ax
    0000011f: 	cmpq	%r10, %r15
    00000122: 	jle	.Ltmp2068 # Offset: 290
    00000124: 	leaq	0x5(%rdx), %r10
    00000128: 	addw	0x8(%r14,%rsi), %ax
    0000012e: 	cmpq	%r10, %r15
    00000131: 	jle	.Ltmp2068 # Offset: 305
    00000133: 	addq	$0x6, %rdx
    00000137: 	addw	0xa(%r14,%rsi), %ax
    0000013d: 	cmpq	%rdx, %r15
    00000140: 	jle	.Ltmp2068 # Offset: 320
    00000142: 	addw	0xc(%r14,%rsi), %ax
.Ltmp2068:
    00000148: 	movsd	DATAat0x248a0(%rip), %xmm0
    00000150: 	mulsd	%xmm2, %xmm0
    00000154: 	cvttsd2si	%xmm0, %edx
    00000158: 	cmpw	%ax, %dx
    0000015b: 	je	.Ltmp2069 # Offset: 347
    0000015d: 	movq	0x8(%rsp), %rax
    00000162: 	movl	$0x1, %edi
    00000167: 	movq	%r8, (%rsp)
    0000016b: 	addl	$0x1, %r12d
    0000016f: 	leaq	DATAat0x246f9(%rip), %rsi
    00000176: 	movq	(%rax), %rdx
    00000179: 	xorl	%eax, %eax
    0000017b: 	callq	__printf_chk@PLT # Offset: 379
    00000180: 	movl	iterations(%rip), %edi
    00000186: 	cmpl	%edi, %r12d
    00000189: 	jge	.Ltmp2064 # Offset: 393
    0000018b: 	movq	(%rsp), %r8
    0000018f: 	movsd	init_value(%rip), %xmm2
    00000197: 	testq	%r8, %r8
    0000019a: 	jg	.Ltmp2070 # Offset: 410
.Ltmp2065:
    000001a0: 	xorl	%eax, %eax
    000001a2: 	jmp	.Ltmp2068 # Offset: 418
    000001a4: 	nopl	(%rax) # Size: 4
.Ltmp2069:
    000001a8: 	addl	$0x1, %r12d
    000001ac: 	cmpl	%edi, %r12d
    000001af: 	jl	.Ltmp2071 # Offset: 431
.Ltmp2064:
    000001b5: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001bc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001c3: 	subq	$0x20, %rax
    000001c7: 	cmpq	%rax, %rbx
    000001ca: 	je	.Ltmp2072 # Offset: 458
    000001d0: 	movq	0x8(%rsp), %rax
    000001d5: 	leaq	0x10(%rbx), %rdi
    000001d9: 	movq	%rdi, (%rbx)
    000001dc: 	movq	(%rax), %rbp
    000001df: 	movq	0x8(%rax), %r12
    000001e3: 	movq	%rbp, %rax
    000001e6: 	addq	%r12, %rax
    000001e9: 	je	.Ltmp2073 # Offset: 489
    000001eb: 	testq	%rbp, %rbp
    000001ee: 	je	.Ltmp2074 # Offset: 494
.Ltmp2073:
    000001f4: 	movq	%r12, 0x10(%rsp)
    000001f9: 	cmpq	$0xf, %r12
    000001fd: 	ja	.Ltmp2075 # Offset: 509
    00000203: 	cmpq	$0x1, %r12
    00000207: 	jne	.Ltmp2076 # Offset: 519
    0000020d: 	movzbl	(%rbp), %eax
    00000211: 	movb	%al, 0x10(%rbx)
.Ltmp2080:
    00000214: 	movq	%r12, 0x8(%rbx)
    00000218: 	movb	$0x0, (%rdi,%r12)
    0000021d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000224: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000022b: 	addq	$0x20, %rax
    0000022f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000236: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000023d: 	je	.Ltmp2077 # Offset: 573
.Ltmp2081:
    00000243: 	movq	-0x20(%rax), %rbp
    00000247: 	callq	clock@PLT # Offset: 583
    0000024c: 	movq	%rax, end_time(%rip)
    00000253: 	movq	0x18(%rsp), %rdx
    00000258: 	subq	%fs:0x28, %rdx
    00000261: 	jne	.Ltmp2078 # Offset: 609
    00000267: 	subq	start_time(%rip), %rax
    0000026e: 	pxor	%xmm0, %xmm0
    00000272: 	movq	%rbp, %rdi
    00000275: 	cvtsi2sd	%rax, %xmm0
    0000027a: 	divsd	DATAat0x24890(%rip), %xmm0
    00000282: 	addq	$0x28, %rsp
    00000286: 	popq	%rbx
    00000287: 	popq	%rbp
    00000288: 	popq	%r12
    0000028a: 	popq	%r13
    0000028c: 	popq	%r14
    0000028e: 	popq	%r15
    00000290: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 656
.Ltmp2066:
    00000295: 	xorl	%eax, %eax
    00000297: 	xorl	%edx, %edx
    00000299: 	jmp	.Ltmp2079 # Offset: 665
.Ltmp2075:
    0000029e: 	movq	%rbx, %rdi
    000002a1: 	leaq	0x10(%rsp), %rsi
    000002a6: 	xorl	%edx, %edx
    000002a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 680
    000002ad: 	movq	%rax, (%rbx)
    000002b0: 	movq	%rax, %rdi
    000002b3: 	movq	0x10(%rsp), %rax
    000002b8: 	movq	%rax, 0x10(%rbx)
.Ltmp2082:
    000002bc: 	movq	%r12, %rdx
    000002bf: 	movq	%rbp, %rsi
    000002c2: 	callq	memcpy@PLT # Offset: 706
    000002c7: 	movq	0x10(%rsp), %r12
    000002cc: 	movq	(%rbx), %rdi
    000002cf: 	jmp	.Ltmp2080 # Offset: 719
.Ltmp2072:
    000002d4: 	movq	0x8(%rsp), %rsi
    000002d9: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002e0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 736
    000002e5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002ec: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002f3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002fa: 	jne	.Ltmp2081 # Offset: 762
.Ltmp2077:
    00000300: 	movq	-0x8(%rdx), %rax
    00000304: 	addq	$0x200, %rax
    0000030a: 	jmp	.Ltmp2081 # Offset: 778
.Ltmp2076:
    0000030f: 	testq	%r12, %r12
    00000312: 	je	.Ltmp2080 # Offset: 786
    00000318: 	jmp	.Ltmp2082 # Offset: 792
.Ltmp2078:
    0000031a: 	callq	__stack_chk_fail@PLT # Offset: 794
.Ltmp2074:
    0000031f: 	leaq	DATAat0x24158(%rip), %rdi
    00000326: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 806
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.4/1(*2)"

Binary Function "_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.5/1(*2)" after disassembly {
  All names   : _Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.5/1
                _Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.5/reference_normalization.cpp/1
  Number      : 244
  State       : disassembled
  Address     : 0x13e70
  Size        : 0x32b
  MaxSize     : 0x330
  Offset      : 0x13e70
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.5/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0243:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rdi, %r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rbx
    00000010: 	subq	$0x28, %rsp
    00000014: 	movq	%rdx, 0x8(%rsp)
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x18(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	callq	clock@PLT # Offset: 41
    0000002e: 	movl	iterations(%rip), %edi
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	testl	%edi, %edi
    0000003d: 	jle	.Ltmp2083 # Offset: 61
    00000043: 	subq	%r14, %rbx
    00000046: 	movl	$0x1, %ebp
    0000004b: 	movsd	init_value(%rip), %xmm2
    00000053: 	movq	%rbx, %r15
    00000056: 	movq	%rbx, %r8
    00000059: 	sarq	%r15
    0000005c: 	testq	%rbx, %rbx
    0000005f: 	cmovgq	%r15, %rbp
    00000063: 	xorl	%r12d, %r12d
    00000066: 	movq	%rbp, %rbx
    00000069: 	movq	%rbp, %r13
    0000006c: 	shrq	$0x3, %rbx
    00000070: 	andq	$-0x8, %r13
    00000074: 	shlq	$0x4, %rbx
    00000078: 	addq	%r14, %rbx
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2090:
    00000080: 	testq	%r8, %r8
    00000083: 	jle	.Ltmp2084 # Offset: 131
.Ltmp2089:
    00000089: 	cmpq	$0xe, %r8
    0000008d: 	jle	.Ltmp2085 # Offset: 141
    00000093: 	movq	%r14, %rax
    00000096: 	pxor	%xmm0, %xmm0
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2086:
    000000a0: 	movdqu	(%rax), %xmm3
    000000a4: 	addq	$0x10, %rax
    000000a8: 	paddw	%xmm3, %xmm0
    000000ac: 	cmpq	%rbx, %rax
    000000af: 	jne	.Ltmp2086 # Offset: 175
    000000b1: 	movdqa	%xmm0, %xmm1
    000000b5: 	psrldq	$0x8, %xmm1
    000000ba: 	paddw	%xmm1, %xmm0
    000000be: 	movdqa	%xmm0, %xmm1
    000000c2: 	psrldq	$0x4, %xmm1
    000000c7: 	paddw	%xmm1, %xmm0
    000000cb: 	movdqa	%xmm0, %xmm1
    000000cf: 	psrldq	$0x2, %xmm1
    000000d4: 	paddw	%xmm1, %xmm0
    000000d8: 	pextrw	$0x0, %xmm0, %eax
    000000dd: 	cmpq	%rbp, %r13
    000000e0: 	je	.Ltmp2087 # Offset: 224
    000000e2: 	movq	%r13, %rdx
.Ltmp2098:
    000000e5: 	leaq	0x1(%rdx), %r10
    000000e9: 	leaq	(%rdx,%rdx), %rsi
    000000ed: 	addw	(%r14,%rdx,2), %ax
    000000f2: 	cmpq	%r10, %r15
    000000f5: 	jle	.Ltmp2087 # Offset: 245
    000000f7: 	leaq	0x2(%rdx), %r10
    000000fb: 	addw	0x2(%r14,%rsi), %ax
    00000101: 	cmpq	%r10, %r15
    00000104: 	jle	.Ltmp2087 # Offset: 260
    00000106: 	leaq	0x3(%rdx), %r10
    0000010a: 	addw	0x4(%r14,%rsi), %ax
    00000110: 	cmpq	%r10, %r15
    00000113: 	jle	.Ltmp2087 # Offset: 275
    00000115: 	leaq	0x4(%rdx), %r10
    00000119: 	addw	0x6(%r14,%rsi), %ax
    0000011f: 	cmpq	%r10, %r15
    00000122: 	jle	.Ltmp2087 # Offset: 290
    00000124: 	leaq	0x5(%rdx), %r10
    00000128: 	addw	0x8(%r14,%rsi), %ax
    0000012e: 	cmpq	%r10, %r15
    00000131: 	jle	.Ltmp2087 # Offset: 305
    00000133: 	addq	$0x6, %rdx
    00000137: 	addw	0xa(%r14,%rsi), %ax
    0000013d: 	cmpq	%rdx, %r15
    00000140: 	jle	.Ltmp2087 # Offset: 320
    00000142: 	addw	0xc(%r14,%rsi), %ax
.Ltmp2087:
    00000148: 	movsd	DATAat0x248a0(%rip), %xmm0
    00000150: 	mulsd	%xmm2, %xmm0
    00000154: 	cvttsd2si	%xmm0, %edx
    00000158: 	cmpw	%ax, %dx
    0000015b: 	je	.Ltmp2088 # Offset: 347
    0000015d: 	movq	0x8(%rsp), %rax
    00000162: 	movl	$0x1, %edi
    00000167: 	movq	%r8, (%rsp)
    0000016b: 	addl	$0x1, %r12d
    0000016f: 	leaq	DATAat0x246f9(%rip), %rsi
    00000176: 	movq	(%rax), %rdx
    00000179: 	xorl	%eax, %eax
    0000017b: 	callq	__printf_chk@PLT # Offset: 379
    00000180: 	movl	iterations(%rip), %edi
    00000186: 	cmpl	%edi, %r12d
    00000189: 	jge	.Ltmp2083 # Offset: 393
    0000018b: 	movq	(%rsp), %r8
    0000018f: 	movsd	init_value(%rip), %xmm2
    00000197: 	testq	%r8, %r8
    0000019a: 	jg	.Ltmp2089 # Offset: 410
.Ltmp2084:
    000001a0: 	xorl	%eax, %eax
    000001a2: 	jmp	.Ltmp2087 # Offset: 418
    000001a4: 	nopl	(%rax) # Size: 4
.Ltmp2088:
    000001a8: 	addl	$0x1, %r12d
    000001ac: 	cmpl	%edi, %r12d
    000001af: 	jl	.Ltmp2090 # Offset: 431
.Ltmp2083:
    000001b5: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001bc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001c3: 	subq	$0x20, %rax
    000001c7: 	cmpq	%rax, %rbx
    000001ca: 	je	.Ltmp2091 # Offset: 458
    000001d0: 	movq	0x8(%rsp), %rax
    000001d5: 	leaq	0x10(%rbx), %rdi
    000001d9: 	movq	%rdi, (%rbx)
    000001dc: 	movq	(%rax), %rbp
    000001df: 	movq	0x8(%rax), %r12
    000001e3: 	movq	%rbp, %rax
    000001e6: 	addq	%r12, %rax
    000001e9: 	je	.Ltmp2092 # Offset: 489
    000001eb: 	testq	%rbp, %rbp
    000001ee: 	je	.Ltmp2093 # Offset: 494
.Ltmp2092:
    000001f4: 	movq	%r12, 0x10(%rsp)
    000001f9: 	cmpq	$0xf, %r12
    000001fd: 	ja	.Ltmp2094 # Offset: 509
    00000203: 	cmpq	$0x1, %r12
    00000207: 	jne	.Ltmp2095 # Offset: 519
    0000020d: 	movzbl	(%rbp), %eax
    00000211: 	movb	%al, 0x10(%rbx)
.Ltmp2099:
    00000214: 	movq	%r12, 0x8(%rbx)
    00000218: 	movb	$0x0, (%rdi,%r12)
    0000021d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000224: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000022b: 	addq	$0x20, %rax
    0000022f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000236: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000023d: 	je	.Ltmp2096 # Offset: 573
.Ltmp2100:
    00000243: 	movq	-0x20(%rax), %rbp
    00000247: 	callq	clock@PLT # Offset: 583
    0000024c: 	movq	%rax, end_time(%rip)
    00000253: 	movq	0x18(%rsp), %rdx
    00000258: 	subq	%fs:0x28, %rdx
    00000261: 	jne	.Ltmp2097 # Offset: 609
    00000267: 	subq	start_time(%rip), %rax
    0000026e: 	pxor	%xmm0, %xmm0
    00000272: 	movq	%rbp, %rdi
    00000275: 	cvtsi2sd	%rax, %xmm0
    0000027a: 	divsd	DATAat0x24890(%rip), %xmm0
    00000282: 	addq	$0x28, %rsp
    00000286: 	popq	%rbx
    00000287: 	popq	%rbp
    00000288: 	popq	%r12
    0000028a: 	popq	%r13
    0000028c: 	popq	%r14
    0000028e: 	popq	%r15
    00000290: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 656
.Ltmp2085:
    00000295: 	xorl	%eax, %eax
    00000297: 	xorl	%edx, %edx
    00000299: 	jmp	.Ltmp2098 # Offset: 665
.Ltmp2094:
    0000029e: 	movq	%rbx, %rdi
    000002a1: 	leaq	0x10(%rsp), %rsi
    000002a6: 	xorl	%edx, %edx
    000002a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 680
    000002ad: 	movq	%rax, (%rbx)
    000002b0: 	movq	%rax, %rdi
    000002b3: 	movq	0x10(%rsp), %rax
    000002b8: 	movq	%rax, 0x10(%rbx)
.Ltmp2101:
    000002bc: 	movq	%r12, %rdx
    000002bf: 	movq	%rbp, %rsi
    000002c2: 	callq	memcpy@PLT # Offset: 706
    000002c7: 	movq	0x10(%rsp), %r12
    000002cc: 	movq	(%rbx), %rdi
    000002cf: 	jmp	.Ltmp2099 # Offset: 719
.Ltmp2091:
    000002d4: 	movq	0x8(%rsp), %rsi
    000002d9: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002e0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 736
    000002e5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002ec: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002f3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002fa: 	jne	.Ltmp2100 # Offset: 762
.Ltmp2096:
    00000300: 	movq	-0x8(%rdx), %rax
    00000304: 	addq	$0x200, %rax
    0000030a: 	jmp	.Ltmp2100 # Offset: 778
.Ltmp2095:
    0000030f: 	testq	%r12, %r12
    00000312: 	je	.Ltmp2099 # Offset: 786
    00000318: 	jmp	.Ltmp2101 # Offset: 792
.Ltmp2097:
    0000031a: 	callq	__stack_chk_fail@PLT # Offset: 794
.Ltmp2093:
    0000031f: 	leaq	DATAat0x24158(%rip), %rdi
    00000326: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 806
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.5/1(*2)"

Binary Function "_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.5/1(*2)" after disassembly {
  All names   : _Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.5/1
                _Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.5/reference_normalization.cpp/1
  Number      : 245
  State       : disassembled
  Address     : 0x141a0
  Size        : 0x32b
  MaxSize     : 0x330
  Offset      : 0x141a0
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.5/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0244:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rdi, %r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rbx
    00000010: 	subq	$0x28, %rsp
    00000014: 	movq	%rdx, 0x8(%rsp)
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x18(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	callq	clock@PLT # Offset: 41
    0000002e: 	movl	iterations(%rip), %edi
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	testl	%edi, %edi
    0000003d: 	jle	.Ltmp2102 # Offset: 61
    00000043: 	subq	%r14, %rbx
    00000046: 	movl	$0x1, %ebp
    0000004b: 	movsd	init_value(%rip), %xmm2
    00000053: 	movq	%rbx, %r15
    00000056: 	movq	%rbx, %r8
    00000059: 	sarq	%r15
    0000005c: 	testq	%rbx, %rbx
    0000005f: 	cmovgq	%r15, %rbp
    00000063: 	xorl	%r12d, %r12d
    00000066: 	movq	%rbp, %rbx
    00000069: 	movq	%rbp, %r13
    0000006c: 	shrq	$0x3, %rbx
    00000070: 	andq	$-0x8, %r13
    00000074: 	shlq	$0x4, %rbx
    00000078: 	addq	%r14, %rbx
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2109:
    00000080: 	testq	%r8, %r8
    00000083: 	jle	.Ltmp2103 # Offset: 131
.Ltmp2108:
    00000089: 	cmpq	$0xe, %r8
    0000008d: 	jle	.Ltmp2104 # Offset: 141
    00000093: 	movq	%r14, %rax
    00000096: 	pxor	%xmm0, %xmm0
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2105:
    000000a0: 	movdqu	(%rax), %xmm3
    000000a4: 	addq	$0x10, %rax
    000000a8: 	paddw	%xmm3, %xmm0
    000000ac: 	cmpq	%rbx, %rax
    000000af: 	jne	.Ltmp2105 # Offset: 175
    000000b1: 	movdqa	%xmm0, %xmm1
    000000b5: 	psrldq	$0x8, %xmm1
    000000ba: 	paddw	%xmm1, %xmm0
    000000be: 	movdqa	%xmm0, %xmm1
    000000c2: 	psrldq	$0x4, %xmm1
    000000c7: 	paddw	%xmm1, %xmm0
    000000cb: 	movdqa	%xmm0, %xmm1
    000000cf: 	psrldq	$0x2, %xmm1
    000000d4: 	paddw	%xmm1, %xmm0
    000000d8: 	pextrw	$0x0, %xmm0, %eax
    000000dd: 	cmpq	%rbp, %r13
    000000e0: 	je	.Ltmp2106 # Offset: 224
    000000e2: 	movq	%r13, %rdx
.Ltmp2117:
    000000e5: 	leaq	0x1(%rdx), %r10
    000000e9: 	leaq	(%rdx,%rdx), %rsi
    000000ed: 	addw	(%r14,%rdx,2), %ax
    000000f2: 	cmpq	%r10, %r15
    000000f5: 	jle	.Ltmp2106 # Offset: 245
    000000f7: 	leaq	0x2(%rdx), %r10
    000000fb: 	addw	0x2(%r14,%rsi), %ax
    00000101: 	cmpq	%r10, %r15
    00000104: 	jle	.Ltmp2106 # Offset: 260
    00000106: 	leaq	0x3(%rdx), %r10
    0000010a: 	addw	0x4(%r14,%rsi), %ax
    00000110: 	cmpq	%r10, %r15
    00000113: 	jle	.Ltmp2106 # Offset: 275
    00000115: 	leaq	0x4(%rdx), %r10
    00000119: 	addw	0x6(%r14,%rsi), %ax
    0000011f: 	cmpq	%r10, %r15
    00000122: 	jle	.Ltmp2106 # Offset: 290
    00000124: 	leaq	0x5(%rdx), %r10
    00000128: 	addw	0x8(%r14,%rsi), %ax
    0000012e: 	cmpq	%r10, %r15
    00000131: 	jle	.Ltmp2106 # Offset: 305
    00000133: 	addq	$0x6, %rdx
    00000137: 	addw	0xa(%r14,%rsi), %ax
    0000013d: 	cmpq	%rdx, %r15
    00000140: 	jle	.Ltmp2106 # Offset: 320
    00000142: 	addw	0xc(%r14,%rsi), %ax
.Ltmp2106:
    00000148: 	movsd	DATAat0x248a0(%rip), %xmm0
    00000150: 	mulsd	%xmm2, %xmm0
    00000154: 	cvttsd2si	%xmm0, %edx
    00000158: 	cmpw	%ax, %dx
    0000015b: 	je	.Ltmp2107 # Offset: 347
    0000015d: 	movq	0x8(%rsp), %rax
    00000162: 	movl	$0x1, %edi
    00000167: 	movq	%r8, (%rsp)
    0000016b: 	addl	$0x1, %r12d
    0000016f: 	leaq	DATAat0x246f9(%rip), %rsi
    00000176: 	movq	(%rax), %rdx
    00000179: 	xorl	%eax, %eax
    0000017b: 	callq	__printf_chk@PLT # Offset: 379
    00000180: 	movl	iterations(%rip), %edi
    00000186: 	cmpl	%edi, %r12d
    00000189: 	jge	.Ltmp2102 # Offset: 393
    0000018b: 	movq	(%rsp), %r8
    0000018f: 	movsd	init_value(%rip), %xmm2
    00000197: 	testq	%r8, %r8
    0000019a: 	jg	.Ltmp2108 # Offset: 410
.Ltmp2103:
    000001a0: 	xorl	%eax, %eax
    000001a2: 	jmp	.Ltmp2106 # Offset: 418
    000001a4: 	nopl	(%rax) # Size: 4
.Ltmp2107:
    000001a8: 	addl	$0x1, %r12d
    000001ac: 	cmpl	%edi, %r12d
    000001af: 	jl	.Ltmp2109 # Offset: 431
.Ltmp2102:
    000001b5: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001bc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001c3: 	subq	$0x20, %rax
    000001c7: 	cmpq	%rax, %rbx
    000001ca: 	je	.Ltmp2110 # Offset: 458
    000001d0: 	movq	0x8(%rsp), %rax
    000001d5: 	leaq	0x10(%rbx), %rdi
    000001d9: 	movq	%rdi, (%rbx)
    000001dc: 	movq	(%rax), %rbp
    000001df: 	movq	0x8(%rax), %r12
    000001e3: 	movq	%rbp, %rax
    000001e6: 	addq	%r12, %rax
    000001e9: 	je	.Ltmp2111 # Offset: 489
    000001eb: 	testq	%rbp, %rbp
    000001ee: 	je	.Ltmp2112 # Offset: 494
.Ltmp2111:
    000001f4: 	movq	%r12, 0x10(%rsp)
    000001f9: 	cmpq	$0xf, %r12
    000001fd: 	ja	.Ltmp2113 # Offset: 509
    00000203: 	cmpq	$0x1, %r12
    00000207: 	jne	.Ltmp2114 # Offset: 519
    0000020d: 	movzbl	(%rbp), %eax
    00000211: 	movb	%al, 0x10(%rbx)
.Ltmp2118:
    00000214: 	movq	%r12, 0x8(%rbx)
    00000218: 	movb	$0x0, (%rdi,%r12)
    0000021d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000224: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000022b: 	addq	$0x20, %rax
    0000022f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000236: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000023d: 	je	.Ltmp2115 # Offset: 573
.Ltmp2119:
    00000243: 	movq	-0x20(%rax), %rbp
    00000247: 	callq	clock@PLT # Offset: 583
    0000024c: 	movq	%rax, end_time(%rip)
    00000253: 	movq	0x18(%rsp), %rdx
    00000258: 	subq	%fs:0x28, %rdx
    00000261: 	jne	.Ltmp2116 # Offset: 609
    00000267: 	subq	start_time(%rip), %rax
    0000026e: 	pxor	%xmm0, %xmm0
    00000272: 	movq	%rbp, %rdi
    00000275: 	cvtsi2sd	%rax, %xmm0
    0000027a: 	divsd	DATAat0x24890(%rip), %xmm0
    00000282: 	addq	$0x28, %rsp
    00000286: 	popq	%rbx
    00000287: 	popq	%rbp
    00000288: 	popq	%r12
    0000028a: 	popq	%r13
    0000028c: 	popq	%r14
    0000028e: 	popq	%r15
    00000290: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 656
.Ltmp2104:
    00000295: 	xorl	%eax, %eax
    00000297: 	xorl	%edx, %edx
    00000299: 	jmp	.Ltmp2117 # Offset: 665
.Ltmp2113:
    0000029e: 	movq	%rbx, %rdi
    000002a1: 	leaq	0x10(%rsp), %rsi
    000002a6: 	xorl	%edx, %edx
    000002a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 680
    000002ad: 	movq	%rax, (%rbx)
    000002b0: 	movq	%rax, %rdi
    000002b3: 	movq	0x10(%rsp), %rax
    000002b8: 	movq	%rax, 0x10(%rbx)
.Ltmp2120:
    000002bc: 	movq	%r12, %rdx
    000002bf: 	movq	%rbp, %rsi
    000002c2: 	callq	memcpy@PLT # Offset: 706
    000002c7: 	movq	0x10(%rsp), %r12
    000002cc: 	movq	(%rbx), %rdi
    000002cf: 	jmp	.Ltmp2118 # Offset: 719
.Ltmp2110:
    000002d4: 	movq	0x8(%rsp), %rsi
    000002d9: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002e0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 736
    000002e5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002ec: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002f3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002fa: 	jne	.Ltmp2119 # Offset: 762
.Ltmp2115:
    00000300: 	movq	-0x8(%rdx), %rax
    00000304: 	addq	$0x200, %rax
    0000030a: 	jmp	.Ltmp2119 # Offset: 778
.Ltmp2114:
    0000030f: 	testq	%r12, %r12
    00000312: 	je	.Ltmp2118 # Offset: 786
    00000318: 	jmp	.Ltmp2120 # Offset: 792
.Ltmp2116:
    0000031a: 	callq	__stack_chk_fail@PLT # Offset: 794
.Ltmp2112:
    0000031f: 	leaq	DATAat0x24158(%rip), %rdi
    00000326: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 806
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.5/1(*2)"

Binary Function "_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.4/1(*2)" after disassembly {
  All names   : _Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.4/1
                _Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.4/reference_normalization.cpp/1
  Number      : 246
  State       : disassembled
  Address     : 0x144d0
  Size        : 0x32b
  MaxSize     : 0x330
  Offset      : 0x144d0
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.4/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0245:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rdi, %r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rbx
    00000010: 	subq	$0x28, %rsp
    00000014: 	movq	%rdx, 0x8(%rsp)
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x18(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	callq	clock@PLT # Offset: 41
    0000002e: 	movl	iterations(%rip), %edi
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	testl	%edi, %edi
    0000003d: 	jle	.Ltmp2121 # Offset: 61
    00000043: 	subq	%r14, %rbx
    00000046: 	movl	$0x1, %ebp
    0000004b: 	movsd	init_value(%rip), %xmm2
    00000053: 	movq	%rbx, %r15
    00000056: 	movq	%rbx, %r8
    00000059: 	sarq	%r15
    0000005c: 	testq	%rbx, %rbx
    0000005f: 	cmovgq	%r15, %rbp
    00000063: 	xorl	%r12d, %r12d
    00000066: 	movq	%rbp, %rbx
    00000069: 	movq	%rbp, %r13
    0000006c: 	shrq	$0x3, %rbx
    00000070: 	andq	$-0x8, %r13
    00000074: 	shlq	$0x4, %rbx
    00000078: 	addq	%r14, %rbx
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2128:
    00000080: 	testq	%r8, %r8
    00000083: 	jle	.Ltmp2122 # Offset: 131
.Ltmp2127:
    00000089: 	cmpq	$0xe, %r8
    0000008d: 	jle	.Ltmp2123 # Offset: 141
    00000093: 	movq	%r14, %rax
    00000096: 	pxor	%xmm0, %xmm0
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2124:
    000000a0: 	movdqu	(%rax), %xmm3
    000000a4: 	addq	$0x10, %rax
    000000a8: 	paddw	%xmm3, %xmm0
    000000ac: 	cmpq	%rbx, %rax
    000000af: 	jne	.Ltmp2124 # Offset: 175
    000000b1: 	movdqa	%xmm0, %xmm1
    000000b5: 	psrldq	$0x8, %xmm1
    000000ba: 	paddw	%xmm1, %xmm0
    000000be: 	movdqa	%xmm0, %xmm1
    000000c2: 	psrldq	$0x4, %xmm1
    000000c7: 	paddw	%xmm1, %xmm0
    000000cb: 	movdqa	%xmm0, %xmm1
    000000cf: 	psrldq	$0x2, %xmm1
    000000d4: 	paddw	%xmm1, %xmm0
    000000d8: 	pextrw	$0x0, %xmm0, %eax
    000000dd: 	cmpq	%rbp, %r13
    000000e0: 	je	.Ltmp2125 # Offset: 224
    000000e2: 	movq	%r13, %rdx
.Ltmp2136:
    000000e5: 	leaq	0x1(%rdx), %r10
    000000e9: 	leaq	(%rdx,%rdx), %rsi
    000000ed: 	addw	(%r14,%rdx,2), %ax
    000000f2: 	cmpq	%r10, %r15
    000000f5: 	jle	.Ltmp2125 # Offset: 245
    000000f7: 	leaq	0x2(%rdx), %r10
    000000fb: 	addw	0x2(%r14,%rsi), %ax
    00000101: 	cmpq	%r10, %r15
    00000104: 	jle	.Ltmp2125 # Offset: 260
    00000106: 	leaq	0x3(%rdx), %r10
    0000010a: 	addw	0x4(%r14,%rsi), %ax
    00000110: 	cmpq	%r10, %r15
    00000113: 	jle	.Ltmp2125 # Offset: 275
    00000115: 	leaq	0x4(%rdx), %r10
    00000119: 	addw	0x6(%r14,%rsi), %ax
    0000011f: 	cmpq	%r10, %r15
    00000122: 	jle	.Ltmp2125 # Offset: 290
    00000124: 	leaq	0x5(%rdx), %r10
    00000128: 	addw	0x8(%r14,%rsi), %ax
    0000012e: 	cmpq	%r10, %r15
    00000131: 	jle	.Ltmp2125 # Offset: 305
    00000133: 	addq	$0x6, %rdx
    00000137: 	addw	0xa(%r14,%rsi), %ax
    0000013d: 	cmpq	%rdx, %r15
    00000140: 	jle	.Ltmp2125 # Offset: 320
    00000142: 	addw	0xc(%r14,%rsi), %ax
.Ltmp2125:
    00000148: 	movsd	DATAat0x248a0(%rip), %xmm0
    00000150: 	mulsd	%xmm2, %xmm0
    00000154: 	cvttsd2si	%xmm0, %edx
    00000158: 	cmpw	%ax, %dx
    0000015b: 	je	.Ltmp2126 # Offset: 347
    0000015d: 	movq	0x8(%rsp), %rax
    00000162: 	movl	$0x1, %edi
    00000167: 	movq	%r8, (%rsp)
    0000016b: 	addl	$0x1, %r12d
    0000016f: 	leaq	DATAat0x246f9(%rip), %rsi
    00000176: 	movq	(%rax), %rdx
    00000179: 	xorl	%eax, %eax
    0000017b: 	callq	__printf_chk@PLT # Offset: 379
    00000180: 	movl	iterations(%rip), %edi
    00000186: 	cmpl	%edi, %r12d
    00000189: 	jge	.Ltmp2121 # Offset: 393
    0000018b: 	movq	(%rsp), %r8
    0000018f: 	movsd	init_value(%rip), %xmm2
    00000197: 	testq	%r8, %r8
    0000019a: 	jg	.Ltmp2127 # Offset: 410
.Ltmp2122:
    000001a0: 	xorl	%eax, %eax
    000001a2: 	jmp	.Ltmp2125 # Offset: 418
    000001a4: 	nopl	(%rax) # Size: 4
.Ltmp2126:
    000001a8: 	addl	$0x1, %r12d
    000001ac: 	cmpl	%edi, %r12d
    000001af: 	jl	.Ltmp2128 # Offset: 431
.Ltmp2121:
    000001b5: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001bc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001c3: 	subq	$0x20, %rax
    000001c7: 	cmpq	%rax, %rbx
    000001ca: 	je	.Ltmp2129 # Offset: 458
    000001d0: 	movq	0x8(%rsp), %rax
    000001d5: 	leaq	0x10(%rbx), %rdi
    000001d9: 	movq	%rdi, (%rbx)
    000001dc: 	movq	(%rax), %rbp
    000001df: 	movq	0x8(%rax), %r12
    000001e3: 	movq	%rbp, %rax
    000001e6: 	addq	%r12, %rax
    000001e9: 	je	.Ltmp2130 # Offset: 489
    000001eb: 	testq	%rbp, %rbp
    000001ee: 	je	.Ltmp2131 # Offset: 494
.Ltmp2130:
    000001f4: 	movq	%r12, 0x10(%rsp)
    000001f9: 	cmpq	$0xf, %r12
    000001fd: 	ja	.Ltmp2132 # Offset: 509
    00000203: 	cmpq	$0x1, %r12
    00000207: 	jne	.Ltmp2133 # Offset: 519
    0000020d: 	movzbl	(%rbp), %eax
    00000211: 	movb	%al, 0x10(%rbx)
.Ltmp2137:
    00000214: 	movq	%r12, 0x8(%rbx)
    00000218: 	movb	$0x0, (%rdi,%r12)
    0000021d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000224: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000022b: 	addq	$0x20, %rax
    0000022f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000236: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000023d: 	je	.Ltmp2134 # Offset: 573
.Ltmp2138:
    00000243: 	movq	-0x20(%rax), %rbp
    00000247: 	callq	clock@PLT # Offset: 583
    0000024c: 	movq	%rax, end_time(%rip)
    00000253: 	movq	0x18(%rsp), %rdx
    00000258: 	subq	%fs:0x28, %rdx
    00000261: 	jne	.Ltmp2135 # Offset: 609
    00000267: 	subq	start_time(%rip), %rax
    0000026e: 	pxor	%xmm0, %xmm0
    00000272: 	movq	%rbp, %rdi
    00000275: 	cvtsi2sd	%rax, %xmm0
    0000027a: 	divsd	DATAat0x24890(%rip), %xmm0
    00000282: 	addq	$0x28, %rsp
    00000286: 	popq	%rbx
    00000287: 	popq	%rbp
    00000288: 	popq	%r12
    0000028a: 	popq	%r13
    0000028c: 	popq	%r14
    0000028e: 	popq	%r15
    00000290: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 656
.Ltmp2123:
    00000295: 	xorl	%eax, %eax
    00000297: 	xorl	%edx, %edx
    00000299: 	jmp	.Ltmp2136 # Offset: 665
.Ltmp2132:
    0000029e: 	movq	%rbx, %rdi
    000002a1: 	leaq	0x10(%rsp), %rsi
    000002a6: 	xorl	%edx, %edx
    000002a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 680
    000002ad: 	movq	%rax, (%rbx)
    000002b0: 	movq	%rax, %rdi
    000002b3: 	movq	0x10(%rsp), %rax
    000002b8: 	movq	%rax, 0x10(%rbx)
.Ltmp2139:
    000002bc: 	movq	%r12, %rdx
    000002bf: 	movq	%rbp, %rsi
    000002c2: 	callq	memcpy@PLT # Offset: 706
    000002c7: 	movq	0x10(%rsp), %r12
    000002cc: 	movq	(%rbx), %rdi
    000002cf: 	jmp	.Ltmp2137 # Offset: 719
.Ltmp2129:
    000002d4: 	movq	0x8(%rsp), %rsi
    000002d9: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002e0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 736
    000002e5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002ec: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002f3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002fa: 	jne	.Ltmp2138 # Offset: 762
.Ltmp2134:
    00000300: 	movq	-0x8(%rdx), %rax
    00000304: 	addq	$0x200, %rax
    0000030a: 	jmp	.Ltmp2138 # Offset: 778
.Ltmp2133:
    0000030f: 	testq	%r12, %r12
    00000312: 	je	.Ltmp2137 # Offset: 786
    00000318: 	jmp	.Ltmp2139 # Offset: 792
.Ltmp2135:
    0000031a: 	callq	__stack_chk_fail@PLT # Offset: 794
.Ltmp2131:
    0000031f: 	leaq	DATAat0x24158(%rip), %rdi
    00000326: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 806
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.4/1(*2)"

Binary Function "_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.6/1(*2)" after disassembly {
  All names   : _Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.6/1
                _Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.6/reference_normalization.cpp/1
  Number      : 247
  State       : disassembled
  Address     : 0x14800
  Size        : 0x32b
  MaxSize     : 0x330
  Offset      : 0x14800
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.6/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0246:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rdi, %r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rbx
    00000010: 	subq	$0x28, %rsp
    00000014: 	movq	%rdx, 0x8(%rsp)
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x18(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	callq	clock@PLT # Offset: 41
    0000002e: 	movl	iterations(%rip), %edi
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	testl	%edi, %edi
    0000003d: 	jle	.Ltmp2140 # Offset: 61
    00000043: 	subq	%r14, %rbx
    00000046: 	movl	$0x1, %ebp
    0000004b: 	movsd	init_value(%rip), %xmm2
    00000053: 	movq	%rbx, %r15
    00000056: 	movq	%rbx, %r8
    00000059: 	sarq	%r15
    0000005c: 	testq	%rbx, %rbx
    0000005f: 	cmovgq	%r15, %rbp
    00000063: 	xorl	%r12d, %r12d
    00000066: 	movq	%rbp, %rbx
    00000069: 	movq	%rbp, %r13
    0000006c: 	shrq	$0x3, %rbx
    00000070: 	andq	$-0x8, %r13
    00000074: 	shlq	$0x4, %rbx
    00000078: 	addq	%r14, %rbx
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2147:
    00000080: 	testq	%r8, %r8
    00000083: 	jle	.Ltmp2141 # Offset: 131
.Ltmp2146:
    00000089: 	cmpq	$0xe, %r8
    0000008d: 	jle	.Ltmp2142 # Offset: 141
    00000093: 	movq	%r14, %rax
    00000096: 	pxor	%xmm0, %xmm0
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2143:
    000000a0: 	movdqu	(%rax), %xmm3
    000000a4: 	addq	$0x10, %rax
    000000a8: 	paddw	%xmm3, %xmm0
    000000ac: 	cmpq	%rbx, %rax
    000000af: 	jne	.Ltmp2143 # Offset: 175
    000000b1: 	movdqa	%xmm0, %xmm1
    000000b5: 	psrldq	$0x8, %xmm1
    000000ba: 	paddw	%xmm1, %xmm0
    000000be: 	movdqa	%xmm0, %xmm1
    000000c2: 	psrldq	$0x4, %xmm1
    000000c7: 	paddw	%xmm1, %xmm0
    000000cb: 	movdqa	%xmm0, %xmm1
    000000cf: 	psrldq	$0x2, %xmm1
    000000d4: 	paddw	%xmm1, %xmm0
    000000d8: 	pextrw	$0x0, %xmm0, %eax
    000000dd: 	cmpq	%rbp, %r13
    000000e0: 	je	.Ltmp2144 # Offset: 224
    000000e2: 	movq	%r13, %rdx
.Ltmp2155:
    000000e5: 	leaq	0x1(%rdx), %r10
    000000e9: 	leaq	(%rdx,%rdx), %rsi
    000000ed: 	addw	(%r14,%rdx,2), %ax
    000000f2: 	cmpq	%r10, %r15
    000000f5: 	jle	.Ltmp2144 # Offset: 245
    000000f7: 	leaq	0x2(%rdx), %r10
    000000fb: 	addw	0x2(%r14,%rsi), %ax
    00000101: 	cmpq	%r10, %r15
    00000104: 	jle	.Ltmp2144 # Offset: 260
    00000106: 	leaq	0x3(%rdx), %r10
    0000010a: 	addw	0x4(%r14,%rsi), %ax
    00000110: 	cmpq	%r10, %r15
    00000113: 	jle	.Ltmp2144 # Offset: 275
    00000115: 	leaq	0x4(%rdx), %r10
    00000119: 	addw	0x6(%r14,%rsi), %ax
    0000011f: 	cmpq	%r10, %r15
    00000122: 	jle	.Ltmp2144 # Offset: 290
    00000124: 	leaq	0x5(%rdx), %r10
    00000128: 	addw	0x8(%r14,%rsi), %ax
    0000012e: 	cmpq	%r10, %r15
    00000131: 	jle	.Ltmp2144 # Offset: 305
    00000133: 	addq	$0x6, %rdx
    00000137: 	addw	0xa(%r14,%rsi), %ax
    0000013d: 	cmpq	%rdx, %r15
    00000140: 	jle	.Ltmp2144 # Offset: 320
    00000142: 	addw	0xc(%r14,%rsi), %ax
.Ltmp2144:
    00000148: 	movsd	DATAat0x248a0(%rip), %xmm0
    00000150: 	mulsd	%xmm2, %xmm0
    00000154: 	cvttsd2si	%xmm0, %edx
    00000158: 	cmpw	%ax, %dx
    0000015b: 	je	.Ltmp2145 # Offset: 347
    0000015d: 	movq	0x8(%rsp), %rax
    00000162: 	movl	$0x1, %edi
    00000167: 	movq	%r8, (%rsp)
    0000016b: 	addl	$0x1, %r12d
    0000016f: 	leaq	DATAat0x246f9(%rip), %rsi
    00000176: 	movq	(%rax), %rdx
    00000179: 	xorl	%eax, %eax
    0000017b: 	callq	__printf_chk@PLT # Offset: 379
    00000180: 	movl	iterations(%rip), %edi
    00000186: 	cmpl	%edi, %r12d
    00000189: 	jge	.Ltmp2140 # Offset: 393
    0000018b: 	movq	(%rsp), %r8
    0000018f: 	movsd	init_value(%rip), %xmm2
    00000197: 	testq	%r8, %r8
    0000019a: 	jg	.Ltmp2146 # Offset: 410
.Ltmp2141:
    000001a0: 	xorl	%eax, %eax
    000001a2: 	jmp	.Ltmp2144 # Offset: 418
    000001a4: 	nopl	(%rax) # Size: 4
.Ltmp2145:
    000001a8: 	addl	$0x1, %r12d
    000001ac: 	cmpl	%edi, %r12d
    000001af: 	jl	.Ltmp2147 # Offset: 431
.Ltmp2140:
    000001b5: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001bc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001c3: 	subq	$0x20, %rax
    000001c7: 	cmpq	%rax, %rbx
    000001ca: 	je	.Ltmp2148 # Offset: 458
    000001d0: 	movq	0x8(%rsp), %rax
    000001d5: 	leaq	0x10(%rbx), %rdi
    000001d9: 	movq	%rdi, (%rbx)
    000001dc: 	movq	(%rax), %rbp
    000001df: 	movq	0x8(%rax), %r12
    000001e3: 	movq	%rbp, %rax
    000001e6: 	addq	%r12, %rax
    000001e9: 	je	.Ltmp2149 # Offset: 489
    000001eb: 	testq	%rbp, %rbp
    000001ee: 	je	.Ltmp2150 # Offset: 494
.Ltmp2149:
    000001f4: 	movq	%r12, 0x10(%rsp)
    000001f9: 	cmpq	$0xf, %r12
    000001fd: 	ja	.Ltmp2151 # Offset: 509
    00000203: 	cmpq	$0x1, %r12
    00000207: 	jne	.Ltmp2152 # Offset: 519
    0000020d: 	movzbl	(%rbp), %eax
    00000211: 	movb	%al, 0x10(%rbx)
.Ltmp2156:
    00000214: 	movq	%r12, 0x8(%rbx)
    00000218: 	movb	$0x0, (%rdi,%r12)
    0000021d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000224: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000022b: 	addq	$0x20, %rax
    0000022f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000236: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000023d: 	je	.Ltmp2153 # Offset: 573
.Ltmp2157:
    00000243: 	movq	-0x20(%rax), %rbp
    00000247: 	callq	clock@PLT # Offset: 583
    0000024c: 	movq	%rax, end_time(%rip)
    00000253: 	movq	0x18(%rsp), %rdx
    00000258: 	subq	%fs:0x28, %rdx
    00000261: 	jne	.Ltmp2154 # Offset: 609
    00000267: 	subq	start_time(%rip), %rax
    0000026e: 	pxor	%xmm0, %xmm0
    00000272: 	movq	%rbp, %rdi
    00000275: 	cvtsi2sd	%rax, %xmm0
    0000027a: 	divsd	DATAat0x24890(%rip), %xmm0
    00000282: 	addq	$0x28, %rsp
    00000286: 	popq	%rbx
    00000287: 	popq	%rbp
    00000288: 	popq	%r12
    0000028a: 	popq	%r13
    0000028c: 	popq	%r14
    0000028e: 	popq	%r15
    00000290: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 656
.Ltmp2142:
    00000295: 	xorl	%eax, %eax
    00000297: 	xorl	%edx, %edx
    00000299: 	jmp	.Ltmp2155 # Offset: 665
.Ltmp2151:
    0000029e: 	movq	%rbx, %rdi
    000002a1: 	leaq	0x10(%rsp), %rsi
    000002a6: 	xorl	%edx, %edx
    000002a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 680
    000002ad: 	movq	%rax, (%rbx)
    000002b0: 	movq	%rax, %rdi
    000002b3: 	movq	0x10(%rsp), %rax
    000002b8: 	movq	%rax, 0x10(%rbx)
.Ltmp2158:
    000002bc: 	movq	%r12, %rdx
    000002bf: 	movq	%rbp, %rsi
    000002c2: 	callq	memcpy@PLT # Offset: 706
    000002c7: 	movq	0x10(%rsp), %r12
    000002cc: 	movq	(%rbx), %rdi
    000002cf: 	jmp	.Ltmp2156 # Offset: 719
.Ltmp2148:
    000002d4: 	movq	0x8(%rsp), %rsi
    000002d9: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002e0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 736
    000002e5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002ec: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002f3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002fa: 	jne	.Ltmp2157 # Offset: 762
.Ltmp2153:
    00000300: 	movq	-0x8(%rdx), %rax
    00000304: 	addq	$0x200, %rax
    0000030a: 	jmp	.Ltmp2157 # Offset: 778
.Ltmp2152:
    0000030f: 	testq	%r12, %r12
    00000312: 	je	.Ltmp2156 # Offset: 786
    00000318: 	jmp	.Ltmp2158 # Offset: 792
.Ltmp2154:
    0000031a: 	callq	__stack_chk_fail@PLT # Offset: 794
.Ltmp2150:
    0000031f: 	leaq	DATAat0x24158(%rip), %rdi
    00000326: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 806
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.6/1(*2)"

Binary Function "_Z17test_accumulate3DIsPsPFsPKsmmmsEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 248
  State       : disassembled
  Address     : 0x14b30
  Size        : 0x24c
  MaxSize     : 0x250
  Offset      : 0x14b30
  Section     : .text
  Orc Section : .local.text._Z17test_accumulate3DIsPsPFsPKsmmmsEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0247:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rdx, %r13
    00000013: 	pushq	%r12
    00000015: 	movq	%rcx, %r12
    00000018: 	pushq	%rbp
    00000019: 	movl	%r8d, %ebp
    0000001c: 	pushq	%rbx
    0000001d: 	movswl	%bp, %ebp
    00000020: 	xorl	%ebx, %ebx
    00000022: 	subq	$0x28, %rsp
    00000026: 	movq	0x60(%rsp), %rax
    0000002b: 	movq	%r9, (%rsp)
    0000002f: 	movq	%rax, 0x8(%rsp)
    00000034: 	movq	%fs:0x28, %rax
    0000003d: 	movq	%rax, 0x18(%rsp)
    00000042: 	xorl	%eax, %eax
    00000044: 	callq	clock@PLT # Offset: 68
    00000049: 	movq	%rax, start_time(%rip)
    00000050: 	movl	iterations(%rip), %eax
    00000056: 	testl	%eax, %eax
    00000058: 	jle	.Ltmp2159 # Offset: 88
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2161:
    00000060: 	movl	%ebp, %r8d
    00000063: 	movq	%r13, %rdx
    00000066: 	movq	(%rsp), %rax
    0000006a: 	movq	%r12, %rcx
    0000006d: 	movq	%r14, %rsi
    00000070: 	movq	%r15, %rdi
    00000073: 	callq	*%rax # Offset: 115
    00000075: 	movl	%eax, %r8d
    00000078: 	cvttsd2si	init_value(%rip), %eax
    00000080: 	movl	%eax, %edx
    00000082: 	shll	$0x7, %edx
    00000085: 	subl	%edx, %eax
    00000087: 	addl	%eax, %eax
    00000089: 	cmpw	%ax, %r8w
    0000008d: 	je	.Ltmp2160 # Offset: 141
    00000093: 	movq	0x8(%rsp), %rax
    00000098: 	leaq	DATAat0x246f9(%rip), %rsi
    0000009f: 	movl	$0x1, %edi
    000000a4: 	addl	$0x1, %ebx
    000000a7: 	movq	(%rax), %rdx
    000000aa: 	xorl	%eax, %eax
    000000ac: 	callq	__printf_chk@PLT # Offset: 172
    000000b1: 	cmpl	%ebx, iterations(%rip)
    000000b7: 	jg	.Ltmp2161 # Offset: 183
.Ltmp2159:
    000000b9: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000c0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000c7: 	subq	$0x20, %rax
    000000cb: 	cmpq	%rax, %rbx
    000000ce: 	je	.Ltmp2162 # Offset: 206
    000000d4: 	movq	0x8(%rsp), %rax
    000000d9: 	leaq	0x10(%rbx), %rdi
    000000dd: 	movq	%rdi, (%rbx)
    000000e0: 	movq	(%rax), %rbp
    000000e3: 	movq	0x8(%rax), %r12
    000000e7: 	movq	%rbp, %rax
    000000ea: 	addq	%r12, %rax
    000000ed: 	je	.Ltmp2163 # Offset: 237
    000000ef: 	testq	%rbp, %rbp
    000000f2: 	je	.Ltmp2164 # Offset: 242
.Ltmp2163:
    000000f8: 	movq	%r12, 0x10(%rsp)
    000000fd: 	cmpq	$0xf, %r12
    00000101: 	ja	.Ltmp2165 # Offset: 257
    00000107: 	cmpq	$0x1, %r12
    0000010b: 	jne	.Ltmp2166 # Offset: 267
    00000111: 	movzbl	(%rbp), %eax
    00000115: 	movb	%al, 0x10(%rbx)
.Ltmp2169:
    00000118: 	movq	%r12, 0x8(%rbx)
    0000011c: 	movb	$0x0, (%rdi,%r12)
    00000121: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000128: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000012f: 	addq	$0x20, %rax
    00000133: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000013a: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000141: 	je	.Ltmp2167 # Offset: 321
.Ltmp2170:
    00000147: 	movq	-0x20(%rax), %rbp
    0000014b: 	callq	clock@PLT # Offset: 331
    00000150: 	movq	%rax, end_time(%rip)
    00000157: 	movq	0x18(%rsp), %rdx
    0000015c: 	subq	%fs:0x28, %rdx
    00000165: 	jne	.Ltmp2168 # Offset: 357
    0000016b: 	subq	start_time(%rip), %rax
    00000172: 	pxor	%xmm0, %xmm0
    00000176: 	movq	%rbp, %rdi
    00000179: 	cvtsi2sd	%rax, %xmm0
    0000017e: 	divsd	DATAat0x24890(%rip), %xmm0
    00000186: 	addq	$0x28, %rsp
    0000018a: 	popq	%rbx
    0000018b: 	popq	%rbp
    0000018c: 	popq	%r12
    0000018e: 	popq	%r13
    00000190: 	popq	%r14
    00000192: 	popq	%r15
    00000194: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 404
    00000199: 	nopl	(%rax) # Size: 7
.Ltmp2160:
    000001a0: 	addl	$0x1, %ebx
    000001a3: 	cmpl	%ebx, iterations(%rip)
    000001a9: 	jg	.Ltmp2161 # Offset: 425
    000001af: 	jmp	.Ltmp2159 # Offset: 431
    000001b4: 	nopl	(%rax) # Size: 4
.Ltmp2165:
    000001b8: 	movq	%rbx, %rdi
    000001bb: 	leaq	0x10(%rsp), %rsi
    000001c0: 	xorl	%edx, %edx
    000001c2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 450
    000001c7: 	movq	%rax, (%rbx)
    000001ca: 	movq	%rax, %rdi
    000001cd: 	movq	0x10(%rsp), %rax
    000001d2: 	movq	%rax, 0x10(%rbx)
.Ltmp2171:
    000001d6: 	movq	%r12, %rdx
    000001d9: 	movq	%rbp, %rsi
    000001dc: 	callq	memcpy@PLT # Offset: 476
    000001e1: 	movq	0x10(%rsp), %r12
    000001e6: 	movq	(%rbx), %rdi
    000001e9: 	jmp	.Ltmp2169 # Offset: 489
    000001ee: 	nop # Size: 2
.Ltmp2162:
    000001f0: 	movq	0x8(%rsp), %rsi
    000001f5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001fc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 508
    00000201: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000208: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000020f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000216: 	jne	.Ltmp2170 # Offset: 534
.Ltmp2167:
    0000021c: 	movq	-0x8(%rdx), %rax
    00000220: 	addq	$0x200, %rax
    00000226: 	jmp	.Ltmp2170 # Offset: 550
    0000022b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2166:
    00000230: 	testq	%r12, %r12
    00000233: 	je	.Ltmp2169 # Offset: 563
    00000239: 	jmp	.Ltmp2171 # Offset: 569
.Ltmp2168:
    0000023b: 	callq	__stack_chk_fail@PLT # Offset: 571
.Ltmp2164:
    00000240: 	leaq	DATAat0x24158(%rip), %rdi
    00000247: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 583
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_accumulate3DIsPsPFsPKsmmmsEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_accumulate4DItPtPFtPKtmmmmtEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 249
  State       : disassembled
  Address     : 0x14d80
  Size        : 0x25c
  MaxSize     : 0x260
  Offset      : 0x14d80
  Section     : .text
  Orc Section : .local.text._Z17test_accumulate4DItPtPFtPKtmmmmtEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0248:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rdx, %r13
    00000013: 	pushq	%r12
    00000015: 	movq	%rcx, %r12
    00000018: 	pushq	%rbp
    00000019: 	movq	%r8, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	movl	%r9d, %ebx
    00000020: 	subq	$0x38, %rsp
    00000024: 	movq	0x70(%rsp), %rax
    00000029: 	movq	%rax, 0x10(%rsp)
    0000002e: 	movq	0x78(%rsp), %rax
    00000033: 	movq	%rax, 0x18(%rsp)
    00000038: 	movq	%fs:0x28, %rax
    00000041: 	movq	%rax, 0x28(%rsp)
    00000046: 	xorl	%eax, %eax
    00000048: 	callq	clock@PLT # Offset: 72
    0000004d: 	movq	%rax, start_time(%rip)
    00000054: 	movzwl	%bx, %eax
    00000057: 	xorl	%ebx, %ebx
    00000059: 	movl	%eax, 0xc(%rsp)
    0000005d: 	movl	iterations(%rip), %eax
    00000063: 	testl	%eax, %eax
    00000065: 	jle	.Ltmp2172 # Offset: 101
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2174:
    00000070: 	movq	%rbp, %r8
    00000073: 	movq	%r13, %rdx
    00000076: 	movl	0xc(%rsp), %r9d
    0000007b: 	movq	0x10(%rsp), %rax
    00000080: 	movq	%r12, %rcx
    00000083: 	movq	%r14, %rsi
    00000086: 	movq	%r15, %rdi
    00000089: 	callq	*%rax # Offset: 137
    0000008b: 	movl	%eax, %r8d
    0000008e: 	cvttsd2si	init_value(%rip), %eax
    00000096: 	movl	%eax, %edx
    00000098: 	shll	$0xd, %edx
    0000009b: 	subl	%edx, %eax
    0000009d: 	cmpw	%ax, %r8w
    000000a1: 	je	.Ltmp2173 # Offset: 161
    000000a7: 	movq	0x18(%rsp), %rax
    000000ac: 	leaq	DATAat0x246f9(%rip), %rsi
    000000b3: 	movl	$0x1, %edi
    000000b8: 	addl	$0x1, %ebx
    000000bb: 	movq	(%rax), %rdx
    000000be: 	xorl	%eax, %eax
    000000c0: 	callq	__printf_chk@PLT # Offset: 192
    000000c5: 	cmpl	%ebx, iterations(%rip)
    000000cb: 	jg	.Ltmp2174 # Offset: 203
.Ltmp2172:
    000000cd: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000d4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000db: 	subq	$0x20, %rax
    000000df: 	cmpq	%rax, %rbx
    000000e2: 	je	.Ltmp2175 # Offset: 226
    000000e8: 	movq	0x18(%rsp), %rax
    000000ed: 	leaq	0x10(%rbx), %rdi
    000000f1: 	movq	%rdi, (%rbx)
    000000f4: 	movq	(%rax), %rbp
    000000f7: 	movq	0x8(%rax), %r12
    000000fb: 	movq	%rbp, %rax
    000000fe: 	addq	%r12, %rax
    00000101: 	je	.Ltmp2176 # Offset: 257
    00000103: 	testq	%rbp, %rbp
    00000106: 	je	.Ltmp2177 # Offset: 262
.Ltmp2176:
    0000010c: 	movq	%r12, 0x20(%rsp)
    00000111: 	cmpq	$0xf, %r12
    00000115: 	ja	.Ltmp2178 # Offset: 277
    0000011b: 	cmpq	$0x1, %r12
    0000011f: 	jne	.Ltmp2179 # Offset: 287
    00000125: 	movzbl	(%rbp), %eax
    00000129: 	movb	%al, 0x10(%rbx)
.Ltmp2182:
    0000012c: 	movq	%r12, 0x8(%rbx)
    00000130: 	movb	$0x0, (%rdi,%r12)
    00000135: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000013c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000143: 	addq	$0x20, %rax
    00000147: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000014e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000155: 	je	.Ltmp2180 # Offset: 341
.Ltmp2183:
    0000015b: 	movq	-0x20(%rax), %rbp
    0000015f: 	callq	clock@PLT # Offset: 351
    00000164: 	movq	%rax, end_time(%rip)
    0000016b: 	movq	0x28(%rsp), %rdx
    00000170: 	subq	%fs:0x28, %rdx
    00000179: 	jne	.Ltmp2181 # Offset: 377
    0000017f: 	subq	start_time(%rip), %rax
    00000186: 	pxor	%xmm0, %xmm0
    0000018a: 	movq	%rbp, %rdi
    0000018d: 	cvtsi2sd	%rax, %xmm0
    00000192: 	divsd	DATAat0x24890(%rip), %xmm0
    0000019a: 	addq	$0x38, %rsp
    0000019e: 	popq	%rbx
    0000019f: 	popq	%rbp
    000001a0: 	popq	%r12
    000001a2: 	popq	%r13
    000001a4: 	popq	%r14
    000001a6: 	popq	%r15
    000001a8: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 424
    000001ad: 	nopl	(%rax) # Size: 3
.Ltmp2173:
    000001b0: 	addl	$0x1, %ebx
    000001b3: 	cmpl	%ebx, iterations(%rip)
    000001b9: 	jg	.Ltmp2174 # Offset: 441
    000001bf: 	jmp	.Ltmp2172 # Offset: 447
    000001c4: 	nopl	(%rax) # Size: 4
.Ltmp2178:
    000001c8: 	movq	%rbx, %rdi
    000001cb: 	leaq	0x20(%rsp), %rsi
    000001d0: 	xorl	%edx, %edx
    000001d2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 466
    000001d7: 	movq	%rax, (%rbx)
    000001da: 	movq	%rax, %rdi
    000001dd: 	movq	0x20(%rsp), %rax
    000001e2: 	movq	%rax, 0x10(%rbx)
.Ltmp2184:
    000001e6: 	movq	%r12, %rdx
    000001e9: 	movq	%rbp, %rsi
    000001ec: 	callq	memcpy@PLT # Offset: 492
    000001f1: 	movq	0x20(%rsp), %r12
    000001f6: 	movq	(%rbx), %rdi
    000001f9: 	jmp	.Ltmp2182 # Offset: 505
    000001fe: 	nop # Size: 2
.Ltmp2175:
    00000200: 	movq	0x18(%rsp), %rsi
    00000205: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000020c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 524
    00000211: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000218: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000021f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000226: 	jne	.Ltmp2183 # Offset: 550
.Ltmp2180:
    0000022c: 	movq	-0x8(%rdx), %rax
    00000230: 	addq	$0x200, %rax
    00000236: 	jmp	.Ltmp2183 # Offset: 566
    0000023b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2179:
    00000240: 	testq	%r12, %r12
    00000243: 	je	.Ltmp2182 # Offset: 579
    00000249: 	jmp	.Ltmp2184 # Offset: 585
.Ltmp2181:
    0000024b: 	callq	__stack_chk_fail@PLT # Offset: 587
.Ltmp2177:
    00000250: 	leaq	DATAat0x24158(%rip), %rdi
    00000257: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 599
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_accumulate4DItPtPFtPKtmmmmtEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.3/1(*2)" after disassembly {
  All names   : _Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.3/1
                _Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.3/reference_normalization.cpp/1
  Number      : 250
  State       : disassembled
  Address     : 0x14fe0
  Size        : 0x2cc
  MaxSize     : 0x2d0
  Offset      : 0x14fe0
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.3/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0249:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rsi, %r14
    00000007: 	pushq	%r13
    00000009: 	movq	%rdx, %r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	subq	$0x28, %rsp
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0x18(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	callq	clock@PLT # Offset: 39
    0000002c: 	movl	iterations(%rip), %edx
    00000032: 	movq	%rax, start_time(%rip)
    00000039: 	testl	%edx, %edx
    0000003b: 	jle	.Ltmp2185 # Offset: 59
    00000041: 	subq	%rbx, %r14
    00000044: 	movl	$0x1, %eax
    00000049: 	pxor	%xmm4, %xmm4
    0000004d: 	movsd	init_value(%rip), %xmm2
    00000055: 	movq	%r14, %rcx
    00000058: 	movsd	DATAat0x248a0(%rip), %xmm3
    00000060: 	leaq	DATAat0x246f9(%rip), %rsi
    00000067: 	sarq	$0x3, %rcx
    0000006b: 	testq	%r14, %r14
    0000006e: 	cmovleq	%rax, %rcx
    00000072: 	xorl	%r12d, %r12d
    00000075: 	movq	%rcx, %rbp
    00000078: 	movq	%rcx, %r15
    0000007b: 	shrq	%rbp
    0000007e: 	andq	$-0x2, %r15
    00000082: 	shlq	$0x4, %rbp
    00000086: 	addq	%rbx, %rbp
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp2191:
    00000090: 	testq	%r14, %r14
    00000093: 	jle	.Ltmp2186 # Offset: 147
.Ltmp2199:
    00000099: 	cmpq	$0x8, %r14
    0000009d: 	jle	.Ltmp2187 # Offset: 157
    000000a3: 	movq	%rbx, %rax
    000000a6: 	movapd	%xmm4, %xmm0
    000000aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2188:
    000000b0: 	movsd	(%rax), %xmm1
    000000b4: 	addq	$0x10, %rax
    000000b8: 	addsd	%xmm1, %xmm0
    000000bc: 	movsd	-0x8(%rax), %xmm1
    000000c1: 	addsd	%xmm1, %xmm0
    000000c5: 	cmpq	%rax, %rbp
    000000c8: 	jne	.Ltmp2188 # Offset: 200
    000000ca: 	movq	%r15, %rax
    000000cd: 	cmpq	%rcx, %r15
    000000d0: 	je	.Ltmp2189 # Offset: 208
.Ltmp2200:
    000000d2: 	addsd	(%rbx,%rax,8), %xmm0
.Ltmp2189:
    000000d7: 	movapd	%xmm2, %xmm1
    000000db: 	mulsd	%xmm3, %xmm1
    000000df: 	ucomisd	%xmm0, %xmm1
    000000e3: 	jp	.Ltmp2190 # Offset: 227
    000000e9: 	jne	.Ltmp2190 # Offset: 233
    000000ef: 	addl	$0x1, %r12d
    000000f3: 	cmpl	%edx, %r12d
    000000f6: 	jl	.Ltmp2191 # Offset: 246
.Ltmp2185:
    000000f8: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000ff: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000106: 	subq	$0x20, %rax
    0000010a: 	cmpq	%rax, %rbx
    0000010d: 	je	.Ltmp2192 # Offset: 269
    00000113: 	leaq	0x10(%rbx), %rdi
    00000117: 	movq	0x8(%r13), %r12
    0000011b: 	movq	%rdi, (%rbx)
    0000011e: 	movq	(%r13), %rbp
    00000122: 	movq	%rbp, %rax
    00000125: 	addq	%r12, %rax
    00000128: 	je	.Ltmp2193 # Offset: 296
    0000012a: 	testq	%rbp, %rbp
    0000012d: 	je	.Ltmp2194 # Offset: 301
.Ltmp2193:
    00000133: 	movq	%r12, 0x10(%rsp)
    00000138: 	cmpq	$0xf, %r12
    0000013c: 	ja	.Ltmp2195 # Offset: 316
    00000142: 	cmpq	$0x1, %r12
    00000146: 	jne	.Ltmp2196 # Offset: 326
    0000014c: 	movzbl	(%rbp), %eax
    00000150: 	movb	%al, 0x10(%rbx)
.Ltmp2201:
    00000153: 	movq	%r12, 0x8(%rbx)
    00000157: 	movb	$0x0, (%rdi,%r12)
    0000015c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000163: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000016a: 	addq	$0x20, %rax
    0000016e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000175: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000017c: 	je	.Ltmp2197 # Offset: 380
.Ltmp2202:
    00000182: 	movq	-0x20(%rax), %rbp
    00000186: 	callq	clock@PLT # Offset: 390
    0000018b: 	movq	%rax, end_time(%rip)
    00000192: 	movq	0x18(%rsp), %rdx
    00000197: 	subq	%fs:0x28, %rdx
    000001a0: 	jne	.Ltmp2198 # Offset: 416
    000001a6: 	subq	start_time(%rip), %rax
    000001ad: 	pxor	%xmm0, %xmm0
    000001b1: 	movq	%rbp, %rdi
    000001b4: 	cvtsi2sd	%rax, %xmm0
    000001b9: 	divsd	DATAat0x24890(%rip), %xmm0
    000001c1: 	addq	$0x28, %rsp
    000001c5: 	popq	%rbx
    000001c6: 	popq	%rbp
    000001c7: 	popq	%r12
    000001c9: 	popq	%r13
    000001cb: 	popq	%r14
    000001cd: 	popq	%r15
    000001cf: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 463
    000001d4: 	nopl	(%rax) # Size: 4
.Ltmp2190:
    000001d8: 	movq	(%r13), %rdx
    000001dc: 	movl	$0x1, %edi
    000001e1: 	xorl	%eax, %eax
    000001e3: 	movq	%rcx, 0x8(%rsp)
    000001e8: 	addl	$0x1, %r12d
    000001ec: 	callq	__printf_chk@PLT # Offset: 492
    000001f1: 	movl	iterations(%rip), %edx
    000001f7: 	cmpl	%edx, %r12d
    000001fa: 	jge	.Ltmp2185 # Offset: 506
    00000200: 	movq	DATAat0x248a0(%rip), %rax
    00000207: 	movq	0x8(%rsp), %rcx
    0000020c: 	pxor	%xmm4, %xmm4
    00000210: 	leaq	DATAat0x246f9(%rip), %rsi
    00000217: 	movsd	init_value(%rip), %xmm2
    0000021f: 	movq	%rax, %xmm3
    00000224: 	testq	%r14, %r14
    00000227: 	jg	.Ltmp2199 # Offset: 551
.Ltmp2186:
    0000022d: 	movapd	%xmm4, %xmm0
    00000231: 	jmp	.Ltmp2189 # Offset: 561
.Ltmp2187:
    00000236: 	movapd	%xmm4, %xmm0
    0000023a: 	xorl	%eax, %eax
    0000023c: 	jmp	.Ltmp2200 # Offset: 572
.Ltmp2195:
    00000241: 	movq	%rbx, %rdi
    00000244: 	leaq	0x10(%rsp), %rsi
    00000249: 	xorl	%edx, %edx
    0000024b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 587
    00000250: 	movq	%rax, (%rbx)
    00000253: 	movq	%rax, %rdi
    00000256: 	movq	0x10(%rsp), %rax
    0000025b: 	movq	%rax, 0x10(%rbx)
.Ltmp2203:
    0000025f: 	movq	%r12, %rdx
    00000262: 	movq	%rbp, %rsi
    00000265: 	callq	memcpy@PLT # Offset: 613
    0000026a: 	movq	0x10(%rsp), %r12
    0000026f: 	movq	(%rbx), %rdi
    00000272: 	jmp	.Ltmp2201 # Offset: 626
.Ltmp2192:
    00000277: 	movq	%r13, %rsi
    0000027a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000281: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 641
    00000286: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000028d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000294: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000029b: 	jne	.Ltmp2202 # Offset: 667
.Ltmp2197:
    000002a1: 	movq	-0x8(%rdx), %rax
    000002a5: 	addq	$0x200, %rax
    000002ab: 	jmp	.Ltmp2202 # Offset: 683
.Ltmp2196:
    000002b0: 	testq	%r12, %r12
    000002b3: 	je	.Ltmp2201 # Offset: 691
    000002b9: 	jmp	.Ltmp2203 # Offset: 697
.Ltmp2198:
    000002bb: 	callq	__stack_chk_fail@PLT # Offset: 699
.Ltmp2194:
    000002c0: 	leaq	DATAat0x24158(%rip), %rdi
    000002c7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 711
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.3/1(*2)"

Binary Function "_Z17test_accumulate4DIsPsPFsPKsmmmmsEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 251
  State       : disassembled
  Address     : 0x152b0
  Size        : 0x25c
  MaxSize     : 0x260
  Offset      : 0x152b0
  Section     : .text
  Orc Section : .local.text._Z17test_accumulate4DIsPsPFsPKsmmmmsEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0250:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rdx, %r13
    00000013: 	pushq	%r12
    00000015: 	movq	%rcx, %r12
    00000018: 	pushq	%rbp
    00000019: 	movq	%r8, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	movl	%r9d, %ebx
    00000020: 	subq	$0x38, %rsp
    00000024: 	movq	0x70(%rsp), %rax
    00000029: 	movq	%rax, 0x10(%rsp)
    0000002e: 	movq	0x78(%rsp), %rax
    00000033: 	movq	%rax, 0x18(%rsp)
    00000038: 	movq	%fs:0x28, %rax
    00000041: 	movq	%rax, 0x28(%rsp)
    00000046: 	xorl	%eax, %eax
    00000048: 	callq	clock@PLT # Offset: 72
    0000004d: 	movq	%rax, start_time(%rip)
    00000054: 	movswl	%bx, %eax
    00000057: 	xorl	%ebx, %ebx
    00000059: 	movl	%eax, 0xc(%rsp)
    0000005d: 	movl	iterations(%rip), %eax
    00000063: 	testl	%eax, %eax
    00000065: 	jle	.Ltmp2204 # Offset: 101
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2206:
    00000070: 	movq	%rbp, %r8
    00000073: 	movq	%r13, %rdx
    00000076: 	movl	0xc(%rsp), %r9d
    0000007b: 	movq	0x10(%rsp), %rax
    00000080: 	movq	%r12, %rcx
    00000083: 	movq	%r14, %rsi
    00000086: 	movq	%r15, %rdi
    00000089: 	callq	*%rax # Offset: 137
    0000008b: 	movl	%eax, %r8d
    0000008e: 	cvttsd2si	init_value(%rip), %eax
    00000096: 	movl	%eax, %edx
    00000098: 	shll	$0xd, %edx
    0000009b: 	subl	%edx, %eax
    0000009d: 	cmpw	%ax, %r8w
    000000a1: 	je	.Ltmp2205 # Offset: 161
    000000a7: 	movq	0x18(%rsp), %rax
    000000ac: 	leaq	DATAat0x246f9(%rip), %rsi
    000000b3: 	movl	$0x1, %edi
    000000b8: 	addl	$0x1, %ebx
    000000bb: 	movq	(%rax), %rdx
    000000be: 	xorl	%eax, %eax
    000000c0: 	callq	__printf_chk@PLT # Offset: 192
    000000c5: 	cmpl	%ebx, iterations(%rip)
    000000cb: 	jg	.Ltmp2206 # Offset: 203
.Ltmp2204:
    000000cd: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000d4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000db: 	subq	$0x20, %rax
    000000df: 	cmpq	%rax, %rbx
    000000e2: 	je	.Ltmp2207 # Offset: 226
    000000e8: 	movq	0x18(%rsp), %rax
    000000ed: 	leaq	0x10(%rbx), %rdi
    000000f1: 	movq	%rdi, (%rbx)
    000000f4: 	movq	(%rax), %rbp
    000000f7: 	movq	0x8(%rax), %r12
    000000fb: 	movq	%rbp, %rax
    000000fe: 	addq	%r12, %rax
    00000101: 	je	.Ltmp2208 # Offset: 257
    00000103: 	testq	%rbp, %rbp
    00000106: 	je	.Ltmp2209 # Offset: 262
.Ltmp2208:
    0000010c: 	movq	%r12, 0x20(%rsp)
    00000111: 	cmpq	$0xf, %r12
    00000115: 	ja	.Ltmp2210 # Offset: 277
    0000011b: 	cmpq	$0x1, %r12
    0000011f: 	jne	.Ltmp2211 # Offset: 287
    00000125: 	movzbl	(%rbp), %eax
    00000129: 	movb	%al, 0x10(%rbx)
.Ltmp2214:
    0000012c: 	movq	%r12, 0x8(%rbx)
    00000130: 	movb	$0x0, (%rdi,%r12)
    00000135: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000013c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000143: 	addq	$0x20, %rax
    00000147: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000014e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000155: 	je	.Ltmp2212 # Offset: 341
.Ltmp2215:
    0000015b: 	movq	-0x20(%rax), %rbp
    0000015f: 	callq	clock@PLT # Offset: 351
    00000164: 	movq	%rax, end_time(%rip)
    0000016b: 	movq	0x28(%rsp), %rdx
    00000170: 	subq	%fs:0x28, %rdx
    00000179: 	jne	.Ltmp2213 # Offset: 377
    0000017f: 	subq	start_time(%rip), %rax
    00000186: 	pxor	%xmm0, %xmm0
    0000018a: 	movq	%rbp, %rdi
    0000018d: 	cvtsi2sd	%rax, %xmm0
    00000192: 	divsd	DATAat0x24890(%rip), %xmm0
    0000019a: 	addq	$0x38, %rsp
    0000019e: 	popq	%rbx
    0000019f: 	popq	%rbp
    000001a0: 	popq	%r12
    000001a2: 	popq	%r13
    000001a4: 	popq	%r14
    000001a6: 	popq	%r15
    000001a8: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 424
    000001ad: 	nopl	(%rax) # Size: 3
.Ltmp2205:
    000001b0: 	addl	$0x1, %ebx
    000001b3: 	cmpl	%ebx, iterations(%rip)
    000001b9: 	jg	.Ltmp2206 # Offset: 441
    000001bf: 	jmp	.Ltmp2204 # Offset: 447
    000001c4: 	nopl	(%rax) # Size: 4
.Ltmp2210:
    000001c8: 	movq	%rbx, %rdi
    000001cb: 	leaq	0x20(%rsp), %rsi
    000001d0: 	xorl	%edx, %edx
    000001d2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 466
    000001d7: 	movq	%rax, (%rbx)
    000001da: 	movq	%rax, %rdi
    000001dd: 	movq	0x20(%rsp), %rax
    000001e2: 	movq	%rax, 0x10(%rbx)
.Ltmp2216:
    000001e6: 	movq	%r12, %rdx
    000001e9: 	movq	%rbp, %rsi
    000001ec: 	callq	memcpy@PLT # Offset: 492
    000001f1: 	movq	0x20(%rsp), %r12
    000001f6: 	movq	(%rbx), %rdi
    000001f9: 	jmp	.Ltmp2214 # Offset: 505
    000001fe: 	nop # Size: 2
.Ltmp2207:
    00000200: 	movq	0x18(%rsp), %rsi
    00000205: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000020c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 524
    00000211: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000218: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000021f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000226: 	jne	.Ltmp2215 # Offset: 550
.Ltmp2212:
    0000022c: 	movq	-0x8(%rdx), %rax
    00000230: 	addq	$0x200, %rax
    00000236: 	jmp	.Ltmp2215 # Offset: 566
    0000023b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2211:
    00000240: 	testq	%r12, %r12
    00000243: 	je	.Ltmp2214 # Offset: 579
    00000249: 	jmp	.Ltmp2216 # Offset: 585
.Ltmp2213:
    0000024b: 	callq	__stack_chk_fail@PLT # Offset: 587
.Ltmp2209:
    00000250: 	leaq	DATAat0x24158(%rip), %rdi
    00000257: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 599
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_accumulate4DIsPsPFsPKsmmmmsEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1(*2)" after disassembly {
  All names   : _Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1
                _Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/reference_normalization.cpp/1
  Number      : 252
  State       : disassembled
  Address     : 0x15510
  Size        : 0x2cc
  MaxSize     : 0x2d0
  Offset      : 0x15510
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0251:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rsi, %r14
    00000007: 	pushq	%r13
    00000009: 	movq	%rdx, %r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	subq	$0x28, %rsp
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0x18(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	callq	clock@PLT # Offset: 39
    0000002c: 	movl	iterations(%rip), %edx
    00000032: 	movq	%rax, start_time(%rip)
    00000039: 	testl	%edx, %edx
    0000003b: 	jle	.Ltmp2217 # Offset: 59
    00000041: 	subq	%rbx, %r14
    00000044: 	movl	$0x1, %eax
    00000049: 	pxor	%xmm4, %xmm4
    0000004d: 	movsd	init_value(%rip), %xmm2
    00000055: 	movq	%r14, %rcx
    00000058: 	movsd	DATAat0x248a0(%rip), %xmm3
    00000060: 	leaq	DATAat0x246f9(%rip), %rsi
    00000067: 	sarq	$0x3, %rcx
    0000006b: 	testq	%r14, %r14
    0000006e: 	cmovleq	%rax, %rcx
    00000072: 	xorl	%r12d, %r12d
    00000075: 	movq	%rcx, %rbp
    00000078: 	movq	%rcx, %r15
    0000007b: 	shrq	%rbp
    0000007e: 	andq	$-0x2, %r15
    00000082: 	shlq	$0x4, %rbp
    00000086: 	addq	%rbx, %rbp
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp2223:
    00000090: 	testq	%r14, %r14
    00000093: 	jle	.Ltmp2218 # Offset: 147
.Ltmp2231:
    00000099: 	cmpq	$0x8, %r14
    0000009d: 	jle	.Ltmp2219 # Offset: 157
    000000a3: 	movq	%rbx, %rax
    000000a6: 	movapd	%xmm4, %xmm0
    000000aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2220:
    000000b0: 	movsd	(%rax), %xmm1
    000000b4: 	addq	$0x10, %rax
    000000b8: 	addsd	%xmm1, %xmm0
    000000bc: 	movsd	-0x8(%rax), %xmm1
    000000c1: 	addsd	%xmm1, %xmm0
    000000c5: 	cmpq	%rax, %rbp
    000000c8: 	jne	.Ltmp2220 # Offset: 200
    000000ca: 	movq	%r15, %rax
    000000cd: 	cmpq	%rcx, %r15
    000000d0: 	je	.Ltmp2221 # Offset: 208
.Ltmp2232:
    000000d2: 	addsd	(%rbx,%rax,8), %xmm0
.Ltmp2221:
    000000d7: 	movapd	%xmm2, %xmm1
    000000db: 	mulsd	%xmm3, %xmm1
    000000df: 	ucomisd	%xmm0, %xmm1
    000000e3: 	jp	.Ltmp2222 # Offset: 227
    000000e9: 	jne	.Ltmp2222 # Offset: 233
    000000ef: 	addl	$0x1, %r12d
    000000f3: 	cmpl	%edx, %r12d
    000000f6: 	jl	.Ltmp2223 # Offset: 246
.Ltmp2217:
    000000f8: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000ff: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000106: 	subq	$0x20, %rax
    0000010a: 	cmpq	%rax, %rbx
    0000010d: 	je	.Ltmp2224 # Offset: 269
    00000113: 	leaq	0x10(%rbx), %rdi
    00000117: 	movq	0x8(%r13), %r12
    0000011b: 	movq	%rdi, (%rbx)
    0000011e: 	movq	(%r13), %rbp
    00000122: 	movq	%rbp, %rax
    00000125: 	addq	%r12, %rax
    00000128: 	je	.Ltmp2225 # Offset: 296
    0000012a: 	testq	%rbp, %rbp
    0000012d: 	je	.Ltmp2226 # Offset: 301
.Ltmp2225:
    00000133: 	movq	%r12, 0x10(%rsp)
    00000138: 	cmpq	$0xf, %r12
    0000013c: 	ja	.Ltmp2227 # Offset: 316
    00000142: 	cmpq	$0x1, %r12
    00000146: 	jne	.Ltmp2228 # Offset: 326
    0000014c: 	movzbl	(%rbp), %eax
    00000150: 	movb	%al, 0x10(%rbx)
.Ltmp2233:
    00000153: 	movq	%r12, 0x8(%rbx)
    00000157: 	movb	$0x0, (%rdi,%r12)
    0000015c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000163: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000016a: 	addq	$0x20, %rax
    0000016e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000175: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000017c: 	je	.Ltmp2229 # Offset: 380
.Ltmp2234:
    00000182: 	movq	-0x20(%rax), %rbp
    00000186: 	callq	clock@PLT # Offset: 390
    0000018b: 	movq	%rax, end_time(%rip)
    00000192: 	movq	0x18(%rsp), %rdx
    00000197: 	subq	%fs:0x28, %rdx
    000001a0: 	jne	.Ltmp2230 # Offset: 416
    000001a6: 	subq	start_time(%rip), %rax
    000001ad: 	pxor	%xmm0, %xmm0
    000001b1: 	movq	%rbp, %rdi
    000001b4: 	cvtsi2sd	%rax, %xmm0
    000001b9: 	divsd	DATAat0x24890(%rip), %xmm0
    000001c1: 	addq	$0x28, %rsp
    000001c5: 	popq	%rbx
    000001c6: 	popq	%rbp
    000001c7: 	popq	%r12
    000001c9: 	popq	%r13
    000001cb: 	popq	%r14
    000001cd: 	popq	%r15
    000001cf: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 463
    000001d4: 	nopl	(%rax) # Size: 4
.Ltmp2222:
    000001d8: 	movq	(%r13), %rdx
    000001dc: 	movl	$0x1, %edi
    000001e1: 	xorl	%eax, %eax
    000001e3: 	movq	%rcx, 0x8(%rsp)
    000001e8: 	addl	$0x1, %r12d
    000001ec: 	callq	__printf_chk@PLT # Offset: 492
    000001f1: 	movl	iterations(%rip), %edx
    000001f7: 	cmpl	%edx, %r12d
    000001fa: 	jge	.Ltmp2217 # Offset: 506
    00000200: 	movq	DATAat0x248a0(%rip), %rax
    00000207: 	movq	0x8(%rsp), %rcx
    0000020c: 	pxor	%xmm4, %xmm4
    00000210: 	leaq	DATAat0x246f9(%rip), %rsi
    00000217: 	movsd	init_value(%rip), %xmm2
    0000021f: 	movq	%rax, %xmm3
    00000224: 	testq	%r14, %r14
    00000227: 	jg	.Ltmp2231 # Offset: 551
.Ltmp2218:
    0000022d: 	movapd	%xmm4, %xmm0
    00000231: 	jmp	.Ltmp2221 # Offset: 561
.Ltmp2219:
    00000236: 	movapd	%xmm4, %xmm0
    0000023a: 	xorl	%eax, %eax
    0000023c: 	jmp	.Ltmp2232 # Offset: 572
.Ltmp2227:
    00000241: 	movq	%rbx, %rdi
    00000244: 	leaq	0x10(%rsp), %rsi
    00000249: 	xorl	%edx, %edx
    0000024b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 587
    00000250: 	movq	%rax, (%rbx)
    00000253: 	movq	%rax, %rdi
    00000256: 	movq	0x10(%rsp), %rax
    0000025b: 	movq	%rax, 0x10(%rbx)
.Ltmp2235:
    0000025f: 	movq	%r12, %rdx
    00000262: 	movq	%rbp, %rsi
    00000265: 	callq	memcpy@PLT # Offset: 613
    0000026a: 	movq	0x10(%rsp), %r12
    0000026f: 	movq	(%rbx), %rdi
    00000272: 	jmp	.Ltmp2233 # Offset: 626
.Ltmp2224:
    00000277: 	movq	%r13, %rsi
    0000027a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000281: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 641
    00000286: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000028d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000294: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000029b: 	jne	.Ltmp2234 # Offset: 667
.Ltmp2229:
    000002a1: 	movq	-0x8(%rdx), %rax
    000002a5: 	addq	$0x200, %rax
    000002ab: 	jmp	.Ltmp2234 # Offset: 683
.Ltmp2228:
    000002b0: 	testq	%r12, %r12
    000002b3: 	je	.Ltmp2233 # Offset: 691
    000002b9: 	jmp	.Ltmp2235 # Offset: 697
.Ltmp2230:
    000002bb: 	callq	__stack_chk_fail@PLT # Offset: 699
.Ltmp2226:
    000002c0: 	leaq	DATAat0x24158(%rip), %rdi
    000002c7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 711
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1(*2)"

Binary Function "_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1(*2)" after disassembly {
  All names   : _Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1
                _Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/reference_normalization.cpp/1
  Number      : 253
  State       : disassembled
  Address     : 0x157e0
  Size        : 0x343
  MaxSize     : 0x350
  Offset      : 0x157e0
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0252:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rdi, %r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rbx
    00000010: 	subq	$0x28, %rsp
    00000014: 	movq	%rdx, 0x8(%rsp)
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x18(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	callq	clock@PLT # Offset: 41
    0000002e: 	movl	iterations(%rip), %edi
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	testl	%edi, %edi
    0000003d: 	jle	.Ltmp2236 # Offset: 61
    00000043: 	subq	%r14, %rbx
    00000046: 	movl	$0x1, %ebp
    0000004b: 	movsd	init_value(%rip), %xmm2
    00000053: 	movq	%rbx, %r15
    00000056: 	movq	%rbx, %r8
    00000059: 	sarq	%r15
    0000005c: 	testq	%rbx, %rbx
    0000005f: 	cmovgq	%r15, %rbp
    00000063: 	xorl	%r12d, %r12d
    00000066: 	movq	%rbp, %rbx
    00000069: 	movq	%rbp, %r13
    0000006c: 	shrq	$0x3, %rbx
    00000070: 	andq	$-0x8, %r13
    00000074: 	shlq	$0x4, %rbx
    00000078: 	addq	%r14, %rbx
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2243:
    00000080: 	testq	%r8, %r8
    00000083: 	jle	.Ltmp2237 # Offset: 131
.Ltmp2242:
    00000089: 	cmpq	$0xe, %r8
    0000008d: 	jle	.Ltmp2238 # Offset: 141
    00000093: 	movq	%r14, %rax
    00000096: 	pxor	%xmm0, %xmm0
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2239:
    000000a0: 	movdqu	(%rax), %xmm3
    000000a4: 	addq	$0x10, %rax
    000000a8: 	paddw	%xmm3, %xmm0
    000000ac: 	cmpq	%rbx, %rax
    000000af: 	jne	.Ltmp2239 # Offset: 175
    000000b1: 	movdqa	%xmm0, %xmm1
    000000b5: 	psrldq	$0x8, %xmm1
    000000ba: 	paddw	%xmm1, %xmm0
    000000be: 	movdqa	%xmm0, %xmm1
    000000c2: 	psrldq	$0x4, %xmm1
    000000c7: 	paddw	%xmm1, %xmm0
    000000cb: 	movdqa	%xmm0, %xmm1
    000000cf: 	psrldq	$0x2, %xmm1
    000000d4: 	paddw	%xmm1, %xmm0
    000000d8: 	pextrw	$0x0, %xmm0, %eax
    000000dd: 	cmpq	%rbp, %r13
    000000e0: 	je	.Ltmp2240 # Offset: 224
    000000e2: 	movq	%r13, %rdx
.Ltmp2251:
    000000e5: 	leaq	0x1(%rdx), %r10
    000000e9: 	leaq	0x190(%rdx,%rdx), %rsi
    000000f1: 	addw	(%r14,%rdx,2), %ax
    000000f6: 	cmpq	%r10, %r15
    000000f9: 	jle	.Ltmp2240 # Offset: 249
    000000fb: 	addw	-0x18e(%r14,%rsi), %ax
    00000104: 	leaq	0x2(%rdx), %r10
    00000108: 	cmpq	%r10, %r15
    0000010b: 	jle	.Ltmp2240 # Offset: 267
    0000010d: 	addw	-0x18c(%r14,%rsi), %ax
    00000116: 	leaq	0x3(%rdx), %r10
    0000011a: 	cmpq	%r10, %r15
    0000011d: 	jle	.Ltmp2240 # Offset: 285
    0000011f: 	addw	-0x18a(%r14,%rsi), %ax
    00000128: 	leaq	0x4(%rdx), %r10
    0000012c: 	cmpq	%r10, %r15
    0000012f: 	jle	.Ltmp2240 # Offset: 303
    00000131: 	addw	-0x188(%r14,%rsi), %ax
    0000013a: 	leaq	0x5(%rdx), %r10
    0000013e: 	cmpq	%r10, %r15
    00000141: 	jle	.Ltmp2240 # Offset: 321
    00000143: 	addw	-0x186(%r14,%rsi), %ax
    0000014c: 	addq	$0x6, %rdx
    00000150: 	cmpq	%rdx, %r15
    00000153: 	jle	.Ltmp2240 # Offset: 339
    00000155: 	addw	-0x184(%r14,%rsi), %ax
.Ltmp2240:
    0000015e: 	movsd	DATAat0x248a0(%rip), %xmm0
    00000166: 	mulsd	%xmm2, %xmm0
    0000016a: 	cvttsd2si	%xmm0, %edx
    0000016e: 	cmpw	%ax, %dx
    00000171: 	je	.Ltmp2241 # Offset: 369
    00000173: 	movq	0x8(%rsp), %rax
    00000178: 	movl	$0x1, %edi
    0000017d: 	movq	%r8, (%rsp)
    00000181: 	addl	$0x1, %r12d
    00000185: 	leaq	DATAat0x246f9(%rip), %rsi
    0000018c: 	movq	(%rax), %rdx
    0000018f: 	xorl	%eax, %eax
    00000191: 	callq	__printf_chk@PLT # Offset: 401
    00000196: 	movl	iterations(%rip), %edi
    0000019c: 	cmpl	%edi, %r12d
    0000019f: 	jge	.Ltmp2236 # Offset: 415
    000001a1: 	movq	(%rsp), %r8
    000001a5: 	movsd	init_value(%rip), %xmm2
    000001ad: 	testq	%r8, %r8
    000001b0: 	jg	.Ltmp2242 # Offset: 432
.Ltmp2237:
    000001b6: 	xorl	%eax, %eax
    000001b8: 	jmp	.Ltmp2240 # Offset: 440
    000001ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2241:
    000001c0: 	addl	$0x1, %r12d
    000001c4: 	cmpl	%edi, %r12d
    000001c7: 	jl	.Ltmp2243 # Offset: 455
.Ltmp2236:
    000001cd: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001d4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001db: 	subq	$0x20, %rax
    000001df: 	cmpq	%rax, %rbx
    000001e2: 	je	.Ltmp2244 # Offset: 482
    000001e8: 	movq	0x8(%rsp), %rax
    000001ed: 	leaq	0x10(%rbx), %rdi
    000001f1: 	movq	%rdi, (%rbx)
    000001f4: 	movq	(%rax), %rbp
    000001f7: 	movq	0x8(%rax), %r12
    000001fb: 	movq	%rbp, %rax
    000001fe: 	addq	%r12, %rax
    00000201: 	je	.Ltmp2245 # Offset: 513
    00000203: 	testq	%rbp, %rbp
    00000206: 	je	.Ltmp2246 # Offset: 518
.Ltmp2245:
    0000020c: 	movq	%r12, 0x10(%rsp)
    00000211: 	cmpq	$0xf, %r12
    00000215: 	ja	.Ltmp2247 # Offset: 533
    0000021b: 	cmpq	$0x1, %r12
    0000021f: 	jne	.Ltmp2248 # Offset: 543
    00000225: 	movzbl	(%rbp), %eax
    00000229: 	movb	%al, 0x10(%rbx)
.Ltmp2252:
    0000022c: 	movq	%r12, 0x8(%rbx)
    00000230: 	movb	$0x0, (%rdi,%r12)
    00000235: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000023c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000243: 	addq	$0x20, %rax
    00000247: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000024e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000255: 	je	.Ltmp2249 # Offset: 597
.Ltmp2253:
    0000025b: 	movq	-0x20(%rax), %rbp
    0000025f: 	callq	clock@PLT # Offset: 607
    00000264: 	movq	%rax, end_time(%rip)
    0000026b: 	movq	0x18(%rsp), %rdx
    00000270: 	subq	%fs:0x28, %rdx
    00000279: 	jne	.Ltmp2250 # Offset: 633
    0000027f: 	subq	start_time(%rip), %rax
    00000286: 	pxor	%xmm0, %xmm0
    0000028a: 	movq	%rbp, %rdi
    0000028d: 	cvtsi2sd	%rax, %xmm0
    00000292: 	divsd	DATAat0x24890(%rip), %xmm0
    0000029a: 	addq	$0x28, %rsp
    0000029e: 	popq	%rbx
    0000029f: 	popq	%rbp
    000002a0: 	popq	%r12
    000002a2: 	popq	%r13
    000002a4: 	popq	%r14
    000002a6: 	popq	%r15
    000002a8: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 680
.Ltmp2238:
    000002ad: 	xorl	%eax, %eax
    000002af: 	xorl	%edx, %edx
    000002b1: 	jmp	.Ltmp2251 # Offset: 689
.Ltmp2247:
    000002b6: 	movq	%rbx, %rdi
    000002b9: 	leaq	0x10(%rsp), %rsi
    000002be: 	xorl	%edx, %edx
    000002c0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 704
    000002c5: 	movq	%rax, (%rbx)
    000002c8: 	movq	%rax, %rdi
    000002cb: 	movq	0x10(%rsp), %rax
    000002d0: 	movq	%rax, 0x10(%rbx)
.Ltmp2254:
    000002d4: 	movq	%r12, %rdx
    000002d7: 	movq	%rbp, %rsi
    000002da: 	callq	memcpy@PLT # Offset: 730
    000002df: 	movq	0x10(%rsp), %r12
    000002e4: 	movq	(%rbx), %rdi
    000002e7: 	jmp	.Ltmp2252 # Offset: 743
.Ltmp2244:
    000002ec: 	movq	0x8(%rsp), %rsi
    000002f1: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002f8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 760
    000002fd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000304: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000030b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000312: 	jne	.Ltmp2253 # Offset: 786
.Ltmp2249:
    00000318: 	movq	-0x8(%rdx), %rax
    0000031c: 	addq	$0x200, %rax
    00000322: 	jmp	.Ltmp2253 # Offset: 802
.Ltmp2248:
    00000327: 	testq	%r12, %r12
    0000032a: 	je	.Ltmp2252 # Offset: 810
    00000330: 	jmp	.Ltmp2254 # Offset: 816
.Ltmp2250:
    00000332: 	callq	__stack_chk_fail@PLT # Offset: 818
.Ltmp2246:
    00000337: 	leaq	DATAat0x24158(%rip), %rdi
    0000033e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 830
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1(*2)"

Binary Function "_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1(*2)" after disassembly {
  All names   : _Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1
                _Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/reference_normalization.cpp/1
  Number      : 254
  State       : disassembled
  Address     : 0x15b30
  Size        : 0x343
  MaxSize     : 0x350
  Offset      : 0x15b30
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0253:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rdi, %r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rbx
    00000010: 	subq	$0x28, %rsp
    00000014: 	movq	%rdx, 0x8(%rsp)
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x18(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	callq	clock@PLT # Offset: 41
    0000002e: 	movl	iterations(%rip), %edi
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	testl	%edi, %edi
    0000003d: 	jle	.Ltmp2255 # Offset: 61
    00000043: 	subq	%r14, %rbx
    00000046: 	movl	$0x1, %ebp
    0000004b: 	movsd	init_value(%rip), %xmm2
    00000053: 	movq	%rbx, %r15
    00000056: 	movq	%rbx, %r8
    00000059: 	sarq	%r15
    0000005c: 	testq	%rbx, %rbx
    0000005f: 	cmovgq	%r15, %rbp
    00000063: 	xorl	%r12d, %r12d
    00000066: 	movq	%rbp, %rbx
    00000069: 	movq	%rbp, %r13
    0000006c: 	shrq	$0x3, %rbx
    00000070: 	andq	$-0x8, %r13
    00000074: 	shlq	$0x4, %rbx
    00000078: 	addq	%r14, %rbx
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2262:
    00000080: 	testq	%r8, %r8
    00000083: 	jle	.Ltmp2256 # Offset: 131
.Ltmp2261:
    00000089: 	cmpq	$0xe, %r8
    0000008d: 	jle	.Ltmp2257 # Offset: 141
    00000093: 	movq	%r14, %rax
    00000096: 	pxor	%xmm0, %xmm0
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2258:
    000000a0: 	movdqu	(%rax), %xmm3
    000000a4: 	addq	$0x10, %rax
    000000a8: 	paddw	%xmm3, %xmm0
    000000ac: 	cmpq	%rbx, %rax
    000000af: 	jne	.Ltmp2258 # Offset: 175
    000000b1: 	movdqa	%xmm0, %xmm1
    000000b5: 	psrldq	$0x8, %xmm1
    000000ba: 	paddw	%xmm1, %xmm0
    000000be: 	movdqa	%xmm0, %xmm1
    000000c2: 	psrldq	$0x4, %xmm1
    000000c7: 	paddw	%xmm1, %xmm0
    000000cb: 	movdqa	%xmm0, %xmm1
    000000cf: 	psrldq	$0x2, %xmm1
    000000d4: 	paddw	%xmm1, %xmm0
    000000d8: 	pextrw	$0x0, %xmm0, %eax
    000000dd: 	cmpq	%rbp, %r13
    000000e0: 	je	.Ltmp2259 # Offset: 224
    000000e2: 	movq	%r13, %rdx
.Ltmp2270:
    000000e5: 	leaq	0x1(%rdx), %r10
    000000e9: 	leaq	0x190(%rdx,%rdx), %rsi
    000000f1: 	addw	(%r14,%rdx,2), %ax
    000000f6: 	cmpq	%r10, %r15
    000000f9: 	jle	.Ltmp2259 # Offset: 249
    000000fb: 	addw	-0x18e(%r14,%rsi), %ax
    00000104: 	leaq	0x2(%rdx), %r10
    00000108: 	cmpq	%r10, %r15
    0000010b: 	jle	.Ltmp2259 # Offset: 267
    0000010d: 	addw	-0x18c(%r14,%rsi), %ax
    00000116: 	leaq	0x3(%rdx), %r10
    0000011a: 	cmpq	%r10, %r15
    0000011d: 	jle	.Ltmp2259 # Offset: 285
    0000011f: 	addw	-0x18a(%r14,%rsi), %ax
    00000128: 	leaq	0x4(%rdx), %r10
    0000012c: 	cmpq	%r10, %r15
    0000012f: 	jle	.Ltmp2259 # Offset: 303
    00000131: 	addw	-0x188(%r14,%rsi), %ax
    0000013a: 	leaq	0x5(%rdx), %r10
    0000013e: 	cmpq	%r10, %r15
    00000141: 	jle	.Ltmp2259 # Offset: 321
    00000143: 	addw	-0x186(%r14,%rsi), %ax
    0000014c: 	addq	$0x6, %rdx
    00000150: 	cmpq	%rdx, %r15
    00000153: 	jle	.Ltmp2259 # Offset: 339
    00000155: 	addw	-0x184(%r14,%rsi), %ax
.Ltmp2259:
    0000015e: 	movsd	DATAat0x248a0(%rip), %xmm0
    00000166: 	mulsd	%xmm2, %xmm0
    0000016a: 	cvttsd2si	%xmm0, %edx
    0000016e: 	cmpw	%ax, %dx
    00000171: 	je	.Ltmp2260 # Offset: 369
    00000173: 	movq	0x8(%rsp), %rax
    00000178: 	movl	$0x1, %edi
    0000017d: 	movq	%r8, (%rsp)
    00000181: 	addl	$0x1, %r12d
    00000185: 	leaq	DATAat0x246f9(%rip), %rsi
    0000018c: 	movq	(%rax), %rdx
    0000018f: 	xorl	%eax, %eax
    00000191: 	callq	__printf_chk@PLT # Offset: 401
    00000196: 	movl	iterations(%rip), %edi
    0000019c: 	cmpl	%edi, %r12d
    0000019f: 	jge	.Ltmp2255 # Offset: 415
    000001a1: 	movq	(%rsp), %r8
    000001a5: 	movsd	init_value(%rip), %xmm2
    000001ad: 	testq	%r8, %r8
    000001b0: 	jg	.Ltmp2261 # Offset: 432
.Ltmp2256:
    000001b6: 	xorl	%eax, %eax
    000001b8: 	jmp	.Ltmp2259 # Offset: 440
    000001ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2260:
    000001c0: 	addl	$0x1, %r12d
    000001c4: 	cmpl	%edi, %r12d
    000001c7: 	jl	.Ltmp2262 # Offset: 455
.Ltmp2255:
    000001cd: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001d4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001db: 	subq	$0x20, %rax
    000001df: 	cmpq	%rax, %rbx
    000001e2: 	je	.Ltmp2263 # Offset: 482
    000001e8: 	movq	0x8(%rsp), %rax
    000001ed: 	leaq	0x10(%rbx), %rdi
    000001f1: 	movq	%rdi, (%rbx)
    000001f4: 	movq	(%rax), %rbp
    000001f7: 	movq	0x8(%rax), %r12
    000001fb: 	movq	%rbp, %rax
    000001fe: 	addq	%r12, %rax
    00000201: 	je	.Ltmp2264 # Offset: 513
    00000203: 	testq	%rbp, %rbp
    00000206: 	je	.Ltmp2265 # Offset: 518
.Ltmp2264:
    0000020c: 	movq	%r12, 0x10(%rsp)
    00000211: 	cmpq	$0xf, %r12
    00000215: 	ja	.Ltmp2266 # Offset: 533
    0000021b: 	cmpq	$0x1, %r12
    0000021f: 	jne	.Ltmp2267 # Offset: 543
    00000225: 	movzbl	(%rbp), %eax
    00000229: 	movb	%al, 0x10(%rbx)
.Ltmp2271:
    0000022c: 	movq	%r12, 0x8(%rbx)
    00000230: 	movb	$0x0, (%rdi,%r12)
    00000235: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000023c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000243: 	addq	$0x20, %rax
    00000247: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000024e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000255: 	je	.Ltmp2268 # Offset: 597
.Ltmp2272:
    0000025b: 	movq	-0x20(%rax), %rbp
    0000025f: 	callq	clock@PLT # Offset: 607
    00000264: 	movq	%rax, end_time(%rip)
    0000026b: 	movq	0x18(%rsp), %rdx
    00000270: 	subq	%fs:0x28, %rdx
    00000279: 	jne	.Ltmp2269 # Offset: 633
    0000027f: 	subq	start_time(%rip), %rax
    00000286: 	pxor	%xmm0, %xmm0
    0000028a: 	movq	%rbp, %rdi
    0000028d: 	cvtsi2sd	%rax, %xmm0
    00000292: 	divsd	DATAat0x24890(%rip), %xmm0
    0000029a: 	addq	$0x28, %rsp
    0000029e: 	popq	%rbx
    0000029f: 	popq	%rbp
    000002a0: 	popq	%r12
    000002a2: 	popq	%r13
    000002a4: 	popq	%r14
    000002a6: 	popq	%r15
    000002a8: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 680
.Ltmp2257:
    000002ad: 	xorl	%eax, %eax
    000002af: 	xorl	%edx, %edx
    000002b1: 	jmp	.Ltmp2270 # Offset: 689
.Ltmp2266:
    000002b6: 	movq	%rbx, %rdi
    000002b9: 	leaq	0x10(%rsp), %rsi
    000002be: 	xorl	%edx, %edx
    000002c0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 704
    000002c5: 	movq	%rax, (%rbx)
    000002c8: 	movq	%rax, %rdi
    000002cb: 	movq	0x10(%rsp), %rax
    000002d0: 	movq	%rax, 0x10(%rbx)
.Ltmp2273:
    000002d4: 	movq	%r12, %rdx
    000002d7: 	movq	%rbp, %rsi
    000002da: 	callq	memcpy@PLT # Offset: 730
    000002df: 	movq	0x10(%rsp), %r12
    000002e4: 	movq	(%rbx), %rdi
    000002e7: 	jmp	.Ltmp2271 # Offset: 743
.Ltmp2263:
    000002ec: 	movq	0x8(%rsp), %rsi
    000002f1: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002f8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 760
    000002fd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000304: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000030b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000312: 	jne	.Ltmp2272 # Offset: 786
.Ltmp2268:
    00000318: 	movq	-0x8(%rdx), %rax
    0000031c: 	addq	$0x200, %rax
    00000322: 	jmp	.Ltmp2272 # Offset: 802
.Ltmp2267:
    00000327: 	testq	%r12, %r12
    0000032a: 	je	.Ltmp2271 # Offset: 810
    00000330: 	jmp	.Ltmp2273 # Offset: 816
.Ltmp2269:
    00000332: 	callq	__stack_chk_fail@PLT # Offset: 818
.Ltmp2265:
    00000337: 	leaq	DATAat0x24158(%rip), %rdi
    0000033e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 830
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1(*2)"

Binary Function "_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.3/1(*2)" after disassembly {
  All names   : _Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.3/1
                _Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.3/reference_normalization.cpp/1
  Number      : 255
  State       : disassembled
  Address     : 0x15e80
  Size        : 0x343
  MaxSize     : 0x350
  Offset      : 0x15e80
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.3/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0254:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rdi, %r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rbx
    00000010: 	subq	$0x28, %rsp
    00000014: 	movq	%rdx, 0x8(%rsp)
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x18(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	callq	clock@PLT # Offset: 41
    0000002e: 	movl	iterations(%rip), %edi
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	testl	%edi, %edi
    0000003d: 	jle	.Ltmp2274 # Offset: 61
    00000043: 	subq	%r14, %rbx
    00000046: 	movl	$0x1, %ebp
    0000004b: 	movsd	init_value(%rip), %xmm2
    00000053: 	movq	%rbx, %r15
    00000056: 	movq	%rbx, %r8
    00000059: 	sarq	%r15
    0000005c: 	testq	%rbx, %rbx
    0000005f: 	cmovgq	%r15, %rbp
    00000063: 	xorl	%r12d, %r12d
    00000066: 	movq	%rbp, %rbx
    00000069: 	movq	%rbp, %r13
    0000006c: 	shrq	$0x3, %rbx
    00000070: 	andq	$-0x8, %r13
    00000074: 	shlq	$0x4, %rbx
    00000078: 	addq	%r14, %rbx
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2281:
    00000080: 	testq	%r8, %r8
    00000083: 	jle	.Ltmp2275 # Offset: 131
.Ltmp2280:
    00000089: 	cmpq	$0xe, %r8
    0000008d: 	jle	.Ltmp2276 # Offset: 141
    00000093: 	movq	%r14, %rax
    00000096: 	pxor	%xmm0, %xmm0
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2277:
    000000a0: 	movdqu	(%rax), %xmm3
    000000a4: 	addq	$0x10, %rax
    000000a8: 	paddw	%xmm3, %xmm0
    000000ac: 	cmpq	%rbx, %rax
    000000af: 	jne	.Ltmp2277 # Offset: 175
    000000b1: 	movdqa	%xmm0, %xmm1
    000000b5: 	psrldq	$0x8, %xmm1
    000000ba: 	paddw	%xmm1, %xmm0
    000000be: 	movdqa	%xmm0, %xmm1
    000000c2: 	psrldq	$0x4, %xmm1
    000000c7: 	paddw	%xmm1, %xmm0
    000000cb: 	movdqa	%xmm0, %xmm1
    000000cf: 	psrldq	$0x2, %xmm1
    000000d4: 	paddw	%xmm1, %xmm0
    000000d8: 	pextrw	$0x0, %xmm0, %eax
    000000dd: 	cmpq	%rbp, %r13
    000000e0: 	je	.Ltmp2278 # Offset: 224
    000000e2: 	movq	%r13, %rdx
.Ltmp2289:
    000000e5: 	leaq	0x1(%rdx), %r10
    000000e9: 	leaq	0xc8(%rdx,%rdx), %rsi
    000000f1: 	addw	(%r14,%rdx,2), %ax
    000000f6: 	cmpq	%r10, %r15
    000000f9: 	jle	.Ltmp2278 # Offset: 249
    000000fb: 	addw	-0xc6(%r14,%rsi), %ax
    00000104: 	leaq	0x2(%rdx), %r10
    00000108: 	cmpq	%r10, %r15
    0000010b: 	jle	.Ltmp2278 # Offset: 267
    0000010d: 	addw	-0xc4(%r14,%rsi), %ax
    00000116: 	leaq	0x3(%rdx), %r10
    0000011a: 	cmpq	%r10, %r15
    0000011d: 	jle	.Ltmp2278 # Offset: 285
    0000011f: 	addw	-0xc2(%r14,%rsi), %ax
    00000128: 	leaq	0x4(%rdx), %r10
    0000012c: 	cmpq	%r10, %r15
    0000012f: 	jle	.Ltmp2278 # Offset: 303
    00000131: 	addw	-0xc0(%r14,%rsi), %ax
    0000013a: 	leaq	0x5(%rdx), %r10
    0000013e: 	cmpq	%r10, %r15
    00000141: 	jle	.Ltmp2278 # Offset: 321
    00000143: 	addw	-0xbe(%r14,%rsi), %ax
    0000014c: 	addq	$0x6, %rdx
    00000150: 	cmpq	%rdx, %r15
    00000153: 	jle	.Ltmp2278 # Offset: 339
    00000155: 	addw	-0xbc(%r14,%rsi), %ax
.Ltmp2278:
    0000015e: 	movsd	DATAat0x248a0(%rip), %xmm0
    00000166: 	mulsd	%xmm2, %xmm0
    0000016a: 	cvttsd2si	%xmm0, %edx
    0000016e: 	cmpw	%ax, %dx
    00000171: 	je	.Ltmp2279 # Offset: 369
    00000173: 	movq	0x8(%rsp), %rax
    00000178: 	movl	$0x1, %edi
    0000017d: 	movq	%r8, (%rsp)
    00000181: 	addl	$0x1, %r12d
    00000185: 	leaq	DATAat0x246f9(%rip), %rsi
    0000018c: 	movq	(%rax), %rdx
    0000018f: 	xorl	%eax, %eax
    00000191: 	callq	__printf_chk@PLT # Offset: 401
    00000196: 	movl	iterations(%rip), %edi
    0000019c: 	cmpl	%edi, %r12d
    0000019f: 	jge	.Ltmp2274 # Offset: 415
    000001a1: 	movq	(%rsp), %r8
    000001a5: 	movsd	init_value(%rip), %xmm2
    000001ad: 	testq	%r8, %r8
    000001b0: 	jg	.Ltmp2280 # Offset: 432
.Ltmp2275:
    000001b6: 	xorl	%eax, %eax
    000001b8: 	jmp	.Ltmp2278 # Offset: 440
    000001ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2279:
    000001c0: 	addl	$0x1, %r12d
    000001c4: 	cmpl	%edi, %r12d
    000001c7: 	jl	.Ltmp2281 # Offset: 455
.Ltmp2274:
    000001cd: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001d4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001db: 	subq	$0x20, %rax
    000001df: 	cmpq	%rax, %rbx
    000001e2: 	je	.Ltmp2282 # Offset: 482
    000001e8: 	movq	0x8(%rsp), %rax
    000001ed: 	leaq	0x10(%rbx), %rdi
    000001f1: 	movq	%rdi, (%rbx)
    000001f4: 	movq	(%rax), %rbp
    000001f7: 	movq	0x8(%rax), %r12
    000001fb: 	movq	%rbp, %rax
    000001fe: 	addq	%r12, %rax
    00000201: 	je	.Ltmp2283 # Offset: 513
    00000203: 	testq	%rbp, %rbp
    00000206: 	je	.Ltmp2284 # Offset: 518
.Ltmp2283:
    0000020c: 	movq	%r12, 0x10(%rsp)
    00000211: 	cmpq	$0xf, %r12
    00000215: 	ja	.Ltmp2285 # Offset: 533
    0000021b: 	cmpq	$0x1, %r12
    0000021f: 	jne	.Ltmp2286 # Offset: 543
    00000225: 	movzbl	(%rbp), %eax
    00000229: 	movb	%al, 0x10(%rbx)
.Ltmp2290:
    0000022c: 	movq	%r12, 0x8(%rbx)
    00000230: 	movb	$0x0, (%rdi,%r12)
    00000235: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000023c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000243: 	addq	$0x20, %rax
    00000247: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000024e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000255: 	je	.Ltmp2287 # Offset: 597
.Ltmp2291:
    0000025b: 	movq	-0x20(%rax), %rbp
    0000025f: 	callq	clock@PLT # Offset: 607
    00000264: 	movq	%rax, end_time(%rip)
    0000026b: 	movq	0x18(%rsp), %rdx
    00000270: 	subq	%fs:0x28, %rdx
    00000279: 	jne	.Ltmp2288 # Offset: 633
    0000027f: 	subq	start_time(%rip), %rax
    00000286: 	pxor	%xmm0, %xmm0
    0000028a: 	movq	%rbp, %rdi
    0000028d: 	cvtsi2sd	%rax, %xmm0
    00000292: 	divsd	DATAat0x24890(%rip), %xmm0
    0000029a: 	addq	$0x28, %rsp
    0000029e: 	popq	%rbx
    0000029f: 	popq	%rbp
    000002a0: 	popq	%r12
    000002a2: 	popq	%r13
    000002a4: 	popq	%r14
    000002a6: 	popq	%r15
    000002a8: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 680
.Ltmp2276:
    000002ad: 	xorl	%eax, %eax
    000002af: 	xorl	%edx, %edx
    000002b1: 	jmp	.Ltmp2289 # Offset: 689
.Ltmp2285:
    000002b6: 	movq	%rbx, %rdi
    000002b9: 	leaq	0x10(%rsp), %rsi
    000002be: 	xorl	%edx, %edx
    000002c0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 704
    000002c5: 	movq	%rax, (%rbx)
    000002c8: 	movq	%rax, %rdi
    000002cb: 	movq	0x10(%rsp), %rax
    000002d0: 	movq	%rax, 0x10(%rbx)
.Ltmp2292:
    000002d4: 	movq	%r12, %rdx
    000002d7: 	movq	%rbp, %rsi
    000002da: 	callq	memcpy@PLT # Offset: 730
    000002df: 	movq	0x10(%rsp), %r12
    000002e4: 	movq	(%rbx), %rdi
    000002e7: 	jmp	.Ltmp2290 # Offset: 743
.Ltmp2282:
    000002ec: 	movq	0x8(%rsp), %rsi
    000002f1: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002f8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 760
    000002fd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000304: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000030b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000312: 	jne	.Ltmp2291 # Offset: 786
.Ltmp2287:
    00000318: 	movq	-0x8(%rdx), %rax
    0000031c: 	addq	$0x200, %rax
    00000322: 	jmp	.Ltmp2291 # Offset: 802
.Ltmp2286:
    00000327: 	testq	%r12, %r12
    0000032a: 	je	.Ltmp2290 # Offset: 810
    00000330: 	jmp	.Ltmp2292 # Offset: 816
.Ltmp2288:
    00000332: 	callq	__stack_chk_fail@PLT # Offset: 818
.Ltmp2284:
    00000337: 	leaq	DATAat0x24158(%rip), %rdi
    0000033e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 830
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.3/1(*2)"

Binary Function "_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.3/1(*2)" after disassembly {
  All names   : _Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.3/1
                _Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.3/reference_normalization.cpp/1
  Number      : 256
  State       : disassembled
  Address     : 0x161d0
  Size        : 0x343
  MaxSize     : 0x350
  Offset      : 0x161d0
  Section     : .text
  Orc Section : .local.text._Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.3/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0255:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rdi, %r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rbx
    00000010: 	subq	$0x28, %rsp
    00000014: 	movq	%rdx, 0x8(%rsp)
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x18(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	callq	clock@PLT # Offset: 41
    0000002e: 	movl	iterations(%rip), %edi
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	testl	%edi, %edi
    0000003d: 	jle	.Ltmp2293 # Offset: 61
    00000043: 	subq	%r14, %rbx
    00000046: 	movl	$0x1, %ebp
    0000004b: 	movsd	init_value(%rip), %xmm2
    00000053: 	movq	%rbx, %r15
    00000056: 	movq	%rbx, %r8
    00000059: 	sarq	%r15
    0000005c: 	testq	%rbx, %rbx
    0000005f: 	cmovgq	%r15, %rbp
    00000063: 	xorl	%r12d, %r12d
    00000066: 	movq	%rbp, %rbx
    00000069: 	movq	%rbp, %r13
    0000006c: 	shrq	$0x3, %rbx
    00000070: 	andq	$-0x8, %r13
    00000074: 	shlq	$0x4, %rbx
    00000078: 	addq	%r14, %rbx
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2300:
    00000080: 	testq	%r8, %r8
    00000083: 	jle	.Ltmp2294 # Offset: 131
.Ltmp2299:
    00000089: 	cmpq	$0xe, %r8
    0000008d: 	jle	.Ltmp2295 # Offset: 141
    00000093: 	movq	%r14, %rax
    00000096: 	pxor	%xmm0, %xmm0
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2296:
    000000a0: 	movdqu	(%rax), %xmm3
    000000a4: 	addq	$0x10, %rax
    000000a8: 	paddw	%xmm3, %xmm0
    000000ac: 	cmpq	%rbx, %rax
    000000af: 	jne	.Ltmp2296 # Offset: 175
    000000b1: 	movdqa	%xmm0, %xmm1
    000000b5: 	psrldq	$0x8, %xmm1
    000000ba: 	paddw	%xmm1, %xmm0
    000000be: 	movdqa	%xmm0, %xmm1
    000000c2: 	psrldq	$0x4, %xmm1
    000000c7: 	paddw	%xmm1, %xmm0
    000000cb: 	movdqa	%xmm0, %xmm1
    000000cf: 	psrldq	$0x2, %xmm1
    000000d4: 	paddw	%xmm1, %xmm0
    000000d8: 	pextrw	$0x0, %xmm0, %eax
    000000dd: 	cmpq	%rbp, %r13
    000000e0: 	je	.Ltmp2297 # Offset: 224
    000000e2: 	movq	%r13, %rdx
.Ltmp2308:
    000000e5: 	leaq	0x1(%rdx), %r10
    000000e9: 	leaq	0xc8(%rdx,%rdx), %rsi
    000000f1: 	addw	(%r14,%rdx,2), %ax
    000000f6: 	cmpq	%r10, %r15
    000000f9: 	jle	.Ltmp2297 # Offset: 249
    000000fb: 	addw	-0xc6(%r14,%rsi), %ax
    00000104: 	leaq	0x2(%rdx), %r10
    00000108: 	cmpq	%r10, %r15
    0000010b: 	jle	.Ltmp2297 # Offset: 267
    0000010d: 	addw	-0xc4(%r14,%rsi), %ax
    00000116: 	leaq	0x3(%rdx), %r10
    0000011a: 	cmpq	%r10, %r15
    0000011d: 	jle	.Ltmp2297 # Offset: 285
    0000011f: 	addw	-0xc2(%r14,%rsi), %ax
    00000128: 	leaq	0x4(%rdx), %r10
    0000012c: 	cmpq	%r10, %r15
    0000012f: 	jle	.Ltmp2297 # Offset: 303
    00000131: 	addw	-0xc0(%r14,%rsi), %ax
    0000013a: 	leaq	0x5(%rdx), %r10
    0000013e: 	cmpq	%r10, %r15
    00000141: 	jle	.Ltmp2297 # Offset: 321
    00000143: 	addw	-0xbe(%r14,%rsi), %ax
    0000014c: 	addq	$0x6, %rdx
    00000150: 	cmpq	%rdx, %r15
    00000153: 	jle	.Ltmp2297 # Offset: 339
    00000155: 	addw	-0xbc(%r14,%rsi), %ax
.Ltmp2297:
    0000015e: 	movsd	DATAat0x248a0(%rip), %xmm0
    00000166: 	mulsd	%xmm2, %xmm0
    0000016a: 	cvttsd2si	%xmm0, %edx
    0000016e: 	cmpw	%ax, %dx
    00000171: 	je	.Ltmp2298 # Offset: 369
    00000173: 	movq	0x8(%rsp), %rax
    00000178: 	movl	$0x1, %edi
    0000017d: 	movq	%r8, (%rsp)
    00000181: 	addl	$0x1, %r12d
    00000185: 	leaq	DATAat0x246f9(%rip), %rsi
    0000018c: 	movq	(%rax), %rdx
    0000018f: 	xorl	%eax, %eax
    00000191: 	callq	__printf_chk@PLT # Offset: 401
    00000196: 	movl	iterations(%rip), %edi
    0000019c: 	cmpl	%edi, %r12d
    0000019f: 	jge	.Ltmp2293 # Offset: 415
    000001a1: 	movq	(%rsp), %r8
    000001a5: 	movsd	init_value(%rip), %xmm2
    000001ad: 	testq	%r8, %r8
    000001b0: 	jg	.Ltmp2299 # Offset: 432
.Ltmp2294:
    000001b6: 	xorl	%eax, %eax
    000001b8: 	jmp	.Ltmp2297 # Offset: 440
    000001ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2298:
    000001c0: 	addl	$0x1, %r12d
    000001c4: 	cmpl	%edi, %r12d
    000001c7: 	jl	.Ltmp2300 # Offset: 455
.Ltmp2293:
    000001cd: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001d4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001db: 	subq	$0x20, %rax
    000001df: 	cmpq	%rax, %rbx
    000001e2: 	je	.Ltmp2301 # Offset: 482
    000001e8: 	movq	0x8(%rsp), %rax
    000001ed: 	leaq	0x10(%rbx), %rdi
    000001f1: 	movq	%rdi, (%rbx)
    000001f4: 	movq	(%rax), %rbp
    000001f7: 	movq	0x8(%rax), %r12
    000001fb: 	movq	%rbp, %rax
    000001fe: 	addq	%r12, %rax
    00000201: 	je	.Ltmp2302 # Offset: 513
    00000203: 	testq	%rbp, %rbp
    00000206: 	je	.Ltmp2303 # Offset: 518
.Ltmp2302:
    0000020c: 	movq	%r12, 0x10(%rsp)
    00000211: 	cmpq	$0xf, %r12
    00000215: 	ja	.Ltmp2304 # Offset: 533
    0000021b: 	cmpq	$0x1, %r12
    0000021f: 	jne	.Ltmp2305 # Offset: 543
    00000225: 	movzbl	(%rbp), %eax
    00000229: 	movb	%al, 0x10(%rbx)
.Ltmp2309:
    0000022c: 	movq	%r12, 0x8(%rbx)
    00000230: 	movb	$0x0, (%rdi,%r12)
    00000235: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000023c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000243: 	addq	$0x20, %rax
    00000247: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000024e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000255: 	je	.Ltmp2306 # Offset: 597
.Ltmp2310:
    0000025b: 	movq	-0x20(%rax), %rbp
    0000025f: 	callq	clock@PLT # Offset: 607
    00000264: 	movq	%rax, end_time(%rip)
    0000026b: 	movq	0x18(%rsp), %rdx
    00000270: 	subq	%fs:0x28, %rdx
    00000279: 	jne	.Ltmp2307 # Offset: 633
    0000027f: 	subq	start_time(%rip), %rax
    00000286: 	pxor	%xmm0, %xmm0
    0000028a: 	movq	%rbp, %rdi
    0000028d: 	cvtsi2sd	%rax, %xmm0
    00000292: 	divsd	DATAat0x24890(%rip), %xmm0
    0000029a: 	addq	$0x28, %rsp
    0000029e: 	popq	%rbx
    0000029f: 	popq	%rbp
    000002a0: 	popq	%r12
    000002a2: 	popq	%r13
    000002a4: 	popq	%r14
    000002a6: 	popq	%r15
    000002a8: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 680
.Ltmp2295:
    000002ad: 	xorl	%eax, %eax
    000002af: 	xorl	%edx, %edx
    000002b1: 	jmp	.Ltmp2308 # Offset: 689
.Ltmp2304:
    000002b6: 	movq	%rbx, %rdi
    000002b9: 	leaq	0x10(%rsp), %rsi
    000002be: 	xorl	%edx, %edx
    000002c0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 704
    000002c5: 	movq	%rax, (%rbx)
    000002c8: 	movq	%rax, %rdi
    000002cb: 	movq	0x10(%rsp), %rax
    000002d0: 	movq	%rax, 0x10(%rbx)
.Ltmp2311:
    000002d4: 	movq	%r12, %rdx
    000002d7: 	movq	%rbp, %rsi
    000002da: 	callq	memcpy@PLT # Offset: 730
    000002df: 	movq	0x10(%rsp), %r12
    000002e4: 	movq	(%rbx), %rdi
    000002e7: 	jmp	.Ltmp2309 # Offset: 743
.Ltmp2301:
    000002ec: 	movq	0x8(%rsp), %rsi
    000002f1: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002f8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 760
    000002fd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000304: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000030b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000312: 	jne	.Ltmp2310 # Offset: 786
.Ltmp2306:
    00000318: 	movq	-0x8(%rdx), %rax
    0000031c: 	addq	$0x200, %rax
    00000322: 	jmp	.Ltmp2310 # Offset: 802
.Ltmp2305:
    00000327: 	testq	%r12, %r12
    0000032a: 	je	.Ltmp2309 # Offset: 810
    00000330: 	jmp	.Ltmp2311 # Offset: 816
.Ltmp2307:
    00000332: 	callq	__stack_chk_fail@PLT # Offset: 818
.Ltmp2303:
    00000337: 	leaq	DATAat0x24158(%rip), %rdi
    0000033e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 830
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.3/1(*2)"

Binary Function "_ZN9benchmark9__sift_inIPttEEvlT_lT0_" after disassembly {
  Number      : 257
  State       : disassembled
  Address     : 0x16520
  Size        : 0xfd
  MaxSize     : 0x100
  Offset      : 0x16520
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIPttEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0256:
    00000000: 	endbr64
    00000004: 	leaq	0x2(%rdx,%rdx), %rax
    00000009: 	pushq	%rbp
    0000000a: 	movq	%rdx, %r8
    0000000d: 	movl	%ecx, %r10d
    00000010: 	pushq	%rbx
    00000011: 	movl	%ecx, %r9d
    00000014: 	cmpq	%rdi, %rax
    00000017: 	jge	.Ltmp2312 # Offset: 23
    0000001d: 	movq	%rdi, %rbp
    00000020: 	movq	%rdx, %rbx
    00000023: 	jmp	.Ltmp2313 # Offset: 35
    00000025: 	nopl	(%rax) # Size: 3
.Ltmp2315:
    00000028: 	subq	$0x1, %rax
    0000002c: 	movw	%r11w, (%rsi,%rbx,2)
    00000031: 	leaq	(%rsi,%rax,2), %rcx
    00000035: 	cmpq	%rdx, %rbp
    00000038: 	jle	.Ltmp2314 # Offset: 56
.Ltmp2316:
    0000003a: 	movq	%rax, %rbx
    0000003d: 	movq	%rdx, %rax
.Ltmp2313:
    00000040: 	leaq	(%rax,%rax), %rdx
    00000044: 	leaq	(%rsi,%rdx), %rcx
    00000048: 	movzwl	-0x2(%rsi,%rdx), %r11d
    0000004e: 	movzwl	(%rcx), %edi
    00000051: 	cmpw	%di, %r11w
    00000055: 	jae	.Ltmp2315 # Offset: 85
    00000057: 	leaq	0x2(%rax,%rax), %rdx
    0000005c: 	movw	%di, (%rsi,%rbx,2)
    00000060: 	cmpq	%rdx, %rbp
    00000063: 	jg	.Ltmp2316 # Offset: 99
.Ltmp2314:
    00000065: 	cmpq	%rdx, %rbp
    00000068: 	je	.Ltmp2317 # Offset: 104
.Ltmp2322:
    0000006a: 	leaq	-0x1(%rax), %rdx
    0000006e: 	movq	%rdx, %rdi
    00000071: 	shrq	$0x3f, %rdi
    00000075: 	addq	%rdx, %rdi
    00000078: 	sarq	%rdi
    0000007b: 	cmpq	%r8, %rax
    0000007e: 	jg	.Ltmp2318 # Offset: 126
    00000080: 	jmp	.Ltmp2319 # Offset: 128
    00000082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2321:
    00000088: 	movw	%dx, (%rcx)
    0000008b: 	leaq	-0x1(%rdi), %rdx
    0000008f: 	movq	%rdx, %rax
    00000092: 	shrq	$0x3f, %rax
    00000096: 	addq	%rdx, %rax
    00000099: 	sarq	%rax
    0000009c: 	movq	%rax, %rdx
    0000009f: 	movq	%rdi, %rax
    000000a2: 	cmpq	%rdi, %r8
    000000a5: 	jge	.Ltmp2320 # Offset: 165
    000000a7: 	movq	%rdx, %rdi
.Ltmp2318:
    000000aa: 	leaq	(%rsi,%rdi,2), %r11
    000000ae: 	leaq	(%rsi,%rax,2), %rcx
    000000b2: 	movzwl	(%r11), %edx
    000000b6: 	cmpw	%r9w, %dx
    000000ba: 	jb	.Ltmp2321 # Offset: 186
.Ltmp2319:
    000000bc: 	movw	%r10w, (%rcx)
    000000c0: 	popq	%rbx
    000000c1: 	popq	%rbp
    000000c2: 	retq # Offset: 194
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2320:
    000000c8: 	movq	%r11, %rcx
    000000cb: 	movw	%r10w, (%rcx)
    000000cf: 	popq	%rbx
    000000d0: 	popq	%rbp
    000000d1: 	retq # Offset: 209
    000000d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2312:
    000000d8: 	leaq	(%rsi,%rdx,2), %rcx
    000000dc: 	jne	.Ltmp2319 # Offset: 220
    000000de: 	movq	%rax, %rdx
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp2317:
    000000e8: 	movzwl	-0x2(%rsi,%rdx,2), %eax
    000000ed: 	movw	%ax, (%rcx)
    000000f0: 	leaq	-0x1(%rdx), %rax
    000000f4: 	leaq	(%rsi,%rax,2), %rcx
    000000f8: 	jmp	.Ltmp2322 # Offset: 248
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIPttEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEEvlT_lT0_" after disassembly {
  Number      : 258
  State       : disassembled
  Address     : 0x16620
  Size        : 0xf6
  MaxSize     : 0x100
  Offset      : 0x16620
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0257:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	pushq	%r12
    0000000e: 	movl	%ecx, %r10d
    00000011: 	pushq	%rbp
    00000012: 	movl	%ecx, %r9d
    00000015: 	pushq	%rbx
    00000016: 	cmpq	%rdi, %rdx
    00000019: 	jge	.Ltmp2323 # Offset: 25
    0000001f: 	movq	%rdi, %rbp
    00000022: 	movq	%r8, %r12
    00000025: 	jmp	.Ltmp2324 # Offset: 37
    00000027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2326:
    00000030: 	movq	%rax, %r12
.Ltmp2324:
    00000033: 	leaq	-0x1(%rdx), %rax
    00000037: 	leaq	(%rax,%rax), %r11
    0000003b: 	leaq	(%rsi,%r11), %rcx
    0000003f: 	leaq	0x2(%r11,%rsi), %r11
    00000044: 	movzwl	(%rcx), %edi
    00000047: 	movzwl	(%r11), %ebx
    0000004b: 	cmpw	%di, %bx
    0000004e: 	jbe	.Ltmp2325 # Offset: 78
    00000050: 	movq	%rdx, %rax
    00000053: 	movl	%ebx, %edi
    00000055: 	movq	%r11, %rcx
    00000058: 	addq	$0x1, %rdx
.Ltmp2325:
    0000005c: 	addq	%rdx, %rdx
    0000005f: 	movw	%di, (%rsi,%r12,2)
    00000064: 	cmpq	%rdx, %rbp
    00000067: 	jg	.Ltmp2326 # Offset: 103
    00000069: 	je	.Ltmp2327 # Offset: 105
.Ltmp2332:
    0000006b: 	leaq	-0x1(%rax), %rdx
    0000006f: 	movq	%rdx, %rdi
    00000072: 	shrq	$0x3f, %rdi
    00000076: 	addq	%rdx, %rdi
    00000079: 	sarq	%rdi
    0000007c: 	cmpq	%r8, %rax
    0000007f: 	jg	.Ltmp2328 # Offset: 127
    00000081: 	jmp	.Ltmp2329 # Offset: 129
    00000083: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2331:
    00000088: 	movw	%dx, (%rcx)
    0000008b: 	leaq	-0x1(%rdi), %rdx
    0000008f: 	movq	%rdx, %rax
    00000092: 	shrq	$0x3f, %rax
    00000096: 	addq	%rdx, %rax
    00000099: 	sarq	%rax
    0000009c: 	movq	%rax, %rdx
    0000009f: 	movq	%rdi, %rax
    000000a2: 	cmpq	%rdi, %r8
    000000a5: 	jge	.Ltmp2330 # Offset: 165
    000000a7: 	movq	%rdx, %rdi
.Ltmp2328:
    000000aa: 	leaq	(%rsi,%rdi,2), %r11
    000000ae: 	leaq	(%rsi,%rax,2), %rcx
    000000b2: 	movzwl	(%r11), %edx
    000000b6: 	cmpw	%r9w, %dx
    000000ba: 	jb	.Ltmp2331 # Offset: 186
.Ltmp2329:
    000000bc: 	movw	%r10w, (%rcx)
    000000c0: 	popq	%rbx
    000000c1: 	popq	%rbp
    000000c2: 	popq	%r12
    000000c4: 	retq # Offset: 196
    000000c5: 	nopl	(%rax) # Size: 3
.Ltmp2330:
    000000c8: 	movq	%r11, %rcx
    000000cb: 	movw	%r10w, (%rcx)
    000000cf: 	popq	%rbx
    000000d0: 	popq	%rbp
    000000d1: 	popq	%r12
    000000d3: 	retq # Offset: 211
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp2323:
    000000d8: 	leaq	(%rsi,%r8,2), %rcx
    000000dc: 	jne	.Ltmp2329 # Offset: 220
    000000de: 	nop # Size: 2
.Ltmp2327:
    000000e0: 	leaq	-0x1(%rdx), %rax
    000000e4: 	leaq	(%rsi,%rax,2), %rdx
    000000e8: 	movzwl	(%rdx), %edi
    000000eb: 	movw	%di, (%rcx)
    000000ee: 	movq	%rdx, %rcx
    000000f1: 	jmp	.Ltmp2332 # Offset: 241
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEEvlT_lT0_"

Binary Function "_Z11testOneTypeItEvv" after disassembly {
  Number      : 259
  State       : disassembled
  Address     : 0x16720
  Size        : 0x4477
  MaxSize     : 0x4480
  Offset      : 0x16720
  Section     : .text
  Orc Section : .local.text._Z11testOneTypeItEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0258:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rsp, %rbp
    00000008: 	pushq	%r15
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbx
    00000011: 	leaq	-0x4000(%rsp), %r11
.Ltmp2333:
    00000019: 	subq	$0x1000, %rsp
    00000020: 	orq	$0x0, (%rsp)
    00000025: 	cmpq	%r11, %rsp
    00000028: 	jne	.Ltmp2333 # Offset: 40
    0000002a: 	subq	$0x78, %rsp
    0000002e: 	pxor	%xmm0, %xmm0
    00000032: 	movl	$0x7d0, %esi
    00000037: 	movq	%fs:0x28, %rax
    00000040: 	movq	%rax, -0x38(%rbp)
    00000044: 	xorl	%eax, %eax
    00000046: 	leaq	-0x3fc0(%rbp), %rdi
    0000004d: 	movaps	%xmm0, -0x3fc0(%rbp)
    00000054: 	movq	$0x0, -0x3fb0(%rbp)
    0000005f: 	callq	_ZNSt6vectorItSaItEE17_M_default_appendEm # Offset: 95
    00000064: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm4
    0000006c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000073: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm6
    0000007b: 	movq	_Z7gLabelsB5cxx11+56(%rip), %r13
    00000082: 	movhlps	%xmm4, %xmm7
    00000085: 	movq	%rax, -0x3fd8(%rbp)
    0000008c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    00000093: 	movq	%xmm7, %rbx
    00000098: 	movaps	%xmm6, -0x4010(%rbp)
    0000009f: 	movq	%xmm6, %rdi
    000000a4: 	leaq	0x8(%rbx), %r12
    000000a8: 	movq	%rax, -0x3fe0(%rbp)
    000000af: 	movaps	%xmm4, -0x4000(%rbp)
    000000b6: 	movq	%r12, %r14
    000000b9: 	movq	%xmm7, -0x3ff0(%rbp)
    000000c1: 	movq	%xmm4, -0x3fe8(%rbp)
    000000c9: 	cmpq	%r12, %rax
    000000cc: 	jbe	.Ltmp2334 # Offset: 204
    000000ce: 	movq	%xmm6, -0x4018(%rbp)
.Ltmp2337:
    000000d6: 	movq	(%r14), %r15
    000000d9: 	leaq	0x200(%r15), %rbx
.Ltmp2336:
    000000e0: 	movq	(%r15), %rdi
    000000e3: 	leaq	0x10(%r15), %rdx
    000000e7: 	cmpq	%rdx, %rdi
    000000ea: 	je	.Ltmp2335 # Offset: 234
    000000f0: 	movq	0x10(%r15), %rax
    000000f4: 	addq	$0x20, %r15
    000000f8: 	leaq	0x1(%rax), %rsi
    000000fc: 	callq	_ZdlPvm@PLT # Offset: 252
    00000101: 	cmpq	%rbx, %r15
    00000104: 	jne	.Ltmp2336 # Offset: 260
    00000106: 	addq	$0x8, %r14
    0000010a: 	cmpq	%r14, -0x3fe0(%rbp)
    00000111: 	ja	.Ltmp2337 # Offset: 273
.Ltmp2480:
    00000113: 	movq	-0x4018(%rbp), %rdi
.Ltmp2334:
    0000011a: 	movq	-0x3ff0(%rbp), %rbx
    00000121: 	cmpq	%rbx, -0x3fe0(%rbp)
    00000128: 	je	.Ltmp2338 # Offset: 296
    0000012e: 	movq	%rdi, %rsi
    00000131: 	cmpq	%rdi, -0x3fe8(%rbp)
    00000138: 	je	.Ltmp2339 # Offset: 312
.Ltmp2342:
    0000013a: 	movq	(%rsi), %rdi
    0000013d: 	leaq	0x10(%rsi), %rax
    00000141: 	movq	%rsi, %rbx
    00000144: 	cmpq	%rax, %rdi
    00000147: 	je	.Ltmp2340 # Offset: 327
.Ltmp2341:
    00000149: 	movq	0x10(%rsi), %rax
    0000014d: 	addq	$0x20, %rbx
    00000151: 	leaq	0x1(%rax), %rsi
    00000155: 	movq	%rax, -0x3fe0(%rbp)
    0000015c: 	callq	_ZdlPvm@PLT # Offset: 348
    00000161: 	movq	%rbx, %rsi
    00000164: 	cmpq	-0x3fe8(%rbp), %rbx
    0000016b: 	je	.Ltmp2339 # Offset: 363
    0000016d: 	movq	(%rsi), %rdi
    00000170: 	leaq	0x10(%rsi), %rax
    00000174: 	movq	%rsi, %rbx
    00000177: 	cmpq	%rax, %rdi
    0000017a: 	jne	.Ltmp2341 # Offset: 378
.Ltmp2340:
    0000017c: 	movq	%rsi, %rax
    0000017f: 	addq	$0x20, %rax
    00000183: 	movq	%rax, %rsi
    00000186: 	cmpq	-0x3fe8(%rbp), %rax
    0000018d: 	jne	.Ltmp2342 # Offset: 397
    0000018f: 	cmpq	%r13, -0x3fd8(%rbp)
    00000196: 	je	.Ltmp2343 # Offset: 406
.Ltmp2345:
    00000198: 	movq	(%r13), %rdi
    0000019c: 	leaq	0x10(%r13), %rax
    000001a0: 	cmpq	%rax, %rdi
    000001a3: 	je	.Ltmp2344 # Offset: 419
    000001a5: 	movq	0x10(%r13), %rax
    000001a9: 	leaq	0x1(%rax), %rsi
    000001ad: 	callq	_ZdlPvm@PLT # Offset: 429
.Ltmp2344:
    000001b2: 	addq	$0x20, %r13
.Ltmp2339:
    000001b6: 	cmpq	%r13, -0x3fd8(%rbp)
    000001bd: 	jne	.Ltmp2345 # Offset: 445
.Ltmp2343:
    000001bf: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    000001c6: 	leaq	0x8(%rax), %rbx
    000001ca: 	cmpq	%r12, %rbx
    000001cd: 	jbe	.Ltmp2346 # Offset: 461
.Ltmp2347:
    000001cf: 	movq	(%r12), %rdi
    000001d3: 	movl	$0x200, %esi
    000001d8: 	addq	$0x8, %r12
    000001dc: 	callq	_ZdlPvm@PLT # Offset: 476
    000001e1: 	cmpq	%r12, %rbx
    000001e4: 	ja	.Ltmp2347 # Offset: 484
.Ltmp2346:
    000001e6: 	cvttsd2si	init_value(%rip), %ecx
    000001ee: 	leaq	-0x3f70(%rbp), %rax
    000001f5: 	movdqa	-0x4010(%rbp), %xmm7
    000001fd: 	movq	$0x8, -0x3f78(%rbp)
    00000208: 	movq	%rax, -0x4080(%rbp)
    0000020f: 	leaq	-0x1f80(%rbp), %r12
    00000216: 	movq	%rax, -0x3f80(%rbp)
    0000021d: 	movabsq	$0x745f3631746e6975, %rax
    00000227: 	movq	%rax, -0x3f70(%rbp)
    0000022e: 	leaq	-0x2f20(%rbp), %rax
    00000235: 	movaps	%xmm7, _Z7gLabelsB5cxx11+48(%rip)
    0000023c: 	movd	%ecx, %xmm0
    00000240: 	movdqa	-0x4000(%rbp), %xmm7
    00000248: 	movb	$0x0, -0x3f68(%rbp)
    0000024f: 	punpcklwd	%xmm0, %xmm0
    00000253: 	movq	%rax, -0x3fe0(%rbp)
    0000025a: 	pshufd	$0x0, %xmm0, %xmm0
    0000025f: 	movaps	%xmm7, _Z7gLabelsB5cxx11+64(%rip)
.Ltmp2348:
    00000266: 	movaps	%xmm0, (%rax)
    00000269: 	addq	$0x10, %rax
    0000026d: 	cmpq	%rax, %r12
    00000270: 	jne	.Ltmp2348 # Offset: 624
    00000272: 	leaq	-0x3ec0(%rbp), %rax
    00000279: 	movq	%rax, -0x4000(%rbp)
.Ltmp2349:
    00000280: 	movaps	%xmm0, (%rax)
    00000283: 	addq	$0x10, %rax
    00000287: 	cmpq	%rax, -0x3fe0(%rbp)
    0000028e: 	jne	.Ltmp2349 # Offset: 654
    00000290: 	movq	-0x3fb8(%rbp), %rax
    00000297: 	movq	-0x3fc0(%rbp), %r13
    0000029e: 	movq	%rax, -0x3fe8(%rbp)
    000002a5: 	cmpq	%r13, %rax
    000002a8: 	je	.Ltmp2350 # Offset: 680
    000002ae: 	movq	%rax, %rbx
    000002b1: 	movq	%r13, %rax
    000002b4: 	leaq	-0x2(%rbx), %rdx
    000002b8: 	subq	%r13, %rdx
    000002bb: 	movq	%rdx, %rsi
    000002be: 	shrq	%rsi
    000002c1: 	leaq	0x1(%rsi), %rdi
    000002c5: 	cmpq	$0xc, %rdx
    000002c9: 	jbe	.Ltmp2351 # Offset: 713
    000002cf: 	movq	%rdi, %rdx
    000002d2: 	shrq	$0x3, %rdx
    000002d6: 	shlq	$0x4, %rdx
    000002da: 	addq	%r13, %rdx
.Ltmp2352:
    000002dd: 	movups	%xmm0, (%rax)
    000002e0: 	addq	$0x10, %rax
    000002e4: 	cmpq	%rax, %rdx
    000002e7: 	jne	.Ltmp2352 # Offset: 743
    000002e9: 	movq	%rdi, %rdx
    000002ec: 	andq	$-0x8, %rdx
    000002f0: 	leaq	(%r13,%rdx,2), %rax
    000002f5: 	cmpq	%rdi, %rdx
    000002f8: 	je	.Ltmp2350 # Offset: 760
.Ltmp2679:
    000002fa: 	subq	%rdx, %rsi
    000002fd: 	leaq	0x1(%rsi), %rdi
    00000301: 	cmpq	$0x2, %rsi
    00000305: 	jbe	.Ltmp2353 # Offset: 773
    00000307: 	movd	%ecx, %xmm5
    0000030b: 	pshuflw	$0x0, %xmm5, %xmm0
    00000310: 	movq	%xmm0, (%r13,%rdx,2)
    00000317: 	movq	%rdi, %rdx
    0000031a: 	andq	$-0x4, %rdx
    0000031e: 	leaq	(%rax,%rdx,2), %rax
    00000322: 	cmpq	%rdi, %rdx
    00000325: 	je	.Ltmp2350 # Offset: 805
.Ltmp2353:
    00000327: 	movq	-0x3fe8(%rbp), %rbx
    0000032e: 	leaq	0x2(%rax), %rdx
    00000332: 	movw	%cx, (%rax)
    00000335: 	cmpq	%rdx, %rbx
    00000338: 	je	.Ltmp2350 # Offset: 824
    0000033a: 	leaq	0x4(%rax), %rdx
    0000033e: 	movw	%cx, 0x2(%rax)
    00000342: 	cmpq	%rdx, %rbx
    00000345: 	je	.Ltmp2350 # Offset: 837
    00000347: 	movw	%cx, 0x4(%rax)
.Ltmp2350:
    0000034b: 	leaq	-0xfe0(%rbp), %rax
    00000352: 	leaq	-0x3f80(%rbp), %r15
    00000359: 	leaq	DATAat0x241e8(%rip), %rdx
    00000360: 	movq	%r15, %rsi
    00000363: 	movq	%rax, %rdi
    00000366: 	movq	%rax, -0x3fd8(%rbp)
    0000036d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 877
    00000372: 	movq	-0x3fd8(%rbp), %r8
    00000379: 	movq	-0x3fe0(%rbp), %rdi
    00000380: 	xorl	%edx, %edx
    00000382: 	movq	%r12, %rsi
    00000385: 	leaq	_Z16accumulate_arrayItET_PKS0_S2_S0_(%rip), %rcx
    0000038c: 	callq	_Z15test_accumulateItPtPFtPKtS2_tEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 908
    00000391: 	movq	-0xfe0(%rbp), %rdi
    00000398: 	leaq	-0xfd0(%rbp), %rbx
    0000039f: 	cmpq	%rbx, %rdi
    000003a2: 	je	.Ltmp2354 # Offset: 930
    000003a4: 	movq	-0xfd0(%rbp), %rax
    000003ab: 	leaq	0x1(%rax), %rsi
    000003af: 	callq	_ZdlPvm@PLT # Offset: 943
.Ltmp2354:
    000003b4: 	movq	-0x3fd8(%rbp), %r14
    000003bb: 	leaq	DATAat0x241f5(%rip), %rdx
    000003c2: 	movq	%r15, %rsi
    000003c5: 	movq	%r14, %rdi
    000003c8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 968
    000003cd: 	movq	-0x3fe0(%rbp), %rdi
    000003d4: 	movq	%r14, %r8
    000003d7: 	xorl	%edx, %edx
    000003d9: 	movq	%r12, %rsi
    000003dc: 	leaq	_Z17accumulate_array2ItET_PKS0_S2_S0_(%rip), %rcx
    000003e3: 	callq	_Z15test_accumulateItPtPFtPKtS2_tEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 995
    000003e8: 	movq	-0xfe0(%rbp), %rdi
    000003ef: 	cmpq	%rbx, %rdi
    000003f2: 	je	.Ltmp2355 # Offset: 1010
    000003f4: 	movq	-0xfd0(%rbp), %rax
    000003fb: 	leaq	0x1(%rax), %rsi
    000003ff: 	callq	_ZdlPvm@PLT # Offset: 1023
.Ltmp2355:
    00000404: 	movq	-0x3fd8(%rbp), %r14
    0000040b: 	leaq	DATAat0x24203(%rip), %rdx
    00000412: 	movq	%r15, %rsi
    00000415: 	movq	%r14, %rdi
    00000418: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1048
    0000041d: 	movq	-0x3fe0(%rbp), %rdi
    00000424: 	movq	%r14, %r8
    00000427: 	xorl	%edx, %edx
    00000429: 	movq	%r12, %rsi
    0000042c: 	leaq	_Z17accumulate_array3ItET_PKS0_S2_S0_(%rip), %rcx
    00000433: 	callq	_Z15test_accumulateItPtPFtPKtS2_tEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1075
    00000438: 	movq	-0xfe0(%rbp), %rdi
    0000043f: 	cmpq	%rbx, %rdi
    00000442: 	je	.Ltmp2356 # Offset: 1090
    00000444: 	movq	-0xfd0(%rbp), %rax
    0000044b: 	leaq	0x1(%rax), %rsi
    0000044f: 	callq	_ZdlPvm@PLT # Offset: 1103
.Ltmp2356:
    00000454: 	movq	-0x3fd8(%rbp), %r14
    0000045b: 	leaq	DATAat0x24211(%rip), %rdx
    00000462: 	movq	%r15, %rsi
    00000465: 	movq	%r14, %rdi
    00000468: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1128
    0000046d: 	movq	-0x3fe0(%rbp), %rdi
    00000474: 	movq	%r14, %r8
    00000477: 	xorl	%edx, %edx
    00000479: 	movq	%r12, %rsi
    0000047c: 	leaq	_Z17accumulate_array4ItET_PKS0_S2_S0_(%rip), %rcx
    00000483: 	callq	_Z15test_accumulateItPtPFtPKtS2_tEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1155
    00000488: 	movq	-0xfe0(%rbp), %rdi
    0000048f: 	cmpq	%rbx, %rdi
    00000492: 	je	.Ltmp2357 # Offset: 1170
    00000494: 	movq	-0xfd0(%rbp), %rax
    0000049b: 	leaq	0x1(%rax), %rsi
    0000049f: 	callq	_ZdlPvm@PLT # Offset: 1183
.Ltmp2357:
    000004a4: 	movq	-0x3fd8(%rbp), %r14
    000004ab: 	leaq	DATAat0x2421f(%rip), %rdx
    000004b2: 	movq	%r15, %rsi
    000004b5: 	movq	%r14, %rdi
    000004b8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1208
    000004bd: 	movq	-0x3fe0(%rbp), %rdi
    000004c4: 	movq	%r14, %r8
    000004c7: 	xorl	%edx, %edx
    000004c9: 	movq	%r12, %rsi
    000004cc: 	leaq	_Z14accumulate_ptrItET_PKS0_S2_S0_(%rip), %rcx
    000004d3: 	callq	_Z15test_accumulateItPtPFtPKtS2_tEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1235
    000004d8: 	movq	-0xfe0(%rbp), %rdi
    000004df: 	cmpq	%rbx, %rdi
    000004e2: 	je	.Ltmp2358 # Offset: 1250
    000004e4: 	movq	-0xfd0(%rbp), %rax
    000004eb: 	leaq	0x1(%rax), %rsi
    000004ef: 	callq	_ZdlPvm@PLT # Offset: 1263
.Ltmp2358:
    000004f4: 	movq	-0x3fd8(%rbp), %r14
    000004fb: 	leaq	DATAat0x2422e(%rip), %rdx
    00000502: 	movq	%r15, %rsi
    00000505: 	movq	%r14, %rdi
    00000508: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1288
    0000050d: 	movq	-0x3fe0(%rbp), %rdi
    00000514: 	movq	%r14, %r8
    00000517: 	xorl	%edx, %edx
    00000519: 	movq	%r12, %rsi
    0000051c: 	leaq	_Z15accumulate_ptr2ItET_PKS0_S2_S0_(%rip), %rcx
    00000523: 	callq	_Z15test_accumulateItPtPFtPKtS2_tEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1315
    00000528: 	movq	-0xfe0(%rbp), %rdi
    0000052f: 	cmpq	%rbx, %rdi
    00000532: 	je	.Ltmp2359 # Offset: 1330
    00000534: 	movq	-0xfd0(%rbp), %rax
    0000053b: 	leaq	0x1(%rax), %rsi
    0000053f: 	callq	_ZdlPvm@PLT # Offset: 1343
.Ltmp2359:
    00000544: 	movq	-0x3fd8(%rbp), %r14
    0000054b: 	leaq	DATAat0x2423e(%rip), %rdx
    00000552: 	movq	%r15, %rsi
    00000555: 	movq	%r14, %rdi
    00000558: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1368
    0000055d: 	movq	-0x3fe0(%rbp), %rdi
    00000564: 	movq	%r14, %r8
    00000567: 	xorl	%edx, %edx
    00000569: 	movq	%r12, %rsi
    0000056c: 	leaq	_Z15accumulate_ptr3ItET_PKS0_S2_S0_(%rip), %rcx
    00000573: 	callq	_Z15test_accumulateItPtPFtPKtS2_tEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1395
    00000578: 	movq	-0xfe0(%rbp), %rdi
    0000057f: 	cmpq	%rbx, %rdi
    00000582: 	je	.Ltmp2360 # Offset: 1410
    00000584: 	movq	-0xfd0(%rbp), %rax
    0000058b: 	leaq	0x1(%rax), %rsi
    0000058f: 	callq	_ZdlPvm@PLT # Offset: 1423
.Ltmp2360:
    00000594: 	movq	-0x3fd8(%rbp), %r14
    0000059b: 	leaq	DATAat0x2424e(%rip), %rdx
    000005a2: 	movq	%r15, %rsi
    000005a5: 	movq	%r14, %rdi
    000005a8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1448
    000005ad: 	movq	-0x3fe0(%rbp), %rdi
    000005b4: 	movq	%r14, %r8
    000005b7: 	xorl	%edx, %edx
    000005b9: 	movq	%r12, %rsi
    000005bc: 	leaq	_Z15accumulate_ptr4ItET_PKS0_S2_S0_(%rip), %rcx
    000005c3: 	callq	_Z15test_accumulateItPtPFtPKtS2_tEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1475
    000005c8: 	movq	-0xfe0(%rbp), %rdi
    000005cf: 	cmpq	%rbx, %rdi
    000005d2: 	je	.Ltmp2361 # Offset: 1490
    000005d4: 	movq	-0xfd0(%rbp), %rax
    000005db: 	leaq	0x1(%rax), %rsi
    000005df: 	callq	_ZdlPvm@PLT # Offset: 1503
.Ltmp2361:
    000005e4: 	movq	-0x3fd8(%rbp), %r14
    000005eb: 	leaq	DATAat0x2425e(%rip), %rdx
    000005f2: 	movq	%r15, %rsi
    000005f5: 	movq	%r14, %rdi
    000005f8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1528
    000005fd: 	movq	-0x3fe0(%rbp), %rdi
    00000604: 	movq	%r14, %r8
    00000607: 	xorl	%edx, %edx
    00000609: 	movq	%r12, %rsi
    0000060c: 	leaq	_Z15accumulate_ptr5ItET_PKS0_S2_S0_(%rip), %rcx
    00000613: 	callq	_Z15test_accumulateItPtPFtPKtS2_tEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1555
    00000618: 	movq	-0xfe0(%rbp), %rdi
    0000061f: 	cmpq	%rbx, %rdi
    00000622: 	je	.Ltmp2362 # Offset: 1570
    00000624: 	movq	-0xfd0(%rbp), %rax
    0000062b: 	leaq	0x1(%rax), %rsi
    0000062f: 	callq	_ZdlPvm@PLT # Offset: 1583
.Ltmp2362:
    00000634: 	movq	-0x3fd8(%rbp), %r14
    0000063b: 	leaq	DATAat0x2426e(%rip), %rdx
    00000642: 	movq	%r15, %rsi
    00000645: 	movq	%r14, %rdi
    00000648: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1608
    0000064d: 	movq	-0x3fe0(%rbp), %rdi
    00000654: 	movq	%r14, %r8
    00000657: 	xorl	%edx, %edx
    00000659: 	movq	%r12, %rsi
    0000065c: 	leaq	_Z15accumulate_ptr6ItET_PKS0_S2_S0_(%rip), %rcx
    00000663: 	callq	_Z15test_accumulateItPtPFtPKtS2_tEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1635
    00000668: 	movq	-0xfe0(%rbp), %rdi
    0000066f: 	cmpq	%rbx, %rdi
    00000672: 	je	.Ltmp2363 # Offset: 1650
    00000674: 	movq	-0xfd0(%rbp), %rax
    0000067b: 	leaq	0x1(%rax), %rsi
    0000067f: 	callq	_ZdlPvm@PLT # Offset: 1663
.Ltmp2363:
    00000684: 	movq	-0x3fd8(%rbp), %r14
    0000068b: 	leaq	DATAat0x2427e(%rip), %rdx
    00000692: 	movq	%r15, %rsi
    00000695: 	movq	%r14, %rdi
    00000698: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1688
    0000069d: 	movq	-0x3fe0(%rbp), %rdi
    000006a4: 	movq	%r14, %r8
    000006a7: 	xorl	%edx, %edx
    000006a9: 	movq	%r12, %rsi
    000006ac: 	leaq	_Z15accumulate_ptr7ItET_PKS0_S2_S0_(%rip), %rcx
    000006b3: 	callq	_Z15test_accumulateItPtPFtPKtS2_tEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1715
    000006b8: 	movq	-0xfe0(%rbp), %rdi
    000006bf: 	cmpq	%rbx, %rdi
    000006c2: 	je	.Ltmp2364 # Offset: 1730
    000006c4: 	movq	-0xfd0(%rbp), %rax
    000006cb: 	leaq	0x1(%rax), %rsi
    000006cf: 	callq	_ZdlPvm@PLT # Offset: 1743
.Ltmp2364:
    000006d4: 	movq	-0x3fd8(%rbp), %r14
    000006db: 	leaq	DATAat0x2428e(%rip), %rdx
    000006e2: 	movq	%r15, %rsi
    000006e5: 	movq	%r14, %rdi
    000006e8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1768
    000006ed: 	movq	-0x3fe0(%rbp), %rdi
    000006f4: 	movq	%r14, %r8
    000006f7: 	xorl	%edx, %edx
    000006f9: 	movq	%r12, %rsi
    000006fc: 	leaq	_Z15accumulate_ptr8ItET_PKS0_S2_S0_(%rip), %rcx
    00000703: 	callq	_Z15test_accumulateItPtPFtPKtS2_tEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1795
    00000708: 	movq	-0xfe0(%rbp), %rdi
    0000070f: 	cmpq	%rbx, %rdi
    00000712: 	je	.Ltmp2365 # Offset: 1810
    00000714: 	movq	-0xfd0(%rbp), %rax
    0000071b: 	leaq	0x1(%rax), %rsi
    0000071f: 	callq	_ZdlPvm@PLT # Offset: 1823
.Ltmp2365:
    00000724: 	movq	-0x3fd8(%rbp), %r14
    0000072b: 	leaq	DATAat0x2429e(%rip), %rdx
    00000732: 	movq	%r15, %rsi
    00000735: 	movq	%r14, %rdi
    00000738: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1848
    0000073d: 	movq	-0x3fe0(%rbp), %rdi
    00000744: 	movq	%r14, %rdx
    00000747: 	movq	%r12, %rsi
    0000074a: 	callq	"_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.7/1" # Offset: 1866
    0000074f: 	movq	-0xfe0(%rbp), %rdi
    00000756: 	cmpq	%rbx, %rdi
    00000759: 	je	.Ltmp2366 # Offset: 1881
    0000075b: 	movq	-0xfd0(%rbp), %rax
    00000762: 	leaq	0x1(%rax), %rsi
    00000766: 	callq	_ZdlPvm@PLT # Offset: 1894
.Ltmp2366:
    0000076b: 	movq	-0x3fd8(%rbp), %r14
    00000772: 	leaq	DATAat0x242ae(%rip), %rdx
    00000779: 	movq	%r15, %rsi
    0000077c: 	movq	%r14, %rdi
    0000077f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1919
    00000784: 	movq	-0x3fe0(%rbp), %rsi
    0000078b: 	movq	-0x4000(%rbp), %rdi
    00000792: 	movq	%r14, %rdx
    00000795: 	callq	"_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.7/1" # Offset: 1941
    0000079a: 	movq	-0xfe0(%rbp), %rdi
    000007a1: 	cmpq	%rbx, %rdi
    000007a4: 	je	.Ltmp2367 # Offset: 1956
    000007a6: 	movq	-0xfd0(%rbp), %rax
    000007ad: 	leaq	0x1(%rax), %rsi
    000007b1: 	callq	_ZdlPvm@PLT # Offset: 1969
.Ltmp2367:
    000007b6: 	movq	-0x3fd8(%rbp), %r14
    000007bd: 	leaq	DATAat0x242c9(%rip), %rdx
    000007c4: 	movq	%r15, %rsi
    000007c7: 	movq	%r14, %rdi
    000007ca: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1994
    000007cf: 	movq	-0x3fe8(%rbp), %rsi
    000007d6: 	movq	%r14, %r8
    000007d9: 	xorl	%edx, %edx
    000007db: 	movq	%r13, %rdi
    000007de: 	leaq	_Z19accumulate_iteratorIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_(%rip), %rcx
    000007e5: 	callq	_Z15test_accumulateItN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFtS6_S6_tEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2021
    000007ea: 	movq	-0xfe0(%rbp), %rdi
    000007f1: 	cmpq	%rbx, %rdi
    000007f4: 	je	.Ltmp2368 # Offset: 2036
    000007f6: 	movq	-0xfd0(%rbp), %rax
    000007fd: 	leaq	0x1(%rax), %rsi
    00000801: 	callq	_ZdlPvm@PLT # Offset: 2049
.Ltmp2368:
    00000806: 	movq	-0x3fd8(%rbp), %r14
    0000080d: 	leaq	DATAat0x242e5(%rip), %rdx
    00000814: 	movq	%r15, %rsi
    00000817: 	movq	%r14, %rdi
    0000081a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2074
    0000081f: 	movq	-0x3fe0(%rbp), %rdi
    00000826: 	movq	%r14, %rdx
    00000829: 	movq	%r12, %rsi
    0000082c: 	callq	"_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.6/1" # Offset: 2092
    00000831: 	movq	-0xfe0(%rbp), %rdi
    00000838: 	cmpq	%rbx, %rdi
    0000083b: 	je	.Ltmp2369 # Offset: 2107
    0000083d: 	movq	-0xfd0(%rbp), %rax
    00000844: 	leaq	0x1(%rax), %rsi
    00000848: 	callq	_ZdlPvm@PLT # Offset: 2120
.Ltmp2369:
    0000084d: 	movq	-0x3fd8(%rbp), %r14
    00000854: 	leaq	DATAat0x242f6(%rip), %rdx
    0000085b: 	movq	%r15, %rsi
    0000085e: 	movq	%r14, %rdi
    00000861: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2145
    00000866: 	movq	-0x3fe0(%rbp), %rsi
    0000086d: 	movq	-0x4000(%rbp), %rdi
    00000874: 	movq	%r14, %rdx
    00000877: 	callq	"_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.6/1" # Offset: 2167
    0000087c: 	movq	-0xfe0(%rbp), %rdi
    00000883: 	cmpq	%rbx, %rdi
    00000886: 	je	.Ltmp2370 # Offset: 2182
    00000888: 	movq	-0xfd0(%rbp), %rax
    0000088f: 	leaq	0x1(%rax), %rsi
    00000893: 	callq	_ZdlPvm@PLT # Offset: 2195
.Ltmp2370:
    00000898: 	movq	-0x3fd8(%rbp), %r14
    0000089f: 	leaq	DATAat0x24312(%rip), %rdx
    000008a6: 	movq	%r15, %rsi
    000008a9: 	movq	%r14, %rdi
    000008ac: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2220
    000008b1: 	movq	-0x3fe8(%rbp), %rsi
    000008b8: 	movq	%r14, %r8
    000008bb: 	xorl	%edx, %edx
    000008bd: 	movq	%r13, %rdi
    000008c0: 	leaq	_Z20accumulate_iterator2IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_(%rip), %rcx
    000008c7: 	callq	_Z15test_accumulateItN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFtS6_S6_tEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2247
    000008cc: 	movq	-0xfe0(%rbp), %rdi
    000008d3: 	cmpq	%rbx, %rdi
    000008d6: 	je	.Ltmp2371 # Offset: 2262
    000008d8: 	movq	-0xfd0(%rbp), %rax
    000008df: 	leaq	0x1(%rax), %rsi
    000008e3: 	callq	_ZdlPvm@PLT # Offset: 2275
.Ltmp2371:
    000008e8: 	movq	-0x3fd8(%rbp), %r14
    000008ef: 	leaq	DATAat0x2432f(%rip), %rdx
    000008f6: 	movq	%r15, %rsi
    000008f9: 	movq	%r14, %rdi
    000008fc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2300
    00000901: 	movq	-0x3fe0(%rbp), %rdi
    00000908: 	movq	%r14, %rdx
    0000090b: 	movq	%r12, %rsi
    0000090e: 	callq	"_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.5/1" # Offset: 2318
    00000913: 	movq	-0xfe0(%rbp), %rdi
    0000091a: 	cmpq	%rbx, %rdi
    0000091d: 	je	.Ltmp2372 # Offset: 2333
    0000091f: 	movq	-0xfd0(%rbp), %rax
    00000926: 	leaq	0x1(%rax), %rsi
    0000092a: 	callq	_ZdlPvm@PLT # Offset: 2346
.Ltmp2372:
    0000092f: 	movq	-0x3fd8(%rbp), %r14
    00000936: 	leaq	DATAat0x24340(%rip), %rdx
    0000093d: 	movq	%r15, %rsi
    00000940: 	movq	%r14, %rdi
    00000943: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2371
    00000948: 	movq	-0x3fe0(%rbp), %rsi
    0000094f: 	movq	-0x4000(%rbp), %rdi
    00000956: 	movq	%r14, %rdx
    00000959: 	callq	"_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.5/1" # Offset: 2393
    0000095e: 	movq	-0xfe0(%rbp), %rdi
    00000965: 	cmpq	%rbx, %rdi
    00000968: 	je	.Ltmp2373 # Offset: 2408
    0000096a: 	movq	-0xfd0(%rbp), %rax
    00000971: 	leaq	0x1(%rax), %rsi
    00000975: 	callq	_ZdlPvm@PLT # Offset: 2421
.Ltmp2373:
    0000097a: 	movq	-0x3fd8(%rbp), %r14
    00000981: 	leaq	DATAat0x2435c(%rip), %rdx
    00000988: 	movq	%r15, %rsi
    0000098b: 	movq	%r14, %rdi
    0000098e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2446
    00000993: 	movq	-0x3fe8(%rbp), %rsi
    0000099a: 	movq	%r14, %r8
    0000099d: 	xorl	%edx, %edx
    0000099f: 	movq	%r13, %rdi
    000009a2: 	leaq	_Z20accumulate_iterator3IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_(%rip), %rcx
    000009a9: 	callq	_Z15test_accumulateItN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFtS6_S6_tEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2473
    000009ae: 	movq	-0xfe0(%rbp), %rdi
    000009b5: 	cmpq	%rbx, %rdi
    000009b8: 	je	.Ltmp2374 # Offset: 2488
    000009ba: 	movq	-0xfd0(%rbp), %rax
    000009c1: 	leaq	0x1(%rax), %rsi
    000009c5: 	callq	_ZdlPvm@PLT # Offset: 2501
.Ltmp2374:
    000009ca: 	movq	-0x3fd8(%rbp), %r14
    000009d1: 	leaq	DATAat0x24379(%rip), %rdx
    000009d8: 	movq	%r15, %rsi
    000009db: 	movq	%r14, %rdi
    000009de: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2526
    000009e3: 	movq	-0x3fe0(%rbp), %rdi
    000009ea: 	movq	%r14, %rdx
    000009ed: 	movq	%r12, %rsi
    000009f0: 	callq	"_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.4/1" # Offset: 2544
    000009f5: 	movq	-0xfe0(%rbp), %rdi
    000009fc: 	cmpq	%rbx, %rdi
    000009ff: 	je	.Ltmp2375 # Offset: 2559
    00000a01: 	movq	-0xfd0(%rbp), %rax
    00000a08: 	leaq	0x1(%rax), %rsi
    00000a0c: 	callq	_ZdlPvm@PLT # Offset: 2572
.Ltmp2375:
    00000a11: 	movq	-0x3fd8(%rbp), %r14
    00000a18: 	leaq	DATAat0x2438a(%rip), %rdx
    00000a1f: 	movq	%r15, %rsi
    00000a22: 	movq	%r14, %rdi
    00000a25: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2597
    00000a2a: 	movq	-0x3fe0(%rbp), %rsi
    00000a31: 	movq	-0x4000(%rbp), %rdi
    00000a38: 	movq	%r14, %rdx
    00000a3b: 	callq	"_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.4/1" # Offset: 2619
    00000a40: 	movq	-0xfe0(%rbp), %rdi
    00000a47: 	cmpq	%rbx, %rdi
    00000a4a: 	je	.Ltmp2376 # Offset: 2634
    00000a4c: 	movq	-0xfd0(%rbp), %rax
    00000a53: 	leaq	0x1(%rax), %rsi
    00000a57: 	callq	_ZdlPvm@PLT # Offset: 2647
.Ltmp2376:
    00000a5c: 	movq	-0x3fd8(%rbp), %r14
    00000a63: 	leaq	DATAat0x243a6(%rip), %rdx
    00000a6a: 	movq	%r15, %rsi
    00000a6d: 	movq	%r14, %rdi
    00000a70: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2672
    00000a75: 	movq	-0x3fe8(%rbp), %rsi
    00000a7c: 	movq	%r14, %r8
    00000a7f: 	xorl	%edx, %edx
    00000a81: 	movq	%r13, %rdi
    00000a84: 	leaq	_Z20accumulate_iterator4IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_(%rip), %rcx
    00000a8b: 	callq	_Z15test_accumulateItN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFtS6_S6_tEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2699
    00000a90: 	movq	-0xfe0(%rbp), %rdi
    00000a97: 	cmpq	%rbx, %rdi
    00000a9a: 	je	.Ltmp2377 # Offset: 2714
    00000a9c: 	movq	-0xfd0(%rbp), %rax
    00000aa3: 	leaq	0x1(%rax), %rsi
    00000aa7: 	callq	_ZdlPvm@PLT # Offset: 2727
.Ltmp2377:
    00000aac: 	movq	-0x3fd8(%rbp), %r14
    00000ab3: 	leaq	DATAat0x243c3(%rip), %rdx
    00000aba: 	movq	%r15, %rsi
    00000abd: 	movq	%r14, %rdi
    00000ac0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2752
    00000ac5: 	movq	-0x3fe0(%rbp), %rdi
    00000acc: 	movq	%r14, %rdx
    00000acf: 	movq	%r12, %rsi
    00000ad2: 	callq	"_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.3/1" # Offset: 2770
    00000ad7: 	movq	-0xfe0(%rbp), %rdi
    00000ade: 	cmpq	%rbx, %rdi
    00000ae1: 	je	.Ltmp2378 # Offset: 2785
    00000ae3: 	movq	-0xfd0(%rbp), %rax
    00000aea: 	leaq	0x1(%rax), %rsi
    00000aee: 	callq	_ZdlPvm@PLT # Offset: 2798
.Ltmp2378:
    00000af3: 	movq	-0x3fd8(%rbp), %r14
    00000afa: 	leaq	DATAat0x243d4(%rip), %rdx
    00000b01: 	movq	%r15, %rsi
    00000b04: 	movq	%r14, %rdi
    00000b07: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2823
    00000b0c: 	movq	-0x3fe0(%rbp), %rsi
    00000b13: 	movq	-0x4000(%rbp), %rdi
    00000b1a: 	movq	%r14, %rdx
    00000b1d: 	callq	"_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.3/1" # Offset: 2845
    00000b22: 	movq	-0xfe0(%rbp), %rdi
    00000b29: 	cmpq	%rbx, %rdi
    00000b2c: 	je	.Ltmp2379 # Offset: 2860
    00000b2e: 	movq	-0xfd0(%rbp), %rax
    00000b35: 	leaq	0x1(%rax), %rsi
    00000b39: 	callq	_ZdlPvm@PLT # Offset: 2873
.Ltmp2379:
    00000b3e: 	movq	-0x3fd8(%rbp), %r14
    00000b45: 	leaq	DATAat0x243f0(%rip), %rdx
    00000b4c: 	movq	%r15, %rsi
    00000b4f: 	movq	%r14, %rdi
    00000b52: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2898
    00000b57: 	movq	-0x3fe8(%rbp), %rsi
    00000b5e: 	movq	%r14, %r8
    00000b61: 	xorl	%edx, %edx
    00000b63: 	movq	%r13, %rdi
    00000b66: 	leaq	_Z20accumulate_iterator5IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_(%rip), %rcx
    00000b6d: 	callq	_Z15test_accumulateItN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFtS6_S6_tEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2925
    00000b72: 	movq	-0xfe0(%rbp), %rdi
    00000b79: 	cmpq	%rbx, %rdi
    00000b7c: 	je	.Ltmp2380 # Offset: 2940
    00000b7e: 	movq	-0xfd0(%rbp), %rax
    00000b85: 	leaq	0x1(%rax), %rsi
    00000b89: 	callq	_ZdlPvm@PLT # Offset: 2953
.Ltmp2380:
    00000b8e: 	movq	-0x3fd8(%rbp), %r14
    00000b95: 	leaq	DATAat0x2440d(%rip), %rdx
    00000b9c: 	movq	%r15, %rsi
    00000b9f: 	movq	%r14, %rdi
    00000ba2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2978
    00000ba7: 	movq	-0x3fe0(%rbp), %rdi
    00000bae: 	movq	%r14, %rdx
    00000bb1: 	movq	%r12, %rsi
    00000bb4: 	callq	"_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1" # Offset: 2996
    00000bb9: 	movq	-0xfe0(%rbp), %rdi
    00000bc0: 	cmpq	%rbx, %rdi
    00000bc3: 	je	.Ltmp2381 # Offset: 3011
    00000bc5: 	movq	-0xfd0(%rbp), %rax
    00000bcc: 	leaq	0x1(%rax), %rsi
    00000bd0: 	callq	_ZdlPvm@PLT # Offset: 3024
.Ltmp2381:
    00000bd5: 	movq	-0x3fd8(%rbp), %r14
    00000bdc: 	leaq	DATAat0x2441e(%rip), %rdx
    00000be3: 	movq	%r15, %rsi
    00000be6: 	movq	%r14, %rdi
    00000be9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3049
    00000bee: 	movq	-0x3fe0(%rbp), %rsi
    00000bf5: 	movq	-0x4000(%rbp), %rdi
    00000bfc: 	movq	%r14, %rdx
    00000bff: 	callq	"_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1" # Offset: 3071
    00000c04: 	movq	-0xfe0(%rbp), %rdi
    00000c0b: 	cmpq	%rbx, %rdi
    00000c0e: 	je	.Ltmp2382 # Offset: 3086
    00000c10: 	movq	-0xfd0(%rbp), %rax
    00000c17: 	leaq	0x1(%rax), %rsi
    00000c1b: 	callq	_ZdlPvm@PLT # Offset: 3099
.Ltmp2382:
    00000c20: 	movq	-0x3fd8(%rbp), %r14
    00000c27: 	leaq	DATAat0x2443a(%rip), %rdx
    00000c2e: 	movq	%r15, %rsi
    00000c31: 	movq	%r14, %rdi
    00000c34: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3124
    00000c39: 	movq	-0x3fe8(%rbp), %rsi
    00000c40: 	movq	%r14, %r8
    00000c43: 	xorl	%edx, %edx
    00000c45: 	movq	%r13, %rdi
    00000c48: 	leaq	_Z20accumulate_iterator6IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_(%rip), %rcx
    00000c4f: 	callq	_Z15test_accumulateItN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFtS6_S6_tEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3151
    00000c54: 	movq	-0xfe0(%rbp), %rdi
    00000c5b: 	cmpq	%rbx, %rdi
    00000c5e: 	je	.Ltmp2383 # Offset: 3166
    00000c60: 	movq	-0xfd0(%rbp), %rax
    00000c67: 	leaq	0x1(%rax), %rsi
    00000c6b: 	callq	_ZdlPvm@PLT # Offset: 3179
.Ltmp2383:
    00000c70: 	movq	-0x3fd8(%rbp), %r14
    00000c77: 	leaq	DATAat0x24457(%rip), %rdx
    00000c7e: 	movq	%r15, %rsi
    00000c81: 	movq	%r14, %rdi
    00000c84: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3204
    00000c89: 	movq	-0x3fe0(%rbp), %rdi
    00000c90: 	movq	%r14, %rdx
    00000c93: 	movq	%r12, %rsi
    00000c96: 	callq	"_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1" # Offset: 3222
    00000c9b: 	movq	-0xfe0(%rbp), %rdi
    00000ca2: 	cmpq	%rbx, %rdi
    00000ca5: 	je	.Ltmp2384 # Offset: 3237
    00000ca7: 	movq	-0xfd0(%rbp), %rax
    00000cae: 	leaq	0x1(%rax), %rsi
    00000cb2: 	callq	_ZdlPvm@PLT # Offset: 3250
.Ltmp2384:
    00000cb7: 	movq	-0x3fd8(%rbp), %r14
    00000cbe: 	leaq	DATAat0x24468(%rip), %rdx
    00000cc5: 	movq	%r15, %rsi
    00000cc8: 	movq	%r14, %rdi
    00000ccb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3275
    00000cd0: 	movq	-0x3fe0(%rbp), %rsi
    00000cd7: 	movq	-0x4000(%rbp), %rdi
    00000cde: 	movq	%r14, %rdx
    00000ce1: 	callq	"_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1" # Offset: 3297
    00000ce6: 	movq	-0xfe0(%rbp), %rdi
    00000ced: 	cmpq	%rbx, %rdi
    00000cf0: 	je	.Ltmp2385 # Offset: 3312
    00000cf2: 	movq	-0xfd0(%rbp), %rax
    00000cf9: 	leaq	0x1(%rax), %rsi
    00000cfd: 	callq	_ZdlPvm@PLT # Offset: 3325
.Ltmp2385:
    00000d02: 	movq	-0x3fd8(%rbp), %r14
    00000d09: 	leaq	DATAat0x24484(%rip), %rdx
    00000d10: 	movq	%r15, %rsi
    00000d13: 	movq	%r14, %rdi
    00000d16: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3350
    00000d1b: 	movq	-0x3fe8(%rbp), %rsi
    00000d22: 	movq	%r14, %r8
    00000d25: 	xorl	%edx, %edx
    00000d27: 	movq	%r13, %rdi
    00000d2a: 	leaq	_Z20accumulate_iterator7IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_(%rip), %rcx
    00000d31: 	callq	_Z15test_accumulateItN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFtS6_S6_tEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3377
    00000d36: 	movq	-0xfe0(%rbp), %rdi
    00000d3d: 	cmpq	%rbx, %rdi
    00000d40: 	je	.Ltmp2386 # Offset: 3392
    00000d42: 	movq	-0xfd0(%rbp), %rax
    00000d49: 	leaq	0x1(%rax), %rsi
    00000d4d: 	callq	_ZdlPvm@PLT # Offset: 3405
.Ltmp2386:
    00000d52: 	movq	-0x3fd8(%rbp), %r14
    00000d59: 	leaq	DATAat0x244a1(%rip), %rdx
    00000d60: 	movq	%r15, %rsi
    00000d63: 	movq	%r14, %rdi
    00000d66: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3430
    00000d6b: 	movq	-0x3fe0(%rbp), %rdi
    00000d72: 	movq	%r14, %rdx
    00000d75: 	movq	%r12, %rsi
    00000d78: 	callq	"_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3448
    00000d7d: 	movq	-0xfe0(%rbp), %rdi
    00000d84: 	cmpq	%rbx, %rdi
    00000d87: 	je	.Ltmp2387 # Offset: 3463
    00000d89: 	movq	-0xfd0(%rbp), %rax
    00000d90: 	leaq	0x1(%rax), %rsi
    00000d94: 	callq	_ZdlPvm@PLT # Offset: 3476
.Ltmp2387:
    00000d99: 	movq	-0x3fd8(%rbp), %r14
    00000da0: 	leaq	DATAat0x244b2(%rip), %rdx
    00000da7: 	movq	%r15, %rsi
    00000daa: 	movq	%r14, %rdi
    00000dad: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3501
    00000db2: 	movq	-0x3fe0(%rbp), %rsi
    00000db9: 	movq	-0x4000(%rbp), %rdi
    00000dc0: 	movq	%r14, %rdx
    00000dc3: 	callq	"_Z15test_accumulateItPtPFtS0_S0_tEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3523
    00000dc8: 	movq	-0xfe0(%rbp), %rdi
    00000dcf: 	cmpq	%rbx, %rdi
    00000dd2: 	je	.Ltmp2388 # Offset: 3538
    00000dd4: 	movq	-0xfd0(%rbp), %rax
    00000ddb: 	leaq	0x1(%rax), %rsi
    00000ddf: 	callq	_ZdlPvm@PLT # Offset: 3551
.Ltmp2388:
    00000de4: 	movq	-0x3fd8(%rbp), %r14
    00000deb: 	leaq	DATAat0x244ce(%rip), %rdx
    00000df2: 	movq	%r15, %rsi
    00000df5: 	movq	%r14, %rdi
    00000df8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3576
    00000dfd: 	movq	-0x3fe8(%rbp), %rsi
    00000e04: 	movq	%r14, %r8
    00000e07: 	xorl	%edx, %edx
    00000e09: 	movq	%r13, %rdi
    00000e0c: 	leaq	_Z20accumulate_iterator8IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET0_T_S8_S7_(%rip), %rcx
    00000e13: 	callq	_Z15test_accumulateItN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFtS6_S6_tEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3603
    00000e18: 	movq	-0xfe0(%rbp), %rdi
    00000e1f: 	cmpq	%rbx, %rdi
    00000e22: 	je	.Ltmp2389 # Offset: 3618
    00000e24: 	movq	-0xfd0(%rbp), %rax
    00000e2b: 	leaq	0x1(%rax), %rsi
    00000e2f: 	callq	_ZdlPvm@PLT # Offset: 3631
.Ltmp2389:
    00000e34: 	leaq	-0x3f60(%rbp), %rdi
    00000e3b: 	leaq	DATAat0x24710(%rip), %rdx
    00000e42: 	movq	%r15, %rsi
    00000e45: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3653
    00000e4a: 	movl	iterations(%rip), %edx
    00000e50: 	xorl	%r8d, %r8d
    00000e53: 	xorl	%ecx, %ecx
    00000e55: 	movl	$0x7d0, %esi
    00000e5a: 	movq	-0x3f60(%rbp), %rdi
    00000e61: 	callq	_Z9summarizePKciiii # Offset: 3681
    00000e66: 	movslq	iterations(%rip), %rax
    00000e6d: 	movq	%rax, %rdi
    00000e70: 	movl	%eax, -0x4044(%rbp)
    00000e76: 	imulq	$0x2572fb07, %rax, %rax
    00000e7d: 	sarl	$0x1f, %edi
    00000e80: 	sarq	$0x2c, %rax
    00000e84: 	subl	%edi, %eax
    00000e86: 	movl	$0x1e84800, %edi
    00000e8b: 	movl	%eax, iterations(%rip)
    00000e91: 	callq	_Znam@PLT # Offset: 3729
    00000e96: 	movq	%rax, %r14
    00000e99: 	cvttsd2si	init_value(%rip), %eax
    00000ea1: 	movq	-0x3fd8(%rbp), %rdi
    00000ea8: 	leaq	0x1e84800(%r14), %rdx
    00000eaf: 	movd	%eax, %xmm0
    00000eb3: 	movq	%r14, %rax
    00000eb6: 	punpcklwd	%xmm0, %xmm0
    00000eba: 	pshufd	$0x0, %xmm0, %xmm0
.Ltmp2390:
    00000ebf: 	movups	%xmm0, (%rax)
    00000ec2: 	addq	$0x10, %rax
    00000ec6: 	cmpq	%rax, %rdx
    00000ec9: 	jne	.Ltmp2390 # Offset: 3785
    00000ecb: 	leaq	DATAat0x244eb(%rip), %rdx
    00000ed2: 	movq	%r15, %rsi
    00000ed5: 	movq	%rdi, -0x3fd8(%rbp)
    00000edc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3804
    00000ee1: 	xorl	%ecx, %ecx
    00000ee3: 	movl	$0xfa0, %edx
    00000ee8: 	movl	$0xfa0, %esi
    00000eed: 	movq	%r14, %rdi
    00000ef0: 	movq	-0x3fd8(%rbp), %r9
    00000ef7: 	leaq	_Z19accumulate_array2D1ItET_PKS0_mmS0_(%rip), %r8
    00000efe: 	callq	_Z17test_accumulate2DItPtPFtPKtmmtEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3838
    00000f03: 	movq	-0xfe0(%rbp), %rdi
    00000f0a: 	cmpq	%rbx, %rdi
    00000f0d: 	je	.Ltmp2391 # Offset: 3853
    00000f0f: 	movq	-0xfd0(%rbp), %rax
    00000f16: 	leaq	0x1(%rax), %rsi
    00000f1a: 	callq	_ZdlPvm@PLT # Offset: 3866
.Ltmp2391:
    00000f1f: 	movq	-0x3fd8(%rbp), %rdi
    00000f26: 	leaq	DATAat0x244fb(%rip), %rdx
    00000f2d: 	movq	%r15, %rsi
    00000f30: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3888
    00000f35: 	xorl	%ecx, %ecx
    00000f37: 	movl	$0xfa0, %edx
    00000f3c: 	movl	$0xfa0, %esi
    00000f41: 	movq	%r14, %rdi
    00000f44: 	movq	-0x3fd8(%rbp), %r9
    00000f4b: 	leaq	_Z19accumulate_array2D2ItET_PKS0_mmS0_(%rip), %r8
    00000f52: 	callq	_Z17test_accumulate2DItPtPFtPKtmmtEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3922
    00000f57: 	movq	-0xfe0(%rbp), %rdi
    00000f5e: 	cmpq	%rbx, %rdi
    00000f61: 	je	.Ltmp2392 # Offset: 3937
    00000f63: 	movq	-0xfd0(%rbp), %rax
    00000f6a: 	leaq	0x1(%rax), %rsi
    00000f6e: 	callq	_ZdlPvm@PLT # Offset: 3950
.Ltmp2392:
    00000f73: 	movq	-0x3fd8(%rbp), %rdi
    00000f7a: 	leaq	DATAat0x2450b(%rip), %rdx
    00000f81: 	movq	%r15, %rsi
    00000f84: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3972
    00000f89: 	xorl	%ecx, %ecx
    00000f8b: 	movl	$0xfa0, %edx
    00000f90: 	movl	$0xfa0, %esi
    00000f95: 	movq	%r14, %rdi
    00000f98: 	movq	-0x3fd8(%rbp), %r9
    00000f9f: 	leaq	_Z19accumulate_array2D3ItET_PKS0_mmS0_(%rip), %r8
    00000fa6: 	callq	_Z17test_accumulate2DItPtPFtPKtmmtEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4006
    00000fab: 	movq	-0xfe0(%rbp), %rdi
    00000fb2: 	cmpq	%rbx, %rdi
    00000fb5: 	je	.Ltmp2393 # Offset: 4021
    00000fb7: 	movq	-0xfd0(%rbp), %rax
    00000fbe: 	leaq	0x1(%rax), %rsi
    00000fc2: 	callq	_ZdlPvm@PLT # Offset: 4034
.Ltmp2393:
    00000fc7: 	movq	-0x3fd8(%rbp), %rdi
    00000fce: 	leaq	DATAat0x2451b(%rip), %rdx
    00000fd5: 	movq	%r15, %rsi
    00000fd8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4056
    00000fdd: 	xorl	%ecx, %ecx
    00000fdf: 	movl	$0xfa0, %edx
    00000fe4: 	movl	$0xfa0, %esi
    00000fe9: 	movq	%r14, %rdi
    00000fec: 	movq	-0x3fd8(%rbp), %r9
    00000ff3: 	leaq	_Z19accumulate_array2D4ItET_PKS0_mmS0_(%rip), %r8
    00000ffa: 	callq	_Z17test_accumulate2DItPtPFtPKtmmtEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4090
    00000fff: 	movq	-0xfe0(%rbp), %rdi
    00001006: 	cmpq	%rbx, %rdi
    00001009: 	je	.Ltmp2394 # Offset: 4105
    0000100b: 	movq	-0xfd0(%rbp), %rax
    00001012: 	leaq	0x1(%rax), %rsi
    00001016: 	callq	_ZdlPvm@PLT # Offset: 4118
.Ltmp2394:
    0000101b: 	movq	-0x3fd8(%rbp), %rdi
    00001022: 	leaq	DATAat0x2452b(%rip), %rdx
    00001029: 	movq	%r15, %rsi
    0000102c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4140
    00001031: 	xorl	%ecx, %ecx
    00001033: 	movl	$0xfa0, %edx
    00001038: 	movl	$0xfa0, %esi
    0000103d: 	movq	%r14, %rdi
    00001040: 	movq	-0x3fd8(%rbp), %r9
    00001047: 	leaq	_Z19accumulate_array2D5ItET_PKS0_mmS0_(%rip), %r8
    0000104e: 	callq	_Z17test_accumulate2DItPtPFtPKtmmtEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4174
    00001053: 	movq	-0xfe0(%rbp), %rdi
    0000105a: 	cmpq	%rbx, %rdi
    0000105d: 	je	.Ltmp2395 # Offset: 4189
    0000105f: 	movq	-0xfd0(%rbp), %rax
    00001066: 	leaq	0x1(%rax), %rsi
    0000106a: 	callq	_ZdlPvm@PLT # Offset: 4202
.Ltmp2395:
    0000106f: 	movq	-0x3fd8(%rbp), %rdi
    00001076: 	leaq	DATAat0x2453b(%rip), %rdx
    0000107d: 	movq	%r15, %rsi
    00001080: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4224
    00001085: 	xorl	%ecx, %ecx
    00001087: 	movl	$0xfa0, %edx
    0000108c: 	movl	$0xfa0, %esi
    00001091: 	movq	%r14, %rdi
    00001094: 	movq	-0x3fd8(%rbp), %r9
    0000109b: 	leaq	_Z19accumulate_array2D6ItET_PKS0_mmS0_(%rip), %r8
    000010a2: 	callq	_Z17test_accumulate2DItPtPFtPKtmmtEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4258
    000010a7: 	movq	-0xfe0(%rbp), %rdi
    000010ae: 	cmpq	%rbx, %rdi
    000010b1: 	je	.Ltmp2396 # Offset: 4273
    000010b3: 	movq	-0xfd0(%rbp), %rax
    000010ba: 	leaq	0x1(%rax), %rsi
    000010be: 	callq	_ZdlPvm@PLT # Offset: 4286
.Ltmp2396:
    000010c3: 	movq	-0x3fd8(%rbp), %rdi
    000010ca: 	leaq	DATAat0x2454b(%rip), %rdx
    000010d1: 	movq	%r15, %rsi
    000010d4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4308
    000010d9: 	xorl	%ecx, %ecx
    000010db: 	movl	$0xfa0, %edx
    000010e0: 	movl	$0xfa0, %esi
    000010e5: 	movq	%r14, %rdi
    000010e8: 	movq	-0x3fd8(%rbp), %r9
    000010ef: 	leaq	_Z19accumulate_array2D7ItET_PKS0_mmS0_(%rip), %r8
    000010f6: 	callq	_Z17test_accumulate2DItPtPFtPKtmmtEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4342
    000010fb: 	movq	-0xfe0(%rbp), %rdi
    00001102: 	cmpq	%rbx, %rdi
    00001105: 	je	.Ltmp2397 # Offset: 4357
    00001107: 	movq	-0xfd0(%rbp), %rax
    0000110e: 	leaq	0x1(%rax), %rsi
    00001112: 	callq	_ZdlPvm@PLT # Offset: 4370
.Ltmp2397:
    00001117: 	movq	-0x3fd8(%rbp), %rdi
    0000111e: 	leaq	DATAat0x2455b(%rip), %rdx
    00001125: 	movq	%r15, %rsi
    00001128: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4392
    0000112d: 	xorl	%ecx, %ecx
    0000112f: 	movl	$0xfa0, %edx
    00001134: 	movl	$0xfa0, %esi
    00001139: 	movq	%r14, %rdi
    0000113c: 	movq	-0x3fd8(%rbp), %r9
    00001143: 	leaq	_Z19accumulate_array2D8ItET_PKS0_mmS0_(%rip), %r8
    0000114a: 	callq	_Z17test_accumulate2DItPtPFtPKtmmtEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4426
    0000114f: 	movq	-0xfe0(%rbp), %rdi
    00001156: 	cmpq	%rbx, %rdi
    00001159: 	je	.Ltmp2398 # Offset: 4441
    0000115b: 	movq	-0xfd0(%rbp), %rax
    00001162: 	leaq	0x1(%rax), %rsi
    00001166: 	callq	_ZdlPvm@PLT # Offset: 4454
.Ltmp2398:
    0000116b: 	movq	-0x3fd8(%rbp), %rdi
    00001172: 	leaq	DATAat0x2456b(%rip), %rdx
    00001179: 	movq	%r15, %rsi
    0000117c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4476
    00001181: 	xorl	%ecx, %ecx
    00001183: 	movl	$0xfa0, %edx
    00001188: 	movl	$0xfa0, %esi
    0000118d: 	movq	%r14, %rdi
    00001190: 	movq	-0x3fd8(%rbp), %r9
    00001197: 	leaq	_Z19accumulate_array2D9ItET_PKS0_mmS0_(%rip), %r8
    0000119e: 	callq	_Z17test_accumulate2DItPtPFtPKtmmtEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4510
    000011a3: 	movq	-0xfe0(%rbp), %rdi
    000011aa: 	cmpq	%rbx, %rdi
    000011ad: 	je	.Ltmp2399 # Offset: 4525
    000011af: 	movq	-0xfd0(%rbp), %rax
    000011b6: 	leaq	0x1(%rax), %rsi
    000011ba: 	callq	_ZdlPvm@PLT # Offset: 4538
.Ltmp2399:
    000011bf: 	leaq	-0x3f40(%rbp), %rdi
    000011c6: 	leaq	DATAat0x24730(%rip), %rdx
    000011cd: 	movq	%r15, %rsi
    000011d0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4560
    000011d5: 	movl	iterations(%rip), %edx
    000011db: 	xorl	%r8d, %r8d
    000011de: 	xorl	%ecx, %ecx
    000011e0: 	movl	$0xf42400, %esi
    000011e5: 	movq	-0x3f40(%rbp), %rdi
    000011ec: 	callq	_Z9summarizePKciiii # Offset: 4588
    000011f1: 	movq	%r14, %rdi
    000011f4: 	callq	_ZdaPv@PLT # Offset: 4596
    000011f9: 	movl	$0x1fbfe04, %edi
    000011fe: 	callq	_Znam@PLT # Offset: 4606
    00001203: 	cvttsd2si	init_value(%rip), %edx
    0000120b: 	movq	-0x3fd8(%rbp), %rdi
    00001212: 	movq	%rax, %r14
    00001215: 	leaq	0x1fbfe00(%rax), %rcx
    0000121c: 	movd	%edx, %xmm0
    00001220: 	punpcklwd	%xmm0, %xmm0
    00001224: 	pshufd	$0x0, %xmm0, %xmm0
.Ltmp2400:
    00001229: 	movups	%xmm0, (%rax)
    0000122c: 	addq	$0x10, %rax
    00001230: 	cmpq	%rax, %rcx
    00001233: 	jne	.Ltmp2400 # Offset: 4659
    00001235: 	movw	%dx, 0x1fbfe00(%r14)
    0000123d: 	movq	%r15, %rsi
    00001240: 	movw	%dx, 0x1fbfe02(%r14)
    00001248: 	leaq	DATAat0x2457b(%rip), %rdx
    0000124f: 	movq	%rdi, -0x3fd8(%rbp)
    00001256: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4694
    0000125b: 	subq	$0x8, %rsp
    0000125f: 	pushq	-0x3fd8(%rbp)
    00001265: 	xorl	%r8d, %r8d
    00001268: 	movq	%r14, %rdi
    0000126b: 	movl	$0x101, %ecx
    00001270: 	movl	$0xff, %edx
    00001275: 	movl	$0xfe, %esi
    0000127a: 	leaq	_Z19accumulate_array3D1ItET_PKS0_mmmS0_(%rip), %r9
    00001281: 	callq	_Z17test_accumulate3DItPtPFtPKtmmmtEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4737
    00001286: 	movq	-0xfe0(%rbp), %rdi
    0000128d: 	popq	%r9
    0000128f: 	popq	%r10
    00001291: 	cmpq	%rbx, %rdi
    00001294: 	je	.Ltmp2401 # Offset: 4756
    00001296: 	movq	-0xfd0(%rbp), %rax
    0000129d: 	leaq	0x1(%rax), %rsi
    000012a1: 	callq	_ZdlPvm@PLT # Offset: 4769
.Ltmp2401:
    000012a6: 	movq	-0x3fd8(%rbp), %rdi
    000012ad: 	leaq	DATAat0x2458b(%rip), %rdx
    000012b4: 	movq	%r15, %rsi
    000012b7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4791
    000012bc: 	subq	$0x8, %rsp
    000012c0: 	pushq	-0x3fd8(%rbp)
    000012c6: 	xorl	%r8d, %r8d
    000012c9: 	movq	%r14, %rdi
    000012cc: 	movl	$0x101, %ecx
    000012d1: 	movl	$0xff, %edx
    000012d6: 	movl	$0xfe, %esi
    000012db: 	leaq	_Z19accumulate_array3D2ItET_PKS0_mmmS0_(%rip), %r9
    000012e2: 	callq	_Z17test_accumulate3DItPtPFtPKtmmmtEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4834
    000012e7: 	popq	%rdi
    000012e8: 	movq	-0xfe0(%rbp), %rdi
    000012ef: 	popq	%r8
    000012f1: 	cmpq	%rbx, %rdi
    000012f4: 	je	.Ltmp2402 # Offset: 4852
    000012f6: 	movq	-0xfd0(%rbp), %rax
    000012fd: 	leaq	0x1(%rax), %rsi
    00001301: 	callq	_ZdlPvm@PLT # Offset: 4865
.Ltmp2402:
    00001306: 	movq	-0x3fd8(%rbp), %rdi
    0000130d: 	leaq	DATAat0x2459b(%rip), %rdx
    00001314: 	movq	%r15, %rsi
    00001317: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4887
    0000131c: 	subq	$0x8, %rsp
    00001320: 	pushq	-0x3fd8(%rbp)
    00001326: 	xorl	%r8d, %r8d
    00001329: 	movq	%r14, %rdi
    0000132c: 	movl	$0x101, %ecx
    00001331: 	movl	$0xff, %edx
    00001336: 	movl	$0xfe, %esi
    0000133b: 	leaq	_Z19accumulate_array3D3ItET_PKS0_mmmS0_(%rip), %r9
    00001342: 	callq	_Z17test_accumulate3DItPtPFtPKtmmmtEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4930
    00001347: 	movq	-0xfe0(%rbp), %rdi
    0000134e: 	popq	%rcx
    0000134f: 	popq	%rsi
    00001350: 	cmpq	%rbx, %rdi
    00001353: 	je	.Ltmp2403 # Offset: 4947
    00001355: 	movq	-0xfd0(%rbp), %rax
    0000135c: 	leaq	0x1(%rax), %rsi
    00001360: 	callq	_ZdlPvm@PLT # Offset: 4960
.Ltmp2403:
    00001365: 	movq	-0x3fd8(%rbp), %rdi
    0000136c: 	leaq	DATAat0x245ab(%rip), %rdx
    00001373: 	movq	%r15, %rsi
    00001376: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4982
    0000137b: 	subq	$0x8, %rsp
    0000137f: 	pushq	-0x3fd8(%rbp)
    00001385: 	xorl	%r8d, %r8d
    00001388: 	movq	%r14, %rdi
    0000138b: 	movl	$0x101, %ecx
    00001390: 	movl	$0xff, %edx
    00001395: 	movl	$0xfe, %esi
    0000139a: 	leaq	_Z19accumulate_array3D4ItET_PKS0_mmmS0_(%rip), %r9
    000013a1: 	callq	_Z17test_accumulate3DItPtPFtPKtmmmtEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5025
    000013a6: 	movq	-0xfe0(%rbp), %rdi
    000013ad: 	popq	%rax
    000013ae: 	popq	%rdx
    000013af: 	cmpq	%rbx, %rdi
    000013b2: 	je	.Ltmp2404 # Offset: 5042
    000013b4: 	movq	-0xfd0(%rbp), %rax
    000013bb: 	leaq	0x1(%rax), %rsi
    000013bf: 	callq	_ZdlPvm@PLT # Offset: 5055
.Ltmp2404:
    000013c4: 	movq	-0x3fd8(%rbp), %rdi
    000013cb: 	leaq	DATAat0x245bb(%rip), %rdx
    000013d2: 	movq	%r15, %rsi
    000013d5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5077
    000013da: 	subq	$0x8, %rsp
    000013de: 	pushq	-0x3fd8(%rbp)
    000013e4: 	xorl	%r8d, %r8d
    000013e7: 	movq	%r14, %rdi
    000013ea: 	movl	$0x101, %ecx
    000013ef: 	movl	$0xff, %edx
    000013f4: 	movl	$0xfe, %esi
    000013f9: 	leaq	_Z19accumulate_array3D5ItET_PKS0_mmmS0_(%rip), %r9
    00001400: 	callq	_Z17test_accumulate3DItPtPFtPKtmmmtEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5120
    00001405: 	movq	-0xfe0(%rbp), %rdi
    0000140c: 	popq	%r11
    0000140e: 	popq	%rax
    0000140f: 	cmpq	%rbx, %rdi
    00001412: 	je	.Ltmp2405 # Offset: 5138
    00001414: 	movq	-0xfd0(%rbp), %rax
    0000141b: 	leaq	0x1(%rax), %rsi
    0000141f: 	callq	_ZdlPvm@PLT # Offset: 5151
.Ltmp2405:
    00001424: 	movq	-0x3fd8(%rbp), %rdi
    0000142b: 	leaq	DATAat0x245cb(%rip), %rdx
    00001432: 	movq	%r15, %rsi
    00001435: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5173
    0000143a: 	subq	$0x8, %rsp
    0000143e: 	pushq	-0x3fd8(%rbp)
    00001444: 	xorl	%r8d, %r8d
    00001447: 	movq	%r14, %rdi
    0000144a: 	movl	$0x101, %ecx
    0000144f: 	movl	$0xff, %edx
    00001454: 	movl	$0xfe, %esi
    00001459: 	leaq	_Z19accumulate_array3D6ItET_PKS0_mmmS0_(%rip), %r9
    00001460: 	callq	_Z17test_accumulate3DItPtPFtPKtmmmtEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5216
    00001465: 	movq	-0xfe0(%rbp), %rdi
    0000146c: 	popq	%r9
    0000146e: 	popq	%r10
    00001470: 	cmpq	%rbx, %rdi
    00001473: 	je	.Ltmp2406 # Offset: 5235
    00001475: 	movq	-0xfd0(%rbp), %rax
    0000147c: 	leaq	0x1(%rax), %rsi
    00001480: 	callq	_ZdlPvm@PLT # Offset: 5248
.Ltmp2406:
    00001485: 	movq	-0x3fd8(%rbp), %rdi
    0000148c: 	leaq	DATAat0x245db(%rip), %rdx
    00001493: 	movq	%r15, %rsi
    00001496: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5270
    0000149b: 	subq	$0x8, %rsp
    0000149f: 	pushq	-0x3fd8(%rbp)
    000014a5: 	xorl	%r8d, %r8d
    000014a8: 	movq	%r14, %rdi
    000014ab: 	movl	$0x101, %ecx
    000014b0: 	movl	$0xff, %edx
    000014b5: 	movl	$0xfe, %esi
    000014ba: 	leaq	_Z19accumulate_array3D7ItET_PKS0_mmmS0_(%rip), %r9
    000014c1: 	callq	_Z17test_accumulate3DItPtPFtPKtmmmtEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5313
    000014c6: 	popq	%rdi
    000014c7: 	movq	-0xfe0(%rbp), %rdi
    000014ce: 	popq	%r8
    000014d0: 	cmpq	%rbx, %rdi
    000014d3: 	je	.Ltmp2407 # Offset: 5331
    000014d5: 	movq	-0xfd0(%rbp), %rax
    000014dc: 	leaq	0x1(%rax), %rsi
    000014e0: 	callq	_ZdlPvm@PLT # Offset: 5344
.Ltmp2407:
    000014e5: 	movq	-0x3fd8(%rbp), %rdi
    000014ec: 	leaq	DATAat0x245eb(%rip), %rdx
    000014f3: 	movq	%r15, %rsi
    000014f6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5366
    000014fb: 	subq	$0x8, %rsp
    000014ff: 	pushq	-0x3fd8(%rbp)
    00001505: 	xorl	%r8d, %r8d
    00001508: 	movq	%r14, %rdi
    0000150b: 	movl	$0x101, %ecx
    00001510: 	movl	$0xff, %edx
    00001515: 	movl	$0xfe, %esi
    0000151a: 	leaq	_Z19accumulate_array3D8ItET_PKS0_mmmS0_(%rip), %r9
    00001521: 	callq	_Z17test_accumulate3DItPtPFtPKtmmmtEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5409
    00001526: 	movq	-0xfe0(%rbp), %rdi
    0000152d: 	popq	%rcx
    0000152e: 	popq	%rsi
    0000152f: 	cmpq	%rbx, %rdi
    00001532: 	je	.Ltmp2408 # Offset: 5426
    00001534: 	movq	-0xfd0(%rbp), %rax
    0000153b: 	leaq	0x1(%rax), %rsi
    0000153f: 	callq	_ZdlPvm@PLT # Offset: 5439
.Ltmp2408:
    00001544: 	movq	-0x3fd8(%rbp), %rdi
    0000154b: 	leaq	DATAat0x245fb(%rip), %rdx
    00001552: 	movq	%r15, %rsi
    00001555: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5461
    0000155a: 	subq	$0x8, %rsp
    0000155e: 	pushq	-0x3fd8(%rbp)
    00001564: 	xorl	%r8d, %r8d
    00001567: 	movq	%r14, %rdi
    0000156a: 	movl	$0x101, %ecx
    0000156f: 	movl	$0xff, %edx
    00001574: 	movl	$0xfe, %esi
    00001579: 	leaq	_Z19accumulate_array3D9ItET_PKS0_mmmS0_(%rip), %r9
    00001580: 	callq	_Z17test_accumulate3DItPtPFtPKtmmmtEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5504
    00001585: 	movq	-0xfe0(%rbp), %rdi
    0000158c: 	popq	%rax
    0000158d: 	popq	%rdx
    0000158e: 	cmpq	%rbx, %rdi
    00001591: 	je	.Ltmp2409 # Offset: 5521
    00001593: 	movq	-0xfd0(%rbp), %rax
    0000159a: 	leaq	0x1(%rax), %rsi
    0000159e: 	callq	_ZdlPvm@PLT # Offset: 5534
.Ltmp2409:
    000015a3: 	leaq	-0x3f20(%rbp), %rdi
    000015aa: 	leaq	DATAat0x24758(%rip), %rdx
    000015b1: 	movq	%r15, %rsi
    000015b4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5556
    000015b9: 	movl	iterations(%rip), %edx
    000015bf: 	xorl	%r8d, %r8d
    000015c2: 	xorl	%ecx, %ecx
    000015c4: 	movl	$0xfdff02, %esi
    000015c9: 	movq	-0x3f20(%rbp), %rdi
    000015d0: 	callq	_Z9summarizePKciiii # Offset: 5584
    000015d5: 	movq	%r14, %rdi
    000015d8: 	callq	_ZdaPv@PLT # Offset: 5592
    000015dd: 	movl	$0x1ffc002, %edi
    000015e2: 	callq	_Znam@PLT # Offset: 5602
    000015e7: 	cvttsd2si	init_value(%rip), %edx
    000015ef: 	movq	-0x3fd8(%rbp), %rdi
    000015f6: 	movq	%rax, %r14
    000015f9: 	leaq	0x1ffc000(%rax), %rcx
    00001600: 	movd	%edx, %xmm0
    00001604: 	punpcklwd	%xmm0, %xmm0
    00001608: 	pshufd	$0x0, %xmm0, %xmm0
.Ltmp2410:
    0000160d: 	movups	%xmm0, (%rax)
    00001610: 	addq	$0x10, %rax
    00001614: 	cmpq	%rax, %rcx
    00001617: 	jne	.Ltmp2410 # Offset: 5655
    00001619: 	movw	%dx, 0x1ffc000(%r14)
    00001621: 	movq	%r15, %rsi
    00001624: 	leaq	DATAat0x2460b(%rip), %rdx
    0000162b: 	movq	%rdi, -0x3fd8(%rbp)
    00001632: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5682
    00001637: 	xorl	%r9d, %r9d
    0000163a: 	movl	$0x3f, %ecx
    0000163f: 	movl	$0x41, %edx
    00001644: 	movq	%r14, %rdi
    00001647: 	leaq	_Z19accumulate_array4D1ItET_PKS0_mmmmS0_(%rip), %rax
    0000164e: 	pushq	-0x3fd8(%rbp)
    00001654: 	movl	$0x41, %r8d
    0000165a: 	movl	$0x3f, %esi
    0000165f: 	pushq	%rax
    00001660: 	callq	_Z17test_accumulate4DItPtPFtPKtmmmmtEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5728
    00001665: 	movq	-0xfe0(%rbp), %rdi
    0000166c: 	popq	%r11
    0000166e: 	popq	%rax
    0000166f: 	cmpq	%rbx, %rdi
    00001672: 	je	.Ltmp2411 # Offset: 5746
    00001674: 	movq	-0xfd0(%rbp), %rax
    0000167b: 	leaq	0x1(%rax), %rsi
    0000167f: 	callq	_ZdlPvm@PLT # Offset: 5759
.Ltmp2411:
    00001684: 	movq	-0x3fd8(%rbp), %rdi
    0000168b: 	leaq	DATAat0x2461b(%rip), %rdx
    00001692: 	movq	%r15, %rsi
    00001695: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5781
    0000169a: 	xorl	%r9d, %r9d
    0000169d: 	movl	$0x3f, %ecx
    000016a2: 	movl	$0x41, %edx
    000016a7: 	movq	%r14, %rdi
    000016aa: 	leaq	_Z19accumulate_array4D2ItET_PKS0_mmmmS0_(%rip), %rax
    000016b1: 	pushq	-0x3fd8(%rbp)
    000016b7: 	movl	$0x41, %r8d
    000016bd: 	movl	$0x3f, %esi
    000016c2: 	pushq	%rax
    000016c3: 	callq	_Z17test_accumulate4DItPtPFtPKtmmmmtEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5827
    000016c8: 	movq	-0xfe0(%rbp), %rdi
    000016cf: 	popq	%r9
    000016d1: 	popq	%r10
    000016d3: 	cmpq	%rbx, %rdi
    000016d6: 	je	.Ltmp2412 # Offset: 5846
    000016d8: 	movq	-0xfd0(%rbp), %rax
    000016df: 	leaq	0x1(%rax), %rsi
    000016e3: 	callq	_ZdlPvm@PLT # Offset: 5859
.Ltmp2412:
    000016e8: 	movq	-0x3fd8(%rbp), %rdi
    000016ef: 	leaq	DATAat0x2462b(%rip), %rdx
    000016f6: 	movq	%r15, %rsi
    000016f9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5881
    000016fe: 	xorl	%r9d, %r9d
    00001701: 	movl	$0x3f, %ecx
    00001706: 	movl	$0x41, %edx
    0000170b: 	movq	%r14, %rdi
    0000170e: 	leaq	_Z19accumulate_array4D3ItET_PKS0_mmmmS0_(%rip), %rax
    00001715: 	pushq	-0x3fd8(%rbp)
    0000171b: 	movl	$0x41, %r8d
    00001721: 	movl	$0x3f, %esi
    00001726: 	pushq	%rax
    00001727: 	callq	_Z17test_accumulate4DItPtPFtPKtmmmmtEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5927
    0000172c: 	popq	%rdi
    0000172d: 	movq	-0xfe0(%rbp), %rdi
    00001734: 	popq	%r8
    00001736: 	cmpq	%rbx, %rdi
    00001739: 	je	.Ltmp2413 # Offset: 5945
    0000173b: 	movq	-0xfd0(%rbp), %rax
    00001742: 	leaq	0x1(%rax), %rsi
    00001746: 	callq	_ZdlPvm@PLT # Offset: 5958
.Ltmp2413:
    0000174b: 	movq	-0x3fd8(%rbp), %rdi
    00001752: 	leaq	DATAat0x2463b(%rip), %rdx
    00001759: 	movq	%r15, %rsi
    0000175c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5980
    00001761: 	xorl	%r9d, %r9d
    00001764: 	movl	$0x3f, %ecx
    00001769: 	movl	$0x41, %edx
    0000176e: 	movq	%r14, %rdi
    00001771: 	leaq	_Z19accumulate_array4D4ItET_PKS0_mmmmS0_(%rip), %rax
    00001778: 	pushq	-0x3fd8(%rbp)
    0000177e: 	movl	$0x41, %r8d
    00001784: 	movl	$0x3f, %esi
    00001789: 	pushq	%rax
    0000178a: 	callq	_Z17test_accumulate4DItPtPFtPKtmmmmtEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6026
    0000178f: 	movq	-0xfe0(%rbp), %rdi
    00001796: 	popq	%rcx
    00001797: 	popq	%rsi
    00001798: 	cmpq	%rbx, %rdi
    0000179b: 	je	.Ltmp2414 # Offset: 6043
    0000179d: 	movq	-0xfd0(%rbp), %rax
    000017a4: 	leaq	0x1(%rax), %rsi
    000017a8: 	callq	_ZdlPvm@PLT # Offset: 6056
.Ltmp2414:
    000017ad: 	movq	-0x3fd8(%rbp), %rdi
    000017b4: 	leaq	DATAat0x2464b(%rip), %rdx
    000017bb: 	movq	%r15, %rsi
    000017be: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6078
    000017c3: 	xorl	%r9d, %r9d
    000017c6: 	movl	$0x3f, %ecx
    000017cb: 	movl	$0x41, %edx
    000017d0: 	movq	%r14, %rdi
    000017d3: 	leaq	_Z19accumulate_array4D5ItET_PKS0_mmmmS0_(%rip), %rax
    000017da: 	pushq	-0x3fd8(%rbp)
    000017e0: 	movl	$0x41, %r8d
    000017e6: 	movl	$0x3f, %esi
    000017eb: 	pushq	%rax
    000017ec: 	callq	_Z17test_accumulate4DItPtPFtPKtmmmmtEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6124
    000017f1: 	movq	-0xfe0(%rbp), %rdi
    000017f8: 	popq	%rax
    000017f9: 	popq	%rdx
    000017fa: 	cmpq	%rbx, %rdi
    000017fd: 	je	.Ltmp2415 # Offset: 6141
    000017ff: 	movq	-0xfd0(%rbp), %rax
    00001806: 	leaq	0x1(%rax), %rsi
    0000180a: 	callq	_ZdlPvm@PLT # Offset: 6154
.Ltmp2415:
    0000180f: 	movq	-0x3fd8(%rbp), %rdi
    00001816: 	leaq	DATAat0x2465b(%rip), %rdx
    0000181d: 	movq	%r15, %rsi
    00001820: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6176
    00001825: 	xorl	%r9d, %r9d
    00001828: 	movl	$0x3f, %ecx
    0000182d: 	movl	$0x41, %edx
    00001832: 	movq	%r14, %rdi
    00001835: 	leaq	_Z19accumulate_array4D6ItET_PKS0_mmmmS0_(%rip), %rax
    0000183c: 	pushq	-0x3fd8(%rbp)
    00001842: 	movl	$0x41, %r8d
    00001848: 	movl	$0x3f, %esi
    0000184d: 	pushq	%rax
    0000184e: 	callq	_Z17test_accumulate4DItPtPFtPKtmmmmtEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6222
    00001853: 	movq	-0xfe0(%rbp), %rdi
    0000185a: 	popq	%r11
    0000185c: 	popq	%rax
    0000185d: 	cmpq	%rbx, %rdi
    00001860: 	je	.Ltmp2416 # Offset: 6240
    00001862: 	movq	-0xfd0(%rbp), %rax
    00001869: 	leaq	0x1(%rax), %rsi
    0000186d: 	callq	_ZdlPvm@PLT # Offset: 6253
.Ltmp2416:
    00001872: 	movq	-0x3fd8(%rbp), %rdi
    00001879: 	leaq	DATAat0x2466b(%rip), %rdx
    00001880: 	movq	%r15, %rsi
    00001883: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6275
    00001888: 	xorl	%r9d, %r9d
    0000188b: 	movl	$0x3f, %ecx
    00001890: 	movl	$0x41, %edx
    00001895: 	movq	%r14, %rdi
    00001898: 	leaq	_Z19accumulate_array4D7ItET_PKS0_mmmmS0_(%rip), %rax
    0000189f: 	pushq	-0x3fd8(%rbp)
    000018a5: 	movl	$0x41, %r8d
    000018ab: 	movl	$0x3f, %esi
    000018b0: 	pushq	%rax
    000018b1: 	callq	_Z17test_accumulate4DItPtPFtPKtmmmmtEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6321
    000018b6: 	movq	-0xfe0(%rbp), %rdi
    000018bd: 	popq	%r9
    000018bf: 	popq	%r10
    000018c1: 	cmpq	%rbx, %rdi
    000018c4: 	je	.Ltmp2417 # Offset: 6340
    000018c6: 	movq	-0xfd0(%rbp), %rax
    000018cd: 	leaq	0x1(%rax), %rsi
    000018d1: 	callq	_ZdlPvm@PLT # Offset: 6353
.Ltmp2417:
    000018d6: 	movq	-0x3fd8(%rbp), %rdi
    000018dd: 	leaq	DATAat0x2467b(%rip), %rdx
    000018e4: 	movq	%r15, %rsi
    000018e7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6375
    000018ec: 	xorl	%r9d, %r9d
    000018ef: 	movl	$0x3f, %ecx
    000018f4: 	movl	$0x41, %edx
    000018f9: 	movq	%r14, %rdi
    000018fc: 	leaq	_Z19accumulate_array4D8ItET_PKS0_mmmmS0_(%rip), %rax
    00001903: 	pushq	-0x3fd8(%rbp)
    00001909: 	movl	$0x41, %r8d
    0000190f: 	movl	$0x3f, %esi
    00001914: 	pushq	%rax
    00001915: 	callq	_Z17test_accumulate4DItPtPFtPKtmmmmtEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6421
    0000191a: 	popq	%rdi
    0000191b: 	movq	-0xfe0(%rbp), %rdi
    00001922: 	popq	%r8
    00001924: 	cmpq	%rbx, %rdi
    00001927: 	je	.Ltmp2418 # Offset: 6439
    00001929: 	movq	-0xfd0(%rbp), %rax
    00001930: 	leaq	0x1(%rax), %rsi
    00001934: 	callq	_ZdlPvm@PLT # Offset: 6452
.Ltmp2418:
    00001939: 	movq	-0x3fd8(%rbp), %rdi
    00001940: 	leaq	DATAat0x2468b(%rip), %rdx
    00001947: 	movq	%r15, %rsi
    0000194a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6474
    0000194f: 	xorl	%r9d, %r9d
    00001952: 	movl	$0x3f, %ecx
    00001957: 	movl	$0x41, %edx
    0000195c: 	movq	%r14, %rdi
    0000195f: 	leaq	_Z19accumulate_array4D9ItET_PKS0_mmmmS0_(%rip), %rax
    00001966: 	pushq	-0x3fd8(%rbp)
    0000196c: 	movl	$0x41, %r8d
    00001972: 	movl	$0x3f, %esi
    00001977: 	pushq	%rax
    00001978: 	callq	_Z17test_accumulate4DItPtPFtPKtmmmmtEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6520
    0000197d: 	movq	-0xfe0(%rbp), %rdi
    00001984: 	popq	%rcx
    00001985: 	popq	%rsi
    00001986: 	cmpq	%rbx, %rdi
    00001989: 	je	.Ltmp2419 # Offset: 6537
    0000198b: 	movq	-0xfd0(%rbp), %rax
    00001992: 	leaq	0x1(%rax), %rsi
    00001996: 	callq	_ZdlPvm@PLT # Offset: 6550
.Ltmp2419:
    0000199b: 	leaq	-0x3f00(%rbp), %rdi
    000019a2: 	leaq	DATAat0x24780(%rip), %rdx
    000019a9: 	movq	%r15, %rsi
    000019ac: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6572
    000019b1: 	movl	iterations(%rip), %edx
    000019b7: 	xorl	%r8d, %r8d
    000019ba: 	xorl	%ecx, %ecx
    000019bc: 	movl	$0xffe001, %esi
    000019c1: 	movq	-0x3f00(%rbp), %rdi
    000019c8: 	callq	_Z9summarizePKciiii # Offset: 6600
    000019cd: 	movq	%r14, %rdi
    000019d0: 	callq	_ZdaPv@PLT # Offset: 6608
    000019d5: 	movl	-0x4044(%rbp), %eax
    000019db: 	pxor	%xmm0, %xmm0
    000019df: 	leaq	-0x3fa0(%rbp), %rdi
    000019e6: 	movl	$0x7d0, %esi
    000019eb: 	movaps	%xmm0, -0x3fa0(%rbp)
    000019f2: 	movl	%eax, iterations(%rip)
    000019f8: 	movq	$0x0, -0x3f90(%rbp)
    00001a03: 	callq	_ZNSt6vectorItSaItEE17_M_default_appendEm # Offset: 6659
    00001a08: 	movslq	iterations(%rip), %rax
    00001a0f: 	movq	-0x3fd8(%rbp), %rbx
    00001a16: 	movabsq	$0x5851f42d4c957f2d, %rdi
    00001a20: 	movabsq	$0x14057b7ef767814f, %rsi
    00001a2a: 	movq	%rax, %rdx
    00001a2d: 	imulq	$0x7af4f3ff, %rax, %rax
    00001a34: 	sarl	$0x1f, %edx
    00001a37: 	sarq	$0x28, %rax
    00001a3b: 	subl	%edx, %eax
    00001a3d: 	movq	-0x3fe0(%rbp), %rdx
    00001a44: 	movl	%eax, iterations(%rip)
    00001a4a: 	cvttsd2si	init_value(%rip), %eax
    00001a52: 	addl	$0x3039, %eax
    00001a57: 	cltq
    00001a59: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
.Ltmp2420:
    00001a60: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00001a67: 	addq	$0x2, %rdx
    00001a6b: 	imulq	%rdi, %rax
    00001a6f: 	addq	%rsi, %rax
    00001a72: 	movq	%rax, %rcx
    00001a75: 	movq	%rax, %r8
    00001a78: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00001a7f: 	shrq	$0x14, %rcx
    00001a83: 	shlq	$0x17, %r8
    00001a87: 	xorq	%r8, %rcx
    00001a8a: 	xorq	%rcx, %rax
    00001a8d: 	sarq	$0x3, %rax
    00001a91: 	movw	%ax, -0x2(%rdx)
    00001a95: 	cmpq	%r12, %rdx
    00001a98: 	jne	.Ltmp2420 # Offset: 6808
    00001a9a: 	leaq	-0x2f1e(%rbp), %rdx
    00001aa1: 	movq	%r13, %rax
    00001aa4: 	movq	-0x4000(%rbp), %rdi
    00001aab: 	movq	-0x3fe0(%rbp), %rsi
    00001ab2: 	subq	%rdx, %rax
    00001ab5: 	movl	$0x1f4, %ecx
    00001aba: 	movq	%rbx, -0x3fd8(%rbp)
    00001ac1: 	rep		movsq	(%rsi), %es:(%rdi)
    00001ac4: 	cmpq	$0xc, %rax
    00001ac8: 	movq	%rbx, %rdi
    00001acb: 	movl	$0x0, %eax
    00001ad0: 	jbe	.Ltmp2421 # Offset: 6864
    00001ad6: 	movq	-0x3fe0(%rbp), %rdx
.Ltmp2422:
    00001add: 	movdqa	(%rdx,%rax), %xmm5
    00001ae2: 	movups	%xmm5, (%r13,%rax)
    00001ae8: 	addq	$0x10, %rax
    00001aec: 	cmpq	$0xfa0, %rax
    00001af2: 	jne	.Ltmp2422 # Offset: 6898
.Ltmp2650:
    00001af4: 	movq	%rdi, -0x3fd8(%rbp)
    00001afb: 	leaq	DATAat0x2469b(%rip), %rdx
    00001b02: 	movq	%r15, %rsi
    00001b05: 	movq	%r12, %rdi
    00001b08: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6920
    00001b0d: 	callq	clock@PLT # Offset: 6925
    00001b12: 	movl	iterations(%rip), %r8d
    00001b19: 	xorl	%r14d, %r14d
    00001b1c: 	leaq	-0x40(%rbp), %rbx
    00001b20: 	movq	%rax, start_time(%rip)
    00001b27: 	leaq	-0xfde(%rbp), %rax
    00001b2e: 	movq	%rax, -0x4020(%rbp)
    00001b35: 	testl	%r8d, %r8d
    00001b38: 	jle	.Ltmp2423 # Offset: 6968
.Ltmp2429:
    00001b3e: 	movq	-0x3fd8(%rbp), %rdi
    00001b45: 	movq	-0x3fe0(%rbp), %rsi
    00001b4c: 	movl	$0x1f4, %ecx
    00001b51: 	rep		movsq	(%rsi), %es:(%rdi)
    00001b54: 	movq	-0x4020(%rbp), %rdi
    00001b5b: 	movq	-0x3fd8(%rbp), %rcx
    00001b62: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2426:
    00001b68: 	movzwl	(%rdi), %esi
    00001b6b: 	movq	%rdi, %rax
    00001b6e: 	movq	%rcx, %r11
    00001b71: 	nopl	(%rax) # Size: 7
.Ltmp2425:
    00001b78: 	movq	%rax, %rdx
    00001b7b: 	leaq	-0x2(%rax), %rax
    00001b7f: 	movzwl	-0x2(%rdx), %ecx
    00001b83: 	cmpw	%cx, %si
    00001b86: 	jae	.Ltmp2424 # Offset: 7046
    00001b8c: 	movw	%cx, 0x2(%rax)
    00001b90: 	movq	%r11, %rcx
    00001b93: 	cmpq	%r11, %rax
    00001b96: 	jne	.Ltmp2425 # Offset: 7062
    00001b98: 	movq	%r11, %rdx
.Ltmp2481:
    00001b9b: 	addq	$0x2, %rdi
    00001b9f: 	movw	%si, (%rdx)
    00001ba2: 	cmpq	%rbx, %rdi
    00001ba5: 	jne	.Ltmp2426 # Offset: 7077
    00001ba7: 	movzwl	-0xfe0(%rbp), %edx
    00001bae: 	movq	-0x4020(%rbp), %rax
    00001bb5: 	movq	%rcx, %rdi
    00001bb8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2428:
    00001bc0: 	addq	$0x2, %rax
    00001bc4: 	movl	%edx, %ecx
    00001bc6: 	movzwl	-0x2(%rax), %edx
    00001bca: 	cmpw	%cx, %dx
    00001bcd: 	jb	.Ltmp2427 # Offset: 7117
    00001bd3: 	cmpq	%rbx, %rax
    00001bd6: 	jne	.Ltmp2428 # Offset: 7126
    00001bd8: 	movq	%rdi, -0x3fd8(%rbp)
.Ltmp2482:
    00001bdf: 	addl	$0x1, %r14d
    00001be3: 	cmpl	%r8d, %r14d
    00001be6: 	jl	.Ltmp2429 # Offset: 7142
.Ltmp2423:
    00001bec: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00001bf3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00001bfa: 	subq	$0x20, %rax
    00001bfe: 	cmpq	%rax, %rbx
    00001c01: 	je	.Ltmp2430 # Offset: 7169
    00001c07: 	leaq	0x10(%rbx), %rdi
    00001c0b: 	movq	-0x1f78(%rbp), %r14
    00001c12: 	movq	%rdi, (%rbx)
    00001c15: 	movq	-0x1f80(%rbp), %rax
    00001c1c: 	movq	%rax, -0x3ff0(%rbp)
    00001c23: 	movq	%rax, %rsi
    00001c26: 	addq	%r14, %rax
    00001c29: 	je	.Ltmp2431 # Offset: 7209
    00001c2b: 	testq	%rsi, %rsi
    00001c2e: 	je	.Ltmp2432 # Offset: 7214
.Ltmp2431:
    00001c34: 	movq	%r14, -0x3fc8(%rbp)
    00001c3b: 	cmpq	$0xf, %r14
    00001c3f: 	ja	.Ltmp2433 # Offset: 7231
    00001c45: 	cmpq	$0x1, %r14
    00001c49: 	jne	.Ltmp2434 # Offset: 7241
    00001c4f: 	movq	-0x3ff0(%rbp), %rax
    00001c56: 	movzbl	(%rax), %eax
    00001c59: 	movb	%al, 0x10(%rbx)
.Ltmp2483:
    00001c5c: 	movq	%r14, 0x8(%rbx)
    00001c60: 	movb	$0x0, (%rdi,%r14)
    00001c65: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001c6c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001c73: 	addq	$0x20, %rax
    00001c77: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001c7e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00001c85: 	je	.Ltmp2435 # Offset: 7301
.Ltmp2647:
    00001c8b: 	movq	-0x20(%rax), %r14
    00001c8f: 	callq	clock@PLT # Offset: 7311
    00001c94: 	pxor	%xmm0, %xmm0
    00001c98: 	movq	%rax, end_time(%rip)
    00001c9f: 	movq	%r14, %rdi
    00001ca2: 	subq	start_time(%rip), %rax
    00001ca9: 	cvtsi2sd	%rax, %xmm0
    00001cae: 	divsd	DATAat0x24890(%rip), %xmm0
    00001cb6: 	callq	_Z13record_resultdPKc # Offset: 7350
    00001cbb: 	movq	-0x1f80(%rbp), %rdi
    00001cc2: 	leaq	-0x1f70(%rbp), %rax
    00001cc9: 	cmpq	%rax, %rdi
    00001ccc: 	je	.Ltmp2436 # Offset: 7372
    00001cce: 	movq	-0x1f70(%rbp), %rax
    00001cd5: 	leaq	0x1(%rax), %rsi
    00001cd9: 	callq	_ZdlPvm@PLT # Offset: 7385
.Ltmp2436:
    00001cde: 	leaq	-0x3ee0(%rbp), %rax
    00001ce5: 	leaq	DATAat0x247a8(%rip), %rdx
    00001cec: 	movq	%r15, %rsi
    00001cef: 	movq	%rax, %rdi
    00001cf2: 	movq	%rax, -0x4010(%rbp)
    00001cf9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7417
    00001cfe: 	callq	clock@PLT # Offset: 7422
    00001d03: 	movl	iterations(%rip), %r8d
    00001d0a: 	xorl	%r14d, %r14d
    00001d0d: 	leaq	DATAat0x246f4(%rip), %rbx
    00001d14: 	movq	%rax, start_time(%rip)
    00001d1b: 	leaq	-0x1f7e(%rbp), %rax
    00001d22: 	movq	%rax, -0x4020(%rbp)
    00001d29: 	testl	%r8d, %r8d
    00001d2c: 	jle	.Ltmp2437 # Offset: 7468
.Ltmp2443:
    00001d32: 	movq	-0x4000(%rbp), %rsi
    00001d39: 	movl	$0x1f4, %ecx
    00001d3e: 	movq	%r12, %rdi
    00001d41: 	rep		movsq	(%rsi), %es:(%rdi)
    00001d44: 	movq	-0x4020(%rbp), %rdi
    00001d4b: 	movq	-0x3fd8(%rbp), %rcx
    00001d52: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2440:
    00001d58: 	movzwl	(%rdi), %esi
    00001d5b: 	movq	%rdi, %rax
    00001d5e: 	movq	%rcx, %r11
    00001d61: 	nopl	(%rax) # Size: 7
.Ltmp2439:
    00001d68: 	movq	%rax, %rdx
    00001d6b: 	leaq	-0x2(%rax), %rax
    00001d6f: 	movzwl	-0x2(%rdx), %ecx
    00001d73: 	cmpw	%cx, %si
    00001d76: 	jae	.Ltmp2438 # Offset: 7542
    00001d7c: 	movw	%cx, 0x2(%rax)
    00001d80: 	cmpq	%r12, %rax
    00001d83: 	jne	.Ltmp2439 # Offset: 7555
    00001d85: 	movq	%r11, %rcx
    00001d88: 	movq	%r12, %rdx
.Ltmp2484:
    00001d8b: 	addq	$0x2, %rdi
    00001d8f: 	movw	%si, (%rdx)
    00001d92: 	cmpq	%rcx, %rdi
    00001d95: 	jne	.Ltmp2440 # Offset: 7573
    00001d97: 	movzwl	-0x1f80(%rbp), %edx
    00001d9e: 	movq	-0x4020(%rbp), %rax
    00001da5: 	movq	%rcx, %rdi
    00001da8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2442:
    00001db0: 	addq	$0x2, %rax
    00001db4: 	movl	%edx, %ecx
    00001db6: 	movzwl	-0x2(%rax), %edx
    00001dba: 	cmpw	%cx, %dx
    00001dbd: 	jb	.Ltmp2441 # Offset: 7613
    00001dc3: 	cmpq	%rdi, %rax
    00001dc6: 	jne	.Ltmp2442 # Offset: 7622
    00001dc8: 	movq	%rdi, -0x3fd8(%rbp)
.Ltmp2613:
    00001dcf: 	addl	$0x1, %r14d
    00001dd3: 	cmpl	%r8d, %r14d
    00001dd6: 	jl	.Ltmp2443 # Offset: 7638
.Ltmp2437:
    00001ddc: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00001de3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00001dea: 	subq	$0x20, %rax
    00001dee: 	cmpq	%rax, %rbx
    00001df1: 	je	.Ltmp2444 # Offset: 7665
    00001df7: 	leaq	0x10(%rbx), %rdi
    00001dfb: 	movq	-0x3ed8(%rbp), %r14
    00001e02: 	movq	%rdi, (%rbx)
    00001e05: 	movq	-0x3ee0(%rbp), %rax
    00001e0c: 	movq	%rax, -0x3ff0(%rbp)
    00001e13: 	movq	%rax, %rsi
    00001e16: 	addq	%r14, %rax
    00001e19: 	je	.Ltmp2445 # Offset: 7705
    00001e1b: 	testq	%rsi, %rsi
    00001e1e: 	je	.Ltmp2446 # Offset: 7710
.Ltmp2445:
    00001e24: 	movq	%r14, -0x3fc8(%rbp)
    00001e2b: 	cmpq	$0xf, %r14
    00001e2f: 	ja	.Ltmp2447 # Offset: 7727
    00001e35: 	cmpq	$0x1, %r14
    00001e39: 	jne	.Ltmp2448 # Offset: 7737
    00001e3f: 	movq	-0x3ff0(%rbp), %rax
    00001e46: 	movzbl	(%rax), %eax
    00001e49: 	movb	%al, 0x10(%rbx)
.Ltmp2659:
    00001e4c: 	movq	%r14, 0x8(%rbx)
    00001e50: 	movb	$0x0, (%rdi,%r14)
    00001e55: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001e5c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001e63: 	addq	$0x20, %rax
    00001e67: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001e6e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00001e75: 	je	.Ltmp2449 # Offset: 7797
.Ltmp2660:
    00001e7b: 	movq	-0x20(%rax), %r14
    00001e7f: 	callq	clock@PLT # Offset: 7807
    00001e84: 	pxor	%xmm0, %xmm0
    00001e88: 	movq	%rax, end_time(%rip)
    00001e8f: 	movq	%r14, %rdi
    00001e92: 	subq	start_time(%rip), %rax
    00001e99: 	cvtsi2sd	%rax, %xmm0
    00001e9e: 	divsd	DATAat0x24890(%rip), %xmm0
    00001ea6: 	callq	_Z13record_resultdPKc # Offset: 7846
    00001eab: 	movq	-0x3ee0(%rbp), %rdi
    00001eb2: 	leaq	-0x3ed0(%rbp), %rax
    00001eb9: 	movq	%rax, -0x4018(%rbp)
    00001ec0: 	cmpq	%rax, %rdi
    00001ec3: 	je	.Ltmp2450 # Offset: 7875
    00001ec5: 	movq	-0x3ed0(%rbp), %rax
    00001ecc: 	leaq	0x1(%rax), %rsi
    00001ed0: 	callq	_ZdlPvm@PLT # Offset: 7888
.Ltmp2450:
    00001ed5: 	movq	-0x4010(%rbp), %rdi
    00001edc: 	leaq	DATAat0x247d0(%rip), %rdx
    00001ee3: 	movq	%r15, %rsi
    00001ee6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7910
    00001eeb: 	movq	-0x3f98(%rbp), %rax
    00001ef2: 	movq	-0x3fa0(%rbp), %r14
    00001ef9: 	movq	%rax, -0x3ff0(%rbp)
    00001f00: 	callq	clock@PLT # Offset: 7936
    00001f05: 	movl	iterations(%rip), %r8d
    00001f0c: 	movq	%rax, start_time(%rip)
    00001f13: 	testl	%r8d, %r8d
    00001f16: 	jle	.Ltmp2451 # Offset: 7958
    00001f1c: 	movq	-0x3fe8(%rbp), %rsi
    00001f23: 	leaq	0x2(%r14), %rax
    00001f27: 	leaq	0x2(%r13), %rdx
    00001f2b: 	movl	$0x0, -0x4020(%rbp)
    00001f35: 	movq	%rax, -0x4028(%rbp)
    00001f3c: 	leaq	-0x2(%rsi), %rax
    00001f40: 	movq	%rax, %rbx
    00001f43: 	movq	%r14, %rax
    00001f46: 	subq	%rdx, %rax
    00001f49: 	subq	%r13, %rbx
    00001f4c: 	cmpq	$0xc, %rax
    00001f50: 	movq	%rbx, -0x4068(%rbp)
    00001f57: 	seta	%dl
    00001f5a: 	cmpq	$0x4, %rbx
    00001f5e: 	seta	%al
    00001f61: 	shrq	%rbx
    00001f64: 	subq	%r13, %rsi
    00001f67: 	leaq	0x1(%rbx), %rdi
    00001f6b: 	andl	%eax, %edx
    00001f6d: 	movq	%rbx, -0x4058(%rbp)
    00001f74: 	movq	%rdi, %rax
    00001f77: 	movq	%rdi, -0x4060(%rbp)
    00001f7e: 	andq	$-0x8, %rdi
    00001f82: 	shrq	$0x3, %rax
    00001f86: 	movq	%rdi, -0x4050(%rbp)
    00001f8d: 	shlq	$0x4, %rax
    00001f91: 	movb	%dl, -0x4030(%rbp)
    00001f97: 	movq	%rax, %rbx
    00001f9a: 	leaq	(%rdi,%rdi), %rax
    00001f9e: 	movq	%rsi, -0x4070(%rbp)
    00001fa5: 	leaq	(%r13,%rax), %rdi
    00001faa: 	addq	%r14, %rax
    00001fad: 	movq	%rdi, -0x4040(%rbp)
    00001fb4: 	movq	%rax, -0x4038(%rbp)
.Ltmp2466:
    00001fbb: 	cmpq	%r13, -0x3fe8(%rbp)
    00001fc2: 	je	.Ltmp2452 # Offset: 8130
    00001fc8: 	cmpb	$0x0, -0x4030(%rbp)
    00001fcf: 	je	.Ltmp2453 # Offset: 8143
    00001fd5: 	cmpq	$0xc, -0x4068(%rbp)
    00001fdd: 	jbe	.Ltmp2454 # Offset: 8157
    00001fe3: 	movq	-0x3fd8(%rbp), %rdi
    00001fea: 	xorl	%eax, %eax
    00001fec: 	nopl	(%rax) # Size: 4
.Ltmp2455:
    00001ff0: 	movdqu	(%r13,%rax), %xmm1
    00001ff7: 	movups	%xmm1, (%r14,%rax)
    00001ffc: 	addq	$0x10, %rax
    00002000: 	cmpq	%rax, %rbx
    00002003: 	jne	.Ltmp2455 # Offset: 8195
    00002005: 	movq	%rdi, -0x3fd8(%rbp)
    0000200c: 	movq	-0x4050(%rbp), %rax
    00002013: 	movq	-0x4060(%rbp), %rdi
    0000201a: 	cmpq	%rdi, %rax
    0000201d: 	je	.Ltmp2452 # Offset: 8221
    0000201f: 	movq	%rax, %rcx
    00002022: 	movq	-0x4038(%rbp), %rdx
    00002029: 	movq	-0x4040(%rbp), %rax
.Ltmp2640:
    00002030: 	movq	-0x4058(%rbp), %rsi
    00002037: 	subq	%rcx, %rsi
    0000203a: 	leaq	0x1(%rsi), %rdi
    0000203e: 	cmpq	$0x2, %rsi
    00002042: 	jbe	.Ltmp2456 # Offset: 8258
    00002044: 	movq	(%r13,%rcx,2), %rsi
    00002049: 	movq	%rsi, (%r14,%rcx,2)
    0000204d: 	movq	%rdi, %rcx
    00002050: 	andq	$-0x4, %rcx
    00002054: 	leaq	(%rcx,%rcx), %rsi
    00002058: 	addq	%rsi, %rax
    0000205b: 	addq	%rsi, %rdx
    0000205e: 	cmpq	%rdi, %rcx
    00002061: 	je	.Ltmp2452 # Offset: 8289
.Ltmp2456:
    00002063: 	movzwl	(%rax), %ecx
    00002066: 	movq	-0x3fe8(%rbp), %rdi
    0000206d: 	movw	%cx, (%rdx)
    00002070: 	leaq	0x2(%rax), %rcx
    00002074: 	cmpq	%rcx, %rdi
    00002077: 	je	.Ltmp2452 # Offset: 8311
    00002079: 	movzwl	0x2(%rax), %ecx
    0000207d: 	movw	%cx, 0x2(%rdx)
    00002081: 	leaq	0x4(%rax), %rcx
    00002085: 	cmpq	%rcx, %rdi
    00002088: 	je	.Ltmp2452 # Offset: 8328
    0000208a: 	movzwl	0x4(%rax), %eax
    0000208e: 	movw	%ax, 0x4(%rdx)
.Ltmp2452:
    00002092: 	cmpq	-0x3ff0(%rbp), %r14
    00002099: 	je	.Ltmp2457 # Offset: 8345
    0000209b: 	movq	-0x3ff0(%rbp), %r9
    000020a2: 	movq	-0x4028(%rbp), %rax
    000020a9: 	cmpq	%rax, %r9
    000020ac: 	je	.Ltmp2457 # Offset: 8364
    000020ae: 	movq	-0x3fd8(%rbp), %rcx
    000020b5: 	movq	%rax, %rdi
    000020b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2462:
    000020c0: 	movzwl	(%rdi), %esi
    000020c3: 	movq	%rdi, %rax
    000020c6: 	cmpq	%rdi, %r14
    000020c9: 	je	.Ltmp2458 # Offset: 8393
    000020cf: 	movq	%rcx, %r11
    000020d2: 	jmp	.Ltmp2459 # Offset: 8402
    000020d4: 	nopl	(%rax) # Size: 4
.Ltmp2461:
    000020d8: 	movw	%cx, 0x2(%rax)
    000020dc: 	cmpq	%rax, %r14
    000020df: 	je	.Ltmp2460 # Offset: 8415
.Ltmp2459:
    000020e5: 	movq	%rax, %rdx
    000020e8: 	leaq	-0x2(%rax), %rax
    000020ec: 	movzwl	-0x2(%rdx), %ecx
    000020f0: 	cmpw	%cx, %si
    000020f3: 	jb	.Ltmp2461 # Offset: 8435
    000020f5: 	movq	%r11, %rcx
.Ltmp2487:
    000020f8: 	addq	$0x2, %rdi
    000020fc: 	movw	%si, (%rdx)
    000020ff: 	cmpq	%r9, %rdi
    00002102: 	jne	.Ltmp2462 # Offset: 8450
    00002104: 	movq	%rcx, -0x3fd8(%rbp)
.Ltmp2457:
    0000210b: 	movq	-0x4028(%rbp), %rax
    00002112: 	movq	-0x3ff0(%rbp), %rcx
    00002119: 	movq	-0x3fd8(%rbp), %rsi
    00002120: 	jmp	.Ltmp2463 # Offset: 8480
    00002122: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2465:
    00002128: 	addq	$0x2, %rax
    0000212c: 	movzwl	-0x4(%rax), %edi
    00002130: 	cmpw	%di, (%rdx)
    00002133: 	jb	.Ltmp2464 # Offset: 8499
.Ltmp2463:
    00002139: 	movq	%rax, %rdx
    0000213c: 	cmpq	%rax, %rcx
    0000213f: 	jne	.Ltmp2465 # Offset: 8511
    00002141: 	movq	%rsi, -0x3fd8(%rbp)
.Ltmp2606:
    00002148: 	addl	$0x1, -0x4020(%rbp)
    0000214f: 	movl	-0x4020(%rbp), %eax
    00002155: 	cmpl	%r8d, %eax
    00002158: 	jl	.Ltmp2466 # Offset: 8536
.Ltmp2451:
    0000215e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00002165: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000216c: 	subq	$0x20, %rax
    00002170: 	cmpq	%rax, %rbx
    00002173: 	je	.Ltmp2467 # Offset: 8563
    00002179: 	leaq	0x10(%rbx), %rdi
    0000217d: 	movq	-0x3ed8(%rbp), %rcx
    00002184: 	movq	%rdi, (%rbx)
    00002187: 	movq	-0x3ee0(%rbp), %rax
    0000218e: 	movq	%rcx, -0x4020(%rbp)
    00002195: 	movq	%rax, -0x4028(%rbp)
    0000219c: 	movq	%rax, %rsi
    0000219f: 	addq	%rcx, %rax
    000021a2: 	je	.Ltmp2468 # Offset: 8610
    000021a4: 	testq	%rsi, %rsi
    000021a7: 	je	.Ltmp2469 # Offset: 8615
.Ltmp2468:
    000021ad: 	movq	-0x4020(%rbp), %rax
    000021b4: 	movq	%rax, -0x3fc8(%rbp)
    000021bb: 	cmpq	$0xf, %rax
    000021bf: 	ja	.Ltmp2470 # Offset: 8639
    000021c5: 	cmpq	$0x1, -0x4020(%rbp)
    000021cd: 	jne	.Ltmp2471 # Offset: 8653
    000021d3: 	movq	-0x4028(%rbp), %rax
    000021da: 	movzbl	(%rax), %eax
    000021dd: 	movb	%al, 0x10(%rbx)
.Ltmp2645:
    000021e0: 	movq	-0x4020(%rbp), %rax
    000021e7: 	movq	%rax, 0x8(%rbx)
    000021eb: 	movb	$0x0, (%rdi,%rax)
    000021ef: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000021f6: 	addq	$0x20, %rax
    000021fa: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2648:
    00002201: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00002208: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000220f: 	je	.Ltmp2472 # Offset: 8719
.Ltmp2644:
    00002215: 	movq	-0x20(%rax), %rbx
    00002219: 	callq	clock@PLT # Offset: 8729
    0000221e: 	pxor	%xmm0, %xmm0
    00002222: 	movq	%rax, end_time(%rip)
    00002229: 	movq	%rbx, %rdi
    0000222c: 	subq	start_time(%rip), %rax
    00002233: 	cvtsi2sd	%rax, %xmm0
    00002238: 	divsd	DATAat0x24890(%rip), %xmm0
    00002240: 	callq	_Z13record_resultdPKc # Offset: 8768
    00002245: 	movq	-0x3ee0(%rbp), %rdi
    0000224c: 	cmpq	-0x4018(%rbp), %rdi
    00002253: 	je	.Ltmp2473 # Offset: 8787
    00002255: 	movq	-0x3ed0(%rbp), %rax
    0000225c: 	leaq	0x1(%rax), %rsi
    00002260: 	callq	_ZdlPvm@PLT # Offset: 8800
.Ltmp2473:
    00002265: 	movq	-0x4010(%rbp), %rdi
    0000226c: 	leaq	DATAat0x246b3(%rip), %rdx
    00002273: 	movq	%r15, %rsi
    00002276: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8822
    0000227b: 	callq	clock@PLT # Offset: 8827
    00002280: 	movl	iterations(%rip), %edx
    00002286: 	leaq	-0x40(%rbp), %rbx
    0000228a: 	movl	$0x0, -0x4028(%rbp)
    00002294: 	movq	%rax, start_time(%rip)
    0000229b: 	leaq	-0xfde(%rbp), %rax
    000022a2: 	movq	%rax, -0x4020(%rbp)
    000022a9: 	leaq	-0xfe0(%rbp), %rax
    000022b0: 	movq	%rax, -0x4038(%rbp)
    000022b7: 	testl	%edx, %edx
    000022b9: 	jle	.Ltmp2474 # Offset: 8889
.Ltmp2490:
    000022bf: 	movq	-0x3fd8(%rbp), %rdi
    000022c6: 	movq	-0x3fe0(%rbp), %rsi
    000022cd: 	movl	$0x1f4, %ecx
    000022d2: 	movq	%rbx, -0x3fd8(%rbp)
    000022d9: 	rep		movsq	(%rsi), %es:(%rdi)
    000022dc: 	movq	-0x4038(%rbp), %r9
    000022e3: 	movq	%r9, -0x4030(%rbp)
.Ltmp2486:
    000022ea: 	movq	-0x3fd8(%rbp), %rdi
    000022f1: 	movzwl	(%r9), %esi
    000022f5: 	movq	%r9, %rax
    000022f8: 	movq	%rdi, %rbx
    000022fb: 	movq	%rdi, %r10
    000022fe: 	nop # Size: 2
.Ltmp2479:
    00002300: 	movzwl	-0x2(%rbx), %edi
    00002304: 	leaq	-0x2(%rbx), %rcx
    00002308: 	cmpw	%di, %si
    0000230b: 	jb	.Ltmp2475 # Offset: 8971
    0000230d: 	cmpq	%rax, %rcx
    00002310: 	jbe	.Ltmp2476 # Offset: 8976
    00002316: 	movzwl	(%rax), %edx
    00002319: 	cmpw	%si, %dx
    0000231c: 	jae	.Ltmp2477 # Offset: 8988
    0000231e: 	nop # Size: 2
.Ltmp2478:
    00002320: 	movzwl	0x2(%rax), %edx
    00002324: 	addq	$0x2, %rax
    00002328: 	cmpw	%dx, %si
    0000232b: 	ja	.Ltmp2478 # Offset: 9003
    0000232d: 	cmpq	%rax, %rcx
    00002330: 	jbe	.Ltmp2476 # Offset: 9008
.Ltmp2477:
    00002336: 	movw	%dx, (%rcx)
    00002339: 	movw	%di, (%rax)
.Ltmp2475:
    0000233c: 	movq	%rcx, %rbx
    0000233f: 	jmp	.Ltmp2479 # Offset: 9023
    00002341: 	nopl	(%rax) # Size: 7
.Ltmp2335:
    00002348: 	addq	$0x20, %r15
    0000234c: 	cmpq	%rbx, %r15
    0000234f: 	jne	.Ltmp2336 # Offset: 9039
    00002355: 	addq	$0x8, %r14
    00002359: 	cmpq	%r14, -0x3fe0(%rbp)
    00002360: 	ja	.Ltmp2337 # Offset: 9056
    00002366: 	jmp	.Ltmp2480 # Offset: 9062
    0000236b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2424:
    00002370: 	movq	%r11, %rcx
    00002373: 	jmp	.Ltmp2481 # Offset: 9075
.Ltmp2427:
    00002378: 	movq	-0x1f80(%rbp), %rdx
    0000237f: 	movq	%rdi, -0x3fd8(%rbp)
    00002386: 	leaq	DATAat0x246f4(%rip), %rsi
    0000238d: 	movl	$0x1, %edi
    00002392: 	xorl	%eax, %eax
    00002394: 	callq	__printf_chk@PLT # Offset: 9108
    00002399: 	movl	iterations(%rip), %r8d
    000023a0: 	jmp	.Ltmp2482 # Offset: 9120
.Ltmp2433:
    000023a5: 	leaq	-0x3fc8(%rbp), %rsi
    000023ac: 	xorl	%edx, %edx
    000023ae: 	movq	%rbx, %rdi
    000023b1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9137
    000023b6: 	movq	%rax, (%rbx)
    000023b9: 	movq	%rax, %rdi
    000023bc: 	movq	-0x3fc8(%rbp), %rax
    000023c3: 	movq	%rax, 0x10(%rbx)
.Ltmp2675:
    000023c7: 	movq	-0x3ff0(%rbp), %rsi
    000023ce: 	movq	%r14, %rdx
    000023d1: 	callq	memcpy@PLT # Offset: 9169
    000023d6: 	movq	-0x3fc8(%rbp), %r14
    000023dd: 	movq	(%rbx), %rdi
    000023e0: 	jmp	.Ltmp2483 # Offset: 9184
    000023e5: 	nopl	(%rax) # Size: 3
.Ltmp2438:
    000023e8: 	movq	%r11, %rcx
    000023eb: 	jmp	.Ltmp2484 # Offset: 9195
.Ltmp2476:
    000023f0: 	movq	%rbx, %rsi
    000023f3: 	movq	%r9, %rdi
    000023f6: 	movq	%r10, -0x3fd8(%rbp)
    000023fd: 	callq	_ZN9benchmark9quicksortIPtEEvT_S2_ # Offset: 9213
    00002402: 	movq	-0x3fd8(%rbp), %rax
    00002409: 	subq	%rbx, %rax
    0000240c: 	cmpq	$0x2, %rax
    00002410: 	jle	.Ltmp2485 # Offset: 9232
    00002412: 	movq	%rbx, %r9
    00002415: 	jmp	.Ltmp2486 # Offset: 9237
    0000241a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2460:
    00002420: 	movq	%r11, %rcx
    00002423: 	movq	%r14, %rdx
    00002426: 	jmp	.Ltmp2487 # Offset: 9254
.Ltmp2485:
    0000242b: 	movq	-0x3fd8(%rbp), %rbx
    00002432: 	movq	-0x4030(%rbp), %rdi
    00002439: 	movzwl	-0xfe0(%rbp), %edx
    00002440: 	movq	-0x4020(%rbp), %rax
    00002447: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2489:
    00002450: 	addq	$0x2, %rax
    00002454: 	movl	%edx, %ecx
    00002456: 	movzwl	-0x2(%rax), %edx
    0000245a: 	cmpw	%cx, %dx
    0000245d: 	jb	.Ltmp2488 # Offset: 9309
    00002463: 	cmpq	%rbx, %rax
    00002466: 	jne	.Ltmp2489 # Offset: 9318
    00002468: 	movq	%rdi, -0x3fd8(%rbp)
.Ltmp2611:
    0000246f: 	addl	$0x1, -0x4028(%rbp)
    00002476: 	movl	-0x4028(%rbp), %eax
    0000247c: 	cmpl	iterations(%rip), %eax
    00002482: 	jl	.Ltmp2490 # Offset: 9346
.Ltmp2474:
    00002488: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000248f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00002496: 	subq	$0x20, %rax
    0000249a: 	cmpq	%rax, %rbx
    0000249d: 	je	.Ltmp2491 # Offset: 9373
    000024a3: 	leaq	0x10(%rbx), %rdi
    000024a7: 	movq	-0x3ed8(%rbp), %rcx
    000024ae: 	movq	%rdi, (%rbx)
    000024b1: 	movq	-0x3ee0(%rbp), %rax
    000024b8: 	movq	%rcx, -0x4020(%rbp)
    000024bf: 	movq	%rax, -0x4028(%rbp)
    000024c6: 	movq	%rax, %rsi
    000024c9: 	addq	%rcx, %rax
    000024cc: 	je	.Ltmp2492 # Offset: 9420
    000024ce: 	testq	%rsi, %rsi
    000024d1: 	je	.Ltmp2493 # Offset: 9425
.Ltmp2492:
    000024d7: 	movq	-0x4020(%rbp), %rax
    000024de: 	movq	%rax, -0x3fc8(%rbp)
    000024e5: 	cmpq	$0xf, %rax
    000024e9: 	ja	.Ltmp2494 # Offset: 9449
    000024ef: 	cmpq	$0x1, -0x4020(%rbp)
    000024f7: 	jne	.Ltmp2495 # Offset: 9463
    000024fd: 	movq	-0x4028(%rbp), %rax
    00002504: 	movzbl	(%rax), %eax
    00002507: 	movb	%al, 0x10(%rbx)
.Ltmp2642:
    0000250a: 	movq	-0x4020(%rbp), %rax
    00002511: 	movq	%rax, 0x8(%rbx)
    00002515: 	movb	$0x0, (%rdi,%rax)
    00002519: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002520: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002527: 	addq	$0x20, %rax
    0000252b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00002532: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00002539: 	je	.Ltmp2496 # Offset: 9529
.Ltmp2643:
    0000253f: 	movq	-0x20(%rax), %rbx
    00002543: 	callq	clock@PLT # Offset: 9539
    00002548: 	pxor	%xmm0, %xmm0
    0000254c: 	movq	%rax, end_time(%rip)
    00002553: 	movq	%rbx, %rdi
    00002556: 	subq	start_time(%rip), %rax
    0000255d: 	cvtsi2sd	%rax, %xmm0
    00002562: 	divsd	DATAat0x24890(%rip), %xmm0
    0000256a: 	callq	_Z13record_resultdPKc # Offset: 9578
    0000256f: 	movq	-0x3ee0(%rbp), %rdi
    00002576: 	cmpq	-0x4018(%rbp), %rdi
    0000257d: 	je	.Ltmp2497 # Offset: 9597
    0000257f: 	movq	-0x3ed0(%rbp), %rax
    00002586: 	leaq	0x1(%rax), %rsi
    0000258a: 	callq	_ZdlPvm@PLT # Offset: 9610
.Ltmp2497:
    0000258f: 	movq	-0x4010(%rbp), %rdi
    00002596: 	leaq	DATAat0x247f8(%rip), %rdx
    0000259d: 	movq	%r15, %rsi
    000025a0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9632
    000025a5: 	callq	clock@PLT # Offset: 9637
    000025aa: 	movl	$0x0, -0x4028(%rbp)
    000025b4: 	movq	%rax, start_time(%rip)
    000025bb: 	leaq	-0x1f7e(%rbp), %rax
    000025c2: 	movq	%rax, -0x4020(%rbp)
    000025c9: 	leaq	-0x1f80(%rbp), %rax
    000025d0: 	movq	%rax, -0x4030(%rbp)
    000025d7: 	movl	iterations(%rip), %eax
    000025dd: 	testl	%eax, %eax
    000025df: 	jle	.Ltmp2498 # Offset: 9695
.Ltmp2508:
    000025e5: 	movq	%r12, %rdi
    000025e8: 	movq	-0x4000(%rbp), %rsi
    000025ef: 	movl	$0x1f4, %ecx
    000025f4: 	movq	-0x4030(%rbp), %r9
    000025fb: 	rep		movsq	(%rsi), %es:(%rdi)
    000025fe: 	movq	%r9, %r12
.Ltmp2505:
    00002601: 	movq	-0x3fd8(%rbp), %rdi
    00002608: 	movzwl	(%r9), %esi
    0000260c: 	movq	%r9, %rax
    0000260f: 	movq	%rdi, %rbx
    00002612: 	movq	%rdi, %r10
    00002615: 	nopl	(%rax) # Size: 3
.Ltmp2503:
    00002618: 	movzwl	-0x2(%rbx), %edi
    0000261c: 	leaq	-0x2(%rbx), %rcx
    00002620: 	cmpw	%di, %si
    00002623: 	jb	.Ltmp2499 # Offset: 9763
    00002625: 	cmpq	%rax, %rcx
    00002628: 	jbe	.Ltmp2500 # Offset: 9768
    0000262a: 	movzwl	(%rax), %edx
    0000262d: 	cmpw	%dx, %si
    00002630: 	jbe	.Ltmp2501 # Offset: 9776
    00002632: 	movq	%r10, %r11
    00002635: 	nopl	(%rax) # Size: 3
.Ltmp2502:
    00002638: 	movzwl	0x2(%rax), %edx
    0000263c: 	addq	$0x2, %rax
    00002640: 	cmpw	%dx, %si
    00002643: 	ja	.Ltmp2502 # Offset: 9795
    00002645: 	movq	%r11, %r10
    00002648: 	cmpq	%rax, %rcx
    0000264b: 	jbe	.Ltmp2500 # Offset: 9803
.Ltmp2501:
    0000264d: 	movw	%dx, (%rcx)
    00002650: 	movw	%di, (%rax)
.Ltmp2499:
    00002653: 	movq	%rcx, %rbx
    00002656: 	jmp	.Ltmp2503 # Offset: 9814
    00002658: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2500:
    00002660: 	movq	%rbx, %rsi
    00002663: 	movq	%r9, %rdi
    00002666: 	movq	%r10, -0x3fd8(%rbp)
    0000266d: 	callq	_ZN9benchmark9quicksortIPtEEvT_S2_ # Offset: 9837
    00002672: 	movq	-0x3fd8(%rbp), %rax
    00002679: 	subq	%rbx, %rax
    0000267c: 	cmpq	$0x2, %rax
    00002680: 	jle	.Ltmp2504 # Offset: 9856
    00002682: 	movq	%rbx, %r9
    00002685: 	jmp	.Ltmp2505 # Offset: 9861
.Ltmp2504:
    0000268a: 	movq	-0x3fd8(%rbp), %rbx
    00002691: 	movzwl	-0x1f80(%rbp), %edx
    00002698: 	movq	-0x4020(%rbp), %rax
    0000269f: 	movq	%rbx, %rdi
    000026a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2507:
    000026a8: 	addq	$0x2, %rax
    000026ac: 	movl	%edx, %ecx
    000026ae: 	movzwl	-0x2(%rax), %edx
    000026b2: 	cmpw	%cx, %dx
    000026b5: 	jb	.Ltmp2506 # Offset: 9909
    000026bb: 	cmpq	%rdi, %rax
    000026be: 	jne	.Ltmp2507 # Offset: 9918
    000026c0: 	movq	%rdi, -0x3fd8(%rbp)
.Ltmp2610:
    000026c7: 	addl	$0x1, -0x4028(%rbp)
    000026ce: 	movl	-0x4028(%rbp), %eax
    000026d4: 	cmpl	iterations(%rip), %eax
    000026da: 	jl	.Ltmp2508 # Offset: 9946
.Ltmp2498:
    000026e0: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000026e7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000026ee: 	subq	$0x20, %rax
    000026f2: 	cmpq	%rax, %rbx
    000026f5: 	je	.Ltmp2509 # Offset: 9973
    000026fb: 	leaq	0x10(%rbx), %rdi
    000026ff: 	movq	-0x3ed8(%rbp), %rcx
    00002706: 	movq	%rdi, (%rbx)
    00002709: 	movq	-0x3ee0(%rbp), %rax
    00002710: 	movq	%rcx, -0x4020(%rbp)
    00002717: 	movq	%rax, -0x4028(%rbp)
    0000271e: 	movq	%rax, %rsi
    00002721: 	addq	%rcx, %rax
    00002724: 	je	.Ltmp2510 # Offset: 10020
    00002726: 	testq	%rsi, %rsi
    00002729: 	je	.Ltmp2511 # Offset: 10025
.Ltmp2510:
    0000272f: 	movq	-0x4020(%rbp), %rax
    00002736: 	movq	%rax, -0x3fc8(%rbp)
    0000273d: 	cmpq	$0xf, %rax
    00002741: 	ja	.Ltmp2512 # Offset: 10049
    00002747: 	cmpq	$0x1, -0x4020(%rbp)
    0000274f: 	jne	.Ltmp2513 # Offset: 10063
    00002755: 	movq	-0x4028(%rbp), %rax
    0000275c: 	movzbl	(%rax), %eax
    0000275f: 	movb	%al, 0x10(%rbx)
.Ltmp2668:
    00002762: 	movq	-0x4020(%rbp), %rax
    00002769: 	movq	%rax, 0x8(%rbx)
    0000276d: 	movb	$0x0, (%rdi,%rax)
    00002771: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002778: 	addq	$0x20, %rax
    0000277c: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2672:
    00002783: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000278a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002791: 	je	.Ltmp2514 # Offset: 10129
.Ltmp2667:
    00002797: 	movq	-0x20(%rax), %rbx
    0000279b: 	callq	clock@PLT # Offset: 10139
    000027a0: 	pxor	%xmm0, %xmm0
    000027a4: 	movq	%rax, end_time(%rip)
    000027ab: 	movq	%rbx, %rdi
    000027ae: 	subq	start_time(%rip), %rax
    000027b5: 	cvtsi2sd	%rax, %xmm0
    000027ba: 	divsd	DATAat0x24890(%rip), %xmm0
    000027c2: 	callq	_Z13record_resultdPKc # Offset: 10178
    000027c7: 	movq	-0x3ee0(%rbp), %rdi
    000027ce: 	cmpq	-0x4018(%rbp), %rdi
    000027d5: 	je	.Ltmp2515 # Offset: 10197
    000027d7: 	movq	-0x3ed0(%rbp), %rax
    000027de: 	leaq	0x1(%rax), %rsi
    000027e2: 	callq	_ZdlPvm@PLT # Offset: 10210
.Ltmp2515:
    000027e7: 	movq	-0x4010(%rbp), %rdi
    000027ee: 	leaq	DATAat0x24818(%rip), %rdx
    000027f5: 	movq	%r15, %rsi
    000027f8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10232
    000027fd: 	callq	clock@PLT # Offset: 10237
    00002802: 	movq	%rax, start_time(%rip)
    00002809: 	movl	iterations(%rip), %eax
    0000280f: 	movl	%eax, -0x4028(%rbp)
    00002815: 	testl	%eax, %eax
    00002817: 	jle	.Ltmp2516 # Offset: 10263
    0000281d: 	movq	-0x3ff0(%rbp), %rax
    00002824: 	leaq	0x2(%r13), %rdx
    00002828: 	movl	$0x0, -0x4020(%rbp)
    00002832: 	subq	%r14, %rax
    00002835: 	movq	%rax, -0x4030(%rbp)
    0000283c: 	leaq	0x2(%r14), %rax
    00002840: 	movq	%rax, -0x4040(%rbp)
    00002847: 	movq	-0x3fe8(%rbp), %rax
    0000284e: 	subq	$0x2, %rax
    00002852: 	movq	%rax, %rbx
    00002855: 	movq	%r14, %rax
    00002858: 	subq	%rdx, %rax
    0000285b: 	subq	%r13, %rbx
    0000285e: 	cmpq	$0xc, %rax
    00002862: 	movq	%rbx, -0x4078(%rbp)
    00002869: 	seta	%dl
    0000286c: 	cmpq	$0x4, %rbx
    00002870: 	seta	%al
    00002873: 	shrq	%rbx
    00002876: 	leaq	0x1(%rbx), %rdi
    0000287a: 	andl	%eax, %edx
    0000287c: 	movq	%rbx, -0x4068(%rbp)
    00002883: 	movq	%rdi, %rax
    00002886: 	movq	%rdi, -0x4070(%rbp)
    0000288d: 	andq	$-0x8, %rdi
    00002891: 	shrq	$0x3, %rax
    00002895: 	movq	%rdi, -0x4060(%rbp)
    0000289c: 	shlq	$0x4, %rax
    000028a0: 	movb	%dl, -0x4038(%rbp)
    000028a6: 	movq	%rax, %rbx
    000028a9: 	leaq	(%rdi,%rdi), %rax
    000028ad: 	leaq	(%r13,%rax), %rdi
    000028b2: 	addq	%r14, %rax
    000028b5: 	movq	%rdi, -0x4058(%rbp)
    000028bc: 	movq	%rax, -0x4050(%rbp)
.Ltmp2531:
    000028c3: 	cmpq	%r13, -0x3fe8(%rbp)
    000028ca: 	je	.Ltmp2517 # Offset: 10442
    000028d0: 	cmpb	$0x0, -0x4038(%rbp)
    000028d7: 	je	.Ltmp2518 # Offset: 10455
    000028dd: 	cmpq	$0xc, -0x4078(%rbp)
    000028e5: 	jbe	.Ltmp2519 # Offset: 10469
    000028eb: 	movq	-0x3fd8(%rbp), %rdi
    000028f2: 	xorl	%eax, %eax
    000028f4: 	nopl	(%rax) # Size: 4
.Ltmp2520:
    000028f8: 	movdqu	(%r13,%rax), %xmm2
    000028ff: 	movups	%xmm2, (%r14,%rax)
    00002904: 	addq	$0x10, %rax
    00002908: 	cmpq	%rax, %rbx
    0000290b: 	jne	.Ltmp2520 # Offset: 10507
    0000290d: 	movq	%rdi, -0x3fd8(%rbp)
    00002914: 	movq	-0x4060(%rbp), %rax
    0000291b: 	movq	-0x4070(%rbp), %rdi
    00002922: 	cmpq	%rdi, %rax
    00002925: 	je	.Ltmp2517 # Offset: 10533
    00002927: 	movq	%rax, %rcx
    0000292a: 	movq	-0x4050(%rbp), %rdx
    00002931: 	movq	-0x4058(%rbp), %rax
.Ltmp2639:
    00002938: 	movq	-0x4068(%rbp), %rsi
    0000293f: 	subq	%rcx, %rsi
    00002942: 	leaq	0x1(%rsi), %rdi
    00002946: 	cmpq	$0x2, %rsi
    0000294a: 	jbe	.Ltmp2521 # Offset: 10570
    0000294c: 	movq	(%r13,%rcx,2), %rsi
    00002951: 	movq	%rsi, (%r14,%rcx,2)
    00002955: 	movq	%rdi, %rcx
    00002958: 	andq	$-0x4, %rcx
    0000295c: 	leaq	(%rcx,%rcx), %rsi
    00002960: 	addq	%rsi, %rax
    00002963: 	addq	%rsi, %rdx
    00002966: 	cmpq	%rdi, %rcx
    00002969: 	je	.Ltmp2517 # Offset: 10601
.Ltmp2521:
    0000296b: 	movzwl	(%rax), %ecx
    0000296e: 	movq	-0x3fe8(%rbp), %rdi
    00002975: 	movw	%cx, (%rdx)
    00002978: 	leaq	0x2(%rax), %rcx
    0000297c: 	cmpq	%rcx, %rdi
    0000297f: 	je	.Ltmp2517 # Offset: 10623
    00002981: 	movzwl	0x2(%rax), %ecx
    00002985: 	movw	%cx, 0x2(%rdx)
    00002989: 	leaq	0x4(%rax), %rcx
    0000298d: 	cmpq	%rcx, %rdi
    00002990: 	je	.Ltmp2517 # Offset: 10640
    00002992: 	movzwl	0x4(%rax), %eax
    00002996: 	movw	%ax, 0x4(%rdx)
.Ltmp2517:
    0000299a: 	cmpq	$0x2, -0x4030(%rbp)
    000029a2: 	jle	.Ltmp2522 # Offset: 10658
    000029a8: 	movzwl	(%r14), %esi
    000029ac: 	movq	-0x3ff0(%rbp), %r8
    000029b3: 	movq	%r14, %rdx
    000029b6: 	movq	-0x3fd8(%rbp), %r11
    000029bd: 	nopl	(%rax) # Size: 3
.Ltmp2527:
    000029c0: 	movzwl	-0x2(%r8), %edi
    000029c5: 	leaq	-0x2(%r8), %r9
    000029c9: 	cmpw	%di, %si
    000029cc: 	jb	.Ltmp2523 # Offset: 10700
    000029ce: 	cmpq	%rdx, %r9
    000029d1: 	jbe	.Ltmp2524 # Offset: 10705
    000029d7: 	movzwl	(%rdx), %ecx
    000029da: 	cmpw	%cx, %si
    000029dd: 	jbe	.Ltmp2525 # Offset: 10717
    000029df: 	leaq	0x2(%rdx), %rax
    000029e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2526:
    000029e8: 	movq	%rax, %rdx
    000029eb: 	movzwl	(%rax), %ecx
    000029ee: 	leaq	0x2(%rax), %rax
    000029f2: 	cmpw	%cx, %si
    000029f5: 	ja	.Ltmp2526 # Offset: 10741
    000029f7: 	cmpq	%rdx, %r9
    000029fa: 	jbe	.Ltmp2524 # Offset: 10746
.Ltmp2525:
    00002a00: 	movw	%cx, (%r9)
    00002a04: 	movw	%di, (%rdx)
.Ltmp2523:
    00002a07: 	movq	%r9, %r8
    00002a0a: 	jmp	.Ltmp2527 # Offset: 10762
.Ltmp2621:
    00002a0c: 	movq	%r8, %rsi
    00002a0f: 	movq	%r10, %rdi
    00002a12: 	movq	%r11, -0x3fd8(%rbp)
    00002a19: 	movq	%r8, -0x4088(%rbp)
    00002a20: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEEvT_S8_ # Offset: 10784
    00002a25: 	movq	-0x3ff0(%rbp), %rsi
    00002a2c: 	movq	-0x4088(%rbp), %rdi
    00002a33: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEEvT_S8_ # Offset: 10803
.Ltmp2522:
    00002a38: 	movq	-0x4040(%rbp), %rax
    00002a3f: 	movq	-0x3ff0(%rbp), %rcx
    00002a46: 	movq	-0x3fd8(%rbp), %rsi
    00002a4d: 	jmp	.Ltmp2528 # Offset: 10829
    00002a4f: 	nop # Size: 1
.Ltmp2530:
    00002a50: 	addq	$0x2, %rax
    00002a54: 	movzwl	-0x4(%rax), %edi
    00002a58: 	cmpw	%di, (%rdx)
    00002a5b: 	jb	.Ltmp2529 # Offset: 10843
.Ltmp2528:
    00002a61: 	movq	%rax, %rdx
    00002a64: 	cmpq	%rcx, %rax
    00002a67: 	jne	.Ltmp2530 # Offset: 10855
    00002a69: 	movq	%rsi, -0x3fd8(%rbp)
.Ltmp2612:
    00002a70: 	addl	$0x1, -0x4020(%rbp)
    00002a77: 	movl	-0x4020(%rbp), %eax
    00002a7d: 	cmpl	-0x4028(%rbp), %eax
    00002a83: 	jl	.Ltmp2531 # Offset: 10883
.Ltmp2516:
    00002a89: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00002a90: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00002a97: 	subq	$0x20, %rax
    00002a9b: 	cmpq	%rax, %rbx
    00002a9e: 	je	.Ltmp2532 # Offset: 10910
    00002aa4: 	leaq	0x10(%rbx), %rdi
    00002aa8: 	movq	-0x3ed8(%rbp), %rcx
    00002aaf: 	movq	%rdi, (%rbx)
    00002ab2: 	movq	-0x3ee0(%rbp), %rax
    00002ab9: 	movq	%rcx, -0x4020(%rbp)
    00002ac0: 	movq	%rax, -0x4028(%rbp)
    00002ac7: 	movq	%rax, %rsi
    00002aca: 	addq	%rcx, %rax
    00002acd: 	je	.Ltmp2533 # Offset: 10957
    00002acf: 	testq	%rsi, %rsi
    00002ad2: 	je	.Ltmp2534 # Offset: 10962
.Ltmp2533:
    00002ad8: 	movq	-0x4020(%rbp), %rax
    00002adf: 	movq	%rax, -0x3fc8(%rbp)
    00002ae6: 	cmpq	$0xf, %rax
    00002aea: 	ja	.Ltmp2535 # Offset: 10986
    00002af0: 	cmpq	$0x1, -0x4020(%rbp)
    00002af8: 	jne	.Ltmp2536 # Offset: 11000
    00002afe: 	movq	-0x4028(%rbp), %rax
    00002b05: 	movzbl	(%rax), %eax
    00002b08: 	movb	%al, 0x10(%rbx)
.Ltmp2656:
    00002b0b: 	movq	-0x4020(%rbp), %rax
    00002b12: 	movq	%rax, 0x8(%rbx)
    00002b16: 	movb	$0x0, (%rdi,%rax)
    00002b1a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002b21: 	addq	$0x20, %rax
    00002b25: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2655:
    00002b2c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00002b33: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002b3a: 	je	.Ltmp2537 # Offset: 11066
.Ltmp2654:
    00002b40: 	movq	-0x20(%rax), %rbx
    00002b44: 	callq	clock@PLT # Offset: 11076
    00002b49: 	pxor	%xmm0, %xmm0
    00002b4d: 	movq	%rax, end_time(%rip)
    00002b54: 	movq	%rbx, %rdi
    00002b57: 	subq	start_time(%rip), %rax
    00002b5e: 	cvtsi2sd	%rax, %xmm0
    00002b63: 	divsd	DATAat0x24890(%rip), %xmm0
    00002b6b: 	callq	_Z13record_resultdPKc # Offset: 11115
    00002b70: 	movq	-0x3ee0(%rbp), %rdi
    00002b77: 	cmpq	-0x4018(%rbp), %rdi
    00002b7e: 	je	.Ltmp2538 # Offset: 11134
    00002b80: 	movq	-0x3ed0(%rbp), %rax
    00002b87: 	leaq	0x1(%rax), %rsi
    00002b8b: 	callq	_ZdlPvm@PLT # Offset: 11147
.Ltmp2538:
    00002b90: 	movq	-0x4010(%rbp), %rdi
    00002b97: 	leaq	DATAat0x246c7(%rip), %rdx
    00002b9e: 	movq	%r15, %rsi
    00002ba1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11169
    00002ba6: 	callq	clock@PLT # Offset: 11174
    00002bab: 	leaq	-0xfde(%rbp), %rbx
    00002bb2: 	movl	$0x0, -0x4028(%rbp)
    00002bbc: 	movq	%rax, start_time(%rip)
    00002bc3: 	movl	iterations(%rip), %eax
    00002bc9: 	movq	%rbx, -0x4020(%rbp)
    00002bd0: 	leaq	-0x40(%rbp), %rbx
    00002bd4: 	movl	%eax, -0x4030(%rbp)
    00002bda: 	movq	%rbx, -0x4038(%rbp)
    00002be1: 	testl	%eax, %eax
    00002be3: 	jle	.Ltmp2539 # Offset: 11235
.Ltmp2544:
    00002be9: 	movq	-0x3fd8(%rbp), %rdi
    00002bf0: 	movl	$0x1f4, %ecx
    00002bf5: 	movl	$0x3e7, %ebx
    00002bfa: 	movq	-0x3fe0(%rbp), %rsi
    00002c01: 	rep		movsq	(%rsi), %es:(%rdi)
    00002c04: 	nopl	(%rax) # Size: 4
.Ltmp2540:
    00002c08: 	movq	-0x3fd8(%rbp), %rsi
    00002c0f: 	movq	%rbx, %rdx
    00002c12: 	movl	$0x7d0, %edi
    00002c17: 	movzwl	(%rsi,%rbx,2), %ecx
    00002c1b: 	callq	_ZN9benchmark9__sift_inIPttEEvlT_lT0_ # Offset: 11291
    00002c20: 	subq	$0x1, %rbx
    00002c24: 	jae	.Ltmp2540 # Offset: 11300
    00002c26: 	movl	$0x7cf, %ebx
    00002c2b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2541:
    00002c30: 	movq	-0x3fd8(%rbp), %rsi
    00002c37: 	movzwl	-0xfe0(%rbp), %eax
    00002c3e: 	xorl	%edx, %edx
    00002c40: 	movq	%rbx, %rdi
    00002c43: 	movzwl	(%rsi,%rbx,2), %ecx
    00002c47: 	movw	%ax, (%rsi,%rbx,2)
    00002c4b: 	callq	_ZN9benchmark9__sift_inIPttEEvlT_lT0_ # Offset: 11339
    00002c50: 	subq	$0x1, %rbx
    00002c54: 	jne	.Ltmp2541 # Offset: 11348
    00002c56: 	movq	-0x3fd8(%rbp), %rbx
    00002c5d: 	movzwl	-0xfe0(%rbp), %edx
    00002c64: 	movq	-0x4020(%rbp), %rax
    00002c6b: 	movq	-0x4038(%rbp), %rsi
    00002c72: 	movq	%rbx, %rdi
    00002c75: 	nopl	(%rax) # Size: 3
.Ltmp2543:
    00002c78: 	addq	$0x2, %rax
    00002c7c: 	movl	%edx, %ecx
    00002c7e: 	movzwl	-0x2(%rax), %edx
    00002c82: 	cmpw	%cx, %dx
    00002c85: 	jb	.Ltmp2542 # Offset: 11397
    00002c8b: 	cmpq	%rsi, %rax
    00002c8e: 	jne	.Ltmp2543 # Offset: 11406
    00002c90: 	movq	%rdi, -0x3fd8(%rbp)
.Ltmp2608:
    00002c97: 	addl	$0x1, -0x4028(%rbp)
    00002c9e: 	movl	-0x4028(%rbp), %eax
    00002ca4: 	cmpl	-0x4030(%rbp), %eax
    00002caa: 	jl	.Ltmp2544 # Offset: 11434
.Ltmp2539:
    00002cb0: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00002cb7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00002cbe: 	subq	$0x20, %rax
    00002cc2: 	cmpq	%rax, %rbx
    00002cc5: 	je	.Ltmp2545 # Offset: 11461
    00002ccb: 	leaq	0x10(%rbx), %rdi
    00002ccf: 	movq	-0x3ed8(%rbp), %rcx
    00002cd6: 	movq	%rdi, (%rbx)
    00002cd9: 	movq	-0x3ee0(%rbp), %rax
    00002ce0: 	movq	%rcx, -0x3fe0(%rbp)
    00002ce7: 	movq	%rax, -0x4020(%rbp)
    00002cee: 	movq	%rax, %rsi
    00002cf1: 	addq	%rcx, %rax
    00002cf4: 	je	.Ltmp2546 # Offset: 11508
    00002cf6: 	testq	%rsi, %rsi
    00002cf9: 	je	.Ltmp2547 # Offset: 11513
.Ltmp2546:
    00002cff: 	movq	-0x3fe0(%rbp), %rax
    00002d06: 	movq	%rax, -0x3fc8(%rbp)
    00002d0d: 	cmpq	$0xf, %rax
    00002d11: 	ja	.Ltmp2548 # Offset: 11537
    00002d17: 	cmpq	$0x1, -0x3fe0(%rbp)
    00002d1f: 	jne	.Ltmp2549 # Offset: 11551
    00002d25: 	movq	-0x4020(%rbp), %rax
    00002d2c: 	movzbl	(%rax), %eax
    00002d2f: 	movb	%al, 0x10(%rbx)
.Ltmp2652:
    00002d32: 	movq	-0x3fe0(%rbp), %rax
    00002d39: 	movq	%rax, 0x8(%rbx)
    00002d3d: 	movb	$0x0, (%rdi,%rax)
    00002d41: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002d48: 	addq	$0x20, %rax
    00002d4c: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2661:
    00002d53: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00002d5a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002d61: 	je	.Ltmp2550 # Offset: 11617
.Ltmp2651:
    00002d67: 	movq	-0x20(%rax), %rbx
    00002d6b: 	callq	clock@PLT # Offset: 11627
    00002d70: 	pxor	%xmm0, %xmm0
    00002d74: 	movq	%rax, end_time(%rip)
    00002d7b: 	movq	%rbx, %rdi
    00002d7e: 	subq	start_time(%rip), %rax
    00002d85: 	cvtsi2sd	%rax, %xmm0
    00002d8a: 	divsd	DATAat0x24890(%rip), %xmm0
    00002d92: 	callq	_Z13record_resultdPKc # Offset: 11666
    00002d97: 	movq	-0x3ee0(%rbp), %rdi
    00002d9e: 	cmpq	-0x4018(%rbp), %rdi
    00002da5: 	je	.Ltmp2551 # Offset: 11685
    00002da7: 	movq	-0x3ed0(%rbp), %rax
    00002dae: 	leaq	0x1(%rax), %rsi
    00002db2: 	callq	_ZdlPvm@PLT # Offset: 11698
.Ltmp2551:
    00002db7: 	movq	-0x4010(%rbp), %rdi
    00002dbe: 	leaq	DATAat0x24840(%rip), %rdx
    00002dc5: 	movq	%r15, %rsi
    00002dc8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11720
    00002dcd: 	callq	clock@PLT # Offset: 11725
    00002dd2: 	leaq	-0x1f7e(%rbp), %rbx
    00002dd9: 	movl	$0x0, -0x3fe0(%rbp)
    00002de3: 	movq	%rax, start_time(%rip)
    00002dea: 	movl	iterations(%rip), %eax
    00002df0: 	movq	%rbx, -0x4020(%rbp)
    00002df7: 	movl	%eax, -0x4028(%rbp)
    00002dfd: 	testl	%eax, %eax
    00002dff: 	jle	.Ltmp2552 # Offset: 11775
.Ltmp2557:
    00002e05: 	movq	-0x4000(%rbp), %rsi
    00002e0c: 	movl	$0x1f4, %ecx
    00002e11: 	movq	%r12, %rdi
    00002e14: 	movl	$0x3e7, %ebx
    00002e19: 	rep		movsq	(%rsi), %es:(%rdi)
    00002e1c: 	nopl	(%rax) # Size: 4
.Ltmp2553:
    00002e20: 	movzwl	(%r12,%rbx,2), %ecx
    00002e25: 	movq	%rbx, %rdx
    00002e28: 	movq	%r12, %rsi
    00002e2b: 	movl	$0x7d0, %edi
    00002e30: 	callq	_ZN9benchmark9__sift_inIPttEEvlT_lT0_ # Offset: 11824
    00002e35: 	subq	$0x1, %rbx
    00002e39: 	jae	.Ltmp2553 # Offset: 11833
    00002e3b: 	movl	$0x7cf, %ebx
.Ltmp2554:
    00002e40: 	movzwl	-0x1f80(%rbp), %eax
    00002e47: 	xorl	%edx, %edx
    00002e49: 	movq	%rbx, %rdi
    00002e4c: 	movq	%r12, %rsi
    00002e4f: 	movzwl	(%r12,%rbx,2), %ecx
    00002e54: 	movw	%ax, (%r12,%rbx,2)
    00002e59: 	callq	_ZN9benchmark9__sift_inIPttEEvlT_lT0_ # Offset: 11865
    00002e5e: 	subq	$0x1, %rbx
    00002e62: 	jne	.Ltmp2554 # Offset: 11874
    00002e64: 	movq	-0x3fd8(%rbp), %rbx
    00002e6b: 	movzwl	-0x1f80(%rbp), %edx
    00002e72: 	movq	-0x4020(%rbp), %rax
    00002e79: 	movq	%rbx, %rdi
    00002e7c: 	nopl	(%rax) # Size: 4
.Ltmp2556:
    00002e80: 	addq	$0x2, %rax
    00002e84: 	movl	%edx, %ecx
    00002e86: 	movzwl	-0x2(%rax), %edx
    00002e8a: 	cmpw	%cx, %dx
    00002e8d: 	jb	.Ltmp2555 # Offset: 11917
    00002e93: 	cmpq	%rdi, %rax
    00002e96: 	jne	.Ltmp2556 # Offset: 11926
    00002e98: 	movq	%rdi, -0x3fd8(%rbp)
.Ltmp2607:
    00002e9f: 	addl	$0x1, -0x3fe0(%rbp)
    00002ea6: 	movl	-0x3fe0(%rbp), %eax
    00002eac: 	cmpl	-0x4028(%rbp), %eax
    00002eb2: 	jl	.Ltmp2557 # Offset: 11954
.Ltmp2552:
    00002eb8: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00002ebf: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00002ec6: 	subq	$0x20, %rax
    00002eca: 	cmpq	%rax, %rbx
    00002ecd: 	je	.Ltmp2558 # Offset: 11981
    00002ed3: 	leaq	0x10(%rbx), %rdi
    00002ed7: 	movq	-0x3ed8(%rbp), %r12
    00002ede: 	movq	%rdi, (%rbx)
    00002ee1: 	movq	-0x3ee0(%rbp), %rax
    00002ee8: 	movq	%rax, -0x3fd8(%rbp)
    00002eef: 	movq	%rax, %rsi
    00002ef2: 	addq	%r12, %rax
    00002ef5: 	je	.Ltmp2559 # Offset: 12021
    00002ef7: 	testq	%rsi, %rsi
    00002efa: 	je	.Ltmp2560 # Offset: 12026
.Ltmp2559:
    00002f00: 	movq	%r12, -0x3fc8(%rbp)
    00002f07: 	cmpq	$0xf, %r12
    00002f0b: 	ja	.Ltmp2561 # Offset: 12043
    00002f11: 	cmpq	$0x1, %r12
    00002f15: 	jne	.Ltmp2562 # Offset: 12053
    00002f1b: 	movq	-0x3fd8(%rbp), %rax
    00002f22: 	movzbl	(%rax), %eax
    00002f25: 	movb	%al, 0x10(%rbx)
.Ltmp2671:
    00002f28: 	movq	%r12, 0x8(%rbx)
    00002f2c: 	movb	$0x0, (%rdi,%r12)
    00002f31: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002f38: 	addq	$0x20, %rax
    00002f3c: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2674:
    00002f43: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00002f4a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002f51: 	je	.Ltmp2563 # Offset: 12113
.Ltmp2670:
    00002f57: 	movq	-0x20(%rax), %rbx
    00002f5b: 	callq	clock@PLT # Offset: 12123
    00002f60: 	pxor	%xmm0, %xmm0
    00002f64: 	movq	%rax, end_time(%rip)
    00002f6b: 	movq	%rbx, %rdi
    00002f6e: 	subq	start_time(%rip), %rax
    00002f75: 	cvtsi2sd	%rax, %xmm0
    00002f7a: 	divsd	DATAat0x24890(%rip), %xmm0
    00002f82: 	callq	_Z13record_resultdPKc # Offset: 12162
    00002f87: 	movq	-0x3ee0(%rbp), %rdi
    00002f8e: 	cmpq	-0x4018(%rbp), %rdi
    00002f95: 	je	.Ltmp2564 # Offset: 12181
    00002f97: 	movq	-0x3ed0(%rbp), %rax
    00002f9e: 	leaq	0x1(%rax), %rsi
    00002fa2: 	callq	_ZdlPvm@PLT # Offset: 12194
.Ltmp2564:
    00002fa7: 	movq	-0x4010(%rbp), %rdi
    00002fae: 	leaq	DATAat0x24860(%rip), %rdx
    00002fb5: 	movq	%r15, %rsi
    00002fb8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12216
    00002fbd: 	callq	clock@PLT # Offset: 12221
    00002fc2: 	movq	%rax, start_time(%rip)
    00002fc9: 	movl	iterations(%rip), %eax
    00002fcf: 	movl	%eax, -0x4000(%rbp)
    00002fd5: 	testl	%eax, %eax
    00002fd7: 	jle	.Ltmp2565 # Offset: 12247
    00002fdd: 	movq	-0x3ff0(%rbp), %rax
    00002fe4: 	leaq	0x2(%r13), %rdx
    00002fe8: 	movl	$0x0, -0x3fe0(%rbp)
    00002ff2: 	subq	%r14, %rax
    00002ff5: 	movq	%rax, %rbx
    00002ff8: 	shrq	$0x3f, %rax
    00002ffc: 	sarq	%rbx
    00002fff: 	addq	%rbx, %rax
    00003002: 	sarq	%rax
    00003005: 	subq	$0x1, %rax
    00003009: 	movq	%rax, -0x4020(%rbp)
    00003010: 	leaq	-0x1(%rbx), %rax
    00003014: 	movq	%rax, -0x4028(%rbp)
    0000301b: 	leaq	0x2(%r14), %rax
    0000301f: 	movq	%rax, -0x4038(%rbp)
    00003026: 	movq	-0x3fe8(%rbp), %rax
    0000302d: 	subq	$0x2, %rax
    00003031: 	movq	%rax, %rdi
    00003034: 	movq	%r14, %rax
    00003037: 	subq	%rdx, %rax
    0000303a: 	subq	%r13, %rdi
    0000303d: 	cmpq	$0xc, %rax
    00003041: 	movq	%rdi, -0x4060(%rbp)
    00003048: 	seta	%dl
    0000304b: 	cmpq	$0x4, %rdi
    0000304f: 	seta	%al
    00003052: 	shrq	%rdi
    00003055: 	movq	%rdi, -0x4058(%rbp)
    0000305c: 	addq	$0x1, %rdi
    00003060: 	andl	%eax, %edx
    00003062: 	movq	%rdi, %rax
    00003065: 	movq	%rdi, -0x4068(%rbp)
    0000306c: 	andq	$-0x8, %rdi
    00003070: 	shrq	$0x3, %rax
    00003074: 	movq	%rdi, -0x4040(%rbp)
    0000307b: 	shlq	$0x4, %rax
    0000307f: 	movb	%dl, -0x4030(%rbp)
    00003085: 	movq	%rax, -0x3fd8(%rbp)
    0000308c: 	leaq	(%rdi,%rdi), %rax
    00003090: 	leaq	(%r13,%rax), %rdi
    00003095: 	addq	%r14, %rax
    00003098: 	movq	%rdi, -0x4050(%rbp)
    0000309f: 	movq	%rax, -0x4070(%rbp)
.Ltmp2578:
    000030a6: 	cmpq	%r13, -0x3fe8(%rbp)
    000030ad: 	je	.Ltmp2566 # Offset: 12461
    000030b3: 	cmpb	$0x0, -0x4030(%rbp)
    000030ba: 	je	.Ltmp2567 # Offset: 12474
    000030c0: 	cmpq	$0xc, -0x4060(%rbp)
    000030c8: 	jbe	.Ltmp2568 # Offset: 12488
    000030ce: 	movq	-0x3fd8(%rbp), %rdi
    000030d5: 	xorl	%eax, %eax
    000030d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2569:
    000030e0: 	movdqu	(%r13,%rax), %xmm3
    000030e7: 	movups	%xmm3, (%r14,%rax)
    000030ec: 	addq	$0x10, %rax
    000030f0: 	cmpq	%rax, %rdi
    000030f3: 	jne	.Ltmp2569 # Offset: 12531
    000030f5: 	movq	%rdi, -0x3fd8(%rbp)
    000030fc: 	movq	-0x4040(%rbp), %rax
    00003103: 	movq	-0x4068(%rbp), %rdi
    0000310a: 	cmpq	%rdi, %rax
    0000310d: 	je	.Ltmp2566 # Offset: 12557
    0000310f: 	movq	%rax, %rcx
    00003112: 	movq	-0x4070(%rbp), %rdx
    00003119: 	movq	-0x4050(%rbp), %rax
.Ltmp2641:
    00003120: 	movq	-0x4058(%rbp), %rsi
    00003127: 	subq	%rcx, %rsi
    0000312a: 	leaq	0x1(%rsi), %rdi
    0000312e: 	cmpq	$0x2, %rsi
    00003132: 	jbe	.Ltmp2570 # Offset: 12594
    00003134: 	movq	(%r13,%rcx,2), %rsi
    00003139: 	movq	%rsi, (%r14,%rcx,2)
    0000313d: 	movq	%rdi, %rcx
    00003140: 	andq	$-0x4, %rcx
    00003144: 	leaq	(%rcx,%rcx), %rsi
    00003148: 	addq	%rsi, %rax
    0000314b: 	addq	%rsi, %rdx
    0000314e: 	cmpq	%rcx, %rdi
    00003151: 	je	.Ltmp2566 # Offset: 12625
.Ltmp2570:
    00003153: 	movzwl	(%rax), %ecx
    00003156: 	movq	-0x3fe8(%rbp), %rdi
    0000315d: 	movw	%cx, (%rdx)
    00003160: 	leaq	0x2(%rax), %rcx
    00003164: 	cmpq	%rcx, %rdi
    00003167: 	je	.Ltmp2566 # Offset: 12647
    00003169: 	movzwl	0x2(%rax), %ecx
    0000316d: 	movw	%cx, 0x2(%rdx)
    00003171: 	leaq	0x4(%rax), %rcx
    00003175: 	cmpq	%rcx, %rdi
    00003178: 	je	.Ltmp2566 # Offset: 12664
    0000317a: 	movzwl	0x4(%rax), %eax
    0000317e: 	movw	%ax, 0x4(%rdx)
.Ltmp2566:
    00003182: 	movq	-0x4020(%rbp), %rax
    00003189: 	movq	%rax, %r12
    0000318c: 	testq	%rax, %rax
    0000318f: 	js	.Ltmp2571 # Offset: 12687
    00003191: 	nopl	(%rax) # Size: 7
.Ltmp2572:
    00003198: 	movzwl	(%r14,%r12,2), %ecx
    0000319d: 	movq	%r12, %rdx
    000031a0: 	movq	%r14, %rsi
    000031a3: 	movq	%rbx, %rdi
    000031a6: 	callq	_ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEEvlT_lT0_ # Offset: 12710
    000031ab: 	subq	$0x1, %r12
    000031af: 	jae	.Ltmp2572 # Offset: 12719
.Ltmp2571:
    000031b1: 	movq	-0x4028(%rbp), %rax
    000031b8: 	movq	-0x3fd8(%rbp), %rdi
    000031bf: 	movq	%rax, %r12
    000031c2: 	testq	%rax, %rax
    000031c5: 	jle	.Ltmp2573 # Offset: 12741
    000031c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2574:
    000031d0: 	movzwl	(%r14), %eax
    000031d4: 	movzwl	(%r14,%r12,2), %ecx
    000031d9: 	xorl	%edx, %edx
    000031db: 	movq	%r12, %rdi
    000031de: 	movq	%r14, %rsi
    000031e1: 	movw	%ax, (%r14,%r12,2)
    000031e6: 	callq	_ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEEvlT_lT0_ # Offset: 12774
    000031eb: 	subq	$0x1, %r12
    000031ef: 	jne	.Ltmp2574 # Offset: 12783
    000031f1: 	movq	-0x3fd8(%rbp), %rdi
.Ltmp2573:
    000031f8: 	movq	-0x4038(%rbp), %rax
    000031ff: 	movq	-0x3ff0(%rbp), %rcx
    00003206: 	movq	%rdi, %rsi
    00003209: 	jmp	.Ltmp2575 # Offset: 12809
    0000320b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2577:
    00003210: 	addq	$0x2, %rax
    00003214: 	movzwl	-0x4(%rax), %edi
    00003218: 	cmpw	%di, (%rdx)
    0000321b: 	jb	.Ltmp2576 # Offset: 12827
.Ltmp2575:
    00003221: 	movq	%rax, %rdx
    00003224: 	cmpq	%rax, %rcx
    00003227: 	jne	.Ltmp2577 # Offset: 12839
    00003229: 	movq	%rsi, -0x3fd8(%rbp)
.Ltmp2609:
    00003230: 	addl	$0x1, -0x3fe0(%rbp)
    00003237: 	movl	-0x3fe0(%rbp), %eax
    0000323d: 	cmpl	-0x4000(%rbp), %eax
    00003243: 	jl	.Ltmp2578 # Offset: 12867
.Ltmp2565:
    00003249: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00003250: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00003257: 	subq	$0x20, %rax
    0000325b: 	cmpq	%rax, %rbx
    0000325e: 	je	.Ltmp2579 # Offset: 12894
    00003264: 	leaq	0x10(%rbx), %rdi
    00003268: 	movq	-0x3ed8(%rbp), %r12
    0000326f: 	movq	%rdi, (%rbx)
    00003272: 	movq	-0x3ee0(%rbp), %rax
    00003279: 	movq	%rax, -0x3fd8(%rbp)
    00003280: 	movq	%rax, %rsi
    00003283: 	addq	%r12, %rax
    00003286: 	je	.Ltmp2580 # Offset: 12934
    00003288: 	testq	%rsi, %rsi
    0000328b: 	je	.Ltmp2581 # Offset: 12939
.Ltmp2580:
    00003291: 	movq	%r12, -0x3fc8(%rbp)
    00003298: 	cmpq	$0xf, %r12
    0000329c: 	ja	.Ltmp2582 # Offset: 12956
    000032a2: 	cmpq	$0x1, %r12
    000032a6: 	jne	.Ltmp2583 # Offset: 12966
    000032ac: 	movq	-0x3fd8(%rbp), %rax
    000032b3: 	movzbl	(%rax), %eax
    000032b6: 	movb	%al, 0x10(%rbx)
.Ltmp2664:
    000032b9: 	movq	%r12, 0x8(%rbx)
    000032bd: 	movb	$0x0, (%rdi,%r12)
    000032c2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000032c9: 	addq	$0x20, %rax
    000032cd: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2666:
    000032d4: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000032db: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000032e2: 	je	.Ltmp2584 # Offset: 13026
.Ltmp2663:
    000032e8: 	movq	-0x20(%rax), %rbx
    000032ec: 	callq	clock@PLT # Offset: 13036
    000032f1: 	pxor	%xmm0, %xmm0
    000032f5: 	movq	%rax, end_time(%rip)
    000032fc: 	movq	%rbx, %rdi
    000032ff: 	subq	start_time(%rip), %rax
    00003306: 	cvtsi2sd	%rax, %xmm0
    0000330b: 	divsd	DATAat0x24890(%rip), %xmm0
    00003313: 	callq	_Z13record_resultdPKc # Offset: 13075
    00003318: 	movq	-0x3ee0(%rbp), %rdi
    0000331f: 	cmpq	-0x4018(%rbp), %rdi
    00003326: 	je	.Ltmp2585 # Offset: 13094
    00003328: 	movq	-0x3ed0(%rbp), %rax
    0000332f: 	leaq	0x1(%rax), %rsi
    00003333: 	callq	_ZdlPvm@PLT # Offset: 13107
.Ltmp2585:
    00003338: 	movq	-0x4010(%rbp), %rdi
    0000333f: 	leaq	DATAat0x246da(%rip), %rdx
    00003346: 	movq	%r15, %rsi
    00003349: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13129
    0000334e: 	movl	iterations(%rip), %edx
    00003354: 	xorl	%r8d, %r8d
    00003357: 	xorl	%ecx, %ecx
    00003359: 	movl	$0x7d0, %esi
    0000335e: 	movq	-0x3ee0(%rbp), %rdi
    00003365: 	callq	_Z9summarizePKciiii # Offset: 13157
    0000336a: 	movl	-0x4044(%rbp), %eax
    00003370: 	movq	-0x3ee0(%rbp), %rdi
    00003377: 	movl	%eax, iterations(%rip)
    0000337d: 	cmpq	-0x4018(%rbp), %rdi
    00003384: 	je	.Ltmp2586 # Offset: 13188
    00003386: 	movq	-0x3ed0(%rbp), %rax
    0000338d: 	leaq	0x1(%rax), %rsi
    00003391: 	callq	_ZdlPvm@PLT # Offset: 13201
.Ltmp2586:
    00003396: 	testq	%r14, %r14
    00003399: 	je	.Ltmp2587 # Offset: 13209
    0000339b: 	movq	-0x3f90(%rbp), %rsi
    000033a2: 	movq	%r14, %rdi
    000033a5: 	subq	%r14, %rsi
    000033a8: 	callq	_ZdlPvm@PLT # Offset: 13224
.Ltmp2587:
    000033ad: 	movq	-0x3f00(%rbp), %rdi
    000033b4: 	leaq	-0x3ef0(%rbp), %rax
    000033bb: 	cmpq	%rax, %rdi
    000033be: 	je	.Ltmp2588 # Offset: 13246
    000033c0: 	movq	-0x3ef0(%rbp), %rax
    000033c7: 	leaq	0x1(%rax), %rsi
    000033cb: 	callq	_ZdlPvm@PLT # Offset: 13259
.Ltmp2588:
    000033d0: 	movq	-0x3f20(%rbp), %rdi
    000033d7: 	leaq	-0x3f10(%rbp), %rax
    000033de: 	cmpq	%rax, %rdi
    000033e1: 	je	.Ltmp2589 # Offset: 13281
    000033e3: 	movq	-0x3f10(%rbp), %rax
    000033ea: 	leaq	0x1(%rax), %rsi
    000033ee: 	callq	_ZdlPvm@PLT # Offset: 13294
.Ltmp2589:
    000033f3: 	movq	-0x3f40(%rbp), %rdi
    000033fa: 	leaq	-0x3f30(%rbp), %rax
    00003401: 	cmpq	%rax, %rdi
    00003404: 	je	.Ltmp2590 # Offset: 13316
    00003406: 	movq	-0x3f30(%rbp), %rax
    0000340d: 	leaq	0x1(%rax), %rsi
    00003411: 	callq	_ZdlPvm@PLT # Offset: 13329
.Ltmp2590:
    00003416: 	movq	-0x3f60(%rbp), %rdi
    0000341d: 	leaq	-0x3f50(%rbp), %rax
    00003424: 	cmpq	%rax, %rdi
    00003427: 	je	.Ltmp2591 # Offset: 13351
    00003429: 	movq	-0x3f50(%rbp), %rax
    00003430: 	leaq	0x1(%rax), %rsi
    00003434: 	callq	_ZdlPvm@PLT # Offset: 13364
.Ltmp2591:
    00003439: 	movq	-0x3f80(%rbp), %rdi
    00003440: 	cmpq	-0x4080(%rbp), %rdi
    00003447: 	je	.Ltmp2592 # Offset: 13383
    00003449: 	movq	-0x3f70(%rbp), %rax
    00003450: 	leaq	0x1(%rax), %rsi
    00003454: 	callq	_ZdlPvm@PLT # Offset: 13396
.Ltmp2592:
    00003459: 	testq	%r13, %r13
    0000345c: 	je	.Ltmp2593 # Offset: 13404
    0000345e: 	movq	-0x3fb0(%rbp), %rsi
    00003465: 	movq	%r13, %rdi
    00003468: 	subq	%r13, %rsi
    0000346b: 	callq	_ZdlPvm@PLT # Offset: 13419
.Ltmp2593:
    00003470: 	movq	-0x38(%rbp), %rax
    00003474: 	subq	%fs:0x28, %rax
    0000347d: 	jne	.Ltmp2594 # Offset: 13437
    00003483: 	leaq	-0x28(%rbp), %rsp
    00003487: 	popq	%rbx
    00003488: 	popq	%r12
    0000348a: 	popq	%r13
    0000348c: 	popq	%r14
    0000348e: 	popq	%r15
    00003490: 	popq	%rbp
    00003491: 	retq # Offset: 13457
.Ltmp2524:
    00003492: 	movq	%r8, %rax
    00003495: 	movq	%r11, -0x3fd8(%rbp)
    0000349c: 	subq	%r14, %rax
    0000349f: 	cmpq	$0x2, %rax
    000034a3: 	jle	.Ltmp2595 # Offset: 13475
    000034a9: 	movzwl	(%r14), %esi
    000034ad: 	movq	%r8, %rcx
    000034b0: 	movq	%r14, %rax
    000034b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2600:
    000034b8: 	leaq	-0x2(%rcx), %r9
    000034bc: 	cmpw	%di, %si
    000034bf: 	jb	.Ltmp2596 # Offset: 13503
    000034c1: 	cmpq	%rax, %r9
    000034c4: 	jbe	.Ltmp2597 # Offset: 13508
    000034ca: 	movzwl	(%rax), %edx
    000034cd: 	cmpw	%dx, %si
    000034d0: 	jbe	.Ltmp2598 # Offset: 13520
    000034d2: 	movq	%r11, %r10
    000034d5: 	nopl	(%rax) # Size: 3
.Ltmp2599:
    000034d8: 	movzwl	0x2(%rax), %edx
    000034dc: 	addq	$0x2, %rax
    000034e0: 	cmpw	%dx, %si
    000034e3: 	ja	.Ltmp2599 # Offset: 13539
    000034e5: 	movq	%r10, %r11
    000034e8: 	cmpq	%rax, %r9
    000034eb: 	jbe	.Ltmp2597 # Offset: 13547
.Ltmp2598:
    000034f1: 	movw	%dx, (%r9)
    000034f5: 	movw	%di, (%rax)
.Ltmp2596:
    000034f8: 	movzwl	-0x2(%r9), %edi
    000034fd: 	movq	%r9, %rcx
    00003500: 	jmp	.Ltmp2600 # Offset: 13568
.Ltmp2632:
    00003502: 	movq	%r9, %rsi
    00003505: 	movq	%r10, %rdi
    00003508: 	movq	%r8, -0x4088(%rbp)
    0000350f: 	movq	%r11, -0x3fd8(%rbp)
    00003516: 	movq	%r9, -0x4090(%rbp)
    0000351d: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEEvT_S8_ # Offset: 13597
    00003522: 	movq	-0x4088(%rbp), %rsi
    00003529: 	movq	-0x4090(%rbp), %rdi
    00003530: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEEvT_S8_ # Offset: 13616
    00003535: 	movq	-0x4088(%rbp), %r8
.Ltmp2595:
    0000353c: 	movq	-0x3ff0(%rbp), %rcx
    00003543: 	movq	%rcx, %rax
    00003546: 	subq	%r8, %rax
    00003549: 	cmpq	$0x2, %rax
    0000354d: 	jle	.Ltmp2522 # Offset: 13645
    00003553: 	movzwl	(%r8), %esi
    00003557: 	movq	-0x3fd8(%rbp), %r11
    0000355e: 	movq	%r8, %rax
    00003561: 	nopl	(%rax) # Size: 7
.Ltmp2605:
    00003568: 	movzwl	-0x2(%rcx), %r9d
    0000356d: 	leaq	-0x2(%rcx), %rdi
    00003571: 	cmpw	%r9w, %si
    00003575: 	jb	.Ltmp2601 # Offset: 13685
    00003577: 	cmpq	%rax, %rdi
    0000357a: 	jbe	.Ltmp2602 # Offset: 13690
    00003580: 	movzwl	(%rax), %edx
    00003583: 	cmpw	%dx, %si
    00003586: 	jbe	.Ltmp2603 # Offset: 13702
    00003588: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2604:
    00003590: 	movzwl	0x2(%rax), %edx
    00003594: 	addq	$0x2, %rax
    00003598: 	cmpw	%dx, %si
    0000359b: 	ja	.Ltmp2604 # Offset: 13723
    0000359d: 	cmpq	%rax, %rdi
    000035a0: 	jbe	.Ltmp2602 # Offset: 13728
.Ltmp2603:
    000035a6: 	movw	%dx, (%rdi)
    000035a9: 	movw	%r9w, (%rax)
.Ltmp2601:
    000035ad: 	movq	%rdi, %rcx
    000035b0: 	jmp	.Ltmp2605 # Offset: 13744
.Ltmp2458:
    000035b2: 	movq	%r14, %rdx
    000035b5: 	jmp	.Ltmp2487 # Offset: 13749
.Ltmp2464:
    000035ba: 	movq	-0x3ee0(%rbp), %rdx
    000035c1: 	movq	%rsi, -0x3fd8(%rbp)
    000035c8: 	movl	$0x1, %edi
    000035cd: 	xorl	%eax, %eax
    000035cf: 	leaq	DATAat0x246f4(%rip), %rsi
    000035d6: 	callq	__printf_chk@PLT # Offset: 13782
    000035db: 	movl	iterations(%rip), %r8d
    000035e2: 	jmp	.Ltmp2606 # Offset: 13794
.Ltmp2555:
    000035e7: 	movq	-0x3ee0(%rbp), %rdx
    000035ee: 	movq	%rdi, -0x3fd8(%rbp)
    000035f5: 	leaq	DATAat0x246f4(%rip), %rsi
    000035fc: 	movl	$0x1, %edi
    00003601: 	xorl	%eax, %eax
    00003603: 	callq	__printf_chk@PLT # Offset: 13827
    00003608: 	movl	iterations(%rip), %eax
    0000360e: 	movl	%eax, -0x4028(%rbp)
    00003614: 	jmp	.Ltmp2607 # Offset: 13844
.Ltmp2542:
    00003619: 	movq	-0x3ee0(%rbp), %rdx
    00003620: 	movq	%rdi, -0x3fd8(%rbp)
    00003627: 	leaq	DATAat0x246f4(%rip), %rsi
    0000362e: 	movl	$0x1, %edi
    00003633: 	xorl	%eax, %eax
    00003635: 	callq	__printf_chk@PLT # Offset: 13877
    0000363a: 	movl	iterations(%rip), %eax
    00003640: 	movl	%eax, -0x4030(%rbp)
    00003646: 	jmp	.Ltmp2608 # Offset: 13894
.Ltmp2576:
    0000364b: 	movq	-0x3ee0(%rbp), %rdx
    00003652: 	movq	%rsi, -0x3fd8(%rbp)
    00003659: 	movl	$0x1, %edi
    0000365e: 	xorl	%eax, %eax
    00003660: 	leaq	DATAat0x246f4(%rip), %rsi
    00003667: 	callq	__printf_chk@PLT # Offset: 13927
    0000366c: 	movl	iterations(%rip), %eax
    00003672: 	movl	%eax, -0x4000(%rbp)
    00003678: 	jmp	.Ltmp2609 # Offset: 13944
.Ltmp2506:
    0000367d: 	movq	-0x3ee0(%rbp), %rdx
    00003684: 	movq	%rdi, -0x3fd8(%rbp)
    0000368b: 	leaq	DATAat0x246f4(%rip), %rsi
    00003692: 	movl	$0x1, %edi
    00003697: 	xorl	%eax, %eax
    00003699: 	callq	__printf_chk@PLT # Offset: 13977
    0000369e: 	jmp	.Ltmp2610 # Offset: 13982
.Ltmp2488:
    000036a3: 	movq	-0x3ee0(%rbp), %rdx
    000036aa: 	movq	%rdi, -0x3fd8(%rbp)
    000036b1: 	leaq	DATAat0x246f4(%rip), %rsi
    000036b8: 	movl	$0x1, %edi
    000036bd: 	xorl	%eax, %eax
    000036bf: 	callq	__printf_chk@PLT # Offset: 14015
    000036c4: 	jmp	.Ltmp2611 # Offset: 14020
.Ltmp2529:
    000036c9: 	movq	-0x3ee0(%rbp), %rdx
    000036d0: 	movq	%rsi, -0x3fd8(%rbp)
    000036d7: 	movl	$0x1, %edi
    000036dc: 	xorl	%eax, %eax
    000036de: 	leaq	DATAat0x246f4(%rip), %rsi
    000036e5: 	callq	__printf_chk@PLT # Offset: 14053
    000036ea: 	movl	iterations(%rip), %eax
    000036f0: 	movl	%eax, -0x4028(%rbp)
    000036f6: 	jmp	.Ltmp2612 # Offset: 14070
.Ltmp2441:
    000036fb: 	movq	-0x3ee0(%rbp), %rdx
    00003702: 	movq	%rdi, -0x3fd8(%rbp)
    00003709: 	movq	%rbx, %rsi
    0000370c: 	xorl	%eax, %eax
    0000370e: 	movl	$0x1, %edi
    00003713: 	callq	__printf_chk@PLT # Offset: 14099
    00003718: 	movl	iterations(%rip), %r8d
    0000371f: 	jmp	.Ltmp2613 # Offset: 14111
.Ltmp2602:
    00003724: 	movq	%rcx, %rax
    00003727: 	movq	%r11, -0x3fd8(%rbp)
    0000372e: 	subq	%r8, %rax
    00003731: 	cmpq	$0x2, %rax
    00003735: 	jle	.Ltmp2614 # Offset: 14133
    0000373b: 	movzwl	(%r8), %edi
    0000373f: 	movq	%rcx, %r9
    00003742: 	movq	%r8, %rdx
.Ltmp2619:
    00003745: 	movzwl	-0x2(%r9), %r11d
    0000374a: 	leaq	-0x2(%r9), %r10
    0000374e: 	cmpw	%r11w, %di
    00003752: 	jb	.Ltmp2615 # Offset: 14162
    00003754: 	cmpq	%rdx, %r10
    00003757: 	jbe	.Ltmp2616 # Offset: 14167
    00003759: 	movzwl	(%rdx), %esi
    0000375c: 	cmpw	%di, %si
    0000375f: 	jae	.Ltmp2617 # Offset: 14175
    00003761: 	leaq	0x2(%rdx), %rax
    00003765: 	nopl	(%rax) # Size: 3
.Ltmp2618:
    00003768: 	movq	%rax, %rdx
    0000376b: 	movzwl	(%rax), %esi
    0000376e: 	leaq	0x2(%rax), %rax
    00003772: 	cmpw	%si, %di
    00003775: 	ja	.Ltmp2618 # Offset: 14197
    00003777: 	cmpq	%rdx, %r10
    0000377a: 	jbe	.Ltmp2616 # Offset: 14202
.Ltmp2617:
    0000377c: 	movw	%si, (%r10)
    00003780: 	movw	%r11w, (%rdx)
.Ltmp2615:
    00003784: 	movq	%r10, %r9
    00003787: 	jmp	.Ltmp2619 # Offset: 14215
.Ltmp2616:
    00003789: 	movq	%r9, %rsi
    0000378c: 	movq	%r8, %rdi
    0000378f: 	movq	%rcx, -0x4088(%rbp)
    00003796: 	movq	%r9, -0x4090(%rbp)
    0000379d: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEEvT_S8_ # Offset: 14237
    000037a2: 	movq	-0x4088(%rbp), %rsi
    000037a9: 	movq	-0x4090(%rbp), %rdi
    000037b0: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEEvT_S8_ # Offset: 14256
    000037b5: 	movq	-0x4088(%rbp), %rcx
.Ltmp2614:
    000037bc: 	movq	-0x3ff0(%rbp), %r8
    000037c3: 	movq	%rcx, %r10
    000037c6: 	movq	%r8, %rax
    000037c9: 	subq	%rcx, %rax
    000037cc: 	cmpq	$0x2, %rax
    000037d0: 	jle	.Ltmp2522 # Offset: 14288
    000037d6: 	movzwl	(%rcx), %esi
    000037d9: 	movq	-0x3fd8(%rbp), %r11
.Ltmp2624:
    000037e0: 	movzwl	-0x2(%r8), %r9d
    000037e5: 	leaq	-0x2(%r8), %rdi
    000037e9: 	cmpw	%r9w, %si
    000037ed: 	jb	.Ltmp2620 # Offset: 14317
    000037ef: 	cmpq	%rcx, %rdi
    000037f2: 	jbe	.Ltmp2621 # Offset: 14322
    000037f8: 	movzwl	(%rcx), %edx
    000037fb: 	cmpw	%si, %dx
    000037fe: 	jae	.Ltmp2622 # Offset: 14334
    00003800: 	leaq	0x2(%rcx), %rax
    00003804: 	nopl	(%rax) # Size: 4
.Ltmp2623:
    00003808: 	movq	%rax, %rcx
    0000380b: 	movzwl	(%rax), %edx
    0000380e: 	leaq	0x2(%rax), %rax
    00003812: 	cmpw	%dx, %si
    00003815: 	ja	.Ltmp2623 # Offset: 14357
    00003817: 	cmpq	%rcx, %rdi
    0000381a: 	jbe	.Ltmp2621 # Offset: 14362
.Ltmp2622:
    00003820: 	movw	%dx, (%rdi)
    00003823: 	movw	%r9w, (%rcx)
.Ltmp2620:
    00003827: 	movq	%rdi, %r8
    0000382a: 	jmp	.Ltmp2624 # Offset: 14378
.Ltmp2597:
    0000382c: 	movq	%rcx, %rax
    0000382f: 	movq	%r11, -0x3fd8(%rbp)
    00003836: 	subq	%r14, %rax
    00003839: 	cmpq	$0x2, %rax
    0000383d: 	jle	.Ltmp2625 # Offset: 14397
    00003843: 	movzwl	(%r14), %esi
    00003847: 	movq	%rcx, %r9
    0000384a: 	movq	%r14, %rax
.Ltmp2630:
    0000384d: 	movzwl	-0x2(%r9), %r10d
    00003852: 	leaq	-0x2(%r9), %rdi
    00003856: 	cmpw	%r10w, %si
    0000385a: 	jb	.Ltmp2626 # Offset: 14426
    0000385c: 	cmpq	%rax, %rdi
    0000385f: 	jbe	.Ltmp2627 # Offset: 14431
    00003861: 	movzwl	(%rax), %edx
    00003864: 	cmpw	%si, %dx
    00003867: 	jae	.Ltmp2628 # Offset: 14439
    00003869: 	nopl	(%rax) # Size: 7
.Ltmp2629:
    00003870: 	movzwl	0x2(%rax), %edx
    00003874: 	addq	$0x2, %rax
    00003878: 	cmpw	%dx, %si
    0000387b: 	ja	.Ltmp2629 # Offset: 14459
    0000387d: 	cmpq	%rax, %rdi
    00003880: 	jbe	.Ltmp2627 # Offset: 14464
.Ltmp2628:
    00003882: 	movw	%dx, (%rdi)
    00003885: 	movw	%r10w, (%rax)
.Ltmp2626:
    00003889: 	movq	%rdi, %r9
    0000388c: 	jmp	.Ltmp2630 # Offset: 14476
.Ltmp2627:
    0000388e: 	movq	%r9, %rsi
    00003891: 	movq	%r14, %rdi
    00003894: 	movq	%rcx, -0x4088(%rbp)
    0000389b: 	movq	%r8, -0x4098(%rbp)
    000038a2: 	movq	%r11, -0x3fd8(%rbp)
    000038a9: 	movq	%r9, -0x4090(%rbp)
    000038b0: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEEvT_S8_ # Offset: 14512
    000038b5: 	movq	-0x4088(%rbp), %rsi
    000038bc: 	movq	-0x4090(%rbp), %rdi
    000038c3: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEEvT_S8_ # Offset: 14531
    000038c8: 	movq	-0x4098(%rbp), %r8
    000038cf: 	movq	-0x4088(%rbp), %rcx
.Ltmp2625:
    000038d6: 	movq	%r8, %rax
    000038d9: 	movq	%rcx, %r10
    000038dc: 	subq	%rcx, %rax
    000038df: 	cmpq	$0x2, %rax
    000038e3: 	jle	.Ltmp2595 # Offset: 14563
    000038e9: 	movzwl	(%rcx), %edx
    000038ec: 	movq	-0x3fd8(%rbp), %r11
    000038f3: 	movq	%r8, %r9
.Ltmp2635:
    000038f6: 	movzwl	-0x2(%r9), %edi
    000038fb: 	leaq	-0x2(%r9), %rsi
    000038ff: 	cmpw	%di, %dx
    00003902: 	jb	.Ltmp2631 # Offset: 14594
    00003904: 	cmpq	%rcx, %rsi
    00003907: 	jbe	.Ltmp2632 # Offset: 14599
    0000390d: 	movzwl	(%rcx), %eax
    00003910: 	cmpw	%ax, %dx
    00003913: 	jbe	.Ltmp2633 # Offset: 14611
    00003915: 	nopl	(%rax) # Size: 3
.Ltmp2634:
    00003918: 	movzwl	0x2(%rcx), %eax
    0000391c: 	addq	$0x2, %rcx
    00003920: 	cmpw	%ax, %dx
    00003923: 	ja	.Ltmp2634 # Offset: 14627
    00003925: 	cmpq	%rcx, %rsi
    00003928: 	jbe	.Ltmp2632 # Offset: 14632
.Ltmp2633:
    0000392e: 	movw	%ax, (%rsi)
    00003931: 	movw	%di, (%rcx)
.Ltmp2631:
    00003934: 	movq	%rsi, %r9
    00003937: 	jmp	.Ltmp2635 # Offset: 14647
.Ltmp2518:
    00003939: 	movq	-0x3fe8(%rbp), %rcx
    00003940: 	movq	-0x3fd8(%rbp), %rdi
    00003947: 	xorl	%eax, %eax
    00003949: 	subq	%r13, %rcx
.Ltmp2636:
    0000394c: 	movzwl	(%r13,%rax), %edx
    00003952: 	movw	%dx, (%r14,%rax)
    00003957: 	addq	$0x2, %rax
    0000395b: 	cmpq	%rax, %rcx
    0000395e: 	jne	.Ltmp2636 # Offset: 14686
    00003960: 	movq	%rdi, -0x3fd8(%rbp)
    00003967: 	jmp	.Ltmp2517 # Offset: 14695
.Ltmp2567:
    0000396c: 	movq	-0x3fe8(%rbp), %rcx
    00003973: 	movq	-0x3fd8(%rbp), %rdi
    0000397a: 	xorl	%eax, %eax
    0000397c: 	subq	%r13, %rcx
.Ltmp2637:
    0000397f: 	movzwl	(%r13,%rax), %edx
    00003985: 	movw	%dx, (%r14,%rax)
    0000398a: 	addq	$0x2, %rax
    0000398e: 	cmpq	%rcx, %rax
    00003991: 	jne	.Ltmp2637 # Offset: 14737
    00003993: 	movq	%rdi, -0x3fd8(%rbp)
    0000399a: 	jmp	.Ltmp2566 # Offset: 14746
.Ltmp2453:
    0000399f: 	movq	-0x3fd8(%rbp), %rdi
    000039a6: 	movq	-0x4070(%rbp), %rcx
    000039ad: 	xorl	%eax, %eax
.Ltmp2638:
    000039af: 	movzwl	(%r13,%rax), %edx
    000039b5: 	movw	%dx, (%r14,%rax)
    000039ba: 	addq	$0x2, %rax
    000039be: 	cmpq	%rcx, %rax
    000039c1: 	jne	.Ltmp2638 # Offset: 14785
    000039c3: 	movq	%rdi, -0x3fd8(%rbp)
    000039ca: 	jmp	.Ltmp2452 # Offset: 14794
.Ltmp2519:
    000039cf: 	movq	%r14, %rdx
    000039d2: 	movq	%r13, %rax
    000039d5: 	xorl	%ecx, %ecx
    000039d7: 	jmp	.Ltmp2639 # Offset: 14807
.Ltmp2454:
    000039dc: 	movq	%r14, %rdx
    000039df: 	movq	%r13, %rax
    000039e2: 	xorl	%ecx, %ecx
    000039e4: 	jmp	.Ltmp2640 # Offset: 14820
.Ltmp2568:
    000039e9: 	movq	%r14, %rdx
    000039ec: 	movq	%r13, %rax
    000039ef: 	xorl	%ecx, %ecx
    000039f1: 	jmp	.Ltmp2641 # Offset: 14833
.Ltmp2494:
    000039f6: 	leaq	-0x3fc8(%rbp), %rsi
    000039fd: 	xorl	%edx, %edx
    000039ff: 	movq	%rbx, %rdi
    00003a02: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14850
    00003a07: 	movq	%rax, (%rbx)
    00003a0a: 	movq	%rax, %rdi
    00003a0d: 	movq	-0x3fc8(%rbp), %rax
    00003a14: 	movq	%rax, 0x10(%rbx)
.Ltmp2658:
    00003a18: 	movq	-0x4020(%rbp), %rdx
    00003a1f: 	movq	-0x4028(%rbp), %rsi
    00003a26: 	callq	memcpy@PLT # Offset: 14886
    00003a2b: 	movq	-0x3fc8(%rbp), %rax
    00003a32: 	movq	(%rbx), %rdi
    00003a35: 	movq	%rax, -0x4020(%rbp)
    00003a3c: 	jmp	.Ltmp2642 # Offset: 14908
.Ltmp2491:
    00003a41: 	movq	-0x4010(%rbp), %rsi
    00003a48: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003a4f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 14927
    00003a54: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003a5b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00003a62: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003a69: 	jne	.Ltmp2643 # Offset: 14953
.Ltmp2496:
    00003a6f: 	movq	-0x8(%rdx), %rax
    00003a73: 	addq	$0x200, %rax
    00003a79: 	jmp	.Ltmp2643 # Offset: 14969
.Ltmp2472:
    00003a7e: 	movq	-0x8(%rdx), %rax
    00003a82: 	addq	$0x200, %rax
    00003a88: 	jmp	.Ltmp2644 # Offset: 14984
.Ltmp2471:
    00003a8d: 	cmpq	$0x0, -0x4020(%rbp)
    00003a95: 	je	.Ltmp2645 # Offset: 14997
    00003a9b: 	jmp	.Ltmp2646 # Offset: 15003
    00003a9d: 	nopl	(%rax) # Size: 3
.Ltmp2430:
    00003aa0: 	movq	%r12, %rsi
    00003aa3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003aaa: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 15018
    00003aaf: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003ab6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00003abd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003ac4: 	jne	.Ltmp2647 # Offset: 15044
.Ltmp2435:
    00003aca: 	movq	-0x8(%rdx), %rax
    00003ace: 	addq	$0x200, %rax
    00003ad4: 	jmp	.Ltmp2647 # Offset: 15060
.Ltmp2470:
    00003ad9: 	leaq	-0x3fc8(%rbp), %rsi
    00003ae0: 	xorl	%edx, %edx
    00003ae2: 	movq	%rbx, %rdi
    00003ae5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15077
    00003aea: 	movq	%rax, (%rbx)
    00003aed: 	movq	%rax, %rdi
    00003af0: 	movq	-0x3fc8(%rbp), %rax
    00003af7: 	movq	%rax, 0x10(%rbx)
.Ltmp2646:
    00003afb: 	movq	-0x4020(%rbp), %rdx
    00003b02: 	movq	-0x4028(%rbp), %rsi
    00003b09: 	callq	memcpy@PLT # Offset: 15113
    00003b0e: 	movq	-0x3fc8(%rbp), %rax
    00003b15: 	movq	(%rbx), %rdi
    00003b18: 	movq	%rax, -0x4020(%rbp)
    00003b1f: 	jmp	.Ltmp2645 # Offset: 15135
.Ltmp2467:
    00003b24: 	movq	-0x4010(%rbp), %rsi
    00003b2b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003b32: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 15154
    00003b37: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003b3e: 	jmp	.Ltmp2648 # Offset: 15166
.Ltmp2421:
    00003b43: 	movq	-0x3fe0(%rbp), %rcx
.Ltmp2649:
    00003b4a: 	movzwl	(%rcx,%rax), %edx
    00003b4e: 	movw	%dx, (%r13,%rax)
    00003b54: 	addq	$0x2, %rax
    00003b58: 	cmpq	$0xfa0, %rax
    00003b5e: 	jne	.Ltmp2649 # Offset: 15198
    00003b60: 	jmp	.Ltmp2650 # Offset: 15200
.Ltmp2550:
    00003b65: 	movq	-0x8(%rdx), %rax
    00003b69: 	addq	$0x200, %rax
    00003b6f: 	jmp	.Ltmp2651 # Offset: 15215
.Ltmp2549:
    00003b74: 	cmpq	$0x0, -0x3fe0(%rbp)
    00003b7c: 	je	.Ltmp2652 # Offset: 15228
    00003b82: 	jmp	.Ltmp2653 # Offset: 15234
    00003b84: 	nopl	(%rax) # Size: 4
.Ltmp2548:
    00003b88: 	leaq	-0x3fc8(%rbp), %rsi
    00003b8f: 	xorl	%edx, %edx
    00003b91: 	movq	%rbx, %rdi
    00003b94: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15252
    00003b99: 	movq	%rax, (%rbx)
    00003b9c: 	movq	%rax, %rdi
    00003b9f: 	movq	-0x3fc8(%rbp), %rax
    00003ba6: 	movq	%rax, 0x10(%rbx)
.Ltmp2653:
    00003baa: 	movq	-0x3fe0(%rbp), %rdx
    00003bb1: 	movq	-0x4020(%rbp), %rsi
    00003bb8: 	callq	memcpy@PLT # Offset: 15288
    00003bbd: 	movq	-0x3fc8(%rbp), %rax
    00003bc4: 	movq	(%rbx), %rdi
    00003bc7: 	movq	%rax, -0x3fe0(%rbp)
    00003bce: 	jmp	.Ltmp2652 # Offset: 15310
.Ltmp2537:
    00003bd3: 	movq	-0x8(%rdx), %rax
    00003bd7: 	addq	$0x200, %rax
    00003bdd: 	jmp	.Ltmp2654 # Offset: 15325
.Ltmp2532:
    00003be2: 	movq	-0x4010(%rbp), %rsi
    00003be9: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003bf0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 15344
    00003bf5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003bfc: 	jmp	.Ltmp2655 # Offset: 15356
.Ltmp2536:
    00003c01: 	cmpq	$0x0, -0x4020(%rbp)
    00003c09: 	je	.Ltmp2656 # Offset: 15369
    00003c0f: 	jmp	.Ltmp2657 # Offset: 15375
    00003c11: 	nopl	(%rax) # Size: 7
.Ltmp2535:
    00003c18: 	leaq	-0x3fc8(%rbp), %rsi
    00003c1f: 	xorl	%edx, %edx
    00003c21: 	movq	%rbx, %rdi
    00003c24: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15396
    00003c29: 	movq	%rax, (%rbx)
    00003c2c: 	movq	%rax, %rdi
    00003c2f: 	movq	-0x3fc8(%rbp), %rax
    00003c36: 	movq	%rax, 0x10(%rbx)
.Ltmp2657:
    00003c3a: 	movq	-0x4020(%rbp), %rdx
    00003c41: 	movq	-0x4028(%rbp), %rsi
    00003c48: 	callq	memcpy@PLT # Offset: 15432
    00003c4d: 	movq	-0x3fc8(%rbp), %rax
    00003c54: 	movq	(%rbx), %rdi
    00003c57: 	movq	%rax, -0x4020(%rbp)
    00003c5e: 	jmp	.Ltmp2656 # Offset: 15454
.Ltmp2495:
    00003c63: 	cmpq	$0x0, -0x4020(%rbp)
    00003c6b: 	je	.Ltmp2642 # Offset: 15467
    00003c71: 	jmp	.Ltmp2658 # Offset: 15473
    00003c76: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2447:
    00003c80: 	leaq	-0x3fc8(%rbp), %rsi
    00003c87: 	xorl	%edx, %edx
    00003c89: 	movq	%rbx, %rdi
    00003c8c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15500
    00003c91: 	movq	%rax, (%rbx)
    00003c94: 	movq	%rax, %rdi
    00003c97: 	movq	-0x3fc8(%rbp), %rax
    00003c9e: 	movq	%rax, 0x10(%rbx)
.Ltmp2662:
    00003ca2: 	movq	-0x3ff0(%rbp), %rsi
    00003ca9: 	movq	%r14, %rdx
    00003cac: 	callq	memcpy@PLT # Offset: 15532
    00003cb1: 	movq	-0x3fc8(%rbp), %r14
    00003cb8: 	movq	(%rbx), %rdi
    00003cbb: 	jmp	.Ltmp2659 # Offset: 15547
.Ltmp2444:
    00003cc0: 	movq	-0x4010(%rbp), %rsi
    00003cc7: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003cce: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 15566
    00003cd3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003cda: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00003ce1: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003ce8: 	jne	.Ltmp2660 # Offset: 15592
.Ltmp2449:
    00003cee: 	movq	-0x8(%rdx), %rax
    00003cf2: 	addq	$0x200, %rax
    00003cf8: 	jmp	.Ltmp2660 # Offset: 15608
.Ltmp2545:
    00003cfd: 	movq	-0x4010(%rbp), %rsi
    00003d04: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003d0b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 15627
    00003d10: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003d17: 	jmp	.Ltmp2661 # Offset: 15639
.Ltmp2448:
    00003d1c: 	testq	%r14, %r14
    00003d1f: 	je	.Ltmp2659 # Offset: 15647
    00003d25: 	jmp	.Ltmp2662 # Offset: 15653
    00003d2a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2584:
    00003d30: 	movq	-0x8(%rdx), %rax
    00003d34: 	addq	$0x200, %rax
    00003d3a: 	jmp	.Ltmp2663 # Offset: 15674
.Ltmp2583:
    00003d3f: 	testq	%r12, %r12
    00003d42: 	je	.Ltmp2664 # Offset: 15682
    00003d48: 	jmp	.Ltmp2665 # Offset: 15688
    00003d4a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2582:
    00003d50: 	leaq	-0x3fc8(%rbp), %rsi
    00003d57: 	xorl	%edx, %edx
    00003d59: 	movq	%rbx, %rdi
    00003d5c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15708
    00003d61: 	movq	%rax, (%rbx)
    00003d64: 	movq	%rax, %rdi
    00003d67: 	movq	-0x3fc8(%rbp), %rax
    00003d6e: 	movq	%rax, 0x10(%rbx)
.Ltmp2665:
    00003d72: 	movq	-0x3fd8(%rbp), %rsi
    00003d79: 	movq	%r12, %rdx
    00003d7c: 	callq	memcpy@PLT # Offset: 15740
    00003d81: 	movq	-0x3fc8(%rbp), %r12
    00003d88: 	movq	(%rbx), %rdi
    00003d8b: 	jmp	.Ltmp2664 # Offset: 15755
.Ltmp2579:
    00003d90: 	movq	-0x4010(%rbp), %rsi
    00003d97: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003d9e: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 15774
    00003da3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003daa: 	jmp	.Ltmp2666 # Offset: 15786
.Ltmp2514:
    00003daf: 	movq	-0x8(%rdx), %rax
    00003db3: 	addq	$0x200, %rax
    00003db9: 	jmp	.Ltmp2667 # Offset: 15801
.Ltmp2513:
    00003dbe: 	cmpq	$0x0, -0x4020(%rbp)
    00003dc6: 	je	.Ltmp2668 # Offset: 15814
    00003dcc: 	jmp	.Ltmp2669 # Offset: 15820
    00003dce: 	nop # Size: 2
.Ltmp2512:
    00003dd0: 	leaq	-0x3fc8(%rbp), %rsi
    00003dd7: 	xorl	%edx, %edx
    00003dd9: 	movq	%rbx, %rdi
    00003ddc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15836
    00003de1: 	movq	%rax, (%rbx)
    00003de4: 	movq	%rax, %rdi
    00003de7: 	movq	-0x3fc8(%rbp), %rax
    00003dee: 	movq	%rax, 0x10(%rbx)
.Ltmp2669:
    00003df2: 	movq	-0x4020(%rbp), %rdx
    00003df9: 	movq	-0x4028(%rbp), %rsi
    00003e00: 	callq	memcpy@PLT # Offset: 15872
    00003e05: 	movq	-0x3fc8(%rbp), %rax
    00003e0c: 	movq	(%rbx), %rdi
    00003e0f: 	movq	%rax, -0x4020(%rbp)
    00003e16: 	jmp	.Ltmp2668 # Offset: 15894
.Ltmp2563:
    00003e1b: 	movq	-0x8(%rdx), %rax
    00003e1f: 	addq	$0x200, %rax
    00003e25: 	jmp	.Ltmp2670 # Offset: 15909
.Ltmp2562:
    00003e2a: 	testq	%r12, %r12
    00003e2d: 	je	.Ltmp2671 # Offset: 15917
.Ltmp2673:
    00003e33: 	movq	-0x3fd8(%rbp), %rsi
    00003e3a: 	movq	%r12, %rdx
    00003e3d: 	callq	memcpy@PLT # Offset: 15933
    00003e42: 	movq	-0x3fc8(%rbp), %r12
    00003e49: 	movq	(%rbx), %rdi
    00003e4c: 	jmp	.Ltmp2671 # Offset: 15948
.Ltmp2509:
    00003e51: 	movq	-0x4010(%rbp), %rsi
    00003e58: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003e5f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 15967
    00003e64: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003e6b: 	jmp	.Ltmp2672 # Offset: 15979
.Ltmp2561:
    00003e70: 	leaq	-0x3fc8(%rbp), %rsi
    00003e77: 	xorl	%edx, %edx
    00003e79: 	movq	%rbx, %rdi
    00003e7c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15996
    00003e81: 	movq	%rax, (%rbx)
    00003e84: 	movq	%rax, %rdi
    00003e87: 	movq	-0x3fc8(%rbp), %rax
    00003e8e: 	movq	%rax, 0x10(%rbx)
    00003e92: 	jmp	.Ltmp2673 # Offset: 16018
.Ltmp2558:
    00003e94: 	movq	-0x4010(%rbp), %rsi
    00003e9b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003ea2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 16034
    00003ea7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003eae: 	jmp	.Ltmp2674 # Offset: 16046
.Ltmp2434:
    00003eb3: 	testq	%r14, %r14
    00003eb6: 	je	.Ltmp2483 # Offset: 16054
    00003ebc: 	jmp	.Ltmp2675 # Offset: 16060
    00003ec1: 	nopl	(%rax) # Size: 7
.Ltmp2338:
    00003ec8: 	movq	%rdi, %rsi
    00003ecb: 	cmpq	%rdi, -0x3fd8(%rbp)
    00003ed2: 	je	.Ltmp2343 # Offset: 16082
.Ltmp2678:
    00003ed8: 	movq	(%rsi), %rdi
    00003edb: 	leaq	0x10(%rsi), %rax
    00003edf: 	movq	%rsi, %rbx
    00003ee2: 	cmpq	%rax, %rdi
    00003ee5: 	je	.Ltmp2676 # Offset: 16101
.Ltmp2677:
    00003ee7: 	movq	0x10(%rsi), %rax
    00003eeb: 	addq	$0x20, %rbx
    00003eef: 	leaq	0x1(%rax), %rsi
    00003ef3: 	movq	%rax, -0x3fe0(%rbp)
    00003efa: 	callq	_ZdlPvm@PLT # Offset: 16122
    00003eff: 	movq	%rbx, %rsi
    00003f02: 	cmpq	%rbx, -0x3fd8(%rbp)
    00003f09: 	je	.Ltmp2343 # Offset: 16137
    00003f0f: 	movq	(%rsi), %rdi
    00003f12: 	leaq	0x10(%rsi), %rax
    00003f16: 	movq	%rsi, %rbx
    00003f19: 	cmpq	%rax, %rdi
    00003f1c: 	jne	.Ltmp2677 # Offset: 16156
.Ltmp2676:
    00003f1e: 	movq	%rsi, %rax
    00003f21: 	addq	$0x20, %rax
    00003f25: 	movq	%rax, %rsi
    00003f28: 	cmpq	%rax, -0x3fd8(%rbp)
    00003f2f: 	jne	.Ltmp2678 # Offset: 16175
    00003f31: 	jmp	.Ltmp2343 # Offset: 16177
.Ltmp2351:
    00003f36: 	xorl	%edx, %edx
    00003f38: 	jmp	.Ltmp2679 # Offset: 16184
.Ltmp2446:
    00003f3d: 	leaq	DATAat0x24158(%rip), %rdi
    00003f44: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16196
.Ltmp2469:
    00003f49: 	leaq	DATAat0x24158(%rip), %rdi
    00003f50: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16208
.Ltmp2432:
    00003f55: 	leaq	DATAat0x24158(%rip), %rdi
    00003f5c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16220
.Ltmp2493:
    00003f61: 	leaq	DATAat0x24158(%rip), %rdi
    00003f68: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16232
.Ltmp2511:
    00003f6d: 	leaq	DATAat0x24158(%rip), %rdi
    00003f74: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16244
.Ltmp2534:
    00003f79: 	leaq	DATAat0x24158(%rip), %rdi
    00003f80: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16256
.Ltmp2547:
    00003f85: 	leaq	DATAat0x24158(%rip), %rdi
    00003f8c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16268
.Ltmp2560:
    00003f91: 	leaq	DATAat0x24158(%rip), %rdi
    00003f98: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16280
.Ltmp2581:
    00003f9d: 	leaq	DATAat0x24158(%rip), %rdi
    00003fa4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16292
.Ltmp2594:
    00003fa9: 	callq	__stack_chk_fail@PLT # Offset: 16297
    00003fae: 	endbr64
.Ltmp2681:
    00003fb2: 	movq	%rax, %r15
    00003fb5: 	jmp	.Ltmp2680 # Offset: 16309
    00003fb7: 	endbr64
    00003fbb: 	jmp	.Ltmp2681 # Offset: 16315
    00003fbd: 	endbr64
    00003fc1: 	jmp	.Ltmp2681 # Offset: 16321
    00003fc3: 	endbr64
    00003fc7: 	jmp	.Ltmp2681 # Offset: 16327
.Ltmp2680:
    00003fc9: 	movq	-0xfe0(%rbp), %rdi
    00003fd0: 	cmpq	%rbx, %rdi
    00003fd3: 	je	.Ltmp2682 # Offset: 16339
    00003fd5: 	movq	-0xfd0(%rbp), %rax
    00003fdc: 	leaq	0x1(%rax), %rsi
    00003fe0: 	callq	_ZdlPvm@PLT # Offset: 16352
.Ltmp2682:
    00003fe5: 	movq	%r15, %rbx
.Ltmp2689:
    00003fe8: 	movq	-0x3f80(%rbp), %rdi
    00003fef: 	cmpq	-0x4080(%rbp), %rdi
    00003ff6: 	je	.Ltmp2683 # Offset: 16374
    00003ff8: 	movq	-0x3f70(%rbp), %rax
    00003fff: 	leaq	0x1(%rax), %rsi
    00004003: 	callq	_ZdlPvm@PLT # Offset: 16387
.Ltmp2683:
    00004008: 	movq	-0x3fc0(%rbp), %rdi
    0000400f: 	movq	-0x3fb0(%rbp), %rsi
    00004016: 	subq	%rdi, %rsi
    00004019: 	testq	%rdi, %rdi
    0000401c: 	je	.Ltmp2684 # Offset: 16412
    0000401e: 	callq	_ZdlPvm@PLT # Offset: 16414
.Ltmp2684:
    00004023: 	movq	%rbx, %rdi
    00004026: 	callq	_Unwind_Resume@PLT # Offset: 16422
    0000402b: 	endbr64
    0000402f: 	jmp	.Ltmp2681 # Offset: 16431
    00004031: 	endbr64
    00004035: 	jmp	.Ltmp2681 # Offset: 16437
    0000403a: 	endbr64
    0000403e: 	jmp	.Ltmp2681 # Offset: 16446
    00004043: 	endbr64
    00004047: 	jmp	.Ltmp2681 # Offset: 16455
    0000404c: 	endbr64
    00004050: 	jmp	.Ltmp2681 # Offset: 16464
    00004055: 	endbr64
    00004059: 	jmp	.Ltmp2681 # Offset: 16473
    0000405e: 	endbr64
    00004062: 	jmp	.Ltmp2681 # Offset: 16482
    00004067: 	endbr64
    0000406b: 	jmp	.Ltmp2681 # Offset: 16491
    00004070: 	endbr64
    00004074: 	jmp	.Ltmp2681 # Offset: 16500
    00004079: 	endbr64
    0000407d: 	jmp	.Ltmp2681 # Offset: 16509
    00004082: 	endbr64
    00004086: 	jmp	.Ltmp2681 # Offset: 16518
    0000408b: 	endbr64
    0000408f: 	jmp	.Ltmp2681 # Offset: 16527
    00004094: 	endbr64
.Ltmp2690:
    00004098: 	movq	%rax, %r15
    0000409b: 	jmp	.Ltmp2685 # Offset: 16539
    0000409d: 	endbr64
    000040a1: 	jmp	.Ltmp2681 # Offset: 16545
    000040a6: 	endbr64
    000040aa: 	jmp	.Ltmp2681 # Offset: 16554
    000040af: 	endbr64
    000040b3: 	jmp	.Ltmp2681 # Offset: 16563
.Ltmp2685:
    000040b8: 	movq	-0xfe0(%rbp), %rdi
    000040bf: 	cmpq	%rbx, %rdi
    000040c2: 	je	.Ltmp2686 # Offset: 16578
    000040c4: 	movq	-0xfd0(%rbp), %rax
    000040cb: 	leaq	0x1(%rax), %rsi
    000040cf: 	callq	_ZdlPvm@PLT # Offset: 16591
.Ltmp2686:
    000040d4: 	movq	%r15, %rbx
.Ltmp2700:
    000040d7: 	movq	-0x3f20(%rbp), %rdi
    000040de: 	leaq	-0x3f10(%rbp), %rax
    000040e5: 	cmpq	%rax, %rdi
    000040e8: 	je	.Ltmp2687 # Offset: 16616
    000040ea: 	movq	-0x3f10(%rbp), %rax
    000040f1: 	leaq	0x1(%rax), %rsi
    000040f5: 	callq	_ZdlPvm@PLT # Offset: 16629
.Ltmp2687:
    000040fa: 	movq	-0x3f40(%rbp), %rdi
    00004101: 	leaq	-0x3f30(%rbp), %rax
    00004108: 	cmpq	%rax, %rdi
    0000410b: 	je	.Ltmp2688 # Offset: 16651
    0000410d: 	movq	-0x3f30(%rbp), %rax
    00004114: 	leaq	0x1(%rax), %rsi
    00004118: 	callq	_ZdlPvm@PLT # Offset: 16664
.Ltmp2688:
    0000411d: 	movq	-0x3f60(%rbp), %rdi
    00004124: 	leaq	-0x3f50(%rbp), %rax
    0000412b: 	cmpq	%rax, %rdi
    0000412e: 	je	.Ltmp2689 # Offset: 16686
    00004134: 	movq	-0x3f50(%rbp), %rax
    0000413b: 	leaq	0x1(%rax), %rsi
    0000413f: 	callq	_ZdlPvm@PLT # Offset: 16703
    00004144: 	jmp	.Ltmp2689 # Offset: 16708
    00004149: 	endbr64
    0000414d: 	jmp	.Ltmp2681 # Offset: 16717
    00004152: 	endbr64
    00004156: 	jmp	.Ltmp2681 # Offset: 16726
    0000415b: 	endbr64
    0000415f: 	jmp	.Ltmp2681 # Offset: 16735
    00004164: 	endbr64
    00004168: 	jmp	.Ltmp2681 # Offset: 16744
    0000416d: 	endbr64
    00004171: 	jmp	.Ltmp2690 # Offset: 16753
    00004176: 	endbr64
    0000417a: 	movq	%rax, %rbx
    0000417d: 	jmp	.Ltmp2688 # Offset: 16765
    0000417f: 	endbr64
.Ltmp2692:
    00004183: 	movq	%rax, %r15
    00004186: 	jmp	.Ltmp2691 # Offset: 16774
    00004188: 	endbr64
    0000418c: 	jmp	.Ltmp2692 # Offset: 16780
    0000418e: 	endbr64
    00004192: 	jmp	.Ltmp2692 # Offset: 16786
    00004194: 	endbr64
    00004198: 	jmp	.Ltmp2692 # Offset: 16792
    0000419a: 	endbr64
    0000419e: 	jmp	.Ltmp2692 # Offset: 16798
    000041a0: 	endbr64
    000041a4: 	jmp	.Ltmp2692 # Offset: 16804
.Ltmp2691:
    000041a6: 	movq	-0xfe0(%rbp), %rdi
    000041ad: 	cmpq	%rbx, %rdi
    000041b0: 	je	.Ltmp2693 # Offset: 16816
    000041b2: 	movq	-0xfd0(%rbp), %rax
    000041b9: 	leaq	0x1(%rax), %rsi
    000041bd: 	callq	_ZdlPvm@PLT # Offset: 16829
.Ltmp2693:
    000041c2: 	movq	%r15, %rbx
    000041c5: 	jmp	.Ltmp2688 # Offset: 16837
    000041ca: 	endbr64
.Ltmp2695:
    000041ce: 	movq	%rax, %rbx
    000041d1: 	jmp	.Ltmp2694 # Offset: 16849
    000041d3: 	endbr64
    000041d7: 	jmp	.Ltmp2695 # Offset: 16855
    000041d9: 	endbr64
.Ltmp2697:
    000041dd: 	movq	%rax, %r15
    000041e0: 	jmp	.Ltmp2696 # Offset: 16864
    000041e5: 	endbr64
    000041e9: 	jmp	.Ltmp2695 # Offset: 16873
    000041eb: 	endbr64
    000041ef: 	movq	%rax, %rbx
    000041f2: 	jmp	.Ltmp2687 # Offset: 16882
    000041f7: 	endbr64
    000041fb: 	jmp	.Ltmp2692 # Offset: 16891
    000041fd: 	endbr64
    00004201: 	jmp	.Ltmp2692 # Offset: 16897
    00004203: 	endbr64
    00004207: 	jmp	.Ltmp2692 # Offset: 16903
    0000420c: 	endbr64
    00004210: 	jmp	.Ltmp2697 # Offset: 16912
    00004212: 	endbr64
    00004216: 	jmp	.Ltmp2697 # Offset: 16918
    00004218: 	endbr64
    0000421c: 	jmp	.Ltmp2697 # Offset: 16924
.Ltmp2694:
    0000421e: 	movq	-0x3ee0(%rbp), %rdi
    00004225: 	cmpq	-0x4018(%rbp), %rdi
    0000422c: 	je	.Ltmp2698 # Offset: 16940
.Ltmp2701:
    0000422e: 	movq	-0x3ed0(%rbp), %rax
    00004235: 	leaq	0x1(%rax), %rsi
    00004239: 	callq	_ZdlPvm@PLT # Offset: 16953
.Ltmp2698:
    0000423e: 	movq	-0x3fa0(%rbp), %rdi
    00004245: 	movq	-0x3f90(%rbp), %rsi
    0000424c: 	subq	%rdi, %rsi
    0000424f: 	testq	%rdi, %rdi
    00004252: 	je	.Ltmp2699 # Offset: 16978
    00004254: 	callq	_ZdlPvm@PLT # Offset: 16980
.Ltmp2699:
    00004259: 	movq	-0x3f00(%rbp), %rdi
    00004260: 	leaq	-0x3ef0(%rbp), %rax
    00004267: 	cmpq	%rax, %rdi
    0000426a: 	je	.Ltmp2700 # Offset: 17002
    00004270: 	movq	-0x3ef0(%rbp), %rax
    00004277: 	leaq	0x1(%rax), %rsi
    0000427b: 	callq	_ZdlPvm@PLT # Offset: 17019
    00004280: 	jmp	.Ltmp2700 # Offset: 17024
    00004285: 	endbr64
    00004289: 	jmp	.Ltmp2695 # Offset: 17033
    0000428e: 	endbr64
    00004292: 	jmp	.Ltmp2695 # Offset: 17042
    00004297: 	endbr64
    0000429b: 	jmp	.Ltmp2695 # Offset: 17051
    000042a0: 	endbr64
    000042a4: 	jmp	.Ltmp2697 # Offset: 17060
    000042a9: 	endbr64
    000042ad: 	movq	%rax, %rbx
    000042b0: 	movq	-0x3ee0(%rbp), %rdi
    000042b7: 	leaq	-0x3ed0(%rbp), %rax
    000042be: 	cmpq	%rax, %rdi
    000042c1: 	jne	.Ltmp2701 # Offset: 17089
    000042c7: 	jmp	.Ltmp2698 # Offset: 17095
.Ltmp2696:
    000042cc: 	movq	-0xfe0(%rbp), %rdi
    000042d3: 	cmpq	%rbx, %rdi
    000042d6: 	je	.Ltmp2702 # Offset: 17110
    000042d8: 	movq	-0xfd0(%rbp), %rax
    000042df: 	leaq	0x1(%rax), %rsi
    000042e3: 	callq	_ZdlPvm@PLT # Offset: 17123
.Ltmp2702:
    000042e8: 	movq	%r15, %rbx
    000042eb: 	jmp	.Ltmp2687 # Offset: 17131
    000042f0: 	endbr64
    000042f4: 	jmp	.Ltmp2681 # Offset: 17140
    000042f9: 	endbr64
    000042fd: 	jmp	.Ltmp2690 # Offset: 17149
    00004302: 	endbr64
    00004306: 	movq	%rax, %rbx
    00004309: 	jmp	.Ltmp2700 # Offset: 17161
    0000430e: 	endbr64
    00004312: 	jmp	.Ltmp2697 # Offset: 17170
    00004317: 	endbr64
    0000431b: 	jmp	.Ltmp2697 # Offset: 17179
    00004320: 	endbr64
    00004324: 	jmp	.Ltmp2697 # Offset: 17188
    00004329: 	endbr64
    0000432d: 	jmp	.Ltmp2697 # Offset: 17197
    00004332: 	endbr64
    00004336: 	jmp	.Ltmp2681 # Offset: 17206
    0000433b: 	endbr64
    0000433f: 	movq	%rax, %rbx
    00004342: 	jmp	.Ltmp2703 # Offset: 17218
    00004344: 	endbr64
    00004348: 	jmp	.Ltmp2690 # Offset: 17224
.Ltmp2703:
    0000434d: 	movq	-0xfe0(%rbp), %rdi
    00004354: 	leaq	-0xfd0(%rbp), %rax
    0000435b: 	cmpq	%rax, %rdi
    0000435e: 	je	.Ltmp2689 # Offset: 17246
    00004364: 	movq	-0xfd0(%rbp), %rax
    0000436b: 	leaq	0x1(%rax), %rsi
    0000436f: 	callq	_ZdlPvm@PLT # Offset: 17263
    00004374: 	jmp	.Ltmp2689 # Offset: 17268
    00004379: 	endbr64
    0000437d: 	jmp	.Ltmp2690 # Offset: 17277
    00004382: 	endbr64
    00004386: 	jmp	.Ltmp2690 # Offset: 17286
    0000438b: 	endbr64
    0000438f: 	jmp	.Ltmp2690 # Offset: 17295
    00004394: 	endbr64
    00004398: 	jmp	.Ltmp2690 # Offset: 17304
    0000439d: 	endbr64
    000043a1: 	jmp	.Ltmp2690 # Offset: 17313
    000043a6: 	endbr64
    000043aa: 	movq	%rax, %rbx
    000043ad: 	jmp	.Ltmp2683 # Offset: 17325
    000043b2: 	endbr64
    000043b6: 	movq	%rax, %rbx
    000043b9: 	jmp	.Ltmp2704 # Offset: 17337
    000043bb: 	endbr64
    000043bf: 	movq	%rax, %rbx
    000043c2: 	jmp	.Ltmp2698 # Offset: 17346
.Ltmp2704:
    000043c7: 	movq	-0x1f80(%rbp), %rdi
    000043ce: 	leaq	-0x1f70(%rbp), %rax
    000043d5: 	cmpq	%rax, %rdi
    000043d8: 	je	.Ltmp2698 # Offset: 17368
    000043de: 	movq	-0x1f70(%rbp), %rax
    000043e5: 	leaq	0x1(%rax), %rsi
    000043e9: 	callq	_ZdlPvm@PLT # Offset: 17385
    000043ee: 	jmp	.Ltmp2698 # Offset: 17390
    000043f3: 	endbr64
    000043f7: 	movq	%rax, %rbx
    000043fa: 	jmp	.Ltmp2699 # Offset: 17402
    000043ff: 	endbr64
    00004403: 	jmp	.Ltmp2681 # Offset: 17411
    00004408: 	endbr64
    0000440c: 	jmp	.Ltmp2681 # Offset: 17420
    00004411: 	endbr64
    00004415: 	jmp	.Ltmp2695 # Offset: 17429
    0000441a: 	endbr64
    0000441e: 	movq	%rax, %rbx
    00004421: 	jmp	.Ltmp2689 # Offset: 17441
    00004426: 	endbr64
    0000442a: 	jmp	.Ltmp2681 # Offset: 17450
    0000442f: 	endbr64
    00004433: 	jmp	.Ltmp2681 # Offset: 17459
    00004438: 	endbr64
    0000443c: 	jmp	.Ltmp2681 # Offset: 17468
    00004441: 	endbr64
    00004445: 	jmp	.Ltmp2681 # Offset: 17477
    0000444a: 	endbr64
    0000444e: 	jmp	.Ltmp2681 # Offset: 17486
    00004453: 	endbr64
    00004457: 	jmp	.Ltmp2681 # Offset: 17495
    0000445c: 	endbr64
    00004460: 	jmp	.Ltmp2681 # Offset: 17504
    00004465: 	endbr64
    00004469: 	jmp	.Ltmp2681 # Offset: 17513
    0000446e: 	endbr64
    00004472: 	jmp	.Ltmp2695 # Offset: 17522
DWARF CFI Instructions:
    <empty>
End of Function "_Z11testOneTypeItEvv"

Binary Function "_ZN9benchmark9__sift_inIPssEEvlT_lT0_" after disassembly {
  Number      : 260
  State       : disassembled
  Address     : 0x1aba0
  Size        : 0xfd
  MaxSize     : 0x100
  Offset      : 0x1aba0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIPssEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0259:
    00000000: 	endbr64
    00000004: 	leaq	0x2(%rdx,%rdx), %rax
    00000009: 	pushq	%rbp
    0000000a: 	movq	%rdx, %r8
    0000000d: 	movl	%ecx, %r10d
    00000010: 	pushq	%rbx
    00000011: 	movl	%ecx, %r9d
    00000014: 	cmpq	%rdi, %rax
    00000017: 	jge	.Ltmp2705 # Offset: 23
    0000001d: 	movq	%rdi, %rbp
    00000020: 	movq	%rdx, %rbx
    00000023: 	jmp	.Ltmp2706 # Offset: 35
    00000025: 	nopl	(%rax) # Size: 3
.Ltmp2708:
    00000028: 	subq	$0x1, %rax
    0000002c: 	movw	%r11w, (%rsi,%rbx,2)
    00000031: 	leaq	(%rsi,%rax,2), %rcx
    00000035: 	cmpq	%rdx, %rbp
    00000038: 	jle	.Ltmp2707 # Offset: 56
.Ltmp2709:
    0000003a: 	movq	%rax, %rbx
    0000003d: 	movq	%rdx, %rax
.Ltmp2706:
    00000040: 	leaq	(%rax,%rax), %rdx
    00000044: 	leaq	(%rsi,%rdx), %rcx
    00000048: 	movzwl	-0x2(%rsi,%rdx), %r11d
    0000004e: 	movzwl	(%rcx), %edi
    00000051: 	cmpw	%di, %r11w
    00000055: 	jge	.Ltmp2708 # Offset: 85
    00000057: 	leaq	0x2(%rax,%rax), %rdx
    0000005c: 	movw	%di, (%rsi,%rbx,2)
    00000060: 	cmpq	%rdx, %rbp
    00000063: 	jg	.Ltmp2709 # Offset: 99
.Ltmp2707:
    00000065: 	cmpq	%rdx, %rbp
    00000068: 	je	.Ltmp2710 # Offset: 104
.Ltmp2715:
    0000006a: 	leaq	-0x1(%rax), %rdx
    0000006e: 	movq	%rdx, %rdi
    00000071: 	shrq	$0x3f, %rdi
    00000075: 	addq	%rdx, %rdi
    00000078: 	sarq	%rdi
    0000007b: 	cmpq	%r8, %rax
    0000007e: 	jg	.Ltmp2711 # Offset: 126
    00000080: 	jmp	.Ltmp2712 # Offset: 128
    00000082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2714:
    00000088: 	movw	%dx, (%rcx)
    0000008b: 	leaq	-0x1(%rdi), %rdx
    0000008f: 	movq	%rdx, %rax
    00000092: 	shrq	$0x3f, %rax
    00000096: 	addq	%rdx, %rax
    00000099: 	sarq	%rax
    0000009c: 	movq	%rax, %rdx
    0000009f: 	movq	%rdi, %rax
    000000a2: 	cmpq	%rdi, %r8
    000000a5: 	jge	.Ltmp2713 # Offset: 165
    000000a7: 	movq	%rdx, %rdi
.Ltmp2711:
    000000aa: 	leaq	(%rsi,%rdi,2), %r11
    000000ae: 	leaq	(%rsi,%rax,2), %rcx
    000000b2: 	movzwl	(%r11), %edx
    000000b6: 	cmpw	%r9w, %dx
    000000ba: 	jl	.Ltmp2714 # Offset: 186
.Ltmp2712:
    000000bc: 	movw	%r10w, (%rcx)
    000000c0: 	popq	%rbx
    000000c1: 	popq	%rbp
    000000c2: 	retq # Offset: 194
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2713:
    000000c8: 	movq	%r11, %rcx
    000000cb: 	movw	%r10w, (%rcx)
    000000cf: 	popq	%rbx
    000000d0: 	popq	%rbp
    000000d1: 	retq # Offset: 209
    000000d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2705:
    000000d8: 	leaq	(%rsi,%rdx,2), %rcx
    000000dc: 	jne	.Ltmp2712 # Offset: 220
    000000de: 	movq	%rax, %rdx
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp2710:
    000000e8: 	movzwl	-0x2(%rsi,%rdx,2), %eax
    000000ed: 	movw	%ax, (%rcx)
    000000f0: 	leaq	-0x1(%rdx), %rax
    000000f4: 	leaq	(%rsi,%rax,2), %rcx
    000000f8: 	jmp	.Ltmp2715 # Offset: 248
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIPssEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsEEvlT_lT0_" after disassembly {
  Number      : 261
  State       : disassembled
  Address     : 0x1aca0
  Size        : 0xf6
  MaxSize     : 0x100
  Offset      : 0x1aca0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0260:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	pushq	%r12
    0000000e: 	movl	%ecx, %r10d
    00000011: 	pushq	%rbp
    00000012: 	movl	%ecx, %r9d
    00000015: 	pushq	%rbx
    00000016: 	cmpq	%rdi, %rdx
    00000019: 	jge	.Ltmp2716 # Offset: 25
    0000001f: 	movq	%rdi, %rbp
    00000022: 	movq	%r8, %r12
    00000025: 	jmp	.Ltmp2717 # Offset: 37
    00000027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2719:
    00000030: 	movq	%rax, %r12
.Ltmp2717:
    00000033: 	leaq	-0x1(%rdx), %rax
    00000037: 	leaq	(%rax,%rax), %r11
    0000003b: 	leaq	(%rsi,%r11), %rcx
    0000003f: 	leaq	0x2(%r11,%rsi), %r11
    00000044: 	movzwl	(%rcx), %edi
    00000047: 	movzwl	(%r11), %ebx
    0000004b: 	cmpw	%di, %bx
    0000004e: 	jle	.Ltmp2718 # Offset: 78
    00000050: 	movq	%rdx, %rax
    00000053: 	movl	%ebx, %edi
    00000055: 	movq	%r11, %rcx
    00000058: 	addq	$0x1, %rdx
.Ltmp2718:
    0000005c: 	addq	%rdx, %rdx
    0000005f: 	movw	%di, (%rsi,%r12,2)
    00000064: 	cmpq	%rdx, %rbp
    00000067: 	jg	.Ltmp2719 # Offset: 103
    00000069: 	je	.Ltmp2720 # Offset: 105
.Ltmp2725:
    0000006b: 	leaq	-0x1(%rax), %rdx
    0000006f: 	movq	%rdx, %rdi
    00000072: 	shrq	$0x3f, %rdi
    00000076: 	addq	%rdx, %rdi
    00000079: 	sarq	%rdi
    0000007c: 	cmpq	%r8, %rax
    0000007f: 	jg	.Ltmp2721 # Offset: 127
    00000081: 	jmp	.Ltmp2722 # Offset: 129
    00000083: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2724:
    00000088: 	movw	%dx, (%rcx)
    0000008b: 	leaq	-0x1(%rdi), %rdx
    0000008f: 	movq	%rdx, %rax
    00000092: 	shrq	$0x3f, %rax
    00000096: 	addq	%rdx, %rax
    00000099: 	sarq	%rax
    0000009c: 	movq	%rax, %rdx
    0000009f: 	movq	%rdi, %rax
    000000a2: 	cmpq	%rdi, %r8
    000000a5: 	jge	.Ltmp2723 # Offset: 165
    000000a7: 	movq	%rdx, %rdi
.Ltmp2721:
    000000aa: 	leaq	(%rsi,%rdi,2), %r11
    000000ae: 	leaq	(%rsi,%rax,2), %rcx
    000000b2: 	movzwl	(%r11), %edx
    000000b6: 	cmpw	%r9w, %dx
    000000ba: 	jl	.Ltmp2724 # Offset: 186
.Ltmp2722:
    000000bc: 	movw	%r10w, (%rcx)
    000000c0: 	popq	%rbx
    000000c1: 	popq	%rbp
    000000c2: 	popq	%r12
    000000c4: 	retq # Offset: 196
    000000c5: 	nopl	(%rax) # Size: 3
.Ltmp2723:
    000000c8: 	movq	%r11, %rcx
    000000cb: 	movw	%r10w, (%rcx)
    000000cf: 	popq	%rbx
    000000d0: 	popq	%rbp
    000000d1: 	popq	%r12
    000000d3: 	retq # Offset: 211
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp2716:
    000000d8: 	leaq	(%rsi,%r8,2), %rcx
    000000dc: 	jne	.Ltmp2722 # Offset: 220
    000000de: 	nop # Size: 2
.Ltmp2720:
    000000e0: 	leaq	-0x1(%rdx), %rax
    000000e4: 	leaq	(%rsi,%rax,2), %rdx
    000000e8: 	movzwl	(%rdx), %edi
    000000eb: 	movw	%di, (%rcx)
    000000ee: 	movq	%rdx, %rcx
    000000f1: 	jmp	.Ltmp2725 # Offset: 241
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsEEvlT_lT0_"

Binary Function "_Z11testOneTypeIsEvv" after disassembly {
  Number      : 262
  State       : disassembled
  Address     : 0x1ada0
  Size        : 0x4477
  MaxSize     : 0x4480
  Offset      : 0x1ada0
  Section     : .text
  Orc Section : .local.text._Z11testOneTypeIsEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0261:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rsp, %rbp
    00000008: 	pushq	%r15
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbx
    00000011: 	leaq	-0x4000(%rsp), %r11
.Ltmp2726:
    00000019: 	subq	$0x1000, %rsp
    00000020: 	orq	$0x0, (%rsp)
    00000025: 	cmpq	%r11, %rsp
    00000028: 	jne	.Ltmp2726 # Offset: 40
    0000002a: 	subq	$0x78, %rsp
    0000002e: 	pxor	%xmm0, %xmm0
    00000032: 	movl	$0x7d0, %esi
    00000037: 	movq	%fs:0x28, %rax
    00000040: 	movq	%rax, -0x38(%rbp)
    00000044: 	xorl	%eax, %eax
    00000046: 	leaq	-0x3fc0(%rbp), %rdi
    0000004d: 	movaps	%xmm0, -0x3fc0(%rbp)
    00000054: 	movq	$0x0, -0x3fb0(%rbp)
    0000005f: 	callq	_ZNSt6vectorIsSaIsEE17_M_default_appendEm # Offset: 95
    00000064: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm4
    0000006c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000073: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm6
    0000007b: 	movq	_Z7gLabelsB5cxx11+56(%rip), %r13
    00000082: 	movhlps	%xmm4, %xmm7
    00000085: 	movq	%rax, -0x3fd8(%rbp)
    0000008c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    00000093: 	movq	%xmm7, %rbx
    00000098: 	movaps	%xmm6, -0x4010(%rbp)
    0000009f: 	movq	%xmm6, %rdi
    000000a4: 	leaq	0x8(%rbx), %r12
    000000a8: 	movq	%rax, -0x3fe0(%rbp)
    000000af: 	movaps	%xmm4, -0x4000(%rbp)
    000000b6: 	movq	%r12, %r14
    000000b9: 	movq	%xmm7, -0x3ff0(%rbp)
    000000c1: 	movq	%xmm4, -0x3fe8(%rbp)
    000000c9: 	cmpq	%r12, %rax
    000000cc: 	jbe	.Ltmp2727 # Offset: 204
    000000ce: 	movq	%xmm6, -0x4018(%rbp)
.Ltmp2730:
    000000d6: 	movq	(%r14), %r15
    000000d9: 	leaq	0x200(%r15), %rbx
.Ltmp2729:
    000000e0: 	movq	(%r15), %rdi
    000000e3: 	leaq	0x10(%r15), %rdx
    000000e7: 	cmpq	%rdx, %rdi
    000000ea: 	je	.Ltmp2728 # Offset: 234
    000000f0: 	movq	0x10(%r15), %rax
    000000f4: 	addq	$0x20, %r15
    000000f8: 	leaq	0x1(%rax), %rsi
    000000fc: 	callq	_ZdlPvm@PLT # Offset: 252
    00000101: 	cmpq	%rbx, %r15
    00000104: 	jne	.Ltmp2729 # Offset: 260
    00000106: 	addq	$0x8, %r14
    0000010a: 	cmpq	%r14, -0x3fe0(%rbp)
    00000111: 	ja	.Ltmp2730 # Offset: 273
.Ltmp2873:
    00000113: 	movq	-0x4018(%rbp), %rdi
.Ltmp2727:
    0000011a: 	movq	-0x3ff0(%rbp), %rbx
    00000121: 	cmpq	%rbx, -0x3fe0(%rbp)
    00000128: 	je	.Ltmp2731 # Offset: 296
    0000012e: 	movq	%rdi, %rsi
    00000131: 	cmpq	%rdi, -0x3fe8(%rbp)
    00000138: 	je	.Ltmp2732 # Offset: 312
.Ltmp2735:
    0000013a: 	movq	(%rsi), %rdi
    0000013d: 	leaq	0x10(%rsi), %rax
    00000141: 	movq	%rsi, %rbx
    00000144: 	cmpq	%rax, %rdi
    00000147: 	je	.Ltmp2733 # Offset: 327
.Ltmp2734:
    00000149: 	movq	0x10(%rsi), %rax
    0000014d: 	addq	$0x20, %rbx
    00000151: 	leaq	0x1(%rax), %rsi
    00000155: 	movq	%rax, -0x3fe0(%rbp)
    0000015c: 	callq	_ZdlPvm@PLT # Offset: 348
    00000161: 	movq	%rbx, %rsi
    00000164: 	cmpq	-0x3fe8(%rbp), %rbx
    0000016b: 	je	.Ltmp2732 # Offset: 363
    0000016d: 	movq	(%rsi), %rdi
    00000170: 	leaq	0x10(%rsi), %rax
    00000174: 	movq	%rsi, %rbx
    00000177: 	cmpq	%rax, %rdi
    0000017a: 	jne	.Ltmp2734 # Offset: 378
.Ltmp2733:
    0000017c: 	movq	%rsi, %rax
    0000017f: 	addq	$0x20, %rax
    00000183: 	movq	%rax, %rsi
    00000186: 	cmpq	-0x3fe8(%rbp), %rax
    0000018d: 	jne	.Ltmp2735 # Offset: 397
    0000018f: 	cmpq	%r13, -0x3fd8(%rbp)
    00000196: 	je	.Ltmp2736 # Offset: 406
.Ltmp2738:
    00000198: 	movq	(%r13), %rdi
    0000019c: 	leaq	0x10(%r13), %rax
    000001a0: 	cmpq	%rax, %rdi
    000001a3: 	je	.Ltmp2737 # Offset: 419
    000001a5: 	movq	0x10(%r13), %rax
    000001a9: 	leaq	0x1(%rax), %rsi
    000001ad: 	callq	_ZdlPvm@PLT # Offset: 429
.Ltmp2737:
    000001b2: 	addq	$0x20, %r13
.Ltmp2732:
    000001b6: 	cmpq	%r13, -0x3fd8(%rbp)
    000001bd: 	jne	.Ltmp2738 # Offset: 445
.Ltmp2736:
    000001bf: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    000001c6: 	leaq	0x8(%rax), %rbx
    000001ca: 	cmpq	%r12, %rbx
    000001cd: 	jbe	.Ltmp2739 # Offset: 461
.Ltmp2740:
    000001cf: 	movq	(%r12), %rdi
    000001d3: 	movl	$0x200, %esi
    000001d8: 	addq	$0x8, %r12
    000001dc: 	callq	_ZdlPvm@PLT # Offset: 476
    000001e1: 	cmpq	%r12, %rbx
    000001e4: 	ja	.Ltmp2740 # Offset: 484
.Ltmp2739:
    000001e6: 	cvttsd2si	init_value(%rip), %ecx
    000001ee: 	leaq	-0x3f70(%rbp), %rax
    000001f5: 	movdqa	-0x4010(%rbp), %xmm7
    000001fd: 	movl	$0x5f36, %r11d
    00000203: 	movq	%rax, -0x4080(%rbp)
    0000020a: 	leaq	-0x1f80(%rbp), %r12
    00000211: 	movq	%rax, -0x3f80(%rbp)
    00000218: 	leaq	-0x2f20(%rbp), %rax
    0000021f: 	movaps	%xmm7, _Z7gLabelsB5cxx11+48(%rip)
    00000226: 	movdqa	-0x4000(%rbp), %xmm7
    0000022e: 	movd	%ecx, %xmm0
    00000232: 	movw	%r11w, -0x3f6c(%rbp)
    0000023a: 	movl	$0x31746e69, -0x3f70(%rbp)
    00000244: 	punpcklwd	%xmm0, %xmm0
    00000248: 	movb	$0x74, -0x3f6a(%rbp)
    0000024f: 	pshufd	$0x0, %xmm0, %xmm0
    00000254: 	movq	$0x7, -0x3f78(%rbp)
    0000025f: 	movb	$0x0, -0x3f69(%rbp)
    00000266: 	movq	%rax, -0x3fe0(%rbp)
    0000026d: 	movaps	%xmm7, _Z7gLabelsB5cxx11+64(%rip)
.Ltmp2741:
    00000274: 	movaps	%xmm0, (%rax)
    00000277: 	addq	$0x10, %rax
    0000027b: 	cmpq	%rax, %r12
    0000027e: 	jne	.Ltmp2741 # Offset: 638
    00000280: 	leaq	-0x3ec0(%rbp), %rax
    00000287: 	movq	%rax, -0x4000(%rbp)
.Ltmp2742:
    0000028e: 	movaps	%xmm0, (%rax)
    00000291: 	addq	$0x10, %rax
    00000295: 	cmpq	%rax, -0x3fe0(%rbp)
    0000029c: 	jne	.Ltmp2742 # Offset: 668
    0000029e: 	movq	-0x3fb8(%rbp), %rax
    000002a5: 	movq	-0x3fc0(%rbp), %r13
    000002ac: 	movq	%rax, -0x3fe8(%rbp)
    000002b3: 	cmpq	%r13, %rax
    000002b6: 	je	.Ltmp2743 # Offset: 694
    000002bc: 	movq	%rax, %rbx
    000002bf: 	movq	%r13, %rax
    000002c2: 	leaq	-0x2(%rbx), %rdx
    000002c6: 	subq	%r13, %rdx
    000002c9: 	movq	%rdx, %rsi
    000002cc: 	shrq	%rsi
    000002cf: 	leaq	0x1(%rsi), %rdi
    000002d3: 	cmpq	$0xc, %rdx
    000002d7: 	jbe	.Ltmp2744 # Offset: 727
    000002dd: 	movq	%rdi, %rdx
    000002e0: 	shrq	$0x3, %rdx
    000002e4: 	shlq	$0x4, %rdx
    000002e8: 	addq	%r13, %rdx
.Ltmp2745:
    000002eb: 	movups	%xmm0, (%rax)
    000002ee: 	addq	$0x10, %rax
    000002f2: 	cmpq	%rax, %rdx
    000002f5: 	jne	.Ltmp2745 # Offset: 757
    000002f7: 	movq	%rdi, %rdx
    000002fa: 	andq	$-0x8, %rdx
    000002fe: 	leaq	(%r13,%rdx,2), %rax
    00000303: 	cmpq	%rdi, %rdx
    00000306: 	je	.Ltmp2743 # Offset: 774
.Ltmp3072:
    00000308: 	subq	%rdx, %rsi
    0000030b: 	leaq	0x1(%rsi), %rdi
    0000030f: 	cmpq	$0x2, %rsi
    00000313: 	jbe	.Ltmp2746 # Offset: 787
    00000315: 	movd	%ecx, %xmm5
    00000319: 	pshuflw	$0x0, %xmm5, %xmm0
    0000031e: 	movq	%xmm0, (%r13,%rdx,2)
    00000325: 	movq	%rdi, %rdx
    00000328: 	andq	$-0x4, %rdx
    0000032c: 	leaq	(%rax,%rdx,2), %rax
    00000330: 	cmpq	%rdi, %rdx
    00000333: 	je	.Ltmp2743 # Offset: 819
.Ltmp2746:
    00000335: 	movq	-0x3fe8(%rbp), %rbx
    0000033c: 	leaq	0x2(%rax), %rdx
    00000340: 	movw	%cx, (%rax)
    00000343: 	cmpq	%rdx, %rbx
    00000346: 	je	.Ltmp2743 # Offset: 838
    00000348: 	leaq	0x4(%rax), %rdx
    0000034c: 	movw	%cx, 0x2(%rax)
    00000350: 	cmpq	%rdx, %rbx
    00000353: 	je	.Ltmp2743 # Offset: 851
    00000355: 	movw	%cx, 0x4(%rax)
.Ltmp2743:
    00000359: 	leaq	-0xfe0(%rbp), %rax
    00000360: 	leaq	-0x3f80(%rbp), %r15
    00000367: 	leaq	DATAat0x241e8(%rip), %rdx
    0000036e: 	movq	%r15, %rsi
    00000371: 	movq	%rax, %rdi
    00000374: 	movq	%rax, -0x3fd8(%rbp)
    0000037b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 891
    00000380: 	movq	-0x3fd8(%rbp), %r8
    00000387: 	movq	-0x3fe0(%rbp), %rdi
    0000038e: 	xorl	%edx, %edx
    00000390: 	movq	%r12, %rsi
    00000393: 	leaq	_Z16accumulate_arrayIsET_PKS0_S2_S0_(%rip), %rcx
    0000039a: 	callq	_Z15test_accumulateIsPsPFsPKsS2_sEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 922
    0000039f: 	movq	-0xfe0(%rbp), %rdi
    000003a6: 	leaq	-0xfd0(%rbp), %rbx
    000003ad: 	cmpq	%rbx, %rdi
    000003b0: 	je	.Ltmp2747 # Offset: 944
    000003b2: 	movq	-0xfd0(%rbp), %rax
    000003b9: 	leaq	0x1(%rax), %rsi
    000003bd: 	callq	_ZdlPvm@PLT # Offset: 957
.Ltmp2747:
    000003c2: 	movq	-0x3fd8(%rbp), %r14
    000003c9: 	leaq	DATAat0x241f5(%rip), %rdx
    000003d0: 	movq	%r15, %rsi
    000003d3: 	movq	%r14, %rdi
    000003d6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 982
    000003db: 	movq	-0x3fe0(%rbp), %rdi
    000003e2: 	movq	%r14, %r8
    000003e5: 	xorl	%edx, %edx
    000003e7: 	movq	%r12, %rsi
    000003ea: 	leaq	_Z17accumulate_array2IsET_PKS0_S2_S0_(%rip), %rcx
    000003f1: 	callq	_Z15test_accumulateIsPsPFsPKsS2_sEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1009
    000003f6: 	movq	-0xfe0(%rbp), %rdi
    000003fd: 	cmpq	%rbx, %rdi
    00000400: 	je	.Ltmp2748 # Offset: 1024
    00000402: 	movq	-0xfd0(%rbp), %rax
    00000409: 	leaq	0x1(%rax), %rsi
    0000040d: 	callq	_ZdlPvm@PLT # Offset: 1037
.Ltmp2748:
    00000412: 	movq	-0x3fd8(%rbp), %r14
    00000419: 	leaq	DATAat0x24203(%rip), %rdx
    00000420: 	movq	%r15, %rsi
    00000423: 	movq	%r14, %rdi
    00000426: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1062
    0000042b: 	movq	-0x3fe0(%rbp), %rdi
    00000432: 	movq	%r14, %r8
    00000435: 	xorl	%edx, %edx
    00000437: 	movq	%r12, %rsi
    0000043a: 	leaq	_Z17accumulate_array3IsET_PKS0_S2_S0_(%rip), %rcx
    00000441: 	callq	_Z15test_accumulateIsPsPFsPKsS2_sEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1089
    00000446: 	movq	-0xfe0(%rbp), %rdi
    0000044d: 	cmpq	%rbx, %rdi
    00000450: 	je	.Ltmp2749 # Offset: 1104
    00000452: 	movq	-0xfd0(%rbp), %rax
    00000459: 	leaq	0x1(%rax), %rsi
    0000045d: 	callq	_ZdlPvm@PLT # Offset: 1117
.Ltmp2749:
    00000462: 	movq	-0x3fd8(%rbp), %r14
    00000469: 	leaq	DATAat0x24211(%rip), %rdx
    00000470: 	movq	%r15, %rsi
    00000473: 	movq	%r14, %rdi
    00000476: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1142
    0000047b: 	movq	-0x3fe0(%rbp), %rdi
    00000482: 	movq	%r14, %r8
    00000485: 	xorl	%edx, %edx
    00000487: 	movq	%r12, %rsi
    0000048a: 	leaq	_Z17accumulate_array4IsET_PKS0_S2_S0_(%rip), %rcx
    00000491: 	callq	_Z15test_accumulateIsPsPFsPKsS2_sEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1169
    00000496: 	movq	-0xfe0(%rbp), %rdi
    0000049d: 	cmpq	%rbx, %rdi
    000004a0: 	je	.Ltmp2750 # Offset: 1184
    000004a2: 	movq	-0xfd0(%rbp), %rax
    000004a9: 	leaq	0x1(%rax), %rsi
    000004ad: 	callq	_ZdlPvm@PLT # Offset: 1197
.Ltmp2750:
    000004b2: 	movq	-0x3fd8(%rbp), %r14
    000004b9: 	leaq	DATAat0x2421f(%rip), %rdx
    000004c0: 	movq	%r15, %rsi
    000004c3: 	movq	%r14, %rdi
    000004c6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1222
    000004cb: 	movq	-0x3fe0(%rbp), %rdi
    000004d2: 	movq	%r14, %r8
    000004d5: 	xorl	%edx, %edx
    000004d7: 	movq	%r12, %rsi
    000004da: 	leaq	_Z14accumulate_ptrIsET_PKS0_S2_S0_(%rip), %rcx
    000004e1: 	callq	_Z15test_accumulateIsPsPFsPKsS2_sEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1249
    000004e6: 	movq	-0xfe0(%rbp), %rdi
    000004ed: 	cmpq	%rbx, %rdi
    000004f0: 	je	.Ltmp2751 # Offset: 1264
    000004f2: 	movq	-0xfd0(%rbp), %rax
    000004f9: 	leaq	0x1(%rax), %rsi
    000004fd: 	callq	_ZdlPvm@PLT # Offset: 1277
.Ltmp2751:
    00000502: 	movq	-0x3fd8(%rbp), %r14
    00000509: 	leaq	DATAat0x2422e(%rip), %rdx
    00000510: 	movq	%r15, %rsi
    00000513: 	movq	%r14, %rdi
    00000516: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1302
    0000051b: 	movq	-0x3fe0(%rbp), %rdi
    00000522: 	movq	%r14, %r8
    00000525: 	xorl	%edx, %edx
    00000527: 	movq	%r12, %rsi
    0000052a: 	leaq	_Z15accumulate_ptr2IsET_PKS0_S2_S0_(%rip), %rcx
    00000531: 	callq	_Z15test_accumulateIsPsPFsPKsS2_sEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1329
    00000536: 	movq	-0xfe0(%rbp), %rdi
    0000053d: 	cmpq	%rbx, %rdi
    00000540: 	je	.Ltmp2752 # Offset: 1344
    00000542: 	movq	-0xfd0(%rbp), %rax
    00000549: 	leaq	0x1(%rax), %rsi
    0000054d: 	callq	_ZdlPvm@PLT # Offset: 1357
.Ltmp2752:
    00000552: 	movq	-0x3fd8(%rbp), %r14
    00000559: 	leaq	DATAat0x2423e(%rip), %rdx
    00000560: 	movq	%r15, %rsi
    00000563: 	movq	%r14, %rdi
    00000566: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1382
    0000056b: 	movq	-0x3fe0(%rbp), %rdi
    00000572: 	movq	%r14, %r8
    00000575: 	xorl	%edx, %edx
    00000577: 	movq	%r12, %rsi
    0000057a: 	leaq	_Z15accumulate_ptr3IsET_PKS0_S2_S0_(%rip), %rcx
    00000581: 	callq	_Z15test_accumulateIsPsPFsPKsS2_sEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1409
    00000586: 	movq	-0xfe0(%rbp), %rdi
    0000058d: 	cmpq	%rbx, %rdi
    00000590: 	je	.Ltmp2753 # Offset: 1424
    00000592: 	movq	-0xfd0(%rbp), %rax
    00000599: 	leaq	0x1(%rax), %rsi
    0000059d: 	callq	_ZdlPvm@PLT # Offset: 1437
.Ltmp2753:
    000005a2: 	movq	-0x3fd8(%rbp), %r14
    000005a9: 	leaq	DATAat0x2424e(%rip), %rdx
    000005b0: 	movq	%r15, %rsi
    000005b3: 	movq	%r14, %rdi
    000005b6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1462
    000005bb: 	movq	-0x3fe0(%rbp), %rdi
    000005c2: 	movq	%r14, %r8
    000005c5: 	xorl	%edx, %edx
    000005c7: 	movq	%r12, %rsi
    000005ca: 	leaq	_Z15accumulate_ptr4IsET_PKS0_S2_S0_(%rip), %rcx
    000005d1: 	callq	_Z15test_accumulateIsPsPFsPKsS2_sEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1489
    000005d6: 	movq	-0xfe0(%rbp), %rdi
    000005dd: 	cmpq	%rbx, %rdi
    000005e0: 	je	.Ltmp2754 # Offset: 1504
    000005e2: 	movq	-0xfd0(%rbp), %rax
    000005e9: 	leaq	0x1(%rax), %rsi
    000005ed: 	callq	_ZdlPvm@PLT # Offset: 1517
.Ltmp2754:
    000005f2: 	movq	-0x3fd8(%rbp), %r14
    000005f9: 	leaq	DATAat0x2425e(%rip), %rdx
    00000600: 	movq	%r15, %rsi
    00000603: 	movq	%r14, %rdi
    00000606: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1542
    0000060b: 	movq	-0x3fe0(%rbp), %rdi
    00000612: 	movq	%r14, %r8
    00000615: 	xorl	%edx, %edx
    00000617: 	movq	%r12, %rsi
    0000061a: 	leaq	_Z15accumulate_ptr5IsET_PKS0_S2_S0_(%rip), %rcx
    00000621: 	callq	_Z15test_accumulateIsPsPFsPKsS2_sEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1569
    00000626: 	movq	-0xfe0(%rbp), %rdi
    0000062d: 	cmpq	%rbx, %rdi
    00000630: 	je	.Ltmp2755 # Offset: 1584
    00000632: 	movq	-0xfd0(%rbp), %rax
    00000639: 	leaq	0x1(%rax), %rsi
    0000063d: 	callq	_ZdlPvm@PLT # Offset: 1597
.Ltmp2755:
    00000642: 	movq	-0x3fd8(%rbp), %r14
    00000649: 	leaq	DATAat0x2426e(%rip), %rdx
    00000650: 	movq	%r15, %rsi
    00000653: 	movq	%r14, %rdi
    00000656: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1622
    0000065b: 	movq	-0x3fe0(%rbp), %rdi
    00000662: 	movq	%r14, %r8
    00000665: 	xorl	%edx, %edx
    00000667: 	movq	%r12, %rsi
    0000066a: 	leaq	_Z15accumulate_ptr6IsET_PKS0_S2_S0_(%rip), %rcx
    00000671: 	callq	_Z15test_accumulateIsPsPFsPKsS2_sEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1649
    00000676: 	movq	-0xfe0(%rbp), %rdi
    0000067d: 	cmpq	%rbx, %rdi
    00000680: 	je	.Ltmp2756 # Offset: 1664
    00000682: 	movq	-0xfd0(%rbp), %rax
    00000689: 	leaq	0x1(%rax), %rsi
    0000068d: 	callq	_ZdlPvm@PLT # Offset: 1677
.Ltmp2756:
    00000692: 	movq	-0x3fd8(%rbp), %r14
    00000699: 	leaq	DATAat0x2427e(%rip), %rdx
    000006a0: 	movq	%r15, %rsi
    000006a3: 	movq	%r14, %rdi
    000006a6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1702
    000006ab: 	movq	-0x3fe0(%rbp), %rdi
    000006b2: 	movq	%r14, %r8
    000006b5: 	xorl	%edx, %edx
    000006b7: 	movq	%r12, %rsi
    000006ba: 	leaq	_Z15accumulate_ptr7IsET_PKS0_S2_S0_(%rip), %rcx
    000006c1: 	callq	_Z15test_accumulateIsPsPFsPKsS2_sEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1729
    000006c6: 	movq	-0xfe0(%rbp), %rdi
    000006cd: 	cmpq	%rbx, %rdi
    000006d0: 	je	.Ltmp2757 # Offset: 1744
    000006d2: 	movq	-0xfd0(%rbp), %rax
    000006d9: 	leaq	0x1(%rax), %rsi
    000006dd: 	callq	_ZdlPvm@PLT # Offset: 1757
.Ltmp2757:
    000006e2: 	movq	-0x3fd8(%rbp), %r14
    000006e9: 	leaq	DATAat0x2428e(%rip), %rdx
    000006f0: 	movq	%r15, %rsi
    000006f3: 	movq	%r14, %rdi
    000006f6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1782
    000006fb: 	movq	-0x3fe0(%rbp), %rdi
    00000702: 	movq	%r14, %r8
    00000705: 	xorl	%edx, %edx
    00000707: 	movq	%r12, %rsi
    0000070a: 	leaq	_Z15accumulate_ptr8IsET_PKS0_S2_S0_(%rip), %rcx
    00000711: 	callq	_Z15test_accumulateIsPsPFsPKsS2_sEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1809
    00000716: 	movq	-0xfe0(%rbp), %rdi
    0000071d: 	cmpq	%rbx, %rdi
    00000720: 	je	.Ltmp2758 # Offset: 1824
    00000722: 	movq	-0xfd0(%rbp), %rax
    00000729: 	leaq	0x1(%rax), %rsi
    0000072d: 	callq	_ZdlPvm@PLT # Offset: 1837
.Ltmp2758:
    00000732: 	movq	-0x3fd8(%rbp), %r14
    00000739: 	leaq	DATAat0x2429e(%rip), %rdx
    00000740: 	movq	%r15, %rsi
    00000743: 	movq	%r14, %rdi
    00000746: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1862
    0000074b: 	movq	-0x3fe0(%rbp), %rdi
    00000752: 	movq	%r14, %rdx
    00000755: 	movq	%r12, %rsi
    00000758: 	callq	"_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.7/1" # Offset: 1880
    0000075d: 	movq	-0xfe0(%rbp), %rdi
    00000764: 	cmpq	%rbx, %rdi
    00000767: 	je	.Ltmp2759 # Offset: 1895
    00000769: 	movq	-0xfd0(%rbp), %rax
    00000770: 	leaq	0x1(%rax), %rsi
    00000774: 	callq	_ZdlPvm@PLT # Offset: 1908
.Ltmp2759:
    00000779: 	movq	-0x3fd8(%rbp), %r14
    00000780: 	leaq	DATAat0x242ae(%rip), %rdx
    00000787: 	movq	%r15, %rsi
    0000078a: 	movq	%r14, %rdi
    0000078d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1933
    00000792: 	movq	-0x3fe0(%rbp), %rsi
    00000799: 	movq	-0x4000(%rbp), %rdi
    000007a0: 	movq	%r14, %rdx
    000007a3: 	callq	"_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.7/1" # Offset: 1955
    000007a8: 	movq	-0xfe0(%rbp), %rdi
    000007af: 	cmpq	%rbx, %rdi
    000007b2: 	je	.Ltmp2760 # Offset: 1970
    000007b4: 	movq	-0xfd0(%rbp), %rax
    000007bb: 	leaq	0x1(%rax), %rsi
    000007bf: 	callq	_ZdlPvm@PLT # Offset: 1983
.Ltmp2760:
    000007c4: 	movq	-0x3fd8(%rbp), %r14
    000007cb: 	leaq	DATAat0x242c9(%rip), %rdx
    000007d2: 	movq	%r15, %rsi
    000007d5: 	movq	%r14, %rdi
    000007d8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2008
    000007dd: 	movq	-0x3fe8(%rbp), %rsi
    000007e4: 	movq	%r14, %r8
    000007e7: 	xorl	%edx, %edx
    000007e9: 	movq	%r13, %rdi
    000007ec: 	leaq	_Z19accumulate_iteratorIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_(%rip), %rcx
    000007f3: 	callq	_Z15test_accumulateIsN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEPFsS6_S6_sEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2035
    000007f8: 	movq	-0xfe0(%rbp), %rdi
    000007ff: 	cmpq	%rbx, %rdi
    00000802: 	je	.Ltmp2761 # Offset: 2050
    00000804: 	movq	-0xfd0(%rbp), %rax
    0000080b: 	leaq	0x1(%rax), %rsi
    0000080f: 	callq	_ZdlPvm@PLT # Offset: 2063
.Ltmp2761:
    00000814: 	movq	-0x3fd8(%rbp), %r14
    0000081b: 	leaq	DATAat0x242e5(%rip), %rdx
    00000822: 	movq	%r15, %rsi
    00000825: 	movq	%r14, %rdi
    00000828: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2088
    0000082d: 	movq	-0x3fe0(%rbp), %rdi
    00000834: 	movq	%r14, %rdx
    00000837: 	movq	%r12, %rsi
    0000083a: 	callq	"_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.6/1" # Offset: 2106
    0000083f: 	movq	-0xfe0(%rbp), %rdi
    00000846: 	cmpq	%rbx, %rdi
    00000849: 	je	.Ltmp2762 # Offset: 2121
    0000084b: 	movq	-0xfd0(%rbp), %rax
    00000852: 	leaq	0x1(%rax), %rsi
    00000856: 	callq	_ZdlPvm@PLT # Offset: 2134
.Ltmp2762:
    0000085b: 	movq	-0x3fd8(%rbp), %r14
    00000862: 	leaq	DATAat0x242f6(%rip), %rdx
    00000869: 	movq	%r15, %rsi
    0000086c: 	movq	%r14, %rdi
    0000086f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2159
    00000874: 	movq	-0x3fe0(%rbp), %rsi
    0000087b: 	movq	-0x4000(%rbp), %rdi
    00000882: 	movq	%r14, %rdx
    00000885: 	callq	"_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.6/1" # Offset: 2181
    0000088a: 	movq	-0xfe0(%rbp), %rdi
    00000891: 	cmpq	%rbx, %rdi
    00000894: 	je	.Ltmp2763 # Offset: 2196
    00000896: 	movq	-0xfd0(%rbp), %rax
    0000089d: 	leaq	0x1(%rax), %rsi
    000008a1: 	callq	_ZdlPvm@PLT # Offset: 2209
.Ltmp2763:
    000008a6: 	movq	-0x3fd8(%rbp), %r14
    000008ad: 	leaq	DATAat0x24312(%rip), %rdx
    000008b4: 	movq	%r15, %rsi
    000008b7: 	movq	%r14, %rdi
    000008ba: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2234
    000008bf: 	movq	-0x3fe8(%rbp), %rsi
    000008c6: 	movq	%r14, %r8
    000008c9: 	xorl	%edx, %edx
    000008cb: 	movq	%r13, %rdi
    000008ce: 	leaq	_Z20accumulate_iterator2IN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_(%rip), %rcx
    000008d5: 	callq	_Z15test_accumulateIsN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEPFsS6_S6_sEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2261
    000008da: 	movq	-0xfe0(%rbp), %rdi
    000008e1: 	cmpq	%rbx, %rdi
    000008e4: 	je	.Ltmp2764 # Offset: 2276
    000008e6: 	movq	-0xfd0(%rbp), %rax
    000008ed: 	leaq	0x1(%rax), %rsi
    000008f1: 	callq	_ZdlPvm@PLT # Offset: 2289
.Ltmp2764:
    000008f6: 	movq	-0x3fd8(%rbp), %r14
    000008fd: 	leaq	DATAat0x2432f(%rip), %rdx
    00000904: 	movq	%r15, %rsi
    00000907: 	movq	%r14, %rdi
    0000090a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2314
    0000090f: 	movq	-0x3fe0(%rbp), %rdi
    00000916: 	movq	%r14, %rdx
    00000919: 	movq	%r12, %rsi
    0000091c: 	callq	"_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.5/1" # Offset: 2332
    00000921: 	movq	-0xfe0(%rbp), %rdi
    00000928: 	cmpq	%rbx, %rdi
    0000092b: 	je	.Ltmp2765 # Offset: 2347
    0000092d: 	movq	-0xfd0(%rbp), %rax
    00000934: 	leaq	0x1(%rax), %rsi
    00000938: 	callq	_ZdlPvm@PLT # Offset: 2360
.Ltmp2765:
    0000093d: 	movq	-0x3fd8(%rbp), %r14
    00000944: 	leaq	DATAat0x24340(%rip), %rdx
    0000094b: 	movq	%r15, %rsi
    0000094e: 	movq	%r14, %rdi
    00000951: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2385
    00000956: 	movq	-0x3fe0(%rbp), %rsi
    0000095d: 	movq	-0x4000(%rbp), %rdi
    00000964: 	movq	%r14, %rdx
    00000967: 	callq	"_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.5/1" # Offset: 2407
    0000096c: 	movq	-0xfe0(%rbp), %rdi
    00000973: 	cmpq	%rbx, %rdi
    00000976: 	je	.Ltmp2766 # Offset: 2422
    00000978: 	movq	-0xfd0(%rbp), %rax
    0000097f: 	leaq	0x1(%rax), %rsi
    00000983: 	callq	_ZdlPvm@PLT # Offset: 2435
.Ltmp2766:
    00000988: 	movq	-0x3fd8(%rbp), %r14
    0000098f: 	leaq	DATAat0x2435c(%rip), %rdx
    00000996: 	movq	%r15, %rsi
    00000999: 	movq	%r14, %rdi
    0000099c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2460
    000009a1: 	movq	-0x3fe8(%rbp), %rsi
    000009a8: 	movq	%r14, %r8
    000009ab: 	xorl	%edx, %edx
    000009ad: 	movq	%r13, %rdi
    000009b0: 	leaq	_Z20accumulate_iterator3IN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_(%rip), %rcx
    000009b7: 	callq	_Z15test_accumulateIsN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEPFsS6_S6_sEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2487
    000009bc: 	movq	-0xfe0(%rbp), %rdi
    000009c3: 	cmpq	%rbx, %rdi
    000009c6: 	je	.Ltmp2767 # Offset: 2502
    000009c8: 	movq	-0xfd0(%rbp), %rax
    000009cf: 	leaq	0x1(%rax), %rsi
    000009d3: 	callq	_ZdlPvm@PLT # Offset: 2515
.Ltmp2767:
    000009d8: 	movq	-0x3fd8(%rbp), %r14
    000009df: 	leaq	DATAat0x24379(%rip), %rdx
    000009e6: 	movq	%r15, %rsi
    000009e9: 	movq	%r14, %rdi
    000009ec: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2540
    000009f1: 	movq	-0x3fe0(%rbp), %rdi
    000009f8: 	movq	%r14, %rdx
    000009fb: 	movq	%r12, %rsi
    000009fe: 	callq	"_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.4/1" # Offset: 2558
    00000a03: 	movq	-0xfe0(%rbp), %rdi
    00000a0a: 	cmpq	%rbx, %rdi
    00000a0d: 	je	.Ltmp2768 # Offset: 2573
    00000a0f: 	movq	-0xfd0(%rbp), %rax
    00000a16: 	leaq	0x1(%rax), %rsi
    00000a1a: 	callq	_ZdlPvm@PLT # Offset: 2586
.Ltmp2768:
    00000a1f: 	movq	-0x3fd8(%rbp), %r14
    00000a26: 	leaq	DATAat0x2438a(%rip), %rdx
    00000a2d: 	movq	%r15, %rsi
    00000a30: 	movq	%r14, %rdi
    00000a33: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2611
    00000a38: 	movq	-0x3fe0(%rbp), %rsi
    00000a3f: 	movq	-0x4000(%rbp), %rdi
    00000a46: 	movq	%r14, %rdx
    00000a49: 	callq	"_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.4/1" # Offset: 2633
    00000a4e: 	movq	-0xfe0(%rbp), %rdi
    00000a55: 	cmpq	%rbx, %rdi
    00000a58: 	je	.Ltmp2769 # Offset: 2648
    00000a5a: 	movq	-0xfd0(%rbp), %rax
    00000a61: 	leaq	0x1(%rax), %rsi
    00000a65: 	callq	_ZdlPvm@PLT # Offset: 2661
.Ltmp2769:
    00000a6a: 	movq	-0x3fd8(%rbp), %r14
    00000a71: 	leaq	DATAat0x243a6(%rip), %rdx
    00000a78: 	movq	%r15, %rsi
    00000a7b: 	movq	%r14, %rdi
    00000a7e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2686
    00000a83: 	movq	-0x3fe8(%rbp), %rsi
    00000a8a: 	movq	%r14, %r8
    00000a8d: 	xorl	%edx, %edx
    00000a8f: 	movq	%r13, %rdi
    00000a92: 	leaq	_Z20accumulate_iterator4IN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_(%rip), %rcx
    00000a99: 	callq	_Z15test_accumulateIsN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEPFsS6_S6_sEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2713
    00000a9e: 	movq	-0xfe0(%rbp), %rdi
    00000aa5: 	cmpq	%rbx, %rdi
    00000aa8: 	je	.Ltmp2770 # Offset: 2728
    00000aaa: 	movq	-0xfd0(%rbp), %rax
    00000ab1: 	leaq	0x1(%rax), %rsi
    00000ab5: 	callq	_ZdlPvm@PLT # Offset: 2741
.Ltmp2770:
    00000aba: 	movq	-0x3fd8(%rbp), %r14
    00000ac1: 	leaq	DATAat0x243c3(%rip), %rdx
    00000ac8: 	movq	%r15, %rsi
    00000acb: 	movq	%r14, %rdi
    00000ace: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2766
    00000ad3: 	movq	-0x3fe0(%rbp), %rdi
    00000ada: 	movq	%r14, %rdx
    00000add: 	movq	%r12, %rsi
    00000ae0: 	callq	"_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.3/1" # Offset: 2784
    00000ae5: 	movq	-0xfe0(%rbp), %rdi
    00000aec: 	cmpq	%rbx, %rdi
    00000aef: 	je	.Ltmp2771 # Offset: 2799
    00000af1: 	movq	-0xfd0(%rbp), %rax
    00000af8: 	leaq	0x1(%rax), %rsi
    00000afc: 	callq	_ZdlPvm@PLT # Offset: 2812
.Ltmp2771:
    00000b01: 	movq	-0x3fd8(%rbp), %r14
    00000b08: 	leaq	DATAat0x243d4(%rip), %rdx
    00000b0f: 	movq	%r15, %rsi
    00000b12: 	movq	%r14, %rdi
    00000b15: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2837
    00000b1a: 	movq	-0x3fe0(%rbp), %rsi
    00000b21: 	movq	-0x4000(%rbp), %rdi
    00000b28: 	movq	%r14, %rdx
    00000b2b: 	callq	"_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.3/1" # Offset: 2859
    00000b30: 	movq	-0xfe0(%rbp), %rdi
    00000b37: 	cmpq	%rbx, %rdi
    00000b3a: 	je	.Ltmp2772 # Offset: 2874
    00000b3c: 	movq	-0xfd0(%rbp), %rax
    00000b43: 	leaq	0x1(%rax), %rsi
    00000b47: 	callq	_ZdlPvm@PLT # Offset: 2887
.Ltmp2772:
    00000b4c: 	movq	-0x3fd8(%rbp), %r14
    00000b53: 	leaq	DATAat0x243f0(%rip), %rdx
    00000b5a: 	movq	%r15, %rsi
    00000b5d: 	movq	%r14, %rdi
    00000b60: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2912
    00000b65: 	movq	-0x3fe8(%rbp), %rsi
    00000b6c: 	movq	%r14, %r8
    00000b6f: 	xorl	%edx, %edx
    00000b71: 	movq	%r13, %rdi
    00000b74: 	leaq	_Z20accumulate_iterator5IN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_(%rip), %rcx
    00000b7b: 	callq	_Z15test_accumulateIsN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEPFsS6_S6_sEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2939
    00000b80: 	movq	-0xfe0(%rbp), %rdi
    00000b87: 	cmpq	%rbx, %rdi
    00000b8a: 	je	.Ltmp2773 # Offset: 2954
    00000b8c: 	movq	-0xfd0(%rbp), %rax
    00000b93: 	leaq	0x1(%rax), %rsi
    00000b97: 	callq	_ZdlPvm@PLT # Offset: 2967
.Ltmp2773:
    00000b9c: 	movq	-0x3fd8(%rbp), %r14
    00000ba3: 	leaq	DATAat0x2440d(%rip), %rdx
    00000baa: 	movq	%r15, %rsi
    00000bad: 	movq	%r14, %rdi
    00000bb0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2992
    00000bb5: 	movq	-0x3fe0(%rbp), %rdi
    00000bbc: 	movq	%r14, %rdx
    00000bbf: 	movq	%r12, %rsi
    00000bc2: 	callq	"_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1" # Offset: 3010
    00000bc7: 	movq	-0xfe0(%rbp), %rdi
    00000bce: 	cmpq	%rbx, %rdi
    00000bd1: 	je	.Ltmp2774 # Offset: 3025
    00000bd3: 	movq	-0xfd0(%rbp), %rax
    00000bda: 	leaq	0x1(%rax), %rsi
    00000bde: 	callq	_ZdlPvm@PLT # Offset: 3038
.Ltmp2774:
    00000be3: 	movq	-0x3fd8(%rbp), %r14
    00000bea: 	leaq	DATAat0x2441e(%rip), %rdx
    00000bf1: 	movq	%r15, %rsi
    00000bf4: 	movq	%r14, %rdi
    00000bf7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3063
    00000bfc: 	movq	-0x3fe0(%rbp), %rsi
    00000c03: 	movq	-0x4000(%rbp), %rdi
    00000c0a: 	movq	%r14, %rdx
    00000c0d: 	callq	"_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1" # Offset: 3085
    00000c12: 	movq	-0xfe0(%rbp), %rdi
    00000c19: 	cmpq	%rbx, %rdi
    00000c1c: 	je	.Ltmp2775 # Offset: 3100
    00000c1e: 	movq	-0xfd0(%rbp), %rax
    00000c25: 	leaq	0x1(%rax), %rsi
    00000c29: 	callq	_ZdlPvm@PLT # Offset: 3113
.Ltmp2775:
    00000c2e: 	movq	-0x3fd8(%rbp), %r14
    00000c35: 	leaq	DATAat0x2443a(%rip), %rdx
    00000c3c: 	movq	%r15, %rsi
    00000c3f: 	movq	%r14, %rdi
    00000c42: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3138
    00000c47: 	movq	-0x3fe8(%rbp), %rsi
    00000c4e: 	movq	%r14, %r8
    00000c51: 	xorl	%edx, %edx
    00000c53: 	movq	%r13, %rdi
    00000c56: 	leaq	_Z20accumulate_iterator6IN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_(%rip), %rcx
    00000c5d: 	callq	_Z15test_accumulateIsN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEPFsS6_S6_sEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3165
    00000c62: 	movq	-0xfe0(%rbp), %rdi
    00000c69: 	cmpq	%rbx, %rdi
    00000c6c: 	je	.Ltmp2776 # Offset: 3180
    00000c6e: 	movq	-0xfd0(%rbp), %rax
    00000c75: 	leaq	0x1(%rax), %rsi
    00000c79: 	callq	_ZdlPvm@PLT # Offset: 3193
.Ltmp2776:
    00000c7e: 	movq	-0x3fd8(%rbp), %r14
    00000c85: 	leaq	DATAat0x24457(%rip), %rdx
    00000c8c: 	movq	%r15, %rsi
    00000c8f: 	movq	%r14, %rdi
    00000c92: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3218
    00000c97: 	movq	-0x3fe0(%rbp), %rdi
    00000c9e: 	movq	%r14, %rdx
    00000ca1: 	movq	%r12, %rsi
    00000ca4: 	callq	"_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1" # Offset: 3236
    00000ca9: 	movq	-0xfe0(%rbp), %rdi
    00000cb0: 	cmpq	%rbx, %rdi
    00000cb3: 	je	.Ltmp2777 # Offset: 3251
    00000cb5: 	movq	-0xfd0(%rbp), %rax
    00000cbc: 	leaq	0x1(%rax), %rsi
    00000cc0: 	callq	_ZdlPvm@PLT # Offset: 3264
.Ltmp2777:
    00000cc5: 	movq	-0x3fd8(%rbp), %r14
    00000ccc: 	leaq	DATAat0x24468(%rip), %rdx
    00000cd3: 	movq	%r15, %rsi
    00000cd6: 	movq	%r14, %rdi
    00000cd9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3289
    00000cde: 	movq	-0x3fe0(%rbp), %rsi
    00000ce5: 	movq	-0x4000(%rbp), %rdi
    00000cec: 	movq	%r14, %rdx
    00000cef: 	callq	"_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1" # Offset: 3311
    00000cf4: 	movq	-0xfe0(%rbp), %rdi
    00000cfb: 	cmpq	%rbx, %rdi
    00000cfe: 	je	.Ltmp2778 # Offset: 3326
    00000d00: 	movq	-0xfd0(%rbp), %rax
    00000d07: 	leaq	0x1(%rax), %rsi
    00000d0b: 	callq	_ZdlPvm@PLT # Offset: 3339
.Ltmp2778:
    00000d10: 	movq	-0x3fd8(%rbp), %r14
    00000d17: 	leaq	DATAat0x24484(%rip), %rdx
    00000d1e: 	movq	%r15, %rsi
    00000d21: 	movq	%r14, %rdi
    00000d24: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3364
    00000d29: 	movq	-0x3fe8(%rbp), %rsi
    00000d30: 	movq	%r14, %r8
    00000d33: 	xorl	%edx, %edx
    00000d35: 	movq	%r13, %rdi
    00000d38: 	leaq	_Z20accumulate_iterator7IN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_(%rip), %rcx
    00000d3f: 	callq	_Z15test_accumulateIsN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEPFsS6_S6_sEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3391
    00000d44: 	movq	-0xfe0(%rbp), %rdi
    00000d4b: 	cmpq	%rbx, %rdi
    00000d4e: 	je	.Ltmp2779 # Offset: 3406
    00000d50: 	movq	-0xfd0(%rbp), %rax
    00000d57: 	leaq	0x1(%rax), %rsi
    00000d5b: 	callq	_ZdlPvm@PLT # Offset: 3419
.Ltmp2779:
    00000d60: 	movq	-0x3fd8(%rbp), %r14
    00000d67: 	leaq	DATAat0x244a1(%rip), %rdx
    00000d6e: 	movq	%r15, %rsi
    00000d71: 	movq	%r14, %rdi
    00000d74: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3444
    00000d79: 	movq	-0x3fe0(%rbp), %rdi
    00000d80: 	movq	%r14, %rdx
    00000d83: 	movq	%r12, %rsi
    00000d86: 	callq	"_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3462
    00000d8b: 	movq	-0xfe0(%rbp), %rdi
    00000d92: 	cmpq	%rbx, %rdi
    00000d95: 	je	.Ltmp2780 # Offset: 3477
    00000d97: 	movq	-0xfd0(%rbp), %rax
    00000d9e: 	leaq	0x1(%rax), %rsi
    00000da2: 	callq	_ZdlPvm@PLT # Offset: 3490
.Ltmp2780:
    00000da7: 	movq	-0x3fd8(%rbp), %r14
    00000dae: 	leaq	DATAat0x244b2(%rip), %rdx
    00000db5: 	movq	%r15, %rsi
    00000db8: 	movq	%r14, %rdi
    00000dbb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3515
    00000dc0: 	movq	-0x3fe0(%rbp), %rsi
    00000dc7: 	movq	-0x4000(%rbp), %rdi
    00000dce: 	movq	%r14, %rdx
    00000dd1: 	callq	"_Z15test_accumulateIsPsPFsS0_S0_sEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3537
    00000dd6: 	movq	-0xfe0(%rbp), %rdi
    00000ddd: 	cmpq	%rbx, %rdi
    00000de0: 	je	.Ltmp2781 # Offset: 3552
    00000de2: 	movq	-0xfd0(%rbp), %rax
    00000de9: 	leaq	0x1(%rax), %rsi
    00000ded: 	callq	_ZdlPvm@PLT # Offset: 3565
.Ltmp2781:
    00000df2: 	movq	-0x3fd8(%rbp), %r14
    00000df9: 	leaq	DATAat0x244ce(%rip), %rdx
    00000e00: 	movq	%r15, %rsi
    00000e03: 	movq	%r14, %rdi
    00000e06: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3590
    00000e0b: 	movq	-0x3fe8(%rbp), %rsi
    00000e12: 	movq	%r14, %r8
    00000e15: 	xorl	%edx, %edx
    00000e17: 	movq	%r13, %rdi
    00000e1a: 	leaq	_Z20accumulate_iterator8IN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsET0_T_S8_S7_(%rip), %rcx
    00000e21: 	callq	_Z15test_accumulateIsN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEPFsS6_S6_sEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3617
    00000e26: 	movq	-0xfe0(%rbp), %rdi
    00000e2d: 	cmpq	%rbx, %rdi
    00000e30: 	je	.Ltmp2782 # Offset: 3632
    00000e32: 	movq	-0xfd0(%rbp), %rax
    00000e39: 	leaq	0x1(%rax), %rsi
    00000e3d: 	callq	_ZdlPvm@PLT # Offset: 3645
.Ltmp2782:
    00000e42: 	leaq	-0x3f60(%rbp), %rdi
    00000e49: 	leaq	DATAat0x24710(%rip), %rdx
    00000e50: 	movq	%r15, %rsi
    00000e53: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3667
    00000e58: 	movl	iterations(%rip), %edx
    00000e5e: 	xorl	%r8d, %r8d
    00000e61: 	xorl	%ecx, %ecx
    00000e63: 	movl	$0x7d0, %esi
    00000e68: 	movq	-0x3f60(%rbp), %rdi
    00000e6f: 	callq	_Z9summarizePKciiii # Offset: 3695
    00000e74: 	movslq	iterations(%rip), %rax
    00000e7b: 	movq	%rax, %rdi
    00000e7e: 	movl	%eax, -0x4044(%rbp)
    00000e84: 	imulq	$0x2572fb07, %rax, %rax
    00000e8b: 	sarl	$0x1f, %edi
    00000e8e: 	sarq	$0x2c, %rax
    00000e92: 	subl	%edi, %eax
    00000e94: 	movl	$0x1e84800, %edi
    00000e99: 	movl	%eax, iterations(%rip)
    00000e9f: 	callq	_Znam@PLT # Offset: 3743
    00000ea4: 	movq	%rax, %r14
    00000ea7: 	cvttsd2si	init_value(%rip), %eax
    00000eaf: 	movq	-0x3fd8(%rbp), %rdi
    00000eb6: 	leaq	0x1e84800(%r14), %rdx
    00000ebd: 	movd	%eax, %xmm0
    00000ec1: 	movq	%r14, %rax
    00000ec4: 	punpcklwd	%xmm0, %xmm0
    00000ec8: 	pshufd	$0x0, %xmm0, %xmm0
.Ltmp2783:
    00000ecd: 	movups	%xmm0, (%rax)
    00000ed0: 	addq	$0x10, %rax
    00000ed4: 	cmpq	%rax, %rdx
    00000ed7: 	jne	.Ltmp2783 # Offset: 3799
    00000ed9: 	leaq	DATAat0x244eb(%rip), %rdx
    00000ee0: 	movq	%r15, %rsi
    00000ee3: 	movq	%rdi, -0x3fd8(%rbp)
    00000eea: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3818
    00000eef: 	xorl	%ecx, %ecx
    00000ef1: 	movl	$0xfa0, %edx
    00000ef6: 	movl	$0xfa0, %esi
    00000efb: 	movq	%r14, %rdi
    00000efe: 	movq	-0x3fd8(%rbp), %r9
    00000f05: 	leaq	_Z19accumulate_array2D1IsET_PKS0_mmS0_(%rip), %r8
    00000f0c: 	callq	_Z17test_accumulate2DIsPsPFsPKsmmsEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3852
    00000f11: 	movq	-0xfe0(%rbp), %rdi
    00000f18: 	cmpq	%rbx, %rdi
    00000f1b: 	je	.Ltmp2784 # Offset: 3867
    00000f1d: 	movq	-0xfd0(%rbp), %rax
    00000f24: 	leaq	0x1(%rax), %rsi
    00000f28: 	callq	_ZdlPvm@PLT # Offset: 3880
.Ltmp2784:
    00000f2d: 	movq	-0x3fd8(%rbp), %rdi
    00000f34: 	leaq	DATAat0x244fb(%rip), %rdx
    00000f3b: 	movq	%r15, %rsi
    00000f3e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3902
    00000f43: 	xorl	%ecx, %ecx
    00000f45: 	movl	$0xfa0, %edx
    00000f4a: 	movl	$0xfa0, %esi
    00000f4f: 	movq	%r14, %rdi
    00000f52: 	movq	-0x3fd8(%rbp), %r9
    00000f59: 	leaq	_Z19accumulate_array2D2IsET_PKS0_mmS0_(%rip), %r8
    00000f60: 	callq	_Z17test_accumulate2DIsPsPFsPKsmmsEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3936
    00000f65: 	movq	-0xfe0(%rbp), %rdi
    00000f6c: 	cmpq	%rbx, %rdi
    00000f6f: 	je	.Ltmp2785 # Offset: 3951
    00000f71: 	movq	-0xfd0(%rbp), %rax
    00000f78: 	leaq	0x1(%rax), %rsi
    00000f7c: 	callq	_ZdlPvm@PLT # Offset: 3964
.Ltmp2785:
    00000f81: 	movq	-0x3fd8(%rbp), %rdi
    00000f88: 	leaq	DATAat0x2450b(%rip), %rdx
    00000f8f: 	movq	%r15, %rsi
    00000f92: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3986
    00000f97: 	xorl	%ecx, %ecx
    00000f99: 	movl	$0xfa0, %edx
    00000f9e: 	movl	$0xfa0, %esi
    00000fa3: 	movq	%r14, %rdi
    00000fa6: 	movq	-0x3fd8(%rbp), %r9
    00000fad: 	leaq	_Z19accumulate_array2D3IsET_PKS0_mmS0_(%rip), %r8
    00000fb4: 	callq	_Z17test_accumulate2DIsPsPFsPKsmmsEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4020
    00000fb9: 	movq	-0xfe0(%rbp), %rdi
    00000fc0: 	cmpq	%rbx, %rdi
    00000fc3: 	je	.Ltmp2786 # Offset: 4035
    00000fc5: 	movq	-0xfd0(%rbp), %rax
    00000fcc: 	leaq	0x1(%rax), %rsi
    00000fd0: 	callq	_ZdlPvm@PLT # Offset: 4048
.Ltmp2786:
    00000fd5: 	movq	-0x3fd8(%rbp), %rdi
    00000fdc: 	leaq	DATAat0x2451b(%rip), %rdx
    00000fe3: 	movq	%r15, %rsi
    00000fe6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4070
    00000feb: 	xorl	%ecx, %ecx
    00000fed: 	movl	$0xfa0, %edx
    00000ff2: 	movl	$0xfa0, %esi
    00000ff7: 	movq	%r14, %rdi
    00000ffa: 	movq	-0x3fd8(%rbp), %r9
    00001001: 	leaq	_Z19accumulate_array2D4IsET_PKS0_mmS0_(%rip), %r8
    00001008: 	callq	_Z17test_accumulate2DIsPsPFsPKsmmsEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4104
    0000100d: 	movq	-0xfe0(%rbp), %rdi
    00001014: 	cmpq	%rbx, %rdi
    00001017: 	je	.Ltmp2787 # Offset: 4119
    00001019: 	movq	-0xfd0(%rbp), %rax
    00001020: 	leaq	0x1(%rax), %rsi
    00001024: 	callq	_ZdlPvm@PLT # Offset: 4132
.Ltmp2787:
    00001029: 	movq	-0x3fd8(%rbp), %rdi
    00001030: 	leaq	DATAat0x2452b(%rip), %rdx
    00001037: 	movq	%r15, %rsi
    0000103a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4154
    0000103f: 	xorl	%ecx, %ecx
    00001041: 	movl	$0xfa0, %edx
    00001046: 	movl	$0xfa0, %esi
    0000104b: 	movq	%r14, %rdi
    0000104e: 	movq	-0x3fd8(%rbp), %r9
    00001055: 	leaq	_Z19accumulate_array2D5IsET_PKS0_mmS0_(%rip), %r8
    0000105c: 	callq	_Z17test_accumulate2DIsPsPFsPKsmmsEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4188
    00001061: 	movq	-0xfe0(%rbp), %rdi
    00001068: 	cmpq	%rbx, %rdi
    0000106b: 	je	.Ltmp2788 # Offset: 4203
    0000106d: 	movq	-0xfd0(%rbp), %rax
    00001074: 	leaq	0x1(%rax), %rsi
    00001078: 	callq	_ZdlPvm@PLT # Offset: 4216
.Ltmp2788:
    0000107d: 	movq	-0x3fd8(%rbp), %rdi
    00001084: 	leaq	DATAat0x2453b(%rip), %rdx
    0000108b: 	movq	%r15, %rsi
    0000108e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4238
    00001093: 	xorl	%ecx, %ecx
    00001095: 	movl	$0xfa0, %edx
    0000109a: 	movl	$0xfa0, %esi
    0000109f: 	movq	%r14, %rdi
    000010a2: 	movq	-0x3fd8(%rbp), %r9
    000010a9: 	leaq	_Z19accumulate_array2D6IsET_PKS0_mmS0_(%rip), %r8
    000010b0: 	callq	_Z17test_accumulate2DIsPsPFsPKsmmsEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4272
    000010b5: 	movq	-0xfe0(%rbp), %rdi
    000010bc: 	cmpq	%rbx, %rdi
    000010bf: 	je	.Ltmp2789 # Offset: 4287
    000010c1: 	movq	-0xfd0(%rbp), %rax
    000010c8: 	leaq	0x1(%rax), %rsi
    000010cc: 	callq	_ZdlPvm@PLT # Offset: 4300
.Ltmp2789:
    000010d1: 	movq	-0x3fd8(%rbp), %rdi
    000010d8: 	leaq	DATAat0x2454b(%rip), %rdx
    000010df: 	movq	%r15, %rsi
    000010e2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4322
    000010e7: 	xorl	%ecx, %ecx
    000010e9: 	movl	$0xfa0, %edx
    000010ee: 	movl	$0xfa0, %esi
    000010f3: 	movq	%r14, %rdi
    000010f6: 	movq	-0x3fd8(%rbp), %r9
    000010fd: 	leaq	_Z19accumulate_array2D7IsET_PKS0_mmS0_(%rip), %r8
    00001104: 	callq	_Z17test_accumulate2DIsPsPFsPKsmmsEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4356
    00001109: 	movq	-0xfe0(%rbp), %rdi
    00001110: 	cmpq	%rbx, %rdi
    00001113: 	je	.Ltmp2790 # Offset: 4371
    00001115: 	movq	-0xfd0(%rbp), %rax
    0000111c: 	leaq	0x1(%rax), %rsi
    00001120: 	callq	_ZdlPvm@PLT # Offset: 4384
.Ltmp2790:
    00001125: 	movq	-0x3fd8(%rbp), %rdi
    0000112c: 	leaq	DATAat0x2455b(%rip), %rdx
    00001133: 	movq	%r15, %rsi
    00001136: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4406
    0000113b: 	xorl	%ecx, %ecx
    0000113d: 	movl	$0xfa0, %edx
    00001142: 	movl	$0xfa0, %esi
    00001147: 	movq	%r14, %rdi
    0000114a: 	movq	-0x3fd8(%rbp), %r9
    00001151: 	leaq	_Z19accumulate_array2D8IsET_PKS0_mmS0_(%rip), %r8
    00001158: 	callq	_Z17test_accumulate2DIsPsPFsPKsmmsEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4440
    0000115d: 	movq	-0xfe0(%rbp), %rdi
    00001164: 	cmpq	%rbx, %rdi
    00001167: 	je	.Ltmp2791 # Offset: 4455
    00001169: 	movq	-0xfd0(%rbp), %rax
    00001170: 	leaq	0x1(%rax), %rsi
    00001174: 	callq	_ZdlPvm@PLT # Offset: 4468
.Ltmp2791:
    00001179: 	movq	-0x3fd8(%rbp), %rdi
    00001180: 	leaq	DATAat0x2456b(%rip), %rdx
    00001187: 	movq	%r15, %rsi
    0000118a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4490
    0000118f: 	xorl	%ecx, %ecx
    00001191: 	movl	$0xfa0, %edx
    00001196: 	movl	$0xfa0, %esi
    0000119b: 	movq	%r14, %rdi
    0000119e: 	movq	-0x3fd8(%rbp), %r9
    000011a5: 	leaq	_Z19accumulate_array2D9IsET_PKS0_mmS0_(%rip), %r8
    000011ac: 	callq	_Z17test_accumulate2DIsPsPFsPKsmmsEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4524
    000011b1: 	movq	-0xfe0(%rbp), %rdi
    000011b8: 	cmpq	%rbx, %rdi
    000011bb: 	je	.Ltmp2792 # Offset: 4539
    000011bd: 	movq	-0xfd0(%rbp), %rax
    000011c4: 	leaq	0x1(%rax), %rsi
    000011c8: 	callq	_ZdlPvm@PLT # Offset: 4552
.Ltmp2792:
    000011cd: 	leaq	-0x3f40(%rbp), %rdi
    000011d4: 	leaq	DATAat0x24730(%rip), %rdx
    000011db: 	movq	%r15, %rsi
    000011de: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4574
    000011e3: 	movl	iterations(%rip), %edx
    000011e9: 	xorl	%r8d, %r8d
    000011ec: 	xorl	%ecx, %ecx
    000011ee: 	movl	$0xf42400, %esi
    000011f3: 	movq	-0x3f40(%rbp), %rdi
    000011fa: 	callq	_Z9summarizePKciiii # Offset: 4602
    000011ff: 	movq	%r14, %rdi
    00001202: 	callq	_ZdaPv@PLT # Offset: 4610
    00001207: 	movl	$0x1fbfe04, %edi
    0000120c: 	callq	_Znam@PLT # Offset: 4620
    00001211: 	cvttsd2si	init_value(%rip), %edx
    00001219: 	movq	-0x3fd8(%rbp), %rdi
    00001220: 	movq	%rax, %r14
    00001223: 	leaq	0x1fbfe00(%rax), %rcx
    0000122a: 	movd	%edx, %xmm0
    0000122e: 	punpcklwd	%xmm0, %xmm0
    00001232: 	pshufd	$0x0, %xmm0, %xmm0
.Ltmp2793:
    00001237: 	movups	%xmm0, (%rax)
    0000123a: 	addq	$0x10, %rax
    0000123e: 	cmpq	%rax, %rcx
    00001241: 	jne	.Ltmp2793 # Offset: 4673
    00001243: 	movw	%dx, 0x1fbfe00(%r14)
    0000124b: 	movq	%r15, %rsi
    0000124e: 	movw	%dx, 0x1fbfe02(%r14)
    00001256: 	leaq	DATAat0x2457b(%rip), %rdx
    0000125d: 	movq	%rdi, -0x3fd8(%rbp)
    00001264: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4708
    00001269: 	subq	$0x8, %rsp
    0000126d: 	pushq	-0x3fd8(%rbp)
    00001273: 	xorl	%r8d, %r8d
    00001276: 	movq	%r14, %rdi
    00001279: 	movl	$0x101, %ecx
    0000127e: 	movl	$0xff, %edx
    00001283: 	movl	$0xfe, %esi
    00001288: 	leaq	_Z19accumulate_array3D1IsET_PKS0_mmmS0_(%rip), %r9
    0000128f: 	callq	_Z17test_accumulate3DIsPsPFsPKsmmmsEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4751
    00001294: 	movq	-0xfe0(%rbp), %rdi
    0000129b: 	popq	%r9
    0000129d: 	popq	%r10
    0000129f: 	cmpq	%rbx, %rdi
    000012a2: 	je	.Ltmp2794 # Offset: 4770
    000012a4: 	movq	-0xfd0(%rbp), %rax
    000012ab: 	leaq	0x1(%rax), %rsi
    000012af: 	callq	_ZdlPvm@PLT # Offset: 4783
.Ltmp2794:
    000012b4: 	movq	-0x3fd8(%rbp), %rdi
    000012bb: 	leaq	DATAat0x2458b(%rip), %rdx
    000012c2: 	movq	%r15, %rsi
    000012c5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4805
    000012ca: 	subq	$0x8, %rsp
    000012ce: 	pushq	-0x3fd8(%rbp)
    000012d4: 	xorl	%r8d, %r8d
    000012d7: 	movq	%r14, %rdi
    000012da: 	movl	$0x101, %ecx
    000012df: 	movl	$0xff, %edx
    000012e4: 	movl	$0xfe, %esi
    000012e9: 	leaq	_Z19accumulate_array3D2IsET_PKS0_mmmS0_(%rip), %r9
    000012f0: 	callq	_Z17test_accumulate3DIsPsPFsPKsmmmsEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4848
    000012f5: 	popq	%rdi
    000012f6: 	movq	-0xfe0(%rbp), %rdi
    000012fd: 	popq	%r8
    000012ff: 	cmpq	%rbx, %rdi
    00001302: 	je	.Ltmp2795 # Offset: 4866
    00001304: 	movq	-0xfd0(%rbp), %rax
    0000130b: 	leaq	0x1(%rax), %rsi
    0000130f: 	callq	_ZdlPvm@PLT # Offset: 4879
.Ltmp2795:
    00001314: 	movq	-0x3fd8(%rbp), %rdi
    0000131b: 	leaq	DATAat0x2459b(%rip), %rdx
    00001322: 	movq	%r15, %rsi
    00001325: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4901
    0000132a: 	subq	$0x8, %rsp
    0000132e: 	pushq	-0x3fd8(%rbp)
    00001334: 	xorl	%r8d, %r8d
    00001337: 	movq	%r14, %rdi
    0000133a: 	movl	$0x101, %ecx
    0000133f: 	movl	$0xff, %edx
    00001344: 	movl	$0xfe, %esi
    00001349: 	leaq	_Z19accumulate_array3D3IsET_PKS0_mmmS0_(%rip), %r9
    00001350: 	callq	_Z17test_accumulate3DIsPsPFsPKsmmmsEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4944
    00001355: 	movq	-0xfe0(%rbp), %rdi
    0000135c: 	popq	%rcx
    0000135d: 	popq	%rsi
    0000135e: 	cmpq	%rbx, %rdi
    00001361: 	je	.Ltmp2796 # Offset: 4961
    00001363: 	movq	-0xfd0(%rbp), %rax
    0000136a: 	leaq	0x1(%rax), %rsi
    0000136e: 	callq	_ZdlPvm@PLT # Offset: 4974
.Ltmp2796:
    00001373: 	movq	-0x3fd8(%rbp), %rdi
    0000137a: 	leaq	DATAat0x245ab(%rip), %rdx
    00001381: 	movq	%r15, %rsi
    00001384: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4996
    00001389: 	subq	$0x8, %rsp
    0000138d: 	pushq	-0x3fd8(%rbp)
    00001393: 	xorl	%r8d, %r8d
    00001396: 	movq	%r14, %rdi
    00001399: 	movl	$0x101, %ecx
    0000139e: 	movl	$0xff, %edx
    000013a3: 	movl	$0xfe, %esi
    000013a8: 	leaq	_Z19accumulate_array3D4IsET_PKS0_mmmS0_(%rip), %r9
    000013af: 	callq	_Z17test_accumulate3DIsPsPFsPKsmmmsEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5039
    000013b4: 	movq	-0xfe0(%rbp), %rdi
    000013bb: 	popq	%rax
    000013bc: 	popq	%rdx
    000013bd: 	cmpq	%rbx, %rdi
    000013c0: 	je	.Ltmp2797 # Offset: 5056
    000013c2: 	movq	-0xfd0(%rbp), %rax
    000013c9: 	leaq	0x1(%rax), %rsi
    000013cd: 	callq	_ZdlPvm@PLT # Offset: 5069
.Ltmp2797:
    000013d2: 	movq	-0x3fd8(%rbp), %rdi
    000013d9: 	leaq	DATAat0x245bb(%rip), %rdx
    000013e0: 	movq	%r15, %rsi
    000013e3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5091
    000013e8: 	subq	$0x8, %rsp
    000013ec: 	pushq	-0x3fd8(%rbp)
    000013f2: 	xorl	%r8d, %r8d
    000013f5: 	movq	%r14, %rdi
    000013f8: 	movl	$0x101, %ecx
    000013fd: 	movl	$0xff, %edx
    00001402: 	movl	$0xfe, %esi
    00001407: 	leaq	_Z19accumulate_array3D5IsET_PKS0_mmmS0_(%rip), %r9
    0000140e: 	callq	_Z17test_accumulate3DIsPsPFsPKsmmmsEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5134
    00001413: 	movq	-0xfe0(%rbp), %rdi
    0000141a: 	popq	%r11
    0000141c: 	popq	%rax
    0000141d: 	cmpq	%rbx, %rdi
    00001420: 	je	.Ltmp2798 # Offset: 5152
    00001422: 	movq	-0xfd0(%rbp), %rax
    00001429: 	leaq	0x1(%rax), %rsi
    0000142d: 	callq	_ZdlPvm@PLT # Offset: 5165
.Ltmp2798:
    00001432: 	movq	-0x3fd8(%rbp), %rdi
    00001439: 	leaq	DATAat0x245cb(%rip), %rdx
    00001440: 	movq	%r15, %rsi
    00001443: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5187
    00001448: 	subq	$0x8, %rsp
    0000144c: 	pushq	-0x3fd8(%rbp)
    00001452: 	xorl	%r8d, %r8d
    00001455: 	movq	%r14, %rdi
    00001458: 	movl	$0x101, %ecx
    0000145d: 	movl	$0xff, %edx
    00001462: 	movl	$0xfe, %esi
    00001467: 	leaq	_Z19accumulate_array3D6IsET_PKS0_mmmS0_(%rip), %r9
    0000146e: 	callq	_Z17test_accumulate3DIsPsPFsPKsmmmsEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5230
    00001473: 	movq	-0xfe0(%rbp), %rdi
    0000147a: 	popq	%r9
    0000147c: 	popq	%r10
    0000147e: 	cmpq	%rbx, %rdi
    00001481: 	je	.Ltmp2799 # Offset: 5249
    00001483: 	movq	-0xfd0(%rbp), %rax
    0000148a: 	leaq	0x1(%rax), %rsi
    0000148e: 	callq	_ZdlPvm@PLT # Offset: 5262
.Ltmp2799:
    00001493: 	movq	-0x3fd8(%rbp), %rdi
    0000149a: 	leaq	DATAat0x245db(%rip), %rdx
    000014a1: 	movq	%r15, %rsi
    000014a4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5284
    000014a9: 	subq	$0x8, %rsp
    000014ad: 	pushq	-0x3fd8(%rbp)
    000014b3: 	xorl	%r8d, %r8d
    000014b6: 	movq	%r14, %rdi
    000014b9: 	movl	$0x101, %ecx
    000014be: 	movl	$0xff, %edx
    000014c3: 	movl	$0xfe, %esi
    000014c8: 	leaq	_Z19accumulate_array3D7IsET_PKS0_mmmS0_(%rip), %r9
    000014cf: 	callq	_Z17test_accumulate3DIsPsPFsPKsmmmsEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5327
    000014d4: 	popq	%rdi
    000014d5: 	movq	-0xfe0(%rbp), %rdi
    000014dc: 	popq	%r8
    000014de: 	cmpq	%rbx, %rdi
    000014e1: 	je	.Ltmp2800 # Offset: 5345
    000014e3: 	movq	-0xfd0(%rbp), %rax
    000014ea: 	leaq	0x1(%rax), %rsi
    000014ee: 	callq	_ZdlPvm@PLT # Offset: 5358
.Ltmp2800:
    000014f3: 	movq	-0x3fd8(%rbp), %rdi
    000014fa: 	leaq	DATAat0x245eb(%rip), %rdx
    00001501: 	movq	%r15, %rsi
    00001504: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5380
    00001509: 	subq	$0x8, %rsp
    0000150d: 	pushq	-0x3fd8(%rbp)
    00001513: 	xorl	%r8d, %r8d
    00001516: 	movq	%r14, %rdi
    00001519: 	movl	$0x101, %ecx
    0000151e: 	movl	$0xff, %edx
    00001523: 	movl	$0xfe, %esi
    00001528: 	leaq	_Z19accumulate_array3D8IsET_PKS0_mmmS0_(%rip), %r9
    0000152f: 	callq	_Z17test_accumulate3DIsPsPFsPKsmmmsEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5423
    00001534: 	movq	-0xfe0(%rbp), %rdi
    0000153b: 	popq	%rcx
    0000153c: 	popq	%rsi
    0000153d: 	cmpq	%rbx, %rdi
    00001540: 	je	.Ltmp2801 # Offset: 5440
    00001542: 	movq	-0xfd0(%rbp), %rax
    00001549: 	leaq	0x1(%rax), %rsi
    0000154d: 	callq	_ZdlPvm@PLT # Offset: 5453
.Ltmp2801:
    00001552: 	movq	-0x3fd8(%rbp), %rdi
    00001559: 	leaq	DATAat0x245fb(%rip), %rdx
    00001560: 	movq	%r15, %rsi
    00001563: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5475
    00001568: 	subq	$0x8, %rsp
    0000156c: 	pushq	-0x3fd8(%rbp)
    00001572: 	xorl	%r8d, %r8d
    00001575: 	movq	%r14, %rdi
    00001578: 	movl	$0x101, %ecx
    0000157d: 	movl	$0xff, %edx
    00001582: 	movl	$0xfe, %esi
    00001587: 	leaq	_Z19accumulate_array3D9IsET_PKS0_mmmS0_(%rip), %r9
    0000158e: 	callq	_Z17test_accumulate3DIsPsPFsPKsmmmsEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5518
    00001593: 	movq	-0xfe0(%rbp), %rdi
    0000159a: 	popq	%rax
    0000159b: 	popq	%rdx
    0000159c: 	cmpq	%rbx, %rdi
    0000159f: 	je	.Ltmp2802 # Offset: 5535
    000015a1: 	movq	-0xfd0(%rbp), %rax
    000015a8: 	leaq	0x1(%rax), %rsi
    000015ac: 	callq	_ZdlPvm@PLT # Offset: 5548
.Ltmp2802:
    000015b1: 	leaq	-0x3f20(%rbp), %rdi
    000015b8: 	leaq	DATAat0x24758(%rip), %rdx
    000015bf: 	movq	%r15, %rsi
    000015c2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5570
    000015c7: 	movl	iterations(%rip), %edx
    000015cd: 	xorl	%r8d, %r8d
    000015d0: 	xorl	%ecx, %ecx
    000015d2: 	movl	$0xfdff02, %esi
    000015d7: 	movq	-0x3f20(%rbp), %rdi
    000015de: 	callq	_Z9summarizePKciiii # Offset: 5598
    000015e3: 	movq	%r14, %rdi
    000015e6: 	callq	_ZdaPv@PLT # Offset: 5606
    000015eb: 	movl	$0x1ffc002, %edi
    000015f0: 	callq	_Znam@PLT # Offset: 5616
    000015f5: 	cvttsd2si	init_value(%rip), %edx
    000015fd: 	movq	-0x3fd8(%rbp), %rdi
    00001604: 	movq	%rax, %r14
    00001607: 	leaq	0x1ffc000(%rax), %rcx
    0000160e: 	movd	%edx, %xmm0
    00001612: 	punpcklwd	%xmm0, %xmm0
    00001616: 	pshufd	$0x0, %xmm0, %xmm0
.Ltmp2803:
    0000161b: 	movups	%xmm0, (%rax)
    0000161e: 	addq	$0x10, %rax
    00001622: 	cmpq	%rax, %rcx
    00001625: 	jne	.Ltmp2803 # Offset: 5669
    00001627: 	movw	%dx, 0x1ffc000(%r14)
    0000162f: 	movq	%r15, %rsi
    00001632: 	leaq	DATAat0x2460b(%rip), %rdx
    00001639: 	movq	%rdi, -0x3fd8(%rbp)
    00001640: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5696
    00001645: 	xorl	%r9d, %r9d
    00001648: 	movl	$0x3f, %ecx
    0000164d: 	movl	$0x41, %edx
    00001652: 	movq	%r14, %rdi
    00001655: 	leaq	_Z19accumulate_array4D1IsET_PKS0_mmmmS0_(%rip), %rax
    0000165c: 	pushq	-0x3fd8(%rbp)
    00001662: 	movl	$0x41, %r8d
    00001668: 	movl	$0x3f, %esi
    0000166d: 	pushq	%rax
    0000166e: 	callq	_Z17test_accumulate4DIsPsPFsPKsmmmmsEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5742
    00001673: 	movq	-0xfe0(%rbp), %rdi
    0000167a: 	popq	%r11
    0000167c: 	popq	%rax
    0000167d: 	cmpq	%rbx, %rdi
    00001680: 	je	.Ltmp2804 # Offset: 5760
    00001682: 	movq	-0xfd0(%rbp), %rax
    00001689: 	leaq	0x1(%rax), %rsi
    0000168d: 	callq	_ZdlPvm@PLT # Offset: 5773
.Ltmp2804:
    00001692: 	movq	-0x3fd8(%rbp), %rdi
    00001699: 	leaq	DATAat0x2461b(%rip), %rdx
    000016a0: 	movq	%r15, %rsi
    000016a3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5795
    000016a8: 	xorl	%r9d, %r9d
    000016ab: 	movl	$0x3f, %ecx
    000016b0: 	movl	$0x41, %edx
    000016b5: 	movq	%r14, %rdi
    000016b8: 	leaq	_Z19accumulate_array4D2IsET_PKS0_mmmmS0_(%rip), %rax
    000016bf: 	pushq	-0x3fd8(%rbp)
    000016c5: 	movl	$0x41, %r8d
    000016cb: 	movl	$0x3f, %esi
    000016d0: 	pushq	%rax
    000016d1: 	callq	_Z17test_accumulate4DIsPsPFsPKsmmmmsEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5841
    000016d6: 	movq	-0xfe0(%rbp), %rdi
    000016dd: 	popq	%r9
    000016df: 	popq	%r10
    000016e1: 	cmpq	%rbx, %rdi
    000016e4: 	je	.Ltmp2805 # Offset: 5860
    000016e6: 	movq	-0xfd0(%rbp), %rax
    000016ed: 	leaq	0x1(%rax), %rsi
    000016f1: 	callq	_ZdlPvm@PLT # Offset: 5873
.Ltmp2805:
    000016f6: 	movq	-0x3fd8(%rbp), %rdi
    000016fd: 	leaq	DATAat0x2462b(%rip), %rdx
    00001704: 	movq	%r15, %rsi
    00001707: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5895
    0000170c: 	xorl	%r9d, %r9d
    0000170f: 	movl	$0x3f, %ecx
    00001714: 	movl	$0x41, %edx
    00001719: 	movq	%r14, %rdi
    0000171c: 	leaq	_Z19accumulate_array4D3IsET_PKS0_mmmmS0_(%rip), %rax
    00001723: 	pushq	-0x3fd8(%rbp)
    00001729: 	movl	$0x41, %r8d
    0000172f: 	movl	$0x3f, %esi
    00001734: 	pushq	%rax
    00001735: 	callq	_Z17test_accumulate4DIsPsPFsPKsmmmmsEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5941
    0000173a: 	popq	%rdi
    0000173b: 	movq	-0xfe0(%rbp), %rdi
    00001742: 	popq	%r8
    00001744: 	cmpq	%rbx, %rdi
    00001747: 	je	.Ltmp2806 # Offset: 5959
    00001749: 	movq	-0xfd0(%rbp), %rax
    00001750: 	leaq	0x1(%rax), %rsi
    00001754: 	callq	_ZdlPvm@PLT # Offset: 5972
.Ltmp2806:
    00001759: 	movq	-0x3fd8(%rbp), %rdi
    00001760: 	leaq	DATAat0x2463b(%rip), %rdx
    00001767: 	movq	%r15, %rsi
    0000176a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5994
    0000176f: 	xorl	%r9d, %r9d
    00001772: 	movl	$0x3f, %ecx
    00001777: 	movl	$0x41, %edx
    0000177c: 	movq	%r14, %rdi
    0000177f: 	leaq	_Z19accumulate_array4D4IsET_PKS0_mmmmS0_(%rip), %rax
    00001786: 	pushq	-0x3fd8(%rbp)
    0000178c: 	movl	$0x41, %r8d
    00001792: 	movl	$0x3f, %esi
    00001797: 	pushq	%rax
    00001798: 	callq	_Z17test_accumulate4DIsPsPFsPKsmmmmsEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6040
    0000179d: 	movq	-0xfe0(%rbp), %rdi
    000017a4: 	popq	%rcx
    000017a5: 	popq	%rsi
    000017a6: 	cmpq	%rbx, %rdi
    000017a9: 	je	.Ltmp2807 # Offset: 6057
    000017ab: 	movq	-0xfd0(%rbp), %rax
    000017b2: 	leaq	0x1(%rax), %rsi
    000017b6: 	callq	_ZdlPvm@PLT # Offset: 6070
.Ltmp2807:
    000017bb: 	movq	-0x3fd8(%rbp), %rdi
    000017c2: 	leaq	DATAat0x2464b(%rip), %rdx
    000017c9: 	movq	%r15, %rsi
    000017cc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6092
    000017d1: 	xorl	%r9d, %r9d
    000017d4: 	movl	$0x3f, %ecx
    000017d9: 	movl	$0x41, %edx
    000017de: 	movq	%r14, %rdi
    000017e1: 	leaq	_Z19accumulate_array4D5IsET_PKS0_mmmmS0_(%rip), %rax
    000017e8: 	pushq	-0x3fd8(%rbp)
    000017ee: 	movl	$0x41, %r8d
    000017f4: 	movl	$0x3f, %esi
    000017f9: 	pushq	%rax
    000017fa: 	callq	_Z17test_accumulate4DIsPsPFsPKsmmmmsEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6138
    000017ff: 	movq	-0xfe0(%rbp), %rdi
    00001806: 	popq	%rax
    00001807: 	popq	%rdx
    00001808: 	cmpq	%rbx, %rdi
    0000180b: 	je	.Ltmp2808 # Offset: 6155
    0000180d: 	movq	-0xfd0(%rbp), %rax
    00001814: 	leaq	0x1(%rax), %rsi
    00001818: 	callq	_ZdlPvm@PLT # Offset: 6168
.Ltmp2808:
    0000181d: 	movq	-0x3fd8(%rbp), %rdi
    00001824: 	leaq	DATAat0x2465b(%rip), %rdx
    0000182b: 	movq	%r15, %rsi
    0000182e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6190
    00001833: 	xorl	%r9d, %r9d
    00001836: 	movl	$0x3f, %ecx
    0000183b: 	movl	$0x41, %edx
    00001840: 	movq	%r14, %rdi
    00001843: 	leaq	_Z19accumulate_array4D6IsET_PKS0_mmmmS0_(%rip), %rax
    0000184a: 	pushq	-0x3fd8(%rbp)
    00001850: 	movl	$0x41, %r8d
    00001856: 	movl	$0x3f, %esi
    0000185b: 	pushq	%rax
    0000185c: 	callq	_Z17test_accumulate4DIsPsPFsPKsmmmmsEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6236
    00001861: 	movq	-0xfe0(%rbp), %rdi
    00001868: 	popq	%r11
    0000186a: 	popq	%rax
    0000186b: 	cmpq	%rbx, %rdi
    0000186e: 	je	.Ltmp2809 # Offset: 6254
    00001870: 	movq	-0xfd0(%rbp), %rax
    00001877: 	leaq	0x1(%rax), %rsi
    0000187b: 	callq	_ZdlPvm@PLT # Offset: 6267
.Ltmp2809:
    00001880: 	movq	-0x3fd8(%rbp), %rdi
    00001887: 	leaq	DATAat0x2466b(%rip), %rdx
    0000188e: 	movq	%r15, %rsi
    00001891: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6289
    00001896: 	xorl	%r9d, %r9d
    00001899: 	movl	$0x3f, %ecx
    0000189e: 	movl	$0x41, %edx
    000018a3: 	movq	%r14, %rdi
    000018a6: 	leaq	_Z19accumulate_array4D7IsET_PKS0_mmmmS0_(%rip), %rax
    000018ad: 	pushq	-0x3fd8(%rbp)
    000018b3: 	movl	$0x41, %r8d
    000018b9: 	movl	$0x3f, %esi
    000018be: 	pushq	%rax
    000018bf: 	callq	_Z17test_accumulate4DIsPsPFsPKsmmmmsEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6335
    000018c4: 	movq	-0xfe0(%rbp), %rdi
    000018cb: 	popq	%r9
    000018cd: 	popq	%r10
    000018cf: 	cmpq	%rbx, %rdi
    000018d2: 	je	.Ltmp2810 # Offset: 6354
    000018d4: 	movq	-0xfd0(%rbp), %rax
    000018db: 	leaq	0x1(%rax), %rsi
    000018df: 	callq	_ZdlPvm@PLT # Offset: 6367
.Ltmp2810:
    000018e4: 	movq	-0x3fd8(%rbp), %rdi
    000018eb: 	leaq	DATAat0x2467b(%rip), %rdx
    000018f2: 	movq	%r15, %rsi
    000018f5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6389
    000018fa: 	xorl	%r9d, %r9d
    000018fd: 	movl	$0x3f, %ecx
    00001902: 	movl	$0x41, %edx
    00001907: 	movq	%r14, %rdi
    0000190a: 	leaq	_Z19accumulate_array4D8IsET_PKS0_mmmmS0_(%rip), %rax
    00001911: 	pushq	-0x3fd8(%rbp)
    00001917: 	movl	$0x41, %r8d
    0000191d: 	movl	$0x3f, %esi
    00001922: 	pushq	%rax
    00001923: 	callq	_Z17test_accumulate4DIsPsPFsPKsmmmmsEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6435
    00001928: 	popq	%rdi
    00001929: 	movq	-0xfe0(%rbp), %rdi
    00001930: 	popq	%r8
    00001932: 	cmpq	%rbx, %rdi
    00001935: 	je	.Ltmp2811 # Offset: 6453
    00001937: 	movq	-0xfd0(%rbp), %rax
    0000193e: 	leaq	0x1(%rax), %rsi
    00001942: 	callq	_ZdlPvm@PLT # Offset: 6466
.Ltmp2811:
    00001947: 	movq	-0x3fd8(%rbp), %rdi
    0000194e: 	leaq	DATAat0x2468b(%rip), %rdx
    00001955: 	movq	%r15, %rsi
    00001958: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6488
    0000195d: 	xorl	%r9d, %r9d
    00001960: 	movl	$0x3f, %ecx
    00001965: 	movl	$0x41, %edx
    0000196a: 	movq	%r14, %rdi
    0000196d: 	leaq	_Z19accumulate_array4D9IsET_PKS0_mmmmS0_(%rip), %rax
    00001974: 	pushq	-0x3fd8(%rbp)
    0000197a: 	movl	$0x41, %r8d
    00001980: 	movl	$0x3f, %esi
    00001985: 	pushq	%rax
    00001986: 	callq	_Z17test_accumulate4DIsPsPFsPKsmmmmsEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6534
    0000198b: 	movq	-0xfe0(%rbp), %rdi
    00001992: 	popq	%rcx
    00001993: 	popq	%rsi
    00001994: 	cmpq	%rbx, %rdi
    00001997: 	je	.Ltmp2812 # Offset: 6551
    00001999: 	movq	-0xfd0(%rbp), %rax
    000019a0: 	leaq	0x1(%rax), %rsi
    000019a4: 	callq	_ZdlPvm@PLT # Offset: 6564
.Ltmp2812:
    000019a9: 	leaq	-0x3f00(%rbp), %rdi
    000019b0: 	leaq	DATAat0x24780(%rip), %rdx
    000019b7: 	movq	%r15, %rsi
    000019ba: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6586
    000019bf: 	movl	iterations(%rip), %edx
    000019c5: 	xorl	%r8d, %r8d
    000019c8: 	xorl	%ecx, %ecx
    000019ca: 	movl	$0xffe001, %esi
    000019cf: 	movq	-0x3f00(%rbp), %rdi
    000019d6: 	callq	_Z9summarizePKciiii # Offset: 6614
    000019db: 	movq	%r14, %rdi
    000019de: 	callq	_ZdaPv@PLT # Offset: 6622
    000019e3: 	movl	-0x4044(%rbp), %eax
    000019e9: 	pxor	%xmm0, %xmm0
    000019ed: 	leaq	-0x3fa0(%rbp), %rdi
    000019f4: 	movl	$0x7d0, %esi
    000019f9: 	movaps	%xmm0, -0x3fa0(%rbp)
    00001a00: 	movl	%eax, iterations(%rip)
    00001a06: 	movq	$0x0, -0x3f90(%rbp)
    00001a11: 	callq	_ZNSt6vectorIsSaIsEE17_M_default_appendEm # Offset: 6673
    00001a16: 	movslq	iterations(%rip), %rax
    00001a1d: 	movq	-0x3fd8(%rbp), %rbx
    00001a24: 	movabsq	$0x5851f42d4c957f2d, %rdi
    00001a2e: 	movabsq	$0x14057b7ef767814f, %rsi
    00001a38: 	movq	%rax, %rdx
    00001a3b: 	imulq	$0x7af4f3ff, %rax, %rax
    00001a42: 	sarl	$0x1f, %edx
    00001a45: 	sarq	$0x28, %rax
    00001a49: 	subl	%edx, %eax
    00001a4b: 	movq	-0x3fe0(%rbp), %rdx
    00001a52: 	movl	%eax, iterations(%rip)
    00001a58: 	cvttsd2si	init_value(%rip), %eax
    00001a60: 	addl	$0x3039, %eax
    00001a65: 	cltq
    00001a67: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
.Ltmp2813:
    00001a6e: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00001a75: 	addq	$0x2, %rdx
    00001a79: 	imulq	%rdi, %rax
    00001a7d: 	addq	%rsi, %rax
    00001a80: 	movq	%rax, %rcx
    00001a83: 	movq	%rax, %r8
    00001a86: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00001a8d: 	shrq	$0x14, %rcx
    00001a91: 	shlq	$0x17, %r8
    00001a95: 	xorq	%r8, %rcx
    00001a98: 	xorq	%rcx, %rax
    00001a9b: 	sarq	$0x3, %rax
    00001a9f: 	movw	%ax, -0x2(%rdx)
    00001aa3: 	cmpq	%r12, %rdx
    00001aa6: 	jne	.Ltmp2813 # Offset: 6822
    00001aa8: 	leaq	-0x2f1e(%rbp), %rdx
    00001aaf: 	movq	%r13, %rax
    00001ab2: 	movq	-0x4000(%rbp), %rdi
    00001ab9: 	movq	-0x3fe0(%rbp), %rsi
    00001ac0: 	subq	%rdx, %rax
    00001ac3: 	movl	$0x1f4, %ecx
    00001ac8: 	movq	%rbx, -0x3fd8(%rbp)
    00001acf: 	rep		movsq	(%rsi), %es:(%rdi)
    00001ad2: 	cmpq	$0xc, %rax
    00001ad6: 	movq	%rbx, %rdi
    00001ad9: 	movl	$0x0, %eax
    00001ade: 	jbe	.Ltmp2814 # Offset: 6878
    00001ae4: 	movq	-0x3fe0(%rbp), %rdx
.Ltmp2815:
    00001aeb: 	movdqa	(%rdx,%rax), %xmm5
    00001af0: 	movups	%xmm5, (%r13,%rax)
    00001af6: 	addq	$0x10, %rax
    00001afa: 	cmpq	$0xfa0, %rax
    00001b00: 	jne	.Ltmp2815 # Offset: 6912
.Ltmp3043:
    00001b02: 	movq	%rdi, -0x3fd8(%rbp)
    00001b09: 	leaq	DATAat0x2469b(%rip), %rdx
    00001b10: 	movq	%r15, %rsi
    00001b13: 	movq	%r12, %rdi
    00001b16: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6934
    00001b1b: 	callq	clock@PLT # Offset: 6939
    00001b20: 	movl	iterations(%rip), %r8d
    00001b27: 	xorl	%r14d, %r14d
    00001b2a: 	leaq	-0x40(%rbp), %rbx
    00001b2e: 	movq	%rax, start_time(%rip)
    00001b35: 	leaq	-0xfde(%rbp), %rax
    00001b3c: 	movq	%rax, -0x4020(%rbp)
    00001b43: 	testl	%r8d, %r8d
    00001b46: 	jle	.Ltmp2816 # Offset: 6982
.Ltmp2822:
    00001b4c: 	movq	-0x3fd8(%rbp), %rdi
    00001b53: 	movq	-0x3fe0(%rbp), %rsi
    00001b5a: 	movl	$0x1f4, %ecx
    00001b5f: 	rep		movsq	(%rsi), %es:(%rdi)
    00001b62: 	movq	-0x4020(%rbp), %rdi
    00001b69: 	movq	-0x3fd8(%rbp), %rcx
.Ltmp2819:
    00001b70: 	movzwl	(%rdi), %esi
    00001b73: 	movq	%rdi, %rax
    00001b76: 	movq	%rcx, %r11
    00001b79: 	nopl	(%rax) # Size: 7
.Ltmp2818:
    00001b80: 	movq	%rax, %rdx
    00001b83: 	leaq	-0x2(%rax), %rax
    00001b87: 	movzwl	-0x2(%rdx), %ecx
    00001b8b: 	cmpw	%cx, %si
    00001b8e: 	jge	.Ltmp2817 # Offset: 7054
    00001b94: 	movw	%cx, 0x2(%rax)
    00001b98: 	movq	%r11, %rcx
    00001b9b: 	cmpq	%r11, %rax
    00001b9e: 	jne	.Ltmp2818 # Offset: 7070
    00001ba0: 	movq	%r11, %rdx
.Ltmp2874:
    00001ba3: 	addq	$0x2, %rdi
    00001ba7: 	movw	%si, (%rdx)
    00001baa: 	cmpq	%rbx, %rdi
    00001bad: 	jne	.Ltmp2819 # Offset: 7085
    00001baf: 	movzwl	-0xfe0(%rbp), %edx
    00001bb6: 	movq	-0x4020(%rbp), %rax
    00001bbd: 	movq	%rcx, %rdi
.Ltmp2821:
    00001bc0: 	addq	$0x2, %rax
    00001bc4: 	movl	%edx, %ecx
    00001bc6: 	movzwl	-0x2(%rax), %edx
    00001bca: 	cmpw	%cx, %dx
    00001bcd: 	jl	.Ltmp2820 # Offset: 7117
    00001bd3: 	cmpq	%rbx, %rax
    00001bd6: 	jne	.Ltmp2821 # Offset: 7126
    00001bd8: 	movq	%rdi, -0x3fd8(%rbp)
.Ltmp2875:
    00001bdf: 	addl	$0x1, %r14d
    00001be3: 	cmpl	%r8d, %r14d
    00001be6: 	jl	.Ltmp2822 # Offset: 7142
.Ltmp2816:
    00001bec: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00001bf3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00001bfa: 	subq	$0x20, %rax
    00001bfe: 	cmpq	%rax, %rbx
    00001c01: 	je	.Ltmp2823 # Offset: 7169
    00001c07: 	leaq	0x10(%rbx), %rdi
    00001c0b: 	movq	-0x1f78(%rbp), %r14
    00001c12: 	movq	%rdi, (%rbx)
    00001c15: 	movq	-0x1f80(%rbp), %rax
    00001c1c: 	movq	%rax, -0x3ff0(%rbp)
    00001c23: 	movq	%rax, %rsi
    00001c26: 	addq	%r14, %rax
    00001c29: 	je	.Ltmp2824 # Offset: 7209
    00001c2b: 	testq	%rsi, %rsi
    00001c2e: 	je	.Ltmp2825 # Offset: 7214
.Ltmp2824:
    00001c34: 	movq	%r14, -0x3fc8(%rbp)
    00001c3b: 	cmpq	$0xf, %r14
    00001c3f: 	ja	.Ltmp2826 # Offset: 7231
    00001c45: 	cmpq	$0x1, %r14
    00001c49: 	jne	.Ltmp2827 # Offset: 7241
    00001c4f: 	movq	-0x3ff0(%rbp), %rax
    00001c56: 	movzbl	(%rax), %eax
    00001c59: 	movb	%al, 0x10(%rbx)
.Ltmp2876:
    00001c5c: 	movq	%r14, 0x8(%rbx)
    00001c60: 	movb	$0x0, (%rdi,%r14)
    00001c65: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001c6c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001c73: 	addq	$0x20, %rax
    00001c77: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001c7e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00001c85: 	je	.Ltmp2828 # Offset: 7301
.Ltmp3040:
    00001c8b: 	movq	-0x20(%rax), %r14
    00001c8f: 	callq	clock@PLT # Offset: 7311
    00001c94: 	pxor	%xmm0, %xmm0
    00001c98: 	movq	%rax, end_time(%rip)
    00001c9f: 	movq	%r14, %rdi
    00001ca2: 	subq	start_time(%rip), %rax
    00001ca9: 	cvtsi2sd	%rax, %xmm0
    00001cae: 	divsd	DATAat0x24890(%rip), %xmm0
    00001cb6: 	callq	_Z13record_resultdPKc # Offset: 7350
    00001cbb: 	movq	-0x1f80(%rbp), %rdi
    00001cc2: 	leaq	-0x1f70(%rbp), %rax
    00001cc9: 	cmpq	%rax, %rdi
    00001ccc: 	je	.Ltmp2829 # Offset: 7372
    00001cce: 	movq	-0x1f70(%rbp), %rax
    00001cd5: 	leaq	0x1(%rax), %rsi
    00001cd9: 	callq	_ZdlPvm@PLT # Offset: 7385
.Ltmp2829:
    00001cde: 	leaq	-0x3ee0(%rbp), %rax
    00001ce5: 	leaq	DATAat0x247a8(%rip), %rdx
    00001cec: 	movq	%r15, %rsi
    00001cef: 	movq	%rax, %rdi
    00001cf2: 	movq	%rax, -0x4010(%rbp)
    00001cf9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7417
    00001cfe: 	callq	clock@PLT # Offset: 7422
    00001d03: 	movl	iterations(%rip), %r8d
    00001d0a: 	xorl	%r14d, %r14d
    00001d0d: 	leaq	DATAat0x246f4(%rip), %rbx
    00001d14: 	movq	%rax, start_time(%rip)
    00001d1b: 	leaq	-0x1f7e(%rbp), %rax
    00001d22: 	movq	%rax, -0x4020(%rbp)
    00001d29: 	testl	%r8d, %r8d
    00001d2c: 	jle	.Ltmp2830 # Offset: 7468
.Ltmp2836:
    00001d32: 	movq	-0x4000(%rbp), %rsi
    00001d39: 	movl	$0x1f4, %ecx
    00001d3e: 	movq	%r12, %rdi
    00001d41: 	rep		movsq	(%rsi), %es:(%rdi)
    00001d44: 	movq	-0x4020(%rbp), %rdi
    00001d4b: 	movq	-0x3fd8(%rbp), %rcx
    00001d52: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2833:
    00001d58: 	movzwl	(%rdi), %esi
    00001d5b: 	movq	%rdi, %rax
    00001d5e: 	movq	%rcx, %r11
    00001d61: 	nopl	(%rax) # Size: 7
.Ltmp2832:
    00001d68: 	movq	%rax, %rdx
    00001d6b: 	leaq	-0x2(%rax), %rax
    00001d6f: 	movzwl	-0x2(%rdx), %ecx
    00001d73: 	cmpw	%cx, %si
    00001d76: 	jge	.Ltmp2831 # Offset: 7542
    00001d7c: 	movw	%cx, 0x2(%rax)
    00001d80: 	cmpq	%r12, %rax
    00001d83: 	jne	.Ltmp2832 # Offset: 7555
    00001d85: 	movq	%r11, %rcx
    00001d88: 	movq	%r12, %rdx
.Ltmp2877:
    00001d8b: 	addq	$0x2, %rdi
    00001d8f: 	movw	%si, (%rdx)
    00001d92: 	cmpq	%rcx, %rdi
    00001d95: 	jne	.Ltmp2833 # Offset: 7573
    00001d97: 	movzwl	-0x1f80(%rbp), %edx
    00001d9e: 	movq	-0x4020(%rbp), %rax
    00001da5: 	movq	%rcx, %rdi
    00001da8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2835:
    00001db0: 	addq	$0x2, %rax
    00001db4: 	movl	%edx, %ecx
    00001db6: 	movzwl	-0x2(%rax), %edx
    00001dba: 	cmpw	%cx, %dx
    00001dbd: 	jl	.Ltmp2834 # Offset: 7613
    00001dc3: 	cmpq	%rdi, %rax
    00001dc6: 	jne	.Ltmp2835 # Offset: 7622
    00001dc8: 	movq	%rdi, -0x3fd8(%rbp)
.Ltmp3006:
    00001dcf: 	addl	$0x1, %r14d
    00001dd3: 	cmpl	%r8d, %r14d
    00001dd6: 	jl	.Ltmp2836 # Offset: 7638
.Ltmp2830:
    00001ddc: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00001de3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00001dea: 	subq	$0x20, %rax
    00001dee: 	cmpq	%rax, %rbx
    00001df1: 	je	.Ltmp2837 # Offset: 7665
    00001df7: 	leaq	0x10(%rbx), %rdi
    00001dfb: 	movq	-0x3ed8(%rbp), %r14
    00001e02: 	movq	%rdi, (%rbx)
    00001e05: 	movq	-0x3ee0(%rbp), %rax
    00001e0c: 	movq	%rax, -0x3ff0(%rbp)
    00001e13: 	movq	%rax, %rsi
    00001e16: 	addq	%r14, %rax
    00001e19: 	je	.Ltmp2838 # Offset: 7705
    00001e1b: 	testq	%rsi, %rsi
    00001e1e: 	je	.Ltmp2839 # Offset: 7710
.Ltmp2838:
    00001e24: 	movq	%r14, -0x3fc8(%rbp)
    00001e2b: 	cmpq	$0xf, %r14
    00001e2f: 	ja	.Ltmp2840 # Offset: 7727
    00001e35: 	cmpq	$0x1, %r14
    00001e39: 	jne	.Ltmp2841 # Offset: 7737
    00001e3f: 	movq	-0x3ff0(%rbp), %rax
    00001e46: 	movzbl	(%rax), %eax
    00001e49: 	movb	%al, 0x10(%rbx)
.Ltmp3052:
    00001e4c: 	movq	%r14, 0x8(%rbx)
    00001e50: 	movb	$0x0, (%rdi,%r14)
    00001e55: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001e5c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001e63: 	addq	$0x20, %rax
    00001e67: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001e6e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00001e75: 	je	.Ltmp2842 # Offset: 7797
.Ltmp3053:
    00001e7b: 	movq	-0x20(%rax), %r14
    00001e7f: 	callq	clock@PLT # Offset: 7807
    00001e84: 	pxor	%xmm0, %xmm0
    00001e88: 	movq	%rax, end_time(%rip)
    00001e8f: 	movq	%r14, %rdi
    00001e92: 	subq	start_time(%rip), %rax
    00001e99: 	cvtsi2sd	%rax, %xmm0
    00001e9e: 	divsd	DATAat0x24890(%rip), %xmm0
    00001ea6: 	callq	_Z13record_resultdPKc # Offset: 7846
    00001eab: 	movq	-0x3ee0(%rbp), %rdi
    00001eb2: 	leaq	-0x3ed0(%rbp), %rax
    00001eb9: 	movq	%rax, -0x4018(%rbp)
    00001ec0: 	cmpq	%rax, %rdi
    00001ec3: 	je	.Ltmp2843 # Offset: 7875
    00001ec5: 	movq	-0x3ed0(%rbp), %rax
    00001ecc: 	leaq	0x1(%rax), %rsi
    00001ed0: 	callq	_ZdlPvm@PLT # Offset: 7888
.Ltmp2843:
    00001ed5: 	movq	-0x4010(%rbp), %rdi
    00001edc: 	leaq	DATAat0x247d0(%rip), %rdx
    00001ee3: 	movq	%r15, %rsi
    00001ee6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7910
    00001eeb: 	movq	-0x3f98(%rbp), %rax
    00001ef2: 	movq	-0x3fa0(%rbp), %r14
    00001ef9: 	movq	%rax, -0x3ff0(%rbp)
    00001f00: 	callq	clock@PLT # Offset: 7936
    00001f05: 	movl	iterations(%rip), %r8d
    00001f0c: 	movq	%rax, start_time(%rip)
    00001f13: 	testl	%r8d, %r8d
    00001f16: 	jle	.Ltmp2844 # Offset: 7958
    00001f1c: 	movq	-0x3fe8(%rbp), %rsi
    00001f23: 	leaq	0x2(%r14), %rax
    00001f27: 	leaq	0x2(%r13), %rdx
    00001f2b: 	movl	$0x0, -0x4020(%rbp)
    00001f35: 	movq	%rax, -0x4028(%rbp)
    00001f3c: 	leaq	-0x2(%rsi), %rax
    00001f40: 	movq	%rax, %rbx
    00001f43: 	movq	%r14, %rax
    00001f46: 	subq	%rdx, %rax
    00001f49: 	subq	%r13, %rbx
    00001f4c: 	cmpq	$0xc, %rax
    00001f50: 	movq	%rbx, -0x4068(%rbp)
    00001f57: 	seta	%dl
    00001f5a: 	cmpq	$0x4, %rbx
    00001f5e: 	seta	%al
    00001f61: 	shrq	%rbx
    00001f64: 	subq	%r13, %rsi
    00001f67: 	leaq	0x1(%rbx), %rdi
    00001f6b: 	andl	%eax, %edx
    00001f6d: 	movq	%rbx, -0x4058(%rbp)
    00001f74: 	movq	%rdi, %rax
    00001f77: 	movq	%rdi, -0x4060(%rbp)
    00001f7e: 	andq	$-0x8, %rdi
    00001f82: 	shrq	$0x3, %rax
    00001f86: 	movq	%rdi, -0x4050(%rbp)
    00001f8d: 	shlq	$0x4, %rax
    00001f91: 	movb	%dl, -0x4030(%rbp)
    00001f97: 	movq	%rax, %rbx
    00001f9a: 	leaq	(%rdi,%rdi), %rax
    00001f9e: 	movq	%rsi, -0x4070(%rbp)
    00001fa5: 	leaq	(%r13,%rax), %rdi
    00001faa: 	addq	%r14, %rax
    00001fad: 	movq	%rdi, -0x4040(%rbp)
    00001fb4: 	movq	%rax, -0x4038(%rbp)
.Ltmp2859:
    00001fbb: 	cmpq	%r13, -0x3fe8(%rbp)
    00001fc2: 	je	.Ltmp2845 # Offset: 8130
    00001fc8: 	cmpb	$0x0, -0x4030(%rbp)
    00001fcf: 	je	.Ltmp2846 # Offset: 8143
    00001fd5: 	cmpq	$0xc, -0x4068(%rbp)
    00001fdd: 	jbe	.Ltmp2847 # Offset: 8157
    00001fe3: 	movq	-0x3fd8(%rbp), %rdi
    00001fea: 	xorl	%eax, %eax
    00001fec: 	nopl	(%rax) # Size: 4
.Ltmp2848:
    00001ff0: 	movdqu	(%r13,%rax), %xmm1
    00001ff7: 	movups	%xmm1, (%r14,%rax)
    00001ffc: 	addq	$0x10, %rax
    00002000: 	cmpq	%rax, %rbx
    00002003: 	jne	.Ltmp2848 # Offset: 8195
    00002005: 	movq	%rdi, -0x3fd8(%rbp)
    0000200c: 	movq	-0x4050(%rbp), %rax
    00002013: 	movq	-0x4060(%rbp), %rdi
    0000201a: 	cmpq	%rdi, %rax
    0000201d: 	je	.Ltmp2845 # Offset: 8221
    0000201f: 	movq	%rax, %rcx
    00002022: 	movq	-0x4038(%rbp), %rdx
    00002029: 	movq	-0x4040(%rbp), %rax
.Ltmp3033:
    00002030: 	movq	-0x4058(%rbp), %rsi
    00002037: 	subq	%rcx, %rsi
    0000203a: 	leaq	0x1(%rsi), %rdi
    0000203e: 	cmpq	$0x2, %rsi
    00002042: 	jbe	.Ltmp2849 # Offset: 8258
    00002044: 	movq	(%r13,%rcx,2), %rsi
    00002049: 	movq	%rsi, (%r14,%rcx,2)
    0000204d: 	movq	%rdi, %rcx
    00002050: 	andq	$-0x4, %rcx
    00002054: 	leaq	(%rcx,%rcx), %rsi
    00002058: 	addq	%rsi, %rax
    0000205b: 	addq	%rsi, %rdx
    0000205e: 	cmpq	%rdi, %rcx
    00002061: 	je	.Ltmp2845 # Offset: 8289
.Ltmp2849:
    00002063: 	movzwl	(%rax), %ecx
    00002066: 	movq	-0x3fe8(%rbp), %rdi
    0000206d: 	movw	%cx, (%rdx)
    00002070: 	leaq	0x2(%rax), %rcx
    00002074: 	cmpq	%rcx, %rdi
    00002077: 	je	.Ltmp2845 # Offset: 8311
    00002079: 	movzwl	0x2(%rax), %ecx
    0000207d: 	movw	%cx, 0x2(%rdx)
    00002081: 	leaq	0x4(%rax), %rcx
    00002085: 	cmpq	%rcx, %rdi
    00002088: 	je	.Ltmp2845 # Offset: 8328
    0000208a: 	movzwl	0x4(%rax), %eax
    0000208e: 	movw	%ax, 0x4(%rdx)
.Ltmp2845:
    00002092: 	cmpq	-0x3ff0(%rbp), %r14
    00002099: 	je	.Ltmp2850 # Offset: 8345
    0000209b: 	movq	-0x3ff0(%rbp), %r9
    000020a2: 	movq	-0x4028(%rbp), %rax
    000020a9: 	cmpq	%rax, %r9
    000020ac: 	je	.Ltmp2850 # Offset: 8364
    000020ae: 	movq	-0x3fd8(%rbp), %rcx
    000020b5: 	movq	%rax, %rdi
    000020b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2855:
    000020c0: 	movzwl	(%rdi), %esi
    000020c3: 	movq	%rdi, %rax
    000020c6: 	cmpq	%rdi, %r14
    000020c9: 	je	.Ltmp2851 # Offset: 8393
    000020cf: 	movq	%rcx, %r11
    000020d2: 	jmp	.Ltmp2852 # Offset: 8402
    000020d4: 	nopl	(%rax) # Size: 4
.Ltmp2854:
    000020d8: 	movw	%cx, 0x2(%rax)
    000020dc: 	cmpq	%rax, %r14
    000020df: 	je	.Ltmp2853 # Offset: 8415
.Ltmp2852:
    000020e5: 	movq	%rax, %rdx
    000020e8: 	leaq	-0x2(%rax), %rax
    000020ec: 	movzwl	-0x2(%rdx), %ecx
    000020f0: 	cmpw	%cx, %si
    000020f3: 	jl	.Ltmp2854 # Offset: 8435
    000020f5: 	movq	%r11, %rcx
.Ltmp2880:
    000020f8: 	addq	$0x2, %rdi
    000020fc: 	movw	%si, (%rdx)
    000020ff: 	cmpq	%r9, %rdi
    00002102: 	jne	.Ltmp2855 # Offset: 8450
    00002104: 	movq	%rcx, -0x3fd8(%rbp)
.Ltmp2850:
    0000210b: 	movq	-0x4028(%rbp), %rax
    00002112: 	movq	-0x3ff0(%rbp), %rcx
    00002119: 	movq	-0x3fd8(%rbp), %rsi
    00002120: 	jmp	.Ltmp2856 # Offset: 8480
    00002122: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2858:
    00002128: 	addq	$0x2, %rax
    0000212c: 	movzwl	-0x4(%rax), %edi
    00002130: 	cmpw	%di, (%rdx)
    00002133: 	jl	.Ltmp2857 # Offset: 8499
.Ltmp2856:
    00002139: 	movq	%rax, %rdx
    0000213c: 	cmpq	%rax, %rcx
    0000213f: 	jne	.Ltmp2858 # Offset: 8511
    00002141: 	movq	%rsi, -0x3fd8(%rbp)
.Ltmp2999:
    00002148: 	addl	$0x1, -0x4020(%rbp)
    0000214f: 	movl	-0x4020(%rbp), %eax
    00002155: 	cmpl	%r8d, %eax
    00002158: 	jl	.Ltmp2859 # Offset: 8536
.Ltmp2844:
    0000215e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00002165: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000216c: 	subq	$0x20, %rax
    00002170: 	cmpq	%rax, %rbx
    00002173: 	je	.Ltmp2860 # Offset: 8563
    00002179: 	leaq	0x10(%rbx), %rdi
    0000217d: 	movq	-0x3ed8(%rbp), %rcx
    00002184: 	movq	%rdi, (%rbx)
    00002187: 	movq	-0x3ee0(%rbp), %rax
    0000218e: 	movq	%rcx, -0x4020(%rbp)
    00002195: 	movq	%rax, -0x4028(%rbp)
    0000219c: 	movq	%rax, %rsi
    0000219f: 	addq	%rcx, %rax
    000021a2: 	je	.Ltmp2861 # Offset: 8610
    000021a4: 	testq	%rsi, %rsi
    000021a7: 	je	.Ltmp2862 # Offset: 8615
.Ltmp2861:
    000021ad: 	movq	-0x4020(%rbp), %rax
    000021b4: 	movq	%rax, -0x3fc8(%rbp)
    000021bb: 	cmpq	$0xf, %rax
    000021bf: 	ja	.Ltmp2863 # Offset: 8639
    000021c5: 	cmpq	$0x1, -0x4020(%rbp)
    000021cd: 	jne	.Ltmp2864 # Offset: 8653
    000021d3: 	movq	-0x4028(%rbp), %rax
    000021da: 	movzbl	(%rax), %eax
    000021dd: 	movb	%al, 0x10(%rbx)
.Ltmp3038:
    000021e0: 	movq	-0x4020(%rbp), %rax
    000021e7: 	movq	%rax, 0x8(%rbx)
    000021eb: 	movb	$0x0, (%rdi,%rax)
    000021ef: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000021f6: 	addq	$0x20, %rax
    000021fa: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp3041:
    00002201: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00002208: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000220f: 	je	.Ltmp2865 # Offset: 8719
.Ltmp3037:
    00002215: 	movq	-0x20(%rax), %rbx
    00002219: 	callq	clock@PLT # Offset: 8729
    0000221e: 	pxor	%xmm0, %xmm0
    00002222: 	movq	%rax, end_time(%rip)
    00002229: 	movq	%rbx, %rdi
    0000222c: 	subq	start_time(%rip), %rax
    00002233: 	cvtsi2sd	%rax, %xmm0
    00002238: 	divsd	DATAat0x24890(%rip), %xmm0
    00002240: 	callq	_Z13record_resultdPKc # Offset: 8768
    00002245: 	movq	-0x3ee0(%rbp), %rdi
    0000224c: 	cmpq	-0x4018(%rbp), %rdi
    00002253: 	je	.Ltmp2866 # Offset: 8787
    00002255: 	movq	-0x3ed0(%rbp), %rax
    0000225c: 	leaq	0x1(%rax), %rsi
    00002260: 	callq	_ZdlPvm@PLT # Offset: 8800
.Ltmp2866:
    00002265: 	movq	-0x4010(%rbp), %rdi
    0000226c: 	leaq	DATAat0x246b3(%rip), %rdx
    00002273: 	movq	%r15, %rsi
    00002276: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8822
    0000227b: 	callq	clock@PLT # Offset: 8827
    00002280: 	movl	iterations(%rip), %edx
    00002286: 	leaq	-0x40(%rbp), %rbx
    0000228a: 	movl	$0x0, -0x4028(%rbp)
    00002294: 	movq	%rax, start_time(%rip)
    0000229b: 	leaq	-0xfde(%rbp), %rax
    000022a2: 	movq	%rax, -0x4020(%rbp)
    000022a9: 	leaq	-0xfe0(%rbp), %rax
    000022b0: 	movq	%rax, -0x4038(%rbp)
    000022b7: 	testl	%edx, %edx
    000022b9: 	jle	.Ltmp2867 # Offset: 8889
.Ltmp2883:
    000022bf: 	movq	-0x3fd8(%rbp), %rdi
    000022c6: 	movq	-0x3fe0(%rbp), %rsi
    000022cd: 	movl	$0x1f4, %ecx
    000022d2: 	movq	%rbx, -0x3fd8(%rbp)
    000022d9: 	rep		movsq	(%rsi), %es:(%rdi)
    000022dc: 	movq	-0x4038(%rbp), %r9
    000022e3: 	movq	%r9, -0x4030(%rbp)
.Ltmp2879:
    000022ea: 	movq	-0x3fd8(%rbp), %rdi
    000022f1: 	movzwl	(%r9), %esi
    000022f5: 	movq	%r9, %rax
    000022f8: 	movq	%rdi, %rbx
    000022fb: 	movq	%rdi, %r10
    000022fe: 	nop # Size: 2
.Ltmp2872:
    00002300: 	movzwl	-0x2(%rbx), %edi
    00002304: 	leaq	-0x2(%rbx), %rcx
    00002308: 	cmpw	%di, %si
    0000230b: 	jl	.Ltmp2868 # Offset: 8971
    0000230d: 	cmpq	%rax, %rcx
    00002310: 	jbe	.Ltmp2869 # Offset: 8976
    00002316: 	movzwl	(%rax), %edx
    00002319: 	cmpw	%si, %dx
    0000231c: 	jge	.Ltmp2870 # Offset: 8988
    0000231e: 	nop # Size: 2
.Ltmp2871:
    00002320: 	movzwl	0x2(%rax), %edx
    00002324: 	addq	$0x2, %rax
    00002328: 	cmpw	%dx, %si
    0000232b: 	jg	.Ltmp2871 # Offset: 9003
    0000232d: 	cmpq	%rax, %rcx
    00002330: 	jbe	.Ltmp2869 # Offset: 9008
.Ltmp2870:
    00002336: 	movw	%dx, (%rcx)
    00002339: 	movw	%di, (%rax)
.Ltmp2868:
    0000233c: 	movq	%rcx, %rbx
    0000233f: 	jmp	.Ltmp2872 # Offset: 9023
    00002341: 	nopl	(%rax) # Size: 7
.Ltmp2728:
    00002348: 	addq	$0x20, %r15
    0000234c: 	cmpq	%rbx, %r15
    0000234f: 	jne	.Ltmp2729 # Offset: 9039
    00002355: 	addq	$0x8, %r14
    00002359: 	cmpq	%r14, -0x3fe0(%rbp)
    00002360: 	ja	.Ltmp2730 # Offset: 9056
    00002366: 	jmp	.Ltmp2873 # Offset: 9062
    0000236b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2817:
    00002370: 	movq	%r11, %rcx
    00002373: 	jmp	.Ltmp2874 # Offset: 9075
.Ltmp2820:
    00002378: 	movq	-0x1f80(%rbp), %rdx
    0000237f: 	movq	%rdi, -0x3fd8(%rbp)
    00002386: 	leaq	DATAat0x246f4(%rip), %rsi
    0000238d: 	movl	$0x1, %edi
    00002392: 	xorl	%eax, %eax
    00002394: 	callq	__printf_chk@PLT # Offset: 9108
    00002399: 	movl	iterations(%rip), %r8d
    000023a0: 	jmp	.Ltmp2875 # Offset: 9120
.Ltmp2826:
    000023a5: 	leaq	-0x3fc8(%rbp), %rsi
    000023ac: 	xorl	%edx, %edx
    000023ae: 	movq	%rbx, %rdi
    000023b1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9137
    000023b6: 	movq	%rax, (%rbx)
    000023b9: 	movq	%rax, %rdi
    000023bc: 	movq	-0x3fc8(%rbp), %rax
    000023c3: 	movq	%rax, 0x10(%rbx)
.Ltmp3068:
    000023c7: 	movq	-0x3ff0(%rbp), %rsi
    000023ce: 	movq	%r14, %rdx
    000023d1: 	callq	memcpy@PLT # Offset: 9169
    000023d6: 	movq	-0x3fc8(%rbp), %r14
    000023dd: 	movq	(%rbx), %rdi
    000023e0: 	jmp	.Ltmp2876 # Offset: 9184
    000023e5: 	nopl	(%rax) # Size: 3
.Ltmp2831:
    000023e8: 	movq	%r11, %rcx
    000023eb: 	jmp	.Ltmp2877 # Offset: 9195
.Ltmp2869:
    000023f0: 	movq	%rbx, %rsi
    000023f3: 	movq	%r9, %rdi
    000023f6: 	movq	%r10, -0x3fd8(%rbp)
    000023fd: 	callq	_ZN9benchmark9quicksortIPsEEvT_S2_ # Offset: 9213
    00002402: 	movq	-0x3fd8(%rbp), %rax
    00002409: 	subq	%rbx, %rax
    0000240c: 	cmpq	$0x2, %rax
    00002410: 	jle	.Ltmp2878 # Offset: 9232
    00002412: 	movq	%rbx, %r9
    00002415: 	jmp	.Ltmp2879 # Offset: 9237
    0000241a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2853:
    00002420: 	movq	%r11, %rcx
    00002423: 	movq	%r14, %rdx
    00002426: 	jmp	.Ltmp2880 # Offset: 9254
.Ltmp2878:
    0000242b: 	movq	-0x3fd8(%rbp), %rbx
    00002432: 	movq	-0x4030(%rbp), %rdi
    00002439: 	movzwl	-0xfe0(%rbp), %edx
    00002440: 	movq	-0x4020(%rbp), %rax
    00002447: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2882:
    00002450: 	addq	$0x2, %rax
    00002454: 	movl	%edx, %ecx
    00002456: 	movzwl	-0x2(%rax), %edx
    0000245a: 	cmpw	%cx, %dx
    0000245d: 	jl	.Ltmp2881 # Offset: 9309
    00002463: 	cmpq	%rbx, %rax
    00002466: 	jne	.Ltmp2882 # Offset: 9318
    00002468: 	movq	%rdi, -0x3fd8(%rbp)
.Ltmp3004:
    0000246f: 	addl	$0x1, -0x4028(%rbp)
    00002476: 	movl	-0x4028(%rbp), %eax
    0000247c: 	cmpl	iterations(%rip), %eax
    00002482: 	jl	.Ltmp2883 # Offset: 9346
.Ltmp2867:
    00002488: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000248f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00002496: 	subq	$0x20, %rax
    0000249a: 	cmpq	%rax, %rbx
    0000249d: 	je	.Ltmp2884 # Offset: 9373
    000024a3: 	leaq	0x10(%rbx), %rdi
    000024a7: 	movq	-0x3ed8(%rbp), %rcx
    000024ae: 	movq	%rdi, (%rbx)
    000024b1: 	movq	-0x3ee0(%rbp), %rax
    000024b8: 	movq	%rcx, -0x4020(%rbp)
    000024bf: 	movq	%rax, -0x4028(%rbp)
    000024c6: 	movq	%rax, %rsi
    000024c9: 	addq	%rcx, %rax
    000024cc: 	je	.Ltmp2885 # Offset: 9420
    000024ce: 	testq	%rsi, %rsi
    000024d1: 	je	.Ltmp2886 # Offset: 9425
.Ltmp2885:
    000024d7: 	movq	-0x4020(%rbp), %rax
    000024de: 	movq	%rax, -0x3fc8(%rbp)
    000024e5: 	cmpq	$0xf, %rax
    000024e9: 	ja	.Ltmp2887 # Offset: 9449
    000024ef: 	cmpq	$0x1, -0x4020(%rbp)
    000024f7: 	jne	.Ltmp2888 # Offset: 9463
    000024fd: 	movq	-0x4028(%rbp), %rax
    00002504: 	movzbl	(%rax), %eax
    00002507: 	movb	%al, 0x10(%rbx)
.Ltmp3035:
    0000250a: 	movq	-0x4020(%rbp), %rax
    00002511: 	movq	%rax, 0x8(%rbx)
    00002515: 	movb	$0x0, (%rdi,%rax)
    00002519: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002520: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002527: 	addq	$0x20, %rax
    0000252b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00002532: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00002539: 	je	.Ltmp2889 # Offset: 9529
.Ltmp3036:
    0000253f: 	movq	-0x20(%rax), %rbx
    00002543: 	callq	clock@PLT # Offset: 9539
    00002548: 	pxor	%xmm0, %xmm0
    0000254c: 	movq	%rax, end_time(%rip)
    00002553: 	movq	%rbx, %rdi
    00002556: 	subq	start_time(%rip), %rax
    0000255d: 	cvtsi2sd	%rax, %xmm0
    00002562: 	divsd	DATAat0x24890(%rip), %xmm0
    0000256a: 	callq	_Z13record_resultdPKc # Offset: 9578
    0000256f: 	movq	-0x3ee0(%rbp), %rdi
    00002576: 	cmpq	-0x4018(%rbp), %rdi
    0000257d: 	je	.Ltmp2890 # Offset: 9597
    0000257f: 	movq	-0x3ed0(%rbp), %rax
    00002586: 	leaq	0x1(%rax), %rsi
    0000258a: 	callq	_ZdlPvm@PLT # Offset: 9610
.Ltmp2890:
    0000258f: 	movq	-0x4010(%rbp), %rdi
    00002596: 	leaq	DATAat0x247f8(%rip), %rdx
    0000259d: 	movq	%r15, %rsi
    000025a0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9632
    000025a5: 	callq	clock@PLT # Offset: 9637
    000025aa: 	movl	$0x0, -0x4028(%rbp)
    000025b4: 	movq	%rax, start_time(%rip)
    000025bb: 	leaq	-0x1f7e(%rbp), %rax
    000025c2: 	movq	%rax, -0x4020(%rbp)
    000025c9: 	leaq	-0x1f80(%rbp), %rax
    000025d0: 	movq	%rax, -0x4030(%rbp)
    000025d7: 	movl	iterations(%rip), %eax
    000025dd: 	testl	%eax, %eax
    000025df: 	jle	.Ltmp2891 # Offset: 9695
.Ltmp2901:
    000025e5: 	movq	%r12, %rdi
    000025e8: 	movq	-0x4000(%rbp), %rsi
    000025ef: 	movl	$0x1f4, %ecx
    000025f4: 	movq	-0x4030(%rbp), %r9
    000025fb: 	rep		movsq	(%rsi), %es:(%rdi)
    000025fe: 	movq	%r9, %r12
.Ltmp2898:
    00002601: 	movq	-0x3fd8(%rbp), %rdi
    00002608: 	movzwl	(%r9), %esi
    0000260c: 	movq	%r9, %rax
    0000260f: 	movq	%rdi, %rbx
    00002612: 	movq	%rdi, %r10
    00002615: 	nopl	(%rax) # Size: 3
.Ltmp2896:
    00002618: 	movzwl	-0x2(%rbx), %edi
    0000261c: 	leaq	-0x2(%rbx), %rcx
    00002620: 	cmpw	%di, %si
    00002623: 	jl	.Ltmp2892 # Offset: 9763
    00002625: 	cmpq	%rax, %rcx
    00002628: 	jbe	.Ltmp2893 # Offset: 9768
    0000262a: 	movzwl	(%rax), %edx
    0000262d: 	cmpw	%dx, %si
    00002630: 	jle	.Ltmp2894 # Offset: 9776
    00002632: 	movq	%r10, %r11
    00002635: 	nopl	(%rax) # Size: 3
.Ltmp2895:
    00002638: 	movzwl	0x2(%rax), %edx
    0000263c: 	addq	$0x2, %rax
    00002640: 	cmpw	%dx, %si
    00002643: 	jg	.Ltmp2895 # Offset: 9795
    00002645: 	movq	%r11, %r10
    00002648: 	cmpq	%rax, %rcx
    0000264b: 	jbe	.Ltmp2893 # Offset: 9803
.Ltmp2894:
    0000264d: 	movw	%dx, (%rcx)
    00002650: 	movw	%di, (%rax)
.Ltmp2892:
    00002653: 	movq	%rcx, %rbx
    00002656: 	jmp	.Ltmp2896 # Offset: 9814
    00002658: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2893:
    00002660: 	movq	%rbx, %rsi
    00002663: 	movq	%r9, %rdi
    00002666: 	movq	%r10, -0x3fd8(%rbp)
    0000266d: 	callq	_ZN9benchmark9quicksortIPsEEvT_S2_ # Offset: 9837
    00002672: 	movq	-0x3fd8(%rbp), %rax
    00002679: 	subq	%rbx, %rax
    0000267c: 	cmpq	$0x2, %rax
    00002680: 	jle	.Ltmp2897 # Offset: 9856
    00002682: 	movq	%rbx, %r9
    00002685: 	jmp	.Ltmp2898 # Offset: 9861
.Ltmp2897:
    0000268a: 	movq	-0x3fd8(%rbp), %rbx
    00002691: 	movzwl	-0x1f80(%rbp), %edx
    00002698: 	movq	-0x4020(%rbp), %rax
    0000269f: 	movq	%rbx, %rdi
    000026a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2900:
    000026a8: 	addq	$0x2, %rax
    000026ac: 	movl	%edx, %ecx
    000026ae: 	movzwl	-0x2(%rax), %edx
    000026b2: 	cmpw	%cx, %dx
    000026b5: 	jl	.Ltmp2899 # Offset: 9909
    000026bb: 	cmpq	%rdi, %rax
    000026be: 	jne	.Ltmp2900 # Offset: 9918
    000026c0: 	movq	%rdi, -0x3fd8(%rbp)
.Ltmp3003:
    000026c7: 	addl	$0x1, -0x4028(%rbp)
    000026ce: 	movl	-0x4028(%rbp), %eax
    000026d4: 	cmpl	iterations(%rip), %eax
    000026da: 	jl	.Ltmp2901 # Offset: 9946
.Ltmp2891:
    000026e0: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000026e7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000026ee: 	subq	$0x20, %rax
    000026f2: 	cmpq	%rax, %rbx
    000026f5: 	je	.Ltmp2902 # Offset: 9973
    000026fb: 	leaq	0x10(%rbx), %rdi
    000026ff: 	movq	-0x3ed8(%rbp), %rcx
    00002706: 	movq	%rdi, (%rbx)
    00002709: 	movq	-0x3ee0(%rbp), %rax
    00002710: 	movq	%rcx, -0x4020(%rbp)
    00002717: 	movq	%rax, -0x4028(%rbp)
    0000271e: 	movq	%rax, %rsi
    00002721: 	addq	%rcx, %rax
    00002724: 	je	.Ltmp2903 # Offset: 10020
    00002726: 	testq	%rsi, %rsi
    00002729: 	je	.Ltmp2904 # Offset: 10025
.Ltmp2903:
    0000272f: 	movq	-0x4020(%rbp), %rax
    00002736: 	movq	%rax, -0x3fc8(%rbp)
    0000273d: 	cmpq	$0xf, %rax
    00002741: 	ja	.Ltmp2905 # Offset: 10049
    00002747: 	cmpq	$0x1, -0x4020(%rbp)
    0000274f: 	jne	.Ltmp2906 # Offset: 10063
    00002755: 	movq	-0x4028(%rbp), %rax
    0000275c: 	movzbl	(%rax), %eax
    0000275f: 	movb	%al, 0x10(%rbx)
.Ltmp3061:
    00002762: 	movq	-0x4020(%rbp), %rax
    00002769: 	movq	%rax, 0x8(%rbx)
    0000276d: 	movb	$0x0, (%rdi,%rax)
    00002771: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002778: 	addq	$0x20, %rax
    0000277c: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp3065:
    00002783: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000278a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002791: 	je	.Ltmp2907 # Offset: 10129
.Ltmp3060:
    00002797: 	movq	-0x20(%rax), %rbx
    0000279b: 	callq	clock@PLT # Offset: 10139
    000027a0: 	pxor	%xmm0, %xmm0
    000027a4: 	movq	%rax, end_time(%rip)
    000027ab: 	movq	%rbx, %rdi
    000027ae: 	subq	start_time(%rip), %rax
    000027b5: 	cvtsi2sd	%rax, %xmm0
    000027ba: 	divsd	DATAat0x24890(%rip), %xmm0
    000027c2: 	callq	_Z13record_resultdPKc # Offset: 10178
    000027c7: 	movq	-0x3ee0(%rbp), %rdi
    000027ce: 	cmpq	-0x4018(%rbp), %rdi
    000027d5: 	je	.Ltmp2908 # Offset: 10197
    000027d7: 	movq	-0x3ed0(%rbp), %rax
    000027de: 	leaq	0x1(%rax), %rsi
    000027e2: 	callq	_ZdlPvm@PLT # Offset: 10210
.Ltmp2908:
    000027e7: 	movq	-0x4010(%rbp), %rdi
    000027ee: 	leaq	DATAat0x24818(%rip), %rdx
    000027f5: 	movq	%r15, %rsi
    000027f8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10232
    000027fd: 	callq	clock@PLT # Offset: 10237
    00002802: 	movq	%rax, start_time(%rip)
    00002809: 	movl	iterations(%rip), %eax
    0000280f: 	movl	%eax, -0x4028(%rbp)
    00002815: 	testl	%eax, %eax
    00002817: 	jle	.Ltmp2909 # Offset: 10263
    0000281d: 	movq	-0x3ff0(%rbp), %rax
    00002824: 	leaq	0x2(%r13), %rdx
    00002828: 	movl	$0x0, -0x4020(%rbp)
    00002832: 	subq	%r14, %rax
    00002835: 	movq	%rax, -0x4030(%rbp)
    0000283c: 	leaq	0x2(%r14), %rax
    00002840: 	movq	%rax, -0x4040(%rbp)
    00002847: 	movq	-0x3fe8(%rbp), %rax
    0000284e: 	subq	$0x2, %rax
    00002852: 	movq	%rax, %rbx
    00002855: 	movq	%r14, %rax
    00002858: 	subq	%rdx, %rax
    0000285b: 	subq	%r13, %rbx
    0000285e: 	cmpq	$0xc, %rax
    00002862: 	movq	%rbx, -0x4078(%rbp)
    00002869: 	seta	%dl
    0000286c: 	cmpq	$0x4, %rbx
    00002870: 	seta	%al
    00002873: 	shrq	%rbx
    00002876: 	leaq	0x1(%rbx), %rdi
    0000287a: 	andl	%eax, %edx
    0000287c: 	movq	%rbx, -0x4068(%rbp)
    00002883: 	movq	%rdi, %rax
    00002886: 	movq	%rdi, -0x4070(%rbp)
    0000288d: 	andq	$-0x8, %rdi
    00002891: 	shrq	$0x3, %rax
    00002895: 	movq	%rdi, -0x4060(%rbp)
    0000289c: 	shlq	$0x4, %rax
    000028a0: 	movb	%dl, -0x4038(%rbp)
    000028a6: 	movq	%rax, %rbx
    000028a9: 	leaq	(%rdi,%rdi), %rax
    000028ad: 	leaq	(%r13,%rax), %rdi
    000028b2: 	addq	%r14, %rax
    000028b5: 	movq	%rdi, -0x4058(%rbp)
    000028bc: 	movq	%rax, -0x4050(%rbp)
.Ltmp2924:
    000028c3: 	cmpq	%r13, -0x3fe8(%rbp)
    000028ca: 	je	.Ltmp2910 # Offset: 10442
    000028d0: 	cmpb	$0x0, -0x4038(%rbp)
    000028d7: 	je	.Ltmp2911 # Offset: 10455
    000028dd: 	cmpq	$0xc, -0x4078(%rbp)
    000028e5: 	jbe	.Ltmp2912 # Offset: 10469
    000028eb: 	movq	-0x3fd8(%rbp), %rdi
    000028f2: 	xorl	%eax, %eax
    000028f4: 	nopl	(%rax) # Size: 4
.Ltmp2913:
    000028f8: 	movdqu	(%r13,%rax), %xmm2
    000028ff: 	movups	%xmm2, (%r14,%rax)
    00002904: 	addq	$0x10, %rax
    00002908: 	cmpq	%rax, %rbx
    0000290b: 	jne	.Ltmp2913 # Offset: 10507
    0000290d: 	movq	%rdi, -0x3fd8(%rbp)
    00002914: 	movq	-0x4060(%rbp), %rax
    0000291b: 	movq	-0x4070(%rbp), %rdi
    00002922: 	cmpq	%rdi, %rax
    00002925: 	je	.Ltmp2910 # Offset: 10533
    00002927: 	movq	%rax, %rcx
    0000292a: 	movq	-0x4050(%rbp), %rdx
    00002931: 	movq	-0x4058(%rbp), %rax
.Ltmp3032:
    00002938: 	movq	-0x4068(%rbp), %rsi
    0000293f: 	subq	%rcx, %rsi
    00002942: 	leaq	0x1(%rsi), %rdi
    00002946: 	cmpq	$0x2, %rsi
    0000294a: 	jbe	.Ltmp2914 # Offset: 10570
    0000294c: 	movq	(%r13,%rcx,2), %rsi
    00002951: 	movq	%rsi, (%r14,%rcx,2)
    00002955: 	movq	%rdi, %rcx
    00002958: 	andq	$-0x4, %rcx
    0000295c: 	leaq	(%rcx,%rcx), %rsi
    00002960: 	addq	%rsi, %rax
    00002963: 	addq	%rsi, %rdx
    00002966: 	cmpq	%rdi, %rcx
    00002969: 	je	.Ltmp2910 # Offset: 10601
.Ltmp2914:
    0000296b: 	movzwl	(%rax), %ecx
    0000296e: 	movq	-0x3fe8(%rbp), %rdi
    00002975: 	movw	%cx, (%rdx)
    00002978: 	leaq	0x2(%rax), %rcx
    0000297c: 	cmpq	%rcx, %rdi
    0000297f: 	je	.Ltmp2910 # Offset: 10623
    00002981: 	movzwl	0x2(%rax), %ecx
    00002985: 	movw	%cx, 0x2(%rdx)
    00002989: 	leaq	0x4(%rax), %rcx
    0000298d: 	cmpq	%rcx, %rdi
    00002990: 	je	.Ltmp2910 # Offset: 10640
    00002992: 	movzwl	0x4(%rax), %eax
    00002996: 	movw	%ax, 0x4(%rdx)
.Ltmp2910:
    0000299a: 	cmpq	$0x2, -0x4030(%rbp)
    000029a2: 	jle	.Ltmp2915 # Offset: 10658
    000029a8: 	movzwl	(%r14), %esi
    000029ac: 	movq	-0x3ff0(%rbp), %r8
    000029b3: 	movq	%r14, %rdx
    000029b6: 	movq	-0x3fd8(%rbp), %r11
    000029bd: 	nopl	(%rax) # Size: 3
.Ltmp2920:
    000029c0: 	movzwl	-0x2(%r8), %edi
    000029c5: 	leaq	-0x2(%r8), %r9
    000029c9: 	cmpw	%di, %si
    000029cc: 	jl	.Ltmp2916 # Offset: 10700
    000029ce: 	cmpq	%rdx, %r9
    000029d1: 	jbe	.Ltmp2917 # Offset: 10705
    000029d7: 	movzwl	(%rdx), %ecx
    000029da: 	cmpw	%cx, %si
    000029dd: 	jle	.Ltmp2918 # Offset: 10717
    000029df: 	leaq	0x2(%rdx), %rax
    000029e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2919:
    000029e8: 	movq	%rax, %rdx
    000029eb: 	movzwl	(%rax), %ecx
    000029ee: 	leaq	0x2(%rax), %rax
    000029f2: 	cmpw	%cx, %si
    000029f5: 	jg	.Ltmp2919 # Offset: 10741
    000029f7: 	cmpq	%rdx, %r9
    000029fa: 	jbe	.Ltmp2917 # Offset: 10746
.Ltmp2918:
    00002a00: 	movw	%cx, (%r9)
    00002a04: 	movw	%di, (%rdx)
.Ltmp2916:
    00002a07: 	movq	%r9, %r8
    00002a0a: 	jmp	.Ltmp2920 # Offset: 10762
.Ltmp3014:
    00002a0c: 	movq	%r8, %rsi
    00002a0f: 	movq	%r10, %rdi
    00002a12: 	movq	%r11, -0x3fd8(%rbp)
    00002a19: 	movq	%r8, -0x4088(%rbp)
    00002a20: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEEEvT_S8_ # Offset: 10784
    00002a25: 	movq	-0x3ff0(%rbp), %rsi
    00002a2c: 	movq	-0x4088(%rbp), %rdi
    00002a33: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEEEvT_S8_ # Offset: 10803
.Ltmp2915:
    00002a38: 	movq	-0x4040(%rbp), %rax
    00002a3f: 	movq	-0x3ff0(%rbp), %rcx
    00002a46: 	movq	-0x3fd8(%rbp), %rsi
    00002a4d: 	jmp	.Ltmp2921 # Offset: 10829
    00002a4f: 	nop # Size: 1
.Ltmp2923:
    00002a50: 	addq	$0x2, %rax
    00002a54: 	movzwl	-0x4(%rax), %edi
    00002a58: 	cmpw	%di, (%rdx)
    00002a5b: 	jl	.Ltmp2922 # Offset: 10843
.Ltmp2921:
    00002a61: 	movq	%rax, %rdx
    00002a64: 	cmpq	%rcx, %rax
    00002a67: 	jne	.Ltmp2923 # Offset: 10855
    00002a69: 	movq	%rsi, -0x3fd8(%rbp)
.Ltmp3005:
    00002a70: 	addl	$0x1, -0x4020(%rbp)
    00002a77: 	movl	-0x4020(%rbp), %eax
    00002a7d: 	cmpl	-0x4028(%rbp), %eax
    00002a83: 	jl	.Ltmp2924 # Offset: 10883
.Ltmp2909:
    00002a89: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00002a90: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00002a97: 	subq	$0x20, %rax
    00002a9b: 	cmpq	%rax, %rbx
    00002a9e: 	je	.Ltmp2925 # Offset: 10910
    00002aa4: 	leaq	0x10(%rbx), %rdi
    00002aa8: 	movq	-0x3ed8(%rbp), %rcx
    00002aaf: 	movq	%rdi, (%rbx)
    00002ab2: 	movq	-0x3ee0(%rbp), %rax
    00002ab9: 	movq	%rcx, -0x4020(%rbp)
    00002ac0: 	movq	%rax, -0x4028(%rbp)
    00002ac7: 	movq	%rax, %rsi
    00002aca: 	addq	%rcx, %rax
    00002acd: 	je	.Ltmp2926 # Offset: 10957
    00002acf: 	testq	%rsi, %rsi
    00002ad2: 	je	.Ltmp2927 # Offset: 10962
.Ltmp2926:
    00002ad8: 	movq	-0x4020(%rbp), %rax
    00002adf: 	movq	%rax, -0x3fc8(%rbp)
    00002ae6: 	cmpq	$0xf, %rax
    00002aea: 	ja	.Ltmp2928 # Offset: 10986
    00002af0: 	cmpq	$0x1, -0x4020(%rbp)
    00002af8: 	jne	.Ltmp2929 # Offset: 11000
    00002afe: 	movq	-0x4028(%rbp), %rax
    00002b05: 	movzbl	(%rax), %eax
    00002b08: 	movb	%al, 0x10(%rbx)
.Ltmp3049:
    00002b0b: 	movq	-0x4020(%rbp), %rax
    00002b12: 	movq	%rax, 0x8(%rbx)
    00002b16: 	movb	$0x0, (%rdi,%rax)
    00002b1a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002b21: 	addq	$0x20, %rax
    00002b25: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp3048:
    00002b2c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00002b33: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002b3a: 	je	.Ltmp2930 # Offset: 11066
.Ltmp3047:
    00002b40: 	movq	-0x20(%rax), %rbx
    00002b44: 	callq	clock@PLT # Offset: 11076
    00002b49: 	pxor	%xmm0, %xmm0
    00002b4d: 	movq	%rax, end_time(%rip)
    00002b54: 	movq	%rbx, %rdi
    00002b57: 	subq	start_time(%rip), %rax
    00002b5e: 	cvtsi2sd	%rax, %xmm0
    00002b63: 	divsd	DATAat0x24890(%rip), %xmm0
    00002b6b: 	callq	_Z13record_resultdPKc # Offset: 11115
    00002b70: 	movq	-0x3ee0(%rbp), %rdi
    00002b77: 	cmpq	-0x4018(%rbp), %rdi
    00002b7e: 	je	.Ltmp2931 # Offset: 11134
    00002b80: 	movq	-0x3ed0(%rbp), %rax
    00002b87: 	leaq	0x1(%rax), %rsi
    00002b8b: 	callq	_ZdlPvm@PLT # Offset: 11147
.Ltmp2931:
    00002b90: 	movq	-0x4010(%rbp), %rdi
    00002b97: 	leaq	DATAat0x246c7(%rip), %rdx
    00002b9e: 	movq	%r15, %rsi
    00002ba1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11169
    00002ba6: 	callq	clock@PLT # Offset: 11174
    00002bab: 	leaq	-0xfde(%rbp), %rbx
    00002bb2: 	movl	$0x0, -0x4028(%rbp)
    00002bbc: 	movq	%rax, start_time(%rip)
    00002bc3: 	movl	iterations(%rip), %eax
    00002bc9: 	movq	%rbx, -0x4020(%rbp)
    00002bd0: 	leaq	-0x40(%rbp), %rbx
    00002bd4: 	movl	%eax, -0x4030(%rbp)
    00002bda: 	movq	%rbx, -0x4038(%rbp)
    00002be1: 	testl	%eax, %eax
    00002be3: 	jle	.Ltmp2932 # Offset: 11235
.Ltmp2937:
    00002be9: 	movq	-0x3fd8(%rbp), %rdi
    00002bf0: 	movl	$0x1f4, %ecx
    00002bf5: 	movl	$0x3e7, %ebx
    00002bfa: 	movq	-0x3fe0(%rbp), %rsi
    00002c01: 	rep		movsq	(%rsi), %es:(%rdi)
    00002c04: 	nopl	(%rax) # Size: 4
.Ltmp2933:
    00002c08: 	movq	-0x3fd8(%rbp), %rsi
    00002c0f: 	movq	%rbx, %rdx
    00002c12: 	movl	$0x7d0, %edi
    00002c17: 	movswl	(%rsi,%rbx,2), %ecx
    00002c1b: 	callq	_ZN9benchmark9__sift_inIPssEEvlT_lT0_ # Offset: 11291
    00002c20: 	subq	$0x1, %rbx
    00002c24: 	jae	.Ltmp2933 # Offset: 11300
    00002c26: 	movl	$0x7cf, %ebx
    00002c2b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2934:
    00002c30: 	movq	-0x3fd8(%rbp), %rsi
    00002c37: 	movzwl	-0xfe0(%rbp), %eax
    00002c3e: 	xorl	%edx, %edx
    00002c40: 	movq	%rbx, %rdi
    00002c43: 	movswl	(%rsi,%rbx,2), %ecx
    00002c47: 	movw	%ax, (%rsi,%rbx,2)
    00002c4b: 	callq	_ZN9benchmark9__sift_inIPssEEvlT_lT0_ # Offset: 11339
    00002c50: 	subq	$0x1, %rbx
    00002c54: 	jne	.Ltmp2934 # Offset: 11348
    00002c56: 	movq	-0x3fd8(%rbp), %rbx
    00002c5d: 	movzwl	-0xfe0(%rbp), %edx
    00002c64: 	movq	-0x4020(%rbp), %rax
    00002c6b: 	movq	-0x4038(%rbp), %rsi
    00002c72: 	movq	%rbx, %rdi
    00002c75: 	nopl	(%rax) # Size: 3
.Ltmp2936:
    00002c78: 	addq	$0x2, %rax
    00002c7c: 	movl	%edx, %ecx
    00002c7e: 	movzwl	-0x2(%rax), %edx
    00002c82: 	cmpw	%cx, %dx
    00002c85: 	jl	.Ltmp2935 # Offset: 11397
    00002c8b: 	cmpq	%rsi, %rax
    00002c8e: 	jne	.Ltmp2936 # Offset: 11406
    00002c90: 	movq	%rdi, -0x3fd8(%rbp)
.Ltmp3001:
    00002c97: 	addl	$0x1, -0x4028(%rbp)
    00002c9e: 	movl	-0x4028(%rbp), %eax
    00002ca4: 	cmpl	-0x4030(%rbp), %eax
    00002caa: 	jl	.Ltmp2937 # Offset: 11434
.Ltmp2932:
    00002cb0: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00002cb7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00002cbe: 	subq	$0x20, %rax
    00002cc2: 	cmpq	%rax, %rbx
    00002cc5: 	je	.Ltmp2938 # Offset: 11461
    00002ccb: 	leaq	0x10(%rbx), %rdi
    00002ccf: 	movq	-0x3ed8(%rbp), %rcx
    00002cd6: 	movq	%rdi, (%rbx)
    00002cd9: 	movq	-0x3ee0(%rbp), %rax
    00002ce0: 	movq	%rcx, -0x3fe0(%rbp)
    00002ce7: 	movq	%rax, -0x4020(%rbp)
    00002cee: 	movq	%rax, %rsi
    00002cf1: 	addq	%rcx, %rax
    00002cf4: 	je	.Ltmp2939 # Offset: 11508
    00002cf6: 	testq	%rsi, %rsi
    00002cf9: 	je	.Ltmp2940 # Offset: 11513
.Ltmp2939:
    00002cff: 	movq	-0x3fe0(%rbp), %rax
    00002d06: 	movq	%rax, -0x3fc8(%rbp)
    00002d0d: 	cmpq	$0xf, %rax
    00002d11: 	ja	.Ltmp2941 # Offset: 11537
    00002d17: 	cmpq	$0x1, -0x3fe0(%rbp)
    00002d1f: 	jne	.Ltmp2942 # Offset: 11551
    00002d25: 	movq	-0x4020(%rbp), %rax
    00002d2c: 	movzbl	(%rax), %eax
    00002d2f: 	movb	%al, 0x10(%rbx)
.Ltmp3045:
    00002d32: 	movq	-0x3fe0(%rbp), %rax
    00002d39: 	movq	%rax, 0x8(%rbx)
    00002d3d: 	movb	$0x0, (%rdi,%rax)
    00002d41: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002d48: 	addq	$0x20, %rax
    00002d4c: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp3054:
    00002d53: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00002d5a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002d61: 	je	.Ltmp2943 # Offset: 11617
.Ltmp3044:
    00002d67: 	movq	-0x20(%rax), %rbx
    00002d6b: 	callq	clock@PLT # Offset: 11627
    00002d70: 	pxor	%xmm0, %xmm0
    00002d74: 	movq	%rax, end_time(%rip)
    00002d7b: 	movq	%rbx, %rdi
    00002d7e: 	subq	start_time(%rip), %rax
    00002d85: 	cvtsi2sd	%rax, %xmm0
    00002d8a: 	divsd	DATAat0x24890(%rip), %xmm0
    00002d92: 	callq	_Z13record_resultdPKc # Offset: 11666
    00002d97: 	movq	-0x3ee0(%rbp), %rdi
    00002d9e: 	cmpq	-0x4018(%rbp), %rdi
    00002da5: 	je	.Ltmp2944 # Offset: 11685
    00002da7: 	movq	-0x3ed0(%rbp), %rax
    00002dae: 	leaq	0x1(%rax), %rsi
    00002db2: 	callq	_ZdlPvm@PLT # Offset: 11698
.Ltmp2944:
    00002db7: 	movq	-0x4010(%rbp), %rdi
    00002dbe: 	leaq	DATAat0x24840(%rip), %rdx
    00002dc5: 	movq	%r15, %rsi
    00002dc8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11720
    00002dcd: 	callq	clock@PLT # Offset: 11725
    00002dd2: 	leaq	-0x1f7e(%rbp), %rbx
    00002dd9: 	movl	$0x0, -0x3fe0(%rbp)
    00002de3: 	movq	%rax, start_time(%rip)
    00002dea: 	movl	iterations(%rip), %eax
    00002df0: 	movq	%rbx, -0x4020(%rbp)
    00002df7: 	movl	%eax, -0x4028(%rbp)
    00002dfd: 	testl	%eax, %eax
    00002dff: 	jle	.Ltmp2945 # Offset: 11775
.Ltmp2950:
    00002e05: 	movq	-0x4000(%rbp), %rsi
    00002e0c: 	movl	$0x1f4, %ecx
    00002e11: 	movq	%r12, %rdi
    00002e14: 	movl	$0x3e7, %ebx
    00002e19: 	rep		movsq	(%rsi), %es:(%rdi)
    00002e1c: 	nopl	(%rax) # Size: 4
.Ltmp2946:
    00002e20: 	movswl	(%r12,%rbx,2), %ecx
    00002e25: 	movq	%rbx, %rdx
    00002e28: 	movq	%r12, %rsi
    00002e2b: 	movl	$0x7d0, %edi
    00002e30: 	callq	_ZN9benchmark9__sift_inIPssEEvlT_lT0_ # Offset: 11824
    00002e35: 	subq	$0x1, %rbx
    00002e39: 	jae	.Ltmp2946 # Offset: 11833
    00002e3b: 	movl	$0x7cf, %ebx
.Ltmp2947:
    00002e40: 	movzwl	-0x1f80(%rbp), %eax
    00002e47: 	xorl	%edx, %edx
    00002e49: 	movq	%rbx, %rdi
    00002e4c: 	movq	%r12, %rsi
    00002e4f: 	movswl	(%r12,%rbx,2), %ecx
    00002e54: 	movw	%ax, (%r12,%rbx,2)
    00002e59: 	callq	_ZN9benchmark9__sift_inIPssEEvlT_lT0_ # Offset: 11865
    00002e5e: 	subq	$0x1, %rbx
    00002e62: 	jne	.Ltmp2947 # Offset: 11874
    00002e64: 	movq	-0x3fd8(%rbp), %rbx
    00002e6b: 	movzwl	-0x1f80(%rbp), %edx
    00002e72: 	movq	-0x4020(%rbp), %rax
    00002e79: 	movq	%rbx, %rdi
    00002e7c: 	nopl	(%rax) # Size: 4
.Ltmp2949:
    00002e80: 	addq	$0x2, %rax
    00002e84: 	movl	%edx, %ecx
    00002e86: 	movzwl	-0x2(%rax), %edx
    00002e8a: 	cmpw	%cx, %dx
    00002e8d: 	jl	.Ltmp2948 # Offset: 11917
    00002e93: 	cmpq	%rdi, %rax
    00002e96: 	jne	.Ltmp2949 # Offset: 11926
    00002e98: 	movq	%rdi, -0x3fd8(%rbp)
.Ltmp3000:
    00002e9f: 	addl	$0x1, -0x3fe0(%rbp)
    00002ea6: 	movl	-0x3fe0(%rbp), %eax
    00002eac: 	cmpl	-0x4028(%rbp), %eax
    00002eb2: 	jl	.Ltmp2950 # Offset: 11954
.Ltmp2945:
    00002eb8: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00002ebf: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00002ec6: 	subq	$0x20, %rax
    00002eca: 	cmpq	%rax, %rbx
    00002ecd: 	je	.Ltmp2951 # Offset: 11981
    00002ed3: 	leaq	0x10(%rbx), %rdi
    00002ed7: 	movq	-0x3ed8(%rbp), %r12
    00002ede: 	movq	%rdi, (%rbx)
    00002ee1: 	movq	-0x3ee0(%rbp), %rax
    00002ee8: 	movq	%rax, -0x3fd8(%rbp)
    00002eef: 	movq	%rax, %rsi
    00002ef2: 	addq	%r12, %rax
    00002ef5: 	je	.Ltmp2952 # Offset: 12021
    00002ef7: 	testq	%rsi, %rsi
    00002efa: 	je	.Ltmp2953 # Offset: 12026
.Ltmp2952:
    00002f00: 	movq	%r12, -0x3fc8(%rbp)
    00002f07: 	cmpq	$0xf, %r12
    00002f0b: 	ja	.Ltmp2954 # Offset: 12043
    00002f11: 	cmpq	$0x1, %r12
    00002f15: 	jne	.Ltmp2955 # Offset: 12053
    00002f1b: 	movq	-0x3fd8(%rbp), %rax
    00002f22: 	movzbl	(%rax), %eax
    00002f25: 	movb	%al, 0x10(%rbx)
.Ltmp3064:
    00002f28: 	movq	%r12, 0x8(%rbx)
    00002f2c: 	movb	$0x0, (%rdi,%r12)
    00002f31: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002f38: 	addq	$0x20, %rax
    00002f3c: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp3067:
    00002f43: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00002f4a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002f51: 	je	.Ltmp2956 # Offset: 12113
.Ltmp3063:
    00002f57: 	movq	-0x20(%rax), %rbx
    00002f5b: 	callq	clock@PLT # Offset: 12123
    00002f60: 	pxor	%xmm0, %xmm0
    00002f64: 	movq	%rax, end_time(%rip)
    00002f6b: 	movq	%rbx, %rdi
    00002f6e: 	subq	start_time(%rip), %rax
    00002f75: 	cvtsi2sd	%rax, %xmm0
    00002f7a: 	divsd	DATAat0x24890(%rip), %xmm0
    00002f82: 	callq	_Z13record_resultdPKc # Offset: 12162
    00002f87: 	movq	-0x3ee0(%rbp), %rdi
    00002f8e: 	cmpq	-0x4018(%rbp), %rdi
    00002f95: 	je	.Ltmp2957 # Offset: 12181
    00002f97: 	movq	-0x3ed0(%rbp), %rax
    00002f9e: 	leaq	0x1(%rax), %rsi
    00002fa2: 	callq	_ZdlPvm@PLT # Offset: 12194
.Ltmp2957:
    00002fa7: 	movq	-0x4010(%rbp), %rdi
    00002fae: 	leaq	DATAat0x24860(%rip), %rdx
    00002fb5: 	movq	%r15, %rsi
    00002fb8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12216
    00002fbd: 	callq	clock@PLT # Offset: 12221
    00002fc2: 	movq	%rax, start_time(%rip)
    00002fc9: 	movl	iterations(%rip), %eax
    00002fcf: 	movl	%eax, -0x4000(%rbp)
    00002fd5: 	testl	%eax, %eax
    00002fd7: 	jle	.Ltmp2958 # Offset: 12247
    00002fdd: 	movq	-0x3ff0(%rbp), %rax
    00002fe4: 	leaq	0x2(%r13), %rdx
    00002fe8: 	movl	$0x0, -0x3fe0(%rbp)
    00002ff2: 	subq	%r14, %rax
    00002ff5: 	movq	%rax, %rbx
    00002ff8: 	shrq	$0x3f, %rax
    00002ffc: 	sarq	%rbx
    00002fff: 	addq	%rbx, %rax
    00003002: 	sarq	%rax
    00003005: 	subq	$0x1, %rax
    00003009: 	movq	%rax, -0x4020(%rbp)
    00003010: 	leaq	-0x1(%rbx), %rax
    00003014: 	movq	%rax, -0x4028(%rbp)
    0000301b: 	leaq	0x2(%r14), %rax
    0000301f: 	movq	%rax, -0x4038(%rbp)
    00003026: 	movq	-0x3fe8(%rbp), %rax
    0000302d: 	subq	$0x2, %rax
    00003031: 	movq	%rax, %rdi
    00003034: 	movq	%r14, %rax
    00003037: 	subq	%rdx, %rax
    0000303a: 	subq	%r13, %rdi
    0000303d: 	cmpq	$0xc, %rax
    00003041: 	movq	%rdi, -0x4060(%rbp)
    00003048: 	seta	%dl
    0000304b: 	cmpq	$0x4, %rdi
    0000304f: 	seta	%al
    00003052: 	shrq	%rdi
    00003055: 	movq	%rdi, -0x4058(%rbp)
    0000305c: 	addq	$0x1, %rdi
    00003060: 	andl	%eax, %edx
    00003062: 	movq	%rdi, %rax
    00003065: 	movq	%rdi, -0x4068(%rbp)
    0000306c: 	andq	$-0x8, %rdi
    00003070: 	shrq	$0x3, %rax
    00003074: 	movq	%rdi, -0x4040(%rbp)
    0000307b: 	shlq	$0x4, %rax
    0000307f: 	movb	%dl, -0x4030(%rbp)
    00003085: 	movq	%rax, -0x3fd8(%rbp)
    0000308c: 	leaq	(%rdi,%rdi), %rax
    00003090: 	leaq	(%r13,%rax), %rdi
    00003095: 	addq	%r14, %rax
    00003098: 	movq	%rdi, -0x4050(%rbp)
    0000309f: 	movq	%rax, -0x4070(%rbp)
.Ltmp2971:
    000030a6: 	cmpq	%r13, -0x3fe8(%rbp)
    000030ad: 	je	.Ltmp2959 # Offset: 12461
    000030b3: 	cmpb	$0x0, -0x4030(%rbp)
    000030ba: 	je	.Ltmp2960 # Offset: 12474
    000030c0: 	cmpq	$0xc, -0x4060(%rbp)
    000030c8: 	jbe	.Ltmp2961 # Offset: 12488
    000030ce: 	movq	-0x3fd8(%rbp), %rdi
    000030d5: 	xorl	%eax, %eax
    000030d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2962:
    000030e0: 	movdqu	(%r13,%rax), %xmm3
    000030e7: 	movups	%xmm3, (%r14,%rax)
    000030ec: 	addq	$0x10, %rax
    000030f0: 	cmpq	%rax, %rdi
    000030f3: 	jne	.Ltmp2962 # Offset: 12531
    000030f5: 	movq	%rdi, -0x3fd8(%rbp)
    000030fc: 	movq	-0x4040(%rbp), %rax
    00003103: 	movq	-0x4068(%rbp), %rdi
    0000310a: 	cmpq	%rdi, %rax
    0000310d: 	je	.Ltmp2959 # Offset: 12557
    0000310f: 	movq	%rax, %rcx
    00003112: 	movq	-0x4070(%rbp), %rdx
    00003119: 	movq	-0x4050(%rbp), %rax
.Ltmp3034:
    00003120: 	movq	-0x4058(%rbp), %rsi
    00003127: 	subq	%rcx, %rsi
    0000312a: 	leaq	0x1(%rsi), %rdi
    0000312e: 	cmpq	$0x2, %rsi
    00003132: 	jbe	.Ltmp2963 # Offset: 12594
    00003134: 	movq	(%r13,%rcx,2), %rsi
    00003139: 	movq	%rsi, (%r14,%rcx,2)
    0000313d: 	movq	%rdi, %rcx
    00003140: 	andq	$-0x4, %rcx
    00003144: 	leaq	(%rcx,%rcx), %rsi
    00003148: 	addq	%rsi, %rax
    0000314b: 	addq	%rsi, %rdx
    0000314e: 	cmpq	%rcx, %rdi
    00003151: 	je	.Ltmp2959 # Offset: 12625
.Ltmp2963:
    00003153: 	movzwl	(%rax), %ecx
    00003156: 	movq	-0x3fe8(%rbp), %rdi
    0000315d: 	movw	%cx, (%rdx)
    00003160: 	leaq	0x2(%rax), %rcx
    00003164: 	cmpq	%rcx, %rdi
    00003167: 	je	.Ltmp2959 # Offset: 12647
    00003169: 	movzwl	0x2(%rax), %ecx
    0000316d: 	movw	%cx, 0x2(%rdx)
    00003171: 	leaq	0x4(%rax), %rcx
    00003175: 	cmpq	%rcx, %rdi
    00003178: 	je	.Ltmp2959 # Offset: 12664
    0000317a: 	movzwl	0x4(%rax), %eax
    0000317e: 	movw	%ax, 0x4(%rdx)
.Ltmp2959:
    00003182: 	movq	-0x4020(%rbp), %rax
    00003189: 	movq	%rax, %r12
    0000318c: 	testq	%rax, %rax
    0000318f: 	js	.Ltmp2964 # Offset: 12687
    00003191: 	nopl	(%rax) # Size: 7
.Ltmp2965:
    00003198: 	movswl	(%r14,%r12,2), %ecx
    0000319d: 	movq	%r12, %rdx
    000031a0: 	movq	%r14, %rsi
    000031a3: 	movq	%rbx, %rdi
    000031a6: 	callq	_ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsEEvlT_lT0_ # Offset: 12710
    000031ab: 	subq	$0x1, %r12
    000031af: 	jae	.Ltmp2965 # Offset: 12719
.Ltmp2964:
    000031b1: 	movq	-0x4028(%rbp), %rax
    000031b8: 	movq	-0x3fd8(%rbp), %rdi
    000031bf: 	movq	%rax, %r12
    000031c2: 	testq	%rax, %rax
    000031c5: 	jle	.Ltmp2966 # Offset: 12741
    000031c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2967:
    000031d0: 	movzwl	(%r14), %eax
    000031d4: 	movswl	(%r14,%r12,2), %ecx
    000031d9: 	xorl	%edx, %edx
    000031db: 	movq	%r12, %rdi
    000031de: 	movq	%r14, %rsi
    000031e1: 	movw	%ax, (%r14,%r12,2)
    000031e6: 	callq	_ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEsEEvlT_lT0_ # Offset: 12774
    000031eb: 	subq	$0x1, %r12
    000031ef: 	jne	.Ltmp2967 # Offset: 12783
    000031f1: 	movq	-0x3fd8(%rbp), %rdi
.Ltmp2966:
    000031f8: 	movq	-0x4038(%rbp), %rax
    000031ff: 	movq	-0x3ff0(%rbp), %rcx
    00003206: 	movq	%rdi, %rsi
    00003209: 	jmp	.Ltmp2968 # Offset: 12809
    0000320b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2970:
    00003210: 	addq	$0x2, %rax
    00003214: 	movzwl	-0x4(%rax), %edi
    00003218: 	cmpw	%di, (%rdx)
    0000321b: 	jl	.Ltmp2969 # Offset: 12827
.Ltmp2968:
    00003221: 	movq	%rax, %rdx
    00003224: 	cmpq	%rax, %rcx
    00003227: 	jne	.Ltmp2970 # Offset: 12839
    00003229: 	movq	%rsi, -0x3fd8(%rbp)
.Ltmp3002:
    00003230: 	addl	$0x1, -0x3fe0(%rbp)
    00003237: 	movl	-0x3fe0(%rbp), %eax
    0000323d: 	cmpl	-0x4000(%rbp), %eax
    00003243: 	jl	.Ltmp2971 # Offset: 12867
.Ltmp2958:
    00003249: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00003250: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00003257: 	subq	$0x20, %rax
    0000325b: 	cmpq	%rax, %rbx
    0000325e: 	je	.Ltmp2972 # Offset: 12894
    00003264: 	leaq	0x10(%rbx), %rdi
    00003268: 	movq	-0x3ed8(%rbp), %r12
    0000326f: 	movq	%rdi, (%rbx)
    00003272: 	movq	-0x3ee0(%rbp), %rax
    00003279: 	movq	%rax, -0x3fd8(%rbp)
    00003280: 	movq	%rax, %rsi
    00003283: 	addq	%r12, %rax
    00003286: 	je	.Ltmp2973 # Offset: 12934
    00003288: 	testq	%rsi, %rsi
    0000328b: 	je	.Ltmp2974 # Offset: 12939
.Ltmp2973:
    00003291: 	movq	%r12, -0x3fc8(%rbp)
    00003298: 	cmpq	$0xf, %r12
    0000329c: 	ja	.Ltmp2975 # Offset: 12956
    000032a2: 	cmpq	$0x1, %r12
    000032a6: 	jne	.Ltmp2976 # Offset: 12966
    000032ac: 	movq	-0x3fd8(%rbp), %rax
    000032b3: 	movzbl	(%rax), %eax
    000032b6: 	movb	%al, 0x10(%rbx)
.Ltmp3057:
    000032b9: 	movq	%r12, 0x8(%rbx)
    000032bd: 	movb	$0x0, (%rdi,%r12)
    000032c2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000032c9: 	addq	$0x20, %rax
    000032cd: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp3059:
    000032d4: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000032db: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000032e2: 	je	.Ltmp2977 # Offset: 13026
.Ltmp3056:
    000032e8: 	movq	-0x20(%rax), %rbx
    000032ec: 	callq	clock@PLT # Offset: 13036
    000032f1: 	pxor	%xmm0, %xmm0
    000032f5: 	movq	%rax, end_time(%rip)
    000032fc: 	movq	%rbx, %rdi
    000032ff: 	subq	start_time(%rip), %rax
    00003306: 	cvtsi2sd	%rax, %xmm0
    0000330b: 	divsd	DATAat0x24890(%rip), %xmm0
    00003313: 	callq	_Z13record_resultdPKc # Offset: 13075
    00003318: 	movq	-0x3ee0(%rbp), %rdi
    0000331f: 	cmpq	-0x4018(%rbp), %rdi
    00003326: 	je	.Ltmp2978 # Offset: 13094
    00003328: 	movq	-0x3ed0(%rbp), %rax
    0000332f: 	leaq	0x1(%rax), %rsi
    00003333: 	callq	_ZdlPvm@PLT # Offset: 13107
.Ltmp2978:
    00003338: 	movq	-0x4010(%rbp), %rdi
    0000333f: 	leaq	DATAat0x246da(%rip), %rdx
    00003346: 	movq	%r15, %rsi
    00003349: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13129
    0000334e: 	movl	iterations(%rip), %edx
    00003354: 	xorl	%r8d, %r8d
    00003357: 	xorl	%ecx, %ecx
    00003359: 	movl	$0x7d0, %esi
    0000335e: 	movq	-0x3ee0(%rbp), %rdi
    00003365: 	callq	_Z9summarizePKciiii # Offset: 13157
    0000336a: 	movl	-0x4044(%rbp), %eax
    00003370: 	movq	-0x3ee0(%rbp), %rdi
    00003377: 	movl	%eax, iterations(%rip)
    0000337d: 	cmpq	-0x4018(%rbp), %rdi
    00003384: 	je	.Ltmp2979 # Offset: 13188
    00003386: 	movq	-0x3ed0(%rbp), %rax
    0000338d: 	leaq	0x1(%rax), %rsi
    00003391: 	callq	_ZdlPvm@PLT # Offset: 13201
.Ltmp2979:
    00003396: 	testq	%r14, %r14
    00003399: 	je	.Ltmp2980 # Offset: 13209
    0000339b: 	movq	-0x3f90(%rbp), %rsi
    000033a2: 	movq	%r14, %rdi
    000033a5: 	subq	%r14, %rsi
    000033a8: 	callq	_ZdlPvm@PLT # Offset: 13224
.Ltmp2980:
    000033ad: 	movq	-0x3f00(%rbp), %rdi
    000033b4: 	leaq	-0x3ef0(%rbp), %rax
    000033bb: 	cmpq	%rax, %rdi
    000033be: 	je	.Ltmp2981 # Offset: 13246
    000033c0: 	movq	-0x3ef0(%rbp), %rax
    000033c7: 	leaq	0x1(%rax), %rsi
    000033cb: 	callq	_ZdlPvm@PLT # Offset: 13259
.Ltmp2981:
    000033d0: 	movq	-0x3f20(%rbp), %rdi
    000033d7: 	leaq	-0x3f10(%rbp), %rax
    000033de: 	cmpq	%rax, %rdi
    000033e1: 	je	.Ltmp2982 # Offset: 13281
    000033e3: 	movq	-0x3f10(%rbp), %rax
    000033ea: 	leaq	0x1(%rax), %rsi
    000033ee: 	callq	_ZdlPvm@PLT # Offset: 13294
.Ltmp2982:
    000033f3: 	movq	-0x3f40(%rbp), %rdi
    000033fa: 	leaq	-0x3f30(%rbp), %rax
    00003401: 	cmpq	%rax, %rdi
    00003404: 	je	.Ltmp2983 # Offset: 13316
    00003406: 	movq	-0x3f30(%rbp), %rax
    0000340d: 	leaq	0x1(%rax), %rsi
    00003411: 	callq	_ZdlPvm@PLT # Offset: 13329
.Ltmp2983:
    00003416: 	movq	-0x3f60(%rbp), %rdi
    0000341d: 	leaq	-0x3f50(%rbp), %rax
    00003424: 	cmpq	%rax, %rdi
    00003427: 	je	.Ltmp2984 # Offset: 13351
    00003429: 	movq	-0x3f50(%rbp), %rax
    00003430: 	leaq	0x1(%rax), %rsi
    00003434: 	callq	_ZdlPvm@PLT # Offset: 13364
.Ltmp2984:
    00003439: 	movq	-0x3f80(%rbp), %rdi
    00003440: 	cmpq	-0x4080(%rbp), %rdi
    00003447: 	je	.Ltmp2985 # Offset: 13383
    00003449: 	movq	-0x3f70(%rbp), %rax
    00003450: 	leaq	0x1(%rax), %rsi
    00003454: 	callq	_ZdlPvm@PLT # Offset: 13396
.Ltmp2985:
    00003459: 	testq	%r13, %r13
    0000345c: 	je	.Ltmp2986 # Offset: 13404
    0000345e: 	movq	-0x3fb0(%rbp), %rsi
    00003465: 	movq	%r13, %rdi
    00003468: 	subq	%r13, %rsi
    0000346b: 	callq	_ZdlPvm@PLT # Offset: 13419
.Ltmp2986:
    00003470: 	movq	-0x38(%rbp), %rax
    00003474: 	subq	%fs:0x28, %rax
    0000347d: 	jne	.Ltmp2987 # Offset: 13437
    00003483: 	leaq	-0x28(%rbp), %rsp
    00003487: 	popq	%rbx
    00003488: 	popq	%r12
    0000348a: 	popq	%r13
    0000348c: 	popq	%r14
    0000348e: 	popq	%r15
    00003490: 	popq	%rbp
    00003491: 	retq # Offset: 13457
.Ltmp2917:
    00003492: 	movq	%r8, %rax
    00003495: 	movq	%r11, -0x3fd8(%rbp)
    0000349c: 	subq	%r14, %rax
    0000349f: 	cmpq	$0x2, %rax
    000034a3: 	jle	.Ltmp2988 # Offset: 13475
    000034a9: 	movzwl	(%r14), %esi
    000034ad: 	movq	%r8, %rcx
    000034b0: 	movq	%r14, %rax
    000034b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2993:
    000034b8: 	leaq	-0x2(%rcx), %r9
    000034bc: 	cmpw	%di, %si
    000034bf: 	jl	.Ltmp2989 # Offset: 13503
    000034c1: 	cmpq	%rax, %r9
    000034c4: 	jbe	.Ltmp2990 # Offset: 13508
    000034ca: 	movzwl	(%rax), %edx
    000034cd: 	cmpw	%dx, %si
    000034d0: 	jle	.Ltmp2991 # Offset: 13520
    000034d2: 	movq	%r11, %r10
    000034d5: 	nopl	(%rax) # Size: 3
.Ltmp2992:
    000034d8: 	movzwl	0x2(%rax), %edx
    000034dc: 	addq	$0x2, %rax
    000034e0: 	cmpw	%dx, %si
    000034e3: 	jg	.Ltmp2992 # Offset: 13539
    000034e5: 	movq	%r10, %r11
    000034e8: 	cmpq	%rax, %r9
    000034eb: 	jbe	.Ltmp2990 # Offset: 13547
.Ltmp2991:
    000034f1: 	movw	%dx, (%r9)
    000034f5: 	movw	%di, (%rax)
.Ltmp2989:
    000034f8: 	movzwl	-0x2(%r9), %edi
    000034fd: 	movq	%r9, %rcx
    00003500: 	jmp	.Ltmp2993 # Offset: 13568
.Ltmp3025:
    00003502: 	movq	%r9, %rsi
    00003505: 	movq	%r10, %rdi
    00003508: 	movq	%r8, -0x4088(%rbp)
    0000350f: 	movq	%r11, -0x3fd8(%rbp)
    00003516: 	movq	%r9, -0x4090(%rbp)
    0000351d: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEEEvT_S8_ # Offset: 13597
    00003522: 	movq	-0x4088(%rbp), %rsi
    00003529: 	movq	-0x4090(%rbp), %rdi
    00003530: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEEEvT_S8_ # Offset: 13616
    00003535: 	movq	-0x4088(%rbp), %r8
.Ltmp2988:
    0000353c: 	movq	-0x3ff0(%rbp), %rcx
    00003543: 	movq	%rcx, %rax
    00003546: 	subq	%r8, %rax
    00003549: 	cmpq	$0x2, %rax
    0000354d: 	jle	.Ltmp2915 # Offset: 13645
    00003553: 	movzwl	(%r8), %esi
    00003557: 	movq	-0x3fd8(%rbp), %r11
    0000355e: 	movq	%r8, %rax
    00003561: 	nopl	(%rax) # Size: 7
.Ltmp2998:
    00003568: 	movzwl	-0x2(%rcx), %r9d
    0000356d: 	leaq	-0x2(%rcx), %rdi
    00003571: 	cmpw	%r9w, %si
    00003575: 	jl	.Ltmp2994 # Offset: 13685
    00003577: 	cmpq	%rax, %rdi
    0000357a: 	jbe	.Ltmp2995 # Offset: 13690
    00003580: 	movzwl	(%rax), %edx
    00003583: 	cmpw	%dx, %si
    00003586: 	jle	.Ltmp2996 # Offset: 13702
    00003588: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2997:
    00003590: 	movzwl	0x2(%rax), %edx
    00003594: 	addq	$0x2, %rax
    00003598: 	cmpw	%dx, %si
    0000359b: 	jg	.Ltmp2997 # Offset: 13723
    0000359d: 	cmpq	%rax, %rdi
    000035a0: 	jbe	.Ltmp2995 # Offset: 13728
.Ltmp2996:
    000035a6: 	movw	%dx, (%rdi)
    000035a9: 	movw	%r9w, (%rax)
.Ltmp2994:
    000035ad: 	movq	%rdi, %rcx
    000035b0: 	jmp	.Ltmp2998 # Offset: 13744
.Ltmp2851:
    000035b2: 	movq	%r14, %rdx
    000035b5: 	jmp	.Ltmp2880 # Offset: 13749
.Ltmp2857:
    000035ba: 	movq	-0x3ee0(%rbp), %rdx
    000035c1: 	movq	%rsi, -0x3fd8(%rbp)
    000035c8: 	movl	$0x1, %edi
    000035cd: 	xorl	%eax, %eax
    000035cf: 	leaq	DATAat0x246f4(%rip), %rsi
    000035d6: 	callq	__printf_chk@PLT # Offset: 13782
    000035db: 	movl	iterations(%rip), %r8d
    000035e2: 	jmp	.Ltmp2999 # Offset: 13794
.Ltmp2948:
    000035e7: 	movq	-0x3ee0(%rbp), %rdx
    000035ee: 	movq	%rdi, -0x3fd8(%rbp)
    000035f5: 	leaq	DATAat0x246f4(%rip), %rsi
    000035fc: 	movl	$0x1, %edi
    00003601: 	xorl	%eax, %eax
    00003603: 	callq	__printf_chk@PLT # Offset: 13827
    00003608: 	movl	iterations(%rip), %eax
    0000360e: 	movl	%eax, -0x4028(%rbp)
    00003614: 	jmp	.Ltmp3000 # Offset: 13844
.Ltmp2935:
    00003619: 	movq	-0x3ee0(%rbp), %rdx
    00003620: 	movq	%rdi, -0x3fd8(%rbp)
    00003627: 	leaq	DATAat0x246f4(%rip), %rsi
    0000362e: 	movl	$0x1, %edi
    00003633: 	xorl	%eax, %eax
    00003635: 	callq	__printf_chk@PLT # Offset: 13877
    0000363a: 	movl	iterations(%rip), %eax
    00003640: 	movl	%eax, -0x4030(%rbp)
    00003646: 	jmp	.Ltmp3001 # Offset: 13894
.Ltmp2969:
    0000364b: 	movq	-0x3ee0(%rbp), %rdx
    00003652: 	movq	%rsi, -0x3fd8(%rbp)
    00003659: 	movl	$0x1, %edi
    0000365e: 	xorl	%eax, %eax
    00003660: 	leaq	DATAat0x246f4(%rip), %rsi
    00003667: 	callq	__printf_chk@PLT # Offset: 13927
    0000366c: 	movl	iterations(%rip), %eax
    00003672: 	movl	%eax, -0x4000(%rbp)
    00003678: 	jmp	.Ltmp3002 # Offset: 13944
.Ltmp2899:
    0000367d: 	movq	-0x3ee0(%rbp), %rdx
    00003684: 	movq	%rdi, -0x3fd8(%rbp)
    0000368b: 	leaq	DATAat0x246f4(%rip), %rsi
    00003692: 	movl	$0x1, %edi
    00003697: 	xorl	%eax, %eax
    00003699: 	callq	__printf_chk@PLT # Offset: 13977
    0000369e: 	jmp	.Ltmp3003 # Offset: 13982
.Ltmp2881:
    000036a3: 	movq	-0x3ee0(%rbp), %rdx
    000036aa: 	movq	%rdi, -0x3fd8(%rbp)
    000036b1: 	leaq	DATAat0x246f4(%rip), %rsi
    000036b8: 	movl	$0x1, %edi
    000036bd: 	xorl	%eax, %eax
    000036bf: 	callq	__printf_chk@PLT # Offset: 14015
    000036c4: 	jmp	.Ltmp3004 # Offset: 14020
.Ltmp2922:
    000036c9: 	movq	-0x3ee0(%rbp), %rdx
    000036d0: 	movq	%rsi, -0x3fd8(%rbp)
    000036d7: 	movl	$0x1, %edi
    000036dc: 	xorl	%eax, %eax
    000036de: 	leaq	DATAat0x246f4(%rip), %rsi
    000036e5: 	callq	__printf_chk@PLT # Offset: 14053
    000036ea: 	movl	iterations(%rip), %eax
    000036f0: 	movl	%eax, -0x4028(%rbp)
    000036f6: 	jmp	.Ltmp3005 # Offset: 14070
.Ltmp2834:
    000036fb: 	movq	-0x3ee0(%rbp), %rdx
    00003702: 	movq	%rdi, -0x3fd8(%rbp)
    00003709: 	movq	%rbx, %rsi
    0000370c: 	xorl	%eax, %eax
    0000370e: 	movl	$0x1, %edi
    00003713: 	callq	__printf_chk@PLT # Offset: 14099
    00003718: 	movl	iterations(%rip), %r8d
    0000371f: 	jmp	.Ltmp3006 # Offset: 14111
.Ltmp2995:
    00003724: 	movq	%rcx, %rax
    00003727: 	movq	%r11, -0x3fd8(%rbp)
    0000372e: 	subq	%r8, %rax
    00003731: 	cmpq	$0x2, %rax
    00003735: 	jle	.Ltmp3007 # Offset: 14133
    0000373b: 	movzwl	(%r8), %edi
    0000373f: 	movq	%rcx, %r9
    00003742: 	movq	%r8, %rdx
.Ltmp3012:
    00003745: 	movzwl	-0x2(%r9), %r11d
    0000374a: 	leaq	-0x2(%r9), %r10
    0000374e: 	cmpw	%r11w, %di
    00003752: 	jl	.Ltmp3008 # Offset: 14162
    00003754: 	cmpq	%rdx, %r10
    00003757: 	jbe	.Ltmp3009 # Offset: 14167
    00003759: 	movzwl	(%rdx), %esi
    0000375c: 	cmpw	%di, %si
    0000375f: 	jge	.Ltmp3010 # Offset: 14175
    00003761: 	leaq	0x2(%rdx), %rax
    00003765: 	nopl	(%rax) # Size: 3
.Ltmp3011:
    00003768: 	movq	%rax, %rdx
    0000376b: 	movzwl	(%rax), %esi
    0000376e: 	leaq	0x2(%rax), %rax
    00003772: 	cmpw	%si, %di
    00003775: 	jg	.Ltmp3011 # Offset: 14197
    00003777: 	cmpq	%rdx, %r10
    0000377a: 	jbe	.Ltmp3009 # Offset: 14202
.Ltmp3010:
    0000377c: 	movw	%si, (%r10)
    00003780: 	movw	%r11w, (%rdx)
.Ltmp3008:
    00003784: 	movq	%r10, %r9
    00003787: 	jmp	.Ltmp3012 # Offset: 14215
.Ltmp3009:
    00003789: 	movq	%r9, %rsi
    0000378c: 	movq	%r8, %rdi
    0000378f: 	movq	%rcx, -0x4088(%rbp)
    00003796: 	movq	%r9, -0x4090(%rbp)
    0000379d: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEEEvT_S8_ # Offset: 14237
    000037a2: 	movq	-0x4088(%rbp), %rsi
    000037a9: 	movq	-0x4090(%rbp), %rdi
    000037b0: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEEEvT_S8_ # Offset: 14256
    000037b5: 	movq	-0x4088(%rbp), %rcx
.Ltmp3007:
    000037bc: 	movq	-0x3ff0(%rbp), %r8
    000037c3: 	movq	%rcx, %r10
    000037c6: 	movq	%r8, %rax
    000037c9: 	subq	%rcx, %rax
    000037cc: 	cmpq	$0x2, %rax
    000037d0: 	jle	.Ltmp2915 # Offset: 14288
    000037d6: 	movzwl	(%rcx), %esi
    000037d9: 	movq	-0x3fd8(%rbp), %r11
.Ltmp3017:
    000037e0: 	movzwl	-0x2(%r8), %r9d
    000037e5: 	leaq	-0x2(%r8), %rdi
    000037e9: 	cmpw	%r9w, %si
    000037ed: 	jl	.Ltmp3013 # Offset: 14317
    000037ef: 	cmpq	%rcx, %rdi
    000037f2: 	jbe	.Ltmp3014 # Offset: 14322
    000037f8: 	movzwl	(%rcx), %edx
    000037fb: 	cmpw	%si, %dx
    000037fe: 	jge	.Ltmp3015 # Offset: 14334
    00003800: 	leaq	0x2(%rcx), %rax
    00003804: 	nopl	(%rax) # Size: 4
.Ltmp3016:
    00003808: 	movq	%rax, %rcx
    0000380b: 	movzwl	(%rax), %edx
    0000380e: 	leaq	0x2(%rax), %rax
    00003812: 	cmpw	%dx, %si
    00003815: 	jg	.Ltmp3016 # Offset: 14357
    00003817: 	cmpq	%rcx, %rdi
    0000381a: 	jbe	.Ltmp3014 # Offset: 14362
.Ltmp3015:
    00003820: 	movw	%dx, (%rdi)
    00003823: 	movw	%r9w, (%rcx)
.Ltmp3013:
    00003827: 	movq	%rdi, %r8
    0000382a: 	jmp	.Ltmp3017 # Offset: 14378
.Ltmp2990:
    0000382c: 	movq	%rcx, %rax
    0000382f: 	movq	%r11, -0x3fd8(%rbp)
    00003836: 	subq	%r14, %rax
    00003839: 	cmpq	$0x2, %rax
    0000383d: 	jle	.Ltmp3018 # Offset: 14397
    00003843: 	movzwl	(%r14), %esi
    00003847: 	movq	%rcx, %r9
    0000384a: 	movq	%r14, %rax
.Ltmp3023:
    0000384d: 	movzwl	-0x2(%r9), %r10d
    00003852: 	leaq	-0x2(%r9), %rdi
    00003856: 	cmpw	%r10w, %si
    0000385a: 	jl	.Ltmp3019 # Offset: 14426
    0000385c: 	cmpq	%rax, %rdi
    0000385f: 	jbe	.Ltmp3020 # Offset: 14431
    00003861: 	movzwl	(%rax), %edx
    00003864: 	cmpw	%si, %dx
    00003867: 	jge	.Ltmp3021 # Offset: 14439
    00003869: 	nopl	(%rax) # Size: 7
.Ltmp3022:
    00003870: 	movzwl	0x2(%rax), %edx
    00003874: 	addq	$0x2, %rax
    00003878: 	cmpw	%dx, %si
    0000387b: 	jg	.Ltmp3022 # Offset: 14459
    0000387d: 	cmpq	%rax, %rdi
    00003880: 	jbe	.Ltmp3020 # Offset: 14464
.Ltmp3021:
    00003882: 	movw	%dx, (%rdi)
    00003885: 	movw	%r10w, (%rax)
.Ltmp3019:
    00003889: 	movq	%rdi, %r9
    0000388c: 	jmp	.Ltmp3023 # Offset: 14476
.Ltmp3020:
    0000388e: 	movq	%r9, %rsi
    00003891: 	movq	%r14, %rdi
    00003894: 	movq	%rcx, -0x4088(%rbp)
    0000389b: 	movq	%r8, -0x4098(%rbp)
    000038a2: 	movq	%r11, -0x3fd8(%rbp)
    000038a9: 	movq	%r9, -0x4090(%rbp)
    000038b0: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEEEvT_S8_ # Offset: 14512
    000038b5: 	movq	-0x4088(%rbp), %rsi
    000038bc: 	movq	-0x4090(%rbp), %rdi
    000038c3: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEEEEvT_S8_ # Offset: 14531
    000038c8: 	movq	-0x4098(%rbp), %r8
    000038cf: 	movq	-0x4088(%rbp), %rcx
.Ltmp3018:
    000038d6: 	movq	%r8, %rax
    000038d9: 	movq	%rcx, %r10
    000038dc: 	subq	%rcx, %rax
    000038df: 	cmpq	$0x2, %rax
    000038e3: 	jle	.Ltmp2988 # Offset: 14563
    000038e9: 	movzwl	(%rcx), %edx
    000038ec: 	movq	-0x3fd8(%rbp), %r11
    000038f3: 	movq	%r8, %r9
.Ltmp3028:
    000038f6: 	movzwl	-0x2(%r9), %edi
    000038fb: 	leaq	-0x2(%r9), %rsi
    000038ff: 	cmpw	%di, %dx
    00003902: 	jl	.Ltmp3024 # Offset: 14594
    00003904: 	cmpq	%rcx, %rsi
    00003907: 	jbe	.Ltmp3025 # Offset: 14599
    0000390d: 	movzwl	(%rcx), %eax
    00003910: 	cmpw	%ax, %dx
    00003913: 	jle	.Ltmp3026 # Offset: 14611
    00003915: 	nopl	(%rax) # Size: 3
.Ltmp3027:
    00003918: 	movzwl	0x2(%rcx), %eax
    0000391c: 	addq	$0x2, %rcx
    00003920: 	cmpw	%ax, %dx
    00003923: 	jg	.Ltmp3027 # Offset: 14627
    00003925: 	cmpq	%rcx, %rsi
    00003928: 	jbe	.Ltmp3025 # Offset: 14632
.Ltmp3026:
    0000392e: 	movw	%ax, (%rsi)
    00003931: 	movw	%di, (%rcx)
.Ltmp3024:
    00003934: 	movq	%rsi, %r9
    00003937: 	jmp	.Ltmp3028 # Offset: 14647
.Ltmp2911:
    00003939: 	movq	-0x3fe8(%rbp), %rcx
    00003940: 	movq	-0x3fd8(%rbp), %rdi
    00003947: 	xorl	%eax, %eax
    00003949: 	subq	%r13, %rcx
.Ltmp3029:
    0000394c: 	movzwl	(%r13,%rax), %edx
    00003952: 	movw	%dx, (%r14,%rax)
    00003957: 	addq	$0x2, %rax
    0000395b: 	cmpq	%rax, %rcx
    0000395e: 	jne	.Ltmp3029 # Offset: 14686
    00003960: 	movq	%rdi, -0x3fd8(%rbp)
    00003967: 	jmp	.Ltmp2910 # Offset: 14695
.Ltmp2960:
    0000396c: 	movq	-0x3fe8(%rbp), %rcx
    00003973: 	movq	-0x3fd8(%rbp), %rdi
    0000397a: 	xorl	%eax, %eax
    0000397c: 	subq	%r13, %rcx
.Ltmp3030:
    0000397f: 	movzwl	(%r13,%rax), %edx
    00003985: 	movw	%dx, (%r14,%rax)
    0000398a: 	addq	$0x2, %rax
    0000398e: 	cmpq	%rcx, %rax
    00003991: 	jne	.Ltmp3030 # Offset: 14737
    00003993: 	movq	%rdi, -0x3fd8(%rbp)
    0000399a: 	jmp	.Ltmp2959 # Offset: 14746
.Ltmp2846:
    0000399f: 	movq	-0x3fd8(%rbp), %rdi
    000039a6: 	movq	-0x4070(%rbp), %rcx
    000039ad: 	xorl	%eax, %eax
.Ltmp3031:
    000039af: 	movzwl	(%r13,%rax), %edx
    000039b5: 	movw	%dx, (%r14,%rax)
    000039ba: 	addq	$0x2, %rax
    000039be: 	cmpq	%rcx, %rax
    000039c1: 	jne	.Ltmp3031 # Offset: 14785
    000039c3: 	movq	%rdi, -0x3fd8(%rbp)
    000039ca: 	jmp	.Ltmp2845 # Offset: 14794
.Ltmp2912:
    000039cf: 	movq	%r14, %rdx
    000039d2: 	movq	%r13, %rax
    000039d5: 	xorl	%ecx, %ecx
    000039d7: 	jmp	.Ltmp3032 # Offset: 14807
.Ltmp2847:
    000039dc: 	movq	%r14, %rdx
    000039df: 	movq	%r13, %rax
    000039e2: 	xorl	%ecx, %ecx
    000039e4: 	jmp	.Ltmp3033 # Offset: 14820
.Ltmp2961:
    000039e9: 	movq	%r14, %rdx
    000039ec: 	movq	%r13, %rax
    000039ef: 	xorl	%ecx, %ecx
    000039f1: 	jmp	.Ltmp3034 # Offset: 14833
.Ltmp2887:
    000039f6: 	leaq	-0x3fc8(%rbp), %rsi
    000039fd: 	xorl	%edx, %edx
    000039ff: 	movq	%rbx, %rdi
    00003a02: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14850
    00003a07: 	movq	%rax, (%rbx)
    00003a0a: 	movq	%rax, %rdi
    00003a0d: 	movq	-0x3fc8(%rbp), %rax
    00003a14: 	movq	%rax, 0x10(%rbx)
.Ltmp3051:
    00003a18: 	movq	-0x4020(%rbp), %rdx
    00003a1f: 	movq	-0x4028(%rbp), %rsi
    00003a26: 	callq	memcpy@PLT # Offset: 14886
    00003a2b: 	movq	-0x3fc8(%rbp), %rax
    00003a32: 	movq	(%rbx), %rdi
    00003a35: 	movq	%rax, -0x4020(%rbp)
    00003a3c: 	jmp	.Ltmp3035 # Offset: 14908
.Ltmp2884:
    00003a41: 	movq	-0x4010(%rbp), %rsi
    00003a48: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003a4f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 14927
    00003a54: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003a5b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00003a62: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003a69: 	jne	.Ltmp3036 # Offset: 14953
.Ltmp2889:
    00003a6f: 	movq	-0x8(%rdx), %rax
    00003a73: 	addq	$0x200, %rax
    00003a79: 	jmp	.Ltmp3036 # Offset: 14969
.Ltmp2865:
    00003a7e: 	movq	-0x8(%rdx), %rax
    00003a82: 	addq	$0x200, %rax
    00003a88: 	jmp	.Ltmp3037 # Offset: 14984
.Ltmp2864:
    00003a8d: 	cmpq	$0x0, -0x4020(%rbp)
    00003a95: 	je	.Ltmp3038 # Offset: 14997
    00003a9b: 	jmp	.Ltmp3039 # Offset: 15003
    00003a9d: 	nopl	(%rax) # Size: 3
.Ltmp2823:
    00003aa0: 	movq	%r12, %rsi
    00003aa3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003aaa: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 15018
    00003aaf: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003ab6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00003abd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003ac4: 	jne	.Ltmp3040 # Offset: 15044
.Ltmp2828:
    00003aca: 	movq	-0x8(%rdx), %rax
    00003ace: 	addq	$0x200, %rax
    00003ad4: 	jmp	.Ltmp3040 # Offset: 15060
.Ltmp2863:
    00003ad9: 	leaq	-0x3fc8(%rbp), %rsi
    00003ae0: 	xorl	%edx, %edx
    00003ae2: 	movq	%rbx, %rdi
    00003ae5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15077
    00003aea: 	movq	%rax, (%rbx)
    00003aed: 	movq	%rax, %rdi
    00003af0: 	movq	-0x3fc8(%rbp), %rax
    00003af7: 	movq	%rax, 0x10(%rbx)
.Ltmp3039:
    00003afb: 	movq	-0x4020(%rbp), %rdx
    00003b02: 	movq	-0x4028(%rbp), %rsi
    00003b09: 	callq	memcpy@PLT # Offset: 15113
    00003b0e: 	movq	-0x3fc8(%rbp), %rax
    00003b15: 	movq	(%rbx), %rdi
    00003b18: 	movq	%rax, -0x4020(%rbp)
    00003b1f: 	jmp	.Ltmp3038 # Offset: 15135
.Ltmp2860:
    00003b24: 	movq	-0x4010(%rbp), %rsi
    00003b2b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003b32: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 15154
    00003b37: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003b3e: 	jmp	.Ltmp3041 # Offset: 15166
.Ltmp2814:
    00003b43: 	movq	-0x3fe0(%rbp), %rcx
.Ltmp3042:
    00003b4a: 	movzwl	(%rcx,%rax), %edx
    00003b4e: 	movw	%dx, (%r13,%rax)
    00003b54: 	addq	$0x2, %rax
    00003b58: 	cmpq	$0xfa0, %rax
    00003b5e: 	jne	.Ltmp3042 # Offset: 15198
    00003b60: 	jmp	.Ltmp3043 # Offset: 15200
.Ltmp2943:
    00003b65: 	movq	-0x8(%rdx), %rax
    00003b69: 	addq	$0x200, %rax
    00003b6f: 	jmp	.Ltmp3044 # Offset: 15215
.Ltmp2942:
    00003b74: 	cmpq	$0x0, -0x3fe0(%rbp)
    00003b7c: 	je	.Ltmp3045 # Offset: 15228
    00003b82: 	jmp	.Ltmp3046 # Offset: 15234
    00003b84: 	nopl	(%rax) # Size: 4
.Ltmp2941:
    00003b88: 	leaq	-0x3fc8(%rbp), %rsi
    00003b8f: 	xorl	%edx, %edx
    00003b91: 	movq	%rbx, %rdi
    00003b94: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15252
    00003b99: 	movq	%rax, (%rbx)
    00003b9c: 	movq	%rax, %rdi
    00003b9f: 	movq	-0x3fc8(%rbp), %rax
    00003ba6: 	movq	%rax, 0x10(%rbx)
.Ltmp3046:
    00003baa: 	movq	-0x3fe0(%rbp), %rdx
    00003bb1: 	movq	-0x4020(%rbp), %rsi
    00003bb8: 	callq	memcpy@PLT # Offset: 15288
    00003bbd: 	movq	-0x3fc8(%rbp), %rax
    00003bc4: 	movq	(%rbx), %rdi
    00003bc7: 	movq	%rax, -0x3fe0(%rbp)
    00003bce: 	jmp	.Ltmp3045 # Offset: 15310
.Ltmp2930:
    00003bd3: 	movq	-0x8(%rdx), %rax
    00003bd7: 	addq	$0x200, %rax
    00003bdd: 	jmp	.Ltmp3047 # Offset: 15325
.Ltmp2925:
    00003be2: 	movq	-0x4010(%rbp), %rsi
    00003be9: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003bf0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 15344
    00003bf5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003bfc: 	jmp	.Ltmp3048 # Offset: 15356
.Ltmp2929:
    00003c01: 	cmpq	$0x0, -0x4020(%rbp)
    00003c09: 	je	.Ltmp3049 # Offset: 15369
    00003c0f: 	jmp	.Ltmp3050 # Offset: 15375
    00003c11: 	nopl	(%rax) # Size: 7
.Ltmp2928:
    00003c18: 	leaq	-0x3fc8(%rbp), %rsi
    00003c1f: 	xorl	%edx, %edx
    00003c21: 	movq	%rbx, %rdi
    00003c24: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15396
    00003c29: 	movq	%rax, (%rbx)
    00003c2c: 	movq	%rax, %rdi
    00003c2f: 	movq	-0x3fc8(%rbp), %rax
    00003c36: 	movq	%rax, 0x10(%rbx)
.Ltmp3050:
    00003c3a: 	movq	-0x4020(%rbp), %rdx
    00003c41: 	movq	-0x4028(%rbp), %rsi
    00003c48: 	callq	memcpy@PLT # Offset: 15432
    00003c4d: 	movq	-0x3fc8(%rbp), %rax
    00003c54: 	movq	(%rbx), %rdi
    00003c57: 	movq	%rax, -0x4020(%rbp)
    00003c5e: 	jmp	.Ltmp3049 # Offset: 15454
.Ltmp2888:
    00003c63: 	cmpq	$0x0, -0x4020(%rbp)
    00003c6b: 	je	.Ltmp3035 # Offset: 15467
    00003c71: 	jmp	.Ltmp3051 # Offset: 15473
    00003c76: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2840:
    00003c80: 	leaq	-0x3fc8(%rbp), %rsi
    00003c87: 	xorl	%edx, %edx
    00003c89: 	movq	%rbx, %rdi
    00003c8c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15500
    00003c91: 	movq	%rax, (%rbx)
    00003c94: 	movq	%rax, %rdi
    00003c97: 	movq	-0x3fc8(%rbp), %rax
    00003c9e: 	movq	%rax, 0x10(%rbx)
.Ltmp3055:
    00003ca2: 	movq	-0x3ff0(%rbp), %rsi
    00003ca9: 	movq	%r14, %rdx
    00003cac: 	callq	memcpy@PLT # Offset: 15532
    00003cb1: 	movq	-0x3fc8(%rbp), %r14
    00003cb8: 	movq	(%rbx), %rdi
    00003cbb: 	jmp	.Ltmp3052 # Offset: 15547
.Ltmp2837:
    00003cc0: 	movq	-0x4010(%rbp), %rsi
    00003cc7: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003cce: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 15566
    00003cd3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003cda: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00003ce1: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003ce8: 	jne	.Ltmp3053 # Offset: 15592
.Ltmp2842:
    00003cee: 	movq	-0x8(%rdx), %rax
    00003cf2: 	addq	$0x200, %rax
    00003cf8: 	jmp	.Ltmp3053 # Offset: 15608
.Ltmp2938:
    00003cfd: 	movq	-0x4010(%rbp), %rsi
    00003d04: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003d0b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 15627
    00003d10: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003d17: 	jmp	.Ltmp3054 # Offset: 15639
.Ltmp2841:
    00003d1c: 	testq	%r14, %r14
    00003d1f: 	je	.Ltmp3052 # Offset: 15647
    00003d25: 	jmp	.Ltmp3055 # Offset: 15653
    00003d2a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2977:
    00003d30: 	movq	-0x8(%rdx), %rax
    00003d34: 	addq	$0x200, %rax
    00003d3a: 	jmp	.Ltmp3056 # Offset: 15674
.Ltmp2976:
    00003d3f: 	testq	%r12, %r12
    00003d42: 	je	.Ltmp3057 # Offset: 15682
    00003d48: 	jmp	.Ltmp3058 # Offset: 15688
    00003d4a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2975:
    00003d50: 	leaq	-0x3fc8(%rbp), %rsi
    00003d57: 	xorl	%edx, %edx
    00003d59: 	movq	%rbx, %rdi
    00003d5c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15708
    00003d61: 	movq	%rax, (%rbx)
    00003d64: 	movq	%rax, %rdi
    00003d67: 	movq	-0x3fc8(%rbp), %rax
    00003d6e: 	movq	%rax, 0x10(%rbx)
.Ltmp3058:
    00003d72: 	movq	-0x3fd8(%rbp), %rsi
    00003d79: 	movq	%r12, %rdx
    00003d7c: 	callq	memcpy@PLT # Offset: 15740
    00003d81: 	movq	-0x3fc8(%rbp), %r12
    00003d88: 	movq	(%rbx), %rdi
    00003d8b: 	jmp	.Ltmp3057 # Offset: 15755
.Ltmp2972:
    00003d90: 	movq	-0x4010(%rbp), %rsi
    00003d97: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003d9e: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 15774
    00003da3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003daa: 	jmp	.Ltmp3059 # Offset: 15786
.Ltmp2907:
    00003daf: 	movq	-0x8(%rdx), %rax
    00003db3: 	addq	$0x200, %rax
    00003db9: 	jmp	.Ltmp3060 # Offset: 15801
.Ltmp2906:
    00003dbe: 	cmpq	$0x0, -0x4020(%rbp)
    00003dc6: 	je	.Ltmp3061 # Offset: 15814
    00003dcc: 	jmp	.Ltmp3062 # Offset: 15820
    00003dce: 	nop # Size: 2
.Ltmp2905:
    00003dd0: 	leaq	-0x3fc8(%rbp), %rsi
    00003dd7: 	xorl	%edx, %edx
    00003dd9: 	movq	%rbx, %rdi
    00003ddc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15836
    00003de1: 	movq	%rax, (%rbx)
    00003de4: 	movq	%rax, %rdi
    00003de7: 	movq	-0x3fc8(%rbp), %rax
    00003dee: 	movq	%rax, 0x10(%rbx)
.Ltmp3062:
    00003df2: 	movq	-0x4020(%rbp), %rdx
    00003df9: 	movq	-0x4028(%rbp), %rsi
    00003e00: 	callq	memcpy@PLT # Offset: 15872
    00003e05: 	movq	-0x3fc8(%rbp), %rax
    00003e0c: 	movq	(%rbx), %rdi
    00003e0f: 	movq	%rax, -0x4020(%rbp)
    00003e16: 	jmp	.Ltmp3061 # Offset: 15894
.Ltmp2956:
    00003e1b: 	movq	-0x8(%rdx), %rax
    00003e1f: 	addq	$0x200, %rax
    00003e25: 	jmp	.Ltmp3063 # Offset: 15909
.Ltmp2955:
    00003e2a: 	testq	%r12, %r12
    00003e2d: 	je	.Ltmp3064 # Offset: 15917
.Ltmp3066:
    00003e33: 	movq	-0x3fd8(%rbp), %rsi
    00003e3a: 	movq	%r12, %rdx
    00003e3d: 	callq	memcpy@PLT # Offset: 15933
    00003e42: 	movq	-0x3fc8(%rbp), %r12
    00003e49: 	movq	(%rbx), %rdi
    00003e4c: 	jmp	.Ltmp3064 # Offset: 15948
.Ltmp2902:
    00003e51: 	movq	-0x4010(%rbp), %rsi
    00003e58: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003e5f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 15967
    00003e64: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003e6b: 	jmp	.Ltmp3065 # Offset: 15979
.Ltmp2954:
    00003e70: 	leaq	-0x3fc8(%rbp), %rsi
    00003e77: 	xorl	%edx, %edx
    00003e79: 	movq	%rbx, %rdi
    00003e7c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15996
    00003e81: 	movq	%rax, (%rbx)
    00003e84: 	movq	%rax, %rdi
    00003e87: 	movq	-0x3fc8(%rbp), %rax
    00003e8e: 	movq	%rax, 0x10(%rbx)
    00003e92: 	jmp	.Ltmp3066 # Offset: 16018
.Ltmp2951:
    00003e94: 	movq	-0x4010(%rbp), %rsi
    00003e9b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003ea2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 16034
    00003ea7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003eae: 	jmp	.Ltmp3067 # Offset: 16046
.Ltmp2827:
    00003eb3: 	testq	%r14, %r14
    00003eb6: 	je	.Ltmp2876 # Offset: 16054
    00003ebc: 	jmp	.Ltmp3068 # Offset: 16060
    00003ec1: 	nopl	(%rax) # Size: 7
.Ltmp2731:
    00003ec8: 	movq	%rdi, %rsi
    00003ecb: 	cmpq	%rdi, -0x3fd8(%rbp)
    00003ed2: 	je	.Ltmp2736 # Offset: 16082
.Ltmp3071:
    00003ed8: 	movq	(%rsi), %rdi
    00003edb: 	leaq	0x10(%rsi), %rax
    00003edf: 	movq	%rsi, %rbx
    00003ee2: 	cmpq	%rax, %rdi
    00003ee5: 	je	.Ltmp3069 # Offset: 16101
.Ltmp3070:
    00003ee7: 	movq	0x10(%rsi), %rax
    00003eeb: 	addq	$0x20, %rbx
    00003eef: 	leaq	0x1(%rax), %rsi
    00003ef3: 	movq	%rax, -0x3fe0(%rbp)
    00003efa: 	callq	_ZdlPvm@PLT # Offset: 16122
    00003eff: 	movq	%rbx, %rsi
    00003f02: 	cmpq	%rbx, -0x3fd8(%rbp)
    00003f09: 	je	.Ltmp2736 # Offset: 16137
    00003f0f: 	movq	(%rsi), %rdi
    00003f12: 	leaq	0x10(%rsi), %rax
    00003f16: 	movq	%rsi, %rbx
    00003f19: 	cmpq	%rax, %rdi
    00003f1c: 	jne	.Ltmp3070 # Offset: 16156
.Ltmp3069:
    00003f1e: 	movq	%rsi, %rax
    00003f21: 	addq	$0x20, %rax
    00003f25: 	movq	%rax, %rsi
    00003f28: 	cmpq	%rax, -0x3fd8(%rbp)
    00003f2f: 	jne	.Ltmp3071 # Offset: 16175
    00003f31: 	jmp	.Ltmp2736 # Offset: 16177
.Ltmp2744:
    00003f36: 	xorl	%edx, %edx
    00003f38: 	jmp	.Ltmp3072 # Offset: 16184
.Ltmp2839:
    00003f3d: 	leaq	DATAat0x24158(%rip), %rdi
    00003f44: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16196
.Ltmp2862:
    00003f49: 	leaq	DATAat0x24158(%rip), %rdi
    00003f50: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16208
.Ltmp2825:
    00003f55: 	leaq	DATAat0x24158(%rip), %rdi
    00003f5c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16220
.Ltmp2886:
    00003f61: 	leaq	DATAat0x24158(%rip), %rdi
    00003f68: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16232
.Ltmp2904:
    00003f6d: 	leaq	DATAat0x24158(%rip), %rdi
    00003f74: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16244
.Ltmp2927:
    00003f79: 	leaq	DATAat0x24158(%rip), %rdi
    00003f80: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16256
.Ltmp2940:
    00003f85: 	leaq	DATAat0x24158(%rip), %rdi
    00003f8c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16268
.Ltmp2953:
    00003f91: 	leaq	DATAat0x24158(%rip), %rdi
    00003f98: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16280
.Ltmp2974:
    00003f9d: 	leaq	DATAat0x24158(%rip), %rdi
    00003fa4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16292
.Ltmp2987:
    00003fa9: 	callq	__stack_chk_fail@PLT # Offset: 16297
    00003fae: 	endbr64
.Ltmp3074:
    00003fb2: 	movq	%rax, %r15
    00003fb5: 	jmp	.Ltmp3073 # Offset: 16309
    00003fb7: 	endbr64
    00003fbb: 	jmp	.Ltmp3074 # Offset: 16315
    00003fbd: 	endbr64
    00003fc1: 	jmp	.Ltmp3074 # Offset: 16321
    00003fc3: 	endbr64
    00003fc7: 	jmp	.Ltmp3074 # Offset: 16327
.Ltmp3073:
    00003fc9: 	movq	-0xfe0(%rbp), %rdi
    00003fd0: 	cmpq	%rbx, %rdi
    00003fd3: 	je	.Ltmp3075 # Offset: 16339
    00003fd5: 	movq	-0xfd0(%rbp), %rax
    00003fdc: 	leaq	0x1(%rax), %rsi
    00003fe0: 	callq	_ZdlPvm@PLT # Offset: 16352
.Ltmp3075:
    00003fe5: 	movq	%r15, %rbx
.Ltmp3082:
    00003fe8: 	movq	-0x3f80(%rbp), %rdi
    00003fef: 	cmpq	-0x4080(%rbp), %rdi
    00003ff6: 	je	.Ltmp3076 # Offset: 16374
    00003ff8: 	movq	-0x3f70(%rbp), %rax
    00003fff: 	leaq	0x1(%rax), %rsi
    00004003: 	callq	_ZdlPvm@PLT # Offset: 16387
.Ltmp3076:
    00004008: 	movq	-0x3fc0(%rbp), %rdi
    0000400f: 	movq	-0x3fb0(%rbp), %rsi
    00004016: 	subq	%rdi, %rsi
    00004019: 	testq	%rdi, %rdi
    0000401c: 	je	.Ltmp3077 # Offset: 16412
    0000401e: 	callq	_ZdlPvm@PLT # Offset: 16414
.Ltmp3077:
    00004023: 	movq	%rbx, %rdi
    00004026: 	callq	_Unwind_Resume@PLT # Offset: 16422
    0000402b: 	endbr64
    0000402f: 	jmp	.Ltmp3074 # Offset: 16431
    00004031: 	endbr64
    00004035: 	jmp	.Ltmp3074 # Offset: 16437
    0000403a: 	endbr64
    0000403e: 	jmp	.Ltmp3074 # Offset: 16446
    00004043: 	endbr64
    00004047: 	jmp	.Ltmp3074 # Offset: 16455
    0000404c: 	endbr64
    00004050: 	jmp	.Ltmp3074 # Offset: 16464
    00004055: 	endbr64
    00004059: 	jmp	.Ltmp3074 # Offset: 16473
    0000405e: 	endbr64
    00004062: 	jmp	.Ltmp3074 # Offset: 16482
    00004067: 	endbr64
    0000406b: 	jmp	.Ltmp3074 # Offset: 16491
    00004070: 	endbr64
    00004074: 	jmp	.Ltmp3074 # Offset: 16500
    00004079: 	endbr64
    0000407d: 	jmp	.Ltmp3074 # Offset: 16509
    00004082: 	endbr64
    00004086: 	jmp	.Ltmp3074 # Offset: 16518
    0000408b: 	endbr64
    0000408f: 	jmp	.Ltmp3074 # Offset: 16527
    00004094: 	endbr64
.Ltmp3083:
    00004098: 	movq	%rax, %r15
    0000409b: 	jmp	.Ltmp3078 # Offset: 16539
    0000409d: 	endbr64
    000040a1: 	jmp	.Ltmp3074 # Offset: 16545
    000040a6: 	endbr64
    000040aa: 	jmp	.Ltmp3074 # Offset: 16554
    000040af: 	endbr64
    000040b3: 	jmp	.Ltmp3074 # Offset: 16563
.Ltmp3078:
    000040b8: 	movq	-0xfe0(%rbp), %rdi
    000040bf: 	cmpq	%rbx, %rdi
    000040c2: 	je	.Ltmp3079 # Offset: 16578
    000040c4: 	movq	-0xfd0(%rbp), %rax
    000040cb: 	leaq	0x1(%rax), %rsi
    000040cf: 	callq	_ZdlPvm@PLT # Offset: 16591
.Ltmp3079:
    000040d4: 	movq	%r15, %rbx
.Ltmp3093:
    000040d7: 	movq	-0x3f20(%rbp), %rdi
    000040de: 	leaq	-0x3f10(%rbp), %rax
    000040e5: 	cmpq	%rax, %rdi
    000040e8: 	je	.Ltmp3080 # Offset: 16616
    000040ea: 	movq	-0x3f10(%rbp), %rax
    000040f1: 	leaq	0x1(%rax), %rsi
    000040f5: 	callq	_ZdlPvm@PLT # Offset: 16629
.Ltmp3080:
    000040fa: 	movq	-0x3f40(%rbp), %rdi
    00004101: 	leaq	-0x3f30(%rbp), %rax
    00004108: 	cmpq	%rax, %rdi
    0000410b: 	je	.Ltmp3081 # Offset: 16651
    0000410d: 	movq	-0x3f30(%rbp), %rax
    00004114: 	leaq	0x1(%rax), %rsi
    00004118: 	callq	_ZdlPvm@PLT # Offset: 16664
.Ltmp3081:
    0000411d: 	movq	-0x3f60(%rbp), %rdi
    00004124: 	leaq	-0x3f50(%rbp), %rax
    0000412b: 	cmpq	%rax, %rdi
    0000412e: 	je	.Ltmp3082 # Offset: 16686
    00004134: 	movq	-0x3f50(%rbp), %rax
    0000413b: 	leaq	0x1(%rax), %rsi
    0000413f: 	callq	_ZdlPvm@PLT # Offset: 16703
    00004144: 	jmp	.Ltmp3082 # Offset: 16708
    00004149: 	endbr64
    0000414d: 	jmp	.Ltmp3074 # Offset: 16717
    00004152: 	endbr64
    00004156: 	jmp	.Ltmp3074 # Offset: 16726
    0000415b: 	endbr64
    0000415f: 	jmp	.Ltmp3074 # Offset: 16735
    00004164: 	endbr64
    00004168: 	jmp	.Ltmp3074 # Offset: 16744
    0000416d: 	endbr64
    00004171: 	jmp	.Ltmp3083 # Offset: 16753
    00004176: 	endbr64
    0000417a: 	movq	%rax, %rbx
    0000417d: 	jmp	.Ltmp3081 # Offset: 16765
    0000417f: 	endbr64
.Ltmp3085:
    00004183: 	movq	%rax, %r15
    00004186: 	jmp	.Ltmp3084 # Offset: 16774
    00004188: 	endbr64
    0000418c: 	jmp	.Ltmp3085 # Offset: 16780
    0000418e: 	endbr64
    00004192: 	jmp	.Ltmp3085 # Offset: 16786
    00004194: 	endbr64
    00004198: 	jmp	.Ltmp3085 # Offset: 16792
    0000419a: 	endbr64
    0000419e: 	jmp	.Ltmp3085 # Offset: 16798
    000041a0: 	endbr64
    000041a4: 	jmp	.Ltmp3085 # Offset: 16804
.Ltmp3084:
    000041a6: 	movq	-0xfe0(%rbp), %rdi
    000041ad: 	cmpq	%rbx, %rdi
    000041b0: 	je	.Ltmp3086 # Offset: 16816
    000041b2: 	movq	-0xfd0(%rbp), %rax
    000041b9: 	leaq	0x1(%rax), %rsi
    000041bd: 	callq	_ZdlPvm@PLT # Offset: 16829
.Ltmp3086:
    000041c2: 	movq	%r15, %rbx
    000041c5: 	jmp	.Ltmp3081 # Offset: 16837
    000041ca: 	endbr64
.Ltmp3088:
    000041ce: 	movq	%rax, %rbx
    000041d1: 	jmp	.Ltmp3087 # Offset: 16849
    000041d3: 	endbr64
    000041d7: 	jmp	.Ltmp3088 # Offset: 16855
    000041d9: 	endbr64
.Ltmp3090:
    000041dd: 	movq	%rax, %r15
    000041e0: 	jmp	.Ltmp3089 # Offset: 16864
    000041e5: 	endbr64
    000041e9: 	jmp	.Ltmp3088 # Offset: 16873
    000041eb: 	endbr64
    000041ef: 	movq	%rax, %rbx
    000041f2: 	jmp	.Ltmp3080 # Offset: 16882
    000041f7: 	endbr64
    000041fb: 	jmp	.Ltmp3085 # Offset: 16891
    000041fd: 	endbr64
    00004201: 	jmp	.Ltmp3085 # Offset: 16897
    00004203: 	endbr64
    00004207: 	jmp	.Ltmp3085 # Offset: 16903
    0000420c: 	endbr64
    00004210: 	jmp	.Ltmp3090 # Offset: 16912
    00004212: 	endbr64
    00004216: 	jmp	.Ltmp3090 # Offset: 16918
    00004218: 	endbr64
    0000421c: 	jmp	.Ltmp3090 # Offset: 16924
.Ltmp3087:
    0000421e: 	movq	-0x3ee0(%rbp), %rdi
    00004225: 	cmpq	-0x4018(%rbp), %rdi
    0000422c: 	je	.Ltmp3091 # Offset: 16940
.Ltmp3094:
    0000422e: 	movq	-0x3ed0(%rbp), %rax
    00004235: 	leaq	0x1(%rax), %rsi
    00004239: 	callq	_ZdlPvm@PLT # Offset: 16953
.Ltmp3091:
    0000423e: 	movq	-0x3fa0(%rbp), %rdi
    00004245: 	movq	-0x3f90(%rbp), %rsi
    0000424c: 	subq	%rdi, %rsi
    0000424f: 	testq	%rdi, %rdi
    00004252: 	je	.Ltmp3092 # Offset: 16978
    00004254: 	callq	_ZdlPvm@PLT # Offset: 16980
.Ltmp3092:
    00004259: 	movq	-0x3f00(%rbp), %rdi
    00004260: 	leaq	-0x3ef0(%rbp), %rax
    00004267: 	cmpq	%rax, %rdi
    0000426a: 	je	.Ltmp3093 # Offset: 17002
    00004270: 	movq	-0x3ef0(%rbp), %rax
    00004277: 	leaq	0x1(%rax), %rsi
    0000427b: 	callq	_ZdlPvm@PLT # Offset: 17019
    00004280: 	jmp	.Ltmp3093 # Offset: 17024
    00004285: 	endbr64
    00004289: 	jmp	.Ltmp3088 # Offset: 17033
    0000428e: 	endbr64
    00004292: 	jmp	.Ltmp3088 # Offset: 17042
    00004297: 	endbr64
    0000429b: 	jmp	.Ltmp3088 # Offset: 17051
    000042a0: 	endbr64
    000042a4: 	jmp	.Ltmp3090 # Offset: 17060
    000042a9: 	endbr64
    000042ad: 	movq	%rax, %rbx
    000042b0: 	movq	-0x3ee0(%rbp), %rdi
    000042b7: 	leaq	-0x3ed0(%rbp), %rax
    000042be: 	cmpq	%rax, %rdi
    000042c1: 	jne	.Ltmp3094 # Offset: 17089
    000042c7: 	jmp	.Ltmp3091 # Offset: 17095
.Ltmp3089:
    000042cc: 	movq	-0xfe0(%rbp), %rdi
    000042d3: 	cmpq	%rbx, %rdi
    000042d6: 	je	.Ltmp3095 # Offset: 17110
    000042d8: 	movq	-0xfd0(%rbp), %rax
    000042df: 	leaq	0x1(%rax), %rsi
    000042e3: 	callq	_ZdlPvm@PLT # Offset: 17123
.Ltmp3095:
    000042e8: 	movq	%r15, %rbx
    000042eb: 	jmp	.Ltmp3080 # Offset: 17131
    000042f0: 	endbr64
    000042f4: 	jmp	.Ltmp3074 # Offset: 17140
    000042f9: 	endbr64
    000042fd: 	jmp	.Ltmp3083 # Offset: 17149
    00004302: 	endbr64
    00004306: 	movq	%rax, %rbx
    00004309: 	jmp	.Ltmp3093 # Offset: 17161
    0000430e: 	endbr64
    00004312: 	jmp	.Ltmp3090 # Offset: 17170
    00004317: 	endbr64
    0000431b: 	jmp	.Ltmp3090 # Offset: 17179
    00004320: 	endbr64
    00004324: 	jmp	.Ltmp3090 # Offset: 17188
    00004329: 	endbr64
    0000432d: 	jmp	.Ltmp3090 # Offset: 17197
    00004332: 	endbr64
    00004336: 	jmp	.Ltmp3074 # Offset: 17206
    0000433b: 	endbr64
    0000433f: 	movq	%rax, %rbx
    00004342: 	jmp	.Ltmp3096 # Offset: 17218
    00004344: 	endbr64
    00004348: 	jmp	.Ltmp3083 # Offset: 17224
.Ltmp3096:
    0000434d: 	movq	-0xfe0(%rbp), %rdi
    00004354: 	leaq	-0xfd0(%rbp), %rax
    0000435b: 	cmpq	%rax, %rdi
    0000435e: 	je	.Ltmp3082 # Offset: 17246
    00004364: 	movq	-0xfd0(%rbp), %rax
    0000436b: 	leaq	0x1(%rax), %rsi
    0000436f: 	callq	_ZdlPvm@PLT # Offset: 17263
    00004374: 	jmp	.Ltmp3082 # Offset: 17268
    00004379: 	endbr64
    0000437d: 	jmp	.Ltmp3083 # Offset: 17277
    00004382: 	endbr64
    00004386: 	jmp	.Ltmp3083 # Offset: 17286
    0000438b: 	endbr64
    0000438f: 	jmp	.Ltmp3083 # Offset: 17295
    00004394: 	endbr64
    00004398: 	jmp	.Ltmp3083 # Offset: 17304
    0000439d: 	endbr64
    000043a1: 	jmp	.Ltmp3083 # Offset: 17313
    000043a6: 	endbr64
    000043aa: 	movq	%rax, %rbx
    000043ad: 	jmp	.Ltmp3076 # Offset: 17325
    000043b2: 	endbr64
    000043b6: 	movq	%rax, %rbx
    000043b9: 	jmp	.Ltmp3097 # Offset: 17337
    000043bb: 	endbr64
    000043bf: 	movq	%rax, %rbx
    000043c2: 	jmp	.Ltmp3091 # Offset: 17346
.Ltmp3097:
    000043c7: 	movq	-0x1f80(%rbp), %rdi
    000043ce: 	leaq	-0x1f70(%rbp), %rax
    000043d5: 	cmpq	%rax, %rdi
    000043d8: 	je	.Ltmp3091 # Offset: 17368
    000043de: 	movq	-0x1f70(%rbp), %rax
    000043e5: 	leaq	0x1(%rax), %rsi
    000043e9: 	callq	_ZdlPvm@PLT # Offset: 17385
    000043ee: 	jmp	.Ltmp3091 # Offset: 17390
    000043f3: 	endbr64
    000043f7: 	movq	%rax, %rbx
    000043fa: 	jmp	.Ltmp3092 # Offset: 17402
    000043ff: 	endbr64
    00004403: 	jmp	.Ltmp3074 # Offset: 17411
    00004408: 	endbr64
    0000440c: 	jmp	.Ltmp3074 # Offset: 17420
    00004411: 	endbr64
    00004415: 	jmp	.Ltmp3088 # Offset: 17429
    0000441a: 	endbr64
    0000441e: 	movq	%rax, %rbx
    00004421: 	jmp	.Ltmp3082 # Offset: 17441
    00004426: 	endbr64
    0000442a: 	jmp	.Ltmp3074 # Offset: 17450
    0000442f: 	endbr64
    00004433: 	jmp	.Ltmp3074 # Offset: 17459
    00004438: 	endbr64
    0000443c: 	jmp	.Ltmp3074 # Offset: 17468
    00004441: 	endbr64
    00004445: 	jmp	.Ltmp3074 # Offset: 17477
    0000444a: 	endbr64
    0000444e: 	jmp	.Ltmp3074 # Offset: 17486
    00004453: 	endbr64
    00004457: 	jmp	.Ltmp3074 # Offset: 17495
    0000445c: 	endbr64
    00004460: 	jmp	.Ltmp3074 # Offset: 17504
    00004465: 	endbr64
    00004469: 	jmp	.Ltmp3074 # Offset: 17513
    0000446e: 	endbr64
    00004472: 	jmp	.Ltmp3088 # Offset: 17522
DWARF CFI Instructions:
    <empty>
End of Function "_Z11testOneTypeIsEvv"

Binary Function "_ZN9benchmark9__sift_inIPddEEvlT_lT0_" after disassembly {
  Number      : 263
  State       : disassembled
  Address     : 0x1f220
  Size        : 0x107
  MaxSize     : 0x110
  Offset      : 0x1f220
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIPddEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0262:
    00000000: 	endbr64
    00000004: 	leaq	0x2(%rdx,%rdx), %rax
    00000009: 	movq	%rdi, %r9
    0000000c: 	movq	%rsi, %rcx
    0000000f: 	movq	%rdx, %r8
    00000012: 	cmpq	%rdi, %rax
    00000015: 	jge	.Ltmp3098 # Offset: 21
    0000001b: 	movq	%rdx, %rdi
    0000001e: 	jmp	.Ltmp3099 # Offset: 30
.Ltmp3101:
    00000020: 	leaq	-0x1(%rax), %r10
    00000024: 	leaq	(%rax,%rax), %rsi
    00000028: 	movsd	%xmm2, (%rcx,%rdi,8)
    0000002d: 	leaq	(%rcx,%r10,8), %rdx
    00000031: 	movq	%r10, %rax
    00000034: 	cmpq	%rsi, %r9
    00000037: 	jle	.Ltmp3100 # Offset: 55
.Ltmp3102:
    00000039: 	movq	%rax, %rdi
    0000003c: 	movq	%rsi, %rax
.Ltmp3099:
    0000003f: 	leaq	(,%rax,8), %rdx
    00000047: 	movsd	-0x8(%rcx,%rdx), %xmm2
    0000004d: 	addq	%rcx, %rdx
    00000050: 	movsd	(%rdx), %xmm1
    00000054: 	comisd	%xmm2, %xmm1
    00000058: 	jbe	.Ltmp3101 # Offset: 88
    0000005a: 	leaq	0x2(%rax,%rax), %rsi
    0000005f: 	movsd	%xmm1, (%rcx,%rdi,8)
    00000064: 	cmpq	%rsi, %r9
    00000067: 	jg	.Ltmp3102 # Offset: 103
.Ltmp3100:
    00000069: 	cmpq	%rsi, %r9
    0000006c: 	je	.Ltmp3103 # Offset: 108
.Ltmp3108:
    00000072: 	leaq	-0x1(%rax), %rdi
    00000076: 	movq	%rdi, %rsi
    00000079: 	shrq	$0x3f, %rsi
    0000007d: 	addq	%rdi, %rsi
    00000080: 	sarq	%rsi
    00000083: 	cmpq	%r8, %rax
    00000086: 	jg	.Ltmp3104 # Offset: 134
    00000088: 	jmp	.Ltmp3105 # Offset: 136
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3107:
    00000090: 	movsd	%xmm1, (%rdx)
    00000094: 	leaq	-0x1(%rsi), %rdx
    00000098: 	movq	%rdx, %rax
    0000009b: 	shrq	$0x3f, %rax
    0000009f: 	addq	%rdx, %rax
    000000a2: 	sarq	%rax
    000000a5: 	movq	%rax, %rdx
    000000a8: 	movq	%rsi, %rax
    000000ab: 	cmpq	%rsi, %r8
    000000ae: 	jge	.Ltmp3106 # Offset: 174
    000000b0: 	movq	%rdx, %rsi
.Ltmp3104:
    000000b3: 	leaq	(%rcx,%rsi,8), %rdi
    000000b7: 	leaq	(%rcx,%rax,8), %rdx
    000000bb: 	movsd	(%rdi), %xmm1
    000000bf: 	comisd	%xmm1, %xmm0
    000000c3: 	ja	.Ltmp3107 # Offset: 195
.Ltmp3105:
    000000c5: 	movsd	%xmm0, (%rdx)
    000000c9: 	retq # Offset: 201
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3106:
    000000d0: 	movq	%rdi, %rdx
    000000d3: 	movsd	%xmm0, (%rdx)
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3098:
    000000e0: 	leaq	(%rsi,%rdx,8), %rdx
    000000e4: 	jne	.Ltmp3105 # Offset: 228
    000000e6: 	movq	%rax, %rsi
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp3103:
    000000f0: 	movsd	-0x8(%rcx,%rsi,8), %xmm1
    000000f6: 	leaq	-0x1(%rsi), %rax
    000000fa: 	movsd	%xmm1, (%rdx)
    000000fe: 	leaq	(%rcx,%rax,8), %rdx
    00000102: 	jmp	.Ltmp3108 # Offset: 258
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIPddEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEEvlT_lT0_" after disassembly {
  Number      : 264
  State       : disassembled
  Address     : 0x1f330
  Size        : 0xf8
  MaxSize     : 0x100
  Offset      : 0x1f330
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0263:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000c: 	movq	%rdi, %r10
    0000000f: 	movq	%rsi, %rcx
    00000012: 	cmpq	%rdi, %rdx
    00000015: 	jge	.Ltmp3109 # Offset: 21
    0000001b: 	movq	%r8, %r9
    0000001e: 	jmp	.Ltmp3110 # Offset: 30
.Ltmp3112:
    00000020: 	movq	%rax, %r9
.Ltmp3110:
    00000023: 	leaq	-0x1(%rdx), %rax
    00000027: 	leaq	(,%rax,8), %rdi
    0000002f: 	leaq	(%rcx,%rdi), %rsi
    00000033: 	leaq	0x8(%rdi,%rcx), %rdi
    00000038: 	movsd	(%rsi), %xmm1
    0000003c: 	movsd	(%rdi), %xmm2
    00000040: 	comisd	%xmm1, %xmm2
    00000044: 	jbe	.Ltmp3111 # Offset: 68
    00000046: 	movq	%rdx, %rax
    00000049: 	movapd	%xmm2, %xmm1
    0000004d: 	movq	%rdi, %rsi
    00000050: 	addq	$0x1, %rdx
.Ltmp3111:
    00000054: 	addq	%rdx, %rdx
    00000057: 	movsd	%xmm1, (%rcx,%r9,8)
    0000005d: 	cmpq	%rdx, %r10
    00000060: 	jg	.Ltmp3112 # Offset: 96
    00000062: 	je	.Ltmp3113 # Offset: 98
.Ltmp3118:
    00000064: 	leaq	-0x1(%rax), %rdx
    00000068: 	movq	%rdx, %rdi
    0000006b: 	shrq	$0x3f, %rdi
    0000006f: 	addq	%rdx, %rdi
    00000072: 	sarq	%rdi
    00000075: 	cmpq	%r8, %rax
    00000078: 	jg	.Ltmp3114 # Offset: 120
    0000007a: 	jmp	.Ltmp3115 # Offset: 122
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp3117:
    00000080: 	leaq	-0x1(%rdi), %rdx
    00000084: 	movsd	%xmm1, (%rsi)
    00000088: 	movq	%rdx, %rax
    0000008b: 	shrq	$0x3f, %rax
    0000008f: 	addq	%rdx, %rax
    00000092: 	sarq	%rax
    00000095: 	movq	%rax, %rdx
    00000098: 	movq	%rdi, %rax
    0000009b: 	cmpq	%rdi, %r8
    0000009e: 	jge	.Ltmp3116 # Offset: 158
    000000a0: 	movq	%rdx, %rdi
.Ltmp3114:
    000000a3: 	leaq	(%rcx,%rdi,8), %r9
    000000a7: 	leaq	(%rcx,%rax,8), %rsi
    000000ab: 	movsd	(%r9), %xmm1
    000000b0: 	comisd	%xmm1, %xmm0
    000000b4: 	ja	.Ltmp3117 # Offset: 180
.Ltmp3115:
    000000b6: 	movsd	%xmm0, (%rsi)
    000000ba: 	retq # Offset: 186
    000000bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3116:
    000000c0: 	movq	%r9, %rsi
    000000c3: 	movsd	%xmm0, (%rsi)
    000000c7: 	retq # Offset: 199
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3109:
    000000d0: 	leaq	(%rsi,%r8,8), %rsi
    000000d4: 	jne	.Ltmp3115 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3113:
    000000e0: 	leaq	-0x1(%rdx), %rax
    000000e4: 	leaq	(%rcx,%rax,8), %rdx
    000000e8: 	movsd	(%rdx), %xmm1
    000000ec: 	movsd	%xmm1, (%rsi)
    000000f0: 	movq	%rdx, %rsi
    000000f3: 	jmp	.Ltmp3118 # Offset: 243
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEEvlT_lT0_"

Binary Function "_Z11testOneTypeIdEvv" after disassembly {
  Number      : 265
  State       : disassembled
  Address     : 0x1f430
  Size        : 0x4242
  MaxSize     : 0x4242
  Offset      : 0x1f430
  Section     : .text
  Orc Section : .local.text._Z11testOneTypeIdEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0264:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rsp, %rbp
    00000008: 	pushq	%r15
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbx
    00000011: 	leaq	-0xf000(%rsp), %r11
.Ltmp3119:
    00000019: 	subq	$0x1000, %rsp
    00000020: 	orq	$0x0, (%rsp)
    00000025: 	cmpq	%r11, %rsp
    00000028: 	jne	.Ltmp3119 # Offset: 40
    0000002a: 	subq	$0xbe8, %rsp
    00000031: 	pxor	%xmm0, %xmm0
    00000035: 	movl	$0x7d0, %esi
    0000003a: 	movq	%fs:0x28, %rax
    00000043: 	movq	%rax, -0x38(%rbp)
    00000047: 	xorl	%eax, %eax
    00000049: 	leaq	-0xfb40(%rbp), %rdi
    00000050: 	movaps	%xmm0, -0xfb40(%rbp)
    00000057: 	movq	$0x0, -0xfb30(%rbp)
    00000062: 	callq	_ZNSt6vectorIdSaIdEE17_M_default_appendEm # Offset: 98
    00000067: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm7
    0000006f: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm6
    00000077: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000007e: 	movq	_Z7gLabelsB5cxx11+56(%rip), %r13
    00000085: 	movaps	%xmm7, -0xfb90(%rbp)
    0000008c: 	movq	%xmm7, %rbx
    00000091: 	movhlps	%xmm6, %xmm7
    00000094: 	movq	%rax, -0xfb58(%rbp)
    0000009b: 	movq	%xmm7, %rsi
    000000a0: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    000000a7: 	leaq	0x8(%rsi), %r12
    000000ab: 	movaps	%xmm6, -0xfb80(%rbp)
    000000b2: 	movq	%rax, -0xfb60(%rbp)
    000000b9: 	movq	%r12, %r14
    000000bc: 	movq	%xmm7, -0xfb70(%rbp)
    000000c4: 	movq	%xmm6, -0xfb68(%rbp)
    000000cc: 	cmpq	%r12, %rax
    000000cf: 	jbe	.Ltmp3120 # Offset: 207
    000000d1: 	movq	%rbx, -0xfb98(%rbp)
.Ltmp3123:
    000000d8: 	movq	(%r14), %r15
    000000db: 	leaq	0x200(%r15), %rbx
    000000e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3122:
    000000e8: 	movq	(%r15), %rdi
    000000eb: 	leaq	0x10(%r15), %rdx
    000000ef: 	cmpq	%rdx, %rdi
    000000f2: 	je	.Ltmp3121 # Offset: 242
    000000f8: 	movq	0x10(%r15), %rax
    000000fc: 	addq	$0x20, %r15
    00000100: 	leaq	0x1(%rax), %rsi
    00000104: 	callq	_ZdlPvm@PLT # Offset: 260
    00000109: 	cmpq	%rbx, %r15
    0000010c: 	jne	.Ltmp3122 # Offset: 268
    0000010e: 	addq	$0x8, %r14
    00000112: 	cmpq	%r14, -0xfb60(%rbp)
    00000119: 	ja	.Ltmp3123 # Offset: 281
.Ltmp3263:
    0000011b: 	movq	-0xfb98(%rbp), %rbx
.Ltmp3120:
    00000122: 	movq	-0xfb70(%rbp), %rcx
    00000129: 	cmpq	%rcx, -0xfb60(%rbp)
    00000130: 	je	.Ltmp3124 # Offset: 304
    00000136: 	cmpq	%rbx, -0xfb68(%rbp)
    0000013d: 	je	.Ltmp3125 # Offset: 317
.Ltmp3128:
    0000013f: 	movq	(%rbx), %rdi
    00000142: 	leaq	0x10(%rbx), %rax
    00000146: 	cmpq	%rax, %rdi
    00000149: 	je	.Ltmp3126 # Offset: 329
.Ltmp3127:
    0000014b: 	movq	0x10(%rbx), %rax
    0000014f: 	addq	$0x20, %rbx
    00000153: 	leaq	0x1(%rax), %rsi
    00000157: 	movq	%rax, -0xfb60(%rbp)
    0000015e: 	callq	_ZdlPvm@PLT # Offset: 350
    00000163: 	cmpq	%rbx, -0xfb68(%rbp)
    0000016a: 	je	.Ltmp3125 # Offset: 362
    0000016c: 	movq	(%rbx), %rdi
    0000016f: 	leaq	0x10(%rbx), %rax
    00000173: 	cmpq	%rax, %rdi
    00000176: 	jne	.Ltmp3127 # Offset: 374
.Ltmp3126:
    00000178: 	movq	%rbx, %rax
    0000017b: 	addq	$0x20, %rax
    0000017f: 	movq	%rax, %rbx
    00000182: 	cmpq	-0xfb68(%rbp), %rax
    00000189: 	jne	.Ltmp3128 # Offset: 393
    0000018b: 	cmpq	%r13, -0xfb58(%rbp)
    00000192: 	je	.Ltmp3129 # Offset: 402
.Ltmp3131:
    00000194: 	movq	(%r13), %rdi
    00000198: 	leaq	0x10(%r13), %rax
    0000019c: 	cmpq	%rax, %rdi
    0000019f: 	je	.Ltmp3130 # Offset: 415
    000001a1: 	movq	0x10(%r13), %rax
    000001a5: 	leaq	0x1(%rax), %rsi
    000001a9: 	callq	_ZdlPvm@PLT # Offset: 425
.Ltmp3130:
    000001ae: 	addq	$0x20, %r13
.Ltmp3125:
    000001b2: 	cmpq	%r13, -0xfb58(%rbp)
    000001b9: 	jne	.Ltmp3131 # Offset: 441
.Ltmp3129:
    000001bb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    000001c2: 	leaq	0x8(%rax), %rbx
    000001c6: 	cmpq	%r12, %rbx
    000001c9: 	jbe	.Ltmp3132 # Offset: 457
.Ltmp3133:
    000001cb: 	movq	(%r12), %rdi
    000001cf: 	movl	$0x200, %esi
    000001d4: 	addq	$0x8, %r12
    000001d8: 	callq	_ZdlPvm@PLT # Offset: 472
    000001dd: 	cmpq	%r12, %rbx
    000001e0: 	ja	.Ltmp3133 # Offset: 480
.Ltmp3132:
    000001e2: 	leaq	-0xfaf0(%rbp), %rax
    000001e9: 	movsd	init_value(%rip), %xmm1
    000001f1: 	movdqa	-0xfb90(%rbp), %xmm7
    000001f9: 	movl	$0x62756f64, -0xfaf0(%rbp)
    00000203: 	movq	%rax, -0xfbf0(%rbp)
    0000020a: 	movdqa	-0xfb80(%rbp), %xmm6
    00000212: 	leaq	-0x7d40(%rbp), %rcx
    00000219: 	movq	%rax, -0xfb00(%rbp)
    00000220: 	movl	$0x656c, %eax
    00000225: 	movapd	%xmm1, %xmm0
    00000229: 	movq	%rcx, %rbx
    0000022c: 	movw	%ax, -0xfaec(%rbp)
    00000233: 	leaq	-0xbbc0(%rbp), %rax
    0000023a: 	unpcklpd	%xmm0, %xmm0
    0000023e: 	movq	$0x6, -0xfaf8(%rbp)
    00000249: 	movb	$0x0, -0xfaea(%rbp)
    00000250: 	movq	%rax, -0xfb68(%rbp)
    00000257: 	movaps	%xmm7, _Z7gLabelsB5cxx11+48(%rip)
    0000025e: 	movaps	%xmm6, _Z7gLabelsB5cxx11+64(%rip)
.Ltmp3134:
    00000265: 	movaps	%xmm0, (%rax)
    00000268: 	addq	$0x10, %rax
    0000026c: 	cmpq	%rax, %rbx
    0000026f: 	jne	.Ltmp3134 # Offset: 623
    00000271: 	leaq	-0xfa40(%rbp), %rax
    00000278: 	movq	%rax, -0xfb80(%rbp)
.Ltmp3135:
    0000027f: 	movaps	%xmm0, (%rax)
    00000282: 	addq	$0x10, %rax
    00000286: 	cmpq	%rax, -0xfb68(%rbp)
    0000028d: 	jne	.Ltmp3135 # Offset: 653
    0000028f: 	movq	-0xfb38(%rbp), %rax
    00000296: 	movq	-0xfb40(%rbp), %r13
    0000029d: 	movq	%rbx, -0xfb58(%rbp)
    000002a4: 	movq	%rax, -0xfb70(%rbp)
    000002ab: 	cmpq	%r13, %rax
    000002ae: 	je	.Ltmp3136 # Offset: 686
    000002b0: 	movq	%rax, %rcx
    000002b3: 	movq	%r13, %rax
    000002b6: 	subq	%r13, %rcx
    000002b9: 	leaq	-0x8(%rcx), %rdx
    000002bd: 	shrq	$0x3, %rdx
    000002c1: 	addq	$0x1, %rdx
    000002c5: 	cmpq	$0x8, %rcx
    000002c9: 	je	.Ltmp3137 # Offset: 713
    000002cb: 	movq	%rdx, %rcx
    000002ce: 	movq	-0xfb58(%rbp), %rbx
    000002d5: 	shrq	%rcx
    000002d8: 	shlq	$0x4, %rcx
    000002dc: 	addq	%r13, %rcx
.Ltmp3138:
    000002df: 	movups	%xmm0, (%rax)
    000002e2: 	addq	$0x10, %rax
    000002e6: 	cmpq	%rax, %rcx
    000002e9: 	jne	.Ltmp3138 # Offset: 745
    000002eb: 	movq	%rdx, %rcx
    000002ee: 	movq	%rbx, -0xfb58(%rbp)
    000002f5: 	andq	$-0x2, %rcx
    000002f9: 	leaq	(%r13,%rcx,8), %rax
    000002fe: 	cmpq	%rdx, %rcx
    00000301: 	je	.Ltmp3136 # Offset: 769
.Ltmp3137:
    00000303: 	movsd	%xmm1, (%rax)
.Ltmp3136:
    00000307: 	leaq	-0xfb00(%rbp), %rax
    0000030e: 	leaq	-0x3ec0(%rbp), %rbx
    00000315: 	leaq	DATAat0x241e8(%rip), %rdx
    0000031c: 	movq	%rax, %rsi
    0000031f: 	movq	%rbx, %rdi
    00000322: 	movq	%rax, -0xfb60(%rbp)
    00000329: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 809
    0000032e: 	movq	-0xfb58(%rbp), %rsi
    00000335: 	movq	%rbx, %rcx
    00000338: 	pxor	%xmm0, %xmm0
    0000033c: 	movq	-0xfb68(%rbp), %rdi
    00000343: 	leaq	_Z16accumulate_arrayIdET_PKS0_S2_S0_(%rip), %rdx
    0000034a: 	callq	_Z15test_accumulateIdPdPFdPKdS2_dEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 842
    0000034f: 	movq	-0x3ec0(%rbp), %rdi
    00000356: 	leaq	-0x3eb0(%rbp), %r12
    0000035d: 	cmpq	%r12, %rdi
    00000360: 	je	.Ltmp3139 # Offset: 864
    00000362: 	movq	-0x3eb0(%rbp), %rax
    00000369: 	leaq	0x1(%rax), %rsi
    0000036d: 	callq	_ZdlPvm@PLT # Offset: 877
.Ltmp3139:
    00000372: 	movq	-0xfb60(%rbp), %rsi
    00000379: 	leaq	DATAat0x241f5(%rip), %rdx
    00000380: 	movq	%rbx, %rdi
    00000383: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 899
    00000388: 	movq	-0xfb58(%rbp), %rsi
    0000038f: 	movq	%rbx, %rcx
    00000392: 	pxor	%xmm0, %xmm0
    00000396: 	movq	-0xfb68(%rbp), %rdi
    0000039d: 	leaq	_Z17accumulate_array2IdET_PKS0_S2_S0_(%rip), %rdx
    000003a4: 	callq	_Z15test_accumulateIdPdPFdPKdS2_dEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 932
    000003a9: 	movq	-0x3ec0(%rbp), %rdi
    000003b0: 	cmpq	%r12, %rdi
    000003b3: 	je	.Ltmp3140 # Offset: 947
    000003b5: 	movq	-0x3eb0(%rbp), %rax
    000003bc: 	leaq	0x1(%rax), %rsi
    000003c0: 	callq	_ZdlPvm@PLT # Offset: 960
.Ltmp3140:
    000003c5: 	movq	-0xfb60(%rbp), %rsi
    000003cc: 	leaq	DATAat0x24203(%rip), %rdx
    000003d3: 	movq	%rbx, %rdi
    000003d6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 982
    000003db: 	movq	-0xfb58(%rbp), %rsi
    000003e2: 	movq	%rbx, %rcx
    000003e5: 	pxor	%xmm0, %xmm0
    000003e9: 	movq	-0xfb68(%rbp), %rdi
    000003f0: 	leaq	_Z17accumulate_array3IdET_PKS0_S2_S0_(%rip), %rdx
    000003f7: 	callq	_Z15test_accumulateIdPdPFdPKdS2_dEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1015
    000003fc: 	movq	-0x3ec0(%rbp), %rdi
    00000403: 	cmpq	%r12, %rdi
    00000406: 	je	.Ltmp3141 # Offset: 1030
    00000408: 	movq	-0x3eb0(%rbp), %rax
    0000040f: 	leaq	0x1(%rax), %rsi
    00000413: 	callq	_ZdlPvm@PLT # Offset: 1043
.Ltmp3141:
    00000418: 	movq	-0xfb60(%rbp), %rsi
    0000041f: 	leaq	DATAat0x24211(%rip), %rdx
    00000426: 	movq	%rbx, %rdi
    00000429: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1065
    0000042e: 	movq	-0xfb58(%rbp), %rsi
    00000435: 	movq	%rbx, %rcx
    00000438: 	pxor	%xmm0, %xmm0
    0000043c: 	movq	-0xfb68(%rbp), %rdi
    00000443: 	leaq	_Z17accumulate_array4IdET_PKS0_S2_S0_(%rip), %rdx
    0000044a: 	callq	_Z15test_accumulateIdPdPFdPKdS2_dEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1098
    0000044f: 	movq	-0x3ec0(%rbp), %rdi
    00000456: 	cmpq	%r12, %rdi
    00000459: 	je	.Ltmp3142 # Offset: 1113
    0000045b: 	movq	-0x3eb0(%rbp), %rax
    00000462: 	leaq	0x1(%rax), %rsi
    00000466: 	callq	_ZdlPvm@PLT # Offset: 1126
.Ltmp3142:
    0000046b: 	movq	-0xfb60(%rbp), %rsi
    00000472: 	leaq	DATAat0x2421f(%rip), %rdx
    00000479: 	movq	%rbx, %rdi
    0000047c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1148
    00000481: 	movq	-0xfb58(%rbp), %rsi
    00000488: 	movq	%rbx, %rcx
    0000048b: 	pxor	%xmm0, %xmm0
    0000048f: 	movq	-0xfb68(%rbp), %rdi
    00000496: 	leaq	_Z14accumulate_ptrIdET_PKS0_S2_S0_(%rip), %rdx
    0000049d: 	callq	_Z15test_accumulateIdPdPFdPKdS2_dEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1181
    000004a2: 	movq	-0x3ec0(%rbp), %rdi
    000004a9: 	cmpq	%r12, %rdi
    000004ac: 	je	.Ltmp3143 # Offset: 1196
    000004ae: 	movq	-0x3eb0(%rbp), %rax
    000004b5: 	leaq	0x1(%rax), %rsi
    000004b9: 	callq	_ZdlPvm@PLT # Offset: 1209
.Ltmp3143:
    000004be: 	movq	-0xfb60(%rbp), %rsi
    000004c5: 	leaq	DATAat0x2422e(%rip), %rdx
    000004cc: 	movq	%rbx, %rdi
    000004cf: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1231
    000004d4: 	movq	-0xfb58(%rbp), %rsi
    000004db: 	movq	%rbx, %rcx
    000004de: 	pxor	%xmm0, %xmm0
    000004e2: 	movq	-0xfb68(%rbp), %rdi
    000004e9: 	leaq	_Z15accumulate_ptr2IdET_PKS0_S2_S0_(%rip), %rdx
    000004f0: 	callq	_Z15test_accumulateIdPdPFdPKdS2_dEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1264
    000004f5: 	movq	-0x3ec0(%rbp), %rdi
    000004fc: 	cmpq	%r12, %rdi
    000004ff: 	je	.Ltmp3144 # Offset: 1279
    00000501: 	movq	-0x3eb0(%rbp), %rax
    00000508: 	leaq	0x1(%rax), %rsi
    0000050c: 	callq	_ZdlPvm@PLT # Offset: 1292
.Ltmp3144:
    00000511: 	movq	-0xfb60(%rbp), %rsi
    00000518: 	leaq	DATAat0x2423e(%rip), %rdx
    0000051f: 	movq	%rbx, %rdi
    00000522: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1314
    00000527: 	movq	-0xfb58(%rbp), %rsi
    0000052e: 	movq	%rbx, %rcx
    00000531: 	pxor	%xmm0, %xmm0
    00000535: 	movq	-0xfb68(%rbp), %rdi
    0000053c: 	leaq	_Z15accumulate_ptr3IdET_PKS0_S2_S0_(%rip), %rdx
    00000543: 	callq	_Z15test_accumulateIdPdPFdPKdS2_dEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1347
    00000548: 	movq	-0x3ec0(%rbp), %rdi
    0000054f: 	cmpq	%r12, %rdi
    00000552: 	je	.Ltmp3145 # Offset: 1362
    00000554: 	movq	-0x3eb0(%rbp), %rax
    0000055b: 	leaq	0x1(%rax), %rsi
    0000055f: 	callq	_ZdlPvm@PLT # Offset: 1375
.Ltmp3145:
    00000564: 	movq	-0xfb60(%rbp), %rsi
    0000056b: 	leaq	DATAat0x2424e(%rip), %rdx
    00000572: 	movq	%rbx, %rdi
    00000575: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1397
    0000057a: 	movq	-0xfb58(%rbp), %rsi
    00000581: 	movq	%rbx, %rcx
    00000584: 	pxor	%xmm0, %xmm0
    00000588: 	movq	-0xfb68(%rbp), %rdi
    0000058f: 	leaq	_Z15accumulate_ptr4IdET_PKS0_S2_S0_(%rip), %rdx
    00000596: 	callq	_Z15test_accumulateIdPdPFdPKdS2_dEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1430
    0000059b: 	movq	-0x3ec0(%rbp), %rdi
    000005a2: 	cmpq	%r12, %rdi
    000005a5: 	je	.Ltmp3146 # Offset: 1445
    000005a7: 	movq	-0x3eb0(%rbp), %rax
    000005ae: 	leaq	0x1(%rax), %rsi
    000005b2: 	callq	_ZdlPvm@PLT # Offset: 1458
.Ltmp3146:
    000005b7: 	movq	-0xfb60(%rbp), %rsi
    000005be: 	leaq	DATAat0x2425e(%rip), %rdx
    000005c5: 	movq	%rbx, %rdi
    000005c8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1480
    000005cd: 	movq	-0xfb58(%rbp), %rsi
    000005d4: 	movq	%rbx, %rcx
    000005d7: 	pxor	%xmm0, %xmm0
    000005db: 	movq	-0xfb68(%rbp), %rdi
    000005e2: 	leaq	_Z15accumulate_ptr5IdET_PKS0_S2_S0_(%rip), %rdx
    000005e9: 	callq	_Z15test_accumulateIdPdPFdPKdS2_dEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1513
    000005ee: 	movq	-0x3ec0(%rbp), %rdi
    000005f5: 	cmpq	%r12, %rdi
    000005f8: 	je	.Ltmp3147 # Offset: 1528
    000005fa: 	movq	-0x3eb0(%rbp), %rax
    00000601: 	leaq	0x1(%rax), %rsi
    00000605: 	callq	_ZdlPvm@PLT # Offset: 1541
.Ltmp3147:
    0000060a: 	movq	-0xfb60(%rbp), %rsi
    00000611: 	leaq	DATAat0x2426e(%rip), %rdx
    00000618: 	movq	%rbx, %rdi
    0000061b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1563
    00000620: 	movq	-0xfb58(%rbp), %rsi
    00000627: 	movq	%rbx, %rcx
    0000062a: 	pxor	%xmm0, %xmm0
    0000062e: 	movq	-0xfb68(%rbp), %rdi
    00000635: 	leaq	_Z15accumulate_ptr6IdET_PKS0_S2_S0_(%rip), %rdx
    0000063c: 	callq	_Z15test_accumulateIdPdPFdPKdS2_dEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1596
    00000641: 	movq	-0x3ec0(%rbp), %rdi
    00000648: 	cmpq	%r12, %rdi
    0000064b: 	je	.Ltmp3148 # Offset: 1611
    0000064d: 	movq	-0x3eb0(%rbp), %rax
    00000654: 	leaq	0x1(%rax), %rsi
    00000658: 	callq	_ZdlPvm@PLT # Offset: 1624
.Ltmp3148:
    0000065d: 	movq	-0xfb60(%rbp), %rsi
    00000664: 	leaq	DATAat0x2427e(%rip), %rdx
    0000066b: 	movq	%rbx, %rdi
    0000066e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1646
    00000673: 	movq	-0xfb58(%rbp), %rsi
    0000067a: 	movq	%rbx, %rcx
    0000067d: 	pxor	%xmm0, %xmm0
    00000681: 	movq	-0xfb68(%rbp), %rdi
    00000688: 	leaq	_Z15accumulate_ptr7IdET_PKS0_S2_S0_(%rip), %rdx
    0000068f: 	callq	_Z15test_accumulateIdPdPFdPKdS2_dEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1679
    00000694: 	movq	-0x3ec0(%rbp), %rdi
    0000069b: 	cmpq	%r12, %rdi
    0000069e: 	je	.Ltmp3149 # Offset: 1694
    000006a0: 	movq	-0x3eb0(%rbp), %rax
    000006a7: 	leaq	0x1(%rax), %rsi
    000006ab: 	callq	_ZdlPvm@PLT # Offset: 1707
.Ltmp3149:
    000006b0: 	movq	-0xfb60(%rbp), %rsi
    000006b7: 	leaq	DATAat0x2428e(%rip), %rdx
    000006be: 	movq	%rbx, %rdi
    000006c1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1729
    000006c6: 	movq	-0xfb58(%rbp), %rsi
    000006cd: 	movq	%rbx, %rcx
    000006d0: 	pxor	%xmm0, %xmm0
    000006d4: 	movq	-0xfb68(%rbp), %rdi
    000006db: 	leaq	_Z15accumulate_ptr8IdET_PKS0_S2_S0_(%rip), %rdx
    000006e2: 	callq	_Z15test_accumulateIdPdPFdPKdS2_dEEvT0_S5_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1762
    000006e7: 	movq	-0x3ec0(%rbp), %rdi
    000006ee: 	cmpq	%r12, %rdi
    000006f1: 	je	.Ltmp3150 # Offset: 1777
    000006f3: 	movq	-0x3eb0(%rbp), %rax
    000006fa: 	leaq	0x1(%rax), %rsi
    000006fe: 	callq	_ZdlPvm@PLT # Offset: 1790
.Ltmp3150:
    00000703: 	movq	-0xfb60(%rbp), %rsi
    0000070a: 	leaq	DATAat0x2429e(%rip), %rdx
    00000711: 	movq	%rbx, %rdi
    00000714: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1812
    00000719: 	movq	-0xfb58(%rbp), %rsi
    00000720: 	movq	-0xfb68(%rbp), %rdi
    00000727: 	movq	%rbx, %rdx
    0000072a: 	callq	"_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.7/1" # Offset: 1834
    0000072f: 	movq	-0x3ec0(%rbp), %rdi
    00000736: 	cmpq	%r12, %rdi
    00000739: 	je	.Ltmp3151 # Offset: 1849
    0000073b: 	movq	-0x3eb0(%rbp), %rax
    00000742: 	leaq	0x1(%rax), %rsi
    00000746: 	callq	_ZdlPvm@PLT # Offset: 1862
.Ltmp3151:
    0000074b: 	movq	-0xfb60(%rbp), %rsi
    00000752: 	leaq	DATAat0x242ae(%rip), %rdx
    00000759: 	movq	%rbx, %rdi
    0000075c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1884
    00000761: 	movq	-0xfb68(%rbp), %rsi
    00000768: 	movq	-0xfb80(%rbp), %rdi
    0000076f: 	movq	%rbx, %rdx
    00000772: 	callq	"_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.7/1" # Offset: 1906
    00000777: 	movq	-0x3ec0(%rbp), %rdi
    0000077e: 	cmpq	%r12, %rdi
    00000781: 	je	.Ltmp3152 # Offset: 1921
    00000783: 	movq	-0x3eb0(%rbp), %rax
    0000078a: 	leaq	0x1(%rax), %rsi
    0000078e: 	callq	_ZdlPvm@PLT # Offset: 1934
.Ltmp3152:
    00000793: 	movq	-0xfb60(%rbp), %rsi
    0000079a: 	leaq	DATAat0x242c9(%rip), %rdx
    000007a1: 	movq	%rbx, %rdi
    000007a4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1956
    000007a9: 	movq	-0xfb70(%rbp), %rsi
    000007b0: 	movq	%rbx, %rcx
    000007b3: 	pxor	%xmm0, %xmm0
    000007b7: 	movq	%r13, %rdi
    000007ba: 	leaq	_Z19accumulate_iteratorIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_(%rip), %rdx
    000007c1: 	callq	_Z15test_accumulateIdN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFdS6_S6_dEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1985
    000007c6: 	movq	-0x3ec0(%rbp), %rdi
    000007cd: 	cmpq	%r12, %rdi
    000007d0: 	je	.Ltmp3153 # Offset: 2000
    000007d2: 	movq	-0x3eb0(%rbp), %rax
    000007d9: 	leaq	0x1(%rax), %rsi
    000007dd: 	callq	_ZdlPvm@PLT # Offset: 2013
.Ltmp3153:
    000007e2: 	movq	-0xfb60(%rbp), %rsi
    000007e9: 	leaq	DATAat0x242e5(%rip), %rdx
    000007f0: 	movq	%rbx, %rdi
    000007f3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2035
    000007f8: 	movq	-0xfb58(%rbp), %rsi
    000007ff: 	movq	-0xfb68(%rbp), %rdi
    00000806: 	movq	%rbx, %rdx
    00000809: 	callq	"_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.6/1" # Offset: 2057
    0000080e: 	movq	-0x3ec0(%rbp), %rdi
    00000815: 	cmpq	%r12, %rdi
    00000818: 	je	.Ltmp3154 # Offset: 2072
    0000081a: 	movq	-0x3eb0(%rbp), %rax
    00000821: 	leaq	0x1(%rax), %rsi
    00000825: 	callq	_ZdlPvm@PLT # Offset: 2085
.Ltmp3154:
    0000082a: 	movq	-0xfb60(%rbp), %rsi
    00000831: 	leaq	DATAat0x242f6(%rip), %rdx
    00000838: 	movq	%rbx, %rdi
    0000083b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2107
    00000840: 	movq	-0xfb68(%rbp), %rsi
    00000847: 	movq	-0xfb80(%rbp), %rdi
    0000084e: 	movq	%rbx, %rdx
    00000851: 	callq	"_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.6/1" # Offset: 2129
    00000856: 	movq	-0x3ec0(%rbp), %rdi
    0000085d: 	cmpq	%r12, %rdi
    00000860: 	je	.Ltmp3155 # Offset: 2144
    00000862: 	movq	-0x3eb0(%rbp), %rax
    00000869: 	leaq	0x1(%rax), %rsi
    0000086d: 	callq	_ZdlPvm@PLT # Offset: 2157
.Ltmp3155:
    00000872: 	movq	-0xfb60(%rbp), %rsi
    00000879: 	leaq	DATAat0x24312(%rip), %rdx
    00000880: 	movq	%rbx, %rdi
    00000883: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2179
    00000888: 	movq	-0xfb70(%rbp), %rsi
    0000088f: 	movq	%rbx, %rcx
    00000892: 	pxor	%xmm0, %xmm0
    00000896: 	movq	%r13, %rdi
    00000899: 	leaq	_Z20accumulate_iterator2IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_(%rip), %rdx
    000008a0: 	callq	_Z15test_accumulateIdN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFdS6_S6_dEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2208
    000008a5: 	movq	-0x3ec0(%rbp), %rdi
    000008ac: 	cmpq	%r12, %rdi
    000008af: 	je	.Ltmp3156 # Offset: 2223
    000008b1: 	movq	-0x3eb0(%rbp), %rax
    000008b8: 	leaq	0x1(%rax), %rsi
    000008bc: 	callq	_ZdlPvm@PLT # Offset: 2236
.Ltmp3156:
    000008c1: 	movq	-0xfb60(%rbp), %rsi
    000008c8: 	leaq	DATAat0x2432f(%rip), %rdx
    000008cf: 	movq	%rbx, %rdi
    000008d2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2258
    000008d7: 	movq	-0xfb58(%rbp), %rsi
    000008de: 	movq	-0xfb68(%rbp), %rdi
    000008e5: 	movq	%rbx, %rdx
    000008e8: 	callq	"_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.5/1" # Offset: 2280
    000008ed: 	movq	-0x3ec0(%rbp), %rdi
    000008f4: 	cmpq	%r12, %rdi
    000008f7: 	je	.Ltmp3157 # Offset: 2295
    000008f9: 	movq	-0x3eb0(%rbp), %rax
    00000900: 	leaq	0x1(%rax), %rsi
    00000904: 	callq	_ZdlPvm@PLT # Offset: 2308
.Ltmp3157:
    00000909: 	movq	-0xfb60(%rbp), %rsi
    00000910: 	leaq	DATAat0x24340(%rip), %rdx
    00000917: 	movq	%rbx, %rdi
    0000091a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2330
    0000091f: 	movq	-0xfb68(%rbp), %rsi
    00000926: 	movq	-0xfb80(%rbp), %rdi
    0000092d: 	movq	%rbx, %rdx
    00000930: 	callq	"_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.5/1" # Offset: 2352
    00000935: 	movq	-0x3ec0(%rbp), %rdi
    0000093c: 	cmpq	%r12, %rdi
    0000093f: 	je	.Ltmp3158 # Offset: 2367
    00000941: 	movq	-0x3eb0(%rbp), %rax
    00000948: 	leaq	0x1(%rax), %rsi
    0000094c: 	callq	_ZdlPvm@PLT # Offset: 2380
.Ltmp3158:
    00000951: 	movq	-0xfb60(%rbp), %rsi
    00000958: 	leaq	DATAat0x2435c(%rip), %rdx
    0000095f: 	movq	%rbx, %rdi
    00000962: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2402
    00000967: 	movq	-0xfb70(%rbp), %rsi
    0000096e: 	movq	%rbx, %rcx
    00000971: 	pxor	%xmm0, %xmm0
    00000975: 	movq	%r13, %rdi
    00000978: 	leaq	_Z20accumulate_iterator3IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_(%rip), %rdx
    0000097f: 	callq	_Z15test_accumulateIdN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFdS6_S6_dEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2431
    00000984: 	movq	-0x3ec0(%rbp), %rdi
    0000098b: 	cmpq	%r12, %rdi
    0000098e: 	je	.Ltmp3159 # Offset: 2446
    00000990: 	movq	-0x3eb0(%rbp), %rax
    00000997: 	leaq	0x1(%rax), %rsi
    0000099b: 	callq	_ZdlPvm@PLT # Offset: 2459
.Ltmp3159:
    000009a0: 	movq	-0xfb60(%rbp), %rsi
    000009a7: 	leaq	DATAat0x24379(%rip), %rdx
    000009ae: 	movq	%rbx, %rdi
    000009b1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2481
    000009b6: 	movq	-0xfb58(%rbp), %rsi
    000009bd: 	movq	-0xfb68(%rbp), %rdi
    000009c4: 	movq	%rbx, %rdx
    000009c7: 	callq	"_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.4/1" # Offset: 2503
    000009cc: 	movq	-0x3ec0(%rbp), %rdi
    000009d3: 	cmpq	%r12, %rdi
    000009d6: 	je	.Ltmp3160 # Offset: 2518
    000009d8: 	movq	-0x3eb0(%rbp), %rax
    000009df: 	leaq	0x1(%rax), %rsi
    000009e3: 	callq	_ZdlPvm@PLT # Offset: 2531
.Ltmp3160:
    000009e8: 	movq	-0xfb60(%rbp), %rsi
    000009ef: 	leaq	DATAat0x2438a(%rip), %rdx
    000009f6: 	movq	%rbx, %rdi
    000009f9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2553
    000009fe: 	movq	-0xfb68(%rbp), %rsi
    00000a05: 	movq	-0xfb80(%rbp), %rdi
    00000a0c: 	movq	%rbx, %rdx
    00000a0f: 	callq	"_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.4/1" # Offset: 2575
    00000a14: 	movq	-0x3ec0(%rbp), %rdi
    00000a1b: 	cmpq	%r12, %rdi
    00000a1e: 	je	.Ltmp3161 # Offset: 2590
    00000a20: 	movq	-0x3eb0(%rbp), %rax
    00000a27: 	leaq	0x1(%rax), %rsi
    00000a2b: 	callq	_ZdlPvm@PLT # Offset: 2603
.Ltmp3161:
    00000a30: 	movq	-0xfb60(%rbp), %rsi
    00000a37: 	leaq	DATAat0x243a6(%rip), %rdx
    00000a3e: 	movq	%rbx, %rdi
    00000a41: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2625
    00000a46: 	movq	-0xfb70(%rbp), %rsi
    00000a4d: 	movq	%rbx, %rcx
    00000a50: 	pxor	%xmm0, %xmm0
    00000a54: 	movq	%r13, %rdi
    00000a57: 	leaq	_Z20accumulate_iterator4IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_(%rip), %rdx
    00000a5e: 	callq	_Z15test_accumulateIdN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFdS6_S6_dEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2654
    00000a63: 	movq	-0x3ec0(%rbp), %rdi
    00000a6a: 	cmpq	%r12, %rdi
    00000a6d: 	je	.Ltmp3162 # Offset: 2669
    00000a6f: 	movq	-0x3eb0(%rbp), %rax
    00000a76: 	leaq	0x1(%rax), %rsi
    00000a7a: 	callq	_ZdlPvm@PLT # Offset: 2682
.Ltmp3162:
    00000a7f: 	movq	-0xfb60(%rbp), %rsi
    00000a86: 	leaq	DATAat0x243c3(%rip), %rdx
    00000a8d: 	movq	%rbx, %rdi
    00000a90: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2704
    00000a95: 	movq	-0xfb58(%rbp), %rsi
    00000a9c: 	movq	-0xfb68(%rbp), %rdi
    00000aa3: 	movq	%rbx, %rdx
    00000aa6: 	callq	"_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.3/1" # Offset: 2726
    00000aab: 	movq	-0x3ec0(%rbp), %rdi
    00000ab2: 	cmpq	%r12, %rdi
    00000ab5: 	je	.Ltmp3163 # Offset: 2741
    00000ab7: 	movq	-0x3eb0(%rbp), %rax
    00000abe: 	leaq	0x1(%rax), %rsi
    00000ac2: 	callq	_ZdlPvm@PLT # Offset: 2754
.Ltmp3163:
    00000ac7: 	movq	-0xfb60(%rbp), %rsi
    00000ace: 	leaq	DATAat0x243d4(%rip), %rdx
    00000ad5: 	movq	%rbx, %rdi
    00000ad8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2776
    00000add: 	movq	-0xfb68(%rbp), %rsi
    00000ae4: 	movq	-0xfb80(%rbp), %rdi
    00000aeb: 	movq	%rbx, %rdx
    00000aee: 	callq	"_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.3/1" # Offset: 2798
    00000af3: 	movq	-0x3ec0(%rbp), %rdi
    00000afa: 	cmpq	%r12, %rdi
    00000afd: 	je	.Ltmp3164 # Offset: 2813
    00000aff: 	movq	-0x3eb0(%rbp), %rax
    00000b06: 	leaq	0x1(%rax), %rsi
    00000b0a: 	callq	_ZdlPvm@PLT # Offset: 2826
.Ltmp3164:
    00000b0f: 	movq	-0xfb60(%rbp), %rsi
    00000b16: 	leaq	DATAat0x243f0(%rip), %rdx
    00000b1d: 	movq	%rbx, %rdi
    00000b20: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2848
    00000b25: 	movq	-0xfb70(%rbp), %rsi
    00000b2c: 	movq	%rbx, %rcx
    00000b2f: 	pxor	%xmm0, %xmm0
    00000b33: 	movq	%r13, %rdi
    00000b36: 	leaq	_Z20accumulate_iterator5IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_(%rip), %rdx
    00000b3d: 	callq	_Z15test_accumulateIdN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFdS6_S6_dEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2877
    00000b42: 	movq	-0x3ec0(%rbp), %rdi
    00000b49: 	cmpq	%r12, %rdi
    00000b4c: 	je	.Ltmp3165 # Offset: 2892
    00000b4e: 	movq	-0x3eb0(%rbp), %rax
    00000b55: 	leaq	0x1(%rax), %rsi
    00000b59: 	callq	_ZdlPvm@PLT # Offset: 2905
.Ltmp3165:
    00000b5e: 	movq	-0xfb60(%rbp), %rsi
    00000b65: 	leaq	DATAat0x2440d(%rip), %rdx
    00000b6c: 	movq	%rbx, %rdi
    00000b6f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2927
    00000b74: 	movq	-0xfb58(%rbp), %rsi
    00000b7b: 	movq	-0xfb68(%rbp), %rdi
    00000b82: 	movq	%rbx, %rdx
    00000b85: 	callq	"_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1" # Offset: 2949
    00000b8a: 	movq	-0x3ec0(%rbp), %rdi
    00000b91: 	cmpq	%r12, %rdi
    00000b94: 	je	.Ltmp3166 # Offset: 2964
    00000b96: 	movq	-0x3eb0(%rbp), %rax
    00000b9d: 	leaq	0x1(%rax), %rsi
    00000ba1: 	callq	_ZdlPvm@PLT # Offset: 2977
.Ltmp3166:
    00000ba6: 	movq	-0xfb60(%rbp), %rsi
    00000bad: 	leaq	DATAat0x2441e(%rip), %rdx
    00000bb4: 	movq	%rbx, %rdi
    00000bb7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2999
    00000bbc: 	movq	-0xfb68(%rbp), %rsi
    00000bc3: 	movq	-0xfb80(%rbp), %rdi
    00000bca: 	movq	%rbx, %rdx
    00000bcd: 	callq	"_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1" # Offset: 3021
    00000bd2: 	movq	-0x3ec0(%rbp), %rdi
    00000bd9: 	cmpq	%r12, %rdi
    00000bdc: 	je	.Ltmp3167 # Offset: 3036
    00000bde: 	movq	-0x3eb0(%rbp), %rax
    00000be5: 	leaq	0x1(%rax), %rsi
    00000be9: 	callq	_ZdlPvm@PLT # Offset: 3049
.Ltmp3167:
    00000bee: 	movq	-0xfb60(%rbp), %rsi
    00000bf5: 	leaq	DATAat0x2443a(%rip), %rdx
    00000bfc: 	movq	%rbx, %rdi
    00000bff: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3071
    00000c04: 	movq	-0xfb70(%rbp), %rsi
    00000c0b: 	movq	%rbx, %rcx
    00000c0e: 	pxor	%xmm0, %xmm0
    00000c12: 	movq	%r13, %rdi
    00000c15: 	leaq	_Z20accumulate_iterator6IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_(%rip), %rdx
    00000c1c: 	callq	_Z15test_accumulateIdN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFdS6_S6_dEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3100
    00000c21: 	movq	-0x3ec0(%rbp), %rdi
    00000c28: 	cmpq	%r12, %rdi
    00000c2b: 	je	.Ltmp3168 # Offset: 3115
    00000c2d: 	movq	-0x3eb0(%rbp), %rax
    00000c34: 	leaq	0x1(%rax), %rsi
    00000c38: 	callq	_ZdlPvm@PLT # Offset: 3128
.Ltmp3168:
    00000c3d: 	movq	-0xfb60(%rbp), %rsi
    00000c44: 	leaq	DATAat0x24457(%rip), %rdx
    00000c4b: 	movq	%rbx, %rdi
    00000c4e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3150
    00000c53: 	movq	-0xfb58(%rbp), %rsi
    00000c5a: 	movq	-0xfb68(%rbp), %rdi
    00000c61: 	movq	%rbx, %rdx
    00000c64: 	callq	"_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1" # Offset: 3172
    00000c69: 	movq	-0x3ec0(%rbp), %rdi
    00000c70: 	cmpq	%r12, %rdi
    00000c73: 	je	.Ltmp3169 # Offset: 3187
    00000c75: 	movq	-0x3eb0(%rbp), %rax
    00000c7c: 	leaq	0x1(%rax), %rsi
    00000c80: 	callq	_ZdlPvm@PLT # Offset: 3200
.Ltmp3169:
    00000c85: 	movq	-0xfb60(%rbp), %rsi
    00000c8c: 	leaq	DATAat0x24468(%rip), %rdx
    00000c93: 	movq	%rbx, %rdi
    00000c96: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3222
    00000c9b: 	movq	-0xfb68(%rbp), %rsi
    00000ca2: 	movq	-0xfb80(%rbp), %rdi
    00000ca9: 	movq	%rbx, %rdx
    00000cac: 	callq	"_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1" # Offset: 3244
    00000cb1: 	movq	-0x3ec0(%rbp), %rdi
    00000cb8: 	cmpq	%r12, %rdi
    00000cbb: 	je	.Ltmp3170 # Offset: 3259
    00000cbd: 	movq	-0x3eb0(%rbp), %rax
    00000cc4: 	leaq	0x1(%rax), %rsi
    00000cc8: 	callq	_ZdlPvm@PLT # Offset: 3272
.Ltmp3170:
    00000ccd: 	movq	-0xfb60(%rbp), %rsi
    00000cd4: 	leaq	DATAat0x24484(%rip), %rdx
    00000cdb: 	movq	%rbx, %rdi
    00000cde: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3294
    00000ce3: 	movq	-0xfb70(%rbp), %rsi
    00000cea: 	movq	%rbx, %rcx
    00000ced: 	pxor	%xmm0, %xmm0
    00000cf1: 	movq	%r13, %rdi
    00000cf4: 	leaq	_Z20accumulate_iterator7IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_(%rip), %rdx
    00000cfb: 	callq	_Z15test_accumulateIdN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFdS6_S6_dEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3323
    00000d00: 	movq	-0x3ec0(%rbp), %rdi
    00000d07: 	cmpq	%r12, %rdi
    00000d0a: 	je	.Ltmp3171 # Offset: 3338
    00000d0c: 	movq	-0x3eb0(%rbp), %rax
    00000d13: 	leaq	0x1(%rax), %rsi
    00000d17: 	callq	_ZdlPvm@PLT # Offset: 3351
.Ltmp3171:
    00000d1c: 	movq	-0xfb60(%rbp), %rsi
    00000d23: 	leaq	DATAat0x244a1(%rip), %rdx
    00000d2a: 	movq	%rbx, %rdi
    00000d2d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3373
    00000d32: 	movq	-0xfb58(%rbp), %rsi
    00000d39: 	movq	-0xfb68(%rbp), %rdi
    00000d40: 	movq	%rbx, %rdx
    00000d43: 	callq	"_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3395
    00000d48: 	movq	-0x3ec0(%rbp), %rdi
    00000d4f: 	cmpq	%r12, %rdi
    00000d52: 	je	.Ltmp3172 # Offset: 3410
    00000d54: 	movq	-0x3eb0(%rbp), %rax
    00000d5b: 	leaq	0x1(%rax), %rsi
    00000d5f: 	callq	_ZdlPvm@PLT # Offset: 3423
.Ltmp3172:
    00000d64: 	movq	-0xfb60(%rbp), %rsi
    00000d6b: 	leaq	DATAat0x244b2(%rip), %rdx
    00000d72: 	movq	%rbx, %rdi
    00000d75: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3445
    00000d7a: 	movq	-0xfb68(%rbp), %rsi
    00000d81: 	movq	-0xfb80(%rbp), %rdi
    00000d88: 	movq	%rbx, %rdx
    00000d8b: 	callq	"_Z15test_accumulateIdPdPFdS0_S0_dEEvT0_S3_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3467
    00000d90: 	movq	-0x3ec0(%rbp), %rdi
    00000d97: 	cmpq	%r12, %rdi
    00000d9a: 	je	.Ltmp3173 # Offset: 3482
    00000d9c: 	movq	-0x3eb0(%rbp), %rax
    00000da3: 	leaq	0x1(%rax), %rsi
    00000da7: 	callq	_ZdlPvm@PLT # Offset: 3495
.Ltmp3173:
    00000dac: 	movq	-0xfb60(%rbp), %rsi
    00000db3: 	leaq	DATAat0x244ce(%rip), %rdx
    00000dba: 	movq	%rbx, %rdi
    00000dbd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3517
    00000dc2: 	movq	-0xfb70(%rbp), %rsi
    00000dc9: 	movq	%rbx, %rcx
    00000dcc: 	pxor	%xmm0, %xmm0
    00000dd0: 	movq	%r13, %rdi
    00000dd3: 	leaq	_Z20accumulate_iterator8IN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdET0_T_S8_S7_(%rip), %rdx
    00000dda: 	callq	_Z15test_accumulateIdN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEPFdS6_S6_dEEvT0_S9_T_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3546
    00000ddf: 	movq	-0x3ec0(%rbp), %rdi
    00000de6: 	cmpq	%r12, %rdi
    00000de9: 	je	.Ltmp3174 # Offset: 3561
    00000deb: 	movq	-0x3eb0(%rbp), %rax
    00000df2: 	leaq	0x1(%rax), %rsi
    00000df6: 	callq	_ZdlPvm@PLT # Offset: 3574
.Ltmp3174:
    00000dfb: 	movq	-0xfb60(%rbp), %rsi
    00000e02: 	leaq	-0xfae0(%rbp), %rdi
    00000e09: 	leaq	DATAat0x24710(%rip), %rdx
    00000e10: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3600
    00000e15: 	movl	iterations(%rip), %edx
    00000e1b: 	xorl	%r8d, %r8d
    00000e1e: 	xorl	%ecx, %ecx
    00000e20: 	movl	$0x7d0, %esi
    00000e25: 	movq	-0xfae0(%rbp), %rdi
    00000e2c: 	callq	_Z9summarizePKciiii # Offset: 3628
    00000e31: 	movslq	iterations(%rip), %rax
    00000e38: 	movl	$0x7a12000, %edi
    00000e3d: 	movq	%rax, %rcx
    00000e40: 	movl	%eax, -0xfbcc(%rbp)
    00000e46: 	imulq	$0x2572fb07, %rax, %rax
    00000e4d: 	sarl	$0x1f, %ecx
    00000e50: 	sarq	$0x2c, %rax
    00000e54: 	subl	%ecx, %eax
    00000e56: 	movl	%eax, iterations(%rip)
    00000e5c: 	callq	_Znam@PLT # Offset: 3676
    00000e61: 	movsd	init_value(%rip), %xmm0
    00000e69: 	movq	-0xfb58(%rbp), %rdi
    00000e70: 	movq	%rax, %r14
    00000e73: 	leaq	0x7a12000(%rax), %rdx
    00000e7a: 	unpcklpd	%xmm0, %xmm0
.Ltmp3175:
    00000e7e: 	movups	%xmm0, (%rax)
    00000e81: 	addq	$0x10, %rax
    00000e85: 	cmpq	%rax, %rdx
    00000e88: 	jne	.Ltmp3175 # Offset: 3720
    00000e8a: 	movq	-0xfb60(%rbp), %rsi
    00000e91: 	movq	%rdi, -0xfb58(%rbp)
    00000e98: 	leaq	DATAat0x244eb(%rip), %rdx
    00000e9f: 	movq	%rbx, %rdi
    00000ea2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3746
    00000ea7: 	movq	%rbx, %r8
    00000eaa: 	pxor	%xmm0, %xmm0
    00000eae: 	movl	$0xfa0, %edx
    00000eb3: 	movq	%r14, %rdi
    00000eb6: 	leaq	_Z19accumulate_array2D1IdET_PKS0_mmS0_(%rip), %rcx
    00000ebd: 	movl	$0xfa0, %esi
    00000ec2: 	callq	_Z17test_accumulate2DIdPdPFdPKdmmdEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3778
    00000ec7: 	movq	-0x3ec0(%rbp), %rdi
    00000ece: 	cmpq	%r12, %rdi
    00000ed1: 	je	.Ltmp3176 # Offset: 3793
    00000ed3: 	movq	-0x3eb0(%rbp), %rax
    00000eda: 	leaq	0x1(%rax), %rsi
    00000ede: 	callq	_ZdlPvm@PLT # Offset: 3806
.Ltmp3176:
    00000ee3: 	movq	-0xfb60(%rbp), %rsi
    00000eea: 	leaq	DATAat0x244fb(%rip), %rdx
    00000ef1: 	movq	%rbx, %rdi
    00000ef4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3828
    00000ef9: 	movq	%rbx, %r8
    00000efc: 	pxor	%xmm0, %xmm0
    00000f00: 	movl	$0xfa0, %edx
    00000f05: 	movq	%r14, %rdi
    00000f08: 	leaq	_Z19accumulate_array2D2IdET_PKS0_mmS0_(%rip), %rcx
    00000f0f: 	movl	$0xfa0, %esi
    00000f14: 	callq	_Z17test_accumulate2DIdPdPFdPKdmmdEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3860
    00000f19: 	movq	-0x3ec0(%rbp), %rdi
    00000f20: 	cmpq	%r12, %rdi
    00000f23: 	je	.Ltmp3177 # Offset: 3875
    00000f25: 	movq	-0x3eb0(%rbp), %rax
    00000f2c: 	leaq	0x1(%rax), %rsi
    00000f30: 	callq	_ZdlPvm@PLT # Offset: 3888
.Ltmp3177:
    00000f35: 	movq	-0xfb60(%rbp), %rsi
    00000f3c: 	leaq	DATAat0x2450b(%rip), %rdx
    00000f43: 	movq	%rbx, %rdi
    00000f46: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3910
    00000f4b: 	movq	%rbx, %r8
    00000f4e: 	pxor	%xmm0, %xmm0
    00000f52: 	movl	$0xfa0, %edx
    00000f57: 	movq	%r14, %rdi
    00000f5a: 	leaq	_Z19accumulate_array2D3IdET_PKS0_mmS0_(%rip), %rcx
    00000f61: 	movl	$0xfa0, %esi
    00000f66: 	callq	_Z17test_accumulate2DIdPdPFdPKdmmdEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3942
    00000f6b: 	movq	-0x3ec0(%rbp), %rdi
    00000f72: 	cmpq	%r12, %rdi
    00000f75: 	je	.Ltmp3178 # Offset: 3957
    00000f77: 	movq	-0x3eb0(%rbp), %rax
    00000f7e: 	leaq	0x1(%rax), %rsi
    00000f82: 	callq	_ZdlPvm@PLT # Offset: 3970
.Ltmp3178:
    00000f87: 	movq	-0xfb60(%rbp), %rsi
    00000f8e: 	leaq	DATAat0x2451b(%rip), %rdx
    00000f95: 	movq	%rbx, %rdi
    00000f98: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3992
    00000f9d: 	movq	%rbx, %r8
    00000fa0: 	pxor	%xmm0, %xmm0
    00000fa4: 	movl	$0xfa0, %edx
    00000fa9: 	movq	%r14, %rdi
    00000fac: 	leaq	_Z19accumulate_array2D4IdET_PKS0_mmS0_(%rip), %rcx
    00000fb3: 	movl	$0xfa0, %esi
    00000fb8: 	callq	_Z17test_accumulate2DIdPdPFdPKdmmdEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4024
    00000fbd: 	movq	-0x3ec0(%rbp), %rdi
    00000fc4: 	cmpq	%r12, %rdi
    00000fc7: 	je	.Ltmp3179 # Offset: 4039
    00000fc9: 	movq	-0x3eb0(%rbp), %rax
    00000fd0: 	leaq	0x1(%rax), %rsi
    00000fd4: 	callq	_ZdlPvm@PLT # Offset: 4052
.Ltmp3179:
    00000fd9: 	movq	-0xfb60(%rbp), %rsi
    00000fe0: 	leaq	DATAat0x2452b(%rip), %rdx
    00000fe7: 	movq	%rbx, %rdi
    00000fea: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4074
    00000fef: 	movq	%rbx, %r8
    00000ff2: 	pxor	%xmm0, %xmm0
    00000ff6: 	movl	$0xfa0, %edx
    00000ffb: 	movq	%r14, %rdi
    00000ffe: 	leaq	_Z19accumulate_array2D5IdET_PKS0_mmS0_(%rip), %rcx
    00001005: 	movl	$0xfa0, %esi
    0000100a: 	callq	_Z17test_accumulate2DIdPdPFdPKdmmdEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4106
    0000100f: 	movq	-0x3ec0(%rbp), %rdi
    00001016: 	cmpq	%r12, %rdi
    00001019: 	je	.Ltmp3180 # Offset: 4121
    0000101b: 	movq	-0x3eb0(%rbp), %rax
    00001022: 	leaq	0x1(%rax), %rsi
    00001026: 	callq	_ZdlPvm@PLT # Offset: 4134
.Ltmp3180:
    0000102b: 	movq	-0xfb60(%rbp), %rsi
    00001032: 	leaq	DATAat0x2453b(%rip), %rdx
    00001039: 	movq	%rbx, %rdi
    0000103c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4156
    00001041: 	movq	%rbx, %r8
    00001044: 	pxor	%xmm0, %xmm0
    00001048: 	movl	$0xfa0, %edx
    0000104d: 	movq	%r14, %rdi
    00001050: 	leaq	_Z19accumulate_array2D6IdET_PKS0_mmS0_(%rip), %rcx
    00001057: 	movl	$0xfa0, %esi
    0000105c: 	callq	_Z17test_accumulate2DIdPdPFdPKdmmdEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4188
    00001061: 	movq	-0x3ec0(%rbp), %rdi
    00001068: 	cmpq	%r12, %rdi
    0000106b: 	je	.Ltmp3181 # Offset: 4203
    0000106d: 	movq	-0x3eb0(%rbp), %rax
    00001074: 	leaq	0x1(%rax), %rsi
    00001078: 	callq	_ZdlPvm@PLT # Offset: 4216
.Ltmp3181:
    0000107d: 	movq	-0xfb60(%rbp), %rsi
    00001084: 	leaq	DATAat0x2454b(%rip), %rdx
    0000108b: 	movq	%rbx, %rdi
    0000108e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4238
    00001093: 	movq	%rbx, %r8
    00001096: 	pxor	%xmm0, %xmm0
    0000109a: 	movl	$0xfa0, %edx
    0000109f: 	movq	%r14, %rdi
    000010a2: 	leaq	_Z19accumulate_array2D7IdET_PKS0_mmS0_(%rip), %rcx
    000010a9: 	movl	$0xfa0, %esi
    000010ae: 	callq	_Z17test_accumulate2DIdPdPFdPKdmmdEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4270
    000010b3: 	movq	-0x3ec0(%rbp), %rdi
    000010ba: 	cmpq	%r12, %rdi
    000010bd: 	je	.Ltmp3182 # Offset: 4285
    000010bf: 	movq	-0x3eb0(%rbp), %rax
    000010c6: 	leaq	0x1(%rax), %rsi
    000010ca: 	callq	_ZdlPvm@PLT # Offset: 4298
.Ltmp3182:
    000010cf: 	movq	-0xfb60(%rbp), %rsi
    000010d6: 	leaq	DATAat0x2455b(%rip), %rdx
    000010dd: 	movq	%rbx, %rdi
    000010e0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4320
    000010e5: 	movq	%rbx, %r8
    000010e8: 	pxor	%xmm0, %xmm0
    000010ec: 	movl	$0xfa0, %edx
    000010f1: 	movq	%r14, %rdi
    000010f4: 	leaq	_Z19accumulate_array2D8IdET_PKS0_mmS0_(%rip), %rcx
    000010fb: 	movl	$0xfa0, %esi
    00001100: 	callq	_Z17test_accumulate2DIdPdPFdPKdmmdEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4352
    00001105: 	movq	-0x3ec0(%rbp), %rdi
    0000110c: 	cmpq	%r12, %rdi
    0000110f: 	je	.Ltmp3183 # Offset: 4367
    00001111: 	movq	-0x3eb0(%rbp), %rax
    00001118: 	leaq	0x1(%rax), %rsi
    0000111c: 	callq	_ZdlPvm@PLT # Offset: 4380
.Ltmp3183:
    00001121: 	movq	-0xfb60(%rbp), %rsi
    00001128: 	leaq	DATAat0x2456b(%rip), %rdx
    0000112f: 	movq	%rbx, %rdi
    00001132: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4402
    00001137: 	movq	%rbx, %r8
    0000113a: 	pxor	%xmm0, %xmm0
    0000113e: 	movl	$0xfa0, %edx
    00001143: 	movq	%r14, %rdi
    00001146: 	leaq	_Z19accumulate_array2D9IdET_PKS0_mmS0_(%rip), %rcx
    0000114d: 	movl	$0xfa0, %esi
    00001152: 	callq	_Z17test_accumulate2DIdPdPFdPKdmmdEEvT0_mmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4434
    00001157: 	movq	-0x3ec0(%rbp), %rdi
    0000115e: 	cmpq	%r12, %rdi
    00001161: 	je	.Ltmp3184 # Offset: 4449
    00001163: 	movq	-0x3eb0(%rbp), %rax
    0000116a: 	leaq	0x1(%rax), %rsi
    0000116e: 	callq	_ZdlPvm@PLT # Offset: 4462
.Ltmp3184:
    00001173: 	movq	-0xfb60(%rbp), %rsi
    0000117a: 	leaq	-0xfac0(%rbp), %rdi
    00001181: 	leaq	DATAat0x24730(%rip), %rdx
    00001188: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4488
    0000118d: 	movl	iterations(%rip), %edx
    00001193: 	xorl	%r8d, %r8d
    00001196: 	xorl	%ecx, %ecx
    00001198: 	movl	$0xf42400, %esi
    0000119d: 	movq	-0xfac0(%rbp), %rdi
    000011a4: 	callq	_Z9summarizePKciiii # Offset: 4516
    000011a9: 	movq	%r14, %rdi
    000011ac: 	callq	_ZdaPv@PLT # Offset: 4524
    000011b1: 	movl	$0x7eff810, %edi
    000011b6: 	callq	_Znam@PLT # Offset: 4534
    000011bb: 	movsd	init_value(%rip), %xmm0
    000011c3: 	movq	-0xfb58(%rbp), %rsi
    000011ca: 	movq	%rax, %r14
    000011cd: 	leaq	0x7eff810(%rax), %rdx
    000011d4: 	unpcklpd	%xmm0, %xmm0
.Ltmp3185:
    000011d8: 	movups	%xmm0, (%rax)
    000011db: 	addq	$0x10, %rax
    000011df: 	cmpq	%rax, %rdx
    000011e2: 	jne	.Ltmp3185 # Offset: 4578
    000011e4: 	movq	%rsi, -0xfb58(%rbp)
    000011eb: 	movq	-0xfb60(%rbp), %rsi
    000011f2: 	leaq	DATAat0x2457b(%rip), %rdx
    000011f9: 	movq	%rbx, %rdi
    000011fc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4604
    00001201: 	movq	%rbx, %r9
    00001204: 	pxor	%xmm0, %xmm0
    00001208: 	movl	$0x101, %ecx
    0000120d: 	movq	%r14, %rdi
    00001210: 	leaq	_Z19accumulate_array3D1IdET_PKS0_mmmS0_(%rip), %r8
    00001217: 	movl	$0xff, %edx
    0000121c: 	movl	$0xfe, %esi
    00001221: 	callq	_Z17test_accumulate3DIdPdPFdPKdmmmdEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4641
    00001226: 	movq	-0x3ec0(%rbp), %rdi
    0000122d: 	cmpq	%r12, %rdi
    00001230: 	je	.Ltmp3186 # Offset: 4656
    00001232: 	movq	-0x3eb0(%rbp), %rax
    00001239: 	leaq	0x1(%rax), %rsi
    0000123d: 	callq	_ZdlPvm@PLT # Offset: 4669
.Ltmp3186:
    00001242: 	movq	-0xfb60(%rbp), %rsi
    00001249: 	leaq	DATAat0x2458b(%rip), %rdx
    00001250: 	movq	%rbx, %rdi
    00001253: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4691
    00001258: 	movq	%rbx, %r9
    0000125b: 	pxor	%xmm0, %xmm0
    0000125f: 	movl	$0x101, %ecx
    00001264: 	movq	%r14, %rdi
    00001267: 	leaq	_Z19accumulate_array3D2IdET_PKS0_mmmS0_(%rip), %r8
    0000126e: 	movl	$0xff, %edx
    00001273: 	movl	$0xfe, %esi
    00001278: 	callq	_Z17test_accumulate3DIdPdPFdPKdmmmdEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4728
    0000127d: 	movq	-0x3ec0(%rbp), %rdi
    00001284: 	cmpq	%r12, %rdi
    00001287: 	je	.Ltmp3187 # Offset: 4743
    00001289: 	movq	-0x3eb0(%rbp), %rax
    00001290: 	leaq	0x1(%rax), %rsi
    00001294: 	callq	_ZdlPvm@PLT # Offset: 4756
.Ltmp3187:
    00001299: 	movq	-0xfb60(%rbp), %rsi
    000012a0: 	leaq	DATAat0x2459b(%rip), %rdx
    000012a7: 	movq	%rbx, %rdi
    000012aa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4778
    000012af: 	movq	%rbx, %r9
    000012b2: 	pxor	%xmm0, %xmm0
    000012b6: 	movl	$0x101, %ecx
    000012bb: 	movq	%r14, %rdi
    000012be: 	leaq	_Z19accumulate_array3D3IdET_PKS0_mmmS0_(%rip), %r8
    000012c5: 	movl	$0xff, %edx
    000012ca: 	movl	$0xfe, %esi
    000012cf: 	callq	_Z17test_accumulate3DIdPdPFdPKdmmmdEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4815
    000012d4: 	movq	-0x3ec0(%rbp), %rdi
    000012db: 	cmpq	%r12, %rdi
    000012de: 	je	.Ltmp3188 # Offset: 4830
    000012e0: 	movq	-0x3eb0(%rbp), %rax
    000012e7: 	leaq	0x1(%rax), %rsi
    000012eb: 	callq	_ZdlPvm@PLT # Offset: 4843
.Ltmp3188:
    000012f0: 	movq	-0xfb60(%rbp), %rsi
    000012f7: 	leaq	DATAat0x245ab(%rip), %rdx
    000012fe: 	movq	%rbx, %rdi
    00001301: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4865
    00001306: 	movq	%rbx, %r9
    00001309: 	pxor	%xmm0, %xmm0
    0000130d: 	movl	$0x101, %ecx
    00001312: 	movq	%r14, %rdi
    00001315: 	leaq	_Z19accumulate_array3D4IdET_PKS0_mmmS0_(%rip), %r8
    0000131c: 	movl	$0xff, %edx
    00001321: 	movl	$0xfe, %esi
    00001326: 	callq	_Z17test_accumulate3DIdPdPFdPKdmmmdEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4902
    0000132b: 	movq	-0x3ec0(%rbp), %rdi
    00001332: 	cmpq	%r12, %rdi
    00001335: 	je	.Ltmp3189 # Offset: 4917
    00001337: 	movq	-0x3eb0(%rbp), %rax
    0000133e: 	leaq	0x1(%rax), %rsi
    00001342: 	callq	_ZdlPvm@PLT # Offset: 4930
.Ltmp3189:
    00001347: 	movq	-0xfb60(%rbp), %rsi
    0000134e: 	leaq	DATAat0x245bb(%rip), %rdx
    00001355: 	movq	%rbx, %rdi
    00001358: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4952
    0000135d: 	movq	%rbx, %r9
    00001360: 	pxor	%xmm0, %xmm0
    00001364: 	movl	$0x101, %ecx
    00001369: 	movq	%r14, %rdi
    0000136c: 	leaq	_Z19accumulate_array3D5IdET_PKS0_mmmS0_(%rip), %r8
    00001373: 	movl	$0xff, %edx
    00001378: 	movl	$0xfe, %esi
    0000137d: 	callq	_Z17test_accumulate3DIdPdPFdPKdmmmdEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4989
    00001382: 	movq	-0x3ec0(%rbp), %rdi
    00001389: 	cmpq	%r12, %rdi
    0000138c: 	je	.Ltmp3190 # Offset: 5004
    0000138e: 	movq	-0x3eb0(%rbp), %rax
    00001395: 	leaq	0x1(%rax), %rsi
    00001399: 	callq	_ZdlPvm@PLT # Offset: 5017
.Ltmp3190:
    0000139e: 	movq	-0xfb60(%rbp), %rsi
    000013a5: 	leaq	DATAat0x245cb(%rip), %rdx
    000013ac: 	movq	%rbx, %rdi
    000013af: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5039
    000013b4: 	movq	%rbx, %r9
    000013b7: 	pxor	%xmm0, %xmm0
    000013bb: 	movl	$0x101, %ecx
    000013c0: 	movq	%r14, %rdi
    000013c3: 	leaq	_Z19accumulate_array3D6IdET_PKS0_mmmS0_(%rip), %r8
    000013ca: 	movl	$0xff, %edx
    000013cf: 	movl	$0xfe, %esi
    000013d4: 	callq	_Z17test_accumulate3DIdPdPFdPKdmmmdEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5076
    000013d9: 	movq	-0x3ec0(%rbp), %rdi
    000013e0: 	cmpq	%r12, %rdi
    000013e3: 	je	.Ltmp3191 # Offset: 5091
    000013e5: 	movq	-0x3eb0(%rbp), %rax
    000013ec: 	leaq	0x1(%rax), %rsi
    000013f0: 	callq	_ZdlPvm@PLT # Offset: 5104
.Ltmp3191:
    000013f5: 	movq	-0xfb60(%rbp), %rsi
    000013fc: 	leaq	DATAat0x245db(%rip), %rdx
    00001403: 	movq	%rbx, %rdi
    00001406: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5126
    0000140b: 	movq	%rbx, %r9
    0000140e: 	pxor	%xmm0, %xmm0
    00001412: 	movl	$0x101, %ecx
    00001417: 	movq	%r14, %rdi
    0000141a: 	leaq	_Z19accumulate_array3D7IdET_PKS0_mmmS0_(%rip), %r8
    00001421: 	movl	$0xff, %edx
    00001426: 	movl	$0xfe, %esi
    0000142b: 	callq	_Z17test_accumulate3DIdPdPFdPKdmmmdEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5163
    00001430: 	movq	-0x3ec0(%rbp), %rdi
    00001437: 	cmpq	%r12, %rdi
    0000143a: 	je	.Ltmp3192 # Offset: 5178
    0000143c: 	movq	-0x3eb0(%rbp), %rax
    00001443: 	leaq	0x1(%rax), %rsi
    00001447: 	callq	_ZdlPvm@PLT # Offset: 5191
.Ltmp3192:
    0000144c: 	movq	-0xfb60(%rbp), %rsi
    00001453: 	leaq	DATAat0x245eb(%rip), %rdx
    0000145a: 	movq	%rbx, %rdi
    0000145d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5213
    00001462: 	movq	%rbx, %r9
    00001465: 	pxor	%xmm0, %xmm0
    00001469: 	movl	$0x101, %ecx
    0000146e: 	movq	%r14, %rdi
    00001471: 	leaq	_Z19accumulate_array3D8IdET_PKS0_mmmS0_(%rip), %r8
    00001478: 	movl	$0xff, %edx
    0000147d: 	movl	$0xfe, %esi
    00001482: 	callq	_Z17test_accumulate3DIdPdPFdPKdmmmdEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5250
    00001487: 	movq	-0x3ec0(%rbp), %rdi
    0000148e: 	cmpq	%r12, %rdi
    00001491: 	je	.Ltmp3193 # Offset: 5265
    00001493: 	movq	-0x3eb0(%rbp), %rax
    0000149a: 	leaq	0x1(%rax), %rsi
    0000149e: 	callq	_ZdlPvm@PLT # Offset: 5278
.Ltmp3193:
    000014a3: 	movq	-0xfb60(%rbp), %rsi
    000014aa: 	leaq	DATAat0x245fb(%rip), %rdx
    000014b1: 	movq	%rbx, %rdi
    000014b4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5300
    000014b9: 	movq	%rbx, %r9
    000014bc: 	pxor	%xmm0, %xmm0
    000014c0: 	movl	$0x101, %ecx
    000014c5: 	movq	%r14, %rdi
    000014c8: 	leaq	_Z19accumulate_array3D9IdET_PKS0_mmmS0_(%rip), %r8
    000014cf: 	movl	$0xff, %edx
    000014d4: 	movl	$0xfe, %esi
    000014d9: 	callq	_Z17test_accumulate3DIdPdPFdPKdmmmdEEvT0_mmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5337
    000014de: 	movq	-0x3ec0(%rbp), %rdi
    000014e5: 	cmpq	%r12, %rdi
    000014e8: 	je	.Ltmp3194 # Offset: 5352
    000014ea: 	movq	-0x3eb0(%rbp), %rax
    000014f1: 	leaq	0x1(%rax), %rsi
    000014f5: 	callq	_ZdlPvm@PLT # Offset: 5365
.Ltmp3194:
    000014fa: 	movq	-0xfb60(%rbp), %rsi
    00001501: 	leaq	-0xfaa0(%rbp), %rdi
    00001508: 	leaq	DATAat0x24758(%rip), %rdx
    0000150f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5391
    00001514: 	movl	iterations(%rip), %edx
    0000151a: 	xorl	%r8d, %r8d
    0000151d: 	xorl	%ecx, %ecx
    0000151f: 	movl	$0xfdff02, %esi
    00001524: 	movq	-0xfaa0(%rbp), %rdi
    0000152b: 	callq	_Z9summarizePKciiii # Offset: 5419
    00001530: 	movq	%r14, %rdi
    00001533: 	callq	_ZdaPv@PLT # Offset: 5427
    00001538: 	movl	$0x7ff0008, %edi
    0000153d: 	callq	_Znam@PLT # Offset: 5437
    00001542: 	movsd	init_value(%rip), %xmm0
    0000154a: 	movq	-0xfb58(%rbp), %rsi
    00001551: 	movq	%rax, %r14
    00001554: 	leaq	0x7ff0000(%rax), %rdx
    0000155b: 	movapd	%xmm0, %xmm1
    0000155f: 	unpcklpd	%xmm1, %xmm1
.Ltmp3195:
    00001563: 	movups	%xmm1, (%rax)
    00001566: 	addq	$0x10, %rax
    0000156a: 	cmpq	%rax, %rdx
    0000156d: 	jne	.Ltmp3195 # Offset: 5485
    0000156f: 	movq	%rsi, -0xfb58(%rbp)
    00001576: 	movq	-0xfb60(%rbp), %rsi
    0000157d: 	leaq	DATAat0x2460b(%rip), %rdx
    00001584: 	movq	%rbx, %rdi
    00001587: 	movsd	%xmm0, 0x7ff0000(%r14)
    00001590: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5520
    00001595: 	subq	$0x8, %rsp
    00001599: 	pxor	%xmm0, %xmm0
    0000159d: 	movl	$0x3f, %ecx
    000015a2: 	movq	%r14, %rdi
    000015a5: 	pushq	%rbx
    000015a6: 	movl	$0x41, %r8d
    000015ac: 	movl	$0x41, %edx
    000015b1: 	leaq	_Z19accumulate_array4D1IdET_PKS0_mmmmS0_(%rip), %r9
    000015b8: 	movl	$0x3f, %esi
    000015bd: 	callq	_Z17test_accumulate4DIdPdPFdPKdmmmmdEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5565
    000015c2: 	movq	-0x3ec0(%rbp), %rdi
    000015c9: 	popq	%r11
    000015cb: 	popq	%r15
    000015cd: 	cmpq	%r12, %rdi
    000015d0: 	je	.Ltmp3196 # Offset: 5584
    000015d2: 	movq	-0x3eb0(%rbp), %rax
    000015d9: 	leaq	0x1(%rax), %rsi
    000015dd: 	callq	_ZdlPvm@PLT # Offset: 5597
.Ltmp3196:
    000015e2: 	movq	-0xfb60(%rbp), %rsi
    000015e9: 	leaq	DATAat0x2461b(%rip), %rdx
    000015f0: 	movq	%rbx, %rdi
    000015f3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5619
    000015f8: 	subq	$0x8, %rsp
    000015fc: 	pxor	%xmm0, %xmm0
    00001600: 	movl	$0x3f, %ecx
    00001605: 	movq	%r14, %rdi
    00001608: 	pushq	%rbx
    00001609: 	movl	$0x41, %r8d
    0000160f: 	movl	$0x41, %edx
    00001614: 	leaq	_Z19accumulate_array4D2IdET_PKS0_mmmmS0_(%rip), %r9
    0000161b: 	movl	$0x3f, %esi
    00001620: 	callq	_Z17test_accumulate4DIdPdPFdPKdmmmmdEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5664
    00001625: 	movq	-0x3ec0(%rbp), %rdi
    0000162c: 	popq	%r9
    0000162e: 	popq	%r10
    00001630: 	cmpq	%r12, %rdi
    00001633: 	je	.Ltmp3197 # Offset: 5683
    00001635: 	movq	-0x3eb0(%rbp), %rax
    0000163c: 	leaq	0x1(%rax), %rsi
    00001640: 	callq	_ZdlPvm@PLT # Offset: 5696
.Ltmp3197:
    00001645: 	movq	-0xfb60(%rbp), %rsi
    0000164c: 	leaq	DATAat0x2462b(%rip), %rdx
    00001653: 	movq	%rbx, %rdi
    00001656: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5718
    0000165b: 	subq	$0x8, %rsp
    0000165f: 	pxor	%xmm0, %xmm0
    00001663: 	movl	$0x3f, %ecx
    00001668: 	movq	%r14, %rdi
    0000166b: 	pushq	%rbx
    0000166c: 	movl	$0x41, %r8d
    00001672: 	movl	$0x41, %edx
    00001677: 	leaq	_Z19accumulate_array4D3IdET_PKS0_mmmmS0_(%rip), %r9
    0000167e: 	movl	$0x3f, %esi
    00001683: 	callq	_Z17test_accumulate4DIdPdPFdPKdmmmmdEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5763
    00001688: 	popq	%rdi
    00001689: 	movq	-0x3ec0(%rbp), %rdi
    00001690: 	popq	%r8
    00001692: 	cmpq	%r12, %rdi
    00001695: 	je	.Ltmp3198 # Offset: 5781
    00001697: 	movq	-0x3eb0(%rbp), %rax
    0000169e: 	leaq	0x1(%rax), %rsi
    000016a2: 	callq	_ZdlPvm@PLT # Offset: 5794
.Ltmp3198:
    000016a7: 	movq	-0xfb60(%rbp), %rsi
    000016ae: 	leaq	DATAat0x2463b(%rip), %rdx
    000016b5: 	movq	%rbx, %rdi
    000016b8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5816
    000016bd: 	subq	$0x8, %rsp
    000016c1: 	pxor	%xmm0, %xmm0
    000016c5: 	movl	$0x3f, %ecx
    000016ca: 	movq	%r14, %rdi
    000016cd: 	pushq	%rbx
    000016ce: 	movl	$0x41, %r8d
    000016d4: 	movl	$0x41, %edx
    000016d9: 	leaq	_Z19accumulate_array4D4IdET_PKS0_mmmmS0_(%rip), %r9
    000016e0: 	movl	$0x3f, %esi
    000016e5: 	callq	_Z17test_accumulate4DIdPdPFdPKdmmmmdEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5861
    000016ea: 	movq	-0x3ec0(%rbp), %rdi
    000016f1: 	popq	%rcx
    000016f2: 	popq	%rsi
    000016f3: 	cmpq	%r12, %rdi
    000016f6: 	je	.Ltmp3199 # Offset: 5878
    000016f8: 	movq	-0x3eb0(%rbp), %rax
    000016ff: 	leaq	0x1(%rax), %rsi
    00001703: 	callq	_ZdlPvm@PLT # Offset: 5891
.Ltmp3199:
    00001708: 	movq	-0xfb60(%rbp), %rsi
    0000170f: 	leaq	DATAat0x2464b(%rip), %rdx
    00001716: 	movq	%rbx, %rdi
    00001719: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5913
    0000171e: 	subq	$0x8, %rsp
    00001722: 	pxor	%xmm0, %xmm0
    00001726: 	movl	$0x3f, %ecx
    0000172b: 	movq	%r14, %rdi
    0000172e: 	pushq	%rbx
    0000172f: 	movl	$0x41, %r8d
    00001735: 	movl	$0x41, %edx
    0000173a: 	leaq	_Z19accumulate_array4D5IdET_PKS0_mmmmS0_(%rip), %r9
    00001741: 	movl	$0x3f, %esi
    00001746: 	callq	_Z17test_accumulate4DIdPdPFdPKdmmmmdEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5958
    0000174b: 	movq	-0x3ec0(%rbp), %rdi
    00001752: 	popq	%rax
    00001753: 	popq	%rdx
    00001754: 	cmpq	%r12, %rdi
    00001757: 	je	.Ltmp3200 # Offset: 5975
    00001759: 	movq	-0x3eb0(%rbp), %rax
    00001760: 	leaq	0x1(%rax), %rsi
    00001764: 	callq	_ZdlPvm@PLT # Offset: 5988
.Ltmp3200:
    00001769: 	movq	-0xfb60(%rbp), %rsi
    00001770: 	leaq	DATAat0x2465b(%rip), %rdx
    00001777: 	movq	%rbx, %rdi
    0000177a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6010
    0000177f: 	subq	$0x8, %rsp
    00001783: 	pxor	%xmm0, %xmm0
    00001787: 	movl	$0x3f, %ecx
    0000178c: 	movq	%r14, %rdi
    0000178f: 	pushq	%rbx
    00001790: 	movl	$0x41, %r8d
    00001796: 	movl	$0x41, %edx
    0000179b: 	leaq	_Z19accumulate_array4D6IdET_PKS0_mmmmS0_(%rip), %r9
    000017a2: 	movl	$0x3f, %esi
    000017a7: 	callq	_Z17test_accumulate4DIdPdPFdPKdmmmmdEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6055
    000017ac: 	movq	-0x3ec0(%rbp), %rdi
    000017b3: 	popq	%r11
    000017b5: 	popq	%r15
    000017b7: 	cmpq	%r12, %rdi
    000017ba: 	je	.Ltmp3201 # Offset: 6074
    000017bc: 	movq	-0x3eb0(%rbp), %rax
    000017c3: 	leaq	0x1(%rax), %rsi
    000017c7: 	callq	_ZdlPvm@PLT # Offset: 6087
.Ltmp3201:
    000017cc: 	movq	-0xfb60(%rbp), %rsi
    000017d3: 	leaq	DATAat0x2466b(%rip), %rdx
    000017da: 	movq	%rbx, %rdi
    000017dd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6109
    000017e2: 	subq	$0x8, %rsp
    000017e6: 	pxor	%xmm0, %xmm0
    000017ea: 	movl	$0x3f, %ecx
    000017ef: 	movq	%r14, %rdi
    000017f2: 	pushq	%rbx
    000017f3: 	movl	$0x41, %r8d
    000017f9: 	movl	$0x41, %edx
    000017fe: 	leaq	_Z19accumulate_array4D7IdET_PKS0_mmmmS0_(%rip), %r9
    00001805: 	movl	$0x3f, %esi
    0000180a: 	callq	_Z17test_accumulate4DIdPdPFdPKdmmmmdEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6154
    0000180f: 	movq	-0x3ec0(%rbp), %rdi
    00001816: 	popq	%r9
    00001818: 	popq	%r10
    0000181a: 	cmpq	%r12, %rdi
    0000181d: 	je	.Ltmp3202 # Offset: 6173
    0000181f: 	movq	-0x3eb0(%rbp), %rax
    00001826: 	leaq	0x1(%rax), %rsi
    0000182a: 	callq	_ZdlPvm@PLT # Offset: 6186
.Ltmp3202:
    0000182f: 	movq	-0xfb60(%rbp), %rsi
    00001836: 	leaq	DATAat0x2467b(%rip), %rdx
    0000183d: 	movq	%rbx, %rdi
    00001840: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6208
    00001845: 	subq	$0x8, %rsp
    00001849: 	pxor	%xmm0, %xmm0
    0000184d: 	movl	$0x3f, %ecx
    00001852: 	movq	%r14, %rdi
    00001855: 	pushq	%rbx
    00001856: 	movl	$0x41, %r8d
    0000185c: 	movl	$0x41, %edx
    00001861: 	leaq	_Z19accumulate_array4D8IdET_PKS0_mmmmS0_(%rip), %r9
    00001868: 	movl	$0x3f, %esi
    0000186d: 	callq	_Z17test_accumulate4DIdPdPFdPKdmmmmdEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6253
    00001872: 	popq	%rdi
    00001873: 	movq	-0x3ec0(%rbp), %rdi
    0000187a: 	popq	%r8
    0000187c: 	cmpq	%r12, %rdi
    0000187f: 	je	.Ltmp3203 # Offset: 6271
    00001881: 	movq	-0x3eb0(%rbp), %rax
    00001888: 	leaq	0x1(%rax), %rsi
    0000188c: 	callq	_ZdlPvm@PLT # Offset: 6284
.Ltmp3203:
    00001891: 	movq	-0xfb60(%rbp), %rsi
    00001898: 	leaq	DATAat0x2468b(%rip), %rdx
    0000189f: 	movq	%rbx, %rdi
    000018a2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6306
    000018a7: 	subq	$0x8, %rsp
    000018ab: 	pxor	%xmm0, %xmm0
    000018af: 	movl	$0x3f, %ecx
    000018b4: 	movq	%r14, %rdi
    000018b7: 	pushq	%rbx
    000018b8: 	movl	$0x41, %r8d
    000018be: 	movl	$0x41, %edx
    000018c3: 	leaq	_Z19accumulate_array4D9IdET_PKS0_mmmmS0_(%rip), %r9
    000018ca: 	movl	$0x3f, %esi
    000018cf: 	callq	_Z17test_accumulate4DIdPdPFdPKdmmmmdEEvT0_mmmmT_T1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6351
    000018d4: 	movq	-0x3ec0(%rbp), %rdi
    000018db: 	popq	%rcx
    000018dc: 	popq	%rsi
    000018dd: 	cmpq	%r12, %rdi
    000018e0: 	je	.Ltmp3204 # Offset: 6368
    000018e2: 	movq	-0x3eb0(%rbp), %rax
    000018e9: 	leaq	0x1(%rax), %rsi
    000018ed: 	callq	_ZdlPvm@PLT # Offset: 6381
.Ltmp3204:
    000018f2: 	movq	-0xfb60(%rbp), %rsi
    000018f9: 	leaq	-0xfa80(%rbp), %rdi
    00001900: 	leaq	DATAat0x24780(%rip), %rdx
    00001907: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6407
    0000190c: 	movl	iterations(%rip), %edx
    00001912: 	xorl	%r8d, %r8d
    00001915: 	xorl	%ecx, %ecx
    00001917: 	movl	$0xffe001, %esi
    0000191c: 	movq	-0xfa80(%rbp), %rdi
    00001923: 	callq	_Z9summarizePKciiii # Offset: 6435
    00001928: 	movq	%r14, %rdi
    0000192b: 	callq	_ZdaPv@PLT # Offset: 6443
    00001930: 	movl	-0xfbcc(%rbp), %eax
    00001936: 	pxor	%xmm0, %xmm0
    0000193a: 	leaq	-0xfb20(%rbp), %rdi
    00001941: 	movl	$0x7d0, %esi
    00001946: 	movaps	%xmm0, -0xfb20(%rbp)
    0000194d: 	movl	%eax, iterations(%rip)
    00001953: 	movq	$0x0, -0xfb10(%rbp)
    0000195e: 	callq	_ZNSt6vectorIdSaIdEE17_M_default_appendEm # Offset: 6494
    00001963: 	movslq	iterations(%rip), %rax
    0000196a: 	movq	-0xfb58(%rbp), %r10
    00001971: 	movabsq	$0x5851f42d4c957f2d, %rdi
    0000197b: 	movabsq	$0x14057b7ef767814f, %rsi
    00001985: 	movq	%rax, %rdx
    00001988: 	imulq	$0x7af4f3ff, %rax, %rax
    0000198f: 	sarl	$0x1f, %edx
    00001992: 	sarq	$0x28, %rax
    00001996: 	subl	%edx, %eax
    00001998: 	movq	-0xfb68(%rbp), %rdx
    0000199f: 	movl	%eax, iterations(%rip)
    000019a5: 	cvttsd2si	init_value(%rip), %eax
    000019ad: 	addl	$0x3039, %eax
    000019b2: 	cltq
    000019b4: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
.Ltmp3205:
    000019bb: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000019c2: 	pxor	%xmm0, %xmm0
    000019c6: 	addq	$0x8, %rdx
    000019ca: 	imulq	%rdi, %rax
    000019ce: 	addq	%rsi, %rax
    000019d1: 	movq	%rax, %rcx
    000019d4: 	movq	%rax, %r8
    000019d7: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000019de: 	shrq	$0x14, %rcx
    000019e2: 	shlq	$0x17, %r8
    000019e6: 	xorq	%r8, %rcx
    000019e9: 	xorq	%rcx, %rax
    000019ec: 	sarq	$0x3, %rax
    000019f0: 	cvtsi2sd	%rax, %xmm0
    000019f5: 	movsd	%xmm0, -0x8(%rdx)
    000019fa: 	cmpq	%r10, %rdx
    000019fd: 	jne	.Ltmp3205 # Offset: 6653
    000019ff: 	movq	-0xfb68(%rbp), %r14
    00001a06: 	movl	$0x3e80, %edx
    00001a0b: 	movq	%r10, %r15
    00001a0e: 	movq	-0xfb80(%rbp), %rdi
    00001a15: 	movq	%r10, -0xfb58(%rbp)
    00001a1c: 	movq	%r14, %rsi
    00001a1f: 	callq	memcpy@PLT # Offset: 6687
    00001a24: 	leaq	-0xbbb8(%rbp), %rdx
    00001a2b: 	xorl	%eax, %eax
    00001a2d: 	cmpq	%rdx, %r13
    00001a30: 	je	.Ltmp3206 # Offset: 6704
    00001a36: 	movq	%r15, %rdi
    00001a39: 	movq	%r14, %rdx
.Ltmp3207:
    00001a3c: 	movapd	(%rdx,%rax), %xmm7
    00001a41: 	movups	%xmm7, (%r13,%rax)
    00001a47: 	addq	$0x10, %rax
    00001a4b: 	cmpq	$0x3e80, %rax
    00001a51: 	jne	.Ltmp3207 # Offset: 6737
    00001a53: 	movq	%rdi, -0xfb58(%rbp)
.Ltmp3434:
    00001a5a: 	movq	-0xfb60(%rbp), %rsi
    00001a61: 	leaq	DATAat0x2469b(%rip), %rdx
    00001a68: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6760
    00001a6d: 	callq	clock@PLT # Offset: 6765
    00001a72: 	movl	iterations(%rip), %r15d
    00001a79: 	xorl	%r14d, %r14d
    00001a7c: 	leaq	-0x40(%rbp), %r12
    00001a80: 	movq	%rax, start_time(%rip)
    00001a87: 	leaq	-0x3eb8(%rbp), %rax
    00001a8e: 	movq	%rax, -0xfba0(%rbp)
    00001a95: 	testl	%r15d, %r15d
    00001a98: 	jle	.Ltmp3208 # Offset: 6808
.Ltmp3214:
    00001a9e: 	movq	-0xfb68(%rbp), %rsi
    00001aa5: 	movq	%rbx, %rdi
    00001aa8: 	movl	$0x3e80, %edx
    00001aad: 	callq	memcpy@PLT # Offset: 6829
    00001ab2: 	movq	-0xfba0(%rbp), %rcx
    00001ab9: 	movq	-0xfb58(%rbp), %rdi
.Ltmp3211:
    00001ac0: 	movsd	(%rcx), %xmm1
    00001ac4: 	movq	%rcx, %rax
    00001ac7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3210:
    00001ad0: 	movq	%rax, %rdx
    00001ad3: 	leaq	-0x8(%rax), %rax
    00001ad7: 	movsd	-0x8(%rdx), %xmm0
    00001adc: 	comisd	%xmm1, %xmm0
    00001ae0: 	jbe	.Ltmp3209 # Offset: 6880
    00001ae2: 	movsd	%xmm0, 0x8(%rax)
    00001ae7: 	cmpq	%rbx, %rax
    00001aea: 	jne	.Ltmp3210 # Offset: 6890
    00001aec: 	movq	%rbx, %rdx
.Ltmp3209:
    00001aef: 	addq	$0x8, %rcx
    00001af3: 	movsd	%xmm1, (%rdx)
    00001af7: 	cmpq	%r12, %rcx
    00001afa: 	jne	.Ltmp3211 # Offset: 6906
    00001afc: 	movsd	-0x3ec0(%rbp), %xmm0
    00001b04: 	movq	-0xfba0(%rbp), %rax
    00001b0b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3213:
    00001b10: 	addq	$0x8, %rax
    00001b14: 	movapd	%xmm0, %xmm1
    00001b18: 	movsd	-0x8(%rax), %xmm0
    00001b1d: 	comisd	%xmm0, %xmm1
    00001b21: 	ja	.Ltmp3212 # Offset: 6945
    00001b27: 	cmpq	%r12, %rax
    00001b2a: 	jne	.Ltmp3213 # Offset: 6954
    00001b2c: 	movq	%rdi, -0xfb58(%rbp)
.Ltmp3264:
    00001b33: 	addl	$0x1, %r14d
    00001b37: 	cmpl	%r15d, %r14d
    00001b3a: 	jl	.Ltmp3214 # Offset: 6970
.Ltmp3208:
    00001b40: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00001b47: 	movq	_Z7gLabelsB5cxx11+48(%rip), %r14
    00001b4e: 	subq	$0x20, %rax
    00001b52: 	cmpq	%rax, %r14
    00001b55: 	je	.Ltmp3215 # Offset: 6997
    00001b5b: 	leaq	0x10(%r14), %rdi
    00001b5f: 	movq	-0x7d38(%rbp), %r12
    00001b66: 	movq	%rdi, (%r14)
    00001b69: 	movq	-0x7d40(%rbp), %r15
    00001b70: 	movq	%r15, %rax
    00001b73: 	addq	%r12, %rax
    00001b76: 	je	.Ltmp3216 # Offset: 7030
    00001b78: 	testq	%r15, %r15
    00001b7b: 	je	.Ltmp3217 # Offset: 7035
.Ltmp3216:
    00001b81: 	movq	%r12, -0xfb48(%rbp)
    00001b88: 	cmpq	$0xf, %r12
    00001b8c: 	ja	.Ltmp3218 # Offset: 7052
    00001b92: 	cmpq	$0x1, %r12
    00001b96: 	jne	.Ltmp3219 # Offset: 7062
    00001b9c: 	movzbl	(%r15), %eax
    00001ba0: 	movb	%al, 0x10(%r14)
.Ltmp3265:
    00001ba4: 	movq	%r12, 0x8(%r14)
    00001ba8: 	movb	$0x0, (%rdi,%r12)
    00001bad: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001bb4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001bbb: 	addq	$0x20, %rax
    00001bbf: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001bc6: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00001bcd: 	je	.Ltmp3220 # Offset: 7117
.Ltmp3432:
    00001bd3: 	movq	-0x20(%rax), %r12
    00001bd7: 	callq	clock@PLT # Offset: 7127
    00001bdc: 	pxor	%xmm0, %xmm0
    00001be0: 	movq	%rax, end_time(%rip)
    00001be7: 	movq	%r12, %rdi
    00001bea: 	subq	start_time(%rip), %rax
    00001bf1: 	cvtsi2sd	%rax, %xmm0
    00001bf6: 	divsd	DATAat0x24890(%rip), %xmm0
    00001bfe: 	callq	_Z13record_resultdPKc # Offset: 7166
    00001c03: 	movq	-0x7d40(%rbp), %rdi
    00001c0a: 	leaq	-0x7d30(%rbp), %rax
    00001c11: 	cmpq	%rax, %rdi
    00001c14: 	je	.Ltmp3221 # Offset: 7188
    00001c16: 	movq	-0x7d30(%rbp), %rax
    00001c1d: 	leaq	0x1(%rax), %rsi
    00001c21: 	callq	_ZdlPvm@PLT # Offset: 7201
.Ltmp3221:
    00001c26: 	leaq	-0xfa60(%rbp), %rax
    00001c2d: 	movq	-0xfb60(%rbp), %rsi
    00001c34: 	leaq	DATAat0x247a8(%rip), %rdx
    00001c3b: 	movq	%rax, %rdi
    00001c3e: 	movq	%rax, -0xfb90(%rbp)
    00001c45: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7237
    00001c4a: 	callq	clock@PLT # Offset: 7242
    00001c4f: 	movl	iterations(%rip), %r15d
    00001c56: 	xorl	%r14d, %r14d
    00001c59: 	movq	%rax, start_time(%rip)
    00001c60: 	leaq	-0x7d38(%rbp), %rax
    00001c67: 	movq	%rax, -0xfba0(%rbp)
    00001c6e: 	testl	%r15d, %r15d
    00001c71: 	jle	.Ltmp3222 # Offset: 7281
.Ltmp3228:
    00001c77: 	movq	-0xfb58(%rbp), %r12
    00001c7e: 	movq	-0xfb80(%rbp), %rsi
    00001c85: 	movl	$0x3e80, %edx
    00001c8a: 	movq	%r12, %rdi
    00001c8d: 	callq	memcpy@PLT # Offset: 7309
    00001c92: 	movq	-0xfba0(%rbp), %rcx
    00001c99: 	movq	%r12, %rdi
    00001c9c: 	nopl	(%rax) # Size: 4
.Ltmp3225:
    00001ca0: 	movsd	(%rcx), %xmm1
    00001ca4: 	movq	%rcx, %rax
    00001ca7: 	movq	%rdi, %rsi
    00001caa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3224:
    00001cb0: 	movq	%rax, %rdx
    00001cb3: 	leaq	-0x8(%rax), %rax
    00001cb7: 	movsd	-0x8(%rdx), %xmm0
    00001cbc: 	comisd	%xmm1, %xmm0
    00001cc0: 	jbe	.Ltmp3223 # Offset: 7360
    00001cc6: 	movsd	%xmm0, 0x8(%rax)
    00001ccb: 	cmpq	%rsi, %rax
    00001cce: 	jne	.Ltmp3224 # Offset: 7374
    00001cd0: 	movq	%rsi, %rdi
    00001cd3: 	movq	%rsi, %rdx
.Ltmp3266:
    00001cd6: 	addq	$0x8, %rcx
    00001cda: 	movsd	%xmm1, (%rdx)
    00001cde: 	cmpq	%rbx, %rcx
    00001ce1: 	jne	.Ltmp3225 # Offset: 7393
    00001ce3: 	movsd	-0x7d40(%rbp), %xmm0
    00001ceb: 	movq	-0xfba0(%rbp), %rax
    00001cf2: 	movq	%rdi, %rsi
    00001cf5: 	nopl	(%rax) # Size: 3
.Ltmp3227:
    00001cf8: 	addq	$0x8, %rax
    00001cfc: 	movapd	%xmm0, %xmm1
    00001d00: 	movsd	-0x8(%rax), %xmm0
    00001d05: 	comisd	%xmm0, %xmm1
    00001d09: 	ja	.Ltmp3226 # Offset: 7433
    00001d0f: 	cmpq	%rbx, %rax
    00001d12: 	jne	.Ltmp3227 # Offset: 7442
    00001d14: 	movq	%rsi, -0xfb58(%rbp)
.Ltmp3385:
    00001d1b: 	addl	$0x1, %r14d
    00001d1f: 	cmpl	%r15d, %r14d
    00001d22: 	jl	.Ltmp3228 # Offset: 7458
.Ltmp3222:
    00001d28: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00001d2f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %r14
    00001d36: 	subq	$0x20, %rax
    00001d3a: 	cmpq	%rax, %r14
    00001d3d: 	je	.Ltmp3229 # Offset: 7485
    00001d43: 	leaq	0x10(%r14), %rdi
    00001d47: 	movq	-0xfa58(%rbp), %r12
    00001d4e: 	movq	%rdi, (%r14)
    00001d51: 	movq	-0xfa60(%rbp), %r15
    00001d58: 	movq	%r15, %rax
    00001d5b: 	addq	%r12, %rax
    00001d5e: 	je	.Ltmp3230 # Offset: 7518
    00001d60: 	testq	%r15, %r15
    00001d63: 	je	.Ltmp3231 # Offset: 7523
.Ltmp3230:
    00001d69: 	movq	%r12, -0xfb48(%rbp)
    00001d70: 	cmpq	$0xf, %r12
    00001d74: 	ja	.Ltmp3232 # Offset: 7540
    00001d7a: 	cmpq	$0x1, %r12
    00001d7e: 	jne	.Ltmp3233 # Offset: 7550
    00001d84: 	movzbl	(%r15), %eax
    00001d88: 	movb	%al, 0x10(%r14)
.Ltmp3442:
    00001d8c: 	movq	%r12, 0x8(%r14)
    00001d90: 	movb	$0x0, (%rdi,%r12)
    00001d95: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001d9c: 	addq	$0x20, %rax
    00001da0: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp3448:
    00001da7: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001dae: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001db5: 	je	.Ltmp3234 # Offset: 7605
.Ltmp3441:
    00001dbb: 	movq	-0x20(%rax), %r12
    00001dbf: 	callq	clock@PLT # Offset: 7615
    00001dc4: 	pxor	%xmm0, %xmm0
    00001dc8: 	movq	%rax, end_time(%rip)
    00001dcf: 	movq	%r12, %rdi
    00001dd2: 	subq	start_time(%rip), %rax
    00001dd9: 	cvtsi2sd	%rax, %xmm0
    00001dde: 	divsd	DATAat0x24890(%rip), %xmm0
    00001de6: 	callq	_Z13record_resultdPKc # Offset: 7654
    00001deb: 	movq	-0xfa60(%rbp), %rdi
    00001df2: 	leaq	-0xfa50(%rbp), %rax
    00001df9: 	movq	%rax, -0xfb98(%rbp)
    00001e00: 	cmpq	%rax, %rdi
    00001e03: 	je	.Ltmp3235 # Offset: 7683
    00001e05: 	movq	-0xfa50(%rbp), %rax
    00001e0c: 	leaq	0x1(%rax), %rsi
    00001e10: 	callq	_ZdlPvm@PLT # Offset: 7696
.Ltmp3235:
    00001e15: 	movq	-0xfb60(%rbp), %rsi
    00001e1c: 	movq	-0xfb90(%rbp), %rdi
    00001e23: 	leaq	DATAat0x247d0(%rip), %rdx
    00001e2a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7722
    00001e2f: 	movq	-0xfb18(%rbp), %r15
    00001e36: 	movq	-0xfb20(%rbp), %r14
    00001e3d: 	callq	clock@PLT # Offset: 7741
    00001e42: 	movl	iterations(%rip), %esi
    00001e48: 	movq	%rax, start_time(%rip)
    00001e4f: 	testl	%esi, %esi
    00001e51: 	jle	.Ltmp3236 # Offset: 7761
    00001e57: 	movq	-0xfb70(%rbp), %rdi
    00001e5e: 	leaq	0x8(%r14), %rax
    00001e62: 	leaq	0x8(%r13), %rdx
    00001e66: 	movl	$0x0, -0xfba8(%rbp)
    00001e70: 	movq	%rax, -0xfbb0(%rbp)
    00001e77: 	leaq	-0x8(%rdi), %rax
    00001e7b: 	subq	%r13, %rax
    00001e7e: 	cmpq	%rdx, %r14
    00001e81: 	setne	%cl
    00001e84: 	cmpq	$0x10, %rax
    00001e88: 	seta	%dl
    00001e8b: 	shrq	$0x3, %rax
    00001e8f: 	subq	%r13, %rdi
    00001e92: 	andl	%edx, %ecx
    00001e94: 	movq	%rdi, -0xfbe0(%rbp)
    00001e9b: 	movb	%cl, -0xfbb8(%rbp)
    00001ea1: 	leaq	0x1(%rax), %rcx
    00001ea5: 	movq	%rcx, %rax
    00001ea8: 	movq	%rcx, -0xfbd8(%rbp)
    00001eaf: 	andq	$-0x2, %rcx
    00001eb3: 	shrq	%rax
    00001eb6: 	movq	%rcx, -0xfbc8(%rbp)
    00001ebd: 	shlq	$0x4, %rax
    00001ec1: 	movq	%rax, -0xfbc0(%rbp)
    00001ec8: 	leaq	(,%rcx,8), %rax
    00001ed0: 	leaq	(%r13,%rax), %r12
    00001ed5: 	addq	%r14, %rax
    00001ed8: 	movq	%rax, -0xfba0(%rbp)
.Ltmp3249:
    00001edf: 	cmpq	%r13, -0xfb70(%rbp)
    00001ee6: 	je	.Ltmp3237 # Offset: 7910
    00001ee8: 	xorl	%eax, %eax
    00001eea: 	cmpb	$0x0, -0xfbb8(%rbp)
    00001ef1: 	je	.Ltmp3238 # Offset: 7921
    00001ef7: 	movq	-0xfbc0(%rbp), %rdx
    00001efe: 	movq	-0xfb58(%rbp), %rdi
    00001f05: 	nopl	(%rax) # Size: 3
.Ltmp3239:
    00001f08: 	movupd	(%r13,%rax), %xmm3
    00001f0f: 	movups	%xmm3, (%r14,%rax)
    00001f14: 	addq	$0x10, %rax
    00001f18: 	cmpq	%rax, %rdx
    00001f1b: 	jne	.Ltmp3239 # Offset: 7963
    00001f1d: 	movq	%rdi, -0xfb58(%rbp)
    00001f24: 	movq	-0xfbd8(%rbp), %rcx
    00001f2b: 	cmpq	%rcx, -0xfbc8(%rbp)
    00001f32: 	je	.Ltmp3237 # Offset: 7986
    00001f34: 	movsd	(%r12), %xmm0
    00001f3a: 	movq	-0xfba0(%rbp), %rax
    00001f41: 	movsd	%xmm0, (%rax)
.Ltmp3237:
    00001f45: 	cmpq	%r15, %r14
    00001f48: 	je	.Ltmp3240 # Offset: 8008
    00001f4a: 	movq	-0xfbb0(%rbp), %rax
    00001f51: 	cmpq	%rax, %r15
    00001f54: 	je	.Ltmp3240 # Offset: 8020
    00001f56: 	movq	-0xfb58(%rbp), %rdi
    00001f5d: 	movq	%rax, %rcx
.Ltmp3245:
    00001f60: 	movsd	(%rcx), %xmm1
    00001f64: 	movq	%rcx, %rax
    00001f67: 	cmpq	%rcx, %r14
    00001f6a: 	jne	.Ltmp3241 # Offset: 8042
    00001f6c: 	jmp	.Ltmp3242 # Offset: 8044
    00001f71: 	nopl	(%rax) # Size: 7
.Ltmp3244:
    00001f78: 	movsd	%xmm0, 0x8(%rax)
    00001f7d: 	cmpq	%rax, %r14
    00001f80: 	je	.Ltmp3243 # Offset: 8064
.Ltmp3241:
    00001f86: 	movq	%rax, %rdx
    00001f89: 	leaq	-0x8(%rax), %rax
    00001f8d: 	movsd	-0x8(%rdx), %xmm0
    00001f92: 	comisd	%xmm1, %xmm0
    00001f96: 	ja	.Ltmp3244 # Offset: 8086
    00001f98: 	addq	$0x8, %rcx
    00001f9c: 	movsd	%xmm1, (%rdx)
    00001fa0: 	cmpq	%r15, %rcx
    00001fa3: 	jne	.Ltmp3245 # Offset: 8099
.Ltmp3269:
    00001fa5: 	movq	%rdi, -0xfb58(%rbp)
.Ltmp3240:
    00001fac: 	movq	-0xfbb0(%rbp), %rax
    00001fb3: 	movq	-0xfb58(%rbp), %rdi
    00001fba: 	jmp	.Ltmp3246 # Offset: 8122
    00001fbc: 	nopl	(%rax) # Size: 4
.Ltmp3248:
    00001fc0: 	addq	$0x8, %rax
    00001fc4: 	movsd	-0x10(%rax), %xmm0
    00001fc9: 	comisd	(%rdx), %xmm0
    00001fcd: 	ja	.Ltmp3247 # Offset: 8141
.Ltmp3246:
    00001fd3: 	movq	%rax, %rdx
    00001fd6: 	cmpq	%rax, %r15
    00001fd9: 	jne	.Ltmp3248 # Offset: 8153
    00001fdb: 	movq	%rdi, -0xfb58(%rbp)
.Ltmp3384:
    00001fe2: 	addl	$0x1, -0xfba8(%rbp)
    00001fe9: 	movl	-0xfba8(%rbp), %eax
    00001fef: 	cmpl	%esi, %eax
    00001ff1: 	jl	.Ltmp3249 # Offset: 8177
.Ltmp3236:
    00001ff7: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00001ffe: 	movq	_Z7gLabelsB5cxx11+48(%rip), %r12
    00002005: 	subq	$0x20, %rax
    00002009: 	cmpq	%rax, %r12
    0000200c: 	je	.Ltmp3250 # Offset: 8204
    00002012: 	leaq	0x10(%r12), %rdi
    00002017: 	movq	-0xfa58(%rbp), %rsi
    0000201e: 	movq	%rdi, (%r12)
    00002022: 	movq	-0xfa60(%rbp), %rax
    00002029: 	movq	%rsi, -0xfba0(%rbp)
    00002030: 	movq	%rax, -0xfba8(%rbp)
    00002037: 	movq	%rax, %rcx
    0000203a: 	addq	%rsi, %rax
    0000203d: 	je	.Ltmp3251 # Offset: 8253
    0000203f: 	testq	%rcx, %rcx
    00002042: 	je	.Ltmp3252 # Offset: 8258
.Ltmp3251:
    00002048: 	movq	-0xfba0(%rbp), %rax
    0000204f: 	movq	%rax, -0xfb48(%rbp)
    00002056: 	cmpq	$0xf, %rax
    0000205a: 	ja	.Ltmp3253 # Offset: 8282
    00002060: 	cmpq	$0x1, -0xfba0(%rbp)
    00002068: 	jne	.Ltmp3254 # Offset: 8296
    0000206e: 	movq	-0xfba8(%rbp), %rax
    00002075: 	movzbl	(%rax), %eax
    00002078: 	movb	%al, 0x10(%r12)
.Ltmp3430:
    0000207d: 	movq	-0xfba0(%rbp), %rax
    00002084: 	movq	%rax, 0x8(%r12)
    00002089: 	movb	$0x0, (%rdi,%rax)
    0000208d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002094: 	addq	$0x20, %rax
    00002098: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp3440:
    0000209f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000020a6: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000020ad: 	je	.Ltmp3255 # Offset: 8365
.Ltmp3427:
    000020b3: 	movq	-0x20(%rax), %r12
    000020b7: 	callq	clock@PLT # Offset: 8375
    000020bc: 	pxor	%xmm0, %xmm0
    000020c0: 	movq	%rax, end_time(%rip)
    000020c7: 	movq	%r12, %rdi
    000020ca: 	subq	start_time(%rip), %rax
    000020d1: 	cvtsi2sd	%rax, %xmm0
    000020d6: 	divsd	DATAat0x24890(%rip), %xmm0
    000020de: 	callq	_Z13record_resultdPKc # Offset: 8414
    000020e3: 	movq	-0xfa60(%rbp), %rdi
    000020ea: 	cmpq	-0xfb98(%rbp), %rdi
    000020f1: 	je	.Ltmp3256 # Offset: 8433
    000020f3: 	movq	-0xfa50(%rbp), %rax
    000020fa: 	leaq	0x1(%rax), %rsi
    000020fe: 	callq	_ZdlPvm@PLT # Offset: 8446
.Ltmp3256:
    00002103: 	movq	-0xfb60(%rbp), %rsi
    0000210a: 	movq	-0xfb90(%rbp), %rdi
    00002111: 	leaq	DATAat0x246b3(%rip), %rdx
    00002118: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8472
    0000211d: 	callq	clock@PLT # Offset: 8477
    00002122: 	movl	iterations(%rip), %edx
    00002128: 	leaq	-0x40(%rbp), %r12
    0000212c: 	movl	$0x0, -0xfba8(%rbp)
    00002136: 	movq	%rax, start_time(%rip)
    0000213d: 	leaq	-0x3eb8(%rbp), %rax
    00002144: 	movq	%rax, -0xfba0(%rbp)
    0000214b: 	testl	%edx, %edx
    0000214d: 	jle	.Ltmp3257 # Offset: 8525
.Ltmp3272:
    00002153: 	movq	-0xfb68(%rbp), %rsi
    0000215a: 	movq	%rbx, %rdi
    0000215d: 	movl	$0x3e80, %edx
    00002162: 	callq	memcpy@PLT # Offset: 8546
    00002167: 	movq	%rbx, -0xfbb0(%rbp)
    0000216e: 	movq	%rbx, %rdi
    00002171: 	movq	%r12, %rbx
.Ltmp3268:
    00002174: 	movsd	(%rdi), %xmm1
    00002178: 	movq	-0xfb58(%rbp), %rcx
    0000217f: 	movq	%rdi, %rax
    00002182: 	movq	%rbx, %r12
    00002185: 	nopl	(%rax) # Size: 3
.Ltmp3262:
    00002188: 	movsd	-0x8(%r12), %xmm2
    0000218f: 	leaq	-0x8(%r12), %rdx
    00002194: 	comisd	%xmm1, %xmm2
    00002198: 	ja	.Ltmp3258 # Offset: 8600
    0000219a: 	cmpq	%rax, %rdx
    0000219d: 	jbe	.Ltmp3259 # Offset: 8605
    000021a3: 	movsd	(%rax), %xmm0
    000021a7: 	comisd	%xmm0, %xmm1
    000021ab: 	jbe	.Ltmp3260 # Offset: 8619
    000021ad: 	nopl	(%rax) # Size: 3
.Ltmp3261:
    000021b0: 	movsd	0x8(%rax), %xmm0
    000021b5: 	addq	$0x8, %rax
    000021b9: 	comisd	%xmm0, %xmm1
    000021bd: 	ja	.Ltmp3261 # Offset: 8637
    000021bf: 	cmpq	%rax, %rdx
    000021c2: 	jbe	.Ltmp3259 # Offset: 8642
.Ltmp3260:
    000021c8: 	movsd	%xmm0, (%rdx)
    000021cc: 	movsd	%xmm2, (%rax)
.Ltmp3258:
    000021d0: 	movq	%rdx, %r12
    000021d3: 	jmp	.Ltmp3262 # Offset: 8659
    000021d5: 	nopl	(%rax) # Size: 3
.Ltmp3121:
    000021d8: 	addq	$0x20, %r15
    000021dc: 	cmpq	%rbx, %r15
    000021df: 	jne	.Ltmp3122 # Offset: 8671
    000021e5: 	addq	$0x8, %r14
    000021e9: 	cmpq	%r14, -0xfb60(%rbp)
    000021f0: 	ja	.Ltmp3123 # Offset: 8688
    000021f6: 	jmp	.Ltmp3263 # Offset: 8694
.Ltmp3212:
    000021fb: 	movq	-0x7d40(%rbp), %rdx
    00002202: 	movq	%rdi, -0xfb58(%rbp)
    00002209: 	leaq	DATAat0x246f4(%rip), %rsi
    00002210: 	movl	$0x1, %edi
    00002215: 	xorl	%eax, %eax
    00002217: 	callq	__printf_chk@PLT # Offset: 8727
    0000221c: 	movl	iterations(%rip), %r15d
    00002223: 	jmp	.Ltmp3264 # Offset: 8739
.Ltmp3218:
    00002228: 	leaq	-0xfb48(%rbp), %rsi
    0000222f: 	xorl	%edx, %edx
    00002231: 	movq	%r14, %rdi
    00002234: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8756
    00002239: 	movq	%rax, (%r14)
    0000223c: 	movq	%rax, %rdi
    0000223f: 	movq	-0xfb48(%rbp), %rax
    00002246: 	movq	%rax, 0x10(%r14)
.Ltmp3435:
    0000224a: 	movq	%r12, %rdx
    0000224d: 	movq	%r15, %rsi
    00002250: 	callq	memcpy@PLT # Offset: 8784
    00002255: 	movq	-0xfb48(%rbp), %r12
    0000225c: 	movq	(%r14), %rdi
    0000225f: 	jmp	.Ltmp3265 # Offset: 8799
    00002264: 	nopl	(%rax) # Size: 4
.Ltmp3223:
    00002268: 	movq	%rsi, %rdi
    0000226b: 	jmp	.Ltmp3266 # Offset: 8811
.Ltmp3259:
    00002270: 	movq	%r12, %rsi
    00002273: 	movq	%rcx, -0xfb58(%rbp)
    0000227a: 	callq	_ZN9benchmark9quicksortIPdEEvT_S2_ # Offset: 8826
    0000227f: 	movq	%rbx, %rax
    00002282: 	subq	%r12, %rax
    00002285: 	cmpq	$0x8, %rax
    00002289: 	jle	.Ltmp3267 # Offset: 8841
    0000228b: 	movq	%r12, %rdi
    0000228e: 	jmp	.Ltmp3268 # Offset: 8846
    00002293: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3243:
    00002298: 	movq	%r14, %rdx
    0000229b: 	addq	$0x8, %rcx
    0000229f: 	movsd	%xmm1, (%rdx)
    000022a3: 	cmpq	%r15, %rcx
    000022a6: 	jne	.Ltmp3245 # Offset: 8870
    000022ac: 	jmp	.Ltmp3269 # Offset: 8876
.Ltmp3267:
    000022b1: 	movq	-0xfb58(%rbp), %rcx
    000022b8: 	movq	%rbx, %r12
    000022bb: 	movsd	-0x3ec0(%rbp), %xmm0
    000022c3: 	movq	-0xfbb0(%rbp), %rbx
    000022ca: 	movq	-0xfba0(%rbp), %rax
    000022d1: 	movq	%rcx, %rdi
    000022d4: 	nopl	(%rax) # Size: 4
.Ltmp3271:
    000022d8: 	addq	$0x8, %rax
    000022dc: 	movapd	%xmm0, %xmm1
    000022e0: 	movsd	-0x8(%rax), %xmm0
    000022e5: 	comisd	%xmm0, %xmm1
    000022e9: 	ja	.Ltmp3270 # Offset: 8937
    000022ef: 	cmpq	%r12, %rax
    000022f2: 	jne	.Ltmp3271 # Offset: 8946
    000022f4: 	movq	%rdi, -0xfb58(%rbp)
.Ltmp3391:
    000022fb: 	addl	$0x1, -0xfba8(%rbp)
    00002302: 	movl	-0xfba8(%rbp), %eax
    00002308: 	cmpl	iterations(%rip), %eax
    0000230e: 	jl	.Ltmp3272 # Offset: 8974
.Ltmp3257:
    00002314: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000231b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %r12
    00002322: 	subq	$0x20, %rax
    00002326: 	cmpq	%rax, %r12
    00002329: 	je	.Ltmp3273 # Offset: 9001
    0000232f: 	leaq	0x10(%r12), %rdi
    00002334: 	movq	-0xfa58(%rbp), %rsi
    0000233b: 	movq	%rdi, (%r12)
    0000233f: 	movq	-0xfa60(%rbp), %rax
    00002346: 	movq	%rsi, -0xfba0(%rbp)
    0000234d: 	movq	%rax, -0xfba8(%rbp)
    00002354: 	movq	%rax, %rcx
    00002357: 	addq	%rsi, %rax
    0000235a: 	je	.Ltmp3274 # Offset: 9050
    0000235c: 	testq	%rcx, %rcx
    0000235f: 	je	.Ltmp3275 # Offset: 9055
.Ltmp3274:
    00002365: 	movq	-0xfba0(%rbp), %rax
    0000236c: 	movq	%rax, -0xfb48(%rbp)
    00002373: 	cmpq	$0xf, %rax
    00002377: 	ja	.Ltmp3276 # Offset: 9079
    0000237d: 	cmpq	$0x1, -0xfba0(%rbp)
    00002385: 	jne	.Ltmp3277 # Offset: 9093
    0000238b: 	movq	-0xfba8(%rbp), %rax
    00002392: 	movzbl	(%rax), %eax
    00002395: 	movb	%al, 0x10(%r12)
.Ltmp3424:
    0000239a: 	movq	-0xfba0(%rbp), %rax
    000023a1: 	movq	%rax, 0x8(%r12)
    000023a6: 	movb	$0x0, (%rdi,%rax)
    000023aa: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000023b1: 	addq	$0x20, %rax
    000023b5: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp3426:
    000023bc: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000023c3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000023ca: 	je	.Ltmp3278 # Offset: 9162
.Ltmp3421:
    000023d0: 	movq	-0x20(%rax), %r12
    000023d4: 	callq	clock@PLT # Offset: 9172
    000023d9: 	pxor	%xmm0, %xmm0
    000023dd: 	movq	%rax, end_time(%rip)
    000023e4: 	movq	%r12, %rdi
    000023e7: 	subq	start_time(%rip), %rax
    000023ee: 	cvtsi2sd	%rax, %xmm0
    000023f3: 	divsd	DATAat0x24890(%rip), %xmm0
    000023fb: 	callq	_Z13record_resultdPKc # Offset: 9211
    00002400: 	movq	-0xfa60(%rbp), %rdi
    00002407: 	cmpq	-0xfb98(%rbp), %rdi
    0000240e: 	je	.Ltmp3279 # Offset: 9230
    00002410: 	movq	-0xfa50(%rbp), %rax
    00002417: 	leaq	0x1(%rax), %rsi
    0000241b: 	callq	_ZdlPvm@PLT # Offset: 9243
.Ltmp3279:
    00002420: 	movq	-0xfb60(%rbp), %rsi
    00002427: 	movq	-0xfb90(%rbp), %rdi
    0000242e: 	leaq	DATAat0x247f8(%rip), %rdx
    00002435: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9269
    0000243a: 	callq	clock@PLT # Offset: 9274
    0000243f: 	movl	$0x0, -0xfba8(%rbp)
    00002449: 	movq	%rax, start_time(%rip)
    00002450: 	leaq	-0x7d38(%rbp), %rax
    00002457: 	movq	%rax, -0xfba0(%rbp)
    0000245e: 	movl	iterations(%rip), %eax
    00002464: 	testl	%eax, %eax
    00002466: 	jle	.Ltmp3280 # Offset: 9318
.Ltmp3290:
    0000246c: 	movq	-0xfb58(%rbp), %r12
    00002473: 	movq	-0xfb80(%rbp), %rsi
    0000247a: 	movl	$0x3e80, %edx
    0000247f: 	movq	%r12, %rdi
    00002482: 	callq	memcpy@PLT # Offset: 9346
    00002487: 	movq	%r12, -0xfb58(%rbp)
    0000248e: 	movq	%r12, %rdi
.Ltmp3287:
    00002491: 	movsd	(%rdi), %xmm1
    00002495: 	movq	-0xfb58(%rbp), %rcx
    0000249c: 	movq	%rdi, %rax
    0000249f: 	movq	%rbx, %r12
    000024a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3285:
    000024a8: 	movsd	-0x8(%r12), %xmm2
    000024af: 	leaq	-0x8(%r12), %rdx
    000024b4: 	comisd	%xmm1, %xmm2
    000024b8: 	ja	.Ltmp3281 # Offset: 9400
    000024ba: 	cmpq	%rax, %rdx
    000024bd: 	jbe	.Ltmp3282 # Offset: 9405
    000024bf: 	movsd	(%rax), %xmm0
    000024c3: 	comisd	%xmm0, %xmm1
    000024c7: 	jbe	.Ltmp3283 # Offset: 9415
    000024c9: 	movq	%rcx, %rsi
    000024cc: 	nopl	(%rax) # Size: 4
.Ltmp3284:
    000024d0: 	movsd	0x8(%rax), %xmm0
    000024d5: 	addq	$0x8, %rax
    000024d9: 	comisd	%xmm0, %xmm1
    000024dd: 	ja	.Ltmp3284 # Offset: 9437
    000024df: 	movq	%rsi, %rcx
    000024e2: 	cmpq	%rax, %rdx
    000024e5: 	jbe	.Ltmp3282 # Offset: 9445
.Ltmp3283:
    000024e7: 	movsd	%xmm0, (%rdx)
    000024eb: 	movsd	%xmm2, (%rax)
.Ltmp3281:
    000024ef: 	movq	%rdx, %r12
    000024f2: 	jmp	.Ltmp3285 # Offset: 9458
    000024f4: 	nopl	(%rax) # Size: 4
.Ltmp3282:
    000024f8: 	movq	%r12, %rsi
    000024fb: 	movq	%rcx, -0xfb58(%rbp)
    00002502: 	callq	_ZN9benchmark9quicksortIPdEEvT_S2_ # Offset: 9474
    00002507: 	movq	%rbx, %rax
    0000250a: 	subq	%r12, %rax
    0000250d: 	cmpq	$0x8, %rax
    00002511: 	jle	.Ltmp3286 # Offset: 9489
    00002513: 	movq	%r12, %rdi
    00002516: 	jmp	.Ltmp3287 # Offset: 9494
.Ltmp3286:
    0000251b: 	movq	-0xfb58(%rbp), %rcx
    00002522: 	movsd	-0x7d40(%rbp), %xmm0
    0000252a: 	movq	-0xfba0(%rbp), %rax
    00002531: 	movq	%rcx, %rsi
    00002534: 	nopl	(%rax) # Size: 4
.Ltmp3289:
    00002538: 	addq	$0x8, %rax
    0000253c: 	movapd	%xmm0, %xmm1
    00002540: 	movsd	-0x8(%rax), %xmm0
    00002545: 	comisd	%xmm0, %xmm1
    00002549: 	ja	.Ltmp3288 # Offset: 9545
    0000254f: 	cmpq	%rbx, %rax
    00002552: 	jne	.Ltmp3289 # Offset: 9554
    00002554: 	movq	%rsi, -0xfb58(%rbp)
.Ltmp3390:
    0000255b: 	addl	$0x1, -0xfba8(%rbp)
    00002562: 	movl	-0xfba8(%rbp), %eax
    00002568: 	cmpl	iterations(%rip), %eax
    0000256e: 	jl	.Ltmp3290 # Offset: 9582
.Ltmp3280:
    00002574: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000257b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %r12
    00002582: 	subq	$0x20, %rax
    00002586: 	cmpq	%rax, %r12
    00002589: 	je	.Ltmp3291 # Offset: 9609
    0000258f: 	leaq	0x10(%r12), %rdi
    00002594: 	movq	-0xfa58(%rbp), %rcx
    0000259b: 	movq	%rdi, (%r12)
    0000259f: 	movq	-0xfa60(%rbp), %rax
    000025a6: 	movq	%rcx, -0xfba0(%rbp)
    000025ad: 	movq	%rax, -0xfba8(%rbp)
    000025b4: 	movq	%rax, %rsi
    000025b7: 	addq	%rcx, %rax
    000025ba: 	je	.Ltmp3292 # Offset: 9658
    000025bc: 	testq	%rsi, %rsi
    000025bf: 	je	.Ltmp3293 # Offset: 9663
.Ltmp3292:
    000025c5: 	movq	-0xfba0(%rbp), %rax
    000025cc: 	movq	%rax, -0xfb48(%rbp)
    000025d3: 	cmpq	$0xf, %rax
    000025d7: 	ja	.Ltmp3294 # Offset: 9687
    000025dd: 	cmpq	$0x1, -0xfba0(%rbp)
    000025e5: 	jne	.Ltmp3295 # Offset: 9701
    000025eb: 	movq	-0xfba8(%rbp), %rax
    000025f2: 	movzbl	(%rax), %eax
    000025f5: 	movb	%al, 0x10(%r12)
.Ltmp3422:
    000025fa: 	movq	-0xfba0(%rbp), %rax
    00002601: 	movq	%rax, 0x8(%r12)
    00002606: 	movb	$0x0, (%rdi,%rax)
    0000260a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002611: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002618: 	addq	$0x20, %rax
    0000261c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00002623: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000262a: 	je	.Ltmp3296 # Offset: 9770
.Ltmp3423:
    00002630: 	movq	-0x20(%rax), %r12
    00002634: 	callq	clock@PLT # Offset: 9780
    00002639: 	pxor	%xmm0, %xmm0
    0000263d: 	movq	%rax, end_time(%rip)
    00002644: 	movq	%r12, %rdi
    00002647: 	subq	start_time(%rip), %rax
    0000264e: 	cvtsi2sd	%rax, %xmm0
    00002653: 	divsd	DATAat0x24890(%rip), %xmm0
    0000265b: 	callq	_Z13record_resultdPKc # Offset: 9819
    00002660: 	movq	-0xfa60(%rbp), %rdi
    00002667: 	cmpq	-0xfb98(%rbp), %rdi
    0000266e: 	je	.Ltmp3297 # Offset: 9838
    00002670: 	movq	-0xfa50(%rbp), %rax
    00002677: 	leaq	0x1(%rax), %rsi
    0000267b: 	callq	_ZdlPvm@PLT # Offset: 9851
.Ltmp3297:
    00002680: 	movq	-0xfb60(%rbp), %rsi
    00002687: 	movq	-0xfb90(%rbp), %rdi
    0000268e: 	leaq	DATAat0x24818(%rip), %rdx
    00002695: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9877
    0000269a: 	callq	clock@PLT # Offset: 9882
    0000269f: 	movq	%rax, start_time(%rip)
    000026a6: 	movl	iterations(%rip), %eax
    000026ac: 	movl	%eax, -0xfbb0(%rbp)
    000026b2: 	testl	%eax, %eax
    000026b4: 	jle	.Ltmp3298 # Offset: 9908
    000026ba: 	movq	%r15, %rax
    000026bd: 	leaq	0x8(%r13), %rdx
    000026c1: 	movl	$0x0, -0xfba8(%rbp)
    000026cb: 	subq	%r14, %rax
    000026ce: 	movq	%rax, -0xfbb8(%rbp)
    000026d5: 	leaq	0x8(%r14), %rax
    000026d9: 	movq	%rax, -0xfbc0(%rbp)
    000026e0: 	movq	-0xfb70(%rbp), %rax
    000026e7: 	subq	$0x8, %rax
    000026eb: 	subq	%r13, %rax
    000026ee: 	cmpq	%rdx, %r14
    000026f1: 	setne	%cl
    000026f4: 	cmpq	$0x10, %rax
    000026f8: 	seta	%dl
    000026fb: 	shrq	$0x3, %rax
    000026ff: 	andl	%edx, %ecx
    00002701: 	movb	%cl, -0xfbc8(%rbp)
    00002707: 	leaq	0x1(%rax), %rcx
    0000270b: 	movq	%rcx, %rax
    0000270e: 	movq	%rcx, -0xfbe8(%rbp)
    00002715: 	andq	$-0x2, %rcx
    00002719: 	shrq	%rax
    0000271c: 	movq	%rcx, -0xfbe0(%rbp)
    00002723: 	shlq	$0x4, %rax
    00002727: 	movq	%rax, -0xfbd8(%rbp)
    0000272e: 	leaq	(,%rcx,8), %rax
    00002736: 	leaq	(%r13,%rax), %r12
    0000273b: 	addq	%r14, %rax
    0000273e: 	movq	%rax, -0xfba0(%rbp)
.Ltmp3311:
    00002745: 	cmpq	%r13, -0xfb70(%rbp)
    0000274c: 	je	.Ltmp3299 # Offset: 10060
    0000274e: 	cmpb	$0x0, -0xfbc8(%rbp)
    00002755: 	je	.Ltmp3300 # Offset: 10069
    0000275b: 	movq	-0xfbd8(%rbp), %rdx
    00002762: 	movq	-0xfb58(%rbp), %rdi
    00002769: 	xorl	%eax, %eax
    0000276b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3301:
    00002770: 	movupd	(%r13,%rax), %xmm4
    00002777: 	movups	%xmm4, (%r14,%rax)
    0000277c: 	addq	$0x10, %rax
    00002780: 	cmpq	%rdx, %rax
    00002783: 	jne	.Ltmp3301 # Offset: 10115
    00002785: 	movq	%rdi, -0xfb58(%rbp)
    0000278c: 	movq	-0xfbe8(%rbp), %rcx
    00002793: 	cmpq	%rcx, -0xfbe0(%rbp)
    0000279a: 	je	.Ltmp3299 # Offset: 10138
    0000279c: 	movsd	(%r12), %xmm0
    000027a2: 	movq	-0xfba0(%rbp), %rax
    000027a9: 	movsd	%xmm0, (%rax)
.Ltmp3299:
    000027ad: 	cmpq	$0x8, -0xfbb8(%rbp)
    000027b5: 	jle	.Ltmp3302 # Offset: 10165
    000027bb: 	movsd	(%r14), %xmm1
    000027c0: 	movq	-0xfb58(%rbp), %rdi
    000027c7: 	movq	%r15, %r8
    000027ca: 	movq	%r14, %rdx
    000027cd: 	nopl	(%rax) # Size: 3
.Ltmp3307:
    000027d0: 	movsd	-0x8(%r8), %xmm2
    000027d6: 	leaq	-0x8(%r8), %rcx
    000027da: 	comisd	%xmm1, %xmm2
    000027de: 	ja	.Ltmp3303 # Offset: 10206
    000027e0: 	cmpq	%rdx, %rcx
    000027e3: 	jbe	.Ltmp3304 # Offset: 10211
    000027e9: 	movsd	(%rdx), %xmm0
    000027ed: 	leaq	0x8(%rdx), %rax
    000027f1: 	comisd	%xmm0, %xmm1
    000027f5: 	jbe	.Ltmp3305 # Offset: 10229
    000027f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3306:
    00002800: 	movq	%rax, %rdx
    00002803: 	movsd	(%rax), %xmm0
    00002807: 	leaq	0x8(%rax), %rax
    0000280b: 	comisd	%xmm0, %xmm1
    0000280f: 	ja	.Ltmp3306 # Offset: 10255
    00002811: 	cmpq	%rdx, %rcx
    00002814: 	jbe	.Ltmp3304 # Offset: 10260
.Ltmp3305:
    0000281a: 	movsd	%xmm0, (%rcx)
    0000281e: 	movsd	%xmm2, (%rdx)
.Ltmp3303:
    00002822: 	movq	%rcx, %r8
    00002825: 	jmp	.Ltmp3307 # Offset: 10277
.Ltmp3399:
    00002827: 	movq	%rsi, -0xfb58(%rbp)
    0000282e: 	movq	%r8, %rsi
    00002831: 	movq	%r8, -0xfbf8(%rbp)
    00002838: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 10296
    0000283d: 	movq	-0xfbf8(%rbp), %rdi
    00002844: 	movq	%r15, %rsi
    00002847: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 10311
.Ltmp3302:
    0000284c: 	movq	-0xfbc0(%rbp), %rax
    00002853: 	movq	-0xfb58(%rbp), %rsi
    0000285a: 	jmp	.Ltmp3308 # Offset: 10330
    0000285c: 	nopl	(%rax) # Size: 4
.Ltmp3310:
    00002860: 	addq	$0x8, %rax
    00002864: 	movsd	-0x10(%rax), %xmm0
    00002869: 	comisd	(%rdx), %xmm0
    0000286d: 	ja	.Ltmp3309 # Offset: 10349
.Ltmp3308:
    00002873: 	movq	%rax, %rdx
    00002876: 	cmpq	%rax, %r15
    00002879: 	jne	.Ltmp3310 # Offset: 10361
    0000287b: 	movq	%rsi, -0xfb58(%rbp)
.Ltmp3386:
    00002882: 	addl	$0x1, -0xfba8(%rbp)
    00002889: 	movl	-0xfba8(%rbp), %eax
    0000288f: 	cmpl	-0xfbb0(%rbp), %eax
    00002895: 	jl	.Ltmp3311 # Offset: 10389
.Ltmp3298:
    0000289b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000028a2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %r12
    000028a9: 	subq	$0x20, %rax
    000028ad: 	cmpq	%rax, %r12
    000028b0: 	je	.Ltmp3312 # Offset: 10416
    000028b6: 	leaq	0x10(%r12), %rdi
    000028bb: 	movq	-0xfa58(%rbp), %rcx
    000028c2: 	movq	%rdi, (%r12)
    000028c6: 	movq	-0xfa60(%rbp), %rax
    000028cd: 	movq	%rcx, -0xfba0(%rbp)
    000028d4: 	movq	%rax, -0xfba8(%rbp)
    000028db: 	movq	%rax, %rsi
    000028de: 	addq	%rcx, %rax
    000028e1: 	je	.Ltmp3313 # Offset: 10465
    000028e3: 	testq	%rsi, %rsi
    000028e6: 	je	.Ltmp3314 # Offset: 10470
.Ltmp3313:
    000028ec: 	movq	-0xfba0(%rbp), %rax
    000028f3: 	movq	%rax, -0xfb48(%rbp)
    000028fa: 	cmpq	$0xf, %rax
    000028fe: 	ja	.Ltmp3315 # Offset: 10494
    00002904: 	cmpq	$0x1, -0xfba0(%rbp)
    0000290c: 	jne	.Ltmp3316 # Offset: 10508
    00002912: 	movq	-0xfba8(%rbp), %rax
    00002919: 	movzbl	(%rax), %eax
    0000291c: 	movb	%al, 0x10(%r12)
.Ltmp3445:
    00002921: 	movq	-0xfba0(%rbp), %rax
    00002928: 	movq	%rax, 0x8(%r12)
    0000292d: 	movb	$0x0, (%rdi,%rax)
    00002931: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002938: 	addq	$0x20, %rax
    0000293c: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp3447:
    00002943: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000294a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002951: 	je	.Ltmp3317 # Offset: 10577
.Ltmp3444:
    00002957: 	movq	-0x20(%rax), %r12
    0000295b: 	callq	clock@PLT # Offset: 10587
    00002960: 	pxor	%xmm0, %xmm0
    00002964: 	movq	%rax, end_time(%rip)
    0000296b: 	movq	%r12, %rdi
    0000296e: 	subq	start_time(%rip), %rax
    00002975: 	cvtsi2sd	%rax, %xmm0
    0000297a: 	divsd	DATAat0x24890(%rip), %xmm0
    00002982: 	callq	_Z13record_resultdPKc # Offset: 10626
    00002987: 	movq	-0xfa60(%rbp), %rdi
    0000298e: 	cmpq	-0xfb98(%rbp), %rdi
    00002995: 	je	.Ltmp3318 # Offset: 10645
    00002997: 	movq	-0xfa50(%rbp), %rax
    0000299e: 	leaq	0x1(%rax), %rsi
    000029a2: 	callq	_ZdlPvm@PLT # Offset: 10658
.Ltmp3318:
    000029a7: 	movq	-0xfb60(%rbp), %rsi
    000029ae: 	movq	-0xfb90(%rbp), %rdi
    000029b5: 	leaq	DATAat0x246c7(%rip), %rdx
    000029bc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10684
    000029c1: 	callq	clock@PLT # Offset: 10689
    000029c6: 	leaq	-0x3eb8(%rbp), %rsi
    000029cd: 	leaq	-0x40(%rbp), %rcx
    000029d1: 	movl	$0x0, -0xfba8(%rbp)
    000029db: 	movq	%rax, start_time(%rip)
    000029e2: 	movl	iterations(%rip), %eax
    000029e8: 	movq	%rsi, -0xfba0(%rbp)
    000029ef: 	movl	%eax, -0xfbb0(%rbp)
    000029f5: 	movq	%rcx, -0xfbb8(%rbp)
    000029fc: 	testl	%eax, %eax
    000029fe: 	jle	.Ltmp3319 # Offset: 10750
.Ltmp3324:
    00002a04: 	movq	-0xfb68(%rbp), %rsi
    00002a0b: 	movl	$0x3e80, %edx
    00002a10: 	movq	%rbx, %rdi
    00002a13: 	movl	$0x3e7, %r12d
    00002a19: 	callq	memcpy@PLT # Offset: 10777
    00002a1e: 	nop # Size: 2
.Ltmp3320:
    00002a20: 	movsd	(%rbx,%r12,8), %xmm0
    00002a26: 	movq	%r12, %rdx
    00002a29: 	movq	%rbx, %rsi
    00002a2c: 	movl	$0x7d0, %edi
    00002a31: 	callq	_ZN9benchmark9__sift_inIPddEEvlT_lT0_ # Offset: 10801
    00002a36: 	subq	$0x1, %r12
    00002a3a: 	jae	.Ltmp3320 # Offset: 10810
    00002a3c: 	movl	$0x7cf, %r12d
    00002a42: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3321:
    00002a48: 	movsd	-0x3ec0(%rbp), %xmm1
    00002a50: 	xorl	%edx, %edx
    00002a52: 	movq	%r12, %rdi
    00002a55: 	movq	%rbx, %rsi
    00002a58: 	movsd	(%rbx,%r12,8), %xmm0
    00002a5e: 	movsd	%xmm1, (%rbx,%r12,8)
    00002a64: 	callq	_ZN9benchmark9__sift_inIPddEEvlT_lT0_ # Offset: 10852
    00002a69: 	subq	$0x1, %r12
    00002a6d: 	jne	.Ltmp3321 # Offset: 10861
    00002a6f: 	movq	-0xfb58(%rbp), %rcx
    00002a76: 	movsd	-0x3ec0(%rbp), %xmm0
    00002a7e: 	movq	-0xfba0(%rbp), %rax
    00002a85: 	movq	-0xfbb8(%rbp), %rdx
    00002a8c: 	movq	%rcx, %rdi
    00002a8f: 	nop # Size: 1
.Ltmp3323:
    00002a90: 	addq	$0x8, %rax
    00002a94: 	movapd	%xmm0, %xmm1
    00002a98: 	movsd	-0x8(%rax), %xmm0
    00002a9d: 	comisd	%xmm0, %xmm1
    00002aa1: 	ja	.Ltmp3322 # Offset: 10913
    00002aa7: 	cmpq	%rdx, %rax
    00002aaa: 	jne	.Ltmp3323 # Offset: 10922
    00002aac: 	movq	%rdi, -0xfb58(%rbp)
.Ltmp3388:
    00002ab3: 	addl	$0x1, -0xfba8(%rbp)
    00002aba: 	movl	-0xfba8(%rbp), %eax
    00002ac0: 	cmpl	-0xfbb0(%rbp), %eax
    00002ac6: 	jl	.Ltmp3324 # Offset: 10950
.Ltmp3319:
    00002acc: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00002ad3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %r12
    00002ada: 	subq	$0x20, %rax
    00002ade: 	cmpq	%rax, %r12
    00002ae1: 	je	.Ltmp3325 # Offset: 10977
    00002ae7: 	leaq	0x10(%r12), %rdi
    00002aec: 	movq	-0xfa58(%rbp), %rsi
    00002af3: 	movq	%rdi, (%r12)
    00002af7: 	movq	-0xfa60(%rbp), %rax
    00002afe: 	movq	%rsi, -0xfb68(%rbp)
    00002b05: 	movq	%rax, -0xfba0(%rbp)
    00002b0c: 	movq	%rax, %rcx
    00002b0f: 	addq	%rsi, %rax
    00002b12: 	je	.Ltmp3326 # Offset: 11026
    00002b14: 	testq	%rcx, %rcx
    00002b17: 	je	.Ltmp3327 # Offset: 11031
.Ltmp3326:
    00002b1d: 	movq	-0xfb68(%rbp), %rax
    00002b24: 	movq	%rax, -0xfb48(%rbp)
    00002b2b: 	cmpq	$0xf, %rax
    00002b2f: 	ja	.Ltmp3328 # Offset: 11055
    00002b35: 	cmpq	$0x1, -0xfb68(%rbp)
    00002b3d: 	jne	.Ltmp3329 # Offset: 11069
    00002b43: 	movq	-0xfba0(%rbp), %rax
    00002b4a: 	movzbl	(%rax), %eax
    00002b4d: 	movb	%al, 0x10(%r12)
.Ltmp3438:
    00002b52: 	movq	-0xfb68(%rbp), %rax
    00002b59: 	movq	%rax, 0x8(%r12)
    00002b5e: 	movb	$0x0, (%rdi,%rax)
    00002b62: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002b69: 	addq	$0x20, %rax
    00002b6d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp3437:
    00002b74: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00002b7b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002b82: 	je	.Ltmp3330 # Offset: 11138
.Ltmp3436:
    00002b88: 	movq	-0x20(%rax), %r12
    00002b8c: 	callq	clock@PLT # Offset: 11148
    00002b91: 	pxor	%xmm0, %xmm0
    00002b95: 	movq	%rax, end_time(%rip)
    00002b9c: 	movq	%r12, %rdi
    00002b9f: 	subq	start_time(%rip), %rax
    00002ba6: 	cvtsi2sd	%rax, %xmm0
    00002bab: 	divsd	DATAat0x24890(%rip), %xmm0
    00002bb3: 	callq	_Z13record_resultdPKc # Offset: 11187
    00002bb8: 	movq	-0xfa60(%rbp), %rdi
    00002bbf: 	cmpq	-0xfb98(%rbp), %rdi
    00002bc6: 	je	.Ltmp3331 # Offset: 11206
    00002bc8: 	movq	-0xfa50(%rbp), %rax
    00002bcf: 	leaq	0x1(%rax), %rsi
    00002bd3: 	callq	_ZdlPvm@PLT # Offset: 11219
.Ltmp3331:
    00002bd8: 	movq	-0xfb60(%rbp), %rsi
    00002bdf: 	movq	-0xfb90(%rbp), %rdi
    00002be6: 	leaq	DATAat0x24840(%rip), %rdx
    00002bed: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11245
    00002bf2: 	callq	clock@PLT # Offset: 11250
    00002bf7: 	leaq	-0x7d38(%rbp), %rsi
    00002bfe: 	movl	$0x0, -0xfb68(%rbp)
    00002c08: 	movq	%rax, start_time(%rip)
    00002c0f: 	movl	iterations(%rip), %eax
    00002c15: 	movq	%rsi, -0xfba0(%rbp)
    00002c1c: 	movl	%eax, -0xfba8(%rbp)
    00002c22: 	testl	%eax, %eax
    00002c24: 	jle	.Ltmp3332 # Offset: 11300
.Ltmp3337:
    00002c2a: 	movq	-0xfb80(%rbp), %rsi
    00002c31: 	movq	-0xfb58(%rbp), %rdi
    00002c38: 	movl	$0x3e80, %edx
    00002c3d: 	movl	$0x3e7, %r12d
    00002c43: 	callq	memcpy@PLT # Offset: 11331
    00002c48: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3333:
    00002c50: 	movq	-0xfb58(%rbp), %rsi
    00002c57: 	movq	%r12, %rdx
    00002c5a: 	movl	$0x7d0, %edi
    00002c5f: 	movsd	(%rsi,%r12,8), %xmm0
    00002c65: 	callq	_ZN9benchmark9__sift_inIPddEEvlT_lT0_ # Offset: 11365
    00002c6a: 	subq	$0x1, %r12
    00002c6e: 	jae	.Ltmp3333 # Offset: 11374
    00002c70: 	movl	$0x7cf, %r12d
    00002c76: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3334:
    00002c80: 	movq	-0xfb58(%rbp), %rax
    00002c87: 	movsd	-0x7d40(%rbp), %xmm1
    00002c8f: 	xorl	%edx, %edx
    00002c91: 	movq	%r12, %rdi
    00002c94: 	movsd	(%rax,%r12,8), %xmm0
    00002c9a: 	movq	%rax, %rsi
    00002c9d: 	movsd	%xmm1, (%rax,%r12,8)
    00002ca3: 	callq	_ZN9benchmark9__sift_inIPddEEvlT_lT0_ # Offset: 11427
    00002ca8: 	subq	$0x1, %r12
    00002cac: 	jne	.Ltmp3334 # Offset: 11436
    00002cae: 	movq	-0xfb58(%rbp), %rcx
    00002cb5: 	movsd	-0x7d40(%rbp), %xmm0
    00002cbd: 	movq	-0xfba0(%rbp), %rax
    00002cc4: 	movq	%rcx, %rdi
    00002cc7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3336:
    00002cd0: 	addq	$0x8, %rax
    00002cd4: 	movapd	%xmm0, %xmm1
    00002cd8: 	movsd	-0x8(%rax), %xmm0
    00002cdd: 	comisd	%xmm0, %xmm1
    00002ce1: 	ja	.Ltmp3335 # Offset: 11489
    00002ce7: 	cmpq	%rbx, %rax
    00002cea: 	jne	.Ltmp3336 # Offset: 11498
    00002cec: 	movq	%rdi, -0xfb58(%rbp)
.Ltmp3387:
    00002cf3: 	addl	$0x1, -0xfb68(%rbp)
    00002cfa: 	movl	-0xfb68(%rbp), %eax
    00002d00: 	cmpl	-0xfba8(%rbp), %eax
    00002d06: 	jl	.Ltmp3337 # Offset: 11526
.Ltmp3332:
    00002d0c: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00002d13: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00002d1a: 	subq	$0x20, %rax
    00002d1e: 	cmpq	%rax, %rbx
    00002d21: 	je	.Ltmp3338 # Offset: 11553
    00002d27: 	leaq	0x10(%rbx), %rdi
    00002d2b: 	movq	-0xfa58(%rbp), %r12
    00002d32: 	movq	%rdi, (%rbx)
    00002d35: 	movq	-0xfa60(%rbp), %rax
    00002d3c: 	movq	%rax, -0xfb58(%rbp)
    00002d43: 	movq	%rax, %rsi
    00002d46: 	addq	%r12, %rax
    00002d49: 	je	.Ltmp3339 # Offset: 11593
    00002d4b: 	testq	%rsi, %rsi
    00002d4e: 	je	.Ltmp3340 # Offset: 11598
.Ltmp3339:
    00002d54: 	movq	%r12, -0xfb48(%rbp)
    00002d5b: 	cmpq	$0xf, %r12
    00002d5f: 	ja	.Ltmp3341 # Offset: 11615
    00002d65: 	cmpq	$0x1, %r12
    00002d69: 	jne	.Ltmp3342 # Offset: 11625
    00002d6f: 	movq	-0xfb58(%rbp), %rax
    00002d76: 	movzbl	(%rax), %eax
    00002d79: 	movb	%al, 0x10(%rbx)
.Ltmp3417:
    00002d7c: 	movq	%r12, 0x8(%rbx)
    00002d80: 	movb	$0x0, (%rdi,%r12)
    00002d85: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002d8c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002d93: 	addq	$0x20, %rax
    00002d97: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00002d9e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00002da5: 	je	.Ltmp3343 # Offset: 11685
.Ltmp3418:
    00002dab: 	movq	-0x20(%rax), %rbx
    00002daf: 	callq	clock@PLT # Offset: 11695
    00002db4: 	pxor	%xmm0, %xmm0
    00002db8: 	movq	%rax, end_time(%rip)
    00002dbf: 	movq	%rbx, %rdi
    00002dc2: 	subq	start_time(%rip), %rax
    00002dc9: 	cvtsi2sd	%rax, %xmm0
    00002dce: 	divsd	DATAat0x24890(%rip), %xmm0
    00002dd6: 	callq	_Z13record_resultdPKc # Offset: 11734
    00002ddb: 	movq	-0xfa60(%rbp), %rdi
    00002de2: 	cmpq	-0xfb98(%rbp), %rdi
    00002de9: 	je	.Ltmp3344 # Offset: 11753
    00002deb: 	movq	-0xfa50(%rbp), %rax
    00002df2: 	leaq	0x1(%rax), %rsi
    00002df6: 	callq	_ZdlPvm@PLT # Offset: 11766
.Ltmp3344:
    00002dfb: 	movq	-0xfb60(%rbp), %rsi
    00002e02: 	movq	-0xfb90(%rbp), %rdi
    00002e09: 	leaq	DATAat0x24860(%rip), %rdx
    00002e10: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11792
    00002e15: 	callq	clock@PLT # Offset: 11797
    00002e1a: 	movq	%rax, start_time(%rip)
    00002e21: 	movl	iterations(%rip), %eax
    00002e27: 	movl	%eax, -0xfba0(%rbp)
    00002e2d: 	testl	%eax, %eax
    00002e2f: 	jle	.Ltmp3345 # Offset: 11823
    00002e35: 	movq	%r15, %rax
    00002e38: 	leaq	0x8(%r13), %rdx
    00002e3c: 	movl	$0x0, -0xfb80(%rbp)
    00002e46: 	subq	%r14, %rax
    00002e49: 	movq	%rax, %rbx
    00002e4c: 	shrq	$0x3f, %rax
    00002e50: 	sarq	$0x3, %rbx
    00002e54: 	addq	%rbx, %rax
    00002e57: 	sarq	%rax
    00002e5a: 	subq	$0x1, %rax
    00002e5e: 	movq	%rax, -0xfba8(%rbp)
    00002e65: 	leaq	-0x1(%rbx), %rax
    00002e69: 	movq	%rax, -0xfbb0(%rbp)
    00002e70: 	leaq	0x8(%r14), %rax
    00002e74: 	movq	%rax, -0xfbc0(%rbp)
    00002e7b: 	movq	-0xfb70(%rbp), %rax
    00002e82: 	subq	$0x8, %rax
    00002e86: 	subq	%r13, %rax
    00002e89: 	cmpq	%rdx, %r14
    00002e8c: 	setne	%cl
    00002e8f: 	cmpq	$0x10, %rax
    00002e93: 	seta	%dl
    00002e96: 	shrq	$0x3, %rax
    00002e9a: 	andl	%edx, %ecx
    00002e9c: 	movb	%cl, -0xfbb8(%rbp)
    00002ea2: 	leaq	0x1(%rax), %rcx
    00002ea6: 	movq	%rcx, %rax
    00002ea9: 	movq	%rcx, -0xfbe0(%rbp)
    00002eb0: 	andq	$-0x2, %rcx
    00002eb4: 	shrq	%rax
    00002eb7: 	movq	%rcx, -0xfbc8(%rbp)
    00002ebe: 	shlq	$0x4, %rax
    00002ec2: 	movq	%rax, -0xfbd8(%rbp)
    00002ec9: 	leaq	(,%rcx,8), %rax
    00002ed1: 	leaq	(%r13,%rax), %rcx
    00002ed6: 	addq	%r14, %rax
    00002ed9: 	movq	%rcx, -0xfb58(%rbp)
    00002ee0: 	movq	%rax, -0xfb68(%rbp)
.Ltmp3356:
    00002ee7: 	cmpq	%r13, -0xfb70(%rbp)
    00002eee: 	je	.Ltmp3346 # Offset: 12014
    00002ef0: 	cmpb	$0x0, -0xfbb8(%rbp)
    00002ef7: 	je	.Ltmp3347 # Offset: 12023
    00002efd: 	movq	-0xfb58(%rbp), %rsi
    00002f04: 	movq	-0xfbd8(%rbp), %rdx
    00002f0b: 	xorl	%eax, %eax
    00002f0d: 	nopl	(%rax) # Size: 3
.Ltmp3348:
    00002f10: 	movupd	(%r13,%rax), %xmm5
    00002f17: 	movups	%xmm5, (%r14,%rax)
    00002f1c: 	addq	$0x10, %rax
    00002f20: 	cmpq	%rdx, %rax
    00002f23: 	jne	.Ltmp3348 # Offset: 12067
    00002f25: 	movq	%rsi, -0xfb58(%rbp)
    00002f2c: 	movq	-0xfbe0(%rbp), %rcx
    00002f33: 	cmpq	%rcx, -0xfbc8(%rbp)
    00002f3a: 	je	.Ltmp3346 # Offset: 12090
    00002f3c: 	movsd	(%rsi), %xmm0
    00002f40: 	movq	-0xfb68(%rbp), %rax
    00002f47: 	movsd	%xmm0, (%rax)
.Ltmp3346:
    00002f4b: 	movq	-0xfba8(%rbp), %rax
    00002f52: 	movq	%rax, %r12
    00002f55: 	testq	%rax, %rax
    00002f58: 	js	.Ltmp3349 # Offset: 12120
    00002f5a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3350:
    00002f60: 	movsd	(%r14,%r12,8), %xmm0
    00002f66: 	movq	%r12, %rdx
    00002f69: 	movq	%r14, %rsi
    00002f6c: 	movq	%rbx, %rdi
    00002f6f: 	callq	_ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEEvlT_lT0_ # Offset: 12143
    00002f74: 	subq	$0x1, %r12
    00002f78: 	jae	.Ltmp3350 # Offset: 12152
.Ltmp3349:
    00002f7a: 	movq	-0xfbb0(%rbp), %rax
    00002f81: 	movq	-0xfb58(%rbp), %rcx
    00002f88: 	movq	%rax, %r12
    00002f8b: 	testq	%rax, %rax
    00002f8e: 	jle	.Ltmp3351 # Offset: 12174
.Ltmp3352:
    00002f90: 	movsd	(%r14), %xmm1
    00002f95: 	movsd	(%r14,%r12,8), %xmm0
    00002f9b: 	xorl	%edx, %edx
    00002f9d: 	movq	%r12, %rdi
    00002fa0: 	movq	%r14, %rsi
    00002fa3: 	movsd	%xmm1, (%r14,%r12,8)
    00002fa9: 	callq	_ZN9benchmark9__sift_inIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEEvlT_lT0_ # Offset: 12201
    00002fae: 	subq	$0x1, %r12
    00002fb2: 	jne	.Ltmp3352 # Offset: 12210
    00002fb4: 	movq	-0xfb58(%rbp), %rcx
.Ltmp3351:
    00002fbb: 	movq	-0xfbc0(%rbp), %rax
    00002fc2: 	movq	%rcx, %rdi
    00002fc5: 	jmp	.Ltmp3353 # Offset: 12229
    00002fc7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3355:
    00002fd0: 	addq	$0x8, %rax
    00002fd4: 	movsd	-0x10(%rax), %xmm0
    00002fd9: 	comisd	(%rdx), %xmm0
    00002fdd: 	ja	.Ltmp3354 # Offset: 12253
.Ltmp3353:
    00002fe3: 	movq	%rax, %rdx
    00002fe6: 	cmpq	%rax, %r15
    00002fe9: 	jne	.Ltmp3355 # Offset: 12265
    00002feb: 	movq	%rdi, -0xfb58(%rbp)
.Ltmp3389:
    00002ff2: 	addl	$0x1, -0xfb80(%rbp)
    00002ff9: 	movl	-0xfb80(%rbp), %eax
    00002fff: 	cmpl	-0xfba0(%rbp), %eax
    00003005: 	jl	.Ltmp3356 # Offset: 12293
.Ltmp3345:
    0000300b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00003012: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00003019: 	subq	$0x20, %rax
    0000301d: 	cmpq	%rax, %rbx
    00003020: 	je	.Ltmp3357 # Offset: 12320
    00003026: 	leaq	0x10(%rbx), %rdi
    0000302a: 	movq	-0xfa58(%rbp), %r12
    00003031: 	movq	%rdi, (%rbx)
    00003034: 	movq	-0xfa60(%rbp), %rax
    0000303b: 	movq	%rax, %rsi
    0000303e: 	movq	%rax, %r15
    00003041: 	addq	%r12, %rax
    00003044: 	je	.Ltmp3358 # Offset: 12356
    00003046: 	testq	%rsi, %rsi
    00003049: 	je	.Ltmp3359 # Offset: 12361
.Ltmp3358:
    0000304f: 	movq	%r12, -0xfb48(%rbp)
    00003056: 	cmpq	$0xf, %r12
    0000305a: 	ja	.Ltmp3360 # Offset: 12378
    00003060: 	cmpq	$0x1, %r12
    00003064: 	jne	.Ltmp3361 # Offset: 12388
    0000306a: 	movzbl	(%r15), %eax
    0000306e: 	movb	%al, 0x10(%rbx)
.Ltmp3428:
    00003071: 	movq	%r12, 0x8(%rbx)
    00003075: 	movb	$0x0, (%rdi,%r12)
    0000307a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003081: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003088: 	addq	$0x20, %rax
    0000308c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00003093: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000309a: 	je	.Ltmp3362 # Offset: 12442
.Ltmp3420:
    000030a0: 	movq	-0x20(%rax), %rbx
    000030a4: 	callq	clock@PLT # Offset: 12452
    000030a9: 	pxor	%xmm0, %xmm0
    000030ad: 	movq	%rax, end_time(%rip)
    000030b4: 	movq	%rbx, %rdi
    000030b7: 	subq	start_time(%rip), %rax
    000030be: 	cvtsi2sd	%rax, %xmm0
    000030c3: 	divsd	DATAat0x24890(%rip), %xmm0
    000030cb: 	callq	_Z13record_resultdPKc # Offset: 12491
    000030d0: 	movq	-0xfa60(%rbp), %rdi
    000030d7: 	cmpq	-0xfb98(%rbp), %rdi
    000030de: 	je	.Ltmp3363 # Offset: 12510
    000030e0: 	movq	-0xfa50(%rbp), %rax
    000030e7: 	leaq	0x1(%rax), %rsi
    000030eb: 	callq	_ZdlPvm@PLT # Offset: 12523
.Ltmp3363:
    000030f0: 	movq	-0xfb60(%rbp), %rsi
    000030f7: 	movq	-0xfb90(%rbp), %rdi
    000030fe: 	leaq	DATAat0x246da(%rip), %rdx
    00003105: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12549
    0000310a: 	movl	iterations(%rip), %edx
    00003110: 	xorl	%r8d, %r8d
    00003113: 	xorl	%ecx, %ecx
    00003115: 	movl	$0x7d0, %esi
    0000311a: 	movq	-0xfa60(%rbp), %rdi
    00003121: 	callq	_Z9summarizePKciiii # Offset: 12577
    00003126: 	movl	-0xfbcc(%rbp), %eax
    0000312c: 	movq	-0xfa60(%rbp), %rdi
    00003133: 	movl	%eax, iterations(%rip)
    00003139: 	cmpq	-0xfb98(%rbp), %rdi
    00003140: 	je	.Ltmp3364 # Offset: 12608
    00003142: 	movq	-0xfa50(%rbp), %rax
    00003149: 	leaq	0x1(%rax), %rsi
    0000314d: 	callq	_ZdlPvm@PLT # Offset: 12621
.Ltmp3364:
    00003152: 	testq	%r14, %r14
    00003155: 	je	.Ltmp3365 # Offset: 12629
    00003157: 	movq	-0xfb10(%rbp), %rsi
    0000315e: 	movq	%r14, %rdi
    00003161: 	subq	%r14, %rsi
    00003164: 	callq	_ZdlPvm@PLT # Offset: 12644
.Ltmp3365:
    00003169: 	movq	-0xfa80(%rbp), %rdi
    00003170: 	leaq	-0xfa70(%rbp), %rax
    00003177: 	cmpq	%rax, %rdi
    0000317a: 	je	.Ltmp3366 # Offset: 12666
    0000317c: 	movq	-0xfa70(%rbp), %rax
    00003183: 	leaq	0x1(%rax), %rsi
    00003187: 	callq	_ZdlPvm@PLT # Offset: 12679
.Ltmp3366:
    0000318c: 	movq	-0xfaa0(%rbp), %rdi
    00003193: 	leaq	-0xfa90(%rbp), %rax
    0000319a: 	cmpq	%rax, %rdi
    0000319d: 	je	.Ltmp3367 # Offset: 12701
    0000319f: 	movq	-0xfa90(%rbp), %rax
    000031a6: 	leaq	0x1(%rax), %rsi
    000031aa: 	callq	_ZdlPvm@PLT # Offset: 12714
.Ltmp3367:
    000031af: 	movq	-0xfac0(%rbp), %rdi
    000031b6: 	leaq	-0xfab0(%rbp), %rax
    000031bd: 	cmpq	%rax, %rdi
    000031c0: 	je	.Ltmp3368 # Offset: 12736
    000031c2: 	movq	-0xfab0(%rbp), %rax
    000031c9: 	leaq	0x1(%rax), %rsi
    000031cd: 	callq	_ZdlPvm@PLT # Offset: 12749
.Ltmp3368:
    000031d2: 	movq	-0xfae0(%rbp), %rdi
    000031d9: 	leaq	-0xfad0(%rbp), %rax
    000031e0: 	cmpq	%rax, %rdi
    000031e3: 	je	.Ltmp3369 # Offset: 12771
    000031e5: 	movq	-0xfad0(%rbp), %rax
    000031ec: 	leaq	0x1(%rax), %rsi
    000031f0: 	callq	_ZdlPvm@PLT # Offset: 12784
.Ltmp3369:
    000031f5: 	movq	-0xfb00(%rbp), %rdi
    000031fc: 	cmpq	-0xfbf0(%rbp), %rdi
    00003203: 	je	.Ltmp3370 # Offset: 12803
    00003205: 	movq	-0xfaf0(%rbp), %rax
    0000320c: 	leaq	0x1(%rax), %rsi
    00003210: 	callq	_ZdlPvm@PLT # Offset: 12816
.Ltmp3370:
    00003215: 	testq	%r13, %r13
    00003218: 	je	.Ltmp3371 # Offset: 12824
    0000321a: 	movq	-0xfb30(%rbp), %rsi
    00003221: 	movq	%r13, %rdi
    00003224: 	subq	%r13, %rsi
    00003227: 	callq	_ZdlPvm@PLT # Offset: 12839
.Ltmp3371:
    0000322c: 	movq	-0x38(%rbp), %rax
    00003230: 	subq	%fs:0x28, %rax
    00003239: 	jne	.Ltmp3372 # Offset: 12857
    0000323f: 	leaq	-0x28(%rbp), %rsp
    00003243: 	popq	%rbx
    00003244: 	popq	%r12
    00003246: 	popq	%r13
    00003248: 	popq	%r14
    0000324a: 	popq	%r15
    0000324c: 	popq	%rbp
    0000324d: 	retq # Offset: 12877
.Ltmp3304:
    0000324e: 	movq	%r8, %rax
    00003251: 	movq	%rdi, -0xfb58(%rbp)
    00003258: 	subq	%r14, %rax
    0000325b: 	cmpq	$0x8, %rax
    0000325f: 	jle	.Ltmp3373 # Offset: 12895
    00003265: 	movsd	(%r14), %xmm1
    0000326a: 	movq	%r8, %rdx
    0000326d: 	movq	%r14, %rax
.Ltmp3378:
    00003270: 	comisd	%xmm1, %xmm2
    00003274: 	leaq	-0x8(%rdx), %rcx
    00003278: 	ja	.Ltmp3374 # Offset: 12920
    0000327a: 	cmpq	%rax, %rcx
    0000327d: 	jbe	.Ltmp3375 # Offset: 12925
    00003283: 	movsd	(%rax), %xmm0
    00003287: 	comisd	%xmm0, %xmm1
    0000328b: 	jbe	.Ltmp3376 # Offset: 12939
    0000328d: 	nopl	(%rax) # Size: 3
.Ltmp3377:
    00003290: 	movsd	0x8(%rax), %xmm0
    00003295: 	addq	$0x8, %rax
    00003299: 	comisd	%xmm0, %xmm1
    0000329d: 	ja	.Ltmp3377 # Offset: 12957
    0000329f: 	cmpq	%rax, %rcx
    000032a2: 	jbe	.Ltmp3375 # Offset: 12962
.Ltmp3376:
    000032a8: 	movsd	%xmm0, (%rcx)
    000032ac: 	movsd	%xmm2, (%rax)
.Ltmp3374:
    000032b0: 	movsd	-0x8(%rcx), %xmm2
    000032b5: 	movq	%rcx, %rdx
    000032b8: 	jmp	.Ltmp3378 # Offset: 12984
.Ltmp3410:
    000032ba: 	movq	%rsi, -0xfb58(%rbp)
    000032c1: 	movq	%r9, %rsi
    000032c4: 	movq	%r8, -0xfbf8(%rbp)
    000032cb: 	movq	%r9, -0xfc00(%rbp)
    000032d2: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 13010
    000032d7: 	movq	-0xfbf8(%rbp), %rsi
    000032de: 	movq	-0xfc00(%rbp), %rdi
    000032e5: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 13029
    000032ea: 	movq	-0xfbf8(%rbp), %r8
.Ltmp3373:
    000032f1: 	movq	%r15, %rax
    000032f4: 	subq	%r8, %rax
    000032f7: 	cmpq	$0x8, %rax
    000032fb: 	jle	.Ltmp3302 # Offset: 13051
    00003301: 	movsd	(%r8), %xmm1
    00003306: 	movq	-0xfb58(%rbp), %rdi
    0000330d: 	movq	%r15, %rdx
    00003310: 	movq	%r8, %rax
    00003313: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3383:
    00003318: 	movsd	-0x8(%rdx), %xmm2
    0000331d: 	leaq	-0x8(%rdx), %rcx
    00003321: 	comisd	%xmm1, %xmm2
    00003325: 	ja	.Ltmp3379 # Offset: 13093
    00003327: 	cmpq	%rax, %rcx
    0000332a: 	jbe	.Ltmp3380 # Offset: 13098
    00003330: 	movsd	(%rax), %xmm0
    00003334: 	comisd	%xmm0, %xmm1
    00003338: 	jbe	.Ltmp3381 # Offset: 13112
    0000333a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3382:
    00003340: 	movsd	0x8(%rax), %xmm0
    00003345: 	addq	$0x8, %rax
    00003349: 	comisd	%xmm0, %xmm1
    0000334d: 	ja	.Ltmp3382 # Offset: 13133
    0000334f: 	cmpq	%rax, %rcx
    00003352: 	jbe	.Ltmp3380 # Offset: 13138
.Ltmp3381:
    00003358: 	movsd	%xmm0, (%rcx)
    0000335c: 	movsd	%xmm2, (%rax)
.Ltmp3379:
    00003360: 	movq	%rcx, %rdx
    00003363: 	jmp	.Ltmp3383 # Offset: 13155
.Ltmp3242:
    00003365: 	movq	%r14, %rdx
    00003368: 	addq	$0x8, %rcx
    0000336c: 	movsd	%xmm1, (%rdx)
    00003370: 	cmpq	%r15, %rcx
    00003373: 	jne	.Ltmp3245 # Offset: 13171
    00003379: 	jmp	.Ltmp3269 # Offset: 13177
.Ltmp3247:
    0000337e: 	movq	-0xfa60(%rbp), %rdx
    00003385: 	movq	%rdi, -0xfb58(%rbp)
    0000338c: 	leaq	DATAat0x246f4(%rip), %rsi
    00003393: 	movl	$0x1, %edi
    00003398: 	xorl	%eax, %eax
    0000339a: 	callq	__printf_chk@PLT # Offset: 13210
    0000339f: 	movl	iterations(%rip), %esi
    000033a5: 	jmp	.Ltmp3384 # Offset: 13221
.Ltmp3226:
    000033aa: 	movq	-0xfa60(%rbp), %rdx
    000033b1: 	movq	%rsi, -0xfb58(%rbp)
    000033b8: 	movl	$0x1, %edi
    000033bd: 	xorl	%eax, %eax
    000033bf: 	leaq	DATAat0x246f4(%rip), %rsi
    000033c6: 	callq	__printf_chk@PLT # Offset: 13254
    000033cb: 	movl	iterations(%rip), %r15d
    000033d2: 	jmp	.Ltmp3385 # Offset: 13266
.Ltmp3309:
    000033d7: 	movq	-0xfa60(%rbp), %rdx
    000033de: 	movq	%rsi, -0xfb58(%rbp)
    000033e5: 	movl	$0x1, %edi
    000033ea: 	xorl	%eax, %eax
    000033ec: 	leaq	DATAat0x246f4(%rip), %rsi
    000033f3: 	callq	__printf_chk@PLT # Offset: 13299
    000033f8: 	movl	iterations(%rip), %eax
    000033fe: 	movl	%eax, -0xfbb0(%rbp)
    00003404: 	jmp	.Ltmp3386 # Offset: 13316
.Ltmp3335:
    00003409: 	movq	-0xfa60(%rbp), %rdx
    00003410: 	movq	%rdi, -0xfb58(%rbp)
    00003417: 	leaq	DATAat0x246f4(%rip), %rsi
    0000341e: 	movl	$0x1, %edi
    00003423: 	xorl	%eax, %eax
    00003425: 	callq	__printf_chk@PLT # Offset: 13349
    0000342a: 	movl	iterations(%rip), %eax
    00003430: 	movl	%eax, -0xfba8(%rbp)
    00003436: 	jmp	.Ltmp3387 # Offset: 13366
.Ltmp3322:
    0000343b: 	movq	-0xfa60(%rbp), %rdx
    00003442: 	movq	%rdi, -0xfb58(%rbp)
    00003449: 	leaq	DATAat0x246f4(%rip), %rsi
    00003450: 	movl	$0x1, %edi
    00003455: 	xorl	%eax, %eax
    00003457: 	callq	__printf_chk@PLT # Offset: 13399
    0000345c: 	movl	iterations(%rip), %eax
    00003462: 	movl	%eax, -0xfbb0(%rbp)
    00003468: 	jmp	.Ltmp3388 # Offset: 13416
.Ltmp3354:
    0000346d: 	movq	-0xfa60(%rbp), %rdx
    00003474: 	movq	%rdi, -0xfb58(%rbp)
    0000347b: 	leaq	DATAat0x246f4(%rip), %rsi
    00003482: 	movl	$0x1, %edi
    00003487: 	xorl	%eax, %eax
    00003489: 	callq	__printf_chk@PLT # Offset: 13449
    0000348e: 	movl	iterations(%rip), %eax
    00003494: 	movl	%eax, -0xfba0(%rbp)
    0000349a: 	jmp	.Ltmp3389 # Offset: 13466
.Ltmp3288:
    0000349f: 	movq	-0xfa60(%rbp), %rdx
    000034a6: 	movq	%rsi, -0xfb58(%rbp)
    000034ad: 	movl	$0x1, %edi
    000034b2: 	xorl	%eax, %eax
    000034b4: 	leaq	DATAat0x246f4(%rip), %rsi
    000034bb: 	callq	__printf_chk@PLT # Offset: 13499
    000034c0: 	jmp	.Ltmp3390 # Offset: 13504
.Ltmp3270:
    000034c5: 	movq	-0xfa60(%rbp), %rdx
    000034cc: 	movq	%rdi, -0xfb58(%rbp)
    000034d3: 	leaq	DATAat0x246f4(%rip), %rsi
    000034da: 	movl	$0x1, %edi
    000034df: 	xorl	%eax, %eax
    000034e1: 	callq	__printf_chk@PLT # Offset: 13537
    000034e6: 	jmp	.Ltmp3391 # Offset: 13542
.Ltmp3380:
    000034eb: 	movq	%rdx, %rax
    000034ee: 	movq	%rdi, -0xfb58(%rbp)
    000034f5: 	subq	%r8, %rax
    000034f8: 	cmpq	$0x8, %rax
    000034fc: 	jle	.Ltmp3392 # Offset: 13564
    00003502: 	movsd	(%r8), %xmm1
    00003507: 	movq	%rdx, %r9
    0000350a: 	movq	%r8, %rcx
.Ltmp3397:
    0000350d: 	movsd	-0x8(%r9), %xmm2
    00003513: 	leaq	-0x8(%r9), %rsi
    00003517: 	comisd	%xmm1, %xmm2
    0000351b: 	ja	.Ltmp3393 # Offset: 13595
    0000351d: 	cmpq	%rcx, %rsi
    00003520: 	jbe	.Ltmp3394 # Offset: 13600
    00003522: 	movsd	(%rcx), %xmm0
    00003526: 	leaq	0x8(%rcx), %rax
    0000352a: 	comisd	%xmm0, %xmm1
    0000352e: 	jbe	.Ltmp3395 # Offset: 13614
.Ltmp3396:
    00003530: 	movq	%rax, %rcx
    00003533: 	movsd	(%rax), %xmm0
    00003537: 	leaq	0x8(%rax), %rax
    0000353b: 	comisd	%xmm0, %xmm1
    0000353f: 	ja	.Ltmp3396 # Offset: 13631
    00003541: 	cmpq	%rcx, %rsi
    00003544: 	jbe	.Ltmp3394 # Offset: 13636
.Ltmp3395:
    00003546: 	movsd	%xmm0, (%rsi)
    0000354a: 	movsd	%xmm2, (%rcx)
.Ltmp3393:
    0000354e: 	movq	%rsi, %r9
    00003551: 	jmp	.Ltmp3397 # Offset: 13649
.Ltmp3394:
    00003553: 	movq	%r9, %rsi
    00003556: 	movq	%rdi, -0xfb58(%rbp)
    0000355d: 	movq	%r8, %rdi
    00003560: 	movq	%rdx, -0xfbf8(%rbp)
    00003567: 	movq	%r9, -0xfc00(%rbp)
    0000356e: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 13678
    00003573: 	movq	-0xfbf8(%rbp), %rsi
    0000357a: 	movq	-0xfc00(%rbp), %rdi
    00003581: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 13697
    00003586: 	movq	-0xfbf8(%rbp), %rdx
.Ltmp3392:
    0000358d: 	movq	%r15, %rax
    00003590: 	movq	%rdx, %rdi
    00003593: 	subq	%rdx, %rax
    00003596: 	cmpq	$0x8, %rax
    0000359a: 	jle	.Ltmp3302 # Offset: 13722
    000035a0: 	movsd	(%rdx), %xmm1
    000035a4: 	movq	-0xfb58(%rbp), %rsi
    000035ab: 	movq	%r15, %r8
.Ltmp3402:
    000035ae: 	movsd	-0x8(%r8), %xmm2
    000035b4: 	leaq	-0x8(%r8), %rcx
    000035b8: 	comisd	%xmm1, %xmm2
    000035bc: 	ja	.Ltmp3398 # Offset: 13756
    000035be: 	cmpq	%rdx, %rcx
    000035c1: 	jbe	.Ltmp3399 # Offset: 13761
    000035c7: 	movsd	(%rdx), %xmm0
    000035cb: 	leaq	0x8(%rdx), %rax
    000035cf: 	comisd	%xmm0, %xmm1
    000035d3: 	jbe	.Ltmp3400 # Offset: 13779
    000035d5: 	nopl	(%rax) # Size: 3
.Ltmp3401:
    000035d8: 	movq	%rax, %rdx
    000035db: 	movsd	(%rax), %xmm0
    000035df: 	leaq	0x8(%rax), %rax
    000035e3: 	comisd	%xmm0, %xmm1
    000035e7: 	ja	.Ltmp3401 # Offset: 13799
    000035e9: 	cmpq	%rdx, %rcx
    000035ec: 	jbe	.Ltmp3399 # Offset: 13804
.Ltmp3400:
    000035f2: 	movsd	%xmm0, (%rcx)
    000035f6: 	movsd	%xmm2, (%rdx)
.Ltmp3398:
    000035fa: 	movq	%rcx, %r8
    000035fd: 	jmp	.Ltmp3402 # Offset: 13821
.Ltmp3375:
    000035ff: 	movq	%rdx, %rax
    00003602: 	movq	%rdi, -0xfb58(%rbp)
    00003609: 	subq	%r14, %rax
    0000360c: 	cmpq	$0x8, %rax
    00003610: 	jle	.Ltmp3403 # Offset: 13840
    00003616: 	movsd	(%r14), %xmm1
    0000361b: 	movq	%rdx, %r9
    0000361e: 	movq	%r14, %rax
.Ltmp3408:
    00003621: 	movsd	-0x8(%r9), %xmm2
    00003627: 	leaq	-0x8(%r9), %rcx
    0000362b: 	comisd	%xmm1, %xmm2
    0000362f: 	ja	.Ltmp3404 # Offset: 13871
    00003631: 	cmpq	%rax, %rcx
    00003634: 	jbe	.Ltmp3405 # Offset: 13876
    00003636: 	movsd	(%rax), %xmm0
    0000363a: 	comisd	%xmm0, %xmm1
    0000363e: 	jbe	.Ltmp3406 # Offset: 13886
.Ltmp3407:
    00003640: 	movsd	0x8(%rax), %xmm0
    00003645: 	addq	$0x8, %rax
    00003649: 	comisd	%xmm0, %xmm1
    0000364d: 	ja	.Ltmp3407 # Offset: 13901
    0000364f: 	cmpq	%rax, %rcx
    00003652: 	jbe	.Ltmp3405 # Offset: 13906
.Ltmp3406:
    00003654: 	movsd	%xmm0, (%rcx)
    00003658: 	movsd	%xmm2, (%rax)
.Ltmp3404:
    0000365c: 	movq	%rcx, %r9
    0000365f: 	jmp	.Ltmp3408 # Offset: 13919
.Ltmp3405:
    00003661: 	movq	%r9, %rsi
    00003664: 	movq	%rdi, -0xfb58(%rbp)
    0000366b: 	movq	%r14, %rdi
    0000366e: 	movq	%rdx, -0xfbf8(%rbp)
    00003675: 	movq	%r8, -0xfc08(%rbp)
    0000367c: 	movq	%r9, -0xfc00(%rbp)
    00003683: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 13955
    00003688: 	movq	-0xfbf8(%rbp), %rsi
    0000368f: 	movq	-0xfc00(%rbp), %rdi
    00003696: 	callq	_ZN9benchmark9quicksortIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S8_ # Offset: 13974
    0000369b: 	movq	-0xfc08(%rbp), %r8
    000036a2: 	movq	-0xfbf8(%rbp), %rdx
.Ltmp3403:
    000036a9: 	movq	%r8, %rax
    000036ac: 	movq	%rdx, %rdi
    000036af: 	subq	%rdx, %rax
    000036b2: 	cmpq	$0x8, %rax
    000036b6: 	jle	.Ltmp3373 # Offset: 14006
    000036bc: 	movsd	(%rdx), %xmm1
    000036c0: 	movq	-0xfb58(%rbp), %rsi
    000036c7: 	movq	%r8, %r9
.Ltmp3413:
    000036ca: 	movsd	-0x8(%r9), %xmm2
    000036d0: 	leaq	-0x8(%r9), %rax
    000036d4: 	comisd	%xmm1, %xmm2
    000036d8: 	ja	.Ltmp3409 # Offset: 14040
    000036da: 	cmpq	%rdx, %rax
    000036dd: 	jbe	.Ltmp3410 # Offset: 14045
    000036e3: 	movsd	(%rdx), %xmm0
    000036e7: 	comisd	%xmm0, %xmm1
    000036eb: 	jbe	.Ltmp3411 # Offset: 14059
    000036ed: 	nopl	(%rax) # Size: 3
.Ltmp3412:
    000036f0: 	movsd	0x8(%rdx), %xmm0
    000036f5: 	addq	$0x8, %rdx
    000036f9: 	comisd	%xmm0, %xmm1
    000036fd: 	ja	.Ltmp3412 # Offset: 14077
    000036ff: 	cmpq	%rdx, %rax
    00003702: 	jbe	.Ltmp3410 # Offset: 14082
.Ltmp3411:
    00003708: 	movsd	%xmm0, (%rax)
    0000370c: 	movsd	%xmm2, (%rdx)
.Ltmp3409:
    00003710: 	movq	%rax, %r9
    00003713: 	jmp	.Ltmp3413 # Offset: 14099
.Ltmp3238:
    00003715: 	movq	-0xfb58(%rbp), %rdi
    0000371c: 	movq	-0xfbe0(%rbp), %rdx
.Ltmp3414:
    00003723: 	movsd	(%r13,%rax), %xmm0
    0000372a: 	movsd	%xmm0, (%r14,%rax)
    00003730: 	addq	$0x8, %rax
    00003734: 	cmpq	%rax, %rdx
    00003737: 	jne	.Ltmp3414 # Offset: 14135
    00003739: 	movq	%rdi, -0xfb58(%rbp)
    00003740: 	jmp	.Ltmp3237 # Offset: 14144
.Ltmp3347:
    00003745: 	movq	-0xfb70(%rbp), %rdx
    0000374c: 	movq	-0xfb58(%rbp), %rsi
    00003753: 	xorl	%eax, %eax
    00003755: 	subq	%r13, %rdx
.Ltmp3415:
    00003758: 	movsd	(%r13,%rax), %xmm0
    0000375f: 	movsd	%xmm0, (%r14,%rax)
    00003765: 	addq	$0x8, %rax
    00003769: 	cmpq	%rdx, %rax
    0000376c: 	jne	.Ltmp3415 # Offset: 14188
    0000376e: 	movq	%rsi, -0xfb58(%rbp)
    00003775: 	jmp	.Ltmp3346 # Offset: 14197
.Ltmp3300:
    0000377a: 	movq	-0xfb70(%rbp), %rdx
    00003781: 	movq	-0xfb58(%rbp), %rsi
    00003788: 	xorl	%eax, %eax
    0000378a: 	subq	%r13, %rdx
.Ltmp3416:
    0000378d: 	movsd	(%r13,%rax), %xmm0
    00003794: 	movsd	%xmm0, (%r14,%rax)
    0000379a: 	addq	$0x8, %rax
    0000379e: 	cmpq	%rax, %rdx
    000037a1: 	jne	.Ltmp3416 # Offset: 14241
    000037a3: 	movq	%rsi, -0xfb58(%rbp)
    000037aa: 	jmp	.Ltmp3299 # Offset: 14250
.Ltmp3341:
    000037af: 	leaq	-0xfb48(%rbp), %rsi
    000037b6: 	xorl	%edx, %edx
    000037b8: 	movq	%rbx, %rdi
    000037bb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14267
    000037c0: 	movq	%rax, (%rbx)
    000037c3: 	movq	%rax, %rdi
    000037c6: 	movq	-0xfb48(%rbp), %rax
    000037cd: 	movq	%rax, 0x10(%rbx)
.Ltmp3419:
    000037d1: 	movq	-0xfb58(%rbp), %rsi
    000037d8: 	movq	%r12, %rdx
    000037db: 	callq	memcpy@PLT # Offset: 14299
    000037e0: 	movq	-0xfb48(%rbp), %r12
    000037e7: 	movq	(%rbx), %rdi
    000037ea: 	jmp	.Ltmp3417 # Offset: 14314
.Ltmp3338:
    000037ef: 	movq	-0xfb90(%rbp), %rsi
    000037f6: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000037fd: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 14333
    00003802: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003809: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00003810: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003817: 	jne	.Ltmp3418 # Offset: 14359
.Ltmp3343:
    0000381d: 	movq	-0x8(%rdx), %rax
    00003821: 	addq	$0x200, %rax
    00003827: 	jmp	.Ltmp3418 # Offset: 14375
.Ltmp3342:
    0000382c: 	testq	%r12, %r12
    0000382f: 	je	.Ltmp3417 # Offset: 14383
    00003835: 	jmp	.Ltmp3419 # Offset: 14389
    00003837: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3357:
    00003840: 	movq	-0xfb90(%rbp), %rsi
    00003847: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000384e: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 14414
    00003853: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000385a: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00003861: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003868: 	jne	.Ltmp3420 # Offset: 14440
.Ltmp3362:
    0000386e: 	movq	-0x8(%rdx), %rax
    00003872: 	addq	$0x200, %rax
    00003878: 	jmp	.Ltmp3420 # Offset: 14456
.Ltmp3278:
    0000387d: 	movq	-0x8(%rdx), %rax
    00003881: 	addq	$0x200, %rax
    00003887: 	jmp	.Ltmp3421 # Offset: 14471
.Ltmp3294:
    0000388c: 	leaq	-0xfb48(%rbp), %rsi
    00003893: 	xorl	%edx, %edx
    00003895: 	movq	%r12, %rdi
    00003898: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14488
    0000389d: 	movq	%rax, (%r12)
    000038a1: 	movq	%rax, %rdi
    000038a4: 	movq	-0xfb48(%rbp), %rax
    000038ab: 	movq	%rax, 0x10(%r12)
.Ltmp3449:
    000038b0: 	movq	-0xfba0(%rbp), %rdx
    000038b7: 	movq	-0xfba8(%rbp), %rsi
    000038be: 	callq	memcpy@PLT # Offset: 14526
    000038c3: 	movq	-0xfb48(%rbp), %rax
    000038ca: 	movq	(%r12), %rdi
    000038ce: 	movq	%rax, -0xfba0(%rbp)
    000038d5: 	jmp	.Ltmp3422 # Offset: 14549
.Ltmp3291:
    000038da: 	movq	-0xfb90(%rbp), %rsi
    000038e1: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000038e8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 14568
    000038ed: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000038f4: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000038fb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003902: 	jne	.Ltmp3423 # Offset: 14594
.Ltmp3296:
    00003908: 	movq	-0x8(%rdx), %rax
    0000390c: 	addq	$0x200, %rax
    00003912: 	jmp	.Ltmp3423 # Offset: 14610
.Ltmp3277:
    00003917: 	cmpq	$0x0, -0xfba0(%rbp)
    0000391f: 	je	.Ltmp3424 # Offset: 14623
    00003925: 	jmp	.Ltmp3425 # Offset: 14629
    00003927: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3276:
    00003930: 	leaq	-0xfb48(%rbp), %rsi
    00003937: 	xorl	%edx, %edx
    00003939: 	movq	%r12, %rdi
    0000393c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14652
    00003941: 	movq	%rax, (%r12)
    00003945: 	movq	%rax, %rdi
    00003948: 	movq	-0xfb48(%rbp), %rax
    0000394f: 	movq	%rax, 0x10(%r12)
.Ltmp3425:
    00003954: 	movq	-0xfba0(%rbp), %rdx
    0000395b: 	movq	-0xfba8(%rbp), %rsi
    00003962: 	callq	memcpy@PLT # Offset: 14690
    00003967: 	movq	-0xfb48(%rbp), %rax
    0000396e: 	movq	(%r12), %rdi
    00003972: 	movq	%rax, -0xfba0(%rbp)
    00003979: 	jmp	.Ltmp3424 # Offset: 14713
.Ltmp3273:
    0000397e: 	movq	-0xfb90(%rbp), %rsi
    00003985: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000398c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 14732
    00003991: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003998: 	jmp	.Ltmp3426 # Offset: 14744
.Ltmp3255:
    0000399d: 	movq	-0x8(%rdx), %rax
    000039a1: 	addq	$0x200, %rax
    000039a7: 	jmp	.Ltmp3427 # Offset: 14759
.Ltmp3361:
    000039ac: 	testq	%r12, %r12
    000039af: 	je	.Ltmp3428 # Offset: 14767
    000039b5: 	jmp	.Ltmp3429 # Offset: 14773
    000039b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3360:
    000039c0: 	leaq	-0xfb48(%rbp), %rsi
    000039c7: 	xorl	%edx, %edx
    000039c9: 	movq	%rbx, %rdi
    000039cc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14796
    000039d1: 	movq	%rax, (%rbx)
    000039d4: 	movq	%rax, %rdi
    000039d7: 	movq	-0xfb48(%rbp), %rax
    000039de: 	movq	%rax, 0x10(%rbx)
.Ltmp3429:
    000039e2: 	movq	%r12, %rdx
    000039e5: 	movq	%r15, %rsi
    000039e8: 	callq	memcpy@PLT # Offset: 14824
    000039ed: 	movq	-0xfb48(%rbp), %r12
    000039f4: 	movq	(%rbx), %rdi
    000039f7: 	jmp	.Ltmp3428 # Offset: 14839
.Ltmp3254:
    000039fc: 	cmpq	$0x0, -0xfba0(%rbp)
    00003a04: 	je	.Ltmp3430 # Offset: 14852
    00003a0a: 	jmp	.Ltmp3431 # Offset: 14858
    00003a0c: 	nopl	(%rax) # Size: 4
.Ltmp3253:
    00003a10: 	leaq	-0xfb48(%rbp), %rsi
    00003a17: 	xorl	%edx, %edx
    00003a19: 	movq	%r12, %rdi
    00003a1c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14876
    00003a21: 	movq	%rax, (%r12)
    00003a25: 	movq	%rax, %rdi
    00003a28: 	movq	-0xfb48(%rbp), %rax
    00003a2f: 	movq	%rax, 0x10(%r12)
.Ltmp3431:
    00003a34: 	movq	-0xfba0(%rbp), %rdx
    00003a3b: 	movq	-0xfba8(%rbp), %rsi
    00003a42: 	callq	memcpy@PLT # Offset: 14914
    00003a47: 	movq	-0xfb48(%rbp), %rax
    00003a4e: 	movq	(%r12), %rdi
    00003a52: 	movq	%rax, -0xfba0(%rbp)
    00003a59: 	jmp	.Ltmp3430 # Offset: 14937
.Ltmp3215:
    00003a5e: 	movq	-0xfb58(%rbp), %rsi
    00003a65: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003a6c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 14956
    00003a71: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003a78: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00003a7f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003a86: 	jne	.Ltmp3432 # Offset: 14982
.Ltmp3220:
    00003a8c: 	movq	-0x8(%rdx), %rax
    00003a90: 	addq	$0x200, %rax
    00003a96: 	jmp	.Ltmp3432 # Offset: 14998
.Ltmp3206:
    00003a9b: 	movq	-0xfb58(%rbp), %rsi
    00003aa2: 	movq	-0xfb68(%rbp), %rcx
.Ltmp3433:
    00003aa9: 	movsd	(%rcx,%rax), %xmm0
    00003aae: 	movsd	%xmm0, (%rdx,%rax)
    00003ab3: 	addq	$0x8, %rax
    00003ab7: 	cmpq	$0x3e80, %rax
    00003abd: 	jne	.Ltmp3433 # Offset: 15037
    00003abf: 	movq	%rsi, -0xfb58(%rbp)
    00003ac6: 	movq	%rsi, %rdi
    00003ac9: 	jmp	.Ltmp3434 # Offset: 15049
.Ltmp3219:
    00003ace: 	testq	%r12, %r12
    00003ad1: 	je	.Ltmp3265 # Offset: 15057
    00003ad7: 	jmp	.Ltmp3435 # Offset: 15063
    00003adc: 	nopl	(%rax) # Size: 4
.Ltmp3330:
    00003ae0: 	movq	-0x8(%rdx), %rax
    00003ae4: 	addq	$0x200, %rax
    00003aea: 	jmp	.Ltmp3436 # Offset: 15082
.Ltmp3325:
    00003aef: 	movq	-0xfb90(%rbp), %rsi
    00003af6: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003afd: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 15101
    00003b02: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003b09: 	jmp	.Ltmp3437 # Offset: 15113
.Ltmp3329:
    00003b0e: 	cmpq	$0x0, -0xfb68(%rbp)
    00003b16: 	je	.Ltmp3438 # Offset: 15126
    00003b1c: 	jmp	.Ltmp3439 # Offset: 15132
    00003b1e: 	nop # Size: 2
.Ltmp3328:
    00003b20: 	leaq	-0xfb48(%rbp), %rsi
    00003b27: 	xorl	%edx, %edx
    00003b29: 	movq	%r12, %rdi
    00003b2c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15148
    00003b31: 	movq	%rax, (%r12)
    00003b35: 	movq	%rax, %rdi
    00003b38: 	movq	-0xfb48(%rbp), %rax
    00003b3f: 	movq	%rax, 0x10(%r12)
.Ltmp3439:
    00003b44: 	movq	-0xfb68(%rbp), %rdx
    00003b4b: 	movq	-0xfba0(%rbp), %rsi
    00003b52: 	callq	memcpy@PLT # Offset: 15186
    00003b57: 	movq	-0xfb48(%rbp), %rax
    00003b5e: 	movq	(%r12), %rdi
    00003b62: 	movq	%rax, -0xfb68(%rbp)
    00003b69: 	jmp	.Ltmp3438 # Offset: 15209
.Ltmp3250:
    00003b6e: 	movq	-0xfb90(%rbp), %rsi
    00003b75: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003b7c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 15228
    00003b81: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003b88: 	jmp	.Ltmp3440 # Offset: 15240
.Ltmp3234:
    00003b8d: 	movq	-0x8(%rdx), %rax
    00003b91: 	addq	$0x200, %rax
    00003b97: 	jmp	.Ltmp3441 # Offset: 15255
.Ltmp3233:
    00003b9c: 	testq	%r12, %r12
    00003b9f: 	je	.Ltmp3442 # Offset: 15263
    00003ba5: 	jmp	.Ltmp3443 # Offset: 15269
    00003ba7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3232:
    00003bb0: 	leaq	-0xfb48(%rbp), %rsi
    00003bb7: 	xorl	%edx, %edx
    00003bb9: 	movq	%r14, %rdi
    00003bbc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15292
    00003bc1: 	movq	%rax, (%r14)
    00003bc4: 	movq	%rax, %rdi
    00003bc7: 	movq	-0xfb48(%rbp), %rax
    00003bce: 	movq	%rax, 0x10(%r14)
.Ltmp3443:
    00003bd2: 	movq	%r12, %rdx
    00003bd5: 	movq	%r15, %rsi
    00003bd8: 	callq	memcpy@PLT # Offset: 15320
    00003bdd: 	movq	-0xfb48(%rbp), %r12
    00003be4: 	movq	(%r14), %rdi
    00003be7: 	jmp	.Ltmp3442 # Offset: 15335
.Ltmp3317:
    00003bec: 	movq	-0x8(%rdx), %rax
    00003bf0: 	addq	$0x200, %rax
    00003bf6: 	jmp	.Ltmp3444 # Offset: 15350
.Ltmp3316:
    00003bfb: 	cmpq	$0x0, -0xfba0(%rbp)
    00003c03: 	je	.Ltmp3445 # Offset: 15363
    00003c09: 	jmp	.Ltmp3446 # Offset: 15369
    00003c0b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3315:
    00003c10: 	leaq	-0xfb48(%rbp), %rsi
    00003c17: 	xorl	%edx, %edx
    00003c19: 	movq	%r12, %rdi
    00003c1c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15388
    00003c21: 	movq	%rax, (%r12)
    00003c25: 	movq	%rax, %rdi
    00003c28: 	movq	-0xfb48(%rbp), %rax
    00003c2f: 	movq	%rax, 0x10(%r12)
.Ltmp3446:
    00003c34: 	movq	-0xfba0(%rbp), %rdx
    00003c3b: 	movq	-0xfba8(%rbp), %rsi
    00003c42: 	callq	memcpy@PLT # Offset: 15426
    00003c47: 	movq	-0xfb48(%rbp), %rax
    00003c4e: 	movq	(%r12), %rdi
    00003c52: 	movq	%rax, -0xfba0(%rbp)
    00003c59: 	jmp	.Ltmp3445 # Offset: 15449
.Ltmp3312:
    00003c5e: 	movq	-0xfb90(%rbp), %rsi
    00003c65: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003c6c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 15468
    00003c71: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003c78: 	jmp	.Ltmp3447 # Offset: 15480
.Ltmp3229:
    00003c7d: 	movq	-0xfb90(%rbp), %rsi
    00003c84: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003c8b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 15499
    00003c90: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003c97: 	jmp	.Ltmp3448 # Offset: 15511
.Ltmp3295:
    00003c9c: 	cmpq	$0x0, -0xfba0(%rbp)
    00003ca4: 	je	.Ltmp3422 # Offset: 15524
    00003caa: 	jmp	.Ltmp3449 # Offset: 15530
    00003caf: 	nop # Size: 1
.Ltmp3124:
    00003cb0: 	cmpq	%rbx, -0xfb58(%rbp)
    00003cb7: 	je	.Ltmp3129 # Offset: 15543
.Ltmp3452:
    00003cbd: 	movq	(%rbx), %rdi
    00003cc0: 	leaq	0x10(%rbx), %rax
    00003cc4: 	cmpq	%rax, %rdi
    00003cc7: 	je	.Ltmp3450 # Offset: 15559
.Ltmp3451:
    00003cc9: 	movq	0x10(%rbx), %rax
    00003ccd: 	addq	$0x20, %rbx
    00003cd1: 	leaq	0x1(%rax), %rsi
    00003cd5: 	movq	%rax, -0xfb60(%rbp)
    00003cdc: 	callq	_ZdlPvm@PLT # Offset: 15580
    00003ce1: 	cmpq	%rbx, -0xfb58(%rbp)
    00003ce8: 	je	.Ltmp3129 # Offset: 15592
    00003cee: 	movq	(%rbx), %rdi
    00003cf1: 	leaq	0x10(%rbx), %rax
    00003cf5: 	cmpq	%rax, %rdi
    00003cf8: 	jne	.Ltmp3451 # Offset: 15608
.Ltmp3450:
    00003cfa: 	movq	%rbx, %rax
    00003cfd: 	addq	$0x20, %rax
    00003d01: 	movq	%rax, %rbx
    00003d04: 	cmpq	%rax, -0xfb58(%rbp)
    00003d0b: 	jne	.Ltmp3452 # Offset: 15627
    00003d0d: 	jmp	.Ltmp3129 # Offset: 15629
.Ltmp3231:
    00003d12: 	leaq	DATAat0x24158(%rip), %rdi
    00003d19: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 15641
.Ltmp3252:
    00003d1e: 	leaq	DATAat0x24158(%rip), %rdi
    00003d25: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 15653
.Ltmp3217:
    00003d2a: 	leaq	DATAat0x24158(%rip), %rdi
    00003d31: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 15665
.Ltmp3275:
    00003d36: 	leaq	DATAat0x24158(%rip), %rdi
    00003d3d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 15677
.Ltmp3293:
    00003d42: 	leaq	DATAat0x24158(%rip), %rdi
    00003d49: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 15689
.Ltmp3314:
    00003d4e: 	leaq	DATAat0x24158(%rip), %rdi
    00003d55: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 15701
.Ltmp3327:
    00003d5a: 	leaq	DATAat0x24158(%rip), %rdi
    00003d61: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 15713
.Ltmp3340:
    00003d66: 	leaq	DATAat0x24158(%rip), %rdi
    00003d6d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 15725
.Ltmp3359:
    00003d72: 	leaq	DATAat0x24158(%rip), %rdi
    00003d79: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 15737
.Ltmp3372:
    00003d7e: 	callq	__stack_chk_fail@PLT # Offset: 15742
    00003d83: 	endbr64
.Ltmp3454:
    00003d87: 	movq	%rax, %rbx
    00003d8a: 	jmp	.Ltmp3453 # Offset: 15754
    00003d8c: 	endbr64
    00003d90: 	jmp	.Ltmp3454 # Offset: 15760
    00003d92: 	endbr64
    00003d96: 	jmp	.Ltmp3454 # Offset: 15766
    00003d98: 	endbr64
    00003d9c: 	jmp	.Ltmp3454 # Offset: 15772
.Ltmp3453:
    00003d9e: 	movq	-0x3ec0(%rbp), %rdi
    00003da5: 	cmpq	%r12, %rdi
    00003da8: 	je	.Ltmp3455 # Offset: 15784
.Ltmp3475:
    00003daa: 	movq	-0x3eb0(%rbp), %rax
    00003db1: 	leaq	0x1(%rax), %rsi
    00003db5: 	callq	_ZdlPvm@PLT # Offset: 15797
.Ltmp3455:
    00003dba: 	movq	-0xfb00(%rbp), %rdi
    00003dc1: 	cmpq	-0xfbf0(%rbp), %rdi
    00003dc8: 	je	.Ltmp3456 # Offset: 15816
    00003dca: 	movq	-0xfaf0(%rbp), %rax
    00003dd1: 	leaq	0x1(%rax), %rsi
    00003dd5: 	callq	_ZdlPvm@PLT # Offset: 15829
.Ltmp3456:
    00003dda: 	movq	-0xfb40(%rbp), %rdi
    00003de1: 	movq	-0xfb30(%rbp), %rsi
    00003de8: 	subq	%rdi, %rsi
    00003deb: 	testq	%rdi, %rdi
    00003dee: 	je	.Ltmp3457 # Offset: 15854
    00003df0: 	callq	_ZdlPvm@PLT # Offset: 15856
.Ltmp3457:
    00003df5: 	movq	%rbx, %rdi
    00003df8: 	callq	_Unwind_Resume@PLT # Offset: 15864
    00003dfd: 	endbr64
    00003e01: 	jmp	.Ltmp3454 # Offset: 15873
    00003e03: 	endbr64
    00003e07: 	jmp	.Ltmp3454 # Offset: 15879
    00003e0c: 	endbr64
    00003e10: 	jmp	.Ltmp3454 # Offset: 15888
    00003e15: 	endbr64
    00003e19: 	jmp	.Ltmp3454 # Offset: 15897
    00003e1e: 	endbr64
    00003e22: 	jmp	.Ltmp3454 # Offset: 15906
    00003e27: 	endbr64
    00003e2b: 	jmp	.Ltmp3454 # Offset: 15915
    00003e30: 	endbr64
    00003e34: 	jmp	.Ltmp3454 # Offset: 15924
    00003e39: 	endbr64
    00003e3d: 	jmp	.Ltmp3454 # Offset: 15933
    00003e42: 	endbr64
    00003e46: 	jmp	.Ltmp3454 # Offset: 15942
    00003e4b: 	endbr64
    00003e4f: 	jmp	.Ltmp3454 # Offset: 15951
    00003e54: 	endbr64
    00003e58: 	jmp	.Ltmp3454 # Offset: 15960
    00003e5d: 	endbr64
    00003e61: 	jmp	.Ltmp3454 # Offset: 15969
    00003e66: 	endbr64
    00003e6a: 	jmp	.Ltmp3454 # Offset: 15978
    00003e6f: 	endbr64
    00003e73: 	jmp	.Ltmp3454 # Offset: 15987
    00003e78: 	endbr64
    00003e7c: 	jmp	.Ltmp3454 # Offset: 15996
    00003e81: 	endbr64
    00003e85: 	jmp	.Ltmp3454 # Offset: 16005
    00003e8a: 	endbr64
    00003e8e: 	jmp	.Ltmp3454 # Offset: 16014
    00003e93: 	endbr64
    00003e97: 	jmp	.Ltmp3454 # Offset: 16023
    00003e9c: 	endbr64
    00003ea0: 	jmp	.Ltmp3454 # Offset: 16032
    00003ea5: 	endbr64
    00003ea9: 	jmp	.Ltmp3454 # Offset: 16041
    00003eae: 	endbr64
.Ltmp3472:
    00003eb2: 	movq	%rax, %rbx
    00003eb5: 	jmp	.Ltmp3458 # Offset: 16053
    00003eb7: 	endbr64
.Ltmp3463:
    00003ebb: 	movq	%rax, %rbx
    00003ebe: 	jmp	.Ltmp3459 # Offset: 16062
.Ltmp3458:
    00003ec3: 	movq	-0x3ec0(%rbp), %rdi
    00003eca: 	cmpq	%r12, %rdi
    00003ecd: 	je	.Ltmp3460 # Offset: 16077
    00003ecf: 	movq	-0x3eb0(%rbp), %rax
    00003ed6: 	leaq	0x1(%rax), %rsi
    00003eda: 	callq	_ZdlPvm@PLT # Offset: 16090
.Ltmp3460:
    00003edf: 	movq	-0xfaa0(%rbp), %rdi
    00003ee6: 	leaq	-0xfa90(%rbp), %rax
    00003eed: 	cmpq	%rax, %rdi
    00003ef0: 	je	.Ltmp3461 # Offset: 16112
    00003ef2: 	movq	-0xfa90(%rbp), %rax
    00003ef9: 	leaq	0x1(%rax), %rsi
    00003efd: 	callq	_ZdlPvm@PLT # Offset: 16125
.Ltmp3461:
    00003f02: 	movq	-0xfac0(%rbp), %rdi
    00003f09: 	leaq	-0xfab0(%rbp), %rax
    00003f10: 	cmpq	%rax, %rdi
    00003f13: 	je	.Ltmp3462 # Offset: 16147
    00003f15: 	movq	-0xfab0(%rbp), %rax
    00003f1c: 	leaq	0x1(%rax), %rsi
    00003f20: 	callq	_ZdlPvm@PLT # Offset: 16160
.Ltmp3462:
    00003f25: 	movq	-0xfae0(%rbp), %rdi
    00003f2c: 	leaq	-0xfad0(%rbp), %rax
    00003f33: 	cmpq	%rax, %rdi
    00003f36: 	je	.Ltmp3455 # Offset: 16182
    00003f3c: 	movq	-0xfad0(%rbp), %rax
    00003f43: 	leaq	0x1(%rax), %rsi
    00003f47: 	callq	_ZdlPvm@PLT # Offset: 16199
    00003f4c: 	jmp	.Ltmp3455 # Offset: 16204
.Ltmp3459:
    00003f51: 	movq	-0x3ec0(%rbp), %rdi
    00003f58: 	cmpq	%r12, %rdi
    00003f5b: 	je	.Ltmp3462 # Offset: 16219
    00003f5d: 	movq	-0x3eb0(%rbp), %rax
    00003f64: 	leaq	0x1(%rax), %rsi
    00003f68: 	callq	_ZdlPvm@PLT # Offset: 16232
    00003f6d: 	jmp	.Ltmp3462 # Offset: 16237
    00003f6f: 	endbr64
    00003f73: 	jmp	.Ltmp3463 # Offset: 16243
    00003f78: 	endbr64
    00003f7c: 	jmp	.Ltmp3463 # Offset: 16252
    00003f81: 	endbr64
    00003f85: 	jmp	.Ltmp3463 # Offset: 16261
    00003f8a: 	endbr64
    00003f8e: 	jmp	.Ltmp3463 # Offset: 16270
    00003f93: 	endbr64
    00003f97: 	jmp	.Ltmp3463 # Offset: 16279
    00003f9c: 	endbr64
    00003fa0: 	jmp	.Ltmp3463 # Offset: 16288
    00003fa5: 	endbr64
.Ltmp3465:
    00003fa9: 	movq	%rax, %rbx
    00003fac: 	jmp	.Ltmp3464 # Offset: 16300
    00003fae: 	endbr64
    00003fb2: 	jmp	.Ltmp3465 # Offset: 16306
    00003fb4: 	endbr64
    00003fb8: 	jmp	.Ltmp3465 # Offset: 16312
    00003fba: 	endbr64
    00003fbe: 	jmp	.Ltmp3465 # Offset: 16318
.Ltmp3464:
    00003fc0: 	movq	-0xfa60(%rbp), %rdi
    00003fc7: 	cmpq	-0xfb98(%rbp), %rdi
    00003fce: 	je	.Ltmp3466 # Offset: 16334
.Ltmp3470:
    00003fd0: 	movq	-0xfa50(%rbp), %rax
    00003fd7: 	leaq	0x1(%rax), %rsi
    00003fdb: 	callq	_ZdlPvm@PLT # Offset: 16347
.Ltmp3466:
    00003fe0: 	movq	-0xfb20(%rbp), %rdi
    00003fe7: 	movq	-0xfb10(%rbp), %rsi
    00003fee: 	subq	%rdi, %rsi
    00003ff1: 	testq	%rdi, %rdi
    00003ff4: 	je	.Ltmp3467 # Offset: 16372
    00003ff6: 	callq	_ZdlPvm@PLT # Offset: 16374
.Ltmp3467:
    00003ffb: 	movq	-0xfa80(%rbp), %rdi
    00004002: 	leaq	-0xfa70(%rbp), %rax
    00004009: 	cmpq	%rax, %rdi
    0000400c: 	je	.Ltmp3460 # Offset: 16396
    00004012: 	movq	-0xfa70(%rbp), %rax
    00004019: 	leaq	0x1(%rax), %rsi
    0000401d: 	callq	_ZdlPvm@PLT # Offset: 16413
    00004022: 	jmp	.Ltmp3460 # Offset: 16418
    00004027: 	endbr64
    0000402b: 	jmp	.Ltmp3465 # Offset: 16427
    00004030: 	endbr64
    00004034: 	movq	%rax, %rbx
    00004037: 	jmp	.Ltmp3468 # Offset: 16439
    00004039: 	endbr64
    0000403d: 	jmp	.Ltmp3465 # Offset: 16445
    00004042: 	endbr64
.Ltmp3471:
    00004046: 	movq	%rax, %rbx
    00004049: 	jmp	.Ltmp3469 # Offset: 16457
.Ltmp3468:
    0000404b: 	movq	-0xfa60(%rbp), %rdi
    00004052: 	leaq	-0xfa50(%rbp), %rax
    00004059: 	cmpq	%rax, %rdi
    0000405c: 	jne	.Ltmp3470 # Offset: 16476
    00004062: 	jmp	.Ltmp3466 # Offset: 16482
    00004067: 	endbr64
    0000406b: 	jmp	.Ltmp3471 # Offset: 16491
    0000406d: 	endbr64
    00004071: 	jmp	.Ltmp3471 # Offset: 16497
    00004073: 	endbr64
    00004077: 	movq	%rax, %rbx
    0000407a: 	jmp	.Ltmp3461 # Offset: 16506
    0000407f: 	endbr64
    00004083: 	jmp	.Ltmp3463 # Offset: 16515
    00004088: 	endbr64
    0000408c: 	jmp	.Ltmp3463 # Offset: 16524
    00004091: 	endbr64
    00004095: 	jmp	.Ltmp3471 # Offset: 16533
    00004097: 	endbr64
    0000409b: 	jmp	.Ltmp3471 # Offset: 16539
    0000409d: 	endbr64
    000040a1: 	jmp	.Ltmp3471 # Offset: 16545
.Ltmp3469:
    000040a3: 	movq	-0x3ec0(%rbp), %rdi
    000040aa: 	cmpq	%r12, %rdi
    000040ad: 	je	.Ltmp3461 # Offset: 16557
    000040b3: 	movq	-0x3eb0(%rbp), %rax
    000040ba: 	leaq	0x1(%rax), %rsi
    000040be: 	callq	_ZdlPvm@PLT # Offset: 16574
    000040c3: 	jmp	.Ltmp3461 # Offset: 16579
    000040c8: 	endbr64
    000040cc: 	jmp	.Ltmp3472 # Offset: 16588
    000040d1: 	endbr64
    000040d5: 	jmp	.Ltmp3454 # Offset: 16597
    000040da: 	endbr64
    000040de: 	jmp	.Ltmp3454 # Offset: 16606
    000040e3: 	endbr64
    000040e7: 	jmp	.Ltmp3454 # Offset: 16615
    000040ec: 	endbr64
    000040f0: 	movq	%rax, %rbx
    000040f3: 	jmp	.Ltmp3455 # Offset: 16627
    000040f8: 	endbr64
    000040fc: 	movq	%rax, %rbx
    000040ff: 	jmp	.Ltmp3456 # Offset: 16639
    00004104: 	endbr64
    00004108: 	jmp	.Ltmp3465 # Offset: 16648
    0000410d: 	endbr64
    00004111: 	jmp	.Ltmp3454 # Offset: 16657
    00004116: 	endbr64
    0000411a: 	movq	%rax, %rbx
    0000411d: 	jmp	.Ltmp3462 # Offset: 16669
    00004122: 	endbr64
    00004126: 	jmp	.Ltmp3454 # Offset: 16678
    0000412b: 	endbr64
    0000412f: 	jmp	.Ltmp3454 # Offset: 16687
    00004134: 	endbr64
    00004138: 	jmp	.Ltmp3454 # Offset: 16696
    0000413d: 	endbr64
    00004141: 	jmp	.Ltmp3454 # Offset: 16705
    00004146: 	endbr64
    0000414a: 	jmp	.Ltmp3454 # Offset: 16714
    0000414f: 	endbr64
    00004153: 	jmp	.Ltmp3454 # Offset: 16723
    00004158: 	endbr64
    0000415c: 	jmp	.Ltmp3454 # Offset: 16732
    00004161: 	endbr64
    00004165: 	jmp	.Ltmp3465 # Offset: 16741
    0000416a: 	endbr64
    0000416e: 	movq	%rax, %rbx
    00004171: 	jmp	.Ltmp3466 # Offset: 16753
    00004176: 	endbr64
    0000417a: 	movq	%rax, %rbx
    0000417d: 	jmp	.Ltmp3467 # Offset: 16765
    00004182: 	endbr64
    00004186: 	jmp	.Ltmp3472 # Offset: 16774
    0000418b: 	endbr64
    0000418f: 	jmp	.Ltmp3472 # Offset: 16783
    00004194: 	endbr64
    00004198: 	jmp	.Ltmp3472 # Offset: 16792
    0000419d: 	endbr64
    000041a1: 	jmp	.Ltmp3472 # Offset: 16801
    000041a6: 	endbr64
    000041aa: 	jmp	.Ltmp3472 # Offset: 16810
    000041af: 	endbr64
    000041b3: 	movq	%rax, %rbx
    000041b6: 	jmp	.Ltmp3473 # Offset: 16822
    000041b8: 	endbr64
    000041bc: 	jmp	.Ltmp3471 # Offset: 16828
    000041c1: 	endbr64
    000041c5: 	jmp	.Ltmp3472 # Offset: 16837
    000041ca: 	endbr64
    000041ce: 	movq	%rax, %rbx
    000041d1: 	jmp	.Ltmp3460 # Offset: 16849
    000041d6: 	endbr64
    000041da: 	jmp	.Ltmp3472 # Offset: 16858
    000041df: 	endbr64
    000041e3: 	jmp	.Ltmp3471 # Offset: 16867
    000041e8: 	endbr64
    000041ec: 	movq	%rax, %rbx
    000041ef: 	jmp	.Ltmp3474 # Offset: 16879
    000041f1: 	endbr64
    000041f5: 	jmp	.Ltmp3471 # Offset: 16885
.Ltmp3473:
    000041fa: 	movq	-0x7d40(%rbp), %rdi
    00004201: 	leaq	-0x7d30(%rbp), %rax
    00004208: 	cmpq	%rax, %rdi
    0000420b: 	je	.Ltmp3466 # Offset: 16907
    00004211: 	movq	-0x7d30(%rbp), %rax
    00004218: 	leaq	0x1(%rax), %rsi
    0000421c: 	callq	_ZdlPvm@PLT # Offset: 16924
    00004221: 	jmp	.Ltmp3466 # Offset: 16929
.Ltmp3474:
    00004226: 	movq	-0x3ec0(%rbp), %rdi
    0000422d: 	leaq	-0x3eb0(%rbp), %rax
    00004234: 	cmpq	%rax, %rdi
    00004237: 	jne	.Ltmp3475 # Offset: 16951
    0000423d: 	jmp	.Ltmp3455 # Offset: 16957
DWARF CFI Instructions:
    <empty>
End of Function "_Z11testOneTypeIdEvv"

Binary Function "_fini" after disassembly {
  Number      : 266
  State       : disassembled
  Address     : 0x23674
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x23674
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0265:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 267 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 2047 instructions were shortened
BOLT-INFO: removed 449 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 262 out of 297 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x207358
