BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x2e00000, offset 0x2e00000
BOLT-INFO: enabling lite mode
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0xbfe8(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 2
  State       : disassembled
  Address     : 0x11c0
  Size        : 0x1351
  MaxSize     : 0x1360
  Offset      : 0x11c0
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB01:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x20000(%rsp), %r11
.Ltmp1:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp1 # Offset: 37
    00000027: 	subq	$0x118, %rsp
    0000002e: 	movq	%fs:0x28, %rax
    00000037: 	movq	%rax, 0x20108(%rsp)
    0000003f: 	xorl	%eax, %eax
    00000041: 	testl	%edi, %edi
    00000043: 	jle	.Ltmp2 # Offset: 67
    00000049: 	leal	-0x1(%rdi), %eax
    0000004c: 	movl	%edi, %r13d
    0000004f: 	movq	%rsi, %r14
    00000052: 	movq	%rsi, %rbp
    00000055: 	leaq	0x8(%rsi,%rax,8), %r12
    0000005a: 	leaq	DATAat0x8cb9(%rip), %rbx
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp3:
    00000068: 	movq	(%rbp), %rdx
    0000006c: 	movq	%rbx, %rsi
    0000006f: 	movl	$0x1, %edi
    00000074: 	xorl	%eax, %eax
    00000076: 	addq	$0x8, %rbp
    0000007a: 	callq	__printf_chk@PLT # Offset: 122
    0000007f: 	cmpq	%rbp, %r12
    00000082: 	jne	.Ltmp3 # Offset: 130
    00000084: 	xorl	%eax, %eax
    00000086: 	leaq	DATAat0x8c9f(%rip), %rsi
    0000008d: 	movl	$0x1, %edi
    00000092: 	callq	__printf_chk@PLT # Offset: 146
    00000097: 	cmpl	$0x1, %r13d
    0000009b: 	jg	.Ltmp4 # Offset: 155
.Ltmp9:
    000000a1: 	movl	init_value(%rip), %edi
    000000a7: 	movq	%rsp, %r13
    000000aa: 	movabsq	$0x101010101010101, %r8
    000000b4: 	leaq	0x20000(%rsp), %r12
    000000bc: 	movzbl	%dil, %ecx
    000000c0: 	movd	%edi, %xmm0
    000000c4: 	movq	%rcx, %rax
    000000c7: 	movq	%rcx, %rsi
    000000ca: 	punpcklwd	%xmm0, %xmm0
    000000ce: 	mulq	%r8
    000000d1: 	pshufd	$0x0, %xmm0, %xmm0
    000000d6: 	imulq	%r8, %rsi
    000000da: 	movq	%rax, 0x20000(%rsp)
    000000e2: 	movq	%rcx, %rax
    000000e5: 	addq	%rdx, %rsi
    000000e8: 	mulq	%r8
    000000eb: 	movq	%rsi, 0x20008(%rsp)
    000000f3: 	movq	%rsi, 0x20018(%rsp)
    000000fb: 	movq	%rax, 0x20010(%rsp)
    00000103: 	movq	%rcx, %rax
    00000106: 	mulq	%r8
    00000109: 	movq	%rsi, 0x20028(%rsp)
    00000111: 	movq	%rsi, 0x20038(%rsp)
    00000119: 	movq	%rsi, 0x20048(%rsp)
    00000121: 	movq	%rax, 0x20020(%rsp)
    00000129: 	movq	%rcx, %rax
    0000012c: 	mulq	%r8
    0000012f: 	movq	%rsi, 0x20058(%rsp)
    00000137: 	movq	%rsi, 0x20068(%rsp)
    0000013f: 	movq	%rsi, 0x20078(%rsp)
    00000147: 	movq	%rax, 0x20030(%rsp)
    0000014f: 	movq	%rcx, %rax
    00000152: 	mulq	%r8
    00000155: 	movq	%rsi, 0x20088(%rsp)
    0000015d: 	movq	%rsi, 0x20098(%rsp)
    00000165: 	movq	%rsi, 0x200a8(%rsp)
    0000016d: 	movq	%rax, 0x20040(%rsp)
    00000175: 	movq	%rcx, %rax
    00000178: 	mulq	%r8
    0000017b: 	movq	%rsi, 0x200b8(%rsp)
    00000183: 	movq	%rsi, 0x200c8(%rsp)
    0000018b: 	movq	%rsi, 0x200d8(%rsp)
    00000193: 	movq	%rax, 0x20050(%rsp)
    0000019b: 	movq	%rcx, %rax
    0000019e: 	mulq	%r8
    000001a1: 	movq	%rsi, 0x200e8(%rsp)
    000001a9: 	movq	%rax, 0x20060(%rsp)
    000001b1: 	movq	%rcx, %rax
    000001b4: 	mulq	%r8
    000001b7: 	movq	%rax, 0x20070(%rsp)
    000001bf: 	movq	%rcx, %rax
    000001c2: 	mulq	%r8
    000001c5: 	movq	%rax, 0x20080(%rsp)
    000001cd: 	movq	%rcx, %rax
    000001d0: 	mulq	%r8
    000001d3: 	movq	%rax, 0x20090(%rsp)
    000001db: 	movq	%rcx, %rax
    000001de: 	mulq	%r8
    000001e1: 	movq	%rax, 0x200a0(%rsp)
    000001e9: 	movq	%rcx, %rax
    000001ec: 	mulq	%r8
    000001ef: 	movq	%rax, 0x200b0(%rsp)
    000001f7: 	movq	%rcx, %rax
    000001fa: 	mulq	%r8
    000001fd: 	movq	%rax, 0x200c0(%rsp)
    00000205: 	movq	%rcx, %rax
    00000208: 	mulq	%r8
    0000020b: 	movq	%rax, 0x200d0(%rsp)
    00000213: 	movq	%rcx, %rax
    00000216: 	mulq	%r8
    00000219: 	movq	%rax, 0x200e0(%rsp)
    00000221: 	movq	%rcx, %rax
    00000224: 	mulq	%r8
    00000227: 	movq	%rax, 0x200f0(%rsp)
    0000022f: 	movq	%r13, %rax
    00000232: 	movq	%rsi, 0x200f8(%rsp)
    0000023a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5:
    00000240: 	movaps	%xmm0, (%rax)
    00000243: 	addq	$0x10, %rax
    00000247: 	cmpq	%rax, %r12
    0000024a: 	jne	.Ltmp5 # Offset: 586
    0000024c: 	addl	$0x2a, %edi
    0000024f: 	leaq	inputData8(%rip), %rbp
    00000256: 	callq	srand@PLT # Offset: 598
    0000025b: 	movq	%rbp, %rdx
    0000025e: 	leaq	0x7a1200(%rbp), %r9
    00000265: 	movabsq	$0x5851f42d4c957f2d, %r8
    0000026f: 	movabsq	$0x14057b7ef767814f, %rdi
    00000279: 	nopl	(%rax) # Size: 7
.Ltmp6:
    00000280: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000287: 	addq	$0x1, %rdx
    0000028b: 	imulq	%r8, %rax
    0000028f: 	addq	%rdi, %rax
    00000292: 	movq	%rax, %rcx
    00000295: 	movq	%rax, %rsi
    00000298: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000029f: 	shrq	$0x14, %rcx
    000002a3: 	shlq	$0x17, %rsi
    000002a7: 	xorq	%rsi, %rcx
    000002aa: 	xorq	%rcx, %rax
    000002ad: 	sarq	$0x3, %rax
    000002b1: 	movb	%al, -0x1(%rdx)
    000002b4: 	cmpq	%r9, %rdx
    000002b7: 	jne	.Ltmp6 # Offset: 695
    000002b9: 	leaq	inputData16(%rip), %r14
    000002c0: 	movabsq	$0x5851f42d4c957f2d, %rdi
    000002ca: 	movabsq	$0x14057b7ef767814f, %rsi
    000002d4: 	movq	%r14, %rdx
    000002d7: 	leaq	0xf42400(%r14), %r8
    000002de: 	nop # Size: 2
.Ltmp7:
    000002e0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000002e7: 	addq	$0x2, %rdx
    000002eb: 	imulq	%rdi, %rax
    000002ef: 	addq	%rsi, %rax
    000002f2: 	movq	%rax, %rcx
    000002f5: 	movq	%rax, %r9
    000002f8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000002ff: 	shrq	$0x14, %rcx
    00000303: 	shlq	$0x17, %r9
    00000307: 	xorq	%r9, %rcx
    0000030a: 	xorq	%rcx, %rax
    0000030d: 	sarq	$0x3, %rax
    00000311: 	movw	%ax, -0x2(%rdx)
    00000315: 	cmpq	%r8, %rdx
    00000318: 	jne	.Ltmp7 # Offset: 792
    0000031a: 	movl	base_iterations(%rip), %eax
    00000320: 	movq	%r12, %rcx
    00000323: 	movq	%rbp, %rsi
    00000326: 	movq	%rbp, %rdi
    00000329: 	leaq	DATAat0x8140(%rip), %r8
    00000330: 	movl	$0xfa0, %edx
    00000335: 	leaq	resultData8(%rip), %r15
    0000033c: 	movabsq	$0x431bde82d7b634db, %rbx
    00000346: 	movl	%eax, iterations(%rip)
    0000034c: 	callq	_Z9test_lut1IhEvPKT_PS0_iS2_PKc # Offset: 844
    00000351: 	movq	%r12, %rcx
    00000354: 	movq	%rbp, %rsi
    00000357: 	movq	%rbp, %rdi
    0000035a: 	leaq	DATAat0x8168(%rip), %r8
    00000361: 	movl	$0xfa0, %edx
    00000366: 	callq	_Z9test_lut2IhEvPKT_PS0_iS2_PKc # Offset: 870
    0000036b: 	movq	%r12, %rcx
    0000036e: 	movq	%rbp, %rsi
    00000371: 	movq	%rbp, %rdi
    00000374: 	leaq	DATAat0x8190(%rip), %r8
    0000037b: 	movl	$0xfa0, %edx
    00000380: 	callq	_Z9test_lut3IhEvPKT_PS0_iS2_PKc # Offset: 896
    00000385: 	movq	%r12, %rcx
    00000388: 	movq	%rbp, %rsi
    0000038b: 	movq	%rbp, %rdi
    0000038e: 	leaq	DATAat0x81b8(%rip), %r8
    00000395: 	movl	$0xfa0, %edx
    0000039a: 	callq	_Z9test_lut4PKhPhiS0_PKc # Offset: 922
    0000039f: 	movq	%r12, %rcx
    000003a2: 	movq	%rbp, %rsi
    000003a5: 	movq	%rbp, %rdi
    000003a8: 	leaq	DATAat0x81e0(%rip), %r8
    000003af: 	movl	$0xfa0, %edx
    000003b4: 	callq	_Z9test_lut5PKhPhiS0_PKc # Offset: 948
    000003b9: 	movq	%r12, %rcx
    000003bc: 	movq	%rbp, %rsi
    000003bf: 	movq	%rbp, %rdi
    000003c2: 	leaq	DATAat0x8208(%rip), %r8
    000003c9: 	movl	$0xfa0, %edx
    000003ce: 	callq	_Z9test_lut6PKhPhiS0_PKc # Offset: 974
    000003d3: 	movq	%r12, %rcx
    000003d6: 	movq	%rbp, %rsi
    000003d9: 	movq	%rbp, %rdi
    000003dc: 	leaq	DATAat0x8230(%rip), %r8
    000003e3: 	movl	$0xfa0, %edx
    000003e8: 	callq	_Z9test_lut7IhEvPKT_PS0_iS2_PKc # Offset: 1000
    000003ed: 	movq	%r12, %rcx
    000003f0: 	movq	%rbp, %rsi
    000003f3: 	movq	%rbp, %rdi
    000003f6: 	leaq	DATAat0x8258(%rip), %r8
    000003fd: 	movl	$0xfa0, %edx
    00000402: 	callq	_Z9test_lut8IhEvPKT_PS0_iS2_PKc # Offset: 1026
    00000407: 	movl	iterations(%rip), %edx
    0000040d: 	xorl	%r8d, %r8d
    00000410: 	xorl	%ecx, %ecx
    00000412: 	movl	$0xfa0, %esi
    00000417: 	leaq	DATAat0x8280(%rip), %rdi
    0000041e: 	callq	_Z9summarizePKciiii # Offset: 1054
    00000423: 	movq	%r12, %rcx
    00000426: 	movq	%rbp, %rdi
    00000429: 	movl	$0xfa0, %edx
    0000042e: 	leaq	DATAat0x8cbd(%rip), %r8
    00000435: 	movq	%r15, %rsi
    00000438: 	callq	_Z9test_lut1IhEvPKT_PS0_iS2_PKc # Offset: 1080
    0000043d: 	movq	%r12, %rcx
    00000440: 	movq	%rbp, %rdi
    00000443: 	movl	$0xfa0, %edx
    00000448: 	leaq	DATAat0x8cd9(%rip), %r8
    0000044f: 	movq	%r15, %rsi
    00000452: 	callq	_Z9test_lut2IhEvPKT_PS0_iS2_PKc # Offset: 1106
    00000457: 	movq	%r12, %rcx
    0000045a: 	movq	%rbp, %rdi
    0000045d: 	movl	$0xfa0, %edx
    00000462: 	leaq	DATAat0x8cf5(%rip), %r8
    00000469: 	movq	%r15, %rsi
    0000046c: 	callq	_Z9test_lut3IhEvPKT_PS0_iS2_PKc # Offset: 1132
    00000471: 	movq	%r12, %rcx
    00000474: 	movq	%rbp, %rdi
    00000477: 	movl	$0xfa0, %edx
    0000047c: 	leaq	DATAat0x8d11(%rip), %r8
    00000483: 	movq	%r15, %rsi
    00000486: 	callq	_Z9test_lut4PKhPhiS0_PKc # Offset: 1158
    0000048b: 	movq	%r12, %rcx
    0000048e: 	movq	%rbp, %rdi
    00000491: 	movl	$0xfa0, %edx
    00000496: 	leaq	DATAat0x8d2d(%rip), %r8
    0000049d: 	movq	%r15, %rsi
    000004a0: 	callq	_Z9test_lut5PKhPhiS0_PKc # Offset: 1184
    000004a5: 	movq	%r12, %rcx
    000004a8: 	movq	%rbp, %rdi
    000004ab: 	movl	$0xfa0, %edx
    000004b0: 	leaq	DATAat0x8d49(%rip), %r8
    000004b7: 	movq	%r15, %rsi
    000004ba: 	callq	_Z9test_lut6PKhPhiS0_PKc # Offset: 1210
    000004bf: 	movq	%r12, %rcx
    000004c2: 	movq	%rbp, %rdi
    000004c5: 	movl	$0xfa0, %edx
    000004ca: 	leaq	DATAat0x8d65(%rip), %r8
    000004d1: 	movq	%r15, %rsi
    000004d4: 	callq	_Z9test_lut7IhEvPKT_PS0_iS2_PKc # Offset: 1236
    000004d9: 	movq	%r12, %rcx
    000004dc: 	movq	%rbp, %rdi
    000004df: 	movl	$0xfa0, %edx
    000004e4: 	leaq	DATAat0x8d81(%rip), %r8
    000004eb: 	movq	%r15, %rsi
    000004ee: 	callq	_Z9test_lut8IhEvPKT_PS0_iS2_PKc # Offset: 1262
    000004f3: 	movl	iterations(%rip), %edx
    000004f9: 	xorl	%r8d, %r8d
    000004fc: 	xorl	%ecx, %ecx
    000004fe: 	movl	$0xfa0, %esi
    00000503: 	leaq	DATAat0x8d9d(%rip), %rdi
    0000050a: 	callq	_Z9summarizePKciiii # Offset: 1290
    0000050f: 	movq	%r12, %rcx
    00000512: 	movq	%rbp, %rsi
    00000515: 	movq	%rbp, %rdi
    00000518: 	movslq	base_iterations(%rip), %rdx
    0000051f: 	leaq	DATAat0x82a8(%rip), %r8
    00000526: 	imulq	$0xfa0, %rdx, %rdx
    0000052d: 	movq	%rdx, %rax
    00000530: 	mulq	%rbx
    00000533: 	movl	$0x1, %eax
    00000538: 	shrq	$0x15, %rdx
    0000053c: 	testl	%edx, %edx
    0000053e: 	cmovlel	%eax, %edx
    00000541: 	movl	%edx, iterations(%rip)
    00000547: 	movl	$0x7a1200, %edx
    0000054c: 	callq	_Z9test_lut1IhEvPKT_PS0_iS2_PKc # Offset: 1356
    00000551: 	movq	%r12, %rcx
    00000554: 	movq	%rbp, %rsi
    00000557: 	movq	%rbp, %rdi
    0000055a: 	leaq	DATAat0x82d0(%rip), %r8
    00000561: 	movl	$0x7a1200, %edx
    00000566: 	callq	_Z9test_lut2IhEvPKT_PS0_iS2_PKc # Offset: 1382
    0000056b: 	movq	%r12, %rcx
    0000056e: 	movq	%rbp, %rsi
    00000571: 	movq	%rbp, %rdi
    00000574: 	leaq	DATAat0x82f8(%rip), %r8
    0000057b: 	movl	$0x7a1200, %edx
    00000580: 	callq	_Z9test_lut3IhEvPKT_PS0_iS2_PKc # Offset: 1408
    00000585: 	movq	%r12, %rcx
    00000588: 	movq	%rbp, %rsi
    0000058b: 	movq	%rbp, %rdi
    0000058e: 	leaq	DATAat0x8320(%rip), %r8
    00000595: 	movl	$0x7a1200, %edx
    0000059a: 	callq	_Z9test_lut4PKhPhiS0_PKc # Offset: 1434
    0000059f: 	movq	%r12, %rcx
    000005a2: 	movq	%rbp, %rsi
    000005a5: 	movq	%rbp, %rdi
    000005a8: 	leaq	DATAat0x8348(%rip), %r8
    000005af: 	movl	$0x7a1200, %edx
    000005b4: 	callq	_Z9test_lut5PKhPhiS0_PKc # Offset: 1460
    000005b9: 	movq	%r12, %rcx
    000005bc: 	movq	%rbp, %rsi
    000005bf: 	movq	%rbp, %rdi
    000005c2: 	leaq	DATAat0x8370(%rip), %r8
    000005c9: 	movl	$0x7a1200, %edx
    000005ce: 	callq	_Z9test_lut6PKhPhiS0_PKc # Offset: 1486
    000005d3: 	movq	%r12, %rcx
    000005d6: 	movq	%rbp, %rsi
    000005d9: 	movq	%rbp, %rdi
    000005dc: 	leaq	DATAat0x8398(%rip), %r8
    000005e3: 	movl	$0x7a1200, %edx
    000005e8: 	callq	_Z9test_lut7IhEvPKT_PS0_iS2_PKc # Offset: 1512
    000005ed: 	movq	%r12, %rcx
    000005f0: 	movq	%rbp, %rsi
    000005f3: 	movq	%rbp, %rdi
    000005f6: 	leaq	DATAat0x83c0(%rip), %r8
    000005fd: 	movl	$0x7a1200, %edx
    00000602: 	callq	_Z9test_lut8IhEvPKT_PS0_iS2_PKc # Offset: 1538
    00000607: 	movl	iterations(%rip), %edx
    0000060d: 	xorl	%r8d, %r8d
    00000610: 	xorl	%ecx, %ecx
    00000612: 	movl	$0x7a1200, %esi
    00000617: 	leaq	DATAat0x83e8(%rip), %rdi
    0000061e: 	callq	_Z9summarizePKciiii # Offset: 1566
    00000623: 	movq	%r12, %rcx
    00000626: 	movq	%rbp, %rdi
    00000629: 	movl	$0x7a1200, %edx
    0000062e: 	leaq	DATAat0x8db8(%rip), %r8
    00000635: 	movq	%r15, %rsi
    00000638: 	callq	_Z9test_lut1IhEvPKT_PS0_iS2_PKc # Offset: 1592
    0000063d: 	movq	%r12, %rcx
    00000640: 	movq	%rbp, %rdi
    00000643: 	movl	$0x7a1200, %edx
    00000648: 	leaq	DATAat0x8dd4(%rip), %r8
    0000064f: 	movq	%r15, %rsi
    00000652: 	callq	_Z9test_lut2IhEvPKT_PS0_iS2_PKc # Offset: 1618
    00000657: 	movq	%r12, %rcx
    0000065a: 	movq	%rbp, %rdi
    0000065d: 	movl	$0x7a1200, %edx
    00000662: 	leaq	DATAat0x8df0(%rip), %r8
    00000669: 	movq	%r15, %rsi
    0000066c: 	callq	_Z9test_lut3IhEvPKT_PS0_iS2_PKc # Offset: 1644
    00000671: 	movq	%r12, %rcx
    00000674: 	movq	%rbp, %rdi
    00000677: 	movl	$0x7a1200, %edx
    0000067c: 	leaq	DATAat0x8e0c(%rip), %r8
    00000683: 	movq	%r15, %rsi
    00000686: 	callq	_Z9test_lut4PKhPhiS0_PKc # Offset: 1670
    0000068b: 	movq	%r12, %rcx
    0000068e: 	movq	%rbp, %rdi
    00000691: 	movl	$0x7a1200, %edx
    00000696: 	leaq	DATAat0x8e28(%rip), %r8
    0000069d: 	movq	%r15, %rsi
    000006a0: 	callq	_Z9test_lut5PKhPhiS0_PKc # Offset: 1696
    000006a5: 	movq	%r12, %rcx
    000006a8: 	movq	%rbp, %rdi
    000006ab: 	movl	$0x7a1200, %edx
    000006b0: 	leaq	DATAat0x8e44(%rip), %r8
    000006b7: 	movq	%r15, %rsi
    000006ba: 	callq	_Z9test_lut6PKhPhiS0_PKc # Offset: 1722
    000006bf: 	movq	%r12, %rcx
    000006c2: 	movq	%rbp, %rdi
    000006c5: 	movl	$0x7a1200, %edx
    000006ca: 	leaq	DATAat0x8e60(%rip), %r8
    000006d1: 	movq	%r15, %rsi
    000006d4: 	callq	_Z9test_lut7IhEvPKT_PS0_iS2_PKc # Offset: 1748
    000006d9: 	movq	%r12, %rcx
    000006dc: 	movq	%rbp, %rdi
    000006df: 	movl	$0x7a1200, %edx
    000006e4: 	leaq	DATAat0x8e7c(%rip), %r8
    000006eb: 	movq	%r15, %rsi
    000006ee: 	leaq	0x20080(%rsp), %r12
    000006f6: 	callq	_Z9test_lut8IhEvPKT_PS0_iS2_PKc # Offset: 1782
    000006fb: 	movl	iterations(%rip), %edx
    00000701: 	xorl	%r8d, %r8d
    00000704: 	xorl	%ecx, %ecx
    00000706: 	movl	$0x7a1200, %esi
    0000070b: 	leaq	DATAat0x8e98(%rip), %rdi
    00000712: 	callq	_Z9summarizePKciiii # Offset: 1810
    00000717: 	movq	%r12, %rcx
    0000071a: 	movq	%rbp, %rsi
    0000071d: 	movq	%rbp, %rdi
    00000720: 	movl	base_iterations(%rip), %eax
    00000726: 	leaq	DATAat0x8410(%rip), %r8
    0000072d: 	movl	$0xfa0, %edx
    00000732: 	movl	%eax, iterations(%rip)
    00000738: 	callq	_Z9test_lut1IaEvPKT_PS0_iS2_PKc # Offset: 1848
    0000073d: 	movq	%r12, %rcx
    00000740: 	movq	%rbp, %rsi
    00000743: 	movq	%rbp, %rdi
    00000746: 	leaq	DATAat0x8438(%rip), %r8
    0000074d: 	movl	$0xfa0, %edx
    00000752: 	callq	_Z9test_lut2IaEvPKT_PS0_iS2_PKc # Offset: 1874
    00000757: 	movq	%r12, %rcx
    0000075a: 	movq	%rbp, %rsi
    0000075d: 	movq	%rbp, %rdi
    00000760: 	leaq	DATAat0x8460(%rip), %r8
    00000767: 	movl	$0xfa0, %edx
    0000076c: 	callq	_Z9test_lut3IaEvPKT_PS0_iS2_PKc # Offset: 1900
    00000771: 	movq	%r12, %rcx
    00000774: 	movq	%rbp, %rsi
    00000777: 	movq	%rbp, %rdi
    0000077a: 	leaq	DATAat0x8488(%rip), %r8
    00000781: 	movl	$0xfa0, %edx
    00000786: 	callq	_Z9test_lut4PKaPaiS0_PKc # Offset: 1926
    0000078b: 	movq	%r12, %rcx
    0000078e: 	movq	%rbp, %rsi
    00000791: 	movq	%rbp, %rdi
    00000794: 	leaq	DATAat0x84b0(%rip), %r8
    0000079b: 	movl	$0xfa0, %edx
    000007a0: 	callq	_Z9test_lut5PKaPaiS0_PKc # Offset: 1952
    000007a5: 	movq	%r12, %rcx
    000007a8: 	movq	%rbp, %rsi
    000007ab: 	movq	%rbp, %rdi
    000007ae: 	leaq	DATAat0x84d8(%rip), %r8
    000007b5: 	movl	$0xfa0, %edx
    000007ba: 	callq	_Z9test_lut6PKaPaiS0_PKc # Offset: 1978
    000007bf: 	movq	%r12, %rcx
    000007c2: 	movq	%rbp, %rsi
    000007c5: 	movq	%rbp, %rdi
    000007c8: 	leaq	DATAat0x8500(%rip), %r8
    000007cf: 	movl	$0xfa0, %edx
    000007d4: 	callq	_Z9test_lut7IaEvPKT_PS0_iS2_PKc # Offset: 2004
    000007d9: 	movq	%r12, %rcx
    000007dc: 	movq	%rbp, %rsi
    000007df: 	movq	%rbp, %rdi
    000007e2: 	leaq	DATAat0x8528(%rip), %r8
    000007e9: 	movl	$0xfa0, %edx
    000007ee: 	callq	_Z9test_lut8IaEvPKT_PS0_iS2_PKc # Offset: 2030
    000007f3: 	movl	iterations(%rip), %edx
    000007f9: 	xorl	%r8d, %r8d
    000007fc: 	xorl	%ecx, %ecx
    000007fe: 	movl	$0xfa0, %esi
    00000803: 	leaq	DATAat0x8550(%rip), %rdi
    0000080a: 	callq	_Z9summarizePKciiii # Offset: 2058
    0000080f: 	movq	%r12, %rcx
    00000812: 	movq	%rbp, %rdi
    00000815: 	movl	$0xfa0, %edx
    0000081a: 	leaq	DATAat0x8cbe(%rip), %r8
    00000821: 	movq	%r15, %rsi
    00000824: 	callq	_Z9test_lut1IaEvPKT_PS0_iS2_PKc # Offset: 2084
    00000829: 	movq	%r12, %rcx
    0000082c: 	movq	%rbp, %rdi
    0000082f: 	movl	$0xfa0, %edx
    00000834: 	leaq	DATAat0x8cda(%rip), %r8
    0000083b: 	movq	%r15, %rsi
    0000083e: 	callq	_Z9test_lut2IaEvPKT_PS0_iS2_PKc # Offset: 2110
    00000843: 	movq	%r12, %rcx
    00000846: 	movq	%rbp, %rdi
    00000849: 	movl	$0xfa0, %edx
    0000084e: 	leaq	DATAat0x8cf6(%rip), %r8
    00000855: 	movq	%r15, %rsi
    00000858: 	callq	_Z9test_lut3IaEvPKT_PS0_iS2_PKc # Offset: 2136
    0000085d: 	movq	%r12, %rcx
    00000860: 	movq	%rbp, %rdi
    00000863: 	movl	$0xfa0, %edx
    00000868: 	leaq	DATAat0x8d12(%rip), %r8
    0000086f: 	movq	%r15, %rsi
    00000872: 	callq	_Z9test_lut4PKaPaiS0_PKc # Offset: 2162
    00000877: 	movq	%r12, %rcx
    0000087a: 	movq	%rbp, %rdi
    0000087d: 	movl	$0xfa0, %edx
    00000882: 	leaq	DATAat0x8d2e(%rip), %r8
    00000889: 	movq	%r15, %rsi
    0000088c: 	callq	_Z9test_lut5PKaPaiS0_PKc # Offset: 2188
    00000891: 	movq	%r12, %rcx
    00000894: 	movq	%rbp, %rdi
    00000897: 	movl	$0xfa0, %edx
    0000089c: 	leaq	DATAat0x8d4a(%rip), %r8
    000008a3: 	movq	%r15, %rsi
    000008a6: 	callq	_Z9test_lut6PKaPaiS0_PKc # Offset: 2214
    000008ab: 	movq	%r12, %rcx
    000008ae: 	movq	%rbp, %rdi
    000008b1: 	movl	$0xfa0, %edx
    000008b6: 	leaq	DATAat0x8d66(%rip), %r8
    000008bd: 	movq	%r15, %rsi
    000008c0: 	callq	_Z9test_lut7IaEvPKT_PS0_iS2_PKc # Offset: 2240
    000008c5: 	movq	%r12, %rcx
    000008c8: 	movq	%rbp, %rdi
    000008cb: 	movl	$0xfa0, %edx
    000008d0: 	leaq	DATAat0x8d82(%rip), %r8
    000008d7: 	movq	%r15, %rsi
    000008da: 	callq	_Z9test_lut8IaEvPKT_PS0_iS2_PKc # Offset: 2266
    000008df: 	movl	iterations(%rip), %edx
    000008e5: 	xorl	%r8d, %r8d
    000008e8: 	xorl	%ecx, %ecx
    000008ea: 	movl	$0xfa0, %esi
    000008ef: 	leaq	DATAat0x8d9e(%rip), %rdi
    000008f6: 	callq	_Z9summarizePKciiii # Offset: 2294
    000008fb: 	movq	%r12, %rcx
    000008fe: 	movq	%rbp, %rsi
    00000901: 	movq	%rbp, %rdi
    00000904: 	movslq	base_iterations(%rip), %rdx
    0000090b: 	leaq	DATAat0x8578(%rip), %r8
    00000912: 	imulq	$0xfa0, %rdx, %rdx
    00000919: 	movq	%rdx, %rax
    0000091c: 	mulq	%rbx
    0000091f: 	movl	$0x1, %eax
    00000924: 	shrq	$0x15, %rdx
    00000928: 	testl	%edx, %edx
    0000092a: 	cmovlel	%eax, %edx
    0000092d: 	movl	%edx, iterations(%rip)
    00000933: 	movl	$0x7a1200, %edx
    00000938: 	callq	_Z9test_lut1IaEvPKT_PS0_iS2_PKc # Offset: 2360
    0000093d: 	movq	%r12, %rcx
    00000940: 	movq	%rbp, %rsi
    00000943: 	movq	%rbp, %rdi
    00000946: 	leaq	DATAat0x85a0(%rip), %r8
    0000094d: 	movl	$0x7a1200, %edx
    00000952: 	callq	_Z9test_lut2IaEvPKT_PS0_iS2_PKc # Offset: 2386
    00000957: 	movq	%r12, %rcx
    0000095a: 	movq	%rbp, %rsi
    0000095d: 	movq	%rbp, %rdi
    00000960: 	leaq	DATAat0x85c8(%rip), %r8
    00000967: 	movl	$0x7a1200, %edx
    0000096c: 	callq	_Z9test_lut3IaEvPKT_PS0_iS2_PKc # Offset: 2412
    00000971: 	movq	%r12, %rcx
    00000974: 	movq	%rbp, %rsi
    00000977: 	movq	%rbp, %rdi
    0000097a: 	leaq	DATAat0x85f0(%rip), %r8
    00000981: 	movl	$0x7a1200, %edx
    00000986: 	callq	_Z9test_lut4PKaPaiS0_PKc # Offset: 2438
    0000098b: 	movq	%r12, %rcx
    0000098e: 	movq	%rbp, %rsi
    00000991: 	movq	%rbp, %rdi
    00000994: 	leaq	DATAat0x8618(%rip), %r8
    0000099b: 	movl	$0x7a1200, %edx
    000009a0: 	callq	_Z9test_lut5PKaPaiS0_PKc # Offset: 2464
    000009a5: 	movq	%r12, %rcx
    000009a8: 	movq	%rbp, %rsi
    000009ab: 	movq	%rbp, %rdi
    000009ae: 	leaq	DATAat0x8640(%rip), %r8
    000009b5: 	movl	$0x7a1200, %edx
    000009ba: 	callq	_Z9test_lut6PKaPaiS0_PKc # Offset: 2490
    000009bf: 	movq	%r12, %rcx
    000009c2: 	movq	%rbp, %rsi
    000009c5: 	movq	%rbp, %rdi
    000009c8: 	leaq	DATAat0x8668(%rip), %r8
    000009cf: 	movl	$0x7a1200, %edx
    000009d4: 	callq	_Z9test_lut7IaEvPKT_PS0_iS2_PKc # Offset: 2516
    000009d9: 	movq	%r12, %rcx
    000009dc: 	movq	%rbp, %rsi
    000009df: 	movq	%rbp, %rdi
    000009e2: 	leaq	DATAat0x8690(%rip), %r8
    000009e9: 	movl	$0x7a1200, %edx
    000009ee: 	callq	_Z9test_lut8IaEvPKT_PS0_iS2_PKc # Offset: 2542
    000009f3: 	movl	iterations(%rip), %edx
    000009f9: 	xorl	%r8d, %r8d
    000009fc: 	xorl	%ecx, %ecx
    000009fe: 	movl	$0x7a1200, %esi
    00000a03: 	leaq	DATAat0x86b8(%rip), %rdi
    00000a0a: 	callq	_Z9summarizePKciiii # Offset: 2570
    00000a0f: 	movq	%r12, %rcx
    00000a12: 	movq	%rbp, %rdi
    00000a15: 	movl	$0x7a1200, %edx
    00000a1a: 	leaq	DATAat0x8db9(%rip), %r8
    00000a21: 	movq	%r15, %rsi
    00000a24: 	callq	_Z9test_lut1IaEvPKT_PS0_iS2_PKc # Offset: 2596
    00000a29: 	movq	%r12, %rcx
    00000a2c: 	movq	%rbp, %rdi
    00000a2f: 	movl	$0x7a1200, %edx
    00000a34: 	leaq	DATAat0x8dd5(%rip), %r8
    00000a3b: 	movq	%r15, %rsi
    00000a3e: 	callq	_Z9test_lut2IaEvPKT_PS0_iS2_PKc # Offset: 2622
    00000a43: 	movq	%r12, %rcx
    00000a46: 	movq	%rbp, %rdi
    00000a49: 	movl	$0x7a1200, %edx
    00000a4e: 	leaq	DATAat0x8df1(%rip), %r8
    00000a55: 	movq	%r15, %rsi
    00000a58: 	callq	_Z9test_lut3IaEvPKT_PS0_iS2_PKc # Offset: 2648
    00000a5d: 	movq	%r12, %rcx
    00000a60: 	movq	%rbp, %rdi
    00000a63: 	movl	$0x7a1200, %edx
    00000a68: 	leaq	DATAat0x8e0d(%rip), %r8
    00000a6f: 	movq	%r15, %rsi
    00000a72: 	callq	_Z9test_lut4PKaPaiS0_PKc # Offset: 2674
    00000a77: 	movq	%r12, %rcx
    00000a7a: 	movq	%rbp, %rdi
    00000a7d: 	movl	$0x7a1200, %edx
    00000a82: 	leaq	DATAat0x8e29(%rip), %r8
    00000a89: 	movq	%r15, %rsi
    00000a8c: 	callq	_Z9test_lut5PKaPaiS0_PKc # Offset: 2700
    00000a91: 	movq	%r12, %rcx
    00000a94: 	movq	%rbp, %rdi
    00000a97: 	movl	$0x7a1200, %edx
    00000a9c: 	leaq	DATAat0x8e45(%rip), %r8
    00000aa3: 	movq	%r15, %rsi
    00000aa6: 	callq	_Z9test_lut6PKaPaiS0_PKc # Offset: 2726
    00000aab: 	movq	%r12, %rcx
    00000aae: 	movq	%rbp, %rdi
    00000ab1: 	movl	$0x7a1200, %edx
    00000ab6: 	leaq	DATAat0x8e61(%rip), %r8
    00000abd: 	movq	%r15, %rsi
    00000ac0: 	callq	_Z9test_lut7IaEvPKT_PS0_iS2_PKc # Offset: 2752
    00000ac5: 	movq	%r12, %rcx
    00000ac8: 	movq	%rbp, %rdi
    00000acb: 	movl	$0x7a1200, %edx
    00000ad0: 	leaq	DATAat0x8e7d(%rip), %r8
    00000ad7: 	movq	%r15, %rsi
    00000ada: 	leaq	resultData16(%rip), %rbp
    00000ae1: 	callq	_Z9test_lut8IaEvPKT_PS0_iS2_PKc # Offset: 2785
    00000ae6: 	movl	iterations(%rip), %edx
    00000aec: 	xorl	%r8d, %r8d
    00000aef: 	xorl	%ecx, %ecx
    00000af1: 	movl	$0x7a1200, %esi
    00000af6: 	leaq	DATAat0x8e99(%rip), %rdi
    00000afd: 	leaq	0x10000(%rsp), %r12
    00000b05: 	callq	_Z9summarizePKciiii # Offset: 2821
    00000b0a: 	movq	%r13, %rcx
    00000b0d: 	movl	$0xfa0, %edx
    00000b12: 	movq	%r14, %rsi
    00000b15: 	movl	base_iterations(%rip), %eax
    00000b1b: 	leaq	DATAat0x86e0(%rip), %r8
    00000b22: 	movq	%r14, %rdi
    00000b25: 	movl	%eax, iterations(%rip)
    00000b2b: 	callq	_Z9test_lut1ItEvPKT_PS0_iS2_PKc # Offset: 2859
    00000b30: 	movq	%r13, %rcx
    00000b33: 	movl	$0xfa0, %edx
    00000b38: 	movq	%r14, %rsi
    00000b3b: 	leaq	DATAat0x8708(%rip), %r8
    00000b42: 	movq	%r14, %rdi
    00000b45: 	callq	_Z9test_lut2ItEvPKT_PS0_iS2_PKc # Offset: 2885
    00000b4a: 	movq	%r13, %rcx
    00000b4d: 	movl	$0xfa0, %edx
    00000b52: 	movq	%r14, %rsi
    00000b55: 	leaq	DATAat0x8730(%rip), %r8
    00000b5c: 	movq	%r14, %rdi
    00000b5f: 	callq	_Z9test_lut3ItEvPKT_PS0_iS2_PKc # Offset: 2911
    00000b64: 	movq	%r13, %rcx
    00000b67: 	movl	$0xfa0, %edx
    00000b6c: 	movq	%r14, %rsi
    00000b6f: 	leaq	DATAat0x8758(%rip), %r8
    00000b76: 	movq	%r14, %rdi
    00000b79: 	callq	_Z9test_lut4PKtPtiS0_PKc # Offset: 2937
    00000b7e: 	movq	%r13, %rcx
    00000b81: 	movl	$0xfa0, %edx
    00000b86: 	movq	%r14, %rsi
    00000b89: 	leaq	DATAat0x8780(%rip), %r8
    00000b90: 	movq	%r14, %rdi
    00000b93: 	callq	_Z9test_lut5PKtPtiS0_PKc # Offset: 2963
    00000b98: 	movq	%r13, %rcx
    00000b9b: 	movl	$0xfa0, %edx
    00000ba0: 	movq	%r14, %rsi
    00000ba3: 	leaq	DATAat0x87a8(%rip), %r8
    00000baa: 	movq	%r14, %rdi
    00000bad: 	callq	_Z9test_lut6PKtPtiS0_PKc # Offset: 2989
    00000bb2: 	movq	%r13, %rcx
    00000bb5: 	movl	$0xfa0, %edx
    00000bba: 	movq	%r14, %rsi
    00000bbd: 	leaq	DATAat0x87d0(%rip), %r8
    00000bc4: 	movq	%r14, %rdi
    00000bc7: 	callq	_Z9test_lut7ItEvPKT_PS0_iS2_PKc # Offset: 3015
    00000bcc: 	movq	%r13, %rcx
    00000bcf: 	movl	$0xfa0, %edx
    00000bd4: 	movq	%r14, %rsi
    00000bd7: 	leaq	DATAat0x87f8(%rip), %r8
    00000bde: 	movq	%r14, %rdi
    00000be1: 	callq	_Z9test_lut8ItEvPKT_PS0_iS2_PKc # Offset: 3041
    00000be6: 	movl	iterations(%rip), %edx
    00000bec: 	xorl	%r8d, %r8d
    00000bef: 	xorl	%ecx, %ecx
    00000bf1: 	movl	$0xfa0, %esi
    00000bf6: 	leaq	DATAat0x8820(%rip), %rdi
    00000bfd: 	callq	_Z9summarizePKciiii # Offset: 3069
    00000c02: 	movq	%r13, %rcx
    00000c05: 	movl	$0xfa0, %edx
    00000c0a: 	movq	%rbp, %rsi
    00000c0d: 	leaq	DATAat0x8eb3(%rip), %r8
    00000c14: 	movq	%r14, %rdi
    00000c17: 	callq	_Z9test_lut1ItEvPKT_PS0_iS2_PKc # Offset: 3095
    00000c1c: 	movq	%r13, %rcx
    00000c1f: 	movl	$0xfa0, %edx
    00000c24: 	movq	%rbp, %rsi
    00000c27: 	leaq	DATAat0x8ed0(%rip), %r8
    00000c2e: 	movq	%r14, %rdi
    00000c31: 	callq	_Z9test_lut2ItEvPKT_PS0_iS2_PKc # Offset: 3121
    00000c36: 	movq	%r13, %rcx
    00000c39: 	movl	$0xfa0, %edx
    00000c3e: 	movq	%rbp, %rsi
    00000c41: 	leaq	DATAat0x8eed(%rip), %r8
    00000c48: 	movq	%r14, %rdi
    00000c4b: 	callq	_Z9test_lut3ItEvPKT_PS0_iS2_PKc # Offset: 3147
    00000c50: 	movq	%r13, %rcx
    00000c53: 	movl	$0xfa0, %edx
    00000c58: 	movq	%rbp, %rsi
    00000c5b: 	leaq	DATAat0x8f0a(%rip), %r8
    00000c62: 	movq	%r14, %rdi
    00000c65: 	callq	_Z9test_lut4PKtPtiS0_PKc # Offset: 3173
    00000c6a: 	movq	%r13, %rcx
    00000c6d: 	movl	$0xfa0, %edx
    00000c72: 	movq	%rbp, %rsi
    00000c75: 	leaq	DATAat0x8f27(%rip), %r8
    00000c7c: 	movq	%r14, %rdi
    00000c7f: 	callq	_Z9test_lut5PKtPtiS0_PKc # Offset: 3199
    00000c84: 	movq	%r13, %rcx
    00000c87: 	movl	$0xfa0, %edx
    00000c8c: 	movq	%rbp, %rsi
    00000c8f: 	leaq	DATAat0x8f44(%rip), %r8
    00000c96: 	movq	%r14, %rdi
    00000c99: 	callq	_Z9test_lut6PKtPtiS0_PKc # Offset: 3225
    00000c9e: 	movq	%r13, %rcx
    00000ca1: 	movl	$0xfa0, %edx
    00000ca6: 	movq	%rbp, %rsi
    00000ca9: 	leaq	DATAat0x8f61(%rip), %r8
    00000cb0: 	movq	%r14, %rdi
    00000cb3: 	callq	_Z9test_lut7ItEvPKT_PS0_iS2_PKc # Offset: 3251
    00000cb8: 	movq	%r13, %rcx
    00000cbb: 	movl	$0xfa0, %edx
    00000cc0: 	movq	%rbp, %rsi
    00000cc3: 	leaq	DATAat0x8f7e(%rip), %r8
    00000cca: 	movq	%r14, %rdi
    00000ccd: 	callq	_Z9test_lut8ItEvPKT_PS0_iS2_PKc # Offset: 3277
    00000cd2: 	movl	iterations(%rip), %edx
    00000cd8: 	xorl	%r8d, %r8d
    00000cdb: 	xorl	%ecx, %ecx
    00000cdd: 	movl	$0xfa0, %esi
    00000ce2: 	leaq	DATAat0x8f9b(%rip), %rdi
    00000ce9: 	callq	_Z9summarizePKciiii # Offset: 3305
    00000cee: 	movq	%r13, %rcx
    00000cf1: 	movq	%r14, %rsi
    00000cf4: 	movq	%r14, %rdi
    00000cf7: 	movslq	base_iterations(%rip), %rdx
    00000cfe: 	leaq	DATAat0x8848(%rip), %r8
    00000d05: 	imulq	$0xfa0, %rdx, %rdx
    00000d0c: 	movq	%rdx, %rax
    00000d0f: 	mulq	%rbx
    00000d12: 	movl	$0x1, %eax
    00000d17: 	shrq	$0x15, %rdx
    00000d1b: 	testl	%edx, %edx
    00000d1d: 	cmovlel	%eax, %edx
    00000d20: 	movl	%edx, iterations(%rip)
    00000d26: 	movl	$0x7a1200, %edx
    00000d2b: 	callq	_Z9test_lut1ItEvPKT_PS0_iS2_PKc # Offset: 3371
    00000d30: 	movq	%r13, %rcx
    00000d33: 	movl	$0x7a1200, %edx
    00000d38: 	movq	%r14, %rsi
    00000d3b: 	leaq	DATAat0x8870(%rip), %r8
    00000d42: 	movq	%r14, %rdi
    00000d45: 	callq	_Z9test_lut2ItEvPKT_PS0_iS2_PKc # Offset: 3397
    00000d4a: 	movq	%r13, %rcx
    00000d4d: 	movl	$0x7a1200, %edx
    00000d52: 	movq	%r14, %rsi
    00000d55: 	leaq	DATAat0x8898(%rip), %r8
    00000d5c: 	movq	%r14, %rdi
    00000d5f: 	callq	_Z9test_lut3ItEvPKT_PS0_iS2_PKc # Offset: 3423
    00000d64: 	movq	%r13, %rcx
    00000d67: 	movl	$0x7a1200, %edx
    00000d6c: 	movq	%r14, %rsi
    00000d6f: 	leaq	DATAat0x88c0(%rip), %r8
    00000d76: 	movq	%r14, %rdi
    00000d79: 	callq	_Z9test_lut4PKtPtiS0_PKc # Offset: 3449
    00000d7e: 	movq	%r13, %rcx
    00000d81: 	movl	$0x7a1200, %edx
    00000d86: 	movq	%r14, %rsi
    00000d89: 	leaq	DATAat0x88e8(%rip), %r8
    00000d90: 	movq	%r14, %rdi
    00000d93: 	callq	_Z9test_lut5PKtPtiS0_PKc # Offset: 3475
    00000d98: 	movq	%r13, %rcx
    00000d9b: 	movl	$0x7a1200, %edx
    00000da0: 	movq	%r14, %rsi
    00000da3: 	leaq	DATAat0x8910(%rip), %r8
    00000daa: 	movq	%r14, %rdi
    00000dad: 	callq	_Z9test_lut6PKtPtiS0_PKc # Offset: 3501
    00000db2: 	movq	%r13, %rcx
    00000db5: 	movl	$0x7a1200, %edx
    00000dba: 	movq	%r14, %rsi
    00000dbd: 	leaq	DATAat0x8938(%rip), %r8
    00000dc4: 	movq	%r14, %rdi
    00000dc7: 	callq	_Z9test_lut7ItEvPKT_PS0_iS2_PKc # Offset: 3527
    00000dcc: 	movq	%r13, %rcx
    00000dcf: 	movl	$0x7a1200, %edx
    00000dd4: 	movq	%r14, %rsi
    00000dd7: 	leaq	DATAat0x8960(%rip), %r8
    00000dde: 	movq	%r14, %rdi
    00000de1: 	callq	_Z9test_lut8ItEvPKT_PS0_iS2_PKc # Offset: 3553
    00000de6: 	movl	iterations(%rip), %edx
    00000dec: 	xorl	%r8d, %r8d
    00000def: 	xorl	%ecx, %ecx
    00000df1: 	movl	$0x7a1200, %esi
    00000df6: 	leaq	DATAat0x8988(%rip), %rdi
    00000dfd: 	callq	_Z9summarizePKciiii # Offset: 3581
    00000e02: 	movq	%r13, %rcx
    00000e05: 	movl	$0x7a1200, %edx
    00000e0a: 	movq	%rbp, %rsi
    00000e0d: 	leaq	DATAat0x8fb7(%rip), %r8
    00000e14: 	movq	%r14, %rdi
    00000e17: 	callq	_Z9test_lut1ItEvPKT_PS0_iS2_PKc # Offset: 3607
    00000e1c: 	movq	%r13, %rcx
    00000e1f: 	movl	$0x7a1200, %edx
    00000e24: 	movq	%rbp, %rsi
    00000e27: 	leaq	DATAat0x8fd4(%rip), %r8
    00000e2e: 	movq	%r14, %rdi
    00000e31: 	callq	_Z9test_lut2ItEvPKT_PS0_iS2_PKc # Offset: 3633
    00000e36: 	movq	%r13, %rcx
    00000e39: 	movl	$0x7a1200, %edx
    00000e3e: 	movq	%rbp, %rsi
    00000e41: 	leaq	DATAat0x8ff1(%rip), %r8
    00000e48: 	movq	%r14, %rdi
    00000e4b: 	callq	_Z9test_lut3ItEvPKT_PS0_iS2_PKc # Offset: 3659
    00000e50: 	movq	%r13, %rcx
    00000e53: 	movl	$0x7a1200, %edx
    00000e58: 	movq	%rbp, %rsi
    00000e5b: 	leaq	DATAat0x900e(%rip), %r8
    00000e62: 	movq	%r14, %rdi
    00000e65: 	callq	_Z9test_lut4PKtPtiS0_PKc # Offset: 3685
    00000e6a: 	movq	%r13, %rcx
    00000e6d: 	movl	$0x7a1200, %edx
    00000e72: 	movq	%rbp, %rsi
    00000e75: 	leaq	DATAat0x902b(%rip), %r8
    00000e7c: 	movq	%r14, %rdi
    00000e7f: 	callq	_Z9test_lut5PKtPtiS0_PKc # Offset: 3711
    00000e84: 	movq	%r13, %rcx
    00000e87: 	movl	$0x7a1200, %edx
    00000e8c: 	movq	%rbp, %rsi
    00000e8f: 	leaq	DATAat0x9048(%rip), %r8
    00000e96: 	movq	%r14, %rdi
    00000e99: 	callq	_Z9test_lut6PKtPtiS0_PKc # Offset: 3737
    00000e9e: 	movq	%r13, %rcx
    00000ea1: 	movl	$0x7a1200, %edx
    00000ea6: 	movq	%rbp, %rsi
    00000ea9: 	leaq	DATAat0x9065(%rip), %r8
    00000eb0: 	movq	%r14, %rdi
    00000eb3: 	callq	_Z9test_lut7ItEvPKT_PS0_iS2_PKc # Offset: 3763
    00000eb8: 	movq	%r13, %rcx
    00000ebb: 	movl	$0x7a1200, %edx
    00000ec0: 	movq	%rbp, %rsi
    00000ec3: 	leaq	DATAat0x9082(%rip), %r8
    00000eca: 	movq	%r14, %rdi
    00000ecd: 	callq	_Z9test_lut8ItEvPKT_PS0_iS2_PKc # Offset: 3789
    00000ed2: 	movl	iterations(%rip), %edx
    00000ed8: 	xorl	%r8d, %r8d
    00000edb: 	xorl	%ecx, %ecx
    00000edd: 	movl	$0x7a1200, %esi
    00000ee2: 	leaq	DATAat0x909f(%rip), %rdi
    00000ee9: 	callq	_Z9summarizePKciiii # Offset: 3817
    00000eee: 	movq	%r12, %rcx
    00000ef1: 	movl	$0xfa0, %edx
    00000ef6: 	movq	%r14, %rsi
    00000ef9: 	movl	base_iterations(%rip), %eax
    00000eff: 	leaq	DATAat0x89b0(%rip), %r8
    00000f06: 	movq	%r14, %rdi
    00000f09: 	movl	%eax, iterations(%rip)
    00000f0f: 	callq	_Z9test_lut1IsEvPKT_PS0_iS2_PKc # Offset: 3855
    00000f14: 	movq	%r12, %rcx
    00000f17: 	movl	$0xfa0, %edx
    00000f1c: 	movq	%r14, %rsi
    00000f1f: 	leaq	DATAat0x89d8(%rip), %r8
    00000f26: 	movq	%r14, %rdi
    00000f29: 	callq	_Z9test_lut2IsEvPKT_PS0_iS2_PKc # Offset: 3881
    00000f2e: 	movq	%r12, %rcx
    00000f31: 	movl	$0xfa0, %edx
    00000f36: 	movq	%r14, %rsi
    00000f39: 	leaq	DATAat0x8a00(%rip), %r8
    00000f40: 	movq	%r14, %rdi
    00000f43: 	callq	_Z9test_lut3IsEvPKT_PS0_iS2_PKc # Offset: 3907
    00000f48: 	movq	%r12, %rcx
    00000f4b: 	movl	$0xfa0, %edx
    00000f50: 	movq	%r14, %rsi
    00000f53: 	leaq	DATAat0x8a28(%rip), %r8
    00000f5a: 	movq	%r14, %rdi
    00000f5d: 	callq	_Z9test_lut4PKsPsiS0_PKc # Offset: 3933
    00000f62: 	movq	%r12, %rcx
    00000f65: 	movl	$0xfa0, %edx
    00000f6a: 	movq	%r14, %rsi
    00000f6d: 	leaq	DATAat0x8a50(%rip), %r8
    00000f74: 	movq	%r14, %rdi
    00000f77: 	callq	_Z9test_lut5PKsPsiS0_PKc # Offset: 3959
    00000f7c: 	movq	%r12, %rcx
    00000f7f: 	movl	$0xfa0, %edx
    00000f84: 	movq	%r14, %rsi
    00000f87: 	leaq	DATAat0x8a78(%rip), %r8
    00000f8e: 	movq	%r14, %rdi
    00000f91: 	callq	_Z9test_lut6PKsPsiS0_PKc # Offset: 3985
    00000f96: 	movq	%r12, %rcx
    00000f99: 	movl	$0xfa0, %edx
    00000f9e: 	movq	%r14, %rsi
    00000fa1: 	leaq	DATAat0x8aa0(%rip), %r8
    00000fa8: 	movq	%r14, %rdi
    00000fab: 	callq	_Z9test_lut7IsEvPKT_PS0_iS2_PKc # Offset: 4011
    00000fb0: 	movq	%r12, %rcx
    00000fb3: 	movl	$0xfa0, %edx
    00000fb8: 	movq	%r14, %rsi
    00000fbb: 	leaq	DATAat0x8ac8(%rip), %r8
    00000fc2: 	movq	%r14, %rdi
    00000fc5: 	callq	_Z9test_lut8IsEvPKT_PS0_iS2_PKc # Offset: 4037
    00000fca: 	movl	iterations(%rip), %edx
    00000fd0: 	xorl	%r8d, %r8d
    00000fd3: 	xorl	%ecx, %ecx
    00000fd5: 	movl	$0xfa0, %esi
    00000fda: 	leaq	DATAat0x8af0(%rip), %rdi
    00000fe1: 	callq	_Z9summarizePKciiii # Offset: 4065
    00000fe6: 	movq	%r12, %rcx
    00000fe9: 	movl	$0xfa0, %edx
    00000fee: 	movq	%rbp, %rsi
    00000ff1: 	leaq	DATAat0x8eb4(%rip), %r8
    00000ff8: 	movq	%r14, %rdi
    00000ffb: 	callq	_Z9test_lut1IsEvPKT_PS0_iS2_PKc # Offset: 4091
    00001000: 	movq	%r12, %rcx
    00001003: 	movl	$0xfa0, %edx
    00001008: 	movq	%rbp, %rsi
    0000100b: 	leaq	DATAat0x8ed1(%rip), %r8
    00001012: 	movq	%r14, %rdi
    00001015: 	callq	_Z9test_lut2IsEvPKT_PS0_iS2_PKc # Offset: 4117
    0000101a: 	movq	%r12, %rcx
    0000101d: 	movl	$0xfa0, %edx
    00001022: 	movq	%rbp, %rsi
    00001025: 	leaq	DATAat0x8eee(%rip), %r8
    0000102c: 	movq	%r14, %rdi
    0000102f: 	callq	_Z9test_lut3IsEvPKT_PS0_iS2_PKc # Offset: 4143
    00001034: 	movq	%r12, %rcx
    00001037: 	movl	$0xfa0, %edx
    0000103c: 	movq	%rbp, %rsi
    0000103f: 	leaq	DATAat0x8f0b(%rip), %r8
    00001046: 	movq	%r14, %rdi
    00001049: 	callq	_Z9test_lut4PKsPsiS0_PKc # Offset: 4169
    0000104e: 	movq	%r12, %rcx
    00001051: 	movl	$0xfa0, %edx
    00001056: 	movq	%rbp, %rsi
    00001059: 	leaq	DATAat0x8f28(%rip), %r8
    00001060: 	movq	%r14, %rdi
    00001063: 	callq	_Z9test_lut5PKsPsiS0_PKc # Offset: 4195
    00001068: 	movq	%r12, %rcx
    0000106b: 	movl	$0xfa0, %edx
    00001070: 	movq	%rbp, %rsi
    00001073: 	leaq	DATAat0x8f45(%rip), %r8
    0000107a: 	movq	%r14, %rdi
    0000107d: 	callq	_Z9test_lut6PKsPsiS0_PKc # Offset: 4221
    00001082: 	movq	%r12, %rcx
    00001085: 	movl	$0xfa0, %edx
    0000108a: 	movq	%rbp, %rsi
    0000108d: 	leaq	DATAat0x8f62(%rip), %r8
    00001094: 	movq	%r14, %rdi
    00001097: 	callq	_Z9test_lut7IsEvPKT_PS0_iS2_PKc # Offset: 4247
    0000109c: 	movq	%r12, %rcx
    0000109f: 	movl	$0xfa0, %edx
    000010a4: 	movq	%rbp, %rsi
    000010a7: 	leaq	DATAat0x8f7f(%rip), %r8
    000010ae: 	movq	%r14, %rdi
    000010b1: 	callq	_Z9test_lut8IsEvPKT_PS0_iS2_PKc # Offset: 4273
    000010b6: 	movl	iterations(%rip), %edx
    000010bc: 	xorl	%r8d, %r8d
    000010bf: 	xorl	%ecx, %ecx
    000010c1: 	movl	$0xfa0, %esi
    000010c6: 	leaq	DATAat0x8f9c(%rip), %rdi
    000010cd: 	callq	_Z9summarizePKciiii # Offset: 4301
    000010d2: 	movq	%r12, %rcx
    000010d5: 	movq	%r14, %rsi
    000010d8: 	movq	%r14, %rdi
    000010db: 	movslq	base_iterations(%rip), %rdx
    000010e2: 	leaq	DATAat0x8b18(%rip), %r8
    000010e9: 	imulq	$0xfa0, %rdx, %rdx
    000010f0: 	movq	%rdx, %rax
    000010f3: 	mulq	%rbx
    000010f6: 	movl	$0x1, %eax
    000010fb: 	shrq	$0x15, %rdx
    000010ff: 	testl	%edx, %edx
    00001101: 	cmovlel	%eax, %edx
    00001104: 	movl	%edx, iterations(%rip)
    0000110a: 	movl	$0x7a1200, %edx
    0000110f: 	callq	_Z9test_lut1IsEvPKT_PS0_iS2_PKc # Offset: 4367
    00001114: 	movq	%r12, %rcx
    00001117: 	movl	$0x7a1200, %edx
    0000111c: 	movq	%r14, %rsi
    0000111f: 	leaq	DATAat0x8b40(%rip), %r8
    00001126: 	movq	%r14, %rdi
    00001129: 	callq	_Z9test_lut2IsEvPKT_PS0_iS2_PKc # Offset: 4393
    0000112e: 	movq	%r12, %rcx
    00001131: 	movl	$0x7a1200, %edx
    00001136: 	movq	%r14, %rsi
    00001139: 	leaq	DATAat0x8b68(%rip), %r8
    00001140: 	movq	%r14, %rdi
    00001143: 	callq	_Z9test_lut3IsEvPKT_PS0_iS2_PKc # Offset: 4419
    00001148: 	movq	%r12, %rcx
    0000114b: 	movl	$0x7a1200, %edx
    00001150: 	movq	%r14, %rsi
    00001153: 	leaq	DATAat0x8b90(%rip), %r8
    0000115a: 	movq	%r14, %rdi
    0000115d: 	callq	_Z9test_lut4PKsPsiS0_PKc # Offset: 4445
    00001162: 	movq	%r12, %rcx
    00001165: 	movl	$0x7a1200, %edx
    0000116a: 	movq	%r14, %rsi
    0000116d: 	leaq	DATAat0x8bb8(%rip), %r8
    00001174: 	movq	%r14, %rdi
    00001177: 	callq	_Z9test_lut5PKsPsiS0_PKc # Offset: 4471
    0000117c: 	movq	%r12, %rcx
    0000117f: 	movl	$0x7a1200, %edx
    00001184: 	movq	%r14, %rsi
    00001187: 	leaq	DATAat0x8be0(%rip), %r8
    0000118e: 	movq	%r14, %rdi
    00001191: 	callq	_Z9test_lut6PKsPsiS0_PKc # Offset: 4497
    00001196: 	movq	%r12, %rcx
    00001199: 	movl	$0x7a1200, %edx
    0000119e: 	movq	%r14, %rsi
    000011a1: 	leaq	DATAat0x8c08(%rip), %r8
    000011a8: 	movq	%r14, %rdi
    000011ab: 	callq	_Z9test_lut7IsEvPKT_PS0_iS2_PKc # Offset: 4523
    000011b0: 	movq	%r12, %rcx
    000011b3: 	movl	$0x7a1200, %edx
    000011b8: 	movq	%r14, %rsi
    000011bb: 	leaq	DATAat0x8c30(%rip), %r8
    000011c2: 	movq	%r14, %rdi
    000011c5: 	callq	_Z9test_lut8IsEvPKT_PS0_iS2_PKc # Offset: 4549
    000011ca: 	movl	iterations(%rip), %edx
    000011d0: 	xorl	%r8d, %r8d
    000011d3: 	xorl	%ecx, %ecx
    000011d5: 	movl	$0x7a1200, %esi
    000011da: 	leaq	DATAat0x8c58(%rip), %rdi
    000011e1: 	callq	_Z9summarizePKciiii # Offset: 4577
    000011e6: 	movq	%r12, %rcx
    000011e9: 	movl	$0x7a1200, %edx
    000011ee: 	movq	%rbp, %rsi
    000011f1: 	leaq	DATAat0x8fb8(%rip), %r8
    000011f8: 	movq	%r14, %rdi
    000011fb: 	callq	_Z9test_lut1IsEvPKT_PS0_iS2_PKc # Offset: 4603
    00001200: 	movq	%r12, %rcx
    00001203: 	movl	$0x7a1200, %edx
    00001208: 	movq	%rbp, %rsi
    0000120b: 	leaq	DATAat0x8fd5(%rip), %r8
    00001212: 	movq	%r14, %rdi
    00001215: 	callq	_Z9test_lut2IsEvPKT_PS0_iS2_PKc # Offset: 4629
    0000121a: 	movq	%r12, %rcx
    0000121d: 	movl	$0x7a1200, %edx
    00001222: 	movq	%rbp, %rsi
    00001225: 	leaq	DATAat0x8ff2(%rip), %r8
    0000122c: 	movq	%r14, %rdi
    0000122f: 	callq	_Z9test_lut3IsEvPKT_PS0_iS2_PKc # Offset: 4655
    00001234: 	movq	%r12, %rcx
    00001237: 	movl	$0x7a1200, %edx
    0000123c: 	movq	%rbp, %rsi
    0000123f: 	leaq	DATAat0x900f(%rip), %r8
    00001246: 	movq	%r14, %rdi
    00001249: 	callq	_Z9test_lut4PKsPsiS0_PKc # Offset: 4681
    0000124e: 	movq	%r12, %rcx
    00001251: 	movl	$0x7a1200, %edx
    00001256: 	movq	%rbp, %rsi
    00001259: 	leaq	DATAat0x902c(%rip), %r8
    00001260: 	movq	%r14, %rdi
    00001263: 	callq	_Z9test_lut5PKsPsiS0_PKc # Offset: 4707
    00001268: 	movq	%r12, %rcx
    0000126b: 	movl	$0x7a1200, %edx
    00001270: 	movq	%rbp, %rsi
    00001273: 	leaq	DATAat0x9049(%rip), %r8
    0000127a: 	movq	%r14, %rdi
    0000127d: 	callq	_Z9test_lut6PKsPsiS0_PKc # Offset: 4733
    00001282: 	movq	%r12, %rcx
    00001285: 	movl	$0x7a1200, %edx
    0000128a: 	movq	%rbp, %rsi
    0000128d: 	leaq	DATAat0x9066(%rip), %r8
    00001294: 	movq	%r14, %rdi
    00001297: 	callq	_Z9test_lut7IsEvPKT_PS0_iS2_PKc # Offset: 4759
    0000129c: 	movq	%r12, %rcx
    0000129f: 	movl	$0x7a1200, %edx
    000012a4: 	movq	%rbp, %rsi
    000012a7: 	leaq	DATAat0x9083(%rip), %r8
    000012ae: 	movq	%r14, %rdi
    000012b1: 	callq	_Z9test_lut8IsEvPKT_PS0_iS2_PKc # Offset: 4785
    000012b6: 	movl	iterations(%rip), %edx
    000012bc: 	xorl	%r8d, %r8d
    000012bf: 	xorl	%ecx, %ecx
    000012c1: 	movl	$0x7a1200, %esi
    000012c6: 	leaq	DATAat0x90a0(%rip), %rdi
    000012cd: 	callq	_Z9summarizePKciiii # Offset: 4813
    000012d2: 	movq	0x20108(%rsp), %rax
    000012da: 	subq	%fs:0x28, %rax
    000012e3: 	jne	.Ltmp8 # Offset: 4835
    000012e5: 	addq	$0x20118, %rsp
    000012ec: 	xorl	%eax, %eax
    000012ee: 	popq	%rbx
    000012ef: 	popq	%rbp
    000012f0: 	popq	%r12
    000012f2: 	popq	%r13
    000012f4: 	popq	%r14
    000012f6: 	popq	%r15
    000012f8: 	retq # Offset: 4856
.Ltmp4:
    000012f9: 	movq	0x8(%r14), %rdi
    000012fd: 	movl	$0xa, %edx
    00001302: 	xorl	%esi, %esi
    00001304: 	callq	strtol@PLT # Offset: 4868
    00001309: 	movl	%eax, base_iterations(%rip)
    0000130f: 	cmpl	$0x2, %r13d
    00001313: 	jle	.Ltmp9 # Offset: 4883
    00001319: 	movq	0x10(%r14), %rdi
    0000131d: 	movl	$0xa, %edx
    00001322: 	xorl	%esi, %esi
    00001324: 	callq	strtol@PLT # Offset: 4900
    00001329: 	movl	%eax, init_value(%rip)
    0000132f: 	jmp	.Ltmp9 # Offset: 4911
.Ltmp2:
    00001334: 	leaq	DATAat0x8c9f(%rip), %rsi
    0000133b: 	movl	$0x1, %edi
    00001340: 	xorl	%eax, %eax
    00001342: 	callq	__printf_chk@PLT # Offset: 4930
    00001347: 	jmp	.Ltmp9 # Offset: 4935
.Ltmp8:
    0000134c: 	callq	__stack_chk_fail@PLT # Offset: 4940
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_GLOBAL__sub_I_results/1(*2)" after disassembly {
  All names   : _GLOBAL__sub_I_results/1
                _GLOBAL__sub_I_results/lookup_table.cpp/1
  Number      : 3
  State       : disassembled
  Address     : 0x2520
  Size        : 0x11
  MaxSize     : 0x20
  Offset      : 0x2520
  Section     : .text
  Orc Section : .local.text._GLOBAL__sub_I_results/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB02:
    00000000: 	endbr64
    00000004: 	movl	base_iterations(%rip), %eax
    0000000a: 	movl	%eax, iterations(%rip)
    00000010: 	retq # Offset: 16
DWARF CFI Instructions:
    <empty>
End of Function "_GLOBAL__sub_I_results/1(*2)"

Binary Function "_start" after disassembly {
  Number      : 4
  State       : disassembled
  Address     : 0x2540
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x2540
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB03:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0xbfd8(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 5
  State       : disassembled
  Address     : 0x2570
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x2570
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	leaq	"completed.0/1"(%rip), %rdi
    00000007: 	leaq	"completed.0/1"(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp10 # Offset: 17
    00000013: 	movq	DATAat0xbfe0(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp10 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp10:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x25a0
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x25a0
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	leaq	"completed.0/1"(%rip), %rdi
    00000007: 	leaq	"completed.0/1"(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp11 # Offset: 34
    00000024: 	movq	DATAat0xbff0(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp11 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp11:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x25e0
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x25e0
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp12 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp13 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp13:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp12:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x2620
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x2620
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 9
  State       : disassembled
  Address     : 0x2630
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x2630
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp14 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp15 # Offset: 38
.Ltmp14:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp16 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp15:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp16:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x8008(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 10
  State       : disassembled
  Address     : 0x26d0
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x26d0
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp17 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp18 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp19:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp19 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp32:
    00000069: 	leaq	DATAat0x8cbb(%rip), %rbp
    00000070: 	leaq	DATAat0x8028(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x8068(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp20 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x90d8(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x8098(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x90d0(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp21 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp25:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp22 # Offset: 244
    000000fa: 	movq	DATAat0x90c0(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp26:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x90c0(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp23 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp23:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x8ca0(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x90d8(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp24 # Offset: 398
.Ltmp21:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp25 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp26 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp22:
    000001c8: 	movq	DATAat0x90c8(%rip), %rsi
    000001cf: 	movq	DATAat0x90c0(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp23 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp24:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp20 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp27 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp28:
    00000210: 	addq	$0x10, %rax
.Ltmp27:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp28 # Offset: 542
.Ltmp33:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x80c8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp29 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp30 # Offset: 592
.Ltmp29:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp17:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp30:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp31:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp31 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x8c7b(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp17 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp18:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp32 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp20:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp33 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 11
  State       : disassembled
  Address     : 0x2a00
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x2a00
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp34 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp35 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp36:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp36 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp41:
    0000006a: 	leaq	DATAat0x8cbb(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x80f0(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x8ca1(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x8cbb(%rip), %r8
    000000a1: 	leaq	DATAat0x8c8f(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp37 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp38:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x8ca0(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp38 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp37 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp39 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp40:
    00000140: 	addq	$0x10, %rax
.Ltmp39:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp40 # Offset: 334
.Ltmp42:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x80c8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp34:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp35:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp41 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp37:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp42 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x2bb0
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x2bb0
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x2bd0
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x2bd0
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x90d0(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark6scrandEm" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x2c10
  Size        : 0xc
  MaxSize     : 0x10
  Offset      : 0x2c10
  Section     : .text
  Orc Section : .local.text._ZN9benchmark6scrandEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	movq	%rdi, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000000b: 	retq # Offset: 11
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark6scrandEm"

Binary Function "_ZN9benchmark7crand64Ev" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x2c20
  Size        : 0x42
  MaxSize     : 0x50
  Offset      : 0x2c20
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand64Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rdx
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rax
    00000015: 	imulq	%rax, %rdx
    00000019: 	movabsq	$0x14057b7ef767814f, %rax
    00000023: 	addq	%rax, %rdx
    00000026: 	movq	%rdx, %rax
    00000029: 	movq	%rdx, %rcx
    0000002c: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rax
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rax
    0000003e: 	xorq	%rdx, %rax
    00000041: 	retq # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand64Ev"

Binary Function "_ZN9benchmark7crand32Ev" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x2c70
  Size        : 0x41
  MaxSize     : 0x50
  Offset      : 0x2c70
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand32Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rdx
    00000015: 	imulq	%rdx, %rax
    00000019: 	movabsq	$0x14057b7ef767814f, %rdx
    00000023: 	addq	%rdx, %rax
    00000026: 	movq	%rax, %rdx
    00000029: 	movq	%rax, %rcx
    0000002c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rdx
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rdx
    0000003e: 	xorl	%edx, %eax
    00000040: 	retq # Offset: 64
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand32Ev"

Binary Function "_Z9test_lut4PKhPhiS0_PKc" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x2cc0
  Size        : 0x20c
  MaxSize     : 0x210
  Offset      : 0x2cc0
  Section     : .text
  Orc Section : .local.text._Z9test_lut4PKhPhiS0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%edx, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rcx, %rbx
    0000001a: 	subq	$0x18, %rsp
    0000001e: 	movq	%r8, 0x8(%rsp)
    00000023: 	callq	clock@PLT # Offset: 35
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	movl	iterations(%rip), %eax
    00000035: 	testl	%eax, %eax
    00000037: 	jle	.Ltmp43 # Offset: 55
    0000003d: 	movq	%rbp, %r14
    00000040: 	leal	-0x3(%r13), %r8d
    00000044: 	xorl	%r11d, %r11d
    00000047: 	movslq	%r13d, %r9
    0000004a: 	andl	$0x3, %r14d
    0000004e: 	leal	-0x4(%r13), %r15d
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp49:
    00000058: 	testl	%r13d, %r13d
    0000005b: 	jle	.Ltmp44 # Offset: 91
    00000061: 	xorl	%eax, %eax
    00000063: 	testq	%r14, %r14
    00000066: 	je	.Ltmp45 # Offset: 102
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp46:
    00000070: 	movzbl	(%r12,%rax), %edx
    00000075: 	movzbl	(%rbx,%rdx), %edx
    00000079: 	movb	%dl, (%rbp,%rax)
    0000007d: 	addq	$0x1, %rax
    00000081: 	cmpq	%rax, %r9
    00000084: 	jne	.Ltmp46 # Offset: 132
    00000086: 	movl	%r13d, %r10d
.Ltmp53:
    00000089: 	cmpl	%r8d, %r10d
    0000008c: 	jge	.Ltmp47 # Offset: 140
.Ltmp54:
    00000092: 	movslq	%r10d, %rdx
    00000095: 	nopl	(%rax) # Size: 3
.Ltmp48:
    00000098: 	movl	(%r12,%rdx), %eax
    0000009c: 	movl	%eax, %esi
    0000009e: 	movl	%eax, %ecx
    000000a0: 	movzbl	%al, %edi
    000000a3: 	shrl	$0x18, %eax
    000000a6: 	shrl	$0x10, %esi
    000000a9: 	movzbl	(%rbx,%rax), %eax
    000000ad: 	shrl	$0x8, %ecx
    000000b0: 	movzbl	(%rbx,%rdi), %edi
    000000b4: 	movzbl	%sil, %esi
    000000b8: 	movzbl	%cl, %ecx
    000000bb: 	movzbl	(%rbx,%rsi), %esi
    000000bf: 	movzbl	(%rbx,%rcx), %ecx
    000000c3: 	shll	$0x18, %eax
    000000c6: 	orl	%edi, %eax
    000000c8: 	shll	$0x10, %esi
    000000cb: 	shll	$0x8, %ecx
    000000ce: 	orl	%esi, %eax
    000000d0: 	orl	%ecx, %eax
    000000d2: 	movl	%eax, (%rbp,%rdx)
    000000d6: 	addq	$0x4, %rdx
    000000da: 	cmpl	%edx, %r8d
    000000dd: 	jg	.Ltmp48 # Offset: 221
    000000df: 	movl	%r15d, %eax
    000000e2: 	subl	%r10d, %eax
    000000e5: 	andl	$-0x4, %eax
    000000e8: 	leal	0x4(%r10,%rax), %eax
    000000ed: 	cmpl	%eax, %r13d
    000000f0: 	jle	.Ltmp47 # Offset: 240
.Ltmp55:
    000000f2: 	movslq	%eax, %rdx
    000000f5: 	movzbl	(%r12,%rdx), %ecx
    000000fa: 	movzbl	(%rbx,%rcx), %ecx
    000000fe: 	movb	%cl, (%rbp,%rdx)
    00000102: 	leal	0x1(%rax), %edx
    00000105: 	cmpl	%edx, %r13d
    00000108: 	jle	.Ltmp47 # Offset: 264
    0000010a: 	movslq	%edx, %rdx
    0000010d: 	movzbl	(%r12,%rdx), %ecx
    00000112: 	movzbl	(%rbx,%rcx), %ecx
    00000116: 	movb	%cl, (%rbp,%rdx)
    0000011a: 	leal	0x2(%rax), %edx
    0000011d: 	cmpl	%edx, %r13d
    00000120: 	jle	.Ltmp47 # Offset: 288
    00000122: 	movslq	%edx, %rdx
    00000125: 	addl	$0x3, %eax
    00000128: 	movzbl	(%r12,%rdx), %ecx
    0000012d: 	movzbl	(%rbx,%rcx), %ecx
    00000131: 	movb	%cl, (%rbp,%rdx)
    00000135: 	cmpl	%eax, %r13d
    00000138: 	jle	.Ltmp47 # Offset: 312
    0000013a: 	cltq
    0000013c: 	movzbl	(%r12,%rax), %edx
    00000141: 	movzbl	(%rbx,%rdx), %edx
    00000145: 	movb	%dl, (%rbp,%rax)
.Ltmp47:
    00000149: 	addl	$0x1, %r11d
    0000014d: 	cmpl	%r11d, iterations(%rip)
    00000154: 	jg	.Ltmp49 # Offset: 340
.Ltmp43:
    0000015a: 	callq	clock@PLT # Offset: 346
    0000015f: 	movq	0x8(%rsp), %rdi
    00000164: 	pxor	%xmm0, %xmm0
    00000168: 	movq	%rax, end_time(%rip)
    0000016f: 	subq	start_time(%rip), %rax
    00000176: 	cvtsi2sd	%rax, %xmm0
    0000017b: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000183: 	callq	_Z13record_resultdPKc # Offset: 387
    00000188: 	testl	%r13d, %r13d
    0000018b: 	jle	.Ltmp50 # Offset: 395
    0000018d: 	movl	init_value(%rip), %r8d
    00000194: 	leal	-0x1(%r13), %eax
    00000198: 	leaq	0x1(%rbp,%rax), %rcx
    0000019d: 	movl	%r8d, %edx
    000001a0: 	jmp	.Ltmp51 # Offset: 416
    000001a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp52:
    000001a8: 	addq	$0x1, %rbp
    000001ac: 	cmpq	%rbp, %rcx
    000001af: 	je	.Ltmp50 # Offset: 431
.Ltmp51:
    000001b1: 	movzbl	(%rbp), %eax
    000001b5: 	cmpb	%dl, %al
    000001b7: 	je	.Ltmp52 # Offset: 439
    000001b9: 	movq	0x8(%rsp), %rdx
    000001be: 	addq	$0x18, %rsp
    000001c2: 	movzbl	%al, %ecx
    000001c5: 	leaq	DATAat0x8118(%rip), %rsi
    000001cc: 	popq	%rbx
    000001cd: 	movl	$0x1, %edi
    000001d2: 	popq	%rbp
    000001d3: 	xorl	%eax, %eax
    000001d5: 	popq	%r12
    000001d7: 	popq	%r13
    000001d9: 	popq	%r14
    000001db: 	popq	%r15
    000001dd: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 477
.Ltmp50:
    000001e2: 	addq	$0x18, %rsp
    000001e6: 	popq	%rbx
    000001e7: 	popq	%rbp
    000001e8: 	popq	%r12
    000001ea: 	popq	%r13
    000001ec: 	popq	%r14
    000001ee: 	popq	%r15
    000001f0: 	retq # Offset: 496
.Ltmp44:
    000001f1: 	xorl	%r10d, %r10d
    000001f4: 	jmp	.Ltmp53 # Offset: 500
.Ltmp45:
    000001f9: 	xorl	%r10d, %r10d
    000001fc: 	xorl	%eax, %eax
    000001fe: 	testl	%r8d, %r8d
    00000201: 	jg	.Ltmp54 # Offset: 513
    00000207: 	jmp	.Ltmp55 # Offset: 519
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut4PKhPhiS0_PKc"

Binary Function "_Z9test_lut4PKaPaiS0_PKc" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x2ed0
  Size        : 0x212
  MaxSize     : 0x220
  Offset      : 0x2ed0
  Section     : .text
  Orc Section : .local.text._Z9test_lut4PKaPaiS0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%edx, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rcx, %rbx
    0000001a: 	subq	$0x18, %rsp
    0000001e: 	movq	%r8, 0x8(%rsp)
    00000023: 	callq	clock@PLT # Offset: 35
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	movl	iterations(%rip), %eax
    00000035: 	testl	%eax, %eax
    00000037: 	jle	.Ltmp56 # Offset: 55
    0000003d: 	movq	%rbp, %r14
    00000040: 	leal	-0x3(%r13), %r8d
    00000044: 	xorl	%r11d, %r11d
    00000047: 	movslq	%r13d, %r9
    0000004a: 	andl	$0x3, %r14d
    0000004e: 	leal	-0x4(%r13), %r15d
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp62:
    00000058: 	testl	%r13d, %r13d
    0000005b: 	jle	.Ltmp57 # Offset: 91
    00000061: 	xorl	%eax, %eax
    00000063: 	testq	%r14, %r14
    00000066: 	je	.Ltmp58 # Offset: 102
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp59:
    00000070: 	movsbq	(%r12,%rax), %rdx
    00000075: 	movzbl	(%rbx,%rdx), %edx
    00000079: 	movb	%dl, (%rbp,%rax)
    0000007d: 	addq	$0x1, %rax
    00000081: 	cmpq	%rax, %r9
    00000084: 	jne	.Ltmp59 # Offset: 132
    00000086: 	movl	%r13d, %ecx
.Ltmp66:
    00000089: 	cmpl	%r8d, %ecx
    0000008c: 	jge	.Ltmp60 # Offset: 140
.Ltmp67:
    00000092: 	movslq	%ecx, %rdx
    00000095: 	nopl	(%rax) # Size: 3
.Ltmp61:
    00000098: 	movl	(%r12,%rdx), %edi
    0000009c: 	movl	%edi, %eax
    0000009e: 	movl	%edi, %r10d
    000000a1: 	movl	%edi, %esi
    000000a3: 	movsbq	%dil, %rdi
    000000a7: 	shrl	$0x18, %eax
    000000aa: 	shrl	$0x10, %r10d
    000000ae: 	movsbl	(%rbx,%rdi), %edi
    000000b2: 	movsbq	%al, %rax
    000000b6: 	movsbq	%r10b, %r10
    000000ba: 	shrl	$0x8, %esi
    000000bd: 	movsbl	(%rbx,%rax), %eax
    000000c1: 	movsbl	(%rbx,%r10), %r10d
    000000c6: 	movsbq	%sil, %rsi
    000000ca: 	movsbl	(%rbx,%rsi), %esi
    000000ce: 	shll	$0x18, %eax
    000000d1: 	shll	$0x10, %r10d
    000000d5: 	orl	%r10d, %eax
    000000d8: 	shll	$0x8, %esi
    000000db: 	orl	%edi, %eax
    000000dd: 	orl	%esi, %eax
    000000df: 	movl	%eax, (%rbp,%rdx)
    000000e3: 	addq	$0x4, %rdx
    000000e7: 	cmpl	%edx, %r8d
    000000ea: 	jg	.Ltmp61 # Offset: 234
    000000ec: 	movl	%r15d, %eax
    000000ef: 	subl	%ecx, %eax
    000000f1: 	andl	$-0x4, %eax
    000000f4: 	leal	0x4(%rcx,%rax), %eax
    000000f8: 	cmpl	%eax, %r13d
    000000fb: 	jle	.Ltmp60 # Offset: 251
.Ltmp68:
    000000fd: 	movslq	%eax, %rdx
    00000100: 	movsbq	(%r12,%rdx), %rcx
    00000105: 	movzbl	(%rbx,%rcx), %ecx
    00000109: 	movb	%cl, (%rbp,%rdx)
    0000010d: 	leal	0x1(%rax), %edx
    00000110: 	cmpl	%edx, %r13d
    00000113: 	jle	.Ltmp60 # Offset: 275
    00000115: 	movslq	%edx, %rdx
    00000118: 	movsbq	(%r12,%rdx), %rcx
    0000011d: 	movzbl	(%rbx,%rcx), %ecx
    00000121: 	movb	%cl, (%rbp,%rdx)
    00000125: 	leal	0x2(%rax), %edx
    00000128: 	cmpl	%edx, %r13d
    0000012b: 	jle	.Ltmp60 # Offset: 299
    0000012d: 	movslq	%edx, %rdx
    00000130: 	addl	$0x3, %eax
    00000133: 	movsbq	(%r12,%rdx), %rcx
    00000138: 	movzbl	(%rbx,%rcx), %ecx
    0000013c: 	movb	%cl, (%rbp,%rdx)
    00000140: 	cmpl	%eax, %r13d
    00000143: 	jle	.Ltmp60 # Offset: 323
    00000145: 	cltq
    00000147: 	movsbq	(%r12,%rax), %rdx
    0000014c: 	movzbl	(%rbx,%rdx), %edx
    00000150: 	movb	%dl, (%rbp,%rax)
.Ltmp60:
    00000154: 	addl	$0x1, %r11d
    00000158: 	cmpl	%r11d, iterations(%rip)
    0000015f: 	jg	.Ltmp62 # Offset: 351
.Ltmp56:
    00000165: 	callq	clock@PLT # Offset: 357
    0000016a: 	movq	0x8(%rsp), %rdi
    0000016f: 	pxor	%xmm0, %xmm0
    00000173: 	movq	%rax, end_time(%rip)
    0000017a: 	subq	start_time(%rip), %rax
    00000181: 	cvtsi2sd	%rax, %xmm0
    00000186: 	divsd	DATAat0x90d0(%rip), %xmm0
    0000018e: 	callq	_Z13record_resultdPKc # Offset: 398
    00000193: 	testl	%r13d, %r13d
    00000196: 	jle	.Ltmp63 # Offset: 406
    00000198: 	movl	init_value(%rip), %r8d
    0000019f: 	leal	-0x1(%r13), %eax
    000001a3: 	leaq	0x1(%rbp,%rax), %rcx
    000001a8: 	movl	%r8d, %edx
    000001ab: 	jmp	.Ltmp64 # Offset: 427
    000001ad: 	nopl	(%rax) # Size: 3
.Ltmp65:
    000001b0: 	addq	$0x1, %rbp
    000001b4: 	cmpq	%rbp, %rcx
    000001b7: 	je	.Ltmp63 # Offset: 439
.Ltmp64:
    000001b9: 	movzbl	(%rbp), %eax
    000001bd: 	cmpb	%dl, %al
    000001bf: 	je	.Ltmp65 # Offset: 447
    000001c1: 	movq	0x8(%rsp), %rdx
    000001c6: 	addq	$0x18, %rsp
    000001ca: 	movsbl	%al, %ecx
    000001cd: 	leaq	DATAat0x8118(%rip), %rsi
    000001d4: 	popq	%rbx
    000001d5: 	movl	$0x1, %edi
    000001da: 	popq	%rbp
    000001db: 	xorl	%eax, %eax
    000001dd: 	popq	%r12
    000001df: 	popq	%r13
    000001e1: 	popq	%r14
    000001e3: 	popq	%r15
    000001e5: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 485
.Ltmp63:
    000001ea: 	addq	$0x18, %rsp
    000001ee: 	popq	%rbx
    000001ef: 	popq	%rbp
    000001f0: 	popq	%r12
    000001f2: 	popq	%r13
    000001f4: 	popq	%r14
    000001f6: 	popq	%r15
    000001f8: 	retq # Offset: 504
.Ltmp57:
    000001f9: 	xorl	%ecx, %ecx
    000001fb: 	jmp	.Ltmp66 # Offset: 507
.Ltmp58:
    00000200: 	xorl	%ecx, %ecx
    00000202: 	xorl	%eax, %eax
    00000204: 	testl	%r8d, %r8d
    00000207: 	jg	.Ltmp67 # Offset: 519
    0000020d: 	jmp	.Ltmp68 # Offset: 525
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut4PKaPaiS0_PKc"

Binary Function "_Z9test_lut4PKtPtiS0_PKc" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x30f0
  Size        : 0x202
  MaxSize     : 0x210
  Offset      : 0x30f0
  Section     : .text
  Orc Section : .local.text._Z9test_lut4PKtPtiS0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%edx, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%r8, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rcx, %rbx
    0000001d: 	subq	$0x8, %rsp
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movl	iterations(%rip), %r11d
    0000002d: 	movq	%rax, start_time(%rip)
    00000034: 	testl	%r11d, %r11d
    00000037: 	jle	.Ltmp69 # Offset: 55
    0000003d: 	movq	%rbp, %r8
    00000040: 	leal	-0x3(%r14), %ecx
    00000044: 	xorl	%edi, %edi
    00000046: 	movslq	%r14d, %rsi
    00000049: 	andl	$0x3, %r8d
    0000004d: 	leal	-0x4(%r14), %r9d
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp75:
    00000058: 	testl	%r14d, %r14d
    0000005b: 	jle	.Ltmp70 # Offset: 91
    00000061: 	xorl	%eax, %eax
    00000063: 	testq	%r8, %r8
    00000066: 	je	.Ltmp71 # Offset: 102
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp72:
    00000070: 	movzwl	(%r13,%rax,2), %edx
    00000076: 	movzwl	(%rbx,%rdx,2), %edx
    0000007a: 	movw	%dx, (%rbp,%rax,2)
    0000007f: 	addq	$0x1, %rax
    00000083: 	cmpq	%rax, %rsi
    00000086: 	jne	.Ltmp72 # Offset: 134
    00000088: 	movl	%r14d, %r10d
.Ltmp79:
    0000008b: 	cmpl	%ecx, %r10d
    0000008e: 	jge	.Ltmp73 # Offset: 142
.Ltmp80:
    00000094: 	movslq	%r10d, %rdx
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp74:
    000000a0: 	movl	(%r13,%rdx,2), %r11d
    000000a5: 	movl	%r11d, %eax
    000000a8: 	movzwl	%r11w, %r11d
    000000ac: 	shrl	$0x10, %eax
    000000af: 	movzwl	(%rbx,%r11,2), %r11d
    000000b4: 	movzwl	(%rbx,%rax,2), %eax
    000000b8: 	shll	$0x10, %eax
    000000bb: 	orl	%r11d, %eax
    000000be: 	movl	%eax, (%rbp,%rdx,2)
    000000c2: 	addq	$0x4, %rdx
    000000c6: 	cmpl	%edx, %ecx
    000000c8: 	jg	.Ltmp74 # Offset: 200
    000000ca: 	movl	%r9d, %eax
    000000cd: 	movl	iterations(%rip), %r11d
    000000d4: 	subl	%r10d, %eax
    000000d7: 	andl	$-0x4, %eax
    000000da: 	leal	0x4(%r10,%rax), %eax
    000000df: 	cmpl	%eax, %r14d
    000000e2: 	jle	.Ltmp73 # Offset: 226
.Ltmp81:
    000000e4: 	movslq	%eax, %r10
    000000e7: 	movzwl	(%r13,%r10,2), %r15d
    000000ed: 	leaq	(%r10,%r10), %rdx
    000000f1: 	movzwl	(%rbx,%r15,2), %r15d
    000000f6: 	movw	%r15w, (%rbp,%r10,2)
    000000fc: 	leal	0x1(%rax), %r10d
    00000100: 	cmpl	%r10d, %r14d
    00000103: 	jle	.Ltmp73 # Offset: 259
    00000105: 	movzwl	0x2(%r13,%rdx), %r10d
    0000010b: 	movzwl	(%rbx,%r10,2), %r10d
    00000110: 	movw	%r10w, 0x2(%rbp,%rdx)
    00000116: 	leal	0x2(%rax), %r10d
    0000011a: 	cmpl	%r10d, %r14d
    0000011d: 	jle	.Ltmp73 # Offset: 285
    0000011f: 	movzwl	0x4(%r13,%rdx), %r10d
    00000125: 	addl	$0x3, %eax
    00000128: 	movzwl	(%rbx,%r10,2), %r10d
    0000012d: 	movw	%r10w, 0x4(%rbp,%rdx)
    00000133: 	cmpl	%eax, %r14d
    00000136: 	jle	.Ltmp73 # Offset: 310
    00000138: 	movzwl	0x6(%r13,%rdx), %eax
    0000013e: 	movzwl	(%rbx,%rax,2), %eax
    00000142: 	movw	%ax, 0x6(%rbp,%rdx)
.Ltmp73:
    00000147: 	addl	$0x1, %edi
    0000014a: 	cmpl	%r11d, %edi
    0000014d: 	jl	.Ltmp75 # Offset: 333
.Ltmp69:
    00000153: 	callq	clock@PLT # Offset: 339
    00000158: 	pxor	%xmm0, %xmm0
    0000015c: 	movq	%r12, %rdi
    0000015f: 	movq	%rax, end_time(%rip)
    00000166: 	subq	start_time(%rip), %rax
    0000016d: 	cvtsi2sd	%rax, %xmm0
    00000172: 	divsd	DATAat0x90d0(%rip), %xmm0
    0000017a: 	callq	_Z13record_resultdPKc # Offset: 378
    0000017f: 	testl	%r14d, %r14d
    00000182: 	jle	.Ltmp76 # Offset: 386
    00000184: 	movl	init_value(%rip), %r8d
    0000018b: 	leal	-0x1(%r14), %eax
    0000018f: 	leaq	0x2(%rbp,%rax,2), %rcx
    00000194: 	movl	%r8d, %edx
    00000197: 	jmp	.Ltmp77 # Offset: 407
    00000199: 	nopl	(%rax) # Size: 7
.Ltmp78:
    000001a0: 	addq	$0x2, %rbp
    000001a4: 	cmpq	%rbp, %rcx
    000001a7: 	je	.Ltmp76 # Offset: 423
.Ltmp77:
    000001a9: 	movzwl	(%rbp), %eax
    000001ad: 	cmpw	%dx, %ax
    000001b0: 	je	.Ltmp78 # Offset: 432
    000001b2: 	addq	$0x8, %rsp
    000001b6: 	movzwl	%ax, %ecx
    000001b9: 	movq	%r12, %rdx
    000001bc: 	movl	$0x1, %edi
    000001c1: 	popq	%rbx
    000001c2: 	leaq	DATAat0x8118(%rip), %rsi
    000001c9: 	popq	%rbp
    000001ca: 	xorl	%eax, %eax
    000001cc: 	popq	%r12
    000001ce: 	popq	%r13
    000001d0: 	popq	%r14
    000001d2: 	popq	%r15
    000001d4: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 468
.Ltmp76:
    000001d9: 	addq	$0x8, %rsp
    000001dd: 	popq	%rbx
    000001de: 	popq	%rbp
    000001df: 	popq	%r12
    000001e1: 	popq	%r13
    000001e3: 	popq	%r14
    000001e5: 	popq	%r15
    000001e7: 	retq # Offset: 487
.Ltmp70:
    000001e8: 	xorl	%r10d, %r10d
    000001eb: 	jmp	.Ltmp79 # Offset: 491
.Ltmp71:
    000001f0: 	xorl	%r10d, %r10d
    000001f3: 	xorl	%eax, %eax
    000001f5: 	testl	%ecx, %ecx
    000001f7: 	jg	.Ltmp80 # Offset: 503
    000001fd: 	jmp	.Ltmp81 # Offset: 509
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut4PKtPtiS0_PKc"

Binary Function "_Z9test_lut4PKsPsiS0_PKc" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x3300
  Size        : 0x1ea
  MaxSize     : 0x1f0
  Offset      : 0x3300
  Section     : .text
  Orc Section : .local.text._Z9test_lut4PKsPsiS0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%edx, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%r8, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rcx, %rbx
    0000001d: 	subq	$0x8, %rsp
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movl	iterations(%rip), %ecx
    0000002c: 	movq	%rax, start_time(%rip)
    00000033: 	testl	%ecx, %ecx
    00000035: 	jle	.Ltmp82 # Offset: 53
    0000003b: 	movq	%rbp, %r10
    0000003e: 	leal	-0x3(%r14), %esi
    00000042: 	xorl	%r9d, %r9d
    00000045: 	movslq	%r14d, %rdi
    00000048: 	andl	$0x3, %r10d
    0000004c: 	leal	-0x4(%r14), %r11d
.Ltmp88:
    00000050: 	testl	%r14d, %r14d
    00000053: 	jle	.Ltmp83 # Offset: 83
    00000059: 	xorl	%eax, %eax
    0000005b: 	testq	%r10, %r10
    0000005e: 	je	.Ltmp84 # Offset: 94
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp85:
    00000068: 	movswq	(%r13,%rax,2), %rdx
    0000006e: 	movzwl	(%rbx,%rdx,2), %edx
    00000072: 	movw	%dx, (%rbp,%rax,2)
    00000077: 	addq	$0x1, %rax
    0000007b: 	cmpq	%rax, %rdi
    0000007e: 	jne	.Ltmp85 # Offset: 126
    00000080: 	movl	%r14d, %r8d
.Ltmp92:
    00000083: 	cmpl	%esi, %r8d
    00000086: 	jge	.Ltmp86 # Offset: 134
.Ltmp93:
    0000008c: 	movslq	%r8d, %rdx
    0000008f: 	nop # Size: 1
.Ltmp87:
    00000090: 	movl	(%r13,%rdx,2), %eax
    00000095: 	movzwl	%ax, %ecx
    00000098: 	shrl	$0x10, %eax
    0000009b: 	movswl	(%rbx,%rax,2), %eax
    0000009f: 	movswl	(%rbx,%rcx,2), %ecx
    000000a3: 	shll	$0x10, %eax
    000000a6: 	orl	%ecx, %eax
    000000a8: 	movl	%eax, (%rbp,%rdx,2)
    000000ac: 	addq	$0x4, %rdx
    000000b0: 	cmpl	%edx, %esi
    000000b2: 	jg	.Ltmp87 # Offset: 178
    000000b4: 	movl	%r11d, %eax
    000000b7: 	movl	iterations(%rip), %ecx
    000000bd: 	subl	%r8d, %eax
    000000c0: 	andl	$-0x4, %eax
    000000c3: 	leal	0x4(%r8,%rax), %eax
    000000c8: 	cmpl	%eax, %r14d
    000000cb: 	jle	.Ltmp86 # Offset: 203
.Ltmp94:
    000000cd: 	movslq	%eax, %r8
    000000d0: 	movswq	(%r13,%r8,2), %r15
    000000d6: 	leaq	(%r8,%r8), %rdx
    000000da: 	movzwl	(%rbx,%r15,2), %r15d
    000000df: 	movw	%r15w, (%rbp,%r8,2)
    000000e5: 	leal	0x1(%rax), %r8d
    000000e9: 	cmpl	%r8d, %r14d
    000000ec: 	jle	.Ltmp86 # Offset: 236
    000000ee: 	movswq	0x2(%r13,%rdx), %r8
    000000f4: 	movzwl	(%rbx,%r8,2), %r8d
    000000f9: 	movw	%r8w, 0x2(%rbp,%rdx)
    000000ff: 	leal	0x2(%rax), %r8d
    00000103: 	cmpl	%r8d, %r14d
    00000106: 	jle	.Ltmp86 # Offset: 262
    00000108: 	movswq	0x4(%r13,%rdx), %r8
    0000010e: 	addl	$0x3, %eax
    00000111: 	movzwl	(%rbx,%r8,2), %r8d
    00000116: 	movw	%r8w, 0x4(%rbp,%rdx)
    0000011c: 	cmpl	%eax, %r14d
    0000011f: 	jle	.Ltmp86 # Offset: 287
    00000121: 	movswq	0x6(%r13,%rdx), %rax
    00000127: 	movzwl	(%rbx,%rax,2), %eax
    0000012b: 	movw	%ax, 0x6(%rbp,%rdx)
.Ltmp86:
    00000130: 	addl	$0x1, %r9d
    00000134: 	cmpl	%ecx, %r9d
    00000137: 	jl	.Ltmp88 # Offset: 311
.Ltmp82:
    0000013d: 	callq	clock@PLT # Offset: 317
    00000142: 	pxor	%xmm0, %xmm0
    00000146: 	movq	%r12, %rdi
    00000149: 	movq	%rax, end_time(%rip)
    00000150: 	subq	start_time(%rip), %rax
    00000157: 	cvtsi2sd	%rax, %xmm0
    0000015c: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000164: 	callq	_Z13record_resultdPKc # Offset: 356
    00000169: 	testl	%r14d, %r14d
    0000016c: 	jle	.Ltmp89 # Offset: 364
    0000016e: 	movl	init_value(%rip), %r8d
    00000175: 	leal	-0x1(%r14), %eax
    00000179: 	leaq	0x2(%rbp,%rax,2), %rcx
    0000017e: 	movl	%r8d, %edx
    00000181: 	jmp	.Ltmp90 # Offset: 385
    00000183: 	nopl	(%rax,%rax) # Size: 5
.Ltmp91:
    00000188: 	addq	$0x2, %rbp
    0000018c: 	cmpq	%rbp, %rcx
    0000018f: 	je	.Ltmp89 # Offset: 399
.Ltmp90:
    00000191: 	movzwl	(%rbp), %eax
    00000195: 	cmpw	%dx, %ax
    00000198: 	je	.Ltmp91 # Offset: 408
    0000019a: 	addq	$0x8, %rsp
    0000019e: 	movswl	%ax, %ecx
    000001a1: 	movq	%r12, %rdx
    000001a4: 	movl	$0x1, %edi
    000001a9: 	popq	%rbx
    000001aa: 	leaq	DATAat0x8118(%rip), %rsi
    000001b1: 	popq	%rbp
    000001b2: 	xorl	%eax, %eax
    000001b4: 	popq	%r12
    000001b6: 	popq	%r13
    000001b8: 	popq	%r14
    000001ba: 	popq	%r15
    000001bc: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 444
.Ltmp89:
    000001c1: 	addq	$0x8, %rsp
    000001c5: 	popq	%rbx
    000001c6: 	popq	%rbp
    000001c7: 	popq	%r12
    000001c9: 	popq	%r13
    000001cb: 	popq	%r14
    000001cd: 	popq	%r15
    000001cf: 	retq # Offset: 463
.Ltmp83:
    000001d0: 	xorl	%r8d, %r8d
    000001d3: 	jmp	.Ltmp92 # Offset: 467
.Ltmp84:
    000001d8: 	xorl	%r8d, %r8d
    000001db: 	xorl	%eax, %eax
    000001dd: 	testl	%esi, %esi
    000001df: 	jg	.Ltmp93 # Offset: 479
    000001e5: 	jmp	.Ltmp94 # Offset: 485
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut4PKsPsiS0_PKc"

Binary Function "_Z9test_lut5PKhPhiS0_PKc" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x34f0
  Size        : 0x4f8
  MaxSize     : 0x500
  Offset      : 0x34f0
  Section     : .text
  Orc Section : .local.text._Z9test_lut5PKhPhiS0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rcx, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movl	%edx, %ebx
    00000019: 	subq	$0x68, %rsp
    0000001d: 	movq	%rsi, 0x28(%rsp)
    00000022: 	movl	%edx, 0x38(%rsp)
    00000026: 	movq	%r8, 0x58(%rsp)
    0000002b: 	callq	clock@PLT # Offset: 43
    00000030: 	movl	iterations(%rip), %ecx
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	testl	%ecx, %ecx
    0000003f: 	jle	.Ltmp95 # Offset: 63
    00000045: 	leal	-0xf(%rbx), %eax
    00000048: 	andl	$0x3, %ebp
    0000004b: 	movl	$0x0, 0x3c(%rsp)
    00000053: 	movq	%r14, %rdi
    00000056: 	movl	%eax, 0x34(%rsp)
    0000005a: 	movslq	%ebx, %rax
    0000005d: 	movq	%rax, 0x50(%rsp)
    00000062: 	leal	-0x10(%rbx), %eax
    00000065: 	movq	%rbp, 0x40(%rsp)
    0000006a: 	movl	%eax, 0x4c(%rsp)
    0000006e: 	nop # Size: 2
.Ltmp101:
    00000070: 	movl	0x38(%rsp), %edx
    00000074: 	testl	%edx, %edx
    00000076: 	jle	.Ltmp96 # Offset: 118
    0000007c: 	xorl	%eax, %eax
    0000007e: 	cmpq	$0x0, 0x40(%rsp)
    00000084: 	je	.Ltmp97 # Offset: 132
    0000008a: 	movq	0x28(%rsp), %rcx
    0000008f: 	movq	0x50(%rsp), %rsi
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp98:
    00000098: 	movzbl	(%r15,%rax), %edx
    0000009d: 	movzbl	(%rdi,%rdx), %edx
    000000a1: 	movb	%dl, (%rcx,%rax)
    000000a4: 	addq	$0x1, %rax
    000000a8: 	cmpq	%rax, %rsi
    000000ab: 	jne	.Ltmp98 # Offset: 171
    000000ad: 	movl	0x38(%rsp), %eax
    000000b1: 	movl	%eax, 0x48(%rsp)
.Ltmp105:
    000000b5: 	movl	0x34(%rsp), %ebx
    000000b9: 	cmpl	%ebx, 0x48(%rsp)
    000000bd: 	jge	.Ltmp99 # Offset: 189
.Ltmp106:
    000000c3: 	movslq	0x48(%rsp), %r8
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp100:
    000000d0: 	movl	(%r15,%r8), %ebx
    000000d4: 	movl	0x4(%r15,%r8), %esi
    000000d9: 	movl	0x8(%r15,%r8), %ecx
    000000de: 	movl	0xc(%r15,%r8), %eax
    000000e3: 	movl	%ebx, %edx
    000000e5: 	movl	%ebx, %ebp
    000000e7: 	movl	%esi, %r9d
    000000ea: 	shrl	$0x18, %edx
    000000ed: 	movl	%ecx, %r11d
    000000f0: 	movl	%eax, %r10d
    000000f3: 	shrl	$0x10, %ebp
    000000f6: 	movq	%rdx, (%rsp)
    000000fa: 	movzbl	%bh, %edx
    000000fd: 	movzbl	%bl, %ebx
    00000100: 	shrl	$0x10, %r11d
    00000104: 	movl	%edx, %edx
    00000106: 	movq	%rbx, 0x10(%rsp)
    0000010b: 	movl	%esi, %ebx
    0000010d: 	shrl	$0x10, %r10d
    00000111: 	movq	%rdx, 0x8(%rsp)
    00000116: 	movl	%esi, %edx
    00000118: 	shrl	$0x10, %ebx
    0000011b: 	movzbl	%bpl, %ebp
    0000011f: 	movzbl	%dh, %edx
    00000122: 	movzbl	%bl, %ebx
    00000125: 	movzbl	%r11b, %r11d
    00000129: 	movzbl	%r10b, %r10d
    0000012d: 	movl	%edx, %r14d
    00000130: 	movzbl	%ch, %edx
    00000133: 	movzbl	(%rdi,%r11), %r11d
    00000138: 	movzbl	(%rdi,%r10), %r10d
    0000013d: 	movl	%edx, %r13d
    00000140: 	movzbl	%ah, %edx
    00000143: 	movzbl	(%rdi,%r14), %r14d
    00000148: 	movzbl	%sil, %esi
    0000014c: 	movl	%edx, %r12d
    0000014f: 	movq	0x8(%rsp), %rdx
    00000154: 	movzbl	(%rdi,%r13), %r13d
    00000159: 	movq	%rsi, 0x18(%rsp)
    0000015e: 	movzbl	(%rdi,%r12), %r12d
    00000163: 	shll	$0x8, %r14d
    00000167: 	movl	%ecx, %esi
    00000169: 	movzbl	%cl, %ecx
    0000016c: 	movzbl	(%rdi,%rdx), %edx
    00000170: 	shll	$0x8, %r13d
    00000174: 	movd	%r14d, %xmm5
    00000179: 	shrl	$0x18, %esi
    0000017c: 	shll	$0x8, %r12d
    00000180: 	movzbl	(%rdi,%rbp), %r14d
    00000185: 	movd	%r13d, %xmm0
    0000018a: 	movq	%rcx, 0x20(%rsp)
    0000018f: 	shll	$0x8, %edx
    00000192: 	movd	%r12d, %xmm4
    00000197: 	movl	%eax, %ecx
    00000199: 	shrl	$0x18, %r9d
    0000019d: 	movd	%edx, %xmm1
    000001a1: 	movzbl	(%rdi,%rbx), %edx
    000001a5: 	punpckldq	%xmm4, %xmm0
    000001a9: 	shrl	$0x18, %ecx
    000001ac: 	punpckldq	%xmm5, %xmm1
    000001b0: 	movd	%r10d, %xmm6
    000001b5: 	movzbl	(%rdi,%rcx), %ecx
    000001b9: 	movzbl	%al, %eax
    000001bc: 	movd	%edx, %xmm7
    000001c0: 	punpcklqdq	%xmm0, %xmm1
    000001c4: 	movq	(%rsp), %rdx
    000001c8: 	movd	%r14d, %xmm0
    000001cd: 	movd	%r11d, %xmm2
    000001d2: 	punpckldq	%xmm7, %xmm0
    000001d6: 	movd	%ecx, %xmm4
    000001da: 	movq	0x10(%rsp), %rbx
    000001df: 	punpckldq	%xmm6, %xmm2
    000001e3: 	movzbl	(%rdi,%rdx), %edx
    000001e7: 	movq	0x20(%rsp), %rcx
    000001ec: 	punpcklqdq	%xmm2, %xmm0
    000001f0: 	movzbl	(%rdi,%rax), %eax
    000001f4: 	movzbl	(%rdi,%rbx), %ebx
    000001f8: 	pslld	$0x10, %xmm0
    000001fd: 	por	%xmm0, %xmm1
    00000201: 	movd	%edx, %xmm0
    00000205: 	movzbl	(%rdi,%r9), %edx
    0000020a: 	movd	%eax, %xmm6
    0000020e: 	movzbl	(%rdi,%rsi), %r9d
    00000213: 	movq	0x18(%rsp), %rsi
    00000218: 	movd	%edx, %xmm5
    0000021c: 	movq	0x28(%rsp), %rax
    00000221: 	movzbl	(%rdi,%rsi), %edx
    00000225: 	movd	%r9d, %xmm2
    0000022a: 	movzbl	(%rdi,%rcx), %esi
    0000022e: 	punpckldq	%xmm5, %xmm0
    00000232: 	punpckldq	%xmm4, %xmm2
    00000236: 	punpcklqdq	%xmm2, %xmm0
    0000023a: 	movd	%esi, %xmm3
    0000023e: 	movd	%ebx, %xmm2
    00000242: 	movd	%edx, %xmm7
    00000246: 	pslld	$0x18, %xmm0
    0000024b: 	punpckldq	%xmm6, %xmm3
    0000024f: 	punpckldq	%xmm7, %xmm2
    00000253: 	punpcklqdq	%xmm3, %xmm2
    00000257: 	por	%xmm2, %xmm0
    0000025b: 	por	%xmm0, %xmm1
    0000025f: 	movups	%xmm1, (%rax,%r8)
    00000264: 	addq	$0x10, %r8
    00000268: 	cmpl	%r8d, 0x34(%rsp)
    0000026d: 	jg	.Ltmp100 # Offset: 621
    00000273: 	movl	0x48(%rsp), %ebx
    00000277: 	movl	0x4c(%rsp), %eax
    0000027b: 	subl	%ebx, %eax
    0000027d: 	andl	$-0x10, %eax
    00000280: 	leal	0x10(%rbx,%rax), %eax
    00000284: 	cmpl	%eax, 0x38(%rsp)
    00000288: 	jle	.Ltmp99 # Offset: 648
.Ltmp107:
    0000028e: 	movslq	%eax, %rdx
    00000291: 	movq	0x28(%rsp), %rbx
    00000296: 	movl	0x38(%rsp), %esi
    0000029a: 	movzbl	(%r15,%rdx), %ecx
    0000029f: 	movzbl	(%rdi,%rcx), %ecx
    000002a3: 	movb	%cl, (%rbx,%rdx)
    000002a6: 	leal	0x1(%rax), %edx
    000002a9: 	cmpl	%edx, %esi
    000002ab: 	jle	.Ltmp99 # Offset: 683
    000002b1: 	movslq	%edx, %rdx
    000002b4: 	movzbl	(%r15,%rdx), %ecx
    000002b9: 	movzbl	(%rdi,%rcx), %ecx
    000002bd: 	movb	%cl, (%rbx,%rdx)
    000002c0: 	leal	0x2(%rax), %edx
    000002c3: 	cmpl	%edx, %esi
    000002c5: 	jle	.Ltmp99 # Offset: 709
    000002cb: 	movslq	%edx, %rdx
    000002ce: 	movzbl	(%r15,%rdx), %ecx
    000002d3: 	movzbl	(%rdi,%rcx), %ecx
    000002d7: 	movb	%cl, (%rbx,%rdx)
    000002da: 	leal	0x3(%rax), %edx
    000002dd: 	cmpl	%edx, %esi
    000002df: 	jle	.Ltmp99 # Offset: 735
    000002e5: 	movslq	%edx, %rdx
    000002e8: 	movzbl	(%r15,%rdx), %ecx
    000002ed: 	movzbl	(%rdi,%rcx), %ecx
    000002f1: 	movb	%cl, (%rbx,%rdx)
    000002f4: 	leal	0x4(%rax), %edx
    000002f7: 	cmpl	%edx, %esi
    000002f9: 	jle	.Ltmp99 # Offset: 761
    000002ff: 	movslq	%edx, %rdx
    00000302: 	movzbl	(%r15,%rdx), %ecx
    00000307: 	movzbl	(%rdi,%rcx), %ecx
    0000030b: 	movb	%cl, (%rbx,%rdx)
    0000030e: 	leal	0x5(%rax), %edx
    00000311: 	cmpl	%edx, %esi
    00000313: 	jle	.Ltmp99 # Offset: 787
    00000319: 	movslq	%edx, %rdx
    0000031c: 	movzbl	(%r15,%rdx), %ecx
    00000321: 	movzbl	(%rdi,%rcx), %ecx
    00000325: 	movb	%cl, (%rbx,%rdx)
    00000328: 	leal	0x6(%rax), %edx
    0000032b: 	cmpl	%edx, %esi
    0000032d: 	jle	.Ltmp99 # Offset: 813
    00000333: 	movslq	%edx, %rdx
    00000336: 	movzbl	(%r15,%rdx), %ecx
    0000033b: 	movzbl	(%rdi,%rcx), %ecx
    0000033f: 	movb	%cl, (%rbx,%rdx)
    00000342: 	leal	0x7(%rax), %edx
    00000345: 	cmpl	%edx, %esi
    00000347: 	jle	.Ltmp99 # Offset: 839
    0000034d: 	movslq	%edx, %rdx
    00000350: 	movzbl	(%r15,%rdx), %ecx
    00000355: 	movzbl	(%rdi,%rcx), %ecx
    00000359: 	movb	%cl, (%rbx,%rdx)
    0000035c: 	leal	0x8(%rax), %edx
    0000035f: 	cmpl	%edx, %esi
    00000361: 	jle	.Ltmp99 # Offset: 865
    00000367: 	movslq	%edx, %rdx
    0000036a: 	movzbl	(%r15,%rdx), %ecx
    0000036f: 	movzbl	(%rdi,%rcx), %ecx
    00000373: 	movb	%cl, (%rbx,%rdx)
    00000376: 	leal	0x9(%rax), %edx
    00000379: 	cmpl	%edx, %esi
    0000037b: 	jle	.Ltmp99 # Offset: 891
    00000381: 	movslq	%edx, %rdx
    00000384: 	movzbl	(%r15,%rdx), %ecx
    00000389: 	movzbl	(%rdi,%rcx), %ecx
    0000038d: 	movb	%cl, (%rbx,%rdx)
    00000390: 	leal	0xa(%rax), %edx
    00000393: 	cmpl	%edx, %esi
    00000395: 	jle	.Ltmp99 # Offset: 917
    0000039b: 	movslq	%edx, %rdx
    0000039e: 	movzbl	(%r15,%rdx), %ecx
    000003a3: 	movzbl	(%rdi,%rcx), %ecx
    000003a7: 	movb	%cl, (%rbx,%rdx)
    000003aa: 	leal	0xb(%rax), %edx
    000003ad: 	cmpl	%edx, %esi
    000003af: 	jle	.Ltmp99 # Offset: 943
    000003b1: 	movslq	%edx, %rdx
    000003b4: 	movzbl	(%r15,%rdx), %ecx
    000003b9: 	movzbl	(%rdi,%rcx), %ecx
    000003bd: 	movb	%cl, (%rbx,%rdx)
    000003c0: 	leal	0xc(%rax), %edx
    000003c3: 	cmpl	%edx, %esi
    000003c5: 	jle	.Ltmp99 # Offset: 965
    000003c7: 	movslq	%edx, %rdx
    000003ca: 	movzbl	(%r15,%rdx), %ecx
    000003cf: 	movzbl	(%rdi,%rcx), %ecx
    000003d3: 	movb	%cl, (%rbx,%rdx)
    000003d6: 	leal	0xd(%rax), %edx
    000003d9: 	cmpl	%edx, %esi
    000003db: 	jle	.Ltmp99 # Offset: 987
    000003dd: 	movslq	%edx, %rdx
    000003e0: 	movzbl	(%r15,%rdx), %ecx
    000003e5: 	movzbl	(%rdi,%rcx), %ecx
    000003e9: 	movb	%cl, (%rbx,%rdx)
    000003ec: 	leal	0xe(%rax), %edx
    000003ef: 	cmpl	%edx, %esi
    000003f1: 	jle	.Ltmp99 # Offset: 1009
    000003f3: 	movslq	%edx, %rdx
    000003f6: 	addl	$0xf, %eax
    000003f9: 	movzbl	(%r15,%rdx), %ecx
    000003fe: 	movzbl	(%rdi,%rcx), %ecx
    00000402: 	movb	%cl, (%rbx,%rdx)
    00000405: 	cmpl	%eax, %esi
    00000407: 	jle	.Ltmp99 # Offset: 1031
    00000409: 	cltq
    0000040b: 	movzbl	(%r15,%rax), %edx
    00000410: 	movzbl	(%rdi,%rdx), %edx
    00000414: 	movb	%dl, (%rbx,%rax)
    00000417: 	nopw	(%rax,%rax) # Size: 9
.Ltmp99:
    00000420: 	addl	$0x1, 0x3c(%rsp)
    00000425: 	movl	0x3c(%rsp), %eax
    00000429: 	cmpl	%eax, iterations(%rip)
    0000042f: 	jg	.Ltmp101 # Offset: 1071
.Ltmp95:
    00000435: 	callq	clock@PLT # Offset: 1077
    0000043a: 	movq	0x58(%rsp), %rdi
    0000043f: 	pxor	%xmm0, %xmm0
    00000443: 	movq	%rax, end_time(%rip)
    0000044a: 	subq	start_time(%rip), %rax
    00000451: 	cvtsi2sd	%rax, %xmm0
    00000456: 	divsd	DATAat0x90d0(%rip), %xmm0
    0000045e: 	callq	_Z13record_resultdPKc # Offset: 1118
    00000463: 	movl	0x38(%rsp), %edi
    00000467: 	testl	%edi, %edi
    00000469: 	jle	.Ltmp102 # Offset: 1129
    0000046b: 	movl	init_value(%rip), %r8d
    00000472: 	movq	0x28(%rsp), %rax
    00000477: 	leal	-0x1(%rdi), %edx
    0000047a: 	movl	%r8d, %ecx
    0000047d: 	leaq	0x1(%rax,%rdx), %rsi
    00000482: 	jmp	.Ltmp103 # Offset: 1154
    00000484: 	nopl	(%rax) # Size: 4
.Ltmp104:
    00000488: 	addq	$0x1, %rax
    0000048c: 	cmpq	%rsi, %rax
    0000048f: 	je	.Ltmp102 # Offset: 1167
.Ltmp103:
    00000491: 	movzbl	(%rax), %edx
    00000494: 	cmpb	%cl, %dl
    00000496: 	je	.Ltmp104 # Offset: 1174
    00000498: 	movzbl	%dl, %ecx
    0000049b: 	movq	0x58(%rsp), %rdx
    000004a0: 	addq	$0x68, %rsp
    000004a4: 	movl	$0x1, %edi
    000004a9: 	popq	%rbx
    000004aa: 	leaq	DATAat0x8118(%rip), %rsi
    000004b1: 	popq	%rbp
    000004b2: 	xorl	%eax, %eax
    000004b4: 	popq	%r12
    000004b6: 	popq	%r13
    000004b8: 	popq	%r14
    000004ba: 	popq	%r15
    000004bc: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1212
.Ltmp102:
    000004c1: 	addq	$0x68, %rsp
    000004c5: 	popq	%rbx
    000004c6: 	popq	%rbp
    000004c7: 	popq	%r12
    000004c9: 	popq	%r13
    000004cb: 	popq	%r14
    000004cd: 	popq	%r15
    000004cf: 	retq # Offset: 1231
.Ltmp96:
    000004d0: 	movl	$0x0, 0x48(%rsp)
    000004d8: 	jmp	.Ltmp105 # Offset: 1240
.Ltmp97:
    000004dd: 	movl	0x34(%rsp), %eax
    000004e1: 	movl	$0x0, 0x48(%rsp)
    000004e9: 	testl	%eax, %eax
    000004eb: 	jg	.Ltmp106 # Offset: 1259
    000004f1: 	xorl	%eax, %eax
    000004f3: 	jmp	.Ltmp107 # Offset: 1267
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut5PKhPhiS0_PKc"

Binary Function "_Z9test_lut5PKaPaiS0_PKc" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x39f0
  Size        : 0x538
  MaxSize     : 0x540
  Offset      : 0x39f0
  Section     : .text
  Orc Section : .local.text._Z9test_lut5PKaPaiS0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rcx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rdi, %rbx
    0000001a: 	subq	$0x68, %rsp
    0000001e: 	movq	%rsi, 0x28(%rsp)
    00000023: 	movl	%edx, 0x38(%rsp)
    00000027: 	movq	%r8, 0x58(%rsp)
    0000002c: 	callq	clock@PLT # Offset: 44
    00000031: 	movl	iterations(%rip), %ecx
    00000037: 	movq	%rax, start_time(%rip)
    0000003e: 	testl	%ecx, %ecx
    00000040: 	jle	.Ltmp108 # Offset: 64
    00000046: 	leal	-0xf(%r15), %eax
    0000004a: 	andl	$0x3, %r14d
    0000004e: 	movq	%rbx, %r8
    00000051: 	movq	%rbp, %r9
    00000054: 	movl	%eax, 0x34(%rsp)
    00000058: 	movslq	%r15d, %rax
    0000005b: 	movq	%rax, 0x50(%rsp)
    00000060: 	leal	-0x10(%r15), %eax
    00000064: 	movq	%r14, 0x40(%rsp)
    00000069: 	movl	$0x0, 0x3c(%rsp)
    00000071: 	movl	%eax, 0x4c(%rsp)
    00000075: 	nopl	(%rax) # Size: 3
.Ltmp114:
    00000078: 	movl	0x38(%rsp), %edx
    0000007c: 	testl	%edx, %edx
    0000007e: 	jle	.Ltmp109 # Offset: 126
    00000084: 	xorl	%eax, %eax
    00000086: 	cmpq	$0x0, 0x40(%rsp)
    0000008c: 	je	.Ltmp110 # Offset: 140
    00000092: 	movq	0x28(%rsp), %rcx
    00000097: 	movq	0x50(%rsp), %rsi
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp111:
    000000a0: 	movsbq	(%r8,%rax), %rdx
    000000a5: 	movzbl	(%r9,%rdx), %edx
    000000aa: 	movb	%dl, (%rcx,%rax)
    000000ad: 	addq	$0x1, %rax
    000000b1: 	cmpq	%rsi, %rax
    000000b4: 	jne	.Ltmp111 # Offset: 180
    000000b6: 	movl	0x38(%rsp), %eax
    000000ba: 	movl	%eax, 0x48(%rsp)
.Ltmp118:
    000000be: 	movl	0x34(%rsp), %ebx
    000000c2: 	cmpl	%ebx, 0x48(%rsp)
    000000c6: 	jge	.Ltmp112 # Offset: 198
.Ltmp119:
    000000cc: 	movslq	0x48(%rsp), %r10
    000000d1: 	nopl	(%rax) # Size: 7
.Ltmp113:
    000000d8: 	movl	(%r8,%r10), %esi
    000000dc: 	movl	0x4(%r8,%r10), %ecx
    000000e1: 	movl	0x8(%r8,%r10), %edx
    000000e6: 	movl	0xc(%r8,%r10), %eax
    000000eb: 	movl	%esi, %edi
    000000ed: 	movl	%ecx, %r11d
    000000f0: 	movl	%ecx, %r15d
    000000f3: 	movl	%ecx, %r12d
    000000f6: 	shrl	$0x18, %edi
    000000f9: 	shrl	$0x18, %r11d
    000000fd: 	movl	%eax, %r13d
    00000100: 	movl	%edx, %ebp
    00000102: 	movsbq	%dil, %rbx
    00000106: 	movl	%esi, %edi
    00000108: 	movsbq	%r11b, %r14
    0000010c: 	shrl	$0x8, %r15d
    00000110: 	shrl	$0x10, %edi
    00000113: 	movq	%r14, 0x18(%rsp)
    00000118: 	movl	%edx, %r14d
    0000011b: 	movl	%edx, %r11d
    0000011e: 	movsbq	%dil, %rdi
    00000122: 	shrl	$0x8, %r14d
    00000126: 	movsbq	%r15b, %r15
    0000012a: 	movsbq	%cl, %rcx
    0000012e: 	movq	%rdi, 0x10(%rsp)
    00000133: 	movl	%esi, %edi
    00000135: 	shrl	$0x8, %r13d
    00000139: 	movsbq	%r14b, %r14
    0000013d: 	shrl	$0x8, %edi
    00000140: 	shrl	$0x18, %r11d
    00000144: 	movsbq	%r13b, %r13
    00000148: 	movsbl	(%r9,%r15), %r15d
    0000014d: 	movsbq	%dil, %rdi
    00000151: 	movsbl	(%r9,%r14), %r14d
    00000156: 	movsbq	%r11b, %r11
    0000015a: 	shrl	$0x10, %ebp
    0000015d: 	movsbl	(%r9,%rdi), %edi
    00000162: 	movsbl	(%r9,%r13), %r13d
    00000167: 	movq	%rbx, 0x8(%rsp)
    0000016c: 	movl	%eax, %ebx
    0000016e: 	movq	%r11, 0x20(%rsp)
    00000173: 	movl	%eax, %r11d
    00000176: 	movsbq	%al, %rax
    0000017a: 	movsbq	%sil, %rsi
    0000017e: 	shll	$0x8, %edi
    00000181: 	movsbl	(%r9,%rax), %eax
    00000186: 	shll	$0x8, %r15d
    0000018a: 	movsbq	%dl, %rdx
    0000018e: 	shll	$0x8, %r14d
    00000192: 	movd	%edi, %xmm0
    00000196: 	shll	$0x8, %r13d
    0000019a: 	movsbq	%bpl, %rbp
    0000019e: 	movq	0x10(%rsp), %rdi
    000001a3: 	movsbl	(%r9,%rcx), %ecx
    000001a8: 	movd	%r15d, %xmm5
    000001ad: 	movd	%r14d, %xmm1
    000001b2: 	movsbl	(%r9,%rsi), %r15d
    000001b7: 	movd	%eax, %xmm6
    000001bb: 	punpckldq	%xmm5, %xmm0
    000001bf: 	shrl	$0x10, %ebx
    000001c2: 	shrl	$0x10, %r12d
    000001c6: 	movd	%ecx, %xmm7
    000001ca: 	movsbq	%bl, %rbx
    000001ce: 	shrl	$0x18, %r11d
    000001d2: 	movsbl	(%r9,%rdx), %edx
    000001d7: 	movd	%r13d, %xmm4
    000001dc: 	movsbl	(%r9,%rdi), %eax
    000001e1: 	movsbq	%r12b, %r12
    000001e5: 	punpckldq	%xmm4, %xmm1
    000001e9: 	movsbl	(%r9,%rbp), %ecx
    000001ee: 	movq	0x18(%rsp), %r14
    000001f3: 	movsbq	%r11b, %r11
    000001f7: 	punpcklqdq	%xmm1, %xmm0
    000001fb: 	movd	%edx, %xmm3
    000001ff: 	movd	%r15d, %xmm1
    00000204: 	movsbl	(%r9,%rbx), %edx
    00000209: 	punpckldq	%xmm6, %xmm3
    0000020d: 	punpckldq	%xmm7, %xmm1
    00000211: 	movdqa	%xmm0, %xmm2
    00000215: 	movq	0x8(%rsp), %rbx
    0000021a: 	movd	%eax, %xmm0
    0000021e: 	movsbl	(%r9,%r12), %eax
    00000223: 	punpcklqdq	%xmm3, %xmm1
    00000227: 	movd	%edx, %xmm4
    0000022b: 	por	%xmm1, %xmm2
    0000022f: 	movq	0x20(%rsp), %rsi
    00000234: 	movd	%ecx, %xmm1
    00000238: 	movsbl	(%r9,%r11), %edx
    0000023d: 	movd	%eax, %xmm5
    00000241: 	movsbl	(%r9,%rbx), %eax
    00000246: 	punpckldq	%xmm4, %xmm1
    0000024a: 	punpckldq	%xmm5, %xmm0
    0000024e: 	movsbl	(%r9,%rsi), %esi
    00000253: 	movd	%edx, %xmm6
    00000257: 	punpcklqdq	%xmm1, %xmm0
    0000025b: 	movd	%eax, %xmm1
    0000025f: 	movsbl	(%r9,%r14), %eax
    00000264: 	movd	%esi, %xmm3
    00000268: 	pslld	$0x10, %xmm0
    0000026d: 	movd	%eax, %xmm7
    00000271: 	punpckldq	%xmm6, %xmm3
    00000275: 	movq	0x28(%rsp), %rax
    0000027a: 	punpckldq	%xmm7, %xmm1
    0000027e: 	punpcklqdq	%xmm3, %xmm1
    00000282: 	pslld	$0x18, %xmm1
    00000287: 	por	%xmm1, %xmm0
    0000028b: 	por	%xmm2, %xmm0
    0000028f: 	movups	%xmm0, (%rax,%r10)
    00000294: 	addq	$0x10, %r10
    00000298: 	cmpl	%r10d, 0x34(%rsp)
    0000029d: 	jg	.Ltmp113 # Offset: 669
    000002a3: 	movl	0x48(%rsp), %ebx
    000002a7: 	movl	0x4c(%rsp), %eax
    000002ab: 	subl	%ebx, %eax
    000002ad: 	andl	$-0x10, %eax
    000002b0: 	leal	0x10(%rbx,%rax), %eax
    000002b4: 	cmpl	%eax, 0x38(%rsp)
    000002b8: 	jle	.Ltmp112 # Offset: 696
.Ltmp120:
    000002be: 	movslq	%eax, %rdx
    000002c1: 	movq	0x28(%rsp), %rbx
    000002c6: 	movl	0x38(%rsp), %esi
    000002ca: 	movsbq	(%r8,%rdx), %rcx
    000002cf: 	movzbl	(%r9,%rcx), %ecx
    000002d4: 	movb	%cl, (%rbx,%rdx)
    000002d7: 	leal	0x1(%rax), %edx
    000002da: 	cmpl	%edx, %esi
    000002dc: 	jle	.Ltmp112 # Offset: 732
    000002e2: 	movslq	%edx, %rdx
    000002e5: 	movsbq	(%r8,%rdx), %rcx
    000002ea: 	movzbl	(%r9,%rcx), %ecx
    000002ef: 	movb	%cl, (%rbx,%rdx)
    000002f2: 	leal	0x2(%rax), %edx
    000002f5: 	cmpl	%edx, %esi
    000002f7: 	jle	.Ltmp112 # Offset: 759
    000002fd: 	movslq	%edx, %rdx
    00000300: 	movsbq	(%r8,%rdx), %rcx
    00000305: 	movzbl	(%r9,%rcx), %ecx
    0000030a: 	movb	%cl, (%rbx,%rdx)
    0000030d: 	leal	0x3(%rax), %edx
    00000310: 	cmpl	%edx, %esi
    00000312: 	jle	.Ltmp112 # Offset: 786
    00000318: 	movslq	%edx, %rdx
    0000031b: 	movsbq	(%r8,%rdx), %rcx
    00000320: 	movzbl	(%r9,%rcx), %ecx
    00000325: 	movb	%cl, (%rbx,%rdx)
    00000328: 	leal	0x4(%rax), %edx
    0000032b: 	cmpl	%edx, %esi
    0000032d: 	jle	.Ltmp112 # Offset: 813
    00000333: 	movslq	%edx, %rdx
    00000336: 	movsbq	(%r8,%rdx), %rcx
    0000033b: 	movzbl	(%r9,%rcx), %ecx
    00000340: 	movb	%cl, (%rbx,%rdx)
    00000343: 	leal	0x5(%rax), %edx
    00000346: 	cmpl	%edx, %esi
    00000348: 	jle	.Ltmp112 # Offset: 840
    0000034e: 	movslq	%edx, %rdx
    00000351: 	movsbq	(%r8,%rdx), %rcx
    00000356: 	movzbl	(%r9,%rcx), %ecx
    0000035b: 	movb	%cl, (%rbx,%rdx)
    0000035e: 	leal	0x6(%rax), %edx
    00000361: 	cmpl	%edx, %esi
    00000363: 	jle	.Ltmp112 # Offset: 867
    00000369: 	movslq	%edx, %rdx
    0000036c: 	movsbq	(%r8,%rdx), %rcx
    00000371: 	movzbl	(%r9,%rcx), %ecx
    00000376: 	movb	%cl, (%rbx,%rdx)
    00000379: 	leal	0x7(%rax), %edx
    0000037c: 	cmpl	%edx, %esi
    0000037e: 	jle	.Ltmp112 # Offset: 894
    00000384: 	movslq	%edx, %rdx
    00000387: 	movsbq	(%r8,%rdx), %rcx
    0000038c: 	movzbl	(%r9,%rcx), %ecx
    00000391: 	movb	%cl, (%rbx,%rdx)
    00000394: 	leal	0x8(%rax), %edx
    00000397: 	cmpl	%edx, %esi
    00000399: 	jle	.Ltmp112 # Offset: 921
    0000039f: 	movslq	%edx, %rdx
    000003a2: 	movsbq	(%r8,%rdx), %rcx
    000003a7: 	movzbl	(%r9,%rcx), %ecx
    000003ac: 	movb	%cl, (%rbx,%rdx)
    000003af: 	leal	0x9(%rax), %edx
    000003b2: 	cmpl	%edx, %esi
    000003b4: 	jle	.Ltmp112 # Offset: 948
    000003ba: 	movslq	%edx, %rdx
    000003bd: 	movsbq	(%r8,%rdx), %rcx
    000003c2: 	movzbl	(%r9,%rcx), %ecx
    000003c7: 	movb	%cl, (%rbx,%rdx)
    000003ca: 	leal	0xa(%rax), %edx
    000003cd: 	cmpl	%edx, %esi
    000003cf: 	jle	.Ltmp112 # Offset: 975
    000003d5: 	movslq	%edx, %rdx
    000003d8: 	movsbq	(%r8,%rdx), %rcx
    000003dd: 	movzbl	(%r9,%rcx), %ecx
    000003e2: 	movb	%cl, (%rbx,%rdx)
    000003e5: 	leal	0xb(%rax), %edx
    000003e8: 	cmpl	%edx, %esi
    000003ea: 	jle	.Ltmp112 # Offset: 1002
    000003ec: 	movslq	%edx, %rdx
    000003ef: 	movsbq	(%r8,%rdx), %rcx
    000003f4: 	movzbl	(%r9,%rcx), %ecx
    000003f9: 	movb	%cl, (%rbx,%rdx)
    000003fc: 	leal	0xc(%rax), %edx
    000003ff: 	cmpl	%edx, %esi
    00000401: 	jle	.Ltmp112 # Offset: 1025
    00000403: 	movslq	%edx, %rdx
    00000406: 	movsbq	(%r8,%rdx), %rcx
    0000040b: 	movzbl	(%r9,%rcx), %ecx
    00000410: 	movb	%cl, (%rbx,%rdx)
    00000413: 	leal	0xd(%rax), %edx
    00000416: 	cmpl	%edx, %esi
    00000418: 	jle	.Ltmp112 # Offset: 1048
    0000041a: 	movslq	%edx, %rdx
    0000041d: 	movsbq	(%r8,%rdx), %rcx
    00000422: 	movzbl	(%r9,%rcx), %ecx
    00000427: 	movb	%cl, (%rbx,%rdx)
    0000042a: 	leal	0xe(%rax), %edx
    0000042d: 	cmpl	%edx, %esi
    0000042f: 	jle	.Ltmp112 # Offset: 1071
    00000431: 	movslq	%edx, %rdx
    00000434: 	addl	$0xf, %eax
    00000437: 	movsbq	(%r8,%rdx), %rcx
    0000043c: 	movzbl	(%r9,%rcx), %ecx
    00000441: 	movb	%cl, (%rbx,%rdx)
    00000444: 	cmpl	%eax, %esi
    00000446: 	jle	.Ltmp112 # Offset: 1094
    00000448: 	cltq
    0000044a: 	movsbq	(%r8,%rax), %rdx
    0000044f: 	movzbl	(%r9,%rdx), %edx
    00000454: 	movb	%dl, (%rbx,%rax)
    00000457: 	nopw	(%rax,%rax) # Size: 9
.Ltmp112:
    00000460: 	addl	$0x1, 0x3c(%rsp)
    00000465: 	movl	0x3c(%rsp), %eax
    00000469: 	cmpl	%eax, iterations(%rip)
    0000046f: 	jg	.Ltmp114 # Offset: 1135
.Ltmp108:
    00000475: 	callq	clock@PLT # Offset: 1141
    0000047a: 	movq	0x58(%rsp), %rdi
    0000047f: 	pxor	%xmm0, %xmm0
    00000483: 	movq	%rax, end_time(%rip)
    0000048a: 	subq	start_time(%rip), %rax
    00000491: 	cvtsi2sd	%rax, %xmm0
    00000496: 	divsd	DATAat0x90d0(%rip), %xmm0
    0000049e: 	callq	_Z13record_resultdPKc # Offset: 1182
    000004a3: 	movl	0x38(%rsp), %ebx
    000004a7: 	testl	%ebx, %ebx
    000004a9: 	jle	.Ltmp115 # Offset: 1193
    000004ab: 	movl	init_value(%rip), %r8d
    000004b2: 	movq	0x28(%rsp), %rax
    000004b7: 	leal	-0x1(%rbx), %edx
    000004ba: 	movl	%r8d, %ecx
    000004bd: 	leaq	0x1(%rax,%rdx), %rsi
    000004c2: 	jmp	.Ltmp116 # Offset: 1218
    000004c4: 	nopl	(%rax) # Size: 4
.Ltmp117:
    000004c8: 	addq	$0x1, %rax
    000004cc: 	cmpq	%rsi, %rax
    000004cf: 	je	.Ltmp115 # Offset: 1231
.Ltmp116:
    000004d1: 	movzbl	(%rax), %edx
    000004d4: 	cmpb	%cl, %dl
    000004d6: 	je	.Ltmp117 # Offset: 1238
    000004d8: 	movsbl	%dl, %ecx
    000004db: 	movq	0x58(%rsp), %rdx
    000004e0: 	addq	$0x68, %rsp
    000004e4: 	movl	$0x1, %edi
    000004e9: 	popq	%rbx
    000004ea: 	leaq	DATAat0x8118(%rip), %rsi
    000004f1: 	popq	%rbp
    000004f2: 	xorl	%eax, %eax
    000004f4: 	popq	%r12
    000004f6: 	popq	%r13
    000004f8: 	popq	%r14
    000004fa: 	popq	%r15
    000004fc: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1276
.Ltmp115:
    00000501: 	addq	$0x68, %rsp
    00000505: 	popq	%rbx
    00000506: 	popq	%rbp
    00000507: 	popq	%r12
    00000509: 	popq	%r13
    0000050b: 	popq	%r14
    0000050d: 	popq	%r15
    0000050f: 	retq # Offset: 1295
.Ltmp109:
    00000510: 	movl	$0x0, 0x48(%rsp)
    00000518: 	jmp	.Ltmp118 # Offset: 1304
.Ltmp110:
    0000051d: 	movl	0x34(%rsp), %eax
    00000521: 	movl	$0x0, 0x48(%rsp)
    00000529: 	testl	%eax, %eax
    0000052b: 	jg	.Ltmp119 # Offset: 1323
    00000531: 	xorl	%eax, %eax
    00000533: 	jmp	.Ltmp120 # Offset: 1331
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut5PKaPaiS0_PKc"

Binary Function "_Z9test_lut5PKtPtiS0_PKc" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x3f30
  Size        : 0x407
  MaxSize     : 0x410
  Offset      : 0x3f30
  Section     : .text
  Orc Section : .local.text._Z9test_lut5PKtPtiS0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rcx, %rbx
    0000001a: 	subq	$0x48, %rsp
    0000001e: 	movq	%r8, 0x38(%rsp)
    00000023: 	callq	clock@PLT # Offset: 35
    00000028: 	movl	iterations(%rip), %ecx
    0000002e: 	movq	%rax, start_time(%rip)
    00000035: 	testl	%ecx, %ecx
    00000037: 	jle	.Ltmp121 # Offset: 55
    0000003d: 	movq	%rbp, %rax
    00000040: 	movl	$0x0, 0xc(%rsp)
    00000048: 	andl	$0x3, %eax
    0000004b: 	movq	%rax, 0x18(%rsp)
    00000050: 	leal	-0xf(%r15), %eax
    00000054: 	movl	%eax, 0x28(%rsp)
    00000058: 	movslq	%r15d, %rax
    0000005b: 	movq	%rax, 0x20(%rsp)
    00000060: 	leal	-0x10(%r15), %eax
    00000064: 	movl	%eax, 0x2c(%rsp)
    00000068: 	leaq	0x20(%r14), %rax
    0000006c: 	movq	%rax, 0x30(%rsp)
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp127:
    00000078: 	testl	%r15d, %r15d
    0000007b: 	jle	.Ltmp122 # Offset: 123
    00000081: 	xorl	%eax, %eax
    00000083: 	cmpq	$0x0, 0x18(%rsp)
    00000089: 	movq	0x20(%rsp), %rsi
    0000008e: 	je	.Ltmp122 # Offset: 142
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp123:
    00000098: 	movzwl	(%r14,%rax,2), %edx
    0000009d: 	movzwl	(%rbx,%rdx,2), %edx
    000000a1: 	movw	%dx, (%rbp,%rax,2)
    000000a6: 	addq	$0x1, %rax
    000000aa: 	cmpq	%rax, %rsi
    000000ad: 	jne	.Ltmp123 # Offset: 173
    000000af: 	movl	%r15d, %r13d
.Ltmp131:
    000000b2: 	cmpl	0x28(%rsp), %r13d
    000000b7: 	jge	.Ltmp124 # Offset: 183
    000000bd: 	movl	0x2c(%rsp), %ecx
    000000c1: 	movslq	%r13d, %rsi
    000000c4: 	movq	0x30(%rsp), %rdi
    000000c9: 	movl	%r13d, 0x14(%rsp)
    000000ce: 	leaq	(%rsi,%rsi), %rdx
    000000d2: 	subl	%r13d, %ecx
    000000d5: 	leaq	(%r14,%rdx), %rax
    000000d9: 	addq	%rbp, %rdx
    000000dc: 	shrl	$0x4, %ecx
    000000df: 	movl	%ecx, 0x10(%rsp)
    000000e3: 	shlq	$0x4, %rcx
    000000e7: 	addq	%rsi, %rcx
    000000ea: 	leaq	(%rdi,%rcx,2), %rdi
    000000ee: 	movq	%rdi, %r13
    000000f1: 	nopl	(%rax) # Size: 7
.Ltmp125:
    000000f8: 	movl	0x8(%rax), %esi
    000000fb: 	movl	0x10(%rax), %ecx
    000000fe: 	addq	$0x20, %rax
    00000102: 	addq	$0x20, %rdx
    00000106: 	movl	-0x20(%rax), %r9d
    0000010a: 	movl	-0x8(%rax), %r10d
    0000010e: 	movl	%esi, %edi
    00000110: 	movzwl	%si, %esi
    00000113: 	movzwl	(%rbx,%rsi,2), %r12d
    00000118: 	movl	%ecx, %esi
    0000011a: 	movzwl	%cx, %ecx
    0000011d: 	movl	%r9d, %r8d
    00000120: 	movzwl	(%rbx,%rcx,2), %r11d
    00000125: 	movl	%r10d, %ecx
    00000128: 	shrl	$0x10, %r8d
    0000012c: 	movzwl	%r9w, %r9d
    00000130: 	shrl	$0x10, %edi
    00000133: 	shrl	$0x10, %esi
    00000136: 	movzwl	(%rbx,%r8,2), %r8d
    0000013b: 	movzwl	%r10w, %r10d
    0000013f: 	shrl	$0x10, %ecx
    00000142: 	movzwl	(%rbx,%rdi,2), %edi
    00000146: 	movzwl	(%rbx,%rsi,2), %esi
    0000014a: 	movzwl	(%rbx,%rcx,2), %ecx
    0000014e: 	movzwl	(%rbx,%r10,2), %r10d
    00000153: 	shll	$0x10, %r8d
    00000157: 	movzwl	(%rbx,%r9,2), %r9d
    0000015c: 	shll	$0x10, %edi
    0000015f: 	shll	$0x10, %esi
    00000162: 	shll	$0x10, %ecx
    00000165: 	orl	%r12d, %edi
    00000168: 	orl	%r11d, %esi
    0000016b: 	orl	%r9d, %r8d
    0000016e: 	orl	%r10d, %ecx
    00000171: 	movl	%edi, -0x18(%rdx)
    00000174: 	movl	%r8d, -0x20(%rdx)
    00000178: 	movl	%esi, -0x10(%rdx)
    0000017b: 	movl	%ecx, -0x8(%rdx)
    0000017e: 	cmpq	%rax, %r13
    00000181: 	jne	.Ltmp125 # Offset: 385
    00000187: 	movl	0x10(%rsp), %eax
    0000018b: 	movl	0x14(%rsp), %r13d
    00000190: 	movl	iterations(%rip), %ecx
    00000196: 	shll	$0x4, %eax
    00000199: 	leal	0x10(%r13,%rax), %r13d
.Ltmp124:
    0000019e: 	cmpl	%r13d, %r15d
    000001a1: 	jle	.Ltmp126 # Offset: 417
    000001a7: 	movslq	%r13d, %rdx
    000001aa: 	movzwl	(%r14,%rdx,2), %esi
    000001af: 	leaq	(%rdx,%rdx), %rax
    000001b3: 	movzwl	(%rbx,%rsi,2), %esi
    000001b7: 	movw	%si, (%rbp,%rdx,2)
    000001bc: 	leal	0x1(%r13), %edx
    000001c0: 	cmpl	%edx, %r15d
    000001c3: 	jle	.Ltmp126 # Offset: 451
    000001c9: 	movzwl	0x2(%r14,%rax), %edx
    000001cf: 	movzwl	(%rbx,%rdx,2), %edx
    000001d3: 	movw	%dx, 0x2(%rbp,%rax)
    000001d8: 	leal	0x2(%r13), %edx
    000001dc: 	cmpl	%edx, %r15d
    000001df: 	jle	.Ltmp126 # Offset: 479
    000001e5: 	movzwl	0x4(%r14,%rax), %edx
    000001eb: 	movzwl	(%rbx,%rdx,2), %edx
    000001ef: 	movw	%dx, 0x4(%rbp,%rax)
    000001f4: 	leal	0x3(%r13), %edx
    000001f8: 	cmpl	%edx, %r15d
    000001fb: 	jle	.Ltmp126 # Offset: 507
    00000201: 	movzwl	0x6(%r14,%rax), %edx
    00000207: 	movzwl	(%rbx,%rdx,2), %edx
    0000020b: 	movw	%dx, 0x6(%rbp,%rax)
    00000210: 	leal	0x4(%r13), %edx
    00000214: 	cmpl	%edx, %r15d
    00000217: 	jle	.Ltmp126 # Offset: 535
    0000021d: 	movzwl	0x8(%r14,%rax), %edx
    00000223: 	movzwl	(%rbx,%rdx,2), %edx
    00000227: 	movw	%dx, 0x8(%rbp,%rax)
    0000022c: 	leal	0x5(%r13), %edx
    00000230: 	cmpl	%edx, %r15d
    00000233: 	jle	.Ltmp126 # Offset: 563
    00000239: 	movzwl	0xa(%r14,%rax), %edx
    0000023f: 	movzwl	(%rbx,%rdx,2), %edx
    00000243: 	movw	%dx, 0xa(%rbp,%rax)
    00000248: 	leal	0x6(%r13), %edx
    0000024c: 	cmpl	%edx, %r15d
    0000024f: 	jle	.Ltmp126 # Offset: 591
    00000255: 	movzwl	0xc(%r14,%rax), %edx
    0000025b: 	movzwl	(%rbx,%rdx,2), %edx
    0000025f: 	movw	%dx, 0xc(%rbp,%rax)
    00000264: 	leal	0x7(%r13), %edx
    00000268: 	cmpl	%edx, %r15d
    0000026b: 	jle	.Ltmp126 # Offset: 619
    00000271: 	movzwl	0xe(%r14,%rax), %edx
    00000277: 	movzwl	(%rbx,%rdx,2), %edx
    0000027b: 	movw	%dx, 0xe(%rbp,%rax)
    00000280: 	leal	0x8(%r13), %edx
    00000284: 	cmpl	%edx, %r15d
    00000287: 	jle	.Ltmp126 # Offset: 647
    0000028d: 	movzwl	0x10(%r14,%rax), %edx
    00000293: 	movzwl	(%rbx,%rdx,2), %edx
    00000297: 	movw	%dx, 0x10(%rbp,%rax)
    0000029c: 	leal	0x9(%r13), %edx
    000002a0: 	cmpl	%edx, %r15d
    000002a3: 	jle	.Ltmp126 # Offset: 675
    000002a9: 	movzwl	0x12(%r14,%rax), %edx
    000002af: 	movzwl	(%rbx,%rdx,2), %edx
    000002b3: 	movw	%dx, 0x12(%rbp,%rax)
    000002b8: 	leal	0xa(%r13), %edx
    000002bc: 	cmpl	%edx, %r15d
    000002bf: 	jle	.Ltmp126 # Offset: 703
    000002c5: 	movzwl	0x14(%r14,%rax), %edx
    000002cb: 	movzwl	(%rbx,%rdx,2), %edx
    000002cf: 	movw	%dx, 0x14(%rbp,%rax)
    000002d4: 	leal	0xb(%r13), %edx
    000002d8: 	cmpl	%edx, %r15d
    000002db: 	jle	.Ltmp126 # Offset: 731
    000002dd: 	movzwl	0x16(%r14,%rax), %edx
    000002e3: 	movzwl	(%rbx,%rdx,2), %edx
    000002e7: 	movw	%dx, 0x16(%rbp,%rax)
    000002ec: 	leal	0xc(%r13), %edx
    000002f0: 	cmpl	%edx, %r15d
    000002f3: 	jle	.Ltmp126 # Offset: 755
    000002f5: 	movzwl	0x18(%r14,%rax), %edx
    000002fb: 	movzwl	(%rbx,%rdx,2), %edx
    000002ff: 	movw	%dx, 0x18(%rbp,%rax)
    00000304: 	leal	0xd(%r13), %edx
    00000308: 	cmpl	%edx, %r15d
    0000030b: 	jle	.Ltmp126 # Offset: 779
    0000030d: 	movzwl	0x1a(%r14,%rax), %edx
    00000313: 	movzwl	(%rbx,%rdx,2), %edx
    00000317: 	movw	%dx, 0x1a(%rbp,%rax)
    0000031c: 	leal	0xe(%r13), %edx
    00000320: 	cmpl	%edx, %r15d
    00000323: 	jle	.Ltmp126 # Offset: 803
    00000325: 	movzwl	0x1c(%r14,%rax), %edx
    0000032b: 	addl	$0xf, %r13d
    0000032f: 	movzwl	(%rbx,%rdx,2), %edx
    00000333: 	movw	%dx, 0x1c(%rbp,%rax)
    00000338: 	cmpl	%r13d, %r15d
    0000033b: 	jle	.Ltmp126 # Offset: 827
    0000033d: 	movzwl	0x1e(%r14,%rax), %edx
    00000343: 	movzwl	(%rbx,%rdx,2), %edx
    00000347: 	movw	%dx, 0x1e(%rbp,%rax)
    0000034c: 	nopl	(%rax) # Size: 4
.Ltmp126:
    00000350: 	addl	$0x1, 0xc(%rsp)
    00000355: 	movl	0xc(%rsp), %eax
    00000359: 	cmpl	%ecx, %eax
    0000035b: 	jl	.Ltmp127 # Offset: 859
.Ltmp121:
    00000361: 	callq	clock@PLT # Offset: 865
    00000366: 	movq	0x38(%rsp), %rdi
    0000036b: 	pxor	%xmm0, %xmm0
    0000036f: 	movq	%rax, end_time(%rip)
    00000376: 	subq	start_time(%rip), %rax
    0000037d: 	cvtsi2sd	%rax, %xmm0
    00000382: 	divsd	DATAat0x90d0(%rip), %xmm0
    0000038a: 	callq	_Z13record_resultdPKc # Offset: 906
    0000038f: 	testl	%r15d, %r15d
    00000392: 	jle	.Ltmp128 # Offset: 914
    00000394: 	movl	init_value(%rip), %r8d
    0000039b: 	leal	-0x1(%r15), %eax
    0000039f: 	leaq	0x2(%rbp,%rax,2), %rcx
    000003a4: 	movl	%r8d, %edx
    000003a7: 	jmp	.Ltmp129 # Offset: 935
    000003a9: 	nopl	(%rax) # Size: 7
.Ltmp130:
    000003b0: 	addq	$0x2, %rbp
    000003b4: 	cmpq	%rbp, %rcx
    000003b7: 	je	.Ltmp128 # Offset: 951
.Ltmp129:
    000003b9: 	movzwl	(%rbp), %eax
    000003bd: 	cmpw	%dx, %ax
    000003c0: 	je	.Ltmp130 # Offset: 960
    000003c2: 	movq	0x38(%rsp), %rdx
    000003c7: 	addq	$0x48, %rsp
    000003cb: 	movzwl	%ax, %ecx
    000003ce: 	leaq	DATAat0x8118(%rip), %rsi
    000003d5: 	popq	%rbx
    000003d6: 	movl	$0x1, %edi
    000003db: 	popq	%rbp
    000003dc: 	xorl	%eax, %eax
    000003de: 	popq	%r12
    000003e0: 	popq	%r13
    000003e2: 	popq	%r14
    000003e4: 	popq	%r15
    000003e6: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 998
    000003eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp122:
    000003f0: 	xorl	%r13d, %r13d
    000003f3: 	jmp	.Ltmp131 # Offset: 1011
.Ltmp128:
    000003f8: 	addq	$0x48, %rsp
    000003fc: 	popq	%rbx
    000003fd: 	popq	%rbp
    000003fe: 	popq	%r12
    00000400: 	popq	%r13
    00000402: 	popq	%r14
    00000404: 	popq	%r15
    00000406: 	retq # Offset: 1030
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut5PKtPtiS0_PKc"

Binary Function "_Z9test_lut5PKsPsiS0_PKc" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x4340
  Size        : 0x41f
  MaxSize     : 0x420
  Offset      : 0x4340
  Section     : .text
  Orc Section : .local.text._Z9test_lut5PKsPsiS0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rcx, %rbx
    0000001a: 	subq	$0x48, %rsp
    0000001e: 	movq	%r8, 0x38(%rsp)
    00000023: 	callq	clock@PLT # Offset: 35
    00000028: 	movl	iterations(%rip), %ecx
    0000002e: 	movq	%rax, start_time(%rip)
    00000035: 	testl	%ecx, %ecx
    00000037: 	jle	.Ltmp132 # Offset: 55
    0000003d: 	movq	%rbp, %rax
    00000040: 	movl	$0x0, 0xc(%rsp)
    00000048: 	andl	$0x3, %eax
    0000004b: 	movq	%rax, 0x18(%rsp)
    00000050: 	leal	-0xf(%r15), %eax
    00000054: 	movl	%eax, 0x28(%rsp)
    00000058: 	movslq	%r15d, %rax
    0000005b: 	movq	%rax, 0x20(%rsp)
    00000060: 	leal	-0x10(%r15), %eax
    00000064: 	movl	%eax, 0x2c(%rsp)
    00000068: 	leaq	0x20(%r14), %rax
    0000006c: 	movq	%rax, 0x30(%rsp)
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp138:
    00000078: 	testl	%r15d, %r15d
    0000007b: 	jle	.Ltmp133 # Offset: 123
    00000081: 	xorl	%eax, %eax
    00000083: 	cmpq	$0x0, 0x18(%rsp)
    00000089: 	movq	0x20(%rsp), %rsi
    0000008e: 	je	.Ltmp133 # Offset: 142
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp134:
    00000098: 	movswq	(%r14,%rax,2), %rdx
    0000009d: 	movzwl	(%rbx,%rdx,2), %edx
    000000a1: 	movw	%dx, (%rbp,%rax,2)
    000000a6: 	addq	$0x1, %rax
    000000aa: 	cmpq	%rax, %rsi
    000000ad: 	jne	.Ltmp134 # Offset: 173
    000000af: 	movl	%r15d, %r13d
.Ltmp142:
    000000b2: 	cmpl	0x28(%rsp), %r13d
    000000b7: 	jge	.Ltmp135 # Offset: 183
    000000bd: 	movl	0x2c(%rsp), %ecx
    000000c1: 	movslq	%r13d, %rsi
    000000c4: 	movq	0x30(%rsp), %rdi
    000000c9: 	movl	%r13d, 0x14(%rsp)
    000000ce: 	leaq	(%rsi,%rsi), %rdx
    000000d2: 	subl	%r13d, %ecx
    000000d5: 	leaq	(%r14,%rdx), %rax
    000000d9: 	addq	%rbp, %rdx
    000000dc: 	shrl	$0x4, %ecx
    000000df: 	movl	%ecx, 0x10(%rsp)
    000000e3: 	shlq	$0x4, %rcx
    000000e7: 	addq	%rsi, %rcx
    000000ea: 	leaq	(%rdi,%rcx,2), %rdi
    000000ee: 	movq	%rdi, %r13
    000000f1: 	nopl	(%rax) # Size: 7
.Ltmp136:
    000000f8: 	movl	(%rax), %ecx
    000000fa: 	movl	0x8(%rax), %r8d
    000000fe: 	addq	$0x20, %rax
    00000102: 	addq	$0x20, %rdx
    00000106: 	movl	-0x10(%rax), %edi
    00000109: 	movl	-0x8(%rax), %esi
    0000010c: 	movl	%ecx, %r9d
    0000010f: 	movl	%r8d, %r12d
    00000112: 	movswq	%cx, %rcx
    00000116: 	movswq	%r8w, %r8
    0000011a: 	movl	%edi, %r11d
    0000011d: 	movl	%esi, %r10d
    00000120: 	shrl	$0x10, %r9d
    00000124: 	movswq	%di, %rdi
    00000128: 	shrl	$0x10, %r12d
    0000012c: 	shrl	$0x10, %r11d
    00000130: 	movswq	%r9w, %r9
    00000134: 	movswq	%si, %rsi
    00000138: 	shrl	$0x10, %r10d
    0000013c: 	movswq	%r12w, %r12
    00000140: 	movswq	%r11w, %r11
    00000144: 	movswl	(%rbx,%rdi,2), %edi
    00000148: 	movswq	%r10w, %r10
    0000014c: 	movswl	(%rbx,%r12,2), %r12d
    00000151: 	movswl	(%rbx,%r11,2), %r11d
    00000156: 	movswl	(%rbx,%r10,2), %r10d
    0000015b: 	movswl	(%rbx,%r9,2), %r9d
    00000160: 	movswl	(%rbx,%rsi,2), %esi
    00000164: 	movswl	(%rbx,%rcx,2), %ecx
    00000168: 	shll	$0x10, %r12d
    0000016c: 	shll	$0x10, %r11d
    00000170: 	movswl	(%rbx,%r8,2), %r8d
    00000175: 	shll	$0x10, %r10d
    00000179: 	shll	$0x10, %r9d
    0000017d: 	orl	%r11d, %edi
    00000180: 	orl	%r10d, %esi
    00000183: 	orl	%r9d, %ecx
    00000186: 	movl	%edi, -0x10(%rdx)
    00000189: 	orl	%r12d, %r8d
    0000018c: 	movl	%ecx, -0x20(%rdx)
    0000018f: 	movl	%r8d, -0x18(%rdx)
    00000193: 	movl	%esi, -0x8(%rdx)
    00000196: 	cmpq	%rax, %r13
    00000199: 	jne	.Ltmp136 # Offset: 409
    0000019f: 	movl	0x10(%rsp), %eax
    000001a3: 	movl	0x14(%rsp), %r13d
    000001a8: 	movl	iterations(%rip), %ecx
    000001ae: 	shll	$0x4, %eax
    000001b1: 	leal	0x10(%r13,%rax), %r13d
.Ltmp135:
    000001b6: 	cmpl	%r13d, %r15d
    000001b9: 	jle	.Ltmp137 # Offset: 441
    000001bf: 	movslq	%r13d, %rdx
    000001c2: 	movswq	(%r14,%rdx,2), %rsi
    000001c7: 	leaq	(%rdx,%rdx), %rax
    000001cb: 	movzwl	(%rbx,%rsi,2), %esi
    000001cf: 	movw	%si, (%rbp,%rdx,2)
    000001d4: 	leal	0x1(%r13), %edx
    000001d8: 	cmpl	%edx, %r15d
    000001db: 	jle	.Ltmp137 # Offset: 475
    000001e1: 	movswq	0x2(%r14,%rax), %rdx
    000001e7: 	movzwl	(%rbx,%rdx,2), %edx
    000001eb: 	movw	%dx, 0x2(%rbp,%rax)
    000001f0: 	leal	0x2(%r13), %edx
    000001f4: 	cmpl	%edx, %r15d
    000001f7: 	jle	.Ltmp137 # Offset: 503
    000001fd: 	movswq	0x4(%r14,%rax), %rdx
    00000203: 	movzwl	(%rbx,%rdx,2), %edx
    00000207: 	movw	%dx, 0x4(%rbp,%rax)
    0000020c: 	leal	0x3(%r13), %edx
    00000210: 	cmpl	%edx, %r15d
    00000213: 	jle	.Ltmp137 # Offset: 531
    00000219: 	movswq	0x6(%r14,%rax), %rdx
    0000021f: 	movzwl	(%rbx,%rdx,2), %edx
    00000223: 	movw	%dx, 0x6(%rbp,%rax)
    00000228: 	leal	0x4(%r13), %edx
    0000022c: 	cmpl	%edx, %r15d
    0000022f: 	jle	.Ltmp137 # Offset: 559
    00000235: 	movswq	0x8(%r14,%rax), %rdx
    0000023b: 	movzwl	(%rbx,%rdx,2), %edx
    0000023f: 	movw	%dx, 0x8(%rbp,%rax)
    00000244: 	leal	0x5(%r13), %edx
    00000248: 	cmpl	%edx, %r15d
    0000024b: 	jle	.Ltmp137 # Offset: 587
    00000251: 	movswq	0xa(%r14,%rax), %rdx
    00000257: 	movzwl	(%rbx,%rdx,2), %edx
    0000025b: 	movw	%dx, 0xa(%rbp,%rax)
    00000260: 	leal	0x6(%r13), %edx
    00000264: 	cmpl	%edx, %r15d
    00000267: 	jle	.Ltmp137 # Offset: 615
    0000026d: 	movswq	0xc(%r14,%rax), %rdx
    00000273: 	movzwl	(%rbx,%rdx,2), %edx
    00000277: 	movw	%dx, 0xc(%rbp,%rax)
    0000027c: 	leal	0x7(%r13), %edx
    00000280: 	cmpl	%edx, %r15d
    00000283: 	jle	.Ltmp137 # Offset: 643
    00000289: 	movswq	0xe(%r14,%rax), %rdx
    0000028f: 	movzwl	(%rbx,%rdx,2), %edx
    00000293: 	movw	%dx, 0xe(%rbp,%rax)
    00000298: 	leal	0x8(%r13), %edx
    0000029c: 	cmpl	%edx, %r15d
    0000029f: 	jle	.Ltmp137 # Offset: 671
    000002a5: 	movswq	0x10(%r14,%rax), %rdx
    000002ab: 	movzwl	(%rbx,%rdx,2), %edx
    000002af: 	movw	%dx, 0x10(%rbp,%rax)
    000002b4: 	leal	0x9(%r13), %edx
    000002b8: 	cmpl	%edx, %r15d
    000002bb: 	jle	.Ltmp137 # Offset: 699
    000002c1: 	movswq	0x12(%r14,%rax), %rdx
    000002c7: 	movzwl	(%rbx,%rdx,2), %edx
    000002cb: 	movw	%dx, 0x12(%rbp,%rax)
    000002d0: 	leal	0xa(%r13), %edx
    000002d4: 	cmpl	%edx, %r15d
    000002d7: 	jle	.Ltmp137 # Offset: 727
    000002dd: 	movswq	0x14(%r14,%rax), %rdx
    000002e3: 	movzwl	(%rbx,%rdx,2), %edx
    000002e7: 	movw	%dx, 0x14(%rbp,%rax)
    000002ec: 	leal	0xb(%r13), %edx
    000002f0: 	cmpl	%edx, %r15d
    000002f3: 	jle	.Ltmp137 # Offset: 755
    000002f5: 	movswq	0x16(%r14,%rax), %rdx
    000002fb: 	movzwl	(%rbx,%rdx,2), %edx
    000002ff: 	movw	%dx, 0x16(%rbp,%rax)
    00000304: 	leal	0xc(%r13), %edx
    00000308: 	cmpl	%edx, %r15d
    0000030b: 	jle	.Ltmp137 # Offset: 779
    0000030d: 	movswq	0x18(%r14,%rax), %rdx
    00000313: 	movzwl	(%rbx,%rdx,2), %edx
    00000317: 	movw	%dx, 0x18(%rbp,%rax)
    0000031c: 	leal	0xd(%r13), %edx
    00000320: 	cmpl	%edx, %r15d
    00000323: 	jle	.Ltmp137 # Offset: 803
    00000325: 	movswq	0x1a(%r14,%rax), %rdx
    0000032b: 	movzwl	(%rbx,%rdx,2), %edx
    0000032f: 	movw	%dx, 0x1a(%rbp,%rax)
    00000334: 	leal	0xe(%r13), %edx
    00000338: 	cmpl	%edx, %r15d
    0000033b: 	jle	.Ltmp137 # Offset: 827
    0000033d: 	movswq	0x1c(%r14,%rax), %rdx
    00000343: 	addl	$0xf, %r13d
    00000347: 	movzwl	(%rbx,%rdx,2), %edx
    0000034b: 	movw	%dx, 0x1c(%rbp,%rax)
    00000350: 	cmpl	%r13d, %r15d
    00000353: 	jle	.Ltmp137 # Offset: 851
    00000355: 	movswq	0x1e(%r14,%rax), %rdx
    0000035b: 	movzwl	(%rbx,%rdx,2), %edx
    0000035f: 	movw	%dx, 0x1e(%rbp,%rax)
    00000364: 	nopl	(%rax) # Size: 4
.Ltmp137:
    00000368: 	addl	$0x1, 0xc(%rsp)
    0000036d: 	movl	0xc(%rsp), %eax
    00000371: 	cmpl	%ecx, %eax
    00000373: 	jl	.Ltmp138 # Offset: 883
.Ltmp132:
    00000379: 	callq	clock@PLT # Offset: 889
    0000037e: 	movq	0x38(%rsp), %rdi
    00000383: 	pxor	%xmm0, %xmm0
    00000387: 	movq	%rax, end_time(%rip)
    0000038e: 	subq	start_time(%rip), %rax
    00000395: 	cvtsi2sd	%rax, %xmm0
    0000039a: 	divsd	DATAat0x90d0(%rip), %xmm0
    000003a2: 	callq	_Z13record_resultdPKc # Offset: 930
    000003a7: 	testl	%r15d, %r15d
    000003aa: 	jle	.Ltmp139 # Offset: 938
    000003ac: 	movl	init_value(%rip), %r8d
    000003b3: 	leal	-0x1(%r15), %eax
    000003b7: 	leaq	0x2(%rbp,%rax,2), %rcx
    000003bc: 	movl	%r8d, %edx
    000003bf: 	jmp	.Ltmp140 # Offset: 959
    000003c1: 	nopl	(%rax) # Size: 7
.Ltmp141:
    000003c8: 	addq	$0x2, %rbp
    000003cc: 	cmpq	%rbp, %rcx
    000003cf: 	je	.Ltmp139 # Offset: 975
.Ltmp140:
    000003d1: 	movzwl	(%rbp), %eax
    000003d5: 	cmpw	%dx, %ax
    000003d8: 	je	.Ltmp141 # Offset: 984
    000003da: 	movq	0x38(%rsp), %rdx
    000003df: 	addq	$0x48, %rsp
    000003e3: 	movswl	%ax, %ecx
    000003e6: 	leaq	DATAat0x8118(%rip), %rsi
    000003ed: 	popq	%rbx
    000003ee: 	movl	$0x1, %edi
    000003f3: 	popq	%rbp
    000003f4: 	xorl	%eax, %eax
    000003f6: 	popq	%r12
    000003f8: 	popq	%r13
    000003fa: 	popq	%r14
    000003fc: 	popq	%r15
    000003fe: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1022
    00000403: 	nopl	(%rax,%rax) # Size: 5
.Ltmp133:
    00000408: 	xorl	%r13d, %r13d
    0000040b: 	jmp	.Ltmp142 # Offset: 1035
.Ltmp139:
    00000410: 	addq	$0x48, %rsp
    00000414: 	popq	%rbx
    00000415: 	popq	%rbp
    00000416: 	popq	%r12
    00000418: 	popq	%r13
    0000041a: 	popq	%r14
    0000041c: 	popq	%r15
    0000041e: 	retq # Offset: 1054
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut5PKsPsiS0_PKc"

Binary Function "_Z9test_lut6PKhPhiS0_PKc" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x4760
  Size        : 0x510
  MaxSize     : 0x510
  Offset      : 0x4760
  Section     : .text
  Orc Section : .local.text._Z9test_lut6PKhPhiS0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rcx, %rbx
    0000001a: 	subq	$0x48, %rsp
    0000001e: 	movq	%rsi, 0x8(%rsp)
    00000023: 	movl	%edx, 0x18(%rsp)
    00000027: 	movq	%r8, 0x38(%rsp)
    0000002c: 	callq	clock@PLT # Offset: 44
    00000031: 	movl	iterations(%rip), %ecx
    00000037: 	movq	%rax, start_time(%rip)
    0000003e: 	testl	%ecx, %ecx
    00000040: 	jle	.Ltmp143 # Offset: 64
    00000046: 	leal	-0xf(%r15), %eax
    0000004a: 	andl	$0x7, %r14d
    0000004e: 	movq	%r12, %rbp
    00000051: 	movq	%rbx, %r13
    00000054: 	movl	%eax, 0x14(%rsp)
    00000058: 	movslq	%r15d, %rax
    0000005b: 	movq	%rax, 0x30(%rsp)
    00000060: 	leal	-0x10(%r15), %eax
    00000064: 	movq	%r14, 0x20(%rsp)
    00000069: 	movl	$0x0, 0x1c(%rsp)
    00000071: 	movl	%eax, 0x2c(%rsp)
    00000075: 	nopl	(%rax) # Size: 3
.Ltmp149:
    00000078: 	movl	0x18(%rsp), %edx
    0000007c: 	testl	%edx, %edx
    0000007e: 	jle	.Ltmp144 # Offset: 126
    00000084: 	xorl	%eax, %eax
    00000086: 	cmpq	$0x0, 0x20(%rsp)
    0000008c: 	je	.Ltmp145 # Offset: 140
    00000092: 	movq	0x8(%rsp), %rcx
    00000097: 	movq	0x30(%rsp), %rsi
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp146:
    000000a0: 	movzbl	(%rbp,%rax), %edx
    000000a5: 	movzbl	(%r13,%rdx), %edx
    000000ab: 	movb	%dl, (%rcx,%rax)
    000000ae: 	addq	$0x1, %rax
    000000b2: 	cmpq	%rsi, %rax
    000000b5: 	jne	.Ltmp146 # Offset: 181
    000000b7: 	movl	0x18(%rsp), %eax
    000000bb: 	movl	%eax, 0x28(%rsp)
.Ltmp153:
    000000bf: 	movl	0x14(%rsp), %edi
    000000c3: 	cmpl	%edi, 0x28(%rsp)
    000000c7: 	jge	.Ltmp147 # Offset: 199
.Ltmp154:
    000000cd: 	movslq	0x28(%rsp), %r11
    000000d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp148:
    000000d8: 	movq	0x8(%rbp,%r11), %rcx
    000000dd: 	movq	(%rbp,%r11), %rdx
    000000e2: 	movq	%rcx, %rsi
    000000e5: 	movq	%rdx, %r15
    000000e8: 	movq	%rdx, %r14
    000000eb: 	movzbl	%dh, %eax
    000000ee: 	shrq	$0x30, %rsi
    000000f2: 	shrq	$0x38, %r15
    000000f6: 	movq	%rdx, %r12
    000000f9: 	movq	%rdx, %rbx
    000000fc: 	shrq	$0x30, %r14
    00000100: 	movzbl	%sil, %esi
    00000104: 	movq	%rdx, %r10
    00000107: 	movq	%rdx, %r9
    0000010a: 	movzbl	%r14b, %r14d
    0000010e: 	movzbl	%dl, %edx
    00000111: 	shrq	$0x28, %r12
    00000115: 	movq	%rax, (%rsp)
    00000119: 	movzbl	(%r13,%rsi), %r8d
    0000011f: 	movq	%rcx, %rsi
    00000122: 	shrq	$0x20, %rbx
    00000126: 	movq	%rcx, %rax
    00000129: 	shrq	$0x28, %rsi
    0000012d: 	movzbl	%r12b, %r12d
    00000131: 	movzbl	%bl, %ebx
    00000134: 	shrq	$0x18, %r10
    00000138: 	movzbl	(%r13,%r15), %r15d
    0000013e: 	movzbl	%sil, %esi
    00000142: 	movzbl	%r10b, %r10d
    00000146: 	shrq	$0x10, %r9
    0000014a: 	movzbl	(%r13,%rdx), %edx
    00000150: 	movzbl	(%r13,%r14), %r14d
    00000156: 	movzbl	%r9b, %r9d
    0000015a: 	shrq	$0x38, %rax
    0000015e: 	shlq	$0x38, %r15
    00000162: 	movzbl	(%r13,%rsi), %edi
    00000168: 	movq	%rcx, %rsi
    0000016b: 	movzbl	(%r13,%rbx), %ebx
    00000171: 	orq	%r15, %rdx
    00000174: 	shlq	$0x30, %r14
    00000178: 	movzbl	(%r13,%r9), %r9d
    0000017e: 	movzbl	(%r13,%rax), %eax
    00000184: 	shrq	$0x20, %rsi
    00000188: 	orq	%rdx, %r14
    0000018b: 	shlq	$0x20, %rbx
    0000018f: 	movb	%dil, 0x11(%rsp)
    00000194: 	movzbl	(%r13,%r12), %edx
    0000019a: 	shlq	$0x10, %r9
    0000019e: 	movzbl	%sil, %esi
    000001a2: 	shlq	$0x38, %rax
    000001a6: 	movzbl	(%r13,%rsi), %esi
    000001ac: 	shlq	$0x30, %r8
    000001b0: 	shlq	$0x28, %rdx
    000001b4: 	orq	%r14, %rdx
    000001b7: 	movb	%sil, 0x12(%rsp)
    000001bc: 	movq	%rcx, %rsi
    000001bf: 	orq	%rdx, %rbx
    000001c2: 	movzbl	(%r13,%r10), %edx
    000001c8: 	shrq	$0x18, %rsi
    000001cc: 	movzbl	%sil, %esi
    000001d0: 	shlq	$0x18, %rdx
    000001d4: 	movzbl	(%r13,%rsi), %edi
    000001da: 	movq	%rcx, %rsi
    000001dd: 	orq	%rbx, %rdx
    000001e0: 	movq	(%rsp), %rbx
    000001e4: 	shrq	$0x10, %rsi
    000001e8: 	orq	%rdx, %r9
    000001eb: 	movzbl	%sil, %esi
    000001ef: 	movb	%dil, 0x13(%rsp)
    000001f4: 	movzbl	(%r13,%rbx), %edx
    000001fa: 	movzbl	(%r13,%rsi), %edi
    00000200: 	movzbl	%ch, %esi
    00000203: 	movzbl	%cl, %ecx
    00000206: 	movzbl	(%r13,%rcx), %ecx
    0000020c: 	movzbl	(%r13,%rsi), %esi
    00000212: 	shlq	$0x8, %rdx
    00000216: 	movq	0x8(%rsp), %rbx
    0000021b: 	orq	%rdx, %r9
    0000021e: 	movzbl	0x11(%rsp), %edx
    00000223: 	orq	%rcx, %rax
    00000226: 	orq	%r8, %rax
    00000229: 	movq	%r9, (%rbx,%r11)
    0000022d: 	shlq	$0x28, %rdx
    00000231: 	orq	%rdx, %rax
    00000234: 	movzbl	0x12(%rsp), %edx
    00000239: 	shlq	$0x20, %rdx
    0000023d: 	shlq	$0x10, %rdi
    00000241: 	orq	%rdx, %rax
    00000244: 	movzbl	0x13(%rsp), %edx
    00000249: 	shlq	$0x8, %rsi
    0000024d: 	shlq	$0x18, %rdx
    00000251: 	orq	%rdx, %rax
    00000254: 	orq	%rax, %rdi
    00000257: 	orq	%rdi, %rsi
    0000025a: 	movq	%rsi, 0x8(%rbx,%r11)
    0000025f: 	addq	$0x10, %r11
    00000263: 	cmpl	%r11d, 0x14(%rsp)
    00000268: 	jg	.Ltmp148 # Offset: 616
    0000026e: 	movl	0x28(%rsp), %edi
    00000272: 	movl	0x2c(%rsp), %eax
    00000276: 	subl	%edi, %eax
    00000278: 	andl	$-0x10, %eax
    0000027b: 	leal	0x10(%rdi,%rax), %eax
    0000027f: 	cmpl	%eax, 0x18(%rsp)
    00000283: 	jle	.Ltmp147 # Offset: 643
.Ltmp155:
    00000289: 	movslq	%eax, %rdx
    0000028c: 	movq	0x8(%rsp), %rdi
    00000291: 	movl	0x18(%rsp), %ebx
    00000295: 	movzbl	(%rbp,%rdx), %ecx
    0000029a: 	movzbl	(%r13,%rcx), %ecx
    000002a0: 	movb	%cl, (%rdi,%rdx)
    000002a3: 	leal	0x1(%rax), %edx
    000002a6: 	cmpl	%edx, %ebx
    000002a8: 	jle	.Ltmp147 # Offset: 680
    000002ae: 	movslq	%edx, %rdx
    000002b1: 	movzbl	(%rbp,%rdx), %ecx
    000002b6: 	movzbl	(%r13,%rcx), %ecx
    000002bc: 	movb	%cl, (%rdi,%rdx)
    000002bf: 	leal	0x2(%rax), %edx
    000002c2: 	cmpl	%edx, %ebx
    000002c4: 	jle	.Ltmp147 # Offset: 708
    000002ca: 	movslq	%edx, %rdx
    000002cd: 	movzbl	(%rbp,%rdx), %ecx
    000002d2: 	movzbl	(%r13,%rcx), %ecx
    000002d8: 	movb	%cl, (%rdi,%rdx)
    000002db: 	leal	0x3(%rax), %edx
    000002de: 	cmpl	%edx, %ebx
    000002e0: 	jle	.Ltmp147 # Offset: 736
    000002e6: 	movslq	%edx, %rdx
    000002e9: 	movzbl	(%rbp,%rdx), %ecx
    000002ee: 	movzbl	(%r13,%rcx), %ecx
    000002f4: 	movb	%cl, (%rdi,%rdx)
    000002f7: 	leal	0x4(%rax), %edx
    000002fa: 	cmpl	%edx, %ebx
    000002fc: 	jle	.Ltmp147 # Offset: 764
    00000302: 	movslq	%edx, %rdx
    00000305: 	movzbl	(%rbp,%rdx), %ecx
    0000030a: 	movzbl	(%r13,%rcx), %ecx
    00000310: 	movb	%cl, (%rdi,%rdx)
    00000313: 	leal	0x5(%rax), %edx
    00000316: 	cmpl	%edx, %ebx
    00000318: 	jle	.Ltmp147 # Offset: 792
    0000031e: 	movslq	%edx, %rdx
    00000321: 	movzbl	(%rbp,%rdx), %ecx
    00000326: 	movzbl	(%r13,%rcx), %ecx
    0000032c: 	movb	%cl, (%rdi,%rdx)
    0000032f: 	leal	0x6(%rax), %edx
    00000332: 	cmpl	%edx, %ebx
    00000334: 	jle	.Ltmp147 # Offset: 820
    0000033a: 	movslq	%edx, %rdx
    0000033d: 	movzbl	(%rbp,%rdx), %ecx
    00000342: 	movzbl	(%r13,%rcx), %ecx
    00000348: 	movb	%cl, (%rdi,%rdx)
    0000034b: 	leal	0x7(%rax), %edx
    0000034e: 	cmpl	%edx, %ebx
    00000350: 	jle	.Ltmp147 # Offset: 848
    00000356: 	movslq	%edx, %rdx
    00000359: 	movzbl	(%rbp,%rdx), %ecx
    0000035e: 	movzbl	(%r13,%rcx), %ecx
    00000364: 	movb	%cl, (%rdi,%rdx)
    00000367: 	leal	0x8(%rax), %edx
    0000036a: 	cmpl	%edx, %ebx
    0000036c: 	jle	.Ltmp147 # Offset: 876
    00000372: 	movslq	%edx, %rdx
    00000375: 	movzbl	(%rbp,%rdx), %ecx
    0000037a: 	movzbl	(%r13,%rcx), %ecx
    00000380: 	movb	%cl, (%rdi,%rdx)
    00000383: 	leal	0x9(%rax), %edx
    00000386: 	cmpl	%edx, %ebx
    00000388: 	jle	.Ltmp147 # Offset: 904
    0000038e: 	movslq	%edx, %rdx
    00000391: 	movzbl	(%rbp,%rdx), %ecx
    00000396: 	movzbl	(%r13,%rcx), %ecx
    0000039c: 	movb	%cl, (%rdi,%rdx)
    0000039f: 	leal	0xa(%rax), %edx
    000003a2: 	cmpl	%edx, %ebx
    000003a4: 	jle	.Ltmp147 # Offset: 932
    000003aa: 	movslq	%edx, %rdx
    000003ad: 	movzbl	(%rbp,%rdx), %ecx
    000003b2: 	movzbl	(%r13,%rcx), %ecx
    000003b8: 	movb	%cl, (%rdi,%rdx)
    000003bb: 	leal	0xb(%rax), %edx
    000003be: 	cmpl	%edx, %ebx
    000003c0: 	jle	.Ltmp147 # Offset: 960
    000003c2: 	movslq	%edx, %rdx
    000003c5: 	movzbl	(%rbp,%rdx), %ecx
    000003ca: 	movzbl	(%r13,%rcx), %ecx
    000003d0: 	movb	%cl, (%rdi,%rdx)
    000003d3: 	leal	0xc(%rax), %edx
    000003d6: 	cmpl	%edx, %ebx
    000003d8: 	jle	.Ltmp147 # Offset: 984
    000003da: 	movslq	%edx, %rdx
    000003dd: 	movzbl	(%rbp,%rdx), %ecx
    000003e2: 	movzbl	(%r13,%rcx), %ecx
    000003e8: 	movb	%cl, (%rdi,%rdx)
    000003eb: 	leal	0xd(%rax), %edx
    000003ee: 	cmpl	%edx, %ebx
    000003f0: 	jle	.Ltmp147 # Offset: 1008
    000003f2: 	movslq	%edx, %rdx
    000003f5: 	movzbl	(%rbp,%rdx), %ecx
    000003fa: 	movzbl	(%r13,%rcx), %ecx
    00000400: 	movb	%cl, (%rdi,%rdx)
    00000403: 	leal	0xe(%rax), %edx
    00000406: 	cmpl	%edx, %ebx
    00000408: 	jle	.Ltmp147 # Offset: 1032
    0000040a: 	movslq	%edx, %rdx
    0000040d: 	addl	$0xf, %eax
    00000410: 	movzbl	(%rbp,%rdx), %ecx
    00000415: 	movzbl	(%r13,%rcx), %ecx
    0000041b: 	movb	%cl, (%rdi,%rdx)
    0000041e: 	cmpl	%eax, %ebx
    00000420: 	jle	.Ltmp147 # Offset: 1056
    00000422: 	cltq
    00000424: 	movzbl	(%rbp,%rax), %edx
    00000429: 	movzbl	(%r13,%rdx), %edx
    0000042f: 	movb	%dl, (%rdi,%rax)
    00000432: 	nopw	(%rax,%rax) # Size: 6
.Ltmp147:
    00000438: 	addl	$0x1, 0x1c(%rsp)
    0000043d: 	movl	0x1c(%rsp), %eax
    00000441: 	cmpl	%eax, iterations(%rip)
    00000447: 	jg	.Ltmp149 # Offset: 1095
.Ltmp143:
    0000044d: 	callq	clock@PLT # Offset: 1101
    00000452: 	movq	0x38(%rsp), %rdi
    00000457: 	pxor	%xmm0, %xmm0
    0000045b: 	movq	%rax, end_time(%rip)
    00000462: 	subq	start_time(%rip), %rax
    00000469: 	cvtsi2sd	%rax, %xmm0
    0000046e: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000476: 	callq	_Z13record_resultdPKc # Offset: 1142
    0000047b: 	movl	0x18(%rsp), %edi
    0000047f: 	testl	%edi, %edi
    00000481: 	jle	.Ltmp150 # Offset: 1153
    00000483: 	movl	init_value(%rip), %r8d
    0000048a: 	movq	0x8(%rsp), %rax
    0000048f: 	leal	-0x1(%rdi), %edx
    00000492: 	movl	%r8d, %ecx
    00000495: 	leaq	0x1(%rax,%rdx), %rsi
    0000049a: 	jmp	.Ltmp151 # Offset: 1178
    0000049c: 	nopl	(%rax) # Size: 4
.Ltmp152:
    000004a0: 	addq	$0x1, %rax
    000004a4: 	cmpq	%rsi, %rax
    000004a7: 	je	.Ltmp150 # Offset: 1191
.Ltmp151:
    000004a9: 	movzbl	(%rax), %edx
    000004ac: 	cmpb	%cl, %dl
    000004ae: 	je	.Ltmp152 # Offset: 1198
    000004b0: 	movzbl	%dl, %ecx
    000004b3: 	movq	0x38(%rsp), %rdx
    000004b8: 	addq	$0x48, %rsp
    000004bc: 	movl	$0x1, %edi
    000004c1: 	popq	%rbx
    000004c2: 	leaq	DATAat0x8118(%rip), %rsi
    000004c9: 	popq	%rbp
    000004ca: 	xorl	%eax, %eax
    000004cc: 	popq	%r12
    000004ce: 	popq	%r13
    000004d0: 	popq	%r14
    000004d2: 	popq	%r15
    000004d4: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1236
.Ltmp150:
    000004d9: 	addq	$0x48, %rsp
    000004dd: 	popq	%rbx
    000004de: 	popq	%rbp
    000004df: 	popq	%r12
    000004e1: 	popq	%r13
    000004e3: 	popq	%r14
    000004e5: 	popq	%r15
    000004e7: 	retq # Offset: 1255
.Ltmp144:
    000004e8: 	movl	$0x0, 0x28(%rsp)
    000004f0: 	jmp	.Ltmp153 # Offset: 1264
.Ltmp145:
    000004f5: 	movl	0x14(%rsp), %eax
    000004f9: 	movl	$0x0, 0x28(%rsp)
    00000501: 	testl	%eax, %eax
    00000503: 	jg	.Ltmp154 # Offset: 1283
    00000509: 	xorl	%eax, %eax
    0000050b: 	jmp	.Ltmp155 # Offset: 1291
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut6PKhPhiS0_PKc"

Binary Function "_Z9test_lut6PKaPaiS0_PKc" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x4c70
  Size        : 0x508
  MaxSize     : 0x510
  Offset      : 0x4c70
  Section     : .text
  Orc Section : .local.text._Z9test_lut6PKaPaiS0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%edx, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rsi, %rbx
    00000017: 	subq	$0x68, %rsp
    0000001b: 	movq	%rcx, 0x8(%rsp)
    00000020: 	movl	%edx, 0x38(%rsp)
    00000024: 	movq	%r8, 0x58(%rsp)
    00000029: 	callq	clock@PLT # Offset: 41
    0000002e: 	movl	iterations(%rip), %ecx
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	testl	%ecx, %ecx
    0000003d: 	jle	.Ltmp156 # Offset: 61
    00000043: 	movq	%rbx, %rax
    00000046: 	movq	0x8(%rsp), %r8
    0000004b: 	movq	%rbx, %rdi
    0000004e: 	movq	%r12, %rsi
    00000051: 	andl	$0x7, %eax
    00000054: 	movl	$0x0, 0x3c(%rsp)
    0000005c: 	movq	%rax, 0x40(%rsp)
    00000061: 	leal	-0xf(%r14), %eax
    00000065: 	movl	%eax, 0x34(%rsp)
    00000069: 	movslq	%r14d, %rax
    0000006c: 	movq	%rax, 0x50(%rsp)
    00000071: 	leal	-0x10(%r14), %eax
    00000075: 	movl	%eax, 0x4c(%rsp)
    00000079: 	nopl	(%rax) # Size: 7
.Ltmp162:
    00000080: 	movl	0x38(%rsp), %edx
    00000084: 	testl	%edx, %edx
    00000086: 	jle	.Ltmp157 # Offset: 134
    0000008c: 	xorl	%eax, %eax
    0000008e: 	cmpq	$0x0, 0x40(%rsp)
    00000094: 	movq	0x50(%rsp), %rcx
    00000099: 	je	.Ltmp158 # Offset: 153
    0000009f: 	nop # Size: 1
.Ltmp159:
    000000a0: 	movsbq	(%rsi,%rax), %rdx
    000000a5: 	movzbl	(%r8,%rdx), %edx
    000000aa: 	movb	%dl, (%rdi,%rax)
    000000ad: 	addq	$0x1, %rax
    000000b1: 	cmpq	%rcx, %rax
    000000b4: 	jne	.Ltmp159 # Offset: 180
    000000b6: 	movl	0x38(%rsp), %eax
    000000ba: 	movl	%eax, 0x48(%rsp)
.Ltmp166:
    000000be: 	movl	0x34(%rsp), %ecx
    000000c2: 	cmpl	%ecx, 0x48(%rsp)
    000000c6: 	jge	.Ltmp160 # Offset: 198
.Ltmp167:
    000000cc: 	movslq	0x48(%rsp), %rcx
    000000d1: 	movq	%rdi, %r14
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp161:
    000000d8: 	movq	(%rsi,%rcx), %rax
    000000dc: 	movq	0x8(%rsi,%rcx), %rdx
    000000e1: 	movq	%rax, %r10
    000000e4: 	movq	%rdx, %r13
    000000e7: 	movq	%rax, %rbx
    000000ea: 	movq	%rdx, %r12
    000000ed: 	shrq	$0x20, %r10
    000000f1: 	shrq	$0x30, %r13
    000000f5: 	movq	%rax, %r9
    000000f8: 	movq	%rax, %rdi
    000000fb: 	sarq	$0x38, %rbx
    000000ff: 	movsbq	%r10b, %r15
    00000103: 	movq	%rax, %r10
    00000106: 	movsbq	%r13b, %r13
    0000010a: 	shrq	$0x18, %r10
    0000010e: 	movq	%r15, 0x10(%rsp)
    00000113: 	movq	%rdx, %r15
    00000116: 	shrq	$0x28, %r12
    0000011a: 	sarq	$0x38, %r15
    0000011e: 	movsbq	%r10b, %r11
    00000122: 	movq	%rax, %r10
    00000125: 	movsbq	(%r8,%r13), %r13
    0000012a: 	shrq	$0x10, %r10
    0000012e: 	movq	%r11, 0x18(%rsp)
    00000133: 	movq	%rdx, %r11
    00000136: 	movsbq	%r12b, %r12
    0000013a: 	movsbq	%r10b, %r10
    0000013e: 	movsbq	(%r8,%r15), %r15
    00000143: 	shrq	$0x18, %r11
    00000147: 	movq	%rbx, 0x8(%rsp)
    0000014c: 	movq	%r10, 0x20(%rsp)
    00000151: 	movq	%rax, %r10
    00000154: 	movsbq	%r11b, %rbx
    00000158: 	movq	%rdx, %r11
    0000015b: 	shrq	$0x8, %r10
    0000015f: 	movsbq	(%r8,%r12), %r12
    00000164: 	shlq	$0x38, %r15
    00000168: 	movsbq	(%r8,%rbx), %rbx
    0000016d: 	shlq	$0x30, %r13
    00000171: 	movsbq	%r10b, %rbp
    00000175: 	movq	%rdx, %r10
    00000178: 	shrq	$0x10, %r11
    0000017c: 	movq	%rbp, 0x28(%rsp)
    00000181: 	movq	%rdx, %rbp
    00000184: 	movsbq	%dl, %rdx
    00000188: 	orq	%r15, %r13
    0000018b: 	shrq	$0x20, %rbp
    0000018f: 	shlq	$0x28, %r12
    00000193: 	movsbq	%r11b, %r11
    00000197: 	movsbq	%al, %rax
    0000019b: 	movsbq	(%r8,%rdx), %rdx
    000001a0: 	shlq	$0x18, %rbx
    000001a4: 	movsbq	%bpl, %rbp
    000001a8: 	shrq	$0x8, %r10
    000001ac: 	movsbq	%r10b, %r10
    000001b0: 	shrq	$0x30, %r9
    000001b4: 	movsbq	(%r8,%rax), %rax
    000001b9: 	movq	0x10(%rsp), %r15
    000001be: 	orq	%r13, %rdx
    000001c1: 	movsbq	(%r8,%r10), %r10
    000001c6: 	movsbq	%r9b, %r9
    000001ca: 	shrq	$0x28, %rdi
    000001ce: 	orq	%rdx, %r12
    000001d1: 	movsbq	(%r8,%rbp), %rdx
    000001d6: 	movsbq	(%r8,%r9), %r9
    000001db: 	movsbq	%dil, %rdi
    000001df: 	shlq	$0x8, %r10
    000001e3: 	movsbq	(%r8,%rdi), %rdi
    000001e8: 	movq	0x28(%rsp), %rbp
    000001ed: 	shlq	$0x20, %rdx
    000001f1: 	shlq	$0x30, %r9
    000001f5: 	orq	%r12, %rdx
    000001f8: 	orq	%rdx, %rbx
    000001fb: 	movsbq	(%r8,%r11), %rdx
    00000200: 	movq	0x18(%rsp), %r11
    00000205: 	shlq	$0x10, %rdx
    00000209: 	orq	%rbx, %rdx
    0000020c: 	movq	0x8(%rsp), %rbx
    00000211: 	orq	%r10, %rdx
    00000214: 	movsbq	(%r8,%rbx), %r10
    00000219: 	shlq	$0x38, %r10
    0000021d: 	orq	%r10, %r9
    00000220: 	movq	0x20(%rsp), %r10
    00000225: 	orq	%r9, %rax
    00000228: 	shlq	$0x28, %rdi
    0000022c: 	orq	%rdi, %rax
    0000022f: 	movsbq	(%r8,%r15), %rdi
    00000234: 	shlq	$0x20, %rdi
    00000238: 	orq	%rdi, %rax
    0000023b: 	movsbq	(%r8,%r11), %rdi
    00000240: 	shlq	$0x18, %rdi
    00000244: 	orq	%rdi, %rax
    00000247: 	movsbq	(%r8,%r10), %rdi
    0000024c: 	shlq	$0x10, %rdi
    00000250: 	orq	%rdi, %rax
    00000253: 	movsbq	(%r8,%rbp), %rdi
    00000258: 	movq	%rdx, 0x8(%r14,%rcx)
    0000025d: 	shlq	$0x8, %rdi
    00000261: 	orq	%rdi, %rax
    00000264: 	movq	%rax, (%r14,%rcx)
    00000268: 	addq	$0x10, %rcx
    0000026c: 	cmpl	%ecx, 0x34(%rsp)
    00000270: 	jg	.Ltmp161 # Offset: 624
    00000276: 	movl	0x48(%rsp), %ecx
    0000027a: 	movl	0x4c(%rsp), %eax
    0000027e: 	movq	%r14, %rdi
    00000281: 	subl	%ecx, %eax
    00000283: 	andl	$-0x10, %eax
    00000286: 	leal	0x10(%rcx,%rax), %eax
    0000028a: 	cmpl	%eax, 0x38(%rsp)
    0000028e: 	jle	.Ltmp160 # Offset: 654
.Ltmp168:
    00000294: 	movslq	%eax, %rdx
    00000297: 	movl	0x38(%rsp), %ebx
    0000029b: 	movsbq	(%rsi,%rdx), %rcx
    000002a0: 	movzbl	(%r8,%rcx), %ecx
    000002a5: 	movb	%cl, (%rdi,%rdx)
    000002a8: 	leal	0x1(%rax), %edx
    000002ab: 	cmpl	%edx, %ebx
    000002ad: 	jle	.Ltmp160 # Offset: 685
    000002b3: 	movslq	%edx, %rdx
    000002b6: 	movsbq	(%rsi,%rdx), %rcx
    000002bb: 	movzbl	(%r8,%rcx), %ecx
    000002c0: 	movb	%cl, (%rdi,%rdx)
    000002c3: 	leal	0x2(%rax), %edx
    000002c6: 	cmpl	%edx, %ebx
    000002c8: 	jle	.Ltmp160 # Offset: 712
    000002ce: 	movslq	%edx, %rdx
    000002d1: 	movsbq	(%rsi,%rdx), %rcx
    000002d6: 	movzbl	(%r8,%rcx), %ecx
    000002db: 	movb	%cl, (%rdi,%rdx)
    000002de: 	leal	0x3(%rax), %edx
    000002e1: 	cmpl	%edx, %ebx
    000002e3: 	jle	.Ltmp160 # Offset: 739
    000002e9: 	movslq	%edx, %rdx
    000002ec: 	movsbq	(%rsi,%rdx), %rcx
    000002f1: 	movzbl	(%r8,%rcx), %ecx
    000002f6: 	movb	%cl, (%rdi,%rdx)
    000002f9: 	leal	0x4(%rax), %edx
    000002fc: 	cmpl	%edx, %ebx
    000002fe: 	jle	.Ltmp160 # Offset: 766
    00000304: 	movslq	%edx, %rdx
    00000307: 	movsbq	(%rsi,%rdx), %rcx
    0000030c: 	movzbl	(%r8,%rcx), %ecx
    00000311: 	movb	%cl, (%rdi,%rdx)
    00000314: 	leal	0x5(%rax), %edx
    00000317: 	cmpl	%edx, %ebx
    00000319: 	jle	.Ltmp160 # Offset: 793
    0000031f: 	movslq	%edx, %rdx
    00000322: 	movsbq	(%rsi,%rdx), %rcx
    00000327: 	movzbl	(%r8,%rcx), %ecx
    0000032c: 	movb	%cl, (%rdi,%rdx)
    0000032f: 	leal	0x6(%rax), %edx
    00000332: 	cmpl	%edx, %ebx
    00000334: 	jle	.Ltmp160 # Offset: 820
    0000033a: 	movslq	%edx, %rdx
    0000033d: 	movsbq	(%rsi,%rdx), %rcx
    00000342: 	movzbl	(%r8,%rcx), %ecx
    00000347: 	movb	%cl, (%rdi,%rdx)
    0000034a: 	leal	0x7(%rax), %edx
    0000034d: 	cmpl	%edx, %ebx
    0000034f: 	jle	.Ltmp160 # Offset: 847
    00000355: 	movslq	%edx, %rdx
    00000358: 	movsbq	(%rsi,%rdx), %rcx
    0000035d: 	movzbl	(%r8,%rcx), %ecx
    00000362: 	movb	%cl, (%rdi,%rdx)
    00000365: 	leal	0x8(%rax), %edx
    00000368: 	cmpl	%edx, %ebx
    0000036a: 	jle	.Ltmp160 # Offset: 874
    00000370: 	movslq	%edx, %rdx
    00000373: 	movsbq	(%rsi,%rdx), %rcx
    00000378: 	movzbl	(%r8,%rcx), %ecx
    0000037d: 	movb	%cl, (%rdi,%rdx)
    00000380: 	leal	0x9(%rax), %edx
    00000383: 	cmpl	%edx, %ebx
    00000385: 	jle	.Ltmp160 # Offset: 901
    0000038b: 	movslq	%edx, %rdx
    0000038e: 	movsbq	(%rsi,%rdx), %rcx
    00000393: 	movzbl	(%r8,%rcx), %ecx
    00000398: 	movb	%cl, (%rdi,%rdx)
    0000039b: 	leal	0xa(%rax), %edx
    0000039e: 	cmpl	%edx, %ebx
    000003a0: 	jle	.Ltmp160 # Offset: 928
    000003a6: 	movslq	%edx, %rdx
    000003a9: 	movsbq	(%rsi,%rdx), %rcx
    000003ae: 	movzbl	(%r8,%rcx), %ecx
    000003b3: 	movb	%cl, (%rdi,%rdx)
    000003b6: 	leal	0xb(%rax), %edx
    000003b9: 	cmpl	%edx, %ebx
    000003bb: 	jle	.Ltmp160 # Offset: 955
    000003bd: 	movslq	%edx, %rdx
    000003c0: 	movsbq	(%rsi,%rdx), %rcx
    000003c5: 	movzbl	(%r8,%rcx), %ecx
    000003ca: 	movb	%cl, (%rdi,%rdx)
    000003cd: 	leal	0xc(%rax), %edx
    000003d0: 	cmpl	%edx, %ebx
    000003d2: 	jle	.Ltmp160 # Offset: 978
    000003d4: 	movslq	%edx, %rdx
    000003d7: 	movsbq	(%rsi,%rdx), %rcx
    000003dc: 	movzbl	(%r8,%rcx), %ecx
    000003e1: 	movb	%cl, (%rdi,%rdx)
    000003e4: 	leal	0xd(%rax), %edx
    000003e7: 	cmpl	%edx, %ebx
    000003e9: 	jle	.Ltmp160 # Offset: 1001
    000003eb: 	movslq	%edx, %rdx
    000003ee: 	movsbq	(%rsi,%rdx), %rcx
    000003f3: 	movzbl	(%r8,%rcx), %ecx
    000003f8: 	movb	%cl, (%rdi,%rdx)
    000003fb: 	leal	0xe(%rax), %edx
    000003fe: 	cmpl	%edx, %ebx
    00000400: 	jle	.Ltmp160 # Offset: 1024
    00000402: 	movslq	%edx, %rdx
    00000405: 	addl	$0xf, %eax
    00000408: 	movsbq	(%rsi,%rdx), %rcx
    0000040d: 	movzbl	(%r8,%rcx), %ecx
    00000412: 	movb	%cl, (%rdi,%rdx)
    00000415: 	cmpl	%eax, %ebx
    00000417: 	jle	.Ltmp160 # Offset: 1047
    00000419: 	cltq
    0000041b: 	movsbq	(%rsi,%rax), %rdx
    00000420: 	movzbl	(%r8,%rdx), %edx
    00000425: 	movb	%dl, (%rdi,%rax)
    00000428: 	nopl	(%rax,%rax) # Size: 8
.Ltmp160:
    00000430: 	addl	$0x1, 0x3c(%rsp)
    00000435: 	movl	0x3c(%rsp), %eax
    00000439: 	cmpl	%eax, iterations(%rip)
    0000043f: 	jg	.Ltmp162 # Offset: 1087
    00000445: 	movq	%rdi, %rbx
.Ltmp156:
    00000448: 	callq	clock@PLT # Offset: 1096
    0000044d: 	movq	0x58(%rsp), %rdi
    00000452: 	pxor	%xmm0, %xmm0
    00000456: 	movq	%rax, end_time(%rip)
    0000045d: 	subq	start_time(%rip), %rax
    00000464: 	cvtsi2sd	%rax, %xmm0
    00000469: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000471: 	callq	_Z13record_resultdPKc # Offset: 1137
    00000476: 	movl	0x38(%rsp), %esi
    0000047a: 	testl	%esi, %esi
    0000047c: 	jle	.Ltmp163 # Offset: 1148
    0000047e: 	movl	init_value(%rip), %r8d
    00000485: 	leal	-0x1(%rsi), %edx
    00000488: 	movq	%rbx, %rax
    0000048b: 	leaq	0x1(%rbx,%rdx), %rsi
    00000490: 	movl	%r8d, %ecx
    00000493: 	jmp	.Ltmp164 # Offset: 1171
    00000495: 	nopl	(%rax) # Size: 3
.Ltmp165:
    00000498: 	addq	$0x1, %rax
    0000049c: 	cmpq	%rsi, %rax
    0000049f: 	je	.Ltmp163 # Offset: 1183
.Ltmp164:
    000004a1: 	movzbl	(%rax), %edx
    000004a4: 	cmpb	%cl, %dl
    000004a6: 	je	.Ltmp165 # Offset: 1190
    000004a8: 	movsbl	%dl, %ecx
    000004ab: 	movq	0x58(%rsp), %rdx
    000004b0: 	addq	$0x68, %rsp
    000004b4: 	movl	$0x1, %edi
    000004b9: 	popq	%rbx
    000004ba: 	leaq	DATAat0x8118(%rip), %rsi
    000004c1: 	popq	%rbp
    000004c2: 	xorl	%eax, %eax
    000004c4: 	popq	%r12
    000004c6: 	popq	%r13
    000004c8: 	popq	%r14
    000004ca: 	popq	%r15
    000004cc: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1228
.Ltmp163:
    000004d1: 	addq	$0x68, %rsp
    000004d5: 	popq	%rbx
    000004d6: 	popq	%rbp
    000004d7: 	popq	%r12
    000004d9: 	popq	%r13
    000004db: 	popq	%r14
    000004dd: 	popq	%r15
    000004df: 	retq # Offset: 1247
.Ltmp157:
    000004e0: 	movl	$0x0, 0x48(%rsp)
    000004e8: 	jmp	.Ltmp166 # Offset: 1256
.Ltmp158:
    000004ed: 	movl	0x34(%rsp), %eax
    000004f1: 	movl	$0x0, 0x48(%rsp)
    000004f9: 	testl	%eax, %eax
    000004fb: 	jg	.Ltmp167 # Offset: 1275
    00000501: 	xorl	%eax, %eax
    00000503: 	jmp	.Ltmp168 # Offset: 1283
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut6PKaPaiS0_PKc"

Binary Function "_Z9test_lut6PKtPtiS0_PKc" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x5180
  Size        : 0x3df
  MaxSize     : 0x3e0
  Offset      : 0x5180
  Section     : .text
  Orc Section : .local.text._Z9test_lut6PKtPtiS0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%edx, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rcx, %rbx
    0000001a: 	subq	$0x28, %rsp
    0000001e: 	movq	%r8, 0x18(%rsp)
    00000023: 	callq	clock@PLT # Offset: 35
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	movl	iterations(%rip), %eax
    00000035: 	movl	%eax, 0x10(%rsp)
    00000039: 	testl	%eax, %eax
    0000003b: 	jle	.Ltmp169 # Offset: 59
    00000041: 	movq	%rbp, %rax
    00000044: 	movl	$0x0, (%rsp)
    0000004b: 	leal	-0xf(%r13), %r14d
    0000004f: 	movslq	%r13d, %r15
    00000052: 	andl	$0x7, %eax
    00000055: 	movq	%rax, 0x8(%rsp)
    0000005a: 	leal	-0x10(%r13), %eax
    0000005e: 	movl	%eax, 0x14(%rsp)
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp175:
    00000068: 	testl	%r13d, %r13d
    0000006b: 	jle	.Ltmp170 # Offset: 107
    00000071: 	xorl	%eax, %eax
    00000073: 	cmpq	$0x0, 0x8(%rsp)
    00000079: 	je	.Ltmp171 # Offset: 121
    0000007f: 	nop # Size: 1
.Ltmp172:
    00000080: 	movzwl	(%r12,%rax,2), %edx
    00000085: 	movzwl	(%rbx,%rdx,2), %edx
    00000089: 	movw	%dx, (%rbp,%rax,2)
    0000008e: 	addq	$0x1, %rax
    00000092: 	cmpq	%rax, %r15
    00000095: 	jne	.Ltmp172 # Offset: 149
    00000097: 	movl	%r13d, 0x4(%rsp)
.Ltmp179:
    0000009c: 	cmpl	%r14d, 0x4(%rsp)
    000000a1: 	jge	.Ltmp173 # Offset: 161
.Ltmp180:
    000000a7: 	movslq	0x4(%rsp), %rdx
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp174:
    000000b0: 	movq	0x10(%r12,%rdx,2), %r8
    000000b5: 	movq	(%r12,%rdx,2), %rcx
    000000b9: 	movq	%r8, %rsi
    000000bc: 	movq	%rcx, %r11
    000000bf: 	movq	%rcx, %r10
    000000c2: 	movq	%r8, %rax
    000000c5: 	shrq	$0x20, %rsi
    000000c9: 	movq	%rcx, %r9
    000000cc: 	shrq	$0x30, %r11
    000000d0: 	movzwl	%cx, %ecx
    000000d3: 	movzwl	%si, %esi
    000000d6: 	shrq	$0x20, %r10
    000000da: 	movzwl	(%rbx,%r11,2), %r11d
    000000df: 	movzwl	(%rbx,%rcx,2), %ecx
    000000e3: 	movzwl	(%rbx,%rsi,2), %edi
    000000e7: 	shrq	$0x30, %rax
    000000eb: 	movq	%r8, %rsi
    000000ee: 	movzwl	%r10w, %r10d
    000000f2: 	movzwl	(%rbx,%rax,2), %eax
    000000f6: 	shrq	$0x10, %r9
    000000fa: 	shrq	$0x10, %rsi
    000000fe: 	movzwl	%r8w, %r8d
    00000102: 	movzwl	(%rbx,%r8,2), %r8d
    00000107: 	movzwl	%r9w, %r9d
    0000010b: 	movzwl	%si, %esi
    0000010e: 	shlq	$0x30, %r11
    00000112: 	movzwl	(%rbx,%r10,2), %r10d
    00000117: 	movzwl	(%rbx,%rsi,2), %esi
    0000011b: 	shlq	$0x30, %rax
    0000011f: 	orq	%r11, %rcx
    00000122: 	movzwl	(%rbx,%r9,2), %r9d
    00000127: 	orq	%r8, %rax
    0000012a: 	shlq	$0x20, %rdi
    0000012e: 	shlq	$0x20, %r10
    00000132: 	orq	%rdi, %rax
    00000135: 	shlq	$0x10, %rsi
    00000139: 	orq	%r10, %rcx
    0000013c: 	shlq	$0x10, %r9
    00000140: 	orq	%rsi, %rax
    00000143: 	orq	%r9, %rcx
    00000146: 	movq	%rax, 0x10(%rbp,%rdx,2)
    0000014b: 	movq	%rcx, (%rbp,%rdx,2)
    00000150: 	addq	$0x10, %rdx
    00000154: 	cmpl	%edx, %r14d
    00000157: 	jg	.Ltmp174 # Offset: 343
    0000015d: 	movl	0x4(%rsp), %edi
    00000161: 	movl	0x14(%rsp), %eax
    00000165: 	subl	%edi, %eax
    00000167: 	andl	$-0x10, %eax
    0000016a: 	leal	0x10(%rdi,%rax), %edx
    0000016e: 	cmpl	%edx, %r13d
    00000171: 	jle	.Ltmp173 # Offset: 369
.Ltmp181:
    00000177: 	movslq	%edx, %rcx
    0000017a: 	movzwl	(%r12,%rcx,2), %esi
    0000017f: 	leaq	(%rcx,%rcx), %rax
    00000183: 	movzwl	(%rbx,%rsi,2), %esi
    00000187: 	movw	%si, (%rbp,%rcx,2)
    0000018c: 	leal	0x1(%rdx), %ecx
    0000018f: 	cmpl	%ecx, %r13d
    00000192: 	jle	.Ltmp173 # Offset: 402
    00000198: 	movzwl	0x2(%r12,%rax), %ecx
    0000019e: 	movzwl	(%rbx,%rcx,2), %ecx
    000001a2: 	movw	%cx, 0x2(%rbp,%rax)
    000001a7: 	leal	0x2(%rdx), %ecx
    000001aa: 	cmpl	%ecx, %r13d
    000001ad: 	jle	.Ltmp173 # Offset: 429
    000001b3: 	movzwl	0x4(%r12,%rax), %ecx
    000001b9: 	movzwl	(%rbx,%rcx,2), %ecx
    000001bd: 	movw	%cx, 0x4(%rbp,%rax)
    000001c2: 	leal	0x3(%rdx), %ecx
    000001c5: 	cmpl	%ecx, %r13d
    000001c8: 	jle	.Ltmp173 # Offset: 456
    000001ce: 	movzwl	0x6(%r12,%rax), %ecx
    000001d4: 	movzwl	(%rbx,%rcx,2), %ecx
    000001d8: 	movw	%cx, 0x6(%rbp,%rax)
    000001dd: 	leal	0x4(%rdx), %ecx
    000001e0: 	cmpl	%ecx, %r13d
    000001e3: 	jle	.Ltmp173 # Offset: 483
    000001e9: 	movzwl	0x8(%r12,%rax), %ecx
    000001ef: 	movzwl	(%rbx,%rcx,2), %ecx
    000001f3: 	movw	%cx, 0x8(%rbp,%rax)
    000001f8: 	leal	0x5(%rdx), %ecx
    000001fb: 	cmpl	%ecx, %r13d
    000001fe: 	jle	.Ltmp173 # Offset: 510
    00000204: 	movzwl	0xa(%r12,%rax), %ecx
    0000020a: 	movzwl	(%rbx,%rcx,2), %ecx
    0000020e: 	movw	%cx, 0xa(%rbp,%rax)
    00000213: 	leal	0x6(%rdx), %ecx
    00000216: 	cmpl	%ecx, %r13d
    00000219: 	jle	.Ltmp173 # Offset: 537
    0000021f: 	movzwl	0xc(%r12,%rax), %ecx
    00000225: 	movzwl	(%rbx,%rcx,2), %ecx
    00000229: 	movw	%cx, 0xc(%rbp,%rax)
    0000022e: 	leal	0x7(%rdx), %ecx
    00000231: 	cmpl	%ecx, %r13d
    00000234: 	jle	.Ltmp173 # Offset: 564
    0000023a: 	movzwl	0xe(%r12,%rax), %ecx
    00000240: 	movzwl	(%rbx,%rcx,2), %ecx
    00000244: 	movw	%cx, 0xe(%rbp,%rax)
    00000249: 	leal	0x8(%rdx), %ecx
    0000024c: 	cmpl	%ecx, %r13d
    0000024f: 	jle	.Ltmp173 # Offset: 591
    00000255: 	movzwl	0x10(%r12,%rax), %ecx
    0000025b: 	movzwl	(%rbx,%rcx,2), %ecx
    0000025f: 	movw	%cx, 0x10(%rbp,%rax)
    00000264: 	leal	0x9(%rdx), %ecx
    00000267: 	cmpl	%ecx, %r13d
    0000026a: 	jle	.Ltmp173 # Offset: 618
    00000270: 	movzwl	0x12(%r12,%rax), %ecx
    00000276: 	movzwl	(%rbx,%rcx,2), %ecx
    0000027a: 	movw	%cx, 0x12(%rbp,%rax)
    0000027f: 	leal	0xa(%rdx), %ecx
    00000282: 	cmpl	%ecx, %r13d
    00000285: 	jle	.Ltmp173 # Offset: 645
    0000028b: 	movzwl	0x14(%r12,%rax), %ecx
    00000291: 	movzwl	(%rbx,%rcx,2), %ecx
    00000295: 	movw	%cx, 0x14(%rbp,%rax)
    0000029a: 	leal	0xb(%rdx), %ecx
    0000029d: 	cmpl	%ecx, %r13d
    000002a0: 	jle	.Ltmp173 # Offset: 672
    000002a2: 	movzwl	0x16(%r12,%rax), %ecx
    000002a8: 	movzwl	(%rbx,%rcx,2), %ecx
    000002ac: 	movw	%cx, 0x16(%rbp,%rax)
    000002b1: 	leal	0xc(%rdx), %ecx
    000002b4: 	cmpl	%ecx, %r13d
    000002b7: 	jle	.Ltmp173 # Offset: 695
    000002b9: 	movzwl	0x18(%r12,%rax), %ecx
    000002bf: 	movzwl	(%rbx,%rcx,2), %ecx
    000002c3: 	movw	%cx, 0x18(%rbp,%rax)
    000002c8: 	leal	0xd(%rdx), %ecx
    000002cb: 	cmpl	%ecx, %r13d
    000002ce: 	jle	.Ltmp173 # Offset: 718
    000002d0: 	movzwl	0x1a(%r12,%rax), %ecx
    000002d6: 	movzwl	(%rbx,%rcx,2), %ecx
    000002da: 	movw	%cx, 0x1a(%rbp,%rax)
    000002df: 	leal	0xe(%rdx), %ecx
    000002e2: 	cmpl	%ecx, %r13d
    000002e5: 	jle	.Ltmp173 # Offset: 741
    000002e7: 	movzwl	0x1c(%r12,%rax), %ecx
    000002ed: 	addl	$0xf, %edx
    000002f0: 	movzwl	(%rbx,%rcx,2), %ecx
    000002f4: 	movw	%cx, 0x1c(%rbp,%rax)
    000002f9: 	cmpl	%edx, %r13d
    000002fc: 	jle	.Ltmp173 # Offset: 764
    000002fe: 	movzwl	0x1e(%r12,%rax), %edx
    00000304: 	movzwl	(%rbx,%rdx,2), %edx
    00000308: 	movw	%dx, 0x1e(%rbp,%rax)
    0000030d: 	nopl	(%rax) # Size: 3
.Ltmp173:
    00000310: 	addl	$0x1, (%rsp)
    00000314: 	movl	(%rsp), %eax
    00000317: 	cmpl	0x10(%rsp), %eax
    0000031b: 	jne	.Ltmp175 # Offset: 795
.Ltmp169:
    00000321: 	callq	clock@PLT # Offset: 801
    00000326: 	movq	0x18(%rsp), %rdi
    0000032b: 	pxor	%xmm0, %xmm0
    0000032f: 	movq	%rax, end_time(%rip)
    00000336: 	subq	start_time(%rip), %rax
    0000033d: 	cvtsi2sd	%rax, %xmm0
    00000342: 	divsd	DATAat0x90d0(%rip), %xmm0
    0000034a: 	callq	_Z13record_resultdPKc # Offset: 842
    0000034f: 	testl	%r13d, %r13d
    00000352: 	jle	.Ltmp176 # Offset: 850
    00000354: 	movl	init_value(%rip), %r8d
    0000035b: 	leal	-0x1(%r13), %eax
    0000035f: 	leaq	0x2(%rbp,%rax,2), %rcx
    00000364: 	movl	%r8d, %edx
    00000367: 	jmp	.Ltmp177 # Offset: 871
    00000369: 	nopl	(%rax) # Size: 7
.Ltmp178:
    00000370: 	addq	$0x2, %rbp
    00000374: 	cmpq	%rbp, %rcx
    00000377: 	je	.Ltmp176 # Offset: 887
.Ltmp177:
    00000379: 	movzwl	(%rbp), %eax
    0000037d: 	cmpw	%dx, %ax
    00000380: 	je	.Ltmp178 # Offset: 896
    00000382: 	movq	0x18(%rsp), %rdx
    00000387: 	addq	$0x28, %rsp
    0000038b: 	movzwl	%ax, %ecx
    0000038e: 	leaq	DATAat0x8118(%rip), %rsi
    00000395: 	popq	%rbx
    00000396: 	movl	$0x1, %edi
    0000039b: 	popq	%rbp
    0000039c: 	xorl	%eax, %eax
    0000039e: 	popq	%r12
    000003a0: 	popq	%r13
    000003a2: 	popq	%r14
    000003a4: 	popq	%r15
    000003a6: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 934
.Ltmp176:
    000003ab: 	addq	$0x28, %rsp
    000003af: 	popq	%rbx
    000003b0: 	popq	%rbp
    000003b1: 	popq	%r12
    000003b3: 	popq	%r13
    000003b5: 	popq	%r14
    000003b7: 	popq	%r15
    000003b9: 	retq # Offset: 953
.Ltmp170:
    000003ba: 	movl	$0x0, 0x4(%rsp)
    000003c2: 	jmp	.Ltmp179 # Offset: 962
.Ltmp171:
    000003c7: 	movl	$0x0, 0x4(%rsp)
    000003cf: 	xorl	%edx, %edx
    000003d1: 	testl	%r14d, %r14d
    000003d4: 	jg	.Ltmp180 # Offset: 980
    000003da: 	jmp	.Ltmp181 # Offset: 986
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut6PKtPtiS0_PKc"

Binary Function "_Z9test_lut6PKsPsiS0_PKc" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x5560
  Size        : 0x3e7
  MaxSize     : 0x3f0
  Offset      : 0x5560
  Section     : .text
  Orc Section : .local.text._Z9test_lut6PKsPsiS0_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%edx, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rcx, %rbx
    0000001a: 	subq	$0x28, %rsp
    0000001e: 	movq	%r8, 0x18(%rsp)
    00000023: 	callq	clock@PLT # Offset: 35
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	movl	iterations(%rip), %eax
    00000035: 	movl	%eax, 0x10(%rsp)
    00000039: 	testl	%eax, %eax
    0000003b: 	jle	.Ltmp182 # Offset: 59
    00000041: 	movq	%rbp, %rax
    00000044: 	movl	$0x0, (%rsp)
    0000004b: 	leal	-0xf(%r13), %r14d
    0000004f: 	movslq	%r13d, %r15
    00000052: 	andl	$0x7, %eax
    00000055: 	movq	%rax, 0x8(%rsp)
    0000005a: 	leal	-0x10(%r13), %eax
    0000005e: 	movl	%eax, 0x14(%rsp)
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp188:
    00000068: 	testl	%r13d, %r13d
    0000006b: 	jle	.Ltmp183 # Offset: 107
    00000071: 	xorl	%eax, %eax
    00000073: 	cmpq	$0x0, 0x8(%rsp)
    00000079: 	je	.Ltmp184 # Offset: 121
    0000007f: 	nop # Size: 1
.Ltmp185:
    00000080: 	movswq	(%r12,%rax,2), %rdx
    00000085: 	movzwl	(%rbx,%rdx,2), %edx
    00000089: 	movw	%dx, (%rbp,%rax,2)
    0000008e: 	addq	$0x1, %rax
    00000092: 	cmpq	%rax, %r15
    00000095: 	jne	.Ltmp185 # Offset: 149
    00000097: 	movl	%r13d, 0x4(%rsp)
.Ltmp192:
    0000009c: 	cmpl	%r14d, 0x4(%rsp)
    000000a1: 	jge	.Ltmp186 # Offset: 161
.Ltmp193:
    000000a7: 	movslq	0x4(%rsp), %rax
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp187:
    000000b0: 	movq	(%r12,%rax,2), %rdi
    000000b4: 	movq	0x10(%r12,%rax,2), %r10
    000000b9: 	movq	%rdi, %r8
    000000bc: 	movq	%r10, %r11
    000000bf: 	movq	%rdi, %rcx
    000000c2: 	movq	%r10, %rdx
    000000c5: 	shrq	$0x20, %r8
    000000c9: 	shrq	$0x20, %r11
    000000cd: 	movq	%rdi, %rsi
    000000d0: 	movq	%r10, %r9
    000000d3: 	sarq	$0x30, %rcx
    000000d7: 	movswq	%r8w, %r8
    000000db: 	sarq	$0x30, %rdx
    000000df: 	movswq	%r11w, %r11
    000000e3: 	movswq	(%rbx,%rdx,2), %rdx
    000000e8: 	movswq	(%rbx,%r11,2), %r11
    000000ed: 	shrq	$0x10, %rsi
    000000f1: 	shrq	$0x10, %r9
    000000f5: 	movswq	%si, %rsi
    000000f9: 	movswq	%di, %rdi
    000000fd: 	movswq	%r9w, %r9
    00000101: 	movswq	%r10w, %r10
    00000105: 	movswq	(%rbx,%rcx,2), %rcx
    0000010a: 	movswq	(%rbx,%r8,2), %r8
    0000010f: 	shlq	$0x30, %rdx
    00000113: 	shlq	$0x20, %r11
    00000117: 	movswq	(%rbx,%r10,2), %r10
    0000011c: 	movswq	(%rbx,%r9,2), %r9
    00000121: 	orq	%r11, %rdx
    00000124: 	movswq	(%rbx,%rdi,2), %rdi
    00000129: 	movswq	(%rbx,%rsi,2), %rsi
    0000012e: 	shlq	$0x30, %rcx
    00000132: 	shlq	$0x20, %r8
    00000136: 	orq	%r8, %rcx
    00000139: 	orq	%r10, %rdx
    0000013c: 	shlq	$0x10, %r9
    00000140: 	orq	%rdi, %rcx
    00000143: 	shlq	$0x10, %rsi
    00000147: 	orq	%r9, %rdx
    0000014a: 	orq	%rsi, %rcx
    0000014d: 	movq	%rdx, 0x10(%rbp,%rax,2)
    00000152: 	movq	%rcx, (%rbp,%rax,2)
    00000157: 	addq	$0x10, %rax
    0000015b: 	cmpl	%eax, %r14d
    0000015e: 	jg	.Ltmp187 # Offset: 350
    00000164: 	movl	0x4(%rsp), %edi
    00000168: 	movl	0x14(%rsp), %eax
    0000016c: 	subl	%edi, %eax
    0000016e: 	andl	$-0x10, %eax
    00000171: 	leal	0x10(%rdi,%rax), %edx
    00000175: 	cmpl	%edx, %r13d
    00000178: 	jle	.Ltmp186 # Offset: 376
.Ltmp194:
    0000017e: 	movslq	%edx, %rcx
    00000181: 	movswq	(%r12,%rcx,2), %rsi
    00000186: 	leaq	(%rcx,%rcx), %rax
    0000018a: 	movzwl	(%rbx,%rsi,2), %esi
    0000018e: 	movw	%si, (%rbp,%rcx,2)
    00000193: 	leal	0x1(%rdx), %ecx
    00000196: 	cmpl	%ecx, %r13d
    00000199: 	jle	.Ltmp186 # Offset: 409
    0000019f: 	movswq	0x2(%r12,%rax), %rcx
    000001a5: 	movzwl	(%rbx,%rcx,2), %ecx
    000001a9: 	movw	%cx, 0x2(%rbp,%rax)
    000001ae: 	leal	0x2(%rdx), %ecx
    000001b1: 	cmpl	%ecx, %r13d
    000001b4: 	jle	.Ltmp186 # Offset: 436
    000001ba: 	movswq	0x4(%r12,%rax), %rcx
    000001c0: 	movzwl	(%rbx,%rcx,2), %ecx
    000001c4: 	movw	%cx, 0x4(%rbp,%rax)
    000001c9: 	leal	0x3(%rdx), %ecx
    000001cc: 	cmpl	%ecx, %r13d
    000001cf: 	jle	.Ltmp186 # Offset: 463
    000001d5: 	movswq	0x6(%r12,%rax), %rcx
    000001db: 	movzwl	(%rbx,%rcx,2), %ecx
    000001df: 	movw	%cx, 0x6(%rbp,%rax)
    000001e4: 	leal	0x4(%rdx), %ecx
    000001e7: 	cmpl	%ecx, %r13d
    000001ea: 	jle	.Ltmp186 # Offset: 490
    000001f0: 	movswq	0x8(%r12,%rax), %rcx
    000001f6: 	movzwl	(%rbx,%rcx,2), %ecx
    000001fa: 	movw	%cx, 0x8(%rbp,%rax)
    000001ff: 	leal	0x5(%rdx), %ecx
    00000202: 	cmpl	%ecx, %r13d
    00000205: 	jle	.Ltmp186 # Offset: 517
    0000020b: 	movswq	0xa(%r12,%rax), %rcx
    00000211: 	movzwl	(%rbx,%rcx,2), %ecx
    00000215: 	movw	%cx, 0xa(%rbp,%rax)
    0000021a: 	leal	0x6(%rdx), %ecx
    0000021d: 	cmpl	%ecx, %r13d
    00000220: 	jle	.Ltmp186 # Offset: 544
    00000226: 	movswq	0xc(%r12,%rax), %rcx
    0000022c: 	movzwl	(%rbx,%rcx,2), %ecx
    00000230: 	movw	%cx, 0xc(%rbp,%rax)
    00000235: 	leal	0x7(%rdx), %ecx
    00000238: 	cmpl	%ecx, %r13d
    0000023b: 	jle	.Ltmp186 # Offset: 571
    00000241: 	movswq	0xe(%r12,%rax), %rcx
    00000247: 	movzwl	(%rbx,%rcx,2), %ecx
    0000024b: 	movw	%cx, 0xe(%rbp,%rax)
    00000250: 	leal	0x8(%rdx), %ecx
    00000253: 	cmpl	%ecx, %r13d
    00000256: 	jle	.Ltmp186 # Offset: 598
    0000025c: 	movswq	0x10(%r12,%rax), %rcx
    00000262: 	movzwl	(%rbx,%rcx,2), %ecx
    00000266: 	movw	%cx, 0x10(%rbp,%rax)
    0000026b: 	leal	0x9(%rdx), %ecx
    0000026e: 	cmpl	%ecx, %r13d
    00000271: 	jle	.Ltmp186 # Offset: 625
    00000277: 	movswq	0x12(%r12,%rax), %rcx
    0000027d: 	movzwl	(%rbx,%rcx,2), %ecx
    00000281: 	movw	%cx, 0x12(%rbp,%rax)
    00000286: 	leal	0xa(%rdx), %ecx
    00000289: 	cmpl	%ecx, %r13d
    0000028c: 	jle	.Ltmp186 # Offset: 652
    00000292: 	movswq	0x14(%r12,%rax), %rcx
    00000298: 	movzwl	(%rbx,%rcx,2), %ecx
    0000029c: 	movw	%cx, 0x14(%rbp,%rax)
    000002a1: 	leal	0xb(%rdx), %ecx
    000002a4: 	cmpl	%ecx, %r13d
    000002a7: 	jle	.Ltmp186 # Offset: 679
    000002a9: 	movswq	0x16(%r12,%rax), %rcx
    000002af: 	movzwl	(%rbx,%rcx,2), %ecx
    000002b3: 	movw	%cx, 0x16(%rbp,%rax)
    000002b8: 	leal	0xc(%rdx), %ecx
    000002bb: 	cmpl	%ecx, %r13d
    000002be: 	jle	.Ltmp186 # Offset: 702
    000002c0: 	movswq	0x18(%r12,%rax), %rcx
    000002c6: 	movzwl	(%rbx,%rcx,2), %ecx
    000002ca: 	movw	%cx, 0x18(%rbp,%rax)
    000002cf: 	leal	0xd(%rdx), %ecx
    000002d2: 	cmpl	%ecx, %r13d
    000002d5: 	jle	.Ltmp186 # Offset: 725
    000002d7: 	movswq	0x1a(%r12,%rax), %rcx
    000002dd: 	movzwl	(%rbx,%rcx,2), %ecx
    000002e1: 	movw	%cx, 0x1a(%rbp,%rax)
    000002e6: 	leal	0xe(%rdx), %ecx
    000002e9: 	cmpl	%ecx, %r13d
    000002ec: 	jle	.Ltmp186 # Offset: 748
    000002ee: 	movswq	0x1c(%r12,%rax), %rcx
    000002f4: 	addl	$0xf, %edx
    000002f7: 	movzwl	(%rbx,%rcx,2), %ecx
    000002fb: 	movw	%cx, 0x1c(%rbp,%rax)
    00000300: 	cmpl	%edx, %r13d
    00000303: 	jle	.Ltmp186 # Offset: 771
    00000305: 	movswq	0x1e(%r12,%rax), %rdx
    0000030b: 	movzwl	(%rbx,%rdx,2), %edx
    0000030f: 	movw	%dx, 0x1e(%rbp,%rax)
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp186:
    00000318: 	addl	$0x1, (%rsp)
    0000031c: 	movl	(%rsp), %eax
    0000031f: 	cmpl	0x10(%rsp), %eax
    00000323: 	jne	.Ltmp188 # Offset: 803
.Ltmp182:
    00000329: 	callq	clock@PLT # Offset: 809
    0000032e: 	movq	0x18(%rsp), %rdi
    00000333: 	pxor	%xmm0, %xmm0
    00000337: 	movq	%rax, end_time(%rip)
    0000033e: 	subq	start_time(%rip), %rax
    00000345: 	cvtsi2sd	%rax, %xmm0
    0000034a: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000352: 	callq	_Z13record_resultdPKc # Offset: 850
    00000357: 	testl	%r13d, %r13d
    0000035a: 	jle	.Ltmp189 # Offset: 858
    0000035c: 	movl	init_value(%rip), %r8d
    00000363: 	leal	-0x1(%r13), %eax
    00000367: 	leaq	0x2(%rbp,%rax,2), %rcx
    0000036c: 	movl	%r8d, %edx
    0000036f: 	jmp	.Ltmp190 # Offset: 879
    00000371: 	nopl	(%rax) # Size: 7
.Ltmp191:
    00000378: 	addq	$0x2, %rbp
    0000037c: 	cmpq	%rbp, %rcx
    0000037f: 	je	.Ltmp189 # Offset: 895
.Ltmp190:
    00000381: 	movzwl	(%rbp), %eax
    00000385: 	cmpw	%dx, %ax
    00000388: 	je	.Ltmp191 # Offset: 904
    0000038a: 	movq	0x18(%rsp), %rdx
    0000038f: 	addq	$0x28, %rsp
    00000393: 	movswl	%ax, %ecx
    00000396: 	leaq	DATAat0x8118(%rip), %rsi
    0000039d: 	popq	%rbx
    0000039e: 	movl	$0x1, %edi
    000003a3: 	popq	%rbp
    000003a4: 	xorl	%eax, %eax
    000003a6: 	popq	%r12
    000003a8: 	popq	%r13
    000003aa: 	popq	%r14
    000003ac: 	popq	%r15
    000003ae: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 942
.Ltmp189:
    000003b3: 	addq	$0x28, %rsp
    000003b7: 	popq	%rbx
    000003b8: 	popq	%rbp
    000003b9: 	popq	%r12
    000003bb: 	popq	%r13
    000003bd: 	popq	%r14
    000003bf: 	popq	%r15
    000003c1: 	retq # Offset: 961
.Ltmp183:
    000003c2: 	movl	$0x0, 0x4(%rsp)
    000003ca: 	jmp	.Ltmp192 # Offset: 970
.Ltmp184:
    000003cf: 	movl	$0x0, 0x4(%rsp)
    000003d7: 	xorl	%edx, %edx
    000003d9: 	testl	%r14d, %r14d
    000003dc: 	jg	.Ltmp193 # Offset: 988
    000003e2: 	jmp	.Ltmp194 # Offset: 994
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut6PKsPsiS0_PKc"

Binary Function "_Z9test_lut1IhEvPKT_PS0_iS2_PKc" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x5950
  Size        : 0x156
  MaxSize     : 0x160
  Offset      : 0x5950
  Section     : .text
  Orc Section : .local.text._Z9test_lut1IhEvPKT_PS0_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movq	%rdi, %r14
    00000009: 	pushq	%r13
    0000000b: 	movq	%rcx, %r13
    0000000e: 	pushq	%r12
    00000010: 	movq	%r8, %r12
    00000013: 	pushq	%rbp
    00000014: 	movl	%edx, %ebp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rsi, %rbx
    0000001a: 	callq	clock@PLT # Offset: 26
    0000001f: 	movq	%rax, start_time(%rip)
    00000026: 	movl	iterations(%rip), %eax
    0000002c: 	testl	%eax, %eax
    0000002e: 	jle	.Ltmp195 # Offset: 46
    00000034: 	xorl	%esi, %esi
    00000036: 	movslq	%ebp, %rcx
    00000039: 	testl	%ebp, %ebp
    0000003b: 	jle	.Ltmp196 # Offset: 59
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp198:
    00000048: 	xorl	%eax, %eax
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp197:
    00000050: 	movzbl	(%r14,%rax), %edx
    00000055: 	movzbl	(%r13,%rdx), %edx
    0000005b: 	movb	%dl, (%rbx,%rax)
    0000005e: 	addq	$0x1, %rax
    00000062: 	cmpq	%rax, %rcx
    00000065: 	jne	.Ltmp197 # Offset: 101
    00000067: 	addl	$0x1, %esi
    0000006a: 	cmpl	iterations(%rip), %esi
    00000070: 	jl	.Ltmp198 # Offset: 112
    00000072: 	callq	clock@PLT # Offset: 114
    00000077: 	pxor	%xmm0, %xmm0
    0000007b: 	movq	%r12, %rdi
    0000007e: 	movq	%rax, end_time(%rip)
    00000085: 	subq	start_time(%rip), %rax
    0000008c: 	cvtsi2sd	%rax, %xmm0
    00000091: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000099: 	callq	_Z13record_resultdPKc # Offset: 153
.Ltmp202:
    0000009e: 	movl	init_value(%rip), %r8d
    000000a5: 	leal	-0x1(%rbp), %eax
    000000a8: 	leaq	0x1(%rbx,%rax), %rcx
    000000ad: 	movl	%r8d, %edx
    000000b0: 	jmp	.Ltmp199 # Offset: 176
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp201:
    000000b8: 	addq	$0x1, %rbx
    000000bc: 	cmpq	%rbx, %rcx
    000000bf: 	je	.Ltmp200 # Offset: 191
.Ltmp199:
    000000c1: 	movzbl	(%rbx), %eax
    000000c4: 	cmpb	%dl, %al
    000000c6: 	je	.Ltmp201 # Offset: 198
    000000c8: 	popq	%rbx
    000000c9: 	movzbl	%al, %ecx
    000000cc: 	popq	%rbp
    000000cd: 	movq	%r12, %rdx
    000000d0: 	leaq	DATAat0x8118(%rip), %rsi
    000000d7: 	popq	%r12
    000000d9: 	movl	$0x1, %edi
    000000de: 	popq	%r13
    000000e0: 	xorl	%eax, %eax
    000000e2: 	popq	%r14
    000000e4: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 228
.Ltmp195:
    000000e9: 	callq	clock@PLT # Offset: 233
    000000ee: 	pxor	%xmm0, %xmm0
    000000f2: 	movq	%r12, %rdi
    000000f5: 	movq	%rax, end_time(%rip)
    000000fc: 	subq	start_time(%rip), %rax
    00000103: 	cvtsi2sd	%rax, %xmm0
    00000108: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000110: 	callq	_Z13record_resultdPKc # Offset: 272
    00000115: 	testl	%ebp, %ebp
    00000117: 	jg	.Ltmp202 # Offset: 279
.Ltmp200:
    00000119: 	popq	%rbx
    0000011a: 	popq	%rbp
    0000011b: 	popq	%r12
    0000011d: 	popq	%r13
    0000011f: 	popq	%r14
    00000121: 	retq # Offset: 289
.Ltmp196:
    00000122: 	callq	clock@PLT # Offset: 290
    00000127: 	popq	%rbx
    00000128: 	pxor	%xmm0, %xmm0
    0000012c: 	popq	%rbp
    0000012d: 	movq	%rax, end_time(%rip)
    00000134: 	movq	%r12, %rdi
    00000137: 	popq	%r12
    00000139: 	subq	start_time(%rip), %rax
    00000140: 	popq	%r13
    00000142: 	popq	%r14
    00000144: 	cvtsi2sd	%rax, %xmm0
    00000149: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000151: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 337
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut1IhEvPKT_PS0_iS2_PKc"

Binary Function "_Z9test_lut2IhEvPKT_PS0_iS2_PKc" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x5ab0
  Size        : 0x156
  MaxSize     : 0x160
  Offset      : 0x5ab0
  Section     : .text
  Orc Section : .local.text._Z9test_lut2IhEvPKT_PS0_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movq	%rdi, %r14
    00000009: 	pushq	%r13
    0000000b: 	movq	%rcx, %r13
    0000000e: 	pushq	%r12
    00000010: 	movq	%r8, %r12
    00000013: 	pushq	%rbp
    00000014: 	movl	%edx, %ebp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rsi, %rbx
    0000001a: 	callq	clock@PLT # Offset: 26
    0000001f: 	movq	%rax, start_time(%rip)
    00000026: 	movl	iterations(%rip), %eax
    0000002c: 	testl	%eax, %eax
    0000002e: 	jle	.Ltmp203 # Offset: 46
    00000034: 	xorl	%esi, %esi
    00000036: 	movslq	%ebp, %rcx
    00000039: 	testl	%ebp, %ebp
    0000003b: 	jle	.Ltmp204 # Offset: 59
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp206:
    00000048: 	xorl	%eax, %eax
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp205:
    00000050: 	movzbl	(%r14,%rax), %edx
    00000055: 	movzbl	(%r13,%rdx), %edx
    0000005b: 	movb	%dl, (%rbx,%rax)
    0000005e: 	addq	$0x1, %rax
    00000062: 	cmpq	%rax, %rcx
    00000065: 	jne	.Ltmp205 # Offset: 101
    00000067: 	addl	$0x1, %esi
    0000006a: 	cmpl	iterations(%rip), %esi
    00000070: 	jl	.Ltmp206 # Offset: 112
    00000072: 	callq	clock@PLT # Offset: 114
    00000077: 	pxor	%xmm0, %xmm0
    0000007b: 	movq	%r12, %rdi
    0000007e: 	movq	%rax, end_time(%rip)
    00000085: 	subq	start_time(%rip), %rax
    0000008c: 	cvtsi2sd	%rax, %xmm0
    00000091: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000099: 	callq	_Z13record_resultdPKc # Offset: 153
.Ltmp210:
    0000009e: 	movl	init_value(%rip), %r8d
    000000a5: 	leal	-0x1(%rbp), %eax
    000000a8: 	leaq	0x1(%rbx,%rax), %rcx
    000000ad: 	movl	%r8d, %edx
    000000b0: 	jmp	.Ltmp207 # Offset: 176
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp209:
    000000b8: 	addq	$0x1, %rbx
    000000bc: 	cmpq	%rbx, %rcx
    000000bf: 	je	.Ltmp208 # Offset: 191
.Ltmp207:
    000000c1: 	movzbl	(%rbx), %eax
    000000c4: 	cmpb	%dl, %al
    000000c6: 	je	.Ltmp209 # Offset: 198
    000000c8: 	popq	%rbx
    000000c9: 	movzbl	%al, %ecx
    000000cc: 	popq	%rbp
    000000cd: 	movq	%r12, %rdx
    000000d0: 	leaq	DATAat0x8118(%rip), %rsi
    000000d7: 	popq	%r12
    000000d9: 	movl	$0x1, %edi
    000000de: 	popq	%r13
    000000e0: 	xorl	%eax, %eax
    000000e2: 	popq	%r14
    000000e4: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 228
.Ltmp203:
    000000e9: 	callq	clock@PLT # Offset: 233
    000000ee: 	pxor	%xmm0, %xmm0
    000000f2: 	movq	%r12, %rdi
    000000f5: 	movq	%rax, end_time(%rip)
    000000fc: 	subq	start_time(%rip), %rax
    00000103: 	cvtsi2sd	%rax, %xmm0
    00000108: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000110: 	callq	_Z13record_resultdPKc # Offset: 272
    00000115: 	testl	%ebp, %ebp
    00000117: 	jg	.Ltmp210 # Offset: 279
.Ltmp208:
    00000119: 	popq	%rbx
    0000011a: 	popq	%rbp
    0000011b: 	popq	%r12
    0000011d: 	popq	%r13
    0000011f: 	popq	%r14
    00000121: 	retq # Offset: 289
.Ltmp204:
    00000122: 	callq	clock@PLT # Offset: 290
    00000127: 	popq	%rbx
    00000128: 	pxor	%xmm0, %xmm0
    0000012c: 	popq	%rbp
    0000012d: 	movq	%rax, end_time(%rip)
    00000134: 	movq	%r12, %rdi
    00000137: 	popq	%r12
    00000139: 	subq	start_time(%rip), %rax
    00000140: 	popq	%r13
    00000142: 	popq	%r14
    00000144: 	cvtsi2sd	%rax, %xmm0
    00000149: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000151: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 337
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut2IhEvPKT_PS0_iS2_PKc"

Binary Function "_Z9test_lut3IhEvPKT_PS0_iS2_PKc" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x5c10
  Size        : 0x1a8
  MaxSize     : 0x1b0
  Offset      : 0x5c10
  Section     : .text
  Orc Section : .local.text._Z9test_lut3IhEvPKT_PS0_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movl	%edx, %r14d
    00000009: 	pushq	%r13
    0000000b: 	movq	%rdi, %r13
    0000000e: 	pushq	%r12
    00000010: 	movq	%r8, %r12
    00000013: 	pushq	%rbp
    00000014: 	movq	%rsi, %rbp
    00000017: 	pushq	%rbx
    00000018: 	movq	%rcx, %rbx
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movq	%rax, start_time(%rip)
    00000027: 	movl	iterations(%rip), %eax
    0000002d: 	testl	%eax, %eax
    0000002f: 	jle	.Ltmp211 # Offset: 47
    00000035: 	leal	-0x4(%r14), %eax
    00000039: 	xorl	%r10d, %r10d
    0000003c: 	shrl	$0x2, %eax
    0000003f: 	movl	%eax, %edx
    00000041: 	leal	0x4(,%rax,4), %r11d
    00000049: 	leaq	0x4(%r13,%rdx,4), %r9
    0000004e: 	nop # Size: 2
.Ltmp215:
    00000050: 	movq	%rbp, %rdx
    00000053: 	movq	%r13, %rax
    00000056: 	cmpl	$0x3, %r14d
    0000005a: 	jle	.Ltmp212 # Offset: 90
.Ltmp213:
    00000060: 	movzbl	(%rax), %ecx
    00000063: 	addq	$0x4, %rax
    00000067: 	addq	$0x4, %rdx
    0000006b: 	movzbl	(%rbx,%rcx), %r8d
    00000070: 	movzbl	-0x3(%rax), %ecx
    00000074: 	movzbl	(%rbx,%rcx), %edi
    00000078: 	movzbl	-0x2(%rax), %ecx
    0000007c: 	movzbl	(%rbx,%rcx), %esi
    00000080: 	movzbl	-0x1(%rax), %ecx
    00000084: 	movzbl	(%rbx,%rcx), %ecx
    00000088: 	movb	%r8b, -0x4(%rdx)
    0000008c: 	movb	%dil, -0x3(%rdx)
    00000090: 	movb	%sil, -0x2(%rdx)
    00000094: 	movb	%cl, -0x1(%rdx)
    00000097: 	cmpq	%rax, %r9
    0000009a: 	jne	.Ltmp213 # Offset: 154
    0000009c: 	movl	%r11d, %eax
.Ltmp219:
    0000009f: 	cmpl	%eax, %r14d
    000000a2: 	jle	.Ltmp214 # Offset: 162
    000000a4: 	movslq	%eax, %rdx
    000000a7: 	movzbl	(%r13,%rdx), %ecx
    000000ad: 	movzbl	(%rbx,%rcx), %ecx
    000000b1: 	movb	%cl, (%rbp,%rdx)
    000000b5: 	leal	0x1(%rax), %edx
    000000b8: 	cmpl	%edx, %r14d
    000000bb: 	jle	.Ltmp214 # Offset: 187
    000000bd: 	movslq	%edx, %rdx
    000000c0: 	movzbl	(%r13,%rdx), %ecx
    000000c6: 	movzbl	(%rbx,%rcx), %ecx
    000000ca: 	movb	%cl, (%rbp,%rdx)
    000000ce: 	leal	0x2(%rax), %edx
    000000d1: 	cmpl	%edx, %r14d
    000000d4: 	jle	.Ltmp214 # Offset: 212
    000000d6: 	movslq	%edx, %rdx
    000000d9: 	addl	$0x3, %eax
    000000dc: 	movzbl	(%r13,%rdx), %ecx
    000000e2: 	movzbl	(%rbx,%rcx), %ecx
    000000e6: 	movb	%cl, (%rbp,%rdx)
    000000ea: 	cmpl	%eax, %r14d
    000000ed: 	jle	.Ltmp214 # Offset: 237
    000000ef: 	cltq
    000000f1: 	movzbl	(%r13,%rax), %edx
    000000f7: 	movzbl	(%rbx,%rdx), %edx
    000000fb: 	movb	%dl, (%rbp,%rax)
.Ltmp214:
    000000ff: 	addl	$0x1, %r10d
    00000103: 	cmpl	%r10d, iterations(%rip)
    0000010a: 	jg	.Ltmp215 # Offset: 266
.Ltmp211:
    00000110: 	callq	clock@PLT # Offset: 272
    00000115: 	pxor	%xmm0, %xmm0
    00000119: 	movq	%r12, %rdi
    0000011c: 	movq	%rax, end_time(%rip)
    00000123: 	subq	start_time(%rip), %rax
    0000012a: 	cvtsi2sd	%rax, %xmm0
    0000012f: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000137: 	callq	_Z13record_resultdPKc # Offset: 311
    0000013c: 	testl	%r14d, %r14d
    0000013f: 	jle	.Ltmp216 # Offset: 319
    00000141: 	movl	init_value(%rip), %r8d
    00000148: 	leal	-0x1(%r14), %eax
    0000014c: 	leaq	0x1(%rbp,%rax), %rcx
    00000151: 	movl	%r8d, %edx
    00000154: 	jmp	.Ltmp217 # Offset: 340
    00000156: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp218:
    00000160: 	addq	$0x1, %rbp
    00000164: 	cmpq	%rcx, %rbp
    00000167: 	je	.Ltmp216 # Offset: 359
.Ltmp217:
    00000169: 	movzbl	(%rbp), %eax
    0000016d: 	cmpb	%dl, %al
    0000016f: 	je	.Ltmp218 # Offset: 367
    00000171: 	popq	%rbx
    00000172: 	movzbl	%al, %ecx
    00000175: 	popq	%rbp
    00000176: 	movq	%r12, %rdx
    00000179: 	leaq	DATAat0x8118(%rip), %rsi
    00000180: 	popq	%r12
    00000182: 	movl	$0x1, %edi
    00000187: 	popq	%r13
    00000189: 	xorl	%eax, %eax
    0000018b: 	popq	%r14
    0000018d: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 397
    00000192: 	nopw	(%rax,%rax) # Size: 6
.Ltmp212:
    00000198: 	xorl	%eax, %eax
    0000019a: 	jmp	.Ltmp219 # Offset: 410
.Ltmp216:
    0000019f: 	popq	%rbx
    000001a0: 	popq	%rbp
    000001a1: 	popq	%r12
    000001a3: 	popq	%r13
    000001a5: 	popq	%r14
    000001a7: 	retq # Offset: 423
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut3IhEvPKT_PS0_iS2_PKc"

Binary Function "_Z9test_lut7IhEvPKT_PS0_iS2_PKc" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x5dc0
  Size        : 0x132
  MaxSize     : 0x140
  Offset      : 0x5dc0
  Section     : .text
  Orc Section : .local.text._Z9test_lut7IhEvPKT_PS0_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movl	%edx, %r14d
    00000009: 	pushq	%r13
    0000000b: 	movq	%r8, %r13
    0000000e: 	pushq	%r12
    00000010: 	movq	%rcx, %r12
    00000013: 	pushq	%rbp
    00000014: 	movq	%rdi, %rbp
    00000017: 	pushq	%rbx
    00000018: 	movq	%rsi, %rbx
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movq	%rax, start_time(%rip)
    00000027: 	movl	iterations(%rip), %eax
    0000002d: 	testl	%eax, %eax
    0000002f: 	jle	.Ltmp220 # Offset: 47
    00000031: 	leal	-0x2(%r14), %eax
    00000035: 	leal	-0x1(%r14), %esi
    00000039: 	xorl	%edi, %edi
    0000003b: 	shrl	%eax
    0000003d: 	leal	0x2(%rax,%rax), %r8d
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp224:
    00000048: 	xorl	%eax, %eax
    0000004a: 	testl	%esi, %esi
    0000004c: 	jle	.Ltmp221 # Offset: 76
    0000004e: 	nop # Size: 2
.Ltmp222:
    00000050: 	movzbl	(%rbp,%rax), %edx
    00000055: 	movzbl	(%r12,%rdx), %ecx
    0000005a: 	movzbl	0x1(%rbp,%rax), %edx
    0000005f: 	movzbl	(%r12,%rdx), %edx
    00000064: 	movb	%cl, (%rbx,%rax)
    00000067: 	movb	%dl, 0x1(%rbx,%rax)
    0000006b: 	addq	$0x2, %rax
    0000006f: 	cmpl	%eax, %esi
    00000071: 	jg	.Ltmp222 # Offset: 113
    00000073: 	movl	%r8d, %eax
.Ltmp221:
    00000076: 	cmpl	%eax, %r14d
    00000079: 	jle	.Ltmp223 # Offset: 121
    0000007b: 	movslq	%eax, %rdx
    0000007e: 	addl	$0x1, %eax
    00000081: 	movzbl	(%rbp,%rdx), %ecx
    00000086: 	movzbl	(%r12,%rcx), %ecx
    0000008b: 	movb	%cl, (%rbx,%rdx)
    0000008e: 	cmpl	%eax, %r14d
    00000091: 	jle	.Ltmp223 # Offset: 145
    00000093: 	cltq
    00000095: 	movzbl	(%rbp,%rax), %edx
    0000009a: 	movzbl	(%r12,%rdx), %edx
    0000009f: 	movb	%dl, (%rbx,%rax)
.Ltmp223:
    000000a2: 	addl	$0x1, %edi
    000000a5: 	cmpl	%edi, iterations(%rip)
    000000ab: 	jg	.Ltmp224 # Offset: 171
.Ltmp220:
    000000ad: 	callq	clock@PLT # Offset: 173
    000000b2: 	pxor	%xmm0, %xmm0
    000000b6: 	movq	%r13, %rdi
    000000b9: 	movq	%rax, end_time(%rip)
    000000c0: 	subq	start_time(%rip), %rax
    000000c7: 	cvtsi2sd	%rax, %xmm0
    000000cc: 	divsd	DATAat0x90d0(%rip), %xmm0
    000000d4: 	callq	_Z13record_resultdPKc # Offset: 212
    000000d9: 	testl	%r14d, %r14d
    000000dc: 	jle	.Ltmp225 # Offset: 220
    000000de: 	movl	init_value(%rip), %r8d
    000000e5: 	leal	-0x1(%r14), %eax
    000000e9: 	leaq	0x1(%rbx,%rax), %rcx
    000000ee: 	movl	%r8d, %edx
    000000f1: 	jmp	.Ltmp226 # Offset: 241
    000000f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp227:
    000000f8: 	addq	$0x1, %rbx
    000000fc: 	cmpq	%rbx, %rcx
    000000ff: 	je	.Ltmp225 # Offset: 255
.Ltmp226:
    00000101: 	movzbl	(%rbx), %eax
    00000104: 	cmpb	%dl, %al
    00000106: 	je	.Ltmp227 # Offset: 262
    00000108: 	popq	%rbx
    00000109: 	movzbl	%al, %ecx
    0000010c: 	popq	%rbp
    0000010d: 	movq	%r13, %rdx
    00000110: 	popq	%r12
    00000112: 	leaq	DATAat0x8118(%rip), %rsi
    00000119: 	popq	%r13
    0000011b: 	movl	$0x1, %edi
    00000120: 	xorl	%eax, %eax
    00000122: 	popq	%r14
    00000124: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 292
.Ltmp225:
    00000129: 	popq	%rbx
    0000012a: 	popq	%rbp
    0000012b: 	popq	%r12
    0000012d: 	popq	%r13
    0000012f: 	popq	%r14
    00000131: 	retq # Offset: 305
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut7IhEvPKT_PS0_iS2_PKc"

Binary Function "_Z9test_lut8IhEvPKT_PS0_iS2_PKc" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x5f00
  Size        : 0x26d
  MaxSize     : 0x270
  Offset      : 0x5f00
  Section     : .text
  Orc Section : .local.text._Z9test_lut8IhEvPKT_PS0_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rcx, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rsi, %rbx
    00000016: 	subq	$0x838, %rsp
    0000001d: 	movq	%rdi, 0x8(%rsp)
    00000022: 	movq	%r8, 0x10(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x828(%rsp)
    00000038: 	xorl	%eax, %eax
    0000003a: 	callq	clock@PLT # Offset: 58
    0000003f: 	movq	%rax, start_time(%rip)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	testl	%eax, %eax
    0000004e: 	jle	.Ltmp228 # Offset: 78
    00000054: 	testl	%ebp, %ebp
    00000056: 	jle	.Ltmp229 # Offset: 86
    0000005c: 	leal	-0x1(%rbp), %eax
    0000005f: 	movl	$0x0, 0x18(%rsp)
    00000067: 	movl	%eax, 0x1c(%rsp)
    0000006b: 	shrl	$0xb, %eax
    0000006e: 	movl	%eax, %r12d
    00000071: 	addl	$0x1, %r12d
    00000075: 	shlq	$0xb, %r12
    00000079: 	nopl	(%rax) # Size: 7
.Ltmp233:
    00000080: 	movq	0x8(%rsp), %r13
    00000085: 	xorl	%r14d, %r14d
    00000088: 	nopl	(%rax,%rax) # Size: 8
.Ltmp232:
    00000090: 	leal	0x800(%r14), %eax
    00000097: 	movl	$0x800, %r10d
    0000009d: 	cmpl	%eax, %ebp
    0000009f: 	jle	.Ltmp230 # Offset: 159
.Ltmp238:
    000000a5: 	xorl	%eax, %eax
    000000a7: 	leaq	0x20(%rsp), %rsi
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp231:
    000000b0: 	movzbl	(%r13,%rax), %edx
    000000b6: 	movzbl	(%r15,%rdx), %edx
    000000bb: 	movb	%dl, (%rsi,%rax)
    000000be: 	addq	$0x1, %rax
    000000c2: 	cmpq	%rax, %r10
    000000c5: 	ja	.Ltmp231 # Offset: 197
    000000c7: 	leaq	(%rbx,%r14), %rdi
    000000cb: 	movq	%r10, %rdx
    000000ce: 	callq	memcpy@PLT # Offset: 206
.Ltmp239:
    000000d3: 	addq	$0x800, %r14
    000000da: 	addq	$0x800, %r13
    000000e1: 	cmpq	%r14, %r12
    000000e4: 	jne	.Ltmp232 # Offset: 228
    000000e6: 	addl	$0x1, 0x18(%rsp)
    000000eb: 	movl	0x18(%rsp), %eax
    000000ef: 	cmpl	iterations(%rip), %eax
    000000f5: 	jl	.Ltmp233 # Offset: 245
    000000f7: 	callq	clock@PLT # Offset: 247
    000000fc: 	movq	0x10(%rsp), %rdi
    00000101: 	pxor	%xmm0, %xmm0
    00000105: 	movq	%rax, end_time(%rip)
    0000010c: 	subq	start_time(%rip), %rax
    00000113: 	cvtsi2sd	%rax, %xmm0
    00000118: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000120: 	callq	_Z13record_resultdPKc # Offset: 288
.Ltmp240:
    00000125: 	movl	init_value(%rip), %r8d
    0000012c: 	movl	0x1c(%rsp), %eax
    00000130: 	movl	%r8d, %ecx
    00000133: 	leaq	0x1(%rbx,%rax), %rdx
    00000138: 	jmp	.Ltmp234 # Offset: 312
    0000013a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp236:
    00000140: 	addq	$0x1, %rbx
    00000144: 	cmpq	%rdx, %rbx
    00000147: 	je	.Ltmp235 # Offset: 327
.Ltmp234:
    00000149: 	movzbl	(%rbx), %eax
    0000014c: 	cmpb	%cl, %al
    0000014e: 	je	.Ltmp236 # Offset: 334
    00000150: 	movq	0x828(%rsp), %rdx
    00000158: 	subq	%fs:0x28, %rdx
    00000161: 	jne	.Ltmp237 # Offset: 353
    00000167: 	movq	0x10(%rsp), %rdx
    0000016c: 	addq	$0x838, %rsp
    00000173: 	movzbl	%al, %ecx
    00000176: 	leaq	DATAat0x8118(%rip), %rsi
    0000017d: 	popq	%rbx
    0000017e: 	movl	$0x1, %edi
    00000183: 	popq	%rbp
    00000184: 	xorl	%eax, %eax
    00000186: 	popq	%r12
    00000188: 	popq	%r13
    0000018a: 	popq	%r14
    0000018c: 	popq	%r15
    0000018e: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 398
    00000193: 	nopl	(%rax,%rax) # Size: 5
.Ltmp230:
    00000198: 	movl	%ebp, %r10d
    0000019b: 	subl	%r14d, %r10d
    0000019e: 	movslq	%r10d, %r10
    000001a1: 	testq	%r10, %r10
    000001a4: 	jne	.Ltmp238 # Offset: 420
    000001aa: 	jmp	.Ltmp239 # Offset: 426
.Ltmp235:
    000001af: 	movq	0x828(%rsp), %rax
    000001b7: 	subq	%fs:0x28, %rax
    000001c0: 	jne	.Ltmp237 # Offset: 448
    000001c6: 	addq	$0x838, %rsp
    000001cd: 	popq	%rbx
    000001ce: 	popq	%rbp
    000001cf: 	popq	%r12
    000001d1: 	popq	%r13
    000001d3: 	popq	%r14
    000001d5: 	popq	%r15
    000001d7: 	retq # Offset: 471
.Ltmp228:
    000001d8: 	callq	clock@PLT # Offset: 472
    000001dd: 	movq	0x10(%rsp), %rdi
    000001e2: 	pxor	%xmm0, %xmm0
    000001e6: 	movq	%rax, end_time(%rip)
    000001ed: 	subq	start_time(%rip), %rax
    000001f4: 	cvtsi2sd	%rax, %xmm0
    000001f9: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000201: 	callq	_Z13record_resultdPKc # Offset: 513
    00000206: 	testl	%ebp, %ebp
    00000208: 	jle	.Ltmp235 # Offset: 520
    0000020a: 	leal	-0x1(%rbp), %eax
    0000020d: 	movl	%eax, 0x1c(%rsp)
    00000211: 	jmp	.Ltmp240 # Offset: 529
.Ltmp229:
    00000216: 	callq	clock@PLT # Offset: 534
    0000021b: 	movq	%rax, end_time(%rip)
    00000222: 	movq	0x828(%rsp), %rdx
    0000022a: 	subq	%fs:0x28, %rdx
    00000233: 	jne	.Ltmp237 # Offset: 563
    00000235: 	subq	start_time(%rip), %rax
    0000023c: 	pxor	%xmm0, %xmm0
    00000240: 	movq	0x10(%rsp), %rdi
    00000245: 	cvtsi2sd	%rax, %xmm0
    0000024a: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000252: 	addq	$0x838, %rsp
    00000259: 	popq	%rbx
    0000025a: 	popq	%rbp
    0000025b: 	popq	%r12
    0000025d: 	popq	%r13
    0000025f: 	popq	%r14
    00000261: 	popq	%r15
    00000263: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 611
.Ltmp237:
    00000268: 	callq	__stack_chk_fail@PLT # Offset: 616
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut8IhEvPKT_PS0_iS2_PKc"

Binary Function "_Z9test_lut1IaEvPKT_PS0_iS2_PKc" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x6170
  Size        : 0x156
  MaxSize     : 0x160
  Offset      : 0x6170
  Section     : .text
  Orc Section : .local.text._Z9test_lut1IaEvPKT_PS0_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movq	%rdi, %r14
    00000009: 	pushq	%r13
    0000000b: 	movq	%rcx, %r13
    0000000e: 	pushq	%r12
    00000010: 	movq	%r8, %r12
    00000013: 	pushq	%rbp
    00000014: 	movl	%edx, %ebp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rsi, %rbx
    0000001a: 	callq	clock@PLT # Offset: 26
    0000001f: 	movq	%rax, start_time(%rip)
    00000026: 	movl	iterations(%rip), %eax
    0000002c: 	testl	%eax, %eax
    0000002e: 	jle	.Ltmp241 # Offset: 46
    00000034: 	xorl	%esi, %esi
    00000036: 	movslq	%ebp, %rcx
    00000039: 	testl	%ebp, %ebp
    0000003b: 	jle	.Ltmp242 # Offset: 59
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp244:
    00000048: 	xorl	%eax, %eax
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp243:
    00000050: 	movsbq	(%r14,%rax), %rdx
    00000055: 	movzbl	(%r13,%rdx), %edx
    0000005b: 	movb	%dl, (%rbx,%rax)
    0000005e: 	addq	$0x1, %rax
    00000062: 	cmpq	%rax, %rcx
    00000065: 	jne	.Ltmp243 # Offset: 101
    00000067: 	addl	$0x1, %esi
    0000006a: 	cmpl	iterations(%rip), %esi
    00000070: 	jl	.Ltmp244 # Offset: 112
    00000072: 	callq	clock@PLT # Offset: 114
    00000077: 	pxor	%xmm0, %xmm0
    0000007b: 	movq	%r12, %rdi
    0000007e: 	movq	%rax, end_time(%rip)
    00000085: 	subq	start_time(%rip), %rax
    0000008c: 	cvtsi2sd	%rax, %xmm0
    00000091: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000099: 	callq	_Z13record_resultdPKc # Offset: 153
.Ltmp248:
    0000009e: 	movl	init_value(%rip), %r8d
    000000a5: 	leal	-0x1(%rbp), %eax
    000000a8: 	leaq	0x1(%rbx,%rax), %rcx
    000000ad: 	movl	%r8d, %edx
    000000b0: 	jmp	.Ltmp245 # Offset: 176
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp247:
    000000b8: 	addq	$0x1, %rbx
    000000bc: 	cmpq	%rbx, %rcx
    000000bf: 	je	.Ltmp246 # Offset: 191
.Ltmp245:
    000000c1: 	movzbl	(%rbx), %eax
    000000c4: 	cmpb	%dl, %al
    000000c6: 	je	.Ltmp247 # Offset: 198
    000000c8: 	popq	%rbx
    000000c9: 	movsbl	%al, %ecx
    000000cc: 	popq	%rbp
    000000cd: 	movq	%r12, %rdx
    000000d0: 	leaq	DATAat0x8118(%rip), %rsi
    000000d7: 	popq	%r12
    000000d9: 	movl	$0x1, %edi
    000000de: 	popq	%r13
    000000e0: 	xorl	%eax, %eax
    000000e2: 	popq	%r14
    000000e4: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 228
.Ltmp241:
    000000e9: 	callq	clock@PLT # Offset: 233
    000000ee: 	pxor	%xmm0, %xmm0
    000000f2: 	movq	%r12, %rdi
    000000f5: 	movq	%rax, end_time(%rip)
    000000fc: 	subq	start_time(%rip), %rax
    00000103: 	cvtsi2sd	%rax, %xmm0
    00000108: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000110: 	callq	_Z13record_resultdPKc # Offset: 272
    00000115: 	testl	%ebp, %ebp
    00000117: 	jg	.Ltmp248 # Offset: 279
.Ltmp246:
    00000119: 	popq	%rbx
    0000011a: 	popq	%rbp
    0000011b: 	popq	%r12
    0000011d: 	popq	%r13
    0000011f: 	popq	%r14
    00000121: 	retq # Offset: 289
.Ltmp242:
    00000122: 	callq	clock@PLT # Offset: 290
    00000127: 	popq	%rbx
    00000128: 	pxor	%xmm0, %xmm0
    0000012c: 	popq	%rbp
    0000012d: 	movq	%rax, end_time(%rip)
    00000134: 	movq	%r12, %rdi
    00000137: 	popq	%r12
    00000139: 	subq	start_time(%rip), %rax
    00000140: 	popq	%r13
    00000142: 	popq	%r14
    00000144: 	cvtsi2sd	%rax, %xmm0
    00000149: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000151: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 337
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut1IaEvPKT_PS0_iS2_PKc"

Binary Function "_Z9test_lut2IaEvPKT_PS0_iS2_PKc" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x62d0
  Size        : 0x156
  MaxSize     : 0x160
  Offset      : 0x62d0
  Section     : .text
  Orc Section : .local.text._Z9test_lut2IaEvPKT_PS0_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movq	%rdi, %r14
    00000009: 	pushq	%r13
    0000000b: 	movq	%rcx, %r13
    0000000e: 	pushq	%r12
    00000010: 	movq	%r8, %r12
    00000013: 	pushq	%rbp
    00000014: 	movl	%edx, %ebp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rsi, %rbx
    0000001a: 	callq	clock@PLT # Offset: 26
    0000001f: 	movq	%rax, start_time(%rip)
    00000026: 	movl	iterations(%rip), %eax
    0000002c: 	testl	%eax, %eax
    0000002e: 	jle	.Ltmp249 # Offset: 46
    00000034: 	xorl	%esi, %esi
    00000036: 	movslq	%ebp, %rcx
    00000039: 	testl	%ebp, %ebp
    0000003b: 	jle	.Ltmp250 # Offset: 59
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp252:
    00000048: 	xorl	%eax, %eax
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp251:
    00000050: 	movsbq	(%r14,%rax), %rdx
    00000055: 	movzbl	(%r13,%rdx), %edx
    0000005b: 	movb	%dl, (%rbx,%rax)
    0000005e: 	addq	$0x1, %rax
    00000062: 	cmpq	%rax, %rcx
    00000065: 	jne	.Ltmp251 # Offset: 101
    00000067: 	addl	$0x1, %esi
    0000006a: 	cmpl	iterations(%rip), %esi
    00000070: 	jl	.Ltmp252 # Offset: 112
    00000072: 	callq	clock@PLT # Offset: 114
    00000077: 	pxor	%xmm0, %xmm0
    0000007b: 	movq	%r12, %rdi
    0000007e: 	movq	%rax, end_time(%rip)
    00000085: 	subq	start_time(%rip), %rax
    0000008c: 	cvtsi2sd	%rax, %xmm0
    00000091: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000099: 	callq	_Z13record_resultdPKc # Offset: 153
.Ltmp256:
    0000009e: 	movl	init_value(%rip), %r8d
    000000a5: 	leal	-0x1(%rbp), %eax
    000000a8: 	leaq	0x1(%rbx,%rax), %rcx
    000000ad: 	movl	%r8d, %edx
    000000b0: 	jmp	.Ltmp253 # Offset: 176
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp255:
    000000b8: 	addq	$0x1, %rbx
    000000bc: 	cmpq	%rbx, %rcx
    000000bf: 	je	.Ltmp254 # Offset: 191
.Ltmp253:
    000000c1: 	movzbl	(%rbx), %eax
    000000c4: 	cmpb	%dl, %al
    000000c6: 	je	.Ltmp255 # Offset: 198
    000000c8: 	popq	%rbx
    000000c9: 	movsbl	%al, %ecx
    000000cc: 	popq	%rbp
    000000cd: 	movq	%r12, %rdx
    000000d0: 	leaq	DATAat0x8118(%rip), %rsi
    000000d7: 	popq	%r12
    000000d9: 	movl	$0x1, %edi
    000000de: 	popq	%r13
    000000e0: 	xorl	%eax, %eax
    000000e2: 	popq	%r14
    000000e4: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 228
.Ltmp249:
    000000e9: 	callq	clock@PLT # Offset: 233
    000000ee: 	pxor	%xmm0, %xmm0
    000000f2: 	movq	%r12, %rdi
    000000f5: 	movq	%rax, end_time(%rip)
    000000fc: 	subq	start_time(%rip), %rax
    00000103: 	cvtsi2sd	%rax, %xmm0
    00000108: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000110: 	callq	_Z13record_resultdPKc # Offset: 272
    00000115: 	testl	%ebp, %ebp
    00000117: 	jg	.Ltmp256 # Offset: 279
.Ltmp254:
    00000119: 	popq	%rbx
    0000011a: 	popq	%rbp
    0000011b: 	popq	%r12
    0000011d: 	popq	%r13
    0000011f: 	popq	%r14
    00000121: 	retq # Offset: 289
.Ltmp250:
    00000122: 	callq	clock@PLT # Offset: 290
    00000127: 	popq	%rbx
    00000128: 	pxor	%xmm0, %xmm0
    0000012c: 	popq	%rbp
    0000012d: 	movq	%rax, end_time(%rip)
    00000134: 	movq	%r12, %rdi
    00000137: 	popq	%r12
    00000139: 	subq	start_time(%rip), %rax
    00000140: 	popq	%r13
    00000142: 	popq	%r14
    00000144: 	cvtsi2sd	%rax, %xmm0
    00000149: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000151: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 337
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut2IaEvPKT_PS0_iS2_PKc"

Binary Function "_Z9test_lut3IaEvPKT_PS0_iS2_PKc" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x6430
  Size        : 0x1a8
  MaxSize     : 0x1b0
  Offset      : 0x6430
  Section     : .text
  Orc Section : .local.text._Z9test_lut3IaEvPKT_PS0_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movl	%edx, %r14d
    00000009: 	pushq	%r13
    0000000b: 	movq	%rdi, %r13
    0000000e: 	pushq	%r12
    00000010: 	movq	%r8, %r12
    00000013: 	pushq	%rbp
    00000014: 	movq	%rsi, %rbp
    00000017: 	pushq	%rbx
    00000018: 	movq	%rcx, %rbx
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movq	%rax, start_time(%rip)
    00000027: 	movl	iterations(%rip), %eax
    0000002d: 	testl	%eax, %eax
    0000002f: 	jle	.Ltmp257 # Offset: 47
    00000035: 	leal	-0x4(%r14), %eax
    00000039: 	xorl	%r10d, %r10d
    0000003c: 	shrl	$0x2, %eax
    0000003f: 	movl	%eax, %edx
    00000041: 	leal	0x4(,%rax,4), %r11d
    00000049: 	leaq	0x4(%r13,%rdx,4), %r9
    0000004e: 	nop # Size: 2
.Ltmp261:
    00000050: 	movq	%rbp, %rdx
    00000053: 	movq	%r13, %rax
    00000056: 	cmpl	$0x3, %r14d
    0000005a: 	jle	.Ltmp258 # Offset: 90
.Ltmp259:
    00000060: 	movsbq	(%rax), %rcx
    00000064: 	addq	$0x4, %rax
    00000068: 	addq	$0x4, %rdx
    0000006c: 	movzbl	(%rbx,%rcx), %r8d
    00000071: 	movsbq	-0x3(%rax), %rcx
    00000076: 	movzbl	(%rbx,%rcx), %edi
    0000007a: 	movsbq	-0x2(%rax), %rcx
    0000007f: 	movzbl	(%rbx,%rcx), %esi
    00000083: 	movsbq	-0x1(%rax), %rcx
    00000088: 	movzbl	(%rbx,%rcx), %ecx
    0000008c: 	movb	%r8b, -0x4(%rdx)
    00000090: 	movb	%dil, -0x3(%rdx)
    00000094: 	movb	%sil, -0x2(%rdx)
    00000098: 	movb	%cl, -0x1(%rdx)
    0000009b: 	cmpq	%rax, %r9
    0000009e: 	jne	.Ltmp259 # Offset: 158
    000000a0: 	movl	%r11d, %eax
.Ltmp265:
    000000a3: 	cmpl	%eax, %r14d
    000000a6: 	jle	.Ltmp260 # Offset: 166
    000000a8: 	movslq	%eax, %rdx
    000000ab: 	movsbq	(%r13,%rdx), %rcx
    000000b1: 	movzbl	(%rbx,%rcx), %ecx
    000000b5: 	movb	%cl, (%rbp,%rdx)
    000000b9: 	leal	0x1(%rax), %edx
    000000bc: 	cmpl	%edx, %r14d
    000000bf: 	jle	.Ltmp260 # Offset: 191
    000000c1: 	movslq	%edx, %rdx
    000000c4: 	movsbq	(%r13,%rdx), %rcx
    000000ca: 	movzbl	(%rbx,%rcx), %ecx
    000000ce: 	movb	%cl, (%rbp,%rdx)
    000000d2: 	leal	0x2(%rax), %edx
    000000d5: 	cmpl	%edx, %r14d
    000000d8: 	jle	.Ltmp260 # Offset: 216
    000000da: 	movslq	%edx, %rdx
    000000dd: 	addl	$0x3, %eax
    000000e0: 	movsbq	(%r13,%rdx), %rcx
    000000e6: 	movzbl	(%rbx,%rcx), %ecx
    000000ea: 	movb	%cl, (%rbp,%rdx)
    000000ee: 	cmpl	%eax, %r14d
    000000f1: 	jle	.Ltmp260 # Offset: 241
    000000f3: 	cltq
    000000f5: 	movsbq	(%r13,%rax), %rdx
    000000fb: 	movzbl	(%rbx,%rdx), %edx
    000000ff: 	movb	%dl, (%rbp,%rax)
.Ltmp260:
    00000103: 	addl	$0x1, %r10d
    00000107: 	cmpl	%r10d, iterations(%rip)
    0000010e: 	jg	.Ltmp261 # Offset: 270
.Ltmp257:
    00000114: 	callq	clock@PLT # Offset: 276
    00000119: 	pxor	%xmm0, %xmm0
    0000011d: 	movq	%r12, %rdi
    00000120: 	movq	%rax, end_time(%rip)
    00000127: 	subq	start_time(%rip), %rax
    0000012e: 	cvtsi2sd	%rax, %xmm0
    00000133: 	divsd	DATAat0x90d0(%rip), %xmm0
    0000013b: 	callq	_Z13record_resultdPKc # Offset: 315
    00000140: 	testl	%r14d, %r14d
    00000143: 	jle	.Ltmp262 # Offset: 323
    00000145: 	movl	init_value(%rip), %r8d
    0000014c: 	leal	-0x1(%r14), %eax
    00000150: 	leaq	0x1(%rbp,%rax), %rcx
    00000155: 	movl	%r8d, %edx
    00000158: 	jmp	.Ltmp263 # Offset: 344
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp264:
    00000160: 	addq	$0x1, %rbp
    00000164: 	cmpq	%rcx, %rbp
    00000167: 	je	.Ltmp262 # Offset: 359
.Ltmp263:
    00000169: 	movzbl	(%rbp), %eax
    0000016d: 	cmpb	%dl, %al
    0000016f: 	je	.Ltmp264 # Offset: 367
    00000171: 	popq	%rbx
    00000172: 	movsbl	%al, %ecx
    00000175: 	popq	%rbp
    00000176: 	movq	%r12, %rdx
    00000179: 	leaq	DATAat0x8118(%rip), %rsi
    00000180: 	popq	%r12
    00000182: 	movl	$0x1, %edi
    00000187: 	popq	%r13
    00000189: 	xorl	%eax, %eax
    0000018b: 	popq	%r14
    0000018d: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 397
    00000192: 	nopw	(%rax,%rax) # Size: 6
.Ltmp258:
    00000198: 	xorl	%eax, %eax
    0000019a: 	jmp	.Ltmp265 # Offset: 410
.Ltmp262:
    0000019f: 	popq	%rbx
    000001a0: 	popq	%rbp
    000001a1: 	popq	%r12
    000001a3: 	popq	%r13
    000001a5: 	popq	%r14
    000001a7: 	retq # Offset: 423
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut3IaEvPKT_PS0_iS2_PKc"

Binary Function "_Z9test_lut7IaEvPKT_PS0_iS2_PKc" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x65e0
  Size        : 0x14a
  MaxSize     : 0x150
  Offset      : 0x65e0
  Section     : .text
  Orc Section : .local.text._Z9test_lut7IaEvPKT_PS0_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movl	%edx, %r14d
    00000009: 	pushq	%r13
    0000000b: 	movq	%r8, %r13
    0000000e: 	pushq	%r12
    00000010: 	movq	%rcx, %r12
    00000013: 	pushq	%rbp
    00000014: 	movq	%rdi, %rbp
    00000017: 	pushq	%rbx
    00000018: 	movq	%rsi, %rbx
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movq	%rax, start_time(%rip)
    00000027: 	movl	iterations(%rip), %eax
    0000002d: 	testl	%eax, %eax
    0000002f: 	jle	.Ltmp266 # Offset: 47
    00000035: 	leal	-0x2(%r14), %eax
    00000039: 	leal	-0x1(%r14), %esi
    0000003d: 	xorl	%edi, %edi
    0000003f: 	shrl	%eax
    00000041: 	leal	0x2(%rax,%rax), %r8d
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp270:
    00000050: 	xorl	%eax, %eax
    00000052: 	testl	%esi, %esi
    00000054: 	jle	.Ltmp267 # Offset: 84
    00000056: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp268:
    00000060: 	movsbq	(%rbp,%rax), %rdx
    00000066: 	movzbl	(%r12,%rdx), %ecx
    0000006b: 	movsbq	0x1(%rbp,%rax), %rdx
    00000071: 	movzbl	(%r12,%rdx), %edx
    00000076: 	movb	%cl, (%rbx,%rax)
    00000079: 	movb	%dl, 0x1(%rbx,%rax)
    0000007d: 	addq	$0x2, %rax
    00000081: 	cmpl	%eax, %esi
    00000083: 	jg	.Ltmp268 # Offset: 131
    00000085: 	movl	%r8d, %eax
.Ltmp267:
    00000088: 	cmpl	%eax, %r14d
    0000008b: 	jle	.Ltmp269 # Offset: 139
    0000008d: 	movslq	%eax, %rdx
    00000090: 	addl	$0x1, %eax
    00000093: 	movsbq	(%rbp,%rdx), %rcx
    00000099: 	movzbl	(%r12,%rcx), %ecx
    0000009e: 	movb	%cl, (%rbx,%rdx)
    000000a1: 	cmpl	%eax, %r14d
    000000a4: 	jle	.Ltmp269 # Offset: 164
    000000a6: 	cltq
    000000a8: 	movsbq	(%rbp,%rax), %rdx
    000000ae: 	movzbl	(%r12,%rdx), %edx
    000000b3: 	movb	%dl, (%rbx,%rax)
.Ltmp269:
    000000b6: 	addl	$0x1, %edi
    000000b9: 	cmpl	%edi, iterations(%rip)
    000000bf: 	jg	.Ltmp270 # Offset: 191
.Ltmp266:
    000000c1: 	callq	clock@PLT # Offset: 193
    000000c6: 	pxor	%xmm0, %xmm0
    000000ca: 	movq	%r13, %rdi
    000000cd: 	movq	%rax, end_time(%rip)
    000000d4: 	subq	start_time(%rip), %rax
    000000db: 	cvtsi2sd	%rax, %xmm0
    000000e0: 	divsd	DATAat0x90d0(%rip), %xmm0
    000000e8: 	callq	_Z13record_resultdPKc # Offset: 232
    000000ed: 	testl	%r14d, %r14d
    000000f0: 	jle	.Ltmp271 # Offset: 240
    000000f2: 	movl	init_value(%rip), %r8d
    000000f9: 	leal	-0x1(%r14), %eax
    000000fd: 	leaq	0x1(%rbx,%rax), %rcx
    00000102: 	movl	%r8d, %edx
    00000105: 	jmp	.Ltmp272 # Offset: 261
    00000107: 	nopw	(%rax,%rax) # Size: 9
.Ltmp273:
    00000110: 	addq	$0x1, %rbx
    00000114: 	cmpq	%rbx, %rcx
    00000117: 	je	.Ltmp271 # Offset: 279
.Ltmp272:
    00000119: 	movzbl	(%rbx), %eax
    0000011c: 	cmpb	%dl, %al
    0000011e: 	je	.Ltmp273 # Offset: 286
    00000120: 	popq	%rbx
    00000121: 	movsbl	%al, %ecx
    00000124: 	popq	%rbp
    00000125: 	movq	%r13, %rdx
    00000128: 	popq	%r12
    0000012a: 	leaq	DATAat0x8118(%rip), %rsi
    00000131: 	popq	%r13
    00000133: 	movl	$0x1, %edi
    00000138: 	xorl	%eax, %eax
    0000013a: 	popq	%r14
    0000013c: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 316
.Ltmp271:
    00000141: 	popq	%rbx
    00000142: 	popq	%rbp
    00000143: 	popq	%r12
    00000145: 	popq	%r13
    00000147: 	popq	%r14
    00000149: 	retq # Offset: 329
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut7IaEvPKT_PS0_iS2_PKc"

Binary Function "_Z9test_lut8IaEvPKT_PS0_iS2_PKc" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x6730
  Size        : 0x26d
  MaxSize     : 0x270
  Offset      : 0x6730
  Section     : .text
  Orc Section : .local.text._Z9test_lut8IaEvPKT_PS0_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rcx, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rsi, %rbx
    00000016: 	subq	$0x838, %rsp
    0000001d: 	movq	%rdi, 0x8(%rsp)
    00000022: 	movq	%r8, 0x10(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x828(%rsp)
    00000038: 	xorl	%eax, %eax
    0000003a: 	callq	clock@PLT # Offset: 58
    0000003f: 	movq	%rax, start_time(%rip)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	testl	%eax, %eax
    0000004e: 	jle	.Ltmp274 # Offset: 78
    00000054: 	testl	%ebp, %ebp
    00000056: 	jle	.Ltmp275 # Offset: 86
    0000005c: 	leal	-0x1(%rbp), %eax
    0000005f: 	movl	$0x0, 0x18(%rsp)
    00000067: 	movl	%eax, 0x1c(%rsp)
    0000006b: 	shrl	$0xb, %eax
    0000006e: 	movl	%eax, %r12d
    00000071: 	addl	$0x1, %r12d
    00000075: 	shlq	$0xb, %r12
    00000079: 	nopl	(%rax) # Size: 7
.Ltmp279:
    00000080: 	movq	0x8(%rsp), %r13
    00000085: 	xorl	%r14d, %r14d
    00000088: 	nopl	(%rax,%rax) # Size: 8
.Ltmp278:
    00000090: 	leal	0x800(%r14), %eax
    00000097: 	movl	$0x800, %r10d
    0000009d: 	cmpl	%eax, %ebp
    0000009f: 	jle	.Ltmp276 # Offset: 159
.Ltmp284:
    000000a5: 	xorl	%eax, %eax
    000000a7: 	leaq	0x20(%rsp), %rsi
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp277:
    000000b0: 	movsbq	(%r13,%rax), %rdx
    000000b6: 	movzbl	(%r15,%rdx), %edx
    000000bb: 	movb	%dl, (%rsi,%rax)
    000000be: 	addq	$0x1, %rax
    000000c2: 	cmpq	%rax, %r10
    000000c5: 	ja	.Ltmp277 # Offset: 197
    000000c7: 	leaq	(%rbx,%r14), %rdi
    000000cb: 	movq	%r10, %rdx
    000000ce: 	callq	memcpy@PLT # Offset: 206
.Ltmp285:
    000000d3: 	addq	$0x800, %r14
    000000da: 	addq	$0x800, %r13
    000000e1: 	cmpq	%r14, %r12
    000000e4: 	jne	.Ltmp278 # Offset: 228
    000000e6: 	addl	$0x1, 0x18(%rsp)
    000000eb: 	movl	0x18(%rsp), %eax
    000000ef: 	cmpl	iterations(%rip), %eax
    000000f5: 	jl	.Ltmp279 # Offset: 245
    000000f7: 	callq	clock@PLT # Offset: 247
    000000fc: 	movq	0x10(%rsp), %rdi
    00000101: 	pxor	%xmm0, %xmm0
    00000105: 	movq	%rax, end_time(%rip)
    0000010c: 	subq	start_time(%rip), %rax
    00000113: 	cvtsi2sd	%rax, %xmm0
    00000118: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000120: 	callq	_Z13record_resultdPKc # Offset: 288
.Ltmp286:
    00000125: 	movl	init_value(%rip), %r8d
    0000012c: 	movl	0x1c(%rsp), %eax
    00000130: 	movl	%r8d, %ecx
    00000133: 	leaq	0x1(%rbx,%rax), %rdx
    00000138: 	jmp	.Ltmp280 # Offset: 312
    0000013a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp282:
    00000140: 	addq	$0x1, %rbx
    00000144: 	cmpq	%rdx, %rbx
    00000147: 	je	.Ltmp281 # Offset: 327
.Ltmp280:
    00000149: 	movzbl	(%rbx), %eax
    0000014c: 	cmpb	%cl, %al
    0000014e: 	je	.Ltmp282 # Offset: 334
    00000150: 	movq	0x828(%rsp), %rdx
    00000158: 	subq	%fs:0x28, %rdx
    00000161: 	jne	.Ltmp283 # Offset: 353
    00000167: 	movq	0x10(%rsp), %rdx
    0000016c: 	addq	$0x838, %rsp
    00000173: 	movsbl	%al, %ecx
    00000176: 	leaq	DATAat0x8118(%rip), %rsi
    0000017d: 	popq	%rbx
    0000017e: 	movl	$0x1, %edi
    00000183: 	popq	%rbp
    00000184: 	xorl	%eax, %eax
    00000186: 	popq	%r12
    00000188: 	popq	%r13
    0000018a: 	popq	%r14
    0000018c: 	popq	%r15
    0000018e: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 398
    00000193: 	nopl	(%rax,%rax) # Size: 5
.Ltmp276:
    00000198: 	movl	%ebp, %r10d
    0000019b: 	subl	%r14d, %r10d
    0000019e: 	movslq	%r10d, %r10
    000001a1: 	testq	%r10, %r10
    000001a4: 	jne	.Ltmp284 # Offset: 420
    000001aa: 	jmp	.Ltmp285 # Offset: 426
.Ltmp281:
    000001af: 	movq	0x828(%rsp), %rax
    000001b7: 	subq	%fs:0x28, %rax
    000001c0: 	jne	.Ltmp283 # Offset: 448
    000001c6: 	addq	$0x838, %rsp
    000001cd: 	popq	%rbx
    000001ce: 	popq	%rbp
    000001cf: 	popq	%r12
    000001d1: 	popq	%r13
    000001d3: 	popq	%r14
    000001d5: 	popq	%r15
    000001d7: 	retq # Offset: 471
.Ltmp274:
    000001d8: 	callq	clock@PLT # Offset: 472
    000001dd: 	movq	0x10(%rsp), %rdi
    000001e2: 	pxor	%xmm0, %xmm0
    000001e6: 	movq	%rax, end_time(%rip)
    000001ed: 	subq	start_time(%rip), %rax
    000001f4: 	cvtsi2sd	%rax, %xmm0
    000001f9: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000201: 	callq	_Z13record_resultdPKc # Offset: 513
    00000206: 	testl	%ebp, %ebp
    00000208: 	jle	.Ltmp281 # Offset: 520
    0000020a: 	leal	-0x1(%rbp), %eax
    0000020d: 	movl	%eax, 0x1c(%rsp)
    00000211: 	jmp	.Ltmp286 # Offset: 529
.Ltmp275:
    00000216: 	callq	clock@PLT # Offset: 534
    0000021b: 	movq	%rax, end_time(%rip)
    00000222: 	movq	0x828(%rsp), %rdx
    0000022a: 	subq	%fs:0x28, %rdx
    00000233: 	jne	.Ltmp283 # Offset: 563
    00000235: 	subq	start_time(%rip), %rax
    0000023c: 	pxor	%xmm0, %xmm0
    00000240: 	movq	0x10(%rsp), %rdi
    00000245: 	cvtsi2sd	%rax, %xmm0
    0000024a: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000252: 	addq	$0x838, %rsp
    00000259: 	popq	%rbx
    0000025a: 	popq	%rbp
    0000025b: 	popq	%r12
    0000025d: 	popq	%r13
    0000025f: 	popq	%r14
    00000261: 	popq	%r15
    00000263: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 611
.Ltmp283:
    00000268: 	callq	__stack_chk_fail@PLT # Offset: 616
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut8IaEvPKT_PS0_iS2_PKc"

Binary Function "_Z9test_lut1ItEvPKT_PS0_iS2_PKc" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x69a0
  Size        : 0x14f
  MaxSize     : 0x150
  Offset      : 0x69a0
  Section     : .text
  Orc Section : .local.text._Z9test_lut1ItEvPKT_PS0_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movq	%rdi, %r14
    00000009: 	pushq	%r13
    0000000b: 	movq	%rcx, %r13
    0000000e: 	pushq	%r12
    00000010: 	movq	%r8, %r12
    00000013: 	pushq	%rbp
    00000014: 	movl	%edx, %ebp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rsi, %rbx
    0000001a: 	callq	clock@PLT # Offset: 26
    0000001f: 	movl	iterations(%rip), %edi
    00000025: 	movq	%rax, start_time(%rip)
    0000002c: 	testl	%edi, %edi
    0000002e: 	jle	.Ltmp287 # Offset: 46
    00000034: 	xorl	%esi, %esi
    00000036: 	movslq	%ebp, %rcx
    00000039: 	testl	%ebp, %ebp
    0000003b: 	jle	.Ltmp288 # Offset: 59
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp290:
    00000048: 	xorl	%eax, %eax
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp289:
    00000050: 	movzwl	(%r14,%rax,2), %edx
    00000055: 	movzwl	(%r13,%rdx,2), %edx
    0000005b: 	movw	%dx, (%rbx,%rax,2)
    0000005f: 	addq	$0x1, %rax
    00000063: 	cmpq	%rax, %rcx
    00000066: 	jne	.Ltmp289 # Offset: 102
    00000068: 	addl	$0x1, %esi
    0000006b: 	cmpl	%edi, %esi
    0000006d: 	jne	.Ltmp290 # Offset: 109
    0000006f: 	callq	clock@PLT # Offset: 111
    00000074: 	pxor	%xmm0, %xmm0
    00000078: 	movq	%r12, %rdi
    0000007b: 	movq	%rax, end_time(%rip)
    00000082: 	subq	start_time(%rip), %rax
    00000089: 	cvtsi2sd	%rax, %xmm0
    0000008e: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000096: 	callq	_Z13record_resultdPKc # Offset: 150
.Ltmp294:
    0000009b: 	movl	init_value(%rip), %r8d
    000000a2: 	leal	-0x1(%rbp), %eax
    000000a5: 	leaq	0x2(%rbx,%rax,2), %rcx
    000000aa: 	movl	%r8d, %edx
    000000ad: 	jmp	.Ltmp291 # Offset: 173
    000000af: 	nop # Size: 1
.Ltmp293:
    000000b0: 	addq	$0x2, %rbx
    000000b4: 	cmpq	%rcx, %rbx
    000000b7: 	je	.Ltmp292 # Offset: 183
.Ltmp291:
    000000b9: 	movzwl	(%rbx), %eax
    000000bc: 	cmpw	%dx, %ax
    000000bf: 	je	.Ltmp293 # Offset: 191
    000000c1: 	popq	%rbx
    000000c2: 	movzwl	%ax, %ecx
    000000c5: 	popq	%rbp
    000000c6: 	movq	%r12, %rdx
    000000c9: 	leaq	DATAat0x8118(%rip), %rsi
    000000d0: 	popq	%r12
    000000d2: 	movl	$0x1, %edi
    000000d7: 	popq	%r13
    000000d9: 	xorl	%eax, %eax
    000000db: 	popq	%r14
    000000dd: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 221
.Ltmp287:
    000000e2: 	callq	clock@PLT # Offset: 226
    000000e7: 	pxor	%xmm0, %xmm0
    000000eb: 	movq	%r12, %rdi
    000000ee: 	movq	%rax, end_time(%rip)
    000000f5: 	subq	start_time(%rip), %rax
    000000fc: 	cvtsi2sd	%rax, %xmm0
    00000101: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000109: 	callq	_Z13record_resultdPKc # Offset: 265
    0000010e: 	testl	%ebp, %ebp
    00000110: 	jg	.Ltmp294 # Offset: 272
.Ltmp292:
    00000112: 	popq	%rbx
    00000113: 	popq	%rbp
    00000114: 	popq	%r12
    00000116: 	popq	%r13
    00000118: 	popq	%r14
    0000011a: 	retq # Offset: 282
.Ltmp288:
    0000011b: 	callq	clock@PLT # Offset: 283
    00000120: 	popq	%rbx
    00000121: 	pxor	%xmm0, %xmm0
    00000125: 	popq	%rbp
    00000126: 	movq	%rax, end_time(%rip)
    0000012d: 	movq	%r12, %rdi
    00000130: 	popq	%r12
    00000132: 	subq	start_time(%rip), %rax
    00000139: 	popq	%r13
    0000013b: 	popq	%r14
    0000013d: 	cvtsi2sd	%rax, %xmm0
    00000142: 	divsd	DATAat0x90d0(%rip), %xmm0
    0000014a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 330
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut1ItEvPKT_PS0_iS2_PKc"

Binary Function "_Z9test_lut2ItEvPKT_PS0_iS2_PKc" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x6af0
  Size        : 0x14f
  MaxSize     : 0x150
  Offset      : 0x6af0
  Section     : .text
  Orc Section : .local.text._Z9test_lut2ItEvPKT_PS0_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movq	%rdi, %r14
    00000009: 	pushq	%r13
    0000000b: 	movq	%rcx, %r13
    0000000e: 	pushq	%r12
    00000010: 	movq	%r8, %r12
    00000013: 	pushq	%rbp
    00000014: 	movl	%edx, %ebp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rsi, %rbx
    0000001a: 	callq	clock@PLT # Offset: 26
    0000001f: 	movl	iterations(%rip), %edi
    00000025: 	movq	%rax, start_time(%rip)
    0000002c: 	testl	%edi, %edi
    0000002e: 	jle	.Ltmp295 # Offset: 46
    00000034: 	xorl	%esi, %esi
    00000036: 	movslq	%ebp, %rcx
    00000039: 	testl	%ebp, %ebp
    0000003b: 	jle	.Ltmp296 # Offset: 59
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp298:
    00000048: 	xorl	%eax, %eax
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp297:
    00000050: 	movzwl	(%r14,%rax,2), %edx
    00000055: 	movzwl	(%r13,%rdx,2), %edx
    0000005b: 	movw	%dx, (%rbx,%rax,2)
    0000005f: 	addq	$0x1, %rax
    00000063: 	cmpq	%rax, %rcx
    00000066: 	jne	.Ltmp297 # Offset: 102
    00000068: 	addl	$0x1, %esi
    0000006b: 	cmpl	%edi, %esi
    0000006d: 	jne	.Ltmp298 # Offset: 109
    0000006f: 	callq	clock@PLT # Offset: 111
    00000074: 	pxor	%xmm0, %xmm0
    00000078: 	movq	%r12, %rdi
    0000007b: 	movq	%rax, end_time(%rip)
    00000082: 	subq	start_time(%rip), %rax
    00000089: 	cvtsi2sd	%rax, %xmm0
    0000008e: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000096: 	callq	_Z13record_resultdPKc # Offset: 150
.Ltmp302:
    0000009b: 	movl	init_value(%rip), %r8d
    000000a2: 	leal	-0x1(%rbp), %eax
    000000a5: 	leaq	0x2(%rbx,%rax,2), %rcx
    000000aa: 	movl	%r8d, %edx
    000000ad: 	jmp	.Ltmp299 # Offset: 173
    000000af: 	nop # Size: 1
.Ltmp301:
    000000b0: 	addq	$0x2, %rbx
    000000b4: 	cmpq	%rcx, %rbx
    000000b7: 	je	.Ltmp300 # Offset: 183
.Ltmp299:
    000000b9: 	movzwl	(%rbx), %eax
    000000bc: 	cmpw	%dx, %ax
    000000bf: 	je	.Ltmp301 # Offset: 191
    000000c1: 	popq	%rbx
    000000c2: 	movzwl	%ax, %ecx
    000000c5: 	popq	%rbp
    000000c6: 	movq	%r12, %rdx
    000000c9: 	leaq	DATAat0x8118(%rip), %rsi
    000000d0: 	popq	%r12
    000000d2: 	movl	$0x1, %edi
    000000d7: 	popq	%r13
    000000d9: 	xorl	%eax, %eax
    000000db: 	popq	%r14
    000000dd: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 221
.Ltmp295:
    000000e2: 	callq	clock@PLT # Offset: 226
    000000e7: 	pxor	%xmm0, %xmm0
    000000eb: 	movq	%r12, %rdi
    000000ee: 	movq	%rax, end_time(%rip)
    000000f5: 	subq	start_time(%rip), %rax
    000000fc: 	cvtsi2sd	%rax, %xmm0
    00000101: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000109: 	callq	_Z13record_resultdPKc # Offset: 265
    0000010e: 	testl	%ebp, %ebp
    00000110: 	jg	.Ltmp302 # Offset: 272
.Ltmp300:
    00000112: 	popq	%rbx
    00000113: 	popq	%rbp
    00000114: 	popq	%r12
    00000116: 	popq	%r13
    00000118: 	popq	%r14
    0000011a: 	retq # Offset: 282
.Ltmp296:
    0000011b: 	callq	clock@PLT # Offset: 283
    00000120: 	popq	%rbx
    00000121: 	pxor	%xmm0, %xmm0
    00000125: 	popq	%rbp
    00000126: 	movq	%rax, end_time(%rip)
    0000012d: 	movq	%r12, %rdi
    00000130: 	popq	%r12
    00000132: 	subq	start_time(%rip), %rax
    00000139: 	popq	%r13
    0000013b: 	popq	%r14
    0000013d: 	cvtsi2sd	%rax, %xmm0
    00000142: 	divsd	DATAat0x90d0(%rip), %xmm0
    0000014a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 330
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut2ItEvPKT_PS0_iS2_PKc"

Binary Function "_Z9test_lut3ItEvPKT_PS0_iS2_PKc" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x6c40
  Size        : 0x1ad
  MaxSize     : 0x1b0
  Offset      : 0x6c40
  Section     : .text
  Orc Section : .local.text._Z9test_lut3ItEvPKT_PS0_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movl	%edx, %r14d
    00000009: 	pushq	%r13
    0000000b: 	movq	%rsi, %r13
    0000000e: 	pushq	%r12
    00000010: 	movq	%r8, %r12
    00000013: 	pushq	%rbp
    00000014: 	movq	%rcx, %rbp
    00000017: 	pushq	%rbx
    00000018: 	movq	%rdi, %rbx
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movl	iterations(%rip), %edi
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	testl	%edi, %edi
    0000002f: 	jle	.Ltmp303 # Offset: 47
    00000035: 	leal	-0x4(%r14), %eax
    00000039: 	leal	-0x3(%r14), %ecx
    0000003d: 	xorl	%esi, %esi
    0000003f: 	shrl	$0x2, %eax
    00000042: 	leal	0x4(,%rax,4), %r8d
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp307:
    00000050: 	xorl	%edx, %edx
    00000052: 	xorl	%eax, %eax
    00000054: 	testl	%ecx, %ecx
    00000056: 	jle	.Ltmp304 # Offset: 86
    00000058: 	nopl	(%rax,%rax) # Size: 8
.Ltmp305:
    00000060: 	movzwl	0x6(%rbx,%rdx,2), %eax
    00000065: 	movzwl	0x4(%rbx,%rdx,2), %r11d
    0000006b: 	movzwl	0x2(%rbx,%rdx,2), %r10d
    00000071: 	movzwl	(%rbx,%rdx,2), %r9d
    00000076: 	movzwl	(%rbp,%rax,2), %eax
    0000007b: 	movzwl	(%rbp,%r11,2), %r11d
    00000081: 	movzwl	(%rbp,%r10,2), %r10d
    00000087: 	movzwl	(%rbp,%r9,2), %r9d
    0000008d: 	shlq	$0x10, %rax
    00000091: 	orq	%r11, %rax
    00000094: 	shlq	$0x10, %rax
    00000098: 	orq	%r10, %rax
    0000009b: 	shlq	$0x10, %rax
    0000009f: 	orq	%r9, %rax
    000000a2: 	movq	%rax, (%r13,%rdx,2)
    000000a7: 	addq	$0x4, %rdx
    000000ab: 	cmpl	%edx, %ecx
    000000ad: 	jg	.Ltmp305 # Offset: 173
    000000af: 	movl	%r8d, %eax
.Ltmp304:
    000000b2: 	cmpl	%eax, %r14d
    000000b5: 	jle	.Ltmp306 # Offset: 181
    000000b7: 	movslq	%eax, %r9
    000000ba: 	movzwl	(%rbx,%r9,2), %r10d
    000000bf: 	leaq	(%r9,%r9), %rdx
    000000c3: 	movzwl	(%rbp,%r10,2), %r10d
    000000c9: 	movw	%r10w, (%r13,%r9,2)
    000000cf: 	leal	0x1(%rax), %r9d
    000000d3: 	cmpl	%r9d, %r14d
    000000d6: 	jle	.Ltmp306 # Offset: 214
    000000d8: 	movzwl	0x2(%rbx,%rdx), %r9d
    000000de: 	movzwl	(%rbp,%r9,2), %r9d
    000000e4: 	movw	%r9w, 0x2(%r13,%rdx)
    000000ea: 	leal	0x2(%rax), %r9d
    000000ee: 	cmpl	%r9d, %r14d
    000000f1: 	jle	.Ltmp306 # Offset: 241
    000000f3: 	movzwl	0x4(%rbx,%rdx), %r9d
    000000f9: 	addl	$0x3, %eax
    000000fc: 	movzwl	(%rbp,%r9,2), %r9d
    00000102: 	movw	%r9w, 0x4(%r13,%rdx)
    00000108: 	cmpl	%eax, %r14d
    0000010b: 	jle	.Ltmp306 # Offset: 267
    0000010d: 	movzwl	0x6(%rbx,%rdx), %eax
    00000112: 	movzwl	(%rbp,%rax,2), %eax
    00000117: 	movw	%ax, 0x6(%r13,%rdx)
.Ltmp306:
    0000011d: 	addl	$0x1, %esi
    00000120: 	cmpl	%edi, %esi
    00000122: 	jne	.Ltmp307 # Offset: 290
.Ltmp303:
    00000128: 	callq	clock@PLT # Offset: 296
    0000012d: 	pxor	%xmm0, %xmm0
    00000131: 	movq	%r12, %rdi
    00000134: 	movq	%rax, end_time(%rip)
    0000013b: 	subq	start_time(%rip), %rax
    00000142: 	cvtsi2sd	%rax, %xmm0
    00000147: 	divsd	DATAat0x90d0(%rip), %xmm0
    0000014f: 	callq	_Z13record_resultdPKc # Offset: 335
    00000154: 	testl	%r14d, %r14d
    00000157: 	jle	.Ltmp308 # Offset: 343
    00000159: 	movl	init_value(%rip), %r8d
    00000160: 	leal	-0x1(%r14), %eax
    00000164: 	leaq	0x2(%r13,%rax,2), %rcx
    00000169: 	movl	%r8d, %edx
    0000016c: 	jmp	.Ltmp309 # Offset: 364
    0000016e: 	nop # Size: 2
.Ltmp310:
    00000170: 	addq	$0x2, %r13
    00000174: 	cmpq	%rcx, %r13
    00000177: 	je	.Ltmp308 # Offset: 375
.Ltmp309:
    00000179: 	movzwl	(%r13), %eax
    0000017e: 	cmpw	%dx, %ax
    00000181: 	je	.Ltmp310 # Offset: 385
    00000183: 	popq	%rbx
    00000184: 	movzwl	%ax, %ecx
    00000187: 	popq	%rbp
    00000188: 	movq	%r12, %rdx
    0000018b: 	leaq	DATAat0x8118(%rip), %rsi
    00000192: 	popq	%r12
    00000194: 	movl	$0x1, %edi
    00000199: 	popq	%r13
    0000019b: 	xorl	%eax, %eax
    0000019d: 	popq	%r14
    0000019f: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 415
.Ltmp308:
    000001a4: 	popq	%rbx
    000001a5: 	popq	%rbp
    000001a6: 	popq	%r12
    000001a8: 	popq	%r13
    000001aa: 	popq	%r14
    000001ac: 	retq # Offset: 428
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut3ItEvPKT_PS0_iS2_PKc"

Binary Function "_Z9test_lut7ItEvPKT_PS0_iS2_PKc" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x6df0
  Size        : 0x14b
  MaxSize     : 0x150
  Offset      : 0x6df0
  Section     : .text
  Orc Section : .local.text._Z9test_lut7ItEvPKT_PS0_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movl	%edx, %r14d
    00000009: 	pushq	%r13
    0000000b: 	movq	%r8, %r13
    0000000e: 	pushq	%r12
    00000010: 	movq	%rcx, %r12
    00000013: 	pushq	%rbp
    00000014: 	movq	%rdi, %rbp
    00000017: 	pushq	%rbx
    00000018: 	movq	%rsi, %rbx
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movl	iterations(%rip), %r8d
    00000027: 	movq	%rax, start_time(%rip)
    0000002e: 	testl	%r8d, %r8d
    00000031: 	jle	.Ltmp311 # Offset: 49
    00000037: 	leal	-0x2(%r14), %eax
    0000003b: 	leal	-0x1(%r14), %esi
    0000003f: 	xorl	%edi, %edi
    00000041: 	shrl	%eax
    00000043: 	leal	0x2(%rax,%rax), %r9d
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp315:
    00000050: 	xorl	%eax, %eax
    00000052: 	testl	%esi, %esi
    00000054: 	jle	.Ltmp312 # Offset: 84
    00000056: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp313:
    00000060: 	movzwl	(%rbp,%rax,2), %edx
    00000065: 	movzwl	(%r12,%rdx,2), %ecx
    0000006a: 	movzwl	0x2(%rbp,%rax,2), %edx
    0000006f: 	movzwl	(%r12,%rdx,2), %edx
    00000074: 	movw	%cx, (%rbx,%rax,2)
    00000078: 	movw	%dx, 0x2(%rbx,%rax,2)
    0000007d: 	addq	$0x2, %rax
    00000081: 	cmpl	%eax, %esi
    00000083: 	jg	.Ltmp313 # Offset: 131
    00000085: 	movl	%r9d, %eax
.Ltmp312:
    00000088: 	cmpl	%eax, %r14d
    0000008b: 	jle	.Ltmp314 # Offset: 139
    0000008d: 	movslq	%eax, %rdx
    00000090: 	addl	$0x1, %eax
    00000093: 	movzwl	(%rbp,%rdx,2), %ecx
    00000098: 	leaq	(%rdx,%rdx), %r10
    0000009c: 	movzwl	(%r12,%rcx,2), %ecx
    000000a1: 	movw	%cx, (%rbx,%rdx,2)
    000000a5: 	cmpl	%eax, %r14d
    000000a8: 	jle	.Ltmp314 # Offset: 168
    000000aa: 	movzwl	0x2(%rbp,%r10), %eax
    000000b0: 	movzwl	(%r12,%rax,2), %eax
    000000b5: 	movw	%ax, 0x2(%rbx,%r10)
.Ltmp314:
    000000bb: 	addl	$0x1, %edi
    000000be: 	cmpl	%r8d, %edi
    000000c1: 	jne	.Ltmp315 # Offset: 193
.Ltmp311:
    000000c3: 	callq	clock@PLT # Offset: 195
    000000c8: 	pxor	%xmm0, %xmm0
    000000cc: 	movq	%r13, %rdi
    000000cf: 	movq	%rax, end_time(%rip)
    000000d6: 	subq	start_time(%rip), %rax
    000000dd: 	cvtsi2sd	%rax, %xmm0
    000000e2: 	divsd	DATAat0x90d0(%rip), %xmm0
    000000ea: 	callq	_Z13record_resultdPKc # Offset: 234
    000000ef: 	testl	%r14d, %r14d
    000000f2: 	jle	.Ltmp316 # Offset: 242
    000000f4: 	movl	init_value(%rip), %r8d
    000000fb: 	leal	-0x1(%r14), %eax
    000000ff: 	leaq	0x2(%rbx,%rax,2), %rcx
    00000104: 	movl	%r8d, %edx
    00000107: 	jmp	.Ltmp317 # Offset: 263
    00000109: 	nopl	(%rax) # Size: 7
.Ltmp318:
    00000110: 	addq	$0x2, %rbx
    00000114: 	cmpq	%rbx, %rcx
    00000117: 	je	.Ltmp316 # Offset: 279
.Ltmp317:
    00000119: 	movzwl	(%rbx), %eax
    0000011c: 	cmpw	%dx, %ax
    0000011f: 	je	.Ltmp318 # Offset: 287
    00000121: 	popq	%rbx
    00000122: 	movzwl	%ax, %ecx
    00000125: 	popq	%rbp
    00000126: 	movq	%r13, %rdx
    00000129: 	popq	%r12
    0000012b: 	leaq	DATAat0x8118(%rip), %rsi
    00000132: 	popq	%r13
    00000134: 	movl	$0x1, %edi
    00000139: 	xorl	%eax, %eax
    0000013b: 	popq	%r14
    0000013d: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 317
.Ltmp316:
    00000142: 	popq	%rbx
    00000143: 	popq	%rbp
    00000144: 	popq	%r12
    00000146: 	popq	%r13
    00000148: 	popq	%r14
    0000014a: 	retq # Offset: 330
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut7ItEvPKT_PS0_iS2_PKc"

Binary Function "_Z9test_lut8ItEvPKT_PS0_iS2_PKc" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0x6f40
  Size        : 0x2e9
  MaxSize     : 0x2f0
  Offset      : 0x6f40
  Section     : .text
  Orc Section : .local.text._Z9test_lut8ItEvPKT_PS0_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rsi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rcx, %rbx
    00000016: 	subq	$0x838, %rsp
    0000001d: 	movq	%rdi, 0x8(%rsp)
    00000022: 	movq	%r8, 0x10(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x828(%rsp)
    00000038: 	xorl	%eax, %eax
    0000003a: 	callq	clock@PLT # Offset: 58
    0000003f: 	movl	iterations(%rip), %r13d
    00000046: 	movq	%rax, start_time(%rip)
    0000004d: 	testl	%r13d, %r13d
    00000050: 	jle	.Ltmp319 # Offset: 80
    00000056: 	leal	-0x1(%rbp), %eax
    00000059: 	xorl	%r12d, %r12d
    0000005c: 	leaq	0x20(%rsp), %rdx
    00000061: 	movl	%eax, 0x1c(%rsp)
    00000065: 	andl	$0xfffffc00, %eax
    0000006a: 	movl	%eax, %r11d
    0000006d: 	testl	%ebp, %ebp
    0000006f: 	jle	.Ltmp320 # Offset: 111
    00000075: 	nopl	(%rax) # Size: 3
.Ltmp328:
    00000078: 	movq	0x8(%rsp), %rax
    0000007d: 	movq	%r14, %r8
    00000080: 	xorl	%r9d, %r9d
    00000083: 	nopl	(%rax,%rax) # Size: 5
.Ltmp327:
    00000088: 	movl	%r9d, %r10d
    0000008b: 	addl	$0x400, %r9d
    00000092: 	movl	$0x400, %edi
    00000097: 	cmpl	%r9d, %ebp
    0000009a: 	jle	.Ltmp321 # Offset: 154
.Ltmp333:
    000000a0: 	xorl	%ecx, %ecx
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp322:
    000000a8: 	movzwl	(%rax,%rcx,2), %esi
    000000ac: 	movzwl	(%rbx,%rsi,2), %esi
    000000b0: 	movw	%si, (%rdx,%rcx,2)
    000000b4: 	addq	$0x1, %rcx
    000000b8: 	cmpq	%rcx, %rdi
    000000bb: 	ja	.Ltmp322 # Offset: 187
    000000bd: 	leaq	(%rdi,%rdi), %rcx
    000000c1: 	cmpl	$0x8, %ecx
    000000c4: 	jae	.Ltmp323 # Offset: 196
    000000ca: 	testb	$0x4, %cl
    000000cd: 	jne	.Ltmp324 # Offset: 205
    000000d3: 	testl	%ecx, %ecx
    000000d5: 	je	.Ltmp325 # Offset: 213
    000000d7: 	movzbl	(%rdx), %esi
    000000da: 	movb	%sil, (%r8)
    000000dd: 	testb	$0x2, %cl
    000000e0: 	jne	.Ltmp326 # Offset: 224
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp325:
    000000f0: 	addq	$0x800, %r8
    000000f7: 	addq	$0x800, %rax
    000000fd: 	cmpl	%r10d, %r11d
    00000100: 	jne	.Ltmp327 # Offset: 256
    00000102: 	addl	$0x1, %r12d
    00000106: 	cmpl	%r13d, %r12d
    00000109: 	jne	.Ltmp328 # Offset: 265
    0000010f: 	callq	clock@PLT # Offset: 271
    00000114: 	movq	0x10(%rsp), %rdi
    00000119: 	pxor	%xmm0, %xmm0
    0000011d: 	movq	%rax, end_time(%rip)
    00000124: 	subq	start_time(%rip), %rax
    0000012b: 	cvtsi2sd	%rax, %xmm0
    00000130: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000138: 	callq	_Z13record_resultdPKc # Offset: 312
.Ltmp334:
    0000013d: 	movl	init_value(%rip), %r8d
    00000144: 	movl	0x1c(%rsp), %edx
    00000148: 	movq	%r14, %rax
    0000014b: 	movl	%r8d, %esi
    0000014e: 	leaq	0x2(%r14,%rdx,2), %rcx
    00000153: 	jmp	.Ltmp329 # Offset: 339
    00000155: 	nopl	(%rax) # Size: 3
.Ltmp331:
    00000158: 	addq	$0x2, %rax
    0000015c: 	cmpq	%rcx, %rax
    0000015f: 	je	.Ltmp330 # Offset: 351
.Ltmp329:
    00000165: 	movzwl	(%rax), %edx
    00000168: 	cmpw	%si, %dx
    0000016b: 	je	.Ltmp331 # Offset: 363
    0000016d: 	movq	0x828(%rsp), %rax
    00000175: 	subq	%fs:0x28, %rax
    0000017e: 	jne	.Ltmp332 # Offset: 382
    00000184: 	movzwl	%dx, %ecx
    00000187: 	movq	0x10(%rsp), %rdx
    0000018c: 	addq	$0x838, %rsp
    00000193: 	xorl	%eax, %eax
    00000195: 	popq	%rbx
    00000196: 	leaq	DATAat0x8118(%rip), %rsi
    0000019d: 	popq	%rbp
    0000019e: 	movl	$0x1, %edi
    000001a3: 	popq	%r12
    000001a5: 	popq	%r13
    000001a7: 	popq	%r14
    000001a9: 	popq	%r15
    000001ab: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 427
.Ltmp321:
    000001b0: 	movl	%ebp, %edi
    000001b2: 	subl	%r10d, %edi
    000001b5: 	movslq	%edi, %rdi
    000001b8: 	testq	%rdi, %rdi
    000001bb: 	jne	.Ltmp333 # Offset: 443
    000001c1: 	jmp	.Ltmp325 # Offset: 449
    000001c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp323:
    000001d0: 	movq	(%rdx), %rsi
    000001d3: 	movq	%r8, %r15
    000001d6: 	movq	%rsi, (%r8)
    000001d9: 	movl	%ecx, %esi
    000001db: 	movq	-0x8(%rdx,%rsi), %rdi
    000001e0: 	movq	%rdi, -0x8(%r8,%rsi)
    000001e5: 	leaq	0x8(%r8), %rdi
    000001e9: 	movq	%rdx, %rsi
    000001ec: 	andq	$-0x8, %rdi
    000001f0: 	subq	%rdi, %r15
    000001f3: 	addl	%r15d, %ecx
    000001f6: 	subq	%r15, %rsi
    000001f9: 	shrl	$0x3, %ecx
    000001fc: 	rep		movsq	(%rsi), %es:(%rdi)
    000001ff: 	jmp	.Ltmp325 # Offset: 511
.Ltmp324:
    00000204: 	movl	(%rdx), %esi
    00000206: 	movl	%ecx, %ecx
    00000208: 	movl	%esi, (%r8)
    0000020b: 	movl	-0x4(%rdx,%rcx), %esi
    0000020f: 	movl	%esi, -0x4(%r8,%rcx)
    00000214: 	jmp	.Ltmp325 # Offset: 532
.Ltmp326:
    00000219: 	movl	%ecx, %ecx
    0000021b: 	movzwl	-0x2(%rdx,%rcx), %esi
    00000220: 	movw	%si, -0x2(%r8,%rcx)
    00000226: 	jmp	.Ltmp325 # Offset: 550
.Ltmp330:
    0000022b: 	movq	0x828(%rsp), %rax
    00000233: 	subq	%fs:0x28, %rax
    0000023c: 	jne	.Ltmp332 # Offset: 572
    00000242: 	addq	$0x838, %rsp
    00000249: 	popq	%rbx
    0000024a: 	popq	%rbp
    0000024b: 	popq	%r12
    0000024d: 	popq	%r13
    0000024f: 	popq	%r14
    00000251: 	popq	%r15
    00000253: 	retq # Offset: 595
.Ltmp319:
    00000254: 	callq	clock@PLT # Offset: 596
    00000259: 	movq	0x10(%rsp), %rdi
    0000025e: 	pxor	%xmm0, %xmm0
    00000262: 	movq	%rax, end_time(%rip)
    00000269: 	subq	start_time(%rip), %rax
    00000270: 	cvtsi2sd	%rax, %xmm0
    00000275: 	divsd	DATAat0x90d0(%rip), %xmm0
    0000027d: 	callq	_Z13record_resultdPKc # Offset: 637
    00000282: 	testl	%ebp, %ebp
    00000284: 	jle	.Ltmp330 # Offset: 644
    00000286: 	leal	-0x1(%rbp), %eax
    00000289: 	movl	%eax, 0x1c(%rsp)
    0000028d: 	jmp	.Ltmp334 # Offset: 653
.Ltmp320:
    00000292: 	callq	clock@PLT # Offset: 658
    00000297: 	movq	%rax, end_time(%rip)
    0000029e: 	movq	0x828(%rsp), %rdx
    000002a6: 	subq	%fs:0x28, %rdx
    000002af: 	jne	.Ltmp332 # Offset: 687
    000002b1: 	subq	start_time(%rip), %rax
    000002b8: 	pxor	%xmm0, %xmm0
    000002bc: 	movq	0x10(%rsp), %rdi
    000002c1: 	cvtsi2sd	%rax, %xmm0
    000002c6: 	divsd	DATAat0x90d0(%rip), %xmm0
    000002ce: 	addq	$0x838, %rsp
    000002d5: 	popq	%rbx
    000002d6: 	popq	%rbp
    000002d7: 	popq	%r12
    000002d9: 	popq	%r13
    000002db: 	popq	%r14
    000002dd: 	popq	%r15
    000002df: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 735
.Ltmp332:
    000002e4: 	callq	__stack_chk_fail@PLT # Offset: 740
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut8ItEvPKT_PS0_iS2_PKc"

Binary Function "_Z9test_lut1IsEvPKT_PS0_iS2_PKc" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0x7230
  Size        : 0x14f
  MaxSize     : 0x150
  Offset      : 0x7230
  Section     : .text
  Orc Section : .local.text._Z9test_lut1IsEvPKT_PS0_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movq	%rdi, %r14
    00000009: 	pushq	%r13
    0000000b: 	movq	%rcx, %r13
    0000000e: 	pushq	%r12
    00000010: 	movq	%r8, %r12
    00000013: 	pushq	%rbp
    00000014: 	movl	%edx, %ebp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rsi, %rbx
    0000001a: 	callq	clock@PLT # Offset: 26
    0000001f: 	movl	iterations(%rip), %edi
    00000025: 	movq	%rax, start_time(%rip)
    0000002c: 	testl	%edi, %edi
    0000002e: 	jle	.Ltmp335 # Offset: 46
    00000034: 	xorl	%esi, %esi
    00000036: 	movslq	%ebp, %rcx
    00000039: 	testl	%ebp, %ebp
    0000003b: 	jle	.Ltmp336 # Offset: 59
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp338:
    00000048: 	xorl	%eax, %eax
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp337:
    00000050: 	movswq	(%r14,%rax,2), %rdx
    00000055: 	movzwl	(%r13,%rdx,2), %edx
    0000005b: 	movw	%dx, (%rbx,%rax,2)
    0000005f: 	addq	$0x1, %rax
    00000063: 	cmpq	%rax, %rcx
    00000066: 	jne	.Ltmp337 # Offset: 102
    00000068: 	addl	$0x1, %esi
    0000006b: 	cmpl	%edi, %esi
    0000006d: 	jne	.Ltmp338 # Offset: 109
    0000006f: 	callq	clock@PLT # Offset: 111
    00000074: 	pxor	%xmm0, %xmm0
    00000078: 	movq	%r12, %rdi
    0000007b: 	movq	%rax, end_time(%rip)
    00000082: 	subq	start_time(%rip), %rax
    00000089: 	cvtsi2sd	%rax, %xmm0
    0000008e: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000096: 	callq	_Z13record_resultdPKc # Offset: 150
.Ltmp342:
    0000009b: 	movl	init_value(%rip), %r8d
    000000a2: 	leal	-0x1(%rbp), %eax
    000000a5: 	leaq	0x2(%rbx,%rax,2), %rcx
    000000aa: 	movl	%r8d, %edx
    000000ad: 	jmp	.Ltmp339 # Offset: 173
    000000af: 	nop # Size: 1
.Ltmp341:
    000000b0: 	addq	$0x2, %rbx
    000000b4: 	cmpq	%rcx, %rbx
    000000b7: 	je	.Ltmp340 # Offset: 183
.Ltmp339:
    000000b9: 	movzwl	(%rbx), %eax
    000000bc: 	cmpw	%dx, %ax
    000000bf: 	je	.Ltmp341 # Offset: 191
    000000c1: 	popq	%rbx
    000000c2: 	movswl	%ax, %ecx
    000000c5: 	popq	%rbp
    000000c6: 	movq	%r12, %rdx
    000000c9: 	leaq	DATAat0x8118(%rip), %rsi
    000000d0: 	popq	%r12
    000000d2: 	movl	$0x1, %edi
    000000d7: 	popq	%r13
    000000d9: 	xorl	%eax, %eax
    000000db: 	popq	%r14
    000000dd: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 221
.Ltmp335:
    000000e2: 	callq	clock@PLT # Offset: 226
    000000e7: 	pxor	%xmm0, %xmm0
    000000eb: 	movq	%r12, %rdi
    000000ee: 	movq	%rax, end_time(%rip)
    000000f5: 	subq	start_time(%rip), %rax
    000000fc: 	cvtsi2sd	%rax, %xmm0
    00000101: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000109: 	callq	_Z13record_resultdPKc # Offset: 265
    0000010e: 	testl	%ebp, %ebp
    00000110: 	jg	.Ltmp342 # Offset: 272
.Ltmp340:
    00000112: 	popq	%rbx
    00000113: 	popq	%rbp
    00000114: 	popq	%r12
    00000116: 	popq	%r13
    00000118: 	popq	%r14
    0000011a: 	retq # Offset: 282
.Ltmp336:
    0000011b: 	callq	clock@PLT # Offset: 283
    00000120: 	popq	%rbx
    00000121: 	pxor	%xmm0, %xmm0
    00000125: 	popq	%rbp
    00000126: 	movq	%rax, end_time(%rip)
    0000012d: 	movq	%r12, %rdi
    00000130: 	popq	%r12
    00000132: 	subq	start_time(%rip), %rax
    00000139: 	popq	%r13
    0000013b: 	popq	%r14
    0000013d: 	cvtsi2sd	%rax, %xmm0
    00000142: 	divsd	DATAat0x90d0(%rip), %xmm0
    0000014a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 330
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut1IsEvPKT_PS0_iS2_PKc"

Binary Function "_Z9test_lut2IsEvPKT_PS0_iS2_PKc" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0x7380
  Size        : 0x14f
  MaxSize     : 0x150
  Offset      : 0x7380
  Section     : .text
  Orc Section : .local.text._Z9test_lut2IsEvPKT_PS0_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movq	%rdi, %r14
    00000009: 	pushq	%r13
    0000000b: 	movq	%rcx, %r13
    0000000e: 	pushq	%r12
    00000010: 	movq	%r8, %r12
    00000013: 	pushq	%rbp
    00000014: 	movl	%edx, %ebp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rsi, %rbx
    0000001a: 	callq	clock@PLT # Offset: 26
    0000001f: 	movl	iterations(%rip), %edi
    00000025: 	movq	%rax, start_time(%rip)
    0000002c: 	testl	%edi, %edi
    0000002e: 	jle	.Ltmp343 # Offset: 46
    00000034: 	xorl	%esi, %esi
    00000036: 	movslq	%ebp, %rcx
    00000039: 	testl	%ebp, %ebp
    0000003b: 	jle	.Ltmp344 # Offset: 59
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp346:
    00000048: 	xorl	%eax, %eax
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp345:
    00000050: 	movswq	(%r14,%rax,2), %rdx
    00000055: 	movzwl	(%r13,%rdx,2), %edx
    0000005b: 	movw	%dx, (%rbx,%rax,2)
    0000005f: 	addq	$0x1, %rax
    00000063: 	cmpq	%rax, %rcx
    00000066: 	jne	.Ltmp345 # Offset: 102
    00000068: 	addl	$0x1, %esi
    0000006b: 	cmpl	%edi, %esi
    0000006d: 	jne	.Ltmp346 # Offset: 109
    0000006f: 	callq	clock@PLT # Offset: 111
    00000074: 	pxor	%xmm0, %xmm0
    00000078: 	movq	%r12, %rdi
    0000007b: 	movq	%rax, end_time(%rip)
    00000082: 	subq	start_time(%rip), %rax
    00000089: 	cvtsi2sd	%rax, %xmm0
    0000008e: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000096: 	callq	_Z13record_resultdPKc # Offset: 150
.Ltmp350:
    0000009b: 	movl	init_value(%rip), %r8d
    000000a2: 	leal	-0x1(%rbp), %eax
    000000a5: 	leaq	0x2(%rbx,%rax,2), %rcx
    000000aa: 	movl	%r8d, %edx
    000000ad: 	jmp	.Ltmp347 # Offset: 173
    000000af: 	nop # Size: 1
.Ltmp349:
    000000b0: 	addq	$0x2, %rbx
    000000b4: 	cmpq	%rcx, %rbx
    000000b7: 	je	.Ltmp348 # Offset: 183
.Ltmp347:
    000000b9: 	movzwl	(%rbx), %eax
    000000bc: 	cmpw	%dx, %ax
    000000bf: 	je	.Ltmp349 # Offset: 191
    000000c1: 	popq	%rbx
    000000c2: 	movswl	%ax, %ecx
    000000c5: 	popq	%rbp
    000000c6: 	movq	%r12, %rdx
    000000c9: 	leaq	DATAat0x8118(%rip), %rsi
    000000d0: 	popq	%r12
    000000d2: 	movl	$0x1, %edi
    000000d7: 	popq	%r13
    000000d9: 	xorl	%eax, %eax
    000000db: 	popq	%r14
    000000dd: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 221
.Ltmp343:
    000000e2: 	callq	clock@PLT # Offset: 226
    000000e7: 	pxor	%xmm0, %xmm0
    000000eb: 	movq	%r12, %rdi
    000000ee: 	movq	%rax, end_time(%rip)
    000000f5: 	subq	start_time(%rip), %rax
    000000fc: 	cvtsi2sd	%rax, %xmm0
    00000101: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000109: 	callq	_Z13record_resultdPKc # Offset: 265
    0000010e: 	testl	%ebp, %ebp
    00000110: 	jg	.Ltmp350 # Offset: 272
.Ltmp348:
    00000112: 	popq	%rbx
    00000113: 	popq	%rbp
    00000114: 	popq	%r12
    00000116: 	popq	%r13
    00000118: 	popq	%r14
    0000011a: 	retq # Offset: 282
.Ltmp344:
    0000011b: 	callq	clock@PLT # Offset: 283
    00000120: 	popq	%rbx
    00000121: 	pxor	%xmm0, %xmm0
    00000125: 	popq	%rbp
    00000126: 	movq	%rax, end_time(%rip)
    0000012d: 	movq	%r12, %rdi
    00000130: 	popq	%r12
    00000132: 	subq	start_time(%rip), %rax
    00000139: 	popq	%r13
    0000013b: 	popq	%r14
    0000013d: 	cvtsi2sd	%rax, %xmm0
    00000142: 	divsd	DATAat0x90d0(%rip), %xmm0
    0000014a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 330
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut2IsEvPKT_PS0_iS2_PKc"

Binary Function "_Z9test_lut3IsEvPKT_PS0_iS2_PKc" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0x74d0
  Size        : 0x1ad
  MaxSize     : 0x1b0
  Offset      : 0x74d0
  Section     : .text
  Orc Section : .local.text._Z9test_lut3IsEvPKT_PS0_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movl	%edx, %r14d
    00000009: 	pushq	%r13
    0000000b: 	movq	%rsi, %r13
    0000000e: 	pushq	%r12
    00000010: 	movq	%r8, %r12
    00000013: 	pushq	%rbp
    00000014: 	movq	%rcx, %rbp
    00000017: 	pushq	%rbx
    00000018: 	movq	%rdi, %rbx
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movl	iterations(%rip), %edi
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	testl	%edi, %edi
    0000002f: 	jle	.Ltmp351 # Offset: 47
    00000035: 	leal	-0x4(%r14), %eax
    00000039: 	leal	-0x3(%r14), %ecx
    0000003d: 	xorl	%esi, %esi
    0000003f: 	shrl	$0x2, %eax
    00000042: 	leal	0x4(,%rax,4), %r8d
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp355:
    00000050: 	xorl	%edx, %edx
    00000052: 	xorl	%eax, %eax
    00000054: 	testl	%ecx, %ecx
    00000056: 	jle	.Ltmp352 # Offset: 86
    00000058: 	nopl	(%rax,%rax) # Size: 8
.Ltmp353:
    00000060: 	movswq	0x6(%rbx,%rdx,2), %rax
    00000066: 	movswq	0x4(%rbx,%rdx,2), %r11
    0000006c: 	movswq	0x2(%rbx,%rdx,2), %r10
    00000072: 	movswq	(%rbx,%rdx,2), %r9
    00000077: 	movzwl	(%rbp,%rax,2), %eax
    0000007c: 	movzwl	(%rbp,%r11,2), %r11d
    00000082: 	movzwl	(%rbp,%r10,2), %r10d
    00000088: 	movzwl	(%rbp,%r9,2), %r9d
    0000008e: 	shlq	$0x10, %rax
    00000092: 	orq	%r11, %rax
    00000095: 	shlq	$0x10, %rax
    00000099: 	orq	%r10, %rax
    0000009c: 	shlq	$0x10, %rax
    000000a0: 	orq	%r9, %rax
    000000a3: 	movq	%rax, (%r13,%rdx,2)
    000000a8: 	addq	$0x4, %rdx
    000000ac: 	cmpl	%edx, %ecx
    000000ae: 	jg	.Ltmp353 # Offset: 174
    000000b0: 	movl	%r8d, %eax
.Ltmp352:
    000000b3: 	cmpl	%eax, %r14d
    000000b6: 	jle	.Ltmp354 # Offset: 182
    000000b8: 	movslq	%eax, %r9
    000000bb: 	movswq	(%rbx,%r9,2), %r10
    000000c0: 	leaq	(%r9,%r9), %rdx
    000000c4: 	movzwl	(%rbp,%r10,2), %r10d
    000000ca: 	movw	%r10w, (%r13,%r9,2)
    000000d0: 	leal	0x1(%rax), %r9d
    000000d4: 	cmpl	%r9d, %r14d
    000000d7: 	jle	.Ltmp354 # Offset: 215
    000000d9: 	movswq	0x2(%rbx,%rdx), %r9
    000000df: 	movzwl	(%rbp,%r9,2), %r9d
    000000e5: 	movw	%r9w, 0x2(%r13,%rdx)
    000000eb: 	leal	0x2(%rax), %r9d
    000000ef: 	cmpl	%r9d, %r14d
    000000f2: 	jle	.Ltmp354 # Offset: 242
    000000f4: 	movswq	0x4(%rbx,%rdx), %r9
    000000fa: 	addl	$0x3, %eax
    000000fd: 	movzwl	(%rbp,%r9,2), %r9d
    00000103: 	movw	%r9w, 0x4(%r13,%rdx)
    00000109: 	cmpl	%eax, %r14d
    0000010c: 	jle	.Ltmp354 # Offset: 268
    0000010e: 	movswq	0x6(%rbx,%rdx), %rax
    00000114: 	movzwl	(%rbp,%rax,2), %eax
    00000119: 	movw	%ax, 0x6(%r13,%rdx)
.Ltmp354:
    0000011f: 	addl	$0x1, %esi
    00000122: 	cmpl	%edi, %esi
    00000124: 	jne	.Ltmp355 # Offset: 292
.Ltmp351:
    0000012a: 	callq	clock@PLT # Offset: 298
    0000012f: 	pxor	%xmm0, %xmm0
    00000133: 	movq	%r12, %rdi
    00000136: 	movq	%rax, end_time(%rip)
    0000013d: 	subq	start_time(%rip), %rax
    00000144: 	cvtsi2sd	%rax, %xmm0
    00000149: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000151: 	callq	_Z13record_resultdPKc # Offset: 337
    00000156: 	testl	%r14d, %r14d
    00000159: 	jle	.Ltmp356 # Offset: 345
    0000015b: 	movl	init_value(%rip), %r8d
    00000162: 	leal	-0x1(%r14), %eax
    00000166: 	leaq	0x2(%r13,%rax,2), %rcx
    0000016b: 	movl	%r8d, %edx
    0000016e: 	jmp	.Ltmp357 # Offset: 366
.Ltmp358:
    00000170: 	addq	$0x2, %r13
    00000174: 	cmpq	%rcx, %r13
    00000177: 	je	.Ltmp356 # Offset: 375
.Ltmp357:
    00000179: 	movzwl	(%r13), %eax
    0000017e: 	cmpw	%dx, %ax
    00000181: 	je	.Ltmp358 # Offset: 385
    00000183: 	popq	%rbx
    00000184: 	movswl	%ax, %ecx
    00000187: 	popq	%rbp
    00000188: 	movq	%r12, %rdx
    0000018b: 	leaq	DATAat0x8118(%rip), %rsi
    00000192: 	popq	%r12
    00000194: 	movl	$0x1, %edi
    00000199: 	popq	%r13
    0000019b: 	xorl	%eax, %eax
    0000019d: 	popq	%r14
    0000019f: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 415
.Ltmp356:
    000001a4: 	popq	%rbx
    000001a5: 	popq	%rbp
    000001a6: 	popq	%r12
    000001a8: 	popq	%r13
    000001aa: 	popq	%r14
    000001ac: 	retq # Offset: 428
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut3IsEvPKT_PS0_iS2_PKc"

Binary Function "_Z9test_lut7IsEvPKT_PS0_iS2_PKc" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0x7680
  Size        : 0x14b
  MaxSize     : 0x150
  Offset      : 0x7680
  Section     : .text
  Orc Section : .local.text._Z9test_lut7IsEvPKT_PS0_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movl	%edx, %r14d
    00000009: 	pushq	%r13
    0000000b: 	movq	%r8, %r13
    0000000e: 	pushq	%r12
    00000010: 	movq	%rcx, %r12
    00000013: 	pushq	%rbp
    00000014: 	movq	%rdi, %rbp
    00000017: 	pushq	%rbx
    00000018: 	movq	%rsi, %rbx
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movl	iterations(%rip), %r8d
    00000027: 	movq	%rax, start_time(%rip)
    0000002e: 	testl	%r8d, %r8d
    00000031: 	jle	.Ltmp359 # Offset: 49
    00000037: 	leal	-0x2(%r14), %eax
    0000003b: 	leal	-0x1(%r14), %esi
    0000003f: 	xorl	%edi, %edi
    00000041: 	shrl	%eax
    00000043: 	leal	0x2(%rax,%rax), %r9d
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp363:
    00000050: 	xorl	%eax, %eax
    00000052: 	testl	%esi, %esi
    00000054: 	jle	.Ltmp360 # Offset: 84
    00000056: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp361:
    00000060: 	movswq	(%rbp,%rax,2), %rdx
    00000066: 	movzwl	(%r12,%rdx,2), %ecx
    0000006b: 	movswq	0x2(%rbp,%rax,2), %rdx
    00000071: 	movzwl	(%r12,%rdx,2), %edx
    00000076: 	movw	%cx, (%rbx,%rax,2)
    0000007a: 	movw	%dx, 0x2(%rbx,%rax,2)
    0000007f: 	addq	$0x2, %rax
    00000083: 	cmpl	%eax, %esi
    00000085: 	jg	.Ltmp361 # Offset: 133
    00000087: 	movl	%r9d, %eax
.Ltmp360:
    0000008a: 	cmpl	%eax, %r14d
    0000008d: 	jle	.Ltmp362 # Offset: 141
    0000008f: 	movslq	%eax, %rdx
    00000092: 	addl	$0x1, %eax
    00000095: 	movswq	(%rbp,%rdx,2), %rcx
    0000009b: 	leaq	(%rdx,%rdx), %r10
    0000009f: 	movzwl	(%r12,%rcx,2), %ecx
    000000a4: 	movw	%cx, (%rbx,%rdx,2)
    000000a8: 	cmpl	%eax, %r14d
    000000ab: 	jle	.Ltmp362 # Offset: 171
    000000ad: 	movswq	0x2(%rbp,%r10), %rax
    000000b3: 	movzwl	(%r12,%rax,2), %eax
    000000b8: 	movw	%ax, 0x2(%rbx,%r10)
.Ltmp362:
    000000be: 	addl	$0x1, %edi
    000000c1: 	cmpl	%r8d, %edi
    000000c4: 	jne	.Ltmp363 # Offset: 196
.Ltmp359:
    000000c6: 	callq	clock@PLT # Offset: 198
    000000cb: 	pxor	%xmm0, %xmm0
    000000cf: 	movq	%r13, %rdi
    000000d2: 	movq	%rax, end_time(%rip)
    000000d9: 	subq	start_time(%rip), %rax
    000000e0: 	cvtsi2sd	%rax, %xmm0
    000000e5: 	divsd	DATAat0x90d0(%rip), %xmm0
    000000ed: 	callq	_Z13record_resultdPKc # Offset: 237
    000000f2: 	testl	%r14d, %r14d
    000000f5: 	jle	.Ltmp364 # Offset: 245
    000000f7: 	movl	init_value(%rip), %r8d
    000000fe: 	leal	-0x1(%r14), %eax
    00000102: 	leaq	0x2(%rbx,%rax,2), %rcx
    00000107: 	movl	%r8d, %edx
    0000010a: 	jmp	.Ltmp365 # Offset: 266
    0000010c: 	nopl	(%rax) # Size: 4
.Ltmp366:
    00000110: 	addq	$0x2, %rbx
    00000114: 	cmpq	%rcx, %rbx
    00000117: 	je	.Ltmp364 # Offset: 279
.Ltmp365:
    00000119: 	movzwl	(%rbx), %eax
    0000011c: 	cmpw	%dx, %ax
    0000011f: 	je	.Ltmp366 # Offset: 287
    00000121: 	popq	%rbx
    00000122: 	movswl	%ax, %ecx
    00000125: 	popq	%rbp
    00000126: 	movq	%r13, %rdx
    00000129: 	popq	%r12
    0000012b: 	leaq	DATAat0x8118(%rip), %rsi
    00000132: 	popq	%r13
    00000134: 	movl	$0x1, %edi
    00000139: 	xorl	%eax, %eax
    0000013b: 	popq	%r14
    0000013d: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 317
.Ltmp364:
    00000142: 	popq	%rbx
    00000143: 	popq	%rbp
    00000144: 	popq	%r12
    00000146: 	popq	%r13
    00000148: 	popq	%r14
    0000014a: 	retq # Offset: 330
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut7IsEvPKT_PS0_iS2_PKc"

Binary Function "_Z9test_lut8IsEvPKT_PS0_iS2_PKc" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0x77d0
  Size        : 0x2e9
  MaxSize     : 0x2e9
  Offset      : 0x77d0
  Section     : .text
  Orc Section : .local.text._Z9test_lut8IsEvPKT_PS0_iS2_PKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rsi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rcx, %rbx
    00000016: 	subq	$0x838, %rsp
    0000001d: 	movq	%rdi, 0x8(%rsp)
    00000022: 	movq	%r8, 0x10(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x828(%rsp)
    00000038: 	xorl	%eax, %eax
    0000003a: 	callq	clock@PLT # Offset: 58
    0000003f: 	movl	iterations(%rip), %r13d
    00000046: 	movq	%rax, start_time(%rip)
    0000004d: 	testl	%r13d, %r13d
    00000050: 	jle	.Ltmp367 # Offset: 80
    00000056: 	leal	-0x1(%rbp), %eax
    00000059: 	xorl	%r12d, %r12d
    0000005c: 	leaq	0x20(%rsp), %rdx
    00000061: 	movl	%eax, 0x1c(%rsp)
    00000065: 	andl	$0xfffffc00, %eax
    0000006a: 	movl	%eax, %r11d
    0000006d: 	testl	%ebp, %ebp
    0000006f: 	jle	.Ltmp368 # Offset: 111
    00000075: 	nopl	(%rax) # Size: 3
.Ltmp376:
    00000078: 	movq	0x8(%rsp), %rax
    0000007d: 	movq	%r14, %r8
    00000080: 	xorl	%r9d, %r9d
    00000083: 	nopl	(%rax,%rax) # Size: 5
.Ltmp375:
    00000088: 	movl	%r9d, %r10d
    0000008b: 	addl	$0x400, %r9d
    00000092: 	movl	$0x400, %edi
    00000097: 	cmpl	%r9d, %ebp
    0000009a: 	jle	.Ltmp369 # Offset: 154
.Ltmp381:
    000000a0: 	xorl	%ecx, %ecx
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp370:
    000000a8: 	movswq	(%rax,%rcx,2), %rsi
    000000ad: 	movzwl	(%rbx,%rsi,2), %esi
    000000b1: 	movw	%si, (%rdx,%rcx,2)
    000000b5: 	addq	$0x1, %rcx
    000000b9: 	cmpq	%rcx, %rdi
    000000bc: 	ja	.Ltmp370 # Offset: 188
    000000be: 	leaq	(%rdi,%rdi), %rcx
    000000c2: 	cmpl	$0x8, %ecx
    000000c5: 	jae	.Ltmp371 # Offset: 197
    000000cb: 	testb	$0x4, %cl
    000000ce: 	jne	.Ltmp372 # Offset: 206
    000000d4: 	testl	%ecx, %ecx
    000000d6: 	je	.Ltmp373 # Offset: 214
    000000d8: 	movzbl	(%rdx), %esi
    000000db: 	movb	%sil, (%r8)
    000000de: 	testb	$0x2, %cl
    000000e1: 	jne	.Ltmp374 # Offset: 225
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp373:
    000000f0: 	addq	$0x800, %r8
    000000f7: 	addq	$0x800, %rax
    000000fd: 	cmpl	%r10d, %r11d
    00000100: 	jne	.Ltmp375 # Offset: 256
    00000102: 	addl	$0x1, %r12d
    00000106: 	cmpl	%r13d, %r12d
    00000109: 	jne	.Ltmp376 # Offset: 265
    0000010f: 	callq	clock@PLT # Offset: 271
    00000114: 	movq	0x10(%rsp), %rdi
    00000119: 	pxor	%xmm0, %xmm0
    0000011d: 	movq	%rax, end_time(%rip)
    00000124: 	subq	start_time(%rip), %rax
    0000012b: 	cvtsi2sd	%rax, %xmm0
    00000130: 	divsd	DATAat0x90d0(%rip), %xmm0
    00000138: 	callq	_Z13record_resultdPKc # Offset: 312
.Ltmp382:
    0000013d: 	movl	init_value(%rip), %r8d
    00000144: 	movl	0x1c(%rsp), %edx
    00000148: 	movq	%r14, %rax
    0000014b: 	movl	%r8d, %esi
    0000014e: 	leaq	0x2(%r14,%rdx,2), %rcx
    00000153: 	jmp	.Ltmp377 # Offset: 339
    00000155: 	nopl	(%rax) # Size: 3
.Ltmp379:
    00000158: 	addq	$0x2, %rax
    0000015c: 	cmpq	%rcx, %rax
    0000015f: 	je	.Ltmp378 # Offset: 351
.Ltmp377:
    00000165: 	movzwl	(%rax), %edx
    00000168: 	cmpw	%si, %dx
    0000016b: 	je	.Ltmp379 # Offset: 363
    0000016d: 	movq	0x828(%rsp), %rax
    00000175: 	subq	%fs:0x28, %rax
    0000017e: 	jne	.Ltmp380 # Offset: 382
    00000184: 	movswl	%dx, %ecx
    00000187: 	movq	0x10(%rsp), %rdx
    0000018c: 	addq	$0x838, %rsp
    00000193: 	xorl	%eax, %eax
    00000195: 	popq	%rbx
    00000196: 	leaq	DATAat0x8118(%rip), %rsi
    0000019d: 	popq	%rbp
    0000019e: 	movl	$0x1, %edi
    000001a3: 	popq	%r12
    000001a5: 	popq	%r13
    000001a7: 	popq	%r14
    000001a9: 	popq	%r15
    000001ab: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 427
.Ltmp369:
    000001b0: 	movl	%ebp, %edi
    000001b2: 	subl	%r10d, %edi
    000001b5: 	movslq	%edi, %rdi
    000001b8: 	testq	%rdi, %rdi
    000001bb: 	jne	.Ltmp381 # Offset: 443
    000001c1: 	jmp	.Ltmp373 # Offset: 449
    000001c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp371:
    000001d0: 	movq	(%rdx), %rsi
    000001d3: 	movq	%r8, %r15
    000001d6: 	movq	%rsi, (%r8)
    000001d9: 	movl	%ecx, %esi
    000001db: 	movq	-0x8(%rdx,%rsi), %rdi
    000001e0: 	movq	%rdi, -0x8(%r8,%rsi)
    000001e5: 	leaq	0x8(%r8), %rdi
    000001e9: 	movq	%rdx, %rsi
    000001ec: 	andq	$-0x8, %rdi
    000001f0: 	subq	%rdi, %r15
    000001f3: 	addl	%r15d, %ecx
    000001f6: 	subq	%r15, %rsi
    000001f9: 	shrl	$0x3, %ecx
    000001fc: 	rep		movsq	(%rsi), %es:(%rdi)
    000001ff: 	jmp	.Ltmp373 # Offset: 511
.Ltmp372:
    00000204: 	movl	(%rdx), %esi
    00000206: 	movl	%ecx, %ecx
    00000208: 	movl	%esi, (%r8)
    0000020b: 	movl	-0x4(%rdx,%rcx), %esi
    0000020f: 	movl	%esi, -0x4(%r8,%rcx)
    00000214: 	jmp	.Ltmp373 # Offset: 532
.Ltmp374:
    00000219: 	movl	%ecx, %ecx
    0000021b: 	movzwl	-0x2(%rdx,%rcx), %esi
    00000220: 	movw	%si, -0x2(%r8,%rcx)
    00000226: 	jmp	.Ltmp373 # Offset: 550
.Ltmp378:
    0000022b: 	movq	0x828(%rsp), %rax
    00000233: 	subq	%fs:0x28, %rax
    0000023c: 	jne	.Ltmp380 # Offset: 572
    00000242: 	addq	$0x838, %rsp
    00000249: 	popq	%rbx
    0000024a: 	popq	%rbp
    0000024b: 	popq	%r12
    0000024d: 	popq	%r13
    0000024f: 	popq	%r14
    00000251: 	popq	%r15
    00000253: 	retq # Offset: 595
.Ltmp367:
    00000254: 	callq	clock@PLT # Offset: 596
    00000259: 	movq	0x10(%rsp), %rdi
    0000025e: 	pxor	%xmm0, %xmm0
    00000262: 	movq	%rax, end_time(%rip)
    00000269: 	subq	start_time(%rip), %rax
    00000270: 	cvtsi2sd	%rax, %xmm0
    00000275: 	divsd	DATAat0x90d0(%rip), %xmm0
    0000027d: 	callq	_Z13record_resultdPKc # Offset: 637
    00000282: 	testl	%ebp, %ebp
    00000284: 	jle	.Ltmp378 # Offset: 644
    00000286: 	leal	-0x1(%rbp), %eax
    00000289: 	movl	%eax, 0x1c(%rsp)
    0000028d: 	jmp	.Ltmp382 # Offset: 653
.Ltmp368:
    00000292: 	callq	clock@PLT # Offset: 658
    00000297: 	movq	%rax, end_time(%rip)
    0000029e: 	movq	0x828(%rsp), %rdx
    000002a6: 	subq	%fs:0x28, %rdx
    000002af: 	jne	.Ltmp380 # Offset: 687
    000002b1: 	subq	start_time(%rip), %rax
    000002b8: 	pxor	%xmm0, %xmm0
    000002bc: 	movq	0x10(%rsp), %rdi
    000002c1: 	cvtsi2sd	%rax, %xmm0
    000002c6: 	divsd	DATAat0x90d0(%rip), %xmm0
    000002ce: 	addq	$0x838, %rsp
    000002d5: 	popq	%rbx
    000002d6: 	popq	%rbp
    000002d7: 	popq	%r12
    000002d9: 	popq	%r13
    000002db: 	popq	%r14
    000002dd: 	popq	%r15
    000002df: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 735
.Ltmp380:
    000002e4: 	callq	__stack_chk_fail@PLT # Offset: 740
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_lut8IsEvPKT_PS0_iS2_PKc"

Binary Function "_fini" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0x7abc
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x7abc
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 50 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 289 instructions were shortened
BOLT-INFO: removed 80 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 47 out of 63 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x2e02040
