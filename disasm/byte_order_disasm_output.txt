BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0xa01c, which lies outside .bss
BOLT-WARNING: ignoring symbol __TMC_END__ at 0xa020, which lies outside .data
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x9fe8(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 2
  State       : disassembled
  Address     : 0x1160
  Size        : 0x77c
  MaxSize     : 0x780
  Offset      : 0x1160
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB01:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x8, %rsp
    00000012: 	testl	%edi, %edi
    00000014: 	jle	.Ltmp1 # Offset: 20
    0000001a: 	leal	-0x1(%rdi), %eax
    0000001d: 	movl	%edi, %r13d
    00000020: 	movq	%rsi, %r14
    00000023: 	movq	%rsi, %rbx
    00000026: 	leaq	0x8(%rsi,%rax,8), %r12
    0000002b: 	leaq	DATAat0x7150(%rip), %rbp
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2:
    00000038: 	movq	(%rbx), %rdx
    0000003b: 	movq	%rbp, %rsi
    0000003e: 	movl	$0x1, %edi
    00000043: 	xorl	%eax, %eax
    00000045: 	addq	$0x8, %rbx
    00000049: 	callq	__printf_chk@PLT # Offset: 73
    0000004e: 	cmpq	%r12, %rbx
    00000051: 	jne	.Ltmp2 # Offset: 81
    00000053: 	xorl	%eax, %eax
    00000055: 	leaq	DATAat0x7136(%rip), %rsi
    0000005c: 	movl	$0x1, %edi
    00000061: 	callq	__printf_chk@PLT # Offset: 97
    00000066: 	cmpl	$0x1, %r13d
    0000006a: 	jg	.Ltmp3 # Offset: 106
.Ltmp19:
    00000070: 	movq	init_value(%rip), %xmm1
    00000078: 	leaq	data16unsigned(%rip), %r12
    0000007f: 	leaq	0x3e80(%r12), %r9
    00000087: 	movd	%xmm1, %eax
    0000008b: 	movd	%eax, %xmm0
    0000008f: 	movq	%r12, %rax
    00000092: 	punpcklwd	%xmm0, %xmm0
    00000096: 	pshufd	$0x0, %xmm0, %xmm0
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4:
    000000a0: 	movaps	%xmm0, (%rax)
    000000a3: 	addq	$0x10, %rax
    000000a7: 	cmpq	%r9, %rax
    000000aa: 	jne	.Ltmp4 # Offset: 170
    000000ac: 	leaq	data32unsigned(%rip), %r13
    000000b3: 	pshufd	$0x0, %xmm1, %xmm0
    000000b8: 	leaq	0x7d00(%r13), %r15
    000000bf: 	movq	%r13, %rax
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5:
    000000c8: 	movaps	%xmm0, (%rax)
    000000cb: 	addq	$0x10, %rax
    000000cf: 	cmpq	%rax, %r15
    000000d2: 	jne	.Ltmp5 # Offset: 210
    000000d4: 	leaq	data64unsigned(%rip), %rbp
    000000db: 	movdqa	%xmm1, %xmm0
    000000df: 	punpcklqdq	%xmm0, %xmm0
    000000e3: 	leaq	0xfa00(%rbp), %rbx
    000000ea: 	movq	%rbp, %rax
    000000ed: 	nopl	(%rax) # Size: 3
.Ltmp6:
    000000f0: 	movaps	%xmm0, (%rax)
    000000f3: 	addq	$0x10, %rax
    000000f7: 	cmpq	%rbx, %rax
    000000fa: 	jne	.Ltmp6 # Offset: 250
    000000fc: 	leaq	DATAat0x7154(%rip), %rdx
    00000103: 	movl	$0x1f40, %esi
    00000108: 	movq	%r12, %rdi
    0000010b: 	callq	_Z13test_constantIt6swab16EvPT_iPKc # Offset: 267
    00000110: 	leaq	DATAat0x7171(%rip), %rdx
    00000117: 	movl	$0x1f40, %esi
    0000011c: 	movq	%r12, %rdi
    0000011f: 	callq	_Z13test_constantIt12swab16_mask1EvPT_iPKc # Offset: 287
    00000124: 	leaq	DATAat0x718e(%rip), %rdx
    0000012b: 	movl	$0x1f40, %esi
    00000130: 	movq	%r12, %rdi
    00000133: 	callq	_Z13test_constantIt12swab16_mask2EvPT_iPKc # Offset: 307
    00000138: 	leaq	DATAat0x71ab(%rip), %rdx
    0000013f: 	movl	$0x1f40, %esi
    00000144: 	movq	%r12, %rdi
    00000147: 	callq	_Z13test_constantIt12swab16_mask3EvPT_iPKc # Offset: 327
    0000014c: 	leaq	DATAat0x71c8(%rip), %rdx
    00000153: 	movl	$0x1f40, %esi
    00000158: 	movq	%r12, %rdi
    0000015b: 	callq	_Z13test_constantIt12swab16_mask4EvPT_iPKc # Offset: 347
    00000160: 	leaq	DATAat0x71e5(%rip), %rdx
    00000167: 	movl	$0x1f40, %esi
    0000016c: 	movq	%r12, %rdi
    0000016f: 	callq	_Z13test_constantIt12swab16_mask5EvPT_iPKc # Offset: 367
    00000174: 	leaq	DATAat0x7202(%rip), %rdx
    0000017b: 	movl	$0x1f40, %esi
    00000180: 	movq	%r12, %rdi
    00000183: 	callq	_Z13test_constantIt12swab16_mask6EvPT_iPKc # Offset: 387
    00000188: 	leaq	DATAat0x721f(%rip), %rdx
    0000018f: 	movl	$0x1f40, %esi
    00000194: 	movq	%r12, %rdi
    00000197: 	callq	_Z13test_constantIt12swab16_temp1EvPT_iPKc # Offset: 407
    0000019c: 	leaq	DATAat0x723c(%rip), %rdx
    000001a3: 	movl	$0x1f40, %esi
    000001a8: 	movq	%r12, %rdi
    000001ab: 	callq	_Z13test_constantIt12swab16_temp2EvPT_iPKc # Offset: 427
    000001b0: 	movl	iterations(%rip), %edx
    000001b6: 	xorl	%r8d, %r8d
    000001b9: 	xorl	%ecx, %ecx
    000001bb: 	movl	$0x1f40, %esi
    000001c0: 	leaq	DATAat0x7259(%rip), %rdi
    000001c7: 	callq	_Z9summarizePKciiii # Offset: 455
    000001cc: 	leaq	DATAat0x7272(%rip), %rdx
    000001d3: 	movl	$0x1f40, %esi
    000001d8: 	movq	%r13, %rdi
    000001db: 	callq	_Z13test_constantIj6swab32EvPT_iPKc # Offset: 475
    000001e0: 	leaq	DATAat0x728f(%rip), %rdx
    000001e7: 	movl	$0x1f40, %esi
    000001ec: 	movq	%r13, %rdi
    000001ef: 	callq	_Z13test_constantIj12swab32_mask1EvPT_iPKc # Offset: 495
    000001f4: 	leaq	DATAat0x72ac(%rip), %rdx
    000001fb: 	movl	$0x1f40, %esi
    00000200: 	movq	%r13, %rdi
    00000203: 	callq	_Z13test_constantIj12swab32_mask2EvPT_iPKc # Offset: 515
    00000208: 	leaq	DATAat0x72c9(%rip), %rdx
    0000020f: 	movl	$0x1f40, %esi
    00000214: 	movq	%r13, %rdi
    00000217: 	callq	_Z13test_constantIj12swab32_mask3EvPT_iPKc # Offset: 535
    0000021c: 	leaq	DATAat0x72e6(%rip), %rdx
    00000223: 	movl	$0x1f40, %esi
    00000228: 	movq	%r13, %rdi
    0000022b: 	callq	_Z13test_constantIj12swab32_mask4EvPT_iPKc # Offset: 555
    00000230: 	leaq	DATAat0x7303(%rip), %rdx
    00000237: 	movl	$0x1f40, %esi
    0000023c: 	movq	%r13, %rdi
    0000023f: 	callq	_Z13test_constantIj12swab32_mask5EvPT_iPKc # Offset: 575
    00000244: 	leaq	DATAat0x7320(%rip), %rdx
    0000024b: 	movl	$0x1f40, %esi
    00000250: 	movq	%r13, %rdi
    00000253: 	callq	_Z13test_constantIj12swab32_mask6EvPT_iPKc # Offset: 595
    00000258: 	leaq	DATAat0x733d(%rip), %rdx
    0000025f: 	movl	$0x1f40, %esi
    00000264: 	movq	%r13, %rdi
    00000267: 	callq	_Z13test_constantIj12swab32_temp1EvPT_iPKc # Offset: 615
    0000026c: 	leaq	DATAat0x735a(%rip), %rdx
    00000273: 	movl	$0x1f40, %esi
    00000278: 	movq	%rbp, %rdi
    0000027b: 	callq	_Z13test_constantIm14swab32_subset1EvPT_iPKc # Offset: 635
    00000280: 	leaq	DATAat0x7377(%rip), %rdx
    00000287: 	movl	$0x1f40, %esi
    0000028c: 	movq	%rbp, %rdi
    0000028f: 	callq	_Z13test_constantIm12swab32_temp2EvPT_iPKc # Offset: 655
    00000294: 	leaq	DATAat0x7395(%rip), %rdx
    0000029b: 	movl	$0x1f40, %esi
    000002a0: 	movq	%rbp, %rdi
    000002a3: 	callq	_Z13test_constantIm12swab32_temp3EvPT_iPKc # Offset: 675
    000002a8: 	movl	iterations(%rip), %edx
    000002ae: 	xorl	%r8d, %r8d
    000002b1: 	xorl	%ecx, %ecx
    000002b3: 	movl	$0x1f40, %esi
    000002b8: 	leaq	DATAat0x73b3(%rip), %rdi
    000002bf: 	callq	_Z9summarizePKciiii # Offset: 703
    000002c4: 	leaq	DATAat0x73cc(%rip), %rdx
    000002cb: 	movl	$0x1f40, %esi
    000002d0: 	movq	%rbp, %rdi
    000002d3: 	callq	_Z13test_constantIm6swab64EvPT_iPKc # Offset: 723
    000002d8: 	leaq	DATAat0x73e9(%rip), %rdx
    000002df: 	movl	$0x1f40, %esi
    000002e4: 	movq	%rbp, %rdi
    000002e7: 	callq	_Z13test_constantIm12swab64_mask1EvPT_iPKc # Offset: 743
    000002ec: 	leaq	DATAat0x7406(%rip), %rdx
    000002f3: 	movl	$0x1f40, %esi
    000002f8: 	movq	%rbp, %rdi
    000002fb: 	callq	_Z13test_constantIm12swab64_mask2EvPT_iPKc # Offset: 763
    00000300: 	leaq	DATAat0x7423(%rip), %rdx
    00000307: 	movl	$0x1f40, %esi
    0000030c: 	movq	%rbp, %rdi
    0000030f: 	callq	_Z13test_constantIm12swab64_mask3EvPT_iPKc # Offset: 783
    00000314: 	leaq	DATAat0x7440(%rip), %rdx
    0000031b: 	movl	$0x1f40, %esi
    00000320: 	movq	%rbp, %rdi
    00000323: 	callq	_Z13test_constantIm12swab64_mask4EvPT_iPKc # Offset: 803
    00000328: 	leaq	DATAat0x745d(%rip), %rdx
    0000032f: 	movl	$0x1f40, %esi
    00000334: 	movq	%rbp, %rdi
    00000337: 	callq	_Z13test_constantIm12swab64_mask5EvPT_iPKc # Offset: 823
    0000033c: 	leaq	DATAat0x747a(%rip), %rdx
    00000343: 	movl	$0x1f40, %esi
    00000348: 	movq	%rbp, %rdi
    0000034b: 	callq	_Z13test_constantIm12swab64_mask6EvPT_iPKc # Offset: 843
    00000350: 	movl	$0x1f40, %esi
    00000355: 	movq	%rbp, %rdi
    00000358: 	xorl	%r14d, %r14d
    0000035b: 	leaq	DATAat0x7497(%rip), %rdx
    00000362: 	callq	_Z13test_constantIm12swab64_temp1EvPT_iPKc # Offset: 866
    00000367: 	leaq	DATAat0x74b4(%rip), %rdx
    0000036e: 	movl	$0x1f40, %esi
    00000373: 	movq	%rbp, %rdi
    00000376: 	callq	_Z13test_constantIm14swab64_subset1EvPT_iPKc # Offset: 886
    0000037b: 	leaq	DATAat0x74d1(%rip), %rdx
    00000382: 	movl	$0x1f40, %esi
    00000387: 	movq	%rbp, %rdi
    0000038a: 	callq	_Z13test_constantIm12swab64_temp2EvPT_iPKc # Offset: 906
    0000038f: 	leaq	DATAat0x74ef(%rip), %rdx
    00000396: 	movl	$0x1f40, %esi
    0000039b: 	movq	%rbp, %rdi
    0000039e: 	callq	_Z13test_constantIm12swab64_temp3EvPT_iPKc # Offset: 926
    000003a3: 	movl	iterations(%rip), %edx
    000003a9: 	xorl	%r8d, %r8d
    000003ac: 	xorl	%ecx, %ecx
    000003ae: 	movl	$0x1f40, %esi
    000003b3: 	leaq	DATAat0x750d(%rip), %rdi
    000003ba: 	callq	_Z9summarizePKciiii # Offset: 954
    000003bf: 	leaq	DATAat0x7526(%rip), %rdx
    000003c6: 	movl	$0x1f40, %esi
    000003cb: 	movq	%r12, %rdi
    000003ce: 	callq	_Z13test_constantIt10swab_htonlEvPT_iPKc # Offset: 974
    000003d3: 	leaq	DATAat0x7535(%rip), %rdx
    000003da: 	movl	$0x1f40, %esi
    000003df: 	movq	%r12, %rdi
    000003e2: 	callq	_Z13test_constantIt10swab_ntohlEvPT_iPKc # Offset: 994
    000003e7: 	leaq	DATAat0x7544(%rip), %rdx
    000003ee: 	movl	$0x1f40, %esi
    000003f3: 	movq	%r13, %rdi
    000003f6: 	callq	_Z13test_constantIj10swab_htonlEvPT_iPKc # Offset: 1014
    000003fb: 	leaq	DATAat0x7553(%rip), %rdx
    00000402: 	movl	$0x1f40, %esi
    00000407: 	movq	%r13, %rdi
    0000040a: 	callq	_Z13test_constantIj10swab_ntohlEvPT_iPKc # Offset: 1034
    0000040f: 	leaq	DATAat0x7562(%rip), %rdx
    00000416: 	movq	%r12, %rdi
    00000419: 	movl	$0x1f40, %esi
    0000041e: 	callq	_Z13test_constantIt10swab_htobeEvPT_iPKc # Offset: 1054
    00000423: 	callq	clock@PLT # Offset: 1059
    00000428: 	movl	iterations(%rip), %edi
    0000042e: 	movq	init_value(%rip), %rdx
    00000435: 	leaq	data32unsigned(%rip), %r9
    0000043c: 	movq	%rax, start_time(%rip)
    00000443: 	testl	%edi, %edi
    00000445: 	jle	.Ltmp7 # Offset: 1093
    0000044b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp10:
    00000450: 	movq	%r12, %rax
    00000453: 	pxor	%xmm0, %xmm0
    00000457: 	nopw	(%rax,%rax) # Size: 9
.Ltmp8:
    00000460: 	paddw	(%rax), %xmm0
    00000464: 	addq	$0x10, %rax
    00000468: 	cmpq	%rax, %r9
    0000046b: 	jne	.Ltmp8 # Offset: 1131
    0000046d: 	movdqa	%xmm0, %xmm1
    00000471: 	imulw	$0x1f40, %dx, %ax
    00000476: 	psrldq	$0x8, %xmm1
    0000047b: 	paddw	%xmm1, %xmm0
    0000047f: 	movdqa	%xmm0, %xmm1
    00000483: 	psrldq	$0x4, %xmm1
    00000488: 	paddw	%xmm1, %xmm0
    0000048c: 	movdqa	%xmm0, %xmm1
    00000490: 	psrldq	$0x2, %xmm1
    00000495: 	paddw	%xmm1, %xmm0
    00000499: 	pextrw	$0x0, %xmm0, %esi
    0000049e: 	cmpw	%ax, %si
    000004a1: 	je	.Ltmp9 # Offset: 1185
    000004a3: 	movl	current_test(%rip), %edx
    000004a9: 	movl	$0x1, %edi
    000004ae: 	leaq	DATAat0x75e5(%rip), %rsi
    000004b5: 	xorl	%eax, %eax
    000004b7: 	addl	$0x1, %r14d
    000004bb: 	callq	__printf_chk@PLT # Offset: 1211
    000004c0: 	movl	iterations(%rip), %edi
    000004c6: 	cmpl	%edi, %r14d
    000004c9: 	jge	.Ltmp7 # Offset: 1225
    000004cb: 	movq	init_value(%rip), %rdx
    000004d2: 	leaq	data32unsigned(%rip), %r9
    000004d9: 	jmp	.Ltmp10 # Offset: 1241
    000004de: 	nop # Size: 2
.Ltmp9:
    000004e0: 	addl	$0x1, %r14d
    000004e4: 	cmpl	%edi, %r14d
    000004e7: 	jl	.Ltmp10 # Offset: 1255
.Ltmp7:
    000004ed: 	callq	clock@PLT # Offset: 1261
    000004f2: 	leaq	DATAat0x7573(%rip), %rdi
    000004f9: 	pxor	%xmm0, %xmm0
    000004fd: 	xorl	%r14d, %r14d
    00000500: 	movq	%rax, end_time(%rip)
    00000507: 	subq	start_time(%rip), %rax
    0000050e: 	leaq	DATAat0x75e5(%rip), %r12
    00000515: 	cvtsi2sd	%rax, %xmm0
    0000051a: 	divsd	DATAat0x7608(%rip), %xmm0
    00000522: 	callq	_Z13record_resultdPKc # Offset: 1314
    00000527: 	leaq	DATAat0x7584(%rip), %rdx
    0000052e: 	movl	$0x1f40, %esi
    00000533: 	movq	%r13, %rdi
    00000536: 	callq	_Z13test_constantIj10swab_htobeEvPT_iPKc # Offset: 1334
    0000053b: 	callq	clock@PLT # Offset: 1339
    00000540: 	movl	iterations(%rip), %esi
    00000546: 	movq	init_value(%rip), %rdx
    0000054d: 	movq	%rax, start_time(%rip)
    00000554: 	testl	%esi, %esi
    00000556: 	jle	.Ltmp11 # Offset: 1366
    0000055c: 	nopl	(%rax) # Size: 4
.Ltmp14:
    00000560: 	movq	%r13, %rax
    00000563: 	pxor	%xmm0, %xmm0
    00000567: 	nopw	(%rax,%rax) # Size: 9
.Ltmp12:
    00000570: 	paddd	(%rax), %xmm0
    00000574: 	addq	$0x10, %rax
    00000578: 	cmpq	%rax, %r15
    0000057b: 	jne	.Ltmp12 # Offset: 1403
    0000057d: 	movdqa	%xmm0, %xmm1
    00000581: 	imull	$0x1f40, %edx, %ecx
    00000587: 	psrldq	$0x8, %xmm1
    0000058c: 	paddd	%xmm1, %xmm0
    00000590: 	movdqa	%xmm0, %xmm1
    00000594: 	psrldq	$0x4, %xmm1
    00000599: 	paddd	%xmm1, %xmm0
    0000059d: 	movd	%xmm0, %eax
    000005a1: 	cmpl	%eax, %ecx
    000005a3: 	je	.Ltmp13 # Offset: 1443
    000005a5: 	movl	current_test(%rip), %edx
    000005ab: 	movq	%r12, %rsi
    000005ae: 	movl	$0x1, %edi
    000005b3: 	xorl	%eax, %eax
    000005b5: 	addl	$0x1, %r14d
    000005b9: 	callq	__printf_chk@PLT # Offset: 1465
    000005be: 	movl	iterations(%rip), %esi
    000005c4: 	cmpl	%esi, %r14d
    000005c7: 	jge	.Ltmp11 # Offset: 1479
    000005c9: 	movq	init_value(%rip), %rdx
    000005d0: 	jmp	.Ltmp14 # Offset: 1488
    000005d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp13:
    000005d8: 	addl	$0x1, %r14d
    000005dc: 	cmpl	%esi, %r14d
    000005df: 	jl	.Ltmp14 # Offset: 1503
.Ltmp11:
    000005e5: 	callq	clock@PLT # Offset: 1509
    000005ea: 	leaq	DATAat0x7595(%rip), %rdi
    000005f1: 	pxor	%xmm0, %xmm0
    000005f5: 	xorl	%r13d, %r13d
    000005f8: 	movq	%rax, end_time(%rip)
    000005ff: 	subq	start_time(%rip), %rax
    00000606: 	leaq	DATAat0x75e5(%rip), %r12
    0000060d: 	cvtsi2sd	%rax, %xmm0
    00000612: 	divsd	DATAat0x7608(%rip), %xmm0
    0000061a: 	callq	_Z13record_resultdPKc # Offset: 1562
    0000061f: 	leaq	DATAat0x75a6(%rip), %rdx
    00000626: 	movl	$0x1f40, %esi
    0000062b: 	movq	%rbp, %rdi
    0000062e: 	callq	_Z13test_constantIm10swab_htobeEvPT_iPKc # Offset: 1582
    00000633: 	callq	clock@PLT # Offset: 1587
    00000638: 	movl	iterations(%rip), %esi
    0000063e: 	movq	init_value(%rip), %rdx
    00000645: 	movq	%rax, start_time(%rip)
    0000064c: 	testl	%esi, %esi
    0000064e: 	jle	.Ltmp15 # Offset: 1614
.Ltmp18:
    00000650: 	movq	%rbp, %rax
    00000653: 	pxor	%xmm0, %xmm0
    00000657: 	nopw	(%rax,%rax) # Size: 9
.Ltmp16:
    00000660: 	paddq	(%rax), %xmm0
    00000664: 	addq	$0x10, %rax
    00000668: 	cmpq	%rbx, %rax
    0000066b: 	jne	.Ltmp16 # Offset: 1643
    0000066d: 	movdqa	%xmm0, %xmm1
    00000671: 	imulq	$0x1f40, %rdx, %rcx
    00000678: 	psrldq	$0x8, %xmm1
    0000067d: 	paddq	%xmm1, %xmm0
    00000681: 	movq	%xmm0, %rax
    00000686: 	cmpq	%rax, %rcx
    00000689: 	je	.Ltmp17 # Offset: 1673
    0000068b: 	movl	current_test(%rip), %edx
    00000691: 	movq	%r12, %rsi
    00000694: 	movl	$0x1, %edi
    00000699: 	xorl	%eax, %eax
    0000069b: 	addl	$0x1, %r13d
    0000069f: 	callq	__printf_chk@PLT # Offset: 1695
    000006a4: 	movl	iterations(%rip), %esi
    000006aa: 	cmpl	%esi, %r13d
    000006ad: 	jge	.Ltmp15 # Offset: 1709
    000006af: 	movq	init_value(%rip), %rdx
    000006b6: 	jmp	.Ltmp18 # Offset: 1718
    000006b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp17:
    000006c0: 	addl	$0x1, %r13d
    000006c4: 	cmpl	%esi, %r13d
    000006c7: 	jl	.Ltmp18 # Offset: 1735
.Ltmp15:
    000006c9: 	callq	clock@PLT # Offset: 1737
    000006ce: 	leaq	DATAat0x75b7(%rip), %rdi
    000006d5: 	pxor	%xmm0, %xmm0
    000006d9: 	movq	%rax, end_time(%rip)
    000006e0: 	subq	start_time(%rip), %rax
    000006e7: 	cvtsi2sd	%rax, %xmm0
    000006ec: 	divsd	DATAat0x7608(%rip), %xmm0
    000006f4: 	callq	_Z13record_resultdPKc # Offset: 1780
    000006f9: 	movl	iterations(%rip), %edx
    000006ff: 	xorl	%r8d, %r8d
    00000702: 	xorl	%ecx, %ecx
    00000704: 	movl	$0x1f40, %esi
    00000709: 	leaq	DATAat0x75c8(%rip), %rdi
    00000710: 	callq	_Z9summarizePKciiii # Offset: 1808
    00000715: 	addq	$0x8, %rsp
    00000719: 	xorl	%eax, %eax
    0000071b: 	popq	%rbx
    0000071c: 	popq	%rbp
    0000071d: 	popq	%r12
    0000071f: 	popq	%r13
    00000721: 	popq	%r14
    00000723: 	popq	%r15
    00000725: 	retq # Offset: 1829
.Ltmp3:
    00000726: 	movq	0x8(%r14), %rdi
    0000072a: 	movl	$0xa, %edx
    0000072f: 	xorl	%esi, %esi
    00000731: 	callq	strtol@PLT # Offset: 1841
    00000736: 	movl	%eax, iterations(%rip)
    0000073c: 	cmpl	$0x2, %r13d
    00000740: 	jle	.Ltmp19 # Offset: 1856
    00000746: 	movq	0x10(%r14), %rdi
    0000074a: 	movl	$0xa, %edx
    0000074f: 	xorl	%esi, %esi
    00000751: 	callq	strtol@PLT # Offset: 1873
    00000756: 	cltq
    00000758: 	movq	%rax, init_value(%rip)
    0000075f: 	jmp	.Ltmp19 # Offset: 1887
.Ltmp1:
    00000764: 	leaq	DATAat0x7136(%rip), %rsi
    0000076b: 	movl	$0x1, %edi
    00000770: 	xorl	%eax, %eax
    00000772: 	callq	__printf_chk@PLT # Offset: 1906
    00000777: 	jmp	.Ltmp19 # Offset: 1911
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 3
  State       : disassembled
  Address     : 0x18e0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x18e0
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB02:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x9fd8(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 4
  State       : disassembled
  Address     : 0x1910
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x1910
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB03:
    00000000: 	leaq	"completed.0/1"(%rip), %rdi
    00000007: 	leaq	"completed.0/1"(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp20 # Offset: 17
    00000013: 	movq	DATAat0x9fe0(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp20 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp20:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 5
  State       : disassembled
  Address     : 0x1940
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1940
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	leaq	"completed.0/1"(%rip), %rdi
    00000007: 	leaq	"completed.0/1"(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp21 # Offset: 34
    00000024: 	movq	DATAat0x9ff0(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp21 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp21:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x1980
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1980
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp22 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp23 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp23:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp22:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x19c0
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x19c0
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 8
  State       : disassembled
  Address     : 0x19d0
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x19d0
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp24 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp25 # Offset: 38
.Ltmp24:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp26 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp25:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp26:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x7008(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 9
  State       : disassembled
  Address     : 0x1a70
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x1a70
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp27 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp28 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp29:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp29 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp42:
    00000069: 	leaq	DATAat0x7152(%rip), %rbp
    00000070: 	leaq	DATAat0x7028(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x7068(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp30 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x7610(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x7098(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x7608(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp31 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp35:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp32 # Offset: 244
    000000fa: 	movq	DATAat0x75f8(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp36:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x75f8(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp33 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp33:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x7137(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x7610(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp34 # Offset: 398
.Ltmp31:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp35 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp36 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp32:
    000001c8: 	movq	DATAat0x7600(%rip), %rsi
    000001cf: 	movq	DATAat0x75f8(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp33 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp34:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp30 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp37 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp38:
    00000210: 	addq	$0x10, %rax
.Ltmp37:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp38 # Offset: 542
.Ltmp43:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x70c8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp39 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp40 # Offset: 592
.Ltmp39:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp27:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp40:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp41:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp41 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x7112(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp27 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp28:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp42 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp30:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp43 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 10
  State       : disassembled
  Address     : 0x1da0
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x1da0
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp44 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp45 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp46:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp46 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp51:
    0000006a: 	leaq	DATAat0x7152(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x70f0(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x7138(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x7152(%rip), %r8
    000000a1: 	leaq	DATAat0x7126(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp47 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp48:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x7137(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp48 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp47 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp49 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp50:
    00000140: 	addq	$0x10, %rax
.Ltmp49:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp50 # Offset: 334
.Ltmp52:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x70c8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp44:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp45:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp51 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp47:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp52 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 11
  State       : disassembled
  Address     : 0x1f50
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x1f50
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x1f70
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x1f70
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x7608(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_Z13test_constantIt6swab16EvPT_iPKc" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x1fb0
  Size        : 0x206
  MaxSize     : 0x210
  Offset      : 0x1fb0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIt6swab16EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x18, %rsp
    00000017: 	movq	%rdx, 0x8(%rsp)
    0000001c: 	callq	clock@PLT # Offset: 28
    00000021: 	movl	iterations(%rip), %esi
    00000027: 	movq	%rax, start_time(%rip)
    0000002e: 	testl	%esi, %esi
    00000030: 	jle	.Ltmp53 # Offset: 48
    00000036: 	leal	-0x1(%rbx), %eax
    00000039: 	movl	%ebx, %r12d
    0000003c: 	leaq	init_value(%rip), %r13
    00000043: 	xorl	%ebp, %ebp
    00000045: 	movl	%eax, 0x4(%rsp)
    00000049: 	movl	%ebx, %eax
    0000004b: 	andl	$-0x8, %r12d
    0000004f: 	shrl	$0x3, %eax
    00000052: 	subl	$0x1, %eax
    00000055: 	shlq	$0x4, %rax
    00000059: 	leaq	0x10(%r14,%rax), %r15
    0000005e: 	nop # Size: 2
.Ltmp58:
    00000060: 	xorl	%eax, %eax
    00000062: 	testl	%ebx, %ebx
    00000064: 	jle	.Ltmp54 # Offset: 100
    0000006a: 	cmpl	$0x6, 0x4(%rsp)
    0000006f: 	jbe	.Ltmp55 # Offset: 111
    00000075: 	movq	%r14, %rax
    00000078: 	pxor	%xmm2, %xmm2
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp56:
    00000080: 	movdqu	(%rax), %xmm0
    00000084: 	addq	$0x10, %rax
    00000088: 	movdqa	%xmm0, %xmm1
    0000008c: 	psrlw	$0x8, %xmm0
    00000091: 	psllw	$0x8, %xmm1
    00000096: 	por	%xmm1, %xmm0
    0000009a: 	paddw	%xmm0, %xmm2
    0000009e: 	cmpq	%r15, %rax
    000000a1: 	jne	.Ltmp56 # Offset: 161
    000000a3: 	movdqa	%xmm2, %xmm0
    000000a7: 	psrldq	$0x8, %xmm0
    000000ac: 	paddw	%xmm0, %xmm2
    000000b0: 	movdqa	%xmm2, %xmm0
    000000b4: 	psrldq	$0x4, %xmm0
    000000b9: 	paddw	%xmm0, %xmm2
    000000bd: 	movdqa	%xmm2, %xmm0
    000000c1: 	psrldq	$0x2, %xmm0
    000000c6: 	paddw	%xmm0, %xmm2
    000000ca: 	pextrw	$0x0, %xmm2, %eax
    000000cf: 	cmpl	%r12d, %ebx
    000000d2: 	je	.Ltmp54 # Offset: 210
    000000d8: 	movl	%r12d, %edx
.Ltmp59:
    000000db: 	movslq	%edx, %r10
    000000de: 	leaq	(%r10,%r10), %rdi
    000000e2: 	movzwl	(%r14,%r10,2), %r10d
    000000e7: 	rolw	$0x8, %r10w
    000000ec: 	addl	%r10d, %eax
    000000ef: 	leal	0x1(%rdx), %r10d
    000000f3: 	cmpl	%r10d, %ebx
    000000f6: 	jle	.Ltmp54 # Offset: 246
    000000f8: 	movzwl	0x2(%r14,%rdi), %r10d
    000000fe: 	rolw	$0x8, %r10w
    00000103: 	addl	%r10d, %eax
    00000106: 	leal	0x2(%rdx), %r10d
    0000010a: 	cmpl	%r10d, %ebx
    0000010d: 	jle	.Ltmp54 # Offset: 269
    0000010f: 	movzwl	0x4(%r14,%rdi), %r10d
    00000115: 	rolw	$0x8, %r10w
    0000011a: 	addl	%r10d, %eax
    0000011d: 	leal	0x3(%rdx), %r10d
    00000121: 	cmpl	%ebx, %r10d
    00000124: 	jge	.Ltmp54 # Offset: 292
    00000126: 	movzwl	0x6(%r14,%rdi), %r10d
    0000012c: 	rolw	$0x8, %r10w
    00000131: 	addl	%r10d, %eax
    00000134: 	leal	0x4(%rdx), %r10d
    00000138: 	cmpl	%r10d, %ebx
    0000013b: 	jle	.Ltmp54 # Offset: 315
    0000013d: 	movzwl	0x8(%r14,%rdi), %r10d
    00000143: 	rolw	$0x8, %r10w
    00000148: 	addl	%r10d, %eax
    0000014b: 	leal	0x5(%rdx), %r10d
    0000014f: 	cmpl	%r10d, %ebx
    00000152: 	jle	.Ltmp54 # Offset: 338
    00000154: 	movzwl	0xa(%r14,%rdi), %r10d
    0000015a: 	addl	$0x6, %edx
    0000015d: 	rolw	$0x8, %r10w
    00000162: 	addl	%r10d, %eax
    00000165: 	cmpl	%edx, %ebx
    00000167: 	jle	.Ltmp54 # Offset: 359
    00000169: 	movzwl	0xc(%r14,%rdi), %edx
    0000016f: 	rolw	$0x8, %dx
    00000173: 	addl	%edx, %eax
.Ltmp54:
    00000175: 	movzwl	(%r13), %edx
    0000017a: 	rolw	$0x8, %dx
    0000017e: 	imulw	$0x1f40, %dx, %dx
    00000183: 	cmpw	%ax, %dx
    00000186: 	je	.Ltmp57 # Offset: 390
    00000188: 	movl	current_test(%rip), %edx
    0000018e: 	movl	$0x1, %edi
    00000193: 	xorl	%eax, %eax
    00000195: 	addl	$0x1, %ebp
    00000198: 	leaq	DATAat0x75e5(%rip), %rsi
    0000019f: 	callq	__printf_chk@PLT # Offset: 415
    000001a4: 	movl	iterations(%rip), %esi
    000001aa: 	cmpl	%esi, %ebp
    000001ac: 	jl	.Ltmp58 # Offset: 428
.Ltmp53:
    000001b2: 	callq	clock@PLT # Offset: 434
    000001b7: 	pxor	%xmm0, %xmm0
    000001bb: 	movq	0x8(%rsp), %rdi
    000001c0: 	movq	%rax, end_time(%rip)
    000001c7: 	subq	start_time(%rip), %rax
    000001ce: 	cvtsi2sd	%rax, %xmm0
    000001d3: 	divsd	DATAat0x7608(%rip), %xmm0
    000001db: 	addq	$0x18, %rsp
    000001df: 	popq	%rbx
    000001e0: 	popq	%rbp
    000001e1: 	popq	%r12
    000001e3: 	popq	%r13
    000001e5: 	popq	%r14
    000001e7: 	popq	%r15
    000001e9: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 489
    000001ee: 	nop # Size: 2
.Ltmp57:
    000001f0: 	addl	$0x1, %ebp
    000001f3: 	cmpl	%esi, %ebp
    000001f5: 	jl	.Ltmp58 # Offset: 501
    000001fb: 	jmp	.Ltmp53 # Offset: 507
.Ltmp55:
    000001fd: 	xorl	%edx, %edx
    000001ff: 	xorl	%eax, %eax
    00000201: 	jmp	.Ltmp59 # Offset: 513
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIt6swab16EvPT_iPKc"

Binary Function "_Z13test_constantIt12swab16_mask1EvPT_iPKc" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x21c0
  Size        : 0x206
  MaxSize     : 0x210
  Offset      : 0x21c0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIt12swab16_mask1EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x18, %rsp
    00000017: 	movq	%rdx, 0x8(%rsp)
    0000001c: 	callq	clock@PLT # Offset: 28
    00000021: 	movl	iterations(%rip), %esi
    00000027: 	movq	%rax, start_time(%rip)
    0000002e: 	testl	%esi, %esi
    00000030: 	jle	.Ltmp60 # Offset: 48
    00000036: 	leal	-0x1(%rbx), %eax
    00000039: 	movl	%ebx, %r12d
    0000003c: 	leaq	init_value(%rip), %r13
    00000043: 	xorl	%ebp, %ebp
    00000045: 	movl	%eax, 0x4(%rsp)
    00000049: 	movl	%ebx, %eax
    0000004b: 	andl	$-0x8, %r12d
    0000004f: 	shrl	$0x3, %eax
    00000052: 	subl	$0x1, %eax
    00000055: 	shlq	$0x4, %rax
    00000059: 	leaq	0x10(%r14,%rax), %r15
    0000005e: 	nop # Size: 2
.Ltmp65:
    00000060: 	xorl	%eax, %eax
    00000062: 	testl	%ebx, %ebx
    00000064: 	jle	.Ltmp61 # Offset: 100
    0000006a: 	cmpl	$0x6, 0x4(%rsp)
    0000006f: 	jbe	.Ltmp62 # Offset: 111
    00000075: 	movq	%r14, %rax
    00000078: 	pxor	%xmm2, %xmm2
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp63:
    00000080: 	movdqu	(%rax), %xmm0
    00000084: 	addq	$0x10, %rax
    00000088: 	movdqa	%xmm0, %xmm1
    0000008c: 	psrlw	$0x8, %xmm0
    00000091: 	psllw	$0x8, %xmm1
    00000096: 	por	%xmm1, %xmm0
    0000009a: 	paddw	%xmm0, %xmm2
    0000009e: 	cmpq	%r15, %rax
    000000a1: 	jne	.Ltmp63 # Offset: 161
    000000a3: 	movdqa	%xmm2, %xmm0
    000000a7: 	psrldq	$0x8, %xmm0
    000000ac: 	paddw	%xmm0, %xmm2
    000000b0: 	movdqa	%xmm2, %xmm0
    000000b4: 	psrldq	$0x4, %xmm0
    000000b9: 	paddw	%xmm0, %xmm2
    000000bd: 	movdqa	%xmm2, %xmm0
    000000c1: 	psrldq	$0x2, %xmm0
    000000c6: 	paddw	%xmm0, %xmm2
    000000ca: 	pextrw	$0x0, %xmm2, %eax
    000000cf: 	cmpl	%r12d, %ebx
    000000d2: 	je	.Ltmp61 # Offset: 210
    000000d8: 	movl	%r12d, %edx
.Ltmp66:
    000000db: 	movslq	%edx, %r10
    000000de: 	leaq	(%r10,%r10), %rdi
    000000e2: 	movzwl	(%r14,%r10,2), %r10d
    000000e7: 	rolw	$0x8, %r10w
    000000ec: 	addl	%r10d, %eax
    000000ef: 	leal	0x1(%rdx), %r10d
    000000f3: 	cmpl	%r10d, %ebx
    000000f6: 	jle	.Ltmp61 # Offset: 246
    000000f8: 	movzwl	0x2(%r14,%rdi), %r10d
    000000fe: 	rolw	$0x8, %r10w
    00000103: 	addl	%r10d, %eax
    00000106: 	leal	0x2(%rdx), %r10d
    0000010a: 	cmpl	%r10d, %ebx
    0000010d: 	jle	.Ltmp61 # Offset: 269
    0000010f: 	movzwl	0x4(%r14,%rdi), %r10d
    00000115: 	rolw	$0x8, %r10w
    0000011a: 	addl	%r10d, %eax
    0000011d: 	leal	0x3(%rdx), %r10d
    00000121: 	cmpl	%ebx, %r10d
    00000124: 	jge	.Ltmp61 # Offset: 292
    00000126: 	movzwl	0x6(%r14,%rdi), %r10d
    0000012c: 	rolw	$0x8, %r10w
    00000131: 	addl	%r10d, %eax
    00000134: 	leal	0x4(%rdx), %r10d
    00000138: 	cmpl	%r10d, %ebx
    0000013b: 	jle	.Ltmp61 # Offset: 315
    0000013d: 	movzwl	0x8(%r14,%rdi), %r10d
    00000143: 	rolw	$0x8, %r10w
    00000148: 	addl	%r10d, %eax
    0000014b: 	leal	0x5(%rdx), %r10d
    0000014f: 	cmpl	%r10d, %ebx
    00000152: 	jle	.Ltmp61 # Offset: 338
    00000154: 	movzwl	0xa(%r14,%rdi), %r10d
    0000015a: 	addl	$0x6, %edx
    0000015d: 	rolw	$0x8, %r10w
    00000162: 	addl	%r10d, %eax
    00000165: 	cmpl	%edx, %ebx
    00000167: 	jle	.Ltmp61 # Offset: 359
    00000169: 	movzwl	0xc(%r14,%rdi), %edx
    0000016f: 	rolw	$0x8, %dx
    00000173: 	addl	%edx, %eax
.Ltmp61:
    00000175: 	movzwl	(%r13), %edx
    0000017a: 	rolw	$0x8, %dx
    0000017e: 	imulw	$0x1f40, %dx, %dx
    00000183: 	cmpw	%ax, %dx
    00000186: 	je	.Ltmp64 # Offset: 390
    00000188: 	movl	current_test(%rip), %edx
    0000018e: 	movl	$0x1, %edi
    00000193: 	xorl	%eax, %eax
    00000195: 	addl	$0x1, %ebp
    00000198: 	leaq	DATAat0x75e5(%rip), %rsi
    0000019f: 	callq	__printf_chk@PLT # Offset: 415
    000001a4: 	movl	iterations(%rip), %esi
    000001aa: 	cmpl	%esi, %ebp
    000001ac: 	jl	.Ltmp65 # Offset: 428
.Ltmp60:
    000001b2: 	callq	clock@PLT # Offset: 434
    000001b7: 	pxor	%xmm0, %xmm0
    000001bb: 	movq	0x8(%rsp), %rdi
    000001c0: 	movq	%rax, end_time(%rip)
    000001c7: 	subq	start_time(%rip), %rax
    000001ce: 	cvtsi2sd	%rax, %xmm0
    000001d3: 	divsd	DATAat0x7608(%rip), %xmm0
    000001db: 	addq	$0x18, %rsp
    000001df: 	popq	%rbx
    000001e0: 	popq	%rbp
    000001e1: 	popq	%r12
    000001e3: 	popq	%r13
    000001e5: 	popq	%r14
    000001e7: 	popq	%r15
    000001e9: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 489
    000001ee: 	nop # Size: 2
.Ltmp64:
    000001f0: 	addl	$0x1, %ebp
    000001f3: 	cmpl	%esi, %ebp
    000001f5: 	jl	.Ltmp65 # Offset: 501
    000001fb: 	jmp	.Ltmp60 # Offset: 507
.Ltmp62:
    000001fd: 	xorl	%edx, %edx
    000001ff: 	xorl	%eax, %eax
    00000201: 	jmp	.Ltmp66 # Offset: 513
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIt12swab16_mask1EvPT_iPKc"

Binary Function "_Z13test_constantIt12swab16_mask2EvPT_iPKc" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x23d0
  Size        : 0x206
  MaxSize     : 0x210
  Offset      : 0x23d0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIt12swab16_mask2EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x18, %rsp
    00000017: 	movq	%rdx, 0x8(%rsp)
    0000001c: 	callq	clock@PLT # Offset: 28
    00000021: 	movl	iterations(%rip), %esi
    00000027: 	movq	%rax, start_time(%rip)
    0000002e: 	testl	%esi, %esi
    00000030: 	jle	.Ltmp67 # Offset: 48
    00000036: 	leal	-0x1(%rbx), %eax
    00000039: 	movl	%ebx, %r12d
    0000003c: 	leaq	init_value(%rip), %r13
    00000043: 	xorl	%ebp, %ebp
    00000045: 	movl	%eax, 0x4(%rsp)
    00000049: 	movl	%ebx, %eax
    0000004b: 	andl	$-0x8, %r12d
    0000004f: 	shrl	$0x3, %eax
    00000052: 	subl	$0x1, %eax
    00000055: 	shlq	$0x4, %rax
    00000059: 	leaq	0x10(%r14,%rax), %r15
    0000005e: 	nop # Size: 2
.Ltmp72:
    00000060: 	xorl	%eax, %eax
    00000062: 	testl	%ebx, %ebx
    00000064: 	jle	.Ltmp68 # Offset: 100
    0000006a: 	cmpl	$0x6, 0x4(%rsp)
    0000006f: 	jbe	.Ltmp69 # Offset: 111
    00000075: 	movq	%r14, %rax
    00000078: 	pxor	%xmm2, %xmm2
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp70:
    00000080: 	movdqu	(%rax), %xmm0
    00000084: 	addq	$0x10, %rax
    00000088: 	movdqa	%xmm0, %xmm1
    0000008c: 	psrlw	$0x8, %xmm0
    00000091: 	psllw	$0x8, %xmm1
    00000096: 	por	%xmm1, %xmm0
    0000009a: 	paddw	%xmm0, %xmm2
    0000009e: 	cmpq	%r15, %rax
    000000a1: 	jne	.Ltmp70 # Offset: 161
    000000a3: 	movdqa	%xmm2, %xmm0
    000000a7: 	psrldq	$0x8, %xmm0
    000000ac: 	paddw	%xmm0, %xmm2
    000000b0: 	movdqa	%xmm2, %xmm0
    000000b4: 	psrldq	$0x4, %xmm0
    000000b9: 	paddw	%xmm0, %xmm2
    000000bd: 	movdqa	%xmm2, %xmm0
    000000c1: 	psrldq	$0x2, %xmm0
    000000c6: 	paddw	%xmm0, %xmm2
    000000ca: 	pextrw	$0x0, %xmm2, %eax
    000000cf: 	cmpl	%r12d, %ebx
    000000d2: 	je	.Ltmp68 # Offset: 210
    000000d8: 	movl	%r12d, %edx
.Ltmp73:
    000000db: 	movslq	%edx, %r10
    000000de: 	leaq	(%r10,%r10), %rdi
    000000e2: 	movzwl	(%r14,%r10,2), %r10d
    000000e7: 	rolw	$0x8, %r10w
    000000ec: 	addl	%r10d, %eax
    000000ef: 	leal	0x1(%rdx), %r10d
    000000f3: 	cmpl	%r10d, %ebx
    000000f6: 	jle	.Ltmp68 # Offset: 246
    000000f8: 	movzwl	0x2(%r14,%rdi), %r10d
    000000fe: 	rolw	$0x8, %r10w
    00000103: 	addl	%r10d, %eax
    00000106: 	leal	0x2(%rdx), %r10d
    0000010a: 	cmpl	%r10d, %ebx
    0000010d: 	jle	.Ltmp68 # Offset: 269
    0000010f: 	movzwl	0x4(%r14,%rdi), %r10d
    00000115: 	rolw	$0x8, %r10w
    0000011a: 	addl	%r10d, %eax
    0000011d: 	leal	0x3(%rdx), %r10d
    00000121: 	cmpl	%ebx, %r10d
    00000124: 	jge	.Ltmp68 # Offset: 292
    00000126: 	movzwl	0x6(%r14,%rdi), %r10d
    0000012c: 	rolw	$0x8, %r10w
    00000131: 	addl	%r10d, %eax
    00000134: 	leal	0x4(%rdx), %r10d
    00000138: 	cmpl	%r10d, %ebx
    0000013b: 	jle	.Ltmp68 # Offset: 315
    0000013d: 	movzwl	0x8(%r14,%rdi), %r10d
    00000143: 	rolw	$0x8, %r10w
    00000148: 	addl	%r10d, %eax
    0000014b: 	leal	0x5(%rdx), %r10d
    0000014f: 	cmpl	%r10d, %ebx
    00000152: 	jle	.Ltmp68 # Offset: 338
    00000154: 	movzwl	0xa(%r14,%rdi), %r10d
    0000015a: 	addl	$0x6, %edx
    0000015d: 	rolw	$0x8, %r10w
    00000162: 	addl	%r10d, %eax
    00000165: 	cmpl	%edx, %ebx
    00000167: 	jle	.Ltmp68 # Offset: 359
    00000169: 	movzwl	0xc(%r14,%rdi), %edx
    0000016f: 	rolw	$0x8, %dx
    00000173: 	addl	%edx, %eax
.Ltmp68:
    00000175: 	movzwl	(%r13), %edx
    0000017a: 	rolw	$0x8, %dx
    0000017e: 	imulw	$0x1f40, %dx, %dx
    00000183: 	cmpw	%ax, %dx
    00000186: 	je	.Ltmp71 # Offset: 390
    00000188: 	movl	current_test(%rip), %edx
    0000018e: 	movl	$0x1, %edi
    00000193: 	xorl	%eax, %eax
    00000195: 	addl	$0x1, %ebp
    00000198: 	leaq	DATAat0x75e5(%rip), %rsi
    0000019f: 	callq	__printf_chk@PLT # Offset: 415
    000001a4: 	movl	iterations(%rip), %esi
    000001aa: 	cmpl	%esi, %ebp
    000001ac: 	jl	.Ltmp72 # Offset: 428
.Ltmp67:
    000001b2: 	callq	clock@PLT # Offset: 434
    000001b7: 	pxor	%xmm0, %xmm0
    000001bb: 	movq	0x8(%rsp), %rdi
    000001c0: 	movq	%rax, end_time(%rip)
    000001c7: 	subq	start_time(%rip), %rax
    000001ce: 	cvtsi2sd	%rax, %xmm0
    000001d3: 	divsd	DATAat0x7608(%rip), %xmm0
    000001db: 	addq	$0x18, %rsp
    000001df: 	popq	%rbx
    000001e0: 	popq	%rbp
    000001e1: 	popq	%r12
    000001e3: 	popq	%r13
    000001e5: 	popq	%r14
    000001e7: 	popq	%r15
    000001e9: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 489
    000001ee: 	nop # Size: 2
.Ltmp71:
    000001f0: 	addl	$0x1, %ebp
    000001f3: 	cmpl	%esi, %ebp
    000001f5: 	jl	.Ltmp72 # Offset: 501
    000001fb: 	jmp	.Ltmp67 # Offset: 507
.Ltmp69:
    000001fd: 	xorl	%edx, %edx
    000001ff: 	xorl	%eax, %eax
    00000201: 	jmp	.Ltmp73 # Offset: 513
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIt12swab16_mask2EvPT_iPKc"

Binary Function "_Z13test_constantIt12swab16_mask3EvPT_iPKc" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x25e0
  Size        : 0x21c
  MaxSize     : 0x220
  Offset      : 0x25e0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIt12swab16_mask3EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp74 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebx
    0000003e: 	movq	init_value(%rip), %rdi
    00000045: 	xorl	%r12d, %r12d
    00000048: 	movl	%eax, 0x4(%rsp)
    0000004c: 	movl	%r14d, %eax
    0000004f: 	andl	$-0x8, %ebx
    00000052: 	leaq	DATAat0x75e5(%rip), %rbp
    00000059: 	shrl	$0x3, %eax
    0000005c: 	subl	$0x1, %eax
    0000005f: 	shlq	$0x4, %rax
    00000063: 	leaq	0x10(%r15,%rax), %r13
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp80:
    00000070: 	xorl	%edx, %edx
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp75 # Offset: 117
    0000007b: 	cmpl	$0x6, 0x4(%rsp)
    00000080: 	jbe	.Ltmp76 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm2, %xmm2
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp77:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	movdqa	%xmm0, %xmm1
    0000009c: 	psrlw	$0x8, %xmm0
    000000a1: 	psllw	$0x8, %xmm1
    000000a6: 	paddw	%xmm1, %xmm0
    000000aa: 	paddw	%xmm0, %xmm2
    000000ae: 	cmpq	%r13, %rax
    000000b1: 	jne	.Ltmp77 # Offset: 177
    000000b3: 	movdqa	%xmm2, %xmm0
    000000b7: 	psrldq	$0x8, %xmm0
    000000bc: 	paddw	%xmm0, %xmm2
    000000c0: 	movdqa	%xmm2, %xmm0
    000000c4: 	psrldq	$0x4, %xmm0
    000000c9: 	paddw	%xmm0, %xmm2
    000000cd: 	movdqa	%xmm2, %xmm0
    000000d1: 	psrldq	$0x2, %xmm0
    000000d6: 	paddw	%xmm0, %xmm2
    000000da: 	pextrw	$0x0, %xmm2, %edx
    000000df: 	cmpl	%r14d, %ebx
    000000e2: 	je	.Ltmp75 # Offset: 226
    000000e8: 	movl	%ebx, %eax
    000000ea: 	movl	%ebx, %ecx
.Ltmp81:
    000000ec: 	movl	%r14d, %r8d
    000000ef: 	subl	%eax, %r8d
    000000f2: 	leal	-0x1(%r8), %r9d
    000000f6: 	cmpl	$0x2, %r9d
    000000fa: 	jbe	.Ltmp78 # Offset: 250
    000000fc: 	movq	(%r15,%rax,2), %xmm1
    00000102: 	movdqa	%xmm1, %xmm0
    00000106: 	psllw	$0x8, %xmm1
    0000010b: 	psrlw	$0x8, %xmm0
    00000110: 	paddw	%xmm1, %xmm0
    00000114: 	pextrw	$0x0, %xmm0, %eax
    00000119: 	pextrw	$0x1, %xmm0, %r9d
    0000011f: 	addl	%r9d, %eax
    00000122: 	addl	%edx, %eax
    00000124: 	pextrw	$0x2, %xmm0, %edx
    00000129: 	addl	%edx, %eax
    0000012b: 	pextrw	$0x3, %xmm0, %edx
    00000130: 	addl	%eax, %edx
    00000132: 	movl	%r8d, %eax
    00000135: 	andl	$-0x4, %eax
    00000138: 	addl	%eax, %ecx
    0000013a: 	cmpl	%eax, %r8d
    0000013d: 	je	.Ltmp75 # Offset: 317
.Ltmp78:
    0000013f: 	movslq	%ecx, %rax
    00000142: 	leaq	(%rax,%rax), %r8
    00000146: 	movzwl	(%r15,%rax,2), %eax
    0000014b: 	movl	%eax, %r9d
    0000014e: 	shll	$0x8, %eax
    00000151: 	shrw	$0x8, %r9w
    00000156: 	addl	%r9d, %edx
    00000159: 	addl	%eax, %edx
    0000015b: 	leal	0x1(%rcx), %eax
    0000015e: 	cmpl	%eax, %r14d
    00000161: 	jle	.Ltmp75 # Offset: 353
    00000163: 	movzwl	0x2(%r15,%r8), %eax
    00000169: 	addl	$0x2, %ecx
    0000016c: 	rolw	$0x8, %ax
    00000170: 	addl	%eax, %edx
    00000172: 	cmpl	%ecx, %r14d
    00000175: 	jle	.Ltmp75 # Offset: 373
    00000177: 	movzwl	0x4(%r15,%r8), %eax
    0000017d: 	rolw	$0x8, %ax
    00000181: 	addl	%eax, %edx
.Ltmp75:
    00000183: 	movl	%edi, %eax
    00000185: 	rolw	$0x8, %ax
    00000189: 	imulw	$0x1f40, %ax, %ax
    0000018e: 	cmpw	%dx, %ax
    00000191: 	je	.Ltmp79 # Offset: 401
    00000193: 	movl	current_test(%rip), %edx
    00000199: 	movq	%rbp, %rsi
    0000019c: 	movl	$0x1, %edi
    000001a1: 	xorl	%eax, %eax
    000001a3: 	addl	$0x1, %r12d
    000001a7: 	callq	__printf_chk@PLT # Offset: 423
    000001ac: 	movl	iterations(%rip), %esi
    000001b2: 	cmpl	%r12d, %esi
    000001b5: 	jle	.Ltmp74 # Offset: 437
    000001b7: 	movq	init_value(%rip), %rdi
    000001be: 	jmp	.Ltmp80 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp79:
    000001c8: 	addl	$0x1, %r12d
    000001cc: 	cmpl	%esi, %r12d
    000001cf: 	jl	.Ltmp80 # Offset: 463
.Ltmp74:
    000001d5: 	callq	clock@PLT # Offset: 469
    000001da: 	pxor	%xmm0, %xmm0
    000001de: 	movq	0x8(%rsp), %rdi
    000001e3: 	movq	%rax, end_time(%rip)
    000001ea: 	subq	start_time(%rip), %rax
    000001f1: 	cvtsi2sd	%rax, %xmm0
    000001f6: 	divsd	DATAat0x7608(%rip), %xmm0
    000001fe: 	addq	$0x18, %rsp
    00000202: 	popq	%rbx
    00000203: 	popq	%rbp
    00000204: 	popq	%r12
    00000206: 	popq	%r13
    00000208: 	popq	%r14
    0000020a: 	popq	%r15
    0000020c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 524
.Ltmp76:
    00000211: 	xorl	%eax, %eax
    00000213: 	xorl	%ecx, %ecx
    00000215: 	xorl	%edx, %edx
    00000217: 	jmp	.Ltmp81 # Offset: 535
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIt12swab16_mask3EvPT_iPKc"

Binary Function "_Z13test_constantIt12swab16_mask4EvPT_iPKc" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x2800
  Size        : 0x21c
  MaxSize     : 0x220
  Offset      : 0x2800
  Section     : .text
  Orc Section : .local.text._Z13test_constantIt12swab16_mask4EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp82 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebx
    0000003e: 	movq	init_value(%rip), %rdi
    00000045: 	xorl	%r12d, %r12d
    00000048: 	movl	%eax, 0x4(%rsp)
    0000004c: 	movl	%r14d, %eax
    0000004f: 	andl	$-0x8, %ebx
    00000052: 	leaq	DATAat0x75e5(%rip), %rbp
    00000059: 	shrl	$0x3, %eax
    0000005c: 	subl	$0x1, %eax
    0000005f: 	shlq	$0x4, %rax
    00000063: 	leaq	0x10(%r15,%rax), %r13
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp88:
    00000070: 	xorl	%edx, %edx
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp83 # Offset: 117
    0000007b: 	cmpl	$0x6, 0x4(%rsp)
    00000080: 	jbe	.Ltmp84 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm2, %xmm2
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp85:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	movdqa	%xmm0, %xmm1
    0000009c: 	psrlw	$0x8, %xmm0
    000000a1: 	psllw	$0x8, %xmm1
    000000a6: 	paddw	%xmm1, %xmm0
    000000aa: 	paddw	%xmm0, %xmm2
    000000ae: 	cmpq	%r13, %rax
    000000b1: 	jne	.Ltmp85 # Offset: 177
    000000b3: 	movdqa	%xmm2, %xmm0
    000000b7: 	psrldq	$0x8, %xmm0
    000000bc: 	paddw	%xmm0, %xmm2
    000000c0: 	movdqa	%xmm2, %xmm0
    000000c4: 	psrldq	$0x4, %xmm0
    000000c9: 	paddw	%xmm0, %xmm2
    000000cd: 	movdqa	%xmm2, %xmm0
    000000d1: 	psrldq	$0x2, %xmm0
    000000d6: 	paddw	%xmm0, %xmm2
    000000da: 	pextrw	$0x0, %xmm2, %edx
    000000df: 	cmpl	%r14d, %ebx
    000000e2: 	je	.Ltmp83 # Offset: 226
    000000e8: 	movl	%ebx, %eax
    000000ea: 	movl	%ebx, %ecx
.Ltmp89:
    000000ec: 	movl	%r14d, %r8d
    000000ef: 	subl	%eax, %r8d
    000000f2: 	leal	-0x1(%r8), %r9d
    000000f6: 	cmpl	$0x2, %r9d
    000000fa: 	jbe	.Ltmp86 # Offset: 250
    000000fc: 	movq	(%r15,%rax,2), %xmm1
    00000102: 	movdqa	%xmm1, %xmm0
    00000106: 	psllw	$0x8, %xmm1
    0000010b: 	psrlw	$0x8, %xmm0
    00000110: 	paddw	%xmm1, %xmm0
    00000114: 	pextrw	$0x0, %xmm0, %eax
    00000119: 	pextrw	$0x1, %xmm0, %r9d
    0000011f: 	addl	%r9d, %eax
    00000122: 	addl	%edx, %eax
    00000124: 	pextrw	$0x2, %xmm0, %edx
    00000129: 	addl	%edx, %eax
    0000012b: 	pextrw	$0x3, %xmm0, %edx
    00000130: 	addl	%eax, %edx
    00000132: 	movl	%r8d, %eax
    00000135: 	andl	$-0x4, %eax
    00000138: 	addl	%eax, %ecx
    0000013a: 	cmpl	%eax, %r8d
    0000013d: 	je	.Ltmp83 # Offset: 317
.Ltmp86:
    0000013f: 	movslq	%ecx, %rax
    00000142: 	leaq	(%rax,%rax), %r8
    00000146: 	movzwl	(%r15,%rax,2), %eax
    0000014b: 	movl	%eax, %r9d
    0000014e: 	shll	$0x8, %eax
    00000151: 	shrw	$0x8, %r9w
    00000156: 	addl	%r9d, %edx
    00000159: 	addl	%eax, %edx
    0000015b: 	leal	0x1(%rcx), %eax
    0000015e: 	cmpl	%eax, %r14d
    00000161: 	jle	.Ltmp83 # Offset: 353
    00000163: 	movzwl	0x2(%r15,%r8), %eax
    00000169: 	addl	$0x2, %ecx
    0000016c: 	rolw	$0x8, %ax
    00000170: 	addl	%eax, %edx
    00000172: 	cmpl	%ecx, %r14d
    00000175: 	jle	.Ltmp83 # Offset: 373
    00000177: 	movzwl	0x4(%r15,%r8), %eax
    0000017d: 	rolw	$0x8, %ax
    00000181: 	addl	%eax, %edx
.Ltmp83:
    00000183: 	movl	%edi, %eax
    00000185: 	rolw	$0x8, %ax
    00000189: 	imulw	$0x1f40, %ax, %ax
    0000018e: 	cmpw	%dx, %ax
    00000191: 	je	.Ltmp87 # Offset: 401
    00000193: 	movl	current_test(%rip), %edx
    00000199: 	movq	%rbp, %rsi
    0000019c: 	movl	$0x1, %edi
    000001a1: 	xorl	%eax, %eax
    000001a3: 	addl	$0x1, %r12d
    000001a7: 	callq	__printf_chk@PLT # Offset: 423
    000001ac: 	movl	iterations(%rip), %esi
    000001b2: 	cmpl	%r12d, %esi
    000001b5: 	jle	.Ltmp82 # Offset: 437
    000001b7: 	movq	init_value(%rip), %rdi
    000001be: 	jmp	.Ltmp88 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp87:
    000001c8: 	addl	$0x1, %r12d
    000001cc: 	cmpl	%esi, %r12d
    000001cf: 	jl	.Ltmp88 # Offset: 463
.Ltmp82:
    000001d5: 	callq	clock@PLT # Offset: 469
    000001da: 	pxor	%xmm0, %xmm0
    000001de: 	movq	0x8(%rsp), %rdi
    000001e3: 	movq	%rax, end_time(%rip)
    000001ea: 	subq	start_time(%rip), %rax
    000001f1: 	cvtsi2sd	%rax, %xmm0
    000001f6: 	divsd	DATAat0x7608(%rip), %xmm0
    000001fe: 	addq	$0x18, %rsp
    00000202: 	popq	%rbx
    00000203: 	popq	%rbp
    00000204: 	popq	%r12
    00000206: 	popq	%r13
    00000208: 	popq	%r14
    0000020a: 	popq	%r15
    0000020c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 524
.Ltmp84:
    00000211: 	xorl	%eax, %eax
    00000213: 	xorl	%ecx, %ecx
    00000215: 	xorl	%edx, %edx
    00000217: 	jmp	.Ltmp89 # Offset: 535
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIt12swab16_mask4EvPT_iPKc"

Binary Function "_Z13test_constantIt12swab16_mask5EvPT_iPKc" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x2a20
  Size        : 0x214
  MaxSize     : 0x220
  Offset      : 0x2a20
  Section     : .text
  Orc Section : .local.text._Z13test_constantIt12swab16_mask5EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp90 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebx
    0000003e: 	movq	init_value(%rip), %rdi
    00000045: 	xorl	%r12d, %r12d
    00000048: 	movl	%eax, 0x4(%rsp)
    0000004c: 	movl	%r14d, %eax
    0000004f: 	andl	$-0x8, %ebx
    00000052: 	leaq	DATAat0x75e5(%rip), %rbp
    00000059: 	shrl	$0x3, %eax
    0000005c: 	subl	$0x1, %eax
    0000005f: 	shlq	$0x4, %rax
    00000063: 	leaq	0x10(%r15,%rax), %r13
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp96:
    00000070: 	xorl	%edx, %edx
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp91 # Offset: 117
    0000007b: 	cmpl	$0x6, 0x4(%rsp)
    00000080: 	jbe	.Ltmp92 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm2, %xmm2
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp93:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	movdqa	%xmm0, %xmm1
    0000009c: 	psrlw	$0x8, %xmm0
    000000a1: 	psllw	$0x8, %xmm1
    000000a6: 	pxor	%xmm1, %xmm0
    000000aa: 	paddw	%xmm0, %xmm2
    000000ae: 	cmpq	%r13, %rax
    000000b1: 	jne	.Ltmp93 # Offset: 177
    000000b3: 	movdqa	%xmm2, %xmm0
    000000b7: 	psrldq	$0x8, %xmm0
    000000bc: 	paddw	%xmm0, %xmm2
    000000c0: 	movdqa	%xmm2, %xmm0
    000000c4: 	psrldq	$0x4, %xmm0
    000000c9: 	paddw	%xmm0, %xmm2
    000000cd: 	movdqa	%xmm2, %xmm0
    000000d1: 	psrldq	$0x2, %xmm0
    000000d6: 	paddw	%xmm0, %xmm2
    000000da: 	pextrw	$0x0, %xmm2, %edx
    000000df: 	cmpl	%r14d, %ebx
    000000e2: 	je	.Ltmp91 # Offset: 226
    000000e8: 	movl	%ebx, %eax
    000000ea: 	movl	%ebx, %ecx
.Ltmp97:
    000000ec: 	movl	%r14d, %r8d
    000000ef: 	subl	%eax, %r8d
    000000f2: 	leal	-0x1(%r8), %r9d
    000000f6: 	cmpl	$0x2, %r9d
    000000fa: 	jbe	.Ltmp94 # Offset: 250
    000000fc: 	movq	(%r15,%rax,2), %xmm1
    00000102: 	movdqa	%xmm1, %xmm0
    00000106: 	psllw	$0x8, %xmm1
    0000010b: 	psrlw	$0x8, %xmm0
    00000110: 	pxor	%xmm1, %xmm0
    00000114: 	pextrw	$0x0, %xmm0, %eax
    00000119: 	pextrw	$0x1, %xmm0, %r9d
    0000011f: 	addl	%r9d, %eax
    00000122: 	addl	%edx, %eax
    00000124: 	pextrw	$0x2, %xmm0, %edx
    00000129: 	addl	%edx, %eax
    0000012b: 	pextrw	$0x3, %xmm0, %edx
    00000130: 	addl	%eax, %edx
    00000132: 	movl	%r8d, %eax
    00000135: 	andl	$-0x4, %eax
    00000138: 	addl	%eax, %ecx
    0000013a: 	cmpl	%eax, %r8d
    0000013d: 	je	.Ltmp91 # Offset: 317
.Ltmp94:
    0000013f: 	movslq	%ecx, %rax
    00000142: 	leaq	(%rax,%rax), %r8
    00000146: 	movzwl	(%r15,%rax,2), %eax
    0000014b: 	rolw	$0x8, %ax
    0000014f: 	addl	%eax, %edx
    00000151: 	leal	0x1(%rcx), %eax
    00000154: 	cmpl	%eax, %r14d
    00000157: 	jle	.Ltmp91 # Offset: 343
    00000159: 	movzwl	0x2(%r15,%r8), %eax
    0000015f: 	addl	$0x2, %ecx
    00000162: 	rolw	$0x8, %ax
    00000166: 	addl	%eax, %edx
    00000168: 	cmpl	%ecx, %r14d
    0000016b: 	jle	.Ltmp91 # Offset: 363
    0000016d: 	movzwl	0x4(%r15,%r8), %eax
    00000173: 	rolw	$0x8, %ax
    00000177: 	addl	%eax, %edx
.Ltmp91:
    00000179: 	movl	%edi, %eax
    0000017b: 	rolw	$0x8, %ax
    0000017f: 	imulw	$0x1f40, %ax, %ax
    00000184: 	cmpw	%dx, %ax
    00000187: 	je	.Ltmp95 # Offset: 391
    00000189: 	movl	current_test(%rip), %edx
    0000018f: 	movq	%rbp, %rsi
    00000192: 	movl	$0x1, %edi
    00000197: 	xorl	%eax, %eax
    00000199: 	addl	$0x1, %r12d
    0000019d: 	callq	__printf_chk@PLT # Offset: 413
    000001a2: 	movl	iterations(%rip), %esi
    000001a8: 	cmpl	%r12d, %esi
    000001ab: 	jle	.Ltmp90 # Offset: 427
    000001ad: 	movq	init_value(%rip), %rdi
    000001b4: 	jmp	.Ltmp96 # Offset: 436
    000001b9: 	nopl	(%rax) # Size: 7
.Ltmp95:
    000001c0: 	addl	$0x1, %r12d
    000001c4: 	cmpl	%esi, %r12d
    000001c7: 	jl	.Ltmp96 # Offset: 455
.Ltmp90:
    000001cd: 	callq	clock@PLT # Offset: 461
    000001d2: 	pxor	%xmm0, %xmm0
    000001d6: 	movq	0x8(%rsp), %rdi
    000001db: 	movq	%rax, end_time(%rip)
    000001e2: 	subq	start_time(%rip), %rax
    000001e9: 	cvtsi2sd	%rax, %xmm0
    000001ee: 	divsd	DATAat0x7608(%rip), %xmm0
    000001f6: 	addq	$0x18, %rsp
    000001fa: 	popq	%rbx
    000001fb: 	popq	%rbp
    000001fc: 	popq	%r12
    000001fe: 	popq	%r13
    00000200: 	popq	%r14
    00000202: 	popq	%r15
    00000204: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 516
.Ltmp92:
    00000209: 	xorl	%eax, %eax
    0000020b: 	xorl	%ecx, %ecx
    0000020d: 	xorl	%edx, %edx
    0000020f: 	jmp	.Ltmp97 # Offset: 527
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIt12swab16_mask5EvPT_iPKc"

Binary Function "_Z13test_constantIt12swab16_mask6EvPT_iPKc" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x2c40
  Size        : 0x214
  MaxSize     : 0x220
  Offset      : 0x2c40
  Section     : .text
  Orc Section : .local.text._Z13test_constantIt12swab16_mask6EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp98 # Offset: 49
    00000037: 	leal	-0x1(%r14), %eax
    0000003b: 	movl	%r14d, %ebx
    0000003e: 	movq	init_value(%rip), %rdi
    00000045: 	xorl	%r12d, %r12d
    00000048: 	movl	%eax, 0x4(%rsp)
    0000004c: 	movl	%r14d, %eax
    0000004f: 	andl	$-0x8, %ebx
    00000052: 	leaq	DATAat0x75e5(%rip), %rbp
    00000059: 	shrl	$0x3, %eax
    0000005c: 	subl	$0x1, %eax
    0000005f: 	shlq	$0x4, %rax
    00000063: 	leaq	0x10(%r15,%rax), %r13
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp104:
    00000070: 	xorl	%edx, %edx
    00000072: 	testl	%r14d, %r14d
    00000075: 	jle	.Ltmp99 # Offset: 117
    0000007b: 	cmpl	$0x6, 0x4(%rsp)
    00000080: 	jbe	.Ltmp100 # Offset: 128
    00000086: 	movq	%r15, %rax
    00000089: 	pxor	%xmm2, %xmm2
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp101:
    00000090: 	movdqu	(%rax), %xmm0
    00000094: 	addq	$0x10, %rax
    00000098: 	movdqa	%xmm0, %xmm1
    0000009c: 	psrlw	$0x8, %xmm0
    000000a1: 	psllw	$0x8, %xmm1
    000000a6: 	pxor	%xmm1, %xmm0
    000000aa: 	paddw	%xmm0, %xmm2
    000000ae: 	cmpq	%r13, %rax
    000000b1: 	jne	.Ltmp101 # Offset: 177
    000000b3: 	movdqa	%xmm2, %xmm0
    000000b7: 	psrldq	$0x8, %xmm0
    000000bc: 	paddw	%xmm0, %xmm2
    000000c0: 	movdqa	%xmm2, %xmm0
    000000c4: 	psrldq	$0x4, %xmm0
    000000c9: 	paddw	%xmm0, %xmm2
    000000cd: 	movdqa	%xmm2, %xmm0
    000000d1: 	psrldq	$0x2, %xmm0
    000000d6: 	paddw	%xmm0, %xmm2
    000000da: 	pextrw	$0x0, %xmm2, %edx
    000000df: 	cmpl	%r14d, %ebx
    000000e2: 	je	.Ltmp99 # Offset: 226
    000000e8: 	movl	%ebx, %eax
    000000ea: 	movl	%ebx, %ecx
.Ltmp105:
    000000ec: 	movl	%r14d, %r8d
    000000ef: 	subl	%eax, %r8d
    000000f2: 	leal	-0x1(%r8), %r9d
    000000f6: 	cmpl	$0x2, %r9d
    000000fa: 	jbe	.Ltmp102 # Offset: 250
    000000fc: 	movq	(%r15,%rax,2), %xmm1
    00000102: 	movdqa	%xmm1, %xmm0
    00000106: 	psllw	$0x8, %xmm1
    0000010b: 	psrlw	$0x8, %xmm0
    00000110: 	pxor	%xmm1, %xmm0
    00000114: 	pextrw	$0x0, %xmm0, %eax
    00000119: 	pextrw	$0x1, %xmm0, %r9d
    0000011f: 	addl	%r9d, %eax
    00000122: 	addl	%edx, %eax
    00000124: 	pextrw	$0x2, %xmm0, %edx
    00000129: 	addl	%edx, %eax
    0000012b: 	pextrw	$0x3, %xmm0, %edx
    00000130: 	addl	%eax, %edx
    00000132: 	movl	%r8d, %eax
    00000135: 	andl	$-0x4, %eax
    00000138: 	addl	%eax, %ecx
    0000013a: 	cmpl	%eax, %r8d
    0000013d: 	je	.Ltmp99 # Offset: 317
.Ltmp102:
    0000013f: 	movslq	%ecx, %rax
    00000142: 	leaq	(%rax,%rax), %r8
    00000146: 	movzwl	(%r15,%rax,2), %eax
    0000014b: 	rolw	$0x8, %ax
    0000014f: 	addl	%eax, %edx
    00000151: 	leal	0x1(%rcx), %eax
    00000154: 	cmpl	%eax, %r14d
    00000157: 	jle	.Ltmp99 # Offset: 343
    00000159: 	movzwl	0x2(%r15,%r8), %eax
    0000015f: 	addl	$0x2, %ecx
    00000162: 	rolw	$0x8, %ax
    00000166: 	addl	%eax, %edx
    00000168: 	cmpl	%ecx, %r14d
    0000016b: 	jle	.Ltmp99 # Offset: 363
    0000016d: 	movzwl	0x4(%r15,%r8), %eax
    00000173: 	rolw	$0x8, %ax
    00000177: 	addl	%eax, %edx
.Ltmp99:
    00000179: 	movl	%edi, %eax
    0000017b: 	rolw	$0x8, %ax
    0000017f: 	imulw	$0x1f40, %ax, %ax
    00000184: 	cmpw	%dx, %ax
    00000187: 	je	.Ltmp103 # Offset: 391
    00000189: 	movl	current_test(%rip), %edx
    0000018f: 	movq	%rbp, %rsi
    00000192: 	movl	$0x1, %edi
    00000197: 	xorl	%eax, %eax
    00000199: 	addl	$0x1, %r12d
    0000019d: 	callq	__printf_chk@PLT # Offset: 413
    000001a2: 	movl	iterations(%rip), %esi
    000001a8: 	cmpl	%r12d, %esi
    000001ab: 	jle	.Ltmp98 # Offset: 427
    000001ad: 	movq	init_value(%rip), %rdi
    000001b4: 	jmp	.Ltmp104 # Offset: 436
    000001b9: 	nopl	(%rax) # Size: 7
.Ltmp103:
    000001c0: 	addl	$0x1, %r12d
    000001c4: 	cmpl	%esi, %r12d
    000001c7: 	jl	.Ltmp104 # Offset: 455
.Ltmp98:
    000001cd: 	callq	clock@PLT # Offset: 461
    000001d2: 	pxor	%xmm0, %xmm0
    000001d6: 	movq	0x8(%rsp), %rdi
    000001db: 	movq	%rax, end_time(%rip)
    000001e2: 	subq	start_time(%rip), %rax
    000001e9: 	cvtsi2sd	%rax, %xmm0
    000001ee: 	divsd	DATAat0x7608(%rip), %xmm0
    000001f6: 	addq	$0x18, %rsp
    000001fa: 	popq	%rbx
    000001fb: 	popq	%rbp
    000001fc: 	popq	%r12
    000001fe: 	popq	%r13
    00000200: 	popq	%r14
    00000202: 	popq	%r15
    00000204: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 516
.Ltmp100:
    00000209: 	xorl	%eax, %eax
    0000020b: 	xorl	%ecx, %ecx
    0000020d: 	xorl	%edx, %edx
    0000020f: 	jmp	.Ltmp105 # Offset: 527
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIt12swab16_mask6EvPT_iPKc"

Binary Function "_Z13test_constantIt12swab16_temp1EvPT_iPKc" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x2e60
  Size        : 0x212
  MaxSize     : 0x220
  Offset      : 0x2e60
  Section     : .text
  Orc Section : .local.text._Z13test_constantIt12swab16_temp1EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x18, %rsp
    00000017: 	movq	%rdx, 0x8(%rsp)
    0000001c: 	callq	clock@PLT # Offset: 28
    00000021: 	movl	iterations(%rip), %esi
    00000027: 	movq	%rax, start_time(%rip)
    0000002e: 	testl	%esi, %esi
    00000030: 	jle	.Ltmp106 # Offset: 48
    00000036: 	leal	-0x1(%rbx), %eax
    00000039: 	movl	%ebx, %ebp
    0000003b: 	movq	init_value(%rip), %rdi
    00000042: 	xorl	%r13d, %r13d
    00000045: 	movl	%eax, 0x4(%rsp)
    00000049: 	movl	%ebx, %eax
    0000004b: 	andl	$-0x8, %ebp
    0000004e: 	leaq	DATAat0x75e5(%rip), %r12
    00000055: 	shrl	$0x3, %eax
    00000058: 	subl	$0x1, %eax
    0000005b: 	shlq	$0x4, %rax
    0000005f: 	leaq	0x10(%r14,%rax), %r15
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp111:
    00000068: 	xorl	%eax, %eax
    0000006a: 	testl	%ebx, %ebx
    0000006c: 	jle	.Ltmp107 # Offset: 108
    00000072: 	cmpl	$0x6, 0x4(%rsp)
    00000077: 	jbe	.Ltmp108 # Offset: 119
    0000007d: 	movq	%r14, %rax
    00000080: 	pxor	%xmm2, %xmm2
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp109:
    00000088: 	movdqu	(%rax), %xmm0
    0000008c: 	addq	$0x10, %rax
    00000090: 	movdqa	%xmm0, %xmm1
    00000094: 	psrlw	$0x8, %xmm0
    00000099: 	psllw	$0x8, %xmm1
    0000009e: 	por	%xmm1, %xmm0
    000000a2: 	paddw	%xmm0, %xmm2
    000000a6: 	cmpq	%r15, %rax
    000000a9: 	jne	.Ltmp109 # Offset: 169
    000000ab: 	movdqa	%xmm2, %xmm0
    000000af: 	psrldq	$0x8, %xmm0
    000000b4: 	paddw	%xmm0, %xmm2
    000000b8: 	movdqa	%xmm2, %xmm0
    000000bc: 	psrldq	$0x4, %xmm0
    000000c1: 	paddw	%xmm0, %xmm2
    000000c5: 	movdqa	%xmm2, %xmm0
    000000c9: 	psrldq	$0x2, %xmm0
    000000ce: 	paddw	%xmm0, %xmm2
    000000d2: 	pextrw	$0x0, %xmm2, %eax
    000000d7: 	cmpl	%ebx, %ebp
    000000d9: 	je	.Ltmp107 # Offset: 217
    000000df: 	movl	%ebp, %edx
.Ltmp112:
    000000e1: 	movslq	%edx, %r10
    000000e4: 	leaq	(%r10,%r10), %r9
    000000e8: 	movzwl	(%r14,%r10,2), %r10d
    000000ed: 	rolw	$0x8, %r10w
    000000f2: 	addl	%r10d, %eax
    000000f5: 	leal	0x1(%rdx), %r10d
    000000f9: 	cmpl	%r10d, %ebx
    000000fc: 	jle	.Ltmp107 # Offset: 252
    000000fe: 	movzwl	0x2(%r14,%r9), %r10d
    00000104: 	rolw	$0x8, %r10w
    00000109: 	addl	%r10d, %eax
    0000010c: 	leal	0x2(%rdx), %r10d
    00000110: 	cmpl	%r10d, %ebx
    00000113: 	jle	.Ltmp107 # Offset: 275
    00000115: 	movzwl	0x4(%r14,%r9), %r10d
    0000011b: 	rolw	$0x8, %r10w
    00000120: 	addl	%r10d, %eax
    00000123: 	leal	0x3(%rdx), %r10d
    00000127: 	cmpl	%r10d, %ebx
    0000012a: 	jle	.Ltmp107 # Offset: 298
    0000012c: 	movzwl	0x6(%r14,%r9), %r10d
    00000132: 	rolw	$0x8, %r10w
    00000137: 	addl	%r10d, %eax
    0000013a: 	leal	0x4(%rdx), %r10d
    0000013e: 	cmpl	%ebx, %r10d
    00000141: 	jge	.Ltmp107 # Offset: 321
    00000143: 	movzwl	0x8(%r14,%r9), %r10d
    00000149: 	rolw	$0x8, %r10w
    0000014e: 	addl	%r10d, %eax
    00000151: 	leal	0x5(%rdx), %r10d
    00000155: 	cmpl	%r10d, %ebx
    00000158: 	jle	.Ltmp107 # Offset: 344
    0000015a: 	movzwl	0xa(%r14,%r9), %r10d
    00000160: 	addl	$0x6, %edx
    00000163: 	rolw	$0x8, %r10w
    00000168: 	addl	%r10d, %eax
    0000016b: 	cmpl	%edx, %ebx
    0000016d: 	jle	.Ltmp107 # Offset: 365
    0000016f: 	movzwl	0xc(%r14,%r9), %edx
    00000175: 	rolw	$0x8, %dx
    00000179: 	addl	%edx, %eax
.Ltmp107:
    0000017b: 	movl	%edi, %edx
    0000017d: 	rolw	$0x8, %dx
    00000181: 	imulw	$0x1f40, %dx, %dx
    00000186: 	cmpw	%ax, %dx
    00000189: 	je	.Ltmp110 # Offset: 393
    0000018b: 	movl	current_test(%rip), %edx
    00000191: 	movq	%r12, %rsi
    00000194: 	movl	$0x1, %edi
    00000199: 	xorl	%eax, %eax
    0000019b: 	addl	$0x1, %r13d
    0000019f: 	callq	__printf_chk@PLT # Offset: 415
    000001a4: 	movl	iterations(%rip), %esi
    000001aa: 	cmpl	%esi, %r13d
    000001ad: 	jge	.Ltmp106 # Offset: 429
    000001af: 	movq	init_value(%rip), %rdi
    000001b6: 	jmp	.Ltmp111 # Offset: 438
    000001bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp110:
    000001c0: 	addl	$0x1, %r13d
    000001c4: 	cmpl	%esi, %r13d
    000001c7: 	jl	.Ltmp111 # Offset: 455
.Ltmp106:
    000001cd: 	callq	clock@PLT # Offset: 461
    000001d2: 	pxor	%xmm0, %xmm0
    000001d6: 	movq	0x8(%rsp), %rdi
    000001db: 	movq	%rax, end_time(%rip)
    000001e2: 	subq	start_time(%rip), %rax
    000001e9: 	cvtsi2sd	%rax, %xmm0
    000001ee: 	divsd	DATAat0x7608(%rip), %xmm0
    000001f6: 	addq	$0x18, %rsp
    000001fa: 	popq	%rbx
    000001fb: 	popq	%rbp
    000001fc: 	popq	%r12
    000001fe: 	popq	%r13
    00000200: 	popq	%r14
    00000202: 	popq	%r15
    00000204: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 516
.Ltmp108:
    00000209: 	xorl	%edx, %edx
    0000020b: 	xorl	%eax, %eax
    0000020d: 	jmp	.Ltmp112 # Offset: 525
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIt12swab16_temp1EvPT_iPKc"

Binary Function "_Z13test_constantIt12swab16_temp2EvPT_iPKc" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x3080
  Size        : 0x103
  MaxSize     : 0x110
  Offset      : 0x3080
  Section     : .text
  Orc Section : .local.text._Z13test_constantIt12swab16_temp2EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x8, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movl	iterations(%rip), %edi
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	testl	%edi, %edi
    0000002f: 	jle	.Ltmp113 # Offset: 47
    00000035: 	leal	-0x1(%r15), %eax
    00000039: 	movq	init_value(%rip), %rsi
    00000040: 	xorl	%r14d, %r14d
    00000043: 	leaq	DATAat0x75e5(%rip), %rbp
    0000004a: 	leaq	0x2(%rbx,%rax,2), %r13
    0000004f: 	nop # Size: 1
.Ltmp117:
    00000050: 	movq	%rbx, %rax
    00000053: 	xorl	%ecx, %ecx
    00000055: 	testl	%r15d, %r15d
    00000058: 	jle	.Ltmp114 # Offset: 88
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp115:
    00000060: 	movzwl	(%rax), %edx
    00000063: 	addq	$0x2, %rax
    00000067: 	rolw	$0x8, %dx
    0000006b: 	addl	%edx, %ecx
    0000006d: 	cmpq	%rax, %r13
    00000070: 	jne	.Ltmp115 # Offset: 112
.Ltmp114:
    00000072: 	movq	%rsi, %rdx
    00000075: 	xorl	%eax, %eax
    00000077: 	movzbl	%dh, %edx
    0000007a: 	movb	%dl, %al
    0000007c: 	movl	%esi, %edx
    0000007e: 	movb	%dl, %ah
    00000080: 	imulw	$0x1f40, %ax, %ax
    00000085: 	cmpw	%cx, %ax
    00000088: 	je	.Ltmp116 # Offset: 136
    0000008a: 	movl	current_test(%rip), %edx
    00000090: 	movl	$0x1, %edi
    00000095: 	movq	%rbp, %rsi
    00000098: 	xorl	%eax, %eax
    0000009a: 	addl	$0x1, %r14d
    0000009e: 	callq	__printf_chk@PLT # Offset: 158
    000000a3: 	movl	iterations(%rip), %edi
    000000a9: 	cmpl	%edi, %r14d
    000000ac: 	jge	.Ltmp113 # Offset: 172
    000000ae: 	movq	init_value(%rip), %rsi
    000000b5: 	jmp	.Ltmp117 # Offset: 181
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp116:
    000000c0: 	addl	$0x1, %r14d
    000000c4: 	cmpl	%edi, %r14d
    000000c7: 	jl	.Ltmp117 # Offset: 199
.Ltmp113:
    000000c9: 	callq	clock@PLT # Offset: 201
    000000ce: 	pxor	%xmm0, %xmm0
    000000d2: 	movq	%r12, %rdi
    000000d5: 	movq	%rax, end_time(%rip)
    000000dc: 	subq	start_time(%rip), %rax
    000000e3: 	cvtsi2sd	%rax, %xmm0
    000000e8: 	divsd	DATAat0x7608(%rip), %xmm0
    000000f0: 	addq	$0x8, %rsp
    000000f4: 	popq	%rbx
    000000f5: 	popq	%rbp
    000000f6: 	popq	%r12
    000000f8: 	popq	%r13
    000000fa: 	popq	%r14
    000000fc: 	popq	%r15
    000000fe: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 254
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIt12swab16_temp2EvPT_iPKc"

Binary Function "_Z13test_constantIj6swab32EvPT_iPKc" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x3190
  Size        : 0xef
  MaxSize     : 0xf0
  Offset      : 0x3190
  Section     : .text
  Orc Section : .local.text._Z13test_constantIj6swab32EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp118 # Offset: 49
    00000033: 	leal	-0x1(%r15), %eax
    00000037: 	xorl	%r14d, %r14d
    0000003a: 	leaq	init_value(%rip), %r12
    00000041: 	leaq	0x4(%rbx,%rax,4), %r13
    00000046: 	leaq	DATAat0x75e5(%rip), %rbp
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp122:
    00000050: 	movq	%rbx, %rax
    00000053: 	xorl	%ecx, %ecx
    00000055: 	testl	%r15d, %r15d
    00000058: 	jle	.Ltmp119 # Offset: 88
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp120:
    00000060: 	movl	(%rax), %edx
    00000062: 	addq	$0x4, %rax
    00000066: 	bswapl	%edx
    00000068: 	addl	%edx, %ecx
    0000006a: 	cmpq	%r13, %rax
    0000006d: 	jne	.Ltmp120 # Offset: 109
.Ltmp119:
    0000006f: 	movl	(%r12), %eax
    00000073: 	bswapl	%eax
    00000075: 	imull	$0x1f40, %eax, %eax
    0000007b: 	cmpl	%ecx, %eax
    0000007d: 	je	.Ltmp121 # Offset: 125
    0000007f: 	movl	current_test(%rip), %edx
    00000085: 	movq	%rbp, %rsi
    00000088: 	movl	$0x1, %edi
    0000008d: 	xorl	%eax, %eax
    0000008f: 	addl	$0x1, %r14d
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	movl	iterations(%rip), %esi
    0000009e: 	cmpl	%esi, %r14d
    000000a1: 	jl	.Ltmp122 # Offset: 161
.Ltmp118:
    000000a3: 	callq	clock@PLT # Offset: 163
    000000a8: 	pxor	%xmm0, %xmm0
    000000ac: 	movq	0x8(%rsp), %rdi
    000000b1: 	movq	%rax, end_time(%rip)
    000000b8: 	subq	start_time(%rip), %rax
    000000bf: 	cvtsi2sd	%rax, %xmm0
    000000c4: 	divsd	DATAat0x7608(%rip), %xmm0
    000000cc: 	addq	$0x18, %rsp
    000000d0: 	popq	%rbx
    000000d1: 	popq	%rbp
    000000d2: 	popq	%r12
    000000d4: 	popq	%r13
    000000d6: 	popq	%r14
    000000d8: 	popq	%r15
    000000da: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 218
    000000df: 	nop # Size: 1
.Ltmp121:
    000000e0: 	addl	$0x1, %r14d
    000000e4: 	cmpl	%esi, %r14d
    000000e7: 	jl	.Ltmp122 # Offset: 231
    000000ed: 	jmp	.Ltmp118 # Offset: 237
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIj6swab32EvPT_iPKc"

Binary Function "_Z13test_constantIj12swab32_mask1EvPT_iPKc" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x3280
  Size        : 0xef
  MaxSize     : 0xf0
  Offset      : 0x3280
  Section     : .text
  Orc Section : .local.text._Z13test_constantIj12swab32_mask1EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp123 # Offset: 49
    00000033: 	leal	-0x1(%r15), %eax
    00000037: 	xorl	%r14d, %r14d
    0000003a: 	leaq	init_value(%rip), %r12
    00000041: 	leaq	0x4(%rbx,%rax,4), %r13
    00000046: 	leaq	DATAat0x75e5(%rip), %rbp
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp127:
    00000050: 	movq	%rbx, %rax
    00000053: 	xorl	%ecx, %ecx
    00000055: 	testl	%r15d, %r15d
    00000058: 	jle	.Ltmp124 # Offset: 88
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp125:
    00000060: 	movl	(%rax), %edx
    00000062: 	addq	$0x4, %rax
    00000066: 	bswapl	%edx
    00000068: 	addl	%edx, %ecx
    0000006a: 	cmpq	%r13, %rax
    0000006d: 	jne	.Ltmp125 # Offset: 109
.Ltmp124:
    0000006f: 	movl	(%r12), %eax
    00000073: 	bswapl	%eax
    00000075: 	imull	$0x1f40, %eax, %eax
    0000007b: 	cmpl	%ecx, %eax
    0000007d: 	je	.Ltmp126 # Offset: 125
    0000007f: 	movl	current_test(%rip), %edx
    00000085: 	movq	%rbp, %rsi
    00000088: 	movl	$0x1, %edi
    0000008d: 	xorl	%eax, %eax
    0000008f: 	addl	$0x1, %r14d
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	movl	iterations(%rip), %esi
    0000009e: 	cmpl	%esi, %r14d
    000000a1: 	jl	.Ltmp127 # Offset: 161
.Ltmp123:
    000000a3: 	callq	clock@PLT # Offset: 163
    000000a8: 	pxor	%xmm0, %xmm0
    000000ac: 	movq	0x8(%rsp), %rdi
    000000b1: 	movq	%rax, end_time(%rip)
    000000b8: 	subq	start_time(%rip), %rax
    000000bf: 	cvtsi2sd	%rax, %xmm0
    000000c4: 	divsd	DATAat0x7608(%rip), %xmm0
    000000cc: 	addq	$0x18, %rsp
    000000d0: 	popq	%rbx
    000000d1: 	popq	%rbp
    000000d2: 	popq	%r12
    000000d4: 	popq	%r13
    000000d6: 	popq	%r14
    000000d8: 	popq	%r15
    000000da: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 218
    000000df: 	nop # Size: 1
.Ltmp126:
    000000e0: 	addl	$0x1, %r14d
    000000e4: 	cmpl	%esi, %r14d
    000000e7: 	jl	.Ltmp127 # Offset: 231
    000000ed: 	jmp	.Ltmp123 # Offset: 237
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIj12swab32_mask1EvPT_iPKc"

Binary Function "_Z13test_constantIj12swab32_mask2EvPT_iPKc" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x3370
  Size        : 0xef
  MaxSize     : 0xf0
  Offset      : 0x3370
  Section     : .text
  Orc Section : .local.text._Z13test_constantIj12swab32_mask2EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp128 # Offset: 49
    00000033: 	leal	-0x1(%r15), %eax
    00000037: 	xorl	%r14d, %r14d
    0000003a: 	leaq	init_value(%rip), %r12
    00000041: 	leaq	0x4(%rbx,%rax,4), %r13
    00000046: 	leaq	DATAat0x75e5(%rip), %rbp
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp132:
    00000050: 	movq	%rbx, %rax
    00000053: 	xorl	%ecx, %ecx
    00000055: 	testl	%r15d, %r15d
    00000058: 	jle	.Ltmp129 # Offset: 88
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp130:
    00000060: 	movl	(%rax), %edx
    00000062: 	addq	$0x4, %rax
    00000066: 	bswapl	%edx
    00000068: 	addl	%edx, %ecx
    0000006a: 	cmpq	%r13, %rax
    0000006d: 	jne	.Ltmp130 # Offset: 109
.Ltmp129:
    0000006f: 	movl	(%r12), %eax
    00000073: 	bswapl	%eax
    00000075: 	imull	$0x1f40, %eax, %eax
    0000007b: 	cmpl	%ecx, %eax
    0000007d: 	je	.Ltmp131 # Offset: 125
    0000007f: 	movl	current_test(%rip), %edx
    00000085: 	movq	%rbp, %rsi
    00000088: 	movl	$0x1, %edi
    0000008d: 	xorl	%eax, %eax
    0000008f: 	addl	$0x1, %r14d
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	movl	iterations(%rip), %esi
    0000009e: 	cmpl	%esi, %r14d
    000000a1: 	jl	.Ltmp132 # Offset: 161
.Ltmp128:
    000000a3: 	callq	clock@PLT # Offset: 163
    000000a8: 	pxor	%xmm0, %xmm0
    000000ac: 	movq	0x8(%rsp), %rdi
    000000b1: 	movq	%rax, end_time(%rip)
    000000b8: 	subq	start_time(%rip), %rax
    000000bf: 	cvtsi2sd	%rax, %xmm0
    000000c4: 	divsd	DATAat0x7608(%rip), %xmm0
    000000cc: 	addq	$0x18, %rsp
    000000d0: 	popq	%rbx
    000000d1: 	popq	%rbp
    000000d2: 	popq	%r12
    000000d4: 	popq	%r13
    000000d6: 	popq	%r14
    000000d8: 	popq	%r15
    000000da: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 218
    000000df: 	nop # Size: 1
.Ltmp131:
    000000e0: 	addl	$0x1, %r14d
    000000e4: 	cmpl	%esi, %r14d
    000000e7: 	jl	.Ltmp132 # Offset: 231
    000000ed: 	jmp	.Ltmp128 # Offset: 237
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIj12swab32_mask2EvPT_iPKc"

Binary Function "_Z13test_constantIj12swab32_mask3EvPT_iPKc" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x3460
  Size        : 0x263
  MaxSize     : 0x270
  Offset      : 0x3460
  Section     : .text
  Orc Section : .local.text._Z13test_constantIj12swab32_mask3EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edi, %edi
    00000031: 	jle	.Ltmp133 # Offset: 49
    00000037: 	movl	%r14d, %eax
    0000003a: 	movl	%r14d, %ebp
    0000003d: 	leal	-0x1(%r14), %ebx
    00000041: 	xorl	%r15d, %r15d
    00000044: 	shrl	$0x2, %eax
    00000047: 	andl	$-0x4, %ebp
    0000004a: 	subl	$0x1, %eax
    0000004d: 	shlq	$0x4, %rax
    00000051: 	leaq	0x10(%r12,%rax), %r13
.Ltmp139:
    00000056: 	movq	init_value(%rip), %rsi
    0000005d: 	movdqa	DATAat0x7620(%rip), %xmm5
    00000065: 	movq	DATAat0x7630(%rip), %xmm7
    0000006d: 	movdqa	DATAat0x7630(%rip), %xmm4
    00000075: 	movq	DATAat0x7620(%rip), %xmm6
.Ltmp140:
    0000007d: 	xorl	%ecx, %ecx
    0000007f: 	testl	%r14d, %r14d
    00000082: 	jle	.Ltmp134 # Offset: 130
    00000088: 	cmpl	$0x2, %ebx
    0000008b: 	jbe	.Ltmp135 # Offset: 139
    00000091: 	movq	%r12, %rax
    00000094: 	pxor	%xmm3, %xmm3
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp136:
    000000a0: 	movdqu	(%rax), %xmm1
    000000a4: 	addq	$0x10, %rax
    000000a8: 	movdqa	%xmm1, %xmm0
    000000ac: 	movdqa	%xmm1, %xmm2
    000000b0: 	pslld	$0x8, %xmm0
    000000b5: 	psrld	$0x8, %xmm2
    000000ba: 	pand	%xmm4, %xmm2
    000000be: 	pand	%xmm5, %xmm0
    000000c2: 	paddd	%xmm2, %xmm0
    000000c6: 	movdqa	%xmm1, %xmm2
    000000ca: 	pslld	$0x18, %xmm2
    000000cf: 	psrld	$0x18, %xmm1
    000000d4: 	paddd	%xmm2, %xmm1
    000000d8: 	paddd	%xmm1, %xmm0
    000000dc: 	paddd	%xmm0, %xmm3
    000000e0: 	cmpq	%rax, %r13
    000000e3: 	jne	.Ltmp136 # Offset: 227
    000000e5: 	movdqa	%xmm3, %xmm0
    000000e9: 	psrldq	$0x8, %xmm0
    000000ee: 	paddd	%xmm0, %xmm3
    000000f2: 	movdqa	%xmm3, %xmm0
    000000f6: 	psrldq	$0x4, %xmm0
    000000fb: 	paddd	%xmm0, %xmm3
    000000ff: 	movd	%xmm3, %ecx
    00000103: 	cmpl	%r14d, %ebp
    00000106: 	je	.Ltmp134 # Offset: 262
    0000010c: 	movl	%ebp, %r8d
    0000010f: 	movl	%ebp, %eax
.Ltmp141:
    00000111: 	movl	%r14d, %edx
    00000114: 	subl	%r8d, %edx
    00000117: 	cmpl	$0x1, %edx
    0000011a: 	je	.Ltmp137 # Offset: 282
    0000011c: 	movq	(%r12,%r8,4), %xmm1
    00000122: 	movdqa	%xmm1, %xmm2
    00000126: 	movdqa	%xmm1, %xmm0
    0000012a: 	psrld	$0x8, %xmm2
    0000012f: 	pslld	$0x8, %xmm0
    00000134: 	pand	%xmm6, %xmm0
    00000138: 	pand	%xmm7, %xmm2
    0000013c: 	paddd	%xmm0, %xmm2
    00000140: 	movdqa	%xmm1, %xmm0
    00000144: 	psrld	$0x18, %xmm0
    00000149: 	pslld	$0x18, %xmm1
    0000014e: 	paddd	%xmm1, %xmm0
    00000152: 	paddd	%xmm2, %xmm0
    00000156: 	movd	%xmm0, %r9d
    0000015b: 	pshufd	$0xe5, %xmm0, %xmm3
    00000160: 	movd	%xmm3, %r8d
    00000165: 	addl	%r9d, %r8d
    00000168: 	addl	%r8d, %ecx
    0000016b: 	movl	%edx, %r8d
    0000016e: 	andl	$-0x2, %r8d
    00000172: 	addl	%r8d, %eax
    00000175: 	cmpl	%edx, %r8d
    00000178: 	je	.Ltmp134 # Offset: 376
.Ltmp137:
    0000017a: 	cltq
    0000017c: 	movl	(%r12,%rax,4), %eax
    00000180: 	movl	%eax, %edx
    00000182: 	movl	%eax, %r8d
    00000185: 	shll	$0x18, %edx
    00000188: 	shrl	$0x18, %r8d
    0000018c: 	addl	%r8d, %edx
    0000018f: 	addl	%ecx, %edx
    00000191: 	movl	%eax, %ecx
    00000193: 	shll	$0x8, %eax
    00000196: 	shrl	$0x8, %ecx
    00000199: 	andl	$0xff0000, %eax
    0000019e: 	andl	$0xff00, %ecx
    000001a4: 	addl	%ecx, %edx
    000001a6: 	leal	(%rax,%rdx), %ecx
.Ltmp134:
    000001a9: 	movl	%esi, %eax
    000001ab: 	movl	%esi, %edx
    000001ad: 	shll	$0x18, %edx
    000001b0: 	shrl	$0x18, %eax
    000001b3: 	addl	%edx, %eax
    000001b5: 	movl	%esi, %edx
    000001b7: 	shrl	$0x8, %edx
    000001ba: 	andl	$0xff00, %edx
    000001c0: 	addl	%edx, %eax
    000001c2: 	movl	%esi, %edx
    000001c4: 	shll	$0x8, %edx
    000001c7: 	andl	$0xff0000, %edx
    000001cd: 	addl	%edx, %eax
    000001cf: 	imull	$0x1f40, %eax, %eax
    000001d5: 	cmpl	%ecx, %eax
    000001d7: 	je	.Ltmp138 # Offset: 471
    000001d9: 	movl	current_test(%rip), %edx
    000001df: 	movl	$0x1, %edi
    000001e4: 	leaq	DATAat0x75e5(%rip), %rsi
    000001eb: 	xorl	%eax, %eax
    000001ed: 	addl	$0x1, %r15d
    000001f1: 	callq	__printf_chk@PLT # Offset: 497
    000001f6: 	movl	iterations(%rip), %edi
    000001fc: 	cmpl	%edi, %r15d
    000001ff: 	jl	.Ltmp139 # Offset: 511
.Ltmp133:
    00000205: 	callq	clock@PLT # Offset: 517
    0000020a: 	pxor	%xmm0, %xmm0
    0000020e: 	movq	0x8(%rsp), %rdi
    00000213: 	movq	%rax, end_time(%rip)
    0000021a: 	subq	start_time(%rip), %rax
    00000221: 	cvtsi2sd	%rax, %xmm0
    00000226: 	divsd	DATAat0x7608(%rip), %xmm0
    0000022e: 	addq	$0x18, %rsp
    00000232: 	popq	%rbx
    00000233: 	popq	%rbp
    00000234: 	popq	%r12
    00000236: 	popq	%r13
    00000238: 	popq	%r14
    0000023a: 	popq	%r15
    0000023c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 572
    00000241: 	nopl	(%rax) # Size: 7
.Ltmp138:
    00000248: 	addl	$0x1, %r15d
    0000024c: 	cmpl	%edi, %r15d
    0000024f: 	jl	.Ltmp140 # Offset: 591
    00000255: 	jmp	.Ltmp133 # Offset: 597
.Ltmp135:
    00000257: 	xorl	%r8d, %r8d
    0000025a: 	xorl	%eax, %eax
    0000025c: 	xorl	%ecx, %ecx
    0000025e: 	jmp	.Ltmp141 # Offset: 606
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIj12swab32_mask3EvPT_iPKc"

Binary Function "_Z13test_constantIj12swab32_mask4EvPT_iPKc" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x36d0
  Size        : 0x263
  MaxSize     : 0x270
  Offset      : 0x36d0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIj12swab32_mask4EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edi, %edi
    00000031: 	jle	.Ltmp142 # Offset: 49
    00000037: 	movl	%r14d, %eax
    0000003a: 	movl	%r14d, %ebp
    0000003d: 	leal	-0x1(%r14), %ebx
    00000041: 	xorl	%r15d, %r15d
    00000044: 	shrl	$0x2, %eax
    00000047: 	andl	$-0x4, %ebp
    0000004a: 	subl	$0x1, %eax
    0000004d: 	shlq	$0x4, %rax
    00000051: 	leaq	0x10(%r12,%rax), %r13
.Ltmp148:
    00000056: 	movq	init_value(%rip), %rsi
    0000005d: 	movdqa	DATAat0x7620(%rip), %xmm5
    00000065: 	movq	DATAat0x7630(%rip), %xmm7
    0000006d: 	movdqa	DATAat0x7630(%rip), %xmm4
    00000075: 	movq	DATAat0x7620(%rip), %xmm6
.Ltmp149:
    0000007d: 	xorl	%ecx, %ecx
    0000007f: 	testl	%r14d, %r14d
    00000082: 	jle	.Ltmp143 # Offset: 130
    00000088: 	cmpl	$0x2, %ebx
    0000008b: 	jbe	.Ltmp144 # Offset: 139
    00000091: 	movq	%r12, %rax
    00000094: 	pxor	%xmm3, %xmm3
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp145:
    000000a0: 	movdqu	(%rax), %xmm1
    000000a4: 	addq	$0x10, %rax
    000000a8: 	movdqa	%xmm1, %xmm0
    000000ac: 	movdqa	%xmm1, %xmm2
    000000b0: 	pslld	$0x8, %xmm0
    000000b5: 	psrld	$0x8, %xmm2
    000000ba: 	pand	%xmm4, %xmm2
    000000be: 	pand	%xmm5, %xmm0
    000000c2: 	paddd	%xmm2, %xmm0
    000000c6: 	movdqa	%xmm1, %xmm2
    000000ca: 	pslld	$0x18, %xmm2
    000000cf: 	psrld	$0x18, %xmm1
    000000d4: 	paddd	%xmm2, %xmm1
    000000d8: 	paddd	%xmm1, %xmm0
    000000dc: 	paddd	%xmm0, %xmm3
    000000e0: 	cmpq	%rax, %r13
    000000e3: 	jne	.Ltmp145 # Offset: 227
    000000e5: 	movdqa	%xmm3, %xmm0
    000000e9: 	psrldq	$0x8, %xmm0
    000000ee: 	paddd	%xmm0, %xmm3
    000000f2: 	movdqa	%xmm3, %xmm0
    000000f6: 	psrldq	$0x4, %xmm0
    000000fb: 	paddd	%xmm0, %xmm3
    000000ff: 	movd	%xmm3, %ecx
    00000103: 	cmpl	%r14d, %ebp
    00000106: 	je	.Ltmp143 # Offset: 262
    0000010c: 	movl	%ebp, %r8d
    0000010f: 	movl	%ebp, %eax
.Ltmp150:
    00000111: 	movl	%r14d, %edx
    00000114: 	subl	%r8d, %edx
    00000117: 	cmpl	$0x1, %edx
    0000011a: 	je	.Ltmp146 # Offset: 282
    0000011c: 	movq	(%r12,%r8,4), %xmm1
    00000122: 	movdqa	%xmm1, %xmm2
    00000126: 	movdqa	%xmm1, %xmm0
    0000012a: 	psrld	$0x8, %xmm2
    0000012f: 	pslld	$0x8, %xmm0
    00000134: 	pand	%xmm6, %xmm0
    00000138: 	pand	%xmm7, %xmm2
    0000013c: 	paddd	%xmm0, %xmm2
    00000140: 	movdqa	%xmm1, %xmm0
    00000144: 	psrld	$0x18, %xmm0
    00000149: 	pslld	$0x18, %xmm1
    0000014e: 	paddd	%xmm1, %xmm0
    00000152: 	paddd	%xmm2, %xmm0
    00000156: 	movd	%xmm0, %r9d
    0000015b: 	pshufd	$0xe5, %xmm0, %xmm3
    00000160: 	movd	%xmm3, %r8d
    00000165: 	addl	%r9d, %r8d
    00000168: 	addl	%r8d, %ecx
    0000016b: 	movl	%edx, %r8d
    0000016e: 	andl	$-0x2, %r8d
    00000172: 	addl	%r8d, %eax
    00000175: 	cmpl	%edx, %r8d
    00000178: 	je	.Ltmp143 # Offset: 376
.Ltmp146:
    0000017a: 	cltq
    0000017c: 	movl	(%r12,%rax,4), %eax
    00000180: 	movl	%eax, %edx
    00000182: 	movl	%eax, %r8d
    00000185: 	shll	$0x18, %edx
    00000188: 	shrl	$0x18, %r8d
    0000018c: 	addl	%r8d, %edx
    0000018f: 	addl	%ecx, %edx
    00000191: 	movl	%eax, %ecx
    00000193: 	shll	$0x8, %eax
    00000196: 	shrl	$0x8, %ecx
    00000199: 	andl	$0xff0000, %eax
    0000019e: 	andl	$0xff00, %ecx
    000001a4: 	addl	%ecx, %edx
    000001a6: 	leal	(%rax,%rdx), %ecx
.Ltmp143:
    000001a9: 	movl	%esi, %eax
    000001ab: 	movl	%esi, %edx
    000001ad: 	shll	$0x18, %edx
    000001b0: 	shrl	$0x18, %eax
    000001b3: 	addl	%edx, %eax
    000001b5: 	movl	%esi, %edx
    000001b7: 	shrl	$0x8, %edx
    000001ba: 	andl	$0xff00, %edx
    000001c0: 	addl	%edx, %eax
    000001c2: 	movl	%esi, %edx
    000001c4: 	shll	$0x8, %edx
    000001c7: 	andl	$0xff0000, %edx
    000001cd: 	addl	%edx, %eax
    000001cf: 	imull	$0x1f40, %eax, %eax
    000001d5: 	cmpl	%ecx, %eax
    000001d7: 	je	.Ltmp147 # Offset: 471
    000001d9: 	movl	current_test(%rip), %edx
    000001df: 	movl	$0x1, %edi
    000001e4: 	leaq	DATAat0x75e5(%rip), %rsi
    000001eb: 	xorl	%eax, %eax
    000001ed: 	addl	$0x1, %r15d
    000001f1: 	callq	__printf_chk@PLT # Offset: 497
    000001f6: 	movl	iterations(%rip), %edi
    000001fc: 	cmpl	%edi, %r15d
    000001ff: 	jl	.Ltmp148 # Offset: 511
.Ltmp142:
    00000205: 	callq	clock@PLT # Offset: 517
    0000020a: 	pxor	%xmm0, %xmm0
    0000020e: 	movq	0x8(%rsp), %rdi
    00000213: 	movq	%rax, end_time(%rip)
    0000021a: 	subq	start_time(%rip), %rax
    00000221: 	cvtsi2sd	%rax, %xmm0
    00000226: 	divsd	DATAat0x7608(%rip), %xmm0
    0000022e: 	addq	$0x18, %rsp
    00000232: 	popq	%rbx
    00000233: 	popq	%rbp
    00000234: 	popq	%r12
    00000236: 	popq	%r13
    00000238: 	popq	%r14
    0000023a: 	popq	%r15
    0000023c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 572
    00000241: 	nopl	(%rax) # Size: 7
.Ltmp147:
    00000248: 	addl	$0x1, %r15d
    0000024c: 	cmpl	%edi, %r15d
    0000024f: 	jl	.Ltmp149 # Offset: 591
    00000255: 	jmp	.Ltmp142 # Offset: 597
.Ltmp144:
    00000257: 	xorl	%r8d, %r8d
    0000025a: 	xorl	%eax, %eax
    0000025c: 	xorl	%ecx, %ecx
    0000025e: 	jmp	.Ltmp150 # Offset: 606
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIj12swab32_mask4EvPT_iPKc"

Binary Function "_Z13test_constantIj12swab32_mask5EvPT_iPKc" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x3940
  Size        : 0x263
  MaxSize     : 0x270
  Offset      : 0x3940
  Section     : .text
  Orc Section : .local.text._Z13test_constantIj12swab32_mask5EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edi, %edi
    00000031: 	jle	.Ltmp151 # Offset: 49
    00000037: 	movl	%r14d, %eax
    0000003a: 	movl	%r14d, %ebp
    0000003d: 	leal	-0x1(%r14), %ebx
    00000041: 	xorl	%r15d, %r15d
    00000044: 	shrl	$0x2, %eax
    00000047: 	andl	$-0x4, %ebp
    0000004a: 	subl	$0x1, %eax
    0000004d: 	shlq	$0x4, %rax
    00000051: 	leaq	0x10(%r12,%rax), %r13
.Ltmp157:
    00000056: 	movq	init_value(%rip), %rsi
    0000005d: 	movdqa	DATAat0x7620(%rip), %xmm5
    00000065: 	movq	DATAat0x7630(%rip), %xmm7
    0000006d: 	movdqa	DATAat0x7630(%rip), %xmm4
    00000075: 	movq	DATAat0x7620(%rip), %xmm6
.Ltmp158:
    0000007d: 	xorl	%ecx, %ecx
    0000007f: 	testl	%r14d, %r14d
    00000082: 	jle	.Ltmp152 # Offset: 130
    00000088: 	cmpl	$0x2, %ebx
    0000008b: 	jbe	.Ltmp153 # Offset: 139
    00000091: 	movq	%r12, %rax
    00000094: 	pxor	%xmm3, %xmm3
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp154:
    000000a0: 	movdqu	(%rax), %xmm1
    000000a4: 	addq	$0x10, %rax
    000000a8: 	movdqa	%xmm1, %xmm0
    000000ac: 	movdqa	%xmm1, %xmm2
    000000b0: 	pslld	$0x8, %xmm0
    000000b5: 	psrld	$0x8, %xmm2
    000000ba: 	pand	%xmm4, %xmm2
    000000be: 	pand	%xmm5, %xmm0
    000000c2: 	pxor	%xmm2, %xmm0
    000000c6: 	movdqa	%xmm1, %xmm2
    000000ca: 	pslld	$0x18, %xmm2
    000000cf: 	psrld	$0x18, %xmm1
    000000d4: 	pxor	%xmm2, %xmm1
    000000d8: 	pxor	%xmm1, %xmm0
    000000dc: 	paddd	%xmm0, %xmm3
    000000e0: 	cmpq	%rax, %r13
    000000e3: 	jne	.Ltmp154 # Offset: 227
    000000e5: 	movdqa	%xmm3, %xmm0
    000000e9: 	psrldq	$0x8, %xmm0
    000000ee: 	paddd	%xmm0, %xmm3
    000000f2: 	movdqa	%xmm3, %xmm0
    000000f6: 	psrldq	$0x4, %xmm0
    000000fb: 	paddd	%xmm0, %xmm3
    000000ff: 	movd	%xmm3, %ecx
    00000103: 	cmpl	%r14d, %ebp
    00000106: 	je	.Ltmp152 # Offset: 262
    0000010c: 	movl	%ebp, %r8d
    0000010f: 	movl	%ebp, %eax
.Ltmp159:
    00000111: 	movl	%r14d, %edx
    00000114: 	subl	%r8d, %edx
    00000117: 	cmpl	$0x1, %edx
    0000011a: 	je	.Ltmp155 # Offset: 282
    0000011c: 	movq	(%r12,%r8,4), %xmm1
    00000122: 	movdqa	%xmm1, %xmm2
    00000126: 	movdqa	%xmm1, %xmm0
    0000012a: 	psrld	$0x8, %xmm2
    0000012f: 	pslld	$0x8, %xmm0
    00000134: 	pand	%xmm6, %xmm0
    00000138: 	pand	%xmm7, %xmm2
    0000013c: 	pxor	%xmm0, %xmm2
    00000140: 	movdqa	%xmm1, %xmm0
    00000144: 	psrld	$0x18, %xmm0
    00000149: 	pslld	$0x18, %xmm1
    0000014e: 	pxor	%xmm1, %xmm0
    00000152: 	pxor	%xmm2, %xmm0
    00000156: 	movd	%xmm0, %r9d
    0000015b: 	pshufd	$0xe5, %xmm0, %xmm3
    00000160: 	movd	%xmm3, %r8d
    00000165: 	addl	%r9d, %r8d
    00000168: 	addl	%r8d, %ecx
    0000016b: 	movl	%edx, %r8d
    0000016e: 	andl	$-0x2, %r8d
    00000172: 	addl	%r8d, %eax
    00000175: 	cmpl	%edx, %r8d
    00000178: 	je	.Ltmp152 # Offset: 376
.Ltmp155:
    0000017a: 	cltq
    0000017c: 	movl	(%r12,%rax,4), %eax
    00000180: 	movl	%eax, %edx
    00000182: 	movl	%eax, %r8d
    00000185: 	shrl	$0x18, %r8d
    00000189: 	shll	$0x18, %edx
    0000018c: 	xorl	%r8d, %edx
    0000018f: 	movl	%eax, %r8d
    00000192: 	shll	$0x8, %eax
    00000195: 	shrl	$0x8, %r8d
    00000199: 	andl	$0xff0000, %eax
    0000019e: 	andl	$0xff00, %r8d
    000001a5: 	xorl	%r8d, %edx
    000001a8: 	xorl	%edx, %eax
    000001aa: 	addl	%eax, %ecx
.Ltmp152:
    000001ac: 	movl	%esi, %eax
    000001ae: 	movl	%esi, %edx
    000001b0: 	shll	$0x18, %edx
    000001b3: 	shrl	$0x18, %eax
    000001b6: 	xorl	%edx, %eax
    000001b8: 	movl	%esi, %edx
    000001ba: 	shrl	$0x8, %edx
    000001bd: 	andl	$0xff00, %edx
    000001c3: 	xorl	%edx, %eax
    000001c5: 	movl	%esi, %edx
    000001c7: 	shll	$0x8, %edx
    000001ca: 	andl	$0xff0000, %edx
    000001d0: 	xorl	%edx, %eax
    000001d2: 	imull	$0x1f40, %eax, %eax
    000001d8: 	cmpl	%ecx, %eax
    000001da: 	je	.Ltmp156 # Offset: 474
    000001dc: 	movl	current_test(%rip), %edx
    000001e2: 	movl	$0x1, %edi
    000001e7: 	leaq	DATAat0x75e5(%rip), %rsi
    000001ee: 	xorl	%eax, %eax
    000001f0: 	addl	$0x1, %r15d
    000001f4: 	callq	__printf_chk@PLT # Offset: 500
    000001f9: 	movl	iterations(%rip), %edi
    000001ff: 	cmpl	%r15d, %edi
    00000202: 	jg	.Ltmp157 # Offset: 514
.Ltmp151:
    00000208: 	callq	clock@PLT # Offset: 520
    0000020d: 	pxor	%xmm0, %xmm0
    00000211: 	movq	0x8(%rsp), %rdi
    00000216: 	movq	%rax, end_time(%rip)
    0000021d: 	subq	start_time(%rip), %rax
    00000224: 	cvtsi2sd	%rax, %xmm0
    00000229: 	divsd	DATAat0x7608(%rip), %xmm0
    00000231: 	addq	$0x18, %rsp
    00000235: 	popq	%rbx
    00000236: 	popq	%rbp
    00000237: 	popq	%r12
    00000239: 	popq	%r13
    0000023b: 	popq	%r14
    0000023d: 	popq	%r15
    0000023f: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 575
    00000244: 	nopl	(%rax) # Size: 4
.Ltmp156:
    00000248: 	addl	$0x1, %r15d
    0000024c: 	cmpl	%edi, %r15d
    0000024f: 	jl	.Ltmp158 # Offset: 591
    00000255: 	jmp	.Ltmp151 # Offset: 597
.Ltmp153:
    00000257: 	xorl	%r8d, %r8d
    0000025a: 	xorl	%eax, %eax
    0000025c: 	xorl	%ecx, %ecx
    0000025e: 	jmp	.Ltmp159 # Offset: 606
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIj12swab32_mask5EvPT_iPKc"

Binary Function "_Z13test_constantIj12swab32_mask6EvPT_iPKc" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x3bb0
  Size        : 0x263
  MaxSize     : 0x270
  Offset      : 0x3bb0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIj12swab32_mask6EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edi, %edi
    00000031: 	jle	.Ltmp160 # Offset: 49
    00000037: 	movl	%r14d, %eax
    0000003a: 	movl	%r14d, %ebp
    0000003d: 	leal	-0x1(%r14), %ebx
    00000041: 	xorl	%r15d, %r15d
    00000044: 	shrl	$0x2, %eax
    00000047: 	andl	$-0x4, %ebp
    0000004a: 	subl	$0x1, %eax
    0000004d: 	shlq	$0x4, %rax
    00000051: 	leaq	0x10(%r12,%rax), %r13
.Ltmp166:
    00000056: 	movq	init_value(%rip), %rsi
    0000005d: 	movdqa	DATAat0x7620(%rip), %xmm5
    00000065: 	movq	DATAat0x7630(%rip), %xmm7
    0000006d: 	movdqa	DATAat0x7630(%rip), %xmm4
    00000075: 	movq	DATAat0x7620(%rip), %xmm6
.Ltmp167:
    0000007d: 	xorl	%ecx, %ecx
    0000007f: 	testl	%r14d, %r14d
    00000082: 	jle	.Ltmp161 # Offset: 130
    00000088: 	cmpl	$0x2, %ebx
    0000008b: 	jbe	.Ltmp162 # Offset: 139
    00000091: 	movq	%r12, %rax
    00000094: 	pxor	%xmm3, %xmm3
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp163:
    000000a0: 	movdqu	(%rax), %xmm1
    000000a4: 	addq	$0x10, %rax
    000000a8: 	movdqa	%xmm1, %xmm0
    000000ac: 	movdqa	%xmm1, %xmm2
    000000b0: 	pslld	$0x8, %xmm0
    000000b5: 	psrld	$0x8, %xmm2
    000000ba: 	pand	%xmm4, %xmm2
    000000be: 	pand	%xmm5, %xmm0
    000000c2: 	pxor	%xmm2, %xmm0
    000000c6: 	movdqa	%xmm1, %xmm2
    000000ca: 	pslld	$0x18, %xmm2
    000000cf: 	psrld	$0x18, %xmm1
    000000d4: 	pxor	%xmm2, %xmm1
    000000d8: 	pxor	%xmm1, %xmm0
    000000dc: 	paddd	%xmm0, %xmm3
    000000e0: 	cmpq	%rax, %r13
    000000e3: 	jne	.Ltmp163 # Offset: 227
    000000e5: 	movdqa	%xmm3, %xmm0
    000000e9: 	psrldq	$0x8, %xmm0
    000000ee: 	paddd	%xmm0, %xmm3
    000000f2: 	movdqa	%xmm3, %xmm0
    000000f6: 	psrldq	$0x4, %xmm0
    000000fb: 	paddd	%xmm0, %xmm3
    000000ff: 	movd	%xmm3, %ecx
    00000103: 	cmpl	%r14d, %ebp
    00000106: 	je	.Ltmp161 # Offset: 262
    0000010c: 	movl	%ebp, %r8d
    0000010f: 	movl	%ebp, %eax
.Ltmp168:
    00000111: 	movl	%r14d, %edx
    00000114: 	subl	%r8d, %edx
    00000117: 	cmpl	$0x1, %edx
    0000011a: 	je	.Ltmp164 # Offset: 282
    0000011c: 	movq	(%r12,%r8,4), %xmm1
    00000122: 	movdqa	%xmm1, %xmm2
    00000126: 	movdqa	%xmm1, %xmm0
    0000012a: 	psrld	$0x8, %xmm2
    0000012f: 	pslld	$0x8, %xmm0
    00000134: 	pand	%xmm6, %xmm0
    00000138: 	pand	%xmm7, %xmm2
    0000013c: 	pxor	%xmm0, %xmm2
    00000140: 	movdqa	%xmm1, %xmm0
    00000144: 	psrld	$0x18, %xmm0
    00000149: 	pslld	$0x18, %xmm1
    0000014e: 	pxor	%xmm1, %xmm0
    00000152: 	pxor	%xmm2, %xmm0
    00000156: 	movd	%xmm0, %r9d
    0000015b: 	pshufd	$0xe5, %xmm0, %xmm3
    00000160: 	movd	%xmm3, %r8d
    00000165: 	addl	%r9d, %r8d
    00000168: 	addl	%r8d, %ecx
    0000016b: 	movl	%edx, %r8d
    0000016e: 	andl	$-0x2, %r8d
    00000172: 	addl	%r8d, %eax
    00000175: 	cmpl	%edx, %r8d
    00000178: 	je	.Ltmp161 # Offset: 376
.Ltmp164:
    0000017a: 	cltq
    0000017c: 	movl	(%r12,%rax,4), %eax
    00000180: 	movl	%eax, %edx
    00000182: 	movl	%eax, %r8d
    00000185: 	shrl	$0x18, %r8d
    00000189: 	shll	$0x18, %edx
    0000018c: 	xorl	%r8d, %edx
    0000018f: 	movl	%eax, %r8d
    00000192: 	shll	$0x8, %eax
    00000195: 	shrl	$0x8, %r8d
    00000199: 	andl	$0xff0000, %eax
    0000019e: 	andl	$0xff00, %r8d
    000001a5: 	xorl	%r8d, %edx
    000001a8: 	xorl	%edx, %eax
    000001aa: 	addl	%eax, %ecx
.Ltmp161:
    000001ac: 	movl	%esi, %eax
    000001ae: 	movl	%esi, %edx
    000001b0: 	shll	$0x18, %edx
    000001b3: 	shrl	$0x18, %eax
    000001b6: 	xorl	%edx, %eax
    000001b8: 	movl	%esi, %edx
    000001ba: 	shrl	$0x8, %edx
    000001bd: 	andl	$0xff00, %edx
    000001c3: 	xorl	%edx, %eax
    000001c5: 	movl	%esi, %edx
    000001c7: 	shll	$0x8, %edx
    000001ca: 	andl	$0xff0000, %edx
    000001d0: 	xorl	%edx, %eax
    000001d2: 	imull	$0x1f40, %eax, %eax
    000001d8: 	cmpl	%ecx, %eax
    000001da: 	je	.Ltmp165 # Offset: 474
    000001dc: 	movl	current_test(%rip), %edx
    000001e2: 	movl	$0x1, %edi
    000001e7: 	leaq	DATAat0x75e5(%rip), %rsi
    000001ee: 	xorl	%eax, %eax
    000001f0: 	addl	$0x1, %r15d
    000001f4: 	callq	__printf_chk@PLT # Offset: 500
    000001f9: 	movl	iterations(%rip), %edi
    000001ff: 	cmpl	%r15d, %edi
    00000202: 	jg	.Ltmp166 # Offset: 514
.Ltmp160:
    00000208: 	callq	clock@PLT # Offset: 520
    0000020d: 	pxor	%xmm0, %xmm0
    00000211: 	movq	0x8(%rsp), %rdi
    00000216: 	movq	%rax, end_time(%rip)
    0000021d: 	subq	start_time(%rip), %rax
    00000224: 	cvtsi2sd	%rax, %xmm0
    00000229: 	divsd	DATAat0x7608(%rip), %xmm0
    00000231: 	addq	$0x18, %rsp
    00000235: 	popq	%rbx
    00000236: 	popq	%rbp
    00000237: 	popq	%r12
    00000239: 	popq	%r13
    0000023b: 	popq	%r14
    0000023d: 	popq	%r15
    0000023f: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 575
    00000244: 	nopl	(%rax) # Size: 4
.Ltmp165:
    00000248: 	addl	$0x1, %r15d
    0000024c: 	cmpl	%edi, %r15d
    0000024f: 	jl	.Ltmp167 # Offset: 591
    00000255: 	jmp	.Ltmp160 # Offset: 597
.Ltmp162:
    00000257: 	xorl	%r8d, %r8d
    0000025a: 	xorl	%eax, %eax
    0000025c: 	xorl	%ecx, %ecx
    0000025e: 	jmp	.Ltmp168 # Offset: 606
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIj12swab32_mask6EvPT_iPKc"

Binary Function "_Z13test_constantIj12swab32_temp1EvPT_iPKc" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x3e20
  Size        : 0xef
  MaxSize     : 0xf0
  Offset      : 0x3e20
  Section     : .text
  Orc Section : .local.text._Z13test_constantIj12swab32_temp1EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %esi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%esi, %esi
    00000031: 	jle	.Ltmp169 # Offset: 49
    00000033: 	leal	-0x1(%r15), %eax
    00000037: 	xorl	%r14d, %r14d
    0000003a: 	leaq	init_value(%rip), %r12
    00000041: 	leaq	0x4(%rbx,%rax,4), %r13
    00000046: 	leaq	DATAat0x75e5(%rip), %rbp
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp173:
    00000050: 	movq	%rbx, %rax
    00000053: 	xorl	%ecx, %ecx
    00000055: 	testl	%r15d, %r15d
    00000058: 	jle	.Ltmp170 # Offset: 88
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp171:
    00000060: 	movl	(%rax), %edx
    00000062: 	addq	$0x4, %rax
    00000066: 	bswapl	%edx
    00000068: 	addl	%edx, %ecx
    0000006a: 	cmpq	%r13, %rax
    0000006d: 	jne	.Ltmp171 # Offset: 109
.Ltmp170:
    0000006f: 	movl	(%r12), %eax
    00000073: 	bswapl	%eax
    00000075: 	imull	$0x1f40, %eax, %eax
    0000007b: 	cmpl	%ecx, %eax
    0000007d: 	je	.Ltmp172 # Offset: 125
    0000007f: 	movl	current_test(%rip), %edx
    00000085: 	movq	%rbp, %rsi
    00000088: 	movl	$0x1, %edi
    0000008d: 	xorl	%eax, %eax
    0000008f: 	addl	$0x1, %r14d
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	movl	iterations(%rip), %esi
    0000009e: 	cmpl	%esi, %r14d
    000000a1: 	jl	.Ltmp173 # Offset: 161
.Ltmp169:
    000000a3: 	callq	clock@PLT # Offset: 163
    000000a8: 	pxor	%xmm0, %xmm0
    000000ac: 	movq	0x8(%rsp), %rdi
    000000b1: 	movq	%rax, end_time(%rip)
    000000b8: 	subq	start_time(%rip), %rax
    000000bf: 	cvtsi2sd	%rax, %xmm0
    000000c4: 	divsd	DATAat0x7608(%rip), %xmm0
    000000cc: 	addq	$0x18, %rsp
    000000d0: 	popq	%rbx
    000000d1: 	popq	%rbp
    000000d2: 	popq	%r12
    000000d4: 	popq	%r13
    000000d6: 	popq	%r14
    000000d8: 	popq	%r15
    000000da: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 218
    000000df: 	nop # Size: 1
.Ltmp172:
    000000e0: 	addl	$0x1, %r14d
    000000e4: 	cmpl	%esi, %r14d
    000000e7: 	jl	.Ltmp173 # Offset: 231
    000000ed: 	jmp	.Ltmp169 # Offset: 237
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIj12swab32_temp1EvPT_iPKc"

Binary Function "_Z13test_constantIm14swab32_subset1EvPT_iPKc" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x3f10
  Size        : 0xff
  MaxSize     : 0x100
  Offset      : 0x3f10
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm14swab32_subset1EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edi, %edi
    00000031: 	jle	.Ltmp174 # Offset: 49
    00000033: 	leal	-0x1(%r15), %eax
    00000037: 	xorl	%r14d, %r14d
    0000003a: 	leaq	init_value(%rip), %r12
    00000041: 	leaq	0x8(%rbx,%rax,8), %r13
    00000046: 	leaq	DATAat0x75e5(%rip), %rbp
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp178:
    00000050: 	movq	%rbx, %rdx
    00000053: 	xorl	%esi, %esi
    00000055: 	testl	%r15d, %r15d
    00000058: 	jle	.Ltmp175 # Offset: 88
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp176:
    00000060: 	movl	(%rdx), %eax
    00000062: 	addq	$0x8, %rdx
    00000066: 	bswapl	%eax
    00000068: 	movl	%eax, %eax
    0000006a: 	addq	%rax, %rsi
    0000006d: 	cmpq	%r13, %rdx
    00000070: 	jne	.Ltmp176 # Offset: 112
.Ltmp175:
    00000072: 	movl	(%r12), %eax
    00000076: 	bswapl	%eax
    00000078: 	movl	%eax, %eax
    0000007a: 	imulq	$0x1f40, %rax, %rax
    00000081: 	cmpq	%rsi, %rax
    00000084: 	je	.Ltmp177 # Offset: 132
    00000086: 	movl	current_test(%rip), %edx
    0000008c: 	movl	$0x1, %edi
    00000091: 	movq	%rbp, %rsi
    00000094: 	xorl	%eax, %eax
    00000096: 	addl	$0x1, %r14d
    0000009a: 	callq	__printf_chk@PLT # Offset: 154
    0000009f: 	movl	iterations(%rip), %edi
    000000a5: 	cmpl	%edi, %r14d
    000000a8: 	jl	.Ltmp178 # Offset: 168
.Ltmp174:
    000000aa: 	callq	clock@PLT # Offset: 170
    000000af: 	pxor	%xmm0, %xmm0
    000000b3: 	movq	0x8(%rsp), %rdi
    000000b8: 	movq	%rax, end_time(%rip)
    000000bf: 	subq	start_time(%rip), %rax
    000000c6: 	cvtsi2sd	%rax, %xmm0
    000000cb: 	divsd	DATAat0x7608(%rip), %xmm0
    000000d3: 	addq	$0x18, %rsp
    000000d7: 	popq	%rbx
    000000d8: 	popq	%rbp
    000000d9: 	popq	%r12
    000000db: 	popq	%r13
    000000dd: 	popq	%r14
    000000df: 	popq	%r15
    000000e1: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 225
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp177:
    000000f0: 	addl	$0x1, %r14d
    000000f4: 	cmpl	%edi, %r14d
    000000f7: 	jl	.Ltmp178 # Offset: 247
    000000fd: 	jmp	.Ltmp174 # Offset: 253
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm14swab32_subset1EvPT_iPKc"

Binary Function "_Z13test_constantIm12swab32_temp2EvPT_iPKc" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x4010
  Size        : 0x157
  MaxSize     : 0x160
  Offset      : 0x4010
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm12swab32_temp2EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x18, %rsp
    0000001b: 	movq	%rdi, 0x8(%rsp)
    00000020: 	callq	clock@PLT # Offset: 32
    00000025: 	movl	iterations(%rip), %r8d
    0000002c: 	movq	%rax, start_time(%rip)
    00000033: 	testl	%r8d, %r8d
    00000036: 	jle	.Ltmp179 # Offset: 54
    0000003c: 	leal	-0x1(%r15), %eax
    00000040: 	movq	init_value(%rip), %rdi
    00000047: 	xorl	%r14d, %r14d
    0000004a: 	leaq	DATAat0x75e5(%rip), %rbp
    00000051: 	leaq	0x8(%rbx,%rax,8), %r13
    00000056: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp183:
    00000060: 	movq	0x8(%rsp), %rcx
    00000065: 	xorl	%esi, %esi
    00000067: 	testl	%r15d, %r15d
    0000006a: 	jle	.Ltmp180 # Offset: 106
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp181:
    00000070: 	movq	(%rcx), %rdx
    00000073: 	xorl	%eax, %eax
    00000075: 	addq	$0x8, %rcx
    00000079: 	movl	%edx, %r9d
    0000007c: 	movl	%edx, %ebx
    0000007e: 	shrl	$0x18, %r9d
    00000082: 	shrl	$0x10, %ebx
    00000085: 	movb	%r9b, %al
    00000088: 	movb	%bl, %ah
    0000008a: 	movzbl	%dh, %ebx
    0000008d: 	shll	$0x18, %edx
    00000090: 	movl	%ebx, %r9d
    00000093: 	movzwl	%ax, %eax
    00000096: 	shll	$0x10, %r9d
    0000009a: 	orl	%r9d, %eax
    0000009d: 	orl	%edx, %eax
    0000009f: 	addq	%rax, %rsi
    000000a2: 	cmpq	%rcx, %r13
    000000a5: 	jne	.Ltmp181 # Offset: 165
.Ltmp180:
    000000a7: 	movl	%edi, %edx
    000000a9: 	xorl	%eax, %eax
    000000ab: 	movl	%edi, %ebx
    000000ad: 	movl	%edi, %ecx
    000000af: 	shrl	$0x18, %edx
    000000b2: 	shll	$0x18, %ecx
    000000b5: 	movb	%dl, %al
    000000b7: 	movl	%edi, %edx
    000000b9: 	shrl	$0x10, %edx
    000000bc: 	movb	%dl, %ah
    000000be: 	movzbl	%bh, %edx
    000000c1: 	shll	$0x10, %edx
    000000c4: 	movzwl	%ax, %eax
    000000c7: 	orl	%edx, %eax
    000000c9: 	orl	%ecx, %eax
    000000cb: 	imulq	$0x1f40, %rax, %rax
    000000d2: 	cmpq	%rsi, %rax
    000000d5: 	je	.Ltmp182 # Offset: 213
    000000d7: 	movl	current_test(%rip), %edx
    000000dd: 	movq	%rbp, %rsi
    000000e0: 	movl	$0x1, %edi
    000000e5: 	xorl	%eax, %eax
    000000e7: 	addl	$0x1, %r14d
    000000eb: 	callq	__printf_chk@PLT # Offset: 235
    000000f0: 	movl	iterations(%rip), %r8d
    000000f7: 	cmpl	%r8d, %r14d
    000000fa: 	jge	.Ltmp179 # Offset: 250
    000000fc: 	movq	init_value(%rip), %rdi
    00000103: 	jmp	.Ltmp183 # Offset: 259
    00000108: 	nopl	(%rax,%rax) # Size: 8
.Ltmp182:
    00000110: 	addl	$0x1, %r14d
    00000114: 	cmpl	%r8d, %r14d
    00000117: 	jl	.Ltmp183 # Offset: 279
.Ltmp179:
    0000011d: 	callq	clock@PLT # Offset: 285
    00000122: 	pxor	%xmm0, %xmm0
    00000126: 	movq	%r12, %rdi
    00000129: 	movq	%rax, end_time(%rip)
    00000130: 	subq	start_time(%rip), %rax
    00000137: 	cvtsi2sd	%rax, %xmm0
    0000013c: 	divsd	DATAat0x7608(%rip), %xmm0
    00000144: 	addq	$0x18, %rsp
    00000148: 	popq	%rbx
    00000149: 	popq	%rbp
    0000014a: 	popq	%r12
    0000014c: 	popq	%r13
    0000014e: 	popq	%r14
    00000150: 	popq	%r15
    00000152: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 338
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm12swab32_temp2EvPT_iPKc"

Binary Function "_Z13test_constantIm12swab32_temp3EvPT_iPKc" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x4170
  Size        : 0xff
  MaxSize     : 0x100
  Offset      : 0x4170
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm12swab32_temp3EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edi, %edi
    00000031: 	jle	.Ltmp184 # Offset: 49
    00000033: 	leal	-0x1(%r15), %eax
    00000037: 	xorl	%r14d, %r14d
    0000003a: 	leaq	init_value(%rip), %r12
    00000041: 	leaq	0x8(%rbx,%rax,8), %r13
    00000046: 	leaq	DATAat0x75e5(%rip), %rbp
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp188:
    00000050: 	movq	%rbx, %rdx
    00000053: 	xorl	%esi, %esi
    00000055: 	testl	%r15d, %r15d
    00000058: 	jle	.Ltmp185 # Offset: 88
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp186:
    00000060: 	movl	(%rdx), %eax
    00000062: 	addq	$0x8, %rdx
    00000066: 	bswapl	%eax
    00000068: 	movl	%eax, %eax
    0000006a: 	addq	%rax, %rsi
    0000006d: 	cmpq	%r13, %rdx
    00000070: 	jne	.Ltmp186 # Offset: 112
.Ltmp185:
    00000072: 	movl	(%r12), %eax
    00000076: 	bswapl	%eax
    00000078: 	movl	%eax, %eax
    0000007a: 	imulq	$0x1f40, %rax, %rax
    00000081: 	cmpq	%rsi, %rax
    00000084: 	je	.Ltmp187 # Offset: 132
    00000086: 	movl	current_test(%rip), %edx
    0000008c: 	movl	$0x1, %edi
    00000091: 	movq	%rbp, %rsi
    00000094: 	xorl	%eax, %eax
    00000096: 	addl	$0x1, %r14d
    0000009a: 	callq	__printf_chk@PLT # Offset: 154
    0000009f: 	movl	iterations(%rip), %edi
    000000a5: 	cmpl	%edi, %r14d
    000000a8: 	jl	.Ltmp188 # Offset: 168
.Ltmp184:
    000000aa: 	callq	clock@PLT # Offset: 170
    000000af: 	pxor	%xmm0, %xmm0
    000000b3: 	movq	0x8(%rsp), %rdi
    000000b8: 	movq	%rax, end_time(%rip)
    000000bf: 	subq	start_time(%rip), %rax
    000000c6: 	cvtsi2sd	%rax, %xmm0
    000000cb: 	divsd	DATAat0x7608(%rip), %xmm0
    000000d3: 	addq	$0x18, %rsp
    000000d7: 	popq	%rbx
    000000d8: 	popq	%rbp
    000000d9: 	popq	%r12
    000000db: 	popq	%r13
    000000dd: 	popq	%r14
    000000df: 	popq	%r15
    000000e1: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 225
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp187:
    000000f0: 	addl	$0x1, %r14d
    000000f4: 	cmpl	%edi, %r14d
    000000f7: 	jl	.Ltmp188 # Offset: 247
    000000fd: 	jmp	.Ltmp184 # Offset: 253
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm12swab32_temp3EvPT_iPKc"

Binary Function "_Z13test_constantIm6swab64EvPT_iPKc" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x4270
  Size        : 0xfb
  MaxSize     : 0x100
  Offset      : 0x4270
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm6swab64EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x8, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movl	iterations(%rip), %esi
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	testl	%esi, %esi
    0000002f: 	jle	.Ltmp189 # Offset: 47
    00000035: 	leal	-0x1(%r15), %eax
    00000039: 	movq	init_value(%rip), %rdi
    00000040: 	xorl	%r14d, %r14d
    00000043: 	leaq	DATAat0x75e5(%rip), %rbp
    0000004a: 	leaq	0x8(%rbx,%rax,8), %r13
    0000004f: 	nop # Size: 1
.Ltmp193:
    00000050: 	movq	%rbx, %rax
    00000053: 	xorl	%ecx, %ecx
    00000055: 	testl	%r15d, %r15d
    00000058: 	jle	.Ltmp190 # Offset: 88
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp191:
    00000060: 	movq	(%rax), %rdx
    00000063: 	addq	$0x8, %rax
    00000067: 	bswapq	%rdx
    0000006a: 	addq	%rdx, %rcx
    0000006d: 	cmpq	%r13, %rax
    00000070: 	jne	.Ltmp191 # Offset: 112
.Ltmp190:
    00000072: 	movq	%rdi, %rax
    00000075: 	bswapq	%rax
    00000078: 	imulq	$0x1f40, %rax, %rax
    0000007f: 	cmpq	%rcx, %rax
    00000082: 	je	.Ltmp192 # Offset: 130
    00000084: 	movl	current_test(%rip), %edx
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movl	$0x1, %edi
    00000092: 	xorl	%eax, %eax
    00000094: 	addl	$0x1, %r14d
    00000098: 	callq	__printf_chk@PLT # Offset: 152
    0000009d: 	movl	iterations(%rip), %esi
    000000a3: 	cmpl	%esi, %r14d
    000000a6: 	jge	.Ltmp189 # Offset: 166
    000000a8: 	movq	init_value(%rip), %rdi
    000000af: 	jmp	.Ltmp193 # Offset: 175
    000000b1: 	nopl	(%rax) # Size: 7
.Ltmp192:
    000000b8: 	addl	$0x1, %r14d
    000000bc: 	cmpl	%esi, %r14d
    000000bf: 	jl	.Ltmp193 # Offset: 191
.Ltmp189:
    000000c1: 	callq	clock@PLT # Offset: 193
    000000c6: 	pxor	%xmm0, %xmm0
    000000ca: 	movq	%r12, %rdi
    000000cd: 	movq	%rax, end_time(%rip)
    000000d4: 	subq	start_time(%rip), %rax
    000000db: 	cvtsi2sd	%rax, %xmm0
    000000e0: 	divsd	DATAat0x7608(%rip), %xmm0
    000000e8: 	addq	$0x8, %rsp
    000000ec: 	popq	%rbx
    000000ed: 	popq	%rbp
    000000ee: 	popq	%r12
    000000f0: 	popq	%r13
    000000f2: 	popq	%r14
    000000f4: 	popq	%r15
    000000f6: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 246
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm6swab64EvPT_iPKc"

Binary Function "_Z13test_constantIm12swab64_mask1EvPT_iPKc" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x4370
  Size        : 0xfb
  MaxSize     : 0x100
  Offset      : 0x4370
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm12swab64_mask1EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x8, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movl	iterations(%rip), %esi
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	testl	%esi, %esi
    0000002f: 	jle	.Ltmp194 # Offset: 47
    00000035: 	leal	-0x1(%r15), %eax
    00000039: 	movq	init_value(%rip), %rdi
    00000040: 	xorl	%r14d, %r14d
    00000043: 	leaq	DATAat0x75e5(%rip), %rbp
    0000004a: 	leaq	0x8(%rbx,%rax,8), %r13
    0000004f: 	nop # Size: 1
.Ltmp198:
    00000050: 	movq	%rbx, %rax
    00000053: 	xorl	%ecx, %ecx
    00000055: 	testl	%r15d, %r15d
    00000058: 	jle	.Ltmp195 # Offset: 88
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp196:
    00000060: 	movq	(%rax), %rdx
    00000063: 	addq	$0x8, %rax
    00000067: 	bswapq	%rdx
    0000006a: 	addq	%rdx, %rcx
    0000006d: 	cmpq	%r13, %rax
    00000070: 	jne	.Ltmp196 # Offset: 112
.Ltmp195:
    00000072: 	movq	%rdi, %rax
    00000075: 	bswapq	%rax
    00000078: 	imulq	$0x1f40, %rax, %rax
    0000007f: 	cmpq	%rcx, %rax
    00000082: 	je	.Ltmp197 # Offset: 130
    00000084: 	movl	current_test(%rip), %edx
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movl	$0x1, %edi
    00000092: 	xorl	%eax, %eax
    00000094: 	addl	$0x1, %r14d
    00000098: 	callq	__printf_chk@PLT # Offset: 152
    0000009d: 	movl	iterations(%rip), %esi
    000000a3: 	cmpl	%esi, %r14d
    000000a6: 	jge	.Ltmp194 # Offset: 166
    000000a8: 	movq	init_value(%rip), %rdi
    000000af: 	jmp	.Ltmp198 # Offset: 175
    000000b1: 	nopl	(%rax) # Size: 7
.Ltmp197:
    000000b8: 	addl	$0x1, %r14d
    000000bc: 	cmpl	%esi, %r14d
    000000bf: 	jl	.Ltmp198 # Offset: 191
.Ltmp194:
    000000c1: 	callq	clock@PLT # Offset: 193
    000000c6: 	pxor	%xmm0, %xmm0
    000000ca: 	movq	%r12, %rdi
    000000cd: 	movq	%rax, end_time(%rip)
    000000d4: 	subq	start_time(%rip), %rax
    000000db: 	cvtsi2sd	%rax, %xmm0
    000000e0: 	divsd	DATAat0x7608(%rip), %xmm0
    000000e8: 	addq	$0x8, %rsp
    000000ec: 	popq	%rbx
    000000ed: 	popq	%rbp
    000000ee: 	popq	%r12
    000000f0: 	popq	%r13
    000000f2: 	popq	%r14
    000000f4: 	popq	%r15
    000000f6: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 246
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm12swab64_mask1EvPT_iPKc"

Binary Function "_Z13test_constantIm12swab64_mask2EvPT_iPKc" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x4470
  Size        : 0xfb
  MaxSize     : 0x100
  Offset      : 0x4470
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm12swab64_mask2EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x8, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movl	iterations(%rip), %esi
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	testl	%esi, %esi
    0000002f: 	jle	.Ltmp199 # Offset: 47
    00000035: 	leal	-0x1(%r15), %eax
    00000039: 	movq	init_value(%rip), %rdi
    00000040: 	xorl	%r14d, %r14d
    00000043: 	leaq	DATAat0x75e5(%rip), %rbp
    0000004a: 	leaq	0x8(%rbx,%rax,8), %r13
    0000004f: 	nop # Size: 1
.Ltmp203:
    00000050: 	movq	%rbx, %rax
    00000053: 	xorl	%ecx, %ecx
    00000055: 	testl	%r15d, %r15d
    00000058: 	jle	.Ltmp200 # Offset: 88
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp201:
    00000060: 	movq	(%rax), %rdx
    00000063: 	addq	$0x8, %rax
    00000067: 	bswapq	%rdx
    0000006a: 	addq	%rdx, %rcx
    0000006d: 	cmpq	%r13, %rax
    00000070: 	jne	.Ltmp201 # Offset: 112
.Ltmp200:
    00000072: 	movq	%rdi, %rax
    00000075: 	bswapq	%rax
    00000078: 	imulq	$0x1f40, %rax, %rax
    0000007f: 	cmpq	%rcx, %rax
    00000082: 	je	.Ltmp202 # Offset: 130
    00000084: 	movl	current_test(%rip), %edx
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movl	$0x1, %edi
    00000092: 	xorl	%eax, %eax
    00000094: 	addl	$0x1, %r14d
    00000098: 	callq	__printf_chk@PLT # Offset: 152
    0000009d: 	movl	iterations(%rip), %esi
    000000a3: 	cmpl	%esi, %r14d
    000000a6: 	jge	.Ltmp199 # Offset: 166
    000000a8: 	movq	init_value(%rip), %rdi
    000000af: 	jmp	.Ltmp203 # Offset: 175
    000000b1: 	nopl	(%rax) # Size: 7
.Ltmp202:
    000000b8: 	addl	$0x1, %r14d
    000000bc: 	cmpl	%esi, %r14d
    000000bf: 	jl	.Ltmp203 # Offset: 191
.Ltmp199:
    000000c1: 	callq	clock@PLT # Offset: 193
    000000c6: 	pxor	%xmm0, %xmm0
    000000ca: 	movq	%r12, %rdi
    000000cd: 	movq	%rax, end_time(%rip)
    000000d4: 	subq	start_time(%rip), %rax
    000000db: 	cvtsi2sd	%rax, %xmm0
    000000e0: 	divsd	DATAat0x7608(%rip), %xmm0
    000000e8: 	addq	$0x8, %rsp
    000000ec: 	popq	%rbx
    000000ed: 	popq	%rbp
    000000ee: 	popq	%r12
    000000f0: 	popq	%r13
    000000f2: 	popq	%r14
    000000f4: 	popq	%r15
    000000f6: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 246
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm12swab64_mask2EvPT_iPKc"

Binary Function "_Z13test_constantIm12swab64_mask3EvPT_iPKc" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x4570
  Size        : 0x31b
  MaxSize     : 0x320
  Offset      : 0x4570
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm12swab64_mask3EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rdi, %rbx
    00000011: 	subq	$0x18, %rsp
    00000015: 	movl	%esi, (%rsp)
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edi, %edi
    00000031: 	jle	.Ltmp204 # Offset: 49
    00000037: 	movl	(%rsp), %ecx
    0000003a: 	movq	init_value(%rip), %rsi
    00000041: 	xorl	%r13d, %r13d
    00000044: 	movabsq	$0xff000000000000, %r14
    0000004e: 	movdqa	DATAat0x7640(%rip), %xmm7
    00000056: 	movabsq	$0xff0000000000, %r12
    00000060: 	movabsq	$0xff00000000, %rbp
    0000006a: 	movl	%ecx, %eax
    0000006c: 	movl	%ecx, %r9d
    0000006f: 	shrl	%eax
    00000071: 	andl	$-0x2, %r9d
    00000075: 	subl	$0x1, %eax
    00000078: 	shlq	$0x4, %rax
    0000007c: 	leaq	0x10(%rbx,%rax), %r15
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp209:
    00000088: 	xorl	%r10d, %r10d
    0000008b: 	testl	%ecx, %ecx
    0000008d: 	jle	.Ltmp205 # Offset: 141
    00000093: 	cmpl	$0x1, %ecx
    00000096: 	je	.Ltmp206 # Offset: 150
    0000009c: 	movdqa	DATAat0x7650(%rip), %xmm6
    000000a4: 	movdqa	DATAat0x7660(%rip), %xmm5
    000000ac: 	movq	%rbx, %rax
    000000af: 	pxor	%xmm8, %xmm8
    000000b4: 	movdqa	DATAat0x7670(%rip), %xmm4
    000000bc: 	movdqa	DATAat0x7680(%rip), %xmm3
    000000c4: 	movdqa	DATAat0x7690(%rip), %xmm2
    000000cc: 	nopl	(%rax) # Size: 4
.Ltmp207:
    000000d0: 	movdqu	(%rax), %xmm0
    000000d4: 	addq	$0x10, %rax
    000000d8: 	movdqa	%xmm0, %xmm1
    000000dc: 	movdqa	%xmm0, %xmm9
    000000e1: 	movdqa	%xmm0, %xmm10
    000000e6: 	psllq	$0x28, %xmm1
    000000eb: 	psrlq	$0x28, %xmm9
    000000f1: 	pand	%xmm6, %xmm9
    000000f6: 	psrlq	$0x38, %xmm10
    000000fc: 	pand	%xmm7, %xmm1
    00000100: 	paddq	%xmm9, %xmm1
    00000105: 	movdqa	%xmm0, %xmm9
    0000010a: 	psllq	$0x38, %xmm9
    00000110: 	paddq	%xmm10, %xmm9
    00000115: 	movdqa	%xmm0, %xmm10
    0000011a: 	paddq	%xmm1, %xmm9
    0000011f: 	psrlq	$0x18, %xmm10
    00000125: 	movdqa	%xmm0, %xmm1
    00000129: 	psllq	$0x18, %xmm1
    0000012e: 	pand	%xmm4, %xmm10
    00000133: 	pand	%xmm5, %xmm1
    00000137: 	paddq	%xmm10, %xmm1
    0000013c: 	movdqa	%xmm0, %xmm10
    00000141: 	psrlq	$0x8, %xmm10
    00000147: 	psllq	$0x8, %xmm0
    0000014c: 	pand	%xmm3, %xmm10
    00000151: 	pand	%xmm2, %xmm0
    00000155: 	paddq	%xmm10, %xmm1
    0000015a: 	paddq	%xmm8, %xmm0
    0000015f: 	paddq	%xmm9, %xmm1
    00000164: 	paddq	%xmm0, %xmm1
    00000168: 	movdqa	%xmm1, %xmm8
    0000016d: 	cmpq	%rax, %r15
    00000170: 	jne	.Ltmp207 # Offset: 368
    00000176: 	movdqa	%xmm1, %xmm0
    0000017a: 	movslq	%r9d, %rax
    0000017d: 	psrldq	$0x8, %xmm0
    00000182: 	paddq	%xmm0, %xmm8
    00000187: 	movq	%xmm8, %r10
    0000018c: 	cmpl	%ecx, %r9d
    0000018f: 	je	.Ltmp205 # Offset: 399
.Ltmp210:
    00000191: 	movq	(%rbx,%rax,8), %rdx
    00000195: 	movq	%rdx, %rax
    00000198: 	movq	%rdx, %r11
    0000019b: 	shlq	$0x38, %rax
    0000019f: 	shrq	$0x38, %r11
    000001a3: 	addq	%r11, %rax
    000001a6: 	addq	%r10, %rax
    000001a9: 	movq	%rdx, %r10
    000001ac: 	shrq	$0x28, %r10
    000001b0: 	andl	$0xff00, %r10d
    000001b7: 	addq	%r10, %rax
    000001ba: 	movq	%rdx, %r10
    000001bd: 	shlq	$0x28, %r10
    000001c1: 	andq	%r14, %r10
    000001c4: 	addq	%r10, %rax
    000001c7: 	movq	%rdx, %r10
    000001ca: 	shrq	$0x18, %r10
    000001ce: 	andl	$0xff0000, %r10d
    000001d5: 	addq	%r10, %rax
    000001d8: 	movq	%rdx, %r10
    000001db: 	shlq	$0x18, %r10
    000001df: 	andq	%r12, %r10
    000001e2: 	addq	%r10, %rax
    000001e5: 	movq	%rdx, %r10
    000001e8: 	shlq	$0x8, %rdx
    000001ec: 	shrq	$0x8, %r10
    000001f0: 	andq	%rbp, %rdx
    000001f3: 	andl	$0xff000000, %r10d
    000001fa: 	addq	%r10, %rax
    000001fd: 	leaq	(%rdx,%rax), %r10
.Ltmp205:
    00000201: 	movq	%rsi, %rax
    00000204: 	movq	%rsi, %rdx
    00000207: 	shlq	$0x38, %rdx
    0000020b: 	shrq	$0x38, %rax
    0000020f: 	addq	%rdx, %rax
    00000212: 	movq	%rsi, %rdx
    00000215: 	shrq	$0x28, %rdx
    00000219: 	andl	$0xff00, %edx
    0000021f: 	addq	%rdx, %rax
    00000222: 	movq	%rsi, %rdx
    00000225: 	shlq	$0x28, %rdx
    00000229: 	andq	%r14, %rdx
    0000022c: 	addq	%rdx, %rax
    0000022f: 	movq	%rsi, %rdx
    00000232: 	shrq	$0x18, %rdx
    00000236: 	andl	$0xff0000, %edx
    0000023c: 	addq	%rdx, %rax
    0000023f: 	movq	%rsi, %rdx
    00000242: 	shlq	$0x18, %rdx
    00000246: 	andq	%r12, %rdx
    00000249: 	addq	%rdx, %rax
    0000024c: 	movq	%rsi, %rdx
    0000024f: 	shrq	$0x8, %rdx
    00000253: 	andl	$0xff000000, %edx
    00000259: 	addq	%rdx, %rax
    0000025c: 	movq	%rsi, %rdx
    0000025f: 	shlq	$0x8, %rdx
    00000263: 	andq	%rbp, %rdx
    00000266: 	addq	%rdx, %rax
    00000269: 	imulq	$0x1f40, %rax, %rax
    00000270: 	cmpq	%r10, %rax
    00000273: 	je	.Ltmp208 # Offset: 627
    00000275: 	movl	current_test(%rip), %edx
    0000027b: 	xorl	%eax, %eax
    0000027d: 	movl	%ecx, 0x4(%rsp)
    00000281: 	addl	$0x1, %r13d
    00000285: 	movl	$0x1, %edi
    0000028a: 	leaq	DATAat0x75e5(%rip), %rsi
    00000291: 	movl	%r9d, (%rsp)
    00000295: 	callq	__printf_chk@PLT # Offset: 661
    0000029a: 	movl	iterations(%rip), %edi
    000002a0: 	cmpl	%edi, %r13d
    000002a3: 	jge	.Ltmp204 # Offset: 675
    000002a5: 	movq	init_value(%rip), %rsi
    000002ac: 	movl	(%rsp), %r9d
    000002b0: 	movl	0x4(%rsp), %ecx
    000002b4: 	movdqa	DATAat0x7640(%rip), %xmm7
    000002bc: 	jmp	.Ltmp209 # Offset: 700
    000002c1: 	nopl	(%rax) # Size: 7
.Ltmp208:
    000002c8: 	addl	$0x1, %r13d
    000002cc: 	cmpl	%edi, %r13d
    000002cf: 	jl	.Ltmp209 # Offset: 719
.Ltmp204:
    000002d5: 	callq	clock@PLT # Offset: 725
    000002da: 	pxor	%xmm0, %xmm0
    000002de: 	movq	0x8(%rsp), %rdi
    000002e3: 	movq	%rax, end_time(%rip)
    000002ea: 	subq	start_time(%rip), %rax
    000002f1: 	cvtsi2sd	%rax, %xmm0
    000002f6: 	divsd	DATAat0x7608(%rip), %xmm0
    000002fe: 	addq	$0x18, %rsp
    00000302: 	popq	%rbx
    00000303: 	popq	%rbp
    00000304: 	popq	%r12
    00000306: 	popq	%r13
    00000308: 	popq	%r14
    0000030a: 	popq	%r15
    0000030c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 780
.Ltmp206:
    00000311: 	xorl	%eax, %eax
    00000313: 	xorl	%r10d, %r10d
    00000316: 	jmp	.Ltmp210 # Offset: 790
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm12swab64_mask3EvPT_iPKc"

Binary Function "_Z13test_constantIm12swab64_mask4EvPT_iPKc" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x4890
  Size        : 0x31b
  MaxSize     : 0x320
  Offset      : 0x4890
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm12swab64_mask4EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rdi, %rbx
    00000011: 	subq	$0x18, %rsp
    00000015: 	movl	%esi, (%rsp)
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %edi
    00000028: 	movq	%rax, start_time(%rip)
    0000002f: 	testl	%edi, %edi
    00000031: 	jle	.Ltmp211 # Offset: 49
    00000037: 	movl	(%rsp), %ecx
    0000003a: 	movq	init_value(%rip), %rsi
    00000041: 	xorl	%r13d, %r13d
    00000044: 	movabsq	$0xff000000000000, %r14
    0000004e: 	movdqa	DATAat0x7670(%rip), %xmm7
    00000056: 	movabsq	$0xff0000000000, %r12
    00000060: 	movabsq	$0xff00000000, %rbp
    0000006a: 	movl	%ecx, %eax
    0000006c: 	movl	%ecx, %r9d
    0000006f: 	shrl	%eax
    00000071: 	andl	$-0x2, %r9d
    00000075: 	subl	$0x1, %eax
    00000078: 	shlq	$0x4, %rax
    0000007c: 	leaq	0x10(%rbx,%rax), %r15
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp216:
    00000088: 	xorl	%r10d, %r10d
    0000008b: 	testl	%ecx, %ecx
    0000008d: 	jle	.Ltmp212 # Offset: 141
    00000093: 	cmpl	$0x1, %ecx
    00000096: 	je	.Ltmp213 # Offset: 150
    0000009c: 	movdqa	DATAat0x7650(%rip), %xmm6
    000000a4: 	movdqa	DATAat0x7640(%rip), %xmm5
    000000ac: 	movq	%rbx, %rax
    000000af: 	pxor	%xmm8, %xmm8
    000000b4: 	movdqa	DATAat0x7680(%rip), %xmm4
    000000bc: 	movdqa	DATAat0x7660(%rip), %xmm3
    000000c4: 	movdqa	DATAat0x7690(%rip), %xmm2
    000000cc: 	nopl	(%rax) # Size: 4
.Ltmp214:
    000000d0: 	movdqu	(%rax), %xmm0
    000000d4: 	addq	$0x10, %rax
    000000d8: 	movdqa	%xmm0, %xmm1
    000000dc: 	movdqa	%xmm0, %xmm9
    000000e1: 	movdqa	%xmm0, %xmm10
    000000e6: 	psrlq	$0x18, %xmm1
    000000eb: 	psrlq	$0x28, %xmm9
    000000f1: 	pand	%xmm6, %xmm9
    000000f6: 	psrlq	$0x38, %xmm10
    000000fc: 	pand	%xmm7, %xmm1
    00000100: 	paddq	%xmm9, %xmm1
    00000105: 	movdqa	%xmm0, %xmm9
    0000010a: 	psllq	$0x38, %xmm9
    00000110: 	paddq	%xmm10, %xmm9
    00000115: 	movdqa	%xmm0, %xmm10
    0000011a: 	paddq	%xmm1, %xmm9
    0000011f: 	psrlq	$0x8, %xmm10
    00000125: 	movdqa	%xmm0, %xmm1
    00000129: 	psllq	$0x28, %xmm1
    0000012e: 	pand	%xmm4, %xmm10
    00000133: 	pand	%xmm5, %xmm1
    00000137: 	paddq	%xmm10, %xmm1
    0000013c: 	movdqa	%xmm0, %xmm10
    00000141: 	psllq	$0x18, %xmm10
    00000147: 	psllq	$0x8, %xmm0
    0000014c: 	pand	%xmm3, %xmm10
    00000151: 	pand	%xmm2, %xmm0
    00000155: 	paddq	%xmm10, %xmm1
    0000015a: 	paddq	%xmm8, %xmm0
    0000015f: 	paddq	%xmm9, %xmm1
    00000164: 	paddq	%xmm0, %xmm1
    00000168: 	movdqa	%xmm1, %xmm8
    0000016d: 	cmpq	%rax, %r15
    00000170: 	jne	.Ltmp214 # Offset: 368
    00000176: 	movdqa	%xmm1, %xmm0
    0000017a: 	movslq	%r9d, %rax
    0000017d: 	psrldq	$0x8, %xmm0
    00000182: 	paddq	%xmm0, %xmm8
    00000187: 	movq	%xmm8, %r10
    0000018c: 	cmpl	%ecx, %r9d
    0000018f: 	je	.Ltmp212 # Offset: 399
.Ltmp217:
    00000191: 	movq	(%rbx,%rax,8), %rdx
    00000195: 	movq	%rdx, %rax
    00000198: 	movq	%rdx, %r11
    0000019b: 	shlq	$0x38, %rax
    0000019f: 	shrq	$0x38, %r11
    000001a3: 	addq	%r11, %rax
    000001a6: 	addq	%r10, %rax
    000001a9: 	movq	%rdx, %r10
    000001ac: 	shrq	$0x28, %r10
    000001b0: 	andl	$0xff00, %r10d
    000001b7: 	addq	%r10, %rax
    000001ba: 	movq	%rdx, %r10
    000001bd: 	shrq	$0x18, %r10
    000001c1: 	andl	$0xff0000, %r10d
    000001c8: 	addq	%r10, %rax
    000001cb: 	movq	%rdx, %r10
    000001ce: 	shrq	$0x8, %r10
    000001d2: 	andl	$0xff000000, %r10d
    000001d9: 	addq	%r10, %rax
    000001dc: 	movq	%rdx, %r10
    000001df: 	shlq	$0x28, %r10
    000001e3: 	andq	%r14, %r10
    000001e6: 	addq	%r10, %rax
    000001e9: 	movq	%rdx, %r10
    000001ec: 	shlq	$0x8, %rdx
    000001f0: 	shlq	$0x18, %r10
    000001f4: 	andq	%rbp, %rdx
    000001f7: 	andq	%r12, %r10
    000001fa: 	addq	%r10, %rax
    000001fd: 	leaq	(%rdx,%rax), %r10
.Ltmp212:
    00000201: 	movq	%rsi, %rax
    00000204: 	movq	%rsi, %rdx
    00000207: 	shlq	$0x38, %rdx
    0000020b: 	shrq	$0x38, %rax
    0000020f: 	addq	%rdx, %rax
    00000212: 	movq	%rsi, %rdx
    00000215: 	shrq	$0x28, %rdx
    00000219: 	andl	$0xff00, %edx
    0000021f: 	addq	%rdx, %rax
    00000222: 	movq	%rsi, %rdx
    00000225: 	shrq	$0x18, %rdx
    00000229: 	andl	$0xff0000, %edx
    0000022f: 	addq	%rdx, %rax
    00000232: 	movq	%rsi, %rdx
    00000235: 	shrq	$0x8, %rdx
    00000239: 	andl	$0xff000000, %edx
    0000023f: 	addq	%rdx, %rax
    00000242: 	movq	%rsi, %rdx
    00000245: 	shlq	$0x28, %rdx
    00000249: 	andq	%r14, %rdx
    0000024c: 	addq	%rdx, %rax
    0000024f: 	movq	%rsi, %rdx
    00000252: 	shlq	$0x18, %rdx
    00000256: 	andq	%r12, %rdx
    00000259: 	addq	%rdx, %rax
    0000025c: 	movq	%rsi, %rdx
    0000025f: 	shlq	$0x8, %rdx
    00000263: 	andq	%rbp, %rdx
    00000266: 	addq	%rdx, %rax
    00000269: 	imulq	$0x1f40, %rax, %rax
    00000270: 	cmpq	%r10, %rax
    00000273: 	je	.Ltmp215 # Offset: 627
    00000275: 	movl	current_test(%rip), %edx
    0000027b: 	xorl	%eax, %eax
    0000027d: 	movl	%ecx, 0x4(%rsp)
    00000281: 	addl	$0x1, %r13d
    00000285: 	movl	$0x1, %edi
    0000028a: 	leaq	DATAat0x75e5(%rip), %rsi
    00000291: 	movl	%r9d, (%rsp)
    00000295: 	callq	__printf_chk@PLT # Offset: 661
    0000029a: 	movl	iterations(%rip), %edi
    000002a0: 	cmpl	%edi, %r13d
    000002a3: 	jge	.Ltmp211 # Offset: 675
    000002a5: 	movq	init_value(%rip), %rsi
    000002ac: 	movl	(%rsp), %r9d
    000002b0: 	movl	0x4(%rsp), %ecx
    000002b4: 	movdqa	DATAat0x7670(%rip), %xmm7
    000002bc: 	jmp	.Ltmp216 # Offset: 700
    000002c1: 	nopl	(%rax) # Size: 7
.Ltmp215:
    000002c8: 	addl	$0x1, %r13d
    000002cc: 	cmpl	%edi, %r13d
    000002cf: 	jl	.Ltmp216 # Offset: 719
.Ltmp211:
    000002d5: 	callq	clock@PLT # Offset: 725
    000002da: 	pxor	%xmm0, %xmm0
    000002de: 	movq	0x8(%rsp), %rdi
    000002e3: 	movq	%rax, end_time(%rip)
    000002ea: 	subq	start_time(%rip), %rax
    000002f1: 	cvtsi2sd	%rax, %xmm0
    000002f6: 	divsd	DATAat0x7608(%rip), %xmm0
    000002fe: 	addq	$0x18, %rsp
    00000302: 	popq	%rbx
    00000303: 	popq	%rbp
    00000304: 	popq	%r12
    00000306: 	popq	%r13
    00000308: 	popq	%r14
    0000030a: 	popq	%r15
    0000030c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 780
.Ltmp213:
    00000311: 	xorl	%eax, %eax
    00000313: 	xorl	%r10d, %r10d
    00000316: 	jmp	.Ltmp217 # Offset: 790
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm12swab64_mask4EvPT_iPKc"

Binary Function "_Z13test_constantIm12swab64_mask5EvPT_iPKc" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x4bb0
  Size        : 0x312
  MaxSize     : 0x320
  Offset      : 0x4bb0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm12swab64_mask5EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rdi, %rbx
    00000011: 	subq	$0x18, %rsp
    00000015: 	movl	%esi, (%rsp)
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %r10d
    00000029: 	movq	%rax, start_time(%rip)
    00000030: 	testl	%r10d, %r10d
    00000033: 	jle	.Ltmp218 # Offset: 51
    00000039: 	movl	(%rsp), %ecx
    0000003c: 	movq	init_value(%rip), %rdi
    00000043: 	xorl	%r13d, %r13d
    00000046: 	movabsq	$0xff000000000000, %r14
    00000050: 	movdqa	DATAat0x7670(%rip), %xmm8
    00000059: 	movabsq	$0xff0000000000, %r12
    00000063: 	movabsq	$0xff00000000, %rbp
    0000006d: 	movl	%ecx, %eax
    0000006f: 	movl	%ecx, %r9d
    00000072: 	shrl	%eax
    00000074: 	andl	$-0x2, %r9d
    00000078: 	subl	$0x1, %eax
    0000007b: 	shlq	$0x4, %rax
    0000007f: 	leaq	0x10(%rbx,%rax), %r15
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp223:
    00000088: 	xorl	%esi, %esi
    0000008a: 	testl	%ecx, %ecx
    0000008c: 	jle	.Ltmp219 # Offset: 140
    00000092: 	cmpl	$0x1, %ecx
    00000095: 	je	.Ltmp220 # Offset: 149
    0000009b: 	movdqa	DATAat0x7650(%rip), %xmm7
    000000a3: 	movdqa	DATAat0x7640(%rip), %xmm6
    000000ab: 	movq	%rbx, %rax
    000000ae: 	pxor	%xmm2, %xmm2
    000000b2: 	movdqa	DATAat0x7680(%rip), %xmm5
    000000ba: 	movdqa	DATAat0x7690(%rip), %xmm4
    000000c2: 	movdqa	DATAat0x7660(%rip), %xmm3
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp221:
    000000d0: 	movdqu	(%rax), %xmm0
    000000d4: 	addq	$0x10, %rax
    000000d8: 	movdqa	%xmm0, %xmm1
    000000dc: 	movdqa	%xmm0, %xmm9
    000000e1: 	movdqa	%xmm0, %xmm10
    000000e6: 	psrlq	$0x18, %xmm1
    000000eb: 	psrlq	$0x28, %xmm9
    000000f1: 	pand	%xmm7, %xmm9
    000000f6: 	psrlq	$0x38, %xmm10
    000000fc: 	pand	%xmm8, %xmm1
    00000101: 	pxor	%xmm9, %xmm1
    00000106: 	movdqa	%xmm0, %xmm9
    0000010b: 	psllq	$0x38, %xmm9
    00000111: 	pxor	%xmm10, %xmm9
    00000116: 	movdqa	%xmm0, %xmm10
    0000011b: 	pxor	%xmm9, %xmm1
    00000120: 	psrlq	$0x8, %xmm10
    00000126: 	movdqa	%xmm0, %xmm9
    0000012b: 	psllq	$0x28, %xmm9
    00000131: 	pand	%xmm5, %xmm10
    00000136: 	pand	%xmm6, %xmm9
    0000013b: 	pxor	%xmm10, %xmm9
    00000140: 	pxor	%xmm9, %xmm1
    00000145: 	movdqa	%xmm0, %xmm9
    0000014a: 	psllq	$0x8, %xmm9
    00000150: 	psllq	$0x18, %xmm0
    00000155: 	pand	%xmm4, %xmm9
    0000015a: 	pand	%xmm3, %xmm0
    0000015e: 	pxor	%xmm9, %xmm0
    00000163: 	pxor	%xmm1, %xmm0
    00000167: 	paddq	%xmm0, %xmm2
    0000016b: 	cmpq	%rax, %r15
    0000016e: 	jne	.Ltmp221 # Offset: 366
    00000174: 	movdqa	%xmm2, %xmm0
    00000178: 	movslq	%r9d, %rax
    0000017b: 	psrldq	$0x8, %xmm0
    00000180: 	paddq	%xmm0, %xmm2
    00000184: 	movq	%xmm2, %rsi
    00000189: 	cmpl	%ecx, %r9d
    0000018c: 	je	.Ltmp219 # Offset: 396
.Ltmp224:
    0000018e: 	movq	(%rbx,%rax,8), %rdx
    00000192: 	movq	%rdx, %rax
    00000195: 	movq	%rdx, %r11
    00000198: 	shrq	$0x38, %r11
    0000019c: 	shlq	$0x38, %rax
    000001a0: 	xorq	%r11, %rax
    000001a3: 	movq	%rdx, %r11
    000001a6: 	shrq	$0x28, %r11
    000001aa: 	andl	$0xff00, %r11d
    000001b1: 	xorq	%r11, %rax
    000001b4: 	movq	%rdx, %r11
    000001b7: 	shrq	$0x18, %r11
    000001bb: 	andl	$0xff0000, %r11d
    000001c2: 	xorq	%r11, %rax
    000001c5: 	movq	%rdx, %r11
    000001c8: 	shrq	$0x8, %r11
    000001cc: 	andl	$0xff000000, %r11d
    000001d3: 	xorq	%r11, %rax
    000001d6: 	movq	%rdx, %r11
    000001d9: 	shlq	$0x28, %r11
    000001dd: 	andq	%r14, %r11
    000001e0: 	xorq	%r11, %rax
    000001e3: 	movq	%rdx, %r11
    000001e6: 	shlq	$0x8, %rdx
    000001ea: 	shlq	$0x18, %r11
    000001ee: 	andq	%rbp, %rdx
    000001f1: 	andq	%r12, %r11
    000001f4: 	xorq	%r11, %rax
    000001f7: 	xorq	%rdx, %rax
    000001fa: 	addq	%rax, %rsi
.Ltmp219:
    000001fd: 	movq	%rdi, %rax
    00000200: 	movq	%rdi, %rdx
    00000203: 	shlq	$0x38, %rdx
    00000207: 	shrq	$0x38, %rax
    0000020b: 	xorq	%rdx, %rax
    0000020e: 	movq	%rdi, %rdx
    00000211: 	shrq	$0x28, %rdx
    00000215: 	andl	$0xff00, %edx
    0000021b: 	xorq	%rdx, %rax
    0000021e: 	movq	%rdi, %rdx
    00000221: 	shrq	$0x18, %rdx
    00000225: 	andl	$0xff0000, %edx
    0000022b: 	xorq	%rdx, %rax
    0000022e: 	movq	%rdi, %rdx
    00000231: 	shrq	$0x8, %rdx
    00000235: 	andl	$0xff000000, %edx
    0000023b: 	xorq	%rdx, %rax
    0000023e: 	movq	%rdi, %rdx
    00000241: 	shlq	$0x28, %rdx
    00000245: 	andq	%r14, %rdx
    00000248: 	xorq	%rdx, %rax
    0000024b: 	movq	%rdi, %rdx
    0000024e: 	shlq	$0x18, %rdx
    00000252: 	andq	%r12, %rdx
    00000255: 	xorq	%rdx, %rax
    00000258: 	movq	%rdi, %rdx
    0000025b: 	shlq	$0x8, %rdx
    0000025f: 	andq	%rbp, %rdx
    00000262: 	xorq	%rdx, %rax
    00000265: 	imulq	$0x1f40, %rax, %rax
    0000026c: 	cmpq	%rsi, %rax
    0000026f: 	je	.Ltmp222 # Offset: 623
    00000271: 	movl	current_test(%rip), %edx
    00000277: 	xorl	%eax, %eax
    00000279: 	movl	%ecx, 0x4(%rsp)
    0000027d: 	addl	$0x1, %r13d
    00000281: 	leaq	DATAat0x75e5(%rip), %rsi
    00000288: 	movl	$0x1, %edi
    0000028d: 	movl	%r9d, (%rsp)
    00000291: 	callq	__printf_chk@PLT # Offset: 657
    00000296: 	movl	iterations(%rip), %r10d
    0000029d: 	cmpl	%r10d, %r13d
    000002a0: 	jge	.Ltmp218 # Offset: 672
    000002a2: 	movq	init_value(%rip), %rdi
    000002a9: 	movl	(%rsp), %r9d
    000002ad: 	movdqa	DATAat0x7670(%rip), %xmm8
    000002b6: 	movl	0x4(%rsp), %ecx
    000002ba: 	jmp	.Ltmp223 # Offset: 698
    000002bf: 	nop # Size: 1
.Ltmp222:
    000002c0: 	addl	$0x1, %r13d
    000002c4: 	cmpl	%r10d, %r13d
    000002c7: 	jl	.Ltmp223 # Offset: 711
.Ltmp218:
    000002cd: 	callq	clock@PLT # Offset: 717
    000002d2: 	pxor	%xmm0, %xmm0
    000002d6: 	movq	0x8(%rsp), %rdi
    000002db: 	movq	%rax, end_time(%rip)
    000002e2: 	subq	start_time(%rip), %rax
    000002e9: 	cvtsi2sd	%rax, %xmm0
    000002ee: 	divsd	DATAat0x7608(%rip), %xmm0
    000002f6: 	addq	$0x18, %rsp
    000002fa: 	popq	%rbx
    000002fb: 	popq	%rbp
    000002fc: 	popq	%r12
    000002fe: 	popq	%r13
    00000300: 	popq	%r14
    00000302: 	popq	%r15
    00000304: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 772
.Ltmp220:
    00000309: 	xorl	%eax, %eax
    0000030b: 	xorl	%esi, %esi
    0000030d: 	jmp	.Ltmp224 # Offset: 781
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm12swab64_mask5EvPT_iPKc"

Binary Function "_Z13test_constantIm12swab64_mask6EvPT_iPKc" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x4ed0
  Size        : 0x312
  MaxSize     : 0x320
  Offset      : 0x4ed0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm12swab64_mask6EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rdi, %rbx
    00000011: 	subq	$0x18, %rsp
    00000015: 	movl	%esi, (%rsp)
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %r10d
    00000029: 	movq	%rax, start_time(%rip)
    00000030: 	testl	%r10d, %r10d
    00000033: 	jle	.Ltmp225 # Offset: 51
    00000039: 	movl	(%rsp), %ecx
    0000003c: 	movq	init_value(%rip), %rdi
    00000043: 	xorl	%r13d, %r13d
    00000046: 	movabsq	$0xff000000000000, %r14
    00000050: 	movdqa	DATAat0x7670(%rip), %xmm8
    00000059: 	movabsq	$0xff0000000000, %r12
    00000063: 	movabsq	$0xff00000000, %rbp
    0000006d: 	movl	%ecx, %eax
    0000006f: 	movl	%ecx, %r9d
    00000072: 	shrl	%eax
    00000074: 	andl	$-0x2, %r9d
    00000078: 	subl	$0x1, %eax
    0000007b: 	shlq	$0x4, %rax
    0000007f: 	leaq	0x10(%rbx,%rax), %r15
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp230:
    00000088: 	xorl	%esi, %esi
    0000008a: 	testl	%ecx, %ecx
    0000008c: 	jle	.Ltmp226 # Offset: 140
    00000092: 	cmpl	$0x1, %ecx
    00000095: 	je	.Ltmp227 # Offset: 149
    0000009b: 	movdqa	DATAat0x7650(%rip), %xmm7
    000000a3: 	movdqa	DATAat0x7640(%rip), %xmm6
    000000ab: 	movq	%rbx, %rax
    000000ae: 	pxor	%xmm2, %xmm2
    000000b2: 	movdqa	DATAat0x7680(%rip), %xmm5
    000000ba: 	movdqa	DATAat0x7690(%rip), %xmm4
    000000c2: 	movdqa	DATAat0x7660(%rip), %xmm3
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp228:
    000000d0: 	movdqu	(%rax), %xmm0
    000000d4: 	addq	$0x10, %rax
    000000d8: 	movdqa	%xmm0, %xmm1
    000000dc: 	movdqa	%xmm0, %xmm9
    000000e1: 	movdqa	%xmm0, %xmm10
    000000e6: 	psrlq	$0x18, %xmm1
    000000eb: 	psrlq	$0x28, %xmm9
    000000f1: 	pand	%xmm7, %xmm9
    000000f6: 	psrlq	$0x38, %xmm10
    000000fc: 	pand	%xmm8, %xmm1
    00000101: 	pxor	%xmm9, %xmm1
    00000106: 	movdqa	%xmm0, %xmm9
    0000010b: 	psllq	$0x38, %xmm9
    00000111: 	pxor	%xmm10, %xmm9
    00000116: 	movdqa	%xmm0, %xmm10
    0000011b: 	pxor	%xmm9, %xmm1
    00000120: 	psrlq	$0x8, %xmm10
    00000126: 	movdqa	%xmm0, %xmm9
    0000012b: 	psllq	$0x28, %xmm9
    00000131: 	pand	%xmm5, %xmm10
    00000136: 	pand	%xmm6, %xmm9
    0000013b: 	pxor	%xmm10, %xmm9
    00000140: 	pxor	%xmm9, %xmm1
    00000145: 	movdqa	%xmm0, %xmm9
    0000014a: 	psllq	$0x8, %xmm9
    00000150: 	psllq	$0x18, %xmm0
    00000155: 	pand	%xmm4, %xmm9
    0000015a: 	pand	%xmm3, %xmm0
    0000015e: 	pxor	%xmm9, %xmm0
    00000163: 	pxor	%xmm1, %xmm0
    00000167: 	paddq	%xmm0, %xmm2
    0000016b: 	cmpq	%rax, %r15
    0000016e: 	jne	.Ltmp228 # Offset: 366
    00000174: 	movdqa	%xmm2, %xmm0
    00000178: 	movslq	%r9d, %rax
    0000017b: 	psrldq	$0x8, %xmm0
    00000180: 	paddq	%xmm0, %xmm2
    00000184: 	movq	%xmm2, %rsi
    00000189: 	cmpl	%ecx, %r9d
    0000018c: 	je	.Ltmp226 # Offset: 396
.Ltmp231:
    0000018e: 	movq	(%rbx,%rax,8), %rdx
    00000192: 	movq	%rdx, %rax
    00000195: 	movq	%rdx, %r11
    00000198: 	shrq	$0x38, %r11
    0000019c: 	shlq	$0x38, %rax
    000001a0: 	xorq	%r11, %rax
    000001a3: 	movq	%rdx, %r11
    000001a6: 	shrq	$0x28, %r11
    000001aa: 	andl	$0xff00, %r11d
    000001b1: 	xorq	%r11, %rax
    000001b4: 	movq	%rdx, %r11
    000001b7: 	shrq	$0x18, %r11
    000001bb: 	andl	$0xff0000, %r11d
    000001c2: 	xorq	%r11, %rax
    000001c5: 	movq	%rdx, %r11
    000001c8: 	shrq	$0x8, %r11
    000001cc: 	andl	$0xff000000, %r11d
    000001d3: 	xorq	%r11, %rax
    000001d6: 	movq	%rdx, %r11
    000001d9: 	shlq	$0x28, %r11
    000001dd: 	andq	%r14, %r11
    000001e0: 	xorq	%r11, %rax
    000001e3: 	movq	%rdx, %r11
    000001e6: 	shlq	$0x8, %rdx
    000001ea: 	shlq	$0x18, %r11
    000001ee: 	andq	%rbp, %rdx
    000001f1: 	andq	%r12, %r11
    000001f4: 	xorq	%r11, %rax
    000001f7: 	xorq	%rdx, %rax
    000001fa: 	addq	%rax, %rsi
.Ltmp226:
    000001fd: 	movq	%rdi, %rax
    00000200: 	movq	%rdi, %rdx
    00000203: 	shlq	$0x38, %rdx
    00000207: 	shrq	$0x38, %rax
    0000020b: 	xorq	%rdx, %rax
    0000020e: 	movq	%rdi, %rdx
    00000211: 	shrq	$0x28, %rdx
    00000215: 	andl	$0xff00, %edx
    0000021b: 	xorq	%rdx, %rax
    0000021e: 	movq	%rdi, %rdx
    00000221: 	shrq	$0x18, %rdx
    00000225: 	andl	$0xff0000, %edx
    0000022b: 	xorq	%rdx, %rax
    0000022e: 	movq	%rdi, %rdx
    00000231: 	shrq	$0x8, %rdx
    00000235: 	andl	$0xff000000, %edx
    0000023b: 	xorq	%rdx, %rax
    0000023e: 	movq	%rdi, %rdx
    00000241: 	shlq	$0x28, %rdx
    00000245: 	andq	%r14, %rdx
    00000248: 	xorq	%rdx, %rax
    0000024b: 	movq	%rdi, %rdx
    0000024e: 	shlq	$0x18, %rdx
    00000252: 	andq	%r12, %rdx
    00000255: 	xorq	%rdx, %rax
    00000258: 	movq	%rdi, %rdx
    0000025b: 	shlq	$0x8, %rdx
    0000025f: 	andq	%rbp, %rdx
    00000262: 	xorq	%rdx, %rax
    00000265: 	imulq	$0x1f40, %rax, %rax
    0000026c: 	cmpq	%rsi, %rax
    0000026f: 	je	.Ltmp229 # Offset: 623
    00000271: 	movl	current_test(%rip), %edx
    00000277: 	xorl	%eax, %eax
    00000279: 	movl	%ecx, 0x4(%rsp)
    0000027d: 	addl	$0x1, %r13d
    00000281: 	leaq	DATAat0x75e5(%rip), %rsi
    00000288: 	movl	$0x1, %edi
    0000028d: 	movl	%r9d, (%rsp)
    00000291: 	callq	__printf_chk@PLT # Offset: 657
    00000296: 	movl	iterations(%rip), %r10d
    0000029d: 	cmpl	%r10d, %r13d
    000002a0: 	jge	.Ltmp225 # Offset: 672
    000002a2: 	movq	init_value(%rip), %rdi
    000002a9: 	movl	(%rsp), %r9d
    000002ad: 	movdqa	DATAat0x7670(%rip), %xmm8
    000002b6: 	movl	0x4(%rsp), %ecx
    000002ba: 	jmp	.Ltmp230 # Offset: 698
    000002bf: 	nop # Size: 1
.Ltmp229:
    000002c0: 	addl	$0x1, %r13d
    000002c4: 	cmpl	%r10d, %r13d
    000002c7: 	jl	.Ltmp230 # Offset: 711
.Ltmp225:
    000002cd: 	callq	clock@PLT # Offset: 717
    000002d2: 	pxor	%xmm0, %xmm0
    000002d6: 	movq	0x8(%rsp), %rdi
    000002db: 	movq	%rax, end_time(%rip)
    000002e2: 	subq	start_time(%rip), %rax
    000002e9: 	cvtsi2sd	%rax, %xmm0
    000002ee: 	divsd	DATAat0x7608(%rip), %xmm0
    000002f6: 	addq	$0x18, %rsp
    000002fa: 	popq	%rbx
    000002fb: 	popq	%rbp
    000002fc: 	popq	%r12
    000002fe: 	popq	%r13
    00000300: 	popq	%r14
    00000302: 	popq	%r15
    00000304: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 772
.Ltmp227:
    00000309: 	xorl	%eax, %eax
    0000030b: 	xorl	%esi, %esi
    0000030d: 	jmp	.Ltmp231 # Offset: 781
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm12swab64_mask6EvPT_iPKc"

Binary Function "_Z13test_constantIm12swab64_temp1EvPT_iPKc" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x51f0
  Size        : 0xfb
  MaxSize     : 0x100
  Offset      : 0x51f0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm12swab64_temp1EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x8, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movl	iterations(%rip), %esi
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	testl	%esi, %esi
    0000002f: 	jle	.Ltmp232 # Offset: 47
    00000035: 	leal	-0x1(%r15), %eax
    00000039: 	movq	init_value(%rip), %rdi
    00000040: 	xorl	%r14d, %r14d
    00000043: 	leaq	DATAat0x75e5(%rip), %rbp
    0000004a: 	leaq	0x8(%rbx,%rax,8), %r13
    0000004f: 	nop # Size: 1
.Ltmp236:
    00000050: 	movq	%rbx, %rax
    00000053: 	xorl	%ecx, %ecx
    00000055: 	testl	%r15d, %r15d
    00000058: 	jle	.Ltmp233 # Offset: 88
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp234:
    00000060: 	movq	(%rax), %rdx
    00000063: 	addq	$0x8, %rax
    00000067: 	bswapq	%rdx
    0000006a: 	addq	%rdx, %rcx
    0000006d: 	cmpq	%r13, %rax
    00000070: 	jne	.Ltmp234 # Offset: 112
.Ltmp233:
    00000072: 	movq	%rdi, %rax
    00000075: 	bswapq	%rax
    00000078: 	imulq	$0x1f40, %rax, %rax
    0000007f: 	cmpq	%rcx, %rax
    00000082: 	je	.Ltmp235 # Offset: 130
    00000084: 	movl	current_test(%rip), %edx
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movl	$0x1, %edi
    00000092: 	xorl	%eax, %eax
    00000094: 	addl	$0x1, %r14d
    00000098: 	callq	__printf_chk@PLT # Offset: 152
    0000009d: 	movl	iterations(%rip), %esi
    000000a3: 	cmpl	%esi, %r14d
    000000a6: 	jge	.Ltmp232 # Offset: 166
    000000a8: 	movq	init_value(%rip), %rdi
    000000af: 	jmp	.Ltmp236 # Offset: 175
    000000b1: 	nopl	(%rax) # Size: 7
.Ltmp235:
    000000b8: 	addl	$0x1, %r14d
    000000bc: 	cmpl	%esi, %r14d
    000000bf: 	jl	.Ltmp236 # Offset: 191
.Ltmp232:
    000000c1: 	callq	clock@PLT # Offset: 193
    000000c6: 	pxor	%xmm0, %xmm0
    000000ca: 	movq	%r12, %rdi
    000000cd: 	movq	%rax, end_time(%rip)
    000000d4: 	subq	start_time(%rip), %rax
    000000db: 	cvtsi2sd	%rax, %xmm0
    000000e0: 	divsd	DATAat0x7608(%rip), %xmm0
    000000e8: 	addq	$0x8, %rsp
    000000ec: 	popq	%rbx
    000000ed: 	popq	%rbp
    000000ee: 	popq	%r12
    000000f0: 	popq	%r13
    000000f2: 	popq	%r14
    000000f4: 	popq	%r15
    000000f6: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 246
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm12swab64_temp1EvPT_iPKc"

Binary Function "_Z13test_constantIm14swab64_subset1EvPT_iPKc" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x52f0
  Size        : 0xfb
  MaxSize     : 0x100
  Offset      : 0x52f0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm14swab64_subset1EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x8, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movl	iterations(%rip), %esi
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	testl	%esi, %esi
    0000002f: 	jle	.Ltmp237 # Offset: 47
    00000035: 	leal	-0x1(%r15), %eax
    00000039: 	movq	init_value(%rip), %rdi
    00000040: 	xorl	%r14d, %r14d
    00000043: 	leaq	DATAat0x75e5(%rip), %rbp
    0000004a: 	leaq	0x8(%rbx,%rax,8), %r13
    0000004f: 	nop # Size: 1
.Ltmp241:
    00000050: 	movq	%rbx, %rax
    00000053: 	xorl	%ecx, %ecx
    00000055: 	testl	%r15d, %r15d
    00000058: 	jle	.Ltmp238 # Offset: 88
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp239:
    00000060: 	movq	(%rax), %rdx
    00000063: 	addq	$0x8, %rax
    00000067: 	bswapq	%rdx
    0000006a: 	addq	%rdx, %rcx
    0000006d: 	cmpq	%r13, %rax
    00000070: 	jne	.Ltmp239 # Offset: 112
.Ltmp238:
    00000072: 	movq	%rdi, %rax
    00000075: 	bswapq	%rax
    00000078: 	imulq	$0x1f40, %rax, %rax
    0000007f: 	cmpq	%rcx, %rax
    00000082: 	je	.Ltmp240 # Offset: 130
    00000084: 	movl	current_test(%rip), %edx
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movl	$0x1, %edi
    00000092: 	xorl	%eax, %eax
    00000094: 	addl	$0x1, %r14d
    00000098: 	callq	__printf_chk@PLT # Offset: 152
    0000009d: 	movl	iterations(%rip), %esi
    000000a3: 	cmpl	%esi, %r14d
    000000a6: 	jge	.Ltmp237 # Offset: 166
    000000a8: 	movq	init_value(%rip), %rdi
    000000af: 	jmp	.Ltmp241 # Offset: 175
    000000b1: 	nopl	(%rax) # Size: 7
.Ltmp240:
    000000b8: 	addl	$0x1, %r14d
    000000bc: 	cmpl	%esi, %r14d
    000000bf: 	jl	.Ltmp241 # Offset: 191
.Ltmp237:
    000000c1: 	callq	clock@PLT # Offset: 193
    000000c6: 	pxor	%xmm0, %xmm0
    000000ca: 	movq	%r12, %rdi
    000000cd: 	movq	%rax, end_time(%rip)
    000000d4: 	subq	start_time(%rip), %rax
    000000db: 	cvtsi2sd	%rax, %xmm0
    000000e0: 	divsd	DATAat0x7608(%rip), %xmm0
    000000e8: 	addq	$0x8, %rsp
    000000ec: 	popq	%rbx
    000000ed: 	popq	%rbp
    000000ee: 	popq	%r12
    000000f0: 	popq	%r13
    000000f2: 	popq	%r14
    000000f4: 	popq	%r15
    000000f6: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 246
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm14swab64_subset1EvPT_iPKc"

Binary Function "_Z13test_constantIm12swab64_temp2EvPT_iPKc" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x53f0
  Size        : 0x189
  MaxSize     : 0x190
  Offset      : 0x53f0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm12swab64_temp2EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	callq	clock@PLT # Offset: 29
    00000022: 	movl	iterations(%rip), %r15d
    00000029: 	movq	%rax, start_time(%rip)
    00000030: 	testl	%r15d, %r15d
    00000033: 	jle	.Ltmp242 # Offset: 51
    00000039: 	leal	-0x1(%r14), %eax
    0000003d: 	movq	init_value(%rip), %rcx
    00000044: 	xorl	%r13d, %r13d
    00000047: 	leaq	DATAat0x75e5(%rip), %r12
    0000004e: 	leaq	0x8(%rbp,%rax,8), %rbx
    00000053: 	movq	%rbx, (%rsp)
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp246:
    00000060: 	movq	(%rsp), %rbx
    00000064: 	movq	%rbp, %rax
    00000067: 	xorl	%edx, %edx
    00000069: 	testl	%r14d, %r14d
    0000006c: 	jle	.Ltmp243 # Offset: 108
    0000006e: 	nop # Size: 2
.Ltmp244:
    00000070: 	movq	(%rax), %rsi
    00000073: 	addq	$0x8, %rax
    00000077: 	bswapq	%rsi
    0000007a: 	addq	%rsi, %rdx
    0000007d: 	cmpq	%rax, %rbx
    00000080: 	jne	.Ltmp244 # Offset: 128
    00000082: 	movq	%rbx, (%rsp)
.Ltmp243:
    00000086: 	movzbl	%cl, %eax
    00000089: 	movq	%rcx, %r10
    0000008c: 	movzbl	%ch, %ebx
    0000008f: 	movq	%rcx, %r9
    00000092: 	shlq	$0x8, %rax
    00000096: 	shrq	$0x10, %r10
    0000009a: 	movq	%rcx, %r8
    0000009d: 	movq	%rcx, %rdi
    000000a0: 	orq	%rbx, %rax
    000000a3: 	movzbl	%r10b, %r10d
    000000a7: 	shrq	$0x18, %r9
    000000ab: 	movq	%rcx, %rsi
    000000ae: 	shlq	$0x8, %rax
    000000b2: 	movzbl	%r9b, %r9d
    000000b6: 	shrq	$0x20, %r8
    000000ba: 	shrq	$0x28, %rdi
    000000be: 	orq	%r10, %rax
    000000c1: 	movzbl	%r8b, %r8d
    000000c5: 	shrq	$0x30, %rsi
    000000c9: 	shlq	$0x8, %rax
    000000cd: 	movzbl	%dil, %edi
    000000d1: 	movzbl	%sil, %esi
    000000d5: 	orq	%r9, %rax
    000000d8: 	shlq	$0x8, %rax
    000000dc: 	orq	%r8, %rax
    000000df: 	shlq	$0x8, %rax
    000000e3: 	orq	%rdi, %rax
    000000e6: 	shlq	$0x8, %rax
    000000ea: 	orq	%rsi, %rax
    000000ed: 	movq	%rcx, %rsi
    000000f0: 	shrq	$0x38, %rsi
    000000f4: 	shlq	$0x8, %rax
    000000f8: 	orq	%rsi, %rax
    000000fb: 	imulq	$0x1f40, %rax, %rax
    00000102: 	cmpq	%rdx, %rax
    00000105: 	je	.Ltmp245 # Offset: 261
    00000107: 	movl	current_test(%rip), %edx
    0000010d: 	movq	%r12, %rsi
    00000110: 	movl	$0x1, %edi
    00000115: 	xorl	%eax, %eax
    00000117: 	addl	$0x1, %r13d
    0000011b: 	callq	__printf_chk@PLT # Offset: 283
    00000120: 	movl	iterations(%rip), %r15d
    00000127: 	cmpl	%r15d, %r13d
    0000012a: 	jge	.Ltmp242 # Offset: 298
    0000012c: 	movq	init_value(%rip), %rcx
    00000133: 	jmp	.Ltmp246 # Offset: 307
    00000138: 	nopl	(%rax,%rax) # Size: 8
.Ltmp245:
    00000140: 	addl	$0x1, %r13d
    00000144: 	cmpl	%r13d, %r15d
    00000147: 	jg	.Ltmp246 # Offset: 327
.Ltmp242:
    0000014d: 	callq	clock@PLT # Offset: 333
    00000152: 	pxor	%xmm0, %xmm0
    00000156: 	movq	0x8(%rsp), %rdi
    0000015b: 	movq	%rax, end_time(%rip)
    00000162: 	subq	start_time(%rip), %rax
    00000169: 	cvtsi2sd	%rax, %xmm0
    0000016e: 	divsd	DATAat0x7608(%rip), %xmm0
    00000176: 	addq	$0x18, %rsp
    0000017a: 	popq	%rbx
    0000017b: 	popq	%rbp
    0000017c: 	popq	%r12
    0000017e: 	popq	%r13
    00000180: 	popq	%r14
    00000182: 	popq	%r15
    00000184: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 388
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm12swab64_temp2EvPT_iPKc"

Binary Function "_Z13test_constantIm12swab64_temp3EvPT_iPKc" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0x5580
  Size        : 0xfb
  MaxSize     : 0x100
  Offset      : 0x5580
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm12swab64_temp3EvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x8, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movl	iterations(%rip), %esi
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	testl	%esi, %esi
    0000002f: 	jle	.Ltmp247 # Offset: 47
    00000035: 	leal	-0x1(%r15), %eax
    00000039: 	movq	init_value(%rip), %rdi
    00000040: 	xorl	%r14d, %r14d
    00000043: 	leaq	DATAat0x75e5(%rip), %rbp
    0000004a: 	leaq	0x8(%rbx,%rax,8), %r13
    0000004f: 	nop # Size: 1
.Ltmp251:
    00000050: 	movq	%rbx, %rax
    00000053: 	xorl	%ecx, %ecx
    00000055: 	testl	%r15d, %r15d
    00000058: 	jle	.Ltmp248 # Offset: 88
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp249:
    00000060: 	movq	(%rax), %rdx
    00000063: 	addq	$0x8, %rax
    00000067: 	bswapq	%rdx
    0000006a: 	addq	%rdx, %rcx
    0000006d: 	cmpq	%r13, %rax
    00000070: 	jne	.Ltmp249 # Offset: 112
.Ltmp248:
    00000072: 	movq	%rdi, %rax
    00000075: 	bswapq	%rax
    00000078: 	imulq	$0x1f40, %rax, %rax
    0000007f: 	cmpq	%rcx, %rax
    00000082: 	je	.Ltmp250 # Offset: 130
    00000084: 	movl	current_test(%rip), %edx
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movl	$0x1, %edi
    00000092: 	xorl	%eax, %eax
    00000094: 	addl	$0x1, %r14d
    00000098: 	callq	__printf_chk@PLT # Offset: 152
    0000009d: 	movl	iterations(%rip), %esi
    000000a3: 	cmpl	%esi, %r14d
    000000a6: 	jge	.Ltmp247 # Offset: 166
    000000a8: 	movq	init_value(%rip), %rdi
    000000af: 	jmp	.Ltmp251 # Offset: 175
    000000b1: 	nopl	(%rax) # Size: 7
.Ltmp250:
    000000b8: 	addl	$0x1, %r14d
    000000bc: 	cmpl	%esi, %r14d
    000000bf: 	jl	.Ltmp251 # Offset: 191
.Ltmp247:
    000000c1: 	callq	clock@PLT # Offset: 193
    000000c6: 	pxor	%xmm0, %xmm0
    000000ca: 	movq	%r12, %rdi
    000000cd: 	movq	%rax, end_time(%rip)
    000000d4: 	subq	start_time(%rip), %rax
    000000db: 	cvtsi2sd	%rax, %xmm0
    000000e0: 	divsd	DATAat0x7608(%rip), %xmm0
    000000e8: 	addq	$0x8, %rsp
    000000ec: 	popq	%rbx
    000000ed: 	popq	%rbp
    000000ee: 	popq	%r12
    000000f0: 	popq	%r13
    000000f2: 	popq	%r14
    000000f4: 	popq	%r15
    000000f6: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 246
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm12swab64_temp3EvPT_iPKc"

Binary Function "_Z13test_constantIt10swab_htonlEvPT_iPKc" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0x5680
  Size        : 0x212
  MaxSize     : 0x220
  Offset      : 0x5680
  Section     : .text
  Orc Section : .local.text._Z13test_constantIt10swab_htonlEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x18, %rsp
    00000017: 	movq	%rdx, 0x8(%rsp)
    0000001c: 	callq	clock@PLT # Offset: 28
    00000021: 	movl	iterations(%rip), %esi
    00000027: 	movq	%rax, start_time(%rip)
    0000002e: 	testl	%esi, %esi
    00000030: 	jle	.Ltmp252 # Offset: 48
    00000036: 	leal	-0x1(%rbx), %eax
    00000039: 	movl	%ebx, %ebp
    0000003b: 	movq	init_value(%rip), %rdi
    00000042: 	xorl	%r13d, %r13d
    00000045: 	movl	%eax, 0x4(%rsp)
    00000049: 	movl	%ebx, %eax
    0000004b: 	andl	$-0x8, %ebp
    0000004e: 	leaq	DATAat0x75e5(%rip), %r12
    00000055: 	shrl	$0x3, %eax
    00000058: 	subl	$0x1, %eax
    0000005b: 	shlq	$0x4, %rax
    0000005f: 	leaq	0x10(%r14,%rax), %r15
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp257:
    00000068: 	xorl	%eax, %eax
    0000006a: 	testl	%ebx, %ebx
    0000006c: 	jle	.Ltmp253 # Offset: 108
    00000072: 	cmpl	$0x6, 0x4(%rsp)
    00000077: 	jbe	.Ltmp254 # Offset: 119
    0000007d: 	movq	%r14, %rax
    00000080: 	pxor	%xmm2, %xmm2
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp255:
    00000088: 	movdqu	(%rax), %xmm0
    0000008c: 	addq	$0x10, %rax
    00000090: 	movdqa	%xmm0, %xmm1
    00000094: 	psrlw	$0x8, %xmm0
    00000099: 	psllw	$0x8, %xmm1
    0000009e: 	por	%xmm1, %xmm0
    000000a2: 	paddw	%xmm0, %xmm2
    000000a6: 	cmpq	%r15, %rax
    000000a9: 	jne	.Ltmp255 # Offset: 169
    000000ab: 	movdqa	%xmm2, %xmm0
    000000af: 	psrldq	$0x8, %xmm0
    000000b4: 	paddw	%xmm0, %xmm2
    000000b8: 	movdqa	%xmm2, %xmm0
    000000bc: 	psrldq	$0x4, %xmm0
    000000c1: 	paddw	%xmm0, %xmm2
    000000c5: 	movdqa	%xmm2, %xmm0
    000000c9: 	psrldq	$0x2, %xmm0
    000000ce: 	paddw	%xmm0, %xmm2
    000000d2: 	pextrw	$0x0, %xmm2, %eax
    000000d7: 	cmpl	%ebx, %ebp
    000000d9: 	je	.Ltmp253 # Offset: 217
    000000df: 	movl	%ebp, %edx
.Ltmp258:
    000000e1: 	movslq	%edx, %r10
    000000e4: 	leaq	(%r10,%r10), %r9
    000000e8: 	movzwl	(%r14,%r10,2), %r10d
    000000ed: 	rolw	$0x8, %r10w
    000000f2: 	addl	%r10d, %eax
    000000f5: 	leal	0x1(%rdx), %r10d
    000000f9: 	cmpl	%r10d, %ebx
    000000fc: 	jle	.Ltmp253 # Offset: 252
    000000fe: 	movzwl	0x2(%r14,%r9), %r10d
    00000104: 	rolw	$0x8, %r10w
    00000109: 	addl	%r10d, %eax
    0000010c: 	leal	0x2(%rdx), %r10d
    00000110: 	cmpl	%r10d, %ebx
    00000113: 	jle	.Ltmp253 # Offset: 275
    00000115: 	movzwl	0x4(%r14,%r9), %r10d
    0000011b: 	rolw	$0x8, %r10w
    00000120: 	addl	%r10d, %eax
    00000123: 	leal	0x3(%rdx), %r10d
    00000127: 	cmpl	%r10d, %ebx
    0000012a: 	jle	.Ltmp253 # Offset: 298
    0000012c: 	movzwl	0x6(%r14,%r9), %r10d
    00000132: 	rolw	$0x8, %r10w
    00000137: 	addl	%r10d, %eax
    0000013a: 	leal	0x4(%rdx), %r10d
    0000013e: 	cmpl	%r10d, %ebx
    00000141: 	jle	.Ltmp253 # Offset: 321
    00000143: 	movzwl	0x8(%r14,%r9), %r10d
    00000149: 	rolw	$0x8, %r10w
    0000014e: 	addl	%r10d, %eax
    00000151: 	leal	0x5(%rdx), %r10d
    00000155: 	cmpl	%r10d, %ebx
    00000158: 	jle	.Ltmp253 # Offset: 344
    0000015a: 	movzwl	0xa(%r14,%r9), %r10d
    00000160: 	addl	$0x6, %edx
    00000163: 	rolw	$0x8, %r10w
    00000168: 	addl	%r10d, %eax
    0000016b: 	cmpl	%edx, %ebx
    0000016d: 	jle	.Ltmp253 # Offset: 365
    0000016f: 	movzwl	0xc(%r14,%r9), %edx
    00000175: 	rolw	$0x8, %dx
    00000179: 	addl	%edx, %eax
.Ltmp253:
    0000017b: 	movl	%edi, %edx
    0000017d: 	rolw	$0x8, %dx
    00000181: 	imulw	$0x1f40, %dx, %dx
    00000186: 	cmpw	%ax, %dx
    00000189: 	je	.Ltmp256 # Offset: 393
    0000018b: 	movl	current_test(%rip), %edx
    00000191: 	movq	%r12, %rsi
    00000194: 	movl	$0x1, %edi
    00000199: 	xorl	%eax, %eax
    0000019b: 	addl	$0x1, %r13d
    0000019f: 	callq	__printf_chk@PLT # Offset: 415
    000001a4: 	movl	iterations(%rip), %esi
    000001aa: 	cmpl	%esi, %r13d
    000001ad: 	jge	.Ltmp252 # Offset: 429
    000001af: 	movq	init_value(%rip), %rdi
    000001b6: 	jmp	.Ltmp257 # Offset: 438
    000001bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp256:
    000001c0: 	addl	$0x1, %r13d
    000001c4: 	cmpl	%esi, %r13d
    000001c7: 	jl	.Ltmp257 # Offset: 455
.Ltmp252:
    000001cd: 	callq	clock@PLT # Offset: 461
    000001d2: 	pxor	%xmm0, %xmm0
    000001d6: 	movq	0x8(%rsp), %rdi
    000001db: 	movq	%rax, end_time(%rip)
    000001e2: 	subq	start_time(%rip), %rax
    000001e9: 	cvtsi2sd	%rax, %xmm0
    000001ee: 	divsd	DATAat0x7608(%rip), %xmm0
    000001f6: 	addq	$0x18, %rsp
    000001fa: 	popq	%rbx
    000001fb: 	popq	%rbp
    000001fc: 	popq	%r12
    000001fe: 	popq	%r13
    00000200: 	popq	%r14
    00000202: 	popq	%r15
    00000204: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 516
.Ltmp254:
    00000209: 	xorl	%edx, %edx
    0000020b: 	xorl	%eax, %eax
    0000020d: 	jmp	.Ltmp258 # Offset: 525
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIt10swab_htonlEvPT_iPKc"

Binary Function "_Z13test_constantIt10swab_ntohlEvPT_iPKc" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0x58a0
  Size        : 0x212
  MaxSize     : 0x220
  Offset      : 0x58a0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIt10swab_ntohlEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x18, %rsp
    00000017: 	movq	%rdx, 0x8(%rsp)
    0000001c: 	callq	clock@PLT # Offset: 28
    00000021: 	movl	iterations(%rip), %esi
    00000027: 	movq	%rax, start_time(%rip)
    0000002e: 	testl	%esi, %esi
    00000030: 	jle	.Ltmp259 # Offset: 48
    00000036: 	leal	-0x1(%rbx), %eax
    00000039: 	movl	%ebx, %ebp
    0000003b: 	movq	init_value(%rip), %rdi
    00000042: 	xorl	%r13d, %r13d
    00000045: 	movl	%eax, 0x4(%rsp)
    00000049: 	movl	%ebx, %eax
    0000004b: 	andl	$-0x8, %ebp
    0000004e: 	leaq	DATAat0x75e5(%rip), %r12
    00000055: 	shrl	$0x3, %eax
    00000058: 	subl	$0x1, %eax
    0000005b: 	shlq	$0x4, %rax
    0000005f: 	leaq	0x10(%r14,%rax), %r15
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp264:
    00000068: 	xorl	%eax, %eax
    0000006a: 	testl	%ebx, %ebx
    0000006c: 	jle	.Ltmp260 # Offset: 108
    00000072: 	cmpl	$0x6, 0x4(%rsp)
    00000077: 	jbe	.Ltmp261 # Offset: 119
    0000007d: 	movq	%r14, %rax
    00000080: 	pxor	%xmm2, %xmm2
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp262:
    00000088: 	movdqu	(%rax), %xmm0
    0000008c: 	addq	$0x10, %rax
    00000090: 	movdqa	%xmm0, %xmm1
    00000094: 	psrlw	$0x8, %xmm0
    00000099: 	psllw	$0x8, %xmm1
    0000009e: 	por	%xmm1, %xmm0
    000000a2: 	paddw	%xmm0, %xmm2
    000000a6: 	cmpq	%r15, %rax
    000000a9: 	jne	.Ltmp262 # Offset: 169
    000000ab: 	movdqa	%xmm2, %xmm0
    000000af: 	psrldq	$0x8, %xmm0
    000000b4: 	paddw	%xmm0, %xmm2
    000000b8: 	movdqa	%xmm2, %xmm0
    000000bc: 	psrldq	$0x4, %xmm0
    000000c1: 	paddw	%xmm0, %xmm2
    000000c5: 	movdqa	%xmm2, %xmm0
    000000c9: 	psrldq	$0x2, %xmm0
    000000ce: 	paddw	%xmm0, %xmm2
    000000d2: 	pextrw	$0x0, %xmm2, %eax
    000000d7: 	cmpl	%ebx, %ebp
    000000d9: 	je	.Ltmp260 # Offset: 217
    000000df: 	movl	%ebp, %edx
.Ltmp265:
    000000e1: 	movslq	%edx, %r10
    000000e4: 	leaq	(%r10,%r10), %r9
    000000e8: 	movzwl	(%r14,%r10,2), %r10d
    000000ed: 	rolw	$0x8, %r10w
    000000f2: 	addl	%r10d, %eax
    000000f5: 	leal	0x1(%rdx), %r10d
    000000f9: 	cmpl	%r10d, %ebx
    000000fc: 	jle	.Ltmp260 # Offset: 252
    000000fe: 	movzwl	0x2(%r14,%r9), %r10d
    00000104: 	rolw	$0x8, %r10w
    00000109: 	addl	%r10d, %eax
    0000010c: 	leal	0x2(%rdx), %r10d
    00000110: 	cmpl	%r10d, %ebx
    00000113: 	jle	.Ltmp260 # Offset: 275
    00000115: 	movzwl	0x4(%r14,%r9), %r10d
    0000011b: 	rolw	$0x8, %r10w
    00000120: 	addl	%r10d, %eax
    00000123: 	leal	0x3(%rdx), %r10d
    00000127: 	cmpl	%r10d, %ebx
    0000012a: 	jle	.Ltmp260 # Offset: 298
    0000012c: 	movzwl	0x6(%r14,%r9), %r10d
    00000132: 	rolw	$0x8, %r10w
    00000137: 	addl	%r10d, %eax
    0000013a: 	leal	0x4(%rdx), %r10d
    0000013e: 	cmpl	%r10d, %ebx
    00000141: 	jle	.Ltmp260 # Offset: 321
    00000143: 	movzwl	0x8(%r14,%r9), %r10d
    00000149: 	rolw	$0x8, %r10w
    0000014e: 	addl	%r10d, %eax
    00000151: 	leal	0x5(%rdx), %r10d
    00000155: 	cmpl	%r10d, %ebx
    00000158: 	jle	.Ltmp260 # Offset: 344
    0000015a: 	movzwl	0xa(%r14,%r9), %r10d
    00000160: 	addl	$0x6, %edx
    00000163: 	rolw	$0x8, %r10w
    00000168: 	addl	%r10d, %eax
    0000016b: 	cmpl	%edx, %ebx
    0000016d: 	jle	.Ltmp260 # Offset: 365
    0000016f: 	movzwl	0xc(%r14,%r9), %edx
    00000175: 	rolw	$0x8, %dx
    00000179: 	addl	%edx, %eax
.Ltmp260:
    0000017b: 	movl	%edi, %edx
    0000017d: 	rolw	$0x8, %dx
    00000181: 	imulw	$0x1f40, %dx, %dx
    00000186: 	cmpw	%ax, %dx
    00000189: 	je	.Ltmp263 # Offset: 393
    0000018b: 	movl	current_test(%rip), %edx
    00000191: 	movq	%r12, %rsi
    00000194: 	movl	$0x1, %edi
    00000199: 	xorl	%eax, %eax
    0000019b: 	addl	$0x1, %r13d
    0000019f: 	callq	__printf_chk@PLT # Offset: 415
    000001a4: 	movl	iterations(%rip), %esi
    000001aa: 	cmpl	%esi, %r13d
    000001ad: 	jge	.Ltmp259 # Offset: 429
    000001af: 	movq	init_value(%rip), %rdi
    000001b6: 	jmp	.Ltmp264 # Offset: 438
    000001bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp263:
    000001c0: 	addl	$0x1, %r13d
    000001c4: 	cmpl	%esi, %r13d
    000001c7: 	jl	.Ltmp264 # Offset: 455
.Ltmp259:
    000001cd: 	callq	clock@PLT # Offset: 461
    000001d2: 	pxor	%xmm0, %xmm0
    000001d6: 	movq	0x8(%rsp), %rdi
    000001db: 	movq	%rax, end_time(%rip)
    000001e2: 	subq	start_time(%rip), %rax
    000001e9: 	cvtsi2sd	%rax, %xmm0
    000001ee: 	divsd	DATAat0x7608(%rip), %xmm0
    000001f6: 	addq	$0x18, %rsp
    000001fa: 	popq	%rbx
    000001fb: 	popq	%rbp
    000001fc: 	popq	%r12
    000001fe: 	popq	%r13
    00000200: 	popq	%r14
    00000202: 	popq	%r15
    00000204: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 516
.Ltmp261:
    00000209: 	xorl	%edx, %edx
    0000020b: 	xorl	%eax, %eax
    0000020d: 	jmp	.Ltmp265 # Offset: 525
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIt10swab_ntohlEvPT_iPKc"

Binary Function "_Z13test_constantIj10swab_htonlEvPT_iPKc" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0x5ac0
  Size        : 0xf3
  MaxSize     : 0x100
  Offset      : 0x5ac0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIj10swab_htonlEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x8, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movl	iterations(%rip), %esi
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	testl	%esi, %esi
    0000002f: 	jle	.Ltmp266 # Offset: 47
    00000035: 	leal	-0x1(%r15), %eax
    00000039: 	movq	init_value(%rip), %rdi
    00000040: 	xorl	%r14d, %r14d
    00000043: 	leaq	DATAat0x75e5(%rip), %rbp
    0000004a: 	leaq	0x4(%rbx,%rax,4), %r13
    0000004f: 	nop # Size: 1
.Ltmp270:
    00000050: 	movq	%rbx, %rax
    00000053: 	xorl	%ecx, %ecx
    00000055: 	testl	%r15d, %r15d
    00000058: 	jle	.Ltmp267 # Offset: 88
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp268:
    00000060: 	movl	(%rax), %edx
    00000062: 	addq	$0x4, %rax
    00000066: 	bswapl	%edx
    00000068: 	addl	%edx, %ecx
    0000006a: 	cmpq	%rax, %r13
    0000006d: 	jne	.Ltmp268 # Offset: 109
.Ltmp267:
    0000006f: 	movl	%edi, %eax
    00000071: 	bswapl	%eax
    00000073: 	imull	$0x1f40, %eax, %eax
    00000079: 	cmpl	%ecx, %eax
    0000007b: 	je	.Ltmp269 # Offset: 123
    0000007d: 	movl	current_test(%rip), %edx
    00000083: 	movq	%rbp, %rsi
    00000086: 	movl	$0x1, %edi
    0000008b: 	xorl	%eax, %eax
    0000008d: 	addl	$0x1, %r14d
    00000091: 	callq	__printf_chk@PLT # Offset: 145
    00000096: 	movl	iterations(%rip), %esi
    0000009c: 	cmpl	%esi, %r14d
    0000009f: 	jge	.Ltmp266 # Offset: 159
    000000a1: 	movq	init_value(%rip), %rdi
    000000a8: 	jmp	.Ltmp270 # Offset: 168
    000000aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp269:
    000000b0: 	addl	$0x1, %r14d
    000000b4: 	cmpl	%esi, %r14d
    000000b7: 	jl	.Ltmp270 # Offset: 183
.Ltmp266:
    000000b9: 	callq	clock@PLT # Offset: 185
    000000be: 	pxor	%xmm0, %xmm0
    000000c2: 	movq	%r12, %rdi
    000000c5: 	movq	%rax, end_time(%rip)
    000000cc: 	subq	start_time(%rip), %rax
    000000d3: 	cvtsi2sd	%rax, %xmm0
    000000d8: 	divsd	DATAat0x7608(%rip), %xmm0
    000000e0: 	addq	$0x8, %rsp
    000000e4: 	popq	%rbx
    000000e5: 	popq	%rbp
    000000e6: 	popq	%r12
    000000e8: 	popq	%r13
    000000ea: 	popq	%r14
    000000ec: 	popq	%r15
    000000ee: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 238
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIj10swab_htonlEvPT_iPKc"

Binary Function "_Z13test_constantIj10swab_ntohlEvPT_iPKc" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0x5bc0
  Size        : 0xf3
  MaxSize     : 0x100
  Offset      : 0x5bc0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIj10swab_ntohlEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x8, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movl	iterations(%rip), %esi
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	testl	%esi, %esi
    0000002f: 	jle	.Ltmp271 # Offset: 47
    00000035: 	leal	-0x1(%r15), %eax
    00000039: 	movq	init_value(%rip), %rdi
    00000040: 	xorl	%r14d, %r14d
    00000043: 	leaq	DATAat0x75e5(%rip), %rbp
    0000004a: 	leaq	0x4(%rbx,%rax,4), %r13
    0000004f: 	nop # Size: 1
.Ltmp275:
    00000050: 	movq	%rbx, %rax
    00000053: 	xorl	%ecx, %ecx
    00000055: 	testl	%r15d, %r15d
    00000058: 	jle	.Ltmp272 # Offset: 88
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp273:
    00000060: 	movl	(%rax), %edx
    00000062: 	addq	$0x4, %rax
    00000066: 	bswapl	%edx
    00000068: 	addl	%edx, %ecx
    0000006a: 	cmpq	%rax, %r13
    0000006d: 	jne	.Ltmp273 # Offset: 109
.Ltmp272:
    0000006f: 	movl	%edi, %eax
    00000071: 	bswapl	%eax
    00000073: 	imull	$0x1f40, %eax, %eax
    00000079: 	cmpl	%ecx, %eax
    0000007b: 	je	.Ltmp274 # Offset: 123
    0000007d: 	movl	current_test(%rip), %edx
    00000083: 	movq	%rbp, %rsi
    00000086: 	movl	$0x1, %edi
    0000008b: 	xorl	%eax, %eax
    0000008d: 	addl	$0x1, %r14d
    00000091: 	callq	__printf_chk@PLT # Offset: 145
    00000096: 	movl	iterations(%rip), %esi
    0000009c: 	cmpl	%esi, %r14d
    0000009f: 	jge	.Ltmp271 # Offset: 159
    000000a1: 	movq	init_value(%rip), %rdi
    000000a8: 	jmp	.Ltmp275 # Offset: 168
    000000aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp274:
    000000b0: 	addl	$0x1, %r14d
    000000b4: 	cmpl	%esi, %r14d
    000000b7: 	jl	.Ltmp275 # Offset: 183
.Ltmp271:
    000000b9: 	callq	clock@PLT # Offset: 185
    000000be: 	pxor	%xmm0, %xmm0
    000000c2: 	movq	%r12, %rdi
    000000c5: 	movq	%rax, end_time(%rip)
    000000cc: 	subq	start_time(%rip), %rax
    000000d3: 	cvtsi2sd	%rax, %xmm0
    000000d8: 	divsd	DATAat0x7608(%rip), %xmm0
    000000e0: 	addq	$0x8, %rsp
    000000e4: 	popq	%rbx
    000000e5: 	popq	%rbp
    000000e6: 	popq	%r12
    000000e8: 	popq	%r13
    000000ea: 	popq	%r14
    000000ec: 	popq	%r15
    000000ee: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 238
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIj10swab_ntohlEvPT_iPKc"

Binary Function "_Z13test_constantIt10swab_htobeEvPT_iPKc" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0x5cc0
  Size        : 0x212
  MaxSize     : 0x220
  Offset      : 0x5cc0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIt10swab_htobeEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x18, %rsp
    00000017: 	movq	%rdx, 0x8(%rsp)
    0000001c: 	callq	clock@PLT # Offset: 28
    00000021: 	movl	iterations(%rip), %esi
    00000027: 	movq	%rax, start_time(%rip)
    0000002e: 	testl	%esi, %esi
    00000030: 	jle	.Ltmp276 # Offset: 48
    00000036: 	leal	-0x1(%rbx), %eax
    00000039: 	movl	%ebx, %ebp
    0000003b: 	movq	init_value(%rip), %rdi
    00000042: 	xorl	%r13d, %r13d
    00000045: 	movl	%eax, 0x4(%rsp)
    00000049: 	movl	%ebx, %eax
    0000004b: 	andl	$-0x8, %ebp
    0000004e: 	leaq	DATAat0x75e5(%rip), %r12
    00000055: 	shrl	$0x3, %eax
    00000058: 	subl	$0x1, %eax
    0000005b: 	shlq	$0x4, %rax
    0000005f: 	leaq	0x10(%r14,%rax), %r15
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp281:
    00000068: 	xorl	%eax, %eax
    0000006a: 	testl	%ebx, %ebx
    0000006c: 	jle	.Ltmp277 # Offset: 108
    00000072: 	cmpl	$0x6, 0x4(%rsp)
    00000077: 	jbe	.Ltmp278 # Offset: 119
    0000007d: 	movq	%r14, %rax
    00000080: 	pxor	%xmm2, %xmm2
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp279:
    00000088: 	movdqu	(%rax), %xmm0
    0000008c: 	addq	$0x10, %rax
    00000090: 	movdqa	%xmm0, %xmm1
    00000094: 	psrlw	$0x8, %xmm0
    00000099: 	psllw	$0x8, %xmm1
    0000009e: 	por	%xmm1, %xmm0
    000000a2: 	paddw	%xmm0, %xmm2
    000000a6: 	cmpq	%r15, %rax
    000000a9: 	jne	.Ltmp279 # Offset: 169
    000000ab: 	movdqa	%xmm2, %xmm0
    000000af: 	psrldq	$0x8, %xmm0
    000000b4: 	paddw	%xmm0, %xmm2
    000000b8: 	movdqa	%xmm2, %xmm0
    000000bc: 	psrldq	$0x4, %xmm0
    000000c1: 	paddw	%xmm0, %xmm2
    000000c5: 	movdqa	%xmm2, %xmm0
    000000c9: 	psrldq	$0x2, %xmm0
    000000ce: 	paddw	%xmm0, %xmm2
    000000d2: 	pextrw	$0x0, %xmm2, %eax
    000000d7: 	cmpl	%ebx, %ebp
    000000d9: 	je	.Ltmp277 # Offset: 217
    000000df: 	movl	%ebp, %edx
.Ltmp282:
    000000e1: 	movslq	%edx, %r10
    000000e4: 	leaq	(%r10,%r10), %r9
    000000e8: 	movzwl	(%r14,%r10,2), %r10d
    000000ed: 	rolw	$0x8, %r10w
    000000f2: 	addl	%r10d, %eax
    000000f5: 	leal	0x1(%rdx), %r10d
    000000f9: 	cmpl	%r10d, %ebx
    000000fc: 	jle	.Ltmp277 # Offset: 252
    000000fe: 	movzwl	0x2(%r14,%r9), %r10d
    00000104: 	rolw	$0x8, %r10w
    00000109: 	addl	%r10d, %eax
    0000010c: 	leal	0x2(%rdx), %r10d
    00000110: 	cmpl	%r10d, %ebx
    00000113: 	jle	.Ltmp277 # Offset: 275
    00000115: 	movzwl	0x4(%r14,%r9), %r10d
    0000011b: 	rolw	$0x8, %r10w
    00000120: 	addl	%r10d, %eax
    00000123: 	leal	0x3(%rdx), %r10d
    00000127: 	cmpl	%r10d, %ebx
    0000012a: 	jle	.Ltmp277 # Offset: 298
    0000012c: 	movzwl	0x6(%r14,%r9), %r10d
    00000132: 	rolw	$0x8, %r10w
    00000137: 	addl	%r10d, %eax
    0000013a: 	leal	0x4(%rdx), %r10d
    0000013e: 	cmpl	%r10d, %ebx
    00000141: 	jle	.Ltmp277 # Offset: 321
    00000143: 	movzwl	0x8(%r14,%r9), %r10d
    00000149: 	rolw	$0x8, %r10w
    0000014e: 	addl	%r10d, %eax
    00000151: 	leal	0x5(%rdx), %r10d
    00000155: 	cmpl	%r10d, %ebx
    00000158: 	jle	.Ltmp277 # Offset: 344
    0000015a: 	movzwl	0xa(%r14,%r9), %r10d
    00000160: 	addl	$0x6, %edx
    00000163: 	rolw	$0x8, %r10w
    00000168: 	addl	%r10d, %eax
    0000016b: 	cmpl	%edx, %ebx
    0000016d: 	jle	.Ltmp277 # Offset: 365
    0000016f: 	movzwl	0xc(%r14,%r9), %edx
    00000175: 	rolw	$0x8, %dx
    00000179: 	addl	%edx, %eax
.Ltmp277:
    0000017b: 	movl	%edi, %edx
    0000017d: 	rolw	$0x8, %dx
    00000181: 	imulw	$0x1f40, %dx, %dx
    00000186: 	cmpw	%ax, %dx
    00000189: 	je	.Ltmp280 # Offset: 393
    0000018b: 	movl	current_test(%rip), %edx
    00000191: 	movq	%r12, %rsi
    00000194: 	movl	$0x1, %edi
    00000199: 	xorl	%eax, %eax
    0000019b: 	addl	$0x1, %r13d
    0000019f: 	callq	__printf_chk@PLT # Offset: 415
    000001a4: 	movl	iterations(%rip), %esi
    000001aa: 	cmpl	%esi, %r13d
    000001ad: 	jge	.Ltmp276 # Offset: 429
    000001af: 	movq	init_value(%rip), %rdi
    000001b6: 	jmp	.Ltmp281 # Offset: 438
    000001bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp280:
    000001c0: 	addl	$0x1, %r13d
    000001c4: 	cmpl	%esi, %r13d
    000001c7: 	jl	.Ltmp281 # Offset: 455
.Ltmp276:
    000001cd: 	callq	clock@PLT # Offset: 461
    000001d2: 	pxor	%xmm0, %xmm0
    000001d6: 	movq	0x8(%rsp), %rdi
    000001db: 	movq	%rax, end_time(%rip)
    000001e2: 	subq	start_time(%rip), %rax
    000001e9: 	cvtsi2sd	%rax, %xmm0
    000001ee: 	divsd	DATAat0x7608(%rip), %xmm0
    000001f6: 	addq	$0x18, %rsp
    000001fa: 	popq	%rbx
    000001fb: 	popq	%rbp
    000001fc: 	popq	%r12
    000001fe: 	popq	%r13
    00000200: 	popq	%r14
    00000202: 	popq	%r15
    00000204: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 516
.Ltmp278:
    00000209: 	xorl	%edx, %edx
    0000020b: 	xorl	%eax, %eax
    0000020d: 	jmp	.Ltmp282 # Offset: 525
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIt10swab_htobeEvPT_iPKc"

Binary Function "_Z13test_constantIj10swab_htobeEvPT_iPKc" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0x5ee0
  Size        : 0xf3
  MaxSize     : 0x100
  Offset      : 0x5ee0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIj10swab_htobeEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x8, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movl	iterations(%rip), %esi
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	testl	%esi, %esi
    0000002f: 	jle	.Ltmp283 # Offset: 47
    00000035: 	leal	-0x1(%r15), %eax
    00000039: 	movq	init_value(%rip), %rdi
    00000040: 	xorl	%r14d, %r14d
    00000043: 	leaq	DATAat0x75e5(%rip), %rbp
    0000004a: 	leaq	0x4(%rbx,%rax,4), %r13
    0000004f: 	nop # Size: 1
.Ltmp287:
    00000050: 	movq	%rbx, %rax
    00000053: 	xorl	%ecx, %ecx
    00000055: 	testl	%r15d, %r15d
    00000058: 	jle	.Ltmp284 # Offset: 88
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp285:
    00000060: 	movl	(%rax), %edx
    00000062: 	addq	$0x4, %rax
    00000066: 	bswapl	%edx
    00000068: 	addl	%edx, %ecx
    0000006a: 	cmpq	%rax, %r13
    0000006d: 	jne	.Ltmp285 # Offset: 109
.Ltmp284:
    0000006f: 	movl	%edi, %eax
    00000071: 	bswapl	%eax
    00000073: 	imull	$0x1f40, %eax, %eax
    00000079: 	cmpl	%ecx, %eax
    0000007b: 	je	.Ltmp286 # Offset: 123
    0000007d: 	movl	current_test(%rip), %edx
    00000083: 	movq	%rbp, %rsi
    00000086: 	movl	$0x1, %edi
    0000008b: 	xorl	%eax, %eax
    0000008d: 	addl	$0x1, %r14d
    00000091: 	callq	__printf_chk@PLT # Offset: 145
    00000096: 	movl	iterations(%rip), %esi
    0000009c: 	cmpl	%esi, %r14d
    0000009f: 	jge	.Ltmp283 # Offset: 159
    000000a1: 	movq	init_value(%rip), %rdi
    000000a8: 	jmp	.Ltmp287 # Offset: 168
    000000aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp286:
    000000b0: 	addl	$0x1, %r14d
    000000b4: 	cmpl	%esi, %r14d
    000000b7: 	jl	.Ltmp287 # Offset: 183
.Ltmp283:
    000000b9: 	callq	clock@PLT # Offset: 185
    000000be: 	pxor	%xmm0, %xmm0
    000000c2: 	movq	%r12, %rdi
    000000c5: 	movq	%rax, end_time(%rip)
    000000cc: 	subq	start_time(%rip), %rax
    000000d3: 	cvtsi2sd	%rax, %xmm0
    000000d8: 	divsd	DATAat0x7608(%rip), %xmm0
    000000e0: 	addq	$0x8, %rsp
    000000e4: 	popq	%rbx
    000000e5: 	popq	%rbp
    000000e6: 	popq	%r12
    000000e8: 	popq	%r13
    000000ea: 	popq	%r14
    000000ec: 	popq	%r15
    000000ee: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 238
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIj10swab_htobeEvPT_iPKc"

Binary Function "_Z13test_constantIm10swab_htobeEvPT_iPKc" after disassembly {
  Number      : 50
  State       : disassembled
  Address     : 0x5fe0
  Size        : 0xfb
  MaxSize     : 0xfb
  Offset      : 0x5fe0
  Section     : .text
  Orc Section : .local.text._Z13test_constantIm10swab_htobeEvPT_iPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x8, %rsp
    0000001b: 	callq	clock@PLT # Offset: 27
    00000020: 	movl	iterations(%rip), %esi
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	testl	%esi, %esi
    0000002f: 	jle	.Ltmp288 # Offset: 47
    00000035: 	leal	-0x1(%r15), %eax
    00000039: 	movq	init_value(%rip), %rdi
    00000040: 	xorl	%r14d, %r14d
    00000043: 	leaq	DATAat0x75e5(%rip), %rbp
    0000004a: 	leaq	0x8(%rbx,%rax,8), %r13
    0000004f: 	nop # Size: 1
.Ltmp292:
    00000050: 	movq	%rbx, %rax
    00000053: 	xorl	%ecx, %ecx
    00000055: 	testl	%r15d, %r15d
    00000058: 	jle	.Ltmp289 # Offset: 88
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp290:
    00000060: 	movq	(%rax), %rdx
    00000063: 	addq	$0x8, %rax
    00000067: 	bswapq	%rdx
    0000006a: 	addq	%rdx, %rcx
    0000006d: 	cmpq	%rax, %r13
    00000070: 	jne	.Ltmp290 # Offset: 112
.Ltmp289:
    00000072: 	movq	%rdi, %rax
    00000075: 	bswapq	%rax
    00000078: 	imulq	$0x1f40, %rax, %rax
    0000007f: 	cmpq	%rcx, %rax
    00000082: 	je	.Ltmp291 # Offset: 130
    00000084: 	movl	current_test(%rip), %edx
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movl	$0x1, %edi
    00000092: 	xorl	%eax, %eax
    00000094: 	addl	$0x1, %r14d
    00000098: 	callq	__printf_chk@PLT # Offset: 152
    0000009d: 	movl	iterations(%rip), %esi
    000000a3: 	cmpl	%esi, %r14d
    000000a6: 	jge	.Ltmp288 # Offset: 166
    000000a8: 	movq	init_value(%rip), %rdi
    000000af: 	jmp	.Ltmp292 # Offset: 175
    000000b1: 	nopl	(%rax) # Size: 7
.Ltmp291:
    000000b8: 	addl	$0x1, %r14d
    000000bc: 	cmpl	%esi, %r14d
    000000bf: 	jl	.Ltmp292 # Offset: 191
.Ltmp288:
    000000c1: 	callq	clock@PLT # Offset: 193
    000000c6: 	pxor	%xmm0, %xmm0
    000000ca: 	movq	%r12, %rdi
    000000cd: 	movq	%rax, end_time(%rip)
    000000d4: 	subq	start_time(%rip), %rax
    000000db: 	cvtsi2sd	%rax, %xmm0
    000000e0: 	divsd	DATAat0x7608(%rip), %xmm0
    000000e8: 	addq	$0x8, %rsp
    000000ec: 	popq	%rbx
    000000ed: 	popq	%rbp
    000000ee: 	popq	%r12
    000000f0: 	popq	%r13
    000000f2: 	popq	%r14
    000000f4: 	popq	%r15
    000000f6: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 246
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_constantIm10swab_htobeEvPT_iPKc"

Binary Function "_fini" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0x60dc
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x60dc
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 52 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 183 instructions were shortened
BOLT-INFO: removed 76 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 49 out of 62 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x201d54
