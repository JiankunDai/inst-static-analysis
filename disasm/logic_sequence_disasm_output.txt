BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0x3b030, which lies outside .bss
BOLT-WARNING: split function detected on input : _GLOBAL__sub_I_results.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x3aff0(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 3
  State       : disassembled
  Address     : 0x1410
  Size        : 0x131
  MaxSize     : 0x140
  Offset      : 0x1410
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB02:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	pushq	%rbx
    0000000c: 	testl	%edi, %edi
    0000000e: 	jle	.Ltmp1 # Offset: 14
    00000014: 	leal	-0x1(%rdi), %eax
    00000017: 	movl	%edi, %r13d
    0000001a: 	movq	%rsi, %r14
    0000001d: 	movq	%rsi, %rbx
    00000020: 	leaq	0x8(%rsi,%rax,8), %r12
    00000025: 	leaq	DATAat0x33042(%rip), %rbp
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp2:
    00000030: 	movq	(%rbx), %rdx
    00000033: 	movq	%rbp, %rsi
    00000036: 	movl	$0x1, %edi
    0000003b: 	xorl	%eax, %eax
    0000003d: 	addq	$0x8, %rbx
    00000041: 	callq	__printf_chk@PLT # Offset: 65
    00000046: 	cmpq	%rbx, %r12
    00000049: 	jne	.Ltmp2 # Offset: 73
    0000004b: 	xorl	%eax, %eax
    0000004d: 	leaq	DATAat0x33028(%rip), %rsi
    00000054: 	movl	$0x1, %edi
    00000059: 	callq	__printf_chk@PLT # Offset: 89
    0000005e: 	cmpl	$0x1, %r13d
    00000062: 	jg	.Ltmp3 # Offset: 98
.Ltmp4:
    00000064: 	movl	iterations(%rip), %eax
    0000006a: 	addl	$0x1, %eax
    0000006d: 	andl	$-0x2, %eax
    00000070: 	movl	%eax, iterations(%rip)
    00000076: 	callq	_Z11TestOneTypeIhEvv # Offset: 118
    0000007b: 	callq	_Z11TestOneTypeIaEvv # Offset: 123
    00000080: 	callq	_Z11TestOneTypeItEvv # Offset: 128
    00000085: 	callq	_Z11TestOneTypeIsEvv # Offset: 133
    0000008a: 	movl	iterations(%rip), %edx
    00000090: 	testl	%edx, %edx
    00000092: 	leal	0x3(%rdx), %eax
    00000095: 	cmovnsl	%edx, %eax
    00000098: 	sarl	$0x2, %eax
    0000009b: 	addl	$0x1, %eax
    0000009e: 	andl	$-0x2, %eax
    000000a1: 	movl	%eax, iterations(%rip)
    000000a7: 	callq	_Z11TestOneTypeIjEvv # Offset: 167
    000000ac: 	callq	_Z11TestOneTypeIiEvv # Offset: 172
    000000b1: 	movl	iterations(%rip), %edx
    000000b7: 	movl	%edx, %eax
    000000b9: 	shrl	$0x1f, %eax
    000000bc: 	addl	%edx, %eax
    000000be: 	sarl	%eax
    000000c0: 	addl	$0x1, %eax
    000000c3: 	andl	$-0x2, %eax
    000000c6: 	movl	%eax, iterations(%rip)
    000000cc: 	callq	_Z11TestOneTypeImEvv # Offset: 204
    000000d1: 	callq	_Z11TestOneTypeIlEvv # Offset: 209
    000000d6: 	popq	%rbx
    000000d7: 	xorl	%eax, %eax
    000000d9: 	popq	%rbp
    000000da: 	popq	%r12
    000000dc: 	popq	%r13
    000000de: 	popq	%r14
    000000e0: 	retq # Offset: 224
.Ltmp3:
    000000e1: 	movq	0x8(%r14), %rdi
    000000e5: 	movl	$0xa, %edx
    000000ea: 	xorl	%esi, %esi
    000000ec: 	callq	strtol@PLT # Offset: 236
    000000f1: 	movl	%eax, iterations(%rip)
    000000f7: 	cmpl	$0x2, %r13d
    000000fb: 	jle	.Ltmp4 # Offset: 251
    00000101: 	movq	0x10(%r14), %rdi
    00000105: 	xorl	%esi, %esi
    00000107: 	callq	strtod@PLT # Offset: 263
    0000010c: 	movsd	%xmm0, init_value(%rip)
    00000114: 	jmp	.Ltmp4 # Offset: 276
.Ltmp1:
    00000119: 	leaq	DATAat0x33028(%rip), %rsi
    00000120: 	movl	$0x1, %edi
    00000125: 	xorl	%eax, %eax
    00000127: 	callq	__printf_chk@PLT # Offset: 295
    0000012c: 	jmp	.Ltmp4 # Offset: 300
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 5
  State       : disassembled
  Address     : 0x1630
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x1630
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x3afe0(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x1660
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x1660
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp5 # Offset: 17
    00000013: 	movq	DATAat0x3afe8(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp5 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp5:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x1690
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1690
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp6 # Offset: 34
    00000024: 	movq	DATAat0x3aff8(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp6 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x16d0
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x16d0
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp7 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp8 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp8:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp7:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 9
  State       : disassembled
  Address     : 0x1710
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x1710
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_Z9summarizePKciiii.constprop.0/1(*2)" after disassembly {
  All names   : _Z9summarizePKciiii.constprop.0/1
                _Z9summarizePKciiii.constprop.0/logic_sequence.cpp/1
  Number      : 10
  State       : disassembled
  Address     : 0x1720
  Size        : 0x25e
  MaxSize     : 0x260
  Offset      : 0x1720
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x28, %rsp
    0000000e: 	movl	current_test(%rip), %eax
    00000014: 	testl	%eax, %eax
    00000016: 	je	.Ltmp9 # Offset: 22
    0000001c: 	movq	%rdi, %r12
    0000001f: 	movl	%esi, %r13d
    00000022: 	jle	.Ltmp10 # Offset: 34
    00000028: 	movq	results(%rip), %rdx
    0000002f: 	subl	$0x1, %eax
    00000032: 	movl	$0xc, %ebx
    00000037: 	shlq	$0x4, %rax
    0000003b: 	leaq	0x8(%rdx), %r14
    0000003f: 	leaq	0x18(%rdx,%rax), %rbp
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp11:
    00000048: 	movq	(%r14), %rdi
    0000004b: 	callq	strlen@PLT # Offset: 75
    00000050: 	cmpl	%eax, %ebx
    00000052: 	cmovll	%eax, %ebx
    00000055: 	addq	$0x10, %r14
    00000059: 	cmpq	%r14, %rbp
    0000005c: 	jne	.Ltmp11 # Offset: 92
    0000005e: 	leal	-0xc(%rbx), %edx
.Ltmp21:
    00000061: 	leaq	DATAat0x33044(%rip), %r14
    00000068: 	leaq	DATAat0x33048(%rip), %rsi
    0000006f: 	movl	$0x1, %edi
    00000074: 	xorl	%eax, %eax
    00000076: 	movq	%r14, %rcx
    00000079: 	callq	__printf_chk@PLT # Offset: 121
    0000007e: 	movq	%r14, %rcx
    00000081: 	movl	%ebx, %edx
    00000083: 	movl	$0x1, %edi
    00000088: 	leaq	DATAat0x33088(%rip), %rsi
    0000008f: 	xorl	%eax, %eax
    00000091: 	callq	__printf_chk@PLT # Offset: 145
    00000096: 	movl	current_test(%rip), %eax
    0000009c: 	testl	%eax, %eax
    0000009e: 	jle	.Ltmp12 # Offset: 158
    000000a4: 	pxor	%xmm0, %xmm0
    000000a8: 	movsd	DATAat0x335b8(%rip), %xmm3
    000000b0: 	leaq	DATAat0x330b8(%rip), %rbp
    000000b7: 	cvtsi2sd	%r13d, %xmm0
    000000bc: 	mulsd	DATAat0x335a8(%rip), %xmm0
    000000c4: 	xorl	%r13d, %r13d
    000000c7: 	divsd	DATAat0x335b0(%rip), %xmm0
    000000cf: 	movsd	%xmm0, 0x18(%rsp)
    000000d5: 	jmp	.Ltmp13 # Offset: 213
    000000da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp17:
    000000e0: 	comisd	%xmm0, %xmm3
    000000e4: 	ja	.Ltmp14 # Offset: 228
    000000ea: 	movq	DATAat0x33598(%rip), %rdi
    000000f1: 	movq	%rdi, %xmm2
.Ltmp18:
    000000f6: 	comisd	%xmm0, %xmm3
    000000fa: 	movq	DATAat0x33598(%rip), %rsi
    00000101: 	movq	%rsi, %xmm1
    00000106: 	ja	.Ltmp15 # Offset: 262
    00000108: 	movsd	0x18(%rsp), %xmm1
    0000010e: 	divsd	%xmm0, %xmm1
.Ltmp15:
    00000112: 	movq	0x8(%rax), %r14
    00000116: 	movsd	%xmm0, 0x10(%rsp)
    0000011c: 	addq	$0x1, %r13
    00000120: 	movsd	%xmm1, 0x8(%rsp)
    00000126: 	movq	%r14, %rdi
    00000129: 	movsd	%xmm2, (%rsp)
    0000012e: 	callq	strlen@PLT # Offset: 302
    00000133: 	movsd	(%rsp), %xmm2
    00000138: 	movl	%ebx, %ecx
    0000013a: 	movq	%rbp, %rsi
    0000013d: 	movsd	0x8(%rsp), %xmm1
    00000143: 	subl	%eax, %ecx
    00000145: 	movq	%r14, %r9
    00000148: 	movl	%r15d, %edx
    0000014b: 	movsd	0x10(%rsp), %xmm0
    00000151: 	movl	$0x1, %edi
    00000156: 	movl	$0x3, %eax
    0000015b: 	leaq	DATAat0x33029(%rip), %r8
    00000162: 	callq	__printf_chk@PLT # Offset: 354
    00000167: 	movl	current_test(%rip), %eax
    0000016d: 	movq	DATAat0x335b8(%rip), %rsi
    00000174: 	cmpl	%r13d, %eax
    00000177: 	movq	%rsi, %xmm3
    0000017c: 	jle	.Ltmp16 # Offset: 380
.Ltmp13:
    0000017e: 	movq	results(%rip), %rax
    00000185: 	movq	%r13, %rdx
    00000188: 	movl	%r13d, %r15d
    0000018b: 	shlq	$0x4, %rdx
    0000018f: 	movsd	(%rax), %xmm1
    00000193: 	addq	%rdx, %rax
    00000196: 	movsd	(%rax), %xmm0
    0000019a: 	comisd	%xmm1, %xmm3
    0000019e: 	ja	.Ltmp17 # Offset: 414
    000001a4: 	movapd	%xmm0, %xmm2
    000001a8: 	divsd	%xmm1, %xmm2
    000001ac: 	jmp	.Ltmp18 # Offset: 428
    000001b1: 	nopl	(%rax) # Size: 7
.Ltmp14:
    000001b8: 	movq	DATAat0x335a0(%rip), %rsi
    000001bf: 	movq	DATAat0x33598(%rip), %rdi
    000001c6: 	movq	%rsi, %xmm2
    000001cb: 	movq	%rdi, %xmm1
    000001d0: 	jmp	.Ltmp15 # Offset: 464
    000001d5: 	nopl	(%rax) # Size: 3
.Ltmp16:
    000001d8: 	testl	%eax, %eax
    000001da: 	jle	.Ltmp12 # Offset: 474
    000001dc: 	movq	results(%rip), %rdx
    000001e3: 	leal	-0x1(%rax), %ecx
    000001e6: 	pxor	%xmm0, %xmm0
    000001ea: 	shlq	$0x4, %rcx
    000001ee: 	leaq	0x10(%rdx), %rax
    000001f2: 	addq	%rax, %rcx
    000001f5: 	jmp	.Ltmp19 # Offset: 501
    000001f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp20:
    00000200: 	addq	$0x10, %rax
.Ltmp19:
    00000204: 	addsd	(%rdx), %xmm0
    00000208: 	movq	%rax, %rdx
    0000020b: 	cmpq	%rax, %rcx
    0000020e: 	jne	.Ltmp20 # Offset: 526
.Ltmp22:
    00000210: 	movq	%r12, %rdx
    00000213: 	movl	$0x1, %edi
    00000218: 	movl	$0x1, %eax
    0000021d: 	leaq	DATAat0x330e8(%rip), %rsi
    00000224: 	callq	__printf_chk@PLT # Offset: 548
    00000229: 	movl	$0x0, current_test(%rip)
.Ltmp9:
    00000233: 	addq	$0x28, %rsp
    00000237: 	popq	%rbx
    00000238: 	popq	%rbp
    00000239: 	popq	%r12
    0000023b: 	popq	%r13
    0000023d: 	popq	%r14
    0000023f: 	popq	%r15
    00000241: 	retq # Offset: 577
    00000242: 	nopw	(%rax,%rax) # Size: 6
.Ltmp10:
    00000248: 	xorl	%edx, %edx
    0000024a: 	movl	$0xc, %ebx
    0000024f: 	jmp	.Ltmp21 # Offset: 591
    00000254: 	nopl	(%rax) # Size: 4
.Ltmp12:
    00000258: 	pxor	%xmm0, %xmm0
    0000025c: 	jmp	.Ltmp22 # Offset: 604
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii.constprop.0/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 11
  State       : disassembled
  Address     : 0x1980
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x1980
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp23 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp24 # Offset: 38
.Ltmp23:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp25 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp24:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp25:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x33110(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x1a20
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x1a20
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp26 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp27 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp28:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp28 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp41:
    00000069: 	leaq	DATAat0x33044(%rip), %rbp
    00000070: 	leaq	DATAat0x33048(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x33088(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp29 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x335b8(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x330b8(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x335b0(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp30 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp34:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp31 # Offset: 244
    000000fa: 	movq	DATAat0x33598(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp35:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x33598(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp32 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp32:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x33029(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x335b8(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp33 # Offset: 398
.Ltmp30:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp34 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp35 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp31:
    000001c8: 	movq	DATAat0x335a0(%rip), %rsi
    000001cf: 	movq	DATAat0x33598(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp32 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp33:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp29 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp36 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp37:
    00000210: 	addq	$0x10, %rax
.Ltmp36:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp37 # Offset: 542
.Ltmp42:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x330e8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp38 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp39 # Offset: 592
.Ltmp38:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp26:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp39:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp40:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp40 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x33004(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp26 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp27:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp41 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp29:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp42 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x1d50
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x1d50
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp43 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp44 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp45:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp45 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp50:
    0000006a: 	leaq	DATAat0x33044(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x33130(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x3302a(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x33044(%rip), %r8
    000000a1: 	leaq	DATAat0x33018(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp46 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp47:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x33029(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp47 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp46 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp48 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp49:
    00000140: 	addq	$0x10, %rax
.Ltmp48:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp49 # Offset: 334
.Ltmp51:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x330e8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp43:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp44:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp50 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp46:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp51 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x1f00
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x1f00
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x1f20
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x1f20
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x335b0(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark6scrandEm" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x1f60
  Size        : 0xc
  MaxSize     : 0x10
  Offset      : 0x1f60
  Section     : .text
  Orc Section : .local.text._ZN9benchmark6scrandEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	movq	%rdi, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000000b: 	retq # Offset: 11
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark6scrandEm"

Binary Function "_ZN9benchmark7crand64Ev" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x1f70
  Size        : 0x42
  MaxSize     : 0x50
  Offset      : 0x1f70
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand64Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rdx
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rax
    00000015: 	imulq	%rax, %rdx
    00000019: 	movabsq	$0x14057b7ef767814f, %rax
    00000023: 	addq	%rax, %rdx
    00000026: 	movq	%rdx, %rax
    00000029: 	movq	%rdx, %rcx
    0000002c: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rax
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rax
    0000003e: 	xorq	%rdx, %rax
    00000041: 	retq # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand64Ev"

Binary Function "_ZN9benchmark7crand32Ev" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x1fc0
  Size        : 0x41
  MaxSize     : 0x50
  Offset      : 0x1fc0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand32Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rdx
    00000015: 	imulq	%rdx, %rax
    00000019: 	movabsq	$0x14057b7ef767814f, %rdx
    00000023: 	addq	%rdx, %rax
    00000026: 	movq	%rax, %rdx
    00000029: 	movq	%rax, %rcx
    0000002c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rdx
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rdx
    0000003e: 	xorl	%edx, %eax
    00000040: 	retq # Offset: 64
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand32Ev"

Binary Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x2010
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2010
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f38, %edx
    00000017: 	movl	$0x746e6975, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x2040
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2040
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3631746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x2070
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2070
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3233746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x20a0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x20a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3436746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x20d0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x20d0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x2100
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2100
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x2130
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2130
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f36, %edx
    00000017: 	movl	$0x31746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x2160
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2160
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f32, %edx
    00000017: 	movl	$0x33746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x2190
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2190
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f34, %edx
    00000017: 	movl	$0x36746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x21c0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x21c0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x14(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x616f6c66, 0x10(%rdi)
    00000019: 	movq	$0x5, 0x8(%rdi)
    00000021: 	movb	$0x0, 0x15(%rdi)
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x21f0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x21f0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x62756f64, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x656c, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x2220
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0x2220
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x65, 0x1a(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movl	$0x6c62, %edx
    00000021: 	movq	%rcx, 0x10(%rdi)
    00000025: 	movw	%dx, 0x18(%rdi)
    00000029: 	movq	$0xb, 0x8(%rdi)
    00000031: 	movb	$0x0, 0x1b(%rdi)
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x2260
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2260
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f38746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x2290
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x2290
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3631746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x22c0
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x22c0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3233746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x22f0
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x22f0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3436746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x2320
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2320
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x745f, %edx
    00000017: 	movl	$0x38746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x2350
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2350
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3631746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x2380
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2380
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3233746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x23b0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x23b0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3436746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x23e0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x23e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x616f6c66, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x2a74, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x2410
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2410
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x656c, %edx
    00000017: 	movl	$0x62756f64, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x2440
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x2440
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x0, 0x1c(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movl	$0x2a656c62, 0x18(%rdi)
    00000027: 	movq	$0xc, 0x8(%rdi)
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_Z8bit_and1IhET_PKS0_iS0_" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x2470
  Size        : 0x1c1
  MaxSize     : 0x1d0
  Offset      : 0x2470
  Section     : .text
  Orc Section : .local.text._Z8bit_and1IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp52 # Offset: 6
    0000000c: 	leal	-0x1(%rsi), %eax
    0000000f: 	cmpl	$0xe, %eax
    00000012: 	jbe	.Ltmp53 # Offset: 18
    00000018: 	movl	%esi, %eax
    0000001a: 	movq	%rdi, %rcx
    0000001d: 	pcmpeqd	%xmm0, %xmm0
    00000021: 	shrl	$0x4, %eax
    00000024: 	subl	$0x1, %eax
    00000027: 	shlq	$0x4, %rax
    0000002b: 	leaq	0x10(%rdi,%rax), %r8
.Ltmp54:
    00000030: 	movdqu	(%rcx), %xmm2
    00000034: 	addq	$0x10, %rcx
    00000038: 	pand	%xmm2, %xmm0
    0000003c: 	cmpq	%rcx, %r8
    0000003f: 	jne	.Ltmp54 # Offset: 63
    00000041: 	movdqa	%xmm0, %xmm1
    00000045: 	movl	%esi, %eax
    00000047: 	psrldq	$0x8, %xmm1
    0000004c: 	andl	$-0x10, %eax
    0000004f: 	pand	%xmm1, %xmm0
    00000053: 	movl	%eax, %r8d
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	pand	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	pand	%xmm1, %xmm0
    00000070: 	movdqa	%xmm0, %xmm1
    00000074: 	psrldq	$0x1, %xmm1
    00000079: 	pand	%xmm1, %xmm0
    0000007d: 	movd	%xmm0, %ecx
    00000081: 	andl	%edx, %ecx
    00000083: 	cmpl	%eax, %esi
    00000085: 	je	.Ltmp55 # Offset: 133
.Ltmp58:
    0000008b: 	movl	%esi, %r9d
    0000008e: 	subl	%eax, %r9d
    00000091: 	leal	-0x1(%r9), %edx
    00000095: 	cmpl	$0x6, %edx
    00000098: 	jbe	.Ltmp56 # Offset: 152
    0000009e: 	movq	(%rdi,%rax), %rdx
    000000a2: 	pushq	%rbx
    000000a3: 	movl	%edx, %eax
    000000a5: 	movzbl	%dh, %ebx
    000000a8: 	andl	%ebx, %eax
    000000aa: 	andl	%ecx, %eax
    000000ac: 	movq	%rdx, %rcx
    000000af: 	shrq	$0x10, %rcx
    000000b3: 	andl	%ecx, %eax
    000000b5: 	movq	%rdx, %rcx
    000000b8: 	shrq	$0x18, %rcx
    000000bc: 	andl	%ecx, %eax
    000000be: 	movq	%rdx, %rcx
    000000c1: 	shrq	$0x20, %rcx
    000000c5: 	andl	%ecx, %eax
    000000c7: 	movq	%rdx, %rcx
    000000ca: 	shrq	$0x28, %rcx
    000000ce: 	andl	%ecx, %eax
    000000d0: 	movq	%rdx, %rcx
    000000d3: 	shrq	$0x38, %rdx
    000000d7: 	shrq	$0x30, %rcx
    000000db: 	andl	%ecx, %eax
    000000dd: 	andl	%edx, %eax
    000000df: 	movl	%r9d, %edx
    000000e2: 	andl	$-0x8, %edx
    000000e5: 	addl	%edx, %r8d
    000000e8: 	cmpl	%edx, %r9d
    000000eb: 	je	.Ltmp57 # Offset: 235
    000000ed: 	movslq	%r8d, %rdx
    000000f0: 	andb	(%rdi,%rdx), %al
    000000f3: 	leal	0x1(%r8), %edx
    000000f7: 	cmpl	%edx, %esi
    000000f9: 	jle	.Ltmp57 # Offset: 249
    000000fb: 	movslq	%edx, %rdx
    000000fe: 	andb	(%rdi,%rdx), %al
    00000101: 	leal	0x2(%r8), %edx
    00000105: 	cmpl	%esi, %edx
    00000107: 	jge	.Ltmp57 # Offset: 263
    00000109: 	movslq	%edx, %rdx
    0000010c: 	andb	(%rdi,%rdx), %al
    0000010f: 	leal	0x3(%r8), %edx
    00000113: 	cmpl	%edx, %esi
    00000115: 	jle	.Ltmp57 # Offset: 277
    00000117: 	movslq	%edx, %rdx
    0000011a: 	andb	(%rdi,%rdx), %al
    0000011d: 	leal	0x4(%r8), %edx
    00000121: 	cmpl	%edx, %esi
    00000123: 	jle	.Ltmp57 # Offset: 291
    00000125: 	movslq	%edx, %rdx
    00000128: 	andb	(%rdi,%rdx), %al
    0000012b: 	leal	0x5(%r8), %edx
    0000012f: 	cmpl	%edx, %esi
    00000131: 	jle	.Ltmp57 # Offset: 305
    00000133: 	movslq	%edx, %rdx
    00000136: 	addl	$0x6, %r8d
    0000013a: 	andb	(%rdi,%rdx), %al
    0000013d: 	cmpl	%r8d, %esi
    00000140: 	jle	.Ltmp57 # Offset: 320
    00000142: 	movslq	%r8d, %r8
    00000145: 	andb	(%rdi,%r8), %al
.Ltmp57:
    00000149: 	popq	%rbx
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp52:
    00000150: 	movl	%edx, %eax
    00000152: 	retq # Offset: 338
.Ltmp53:
    00000153: 	movl	%edx, %ecx
    00000155: 	xorl	%eax, %eax
    00000157: 	xorl	%r8d, %r8d
    0000015a: 	jmp	.Ltmp58 # Offset: 346
.Ltmp56:
    0000015f: 	movslq	%r8d, %rdx
    00000162: 	movl	%ecx, %eax
    00000164: 	andb	(%rdi,%rdx), %al
    00000167: 	leal	0x1(%r8), %edx
    0000016b: 	cmpl	%edx, %esi
    0000016d: 	jle	.Ltmp59 # Offset: 365
    0000016f: 	movslq	%edx, %rdx
    00000172: 	andb	(%rdi,%rdx), %al
    00000175: 	leal	0x2(%r8), %edx
    00000179: 	cmpl	%esi, %edx
    0000017b: 	jge	.Ltmp59 # Offset: 379
    0000017d: 	movslq	%edx, %rdx
    00000180: 	andb	(%rdi,%rdx), %al
    00000183: 	leal	0x3(%r8), %edx
    00000187: 	cmpl	%edx, %esi
    00000189: 	jle	.Ltmp59 # Offset: 393
    0000018b: 	movslq	%edx, %rdx
    0000018e: 	andb	(%rdi,%rdx), %al
    00000191: 	leal	0x4(%r8), %edx
    00000195: 	cmpl	%edx, %esi
    00000197: 	jle	.Ltmp59 # Offset: 407
    00000199: 	movslq	%edx, %rdx
    0000019c: 	andb	(%rdi,%rdx), %al
    0000019f: 	leal	0x5(%r8), %edx
    000001a3: 	cmpl	%edx, %esi
    000001a5: 	jle	.Ltmp59 # Offset: 421
    000001a7: 	movslq	%edx, %rdx
    000001aa: 	addl	$0x6, %r8d
    000001ae: 	andb	(%rdi,%rdx), %al
    000001b1: 	cmpl	%r8d, %esi
    000001b4: 	jle	.Ltmp59 # Offset: 436
    000001b6: 	movslq	%r8d, %r8
    000001b9: 	andb	(%rdi,%r8), %al
.Ltmp59:
    000001bd: 	retq # Offset: 445
.Ltmp55:
    000001be: 	movl	%ecx, %eax
    000001c0: 	retq # Offset: 448
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and1IhET_PKS0_iS0_"

Binary Function "_Z8bit_and2IhET_PKS0_iS0_" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0x2640
  Size        : 0x1b7
  MaxSize     : 0x1c0
  Offset      : 0x2640
  Section     : .text
  Orc Section : .local.text._Z8bit_and2IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movq	%rdi, %r9
    0000000a: 	addq	%rsi, %rdi
    0000000d: 	cmpq	%rdi, %r9
    00000010: 	je	.Ltmp60 # Offset: 16
    00000016: 	leaq	-0x1(%rsi), %r8
    0000001a: 	movq	%r9, %rax
    0000001d: 	cmpq	$0xe, %r8
    00000021: 	jbe	.Ltmp61 # Offset: 33
    00000027: 	movq	%rsi, %rcx
    0000002a: 	pcmpeqd	%xmm0, %xmm0
    0000002e: 	andq	$-0x10, %rcx
    00000032: 	addq	%r9, %rcx
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp62:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	pand	%xmm2, %xmm0
    00000044: 	cmpq	%rcx, %rax
    00000047: 	jne	.Ltmp62 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movq	%rsi, %rax
    00000050: 	psrldq	$0x8, %xmm1
    00000055: 	andq	$-0x10, %rax
    00000059: 	pand	%xmm1, %xmm0
    0000005d: 	leaq	(%r9,%rax), %r8
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	psrldq	$0x4, %xmm1
    0000006a: 	pand	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x2, %xmm1
    00000077: 	pand	%xmm1, %xmm0
    0000007b: 	movdqa	%xmm0, %xmm1
    0000007f: 	psrldq	$0x1, %xmm1
    00000084: 	pand	%xmm1, %xmm0
    00000088: 	movd	%xmm0, %ecx
    0000008c: 	andl	%edx, %ecx
    0000008e: 	cmpq	%rax, %rsi
    00000091: 	je	.Ltmp63 # Offset: 145
.Ltmp66:
    00000097: 	subq	%rax, %rsi
    0000009a: 	leaq	-0x1(%rsi), %rdx
    0000009e: 	cmpq	$0x6, %rdx
    000000a2: 	jbe	.Ltmp64 # Offset: 162
    000000a8: 	movq	(%r9,%rax), %rdx
    000000ac: 	pushq	%rbx
    000000ad: 	movl	%edx, %eax
    000000af: 	movzbl	%dh, %ebx
    000000b2: 	andl	%ebx, %eax
    000000b4: 	andl	%ecx, %eax
    000000b6: 	movq	%rdx, %rcx
    000000b9: 	shrq	$0x10, %rcx
    000000bd: 	andl	%ecx, %eax
    000000bf: 	movq	%rdx, %rcx
    000000c2: 	shrq	$0x18, %rcx
    000000c6: 	andl	%ecx, %eax
    000000c8: 	movq	%rdx, %rcx
    000000cb: 	shrq	$0x20, %rcx
    000000cf: 	andl	%ecx, %eax
    000000d1: 	movq	%rdx, %rcx
    000000d4: 	shrq	$0x28, %rcx
    000000d8: 	andl	%ecx, %eax
    000000da: 	movq	%rdx, %rcx
    000000dd: 	shrq	$0x38, %rdx
    000000e1: 	shrq	$0x30, %rcx
    000000e5: 	andl	%ecx, %eax
    000000e7: 	andl	%edx, %eax
    000000e9: 	movq	%rsi, %rdx
    000000ec: 	andq	$-0x8, %rdx
    000000f0: 	addq	%rdx, %r8
    000000f3: 	cmpq	%rdx, %rsi
    000000f6: 	je	.Ltmp65 # Offset: 246
    000000f8: 	leaq	0x1(%r8), %rdx
    000000fc: 	andb	(%r8), %al
    000000ff: 	cmpq	%rdx, %rdi
    00000102: 	je	.Ltmp65 # Offset: 258
    00000104: 	leaq	0x2(%r8), %rdx
    00000108: 	andb	0x1(%r8), %al
    0000010c: 	cmpq	%rdx, %rdi
    0000010f: 	je	.Ltmp65 # Offset: 271
    00000111: 	leaq	0x3(%r8), %rdx
    00000115: 	andb	0x2(%r8), %al
    00000119: 	cmpq	%rdx, %rdi
    0000011c: 	je	.Ltmp65 # Offset: 284
    0000011e: 	leaq	0x4(%r8), %rdx
    00000122: 	andb	0x3(%r8), %al
    00000126: 	cmpq	%rdx, %rdi
    00000129: 	je	.Ltmp65 # Offset: 297
    0000012b: 	leaq	0x5(%r8), %rdx
    0000012f: 	andb	0x4(%r8), %al
    00000133: 	cmpq	%rdx, %rdi
    00000136: 	je	.Ltmp65 # Offset: 310
    00000138: 	leaq	0x6(%r8), %rdx
    0000013c: 	andb	0x5(%r8), %al
    00000140: 	cmpq	%rdx, %rdi
    00000143: 	je	.Ltmp65 # Offset: 323
    00000145: 	andb	0x6(%r8), %al
.Ltmp65:
    00000149: 	popq	%rbx
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp60:
    00000150: 	movl	%edx, %eax
    00000152: 	retq # Offset: 338
.Ltmp61:
    00000153: 	movl	%edx, %ecx
    00000155: 	movq	%r9, %r8
    00000158: 	xorl	%eax, %eax
    0000015a: 	jmp	.Ltmp66 # Offset: 346
.Ltmp64:
    0000015f: 	movzbl	(%r8), %eax
    00000163: 	leaq	0x1(%r8), %rdx
    00000167: 	andl	%ecx, %eax
    00000169: 	cmpq	%rdx, %rdi
    0000016c: 	je	.Ltmp67 # Offset: 364
    0000016e: 	leaq	0x2(%r8), %rdx
    00000172: 	andb	0x1(%r8), %al
    00000176: 	cmpq	%rdx, %rdi
    00000179: 	je	.Ltmp67 # Offset: 377
    0000017b: 	leaq	0x3(%r8), %rdx
    0000017f: 	andb	0x2(%r8), %al
    00000183: 	cmpq	%rdx, %rdi
    00000186: 	je	.Ltmp67 # Offset: 390
    00000188: 	leaq	0x4(%r8), %rdx
    0000018c: 	andb	0x3(%r8), %al
    00000190: 	cmpq	%rdx, %rdi
    00000193: 	je	.Ltmp67 # Offset: 403
    00000195: 	leaq	0x5(%r8), %rdx
    00000199: 	andb	0x4(%r8), %al
    0000019d: 	cmpq	%rdx, %rdi
    000001a0: 	je	.Ltmp67 # Offset: 416
    000001a2: 	leaq	0x6(%r8), %rdx
    000001a6: 	andb	0x5(%r8), %al
    000001aa: 	cmpq	%rdx, %rdi
    000001ad: 	je	.Ltmp67 # Offset: 429
    000001af: 	andb	0x6(%r8), %al
.Ltmp67:
    000001b3: 	retq # Offset: 435
.Ltmp63:
    000001b4: 	movl	%ecx, %eax
    000001b6: 	retq # Offset: 438
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and2IhET_PKS0_iS0_"

Binary Function "_Z8bit_and3IhET_PKS0_iS0_" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0x2800
  Size        : 0x2bb
  MaxSize     : 0x2c0
  Offset      : 0x2800
  Section     : .text
  Orc Section : .local.text._Z8bit_and3IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	leal	-0x1(%rsi), %edi
    0000000a: 	movl	%esi, %r8d
    0000000d: 	movl	%edx, %eax
    0000000f: 	testl	%edi, %edi
    00000011: 	jle	.Ltmp68 # Offset: 17
    00000017: 	leal	-0x2(%rsi), %r9d
    0000001b: 	movl	%r9d, %esi
    0000001e: 	shrl	%esi
    00000020: 	addl	$0x1, %esi
    00000023: 	cmpl	$0x1d, %r9d
    00000027: 	jbe	.Ltmp69 # Offset: 39
    0000002d: 	movl	%esi, %r9d
    00000030: 	movdqa	DATAat0x33580(%rip), %xmm4
    00000038: 	movq	%rcx, %rax
    0000003b: 	pcmpeqd	%xmm2, %xmm2
    0000003f: 	shrl	$0x4, %r9d
    00000043: 	subl	$0x1, %r9d
    00000047: 	shlq	$0x5, %r9
    0000004b: 	leaq	0x20(%rcx,%r9), %r9
.Ltmp70:
    00000050: 	movdqu	(%rax), %xmm0
    00000054: 	movdqu	0x10(%rax), %xmm3
    00000059: 	addq	$0x20, %rax
    0000005d: 	pand	%xmm4, %xmm0
    00000061: 	pand	%xmm4, %xmm3
    00000065: 	movdqa	%xmm0, %xmm1
    00000069: 	movdqu	-0x20(%rax), %xmm0
    0000006e: 	packuswb	%xmm3, %xmm1
    00000072: 	movdqu	-0x10(%rax), %xmm3
    00000077: 	psrlw	$0x8, %xmm0
    0000007c: 	psrlw	$0x8, %xmm3
    00000081: 	packuswb	%xmm3, %xmm0
    00000085: 	pand	%xmm1, %xmm0
    00000089: 	pand	%xmm0, %xmm2
    0000008d: 	cmpq	%r9, %rax
    00000090: 	jne	.Ltmp70 # Offset: 144
    00000092: 	movdqa	%xmm2, %xmm0
    00000096: 	movl	%esi, %r9d
    00000099: 	psrldq	$0x8, %xmm0
    0000009e: 	andl	$-0x10, %r9d
    000000a2: 	pand	%xmm0, %xmm2
    000000a6: 	movdqa	%xmm2, %xmm0
    000000aa: 	psrldq	$0x4, %xmm0
    000000af: 	pand	%xmm0, %xmm2
    000000b3: 	movdqa	%xmm2, %xmm0
    000000b7: 	psrldq	$0x2, %xmm0
    000000bc: 	pand	%xmm0, %xmm2
    000000c0: 	movdqa	%xmm2, %xmm0
    000000c4: 	psrldq	$0x1, %xmm0
    000000c9: 	pand	%xmm0, %xmm2
    000000cd: 	movd	%xmm2, %eax
    000000d1: 	andl	%edx, %eax
    000000d3: 	leal	(%r9,%r9), %edx
    000000d7: 	cmpl	%r9d, %esi
    000000da: 	je	.Ltmp71 # Offset: 218
.Ltmp74:
    000000e0: 	movslq	%edx, %r9
    000000e3: 	andb	(%rcx,%r9), %al
    000000e7: 	andb	0x1(%rcx,%r9), %al
    000000ec: 	leal	0x2(%rdx), %r9d
    000000f0: 	cmpl	%edi, %r9d
    000000f3: 	jge	.Ltmp71 # Offset: 243
    000000f9: 	movslq	%r9d, %r9
    000000fc: 	movzbl	0x1(%rcx,%r9), %r10d
    00000102: 	andb	(%rcx,%r9), %r10b
    00000106: 	movl	%r10d, %r9d
    00000109: 	andl	%r9d, %eax
    0000010c: 	leal	0x4(%rdx), %r9d
    00000110: 	cmpl	%r9d, %edi
    00000113: 	jle	.Ltmp71 # Offset: 275
    00000119: 	movslq	%r9d, %r9
    0000011c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000122: 	andb	(%rcx,%r9), %r10b
    00000126: 	movl	%r10d, %r9d
    00000129: 	andl	%r9d, %eax
    0000012c: 	leal	0x6(%rdx), %r9d
    00000130: 	cmpl	%r9d, %edi
    00000133: 	jle	.Ltmp71 # Offset: 307
    00000139: 	movslq	%r9d, %r9
    0000013c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000142: 	andb	(%rcx,%r9), %r10b
    00000146: 	movl	%r10d, %r9d
    00000149: 	andl	%r9d, %eax
    0000014c: 	leal	0x8(%rdx), %r9d
    00000150: 	cmpl	%r9d, %edi
    00000153: 	jle	.Ltmp71 # Offset: 339
    00000159: 	movslq	%r9d, %r9
    0000015c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000162: 	andb	(%rcx,%r9), %r10b
    00000166: 	movl	%r10d, %r9d
    00000169: 	andl	%r9d, %eax
    0000016c: 	leal	0xa(%rdx), %r9d
    00000170: 	cmpl	%r9d, %edi
    00000173: 	jle	.Ltmp71 # Offset: 371
    00000179: 	movslq	%r9d, %r9
    0000017c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000182: 	andb	(%rcx,%r9), %r10b
    00000186: 	movl	%r10d, %r9d
    00000189: 	andl	%r9d, %eax
    0000018c: 	leal	0xc(%rdx), %r9d
    00000190: 	cmpl	%r9d, %edi
    00000193: 	jle	.Ltmp71 # Offset: 403
    00000199: 	movslq	%r9d, %r9
    0000019c: 	movzbl	0x1(%rcx,%r9), %r10d
    000001a2: 	andb	(%rcx,%r9), %r10b
    000001a6: 	movl	%r10d, %r9d
    000001a9: 	andl	%r9d, %eax
    000001ac: 	leal	0xe(%rdx), %r9d
    000001b0: 	cmpl	%r9d, %edi
    000001b3: 	jle	.Ltmp71 # Offset: 435
    000001b9: 	movslq	%r9d, %r9
    000001bc: 	movzbl	0x1(%rcx,%r9), %r10d
    000001c2: 	andb	(%rcx,%r9), %r10b
    000001c6: 	movl	%r10d, %r9d
    000001c9: 	andl	%r9d, %eax
    000001cc: 	leal	0x10(%rdx), %r9d
    000001d0: 	cmpl	%r9d, %edi
    000001d3: 	jle	.Ltmp71 # Offset: 467
    000001d9: 	movslq	%r9d, %r9
    000001dc: 	movzbl	0x1(%rcx,%r9), %r10d
    000001e2: 	andb	(%rcx,%r9), %r10b
    000001e6: 	movl	%r10d, %r9d
    000001e9: 	andl	%r9d, %eax
    000001ec: 	leal	0x12(%rdx), %r9d
    000001f0: 	cmpl	%r9d, %edi
    000001f3: 	jle	.Ltmp71 # Offset: 499
    000001f9: 	movslq	%r9d, %r9
    000001fc: 	movzbl	0x1(%rcx,%r9), %r10d
    00000202: 	andb	(%rcx,%r9), %r10b
    00000206: 	movl	%r10d, %r9d
    00000209: 	andl	%r9d, %eax
    0000020c: 	leal	0x14(%rdx), %r9d
    00000210: 	cmpl	%r9d, %edi
    00000213: 	jle	.Ltmp71 # Offset: 531
    00000219: 	movslq	%r9d, %r9
    0000021c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000222: 	andb	(%rcx,%r9), %r10b
    00000226: 	movl	%r10d, %r9d
    00000229: 	andl	%r9d, %eax
    0000022c: 	leal	0x16(%rdx), %r9d
    00000230: 	cmpl	%r9d, %edi
    00000233: 	jle	.Ltmp71 # Offset: 563
    00000235: 	movslq	%r9d, %r9
    00000238: 	movzbl	0x1(%rcx,%r9), %r10d
    0000023e: 	andb	(%rcx,%r9), %r10b
    00000242: 	movl	%r10d, %r9d
    00000245: 	andl	%r9d, %eax
    00000248: 	leal	0x18(%rdx), %r9d
    0000024c: 	cmpl	%r9d, %edi
    0000024f: 	jle	.Ltmp71 # Offset: 591
    00000251: 	movslq	%r9d, %r9
    00000254: 	movzbl	0x1(%rcx,%r9), %r10d
    0000025a: 	andb	(%rcx,%r9), %r10b
    0000025e: 	movl	%r10d, %r9d
    00000261: 	andl	%r9d, %eax
    00000264: 	leal	0x1a(%rdx), %r9d
    00000268: 	cmpl	%r9d, %edi
    0000026b: 	jle	.Ltmp71 # Offset: 619
    0000026d: 	movslq	%r9d, %r9
    00000270: 	addl	$0x1c, %edx
    00000273: 	movzbl	0x1(%rcx,%r9), %r10d
    00000279: 	andb	(%rcx,%r9), %r10b
    0000027d: 	movl	%r10d, %r9d
    00000280: 	andl	%r9d, %eax
    00000283: 	cmpl	%edx, %edi
    00000285: 	jle	.Ltmp71 # Offset: 645
    00000287: 	movslq	%edx, %rdx
    0000028a: 	movzbl	0x1(%rcx,%rdx), %edi
    0000028f: 	andb	(%rcx,%rdx), %dil
    00000293: 	movl	%edi, %edx
    00000295: 	andl	%edx, %eax
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp71:
    000002a0: 	addl	%esi, %esi
.Ltmp73:
    000002a2: 	cmpl	%r8d, %esi
    000002a5: 	jge	.Ltmp72 # Offset: 677
    000002a7: 	movslq	%esi, %rsi
    000002aa: 	andb	(%rcx,%rsi), %al
.Ltmp72:
    000002ad: 	retq # Offset: 685
    000002ae: 	nop # Size: 2
.Ltmp68:
    000002b0: 	xorl	%esi, %esi
    000002b2: 	jmp	.Ltmp73 # Offset: 690
.Ltmp69:
    000002b4: 	xorl	%edx, %edx
    000002b6: 	jmp	.Ltmp74 # Offset: 694
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and3IhET_PKS0_iS0_"

Binary Function "_Z8bit_and4IhET_PKS0_iS0_" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0x2ac0
  Size        : 0x41b
  MaxSize     : 0x420
  Offset      : 0x2ac0
  Section     : .text
  Orc Section : .local.text._Z8bit_and4IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	leal	-0x3(%rsi), %r8d
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%edx, %eax
    0000000d: 	movl	%esi, %edi
    0000000f: 	testl	%r8d, %r8d
    00000012: 	jle	.Ltmp75 # Offset: 18
    00000018: 	leal	-0x4(%rsi), %r9d
    0000001c: 	movl	%r9d, %esi
    0000001f: 	shrl	$0x2, %esi
    00000022: 	addl	$0x1, %esi
    00000025: 	cmpl	$0x3b, %r9d
    00000029: 	jbe	.Ltmp76 # Offset: 41
    0000002f: 	movl	%esi, %r9d
    00000032: 	movdqa	DATAat0x33580(%rip), %xmm5
    0000003a: 	movq	%rcx, %rax
    0000003d: 	pcmpeqd	%xmm2, %xmm2
    00000041: 	shrl	$0x4, %r9d
    00000045: 	subl	$0x1, %r9d
    00000049: 	shlq	$0x6, %r9
    0000004d: 	leaq	0x40(%rcx,%r9), %r9
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp77:
    00000058: 	movdqu	(%rax), %xmm1
    0000005c: 	movdqu	0x10(%rax), %xmm0
    00000061: 	movdqa	%xmm5, %xmm7
    00000065: 	addq	$0x40, %rax
    00000069: 	movdqu	-0x20(%rax), %xmm6
    0000006e: 	movdqu	-0x10(%rax), %xmm3
    00000073: 	pand	%xmm5, %xmm1
    00000077: 	pand	%xmm5, %xmm0
    0000007b: 	movdqa	%xmm1, %xmm4
    0000007f: 	movdqu	-0x30(%rax), %xmm1
    00000084: 	pand	%xmm5, %xmm6
    00000088: 	packuswb	%xmm0, %xmm4
    0000008c: 	movdqu	-0x40(%rax), %xmm0
    00000091: 	psrlw	$0x8, %xmm3
    00000096: 	psrlw	$0x8, %xmm1
    0000009b: 	psrlw	$0x8, %xmm0
    000000a0: 	packuswb	%xmm1, %xmm0
    000000a4: 	movdqu	-0x10(%rax), %xmm1
    000000a9: 	pand	%xmm5, %xmm1
    000000ad: 	packuswb	%xmm1, %xmm6
    000000b1: 	movdqu	-0x20(%rax), %xmm1
    000000b6: 	psrlw	$0x8, %xmm1
    000000bb: 	packuswb	%xmm3, %xmm1
    000000bf: 	movdqa	%xmm5, %xmm3
    000000c3: 	pand	%xmm1, %xmm7
    000000c7: 	psrlw	$0x8, %xmm1
    000000cc: 	pand	%xmm0, %xmm3
    000000d0: 	psrlw	$0x8, %xmm0
    000000d5: 	packuswb	%xmm7, %xmm3
    000000d9: 	movdqa	%xmm5, %xmm7
    000000dd: 	packuswb	%xmm1, %xmm0
    000000e1: 	movdqa	%xmm5, %xmm1
    000000e5: 	pand	%xmm6, %xmm7
    000000e9: 	pand	%xmm4, %xmm1
    000000ed: 	psrlw	$0x8, %xmm6
    000000f2: 	pand	%xmm3, %xmm0
    000000f6: 	movdqa	%xmm1, %xmm3
    000000fa: 	movdqa	%xmm4, %xmm1
    000000fe: 	psrlw	$0x8, %xmm1
    00000103: 	packuswb	%xmm7, %xmm3
    00000107: 	packuswb	%xmm6, %xmm1
    0000010b: 	pand	%xmm3, %xmm1
    0000010f: 	pand	%xmm1, %xmm0
    00000113: 	pand	%xmm0, %xmm2
    00000117: 	cmpq	%r9, %rax
    0000011a: 	jne	.Ltmp77 # Offset: 282
    00000120: 	movdqa	%xmm2, %xmm0
    00000124: 	movl	%esi, %r9d
    00000127: 	psrldq	$0x8, %xmm0
    0000012c: 	andl	$-0x10, %r9d
    00000130: 	pand	%xmm0, %xmm2
    00000134: 	movdqa	%xmm2, %xmm0
    00000138: 	psrldq	$0x4, %xmm0
    0000013d: 	pand	%xmm0, %xmm2
    00000141: 	movdqa	%xmm2, %xmm0
    00000145: 	psrldq	$0x2, %xmm0
    0000014a: 	pand	%xmm0, %xmm2
    0000014e: 	movdqa	%xmm2, %xmm0
    00000152: 	psrldq	$0x1, %xmm0
    00000157: 	pand	%xmm0, %xmm2
    0000015b: 	movd	%xmm2, %eax
    0000015f: 	andl	%edx, %eax
    00000161: 	leal	(,%r9,4), %edx
    00000169: 	cmpl	%esi, %r9d
    0000016c: 	je	.Ltmp78 # Offset: 364
.Ltmp81:
    00000172: 	movslq	%edx, %r9
    00000175: 	andb	(%rcx,%r9), %al
    00000179: 	andb	0x1(%rcx,%r9), %al
    0000017e: 	andb	0x2(%rcx,%r9), %al
    00000183: 	andb	0x3(%rcx,%r9), %al
    00000188: 	leal	0x4(%rdx), %r9d
    0000018c: 	cmpl	%r9d, %r8d
    0000018f: 	jle	.Ltmp78 # Offset: 399
    00000195: 	movslq	%r9d, %r9
    00000198: 	movzbl	0x1(%rcx,%r9), %r10d
    0000019e: 	andb	0x2(%rcx,%r9), %r10b
    000001a3: 	andb	(%rcx,%r9), %r10b
    000001a7: 	andb	0x3(%rcx,%r9), %r10b
    000001ac: 	movl	%r10d, %r9d
    000001af: 	andl	%r9d, %eax
    000001b2: 	leal	0x8(%rdx), %r9d
    000001b6: 	cmpl	%r9d, %r8d
    000001b9: 	jle	.Ltmp78 # Offset: 441
    000001bf: 	movslq	%r9d, %r9
    000001c2: 	movzbl	0x1(%rcx,%r9), %r10d
    000001c8: 	andb	0x2(%rcx,%r9), %r10b
    000001cd: 	andb	(%rcx,%r9), %r10b
    000001d1: 	andb	0x3(%rcx,%r9), %r10b
    000001d6: 	movl	%r10d, %r9d
    000001d9: 	andl	%r9d, %eax
    000001dc: 	leal	0xc(%rdx), %r9d
    000001e0: 	cmpl	%r9d, %r8d
    000001e3: 	jle	.Ltmp78 # Offset: 483
    000001e9: 	movslq	%r9d, %r9
    000001ec: 	movzbl	0x1(%rcx,%r9), %r10d
    000001f2: 	andb	0x2(%rcx,%r9), %r10b
    000001f7: 	andb	(%rcx,%r9), %r10b
    000001fb: 	andb	0x3(%rcx,%r9), %r10b
    00000200: 	movl	%r10d, %r9d
    00000203: 	andl	%r9d, %eax
    00000206: 	leal	0x10(%rdx), %r9d
    0000020a: 	cmpl	%r9d, %r8d
    0000020d: 	jle	.Ltmp78 # Offset: 525
    00000213: 	movslq	%r9d, %r9
    00000216: 	movzbl	0x1(%rcx,%r9), %r10d
    0000021c: 	andb	0x2(%rcx,%r9), %r10b
    00000221: 	andb	(%rcx,%r9), %r10b
    00000225: 	andb	0x3(%rcx,%r9), %r10b
    0000022a: 	movl	%r10d, %r9d
    0000022d: 	andl	%r9d, %eax
    00000230: 	leal	0x14(%rdx), %r9d
    00000234: 	cmpl	%r9d, %r8d
    00000237: 	jle	.Ltmp78 # Offset: 567
    0000023d: 	movslq	%r9d, %r9
    00000240: 	movzbl	0x1(%rcx,%r9), %r10d
    00000246: 	andb	0x2(%rcx,%r9), %r10b
    0000024b: 	andb	(%rcx,%r9), %r10b
    0000024f: 	andb	0x3(%rcx,%r9), %r10b
    00000254: 	movl	%r10d, %r9d
    00000257: 	andl	%r9d, %eax
    0000025a: 	leal	0x18(%rdx), %r9d
    0000025e: 	cmpl	%r9d, %r8d
    00000261: 	jle	.Ltmp78 # Offset: 609
    00000267: 	movslq	%r9d, %r9
    0000026a: 	movzbl	0x1(%rcx,%r9), %r10d
    00000270: 	andb	0x2(%rcx,%r9), %r10b
    00000275: 	andb	(%rcx,%r9), %r10b
    00000279: 	andb	0x3(%rcx,%r9), %r10b
    0000027e: 	movl	%r10d, %r9d
    00000281: 	andl	%r9d, %eax
    00000284: 	leal	0x1c(%rdx), %r9d
    00000288: 	cmpl	%r9d, %r8d
    0000028b: 	jle	.Ltmp78 # Offset: 651
    00000291: 	movslq	%r9d, %r9
    00000294: 	movzbl	0x1(%rcx,%r9), %r10d
    0000029a: 	andb	0x2(%rcx,%r9), %r10b
    0000029f: 	andb	(%rcx,%r9), %r10b
    000002a3: 	andb	0x3(%rcx,%r9), %r10b
    000002a8: 	movl	%r10d, %r9d
    000002ab: 	andl	%r9d, %eax
    000002ae: 	leal	0x20(%rdx), %r9d
    000002b2: 	cmpl	%r9d, %r8d
    000002b5: 	jle	.Ltmp78 # Offset: 693
    000002bb: 	movslq	%r9d, %r9
    000002be: 	movzbl	0x1(%rcx,%r9), %r10d
    000002c4: 	andb	0x2(%rcx,%r9), %r10b
    000002c9: 	andb	(%rcx,%r9), %r10b
    000002cd: 	andb	0x3(%rcx,%r9), %r10b
    000002d2: 	movl	%r10d, %r9d
    000002d5: 	andl	%r9d, %eax
    000002d8: 	leal	0x24(%rdx), %r9d
    000002dc: 	cmpl	%r9d, %r8d
    000002df: 	jle	.Ltmp78 # Offset: 735
    000002e5: 	movslq	%r9d, %r9
    000002e8: 	movzbl	0x1(%rcx,%r9), %r10d
    000002ee: 	andb	0x2(%rcx,%r9), %r10b
    000002f3: 	andb	(%rcx,%r9), %r10b
    000002f7: 	andb	0x3(%rcx,%r9), %r10b
    000002fc: 	movl	%r10d, %r9d
    000002ff: 	andl	%r9d, %eax
    00000302: 	leal	0x28(%rdx), %r9d
    00000306: 	cmpl	%r9d, %r8d
    00000309: 	jle	.Ltmp78 # Offset: 777
    0000030f: 	movslq	%r9d, %r9
    00000312: 	movzbl	0x1(%rcx,%r9), %r10d
    00000318: 	andb	0x2(%rcx,%r9), %r10b
    0000031d: 	andb	(%rcx,%r9), %r10b
    00000321: 	andb	0x3(%rcx,%r9), %r10b
    00000326: 	movl	%r10d, %r9d
    00000329: 	andl	%r9d, %eax
    0000032c: 	leal	0x2c(%rdx), %r9d
    00000330: 	cmpl	%r9d, %r8d
    00000333: 	jle	.Ltmp78 # Offset: 819
    00000339: 	movslq	%r9d, %r9
    0000033c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000342: 	andb	0x2(%rcx,%r9), %r10b
    00000347: 	andb	(%rcx,%r9), %r10b
    0000034b: 	andb	0x3(%rcx,%r9), %r10b
    00000350: 	movl	%r10d, %r9d
    00000353: 	andl	%r9d, %eax
    00000356: 	leal	0x30(%rdx), %r9d
    0000035a: 	cmpl	%r9d, %r8d
    0000035d: 	jle	.Ltmp78 # Offset: 861
    0000035f: 	movslq	%r9d, %r9
    00000362: 	movzbl	0x1(%rcx,%r9), %r10d
    00000368: 	andb	0x2(%rcx,%r9), %r10b
    0000036d: 	andb	(%rcx,%r9), %r10b
    00000371: 	andb	0x3(%rcx,%r9), %r10b
    00000376: 	movl	%r10d, %r9d
    00000379: 	andl	%r9d, %eax
    0000037c: 	leal	0x34(%rdx), %r9d
    00000380: 	cmpl	%r9d, %r8d
    00000383: 	jle	.Ltmp78 # Offset: 899
    00000385: 	movslq	%r9d, %r9
    00000388: 	addl	$0x38, %edx
    0000038b: 	movzbl	0x1(%rcx,%r9), %r10d
    00000391: 	andb	0x2(%rcx,%r9), %r10b
    00000396: 	andb	(%rcx,%r9), %r10b
    0000039a: 	andb	0x3(%rcx,%r9), %r10b
    0000039f: 	movl	%r10d, %r9d
    000003a2: 	andl	%r9d, %eax
    000003a5: 	cmpl	%edx, %r8d
    000003a8: 	jle	.Ltmp78 # Offset: 936
    000003aa: 	movslq	%edx, %rdx
    000003ad: 	movzbl	0x2(%rcx,%rdx), %r8d
    000003b3: 	andb	0x1(%rcx,%rdx), %r8b
    000003b8: 	andb	(%rcx,%rdx), %r8b
    000003bc: 	andb	0x3(%rcx,%rdx), %r8b
    000003c1: 	movl	%r8d, %edx
    000003c4: 	andl	%edx, %eax
    000003c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp78:
    000003d0: 	leal	(,%rsi,4), %edx
.Ltmp80:
    000003d7: 	cmpl	%edx, %edi
    000003d9: 	jle	.Ltmp79 # Offset: 985
    000003db: 	movslq	%edx, %rsi
    000003de: 	andb	(%rcx,%rsi), %al
    000003e1: 	leal	0x1(%rdx), %esi
    000003e4: 	cmpl	%edi, %esi
    000003e6: 	jge	.Ltmp79 # Offset: 998
    000003e8: 	movslq	%esi, %rsi
    000003eb: 	andb	(%rcx,%rsi), %al
    000003ee: 	leal	0x2(%rdx), %esi
    000003f1: 	cmpl	%edi, %esi
    000003f3: 	jge	.Ltmp79 # Offset: 1011
    000003f5: 	movslq	%esi, %rsi
    000003f8: 	addl	$0x3, %edx
    000003fb: 	andb	(%rcx,%rsi), %al
    000003fe: 	cmpl	%edx, %edi
    00000400: 	jle	.Ltmp79 # Offset: 1024
    00000402: 	movslq	%edx, %rdx
    00000405: 	andb	(%rcx,%rdx), %al
.Ltmp79:
    00000408: 	retq # Offset: 1032
    00000409: 	nopl	(%rax) # Size: 7
.Ltmp75:
    00000410: 	xorl	%edx, %edx
    00000412: 	jmp	.Ltmp80 # Offset: 1042
.Ltmp76:
    00000414: 	xorl	%edx, %edx
    00000416: 	jmp	.Ltmp81 # Offset: 1046
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and4IhET_PKS0_iS0_"

Binary Function "_Z8bit_and5IhET_PKS0_iS0_" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0x2ee0
  Size        : 0x3cc
  MaxSize     : 0x3d0
  Offset      : 0x2ee0
  Section     : .text
  Orc Section : .local.text._Z8bit_and5IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	leal	-0x1(%rsi), %r8d
    00000009: 	movl	%edx, %eax
    0000000b: 	pushq	%rbx
    0000000c: 	subq	$0x110, %rsp
    00000013: 	testl	%r8d, %r8d
    00000016: 	jle	.Ltmp82 # Offset: 22
    0000001c: 	leal	-0x2(%rsi), %r9d
    00000020: 	movl	%r9d, %ecx
    00000023: 	shrl	%ecx
    00000025: 	leal	0x1(%rcx), %r10d
    00000029: 	cmpl	$0xd, %r9d
    0000002d: 	jbe	.Ltmp83 # Offset: 45
    00000033: 	movq	$-0x1, -0x70(%rsp)
    0000003c: 	movzbl	%dl, %edx
    0000003f: 	movq	%rdx, %rax
    00000042: 	shlq	$0x8, %rax
    00000046: 	orq	$-0x10000, %rax
    0000004c: 	orq	%rdx, %rax
    0000004f: 	movl	%r10d, %edx
    00000052: 	shrl	$0x3, %edx
    00000055: 	movq	%rax, -0x78(%rsp)
    0000005a: 	movdqa	-0x78(%rsp), %xmm0
    00000060: 	movq	%rdi, %rax
    00000063: 	subl	$0x1, %edx
    00000066: 	shlq	$0x4, %rdx
    0000006a: 	leaq	0x10(%rdi,%rdx), %rdx
    0000006f: 	nop # Size: 1
.Ltmp84:
    00000070: 	movdqu	(%rax), %xmm2
    00000074: 	addq	$0x10, %rax
    00000078: 	pand	%xmm2, %xmm0
    0000007c: 	cmpq	%rax, %rdx
    0000007f: 	jne	.Ltmp84 # Offset: 127
    00000081: 	movl	%r10d, %ebx
    00000084: 	movd	%xmm0, %eax
    00000088: 	movaps	%xmm0, 0xf8(%rsp)
    00000090: 	andb	0xfa(%rsp), %al
    00000097: 	andl	$-0x8, %ebx
    0000009a: 	movaps	%xmm0, 0xe8(%rsp)
    000000a2: 	andb	0xec(%rsp), %al
    000000a9: 	movaps	%xmm0, 0xd8(%rsp)
    000000b1: 	leal	(%rbx,%rbx), %r9d
    000000b5: 	andb	0xde(%rsp), %al
    000000bc: 	movaps	%xmm0, 0xc8(%rsp)
    000000c4: 	andb	0xd0(%rsp), %al
    000000cb: 	movaps	%xmm0, 0xb8(%rsp)
    000000d3: 	andb	0xc2(%rsp), %al
    000000da: 	movaps	%xmm0, 0xa8(%rsp)
    000000e2: 	andb	0xb4(%rsp), %al
    000000e9: 	movaps	%xmm0, 0x98(%rsp)
    000000f1: 	andb	0xa6(%rsp), %al
    000000f8: 	movaps	%xmm0, 0x88(%rsp)
    00000100: 	movaps	%xmm0, 0x78(%rsp)
    00000105: 	movzbl	0x7b(%rsp), %edx
    0000010a: 	andb	0x89(%rsp), %dl
    00000111: 	movaps	%xmm0, 0x68(%rsp)
    00000116: 	andb	0x6d(%rsp), %dl
    0000011a: 	movaps	%xmm0, 0x58(%rsp)
    0000011f: 	andb	0x5f(%rsp), %dl
    00000123: 	movaps	%xmm0, 0x48(%rsp)
    00000128: 	andb	0x51(%rsp), %dl
    0000012c: 	movaps	%xmm0, 0x38(%rsp)
    00000131: 	andb	0x43(%rsp), %dl
    00000135: 	movaps	%xmm0, 0x28(%rsp)
    0000013a: 	andb	0x35(%rsp), %dl
    0000013e: 	movaps	%xmm0, 0x18(%rsp)
    00000143: 	andb	0x27(%rsp), %dl
    00000147: 	cmpl	%ebx, %r10d
    0000014a: 	je	.Ltmp85 # Offset: 330
.Ltmp93:
    00000150: 	subl	%ebx, %ecx
    00000152: 	leal	0x1(%rcx), %r11d
    00000156: 	cmpl	$0x2, %ecx
    00000159: 	jbe	.Ltmp86 # Offset: 345
    0000015f: 	movzbl	%dl, %edx
    00000162: 	movzbl	%al, %eax
    00000165: 	movq	(%rdi,%rbx,2), %xmm0
    0000016a: 	shlq	$0x8, %rdx
    0000016e: 	orq	$-0x10000, %rdx
    00000175: 	orq	%rax, %rdx
    00000178: 	movq	%rdx, %xmm3
    0000017d: 	pand	%xmm0, %xmm3
    00000181: 	movq	%xmm3, %rcx
    00000186: 	movq	%xmm3, %rdx
    0000018b: 	movq	%xmm3, %rbx
    00000190: 	movq	%xmm3, 0x10(%rsp)
    00000196: 	shrq	$0x10, %rdx
    0000019a: 	movl	%ecx, %eax
    0000019c: 	shrq	$0x18, %rbx
    000001a0: 	movq	%xmm3, (%rsp)
    000001a5: 	andl	%edx, %eax
    000001a7: 	movq	%xmm3, %rdx
    000001ac: 	movq	%xmm3, 0x8(%rsp)
    000001b2: 	shrq	$0x20, %rdx
    000001b6: 	movq	%xmm3, -0x8(%rsp)
    000001bc: 	andl	%edx, %eax
    000001be: 	movq	%xmm3, %rdx
    000001c3: 	movq	%xmm3, -0x10(%rsp)
    000001c9: 	shrq	$0x30, %rdx
    000001cd: 	movq	%xmm3, -0x18(%rsp)
    000001d3: 	andl	%edx, %eax
    000001d5: 	movzbl	%ch, %edx
    000001d8: 	movl	%r11d, %ecx
    000001db: 	movq	%xmm3, -0x20(%rsp)
    000001e1: 	andl	%ebx, %edx
    000001e3: 	movq	%xmm3, %rbx
    000001e8: 	andl	$-0x4, %ecx
    000001eb: 	movq	%xmm3, -0x28(%rsp)
    000001f1: 	shrq	$0x28, %rbx
    000001f5: 	leal	(%r9,%rcx,2), %r9d
    000001f9: 	andl	%ebx, %edx
    000001fb: 	movq	%xmm3, %rbx
    00000200: 	shrq	$0x38, %rbx
    00000204: 	andl	%ebx, %edx
    00000206: 	cmpl	%ecx, %r11d
    00000209: 	je	.Ltmp85 # Offset: 521
.Ltmp86:
    0000020b: 	movslq	%r9d, %rcx
    0000020e: 	andb	(%rdi,%rcx), %al
    00000211: 	andb	0x1(%rdi,%rcx), %dl
    00000215: 	leal	0x2(%r9), %ecx
    00000219: 	cmpl	%ecx, %r8d
    0000021c: 	jle	.Ltmp85 # Offset: 540
    0000021e: 	movslq	%ecx, %rcx
    00000221: 	addl	$0x4, %r9d
    00000225: 	andb	(%rdi,%rcx), %al
    00000228: 	andb	0x1(%rdi,%rcx), %dl
    0000022c: 	cmpl	%r9d, %r8d
    0000022f: 	jle	.Ltmp85 # Offset: 559
    00000231: 	movslq	%r9d, %r9
    00000234: 	andb	(%rdi,%r9), %al
    00000238: 	andb	0x1(%rdi,%r9), %dl
.Ltmp85:
    0000023d: 	addl	%r10d, %r10d
.Ltmp92:
    00000240: 	cmpl	%r10d, %esi
    00000243: 	jle	.Ltmp87 # Offset: 579
    00000249: 	movl	%esi, %r9d
    0000024c: 	subl	%r10d, %r9d
    0000024f: 	leal	-0x1(%r9), %ecx
    00000253: 	cmpl	$0xe, %ecx
    00000256: 	jbe	.Ltmp88 # Offset: 598
    0000025c: 	movl	%r9d, %ecx
    0000025f: 	movslq	%r10d, %r8
    00000262: 	pcmpeqd	%xmm0, %xmm0
    00000266: 	shrl	$0x4, %ecx
    00000269: 	addq	%rdi, %r8
    0000026c: 	leal	-0x1(%rcx), %r11d
    00000270: 	leaq	0x10(%r8), %rcx
    00000274: 	shlq	$0x4, %r11
    00000278: 	addq	%rcx, %r11
    0000027b: 	jmp	.Ltmp89 # Offset: 635
    0000027d: 	nopl	(%rax) # Size: 3
.Ltmp90:
    00000280: 	addq	$0x10, %rcx
.Ltmp89:
    00000284: 	movdqu	(%r8), %xmm1
    00000289: 	movq	%rcx, %r8
    0000028c: 	pand	%xmm1, %xmm0
    00000290: 	cmpq	%r11, %rcx
    00000293: 	jne	.Ltmp90 # Offset: 659
    00000295: 	movdqa	%xmm0, %xmm1
    00000299: 	psrldq	$0x8, %xmm1
    0000029e: 	pand	%xmm1, %xmm0
    000002a2: 	movdqa	%xmm0, %xmm1
    000002a6: 	psrldq	$0x4, %xmm1
    000002ab: 	pand	%xmm1, %xmm0
    000002af: 	movdqa	%xmm0, %xmm1
    000002b3: 	psrldq	$0x2, %xmm1
    000002b8: 	pand	%xmm1, %xmm0
    000002bc: 	movdqa	%xmm0, %xmm1
    000002c0: 	psrldq	$0x1, %xmm1
    000002c5: 	pand	%xmm1, %xmm0
    000002c9: 	movd	%xmm0, %ecx
    000002cd: 	andl	%ecx, %eax
    000002cf: 	movl	%r9d, %ecx
    000002d2: 	andl	$-0x10, %ecx
    000002d5: 	leal	(%rcx,%r10), %r8d
    000002d9: 	cmpl	%r9d, %ecx
    000002dc: 	je	.Ltmp87 # Offset: 732
.Ltmp94:
    000002e2: 	subl	%ecx, %r9d
    000002e5: 	leal	-0x1(%r9), %r11d
    000002e9: 	cmpl	$0x6, %r11d
    000002ed: 	jbe	.Ltmp91 # Offset: 749
    000002ef: 	movslq	%r10d, %r10
    000002f2: 	addq	%rdi, %r10
    000002f5: 	movq	(%r10,%rcx), %rbx
    000002f9: 	movl	%ebx, %ecx
    000002fb: 	movzbl	%bh, %ebp
    000002fe: 	andl	%ebp, %ecx
    00000300: 	andl	%ecx, %eax
    00000302: 	movq	%rbx, %rcx
    00000305: 	shrq	$0x10, %rcx
    00000309: 	andl	%ecx, %eax
    0000030b: 	movq	%rbx, %rcx
    0000030e: 	shrq	$0x18, %rcx
    00000312: 	andl	%ecx, %eax
    00000314: 	movq	%rbx, %rcx
    00000317: 	shrq	$0x20, %rcx
    0000031b: 	andl	%ecx, %eax
    0000031d: 	movq	%rbx, %rcx
    00000320: 	shrq	$0x28, %rcx
    00000324: 	andl	%ecx, %eax
    00000326: 	movq	%rbx, %rcx
    00000329: 	shrq	$0x38, %rbx
    0000032d: 	shrq	$0x30, %rcx
    00000331: 	andl	%ecx, %eax
    00000333: 	movl	%r9d, %ecx
    00000336: 	andl	$-0x8, %ecx
    00000339: 	andl	%ebx, %eax
    0000033b: 	addl	%ecx, %r8d
    0000033e: 	cmpl	%ecx, %r9d
    00000341: 	je	.Ltmp87 # Offset: 833
.Ltmp91:
    00000343: 	movslq	%r8d, %rcx
    00000346: 	andb	(%rdi,%rcx), %al
    00000349: 	leal	0x1(%r8), %ecx
    0000034d: 	cmpl	%ecx, %esi
    0000034f: 	jle	.Ltmp87 # Offset: 847
    00000351: 	movslq	%ecx, %rcx
    00000354: 	andb	(%rdi,%rcx), %al
    00000357: 	leal	0x2(%r8), %ecx
    0000035b: 	cmpl	%ecx, %esi
    0000035d: 	jle	.Ltmp87 # Offset: 861
    0000035f: 	movslq	%ecx, %rcx
    00000362: 	andb	(%rdi,%rcx), %al
    00000365: 	leal	0x3(%r8), %ecx
    00000369: 	cmpl	%ecx, %esi
    0000036b: 	jle	.Ltmp87 # Offset: 875
    0000036d: 	movslq	%ecx, %rcx
    00000370: 	andb	(%rdi,%rcx), %al
    00000373: 	leal	0x4(%r8), %ecx
    00000377: 	cmpl	%ecx, %esi
    00000379: 	jle	.Ltmp87 # Offset: 889
    0000037b: 	movslq	%ecx, %rcx
    0000037e: 	andb	(%rdi,%rcx), %al
    00000381: 	leal	0x5(%r8), %ecx
    00000385: 	cmpl	%ecx, %esi
    00000387: 	jle	.Ltmp87 # Offset: 903
    00000389: 	movslq	%ecx, %rcx
    0000038c: 	addl	$0x6, %r8d
    00000390: 	andb	(%rdi,%rcx), %al
    00000393: 	cmpl	%r8d, %esi
    00000396: 	jle	.Ltmp87 # Offset: 918
    00000398: 	movslq	%r8d, %r8
    0000039b: 	andb	(%rdi,%r8), %al
.Ltmp87:
    0000039f: 	addq	$0x110, %rsp
    000003a6: 	andl	%edx, %eax
    000003a8: 	popq	%rbx
    000003a9: 	popq	%rbp
    000003aa: 	retq # Offset: 938
    000003ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp82:
    000003b0: 	xorl	%r10d, %r10d
    000003b3: 	jmp	.Ltmp92 # Offset: 947
.Ltmp83:
    000003b8: 	xorl	%ebx, %ebx
    000003ba: 	xorl	%r9d, %r9d
    000003bd: 	jmp	.Ltmp93 # Offset: 957
.Ltmp88:
    000003c2: 	movl	%r10d, %r8d
    000003c5: 	xorl	%ecx, %ecx
    000003c7: 	jmp	.Ltmp94 # Offset: 967
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and5IhET_PKS0_iS0_"

Binary Function "_Z8bit_and6IhET_PKS0_iS0_" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0x32b0
  Size        : 0x3f9
  MaxSize     : 0x400
  Offset      : 0x32b0
  Section     : .text
  Orc Section : .local.text._Z8bit_and6IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movl	%edx, %eax
    00000007: 	pushq	%rbx
    00000008: 	subq	$0x110, %rsp
    0000000f: 	cmpl	$0x3, %esi
    00000012: 	jle	.Ltmp95 # Offset: 18
    00000018: 	leal	-0x4(%rsi), %ecx
    0000001b: 	movl	%ecx, %ebx
    0000001d: 	shrl	$0x2, %ebx
    00000020: 	leal	0x1(%rbx), %r10d
    00000024: 	cmpl	$0xb, %ecx
    00000027: 	jbe	.Ltmp96 # Offset: 39
    0000002d: 	movabsq	$0xffffffff00, %rax
    00000037: 	movzbl	%dl, %edx
    0000003a: 	movq	$-0x1, -0x70(%rsp)
    00000043: 	orq	%rdx, %rax
    00000046: 	shlq	$0x8, %rax
    0000004a: 	orq	%rdx, %rax
    0000004d: 	shlq	$0x8, %rax
    00000051: 	orq	%rdx, %rax
    00000054: 	shlq	$0x8, %rax
    00000058: 	orq	%rdx, %rax
    0000005b: 	movl	%r10d, %edx
    0000005e: 	shrl	$0x2, %edx
    00000061: 	movq	%rax, -0x78(%rsp)
    00000066: 	movdqa	-0x78(%rsp), %xmm0
    0000006c: 	movq	%rdi, %rax
    0000006f: 	subl	$0x1, %edx
    00000072: 	shlq	$0x4, %rdx
    00000076: 	leaq	0x10(%rdi,%rdx), %rdx
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp97:
    00000080: 	movdqu	(%rax), %xmm2
    00000084: 	addq	$0x10, %rax
    00000088: 	pand	%xmm2, %xmm0
    0000008c: 	cmpq	%rax, %rdx
    0000008f: 	jne	.Ltmp97 # Offset: 143
    00000091: 	movl	%r10d, %ebp
    00000094: 	movd	%xmm0, %eax
    00000098: 	movaps	%xmm0, 0xf8(%rsp)
    000000a0: 	andb	0xfc(%rsp), %al
    000000a7: 	andl	$-0x4, %ebp
    000000aa: 	movaps	%xmm0, 0xe8(%rsp)
    000000b2: 	andb	0xf0(%rsp), %al
    000000b9: 	movaps	%xmm0, 0xd8(%rsp)
    000000c1: 	leal	(,%rbp,4), %ecx
    000000c8: 	andb	0xe4(%rsp), %al
    000000cf: 	movaps	%xmm0, 0xc8(%rsp)
    000000d7: 	movaps	%xmm0, 0xb8(%rsp)
    000000df: 	movzbl	0xbd(%rsp), %edx
    000000e7: 	andb	0xc9(%rsp), %dl
    000000ee: 	movaps	%xmm0, 0xa8(%rsp)
    000000f6: 	andb	0xb1(%rsp), %dl
    000000fd: 	movaps	%xmm0, 0x98(%rsp)
    00000105: 	andb	0xa5(%rsp), %dl
    0000010c: 	movaps	%xmm0, 0x88(%rsp)
    00000114: 	movaps	%xmm0, 0x78(%rsp)
    00000119: 	movzbl	0x7e(%rsp), %r9d
    0000011f: 	andb	0x8a(%rsp), %r9b
    00000127: 	movaps	%xmm0, 0x68(%rsp)
    0000012c: 	andb	0x72(%rsp), %r9b
    00000131: 	movaps	%xmm0, 0x58(%rsp)
    00000136: 	andb	0x66(%rsp), %r9b
    0000013b: 	movaps	%xmm0, 0x48(%rsp)
    00000140: 	movaps	%xmm0, 0x38(%rsp)
    00000145: 	movzbl	0x3f(%rsp), %r8d
    0000014b: 	andb	0x4b(%rsp), %r8b
    00000150: 	movaps	%xmm0, 0x28(%rsp)
    00000155: 	andb	0x33(%rsp), %r8b
    0000015a: 	movaps	%xmm0, 0x18(%rsp)
    0000015f: 	andb	0x27(%rsp), %r8b
    00000164: 	cmpl	%ebp, %r10d
    00000167: 	je	.Ltmp98 # Offset: 359
.Ltmp106:
    0000016d: 	movl	%r10d, %r11d
    00000170: 	subl	%ebp, %r11d
    00000173: 	cmpl	%ebp, %ebx
    00000175: 	je	.Ltmp99 # Offset: 373
    0000017b: 	movq	(%rdi,%rbp,4), %xmm0
    00000180: 	movzbl	%r8b, %ebp
    00000184: 	movzbl	%al, %eax
    00000187: 	movabsq	$0xffffffff00, %r8
    00000191: 	orq	%rbp, %r8
    00000194: 	movzbl	%r9b, %ebp
    00000198: 	movq	%r8, %r9
    0000019b: 	movzbl	%dl, %r8d
    0000019f: 	shlq	$0x8, %r9
    000001a3: 	orq	%rbp, %r9
    000001a6: 	movq	%r9, %rdx
    000001a9: 	shlq	$0x8, %rdx
    000001ad: 	orq	%r8, %rdx
    000001b0: 	shlq	$0x8, %rdx
    000001b4: 	orq	%rax, %rdx
    000001b7: 	movq	%rdx, %xmm3
    000001bc: 	pand	%xmm0, %xmm3
    000001c0: 	movq	%xmm3, %rbx
    000001c5: 	movq	%xmm3, %rdx
    000001ca: 	movq	%xmm3, %r8
    000001cf: 	movq	%xmm3, 0x10(%rsp)
    000001d5: 	movl	%ebx, %eax
    000001d7: 	shrq	$0x20, %rdx
    000001db: 	movq	%xmm3, %r9
    000001e0: 	movq	%xmm3, %rbp
    000001e5: 	shrq	$0x28, %r8
    000001e9: 	andl	%edx, %eax
    000001eb: 	movzbl	%bh, %edx
    000001ee: 	shrq	$0x30, %r9
    000001f2: 	andl	%r8d, %edx
    000001f5: 	movq	%xmm3, %r8
    000001fa: 	movl	%r11d, %ebx
    000001fd: 	shrq	$0x18, %rbp
    00000201: 	shrq	$0x10, %r8
    00000205: 	andl	$-0x2, %ebx
    00000208: 	movq	%xmm3, 0x8(%rsp)
    0000020e: 	andl	%r8d, %r9d
    00000211: 	movq	%xmm3, %r8
    00000216: 	movq	%xmm3, (%rsp)
    0000021b: 	leal	(%rcx,%rbx,4), %ecx
    0000021e: 	shrq	$0x38, %r8
    00000222: 	movq	%xmm3, -0x8(%rsp)
    00000228: 	movq	%xmm3, -0x10(%rsp)
    0000022e: 	andl	%ebp, %r8d
    00000231: 	movq	%xmm3, -0x18(%rsp)
    00000237: 	movq	%xmm3, -0x20(%rsp)
    0000023d: 	movq	%xmm3, -0x28(%rsp)
    00000243: 	cmpl	%ebx, %r11d
    00000246: 	je	.Ltmp98 # Offset: 582
.Ltmp99:
    00000248: 	movslq	%ecx, %rcx
    0000024b: 	andb	(%rdi,%rcx), %al
    0000024e: 	andb	0x1(%rdi,%rcx), %dl
    00000252: 	andb	0x2(%rdi,%rcx), %r9b
    00000257: 	andb	0x3(%rdi,%rcx), %r8b
.Ltmp98:
    0000025c: 	andl	%r9d, %edx
    0000025f: 	shll	$0x2, %r10d
    00000263: 	andl	%r8d, %edx
.Ltmp105:
    00000266: 	cmpl	%r10d, %esi
    00000269: 	jle	.Ltmp100 # Offset: 617
    0000026f: 	movl	%esi, %r9d
    00000272: 	subl	%r10d, %r9d
    00000275: 	leal	-0x1(%r9), %ecx
    00000279: 	cmpl	$0xe, %ecx
    0000027c: 	jbe	.Ltmp101 # Offset: 636
    00000282: 	movl	%r9d, %ecx
    00000285: 	movslq	%r10d, %r8
    00000288: 	pcmpeqd	%xmm0, %xmm0
    0000028c: 	shrl	$0x4, %ecx
    0000028f: 	addq	%rdi, %r8
    00000292: 	leal	-0x1(%rcx), %r11d
    00000296: 	leaq	0x10(%r8), %rcx
    0000029a: 	shlq	$0x4, %r11
    0000029e: 	addq	%rcx, %r11
    000002a1: 	jmp	.Ltmp102 # Offset: 673
    000002a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp103:
    000002a8: 	addq	$0x10, %rcx
.Ltmp102:
    000002ac: 	movdqu	(%r8), %xmm1
    000002b1: 	movq	%rcx, %r8
    000002b4: 	pand	%xmm1, %xmm0
    000002b8: 	cmpq	%r11, %rcx
    000002bb: 	jne	.Ltmp103 # Offset: 699
    000002bd: 	movdqa	%xmm0, %xmm1
    000002c1: 	psrldq	$0x8, %xmm1
    000002c6: 	pand	%xmm1, %xmm0
    000002ca: 	movdqa	%xmm0, %xmm1
    000002ce: 	psrldq	$0x4, %xmm1
    000002d3: 	pand	%xmm1, %xmm0
    000002d7: 	movdqa	%xmm0, %xmm1
    000002db: 	psrldq	$0x2, %xmm1
    000002e0: 	pand	%xmm1, %xmm0
    000002e4: 	movdqa	%xmm0, %xmm1
    000002e8: 	psrldq	$0x1, %xmm1
    000002ed: 	pand	%xmm1, %xmm0
    000002f1: 	movd	%xmm0, %ecx
    000002f5: 	andl	%ecx, %eax
    000002f7: 	movl	%r9d, %ecx
    000002fa: 	andl	$-0x10, %ecx
    000002fd: 	leal	(%rcx,%r10), %r8d
    00000301: 	cmpl	%r9d, %ecx
    00000304: 	je	.Ltmp100 # Offset: 772
.Ltmp107:
    0000030a: 	subl	%ecx, %r9d
    0000030d: 	leal	-0x1(%r9), %r11d
    00000311: 	cmpl	$0x6, %r11d
    00000315: 	jbe	.Ltmp104 # Offset: 789
    00000317: 	movslq	%r10d, %r10
    0000031a: 	addq	%rdi, %r10
    0000031d: 	movq	(%r10,%rcx), %rbx
    00000321: 	movl	%ebx, %ecx
    00000323: 	movzbl	%bh, %ebp
    00000326: 	andl	%ebp, %ecx
    00000328: 	andl	%ecx, %eax
    0000032a: 	movq	%rbx, %rcx
    0000032d: 	shrq	$0x10, %rcx
    00000331: 	andl	%ecx, %eax
    00000333: 	movq	%rbx, %rcx
    00000336: 	shrq	$0x18, %rcx
    0000033a: 	andl	%ecx, %eax
    0000033c: 	movq	%rbx, %rcx
    0000033f: 	shrq	$0x20, %rcx
    00000343: 	andl	%ecx, %eax
    00000345: 	movq	%rbx, %rcx
    00000348: 	shrq	$0x28, %rcx
    0000034c: 	andl	%ecx, %eax
    0000034e: 	movq	%rbx, %rcx
    00000351: 	shrq	$0x38, %rbx
    00000355: 	shrq	$0x30, %rcx
    00000359: 	andl	%ecx, %eax
    0000035b: 	movl	%r9d, %ecx
    0000035e: 	andl	$-0x8, %ecx
    00000361: 	andl	%ebx, %eax
    00000363: 	addl	%ecx, %r8d
    00000366: 	cmpl	%ecx, %r9d
    00000369: 	je	.Ltmp100 # Offset: 873
.Ltmp104:
    0000036b: 	movslq	%r8d, %rcx
    0000036e: 	andb	(%rdi,%rcx), %al
    00000371: 	leal	0x1(%r8), %ecx
    00000375: 	cmpl	%esi, %ecx
    00000377: 	jge	.Ltmp100 # Offset: 887
    00000379: 	movslq	%ecx, %rcx
    0000037c: 	andb	(%rdi,%rcx), %al
    0000037f: 	leal	0x2(%r8), %ecx
    00000383: 	cmpl	%esi, %ecx
    00000385: 	jge	.Ltmp100 # Offset: 901
    00000387: 	movslq	%ecx, %rcx
    0000038a: 	andb	(%rdi,%rcx), %al
    0000038d: 	leal	0x3(%r8), %ecx
    00000391: 	cmpl	%ecx, %esi
    00000393: 	jle	.Ltmp100 # Offset: 915
    00000395: 	movslq	%ecx, %rcx
    00000398: 	andb	(%rdi,%rcx), %al
    0000039b: 	leal	0x4(%r8), %ecx
    0000039f: 	cmpl	%ecx, %esi
    000003a1: 	jle	.Ltmp100 # Offset: 929
    000003a3: 	movslq	%ecx, %rcx
    000003a6: 	andb	(%rdi,%rcx), %al
    000003a9: 	leal	0x5(%r8), %ecx
    000003ad: 	cmpl	%ecx, %esi
    000003af: 	jle	.Ltmp100 # Offset: 943
    000003b1: 	movslq	%ecx, %rcx
    000003b4: 	addl	$0x6, %r8d
    000003b8: 	andb	(%rdi,%rcx), %al
    000003bb: 	cmpl	%r8d, %esi
    000003be: 	jle	.Ltmp100 # Offset: 958
    000003c0: 	movslq	%r8d, %r8
    000003c3: 	andb	(%rdi,%r8), %al
.Ltmp100:
    000003c7: 	addq	$0x110, %rsp
    000003ce: 	andl	%edx, %eax
    000003d0: 	popq	%rbx
    000003d1: 	popq	%rbp
    000003d2: 	retq # Offset: 978
    000003d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp95:
    000003d8: 	xorl	%r10d, %r10d
    000003db: 	jmp	.Ltmp105 # Offset: 987
.Ltmp96:
    000003e0: 	movl	%edx, %r8d
    000003e3: 	movl	%edx, %r9d
    000003e6: 	xorl	%ebp, %ebp
    000003e8: 	xorl	%ecx, %ecx
    000003ea: 	jmp	.Ltmp106 # Offset: 1002
.Ltmp101:
    000003ef: 	movl	%r10d, %r8d
    000003f2: 	xorl	%ecx, %ecx
    000003f4: 	jmp	.Ltmp107 # Offset: 1012
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and6IhET_PKS0_iS0_"

Binary Function "_Z8bit_and7IhET_PKS0_iS0_" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0x36b0
  Size        : 0x3f9
  MaxSize     : 0x400
  Offset      : 0x36b0
  Section     : .text
  Orc Section : .local.text._Z8bit_and7IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movl	%edx, %eax
    00000007: 	pushq	%rbx
    00000008: 	subq	$0x110, %rsp
    0000000f: 	cmpl	$0x3, %esi
    00000012: 	jle	.Ltmp108 # Offset: 18
    00000018: 	leal	-0x4(%rsi), %ecx
    0000001b: 	movl	%ecx, %ebx
    0000001d: 	shrl	$0x2, %ebx
    00000020: 	leal	0x1(%rbx), %r10d
    00000024: 	cmpl	$0xb, %ecx
    00000027: 	jbe	.Ltmp109 # Offset: 39
    0000002d: 	movabsq	$0xffffffff00, %rax
    00000037: 	movzbl	%dl, %edx
    0000003a: 	movq	$-0x1, -0x70(%rsp)
    00000043: 	orq	%rdx, %rax
    00000046: 	shlq	$0x8, %rax
    0000004a: 	orq	%rdx, %rax
    0000004d: 	shlq	$0x8, %rax
    00000051: 	orq	%rdx, %rax
    00000054: 	shlq	$0x8, %rax
    00000058: 	orq	%rdx, %rax
    0000005b: 	movl	%r10d, %edx
    0000005e: 	shrl	$0x2, %edx
    00000061: 	movq	%rax, -0x78(%rsp)
    00000066: 	movdqa	-0x78(%rsp), %xmm0
    0000006c: 	movq	%rdi, %rax
    0000006f: 	subl	$0x1, %edx
    00000072: 	shlq	$0x4, %rdx
    00000076: 	leaq	0x10(%rdi,%rdx), %rdx
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp110:
    00000080: 	movdqu	(%rax), %xmm2
    00000084: 	addq	$0x10, %rax
    00000088: 	pand	%xmm2, %xmm0
    0000008c: 	cmpq	%rax, %rdx
    0000008f: 	jne	.Ltmp110 # Offset: 143
    00000091: 	movl	%r10d, %ebp
    00000094: 	movd	%xmm0, %eax
    00000098: 	movaps	%xmm0, 0xf8(%rsp)
    000000a0: 	andb	0xfc(%rsp), %al
    000000a7: 	andl	$-0x4, %ebp
    000000aa: 	movaps	%xmm0, 0xe8(%rsp)
    000000b2: 	andb	0xf0(%rsp), %al
    000000b9: 	movaps	%xmm0, 0xd8(%rsp)
    000000c1: 	leal	(,%rbp,4), %ecx
    000000c8: 	andb	0xe4(%rsp), %al
    000000cf: 	movaps	%xmm0, 0xc8(%rsp)
    000000d7: 	movaps	%xmm0, 0xb8(%rsp)
    000000df: 	movzbl	0xbd(%rsp), %edx
    000000e7: 	andb	0xc9(%rsp), %dl
    000000ee: 	movaps	%xmm0, 0xa8(%rsp)
    000000f6: 	andb	0xb1(%rsp), %dl
    000000fd: 	movaps	%xmm0, 0x98(%rsp)
    00000105: 	andb	0xa5(%rsp), %dl
    0000010c: 	movaps	%xmm0, 0x88(%rsp)
    00000114: 	movaps	%xmm0, 0x78(%rsp)
    00000119: 	movzbl	0x7e(%rsp), %r9d
    0000011f: 	andb	0x8a(%rsp), %r9b
    00000127: 	movaps	%xmm0, 0x68(%rsp)
    0000012c: 	andb	0x72(%rsp), %r9b
    00000131: 	movaps	%xmm0, 0x58(%rsp)
    00000136: 	andb	0x66(%rsp), %r9b
    0000013b: 	movaps	%xmm0, 0x48(%rsp)
    00000140: 	movaps	%xmm0, 0x38(%rsp)
    00000145: 	movzbl	0x3f(%rsp), %r8d
    0000014b: 	andb	0x4b(%rsp), %r8b
    00000150: 	movaps	%xmm0, 0x28(%rsp)
    00000155: 	andb	0x33(%rsp), %r8b
    0000015a: 	movaps	%xmm0, 0x18(%rsp)
    0000015f: 	andb	0x27(%rsp), %r8b
    00000164: 	cmpl	%ebp, %r10d
    00000167: 	je	.Ltmp111 # Offset: 359
.Ltmp119:
    0000016d: 	movl	%r10d, %r11d
    00000170: 	subl	%ebp, %r11d
    00000173: 	cmpl	%ebp, %ebx
    00000175: 	je	.Ltmp112 # Offset: 373
    0000017b: 	movq	(%rdi,%rbp,4), %xmm0
    00000180: 	movzbl	%r8b, %ebp
    00000184: 	movzbl	%al, %eax
    00000187: 	movabsq	$0xffffffff00, %r8
    00000191: 	orq	%rbp, %r8
    00000194: 	movzbl	%r9b, %ebp
    00000198: 	movq	%r8, %r9
    0000019b: 	movzbl	%dl, %r8d
    0000019f: 	shlq	$0x8, %r9
    000001a3: 	orq	%rbp, %r9
    000001a6: 	movq	%r9, %rdx
    000001a9: 	shlq	$0x8, %rdx
    000001ad: 	orq	%r8, %rdx
    000001b0: 	shlq	$0x8, %rdx
    000001b4: 	orq	%rax, %rdx
    000001b7: 	movq	%rdx, %xmm3
    000001bc: 	pand	%xmm0, %xmm3
    000001c0: 	movq	%xmm3, %rbx
    000001c5: 	movq	%xmm3, %rdx
    000001ca: 	movq	%xmm3, %r8
    000001cf: 	movq	%xmm3, 0x10(%rsp)
    000001d5: 	movl	%ebx, %eax
    000001d7: 	shrq	$0x20, %rdx
    000001db: 	movq	%xmm3, %r9
    000001e0: 	movq	%xmm3, %rbp
    000001e5: 	shrq	$0x28, %r8
    000001e9: 	andl	%edx, %eax
    000001eb: 	movzbl	%bh, %edx
    000001ee: 	shrq	$0x30, %r9
    000001f2: 	andl	%r8d, %edx
    000001f5: 	movq	%xmm3, %r8
    000001fa: 	movl	%r11d, %ebx
    000001fd: 	shrq	$0x18, %rbp
    00000201: 	shrq	$0x10, %r8
    00000205: 	andl	$-0x2, %ebx
    00000208: 	movq	%xmm3, 0x8(%rsp)
    0000020e: 	andl	%r8d, %r9d
    00000211: 	movq	%xmm3, %r8
    00000216: 	movq	%xmm3, (%rsp)
    0000021b: 	leal	(%rcx,%rbx,4), %ecx
    0000021e: 	shrq	$0x38, %r8
    00000222: 	movq	%xmm3, -0x8(%rsp)
    00000228: 	movq	%xmm3, -0x10(%rsp)
    0000022e: 	andl	%ebp, %r8d
    00000231: 	movq	%xmm3, -0x18(%rsp)
    00000237: 	movq	%xmm3, -0x20(%rsp)
    0000023d: 	movq	%xmm3, -0x28(%rsp)
    00000243: 	cmpl	%ebx, %r11d
    00000246: 	je	.Ltmp111 # Offset: 582
.Ltmp112:
    00000248: 	movslq	%ecx, %rcx
    0000024b: 	andb	(%rdi,%rcx), %al
    0000024e: 	andb	0x1(%rdi,%rcx), %dl
    00000252: 	andb	0x2(%rdi,%rcx), %r9b
    00000257: 	andb	0x3(%rdi,%rcx), %r8b
.Ltmp111:
    0000025c: 	andl	%r9d, %edx
    0000025f: 	shll	$0x2, %r10d
    00000263: 	andl	%r8d, %edx
.Ltmp118:
    00000266: 	cmpl	%r10d, %esi
    00000269: 	jle	.Ltmp113 # Offset: 617
    0000026f: 	movl	%esi, %r9d
    00000272: 	subl	%r10d, %r9d
    00000275: 	leal	-0x1(%r9), %ecx
    00000279: 	cmpl	$0xe, %ecx
    0000027c: 	jbe	.Ltmp114 # Offset: 636
    00000282: 	movl	%r9d, %ecx
    00000285: 	movslq	%r10d, %r8
    00000288: 	pcmpeqd	%xmm0, %xmm0
    0000028c: 	shrl	$0x4, %ecx
    0000028f: 	addq	%rdi, %r8
    00000292: 	leal	-0x1(%rcx), %r11d
    00000296: 	leaq	0x10(%r8), %rcx
    0000029a: 	shlq	$0x4, %r11
    0000029e: 	addq	%rcx, %r11
    000002a1: 	jmp	.Ltmp115 # Offset: 673
    000002a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp116:
    000002a8: 	addq	$0x10, %rcx
.Ltmp115:
    000002ac: 	movdqu	(%r8), %xmm1
    000002b1: 	movq	%rcx, %r8
    000002b4: 	pand	%xmm1, %xmm0
    000002b8: 	cmpq	%r11, %rcx
    000002bb: 	jne	.Ltmp116 # Offset: 699
    000002bd: 	movdqa	%xmm0, %xmm1
    000002c1: 	psrldq	$0x8, %xmm1
    000002c6: 	pand	%xmm1, %xmm0
    000002ca: 	movdqa	%xmm0, %xmm1
    000002ce: 	psrldq	$0x4, %xmm1
    000002d3: 	pand	%xmm1, %xmm0
    000002d7: 	movdqa	%xmm0, %xmm1
    000002db: 	psrldq	$0x2, %xmm1
    000002e0: 	pand	%xmm1, %xmm0
    000002e4: 	movdqa	%xmm0, %xmm1
    000002e8: 	psrldq	$0x1, %xmm1
    000002ed: 	pand	%xmm1, %xmm0
    000002f1: 	movd	%xmm0, %ecx
    000002f5: 	andl	%ecx, %eax
    000002f7: 	movl	%r9d, %ecx
    000002fa: 	andl	$-0x10, %ecx
    000002fd: 	leal	(%rcx,%r10), %r8d
    00000301: 	cmpl	%r9d, %ecx
    00000304: 	je	.Ltmp113 # Offset: 772
.Ltmp120:
    0000030a: 	subl	%ecx, %r9d
    0000030d: 	leal	-0x1(%r9), %r11d
    00000311: 	cmpl	$0x6, %r11d
    00000315: 	jbe	.Ltmp117 # Offset: 789
    00000317: 	movslq	%r10d, %r10
    0000031a: 	addq	%rdi, %r10
    0000031d: 	movq	(%r10,%rcx), %rbx
    00000321: 	movl	%ebx, %ecx
    00000323: 	movzbl	%bh, %ebp
    00000326: 	andl	%ebp, %ecx
    00000328: 	andl	%ecx, %eax
    0000032a: 	movq	%rbx, %rcx
    0000032d: 	shrq	$0x10, %rcx
    00000331: 	andl	%ecx, %eax
    00000333: 	movq	%rbx, %rcx
    00000336: 	shrq	$0x18, %rcx
    0000033a: 	andl	%ecx, %eax
    0000033c: 	movq	%rbx, %rcx
    0000033f: 	shrq	$0x20, %rcx
    00000343: 	andl	%ecx, %eax
    00000345: 	movq	%rbx, %rcx
    00000348: 	shrq	$0x28, %rcx
    0000034c: 	andl	%ecx, %eax
    0000034e: 	movq	%rbx, %rcx
    00000351: 	shrq	$0x38, %rbx
    00000355: 	shrq	$0x30, %rcx
    00000359: 	andl	%ecx, %eax
    0000035b: 	movl	%r9d, %ecx
    0000035e: 	andl	$-0x8, %ecx
    00000361: 	andl	%ebx, %eax
    00000363: 	addl	%ecx, %r8d
    00000366: 	cmpl	%ecx, %r9d
    00000369: 	je	.Ltmp113 # Offset: 873
.Ltmp117:
    0000036b: 	movslq	%r8d, %rcx
    0000036e: 	andb	(%rdi,%rcx), %al
    00000371: 	leal	0x1(%r8), %ecx
    00000375: 	cmpl	%esi, %ecx
    00000377: 	jge	.Ltmp113 # Offset: 887
    00000379: 	movslq	%ecx, %rcx
    0000037c: 	andb	(%rdi,%rcx), %al
    0000037f: 	leal	0x2(%r8), %ecx
    00000383: 	cmpl	%esi, %ecx
    00000385: 	jge	.Ltmp113 # Offset: 901
    00000387: 	movslq	%ecx, %rcx
    0000038a: 	andb	(%rdi,%rcx), %al
    0000038d: 	leal	0x3(%r8), %ecx
    00000391: 	cmpl	%esi, %ecx
    00000393: 	jge	.Ltmp113 # Offset: 915
    00000395: 	movslq	%ecx, %rcx
    00000398: 	andb	(%rdi,%rcx), %al
    0000039b: 	leal	0x4(%r8), %ecx
    0000039f: 	cmpl	%ecx, %esi
    000003a1: 	jle	.Ltmp113 # Offset: 929
    000003a3: 	movslq	%ecx, %rcx
    000003a6: 	andb	(%rdi,%rcx), %al
    000003a9: 	leal	0x5(%r8), %ecx
    000003ad: 	cmpl	%ecx, %esi
    000003af: 	jle	.Ltmp113 # Offset: 943
    000003b1: 	movslq	%ecx, %rcx
    000003b4: 	addl	$0x6, %r8d
    000003b8: 	andb	(%rdi,%rcx), %al
    000003bb: 	cmpl	%r8d, %esi
    000003be: 	jle	.Ltmp113 # Offset: 958
    000003c0: 	movslq	%r8d, %r8
    000003c3: 	andb	(%rdi,%r8), %al
.Ltmp113:
    000003c7: 	addq	$0x110, %rsp
    000003ce: 	andl	%edx, %eax
    000003d0: 	popq	%rbx
    000003d1: 	popq	%rbp
    000003d2: 	retq # Offset: 978
    000003d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp108:
    000003d8: 	xorl	%r10d, %r10d
    000003db: 	jmp	.Ltmp118 # Offset: 987
.Ltmp109:
    000003e0: 	movl	%edx, %r8d
    000003e3: 	movl	%edx, %r9d
    000003e6: 	xorl	%ebp, %ebp
    000003e8: 	xorl	%ecx, %ecx
    000003ea: 	jmp	.Ltmp119 # Offset: 1002
.Ltmp114:
    000003ef: 	movl	%r10d, %r8d
    000003f2: 	xorl	%ecx, %ecx
    000003f4: 	jmp	.Ltmp120 # Offset: 1012
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and7IhET_PKS0_iS0_"

Binary Function "_Z8bit_and8IhET_PKS0_iS0_" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0x3ab0
  Size        : 0x410
  MaxSize     : 0x410
  Offset      : 0x3ab0
  Section     : .text
  Orc Section : .local.text._Z8bit_and8IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdi, %rcx
    00000009: 	movl	%edx, %r8d
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x108, %rsp
    00000015: 	cmpl	$0x7, %esi
    00000018: 	jle	.Ltmp121 # Offset: 24
    0000001e: 	leal	-0x8(%rsi), %eax
    00000021: 	movl	%eax, %r9d
    00000024: 	shrl	$0x3, %r9d
    00000028: 	addl	$0x1, %r9d
    0000002c: 	cmpl	$0x7, %eax
    0000002f: 	jbe	.Ltmp122 # Offset: 47
    00000035: 	movq	$-0x1, -0x70(%rsp)
    0000003e: 	movzbl	%dl, %edx
    00000041: 	movq	%rdx, %rax
    00000044: 	shlq	$0x8, %rax
    00000048: 	orq	%rdx, %rax
    0000004b: 	shlq	$0x8, %rax
    0000004f: 	orq	%rdx, %rax
    00000052: 	shlq	$0x8, %rax
    00000056: 	orq	%rdx, %rax
    00000059: 	shlq	$0x8, %rax
    0000005d: 	orq	%rdx, %rax
    00000060: 	shlq	$0x8, %rax
    00000064: 	orq	%rdx, %rax
    00000067: 	shlq	$0x8, %rax
    0000006b: 	orq	%rdx, %rax
    0000006e: 	shlq	$0x8, %rax
    00000072: 	orq	%rdx, %rax
    00000075: 	movl	%r9d, %edx
    00000078: 	shrl	%edx
    0000007a: 	movq	%rax, -0x78(%rsp)
    0000007f: 	movdqa	-0x78(%rsp), %xmm0
    00000085: 	movq	%rdi, %rax
    00000088: 	subl	$0x1, %edx
    0000008b: 	shlq	$0x4, %rdx
    0000008f: 	leaq	0x10(%rdi,%rdx), %rdx
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp123:
    00000098: 	movdqu	(%rax), %xmm2
    0000009c: 	addq	$0x10, %rax
    000000a0: 	pand	%xmm2, %xmm0
    000000a4: 	cmpq	%rax, %rdx
    000000a7: 	jne	.Ltmp123 # Offset: 167
    000000a9: 	movl	%r9d, %eax
    000000ac: 	movd	%xmm0, %r8d
    000000b1: 	movaps	%xmm0, 0xf8(%rsp)
    000000b9: 	andb	0x100(%rsp), %r8b
    000000c1: 	movaps	%xmm0, 0xe8(%rsp)
    000000c9: 	andl	$-0x2, %eax
    000000cc: 	movaps	%xmm0, 0xd8(%rsp)
    000000d4: 	movzbl	0xe1(%rsp), %edx
    000000dc: 	andb	0xe9(%rsp), %dl
    000000e3: 	movaps	%xmm0, 0xc8(%rsp)
    000000eb: 	movaps	%xmm0, 0xb8(%rsp)
    000000f3: 	movzbl	0xc2(%rsp), %ebx
    000000fb: 	andb	0xca(%rsp), %bl
    00000102: 	movaps	%xmm0, 0xa8(%rsp)
    0000010a: 	movaps	%xmm0, 0x98(%rsp)
    00000112: 	movzbl	0xa3(%rsp), %ebp
    0000011a: 	andb	0xab(%rsp), %bpl
    00000122: 	movaps	%xmm0, 0x88(%rsp)
    0000012a: 	movaps	%xmm0, 0x78(%rsp)
    0000012f: 	movzbl	0x84(%rsp), %r12d
    00000138: 	andb	0x8c(%rsp), %r12b
    00000140: 	movaps	%xmm0, 0x68(%rsp)
    00000145: 	movaps	%xmm0, 0x58(%rsp)
    0000014a: 	movzbl	0x65(%rsp), %r11d
    00000150: 	andb	0x6d(%rsp), %r11b
    00000155: 	movaps	%xmm0, 0x48(%rsp)
    0000015a: 	movaps	%xmm0, 0x38(%rsp)
    0000015f: 	movzbl	0x46(%rsp), %r10d
    00000165: 	andb	0x4e(%rsp), %r10b
    0000016a: 	movaps	%xmm0, 0x28(%rsp)
    0000016f: 	movaps	%xmm0, 0x18(%rsp)
    00000174: 	movzbl	0x27(%rsp), %edi
    00000179: 	andb	0x2f(%rsp), %dil
    0000017e: 	testl	$0xc0000001, %r9d
    00000185: 	je	.Ltmp124 # Offset: 389
.Ltmp131:
    0000018b: 	movzbl	%r10b, %r10d
    0000018f: 	movzbl	%r11b, %r11d
    00000193: 	movzbl	%r12b, %r12d
    00000197: 	movzbl	%bpl, %ebp
    0000019b: 	movq	(%rcx,%rax,8), %xmm0
    000001a0: 	movzbl	%dil, %eax
    000001a4: 	movzbl	%bl, %ebx
    000001a7: 	movzbl	%dl, %edi
    000001aa: 	shlq	$0x8, %rax
    000001ae: 	movzbl	%r8b, %r8d
    000001b2: 	orq	%r10, %rax
    000001b5: 	shlq	$0x8, %rax
    000001b9: 	orq	%r11, %rax
    000001bc: 	shlq	$0x8, %rax
    000001c0: 	orq	%r12, %rax
    000001c3: 	shlq	$0x8, %rax
    000001c7: 	orq	%rbp, %rax
    000001ca: 	shlq	$0x8, %rax
    000001ce: 	orq	%rbx, %rax
    000001d1: 	shlq	$0x8, %rax
    000001d5: 	movq	%rax, %rdx
    000001d8: 	orq	%rdi, %rdx
    000001db: 	shlq	$0x8, %rdx
    000001df: 	orq	%r8, %rdx
    000001e2: 	movq	%rdx, %xmm3
    000001e7: 	pand	%xmm0, %xmm3
    000001eb: 	movq	%xmm3, %rax
    000001f0: 	movq	%xmm3, %rbx
    000001f5: 	movq	%xmm3, %rbp
    000001fa: 	movq	%xmm3, 0x10(%rsp)
    00000200: 	movl	%eax, %r8d
    00000203: 	movzbl	%ah, %edx
    00000206: 	movq	%xmm3, %r12
    0000020b: 	shrq	$0x38, %rax
    0000020f: 	shrq	$0x10, %rbx
    00000213: 	movq	%xmm3, %r11
    00000218: 	shrq	$0x18, %rbp
    0000021c: 	movq	%rax, %rdi
    0000021f: 	movq	%xmm3, %r10
    00000224: 	movq	%xmm3, 0x8(%rsp)
    0000022a: 	shrq	$0x20, %r12
    0000022e: 	movq	%xmm3, (%rsp)
    00000233: 	shrq	$0x28, %r11
    00000237: 	shrq	$0x30, %r10
    0000023b: 	movq	%xmm3, -0x8(%rsp)
    00000241: 	movq	%xmm3, -0x10(%rsp)
    00000247: 	movq	%xmm3, -0x18(%rsp)
    0000024d: 	movq	%xmm3, -0x20(%rsp)
    00000253: 	movq	%xmm3, -0x28(%rsp)
.Ltmp124:
    00000259: 	andl	%ebx, %edx
    0000025b: 	shll	$0x3, %r9d
    0000025f: 	andl	%ebp, %edx
    00000261: 	andl	%r12d, %edx
    00000264: 	andl	%r11d, %edx
    00000267: 	andl	%r10d, %edx
    0000026a: 	andl	%edi, %edx
.Ltmp130:
    0000026c: 	cmpl	%r9d, %esi
    0000026f: 	jle	.Ltmp125 # Offset: 623
    00000275: 	movl	%esi, %r10d
    00000278: 	subl	%r9d, %r10d
    0000027b: 	leal	-0x1(%r10), %eax
    0000027f: 	cmpl	$0xe, %eax
    00000282: 	jbe	.Ltmp126 # Offset: 642
    00000288: 	movl	%r10d, %eax
    0000028b: 	movslq	%r9d, %rdi
    0000028e: 	pcmpeqd	%xmm0, %xmm0
    00000292: 	shrl	$0x4, %eax
    00000295: 	addq	%rcx, %rdi
    00000298: 	leal	-0x1(%rax), %r11d
    0000029c: 	leaq	0x10(%rdi), %rax
    000002a0: 	shlq	$0x4, %r11
    000002a4: 	addq	%rax, %r11
    000002a7: 	jmp	.Ltmp127 # Offset: 679
    000002a9: 	nopl	(%rax) # Size: 7
.Ltmp128:
    000002b0: 	addq	$0x10, %rax
.Ltmp127:
    000002b4: 	movdqu	(%rdi), %xmm1
    000002b8: 	movq	%rax, %rdi
    000002bb: 	pand	%xmm1, %xmm0
    000002bf: 	cmpq	%r11, %rax
    000002c2: 	jne	.Ltmp128 # Offset: 706
    000002c4: 	movdqa	%xmm0, %xmm1
    000002c8: 	movl	%r10d, %eax
    000002cb: 	psrldq	$0x8, %xmm1
    000002d0: 	andl	$-0x10, %eax
    000002d3: 	pand	%xmm1, %xmm0
    000002d7: 	movdqa	%xmm0, %xmm1
    000002db: 	psrldq	$0x4, %xmm1
    000002e0: 	pand	%xmm1, %xmm0
    000002e4: 	movdqa	%xmm0, %xmm1
    000002e8: 	psrldq	$0x2, %xmm1
    000002ed: 	pand	%xmm1, %xmm0
    000002f1: 	movdqa	%xmm0, %xmm1
    000002f5: 	psrldq	$0x1, %xmm1
    000002fa: 	pand	%xmm1, %xmm0
    000002fe: 	movd	%xmm0, %edi
    00000302: 	andl	%edi, %r8d
    00000305: 	leal	(%rax,%r9), %edi
    00000309: 	cmpl	%r10d, %eax
    0000030c: 	je	.Ltmp125 # Offset: 780
.Ltmp132:
    00000312: 	subl	%eax, %r10d
    00000315: 	leal	-0x1(%r10), %r11d
    00000319: 	cmpl	$0x6, %r11d
    0000031d: 	jbe	.Ltmp129 # Offset: 797
    0000031f: 	movslq	%r9d, %r9
    00000322: 	addq	%rcx, %rax
    00000325: 	movq	(%rax,%r9), %rbx
    00000329: 	movzbl	%bh, %eax
    0000032c: 	movl	%ebx, %r9d
    0000032f: 	andl	%r9d, %eax
    00000332: 	andl	%r8d, %eax
    00000335: 	movq	%rbx, %r8
    00000338: 	shrq	$0x10, %r8
    0000033c: 	andl	%r8d, %eax
    0000033f: 	movq	%rbx, %r8
    00000342: 	shrq	$0x18, %r8
    00000346: 	andl	%r8d, %eax
    00000349: 	movq	%rbx, %r8
    0000034c: 	shrq	$0x20, %r8
    00000350: 	andl	%r8d, %eax
    00000353: 	movq	%rbx, %r8
    00000356: 	shrq	$0x28, %r8
    0000035a: 	andl	%r8d, %eax
    0000035d: 	movq	%rbx, %r8
    00000360: 	shrq	$0x38, %rbx
    00000364: 	shrq	$0x30, %r8
    00000368: 	andl	%r8d, %eax
    0000036b: 	andl	%ebx, %eax
    0000036d: 	movl	%eax, %r8d
    00000370: 	movl	%r10d, %eax
    00000373: 	andl	$-0x8, %eax
    00000376: 	addl	%eax, %edi
    00000378: 	cmpl	%r10d, %eax
    0000037b: 	je	.Ltmp125 # Offset: 891
.Ltmp129:
    0000037d: 	movslq	%edi, %rax
    00000380: 	andb	(%rcx,%rax), %r8b
    00000384: 	leal	0x1(%rdi), %eax
    00000387: 	cmpl	%eax, %esi
    00000389: 	jle	.Ltmp125 # Offset: 905
    0000038b: 	cltq
    0000038d: 	andb	(%rcx,%rax), %r8b
    00000391: 	leal	0x2(%rdi), %eax
    00000394: 	cmpl	%eax, %esi
    00000396: 	jle	.Ltmp125 # Offset: 918
    00000398: 	cltq
    0000039a: 	andb	(%rcx,%rax), %r8b
    0000039e: 	leal	0x3(%rdi), %eax
    000003a1: 	cmpl	%eax, %esi
    000003a3: 	jle	.Ltmp125 # Offset: 931
    000003a5: 	cltq
    000003a7: 	andb	(%rcx,%rax), %r8b
    000003ab: 	leal	0x4(%rdi), %eax
    000003ae: 	cmpl	%eax, %esi
    000003b0: 	jle	.Ltmp125 # Offset: 944
    000003b2: 	cltq
    000003b4: 	andb	(%rcx,%rax), %r8b
    000003b8: 	leal	0x5(%rdi), %eax
    000003bb: 	cmpl	%eax, %esi
    000003bd: 	jle	.Ltmp125 # Offset: 957
    000003bf: 	cltq
    000003c1: 	addl	$0x6, %edi
    000003c4: 	andb	(%rcx,%rax), %r8b
    000003c8: 	cmpl	%edi, %esi
    000003ca: 	jle	.Ltmp125 # Offset: 970
    000003cc: 	movslq	%edi, %rdi
    000003cf: 	andb	(%rcx,%rdi), %r8b
.Ltmp125:
    000003d3: 	addq	$0x108, %rsp
    000003da: 	movl	%r8d, %eax
    000003dd: 	popq	%rbx
    000003de: 	andl	%edx, %eax
    000003e0: 	popq	%rbp
    000003e1: 	popq	%r12
    000003e3: 	retq # Offset: 995
    000003e4: 	nopl	(%rax) # Size: 4
.Ltmp121:
    000003e8: 	xorl	%r9d, %r9d
    000003eb: 	jmp	.Ltmp130 # Offset: 1003
.Ltmp122:
    000003f0: 	movl	%edx, %edi
    000003f2: 	movl	%edx, %r10d
    000003f5: 	movl	%edx, %r11d
    000003f8: 	movl	%edx, %r12d
    000003fb: 	movl	%edx, %ebp
    000003fd: 	movl	%edx, %ebx
    000003ff: 	xorl	%eax, %eax
    00000401: 	jmp	.Ltmp131 # Offset: 1025
.Ltmp126:
    00000406: 	movl	%r9d, %edi
    00000409: 	xorl	%eax, %eax
    0000040b: 	jmp	.Ltmp132 # Offset: 1035
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and8IhET_PKS0_iS0_"

Binary Function "_Z7bit_or1IhET_PKS0_iS0_" after disassembly {
  Number      : 50
  State       : disassembled
  Address     : 0x3ec0
  Size        : 0x1c1
  MaxSize     : 0x1d0
  Offset      : 0x3ec0
  Section     : .text
  Orc Section : .local.text._Z7bit_or1IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp133 # Offset: 6
    0000000c: 	leal	-0x1(%rsi), %eax
    0000000f: 	cmpl	$0xe, %eax
    00000012: 	jbe	.Ltmp134 # Offset: 18
    00000018: 	movl	%esi, %eax
    0000001a: 	movq	%rdi, %rcx
    0000001d: 	pxor	%xmm0, %xmm0
    00000021: 	shrl	$0x4, %eax
    00000024: 	subl	$0x1, %eax
    00000027: 	shlq	$0x4, %rax
    0000002b: 	leaq	0x10(%rdi,%rax), %r8
.Ltmp135:
    00000030: 	movdqu	(%rcx), %xmm2
    00000034: 	addq	$0x10, %rcx
    00000038: 	por	%xmm2, %xmm0
    0000003c: 	cmpq	%rcx, %r8
    0000003f: 	jne	.Ltmp135 # Offset: 63
    00000041: 	movdqa	%xmm0, %xmm1
    00000045: 	movl	%esi, %eax
    00000047: 	psrldq	$0x8, %xmm1
    0000004c: 	andl	$-0x10, %eax
    0000004f: 	por	%xmm1, %xmm0
    00000053: 	movl	%eax, %r8d
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	por	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	por	%xmm1, %xmm0
    00000070: 	movdqa	%xmm0, %xmm1
    00000074: 	psrldq	$0x1, %xmm1
    00000079: 	por	%xmm1, %xmm0
    0000007d: 	movd	%xmm0, %ecx
    00000081: 	orl	%edx, %ecx
    00000083: 	cmpl	%eax, %esi
    00000085: 	je	.Ltmp136 # Offset: 133
.Ltmp139:
    0000008b: 	movl	%esi, %r9d
    0000008e: 	subl	%eax, %r9d
    00000091: 	leal	-0x1(%r9), %edx
    00000095: 	cmpl	$0x6, %edx
    00000098: 	jbe	.Ltmp137 # Offset: 152
    0000009e: 	movq	(%rdi,%rax), %rdx
    000000a2: 	pushq	%rbx
    000000a3: 	movl	%edx, %eax
    000000a5: 	movzbl	%dh, %ebx
    000000a8: 	orl	%ebx, %eax
    000000aa: 	orl	%ecx, %eax
    000000ac: 	movq	%rdx, %rcx
    000000af: 	shrq	$0x10, %rcx
    000000b3: 	orl	%ecx, %eax
    000000b5: 	movq	%rdx, %rcx
    000000b8: 	shrq	$0x18, %rcx
    000000bc: 	orl	%ecx, %eax
    000000be: 	movq	%rdx, %rcx
    000000c1: 	shrq	$0x20, %rcx
    000000c5: 	orl	%ecx, %eax
    000000c7: 	movq	%rdx, %rcx
    000000ca: 	shrq	$0x28, %rcx
    000000ce: 	orl	%ecx, %eax
    000000d0: 	movq	%rdx, %rcx
    000000d3: 	shrq	$0x38, %rdx
    000000d7: 	shrq	$0x30, %rcx
    000000db: 	orl	%ecx, %eax
    000000dd: 	orl	%edx, %eax
    000000df: 	movl	%r9d, %edx
    000000e2: 	andl	$-0x8, %edx
    000000e5: 	addl	%edx, %r8d
    000000e8: 	cmpl	%edx, %r9d
    000000eb: 	je	.Ltmp138 # Offset: 235
    000000ed: 	movslq	%r8d, %rdx
    000000f0: 	orb	(%rdi,%rdx), %al
    000000f3: 	leal	0x1(%r8), %edx
    000000f7: 	cmpl	%edx, %esi
    000000f9: 	jle	.Ltmp138 # Offset: 249
    000000fb: 	movslq	%edx, %rdx
    000000fe: 	orb	(%rdi,%rdx), %al
    00000101: 	leal	0x2(%r8), %edx
    00000105: 	cmpl	%esi, %edx
    00000107: 	jge	.Ltmp138 # Offset: 263
    00000109: 	movslq	%edx, %rdx
    0000010c: 	orb	(%rdi,%rdx), %al
    0000010f: 	leal	0x3(%r8), %edx
    00000113: 	cmpl	%edx, %esi
    00000115: 	jle	.Ltmp138 # Offset: 277
    00000117: 	movslq	%edx, %rdx
    0000011a: 	orb	(%rdi,%rdx), %al
    0000011d: 	leal	0x4(%r8), %edx
    00000121: 	cmpl	%edx, %esi
    00000123: 	jle	.Ltmp138 # Offset: 291
    00000125: 	movslq	%edx, %rdx
    00000128: 	orb	(%rdi,%rdx), %al
    0000012b: 	leal	0x5(%r8), %edx
    0000012f: 	cmpl	%edx, %esi
    00000131: 	jle	.Ltmp138 # Offset: 305
    00000133: 	movslq	%edx, %rdx
    00000136: 	addl	$0x6, %r8d
    0000013a: 	orb	(%rdi,%rdx), %al
    0000013d: 	cmpl	%r8d, %esi
    00000140: 	jle	.Ltmp138 # Offset: 320
    00000142: 	movslq	%r8d, %r8
    00000145: 	orb	(%rdi,%r8), %al
.Ltmp138:
    00000149: 	popq	%rbx
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp133:
    00000150: 	movl	%edx, %eax
    00000152: 	retq # Offset: 338
.Ltmp134:
    00000153: 	movl	%edx, %ecx
    00000155: 	xorl	%eax, %eax
    00000157: 	xorl	%r8d, %r8d
    0000015a: 	jmp	.Ltmp139 # Offset: 346
.Ltmp137:
    0000015f: 	movslq	%r8d, %rdx
    00000162: 	movl	%ecx, %eax
    00000164: 	orb	(%rdi,%rdx), %al
    00000167: 	leal	0x1(%r8), %edx
    0000016b: 	cmpl	%edx, %esi
    0000016d: 	jle	.Ltmp140 # Offset: 365
    0000016f: 	movslq	%edx, %rdx
    00000172: 	orb	(%rdi,%rdx), %al
    00000175: 	leal	0x2(%r8), %edx
    00000179: 	cmpl	%esi, %edx
    0000017b: 	jge	.Ltmp140 # Offset: 379
    0000017d: 	movslq	%edx, %rdx
    00000180: 	orb	(%rdi,%rdx), %al
    00000183: 	leal	0x3(%r8), %edx
    00000187: 	cmpl	%edx, %esi
    00000189: 	jle	.Ltmp140 # Offset: 393
    0000018b: 	movslq	%edx, %rdx
    0000018e: 	orb	(%rdi,%rdx), %al
    00000191: 	leal	0x4(%r8), %edx
    00000195: 	cmpl	%edx, %esi
    00000197: 	jle	.Ltmp140 # Offset: 407
    00000199: 	movslq	%edx, %rdx
    0000019c: 	orb	(%rdi,%rdx), %al
    0000019f: 	leal	0x5(%r8), %edx
    000001a3: 	cmpl	%edx, %esi
    000001a5: 	jle	.Ltmp140 # Offset: 421
    000001a7: 	movslq	%edx, %rdx
    000001aa: 	addl	$0x6, %r8d
    000001ae: 	orb	(%rdi,%rdx), %al
    000001b1: 	cmpl	%r8d, %esi
    000001b4: 	jle	.Ltmp140 # Offset: 436
    000001b6: 	movslq	%r8d, %r8
    000001b9: 	orb	(%rdi,%r8), %al
.Ltmp140:
    000001bd: 	retq # Offset: 445
.Ltmp136:
    000001be: 	movl	%ecx, %eax
    000001c0: 	retq # Offset: 448
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or1IhET_PKS0_iS0_"

Binary Function "_Z7bit_or2IhET_PKS0_iS0_" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0x4090
  Size        : 0x1b7
  MaxSize     : 0x1c0
  Offset      : 0x4090
  Section     : .text
  Orc Section : .local.text._Z7bit_or2IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movq	%rdi, %r9
    0000000a: 	addq	%rsi, %rdi
    0000000d: 	cmpq	%rdi, %r9
    00000010: 	je	.Ltmp141 # Offset: 16
    00000016: 	leaq	-0x1(%rsi), %r8
    0000001a: 	movq	%r9, %rax
    0000001d: 	cmpq	$0xe, %r8
    00000021: 	jbe	.Ltmp142 # Offset: 33
    00000027: 	movq	%rsi, %rcx
    0000002a: 	pxor	%xmm0, %xmm0
    0000002e: 	andq	$-0x10, %rcx
    00000032: 	addq	%r9, %rcx
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp143:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	por	%xmm2, %xmm0
    00000044: 	cmpq	%rcx, %rax
    00000047: 	jne	.Ltmp143 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movq	%rsi, %rax
    00000050: 	psrldq	$0x8, %xmm1
    00000055: 	andq	$-0x10, %rax
    00000059: 	por	%xmm1, %xmm0
    0000005d: 	leaq	(%r9,%rax), %r8
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	psrldq	$0x4, %xmm1
    0000006a: 	por	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x2, %xmm1
    00000077: 	por	%xmm1, %xmm0
    0000007b: 	movdqa	%xmm0, %xmm1
    0000007f: 	psrldq	$0x1, %xmm1
    00000084: 	por	%xmm1, %xmm0
    00000088: 	movd	%xmm0, %ecx
    0000008c: 	orl	%edx, %ecx
    0000008e: 	cmpq	%rax, %rsi
    00000091: 	je	.Ltmp144 # Offset: 145
.Ltmp147:
    00000097: 	subq	%rax, %rsi
    0000009a: 	leaq	-0x1(%rsi), %rdx
    0000009e: 	cmpq	$0x6, %rdx
    000000a2: 	jbe	.Ltmp145 # Offset: 162
    000000a8: 	movq	(%r9,%rax), %rdx
    000000ac: 	pushq	%rbx
    000000ad: 	movl	%edx, %eax
    000000af: 	movzbl	%dh, %ebx
    000000b2: 	orl	%ebx, %eax
    000000b4: 	orl	%ecx, %eax
    000000b6: 	movq	%rdx, %rcx
    000000b9: 	shrq	$0x10, %rcx
    000000bd: 	orl	%ecx, %eax
    000000bf: 	movq	%rdx, %rcx
    000000c2: 	shrq	$0x18, %rcx
    000000c6: 	orl	%ecx, %eax
    000000c8: 	movq	%rdx, %rcx
    000000cb: 	shrq	$0x20, %rcx
    000000cf: 	orl	%ecx, %eax
    000000d1: 	movq	%rdx, %rcx
    000000d4: 	shrq	$0x28, %rcx
    000000d8: 	orl	%ecx, %eax
    000000da: 	movq	%rdx, %rcx
    000000dd: 	shrq	$0x38, %rdx
    000000e1: 	shrq	$0x30, %rcx
    000000e5: 	orl	%ecx, %eax
    000000e7: 	orl	%edx, %eax
    000000e9: 	movq	%rsi, %rdx
    000000ec: 	andq	$-0x8, %rdx
    000000f0: 	addq	%rdx, %r8
    000000f3: 	cmpq	%rdx, %rsi
    000000f6: 	je	.Ltmp146 # Offset: 246
    000000f8: 	leaq	0x1(%r8), %rdx
    000000fc: 	orb	(%r8), %al
    000000ff: 	cmpq	%rdx, %rdi
    00000102: 	je	.Ltmp146 # Offset: 258
    00000104: 	leaq	0x2(%r8), %rdx
    00000108: 	orb	0x1(%r8), %al
    0000010c: 	cmpq	%rdx, %rdi
    0000010f: 	je	.Ltmp146 # Offset: 271
    00000111: 	leaq	0x3(%r8), %rdx
    00000115: 	orb	0x2(%r8), %al
    00000119: 	cmpq	%rdx, %rdi
    0000011c: 	je	.Ltmp146 # Offset: 284
    0000011e: 	leaq	0x4(%r8), %rdx
    00000122: 	orb	0x3(%r8), %al
    00000126: 	cmpq	%rdx, %rdi
    00000129: 	je	.Ltmp146 # Offset: 297
    0000012b: 	leaq	0x5(%r8), %rdx
    0000012f: 	orb	0x4(%r8), %al
    00000133: 	cmpq	%rdx, %rdi
    00000136: 	je	.Ltmp146 # Offset: 310
    00000138: 	leaq	0x6(%r8), %rdx
    0000013c: 	orb	0x5(%r8), %al
    00000140: 	cmpq	%rdx, %rdi
    00000143: 	je	.Ltmp146 # Offset: 323
    00000145: 	orb	0x6(%r8), %al
.Ltmp146:
    00000149: 	popq	%rbx
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp141:
    00000150: 	movl	%edx, %eax
    00000152: 	retq # Offset: 338
.Ltmp142:
    00000153: 	movl	%edx, %ecx
    00000155: 	movq	%r9, %r8
    00000158: 	xorl	%eax, %eax
    0000015a: 	jmp	.Ltmp147 # Offset: 346
.Ltmp145:
    0000015f: 	movzbl	(%r8), %eax
    00000163: 	leaq	0x1(%r8), %rdx
    00000167: 	orl	%ecx, %eax
    00000169: 	cmpq	%rdx, %rdi
    0000016c: 	je	.Ltmp148 # Offset: 364
    0000016e: 	leaq	0x2(%r8), %rdx
    00000172: 	orb	0x1(%r8), %al
    00000176: 	cmpq	%rdx, %rdi
    00000179: 	je	.Ltmp148 # Offset: 377
    0000017b: 	leaq	0x3(%r8), %rdx
    0000017f: 	orb	0x2(%r8), %al
    00000183: 	cmpq	%rdx, %rdi
    00000186: 	je	.Ltmp148 # Offset: 390
    00000188: 	leaq	0x4(%r8), %rdx
    0000018c: 	orb	0x3(%r8), %al
    00000190: 	cmpq	%rdx, %rdi
    00000193: 	je	.Ltmp148 # Offset: 403
    00000195: 	leaq	0x5(%r8), %rdx
    00000199: 	orb	0x4(%r8), %al
    0000019d: 	cmpq	%rdx, %rdi
    000001a0: 	je	.Ltmp148 # Offset: 416
    000001a2: 	leaq	0x6(%r8), %rdx
    000001a6: 	orb	0x5(%r8), %al
    000001aa: 	cmpq	%rdx, %rdi
    000001ad: 	je	.Ltmp148 # Offset: 429
    000001af: 	orb	0x6(%r8), %al
.Ltmp148:
    000001b3: 	retq # Offset: 435
.Ltmp144:
    000001b4: 	movl	%ecx, %eax
    000001b6: 	retq # Offset: 438
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or2IhET_PKS0_iS0_"

Binary Function "_Z7bit_or3IhET_PKS0_iS0_" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0x4250
  Size        : 0x2bb
  MaxSize     : 0x2c0
  Offset      : 0x4250
  Section     : .text
  Orc Section : .local.text._Z7bit_or3IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	leal	-0x1(%rsi), %edi
    0000000a: 	movl	%esi, %r8d
    0000000d: 	movl	%edx, %eax
    0000000f: 	testl	%edi, %edi
    00000011: 	jle	.Ltmp149 # Offset: 17
    00000017: 	leal	-0x2(%rsi), %r9d
    0000001b: 	movl	%r9d, %esi
    0000001e: 	shrl	%esi
    00000020: 	addl	$0x1, %esi
    00000023: 	cmpl	$0x1d, %r9d
    00000027: 	jbe	.Ltmp150 # Offset: 39
    0000002d: 	movl	%esi, %r9d
    00000030: 	movdqa	DATAat0x33580(%rip), %xmm4
    00000038: 	movq	%rcx, %rax
    0000003b: 	pxor	%xmm2, %xmm2
    0000003f: 	shrl	$0x4, %r9d
    00000043: 	subl	$0x1, %r9d
    00000047: 	shlq	$0x5, %r9
    0000004b: 	leaq	0x20(%rcx,%r9), %r9
.Ltmp151:
    00000050: 	movdqu	(%rax), %xmm0
    00000054: 	movdqu	0x10(%rax), %xmm3
    00000059: 	addq	$0x20, %rax
    0000005d: 	pand	%xmm4, %xmm0
    00000061: 	pand	%xmm4, %xmm3
    00000065: 	movdqa	%xmm0, %xmm1
    00000069: 	movdqu	-0x20(%rax), %xmm0
    0000006e: 	packuswb	%xmm3, %xmm1
    00000072: 	movdqu	-0x10(%rax), %xmm3
    00000077: 	psrlw	$0x8, %xmm0
    0000007c: 	psrlw	$0x8, %xmm3
    00000081: 	packuswb	%xmm3, %xmm0
    00000085: 	por	%xmm1, %xmm0
    00000089: 	por	%xmm0, %xmm2
    0000008d: 	cmpq	%r9, %rax
    00000090: 	jne	.Ltmp151 # Offset: 144
    00000092: 	movdqa	%xmm2, %xmm0
    00000096: 	movl	%esi, %r9d
    00000099: 	psrldq	$0x8, %xmm0
    0000009e: 	andl	$-0x10, %r9d
    000000a2: 	por	%xmm0, %xmm2
    000000a6: 	movdqa	%xmm2, %xmm0
    000000aa: 	psrldq	$0x4, %xmm0
    000000af: 	por	%xmm0, %xmm2
    000000b3: 	movdqa	%xmm2, %xmm0
    000000b7: 	psrldq	$0x2, %xmm0
    000000bc: 	por	%xmm0, %xmm2
    000000c0: 	movdqa	%xmm2, %xmm0
    000000c4: 	psrldq	$0x1, %xmm0
    000000c9: 	por	%xmm0, %xmm2
    000000cd: 	movd	%xmm2, %eax
    000000d1: 	orl	%edx, %eax
    000000d3: 	leal	(%r9,%r9), %edx
    000000d7: 	cmpl	%r9d, %esi
    000000da: 	je	.Ltmp152 # Offset: 218
.Ltmp155:
    000000e0: 	movslq	%edx, %r9
    000000e3: 	orb	(%rcx,%r9), %al
    000000e7: 	orb	0x1(%rcx,%r9), %al
    000000ec: 	leal	0x2(%rdx), %r9d
    000000f0: 	cmpl	%edi, %r9d
    000000f3: 	jge	.Ltmp152 # Offset: 243
    000000f9: 	movslq	%r9d, %r9
    000000fc: 	movzbl	0x1(%rcx,%r9), %r10d
    00000102: 	orb	(%rcx,%r9), %r10b
    00000106: 	movl	%r10d, %r9d
    00000109: 	orl	%r9d, %eax
    0000010c: 	leal	0x4(%rdx), %r9d
    00000110: 	cmpl	%r9d, %edi
    00000113: 	jle	.Ltmp152 # Offset: 275
    00000119: 	movslq	%r9d, %r9
    0000011c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000122: 	orb	(%rcx,%r9), %r10b
    00000126: 	movl	%r10d, %r9d
    00000129: 	orl	%r9d, %eax
    0000012c: 	leal	0x6(%rdx), %r9d
    00000130: 	cmpl	%r9d, %edi
    00000133: 	jle	.Ltmp152 # Offset: 307
    00000139: 	movslq	%r9d, %r9
    0000013c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000142: 	orb	(%rcx,%r9), %r10b
    00000146: 	movl	%r10d, %r9d
    00000149: 	orl	%r9d, %eax
    0000014c: 	leal	0x8(%rdx), %r9d
    00000150: 	cmpl	%r9d, %edi
    00000153: 	jle	.Ltmp152 # Offset: 339
    00000159: 	movslq	%r9d, %r9
    0000015c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000162: 	orb	(%rcx,%r9), %r10b
    00000166: 	movl	%r10d, %r9d
    00000169: 	orl	%r9d, %eax
    0000016c: 	leal	0xa(%rdx), %r9d
    00000170: 	cmpl	%r9d, %edi
    00000173: 	jle	.Ltmp152 # Offset: 371
    00000179: 	movslq	%r9d, %r9
    0000017c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000182: 	orb	(%rcx,%r9), %r10b
    00000186: 	movl	%r10d, %r9d
    00000189: 	orl	%r9d, %eax
    0000018c: 	leal	0xc(%rdx), %r9d
    00000190: 	cmpl	%r9d, %edi
    00000193: 	jle	.Ltmp152 # Offset: 403
    00000199: 	movslq	%r9d, %r9
    0000019c: 	movzbl	0x1(%rcx,%r9), %r10d
    000001a2: 	orb	(%rcx,%r9), %r10b
    000001a6: 	movl	%r10d, %r9d
    000001a9: 	orl	%r9d, %eax
    000001ac: 	leal	0xe(%rdx), %r9d
    000001b0: 	cmpl	%r9d, %edi
    000001b3: 	jle	.Ltmp152 # Offset: 435
    000001b9: 	movslq	%r9d, %r9
    000001bc: 	movzbl	0x1(%rcx,%r9), %r10d
    000001c2: 	orb	(%rcx,%r9), %r10b
    000001c6: 	movl	%r10d, %r9d
    000001c9: 	orl	%r9d, %eax
    000001cc: 	leal	0x10(%rdx), %r9d
    000001d0: 	cmpl	%r9d, %edi
    000001d3: 	jle	.Ltmp152 # Offset: 467
    000001d9: 	movslq	%r9d, %r9
    000001dc: 	movzbl	0x1(%rcx,%r9), %r10d
    000001e2: 	orb	(%rcx,%r9), %r10b
    000001e6: 	movl	%r10d, %r9d
    000001e9: 	orl	%r9d, %eax
    000001ec: 	leal	0x12(%rdx), %r9d
    000001f0: 	cmpl	%r9d, %edi
    000001f3: 	jle	.Ltmp152 # Offset: 499
    000001f9: 	movslq	%r9d, %r9
    000001fc: 	movzbl	0x1(%rcx,%r9), %r10d
    00000202: 	orb	(%rcx,%r9), %r10b
    00000206: 	movl	%r10d, %r9d
    00000209: 	orl	%r9d, %eax
    0000020c: 	leal	0x14(%rdx), %r9d
    00000210: 	cmpl	%r9d, %edi
    00000213: 	jle	.Ltmp152 # Offset: 531
    00000219: 	movslq	%r9d, %r9
    0000021c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000222: 	orb	(%rcx,%r9), %r10b
    00000226: 	movl	%r10d, %r9d
    00000229: 	orl	%r9d, %eax
    0000022c: 	leal	0x16(%rdx), %r9d
    00000230: 	cmpl	%r9d, %edi
    00000233: 	jle	.Ltmp152 # Offset: 563
    00000235: 	movslq	%r9d, %r9
    00000238: 	movzbl	0x1(%rcx,%r9), %r10d
    0000023e: 	orb	(%rcx,%r9), %r10b
    00000242: 	movl	%r10d, %r9d
    00000245: 	orl	%r9d, %eax
    00000248: 	leal	0x18(%rdx), %r9d
    0000024c: 	cmpl	%r9d, %edi
    0000024f: 	jle	.Ltmp152 # Offset: 591
    00000251: 	movslq	%r9d, %r9
    00000254: 	movzbl	0x1(%rcx,%r9), %r10d
    0000025a: 	orb	(%rcx,%r9), %r10b
    0000025e: 	movl	%r10d, %r9d
    00000261: 	orl	%r9d, %eax
    00000264: 	leal	0x1a(%rdx), %r9d
    00000268: 	cmpl	%r9d, %edi
    0000026b: 	jle	.Ltmp152 # Offset: 619
    0000026d: 	movslq	%r9d, %r9
    00000270: 	addl	$0x1c, %edx
    00000273: 	movzbl	0x1(%rcx,%r9), %r10d
    00000279: 	orb	(%rcx,%r9), %r10b
    0000027d: 	movl	%r10d, %r9d
    00000280: 	orl	%r9d, %eax
    00000283: 	cmpl	%edx, %edi
    00000285: 	jle	.Ltmp152 # Offset: 645
    00000287: 	movslq	%edx, %rdx
    0000028a: 	movzbl	0x1(%rcx,%rdx), %edi
    0000028f: 	orb	(%rcx,%rdx), %dil
    00000293: 	movl	%edi, %edx
    00000295: 	orl	%edx, %eax
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp152:
    000002a0: 	addl	%esi, %esi
.Ltmp154:
    000002a2: 	cmpl	%r8d, %esi
    000002a5: 	jge	.Ltmp153 # Offset: 677
    000002a7: 	movslq	%esi, %rsi
    000002aa: 	orb	(%rcx,%rsi), %al
.Ltmp153:
    000002ad: 	retq # Offset: 685
    000002ae: 	nop # Size: 2
.Ltmp149:
    000002b0: 	xorl	%esi, %esi
    000002b2: 	jmp	.Ltmp154 # Offset: 690
.Ltmp150:
    000002b4: 	xorl	%edx, %edx
    000002b6: 	jmp	.Ltmp155 # Offset: 694
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or3IhET_PKS0_iS0_"

Binary Function "_Z7bit_or4IhET_PKS0_iS0_" after disassembly {
  Number      : 53
  State       : disassembled
  Address     : 0x4510
  Size        : 0x41b
  MaxSize     : 0x420
  Offset      : 0x4510
  Section     : .text
  Orc Section : .local.text._Z7bit_or4IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	endbr64
    00000004: 	leal	-0x3(%rsi), %r8d
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%edx, %eax
    0000000d: 	movl	%esi, %edi
    0000000f: 	testl	%r8d, %r8d
    00000012: 	jle	.Ltmp156 # Offset: 18
    00000018: 	leal	-0x4(%rsi), %r9d
    0000001c: 	movl	%r9d, %esi
    0000001f: 	shrl	$0x2, %esi
    00000022: 	addl	$0x1, %esi
    00000025: 	cmpl	$0x3b, %r9d
    00000029: 	jbe	.Ltmp157 # Offset: 41
    0000002f: 	movl	%esi, %r9d
    00000032: 	movdqa	DATAat0x33580(%rip), %xmm5
    0000003a: 	movq	%rcx, %rax
    0000003d: 	pxor	%xmm2, %xmm2
    00000041: 	shrl	$0x4, %r9d
    00000045: 	subl	$0x1, %r9d
    00000049: 	shlq	$0x6, %r9
    0000004d: 	leaq	0x40(%rcx,%r9), %r9
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp158:
    00000058: 	movdqu	(%rax), %xmm1
    0000005c: 	movdqu	0x10(%rax), %xmm0
    00000061: 	movdqa	%xmm5, %xmm7
    00000065: 	addq	$0x40, %rax
    00000069: 	movdqu	-0x20(%rax), %xmm6
    0000006e: 	movdqu	-0x10(%rax), %xmm3
    00000073: 	pand	%xmm5, %xmm1
    00000077: 	pand	%xmm5, %xmm0
    0000007b: 	movdqa	%xmm1, %xmm4
    0000007f: 	movdqu	-0x30(%rax), %xmm1
    00000084: 	pand	%xmm5, %xmm6
    00000088: 	packuswb	%xmm0, %xmm4
    0000008c: 	movdqu	-0x40(%rax), %xmm0
    00000091: 	psrlw	$0x8, %xmm3
    00000096: 	psrlw	$0x8, %xmm1
    0000009b: 	psrlw	$0x8, %xmm0
    000000a0: 	packuswb	%xmm1, %xmm0
    000000a4: 	movdqu	-0x10(%rax), %xmm1
    000000a9: 	pand	%xmm5, %xmm1
    000000ad: 	packuswb	%xmm1, %xmm6
    000000b1: 	movdqu	-0x20(%rax), %xmm1
    000000b6: 	psrlw	$0x8, %xmm1
    000000bb: 	packuswb	%xmm3, %xmm1
    000000bf: 	movdqa	%xmm5, %xmm3
    000000c3: 	pand	%xmm1, %xmm7
    000000c7: 	psrlw	$0x8, %xmm1
    000000cc: 	pand	%xmm0, %xmm3
    000000d0: 	psrlw	$0x8, %xmm0
    000000d5: 	packuswb	%xmm7, %xmm3
    000000d9: 	movdqa	%xmm5, %xmm7
    000000dd: 	packuswb	%xmm1, %xmm0
    000000e1: 	movdqa	%xmm5, %xmm1
    000000e5: 	pand	%xmm6, %xmm7
    000000e9: 	pand	%xmm4, %xmm1
    000000ed: 	psrlw	$0x8, %xmm6
    000000f2: 	por	%xmm3, %xmm0
    000000f6: 	movdqa	%xmm1, %xmm3
    000000fa: 	movdqa	%xmm4, %xmm1
    000000fe: 	psrlw	$0x8, %xmm1
    00000103: 	packuswb	%xmm7, %xmm3
    00000107: 	packuswb	%xmm6, %xmm1
    0000010b: 	por	%xmm3, %xmm1
    0000010f: 	por	%xmm1, %xmm0
    00000113: 	por	%xmm0, %xmm2
    00000117: 	cmpq	%r9, %rax
    0000011a: 	jne	.Ltmp158 # Offset: 282
    00000120: 	movdqa	%xmm2, %xmm0
    00000124: 	movl	%esi, %r9d
    00000127: 	psrldq	$0x8, %xmm0
    0000012c: 	andl	$-0x10, %r9d
    00000130: 	por	%xmm0, %xmm2
    00000134: 	movdqa	%xmm2, %xmm0
    00000138: 	psrldq	$0x4, %xmm0
    0000013d: 	por	%xmm0, %xmm2
    00000141: 	movdqa	%xmm2, %xmm0
    00000145: 	psrldq	$0x2, %xmm0
    0000014a: 	por	%xmm0, %xmm2
    0000014e: 	movdqa	%xmm2, %xmm0
    00000152: 	psrldq	$0x1, %xmm0
    00000157: 	por	%xmm0, %xmm2
    0000015b: 	movd	%xmm2, %eax
    0000015f: 	orl	%edx, %eax
    00000161: 	leal	(,%r9,4), %edx
    00000169: 	cmpl	%esi, %r9d
    0000016c: 	je	.Ltmp159 # Offset: 364
.Ltmp162:
    00000172: 	movslq	%edx, %r9
    00000175: 	orb	(%rcx,%r9), %al
    00000179: 	orb	0x1(%rcx,%r9), %al
    0000017e: 	orb	0x2(%rcx,%r9), %al
    00000183: 	orb	0x3(%rcx,%r9), %al
    00000188: 	leal	0x4(%rdx), %r9d
    0000018c: 	cmpl	%r9d, %r8d
    0000018f: 	jle	.Ltmp159 # Offset: 399
    00000195: 	movslq	%r9d, %r9
    00000198: 	movzbl	0x1(%rcx,%r9), %r10d
    0000019e: 	orb	0x2(%rcx,%r9), %r10b
    000001a3: 	orb	(%rcx,%r9), %r10b
    000001a7: 	orb	0x3(%rcx,%r9), %r10b
    000001ac: 	movl	%r10d, %r9d
    000001af: 	orl	%r9d, %eax
    000001b2: 	leal	0x8(%rdx), %r9d
    000001b6: 	cmpl	%r9d, %r8d
    000001b9: 	jle	.Ltmp159 # Offset: 441
    000001bf: 	movslq	%r9d, %r9
    000001c2: 	movzbl	0x1(%rcx,%r9), %r10d
    000001c8: 	orb	0x2(%rcx,%r9), %r10b
    000001cd: 	orb	(%rcx,%r9), %r10b
    000001d1: 	orb	0x3(%rcx,%r9), %r10b
    000001d6: 	movl	%r10d, %r9d
    000001d9: 	orl	%r9d, %eax
    000001dc: 	leal	0xc(%rdx), %r9d
    000001e0: 	cmpl	%r9d, %r8d
    000001e3: 	jle	.Ltmp159 # Offset: 483
    000001e9: 	movslq	%r9d, %r9
    000001ec: 	movzbl	0x1(%rcx,%r9), %r10d
    000001f2: 	orb	0x2(%rcx,%r9), %r10b
    000001f7: 	orb	(%rcx,%r9), %r10b
    000001fb: 	orb	0x3(%rcx,%r9), %r10b
    00000200: 	movl	%r10d, %r9d
    00000203: 	orl	%r9d, %eax
    00000206: 	leal	0x10(%rdx), %r9d
    0000020a: 	cmpl	%r9d, %r8d
    0000020d: 	jle	.Ltmp159 # Offset: 525
    00000213: 	movslq	%r9d, %r9
    00000216: 	movzbl	0x1(%rcx,%r9), %r10d
    0000021c: 	orb	0x2(%rcx,%r9), %r10b
    00000221: 	orb	(%rcx,%r9), %r10b
    00000225: 	orb	0x3(%rcx,%r9), %r10b
    0000022a: 	movl	%r10d, %r9d
    0000022d: 	orl	%r9d, %eax
    00000230: 	leal	0x14(%rdx), %r9d
    00000234: 	cmpl	%r9d, %r8d
    00000237: 	jle	.Ltmp159 # Offset: 567
    0000023d: 	movslq	%r9d, %r9
    00000240: 	movzbl	0x1(%rcx,%r9), %r10d
    00000246: 	orb	0x2(%rcx,%r9), %r10b
    0000024b: 	orb	(%rcx,%r9), %r10b
    0000024f: 	orb	0x3(%rcx,%r9), %r10b
    00000254: 	movl	%r10d, %r9d
    00000257: 	orl	%r9d, %eax
    0000025a: 	leal	0x18(%rdx), %r9d
    0000025e: 	cmpl	%r9d, %r8d
    00000261: 	jle	.Ltmp159 # Offset: 609
    00000267: 	movslq	%r9d, %r9
    0000026a: 	movzbl	0x1(%rcx,%r9), %r10d
    00000270: 	orb	0x2(%rcx,%r9), %r10b
    00000275: 	orb	(%rcx,%r9), %r10b
    00000279: 	orb	0x3(%rcx,%r9), %r10b
    0000027e: 	movl	%r10d, %r9d
    00000281: 	orl	%r9d, %eax
    00000284: 	leal	0x1c(%rdx), %r9d
    00000288: 	cmpl	%r9d, %r8d
    0000028b: 	jle	.Ltmp159 # Offset: 651
    00000291: 	movslq	%r9d, %r9
    00000294: 	movzbl	0x1(%rcx,%r9), %r10d
    0000029a: 	orb	0x2(%rcx,%r9), %r10b
    0000029f: 	orb	(%rcx,%r9), %r10b
    000002a3: 	orb	0x3(%rcx,%r9), %r10b
    000002a8: 	movl	%r10d, %r9d
    000002ab: 	orl	%r9d, %eax
    000002ae: 	leal	0x20(%rdx), %r9d
    000002b2: 	cmpl	%r9d, %r8d
    000002b5: 	jle	.Ltmp159 # Offset: 693
    000002bb: 	movslq	%r9d, %r9
    000002be: 	movzbl	0x1(%rcx,%r9), %r10d
    000002c4: 	orb	0x2(%rcx,%r9), %r10b
    000002c9: 	orb	(%rcx,%r9), %r10b
    000002cd: 	orb	0x3(%rcx,%r9), %r10b
    000002d2: 	movl	%r10d, %r9d
    000002d5: 	orl	%r9d, %eax
    000002d8: 	leal	0x24(%rdx), %r9d
    000002dc: 	cmpl	%r9d, %r8d
    000002df: 	jle	.Ltmp159 # Offset: 735
    000002e5: 	movslq	%r9d, %r9
    000002e8: 	movzbl	0x1(%rcx,%r9), %r10d
    000002ee: 	orb	0x2(%rcx,%r9), %r10b
    000002f3: 	orb	(%rcx,%r9), %r10b
    000002f7: 	orb	0x3(%rcx,%r9), %r10b
    000002fc: 	movl	%r10d, %r9d
    000002ff: 	orl	%r9d, %eax
    00000302: 	leal	0x28(%rdx), %r9d
    00000306: 	cmpl	%r9d, %r8d
    00000309: 	jle	.Ltmp159 # Offset: 777
    0000030f: 	movslq	%r9d, %r9
    00000312: 	movzbl	0x1(%rcx,%r9), %r10d
    00000318: 	orb	0x2(%rcx,%r9), %r10b
    0000031d: 	orb	(%rcx,%r9), %r10b
    00000321: 	orb	0x3(%rcx,%r9), %r10b
    00000326: 	movl	%r10d, %r9d
    00000329: 	orl	%r9d, %eax
    0000032c: 	leal	0x2c(%rdx), %r9d
    00000330: 	cmpl	%r9d, %r8d
    00000333: 	jle	.Ltmp159 # Offset: 819
    00000339: 	movslq	%r9d, %r9
    0000033c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000342: 	orb	0x2(%rcx,%r9), %r10b
    00000347: 	orb	(%rcx,%r9), %r10b
    0000034b: 	orb	0x3(%rcx,%r9), %r10b
    00000350: 	movl	%r10d, %r9d
    00000353: 	orl	%r9d, %eax
    00000356: 	leal	0x30(%rdx), %r9d
    0000035a: 	cmpl	%r9d, %r8d
    0000035d: 	jle	.Ltmp159 # Offset: 861
    0000035f: 	movslq	%r9d, %r9
    00000362: 	movzbl	0x1(%rcx,%r9), %r10d
    00000368: 	orb	0x2(%rcx,%r9), %r10b
    0000036d: 	orb	(%rcx,%r9), %r10b
    00000371: 	orb	0x3(%rcx,%r9), %r10b
    00000376: 	movl	%r10d, %r9d
    00000379: 	orl	%r9d, %eax
    0000037c: 	leal	0x34(%rdx), %r9d
    00000380: 	cmpl	%r9d, %r8d
    00000383: 	jle	.Ltmp159 # Offset: 899
    00000385: 	movslq	%r9d, %r9
    00000388: 	addl	$0x38, %edx
    0000038b: 	movzbl	0x1(%rcx,%r9), %r10d
    00000391: 	orb	0x2(%rcx,%r9), %r10b
    00000396: 	orb	(%rcx,%r9), %r10b
    0000039a: 	orb	0x3(%rcx,%r9), %r10b
    0000039f: 	movl	%r10d, %r9d
    000003a2: 	orl	%r9d, %eax
    000003a5: 	cmpl	%edx, %r8d
    000003a8: 	jle	.Ltmp159 # Offset: 936
    000003aa: 	movslq	%edx, %rdx
    000003ad: 	movzbl	0x2(%rcx,%rdx), %r8d
    000003b3: 	orb	0x1(%rcx,%rdx), %r8b
    000003b8: 	orb	(%rcx,%rdx), %r8b
    000003bc: 	orb	0x3(%rcx,%rdx), %r8b
    000003c1: 	movl	%r8d, %edx
    000003c4: 	orl	%edx, %eax
    000003c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp159:
    000003d0: 	leal	(,%rsi,4), %edx
.Ltmp161:
    000003d7: 	cmpl	%edx, %edi
    000003d9: 	jle	.Ltmp160 # Offset: 985
    000003db: 	movslq	%edx, %rsi
    000003de: 	orb	(%rcx,%rsi), %al
    000003e1: 	leal	0x1(%rdx), %esi
    000003e4: 	cmpl	%edi, %esi
    000003e6: 	jge	.Ltmp160 # Offset: 998
    000003e8: 	movslq	%esi, %rsi
    000003eb: 	orb	(%rcx,%rsi), %al
    000003ee: 	leal	0x2(%rdx), %esi
    000003f1: 	cmpl	%edi, %esi
    000003f3: 	jge	.Ltmp160 # Offset: 1011
    000003f5: 	movslq	%esi, %rsi
    000003f8: 	addl	$0x3, %edx
    000003fb: 	orb	(%rcx,%rsi), %al
    000003fe: 	cmpl	%edx, %edi
    00000400: 	jle	.Ltmp160 # Offset: 1024
    00000402: 	movslq	%edx, %rdx
    00000405: 	orb	(%rcx,%rdx), %al
.Ltmp160:
    00000408: 	retq # Offset: 1032
    00000409: 	nopl	(%rax) # Size: 7
.Ltmp156:
    00000410: 	xorl	%edx, %edx
    00000412: 	jmp	.Ltmp161 # Offset: 1042
.Ltmp157:
    00000414: 	xorl	%edx, %edx
    00000416: 	jmp	.Ltmp162 # Offset: 1046
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or4IhET_PKS0_iS0_"

Binary Function "_Z7bit_or5IhET_PKS0_iS0_" after disassembly {
  Number      : 54
  State       : disassembled
  Address     : 0x4930
  Size        : 0x3d0
  MaxSize     : 0x3d0
  Offset      : 0x4930
  Section     : .text
  Orc Section : .local.text._Z7bit_or5IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	leal	-0x1(%rsi), %r8d
    00000009: 	movl	%edx, %eax
    0000000b: 	pushq	%rbx
    0000000c: 	subq	$0x110, %rsp
    00000013: 	testl	%r8d, %r8d
    00000016: 	jle	.Ltmp163 # Offset: 22
    0000001c: 	leal	-0x2(%rsi), %ecx
    0000001f: 	movl	%ecx, %r9d
    00000022: 	shrl	%r9d
    00000025: 	leal	0x1(%r9), %r10d
    00000029: 	cmpl	$0xd, %ecx
    0000002c: 	jbe	.Ltmp164 # Offset: 44
    00000032: 	movq	$0x0, -0x70(%rsp)
    0000003b: 	movzbl	%dl, %ecx
    0000003e: 	movl	%r10d, %edx
    00000041: 	movq	%rcx, %rax
    00000044: 	shrl	$0x3, %edx
    00000047: 	shlq	$0x8, %rax
    0000004b: 	subl	$0x1, %edx
    0000004e: 	orq	%rcx, %rax
    00000051: 	shlq	$0x4, %rdx
    00000055: 	movq	%rax, -0x78(%rsp)
    0000005a: 	movdqa	-0x78(%rsp), %xmm0
    00000060: 	movq	%rdi, %rax
    00000063: 	leaq	0x10(%rdi,%rdx), %rdx
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp165:
    00000070: 	movdqu	(%rax), %xmm2
    00000074: 	addq	$0x10, %rax
    00000078: 	por	%xmm2, %xmm0
    0000007c: 	cmpq	%rax, %rdx
    0000007f: 	jne	.Ltmp165 # Offset: 127
    00000081: 	movl	%r10d, %edx
    00000084: 	movd	%xmm0, %eax
    00000088: 	movaps	%xmm0, 0xf8(%rsp)
    00000090: 	orb	0xfa(%rsp), %al
    00000097: 	andl	$-0x8, %edx
    0000009a: 	movaps	%xmm0, 0xe8(%rsp)
    000000a2: 	orb	0xec(%rsp), %al
    000000a9: 	movaps	%xmm0, 0xd8(%rsp)
    000000b1: 	leal	(%rdx,%rdx), %r11d
    000000b5: 	orb	0xde(%rsp), %al
    000000bc: 	movaps	%xmm0, 0xc8(%rsp)
    000000c4: 	orb	0xd0(%rsp), %al
    000000cb: 	movaps	%xmm0, 0xb8(%rsp)
    000000d3: 	orb	0xc2(%rsp), %al
    000000da: 	movaps	%xmm0, 0xa8(%rsp)
    000000e2: 	orb	0xb4(%rsp), %al
    000000e9: 	movaps	%xmm0, 0x98(%rsp)
    000000f1: 	orb	0xa6(%rsp), %al
    000000f8: 	movaps	%xmm0, 0x88(%rsp)
    00000100: 	movaps	%xmm0, 0x78(%rsp)
    00000105: 	movzbl	0x7b(%rsp), %ecx
    0000010a: 	orb	0x89(%rsp), %cl
    00000111: 	movaps	%xmm0, 0x68(%rsp)
    00000116: 	orb	0x6d(%rsp), %cl
    0000011a: 	movaps	%xmm0, 0x58(%rsp)
    0000011f: 	orb	0x5f(%rsp), %cl
    00000123: 	movaps	%xmm0, 0x48(%rsp)
    00000128: 	orb	0x51(%rsp), %cl
    0000012c: 	movaps	%xmm0, 0x38(%rsp)
    00000131: 	orb	0x43(%rsp), %cl
    00000135: 	movaps	%xmm0, 0x28(%rsp)
    0000013a: 	orb	0x35(%rsp), %cl
    0000013e: 	movaps	%xmm0, 0x18(%rsp)
    00000143: 	orb	0x27(%rsp), %cl
    00000147: 	cmpl	%edx, %r10d
    0000014a: 	je	.Ltmp166 # Offset: 330
.Ltmp174:
    00000150: 	subl	%edx, %r9d
    00000153: 	leal	0x1(%r9), %ebx
    00000157: 	cmpl	$0x2, %r9d
    0000015b: 	jbe	.Ltmp167 # Offset: 347
    00000161: 	movzbl	%cl, %ecx
    00000164: 	movzbl	%al, %eax
    00000167: 	movq	(%rdi,%rdx,2), %xmm0
    0000016c: 	shlq	$0x8, %rcx
    00000170: 	orq	%rax, %rcx
    00000173: 	movq	%rcx, %xmm3
    00000178: 	por	%xmm0, %xmm3
    0000017c: 	movq	%xmm3, %rdx
    00000181: 	movq	%xmm3, %rcx
    00000186: 	movq	%xmm3, %r9
    0000018b: 	movq	%xmm3, 0x10(%rsp)
    00000191: 	shrq	$0x10, %rcx
    00000195: 	movl	%edx, %eax
    00000197: 	shrq	$0x18, %r9
    0000019b: 	movq	%xmm3, (%rsp)
    000001a0: 	orl	%ecx, %eax
    000001a2: 	movq	%xmm3, %rcx
    000001a7: 	movq	%xmm3, 0x8(%rsp)
    000001ad: 	shrq	$0x20, %rcx
    000001b1: 	movq	%xmm3, -0x8(%rsp)
    000001b7: 	orl	%ecx, %eax
    000001b9: 	movq	%xmm3, %rcx
    000001be: 	movq	%xmm3, -0x10(%rsp)
    000001c4: 	shrq	$0x30, %rcx
    000001c8: 	movq	%xmm3, -0x18(%rsp)
    000001ce: 	orl	%ecx, %eax
    000001d0: 	movzbl	%dh, %ecx
    000001d3: 	movl	%ebx, %edx
    000001d5: 	movq	%xmm3, -0x20(%rsp)
    000001db: 	orl	%r9d, %ecx
    000001de: 	movq	%xmm3, %r9
    000001e3: 	andl	$-0x4, %edx
    000001e6: 	movq	%xmm3, -0x28(%rsp)
    000001ec: 	shrq	$0x28, %r9
    000001f0: 	leal	(%r11,%rdx,2), %r11d
    000001f4: 	orl	%r9d, %ecx
    000001f7: 	movq	%xmm3, %r9
    000001fc: 	shrq	$0x38, %r9
    00000200: 	orl	%r9d, %ecx
    00000203: 	cmpl	%edx, %ebx
    00000205: 	je	.Ltmp166 # Offset: 517
.Ltmp167:
    00000207: 	movslq	%r11d, %rdx
    0000020a: 	orb	(%rdi,%rdx), %al
    0000020d: 	orb	0x1(%rdi,%rdx), %cl
    00000211: 	leal	0x2(%r11), %edx
    00000215: 	cmpl	%edx, %r8d
    00000218: 	jle	.Ltmp166 # Offset: 536
    0000021a: 	movslq	%edx, %rdx
    0000021d: 	addl	$0x4, %r11d
    00000221: 	orb	(%rdi,%rdx), %al
    00000224: 	orb	0x1(%rdi,%rdx), %cl
    00000228: 	cmpl	%r11d, %r8d
    0000022b: 	jle	.Ltmp166 # Offset: 555
    0000022d: 	movslq	%r11d, %r11
    00000230: 	orb	(%rdi,%r11), %al
    00000234: 	orb	0x1(%rdi,%r11), %cl
.Ltmp166:
    00000239: 	addl	%r10d, %r10d
.Ltmp173:
    0000023c: 	cmpl	%r10d, %esi
    0000023f: 	jle	.Ltmp168 # Offset: 575
    00000245: 	movl	%esi, %r9d
    00000248: 	subl	%r10d, %r9d
    0000024b: 	leal	-0x1(%r9), %edx
    0000024f: 	cmpl	$0xe, %edx
    00000252: 	jbe	.Ltmp169 # Offset: 594
    00000258: 	movl	%r9d, %edx
    0000025b: 	movslq	%r10d, %r8
    0000025e: 	pxor	%xmm0, %xmm0
    00000262: 	shrl	$0x4, %edx
    00000265: 	addq	%rdi, %r8
    00000268: 	leal	-0x1(%rdx), %r11d
    0000026c: 	leaq	0x10(%r8), %rdx
    00000270: 	shlq	$0x4, %r11
    00000274: 	addq	%rdx, %r11
    00000277: 	jmp	.Ltmp170 # Offset: 631
    00000279: 	nopl	(%rax) # Size: 7
.Ltmp171:
    00000280: 	addq	$0x10, %rdx
.Ltmp170:
    00000284: 	movdqu	(%r8), %xmm1
    00000289: 	movq	%rdx, %r8
    0000028c: 	por	%xmm1, %xmm0
    00000290: 	cmpq	%r11, %rdx
    00000293: 	jne	.Ltmp171 # Offset: 659
    00000295: 	movdqa	%xmm0, %xmm1
    00000299: 	psrldq	$0x8, %xmm1
    0000029e: 	por	%xmm1, %xmm0
    000002a2: 	movdqa	%xmm0, %xmm1
    000002a6: 	psrldq	$0x4, %xmm1
    000002ab: 	por	%xmm1, %xmm0
    000002af: 	movdqa	%xmm0, %xmm1
    000002b3: 	psrldq	$0x2, %xmm1
    000002b8: 	por	%xmm1, %xmm0
    000002bc: 	movdqa	%xmm0, %xmm1
    000002c0: 	psrldq	$0x1, %xmm1
    000002c5: 	por	%xmm1, %xmm0
    000002c9: 	movd	%xmm0, %edx
    000002cd: 	orl	%edx, %eax
    000002cf: 	movl	%r9d, %edx
    000002d2: 	andl	$-0x10, %edx
    000002d5: 	leal	(%rdx,%r10), %r8d
    000002d9: 	cmpl	%r9d, %edx
    000002dc: 	je	.Ltmp168 # Offset: 732
.Ltmp175:
    000002e2: 	subl	%edx, %r9d
    000002e5: 	leal	-0x1(%r9), %r11d
    000002e9: 	cmpl	$0x6, %r11d
    000002ed: 	jbe	.Ltmp172 # Offset: 749
    000002ef: 	movslq	%r10d, %r10
    000002f2: 	addq	%rdi, %r10
    000002f5: 	movq	(%r10,%rdx), %rbx
    000002f9: 	movl	%ebx, %edx
    000002fb: 	movzbl	%bh, %ebp
    000002fe: 	orl	%ebp, %edx
    00000300: 	orl	%eax, %edx
    00000302: 	movq	%rbx, %rax
    00000305: 	shrq	$0x10, %rax
    00000309: 	orl	%eax, %edx
    0000030b: 	movq	%rbx, %rax
    0000030e: 	shrq	$0x18, %rax
    00000312: 	orl	%eax, %edx
    00000314: 	movq	%rbx, %rax
    00000317: 	shrq	$0x20, %rax
    0000031b: 	orl	%eax, %edx
    0000031d: 	movq	%rbx, %rax
    00000320: 	shrq	$0x28, %rax
    00000324: 	orl	%eax, %edx
    00000326: 	movq	%rbx, %rax
    00000329: 	shrq	$0x38, %rbx
    0000032d: 	shrq	$0x30, %rax
    00000331: 	orl	%eax, %edx
    00000333: 	movl	%edx, %eax
    00000335: 	movl	%r9d, %edx
    00000338: 	andl	$-0x8, %edx
    0000033b: 	orl	%ebx, %eax
    0000033d: 	addl	%edx, %r8d
    00000340: 	cmpl	%edx, %r9d
    00000343: 	je	.Ltmp168 # Offset: 835
.Ltmp172:
    00000345: 	movslq	%r8d, %rdx
    00000348: 	orb	(%rdi,%rdx), %al
    0000034b: 	leal	0x1(%r8), %edx
    0000034f: 	cmpl	%edx, %esi
    00000351: 	jle	.Ltmp168 # Offset: 849
    00000353: 	movslq	%edx, %rdx
    00000356: 	orb	(%rdi,%rdx), %al
    00000359: 	leal	0x2(%r8), %edx
    0000035d: 	cmpl	%edx, %esi
    0000035f: 	jle	.Ltmp168 # Offset: 863
    00000361: 	movslq	%edx, %rdx
    00000364: 	orb	(%rdi,%rdx), %al
    00000367: 	leal	0x3(%r8), %edx
    0000036b: 	cmpl	%edx, %esi
    0000036d: 	jle	.Ltmp168 # Offset: 877
    0000036f: 	movslq	%edx, %rdx
    00000372: 	orb	(%rdi,%rdx), %al
    00000375: 	leal	0x4(%r8), %edx
    00000379: 	cmpl	%edx, %esi
    0000037b: 	jle	.Ltmp168 # Offset: 891
    0000037d: 	movslq	%edx, %rdx
    00000380: 	orb	(%rdi,%rdx), %al
    00000383: 	leal	0x5(%r8), %edx
    00000387: 	cmpl	%edx, %esi
    00000389: 	jle	.Ltmp168 # Offset: 905
    0000038b: 	movslq	%edx, %rdx
    0000038e: 	addl	$0x6, %r8d
    00000392: 	orb	(%rdi,%rdx), %al
    00000395: 	cmpl	%r8d, %esi
    00000398: 	jle	.Ltmp168 # Offset: 920
    0000039a: 	movslq	%r8d, %r8
    0000039d: 	orb	(%rdi,%r8), %al
.Ltmp168:
    000003a1: 	addq	$0x110, %rsp
    000003a8: 	orl	%ecx, %eax
    000003aa: 	popq	%rbx
    000003ab: 	popq	%rbp
    000003ac: 	retq # Offset: 940
    000003ad: 	nopl	(%rax) # Size: 3
.Ltmp163:
    000003b0: 	movl	%edx, %ecx
    000003b2: 	xorl	%r10d, %r10d
    000003b5: 	jmp	.Ltmp173 # Offset: 949
.Ltmp164:
    000003ba: 	movl	%edx, %ecx
    000003bc: 	xorl	%r11d, %r11d
    000003bf: 	xorl	%edx, %edx
    000003c1: 	jmp	.Ltmp174 # Offset: 961
.Ltmp169:
    000003c6: 	movl	%r10d, %r8d
    000003c9: 	xorl	%edx, %edx
    000003cb: 	jmp	.Ltmp175 # Offset: 971
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or5IhET_PKS0_iS0_"

Binary Function "_Z7bit_or6IhET_PKS0_iS0_" after disassembly {
  Number      : 55
  State       : disassembled
  Address     : 0x4d00
  Size        : 0x3e5
  MaxSize     : 0x3f0
  Offset      : 0x4d00
  Section     : .text
  Orc Section : .local.text._Z7bit_or6IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movl	%esi, %r8d
    00000008: 	movl	%edx, %eax
    0000000a: 	pushq	%rbx
    0000000b: 	subq	$0x110, %rsp
    00000012: 	cmpl	$0x3, %esi
    00000015: 	jle	.Ltmp176 # Offset: 21
    0000001b: 	leal	-0x4(%rsi), %ecx
    0000001e: 	movl	%ecx, %ebx
    00000020: 	shrl	$0x2, %ebx
    00000023: 	leal	0x1(%rbx), %r9d
    00000027: 	cmpl	$0xb, %ecx
    0000002a: 	jbe	.Ltmp177 # Offset: 42
    00000030: 	movq	$0x0, -0x70(%rsp)
    00000039: 	movzbl	%dl, %edx
    0000003c: 	movq	%rdx, %rax
    0000003f: 	shlq	$0x8, %rax
    00000043: 	orq	%rdx, %rax
    00000046: 	shlq	$0x8, %rax
    0000004a: 	orq	%rdx, %rax
    0000004d: 	shlq	$0x8, %rax
    00000051: 	orq	%rdx, %rax
    00000054: 	movl	%r9d, %edx
    00000057: 	shrl	$0x2, %edx
    0000005a: 	movq	%rax, -0x78(%rsp)
    0000005f: 	movdqa	-0x78(%rsp), %xmm0
    00000065: 	movq	%rdi, %rax
    00000068: 	subl	$0x1, %edx
    0000006b: 	shlq	$0x4, %rdx
    0000006f: 	leaq	0x10(%rdi,%rdx), %rdx
    00000074: 	nopl	(%rax) # Size: 4
.Ltmp178:
    00000078: 	movdqu	(%rax), %xmm2
    0000007c: 	addq	$0x10, %rax
    00000080: 	por	%xmm2, %xmm0
    00000084: 	cmpq	%rax, %rdx
    00000087: 	jne	.Ltmp178 # Offset: 135
    00000089: 	movaps	%xmm0, 0xc8(%rsp)
    00000091: 	movd	%xmm0, %eax
    00000095: 	movaps	%xmm0, 0xb8(%rsp)
    0000009d: 	movzbl	0xbd(%rsp), %edx
    000000a5: 	orb	0xc9(%rsp), %dl
    000000ac: 	movaps	%xmm0, 0xa8(%rsp)
    000000b4: 	orb	0xb1(%rsp), %dl
    000000bb: 	movaps	%xmm0, 0x98(%rsp)
    000000c3: 	orb	0xa5(%rsp), %dl
    000000ca: 	movzbl	%dl, %r11d
    000000ce: 	movl	%r9d, %edx
    000000d1: 	movaps	%xmm0, 0xf8(%rsp)
    000000d9: 	orb	0xfc(%rsp), %al
    000000e0: 	andl	$-0x4, %edx
    000000e3: 	movaps	%xmm0, 0xe8(%rsp)
    000000eb: 	orb	0xf0(%rsp), %al
    000000f2: 	movaps	%xmm0, 0xd8(%rsp)
    000000fa: 	leal	(,%rdx,4), %esi
    00000101: 	orb	0xe4(%rsp), %al
    00000108: 	movaps	%xmm0, 0x88(%rsp)
    00000110: 	movaps	%xmm0, 0x78(%rsp)
    00000115: 	movzbl	0x7e(%rsp), %ebp
    0000011a: 	orb	0x8a(%rsp), %bpl
    00000122: 	movaps	%xmm0, 0x68(%rsp)
    00000127: 	orb	0x72(%rsp), %bpl
    0000012c: 	movaps	%xmm0, 0x58(%rsp)
    00000131: 	orb	0x66(%rsp), %bpl
    00000136: 	movaps	%xmm0, 0x48(%rsp)
    0000013b: 	movaps	%xmm0, 0x38(%rsp)
    00000140: 	movzbl	0x3f(%rsp), %ecx
    00000145: 	orb	0x4b(%rsp), %cl
    00000149: 	movaps	%xmm0, 0x28(%rsp)
    0000014e: 	orb	0x33(%rsp), %cl
    00000152: 	movaps	%xmm0, 0x18(%rsp)
    00000157: 	orb	0x27(%rsp), %cl
    0000015b: 	cmpl	%edx, %r9d
    0000015e: 	je	.Ltmp179 # Offset: 350
.Ltmp187:
    00000164: 	movl	%r9d, %r10d
    00000167: 	subl	%edx, %r10d
    0000016a: 	cmpl	%edx, %ebx
    0000016c: 	je	.Ltmp180 # Offset: 364
    00000172: 	movq	(%rdi,%rdx,4), %xmm0
    00000177: 	movzbl	%cl, %edx
    0000017a: 	movzbl	%bpl, %ebp
    0000017e: 	movzbl	%al, %eax
    00000181: 	shlq	$0x8, %rdx
    00000185: 	orq	%rbp, %rdx
    00000188: 	shlq	$0x8, %rdx
    0000018c: 	orq	%r11, %rdx
    0000018f: 	shlq	$0x8, %rdx
    00000193: 	orq	%rax, %rdx
    00000196: 	movq	%rdx, %xmm3
    0000019b: 	por	%xmm0, %xmm3
    0000019f: 	movq	%xmm3, %rbx
    000001a4: 	movq	%xmm3, %rdx
    000001a9: 	movq	%xmm3, %rcx
    000001ae: 	movq	%xmm3, 0x10(%rsp)
    000001b4: 	shrq	$0x20, %rdx
    000001b8: 	movl	%ebx, %eax
    000001ba: 	shrq	$0x28, %rcx
    000001be: 	movq	%xmm3, %rbp
    000001c3: 	orl	%edx, %eax
    000001c5: 	movzbl	%bh, %edx
    000001c8: 	shrq	$0x30, %rbp
    000001cc: 	movq	%xmm3, 0x8(%rsp)
    000001d2: 	orl	%ecx, %edx
    000001d4: 	movq	%xmm3, %rcx
    000001d9: 	movq	%xmm3, (%rsp)
    000001de: 	movl	%edx, %r11d
    000001e1: 	movq	%xmm3, %rdx
    000001e6: 	shrq	$0x38, %rcx
    000001ea: 	movq	%xmm3, -0x8(%rsp)
    000001f0: 	shrq	$0x10, %rdx
    000001f4: 	movq	%xmm3, -0x10(%rsp)
    000001fa: 	orl	%edx, %ebp
    000001fc: 	movq	%xmm3, %rdx
    00000201: 	movq	%xmm3, -0x18(%rsp)
    00000207: 	shrq	$0x18, %rdx
    0000020b: 	movq	%xmm3, -0x20(%rsp)
    00000211: 	orl	%edx, %ecx
    00000213: 	movl	%r10d, %edx
    00000216: 	movq	%xmm3, -0x28(%rsp)
    0000021c: 	andl	$-0x2, %edx
    0000021f: 	leal	(%rsi,%rdx,4), %esi
    00000222: 	cmpl	%edx, %r10d
    00000225: 	je	.Ltmp179 # Offset: 549
.Ltmp180:
    00000227: 	movslq	%esi, %rsi
    0000022a: 	orb	(%rdi,%rsi), %al
    0000022d: 	orb	0x1(%rdi,%rsi), %r11b
    00000232: 	orb	0x2(%rdi,%rsi), %bpl
    00000237: 	orb	0x3(%rdi,%rsi), %cl
.Ltmp179:
    0000023b: 	movl	%r11d, %edx
    0000023e: 	shll	$0x2, %r9d
    00000242: 	orl	%ebp, %edx
    00000244: 	movl	%edx, %esi
    00000246: 	orl	%ecx, %esi
.Ltmp186:
    00000248: 	cmpl	%r9d, %r8d
    0000024b: 	jle	.Ltmp181 # Offset: 587
    00000251: 	movl	%r8d, %r11d
    00000254: 	subl	%r9d, %r11d
    00000257: 	leal	-0x1(%r11), %edx
    0000025b: 	cmpl	$0xe, %edx
    0000025e: 	jbe	.Ltmp182 # Offset: 606
    00000264: 	movl	%r11d, %ecx
    00000267: 	movslq	%r9d, %rdx
    0000026a: 	pxor	%xmm0, %xmm0
    0000026e: 	shrl	$0x4, %ecx
    00000271: 	addq	%rdi, %rdx
    00000274: 	leal	-0x1(%rcx), %r10d
    00000278: 	leaq	0x10(%rdx), %rcx
    0000027c: 	shlq	$0x4, %r10
    00000280: 	addq	%rcx, %r10
    00000283: 	jmp	.Ltmp183 # Offset: 643
    00000285: 	nopl	(%rax) # Size: 3
.Ltmp184:
    00000288: 	addq	$0x10, %rcx
.Ltmp183:
    0000028c: 	movdqu	(%rdx), %xmm1
    00000290: 	movq	%rcx, %rdx
    00000293: 	por	%xmm1, %xmm0
    00000297: 	cmpq	%r10, %rcx
    0000029a: 	jne	.Ltmp184 # Offset: 666
    0000029c: 	movdqa	%xmm0, %xmm1
    000002a0: 	movl	%r11d, %edx
    000002a3: 	psrldq	$0x8, %xmm1
    000002a8: 	andl	$-0x10, %edx
    000002ab: 	por	%xmm1, %xmm0
    000002af: 	leal	(%rdx,%r9), %r10d
    000002b3: 	movdqa	%xmm0, %xmm1
    000002b7: 	psrldq	$0x4, %xmm1
    000002bc: 	por	%xmm1, %xmm0
    000002c0: 	movdqa	%xmm0, %xmm1
    000002c4: 	psrldq	$0x2, %xmm1
    000002c9: 	por	%xmm1, %xmm0
    000002cd: 	movdqa	%xmm0, %xmm1
    000002d1: 	psrldq	$0x1, %xmm1
    000002d6: 	por	%xmm1, %xmm0
    000002da: 	movd	%xmm0, %ecx
    000002de: 	orl	%ecx, %eax
    000002e0: 	cmpl	%r11d, %edx
    000002e3: 	je	.Ltmp181 # Offset: 739
.Ltmp188:
    000002e9: 	subl	%edx, %r11d
    000002ec: 	leal	-0x1(%r11), %ecx
    000002f0: 	cmpl	$0x6, %ecx
    000002f3: 	jbe	.Ltmp185 # Offset: 755
    000002f5: 	movslq	%r9d, %r9
    000002f8: 	addq	%rdi, %r9
    000002fb: 	movq	(%r9,%rdx), %rcx
    000002ff: 	movl	%ecx, %edx
    00000301: 	movzbl	%ch, %ebx
    00000304: 	orl	%ebx, %edx
    00000306: 	orl	%edx, %eax
    00000308: 	movq	%rcx, %rdx
    0000030b: 	shrq	$0x10, %rdx
    0000030f: 	orl	%edx, %eax
    00000311: 	movq	%rcx, %rdx
    00000314: 	shrq	$0x18, %rdx
    00000318: 	orl	%edx, %eax
    0000031a: 	movq	%rcx, %rdx
    0000031d: 	shrq	$0x20, %rdx
    00000321: 	orl	%edx, %eax
    00000323: 	movq	%rcx, %rdx
    00000326: 	shrq	$0x28, %rdx
    0000032a: 	orl	%edx, %eax
    0000032c: 	movq	%rcx, %rdx
    0000032f: 	shrq	$0x38, %rcx
    00000333: 	shrq	$0x30, %rdx
    00000337: 	orl	%edx, %eax
    00000339: 	movl	%r11d, %edx
    0000033c: 	andl	$-0x8, %edx
    0000033f: 	orl	%ecx, %eax
    00000341: 	addl	%edx, %r10d
    00000344: 	cmpl	%edx, %r11d
    00000347: 	je	.Ltmp181 # Offset: 839
.Ltmp185:
    00000349: 	movslq	%r10d, %rdx
    0000034c: 	orb	(%rdi,%rdx), %al
    0000034f: 	leal	0x1(%r10), %edx
    00000353: 	cmpl	%r8d, %edx
    00000356: 	jge	.Ltmp181 # Offset: 854
    00000358: 	movslq	%edx, %rdx
    0000035b: 	orb	(%rdi,%rdx), %al
    0000035e: 	leal	0x2(%r10), %edx
    00000362: 	cmpl	%r8d, %edx
    00000365: 	jge	.Ltmp181 # Offset: 869
    00000367: 	movslq	%edx, %rdx
    0000036a: 	orb	(%rdi,%rdx), %al
    0000036d: 	leal	0x3(%r10), %edx
    00000371: 	cmpl	%edx, %r8d
    00000374: 	jle	.Ltmp181 # Offset: 884
    00000376: 	movslq	%edx, %rdx
    00000379: 	orb	(%rdi,%rdx), %al
    0000037c: 	leal	0x4(%r10), %edx
    00000380: 	cmpl	%edx, %r8d
    00000383: 	jle	.Ltmp181 # Offset: 899
    00000385: 	movslq	%edx, %rdx
    00000388: 	orb	(%rdi,%rdx), %al
    0000038b: 	leal	0x5(%r10), %edx
    0000038f: 	cmpl	%edx, %r8d
    00000392: 	jle	.Ltmp181 # Offset: 914
    00000394: 	movslq	%edx, %rdx
    00000397: 	addl	$0x6, %r10d
    0000039b: 	orb	(%rdi,%rdx), %al
    0000039e: 	cmpl	%r10d, %r8d
    000003a1: 	jle	.Ltmp181 # Offset: 929
    000003a3: 	movslq	%r10d, %r10
    000003a6: 	orb	(%rdi,%r10), %al
.Ltmp181:
    000003aa: 	addq	$0x110, %rsp
    000003b1: 	orl	%esi, %eax
    000003b3: 	popq	%rbx
    000003b4: 	popq	%rbp
    000003b5: 	retq # Offset: 949
    000003b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp176:
    000003c0: 	movl	%edx, %esi
    000003c2: 	xorl	%r9d, %r9d
    000003c5: 	jmp	.Ltmp186 # Offset: 965
.Ltmp177:
    000003ca: 	movl	%edx, %ecx
    000003cc: 	movl	%edx, %ebp
    000003ce: 	movzbl	%dl, %r11d
    000003d2: 	xorl	%esi, %esi
    000003d4: 	xorl	%edx, %edx
    000003d6: 	jmp	.Ltmp187 # Offset: 982
.Ltmp182:
    000003db: 	movl	%r9d, %r10d
    000003de: 	xorl	%edx, %edx
    000003e0: 	jmp	.Ltmp188 # Offset: 992
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or6IhET_PKS0_iS0_"

Binary Function "_Z7bit_or7IhET_PKS0_iS0_" after disassembly {
  Number      : 56
  State       : disassembled
  Address     : 0x50f0
  Size        : 0x3e5
  MaxSize     : 0x3f0
  Offset      : 0x50f0
  Section     : .text
  Orc Section : .local.text._Z7bit_or7IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movl	%esi, %r8d
    00000008: 	movl	%edx, %eax
    0000000a: 	pushq	%rbx
    0000000b: 	subq	$0x110, %rsp
    00000012: 	cmpl	$0x3, %esi
    00000015: 	jle	.Ltmp189 # Offset: 21
    0000001b: 	leal	-0x4(%rsi), %ecx
    0000001e: 	movl	%ecx, %ebx
    00000020: 	shrl	$0x2, %ebx
    00000023: 	leal	0x1(%rbx), %r9d
    00000027: 	cmpl	$0xb, %ecx
    0000002a: 	jbe	.Ltmp190 # Offset: 42
    00000030: 	movq	$0x0, -0x70(%rsp)
    00000039: 	movzbl	%dl, %edx
    0000003c: 	movq	%rdx, %rax
    0000003f: 	shlq	$0x8, %rax
    00000043: 	orq	%rdx, %rax
    00000046: 	shlq	$0x8, %rax
    0000004a: 	orq	%rdx, %rax
    0000004d: 	shlq	$0x8, %rax
    00000051: 	orq	%rdx, %rax
    00000054: 	movl	%r9d, %edx
    00000057: 	shrl	$0x2, %edx
    0000005a: 	movq	%rax, -0x78(%rsp)
    0000005f: 	movdqa	-0x78(%rsp), %xmm0
    00000065: 	movq	%rdi, %rax
    00000068: 	subl	$0x1, %edx
    0000006b: 	shlq	$0x4, %rdx
    0000006f: 	leaq	0x10(%rdi,%rdx), %rdx
    00000074: 	nopl	(%rax) # Size: 4
.Ltmp191:
    00000078: 	movdqu	(%rax), %xmm2
    0000007c: 	addq	$0x10, %rax
    00000080: 	por	%xmm2, %xmm0
    00000084: 	cmpq	%rax, %rdx
    00000087: 	jne	.Ltmp191 # Offset: 135
    00000089: 	movaps	%xmm0, 0xc8(%rsp)
    00000091: 	movd	%xmm0, %eax
    00000095: 	movaps	%xmm0, 0xb8(%rsp)
    0000009d: 	movzbl	0xbd(%rsp), %edx
    000000a5: 	orb	0xc9(%rsp), %dl
    000000ac: 	movaps	%xmm0, 0xa8(%rsp)
    000000b4: 	orb	0xb1(%rsp), %dl
    000000bb: 	movaps	%xmm0, 0x98(%rsp)
    000000c3: 	orb	0xa5(%rsp), %dl
    000000ca: 	movzbl	%dl, %r11d
    000000ce: 	movl	%r9d, %edx
    000000d1: 	movaps	%xmm0, 0xf8(%rsp)
    000000d9: 	orb	0xfc(%rsp), %al
    000000e0: 	andl	$-0x4, %edx
    000000e3: 	movaps	%xmm0, 0xe8(%rsp)
    000000eb: 	orb	0xf0(%rsp), %al
    000000f2: 	movaps	%xmm0, 0xd8(%rsp)
    000000fa: 	leal	(,%rdx,4), %esi
    00000101: 	orb	0xe4(%rsp), %al
    00000108: 	movaps	%xmm0, 0x88(%rsp)
    00000110: 	movaps	%xmm0, 0x78(%rsp)
    00000115: 	movzbl	0x7e(%rsp), %ebp
    0000011a: 	orb	0x8a(%rsp), %bpl
    00000122: 	movaps	%xmm0, 0x68(%rsp)
    00000127: 	orb	0x72(%rsp), %bpl
    0000012c: 	movaps	%xmm0, 0x58(%rsp)
    00000131: 	orb	0x66(%rsp), %bpl
    00000136: 	movaps	%xmm0, 0x48(%rsp)
    0000013b: 	movaps	%xmm0, 0x38(%rsp)
    00000140: 	movzbl	0x3f(%rsp), %ecx
    00000145: 	orb	0x4b(%rsp), %cl
    00000149: 	movaps	%xmm0, 0x28(%rsp)
    0000014e: 	orb	0x33(%rsp), %cl
    00000152: 	movaps	%xmm0, 0x18(%rsp)
    00000157: 	orb	0x27(%rsp), %cl
    0000015b: 	cmpl	%edx, %r9d
    0000015e: 	je	.Ltmp192 # Offset: 350
.Ltmp200:
    00000164: 	movl	%r9d, %r10d
    00000167: 	subl	%edx, %r10d
    0000016a: 	cmpl	%edx, %ebx
    0000016c: 	je	.Ltmp193 # Offset: 364
    00000172: 	movq	(%rdi,%rdx,4), %xmm0
    00000177: 	movzbl	%cl, %edx
    0000017a: 	movzbl	%bpl, %ebp
    0000017e: 	movzbl	%al, %eax
    00000181: 	shlq	$0x8, %rdx
    00000185: 	orq	%rbp, %rdx
    00000188: 	shlq	$0x8, %rdx
    0000018c: 	orq	%r11, %rdx
    0000018f: 	shlq	$0x8, %rdx
    00000193: 	orq	%rax, %rdx
    00000196: 	movq	%rdx, %xmm3
    0000019b: 	por	%xmm0, %xmm3
    0000019f: 	movq	%xmm3, %rbx
    000001a4: 	movq	%xmm3, %rdx
    000001a9: 	movq	%xmm3, %rcx
    000001ae: 	movq	%xmm3, 0x10(%rsp)
    000001b4: 	shrq	$0x20, %rdx
    000001b8: 	movl	%ebx, %eax
    000001ba: 	shrq	$0x28, %rcx
    000001be: 	movq	%xmm3, %rbp
    000001c3: 	orl	%edx, %eax
    000001c5: 	movzbl	%bh, %edx
    000001c8: 	shrq	$0x30, %rbp
    000001cc: 	movq	%xmm3, 0x8(%rsp)
    000001d2: 	orl	%ecx, %edx
    000001d4: 	movq	%xmm3, %rcx
    000001d9: 	movq	%xmm3, (%rsp)
    000001de: 	movl	%edx, %r11d
    000001e1: 	movq	%xmm3, %rdx
    000001e6: 	shrq	$0x38, %rcx
    000001ea: 	movq	%xmm3, -0x8(%rsp)
    000001f0: 	shrq	$0x10, %rdx
    000001f4: 	movq	%xmm3, -0x10(%rsp)
    000001fa: 	orl	%edx, %ebp
    000001fc: 	movq	%xmm3, %rdx
    00000201: 	movq	%xmm3, -0x18(%rsp)
    00000207: 	shrq	$0x18, %rdx
    0000020b: 	movq	%xmm3, -0x20(%rsp)
    00000211: 	orl	%edx, %ecx
    00000213: 	movl	%r10d, %edx
    00000216: 	movq	%xmm3, -0x28(%rsp)
    0000021c: 	andl	$-0x2, %edx
    0000021f: 	leal	(%rsi,%rdx,4), %esi
    00000222: 	cmpl	%edx, %r10d
    00000225: 	je	.Ltmp192 # Offset: 549
.Ltmp193:
    00000227: 	movslq	%esi, %rsi
    0000022a: 	orb	(%rdi,%rsi), %al
    0000022d: 	orb	0x1(%rdi,%rsi), %r11b
    00000232: 	orb	0x2(%rdi,%rsi), %bpl
    00000237: 	orb	0x3(%rdi,%rsi), %cl
.Ltmp192:
    0000023b: 	movl	%r11d, %edx
    0000023e: 	shll	$0x2, %r9d
    00000242: 	orl	%ebp, %edx
    00000244: 	movl	%edx, %esi
    00000246: 	orl	%ecx, %esi
.Ltmp199:
    00000248: 	cmpl	%r9d, %r8d
    0000024b: 	jle	.Ltmp194 # Offset: 587
    00000251: 	movl	%r8d, %r11d
    00000254: 	subl	%r9d, %r11d
    00000257: 	leal	-0x1(%r11), %edx
    0000025b: 	cmpl	$0xe, %edx
    0000025e: 	jbe	.Ltmp195 # Offset: 606
    00000264: 	movl	%r11d, %ecx
    00000267: 	movslq	%r9d, %rdx
    0000026a: 	pxor	%xmm0, %xmm0
    0000026e: 	shrl	$0x4, %ecx
    00000271: 	addq	%rdi, %rdx
    00000274: 	leal	-0x1(%rcx), %r10d
    00000278: 	leaq	0x10(%rdx), %rcx
    0000027c: 	shlq	$0x4, %r10
    00000280: 	addq	%rcx, %r10
    00000283: 	jmp	.Ltmp196 # Offset: 643
    00000285: 	nopl	(%rax) # Size: 3
.Ltmp197:
    00000288: 	addq	$0x10, %rcx
.Ltmp196:
    0000028c: 	movdqu	(%rdx), %xmm1
    00000290: 	movq	%rcx, %rdx
    00000293: 	por	%xmm1, %xmm0
    00000297: 	cmpq	%r10, %rcx
    0000029a: 	jne	.Ltmp197 # Offset: 666
    0000029c: 	movdqa	%xmm0, %xmm1
    000002a0: 	movl	%r11d, %edx
    000002a3: 	psrldq	$0x8, %xmm1
    000002a8: 	andl	$-0x10, %edx
    000002ab: 	por	%xmm1, %xmm0
    000002af: 	leal	(%rdx,%r9), %r10d
    000002b3: 	movdqa	%xmm0, %xmm1
    000002b7: 	psrldq	$0x4, %xmm1
    000002bc: 	por	%xmm1, %xmm0
    000002c0: 	movdqa	%xmm0, %xmm1
    000002c4: 	psrldq	$0x2, %xmm1
    000002c9: 	por	%xmm1, %xmm0
    000002cd: 	movdqa	%xmm0, %xmm1
    000002d1: 	psrldq	$0x1, %xmm1
    000002d6: 	por	%xmm1, %xmm0
    000002da: 	movd	%xmm0, %ecx
    000002de: 	orl	%ecx, %eax
    000002e0: 	cmpl	%r11d, %edx
    000002e3: 	je	.Ltmp194 # Offset: 739
.Ltmp201:
    000002e9: 	subl	%edx, %r11d
    000002ec: 	leal	-0x1(%r11), %ecx
    000002f0: 	cmpl	$0x6, %ecx
    000002f3: 	jbe	.Ltmp198 # Offset: 755
    000002f5: 	movslq	%r9d, %r9
    000002f8: 	addq	%rdi, %r9
    000002fb: 	movq	(%r9,%rdx), %rcx
    000002ff: 	movl	%ecx, %edx
    00000301: 	movzbl	%ch, %ebx
    00000304: 	orl	%ebx, %edx
    00000306: 	orl	%edx, %eax
    00000308: 	movq	%rcx, %rdx
    0000030b: 	shrq	$0x10, %rdx
    0000030f: 	orl	%edx, %eax
    00000311: 	movq	%rcx, %rdx
    00000314: 	shrq	$0x18, %rdx
    00000318: 	orl	%edx, %eax
    0000031a: 	movq	%rcx, %rdx
    0000031d: 	shrq	$0x20, %rdx
    00000321: 	orl	%edx, %eax
    00000323: 	movq	%rcx, %rdx
    00000326: 	shrq	$0x28, %rdx
    0000032a: 	orl	%edx, %eax
    0000032c: 	movq	%rcx, %rdx
    0000032f: 	shrq	$0x38, %rcx
    00000333: 	shrq	$0x30, %rdx
    00000337: 	orl	%edx, %eax
    00000339: 	movl	%r11d, %edx
    0000033c: 	andl	$-0x8, %edx
    0000033f: 	orl	%ecx, %eax
    00000341: 	addl	%edx, %r10d
    00000344: 	cmpl	%edx, %r11d
    00000347: 	je	.Ltmp194 # Offset: 839
.Ltmp198:
    00000349: 	movslq	%r10d, %rdx
    0000034c: 	orb	(%rdi,%rdx), %al
    0000034f: 	leal	0x1(%r10), %edx
    00000353: 	cmpl	%r8d, %edx
    00000356: 	jge	.Ltmp194 # Offset: 854
    00000358: 	movslq	%edx, %rdx
    0000035b: 	orb	(%rdi,%rdx), %al
    0000035e: 	leal	0x2(%r10), %edx
    00000362: 	cmpl	%r8d, %edx
    00000365: 	jge	.Ltmp194 # Offset: 869
    00000367: 	movslq	%edx, %rdx
    0000036a: 	orb	(%rdi,%rdx), %al
    0000036d: 	leal	0x3(%r10), %edx
    00000371: 	cmpl	%r8d, %edx
    00000374: 	jge	.Ltmp194 # Offset: 884
    00000376: 	movslq	%edx, %rdx
    00000379: 	orb	(%rdi,%rdx), %al
    0000037c: 	leal	0x4(%r10), %edx
    00000380: 	cmpl	%edx, %r8d
    00000383: 	jle	.Ltmp194 # Offset: 899
    00000385: 	movslq	%edx, %rdx
    00000388: 	orb	(%rdi,%rdx), %al
    0000038b: 	leal	0x5(%r10), %edx
    0000038f: 	cmpl	%edx, %r8d
    00000392: 	jle	.Ltmp194 # Offset: 914
    00000394: 	movslq	%edx, %rdx
    00000397: 	addl	$0x6, %r10d
    0000039b: 	orb	(%rdi,%rdx), %al
    0000039e: 	cmpl	%r10d, %r8d
    000003a1: 	jle	.Ltmp194 # Offset: 929
    000003a3: 	movslq	%r10d, %r10
    000003a6: 	orb	(%rdi,%r10), %al
.Ltmp194:
    000003aa: 	addq	$0x110, %rsp
    000003b1: 	orl	%esi, %eax
    000003b3: 	popq	%rbx
    000003b4: 	popq	%rbp
    000003b5: 	retq # Offset: 949
    000003b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp189:
    000003c0: 	movl	%edx, %esi
    000003c2: 	xorl	%r9d, %r9d
    000003c5: 	jmp	.Ltmp199 # Offset: 965
.Ltmp190:
    000003ca: 	movl	%edx, %ecx
    000003cc: 	movl	%edx, %ebp
    000003ce: 	movzbl	%dl, %r11d
    000003d2: 	xorl	%esi, %esi
    000003d4: 	xorl	%edx, %edx
    000003d6: 	jmp	.Ltmp200 # Offset: 982
.Ltmp195:
    000003db: 	movl	%r9d, %r10d
    000003de: 	xorl	%edx, %edx
    000003e0: 	jmp	.Ltmp201 # Offset: 992
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or7IhET_PKS0_iS0_"

Binary Function "_Z7bit_or8IhET_PKS0_iS0_" after disassembly {
  Number      : 57
  State       : disassembled
  Address     : 0x54e0
  Size        : 0x410
  MaxSize     : 0x410
  Offset      : 0x54e0
  Section     : .text
  Orc Section : .local.text._Z7bit_or8IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdi, %rcx
    00000009: 	movl	%edx, %r8d
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x108, %rsp
    00000015: 	cmpl	$0x7, %esi
    00000018: 	jle	.Ltmp202 # Offset: 24
    0000001e: 	leal	-0x8(%rsi), %eax
    00000021: 	movl	%eax, %r9d
    00000024: 	shrl	$0x3, %r9d
    00000028: 	addl	$0x1, %r9d
    0000002c: 	cmpl	$0x7, %eax
    0000002f: 	jbe	.Ltmp203 # Offset: 47
    00000035: 	movq	$0x0, -0x70(%rsp)
    0000003e: 	movzbl	%dl, %edx
    00000041: 	movq	%rdx, %rax
    00000044: 	shlq	$0x8, %rax
    00000048: 	orq	%rdx, %rax
    0000004b: 	shlq	$0x8, %rax
    0000004f: 	orq	%rdx, %rax
    00000052: 	shlq	$0x8, %rax
    00000056: 	orq	%rdx, %rax
    00000059: 	shlq	$0x8, %rax
    0000005d: 	orq	%rdx, %rax
    00000060: 	shlq	$0x8, %rax
    00000064: 	orq	%rdx, %rax
    00000067: 	shlq	$0x8, %rax
    0000006b: 	orq	%rdx, %rax
    0000006e: 	shlq	$0x8, %rax
    00000072: 	orq	%rdx, %rax
    00000075: 	movl	%r9d, %edx
    00000078: 	shrl	%edx
    0000007a: 	movq	%rax, -0x78(%rsp)
    0000007f: 	movdqa	-0x78(%rsp), %xmm0
    00000085: 	movq	%rdi, %rax
    00000088: 	subl	$0x1, %edx
    0000008b: 	shlq	$0x4, %rdx
    0000008f: 	leaq	0x10(%rdi,%rdx), %rdx
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp204:
    00000098: 	movdqu	(%rax), %xmm2
    0000009c: 	addq	$0x10, %rax
    000000a0: 	por	%xmm2, %xmm0
    000000a4: 	cmpq	%rax, %rdx
    000000a7: 	jne	.Ltmp204 # Offset: 167
    000000a9: 	movl	%r9d, %eax
    000000ac: 	movd	%xmm0, %r8d
    000000b1: 	movaps	%xmm0, 0xf8(%rsp)
    000000b9: 	orb	0x100(%rsp), %r8b
    000000c1: 	movaps	%xmm0, 0xe8(%rsp)
    000000c9: 	andl	$-0x2, %eax
    000000cc: 	movaps	%xmm0, 0xd8(%rsp)
    000000d4: 	movzbl	0xe1(%rsp), %edx
    000000dc: 	orb	0xe9(%rsp), %dl
    000000e3: 	movaps	%xmm0, 0xc8(%rsp)
    000000eb: 	movaps	%xmm0, 0xb8(%rsp)
    000000f3: 	movzbl	0xc2(%rsp), %ebx
    000000fb: 	orb	0xca(%rsp), %bl
    00000102: 	movaps	%xmm0, 0xa8(%rsp)
    0000010a: 	movaps	%xmm0, 0x98(%rsp)
    00000112: 	movzbl	0xa3(%rsp), %ebp
    0000011a: 	orb	0xab(%rsp), %bpl
    00000122: 	movaps	%xmm0, 0x88(%rsp)
    0000012a: 	movaps	%xmm0, 0x78(%rsp)
    0000012f: 	movzbl	0x84(%rsp), %r12d
    00000138: 	orb	0x8c(%rsp), %r12b
    00000140: 	movaps	%xmm0, 0x68(%rsp)
    00000145: 	movaps	%xmm0, 0x58(%rsp)
    0000014a: 	movzbl	0x65(%rsp), %r11d
    00000150: 	orb	0x6d(%rsp), %r11b
    00000155: 	movaps	%xmm0, 0x48(%rsp)
    0000015a: 	movaps	%xmm0, 0x38(%rsp)
    0000015f: 	movzbl	0x46(%rsp), %r10d
    00000165: 	orb	0x4e(%rsp), %r10b
    0000016a: 	movaps	%xmm0, 0x28(%rsp)
    0000016f: 	movaps	%xmm0, 0x18(%rsp)
    00000174: 	movzbl	0x27(%rsp), %edi
    00000179: 	orb	0x2f(%rsp), %dil
    0000017e: 	testl	$0xc0000001, %r9d
    00000185: 	je	.Ltmp205 # Offset: 389
.Ltmp212:
    0000018b: 	movzbl	%r10b, %r10d
    0000018f: 	movzbl	%r11b, %r11d
    00000193: 	movzbl	%r12b, %r12d
    00000197: 	movzbl	%bpl, %ebp
    0000019b: 	movq	(%rcx,%rax,8), %xmm0
    000001a0: 	movzbl	%dil, %eax
    000001a4: 	movzbl	%bl, %ebx
    000001a7: 	movzbl	%dl, %edi
    000001aa: 	shlq	$0x8, %rax
    000001ae: 	movzbl	%r8b, %r8d
    000001b2: 	orq	%r10, %rax
    000001b5: 	shlq	$0x8, %rax
    000001b9: 	orq	%r11, %rax
    000001bc: 	shlq	$0x8, %rax
    000001c0: 	orq	%r12, %rax
    000001c3: 	shlq	$0x8, %rax
    000001c7: 	orq	%rbp, %rax
    000001ca: 	shlq	$0x8, %rax
    000001ce: 	orq	%rbx, %rax
    000001d1: 	shlq	$0x8, %rax
    000001d5: 	movq	%rax, %rdx
    000001d8: 	orq	%rdi, %rdx
    000001db: 	shlq	$0x8, %rdx
    000001df: 	orq	%r8, %rdx
    000001e2: 	movq	%rdx, %xmm3
    000001e7: 	por	%xmm0, %xmm3
    000001eb: 	movq	%xmm3, %rax
    000001f0: 	movq	%xmm3, %rbx
    000001f5: 	movq	%xmm3, %rbp
    000001fa: 	movq	%xmm3, 0x10(%rsp)
    00000200: 	movl	%eax, %r8d
    00000203: 	movzbl	%ah, %edx
    00000206: 	movq	%xmm3, %r12
    0000020b: 	shrq	$0x38, %rax
    0000020f: 	shrq	$0x10, %rbx
    00000213: 	movq	%xmm3, %r11
    00000218: 	shrq	$0x18, %rbp
    0000021c: 	movq	%rax, %rdi
    0000021f: 	movq	%xmm3, %r10
    00000224: 	movq	%xmm3, 0x8(%rsp)
    0000022a: 	shrq	$0x20, %r12
    0000022e: 	movq	%xmm3, (%rsp)
    00000233: 	shrq	$0x28, %r11
    00000237: 	shrq	$0x30, %r10
    0000023b: 	movq	%xmm3, -0x8(%rsp)
    00000241: 	movq	%xmm3, -0x10(%rsp)
    00000247: 	movq	%xmm3, -0x18(%rsp)
    0000024d: 	movq	%xmm3, -0x20(%rsp)
    00000253: 	movq	%xmm3, -0x28(%rsp)
.Ltmp205:
    00000259: 	orl	%ebx, %edx
    0000025b: 	shll	$0x3, %r9d
    0000025f: 	orl	%ebp, %edx
    00000261: 	orl	%r12d, %edx
    00000264: 	orl	%r11d, %edx
    00000267: 	orl	%r10d, %edx
    0000026a: 	orl	%edi, %edx
.Ltmp211:
    0000026c: 	cmpl	%r9d, %esi
    0000026f: 	jle	.Ltmp206 # Offset: 623
    00000275: 	movl	%esi, %r10d
    00000278: 	subl	%r9d, %r10d
    0000027b: 	leal	-0x1(%r10), %eax
    0000027f: 	cmpl	$0xe, %eax
    00000282: 	jbe	.Ltmp207 # Offset: 642
    00000288: 	movl	%r10d, %eax
    0000028b: 	movslq	%r9d, %rdi
    0000028e: 	pxor	%xmm0, %xmm0
    00000292: 	shrl	$0x4, %eax
    00000295: 	addq	%rcx, %rdi
    00000298: 	leal	-0x1(%rax), %r11d
    0000029c: 	leaq	0x10(%rdi), %rax
    000002a0: 	shlq	$0x4, %r11
    000002a4: 	addq	%rax, %r11
    000002a7: 	jmp	.Ltmp208 # Offset: 679
    000002a9: 	nopl	(%rax) # Size: 7
.Ltmp209:
    000002b0: 	addq	$0x10, %rax
.Ltmp208:
    000002b4: 	movdqu	(%rdi), %xmm1
    000002b8: 	movq	%rax, %rdi
    000002bb: 	por	%xmm1, %xmm0
    000002bf: 	cmpq	%r11, %rax
    000002c2: 	jne	.Ltmp209 # Offset: 706
    000002c4: 	movdqa	%xmm0, %xmm1
    000002c8: 	movl	%r10d, %eax
    000002cb: 	psrldq	$0x8, %xmm1
    000002d0: 	andl	$-0x10, %eax
    000002d3: 	por	%xmm1, %xmm0
    000002d7: 	movdqa	%xmm0, %xmm1
    000002db: 	psrldq	$0x4, %xmm1
    000002e0: 	por	%xmm1, %xmm0
    000002e4: 	movdqa	%xmm0, %xmm1
    000002e8: 	psrldq	$0x2, %xmm1
    000002ed: 	por	%xmm1, %xmm0
    000002f1: 	movdqa	%xmm0, %xmm1
    000002f5: 	psrldq	$0x1, %xmm1
    000002fa: 	por	%xmm1, %xmm0
    000002fe: 	movd	%xmm0, %edi
    00000302: 	orl	%edi, %r8d
    00000305: 	leal	(%rax,%r9), %edi
    00000309: 	cmpl	%r10d, %eax
    0000030c: 	je	.Ltmp206 # Offset: 780
.Ltmp213:
    00000312: 	subl	%eax, %r10d
    00000315: 	leal	-0x1(%r10), %r11d
    00000319: 	cmpl	$0x6, %r11d
    0000031d: 	jbe	.Ltmp210 # Offset: 797
    0000031f: 	movslq	%r9d, %r9
    00000322: 	addq	%rcx, %rax
    00000325: 	movq	(%rax,%r9), %rbx
    00000329: 	movzbl	%bh, %eax
    0000032c: 	movl	%ebx, %r9d
    0000032f: 	orl	%r9d, %eax
    00000332: 	orl	%r8d, %eax
    00000335: 	movq	%rbx, %r8
    00000338: 	shrq	$0x10, %r8
    0000033c: 	orl	%r8d, %eax
    0000033f: 	movq	%rbx, %r8
    00000342: 	shrq	$0x18, %r8
    00000346: 	orl	%r8d, %eax
    00000349: 	movq	%rbx, %r8
    0000034c: 	shrq	$0x20, %r8
    00000350: 	orl	%r8d, %eax
    00000353: 	movq	%rbx, %r8
    00000356: 	shrq	$0x28, %r8
    0000035a: 	orl	%r8d, %eax
    0000035d: 	movq	%rbx, %r8
    00000360: 	shrq	$0x38, %rbx
    00000364: 	shrq	$0x30, %r8
    00000368: 	orl	%r8d, %eax
    0000036b: 	orl	%ebx, %eax
    0000036d: 	movl	%eax, %r8d
    00000370: 	movl	%r10d, %eax
    00000373: 	andl	$-0x8, %eax
    00000376: 	addl	%eax, %edi
    00000378: 	cmpl	%r10d, %eax
    0000037b: 	je	.Ltmp206 # Offset: 891
.Ltmp210:
    0000037d: 	movslq	%edi, %rax
    00000380: 	orb	(%rcx,%rax), %r8b
    00000384: 	leal	0x1(%rdi), %eax
    00000387: 	cmpl	%eax, %esi
    00000389: 	jle	.Ltmp206 # Offset: 905
    0000038b: 	cltq
    0000038d: 	orb	(%rcx,%rax), %r8b
    00000391: 	leal	0x2(%rdi), %eax
    00000394: 	cmpl	%eax, %esi
    00000396: 	jle	.Ltmp206 # Offset: 918
    00000398: 	cltq
    0000039a: 	orb	(%rcx,%rax), %r8b
    0000039e: 	leal	0x3(%rdi), %eax
    000003a1: 	cmpl	%eax, %esi
    000003a3: 	jle	.Ltmp206 # Offset: 931
    000003a5: 	cltq
    000003a7: 	orb	(%rcx,%rax), %r8b
    000003ab: 	leal	0x4(%rdi), %eax
    000003ae: 	cmpl	%eax, %esi
    000003b0: 	jle	.Ltmp206 # Offset: 944
    000003b2: 	cltq
    000003b4: 	orb	(%rcx,%rax), %r8b
    000003b8: 	leal	0x5(%rdi), %eax
    000003bb: 	cmpl	%eax, %esi
    000003bd: 	jle	.Ltmp206 # Offset: 957
    000003bf: 	cltq
    000003c1: 	addl	$0x6, %edi
    000003c4: 	orb	(%rcx,%rax), %r8b
    000003c8: 	cmpl	%edi, %esi
    000003ca: 	jle	.Ltmp206 # Offset: 970
    000003cc: 	movslq	%edi, %rdi
    000003cf: 	orb	(%rcx,%rdi), %r8b
.Ltmp206:
    000003d3: 	addq	$0x108, %rsp
    000003da: 	movl	%r8d, %eax
    000003dd: 	popq	%rbx
    000003de: 	orl	%edx, %eax
    000003e0: 	popq	%rbp
    000003e1: 	popq	%r12
    000003e3: 	retq # Offset: 995
    000003e4: 	nopl	(%rax) # Size: 4
.Ltmp202:
    000003e8: 	xorl	%r9d, %r9d
    000003eb: 	jmp	.Ltmp211 # Offset: 1003
.Ltmp203:
    000003f0: 	movl	%edx, %edi
    000003f2: 	movl	%edx, %r10d
    000003f5: 	movl	%edx, %r11d
    000003f8: 	movl	%edx, %r12d
    000003fb: 	movl	%edx, %ebp
    000003fd: 	movl	%edx, %ebx
    000003ff: 	xorl	%eax, %eax
    00000401: 	jmp	.Ltmp212 # Offset: 1025
.Ltmp207:
    00000406: 	movl	%r9d, %edi
    00000409: 	xorl	%eax, %eax
    0000040b: 	jmp	.Ltmp213 # Offset: 1035
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or8IhET_PKS0_iS0_"

Binary Function "_Z8bit_xor1IhET_PKS0_iS0_" after disassembly {
  Number      : 58
  State       : disassembled
  Address     : 0x58f0
  Size        : 0x1c1
  MaxSize     : 0x1d0
  Offset      : 0x58f0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor1IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp214 # Offset: 6
    0000000c: 	leal	-0x1(%rsi), %eax
    0000000f: 	cmpl	$0xe, %eax
    00000012: 	jbe	.Ltmp215 # Offset: 18
    00000018: 	movl	%esi, %eax
    0000001a: 	movq	%rdi, %rcx
    0000001d: 	pxor	%xmm0, %xmm0
    00000021: 	shrl	$0x4, %eax
    00000024: 	subl	$0x1, %eax
    00000027: 	shlq	$0x4, %rax
    0000002b: 	leaq	0x10(%rdi,%rax), %r8
.Ltmp216:
    00000030: 	movdqu	(%rcx), %xmm2
    00000034: 	addq	$0x10, %rcx
    00000038: 	pxor	%xmm2, %xmm0
    0000003c: 	cmpq	%rcx, %r8
    0000003f: 	jne	.Ltmp216 # Offset: 63
    00000041: 	movdqa	%xmm0, %xmm1
    00000045: 	movl	%esi, %eax
    00000047: 	psrldq	$0x8, %xmm1
    0000004c: 	andl	$-0x10, %eax
    0000004f: 	pxor	%xmm1, %xmm0
    00000053: 	movl	%eax, %r8d
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	pxor	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	pxor	%xmm1, %xmm0
    00000070: 	movdqa	%xmm0, %xmm1
    00000074: 	psrldq	$0x1, %xmm1
    00000079: 	pxor	%xmm1, %xmm0
    0000007d: 	movd	%xmm0, %ecx
    00000081: 	xorl	%edx, %ecx
    00000083: 	cmpl	%eax, %esi
    00000085: 	je	.Ltmp217 # Offset: 133
.Ltmp220:
    0000008b: 	movl	%esi, %r9d
    0000008e: 	subl	%eax, %r9d
    00000091: 	leal	-0x1(%r9), %edx
    00000095: 	cmpl	$0x6, %edx
    00000098: 	jbe	.Ltmp218 # Offset: 152
    0000009e: 	movq	(%rdi,%rax), %rdx
    000000a2: 	pushq	%rbx
    000000a3: 	movl	%edx, %eax
    000000a5: 	movzbl	%dh, %ebx
    000000a8: 	xorl	%ebx, %eax
    000000aa: 	xorl	%ecx, %eax
    000000ac: 	movq	%rdx, %rcx
    000000af: 	shrq	$0x10, %rcx
    000000b3: 	xorl	%ecx, %eax
    000000b5: 	movq	%rdx, %rcx
    000000b8: 	shrq	$0x18, %rcx
    000000bc: 	xorl	%ecx, %eax
    000000be: 	movq	%rdx, %rcx
    000000c1: 	shrq	$0x20, %rcx
    000000c5: 	xorl	%ecx, %eax
    000000c7: 	movq	%rdx, %rcx
    000000ca: 	shrq	$0x28, %rcx
    000000ce: 	xorl	%ecx, %eax
    000000d0: 	movq	%rdx, %rcx
    000000d3: 	shrq	$0x38, %rdx
    000000d7: 	shrq	$0x30, %rcx
    000000db: 	xorl	%ecx, %eax
    000000dd: 	xorl	%edx, %eax
    000000df: 	movl	%r9d, %edx
    000000e2: 	andl	$-0x8, %edx
    000000e5: 	addl	%edx, %r8d
    000000e8: 	cmpl	%edx, %r9d
    000000eb: 	je	.Ltmp219 # Offset: 235
    000000ed: 	movslq	%r8d, %rdx
    000000f0: 	xorb	(%rdi,%rdx), %al
    000000f3: 	leal	0x1(%r8), %edx
    000000f7: 	cmpl	%edx, %esi
    000000f9: 	jle	.Ltmp219 # Offset: 249
    000000fb: 	movslq	%edx, %rdx
    000000fe: 	xorb	(%rdi,%rdx), %al
    00000101: 	leal	0x2(%r8), %edx
    00000105: 	cmpl	%esi, %edx
    00000107: 	jge	.Ltmp219 # Offset: 263
    00000109: 	movslq	%edx, %rdx
    0000010c: 	xorb	(%rdi,%rdx), %al
    0000010f: 	leal	0x3(%r8), %edx
    00000113: 	cmpl	%edx, %esi
    00000115: 	jle	.Ltmp219 # Offset: 277
    00000117: 	movslq	%edx, %rdx
    0000011a: 	xorb	(%rdi,%rdx), %al
    0000011d: 	leal	0x4(%r8), %edx
    00000121: 	cmpl	%edx, %esi
    00000123: 	jle	.Ltmp219 # Offset: 291
    00000125: 	movslq	%edx, %rdx
    00000128: 	xorb	(%rdi,%rdx), %al
    0000012b: 	leal	0x5(%r8), %edx
    0000012f: 	cmpl	%edx, %esi
    00000131: 	jle	.Ltmp219 # Offset: 305
    00000133: 	movslq	%edx, %rdx
    00000136: 	addl	$0x6, %r8d
    0000013a: 	xorb	(%rdi,%rdx), %al
    0000013d: 	cmpl	%r8d, %esi
    00000140: 	jle	.Ltmp219 # Offset: 320
    00000142: 	movslq	%r8d, %r8
    00000145: 	xorb	(%rdi,%r8), %al
.Ltmp219:
    00000149: 	popq	%rbx
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp214:
    00000150: 	movl	%edx, %eax
    00000152: 	retq # Offset: 338
.Ltmp215:
    00000153: 	movl	%edx, %ecx
    00000155: 	xorl	%eax, %eax
    00000157: 	xorl	%r8d, %r8d
    0000015a: 	jmp	.Ltmp220 # Offset: 346
.Ltmp218:
    0000015f: 	movslq	%r8d, %rdx
    00000162: 	movl	%ecx, %eax
    00000164: 	xorb	(%rdi,%rdx), %al
    00000167: 	leal	0x1(%r8), %edx
    0000016b: 	cmpl	%edx, %esi
    0000016d: 	jle	.Ltmp221 # Offset: 365
    0000016f: 	movslq	%edx, %rdx
    00000172: 	xorb	(%rdi,%rdx), %al
    00000175: 	leal	0x2(%r8), %edx
    00000179: 	cmpl	%esi, %edx
    0000017b: 	jge	.Ltmp221 # Offset: 379
    0000017d: 	movslq	%edx, %rdx
    00000180: 	xorb	(%rdi,%rdx), %al
    00000183: 	leal	0x3(%r8), %edx
    00000187: 	cmpl	%edx, %esi
    00000189: 	jle	.Ltmp221 # Offset: 393
    0000018b: 	movslq	%edx, %rdx
    0000018e: 	xorb	(%rdi,%rdx), %al
    00000191: 	leal	0x4(%r8), %edx
    00000195: 	cmpl	%edx, %esi
    00000197: 	jle	.Ltmp221 # Offset: 407
    00000199: 	movslq	%edx, %rdx
    0000019c: 	xorb	(%rdi,%rdx), %al
    0000019f: 	leal	0x5(%r8), %edx
    000001a3: 	cmpl	%edx, %esi
    000001a5: 	jle	.Ltmp221 # Offset: 421
    000001a7: 	movslq	%edx, %rdx
    000001aa: 	addl	$0x6, %r8d
    000001ae: 	xorb	(%rdi,%rdx), %al
    000001b1: 	cmpl	%r8d, %esi
    000001b4: 	jle	.Ltmp221 # Offset: 436
    000001b6: 	movslq	%r8d, %r8
    000001b9: 	xorb	(%rdi,%r8), %al
.Ltmp221:
    000001bd: 	retq # Offset: 445
.Ltmp217:
    000001be: 	movl	%ecx, %eax
    000001c0: 	retq # Offset: 448
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor1IhET_PKS0_iS0_"

Binary Function "_Z8bit_xor2IhET_PKS0_iS0_" after disassembly {
  Number      : 59
  State       : disassembled
  Address     : 0x5ac0
  Size        : 0x1b7
  MaxSize     : 0x1c0
  Offset      : 0x5ac0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor2IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movq	%rdi, %r9
    0000000a: 	addq	%rsi, %rdi
    0000000d: 	cmpq	%rdi, %r9
    00000010: 	je	.Ltmp222 # Offset: 16
    00000016: 	leaq	-0x1(%rsi), %r8
    0000001a: 	movq	%r9, %rax
    0000001d: 	cmpq	$0xe, %r8
    00000021: 	jbe	.Ltmp223 # Offset: 33
    00000027: 	movq	%rsi, %rcx
    0000002a: 	pxor	%xmm0, %xmm0
    0000002e: 	andq	$-0x10, %rcx
    00000032: 	addq	%r9, %rcx
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp224:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	pxor	%xmm2, %xmm0
    00000044: 	cmpq	%rcx, %rax
    00000047: 	jne	.Ltmp224 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movq	%rsi, %rax
    00000050: 	psrldq	$0x8, %xmm1
    00000055: 	andq	$-0x10, %rax
    00000059: 	pxor	%xmm1, %xmm0
    0000005d: 	leaq	(%r9,%rax), %r8
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	psrldq	$0x4, %xmm1
    0000006a: 	pxor	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x2, %xmm1
    00000077: 	pxor	%xmm1, %xmm0
    0000007b: 	movdqa	%xmm0, %xmm1
    0000007f: 	psrldq	$0x1, %xmm1
    00000084: 	pxor	%xmm1, %xmm0
    00000088: 	movd	%xmm0, %ecx
    0000008c: 	xorl	%edx, %ecx
    0000008e: 	cmpq	%rax, %rsi
    00000091: 	je	.Ltmp225 # Offset: 145
.Ltmp228:
    00000097: 	subq	%rax, %rsi
    0000009a: 	leaq	-0x1(%rsi), %rdx
    0000009e: 	cmpq	$0x6, %rdx
    000000a2: 	jbe	.Ltmp226 # Offset: 162
    000000a8: 	movq	(%r9,%rax), %rdx
    000000ac: 	pushq	%rbx
    000000ad: 	movl	%edx, %eax
    000000af: 	movzbl	%dh, %ebx
    000000b2: 	xorl	%ebx, %eax
    000000b4: 	xorl	%ecx, %eax
    000000b6: 	movq	%rdx, %rcx
    000000b9: 	shrq	$0x10, %rcx
    000000bd: 	xorl	%ecx, %eax
    000000bf: 	movq	%rdx, %rcx
    000000c2: 	shrq	$0x18, %rcx
    000000c6: 	xorl	%ecx, %eax
    000000c8: 	movq	%rdx, %rcx
    000000cb: 	shrq	$0x20, %rcx
    000000cf: 	xorl	%ecx, %eax
    000000d1: 	movq	%rdx, %rcx
    000000d4: 	shrq	$0x28, %rcx
    000000d8: 	xorl	%ecx, %eax
    000000da: 	movq	%rdx, %rcx
    000000dd: 	shrq	$0x38, %rdx
    000000e1: 	shrq	$0x30, %rcx
    000000e5: 	xorl	%ecx, %eax
    000000e7: 	xorl	%edx, %eax
    000000e9: 	movq	%rsi, %rdx
    000000ec: 	andq	$-0x8, %rdx
    000000f0: 	addq	%rdx, %r8
    000000f3: 	cmpq	%rdx, %rsi
    000000f6: 	je	.Ltmp227 # Offset: 246
    000000f8: 	leaq	0x1(%r8), %rdx
    000000fc: 	xorb	(%r8), %al
    000000ff: 	cmpq	%rdx, %rdi
    00000102: 	je	.Ltmp227 # Offset: 258
    00000104: 	leaq	0x2(%r8), %rdx
    00000108: 	xorb	0x1(%r8), %al
    0000010c: 	cmpq	%rdx, %rdi
    0000010f: 	je	.Ltmp227 # Offset: 271
    00000111: 	leaq	0x3(%r8), %rdx
    00000115: 	xorb	0x2(%r8), %al
    00000119: 	cmpq	%rdx, %rdi
    0000011c: 	je	.Ltmp227 # Offset: 284
    0000011e: 	leaq	0x4(%r8), %rdx
    00000122: 	xorb	0x3(%r8), %al
    00000126: 	cmpq	%rdx, %rdi
    00000129: 	je	.Ltmp227 # Offset: 297
    0000012b: 	leaq	0x5(%r8), %rdx
    0000012f: 	xorb	0x4(%r8), %al
    00000133: 	cmpq	%rdx, %rdi
    00000136: 	je	.Ltmp227 # Offset: 310
    00000138: 	leaq	0x6(%r8), %rdx
    0000013c: 	xorb	0x5(%r8), %al
    00000140: 	cmpq	%rdx, %rdi
    00000143: 	je	.Ltmp227 # Offset: 323
    00000145: 	xorb	0x6(%r8), %al
.Ltmp227:
    00000149: 	popq	%rbx
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp222:
    00000150: 	movl	%edx, %eax
    00000152: 	retq # Offset: 338
.Ltmp223:
    00000153: 	movl	%edx, %ecx
    00000155: 	movq	%r9, %r8
    00000158: 	xorl	%eax, %eax
    0000015a: 	jmp	.Ltmp228 # Offset: 346
.Ltmp226:
    0000015f: 	movzbl	(%r8), %eax
    00000163: 	leaq	0x1(%r8), %rdx
    00000167: 	xorl	%ecx, %eax
    00000169: 	cmpq	%rdx, %rdi
    0000016c: 	je	.Ltmp229 # Offset: 364
    0000016e: 	leaq	0x2(%r8), %rdx
    00000172: 	xorb	0x1(%r8), %al
    00000176: 	cmpq	%rdx, %rdi
    00000179: 	je	.Ltmp229 # Offset: 377
    0000017b: 	leaq	0x3(%r8), %rdx
    0000017f: 	xorb	0x2(%r8), %al
    00000183: 	cmpq	%rdx, %rdi
    00000186: 	je	.Ltmp229 # Offset: 390
    00000188: 	leaq	0x4(%r8), %rdx
    0000018c: 	xorb	0x3(%r8), %al
    00000190: 	cmpq	%rdx, %rdi
    00000193: 	je	.Ltmp229 # Offset: 403
    00000195: 	leaq	0x5(%r8), %rdx
    00000199: 	xorb	0x4(%r8), %al
    0000019d: 	cmpq	%rdx, %rdi
    000001a0: 	je	.Ltmp229 # Offset: 416
    000001a2: 	leaq	0x6(%r8), %rdx
    000001a6: 	xorb	0x5(%r8), %al
    000001aa: 	cmpq	%rdx, %rdi
    000001ad: 	je	.Ltmp229 # Offset: 429
    000001af: 	xorb	0x6(%r8), %al
.Ltmp229:
    000001b3: 	retq # Offset: 435
.Ltmp225:
    000001b4: 	movl	%ecx, %eax
    000001b6: 	retq # Offset: 438
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor2IhET_PKS0_iS0_"

Binary Function "_Z8bit_xor3IhET_PKS0_iS0_" after disassembly {
  Number      : 60
  State       : disassembled
  Address     : 0x5c80
  Size        : 0x2bb
  MaxSize     : 0x2c0
  Offset      : 0x5c80
  Section     : .text
  Orc Section : .local.text._Z8bit_xor3IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	leal	-0x1(%rsi), %edi
    0000000a: 	movl	%esi, %r8d
    0000000d: 	movl	%edx, %eax
    0000000f: 	testl	%edi, %edi
    00000011: 	jle	.Ltmp230 # Offset: 17
    00000017: 	leal	-0x2(%rsi), %r9d
    0000001b: 	movl	%r9d, %esi
    0000001e: 	shrl	%esi
    00000020: 	addl	$0x1, %esi
    00000023: 	cmpl	$0x1d, %r9d
    00000027: 	jbe	.Ltmp231 # Offset: 39
    0000002d: 	movl	%esi, %r9d
    00000030: 	movdqa	DATAat0x33580(%rip), %xmm4
    00000038: 	movq	%rcx, %rax
    0000003b: 	pxor	%xmm2, %xmm2
    0000003f: 	shrl	$0x4, %r9d
    00000043: 	subl	$0x1, %r9d
    00000047: 	shlq	$0x5, %r9
    0000004b: 	leaq	0x20(%rcx,%r9), %r9
.Ltmp232:
    00000050: 	movdqu	(%rax), %xmm0
    00000054: 	movdqu	0x10(%rax), %xmm3
    00000059: 	addq	$0x20, %rax
    0000005d: 	pand	%xmm4, %xmm0
    00000061: 	pand	%xmm4, %xmm3
    00000065: 	movdqa	%xmm0, %xmm1
    00000069: 	movdqu	-0x20(%rax), %xmm0
    0000006e: 	packuswb	%xmm3, %xmm1
    00000072: 	movdqu	-0x10(%rax), %xmm3
    00000077: 	psrlw	$0x8, %xmm0
    0000007c: 	psrlw	$0x8, %xmm3
    00000081: 	packuswb	%xmm3, %xmm0
    00000085: 	pxor	%xmm1, %xmm0
    00000089: 	pxor	%xmm0, %xmm2
    0000008d: 	cmpq	%r9, %rax
    00000090: 	jne	.Ltmp232 # Offset: 144
    00000092: 	movdqa	%xmm2, %xmm0
    00000096: 	movl	%esi, %r9d
    00000099: 	psrldq	$0x8, %xmm0
    0000009e: 	andl	$-0x10, %r9d
    000000a2: 	pxor	%xmm0, %xmm2
    000000a6: 	movdqa	%xmm2, %xmm0
    000000aa: 	psrldq	$0x4, %xmm0
    000000af: 	pxor	%xmm0, %xmm2
    000000b3: 	movdqa	%xmm2, %xmm0
    000000b7: 	psrldq	$0x2, %xmm0
    000000bc: 	pxor	%xmm0, %xmm2
    000000c0: 	movdqa	%xmm2, %xmm0
    000000c4: 	psrldq	$0x1, %xmm0
    000000c9: 	pxor	%xmm0, %xmm2
    000000cd: 	movd	%xmm2, %eax
    000000d1: 	xorl	%edx, %eax
    000000d3: 	leal	(%r9,%r9), %edx
    000000d7: 	cmpl	%r9d, %esi
    000000da: 	je	.Ltmp233 # Offset: 218
.Ltmp236:
    000000e0: 	movslq	%edx, %r9
    000000e3: 	xorb	(%rcx,%r9), %al
    000000e7: 	xorb	0x1(%rcx,%r9), %al
    000000ec: 	leal	0x2(%rdx), %r9d
    000000f0: 	cmpl	%edi, %r9d
    000000f3: 	jge	.Ltmp233 # Offset: 243
    000000f9: 	movslq	%r9d, %r9
    000000fc: 	movzbl	0x1(%rcx,%r9), %r10d
    00000102: 	xorb	(%rcx,%r9), %r10b
    00000106: 	movl	%r10d, %r9d
    00000109: 	xorl	%r9d, %eax
    0000010c: 	leal	0x4(%rdx), %r9d
    00000110: 	cmpl	%r9d, %edi
    00000113: 	jle	.Ltmp233 # Offset: 275
    00000119: 	movslq	%r9d, %r9
    0000011c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000122: 	xorb	(%rcx,%r9), %r10b
    00000126: 	movl	%r10d, %r9d
    00000129: 	xorl	%r9d, %eax
    0000012c: 	leal	0x6(%rdx), %r9d
    00000130: 	cmpl	%r9d, %edi
    00000133: 	jle	.Ltmp233 # Offset: 307
    00000139: 	movslq	%r9d, %r9
    0000013c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000142: 	xorb	(%rcx,%r9), %r10b
    00000146: 	movl	%r10d, %r9d
    00000149: 	xorl	%r9d, %eax
    0000014c: 	leal	0x8(%rdx), %r9d
    00000150: 	cmpl	%r9d, %edi
    00000153: 	jle	.Ltmp233 # Offset: 339
    00000159: 	movslq	%r9d, %r9
    0000015c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000162: 	xorb	(%rcx,%r9), %r10b
    00000166: 	movl	%r10d, %r9d
    00000169: 	xorl	%r9d, %eax
    0000016c: 	leal	0xa(%rdx), %r9d
    00000170: 	cmpl	%r9d, %edi
    00000173: 	jle	.Ltmp233 # Offset: 371
    00000179: 	movslq	%r9d, %r9
    0000017c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000182: 	xorb	(%rcx,%r9), %r10b
    00000186: 	movl	%r10d, %r9d
    00000189: 	xorl	%r9d, %eax
    0000018c: 	leal	0xc(%rdx), %r9d
    00000190: 	cmpl	%r9d, %edi
    00000193: 	jle	.Ltmp233 # Offset: 403
    00000199: 	movslq	%r9d, %r9
    0000019c: 	movzbl	0x1(%rcx,%r9), %r10d
    000001a2: 	xorb	(%rcx,%r9), %r10b
    000001a6: 	movl	%r10d, %r9d
    000001a9: 	xorl	%r9d, %eax
    000001ac: 	leal	0xe(%rdx), %r9d
    000001b0: 	cmpl	%r9d, %edi
    000001b3: 	jle	.Ltmp233 # Offset: 435
    000001b9: 	movslq	%r9d, %r9
    000001bc: 	movzbl	0x1(%rcx,%r9), %r10d
    000001c2: 	xorb	(%rcx,%r9), %r10b
    000001c6: 	movl	%r10d, %r9d
    000001c9: 	xorl	%r9d, %eax
    000001cc: 	leal	0x10(%rdx), %r9d
    000001d0: 	cmpl	%r9d, %edi
    000001d3: 	jle	.Ltmp233 # Offset: 467
    000001d9: 	movslq	%r9d, %r9
    000001dc: 	movzbl	0x1(%rcx,%r9), %r10d
    000001e2: 	xorb	(%rcx,%r9), %r10b
    000001e6: 	movl	%r10d, %r9d
    000001e9: 	xorl	%r9d, %eax
    000001ec: 	leal	0x12(%rdx), %r9d
    000001f0: 	cmpl	%r9d, %edi
    000001f3: 	jle	.Ltmp233 # Offset: 499
    000001f9: 	movslq	%r9d, %r9
    000001fc: 	movzbl	0x1(%rcx,%r9), %r10d
    00000202: 	xorb	(%rcx,%r9), %r10b
    00000206: 	movl	%r10d, %r9d
    00000209: 	xorl	%r9d, %eax
    0000020c: 	leal	0x14(%rdx), %r9d
    00000210: 	cmpl	%r9d, %edi
    00000213: 	jle	.Ltmp233 # Offset: 531
    00000219: 	movslq	%r9d, %r9
    0000021c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000222: 	xorb	(%rcx,%r9), %r10b
    00000226: 	movl	%r10d, %r9d
    00000229: 	xorl	%r9d, %eax
    0000022c: 	leal	0x16(%rdx), %r9d
    00000230: 	cmpl	%r9d, %edi
    00000233: 	jle	.Ltmp233 # Offset: 563
    00000235: 	movslq	%r9d, %r9
    00000238: 	movzbl	0x1(%rcx,%r9), %r10d
    0000023e: 	xorb	(%rcx,%r9), %r10b
    00000242: 	movl	%r10d, %r9d
    00000245: 	xorl	%r9d, %eax
    00000248: 	leal	0x18(%rdx), %r9d
    0000024c: 	cmpl	%r9d, %edi
    0000024f: 	jle	.Ltmp233 # Offset: 591
    00000251: 	movslq	%r9d, %r9
    00000254: 	movzbl	0x1(%rcx,%r9), %r10d
    0000025a: 	xorb	(%rcx,%r9), %r10b
    0000025e: 	movl	%r10d, %r9d
    00000261: 	xorl	%r9d, %eax
    00000264: 	leal	0x1a(%rdx), %r9d
    00000268: 	cmpl	%r9d, %edi
    0000026b: 	jle	.Ltmp233 # Offset: 619
    0000026d: 	movslq	%r9d, %r9
    00000270: 	addl	$0x1c, %edx
    00000273: 	movzbl	0x1(%rcx,%r9), %r10d
    00000279: 	xorb	(%rcx,%r9), %r10b
    0000027d: 	movl	%r10d, %r9d
    00000280: 	xorl	%r9d, %eax
    00000283: 	cmpl	%edx, %edi
    00000285: 	jle	.Ltmp233 # Offset: 645
    00000287: 	movslq	%edx, %rdx
    0000028a: 	movzbl	0x1(%rcx,%rdx), %edi
    0000028f: 	xorb	(%rcx,%rdx), %dil
    00000293: 	movl	%edi, %edx
    00000295: 	xorl	%edx, %eax
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp233:
    000002a0: 	addl	%esi, %esi
.Ltmp235:
    000002a2: 	cmpl	%r8d, %esi
    000002a5: 	jge	.Ltmp234 # Offset: 677
    000002a7: 	movslq	%esi, %rsi
    000002aa: 	xorb	(%rcx,%rsi), %al
.Ltmp234:
    000002ad: 	retq # Offset: 685
    000002ae: 	nop # Size: 2
.Ltmp230:
    000002b0: 	xorl	%esi, %esi
    000002b2: 	jmp	.Ltmp235 # Offset: 690
.Ltmp231:
    000002b4: 	xorl	%edx, %edx
    000002b6: 	jmp	.Ltmp236 # Offset: 694
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor3IhET_PKS0_iS0_"

Binary Function "_Z8bit_xor4IhET_PKS0_iS0_" after disassembly {
  Number      : 61
  State       : disassembled
  Address     : 0x5f40
  Size        : 0x41b
  MaxSize     : 0x420
  Offset      : 0x5f40
  Section     : .text
  Orc Section : .local.text._Z8bit_xor4IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	endbr64
    00000004: 	leal	-0x3(%rsi), %r8d
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%edx, %eax
    0000000d: 	movl	%esi, %edi
    0000000f: 	testl	%r8d, %r8d
    00000012: 	jle	.Ltmp237 # Offset: 18
    00000018: 	leal	-0x4(%rsi), %r9d
    0000001c: 	movl	%r9d, %esi
    0000001f: 	shrl	$0x2, %esi
    00000022: 	addl	$0x1, %esi
    00000025: 	cmpl	$0x3b, %r9d
    00000029: 	jbe	.Ltmp238 # Offset: 41
    0000002f: 	movl	%esi, %r9d
    00000032: 	movdqa	DATAat0x33580(%rip), %xmm5
    0000003a: 	movq	%rcx, %rax
    0000003d: 	pxor	%xmm2, %xmm2
    00000041: 	shrl	$0x4, %r9d
    00000045: 	subl	$0x1, %r9d
    00000049: 	shlq	$0x6, %r9
    0000004d: 	leaq	0x40(%rcx,%r9), %r9
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp239:
    00000058: 	movdqu	(%rax), %xmm1
    0000005c: 	movdqu	0x10(%rax), %xmm0
    00000061: 	movdqa	%xmm5, %xmm7
    00000065: 	addq	$0x40, %rax
    00000069: 	movdqu	-0x20(%rax), %xmm6
    0000006e: 	movdqu	-0x10(%rax), %xmm3
    00000073: 	pand	%xmm5, %xmm1
    00000077: 	pand	%xmm5, %xmm0
    0000007b: 	movdqa	%xmm1, %xmm4
    0000007f: 	movdqu	-0x30(%rax), %xmm1
    00000084: 	pand	%xmm5, %xmm6
    00000088: 	packuswb	%xmm0, %xmm4
    0000008c: 	movdqu	-0x40(%rax), %xmm0
    00000091: 	psrlw	$0x8, %xmm3
    00000096: 	psrlw	$0x8, %xmm1
    0000009b: 	psrlw	$0x8, %xmm0
    000000a0: 	packuswb	%xmm1, %xmm0
    000000a4: 	movdqu	-0x10(%rax), %xmm1
    000000a9: 	pand	%xmm5, %xmm1
    000000ad: 	packuswb	%xmm1, %xmm6
    000000b1: 	movdqu	-0x20(%rax), %xmm1
    000000b6: 	psrlw	$0x8, %xmm1
    000000bb: 	packuswb	%xmm3, %xmm1
    000000bf: 	movdqa	%xmm5, %xmm3
    000000c3: 	pand	%xmm1, %xmm7
    000000c7: 	psrlw	$0x8, %xmm1
    000000cc: 	pand	%xmm0, %xmm3
    000000d0: 	psrlw	$0x8, %xmm0
    000000d5: 	packuswb	%xmm7, %xmm3
    000000d9: 	movdqa	%xmm5, %xmm7
    000000dd: 	packuswb	%xmm1, %xmm0
    000000e1: 	movdqa	%xmm5, %xmm1
    000000e5: 	pand	%xmm6, %xmm7
    000000e9: 	pand	%xmm4, %xmm1
    000000ed: 	psrlw	$0x8, %xmm6
    000000f2: 	pxor	%xmm3, %xmm0
    000000f6: 	movdqa	%xmm1, %xmm3
    000000fa: 	movdqa	%xmm4, %xmm1
    000000fe: 	psrlw	$0x8, %xmm1
    00000103: 	packuswb	%xmm7, %xmm3
    00000107: 	packuswb	%xmm6, %xmm1
    0000010b: 	pxor	%xmm3, %xmm1
    0000010f: 	pxor	%xmm1, %xmm0
    00000113: 	pxor	%xmm0, %xmm2
    00000117: 	cmpq	%r9, %rax
    0000011a: 	jne	.Ltmp239 # Offset: 282
    00000120: 	movdqa	%xmm2, %xmm0
    00000124: 	movl	%esi, %r9d
    00000127: 	psrldq	$0x8, %xmm0
    0000012c: 	andl	$-0x10, %r9d
    00000130: 	pxor	%xmm0, %xmm2
    00000134: 	movdqa	%xmm2, %xmm0
    00000138: 	psrldq	$0x4, %xmm0
    0000013d: 	pxor	%xmm0, %xmm2
    00000141: 	movdqa	%xmm2, %xmm0
    00000145: 	psrldq	$0x2, %xmm0
    0000014a: 	pxor	%xmm0, %xmm2
    0000014e: 	movdqa	%xmm2, %xmm0
    00000152: 	psrldq	$0x1, %xmm0
    00000157: 	pxor	%xmm0, %xmm2
    0000015b: 	movd	%xmm2, %eax
    0000015f: 	xorl	%edx, %eax
    00000161: 	leal	(,%r9,4), %edx
    00000169: 	cmpl	%esi, %r9d
    0000016c: 	je	.Ltmp240 # Offset: 364
.Ltmp243:
    00000172: 	movslq	%edx, %r9
    00000175: 	xorb	(%rcx,%r9), %al
    00000179: 	xorb	0x1(%rcx,%r9), %al
    0000017e: 	xorb	0x2(%rcx,%r9), %al
    00000183: 	xorb	0x3(%rcx,%r9), %al
    00000188: 	leal	0x4(%rdx), %r9d
    0000018c: 	cmpl	%r9d, %r8d
    0000018f: 	jle	.Ltmp240 # Offset: 399
    00000195: 	movslq	%r9d, %r9
    00000198: 	movzbl	0x1(%rcx,%r9), %r10d
    0000019e: 	xorb	0x2(%rcx,%r9), %r10b
    000001a3: 	xorb	(%rcx,%r9), %r10b
    000001a7: 	xorb	0x3(%rcx,%r9), %r10b
    000001ac: 	movl	%r10d, %r9d
    000001af: 	xorl	%r9d, %eax
    000001b2: 	leal	0x8(%rdx), %r9d
    000001b6: 	cmpl	%r9d, %r8d
    000001b9: 	jle	.Ltmp240 # Offset: 441
    000001bf: 	movslq	%r9d, %r9
    000001c2: 	movzbl	0x1(%rcx,%r9), %r10d
    000001c8: 	xorb	0x2(%rcx,%r9), %r10b
    000001cd: 	xorb	(%rcx,%r9), %r10b
    000001d1: 	xorb	0x3(%rcx,%r9), %r10b
    000001d6: 	movl	%r10d, %r9d
    000001d9: 	xorl	%r9d, %eax
    000001dc: 	leal	0xc(%rdx), %r9d
    000001e0: 	cmpl	%r9d, %r8d
    000001e3: 	jle	.Ltmp240 # Offset: 483
    000001e9: 	movslq	%r9d, %r9
    000001ec: 	movzbl	0x1(%rcx,%r9), %r10d
    000001f2: 	xorb	0x2(%rcx,%r9), %r10b
    000001f7: 	xorb	(%rcx,%r9), %r10b
    000001fb: 	xorb	0x3(%rcx,%r9), %r10b
    00000200: 	movl	%r10d, %r9d
    00000203: 	xorl	%r9d, %eax
    00000206: 	leal	0x10(%rdx), %r9d
    0000020a: 	cmpl	%r9d, %r8d
    0000020d: 	jle	.Ltmp240 # Offset: 525
    00000213: 	movslq	%r9d, %r9
    00000216: 	movzbl	0x1(%rcx,%r9), %r10d
    0000021c: 	xorb	0x2(%rcx,%r9), %r10b
    00000221: 	xorb	(%rcx,%r9), %r10b
    00000225: 	xorb	0x3(%rcx,%r9), %r10b
    0000022a: 	movl	%r10d, %r9d
    0000022d: 	xorl	%r9d, %eax
    00000230: 	leal	0x14(%rdx), %r9d
    00000234: 	cmpl	%r9d, %r8d
    00000237: 	jle	.Ltmp240 # Offset: 567
    0000023d: 	movslq	%r9d, %r9
    00000240: 	movzbl	0x1(%rcx,%r9), %r10d
    00000246: 	xorb	0x2(%rcx,%r9), %r10b
    0000024b: 	xorb	(%rcx,%r9), %r10b
    0000024f: 	xorb	0x3(%rcx,%r9), %r10b
    00000254: 	movl	%r10d, %r9d
    00000257: 	xorl	%r9d, %eax
    0000025a: 	leal	0x18(%rdx), %r9d
    0000025e: 	cmpl	%r9d, %r8d
    00000261: 	jle	.Ltmp240 # Offset: 609
    00000267: 	movslq	%r9d, %r9
    0000026a: 	movzbl	0x1(%rcx,%r9), %r10d
    00000270: 	xorb	0x2(%rcx,%r9), %r10b
    00000275: 	xorb	(%rcx,%r9), %r10b
    00000279: 	xorb	0x3(%rcx,%r9), %r10b
    0000027e: 	movl	%r10d, %r9d
    00000281: 	xorl	%r9d, %eax
    00000284: 	leal	0x1c(%rdx), %r9d
    00000288: 	cmpl	%r9d, %r8d
    0000028b: 	jle	.Ltmp240 # Offset: 651
    00000291: 	movslq	%r9d, %r9
    00000294: 	movzbl	0x1(%rcx,%r9), %r10d
    0000029a: 	xorb	0x2(%rcx,%r9), %r10b
    0000029f: 	xorb	(%rcx,%r9), %r10b
    000002a3: 	xorb	0x3(%rcx,%r9), %r10b
    000002a8: 	movl	%r10d, %r9d
    000002ab: 	xorl	%r9d, %eax
    000002ae: 	leal	0x20(%rdx), %r9d
    000002b2: 	cmpl	%r9d, %r8d
    000002b5: 	jle	.Ltmp240 # Offset: 693
    000002bb: 	movslq	%r9d, %r9
    000002be: 	movzbl	0x1(%rcx,%r9), %r10d
    000002c4: 	xorb	0x2(%rcx,%r9), %r10b
    000002c9: 	xorb	(%rcx,%r9), %r10b
    000002cd: 	xorb	0x3(%rcx,%r9), %r10b
    000002d2: 	movl	%r10d, %r9d
    000002d5: 	xorl	%r9d, %eax
    000002d8: 	leal	0x24(%rdx), %r9d
    000002dc: 	cmpl	%r9d, %r8d
    000002df: 	jle	.Ltmp240 # Offset: 735
    000002e5: 	movslq	%r9d, %r9
    000002e8: 	movzbl	0x1(%rcx,%r9), %r10d
    000002ee: 	xorb	0x2(%rcx,%r9), %r10b
    000002f3: 	xorb	(%rcx,%r9), %r10b
    000002f7: 	xorb	0x3(%rcx,%r9), %r10b
    000002fc: 	movl	%r10d, %r9d
    000002ff: 	xorl	%r9d, %eax
    00000302: 	leal	0x28(%rdx), %r9d
    00000306: 	cmpl	%r9d, %r8d
    00000309: 	jle	.Ltmp240 # Offset: 777
    0000030f: 	movslq	%r9d, %r9
    00000312: 	movzbl	0x1(%rcx,%r9), %r10d
    00000318: 	xorb	0x2(%rcx,%r9), %r10b
    0000031d: 	xorb	(%rcx,%r9), %r10b
    00000321: 	xorb	0x3(%rcx,%r9), %r10b
    00000326: 	movl	%r10d, %r9d
    00000329: 	xorl	%r9d, %eax
    0000032c: 	leal	0x2c(%rdx), %r9d
    00000330: 	cmpl	%r9d, %r8d
    00000333: 	jle	.Ltmp240 # Offset: 819
    00000339: 	movslq	%r9d, %r9
    0000033c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000342: 	xorb	0x2(%rcx,%r9), %r10b
    00000347: 	xorb	(%rcx,%r9), %r10b
    0000034b: 	xorb	0x3(%rcx,%r9), %r10b
    00000350: 	movl	%r10d, %r9d
    00000353: 	xorl	%r9d, %eax
    00000356: 	leal	0x30(%rdx), %r9d
    0000035a: 	cmpl	%r9d, %r8d
    0000035d: 	jle	.Ltmp240 # Offset: 861
    0000035f: 	movslq	%r9d, %r9
    00000362: 	movzbl	0x1(%rcx,%r9), %r10d
    00000368: 	xorb	0x2(%rcx,%r9), %r10b
    0000036d: 	xorb	(%rcx,%r9), %r10b
    00000371: 	xorb	0x3(%rcx,%r9), %r10b
    00000376: 	movl	%r10d, %r9d
    00000379: 	xorl	%r9d, %eax
    0000037c: 	leal	0x34(%rdx), %r9d
    00000380: 	cmpl	%r9d, %r8d
    00000383: 	jle	.Ltmp240 # Offset: 899
    00000385: 	movslq	%r9d, %r9
    00000388: 	addl	$0x38, %edx
    0000038b: 	movzbl	0x1(%rcx,%r9), %r10d
    00000391: 	xorb	0x2(%rcx,%r9), %r10b
    00000396: 	xorb	(%rcx,%r9), %r10b
    0000039a: 	xorb	0x3(%rcx,%r9), %r10b
    0000039f: 	movl	%r10d, %r9d
    000003a2: 	xorl	%r9d, %eax
    000003a5: 	cmpl	%edx, %r8d
    000003a8: 	jle	.Ltmp240 # Offset: 936
    000003aa: 	movslq	%edx, %rdx
    000003ad: 	movzbl	0x2(%rcx,%rdx), %r8d
    000003b3: 	xorb	0x1(%rcx,%rdx), %r8b
    000003b8: 	xorb	(%rcx,%rdx), %r8b
    000003bc: 	xorb	0x3(%rcx,%rdx), %r8b
    000003c1: 	movl	%r8d, %edx
    000003c4: 	xorl	%edx, %eax
    000003c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp240:
    000003d0: 	leal	(,%rsi,4), %edx
.Ltmp242:
    000003d7: 	cmpl	%edx, %edi
    000003d9: 	jle	.Ltmp241 # Offset: 985
    000003db: 	movslq	%edx, %rsi
    000003de: 	xorb	(%rcx,%rsi), %al
    000003e1: 	leal	0x1(%rdx), %esi
    000003e4: 	cmpl	%edi, %esi
    000003e6: 	jge	.Ltmp241 # Offset: 998
    000003e8: 	movslq	%esi, %rsi
    000003eb: 	xorb	(%rcx,%rsi), %al
    000003ee: 	leal	0x2(%rdx), %esi
    000003f1: 	cmpl	%edi, %esi
    000003f3: 	jge	.Ltmp241 # Offset: 1011
    000003f5: 	movslq	%esi, %rsi
    000003f8: 	addl	$0x3, %edx
    000003fb: 	xorb	(%rcx,%rsi), %al
    000003fe: 	cmpl	%edx, %edi
    00000400: 	jle	.Ltmp241 # Offset: 1024
    00000402: 	movslq	%edx, %rdx
    00000405: 	xorb	(%rcx,%rdx), %al
.Ltmp241:
    00000408: 	retq # Offset: 1032
    00000409: 	nopl	(%rax) # Size: 7
.Ltmp237:
    00000410: 	xorl	%edx, %edx
    00000412: 	jmp	.Ltmp242 # Offset: 1042
.Ltmp238:
    00000414: 	xorl	%edx, %edx
    00000416: 	jmp	.Ltmp243 # Offset: 1046
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor4IhET_PKS0_iS0_"

Binary Function "_Z8bit_xor5IhET_PKS0_iS0_" after disassembly {
  Number      : 62
  State       : disassembled
  Address     : 0x6360
  Size        : 0x3b8
  MaxSize     : 0x3c0
  Offset      : 0x6360
  Section     : .text
  Orc Section : .local.text._Z8bit_xor5IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	leal	-0x1(%rsi), %r8d
    00000009: 	movq	%rdi, %rcx
    0000000c: 	movl	%edx, %eax
    0000000e: 	pushq	%rbx
    0000000f: 	subq	$0x100, %rsp
    00000016: 	testl	%r8d, %r8d
    00000019: 	jle	.Ltmp244 # Offset: 25
    0000001f: 	leal	-0x2(%rsi), %edi
    00000022: 	movl	%edi, %r9d
    00000025: 	shrl	%r9d
    00000028: 	leal	0x1(%r9), %r10d
    0000002c: 	cmpl	$0xd, %edi
    0000002f: 	jbe	.Ltmp245 # Offset: 47
    00000035: 	movzbl	%dl, %edx
    00000038: 	movq	%rcx, %rax
    0000003b: 	movd	%edx, %xmm0
    0000003f: 	movl	%r10d, %edx
    00000042: 	shrl	$0x3, %edx
    00000045: 	subl	$0x1, %edx
    00000048: 	shlq	$0x4, %rdx
    0000004c: 	leaq	0x10(%rcx,%rdx), %rdx
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp246:
    00000058: 	movdqu	(%rax), %xmm2
    0000005c: 	addq	$0x10, %rax
    00000060: 	pxor	%xmm2, %xmm0
    00000064: 	cmpq	%rax, %rdx
    00000067: 	jne	.Ltmp246 # Offset: 103
    00000069: 	movl	%r10d, %edx
    0000006c: 	movd	%xmm0, %eax
    00000070: 	movaps	%xmm0, 0xe8(%rsp)
    00000078: 	xorb	0xea(%rsp), %al
    0000007f: 	andl	$-0x8, %edx
    00000082: 	movaps	%xmm0, 0xd8(%rsp)
    0000008a: 	xorb	0xdc(%rsp), %al
    00000091: 	movaps	%xmm0, 0xc8(%rsp)
    00000099: 	leal	(%rdx,%rdx), %r11d
    0000009d: 	xorb	0xce(%rsp), %al
    000000a4: 	movaps	%xmm0, 0xb8(%rsp)
    000000ac: 	xorb	0xc0(%rsp), %al
    000000b3: 	movaps	%xmm0, 0xa8(%rsp)
    000000bb: 	xorb	0xb2(%rsp), %al
    000000c2: 	movaps	%xmm0, 0x98(%rsp)
    000000ca: 	xorb	0xa4(%rsp), %al
    000000d1: 	movaps	%xmm0, 0x88(%rsp)
    000000d9: 	xorb	0x96(%rsp), %al
    000000e0: 	movaps	%xmm0, 0x78(%rsp)
    000000e5: 	movaps	%xmm0, 0x68(%rsp)
    000000ea: 	movzbl	0x6b(%rsp), %edi
    000000ef: 	xorb	0x79(%rsp), %dil
    000000f4: 	movaps	%xmm0, 0x58(%rsp)
    000000f9: 	xorb	0x5d(%rsp), %dil
    000000fe: 	movaps	%xmm0, 0x48(%rsp)
    00000103: 	xorb	0x4f(%rsp), %dil
    00000108: 	movaps	%xmm0, 0x38(%rsp)
    0000010d: 	xorb	0x41(%rsp), %dil
    00000112: 	movaps	%xmm0, 0x28(%rsp)
    00000117: 	xorb	0x33(%rsp), %dil
    0000011c: 	movaps	%xmm0, 0x18(%rsp)
    00000121: 	xorb	0x25(%rsp), %dil
    00000126: 	movaps	%xmm0, 0x8(%rsp)
    0000012b: 	xorb	0x17(%rsp), %dil
    00000130: 	cmpl	%edx, %r10d
    00000133: 	je	.Ltmp247 # Offset: 307
.Ltmp255:
    00000139: 	subl	%edx, %r9d
    0000013c: 	leal	0x1(%r9), %ebx
    00000140: 	cmpl	$0x2, %r9d
    00000144: 	jbe	.Ltmp248 # Offset: 324
    0000014a: 	movzbl	%dil, %edi
    0000014e: 	movzbl	%al, %eax
    00000151: 	movq	(%rcx,%rdx,2), %xmm0
    00000156: 	shlq	$0x8, %rdi
    0000015a: 	orq	%rax, %rdi
    0000015d: 	movq	%rdi, %xmm3
    00000162: 	pxor	%xmm0, %xmm3
    00000166: 	movq	%xmm3, %rdx
    0000016b: 	movq	%xmm3, %rdi
    00000170: 	movq	%xmm3, %r9
    00000175: 	movq	%xmm3, (%rsp)
    0000017a: 	movl	%edx, %eax
    0000017c: 	shrq	$0x10, %rdi
    00000180: 	movq	%xmm3, -0x8(%rsp)
    00000186: 	xorl	%edi, %eax
    00000188: 	movq	%xmm3, %rdi
    0000018d: 	shrq	$0x18, %r9
    00000191: 	movq	%xmm3, -0x10(%rsp)
    00000197: 	shrq	$0x20, %rdi
    0000019b: 	movq	%xmm3, -0x18(%rsp)
    000001a1: 	xorl	%edi, %eax
    000001a3: 	movq	%xmm3, %rdi
    000001a8: 	movq	%xmm3, -0x20(%rsp)
    000001ae: 	shrq	$0x30, %rdi
    000001b2: 	movq	%xmm3, -0x28(%rsp)
    000001b8: 	xorl	%edi, %eax
    000001ba: 	movzbl	%dh, %edi
    000001bd: 	movl	%ebx, %edx
    000001bf: 	movq	%xmm3, -0x30(%rsp)
    000001c5: 	xorl	%r9d, %edi
    000001c8: 	movq	%xmm3, %r9
    000001cd: 	andl	$-0x4, %edx
    000001d0: 	movq	%xmm3, -0x38(%rsp)
    000001d6: 	shrq	$0x28, %r9
    000001da: 	leal	(%r11,%rdx,2), %r11d
    000001de: 	xorl	%r9d, %edi
    000001e1: 	movq	%xmm3, %r9
    000001e6: 	shrq	$0x38, %r9
    000001ea: 	xorl	%r9d, %edi
    000001ed: 	cmpl	%edx, %ebx
    000001ef: 	je	.Ltmp247 # Offset: 495
.Ltmp248:
    000001f1: 	movslq	%r11d, %rdx
    000001f4: 	xorb	(%rcx,%rdx), %al
    000001f7: 	xorb	0x1(%rcx,%rdx), %dil
    000001fc: 	leal	0x2(%r11), %edx
    00000200: 	cmpl	%edx, %r8d
    00000203: 	jle	.Ltmp247 # Offset: 515
    00000205: 	movslq	%edx, %rdx
    00000208: 	addl	$0x4, %r11d
    0000020c: 	xorb	(%rcx,%rdx), %al
    0000020f: 	xorb	0x1(%rcx,%rdx), %dil
    00000214: 	cmpl	%r11d, %r8d
    00000217: 	jle	.Ltmp247 # Offset: 535
    00000219: 	movslq	%r11d, %r11
    0000021c: 	xorb	(%rcx,%r11), %al
    00000220: 	xorb	0x1(%rcx,%r11), %dil
.Ltmp247:
    00000225: 	addl	%r10d, %r10d
.Ltmp254:
    00000228: 	cmpl	%r10d, %esi
    0000022b: 	jle	.Ltmp249 # Offset: 555
    00000231: 	movl	%esi, %r9d
    00000234: 	subl	%r10d, %r9d
    00000237: 	leal	-0x1(%r9), %edx
    0000023b: 	cmpl	$0xe, %edx
    0000023e: 	jbe	.Ltmp250 # Offset: 574
    00000244: 	movl	%r9d, %edx
    00000247: 	movslq	%r10d, %r8
    0000024a: 	pxor	%xmm0, %xmm0
    0000024e: 	shrl	$0x4, %edx
    00000251: 	addq	%rcx, %r8
    00000254: 	leal	-0x1(%rdx), %r11d
    00000258: 	leaq	0x10(%r8), %rdx
    0000025c: 	shlq	$0x4, %r11
    00000260: 	addq	%rdx, %r11
    00000263: 	jmp	.Ltmp251 # Offset: 611
    00000265: 	nopl	(%rax) # Size: 3
.Ltmp252:
    00000268: 	addq	$0x10, %rdx
.Ltmp251:
    0000026c: 	movdqu	(%r8), %xmm1
    00000271: 	movq	%rdx, %r8
    00000274: 	pxor	%xmm1, %xmm0
    00000278: 	cmpq	%r11, %rdx
    0000027b: 	jne	.Ltmp252 # Offset: 635
    0000027d: 	movdqa	%xmm0, %xmm1
    00000281: 	psrldq	$0x8, %xmm1
    00000286: 	pxor	%xmm1, %xmm0
    0000028a: 	movdqa	%xmm0, %xmm1
    0000028e: 	psrldq	$0x4, %xmm1
    00000293: 	pxor	%xmm1, %xmm0
    00000297: 	movdqa	%xmm0, %xmm1
    0000029b: 	psrldq	$0x2, %xmm1
    000002a0: 	pxor	%xmm1, %xmm0
    000002a4: 	movdqa	%xmm0, %xmm1
    000002a8: 	psrldq	$0x1, %xmm1
    000002ad: 	pxor	%xmm1, %xmm0
    000002b1: 	movd	%xmm0, %edx
    000002b5: 	xorl	%edx, %eax
    000002b7: 	movl	%r9d, %edx
    000002ba: 	andl	$-0x10, %edx
    000002bd: 	leal	(%rdx,%r10), %r8d
    000002c1: 	cmpl	%r9d, %edx
    000002c4: 	je	.Ltmp249 # Offset: 708
.Ltmp256:
    000002ca: 	subl	%edx, %r9d
    000002cd: 	leal	-0x1(%r9), %r11d
    000002d1: 	cmpl	$0x6, %r11d
    000002d5: 	jbe	.Ltmp253 # Offset: 725
    000002d7: 	movslq	%r10d, %r10
    000002da: 	addq	%rcx, %r10
    000002dd: 	movq	(%r10,%rdx), %rbx
    000002e1: 	movl	%ebx, %edx
    000002e3: 	movzbl	%bh, %ebp
    000002e6: 	xorl	%ebp, %edx
    000002e8: 	xorl	%eax, %edx
    000002ea: 	movq	%rbx, %rax
    000002ed: 	shrq	$0x10, %rax
    000002f1: 	xorl	%eax, %edx
    000002f3: 	movq	%rbx, %rax
    000002f6: 	shrq	$0x18, %rax
    000002fa: 	xorl	%eax, %edx
    000002fc: 	movq	%rbx, %rax
    000002ff: 	shrq	$0x20, %rax
    00000303: 	xorl	%eax, %edx
    00000305: 	movq	%rbx, %rax
    00000308: 	shrq	$0x28, %rax
    0000030c: 	xorl	%eax, %edx
    0000030e: 	movq	%rbx, %rax
    00000311: 	shrq	$0x38, %rbx
    00000315: 	shrq	$0x30, %rax
    00000319: 	xorl	%eax, %edx
    0000031b: 	movl	%edx, %eax
    0000031d: 	movl	%r9d, %edx
    00000320: 	andl	$-0x8, %edx
    00000323: 	xorl	%ebx, %eax
    00000325: 	addl	%edx, %r8d
    00000328: 	cmpl	%edx, %r9d
    0000032b: 	je	.Ltmp249 # Offset: 811
.Ltmp253:
    0000032d: 	movslq	%r8d, %rdx
    00000330: 	xorb	(%rcx,%rdx), %al
    00000333: 	leal	0x1(%r8), %edx
    00000337: 	cmpl	%edx, %esi
    00000339: 	jle	.Ltmp249 # Offset: 825
    0000033b: 	movslq	%edx, %rdx
    0000033e: 	xorb	(%rcx,%rdx), %al
    00000341: 	leal	0x2(%r8), %edx
    00000345: 	cmpl	%edx, %esi
    00000347: 	jle	.Ltmp249 # Offset: 839
    00000349: 	movslq	%edx, %rdx
    0000034c: 	xorb	(%rcx,%rdx), %al
    0000034f: 	leal	0x3(%r8), %edx
    00000353: 	cmpl	%edx, %esi
    00000355: 	jle	.Ltmp249 # Offset: 853
    00000357: 	movslq	%edx, %rdx
    0000035a: 	xorb	(%rcx,%rdx), %al
    0000035d: 	leal	0x4(%r8), %edx
    00000361: 	cmpl	%edx, %esi
    00000363: 	jle	.Ltmp249 # Offset: 867
    00000365: 	movslq	%edx, %rdx
    00000368: 	xorb	(%rcx,%rdx), %al
    0000036b: 	leal	0x5(%r8), %edx
    0000036f: 	cmpl	%edx, %esi
    00000371: 	jle	.Ltmp249 # Offset: 881
    00000373: 	movslq	%edx, %rdx
    00000376: 	addl	$0x6, %r8d
    0000037a: 	xorb	(%rcx,%rdx), %al
    0000037d: 	cmpl	%r8d, %esi
    00000380: 	jle	.Ltmp249 # Offset: 896
    00000382: 	movslq	%r8d, %r8
    00000385: 	xorb	(%rcx,%r8), %al
.Ltmp249:
    00000389: 	addq	$0x100, %rsp
    00000390: 	xorl	%edi, %eax
    00000392: 	popq	%rbx
    00000393: 	popq	%rbp
    00000394: 	retq # Offset: 916
    00000395: 	nopl	(%rax) # Size: 3
.Ltmp244:
    00000398: 	xorl	%r10d, %r10d
    0000039b: 	xorl	%edi, %edi
    0000039d: 	jmp	.Ltmp254 # Offset: 925
.Ltmp245:
    000003a2: 	xorl	%edx, %edx
    000003a4: 	xorl	%r11d, %r11d
    000003a7: 	xorl	%edi, %edi
    000003a9: 	jmp	.Ltmp255 # Offset: 937
.Ltmp250:
    000003ae: 	movl	%r10d, %r8d
    000003b1: 	xorl	%edx, %edx
    000003b3: 	jmp	.Ltmp256 # Offset: 947
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor5IhET_PKS0_iS0_"

Binary Function "_Z8bit_xor6IhET_PKS0_iS0_" after disassembly {
  Number      : 63
  State       : disassembled
  Address     : 0x6720
  Size        : 0x3b6
  MaxSize     : 0x3c0
  Offset      : 0x6720
  Section     : .text
  Orc Section : .local.text._Z8bit_xor6IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movl	%edx, %eax
    00000007: 	pushq	%rbx
    00000008: 	subq	$0x100, %rsp
    0000000f: 	cmpl	$0x3, %esi
    00000012: 	jle	.Ltmp257 # Offset: 18
    00000018: 	leal	-0x4(%rsi), %ecx
    0000001b: 	movl	%ecx, %ebp
    0000001d: 	shrl	$0x2, %ebp
    00000020: 	leal	0x1(%rbp), %r8d
    00000024: 	cmpl	$0xb, %ecx
    00000027: 	jbe	.Ltmp258 # Offset: 39
    0000002d: 	movzbl	%dl, %edx
    00000030: 	movq	%rdi, %rax
    00000033: 	movd	%edx, %xmm0
    00000037: 	movl	%r8d, %edx
    0000003a: 	shrl	$0x2, %edx
    0000003d: 	subl	$0x1, %edx
    00000040: 	shlq	$0x4, %rdx
    00000044: 	leaq	0x10(%rdi,%rdx), %rdx
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp259:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	pxor	%xmm2, %xmm0
    0000005c: 	cmpq	%rdx, %rax
    0000005f: 	jne	.Ltmp259 # Offset: 95
    00000061: 	movl	%r8d, %ebx
    00000064: 	movd	%xmm0, %eax
    00000068: 	movaps	%xmm0, 0xe8(%rsp)
    00000070: 	xorb	0xec(%rsp), %al
    00000077: 	andl	$-0x4, %ebx
    0000007a: 	movaps	%xmm0, 0xd8(%rsp)
    00000082: 	xorb	0xe0(%rsp), %al
    00000089: 	movaps	%xmm0, 0xc8(%rsp)
    00000091: 	leal	(,%rbx,4), %ecx
    00000098: 	xorb	0xd4(%rsp), %al
    0000009f: 	movaps	%xmm0, 0xb8(%rsp)
    000000a7: 	movaps	%xmm0, 0xa8(%rsp)
    000000af: 	movzbl	0xad(%rsp), %r10d
    000000b8: 	xorb	0xb9(%rsp), %r10b
    000000c0: 	movaps	%xmm0, 0x98(%rsp)
    000000c8: 	xorb	0xa1(%rsp), %r10b
    000000d0: 	movaps	%xmm0, 0x88(%rsp)
    000000d8: 	xorb	0x95(%rsp), %r10b
    000000e0: 	movaps	%xmm0, 0x78(%rsp)
    000000e5: 	movaps	%xmm0, 0x68(%rsp)
    000000ea: 	movzbl	0x6e(%rsp), %r11d
    000000f0: 	xorb	0x7a(%rsp), %r11b
    000000f5: 	movaps	%xmm0, 0x58(%rsp)
    000000fa: 	xorb	0x62(%rsp), %r11b
    000000ff: 	movaps	%xmm0, 0x48(%rsp)
    00000104: 	xorb	0x56(%rsp), %r11b
    00000109: 	movaps	%xmm0, 0x38(%rsp)
    0000010e: 	movaps	%xmm0, 0x28(%rsp)
    00000113: 	movzbl	0x2f(%rsp), %edx
    00000118: 	xorb	0x3b(%rsp), %dl
    0000011c: 	movaps	%xmm0, 0x18(%rsp)
    00000121: 	xorb	0x23(%rsp), %dl
    00000125: 	movaps	%xmm0, 0x8(%rsp)
    0000012a: 	xorb	0x17(%rsp), %dl
    0000012e: 	cmpl	%ebx, %r8d
    00000131: 	je	.Ltmp260 # Offset: 305
.Ltmp268:
    00000137: 	movl	%r8d, %r9d
    0000013a: 	subl	%ebx, %r9d
    0000013d: 	cmpl	%ebx, %ebp
    0000013f: 	je	.Ltmp261 # Offset: 319
    00000145: 	movzbl	%dl, %edx
    00000148: 	movzbl	%r11b, %r11d
    0000014c: 	movzbl	%r10b, %r10d
    00000150: 	movzbl	%al, %eax
    00000153: 	shlq	$0x8, %rdx
    00000157: 	movq	(%rdi,%rbx,4), %xmm0
    0000015c: 	orq	%r11, %rdx
    0000015f: 	shlq	$0x8, %rdx
    00000163: 	orq	%r10, %rdx
    00000166: 	shlq	$0x8, %rdx
    0000016a: 	orq	%rax, %rdx
    0000016d: 	movq	%rdx, %xmm3
    00000172: 	pxor	%xmm0, %xmm3
    00000176: 	movq	%xmm3, %rbx
    0000017b: 	movq	%xmm3, %rdx
    00000180: 	movq	%xmm3, %r11
    00000185: 	movq	%xmm3, (%rsp)
    0000018a: 	shrq	$0x20, %rdx
    0000018e: 	movl	%ebx, %eax
    00000190: 	shrq	$0x30, %r11
    00000194: 	movq	%xmm3, %rbp
    00000199: 	xorl	%edx, %eax
    0000019b: 	movzbl	%bh, %edx
    0000019e: 	movl	%r9d, %ebx
    000001a1: 	shrq	$0x18, %rbp
    000001a5: 	movq	%rdx, %r10
    000001a8: 	movq	%xmm3, %rdx
    000001ad: 	andl	$-0x2, %ebx
    000001b0: 	movq	%xmm3, -0x8(%rsp)
    000001b6: 	shrq	$0x28, %rdx
    000001ba: 	movq	%xmm3, -0x10(%rsp)
    000001c0: 	leal	(%rcx,%rbx,4), %ecx
    000001c3: 	xorl	%edx, %r10d
    000001c6: 	movq	%xmm3, %rdx
    000001cb: 	movq	%xmm3, -0x18(%rsp)
    000001d1: 	shrq	$0x10, %rdx
    000001d5: 	movq	%xmm3, -0x20(%rsp)
    000001db: 	xorl	%edx, %r11d
    000001de: 	movq	%xmm3, %rdx
    000001e3: 	movq	%xmm3, -0x28(%rsp)
    000001e9: 	shrq	$0x38, %rdx
    000001ed: 	movq	%xmm3, -0x30(%rsp)
    000001f3: 	movq	%xmm3, -0x38(%rsp)
    000001f9: 	xorl	%ebp, %edx
    000001fb: 	cmpl	%ebx, %r9d
    000001fe: 	je	.Ltmp260 # Offset: 510
.Ltmp261:
    00000200: 	movslq	%ecx, %rcx
    00000203: 	xorb	(%rdi,%rcx), %al
    00000206: 	xorb	0x1(%rdi,%rcx), %r10b
    0000020b: 	xorb	0x2(%rdi,%rcx), %r11b
    00000210: 	xorb	0x3(%rdi,%rcx), %dl
.Ltmp260:
    00000214: 	xorl	%r11d, %r10d
    00000217: 	shll	$0x2, %r8d
    0000021b: 	xorl	%edx, %r10d
.Ltmp267:
    0000021e: 	cmpl	%r8d, %esi
    00000221: 	jle	.Ltmp262 # Offset: 545
    00000227: 	movl	%esi, %r11d
    0000022a: 	subl	%r8d, %r11d
    0000022d: 	leal	-0x1(%r11), %edx
    00000231: 	cmpl	$0xe, %edx
    00000234: 	jbe	.Ltmp263 # Offset: 564
    0000023a: 	movl	%r11d, %edx
    0000023d: 	movslq	%r8d, %rcx
    00000240: 	pxor	%xmm0, %xmm0
    00000244: 	shrl	$0x4, %edx
    00000247: 	addq	%rdi, %rcx
    0000024a: 	leal	-0x1(%rdx), %r9d
    0000024e: 	leaq	0x10(%rcx), %rdx
    00000252: 	shlq	$0x4, %r9
    00000256: 	addq	%rdx, %r9
    00000259: 	jmp	.Ltmp264 # Offset: 601
    0000025b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp265:
    00000260: 	addq	$0x10, %rdx
.Ltmp264:
    00000264: 	movdqu	(%rcx), %xmm1
    00000268: 	movq	%rdx, %rcx
    0000026b: 	pxor	%xmm1, %xmm0
    0000026f: 	cmpq	%r9, %rdx
    00000272: 	jne	.Ltmp265 # Offset: 626
    00000274: 	movdqa	%xmm0, %xmm1
    00000278: 	psrldq	$0x8, %xmm1
    0000027d: 	pxor	%xmm1, %xmm0
    00000281: 	movdqa	%xmm0, %xmm1
    00000285: 	psrldq	$0x4, %xmm1
    0000028a: 	pxor	%xmm1, %xmm0
    0000028e: 	movdqa	%xmm0, %xmm1
    00000292: 	psrldq	$0x2, %xmm1
    00000297: 	pxor	%xmm1, %xmm0
    0000029b: 	movdqa	%xmm0, %xmm1
    0000029f: 	psrldq	$0x1, %xmm1
    000002a4: 	pxor	%xmm1, %xmm0
    000002a8: 	movd	%xmm0, %edx
    000002ac: 	xorl	%edx, %eax
    000002ae: 	movl	%r11d, %edx
    000002b1: 	andl	$-0x10, %edx
    000002b4: 	leal	(%rdx,%r8), %r9d
    000002b8: 	cmpl	%r11d, %edx
    000002bb: 	je	.Ltmp262 # Offset: 699
.Ltmp269:
    000002c1: 	subl	%edx, %r11d
    000002c4: 	leal	-0x1(%r11), %ecx
    000002c8: 	cmpl	$0x6, %ecx
    000002cb: 	jbe	.Ltmp266 # Offset: 715
    000002cd: 	movslq	%r8d, %r8
    000002d0: 	addq	%rdi, %r8
    000002d3: 	movq	(%r8,%rdx), %rcx
    000002d7: 	movl	%ecx, %edx
    000002d9: 	movzbl	%ch, %ebx
    000002dc: 	xorl	%ebx, %edx
    000002de: 	xorl	%edx, %eax
    000002e0: 	movq	%rcx, %rdx
    000002e3: 	shrq	$0x10, %rdx
    000002e7: 	xorl	%edx, %eax
    000002e9: 	movq	%rcx, %rdx
    000002ec: 	shrq	$0x18, %rdx
    000002f0: 	xorl	%edx, %eax
    000002f2: 	movq	%rcx, %rdx
    000002f5: 	shrq	$0x20, %rdx
    000002f9: 	xorl	%edx, %eax
    000002fb: 	movq	%rcx, %rdx
    000002fe: 	shrq	$0x28, %rdx
    00000302: 	xorl	%edx, %eax
    00000304: 	movq	%rcx, %rdx
    00000307: 	shrq	$0x38, %rcx
    0000030b: 	shrq	$0x30, %rdx
    0000030f: 	xorl	%edx, %eax
    00000311: 	movl	%r11d, %edx
    00000314: 	andl	$-0x8, %edx
    00000317: 	xorl	%ecx, %eax
    00000319: 	addl	%edx, %r9d
    0000031c: 	cmpl	%edx, %r11d
    0000031f: 	je	.Ltmp262 # Offset: 799
.Ltmp266:
    00000321: 	movslq	%r9d, %rdx
    00000324: 	xorb	(%rdi,%rdx), %al
    00000327: 	leal	0x1(%r9), %edx
    0000032b: 	cmpl	%esi, %edx
    0000032d: 	jge	.Ltmp262 # Offset: 813
    0000032f: 	movslq	%edx, %rdx
    00000332: 	xorb	(%rdi,%rdx), %al
    00000335: 	leal	0x2(%r9), %edx
    00000339: 	cmpl	%esi, %edx
    0000033b: 	jge	.Ltmp262 # Offset: 827
    0000033d: 	movslq	%edx, %rdx
    00000340: 	xorb	(%rdi,%rdx), %al
    00000343: 	leal	0x3(%r9), %edx
    00000347: 	cmpl	%edx, %esi
    00000349: 	jle	.Ltmp262 # Offset: 841
    0000034b: 	movslq	%edx, %rdx
    0000034e: 	xorb	(%rdi,%rdx), %al
    00000351: 	leal	0x4(%r9), %edx
    00000355: 	cmpl	%edx, %esi
    00000357: 	jle	.Ltmp262 # Offset: 855
    00000359: 	movslq	%edx, %rdx
    0000035c: 	xorb	(%rdi,%rdx), %al
    0000035f: 	leal	0x5(%r9), %edx
    00000363: 	cmpl	%edx, %esi
    00000365: 	jle	.Ltmp262 # Offset: 869
    00000367: 	movslq	%edx, %rdx
    0000036a: 	addl	$0x6, %r9d
    0000036e: 	xorb	(%rdi,%rdx), %al
    00000371: 	cmpl	%r9d, %esi
    00000374: 	jle	.Ltmp262 # Offset: 884
    00000376: 	movslq	%r9d, %r9
    00000379: 	xorb	(%rdi,%r9), %al
.Ltmp262:
    0000037d: 	addq	$0x100, %rsp
    00000384: 	xorl	%r10d, %eax
    00000387: 	popq	%rbx
    00000388: 	popq	%rbp
    00000389: 	retq # Offset: 905
    0000038a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp257:
    00000390: 	xorl	%r10d, %r10d
    00000393: 	xorl	%r8d, %r8d
    00000396: 	jmp	.Ltmp267 # Offset: 918
.Ltmp258:
    0000039b: 	xorl	%ebx, %ebx
    0000039d: 	xorl	%ecx, %ecx
    0000039f: 	xorl	%edx, %edx
    000003a1: 	xorl	%r11d, %r11d
    000003a4: 	xorl	%r10d, %r10d
    000003a7: 	jmp	.Ltmp268 # Offset: 935
.Ltmp263:
    000003ac: 	movl	%r8d, %r9d
    000003af: 	xorl	%edx, %edx
    000003b1: 	jmp	.Ltmp269 # Offset: 945
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor6IhET_PKS0_iS0_"

Binary Function "_Z8bit_xor7IhET_PKS0_iS0_" after disassembly {
  Number      : 64
  State       : disassembled
  Address     : 0x6ae0
  Size        : 0x3b6
  MaxSize     : 0x3c0
  Offset      : 0x6ae0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor7IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB063:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movl	%edx, %eax
    00000007: 	pushq	%rbx
    00000008: 	subq	$0x100, %rsp
    0000000f: 	cmpl	$0x3, %esi
    00000012: 	jle	.Ltmp270 # Offset: 18
    00000018: 	leal	-0x4(%rsi), %ecx
    0000001b: 	movl	%ecx, %ebp
    0000001d: 	shrl	$0x2, %ebp
    00000020: 	leal	0x1(%rbp), %r8d
    00000024: 	cmpl	$0xb, %ecx
    00000027: 	jbe	.Ltmp271 # Offset: 39
    0000002d: 	movzbl	%dl, %edx
    00000030: 	movq	%rdi, %rax
    00000033: 	movd	%edx, %xmm0
    00000037: 	movl	%r8d, %edx
    0000003a: 	shrl	$0x2, %edx
    0000003d: 	subl	$0x1, %edx
    00000040: 	shlq	$0x4, %rdx
    00000044: 	leaq	0x10(%rdi,%rdx), %rdx
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp272:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	pxor	%xmm2, %xmm0
    0000005c: 	cmpq	%rdx, %rax
    0000005f: 	jne	.Ltmp272 # Offset: 95
    00000061: 	movl	%r8d, %ebx
    00000064: 	movd	%xmm0, %eax
    00000068: 	movaps	%xmm0, 0xe8(%rsp)
    00000070: 	xorb	0xec(%rsp), %al
    00000077: 	andl	$-0x4, %ebx
    0000007a: 	movaps	%xmm0, 0xd8(%rsp)
    00000082: 	xorb	0xe0(%rsp), %al
    00000089: 	movaps	%xmm0, 0xc8(%rsp)
    00000091: 	leal	(,%rbx,4), %ecx
    00000098: 	xorb	0xd4(%rsp), %al
    0000009f: 	movaps	%xmm0, 0xb8(%rsp)
    000000a7: 	movaps	%xmm0, 0xa8(%rsp)
    000000af: 	movzbl	0xad(%rsp), %r10d
    000000b8: 	xorb	0xb9(%rsp), %r10b
    000000c0: 	movaps	%xmm0, 0x98(%rsp)
    000000c8: 	xorb	0xa1(%rsp), %r10b
    000000d0: 	movaps	%xmm0, 0x88(%rsp)
    000000d8: 	xorb	0x95(%rsp), %r10b
    000000e0: 	movaps	%xmm0, 0x78(%rsp)
    000000e5: 	movaps	%xmm0, 0x68(%rsp)
    000000ea: 	movzbl	0x6e(%rsp), %r11d
    000000f0: 	xorb	0x7a(%rsp), %r11b
    000000f5: 	movaps	%xmm0, 0x58(%rsp)
    000000fa: 	xorb	0x62(%rsp), %r11b
    000000ff: 	movaps	%xmm0, 0x48(%rsp)
    00000104: 	xorb	0x56(%rsp), %r11b
    00000109: 	movaps	%xmm0, 0x38(%rsp)
    0000010e: 	movaps	%xmm0, 0x28(%rsp)
    00000113: 	movzbl	0x2f(%rsp), %edx
    00000118: 	xorb	0x3b(%rsp), %dl
    0000011c: 	movaps	%xmm0, 0x18(%rsp)
    00000121: 	xorb	0x23(%rsp), %dl
    00000125: 	movaps	%xmm0, 0x8(%rsp)
    0000012a: 	xorb	0x17(%rsp), %dl
    0000012e: 	cmpl	%ebx, %r8d
    00000131: 	je	.Ltmp273 # Offset: 305
.Ltmp281:
    00000137: 	movl	%r8d, %r9d
    0000013a: 	subl	%ebx, %r9d
    0000013d: 	cmpl	%ebx, %ebp
    0000013f: 	je	.Ltmp274 # Offset: 319
    00000145: 	movzbl	%dl, %edx
    00000148: 	movzbl	%r11b, %r11d
    0000014c: 	movzbl	%r10b, %r10d
    00000150: 	movzbl	%al, %eax
    00000153: 	shlq	$0x8, %rdx
    00000157: 	movq	(%rdi,%rbx,4), %xmm0
    0000015c: 	orq	%r11, %rdx
    0000015f: 	shlq	$0x8, %rdx
    00000163: 	orq	%r10, %rdx
    00000166: 	shlq	$0x8, %rdx
    0000016a: 	orq	%rax, %rdx
    0000016d: 	movq	%rdx, %xmm3
    00000172: 	pxor	%xmm0, %xmm3
    00000176: 	movq	%xmm3, %rbx
    0000017b: 	movq	%xmm3, %rdx
    00000180: 	movq	%xmm3, %r11
    00000185: 	movq	%xmm3, (%rsp)
    0000018a: 	shrq	$0x20, %rdx
    0000018e: 	movl	%ebx, %eax
    00000190: 	shrq	$0x30, %r11
    00000194: 	movq	%xmm3, %rbp
    00000199: 	xorl	%edx, %eax
    0000019b: 	movzbl	%bh, %edx
    0000019e: 	movl	%r9d, %ebx
    000001a1: 	shrq	$0x18, %rbp
    000001a5: 	movq	%rdx, %r10
    000001a8: 	movq	%xmm3, %rdx
    000001ad: 	andl	$-0x2, %ebx
    000001b0: 	movq	%xmm3, -0x8(%rsp)
    000001b6: 	shrq	$0x28, %rdx
    000001ba: 	movq	%xmm3, -0x10(%rsp)
    000001c0: 	leal	(%rcx,%rbx,4), %ecx
    000001c3: 	xorl	%edx, %r10d
    000001c6: 	movq	%xmm3, %rdx
    000001cb: 	movq	%xmm3, -0x18(%rsp)
    000001d1: 	shrq	$0x10, %rdx
    000001d5: 	movq	%xmm3, -0x20(%rsp)
    000001db: 	xorl	%edx, %r11d
    000001de: 	movq	%xmm3, %rdx
    000001e3: 	movq	%xmm3, -0x28(%rsp)
    000001e9: 	shrq	$0x38, %rdx
    000001ed: 	movq	%xmm3, -0x30(%rsp)
    000001f3: 	movq	%xmm3, -0x38(%rsp)
    000001f9: 	xorl	%ebp, %edx
    000001fb: 	cmpl	%ebx, %r9d
    000001fe: 	je	.Ltmp273 # Offset: 510
.Ltmp274:
    00000200: 	movslq	%ecx, %rcx
    00000203: 	xorb	(%rdi,%rcx), %al
    00000206: 	xorb	0x1(%rdi,%rcx), %r10b
    0000020b: 	xorb	0x2(%rdi,%rcx), %r11b
    00000210: 	xorb	0x3(%rdi,%rcx), %dl
.Ltmp273:
    00000214: 	xorl	%r11d, %r10d
    00000217: 	shll	$0x2, %r8d
    0000021b: 	xorl	%edx, %r10d
.Ltmp280:
    0000021e: 	cmpl	%r8d, %esi
    00000221: 	jle	.Ltmp275 # Offset: 545
    00000227: 	movl	%esi, %r11d
    0000022a: 	subl	%r8d, %r11d
    0000022d: 	leal	-0x1(%r11), %edx
    00000231: 	cmpl	$0xe, %edx
    00000234: 	jbe	.Ltmp276 # Offset: 564
    0000023a: 	movl	%r11d, %edx
    0000023d: 	movslq	%r8d, %rcx
    00000240: 	pxor	%xmm0, %xmm0
    00000244: 	shrl	$0x4, %edx
    00000247: 	addq	%rdi, %rcx
    0000024a: 	leal	-0x1(%rdx), %r9d
    0000024e: 	leaq	0x10(%rcx), %rdx
    00000252: 	shlq	$0x4, %r9
    00000256: 	addq	%rdx, %r9
    00000259: 	jmp	.Ltmp277 # Offset: 601
    0000025b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp278:
    00000260: 	addq	$0x10, %rdx
.Ltmp277:
    00000264: 	movdqu	(%rcx), %xmm1
    00000268: 	movq	%rdx, %rcx
    0000026b: 	pxor	%xmm1, %xmm0
    0000026f: 	cmpq	%r9, %rdx
    00000272: 	jne	.Ltmp278 # Offset: 626
    00000274: 	movdqa	%xmm0, %xmm1
    00000278: 	psrldq	$0x8, %xmm1
    0000027d: 	pxor	%xmm1, %xmm0
    00000281: 	movdqa	%xmm0, %xmm1
    00000285: 	psrldq	$0x4, %xmm1
    0000028a: 	pxor	%xmm1, %xmm0
    0000028e: 	movdqa	%xmm0, %xmm1
    00000292: 	psrldq	$0x2, %xmm1
    00000297: 	pxor	%xmm1, %xmm0
    0000029b: 	movdqa	%xmm0, %xmm1
    0000029f: 	psrldq	$0x1, %xmm1
    000002a4: 	pxor	%xmm1, %xmm0
    000002a8: 	movd	%xmm0, %edx
    000002ac: 	xorl	%edx, %eax
    000002ae: 	movl	%r11d, %edx
    000002b1: 	andl	$-0x10, %edx
    000002b4: 	leal	(%rdx,%r8), %r9d
    000002b8: 	cmpl	%r11d, %edx
    000002bb: 	je	.Ltmp275 # Offset: 699
.Ltmp282:
    000002c1: 	subl	%edx, %r11d
    000002c4: 	leal	-0x1(%r11), %ecx
    000002c8: 	cmpl	$0x6, %ecx
    000002cb: 	jbe	.Ltmp279 # Offset: 715
    000002cd: 	movslq	%r8d, %r8
    000002d0: 	addq	%rdi, %r8
    000002d3: 	movq	(%r8,%rdx), %rcx
    000002d7: 	movl	%ecx, %edx
    000002d9: 	movzbl	%ch, %ebx
    000002dc: 	xorl	%ebx, %edx
    000002de: 	xorl	%edx, %eax
    000002e0: 	movq	%rcx, %rdx
    000002e3: 	shrq	$0x10, %rdx
    000002e7: 	xorl	%edx, %eax
    000002e9: 	movq	%rcx, %rdx
    000002ec: 	shrq	$0x18, %rdx
    000002f0: 	xorl	%edx, %eax
    000002f2: 	movq	%rcx, %rdx
    000002f5: 	shrq	$0x20, %rdx
    000002f9: 	xorl	%edx, %eax
    000002fb: 	movq	%rcx, %rdx
    000002fe: 	shrq	$0x28, %rdx
    00000302: 	xorl	%edx, %eax
    00000304: 	movq	%rcx, %rdx
    00000307: 	shrq	$0x38, %rcx
    0000030b: 	shrq	$0x30, %rdx
    0000030f: 	xorl	%edx, %eax
    00000311: 	movl	%r11d, %edx
    00000314: 	andl	$-0x8, %edx
    00000317: 	xorl	%ecx, %eax
    00000319: 	addl	%edx, %r9d
    0000031c: 	cmpl	%edx, %r11d
    0000031f: 	je	.Ltmp275 # Offset: 799
.Ltmp279:
    00000321: 	movslq	%r9d, %rdx
    00000324: 	xorb	(%rdi,%rdx), %al
    00000327: 	leal	0x1(%r9), %edx
    0000032b: 	cmpl	%esi, %edx
    0000032d: 	jge	.Ltmp275 # Offset: 813
    0000032f: 	movslq	%edx, %rdx
    00000332: 	xorb	(%rdi,%rdx), %al
    00000335: 	leal	0x2(%r9), %edx
    00000339: 	cmpl	%esi, %edx
    0000033b: 	jge	.Ltmp275 # Offset: 827
    0000033d: 	movslq	%edx, %rdx
    00000340: 	xorb	(%rdi,%rdx), %al
    00000343: 	leal	0x3(%r9), %edx
    00000347: 	cmpl	%esi, %edx
    00000349: 	jge	.Ltmp275 # Offset: 841
    0000034b: 	movslq	%edx, %rdx
    0000034e: 	xorb	(%rdi,%rdx), %al
    00000351: 	leal	0x4(%r9), %edx
    00000355: 	cmpl	%edx, %esi
    00000357: 	jle	.Ltmp275 # Offset: 855
    00000359: 	movslq	%edx, %rdx
    0000035c: 	xorb	(%rdi,%rdx), %al
    0000035f: 	leal	0x5(%r9), %edx
    00000363: 	cmpl	%edx, %esi
    00000365: 	jle	.Ltmp275 # Offset: 869
    00000367: 	movslq	%edx, %rdx
    0000036a: 	addl	$0x6, %r9d
    0000036e: 	xorb	(%rdi,%rdx), %al
    00000371: 	cmpl	%r9d, %esi
    00000374: 	jle	.Ltmp275 # Offset: 884
    00000376: 	movslq	%r9d, %r9
    00000379: 	xorb	(%rdi,%r9), %al
.Ltmp275:
    0000037d: 	addq	$0x100, %rsp
    00000384: 	xorl	%r10d, %eax
    00000387: 	popq	%rbx
    00000388: 	popq	%rbp
    00000389: 	retq # Offset: 905
    0000038a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp270:
    00000390: 	xorl	%r10d, %r10d
    00000393: 	xorl	%r8d, %r8d
    00000396: 	jmp	.Ltmp280 # Offset: 918
.Ltmp271:
    0000039b: 	xorl	%ebx, %ebx
    0000039d: 	xorl	%edx, %edx
    0000039f: 	xorl	%r11d, %r11d
    000003a2: 	xorl	%r10d, %r10d
    000003a5: 	xorl	%ecx, %ecx
    000003a7: 	jmp	.Ltmp281 # Offset: 935
.Ltmp276:
    000003ac: 	movl	%r8d, %r9d
    000003af: 	xorl	%edx, %edx
    000003b1: 	jmp	.Ltmp282 # Offset: 945
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor7IhET_PKS0_iS0_"

Binary Function "_Z8bit_xor8IhET_PKS0_iS0_" after disassembly {
  Number      : 65
  State       : disassembled
  Address     : 0x6ea0
  Size        : 0x3c6
  MaxSize     : 0x3d0
  Offset      : 0x6ea0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor8IhET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB064:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdi, %rcx
    00000009: 	movl	%edx, %edi
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0xf8, %rsp
    00000014: 	cmpl	$0x7, %esi
    00000017: 	jle	.Ltmp283 # Offset: 23
    0000001d: 	leal	-0x8(%rsi), %eax
    00000020: 	movl	%eax, %r8d
    00000023: 	shrl	$0x3, %r8d
    00000027: 	addl	$0x1, %r8d
    0000002b: 	cmpl	$0x7, %eax
    0000002e: 	jbe	.Ltmp284 # Offset: 46
    00000034: 	movzbl	%dl, %edx
    00000037: 	movq	%rcx, %rax
    0000003a: 	movd	%edx, %xmm0
    0000003e: 	movl	%r8d, %edx
    00000041: 	shrl	%edx
    00000043: 	subl	$0x1, %edx
    00000046: 	shlq	$0x4, %rdx
    0000004a: 	leaq	0x10(%rcx,%rdx), %rdx
    0000004f: 	nop # Size: 1
.Ltmp285:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	pxor	%xmm2, %xmm0
    0000005c: 	cmpq	%rax, %rdx
    0000005f: 	jne	.Ltmp285 # Offset: 95
    00000061: 	movl	%r8d, %r12d
    00000064: 	movd	%xmm0, %edi
    00000068: 	movaps	%xmm0, 0xe8(%rsp)
    00000070: 	xorb	0xf0(%rsp), %dil
    00000078: 	movaps	%xmm0, 0xd8(%rsp)
    00000080: 	andl	$-0x2, %r12d
    00000084: 	movaps	%xmm0, 0xc8(%rsp)
    0000008c: 	movzbl	0xd1(%rsp), %r9d
    00000095: 	xorb	0xd9(%rsp), %r9b
    0000009d: 	movaps	%xmm0, 0xb8(%rsp)
    000000a5: 	movaps	%xmm0, 0xa8(%rsp)
    000000ad: 	movzbl	0xb2(%rsp), %r10d
    000000b6: 	xorb	0xba(%rsp), %r10b
    000000be: 	movaps	%xmm0, 0x98(%rsp)
    000000c6: 	movaps	%xmm0, 0x88(%rsp)
    000000ce: 	movzbl	0x93(%rsp), %eax
    000000d6: 	xorb	0x9b(%rsp), %al
    000000dd: 	movaps	%xmm0, 0x78(%rsp)
    000000e2: 	movaps	%xmm0, 0x68(%rsp)
    000000e7: 	movzbl	0x74(%rsp), %r11d
    000000ed: 	xorb	0x7c(%rsp), %r11b
    000000f2: 	movaps	%xmm0, 0x58(%rsp)
    000000f7: 	movaps	%xmm0, 0x48(%rsp)
    000000fc: 	movzbl	0x55(%rsp), %ebx
    00000101: 	xorb	0x5d(%rsp), %bl
    00000105: 	movaps	%xmm0, 0x38(%rsp)
    0000010a: 	movaps	%xmm0, 0x28(%rsp)
    0000010f: 	movzbl	0x36(%rsp), %ebp
    00000114: 	xorb	0x3e(%rsp), %bpl
    00000119: 	movaps	%xmm0, 0x18(%rsp)
    0000011e: 	movaps	%xmm0, 0x8(%rsp)
    00000123: 	movzbl	0x17(%rsp), %edx
    00000128: 	xorb	0x1f(%rsp), %dl
    0000012c: 	testl	$0xc0000001, %r8d
    00000133: 	je	.Ltmp286 # Offset: 307
.Ltmp293:
    00000139: 	movzbl	%dl, %edx
    0000013c: 	movzbl	%bpl, %ebp
    00000140: 	movzbl	%bl, %ebx
    00000143: 	movzbl	%r11b, %r11d
    00000147: 	shlq	$0x8, %rdx
    0000014b: 	movzbl	%al, %eax
    0000014e: 	movzbl	%r10b, %r10d
    00000152: 	movzbl	%r9b, %r9d
    00000156: 	orq	%rbp, %rdx
    00000159: 	movzbl	%dil, %edi
    0000015d: 	movq	(%rcx,%r12,8), %xmm0
    00000163: 	shlq	$0x8, %rdx
    00000167: 	orq	%rbx, %rdx
    0000016a: 	shlq	$0x8, %rdx
    0000016e: 	orq	%r11, %rdx
    00000171: 	shlq	$0x8, %rdx
    00000175: 	orq	%rax, %rdx
    00000178: 	shlq	$0x8, %rdx
    0000017c: 	orq	%r10, %rdx
    0000017f: 	shlq	$0x8, %rdx
    00000183: 	orq	%r9, %rdx
    00000186: 	movq	%rdx, %rax
    00000189: 	shlq	$0x8, %rax
    0000018d: 	orq	%rdi, %rax
    00000190: 	movq	%rax, %xmm3
    00000195: 	pxor	%xmm0, %xmm3
    00000199: 	movq	%xmm3, %rdx
    0000019e: 	movq	%xmm3, %r10
    000001a3: 	movq	%xmm3, %r11
    000001a8: 	movq	%xmm3, (%rsp)
    000001ad: 	movzbl	%dh, %eax
    000001b0: 	movq	%xmm3, %rbx
    000001b5: 	movq	%xmm3, %rbp
    000001ba: 	movl	%edx, %edi
    000001bc: 	movq	%rax, %r9
    000001bf: 	movq	%xmm3, %rax
    000001c4: 	movq	%xmm3, -0x8(%rsp)
    000001ca: 	shrq	$0x10, %r10
    000001ce: 	movq	%xmm3, -0x10(%rsp)
    000001d4: 	shrq	$0x18, %rax
    000001d8: 	shrq	$0x20, %r11
    000001dc: 	movq	%xmm3, -0x18(%rsp)
    000001e2: 	shrq	$0x28, %rbx
    000001e6: 	shrq	$0x30, %rbp
    000001ea: 	movq	%xmm3, -0x20(%rsp)
    000001f0: 	shrq	$0x38, %rdx
    000001f4: 	movq	%xmm3, -0x28(%rsp)
    000001fa: 	movq	%xmm3, -0x30(%rsp)
    00000200: 	movq	%xmm3, -0x38(%rsp)
.Ltmp286:
    00000206: 	xorl	%r10d, %r9d
    00000209: 	shll	$0x3, %r8d
    0000020d: 	xorl	%eax, %r9d
    00000210: 	xorl	%r11d, %r9d
    00000213: 	xorl	%ebx, %r9d
    00000216: 	xorl	%ebp, %r9d
    00000219: 	xorl	%edx, %r9d
.Ltmp292:
    0000021c: 	cmpl	%r8d, %esi
    0000021f: 	jle	.Ltmp287 # Offset: 543
    00000225: 	movl	%esi, %r11d
    00000228: 	subl	%r8d, %r11d
    0000022b: 	leal	-0x1(%r11), %eax
    0000022f: 	cmpl	$0xe, %eax
    00000232: 	jbe	.Ltmp288 # Offset: 562
    00000238: 	movl	%r11d, %edx
    0000023b: 	movslq	%r8d, %rax
    0000023e: 	pxor	%xmm0, %xmm0
    00000242: 	shrl	$0x4, %edx
    00000245: 	addq	%rcx, %rax
    00000248: 	leal	-0x1(%rdx), %r10d
    0000024c: 	leaq	0x10(%rax), %rdx
    00000250: 	shlq	$0x4, %r10
    00000254: 	addq	%rdx, %r10
    00000257: 	jmp	.Ltmp289 # Offset: 599
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp290:
    00000260: 	addq	$0x10, %rdx
.Ltmp289:
    00000264: 	movdqu	(%rax), %xmm1
    00000268: 	movq	%rdx, %rax
    0000026b: 	pxor	%xmm1, %xmm0
    0000026f: 	cmpq	%r10, %rdx
    00000272: 	jne	.Ltmp290 # Offset: 626
    00000274: 	movdqa	%xmm0, %xmm1
    00000278: 	movl	%r11d, %eax
    0000027b: 	psrldq	$0x8, %xmm1
    00000280: 	andl	$-0x10, %eax
    00000283: 	pxor	%xmm1, %xmm0
    00000287: 	leal	(%rax,%r8), %r10d
    0000028b: 	movdqa	%xmm0, %xmm1
    0000028f: 	psrldq	$0x4, %xmm1
    00000294: 	pxor	%xmm1, %xmm0
    00000298: 	movdqa	%xmm0, %xmm1
    0000029c: 	psrldq	$0x2, %xmm1
    000002a1: 	pxor	%xmm1, %xmm0
    000002a5: 	movdqa	%xmm0, %xmm1
    000002a9: 	psrldq	$0x1, %xmm1
    000002ae: 	pxor	%xmm1, %xmm0
    000002b2: 	movd	%xmm0, %edx
    000002b6: 	xorl	%edx, %edi
    000002b8: 	cmpl	%r11d, %eax
    000002bb: 	je	.Ltmp287 # Offset: 699
.Ltmp294:
    000002c1: 	subl	%eax, %r11d
    000002c4: 	leal	-0x1(%r11), %edx
    000002c8: 	cmpl	$0x6, %edx
    000002cb: 	jbe	.Ltmp291 # Offset: 715
    000002cd: 	movslq	%r8d, %r8
    000002d0: 	addq	%rcx, %rax
    000002d3: 	movq	(%rax,%r8), %rdx
    000002d7: 	movzbl	%dh, %eax
    000002da: 	movl	%edx, %r8d
    000002dd: 	xorl	%r8d, %eax
    000002e0: 	xorl	%edi, %eax
    000002e2: 	movq	%rdx, %rdi
    000002e5: 	shrq	$0x10, %rdi
    000002e9: 	xorl	%edi, %eax
    000002eb: 	movq	%rdx, %rdi
    000002ee: 	shrq	$0x18, %rdi
    000002f2: 	xorl	%edi, %eax
    000002f4: 	movq	%rdx, %rdi
    000002f7: 	shrq	$0x20, %rdi
    000002fb: 	xorl	%edi, %eax
    000002fd: 	movq	%rdx, %rdi
    00000300: 	shrq	$0x28, %rdi
    00000304: 	xorl	%edi, %eax
    00000306: 	movq	%rdx, %rdi
    00000309: 	shrq	$0x38, %rdx
    0000030d: 	shrq	$0x30, %rdi
    00000311: 	xorl	%edi, %eax
    00000313: 	xorl	%edx, %eax
    00000315: 	movl	%eax, %edi
    00000317: 	movl	%r11d, %eax
    0000031a: 	andl	$-0x8, %eax
    0000031d: 	addl	%eax, %r10d
    00000320: 	cmpl	%r11d, %eax
    00000323: 	je	.Ltmp287 # Offset: 803
.Ltmp291:
    00000325: 	movslq	%r10d, %rax
    00000328: 	xorb	(%rcx,%rax), %dil
    0000032c: 	leal	0x1(%r10), %eax
    00000330: 	cmpl	%eax, %esi
    00000332: 	jle	.Ltmp287 # Offset: 818
    00000334: 	cltq
    00000336: 	xorb	(%rcx,%rax), %dil
    0000033a: 	leal	0x2(%r10), %eax
    0000033e: 	cmpl	%eax, %esi
    00000340: 	jle	.Ltmp287 # Offset: 832
    00000342: 	cltq
    00000344: 	xorb	(%rcx,%rax), %dil
    00000348: 	leal	0x3(%r10), %eax
    0000034c: 	cmpl	%eax, %esi
    0000034e: 	jle	.Ltmp287 # Offset: 846
    00000350: 	cltq
    00000352: 	xorb	(%rcx,%rax), %dil
    00000356: 	leal	0x4(%r10), %eax
    0000035a: 	cmpl	%eax, %esi
    0000035c: 	jle	.Ltmp287 # Offset: 860
    0000035e: 	cltq
    00000360: 	xorb	(%rcx,%rax), %dil
    00000364: 	leal	0x5(%r10), %eax
    00000368: 	cmpl	%eax, %esi
    0000036a: 	jle	.Ltmp287 # Offset: 874
    0000036c: 	cltq
    0000036e: 	addl	$0x6, %r10d
    00000372: 	xorb	(%rcx,%rax), %dil
    00000376: 	cmpl	%r10d, %esi
    00000379: 	jle	.Ltmp287 # Offset: 889
    0000037b: 	movslq	%r10d, %r10
    0000037e: 	xorb	(%rcx,%r10), %dil
.Ltmp287:
    00000382: 	addq	$0xf8, %rsp
    00000389: 	movl	%edi, %eax
    0000038b: 	popq	%rbx
    0000038c: 	xorl	%r9d, %eax
    0000038f: 	popq	%rbp
    00000390: 	popq	%r12
    00000392: 	retq # Offset: 914
    00000393: 	nopl	(%rax,%rax) # Size: 5
.Ltmp283:
    00000398: 	xorl	%r9d, %r9d
    0000039b: 	xorl	%r8d, %r8d
    0000039e: 	jmp	.Ltmp292 # Offset: 926
.Ltmp284:
    000003a3: 	xorl	%r12d, %r12d
    000003a6: 	xorl	%edx, %edx
    000003a8: 	xorl	%ebp, %ebp
    000003aa: 	xorl	%ebx, %ebx
    000003ac: 	xorl	%r11d, %r11d
    000003af: 	xorl	%eax, %eax
    000003b1: 	xorl	%r10d, %r10d
    000003b4: 	xorl	%r9d, %r9d
    000003b7: 	jmp	.Ltmp293 # Offset: 951
.Ltmp288:
    000003bc: 	movl	%r8d, %r10d
    000003bf: 	xorl	%eax, %eax
    000003c1: 	jmp	.Ltmp294 # Offset: 961
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor8IhET_PKS0_iS0_"

Binary Function "_Z10logic_and1IhEbPKT_ib" after disassembly {
  Number      : 66
  State       : disassembled
  Address     : 0x7270
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x7270
  Section     : .text
  Orc Section : .local.text._Z10logic_and1IhEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB065:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp295 # Offset: 8
    0000000a: 	testb	%dl, %dl
    0000000c: 	je	.Ltmp295 # Offset: 12
    0000000e: 	leal	-0x1(%rsi), %edx
    00000011: 	leaq	0x1(%rdi,%rdx), %rdx
.Ltmp297:
    00000016: 	cmpb	$0x0, (%rdi)
    00000019: 	je	.Ltmp296 # Offset: 25
    0000001b: 	addq	$0x1, %rdi
    0000001f: 	cmpq	%rdi, %rdx
    00000022: 	jne	.Ltmp297 # Offset: 34
    00000024: 	retq # Offset: 36
    00000025: 	nopl	(%rax) # Size: 3
.Ltmp296:
    00000028: 	xorl	%eax, %eax
.Ltmp295:
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and1IhEbPKT_ib"

Binary Function "_Z10logic_and2IhEbPKT_ib" after disassembly {
  Number      : 67
  State       : disassembled
  Address     : 0x72a0
  Size        : 0x34
  MaxSize     : 0x40
  Offset      : 0x72a0
  Section     : .text
  Orc Section : .local.text._Z10logic_and2IhEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB066:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rcx
    00000007: 	addq	%rdi, %rcx
    0000000a: 	cmpq	%rcx, %rdi
    0000000d: 	je	.Ltmp298 # Offset: 13
    0000000f: 	testb	%dl, %dl
    00000011: 	jne	.Ltmp299 # Offset: 17
.Ltmp300:
    00000013: 	jmp	.Ltmp300 # Offset: 19
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp299:
    00000018: 	addq	$0x1, %rdi
    0000001c: 	movzbl	-0x1(%rdi), %eax
    00000020: 	cmpq	%rdi, %rcx
    00000023: 	je	.Ltmp301 # Offset: 35
    00000025: 	testb	%al, %al
    00000027: 	jne	.Ltmp299 # Offset: 39
    00000029: 	jmp	.Ltmp300 # Offset: 41
.Ltmp298:
    0000002b: 	movl	%edx, %eax
    0000002d: 	retq # Offset: 45
.Ltmp301:
    0000002e: 	testb	%al, %al
    00000030: 	setne	%al
    00000033: 	retq # Offset: 51
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and2IhEbPKT_ib"

Binary Function "_Z10logic_and3IhEbPKT_ib" after disassembly {
  Number      : 68
  State       : disassembled
  Address     : 0x72e0
  Size        : 0x6a
  MaxSize     : 0x70
  Offset      : 0x72e0
  Section     : .text
  Orc Section : .local.text._Z10logic_and3IhEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB067:
    00000000: 	endbr64
    00000004: 	cmpl	$0x1, %esi
    00000007: 	jle	.Ltmp302 # Offset: 7
    00000009: 	xorl	%eax, %eax
    0000000b: 	testb	%dl, %dl
    0000000d: 	je	.Ltmp303 # Offset: 13
    0000000f: 	leal	-0x2(%rsi), %eax
    00000012: 	shrl	%eax
    00000014: 	leal	0x2(%rax), %r8d
    00000018: 	movl	$0x2, %eax
    0000001d: 	addq	%r8, %r8
.Ltmp305:
    00000020: 	cmpb	$0x0, -0x2(%rdi,%rax)
    00000025: 	je	.Ltmp304 # Offset: 37
    00000027: 	cmpb	$0x0, -0x1(%rdi,%rax)
    0000002c: 	je	.Ltmp304 # Offset: 44
    0000002e: 	movslq	%eax, %rcx
    00000031: 	addq	$0x2, %rax
    00000035: 	cmpq	%r8, %rax
    00000038: 	jne	.Ltmp305 # Offset: 56
    0000003a: 	cmpl	%ecx, %esi
    0000003c: 	jle	.Ltmp306 # Offset: 60
.Ltmp307:
    0000003e: 	cmpb	$0x0, (%rdi,%rcx)
    00000042: 	je	.Ltmp304 # Offset: 66
    00000044: 	addq	$0x1, %rcx
    00000048: 	cmpl	%ecx, %esi
    0000004a: 	jg	.Ltmp307 # Offset: 74
    0000004c: 	movl	$0x1, %eax
    00000051: 	retq # Offset: 81
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp304:
    00000058: 	xorl	%eax, %eax
    0000005a: 	retq # Offset: 90
.Ltmp306:
    0000005b: 	movl	%edx, %eax
.Ltmp303:
    0000005d: 	retq # Offset: 93
    0000005e: 	nop # Size: 2
.Ltmp302:
    00000060: 	jne	.Ltmp306 # Offset: 96
    00000062: 	testb	%dl, %dl
    00000064: 	je	.Ltmp304 # Offset: 100
    00000066: 	xorl	%ecx, %ecx
    00000068: 	jmp	.Ltmp307 # Offset: 104
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and3IhEbPKT_ib"

Binary Function "_Z10logic_and4IhEbPKT_ib" after disassembly {
  Number      : 69
  State       : disassembled
  Address     : 0x7350
  Size        : 0x81
  MaxSize     : 0x90
  Offset      : 0x7350
  Section     : .text
  Orc Section : .local.text._Z10logic_and4IhEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB068:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	cmpl	$0x3, %esi
    0000000a: 	jle	.Ltmp308 # Offset: 10
    0000000c: 	xorl	%eax, %eax
    0000000e: 	testb	%dl, %dl
    00000010: 	je	.Ltmp309 # Offset: 16
    00000012: 	leal	-0x4(%rsi), %eax
    00000015: 	shrl	$0x2, %eax
    00000018: 	leaq	0x4(%rdi,%rax,4), %r9
    0000001d: 	movq	%rdi, %rax
    00000020: 	movl	$0x4, %edi
    00000025: 	subl	%ecx, %edi
    00000027: 	movl	%edi, %r8d
.Ltmp311:
    0000002a: 	cmpb	$0x0, (%rax)
    0000002d: 	je	.Ltmp310 # Offset: 45
    0000002f: 	cmpb	$0x0, 0x1(%rax)
    00000033: 	je	.Ltmp310 # Offset: 51
    00000035: 	cmpb	$0x0, 0x2(%rax)
    00000039: 	je	.Ltmp310 # Offset: 57
    0000003b: 	cmpb	$0x0, 0x3(%rax)
    0000003f: 	je	.Ltmp310 # Offset: 63
    00000041: 	leal	(%r8,%rax), %edi
    00000045: 	addq	$0x4, %rax
    00000049: 	cmpq	%r9, %rax
    0000004c: 	jne	.Ltmp311 # Offset: 76
    0000004e: 	cmpl	%edi, %esi
    00000050: 	jg	.Ltmp312 # Offset: 80
.Ltmp313:
    00000052: 	movl	%edx, %eax
.Ltmp309:
    00000054: 	retq # Offset: 84
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp310:
    00000058: 	xorl	%eax, %eax
    0000005a: 	retq # Offset: 90
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp308:
    00000060: 	testl	%esi, %esi
    00000062: 	jle	.Ltmp313 # Offset: 98
    00000064: 	testb	%dl, %dl
    00000066: 	je	.Ltmp310 # Offset: 102
    00000068: 	xorl	%edi, %edi
.Ltmp312:
    0000006a: 	movslq	%edi, %rax
.Ltmp314:
    0000006d: 	cmpb	$0x0, (%rcx,%rax)
    00000071: 	je	.Ltmp310 # Offset: 113
    00000073: 	addq	$0x1, %rax
    00000077: 	cmpl	%eax, %esi
    00000079: 	jg	.Ltmp314 # Offset: 121
    0000007b: 	movl	$0x1, %eax
    00000080: 	retq # Offset: 128
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and4IhEbPKT_ib"

Binary Function "_Z10logic_and5IhEbPKT_ib" after disassembly {
  Number      : 70
  State       : disassembled
  Address     : 0x73e0
  Size        : 0x94
  MaxSize     : 0xa0
  Offset      : 0x73e0
  Section     : .text
  Orc Section : .local.text._Z10logic_and5IhEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB069:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%edx, %eax
    00000009: 	movl	%esi, %edi
    0000000b: 	cmpl	$0x1, %esi
    0000000e: 	jle	.Ltmp315 # Offset: 14
    00000014: 	leal	-0x2(%rsi), %r8d
    00000018: 	movq	%r9, %rcx
    0000001b: 	shrl	%r8d
    0000001e: 	movl	%r8d, %esi
    00000021: 	leaq	0x2(%r9,%rsi,2), %rsi
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp318:
    00000030: 	testb	%dl, %dl
    00000032: 	je	.Ltmp316 # Offset: 50
    00000034: 	cmpb	$0x0, (%rcx)
    00000037: 	setne	%dl
.Ltmp316:
    0000003a: 	testb	%al, %al
    0000003c: 	je	.Ltmp317 # Offset: 60
    0000003e: 	cmpb	$0x0, 0x1(%rcx)
    00000042: 	setne	%al
.Ltmp317:
    00000045: 	addq	$0x2, %rcx
    00000049: 	cmpq	%rsi, %rcx
    0000004c: 	jne	.Ltmp318 # Offset: 76
    0000004e: 	leal	0x2(%r8,%r8), %esi
.Ltmp322:
    00000053: 	cmpl	%esi, %edi
    00000055: 	jle	.Ltmp319 # Offset: 85
    00000057: 	testb	%dl, %dl
    00000059: 	je	.Ltmp320 # Offset: 89
    0000005b: 	movslq	%esi, %rcx
    0000005e: 	subl	$0x1, %edi
    00000061: 	leaq	(%r9,%rcx), %rdx
    00000065: 	subl	%esi, %edi
    00000067: 	leaq	0x1(%r9,%rcx), %rcx
    0000006c: 	addq	%rdi, %rcx
.Ltmp321:
    0000006f: 	cmpb	$0x0, (%rdx)
    00000072: 	je	.Ltmp320 # Offset: 114
    00000074: 	addq	$0x1, %rdx
    00000078: 	cmpq	%rcx, %rdx
    0000007b: 	jne	.Ltmp321 # Offset: 123
    0000007d: 	retq # Offset: 125
    0000007e: 	nop # Size: 2
.Ltmp320:
    00000080: 	xorl	%eax, %eax
    00000082: 	retq # Offset: 130
    00000083: 	nopl	(%rax,%rax) # Size: 5
.Ltmp319:
    00000088: 	andl	%edx, %eax
    0000008a: 	retq # Offset: 138
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp315:
    00000090: 	xorl	%esi, %esi
    00000092: 	jmp	.Ltmp322 # Offset: 146
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and5IhEbPKT_ib"

Binary Function "_Z10logic_and6IhEbPKT_ib" after disassembly {
  Number      : 71
  State       : disassembled
  Address     : 0x7480
  Size        : 0xdc
  MaxSize     : 0xe0
  Offset      : 0x7480
  Section     : .text
  Orc Section : .local.text._Z10logic_and6IhEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB070:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movl	%esi, %r11d
    00000008: 	pushq	%rbx
    00000009: 	movq	%rdi, %rbx
    0000000c: 	movl	%edx, %edi
    0000000e: 	cmpl	$0x3, %esi
    00000011: 	jle	.Ltmp323 # Offset: 17
    00000017: 	leal	-0x4(%rsi), %ebp
    0000001a: 	movq	%rbx, %rax
    0000001d: 	movl	%edx, %esi
    0000001f: 	xorl	%r8d, %r8d
    00000022: 	shrl	$0x2, %ebp
    00000025: 	movl	%ebp, %ecx
    00000027: 	leaq	0x4(%rbx,%rcx,4), %r9
    0000002c: 	movl	%edx, %ecx
    0000002e: 	nop # Size: 2
.Ltmp328:
    00000030: 	testb	%dil, %dil
    00000033: 	je	.Ltmp324 # Offset: 51
    00000035: 	cmpb	$0x0, (%rax)
    00000038: 	setne	%dil
.Ltmp324:
    0000003c: 	testb	%dl, %dl
    0000003e: 	je	.Ltmp325 # Offset: 62
    00000040: 	cmpb	$0x0, 0x1(%rax)
    00000044: 	setne	%dl
.Ltmp325:
    00000047: 	testb	%cl, %cl
    00000049: 	je	.Ltmp326 # Offset: 73
    0000004b: 	cmpb	$0x0, 0x2(%rax)
    0000004f: 	setne	%cl
.Ltmp326:
    00000052: 	xorl	%r10d, %r10d
    00000055: 	testb	%sil, %sil
    00000058: 	je	.Ltmp327 # Offset: 88
    0000005a: 	cmpb	$0x0, 0x3(%rax)
    0000005e: 	movl	%r8d, %r10d
    00000061: 	cmovnel	%ecx, %r10d
    00000065: 	cmovel	%r8d, %esi
.Ltmp327:
    00000069: 	addq	$0x4, %rax
    0000006d: 	cmpq	%rax, %r9
    00000070: 	jne	.Ltmp328 # Offset: 112
    00000072: 	leal	0x4(,%rbp,4), %esi
    00000079: 	cmpl	%esi, %r11d
    0000007c: 	jle	.Ltmp329 # Offset: 124
.Ltmp332:
    0000007e: 	testb	%dil, %dil
    00000081: 	je	.Ltmp330 # Offset: 129
    00000083: 	movslq	%esi, %rcx
    00000086: 	subl	$0x1, %r11d
    0000008a: 	leaq	(%rbx,%rcx), %rax
    0000008e: 	subl	%esi, %r11d
    00000091: 	leaq	0x1(%rbx,%rcx), %rcx
    00000096: 	addq	%r11, %rcx
.Ltmp331:
    00000099: 	cmpb	$0x0, (%rax)
    0000009c: 	je	.Ltmp330 # Offset: 156
    0000009e: 	addq	$0x1, %rax
    000000a2: 	cmpq	%rax, %rcx
    000000a5: 	jne	.Ltmp331 # Offset: 165
.Ltmp333:
    000000a7: 	xorl	%eax, %eax
    000000a9: 	testb	%dl, %dl
    000000ab: 	popq	%rbx
    000000ac: 	popq	%rbp
    000000ad: 	cmovel	%eax, %r10d
    000000b1: 	movl	%r10d, %eax
    000000b4: 	retq # Offset: 180
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp330:
    000000b8: 	xorl	%r10d, %r10d
    000000bb: 	popq	%rbx
    000000bc: 	popq	%rbp
    000000bd: 	movl	%r10d, %eax
    000000c0: 	retq # Offset: 192
    000000c1: 	nopl	(%rax) # Size: 7
.Ltmp323:
    000000c8: 	xorl	%esi, %esi
    000000ca: 	movl	%edx, %r10d
    000000cd: 	cmpl	%esi, %r11d
    000000d0: 	jg	.Ltmp332 # Offset: 208
    000000d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp329:
    000000d8: 	andl	%edi, %edx
    000000da: 	jmp	.Ltmp333 # Offset: 218
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and6IhEbPKT_ib"

Binary Function "_Z10logic_and7IhEbPKT_ib" after disassembly {
  Number      : 72
  State       : disassembled
  Address     : 0x7560
  Size        : 0x13f
  MaxSize     : 0x140
  Offset      : 0x7560
  Section     : .text
  Orc Section : .local.text._Z10logic_and7IhEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB071:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movl	%esi, %r11d
    00000009: 	movl	%edx, %eax
    0000000b: 	pushq	%r12
    0000000d: 	pushq	%rbp
    0000000e: 	pushq	%rbx
    0000000f: 	movq	%rdi, %rbx
    00000012: 	cmpl	$0x3, %esi
    00000015: 	jle	.Ltmp334 # Offset: 21
    0000001b: 	leal	-0x4(%rsi), %r13d
    0000001f: 	movq	%rdi, %rcx
    00000022: 	shrl	$0x2, %r13d
    00000026: 	movl	%r13d, %esi
    00000029: 	leaq	0x4(%rdi,%rsi,4), %r12
    0000002e: 	movl	%edx, %edi
    00000030: 	movl	%edx, %esi
    00000032: 	jmp	.Ltmp335 # Offset: 50
    00000034: 	nopl	(%rax) # Size: 4
.Ltmp344:
    00000038: 	xorl	%r9d, %r9d
.Ltmp343:
    0000003b: 	movl	%esi, %ebp
    0000003d: 	testb	%sil, %sil
    00000040: 	je	.Ltmp336 # Offset: 64
    00000042: 	movzbl	0x2(%rcx), %esi
    00000046: 	testb	%sil, %sil
    00000049: 	jne	.Ltmp337 # Offset: 73
    0000004b: 	xorl	%ebp, %ebp
.Ltmp336:
    0000004d: 	movl	%edi, %r10d
    00000050: 	testb	%dil, %dil
    00000053: 	je	.Ltmp338 # Offset: 83
    00000055: 	movzbl	0x3(%rcx), %edi
    00000059: 	testb	%dil, %dil
    0000005c: 	jne	.Ltmp339 # Offset: 92
    0000005e: 	xorl	%r10d, %r10d
.Ltmp338:
    00000061: 	addq	$0x4, %rcx
    00000065: 	cmpq	%rcx, %r12
    00000068: 	je	.Ltmp340 # Offset: 104
.Ltmp335:
    0000006a: 	movl	%eax, %r8d
    0000006d: 	testb	%al, %al
    0000006f: 	je	.Ltmp341 # Offset: 111
    00000071: 	movzbl	(%rcx), %eax
    00000074: 	testb	%al, %al
    00000076: 	jne	.Ltmp342 # Offset: 118
    00000078: 	xorl	%r8d, %r8d
.Ltmp341:
    0000007b: 	movl	%edx, %r9d
    0000007e: 	testb	%dl, %dl
    00000080: 	je	.Ltmp343 # Offset: 128
    00000082: 	movzbl	0x1(%rcx), %edx
    00000086: 	testb	%dl, %dl
    00000088: 	je	.Ltmp344 # Offset: 136
    0000008a: 	movl	$0x1, %edx
    0000008f: 	jmp	.Ltmp343 # Offset: 143
    00000091: 	nopl	(%rax) # Size: 7
.Ltmp342:
    00000098: 	movl	$0x1, %eax
    0000009d: 	jmp	.Ltmp341 # Offset: 157
    0000009f: 	nop # Size: 1
.Ltmp337:
    000000a0: 	movl	$0x1, %esi
    000000a5: 	jmp	.Ltmp336 # Offset: 165
    000000a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp339:
    000000b0: 	addq	$0x4, %rcx
    000000b4: 	movl	$0x1, %edi
    000000b9: 	cmpq	%rcx, %r12
    000000bc: 	jne	.Ltmp335 # Offset: 188
.Ltmp340:
    000000be: 	leal	0x4(,%r13,4), %esi
.Ltmp350:
    000000c6: 	cmpl	%esi, %r11d
    000000c9: 	jle	.Ltmp345 # Offset: 201
    000000cb: 	movslq	%esi, %rcx
    000000ce: 	subl	$0x1, %r11d
    000000d2: 	leaq	(%rbx,%rcx), %rdx
    000000d6: 	subl	%esi, %r11d
    000000d9: 	leaq	0x1(%rbx,%rcx), %rcx
    000000de: 	addq	%r11, %rcx
    000000e1: 	jmp	.Ltmp346 # Offset: 225
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp348:
    000000e8: 	xorl	%r8d, %r8d
.Ltmp347:
    000000eb: 	addq	$0x1, %rdx
    000000ef: 	cmpq	%rdx, %rcx
    000000f2: 	je	.Ltmp345 # Offset: 242
.Ltmp346:
    000000f4: 	movl	%eax, %r8d
    000000f7: 	testb	%al, %al
    000000f9: 	je	.Ltmp347 # Offset: 249
    000000fb: 	movzbl	(%rdx), %eax
    000000fe: 	testb	%al, %al
    00000100: 	je	.Ltmp348 # Offset: 256
    00000102: 	addq	$0x1, %rdx
    00000106: 	movl	$0x1, %eax
    0000010b: 	cmpq	%rdx, %rcx
    0000010e: 	jne	.Ltmp346 # Offset: 270
.Ltmp345:
    00000110: 	testb	%r8b, %r8b
    00000113: 	je	.Ltmp349 # Offset: 275
    00000115: 	xorl	%r8d, %r8d
    00000118: 	testb	%r9b, %r9b
    0000011b: 	je	.Ltmp349 # Offset: 283
    0000011d: 	testb	%bpl, %bpl
    00000120: 	cmovnel	%r10d, %r8d
.Ltmp349:
    00000124: 	popq	%rbx
    00000125: 	movl	%r8d, %eax
    00000128: 	popq	%rbp
    00000129: 	popq	%r12
    0000012b: 	popq	%r13
    0000012d: 	retq # Offset: 301
    0000012e: 	nop # Size: 2
.Ltmp334:
    00000130: 	movl	%edx, %r9d
    00000133: 	movl	%edx, %r10d
    00000136: 	movl	%edx, %ebp
    00000138: 	movl	%edx, %r8d
    0000013b: 	xorl	%esi, %esi
    0000013d: 	jmp	.Ltmp350 # Offset: 317
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and7IhEbPKT_ib"

Binary Function "_Z10logic_and8IhEbPKT_ib" after disassembly {
  Number      : 73
  State       : disassembled
  Address     : 0x76a0
  Size        : 0x268
  MaxSize     : 0x270
  Offset      : 0x76a0
  Section     : .text
  Orc Section : .local.text._Z10logic_and8IhEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB072:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %eax
    00000008: 	movl	%edx, %ecx
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbp
    00000011: 	pushq	%rbx
    00000012: 	movq	%rdi, -0x10(%rsp)
    00000017: 	movl	%esi, -0x8(%rsp)
    0000001b: 	cmpl	$0x7, %esi
    0000001e: 	jle	.Ltmp351 # Offset: 30
    00000024: 	leal	-0x8(%rsi), %esi
    00000027: 	movq	%rdi, %rdx
    0000002a: 	movl	%eax, %ebx
    0000002c: 	movl	%eax, %r11d
    0000002f: 	shrl	$0x3, %esi
    00000032: 	movl	%eax, %r10d
    00000035: 	movl	%eax, %r9d
    00000038: 	leaq	0x8(%rdi,%rsi,8), %rdi
    0000003d: 	movl	%esi, -0x4(%rsp)
    00000041: 	movl	%eax, %esi
    00000043: 	movq	%rdi, -0x18(%rsp)
    00000048: 	movl	%eax, %edi
    0000004a: 	jmp	.Ltmp352 # Offset: 74
    0000004f: 	nop # Size: 1
.Ltmp369:
    00000050: 	xorl	%r15d, %r15d
.Ltmp368:
    00000053: 	movl	%esi, %r14d
    00000056: 	testb	%sil, %sil
    00000059: 	je	.Ltmp353 # Offset: 89
    0000005b: 	movzbl	0x2(%rdx), %esi
    0000005f: 	testb	%sil, %sil
    00000062: 	jne	.Ltmp354 # Offset: 98
    00000068: 	xorl	%r14d, %r14d
.Ltmp353:
    0000006b: 	movb	%dil, -0x1a(%rsp)
    00000070: 	testb	%dil, %dil
    00000073: 	je	.Ltmp355 # Offset: 115
    00000075: 	movzbl	0x3(%rdx), %edi
    00000079: 	testb	%dil, %dil
    0000007c: 	jne	.Ltmp356 # Offset: 124
    00000082: 	movb	$0x0, -0x1a(%rsp)
.Ltmp355:
    00000087: 	movl	%r9d, %r8d
    0000008a: 	testb	%r9b, %r9b
    0000008d: 	je	.Ltmp357 # Offset: 141
    0000008f: 	movzbl	0x4(%rdx), %r9d
    00000094: 	testb	%r9b, %r9b
    00000097: 	jne	.Ltmp358 # Offset: 151
    0000009d: 	xorl	%r8d, %r8d
.Ltmp357:
    000000a0: 	movl	%r10d, %r12d
    000000a3: 	testb	%r10b, %r10b
    000000a6: 	je	.Ltmp359 # Offset: 166
    000000a8: 	movzbl	0x5(%rdx), %r10d
    000000ad: 	testb	%r10b, %r10b
    000000b0: 	jne	.Ltmp360 # Offset: 176
    000000b6: 	xorl	%r12d, %r12d
.Ltmp359:
    000000b9: 	movl	%r11d, %r13d
    000000bc: 	testb	%r11b, %r11b
    000000bf: 	je	.Ltmp361 # Offset: 191
    000000c1: 	movzbl	0x6(%rdx), %r11d
    000000c6: 	testb	%r11b, %r11b
    000000c9: 	jne	.Ltmp362 # Offset: 201
    000000cf: 	xorl	%r13d, %r13d
.Ltmp361:
    000000d2: 	movb	%bl, -0x19(%rsp)
    000000d6: 	testb	%bl, %bl
    000000d8: 	je	.Ltmp363 # Offset: 216
    000000da: 	movzbl	0x7(%rdx), %ebx
    000000de: 	testb	%bl, %bl
    000000e0: 	jne	.Ltmp364 # Offset: 224
    000000e6: 	movb	$0x0, -0x19(%rsp)
.Ltmp363:
    000000eb: 	addq	$0x8, %rdx
    000000ef: 	cmpq	%rdx, -0x18(%rsp)
    000000f4: 	je	.Ltmp365 # Offset: 244
.Ltmp352:
    000000fa: 	movl	%ecx, %ebp
    000000fc: 	testb	%cl, %cl
    000000fe: 	je	.Ltmp366 # Offset: 254
    00000100: 	movzbl	(%rdx), %ecx
    00000103: 	testb	%cl, %cl
    00000105: 	jne	.Ltmp367 # Offset: 261
    00000107: 	xorl	%ebp, %ebp
.Ltmp366:
    00000109: 	movl	%eax, %r15d
    0000010c: 	testb	%al, %al
    0000010e: 	je	.Ltmp368 # Offset: 270
    00000114: 	movzbl	0x1(%rdx), %eax
    00000118: 	testb	%al, %al
    0000011a: 	je	.Ltmp369 # Offset: 282
    00000120: 	movl	$0x1, %eax
    00000125: 	jmp	.Ltmp368 # Offset: 293
    0000012a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp367:
    00000130: 	movl	$0x1, %ecx
    00000135: 	jmp	.Ltmp366 # Offset: 309
    00000137: 	nopw	(%rax,%rax) # Size: 9
.Ltmp354:
    00000140: 	movl	$0x1, %esi
    00000145: 	jmp	.Ltmp353 # Offset: 325
    0000014a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp356:
    00000150: 	movl	$0x1, %edi
    00000155: 	jmp	.Ltmp355 # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp358:
    00000160: 	movl	$0x1, %r9d
    00000166: 	jmp	.Ltmp357 # Offset: 358
    0000016b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp360:
    00000170: 	movl	$0x1, %r10d
    00000176: 	jmp	.Ltmp359 # Offset: 374
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp362:
    00000180: 	movl	$0x1, %r11d
    00000186: 	jmp	.Ltmp361 # Offset: 390
    0000018b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp364:
    00000190: 	movl	$0x1, %ebx
    00000195: 	addq	$0x8, %rdx
    00000199: 	cmpq	%rdx, -0x18(%rsp)
    0000019e: 	jne	.Ltmp352 # Offset: 414
.Ltmp365:
    000001a4: 	movl	-0x4(%rsp), %eax
    000001a8: 	leal	0x8(,%rax,8), %edi
.Ltmp377:
    000001af: 	movl	-0x8(%rsp), %ebx
    000001b3: 	cmpl	%ebx, %edi
    000001b5: 	jge	.Ltmp370 # Offset: 437
    000001b7: 	movq	-0x10(%rsp), %rsi
    000001bc: 	movslq	%edi, %rdx
    000001bf: 	leaq	(%rsi,%rdx), %rax
    000001c3: 	leaq	0x1(%rsi,%rdx), %rdx
    000001c8: 	movl	%ebx, %esi
    000001ca: 	subl	$0x1, %esi
    000001cd: 	subl	%edi, %esi
    000001cf: 	addq	%rsi, %rdx
    000001d2: 	jmp	.Ltmp371 # Offset: 466
    000001d4: 	nopl	(%rax) # Size: 4
.Ltmp373:
    000001d8: 	xorl	%ebp, %ebp
.Ltmp372:
    000001da: 	addq	$0x1, %rax
    000001de: 	cmpq	%rax, %rdx
    000001e1: 	je	.Ltmp370 # Offset: 481
.Ltmp371:
    000001e3: 	movl	%ecx, %ebp
    000001e5: 	testb	%cl, %cl
    000001e7: 	je	.Ltmp372 # Offset: 487
    000001e9: 	movzbl	(%rax), %ecx
    000001ec: 	testb	%cl, %cl
    000001ee: 	je	.Ltmp373 # Offset: 494
    000001f0: 	addq	$0x1, %rax
    000001f4: 	movl	$0x1, %ecx
    000001f9: 	cmpq	%rax, %rdx
    000001fc: 	jne	.Ltmp371 # Offset: 508
.Ltmp370:
    000001fe: 	testb	%bpl, %bpl
    00000201: 	je	.Ltmp374 # Offset: 513
    00000203: 	xorl	%ebp, %ebp
    00000205: 	testb	%r15b, %r15b
    00000208: 	jne	.Ltmp375 # Offset: 520
.Ltmp374:
    0000020a: 	testb	%r8b, %r8b
    0000020d: 	je	.Ltmp376 # Offset: 525
    0000020f: 	xorl	%r8d, %r8d
    00000212: 	testb	%r12b, %r12b
    00000215: 	je	.Ltmp376 # Offset: 533
    00000217: 	testb	%r13b, %r13b
    0000021a: 	cmovnel	%ebp, %r8d
.Ltmp376:
    0000021e: 	popq	%rbx
    0000021f: 	movl	%r8d, %eax
    00000222: 	popq	%rbp
    00000223: 	popq	%r12
    00000225: 	popq	%r13
    00000227: 	popq	%r14
    00000229: 	popq	%r15
    0000022b: 	retq # Offset: 555
    0000022c: 	nopl	(%rax) # Size: 4
.Ltmp375:
    00000230: 	testb	%r14b, %r14b
    00000233: 	je	.Ltmp374 # Offset: 563
    00000235: 	movzbl	-0x19(%rsp), %eax
    0000023a: 	cmpb	$0x0, -0x1a(%rsp)
    0000023f: 	cmovnel	%eax, %ebp
    00000242: 	jmp	.Ltmp374 # Offset: 578
    00000244: 	nopl	(%rax) # Size: 4
.Ltmp351:
    00000248: 	movb	%dl, -0x19(%rsp)
    0000024c: 	movl	%edx, %ebp
    0000024e: 	movl	%edx, %r13d
    00000251: 	movl	%edx, %r12d
    00000254: 	movb	%dl, -0x1a(%rsp)
    00000258: 	movl	%edx, %r14d
    0000025b: 	movl	%edx, %r15d
    0000025e: 	movl	%edx, %r8d
    00000261: 	xorl	%edi, %edi
    00000263: 	jmp	.Ltmp377 # Offset: 611
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and8IhEbPKT_ib"

Binary Function "_Z9logic_or1IhEbPKT_ib" after disassembly {
  Number      : 74
  State       : disassembled
  Address     : 0x7910
  Size        : 0x2a
  MaxSize     : 0x30
  Offset      : 0x7910
  Section     : .text
  Orc Section : .local.text._Z9logic_or1IhEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB073:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp378 # Offset: 8
    0000000a: 	leal	-0x1(%rsi), %edx
    0000000d: 	leaq	0x1(%rdi,%rdx), %rcx
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp379:
    00000018: 	cmpb	$0x0, (%rdi)
    0000001b: 	setne	%dl
    0000001e: 	addq	$0x1, %rdi
    00000022: 	orl	%edx, %eax
    00000024: 	cmpq	%rdi, %rcx
    00000027: 	jne	.Ltmp379 # Offset: 39
.Ltmp378:
    00000029: 	retq # Offset: 41
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or1IhEbPKT_ib"

Binary Function "_Z12logic_or_optIhEbPKT_ib" after disassembly {
  Number      : 75
  State       : disassembled
  Address     : 0x7940
  Size        : 0x43
  MaxSize     : 0x50
  Offset      : 0x7940
  Section     : .text
  Orc Section : .local.text._Z12logic_or_optIhEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB074:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp380 # Offset: 6
    00000008: 	cmpb	$0x1, %dl
    0000000b: 	je	.Ltmp380 # Offset: 11
    0000000d: 	movl	$0x1, %eax
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp381:
    00000018: 	movzbl	-0x1(%rdi,%rax), %edx
    0000001d: 	cmpl	%eax, %esi
    0000001f: 	setg	%r8b
    00000023: 	testb	%dl, %dl
    00000025: 	sete	%cl
    00000028: 	addq	$0x1, %rax
    0000002c: 	testb	%cl, %r8b
    0000002f: 	jne	.Ltmp381 # Offset: 47
    00000031: 	testb	%dl, %dl
    00000033: 	setne	%al
    00000036: 	retq # Offset: 54
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp380:
    00000040: 	movl	%edx, %eax
    00000042: 	retq # Offset: 66
DWARF CFI Instructions:
    <empty>
End of Function "_Z12logic_or_optIhEbPKT_ib"

Binary Function "_Z9logic_or2IhEbPKT_ib" after disassembly {
  Number      : 76
  State       : disassembled
  Address     : 0x7990
  Size        : 0x86
  MaxSize     : 0x90
  Offset      : 0x7990
  Section     : .text
  Orc Section : .local.text._Z9logic_or2IhEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB075:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movl	%edx, %ecx
    00000009: 	addq	%rdi, %rsi
    0000000c: 	cmpq	%rsi, %rdi
    0000000f: 	jne	.Ltmp382 # Offset: 15
    00000011: 	jmp	.Ltmp383 # Offset: 17
    00000013: 	nopl	(%rax,%rax) # Size: 5
.Ltmp388:
    00000018: 	testb	%cl, %cl
    0000001a: 	jne	.Ltmp384 # Offset: 26
.Ltmp386:
    0000001c: 	cmpq	%rax, %rsi
    0000001f: 	je	.Ltmp385 # Offset: 31
    00000021: 	addq	$0x1, %rax
    00000025: 	cmpb	$0x0, -0x1(%rax)
    00000029: 	je	.Ltmp386 # Offset: 41
.Ltmp391:
    0000002b: 	movq	%rax, %rdi
    0000002e: 	movl	$0x1, %ecx
    00000033: 	cmpq	%rdi, %rsi
    00000036: 	je	.Ltmp387 # Offset: 54
.Ltmp382:
    00000038: 	cmpb	$0x0, (%rdi)
    0000003b: 	leaq	0x1(%rdi), %rax
    0000003f: 	je	.Ltmp388 # Offset: 63
.Ltmp390:
    00000041: 	cmpq	%rax, %rsi
    00000044: 	je	.Ltmp387 # Offset: 68
    00000046: 	leaq	0x1(%rax), %rdi
    0000004a: 	movl	$0x1, %ecx
    0000004f: 	cmpq	%rdi, %rsi
    00000052: 	jne	.Ltmp382 # Offset: 82
.Ltmp387:
    00000054: 	movl	$0x1, %eax
    00000059: 	retq # Offset: 89
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp384:
    00000060: 	cmpq	%rax, %rsi
    00000063: 	je	.Ltmp389 # Offset: 99
    00000065: 	cmpb	$0x0, 0x1(%rdi)
    00000069: 	leaq	0x2(%rdi), %rax
    0000006d: 	jne	.Ltmp390 # Offset: 109
    0000006f: 	jmp	.Ltmp391 # Offset: 111
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp385:
    00000078: 	xorl	%eax, %eax
    0000007a: 	retq # Offset: 122
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp383:
    00000080: 	movl	%edx, %eax
    00000082: 	retq # Offset: 130
.Ltmp389:
    00000083: 	movl	%ecx, %eax
    00000085: 	retq # Offset: 133
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or2IhEbPKT_ib"

Binary Function "_Z9logic_or3IhEbPKT_ib" after disassembly {
  Number      : 77
  State       : disassembled
  Address     : 0x7a20
  Size        : 0x84
  MaxSize     : 0x90
  Offset      : 0x7a20
  Section     : .text
  Orc Section : .local.text._Z9logic_or3IhEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB076:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movl	%edx, %eax
    00000009: 	movl	%esi, %edi
    0000000b: 	cmpl	$0x1, %esi
    0000000e: 	jle	.Ltmp392 # Offset: 14
    00000010: 	leal	-0x2(%rsi), %r9d
    00000014: 	movq	%r8, %rcx
    00000017: 	shrl	%r9d
    0000001a: 	movl	%r9d, %edx
    0000001d: 	leaq	0x2(%r8,%rdx,2), %rsi
    00000022: 	jmp	.Ltmp393 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp395:
    00000028: 	addq	$0x2, %rcx
    0000002c: 	cmpq	%rsi, %rcx
    0000002f: 	je	.Ltmp394 # Offset: 47
.Ltmp393:
    00000031: 	cmpb	$0x0, (%rcx)
    00000034: 	setne	%dl
    00000037: 	orb	%dl, %al
    00000039: 	jne	.Ltmp395 # Offset: 57
    0000003b: 	cmpb	$0x0, 0x1(%rcx)
    0000003f: 	setne	%al
    00000042: 	addq	$0x2, %rcx
    00000046: 	cmpq	%rsi, %rcx
    00000049: 	jne	.Ltmp393 # Offset: 73
.Ltmp394:
    0000004b: 	leal	0x2(%r9,%r9), %edx
.Ltmp397:
    00000050: 	cmpl	%edx, %edi
    00000052: 	jle	.Ltmp396 # Offset: 82
    00000054: 	movslq	%edx, %rcx
    00000057: 	cmpb	$0x0, (%r8,%rcx)
    0000005c: 	setne	%cl
    0000005f: 	addl	$0x1, %edx
    00000062: 	orl	%ecx, %eax
    00000064: 	cmpl	%edx, %edi
    00000066: 	jle	.Ltmp396 # Offset: 102
    00000068: 	movslq	%edx, %rdx
    0000006b: 	cmpb	$0x0, (%r8,%rdx)
    00000070: 	setne	%dl
    00000073: 	orl	%edx, %eax
.Ltmp396:
    00000075: 	retq # Offset: 117
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp392:
    00000080: 	xorl	%edx, %edx
    00000082: 	jmp	.Ltmp397 # Offset: 130
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or3IhEbPKT_ib"

Binary Function "_Z9logic_or4IhEbPKT_ib" after disassembly {
  Number      : 78
  State       : disassembled
  Address     : 0x7ab0
  Size        : 0xbc
  MaxSize     : 0xc0
  Offset      : 0x7ab0
  Section     : .text
  Orc Section : .local.text._Z9logic_or4IhEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB077:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	cmpl	$0x3, %esi
    00000009: 	jle	.Ltmp398 # Offset: 9
    0000000f: 	leal	-0x4(%rsi), %r8d
    00000013: 	movq	%rdi, %rcx
    00000016: 	shrl	$0x2, %r8d
    0000001a: 	movl	%r8d, %edx
    0000001d: 	leaq	0x4(%rdi,%rdx,4), %rdx
    00000022: 	jmp	.Ltmp399 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp402:
    00000028: 	testb	%al, %al
    0000002a: 	jne	.Ltmp400 # Offset: 42
    0000002c: 	cmpb	$0x0, 0x1(%rcx)
    00000030: 	movl	$0x1, %eax
    00000035: 	jne	.Ltmp400 # Offset: 53
    00000037: 	cmpb	$0x0, 0x2(%rcx)
    0000003b: 	jne	.Ltmp400 # Offset: 59
    0000003d: 	cmpb	$0x0, 0x3(%rcx)
    00000041: 	setne	%al
.Ltmp400:
    00000044: 	addq	$0x4, %rcx
    00000048: 	cmpq	%rdx, %rcx
    0000004b: 	je	.Ltmp401 # Offset: 75
.Ltmp399:
    0000004d: 	cmpb	$0x0, (%rcx)
    00000050: 	je	.Ltmp402 # Offset: 80
    00000052: 	addq	$0x4, %rcx
    00000056: 	movl	$0x1, %eax
    0000005b: 	cmpq	%rdx, %rcx
    0000005e: 	jne	.Ltmp399 # Offset: 94
.Ltmp401:
    00000060: 	leal	0x4(,%r8,4), %edx
.Ltmp404:
    00000068: 	cmpl	%esi, %edx
    0000006a: 	jge	.Ltmp403 # Offset: 106
    0000006c: 	movslq	%edx, %rcx
    0000006f: 	cmpb	$0x0, (%rdi,%rcx)
    00000073: 	setne	%cl
    00000076: 	orl	%ecx, %eax
    00000078: 	leal	0x1(%rdx), %ecx
    0000007b: 	cmpl	%ecx, %esi
    0000007d: 	jle	.Ltmp403 # Offset: 125
    0000007f: 	movslq	%ecx, %rcx
    00000082: 	cmpb	$0x0, (%rdi,%rcx)
    00000086: 	setne	%cl
    00000089: 	orl	%ecx, %eax
    0000008b: 	leal	0x2(%rdx), %ecx
    0000008e: 	cmpl	%esi, %ecx
    00000090: 	jge	.Ltmp403 # Offset: 144
    00000092: 	movslq	%ecx, %rcx
    00000095: 	cmpb	$0x0, (%rdi,%rcx)
    00000099: 	setne	%cl
    0000009c: 	addl	$0x3, %edx
    0000009f: 	orl	%ecx, %eax
    000000a1: 	cmpl	%esi, %edx
    000000a3: 	jge	.Ltmp403 # Offset: 163
    000000a5: 	movslq	%edx, %rdx
    000000a8: 	cmpb	$0x0, (%rdi,%rdx)
    000000ac: 	setne	%dl
    000000af: 	orl	%edx, %eax
.Ltmp403:
    000000b1: 	retq # Offset: 177
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp398:
    000000b8: 	xorl	%edx, %edx
    000000ba: 	jmp	.Ltmp404 # Offset: 186
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or4IhEbPKT_ib"

Binary Function "_Z9logic_or5IhEbPKT_ib" after disassembly {
  Number      : 79
  State       : disassembled
  Address     : 0x7b70
  Size        : 0x7c
  MaxSize     : 0x80
  Offset      : 0x7b70
  Section     : .text
  Orc Section : .local.text._Z9logic_or5IhEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB078:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x1, %esi
    0000000c: 	jle	.Ltmp405 # Offset: 12
    0000000e: 	leal	-0x2(%rsi), %r10d
    00000012: 	movq	%rdi, %rcx
    00000015: 	shrl	%r10d
    00000018: 	movl	%r10d, %edi
    0000001b: 	leaq	0x2(%r9,%rdi,2), %r8
.Ltmp406:
    00000020: 	cmpb	$0x0, (%rcx)
    00000023: 	setne	%dil
    00000027: 	orl	%edi, %eax
    00000029: 	cmpb	$0x0, 0x1(%rcx)
    0000002d: 	setne	%dil
    00000031: 	addq	$0x2, %rcx
    00000035: 	orl	%edi, %edx
    00000037: 	cmpq	%rcx, %r8
    0000003a: 	jne	.Ltmp406 # Offset: 58
    0000003c: 	leal	0x2(%r10,%r10), %edi
.Ltmp409:
    00000041: 	cmpl	%edi, %esi
    00000043: 	jle	.Ltmp407 # Offset: 67
    00000045: 	movslq	%edi, %r8
    00000048: 	subl	$0x1, %esi
    0000004b: 	subl	%edi, %esi
    0000004d: 	leaq	0x1(%r9,%r8), %rdi
    00000052: 	leaq	(%r9,%r8), %rcx
    00000056: 	addq	%rdi, %rsi
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp408:
    00000060: 	cmpb	$0x0, (%rcx)
    00000063: 	setne	%dil
    00000067: 	addq	$0x1, %rcx
    0000006b: 	orl	%edi, %eax
    0000006d: 	cmpq	%rcx, %rsi
    00000070: 	jne	.Ltmp408 # Offset: 112
.Ltmp407:
    00000072: 	orl	%edx, %eax
    00000074: 	retq # Offset: 116
    00000075: 	nopl	(%rax) # Size: 3
.Ltmp405:
    00000078: 	xorl	%edi, %edi
    0000007a: 	jmp	.Ltmp409 # Offset: 122
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or5IhEbPKT_ib"

Binary Function "_Z9logic_or6IhEbPKT_ib" after disassembly {
  Number      : 80
  State       : disassembled
  Address     : 0x7bf0
  Size        : 0xba
  MaxSize     : 0xc0
  Offset      : 0x7bf0
  Section     : .text
  Orc Section : .local.text._Z9logic_or6IhEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB079:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r10
    00000007: 	pushq	%rbx
    00000008: 	movl	%esi, %edi
    0000000a: 	movl	%edx, %eax
    0000000c: 	cmpl	$0x3, %esi
    0000000f: 	jle	.Ltmp410 # Offset: 15
    00000015: 	leal	-0x4(%rsi), %ebx
    00000018: 	movq	%r10, %rcx
    0000001b: 	movl	%edx, %r8d
    0000001e: 	shrl	$0x2, %ebx
    00000021: 	movl	%ebx, %esi
    00000023: 	leaq	0x4(%r10,%rsi,4), %r11
    00000028: 	movl	%edx, %esi
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp411:
    00000030: 	cmpb	$0x0, (%rcx)
    00000033: 	setne	%r9b
    00000037: 	orl	%r9d, %eax
    0000003a: 	cmpb	$0x0, 0x1(%rcx)
    0000003e: 	setne	%r9b
    00000042: 	orl	%r9d, %edx
    00000045: 	cmpb	$0x0, 0x2(%rcx)
    00000049: 	setne	%r9b
    0000004d: 	orl	%r9d, %esi
    00000050: 	cmpb	$0x0, 0x3(%rcx)
    00000054: 	setne	%r9b
    00000058: 	addq	$0x4, %rcx
    0000005c: 	orl	%r9d, %r8d
    0000005f: 	cmpq	%rcx, %r11
    00000062: 	jne	.Ltmp411 # Offset: 98
    00000064: 	leal	0x4(,%rbx,4), %r9d
.Ltmp414:
    0000006c: 	cmpl	%r9d, %edi
    0000006f: 	jle	.Ltmp412 # Offset: 111
    00000071: 	movslq	%r9d, %r11
    00000074: 	subl	$0x1, %edi
    00000077: 	subl	%r9d, %edi
    0000007a: 	leaq	0x1(%r10,%r11), %r9
    0000007f: 	leaq	(%r10,%r11), %rcx
    00000083: 	addq	%r9, %rdi
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp413:
    00000090: 	cmpb	$0x0, (%rcx)
    00000093: 	setne	%r9b
    00000097: 	addq	$0x1, %rcx
    0000009b: 	orl	%r9d, %eax
    0000009e: 	cmpq	%rcx, %rdi
    000000a1: 	jne	.Ltmp413 # Offset: 161
.Ltmp412:
    000000a3: 	orl	%r8d, %esi
    000000a6: 	orb	%dl, %al
    000000a8: 	popq	%rbx
    000000a9: 	cmovel	%esi, %eax
    000000ac: 	retq # Offset: 172
    000000ad: 	nopl	(%rax) # Size: 3
.Ltmp410:
    000000b0: 	movl	%edx, %r8d
    000000b3: 	movl	%edx, %esi
    000000b5: 	xorl	%r9d, %r9d
    000000b8: 	jmp	.Ltmp414 # Offset: 184
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or6IhEbPKT_ib"

Binary Function "_Z9logic_or7IhEbPKT_ib" after disassembly {
  Number      : 81
  State       : disassembled
  Address     : 0x7cb0
  Size        : 0x102
  MaxSize     : 0x110
  Offset      : 0x7cb0
  Section     : .text
  Orc Section : .local.text._Z9logic_or7IhEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB080:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movl	%esi, %r10d
    00000009: 	movl	%edx, %ecx
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	cmpl	$0x3, %esi
    00000017: 	jle	.Ltmp415 # Offset: 23
    0000001d: 	leal	-0x4(%rsi), %r14d
    00000021: 	movq	%rdi, %rax
    00000024: 	movl	%edx, %r8d
    00000027: 	shrl	$0x2, %r14d
    0000002b: 	movl	%r14d, %esi
    0000002e: 	leaq	0x4(%rdi,%rsi,4), %r13
    00000033: 	movl	%edx, %edi
    00000035: 	movl	$0x1, %esi
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp416:
    00000040: 	cmpb	$0x0, (%rax)
    00000043: 	cmovnel	%esi, %ecx
    00000046: 	cmpb	$0x0, 0x1(%rax)
    0000004a: 	cmovnel	%esi, %edx
    0000004d: 	cmpb	$0x0, 0x2(%rax)
    00000051: 	cmovnel	%esi, %edi
    00000054: 	cmpb	$0x0, 0x3(%rax)
    00000058: 	movl	%ecx, %r9d
    0000005b: 	cmovnel	%esi, %r8d
    0000005f: 	addq	$0x4, %rax
    00000063: 	movl	%edx, %r11d
    00000066: 	movl	%edi, %r12d
    00000069: 	movl	%r8d, %ebp
    0000006c: 	cmpq	%r13, %rax
    0000006f: 	jne	.Ltmp416 # Offset: 111
    00000071: 	leal	0x4(,%r14,4), %esi
.Ltmp421:
    00000079: 	cmpl	%esi, %r10d
    0000007c: 	jle	.Ltmp417 # Offset: 124
    0000007e: 	movslq	%esi, %rdx
    00000081: 	subl	$0x1, %r10d
    00000085: 	subl	%esi, %r10d
    00000088: 	leaq	(%rbx,%rdx), %rax
    0000008c: 	leaq	0x1(%rbx,%rdx), %rdx
    00000091: 	movl	$0x1, %esi
    00000096: 	addq	%r10, %rdx
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp418:
    000000a0: 	cmpb	$0x0, (%rax)
    000000a3: 	cmovnel	%esi, %ecx
    000000a6: 	addq	$0x1, %rax
    000000aa: 	movl	%ecx, %r9d
    000000ad: 	cmpq	%rdx, %rax
    000000b0: 	jne	.Ltmp418 # Offset: 176
.Ltmp417:
    000000b2: 	testb	%r9b, %r9b
    000000b5: 	jne	.Ltmp419 # Offset: 181
    000000b7: 	movl	%r11d, %r9d
    000000ba: 	testb	%r11b, %r11b
    000000bd: 	je	.Ltmp420 # Offset: 189
.Ltmp419:
    000000bf: 	popq	%rbx
    000000c0: 	movl	%r9d, %eax
    000000c3: 	popq	%rbp
    000000c4: 	popq	%r12
    000000c6: 	popq	%r13
    000000c8: 	popq	%r14
    000000ca: 	retq # Offset: 202
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp420:
    000000d0: 	testb	%r12b, %r12b
    000000d3: 	movl	%ebp, %r9d
    000000d6: 	popq	%rbx
    000000d7: 	popq	%rbp
    000000d8: 	cmovnel	%r12d, %r9d
    000000dc: 	popq	%r12
    000000de: 	popq	%r13
    000000e0: 	popq	%r14
    000000e2: 	movl	%r9d, %eax
    000000e5: 	retq # Offset: 229
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp415:
    000000f0: 	movl	%edx, %r11d
    000000f3: 	movl	%edx, %r9d
    000000f6: 	movl	%edx, %ebp
    000000f8: 	movl	%edx, %r12d
    000000fb: 	xorl	%esi, %esi
    000000fd: 	jmp	.Ltmp421 # Offset: 253
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or7IhEbPKT_ib"

Binary Function "_Z9logic_or8IhEbPKT_ib" after disassembly {
  Number      : 82
  State       : disassembled
  Address     : 0x7dc0
  Size        : 0x192
  MaxSize     : 0x1a0
  Offset      : 0x7dc0
  Section     : .text
  Orc Section : .local.text._Z9logic_or8IhEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB081:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %eax
    00000008: 	pushq	%r14
    0000000a: 	pushq	%r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	movl	%esi, %ebx
    00000012: 	movl	%esi, -0x8(%rsp)
    00000016: 	movl	%edx, %esi
    00000018: 	movq	%rdi, -0x10(%rsp)
    0000001d: 	cmpl	$0x7, %ebx
    00000020: 	jle	.Ltmp422 # Offset: 32
    00000026: 	leal	-0x8(%rbx), %ecx
    00000029: 	movq	%rdi, %rdx
    0000002c: 	movl	%eax, %ebp
    0000002e: 	movl	%eax, %ebx
    00000030: 	shrl	$0x3, %ecx
    00000033: 	movl	%eax, %r11d
    00000036: 	movl	%eax, %r10d
    00000039: 	movl	%eax, %r9d
    0000003c: 	leaq	0x8(%rdi,%rcx,8), %rdi
    00000041: 	movl	%ecx, -0x4(%rsp)
    00000045: 	movl	$0x1, %ecx
    0000004a: 	movq	%rdi, -0x20(%rsp)
    0000004f: 	movl	%eax, %edi
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp423:
    00000058: 	cmpb	$0x0, (%rdx)
    0000005b: 	cmovnel	%ecx, %esi
    0000005e: 	cmpb	$0x0, 0x1(%rdx)
    00000062: 	cmovnel	%ecx, %eax
    00000065: 	cmpb	$0x0, 0x2(%rdx)
    00000069: 	cmovnel	%ecx, %edi
    0000006c: 	cmpb	$0x0, 0x3(%rdx)
    00000070: 	cmovnel	%ecx, %r9d
    00000074: 	cmpb	$0x0, 0x4(%rdx)
    00000078: 	movl	%eax, %r12d
    0000007b: 	cmovnel	%ecx, %r10d
    0000007f: 	cmpb	$0x0, 0x5(%rdx)
    00000083: 	movl	%edi, %r15d
    00000086: 	cmovnel	%ecx, %r11d
    0000008a: 	cmpb	$0x0, 0x6(%rdx)
    0000008e: 	movb	%r9b, -0x13(%rsp)
    00000093: 	cmovnel	%ecx, %ebx
    00000096: 	cmpb	$0x0, 0x7(%rdx)
    0000009a: 	movl	%r10d, %r8d
    0000009d: 	cmovnel	%ecx, %ebp
    000000a0: 	movl	%r11d, %r13d
    000000a3: 	addq	$0x8, %rdx
    000000a7: 	movb	%bl, -0x12(%rsp)
    000000ab: 	movb	%bpl, -0x11(%rsp)
    000000b0: 	cmpq	%rdx, -0x20(%rsp)
    000000b5: 	jne	.Ltmp423 # Offset: 181
    000000b7: 	movl	-0x4(%rsp), %eax
    000000bb: 	movl	%r12d, %r14d
    000000be: 	movl	%esi, %r12d
    000000c1: 	leal	0x8(,%rax,8), %edi
.Ltmp430:
    000000c8: 	movl	-0x8(%rsp), %ebx
    000000cc: 	cmpl	%edi, %ebx
    000000ce: 	jle	.Ltmp424 # Offset: 206
    000000d0: 	movq	-0x10(%rsp), %rcx
    000000d5: 	movslq	%edi, %rdx
    000000d8: 	subl	$0x1, %ebx
    000000db: 	leaq	(%rcx,%rdx), %rax
    000000df: 	leaq	0x1(%rcx,%rdx), %rdx
    000000e4: 	movl	%ebx, %ecx
    000000e6: 	subl	%edi, %ecx
    000000e8: 	addq	%rcx, %rdx
    000000eb: 	movl	$0x1, %ecx
.Ltmp425:
    000000f0: 	cmpb	$0x0, (%rax)
    000000f3: 	cmovnel	%ecx, %esi
    000000f6: 	addq	$0x1, %rax
    000000fa: 	movl	%esi, %r12d
    000000fd: 	cmpq	%rdx, %rax
    00000100: 	jne	.Ltmp425 # Offset: 256
.Ltmp424:
    00000102: 	testb	%r12b, %r12b
    00000105: 	jne	.Ltmp426 # Offset: 261
    00000107: 	movl	%r14d, %r12d
    0000010a: 	testb	%r14b, %r14b
    0000010d: 	je	.Ltmp427 # Offset: 269
.Ltmp426:
    0000010f: 	testb	%r8b, %r8b
    00000112: 	jne	.Ltmp428 # Offset: 274
    00000114: 	movl	%r13d, %r8d
    00000117: 	testb	%r13b, %r13b
    0000011a: 	je	.Ltmp429 # Offset: 282
.Ltmp428:
    0000011c: 	popq	%rbx
    0000011d: 	movl	%r8d, %eax
    00000120: 	popq	%rbp
    00000121: 	popq	%r12
    00000123: 	popq	%r13
    00000125: 	popq	%r14
    00000127: 	popq	%r15
    00000129: 	retq # Offset: 297
    0000012a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp429:
    00000130: 	movzbl	-0x12(%rsp), %eax
    00000135: 	orb	-0x11(%rsp), %r12b
    0000013a: 	popq	%rbx
    0000013b: 	popq	%rbp
    0000013c: 	testb	%al, %al
    0000013e: 	movl	%eax, %r8d
    00000141: 	cmovel	%r12d, %r8d
    00000145: 	popq	%r12
    00000147: 	popq	%r13
    00000149: 	popq	%r14
    0000014b: 	popq	%r15
    0000014d: 	movl	%r8d, %eax
    00000150: 	retq # Offset: 336
    00000151: 	nopl	(%rax) # Size: 7
.Ltmp427:
    00000158: 	movzbl	-0x13(%rsp), %r12d
    0000015e: 	testb	%r15b, %r15b
    00000161: 	cmovnel	%r15d, %r12d
    00000165: 	jmp	.Ltmp426 # Offset: 357
    00000167: 	nopw	(%rax,%rax) # Size: 9
.Ltmp422:
    00000170: 	movb	%dl, -0x11(%rsp)
    00000174: 	movl	%edx, %r12d
    00000177: 	movl	%edx, %r13d
    0000017a: 	movl	%edx, %r15d
    0000017d: 	movb	%dl, -0x12(%rsp)
    00000181: 	movl	%edx, %r14d
    00000184: 	movl	%edx, %r8d
    00000187: 	xorl	%edi, %edi
    00000189: 	movb	%dl, -0x13(%rsp)
    0000018d: 	jmp	.Ltmp430 # Offset: 397
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or8IhEbPKT_ib"

Binary Function "_Z8bit_and1IaET_PKS0_iS0_" after disassembly {
  Number      : 83
  State       : disassembled
  Address     : 0x7f60
  Size        : 0x1c1
  MaxSize     : 0x1d0
  Offset      : 0x7f60
  Section     : .text
  Orc Section : .local.text._Z8bit_and1IaET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB082:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp431 # Offset: 6
    0000000c: 	leal	-0x1(%rsi), %eax
    0000000f: 	cmpl	$0xe, %eax
    00000012: 	jbe	.Ltmp432 # Offset: 18
    00000018: 	movl	%esi, %eax
    0000001a: 	movq	%rdi, %rcx
    0000001d: 	pcmpeqd	%xmm0, %xmm0
    00000021: 	shrl	$0x4, %eax
    00000024: 	subl	$0x1, %eax
    00000027: 	shlq	$0x4, %rax
    0000002b: 	leaq	0x10(%rdi,%rax), %r8
.Ltmp433:
    00000030: 	movdqu	(%rcx), %xmm2
    00000034: 	addq	$0x10, %rcx
    00000038: 	pand	%xmm2, %xmm0
    0000003c: 	cmpq	%rcx, %r8
    0000003f: 	jne	.Ltmp433 # Offset: 63
    00000041: 	movdqa	%xmm0, %xmm1
    00000045: 	movl	%esi, %eax
    00000047: 	psrldq	$0x8, %xmm1
    0000004c: 	andl	$-0x10, %eax
    0000004f: 	pand	%xmm1, %xmm0
    00000053: 	movl	%eax, %r8d
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	pand	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	pand	%xmm1, %xmm0
    00000070: 	movdqa	%xmm0, %xmm1
    00000074: 	psrldq	$0x1, %xmm1
    00000079: 	pand	%xmm1, %xmm0
    0000007d: 	movd	%xmm0, %ecx
    00000081: 	andl	%edx, %ecx
    00000083: 	cmpl	%eax, %esi
    00000085: 	je	.Ltmp434 # Offset: 133
.Ltmp437:
    0000008b: 	movl	%esi, %r9d
    0000008e: 	subl	%eax, %r9d
    00000091: 	leal	-0x1(%r9), %edx
    00000095: 	cmpl	$0x6, %edx
    00000098: 	jbe	.Ltmp435 # Offset: 152
    0000009e: 	movq	(%rdi,%rax), %rdx
    000000a2: 	pushq	%rbx
    000000a3: 	movl	%edx, %eax
    000000a5: 	movzbl	%dh, %ebx
    000000a8: 	andl	%ebx, %eax
    000000aa: 	andl	%ecx, %eax
    000000ac: 	movq	%rdx, %rcx
    000000af: 	shrq	$0x10, %rcx
    000000b3: 	andl	%ecx, %eax
    000000b5: 	movq	%rdx, %rcx
    000000b8: 	shrq	$0x18, %rcx
    000000bc: 	andl	%ecx, %eax
    000000be: 	movq	%rdx, %rcx
    000000c1: 	shrq	$0x20, %rcx
    000000c5: 	andl	%ecx, %eax
    000000c7: 	movq	%rdx, %rcx
    000000ca: 	shrq	$0x28, %rcx
    000000ce: 	andl	%ecx, %eax
    000000d0: 	movq	%rdx, %rcx
    000000d3: 	shrq	$0x38, %rdx
    000000d7: 	shrq	$0x30, %rcx
    000000db: 	andl	%ecx, %eax
    000000dd: 	andl	%edx, %eax
    000000df: 	movl	%r9d, %edx
    000000e2: 	andl	$-0x8, %edx
    000000e5: 	addl	%edx, %r8d
    000000e8: 	cmpl	%edx, %r9d
    000000eb: 	je	.Ltmp436 # Offset: 235
    000000ed: 	movslq	%r8d, %rdx
    000000f0: 	andb	(%rdi,%rdx), %al
    000000f3: 	leal	0x1(%r8), %edx
    000000f7: 	cmpl	%edx, %esi
    000000f9: 	jle	.Ltmp436 # Offset: 249
    000000fb: 	movslq	%edx, %rdx
    000000fe: 	andb	(%rdi,%rdx), %al
    00000101: 	leal	0x2(%r8), %edx
    00000105: 	cmpl	%esi, %edx
    00000107: 	jge	.Ltmp436 # Offset: 263
    00000109: 	movslq	%edx, %rdx
    0000010c: 	andb	(%rdi,%rdx), %al
    0000010f: 	leal	0x3(%r8), %edx
    00000113: 	cmpl	%edx, %esi
    00000115: 	jle	.Ltmp436 # Offset: 277
    00000117: 	movslq	%edx, %rdx
    0000011a: 	andb	(%rdi,%rdx), %al
    0000011d: 	leal	0x4(%r8), %edx
    00000121: 	cmpl	%edx, %esi
    00000123: 	jle	.Ltmp436 # Offset: 291
    00000125: 	movslq	%edx, %rdx
    00000128: 	andb	(%rdi,%rdx), %al
    0000012b: 	leal	0x5(%r8), %edx
    0000012f: 	cmpl	%edx, %esi
    00000131: 	jle	.Ltmp436 # Offset: 305
    00000133: 	movslq	%edx, %rdx
    00000136: 	addl	$0x6, %r8d
    0000013a: 	andb	(%rdi,%rdx), %al
    0000013d: 	cmpl	%r8d, %esi
    00000140: 	jle	.Ltmp436 # Offset: 320
    00000142: 	movslq	%r8d, %r8
    00000145: 	andb	(%rdi,%r8), %al
.Ltmp436:
    00000149: 	popq	%rbx
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp431:
    00000150: 	movl	%edx, %eax
    00000152: 	retq # Offset: 338
.Ltmp432:
    00000153: 	movl	%edx, %ecx
    00000155: 	xorl	%eax, %eax
    00000157: 	xorl	%r8d, %r8d
    0000015a: 	jmp	.Ltmp437 # Offset: 346
.Ltmp435:
    0000015f: 	movslq	%r8d, %rdx
    00000162: 	movl	%ecx, %eax
    00000164: 	andb	(%rdi,%rdx), %al
    00000167: 	leal	0x1(%r8), %edx
    0000016b: 	cmpl	%edx, %esi
    0000016d: 	jle	.Ltmp438 # Offset: 365
    0000016f: 	movslq	%edx, %rdx
    00000172: 	andb	(%rdi,%rdx), %al
    00000175: 	leal	0x2(%r8), %edx
    00000179: 	cmpl	%esi, %edx
    0000017b: 	jge	.Ltmp438 # Offset: 379
    0000017d: 	movslq	%edx, %rdx
    00000180: 	andb	(%rdi,%rdx), %al
    00000183: 	leal	0x3(%r8), %edx
    00000187: 	cmpl	%edx, %esi
    00000189: 	jle	.Ltmp438 # Offset: 393
    0000018b: 	movslq	%edx, %rdx
    0000018e: 	andb	(%rdi,%rdx), %al
    00000191: 	leal	0x4(%r8), %edx
    00000195: 	cmpl	%edx, %esi
    00000197: 	jle	.Ltmp438 # Offset: 407
    00000199: 	movslq	%edx, %rdx
    0000019c: 	andb	(%rdi,%rdx), %al
    0000019f: 	leal	0x5(%r8), %edx
    000001a3: 	cmpl	%edx, %esi
    000001a5: 	jle	.Ltmp438 # Offset: 421
    000001a7: 	movslq	%edx, %rdx
    000001aa: 	addl	$0x6, %r8d
    000001ae: 	andb	(%rdi,%rdx), %al
    000001b1: 	cmpl	%r8d, %esi
    000001b4: 	jle	.Ltmp438 # Offset: 436
    000001b6: 	movslq	%r8d, %r8
    000001b9: 	andb	(%rdi,%r8), %al
.Ltmp438:
    000001bd: 	retq # Offset: 445
.Ltmp434:
    000001be: 	movl	%ecx, %eax
    000001c0: 	retq # Offset: 448
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and1IaET_PKS0_iS0_"

Binary Function "_Z8bit_and2IaET_PKS0_iS0_" after disassembly {
  Number      : 84
  State       : disassembled
  Address     : 0x8130
  Size        : 0x1b7
  MaxSize     : 0x1c0
  Offset      : 0x8130
  Section     : .text
  Orc Section : .local.text._Z8bit_and2IaET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB083:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movq	%rdi, %r9
    0000000a: 	addq	%rsi, %rdi
    0000000d: 	cmpq	%rdi, %r9
    00000010: 	je	.Ltmp439 # Offset: 16
    00000016: 	leaq	-0x1(%rsi), %r8
    0000001a: 	movq	%r9, %rax
    0000001d: 	cmpq	$0xe, %r8
    00000021: 	jbe	.Ltmp440 # Offset: 33
    00000027: 	movq	%rsi, %rcx
    0000002a: 	pcmpeqd	%xmm0, %xmm0
    0000002e: 	andq	$-0x10, %rcx
    00000032: 	addq	%r9, %rcx
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp441:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	pand	%xmm2, %xmm0
    00000044: 	cmpq	%rcx, %rax
    00000047: 	jne	.Ltmp441 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movq	%rsi, %rax
    00000050: 	psrldq	$0x8, %xmm1
    00000055: 	andq	$-0x10, %rax
    00000059: 	pand	%xmm1, %xmm0
    0000005d: 	leaq	(%r9,%rax), %r8
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	psrldq	$0x4, %xmm1
    0000006a: 	pand	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x2, %xmm1
    00000077: 	pand	%xmm1, %xmm0
    0000007b: 	movdqa	%xmm0, %xmm1
    0000007f: 	psrldq	$0x1, %xmm1
    00000084: 	pand	%xmm1, %xmm0
    00000088: 	movd	%xmm0, %ecx
    0000008c: 	andl	%edx, %ecx
    0000008e: 	cmpq	%rax, %rsi
    00000091: 	je	.Ltmp442 # Offset: 145
.Ltmp445:
    00000097: 	subq	%rax, %rsi
    0000009a: 	leaq	-0x1(%rsi), %rdx
    0000009e: 	cmpq	$0x6, %rdx
    000000a2: 	jbe	.Ltmp443 # Offset: 162
    000000a8: 	movq	(%r9,%rax), %rdx
    000000ac: 	pushq	%rbx
    000000ad: 	movl	%edx, %eax
    000000af: 	movzbl	%dh, %ebx
    000000b2: 	andl	%ebx, %eax
    000000b4: 	andl	%ecx, %eax
    000000b6: 	movq	%rdx, %rcx
    000000b9: 	shrq	$0x10, %rcx
    000000bd: 	andl	%ecx, %eax
    000000bf: 	movq	%rdx, %rcx
    000000c2: 	shrq	$0x18, %rcx
    000000c6: 	andl	%ecx, %eax
    000000c8: 	movq	%rdx, %rcx
    000000cb: 	shrq	$0x20, %rcx
    000000cf: 	andl	%ecx, %eax
    000000d1: 	movq	%rdx, %rcx
    000000d4: 	shrq	$0x28, %rcx
    000000d8: 	andl	%ecx, %eax
    000000da: 	movq	%rdx, %rcx
    000000dd: 	shrq	$0x38, %rdx
    000000e1: 	shrq	$0x30, %rcx
    000000e5: 	andl	%ecx, %eax
    000000e7: 	andl	%edx, %eax
    000000e9: 	movq	%rsi, %rdx
    000000ec: 	andq	$-0x8, %rdx
    000000f0: 	addq	%rdx, %r8
    000000f3: 	cmpq	%rdx, %rsi
    000000f6: 	je	.Ltmp444 # Offset: 246
    000000f8: 	leaq	0x1(%r8), %rdx
    000000fc: 	andb	(%r8), %al
    000000ff: 	cmpq	%rdx, %rdi
    00000102: 	je	.Ltmp444 # Offset: 258
    00000104: 	leaq	0x2(%r8), %rdx
    00000108: 	andb	0x1(%r8), %al
    0000010c: 	cmpq	%rdx, %rdi
    0000010f: 	je	.Ltmp444 # Offset: 271
    00000111: 	leaq	0x3(%r8), %rdx
    00000115: 	andb	0x2(%r8), %al
    00000119: 	cmpq	%rdx, %rdi
    0000011c: 	je	.Ltmp444 # Offset: 284
    0000011e: 	leaq	0x4(%r8), %rdx
    00000122: 	andb	0x3(%r8), %al
    00000126: 	cmpq	%rdx, %rdi
    00000129: 	je	.Ltmp444 # Offset: 297
    0000012b: 	leaq	0x5(%r8), %rdx
    0000012f: 	andb	0x4(%r8), %al
    00000133: 	cmpq	%rdx, %rdi
    00000136: 	je	.Ltmp444 # Offset: 310
    00000138: 	leaq	0x6(%r8), %rdx
    0000013c: 	andb	0x5(%r8), %al
    00000140: 	cmpq	%rdx, %rdi
    00000143: 	je	.Ltmp444 # Offset: 323
    00000145: 	andb	0x6(%r8), %al
.Ltmp444:
    00000149: 	popq	%rbx
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp439:
    00000150: 	movl	%edx, %eax
    00000152: 	retq # Offset: 338
.Ltmp440:
    00000153: 	movl	%edx, %ecx
    00000155: 	movq	%r9, %r8
    00000158: 	xorl	%eax, %eax
    0000015a: 	jmp	.Ltmp445 # Offset: 346
.Ltmp443:
    0000015f: 	movzbl	(%r8), %eax
    00000163: 	leaq	0x1(%r8), %rdx
    00000167: 	andl	%ecx, %eax
    00000169: 	cmpq	%rdx, %rdi
    0000016c: 	je	.Ltmp446 # Offset: 364
    0000016e: 	leaq	0x2(%r8), %rdx
    00000172: 	andb	0x1(%r8), %al
    00000176: 	cmpq	%rdx, %rdi
    00000179: 	je	.Ltmp446 # Offset: 377
    0000017b: 	leaq	0x3(%r8), %rdx
    0000017f: 	andb	0x2(%r8), %al
    00000183: 	cmpq	%rdx, %rdi
    00000186: 	je	.Ltmp446 # Offset: 390
    00000188: 	leaq	0x4(%r8), %rdx
    0000018c: 	andb	0x3(%r8), %al
    00000190: 	cmpq	%rdx, %rdi
    00000193: 	je	.Ltmp446 # Offset: 403
    00000195: 	leaq	0x5(%r8), %rdx
    00000199: 	andb	0x4(%r8), %al
    0000019d: 	cmpq	%rdx, %rdi
    000001a0: 	je	.Ltmp446 # Offset: 416
    000001a2: 	leaq	0x6(%r8), %rdx
    000001a6: 	andb	0x5(%r8), %al
    000001aa: 	cmpq	%rdx, %rdi
    000001ad: 	je	.Ltmp446 # Offset: 429
    000001af: 	andb	0x6(%r8), %al
.Ltmp446:
    000001b3: 	retq # Offset: 435
.Ltmp442:
    000001b4: 	movl	%ecx, %eax
    000001b6: 	retq # Offset: 438
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and2IaET_PKS0_iS0_"

Binary Function "_Z8bit_and3IaET_PKS0_iS0_" after disassembly {
  Number      : 85
  State       : disassembled
  Address     : 0x82f0
  Size        : 0x2bb
  MaxSize     : 0x2c0
  Offset      : 0x82f0
  Section     : .text
  Orc Section : .local.text._Z8bit_and3IaET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB084:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	leal	-0x1(%rsi), %edi
    0000000a: 	movl	%esi, %r8d
    0000000d: 	movl	%edx, %eax
    0000000f: 	testl	%edi, %edi
    00000011: 	jle	.Ltmp447 # Offset: 17
    00000017: 	leal	-0x2(%rsi), %r9d
    0000001b: 	movl	%r9d, %esi
    0000001e: 	shrl	%esi
    00000020: 	addl	$0x1, %esi
    00000023: 	cmpl	$0x1d, %r9d
    00000027: 	jbe	.Ltmp448 # Offset: 39
    0000002d: 	movl	%esi, %r9d
    00000030: 	movdqa	DATAat0x33580(%rip), %xmm4
    00000038: 	movq	%rcx, %rax
    0000003b: 	pcmpeqd	%xmm2, %xmm2
    0000003f: 	shrl	$0x4, %r9d
    00000043: 	subl	$0x1, %r9d
    00000047: 	shlq	$0x5, %r9
    0000004b: 	leaq	0x20(%rcx,%r9), %r9
.Ltmp449:
    00000050: 	movdqu	(%rax), %xmm0
    00000054: 	movdqu	0x10(%rax), %xmm3
    00000059: 	addq	$0x20, %rax
    0000005d: 	pand	%xmm4, %xmm0
    00000061: 	pand	%xmm4, %xmm3
    00000065: 	movdqa	%xmm0, %xmm1
    00000069: 	movdqu	-0x20(%rax), %xmm0
    0000006e: 	packuswb	%xmm3, %xmm1
    00000072: 	movdqu	-0x10(%rax), %xmm3
    00000077: 	psrlw	$0x8, %xmm0
    0000007c: 	psrlw	$0x8, %xmm3
    00000081: 	packuswb	%xmm3, %xmm0
    00000085: 	pand	%xmm1, %xmm0
    00000089: 	pand	%xmm0, %xmm2
    0000008d: 	cmpq	%r9, %rax
    00000090: 	jne	.Ltmp449 # Offset: 144
    00000092: 	movdqa	%xmm2, %xmm0
    00000096: 	movl	%esi, %r9d
    00000099: 	psrldq	$0x8, %xmm0
    0000009e: 	andl	$-0x10, %r9d
    000000a2: 	pand	%xmm0, %xmm2
    000000a6: 	movdqa	%xmm2, %xmm0
    000000aa: 	psrldq	$0x4, %xmm0
    000000af: 	pand	%xmm0, %xmm2
    000000b3: 	movdqa	%xmm2, %xmm0
    000000b7: 	psrldq	$0x2, %xmm0
    000000bc: 	pand	%xmm0, %xmm2
    000000c0: 	movdqa	%xmm2, %xmm0
    000000c4: 	psrldq	$0x1, %xmm0
    000000c9: 	pand	%xmm0, %xmm2
    000000cd: 	movd	%xmm2, %eax
    000000d1: 	andl	%edx, %eax
    000000d3: 	leal	(%r9,%r9), %edx
    000000d7: 	cmpl	%r9d, %esi
    000000da: 	je	.Ltmp450 # Offset: 218
.Ltmp453:
    000000e0: 	movslq	%edx, %r9
    000000e3: 	andb	(%rcx,%r9), %al
    000000e7: 	andb	0x1(%rcx,%r9), %al
    000000ec: 	leal	0x2(%rdx), %r9d
    000000f0: 	cmpl	%edi, %r9d
    000000f3: 	jge	.Ltmp450 # Offset: 243
    000000f9: 	movslq	%r9d, %r9
    000000fc: 	movzbl	0x1(%rcx,%r9), %r10d
    00000102: 	andb	(%rcx,%r9), %r10b
    00000106: 	movl	%r10d, %r9d
    00000109: 	andl	%r9d, %eax
    0000010c: 	leal	0x4(%rdx), %r9d
    00000110: 	cmpl	%r9d, %edi
    00000113: 	jle	.Ltmp450 # Offset: 275
    00000119: 	movslq	%r9d, %r9
    0000011c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000122: 	andb	(%rcx,%r9), %r10b
    00000126: 	movl	%r10d, %r9d
    00000129: 	andl	%r9d, %eax
    0000012c: 	leal	0x6(%rdx), %r9d
    00000130: 	cmpl	%r9d, %edi
    00000133: 	jle	.Ltmp450 # Offset: 307
    00000139: 	movslq	%r9d, %r9
    0000013c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000142: 	andb	(%rcx,%r9), %r10b
    00000146: 	movl	%r10d, %r9d
    00000149: 	andl	%r9d, %eax
    0000014c: 	leal	0x8(%rdx), %r9d
    00000150: 	cmpl	%r9d, %edi
    00000153: 	jle	.Ltmp450 # Offset: 339
    00000159: 	movslq	%r9d, %r9
    0000015c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000162: 	andb	(%rcx,%r9), %r10b
    00000166: 	movl	%r10d, %r9d
    00000169: 	andl	%r9d, %eax
    0000016c: 	leal	0xa(%rdx), %r9d
    00000170: 	cmpl	%r9d, %edi
    00000173: 	jle	.Ltmp450 # Offset: 371
    00000179: 	movslq	%r9d, %r9
    0000017c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000182: 	andb	(%rcx,%r9), %r10b
    00000186: 	movl	%r10d, %r9d
    00000189: 	andl	%r9d, %eax
    0000018c: 	leal	0xc(%rdx), %r9d
    00000190: 	cmpl	%r9d, %edi
    00000193: 	jle	.Ltmp450 # Offset: 403
    00000199: 	movslq	%r9d, %r9
    0000019c: 	movzbl	0x1(%rcx,%r9), %r10d
    000001a2: 	andb	(%rcx,%r9), %r10b
    000001a6: 	movl	%r10d, %r9d
    000001a9: 	andl	%r9d, %eax
    000001ac: 	leal	0xe(%rdx), %r9d
    000001b0: 	cmpl	%r9d, %edi
    000001b3: 	jle	.Ltmp450 # Offset: 435
    000001b9: 	movslq	%r9d, %r9
    000001bc: 	movzbl	0x1(%rcx,%r9), %r10d
    000001c2: 	andb	(%rcx,%r9), %r10b
    000001c6: 	movl	%r10d, %r9d
    000001c9: 	andl	%r9d, %eax
    000001cc: 	leal	0x10(%rdx), %r9d
    000001d0: 	cmpl	%r9d, %edi
    000001d3: 	jle	.Ltmp450 # Offset: 467
    000001d9: 	movslq	%r9d, %r9
    000001dc: 	movzbl	0x1(%rcx,%r9), %r10d
    000001e2: 	andb	(%rcx,%r9), %r10b
    000001e6: 	movl	%r10d, %r9d
    000001e9: 	andl	%r9d, %eax
    000001ec: 	leal	0x12(%rdx), %r9d
    000001f0: 	cmpl	%r9d, %edi
    000001f3: 	jle	.Ltmp450 # Offset: 499
    000001f9: 	movslq	%r9d, %r9
    000001fc: 	movzbl	0x1(%rcx,%r9), %r10d
    00000202: 	andb	(%rcx,%r9), %r10b
    00000206: 	movl	%r10d, %r9d
    00000209: 	andl	%r9d, %eax
    0000020c: 	leal	0x14(%rdx), %r9d
    00000210: 	cmpl	%r9d, %edi
    00000213: 	jle	.Ltmp450 # Offset: 531
    00000219: 	movslq	%r9d, %r9
    0000021c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000222: 	andb	(%rcx,%r9), %r10b
    00000226: 	movl	%r10d, %r9d
    00000229: 	andl	%r9d, %eax
    0000022c: 	leal	0x16(%rdx), %r9d
    00000230: 	cmpl	%r9d, %edi
    00000233: 	jle	.Ltmp450 # Offset: 563
    00000235: 	movslq	%r9d, %r9
    00000238: 	movzbl	0x1(%rcx,%r9), %r10d
    0000023e: 	andb	(%rcx,%r9), %r10b
    00000242: 	movl	%r10d, %r9d
    00000245: 	andl	%r9d, %eax
    00000248: 	leal	0x18(%rdx), %r9d
    0000024c: 	cmpl	%r9d, %edi
    0000024f: 	jle	.Ltmp450 # Offset: 591
    00000251: 	movslq	%r9d, %r9
    00000254: 	movzbl	0x1(%rcx,%r9), %r10d
    0000025a: 	andb	(%rcx,%r9), %r10b
    0000025e: 	movl	%r10d, %r9d
    00000261: 	andl	%r9d, %eax
    00000264: 	leal	0x1a(%rdx), %r9d
    00000268: 	cmpl	%r9d, %edi
    0000026b: 	jle	.Ltmp450 # Offset: 619
    0000026d: 	movslq	%r9d, %r9
    00000270: 	addl	$0x1c, %edx
    00000273: 	movzbl	0x1(%rcx,%r9), %r10d
    00000279: 	andb	(%rcx,%r9), %r10b
    0000027d: 	movl	%r10d, %r9d
    00000280: 	andl	%r9d, %eax
    00000283: 	cmpl	%edx, %edi
    00000285: 	jle	.Ltmp450 # Offset: 645
    00000287: 	movslq	%edx, %rdx
    0000028a: 	movzbl	0x1(%rcx,%rdx), %edi
    0000028f: 	andb	(%rcx,%rdx), %dil
    00000293: 	movl	%edi, %edx
    00000295: 	andl	%edx, %eax
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp450:
    000002a0: 	addl	%esi, %esi
.Ltmp452:
    000002a2: 	cmpl	%r8d, %esi
    000002a5: 	jge	.Ltmp451 # Offset: 677
    000002a7: 	movslq	%esi, %rsi
    000002aa: 	andb	(%rcx,%rsi), %al
.Ltmp451:
    000002ad: 	retq # Offset: 685
    000002ae: 	nop # Size: 2
.Ltmp447:
    000002b0: 	xorl	%esi, %esi
    000002b2: 	jmp	.Ltmp452 # Offset: 690
.Ltmp448:
    000002b4: 	xorl	%edx, %edx
    000002b6: 	jmp	.Ltmp453 # Offset: 694
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and3IaET_PKS0_iS0_"

Binary Function "_Z8bit_and4IaET_PKS0_iS0_" after disassembly {
  Number      : 86
  State       : disassembled
  Address     : 0x85b0
  Size        : 0x41b
  MaxSize     : 0x420
  Offset      : 0x85b0
  Section     : .text
  Orc Section : .local.text._Z8bit_and4IaET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB085:
    00000000: 	endbr64
    00000004: 	leal	-0x3(%rsi), %r8d
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%edx, %eax
    0000000d: 	movl	%esi, %edi
    0000000f: 	testl	%r8d, %r8d
    00000012: 	jle	.Ltmp454 # Offset: 18
    00000018: 	leal	-0x4(%rsi), %r9d
    0000001c: 	movl	%r9d, %esi
    0000001f: 	shrl	$0x2, %esi
    00000022: 	addl	$0x1, %esi
    00000025: 	cmpl	$0x3b, %r9d
    00000029: 	jbe	.Ltmp455 # Offset: 41
    0000002f: 	movl	%esi, %r9d
    00000032: 	movdqa	DATAat0x33580(%rip), %xmm5
    0000003a: 	movq	%rcx, %rax
    0000003d: 	pcmpeqd	%xmm2, %xmm2
    00000041: 	shrl	$0x4, %r9d
    00000045: 	subl	$0x1, %r9d
    00000049: 	shlq	$0x6, %r9
    0000004d: 	leaq	0x40(%rcx,%r9), %r9
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp456:
    00000058: 	movdqu	(%rax), %xmm1
    0000005c: 	movdqu	0x10(%rax), %xmm0
    00000061: 	movdqa	%xmm5, %xmm7
    00000065: 	addq	$0x40, %rax
    00000069: 	movdqu	-0x20(%rax), %xmm6
    0000006e: 	movdqu	-0x10(%rax), %xmm3
    00000073: 	pand	%xmm5, %xmm1
    00000077: 	pand	%xmm5, %xmm0
    0000007b: 	movdqa	%xmm1, %xmm4
    0000007f: 	movdqu	-0x30(%rax), %xmm1
    00000084: 	pand	%xmm5, %xmm6
    00000088: 	packuswb	%xmm0, %xmm4
    0000008c: 	movdqu	-0x40(%rax), %xmm0
    00000091: 	psrlw	$0x8, %xmm3
    00000096: 	psrlw	$0x8, %xmm1
    0000009b: 	psrlw	$0x8, %xmm0
    000000a0: 	packuswb	%xmm1, %xmm0
    000000a4: 	movdqu	-0x10(%rax), %xmm1
    000000a9: 	pand	%xmm5, %xmm1
    000000ad: 	packuswb	%xmm1, %xmm6
    000000b1: 	movdqu	-0x20(%rax), %xmm1
    000000b6: 	psrlw	$0x8, %xmm1
    000000bb: 	packuswb	%xmm3, %xmm1
    000000bf: 	movdqa	%xmm5, %xmm3
    000000c3: 	pand	%xmm1, %xmm7
    000000c7: 	psrlw	$0x8, %xmm1
    000000cc: 	pand	%xmm0, %xmm3
    000000d0: 	psrlw	$0x8, %xmm0
    000000d5: 	packuswb	%xmm7, %xmm3
    000000d9: 	movdqa	%xmm5, %xmm7
    000000dd: 	packuswb	%xmm1, %xmm0
    000000e1: 	movdqa	%xmm5, %xmm1
    000000e5: 	pand	%xmm6, %xmm7
    000000e9: 	pand	%xmm4, %xmm1
    000000ed: 	psrlw	$0x8, %xmm6
    000000f2: 	pand	%xmm3, %xmm0
    000000f6: 	movdqa	%xmm1, %xmm3
    000000fa: 	movdqa	%xmm4, %xmm1
    000000fe: 	psrlw	$0x8, %xmm1
    00000103: 	packuswb	%xmm7, %xmm3
    00000107: 	packuswb	%xmm6, %xmm1
    0000010b: 	pand	%xmm3, %xmm1
    0000010f: 	pand	%xmm1, %xmm0
    00000113: 	pand	%xmm0, %xmm2
    00000117: 	cmpq	%r9, %rax
    0000011a: 	jne	.Ltmp456 # Offset: 282
    00000120: 	movdqa	%xmm2, %xmm0
    00000124: 	movl	%esi, %r9d
    00000127: 	psrldq	$0x8, %xmm0
    0000012c: 	andl	$-0x10, %r9d
    00000130: 	pand	%xmm0, %xmm2
    00000134: 	movdqa	%xmm2, %xmm0
    00000138: 	psrldq	$0x4, %xmm0
    0000013d: 	pand	%xmm0, %xmm2
    00000141: 	movdqa	%xmm2, %xmm0
    00000145: 	psrldq	$0x2, %xmm0
    0000014a: 	pand	%xmm0, %xmm2
    0000014e: 	movdqa	%xmm2, %xmm0
    00000152: 	psrldq	$0x1, %xmm0
    00000157: 	pand	%xmm0, %xmm2
    0000015b: 	movd	%xmm2, %eax
    0000015f: 	andl	%edx, %eax
    00000161: 	leal	(,%r9,4), %edx
    00000169: 	cmpl	%esi, %r9d
    0000016c: 	je	.Ltmp457 # Offset: 364
.Ltmp460:
    00000172: 	movslq	%edx, %r9
    00000175: 	andb	(%rcx,%r9), %al
    00000179: 	andb	0x1(%rcx,%r9), %al
    0000017e: 	andb	0x2(%rcx,%r9), %al
    00000183: 	andb	0x3(%rcx,%r9), %al
    00000188: 	leal	0x4(%rdx), %r9d
    0000018c: 	cmpl	%r9d, %r8d
    0000018f: 	jle	.Ltmp457 # Offset: 399
    00000195: 	movslq	%r9d, %r9
    00000198: 	movzbl	0x1(%rcx,%r9), %r10d
    0000019e: 	andb	0x2(%rcx,%r9), %r10b
    000001a3: 	andb	(%rcx,%r9), %r10b
    000001a7: 	andb	0x3(%rcx,%r9), %r10b
    000001ac: 	movl	%r10d, %r9d
    000001af: 	andl	%r9d, %eax
    000001b2: 	leal	0x8(%rdx), %r9d
    000001b6: 	cmpl	%r9d, %r8d
    000001b9: 	jle	.Ltmp457 # Offset: 441
    000001bf: 	movslq	%r9d, %r9
    000001c2: 	movzbl	0x1(%rcx,%r9), %r10d
    000001c8: 	andb	0x2(%rcx,%r9), %r10b
    000001cd: 	andb	(%rcx,%r9), %r10b
    000001d1: 	andb	0x3(%rcx,%r9), %r10b
    000001d6: 	movl	%r10d, %r9d
    000001d9: 	andl	%r9d, %eax
    000001dc: 	leal	0xc(%rdx), %r9d
    000001e0: 	cmpl	%r9d, %r8d
    000001e3: 	jle	.Ltmp457 # Offset: 483
    000001e9: 	movslq	%r9d, %r9
    000001ec: 	movzbl	0x1(%rcx,%r9), %r10d
    000001f2: 	andb	0x2(%rcx,%r9), %r10b
    000001f7: 	andb	(%rcx,%r9), %r10b
    000001fb: 	andb	0x3(%rcx,%r9), %r10b
    00000200: 	movl	%r10d, %r9d
    00000203: 	andl	%r9d, %eax
    00000206: 	leal	0x10(%rdx), %r9d
    0000020a: 	cmpl	%r9d, %r8d
    0000020d: 	jle	.Ltmp457 # Offset: 525
    00000213: 	movslq	%r9d, %r9
    00000216: 	movzbl	0x1(%rcx,%r9), %r10d
    0000021c: 	andb	0x2(%rcx,%r9), %r10b
    00000221: 	andb	(%rcx,%r9), %r10b
    00000225: 	andb	0x3(%rcx,%r9), %r10b
    0000022a: 	movl	%r10d, %r9d
    0000022d: 	andl	%r9d, %eax
    00000230: 	leal	0x14(%rdx), %r9d
    00000234: 	cmpl	%r9d, %r8d
    00000237: 	jle	.Ltmp457 # Offset: 567
    0000023d: 	movslq	%r9d, %r9
    00000240: 	movzbl	0x1(%rcx,%r9), %r10d
    00000246: 	andb	0x2(%rcx,%r9), %r10b
    0000024b: 	andb	(%rcx,%r9), %r10b
    0000024f: 	andb	0x3(%rcx,%r9), %r10b
    00000254: 	movl	%r10d, %r9d
    00000257: 	andl	%r9d, %eax
    0000025a: 	leal	0x18(%rdx), %r9d
    0000025e: 	cmpl	%r9d, %r8d
    00000261: 	jle	.Ltmp457 # Offset: 609
    00000267: 	movslq	%r9d, %r9
    0000026a: 	movzbl	0x1(%rcx,%r9), %r10d
    00000270: 	andb	0x2(%rcx,%r9), %r10b
    00000275: 	andb	(%rcx,%r9), %r10b
    00000279: 	andb	0x3(%rcx,%r9), %r10b
    0000027e: 	movl	%r10d, %r9d
    00000281: 	andl	%r9d, %eax
    00000284: 	leal	0x1c(%rdx), %r9d
    00000288: 	cmpl	%r9d, %r8d
    0000028b: 	jle	.Ltmp457 # Offset: 651
    00000291: 	movslq	%r9d, %r9
    00000294: 	movzbl	0x1(%rcx,%r9), %r10d
    0000029a: 	andb	0x2(%rcx,%r9), %r10b
    0000029f: 	andb	(%rcx,%r9), %r10b
    000002a3: 	andb	0x3(%rcx,%r9), %r10b
    000002a8: 	movl	%r10d, %r9d
    000002ab: 	andl	%r9d, %eax
    000002ae: 	leal	0x20(%rdx), %r9d
    000002b2: 	cmpl	%r9d, %r8d
    000002b5: 	jle	.Ltmp457 # Offset: 693
    000002bb: 	movslq	%r9d, %r9
    000002be: 	movzbl	0x1(%rcx,%r9), %r10d
    000002c4: 	andb	0x2(%rcx,%r9), %r10b
    000002c9: 	andb	(%rcx,%r9), %r10b
    000002cd: 	andb	0x3(%rcx,%r9), %r10b
    000002d2: 	movl	%r10d, %r9d
    000002d5: 	andl	%r9d, %eax
    000002d8: 	leal	0x24(%rdx), %r9d
    000002dc: 	cmpl	%r9d, %r8d
    000002df: 	jle	.Ltmp457 # Offset: 735
    000002e5: 	movslq	%r9d, %r9
    000002e8: 	movzbl	0x1(%rcx,%r9), %r10d
    000002ee: 	andb	0x2(%rcx,%r9), %r10b
    000002f3: 	andb	(%rcx,%r9), %r10b
    000002f7: 	andb	0x3(%rcx,%r9), %r10b
    000002fc: 	movl	%r10d, %r9d
    000002ff: 	andl	%r9d, %eax
    00000302: 	leal	0x28(%rdx), %r9d
    00000306: 	cmpl	%r9d, %r8d
    00000309: 	jle	.Ltmp457 # Offset: 777
    0000030f: 	movslq	%r9d, %r9
    00000312: 	movzbl	0x1(%rcx,%r9), %r10d
    00000318: 	andb	0x2(%rcx,%r9), %r10b
    0000031d: 	andb	(%rcx,%r9), %r10b
    00000321: 	andb	0x3(%rcx,%r9), %r10b
    00000326: 	movl	%r10d, %r9d
    00000329: 	andl	%r9d, %eax
    0000032c: 	leal	0x2c(%rdx), %r9d
    00000330: 	cmpl	%r9d, %r8d
    00000333: 	jle	.Ltmp457 # Offset: 819
    00000339: 	movslq	%r9d, %r9
    0000033c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000342: 	andb	0x2(%rcx,%r9), %r10b
    00000347: 	andb	(%rcx,%r9), %r10b
    0000034b: 	andb	0x3(%rcx,%r9), %r10b
    00000350: 	movl	%r10d, %r9d
    00000353: 	andl	%r9d, %eax
    00000356: 	leal	0x30(%rdx), %r9d
    0000035a: 	cmpl	%r9d, %r8d
    0000035d: 	jle	.Ltmp457 # Offset: 861
    0000035f: 	movslq	%r9d, %r9
    00000362: 	movzbl	0x1(%rcx,%r9), %r10d
    00000368: 	andb	0x2(%rcx,%r9), %r10b
    0000036d: 	andb	(%rcx,%r9), %r10b
    00000371: 	andb	0x3(%rcx,%r9), %r10b
    00000376: 	movl	%r10d, %r9d
    00000379: 	andl	%r9d, %eax
    0000037c: 	leal	0x34(%rdx), %r9d
    00000380: 	cmpl	%r9d, %r8d
    00000383: 	jle	.Ltmp457 # Offset: 899
    00000385: 	movslq	%r9d, %r9
    00000388: 	addl	$0x38, %edx
    0000038b: 	movzbl	0x1(%rcx,%r9), %r10d
    00000391: 	andb	0x2(%rcx,%r9), %r10b
    00000396: 	andb	(%rcx,%r9), %r10b
    0000039a: 	andb	0x3(%rcx,%r9), %r10b
    0000039f: 	movl	%r10d, %r9d
    000003a2: 	andl	%r9d, %eax
    000003a5: 	cmpl	%edx, %r8d
    000003a8: 	jle	.Ltmp457 # Offset: 936
    000003aa: 	movslq	%edx, %rdx
    000003ad: 	movzbl	0x2(%rcx,%rdx), %r8d
    000003b3: 	andb	0x1(%rcx,%rdx), %r8b
    000003b8: 	andb	(%rcx,%rdx), %r8b
    000003bc: 	andb	0x3(%rcx,%rdx), %r8b
    000003c1: 	movl	%r8d, %edx
    000003c4: 	andl	%edx, %eax
    000003c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp457:
    000003d0: 	leal	(,%rsi,4), %edx
.Ltmp459:
    000003d7: 	cmpl	%edx, %edi
    000003d9: 	jle	.Ltmp458 # Offset: 985
    000003db: 	movslq	%edx, %rsi
    000003de: 	andb	(%rcx,%rsi), %al
    000003e1: 	leal	0x1(%rdx), %esi
    000003e4: 	cmpl	%edi, %esi
    000003e6: 	jge	.Ltmp458 # Offset: 998
    000003e8: 	movslq	%esi, %rsi
    000003eb: 	andb	(%rcx,%rsi), %al
    000003ee: 	leal	0x2(%rdx), %esi
    000003f1: 	cmpl	%edi, %esi
    000003f3: 	jge	.Ltmp458 # Offset: 1011
    000003f5: 	movslq	%esi, %rsi
    000003f8: 	addl	$0x3, %edx
    000003fb: 	andb	(%rcx,%rsi), %al
    000003fe: 	cmpl	%edx, %edi
    00000400: 	jle	.Ltmp458 # Offset: 1024
    00000402: 	movslq	%edx, %rdx
    00000405: 	andb	(%rcx,%rdx), %al
.Ltmp458:
    00000408: 	retq # Offset: 1032
    00000409: 	nopl	(%rax) # Size: 7
.Ltmp454:
    00000410: 	xorl	%edx, %edx
    00000412: 	jmp	.Ltmp459 # Offset: 1042
.Ltmp455:
    00000414: 	xorl	%edx, %edx
    00000416: 	jmp	.Ltmp460 # Offset: 1046
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and4IaET_PKS0_iS0_"

Binary Function "_Z8bit_and5IaET_PKS0_iS0_" after disassembly {
  Number      : 87
  State       : disassembled
  Address     : 0x89d0
  Size        : 0x3cc
  MaxSize     : 0x3d0
  Offset      : 0x89d0
  Section     : .text
  Orc Section : .local.text._Z8bit_and5IaET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB086:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	leal	-0x1(%rsi), %r8d
    00000009: 	movl	%edx, %eax
    0000000b: 	pushq	%rbx
    0000000c: 	subq	$0x110, %rsp
    00000013: 	testl	%r8d, %r8d
    00000016: 	jle	.Ltmp461 # Offset: 22
    0000001c: 	leal	-0x2(%rsi), %r9d
    00000020: 	movl	%r9d, %ecx
    00000023: 	shrl	%ecx
    00000025: 	leal	0x1(%rcx), %r10d
    00000029: 	cmpl	$0xd, %r9d
    0000002d: 	jbe	.Ltmp462 # Offset: 45
    00000033: 	movq	$-0x1, -0x70(%rsp)
    0000003c: 	movzbl	%dl, %edx
    0000003f: 	movq	%rdx, %rax
    00000042: 	shlq	$0x8, %rax
    00000046: 	orq	$-0x10000, %rax
    0000004c: 	orq	%rdx, %rax
    0000004f: 	movl	%r10d, %edx
    00000052: 	shrl	$0x3, %edx
    00000055: 	movq	%rax, -0x78(%rsp)
    0000005a: 	movdqa	-0x78(%rsp), %xmm0
    00000060: 	movq	%rdi, %rax
    00000063: 	subl	$0x1, %edx
    00000066: 	shlq	$0x4, %rdx
    0000006a: 	leaq	0x10(%rdi,%rdx), %rdx
    0000006f: 	nop # Size: 1
.Ltmp463:
    00000070: 	movdqu	(%rax), %xmm2
    00000074: 	addq	$0x10, %rax
    00000078: 	pand	%xmm2, %xmm0
    0000007c: 	cmpq	%rax, %rdx
    0000007f: 	jne	.Ltmp463 # Offset: 127
    00000081: 	movl	%r10d, %ebx
    00000084: 	movd	%xmm0, %eax
    00000088: 	movaps	%xmm0, 0xf8(%rsp)
    00000090: 	andb	0xfa(%rsp), %al
    00000097: 	andl	$-0x8, %ebx
    0000009a: 	movaps	%xmm0, 0xe8(%rsp)
    000000a2: 	andb	0xec(%rsp), %al
    000000a9: 	movaps	%xmm0, 0xd8(%rsp)
    000000b1: 	leal	(%rbx,%rbx), %r9d
    000000b5: 	andb	0xde(%rsp), %al
    000000bc: 	movaps	%xmm0, 0xc8(%rsp)
    000000c4: 	andb	0xd0(%rsp), %al
    000000cb: 	movaps	%xmm0, 0xb8(%rsp)
    000000d3: 	andb	0xc2(%rsp), %al
    000000da: 	movaps	%xmm0, 0xa8(%rsp)
    000000e2: 	andb	0xb4(%rsp), %al
    000000e9: 	movaps	%xmm0, 0x98(%rsp)
    000000f1: 	andb	0xa6(%rsp), %al
    000000f8: 	movaps	%xmm0, 0x88(%rsp)
    00000100: 	movaps	%xmm0, 0x78(%rsp)
    00000105: 	movzbl	0x7b(%rsp), %edx
    0000010a: 	andb	0x89(%rsp), %dl
    00000111: 	movaps	%xmm0, 0x68(%rsp)
    00000116: 	andb	0x6d(%rsp), %dl
    0000011a: 	movaps	%xmm0, 0x58(%rsp)
    0000011f: 	andb	0x5f(%rsp), %dl
    00000123: 	movaps	%xmm0, 0x48(%rsp)
    00000128: 	andb	0x51(%rsp), %dl
    0000012c: 	movaps	%xmm0, 0x38(%rsp)
    00000131: 	andb	0x43(%rsp), %dl
    00000135: 	movaps	%xmm0, 0x28(%rsp)
    0000013a: 	andb	0x35(%rsp), %dl
    0000013e: 	movaps	%xmm0, 0x18(%rsp)
    00000143: 	andb	0x27(%rsp), %dl
    00000147: 	cmpl	%ebx, %r10d
    0000014a: 	je	.Ltmp464 # Offset: 330
.Ltmp472:
    00000150: 	subl	%ebx, %ecx
    00000152: 	leal	0x1(%rcx), %r11d
    00000156: 	cmpl	$0x2, %ecx
    00000159: 	jbe	.Ltmp465 # Offset: 345
    0000015f: 	movzbl	%dl, %edx
    00000162: 	movzbl	%al, %eax
    00000165: 	movq	(%rdi,%rbx,2), %xmm0
    0000016a: 	shlq	$0x8, %rdx
    0000016e: 	orq	$-0x10000, %rdx
    00000175: 	orq	%rax, %rdx
    00000178: 	movq	%rdx, %xmm3
    0000017d: 	pand	%xmm0, %xmm3
    00000181: 	movq	%xmm3, %rcx
    00000186: 	movq	%xmm3, %rdx
    0000018b: 	movq	%xmm3, %rbx
    00000190: 	movq	%xmm3, 0x10(%rsp)
    00000196: 	shrq	$0x10, %rdx
    0000019a: 	movl	%ecx, %eax
    0000019c: 	shrq	$0x18, %rbx
    000001a0: 	movq	%xmm3, (%rsp)
    000001a5: 	andl	%edx, %eax
    000001a7: 	movq	%xmm3, %rdx
    000001ac: 	movq	%xmm3, 0x8(%rsp)
    000001b2: 	shrq	$0x20, %rdx
    000001b6: 	movq	%xmm3, -0x8(%rsp)
    000001bc: 	andl	%edx, %eax
    000001be: 	movq	%xmm3, %rdx
    000001c3: 	movq	%xmm3, -0x10(%rsp)
    000001c9: 	shrq	$0x30, %rdx
    000001cd: 	movq	%xmm3, -0x18(%rsp)
    000001d3: 	andl	%edx, %eax
    000001d5: 	movzbl	%ch, %edx
    000001d8: 	movl	%r11d, %ecx
    000001db: 	movq	%xmm3, -0x20(%rsp)
    000001e1: 	andl	%ebx, %edx
    000001e3: 	movq	%xmm3, %rbx
    000001e8: 	andl	$-0x4, %ecx
    000001eb: 	movq	%xmm3, -0x28(%rsp)
    000001f1: 	shrq	$0x28, %rbx
    000001f5: 	leal	(%r9,%rcx,2), %r9d
    000001f9: 	andl	%ebx, %edx
    000001fb: 	movq	%xmm3, %rbx
    00000200: 	shrq	$0x38, %rbx
    00000204: 	andl	%ebx, %edx
    00000206: 	cmpl	%ecx, %r11d
    00000209: 	je	.Ltmp464 # Offset: 521
.Ltmp465:
    0000020b: 	movslq	%r9d, %rcx
    0000020e: 	andb	(%rdi,%rcx), %al
    00000211: 	andb	0x1(%rdi,%rcx), %dl
    00000215: 	leal	0x2(%r9), %ecx
    00000219: 	cmpl	%ecx, %r8d
    0000021c: 	jle	.Ltmp464 # Offset: 540
    0000021e: 	movslq	%ecx, %rcx
    00000221: 	addl	$0x4, %r9d
    00000225: 	andb	(%rdi,%rcx), %al
    00000228: 	andb	0x1(%rdi,%rcx), %dl
    0000022c: 	cmpl	%r9d, %r8d
    0000022f: 	jle	.Ltmp464 # Offset: 559
    00000231: 	movslq	%r9d, %r9
    00000234: 	andb	(%rdi,%r9), %al
    00000238: 	andb	0x1(%rdi,%r9), %dl
.Ltmp464:
    0000023d: 	addl	%r10d, %r10d
.Ltmp471:
    00000240: 	cmpl	%r10d, %esi
    00000243: 	jle	.Ltmp466 # Offset: 579
    00000249: 	movl	%esi, %r9d
    0000024c: 	subl	%r10d, %r9d
    0000024f: 	leal	-0x1(%r9), %ecx
    00000253: 	cmpl	$0xe, %ecx
    00000256: 	jbe	.Ltmp467 # Offset: 598
    0000025c: 	movl	%r9d, %ecx
    0000025f: 	movslq	%r10d, %r8
    00000262: 	pcmpeqd	%xmm0, %xmm0
    00000266: 	shrl	$0x4, %ecx
    00000269: 	addq	%rdi, %r8
    0000026c: 	leal	-0x1(%rcx), %r11d
    00000270: 	leaq	0x10(%r8), %rcx
    00000274: 	shlq	$0x4, %r11
    00000278: 	addq	%rcx, %r11
    0000027b: 	jmp	.Ltmp468 # Offset: 635
    0000027d: 	nopl	(%rax) # Size: 3
.Ltmp469:
    00000280: 	addq	$0x10, %rcx
.Ltmp468:
    00000284: 	movdqu	(%r8), %xmm1
    00000289: 	movq	%rcx, %r8
    0000028c: 	pand	%xmm1, %xmm0
    00000290: 	cmpq	%r11, %rcx
    00000293: 	jne	.Ltmp469 # Offset: 659
    00000295: 	movdqa	%xmm0, %xmm1
    00000299: 	psrldq	$0x8, %xmm1
    0000029e: 	pand	%xmm1, %xmm0
    000002a2: 	movdqa	%xmm0, %xmm1
    000002a6: 	psrldq	$0x4, %xmm1
    000002ab: 	pand	%xmm1, %xmm0
    000002af: 	movdqa	%xmm0, %xmm1
    000002b3: 	psrldq	$0x2, %xmm1
    000002b8: 	pand	%xmm1, %xmm0
    000002bc: 	movdqa	%xmm0, %xmm1
    000002c0: 	psrldq	$0x1, %xmm1
    000002c5: 	pand	%xmm1, %xmm0
    000002c9: 	movd	%xmm0, %ecx
    000002cd: 	andl	%ecx, %eax
    000002cf: 	movl	%r9d, %ecx
    000002d2: 	andl	$-0x10, %ecx
    000002d5: 	leal	(%rcx,%r10), %r8d
    000002d9: 	cmpl	%r9d, %ecx
    000002dc: 	je	.Ltmp466 # Offset: 732
.Ltmp473:
    000002e2: 	subl	%ecx, %r9d
    000002e5: 	leal	-0x1(%r9), %r11d
    000002e9: 	cmpl	$0x6, %r11d
    000002ed: 	jbe	.Ltmp470 # Offset: 749
    000002ef: 	movslq	%r10d, %r10
    000002f2: 	addq	%rdi, %r10
    000002f5: 	movq	(%r10,%rcx), %rbx
    000002f9: 	movl	%ebx, %ecx
    000002fb: 	movzbl	%bh, %ebp
    000002fe: 	andl	%ebp, %ecx
    00000300: 	andl	%ecx, %eax
    00000302: 	movq	%rbx, %rcx
    00000305: 	shrq	$0x10, %rcx
    00000309: 	andl	%ecx, %eax
    0000030b: 	movq	%rbx, %rcx
    0000030e: 	shrq	$0x18, %rcx
    00000312: 	andl	%ecx, %eax
    00000314: 	movq	%rbx, %rcx
    00000317: 	shrq	$0x20, %rcx
    0000031b: 	andl	%ecx, %eax
    0000031d: 	movq	%rbx, %rcx
    00000320: 	shrq	$0x28, %rcx
    00000324: 	andl	%ecx, %eax
    00000326: 	movq	%rbx, %rcx
    00000329: 	shrq	$0x38, %rbx
    0000032d: 	shrq	$0x30, %rcx
    00000331: 	andl	%ecx, %eax
    00000333: 	movl	%r9d, %ecx
    00000336: 	andl	$-0x8, %ecx
    00000339: 	andl	%ebx, %eax
    0000033b: 	addl	%ecx, %r8d
    0000033e: 	cmpl	%ecx, %r9d
    00000341: 	je	.Ltmp466 # Offset: 833
.Ltmp470:
    00000343: 	movslq	%r8d, %rcx
    00000346: 	andb	(%rdi,%rcx), %al
    00000349: 	leal	0x1(%r8), %ecx
    0000034d: 	cmpl	%ecx, %esi
    0000034f: 	jle	.Ltmp466 # Offset: 847
    00000351: 	movslq	%ecx, %rcx
    00000354: 	andb	(%rdi,%rcx), %al
    00000357: 	leal	0x2(%r8), %ecx
    0000035b: 	cmpl	%ecx, %esi
    0000035d: 	jle	.Ltmp466 # Offset: 861
    0000035f: 	movslq	%ecx, %rcx
    00000362: 	andb	(%rdi,%rcx), %al
    00000365: 	leal	0x3(%r8), %ecx
    00000369: 	cmpl	%ecx, %esi
    0000036b: 	jle	.Ltmp466 # Offset: 875
    0000036d: 	movslq	%ecx, %rcx
    00000370: 	andb	(%rdi,%rcx), %al
    00000373: 	leal	0x4(%r8), %ecx
    00000377: 	cmpl	%ecx, %esi
    00000379: 	jle	.Ltmp466 # Offset: 889
    0000037b: 	movslq	%ecx, %rcx
    0000037e: 	andb	(%rdi,%rcx), %al
    00000381: 	leal	0x5(%r8), %ecx
    00000385: 	cmpl	%ecx, %esi
    00000387: 	jle	.Ltmp466 # Offset: 903
    00000389: 	movslq	%ecx, %rcx
    0000038c: 	addl	$0x6, %r8d
    00000390: 	andb	(%rdi,%rcx), %al
    00000393: 	cmpl	%r8d, %esi
    00000396: 	jle	.Ltmp466 # Offset: 918
    00000398: 	movslq	%r8d, %r8
    0000039b: 	andb	(%rdi,%r8), %al
.Ltmp466:
    0000039f: 	addq	$0x110, %rsp
    000003a6: 	andl	%edx, %eax
    000003a8: 	popq	%rbx
    000003a9: 	popq	%rbp
    000003aa: 	retq # Offset: 938
    000003ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp461:
    000003b0: 	xorl	%r10d, %r10d
    000003b3: 	jmp	.Ltmp471 # Offset: 947
.Ltmp462:
    000003b8: 	xorl	%ebx, %ebx
    000003ba: 	xorl	%r9d, %r9d
    000003bd: 	jmp	.Ltmp472 # Offset: 957
.Ltmp467:
    000003c2: 	movl	%r10d, %r8d
    000003c5: 	xorl	%ecx, %ecx
    000003c7: 	jmp	.Ltmp473 # Offset: 967
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and5IaET_PKS0_iS0_"

Binary Function "_Z8bit_and6IaET_PKS0_iS0_" after disassembly {
  Number      : 88
  State       : disassembled
  Address     : 0x8da0
  Size        : 0x3f9
  MaxSize     : 0x400
  Offset      : 0x8da0
  Section     : .text
  Orc Section : .local.text._Z8bit_and6IaET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB087:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movl	%edx, %eax
    00000007: 	pushq	%rbx
    00000008: 	subq	$0x110, %rsp
    0000000f: 	cmpl	$0x3, %esi
    00000012: 	jle	.Ltmp474 # Offset: 18
    00000018: 	leal	-0x4(%rsi), %ecx
    0000001b: 	movl	%ecx, %ebx
    0000001d: 	shrl	$0x2, %ebx
    00000020: 	leal	0x1(%rbx), %r10d
    00000024: 	cmpl	$0xb, %ecx
    00000027: 	jbe	.Ltmp475 # Offset: 39
    0000002d: 	movabsq	$0xffffffff00, %rax
    00000037: 	movzbl	%dl, %edx
    0000003a: 	movq	$-0x1, -0x70(%rsp)
    00000043: 	orq	%rdx, %rax
    00000046: 	shlq	$0x8, %rax
    0000004a: 	orq	%rdx, %rax
    0000004d: 	shlq	$0x8, %rax
    00000051: 	orq	%rdx, %rax
    00000054: 	shlq	$0x8, %rax
    00000058: 	orq	%rdx, %rax
    0000005b: 	movl	%r10d, %edx
    0000005e: 	shrl	$0x2, %edx
    00000061: 	movq	%rax, -0x78(%rsp)
    00000066: 	movdqa	-0x78(%rsp), %xmm0
    0000006c: 	movq	%rdi, %rax
    0000006f: 	subl	$0x1, %edx
    00000072: 	shlq	$0x4, %rdx
    00000076: 	leaq	0x10(%rdi,%rdx), %rdx
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp476:
    00000080: 	movdqu	(%rax), %xmm2
    00000084: 	addq	$0x10, %rax
    00000088: 	pand	%xmm2, %xmm0
    0000008c: 	cmpq	%rax, %rdx
    0000008f: 	jne	.Ltmp476 # Offset: 143
    00000091: 	movl	%r10d, %ebp
    00000094: 	movd	%xmm0, %eax
    00000098: 	movaps	%xmm0, 0xf8(%rsp)
    000000a0: 	andb	0xfc(%rsp), %al
    000000a7: 	andl	$-0x4, %ebp
    000000aa: 	movaps	%xmm0, 0xe8(%rsp)
    000000b2: 	andb	0xf0(%rsp), %al
    000000b9: 	movaps	%xmm0, 0xd8(%rsp)
    000000c1: 	leal	(,%rbp,4), %ecx
    000000c8: 	andb	0xe4(%rsp), %al
    000000cf: 	movaps	%xmm0, 0xc8(%rsp)
    000000d7: 	movaps	%xmm0, 0xb8(%rsp)
    000000df: 	movzbl	0xbd(%rsp), %edx
    000000e7: 	andb	0xc9(%rsp), %dl
    000000ee: 	movaps	%xmm0, 0xa8(%rsp)
    000000f6: 	andb	0xb1(%rsp), %dl
    000000fd: 	movaps	%xmm0, 0x98(%rsp)
    00000105: 	andb	0xa5(%rsp), %dl
    0000010c: 	movaps	%xmm0, 0x88(%rsp)
    00000114: 	movaps	%xmm0, 0x78(%rsp)
    00000119: 	movzbl	0x7e(%rsp), %r9d
    0000011f: 	andb	0x8a(%rsp), %r9b
    00000127: 	movaps	%xmm0, 0x68(%rsp)
    0000012c: 	andb	0x72(%rsp), %r9b
    00000131: 	movaps	%xmm0, 0x58(%rsp)
    00000136: 	andb	0x66(%rsp), %r9b
    0000013b: 	movaps	%xmm0, 0x48(%rsp)
    00000140: 	movaps	%xmm0, 0x38(%rsp)
    00000145: 	movzbl	0x3f(%rsp), %r8d
    0000014b: 	andb	0x4b(%rsp), %r8b
    00000150: 	movaps	%xmm0, 0x28(%rsp)
    00000155: 	andb	0x33(%rsp), %r8b
    0000015a: 	movaps	%xmm0, 0x18(%rsp)
    0000015f: 	andb	0x27(%rsp), %r8b
    00000164: 	cmpl	%ebp, %r10d
    00000167: 	je	.Ltmp477 # Offset: 359
.Ltmp485:
    0000016d: 	movl	%r10d, %r11d
    00000170: 	subl	%ebp, %r11d
    00000173: 	cmpl	%ebp, %ebx
    00000175: 	je	.Ltmp478 # Offset: 373
    0000017b: 	movq	(%rdi,%rbp,4), %xmm0
    00000180: 	movzbl	%r8b, %ebp
    00000184: 	movzbl	%al, %eax
    00000187: 	movabsq	$0xffffffff00, %r8
    00000191: 	orq	%rbp, %r8
    00000194: 	movzbl	%r9b, %ebp
    00000198: 	movq	%r8, %r9
    0000019b: 	movzbl	%dl, %r8d
    0000019f: 	shlq	$0x8, %r9
    000001a3: 	orq	%rbp, %r9
    000001a6: 	movq	%r9, %rdx
    000001a9: 	shlq	$0x8, %rdx
    000001ad: 	orq	%r8, %rdx
    000001b0: 	shlq	$0x8, %rdx
    000001b4: 	orq	%rax, %rdx
    000001b7: 	movq	%rdx, %xmm3
    000001bc: 	pand	%xmm0, %xmm3
    000001c0: 	movq	%xmm3, %rbx
    000001c5: 	movq	%xmm3, %rdx
    000001ca: 	movq	%xmm3, %r8
    000001cf: 	movq	%xmm3, 0x10(%rsp)
    000001d5: 	movl	%ebx, %eax
    000001d7: 	shrq	$0x20, %rdx
    000001db: 	movq	%xmm3, %r9
    000001e0: 	movq	%xmm3, %rbp
    000001e5: 	shrq	$0x28, %r8
    000001e9: 	andl	%edx, %eax
    000001eb: 	movzbl	%bh, %edx
    000001ee: 	shrq	$0x30, %r9
    000001f2: 	andl	%r8d, %edx
    000001f5: 	movq	%xmm3, %r8
    000001fa: 	movl	%r11d, %ebx
    000001fd: 	shrq	$0x18, %rbp
    00000201: 	shrq	$0x10, %r8
    00000205: 	andl	$-0x2, %ebx
    00000208: 	movq	%xmm3, 0x8(%rsp)
    0000020e: 	andl	%r8d, %r9d
    00000211: 	movq	%xmm3, %r8
    00000216: 	movq	%xmm3, (%rsp)
    0000021b: 	leal	(%rcx,%rbx,4), %ecx
    0000021e: 	shrq	$0x38, %r8
    00000222: 	movq	%xmm3, -0x8(%rsp)
    00000228: 	movq	%xmm3, -0x10(%rsp)
    0000022e: 	andl	%ebp, %r8d
    00000231: 	movq	%xmm3, -0x18(%rsp)
    00000237: 	movq	%xmm3, -0x20(%rsp)
    0000023d: 	movq	%xmm3, -0x28(%rsp)
    00000243: 	cmpl	%ebx, %r11d
    00000246: 	je	.Ltmp477 # Offset: 582
.Ltmp478:
    00000248: 	movslq	%ecx, %rcx
    0000024b: 	andb	(%rdi,%rcx), %al
    0000024e: 	andb	0x1(%rdi,%rcx), %dl
    00000252: 	andb	0x2(%rdi,%rcx), %r9b
    00000257: 	andb	0x3(%rdi,%rcx), %r8b
.Ltmp477:
    0000025c: 	andl	%r9d, %edx
    0000025f: 	shll	$0x2, %r10d
    00000263: 	andl	%r8d, %edx
.Ltmp484:
    00000266: 	cmpl	%r10d, %esi
    00000269: 	jle	.Ltmp479 # Offset: 617
    0000026f: 	movl	%esi, %r9d
    00000272: 	subl	%r10d, %r9d
    00000275: 	leal	-0x1(%r9), %ecx
    00000279: 	cmpl	$0xe, %ecx
    0000027c: 	jbe	.Ltmp480 # Offset: 636
    00000282: 	movl	%r9d, %ecx
    00000285: 	movslq	%r10d, %r8
    00000288: 	pcmpeqd	%xmm0, %xmm0
    0000028c: 	shrl	$0x4, %ecx
    0000028f: 	addq	%rdi, %r8
    00000292: 	leal	-0x1(%rcx), %r11d
    00000296: 	leaq	0x10(%r8), %rcx
    0000029a: 	shlq	$0x4, %r11
    0000029e: 	addq	%rcx, %r11
    000002a1: 	jmp	.Ltmp481 # Offset: 673
    000002a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp482:
    000002a8: 	addq	$0x10, %rcx
.Ltmp481:
    000002ac: 	movdqu	(%r8), %xmm1
    000002b1: 	movq	%rcx, %r8
    000002b4: 	pand	%xmm1, %xmm0
    000002b8: 	cmpq	%r11, %rcx
    000002bb: 	jne	.Ltmp482 # Offset: 699
    000002bd: 	movdqa	%xmm0, %xmm1
    000002c1: 	psrldq	$0x8, %xmm1
    000002c6: 	pand	%xmm1, %xmm0
    000002ca: 	movdqa	%xmm0, %xmm1
    000002ce: 	psrldq	$0x4, %xmm1
    000002d3: 	pand	%xmm1, %xmm0
    000002d7: 	movdqa	%xmm0, %xmm1
    000002db: 	psrldq	$0x2, %xmm1
    000002e0: 	pand	%xmm1, %xmm0
    000002e4: 	movdqa	%xmm0, %xmm1
    000002e8: 	psrldq	$0x1, %xmm1
    000002ed: 	pand	%xmm1, %xmm0
    000002f1: 	movd	%xmm0, %ecx
    000002f5: 	andl	%ecx, %eax
    000002f7: 	movl	%r9d, %ecx
    000002fa: 	andl	$-0x10, %ecx
    000002fd: 	leal	(%rcx,%r10), %r8d
    00000301: 	cmpl	%r9d, %ecx
    00000304: 	je	.Ltmp479 # Offset: 772
.Ltmp486:
    0000030a: 	subl	%ecx, %r9d
    0000030d: 	leal	-0x1(%r9), %r11d
    00000311: 	cmpl	$0x6, %r11d
    00000315: 	jbe	.Ltmp483 # Offset: 789
    00000317: 	movslq	%r10d, %r10
    0000031a: 	addq	%rdi, %r10
    0000031d: 	movq	(%r10,%rcx), %rbx
    00000321: 	movl	%ebx, %ecx
    00000323: 	movzbl	%bh, %ebp
    00000326: 	andl	%ebp, %ecx
    00000328: 	andl	%ecx, %eax
    0000032a: 	movq	%rbx, %rcx
    0000032d: 	shrq	$0x10, %rcx
    00000331: 	andl	%ecx, %eax
    00000333: 	movq	%rbx, %rcx
    00000336: 	shrq	$0x18, %rcx
    0000033a: 	andl	%ecx, %eax
    0000033c: 	movq	%rbx, %rcx
    0000033f: 	shrq	$0x20, %rcx
    00000343: 	andl	%ecx, %eax
    00000345: 	movq	%rbx, %rcx
    00000348: 	shrq	$0x28, %rcx
    0000034c: 	andl	%ecx, %eax
    0000034e: 	movq	%rbx, %rcx
    00000351: 	shrq	$0x38, %rbx
    00000355: 	shrq	$0x30, %rcx
    00000359: 	andl	%ecx, %eax
    0000035b: 	movl	%r9d, %ecx
    0000035e: 	andl	$-0x8, %ecx
    00000361: 	andl	%ebx, %eax
    00000363: 	addl	%ecx, %r8d
    00000366: 	cmpl	%ecx, %r9d
    00000369: 	je	.Ltmp479 # Offset: 873
.Ltmp483:
    0000036b: 	movslq	%r8d, %rcx
    0000036e: 	andb	(%rdi,%rcx), %al
    00000371: 	leal	0x1(%r8), %ecx
    00000375: 	cmpl	%esi, %ecx
    00000377: 	jge	.Ltmp479 # Offset: 887
    00000379: 	movslq	%ecx, %rcx
    0000037c: 	andb	(%rdi,%rcx), %al
    0000037f: 	leal	0x2(%r8), %ecx
    00000383: 	cmpl	%esi, %ecx
    00000385: 	jge	.Ltmp479 # Offset: 901
    00000387: 	movslq	%ecx, %rcx
    0000038a: 	andb	(%rdi,%rcx), %al
    0000038d: 	leal	0x3(%r8), %ecx
    00000391: 	cmpl	%ecx, %esi
    00000393: 	jle	.Ltmp479 # Offset: 915
    00000395: 	movslq	%ecx, %rcx
    00000398: 	andb	(%rdi,%rcx), %al
    0000039b: 	leal	0x4(%r8), %ecx
    0000039f: 	cmpl	%ecx, %esi
    000003a1: 	jle	.Ltmp479 # Offset: 929
    000003a3: 	movslq	%ecx, %rcx
    000003a6: 	andb	(%rdi,%rcx), %al
    000003a9: 	leal	0x5(%r8), %ecx
    000003ad: 	cmpl	%ecx, %esi
    000003af: 	jle	.Ltmp479 # Offset: 943
    000003b1: 	movslq	%ecx, %rcx
    000003b4: 	addl	$0x6, %r8d
    000003b8: 	andb	(%rdi,%rcx), %al
    000003bb: 	cmpl	%r8d, %esi
    000003be: 	jle	.Ltmp479 # Offset: 958
    000003c0: 	movslq	%r8d, %r8
    000003c3: 	andb	(%rdi,%r8), %al
.Ltmp479:
    000003c7: 	addq	$0x110, %rsp
    000003ce: 	andl	%edx, %eax
    000003d0: 	popq	%rbx
    000003d1: 	popq	%rbp
    000003d2: 	retq # Offset: 978
    000003d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp474:
    000003d8: 	xorl	%r10d, %r10d
    000003db: 	jmp	.Ltmp484 # Offset: 987
.Ltmp475:
    000003e0: 	movl	%edx, %r8d
    000003e3: 	movl	%edx, %r9d
    000003e6: 	xorl	%ebp, %ebp
    000003e8: 	xorl	%ecx, %ecx
    000003ea: 	jmp	.Ltmp485 # Offset: 1002
.Ltmp480:
    000003ef: 	movl	%r10d, %r8d
    000003f2: 	xorl	%ecx, %ecx
    000003f4: 	jmp	.Ltmp486 # Offset: 1012
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and6IaET_PKS0_iS0_"

Binary Function "_Z8bit_and7IaET_PKS0_iS0_" after disassembly {
  Number      : 89
  State       : disassembled
  Address     : 0x91a0
  Size        : 0x3f9
  MaxSize     : 0x400
  Offset      : 0x91a0
  Section     : .text
  Orc Section : .local.text._Z8bit_and7IaET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB088:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movl	%edx, %eax
    00000007: 	pushq	%rbx
    00000008: 	subq	$0x110, %rsp
    0000000f: 	cmpl	$0x3, %esi
    00000012: 	jle	.Ltmp487 # Offset: 18
    00000018: 	leal	-0x4(%rsi), %ecx
    0000001b: 	movl	%ecx, %ebx
    0000001d: 	shrl	$0x2, %ebx
    00000020: 	leal	0x1(%rbx), %r10d
    00000024: 	cmpl	$0xb, %ecx
    00000027: 	jbe	.Ltmp488 # Offset: 39
    0000002d: 	movabsq	$0xffffffff00, %rax
    00000037: 	movzbl	%dl, %edx
    0000003a: 	movq	$-0x1, -0x70(%rsp)
    00000043: 	orq	%rdx, %rax
    00000046: 	shlq	$0x8, %rax
    0000004a: 	orq	%rdx, %rax
    0000004d: 	shlq	$0x8, %rax
    00000051: 	orq	%rdx, %rax
    00000054: 	shlq	$0x8, %rax
    00000058: 	orq	%rdx, %rax
    0000005b: 	movl	%r10d, %edx
    0000005e: 	shrl	$0x2, %edx
    00000061: 	movq	%rax, -0x78(%rsp)
    00000066: 	movdqa	-0x78(%rsp), %xmm0
    0000006c: 	movq	%rdi, %rax
    0000006f: 	subl	$0x1, %edx
    00000072: 	shlq	$0x4, %rdx
    00000076: 	leaq	0x10(%rdi,%rdx), %rdx
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp489:
    00000080: 	movdqu	(%rax), %xmm2
    00000084: 	addq	$0x10, %rax
    00000088: 	pand	%xmm2, %xmm0
    0000008c: 	cmpq	%rax, %rdx
    0000008f: 	jne	.Ltmp489 # Offset: 143
    00000091: 	movl	%r10d, %ebp
    00000094: 	movd	%xmm0, %eax
    00000098: 	movaps	%xmm0, 0xf8(%rsp)
    000000a0: 	andb	0xfc(%rsp), %al
    000000a7: 	andl	$-0x4, %ebp
    000000aa: 	movaps	%xmm0, 0xe8(%rsp)
    000000b2: 	andb	0xf0(%rsp), %al
    000000b9: 	movaps	%xmm0, 0xd8(%rsp)
    000000c1: 	leal	(,%rbp,4), %ecx
    000000c8: 	andb	0xe4(%rsp), %al
    000000cf: 	movaps	%xmm0, 0xc8(%rsp)
    000000d7: 	movaps	%xmm0, 0xb8(%rsp)
    000000df: 	movzbl	0xbd(%rsp), %edx
    000000e7: 	andb	0xc9(%rsp), %dl
    000000ee: 	movaps	%xmm0, 0xa8(%rsp)
    000000f6: 	andb	0xb1(%rsp), %dl
    000000fd: 	movaps	%xmm0, 0x98(%rsp)
    00000105: 	andb	0xa5(%rsp), %dl
    0000010c: 	movaps	%xmm0, 0x88(%rsp)
    00000114: 	movaps	%xmm0, 0x78(%rsp)
    00000119: 	movzbl	0x7e(%rsp), %r9d
    0000011f: 	andb	0x8a(%rsp), %r9b
    00000127: 	movaps	%xmm0, 0x68(%rsp)
    0000012c: 	andb	0x72(%rsp), %r9b
    00000131: 	movaps	%xmm0, 0x58(%rsp)
    00000136: 	andb	0x66(%rsp), %r9b
    0000013b: 	movaps	%xmm0, 0x48(%rsp)
    00000140: 	movaps	%xmm0, 0x38(%rsp)
    00000145: 	movzbl	0x3f(%rsp), %r8d
    0000014b: 	andb	0x4b(%rsp), %r8b
    00000150: 	movaps	%xmm0, 0x28(%rsp)
    00000155: 	andb	0x33(%rsp), %r8b
    0000015a: 	movaps	%xmm0, 0x18(%rsp)
    0000015f: 	andb	0x27(%rsp), %r8b
    00000164: 	cmpl	%ebp, %r10d
    00000167: 	je	.Ltmp490 # Offset: 359
.Ltmp498:
    0000016d: 	movl	%r10d, %r11d
    00000170: 	subl	%ebp, %r11d
    00000173: 	cmpl	%ebp, %ebx
    00000175: 	je	.Ltmp491 # Offset: 373
    0000017b: 	movq	(%rdi,%rbp,4), %xmm0
    00000180: 	movzbl	%r8b, %ebp
    00000184: 	movzbl	%al, %eax
    00000187: 	movabsq	$0xffffffff00, %r8
    00000191: 	orq	%rbp, %r8
    00000194: 	movzbl	%r9b, %ebp
    00000198: 	movq	%r8, %r9
    0000019b: 	movzbl	%dl, %r8d
    0000019f: 	shlq	$0x8, %r9
    000001a3: 	orq	%rbp, %r9
    000001a6: 	movq	%r9, %rdx
    000001a9: 	shlq	$0x8, %rdx
    000001ad: 	orq	%r8, %rdx
    000001b0: 	shlq	$0x8, %rdx
    000001b4: 	orq	%rax, %rdx
    000001b7: 	movq	%rdx, %xmm3
    000001bc: 	pand	%xmm0, %xmm3
    000001c0: 	movq	%xmm3, %rbx
    000001c5: 	movq	%xmm3, %rdx
    000001ca: 	movq	%xmm3, %r8
    000001cf: 	movq	%xmm3, 0x10(%rsp)
    000001d5: 	movl	%ebx, %eax
    000001d7: 	shrq	$0x20, %rdx
    000001db: 	movq	%xmm3, %r9
    000001e0: 	movq	%xmm3, %rbp
    000001e5: 	shrq	$0x28, %r8
    000001e9: 	andl	%edx, %eax
    000001eb: 	movzbl	%bh, %edx
    000001ee: 	shrq	$0x30, %r9
    000001f2: 	andl	%r8d, %edx
    000001f5: 	movq	%xmm3, %r8
    000001fa: 	movl	%r11d, %ebx
    000001fd: 	shrq	$0x18, %rbp
    00000201: 	shrq	$0x10, %r8
    00000205: 	andl	$-0x2, %ebx
    00000208: 	movq	%xmm3, 0x8(%rsp)
    0000020e: 	andl	%r8d, %r9d
    00000211: 	movq	%xmm3, %r8
    00000216: 	movq	%xmm3, (%rsp)
    0000021b: 	leal	(%rcx,%rbx,4), %ecx
    0000021e: 	shrq	$0x38, %r8
    00000222: 	movq	%xmm3, -0x8(%rsp)
    00000228: 	movq	%xmm3, -0x10(%rsp)
    0000022e: 	andl	%ebp, %r8d
    00000231: 	movq	%xmm3, -0x18(%rsp)
    00000237: 	movq	%xmm3, -0x20(%rsp)
    0000023d: 	movq	%xmm3, -0x28(%rsp)
    00000243: 	cmpl	%ebx, %r11d
    00000246: 	je	.Ltmp490 # Offset: 582
.Ltmp491:
    00000248: 	movslq	%ecx, %rcx
    0000024b: 	andb	(%rdi,%rcx), %al
    0000024e: 	andb	0x1(%rdi,%rcx), %dl
    00000252: 	andb	0x2(%rdi,%rcx), %r9b
    00000257: 	andb	0x3(%rdi,%rcx), %r8b
.Ltmp490:
    0000025c: 	andl	%r9d, %edx
    0000025f: 	shll	$0x2, %r10d
    00000263: 	andl	%r8d, %edx
.Ltmp497:
    00000266: 	cmpl	%r10d, %esi
    00000269: 	jle	.Ltmp492 # Offset: 617
    0000026f: 	movl	%esi, %r9d
    00000272: 	subl	%r10d, %r9d
    00000275: 	leal	-0x1(%r9), %ecx
    00000279: 	cmpl	$0xe, %ecx
    0000027c: 	jbe	.Ltmp493 # Offset: 636
    00000282: 	movl	%r9d, %ecx
    00000285: 	movslq	%r10d, %r8
    00000288: 	pcmpeqd	%xmm0, %xmm0
    0000028c: 	shrl	$0x4, %ecx
    0000028f: 	addq	%rdi, %r8
    00000292: 	leal	-0x1(%rcx), %r11d
    00000296: 	leaq	0x10(%r8), %rcx
    0000029a: 	shlq	$0x4, %r11
    0000029e: 	addq	%rcx, %r11
    000002a1: 	jmp	.Ltmp494 # Offset: 673
    000002a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp495:
    000002a8: 	addq	$0x10, %rcx
.Ltmp494:
    000002ac: 	movdqu	(%r8), %xmm1
    000002b1: 	movq	%rcx, %r8
    000002b4: 	pand	%xmm1, %xmm0
    000002b8: 	cmpq	%r11, %rcx
    000002bb: 	jne	.Ltmp495 # Offset: 699
    000002bd: 	movdqa	%xmm0, %xmm1
    000002c1: 	psrldq	$0x8, %xmm1
    000002c6: 	pand	%xmm1, %xmm0
    000002ca: 	movdqa	%xmm0, %xmm1
    000002ce: 	psrldq	$0x4, %xmm1
    000002d3: 	pand	%xmm1, %xmm0
    000002d7: 	movdqa	%xmm0, %xmm1
    000002db: 	psrldq	$0x2, %xmm1
    000002e0: 	pand	%xmm1, %xmm0
    000002e4: 	movdqa	%xmm0, %xmm1
    000002e8: 	psrldq	$0x1, %xmm1
    000002ed: 	pand	%xmm1, %xmm0
    000002f1: 	movd	%xmm0, %ecx
    000002f5: 	andl	%ecx, %eax
    000002f7: 	movl	%r9d, %ecx
    000002fa: 	andl	$-0x10, %ecx
    000002fd: 	leal	(%rcx,%r10), %r8d
    00000301: 	cmpl	%r9d, %ecx
    00000304: 	je	.Ltmp492 # Offset: 772
.Ltmp499:
    0000030a: 	subl	%ecx, %r9d
    0000030d: 	leal	-0x1(%r9), %r11d
    00000311: 	cmpl	$0x6, %r11d
    00000315: 	jbe	.Ltmp496 # Offset: 789
    00000317: 	movslq	%r10d, %r10
    0000031a: 	addq	%rdi, %r10
    0000031d: 	movq	(%r10,%rcx), %rbx
    00000321: 	movl	%ebx, %ecx
    00000323: 	movzbl	%bh, %ebp
    00000326: 	andl	%ebp, %ecx
    00000328: 	andl	%ecx, %eax
    0000032a: 	movq	%rbx, %rcx
    0000032d: 	shrq	$0x10, %rcx
    00000331: 	andl	%ecx, %eax
    00000333: 	movq	%rbx, %rcx
    00000336: 	shrq	$0x18, %rcx
    0000033a: 	andl	%ecx, %eax
    0000033c: 	movq	%rbx, %rcx
    0000033f: 	shrq	$0x20, %rcx
    00000343: 	andl	%ecx, %eax
    00000345: 	movq	%rbx, %rcx
    00000348: 	shrq	$0x28, %rcx
    0000034c: 	andl	%ecx, %eax
    0000034e: 	movq	%rbx, %rcx
    00000351: 	shrq	$0x38, %rbx
    00000355: 	shrq	$0x30, %rcx
    00000359: 	andl	%ecx, %eax
    0000035b: 	movl	%r9d, %ecx
    0000035e: 	andl	$-0x8, %ecx
    00000361: 	andl	%ebx, %eax
    00000363: 	addl	%ecx, %r8d
    00000366: 	cmpl	%ecx, %r9d
    00000369: 	je	.Ltmp492 # Offset: 873
.Ltmp496:
    0000036b: 	movslq	%r8d, %rcx
    0000036e: 	andb	(%rdi,%rcx), %al
    00000371: 	leal	0x1(%r8), %ecx
    00000375: 	cmpl	%esi, %ecx
    00000377: 	jge	.Ltmp492 # Offset: 887
    00000379: 	movslq	%ecx, %rcx
    0000037c: 	andb	(%rdi,%rcx), %al
    0000037f: 	leal	0x2(%r8), %ecx
    00000383: 	cmpl	%esi, %ecx
    00000385: 	jge	.Ltmp492 # Offset: 901
    00000387: 	movslq	%ecx, %rcx
    0000038a: 	andb	(%rdi,%rcx), %al
    0000038d: 	leal	0x3(%r8), %ecx
    00000391: 	cmpl	%esi, %ecx
    00000393: 	jge	.Ltmp492 # Offset: 915
    00000395: 	movslq	%ecx, %rcx
    00000398: 	andb	(%rdi,%rcx), %al
    0000039b: 	leal	0x4(%r8), %ecx
    0000039f: 	cmpl	%ecx, %esi
    000003a1: 	jle	.Ltmp492 # Offset: 929
    000003a3: 	movslq	%ecx, %rcx
    000003a6: 	andb	(%rdi,%rcx), %al
    000003a9: 	leal	0x5(%r8), %ecx
    000003ad: 	cmpl	%ecx, %esi
    000003af: 	jle	.Ltmp492 # Offset: 943
    000003b1: 	movslq	%ecx, %rcx
    000003b4: 	addl	$0x6, %r8d
    000003b8: 	andb	(%rdi,%rcx), %al
    000003bb: 	cmpl	%r8d, %esi
    000003be: 	jle	.Ltmp492 # Offset: 958
    000003c0: 	movslq	%r8d, %r8
    000003c3: 	andb	(%rdi,%r8), %al
.Ltmp492:
    000003c7: 	addq	$0x110, %rsp
    000003ce: 	andl	%edx, %eax
    000003d0: 	popq	%rbx
    000003d1: 	popq	%rbp
    000003d2: 	retq # Offset: 978
    000003d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp487:
    000003d8: 	xorl	%r10d, %r10d
    000003db: 	jmp	.Ltmp497 # Offset: 987
.Ltmp488:
    000003e0: 	movl	%edx, %r8d
    000003e3: 	movl	%edx, %r9d
    000003e6: 	xorl	%ebp, %ebp
    000003e8: 	xorl	%ecx, %ecx
    000003ea: 	jmp	.Ltmp498 # Offset: 1002
.Ltmp493:
    000003ef: 	movl	%r10d, %r8d
    000003f2: 	xorl	%ecx, %ecx
    000003f4: 	jmp	.Ltmp499 # Offset: 1012
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and7IaET_PKS0_iS0_"

Binary Function "_Z8bit_and8IaET_PKS0_iS0_" after disassembly {
  Number      : 90
  State       : disassembled
  Address     : 0x95a0
  Size        : 0x410
  MaxSize     : 0x410
  Offset      : 0x95a0
  Section     : .text
  Orc Section : .local.text._Z8bit_and8IaET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB089:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdi, %rcx
    00000009: 	movl	%edx, %r8d
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x108, %rsp
    00000015: 	cmpl	$0x7, %esi
    00000018: 	jle	.Ltmp500 # Offset: 24
    0000001e: 	leal	-0x8(%rsi), %eax
    00000021: 	movl	%eax, %r9d
    00000024: 	shrl	$0x3, %r9d
    00000028: 	addl	$0x1, %r9d
    0000002c: 	cmpl	$0x7, %eax
    0000002f: 	jbe	.Ltmp501 # Offset: 47
    00000035: 	movq	$-0x1, -0x70(%rsp)
    0000003e: 	movzbl	%dl, %edx
    00000041: 	movq	%rdx, %rax
    00000044: 	shlq	$0x8, %rax
    00000048: 	orq	%rdx, %rax
    0000004b: 	shlq	$0x8, %rax
    0000004f: 	orq	%rdx, %rax
    00000052: 	shlq	$0x8, %rax
    00000056: 	orq	%rdx, %rax
    00000059: 	shlq	$0x8, %rax
    0000005d: 	orq	%rdx, %rax
    00000060: 	shlq	$0x8, %rax
    00000064: 	orq	%rdx, %rax
    00000067: 	shlq	$0x8, %rax
    0000006b: 	orq	%rdx, %rax
    0000006e: 	shlq	$0x8, %rax
    00000072: 	orq	%rdx, %rax
    00000075: 	movl	%r9d, %edx
    00000078: 	shrl	%edx
    0000007a: 	movq	%rax, -0x78(%rsp)
    0000007f: 	movdqa	-0x78(%rsp), %xmm0
    00000085: 	movq	%rdi, %rax
    00000088: 	subl	$0x1, %edx
    0000008b: 	shlq	$0x4, %rdx
    0000008f: 	leaq	0x10(%rdi,%rdx), %rdx
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp502:
    00000098: 	movdqu	(%rax), %xmm2
    0000009c: 	addq	$0x10, %rax
    000000a0: 	pand	%xmm2, %xmm0
    000000a4: 	cmpq	%rax, %rdx
    000000a7: 	jne	.Ltmp502 # Offset: 167
    000000a9: 	movl	%r9d, %eax
    000000ac: 	movd	%xmm0, %r8d
    000000b1: 	movaps	%xmm0, 0xf8(%rsp)
    000000b9: 	andb	0x100(%rsp), %r8b
    000000c1: 	movaps	%xmm0, 0xe8(%rsp)
    000000c9: 	andl	$-0x2, %eax
    000000cc: 	movaps	%xmm0, 0xd8(%rsp)
    000000d4: 	movzbl	0xe1(%rsp), %edx
    000000dc: 	andb	0xe9(%rsp), %dl
    000000e3: 	movaps	%xmm0, 0xc8(%rsp)
    000000eb: 	movaps	%xmm0, 0xb8(%rsp)
    000000f3: 	movzbl	0xc2(%rsp), %ebx
    000000fb: 	andb	0xca(%rsp), %bl
    00000102: 	movaps	%xmm0, 0xa8(%rsp)
    0000010a: 	movaps	%xmm0, 0x98(%rsp)
    00000112: 	movzbl	0xa3(%rsp), %ebp
    0000011a: 	andb	0xab(%rsp), %bpl
    00000122: 	movaps	%xmm0, 0x88(%rsp)
    0000012a: 	movaps	%xmm0, 0x78(%rsp)
    0000012f: 	movzbl	0x84(%rsp), %r12d
    00000138: 	andb	0x8c(%rsp), %r12b
    00000140: 	movaps	%xmm0, 0x68(%rsp)
    00000145: 	movaps	%xmm0, 0x58(%rsp)
    0000014a: 	movzbl	0x65(%rsp), %r11d
    00000150: 	andb	0x6d(%rsp), %r11b
    00000155: 	movaps	%xmm0, 0x48(%rsp)
    0000015a: 	movaps	%xmm0, 0x38(%rsp)
    0000015f: 	movzbl	0x46(%rsp), %r10d
    00000165: 	andb	0x4e(%rsp), %r10b
    0000016a: 	movaps	%xmm0, 0x28(%rsp)
    0000016f: 	movaps	%xmm0, 0x18(%rsp)
    00000174: 	movzbl	0x27(%rsp), %edi
    00000179: 	andb	0x2f(%rsp), %dil
    0000017e: 	testl	$0xc0000001, %r9d
    00000185: 	je	.Ltmp503 # Offset: 389
.Ltmp510:
    0000018b: 	movzbl	%r10b, %r10d
    0000018f: 	movzbl	%r11b, %r11d
    00000193: 	movzbl	%r12b, %r12d
    00000197: 	movzbl	%bpl, %ebp
    0000019b: 	movq	(%rcx,%rax,8), %xmm0
    000001a0: 	movzbl	%dil, %eax
    000001a4: 	movzbl	%bl, %ebx
    000001a7: 	movzbl	%dl, %edi
    000001aa: 	shlq	$0x8, %rax
    000001ae: 	movzbl	%r8b, %r8d
    000001b2: 	orq	%r10, %rax
    000001b5: 	shlq	$0x8, %rax
    000001b9: 	orq	%r11, %rax
    000001bc: 	shlq	$0x8, %rax
    000001c0: 	orq	%r12, %rax
    000001c3: 	shlq	$0x8, %rax
    000001c7: 	orq	%rbp, %rax
    000001ca: 	shlq	$0x8, %rax
    000001ce: 	orq	%rbx, %rax
    000001d1: 	shlq	$0x8, %rax
    000001d5: 	movq	%rax, %rdx
    000001d8: 	orq	%rdi, %rdx
    000001db: 	shlq	$0x8, %rdx
    000001df: 	orq	%r8, %rdx
    000001e2: 	movq	%rdx, %xmm3
    000001e7: 	pand	%xmm0, %xmm3
    000001eb: 	movq	%xmm3, %rax
    000001f0: 	movq	%xmm3, %rbx
    000001f5: 	movq	%xmm3, %rbp
    000001fa: 	movq	%xmm3, 0x10(%rsp)
    00000200: 	movl	%eax, %r8d
    00000203: 	movzbl	%ah, %edx
    00000206: 	movq	%xmm3, %r12
    0000020b: 	shrq	$0x38, %rax
    0000020f: 	shrq	$0x10, %rbx
    00000213: 	movq	%xmm3, %r11
    00000218: 	shrq	$0x18, %rbp
    0000021c: 	movq	%rax, %rdi
    0000021f: 	movq	%xmm3, %r10
    00000224: 	movq	%xmm3, 0x8(%rsp)
    0000022a: 	shrq	$0x20, %r12
    0000022e: 	movq	%xmm3, (%rsp)
    00000233: 	shrq	$0x28, %r11
    00000237: 	shrq	$0x30, %r10
    0000023b: 	movq	%xmm3, -0x8(%rsp)
    00000241: 	movq	%xmm3, -0x10(%rsp)
    00000247: 	movq	%xmm3, -0x18(%rsp)
    0000024d: 	movq	%xmm3, -0x20(%rsp)
    00000253: 	movq	%xmm3, -0x28(%rsp)
.Ltmp503:
    00000259: 	andl	%ebx, %edx
    0000025b: 	shll	$0x3, %r9d
    0000025f: 	andl	%ebp, %edx
    00000261: 	andl	%r12d, %edx
    00000264: 	andl	%r11d, %edx
    00000267: 	andl	%r10d, %edx
    0000026a: 	andl	%edi, %edx
.Ltmp509:
    0000026c: 	cmpl	%r9d, %esi
    0000026f: 	jle	.Ltmp504 # Offset: 623
    00000275: 	movl	%esi, %r10d
    00000278: 	subl	%r9d, %r10d
    0000027b: 	leal	-0x1(%r10), %eax
    0000027f: 	cmpl	$0xe, %eax
    00000282: 	jbe	.Ltmp505 # Offset: 642
    00000288: 	movl	%r10d, %eax
    0000028b: 	movslq	%r9d, %rdi
    0000028e: 	pcmpeqd	%xmm0, %xmm0
    00000292: 	shrl	$0x4, %eax
    00000295: 	addq	%rcx, %rdi
    00000298: 	leal	-0x1(%rax), %r11d
    0000029c: 	leaq	0x10(%rdi), %rax
    000002a0: 	shlq	$0x4, %r11
    000002a4: 	addq	%rax, %r11
    000002a7: 	jmp	.Ltmp506 # Offset: 679
    000002a9: 	nopl	(%rax) # Size: 7
.Ltmp507:
    000002b0: 	addq	$0x10, %rax
.Ltmp506:
    000002b4: 	movdqu	(%rdi), %xmm1
    000002b8: 	movq	%rax, %rdi
    000002bb: 	pand	%xmm1, %xmm0
    000002bf: 	cmpq	%r11, %rax
    000002c2: 	jne	.Ltmp507 # Offset: 706
    000002c4: 	movdqa	%xmm0, %xmm1
    000002c8: 	movl	%r10d, %eax
    000002cb: 	psrldq	$0x8, %xmm1
    000002d0: 	andl	$-0x10, %eax
    000002d3: 	pand	%xmm1, %xmm0
    000002d7: 	movdqa	%xmm0, %xmm1
    000002db: 	psrldq	$0x4, %xmm1
    000002e0: 	pand	%xmm1, %xmm0
    000002e4: 	movdqa	%xmm0, %xmm1
    000002e8: 	psrldq	$0x2, %xmm1
    000002ed: 	pand	%xmm1, %xmm0
    000002f1: 	movdqa	%xmm0, %xmm1
    000002f5: 	psrldq	$0x1, %xmm1
    000002fa: 	pand	%xmm1, %xmm0
    000002fe: 	movd	%xmm0, %edi
    00000302: 	andl	%edi, %r8d
    00000305: 	leal	(%rax,%r9), %edi
    00000309: 	cmpl	%r10d, %eax
    0000030c: 	je	.Ltmp504 # Offset: 780
.Ltmp511:
    00000312: 	subl	%eax, %r10d
    00000315: 	leal	-0x1(%r10), %r11d
    00000319: 	cmpl	$0x6, %r11d
    0000031d: 	jbe	.Ltmp508 # Offset: 797
    0000031f: 	movslq	%r9d, %r9
    00000322: 	addq	%rcx, %rax
    00000325: 	movq	(%rax,%r9), %rbx
    00000329: 	movzbl	%bh, %eax
    0000032c: 	movl	%ebx, %r9d
    0000032f: 	andl	%r9d, %eax
    00000332: 	andl	%r8d, %eax
    00000335: 	movq	%rbx, %r8
    00000338: 	shrq	$0x10, %r8
    0000033c: 	andl	%r8d, %eax
    0000033f: 	movq	%rbx, %r8
    00000342: 	shrq	$0x18, %r8
    00000346: 	andl	%r8d, %eax
    00000349: 	movq	%rbx, %r8
    0000034c: 	shrq	$0x20, %r8
    00000350: 	andl	%r8d, %eax
    00000353: 	movq	%rbx, %r8
    00000356: 	shrq	$0x28, %r8
    0000035a: 	andl	%r8d, %eax
    0000035d: 	movq	%rbx, %r8
    00000360: 	shrq	$0x38, %rbx
    00000364: 	shrq	$0x30, %r8
    00000368: 	andl	%r8d, %eax
    0000036b: 	andl	%ebx, %eax
    0000036d: 	movl	%eax, %r8d
    00000370: 	movl	%r10d, %eax
    00000373: 	andl	$-0x8, %eax
    00000376: 	addl	%eax, %edi
    00000378: 	cmpl	%r10d, %eax
    0000037b: 	je	.Ltmp504 # Offset: 891
.Ltmp508:
    0000037d: 	movslq	%edi, %rax
    00000380: 	andb	(%rcx,%rax), %r8b
    00000384: 	leal	0x1(%rdi), %eax
    00000387: 	cmpl	%eax, %esi
    00000389: 	jle	.Ltmp504 # Offset: 905
    0000038b: 	cltq
    0000038d: 	andb	(%rcx,%rax), %r8b
    00000391: 	leal	0x2(%rdi), %eax
    00000394: 	cmpl	%eax, %esi
    00000396: 	jle	.Ltmp504 # Offset: 918
    00000398: 	cltq
    0000039a: 	andb	(%rcx,%rax), %r8b
    0000039e: 	leal	0x3(%rdi), %eax
    000003a1: 	cmpl	%eax, %esi
    000003a3: 	jle	.Ltmp504 # Offset: 931
    000003a5: 	cltq
    000003a7: 	andb	(%rcx,%rax), %r8b
    000003ab: 	leal	0x4(%rdi), %eax
    000003ae: 	cmpl	%eax, %esi
    000003b0: 	jle	.Ltmp504 # Offset: 944
    000003b2: 	cltq
    000003b4: 	andb	(%rcx,%rax), %r8b
    000003b8: 	leal	0x5(%rdi), %eax
    000003bb: 	cmpl	%eax, %esi
    000003bd: 	jle	.Ltmp504 # Offset: 957
    000003bf: 	cltq
    000003c1: 	addl	$0x6, %edi
    000003c4: 	andb	(%rcx,%rax), %r8b
    000003c8: 	cmpl	%edi, %esi
    000003ca: 	jle	.Ltmp504 # Offset: 970
    000003cc: 	movslq	%edi, %rdi
    000003cf: 	andb	(%rcx,%rdi), %r8b
.Ltmp504:
    000003d3: 	addq	$0x108, %rsp
    000003da: 	movl	%r8d, %eax
    000003dd: 	popq	%rbx
    000003de: 	andl	%edx, %eax
    000003e0: 	popq	%rbp
    000003e1: 	popq	%r12
    000003e3: 	retq # Offset: 995
    000003e4: 	nopl	(%rax) # Size: 4
.Ltmp500:
    000003e8: 	xorl	%r9d, %r9d
    000003eb: 	jmp	.Ltmp509 # Offset: 1003
.Ltmp501:
    000003f0: 	movl	%edx, %edi
    000003f2: 	movl	%edx, %r10d
    000003f5: 	movl	%edx, %r11d
    000003f8: 	movl	%edx, %r12d
    000003fb: 	movl	%edx, %ebp
    000003fd: 	movl	%edx, %ebx
    000003ff: 	xorl	%eax, %eax
    00000401: 	jmp	.Ltmp510 # Offset: 1025
.Ltmp505:
    00000406: 	movl	%r9d, %edi
    00000409: 	xorl	%eax, %eax
    0000040b: 	jmp	.Ltmp511 # Offset: 1035
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and8IaET_PKS0_iS0_"

Binary Function "_Z7bit_or1IaET_PKS0_iS0_" after disassembly {
  Number      : 91
  State       : disassembled
  Address     : 0x99b0
  Size        : 0x1c1
  MaxSize     : 0x1d0
  Offset      : 0x99b0
  Section     : .text
  Orc Section : .local.text._Z7bit_or1IaET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB090:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp512 # Offset: 6
    0000000c: 	leal	-0x1(%rsi), %eax
    0000000f: 	cmpl	$0xe, %eax
    00000012: 	jbe	.Ltmp513 # Offset: 18
    00000018: 	movl	%esi, %eax
    0000001a: 	movq	%rdi, %rcx
    0000001d: 	pxor	%xmm0, %xmm0
    00000021: 	shrl	$0x4, %eax
    00000024: 	subl	$0x1, %eax
    00000027: 	shlq	$0x4, %rax
    0000002b: 	leaq	0x10(%rdi,%rax), %r8
.Ltmp514:
    00000030: 	movdqu	(%rcx), %xmm2
    00000034: 	addq	$0x10, %rcx
    00000038: 	por	%xmm2, %xmm0
    0000003c: 	cmpq	%rcx, %r8
    0000003f: 	jne	.Ltmp514 # Offset: 63
    00000041: 	movdqa	%xmm0, %xmm1
    00000045: 	movl	%esi, %eax
    00000047: 	psrldq	$0x8, %xmm1
    0000004c: 	andl	$-0x10, %eax
    0000004f: 	por	%xmm1, %xmm0
    00000053: 	movl	%eax, %r8d
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	por	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	por	%xmm1, %xmm0
    00000070: 	movdqa	%xmm0, %xmm1
    00000074: 	psrldq	$0x1, %xmm1
    00000079: 	por	%xmm1, %xmm0
    0000007d: 	movd	%xmm0, %ecx
    00000081: 	orl	%edx, %ecx
    00000083: 	cmpl	%eax, %esi
    00000085: 	je	.Ltmp515 # Offset: 133
.Ltmp518:
    0000008b: 	movl	%esi, %r9d
    0000008e: 	subl	%eax, %r9d
    00000091: 	leal	-0x1(%r9), %edx
    00000095: 	cmpl	$0x6, %edx
    00000098: 	jbe	.Ltmp516 # Offset: 152
    0000009e: 	movq	(%rdi,%rax), %rdx
    000000a2: 	pushq	%rbx
    000000a3: 	movl	%edx, %eax
    000000a5: 	movzbl	%dh, %ebx
    000000a8: 	orl	%ebx, %eax
    000000aa: 	orl	%ecx, %eax
    000000ac: 	movq	%rdx, %rcx
    000000af: 	shrq	$0x10, %rcx
    000000b3: 	orl	%ecx, %eax
    000000b5: 	movq	%rdx, %rcx
    000000b8: 	shrq	$0x18, %rcx
    000000bc: 	orl	%ecx, %eax
    000000be: 	movq	%rdx, %rcx
    000000c1: 	shrq	$0x20, %rcx
    000000c5: 	orl	%ecx, %eax
    000000c7: 	movq	%rdx, %rcx
    000000ca: 	shrq	$0x28, %rcx
    000000ce: 	orl	%ecx, %eax
    000000d0: 	movq	%rdx, %rcx
    000000d3: 	shrq	$0x38, %rdx
    000000d7: 	shrq	$0x30, %rcx
    000000db: 	orl	%ecx, %eax
    000000dd: 	orl	%edx, %eax
    000000df: 	movl	%r9d, %edx
    000000e2: 	andl	$-0x8, %edx
    000000e5: 	addl	%edx, %r8d
    000000e8: 	cmpl	%edx, %r9d
    000000eb: 	je	.Ltmp517 # Offset: 235
    000000ed: 	movslq	%r8d, %rdx
    000000f0: 	orb	(%rdi,%rdx), %al
    000000f3: 	leal	0x1(%r8), %edx
    000000f7: 	cmpl	%edx, %esi
    000000f9: 	jle	.Ltmp517 # Offset: 249
    000000fb: 	movslq	%edx, %rdx
    000000fe: 	orb	(%rdi,%rdx), %al
    00000101: 	leal	0x2(%r8), %edx
    00000105: 	cmpl	%esi, %edx
    00000107: 	jge	.Ltmp517 # Offset: 263
    00000109: 	movslq	%edx, %rdx
    0000010c: 	orb	(%rdi,%rdx), %al
    0000010f: 	leal	0x3(%r8), %edx
    00000113: 	cmpl	%edx, %esi
    00000115: 	jle	.Ltmp517 # Offset: 277
    00000117: 	movslq	%edx, %rdx
    0000011a: 	orb	(%rdi,%rdx), %al
    0000011d: 	leal	0x4(%r8), %edx
    00000121: 	cmpl	%edx, %esi
    00000123: 	jle	.Ltmp517 # Offset: 291
    00000125: 	movslq	%edx, %rdx
    00000128: 	orb	(%rdi,%rdx), %al
    0000012b: 	leal	0x5(%r8), %edx
    0000012f: 	cmpl	%edx, %esi
    00000131: 	jle	.Ltmp517 # Offset: 305
    00000133: 	movslq	%edx, %rdx
    00000136: 	addl	$0x6, %r8d
    0000013a: 	orb	(%rdi,%rdx), %al
    0000013d: 	cmpl	%r8d, %esi
    00000140: 	jle	.Ltmp517 # Offset: 320
    00000142: 	movslq	%r8d, %r8
    00000145: 	orb	(%rdi,%r8), %al
.Ltmp517:
    00000149: 	popq	%rbx
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp512:
    00000150: 	movl	%edx, %eax
    00000152: 	retq # Offset: 338
.Ltmp513:
    00000153: 	movl	%edx, %ecx
    00000155: 	xorl	%eax, %eax
    00000157: 	xorl	%r8d, %r8d
    0000015a: 	jmp	.Ltmp518 # Offset: 346
.Ltmp516:
    0000015f: 	movslq	%r8d, %rdx
    00000162: 	movl	%ecx, %eax
    00000164: 	orb	(%rdi,%rdx), %al
    00000167: 	leal	0x1(%r8), %edx
    0000016b: 	cmpl	%edx, %esi
    0000016d: 	jle	.Ltmp519 # Offset: 365
    0000016f: 	movslq	%edx, %rdx
    00000172: 	orb	(%rdi,%rdx), %al
    00000175: 	leal	0x2(%r8), %edx
    00000179: 	cmpl	%esi, %edx
    0000017b: 	jge	.Ltmp519 # Offset: 379
    0000017d: 	movslq	%edx, %rdx
    00000180: 	orb	(%rdi,%rdx), %al
    00000183: 	leal	0x3(%r8), %edx
    00000187: 	cmpl	%edx, %esi
    00000189: 	jle	.Ltmp519 # Offset: 393
    0000018b: 	movslq	%edx, %rdx
    0000018e: 	orb	(%rdi,%rdx), %al
    00000191: 	leal	0x4(%r8), %edx
    00000195: 	cmpl	%edx, %esi
    00000197: 	jle	.Ltmp519 # Offset: 407
    00000199: 	movslq	%edx, %rdx
    0000019c: 	orb	(%rdi,%rdx), %al
    0000019f: 	leal	0x5(%r8), %edx
    000001a3: 	cmpl	%edx, %esi
    000001a5: 	jle	.Ltmp519 # Offset: 421
    000001a7: 	movslq	%edx, %rdx
    000001aa: 	addl	$0x6, %r8d
    000001ae: 	orb	(%rdi,%rdx), %al
    000001b1: 	cmpl	%r8d, %esi
    000001b4: 	jle	.Ltmp519 # Offset: 436
    000001b6: 	movslq	%r8d, %r8
    000001b9: 	orb	(%rdi,%r8), %al
.Ltmp519:
    000001bd: 	retq # Offset: 445
.Ltmp515:
    000001be: 	movl	%ecx, %eax
    000001c0: 	retq # Offset: 448
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or1IaET_PKS0_iS0_"

Binary Function "_Z7bit_or2IaET_PKS0_iS0_" after disassembly {
  Number      : 92
  State       : disassembled
  Address     : 0x9b80
  Size        : 0x1b7
  MaxSize     : 0x1c0
  Offset      : 0x9b80
  Section     : .text
  Orc Section : .local.text._Z7bit_or2IaET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB091:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movq	%rdi, %r9
    0000000a: 	addq	%rsi, %rdi
    0000000d: 	cmpq	%rdi, %r9
    00000010: 	je	.Ltmp520 # Offset: 16
    00000016: 	leaq	-0x1(%rsi), %r8
    0000001a: 	movq	%r9, %rax
    0000001d: 	cmpq	$0xe, %r8
    00000021: 	jbe	.Ltmp521 # Offset: 33
    00000027: 	movq	%rsi, %rcx
    0000002a: 	pxor	%xmm0, %xmm0
    0000002e: 	andq	$-0x10, %rcx
    00000032: 	addq	%r9, %rcx
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp522:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	por	%xmm2, %xmm0
    00000044: 	cmpq	%rcx, %rax
    00000047: 	jne	.Ltmp522 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movq	%rsi, %rax
    00000050: 	psrldq	$0x8, %xmm1
    00000055: 	andq	$-0x10, %rax
    00000059: 	por	%xmm1, %xmm0
    0000005d: 	leaq	(%r9,%rax), %r8
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	psrldq	$0x4, %xmm1
    0000006a: 	por	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x2, %xmm1
    00000077: 	por	%xmm1, %xmm0
    0000007b: 	movdqa	%xmm0, %xmm1
    0000007f: 	psrldq	$0x1, %xmm1
    00000084: 	por	%xmm1, %xmm0
    00000088: 	movd	%xmm0, %ecx
    0000008c: 	orl	%edx, %ecx
    0000008e: 	cmpq	%rax, %rsi
    00000091: 	je	.Ltmp523 # Offset: 145
.Ltmp526:
    00000097: 	subq	%rax, %rsi
    0000009a: 	leaq	-0x1(%rsi), %rdx
    0000009e: 	cmpq	$0x6, %rdx
    000000a2: 	jbe	.Ltmp524 # Offset: 162
    000000a8: 	movq	(%r9,%rax), %rdx
    000000ac: 	pushq	%rbx
    000000ad: 	movl	%edx, %eax
    000000af: 	movzbl	%dh, %ebx
    000000b2: 	orl	%ebx, %eax
    000000b4: 	orl	%ecx, %eax
    000000b6: 	movq	%rdx, %rcx
    000000b9: 	shrq	$0x10, %rcx
    000000bd: 	orl	%ecx, %eax
    000000bf: 	movq	%rdx, %rcx
    000000c2: 	shrq	$0x18, %rcx
    000000c6: 	orl	%ecx, %eax
    000000c8: 	movq	%rdx, %rcx
    000000cb: 	shrq	$0x20, %rcx
    000000cf: 	orl	%ecx, %eax
    000000d1: 	movq	%rdx, %rcx
    000000d4: 	shrq	$0x28, %rcx
    000000d8: 	orl	%ecx, %eax
    000000da: 	movq	%rdx, %rcx
    000000dd: 	shrq	$0x38, %rdx
    000000e1: 	shrq	$0x30, %rcx
    000000e5: 	orl	%ecx, %eax
    000000e7: 	orl	%edx, %eax
    000000e9: 	movq	%rsi, %rdx
    000000ec: 	andq	$-0x8, %rdx
    000000f0: 	addq	%rdx, %r8
    000000f3: 	cmpq	%rdx, %rsi
    000000f6: 	je	.Ltmp525 # Offset: 246
    000000f8: 	leaq	0x1(%r8), %rdx
    000000fc: 	orb	(%r8), %al
    000000ff: 	cmpq	%rdx, %rdi
    00000102: 	je	.Ltmp525 # Offset: 258
    00000104: 	leaq	0x2(%r8), %rdx
    00000108: 	orb	0x1(%r8), %al
    0000010c: 	cmpq	%rdx, %rdi
    0000010f: 	je	.Ltmp525 # Offset: 271
    00000111: 	leaq	0x3(%r8), %rdx
    00000115: 	orb	0x2(%r8), %al
    00000119: 	cmpq	%rdx, %rdi
    0000011c: 	je	.Ltmp525 # Offset: 284
    0000011e: 	leaq	0x4(%r8), %rdx
    00000122: 	orb	0x3(%r8), %al
    00000126: 	cmpq	%rdx, %rdi
    00000129: 	je	.Ltmp525 # Offset: 297
    0000012b: 	leaq	0x5(%r8), %rdx
    0000012f: 	orb	0x4(%r8), %al
    00000133: 	cmpq	%rdx, %rdi
    00000136: 	je	.Ltmp525 # Offset: 310
    00000138: 	leaq	0x6(%r8), %rdx
    0000013c: 	orb	0x5(%r8), %al
    00000140: 	cmpq	%rdx, %rdi
    00000143: 	je	.Ltmp525 # Offset: 323
    00000145: 	orb	0x6(%r8), %al
.Ltmp525:
    00000149: 	popq	%rbx
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp520:
    00000150: 	movl	%edx, %eax
    00000152: 	retq # Offset: 338
.Ltmp521:
    00000153: 	movl	%edx, %ecx
    00000155: 	movq	%r9, %r8
    00000158: 	xorl	%eax, %eax
    0000015a: 	jmp	.Ltmp526 # Offset: 346
.Ltmp524:
    0000015f: 	movzbl	(%r8), %eax
    00000163: 	leaq	0x1(%r8), %rdx
    00000167: 	orl	%ecx, %eax
    00000169: 	cmpq	%rdx, %rdi
    0000016c: 	je	.Ltmp527 # Offset: 364
    0000016e: 	leaq	0x2(%r8), %rdx
    00000172: 	orb	0x1(%r8), %al
    00000176: 	cmpq	%rdx, %rdi
    00000179: 	je	.Ltmp527 # Offset: 377
    0000017b: 	leaq	0x3(%r8), %rdx
    0000017f: 	orb	0x2(%r8), %al
    00000183: 	cmpq	%rdx, %rdi
    00000186: 	je	.Ltmp527 # Offset: 390
    00000188: 	leaq	0x4(%r8), %rdx
    0000018c: 	orb	0x3(%r8), %al
    00000190: 	cmpq	%rdx, %rdi
    00000193: 	je	.Ltmp527 # Offset: 403
    00000195: 	leaq	0x5(%r8), %rdx
    00000199: 	orb	0x4(%r8), %al
    0000019d: 	cmpq	%rdx, %rdi
    000001a0: 	je	.Ltmp527 # Offset: 416
    000001a2: 	leaq	0x6(%r8), %rdx
    000001a6: 	orb	0x5(%r8), %al
    000001aa: 	cmpq	%rdx, %rdi
    000001ad: 	je	.Ltmp527 # Offset: 429
    000001af: 	orb	0x6(%r8), %al
.Ltmp527:
    000001b3: 	retq # Offset: 435
.Ltmp523:
    000001b4: 	movl	%ecx, %eax
    000001b6: 	retq # Offset: 438
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or2IaET_PKS0_iS0_"

Binary Function "_Z7bit_or3IaET_PKS0_iS0_" after disassembly {
  Number      : 93
  State       : disassembled
  Address     : 0x9d40
  Size        : 0x2bb
  MaxSize     : 0x2c0
  Offset      : 0x9d40
  Section     : .text
  Orc Section : .local.text._Z7bit_or3IaET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB092:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	leal	-0x1(%rsi), %edi
    0000000a: 	movl	%esi, %r8d
    0000000d: 	movl	%edx, %eax
    0000000f: 	testl	%edi, %edi
    00000011: 	jle	.Ltmp528 # Offset: 17
    00000017: 	leal	-0x2(%rsi), %r9d
    0000001b: 	movl	%r9d, %esi
    0000001e: 	shrl	%esi
    00000020: 	addl	$0x1, %esi
    00000023: 	cmpl	$0x1d, %r9d
    00000027: 	jbe	.Ltmp529 # Offset: 39
    0000002d: 	movl	%esi, %r9d
    00000030: 	movdqa	DATAat0x33580(%rip), %xmm4
    00000038: 	movq	%rcx, %rax
    0000003b: 	pxor	%xmm2, %xmm2
    0000003f: 	shrl	$0x4, %r9d
    00000043: 	subl	$0x1, %r9d
    00000047: 	shlq	$0x5, %r9
    0000004b: 	leaq	0x20(%rcx,%r9), %r9
.Ltmp530:
    00000050: 	movdqu	(%rax), %xmm0
    00000054: 	movdqu	0x10(%rax), %xmm3
    00000059: 	addq	$0x20, %rax
    0000005d: 	pand	%xmm4, %xmm0
    00000061: 	pand	%xmm4, %xmm3
    00000065: 	movdqa	%xmm0, %xmm1
    00000069: 	movdqu	-0x20(%rax), %xmm0
    0000006e: 	packuswb	%xmm3, %xmm1
    00000072: 	movdqu	-0x10(%rax), %xmm3
    00000077: 	psrlw	$0x8, %xmm0
    0000007c: 	psrlw	$0x8, %xmm3
    00000081: 	packuswb	%xmm3, %xmm0
    00000085: 	por	%xmm1, %xmm0
    00000089: 	por	%xmm0, %xmm2
    0000008d: 	cmpq	%r9, %rax
    00000090: 	jne	.Ltmp530 # Offset: 144
    00000092: 	movdqa	%xmm2, %xmm0
    00000096: 	movl	%esi, %r9d
    00000099: 	psrldq	$0x8, %xmm0
    0000009e: 	andl	$-0x10, %r9d
    000000a2: 	por	%xmm0, %xmm2
    000000a6: 	movdqa	%xmm2, %xmm0
    000000aa: 	psrldq	$0x4, %xmm0
    000000af: 	por	%xmm0, %xmm2
    000000b3: 	movdqa	%xmm2, %xmm0
    000000b7: 	psrldq	$0x2, %xmm0
    000000bc: 	por	%xmm0, %xmm2
    000000c0: 	movdqa	%xmm2, %xmm0
    000000c4: 	psrldq	$0x1, %xmm0
    000000c9: 	por	%xmm0, %xmm2
    000000cd: 	movd	%xmm2, %eax
    000000d1: 	orl	%edx, %eax
    000000d3: 	leal	(%r9,%r9), %edx
    000000d7: 	cmpl	%r9d, %esi
    000000da: 	je	.Ltmp531 # Offset: 218
.Ltmp534:
    000000e0: 	movslq	%edx, %r9
    000000e3: 	orb	(%rcx,%r9), %al
    000000e7: 	orb	0x1(%rcx,%r9), %al
    000000ec: 	leal	0x2(%rdx), %r9d
    000000f0: 	cmpl	%edi, %r9d
    000000f3: 	jge	.Ltmp531 # Offset: 243
    000000f9: 	movslq	%r9d, %r9
    000000fc: 	movzbl	0x1(%rcx,%r9), %r10d
    00000102: 	orb	(%rcx,%r9), %r10b
    00000106: 	movl	%r10d, %r9d
    00000109: 	orl	%r9d, %eax
    0000010c: 	leal	0x4(%rdx), %r9d
    00000110: 	cmpl	%r9d, %edi
    00000113: 	jle	.Ltmp531 # Offset: 275
    00000119: 	movslq	%r9d, %r9
    0000011c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000122: 	orb	(%rcx,%r9), %r10b
    00000126: 	movl	%r10d, %r9d
    00000129: 	orl	%r9d, %eax
    0000012c: 	leal	0x6(%rdx), %r9d
    00000130: 	cmpl	%r9d, %edi
    00000133: 	jle	.Ltmp531 # Offset: 307
    00000139: 	movslq	%r9d, %r9
    0000013c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000142: 	orb	(%rcx,%r9), %r10b
    00000146: 	movl	%r10d, %r9d
    00000149: 	orl	%r9d, %eax
    0000014c: 	leal	0x8(%rdx), %r9d
    00000150: 	cmpl	%r9d, %edi
    00000153: 	jle	.Ltmp531 # Offset: 339
    00000159: 	movslq	%r9d, %r9
    0000015c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000162: 	orb	(%rcx,%r9), %r10b
    00000166: 	movl	%r10d, %r9d
    00000169: 	orl	%r9d, %eax
    0000016c: 	leal	0xa(%rdx), %r9d
    00000170: 	cmpl	%r9d, %edi
    00000173: 	jle	.Ltmp531 # Offset: 371
    00000179: 	movslq	%r9d, %r9
    0000017c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000182: 	orb	(%rcx,%r9), %r10b
    00000186: 	movl	%r10d, %r9d
    00000189: 	orl	%r9d, %eax
    0000018c: 	leal	0xc(%rdx), %r9d
    00000190: 	cmpl	%r9d, %edi
    00000193: 	jle	.Ltmp531 # Offset: 403
    00000199: 	movslq	%r9d, %r9
    0000019c: 	movzbl	0x1(%rcx,%r9), %r10d
    000001a2: 	orb	(%rcx,%r9), %r10b
    000001a6: 	movl	%r10d, %r9d
    000001a9: 	orl	%r9d, %eax
    000001ac: 	leal	0xe(%rdx), %r9d
    000001b0: 	cmpl	%r9d, %edi
    000001b3: 	jle	.Ltmp531 # Offset: 435
    000001b9: 	movslq	%r9d, %r9
    000001bc: 	movzbl	0x1(%rcx,%r9), %r10d
    000001c2: 	orb	(%rcx,%r9), %r10b
    000001c6: 	movl	%r10d, %r9d
    000001c9: 	orl	%r9d, %eax
    000001cc: 	leal	0x10(%rdx), %r9d
    000001d0: 	cmpl	%r9d, %edi
    000001d3: 	jle	.Ltmp531 # Offset: 467
    000001d9: 	movslq	%r9d, %r9
    000001dc: 	movzbl	0x1(%rcx,%r9), %r10d
    000001e2: 	orb	(%rcx,%r9), %r10b
    000001e6: 	movl	%r10d, %r9d
    000001e9: 	orl	%r9d, %eax
    000001ec: 	leal	0x12(%rdx), %r9d
    000001f0: 	cmpl	%r9d, %edi
    000001f3: 	jle	.Ltmp531 # Offset: 499
    000001f9: 	movslq	%r9d, %r9
    000001fc: 	movzbl	0x1(%rcx,%r9), %r10d
    00000202: 	orb	(%rcx,%r9), %r10b
    00000206: 	movl	%r10d, %r9d
    00000209: 	orl	%r9d, %eax
    0000020c: 	leal	0x14(%rdx), %r9d
    00000210: 	cmpl	%r9d, %edi
    00000213: 	jle	.Ltmp531 # Offset: 531
    00000219: 	movslq	%r9d, %r9
    0000021c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000222: 	orb	(%rcx,%r9), %r10b
    00000226: 	movl	%r10d, %r9d
    00000229: 	orl	%r9d, %eax
    0000022c: 	leal	0x16(%rdx), %r9d
    00000230: 	cmpl	%r9d, %edi
    00000233: 	jle	.Ltmp531 # Offset: 563
    00000235: 	movslq	%r9d, %r9
    00000238: 	movzbl	0x1(%rcx,%r9), %r10d
    0000023e: 	orb	(%rcx,%r9), %r10b
    00000242: 	movl	%r10d, %r9d
    00000245: 	orl	%r9d, %eax
    00000248: 	leal	0x18(%rdx), %r9d
    0000024c: 	cmpl	%r9d, %edi
    0000024f: 	jle	.Ltmp531 # Offset: 591
    00000251: 	movslq	%r9d, %r9
    00000254: 	movzbl	0x1(%rcx,%r9), %r10d
    0000025a: 	orb	(%rcx,%r9), %r10b
    0000025e: 	movl	%r10d, %r9d
    00000261: 	orl	%r9d, %eax
    00000264: 	leal	0x1a(%rdx), %r9d
    00000268: 	cmpl	%r9d, %edi
    0000026b: 	jle	.Ltmp531 # Offset: 619
    0000026d: 	movslq	%r9d, %r9
    00000270: 	addl	$0x1c, %edx
    00000273: 	movzbl	0x1(%rcx,%r9), %r10d
    00000279: 	orb	(%rcx,%r9), %r10b
    0000027d: 	movl	%r10d, %r9d
    00000280: 	orl	%r9d, %eax
    00000283: 	cmpl	%edx, %edi
    00000285: 	jle	.Ltmp531 # Offset: 645
    00000287: 	movslq	%edx, %rdx
    0000028a: 	movzbl	0x1(%rcx,%rdx), %edi
    0000028f: 	orb	(%rcx,%rdx), %dil
    00000293: 	movl	%edi, %edx
    00000295: 	orl	%edx, %eax
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp531:
    000002a0: 	addl	%esi, %esi
.Ltmp533:
    000002a2: 	cmpl	%r8d, %esi
    000002a5: 	jge	.Ltmp532 # Offset: 677
    000002a7: 	movslq	%esi, %rsi
    000002aa: 	orb	(%rcx,%rsi), %al
.Ltmp532:
    000002ad: 	retq # Offset: 685
    000002ae: 	nop # Size: 2
.Ltmp528:
    000002b0: 	xorl	%esi, %esi
    000002b2: 	jmp	.Ltmp533 # Offset: 690
.Ltmp529:
    000002b4: 	xorl	%edx, %edx
    000002b6: 	jmp	.Ltmp534 # Offset: 694
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or3IaET_PKS0_iS0_"

Binary Function "_Z7bit_or4IaET_PKS0_iS0_" after disassembly {
  Number      : 94
  State       : disassembled
  Address     : 0xa000
  Size        : 0x41b
  MaxSize     : 0x420
  Offset      : 0xa000
  Section     : .text
  Orc Section : .local.text._Z7bit_or4IaET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB093:
    00000000: 	endbr64
    00000004: 	leal	-0x3(%rsi), %r8d
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%edx, %eax
    0000000d: 	movl	%esi, %edi
    0000000f: 	testl	%r8d, %r8d
    00000012: 	jle	.Ltmp535 # Offset: 18
    00000018: 	leal	-0x4(%rsi), %r9d
    0000001c: 	movl	%r9d, %esi
    0000001f: 	shrl	$0x2, %esi
    00000022: 	addl	$0x1, %esi
    00000025: 	cmpl	$0x3b, %r9d
    00000029: 	jbe	.Ltmp536 # Offset: 41
    0000002f: 	movl	%esi, %r9d
    00000032: 	movdqa	DATAat0x33580(%rip), %xmm5
    0000003a: 	movq	%rcx, %rax
    0000003d: 	pxor	%xmm2, %xmm2
    00000041: 	shrl	$0x4, %r9d
    00000045: 	subl	$0x1, %r9d
    00000049: 	shlq	$0x6, %r9
    0000004d: 	leaq	0x40(%rcx,%r9), %r9
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp537:
    00000058: 	movdqu	(%rax), %xmm1
    0000005c: 	movdqu	0x10(%rax), %xmm0
    00000061: 	movdqa	%xmm5, %xmm7
    00000065: 	addq	$0x40, %rax
    00000069: 	movdqu	-0x20(%rax), %xmm6
    0000006e: 	movdqu	-0x10(%rax), %xmm3
    00000073: 	pand	%xmm5, %xmm1
    00000077: 	pand	%xmm5, %xmm0
    0000007b: 	movdqa	%xmm1, %xmm4
    0000007f: 	movdqu	-0x30(%rax), %xmm1
    00000084: 	pand	%xmm5, %xmm6
    00000088: 	packuswb	%xmm0, %xmm4
    0000008c: 	movdqu	-0x40(%rax), %xmm0
    00000091: 	psrlw	$0x8, %xmm3
    00000096: 	psrlw	$0x8, %xmm1
    0000009b: 	psrlw	$0x8, %xmm0
    000000a0: 	packuswb	%xmm1, %xmm0
    000000a4: 	movdqu	-0x10(%rax), %xmm1
    000000a9: 	pand	%xmm5, %xmm1
    000000ad: 	packuswb	%xmm1, %xmm6
    000000b1: 	movdqu	-0x20(%rax), %xmm1
    000000b6: 	psrlw	$0x8, %xmm1
    000000bb: 	packuswb	%xmm3, %xmm1
    000000bf: 	movdqa	%xmm5, %xmm3
    000000c3: 	pand	%xmm1, %xmm7
    000000c7: 	psrlw	$0x8, %xmm1
    000000cc: 	pand	%xmm0, %xmm3
    000000d0: 	psrlw	$0x8, %xmm0
    000000d5: 	packuswb	%xmm7, %xmm3
    000000d9: 	movdqa	%xmm5, %xmm7
    000000dd: 	packuswb	%xmm1, %xmm0
    000000e1: 	movdqa	%xmm5, %xmm1
    000000e5: 	pand	%xmm6, %xmm7
    000000e9: 	pand	%xmm4, %xmm1
    000000ed: 	psrlw	$0x8, %xmm6
    000000f2: 	por	%xmm3, %xmm0
    000000f6: 	movdqa	%xmm1, %xmm3
    000000fa: 	movdqa	%xmm4, %xmm1
    000000fe: 	psrlw	$0x8, %xmm1
    00000103: 	packuswb	%xmm7, %xmm3
    00000107: 	packuswb	%xmm6, %xmm1
    0000010b: 	por	%xmm3, %xmm1
    0000010f: 	por	%xmm1, %xmm0
    00000113: 	por	%xmm0, %xmm2
    00000117: 	cmpq	%r9, %rax
    0000011a: 	jne	.Ltmp537 # Offset: 282
    00000120: 	movdqa	%xmm2, %xmm0
    00000124: 	movl	%esi, %r9d
    00000127: 	psrldq	$0x8, %xmm0
    0000012c: 	andl	$-0x10, %r9d
    00000130: 	por	%xmm0, %xmm2
    00000134: 	movdqa	%xmm2, %xmm0
    00000138: 	psrldq	$0x4, %xmm0
    0000013d: 	por	%xmm0, %xmm2
    00000141: 	movdqa	%xmm2, %xmm0
    00000145: 	psrldq	$0x2, %xmm0
    0000014a: 	por	%xmm0, %xmm2
    0000014e: 	movdqa	%xmm2, %xmm0
    00000152: 	psrldq	$0x1, %xmm0
    00000157: 	por	%xmm0, %xmm2
    0000015b: 	movd	%xmm2, %eax
    0000015f: 	orl	%edx, %eax
    00000161: 	leal	(,%r9,4), %edx
    00000169: 	cmpl	%esi, %r9d
    0000016c: 	je	.Ltmp538 # Offset: 364
.Ltmp541:
    00000172: 	movslq	%edx, %r9
    00000175: 	orb	(%rcx,%r9), %al
    00000179: 	orb	0x1(%rcx,%r9), %al
    0000017e: 	orb	0x2(%rcx,%r9), %al
    00000183: 	orb	0x3(%rcx,%r9), %al
    00000188: 	leal	0x4(%rdx), %r9d
    0000018c: 	cmpl	%r9d, %r8d
    0000018f: 	jle	.Ltmp538 # Offset: 399
    00000195: 	movslq	%r9d, %r9
    00000198: 	movzbl	0x1(%rcx,%r9), %r10d
    0000019e: 	orb	0x2(%rcx,%r9), %r10b
    000001a3: 	orb	(%rcx,%r9), %r10b
    000001a7: 	orb	0x3(%rcx,%r9), %r10b
    000001ac: 	movl	%r10d, %r9d
    000001af: 	orl	%r9d, %eax
    000001b2: 	leal	0x8(%rdx), %r9d
    000001b6: 	cmpl	%r9d, %r8d
    000001b9: 	jle	.Ltmp538 # Offset: 441
    000001bf: 	movslq	%r9d, %r9
    000001c2: 	movzbl	0x1(%rcx,%r9), %r10d
    000001c8: 	orb	0x2(%rcx,%r9), %r10b
    000001cd: 	orb	(%rcx,%r9), %r10b
    000001d1: 	orb	0x3(%rcx,%r9), %r10b
    000001d6: 	movl	%r10d, %r9d
    000001d9: 	orl	%r9d, %eax
    000001dc: 	leal	0xc(%rdx), %r9d
    000001e0: 	cmpl	%r9d, %r8d
    000001e3: 	jle	.Ltmp538 # Offset: 483
    000001e9: 	movslq	%r9d, %r9
    000001ec: 	movzbl	0x1(%rcx,%r9), %r10d
    000001f2: 	orb	0x2(%rcx,%r9), %r10b
    000001f7: 	orb	(%rcx,%r9), %r10b
    000001fb: 	orb	0x3(%rcx,%r9), %r10b
    00000200: 	movl	%r10d, %r9d
    00000203: 	orl	%r9d, %eax
    00000206: 	leal	0x10(%rdx), %r9d
    0000020a: 	cmpl	%r9d, %r8d
    0000020d: 	jle	.Ltmp538 # Offset: 525
    00000213: 	movslq	%r9d, %r9
    00000216: 	movzbl	0x1(%rcx,%r9), %r10d
    0000021c: 	orb	0x2(%rcx,%r9), %r10b
    00000221: 	orb	(%rcx,%r9), %r10b
    00000225: 	orb	0x3(%rcx,%r9), %r10b
    0000022a: 	movl	%r10d, %r9d
    0000022d: 	orl	%r9d, %eax
    00000230: 	leal	0x14(%rdx), %r9d
    00000234: 	cmpl	%r9d, %r8d
    00000237: 	jle	.Ltmp538 # Offset: 567
    0000023d: 	movslq	%r9d, %r9
    00000240: 	movzbl	0x1(%rcx,%r9), %r10d
    00000246: 	orb	0x2(%rcx,%r9), %r10b
    0000024b: 	orb	(%rcx,%r9), %r10b
    0000024f: 	orb	0x3(%rcx,%r9), %r10b
    00000254: 	movl	%r10d, %r9d
    00000257: 	orl	%r9d, %eax
    0000025a: 	leal	0x18(%rdx), %r9d
    0000025e: 	cmpl	%r9d, %r8d
    00000261: 	jle	.Ltmp538 # Offset: 609
    00000267: 	movslq	%r9d, %r9
    0000026a: 	movzbl	0x1(%rcx,%r9), %r10d
    00000270: 	orb	0x2(%rcx,%r9), %r10b
    00000275: 	orb	(%rcx,%r9), %r10b
    00000279: 	orb	0x3(%rcx,%r9), %r10b
    0000027e: 	movl	%r10d, %r9d
    00000281: 	orl	%r9d, %eax
    00000284: 	leal	0x1c(%rdx), %r9d
    00000288: 	cmpl	%r9d, %r8d
    0000028b: 	jle	.Ltmp538 # Offset: 651
    00000291: 	movslq	%r9d, %r9
    00000294: 	movzbl	0x1(%rcx,%r9), %r10d
    0000029a: 	orb	0x2(%rcx,%r9), %r10b
    0000029f: 	orb	(%rcx,%r9), %r10b
    000002a3: 	orb	0x3(%rcx,%r9), %r10b
    000002a8: 	movl	%r10d, %r9d
    000002ab: 	orl	%r9d, %eax
    000002ae: 	leal	0x20(%rdx), %r9d
    000002b2: 	cmpl	%r9d, %r8d
    000002b5: 	jle	.Ltmp538 # Offset: 693
    000002bb: 	movslq	%r9d, %r9
    000002be: 	movzbl	0x1(%rcx,%r9), %r10d
    000002c4: 	orb	0x2(%rcx,%r9), %r10b
    000002c9: 	orb	(%rcx,%r9), %r10b
    000002cd: 	orb	0x3(%rcx,%r9), %r10b
    000002d2: 	movl	%r10d, %r9d
    000002d5: 	orl	%r9d, %eax
    000002d8: 	leal	0x24(%rdx), %r9d
    000002dc: 	cmpl	%r9d, %r8d
    000002df: 	jle	.Ltmp538 # Offset: 735
    000002e5: 	movslq	%r9d, %r9
    000002e8: 	movzbl	0x1(%rcx,%r9), %r10d
    000002ee: 	orb	0x2(%rcx,%r9), %r10b
    000002f3: 	orb	(%rcx,%r9), %r10b
    000002f7: 	orb	0x3(%rcx,%r9), %r10b
    000002fc: 	movl	%r10d, %r9d
    000002ff: 	orl	%r9d, %eax
    00000302: 	leal	0x28(%rdx), %r9d
    00000306: 	cmpl	%r9d, %r8d
    00000309: 	jle	.Ltmp538 # Offset: 777
    0000030f: 	movslq	%r9d, %r9
    00000312: 	movzbl	0x1(%rcx,%r9), %r10d
    00000318: 	orb	0x2(%rcx,%r9), %r10b
    0000031d: 	orb	(%rcx,%r9), %r10b
    00000321: 	orb	0x3(%rcx,%r9), %r10b
    00000326: 	movl	%r10d, %r9d
    00000329: 	orl	%r9d, %eax
    0000032c: 	leal	0x2c(%rdx), %r9d
    00000330: 	cmpl	%r9d, %r8d
    00000333: 	jle	.Ltmp538 # Offset: 819
    00000339: 	movslq	%r9d, %r9
    0000033c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000342: 	orb	0x2(%rcx,%r9), %r10b
    00000347: 	orb	(%rcx,%r9), %r10b
    0000034b: 	orb	0x3(%rcx,%r9), %r10b
    00000350: 	movl	%r10d, %r9d
    00000353: 	orl	%r9d, %eax
    00000356: 	leal	0x30(%rdx), %r9d
    0000035a: 	cmpl	%r9d, %r8d
    0000035d: 	jle	.Ltmp538 # Offset: 861
    0000035f: 	movslq	%r9d, %r9
    00000362: 	movzbl	0x1(%rcx,%r9), %r10d
    00000368: 	orb	0x2(%rcx,%r9), %r10b
    0000036d: 	orb	(%rcx,%r9), %r10b
    00000371: 	orb	0x3(%rcx,%r9), %r10b
    00000376: 	movl	%r10d, %r9d
    00000379: 	orl	%r9d, %eax
    0000037c: 	leal	0x34(%rdx), %r9d
    00000380: 	cmpl	%r9d, %r8d
    00000383: 	jle	.Ltmp538 # Offset: 899
    00000385: 	movslq	%r9d, %r9
    00000388: 	addl	$0x38, %edx
    0000038b: 	movzbl	0x1(%rcx,%r9), %r10d
    00000391: 	orb	0x2(%rcx,%r9), %r10b
    00000396: 	orb	(%rcx,%r9), %r10b
    0000039a: 	orb	0x3(%rcx,%r9), %r10b
    0000039f: 	movl	%r10d, %r9d
    000003a2: 	orl	%r9d, %eax
    000003a5: 	cmpl	%edx, %r8d
    000003a8: 	jle	.Ltmp538 # Offset: 936
    000003aa: 	movslq	%edx, %rdx
    000003ad: 	movzbl	0x2(%rcx,%rdx), %r8d
    000003b3: 	orb	0x1(%rcx,%rdx), %r8b
    000003b8: 	orb	(%rcx,%rdx), %r8b
    000003bc: 	orb	0x3(%rcx,%rdx), %r8b
    000003c1: 	movl	%r8d, %edx
    000003c4: 	orl	%edx, %eax
    000003c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp538:
    000003d0: 	leal	(,%rsi,4), %edx
.Ltmp540:
    000003d7: 	cmpl	%edx, %edi
    000003d9: 	jle	.Ltmp539 # Offset: 985
    000003db: 	movslq	%edx, %rsi
    000003de: 	orb	(%rcx,%rsi), %al
    000003e1: 	leal	0x1(%rdx), %esi
    000003e4: 	cmpl	%edi, %esi
    000003e6: 	jge	.Ltmp539 # Offset: 998
    000003e8: 	movslq	%esi, %rsi
    000003eb: 	orb	(%rcx,%rsi), %al
    000003ee: 	leal	0x2(%rdx), %esi
    000003f1: 	cmpl	%edi, %esi
    000003f3: 	jge	.Ltmp539 # Offset: 1011
    000003f5: 	movslq	%esi, %rsi
    000003f8: 	addl	$0x3, %edx
    000003fb: 	orb	(%rcx,%rsi), %al
    000003fe: 	cmpl	%edx, %edi
    00000400: 	jle	.Ltmp539 # Offset: 1024
    00000402: 	movslq	%edx, %rdx
    00000405: 	orb	(%rcx,%rdx), %al
.Ltmp539:
    00000408: 	retq # Offset: 1032
    00000409: 	nopl	(%rax) # Size: 7
.Ltmp535:
    00000410: 	xorl	%edx, %edx
    00000412: 	jmp	.Ltmp540 # Offset: 1042
.Ltmp536:
    00000414: 	xorl	%edx, %edx
    00000416: 	jmp	.Ltmp541 # Offset: 1046
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or4IaET_PKS0_iS0_"

Binary Function "_Z7bit_or5IaET_PKS0_iS0_" after disassembly {
  Number      : 95
  State       : disassembled
  Address     : 0xa420
  Size        : 0x3d0
  MaxSize     : 0x3d0
  Offset      : 0xa420
  Section     : .text
  Orc Section : .local.text._Z7bit_or5IaET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB094:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	leal	-0x1(%rsi), %r8d
    00000009: 	movl	%edx, %eax
    0000000b: 	pushq	%rbx
    0000000c: 	subq	$0x110, %rsp
    00000013: 	testl	%r8d, %r8d
    00000016: 	jle	.Ltmp542 # Offset: 22
    0000001c: 	leal	-0x2(%rsi), %ecx
    0000001f: 	movl	%ecx, %r9d
    00000022: 	shrl	%r9d
    00000025: 	leal	0x1(%r9), %r10d
    00000029: 	cmpl	$0xd, %ecx
    0000002c: 	jbe	.Ltmp543 # Offset: 44
    00000032: 	movq	$0x0, -0x70(%rsp)
    0000003b: 	movzbl	%dl, %ecx
    0000003e: 	movl	%r10d, %edx
    00000041: 	movq	%rcx, %rax
    00000044: 	shrl	$0x3, %edx
    00000047: 	shlq	$0x8, %rax
    0000004b: 	subl	$0x1, %edx
    0000004e: 	orq	%rcx, %rax
    00000051: 	shlq	$0x4, %rdx
    00000055: 	movq	%rax, -0x78(%rsp)
    0000005a: 	movdqa	-0x78(%rsp), %xmm0
    00000060: 	movq	%rdi, %rax
    00000063: 	leaq	0x10(%rdi,%rdx), %rdx
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp544:
    00000070: 	movdqu	(%rax), %xmm2
    00000074: 	addq	$0x10, %rax
    00000078: 	por	%xmm2, %xmm0
    0000007c: 	cmpq	%rax, %rdx
    0000007f: 	jne	.Ltmp544 # Offset: 127
    00000081: 	movl	%r10d, %edx
    00000084: 	movd	%xmm0, %eax
    00000088: 	movaps	%xmm0, 0xf8(%rsp)
    00000090: 	orb	0xfa(%rsp), %al
    00000097: 	andl	$-0x8, %edx
    0000009a: 	movaps	%xmm0, 0xe8(%rsp)
    000000a2: 	orb	0xec(%rsp), %al
    000000a9: 	movaps	%xmm0, 0xd8(%rsp)
    000000b1: 	leal	(%rdx,%rdx), %r11d
    000000b5: 	orb	0xde(%rsp), %al
    000000bc: 	movaps	%xmm0, 0xc8(%rsp)
    000000c4: 	orb	0xd0(%rsp), %al
    000000cb: 	movaps	%xmm0, 0xb8(%rsp)
    000000d3: 	orb	0xc2(%rsp), %al
    000000da: 	movaps	%xmm0, 0xa8(%rsp)
    000000e2: 	orb	0xb4(%rsp), %al
    000000e9: 	movaps	%xmm0, 0x98(%rsp)
    000000f1: 	orb	0xa6(%rsp), %al
    000000f8: 	movaps	%xmm0, 0x88(%rsp)
    00000100: 	movaps	%xmm0, 0x78(%rsp)
    00000105: 	movzbl	0x7b(%rsp), %ecx
    0000010a: 	orb	0x89(%rsp), %cl
    00000111: 	movaps	%xmm0, 0x68(%rsp)
    00000116: 	orb	0x6d(%rsp), %cl
    0000011a: 	movaps	%xmm0, 0x58(%rsp)
    0000011f: 	orb	0x5f(%rsp), %cl
    00000123: 	movaps	%xmm0, 0x48(%rsp)
    00000128: 	orb	0x51(%rsp), %cl
    0000012c: 	movaps	%xmm0, 0x38(%rsp)
    00000131: 	orb	0x43(%rsp), %cl
    00000135: 	movaps	%xmm0, 0x28(%rsp)
    0000013a: 	orb	0x35(%rsp), %cl
    0000013e: 	movaps	%xmm0, 0x18(%rsp)
    00000143: 	orb	0x27(%rsp), %cl
    00000147: 	cmpl	%edx, %r10d
    0000014a: 	je	.Ltmp545 # Offset: 330
.Ltmp553:
    00000150: 	subl	%edx, %r9d
    00000153: 	leal	0x1(%r9), %ebx
    00000157: 	cmpl	$0x2, %r9d
    0000015b: 	jbe	.Ltmp546 # Offset: 347
    00000161: 	movzbl	%cl, %ecx
    00000164: 	movzbl	%al, %eax
    00000167: 	movq	(%rdi,%rdx,2), %xmm0
    0000016c: 	shlq	$0x8, %rcx
    00000170: 	orq	%rax, %rcx
    00000173: 	movq	%rcx, %xmm3
    00000178: 	por	%xmm0, %xmm3
    0000017c: 	movq	%xmm3, %rdx
    00000181: 	movq	%xmm3, %rcx
    00000186: 	movq	%xmm3, %r9
    0000018b: 	movq	%xmm3, 0x10(%rsp)
    00000191: 	shrq	$0x10, %rcx
    00000195: 	movl	%edx, %eax
    00000197: 	shrq	$0x18, %r9
    0000019b: 	movq	%xmm3, (%rsp)
    000001a0: 	orl	%ecx, %eax
    000001a2: 	movq	%xmm3, %rcx
    000001a7: 	movq	%xmm3, 0x8(%rsp)
    000001ad: 	shrq	$0x20, %rcx
    000001b1: 	movq	%xmm3, -0x8(%rsp)
    000001b7: 	orl	%ecx, %eax
    000001b9: 	movq	%xmm3, %rcx
    000001be: 	movq	%xmm3, -0x10(%rsp)
    000001c4: 	shrq	$0x30, %rcx
    000001c8: 	movq	%xmm3, -0x18(%rsp)
    000001ce: 	orl	%ecx, %eax
    000001d0: 	movzbl	%dh, %ecx
    000001d3: 	movl	%ebx, %edx
    000001d5: 	movq	%xmm3, -0x20(%rsp)
    000001db: 	orl	%r9d, %ecx
    000001de: 	movq	%xmm3, %r9
    000001e3: 	andl	$-0x4, %edx
    000001e6: 	movq	%xmm3, -0x28(%rsp)
    000001ec: 	shrq	$0x28, %r9
    000001f0: 	leal	(%r11,%rdx,2), %r11d
    000001f4: 	orl	%r9d, %ecx
    000001f7: 	movq	%xmm3, %r9
    000001fc: 	shrq	$0x38, %r9
    00000200: 	orl	%r9d, %ecx
    00000203: 	cmpl	%edx, %ebx
    00000205: 	je	.Ltmp545 # Offset: 517
.Ltmp546:
    00000207: 	movslq	%r11d, %rdx
    0000020a: 	orb	(%rdi,%rdx), %al
    0000020d: 	orb	0x1(%rdi,%rdx), %cl
    00000211: 	leal	0x2(%r11), %edx
    00000215: 	cmpl	%edx, %r8d
    00000218: 	jle	.Ltmp545 # Offset: 536
    0000021a: 	movslq	%edx, %rdx
    0000021d: 	addl	$0x4, %r11d
    00000221: 	orb	(%rdi,%rdx), %al
    00000224: 	orb	0x1(%rdi,%rdx), %cl
    00000228: 	cmpl	%r11d, %r8d
    0000022b: 	jle	.Ltmp545 # Offset: 555
    0000022d: 	movslq	%r11d, %r11
    00000230: 	orb	(%rdi,%r11), %al
    00000234: 	orb	0x1(%rdi,%r11), %cl
.Ltmp545:
    00000239: 	addl	%r10d, %r10d
.Ltmp552:
    0000023c: 	cmpl	%r10d, %esi
    0000023f: 	jle	.Ltmp547 # Offset: 575
    00000245: 	movl	%esi, %r9d
    00000248: 	subl	%r10d, %r9d
    0000024b: 	leal	-0x1(%r9), %edx
    0000024f: 	cmpl	$0xe, %edx
    00000252: 	jbe	.Ltmp548 # Offset: 594
    00000258: 	movl	%r9d, %edx
    0000025b: 	movslq	%r10d, %r8
    0000025e: 	pxor	%xmm0, %xmm0
    00000262: 	shrl	$0x4, %edx
    00000265: 	addq	%rdi, %r8
    00000268: 	leal	-0x1(%rdx), %r11d
    0000026c: 	leaq	0x10(%r8), %rdx
    00000270: 	shlq	$0x4, %r11
    00000274: 	addq	%rdx, %r11
    00000277: 	jmp	.Ltmp549 # Offset: 631
    00000279: 	nopl	(%rax) # Size: 7
.Ltmp550:
    00000280: 	addq	$0x10, %rdx
.Ltmp549:
    00000284: 	movdqu	(%r8), %xmm1
    00000289: 	movq	%rdx, %r8
    0000028c: 	por	%xmm1, %xmm0
    00000290: 	cmpq	%r11, %rdx
    00000293: 	jne	.Ltmp550 # Offset: 659
    00000295: 	movdqa	%xmm0, %xmm1
    00000299: 	psrldq	$0x8, %xmm1
    0000029e: 	por	%xmm1, %xmm0
    000002a2: 	movdqa	%xmm0, %xmm1
    000002a6: 	psrldq	$0x4, %xmm1
    000002ab: 	por	%xmm1, %xmm0
    000002af: 	movdqa	%xmm0, %xmm1
    000002b3: 	psrldq	$0x2, %xmm1
    000002b8: 	por	%xmm1, %xmm0
    000002bc: 	movdqa	%xmm0, %xmm1
    000002c0: 	psrldq	$0x1, %xmm1
    000002c5: 	por	%xmm1, %xmm0
    000002c9: 	movd	%xmm0, %edx
    000002cd: 	orl	%edx, %eax
    000002cf: 	movl	%r9d, %edx
    000002d2: 	andl	$-0x10, %edx
    000002d5: 	leal	(%rdx,%r10), %r8d
    000002d9: 	cmpl	%r9d, %edx
    000002dc: 	je	.Ltmp547 # Offset: 732
.Ltmp554:
    000002e2: 	subl	%edx, %r9d
    000002e5: 	leal	-0x1(%r9), %r11d
    000002e9: 	cmpl	$0x6, %r11d
    000002ed: 	jbe	.Ltmp551 # Offset: 749
    000002ef: 	movslq	%r10d, %r10
    000002f2: 	addq	%rdi, %r10
    000002f5: 	movq	(%r10,%rdx), %rbx
    000002f9: 	movl	%ebx, %edx
    000002fb: 	movzbl	%bh, %ebp
    000002fe: 	orl	%ebp, %edx
    00000300: 	orl	%eax, %edx
    00000302: 	movq	%rbx, %rax
    00000305: 	shrq	$0x10, %rax
    00000309: 	orl	%eax, %edx
    0000030b: 	movq	%rbx, %rax
    0000030e: 	shrq	$0x18, %rax
    00000312: 	orl	%eax, %edx
    00000314: 	movq	%rbx, %rax
    00000317: 	shrq	$0x20, %rax
    0000031b: 	orl	%eax, %edx
    0000031d: 	movq	%rbx, %rax
    00000320: 	shrq	$0x28, %rax
    00000324: 	orl	%eax, %edx
    00000326: 	movq	%rbx, %rax
    00000329: 	shrq	$0x38, %rbx
    0000032d: 	shrq	$0x30, %rax
    00000331: 	orl	%eax, %edx
    00000333: 	movl	%edx, %eax
    00000335: 	movl	%r9d, %edx
    00000338: 	andl	$-0x8, %edx
    0000033b: 	orl	%ebx, %eax
    0000033d: 	addl	%edx, %r8d
    00000340: 	cmpl	%edx, %r9d
    00000343: 	je	.Ltmp547 # Offset: 835
.Ltmp551:
    00000345: 	movslq	%r8d, %rdx
    00000348: 	orb	(%rdi,%rdx), %al
    0000034b: 	leal	0x1(%r8), %edx
    0000034f: 	cmpl	%edx, %esi
    00000351: 	jle	.Ltmp547 # Offset: 849
    00000353: 	movslq	%edx, %rdx
    00000356: 	orb	(%rdi,%rdx), %al
    00000359: 	leal	0x2(%r8), %edx
    0000035d: 	cmpl	%edx, %esi
    0000035f: 	jle	.Ltmp547 # Offset: 863
    00000361: 	movslq	%edx, %rdx
    00000364: 	orb	(%rdi,%rdx), %al
    00000367: 	leal	0x3(%r8), %edx
    0000036b: 	cmpl	%edx, %esi
    0000036d: 	jle	.Ltmp547 # Offset: 877
    0000036f: 	movslq	%edx, %rdx
    00000372: 	orb	(%rdi,%rdx), %al
    00000375: 	leal	0x4(%r8), %edx
    00000379: 	cmpl	%edx, %esi
    0000037b: 	jle	.Ltmp547 # Offset: 891
    0000037d: 	movslq	%edx, %rdx
    00000380: 	orb	(%rdi,%rdx), %al
    00000383: 	leal	0x5(%r8), %edx
    00000387: 	cmpl	%edx, %esi
    00000389: 	jle	.Ltmp547 # Offset: 905
    0000038b: 	movslq	%edx, %rdx
    0000038e: 	addl	$0x6, %r8d
    00000392: 	orb	(%rdi,%rdx), %al
    00000395: 	cmpl	%r8d, %esi
    00000398: 	jle	.Ltmp547 # Offset: 920
    0000039a: 	movslq	%r8d, %r8
    0000039d: 	orb	(%rdi,%r8), %al
.Ltmp547:
    000003a1: 	addq	$0x110, %rsp
    000003a8: 	orl	%ecx, %eax
    000003aa: 	popq	%rbx
    000003ab: 	popq	%rbp
    000003ac: 	retq # Offset: 940
    000003ad: 	nopl	(%rax) # Size: 3
.Ltmp542:
    000003b0: 	movl	%edx, %ecx
    000003b2: 	xorl	%r10d, %r10d
    000003b5: 	jmp	.Ltmp552 # Offset: 949
.Ltmp543:
    000003ba: 	movl	%edx, %ecx
    000003bc: 	xorl	%r11d, %r11d
    000003bf: 	xorl	%edx, %edx
    000003c1: 	jmp	.Ltmp553 # Offset: 961
.Ltmp548:
    000003c6: 	movl	%r10d, %r8d
    000003c9: 	xorl	%edx, %edx
    000003cb: 	jmp	.Ltmp554 # Offset: 971
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or5IaET_PKS0_iS0_"

Binary Function "_Z7bit_or6IaET_PKS0_iS0_" after disassembly {
  Number      : 96
  State       : disassembled
  Address     : 0xa7f0
  Size        : 0x3e5
  MaxSize     : 0x3f0
  Offset      : 0xa7f0
  Section     : .text
  Orc Section : .local.text._Z7bit_or6IaET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB095:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movl	%esi, %r8d
    00000008: 	movl	%edx, %eax
    0000000a: 	pushq	%rbx
    0000000b: 	subq	$0x110, %rsp
    00000012: 	cmpl	$0x3, %esi
    00000015: 	jle	.Ltmp555 # Offset: 21
    0000001b: 	leal	-0x4(%rsi), %ecx
    0000001e: 	movl	%ecx, %ebx
    00000020: 	shrl	$0x2, %ebx
    00000023: 	leal	0x1(%rbx), %r9d
    00000027: 	cmpl	$0xb, %ecx
    0000002a: 	jbe	.Ltmp556 # Offset: 42
    00000030: 	movq	$0x0, -0x70(%rsp)
    00000039: 	movzbl	%dl, %edx
    0000003c: 	movq	%rdx, %rax
    0000003f: 	shlq	$0x8, %rax
    00000043: 	orq	%rdx, %rax
    00000046: 	shlq	$0x8, %rax
    0000004a: 	orq	%rdx, %rax
    0000004d: 	shlq	$0x8, %rax
    00000051: 	orq	%rdx, %rax
    00000054: 	movl	%r9d, %edx
    00000057: 	shrl	$0x2, %edx
    0000005a: 	movq	%rax, -0x78(%rsp)
    0000005f: 	movdqa	-0x78(%rsp), %xmm0
    00000065: 	movq	%rdi, %rax
    00000068: 	subl	$0x1, %edx
    0000006b: 	shlq	$0x4, %rdx
    0000006f: 	leaq	0x10(%rdi,%rdx), %rdx
    00000074: 	nopl	(%rax) # Size: 4
.Ltmp557:
    00000078: 	movdqu	(%rax), %xmm2
    0000007c: 	addq	$0x10, %rax
    00000080: 	por	%xmm2, %xmm0
    00000084: 	cmpq	%rax, %rdx
    00000087: 	jne	.Ltmp557 # Offset: 135
    00000089: 	movaps	%xmm0, 0xc8(%rsp)
    00000091: 	movd	%xmm0, %eax
    00000095: 	movaps	%xmm0, 0xb8(%rsp)
    0000009d: 	movzbl	0xbd(%rsp), %edx
    000000a5: 	orb	0xc9(%rsp), %dl
    000000ac: 	movaps	%xmm0, 0xa8(%rsp)
    000000b4: 	orb	0xb1(%rsp), %dl
    000000bb: 	movaps	%xmm0, 0x98(%rsp)
    000000c3: 	orb	0xa5(%rsp), %dl
    000000ca: 	movzbl	%dl, %r11d
    000000ce: 	movl	%r9d, %edx
    000000d1: 	movaps	%xmm0, 0xf8(%rsp)
    000000d9: 	orb	0xfc(%rsp), %al
    000000e0: 	andl	$-0x4, %edx
    000000e3: 	movaps	%xmm0, 0xe8(%rsp)
    000000eb: 	orb	0xf0(%rsp), %al
    000000f2: 	movaps	%xmm0, 0xd8(%rsp)
    000000fa: 	leal	(,%rdx,4), %esi
    00000101: 	orb	0xe4(%rsp), %al
    00000108: 	movaps	%xmm0, 0x88(%rsp)
    00000110: 	movaps	%xmm0, 0x78(%rsp)
    00000115: 	movzbl	0x7e(%rsp), %ebp
    0000011a: 	orb	0x8a(%rsp), %bpl
    00000122: 	movaps	%xmm0, 0x68(%rsp)
    00000127: 	orb	0x72(%rsp), %bpl
    0000012c: 	movaps	%xmm0, 0x58(%rsp)
    00000131: 	orb	0x66(%rsp), %bpl
    00000136: 	movaps	%xmm0, 0x48(%rsp)
    0000013b: 	movaps	%xmm0, 0x38(%rsp)
    00000140: 	movzbl	0x3f(%rsp), %ecx
    00000145: 	orb	0x4b(%rsp), %cl
    00000149: 	movaps	%xmm0, 0x28(%rsp)
    0000014e: 	orb	0x33(%rsp), %cl
    00000152: 	movaps	%xmm0, 0x18(%rsp)
    00000157: 	orb	0x27(%rsp), %cl
    0000015b: 	cmpl	%edx, %r9d
    0000015e: 	je	.Ltmp558 # Offset: 350
.Ltmp566:
    00000164: 	movl	%r9d, %r10d
    00000167: 	subl	%edx, %r10d
    0000016a: 	cmpl	%edx, %ebx
    0000016c: 	je	.Ltmp559 # Offset: 364
    00000172: 	movq	(%rdi,%rdx,4), %xmm0
    00000177: 	movzbl	%cl, %edx
    0000017a: 	movzbl	%bpl, %ebp
    0000017e: 	movzbl	%al, %eax
    00000181: 	shlq	$0x8, %rdx
    00000185: 	orq	%rbp, %rdx
    00000188: 	shlq	$0x8, %rdx
    0000018c: 	orq	%r11, %rdx
    0000018f: 	shlq	$0x8, %rdx
    00000193: 	orq	%rax, %rdx
    00000196: 	movq	%rdx, %xmm3
    0000019b: 	por	%xmm0, %xmm3
    0000019f: 	movq	%xmm3, %rbx
    000001a4: 	movq	%xmm3, %rdx
    000001a9: 	movq	%xmm3, %rcx
    000001ae: 	movq	%xmm3, 0x10(%rsp)
    000001b4: 	shrq	$0x20, %rdx
    000001b8: 	movl	%ebx, %eax
    000001ba: 	shrq	$0x28, %rcx
    000001be: 	movq	%xmm3, %rbp
    000001c3: 	orl	%edx, %eax
    000001c5: 	movzbl	%bh, %edx
    000001c8: 	shrq	$0x30, %rbp
    000001cc: 	movq	%xmm3, 0x8(%rsp)
    000001d2: 	orl	%ecx, %edx
    000001d4: 	movq	%xmm3, %rcx
    000001d9: 	movq	%xmm3, (%rsp)
    000001de: 	movl	%edx, %r11d
    000001e1: 	movq	%xmm3, %rdx
    000001e6: 	shrq	$0x38, %rcx
    000001ea: 	movq	%xmm3, -0x8(%rsp)
    000001f0: 	shrq	$0x10, %rdx
    000001f4: 	movq	%xmm3, -0x10(%rsp)
    000001fa: 	orl	%edx, %ebp
    000001fc: 	movq	%xmm3, %rdx
    00000201: 	movq	%xmm3, -0x18(%rsp)
    00000207: 	shrq	$0x18, %rdx
    0000020b: 	movq	%xmm3, -0x20(%rsp)
    00000211: 	orl	%edx, %ecx
    00000213: 	movl	%r10d, %edx
    00000216: 	movq	%xmm3, -0x28(%rsp)
    0000021c: 	andl	$-0x2, %edx
    0000021f: 	leal	(%rsi,%rdx,4), %esi
    00000222: 	cmpl	%edx, %r10d
    00000225: 	je	.Ltmp558 # Offset: 549
.Ltmp559:
    00000227: 	movslq	%esi, %rsi
    0000022a: 	orb	(%rdi,%rsi), %al
    0000022d: 	orb	0x1(%rdi,%rsi), %r11b
    00000232: 	orb	0x2(%rdi,%rsi), %bpl
    00000237: 	orb	0x3(%rdi,%rsi), %cl
.Ltmp558:
    0000023b: 	movl	%r11d, %edx
    0000023e: 	shll	$0x2, %r9d
    00000242: 	orl	%ebp, %edx
    00000244: 	movl	%edx, %esi
    00000246: 	orl	%ecx, %esi
.Ltmp565:
    00000248: 	cmpl	%r9d, %r8d
    0000024b: 	jle	.Ltmp560 # Offset: 587
    00000251: 	movl	%r8d, %r11d
    00000254: 	subl	%r9d, %r11d
    00000257: 	leal	-0x1(%r11), %edx
    0000025b: 	cmpl	$0xe, %edx
    0000025e: 	jbe	.Ltmp561 # Offset: 606
    00000264: 	movl	%r11d, %ecx
    00000267: 	movslq	%r9d, %rdx
    0000026a: 	pxor	%xmm0, %xmm0
    0000026e: 	shrl	$0x4, %ecx
    00000271: 	addq	%rdi, %rdx
    00000274: 	leal	-0x1(%rcx), %r10d
    00000278: 	leaq	0x10(%rdx), %rcx
    0000027c: 	shlq	$0x4, %r10
    00000280: 	addq	%rcx, %r10
    00000283: 	jmp	.Ltmp562 # Offset: 643
    00000285: 	nopl	(%rax) # Size: 3
.Ltmp563:
    00000288: 	addq	$0x10, %rcx
.Ltmp562:
    0000028c: 	movdqu	(%rdx), %xmm1
    00000290: 	movq	%rcx, %rdx
    00000293: 	por	%xmm1, %xmm0
    00000297: 	cmpq	%r10, %rcx
    0000029a: 	jne	.Ltmp563 # Offset: 666
    0000029c: 	movdqa	%xmm0, %xmm1
    000002a0: 	movl	%r11d, %edx
    000002a3: 	psrldq	$0x8, %xmm1
    000002a8: 	andl	$-0x10, %edx
    000002ab: 	por	%xmm1, %xmm0
    000002af: 	leal	(%rdx,%r9), %r10d
    000002b3: 	movdqa	%xmm0, %xmm1
    000002b7: 	psrldq	$0x4, %xmm1
    000002bc: 	por	%xmm1, %xmm0
    000002c0: 	movdqa	%xmm0, %xmm1
    000002c4: 	psrldq	$0x2, %xmm1
    000002c9: 	por	%xmm1, %xmm0
    000002cd: 	movdqa	%xmm0, %xmm1
    000002d1: 	psrldq	$0x1, %xmm1
    000002d6: 	por	%xmm1, %xmm0
    000002da: 	movd	%xmm0, %ecx
    000002de: 	orl	%ecx, %eax
    000002e0: 	cmpl	%r11d, %edx
    000002e3: 	je	.Ltmp560 # Offset: 739
.Ltmp567:
    000002e9: 	subl	%edx, %r11d
    000002ec: 	leal	-0x1(%r11), %ecx
    000002f0: 	cmpl	$0x6, %ecx
    000002f3: 	jbe	.Ltmp564 # Offset: 755
    000002f5: 	movslq	%r9d, %r9
    000002f8: 	addq	%rdi, %r9
    000002fb: 	movq	(%r9,%rdx), %rcx
    000002ff: 	movl	%ecx, %edx
    00000301: 	movzbl	%ch, %ebx
    00000304: 	orl	%ebx, %edx
    00000306: 	orl	%edx, %eax
    00000308: 	movq	%rcx, %rdx
    0000030b: 	shrq	$0x10, %rdx
    0000030f: 	orl	%edx, %eax
    00000311: 	movq	%rcx, %rdx
    00000314: 	shrq	$0x18, %rdx
    00000318: 	orl	%edx, %eax
    0000031a: 	movq	%rcx, %rdx
    0000031d: 	shrq	$0x20, %rdx
    00000321: 	orl	%edx, %eax
    00000323: 	movq	%rcx, %rdx
    00000326: 	shrq	$0x28, %rdx
    0000032a: 	orl	%edx, %eax
    0000032c: 	movq	%rcx, %rdx
    0000032f: 	shrq	$0x38, %rcx
    00000333: 	shrq	$0x30, %rdx
    00000337: 	orl	%edx, %eax
    00000339: 	movl	%r11d, %edx
    0000033c: 	andl	$-0x8, %edx
    0000033f: 	orl	%ecx, %eax
    00000341: 	addl	%edx, %r10d
    00000344: 	cmpl	%edx, %r11d
    00000347: 	je	.Ltmp560 # Offset: 839
.Ltmp564:
    00000349: 	movslq	%r10d, %rdx
    0000034c: 	orb	(%rdi,%rdx), %al
    0000034f: 	leal	0x1(%r10), %edx
    00000353: 	cmpl	%r8d, %edx
    00000356: 	jge	.Ltmp560 # Offset: 854
    00000358: 	movslq	%edx, %rdx
    0000035b: 	orb	(%rdi,%rdx), %al
    0000035e: 	leal	0x2(%r10), %edx
    00000362: 	cmpl	%r8d, %edx
    00000365: 	jge	.Ltmp560 # Offset: 869
    00000367: 	movslq	%edx, %rdx
    0000036a: 	orb	(%rdi,%rdx), %al
    0000036d: 	leal	0x3(%r10), %edx
    00000371: 	cmpl	%edx, %r8d
    00000374: 	jle	.Ltmp560 # Offset: 884
    00000376: 	movslq	%edx, %rdx
    00000379: 	orb	(%rdi,%rdx), %al
    0000037c: 	leal	0x4(%r10), %edx
    00000380: 	cmpl	%edx, %r8d
    00000383: 	jle	.Ltmp560 # Offset: 899
    00000385: 	movslq	%edx, %rdx
    00000388: 	orb	(%rdi,%rdx), %al
    0000038b: 	leal	0x5(%r10), %edx
    0000038f: 	cmpl	%edx, %r8d
    00000392: 	jle	.Ltmp560 # Offset: 914
    00000394: 	movslq	%edx, %rdx
    00000397: 	addl	$0x6, %r10d
    0000039b: 	orb	(%rdi,%rdx), %al
    0000039e: 	cmpl	%r10d, %r8d
    000003a1: 	jle	.Ltmp560 # Offset: 929
    000003a3: 	movslq	%r10d, %r10
    000003a6: 	orb	(%rdi,%r10), %al
.Ltmp560:
    000003aa: 	addq	$0x110, %rsp
    000003b1: 	orl	%esi, %eax
    000003b3: 	popq	%rbx
    000003b4: 	popq	%rbp
    000003b5: 	retq # Offset: 949
    000003b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp555:
    000003c0: 	movl	%edx, %esi
    000003c2: 	xorl	%r9d, %r9d
    000003c5: 	jmp	.Ltmp565 # Offset: 965
.Ltmp556:
    000003ca: 	movl	%edx, %ecx
    000003cc: 	movl	%edx, %ebp
    000003ce: 	movzbl	%dl, %r11d
    000003d2: 	xorl	%esi, %esi
    000003d4: 	xorl	%edx, %edx
    000003d6: 	jmp	.Ltmp566 # Offset: 982
.Ltmp561:
    000003db: 	movl	%r9d, %r10d
    000003de: 	xorl	%edx, %edx
    000003e0: 	jmp	.Ltmp567 # Offset: 992
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or6IaET_PKS0_iS0_"

Binary Function "_Z7bit_or7IaET_PKS0_iS0_" after disassembly {
  Number      : 97
  State       : disassembled
  Address     : 0xabe0
  Size        : 0x3e5
  MaxSize     : 0x3f0
  Offset      : 0xabe0
  Section     : .text
  Orc Section : .local.text._Z7bit_or7IaET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB096:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movl	%esi, %r8d
    00000008: 	movl	%edx, %eax
    0000000a: 	pushq	%rbx
    0000000b: 	subq	$0x110, %rsp
    00000012: 	cmpl	$0x3, %esi
    00000015: 	jle	.Ltmp568 # Offset: 21
    0000001b: 	leal	-0x4(%rsi), %ecx
    0000001e: 	movl	%ecx, %ebx
    00000020: 	shrl	$0x2, %ebx
    00000023: 	leal	0x1(%rbx), %r9d
    00000027: 	cmpl	$0xb, %ecx
    0000002a: 	jbe	.Ltmp569 # Offset: 42
    00000030: 	movq	$0x0, -0x70(%rsp)
    00000039: 	movzbl	%dl, %edx
    0000003c: 	movq	%rdx, %rax
    0000003f: 	shlq	$0x8, %rax
    00000043: 	orq	%rdx, %rax
    00000046: 	shlq	$0x8, %rax
    0000004a: 	orq	%rdx, %rax
    0000004d: 	shlq	$0x8, %rax
    00000051: 	orq	%rdx, %rax
    00000054: 	movl	%r9d, %edx
    00000057: 	shrl	$0x2, %edx
    0000005a: 	movq	%rax, -0x78(%rsp)
    0000005f: 	movdqa	-0x78(%rsp), %xmm0
    00000065: 	movq	%rdi, %rax
    00000068: 	subl	$0x1, %edx
    0000006b: 	shlq	$0x4, %rdx
    0000006f: 	leaq	0x10(%rdi,%rdx), %rdx
    00000074: 	nopl	(%rax) # Size: 4
.Ltmp570:
    00000078: 	movdqu	(%rax), %xmm2
    0000007c: 	addq	$0x10, %rax
    00000080: 	por	%xmm2, %xmm0
    00000084: 	cmpq	%rax, %rdx
    00000087: 	jne	.Ltmp570 # Offset: 135
    00000089: 	movaps	%xmm0, 0xc8(%rsp)
    00000091: 	movd	%xmm0, %eax
    00000095: 	movaps	%xmm0, 0xb8(%rsp)
    0000009d: 	movzbl	0xbd(%rsp), %edx
    000000a5: 	orb	0xc9(%rsp), %dl
    000000ac: 	movaps	%xmm0, 0xa8(%rsp)
    000000b4: 	orb	0xb1(%rsp), %dl
    000000bb: 	movaps	%xmm0, 0x98(%rsp)
    000000c3: 	orb	0xa5(%rsp), %dl
    000000ca: 	movzbl	%dl, %r11d
    000000ce: 	movl	%r9d, %edx
    000000d1: 	movaps	%xmm0, 0xf8(%rsp)
    000000d9: 	orb	0xfc(%rsp), %al
    000000e0: 	andl	$-0x4, %edx
    000000e3: 	movaps	%xmm0, 0xe8(%rsp)
    000000eb: 	orb	0xf0(%rsp), %al
    000000f2: 	movaps	%xmm0, 0xd8(%rsp)
    000000fa: 	leal	(,%rdx,4), %esi
    00000101: 	orb	0xe4(%rsp), %al
    00000108: 	movaps	%xmm0, 0x88(%rsp)
    00000110: 	movaps	%xmm0, 0x78(%rsp)
    00000115: 	movzbl	0x7e(%rsp), %ebp
    0000011a: 	orb	0x8a(%rsp), %bpl
    00000122: 	movaps	%xmm0, 0x68(%rsp)
    00000127: 	orb	0x72(%rsp), %bpl
    0000012c: 	movaps	%xmm0, 0x58(%rsp)
    00000131: 	orb	0x66(%rsp), %bpl
    00000136: 	movaps	%xmm0, 0x48(%rsp)
    0000013b: 	movaps	%xmm0, 0x38(%rsp)
    00000140: 	movzbl	0x3f(%rsp), %ecx
    00000145: 	orb	0x4b(%rsp), %cl
    00000149: 	movaps	%xmm0, 0x28(%rsp)
    0000014e: 	orb	0x33(%rsp), %cl
    00000152: 	movaps	%xmm0, 0x18(%rsp)
    00000157: 	orb	0x27(%rsp), %cl
    0000015b: 	cmpl	%edx, %r9d
    0000015e: 	je	.Ltmp571 # Offset: 350
.Ltmp579:
    00000164: 	movl	%r9d, %r10d
    00000167: 	subl	%edx, %r10d
    0000016a: 	cmpl	%edx, %ebx
    0000016c: 	je	.Ltmp572 # Offset: 364
    00000172: 	movq	(%rdi,%rdx,4), %xmm0
    00000177: 	movzbl	%cl, %edx
    0000017a: 	movzbl	%bpl, %ebp
    0000017e: 	movzbl	%al, %eax
    00000181: 	shlq	$0x8, %rdx
    00000185: 	orq	%rbp, %rdx
    00000188: 	shlq	$0x8, %rdx
    0000018c: 	orq	%r11, %rdx
    0000018f: 	shlq	$0x8, %rdx
    00000193: 	orq	%rax, %rdx
    00000196: 	movq	%rdx, %xmm3
    0000019b: 	por	%xmm0, %xmm3
    0000019f: 	movq	%xmm3, %rbx
    000001a4: 	movq	%xmm3, %rdx
    000001a9: 	movq	%xmm3, %rcx
    000001ae: 	movq	%xmm3, 0x10(%rsp)
    000001b4: 	shrq	$0x20, %rdx
    000001b8: 	movl	%ebx, %eax
    000001ba: 	shrq	$0x28, %rcx
    000001be: 	movq	%xmm3, %rbp
    000001c3: 	orl	%edx, %eax
    000001c5: 	movzbl	%bh, %edx
    000001c8: 	shrq	$0x30, %rbp
    000001cc: 	movq	%xmm3, 0x8(%rsp)
    000001d2: 	orl	%ecx, %edx
    000001d4: 	movq	%xmm3, %rcx
    000001d9: 	movq	%xmm3, (%rsp)
    000001de: 	movl	%edx, %r11d
    000001e1: 	movq	%xmm3, %rdx
    000001e6: 	shrq	$0x38, %rcx
    000001ea: 	movq	%xmm3, -0x8(%rsp)
    000001f0: 	shrq	$0x10, %rdx
    000001f4: 	movq	%xmm3, -0x10(%rsp)
    000001fa: 	orl	%edx, %ebp
    000001fc: 	movq	%xmm3, %rdx
    00000201: 	movq	%xmm3, -0x18(%rsp)
    00000207: 	shrq	$0x18, %rdx
    0000020b: 	movq	%xmm3, -0x20(%rsp)
    00000211: 	orl	%edx, %ecx
    00000213: 	movl	%r10d, %edx
    00000216: 	movq	%xmm3, -0x28(%rsp)
    0000021c: 	andl	$-0x2, %edx
    0000021f: 	leal	(%rsi,%rdx,4), %esi
    00000222: 	cmpl	%edx, %r10d
    00000225: 	je	.Ltmp571 # Offset: 549
.Ltmp572:
    00000227: 	movslq	%esi, %rsi
    0000022a: 	orb	(%rdi,%rsi), %al
    0000022d: 	orb	0x1(%rdi,%rsi), %r11b
    00000232: 	orb	0x2(%rdi,%rsi), %bpl
    00000237: 	orb	0x3(%rdi,%rsi), %cl
.Ltmp571:
    0000023b: 	movl	%r11d, %edx
    0000023e: 	shll	$0x2, %r9d
    00000242: 	orl	%ebp, %edx
    00000244: 	movl	%edx, %esi
    00000246: 	orl	%ecx, %esi
.Ltmp578:
    00000248: 	cmpl	%r9d, %r8d
    0000024b: 	jle	.Ltmp573 # Offset: 587
    00000251: 	movl	%r8d, %r11d
    00000254: 	subl	%r9d, %r11d
    00000257: 	leal	-0x1(%r11), %edx
    0000025b: 	cmpl	$0xe, %edx
    0000025e: 	jbe	.Ltmp574 # Offset: 606
    00000264: 	movl	%r11d, %ecx
    00000267: 	movslq	%r9d, %rdx
    0000026a: 	pxor	%xmm0, %xmm0
    0000026e: 	shrl	$0x4, %ecx
    00000271: 	addq	%rdi, %rdx
    00000274: 	leal	-0x1(%rcx), %r10d
    00000278: 	leaq	0x10(%rdx), %rcx
    0000027c: 	shlq	$0x4, %r10
    00000280: 	addq	%rcx, %r10
    00000283: 	jmp	.Ltmp575 # Offset: 643
    00000285: 	nopl	(%rax) # Size: 3
.Ltmp576:
    00000288: 	addq	$0x10, %rcx
.Ltmp575:
    0000028c: 	movdqu	(%rdx), %xmm1
    00000290: 	movq	%rcx, %rdx
    00000293: 	por	%xmm1, %xmm0
    00000297: 	cmpq	%r10, %rcx
    0000029a: 	jne	.Ltmp576 # Offset: 666
    0000029c: 	movdqa	%xmm0, %xmm1
    000002a0: 	movl	%r11d, %edx
    000002a3: 	psrldq	$0x8, %xmm1
    000002a8: 	andl	$-0x10, %edx
    000002ab: 	por	%xmm1, %xmm0
    000002af: 	leal	(%rdx,%r9), %r10d
    000002b3: 	movdqa	%xmm0, %xmm1
    000002b7: 	psrldq	$0x4, %xmm1
    000002bc: 	por	%xmm1, %xmm0
    000002c0: 	movdqa	%xmm0, %xmm1
    000002c4: 	psrldq	$0x2, %xmm1
    000002c9: 	por	%xmm1, %xmm0
    000002cd: 	movdqa	%xmm0, %xmm1
    000002d1: 	psrldq	$0x1, %xmm1
    000002d6: 	por	%xmm1, %xmm0
    000002da: 	movd	%xmm0, %ecx
    000002de: 	orl	%ecx, %eax
    000002e0: 	cmpl	%r11d, %edx
    000002e3: 	je	.Ltmp573 # Offset: 739
.Ltmp580:
    000002e9: 	subl	%edx, %r11d
    000002ec: 	leal	-0x1(%r11), %ecx
    000002f0: 	cmpl	$0x6, %ecx
    000002f3: 	jbe	.Ltmp577 # Offset: 755
    000002f5: 	movslq	%r9d, %r9
    000002f8: 	addq	%rdi, %r9
    000002fb: 	movq	(%r9,%rdx), %rcx
    000002ff: 	movl	%ecx, %edx
    00000301: 	movzbl	%ch, %ebx
    00000304: 	orl	%ebx, %edx
    00000306: 	orl	%edx, %eax
    00000308: 	movq	%rcx, %rdx
    0000030b: 	shrq	$0x10, %rdx
    0000030f: 	orl	%edx, %eax
    00000311: 	movq	%rcx, %rdx
    00000314: 	shrq	$0x18, %rdx
    00000318: 	orl	%edx, %eax
    0000031a: 	movq	%rcx, %rdx
    0000031d: 	shrq	$0x20, %rdx
    00000321: 	orl	%edx, %eax
    00000323: 	movq	%rcx, %rdx
    00000326: 	shrq	$0x28, %rdx
    0000032a: 	orl	%edx, %eax
    0000032c: 	movq	%rcx, %rdx
    0000032f: 	shrq	$0x38, %rcx
    00000333: 	shrq	$0x30, %rdx
    00000337: 	orl	%edx, %eax
    00000339: 	movl	%r11d, %edx
    0000033c: 	andl	$-0x8, %edx
    0000033f: 	orl	%ecx, %eax
    00000341: 	addl	%edx, %r10d
    00000344: 	cmpl	%edx, %r11d
    00000347: 	je	.Ltmp573 # Offset: 839
.Ltmp577:
    00000349: 	movslq	%r10d, %rdx
    0000034c: 	orb	(%rdi,%rdx), %al
    0000034f: 	leal	0x1(%r10), %edx
    00000353: 	cmpl	%r8d, %edx
    00000356: 	jge	.Ltmp573 # Offset: 854
    00000358: 	movslq	%edx, %rdx
    0000035b: 	orb	(%rdi,%rdx), %al
    0000035e: 	leal	0x2(%r10), %edx
    00000362: 	cmpl	%r8d, %edx
    00000365: 	jge	.Ltmp573 # Offset: 869
    00000367: 	movslq	%edx, %rdx
    0000036a: 	orb	(%rdi,%rdx), %al
    0000036d: 	leal	0x3(%r10), %edx
    00000371: 	cmpl	%r8d, %edx
    00000374: 	jge	.Ltmp573 # Offset: 884
    00000376: 	movslq	%edx, %rdx
    00000379: 	orb	(%rdi,%rdx), %al
    0000037c: 	leal	0x4(%r10), %edx
    00000380: 	cmpl	%edx, %r8d
    00000383: 	jle	.Ltmp573 # Offset: 899
    00000385: 	movslq	%edx, %rdx
    00000388: 	orb	(%rdi,%rdx), %al
    0000038b: 	leal	0x5(%r10), %edx
    0000038f: 	cmpl	%edx, %r8d
    00000392: 	jle	.Ltmp573 # Offset: 914
    00000394: 	movslq	%edx, %rdx
    00000397: 	addl	$0x6, %r10d
    0000039b: 	orb	(%rdi,%rdx), %al
    0000039e: 	cmpl	%r10d, %r8d
    000003a1: 	jle	.Ltmp573 # Offset: 929
    000003a3: 	movslq	%r10d, %r10
    000003a6: 	orb	(%rdi,%r10), %al
.Ltmp573:
    000003aa: 	addq	$0x110, %rsp
    000003b1: 	orl	%esi, %eax
    000003b3: 	popq	%rbx
    000003b4: 	popq	%rbp
    000003b5: 	retq # Offset: 949
    000003b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp568:
    000003c0: 	movl	%edx, %esi
    000003c2: 	xorl	%r9d, %r9d
    000003c5: 	jmp	.Ltmp578 # Offset: 965
.Ltmp569:
    000003ca: 	movl	%edx, %ecx
    000003cc: 	movl	%edx, %ebp
    000003ce: 	movzbl	%dl, %r11d
    000003d2: 	xorl	%esi, %esi
    000003d4: 	xorl	%edx, %edx
    000003d6: 	jmp	.Ltmp579 # Offset: 982
.Ltmp574:
    000003db: 	movl	%r9d, %r10d
    000003de: 	xorl	%edx, %edx
    000003e0: 	jmp	.Ltmp580 # Offset: 992
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or7IaET_PKS0_iS0_"

Binary Function "_Z7bit_or8IaET_PKS0_iS0_" after disassembly {
  Number      : 98
  State       : disassembled
  Address     : 0xafd0
  Size        : 0x410
  MaxSize     : 0x410
  Offset      : 0xafd0
  Section     : .text
  Orc Section : .local.text._Z7bit_or8IaET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB097:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdi, %rcx
    00000009: 	movl	%edx, %r8d
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x108, %rsp
    00000015: 	cmpl	$0x7, %esi
    00000018: 	jle	.Ltmp581 # Offset: 24
    0000001e: 	leal	-0x8(%rsi), %eax
    00000021: 	movl	%eax, %r9d
    00000024: 	shrl	$0x3, %r9d
    00000028: 	addl	$0x1, %r9d
    0000002c: 	cmpl	$0x7, %eax
    0000002f: 	jbe	.Ltmp582 # Offset: 47
    00000035: 	movq	$0x0, -0x70(%rsp)
    0000003e: 	movzbl	%dl, %edx
    00000041: 	movq	%rdx, %rax
    00000044: 	shlq	$0x8, %rax
    00000048: 	orq	%rdx, %rax
    0000004b: 	shlq	$0x8, %rax
    0000004f: 	orq	%rdx, %rax
    00000052: 	shlq	$0x8, %rax
    00000056: 	orq	%rdx, %rax
    00000059: 	shlq	$0x8, %rax
    0000005d: 	orq	%rdx, %rax
    00000060: 	shlq	$0x8, %rax
    00000064: 	orq	%rdx, %rax
    00000067: 	shlq	$0x8, %rax
    0000006b: 	orq	%rdx, %rax
    0000006e: 	shlq	$0x8, %rax
    00000072: 	orq	%rdx, %rax
    00000075: 	movl	%r9d, %edx
    00000078: 	shrl	%edx
    0000007a: 	movq	%rax, -0x78(%rsp)
    0000007f: 	movdqa	-0x78(%rsp), %xmm0
    00000085: 	movq	%rdi, %rax
    00000088: 	subl	$0x1, %edx
    0000008b: 	shlq	$0x4, %rdx
    0000008f: 	leaq	0x10(%rdi,%rdx), %rdx
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp583:
    00000098: 	movdqu	(%rax), %xmm2
    0000009c: 	addq	$0x10, %rax
    000000a0: 	por	%xmm2, %xmm0
    000000a4: 	cmpq	%rax, %rdx
    000000a7: 	jne	.Ltmp583 # Offset: 167
    000000a9: 	movl	%r9d, %eax
    000000ac: 	movd	%xmm0, %r8d
    000000b1: 	movaps	%xmm0, 0xf8(%rsp)
    000000b9: 	orb	0x100(%rsp), %r8b
    000000c1: 	movaps	%xmm0, 0xe8(%rsp)
    000000c9: 	andl	$-0x2, %eax
    000000cc: 	movaps	%xmm0, 0xd8(%rsp)
    000000d4: 	movzbl	0xe1(%rsp), %edx
    000000dc: 	orb	0xe9(%rsp), %dl
    000000e3: 	movaps	%xmm0, 0xc8(%rsp)
    000000eb: 	movaps	%xmm0, 0xb8(%rsp)
    000000f3: 	movzbl	0xc2(%rsp), %ebx
    000000fb: 	orb	0xca(%rsp), %bl
    00000102: 	movaps	%xmm0, 0xa8(%rsp)
    0000010a: 	movaps	%xmm0, 0x98(%rsp)
    00000112: 	movzbl	0xa3(%rsp), %ebp
    0000011a: 	orb	0xab(%rsp), %bpl
    00000122: 	movaps	%xmm0, 0x88(%rsp)
    0000012a: 	movaps	%xmm0, 0x78(%rsp)
    0000012f: 	movzbl	0x84(%rsp), %r12d
    00000138: 	orb	0x8c(%rsp), %r12b
    00000140: 	movaps	%xmm0, 0x68(%rsp)
    00000145: 	movaps	%xmm0, 0x58(%rsp)
    0000014a: 	movzbl	0x65(%rsp), %r11d
    00000150: 	orb	0x6d(%rsp), %r11b
    00000155: 	movaps	%xmm0, 0x48(%rsp)
    0000015a: 	movaps	%xmm0, 0x38(%rsp)
    0000015f: 	movzbl	0x46(%rsp), %r10d
    00000165: 	orb	0x4e(%rsp), %r10b
    0000016a: 	movaps	%xmm0, 0x28(%rsp)
    0000016f: 	movaps	%xmm0, 0x18(%rsp)
    00000174: 	movzbl	0x27(%rsp), %edi
    00000179: 	orb	0x2f(%rsp), %dil
    0000017e: 	testl	$0xc0000001, %r9d
    00000185: 	je	.Ltmp584 # Offset: 389
.Ltmp591:
    0000018b: 	movzbl	%r10b, %r10d
    0000018f: 	movzbl	%r11b, %r11d
    00000193: 	movzbl	%r12b, %r12d
    00000197: 	movzbl	%bpl, %ebp
    0000019b: 	movq	(%rcx,%rax,8), %xmm0
    000001a0: 	movzbl	%dil, %eax
    000001a4: 	movzbl	%bl, %ebx
    000001a7: 	movzbl	%dl, %edi
    000001aa: 	shlq	$0x8, %rax
    000001ae: 	movzbl	%r8b, %r8d
    000001b2: 	orq	%r10, %rax
    000001b5: 	shlq	$0x8, %rax
    000001b9: 	orq	%r11, %rax
    000001bc: 	shlq	$0x8, %rax
    000001c0: 	orq	%r12, %rax
    000001c3: 	shlq	$0x8, %rax
    000001c7: 	orq	%rbp, %rax
    000001ca: 	shlq	$0x8, %rax
    000001ce: 	orq	%rbx, %rax
    000001d1: 	shlq	$0x8, %rax
    000001d5: 	movq	%rax, %rdx
    000001d8: 	orq	%rdi, %rdx
    000001db: 	shlq	$0x8, %rdx
    000001df: 	orq	%r8, %rdx
    000001e2: 	movq	%rdx, %xmm3
    000001e7: 	por	%xmm0, %xmm3
    000001eb: 	movq	%xmm3, %rax
    000001f0: 	movq	%xmm3, %rbx
    000001f5: 	movq	%xmm3, %rbp
    000001fa: 	movq	%xmm3, 0x10(%rsp)
    00000200: 	movl	%eax, %r8d
    00000203: 	movzbl	%ah, %edx
    00000206: 	movq	%xmm3, %r12
    0000020b: 	shrq	$0x38, %rax
    0000020f: 	shrq	$0x10, %rbx
    00000213: 	movq	%xmm3, %r11
    00000218: 	shrq	$0x18, %rbp
    0000021c: 	movq	%rax, %rdi
    0000021f: 	movq	%xmm3, %r10
    00000224: 	movq	%xmm3, 0x8(%rsp)
    0000022a: 	shrq	$0x20, %r12
    0000022e: 	movq	%xmm3, (%rsp)
    00000233: 	shrq	$0x28, %r11
    00000237: 	shrq	$0x30, %r10
    0000023b: 	movq	%xmm3, -0x8(%rsp)
    00000241: 	movq	%xmm3, -0x10(%rsp)
    00000247: 	movq	%xmm3, -0x18(%rsp)
    0000024d: 	movq	%xmm3, -0x20(%rsp)
    00000253: 	movq	%xmm3, -0x28(%rsp)
.Ltmp584:
    00000259: 	orl	%ebx, %edx
    0000025b: 	shll	$0x3, %r9d
    0000025f: 	orl	%ebp, %edx
    00000261: 	orl	%r12d, %edx
    00000264: 	orl	%r11d, %edx
    00000267: 	orl	%r10d, %edx
    0000026a: 	orl	%edi, %edx
.Ltmp590:
    0000026c: 	cmpl	%r9d, %esi
    0000026f: 	jle	.Ltmp585 # Offset: 623
    00000275: 	movl	%esi, %r10d
    00000278: 	subl	%r9d, %r10d
    0000027b: 	leal	-0x1(%r10), %eax
    0000027f: 	cmpl	$0xe, %eax
    00000282: 	jbe	.Ltmp586 # Offset: 642
    00000288: 	movl	%r10d, %eax
    0000028b: 	movslq	%r9d, %rdi
    0000028e: 	pxor	%xmm0, %xmm0
    00000292: 	shrl	$0x4, %eax
    00000295: 	addq	%rcx, %rdi
    00000298: 	leal	-0x1(%rax), %r11d
    0000029c: 	leaq	0x10(%rdi), %rax
    000002a0: 	shlq	$0x4, %r11
    000002a4: 	addq	%rax, %r11
    000002a7: 	jmp	.Ltmp587 # Offset: 679
    000002a9: 	nopl	(%rax) # Size: 7
.Ltmp588:
    000002b0: 	addq	$0x10, %rax
.Ltmp587:
    000002b4: 	movdqu	(%rdi), %xmm1
    000002b8: 	movq	%rax, %rdi
    000002bb: 	por	%xmm1, %xmm0
    000002bf: 	cmpq	%r11, %rax
    000002c2: 	jne	.Ltmp588 # Offset: 706
    000002c4: 	movdqa	%xmm0, %xmm1
    000002c8: 	movl	%r10d, %eax
    000002cb: 	psrldq	$0x8, %xmm1
    000002d0: 	andl	$-0x10, %eax
    000002d3: 	por	%xmm1, %xmm0
    000002d7: 	movdqa	%xmm0, %xmm1
    000002db: 	psrldq	$0x4, %xmm1
    000002e0: 	por	%xmm1, %xmm0
    000002e4: 	movdqa	%xmm0, %xmm1
    000002e8: 	psrldq	$0x2, %xmm1
    000002ed: 	por	%xmm1, %xmm0
    000002f1: 	movdqa	%xmm0, %xmm1
    000002f5: 	psrldq	$0x1, %xmm1
    000002fa: 	por	%xmm1, %xmm0
    000002fe: 	movd	%xmm0, %edi
    00000302: 	orl	%edi, %r8d
    00000305: 	leal	(%rax,%r9), %edi
    00000309: 	cmpl	%r10d, %eax
    0000030c: 	je	.Ltmp585 # Offset: 780
.Ltmp592:
    00000312: 	subl	%eax, %r10d
    00000315: 	leal	-0x1(%r10), %r11d
    00000319: 	cmpl	$0x6, %r11d
    0000031d: 	jbe	.Ltmp589 # Offset: 797
    0000031f: 	movslq	%r9d, %r9
    00000322: 	addq	%rcx, %rax
    00000325: 	movq	(%rax,%r9), %rbx
    00000329: 	movzbl	%bh, %eax
    0000032c: 	movl	%ebx, %r9d
    0000032f: 	orl	%r9d, %eax
    00000332: 	orl	%r8d, %eax
    00000335: 	movq	%rbx, %r8
    00000338: 	shrq	$0x10, %r8
    0000033c: 	orl	%r8d, %eax
    0000033f: 	movq	%rbx, %r8
    00000342: 	shrq	$0x18, %r8
    00000346: 	orl	%r8d, %eax
    00000349: 	movq	%rbx, %r8
    0000034c: 	shrq	$0x20, %r8
    00000350: 	orl	%r8d, %eax
    00000353: 	movq	%rbx, %r8
    00000356: 	shrq	$0x28, %r8
    0000035a: 	orl	%r8d, %eax
    0000035d: 	movq	%rbx, %r8
    00000360: 	shrq	$0x38, %rbx
    00000364: 	shrq	$0x30, %r8
    00000368: 	orl	%r8d, %eax
    0000036b: 	orl	%ebx, %eax
    0000036d: 	movl	%eax, %r8d
    00000370: 	movl	%r10d, %eax
    00000373: 	andl	$-0x8, %eax
    00000376: 	addl	%eax, %edi
    00000378: 	cmpl	%r10d, %eax
    0000037b: 	je	.Ltmp585 # Offset: 891
.Ltmp589:
    0000037d: 	movslq	%edi, %rax
    00000380: 	orb	(%rcx,%rax), %r8b
    00000384: 	leal	0x1(%rdi), %eax
    00000387: 	cmpl	%eax, %esi
    00000389: 	jle	.Ltmp585 # Offset: 905
    0000038b: 	cltq
    0000038d: 	orb	(%rcx,%rax), %r8b
    00000391: 	leal	0x2(%rdi), %eax
    00000394: 	cmpl	%eax, %esi
    00000396: 	jle	.Ltmp585 # Offset: 918
    00000398: 	cltq
    0000039a: 	orb	(%rcx,%rax), %r8b
    0000039e: 	leal	0x3(%rdi), %eax
    000003a1: 	cmpl	%eax, %esi
    000003a3: 	jle	.Ltmp585 # Offset: 931
    000003a5: 	cltq
    000003a7: 	orb	(%rcx,%rax), %r8b
    000003ab: 	leal	0x4(%rdi), %eax
    000003ae: 	cmpl	%eax, %esi
    000003b0: 	jle	.Ltmp585 # Offset: 944
    000003b2: 	cltq
    000003b4: 	orb	(%rcx,%rax), %r8b
    000003b8: 	leal	0x5(%rdi), %eax
    000003bb: 	cmpl	%eax, %esi
    000003bd: 	jle	.Ltmp585 # Offset: 957
    000003bf: 	cltq
    000003c1: 	addl	$0x6, %edi
    000003c4: 	orb	(%rcx,%rax), %r8b
    000003c8: 	cmpl	%edi, %esi
    000003ca: 	jle	.Ltmp585 # Offset: 970
    000003cc: 	movslq	%edi, %rdi
    000003cf: 	orb	(%rcx,%rdi), %r8b
.Ltmp585:
    000003d3: 	addq	$0x108, %rsp
    000003da: 	movl	%r8d, %eax
    000003dd: 	popq	%rbx
    000003de: 	orl	%edx, %eax
    000003e0: 	popq	%rbp
    000003e1: 	popq	%r12
    000003e3: 	retq # Offset: 995
    000003e4: 	nopl	(%rax) # Size: 4
.Ltmp581:
    000003e8: 	xorl	%r9d, %r9d
    000003eb: 	jmp	.Ltmp590 # Offset: 1003
.Ltmp582:
    000003f0: 	movl	%edx, %edi
    000003f2: 	movl	%edx, %r10d
    000003f5: 	movl	%edx, %r11d
    000003f8: 	movl	%edx, %r12d
    000003fb: 	movl	%edx, %ebp
    000003fd: 	movl	%edx, %ebx
    000003ff: 	xorl	%eax, %eax
    00000401: 	jmp	.Ltmp591 # Offset: 1025
.Ltmp586:
    00000406: 	movl	%r9d, %edi
    00000409: 	xorl	%eax, %eax
    0000040b: 	jmp	.Ltmp592 # Offset: 1035
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or8IaET_PKS0_iS0_"

Binary Function "_Z8bit_xor1IaET_PKS0_iS0_" after disassembly {
  Number      : 99
  State       : disassembled
  Address     : 0xb3e0
  Size        : 0x1c1
  MaxSize     : 0x1d0
  Offset      : 0xb3e0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor1IaET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB098:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp593 # Offset: 6
    0000000c: 	leal	-0x1(%rsi), %eax
    0000000f: 	cmpl	$0xe, %eax
    00000012: 	jbe	.Ltmp594 # Offset: 18
    00000018: 	movl	%esi, %eax
    0000001a: 	movq	%rdi, %rcx
    0000001d: 	pxor	%xmm0, %xmm0
    00000021: 	shrl	$0x4, %eax
    00000024: 	subl	$0x1, %eax
    00000027: 	shlq	$0x4, %rax
    0000002b: 	leaq	0x10(%rdi,%rax), %r8
.Ltmp595:
    00000030: 	movdqu	(%rcx), %xmm2
    00000034: 	addq	$0x10, %rcx
    00000038: 	pxor	%xmm2, %xmm0
    0000003c: 	cmpq	%rcx, %r8
    0000003f: 	jne	.Ltmp595 # Offset: 63
    00000041: 	movdqa	%xmm0, %xmm1
    00000045: 	movl	%esi, %eax
    00000047: 	psrldq	$0x8, %xmm1
    0000004c: 	andl	$-0x10, %eax
    0000004f: 	pxor	%xmm1, %xmm0
    00000053: 	movl	%eax, %r8d
    00000056: 	movdqa	%xmm0, %xmm1
    0000005a: 	psrldq	$0x4, %xmm1
    0000005f: 	pxor	%xmm1, %xmm0
    00000063: 	movdqa	%xmm0, %xmm1
    00000067: 	psrldq	$0x2, %xmm1
    0000006c: 	pxor	%xmm1, %xmm0
    00000070: 	movdqa	%xmm0, %xmm1
    00000074: 	psrldq	$0x1, %xmm1
    00000079: 	pxor	%xmm1, %xmm0
    0000007d: 	movd	%xmm0, %ecx
    00000081: 	xorl	%edx, %ecx
    00000083: 	cmpl	%eax, %esi
    00000085: 	je	.Ltmp596 # Offset: 133
.Ltmp599:
    0000008b: 	movl	%esi, %r9d
    0000008e: 	subl	%eax, %r9d
    00000091: 	leal	-0x1(%r9), %edx
    00000095: 	cmpl	$0x6, %edx
    00000098: 	jbe	.Ltmp597 # Offset: 152
    0000009e: 	movq	(%rdi,%rax), %rdx
    000000a2: 	pushq	%rbx
    000000a3: 	movl	%edx, %eax
    000000a5: 	movzbl	%dh, %ebx
    000000a8: 	xorl	%ebx, %eax
    000000aa: 	xorl	%ecx, %eax
    000000ac: 	movq	%rdx, %rcx
    000000af: 	shrq	$0x10, %rcx
    000000b3: 	xorl	%ecx, %eax
    000000b5: 	movq	%rdx, %rcx
    000000b8: 	shrq	$0x18, %rcx
    000000bc: 	xorl	%ecx, %eax
    000000be: 	movq	%rdx, %rcx
    000000c1: 	shrq	$0x20, %rcx
    000000c5: 	xorl	%ecx, %eax
    000000c7: 	movq	%rdx, %rcx
    000000ca: 	shrq	$0x28, %rcx
    000000ce: 	xorl	%ecx, %eax
    000000d0: 	movq	%rdx, %rcx
    000000d3: 	shrq	$0x38, %rdx
    000000d7: 	shrq	$0x30, %rcx
    000000db: 	xorl	%ecx, %eax
    000000dd: 	xorl	%edx, %eax
    000000df: 	movl	%r9d, %edx
    000000e2: 	andl	$-0x8, %edx
    000000e5: 	addl	%edx, %r8d
    000000e8: 	cmpl	%edx, %r9d
    000000eb: 	je	.Ltmp598 # Offset: 235
    000000ed: 	movslq	%r8d, %rdx
    000000f0: 	xorb	(%rdi,%rdx), %al
    000000f3: 	leal	0x1(%r8), %edx
    000000f7: 	cmpl	%edx, %esi
    000000f9: 	jle	.Ltmp598 # Offset: 249
    000000fb: 	movslq	%edx, %rdx
    000000fe: 	xorb	(%rdi,%rdx), %al
    00000101: 	leal	0x2(%r8), %edx
    00000105: 	cmpl	%esi, %edx
    00000107: 	jge	.Ltmp598 # Offset: 263
    00000109: 	movslq	%edx, %rdx
    0000010c: 	xorb	(%rdi,%rdx), %al
    0000010f: 	leal	0x3(%r8), %edx
    00000113: 	cmpl	%edx, %esi
    00000115: 	jle	.Ltmp598 # Offset: 277
    00000117: 	movslq	%edx, %rdx
    0000011a: 	xorb	(%rdi,%rdx), %al
    0000011d: 	leal	0x4(%r8), %edx
    00000121: 	cmpl	%edx, %esi
    00000123: 	jle	.Ltmp598 # Offset: 291
    00000125: 	movslq	%edx, %rdx
    00000128: 	xorb	(%rdi,%rdx), %al
    0000012b: 	leal	0x5(%r8), %edx
    0000012f: 	cmpl	%edx, %esi
    00000131: 	jle	.Ltmp598 # Offset: 305
    00000133: 	movslq	%edx, %rdx
    00000136: 	addl	$0x6, %r8d
    0000013a: 	xorb	(%rdi,%rdx), %al
    0000013d: 	cmpl	%r8d, %esi
    00000140: 	jle	.Ltmp598 # Offset: 320
    00000142: 	movslq	%r8d, %r8
    00000145: 	xorb	(%rdi,%r8), %al
.Ltmp598:
    00000149: 	popq	%rbx
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp593:
    00000150: 	movl	%edx, %eax
    00000152: 	retq # Offset: 338
.Ltmp594:
    00000153: 	movl	%edx, %ecx
    00000155: 	xorl	%eax, %eax
    00000157: 	xorl	%r8d, %r8d
    0000015a: 	jmp	.Ltmp599 # Offset: 346
.Ltmp597:
    0000015f: 	movslq	%r8d, %rdx
    00000162: 	movl	%ecx, %eax
    00000164: 	xorb	(%rdi,%rdx), %al
    00000167: 	leal	0x1(%r8), %edx
    0000016b: 	cmpl	%edx, %esi
    0000016d: 	jle	.Ltmp600 # Offset: 365
    0000016f: 	movslq	%edx, %rdx
    00000172: 	xorb	(%rdi,%rdx), %al
    00000175: 	leal	0x2(%r8), %edx
    00000179: 	cmpl	%esi, %edx
    0000017b: 	jge	.Ltmp600 # Offset: 379
    0000017d: 	movslq	%edx, %rdx
    00000180: 	xorb	(%rdi,%rdx), %al
    00000183: 	leal	0x3(%r8), %edx
    00000187: 	cmpl	%edx, %esi
    00000189: 	jle	.Ltmp600 # Offset: 393
    0000018b: 	movslq	%edx, %rdx
    0000018e: 	xorb	(%rdi,%rdx), %al
    00000191: 	leal	0x4(%r8), %edx
    00000195: 	cmpl	%edx, %esi
    00000197: 	jle	.Ltmp600 # Offset: 407
    00000199: 	movslq	%edx, %rdx
    0000019c: 	xorb	(%rdi,%rdx), %al
    0000019f: 	leal	0x5(%r8), %edx
    000001a3: 	cmpl	%edx, %esi
    000001a5: 	jle	.Ltmp600 # Offset: 421
    000001a7: 	movslq	%edx, %rdx
    000001aa: 	addl	$0x6, %r8d
    000001ae: 	xorb	(%rdi,%rdx), %al
    000001b1: 	cmpl	%r8d, %esi
    000001b4: 	jle	.Ltmp600 # Offset: 436
    000001b6: 	movslq	%r8d, %r8
    000001b9: 	xorb	(%rdi,%r8), %al
.Ltmp600:
    000001bd: 	retq # Offset: 445
.Ltmp596:
    000001be: 	movl	%ecx, %eax
    000001c0: 	retq # Offset: 448
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor1IaET_PKS0_iS0_"

Binary Function "_Z8bit_xor2IaET_PKS0_iS0_" after disassembly {
  Number      : 100
  State       : disassembled
  Address     : 0xb5b0
  Size        : 0x1b7
  MaxSize     : 0x1c0
  Offset      : 0xb5b0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor2IaET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB099:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movq	%rdi, %r9
    0000000a: 	addq	%rsi, %rdi
    0000000d: 	cmpq	%rdi, %r9
    00000010: 	je	.Ltmp601 # Offset: 16
    00000016: 	leaq	-0x1(%rsi), %r8
    0000001a: 	movq	%r9, %rax
    0000001d: 	cmpq	$0xe, %r8
    00000021: 	jbe	.Ltmp602 # Offset: 33
    00000027: 	movq	%rsi, %rcx
    0000002a: 	pxor	%xmm0, %xmm0
    0000002e: 	andq	$-0x10, %rcx
    00000032: 	addq	%r9, %rcx
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp603:
    00000038: 	movdqu	(%rax), %xmm2
    0000003c: 	addq	$0x10, %rax
    00000040: 	pxor	%xmm2, %xmm0
    00000044: 	cmpq	%rcx, %rax
    00000047: 	jne	.Ltmp603 # Offset: 71
    00000049: 	movdqa	%xmm0, %xmm1
    0000004d: 	movq	%rsi, %rax
    00000050: 	psrldq	$0x8, %xmm1
    00000055: 	andq	$-0x10, %rax
    00000059: 	pxor	%xmm1, %xmm0
    0000005d: 	leaq	(%r9,%rax), %r8
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	psrldq	$0x4, %xmm1
    0000006a: 	pxor	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x2, %xmm1
    00000077: 	pxor	%xmm1, %xmm0
    0000007b: 	movdqa	%xmm0, %xmm1
    0000007f: 	psrldq	$0x1, %xmm1
    00000084: 	pxor	%xmm1, %xmm0
    00000088: 	movd	%xmm0, %ecx
    0000008c: 	xorl	%edx, %ecx
    0000008e: 	cmpq	%rax, %rsi
    00000091: 	je	.Ltmp604 # Offset: 145
.Ltmp607:
    00000097: 	subq	%rax, %rsi
    0000009a: 	leaq	-0x1(%rsi), %rdx
    0000009e: 	cmpq	$0x6, %rdx
    000000a2: 	jbe	.Ltmp605 # Offset: 162
    000000a8: 	movq	(%r9,%rax), %rdx
    000000ac: 	pushq	%rbx
    000000ad: 	movl	%edx, %eax
    000000af: 	movzbl	%dh, %ebx
    000000b2: 	xorl	%ebx, %eax
    000000b4: 	xorl	%ecx, %eax
    000000b6: 	movq	%rdx, %rcx
    000000b9: 	shrq	$0x10, %rcx
    000000bd: 	xorl	%ecx, %eax
    000000bf: 	movq	%rdx, %rcx
    000000c2: 	shrq	$0x18, %rcx
    000000c6: 	xorl	%ecx, %eax
    000000c8: 	movq	%rdx, %rcx
    000000cb: 	shrq	$0x20, %rcx
    000000cf: 	xorl	%ecx, %eax
    000000d1: 	movq	%rdx, %rcx
    000000d4: 	shrq	$0x28, %rcx
    000000d8: 	xorl	%ecx, %eax
    000000da: 	movq	%rdx, %rcx
    000000dd: 	shrq	$0x38, %rdx
    000000e1: 	shrq	$0x30, %rcx
    000000e5: 	xorl	%ecx, %eax
    000000e7: 	xorl	%edx, %eax
    000000e9: 	movq	%rsi, %rdx
    000000ec: 	andq	$-0x8, %rdx
    000000f0: 	addq	%rdx, %r8
    000000f3: 	cmpq	%rdx, %rsi
    000000f6: 	je	.Ltmp606 # Offset: 246
    000000f8: 	leaq	0x1(%r8), %rdx
    000000fc: 	xorb	(%r8), %al
    000000ff: 	cmpq	%rdx, %rdi
    00000102: 	je	.Ltmp606 # Offset: 258
    00000104: 	leaq	0x2(%r8), %rdx
    00000108: 	xorb	0x1(%r8), %al
    0000010c: 	cmpq	%rdx, %rdi
    0000010f: 	je	.Ltmp606 # Offset: 271
    00000111: 	leaq	0x3(%r8), %rdx
    00000115: 	xorb	0x2(%r8), %al
    00000119: 	cmpq	%rdx, %rdi
    0000011c: 	je	.Ltmp606 # Offset: 284
    0000011e: 	leaq	0x4(%r8), %rdx
    00000122: 	xorb	0x3(%r8), %al
    00000126: 	cmpq	%rdx, %rdi
    00000129: 	je	.Ltmp606 # Offset: 297
    0000012b: 	leaq	0x5(%r8), %rdx
    0000012f: 	xorb	0x4(%r8), %al
    00000133: 	cmpq	%rdx, %rdi
    00000136: 	je	.Ltmp606 # Offset: 310
    00000138: 	leaq	0x6(%r8), %rdx
    0000013c: 	xorb	0x5(%r8), %al
    00000140: 	cmpq	%rdx, %rdi
    00000143: 	je	.Ltmp606 # Offset: 323
    00000145: 	xorb	0x6(%r8), %al
.Ltmp606:
    00000149: 	popq	%rbx
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp601:
    00000150: 	movl	%edx, %eax
    00000152: 	retq # Offset: 338
.Ltmp602:
    00000153: 	movl	%edx, %ecx
    00000155: 	movq	%r9, %r8
    00000158: 	xorl	%eax, %eax
    0000015a: 	jmp	.Ltmp607 # Offset: 346
.Ltmp605:
    0000015f: 	movzbl	(%r8), %eax
    00000163: 	leaq	0x1(%r8), %rdx
    00000167: 	xorl	%ecx, %eax
    00000169: 	cmpq	%rdx, %rdi
    0000016c: 	je	.Ltmp608 # Offset: 364
    0000016e: 	leaq	0x2(%r8), %rdx
    00000172: 	xorb	0x1(%r8), %al
    00000176: 	cmpq	%rdx, %rdi
    00000179: 	je	.Ltmp608 # Offset: 377
    0000017b: 	leaq	0x3(%r8), %rdx
    0000017f: 	xorb	0x2(%r8), %al
    00000183: 	cmpq	%rdx, %rdi
    00000186: 	je	.Ltmp608 # Offset: 390
    00000188: 	leaq	0x4(%r8), %rdx
    0000018c: 	xorb	0x3(%r8), %al
    00000190: 	cmpq	%rdx, %rdi
    00000193: 	je	.Ltmp608 # Offset: 403
    00000195: 	leaq	0x5(%r8), %rdx
    00000199: 	xorb	0x4(%r8), %al
    0000019d: 	cmpq	%rdx, %rdi
    000001a0: 	je	.Ltmp608 # Offset: 416
    000001a2: 	leaq	0x6(%r8), %rdx
    000001a6: 	xorb	0x5(%r8), %al
    000001aa: 	cmpq	%rdx, %rdi
    000001ad: 	je	.Ltmp608 # Offset: 429
    000001af: 	xorb	0x6(%r8), %al
.Ltmp608:
    000001b3: 	retq # Offset: 435
.Ltmp604:
    000001b4: 	movl	%ecx, %eax
    000001b6: 	retq # Offset: 438
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor2IaET_PKS0_iS0_"

Binary Function "_Z8bit_xor3IaET_PKS0_iS0_" after disassembly {
  Number      : 101
  State       : disassembled
  Address     : 0xb770
  Size        : 0x2bb
  MaxSize     : 0x2c0
  Offset      : 0xb770
  Section     : .text
  Orc Section : .local.text._Z8bit_xor3IaET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0100:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	leal	-0x1(%rsi), %edi
    0000000a: 	movl	%esi, %r8d
    0000000d: 	movl	%edx, %eax
    0000000f: 	testl	%edi, %edi
    00000011: 	jle	.Ltmp609 # Offset: 17
    00000017: 	leal	-0x2(%rsi), %r9d
    0000001b: 	movl	%r9d, %esi
    0000001e: 	shrl	%esi
    00000020: 	addl	$0x1, %esi
    00000023: 	cmpl	$0x1d, %r9d
    00000027: 	jbe	.Ltmp610 # Offset: 39
    0000002d: 	movl	%esi, %r9d
    00000030: 	movdqa	DATAat0x33580(%rip), %xmm4
    00000038: 	movq	%rcx, %rax
    0000003b: 	pxor	%xmm2, %xmm2
    0000003f: 	shrl	$0x4, %r9d
    00000043: 	subl	$0x1, %r9d
    00000047: 	shlq	$0x5, %r9
    0000004b: 	leaq	0x20(%rcx,%r9), %r9
.Ltmp611:
    00000050: 	movdqu	(%rax), %xmm0
    00000054: 	movdqu	0x10(%rax), %xmm3
    00000059: 	addq	$0x20, %rax
    0000005d: 	pand	%xmm4, %xmm0
    00000061: 	pand	%xmm4, %xmm3
    00000065: 	movdqa	%xmm0, %xmm1
    00000069: 	movdqu	-0x20(%rax), %xmm0
    0000006e: 	packuswb	%xmm3, %xmm1
    00000072: 	movdqu	-0x10(%rax), %xmm3
    00000077: 	psrlw	$0x8, %xmm0
    0000007c: 	psrlw	$0x8, %xmm3
    00000081: 	packuswb	%xmm3, %xmm0
    00000085: 	pxor	%xmm1, %xmm0
    00000089: 	pxor	%xmm0, %xmm2
    0000008d: 	cmpq	%r9, %rax
    00000090: 	jne	.Ltmp611 # Offset: 144
    00000092: 	movdqa	%xmm2, %xmm0
    00000096: 	movl	%esi, %r9d
    00000099: 	psrldq	$0x8, %xmm0
    0000009e: 	andl	$-0x10, %r9d
    000000a2: 	pxor	%xmm0, %xmm2
    000000a6: 	movdqa	%xmm2, %xmm0
    000000aa: 	psrldq	$0x4, %xmm0
    000000af: 	pxor	%xmm0, %xmm2
    000000b3: 	movdqa	%xmm2, %xmm0
    000000b7: 	psrldq	$0x2, %xmm0
    000000bc: 	pxor	%xmm0, %xmm2
    000000c0: 	movdqa	%xmm2, %xmm0
    000000c4: 	psrldq	$0x1, %xmm0
    000000c9: 	pxor	%xmm0, %xmm2
    000000cd: 	movd	%xmm2, %eax
    000000d1: 	xorl	%edx, %eax
    000000d3: 	leal	(%r9,%r9), %edx
    000000d7: 	cmpl	%r9d, %esi
    000000da: 	je	.Ltmp612 # Offset: 218
.Ltmp615:
    000000e0: 	movslq	%edx, %r9
    000000e3: 	xorb	(%rcx,%r9), %al
    000000e7: 	xorb	0x1(%rcx,%r9), %al
    000000ec: 	leal	0x2(%rdx), %r9d
    000000f0: 	cmpl	%edi, %r9d
    000000f3: 	jge	.Ltmp612 # Offset: 243
    000000f9: 	movslq	%r9d, %r9
    000000fc: 	movzbl	0x1(%rcx,%r9), %r10d
    00000102: 	xorb	(%rcx,%r9), %r10b
    00000106: 	movl	%r10d, %r9d
    00000109: 	xorl	%r9d, %eax
    0000010c: 	leal	0x4(%rdx), %r9d
    00000110: 	cmpl	%r9d, %edi
    00000113: 	jle	.Ltmp612 # Offset: 275
    00000119: 	movslq	%r9d, %r9
    0000011c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000122: 	xorb	(%rcx,%r9), %r10b
    00000126: 	movl	%r10d, %r9d
    00000129: 	xorl	%r9d, %eax
    0000012c: 	leal	0x6(%rdx), %r9d
    00000130: 	cmpl	%r9d, %edi
    00000133: 	jle	.Ltmp612 # Offset: 307
    00000139: 	movslq	%r9d, %r9
    0000013c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000142: 	xorb	(%rcx,%r9), %r10b
    00000146: 	movl	%r10d, %r9d
    00000149: 	xorl	%r9d, %eax
    0000014c: 	leal	0x8(%rdx), %r9d
    00000150: 	cmpl	%r9d, %edi
    00000153: 	jle	.Ltmp612 # Offset: 339
    00000159: 	movslq	%r9d, %r9
    0000015c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000162: 	xorb	(%rcx,%r9), %r10b
    00000166: 	movl	%r10d, %r9d
    00000169: 	xorl	%r9d, %eax
    0000016c: 	leal	0xa(%rdx), %r9d
    00000170: 	cmpl	%r9d, %edi
    00000173: 	jle	.Ltmp612 # Offset: 371
    00000179: 	movslq	%r9d, %r9
    0000017c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000182: 	xorb	(%rcx,%r9), %r10b
    00000186: 	movl	%r10d, %r9d
    00000189: 	xorl	%r9d, %eax
    0000018c: 	leal	0xc(%rdx), %r9d
    00000190: 	cmpl	%r9d, %edi
    00000193: 	jle	.Ltmp612 # Offset: 403
    00000199: 	movslq	%r9d, %r9
    0000019c: 	movzbl	0x1(%rcx,%r9), %r10d
    000001a2: 	xorb	(%rcx,%r9), %r10b
    000001a6: 	movl	%r10d, %r9d
    000001a9: 	xorl	%r9d, %eax
    000001ac: 	leal	0xe(%rdx), %r9d
    000001b0: 	cmpl	%r9d, %edi
    000001b3: 	jle	.Ltmp612 # Offset: 435
    000001b9: 	movslq	%r9d, %r9
    000001bc: 	movzbl	0x1(%rcx,%r9), %r10d
    000001c2: 	xorb	(%rcx,%r9), %r10b
    000001c6: 	movl	%r10d, %r9d
    000001c9: 	xorl	%r9d, %eax
    000001cc: 	leal	0x10(%rdx), %r9d
    000001d0: 	cmpl	%r9d, %edi
    000001d3: 	jle	.Ltmp612 # Offset: 467
    000001d9: 	movslq	%r9d, %r9
    000001dc: 	movzbl	0x1(%rcx,%r9), %r10d
    000001e2: 	xorb	(%rcx,%r9), %r10b
    000001e6: 	movl	%r10d, %r9d
    000001e9: 	xorl	%r9d, %eax
    000001ec: 	leal	0x12(%rdx), %r9d
    000001f0: 	cmpl	%r9d, %edi
    000001f3: 	jle	.Ltmp612 # Offset: 499
    000001f9: 	movslq	%r9d, %r9
    000001fc: 	movzbl	0x1(%rcx,%r9), %r10d
    00000202: 	xorb	(%rcx,%r9), %r10b
    00000206: 	movl	%r10d, %r9d
    00000209: 	xorl	%r9d, %eax
    0000020c: 	leal	0x14(%rdx), %r9d
    00000210: 	cmpl	%r9d, %edi
    00000213: 	jle	.Ltmp612 # Offset: 531
    00000219: 	movslq	%r9d, %r9
    0000021c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000222: 	xorb	(%rcx,%r9), %r10b
    00000226: 	movl	%r10d, %r9d
    00000229: 	xorl	%r9d, %eax
    0000022c: 	leal	0x16(%rdx), %r9d
    00000230: 	cmpl	%r9d, %edi
    00000233: 	jle	.Ltmp612 # Offset: 563
    00000235: 	movslq	%r9d, %r9
    00000238: 	movzbl	0x1(%rcx,%r9), %r10d
    0000023e: 	xorb	(%rcx,%r9), %r10b
    00000242: 	movl	%r10d, %r9d
    00000245: 	xorl	%r9d, %eax
    00000248: 	leal	0x18(%rdx), %r9d
    0000024c: 	cmpl	%r9d, %edi
    0000024f: 	jle	.Ltmp612 # Offset: 591
    00000251: 	movslq	%r9d, %r9
    00000254: 	movzbl	0x1(%rcx,%r9), %r10d
    0000025a: 	xorb	(%rcx,%r9), %r10b
    0000025e: 	movl	%r10d, %r9d
    00000261: 	xorl	%r9d, %eax
    00000264: 	leal	0x1a(%rdx), %r9d
    00000268: 	cmpl	%r9d, %edi
    0000026b: 	jle	.Ltmp612 # Offset: 619
    0000026d: 	movslq	%r9d, %r9
    00000270: 	addl	$0x1c, %edx
    00000273: 	movzbl	0x1(%rcx,%r9), %r10d
    00000279: 	xorb	(%rcx,%r9), %r10b
    0000027d: 	movl	%r10d, %r9d
    00000280: 	xorl	%r9d, %eax
    00000283: 	cmpl	%edx, %edi
    00000285: 	jle	.Ltmp612 # Offset: 645
    00000287: 	movslq	%edx, %rdx
    0000028a: 	movzbl	0x1(%rcx,%rdx), %edi
    0000028f: 	xorb	(%rcx,%rdx), %dil
    00000293: 	movl	%edi, %edx
    00000295: 	xorl	%edx, %eax
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp612:
    000002a0: 	addl	%esi, %esi
.Ltmp614:
    000002a2: 	cmpl	%r8d, %esi
    000002a5: 	jge	.Ltmp613 # Offset: 677
    000002a7: 	movslq	%esi, %rsi
    000002aa: 	xorb	(%rcx,%rsi), %al
.Ltmp613:
    000002ad: 	retq # Offset: 685
    000002ae: 	nop # Size: 2
.Ltmp609:
    000002b0: 	xorl	%esi, %esi
    000002b2: 	jmp	.Ltmp614 # Offset: 690
.Ltmp610:
    000002b4: 	xorl	%edx, %edx
    000002b6: 	jmp	.Ltmp615 # Offset: 694
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor3IaET_PKS0_iS0_"

Binary Function "_Z8bit_xor4IaET_PKS0_iS0_" after disassembly {
  Number      : 102
  State       : disassembled
  Address     : 0xba30
  Size        : 0x41b
  MaxSize     : 0x420
  Offset      : 0xba30
  Section     : .text
  Orc Section : .local.text._Z8bit_xor4IaET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0101:
    00000000: 	endbr64
    00000004: 	leal	-0x3(%rsi), %r8d
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%edx, %eax
    0000000d: 	movl	%esi, %edi
    0000000f: 	testl	%r8d, %r8d
    00000012: 	jle	.Ltmp616 # Offset: 18
    00000018: 	leal	-0x4(%rsi), %r9d
    0000001c: 	movl	%r9d, %esi
    0000001f: 	shrl	$0x2, %esi
    00000022: 	addl	$0x1, %esi
    00000025: 	cmpl	$0x3b, %r9d
    00000029: 	jbe	.Ltmp617 # Offset: 41
    0000002f: 	movl	%esi, %r9d
    00000032: 	movdqa	DATAat0x33580(%rip), %xmm5
    0000003a: 	movq	%rcx, %rax
    0000003d: 	pxor	%xmm2, %xmm2
    00000041: 	shrl	$0x4, %r9d
    00000045: 	subl	$0x1, %r9d
    00000049: 	shlq	$0x6, %r9
    0000004d: 	leaq	0x40(%rcx,%r9), %r9
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp618:
    00000058: 	movdqu	(%rax), %xmm1
    0000005c: 	movdqu	0x10(%rax), %xmm0
    00000061: 	movdqa	%xmm5, %xmm7
    00000065: 	addq	$0x40, %rax
    00000069: 	movdqu	-0x20(%rax), %xmm6
    0000006e: 	movdqu	-0x10(%rax), %xmm3
    00000073: 	pand	%xmm5, %xmm1
    00000077: 	pand	%xmm5, %xmm0
    0000007b: 	movdqa	%xmm1, %xmm4
    0000007f: 	movdqu	-0x30(%rax), %xmm1
    00000084: 	pand	%xmm5, %xmm6
    00000088: 	packuswb	%xmm0, %xmm4
    0000008c: 	movdqu	-0x40(%rax), %xmm0
    00000091: 	psrlw	$0x8, %xmm3
    00000096: 	psrlw	$0x8, %xmm1
    0000009b: 	psrlw	$0x8, %xmm0
    000000a0: 	packuswb	%xmm1, %xmm0
    000000a4: 	movdqu	-0x10(%rax), %xmm1
    000000a9: 	pand	%xmm5, %xmm1
    000000ad: 	packuswb	%xmm1, %xmm6
    000000b1: 	movdqu	-0x20(%rax), %xmm1
    000000b6: 	psrlw	$0x8, %xmm1
    000000bb: 	packuswb	%xmm3, %xmm1
    000000bf: 	movdqa	%xmm5, %xmm3
    000000c3: 	pand	%xmm1, %xmm7
    000000c7: 	psrlw	$0x8, %xmm1
    000000cc: 	pand	%xmm0, %xmm3
    000000d0: 	psrlw	$0x8, %xmm0
    000000d5: 	packuswb	%xmm7, %xmm3
    000000d9: 	movdqa	%xmm5, %xmm7
    000000dd: 	packuswb	%xmm1, %xmm0
    000000e1: 	movdqa	%xmm5, %xmm1
    000000e5: 	pand	%xmm6, %xmm7
    000000e9: 	pand	%xmm4, %xmm1
    000000ed: 	psrlw	$0x8, %xmm6
    000000f2: 	pxor	%xmm3, %xmm0
    000000f6: 	movdqa	%xmm1, %xmm3
    000000fa: 	movdqa	%xmm4, %xmm1
    000000fe: 	psrlw	$0x8, %xmm1
    00000103: 	packuswb	%xmm7, %xmm3
    00000107: 	packuswb	%xmm6, %xmm1
    0000010b: 	pxor	%xmm3, %xmm1
    0000010f: 	pxor	%xmm1, %xmm0
    00000113: 	pxor	%xmm0, %xmm2
    00000117: 	cmpq	%r9, %rax
    0000011a: 	jne	.Ltmp618 # Offset: 282
    00000120: 	movdqa	%xmm2, %xmm0
    00000124: 	movl	%esi, %r9d
    00000127: 	psrldq	$0x8, %xmm0
    0000012c: 	andl	$-0x10, %r9d
    00000130: 	pxor	%xmm0, %xmm2
    00000134: 	movdqa	%xmm2, %xmm0
    00000138: 	psrldq	$0x4, %xmm0
    0000013d: 	pxor	%xmm0, %xmm2
    00000141: 	movdqa	%xmm2, %xmm0
    00000145: 	psrldq	$0x2, %xmm0
    0000014a: 	pxor	%xmm0, %xmm2
    0000014e: 	movdqa	%xmm2, %xmm0
    00000152: 	psrldq	$0x1, %xmm0
    00000157: 	pxor	%xmm0, %xmm2
    0000015b: 	movd	%xmm2, %eax
    0000015f: 	xorl	%edx, %eax
    00000161: 	leal	(,%r9,4), %edx
    00000169: 	cmpl	%esi, %r9d
    0000016c: 	je	.Ltmp619 # Offset: 364
.Ltmp622:
    00000172: 	movslq	%edx, %r9
    00000175: 	xorb	(%rcx,%r9), %al
    00000179: 	xorb	0x1(%rcx,%r9), %al
    0000017e: 	xorb	0x2(%rcx,%r9), %al
    00000183: 	xorb	0x3(%rcx,%r9), %al
    00000188: 	leal	0x4(%rdx), %r9d
    0000018c: 	cmpl	%r9d, %r8d
    0000018f: 	jle	.Ltmp619 # Offset: 399
    00000195: 	movslq	%r9d, %r9
    00000198: 	movzbl	0x1(%rcx,%r9), %r10d
    0000019e: 	xorb	0x2(%rcx,%r9), %r10b
    000001a3: 	xorb	(%rcx,%r9), %r10b
    000001a7: 	xorb	0x3(%rcx,%r9), %r10b
    000001ac: 	movl	%r10d, %r9d
    000001af: 	xorl	%r9d, %eax
    000001b2: 	leal	0x8(%rdx), %r9d
    000001b6: 	cmpl	%r9d, %r8d
    000001b9: 	jle	.Ltmp619 # Offset: 441
    000001bf: 	movslq	%r9d, %r9
    000001c2: 	movzbl	0x1(%rcx,%r9), %r10d
    000001c8: 	xorb	0x2(%rcx,%r9), %r10b
    000001cd: 	xorb	(%rcx,%r9), %r10b
    000001d1: 	xorb	0x3(%rcx,%r9), %r10b
    000001d6: 	movl	%r10d, %r9d
    000001d9: 	xorl	%r9d, %eax
    000001dc: 	leal	0xc(%rdx), %r9d
    000001e0: 	cmpl	%r9d, %r8d
    000001e3: 	jle	.Ltmp619 # Offset: 483
    000001e9: 	movslq	%r9d, %r9
    000001ec: 	movzbl	0x1(%rcx,%r9), %r10d
    000001f2: 	xorb	0x2(%rcx,%r9), %r10b
    000001f7: 	xorb	(%rcx,%r9), %r10b
    000001fb: 	xorb	0x3(%rcx,%r9), %r10b
    00000200: 	movl	%r10d, %r9d
    00000203: 	xorl	%r9d, %eax
    00000206: 	leal	0x10(%rdx), %r9d
    0000020a: 	cmpl	%r9d, %r8d
    0000020d: 	jle	.Ltmp619 # Offset: 525
    00000213: 	movslq	%r9d, %r9
    00000216: 	movzbl	0x1(%rcx,%r9), %r10d
    0000021c: 	xorb	0x2(%rcx,%r9), %r10b
    00000221: 	xorb	(%rcx,%r9), %r10b
    00000225: 	xorb	0x3(%rcx,%r9), %r10b
    0000022a: 	movl	%r10d, %r9d
    0000022d: 	xorl	%r9d, %eax
    00000230: 	leal	0x14(%rdx), %r9d
    00000234: 	cmpl	%r9d, %r8d
    00000237: 	jle	.Ltmp619 # Offset: 567
    0000023d: 	movslq	%r9d, %r9
    00000240: 	movzbl	0x1(%rcx,%r9), %r10d
    00000246: 	xorb	0x2(%rcx,%r9), %r10b
    0000024b: 	xorb	(%rcx,%r9), %r10b
    0000024f: 	xorb	0x3(%rcx,%r9), %r10b
    00000254: 	movl	%r10d, %r9d
    00000257: 	xorl	%r9d, %eax
    0000025a: 	leal	0x18(%rdx), %r9d
    0000025e: 	cmpl	%r9d, %r8d
    00000261: 	jle	.Ltmp619 # Offset: 609
    00000267: 	movslq	%r9d, %r9
    0000026a: 	movzbl	0x1(%rcx,%r9), %r10d
    00000270: 	xorb	0x2(%rcx,%r9), %r10b
    00000275: 	xorb	(%rcx,%r9), %r10b
    00000279: 	xorb	0x3(%rcx,%r9), %r10b
    0000027e: 	movl	%r10d, %r9d
    00000281: 	xorl	%r9d, %eax
    00000284: 	leal	0x1c(%rdx), %r9d
    00000288: 	cmpl	%r9d, %r8d
    0000028b: 	jle	.Ltmp619 # Offset: 651
    00000291: 	movslq	%r9d, %r9
    00000294: 	movzbl	0x1(%rcx,%r9), %r10d
    0000029a: 	xorb	0x2(%rcx,%r9), %r10b
    0000029f: 	xorb	(%rcx,%r9), %r10b
    000002a3: 	xorb	0x3(%rcx,%r9), %r10b
    000002a8: 	movl	%r10d, %r9d
    000002ab: 	xorl	%r9d, %eax
    000002ae: 	leal	0x20(%rdx), %r9d
    000002b2: 	cmpl	%r9d, %r8d
    000002b5: 	jle	.Ltmp619 # Offset: 693
    000002bb: 	movslq	%r9d, %r9
    000002be: 	movzbl	0x1(%rcx,%r9), %r10d
    000002c4: 	xorb	0x2(%rcx,%r9), %r10b
    000002c9: 	xorb	(%rcx,%r9), %r10b
    000002cd: 	xorb	0x3(%rcx,%r9), %r10b
    000002d2: 	movl	%r10d, %r9d
    000002d5: 	xorl	%r9d, %eax
    000002d8: 	leal	0x24(%rdx), %r9d
    000002dc: 	cmpl	%r9d, %r8d
    000002df: 	jle	.Ltmp619 # Offset: 735
    000002e5: 	movslq	%r9d, %r9
    000002e8: 	movzbl	0x1(%rcx,%r9), %r10d
    000002ee: 	xorb	0x2(%rcx,%r9), %r10b
    000002f3: 	xorb	(%rcx,%r9), %r10b
    000002f7: 	xorb	0x3(%rcx,%r9), %r10b
    000002fc: 	movl	%r10d, %r9d
    000002ff: 	xorl	%r9d, %eax
    00000302: 	leal	0x28(%rdx), %r9d
    00000306: 	cmpl	%r9d, %r8d
    00000309: 	jle	.Ltmp619 # Offset: 777
    0000030f: 	movslq	%r9d, %r9
    00000312: 	movzbl	0x1(%rcx,%r9), %r10d
    00000318: 	xorb	0x2(%rcx,%r9), %r10b
    0000031d: 	xorb	(%rcx,%r9), %r10b
    00000321: 	xorb	0x3(%rcx,%r9), %r10b
    00000326: 	movl	%r10d, %r9d
    00000329: 	xorl	%r9d, %eax
    0000032c: 	leal	0x2c(%rdx), %r9d
    00000330: 	cmpl	%r9d, %r8d
    00000333: 	jle	.Ltmp619 # Offset: 819
    00000339: 	movslq	%r9d, %r9
    0000033c: 	movzbl	0x1(%rcx,%r9), %r10d
    00000342: 	xorb	0x2(%rcx,%r9), %r10b
    00000347: 	xorb	(%rcx,%r9), %r10b
    0000034b: 	xorb	0x3(%rcx,%r9), %r10b
    00000350: 	movl	%r10d, %r9d
    00000353: 	xorl	%r9d, %eax
    00000356: 	leal	0x30(%rdx), %r9d
    0000035a: 	cmpl	%r9d, %r8d
    0000035d: 	jle	.Ltmp619 # Offset: 861
    0000035f: 	movslq	%r9d, %r9
    00000362: 	movzbl	0x1(%rcx,%r9), %r10d
    00000368: 	xorb	0x2(%rcx,%r9), %r10b
    0000036d: 	xorb	(%rcx,%r9), %r10b
    00000371: 	xorb	0x3(%rcx,%r9), %r10b
    00000376: 	movl	%r10d, %r9d
    00000379: 	xorl	%r9d, %eax
    0000037c: 	leal	0x34(%rdx), %r9d
    00000380: 	cmpl	%r9d, %r8d
    00000383: 	jle	.Ltmp619 # Offset: 899
    00000385: 	movslq	%r9d, %r9
    00000388: 	addl	$0x38, %edx
    0000038b: 	movzbl	0x1(%rcx,%r9), %r10d
    00000391: 	xorb	0x2(%rcx,%r9), %r10b
    00000396: 	xorb	(%rcx,%r9), %r10b
    0000039a: 	xorb	0x3(%rcx,%r9), %r10b
    0000039f: 	movl	%r10d, %r9d
    000003a2: 	xorl	%r9d, %eax
    000003a5: 	cmpl	%edx, %r8d
    000003a8: 	jle	.Ltmp619 # Offset: 936
    000003aa: 	movslq	%edx, %rdx
    000003ad: 	movzbl	0x2(%rcx,%rdx), %r8d
    000003b3: 	xorb	0x1(%rcx,%rdx), %r8b
    000003b8: 	xorb	(%rcx,%rdx), %r8b
    000003bc: 	xorb	0x3(%rcx,%rdx), %r8b
    000003c1: 	movl	%r8d, %edx
    000003c4: 	xorl	%edx, %eax
    000003c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp619:
    000003d0: 	leal	(,%rsi,4), %edx
.Ltmp621:
    000003d7: 	cmpl	%edx, %edi
    000003d9: 	jle	.Ltmp620 # Offset: 985
    000003db: 	movslq	%edx, %rsi
    000003de: 	xorb	(%rcx,%rsi), %al
    000003e1: 	leal	0x1(%rdx), %esi
    000003e4: 	cmpl	%edi, %esi
    000003e6: 	jge	.Ltmp620 # Offset: 998
    000003e8: 	movslq	%esi, %rsi
    000003eb: 	xorb	(%rcx,%rsi), %al
    000003ee: 	leal	0x2(%rdx), %esi
    000003f1: 	cmpl	%edi, %esi
    000003f3: 	jge	.Ltmp620 # Offset: 1011
    000003f5: 	movslq	%esi, %rsi
    000003f8: 	addl	$0x3, %edx
    000003fb: 	xorb	(%rcx,%rsi), %al
    000003fe: 	cmpl	%edx, %edi
    00000400: 	jle	.Ltmp620 # Offset: 1024
    00000402: 	movslq	%edx, %rdx
    00000405: 	xorb	(%rcx,%rdx), %al
.Ltmp620:
    00000408: 	retq # Offset: 1032
    00000409: 	nopl	(%rax) # Size: 7
.Ltmp616:
    00000410: 	xorl	%edx, %edx
    00000412: 	jmp	.Ltmp621 # Offset: 1042
.Ltmp617:
    00000414: 	xorl	%edx, %edx
    00000416: 	jmp	.Ltmp622 # Offset: 1046
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor4IaET_PKS0_iS0_"

Binary Function "_Z8bit_xor5IaET_PKS0_iS0_" after disassembly {
  Number      : 103
  State       : disassembled
  Address     : 0xbe50
  Size        : 0x3b8
  MaxSize     : 0x3c0
  Offset      : 0xbe50
  Section     : .text
  Orc Section : .local.text._Z8bit_xor5IaET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0102:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	leal	-0x1(%rsi), %r8d
    00000009: 	movq	%rdi, %rcx
    0000000c: 	movl	%edx, %eax
    0000000e: 	pushq	%rbx
    0000000f: 	subq	$0x100, %rsp
    00000016: 	testl	%r8d, %r8d
    00000019: 	jle	.Ltmp623 # Offset: 25
    0000001f: 	leal	-0x2(%rsi), %edi
    00000022: 	movl	%edi, %r9d
    00000025: 	shrl	%r9d
    00000028: 	leal	0x1(%r9), %r10d
    0000002c: 	cmpl	$0xd, %edi
    0000002f: 	jbe	.Ltmp624 # Offset: 47
    00000035: 	movzbl	%dl, %edx
    00000038: 	movq	%rcx, %rax
    0000003b: 	movd	%edx, %xmm0
    0000003f: 	movl	%r10d, %edx
    00000042: 	shrl	$0x3, %edx
    00000045: 	subl	$0x1, %edx
    00000048: 	shlq	$0x4, %rdx
    0000004c: 	leaq	0x10(%rcx,%rdx), %rdx
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp625:
    00000058: 	movdqu	(%rax), %xmm2
    0000005c: 	addq	$0x10, %rax
    00000060: 	pxor	%xmm2, %xmm0
    00000064: 	cmpq	%rax, %rdx
    00000067: 	jne	.Ltmp625 # Offset: 103
    00000069: 	movl	%r10d, %edx
    0000006c: 	movd	%xmm0, %eax
    00000070: 	movaps	%xmm0, 0xe8(%rsp)
    00000078: 	xorb	0xea(%rsp), %al
    0000007f: 	andl	$-0x8, %edx
    00000082: 	movaps	%xmm0, 0xd8(%rsp)
    0000008a: 	xorb	0xdc(%rsp), %al
    00000091: 	movaps	%xmm0, 0xc8(%rsp)
    00000099: 	leal	(%rdx,%rdx), %r11d
    0000009d: 	xorb	0xce(%rsp), %al
    000000a4: 	movaps	%xmm0, 0xb8(%rsp)
    000000ac: 	xorb	0xc0(%rsp), %al
    000000b3: 	movaps	%xmm0, 0xa8(%rsp)
    000000bb: 	xorb	0xb2(%rsp), %al
    000000c2: 	movaps	%xmm0, 0x98(%rsp)
    000000ca: 	xorb	0xa4(%rsp), %al
    000000d1: 	movaps	%xmm0, 0x88(%rsp)
    000000d9: 	xorb	0x96(%rsp), %al
    000000e0: 	movaps	%xmm0, 0x78(%rsp)
    000000e5: 	movaps	%xmm0, 0x68(%rsp)
    000000ea: 	movzbl	0x6b(%rsp), %edi
    000000ef: 	xorb	0x79(%rsp), %dil
    000000f4: 	movaps	%xmm0, 0x58(%rsp)
    000000f9: 	xorb	0x5d(%rsp), %dil
    000000fe: 	movaps	%xmm0, 0x48(%rsp)
    00000103: 	xorb	0x4f(%rsp), %dil
    00000108: 	movaps	%xmm0, 0x38(%rsp)
    0000010d: 	xorb	0x41(%rsp), %dil
    00000112: 	movaps	%xmm0, 0x28(%rsp)
    00000117: 	xorb	0x33(%rsp), %dil
    0000011c: 	movaps	%xmm0, 0x18(%rsp)
    00000121: 	xorb	0x25(%rsp), %dil
    00000126: 	movaps	%xmm0, 0x8(%rsp)
    0000012b: 	xorb	0x17(%rsp), %dil
    00000130: 	cmpl	%edx, %r10d
    00000133: 	je	.Ltmp626 # Offset: 307
.Ltmp634:
    00000139: 	subl	%edx, %r9d
    0000013c: 	leal	0x1(%r9), %ebx
    00000140: 	cmpl	$0x2, %r9d
    00000144: 	jbe	.Ltmp627 # Offset: 324
    0000014a: 	movzbl	%dil, %edi
    0000014e: 	movzbl	%al, %eax
    00000151: 	movq	(%rcx,%rdx,2), %xmm0
    00000156: 	shlq	$0x8, %rdi
    0000015a: 	orq	%rax, %rdi
    0000015d: 	movq	%rdi, %xmm3
    00000162: 	pxor	%xmm0, %xmm3
    00000166: 	movq	%xmm3, %rdx
    0000016b: 	movq	%xmm3, %rdi
    00000170: 	movq	%xmm3, %r9
    00000175: 	movq	%xmm3, (%rsp)
    0000017a: 	movl	%edx, %eax
    0000017c: 	shrq	$0x10, %rdi
    00000180: 	movq	%xmm3, -0x8(%rsp)
    00000186: 	xorl	%edi, %eax
    00000188: 	movq	%xmm3, %rdi
    0000018d: 	shrq	$0x18, %r9
    00000191: 	movq	%xmm3, -0x10(%rsp)
    00000197: 	shrq	$0x20, %rdi
    0000019b: 	movq	%xmm3, -0x18(%rsp)
    000001a1: 	xorl	%edi, %eax
    000001a3: 	movq	%xmm3, %rdi
    000001a8: 	movq	%xmm3, -0x20(%rsp)
    000001ae: 	shrq	$0x30, %rdi
    000001b2: 	movq	%xmm3, -0x28(%rsp)
    000001b8: 	xorl	%edi, %eax
    000001ba: 	movzbl	%dh, %edi
    000001bd: 	movl	%ebx, %edx
    000001bf: 	movq	%xmm3, -0x30(%rsp)
    000001c5: 	xorl	%r9d, %edi
    000001c8: 	movq	%xmm3, %r9
    000001cd: 	andl	$-0x4, %edx
    000001d0: 	movq	%xmm3, -0x38(%rsp)
    000001d6: 	shrq	$0x28, %r9
    000001da: 	leal	(%r11,%rdx,2), %r11d
    000001de: 	xorl	%r9d, %edi
    000001e1: 	movq	%xmm3, %r9
    000001e6: 	shrq	$0x38, %r9
    000001ea: 	xorl	%r9d, %edi
    000001ed: 	cmpl	%edx, %ebx
    000001ef: 	je	.Ltmp626 # Offset: 495
.Ltmp627:
    000001f1: 	movslq	%r11d, %rdx
    000001f4: 	xorb	(%rcx,%rdx), %al
    000001f7: 	xorb	0x1(%rcx,%rdx), %dil
    000001fc: 	leal	0x2(%r11), %edx
    00000200: 	cmpl	%edx, %r8d
    00000203: 	jle	.Ltmp626 # Offset: 515
    00000205: 	movslq	%edx, %rdx
    00000208: 	addl	$0x4, %r11d
    0000020c: 	xorb	(%rcx,%rdx), %al
    0000020f: 	xorb	0x1(%rcx,%rdx), %dil
    00000214: 	cmpl	%r11d, %r8d
    00000217: 	jle	.Ltmp626 # Offset: 535
    00000219: 	movslq	%r11d, %r11
    0000021c: 	xorb	(%rcx,%r11), %al
    00000220: 	xorb	0x1(%rcx,%r11), %dil
.Ltmp626:
    00000225: 	addl	%r10d, %r10d
.Ltmp633:
    00000228: 	cmpl	%r10d, %esi
    0000022b: 	jle	.Ltmp628 # Offset: 555
    00000231: 	movl	%esi, %r9d
    00000234: 	subl	%r10d, %r9d
    00000237: 	leal	-0x1(%r9), %edx
    0000023b: 	cmpl	$0xe, %edx
    0000023e: 	jbe	.Ltmp629 # Offset: 574
    00000244: 	movl	%r9d, %edx
    00000247: 	movslq	%r10d, %r8
    0000024a: 	pxor	%xmm0, %xmm0
    0000024e: 	shrl	$0x4, %edx
    00000251: 	addq	%rcx, %r8
    00000254: 	leal	-0x1(%rdx), %r11d
    00000258: 	leaq	0x10(%r8), %rdx
    0000025c: 	shlq	$0x4, %r11
    00000260: 	addq	%rdx, %r11
    00000263: 	jmp	.Ltmp630 # Offset: 611
    00000265: 	nopl	(%rax) # Size: 3
.Ltmp631:
    00000268: 	addq	$0x10, %rdx
.Ltmp630:
    0000026c: 	movdqu	(%r8), %xmm1
    00000271: 	movq	%rdx, %r8
    00000274: 	pxor	%xmm1, %xmm0
    00000278: 	cmpq	%r11, %rdx
    0000027b: 	jne	.Ltmp631 # Offset: 635
    0000027d: 	movdqa	%xmm0, %xmm1
    00000281: 	psrldq	$0x8, %xmm1
    00000286: 	pxor	%xmm1, %xmm0
    0000028a: 	movdqa	%xmm0, %xmm1
    0000028e: 	psrldq	$0x4, %xmm1
    00000293: 	pxor	%xmm1, %xmm0
    00000297: 	movdqa	%xmm0, %xmm1
    0000029b: 	psrldq	$0x2, %xmm1
    000002a0: 	pxor	%xmm1, %xmm0
    000002a4: 	movdqa	%xmm0, %xmm1
    000002a8: 	psrldq	$0x1, %xmm1
    000002ad: 	pxor	%xmm1, %xmm0
    000002b1: 	movd	%xmm0, %edx
    000002b5: 	xorl	%edx, %eax
    000002b7: 	movl	%r9d, %edx
    000002ba: 	andl	$-0x10, %edx
    000002bd: 	leal	(%rdx,%r10), %r8d
    000002c1: 	cmpl	%r9d, %edx
    000002c4: 	je	.Ltmp628 # Offset: 708
.Ltmp635:
    000002ca: 	subl	%edx, %r9d
    000002cd: 	leal	-0x1(%r9), %r11d
    000002d1: 	cmpl	$0x6, %r11d
    000002d5: 	jbe	.Ltmp632 # Offset: 725
    000002d7: 	movslq	%r10d, %r10
    000002da: 	addq	%rcx, %r10
    000002dd: 	movq	(%r10,%rdx), %rbx
    000002e1: 	movl	%ebx, %edx
    000002e3: 	movzbl	%bh, %ebp
    000002e6: 	xorl	%ebp, %edx
    000002e8: 	xorl	%eax, %edx
    000002ea: 	movq	%rbx, %rax
    000002ed: 	shrq	$0x10, %rax
    000002f1: 	xorl	%eax, %edx
    000002f3: 	movq	%rbx, %rax
    000002f6: 	shrq	$0x18, %rax
    000002fa: 	xorl	%eax, %edx
    000002fc: 	movq	%rbx, %rax
    000002ff: 	shrq	$0x20, %rax
    00000303: 	xorl	%eax, %edx
    00000305: 	movq	%rbx, %rax
    00000308: 	shrq	$0x28, %rax
    0000030c: 	xorl	%eax, %edx
    0000030e: 	movq	%rbx, %rax
    00000311: 	shrq	$0x38, %rbx
    00000315: 	shrq	$0x30, %rax
    00000319: 	xorl	%eax, %edx
    0000031b: 	movl	%edx, %eax
    0000031d: 	movl	%r9d, %edx
    00000320: 	andl	$-0x8, %edx
    00000323: 	xorl	%ebx, %eax
    00000325: 	addl	%edx, %r8d
    00000328: 	cmpl	%edx, %r9d
    0000032b: 	je	.Ltmp628 # Offset: 811
.Ltmp632:
    0000032d: 	movslq	%r8d, %rdx
    00000330: 	xorb	(%rcx,%rdx), %al
    00000333: 	leal	0x1(%r8), %edx
    00000337: 	cmpl	%edx, %esi
    00000339: 	jle	.Ltmp628 # Offset: 825
    0000033b: 	movslq	%edx, %rdx
    0000033e: 	xorb	(%rcx,%rdx), %al
    00000341: 	leal	0x2(%r8), %edx
    00000345: 	cmpl	%edx, %esi
    00000347: 	jle	.Ltmp628 # Offset: 839
    00000349: 	movslq	%edx, %rdx
    0000034c: 	xorb	(%rcx,%rdx), %al
    0000034f: 	leal	0x3(%r8), %edx
    00000353: 	cmpl	%edx, %esi
    00000355: 	jle	.Ltmp628 # Offset: 853
    00000357: 	movslq	%edx, %rdx
    0000035a: 	xorb	(%rcx,%rdx), %al
    0000035d: 	leal	0x4(%r8), %edx
    00000361: 	cmpl	%edx, %esi
    00000363: 	jle	.Ltmp628 # Offset: 867
    00000365: 	movslq	%edx, %rdx
    00000368: 	xorb	(%rcx,%rdx), %al
    0000036b: 	leal	0x5(%r8), %edx
    0000036f: 	cmpl	%edx, %esi
    00000371: 	jle	.Ltmp628 # Offset: 881
    00000373: 	movslq	%edx, %rdx
    00000376: 	addl	$0x6, %r8d
    0000037a: 	xorb	(%rcx,%rdx), %al
    0000037d: 	cmpl	%r8d, %esi
    00000380: 	jle	.Ltmp628 # Offset: 896
    00000382: 	movslq	%r8d, %r8
    00000385: 	xorb	(%rcx,%r8), %al
.Ltmp628:
    00000389: 	addq	$0x100, %rsp
    00000390: 	xorl	%edi, %eax
    00000392: 	popq	%rbx
    00000393: 	popq	%rbp
    00000394: 	retq # Offset: 916
    00000395: 	nopl	(%rax) # Size: 3
.Ltmp623:
    00000398: 	xorl	%r10d, %r10d
    0000039b: 	xorl	%edi, %edi
    0000039d: 	jmp	.Ltmp633 # Offset: 925
.Ltmp624:
    000003a2: 	xorl	%edx, %edx
    000003a4: 	xorl	%r11d, %r11d
    000003a7: 	xorl	%edi, %edi
    000003a9: 	jmp	.Ltmp634 # Offset: 937
.Ltmp629:
    000003ae: 	movl	%r10d, %r8d
    000003b1: 	xorl	%edx, %edx
    000003b3: 	jmp	.Ltmp635 # Offset: 947
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor5IaET_PKS0_iS0_"

Binary Function "_Z8bit_xor6IaET_PKS0_iS0_" after disassembly {
  Number      : 104
  State       : disassembled
  Address     : 0xc210
  Size        : 0x3b6
  MaxSize     : 0x3c0
  Offset      : 0xc210
  Section     : .text
  Orc Section : .local.text._Z8bit_xor6IaET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0103:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movl	%edx, %eax
    00000007: 	pushq	%rbx
    00000008: 	subq	$0x100, %rsp
    0000000f: 	cmpl	$0x3, %esi
    00000012: 	jle	.Ltmp636 # Offset: 18
    00000018: 	leal	-0x4(%rsi), %ecx
    0000001b: 	movl	%ecx, %ebp
    0000001d: 	shrl	$0x2, %ebp
    00000020: 	leal	0x1(%rbp), %r8d
    00000024: 	cmpl	$0xb, %ecx
    00000027: 	jbe	.Ltmp637 # Offset: 39
    0000002d: 	movzbl	%dl, %edx
    00000030: 	movq	%rdi, %rax
    00000033: 	movd	%edx, %xmm0
    00000037: 	movl	%r8d, %edx
    0000003a: 	shrl	$0x2, %edx
    0000003d: 	subl	$0x1, %edx
    00000040: 	shlq	$0x4, %rdx
    00000044: 	leaq	0x10(%rdi,%rdx), %rdx
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp638:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	pxor	%xmm2, %xmm0
    0000005c: 	cmpq	%rdx, %rax
    0000005f: 	jne	.Ltmp638 # Offset: 95
    00000061: 	movl	%r8d, %ebx
    00000064: 	movd	%xmm0, %eax
    00000068: 	movaps	%xmm0, 0xe8(%rsp)
    00000070: 	xorb	0xec(%rsp), %al
    00000077: 	andl	$-0x4, %ebx
    0000007a: 	movaps	%xmm0, 0xd8(%rsp)
    00000082: 	xorb	0xe0(%rsp), %al
    00000089: 	movaps	%xmm0, 0xc8(%rsp)
    00000091: 	leal	(,%rbx,4), %ecx
    00000098: 	xorb	0xd4(%rsp), %al
    0000009f: 	movaps	%xmm0, 0xb8(%rsp)
    000000a7: 	movaps	%xmm0, 0xa8(%rsp)
    000000af: 	movzbl	0xad(%rsp), %r10d
    000000b8: 	xorb	0xb9(%rsp), %r10b
    000000c0: 	movaps	%xmm0, 0x98(%rsp)
    000000c8: 	xorb	0xa1(%rsp), %r10b
    000000d0: 	movaps	%xmm0, 0x88(%rsp)
    000000d8: 	xorb	0x95(%rsp), %r10b
    000000e0: 	movaps	%xmm0, 0x78(%rsp)
    000000e5: 	movaps	%xmm0, 0x68(%rsp)
    000000ea: 	movzbl	0x6e(%rsp), %r11d
    000000f0: 	xorb	0x7a(%rsp), %r11b
    000000f5: 	movaps	%xmm0, 0x58(%rsp)
    000000fa: 	xorb	0x62(%rsp), %r11b
    000000ff: 	movaps	%xmm0, 0x48(%rsp)
    00000104: 	xorb	0x56(%rsp), %r11b
    00000109: 	movaps	%xmm0, 0x38(%rsp)
    0000010e: 	movaps	%xmm0, 0x28(%rsp)
    00000113: 	movzbl	0x2f(%rsp), %edx
    00000118: 	xorb	0x3b(%rsp), %dl
    0000011c: 	movaps	%xmm0, 0x18(%rsp)
    00000121: 	xorb	0x23(%rsp), %dl
    00000125: 	movaps	%xmm0, 0x8(%rsp)
    0000012a: 	xorb	0x17(%rsp), %dl
    0000012e: 	cmpl	%ebx, %r8d
    00000131: 	je	.Ltmp639 # Offset: 305
.Ltmp647:
    00000137: 	movl	%r8d, %r9d
    0000013a: 	subl	%ebx, %r9d
    0000013d: 	cmpl	%ebx, %ebp
    0000013f: 	je	.Ltmp640 # Offset: 319
    00000145: 	movzbl	%dl, %edx
    00000148: 	movzbl	%r11b, %r11d
    0000014c: 	movzbl	%r10b, %r10d
    00000150: 	movzbl	%al, %eax
    00000153: 	shlq	$0x8, %rdx
    00000157: 	movq	(%rdi,%rbx,4), %xmm0
    0000015c: 	orq	%r11, %rdx
    0000015f: 	shlq	$0x8, %rdx
    00000163: 	orq	%r10, %rdx
    00000166: 	shlq	$0x8, %rdx
    0000016a: 	orq	%rax, %rdx
    0000016d: 	movq	%rdx, %xmm3
    00000172: 	pxor	%xmm0, %xmm3
    00000176: 	movq	%xmm3, %rbx
    0000017b: 	movq	%xmm3, %rdx
    00000180: 	movq	%xmm3, %r11
    00000185: 	movq	%xmm3, (%rsp)
    0000018a: 	shrq	$0x20, %rdx
    0000018e: 	movl	%ebx, %eax
    00000190: 	shrq	$0x30, %r11
    00000194: 	movq	%xmm3, %rbp
    00000199: 	xorl	%edx, %eax
    0000019b: 	movzbl	%bh, %edx
    0000019e: 	movl	%r9d, %ebx
    000001a1: 	shrq	$0x18, %rbp
    000001a5: 	movq	%rdx, %r10
    000001a8: 	movq	%xmm3, %rdx
    000001ad: 	andl	$-0x2, %ebx
    000001b0: 	movq	%xmm3, -0x8(%rsp)
    000001b6: 	shrq	$0x28, %rdx
    000001ba: 	movq	%xmm3, -0x10(%rsp)
    000001c0: 	leal	(%rcx,%rbx,4), %ecx
    000001c3: 	xorl	%edx, %r10d
    000001c6: 	movq	%xmm3, %rdx
    000001cb: 	movq	%xmm3, -0x18(%rsp)
    000001d1: 	shrq	$0x10, %rdx
    000001d5: 	movq	%xmm3, -0x20(%rsp)
    000001db: 	xorl	%edx, %r11d
    000001de: 	movq	%xmm3, %rdx
    000001e3: 	movq	%xmm3, -0x28(%rsp)
    000001e9: 	shrq	$0x38, %rdx
    000001ed: 	movq	%xmm3, -0x30(%rsp)
    000001f3: 	movq	%xmm3, -0x38(%rsp)
    000001f9: 	xorl	%ebp, %edx
    000001fb: 	cmpl	%ebx, %r9d
    000001fe: 	je	.Ltmp639 # Offset: 510
.Ltmp640:
    00000200: 	movslq	%ecx, %rcx
    00000203: 	xorb	(%rdi,%rcx), %al
    00000206: 	xorb	0x1(%rdi,%rcx), %r10b
    0000020b: 	xorb	0x2(%rdi,%rcx), %r11b
    00000210: 	xorb	0x3(%rdi,%rcx), %dl
.Ltmp639:
    00000214: 	xorl	%r11d, %r10d
    00000217: 	shll	$0x2, %r8d
    0000021b: 	xorl	%edx, %r10d
.Ltmp646:
    0000021e: 	cmpl	%r8d, %esi
    00000221: 	jle	.Ltmp641 # Offset: 545
    00000227: 	movl	%esi, %r11d
    0000022a: 	subl	%r8d, %r11d
    0000022d: 	leal	-0x1(%r11), %edx
    00000231: 	cmpl	$0xe, %edx
    00000234: 	jbe	.Ltmp642 # Offset: 564
    0000023a: 	movl	%r11d, %edx
    0000023d: 	movslq	%r8d, %rcx
    00000240: 	pxor	%xmm0, %xmm0
    00000244: 	shrl	$0x4, %edx
    00000247: 	addq	%rdi, %rcx
    0000024a: 	leal	-0x1(%rdx), %r9d
    0000024e: 	leaq	0x10(%rcx), %rdx
    00000252: 	shlq	$0x4, %r9
    00000256: 	addq	%rdx, %r9
    00000259: 	jmp	.Ltmp643 # Offset: 601
    0000025b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp644:
    00000260: 	addq	$0x10, %rdx
.Ltmp643:
    00000264: 	movdqu	(%rcx), %xmm1
    00000268: 	movq	%rdx, %rcx
    0000026b: 	pxor	%xmm1, %xmm0
    0000026f: 	cmpq	%r9, %rdx
    00000272: 	jne	.Ltmp644 # Offset: 626
    00000274: 	movdqa	%xmm0, %xmm1
    00000278: 	psrldq	$0x8, %xmm1
    0000027d: 	pxor	%xmm1, %xmm0
    00000281: 	movdqa	%xmm0, %xmm1
    00000285: 	psrldq	$0x4, %xmm1
    0000028a: 	pxor	%xmm1, %xmm0
    0000028e: 	movdqa	%xmm0, %xmm1
    00000292: 	psrldq	$0x2, %xmm1
    00000297: 	pxor	%xmm1, %xmm0
    0000029b: 	movdqa	%xmm0, %xmm1
    0000029f: 	psrldq	$0x1, %xmm1
    000002a4: 	pxor	%xmm1, %xmm0
    000002a8: 	movd	%xmm0, %edx
    000002ac: 	xorl	%edx, %eax
    000002ae: 	movl	%r11d, %edx
    000002b1: 	andl	$-0x10, %edx
    000002b4: 	leal	(%rdx,%r8), %r9d
    000002b8: 	cmpl	%r11d, %edx
    000002bb: 	je	.Ltmp641 # Offset: 699
.Ltmp648:
    000002c1: 	subl	%edx, %r11d
    000002c4: 	leal	-0x1(%r11), %ecx
    000002c8: 	cmpl	$0x6, %ecx
    000002cb: 	jbe	.Ltmp645 # Offset: 715
    000002cd: 	movslq	%r8d, %r8
    000002d0: 	addq	%rdi, %r8
    000002d3: 	movq	(%r8,%rdx), %rcx
    000002d7: 	movl	%ecx, %edx
    000002d9: 	movzbl	%ch, %ebx
    000002dc: 	xorl	%ebx, %edx
    000002de: 	xorl	%edx, %eax
    000002e0: 	movq	%rcx, %rdx
    000002e3: 	shrq	$0x10, %rdx
    000002e7: 	xorl	%edx, %eax
    000002e9: 	movq	%rcx, %rdx
    000002ec: 	shrq	$0x18, %rdx
    000002f0: 	xorl	%edx, %eax
    000002f2: 	movq	%rcx, %rdx
    000002f5: 	shrq	$0x20, %rdx
    000002f9: 	xorl	%edx, %eax
    000002fb: 	movq	%rcx, %rdx
    000002fe: 	shrq	$0x28, %rdx
    00000302: 	xorl	%edx, %eax
    00000304: 	movq	%rcx, %rdx
    00000307: 	shrq	$0x38, %rcx
    0000030b: 	shrq	$0x30, %rdx
    0000030f: 	xorl	%edx, %eax
    00000311: 	movl	%r11d, %edx
    00000314: 	andl	$-0x8, %edx
    00000317: 	xorl	%ecx, %eax
    00000319: 	addl	%edx, %r9d
    0000031c: 	cmpl	%edx, %r11d
    0000031f: 	je	.Ltmp641 # Offset: 799
.Ltmp645:
    00000321: 	movslq	%r9d, %rdx
    00000324: 	xorb	(%rdi,%rdx), %al
    00000327: 	leal	0x1(%r9), %edx
    0000032b: 	cmpl	%esi, %edx
    0000032d: 	jge	.Ltmp641 # Offset: 813
    0000032f: 	movslq	%edx, %rdx
    00000332: 	xorb	(%rdi,%rdx), %al
    00000335: 	leal	0x2(%r9), %edx
    00000339: 	cmpl	%esi, %edx
    0000033b: 	jge	.Ltmp641 # Offset: 827
    0000033d: 	movslq	%edx, %rdx
    00000340: 	xorb	(%rdi,%rdx), %al
    00000343: 	leal	0x3(%r9), %edx
    00000347: 	cmpl	%edx, %esi
    00000349: 	jle	.Ltmp641 # Offset: 841
    0000034b: 	movslq	%edx, %rdx
    0000034e: 	xorb	(%rdi,%rdx), %al
    00000351: 	leal	0x4(%r9), %edx
    00000355: 	cmpl	%edx, %esi
    00000357: 	jle	.Ltmp641 # Offset: 855
    00000359: 	movslq	%edx, %rdx
    0000035c: 	xorb	(%rdi,%rdx), %al
    0000035f: 	leal	0x5(%r9), %edx
    00000363: 	cmpl	%edx, %esi
    00000365: 	jle	.Ltmp641 # Offset: 869
    00000367: 	movslq	%edx, %rdx
    0000036a: 	addl	$0x6, %r9d
    0000036e: 	xorb	(%rdi,%rdx), %al
    00000371: 	cmpl	%r9d, %esi
    00000374: 	jle	.Ltmp641 # Offset: 884
    00000376: 	movslq	%r9d, %r9
    00000379: 	xorb	(%rdi,%r9), %al
.Ltmp641:
    0000037d: 	addq	$0x100, %rsp
    00000384: 	xorl	%r10d, %eax
    00000387: 	popq	%rbx
    00000388: 	popq	%rbp
    00000389: 	retq # Offset: 905
    0000038a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp636:
    00000390: 	xorl	%r10d, %r10d
    00000393: 	xorl	%r8d, %r8d
    00000396: 	jmp	.Ltmp646 # Offset: 918
.Ltmp637:
    0000039b: 	xorl	%ebx, %ebx
    0000039d: 	xorl	%ecx, %ecx
    0000039f: 	xorl	%edx, %edx
    000003a1: 	xorl	%r11d, %r11d
    000003a4: 	xorl	%r10d, %r10d
    000003a7: 	jmp	.Ltmp647 # Offset: 935
.Ltmp642:
    000003ac: 	movl	%r8d, %r9d
    000003af: 	xorl	%edx, %edx
    000003b1: 	jmp	.Ltmp648 # Offset: 945
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor6IaET_PKS0_iS0_"

Binary Function "_Z8bit_xor7IaET_PKS0_iS0_" after disassembly {
  Number      : 105
  State       : disassembled
  Address     : 0xc5d0
  Size        : 0x3b6
  MaxSize     : 0x3c0
  Offset      : 0xc5d0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor7IaET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0104:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movl	%edx, %eax
    00000007: 	pushq	%rbx
    00000008: 	subq	$0x100, %rsp
    0000000f: 	cmpl	$0x3, %esi
    00000012: 	jle	.Ltmp649 # Offset: 18
    00000018: 	leal	-0x4(%rsi), %ecx
    0000001b: 	movl	%ecx, %ebp
    0000001d: 	shrl	$0x2, %ebp
    00000020: 	leal	0x1(%rbp), %r8d
    00000024: 	cmpl	$0xb, %ecx
    00000027: 	jbe	.Ltmp650 # Offset: 39
    0000002d: 	movzbl	%dl, %edx
    00000030: 	movq	%rdi, %rax
    00000033: 	movd	%edx, %xmm0
    00000037: 	movl	%r8d, %edx
    0000003a: 	shrl	$0x2, %edx
    0000003d: 	subl	$0x1, %edx
    00000040: 	shlq	$0x4, %rdx
    00000044: 	leaq	0x10(%rdi,%rdx), %rdx
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp651:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	pxor	%xmm2, %xmm0
    0000005c: 	cmpq	%rdx, %rax
    0000005f: 	jne	.Ltmp651 # Offset: 95
    00000061: 	movl	%r8d, %ebx
    00000064: 	movd	%xmm0, %eax
    00000068: 	movaps	%xmm0, 0xe8(%rsp)
    00000070: 	xorb	0xec(%rsp), %al
    00000077: 	andl	$-0x4, %ebx
    0000007a: 	movaps	%xmm0, 0xd8(%rsp)
    00000082: 	xorb	0xe0(%rsp), %al
    00000089: 	movaps	%xmm0, 0xc8(%rsp)
    00000091: 	leal	(,%rbx,4), %ecx
    00000098: 	xorb	0xd4(%rsp), %al
    0000009f: 	movaps	%xmm0, 0xb8(%rsp)
    000000a7: 	movaps	%xmm0, 0xa8(%rsp)
    000000af: 	movzbl	0xad(%rsp), %r10d
    000000b8: 	xorb	0xb9(%rsp), %r10b
    000000c0: 	movaps	%xmm0, 0x98(%rsp)
    000000c8: 	xorb	0xa1(%rsp), %r10b
    000000d0: 	movaps	%xmm0, 0x88(%rsp)
    000000d8: 	xorb	0x95(%rsp), %r10b
    000000e0: 	movaps	%xmm0, 0x78(%rsp)
    000000e5: 	movaps	%xmm0, 0x68(%rsp)
    000000ea: 	movzbl	0x6e(%rsp), %r11d
    000000f0: 	xorb	0x7a(%rsp), %r11b
    000000f5: 	movaps	%xmm0, 0x58(%rsp)
    000000fa: 	xorb	0x62(%rsp), %r11b
    000000ff: 	movaps	%xmm0, 0x48(%rsp)
    00000104: 	xorb	0x56(%rsp), %r11b
    00000109: 	movaps	%xmm0, 0x38(%rsp)
    0000010e: 	movaps	%xmm0, 0x28(%rsp)
    00000113: 	movzbl	0x2f(%rsp), %edx
    00000118: 	xorb	0x3b(%rsp), %dl
    0000011c: 	movaps	%xmm0, 0x18(%rsp)
    00000121: 	xorb	0x23(%rsp), %dl
    00000125: 	movaps	%xmm0, 0x8(%rsp)
    0000012a: 	xorb	0x17(%rsp), %dl
    0000012e: 	cmpl	%ebx, %r8d
    00000131: 	je	.Ltmp652 # Offset: 305
.Ltmp660:
    00000137: 	movl	%r8d, %r9d
    0000013a: 	subl	%ebx, %r9d
    0000013d: 	cmpl	%ebx, %ebp
    0000013f: 	je	.Ltmp653 # Offset: 319
    00000145: 	movzbl	%dl, %edx
    00000148: 	movzbl	%r11b, %r11d
    0000014c: 	movzbl	%r10b, %r10d
    00000150: 	movzbl	%al, %eax
    00000153: 	shlq	$0x8, %rdx
    00000157: 	movq	(%rdi,%rbx,4), %xmm0
    0000015c: 	orq	%r11, %rdx
    0000015f: 	shlq	$0x8, %rdx
    00000163: 	orq	%r10, %rdx
    00000166: 	shlq	$0x8, %rdx
    0000016a: 	orq	%rax, %rdx
    0000016d: 	movq	%rdx, %xmm3
    00000172: 	pxor	%xmm0, %xmm3
    00000176: 	movq	%xmm3, %rbx
    0000017b: 	movq	%xmm3, %rdx
    00000180: 	movq	%xmm3, %r11
    00000185: 	movq	%xmm3, (%rsp)
    0000018a: 	shrq	$0x20, %rdx
    0000018e: 	movl	%ebx, %eax
    00000190: 	shrq	$0x30, %r11
    00000194: 	movq	%xmm3, %rbp
    00000199: 	xorl	%edx, %eax
    0000019b: 	movzbl	%bh, %edx
    0000019e: 	movl	%r9d, %ebx
    000001a1: 	shrq	$0x18, %rbp
    000001a5: 	movq	%rdx, %r10
    000001a8: 	movq	%xmm3, %rdx
    000001ad: 	andl	$-0x2, %ebx
    000001b0: 	movq	%xmm3, -0x8(%rsp)
    000001b6: 	shrq	$0x28, %rdx
    000001ba: 	movq	%xmm3, -0x10(%rsp)
    000001c0: 	leal	(%rcx,%rbx,4), %ecx
    000001c3: 	xorl	%edx, %r10d
    000001c6: 	movq	%xmm3, %rdx
    000001cb: 	movq	%xmm3, -0x18(%rsp)
    000001d1: 	shrq	$0x10, %rdx
    000001d5: 	movq	%xmm3, -0x20(%rsp)
    000001db: 	xorl	%edx, %r11d
    000001de: 	movq	%xmm3, %rdx
    000001e3: 	movq	%xmm3, -0x28(%rsp)
    000001e9: 	shrq	$0x38, %rdx
    000001ed: 	movq	%xmm3, -0x30(%rsp)
    000001f3: 	movq	%xmm3, -0x38(%rsp)
    000001f9: 	xorl	%ebp, %edx
    000001fb: 	cmpl	%ebx, %r9d
    000001fe: 	je	.Ltmp652 # Offset: 510
.Ltmp653:
    00000200: 	movslq	%ecx, %rcx
    00000203: 	xorb	(%rdi,%rcx), %al
    00000206: 	xorb	0x1(%rdi,%rcx), %r10b
    0000020b: 	xorb	0x2(%rdi,%rcx), %r11b
    00000210: 	xorb	0x3(%rdi,%rcx), %dl
.Ltmp652:
    00000214: 	xorl	%r11d, %r10d
    00000217: 	shll	$0x2, %r8d
    0000021b: 	xorl	%edx, %r10d
.Ltmp659:
    0000021e: 	cmpl	%r8d, %esi
    00000221: 	jle	.Ltmp654 # Offset: 545
    00000227: 	movl	%esi, %r11d
    0000022a: 	subl	%r8d, %r11d
    0000022d: 	leal	-0x1(%r11), %edx
    00000231: 	cmpl	$0xe, %edx
    00000234: 	jbe	.Ltmp655 # Offset: 564
    0000023a: 	movl	%r11d, %edx
    0000023d: 	movslq	%r8d, %rcx
    00000240: 	pxor	%xmm0, %xmm0
    00000244: 	shrl	$0x4, %edx
    00000247: 	addq	%rdi, %rcx
    0000024a: 	leal	-0x1(%rdx), %r9d
    0000024e: 	leaq	0x10(%rcx), %rdx
    00000252: 	shlq	$0x4, %r9
    00000256: 	addq	%rdx, %r9
    00000259: 	jmp	.Ltmp656 # Offset: 601
    0000025b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp657:
    00000260: 	addq	$0x10, %rdx
.Ltmp656:
    00000264: 	movdqu	(%rcx), %xmm1
    00000268: 	movq	%rdx, %rcx
    0000026b: 	pxor	%xmm1, %xmm0
    0000026f: 	cmpq	%r9, %rdx
    00000272: 	jne	.Ltmp657 # Offset: 626
    00000274: 	movdqa	%xmm0, %xmm1
    00000278: 	psrldq	$0x8, %xmm1
    0000027d: 	pxor	%xmm1, %xmm0
    00000281: 	movdqa	%xmm0, %xmm1
    00000285: 	psrldq	$0x4, %xmm1
    0000028a: 	pxor	%xmm1, %xmm0
    0000028e: 	movdqa	%xmm0, %xmm1
    00000292: 	psrldq	$0x2, %xmm1
    00000297: 	pxor	%xmm1, %xmm0
    0000029b: 	movdqa	%xmm0, %xmm1
    0000029f: 	psrldq	$0x1, %xmm1
    000002a4: 	pxor	%xmm1, %xmm0
    000002a8: 	movd	%xmm0, %edx
    000002ac: 	xorl	%edx, %eax
    000002ae: 	movl	%r11d, %edx
    000002b1: 	andl	$-0x10, %edx
    000002b4: 	leal	(%rdx,%r8), %r9d
    000002b8: 	cmpl	%r11d, %edx
    000002bb: 	je	.Ltmp654 # Offset: 699
.Ltmp661:
    000002c1: 	subl	%edx, %r11d
    000002c4: 	leal	-0x1(%r11), %ecx
    000002c8: 	cmpl	$0x6, %ecx
    000002cb: 	jbe	.Ltmp658 # Offset: 715
    000002cd: 	movslq	%r8d, %r8
    000002d0: 	addq	%rdi, %r8
    000002d3: 	movq	(%r8,%rdx), %rcx
    000002d7: 	movl	%ecx, %edx
    000002d9: 	movzbl	%ch, %ebx
    000002dc: 	xorl	%ebx, %edx
    000002de: 	xorl	%edx, %eax
    000002e0: 	movq	%rcx, %rdx
    000002e3: 	shrq	$0x10, %rdx
    000002e7: 	xorl	%edx, %eax
    000002e9: 	movq	%rcx, %rdx
    000002ec: 	shrq	$0x18, %rdx
    000002f0: 	xorl	%edx, %eax
    000002f2: 	movq	%rcx, %rdx
    000002f5: 	shrq	$0x20, %rdx
    000002f9: 	xorl	%edx, %eax
    000002fb: 	movq	%rcx, %rdx
    000002fe: 	shrq	$0x28, %rdx
    00000302: 	xorl	%edx, %eax
    00000304: 	movq	%rcx, %rdx
    00000307: 	shrq	$0x38, %rcx
    0000030b: 	shrq	$0x30, %rdx
    0000030f: 	xorl	%edx, %eax
    00000311: 	movl	%r11d, %edx
    00000314: 	andl	$-0x8, %edx
    00000317: 	xorl	%ecx, %eax
    00000319: 	addl	%edx, %r9d
    0000031c: 	cmpl	%edx, %r11d
    0000031f: 	je	.Ltmp654 # Offset: 799
.Ltmp658:
    00000321: 	movslq	%r9d, %rdx
    00000324: 	xorb	(%rdi,%rdx), %al
    00000327: 	leal	0x1(%r9), %edx
    0000032b: 	cmpl	%esi, %edx
    0000032d: 	jge	.Ltmp654 # Offset: 813
    0000032f: 	movslq	%edx, %rdx
    00000332: 	xorb	(%rdi,%rdx), %al
    00000335: 	leal	0x2(%r9), %edx
    00000339: 	cmpl	%esi, %edx
    0000033b: 	jge	.Ltmp654 # Offset: 827
    0000033d: 	movslq	%edx, %rdx
    00000340: 	xorb	(%rdi,%rdx), %al
    00000343: 	leal	0x3(%r9), %edx
    00000347: 	cmpl	%esi, %edx
    00000349: 	jge	.Ltmp654 # Offset: 841
    0000034b: 	movslq	%edx, %rdx
    0000034e: 	xorb	(%rdi,%rdx), %al
    00000351: 	leal	0x4(%r9), %edx
    00000355: 	cmpl	%edx, %esi
    00000357: 	jle	.Ltmp654 # Offset: 855
    00000359: 	movslq	%edx, %rdx
    0000035c: 	xorb	(%rdi,%rdx), %al
    0000035f: 	leal	0x5(%r9), %edx
    00000363: 	cmpl	%edx, %esi
    00000365: 	jle	.Ltmp654 # Offset: 869
    00000367: 	movslq	%edx, %rdx
    0000036a: 	addl	$0x6, %r9d
    0000036e: 	xorb	(%rdi,%rdx), %al
    00000371: 	cmpl	%r9d, %esi
    00000374: 	jle	.Ltmp654 # Offset: 884
    00000376: 	movslq	%r9d, %r9
    00000379: 	xorb	(%rdi,%r9), %al
.Ltmp654:
    0000037d: 	addq	$0x100, %rsp
    00000384: 	xorl	%r10d, %eax
    00000387: 	popq	%rbx
    00000388: 	popq	%rbp
    00000389: 	retq # Offset: 905
    0000038a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp649:
    00000390: 	xorl	%r10d, %r10d
    00000393: 	xorl	%r8d, %r8d
    00000396: 	jmp	.Ltmp659 # Offset: 918
.Ltmp650:
    0000039b: 	xorl	%ebx, %ebx
    0000039d: 	xorl	%edx, %edx
    0000039f: 	xorl	%r11d, %r11d
    000003a2: 	xorl	%r10d, %r10d
    000003a5: 	xorl	%ecx, %ecx
    000003a7: 	jmp	.Ltmp660 # Offset: 935
.Ltmp655:
    000003ac: 	movl	%r8d, %r9d
    000003af: 	xorl	%edx, %edx
    000003b1: 	jmp	.Ltmp661 # Offset: 945
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor7IaET_PKS0_iS0_"

Binary Function "_Z8bit_xor8IaET_PKS0_iS0_" after disassembly {
  Number      : 106
  State       : disassembled
  Address     : 0xc990
  Size        : 0x3c6
  MaxSize     : 0x3d0
  Offset      : 0xc990
  Section     : .text
  Orc Section : .local.text._Z8bit_xor8IaET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0105:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdi, %rcx
    00000009: 	movl	%edx, %edi
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0xf8, %rsp
    00000014: 	cmpl	$0x7, %esi
    00000017: 	jle	.Ltmp662 # Offset: 23
    0000001d: 	leal	-0x8(%rsi), %eax
    00000020: 	movl	%eax, %r8d
    00000023: 	shrl	$0x3, %r8d
    00000027: 	addl	$0x1, %r8d
    0000002b: 	cmpl	$0x7, %eax
    0000002e: 	jbe	.Ltmp663 # Offset: 46
    00000034: 	movzbl	%dl, %edx
    00000037: 	movq	%rcx, %rax
    0000003a: 	movd	%edx, %xmm0
    0000003e: 	movl	%r8d, %edx
    00000041: 	shrl	%edx
    00000043: 	subl	$0x1, %edx
    00000046: 	shlq	$0x4, %rdx
    0000004a: 	leaq	0x10(%rcx,%rdx), %rdx
    0000004f: 	nop # Size: 1
.Ltmp664:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	pxor	%xmm2, %xmm0
    0000005c: 	cmpq	%rax, %rdx
    0000005f: 	jne	.Ltmp664 # Offset: 95
    00000061: 	movl	%r8d, %r12d
    00000064: 	movd	%xmm0, %edi
    00000068: 	movaps	%xmm0, 0xe8(%rsp)
    00000070: 	xorb	0xf0(%rsp), %dil
    00000078: 	movaps	%xmm0, 0xd8(%rsp)
    00000080: 	andl	$-0x2, %r12d
    00000084: 	movaps	%xmm0, 0xc8(%rsp)
    0000008c: 	movzbl	0xd1(%rsp), %r9d
    00000095: 	xorb	0xd9(%rsp), %r9b
    0000009d: 	movaps	%xmm0, 0xb8(%rsp)
    000000a5: 	movaps	%xmm0, 0xa8(%rsp)
    000000ad: 	movzbl	0xb2(%rsp), %r10d
    000000b6: 	xorb	0xba(%rsp), %r10b
    000000be: 	movaps	%xmm0, 0x98(%rsp)
    000000c6: 	movaps	%xmm0, 0x88(%rsp)
    000000ce: 	movzbl	0x93(%rsp), %eax
    000000d6: 	xorb	0x9b(%rsp), %al
    000000dd: 	movaps	%xmm0, 0x78(%rsp)
    000000e2: 	movaps	%xmm0, 0x68(%rsp)
    000000e7: 	movzbl	0x74(%rsp), %r11d
    000000ed: 	xorb	0x7c(%rsp), %r11b
    000000f2: 	movaps	%xmm0, 0x58(%rsp)
    000000f7: 	movaps	%xmm0, 0x48(%rsp)
    000000fc: 	movzbl	0x55(%rsp), %ebx
    00000101: 	xorb	0x5d(%rsp), %bl
    00000105: 	movaps	%xmm0, 0x38(%rsp)
    0000010a: 	movaps	%xmm0, 0x28(%rsp)
    0000010f: 	movzbl	0x36(%rsp), %ebp
    00000114: 	xorb	0x3e(%rsp), %bpl
    00000119: 	movaps	%xmm0, 0x18(%rsp)
    0000011e: 	movaps	%xmm0, 0x8(%rsp)
    00000123: 	movzbl	0x17(%rsp), %edx
    00000128: 	xorb	0x1f(%rsp), %dl
    0000012c: 	testl	$0xc0000001, %r8d
    00000133: 	je	.Ltmp665 # Offset: 307
.Ltmp672:
    00000139: 	movzbl	%dl, %edx
    0000013c: 	movzbl	%bpl, %ebp
    00000140: 	movzbl	%bl, %ebx
    00000143: 	movzbl	%r11b, %r11d
    00000147: 	shlq	$0x8, %rdx
    0000014b: 	movzbl	%al, %eax
    0000014e: 	movzbl	%r10b, %r10d
    00000152: 	movzbl	%r9b, %r9d
    00000156: 	orq	%rbp, %rdx
    00000159: 	movzbl	%dil, %edi
    0000015d: 	movq	(%rcx,%r12,8), %xmm0
    00000163: 	shlq	$0x8, %rdx
    00000167: 	orq	%rbx, %rdx
    0000016a: 	shlq	$0x8, %rdx
    0000016e: 	orq	%r11, %rdx
    00000171: 	shlq	$0x8, %rdx
    00000175: 	orq	%rax, %rdx
    00000178: 	shlq	$0x8, %rdx
    0000017c: 	orq	%r10, %rdx
    0000017f: 	shlq	$0x8, %rdx
    00000183: 	orq	%r9, %rdx
    00000186: 	movq	%rdx, %rax
    00000189: 	shlq	$0x8, %rax
    0000018d: 	orq	%rdi, %rax
    00000190: 	movq	%rax, %xmm3
    00000195: 	pxor	%xmm0, %xmm3
    00000199: 	movq	%xmm3, %rdx
    0000019e: 	movq	%xmm3, %r10
    000001a3: 	movq	%xmm3, %r11
    000001a8: 	movq	%xmm3, (%rsp)
    000001ad: 	movzbl	%dh, %eax
    000001b0: 	movq	%xmm3, %rbx
    000001b5: 	movq	%xmm3, %rbp
    000001ba: 	movl	%edx, %edi
    000001bc: 	movq	%rax, %r9
    000001bf: 	movq	%xmm3, %rax
    000001c4: 	movq	%xmm3, -0x8(%rsp)
    000001ca: 	shrq	$0x10, %r10
    000001ce: 	movq	%xmm3, -0x10(%rsp)
    000001d4: 	shrq	$0x18, %rax
    000001d8: 	shrq	$0x20, %r11
    000001dc: 	movq	%xmm3, -0x18(%rsp)
    000001e2: 	shrq	$0x28, %rbx
    000001e6: 	shrq	$0x30, %rbp
    000001ea: 	movq	%xmm3, -0x20(%rsp)
    000001f0: 	shrq	$0x38, %rdx
    000001f4: 	movq	%xmm3, -0x28(%rsp)
    000001fa: 	movq	%xmm3, -0x30(%rsp)
    00000200: 	movq	%xmm3, -0x38(%rsp)
.Ltmp665:
    00000206: 	xorl	%r10d, %r9d
    00000209: 	shll	$0x3, %r8d
    0000020d: 	xorl	%eax, %r9d
    00000210: 	xorl	%r11d, %r9d
    00000213: 	xorl	%ebx, %r9d
    00000216: 	xorl	%ebp, %r9d
    00000219: 	xorl	%edx, %r9d
.Ltmp671:
    0000021c: 	cmpl	%r8d, %esi
    0000021f: 	jle	.Ltmp666 # Offset: 543
    00000225: 	movl	%esi, %r11d
    00000228: 	subl	%r8d, %r11d
    0000022b: 	leal	-0x1(%r11), %eax
    0000022f: 	cmpl	$0xe, %eax
    00000232: 	jbe	.Ltmp667 # Offset: 562
    00000238: 	movl	%r11d, %edx
    0000023b: 	movslq	%r8d, %rax
    0000023e: 	pxor	%xmm0, %xmm0
    00000242: 	shrl	$0x4, %edx
    00000245: 	addq	%rcx, %rax
    00000248: 	leal	-0x1(%rdx), %r10d
    0000024c: 	leaq	0x10(%rax), %rdx
    00000250: 	shlq	$0x4, %r10
    00000254: 	addq	%rdx, %r10
    00000257: 	jmp	.Ltmp668 # Offset: 599
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp669:
    00000260: 	addq	$0x10, %rdx
.Ltmp668:
    00000264: 	movdqu	(%rax), %xmm1
    00000268: 	movq	%rdx, %rax
    0000026b: 	pxor	%xmm1, %xmm0
    0000026f: 	cmpq	%r10, %rdx
    00000272: 	jne	.Ltmp669 # Offset: 626
    00000274: 	movdqa	%xmm0, %xmm1
    00000278: 	movl	%r11d, %eax
    0000027b: 	psrldq	$0x8, %xmm1
    00000280: 	andl	$-0x10, %eax
    00000283: 	pxor	%xmm1, %xmm0
    00000287: 	leal	(%rax,%r8), %r10d
    0000028b: 	movdqa	%xmm0, %xmm1
    0000028f: 	psrldq	$0x4, %xmm1
    00000294: 	pxor	%xmm1, %xmm0
    00000298: 	movdqa	%xmm0, %xmm1
    0000029c: 	psrldq	$0x2, %xmm1
    000002a1: 	pxor	%xmm1, %xmm0
    000002a5: 	movdqa	%xmm0, %xmm1
    000002a9: 	psrldq	$0x1, %xmm1
    000002ae: 	pxor	%xmm1, %xmm0
    000002b2: 	movd	%xmm0, %edx
    000002b6: 	xorl	%edx, %edi
    000002b8: 	cmpl	%r11d, %eax
    000002bb: 	je	.Ltmp666 # Offset: 699
.Ltmp673:
    000002c1: 	subl	%eax, %r11d
    000002c4: 	leal	-0x1(%r11), %edx
    000002c8: 	cmpl	$0x6, %edx
    000002cb: 	jbe	.Ltmp670 # Offset: 715
    000002cd: 	movslq	%r8d, %r8
    000002d0: 	addq	%rcx, %rax
    000002d3: 	movq	(%rax,%r8), %rdx
    000002d7: 	movzbl	%dh, %eax
    000002da: 	movl	%edx, %r8d
    000002dd: 	xorl	%r8d, %eax
    000002e0: 	xorl	%edi, %eax
    000002e2: 	movq	%rdx, %rdi
    000002e5: 	shrq	$0x10, %rdi
    000002e9: 	xorl	%edi, %eax
    000002eb: 	movq	%rdx, %rdi
    000002ee: 	shrq	$0x18, %rdi
    000002f2: 	xorl	%edi, %eax
    000002f4: 	movq	%rdx, %rdi
    000002f7: 	shrq	$0x20, %rdi
    000002fb: 	xorl	%edi, %eax
    000002fd: 	movq	%rdx, %rdi
    00000300: 	shrq	$0x28, %rdi
    00000304: 	xorl	%edi, %eax
    00000306: 	movq	%rdx, %rdi
    00000309: 	shrq	$0x38, %rdx
    0000030d: 	shrq	$0x30, %rdi
    00000311: 	xorl	%edi, %eax
    00000313: 	xorl	%edx, %eax
    00000315: 	movl	%eax, %edi
    00000317: 	movl	%r11d, %eax
    0000031a: 	andl	$-0x8, %eax
    0000031d: 	addl	%eax, %r10d
    00000320: 	cmpl	%r11d, %eax
    00000323: 	je	.Ltmp666 # Offset: 803
.Ltmp670:
    00000325: 	movslq	%r10d, %rax
    00000328: 	xorb	(%rcx,%rax), %dil
    0000032c: 	leal	0x1(%r10), %eax
    00000330: 	cmpl	%eax, %esi
    00000332: 	jle	.Ltmp666 # Offset: 818
    00000334: 	cltq
    00000336: 	xorb	(%rcx,%rax), %dil
    0000033a: 	leal	0x2(%r10), %eax
    0000033e: 	cmpl	%eax, %esi
    00000340: 	jle	.Ltmp666 # Offset: 832
    00000342: 	cltq
    00000344: 	xorb	(%rcx,%rax), %dil
    00000348: 	leal	0x3(%r10), %eax
    0000034c: 	cmpl	%eax, %esi
    0000034e: 	jle	.Ltmp666 # Offset: 846
    00000350: 	cltq
    00000352: 	xorb	(%rcx,%rax), %dil
    00000356: 	leal	0x4(%r10), %eax
    0000035a: 	cmpl	%eax, %esi
    0000035c: 	jle	.Ltmp666 # Offset: 860
    0000035e: 	cltq
    00000360: 	xorb	(%rcx,%rax), %dil
    00000364: 	leal	0x5(%r10), %eax
    00000368: 	cmpl	%eax, %esi
    0000036a: 	jle	.Ltmp666 # Offset: 874
    0000036c: 	cltq
    0000036e: 	addl	$0x6, %r10d
    00000372: 	xorb	(%rcx,%rax), %dil
    00000376: 	cmpl	%r10d, %esi
    00000379: 	jle	.Ltmp666 # Offset: 889
    0000037b: 	movslq	%r10d, %r10
    0000037e: 	xorb	(%rcx,%r10), %dil
.Ltmp666:
    00000382: 	addq	$0xf8, %rsp
    00000389: 	movl	%edi, %eax
    0000038b: 	popq	%rbx
    0000038c: 	xorl	%r9d, %eax
    0000038f: 	popq	%rbp
    00000390: 	popq	%r12
    00000392: 	retq # Offset: 914
    00000393: 	nopl	(%rax,%rax) # Size: 5
.Ltmp662:
    00000398: 	xorl	%r9d, %r9d
    0000039b: 	xorl	%r8d, %r8d
    0000039e: 	jmp	.Ltmp671 # Offset: 926
.Ltmp663:
    000003a3: 	xorl	%r12d, %r12d
    000003a6: 	xorl	%edx, %edx
    000003a8: 	xorl	%ebp, %ebp
    000003aa: 	xorl	%ebx, %ebx
    000003ac: 	xorl	%r11d, %r11d
    000003af: 	xorl	%eax, %eax
    000003b1: 	xorl	%r10d, %r10d
    000003b4: 	xorl	%r9d, %r9d
    000003b7: 	jmp	.Ltmp672 # Offset: 951
.Ltmp667:
    000003bc: 	movl	%r8d, %r10d
    000003bf: 	xorl	%eax, %eax
    000003c1: 	jmp	.Ltmp673 # Offset: 961
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor8IaET_PKS0_iS0_"

Binary Function "_Z10logic_and1IaEbPKT_ib" after disassembly {
  Number      : 107
  State       : disassembled
  Address     : 0xcd60
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0xcd60
  Section     : .text
  Orc Section : .local.text._Z10logic_and1IaEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0106:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp674 # Offset: 8
    0000000a: 	testb	%dl, %dl
    0000000c: 	je	.Ltmp674 # Offset: 12
    0000000e: 	leal	-0x1(%rsi), %edx
    00000011: 	leaq	0x1(%rdi,%rdx), %rdx
.Ltmp676:
    00000016: 	cmpb	$0x0, (%rdi)
    00000019: 	je	.Ltmp675 # Offset: 25
    0000001b: 	addq	$0x1, %rdi
    0000001f: 	cmpq	%rdi, %rdx
    00000022: 	jne	.Ltmp676 # Offset: 34
    00000024: 	retq # Offset: 36
    00000025: 	nopl	(%rax) # Size: 3
.Ltmp675:
    00000028: 	xorl	%eax, %eax
.Ltmp674:
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and1IaEbPKT_ib"

Binary Function "_Z10logic_and2IaEbPKT_ib" after disassembly {
  Number      : 108
  State       : disassembled
  Address     : 0xcd90
  Size        : 0x34
  MaxSize     : 0x40
  Offset      : 0xcd90
  Section     : .text
  Orc Section : .local.text._Z10logic_and2IaEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0107:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rcx
    00000007: 	addq	%rdi, %rcx
    0000000a: 	cmpq	%rcx, %rdi
    0000000d: 	je	.Ltmp677 # Offset: 13
    0000000f: 	testb	%dl, %dl
    00000011: 	jne	.Ltmp678 # Offset: 17
.Ltmp679:
    00000013: 	jmp	.Ltmp679 # Offset: 19
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp678:
    00000018: 	addq	$0x1, %rdi
    0000001c: 	movzbl	-0x1(%rdi), %eax
    00000020: 	cmpq	%rdi, %rcx
    00000023: 	je	.Ltmp680 # Offset: 35
    00000025: 	testb	%al, %al
    00000027: 	jne	.Ltmp678 # Offset: 39
    00000029: 	jmp	.Ltmp679 # Offset: 41
.Ltmp677:
    0000002b: 	movl	%edx, %eax
    0000002d: 	retq # Offset: 45
.Ltmp680:
    0000002e: 	testb	%al, %al
    00000030: 	setne	%al
    00000033: 	retq # Offset: 51
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and2IaEbPKT_ib"

Binary Function "_Z10logic_and3IaEbPKT_ib" after disassembly {
  Number      : 109
  State       : disassembled
  Address     : 0xcdd0
  Size        : 0x6a
  MaxSize     : 0x70
  Offset      : 0xcdd0
  Section     : .text
  Orc Section : .local.text._Z10logic_and3IaEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0108:
    00000000: 	endbr64
    00000004: 	cmpl	$0x1, %esi
    00000007: 	jle	.Ltmp681 # Offset: 7
    00000009: 	xorl	%eax, %eax
    0000000b: 	testb	%dl, %dl
    0000000d: 	je	.Ltmp682 # Offset: 13
    0000000f: 	leal	-0x2(%rsi), %eax
    00000012: 	shrl	%eax
    00000014: 	leal	0x2(%rax), %r8d
    00000018: 	movl	$0x2, %eax
    0000001d: 	addq	%r8, %r8
.Ltmp684:
    00000020: 	cmpb	$0x0, -0x2(%rdi,%rax)
    00000025: 	je	.Ltmp683 # Offset: 37
    00000027: 	cmpb	$0x0, -0x1(%rdi,%rax)
    0000002c: 	je	.Ltmp683 # Offset: 44
    0000002e: 	movslq	%eax, %rcx
    00000031: 	addq	$0x2, %rax
    00000035: 	cmpq	%r8, %rax
    00000038: 	jne	.Ltmp684 # Offset: 56
    0000003a: 	cmpl	%ecx, %esi
    0000003c: 	jle	.Ltmp685 # Offset: 60
.Ltmp686:
    0000003e: 	cmpb	$0x0, (%rdi,%rcx)
    00000042: 	je	.Ltmp683 # Offset: 66
    00000044: 	addq	$0x1, %rcx
    00000048: 	cmpl	%ecx, %esi
    0000004a: 	jg	.Ltmp686 # Offset: 74
    0000004c: 	movl	$0x1, %eax
    00000051: 	retq # Offset: 81
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp683:
    00000058: 	xorl	%eax, %eax
    0000005a: 	retq # Offset: 90
.Ltmp685:
    0000005b: 	movl	%edx, %eax
.Ltmp682:
    0000005d: 	retq # Offset: 93
    0000005e: 	nop # Size: 2
.Ltmp681:
    00000060: 	jne	.Ltmp685 # Offset: 96
    00000062: 	testb	%dl, %dl
    00000064: 	je	.Ltmp683 # Offset: 100
    00000066: 	xorl	%ecx, %ecx
    00000068: 	jmp	.Ltmp686 # Offset: 104
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and3IaEbPKT_ib"

Binary Function "_Z10logic_and4IaEbPKT_ib" after disassembly {
  Number      : 110
  State       : disassembled
  Address     : 0xce40
  Size        : 0x81
  MaxSize     : 0x90
  Offset      : 0xce40
  Section     : .text
  Orc Section : .local.text._Z10logic_and4IaEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0109:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	cmpl	$0x3, %esi
    0000000a: 	jle	.Ltmp687 # Offset: 10
    0000000c: 	xorl	%eax, %eax
    0000000e: 	testb	%dl, %dl
    00000010: 	je	.Ltmp688 # Offset: 16
    00000012: 	leal	-0x4(%rsi), %eax
    00000015: 	shrl	$0x2, %eax
    00000018: 	leaq	0x4(%rdi,%rax,4), %r9
    0000001d: 	movq	%rdi, %rax
    00000020: 	movl	$0x4, %edi
    00000025: 	subl	%ecx, %edi
    00000027: 	movl	%edi, %r8d
.Ltmp690:
    0000002a: 	cmpb	$0x0, (%rax)
    0000002d: 	je	.Ltmp689 # Offset: 45
    0000002f: 	cmpb	$0x0, 0x1(%rax)
    00000033: 	je	.Ltmp689 # Offset: 51
    00000035: 	cmpb	$0x0, 0x2(%rax)
    00000039: 	je	.Ltmp689 # Offset: 57
    0000003b: 	cmpb	$0x0, 0x3(%rax)
    0000003f: 	je	.Ltmp689 # Offset: 63
    00000041: 	leal	(%r8,%rax), %edi
    00000045: 	addq	$0x4, %rax
    00000049: 	cmpq	%r9, %rax
    0000004c: 	jne	.Ltmp690 # Offset: 76
    0000004e: 	cmpl	%edi, %esi
    00000050: 	jg	.Ltmp691 # Offset: 80
.Ltmp692:
    00000052: 	movl	%edx, %eax
.Ltmp688:
    00000054: 	retq # Offset: 84
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp689:
    00000058: 	xorl	%eax, %eax
    0000005a: 	retq # Offset: 90
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp687:
    00000060: 	testl	%esi, %esi
    00000062: 	jle	.Ltmp692 # Offset: 98
    00000064: 	testb	%dl, %dl
    00000066: 	je	.Ltmp689 # Offset: 102
    00000068: 	xorl	%edi, %edi
.Ltmp691:
    0000006a: 	movslq	%edi, %rax
.Ltmp693:
    0000006d: 	cmpb	$0x0, (%rcx,%rax)
    00000071: 	je	.Ltmp689 # Offset: 113
    00000073: 	addq	$0x1, %rax
    00000077: 	cmpl	%eax, %esi
    00000079: 	jg	.Ltmp693 # Offset: 121
    0000007b: 	movl	$0x1, %eax
    00000080: 	retq # Offset: 128
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and4IaEbPKT_ib"

Binary Function "_Z10logic_and5IaEbPKT_ib" after disassembly {
  Number      : 111
  State       : disassembled
  Address     : 0xced0
  Size        : 0x94
  MaxSize     : 0xa0
  Offset      : 0xced0
  Section     : .text
  Orc Section : .local.text._Z10logic_and5IaEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0110:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%edx, %eax
    00000009: 	movl	%esi, %edi
    0000000b: 	cmpl	$0x1, %esi
    0000000e: 	jle	.Ltmp694 # Offset: 14
    00000014: 	leal	-0x2(%rsi), %r8d
    00000018: 	movq	%r9, %rcx
    0000001b: 	shrl	%r8d
    0000001e: 	movl	%r8d, %esi
    00000021: 	leaq	0x2(%r9,%rsi,2), %rsi
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp697:
    00000030: 	testb	%dl, %dl
    00000032: 	je	.Ltmp695 # Offset: 50
    00000034: 	cmpb	$0x0, (%rcx)
    00000037: 	setne	%dl
.Ltmp695:
    0000003a: 	testb	%al, %al
    0000003c: 	je	.Ltmp696 # Offset: 60
    0000003e: 	cmpb	$0x0, 0x1(%rcx)
    00000042: 	setne	%al
.Ltmp696:
    00000045: 	addq	$0x2, %rcx
    00000049: 	cmpq	%rsi, %rcx
    0000004c: 	jne	.Ltmp697 # Offset: 76
    0000004e: 	leal	0x2(%r8,%r8), %esi
.Ltmp701:
    00000053: 	cmpl	%esi, %edi
    00000055: 	jle	.Ltmp698 # Offset: 85
    00000057: 	testb	%dl, %dl
    00000059: 	je	.Ltmp699 # Offset: 89
    0000005b: 	movslq	%esi, %rcx
    0000005e: 	subl	$0x1, %edi
    00000061: 	leaq	(%r9,%rcx), %rdx
    00000065: 	subl	%esi, %edi
    00000067: 	leaq	0x1(%r9,%rcx), %rcx
    0000006c: 	addq	%rdi, %rcx
.Ltmp700:
    0000006f: 	cmpb	$0x0, (%rdx)
    00000072: 	je	.Ltmp699 # Offset: 114
    00000074: 	addq	$0x1, %rdx
    00000078: 	cmpq	%rcx, %rdx
    0000007b: 	jne	.Ltmp700 # Offset: 123
    0000007d: 	retq # Offset: 125
    0000007e: 	nop # Size: 2
.Ltmp699:
    00000080: 	xorl	%eax, %eax
    00000082: 	retq # Offset: 130
    00000083: 	nopl	(%rax,%rax) # Size: 5
.Ltmp698:
    00000088: 	andl	%edx, %eax
    0000008a: 	retq # Offset: 138
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp694:
    00000090: 	xorl	%esi, %esi
    00000092: 	jmp	.Ltmp701 # Offset: 146
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and5IaEbPKT_ib"

Binary Function "_Z10logic_and6IaEbPKT_ib" after disassembly {
  Number      : 112
  State       : disassembled
  Address     : 0xcf70
  Size        : 0xdc
  MaxSize     : 0xe0
  Offset      : 0xcf70
  Section     : .text
  Orc Section : .local.text._Z10logic_and6IaEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0111:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movl	%esi, %r11d
    00000008: 	pushq	%rbx
    00000009: 	movq	%rdi, %rbx
    0000000c: 	movl	%edx, %edi
    0000000e: 	cmpl	$0x3, %esi
    00000011: 	jle	.Ltmp702 # Offset: 17
    00000017: 	leal	-0x4(%rsi), %ebp
    0000001a: 	movq	%rbx, %rax
    0000001d: 	movl	%edx, %esi
    0000001f: 	xorl	%r8d, %r8d
    00000022: 	shrl	$0x2, %ebp
    00000025: 	movl	%ebp, %ecx
    00000027: 	leaq	0x4(%rbx,%rcx,4), %r9
    0000002c: 	movl	%edx, %ecx
    0000002e: 	nop # Size: 2
.Ltmp707:
    00000030: 	testb	%dil, %dil
    00000033: 	je	.Ltmp703 # Offset: 51
    00000035: 	cmpb	$0x0, (%rax)
    00000038: 	setne	%dil
.Ltmp703:
    0000003c: 	testb	%dl, %dl
    0000003e: 	je	.Ltmp704 # Offset: 62
    00000040: 	cmpb	$0x0, 0x1(%rax)
    00000044: 	setne	%dl
.Ltmp704:
    00000047: 	testb	%cl, %cl
    00000049: 	je	.Ltmp705 # Offset: 73
    0000004b: 	cmpb	$0x0, 0x2(%rax)
    0000004f: 	setne	%cl
.Ltmp705:
    00000052: 	xorl	%r10d, %r10d
    00000055: 	testb	%sil, %sil
    00000058: 	je	.Ltmp706 # Offset: 88
    0000005a: 	cmpb	$0x0, 0x3(%rax)
    0000005e: 	movl	%r8d, %r10d
    00000061: 	cmovnel	%ecx, %r10d
    00000065: 	cmovel	%r8d, %esi
.Ltmp706:
    00000069: 	addq	$0x4, %rax
    0000006d: 	cmpq	%rax, %r9
    00000070: 	jne	.Ltmp707 # Offset: 112
    00000072: 	leal	0x4(,%rbp,4), %esi
    00000079: 	cmpl	%esi, %r11d
    0000007c: 	jle	.Ltmp708 # Offset: 124
.Ltmp711:
    0000007e: 	testb	%dil, %dil
    00000081: 	je	.Ltmp709 # Offset: 129
    00000083: 	movslq	%esi, %rcx
    00000086: 	subl	$0x1, %r11d
    0000008a: 	leaq	(%rbx,%rcx), %rax
    0000008e: 	subl	%esi, %r11d
    00000091: 	leaq	0x1(%rbx,%rcx), %rcx
    00000096: 	addq	%r11, %rcx
.Ltmp710:
    00000099: 	cmpb	$0x0, (%rax)
    0000009c: 	je	.Ltmp709 # Offset: 156
    0000009e: 	addq	$0x1, %rax
    000000a2: 	cmpq	%rax, %rcx
    000000a5: 	jne	.Ltmp710 # Offset: 165
.Ltmp712:
    000000a7: 	xorl	%eax, %eax
    000000a9: 	testb	%dl, %dl
    000000ab: 	popq	%rbx
    000000ac: 	popq	%rbp
    000000ad: 	cmovel	%eax, %r10d
    000000b1: 	movl	%r10d, %eax
    000000b4: 	retq # Offset: 180
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp709:
    000000b8: 	xorl	%r10d, %r10d
    000000bb: 	popq	%rbx
    000000bc: 	popq	%rbp
    000000bd: 	movl	%r10d, %eax
    000000c0: 	retq # Offset: 192
    000000c1: 	nopl	(%rax) # Size: 7
.Ltmp702:
    000000c8: 	xorl	%esi, %esi
    000000ca: 	movl	%edx, %r10d
    000000cd: 	cmpl	%esi, %r11d
    000000d0: 	jg	.Ltmp711 # Offset: 208
    000000d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp708:
    000000d8: 	andl	%edi, %edx
    000000da: 	jmp	.Ltmp712 # Offset: 218
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and6IaEbPKT_ib"

Binary Function "_Z10logic_and7IaEbPKT_ib" after disassembly {
  Number      : 113
  State       : disassembled
  Address     : 0xd050
  Size        : 0x120
  MaxSize     : 0x120
  Offset      : 0xd050
  Section     : .text
  Orc Section : .local.text._Z10logic_and7IaEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0112:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movl	%edx, %eax
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movl	%esi, %ebp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	cmpl	$0x3, %esi
    00000016: 	jle	.Ltmp713 # Offset: 22
    0000001c: 	leal	-0x4(%rsi), %r14d
    00000020: 	movq	%rdi, %rcx
    00000023: 	xorl	%r10d, %r10d
    00000026: 	shrl	$0x2, %r14d
    0000002a: 	movl	%r14d, %esi
    0000002d: 	leaq	0x4(%rdi,%rsi,4), %r13
    00000032: 	movl	%edx, %edi
    00000034: 	movl	%edx, %esi
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp718:
    00000040: 	movl	%eax, %r8d
    00000043: 	testb	%al, %al
    00000045: 	je	.Ltmp714 # Offset: 69
    00000047: 	cmpb	$0x1, (%rcx)
    0000004a: 	sbbl	%eax, %eax
    0000004c: 	addl	$0x1, %eax
    0000004f: 	cmpb	$0x0, (%rcx)
    00000052: 	cmovel	%r10d, %r8d
.Ltmp714:
    00000056: 	movl	%edx, %r9d
    00000059: 	testb	%dl, %dl
    0000005b: 	je	.Ltmp715 # Offset: 91
    0000005d: 	cmpb	$0x1, 0x1(%rcx)
    00000061: 	sbbl	%edx, %edx
    00000063: 	addl	$0x1, %edx
    00000066: 	cmpb	$0x0, 0x1(%rcx)
    0000006a: 	cmovel	%r10d, %r9d
.Ltmp715:
    0000006e: 	movl	%esi, %r12d
    00000071: 	testb	%sil, %sil
    00000074: 	je	.Ltmp716 # Offset: 116
    00000076: 	cmpb	$0x1, 0x2(%rcx)
    0000007a: 	sbbl	%esi, %esi
    0000007c: 	addl	$0x1, %esi
    0000007f: 	cmpb	$0x0, 0x2(%rcx)
    00000083: 	cmovel	%r10d, %r12d
.Ltmp716:
    00000087: 	movl	%edi, %r11d
    0000008a: 	testb	%dil, %dil
    0000008d: 	je	.Ltmp717 # Offset: 141
    0000008f: 	cmpb	$0x1, 0x3(%rcx)
    00000093: 	sbbl	%edi, %edi
    00000095: 	addl	$0x1, %edi
    00000098: 	cmpb	$0x0, 0x3(%rcx)
    0000009c: 	cmovel	%r10d, %r11d
.Ltmp717:
    000000a0: 	addq	$0x4, %rcx
    000000a4: 	cmpq	%rcx, %r13
    000000a7: 	jne	.Ltmp718 # Offset: 167
    000000a9: 	leal	0x4(,%r14,4), %esi
.Ltmp723:
    000000b1: 	cmpl	%esi, %ebp
    000000b3: 	jle	.Ltmp719 # Offset: 179
    000000b5: 	movslq	%esi, %rcx
    000000b8: 	subl	$0x1, %ebp
    000000bb: 	subl	%esi, %ebp
    000000bd: 	leaq	(%rbx,%rcx), %rdx
    000000c1: 	leaq	0x1(%rbx,%rcx), %rcx
    000000c6: 	xorl	%esi, %esi
    000000c8: 	addq	%rbp, %rcx
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp721:
    000000d0: 	movl	%eax, %r8d
    000000d3: 	testb	%al, %al
    000000d5: 	je	.Ltmp720 # Offset: 213
    000000d7: 	cmpb	$0x1, (%rdx)
    000000da: 	sbbl	%eax, %eax
    000000dc: 	addl	$0x1, %eax
    000000df: 	cmpb	$0x0, (%rdx)
    000000e2: 	cmovel	%esi, %r8d
.Ltmp720:
    000000e6: 	addq	$0x1, %rdx
    000000ea: 	cmpq	%rdx, %rcx
    000000ed: 	jne	.Ltmp721 # Offset: 237
.Ltmp719:
    000000ef: 	testb	%r8b, %r8b
    000000f2: 	je	.Ltmp722 # Offset: 242
    000000f4: 	xorl	%r8d, %r8d
    000000f7: 	testb	%r9b, %r9b
    000000fa: 	je	.Ltmp722 # Offset: 250
    000000fc: 	testb	%r12b, %r12b
    000000ff: 	cmovnel	%r11d, %r8d
.Ltmp722:
    00000103: 	popq	%rbx
    00000104: 	movl	%r8d, %eax
    00000107: 	popq	%rbp
    00000108: 	popq	%r12
    0000010a: 	popq	%r13
    0000010c: 	popq	%r14
    0000010e: 	retq # Offset: 270
    0000010f: 	nop # Size: 1
.Ltmp713:
    00000110: 	movl	%edx, %r9d
    00000113: 	movl	%edx, %r11d
    00000116: 	movl	%edx, %r12d
    00000119: 	movl	%edx, %r8d
    0000011c: 	xorl	%esi, %esi
    0000011e: 	jmp	.Ltmp723 # Offset: 286
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and7IaEbPKT_ib"

Binary Function "_Z10logic_and8IaEbPKT_ib" after disassembly {
  Number      : 114
  State       : disassembled
  Address     : 0xd170
  Size        : 0x219
  MaxSize     : 0x220
  Offset      : 0xd170
  Section     : .text
  Orc Section : .local.text._Z10logic_and8IaEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0113:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %eax
    00000008: 	movl	%edx, %ecx
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbp
    00000011: 	pushq	%rbx
    00000012: 	movq	%rdi, -0x10(%rsp)
    00000017: 	movl	%esi, -0x8(%rsp)
    0000001b: 	cmpl	$0x7, %esi
    0000001e: 	jle	.Ltmp724 # Offset: 30
    00000024: 	leal	-0x8(%rsi), %esi
    00000027: 	movq	%rdi, %rdx
    0000002a: 	movl	%eax, %r12d
    0000002d: 	movl	%eax, %ebp
    0000002f: 	shrl	$0x3, %esi
    00000032: 	movl	%eax, %r11d
    00000035: 	movl	%eax, %r10d
    00000038: 	movl	%eax, %r9d
    0000003b: 	leaq	0x8(%rdi,%rsi,8), %rbx
    00000040: 	movl	%esi, -0x4(%rsp)
    00000044: 	xorl	%edi, %edi
    00000046: 	movl	%eax, %esi
    00000048: 	movq	%rbx, -0x18(%rsp)
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp733:
    00000050: 	movl	%ecx, %r14d
    00000053: 	testb	%cl, %cl
    00000055: 	je	.Ltmp725 # Offset: 85
    00000057: 	cmpb	$0x1, (%rdx)
    0000005a: 	sbbl	%ecx, %ecx
    0000005c: 	addl	$0x1, %ecx
    0000005f: 	cmpb	$0x0, (%rdx)
    00000062: 	cmovel	%edi, %r14d
.Ltmp725:
    00000066: 	movl	%eax, %ebx
    00000068: 	testb	%al, %al
    0000006a: 	je	.Ltmp726 # Offset: 106
    0000006c: 	cmpb	$0x1, 0x1(%rdx)
    00000070: 	sbbl	%eax, %eax
    00000072: 	addl	$0x1, %eax
    00000075: 	cmpb	$0x0, 0x1(%rdx)
    00000079: 	cmovel	%edi, %ebx
.Ltmp726:
    0000007c: 	movl	%r9d, %r15d
    0000007f: 	testb	%r9b, %r9b
    00000082: 	je	.Ltmp727 # Offset: 130
    00000084: 	cmpb	$0x1, 0x2(%rdx)
    00000088: 	sbbl	%r9d, %r9d
    0000008b: 	addl	$0x1, %r9d
    0000008f: 	cmpb	$0x0, 0x2(%rdx)
    00000093: 	cmovel	%edi, %r15d
.Ltmp727:
    00000097: 	movb	%r10b, -0x1a(%rsp)
    0000009c: 	movl	%r10d, %r8d
    0000009f: 	testb	%r10b, %r10b
    000000a2: 	je	.Ltmp728 # Offset: 162
    000000a4: 	cmpb	$0x1, 0x3(%rdx)
    000000a8: 	sbbl	%r10d, %r10d
    000000ab: 	addl	$0x1, %r10d
    000000af: 	cmpb	$0x0, 0x3(%rdx)
    000000b3: 	cmovel	%edi, %r8d
    000000b7: 	movb	%r8b, -0x1a(%rsp)
.Ltmp728:
    000000bc: 	movb	%r11b, -0x1c(%rsp)
    000000c1: 	movl	%r11d, %r8d
    000000c4: 	testb	%r11b, %r11b
    000000c7: 	je	.Ltmp729 # Offset: 199
    000000c9: 	cmpb	$0x1, 0x4(%rdx)
    000000cd: 	sbbl	%r11d, %r11d
    000000d0: 	addl	$0x1, %r11d
    000000d4: 	cmpb	$0x0, 0x4(%rdx)
    000000d8: 	cmovel	%edi, %r8d
    000000dc: 	movb	%r8b, -0x1c(%rsp)
.Ltmp729:
    000000e1: 	movl	%esi, %r13d
    000000e4: 	testb	%sil, %sil
    000000e7: 	je	.Ltmp730 # Offset: 231
    000000e9: 	cmpb	$0x1, 0x5(%rdx)
    000000ed: 	sbbl	%esi, %esi
    000000ef: 	addl	$0x1, %esi
    000000f2: 	cmpb	$0x0, 0x5(%rdx)
    000000f6: 	cmovel	%edi, %r13d
.Ltmp730:
    000000fa: 	movb	%bpl, -0x1b(%rsp)
    000000ff: 	movl	%ebp, %r8d
    00000102: 	testb	%bpl, %bpl
    00000105: 	je	.Ltmp731 # Offset: 261
    00000107: 	cmpb	$0x1, 0x6(%rdx)
    0000010b: 	sbbl	%ebp, %ebp
    0000010d: 	addl	$0x1, %ebp
    00000110: 	cmpb	$0x0, 0x6(%rdx)
    00000114: 	cmovel	%edi, %r8d
    00000118: 	movb	%r8b, -0x1b(%rsp)
.Ltmp731:
    0000011d: 	movb	%r12b, -0x19(%rsp)
    00000122: 	movl	%r12d, %r8d
    00000125: 	testb	%r12b, %r12b
    00000128: 	je	.Ltmp732 # Offset: 296
    0000012a: 	cmpb	$0x1, 0x7(%rdx)
    0000012e: 	sbbl	%r12d, %r12d
    00000131: 	addl	$0x1, %r12d
    00000135: 	cmpb	$0x0, 0x7(%rdx)
    00000139: 	cmovel	%edi, %r8d
    0000013d: 	movb	%r8b, -0x19(%rsp)
.Ltmp732:
    00000142: 	addq	$0x8, %rdx
    00000146: 	cmpq	%rdx, -0x18(%rsp)
    0000014b: 	jne	.Ltmp733 # Offset: 331
    00000151: 	movl	-0x4(%rsp), %eax
    00000155: 	movzbl	-0x1c(%rsp), %r8d
    0000015b: 	movl	%r14d, %esi
    0000015e: 	movl	%ebx, %r14d
    00000161: 	leal	0x8(,%rax,8), %edi
.Ltmp740:
    00000168: 	movl	-0x8(%rsp), %ebx
    0000016c: 	cmpl	%ebx, %edi
    0000016e: 	jge	.Ltmp734 # Offset: 366
    00000170: 	movq	-0x10(%rsp), %rsi
    00000175: 	movslq	%edi, %rdx
    00000178: 	subl	$0x1, %ebx
    0000017b: 	leaq	(%rsi,%rdx), %rax
    0000017f: 	leaq	0x1(%rsi,%rdx), %rdx
    00000184: 	movl	%ebx, %esi
    00000186: 	subl	%edi, %esi
    00000188: 	xorl	%edi, %edi
    0000018a: 	addq	%rsi, %rdx
    0000018d: 	nopl	(%rax) # Size: 3
.Ltmp736:
    00000190: 	movl	%ecx, %esi
    00000192: 	testb	%cl, %cl
    00000194: 	je	.Ltmp735 # Offset: 404
    00000196: 	cmpb	$0x1, (%rax)
    00000199: 	sbbl	%ecx, %ecx
    0000019b: 	addl	$0x1, %ecx
    0000019e: 	cmpb	$0x0, (%rax)
    000001a1: 	cmovel	%edi, %esi
.Ltmp735:
    000001a4: 	addq	$0x1, %rax
    000001a8: 	cmpq	%rax, %rdx
    000001ab: 	jne	.Ltmp736 # Offset: 427
.Ltmp734:
    000001ad: 	testb	%sil, %sil
    000001b0: 	je	.Ltmp737 # Offset: 432
    000001b2: 	xorl	%esi, %esi
    000001b4: 	testb	%r14b, %r14b
    000001b7: 	jne	.Ltmp738 # Offset: 439
.Ltmp737:
    000001b9: 	testb	%r8b, %r8b
    000001bc: 	je	.Ltmp739 # Offset: 444
    000001be: 	xorl	%r8d, %r8d
    000001c1: 	testb	%r13b, %r13b
    000001c4: 	je	.Ltmp739 # Offset: 452
    000001c6: 	cmpb	$0x0, -0x1b(%rsp)
    000001cb: 	cmovnel	%esi, %r8d
.Ltmp739:
    000001cf: 	popq	%rbx
    000001d0: 	movl	%r8d, %eax
    000001d3: 	popq	%rbp
    000001d4: 	popq	%r12
    000001d6: 	popq	%r13
    000001d8: 	popq	%r14
    000001da: 	popq	%r15
    000001dc: 	retq # Offset: 476
    000001dd: 	nopl	(%rax) # Size: 3
.Ltmp738:
    000001e0: 	testb	%r15b, %r15b
    000001e3: 	je	.Ltmp737 # Offset: 483
    000001e5: 	movzbl	-0x19(%rsp), %eax
    000001ea: 	cmpb	$0x0, -0x1a(%rsp)
    000001ef: 	cmovnel	%eax, %esi
    000001f2: 	jmp	.Ltmp737 # Offset: 498
    000001f4: 	nopl	(%rax) # Size: 4
.Ltmp724:
    000001f8: 	movb	%dl, -0x19(%rsp)
    000001fc: 	movl	%edx, %esi
    000001fe: 	movl	%edx, %r13d
    00000201: 	movl	%edx, %r15d
    00000204: 	movb	%dl, -0x1b(%rsp)
    00000208: 	movl	%edx, %r14d
    0000020b: 	movl	%edx, %r8d
    0000020e: 	xorl	%edi, %edi
    00000210: 	movb	%dl, -0x1a(%rsp)
    00000214: 	jmp	.Ltmp740 # Offset: 532
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and8IaEbPKT_ib"

Binary Function "_Z9logic_or1IaEbPKT_ib" after disassembly {
  Number      : 115
  State       : disassembled
  Address     : 0xd390
  Size        : 0x2a
  MaxSize     : 0x30
  Offset      : 0xd390
  Section     : .text
  Orc Section : .local.text._Z9logic_or1IaEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0114:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp741 # Offset: 8
    0000000a: 	leal	-0x1(%rsi), %edx
    0000000d: 	leaq	0x1(%rdi,%rdx), %rcx
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp742:
    00000018: 	cmpb	$0x0, (%rdi)
    0000001b: 	setne	%dl
    0000001e: 	addq	$0x1, %rdi
    00000022: 	orl	%edx, %eax
    00000024: 	cmpq	%rdi, %rcx
    00000027: 	jne	.Ltmp742 # Offset: 39
.Ltmp741:
    00000029: 	retq # Offset: 41
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or1IaEbPKT_ib"

Binary Function "_Z12logic_or_optIaEbPKT_ib" after disassembly {
  Number      : 116
  State       : disassembled
  Address     : 0xd3c0
  Size        : 0x43
  MaxSize     : 0x50
  Offset      : 0xd3c0
  Section     : .text
  Orc Section : .local.text._Z12logic_or_optIaEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0115:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp743 # Offset: 6
    00000008: 	cmpb	$0x1, %dl
    0000000b: 	je	.Ltmp743 # Offset: 11
    0000000d: 	movl	$0x1, %eax
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp744:
    00000018: 	movzbl	-0x1(%rdi,%rax), %edx
    0000001d: 	cmpl	%eax, %esi
    0000001f: 	setg	%r8b
    00000023: 	testb	%dl, %dl
    00000025: 	sete	%cl
    00000028: 	addq	$0x1, %rax
    0000002c: 	testb	%cl, %r8b
    0000002f: 	jne	.Ltmp744 # Offset: 47
    00000031: 	testb	%dl, %dl
    00000033: 	setne	%al
    00000036: 	retq # Offset: 54
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp743:
    00000040: 	movl	%edx, %eax
    00000042: 	retq # Offset: 66
DWARF CFI Instructions:
    <empty>
End of Function "_Z12logic_or_optIaEbPKT_ib"

Binary Function "_Z9logic_or2IaEbPKT_ib" after disassembly {
  Number      : 117
  State       : disassembled
  Address     : 0xd410
  Size        : 0x86
  MaxSize     : 0x90
  Offset      : 0xd410
  Section     : .text
  Orc Section : .local.text._Z9logic_or2IaEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0116:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movl	%edx, %ecx
    00000009: 	addq	%rdi, %rsi
    0000000c: 	cmpq	%rsi, %rdi
    0000000f: 	jne	.Ltmp745 # Offset: 15
    00000011: 	jmp	.Ltmp746 # Offset: 17
    00000013: 	nopl	(%rax,%rax) # Size: 5
.Ltmp751:
    00000018: 	testb	%cl, %cl
    0000001a: 	jne	.Ltmp747 # Offset: 26
.Ltmp749:
    0000001c: 	cmpq	%rax, %rsi
    0000001f: 	je	.Ltmp748 # Offset: 31
    00000021: 	addq	$0x1, %rax
    00000025: 	cmpb	$0x0, -0x1(%rax)
    00000029: 	je	.Ltmp749 # Offset: 41
.Ltmp754:
    0000002b: 	movq	%rax, %rdi
    0000002e: 	movl	$0x1, %ecx
    00000033: 	cmpq	%rdi, %rsi
    00000036: 	je	.Ltmp750 # Offset: 54
.Ltmp745:
    00000038: 	cmpb	$0x0, (%rdi)
    0000003b: 	leaq	0x1(%rdi), %rax
    0000003f: 	je	.Ltmp751 # Offset: 63
.Ltmp753:
    00000041: 	cmpq	%rax, %rsi
    00000044: 	je	.Ltmp750 # Offset: 68
    00000046: 	leaq	0x1(%rax), %rdi
    0000004a: 	movl	$0x1, %ecx
    0000004f: 	cmpq	%rdi, %rsi
    00000052: 	jne	.Ltmp745 # Offset: 82
.Ltmp750:
    00000054: 	movl	$0x1, %eax
    00000059: 	retq # Offset: 89
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp747:
    00000060: 	cmpq	%rax, %rsi
    00000063: 	je	.Ltmp752 # Offset: 99
    00000065: 	cmpb	$0x0, 0x1(%rdi)
    00000069: 	leaq	0x2(%rdi), %rax
    0000006d: 	jne	.Ltmp753 # Offset: 109
    0000006f: 	jmp	.Ltmp754 # Offset: 111
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp748:
    00000078: 	xorl	%eax, %eax
    0000007a: 	retq # Offset: 122
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp746:
    00000080: 	movl	%edx, %eax
    00000082: 	retq # Offset: 130
.Ltmp752:
    00000083: 	movl	%ecx, %eax
    00000085: 	retq # Offset: 133
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or2IaEbPKT_ib"

Binary Function "_Z9logic_or3IaEbPKT_ib" after disassembly {
  Number      : 118
  State       : disassembled
  Address     : 0xd4a0
  Size        : 0x84
  MaxSize     : 0x90
  Offset      : 0xd4a0
  Section     : .text
  Orc Section : .local.text._Z9logic_or3IaEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0117:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movl	%edx, %eax
    00000009: 	movl	%esi, %edi
    0000000b: 	cmpl	$0x1, %esi
    0000000e: 	jle	.Ltmp755 # Offset: 14
    00000010: 	leal	-0x2(%rsi), %r9d
    00000014: 	movq	%r8, %rcx
    00000017: 	shrl	%r9d
    0000001a: 	movl	%r9d, %edx
    0000001d: 	leaq	0x2(%r8,%rdx,2), %rsi
    00000022: 	jmp	.Ltmp756 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp758:
    00000028: 	addq	$0x2, %rcx
    0000002c: 	cmpq	%rsi, %rcx
    0000002f: 	je	.Ltmp757 # Offset: 47
.Ltmp756:
    00000031: 	cmpb	$0x0, (%rcx)
    00000034: 	setne	%dl
    00000037: 	orb	%dl, %al
    00000039: 	jne	.Ltmp758 # Offset: 57
    0000003b: 	cmpb	$0x0, 0x1(%rcx)
    0000003f: 	setne	%al
    00000042: 	addq	$0x2, %rcx
    00000046: 	cmpq	%rsi, %rcx
    00000049: 	jne	.Ltmp756 # Offset: 73
.Ltmp757:
    0000004b: 	leal	0x2(%r9,%r9), %edx
.Ltmp760:
    00000050: 	cmpl	%edx, %edi
    00000052: 	jle	.Ltmp759 # Offset: 82
    00000054: 	movslq	%edx, %rcx
    00000057: 	cmpb	$0x0, (%r8,%rcx)
    0000005c: 	setne	%cl
    0000005f: 	addl	$0x1, %edx
    00000062: 	orl	%ecx, %eax
    00000064: 	cmpl	%edx, %edi
    00000066: 	jle	.Ltmp759 # Offset: 102
    00000068: 	movslq	%edx, %rdx
    0000006b: 	cmpb	$0x0, (%r8,%rdx)
    00000070: 	setne	%dl
    00000073: 	orl	%edx, %eax
.Ltmp759:
    00000075: 	retq # Offset: 117
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp755:
    00000080: 	xorl	%edx, %edx
    00000082: 	jmp	.Ltmp760 # Offset: 130
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or3IaEbPKT_ib"

Binary Function "_Z9logic_or4IaEbPKT_ib" after disassembly {
  Number      : 119
  State       : disassembled
  Address     : 0xd530
  Size        : 0xbc
  MaxSize     : 0xc0
  Offset      : 0xd530
  Section     : .text
  Orc Section : .local.text._Z9logic_or4IaEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0118:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	cmpl	$0x3, %esi
    00000009: 	jle	.Ltmp761 # Offset: 9
    0000000f: 	leal	-0x4(%rsi), %r8d
    00000013: 	movq	%rdi, %rcx
    00000016: 	shrl	$0x2, %r8d
    0000001a: 	movl	%r8d, %edx
    0000001d: 	leaq	0x4(%rdi,%rdx,4), %rdx
    00000022: 	jmp	.Ltmp762 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp765:
    00000028: 	testb	%al, %al
    0000002a: 	jne	.Ltmp763 # Offset: 42
    0000002c: 	cmpb	$0x0, 0x1(%rcx)
    00000030: 	movl	$0x1, %eax
    00000035: 	jne	.Ltmp763 # Offset: 53
    00000037: 	cmpb	$0x0, 0x2(%rcx)
    0000003b: 	jne	.Ltmp763 # Offset: 59
    0000003d: 	cmpb	$0x0, 0x3(%rcx)
    00000041: 	setne	%al
.Ltmp763:
    00000044: 	addq	$0x4, %rcx
    00000048: 	cmpq	%rdx, %rcx
    0000004b: 	je	.Ltmp764 # Offset: 75
.Ltmp762:
    0000004d: 	cmpb	$0x0, (%rcx)
    00000050: 	je	.Ltmp765 # Offset: 80
    00000052: 	addq	$0x4, %rcx
    00000056: 	movl	$0x1, %eax
    0000005b: 	cmpq	%rdx, %rcx
    0000005e: 	jne	.Ltmp762 # Offset: 94
.Ltmp764:
    00000060: 	leal	0x4(,%r8,4), %edx
.Ltmp767:
    00000068: 	cmpl	%esi, %edx
    0000006a: 	jge	.Ltmp766 # Offset: 106
    0000006c: 	movslq	%edx, %rcx
    0000006f: 	cmpb	$0x0, (%rdi,%rcx)
    00000073: 	setne	%cl
    00000076: 	orl	%ecx, %eax
    00000078: 	leal	0x1(%rdx), %ecx
    0000007b: 	cmpl	%ecx, %esi
    0000007d: 	jle	.Ltmp766 # Offset: 125
    0000007f: 	movslq	%ecx, %rcx
    00000082: 	cmpb	$0x0, (%rdi,%rcx)
    00000086: 	setne	%cl
    00000089: 	orl	%ecx, %eax
    0000008b: 	leal	0x2(%rdx), %ecx
    0000008e: 	cmpl	%esi, %ecx
    00000090: 	jge	.Ltmp766 # Offset: 144
    00000092: 	movslq	%ecx, %rcx
    00000095: 	cmpb	$0x0, (%rdi,%rcx)
    00000099: 	setne	%cl
    0000009c: 	addl	$0x3, %edx
    0000009f: 	orl	%ecx, %eax
    000000a1: 	cmpl	%esi, %edx
    000000a3: 	jge	.Ltmp766 # Offset: 163
    000000a5: 	movslq	%edx, %rdx
    000000a8: 	cmpb	$0x0, (%rdi,%rdx)
    000000ac: 	setne	%dl
    000000af: 	orl	%edx, %eax
.Ltmp766:
    000000b1: 	retq # Offset: 177
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp761:
    000000b8: 	xorl	%edx, %edx
    000000ba: 	jmp	.Ltmp767 # Offset: 186
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or4IaEbPKT_ib"

Binary Function "_Z9logic_or5IaEbPKT_ib" after disassembly {
  Number      : 120
  State       : disassembled
  Address     : 0xd5f0
  Size        : 0x7c
  MaxSize     : 0x80
  Offset      : 0xd5f0
  Section     : .text
  Orc Section : .local.text._Z9logic_or5IaEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0119:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x1, %esi
    0000000c: 	jle	.Ltmp768 # Offset: 12
    0000000e: 	leal	-0x2(%rsi), %r10d
    00000012: 	movq	%rdi, %rcx
    00000015: 	shrl	%r10d
    00000018: 	movl	%r10d, %edi
    0000001b: 	leaq	0x2(%r9,%rdi,2), %r8
.Ltmp769:
    00000020: 	cmpb	$0x0, (%rcx)
    00000023: 	setne	%dil
    00000027: 	orl	%edi, %eax
    00000029: 	cmpb	$0x0, 0x1(%rcx)
    0000002d: 	setne	%dil
    00000031: 	addq	$0x2, %rcx
    00000035: 	orl	%edi, %edx
    00000037: 	cmpq	%rcx, %r8
    0000003a: 	jne	.Ltmp769 # Offset: 58
    0000003c: 	leal	0x2(%r10,%r10), %edi
.Ltmp772:
    00000041: 	cmpl	%edi, %esi
    00000043: 	jle	.Ltmp770 # Offset: 67
    00000045: 	movslq	%edi, %r8
    00000048: 	subl	$0x1, %esi
    0000004b: 	subl	%edi, %esi
    0000004d: 	leaq	0x1(%r9,%r8), %rdi
    00000052: 	leaq	(%r9,%r8), %rcx
    00000056: 	addq	%rdi, %rsi
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp771:
    00000060: 	cmpb	$0x0, (%rcx)
    00000063: 	setne	%dil
    00000067: 	addq	$0x1, %rcx
    0000006b: 	orl	%edi, %eax
    0000006d: 	cmpq	%rcx, %rsi
    00000070: 	jne	.Ltmp771 # Offset: 112
.Ltmp770:
    00000072: 	orl	%edx, %eax
    00000074: 	retq # Offset: 116
    00000075: 	nopl	(%rax) # Size: 3
.Ltmp768:
    00000078: 	xorl	%edi, %edi
    0000007a: 	jmp	.Ltmp772 # Offset: 122
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or5IaEbPKT_ib"

Binary Function "_Z9logic_or6IaEbPKT_ib" after disassembly {
  Number      : 121
  State       : disassembled
  Address     : 0xd670
  Size        : 0xba
  MaxSize     : 0xc0
  Offset      : 0xd670
  Section     : .text
  Orc Section : .local.text._Z9logic_or6IaEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0120:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r10
    00000007: 	pushq	%rbx
    00000008: 	movl	%esi, %edi
    0000000a: 	movl	%edx, %eax
    0000000c: 	cmpl	$0x3, %esi
    0000000f: 	jle	.Ltmp773 # Offset: 15
    00000015: 	leal	-0x4(%rsi), %ebx
    00000018: 	movq	%r10, %rcx
    0000001b: 	movl	%edx, %r8d
    0000001e: 	shrl	$0x2, %ebx
    00000021: 	movl	%ebx, %esi
    00000023: 	leaq	0x4(%r10,%rsi,4), %r11
    00000028: 	movl	%edx, %esi
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp774:
    00000030: 	cmpb	$0x0, (%rcx)
    00000033: 	setne	%r9b
    00000037: 	orl	%r9d, %eax
    0000003a: 	cmpb	$0x0, 0x1(%rcx)
    0000003e: 	setne	%r9b
    00000042: 	orl	%r9d, %edx
    00000045: 	cmpb	$0x0, 0x2(%rcx)
    00000049: 	setne	%r9b
    0000004d: 	orl	%r9d, %esi
    00000050: 	cmpb	$0x0, 0x3(%rcx)
    00000054: 	setne	%r9b
    00000058: 	addq	$0x4, %rcx
    0000005c: 	orl	%r9d, %r8d
    0000005f: 	cmpq	%rcx, %r11
    00000062: 	jne	.Ltmp774 # Offset: 98
    00000064: 	leal	0x4(,%rbx,4), %r9d
.Ltmp777:
    0000006c: 	cmpl	%r9d, %edi
    0000006f: 	jle	.Ltmp775 # Offset: 111
    00000071: 	movslq	%r9d, %r11
    00000074: 	subl	$0x1, %edi
    00000077: 	subl	%r9d, %edi
    0000007a: 	leaq	0x1(%r10,%r11), %r9
    0000007f: 	leaq	(%r10,%r11), %rcx
    00000083: 	addq	%r9, %rdi
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp776:
    00000090: 	cmpb	$0x0, (%rcx)
    00000093: 	setne	%r9b
    00000097: 	addq	$0x1, %rcx
    0000009b: 	orl	%r9d, %eax
    0000009e: 	cmpq	%rcx, %rdi
    000000a1: 	jne	.Ltmp776 # Offset: 161
.Ltmp775:
    000000a3: 	orl	%r8d, %esi
    000000a6: 	orb	%dl, %al
    000000a8: 	popq	%rbx
    000000a9: 	cmovel	%esi, %eax
    000000ac: 	retq # Offset: 172
    000000ad: 	nopl	(%rax) # Size: 3
.Ltmp773:
    000000b0: 	movl	%edx, %r8d
    000000b3: 	movl	%edx, %esi
    000000b5: 	xorl	%r9d, %r9d
    000000b8: 	jmp	.Ltmp777 # Offset: 184
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or6IaEbPKT_ib"

Binary Function "_Z9logic_or7IaEbPKT_ib" after disassembly {
  Number      : 122
  State       : disassembled
  Address     : 0xd730
  Size        : 0x102
  MaxSize     : 0x110
  Offset      : 0xd730
  Section     : .text
  Orc Section : .local.text._Z9logic_or7IaEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0121:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movl	%esi, %r10d
    00000009: 	movl	%edx, %ecx
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	cmpl	$0x3, %esi
    00000017: 	jle	.Ltmp778 # Offset: 23
    0000001d: 	leal	-0x4(%rsi), %r14d
    00000021: 	movq	%rdi, %rax
    00000024: 	movl	%edx, %r8d
    00000027: 	shrl	$0x2, %r14d
    0000002b: 	movl	%r14d, %esi
    0000002e: 	leaq	0x4(%rdi,%rsi,4), %r13
    00000033: 	movl	%edx, %edi
    00000035: 	movl	$0x1, %esi
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp779:
    00000040: 	cmpb	$0x0, (%rax)
    00000043: 	cmovnel	%esi, %ecx
    00000046: 	cmpb	$0x0, 0x1(%rax)
    0000004a: 	cmovnel	%esi, %edx
    0000004d: 	cmpb	$0x0, 0x2(%rax)
    00000051: 	cmovnel	%esi, %edi
    00000054: 	cmpb	$0x0, 0x3(%rax)
    00000058: 	movl	%ecx, %r9d
    0000005b: 	cmovnel	%esi, %r8d
    0000005f: 	addq	$0x4, %rax
    00000063: 	movl	%edx, %r11d
    00000066: 	movl	%edi, %r12d
    00000069: 	movl	%r8d, %ebp
    0000006c: 	cmpq	%r13, %rax
    0000006f: 	jne	.Ltmp779 # Offset: 111
    00000071: 	leal	0x4(,%r14,4), %esi
.Ltmp784:
    00000079: 	cmpl	%esi, %r10d
    0000007c: 	jle	.Ltmp780 # Offset: 124
    0000007e: 	movslq	%esi, %rdx
    00000081: 	subl	$0x1, %r10d
    00000085: 	subl	%esi, %r10d
    00000088: 	leaq	(%rbx,%rdx), %rax
    0000008c: 	leaq	0x1(%rbx,%rdx), %rdx
    00000091: 	movl	$0x1, %esi
    00000096: 	addq	%r10, %rdx
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp781:
    000000a0: 	cmpb	$0x0, (%rax)
    000000a3: 	cmovnel	%esi, %ecx
    000000a6: 	addq	$0x1, %rax
    000000aa: 	movl	%ecx, %r9d
    000000ad: 	cmpq	%rdx, %rax
    000000b0: 	jne	.Ltmp781 # Offset: 176
.Ltmp780:
    000000b2: 	testb	%r9b, %r9b
    000000b5: 	jne	.Ltmp782 # Offset: 181
    000000b7: 	movl	%r11d, %r9d
    000000ba: 	testb	%r11b, %r11b
    000000bd: 	je	.Ltmp783 # Offset: 189
.Ltmp782:
    000000bf: 	popq	%rbx
    000000c0: 	movl	%r9d, %eax
    000000c3: 	popq	%rbp
    000000c4: 	popq	%r12
    000000c6: 	popq	%r13
    000000c8: 	popq	%r14
    000000ca: 	retq # Offset: 202
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp783:
    000000d0: 	testb	%r12b, %r12b
    000000d3: 	movl	%ebp, %r9d
    000000d6: 	popq	%rbx
    000000d7: 	popq	%rbp
    000000d8: 	cmovnel	%r12d, %r9d
    000000dc: 	popq	%r12
    000000de: 	popq	%r13
    000000e0: 	popq	%r14
    000000e2: 	movl	%r9d, %eax
    000000e5: 	retq # Offset: 229
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp778:
    000000f0: 	movl	%edx, %r11d
    000000f3: 	movl	%edx, %r9d
    000000f6: 	movl	%edx, %ebp
    000000f8: 	movl	%edx, %r12d
    000000fb: 	xorl	%esi, %esi
    000000fd: 	jmp	.Ltmp784 # Offset: 253
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or7IaEbPKT_ib"

Binary Function "_Z9logic_or8IaEbPKT_ib" after disassembly {
  Number      : 123
  State       : disassembled
  Address     : 0xd840
  Size        : 0x192
  MaxSize     : 0x1a0
  Offset      : 0xd840
  Section     : .text
  Orc Section : .local.text._Z9logic_or8IaEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0122:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %eax
    00000008: 	pushq	%r14
    0000000a: 	pushq	%r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	movl	%esi, %ebx
    00000012: 	movl	%esi, -0x8(%rsp)
    00000016: 	movl	%edx, %esi
    00000018: 	movq	%rdi, -0x10(%rsp)
    0000001d: 	cmpl	$0x7, %ebx
    00000020: 	jle	.Ltmp785 # Offset: 32
    00000026: 	leal	-0x8(%rbx), %ecx
    00000029: 	movq	%rdi, %rdx
    0000002c: 	movl	%eax, %ebp
    0000002e: 	movl	%eax, %ebx
    00000030: 	shrl	$0x3, %ecx
    00000033: 	movl	%eax, %r11d
    00000036: 	movl	%eax, %r10d
    00000039: 	movl	%eax, %r9d
    0000003c: 	leaq	0x8(%rdi,%rcx,8), %rdi
    00000041: 	movl	%ecx, -0x4(%rsp)
    00000045: 	movl	$0x1, %ecx
    0000004a: 	movq	%rdi, -0x20(%rsp)
    0000004f: 	movl	%eax, %edi
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp786:
    00000058: 	cmpb	$0x0, (%rdx)
    0000005b: 	cmovnel	%ecx, %esi
    0000005e: 	cmpb	$0x0, 0x1(%rdx)
    00000062: 	cmovnel	%ecx, %eax
    00000065: 	cmpb	$0x0, 0x2(%rdx)
    00000069: 	cmovnel	%ecx, %edi
    0000006c: 	cmpb	$0x0, 0x3(%rdx)
    00000070: 	cmovnel	%ecx, %r9d
    00000074: 	cmpb	$0x0, 0x4(%rdx)
    00000078: 	movl	%eax, %r12d
    0000007b: 	cmovnel	%ecx, %r10d
    0000007f: 	cmpb	$0x0, 0x5(%rdx)
    00000083: 	movl	%edi, %r15d
    00000086: 	cmovnel	%ecx, %r11d
    0000008a: 	cmpb	$0x0, 0x6(%rdx)
    0000008e: 	movb	%r9b, -0x13(%rsp)
    00000093: 	cmovnel	%ecx, %ebx
    00000096: 	cmpb	$0x0, 0x7(%rdx)
    0000009a: 	movl	%r10d, %r8d
    0000009d: 	cmovnel	%ecx, %ebp
    000000a0: 	movl	%r11d, %r13d
    000000a3: 	addq	$0x8, %rdx
    000000a7: 	movb	%bl, -0x12(%rsp)
    000000ab: 	movb	%bpl, -0x11(%rsp)
    000000b0: 	cmpq	%rdx, -0x20(%rsp)
    000000b5: 	jne	.Ltmp786 # Offset: 181
    000000b7: 	movl	-0x4(%rsp), %eax
    000000bb: 	movl	%r12d, %r14d
    000000be: 	movl	%esi, %r12d
    000000c1: 	leal	0x8(,%rax,8), %edi
.Ltmp793:
    000000c8: 	movl	-0x8(%rsp), %ebx
    000000cc: 	cmpl	%edi, %ebx
    000000ce: 	jle	.Ltmp787 # Offset: 206
    000000d0: 	movq	-0x10(%rsp), %rcx
    000000d5: 	movslq	%edi, %rdx
    000000d8: 	subl	$0x1, %ebx
    000000db: 	leaq	(%rcx,%rdx), %rax
    000000df: 	leaq	0x1(%rcx,%rdx), %rdx
    000000e4: 	movl	%ebx, %ecx
    000000e6: 	subl	%edi, %ecx
    000000e8: 	addq	%rcx, %rdx
    000000eb: 	movl	$0x1, %ecx
.Ltmp788:
    000000f0: 	cmpb	$0x0, (%rax)
    000000f3: 	cmovnel	%ecx, %esi
    000000f6: 	addq	$0x1, %rax
    000000fa: 	movl	%esi, %r12d
    000000fd: 	cmpq	%rdx, %rax
    00000100: 	jne	.Ltmp788 # Offset: 256
.Ltmp787:
    00000102: 	testb	%r12b, %r12b
    00000105: 	jne	.Ltmp789 # Offset: 261
    00000107: 	movl	%r14d, %r12d
    0000010a: 	testb	%r14b, %r14b
    0000010d: 	je	.Ltmp790 # Offset: 269
.Ltmp789:
    0000010f: 	testb	%r8b, %r8b
    00000112: 	jne	.Ltmp791 # Offset: 274
    00000114: 	movl	%r13d, %r8d
    00000117: 	testb	%r13b, %r13b
    0000011a: 	je	.Ltmp792 # Offset: 282
.Ltmp791:
    0000011c: 	popq	%rbx
    0000011d: 	movl	%r8d, %eax
    00000120: 	popq	%rbp
    00000121: 	popq	%r12
    00000123: 	popq	%r13
    00000125: 	popq	%r14
    00000127: 	popq	%r15
    00000129: 	retq # Offset: 297
    0000012a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp792:
    00000130: 	movzbl	-0x12(%rsp), %eax
    00000135: 	orb	-0x11(%rsp), %r12b
    0000013a: 	popq	%rbx
    0000013b: 	popq	%rbp
    0000013c: 	testb	%al, %al
    0000013e: 	movl	%eax, %r8d
    00000141: 	cmovel	%r12d, %r8d
    00000145: 	popq	%r12
    00000147: 	popq	%r13
    00000149: 	popq	%r14
    0000014b: 	popq	%r15
    0000014d: 	movl	%r8d, %eax
    00000150: 	retq # Offset: 336
    00000151: 	nopl	(%rax) # Size: 7
.Ltmp790:
    00000158: 	movzbl	-0x13(%rsp), %r12d
    0000015e: 	testb	%r15b, %r15b
    00000161: 	cmovnel	%r15d, %r12d
    00000165: 	jmp	.Ltmp789 # Offset: 357
    00000167: 	nopw	(%rax,%rax) # Size: 9
.Ltmp785:
    00000170: 	movb	%dl, -0x11(%rsp)
    00000174: 	movl	%edx, %r12d
    00000177: 	movl	%edx, %r13d
    0000017a: 	movl	%edx, %r15d
    0000017d: 	movb	%dl, -0x12(%rsp)
    00000181: 	movl	%edx, %r14d
    00000184: 	movl	%edx, %r8d
    00000187: 	xorl	%edi, %edi
    00000189: 	movb	%dl, -0x13(%rsp)
    0000018d: 	jmp	.Ltmp793 # Offset: 397
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or8IaEbPKT_ib"

Binary Function "_Z8bit_and1ItET_PKS0_iS0_" after disassembly {
  Number      : 124
  State       : disassembled
  Address     : 0xd9e0
  Size        : 0xef
  MaxSize     : 0xf0
  Offset      : 0xd9e0
  Section     : .text
  Orc Section : .local.text._Z8bit_and1ItET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0123:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp794 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0x6, %eax
    00000014: 	jbe	.Ltmp795 # Offset: 20
    0000001a: 	shrl	$0x3, %esi
    0000001d: 	movq	%rdi, %rax
    00000020: 	pcmpeqd	%xmm0, %xmm0
    00000024: 	subl	$0x1, %esi
    00000027: 	shlq	$0x4, %rsi
    0000002b: 	leaq	0x10(%rdi,%rsi), %rsi
.Ltmp796:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	addq	$0x10, %rax
    00000038: 	pand	%xmm2, %xmm0
    0000003c: 	cmpq	%rsi, %rax
    0000003f: 	jne	.Ltmp796 # Offset: 63
    00000041: 	movdqa	%xmm0, %xmm1
    00000045: 	psrldq	$0x8, %xmm1
    0000004a: 	pand	%xmm1, %xmm0
    0000004e: 	movdqa	%xmm0, %xmm1
    00000052: 	psrldq	$0x4, %xmm1
    00000057: 	pand	%xmm1, %xmm0
    0000005b: 	movdqa	%xmm0, %xmm1
    0000005f: 	psrldq	$0x2, %xmm1
    00000064: 	pand	%xmm1, %xmm0
    00000068: 	pextrw	$0x0, %xmm0, %eax
    0000006d: 	andl	%edx, %eax
    0000006f: 	movl	%ecx, %edx
    00000071: 	andl	$-0x8, %edx
    00000074: 	testb	$0x7, %cl
    00000077: 	je	.Ltmp797 # Offset: 119
.Ltmp799:
    00000079: 	movslq	%edx, %r8
    0000007c: 	leaq	(%r8,%r8), %rsi
    00000080: 	andw	(%rdi,%r8,2), %ax
    00000085: 	leal	0x1(%rdx), %r8d
    00000089: 	cmpl	%r8d, %ecx
    0000008c: 	jle	.Ltmp798 # Offset: 140
    0000008e: 	leal	0x2(%rdx), %r8d
    00000092: 	andw	0x2(%rdi,%rsi), %ax
    00000097: 	cmpl	%r8d, %ecx
    0000009a: 	jle	.Ltmp798 # Offset: 154
    0000009c: 	leal	0x3(%rdx), %r8d
    000000a0: 	andw	0x4(%rdi,%rsi), %ax
    000000a5: 	cmpl	%r8d, %ecx
    000000a8: 	jle	.Ltmp798 # Offset: 168
    000000aa: 	leal	0x4(%rdx), %r8d
    000000ae: 	andw	0x6(%rdi,%rsi), %ax
    000000b3: 	cmpl	%r8d, %ecx
    000000b6: 	jle	.Ltmp798 # Offset: 182
    000000b8: 	leal	0x5(%rdx), %r8d
    000000bc: 	andw	0x8(%rdi,%rsi), %ax
    000000c1: 	cmpl	%r8d, %ecx
    000000c4: 	jle	.Ltmp798 # Offset: 196
    000000c6: 	addl	$0x6, %edx
    000000c9: 	andw	0xa(%rdi,%rsi), %ax
    000000ce: 	cmpl	%edx, %ecx
    000000d0: 	jle	.Ltmp798 # Offset: 208
    000000d2: 	andw	0xc(%rdi,%rsi), %ax
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp794:
    000000e0: 	movl	%edx, %eax
.Ltmp798:
    000000e2: 	retq # Offset: 226
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp797:
    000000e8: 	retq # Offset: 232
.Ltmp795:
    000000e9: 	movl	%edx, %eax
    000000eb: 	xorl	%edx, %edx
    000000ed: 	jmp	.Ltmp799 # Offset: 237
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and1ItET_PKS0_iS0_"

Binary Function "_Z8bit_and2ItET_PKS0_iS0_" after disassembly {
  Number      : 125
  State       : disassembled
  Address     : 0xdad0
  Size        : 0x105
  MaxSize     : 0x110
  Offset      : 0xdad0
  Section     : .text
  Orc Section : .local.text._Z8bit_and2ItET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0124:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movq	%rdi, %rcx
    0000000a: 	addq	%rsi, %rsi
    0000000d: 	leaq	(%rdi,%rsi), %rdi
    00000011: 	cmpq	%rdi, %rcx
    00000014: 	je	.Ltmp800 # Offset: 20
    0000001a: 	subq	$0x2, %rsi
    0000001e: 	movq	%rcx, %rax
    00000021: 	movq	%rsi, %r8
    00000024: 	shrq	%r8
    00000027: 	addq	$0x1, %r8
    0000002b: 	cmpq	$0xc, %rsi
    0000002f: 	jbe	.Ltmp801 # Offset: 47
    00000035: 	movq	%r8, %rsi
    00000038: 	pcmpeqd	%xmm0, %xmm0
    0000003c: 	shrq	$0x3, %rsi
    00000040: 	shlq	$0x4, %rsi
    00000044: 	addq	%rcx, %rsi
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp802:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	pand	%xmm2, %xmm0
    0000005c: 	cmpq	%rax, %rsi
    0000005f: 	jne	.Ltmp802 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	psrldq	$0x8, %xmm1
    0000006a: 	pand	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x4, %xmm1
    00000077: 	pand	%xmm1, %xmm0
    0000007b: 	movdqa	%xmm0, %xmm1
    0000007f: 	psrldq	$0x2, %xmm1
    00000084: 	pand	%xmm1, %xmm0
    00000088: 	pextrw	$0x0, %xmm0, %eax
    0000008d: 	andl	%edx, %eax
    0000008f: 	movq	%r8, %rdx
    00000092: 	andq	$-0x8, %rdx
    00000096: 	leaq	(%rcx,%rdx,2), %rcx
    0000009a: 	cmpq	%rdx, %r8
    0000009d: 	je	.Ltmp803 # Offset: 157
.Ltmp805:
    0000009f: 	leaq	0x2(%rcx), %rdx
    000000a3: 	andw	(%rcx), %ax
    000000a6: 	cmpq	%rdx, %rdi
    000000a9: 	je	.Ltmp804 # Offset: 169
    000000ab: 	leaq	0x4(%rcx), %rdx
    000000af: 	andw	0x2(%rcx), %ax
    000000b3: 	cmpq	%rdx, %rdi
    000000b6: 	je	.Ltmp804 # Offset: 182
    000000b8: 	leaq	0x6(%rcx), %rdx
    000000bc: 	andw	0x4(%rcx), %ax
    000000c0: 	cmpq	%rdx, %rdi
    000000c3: 	je	.Ltmp804 # Offset: 195
    000000c5: 	leaq	0x8(%rcx), %rdx
    000000c9: 	andw	0x6(%rcx), %ax
    000000cd: 	cmpq	%rdx, %rdi
    000000d0: 	je	.Ltmp804 # Offset: 208
    000000d2: 	leaq	0xa(%rcx), %rdx
    000000d6: 	andw	0x8(%rcx), %ax
    000000da: 	cmpq	%rdx, %rdi
    000000dd: 	je	.Ltmp804 # Offset: 221
    000000df: 	leaq	0xc(%rcx), %rdx
    000000e3: 	andw	0xa(%rcx), %ax
    000000e7: 	cmpq	%rdx, %rdi
    000000ea: 	je	.Ltmp804 # Offset: 234
    000000ec: 	andw	0xc(%rcx), %ax
    000000f0: 	retq # Offset: 240
    000000f1: 	nopl	(%rax) # Size: 7
.Ltmp800:
    000000f8: 	movl	%edx, %eax
.Ltmp804:
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp803:
    00000100: 	retq # Offset: 256
.Ltmp801:
    00000101: 	movl	%edx, %eax
    00000103: 	jmp	.Ltmp805 # Offset: 259
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and2ItET_PKS0_iS0_"

Binary Function "_Z8bit_and3ItET_PKS0_iS0_" after disassembly {
  Number      : 126
  State       : disassembled
  Address     : 0xdbe0
  Size        : 0x1b2
  MaxSize     : 0x1c0
  Offset      : 0xdbe0
  Section     : .text
  Orc Section : .local.text._Z8bit_and3ItET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0125:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %r9d
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%esi, %edi
    0000000d: 	testl	%r9d, %r9d
    00000010: 	jle	.Ltmp806 # Offset: 16
    00000016: 	leal	-0x2(%rsi), %eax
    00000019: 	movl	%eax, %r10d
    0000001c: 	shrl	%r10d
    0000001f: 	leal	0x1(%r10), %esi
    00000023: 	cmpl	$0xd, %eax
    00000026: 	jbe	.Ltmp807 # Offset: 38
    0000002c: 	movl	%esi, %r8d
    0000002f: 	movq	%rcx, %rax
    00000032: 	pcmpeqd	%xmm4, %xmm4
    00000036: 	shrl	$0x3, %r8d
    0000003a: 	subl	$0x1, %r8d
    0000003e: 	shlq	$0x5, %r8
    00000042: 	leaq	0x20(%rcx,%r8), %r8
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp808:
    00000050: 	movdqu	(%rax), %xmm0
    00000054: 	movdqu	0x10(%rax), %xmm3
    00000059: 	addq	$0x20, %rax
    0000005d: 	movdqa	%xmm0, %xmm1
    00000061: 	movdqa	%xmm0, %xmm2
    00000065: 	punpcklwd	%xmm3, %xmm0
    00000069: 	punpcklwd	%xmm3, %xmm1
    0000006d: 	punpckhwd	%xmm3, %xmm2
    00000071: 	movdqa	%xmm1, %xmm5
    00000075: 	punpcklwd	%xmm2, %xmm0
    00000079: 	punpcklwd	%xmm2, %xmm1
    0000007d: 	punpckhwd	%xmm2, %xmm5
    00000081: 	punpcklwd	%xmm5, %xmm1
    00000085: 	punpckhwd	%xmm5, %xmm0
    00000089: 	pand	%xmm0, %xmm1
    0000008d: 	pand	%xmm1, %xmm4
    00000091: 	cmpq	%r8, %rax
    00000094: 	jne	.Ltmp808 # Offset: 148
    00000096: 	movdqa	%xmm4, %xmm0
    0000009a: 	psrldq	$0x8, %xmm0
    0000009f: 	pand	%xmm0, %xmm4
    000000a3: 	movdqa	%xmm4, %xmm0
    000000a7: 	psrldq	$0x4, %xmm0
    000000ac: 	pand	%xmm0, %xmm4
    000000b0: 	movdqa	%xmm4, %xmm0
    000000b4: 	psrldq	$0x2, %xmm0
    000000b9: 	pand	%xmm0, %xmm4
    000000bd: 	pextrw	$0x0, %xmm4, %eax
    000000c2: 	andl	%edx, %eax
    000000c4: 	movl	%esi, %edx
    000000c6: 	andl	$-0x8, %edx
    000000c9: 	leal	(%rdx,%rdx), %r8d
    000000cd: 	cmpl	%edx, %esi
    000000cf: 	je	.Ltmp809 # Offset: 207
.Ltmp813:
    000000d5: 	movl	%r10d, %r11d
    000000d8: 	subl	%edx, %r11d
    000000db: 	leal	0x1(%r11), %r10d
    000000df: 	cmpl	$0x2, %r11d
    000000e3: 	jbe	.Ltmp810 # Offset: 227
    000000e5: 	leaq	(%rcx,%rdx,4), %rdx
    000000e9: 	movq	(%rdx), %xmm1
    000000ed: 	movq	0x8(%rdx), %xmm2
    000000f2: 	movdqa	%xmm1, %xmm3
    000000f6: 	movdqa	%xmm1, %xmm0
    000000fa: 	punpcklwd	%xmm2, %xmm1
    000000fe: 	punpcklwd	%xmm2, %xmm3
    00000102: 	punpcklwd	%xmm2, %xmm0
    00000106: 	pshufd	$0xe, %xmm3, %xmm3
    0000010b: 	punpcklwd	%xmm3, %xmm1
    0000010f: 	punpcklwd	%xmm3, %xmm0
    00000113: 	pshufd	$0xe, %xmm1, %xmm1
    00000118: 	pand	%xmm1, %xmm0
    0000011c: 	pextrw	$0x0, %xmm0, %edx
    00000121: 	pextrw	$0x1, %xmm0, %r11d
    00000127: 	andl	%r11d, %edx
    0000012a: 	andl	%eax, %edx
    0000012c: 	pextrw	$0x2, %xmm0, %eax
    00000131: 	andl	%eax, %edx
    00000133: 	pextrw	$0x3, %xmm0, %eax
    00000138: 	andl	%edx, %eax
    0000013a: 	movl	%r10d, %edx
    0000013d: 	andl	$-0x4, %edx
    00000140: 	leal	(%r8,%rdx,2), %r8d
    00000144: 	cmpl	%edx, %r10d
    00000147: 	je	.Ltmp809 # Offset: 327
.Ltmp810:
    00000149: 	movslq	%r8d, %r10
    0000014c: 	andw	(%rcx,%r10,2), %ax
    00000151: 	leaq	(%r10,%r10), %rdx
    00000155: 	andw	0x2(%rcx,%r10,2), %ax
    0000015b: 	leal	0x2(%r8), %r10d
    0000015f: 	cmpl	%r9d, %r10d
    00000162: 	jge	.Ltmp809 # Offset: 354
    00000164: 	movzwl	0x6(%rcx,%rdx), %r10d
    0000016a: 	addl	$0x4, %r8d
    0000016e: 	andw	0x4(%rcx,%rdx), %r10w
    00000174: 	andl	%r10d, %eax
    00000177: 	cmpl	%r8d, %r9d
    0000017a: 	jle	.Ltmp809 # Offset: 378
    0000017c: 	movzwl	0x8(%rcx,%rdx), %r8d
    00000182: 	andw	0xa(%rcx,%rdx), %r8w
    00000188: 	movl	%r8d, %edx
    0000018b: 	andl	%edx, %eax
.Ltmp809:
    0000018d: 	addl	%esi, %esi
.Ltmp812:
    0000018f: 	cmpl	%edi, %esi
    00000191: 	jge	.Ltmp811 # Offset: 401
    00000193: 	movslq	%esi, %rsi
    00000196: 	andw	(%rcx,%rsi,2), %ax
.Ltmp811:
    0000019a: 	retq # Offset: 410
    0000019b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp806:
    000001a0: 	movl	%edx, %eax
    000001a2: 	xorl	%esi, %esi
    000001a4: 	jmp	.Ltmp812 # Offset: 420
.Ltmp807:
    000001a6: 	movl	%edx, %eax
    000001a8: 	xorl	%r8d, %r8d
    000001ab: 	xorl	%edx, %edx
    000001ad: 	jmp	.Ltmp813 # Offset: 429
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and3ItET_PKS0_iS0_"

Binary Function "_Z8bit_and4ItET_PKS0_iS0_" after disassembly {
  Number      : 127
  State       : disassembled
  Address     : 0xdda0
  Size        : 0x332
  MaxSize     : 0x340
  Offset      : 0xdda0
  Section     : .text
  Orc Section : .local.text._Z8bit_and4ItET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0126:
    00000000: 	endbr64
    00000004: 	leal	-0x3(%rsi), %r8d
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%esi, %edi
    0000000d: 	testl	%r8d, %r8d
    00000010: 	jle	.Ltmp814 # Offset: 16
    00000016: 	leal	-0x4(%rsi), %eax
    00000019: 	movl	%eax, %r11d
    0000001c: 	shrl	$0x2, %r11d
    00000020: 	leal	0x1(%r11), %esi
    00000024: 	cmpl	$0x1b, %eax
    00000027: 	jbe	.Ltmp815 # Offset: 39
    0000002d: 	movl	%esi, %r9d
    00000030: 	movq	%rcx, %rax
    00000033: 	pcmpeqd	%xmm6, %xmm6
    00000037: 	shrl	$0x3, %r9d
    0000003b: 	subl	$0x1, %r9d
    0000003f: 	shlq	$0x6, %r9
    00000043: 	leaq	0x40(%rcx,%r9), %r9
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp816:
    00000050: 	movdqu	(%rax), %xmm0
    00000054: 	movdqu	0x10(%rax), %xmm4
    00000059: 	addq	$0x40, %rax
    0000005d: 	movdqu	-0x20(%rax), %xmm2
    00000062: 	movdqu	-0x10(%rax), %xmm5
    00000067: 	movdqa	%xmm0, %xmm1
    0000006b: 	movdqa	%xmm0, %xmm3
    0000006f: 	punpcklwd	%xmm4, %xmm0
    00000073: 	punpcklwd	%xmm4, %xmm1
    00000077: 	punpckhwd	%xmm4, %xmm3
    0000007b: 	movdqa	%xmm2, %xmm4
    0000007f: 	movdqa	%xmm1, %xmm7
    00000083: 	punpcklwd	%xmm5, %xmm4
    00000087: 	punpcklwd	%xmm3, %xmm1
    0000008b: 	punpckhwd	%xmm3, %xmm7
    0000008f: 	punpcklwd	%xmm3, %xmm0
    00000093: 	movdqa	%xmm2, %xmm3
    00000097: 	punpckhwd	%xmm5, %xmm3
    0000009b: 	punpcklwd	%xmm7, %xmm1
    0000009f: 	punpckhwd	%xmm7, %xmm0
    000000a3: 	punpcklwd	%xmm5, %xmm2
    000000a7: 	movdqa	%xmm4, %xmm7
    000000ab: 	punpcklwd	%xmm3, %xmm4
    000000af: 	punpckhwd	%xmm3, %xmm7
    000000b3: 	punpcklwd	%xmm3, %xmm2
    000000b7: 	movdqa	%xmm0, %xmm3
    000000bb: 	punpckhwd	%xmm7, %xmm2
    000000bf: 	movdqa	%xmm0, %xmm5
    000000c3: 	punpcklwd	%xmm7, %xmm4
    000000c7: 	punpcklwd	%xmm2, %xmm3
    000000cb: 	punpckhwd	%xmm2, %xmm5
    000000cf: 	punpcklwd	%xmm2, %xmm0
    000000d3: 	movdqa	%xmm3, %xmm7
    000000d7: 	punpcklwd	%xmm5, %xmm0
    000000db: 	punpcklwd	%xmm5, %xmm3
    000000df: 	punpckhwd	%xmm5, %xmm7
    000000e3: 	movdqa	%xmm1, %xmm2
    000000e7: 	punpckhwd	%xmm7, %xmm0
    000000eb: 	punpcklwd	%xmm7, %xmm3
    000000ef: 	punpckhwd	%xmm4, %xmm2
    000000f3: 	pand	%xmm0, %xmm3
    000000f7: 	movdqa	%xmm1, %xmm0
    000000fb: 	punpcklwd	%xmm4, %xmm1
    000000ff: 	punpcklwd	%xmm4, %xmm0
    00000103: 	punpcklwd	%xmm2, %xmm1
    00000107: 	movdqa	%xmm0, %xmm5
    0000010b: 	punpcklwd	%xmm2, %xmm0
    0000010f: 	punpckhwd	%xmm2, %xmm5
    00000113: 	punpcklwd	%xmm5, %xmm0
    00000117: 	punpckhwd	%xmm5, %xmm1
    0000011b: 	pand	%xmm1, %xmm0
    0000011f: 	pand	%xmm0, %xmm3
    00000123: 	pand	%xmm3, %xmm6
    00000127: 	cmpq	%r9, %rax
    0000012a: 	jne	.Ltmp816 # Offset: 298
    00000130: 	movdqa	%xmm6, %xmm0
    00000134: 	movl	%esi, %r10d
    00000137: 	psrldq	$0x8, %xmm0
    0000013c: 	andl	$-0x8, %r10d
    00000140: 	pand	%xmm0, %xmm6
    00000144: 	movdqa	%xmm6, %xmm0
    00000148: 	psrldq	$0x4, %xmm0
    0000014d: 	pand	%xmm0, %xmm6
    00000151: 	movdqa	%xmm6, %xmm0
    00000155: 	psrldq	$0x2, %xmm0
    0000015a: 	pand	%xmm0, %xmm6
    0000015e: 	pextrw	$0x0, %xmm6, %eax
    00000163: 	andl	%edx, %eax
    00000165: 	leal	(,%r10,4), %edx
    0000016d: 	cmpl	%esi, %r10d
    00000170: 	je	.Ltmp817 # Offset: 368
.Ltmp821:
    00000176: 	subl	%r10d, %r11d
    00000179: 	leal	0x1(%r11), %r9d
    0000017d: 	cmpl	$0x2, %r11d
    00000181: 	jbe	.Ltmp818 # Offset: 385
    00000187: 	leaq	(%rcx,%r10,8), %r10
    0000018b: 	movq	(%r10), %xmm0
    00000190: 	movq	0x8(%r10), %xmm4
    00000196: 	movq	0x10(%r10), %xmm3
    0000019c: 	movq	0x18(%r10), %xmm1
    000001a2: 	movdqa	%xmm0, %xmm5
    000001a6: 	movdqa	%xmm0, %xmm2
    000001aa: 	punpcklwd	%xmm4, %xmm0
    000001ae: 	punpcklwd	%xmm4, %xmm5
    000001b2: 	punpcklwd	%xmm4, %xmm2
    000001b6: 	movdqa	%xmm3, %xmm4
    000001ba: 	pshufd	$0xe, %xmm5, %xmm5
    000001bf: 	punpcklwd	%xmm1, %xmm4
    000001c3: 	punpcklwd	%xmm5, %xmm2
    000001c7: 	punpcklwd	%xmm5, %xmm0
    000001cb: 	movdqa	%xmm3, %xmm5
    000001cf: 	punpcklwd	%xmm1, %xmm5
    000001d3: 	punpcklwd	%xmm1, %xmm3
    000001d7: 	pshufd	$0xe, %xmm0, %xmm0
    000001dc: 	pshufd	$0xe, %xmm5, %xmm5
    000001e1: 	movdqa	%xmm0, %xmm1
    000001e5: 	punpcklwd	%xmm5, %xmm3
    000001e9: 	punpcklwd	%xmm5, %xmm4
    000001ed: 	movdqa	%xmm0, %xmm5
    000001f1: 	pshufd	$0xe, %xmm3, %xmm3
    000001f6: 	punpcklwd	%xmm3, %xmm5
    000001fa: 	punpcklwd	%xmm3, %xmm0
    000001fe: 	punpcklwd	%xmm3, %xmm1
    00000202: 	pshufd	$0xe, %xmm5, %xmm5
    00000207: 	movdqa	%xmm2, %xmm3
    0000020b: 	punpcklwd	%xmm5, %xmm0
    0000020f: 	punpcklwd	%xmm5, %xmm1
    00000213: 	punpcklwd	%xmm4, %xmm3
    00000217: 	pshufd	$0xe, %xmm0, %xmm0
    0000021c: 	pshufd	$0xe, %xmm3, %xmm3
    00000221: 	pand	%xmm1, %xmm0
    00000225: 	movdqa	%xmm2, %xmm1
    00000229: 	punpcklwd	%xmm4, %xmm2
    0000022d: 	punpcklwd	%xmm4, %xmm1
    00000231: 	punpcklwd	%xmm3, %xmm2
    00000235: 	punpcklwd	%xmm3, %xmm1
    00000239: 	pshufd	$0xe, %xmm2, %xmm2
    0000023e: 	pand	%xmm2, %xmm1
    00000242: 	pand	%xmm1, %xmm0
    00000246: 	pextrw	$0x0, %xmm0, %r10d
    0000024c: 	pextrw	$0x1, %xmm0, %r11d
    00000252: 	andl	%r11d, %r10d
    00000255: 	andl	%eax, %r10d
    00000258: 	pextrw	$0x2, %xmm0, %eax
    0000025d: 	andl	%eax, %r10d
    00000260: 	pextrw	$0x3, %xmm0, %eax
    00000265: 	andl	%r10d, %eax
    00000268: 	movl	%r9d, %r10d
    0000026b: 	andl	$-0x4, %r10d
    0000026f: 	leal	(%rdx,%r10,4), %edx
    00000273: 	cmpl	%r10d, %r9d
    00000276: 	je	.Ltmp817 # Offset: 630
.Ltmp818:
    00000278: 	movslq	%edx, %r10
    0000027b: 	andw	(%rcx,%r10,2), %ax
    00000280: 	leaq	(%r10,%r10), %r9
    00000284: 	andw	0x2(%rcx,%r10,2), %ax
    0000028a: 	andw	0x4(%rcx,%r10,2), %ax
    00000290: 	andw	0x6(%rcx,%r10,2), %ax
    00000296: 	leal	0x4(%rdx), %r10d
    0000029a: 	cmpl	%r10d, %r8d
    0000029d: 	jle	.Ltmp817 # Offset: 669
    0000029f: 	movzwl	0xa(%rcx,%r9), %r10d
    000002a5: 	addl	$0x8, %edx
    000002a8: 	andw	0xc(%rcx,%r9), %r10w
    000002ae: 	andw	0x8(%rcx,%r9), %r10w
    000002b4: 	andw	0xe(%rcx,%r9), %r10w
    000002ba: 	andl	%r10d, %eax
    000002bd: 	cmpl	%edx, %r8d
    000002c0: 	jle	.Ltmp817 # Offset: 704
    000002c2: 	movzwl	0x12(%rcx,%r9), %edx
    000002c8: 	andw	0x14(%rcx,%r9), %dx
    000002ce: 	andw	0x10(%rcx,%r9), %dx
    000002d4: 	andw	0x16(%rcx,%r9), %dx
    000002da: 	andl	%edx, %eax
.Ltmp817:
    000002dc: 	shll	$0x2, %esi
.Ltmp820:
    000002df: 	cmpl	%esi, %edi
    000002e1: 	jle	.Ltmp819 # Offset: 737
    000002e3: 	movslq	%esi, %rdx
    000002e6: 	leaq	(%rdx,%rdx), %r8
    000002ea: 	andw	(%rcx,%rdx,2), %ax
    000002ee: 	leal	0x1(%rsi), %edx
    000002f1: 	cmpl	%edi, %edx
    000002f3: 	jge	.Ltmp819 # Offset: 755
    000002f5: 	leal	0x2(%rsi), %edx
    000002f8: 	andw	0x2(%rcx,%r8), %ax
    000002fe: 	cmpl	%edx, %edi
    00000300: 	jle	.Ltmp819 # Offset: 768
    00000302: 	addl	$0x3, %esi
    00000305: 	andw	0x4(%rcx,%r8), %ax
    0000030b: 	cmpl	%esi, %edi
    0000030d: 	jle	.Ltmp819 # Offset: 781
    0000030f: 	andw	0x6(%rcx,%r8), %ax
.Ltmp819:
    00000315: 	retq # Offset: 789
    00000316: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp814:
    00000320: 	movl	%edx, %eax
    00000322: 	xorl	%esi, %esi
    00000324: 	jmp	.Ltmp820 # Offset: 804
.Ltmp815:
    00000326: 	movl	%edx, %eax
    00000328: 	xorl	%r10d, %r10d
    0000032b: 	xorl	%edx, %edx
    0000032d: 	jmp	.Ltmp821 # Offset: 813
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and4ItET_PKS0_iS0_"

Binary Function "_Z8bit_and5ItET_PKS0_iS0_" after disassembly {
  Number      : 128
  State       : disassembled
  Address     : 0xe0e0
  Size        : 0x1fa
  MaxSize     : 0x200
  Offset      : 0xe0e0
  Section     : .text
  Orc Section : .local.text._Z8bit_and5ItET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0127:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r9d
    00000007: 	leal	-0x1(%rsi), %esi
    0000000a: 	movq	%rdi, %r8
    0000000d: 	movl	%edx, %eax
    0000000f: 	testl	%esi, %esi
    00000011: 	jle	.Ltmp822 # Offset: 17
    00000017: 	leal	-0x2(%r9), %ecx
    0000001b: 	movl	%ecx, %edi
    0000001d: 	shrl	%edi
    0000001f: 	addl	$0x1, %edi
    00000022: 	cmpl	$0x5, %ecx
    00000025: 	jbe	.Ltmp823 # Offset: 37
    0000002b: 	movd	%edx, %xmm0
    0000002f: 	movl	$0xffffffff, %eax
    00000034: 	pinsrw	$0x1, %edx, %xmm0
    00000039: 	movl	%edi, %edx
    0000003b: 	movd	%eax, %xmm1
    0000003f: 	movq	%r8, %rax
    00000042: 	shrl	$0x2, %edx
    00000045: 	punpckldq	%xmm1, %xmm0
    00000049: 	punpckldq	%xmm1, %xmm1
    0000004d: 	subl	$0x1, %edx
    00000050: 	punpcklqdq	%xmm1, %xmm0
    00000054: 	shlq	$0x4, %rdx
    00000058: 	leaq	0x10(%r8,%rdx), %rdx
    0000005d: 	nopl	(%rax) # Size: 3
.Ltmp824:
    00000060: 	movdqu	(%rax), %xmm2
    00000064: 	addq	$0x10, %rax
    00000068: 	pand	%xmm2, %xmm0
    0000006c: 	cmpq	%rdx, %rax
    0000006f: 	jne	.Ltmp824 # Offset: 111
    00000071: 	pextrw	$0x2, %xmm0, %edx
    00000076: 	pextrw	$0x0, %xmm0, %eax
    0000007b: 	pextrw	$0x1, %xmm0, %ecx
    00000080: 	movl	%edi, %r10d
    00000083: 	andl	%edx, %eax
    00000085: 	pextrw	$0x4, %xmm0, %edx
    0000008a: 	andl	$-0x4, %r10d
    0000008e: 	andl	%edx, %eax
    00000090: 	pextrw	$0x6, %xmm0, %edx
    00000095: 	andl	%edx, %eax
    00000097: 	pextrw	$0x3, %xmm0, %edx
    0000009c: 	andl	%edx, %ecx
    0000009e: 	pextrw	$0x5, %xmm0, %edx
    000000a3: 	andl	%edx, %ecx
    000000a5: 	pextrw	$0x7, %xmm0, %edx
    000000aa: 	andl	%edx, %ecx
    000000ac: 	leal	(%r10,%r10), %edx
    000000b0: 	cmpl	%r10d, %edi
    000000b3: 	je	.Ltmp825 # Offset: 179
.Ltmp831:
    000000b5: 	movslq	%edx, %r11
    000000b8: 	leaq	(%r11,%r11), %r10
    000000bc: 	andw	(%r8,%r11,2), %ax
    000000c1: 	andw	0x2(%r8,%r11,2), %cx
    000000c7: 	leal	0x2(%rdx), %r11d
    000000cb: 	cmpl	%r11d, %esi
    000000ce: 	jle	.Ltmp825 # Offset: 206
    000000d0: 	addl	$0x4, %edx
    000000d3: 	andw	0x4(%r8,%r10), %ax
    000000d9: 	andw	0x6(%r8,%r10), %cx
    000000df: 	cmpl	%edx, %esi
    000000e1: 	jle	.Ltmp825 # Offset: 225
    000000e3: 	andw	0x8(%r8,%r10), %ax
    000000e9: 	andw	0xa(%r8,%r10), %cx
.Ltmp825:
    000000ef: 	addl	%edi, %edi
.Ltmp830:
    000000f1: 	cmpl	%edi, %r9d
    000000f4: 	jle	.Ltmp826 # Offset: 244
    000000fa: 	movl	%r9d, %r11d
    000000fd: 	subl	%edi, %r11d
    00000100: 	leal	-0x1(%r11), %edx
    00000104: 	cmpl	$0x6, %edx
    00000107: 	jbe	.Ltmp827 # Offset: 263
    00000109: 	movslq	%edi, %rdx
    0000010c: 	pcmpeqd	%xmm0, %xmm0
    00000110: 	leaq	(%r8,%rdx,2), %rsi
    00000114: 	movl	%r11d, %edx
    00000117: 	shrl	$0x3, %edx
    0000011a: 	leal	-0x1(%rdx), %r10d
    0000011e: 	leaq	0x10(%rsi), %rdx
    00000122: 	shlq	$0x4, %r10
    00000126: 	addq	%rdx, %r10
    00000129: 	jmp	.Ltmp828 # Offset: 297
    0000012b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp829:
    00000130: 	addq	$0x10, %rdx
.Ltmp828:
    00000134: 	movdqu	(%rsi), %xmm1
    00000138: 	movq	%rdx, %rsi
    0000013b: 	pand	%xmm1, %xmm0
    0000013f: 	cmpq	%rdx, %r10
    00000142: 	jne	.Ltmp829 # Offset: 322
    00000144: 	movdqa	%xmm0, %xmm1
    00000148: 	psrldq	$0x8, %xmm1
    0000014d: 	pand	%xmm1, %xmm0
    00000151: 	movdqa	%xmm0, %xmm1
    00000155: 	psrldq	$0x4, %xmm1
    0000015a: 	pand	%xmm1, %xmm0
    0000015e: 	movdqa	%xmm0, %xmm1
    00000162: 	psrldq	$0x2, %xmm1
    00000167: 	pand	%xmm1, %xmm0
    0000016b: 	pextrw	$0x0, %xmm0, %edx
    00000170: 	andl	%edx, %eax
    00000172: 	movl	%r11d, %edx
    00000175: 	andl	$-0x8, %edx
    00000178: 	addl	%edx, %edi
    0000017a: 	cmpl	%r11d, %edx
    0000017d: 	je	.Ltmp826 # Offset: 381
.Ltmp827:
    0000017f: 	movslq	%edi, %rsi
    00000182: 	leaq	(%rsi,%rsi), %rdx
    00000186: 	andw	(%r8,%rsi,2), %ax
    0000018b: 	leal	0x1(%rdi), %esi
    0000018e: 	cmpl	%esi, %r9d
    00000191: 	jle	.Ltmp826 # Offset: 401
    00000193: 	leal	0x2(%rdi), %esi
    00000196: 	andw	0x2(%r8,%rdx), %ax
    0000019c: 	cmpl	%esi, %r9d
    0000019f: 	jle	.Ltmp826 # Offset: 415
    000001a1: 	leal	0x3(%rdi), %esi
    000001a4: 	andw	0x4(%r8,%rdx), %ax
    000001aa: 	cmpl	%esi, %r9d
    000001ad: 	jle	.Ltmp826 # Offset: 429
    000001af: 	leal	0x4(%rdi), %esi
    000001b2: 	andw	0x6(%r8,%rdx), %ax
    000001b8: 	cmpl	%esi, %r9d
    000001bb: 	jle	.Ltmp826 # Offset: 443
    000001bd: 	leal	0x5(%rdi), %esi
    000001c0: 	andw	0x8(%r8,%rdx), %ax
    000001c6: 	cmpl	%esi, %r9d
    000001c9: 	jle	.Ltmp826 # Offset: 457
    000001cb: 	addl	$0x6, %edi
    000001ce: 	andw	0xa(%r8,%rdx), %ax
    000001d4: 	cmpl	%edi, %r9d
    000001d7: 	jle	.Ltmp826 # Offset: 471
    000001d9: 	andw	0xc(%r8,%rdx), %ax
.Ltmp826:
    000001df: 	andl	%ecx, %eax
    000001e1: 	retq # Offset: 481
    000001e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp822:
    000001e8: 	movl	%edx, %ecx
    000001ea: 	xorl	%edi, %edi
    000001ec: 	jmp	.Ltmp830 # Offset: 492
.Ltmp823:
    000001f1: 	movl	%edx, %ecx
    000001f3: 	xorl	%edx, %edx
    000001f5: 	jmp	.Ltmp831 # Offset: 501
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and5ItET_PKS0_iS0_"

Binary Function "_Z8bit_and6ItET_PKS0_iS0_" after disassembly {
  Number      : 129
  State       : disassembled
  Address     : 0xe2e0
  Size        : 0x20a
  MaxSize     : 0x210
  Offset      : 0xe2e0
  Section     : .text
  Orc Section : .local.text._Z8bit_and6ItET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0128:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp832 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %esi
    00000015: 	movl	%esi, %ecx
    00000017: 	shrl	$0x2, %ecx
    0000001a: 	addl	$0x1, %ecx
    0000001d: 	cmpl	$0x3, %esi
    00000020: 	jbe	.Ltmp833 # Offset: 32
    00000026: 	movd	%edx, %xmm0
    0000002a: 	movl	$0xffffffff, %eax
    0000002f: 	pinsrw	$0x1, %edx, %xmm0
    00000034: 	movl	%ecx, %edx
    00000036: 	movd	%eax, %xmm1
    0000003a: 	movq	%rdi, %rax
    0000003d: 	shrl	%edx
    0000003f: 	punpckldq	%xmm0, %xmm0
    00000043: 	punpckldq	%xmm1, %xmm1
    00000047: 	subl	$0x1, %edx
    0000004a: 	punpcklqdq	%xmm1, %xmm0
    0000004e: 	shlq	$0x4, %rdx
    00000052: 	leaq	0x10(%rdi,%rdx), %rdx
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp834:
    00000060: 	movdqu	(%rax), %xmm2
    00000064: 	addq	$0x10, %rax
    00000068: 	pand	%xmm2, %xmm0
    0000006c: 	cmpq	%rax, %rdx
    0000006f: 	jne	.Ltmp834 # Offset: 111
    00000071: 	pextrw	$0x4, %xmm0, %edx
    00000076: 	pextrw	$0x0, %xmm0, %eax
    0000007b: 	pextrw	$0x5, %xmm0, %esi
    00000080: 	andl	%edx, %eax
    00000082: 	pextrw	$0x1, %xmm0, %edx
    00000087: 	pextrw	$0x2, %xmm0, %r10d
    0000008d: 	andl	%esi, %edx
    0000008f: 	pextrw	$0x3, %xmm0, %esi
    00000094: 	movzwl	%dx, %r9d
    00000098: 	pextrw	$0x6, %xmm0, %edx
    0000009d: 	andl	%edx, %r10d
    000000a0: 	pextrw	$0x7, %xmm0, %edx
    000000a5: 	andl	%edx, %esi
    000000a7: 	movl	%ecx, %edx
    000000a9: 	andl	$-0x2, %edx
    000000ac: 	testl	$0x80000001, %ecx
    000000b2: 	je	.Ltmp835 # Offset: 178
.Ltmp841:
    000000b4: 	movq	(%rdi,%rdx,8), %xmm0
    000000b9: 	movzwl	%si, %edx
    000000bc: 	movzwl	%r10w, %r10d
    000000c0: 	movzwl	%ax, %eax
    000000c3: 	shlq	$0x10, %rdx
    000000c7: 	orq	%r10, %rdx
    000000ca: 	shlq	$0x10, %rdx
    000000ce: 	orq	%r9, %rdx
    000000d1: 	shlq	$0x10, %rdx
    000000d5: 	orq	%rax, %rdx
    000000d8: 	movq	%rdx, %xmm3
    000000dd: 	pand	%xmm3, %xmm0
    000000e1: 	pextrw	$0x0, %xmm0, %eax
    000000e6: 	pextrw	$0x1, %xmm0, %r9d
    000000ec: 	pextrw	$0x2, %xmm0, %r10d
    000000f2: 	pextrw	$0x3, %xmm0, %esi
.Ltmp835:
    000000f7: 	movl	%r9d, %edx
    000000fa: 	shll	$0x2, %ecx
    000000fd: 	andl	%r10d, %edx
    00000100: 	andl	%esi, %edx
    00000102: 	movl	%edx, %r9d
.Ltmp840:
    00000105: 	cmpl	%ecx, %r8d
    00000108: 	jle	.Ltmp836 # Offset: 264
    0000010e: 	movl	%r8d, %r11d
    00000111: 	subl	%ecx, %r11d
    00000114: 	leal	-0x1(%r11), %edx
    00000118: 	cmpl	$0x6, %edx
    0000011b: 	jbe	.Ltmp837 # Offset: 283
    0000011d: 	movslq	%ecx, %rdx
    00000120: 	pcmpeqd	%xmm0, %xmm0
    00000124: 	leaq	(%rdi,%rdx,2), %rsi
    00000128: 	movl	%r11d, %edx
    0000012b: 	shrl	$0x3, %edx
    0000012e: 	leal	-0x1(%rdx), %r10d
    00000132: 	leaq	0x10(%rsi), %rdx
    00000136: 	shlq	$0x4, %r10
    0000013a: 	addq	%rdx, %r10
    0000013d: 	jmp	.Ltmp838 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp839:
    00000140: 	addq	$0x10, %rdx
.Ltmp838:
    00000144: 	movdqu	(%rsi), %xmm1
    00000148: 	movq	%rdx, %rsi
    0000014b: 	pand	%xmm1, %xmm0
    0000014f: 	cmpq	%r10, %rdx
    00000152: 	jne	.Ltmp839 # Offset: 338
    00000154: 	movdqa	%xmm0, %xmm1
    00000158: 	psrldq	$0x8, %xmm1
    0000015d: 	pand	%xmm1, %xmm0
    00000161: 	movdqa	%xmm0, %xmm1
    00000165: 	psrldq	$0x4, %xmm1
    0000016a: 	pand	%xmm1, %xmm0
    0000016e: 	movdqa	%xmm0, %xmm1
    00000172: 	psrldq	$0x2, %xmm1
    00000177: 	pand	%xmm1, %xmm0
    0000017b: 	pextrw	$0x0, %xmm0, %edx
    00000180: 	andl	%edx, %eax
    00000182: 	movl	%r11d, %edx
    00000185: 	andl	$-0x8, %edx
    00000188: 	addl	%edx, %ecx
    0000018a: 	cmpl	%r11d, %edx
    0000018d: 	je	.Ltmp836 # Offset: 397
.Ltmp837:
    0000018f: 	movslq	%ecx, %rsi
    00000192: 	leaq	(%rsi,%rsi), %rdx
    00000196: 	andw	(%rdi,%rsi,2), %ax
    0000019a: 	leal	0x1(%rcx), %esi
    0000019d: 	cmpl	%r8d, %esi
    000001a0: 	jge	.Ltmp836 # Offset: 416
    000001a2: 	leal	0x2(%rcx), %esi
    000001a5: 	andw	0x2(%rdi,%rdx), %ax
    000001aa: 	cmpl	%r8d, %esi
    000001ad: 	jge	.Ltmp836 # Offset: 429
    000001af: 	leal	0x3(%rcx), %esi
    000001b2: 	andw	0x4(%rdi,%rdx), %ax
    000001b7: 	cmpl	%esi, %r8d
    000001ba: 	jle	.Ltmp836 # Offset: 442
    000001bc: 	leal	0x4(%rcx), %esi
    000001bf: 	andw	0x6(%rdi,%rdx), %ax
    000001c4: 	cmpl	%esi, %r8d
    000001c7: 	jle	.Ltmp836 # Offset: 455
    000001c9: 	leal	0x5(%rcx), %esi
    000001cc: 	andw	0x8(%rdi,%rdx), %ax
    000001d1: 	cmpl	%r8d, %esi
    000001d4: 	jge	.Ltmp836 # Offset: 468
    000001d6: 	addl	$0x6, %ecx
    000001d9: 	andw	0xa(%rdi,%rdx), %ax
    000001de: 	cmpl	%r8d, %ecx
    000001e1: 	jge	.Ltmp836 # Offset: 481
    000001e3: 	andw	0xc(%rdi,%rdx), %ax
.Ltmp836:
    000001e8: 	andl	%r9d, %eax
    000001eb: 	retq # Offset: 491
    000001ec: 	nopl	(%rax) # Size: 4
.Ltmp832:
    000001f0: 	movl	%edx, %r9d
    000001f3: 	xorl	%ecx, %ecx
    000001f5: 	jmp	.Ltmp840 # Offset: 501
.Ltmp833:
    000001fa: 	movl	%edx, %esi
    000001fc: 	movl	%edx, %r10d
    000001ff: 	movzwl	%dx, %r9d
    00000203: 	xorl	%edx, %edx
    00000205: 	jmp	.Ltmp841 # Offset: 517
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and6ItET_PKS0_iS0_"

Binary Function "_Z8bit_and7ItET_PKS0_iS0_" after disassembly {
  Number      : 130
  State       : disassembled
  Address     : 0xe4f0
  Size        : 0x20a
  MaxSize     : 0x210
  Offset      : 0xe4f0
  Section     : .text
  Orc Section : .local.text._Z8bit_and7ItET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0129:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp842 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %esi
    00000015: 	movl	%esi, %ecx
    00000017: 	shrl	$0x2, %ecx
    0000001a: 	addl	$0x1, %ecx
    0000001d: 	cmpl	$0x3, %esi
    00000020: 	jbe	.Ltmp843 # Offset: 32
    00000026: 	movd	%edx, %xmm0
    0000002a: 	movl	$0xffffffff, %eax
    0000002f: 	pinsrw	$0x1, %edx, %xmm0
    00000034: 	movl	%ecx, %edx
    00000036: 	movd	%eax, %xmm1
    0000003a: 	movq	%rdi, %rax
    0000003d: 	shrl	%edx
    0000003f: 	punpckldq	%xmm0, %xmm0
    00000043: 	punpckldq	%xmm1, %xmm1
    00000047: 	subl	$0x1, %edx
    0000004a: 	punpcklqdq	%xmm1, %xmm0
    0000004e: 	shlq	$0x4, %rdx
    00000052: 	leaq	0x10(%rdi,%rdx), %rdx
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp844:
    00000060: 	movdqu	(%rax), %xmm2
    00000064: 	addq	$0x10, %rax
    00000068: 	pand	%xmm2, %xmm0
    0000006c: 	cmpq	%rdx, %rax
    0000006f: 	jne	.Ltmp844 # Offset: 111
    00000071: 	pextrw	$0x4, %xmm0, %edx
    00000076: 	pextrw	$0x0, %xmm0, %eax
    0000007b: 	pextrw	$0x5, %xmm0, %esi
    00000080: 	andl	%edx, %eax
    00000082: 	pextrw	$0x1, %xmm0, %edx
    00000087: 	pextrw	$0x2, %xmm0, %r10d
    0000008d: 	andl	%esi, %edx
    0000008f: 	pextrw	$0x3, %xmm0, %esi
    00000094: 	movzwl	%dx, %r9d
    00000098: 	pextrw	$0x6, %xmm0, %edx
    0000009d: 	andl	%edx, %r10d
    000000a0: 	pextrw	$0x7, %xmm0, %edx
    000000a5: 	andl	%edx, %esi
    000000a7: 	movl	%ecx, %edx
    000000a9: 	andl	$-0x2, %edx
    000000ac: 	testl	$0x80000001, %ecx
    000000b2: 	je	.Ltmp845 # Offset: 178
.Ltmp851:
    000000b4: 	movq	(%rdi,%rdx,8), %xmm0
    000000b9: 	movzwl	%si, %edx
    000000bc: 	movzwl	%r10w, %r10d
    000000c0: 	movzwl	%ax, %eax
    000000c3: 	shlq	$0x10, %rdx
    000000c7: 	orq	%r10, %rdx
    000000ca: 	shlq	$0x10, %rdx
    000000ce: 	orq	%r9, %rdx
    000000d1: 	shlq	$0x10, %rdx
    000000d5: 	orq	%rax, %rdx
    000000d8: 	movq	%rdx, %xmm3
    000000dd: 	pand	%xmm3, %xmm0
    000000e1: 	pextrw	$0x0, %xmm0, %eax
    000000e6: 	pextrw	$0x1, %xmm0, %r9d
    000000ec: 	pextrw	$0x2, %xmm0, %r10d
    000000f2: 	pextrw	$0x3, %xmm0, %esi
.Ltmp845:
    000000f7: 	movl	%r9d, %edx
    000000fa: 	shll	$0x2, %ecx
    000000fd: 	andl	%r10d, %edx
    00000100: 	andl	%esi, %edx
    00000102: 	movl	%edx, %r9d
.Ltmp850:
    00000105: 	cmpl	%ecx, %r8d
    00000108: 	jle	.Ltmp846 # Offset: 264
    0000010e: 	movl	%r8d, %r11d
    00000111: 	subl	%ecx, %r11d
    00000114: 	leal	-0x1(%r11), %edx
    00000118: 	cmpl	$0x6, %edx
    0000011b: 	jbe	.Ltmp847 # Offset: 283
    0000011d: 	movslq	%ecx, %rdx
    00000120: 	pcmpeqd	%xmm0, %xmm0
    00000124: 	leaq	(%rdi,%rdx,2), %rsi
    00000128: 	movl	%r11d, %edx
    0000012b: 	shrl	$0x3, %edx
    0000012e: 	leal	-0x1(%rdx), %r10d
    00000132: 	leaq	0x10(%rsi), %rdx
    00000136: 	shlq	$0x4, %r10
    0000013a: 	addq	%rdx, %r10
    0000013d: 	jmp	.Ltmp848 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp849:
    00000140: 	addq	$0x10, %rdx
.Ltmp848:
    00000144: 	movdqu	(%rsi), %xmm1
    00000148: 	movq	%rdx, %rsi
    0000014b: 	pand	%xmm1, %xmm0
    0000014f: 	cmpq	%r10, %rdx
    00000152: 	jne	.Ltmp849 # Offset: 338
    00000154: 	movdqa	%xmm0, %xmm1
    00000158: 	psrldq	$0x8, %xmm1
    0000015d: 	pand	%xmm1, %xmm0
    00000161: 	movdqa	%xmm0, %xmm1
    00000165: 	psrldq	$0x4, %xmm1
    0000016a: 	pand	%xmm1, %xmm0
    0000016e: 	movdqa	%xmm0, %xmm1
    00000172: 	psrldq	$0x2, %xmm1
    00000177: 	pand	%xmm1, %xmm0
    0000017b: 	pextrw	$0x0, %xmm0, %edx
    00000180: 	andl	%edx, %eax
    00000182: 	movl	%r11d, %edx
    00000185: 	andl	$-0x8, %edx
    00000188: 	addl	%edx, %ecx
    0000018a: 	cmpl	%r11d, %edx
    0000018d: 	je	.Ltmp846 # Offset: 397
.Ltmp847:
    0000018f: 	movslq	%ecx, %rsi
    00000192: 	leaq	(%rsi,%rsi), %rdx
    00000196: 	andw	(%rdi,%rsi,2), %ax
    0000019a: 	leal	0x1(%rcx), %esi
    0000019d: 	cmpl	%r8d, %esi
    000001a0: 	jge	.Ltmp846 # Offset: 416
    000001a2: 	leal	0x2(%rcx), %esi
    000001a5: 	andw	0x2(%rdi,%rdx), %ax
    000001aa: 	cmpl	%r8d, %esi
    000001ad: 	jge	.Ltmp846 # Offset: 429
    000001af: 	leal	0x3(%rcx), %esi
    000001b2: 	andw	0x4(%rdi,%rdx), %ax
    000001b7: 	cmpl	%esi, %r8d
    000001ba: 	jle	.Ltmp846 # Offset: 442
    000001bc: 	leal	0x4(%rcx), %esi
    000001bf: 	andw	0x6(%rdi,%rdx), %ax
    000001c4: 	cmpl	%esi, %r8d
    000001c7: 	jle	.Ltmp846 # Offset: 455
    000001c9: 	leal	0x5(%rcx), %esi
    000001cc: 	andw	0x8(%rdi,%rdx), %ax
    000001d1: 	cmpl	%r8d, %esi
    000001d4: 	jge	.Ltmp846 # Offset: 468
    000001d6: 	addl	$0x6, %ecx
    000001d9: 	andw	0xa(%rdi,%rdx), %ax
    000001de: 	cmpl	%r8d, %ecx
    000001e1: 	jge	.Ltmp846 # Offset: 481
    000001e3: 	andw	0xc(%rdi,%rdx), %ax
.Ltmp846:
    000001e8: 	andl	%r9d, %eax
    000001eb: 	retq # Offset: 491
    000001ec: 	nopl	(%rax) # Size: 4
.Ltmp842:
    000001f0: 	movl	%edx, %r9d
    000001f3: 	xorl	%ecx, %ecx
    000001f5: 	jmp	.Ltmp850 # Offset: 501
.Ltmp843:
    000001fa: 	movl	%edx, %esi
    000001fc: 	movl	%edx, %r10d
    000001ff: 	movzwl	%dx, %r9d
    00000203: 	xorl	%edx, %edx
    00000205: 	jmp	.Ltmp851 # Offset: 517
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and7ItET_PKS0_iS0_"

Binary Function "_Z8bit_and8ItET_PKS0_iS0_" after disassembly {
  Number      : 131
  State       : disassembled
  Address     : 0xe700
  Size        : 0x181
  MaxSize     : 0x190
  Offset      : 0xe700
  Section     : .text
  Orc Section : .local.text._Z8bit_and8ItET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0130:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r9d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x7, %esi
    0000000c: 	jle	.Ltmp852 # Offset: 12
    00000012: 	leal	-0x8(%rsi), %ecx
    00000015: 	movd	%edx, %xmm0
    00000019: 	xorl	%eax, %eax
    0000001b: 	shrl	$0x3, %ecx
    0000001e: 	punpcklwd	%xmm0, %xmm0
    00000022: 	addl	$0x1, %ecx
    00000025: 	pshufd	$0x0, %xmm0, %xmm0
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp853:
    00000030: 	movq	%rax, %rdx
    00000033: 	addq	$0x1, %rax
    00000037: 	shlq	$0x4, %rdx
    0000003b: 	movdqu	(%rdi,%rdx), %xmm1
    00000040: 	pand	%xmm1, %xmm0
    00000044: 	cmpl	%eax, %ecx
    00000046: 	ja	.Ltmp853 # Offset: 70
    00000048: 	pextrw	$0x1, %xmm0, %edx
    0000004d: 	pextrw	$0x2, %xmm0, %esi
    00000052: 	pextrw	$0x0, %xmm0, %eax
    00000057: 	shll	$0x3, %ecx
    0000005a: 	andl	%edx, %esi
    0000005c: 	pextrw	$0x3, %xmm0, %edx
    00000061: 	andl	%edx, %esi
    00000063: 	pextrw	$0x4, %xmm0, %edx
    00000068: 	andl	%edx, %esi
    0000006a: 	pextrw	$0x5, %xmm0, %edx
    0000006f: 	andl	%edx, %esi
    00000071: 	pextrw	$0x6, %xmm0, %edx
    00000076: 	andl	%edx, %esi
    00000078: 	pextrw	$0x7, %xmm0, %edx
    0000007d: 	andl	%edx, %esi
.Ltmp858:
    0000007f: 	cmpl	%ecx, %r9d
    00000082: 	jle	.Ltmp854 # Offset: 130
    00000088: 	movl	%r9d, %r11d
    0000008b: 	subl	%ecx, %r11d
    0000008e: 	leal	-0x1(%r11), %edx
    00000092: 	cmpl	$0x6, %edx
    00000095: 	jbe	.Ltmp855 # Offset: 149
    00000097: 	movslq	%ecx, %rdx
    0000009a: 	pcmpeqd	%xmm0, %xmm0
    0000009e: 	leaq	(%rdi,%rdx,2), %r8
    000000a2: 	movl	%r11d, %edx
    000000a5: 	shrl	$0x3, %edx
    000000a8: 	leal	-0x1(%rdx), %r10d
    000000ac: 	leaq	0x10(%r8), %rdx
    000000b0: 	shlq	$0x4, %r10
    000000b4: 	addq	%rdx, %r10
    000000b7: 	jmp	.Ltmp856 # Offset: 183
    000000b9: 	nopl	(%rax) # Size: 7
.Ltmp857:
    000000c0: 	addq	$0x10, %rdx
.Ltmp856:
    000000c4: 	movdqu	(%r8), %xmm1
    000000c9: 	movq	%rdx, %r8
    000000cc: 	pand	%xmm1, %xmm0
    000000d0: 	cmpq	%rdx, %r10
    000000d3: 	jne	.Ltmp857 # Offset: 211
    000000d5: 	movdqa	%xmm0, %xmm1
    000000d9: 	psrldq	$0x8, %xmm1
    000000de: 	pand	%xmm1, %xmm0
    000000e2: 	movdqa	%xmm0, %xmm1
    000000e6: 	psrldq	$0x4, %xmm1
    000000eb: 	pand	%xmm1, %xmm0
    000000ef: 	movdqa	%xmm0, %xmm1
    000000f3: 	psrldq	$0x2, %xmm1
    000000f8: 	pand	%xmm1, %xmm0
    000000fc: 	pextrw	$0x0, %xmm0, %edx
    00000101: 	andl	%edx, %eax
    00000103: 	movl	%r11d, %edx
    00000106: 	andl	$-0x8, %edx
    00000109: 	addl	%edx, %ecx
    0000010b: 	cmpl	%r11d, %edx
    0000010e: 	je	.Ltmp854 # Offset: 270
.Ltmp855:
    00000110: 	movslq	%ecx, %r8
    00000113: 	leaq	(%r8,%r8), %rdx
    00000117: 	andw	(%rdi,%r8,2), %ax
    0000011c: 	leal	0x1(%rcx), %r8d
    00000120: 	cmpl	%r8d, %r9d
    00000123: 	jle	.Ltmp854 # Offset: 291
    00000125: 	leal	0x2(%rcx), %r8d
    00000129: 	andw	0x2(%rdi,%rdx), %ax
    0000012e: 	cmpl	%r9d, %r8d
    00000131: 	jge	.Ltmp854 # Offset: 305
    00000133: 	leal	0x3(%rcx), %r8d
    00000137: 	andw	0x4(%rdi,%rdx), %ax
    0000013c: 	cmpl	%r9d, %r8d
    0000013f: 	jge	.Ltmp854 # Offset: 319
    00000141: 	leal	0x4(%rcx), %r8d
    00000145: 	andw	0x6(%rdi,%rdx), %ax
    0000014a: 	cmpl	%r9d, %r8d
    0000014d: 	jge	.Ltmp854 # Offset: 333
    0000014f: 	leal	0x5(%rcx), %r8d
    00000153: 	andw	0x8(%rdi,%rdx), %ax
    00000158: 	cmpl	%r9d, %r8d
    0000015b: 	jge	.Ltmp854 # Offset: 347
    0000015d: 	addl	$0x6, %ecx
    00000160: 	andw	0xa(%rdi,%rdx), %ax
    00000165: 	cmpl	%r9d, %ecx
    00000168: 	jge	.Ltmp854 # Offset: 360
    0000016a: 	andw	0xc(%rdi,%rdx), %ax
.Ltmp854:
    0000016f: 	andl	%esi, %eax
    00000171: 	retq # Offset: 369
    00000172: 	nopw	(%rax,%rax) # Size: 6
.Ltmp852:
    00000178: 	movl	%edx, %esi
    0000017a: 	xorl	%ecx, %ecx
    0000017c: 	jmp	.Ltmp858 # Offset: 380
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and8ItET_PKS0_iS0_"

Binary Function "_Z7bit_or1ItET_PKS0_iS0_" after disassembly {
  Number      : 132
  State       : disassembled
  Address     : 0xe890
  Size        : 0xef
  MaxSize     : 0xf0
  Offset      : 0xe890
  Section     : .text
  Orc Section : .local.text._Z7bit_or1ItET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0131:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp859 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0x6, %eax
    00000014: 	jbe	.Ltmp860 # Offset: 20
    0000001a: 	shrl	$0x3, %esi
    0000001d: 	movq	%rdi, %rax
    00000020: 	pxor	%xmm0, %xmm0
    00000024: 	subl	$0x1, %esi
    00000027: 	shlq	$0x4, %rsi
    0000002b: 	leaq	0x10(%rdi,%rsi), %rsi
.Ltmp861:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	addq	$0x10, %rax
    00000038: 	por	%xmm2, %xmm0
    0000003c: 	cmpq	%rsi, %rax
    0000003f: 	jne	.Ltmp861 # Offset: 63
    00000041: 	movdqa	%xmm0, %xmm1
    00000045: 	psrldq	$0x8, %xmm1
    0000004a: 	por	%xmm1, %xmm0
    0000004e: 	movdqa	%xmm0, %xmm1
    00000052: 	psrldq	$0x4, %xmm1
    00000057: 	por	%xmm1, %xmm0
    0000005b: 	movdqa	%xmm0, %xmm1
    0000005f: 	psrldq	$0x2, %xmm1
    00000064: 	por	%xmm1, %xmm0
    00000068: 	pextrw	$0x0, %xmm0, %eax
    0000006d: 	orl	%edx, %eax
    0000006f: 	movl	%ecx, %edx
    00000071: 	andl	$-0x8, %edx
    00000074: 	testb	$0x7, %cl
    00000077: 	je	.Ltmp862 # Offset: 119
.Ltmp864:
    00000079: 	movslq	%edx, %r8
    0000007c: 	leaq	(%r8,%r8), %rsi
    00000080: 	orw	(%rdi,%r8,2), %ax
    00000085: 	leal	0x1(%rdx), %r8d
    00000089: 	cmpl	%r8d, %ecx
    0000008c: 	jle	.Ltmp863 # Offset: 140
    0000008e: 	leal	0x2(%rdx), %r8d
    00000092: 	orw	0x2(%rdi,%rsi), %ax
    00000097: 	cmpl	%r8d, %ecx
    0000009a: 	jle	.Ltmp863 # Offset: 154
    0000009c: 	leal	0x3(%rdx), %r8d
    000000a0: 	orw	0x4(%rdi,%rsi), %ax
    000000a5: 	cmpl	%r8d, %ecx
    000000a8: 	jle	.Ltmp863 # Offset: 168
    000000aa: 	leal	0x4(%rdx), %r8d
    000000ae: 	orw	0x6(%rdi,%rsi), %ax
    000000b3: 	cmpl	%r8d, %ecx
    000000b6: 	jle	.Ltmp863 # Offset: 182
    000000b8: 	leal	0x5(%rdx), %r8d
    000000bc: 	orw	0x8(%rdi,%rsi), %ax
    000000c1: 	cmpl	%r8d, %ecx
    000000c4: 	jle	.Ltmp863 # Offset: 196
    000000c6: 	addl	$0x6, %edx
    000000c9: 	orw	0xa(%rdi,%rsi), %ax
    000000ce: 	cmpl	%edx, %ecx
    000000d0: 	jle	.Ltmp863 # Offset: 208
    000000d2: 	orw	0xc(%rdi,%rsi), %ax
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp859:
    000000e0: 	movl	%edx, %eax
.Ltmp863:
    000000e2: 	retq # Offset: 226
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp862:
    000000e8: 	retq # Offset: 232
.Ltmp860:
    000000e9: 	movl	%edx, %eax
    000000eb: 	xorl	%edx, %edx
    000000ed: 	jmp	.Ltmp864 # Offset: 237
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or1ItET_PKS0_iS0_"

Binary Function "_Z7bit_or2ItET_PKS0_iS0_" after disassembly {
  Number      : 133
  State       : disassembled
  Address     : 0xe980
  Size        : 0x105
  MaxSize     : 0x110
  Offset      : 0xe980
  Section     : .text
  Orc Section : .local.text._Z7bit_or2ItET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0132:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movq	%rdi, %rcx
    0000000a: 	addq	%rsi, %rsi
    0000000d: 	leaq	(%rdi,%rsi), %rdi
    00000011: 	cmpq	%rdi, %rcx
    00000014: 	je	.Ltmp865 # Offset: 20
    0000001a: 	subq	$0x2, %rsi
    0000001e: 	movq	%rcx, %rax
    00000021: 	movq	%rsi, %r8
    00000024: 	shrq	%r8
    00000027: 	addq	$0x1, %r8
    0000002b: 	cmpq	$0xc, %rsi
    0000002f: 	jbe	.Ltmp866 # Offset: 47
    00000035: 	movq	%r8, %rsi
    00000038: 	pxor	%xmm0, %xmm0
    0000003c: 	shrq	$0x3, %rsi
    00000040: 	shlq	$0x4, %rsi
    00000044: 	addq	%rcx, %rsi
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp867:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	por	%xmm2, %xmm0
    0000005c: 	cmpq	%rax, %rsi
    0000005f: 	jne	.Ltmp867 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	psrldq	$0x8, %xmm1
    0000006a: 	por	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x4, %xmm1
    00000077: 	por	%xmm1, %xmm0
    0000007b: 	movdqa	%xmm0, %xmm1
    0000007f: 	psrldq	$0x2, %xmm1
    00000084: 	por	%xmm1, %xmm0
    00000088: 	pextrw	$0x0, %xmm0, %eax
    0000008d: 	orl	%edx, %eax
    0000008f: 	movq	%r8, %rdx
    00000092: 	andq	$-0x8, %rdx
    00000096: 	leaq	(%rcx,%rdx,2), %rcx
    0000009a: 	cmpq	%rdx, %r8
    0000009d: 	je	.Ltmp868 # Offset: 157
.Ltmp870:
    0000009f: 	leaq	0x2(%rcx), %rdx
    000000a3: 	orw	(%rcx), %ax
    000000a6: 	cmpq	%rdx, %rdi
    000000a9: 	je	.Ltmp869 # Offset: 169
    000000ab: 	leaq	0x4(%rcx), %rdx
    000000af: 	orw	0x2(%rcx), %ax
    000000b3: 	cmpq	%rdx, %rdi
    000000b6: 	je	.Ltmp869 # Offset: 182
    000000b8: 	leaq	0x6(%rcx), %rdx
    000000bc: 	orw	0x4(%rcx), %ax
    000000c0: 	cmpq	%rdx, %rdi
    000000c3: 	je	.Ltmp869 # Offset: 195
    000000c5: 	leaq	0x8(%rcx), %rdx
    000000c9: 	orw	0x6(%rcx), %ax
    000000cd: 	cmpq	%rdx, %rdi
    000000d0: 	je	.Ltmp869 # Offset: 208
    000000d2: 	leaq	0xa(%rcx), %rdx
    000000d6: 	orw	0x8(%rcx), %ax
    000000da: 	cmpq	%rdx, %rdi
    000000dd: 	je	.Ltmp869 # Offset: 221
    000000df: 	leaq	0xc(%rcx), %rdx
    000000e3: 	orw	0xa(%rcx), %ax
    000000e7: 	cmpq	%rdx, %rdi
    000000ea: 	je	.Ltmp869 # Offset: 234
    000000ec: 	orw	0xc(%rcx), %ax
    000000f0: 	retq # Offset: 240
    000000f1: 	nopl	(%rax) # Size: 7
.Ltmp865:
    000000f8: 	movl	%edx, %eax
.Ltmp869:
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp868:
    00000100: 	retq # Offset: 256
.Ltmp866:
    00000101: 	movl	%edx, %eax
    00000103: 	jmp	.Ltmp870 # Offset: 259
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or2ItET_PKS0_iS0_"

Binary Function "_Z7bit_or3ItET_PKS0_iS0_" after disassembly {
  Number      : 134
  State       : disassembled
  Address     : 0xea90
  Size        : 0x1b2
  MaxSize     : 0x1c0
  Offset      : 0xea90
  Section     : .text
  Orc Section : .local.text._Z7bit_or3ItET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0133:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %r9d
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%esi, %edi
    0000000d: 	testl	%r9d, %r9d
    00000010: 	jle	.Ltmp871 # Offset: 16
    00000016: 	leal	-0x2(%rsi), %eax
    00000019: 	movl	%eax, %r10d
    0000001c: 	shrl	%r10d
    0000001f: 	leal	0x1(%r10), %esi
    00000023: 	cmpl	$0xd, %eax
    00000026: 	jbe	.Ltmp872 # Offset: 38
    0000002c: 	movl	%esi, %r8d
    0000002f: 	movq	%rcx, %rax
    00000032: 	pxor	%xmm4, %xmm4
    00000036: 	shrl	$0x3, %r8d
    0000003a: 	subl	$0x1, %r8d
    0000003e: 	shlq	$0x5, %r8
    00000042: 	leaq	0x20(%rcx,%r8), %r8
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp873:
    00000050: 	movdqu	(%rax), %xmm0
    00000054: 	movdqu	0x10(%rax), %xmm3
    00000059: 	addq	$0x20, %rax
    0000005d: 	movdqa	%xmm0, %xmm1
    00000061: 	movdqa	%xmm0, %xmm2
    00000065: 	punpcklwd	%xmm3, %xmm0
    00000069: 	punpcklwd	%xmm3, %xmm1
    0000006d: 	punpckhwd	%xmm3, %xmm2
    00000071: 	movdqa	%xmm1, %xmm5
    00000075: 	punpcklwd	%xmm2, %xmm0
    00000079: 	punpcklwd	%xmm2, %xmm1
    0000007d: 	punpckhwd	%xmm2, %xmm5
    00000081: 	punpcklwd	%xmm5, %xmm1
    00000085: 	punpckhwd	%xmm5, %xmm0
    00000089: 	por	%xmm0, %xmm1
    0000008d: 	por	%xmm1, %xmm4
    00000091: 	cmpq	%r8, %rax
    00000094: 	jne	.Ltmp873 # Offset: 148
    00000096: 	movdqa	%xmm4, %xmm0
    0000009a: 	psrldq	$0x8, %xmm0
    0000009f: 	por	%xmm0, %xmm4
    000000a3: 	movdqa	%xmm4, %xmm0
    000000a7: 	psrldq	$0x4, %xmm0
    000000ac: 	por	%xmm0, %xmm4
    000000b0: 	movdqa	%xmm4, %xmm0
    000000b4: 	psrldq	$0x2, %xmm0
    000000b9: 	por	%xmm0, %xmm4
    000000bd: 	pextrw	$0x0, %xmm4, %eax
    000000c2: 	orl	%edx, %eax
    000000c4: 	movl	%esi, %edx
    000000c6: 	andl	$-0x8, %edx
    000000c9: 	leal	(%rdx,%rdx), %r8d
    000000cd: 	cmpl	%edx, %esi
    000000cf: 	je	.Ltmp874 # Offset: 207
.Ltmp878:
    000000d5: 	movl	%r10d, %r11d
    000000d8: 	subl	%edx, %r11d
    000000db: 	leal	0x1(%r11), %r10d
    000000df: 	cmpl	$0x2, %r11d
    000000e3: 	jbe	.Ltmp875 # Offset: 227
    000000e5: 	leaq	(%rcx,%rdx,4), %rdx
    000000e9: 	movq	(%rdx), %xmm1
    000000ed: 	movq	0x8(%rdx), %xmm2
    000000f2: 	movdqa	%xmm1, %xmm3
    000000f6: 	movdqa	%xmm1, %xmm0
    000000fa: 	punpcklwd	%xmm2, %xmm1
    000000fe: 	punpcklwd	%xmm2, %xmm3
    00000102: 	punpcklwd	%xmm2, %xmm0
    00000106: 	pshufd	$0xe, %xmm3, %xmm3
    0000010b: 	punpcklwd	%xmm3, %xmm1
    0000010f: 	punpcklwd	%xmm3, %xmm0
    00000113: 	pshufd	$0xe, %xmm1, %xmm1
    00000118: 	por	%xmm1, %xmm0
    0000011c: 	pextrw	$0x0, %xmm0, %edx
    00000121: 	pextrw	$0x1, %xmm0, %r11d
    00000127: 	orl	%r11d, %edx
    0000012a: 	orl	%eax, %edx
    0000012c: 	pextrw	$0x2, %xmm0, %eax
    00000131: 	orl	%eax, %edx
    00000133: 	pextrw	$0x3, %xmm0, %eax
    00000138: 	orl	%edx, %eax
    0000013a: 	movl	%r10d, %edx
    0000013d: 	andl	$-0x4, %edx
    00000140: 	leal	(%r8,%rdx,2), %r8d
    00000144: 	cmpl	%edx, %r10d
    00000147: 	je	.Ltmp874 # Offset: 327
.Ltmp875:
    00000149: 	movslq	%r8d, %r10
    0000014c: 	orw	(%rcx,%r10,2), %ax
    00000151: 	leaq	(%r10,%r10), %rdx
    00000155: 	orw	0x2(%rcx,%r10,2), %ax
    0000015b: 	leal	0x2(%r8), %r10d
    0000015f: 	cmpl	%r9d, %r10d
    00000162: 	jge	.Ltmp874 # Offset: 354
    00000164: 	movzwl	0x6(%rcx,%rdx), %r10d
    0000016a: 	addl	$0x4, %r8d
    0000016e: 	orw	0x4(%rcx,%rdx), %r10w
    00000174: 	orl	%r10d, %eax
    00000177: 	cmpl	%r8d, %r9d
    0000017a: 	jle	.Ltmp874 # Offset: 378
    0000017c: 	movzwl	0x8(%rcx,%rdx), %r8d
    00000182: 	orw	0xa(%rcx,%rdx), %r8w
    00000188: 	movl	%r8d, %edx
    0000018b: 	orl	%edx, %eax
.Ltmp874:
    0000018d: 	addl	%esi, %esi
.Ltmp877:
    0000018f: 	cmpl	%edi, %esi
    00000191: 	jge	.Ltmp876 # Offset: 401
    00000193: 	movslq	%esi, %rsi
    00000196: 	orw	(%rcx,%rsi,2), %ax
.Ltmp876:
    0000019a: 	retq # Offset: 410
    0000019b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp871:
    000001a0: 	movl	%edx, %eax
    000001a2: 	xorl	%esi, %esi
    000001a4: 	jmp	.Ltmp877 # Offset: 420
.Ltmp872:
    000001a6: 	movl	%edx, %eax
    000001a8: 	xorl	%r8d, %r8d
    000001ab: 	xorl	%edx, %edx
    000001ad: 	jmp	.Ltmp878 # Offset: 429
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or3ItET_PKS0_iS0_"

Binary Function "_Z7bit_or4ItET_PKS0_iS0_" after disassembly {
  Number      : 135
  State       : disassembled
  Address     : 0xec50
  Size        : 0x332
  MaxSize     : 0x340
  Offset      : 0xec50
  Section     : .text
  Orc Section : .local.text._Z7bit_or4ItET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0134:
    00000000: 	endbr64
    00000004: 	leal	-0x3(%rsi), %r8d
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%esi, %edi
    0000000d: 	testl	%r8d, %r8d
    00000010: 	jle	.Ltmp879 # Offset: 16
    00000016: 	leal	-0x4(%rsi), %eax
    00000019: 	movl	%eax, %r11d
    0000001c: 	shrl	$0x2, %r11d
    00000020: 	leal	0x1(%r11), %esi
    00000024: 	cmpl	$0x1b, %eax
    00000027: 	jbe	.Ltmp880 # Offset: 39
    0000002d: 	movl	%esi, %r9d
    00000030: 	movq	%rcx, %rax
    00000033: 	pxor	%xmm6, %xmm6
    00000037: 	shrl	$0x3, %r9d
    0000003b: 	subl	$0x1, %r9d
    0000003f: 	shlq	$0x6, %r9
    00000043: 	leaq	0x40(%rcx,%r9), %r9
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp881:
    00000050: 	movdqu	(%rax), %xmm0
    00000054: 	movdqu	0x10(%rax), %xmm4
    00000059: 	addq	$0x40, %rax
    0000005d: 	movdqu	-0x20(%rax), %xmm2
    00000062: 	movdqu	-0x10(%rax), %xmm5
    00000067: 	movdqa	%xmm0, %xmm1
    0000006b: 	movdqa	%xmm0, %xmm3
    0000006f: 	punpcklwd	%xmm4, %xmm0
    00000073: 	punpcklwd	%xmm4, %xmm1
    00000077: 	punpckhwd	%xmm4, %xmm3
    0000007b: 	movdqa	%xmm2, %xmm4
    0000007f: 	movdqa	%xmm1, %xmm7
    00000083: 	punpcklwd	%xmm5, %xmm4
    00000087: 	punpcklwd	%xmm3, %xmm1
    0000008b: 	punpckhwd	%xmm3, %xmm7
    0000008f: 	punpcklwd	%xmm3, %xmm0
    00000093: 	movdqa	%xmm2, %xmm3
    00000097: 	punpckhwd	%xmm5, %xmm3
    0000009b: 	punpcklwd	%xmm7, %xmm1
    0000009f: 	punpckhwd	%xmm7, %xmm0
    000000a3: 	punpcklwd	%xmm5, %xmm2
    000000a7: 	movdqa	%xmm4, %xmm7
    000000ab: 	punpcklwd	%xmm3, %xmm4
    000000af: 	punpckhwd	%xmm3, %xmm7
    000000b3: 	punpcklwd	%xmm3, %xmm2
    000000b7: 	movdqa	%xmm0, %xmm3
    000000bb: 	punpckhwd	%xmm7, %xmm2
    000000bf: 	movdqa	%xmm0, %xmm5
    000000c3: 	punpcklwd	%xmm7, %xmm4
    000000c7: 	punpcklwd	%xmm2, %xmm3
    000000cb: 	punpckhwd	%xmm2, %xmm5
    000000cf: 	punpcklwd	%xmm2, %xmm0
    000000d3: 	movdqa	%xmm3, %xmm7
    000000d7: 	punpcklwd	%xmm5, %xmm0
    000000db: 	punpcklwd	%xmm5, %xmm3
    000000df: 	punpckhwd	%xmm5, %xmm7
    000000e3: 	movdqa	%xmm1, %xmm2
    000000e7: 	punpckhwd	%xmm7, %xmm0
    000000eb: 	punpcklwd	%xmm7, %xmm3
    000000ef: 	punpckhwd	%xmm4, %xmm2
    000000f3: 	por	%xmm0, %xmm3
    000000f7: 	movdqa	%xmm1, %xmm0
    000000fb: 	punpcklwd	%xmm4, %xmm1
    000000ff: 	punpcklwd	%xmm4, %xmm0
    00000103: 	punpcklwd	%xmm2, %xmm1
    00000107: 	movdqa	%xmm0, %xmm5
    0000010b: 	punpcklwd	%xmm2, %xmm0
    0000010f: 	punpckhwd	%xmm2, %xmm5
    00000113: 	punpcklwd	%xmm5, %xmm0
    00000117: 	punpckhwd	%xmm5, %xmm1
    0000011b: 	por	%xmm1, %xmm0
    0000011f: 	por	%xmm0, %xmm3
    00000123: 	por	%xmm3, %xmm6
    00000127: 	cmpq	%r9, %rax
    0000012a: 	jne	.Ltmp881 # Offset: 298
    00000130: 	movdqa	%xmm6, %xmm0
    00000134: 	movl	%esi, %r10d
    00000137: 	psrldq	$0x8, %xmm0
    0000013c: 	andl	$-0x8, %r10d
    00000140: 	por	%xmm0, %xmm6
    00000144: 	movdqa	%xmm6, %xmm0
    00000148: 	psrldq	$0x4, %xmm0
    0000014d: 	por	%xmm0, %xmm6
    00000151: 	movdqa	%xmm6, %xmm0
    00000155: 	psrldq	$0x2, %xmm0
    0000015a: 	por	%xmm0, %xmm6
    0000015e: 	pextrw	$0x0, %xmm6, %eax
    00000163: 	orl	%edx, %eax
    00000165: 	leal	(,%r10,4), %edx
    0000016d: 	cmpl	%esi, %r10d
    00000170: 	je	.Ltmp882 # Offset: 368
.Ltmp886:
    00000176: 	subl	%r10d, %r11d
    00000179: 	leal	0x1(%r11), %r9d
    0000017d: 	cmpl	$0x2, %r11d
    00000181: 	jbe	.Ltmp883 # Offset: 385
    00000187: 	leaq	(%rcx,%r10,8), %r10
    0000018b: 	movq	(%r10), %xmm0
    00000190: 	movq	0x8(%r10), %xmm4
    00000196: 	movq	0x10(%r10), %xmm3
    0000019c: 	movq	0x18(%r10), %xmm1
    000001a2: 	movdqa	%xmm0, %xmm5
    000001a6: 	movdqa	%xmm0, %xmm2
    000001aa: 	punpcklwd	%xmm4, %xmm0
    000001ae: 	punpcklwd	%xmm4, %xmm5
    000001b2: 	punpcklwd	%xmm4, %xmm2
    000001b6: 	movdqa	%xmm3, %xmm4
    000001ba: 	pshufd	$0xe, %xmm5, %xmm5
    000001bf: 	punpcklwd	%xmm1, %xmm4
    000001c3: 	punpcklwd	%xmm5, %xmm2
    000001c7: 	punpcklwd	%xmm5, %xmm0
    000001cb: 	movdqa	%xmm3, %xmm5
    000001cf: 	punpcklwd	%xmm1, %xmm5
    000001d3: 	punpcklwd	%xmm1, %xmm3
    000001d7: 	pshufd	$0xe, %xmm0, %xmm0
    000001dc: 	pshufd	$0xe, %xmm5, %xmm5
    000001e1: 	movdqa	%xmm0, %xmm1
    000001e5: 	punpcklwd	%xmm5, %xmm3
    000001e9: 	punpcklwd	%xmm5, %xmm4
    000001ed: 	movdqa	%xmm0, %xmm5
    000001f1: 	pshufd	$0xe, %xmm3, %xmm3
    000001f6: 	punpcklwd	%xmm3, %xmm5
    000001fa: 	punpcklwd	%xmm3, %xmm0
    000001fe: 	punpcklwd	%xmm3, %xmm1
    00000202: 	pshufd	$0xe, %xmm5, %xmm5
    00000207: 	movdqa	%xmm2, %xmm3
    0000020b: 	punpcklwd	%xmm5, %xmm0
    0000020f: 	punpcklwd	%xmm5, %xmm1
    00000213: 	punpcklwd	%xmm4, %xmm3
    00000217: 	pshufd	$0xe, %xmm0, %xmm0
    0000021c: 	pshufd	$0xe, %xmm3, %xmm3
    00000221: 	por	%xmm1, %xmm0
    00000225: 	movdqa	%xmm2, %xmm1
    00000229: 	punpcklwd	%xmm4, %xmm2
    0000022d: 	punpcklwd	%xmm4, %xmm1
    00000231: 	punpcklwd	%xmm3, %xmm2
    00000235: 	punpcklwd	%xmm3, %xmm1
    00000239: 	pshufd	$0xe, %xmm2, %xmm2
    0000023e: 	por	%xmm2, %xmm1
    00000242: 	por	%xmm1, %xmm0
    00000246: 	pextrw	$0x0, %xmm0, %r10d
    0000024c: 	pextrw	$0x1, %xmm0, %r11d
    00000252: 	orl	%r11d, %r10d
    00000255: 	orl	%eax, %r10d
    00000258: 	pextrw	$0x2, %xmm0, %eax
    0000025d: 	orl	%eax, %r10d
    00000260: 	pextrw	$0x3, %xmm0, %eax
    00000265: 	orl	%r10d, %eax
    00000268: 	movl	%r9d, %r10d
    0000026b: 	andl	$-0x4, %r10d
    0000026f: 	leal	(%rdx,%r10,4), %edx
    00000273: 	cmpl	%r10d, %r9d
    00000276: 	je	.Ltmp882 # Offset: 630
.Ltmp883:
    00000278: 	movslq	%edx, %r10
    0000027b: 	orw	(%rcx,%r10,2), %ax
    00000280: 	leaq	(%r10,%r10), %r9
    00000284: 	orw	0x2(%rcx,%r10,2), %ax
    0000028a: 	orw	0x4(%rcx,%r10,2), %ax
    00000290: 	orw	0x6(%rcx,%r10,2), %ax
    00000296: 	leal	0x4(%rdx), %r10d
    0000029a: 	cmpl	%r10d, %r8d
    0000029d: 	jle	.Ltmp882 # Offset: 669
    0000029f: 	movzwl	0xa(%rcx,%r9), %r10d
    000002a5: 	addl	$0x8, %edx
    000002a8: 	orw	0xc(%rcx,%r9), %r10w
    000002ae: 	orw	0x8(%rcx,%r9), %r10w
    000002b4: 	orw	0xe(%rcx,%r9), %r10w
    000002ba: 	orl	%r10d, %eax
    000002bd: 	cmpl	%edx, %r8d
    000002c0: 	jle	.Ltmp882 # Offset: 704
    000002c2: 	movzwl	0x12(%rcx,%r9), %edx
    000002c8: 	orw	0x14(%rcx,%r9), %dx
    000002ce: 	orw	0x10(%rcx,%r9), %dx
    000002d4: 	orw	0x16(%rcx,%r9), %dx
    000002da: 	orl	%edx, %eax
.Ltmp882:
    000002dc: 	shll	$0x2, %esi
.Ltmp885:
    000002df: 	cmpl	%esi, %edi
    000002e1: 	jle	.Ltmp884 # Offset: 737
    000002e3: 	movslq	%esi, %rdx
    000002e6: 	leaq	(%rdx,%rdx), %r8
    000002ea: 	orw	(%rcx,%rdx,2), %ax
    000002ee: 	leal	0x1(%rsi), %edx
    000002f1: 	cmpl	%edi, %edx
    000002f3: 	jge	.Ltmp884 # Offset: 755
    000002f5: 	leal	0x2(%rsi), %edx
    000002f8: 	orw	0x2(%rcx,%r8), %ax
    000002fe: 	cmpl	%edx, %edi
    00000300: 	jle	.Ltmp884 # Offset: 768
    00000302: 	addl	$0x3, %esi
    00000305: 	orw	0x4(%rcx,%r8), %ax
    0000030b: 	cmpl	%esi, %edi
    0000030d: 	jle	.Ltmp884 # Offset: 781
    0000030f: 	orw	0x6(%rcx,%r8), %ax
.Ltmp884:
    00000315: 	retq # Offset: 789
    00000316: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp879:
    00000320: 	movl	%edx, %eax
    00000322: 	xorl	%esi, %esi
    00000324: 	jmp	.Ltmp885 # Offset: 804
.Ltmp880:
    00000326: 	movl	%edx, %eax
    00000328: 	xorl	%r10d, %r10d
    0000032b: 	xorl	%edx, %edx
    0000032d: 	jmp	.Ltmp886 # Offset: 813
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or4ItET_PKS0_iS0_"

Binary Function "_Z7bit_or5ItET_PKS0_iS0_" after disassembly {
  Number      : 136
  State       : disassembled
  Address     : 0xef90
  Size        : 0x1fa
  MaxSize     : 0x200
  Offset      : 0xef90
  Section     : .text
  Orc Section : .local.text._Z7bit_or5ItET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0135:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r10d
    00000007: 	leal	-0x1(%rsi), %esi
    0000000a: 	movq	%rdi, %r9
    0000000d: 	movl	%edx, %eax
    0000000f: 	testl	%esi, %esi
    00000011: 	jle	.Ltmp887 # Offset: 17
    00000017: 	leal	-0x2(%r10), %ecx
    0000001b: 	movl	%ecx, %edi
    0000001d: 	shrl	%edi
    0000001f: 	addl	$0x1, %edi
    00000022: 	cmpl	$0x5, %ecx
    00000025: 	jbe	.Ltmp888 # Offset: 37
    0000002b: 	movd	%edx, %xmm0
    0000002f: 	pxor	%xmm1, %xmm1
    00000033: 	movq	%r9, %rax
    00000036: 	pinsrw	$0x1, %edx, %xmm0
    0000003b: 	movl	%edi, %edx
    0000003d: 	shrl	$0x2, %edx
    00000040: 	punpckldq	%xmm1, %xmm0
    00000044: 	pxor	%xmm1, %xmm1
    00000048: 	subl	$0x1, %edx
    0000004b: 	punpcklqdq	%xmm1, %xmm0
    0000004f: 	shlq	$0x4, %rdx
    00000053: 	leaq	0x10(%r9,%rdx), %rdx
    00000058: 	nopl	(%rax,%rax) # Size: 8
.Ltmp889:
    00000060: 	movdqu	(%rax), %xmm2
    00000064: 	addq	$0x10, %rax
    00000068: 	por	%xmm2, %xmm0
    0000006c: 	cmpq	%rdx, %rax
    0000006f: 	jne	.Ltmp889 # Offset: 111
    00000071: 	pextrw	$0x2, %xmm0, %edx
    00000076: 	pextrw	$0x0, %xmm0, %eax
    0000007b: 	pextrw	$0x1, %xmm0, %ecx
    00000080: 	movl	%edi, %r8d
    00000083: 	orl	%edx, %eax
    00000085: 	pextrw	$0x4, %xmm0, %edx
    0000008a: 	andl	$-0x4, %r8d
    0000008e: 	orl	%edx, %eax
    00000090: 	pextrw	$0x6, %xmm0, %edx
    00000095: 	orl	%edx, %eax
    00000097: 	pextrw	$0x3, %xmm0, %edx
    0000009c: 	orl	%edx, %ecx
    0000009e: 	pextrw	$0x5, %xmm0, %edx
    000000a3: 	orl	%edx, %ecx
    000000a5: 	pextrw	$0x7, %xmm0, %edx
    000000aa: 	orl	%edx, %ecx
    000000ac: 	leal	(%r8,%r8), %edx
    000000b0: 	cmpl	%r8d, %edi
    000000b3: 	je	.Ltmp890 # Offset: 179
.Ltmp896:
    000000b5: 	movslq	%edx, %r11
    000000b8: 	leaq	(%r11,%r11), %r8
    000000bc: 	orw	(%r9,%r11,2), %ax
    000000c1: 	orw	0x2(%r9,%r11,2), %cx
    000000c7: 	leal	0x2(%rdx), %r11d
    000000cb: 	cmpl	%r11d, %esi
    000000ce: 	jle	.Ltmp890 # Offset: 206
    000000d0: 	addl	$0x4, %edx
    000000d3: 	orw	0x4(%r9,%r8), %ax
    000000d9: 	orw	0x6(%r9,%r8), %cx
    000000df: 	cmpl	%edx, %esi
    000000e1: 	jle	.Ltmp890 # Offset: 225
    000000e3: 	orw	0x8(%r9,%r8), %ax
    000000e9: 	orw	0xa(%r9,%r8), %cx
.Ltmp890:
    000000ef: 	addl	%edi, %edi
.Ltmp895:
    000000f1: 	cmpl	%edi, %r10d
    000000f4: 	jle	.Ltmp891 # Offset: 244
    000000fa: 	movl	%r10d, %r11d
    000000fd: 	subl	%edi, %r11d
    00000100: 	leal	-0x1(%r11), %edx
    00000104: 	cmpl	$0x6, %edx
    00000107: 	jbe	.Ltmp892 # Offset: 263
    00000109: 	movslq	%edi, %rdx
    0000010c: 	pxor	%xmm0, %xmm0
    00000110: 	leaq	(%r9,%rdx,2), %rsi
    00000114: 	movl	%r11d, %edx
    00000117: 	shrl	$0x3, %edx
    0000011a: 	leal	-0x1(%rdx), %r8d
    0000011e: 	leaq	0x10(%rsi), %rdx
    00000122: 	shlq	$0x4, %r8
    00000126: 	addq	%rdx, %r8
    00000129: 	jmp	.Ltmp893 # Offset: 297
    0000012b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp894:
    00000130: 	addq	$0x10, %rdx
.Ltmp893:
    00000134: 	movdqu	(%rsi), %xmm1
    00000138: 	movq	%rdx, %rsi
    0000013b: 	por	%xmm1, %xmm0
    0000013f: 	cmpq	%rdx, %r8
    00000142: 	jne	.Ltmp894 # Offset: 322
    00000144: 	movdqa	%xmm0, %xmm1
    00000148: 	psrldq	$0x8, %xmm1
    0000014d: 	por	%xmm1, %xmm0
    00000151: 	movdqa	%xmm0, %xmm1
    00000155: 	psrldq	$0x4, %xmm1
    0000015a: 	por	%xmm1, %xmm0
    0000015e: 	movdqa	%xmm0, %xmm1
    00000162: 	psrldq	$0x2, %xmm1
    00000167: 	por	%xmm1, %xmm0
    0000016b: 	pextrw	$0x0, %xmm0, %edx
    00000170: 	orl	%edx, %eax
    00000172: 	movl	%r11d, %edx
    00000175: 	andl	$-0x8, %edx
    00000178: 	addl	%edx, %edi
    0000017a: 	cmpl	%r11d, %edx
    0000017d: 	je	.Ltmp891 # Offset: 381
.Ltmp892:
    0000017f: 	movslq	%edi, %rsi
    00000182: 	leaq	(%rsi,%rsi), %rdx
    00000186: 	orw	(%r9,%rsi,2), %ax
    0000018b: 	leal	0x1(%rdi), %esi
    0000018e: 	cmpl	%esi, %r10d
    00000191: 	jle	.Ltmp891 # Offset: 401
    00000193: 	leal	0x2(%rdi), %esi
    00000196: 	orw	0x2(%r9,%rdx), %ax
    0000019c: 	cmpl	%esi, %r10d
    0000019f: 	jle	.Ltmp891 # Offset: 415
    000001a1: 	leal	0x3(%rdi), %esi
    000001a4: 	orw	0x4(%r9,%rdx), %ax
    000001aa: 	cmpl	%esi, %r10d
    000001ad: 	jle	.Ltmp891 # Offset: 429
    000001af: 	leal	0x4(%rdi), %esi
    000001b2: 	orw	0x6(%r9,%rdx), %ax
    000001b8: 	cmpl	%esi, %r10d
    000001bb: 	jle	.Ltmp891 # Offset: 443
    000001bd: 	leal	0x5(%rdi), %esi
    000001c0: 	orw	0x8(%r9,%rdx), %ax
    000001c6: 	cmpl	%esi, %r10d
    000001c9: 	jle	.Ltmp891 # Offset: 457
    000001cb: 	addl	$0x6, %edi
    000001ce: 	orw	0xa(%r9,%rdx), %ax
    000001d4: 	cmpl	%edi, %r10d
    000001d7: 	jle	.Ltmp891 # Offset: 471
    000001d9: 	orw	0xc(%r9,%rdx), %ax
.Ltmp891:
    000001df: 	orl	%ecx, %eax
    000001e1: 	retq # Offset: 481
    000001e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp887:
    000001e8: 	movl	%edx, %ecx
    000001ea: 	xorl	%edi, %edi
    000001ec: 	jmp	.Ltmp895 # Offset: 492
.Ltmp888:
    000001f1: 	movl	%edx, %ecx
    000001f3: 	xorl	%edx, %edx
    000001f5: 	jmp	.Ltmp896 # Offset: 501
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or5ItET_PKS0_iS0_"

Binary Function "_Z7bit_or6ItET_PKS0_iS0_" after disassembly {
  Number      : 137
  State       : disassembled
  Address     : 0xf190
  Size        : 0x1fa
  MaxSize     : 0x200
  Offset      : 0xf190
  Section     : .text
  Orc Section : .local.text._Z7bit_or6ItET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0136:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp897 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %esi
    00000015: 	movl	%esi, %ecx
    00000017: 	shrl	$0x2, %ecx
    0000001a: 	addl	$0x1, %ecx
    0000001d: 	cmpl	$0x3, %esi
    00000020: 	jbe	.Ltmp898 # Offset: 32
    00000026: 	movd	%edx, %xmm0
    0000002a: 	pxor	%xmm1, %xmm1
    0000002e: 	movq	%rdi, %rax
    00000031: 	pinsrw	$0x1, %edx, %xmm0
    00000036: 	movl	%ecx, %edx
    00000038: 	shrl	%edx
    0000003a: 	punpckldq	%xmm0, %xmm0
    0000003e: 	subl	$0x1, %edx
    00000041: 	punpcklqdq	%xmm1, %xmm0
    00000045: 	shlq	$0x4, %rdx
    00000049: 	leaq	0x10(%rdi,%rdx), %rdx
    0000004e: 	nop # Size: 2
.Ltmp899:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	por	%xmm2, %xmm0
    0000005c: 	cmpq	%rax, %rdx
    0000005f: 	jne	.Ltmp899 # Offset: 95
    00000061: 	pextrw	$0x4, %xmm0, %edx
    00000066: 	pextrw	$0x0, %xmm0, %eax
    0000006b: 	pextrw	$0x5, %xmm0, %esi
    00000070: 	orl	%edx, %eax
    00000072: 	pextrw	$0x1, %xmm0, %edx
    00000077: 	pextrw	$0x2, %xmm0, %r10d
    0000007d: 	orl	%esi, %edx
    0000007f: 	pextrw	$0x3, %xmm0, %esi
    00000084: 	movzwl	%dx, %r9d
    00000088: 	pextrw	$0x6, %xmm0, %edx
    0000008d: 	orl	%edx, %r10d
    00000090: 	pextrw	$0x7, %xmm0, %edx
    00000095: 	orl	%edx, %esi
    00000097: 	movl	%ecx, %edx
    00000099: 	andl	$-0x2, %edx
    0000009c: 	testl	$0x80000001, %ecx
    000000a2: 	je	.Ltmp900 # Offset: 162
.Ltmp906:
    000000a4: 	movq	(%rdi,%rdx,8), %xmm0
    000000a9: 	movzwl	%si, %edx
    000000ac: 	movzwl	%r10w, %r10d
    000000b0: 	movzwl	%ax, %eax
    000000b3: 	shlq	$0x10, %rdx
    000000b7: 	orq	%r10, %rdx
    000000ba: 	shlq	$0x10, %rdx
    000000be: 	orq	%r9, %rdx
    000000c1: 	shlq	$0x10, %rdx
    000000c5: 	orq	%rax, %rdx
    000000c8: 	movq	%rdx, %xmm3
    000000cd: 	por	%xmm3, %xmm0
    000000d1: 	pextrw	$0x0, %xmm0, %eax
    000000d6: 	pextrw	$0x1, %xmm0, %r9d
    000000dc: 	pextrw	$0x2, %xmm0, %r10d
    000000e2: 	pextrw	$0x3, %xmm0, %esi
.Ltmp900:
    000000e7: 	movl	%r9d, %edx
    000000ea: 	shll	$0x2, %ecx
    000000ed: 	orl	%r10d, %edx
    000000f0: 	orl	%esi, %edx
    000000f2: 	movl	%edx, %r9d
.Ltmp905:
    000000f5: 	cmpl	%ecx, %r8d
    000000f8: 	jle	.Ltmp901 # Offset: 248
    000000fe: 	movl	%r8d, %r11d
    00000101: 	subl	%ecx, %r11d
    00000104: 	leal	-0x1(%r11), %edx
    00000108: 	cmpl	$0x6, %edx
    0000010b: 	jbe	.Ltmp902 # Offset: 267
    0000010d: 	movslq	%ecx, %rdx
    00000110: 	pxor	%xmm0, %xmm0
    00000114: 	leaq	(%rdi,%rdx,2), %rsi
    00000118: 	movl	%r11d, %edx
    0000011b: 	shrl	$0x3, %edx
    0000011e: 	leal	-0x1(%rdx), %r10d
    00000122: 	leaq	0x10(%rsi), %rdx
    00000126: 	shlq	$0x4, %r10
    0000012a: 	addq	%rdx, %r10
    0000012d: 	jmp	.Ltmp903 # Offset: 301
    0000012f: 	nop # Size: 1
.Ltmp904:
    00000130: 	addq	$0x10, %rdx
.Ltmp903:
    00000134: 	movdqu	(%rsi), %xmm1
    00000138: 	movq	%rdx, %rsi
    0000013b: 	por	%xmm1, %xmm0
    0000013f: 	cmpq	%r10, %rdx
    00000142: 	jne	.Ltmp904 # Offset: 322
    00000144: 	movdqa	%xmm0, %xmm1
    00000148: 	psrldq	$0x8, %xmm1
    0000014d: 	por	%xmm1, %xmm0
    00000151: 	movdqa	%xmm0, %xmm1
    00000155: 	psrldq	$0x4, %xmm1
    0000015a: 	por	%xmm1, %xmm0
    0000015e: 	movdqa	%xmm0, %xmm1
    00000162: 	psrldq	$0x2, %xmm1
    00000167: 	por	%xmm1, %xmm0
    0000016b: 	pextrw	$0x0, %xmm0, %edx
    00000170: 	orl	%edx, %eax
    00000172: 	movl	%r11d, %edx
    00000175: 	andl	$-0x8, %edx
    00000178: 	addl	%edx, %ecx
    0000017a: 	cmpl	%r11d, %edx
    0000017d: 	je	.Ltmp901 # Offset: 381
.Ltmp902:
    0000017f: 	movslq	%ecx, %rsi
    00000182: 	leaq	(%rsi,%rsi), %rdx
    00000186: 	orw	(%rdi,%rsi,2), %ax
    0000018a: 	leal	0x1(%rcx), %esi
    0000018d: 	cmpl	%r8d, %esi
    00000190: 	jge	.Ltmp901 # Offset: 400
    00000192: 	leal	0x2(%rcx), %esi
    00000195: 	orw	0x2(%rdi,%rdx), %ax
    0000019a: 	cmpl	%r8d, %esi
    0000019d: 	jge	.Ltmp901 # Offset: 413
    0000019f: 	leal	0x3(%rcx), %esi
    000001a2: 	orw	0x4(%rdi,%rdx), %ax
    000001a7: 	cmpl	%esi, %r8d
    000001aa: 	jle	.Ltmp901 # Offset: 426
    000001ac: 	leal	0x4(%rcx), %esi
    000001af: 	orw	0x6(%rdi,%rdx), %ax
    000001b4: 	cmpl	%esi, %r8d
    000001b7: 	jle	.Ltmp901 # Offset: 439
    000001b9: 	leal	0x5(%rcx), %esi
    000001bc: 	orw	0x8(%rdi,%rdx), %ax
    000001c1: 	cmpl	%r8d, %esi
    000001c4: 	jge	.Ltmp901 # Offset: 452
    000001c6: 	addl	$0x6, %ecx
    000001c9: 	orw	0xa(%rdi,%rdx), %ax
    000001ce: 	cmpl	%r8d, %ecx
    000001d1: 	jge	.Ltmp901 # Offset: 465
    000001d3: 	orw	0xc(%rdi,%rdx), %ax
.Ltmp901:
    000001d8: 	orl	%r9d, %eax
    000001db: 	retq # Offset: 475
    000001dc: 	nopl	(%rax) # Size: 4
.Ltmp897:
    000001e0: 	movl	%edx, %r9d
    000001e3: 	xorl	%ecx, %ecx
    000001e5: 	jmp	.Ltmp905 # Offset: 485
.Ltmp898:
    000001ea: 	movl	%edx, %esi
    000001ec: 	movl	%edx, %r10d
    000001ef: 	movzwl	%dx, %r9d
    000001f3: 	xorl	%edx, %edx
    000001f5: 	jmp	.Ltmp906 # Offset: 501
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or6ItET_PKS0_iS0_"

Binary Function "_Z7bit_or7ItET_PKS0_iS0_" after disassembly {
  Number      : 138
  State       : disassembled
  Address     : 0xf390
  Size        : 0x1fa
  MaxSize     : 0x200
  Offset      : 0xf390
  Section     : .text
  Orc Section : .local.text._Z7bit_or7ItET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0137:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp907 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %esi
    00000015: 	movl	%esi, %ecx
    00000017: 	shrl	$0x2, %ecx
    0000001a: 	addl	$0x1, %ecx
    0000001d: 	cmpl	$0x3, %esi
    00000020: 	jbe	.Ltmp908 # Offset: 32
    00000026: 	movd	%edx, %xmm0
    0000002a: 	pxor	%xmm1, %xmm1
    0000002e: 	movq	%rdi, %rax
    00000031: 	pinsrw	$0x1, %edx, %xmm0
    00000036: 	movl	%ecx, %edx
    00000038: 	shrl	%edx
    0000003a: 	punpckldq	%xmm0, %xmm0
    0000003e: 	subl	$0x1, %edx
    00000041: 	punpcklqdq	%xmm1, %xmm0
    00000045: 	shlq	$0x4, %rdx
    00000049: 	leaq	0x10(%rdi,%rdx), %rdx
    0000004e: 	nop # Size: 2
.Ltmp909:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	por	%xmm2, %xmm0
    0000005c: 	cmpq	%rdx, %rax
    0000005f: 	jne	.Ltmp909 # Offset: 95
    00000061: 	pextrw	$0x4, %xmm0, %edx
    00000066: 	pextrw	$0x0, %xmm0, %eax
    0000006b: 	pextrw	$0x5, %xmm0, %esi
    00000070: 	orl	%edx, %eax
    00000072: 	pextrw	$0x1, %xmm0, %edx
    00000077: 	pextrw	$0x2, %xmm0, %r10d
    0000007d: 	orl	%esi, %edx
    0000007f: 	pextrw	$0x3, %xmm0, %esi
    00000084: 	movzwl	%dx, %r9d
    00000088: 	pextrw	$0x6, %xmm0, %edx
    0000008d: 	orl	%edx, %r10d
    00000090: 	pextrw	$0x7, %xmm0, %edx
    00000095: 	orl	%edx, %esi
    00000097: 	movl	%ecx, %edx
    00000099: 	andl	$-0x2, %edx
    0000009c: 	testl	$0x80000001, %ecx
    000000a2: 	je	.Ltmp910 # Offset: 162
.Ltmp916:
    000000a4: 	movq	(%rdi,%rdx,8), %xmm0
    000000a9: 	movzwl	%si, %edx
    000000ac: 	movzwl	%r10w, %r10d
    000000b0: 	movzwl	%ax, %eax
    000000b3: 	shlq	$0x10, %rdx
    000000b7: 	orq	%r10, %rdx
    000000ba: 	shlq	$0x10, %rdx
    000000be: 	orq	%r9, %rdx
    000000c1: 	shlq	$0x10, %rdx
    000000c5: 	orq	%rax, %rdx
    000000c8: 	movq	%rdx, %xmm3
    000000cd: 	por	%xmm3, %xmm0
    000000d1: 	pextrw	$0x0, %xmm0, %eax
    000000d6: 	pextrw	$0x1, %xmm0, %r9d
    000000dc: 	pextrw	$0x2, %xmm0, %r10d
    000000e2: 	pextrw	$0x3, %xmm0, %esi
.Ltmp910:
    000000e7: 	movl	%r9d, %edx
    000000ea: 	shll	$0x2, %ecx
    000000ed: 	orl	%r10d, %edx
    000000f0: 	orl	%esi, %edx
    000000f2: 	movl	%edx, %r9d
.Ltmp915:
    000000f5: 	cmpl	%ecx, %r8d
    000000f8: 	jle	.Ltmp911 # Offset: 248
    000000fe: 	movl	%r8d, %r11d
    00000101: 	subl	%ecx, %r11d
    00000104: 	leal	-0x1(%r11), %edx
    00000108: 	cmpl	$0x6, %edx
    0000010b: 	jbe	.Ltmp912 # Offset: 267
    0000010d: 	movslq	%ecx, %rdx
    00000110: 	pxor	%xmm0, %xmm0
    00000114: 	leaq	(%rdi,%rdx,2), %rsi
    00000118: 	movl	%r11d, %edx
    0000011b: 	shrl	$0x3, %edx
    0000011e: 	leal	-0x1(%rdx), %r10d
    00000122: 	leaq	0x10(%rsi), %rdx
    00000126: 	shlq	$0x4, %r10
    0000012a: 	addq	%rdx, %r10
    0000012d: 	jmp	.Ltmp913 # Offset: 301
    0000012f: 	nop # Size: 1
.Ltmp914:
    00000130: 	addq	$0x10, %rdx
.Ltmp913:
    00000134: 	movdqu	(%rsi), %xmm1
    00000138: 	movq	%rdx, %rsi
    0000013b: 	por	%xmm1, %xmm0
    0000013f: 	cmpq	%r10, %rdx
    00000142: 	jne	.Ltmp914 # Offset: 322
    00000144: 	movdqa	%xmm0, %xmm1
    00000148: 	psrldq	$0x8, %xmm1
    0000014d: 	por	%xmm1, %xmm0
    00000151: 	movdqa	%xmm0, %xmm1
    00000155: 	psrldq	$0x4, %xmm1
    0000015a: 	por	%xmm1, %xmm0
    0000015e: 	movdqa	%xmm0, %xmm1
    00000162: 	psrldq	$0x2, %xmm1
    00000167: 	por	%xmm1, %xmm0
    0000016b: 	pextrw	$0x0, %xmm0, %edx
    00000170: 	orl	%edx, %eax
    00000172: 	movl	%r11d, %edx
    00000175: 	andl	$-0x8, %edx
    00000178: 	addl	%edx, %ecx
    0000017a: 	cmpl	%r11d, %edx
    0000017d: 	je	.Ltmp911 # Offset: 381
.Ltmp912:
    0000017f: 	movslq	%ecx, %rsi
    00000182: 	leaq	(%rsi,%rsi), %rdx
    00000186: 	orw	(%rdi,%rsi,2), %ax
    0000018a: 	leal	0x1(%rcx), %esi
    0000018d: 	cmpl	%r8d, %esi
    00000190: 	jge	.Ltmp911 # Offset: 400
    00000192: 	leal	0x2(%rcx), %esi
    00000195: 	orw	0x2(%rdi,%rdx), %ax
    0000019a: 	cmpl	%r8d, %esi
    0000019d: 	jge	.Ltmp911 # Offset: 413
    0000019f: 	leal	0x3(%rcx), %esi
    000001a2: 	orw	0x4(%rdi,%rdx), %ax
    000001a7: 	cmpl	%esi, %r8d
    000001aa: 	jle	.Ltmp911 # Offset: 426
    000001ac: 	leal	0x4(%rcx), %esi
    000001af: 	orw	0x6(%rdi,%rdx), %ax
    000001b4: 	cmpl	%esi, %r8d
    000001b7: 	jle	.Ltmp911 # Offset: 439
    000001b9: 	leal	0x5(%rcx), %esi
    000001bc: 	orw	0x8(%rdi,%rdx), %ax
    000001c1: 	cmpl	%r8d, %esi
    000001c4: 	jge	.Ltmp911 # Offset: 452
    000001c6: 	addl	$0x6, %ecx
    000001c9: 	orw	0xa(%rdi,%rdx), %ax
    000001ce: 	cmpl	%r8d, %ecx
    000001d1: 	jge	.Ltmp911 # Offset: 465
    000001d3: 	orw	0xc(%rdi,%rdx), %ax
.Ltmp911:
    000001d8: 	orl	%r9d, %eax
    000001db: 	retq # Offset: 475
    000001dc: 	nopl	(%rax) # Size: 4
.Ltmp907:
    000001e0: 	movl	%edx, %r9d
    000001e3: 	xorl	%ecx, %ecx
    000001e5: 	jmp	.Ltmp915 # Offset: 485
.Ltmp908:
    000001ea: 	movl	%edx, %esi
    000001ec: 	movl	%edx, %r10d
    000001ef: 	movzwl	%dx, %r9d
    000001f3: 	xorl	%edx, %edx
    000001f5: 	jmp	.Ltmp916 # Offset: 501
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or7ItET_PKS0_iS0_"

Binary Function "_Z7bit_or8ItET_PKS0_iS0_" after disassembly {
  Number      : 139
  State       : disassembled
  Address     : 0xf590
  Size        : 0x181
  MaxSize     : 0x190
  Offset      : 0xf590
  Section     : .text
  Orc Section : .local.text._Z7bit_or8ItET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0138:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r9d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x7, %esi
    0000000c: 	jle	.Ltmp917 # Offset: 12
    00000012: 	leal	-0x8(%rsi), %ecx
    00000015: 	movd	%edx, %xmm0
    00000019: 	xorl	%eax, %eax
    0000001b: 	shrl	$0x3, %ecx
    0000001e: 	punpcklwd	%xmm0, %xmm0
    00000022: 	addl	$0x1, %ecx
    00000025: 	pshufd	$0x0, %xmm0, %xmm0
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp918:
    00000030: 	movq	%rax, %rdx
    00000033: 	addq	$0x1, %rax
    00000037: 	shlq	$0x4, %rdx
    0000003b: 	movdqu	(%rdi,%rdx), %xmm1
    00000040: 	por	%xmm1, %xmm0
    00000044: 	cmpl	%eax, %ecx
    00000046: 	ja	.Ltmp918 # Offset: 70
    00000048: 	pextrw	$0x1, %xmm0, %edx
    0000004d: 	pextrw	$0x2, %xmm0, %esi
    00000052: 	pextrw	$0x0, %xmm0, %eax
    00000057: 	shll	$0x3, %ecx
    0000005a: 	orl	%edx, %esi
    0000005c: 	pextrw	$0x3, %xmm0, %edx
    00000061: 	orl	%edx, %esi
    00000063: 	pextrw	$0x4, %xmm0, %edx
    00000068: 	orl	%edx, %esi
    0000006a: 	pextrw	$0x5, %xmm0, %edx
    0000006f: 	orl	%edx, %esi
    00000071: 	pextrw	$0x6, %xmm0, %edx
    00000076: 	orl	%edx, %esi
    00000078: 	pextrw	$0x7, %xmm0, %edx
    0000007d: 	orl	%edx, %esi
.Ltmp923:
    0000007f: 	cmpl	%ecx, %r9d
    00000082: 	jle	.Ltmp919 # Offset: 130
    00000088: 	movl	%r9d, %r11d
    0000008b: 	subl	%ecx, %r11d
    0000008e: 	leal	-0x1(%r11), %edx
    00000092: 	cmpl	$0x6, %edx
    00000095: 	jbe	.Ltmp920 # Offset: 149
    00000097: 	movslq	%ecx, %rdx
    0000009a: 	pxor	%xmm0, %xmm0
    0000009e: 	leaq	(%rdi,%rdx,2), %r8
    000000a2: 	movl	%r11d, %edx
    000000a5: 	shrl	$0x3, %edx
    000000a8: 	leal	-0x1(%rdx), %r10d
    000000ac: 	leaq	0x10(%r8), %rdx
    000000b0: 	shlq	$0x4, %r10
    000000b4: 	addq	%rdx, %r10
    000000b7: 	jmp	.Ltmp921 # Offset: 183
    000000b9: 	nopl	(%rax) # Size: 7
.Ltmp922:
    000000c0: 	addq	$0x10, %rdx
.Ltmp921:
    000000c4: 	movdqu	(%r8), %xmm1
    000000c9: 	movq	%rdx, %r8
    000000cc: 	por	%xmm1, %xmm0
    000000d0: 	cmpq	%rdx, %r10
    000000d3: 	jne	.Ltmp922 # Offset: 211
    000000d5: 	movdqa	%xmm0, %xmm1
    000000d9: 	psrldq	$0x8, %xmm1
    000000de: 	por	%xmm1, %xmm0
    000000e2: 	movdqa	%xmm0, %xmm1
    000000e6: 	psrldq	$0x4, %xmm1
    000000eb: 	por	%xmm1, %xmm0
    000000ef: 	movdqa	%xmm0, %xmm1
    000000f3: 	psrldq	$0x2, %xmm1
    000000f8: 	por	%xmm1, %xmm0
    000000fc: 	pextrw	$0x0, %xmm0, %edx
    00000101: 	orl	%edx, %eax
    00000103: 	movl	%r11d, %edx
    00000106: 	andl	$-0x8, %edx
    00000109: 	addl	%edx, %ecx
    0000010b: 	cmpl	%r11d, %edx
    0000010e: 	je	.Ltmp919 # Offset: 270
.Ltmp920:
    00000110: 	movslq	%ecx, %r8
    00000113: 	leaq	(%r8,%r8), %rdx
    00000117: 	orw	(%rdi,%r8,2), %ax
    0000011c: 	leal	0x1(%rcx), %r8d
    00000120: 	cmpl	%r8d, %r9d
    00000123: 	jle	.Ltmp919 # Offset: 291
    00000125: 	leal	0x2(%rcx), %r8d
    00000129: 	orw	0x2(%rdi,%rdx), %ax
    0000012e: 	cmpl	%r9d, %r8d
    00000131: 	jge	.Ltmp919 # Offset: 305
    00000133: 	leal	0x3(%rcx), %r8d
    00000137: 	orw	0x4(%rdi,%rdx), %ax
    0000013c: 	cmpl	%r9d, %r8d
    0000013f: 	jge	.Ltmp919 # Offset: 319
    00000141: 	leal	0x4(%rcx), %r8d
    00000145: 	orw	0x6(%rdi,%rdx), %ax
    0000014a: 	cmpl	%r9d, %r8d
    0000014d: 	jge	.Ltmp919 # Offset: 333
    0000014f: 	leal	0x5(%rcx), %r8d
    00000153: 	orw	0x8(%rdi,%rdx), %ax
    00000158: 	cmpl	%r9d, %r8d
    0000015b: 	jge	.Ltmp919 # Offset: 347
    0000015d: 	addl	$0x6, %ecx
    00000160: 	orw	0xa(%rdi,%rdx), %ax
    00000165: 	cmpl	%r9d, %ecx
    00000168: 	jge	.Ltmp919 # Offset: 360
    0000016a: 	orw	0xc(%rdi,%rdx), %ax
.Ltmp919:
    0000016f: 	orl	%esi, %eax
    00000171: 	retq # Offset: 369
    00000172: 	nopw	(%rax,%rax) # Size: 6
.Ltmp917:
    00000178: 	movl	%edx, %esi
    0000017a: 	xorl	%ecx, %ecx
    0000017c: 	jmp	.Ltmp923 # Offset: 380
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or8ItET_PKS0_iS0_"

Binary Function "_Z8bit_xor1ItET_PKS0_iS0_" after disassembly {
  Number      : 140
  State       : disassembled
  Address     : 0xf720
  Size        : 0xef
  MaxSize     : 0xf0
  Offset      : 0xf720
  Section     : .text
  Orc Section : .local.text._Z8bit_xor1ItET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0139:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp924 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0x6, %eax
    00000014: 	jbe	.Ltmp925 # Offset: 20
    0000001a: 	shrl	$0x3, %esi
    0000001d: 	movq	%rdi, %rax
    00000020: 	pxor	%xmm0, %xmm0
    00000024: 	subl	$0x1, %esi
    00000027: 	shlq	$0x4, %rsi
    0000002b: 	leaq	0x10(%rdi,%rsi), %rsi
.Ltmp926:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	addq	$0x10, %rax
    00000038: 	pxor	%xmm2, %xmm0
    0000003c: 	cmpq	%rsi, %rax
    0000003f: 	jne	.Ltmp926 # Offset: 63
    00000041: 	movdqa	%xmm0, %xmm1
    00000045: 	psrldq	$0x8, %xmm1
    0000004a: 	pxor	%xmm1, %xmm0
    0000004e: 	movdqa	%xmm0, %xmm1
    00000052: 	psrldq	$0x4, %xmm1
    00000057: 	pxor	%xmm1, %xmm0
    0000005b: 	movdqa	%xmm0, %xmm1
    0000005f: 	psrldq	$0x2, %xmm1
    00000064: 	pxor	%xmm1, %xmm0
    00000068: 	pextrw	$0x0, %xmm0, %eax
    0000006d: 	xorl	%edx, %eax
    0000006f: 	movl	%ecx, %edx
    00000071: 	andl	$-0x8, %edx
    00000074: 	testb	$0x7, %cl
    00000077: 	je	.Ltmp927 # Offset: 119
.Ltmp929:
    00000079: 	movslq	%edx, %r8
    0000007c: 	leaq	(%r8,%r8), %rsi
    00000080: 	xorw	(%rdi,%r8,2), %ax
    00000085: 	leal	0x1(%rdx), %r8d
    00000089: 	cmpl	%r8d, %ecx
    0000008c: 	jle	.Ltmp928 # Offset: 140
    0000008e: 	leal	0x2(%rdx), %r8d
    00000092: 	xorw	0x2(%rdi,%rsi), %ax
    00000097: 	cmpl	%r8d, %ecx
    0000009a: 	jle	.Ltmp928 # Offset: 154
    0000009c: 	leal	0x3(%rdx), %r8d
    000000a0: 	xorw	0x4(%rdi,%rsi), %ax
    000000a5: 	cmpl	%r8d, %ecx
    000000a8: 	jle	.Ltmp928 # Offset: 168
    000000aa: 	leal	0x4(%rdx), %r8d
    000000ae: 	xorw	0x6(%rdi,%rsi), %ax
    000000b3: 	cmpl	%r8d, %ecx
    000000b6: 	jle	.Ltmp928 # Offset: 182
    000000b8: 	leal	0x5(%rdx), %r8d
    000000bc: 	xorw	0x8(%rdi,%rsi), %ax
    000000c1: 	cmpl	%r8d, %ecx
    000000c4: 	jle	.Ltmp928 # Offset: 196
    000000c6: 	addl	$0x6, %edx
    000000c9: 	xorw	0xa(%rdi,%rsi), %ax
    000000ce: 	cmpl	%edx, %ecx
    000000d0: 	jle	.Ltmp928 # Offset: 208
    000000d2: 	xorw	0xc(%rdi,%rsi), %ax
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp924:
    000000e0: 	movl	%edx, %eax
.Ltmp928:
    000000e2: 	retq # Offset: 226
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp927:
    000000e8: 	retq # Offset: 232
.Ltmp925:
    000000e9: 	movl	%edx, %eax
    000000eb: 	xorl	%edx, %edx
    000000ed: 	jmp	.Ltmp929 # Offset: 237
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor1ItET_PKS0_iS0_"

Binary Function "_Z8bit_xor2ItET_PKS0_iS0_" after disassembly {
  Number      : 141
  State       : disassembled
  Address     : 0xf810
  Size        : 0x105
  MaxSize     : 0x110
  Offset      : 0xf810
  Section     : .text
  Orc Section : .local.text._Z8bit_xor2ItET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0140:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movq	%rdi, %rcx
    0000000a: 	addq	%rsi, %rsi
    0000000d: 	leaq	(%rdi,%rsi), %rdi
    00000011: 	cmpq	%rdi, %rcx
    00000014: 	je	.Ltmp930 # Offset: 20
    0000001a: 	subq	$0x2, %rsi
    0000001e: 	movq	%rcx, %rax
    00000021: 	movq	%rsi, %r8
    00000024: 	shrq	%r8
    00000027: 	addq	$0x1, %r8
    0000002b: 	cmpq	$0xc, %rsi
    0000002f: 	jbe	.Ltmp931 # Offset: 47
    00000035: 	movq	%r8, %rsi
    00000038: 	pxor	%xmm0, %xmm0
    0000003c: 	shrq	$0x3, %rsi
    00000040: 	shlq	$0x4, %rsi
    00000044: 	addq	%rcx, %rsi
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp932:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	pxor	%xmm2, %xmm0
    0000005c: 	cmpq	%rax, %rsi
    0000005f: 	jne	.Ltmp932 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	psrldq	$0x8, %xmm1
    0000006a: 	pxor	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x4, %xmm1
    00000077: 	pxor	%xmm1, %xmm0
    0000007b: 	movdqa	%xmm0, %xmm1
    0000007f: 	psrldq	$0x2, %xmm1
    00000084: 	pxor	%xmm1, %xmm0
    00000088: 	pextrw	$0x0, %xmm0, %eax
    0000008d: 	xorl	%edx, %eax
    0000008f: 	movq	%r8, %rdx
    00000092: 	andq	$-0x8, %rdx
    00000096: 	leaq	(%rcx,%rdx,2), %rcx
    0000009a: 	cmpq	%rdx, %r8
    0000009d: 	je	.Ltmp933 # Offset: 157
.Ltmp935:
    0000009f: 	leaq	0x2(%rcx), %rdx
    000000a3: 	xorw	(%rcx), %ax
    000000a6: 	cmpq	%rdx, %rdi
    000000a9: 	je	.Ltmp934 # Offset: 169
    000000ab: 	leaq	0x4(%rcx), %rdx
    000000af: 	xorw	0x2(%rcx), %ax
    000000b3: 	cmpq	%rdx, %rdi
    000000b6: 	je	.Ltmp934 # Offset: 182
    000000b8: 	leaq	0x6(%rcx), %rdx
    000000bc: 	xorw	0x4(%rcx), %ax
    000000c0: 	cmpq	%rdx, %rdi
    000000c3: 	je	.Ltmp934 # Offset: 195
    000000c5: 	leaq	0x8(%rcx), %rdx
    000000c9: 	xorw	0x6(%rcx), %ax
    000000cd: 	cmpq	%rdx, %rdi
    000000d0: 	je	.Ltmp934 # Offset: 208
    000000d2: 	leaq	0xa(%rcx), %rdx
    000000d6: 	xorw	0x8(%rcx), %ax
    000000da: 	cmpq	%rdx, %rdi
    000000dd: 	je	.Ltmp934 # Offset: 221
    000000df: 	leaq	0xc(%rcx), %rdx
    000000e3: 	xorw	0xa(%rcx), %ax
    000000e7: 	cmpq	%rdx, %rdi
    000000ea: 	je	.Ltmp934 # Offset: 234
    000000ec: 	xorw	0xc(%rcx), %ax
    000000f0: 	retq # Offset: 240
    000000f1: 	nopl	(%rax) # Size: 7
.Ltmp930:
    000000f8: 	movl	%edx, %eax
.Ltmp934:
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp933:
    00000100: 	retq # Offset: 256
.Ltmp931:
    00000101: 	movl	%edx, %eax
    00000103: 	jmp	.Ltmp935 # Offset: 259
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor2ItET_PKS0_iS0_"

Binary Function "_Z8bit_xor3ItET_PKS0_iS0_" after disassembly {
  Number      : 142
  State       : disassembled
  Address     : 0xf920
  Size        : 0x1b2
  MaxSize     : 0x1c0
  Offset      : 0xf920
  Section     : .text
  Orc Section : .local.text._Z8bit_xor3ItET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0141:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %r9d
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%esi, %edi
    0000000d: 	testl	%r9d, %r9d
    00000010: 	jle	.Ltmp936 # Offset: 16
    00000016: 	leal	-0x2(%rsi), %eax
    00000019: 	movl	%eax, %r10d
    0000001c: 	shrl	%r10d
    0000001f: 	leal	0x1(%r10), %esi
    00000023: 	cmpl	$0xd, %eax
    00000026: 	jbe	.Ltmp937 # Offset: 38
    0000002c: 	movl	%esi, %r8d
    0000002f: 	movq	%rcx, %rax
    00000032: 	pxor	%xmm4, %xmm4
    00000036: 	shrl	$0x3, %r8d
    0000003a: 	subl	$0x1, %r8d
    0000003e: 	shlq	$0x5, %r8
    00000042: 	leaq	0x20(%rcx,%r8), %r8
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp938:
    00000050: 	movdqu	(%rax), %xmm0
    00000054: 	movdqu	0x10(%rax), %xmm3
    00000059: 	addq	$0x20, %rax
    0000005d: 	movdqa	%xmm0, %xmm1
    00000061: 	movdqa	%xmm0, %xmm2
    00000065: 	punpcklwd	%xmm3, %xmm0
    00000069: 	punpcklwd	%xmm3, %xmm1
    0000006d: 	punpckhwd	%xmm3, %xmm2
    00000071: 	movdqa	%xmm1, %xmm5
    00000075: 	punpcklwd	%xmm2, %xmm0
    00000079: 	punpcklwd	%xmm2, %xmm1
    0000007d: 	punpckhwd	%xmm2, %xmm5
    00000081: 	punpcklwd	%xmm5, %xmm1
    00000085: 	punpckhwd	%xmm5, %xmm0
    00000089: 	pxor	%xmm0, %xmm1
    0000008d: 	pxor	%xmm1, %xmm4
    00000091: 	cmpq	%r8, %rax
    00000094: 	jne	.Ltmp938 # Offset: 148
    00000096: 	movdqa	%xmm4, %xmm0
    0000009a: 	psrldq	$0x8, %xmm0
    0000009f: 	pxor	%xmm0, %xmm4
    000000a3: 	movdqa	%xmm4, %xmm0
    000000a7: 	psrldq	$0x4, %xmm0
    000000ac: 	pxor	%xmm0, %xmm4
    000000b0: 	movdqa	%xmm4, %xmm0
    000000b4: 	psrldq	$0x2, %xmm0
    000000b9: 	pxor	%xmm0, %xmm4
    000000bd: 	pextrw	$0x0, %xmm4, %eax
    000000c2: 	xorl	%edx, %eax
    000000c4: 	movl	%esi, %edx
    000000c6: 	andl	$-0x8, %edx
    000000c9: 	leal	(%rdx,%rdx), %r8d
    000000cd: 	cmpl	%edx, %esi
    000000cf: 	je	.Ltmp939 # Offset: 207
.Ltmp943:
    000000d5: 	movl	%r10d, %r11d
    000000d8: 	subl	%edx, %r11d
    000000db: 	leal	0x1(%r11), %r10d
    000000df: 	cmpl	$0x2, %r11d
    000000e3: 	jbe	.Ltmp940 # Offset: 227
    000000e5: 	leaq	(%rcx,%rdx,4), %rdx
    000000e9: 	movq	(%rdx), %xmm1
    000000ed: 	movq	0x8(%rdx), %xmm2
    000000f2: 	movdqa	%xmm1, %xmm3
    000000f6: 	movdqa	%xmm1, %xmm0
    000000fa: 	punpcklwd	%xmm2, %xmm1
    000000fe: 	punpcklwd	%xmm2, %xmm3
    00000102: 	punpcklwd	%xmm2, %xmm0
    00000106: 	pshufd	$0xe, %xmm3, %xmm3
    0000010b: 	punpcklwd	%xmm3, %xmm1
    0000010f: 	punpcklwd	%xmm3, %xmm0
    00000113: 	pshufd	$0xe, %xmm1, %xmm1
    00000118: 	pxor	%xmm1, %xmm0
    0000011c: 	pextrw	$0x0, %xmm0, %edx
    00000121: 	pextrw	$0x1, %xmm0, %r11d
    00000127: 	xorl	%r11d, %edx
    0000012a: 	xorl	%eax, %edx
    0000012c: 	pextrw	$0x2, %xmm0, %eax
    00000131: 	xorl	%eax, %edx
    00000133: 	pextrw	$0x3, %xmm0, %eax
    00000138: 	xorl	%edx, %eax
    0000013a: 	movl	%r10d, %edx
    0000013d: 	andl	$-0x4, %edx
    00000140: 	leal	(%r8,%rdx,2), %r8d
    00000144: 	cmpl	%edx, %r10d
    00000147: 	je	.Ltmp939 # Offset: 327
.Ltmp940:
    00000149: 	movslq	%r8d, %r10
    0000014c: 	xorw	(%rcx,%r10,2), %ax
    00000151: 	leaq	(%r10,%r10), %rdx
    00000155: 	xorw	0x2(%rcx,%r10,2), %ax
    0000015b: 	leal	0x2(%r8), %r10d
    0000015f: 	cmpl	%r9d, %r10d
    00000162: 	jge	.Ltmp939 # Offset: 354
    00000164: 	movzwl	0x6(%rcx,%rdx), %r10d
    0000016a: 	addl	$0x4, %r8d
    0000016e: 	xorw	0x4(%rcx,%rdx), %r10w
    00000174: 	xorl	%r10d, %eax
    00000177: 	cmpl	%r8d, %r9d
    0000017a: 	jle	.Ltmp939 # Offset: 378
    0000017c: 	movzwl	0x8(%rcx,%rdx), %r8d
    00000182: 	xorw	0xa(%rcx,%rdx), %r8w
    00000188: 	movl	%r8d, %edx
    0000018b: 	xorl	%edx, %eax
.Ltmp939:
    0000018d: 	addl	%esi, %esi
.Ltmp942:
    0000018f: 	cmpl	%edi, %esi
    00000191: 	jge	.Ltmp941 # Offset: 401
    00000193: 	movslq	%esi, %rsi
    00000196: 	xorw	(%rcx,%rsi,2), %ax
.Ltmp941:
    0000019a: 	retq # Offset: 410
    0000019b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp936:
    000001a0: 	movl	%edx, %eax
    000001a2: 	xorl	%esi, %esi
    000001a4: 	jmp	.Ltmp942 # Offset: 420
.Ltmp937:
    000001a6: 	movl	%edx, %eax
    000001a8: 	xorl	%r8d, %r8d
    000001ab: 	xorl	%edx, %edx
    000001ad: 	jmp	.Ltmp943 # Offset: 429
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor3ItET_PKS0_iS0_"

Binary Function "_Z8bit_xor4ItET_PKS0_iS0_" after disassembly {
  Number      : 143
  State       : disassembled
  Address     : 0xfae0
  Size        : 0x332
  MaxSize     : 0x340
  Offset      : 0xfae0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor4ItET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0142:
    00000000: 	endbr64
    00000004: 	leal	-0x3(%rsi), %r8d
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%esi, %edi
    0000000d: 	testl	%r8d, %r8d
    00000010: 	jle	.Ltmp944 # Offset: 16
    00000016: 	leal	-0x4(%rsi), %eax
    00000019: 	movl	%eax, %r11d
    0000001c: 	shrl	$0x2, %r11d
    00000020: 	leal	0x1(%r11), %esi
    00000024: 	cmpl	$0x1b, %eax
    00000027: 	jbe	.Ltmp945 # Offset: 39
    0000002d: 	movl	%esi, %r9d
    00000030: 	movq	%rcx, %rax
    00000033: 	pxor	%xmm6, %xmm6
    00000037: 	shrl	$0x3, %r9d
    0000003b: 	subl	$0x1, %r9d
    0000003f: 	shlq	$0x6, %r9
    00000043: 	leaq	0x40(%rcx,%r9), %r9
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp946:
    00000050: 	movdqu	(%rax), %xmm0
    00000054: 	movdqu	0x10(%rax), %xmm4
    00000059: 	addq	$0x40, %rax
    0000005d: 	movdqu	-0x20(%rax), %xmm2
    00000062: 	movdqu	-0x10(%rax), %xmm5
    00000067: 	movdqa	%xmm0, %xmm1
    0000006b: 	movdqa	%xmm0, %xmm3
    0000006f: 	punpcklwd	%xmm4, %xmm0
    00000073: 	punpcklwd	%xmm4, %xmm1
    00000077: 	punpckhwd	%xmm4, %xmm3
    0000007b: 	movdqa	%xmm2, %xmm4
    0000007f: 	movdqa	%xmm1, %xmm7
    00000083: 	punpcklwd	%xmm5, %xmm4
    00000087: 	punpcklwd	%xmm3, %xmm1
    0000008b: 	punpckhwd	%xmm3, %xmm7
    0000008f: 	punpcklwd	%xmm3, %xmm0
    00000093: 	movdqa	%xmm2, %xmm3
    00000097: 	punpckhwd	%xmm5, %xmm3
    0000009b: 	punpcklwd	%xmm7, %xmm1
    0000009f: 	punpckhwd	%xmm7, %xmm0
    000000a3: 	punpcklwd	%xmm5, %xmm2
    000000a7: 	movdqa	%xmm4, %xmm7
    000000ab: 	punpcklwd	%xmm3, %xmm4
    000000af: 	punpckhwd	%xmm3, %xmm7
    000000b3: 	punpcklwd	%xmm3, %xmm2
    000000b7: 	movdqa	%xmm0, %xmm3
    000000bb: 	punpckhwd	%xmm7, %xmm2
    000000bf: 	movdqa	%xmm0, %xmm5
    000000c3: 	punpcklwd	%xmm7, %xmm4
    000000c7: 	punpcklwd	%xmm2, %xmm3
    000000cb: 	punpckhwd	%xmm2, %xmm5
    000000cf: 	punpcklwd	%xmm2, %xmm0
    000000d3: 	movdqa	%xmm3, %xmm7
    000000d7: 	punpcklwd	%xmm5, %xmm0
    000000db: 	punpcklwd	%xmm5, %xmm3
    000000df: 	punpckhwd	%xmm5, %xmm7
    000000e3: 	movdqa	%xmm1, %xmm2
    000000e7: 	punpckhwd	%xmm7, %xmm0
    000000eb: 	punpcklwd	%xmm7, %xmm3
    000000ef: 	punpckhwd	%xmm4, %xmm2
    000000f3: 	pxor	%xmm0, %xmm3
    000000f7: 	movdqa	%xmm1, %xmm0
    000000fb: 	punpcklwd	%xmm4, %xmm1
    000000ff: 	punpcklwd	%xmm4, %xmm0
    00000103: 	punpcklwd	%xmm2, %xmm1
    00000107: 	movdqa	%xmm0, %xmm5
    0000010b: 	punpcklwd	%xmm2, %xmm0
    0000010f: 	punpckhwd	%xmm2, %xmm5
    00000113: 	punpcklwd	%xmm5, %xmm0
    00000117: 	punpckhwd	%xmm5, %xmm1
    0000011b: 	pxor	%xmm1, %xmm0
    0000011f: 	pxor	%xmm0, %xmm3
    00000123: 	pxor	%xmm3, %xmm6
    00000127: 	cmpq	%r9, %rax
    0000012a: 	jne	.Ltmp946 # Offset: 298
    00000130: 	movdqa	%xmm6, %xmm0
    00000134: 	movl	%esi, %r10d
    00000137: 	psrldq	$0x8, %xmm0
    0000013c: 	andl	$-0x8, %r10d
    00000140: 	pxor	%xmm0, %xmm6
    00000144: 	movdqa	%xmm6, %xmm0
    00000148: 	psrldq	$0x4, %xmm0
    0000014d: 	pxor	%xmm0, %xmm6
    00000151: 	movdqa	%xmm6, %xmm0
    00000155: 	psrldq	$0x2, %xmm0
    0000015a: 	pxor	%xmm0, %xmm6
    0000015e: 	pextrw	$0x0, %xmm6, %eax
    00000163: 	xorl	%edx, %eax
    00000165: 	leal	(,%r10,4), %edx
    0000016d: 	cmpl	%esi, %r10d
    00000170: 	je	.Ltmp947 # Offset: 368
.Ltmp951:
    00000176: 	subl	%r10d, %r11d
    00000179: 	leal	0x1(%r11), %r9d
    0000017d: 	cmpl	$0x2, %r11d
    00000181: 	jbe	.Ltmp948 # Offset: 385
    00000187: 	leaq	(%rcx,%r10,8), %r10
    0000018b: 	movq	(%r10), %xmm0
    00000190: 	movq	0x8(%r10), %xmm4
    00000196: 	movq	0x10(%r10), %xmm3
    0000019c: 	movq	0x18(%r10), %xmm1
    000001a2: 	movdqa	%xmm0, %xmm5
    000001a6: 	movdqa	%xmm0, %xmm2
    000001aa: 	punpcklwd	%xmm4, %xmm0
    000001ae: 	punpcklwd	%xmm4, %xmm5
    000001b2: 	punpcklwd	%xmm4, %xmm2
    000001b6: 	movdqa	%xmm3, %xmm4
    000001ba: 	pshufd	$0xe, %xmm5, %xmm5
    000001bf: 	punpcklwd	%xmm1, %xmm4
    000001c3: 	punpcklwd	%xmm5, %xmm2
    000001c7: 	punpcklwd	%xmm5, %xmm0
    000001cb: 	movdqa	%xmm3, %xmm5
    000001cf: 	punpcklwd	%xmm1, %xmm5
    000001d3: 	punpcklwd	%xmm1, %xmm3
    000001d7: 	pshufd	$0xe, %xmm0, %xmm0
    000001dc: 	pshufd	$0xe, %xmm5, %xmm5
    000001e1: 	movdqa	%xmm0, %xmm1
    000001e5: 	punpcklwd	%xmm5, %xmm3
    000001e9: 	punpcklwd	%xmm5, %xmm4
    000001ed: 	movdqa	%xmm0, %xmm5
    000001f1: 	pshufd	$0xe, %xmm3, %xmm3
    000001f6: 	punpcklwd	%xmm3, %xmm5
    000001fa: 	punpcklwd	%xmm3, %xmm0
    000001fe: 	punpcklwd	%xmm3, %xmm1
    00000202: 	pshufd	$0xe, %xmm5, %xmm5
    00000207: 	movdqa	%xmm2, %xmm3
    0000020b: 	punpcklwd	%xmm5, %xmm0
    0000020f: 	punpcklwd	%xmm5, %xmm1
    00000213: 	punpcklwd	%xmm4, %xmm3
    00000217: 	pshufd	$0xe, %xmm0, %xmm0
    0000021c: 	pshufd	$0xe, %xmm3, %xmm3
    00000221: 	pxor	%xmm1, %xmm0
    00000225: 	movdqa	%xmm2, %xmm1
    00000229: 	punpcklwd	%xmm4, %xmm2
    0000022d: 	punpcklwd	%xmm4, %xmm1
    00000231: 	punpcklwd	%xmm3, %xmm2
    00000235: 	punpcklwd	%xmm3, %xmm1
    00000239: 	pshufd	$0xe, %xmm2, %xmm2
    0000023e: 	pxor	%xmm2, %xmm1
    00000242: 	pxor	%xmm1, %xmm0
    00000246: 	pextrw	$0x0, %xmm0, %r10d
    0000024c: 	pextrw	$0x1, %xmm0, %r11d
    00000252: 	xorl	%r11d, %r10d
    00000255: 	xorl	%eax, %r10d
    00000258: 	pextrw	$0x2, %xmm0, %eax
    0000025d: 	xorl	%eax, %r10d
    00000260: 	pextrw	$0x3, %xmm0, %eax
    00000265: 	xorl	%r10d, %eax
    00000268: 	movl	%r9d, %r10d
    0000026b: 	andl	$-0x4, %r10d
    0000026f: 	leal	(%rdx,%r10,4), %edx
    00000273: 	cmpl	%r10d, %r9d
    00000276: 	je	.Ltmp947 # Offset: 630
.Ltmp948:
    00000278: 	movslq	%edx, %r10
    0000027b: 	xorw	(%rcx,%r10,2), %ax
    00000280: 	leaq	(%r10,%r10), %r9
    00000284: 	xorw	0x2(%rcx,%r10,2), %ax
    0000028a: 	xorw	0x4(%rcx,%r10,2), %ax
    00000290: 	xorw	0x6(%rcx,%r10,2), %ax
    00000296: 	leal	0x4(%rdx), %r10d
    0000029a: 	cmpl	%r10d, %r8d
    0000029d: 	jle	.Ltmp947 # Offset: 669
    0000029f: 	movzwl	0xa(%rcx,%r9), %r10d
    000002a5: 	addl	$0x8, %edx
    000002a8: 	xorw	0xc(%rcx,%r9), %r10w
    000002ae: 	xorw	0x8(%rcx,%r9), %r10w
    000002b4: 	xorw	0xe(%rcx,%r9), %r10w
    000002ba: 	xorl	%r10d, %eax
    000002bd: 	cmpl	%edx, %r8d
    000002c0: 	jle	.Ltmp947 # Offset: 704
    000002c2: 	movzwl	0x12(%rcx,%r9), %edx
    000002c8: 	xorw	0x14(%rcx,%r9), %dx
    000002ce: 	xorw	0x10(%rcx,%r9), %dx
    000002d4: 	xorw	0x16(%rcx,%r9), %dx
    000002da: 	xorl	%edx, %eax
.Ltmp947:
    000002dc: 	shll	$0x2, %esi
.Ltmp950:
    000002df: 	cmpl	%esi, %edi
    000002e1: 	jle	.Ltmp949 # Offset: 737
    000002e3: 	movslq	%esi, %rdx
    000002e6: 	leaq	(%rdx,%rdx), %r8
    000002ea: 	xorw	(%rcx,%rdx,2), %ax
    000002ee: 	leal	0x1(%rsi), %edx
    000002f1: 	cmpl	%edi, %edx
    000002f3: 	jge	.Ltmp949 # Offset: 755
    000002f5: 	leal	0x2(%rsi), %edx
    000002f8: 	xorw	0x2(%rcx,%r8), %ax
    000002fe: 	cmpl	%edx, %edi
    00000300: 	jle	.Ltmp949 # Offset: 768
    00000302: 	addl	$0x3, %esi
    00000305: 	xorw	0x4(%rcx,%r8), %ax
    0000030b: 	cmpl	%esi, %edi
    0000030d: 	jle	.Ltmp949 # Offset: 781
    0000030f: 	xorw	0x6(%rcx,%r8), %ax
.Ltmp949:
    00000315: 	retq # Offset: 789
    00000316: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp944:
    00000320: 	movl	%edx, %eax
    00000322: 	xorl	%esi, %esi
    00000324: 	jmp	.Ltmp950 # Offset: 804
.Ltmp945:
    00000326: 	movl	%edx, %eax
    00000328: 	xorl	%r10d, %r10d
    0000032b: 	xorl	%edx, %edx
    0000032d: 	jmp	.Ltmp951 # Offset: 813
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor4ItET_PKS0_iS0_"

Binary Function "_Z8bit_xor5ItET_PKS0_iS0_" after disassembly {
  Number      : 144
  State       : disassembled
  Address     : 0xfe20
  Size        : 0x1e4
  MaxSize     : 0x1f0
  Offset      : 0xfe20
  Section     : .text
  Orc Section : .local.text._Z8bit_xor5ItET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0143:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %ecx
    00000007: 	movl	%esi, %r9d
    0000000a: 	movl	%edx, %eax
    0000000c: 	testl	%ecx, %ecx
    0000000e: 	jle	.Ltmp952 # Offset: 14
    00000014: 	leal	-0x2(%rsi), %r8d
    00000018: 	movl	%r8d, %esi
    0000001b: 	shrl	%esi
    0000001d: 	addl	$0x1, %esi
    00000020: 	cmpl	$0x5, %r8d
    00000024: 	jbe	.Ltmp953 # Offset: 36
    0000002a: 	pxor	%xmm0, %xmm0
    0000002e: 	movq	%rdi, %rax
    00000031: 	pinsrw	$0x0, %edx, %xmm0
    00000036: 	movl	%esi, %edx
    00000038: 	shrl	$0x2, %edx
    0000003b: 	subl	$0x1, %edx
    0000003e: 	shlq	$0x4, %rdx
    00000042: 	leaq	0x10(%rdi,%rdx), %rdx
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp954:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	pxor	%xmm2, %xmm0
    0000005c: 	cmpq	%rdx, %rax
    0000005f: 	jne	.Ltmp954 # Offset: 95
    00000061: 	pextrw	$0x2, %xmm0, %edx
    00000066: 	pextrw	$0x0, %xmm0, %eax
    0000006b: 	pextrw	$0x1, %xmm0, %r8d
    00000071: 	movl	%esi, %r10d
    00000074: 	xorl	%edx, %eax
    00000076: 	pextrw	$0x4, %xmm0, %edx
    0000007b: 	andl	$-0x4, %r10d
    0000007f: 	xorl	%edx, %eax
    00000081: 	pextrw	$0x6, %xmm0, %edx
    00000086: 	xorl	%edx, %eax
    00000088: 	pextrw	$0x3, %xmm0, %edx
    0000008d: 	xorl	%edx, %r8d
    00000090: 	pextrw	$0x5, %xmm0, %edx
    00000095: 	xorl	%edx, %r8d
    00000098: 	pextrw	$0x7, %xmm0, %edx
    0000009d: 	xorl	%edx, %r8d
    000000a0: 	leal	(%r10,%r10), %edx
    000000a4: 	cmpl	%r10d, %esi
    000000a7: 	je	.Ltmp955 # Offset: 167
.Ltmp961:
    000000a9: 	movslq	%edx, %r11
    000000ac: 	leaq	(%r11,%r11), %r10
    000000b0: 	xorw	(%rdi,%r11,2), %ax
    000000b5: 	xorw	0x2(%rdi,%r11,2), %r8w
    000000bb: 	leal	0x2(%rdx), %r11d
    000000bf: 	cmpl	%r11d, %ecx
    000000c2: 	jle	.Ltmp955 # Offset: 194
    000000c4: 	addl	$0x4, %edx
    000000c7: 	xorw	0x4(%rdi,%r10), %ax
    000000cd: 	xorw	0x6(%rdi,%r10), %r8w
    000000d3: 	cmpl	%edx, %ecx
    000000d5: 	jle	.Ltmp955 # Offset: 213
    000000d7: 	xorw	0x8(%rdi,%r10), %ax
    000000dd: 	xorw	0xa(%rdi,%r10), %r8w
.Ltmp955:
    000000e3: 	addl	%esi, %esi
.Ltmp960:
    000000e5: 	cmpl	%esi, %r9d
    000000e8: 	jle	.Ltmp956 # Offset: 232
    000000ee: 	movl	%r9d, %r11d
    000000f1: 	subl	%esi, %r11d
    000000f4: 	leal	-0x1(%r11), %edx
    000000f8: 	cmpl	$0x6, %edx
    000000fb: 	jbe	.Ltmp957 # Offset: 251
    000000fd: 	movslq	%esi, %rdx
    00000100: 	pxor	%xmm0, %xmm0
    00000104: 	leaq	(%rdi,%rdx,2), %rcx
    00000108: 	movl	%r11d, %edx
    0000010b: 	shrl	$0x3, %edx
    0000010e: 	leal	-0x1(%rdx), %r10d
    00000112: 	leaq	0x10(%rcx), %rdx
    00000116: 	shlq	$0x4, %r10
    0000011a: 	addq	%rdx, %r10
    0000011d: 	jmp	.Ltmp958 # Offset: 285
    0000011f: 	nop # Size: 1
.Ltmp959:
    00000120: 	addq	$0x10, %rdx
.Ltmp958:
    00000124: 	movdqu	(%rcx), %xmm1
    00000128: 	movq	%rdx, %rcx
    0000012b: 	pxor	%xmm1, %xmm0
    0000012f: 	cmpq	%rdx, %r10
    00000132: 	jne	.Ltmp959 # Offset: 306
    00000134: 	movdqa	%xmm0, %xmm1
    00000138: 	psrldq	$0x8, %xmm1
    0000013d: 	pxor	%xmm1, %xmm0
    00000141: 	movdqa	%xmm0, %xmm1
    00000145: 	psrldq	$0x4, %xmm1
    0000014a: 	pxor	%xmm1, %xmm0
    0000014e: 	movdqa	%xmm0, %xmm1
    00000152: 	psrldq	$0x2, %xmm1
    00000157: 	pxor	%xmm1, %xmm0
    0000015b: 	pextrw	$0x0, %xmm0, %edx
    00000160: 	xorl	%edx, %eax
    00000162: 	movl	%r11d, %edx
    00000165: 	andl	$-0x8, %edx
    00000168: 	addl	%edx, %esi
    0000016a: 	cmpl	%r11d, %edx
    0000016d: 	je	.Ltmp956 # Offset: 365
.Ltmp957:
    0000016f: 	movslq	%esi, %rcx
    00000172: 	leaq	(%rcx,%rcx), %rdx
    00000176: 	xorw	(%rdi,%rcx,2), %ax
    0000017a: 	leal	0x1(%rsi), %ecx
    0000017d: 	cmpl	%ecx, %r9d
    00000180: 	jle	.Ltmp956 # Offset: 384
    00000182: 	leal	0x2(%rsi), %ecx
    00000185: 	xorw	0x2(%rdi,%rdx), %ax
    0000018a: 	cmpl	%ecx, %r9d
    0000018d: 	jle	.Ltmp956 # Offset: 397
    0000018f: 	leal	0x3(%rsi), %ecx
    00000192: 	xorw	0x4(%rdi,%rdx), %ax
    00000197: 	cmpl	%ecx, %r9d
    0000019a: 	jle	.Ltmp956 # Offset: 410
    0000019c: 	leal	0x4(%rsi), %ecx
    0000019f: 	xorw	0x6(%rdi,%rdx), %ax
    000001a4: 	cmpl	%ecx, %r9d
    000001a7: 	jle	.Ltmp956 # Offset: 423
    000001a9: 	leal	0x5(%rsi), %ecx
    000001ac: 	xorw	0x8(%rdi,%rdx), %ax
    000001b1: 	cmpl	%ecx, %r9d
    000001b4: 	jle	.Ltmp956 # Offset: 436
    000001b6: 	addl	$0x6, %esi
    000001b9: 	xorw	0xa(%rdi,%rdx), %ax
    000001be: 	cmpl	%esi, %r9d
    000001c1: 	jle	.Ltmp956 # Offset: 449
    000001c3: 	xorw	0xc(%rdi,%rdx), %ax
.Ltmp956:
    000001c8: 	xorl	%r8d, %eax
    000001cb: 	retq # Offset: 459
    000001cc: 	nopl	(%rax) # Size: 4
.Ltmp952:
    000001d0: 	xorl	%esi, %esi
    000001d2: 	xorl	%r8d, %r8d
    000001d5: 	jmp	.Ltmp960 # Offset: 469
.Ltmp953:
    000001da: 	xorl	%edx, %edx
    000001dc: 	xorl	%r8d, %r8d
    000001df: 	jmp	.Ltmp961 # Offset: 479
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor5ItET_PKS0_iS0_"

Binary Function "_Z8bit_xor6ItET_PKS0_iS0_" after disassembly {
  Number      : 145
  State       : disassembled
  Address     : 0x10010
  Size        : 0x20a
  MaxSize     : 0x210
  Offset      : 0x10010
  Section     : .text
  Orc Section : .local.text._Z8bit_xor6ItET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0144:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp962 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %edi
    00000015: 	movl	%edi, %r8d
    00000018: 	shrl	$0x2, %r8d
    0000001c: 	addl	$0x1, %r8d
    00000020: 	cmpl	$0x3, %edi
    00000023: 	jbe	.Ltmp963 # Offset: 35
    00000029: 	pxor	%xmm0, %xmm0
    0000002d: 	movq	%rcx, %rax
    00000030: 	pinsrw	$0x0, %edx, %xmm0
    00000035: 	movl	%r8d, %edx
    00000038: 	shrl	%edx
    0000003a: 	subl	$0x1, %edx
    0000003d: 	shlq	$0x4, %rdx
    00000041: 	leaq	0x10(%rcx,%rdx), %rdx
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp964:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	pxor	%xmm2, %xmm0
    0000005c: 	cmpq	%rax, %rdx
    0000005f: 	jne	.Ltmp964 # Offset: 95
    00000061: 	pextrw	$0x4, %xmm0, %edx
    00000066: 	pextrw	$0x0, %xmm0, %eax
    0000006b: 	pextrw	$0x1, %xmm0, %edi
    00000070: 	xorl	%edx, %eax
    00000072: 	pextrw	$0x5, %xmm0, %edx
    00000077: 	pextrw	$0x2, %xmm0, %r10d
    0000007d: 	xorl	%edx, %edi
    0000007f: 	pextrw	$0x6, %xmm0, %edx
    00000084: 	pextrw	$0x7, %xmm0, %r9d
    0000008a: 	xorl	%edx, %r10d
    0000008d: 	pextrw	$0x3, %xmm0, %edx
    00000092: 	xorl	%r9d, %edx
    00000095: 	movl	%r8d, %r9d
    00000098: 	andl	$-0x2, %r9d
    0000009c: 	testl	$0x80000001, %r8d
    000000a3: 	je	.Ltmp965 # Offset: 163
.Ltmp971:
    000000a5: 	movzwl	%dx, %edx
    000000a8: 	movzwl	%r10w, %r10d
    000000ac: 	movzwl	%di, %edi
    000000af: 	movzwl	%ax, %eax
    000000b2: 	shlq	$0x10, %rdx
    000000b6: 	movq	(%rcx,%r9,8), %xmm0
    000000bc: 	orq	%r10, %rdx
    000000bf: 	shlq	$0x10, %rdx
    000000c3: 	orq	%rdi, %rdx
    000000c6: 	shlq	$0x10, %rdx
    000000ca: 	orq	%rax, %rdx
    000000cd: 	movq	%rdx, %xmm3
    000000d2: 	pxor	%xmm3, %xmm0
    000000d6: 	pextrw	$0x0, %xmm0, %eax
    000000db: 	pextrw	$0x1, %xmm0, %edi
    000000e0: 	pextrw	$0x2, %xmm0, %r10d
    000000e6: 	pextrw	$0x3, %xmm0, %edx
.Ltmp965:
    000000eb: 	xorl	%r10d, %edi
    000000ee: 	shll	$0x2, %r8d
    000000f2: 	xorl	%edx, %edi
    000000f4: 	movl	%edi, %r10d
.Ltmp970:
    000000f7: 	cmpl	%r8d, %esi
    000000fa: 	jle	.Ltmp966 # Offset: 250
    00000100: 	movl	%esi, %r11d
    00000103: 	subl	%r8d, %r11d
    00000106: 	leal	-0x1(%r11), %edx
    0000010a: 	cmpl	$0x6, %edx
    0000010d: 	jbe	.Ltmp967 # Offset: 269
    0000010f: 	movslq	%r8d, %rdx
    00000112: 	pxor	%xmm0, %xmm0
    00000116: 	leaq	(%rcx,%rdx,2), %rdi
    0000011a: 	movl	%r11d, %edx
    0000011d: 	shrl	$0x3, %edx
    00000120: 	leal	-0x1(%rdx), %r9d
    00000124: 	leaq	0x10(%rdi), %rdx
    00000128: 	shlq	$0x4, %r9
    0000012c: 	addq	%rdx, %r9
    0000012f: 	jmp	.Ltmp968 # Offset: 303
    00000131: 	nopl	(%rax) # Size: 7
.Ltmp969:
    00000138: 	addq	$0x10, %rdx
.Ltmp968:
    0000013c: 	movdqu	(%rdi), %xmm1
    00000140: 	movq	%rdx, %rdi
    00000143: 	pxor	%xmm1, %xmm0
    00000147: 	cmpq	%r9, %rdx
    0000014a: 	jne	.Ltmp969 # Offset: 330
    0000014c: 	movdqa	%xmm0, %xmm1
    00000150: 	psrldq	$0x8, %xmm1
    00000155: 	pxor	%xmm1, %xmm0
    00000159: 	movdqa	%xmm0, %xmm1
    0000015d: 	psrldq	$0x4, %xmm1
    00000162: 	pxor	%xmm1, %xmm0
    00000166: 	movdqa	%xmm0, %xmm1
    0000016a: 	psrldq	$0x2, %xmm1
    0000016f: 	pxor	%xmm1, %xmm0
    00000173: 	pextrw	$0x0, %xmm0, %edx
    00000178: 	xorl	%edx, %eax
    0000017a: 	movl	%r11d, %edx
    0000017d: 	andl	$-0x8, %edx
    00000180: 	addl	%edx, %r8d
    00000183: 	cmpl	%r11d, %edx
    00000186: 	je	.Ltmp966 # Offset: 390
.Ltmp967:
    00000188: 	movslq	%r8d, %rdi
    0000018b: 	leaq	(%rdi,%rdi), %rdx
    0000018f: 	xorw	(%rcx,%rdi,2), %ax
    00000193: 	leal	0x1(%r8), %edi
    00000197: 	cmpl	%esi, %edi
    00000199: 	jge	.Ltmp966 # Offset: 409
    0000019b: 	leal	0x2(%r8), %edi
    0000019f: 	xorw	0x2(%rcx,%rdx), %ax
    000001a4: 	cmpl	%edi, %esi
    000001a6: 	jle	.Ltmp966 # Offset: 422
    000001a8: 	leal	0x3(%r8), %edi
    000001ac: 	xorw	0x4(%rcx,%rdx), %ax
    000001b1: 	cmpl	%edi, %esi
    000001b3: 	jle	.Ltmp966 # Offset: 435
    000001b5: 	leal	0x4(%r8), %edi
    000001b9: 	xorw	0x6(%rcx,%rdx), %ax
    000001be: 	cmpl	%edi, %esi
    000001c0: 	jle	.Ltmp966 # Offset: 448
    000001c2: 	leal	0x5(%r8), %edi
    000001c6: 	xorw	0x8(%rcx,%rdx), %ax
    000001cb: 	cmpl	%esi, %edi
    000001cd: 	jge	.Ltmp966 # Offset: 461
    000001cf: 	addl	$0x6, %r8d
    000001d3: 	xorw	0xa(%rcx,%rdx), %ax
    000001d8: 	cmpl	%esi, %r8d
    000001db: 	jge	.Ltmp966 # Offset: 475
    000001dd: 	xorw	0xc(%rcx,%rdx), %ax
.Ltmp966:
    000001e2: 	xorl	%r10d, %eax
    000001e5: 	retq # Offset: 485
    000001e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp962:
    000001f0: 	xorl	%r10d, %r10d
    000001f3: 	xorl	%r8d, %r8d
    000001f6: 	jmp	.Ltmp970 # Offset: 502
.Ltmp963:
    000001fb: 	xorl	%r9d, %r9d
    000001fe: 	xorl	%edx, %edx
    00000200: 	xorl	%r10d, %r10d
    00000203: 	xorl	%edi, %edi
    00000205: 	jmp	.Ltmp971 # Offset: 517
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor6ItET_PKS0_iS0_"

Binary Function "_Z8bit_xor7ItET_PKS0_iS0_" after disassembly {
  Number      : 146
  State       : disassembled
  Address     : 0x10220
  Size        : 0x20a
  MaxSize     : 0x210
  Offset      : 0x10220
  Section     : .text
  Orc Section : .local.text._Z8bit_xor7ItET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0145:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp972 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %edi
    00000015: 	movl	%edi, %r8d
    00000018: 	shrl	$0x2, %r8d
    0000001c: 	addl	$0x1, %r8d
    00000020: 	cmpl	$0x3, %edi
    00000023: 	jbe	.Ltmp973 # Offset: 35
    00000029: 	pxor	%xmm0, %xmm0
    0000002d: 	movq	%rcx, %rax
    00000030: 	pinsrw	$0x0, %edx, %xmm0
    00000035: 	movl	%r8d, %edx
    00000038: 	shrl	%edx
    0000003a: 	subl	$0x1, %edx
    0000003d: 	shlq	$0x4, %rdx
    00000041: 	leaq	0x10(%rcx,%rdx), %rdx
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp974:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	pxor	%xmm2, %xmm0
    0000005c: 	cmpq	%rdx, %rax
    0000005f: 	jne	.Ltmp974 # Offset: 95
    00000061: 	pextrw	$0x4, %xmm0, %edx
    00000066: 	pextrw	$0x0, %xmm0, %eax
    0000006b: 	pextrw	$0x1, %xmm0, %edi
    00000070: 	xorl	%edx, %eax
    00000072: 	pextrw	$0x5, %xmm0, %edx
    00000077: 	pextrw	$0x2, %xmm0, %r10d
    0000007d: 	xorl	%edx, %edi
    0000007f: 	pextrw	$0x6, %xmm0, %edx
    00000084: 	pextrw	$0x7, %xmm0, %r9d
    0000008a: 	xorl	%edx, %r10d
    0000008d: 	pextrw	$0x3, %xmm0, %edx
    00000092: 	xorl	%r9d, %edx
    00000095: 	movl	%r8d, %r9d
    00000098: 	andl	$-0x2, %r9d
    0000009c: 	testl	$0x80000001, %r8d
    000000a3: 	je	.Ltmp975 # Offset: 163
.Ltmp981:
    000000a5: 	movzwl	%dx, %edx
    000000a8: 	movzwl	%r10w, %r10d
    000000ac: 	movzwl	%di, %edi
    000000af: 	movzwl	%ax, %eax
    000000b2: 	shlq	$0x10, %rdx
    000000b6: 	movq	(%rcx,%r9,8), %xmm0
    000000bc: 	orq	%r10, %rdx
    000000bf: 	shlq	$0x10, %rdx
    000000c3: 	orq	%rdi, %rdx
    000000c6: 	shlq	$0x10, %rdx
    000000ca: 	orq	%rax, %rdx
    000000cd: 	movq	%rdx, %xmm3
    000000d2: 	pxor	%xmm3, %xmm0
    000000d6: 	pextrw	$0x0, %xmm0, %eax
    000000db: 	pextrw	$0x1, %xmm0, %edi
    000000e0: 	pextrw	$0x2, %xmm0, %r10d
    000000e6: 	pextrw	$0x3, %xmm0, %edx
.Ltmp975:
    000000eb: 	xorl	%r10d, %edi
    000000ee: 	shll	$0x2, %r8d
    000000f2: 	xorl	%edx, %edi
    000000f4: 	movl	%edi, %r10d
.Ltmp980:
    000000f7: 	cmpl	%r8d, %esi
    000000fa: 	jle	.Ltmp976 # Offset: 250
    00000100: 	movl	%esi, %r11d
    00000103: 	subl	%r8d, %r11d
    00000106: 	leal	-0x1(%r11), %edx
    0000010a: 	cmpl	$0x6, %edx
    0000010d: 	jbe	.Ltmp977 # Offset: 269
    0000010f: 	movslq	%r8d, %rdx
    00000112: 	pxor	%xmm0, %xmm0
    00000116: 	leaq	(%rcx,%rdx,2), %rdi
    0000011a: 	movl	%r11d, %edx
    0000011d: 	shrl	$0x3, %edx
    00000120: 	leal	-0x1(%rdx), %r9d
    00000124: 	leaq	0x10(%rdi), %rdx
    00000128: 	shlq	$0x4, %r9
    0000012c: 	addq	%rdx, %r9
    0000012f: 	jmp	.Ltmp978 # Offset: 303
    00000131: 	nopl	(%rax) # Size: 7
.Ltmp979:
    00000138: 	addq	$0x10, %rdx
.Ltmp978:
    0000013c: 	movdqu	(%rdi), %xmm1
    00000140: 	movq	%rdx, %rdi
    00000143: 	pxor	%xmm1, %xmm0
    00000147: 	cmpq	%r9, %rdx
    0000014a: 	jne	.Ltmp979 # Offset: 330
    0000014c: 	movdqa	%xmm0, %xmm1
    00000150: 	psrldq	$0x8, %xmm1
    00000155: 	pxor	%xmm1, %xmm0
    00000159: 	movdqa	%xmm0, %xmm1
    0000015d: 	psrldq	$0x4, %xmm1
    00000162: 	pxor	%xmm1, %xmm0
    00000166: 	movdqa	%xmm0, %xmm1
    0000016a: 	psrldq	$0x2, %xmm1
    0000016f: 	pxor	%xmm1, %xmm0
    00000173: 	pextrw	$0x0, %xmm0, %edx
    00000178: 	xorl	%edx, %eax
    0000017a: 	movl	%r11d, %edx
    0000017d: 	andl	$-0x8, %edx
    00000180: 	addl	%edx, %r8d
    00000183: 	cmpl	%r11d, %edx
    00000186: 	je	.Ltmp976 # Offset: 390
.Ltmp977:
    00000188: 	movslq	%r8d, %rdi
    0000018b: 	leaq	(%rdi,%rdi), %rdx
    0000018f: 	xorw	(%rcx,%rdi,2), %ax
    00000193: 	leal	0x1(%r8), %edi
    00000197: 	cmpl	%esi, %edi
    00000199: 	jge	.Ltmp976 # Offset: 409
    0000019b: 	leal	0x2(%r8), %edi
    0000019f: 	xorw	0x2(%rcx,%rdx), %ax
    000001a4: 	cmpl	%edi, %esi
    000001a6: 	jle	.Ltmp976 # Offset: 422
    000001a8: 	leal	0x3(%r8), %edi
    000001ac: 	xorw	0x4(%rcx,%rdx), %ax
    000001b1: 	cmpl	%edi, %esi
    000001b3: 	jle	.Ltmp976 # Offset: 435
    000001b5: 	leal	0x4(%r8), %edi
    000001b9: 	xorw	0x6(%rcx,%rdx), %ax
    000001be: 	cmpl	%edi, %esi
    000001c0: 	jle	.Ltmp976 # Offset: 448
    000001c2: 	leal	0x5(%r8), %edi
    000001c6: 	xorw	0x8(%rcx,%rdx), %ax
    000001cb: 	cmpl	%esi, %edi
    000001cd: 	jge	.Ltmp976 # Offset: 461
    000001cf: 	addl	$0x6, %r8d
    000001d3: 	xorw	0xa(%rcx,%rdx), %ax
    000001d8: 	cmpl	%esi, %r8d
    000001db: 	jge	.Ltmp976 # Offset: 475
    000001dd: 	xorw	0xc(%rcx,%rdx), %ax
.Ltmp976:
    000001e2: 	xorl	%r10d, %eax
    000001e5: 	retq # Offset: 485
    000001e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp972:
    000001f0: 	xorl	%r10d, %r10d
    000001f3: 	xorl	%r8d, %r8d
    000001f6: 	jmp	.Ltmp980 # Offset: 502
.Ltmp973:
    000001fb: 	xorl	%r9d, %r9d
    000001fe: 	xorl	%edx, %edx
    00000200: 	xorl	%r10d, %r10d
    00000203: 	xorl	%edi, %edi
    00000205: 	jmp	.Ltmp981 # Offset: 517
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor7ItET_PKS0_iS0_"

Binary Function "_Z8bit_xor8ItET_PKS0_iS0_" after disassembly {
  Number      : 147
  State       : disassembled
  Address     : 0x10430
  Size        : 0x181
  MaxSize     : 0x190
  Offset      : 0x10430
  Section     : .text
  Orc Section : .local.text._Z8bit_xor8ItET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0146:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r9d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x7, %esi
    0000000c: 	jle	.Ltmp982 # Offset: 12
    00000012: 	leal	-0x8(%rsi), %ecx
    00000015: 	pxor	%xmm0, %xmm0
    00000019: 	xorl	%eax, %eax
    0000001b: 	shrl	$0x3, %ecx
    0000001e: 	pinsrw	$0x0, %edx, %xmm0
    00000023: 	addl	$0x1, %ecx
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp983:
    00000030: 	movq	%rax, %rdx
    00000033: 	addq	$0x1, %rax
    00000037: 	shlq	$0x4, %rdx
    0000003b: 	movdqu	(%rdi,%rdx), %xmm1
    00000040: 	pxor	%xmm1, %xmm0
    00000044: 	cmpl	%eax, %ecx
    00000046: 	ja	.Ltmp983 # Offset: 70
    00000048: 	pextrw	$0x1, %xmm0, %edx
    0000004d: 	pextrw	$0x2, %xmm0, %esi
    00000052: 	pextrw	$0x0, %xmm0, %eax
    00000057: 	shll	$0x3, %ecx
    0000005a: 	xorl	%edx, %esi
    0000005c: 	pextrw	$0x3, %xmm0, %edx
    00000061: 	xorl	%edx, %esi
    00000063: 	pextrw	$0x4, %xmm0, %edx
    00000068: 	xorl	%edx, %esi
    0000006a: 	pextrw	$0x5, %xmm0, %edx
    0000006f: 	xorl	%edx, %esi
    00000071: 	pextrw	$0x6, %xmm0, %edx
    00000076: 	xorl	%edx, %esi
    00000078: 	pextrw	$0x7, %xmm0, %edx
    0000007d: 	xorl	%edx, %esi
.Ltmp988:
    0000007f: 	cmpl	%ecx, %r9d
    00000082: 	jle	.Ltmp984 # Offset: 130
    00000088: 	movl	%r9d, %r11d
    0000008b: 	subl	%ecx, %r11d
    0000008e: 	leal	-0x1(%r11), %edx
    00000092: 	cmpl	$0x6, %edx
    00000095: 	jbe	.Ltmp985 # Offset: 149
    00000097: 	movslq	%ecx, %rdx
    0000009a: 	pxor	%xmm0, %xmm0
    0000009e: 	leaq	(%rdi,%rdx,2), %r8
    000000a2: 	movl	%r11d, %edx
    000000a5: 	shrl	$0x3, %edx
    000000a8: 	leal	-0x1(%rdx), %r10d
    000000ac: 	leaq	0x10(%r8), %rdx
    000000b0: 	shlq	$0x4, %r10
    000000b4: 	addq	%rdx, %r10
    000000b7: 	jmp	.Ltmp986 # Offset: 183
    000000b9: 	nopl	(%rax) # Size: 7
.Ltmp987:
    000000c0: 	addq	$0x10, %rdx
.Ltmp986:
    000000c4: 	movdqu	(%r8), %xmm1
    000000c9: 	movq	%rdx, %r8
    000000cc: 	pxor	%xmm1, %xmm0
    000000d0: 	cmpq	%rdx, %r10
    000000d3: 	jne	.Ltmp987 # Offset: 211
    000000d5: 	movdqa	%xmm0, %xmm1
    000000d9: 	psrldq	$0x8, %xmm1
    000000de: 	pxor	%xmm1, %xmm0
    000000e2: 	movdqa	%xmm0, %xmm1
    000000e6: 	psrldq	$0x4, %xmm1
    000000eb: 	pxor	%xmm1, %xmm0
    000000ef: 	movdqa	%xmm0, %xmm1
    000000f3: 	psrldq	$0x2, %xmm1
    000000f8: 	pxor	%xmm1, %xmm0
    000000fc: 	pextrw	$0x0, %xmm0, %edx
    00000101: 	xorl	%edx, %eax
    00000103: 	movl	%r11d, %edx
    00000106: 	andl	$-0x8, %edx
    00000109: 	addl	%edx, %ecx
    0000010b: 	cmpl	%r11d, %edx
    0000010e: 	je	.Ltmp984 # Offset: 270
.Ltmp985:
    00000110: 	movslq	%ecx, %r8
    00000113: 	leaq	(%r8,%r8), %rdx
    00000117: 	xorw	(%rdi,%r8,2), %ax
    0000011c: 	leal	0x1(%rcx), %r8d
    00000120: 	cmpl	%r8d, %r9d
    00000123: 	jle	.Ltmp984 # Offset: 291
    00000125: 	leal	0x2(%rcx), %r8d
    00000129: 	xorw	0x2(%rdi,%rdx), %ax
    0000012e: 	cmpl	%r9d, %r8d
    00000131: 	jge	.Ltmp984 # Offset: 305
    00000133: 	leal	0x3(%rcx), %r8d
    00000137: 	xorw	0x4(%rdi,%rdx), %ax
    0000013c: 	cmpl	%r9d, %r8d
    0000013f: 	jge	.Ltmp984 # Offset: 319
    00000141: 	leal	0x4(%rcx), %r8d
    00000145: 	xorw	0x6(%rdi,%rdx), %ax
    0000014a: 	cmpl	%r9d, %r8d
    0000014d: 	jge	.Ltmp984 # Offset: 333
    0000014f: 	leal	0x5(%rcx), %r8d
    00000153: 	xorw	0x8(%rdi,%rdx), %ax
    00000158: 	cmpl	%r9d, %r8d
    0000015b: 	jge	.Ltmp984 # Offset: 347
    0000015d: 	addl	$0x6, %ecx
    00000160: 	xorw	0xa(%rdi,%rdx), %ax
    00000165: 	cmpl	%r9d, %ecx
    00000168: 	jge	.Ltmp984 # Offset: 360
    0000016a: 	xorw	0xc(%rdi,%rdx), %ax
.Ltmp984:
    0000016f: 	xorl	%esi, %eax
    00000171: 	retq # Offset: 369
    00000172: 	nopw	(%rax,%rax) # Size: 6
.Ltmp982:
    00000178: 	xorl	%esi, %esi
    0000017a: 	xorl	%ecx, %ecx
    0000017c: 	jmp	.Ltmp988 # Offset: 380
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor8ItET_PKS0_iS0_"

Binary Function "_Z10logic_and1ItEbPKT_ib" after disassembly {
  Number      : 148
  State       : disassembled
  Address     : 0x105c0
  Size        : 0x33
  MaxSize     : 0x40
  Offset      : 0x105c0
  Section     : .text
  Orc Section : .local.text._Z10logic_and1ItEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0147:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp989 # Offset: 8
    0000000a: 	testb	%dl, %dl
    0000000c: 	je	.Ltmp989 # Offset: 12
    0000000e: 	leal	-0x1(%rsi), %edx
    00000011: 	leaq	0x2(%rdi,%rdx,2), %rdx
.Ltmp991:
    00000016: 	cmpw	$0x0, (%rdi)
    0000001a: 	je	.Ltmp990 # Offset: 26
    0000001c: 	addq	$0x2, %rdi
    00000020: 	cmpq	%rdi, %rdx
    00000023: 	jne	.Ltmp991 # Offset: 35
    00000025: 	retq # Offset: 37
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp990:
    00000030: 	xorl	%eax, %eax
.Ltmp989:
    00000032: 	retq # Offset: 50
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and1ItEbPKT_ib"

Binary Function "_Z10logic_and2ItEbPKT_ib" after disassembly {
  Number      : 149
  State       : disassembled
  Address     : 0x10600
  Size        : 0x3e
  MaxSize     : 0x40
  Offset      : 0x10600
  Section     : .text
  Orc Section : .local.text._Z10logic_and2ItEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0148:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	leaq	(%rdi,%rsi,2), %rax
    0000000b: 	cmpq	%rax, %rdi
    0000000e: 	je	.Ltmp992 # Offset: 14
    00000010: 	testb	%dl, %dl
    00000012: 	jne	.Ltmp993 # Offset: 18
.Ltmp994:
    00000014: 	jmp	.Ltmp994 # Offset: 20
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp993:
    00000020: 	addq	$0x2, %rdi
    00000024: 	movzwl	-0x2(%rdi), %edx
    00000028: 	cmpq	%rdi, %rax
    0000002b: 	je	.Ltmp995 # Offset: 43
    0000002d: 	testw	%dx, %dx
    00000030: 	jne	.Ltmp993 # Offset: 48
    00000032: 	jmp	.Ltmp994 # Offset: 50
.Ltmp992:
    00000034: 	movl	%edx, %eax
    00000036: 	retq # Offset: 54
.Ltmp995:
    00000037: 	testw	%dx, %dx
    0000003a: 	setne	%al
    0000003d: 	retq # Offset: 61
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and2ItEbPKT_ib"

Binary Function "_Z10logic_and3ItEbPKT_ib" after disassembly {
  Number      : 150
  State       : disassembled
  Address     : 0x10640
  Size        : 0x6a
  MaxSize     : 0x70
  Offset      : 0x10640
  Section     : .text
  Orc Section : .local.text._Z10logic_and3ItEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0149:
    00000000: 	endbr64
    00000004: 	cmpl	$0x1, %esi
    00000007: 	jle	.Ltmp996 # Offset: 7
    00000009: 	xorl	%eax, %eax
    0000000b: 	testb	%dl, %dl
    0000000d: 	je	.Ltmp997 # Offset: 13
    0000000f: 	leal	-0x2(%rsi), %eax
    00000012: 	shrl	%eax
    00000014: 	leal	0x2(%rax), %r8d
    00000018: 	movl	$0x2, %eax
    0000001d: 	addq	%r8, %r8
.Ltmp999:
    00000020: 	cmpw	$0x0, -0x4(%rdi,%rax,2)
    00000026: 	je	.Ltmp998 # Offset: 38
    00000028: 	cmpw	$0x0, -0x2(%rdi,%rax,2)
    0000002e: 	je	.Ltmp998 # Offset: 46
    00000030: 	movslq	%eax, %rcx
    00000033: 	addq	$0x2, %rax
    00000037: 	cmpq	%r8, %rax
    0000003a: 	jne	.Ltmp999 # Offset: 58
    0000003c: 	cmpl	%ecx, %esi
    0000003e: 	jle	.Ltmp1000 # Offset: 62
.Ltmp1001:
    00000040: 	cmpw	$0x0, (%rdi,%rcx,2)
    00000045: 	je	.Ltmp998 # Offset: 69
    00000047: 	addq	$0x1, %rcx
    0000004b: 	cmpl	%ecx, %esi
    0000004d: 	jg	.Ltmp1001 # Offset: 77
    0000004f: 	movl	$0x1, %eax
    00000054: 	retq # Offset: 84
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp998:
    00000058: 	xorl	%eax, %eax
    0000005a: 	retq # Offset: 90
.Ltmp1000:
    0000005b: 	movl	%edx, %eax
.Ltmp997:
    0000005d: 	retq # Offset: 93
    0000005e: 	nop # Size: 2
.Ltmp996:
    00000060: 	jne	.Ltmp1000 # Offset: 96
    00000062: 	testb	%dl, %dl
    00000064: 	je	.Ltmp998 # Offset: 100
    00000066: 	xorl	%ecx, %ecx
    00000068: 	jmp	.Ltmp1001 # Offset: 104
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and3ItEbPKT_ib"

Binary Function "_Z10logic_and4ItEbPKT_ib" after disassembly {
  Number      : 151
  State       : disassembled
  Address     : 0x106b0
  Size        : 0x7a
  MaxSize     : 0x80
  Offset      : 0x106b0
  Section     : .text
  Orc Section : .local.text._Z10logic_and4ItEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0150:
    00000000: 	endbr64
    00000004: 	cmpl	$0x3, %esi
    00000007: 	jle	.Ltmp1002 # Offset: 7
    00000009: 	leal	-0x3(%rsi), %r8d
    0000000d: 	xorl	%eax, %eax
    0000000f: 	testb	%dl, %dl
    00000011: 	je	.Ltmp1003 # Offset: 17
    00000013: 	movq	%rdi, %rax
    00000016: 	xorl	%ecx, %ecx
.Ltmp1005:
    00000018: 	cmpw	$0x0, (%rax)
    0000001c: 	je	.Ltmp1004 # Offset: 28
    0000001e: 	cmpw	$0x0, 0x2(%rax)
    00000023: 	je	.Ltmp1004 # Offset: 35
    00000025: 	cmpw	$0x0, 0x4(%rax)
    0000002a: 	je	.Ltmp1004 # Offset: 42
    0000002c: 	cmpw	$0x0, 0x6(%rax)
    00000031: 	je	.Ltmp1004 # Offset: 49
    00000033: 	addl	$0x4, %ecx
    00000036: 	addq	$0x8, %rax
    0000003a: 	cmpl	%r8d, %ecx
    0000003d: 	jl	.Ltmp1005 # Offset: 61
    0000003f: 	cmpl	%ecx, %esi
    00000041: 	jg	.Ltmp1006 # Offset: 65
.Ltmp1007:
    00000043: 	movl	%edx, %eax
.Ltmp1003:
    00000045: 	retq # Offset: 69
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1004:
    00000050: 	xorl	%eax, %eax
    00000052: 	retq # Offset: 82
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1002:
    00000058: 	testl	%esi, %esi
    0000005a: 	jle	.Ltmp1007 # Offset: 90
    0000005c: 	testb	%dl, %dl
    0000005e: 	je	.Ltmp1004 # Offset: 94
    00000060: 	xorl	%ecx, %ecx
.Ltmp1006:
    00000062: 	movslq	%ecx, %rax
.Ltmp1008:
    00000065: 	cmpw	$0x0, (%rdi,%rax,2)
    0000006a: 	je	.Ltmp1004 # Offset: 106
    0000006c: 	addq	$0x1, %rax
    00000070: 	cmpl	%eax, %esi
    00000072: 	jg	.Ltmp1008 # Offset: 114
    00000074: 	movl	$0x1, %eax
    00000079: 	retq # Offset: 121
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and4ItEbPKT_ib"

Binary Function "_Z10logic_and5ItEbPKT_ib" after disassembly {
  Number      : 152
  State       : disassembled
  Address     : 0x10730
  Size        : 0x8c
  MaxSize     : 0x90
  Offset      : 0x10730
  Section     : .text
  Orc Section : .local.text._Z10logic_and5ItEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0151:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x1, %esi
    0000000c: 	jle	.Ltmp1009 # Offset: 12
    0000000e: 	leal	-0x2(%rsi), %r9d
    00000012: 	movq	%rdi, %rcx
    00000015: 	shrl	%r9d
    00000018: 	movl	%r9d, %edi
    0000001b: 	leaq	0x4(%r8,%rdi,4), %rdi
.Ltmp1012:
    00000020: 	testb	%dl, %dl
    00000022: 	je	.Ltmp1010 # Offset: 34
    00000024: 	cmpw	$0x0, (%rcx)
    00000028: 	setne	%dl
.Ltmp1010:
    0000002b: 	testb	%al, %al
    0000002d: 	je	.Ltmp1011 # Offset: 45
    0000002f: 	cmpw	$0x0, 0x2(%rcx)
    00000034: 	setne	%al
.Ltmp1011:
    00000037: 	addq	$0x4, %rcx
    0000003b: 	cmpq	%rdi, %rcx
    0000003e: 	jne	.Ltmp1012 # Offset: 62
    00000040: 	leal	0x2(%r9,%r9), %ecx
.Ltmp1016:
    00000045: 	cmpl	%ecx, %esi
    00000047: 	jle	.Ltmp1013 # Offset: 71
    00000049: 	testb	%dl, %dl
    0000004b: 	je	.Ltmp1014 # Offset: 75
    0000004d: 	subl	$0x1, %esi
    00000050: 	movslq	%ecx, %rdi
    00000053: 	subl	%ecx, %esi
    00000055: 	leaq	(%r8,%rdi,2), %rdx
    00000059: 	leaq	(%rsi,%rdi), %rcx
    0000005d: 	leaq	0x2(%r8,%rcx,2), %rcx
.Ltmp1015:
    00000062: 	cmpw	$0x0, (%rdx)
    00000066: 	je	.Ltmp1014 # Offset: 102
    00000068: 	addq	$0x2, %rdx
    0000006c: 	cmpq	%rcx, %rdx
    0000006f: 	jne	.Ltmp1015 # Offset: 111
    00000071: 	retq # Offset: 113
    00000072: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1014:
    00000078: 	xorl	%eax, %eax
    0000007a: 	retq # Offset: 122
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1013:
    00000080: 	andl	%edx, %eax
    00000082: 	retq # Offset: 130
    00000083: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1009:
    00000088: 	xorl	%ecx, %ecx
    0000008a: 	jmp	.Ltmp1016 # Offset: 138
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and5ItEbPKT_ib"

Binary Function "_Z10logic_and6ItEbPKT_ib" after disassembly {
  Number      : 153
  State       : disassembled
  Address     : 0x107c0
  Size        : 0xe4
  MaxSize     : 0xf0
  Offset      : 0x107c0
  Section     : .text
  Orc Section : .local.text._Z10logic_and6ItEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0152:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movl	%esi, %r11d
    00000008: 	pushq	%rbx
    00000009: 	movq	%rdi, %rbx
    0000000c: 	movl	%edx, %edi
    0000000e: 	cmpl	$0x3, %esi
    00000011: 	jle	.Ltmp1017 # Offset: 17
    00000017: 	leal	-0x4(%rsi), %ebp
    0000001a: 	movq	%rbx, %rax
    0000001d: 	movl	%edx, %esi
    0000001f: 	xorl	%r8d, %r8d
    00000022: 	shrl	$0x2, %ebp
    00000025: 	movl	%ebp, %ecx
    00000027: 	leaq	0x8(%rbx,%rcx,8), %r9
    0000002c: 	movl	%edx, %ecx
    0000002e: 	nop # Size: 2
.Ltmp1022:
    00000030: 	testb	%dil, %dil
    00000033: 	je	.Ltmp1018 # Offset: 51
    00000035: 	cmpw	$0x0, (%rax)
    00000039: 	setne	%dil
.Ltmp1018:
    0000003d: 	testb	%dl, %dl
    0000003f: 	je	.Ltmp1019 # Offset: 63
    00000041: 	cmpw	$0x0, 0x2(%rax)
    00000046: 	setne	%dl
.Ltmp1019:
    00000049: 	testb	%cl, %cl
    0000004b: 	je	.Ltmp1020 # Offset: 75
    0000004d: 	cmpw	$0x0, 0x4(%rax)
    00000052: 	setne	%cl
.Ltmp1020:
    00000055: 	xorl	%r10d, %r10d
    00000058: 	testb	%sil, %sil
    0000005b: 	je	.Ltmp1021 # Offset: 91
    0000005d: 	cmpw	$0x0, 0x6(%rax)
    00000062: 	movl	%r8d, %r10d
    00000065: 	cmovnel	%ecx, %r10d
    00000069: 	cmovel	%r8d, %esi
.Ltmp1021:
    0000006d: 	addq	$0x8, %rax
    00000071: 	cmpq	%r9, %rax
    00000074: 	jne	.Ltmp1022 # Offset: 116
    00000076: 	leal	0x4(,%rbp,4), %ecx
    0000007d: 	cmpl	%ecx, %r11d
    00000080: 	jle	.Ltmp1023 # Offset: 128
.Ltmp1026:
    00000082: 	testb	%dil, %dil
    00000085: 	je	.Ltmp1024 # Offset: 133
    00000087: 	subl	$0x1, %r11d
    0000008b: 	movslq	%ecx, %rsi
    0000008e: 	subl	%ecx, %r11d
    00000091: 	leaq	(%rbx,%rsi,2), %rax
    00000095: 	leaq	(%r11,%rsi), %rcx
    00000099: 	leaq	0x2(%rbx,%rcx,2), %rcx
.Ltmp1025:
    0000009e: 	cmpw	$0x0, (%rax)
    000000a2: 	je	.Ltmp1024 # Offset: 162
    000000a4: 	addq	$0x2, %rax
    000000a8: 	cmpq	%rax, %rcx
    000000ab: 	jne	.Ltmp1025 # Offset: 171
.Ltmp1027:
    000000ad: 	xorl	%eax, %eax
    000000af: 	testb	%dl, %dl
    000000b1: 	popq	%rbx
    000000b2: 	popq	%rbp
    000000b3: 	cmovel	%eax, %r10d
    000000b7: 	movl	%r10d, %eax
    000000ba: 	retq # Offset: 186
    000000bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1024:
    000000c0: 	xorl	%r10d, %r10d
    000000c3: 	popq	%rbx
    000000c4: 	popq	%rbp
    000000c5: 	movl	%r10d, %eax
    000000c8: 	retq # Offset: 200
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp1017:
    000000d0: 	xorl	%ecx, %ecx
    000000d2: 	movl	%edx, %r10d
    000000d5: 	cmpl	%ecx, %r11d
    000000d8: 	jg	.Ltmp1026 # Offset: 216
    000000da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1023:
    000000e0: 	andl	%edi, %edx
    000000e2: 	jmp	.Ltmp1027 # Offset: 226
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and6ItEbPKT_ib"

Binary Function "_Z10logic_and7ItEbPKT_ib" after disassembly {
  Number      : 154
  State       : disassembled
  Address     : 0x108b0
  Size        : 0x130
  MaxSize     : 0x130
  Offset      : 0x108b0
  Section     : .text
  Orc Section : .local.text._Z10logic_and7ItEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0153:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movl	%edx, %eax
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movl	%esi, %ebp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	cmpl	$0x3, %esi
    00000016: 	jle	.Ltmp1028 # Offset: 22
    0000001c: 	leal	-0x4(%rsi), %r14d
    00000020: 	movq	%rdi, %rcx
    00000023: 	xorl	%r10d, %r10d
    00000026: 	shrl	$0x2, %r14d
    0000002a: 	movl	%r14d, %esi
    0000002d: 	leaq	0x8(%rdi,%rsi,8), %r13
    00000032: 	movl	%edx, %edi
    00000034: 	movl	%edx, %esi
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1033:
    00000040: 	movl	%eax, %r8d
    00000043: 	testb	%al, %al
    00000045: 	je	.Ltmp1029 # Offset: 69
    00000047: 	cmpw	$0x1, (%rcx)
    0000004b: 	sbbl	%eax, %eax
    0000004d: 	addl	$0x1, %eax
    00000050: 	cmpw	$0x0, (%rcx)
    00000054: 	cmovel	%r10d, %r8d
.Ltmp1029:
    00000058: 	movl	%edx, %r9d
    0000005b: 	testb	%dl, %dl
    0000005d: 	je	.Ltmp1030 # Offset: 93
    0000005f: 	cmpw	$0x1, 0x2(%rcx)
    00000064: 	sbbl	%edx, %edx
    00000066: 	addl	$0x1, %edx
    00000069: 	cmpw	$0x0, 0x2(%rcx)
    0000006e: 	cmovel	%r10d, %r9d
.Ltmp1030:
    00000072: 	movl	%esi, %r12d
    00000075: 	testb	%sil, %sil
    00000078: 	je	.Ltmp1031 # Offset: 120
    0000007a: 	cmpw	$0x1, 0x4(%rcx)
    0000007f: 	sbbl	%esi, %esi
    00000081: 	addl	$0x1, %esi
    00000084: 	cmpw	$0x0, 0x4(%rcx)
    00000089: 	cmovel	%r10d, %r12d
.Ltmp1031:
    0000008d: 	movl	%edi, %r11d
    00000090: 	testb	%dil, %dil
    00000093: 	je	.Ltmp1032 # Offset: 147
    00000095: 	cmpw	$0x1, 0x6(%rcx)
    0000009a: 	sbbl	%edi, %edi
    0000009c: 	addl	$0x1, %edi
    0000009f: 	cmpw	$0x0, 0x6(%rcx)
    000000a4: 	cmovel	%r10d, %r11d
.Ltmp1032:
    000000a8: 	addq	$0x8, %rcx
    000000ac: 	cmpq	%rcx, %r13
    000000af: 	jne	.Ltmp1033 # Offset: 175
    000000b1: 	leal	0x4(,%r14,4), %ecx
.Ltmp1038:
    000000b9: 	cmpl	%ecx, %ebp
    000000bb: 	jle	.Ltmp1034 # Offset: 187
    000000bd: 	subl	$0x1, %ebp
    000000c0: 	movslq	%ecx, %rsi
    000000c3: 	subl	%ecx, %ebp
    000000c5: 	leaq	(%rbx,%rsi,2), %rdx
    000000c9: 	addq	%rsi, %rbp
    000000cc: 	xorl	%esi, %esi
    000000ce: 	leaq	0x2(%rbx,%rbp,2), %rcx
    000000d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1036:
    000000d8: 	movl	%eax, %r8d
    000000db: 	testb	%al, %al
    000000dd: 	je	.Ltmp1035 # Offset: 221
    000000df: 	cmpw	$0x1, (%rdx)
    000000e3: 	sbbl	%eax, %eax
    000000e5: 	addl	$0x1, %eax
    000000e8: 	cmpw	$0x0, (%rdx)
    000000ec: 	cmovel	%esi, %r8d
.Ltmp1035:
    000000f0: 	addq	$0x2, %rdx
    000000f4: 	cmpq	%rdx, %rcx
    000000f7: 	jne	.Ltmp1036 # Offset: 247
.Ltmp1034:
    000000f9: 	testb	%r8b, %r8b
    000000fc: 	je	.Ltmp1037 # Offset: 252
    000000fe: 	xorl	%r8d, %r8d
    00000101: 	testb	%r9b, %r9b
    00000104: 	je	.Ltmp1037 # Offset: 260
    00000106: 	testb	%r12b, %r12b
    00000109: 	cmovnel	%r11d, %r8d
.Ltmp1037:
    0000010d: 	popq	%rbx
    0000010e: 	movl	%r8d, %eax
    00000111: 	popq	%rbp
    00000112: 	popq	%r12
    00000114: 	popq	%r13
    00000116: 	popq	%r14
    00000118: 	retq # Offset: 280
    00000119: 	nopl	(%rax) # Size: 7
.Ltmp1028:
    00000120: 	movl	%edx, %r9d
    00000123: 	movl	%edx, %r11d
    00000126: 	movl	%edx, %r12d
    00000129: 	movl	%edx, %r8d
    0000012c: 	xorl	%ecx, %ecx
    0000012e: 	jmp	.Ltmp1038 # Offset: 302
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and7ItEbPKT_ib"

Binary Function "_Z10logic_and8ItEbPKT_ib" after disassembly {
  Number      : 155
  State       : disassembled
  Address     : 0x109e0
  Size        : 0x229
  MaxSize     : 0x230
  Offset      : 0x109e0
  Section     : .text
  Orc Section : .local.text._Z10logic_and8ItEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0154:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %eax
    00000008: 	movl	%edx, %ecx
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbp
    00000011: 	pushq	%rbx
    00000012: 	movq	%rdi, -0x10(%rsp)
    00000017: 	movl	%esi, -0x8(%rsp)
    0000001b: 	cmpl	$0x7, %esi
    0000001e: 	jle	.Ltmp1039 # Offset: 30
    00000024: 	leal	-0x8(%rsi), %esi
    00000027: 	movq	%rdi, %rdx
    0000002a: 	movl	%eax, %r12d
    0000002d: 	movl	%eax, %ebp
    0000002f: 	shrl	$0x3, %esi
    00000032: 	movl	%eax, %r10d
    00000035: 	movl	%eax, %r9d
    00000038: 	movl	%esi, -0x4(%rsp)
    0000003c: 	shlq	$0x4, %rsi
    00000040: 	leaq	0x10(%rdi,%rsi), %rbx
    00000045: 	xorl	%edi, %edi
    00000047: 	movl	%eax, %esi
    00000049: 	movq	%rbx, -0x18(%rsp)
    0000004e: 	movl	%eax, %ebx
.Ltmp1048:
    00000050: 	movl	%ecx, %r14d
    00000053: 	testb	%cl, %cl
    00000055: 	je	.Ltmp1040 # Offset: 85
    00000057: 	cmpw	$0x1, (%rdx)
    0000005b: 	sbbl	%ecx, %ecx
    0000005d: 	addl	$0x1, %ecx
    00000060: 	cmpw	$0x0, (%rdx)
    00000064: 	cmovel	%edi, %r14d
.Ltmp1040:
    00000068: 	movl	%eax, %r11d
    0000006b: 	testb	%al, %al
    0000006d: 	je	.Ltmp1041 # Offset: 109
    0000006f: 	cmpw	$0x1, 0x2(%rdx)
    00000074: 	sbbl	%eax, %eax
    00000076: 	addl	$0x1, %eax
    00000079: 	cmpw	$0x0, 0x2(%rdx)
    0000007e: 	cmovel	%edi, %r11d
.Ltmp1041:
    00000082: 	movl	%r9d, %r15d
    00000085: 	testb	%r9b, %r9b
    00000088: 	je	.Ltmp1042 # Offset: 136
    0000008a: 	cmpw	$0x1, 0x4(%rdx)
    0000008f: 	sbbl	%r9d, %r9d
    00000092: 	addl	$0x1, %r9d
    00000096: 	cmpw	$0x0, 0x4(%rdx)
    0000009b: 	cmovel	%edi, %r15d
.Ltmp1042:
    0000009f: 	movb	%r10b, -0x1a(%rsp)
    000000a4: 	movl	%r10d, %r8d
    000000a7: 	testb	%r10b, %r10b
    000000aa: 	je	.Ltmp1043 # Offset: 170
    000000ac: 	cmpw	$0x1, 0x6(%rdx)
    000000b1: 	sbbl	%r10d, %r10d
    000000b4: 	addl	$0x1, %r10d
    000000b8: 	cmpw	$0x0, 0x6(%rdx)
    000000bd: 	cmovel	%edi, %r8d
    000000c1: 	movb	%r8b, -0x1a(%rsp)
.Ltmp1043:
    000000c6: 	movb	%sil, -0x1c(%rsp)
    000000cb: 	movl	%esi, %r8d
    000000ce: 	testb	%sil, %sil
    000000d1: 	je	.Ltmp1044 # Offset: 209
    000000d3: 	cmpw	$0x1, 0x8(%rdx)
    000000d8: 	sbbl	%esi, %esi
    000000da: 	addl	$0x1, %esi
    000000dd: 	cmpw	$0x0, 0x8(%rdx)
    000000e2: 	cmovel	%edi, %r8d
    000000e6: 	movb	%r8b, -0x1c(%rsp)
.Ltmp1044:
    000000eb: 	movl	%ebx, %r13d
    000000ee: 	testb	%bl, %bl
    000000f0: 	je	.Ltmp1045 # Offset: 240
    000000f2: 	cmpw	$0x1, 0xa(%rdx)
    000000f7: 	sbbl	%ebx, %ebx
    000000f9: 	addl	$0x1, %ebx
    000000fc: 	cmpw	$0x0, 0xa(%rdx)
    00000101: 	cmovel	%edi, %r13d
.Ltmp1045:
    00000105: 	movb	%bpl, -0x1b(%rsp)
    0000010a: 	movl	%ebp, %r8d
    0000010d: 	testb	%bpl, %bpl
    00000110: 	je	.Ltmp1046 # Offset: 272
    00000112: 	cmpw	$0x1, 0xc(%rdx)
    00000117: 	sbbl	%ebp, %ebp
    00000119: 	addl	$0x1, %ebp
    0000011c: 	cmpw	$0x0, 0xc(%rdx)
    00000121: 	cmovel	%edi, %r8d
    00000125: 	movb	%r8b, -0x1b(%rsp)
.Ltmp1046:
    0000012a: 	movb	%r12b, -0x19(%rsp)
    0000012f: 	movl	%r12d, %r8d
    00000132: 	testb	%r12b, %r12b
    00000135: 	je	.Ltmp1047 # Offset: 309
    00000137: 	cmpw	$0x1, 0xe(%rdx)
    0000013c: 	sbbl	%r12d, %r12d
    0000013f: 	addl	$0x1, %r12d
    00000143: 	cmpw	$0x0, 0xe(%rdx)
    00000148: 	cmovel	%edi, %r8d
    0000014c: 	movb	%r8b, -0x19(%rsp)
.Ltmp1047:
    00000151: 	addq	$0x10, %rdx
    00000155: 	cmpq	%rdx, -0x18(%rsp)
    0000015a: 	jne	.Ltmp1048 # Offset: 346
    00000160: 	movl	-0x4(%rsp), %eax
    00000164: 	movzbl	-0x1c(%rsp), %r8d
    0000016a: 	movl	%r14d, %esi
    0000016d: 	movl	%r11d, %r14d
    00000170: 	leal	0x8(,%rax,8), %edi
.Ltmp1055:
    00000177: 	movl	-0x8(%rsp), %ebx
    0000017b: 	cmpl	%ebx, %edi
    0000017d: 	jge	.Ltmp1049 # Offset: 381
    0000017f: 	subl	$0x1, %ebx
    00000182: 	movslq	%edi, %rsi
    00000185: 	movq	-0x10(%rsp), %r11
    0000018a: 	movl	%ebx, %edx
    0000018c: 	subl	%edi, %edx
    0000018e: 	leaq	(%r11,%rsi,2), %rax
    00000192: 	xorl	%edi, %edi
    00000194: 	addq	%rsi, %rdx
    00000197: 	leaq	0x2(%r11,%rdx,2), %rdx
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp1051:
    000001a0: 	movl	%ecx, %esi
    000001a2: 	testb	%cl, %cl
    000001a4: 	je	.Ltmp1050 # Offset: 420
    000001a6: 	cmpw	$0x1, (%rax)
    000001aa: 	sbbl	%ecx, %ecx
    000001ac: 	addl	$0x1, %ecx
    000001af: 	cmpw	$0x0, (%rax)
    000001b3: 	cmovel	%edi, %esi
.Ltmp1050:
    000001b6: 	addq	$0x2, %rax
    000001ba: 	cmpq	%rax, %rdx
    000001bd: 	jne	.Ltmp1051 # Offset: 445
.Ltmp1049:
    000001bf: 	testb	%sil, %sil
    000001c2: 	je	.Ltmp1052 # Offset: 450
    000001c4: 	xorl	%esi, %esi
    000001c6: 	testb	%r14b, %r14b
    000001c9: 	jne	.Ltmp1053 # Offset: 457
.Ltmp1052:
    000001cb: 	testb	%r8b, %r8b
    000001ce: 	je	.Ltmp1054 # Offset: 462
    000001d0: 	xorl	%r8d, %r8d
    000001d3: 	testb	%r13b, %r13b
    000001d6: 	je	.Ltmp1054 # Offset: 470
    000001d8: 	cmpb	$0x0, -0x1b(%rsp)
    000001dd: 	cmovnel	%esi, %r8d
.Ltmp1054:
    000001e1: 	popq	%rbx
    000001e2: 	movl	%r8d, %eax
    000001e5: 	popq	%rbp
    000001e6: 	popq	%r12
    000001e8: 	popq	%r13
    000001ea: 	popq	%r14
    000001ec: 	popq	%r15
    000001ee: 	retq # Offset: 494
    000001ef: 	nop # Size: 1
.Ltmp1053:
    000001f0: 	testb	%r15b, %r15b
    000001f3: 	je	.Ltmp1052 # Offset: 499
    000001f5: 	movzbl	-0x19(%rsp), %eax
    000001fa: 	cmpb	$0x0, -0x1a(%rsp)
    000001ff: 	cmovnel	%eax, %esi
    00000202: 	jmp	.Ltmp1052 # Offset: 514
    00000204: 	nopl	(%rax) # Size: 4
.Ltmp1039:
    00000208: 	movb	%dl, -0x19(%rsp)
    0000020c: 	movl	%edx, %esi
    0000020e: 	movl	%edx, %r13d
    00000211: 	movl	%edx, %r15d
    00000214: 	movb	%dl, -0x1b(%rsp)
    00000218: 	movl	%edx, %r14d
    0000021b: 	movl	%edx, %r8d
    0000021e: 	xorl	%edi, %edi
    00000220: 	movb	%dl, -0x1a(%rsp)
    00000224: 	jmp	.Ltmp1055 # Offset: 548
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and8ItEbPKT_ib"

Binary Function "_Z9logic_or1ItEbPKT_ib" after disassembly {
  Number      : 156
  State       : disassembled
  Address     : 0x10c10
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x10c10
  Section     : .text
  Orc Section : .local.text._Z9logic_or1ItEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0155:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp1056 # Offset: 8
    0000000a: 	leal	-0x1(%rsi), %edx
    0000000d: 	leaq	0x2(%rdi,%rdx,2), %rcx
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1057:
    00000018: 	cmpw	$0x0, (%rdi)
    0000001c: 	setne	%dl
    0000001f: 	addq	$0x2, %rdi
    00000023: 	orl	%edx, %eax
    00000025: 	cmpq	%rdi, %rcx
    00000028: 	jne	.Ltmp1057 # Offset: 40
.Ltmp1056:
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or1ItEbPKT_ib"

Binary Function "_Z12logic_or_optItEbPKT_ib" after disassembly {
  Number      : 157
  State       : disassembled
  Address     : 0x10c40
  Size        : 0x43
  MaxSize     : 0x50
  Offset      : 0x10c40
  Section     : .text
  Orc Section : .local.text._Z12logic_or_optItEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0156:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp1058 # Offset: 6
    00000008: 	cmpb	$0x1, %dl
    0000000b: 	je	.Ltmp1058 # Offset: 11
    0000000d: 	movl	$0x1, %eax
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1059:
    00000018: 	movzwl	-0x2(%rdi,%rax,2), %edx
    0000001d: 	cmpl	%eax, %esi
    0000001f: 	setg	%r8b
    00000023: 	testw	%dx, %dx
    00000026: 	sete	%cl
    00000029: 	addq	$0x1, %rax
    0000002d: 	testb	%cl, %r8b
    00000030: 	jne	.Ltmp1059 # Offset: 48
    00000032: 	testw	%dx, %dx
    00000035: 	setne	%al
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp1058:
    00000040: 	movl	%edx, %eax
    00000042: 	retq # Offset: 66
DWARF CFI Instructions:
    <empty>
End of Function "_Z12logic_or_optItEbPKT_ib"

Binary Function "_Z9logic_or2ItEbPKT_ib" after disassembly {
  Number      : 158
  State       : disassembled
  Address     : 0x10c90
  Size        : 0x87
  MaxSize     : 0x90
  Offset      : 0x10c90
  Section     : .text
  Orc Section : .local.text._Z9logic_or2ItEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0157:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movl	%edx, %r8d
    0000000a: 	leaq	(%rdi,%rsi,2), %rcx
    0000000e: 	cmpq	%rcx, %rdi
    00000011: 	jne	.Ltmp1060 # Offset: 17
    00000013: 	jmp	.Ltmp1061 # Offset: 19
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp1066:
    00000018: 	testb	%r8b, %r8b
    0000001b: 	jne	.Ltmp1062 # Offset: 27
.Ltmp1064:
    0000001d: 	cmpq	%rax, %rcx
    00000020: 	je	.Ltmp1063 # Offset: 32
    00000022: 	addq	$0x2, %rax
    00000026: 	cmpw	$0x0, -0x2(%rax)
    0000002b: 	je	.Ltmp1064 # Offset: 43
.Ltmp1069:
    0000002d: 	movq	%rax, %rdi
    00000030: 	movl	$0x1, %r8d
    00000036: 	cmpq	%rdi, %rcx
    00000039: 	je	.Ltmp1065 # Offset: 57
.Ltmp1060:
    0000003b: 	cmpw	$0x0, (%rdi)
    0000003f: 	leaq	0x2(%rdi), %rax
    00000043: 	je	.Ltmp1066 # Offset: 67
.Ltmp1068:
    00000045: 	cmpq	%rax, %rcx
    00000048: 	je	.Ltmp1065 # Offset: 72
    0000004a: 	leaq	0x2(%rax), %rdi
    0000004e: 	movl	$0x1, %r8d
    00000054: 	cmpq	%rdi, %rcx
    00000057: 	jne	.Ltmp1060 # Offset: 87
.Ltmp1065:
    00000059: 	movl	$0x1, %eax
    0000005e: 	retq # Offset: 94
    0000005f: 	nop # Size: 1
.Ltmp1062:
    00000060: 	cmpq	%rax, %rcx
    00000063: 	je	.Ltmp1067 # Offset: 99
    00000065: 	cmpw	$0x0, 0x2(%rdi)
    0000006a: 	leaq	0x4(%rdi), %rax
    0000006e: 	jne	.Ltmp1068 # Offset: 110
    00000070: 	jmp	.Ltmp1069 # Offset: 112
    00000072: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1063:
    00000078: 	xorl	%eax, %eax
    0000007a: 	retq # Offset: 122
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1061:
    00000080: 	movl	%edx, %eax
    00000082: 	retq # Offset: 130
.Ltmp1067:
    00000083: 	movl	%r8d, %eax
    00000086: 	retq # Offset: 134
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or2ItEbPKT_ib"

Binary Function "_Z9logic_or3ItEbPKT_ib" after disassembly {
  Number      : 159
  State       : disassembled
  Address     : 0x10d20
  Size        : 0x84
  MaxSize     : 0x90
  Offset      : 0x10d20
  Section     : .text
  Orc Section : .local.text._Z9logic_or3ItEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0158:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%edx, %eax
    00000009: 	movl	%esi, %edi
    0000000b: 	cmpl	$0x1, %esi
    0000000e: 	jle	.Ltmp1070 # Offset: 14
    00000010: 	leal	-0x2(%rsi), %r8d
    00000014: 	movq	%r9, %rcx
    00000017: 	shrl	%r8d
    0000001a: 	movl	%r8d, %edx
    0000001d: 	leaq	0x4(%r9,%rdx,4), %rsi
    00000022: 	jmp	.Ltmp1071 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1073:
    00000028: 	addq	$0x4, %rcx
    0000002c: 	cmpq	%rcx, %rsi
    0000002f: 	je	.Ltmp1072 # Offset: 47
.Ltmp1071:
    00000031: 	cmpw	$0x0, (%rcx)
    00000035: 	setne	%dl
    00000038: 	orb	%dl, %al
    0000003a: 	jne	.Ltmp1073 # Offset: 58
    0000003c: 	cmpw	$0x0, 0x2(%rcx)
    00000041: 	setne	%al
    00000044: 	addq	$0x4, %rcx
    00000048: 	cmpq	%rcx, %rsi
    0000004b: 	jne	.Ltmp1071 # Offset: 75
.Ltmp1072:
    0000004d: 	leal	0x2(%r8,%r8), %edx
.Ltmp1075:
    00000052: 	cmpl	%edx, %edi
    00000054: 	jle	.Ltmp1074 # Offset: 84
    00000056: 	movslq	%edx, %rcx
    00000059: 	cmpw	$0x0, (%r9,%rcx,2)
    0000005f: 	leaq	(%rcx,%rcx), %rsi
    00000063: 	setne	%cl
    00000066: 	addl	$0x1, %edx
    00000069: 	orl	%ecx, %eax
    0000006b: 	cmpl	%edx, %edi
    0000006d: 	jle	.Ltmp1074 # Offset: 109
    0000006f: 	cmpw	$0x0, 0x2(%r9,%rsi)
    00000076: 	setne	%dl
    00000079: 	orl	%edx, %eax
.Ltmp1074:
    0000007b: 	retq # Offset: 123
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp1070:
    00000080: 	xorl	%edx, %edx
    00000082: 	jmp	.Ltmp1075 # Offset: 130
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or3ItEbPKT_ib"

Binary Function "_Z9logic_or4ItEbPKT_ib" after disassembly {
  Number      : 160
  State       : disassembled
  Address     : 0x10db0
  Size        : 0xc4
  MaxSize     : 0xd0
  Offset      : 0x10db0
  Section     : .text
  Orc Section : .local.text._Z9logic_or4ItEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0159:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	cmpl	$0x3, %esi
    00000009: 	jle	.Ltmp1076 # Offset: 9
    0000000f: 	leal	-0x4(%rsi), %r8d
    00000013: 	movq	%rdi, %rcx
    00000016: 	shrl	$0x2, %r8d
    0000001a: 	movl	%r8d, %edx
    0000001d: 	leaq	0x8(%rdi,%rdx,8), %rdx
    00000022: 	jmp	.Ltmp1077 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1080:
    00000028: 	testb	%al, %al
    0000002a: 	jne	.Ltmp1078 # Offset: 42
    0000002c: 	cmpw	$0x0, 0x2(%rcx)
    00000031: 	movl	$0x1, %eax
    00000036: 	jne	.Ltmp1078 # Offset: 54
    00000038: 	cmpw	$0x0, 0x4(%rcx)
    0000003d: 	jne	.Ltmp1078 # Offset: 61
    0000003f: 	cmpw	$0x0, 0x6(%rcx)
    00000044: 	setne	%al
.Ltmp1078:
    00000047: 	addq	$0x8, %rcx
    0000004b: 	cmpq	%rcx, %rdx
    0000004e: 	je	.Ltmp1079 # Offset: 78
.Ltmp1077:
    00000050: 	cmpw	$0x0, (%rcx)
    00000054: 	je	.Ltmp1080 # Offset: 84
    00000056: 	addq	$0x8, %rcx
    0000005a: 	movl	$0x1, %eax
    0000005f: 	cmpq	%rcx, %rdx
    00000062: 	jne	.Ltmp1077 # Offset: 98
.Ltmp1079:
    00000064: 	leal	0x4(,%r8,4), %edx
.Ltmp1082:
    0000006c: 	cmpl	%edx, %esi
    0000006e: 	jle	.Ltmp1081 # Offset: 110
    00000070: 	movslq	%edx, %rcx
    00000073: 	cmpw	$0x0, (%rdi,%rcx,2)
    00000078: 	leaq	(%rcx,%rcx), %r8
    0000007c: 	setne	%cl
    0000007f: 	orl	%ecx, %eax
    00000081: 	leal	0x1(%rdx), %ecx
    00000084: 	cmpl	%ecx, %esi
    00000086: 	jle	.Ltmp1081 # Offset: 134
    00000088: 	cmpw	$0x0, 0x2(%rdi,%r8)
    0000008f: 	setne	%cl
    00000092: 	orl	%ecx, %eax
    00000094: 	leal	0x2(%rdx), %ecx
    00000097: 	cmpl	%esi, %ecx
    00000099: 	jge	.Ltmp1081 # Offset: 153
    0000009b: 	cmpw	$0x0, 0x4(%rdi,%r8)
    000000a2: 	setne	%cl
    000000a5: 	addl	$0x3, %edx
    000000a8: 	orl	%ecx, %eax
    000000aa: 	cmpl	%esi, %edx
    000000ac: 	jge	.Ltmp1081 # Offset: 172
    000000ae: 	cmpw	$0x0, 0x6(%rdi,%r8)
    000000b5: 	setne	%dl
    000000b8: 	orl	%edx, %eax
.Ltmp1081:
    000000ba: 	retq # Offset: 186
    000000bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1076:
    000000c0: 	xorl	%edx, %edx
    000000c2: 	jmp	.Ltmp1082 # Offset: 194
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or4ItEbPKT_ib"

Binary Function "_Z9logic_or5ItEbPKT_ib" after disassembly {
  Number      : 161
  State       : disassembled
  Address     : 0x10e80
  Size        : 0x84
  MaxSize     : 0x90
  Offset      : 0x10e80
  Section     : .text
  Orc Section : .local.text._Z9logic_or5ItEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0160:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%edx, %eax
    00000009: 	movl	%esi, %edi
    0000000b: 	cmpl	$0x1, %esi
    0000000e: 	jle	.Ltmp1083 # Offset: 14
    00000010: 	leal	-0x2(%rsi), %r10d
    00000014: 	movq	%r9, %rcx
    00000017: 	shrl	%r10d
    0000001a: 	movl	%r10d, %esi
    0000001d: 	leaq	0x4(%r9,%rsi,4), %r8
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1084:
    00000028: 	cmpw	$0x0, (%rcx)
    0000002c: 	setne	%sil
    00000030: 	orl	%esi, %eax
    00000032: 	cmpw	$0x0, 0x2(%rcx)
    00000037: 	setne	%sil
    0000003b: 	addq	$0x4, %rcx
    0000003f: 	orl	%esi, %edx
    00000041: 	cmpq	%rcx, %r8
    00000044: 	jne	.Ltmp1084 # Offset: 68
    00000046: 	leal	0x2(%r10,%r10), %esi
.Ltmp1087:
    0000004b: 	cmpl	%esi, %edi
    0000004d: 	jle	.Ltmp1085 # Offset: 77
    0000004f: 	subl	$0x1, %edi
    00000052: 	movslq	%esi, %r8
    00000055: 	subl	%esi, %edi
    00000057: 	leaq	(%r9,%r8,2), %rcx
    0000005b: 	addq	%r8, %rdi
    0000005e: 	leaq	0x2(%r9,%rdi,2), %rdi
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1086:
    00000068: 	cmpw	$0x0, (%rcx)
    0000006c: 	setne	%sil
    00000070: 	addq	$0x2, %rcx
    00000074: 	orl	%esi, %eax
    00000076: 	cmpq	%rcx, %rdi
    00000079: 	jne	.Ltmp1086 # Offset: 121
.Ltmp1085:
    0000007b: 	orl	%edx, %eax
    0000007d: 	retq # Offset: 125
    0000007e: 	nop # Size: 2
.Ltmp1083:
    00000080: 	xorl	%esi, %esi
    00000082: 	jmp	.Ltmp1087 # Offset: 130
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or5ItEbPKT_ib"

Binary Function "_Z9logic_or6ItEbPKT_ib" after disassembly {
  Number      : 162
  State       : disassembled
  Address     : 0x10f10
  Size        : 0xb9
  MaxSize     : 0xc0
  Offset      : 0x10f10
  Section     : .text
  Orc Section : .local.text._Z9logic_or6ItEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0161:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %r10
    00000008: 	movl	%esi, %r9d
    0000000b: 	movl	%edx, %eax
    0000000d: 	cmpl	$0x3, %esi
    00000010: 	jle	.Ltmp1088 # Offset: 16
    00000016: 	leal	-0x4(%rsi), %ebx
    00000019: 	movq	%rdi, %rcx
    0000001c: 	shrl	$0x2, %ebx
    0000001f: 	movl	%ebx, %esi
    00000021: 	leaq	0x8(%rdi,%rsi,8), %r11
    00000026: 	movl	%edx, %edi
    00000028: 	movl	%edx, %esi
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1089:
    00000030: 	cmpw	$0x0, (%rcx)
    00000034: 	setne	%r8b
    00000038: 	orl	%r8d, %eax
    0000003b: 	cmpw	$0x0, 0x2(%rcx)
    00000040: 	setne	%r8b
    00000044: 	orl	%r8d, %edx
    00000047: 	cmpw	$0x0, 0x4(%rcx)
    0000004c: 	setne	%r8b
    00000050: 	orl	%r8d, %esi
    00000053: 	cmpw	$0x0, 0x6(%rcx)
    00000058: 	setne	%r8b
    0000005c: 	addq	$0x8, %rcx
    00000060: 	orl	%r8d, %edi
    00000063: 	cmpq	%rcx, %r11
    00000066: 	jne	.Ltmp1089 # Offset: 102
    00000068: 	leal	0x4(,%rbx,4), %r8d
.Ltmp1092:
    00000070: 	cmpl	%r8d, %r9d
    00000073: 	jle	.Ltmp1090 # Offset: 115
    00000075: 	subl	$0x1, %r9d
    00000079: 	movslq	%r8d, %r11
    0000007c: 	subl	%r8d, %r9d
    0000007f: 	leaq	(%r10,%r11,2), %rcx
    00000083: 	addq	%r11, %r9
    00000086: 	leaq	0x2(%r10,%r9,2), %r9
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1091:
    00000090: 	cmpw	$0x0, (%rcx)
    00000094: 	setne	%r8b
    00000098: 	addq	$0x2, %rcx
    0000009c: 	orl	%r8d, %eax
    0000009f: 	cmpq	%rcx, %r9
    000000a2: 	jne	.Ltmp1091 # Offset: 162
.Ltmp1090:
    000000a4: 	orl	%edi, %esi
    000000a6: 	orb	%dl, %al
    000000a8: 	popq	%rbx
    000000a9: 	cmovel	%esi, %eax
    000000ac: 	retq # Offset: 172
    000000ad: 	nopl	(%rax) # Size: 3
.Ltmp1088:
    000000b0: 	movl	%edx, %edi
    000000b2: 	movl	%edx, %esi
    000000b4: 	xorl	%r8d, %r8d
    000000b7: 	jmp	.Ltmp1092 # Offset: 183
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or6ItEbPKT_ib"

Binary Function "_Z9logic_or7ItEbPKT_ib" after disassembly {
  Number      : 163
  State       : disassembled
  Address     : 0x10fd0
  Size        : 0x101
  MaxSize     : 0x110
  Offset      : 0x10fd0
  Section     : .text
  Orc Section : .local.text._Z9logic_or7ItEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0162:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movq	%rdi, %r11
    00000009: 	movl	%esi, %r10d
    0000000c: 	movl	%edx, %ecx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	cmpl	$0x3, %esi
    00000017: 	jle	.Ltmp1093 # Offset: 23
    0000001d: 	leal	-0x4(%rsi), %r14d
    00000021: 	movq	%rdi, %rax
    00000024: 	movl	%edx, %r8d
    00000027: 	shrl	$0x2, %r14d
    0000002b: 	movl	%r14d, %esi
    0000002e: 	leaq	0x8(%rdi,%rsi,8), %r13
    00000033: 	movl	%edx, %edi
    00000035: 	movl	$0x1, %esi
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1094:
    00000040: 	cmpw	$0x0, (%rax)
    00000044: 	cmovnel	%esi, %ecx
    00000047: 	cmpw	$0x0, 0x2(%rax)
    0000004c: 	cmovnel	%esi, %edx
    0000004f: 	cmpw	$0x0, 0x4(%rax)
    00000054: 	cmovnel	%esi, %edi
    00000057: 	cmpw	$0x0, 0x6(%rax)
    0000005c: 	movl	%ecx, %r9d
    0000005f: 	cmovnel	%esi, %r8d
    00000063: 	addq	$0x8, %rax
    00000067: 	movl	%edx, %ebx
    00000069: 	movl	%edi, %r12d
    0000006c: 	movl	%r8d, %ebp
    0000006f: 	cmpq	%r13, %rax
    00000072: 	jne	.Ltmp1094 # Offset: 114
    00000074: 	leal	0x4(,%r14,4), %edx
.Ltmp1099:
    0000007c: 	cmpl	%edx, %r10d
    0000007f: 	jle	.Ltmp1095 # Offset: 127
    00000081: 	subl	$0x1, %r10d
    00000085: 	movslq	%edx, %rsi
    00000088: 	subl	%edx, %r10d
    0000008b: 	leaq	(%r11,%rsi,2), %rax
    0000008f: 	movl	$0x1, %edx
    00000094: 	addq	%rsi, %r10
    00000097: 	leaq	0x2(%r11,%r10,2), %rsi
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp1096:
    000000a0: 	cmpw	$0x0, (%rax)
    000000a4: 	cmovnel	%edx, %ecx
    000000a7: 	addq	$0x2, %rax
    000000ab: 	movl	%ecx, %r9d
    000000ae: 	cmpq	%rax, %rsi
    000000b1: 	jne	.Ltmp1096 # Offset: 177
.Ltmp1095:
    000000b3: 	testb	%r9b, %r9b
    000000b6: 	jne	.Ltmp1097 # Offset: 182
    000000b8: 	movl	%ebx, %r9d
    000000bb: 	testb	%bl, %bl
    000000bd: 	je	.Ltmp1098 # Offset: 189
.Ltmp1097:
    000000bf: 	popq	%rbx
    000000c0: 	movl	%r9d, %eax
    000000c3: 	popq	%rbp
    000000c4: 	popq	%r12
    000000c6: 	popq	%r13
    000000c8: 	popq	%r14
    000000ca: 	retq # Offset: 202
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1098:
    000000d0: 	testb	%r12b, %r12b
    000000d3: 	movl	%ebp, %r9d
    000000d6: 	popq	%rbx
    000000d7: 	popq	%rbp
    000000d8: 	cmovnel	%r12d, %r9d
    000000dc: 	popq	%r12
    000000de: 	popq	%r13
    000000e0: 	popq	%r14
    000000e2: 	movl	%r9d, %eax
    000000e5: 	retq # Offset: 229
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1093:
    000000f0: 	movl	%edx, %ebx
    000000f2: 	movl	%edx, %r9d
    000000f5: 	movl	%edx, %ebp
    000000f7: 	movl	%edx, %r12d
    000000fa: 	xorl	%edx, %edx
    000000fc: 	jmp	.Ltmp1099 # Offset: 252
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or7ItEbPKT_ib"

Binary Function "_Z9logic_or8ItEbPKT_ib" after disassembly {
  Number      : 164
  State       : disassembled
  Address     : 0x110e0
  Size        : 0x1a2
  MaxSize     : 0x1b0
  Offset      : 0x110e0
  Section     : .text
  Orc Section : .local.text._Z9logic_or8ItEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0163:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %eax
    00000008: 	pushq	%r14
    0000000a: 	pushq	%r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	movl	%esi, %ebx
    00000012: 	movl	%esi, -0x8(%rsp)
    00000016: 	movl	%edx, %esi
    00000018: 	movq	%rdi, -0x10(%rsp)
    0000001d: 	cmpl	$0x7, %ebx
    00000020: 	jle	.Ltmp1100 # Offset: 32
    00000026: 	leal	-0x8(%rbx), %ecx
    00000029: 	movq	%rdi, %rdx
    0000002c: 	movl	%eax, %ebp
    0000002e: 	movl	%eax, %ebx
    00000030: 	shrl	$0x3, %ecx
    00000033: 	movl	%eax, %r11d
    00000036: 	movl	%eax, %r10d
    00000039: 	movl	%eax, %r9d
    0000003c: 	movl	%ecx, -0x4(%rsp)
    00000040: 	shlq	$0x4, %rcx
    00000044: 	leaq	0x10(%rdi,%rcx), %rdi
    00000049: 	movl	$0x1, %ecx
    0000004e: 	movq	%rdi, -0x20(%rsp)
    00000053: 	movl	%eax, %edi
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp1101:
    00000058: 	cmpw	$0x0, (%rdx)
    0000005c: 	cmovnel	%ecx, %esi
    0000005f: 	cmpw	$0x0, 0x2(%rdx)
    00000064: 	cmovnel	%ecx, %eax
    00000067: 	cmpw	$0x0, 0x4(%rdx)
    0000006c: 	cmovnel	%ecx, %edi
    0000006f: 	cmpw	$0x0, 0x6(%rdx)
    00000074: 	cmovnel	%ecx, %r9d
    00000078: 	cmpw	$0x0, 0x8(%rdx)
    0000007d: 	movl	%eax, %r12d
    00000080: 	cmovnel	%ecx, %r10d
    00000084: 	cmpw	$0x0, 0xa(%rdx)
    00000089: 	movl	%edi, %r15d
    0000008c: 	cmovnel	%ecx, %r11d
    00000090: 	cmpw	$0x0, 0xc(%rdx)
    00000095: 	movb	%r9b, -0x13(%rsp)
    0000009a: 	cmovnel	%ecx, %ebx
    0000009d: 	cmpw	$0x0, 0xe(%rdx)
    000000a2: 	movl	%r10d, %r8d
    000000a5: 	cmovnel	%ecx, %ebp
    000000a8: 	movl	%r11d, %r13d
    000000ab: 	addq	$0x10, %rdx
    000000af: 	movb	%bl, -0x12(%rsp)
    000000b3: 	movb	%bpl, -0x11(%rsp)
    000000b8: 	cmpq	%rdx, -0x20(%rsp)
    000000bd: 	jne	.Ltmp1101 # Offset: 189
    000000bf: 	movl	-0x4(%rsp), %eax
    000000c3: 	movl	%r12d, %r14d
    000000c6: 	movl	%esi, %r12d
    000000c9: 	leal	0x8(,%rax,8), %ecx
.Ltmp1108:
    000000d0: 	movl	-0x8(%rsp), %ebx
    000000d4: 	cmpl	%ecx, %ebx
    000000d6: 	jle	.Ltmp1102 # Offset: 214
    000000d8: 	subl	$0x1, %ebx
    000000db: 	movslq	%ecx, %rdi
    000000de: 	movq	-0x10(%rsp), %r9
    000000e3: 	movl	%ebx, %edx
    000000e5: 	subl	%ecx, %edx
    000000e7: 	leaq	(%r9,%rdi,2), %rax
    000000eb: 	addq	%rdi, %rdx
    000000ee: 	leaq	0x2(%r9,%rdx,2), %rcx
    000000f3: 	movl	$0x1, %edx
    000000f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1103:
    00000100: 	cmpw	$0x0, (%rax)
    00000104: 	cmovnel	%edx, %esi
    00000107: 	addq	$0x2, %rax
    0000010b: 	movl	%esi, %r12d
    0000010e: 	cmpq	%rcx, %rax
    00000111: 	jne	.Ltmp1103 # Offset: 273
.Ltmp1102:
    00000113: 	testb	%r12b, %r12b
    00000116: 	jne	.Ltmp1104 # Offset: 278
    00000118: 	movl	%r14d, %r12d
    0000011b: 	testb	%r14b, %r14b
    0000011e: 	je	.Ltmp1105 # Offset: 286
.Ltmp1104:
    00000120: 	testb	%r8b, %r8b
    00000123: 	jne	.Ltmp1106 # Offset: 291
    00000125: 	movl	%r13d, %r8d
    00000128: 	testb	%r13b, %r13b
    0000012b: 	je	.Ltmp1107 # Offset: 299
.Ltmp1106:
    0000012d: 	popq	%rbx
    0000012e: 	movl	%r8d, %eax
    00000131: 	popq	%rbp
    00000132: 	popq	%r12
    00000134: 	popq	%r13
    00000136: 	popq	%r14
    00000138: 	popq	%r15
    0000013a: 	retq # Offset: 314
    0000013b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1107:
    00000140: 	movzbl	-0x12(%rsp), %eax
    00000145: 	orb	-0x11(%rsp), %r12b
    0000014a: 	popq	%rbx
    0000014b: 	popq	%rbp
    0000014c: 	testb	%al, %al
    0000014e: 	movl	%eax, %r8d
    00000151: 	cmovel	%r12d, %r8d
    00000155: 	popq	%r12
    00000157: 	popq	%r13
    00000159: 	popq	%r14
    0000015b: 	popq	%r15
    0000015d: 	movl	%r8d, %eax
    00000160: 	retq # Offset: 352
    00000161: 	nopl	(%rax) # Size: 7
.Ltmp1105:
    00000168: 	movzbl	-0x13(%rsp), %r12d
    0000016e: 	testb	%r15b, %r15b
    00000171: 	cmovnel	%r15d, %r12d
    00000175: 	jmp	.Ltmp1104 # Offset: 373
    00000177: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1100:
    00000180: 	movb	%dl, -0x11(%rsp)
    00000184: 	movl	%edx, %r12d
    00000187: 	movl	%edx, %r13d
    0000018a: 	movl	%edx, %r15d
    0000018d: 	movb	%dl, -0x12(%rsp)
    00000191: 	movl	%edx, %r14d
    00000194: 	movl	%edx, %r8d
    00000197: 	xorl	%ecx, %ecx
    00000199: 	movb	%dl, -0x13(%rsp)
    0000019d: 	jmp	.Ltmp1108 # Offset: 413
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or8ItEbPKT_ib"

Binary Function "_Z8bit_and1IsET_PKS0_iS0_" after disassembly {
  Number      : 165
  State       : disassembled
  Address     : 0x11290
  Size        : 0xef
  MaxSize     : 0xf0
  Offset      : 0x11290
  Section     : .text
  Orc Section : .local.text._Z8bit_and1IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0164:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp1109 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0x6, %eax
    00000014: 	jbe	.Ltmp1110 # Offset: 20
    0000001a: 	shrl	$0x3, %esi
    0000001d: 	movq	%rdi, %rax
    00000020: 	pcmpeqd	%xmm0, %xmm0
    00000024: 	subl	$0x1, %esi
    00000027: 	shlq	$0x4, %rsi
    0000002b: 	leaq	0x10(%rdi,%rsi), %rsi
.Ltmp1111:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	addq	$0x10, %rax
    00000038: 	pand	%xmm2, %xmm0
    0000003c: 	cmpq	%rsi, %rax
    0000003f: 	jne	.Ltmp1111 # Offset: 63
    00000041: 	movdqa	%xmm0, %xmm1
    00000045: 	psrldq	$0x8, %xmm1
    0000004a: 	pand	%xmm1, %xmm0
    0000004e: 	movdqa	%xmm0, %xmm1
    00000052: 	psrldq	$0x4, %xmm1
    00000057: 	pand	%xmm1, %xmm0
    0000005b: 	movdqa	%xmm0, %xmm1
    0000005f: 	psrldq	$0x2, %xmm1
    00000064: 	pand	%xmm1, %xmm0
    00000068: 	pextrw	$0x0, %xmm0, %eax
    0000006d: 	andl	%edx, %eax
    0000006f: 	movl	%ecx, %edx
    00000071: 	andl	$-0x8, %edx
    00000074: 	testb	$0x7, %cl
    00000077: 	je	.Ltmp1112 # Offset: 119
.Ltmp1114:
    00000079: 	movslq	%edx, %r8
    0000007c: 	leaq	(%r8,%r8), %rsi
    00000080: 	andw	(%rdi,%r8,2), %ax
    00000085: 	leal	0x1(%rdx), %r8d
    00000089: 	cmpl	%r8d, %ecx
    0000008c: 	jle	.Ltmp1113 # Offset: 140
    0000008e: 	leal	0x2(%rdx), %r8d
    00000092: 	andw	0x2(%rdi,%rsi), %ax
    00000097: 	cmpl	%r8d, %ecx
    0000009a: 	jle	.Ltmp1113 # Offset: 154
    0000009c: 	leal	0x3(%rdx), %r8d
    000000a0: 	andw	0x4(%rdi,%rsi), %ax
    000000a5: 	cmpl	%r8d, %ecx
    000000a8: 	jle	.Ltmp1113 # Offset: 168
    000000aa: 	leal	0x4(%rdx), %r8d
    000000ae: 	andw	0x6(%rdi,%rsi), %ax
    000000b3: 	cmpl	%r8d, %ecx
    000000b6: 	jle	.Ltmp1113 # Offset: 182
    000000b8: 	leal	0x5(%rdx), %r8d
    000000bc: 	andw	0x8(%rdi,%rsi), %ax
    000000c1: 	cmpl	%r8d, %ecx
    000000c4: 	jle	.Ltmp1113 # Offset: 196
    000000c6: 	addl	$0x6, %edx
    000000c9: 	andw	0xa(%rdi,%rsi), %ax
    000000ce: 	cmpl	%edx, %ecx
    000000d0: 	jle	.Ltmp1113 # Offset: 208
    000000d2: 	andw	0xc(%rdi,%rsi), %ax
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1109:
    000000e0: 	movl	%edx, %eax
.Ltmp1113:
    000000e2: 	retq # Offset: 226
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1112:
    000000e8: 	retq # Offset: 232
.Ltmp1110:
    000000e9: 	movl	%edx, %eax
    000000eb: 	xorl	%edx, %edx
    000000ed: 	jmp	.Ltmp1114 # Offset: 237
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and1IsET_PKS0_iS0_"

Binary Function "_Z8bit_and2IsET_PKS0_iS0_" after disassembly {
  Number      : 166
  State       : disassembled
  Address     : 0x11380
  Size        : 0x105
  MaxSize     : 0x110
  Offset      : 0x11380
  Section     : .text
  Orc Section : .local.text._Z8bit_and2IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0165:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movq	%rdi, %rcx
    0000000a: 	addq	%rsi, %rsi
    0000000d: 	leaq	(%rdi,%rsi), %rdi
    00000011: 	cmpq	%rdi, %rcx
    00000014: 	je	.Ltmp1115 # Offset: 20
    0000001a: 	subq	$0x2, %rsi
    0000001e: 	movq	%rcx, %rax
    00000021: 	movq	%rsi, %r8
    00000024: 	shrq	%r8
    00000027: 	addq	$0x1, %r8
    0000002b: 	cmpq	$0xc, %rsi
    0000002f: 	jbe	.Ltmp1116 # Offset: 47
    00000035: 	movq	%r8, %rsi
    00000038: 	pcmpeqd	%xmm0, %xmm0
    0000003c: 	shrq	$0x3, %rsi
    00000040: 	shlq	$0x4, %rsi
    00000044: 	addq	%rcx, %rsi
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1117:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	pand	%xmm2, %xmm0
    0000005c: 	cmpq	%rax, %rsi
    0000005f: 	jne	.Ltmp1117 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	psrldq	$0x8, %xmm1
    0000006a: 	pand	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x4, %xmm1
    00000077: 	pand	%xmm1, %xmm0
    0000007b: 	movdqa	%xmm0, %xmm1
    0000007f: 	psrldq	$0x2, %xmm1
    00000084: 	pand	%xmm1, %xmm0
    00000088: 	pextrw	$0x0, %xmm0, %eax
    0000008d: 	andl	%edx, %eax
    0000008f: 	movq	%r8, %rdx
    00000092: 	andq	$-0x8, %rdx
    00000096: 	leaq	(%rcx,%rdx,2), %rcx
    0000009a: 	cmpq	%rdx, %r8
    0000009d: 	je	.Ltmp1118 # Offset: 157
.Ltmp1120:
    0000009f: 	leaq	0x2(%rcx), %rdx
    000000a3: 	andw	(%rcx), %ax
    000000a6: 	cmpq	%rdx, %rdi
    000000a9: 	je	.Ltmp1119 # Offset: 169
    000000ab: 	leaq	0x4(%rcx), %rdx
    000000af: 	andw	0x2(%rcx), %ax
    000000b3: 	cmpq	%rdx, %rdi
    000000b6: 	je	.Ltmp1119 # Offset: 182
    000000b8: 	leaq	0x6(%rcx), %rdx
    000000bc: 	andw	0x4(%rcx), %ax
    000000c0: 	cmpq	%rdx, %rdi
    000000c3: 	je	.Ltmp1119 # Offset: 195
    000000c5: 	leaq	0x8(%rcx), %rdx
    000000c9: 	andw	0x6(%rcx), %ax
    000000cd: 	cmpq	%rdx, %rdi
    000000d0: 	je	.Ltmp1119 # Offset: 208
    000000d2: 	leaq	0xa(%rcx), %rdx
    000000d6: 	andw	0x8(%rcx), %ax
    000000da: 	cmpq	%rdx, %rdi
    000000dd: 	je	.Ltmp1119 # Offset: 221
    000000df: 	leaq	0xc(%rcx), %rdx
    000000e3: 	andw	0xa(%rcx), %ax
    000000e7: 	cmpq	%rdx, %rdi
    000000ea: 	je	.Ltmp1119 # Offset: 234
    000000ec: 	andw	0xc(%rcx), %ax
    000000f0: 	retq # Offset: 240
    000000f1: 	nopl	(%rax) # Size: 7
.Ltmp1115:
    000000f8: 	movl	%edx, %eax
.Ltmp1119:
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1118:
    00000100: 	retq # Offset: 256
.Ltmp1116:
    00000101: 	movl	%edx, %eax
    00000103: 	jmp	.Ltmp1120 # Offset: 259
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and2IsET_PKS0_iS0_"

Binary Function "_Z8bit_and3IsET_PKS0_iS0_" after disassembly {
  Number      : 167
  State       : disassembled
  Address     : 0x11490
  Size        : 0x1b2
  MaxSize     : 0x1c0
  Offset      : 0x11490
  Section     : .text
  Orc Section : .local.text._Z8bit_and3IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0166:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %r9d
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%esi, %edi
    0000000d: 	testl	%r9d, %r9d
    00000010: 	jle	.Ltmp1121 # Offset: 16
    00000016: 	leal	-0x2(%rsi), %eax
    00000019: 	movl	%eax, %r10d
    0000001c: 	shrl	%r10d
    0000001f: 	leal	0x1(%r10), %esi
    00000023: 	cmpl	$0xd, %eax
    00000026: 	jbe	.Ltmp1122 # Offset: 38
    0000002c: 	movl	%esi, %r8d
    0000002f: 	movq	%rcx, %rax
    00000032: 	pcmpeqd	%xmm4, %xmm4
    00000036: 	shrl	$0x3, %r8d
    0000003a: 	subl	$0x1, %r8d
    0000003e: 	shlq	$0x5, %r8
    00000042: 	leaq	0x20(%rcx,%r8), %r8
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1123:
    00000050: 	movdqu	(%rax), %xmm0
    00000054: 	movdqu	0x10(%rax), %xmm3
    00000059: 	addq	$0x20, %rax
    0000005d: 	movdqa	%xmm0, %xmm1
    00000061: 	movdqa	%xmm0, %xmm2
    00000065: 	punpcklwd	%xmm3, %xmm0
    00000069: 	punpcklwd	%xmm3, %xmm1
    0000006d: 	punpckhwd	%xmm3, %xmm2
    00000071: 	movdqa	%xmm1, %xmm5
    00000075: 	punpcklwd	%xmm2, %xmm0
    00000079: 	punpcklwd	%xmm2, %xmm1
    0000007d: 	punpckhwd	%xmm2, %xmm5
    00000081: 	punpcklwd	%xmm5, %xmm1
    00000085: 	punpckhwd	%xmm5, %xmm0
    00000089: 	pand	%xmm0, %xmm1
    0000008d: 	pand	%xmm1, %xmm4
    00000091: 	cmpq	%r8, %rax
    00000094: 	jne	.Ltmp1123 # Offset: 148
    00000096: 	movdqa	%xmm4, %xmm0
    0000009a: 	psrldq	$0x8, %xmm0
    0000009f: 	pand	%xmm0, %xmm4
    000000a3: 	movdqa	%xmm4, %xmm0
    000000a7: 	psrldq	$0x4, %xmm0
    000000ac: 	pand	%xmm0, %xmm4
    000000b0: 	movdqa	%xmm4, %xmm0
    000000b4: 	psrldq	$0x2, %xmm0
    000000b9: 	pand	%xmm0, %xmm4
    000000bd: 	pextrw	$0x0, %xmm4, %eax
    000000c2: 	andl	%edx, %eax
    000000c4: 	movl	%esi, %edx
    000000c6: 	andl	$-0x8, %edx
    000000c9: 	leal	(%rdx,%rdx), %r8d
    000000cd: 	cmpl	%edx, %esi
    000000cf: 	je	.Ltmp1124 # Offset: 207
.Ltmp1128:
    000000d5: 	movl	%r10d, %r11d
    000000d8: 	subl	%edx, %r11d
    000000db: 	leal	0x1(%r11), %r10d
    000000df: 	cmpl	$0x2, %r11d
    000000e3: 	jbe	.Ltmp1125 # Offset: 227
    000000e5: 	leaq	(%rcx,%rdx,4), %rdx
    000000e9: 	movq	(%rdx), %xmm1
    000000ed: 	movq	0x8(%rdx), %xmm2
    000000f2: 	movdqa	%xmm1, %xmm3
    000000f6: 	movdqa	%xmm1, %xmm0
    000000fa: 	punpcklwd	%xmm2, %xmm1
    000000fe: 	punpcklwd	%xmm2, %xmm3
    00000102: 	punpcklwd	%xmm2, %xmm0
    00000106: 	pshufd	$0xe, %xmm3, %xmm3
    0000010b: 	punpcklwd	%xmm3, %xmm1
    0000010f: 	punpcklwd	%xmm3, %xmm0
    00000113: 	pshufd	$0xe, %xmm1, %xmm1
    00000118: 	pand	%xmm1, %xmm0
    0000011c: 	pextrw	$0x0, %xmm0, %edx
    00000121: 	pextrw	$0x1, %xmm0, %r11d
    00000127: 	andl	%r11d, %edx
    0000012a: 	andl	%eax, %edx
    0000012c: 	pextrw	$0x2, %xmm0, %eax
    00000131: 	andl	%eax, %edx
    00000133: 	pextrw	$0x3, %xmm0, %eax
    00000138: 	andl	%edx, %eax
    0000013a: 	movl	%r10d, %edx
    0000013d: 	andl	$-0x4, %edx
    00000140: 	leal	(%r8,%rdx,2), %r8d
    00000144: 	cmpl	%edx, %r10d
    00000147: 	je	.Ltmp1124 # Offset: 327
.Ltmp1125:
    00000149: 	movslq	%r8d, %r10
    0000014c: 	andw	(%rcx,%r10,2), %ax
    00000151: 	leaq	(%r10,%r10), %rdx
    00000155: 	andw	0x2(%rcx,%r10,2), %ax
    0000015b: 	leal	0x2(%r8), %r10d
    0000015f: 	cmpl	%r9d, %r10d
    00000162: 	jge	.Ltmp1124 # Offset: 354
    00000164: 	movzwl	0x6(%rcx,%rdx), %r10d
    0000016a: 	addl	$0x4, %r8d
    0000016e: 	andw	0x4(%rcx,%rdx), %r10w
    00000174: 	andl	%r10d, %eax
    00000177: 	cmpl	%r8d, %r9d
    0000017a: 	jle	.Ltmp1124 # Offset: 378
    0000017c: 	movzwl	0x8(%rcx,%rdx), %r8d
    00000182: 	andw	0xa(%rcx,%rdx), %r8w
    00000188: 	movl	%r8d, %edx
    0000018b: 	andl	%edx, %eax
.Ltmp1124:
    0000018d: 	addl	%esi, %esi
.Ltmp1127:
    0000018f: 	cmpl	%edi, %esi
    00000191: 	jge	.Ltmp1126 # Offset: 401
    00000193: 	movslq	%esi, %rsi
    00000196: 	andw	(%rcx,%rsi,2), %ax
.Ltmp1126:
    0000019a: 	retq # Offset: 410
    0000019b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1121:
    000001a0: 	movl	%edx, %eax
    000001a2: 	xorl	%esi, %esi
    000001a4: 	jmp	.Ltmp1127 # Offset: 420
.Ltmp1122:
    000001a6: 	movl	%edx, %eax
    000001a8: 	xorl	%r8d, %r8d
    000001ab: 	xorl	%edx, %edx
    000001ad: 	jmp	.Ltmp1128 # Offset: 429
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and3IsET_PKS0_iS0_"

Binary Function "_Z8bit_and4IsET_PKS0_iS0_" after disassembly {
  Number      : 168
  State       : disassembled
  Address     : 0x11650
  Size        : 0x332
  MaxSize     : 0x340
  Offset      : 0x11650
  Section     : .text
  Orc Section : .local.text._Z8bit_and4IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0167:
    00000000: 	endbr64
    00000004: 	leal	-0x3(%rsi), %r8d
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%esi, %edi
    0000000d: 	testl	%r8d, %r8d
    00000010: 	jle	.Ltmp1129 # Offset: 16
    00000016: 	leal	-0x4(%rsi), %eax
    00000019: 	movl	%eax, %r11d
    0000001c: 	shrl	$0x2, %r11d
    00000020: 	leal	0x1(%r11), %esi
    00000024: 	cmpl	$0x1b, %eax
    00000027: 	jbe	.Ltmp1130 # Offset: 39
    0000002d: 	movl	%esi, %r9d
    00000030: 	movq	%rcx, %rax
    00000033: 	pcmpeqd	%xmm6, %xmm6
    00000037: 	shrl	$0x3, %r9d
    0000003b: 	subl	$0x1, %r9d
    0000003f: 	shlq	$0x6, %r9
    00000043: 	leaq	0x40(%rcx,%r9), %r9
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1131:
    00000050: 	movdqu	(%rax), %xmm0
    00000054: 	movdqu	0x10(%rax), %xmm4
    00000059: 	addq	$0x40, %rax
    0000005d: 	movdqu	-0x20(%rax), %xmm2
    00000062: 	movdqu	-0x10(%rax), %xmm5
    00000067: 	movdqa	%xmm0, %xmm1
    0000006b: 	movdqa	%xmm0, %xmm3
    0000006f: 	punpcklwd	%xmm4, %xmm0
    00000073: 	punpcklwd	%xmm4, %xmm1
    00000077: 	punpckhwd	%xmm4, %xmm3
    0000007b: 	movdqa	%xmm2, %xmm4
    0000007f: 	movdqa	%xmm1, %xmm7
    00000083: 	punpcklwd	%xmm5, %xmm4
    00000087: 	punpcklwd	%xmm3, %xmm1
    0000008b: 	punpckhwd	%xmm3, %xmm7
    0000008f: 	punpcklwd	%xmm3, %xmm0
    00000093: 	movdqa	%xmm2, %xmm3
    00000097: 	punpckhwd	%xmm5, %xmm3
    0000009b: 	punpcklwd	%xmm7, %xmm1
    0000009f: 	punpckhwd	%xmm7, %xmm0
    000000a3: 	punpcklwd	%xmm5, %xmm2
    000000a7: 	movdqa	%xmm4, %xmm7
    000000ab: 	punpcklwd	%xmm3, %xmm4
    000000af: 	punpckhwd	%xmm3, %xmm7
    000000b3: 	punpcklwd	%xmm3, %xmm2
    000000b7: 	movdqa	%xmm0, %xmm3
    000000bb: 	punpckhwd	%xmm7, %xmm2
    000000bf: 	movdqa	%xmm0, %xmm5
    000000c3: 	punpcklwd	%xmm7, %xmm4
    000000c7: 	punpcklwd	%xmm2, %xmm3
    000000cb: 	punpckhwd	%xmm2, %xmm5
    000000cf: 	punpcklwd	%xmm2, %xmm0
    000000d3: 	movdqa	%xmm3, %xmm7
    000000d7: 	punpcklwd	%xmm5, %xmm0
    000000db: 	punpcklwd	%xmm5, %xmm3
    000000df: 	punpckhwd	%xmm5, %xmm7
    000000e3: 	movdqa	%xmm1, %xmm2
    000000e7: 	punpckhwd	%xmm7, %xmm0
    000000eb: 	punpcklwd	%xmm7, %xmm3
    000000ef: 	punpckhwd	%xmm4, %xmm2
    000000f3: 	pand	%xmm0, %xmm3
    000000f7: 	movdqa	%xmm1, %xmm0
    000000fb: 	punpcklwd	%xmm4, %xmm1
    000000ff: 	punpcklwd	%xmm4, %xmm0
    00000103: 	punpcklwd	%xmm2, %xmm1
    00000107: 	movdqa	%xmm0, %xmm5
    0000010b: 	punpcklwd	%xmm2, %xmm0
    0000010f: 	punpckhwd	%xmm2, %xmm5
    00000113: 	punpcklwd	%xmm5, %xmm0
    00000117: 	punpckhwd	%xmm5, %xmm1
    0000011b: 	pand	%xmm1, %xmm0
    0000011f: 	pand	%xmm0, %xmm3
    00000123: 	pand	%xmm3, %xmm6
    00000127: 	cmpq	%r9, %rax
    0000012a: 	jne	.Ltmp1131 # Offset: 298
    00000130: 	movdqa	%xmm6, %xmm0
    00000134: 	movl	%esi, %r10d
    00000137: 	psrldq	$0x8, %xmm0
    0000013c: 	andl	$-0x8, %r10d
    00000140: 	pand	%xmm0, %xmm6
    00000144: 	movdqa	%xmm6, %xmm0
    00000148: 	psrldq	$0x4, %xmm0
    0000014d: 	pand	%xmm0, %xmm6
    00000151: 	movdqa	%xmm6, %xmm0
    00000155: 	psrldq	$0x2, %xmm0
    0000015a: 	pand	%xmm0, %xmm6
    0000015e: 	pextrw	$0x0, %xmm6, %eax
    00000163: 	andl	%edx, %eax
    00000165: 	leal	(,%r10,4), %edx
    0000016d: 	cmpl	%esi, %r10d
    00000170: 	je	.Ltmp1132 # Offset: 368
.Ltmp1136:
    00000176: 	subl	%r10d, %r11d
    00000179: 	leal	0x1(%r11), %r9d
    0000017d: 	cmpl	$0x2, %r11d
    00000181: 	jbe	.Ltmp1133 # Offset: 385
    00000187: 	leaq	(%rcx,%r10,8), %r10
    0000018b: 	movq	(%r10), %xmm0
    00000190: 	movq	0x8(%r10), %xmm4
    00000196: 	movq	0x10(%r10), %xmm3
    0000019c: 	movq	0x18(%r10), %xmm1
    000001a2: 	movdqa	%xmm0, %xmm5
    000001a6: 	movdqa	%xmm0, %xmm2
    000001aa: 	punpcklwd	%xmm4, %xmm0
    000001ae: 	punpcklwd	%xmm4, %xmm5
    000001b2: 	punpcklwd	%xmm4, %xmm2
    000001b6: 	movdqa	%xmm3, %xmm4
    000001ba: 	pshufd	$0xe, %xmm5, %xmm5
    000001bf: 	punpcklwd	%xmm1, %xmm4
    000001c3: 	punpcklwd	%xmm5, %xmm2
    000001c7: 	punpcklwd	%xmm5, %xmm0
    000001cb: 	movdqa	%xmm3, %xmm5
    000001cf: 	punpcklwd	%xmm1, %xmm5
    000001d3: 	punpcklwd	%xmm1, %xmm3
    000001d7: 	pshufd	$0xe, %xmm0, %xmm0
    000001dc: 	pshufd	$0xe, %xmm5, %xmm5
    000001e1: 	movdqa	%xmm0, %xmm1
    000001e5: 	punpcklwd	%xmm5, %xmm3
    000001e9: 	punpcklwd	%xmm5, %xmm4
    000001ed: 	movdqa	%xmm0, %xmm5
    000001f1: 	pshufd	$0xe, %xmm3, %xmm3
    000001f6: 	punpcklwd	%xmm3, %xmm5
    000001fa: 	punpcklwd	%xmm3, %xmm0
    000001fe: 	punpcklwd	%xmm3, %xmm1
    00000202: 	pshufd	$0xe, %xmm5, %xmm5
    00000207: 	movdqa	%xmm2, %xmm3
    0000020b: 	punpcklwd	%xmm5, %xmm0
    0000020f: 	punpcklwd	%xmm5, %xmm1
    00000213: 	punpcklwd	%xmm4, %xmm3
    00000217: 	pshufd	$0xe, %xmm0, %xmm0
    0000021c: 	pshufd	$0xe, %xmm3, %xmm3
    00000221: 	pand	%xmm1, %xmm0
    00000225: 	movdqa	%xmm2, %xmm1
    00000229: 	punpcklwd	%xmm4, %xmm2
    0000022d: 	punpcklwd	%xmm4, %xmm1
    00000231: 	punpcklwd	%xmm3, %xmm2
    00000235: 	punpcklwd	%xmm3, %xmm1
    00000239: 	pshufd	$0xe, %xmm2, %xmm2
    0000023e: 	pand	%xmm2, %xmm1
    00000242: 	pand	%xmm1, %xmm0
    00000246: 	pextrw	$0x0, %xmm0, %r10d
    0000024c: 	pextrw	$0x1, %xmm0, %r11d
    00000252: 	andl	%r11d, %r10d
    00000255: 	andl	%eax, %r10d
    00000258: 	pextrw	$0x2, %xmm0, %eax
    0000025d: 	andl	%eax, %r10d
    00000260: 	pextrw	$0x3, %xmm0, %eax
    00000265: 	andl	%r10d, %eax
    00000268: 	movl	%r9d, %r10d
    0000026b: 	andl	$-0x4, %r10d
    0000026f: 	leal	(%rdx,%r10,4), %edx
    00000273: 	cmpl	%r10d, %r9d
    00000276: 	je	.Ltmp1132 # Offset: 630
.Ltmp1133:
    00000278: 	movslq	%edx, %r10
    0000027b: 	andw	(%rcx,%r10,2), %ax
    00000280: 	leaq	(%r10,%r10), %r9
    00000284: 	andw	0x2(%rcx,%r10,2), %ax
    0000028a: 	andw	0x4(%rcx,%r10,2), %ax
    00000290: 	andw	0x6(%rcx,%r10,2), %ax
    00000296: 	leal	0x4(%rdx), %r10d
    0000029a: 	cmpl	%r10d, %r8d
    0000029d: 	jle	.Ltmp1132 # Offset: 669
    0000029f: 	movzwl	0xa(%rcx,%r9), %r10d
    000002a5: 	addl	$0x8, %edx
    000002a8: 	andw	0xc(%rcx,%r9), %r10w
    000002ae: 	andw	0x8(%rcx,%r9), %r10w
    000002b4: 	andw	0xe(%rcx,%r9), %r10w
    000002ba: 	andl	%r10d, %eax
    000002bd: 	cmpl	%edx, %r8d
    000002c0: 	jle	.Ltmp1132 # Offset: 704
    000002c2: 	movzwl	0x12(%rcx,%r9), %edx
    000002c8: 	andw	0x14(%rcx,%r9), %dx
    000002ce: 	andw	0x10(%rcx,%r9), %dx
    000002d4: 	andw	0x16(%rcx,%r9), %dx
    000002da: 	andl	%edx, %eax
.Ltmp1132:
    000002dc: 	shll	$0x2, %esi
.Ltmp1135:
    000002df: 	cmpl	%esi, %edi
    000002e1: 	jle	.Ltmp1134 # Offset: 737
    000002e3: 	movslq	%esi, %rdx
    000002e6: 	leaq	(%rdx,%rdx), %r8
    000002ea: 	andw	(%rcx,%rdx,2), %ax
    000002ee: 	leal	0x1(%rsi), %edx
    000002f1: 	cmpl	%edi, %edx
    000002f3: 	jge	.Ltmp1134 # Offset: 755
    000002f5: 	leal	0x2(%rsi), %edx
    000002f8: 	andw	0x2(%rcx,%r8), %ax
    000002fe: 	cmpl	%edx, %edi
    00000300: 	jle	.Ltmp1134 # Offset: 768
    00000302: 	addl	$0x3, %esi
    00000305: 	andw	0x4(%rcx,%r8), %ax
    0000030b: 	cmpl	%esi, %edi
    0000030d: 	jle	.Ltmp1134 # Offset: 781
    0000030f: 	andw	0x6(%rcx,%r8), %ax
.Ltmp1134:
    00000315: 	retq # Offset: 789
    00000316: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1129:
    00000320: 	movl	%edx, %eax
    00000322: 	xorl	%esi, %esi
    00000324: 	jmp	.Ltmp1135 # Offset: 804
.Ltmp1130:
    00000326: 	movl	%edx, %eax
    00000328: 	xorl	%r10d, %r10d
    0000032b: 	xorl	%edx, %edx
    0000032d: 	jmp	.Ltmp1136 # Offset: 813
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and4IsET_PKS0_iS0_"

Binary Function "_Z8bit_and5IsET_PKS0_iS0_" after disassembly {
  Number      : 169
  State       : disassembled
  Address     : 0x11990
  Size        : 0x1fa
  MaxSize     : 0x200
  Offset      : 0x11990
  Section     : .text
  Orc Section : .local.text._Z8bit_and5IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0168:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r9d
    00000007: 	leal	-0x1(%rsi), %esi
    0000000a: 	movq	%rdi, %r8
    0000000d: 	movl	%edx, %eax
    0000000f: 	testl	%esi, %esi
    00000011: 	jle	.Ltmp1137 # Offset: 17
    00000017: 	leal	-0x2(%r9), %ecx
    0000001b: 	movl	%ecx, %edi
    0000001d: 	shrl	%edi
    0000001f: 	addl	$0x1, %edi
    00000022: 	cmpl	$0x5, %ecx
    00000025: 	jbe	.Ltmp1138 # Offset: 37
    0000002b: 	movd	%edx, %xmm0
    0000002f: 	movl	$0xffffffff, %eax
    00000034: 	pinsrw	$0x1, %edx, %xmm0
    00000039: 	movl	%edi, %edx
    0000003b: 	movd	%eax, %xmm1
    0000003f: 	movq	%r8, %rax
    00000042: 	shrl	$0x2, %edx
    00000045: 	punpckldq	%xmm1, %xmm0
    00000049: 	punpckldq	%xmm1, %xmm1
    0000004d: 	subl	$0x1, %edx
    00000050: 	punpcklqdq	%xmm1, %xmm0
    00000054: 	shlq	$0x4, %rdx
    00000058: 	leaq	0x10(%r8,%rdx), %rdx
    0000005d: 	nopl	(%rax) # Size: 3
.Ltmp1139:
    00000060: 	movdqu	(%rax), %xmm2
    00000064: 	addq	$0x10, %rax
    00000068: 	pand	%xmm2, %xmm0
    0000006c: 	cmpq	%rdx, %rax
    0000006f: 	jne	.Ltmp1139 # Offset: 111
    00000071: 	pextrw	$0x2, %xmm0, %edx
    00000076: 	pextrw	$0x0, %xmm0, %eax
    0000007b: 	pextrw	$0x1, %xmm0, %ecx
    00000080: 	movl	%edi, %r10d
    00000083: 	andl	%edx, %eax
    00000085: 	pextrw	$0x4, %xmm0, %edx
    0000008a: 	andl	$-0x4, %r10d
    0000008e: 	andl	%edx, %eax
    00000090: 	pextrw	$0x6, %xmm0, %edx
    00000095: 	andl	%edx, %eax
    00000097: 	pextrw	$0x3, %xmm0, %edx
    0000009c: 	andl	%edx, %ecx
    0000009e: 	pextrw	$0x5, %xmm0, %edx
    000000a3: 	andl	%edx, %ecx
    000000a5: 	pextrw	$0x7, %xmm0, %edx
    000000aa: 	andl	%edx, %ecx
    000000ac: 	leal	(%r10,%r10), %edx
    000000b0: 	cmpl	%r10d, %edi
    000000b3: 	je	.Ltmp1140 # Offset: 179
.Ltmp1146:
    000000b5: 	movslq	%edx, %r11
    000000b8: 	leaq	(%r11,%r11), %r10
    000000bc: 	andw	(%r8,%r11,2), %ax
    000000c1: 	andw	0x2(%r8,%r11,2), %cx
    000000c7: 	leal	0x2(%rdx), %r11d
    000000cb: 	cmpl	%r11d, %esi
    000000ce: 	jle	.Ltmp1140 # Offset: 206
    000000d0: 	addl	$0x4, %edx
    000000d3: 	andw	0x4(%r8,%r10), %ax
    000000d9: 	andw	0x6(%r8,%r10), %cx
    000000df: 	cmpl	%edx, %esi
    000000e1: 	jle	.Ltmp1140 # Offset: 225
    000000e3: 	andw	0x8(%r8,%r10), %ax
    000000e9: 	andw	0xa(%r8,%r10), %cx
.Ltmp1140:
    000000ef: 	addl	%edi, %edi
.Ltmp1145:
    000000f1: 	cmpl	%edi, %r9d
    000000f4: 	jle	.Ltmp1141 # Offset: 244
    000000fa: 	movl	%r9d, %r11d
    000000fd: 	subl	%edi, %r11d
    00000100: 	leal	-0x1(%r11), %edx
    00000104: 	cmpl	$0x6, %edx
    00000107: 	jbe	.Ltmp1142 # Offset: 263
    00000109: 	movslq	%edi, %rdx
    0000010c: 	pcmpeqd	%xmm0, %xmm0
    00000110: 	leaq	(%r8,%rdx,2), %rsi
    00000114: 	movl	%r11d, %edx
    00000117: 	shrl	$0x3, %edx
    0000011a: 	leal	-0x1(%rdx), %r10d
    0000011e: 	leaq	0x10(%rsi), %rdx
    00000122: 	shlq	$0x4, %r10
    00000126: 	addq	%rdx, %r10
    00000129: 	jmp	.Ltmp1143 # Offset: 297
    0000012b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1144:
    00000130: 	addq	$0x10, %rdx
.Ltmp1143:
    00000134: 	movdqu	(%rsi), %xmm1
    00000138: 	movq	%rdx, %rsi
    0000013b: 	pand	%xmm1, %xmm0
    0000013f: 	cmpq	%rdx, %r10
    00000142: 	jne	.Ltmp1144 # Offset: 322
    00000144: 	movdqa	%xmm0, %xmm1
    00000148: 	psrldq	$0x8, %xmm1
    0000014d: 	pand	%xmm1, %xmm0
    00000151: 	movdqa	%xmm0, %xmm1
    00000155: 	psrldq	$0x4, %xmm1
    0000015a: 	pand	%xmm1, %xmm0
    0000015e: 	movdqa	%xmm0, %xmm1
    00000162: 	psrldq	$0x2, %xmm1
    00000167: 	pand	%xmm1, %xmm0
    0000016b: 	pextrw	$0x0, %xmm0, %edx
    00000170: 	andl	%edx, %eax
    00000172: 	movl	%r11d, %edx
    00000175: 	andl	$-0x8, %edx
    00000178: 	addl	%edx, %edi
    0000017a: 	cmpl	%r11d, %edx
    0000017d: 	je	.Ltmp1141 # Offset: 381
.Ltmp1142:
    0000017f: 	movslq	%edi, %rsi
    00000182: 	leaq	(%rsi,%rsi), %rdx
    00000186: 	andw	(%r8,%rsi,2), %ax
    0000018b: 	leal	0x1(%rdi), %esi
    0000018e: 	cmpl	%esi, %r9d
    00000191: 	jle	.Ltmp1141 # Offset: 401
    00000193: 	leal	0x2(%rdi), %esi
    00000196: 	andw	0x2(%r8,%rdx), %ax
    0000019c: 	cmpl	%esi, %r9d
    0000019f: 	jle	.Ltmp1141 # Offset: 415
    000001a1: 	leal	0x3(%rdi), %esi
    000001a4: 	andw	0x4(%r8,%rdx), %ax
    000001aa: 	cmpl	%esi, %r9d
    000001ad: 	jle	.Ltmp1141 # Offset: 429
    000001af: 	leal	0x4(%rdi), %esi
    000001b2: 	andw	0x6(%r8,%rdx), %ax
    000001b8: 	cmpl	%esi, %r9d
    000001bb: 	jle	.Ltmp1141 # Offset: 443
    000001bd: 	leal	0x5(%rdi), %esi
    000001c0: 	andw	0x8(%r8,%rdx), %ax
    000001c6: 	cmpl	%esi, %r9d
    000001c9: 	jle	.Ltmp1141 # Offset: 457
    000001cb: 	addl	$0x6, %edi
    000001ce: 	andw	0xa(%r8,%rdx), %ax
    000001d4: 	cmpl	%edi, %r9d
    000001d7: 	jle	.Ltmp1141 # Offset: 471
    000001d9: 	andw	0xc(%r8,%rdx), %ax
.Ltmp1141:
    000001df: 	andl	%ecx, %eax
    000001e1: 	retq # Offset: 481
    000001e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1137:
    000001e8: 	movl	%edx, %ecx
    000001ea: 	xorl	%edi, %edi
    000001ec: 	jmp	.Ltmp1145 # Offset: 492
.Ltmp1138:
    000001f1: 	movl	%edx, %ecx
    000001f3: 	xorl	%edx, %edx
    000001f5: 	jmp	.Ltmp1146 # Offset: 501
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and5IsET_PKS0_iS0_"

Binary Function "_Z8bit_and6IsET_PKS0_iS0_" after disassembly {
  Number      : 170
  State       : disassembled
  Address     : 0x11b90
  Size        : 0x20a
  MaxSize     : 0x210
  Offset      : 0x11b90
  Section     : .text
  Orc Section : .local.text._Z8bit_and6IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0169:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp1147 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %esi
    00000015: 	movl	%esi, %ecx
    00000017: 	shrl	$0x2, %ecx
    0000001a: 	addl	$0x1, %ecx
    0000001d: 	cmpl	$0x3, %esi
    00000020: 	jbe	.Ltmp1148 # Offset: 32
    00000026: 	movd	%edx, %xmm0
    0000002a: 	movl	$0xffffffff, %eax
    0000002f: 	pinsrw	$0x1, %edx, %xmm0
    00000034: 	movl	%ecx, %edx
    00000036: 	movd	%eax, %xmm1
    0000003a: 	movq	%rdi, %rax
    0000003d: 	shrl	%edx
    0000003f: 	punpckldq	%xmm0, %xmm0
    00000043: 	punpckldq	%xmm1, %xmm1
    00000047: 	subl	$0x1, %edx
    0000004a: 	punpcklqdq	%xmm1, %xmm0
    0000004e: 	shlq	$0x4, %rdx
    00000052: 	leaq	0x10(%rdi,%rdx), %rdx
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1149:
    00000060: 	movdqu	(%rax), %xmm2
    00000064: 	addq	$0x10, %rax
    00000068: 	pand	%xmm2, %xmm0
    0000006c: 	cmpq	%rax, %rdx
    0000006f: 	jne	.Ltmp1149 # Offset: 111
    00000071: 	pextrw	$0x4, %xmm0, %edx
    00000076: 	pextrw	$0x0, %xmm0, %eax
    0000007b: 	pextrw	$0x5, %xmm0, %esi
    00000080: 	andl	%edx, %eax
    00000082: 	pextrw	$0x1, %xmm0, %edx
    00000087: 	pextrw	$0x2, %xmm0, %r10d
    0000008d: 	andl	%esi, %edx
    0000008f: 	pextrw	$0x3, %xmm0, %esi
    00000094: 	movzwl	%dx, %r9d
    00000098: 	pextrw	$0x6, %xmm0, %edx
    0000009d: 	andl	%edx, %r10d
    000000a0: 	pextrw	$0x7, %xmm0, %edx
    000000a5: 	andl	%edx, %esi
    000000a7: 	movl	%ecx, %edx
    000000a9: 	andl	$-0x2, %edx
    000000ac: 	testl	$0x80000001, %ecx
    000000b2: 	je	.Ltmp1150 # Offset: 178
.Ltmp1156:
    000000b4: 	movq	(%rdi,%rdx,8), %xmm0
    000000b9: 	movzwl	%si, %edx
    000000bc: 	movzwl	%r10w, %r10d
    000000c0: 	movzwl	%ax, %eax
    000000c3: 	shlq	$0x10, %rdx
    000000c7: 	orq	%r10, %rdx
    000000ca: 	shlq	$0x10, %rdx
    000000ce: 	orq	%r9, %rdx
    000000d1: 	shlq	$0x10, %rdx
    000000d5: 	orq	%rax, %rdx
    000000d8: 	movq	%rdx, %xmm3
    000000dd: 	pand	%xmm3, %xmm0
    000000e1: 	pextrw	$0x0, %xmm0, %eax
    000000e6: 	pextrw	$0x1, %xmm0, %r9d
    000000ec: 	pextrw	$0x2, %xmm0, %r10d
    000000f2: 	pextrw	$0x3, %xmm0, %esi
.Ltmp1150:
    000000f7: 	movl	%r9d, %edx
    000000fa: 	shll	$0x2, %ecx
    000000fd: 	andl	%r10d, %edx
    00000100: 	andl	%esi, %edx
    00000102: 	movl	%edx, %r9d
.Ltmp1155:
    00000105: 	cmpl	%ecx, %r8d
    00000108: 	jle	.Ltmp1151 # Offset: 264
    0000010e: 	movl	%r8d, %r11d
    00000111: 	subl	%ecx, %r11d
    00000114: 	leal	-0x1(%r11), %edx
    00000118: 	cmpl	$0x6, %edx
    0000011b: 	jbe	.Ltmp1152 # Offset: 283
    0000011d: 	movslq	%ecx, %rdx
    00000120: 	pcmpeqd	%xmm0, %xmm0
    00000124: 	leaq	(%rdi,%rdx,2), %rsi
    00000128: 	movl	%r11d, %edx
    0000012b: 	shrl	$0x3, %edx
    0000012e: 	leal	-0x1(%rdx), %r10d
    00000132: 	leaq	0x10(%rsi), %rdx
    00000136: 	shlq	$0x4, %r10
    0000013a: 	addq	%rdx, %r10
    0000013d: 	jmp	.Ltmp1153 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp1154:
    00000140: 	addq	$0x10, %rdx
.Ltmp1153:
    00000144: 	movdqu	(%rsi), %xmm1
    00000148: 	movq	%rdx, %rsi
    0000014b: 	pand	%xmm1, %xmm0
    0000014f: 	cmpq	%r10, %rdx
    00000152: 	jne	.Ltmp1154 # Offset: 338
    00000154: 	movdqa	%xmm0, %xmm1
    00000158: 	psrldq	$0x8, %xmm1
    0000015d: 	pand	%xmm1, %xmm0
    00000161: 	movdqa	%xmm0, %xmm1
    00000165: 	psrldq	$0x4, %xmm1
    0000016a: 	pand	%xmm1, %xmm0
    0000016e: 	movdqa	%xmm0, %xmm1
    00000172: 	psrldq	$0x2, %xmm1
    00000177: 	pand	%xmm1, %xmm0
    0000017b: 	pextrw	$0x0, %xmm0, %edx
    00000180: 	andl	%edx, %eax
    00000182: 	movl	%r11d, %edx
    00000185: 	andl	$-0x8, %edx
    00000188: 	addl	%edx, %ecx
    0000018a: 	cmpl	%r11d, %edx
    0000018d: 	je	.Ltmp1151 # Offset: 397
.Ltmp1152:
    0000018f: 	movslq	%ecx, %rsi
    00000192: 	leaq	(%rsi,%rsi), %rdx
    00000196: 	andw	(%rdi,%rsi,2), %ax
    0000019a: 	leal	0x1(%rcx), %esi
    0000019d: 	cmpl	%r8d, %esi
    000001a0: 	jge	.Ltmp1151 # Offset: 416
    000001a2: 	leal	0x2(%rcx), %esi
    000001a5: 	andw	0x2(%rdi,%rdx), %ax
    000001aa: 	cmpl	%r8d, %esi
    000001ad: 	jge	.Ltmp1151 # Offset: 429
    000001af: 	leal	0x3(%rcx), %esi
    000001b2: 	andw	0x4(%rdi,%rdx), %ax
    000001b7: 	cmpl	%esi, %r8d
    000001ba: 	jle	.Ltmp1151 # Offset: 442
    000001bc: 	leal	0x4(%rcx), %esi
    000001bf: 	andw	0x6(%rdi,%rdx), %ax
    000001c4: 	cmpl	%esi, %r8d
    000001c7: 	jle	.Ltmp1151 # Offset: 455
    000001c9: 	leal	0x5(%rcx), %esi
    000001cc: 	andw	0x8(%rdi,%rdx), %ax
    000001d1: 	cmpl	%r8d, %esi
    000001d4: 	jge	.Ltmp1151 # Offset: 468
    000001d6: 	addl	$0x6, %ecx
    000001d9: 	andw	0xa(%rdi,%rdx), %ax
    000001de: 	cmpl	%r8d, %ecx
    000001e1: 	jge	.Ltmp1151 # Offset: 481
    000001e3: 	andw	0xc(%rdi,%rdx), %ax
.Ltmp1151:
    000001e8: 	andl	%r9d, %eax
    000001eb: 	retq # Offset: 491
    000001ec: 	nopl	(%rax) # Size: 4
.Ltmp1147:
    000001f0: 	movl	%edx, %r9d
    000001f3: 	xorl	%ecx, %ecx
    000001f5: 	jmp	.Ltmp1155 # Offset: 501
.Ltmp1148:
    000001fa: 	movl	%edx, %esi
    000001fc: 	movl	%edx, %r10d
    000001ff: 	movzwl	%dx, %r9d
    00000203: 	xorl	%edx, %edx
    00000205: 	jmp	.Ltmp1156 # Offset: 517
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and6IsET_PKS0_iS0_"

Binary Function "_Z8bit_and7IsET_PKS0_iS0_" after disassembly {
  Number      : 171
  State       : disassembled
  Address     : 0x11da0
  Size        : 0x20a
  MaxSize     : 0x210
  Offset      : 0x11da0
  Section     : .text
  Orc Section : .local.text._Z8bit_and7IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0170:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp1157 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %esi
    00000015: 	movl	%esi, %ecx
    00000017: 	shrl	$0x2, %ecx
    0000001a: 	addl	$0x1, %ecx
    0000001d: 	cmpl	$0x3, %esi
    00000020: 	jbe	.Ltmp1158 # Offset: 32
    00000026: 	movd	%edx, %xmm0
    0000002a: 	movl	$0xffffffff, %eax
    0000002f: 	pinsrw	$0x1, %edx, %xmm0
    00000034: 	movl	%ecx, %edx
    00000036: 	movd	%eax, %xmm1
    0000003a: 	movq	%rdi, %rax
    0000003d: 	shrl	%edx
    0000003f: 	punpckldq	%xmm0, %xmm0
    00000043: 	punpckldq	%xmm1, %xmm1
    00000047: 	subl	$0x1, %edx
    0000004a: 	punpcklqdq	%xmm1, %xmm0
    0000004e: 	shlq	$0x4, %rdx
    00000052: 	leaq	0x10(%rdi,%rdx), %rdx
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1159:
    00000060: 	movdqu	(%rax), %xmm2
    00000064: 	addq	$0x10, %rax
    00000068: 	pand	%xmm2, %xmm0
    0000006c: 	cmpq	%rdx, %rax
    0000006f: 	jne	.Ltmp1159 # Offset: 111
    00000071: 	pextrw	$0x4, %xmm0, %edx
    00000076: 	pextrw	$0x0, %xmm0, %eax
    0000007b: 	pextrw	$0x5, %xmm0, %esi
    00000080: 	andl	%edx, %eax
    00000082: 	pextrw	$0x1, %xmm0, %edx
    00000087: 	pextrw	$0x2, %xmm0, %r10d
    0000008d: 	andl	%esi, %edx
    0000008f: 	pextrw	$0x3, %xmm0, %esi
    00000094: 	movzwl	%dx, %r9d
    00000098: 	pextrw	$0x6, %xmm0, %edx
    0000009d: 	andl	%edx, %r10d
    000000a0: 	pextrw	$0x7, %xmm0, %edx
    000000a5: 	andl	%edx, %esi
    000000a7: 	movl	%ecx, %edx
    000000a9: 	andl	$-0x2, %edx
    000000ac: 	testl	$0x80000001, %ecx
    000000b2: 	je	.Ltmp1160 # Offset: 178
.Ltmp1166:
    000000b4: 	movq	(%rdi,%rdx,8), %xmm0
    000000b9: 	movzwl	%si, %edx
    000000bc: 	movzwl	%r10w, %r10d
    000000c0: 	movzwl	%ax, %eax
    000000c3: 	shlq	$0x10, %rdx
    000000c7: 	orq	%r10, %rdx
    000000ca: 	shlq	$0x10, %rdx
    000000ce: 	orq	%r9, %rdx
    000000d1: 	shlq	$0x10, %rdx
    000000d5: 	orq	%rax, %rdx
    000000d8: 	movq	%rdx, %xmm3
    000000dd: 	pand	%xmm3, %xmm0
    000000e1: 	pextrw	$0x0, %xmm0, %eax
    000000e6: 	pextrw	$0x1, %xmm0, %r9d
    000000ec: 	pextrw	$0x2, %xmm0, %r10d
    000000f2: 	pextrw	$0x3, %xmm0, %esi
.Ltmp1160:
    000000f7: 	movl	%r9d, %edx
    000000fa: 	shll	$0x2, %ecx
    000000fd: 	andl	%r10d, %edx
    00000100: 	andl	%esi, %edx
    00000102: 	movl	%edx, %r9d
.Ltmp1165:
    00000105: 	cmpl	%ecx, %r8d
    00000108: 	jle	.Ltmp1161 # Offset: 264
    0000010e: 	movl	%r8d, %r11d
    00000111: 	subl	%ecx, %r11d
    00000114: 	leal	-0x1(%r11), %edx
    00000118: 	cmpl	$0x6, %edx
    0000011b: 	jbe	.Ltmp1162 # Offset: 283
    0000011d: 	movslq	%ecx, %rdx
    00000120: 	pcmpeqd	%xmm0, %xmm0
    00000124: 	leaq	(%rdi,%rdx,2), %rsi
    00000128: 	movl	%r11d, %edx
    0000012b: 	shrl	$0x3, %edx
    0000012e: 	leal	-0x1(%rdx), %r10d
    00000132: 	leaq	0x10(%rsi), %rdx
    00000136: 	shlq	$0x4, %r10
    0000013a: 	addq	%rdx, %r10
    0000013d: 	jmp	.Ltmp1163 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp1164:
    00000140: 	addq	$0x10, %rdx
.Ltmp1163:
    00000144: 	movdqu	(%rsi), %xmm1
    00000148: 	movq	%rdx, %rsi
    0000014b: 	pand	%xmm1, %xmm0
    0000014f: 	cmpq	%r10, %rdx
    00000152: 	jne	.Ltmp1164 # Offset: 338
    00000154: 	movdqa	%xmm0, %xmm1
    00000158: 	psrldq	$0x8, %xmm1
    0000015d: 	pand	%xmm1, %xmm0
    00000161: 	movdqa	%xmm0, %xmm1
    00000165: 	psrldq	$0x4, %xmm1
    0000016a: 	pand	%xmm1, %xmm0
    0000016e: 	movdqa	%xmm0, %xmm1
    00000172: 	psrldq	$0x2, %xmm1
    00000177: 	pand	%xmm1, %xmm0
    0000017b: 	pextrw	$0x0, %xmm0, %edx
    00000180: 	andl	%edx, %eax
    00000182: 	movl	%r11d, %edx
    00000185: 	andl	$-0x8, %edx
    00000188: 	addl	%edx, %ecx
    0000018a: 	cmpl	%r11d, %edx
    0000018d: 	je	.Ltmp1161 # Offset: 397
.Ltmp1162:
    0000018f: 	movslq	%ecx, %rsi
    00000192: 	leaq	(%rsi,%rsi), %rdx
    00000196: 	andw	(%rdi,%rsi,2), %ax
    0000019a: 	leal	0x1(%rcx), %esi
    0000019d: 	cmpl	%r8d, %esi
    000001a0: 	jge	.Ltmp1161 # Offset: 416
    000001a2: 	leal	0x2(%rcx), %esi
    000001a5: 	andw	0x2(%rdi,%rdx), %ax
    000001aa: 	cmpl	%r8d, %esi
    000001ad: 	jge	.Ltmp1161 # Offset: 429
    000001af: 	leal	0x3(%rcx), %esi
    000001b2: 	andw	0x4(%rdi,%rdx), %ax
    000001b7: 	cmpl	%esi, %r8d
    000001ba: 	jle	.Ltmp1161 # Offset: 442
    000001bc: 	leal	0x4(%rcx), %esi
    000001bf: 	andw	0x6(%rdi,%rdx), %ax
    000001c4: 	cmpl	%esi, %r8d
    000001c7: 	jle	.Ltmp1161 # Offset: 455
    000001c9: 	leal	0x5(%rcx), %esi
    000001cc: 	andw	0x8(%rdi,%rdx), %ax
    000001d1: 	cmpl	%r8d, %esi
    000001d4: 	jge	.Ltmp1161 # Offset: 468
    000001d6: 	addl	$0x6, %ecx
    000001d9: 	andw	0xa(%rdi,%rdx), %ax
    000001de: 	cmpl	%r8d, %ecx
    000001e1: 	jge	.Ltmp1161 # Offset: 481
    000001e3: 	andw	0xc(%rdi,%rdx), %ax
.Ltmp1161:
    000001e8: 	andl	%r9d, %eax
    000001eb: 	retq # Offset: 491
    000001ec: 	nopl	(%rax) # Size: 4
.Ltmp1157:
    000001f0: 	movl	%edx, %r9d
    000001f3: 	xorl	%ecx, %ecx
    000001f5: 	jmp	.Ltmp1165 # Offset: 501
.Ltmp1158:
    000001fa: 	movl	%edx, %esi
    000001fc: 	movl	%edx, %r10d
    000001ff: 	movzwl	%dx, %r9d
    00000203: 	xorl	%edx, %edx
    00000205: 	jmp	.Ltmp1166 # Offset: 517
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and7IsET_PKS0_iS0_"

Binary Function "_Z8bit_and8IsET_PKS0_iS0_" after disassembly {
  Number      : 172
  State       : disassembled
  Address     : 0x11fb0
  Size        : 0x181
  MaxSize     : 0x190
  Offset      : 0x11fb0
  Section     : .text
  Orc Section : .local.text._Z8bit_and8IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0171:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r9d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x7, %esi
    0000000c: 	jle	.Ltmp1167 # Offset: 12
    00000012: 	leal	-0x8(%rsi), %ecx
    00000015: 	movd	%edx, %xmm0
    00000019: 	xorl	%eax, %eax
    0000001b: 	shrl	$0x3, %ecx
    0000001e: 	punpcklwd	%xmm0, %xmm0
    00000022: 	addl	$0x1, %ecx
    00000025: 	pshufd	$0x0, %xmm0, %xmm0
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1168:
    00000030: 	movq	%rax, %rdx
    00000033: 	addq	$0x1, %rax
    00000037: 	shlq	$0x4, %rdx
    0000003b: 	movdqu	(%rdi,%rdx), %xmm1
    00000040: 	pand	%xmm1, %xmm0
    00000044: 	cmpl	%eax, %ecx
    00000046: 	ja	.Ltmp1168 # Offset: 70
    00000048: 	pextrw	$0x1, %xmm0, %edx
    0000004d: 	pextrw	$0x2, %xmm0, %esi
    00000052: 	pextrw	$0x0, %xmm0, %eax
    00000057: 	shll	$0x3, %ecx
    0000005a: 	andl	%edx, %esi
    0000005c: 	pextrw	$0x3, %xmm0, %edx
    00000061: 	andl	%edx, %esi
    00000063: 	pextrw	$0x4, %xmm0, %edx
    00000068: 	andl	%edx, %esi
    0000006a: 	pextrw	$0x5, %xmm0, %edx
    0000006f: 	andl	%edx, %esi
    00000071: 	pextrw	$0x6, %xmm0, %edx
    00000076: 	andl	%edx, %esi
    00000078: 	pextrw	$0x7, %xmm0, %edx
    0000007d: 	andl	%edx, %esi
.Ltmp1173:
    0000007f: 	cmpl	%ecx, %r9d
    00000082: 	jle	.Ltmp1169 # Offset: 130
    00000088: 	movl	%r9d, %r11d
    0000008b: 	subl	%ecx, %r11d
    0000008e: 	leal	-0x1(%r11), %edx
    00000092: 	cmpl	$0x6, %edx
    00000095: 	jbe	.Ltmp1170 # Offset: 149
    00000097: 	movslq	%ecx, %rdx
    0000009a: 	pcmpeqd	%xmm0, %xmm0
    0000009e: 	leaq	(%rdi,%rdx,2), %r8
    000000a2: 	movl	%r11d, %edx
    000000a5: 	shrl	$0x3, %edx
    000000a8: 	leal	-0x1(%rdx), %r10d
    000000ac: 	leaq	0x10(%r8), %rdx
    000000b0: 	shlq	$0x4, %r10
    000000b4: 	addq	%rdx, %r10
    000000b7: 	jmp	.Ltmp1171 # Offset: 183
    000000b9: 	nopl	(%rax) # Size: 7
.Ltmp1172:
    000000c0: 	addq	$0x10, %rdx
.Ltmp1171:
    000000c4: 	movdqu	(%r8), %xmm1
    000000c9: 	movq	%rdx, %r8
    000000cc: 	pand	%xmm1, %xmm0
    000000d0: 	cmpq	%rdx, %r10
    000000d3: 	jne	.Ltmp1172 # Offset: 211
    000000d5: 	movdqa	%xmm0, %xmm1
    000000d9: 	psrldq	$0x8, %xmm1
    000000de: 	pand	%xmm1, %xmm0
    000000e2: 	movdqa	%xmm0, %xmm1
    000000e6: 	psrldq	$0x4, %xmm1
    000000eb: 	pand	%xmm1, %xmm0
    000000ef: 	movdqa	%xmm0, %xmm1
    000000f3: 	psrldq	$0x2, %xmm1
    000000f8: 	pand	%xmm1, %xmm0
    000000fc: 	pextrw	$0x0, %xmm0, %edx
    00000101: 	andl	%edx, %eax
    00000103: 	movl	%r11d, %edx
    00000106: 	andl	$-0x8, %edx
    00000109: 	addl	%edx, %ecx
    0000010b: 	cmpl	%r11d, %edx
    0000010e: 	je	.Ltmp1169 # Offset: 270
.Ltmp1170:
    00000110: 	movslq	%ecx, %r8
    00000113: 	leaq	(%r8,%r8), %rdx
    00000117: 	andw	(%rdi,%r8,2), %ax
    0000011c: 	leal	0x1(%rcx), %r8d
    00000120: 	cmpl	%r8d, %r9d
    00000123: 	jle	.Ltmp1169 # Offset: 291
    00000125: 	leal	0x2(%rcx), %r8d
    00000129: 	andw	0x2(%rdi,%rdx), %ax
    0000012e: 	cmpl	%r9d, %r8d
    00000131: 	jge	.Ltmp1169 # Offset: 305
    00000133: 	leal	0x3(%rcx), %r8d
    00000137: 	andw	0x4(%rdi,%rdx), %ax
    0000013c: 	cmpl	%r9d, %r8d
    0000013f: 	jge	.Ltmp1169 # Offset: 319
    00000141: 	leal	0x4(%rcx), %r8d
    00000145: 	andw	0x6(%rdi,%rdx), %ax
    0000014a: 	cmpl	%r9d, %r8d
    0000014d: 	jge	.Ltmp1169 # Offset: 333
    0000014f: 	leal	0x5(%rcx), %r8d
    00000153: 	andw	0x8(%rdi,%rdx), %ax
    00000158: 	cmpl	%r9d, %r8d
    0000015b: 	jge	.Ltmp1169 # Offset: 347
    0000015d: 	addl	$0x6, %ecx
    00000160: 	andw	0xa(%rdi,%rdx), %ax
    00000165: 	cmpl	%r9d, %ecx
    00000168: 	jge	.Ltmp1169 # Offset: 360
    0000016a: 	andw	0xc(%rdi,%rdx), %ax
.Ltmp1169:
    0000016f: 	andl	%esi, %eax
    00000171: 	retq # Offset: 369
    00000172: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1167:
    00000178: 	movl	%edx, %esi
    0000017a: 	xorl	%ecx, %ecx
    0000017c: 	jmp	.Ltmp1173 # Offset: 380
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and8IsET_PKS0_iS0_"

Binary Function "_Z7bit_or1IsET_PKS0_iS0_" after disassembly {
  Number      : 173
  State       : disassembled
  Address     : 0x12140
  Size        : 0xef
  MaxSize     : 0xf0
  Offset      : 0x12140
  Section     : .text
  Orc Section : .local.text._Z7bit_or1IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0172:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp1174 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0x6, %eax
    00000014: 	jbe	.Ltmp1175 # Offset: 20
    0000001a: 	shrl	$0x3, %esi
    0000001d: 	movq	%rdi, %rax
    00000020: 	pxor	%xmm0, %xmm0
    00000024: 	subl	$0x1, %esi
    00000027: 	shlq	$0x4, %rsi
    0000002b: 	leaq	0x10(%rdi,%rsi), %rsi
.Ltmp1176:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	addq	$0x10, %rax
    00000038: 	por	%xmm2, %xmm0
    0000003c: 	cmpq	%rsi, %rax
    0000003f: 	jne	.Ltmp1176 # Offset: 63
    00000041: 	movdqa	%xmm0, %xmm1
    00000045: 	psrldq	$0x8, %xmm1
    0000004a: 	por	%xmm1, %xmm0
    0000004e: 	movdqa	%xmm0, %xmm1
    00000052: 	psrldq	$0x4, %xmm1
    00000057: 	por	%xmm1, %xmm0
    0000005b: 	movdqa	%xmm0, %xmm1
    0000005f: 	psrldq	$0x2, %xmm1
    00000064: 	por	%xmm1, %xmm0
    00000068: 	pextrw	$0x0, %xmm0, %eax
    0000006d: 	orl	%edx, %eax
    0000006f: 	movl	%ecx, %edx
    00000071: 	andl	$-0x8, %edx
    00000074: 	testb	$0x7, %cl
    00000077: 	je	.Ltmp1177 # Offset: 119
.Ltmp1179:
    00000079: 	movslq	%edx, %r8
    0000007c: 	leaq	(%r8,%r8), %rsi
    00000080: 	orw	(%rdi,%r8,2), %ax
    00000085: 	leal	0x1(%rdx), %r8d
    00000089: 	cmpl	%r8d, %ecx
    0000008c: 	jle	.Ltmp1178 # Offset: 140
    0000008e: 	leal	0x2(%rdx), %r8d
    00000092: 	orw	0x2(%rdi,%rsi), %ax
    00000097: 	cmpl	%r8d, %ecx
    0000009a: 	jle	.Ltmp1178 # Offset: 154
    0000009c: 	leal	0x3(%rdx), %r8d
    000000a0: 	orw	0x4(%rdi,%rsi), %ax
    000000a5: 	cmpl	%r8d, %ecx
    000000a8: 	jle	.Ltmp1178 # Offset: 168
    000000aa: 	leal	0x4(%rdx), %r8d
    000000ae: 	orw	0x6(%rdi,%rsi), %ax
    000000b3: 	cmpl	%r8d, %ecx
    000000b6: 	jle	.Ltmp1178 # Offset: 182
    000000b8: 	leal	0x5(%rdx), %r8d
    000000bc: 	orw	0x8(%rdi,%rsi), %ax
    000000c1: 	cmpl	%r8d, %ecx
    000000c4: 	jle	.Ltmp1178 # Offset: 196
    000000c6: 	addl	$0x6, %edx
    000000c9: 	orw	0xa(%rdi,%rsi), %ax
    000000ce: 	cmpl	%edx, %ecx
    000000d0: 	jle	.Ltmp1178 # Offset: 208
    000000d2: 	orw	0xc(%rdi,%rsi), %ax
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1174:
    000000e0: 	movl	%edx, %eax
.Ltmp1178:
    000000e2: 	retq # Offset: 226
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1177:
    000000e8: 	retq # Offset: 232
.Ltmp1175:
    000000e9: 	movl	%edx, %eax
    000000eb: 	xorl	%edx, %edx
    000000ed: 	jmp	.Ltmp1179 # Offset: 237
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or1IsET_PKS0_iS0_"

Binary Function "_Z7bit_or2IsET_PKS0_iS0_" after disassembly {
  Number      : 174
  State       : disassembled
  Address     : 0x12230
  Size        : 0x105
  MaxSize     : 0x110
  Offset      : 0x12230
  Section     : .text
  Orc Section : .local.text._Z7bit_or2IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0173:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movq	%rdi, %rcx
    0000000a: 	addq	%rsi, %rsi
    0000000d: 	leaq	(%rdi,%rsi), %rdi
    00000011: 	cmpq	%rdi, %rcx
    00000014: 	je	.Ltmp1180 # Offset: 20
    0000001a: 	subq	$0x2, %rsi
    0000001e: 	movq	%rcx, %rax
    00000021: 	movq	%rsi, %r8
    00000024: 	shrq	%r8
    00000027: 	addq	$0x1, %r8
    0000002b: 	cmpq	$0xc, %rsi
    0000002f: 	jbe	.Ltmp1181 # Offset: 47
    00000035: 	movq	%r8, %rsi
    00000038: 	pxor	%xmm0, %xmm0
    0000003c: 	shrq	$0x3, %rsi
    00000040: 	shlq	$0x4, %rsi
    00000044: 	addq	%rcx, %rsi
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1182:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	por	%xmm2, %xmm0
    0000005c: 	cmpq	%rax, %rsi
    0000005f: 	jne	.Ltmp1182 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	psrldq	$0x8, %xmm1
    0000006a: 	por	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x4, %xmm1
    00000077: 	por	%xmm1, %xmm0
    0000007b: 	movdqa	%xmm0, %xmm1
    0000007f: 	psrldq	$0x2, %xmm1
    00000084: 	por	%xmm1, %xmm0
    00000088: 	pextrw	$0x0, %xmm0, %eax
    0000008d: 	orl	%edx, %eax
    0000008f: 	movq	%r8, %rdx
    00000092: 	andq	$-0x8, %rdx
    00000096: 	leaq	(%rcx,%rdx,2), %rcx
    0000009a: 	cmpq	%rdx, %r8
    0000009d: 	je	.Ltmp1183 # Offset: 157
.Ltmp1185:
    0000009f: 	leaq	0x2(%rcx), %rdx
    000000a3: 	orw	(%rcx), %ax
    000000a6: 	cmpq	%rdx, %rdi
    000000a9: 	je	.Ltmp1184 # Offset: 169
    000000ab: 	leaq	0x4(%rcx), %rdx
    000000af: 	orw	0x2(%rcx), %ax
    000000b3: 	cmpq	%rdx, %rdi
    000000b6: 	je	.Ltmp1184 # Offset: 182
    000000b8: 	leaq	0x6(%rcx), %rdx
    000000bc: 	orw	0x4(%rcx), %ax
    000000c0: 	cmpq	%rdx, %rdi
    000000c3: 	je	.Ltmp1184 # Offset: 195
    000000c5: 	leaq	0x8(%rcx), %rdx
    000000c9: 	orw	0x6(%rcx), %ax
    000000cd: 	cmpq	%rdx, %rdi
    000000d0: 	je	.Ltmp1184 # Offset: 208
    000000d2: 	leaq	0xa(%rcx), %rdx
    000000d6: 	orw	0x8(%rcx), %ax
    000000da: 	cmpq	%rdx, %rdi
    000000dd: 	je	.Ltmp1184 # Offset: 221
    000000df: 	leaq	0xc(%rcx), %rdx
    000000e3: 	orw	0xa(%rcx), %ax
    000000e7: 	cmpq	%rdx, %rdi
    000000ea: 	je	.Ltmp1184 # Offset: 234
    000000ec: 	orw	0xc(%rcx), %ax
    000000f0: 	retq # Offset: 240
    000000f1: 	nopl	(%rax) # Size: 7
.Ltmp1180:
    000000f8: 	movl	%edx, %eax
.Ltmp1184:
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1183:
    00000100: 	retq # Offset: 256
.Ltmp1181:
    00000101: 	movl	%edx, %eax
    00000103: 	jmp	.Ltmp1185 # Offset: 259
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or2IsET_PKS0_iS0_"

Binary Function "_Z7bit_or3IsET_PKS0_iS0_" after disassembly {
  Number      : 175
  State       : disassembled
  Address     : 0x12340
  Size        : 0x1b2
  MaxSize     : 0x1c0
  Offset      : 0x12340
  Section     : .text
  Orc Section : .local.text._Z7bit_or3IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0174:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %r9d
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%esi, %edi
    0000000d: 	testl	%r9d, %r9d
    00000010: 	jle	.Ltmp1186 # Offset: 16
    00000016: 	leal	-0x2(%rsi), %eax
    00000019: 	movl	%eax, %r10d
    0000001c: 	shrl	%r10d
    0000001f: 	leal	0x1(%r10), %esi
    00000023: 	cmpl	$0xd, %eax
    00000026: 	jbe	.Ltmp1187 # Offset: 38
    0000002c: 	movl	%esi, %r8d
    0000002f: 	movq	%rcx, %rax
    00000032: 	pxor	%xmm4, %xmm4
    00000036: 	shrl	$0x3, %r8d
    0000003a: 	subl	$0x1, %r8d
    0000003e: 	shlq	$0x5, %r8
    00000042: 	leaq	0x20(%rcx,%r8), %r8
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1188:
    00000050: 	movdqu	(%rax), %xmm0
    00000054: 	movdqu	0x10(%rax), %xmm3
    00000059: 	addq	$0x20, %rax
    0000005d: 	movdqa	%xmm0, %xmm1
    00000061: 	movdqa	%xmm0, %xmm2
    00000065: 	punpcklwd	%xmm3, %xmm0
    00000069: 	punpcklwd	%xmm3, %xmm1
    0000006d: 	punpckhwd	%xmm3, %xmm2
    00000071: 	movdqa	%xmm1, %xmm5
    00000075: 	punpcklwd	%xmm2, %xmm0
    00000079: 	punpcklwd	%xmm2, %xmm1
    0000007d: 	punpckhwd	%xmm2, %xmm5
    00000081: 	punpcklwd	%xmm5, %xmm1
    00000085: 	punpckhwd	%xmm5, %xmm0
    00000089: 	por	%xmm0, %xmm1
    0000008d: 	por	%xmm1, %xmm4
    00000091: 	cmpq	%r8, %rax
    00000094: 	jne	.Ltmp1188 # Offset: 148
    00000096: 	movdqa	%xmm4, %xmm0
    0000009a: 	psrldq	$0x8, %xmm0
    0000009f: 	por	%xmm0, %xmm4
    000000a3: 	movdqa	%xmm4, %xmm0
    000000a7: 	psrldq	$0x4, %xmm0
    000000ac: 	por	%xmm0, %xmm4
    000000b0: 	movdqa	%xmm4, %xmm0
    000000b4: 	psrldq	$0x2, %xmm0
    000000b9: 	por	%xmm0, %xmm4
    000000bd: 	pextrw	$0x0, %xmm4, %eax
    000000c2: 	orl	%edx, %eax
    000000c4: 	movl	%esi, %edx
    000000c6: 	andl	$-0x8, %edx
    000000c9: 	leal	(%rdx,%rdx), %r8d
    000000cd: 	cmpl	%edx, %esi
    000000cf: 	je	.Ltmp1189 # Offset: 207
.Ltmp1193:
    000000d5: 	movl	%r10d, %r11d
    000000d8: 	subl	%edx, %r11d
    000000db: 	leal	0x1(%r11), %r10d
    000000df: 	cmpl	$0x2, %r11d
    000000e3: 	jbe	.Ltmp1190 # Offset: 227
    000000e5: 	leaq	(%rcx,%rdx,4), %rdx
    000000e9: 	movq	(%rdx), %xmm1
    000000ed: 	movq	0x8(%rdx), %xmm2
    000000f2: 	movdqa	%xmm1, %xmm3
    000000f6: 	movdqa	%xmm1, %xmm0
    000000fa: 	punpcklwd	%xmm2, %xmm1
    000000fe: 	punpcklwd	%xmm2, %xmm3
    00000102: 	punpcklwd	%xmm2, %xmm0
    00000106: 	pshufd	$0xe, %xmm3, %xmm3
    0000010b: 	punpcklwd	%xmm3, %xmm1
    0000010f: 	punpcklwd	%xmm3, %xmm0
    00000113: 	pshufd	$0xe, %xmm1, %xmm1
    00000118: 	por	%xmm1, %xmm0
    0000011c: 	pextrw	$0x0, %xmm0, %edx
    00000121: 	pextrw	$0x1, %xmm0, %r11d
    00000127: 	orl	%r11d, %edx
    0000012a: 	orl	%eax, %edx
    0000012c: 	pextrw	$0x2, %xmm0, %eax
    00000131: 	orl	%eax, %edx
    00000133: 	pextrw	$0x3, %xmm0, %eax
    00000138: 	orl	%edx, %eax
    0000013a: 	movl	%r10d, %edx
    0000013d: 	andl	$-0x4, %edx
    00000140: 	leal	(%r8,%rdx,2), %r8d
    00000144: 	cmpl	%edx, %r10d
    00000147: 	je	.Ltmp1189 # Offset: 327
.Ltmp1190:
    00000149: 	movslq	%r8d, %r10
    0000014c: 	orw	(%rcx,%r10,2), %ax
    00000151: 	leaq	(%r10,%r10), %rdx
    00000155: 	orw	0x2(%rcx,%r10,2), %ax
    0000015b: 	leal	0x2(%r8), %r10d
    0000015f: 	cmpl	%r9d, %r10d
    00000162: 	jge	.Ltmp1189 # Offset: 354
    00000164: 	movzwl	0x6(%rcx,%rdx), %r10d
    0000016a: 	addl	$0x4, %r8d
    0000016e: 	orw	0x4(%rcx,%rdx), %r10w
    00000174: 	orl	%r10d, %eax
    00000177: 	cmpl	%r8d, %r9d
    0000017a: 	jle	.Ltmp1189 # Offset: 378
    0000017c: 	movzwl	0x8(%rcx,%rdx), %r8d
    00000182: 	orw	0xa(%rcx,%rdx), %r8w
    00000188: 	movl	%r8d, %edx
    0000018b: 	orl	%edx, %eax
.Ltmp1189:
    0000018d: 	addl	%esi, %esi
.Ltmp1192:
    0000018f: 	cmpl	%edi, %esi
    00000191: 	jge	.Ltmp1191 # Offset: 401
    00000193: 	movslq	%esi, %rsi
    00000196: 	orw	(%rcx,%rsi,2), %ax
.Ltmp1191:
    0000019a: 	retq # Offset: 410
    0000019b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1186:
    000001a0: 	movl	%edx, %eax
    000001a2: 	xorl	%esi, %esi
    000001a4: 	jmp	.Ltmp1192 # Offset: 420
.Ltmp1187:
    000001a6: 	movl	%edx, %eax
    000001a8: 	xorl	%r8d, %r8d
    000001ab: 	xorl	%edx, %edx
    000001ad: 	jmp	.Ltmp1193 # Offset: 429
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or3IsET_PKS0_iS0_"

Binary Function "_Z7bit_or4IsET_PKS0_iS0_" after disassembly {
  Number      : 176
  State       : disassembled
  Address     : 0x12500
  Size        : 0x332
  MaxSize     : 0x340
  Offset      : 0x12500
  Section     : .text
  Orc Section : .local.text._Z7bit_or4IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0175:
    00000000: 	endbr64
    00000004: 	leal	-0x3(%rsi), %r8d
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%esi, %edi
    0000000d: 	testl	%r8d, %r8d
    00000010: 	jle	.Ltmp1194 # Offset: 16
    00000016: 	leal	-0x4(%rsi), %eax
    00000019: 	movl	%eax, %r11d
    0000001c: 	shrl	$0x2, %r11d
    00000020: 	leal	0x1(%r11), %esi
    00000024: 	cmpl	$0x1b, %eax
    00000027: 	jbe	.Ltmp1195 # Offset: 39
    0000002d: 	movl	%esi, %r9d
    00000030: 	movq	%rcx, %rax
    00000033: 	pxor	%xmm6, %xmm6
    00000037: 	shrl	$0x3, %r9d
    0000003b: 	subl	$0x1, %r9d
    0000003f: 	shlq	$0x6, %r9
    00000043: 	leaq	0x40(%rcx,%r9), %r9
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1196:
    00000050: 	movdqu	(%rax), %xmm0
    00000054: 	movdqu	0x10(%rax), %xmm4
    00000059: 	addq	$0x40, %rax
    0000005d: 	movdqu	-0x20(%rax), %xmm2
    00000062: 	movdqu	-0x10(%rax), %xmm5
    00000067: 	movdqa	%xmm0, %xmm1
    0000006b: 	movdqa	%xmm0, %xmm3
    0000006f: 	punpcklwd	%xmm4, %xmm0
    00000073: 	punpcklwd	%xmm4, %xmm1
    00000077: 	punpckhwd	%xmm4, %xmm3
    0000007b: 	movdqa	%xmm2, %xmm4
    0000007f: 	movdqa	%xmm1, %xmm7
    00000083: 	punpcklwd	%xmm5, %xmm4
    00000087: 	punpcklwd	%xmm3, %xmm1
    0000008b: 	punpckhwd	%xmm3, %xmm7
    0000008f: 	punpcklwd	%xmm3, %xmm0
    00000093: 	movdqa	%xmm2, %xmm3
    00000097: 	punpckhwd	%xmm5, %xmm3
    0000009b: 	punpcklwd	%xmm7, %xmm1
    0000009f: 	punpckhwd	%xmm7, %xmm0
    000000a3: 	punpcklwd	%xmm5, %xmm2
    000000a7: 	movdqa	%xmm4, %xmm7
    000000ab: 	punpcklwd	%xmm3, %xmm4
    000000af: 	punpckhwd	%xmm3, %xmm7
    000000b3: 	punpcklwd	%xmm3, %xmm2
    000000b7: 	movdqa	%xmm0, %xmm3
    000000bb: 	punpckhwd	%xmm7, %xmm2
    000000bf: 	movdqa	%xmm0, %xmm5
    000000c3: 	punpcklwd	%xmm7, %xmm4
    000000c7: 	punpcklwd	%xmm2, %xmm3
    000000cb: 	punpckhwd	%xmm2, %xmm5
    000000cf: 	punpcklwd	%xmm2, %xmm0
    000000d3: 	movdqa	%xmm3, %xmm7
    000000d7: 	punpcklwd	%xmm5, %xmm0
    000000db: 	punpcklwd	%xmm5, %xmm3
    000000df: 	punpckhwd	%xmm5, %xmm7
    000000e3: 	movdqa	%xmm1, %xmm2
    000000e7: 	punpckhwd	%xmm7, %xmm0
    000000eb: 	punpcklwd	%xmm7, %xmm3
    000000ef: 	punpckhwd	%xmm4, %xmm2
    000000f3: 	por	%xmm0, %xmm3
    000000f7: 	movdqa	%xmm1, %xmm0
    000000fb: 	punpcklwd	%xmm4, %xmm1
    000000ff: 	punpcklwd	%xmm4, %xmm0
    00000103: 	punpcklwd	%xmm2, %xmm1
    00000107: 	movdqa	%xmm0, %xmm5
    0000010b: 	punpcklwd	%xmm2, %xmm0
    0000010f: 	punpckhwd	%xmm2, %xmm5
    00000113: 	punpcklwd	%xmm5, %xmm0
    00000117: 	punpckhwd	%xmm5, %xmm1
    0000011b: 	por	%xmm1, %xmm0
    0000011f: 	por	%xmm0, %xmm3
    00000123: 	por	%xmm3, %xmm6
    00000127: 	cmpq	%r9, %rax
    0000012a: 	jne	.Ltmp1196 # Offset: 298
    00000130: 	movdqa	%xmm6, %xmm0
    00000134: 	movl	%esi, %r10d
    00000137: 	psrldq	$0x8, %xmm0
    0000013c: 	andl	$-0x8, %r10d
    00000140: 	por	%xmm0, %xmm6
    00000144: 	movdqa	%xmm6, %xmm0
    00000148: 	psrldq	$0x4, %xmm0
    0000014d: 	por	%xmm0, %xmm6
    00000151: 	movdqa	%xmm6, %xmm0
    00000155: 	psrldq	$0x2, %xmm0
    0000015a: 	por	%xmm0, %xmm6
    0000015e: 	pextrw	$0x0, %xmm6, %eax
    00000163: 	orl	%edx, %eax
    00000165: 	leal	(,%r10,4), %edx
    0000016d: 	cmpl	%esi, %r10d
    00000170: 	je	.Ltmp1197 # Offset: 368
.Ltmp1201:
    00000176: 	subl	%r10d, %r11d
    00000179: 	leal	0x1(%r11), %r9d
    0000017d: 	cmpl	$0x2, %r11d
    00000181: 	jbe	.Ltmp1198 # Offset: 385
    00000187: 	leaq	(%rcx,%r10,8), %r10
    0000018b: 	movq	(%r10), %xmm0
    00000190: 	movq	0x8(%r10), %xmm4
    00000196: 	movq	0x10(%r10), %xmm3
    0000019c: 	movq	0x18(%r10), %xmm1
    000001a2: 	movdqa	%xmm0, %xmm5
    000001a6: 	movdqa	%xmm0, %xmm2
    000001aa: 	punpcklwd	%xmm4, %xmm0
    000001ae: 	punpcklwd	%xmm4, %xmm5
    000001b2: 	punpcklwd	%xmm4, %xmm2
    000001b6: 	movdqa	%xmm3, %xmm4
    000001ba: 	pshufd	$0xe, %xmm5, %xmm5
    000001bf: 	punpcklwd	%xmm1, %xmm4
    000001c3: 	punpcklwd	%xmm5, %xmm2
    000001c7: 	punpcklwd	%xmm5, %xmm0
    000001cb: 	movdqa	%xmm3, %xmm5
    000001cf: 	punpcklwd	%xmm1, %xmm5
    000001d3: 	punpcklwd	%xmm1, %xmm3
    000001d7: 	pshufd	$0xe, %xmm0, %xmm0
    000001dc: 	pshufd	$0xe, %xmm5, %xmm5
    000001e1: 	movdqa	%xmm0, %xmm1
    000001e5: 	punpcklwd	%xmm5, %xmm3
    000001e9: 	punpcklwd	%xmm5, %xmm4
    000001ed: 	movdqa	%xmm0, %xmm5
    000001f1: 	pshufd	$0xe, %xmm3, %xmm3
    000001f6: 	punpcklwd	%xmm3, %xmm5
    000001fa: 	punpcklwd	%xmm3, %xmm0
    000001fe: 	punpcklwd	%xmm3, %xmm1
    00000202: 	pshufd	$0xe, %xmm5, %xmm5
    00000207: 	movdqa	%xmm2, %xmm3
    0000020b: 	punpcklwd	%xmm5, %xmm0
    0000020f: 	punpcklwd	%xmm5, %xmm1
    00000213: 	punpcklwd	%xmm4, %xmm3
    00000217: 	pshufd	$0xe, %xmm0, %xmm0
    0000021c: 	pshufd	$0xe, %xmm3, %xmm3
    00000221: 	por	%xmm1, %xmm0
    00000225: 	movdqa	%xmm2, %xmm1
    00000229: 	punpcklwd	%xmm4, %xmm2
    0000022d: 	punpcklwd	%xmm4, %xmm1
    00000231: 	punpcklwd	%xmm3, %xmm2
    00000235: 	punpcklwd	%xmm3, %xmm1
    00000239: 	pshufd	$0xe, %xmm2, %xmm2
    0000023e: 	por	%xmm2, %xmm1
    00000242: 	por	%xmm1, %xmm0
    00000246: 	pextrw	$0x0, %xmm0, %r10d
    0000024c: 	pextrw	$0x1, %xmm0, %r11d
    00000252: 	orl	%r11d, %r10d
    00000255: 	orl	%eax, %r10d
    00000258: 	pextrw	$0x2, %xmm0, %eax
    0000025d: 	orl	%eax, %r10d
    00000260: 	pextrw	$0x3, %xmm0, %eax
    00000265: 	orl	%r10d, %eax
    00000268: 	movl	%r9d, %r10d
    0000026b: 	andl	$-0x4, %r10d
    0000026f: 	leal	(%rdx,%r10,4), %edx
    00000273: 	cmpl	%r10d, %r9d
    00000276: 	je	.Ltmp1197 # Offset: 630
.Ltmp1198:
    00000278: 	movslq	%edx, %r10
    0000027b: 	orw	(%rcx,%r10,2), %ax
    00000280: 	leaq	(%r10,%r10), %r9
    00000284: 	orw	0x2(%rcx,%r10,2), %ax
    0000028a: 	orw	0x4(%rcx,%r10,2), %ax
    00000290: 	orw	0x6(%rcx,%r10,2), %ax
    00000296: 	leal	0x4(%rdx), %r10d
    0000029a: 	cmpl	%r10d, %r8d
    0000029d: 	jle	.Ltmp1197 # Offset: 669
    0000029f: 	movzwl	0xa(%rcx,%r9), %r10d
    000002a5: 	addl	$0x8, %edx
    000002a8: 	orw	0xc(%rcx,%r9), %r10w
    000002ae: 	orw	0x8(%rcx,%r9), %r10w
    000002b4: 	orw	0xe(%rcx,%r9), %r10w
    000002ba: 	orl	%r10d, %eax
    000002bd: 	cmpl	%edx, %r8d
    000002c0: 	jle	.Ltmp1197 # Offset: 704
    000002c2: 	movzwl	0x12(%rcx,%r9), %edx
    000002c8: 	orw	0x14(%rcx,%r9), %dx
    000002ce: 	orw	0x10(%rcx,%r9), %dx
    000002d4: 	orw	0x16(%rcx,%r9), %dx
    000002da: 	orl	%edx, %eax
.Ltmp1197:
    000002dc: 	shll	$0x2, %esi
.Ltmp1200:
    000002df: 	cmpl	%esi, %edi
    000002e1: 	jle	.Ltmp1199 # Offset: 737
    000002e3: 	movslq	%esi, %rdx
    000002e6: 	leaq	(%rdx,%rdx), %r8
    000002ea: 	orw	(%rcx,%rdx,2), %ax
    000002ee: 	leal	0x1(%rsi), %edx
    000002f1: 	cmpl	%edi, %edx
    000002f3: 	jge	.Ltmp1199 # Offset: 755
    000002f5: 	leal	0x2(%rsi), %edx
    000002f8: 	orw	0x2(%rcx,%r8), %ax
    000002fe: 	cmpl	%edx, %edi
    00000300: 	jle	.Ltmp1199 # Offset: 768
    00000302: 	addl	$0x3, %esi
    00000305: 	orw	0x4(%rcx,%r8), %ax
    0000030b: 	cmpl	%esi, %edi
    0000030d: 	jle	.Ltmp1199 # Offset: 781
    0000030f: 	orw	0x6(%rcx,%r8), %ax
.Ltmp1199:
    00000315: 	retq # Offset: 789
    00000316: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1194:
    00000320: 	movl	%edx, %eax
    00000322: 	xorl	%esi, %esi
    00000324: 	jmp	.Ltmp1200 # Offset: 804
.Ltmp1195:
    00000326: 	movl	%edx, %eax
    00000328: 	xorl	%r10d, %r10d
    0000032b: 	xorl	%edx, %edx
    0000032d: 	jmp	.Ltmp1201 # Offset: 813
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or4IsET_PKS0_iS0_"

Binary Function "_Z7bit_or5IsET_PKS0_iS0_" after disassembly {
  Number      : 177
  State       : disassembled
  Address     : 0x12840
  Size        : 0x1fa
  MaxSize     : 0x200
  Offset      : 0x12840
  Section     : .text
  Orc Section : .local.text._Z7bit_or5IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0176:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r10d
    00000007: 	leal	-0x1(%rsi), %esi
    0000000a: 	movq	%rdi, %r9
    0000000d: 	movl	%edx, %eax
    0000000f: 	testl	%esi, %esi
    00000011: 	jle	.Ltmp1202 # Offset: 17
    00000017: 	leal	-0x2(%r10), %ecx
    0000001b: 	movl	%ecx, %edi
    0000001d: 	shrl	%edi
    0000001f: 	addl	$0x1, %edi
    00000022: 	cmpl	$0x5, %ecx
    00000025: 	jbe	.Ltmp1203 # Offset: 37
    0000002b: 	movd	%edx, %xmm0
    0000002f: 	pxor	%xmm1, %xmm1
    00000033: 	movq	%r9, %rax
    00000036: 	pinsrw	$0x1, %edx, %xmm0
    0000003b: 	movl	%edi, %edx
    0000003d: 	shrl	$0x2, %edx
    00000040: 	punpckldq	%xmm1, %xmm0
    00000044: 	pxor	%xmm1, %xmm1
    00000048: 	subl	$0x1, %edx
    0000004b: 	punpcklqdq	%xmm1, %xmm0
    0000004f: 	shlq	$0x4, %rdx
    00000053: 	leaq	0x10(%r9,%rdx), %rdx
    00000058: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1204:
    00000060: 	movdqu	(%rax), %xmm2
    00000064: 	addq	$0x10, %rax
    00000068: 	por	%xmm2, %xmm0
    0000006c: 	cmpq	%rdx, %rax
    0000006f: 	jne	.Ltmp1204 # Offset: 111
    00000071: 	pextrw	$0x2, %xmm0, %edx
    00000076: 	pextrw	$0x0, %xmm0, %eax
    0000007b: 	pextrw	$0x1, %xmm0, %ecx
    00000080: 	movl	%edi, %r8d
    00000083: 	orl	%edx, %eax
    00000085: 	pextrw	$0x4, %xmm0, %edx
    0000008a: 	andl	$-0x4, %r8d
    0000008e: 	orl	%edx, %eax
    00000090: 	pextrw	$0x6, %xmm0, %edx
    00000095: 	orl	%edx, %eax
    00000097: 	pextrw	$0x3, %xmm0, %edx
    0000009c: 	orl	%edx, %ecx
    0000009e: 	pextrw	$0x5, %xmm0, %edx
    000000a3: 	orl	%edx, %ecx
    000000a5: 	pextrw	$0x7, %xmm0, %edx
    000000aa: 	orl	%edx, %ecx
    000000ac: 	leal	(%r8,%r8), %edx
    000000b0: 	cmpl	%r8d, %edi
    000000b3: 	je	.Ltmp1205 # Offset: 179
.Ltmp1211:
    000000b5: 	movslq	%edx, %r11
    000000b8: 	leaq	(%r11,%r11), %r8
    000000bc: 	orw	(%r9,%r11,2), %ax
    000000c1: 	orw	0x2(%r9,%r11,2), %cx
    000000c7: 	leal	0x2(%rdx), %r11d
    000000cb: 	cmpl	%r11d, %esi
    000000ce: 	jle	.Ltmp1205 # Offset: 206
    000000d0: 	addl	$0x4, %edx
    000000d3: 	orw	0x4(%r9,%r8), %ax
    000000d9: 	orw	0x6(%r9,%r8), %cx
    000000df: 	cmpl	%edx, %esi
    000000e1: 	jle	.Ltmp1205 # Offset: 225
    000000e3: 	orw	0x8(%r9,%r8), %ax
    000000e9: 	orw	0xa(%r9,%r8), %cx
.Ltmp1205:
    000000ef: 	addl	%edi, %edi
.Ltmp1210:
    000000f1: 	cmpl	%edi, %r10d
    000000f4: 	jle	.Ltmp1206 # Offset: 244
    000000fa: 	movl	%r10d, %r11d
    000000fd: 	subl	%edi, %r11d
    00000100: 	leal	-0x1(%r11), %edx
    00000104: 	cmpl	$0x6, %edx
    00000107: 	jbe	.Ltmp1207 # Offset: 263
    00000109: 	movslq	%edi, %rdx
    0000010c: 	pxor	%xmm0, %xmm0
    00000110: 	leaq	(%r9,%rdx,2), %rsi
    00000114: 	movl	%r11d, %edx
    00000117: 	shrl	$0x3, %edx
    0000011a: 	leal	-0x1(%rdx), %r8d
    0000011e: 	leaq	0x10(%rsi), %rdx
    00000122: 	shlq	$0x4, %r8
    00000126: 	addq	%rdx, %r8
    00000129: 	jmp	.Ltmp1208 # Offset: 297
    0000012b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1209:
    00000130: 	addq	$0x10, %rdx
.Ltmp1208:
    00000134: 	movdqu	(%rsi), %xmm1
    00000138: 	movq	%rdx, %rsi
    0000013b: 	por	%xmm1, %xmm0
    0000013f: 	cmpq	%rdx, %r8
    00000142: 	jne	.Ltmp1209 # Offset: 322
    00000144: 	movdqa	%xmm0, %xmm1
    00000148: 	psrldq	$0x8, %xmm1
    0000014d: 	por	%xmm1, %xmm0
    00000151: 	movdqa	%xmm0, %xmm1
    00000155: 	psrldq	$0x4, %xmm1
    0000015a: 	por	%xmm1, %xmm0
    0000015e: 	movdqa	%xmm0, %xmm1
    00000162: 	psrldq	$0x2, %xmm1
    00000167: 	por	%xmm1, %xmm0
    0000016b: 	pextrw	$0x0, %xmm0, %edx
    00000170: 	orl	%edx, %eax
    00000172: 	movl	%r11d, %edx
    00000175: 	andl	$-0x8, %edx
    00000178: 	addl	%edx, %edi
    0000017a: 	cmpl	%r11d, %edx
    0000017d: 	je	.Ltmp1206 # Offset: 381
.Ltmp1207:
    0000017f: 	movslq	%edi, %rsi
    00000182: 	leaq	(%rsi,%rsi), %rdx
    00000186: 	orw	(%r9,%rsi,2), %ax
    0000018b: 	leal	0x1(%rdi), %esi
    0000018e: 	cmpl	%esi, %r10d
    00000191: 	jle	.Ltmp1206 # Offset: 401
    00000193: 	leal	0x2(%rdi), %esi
    00000196: 	orw	0x2(%r9,%rdx), %ax
    0000019c: 	cmpl	%esi, %r10d
    0000019f: 	jle	.Ltmp1206 # Offset: 415
    000001a1: 	leal	0x3(%rdi), %esi
    000001a4: 	orw	0x4(%r9,%rdx), %ax
    000001aa: 	cmpl	%esi, %r10d
    000001ad: 	jle	.Ltmp1206 # Offset: 429
    000001af: 	leal	0x4(%rdi), %esi
    000001b2: 	orw	0x6(%r9,%rdx), %ax
    000001b8: 	cmpl	%esi, %r10d
    000001bb: 	jle	.Ltmp1206 # Offset: 443
    000001bd: 	leal	0x5(%rdi), %esi
    000001c0: 	orw	0x8(%r9,%rdx), %ax
    000001c6: 	cmpl	%esi, %r10d
    000001c9: 	jle	.Ltmp1206 # Offset: 457
    000001cb: 	addl	$0x6, %edi
    000001ce: 	orw	0xa(%r9,%rdx), %ax
    000001d4: 	cmpl	%edi, %r10d
    000001d7: 	jle	.Ltmp1206 # Offset: 471
    000001d9: 	orw	0xc(%r9,%rdx), %ax
.Ltmp1206:
    000001df: 	orl	%ecx, %eax
    000001e1: 	retq # Offset: 481
    000001e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1202:
    000001e8: 	movl	%edx, %ecx
    000001ea: 	xorl	%edi, %edi
    000001ec: 	jmp	.Ltmp1210 # Offset: 492
.Ltmp1203:
    000001f1: 	movl	%edx, %ecx
    000001f3: 	xorl	%edx, %edx
    000001f5: 	jmp	.Ltmp1211 # Offset: 501
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or5IsET_PKS0_iS0_"

Binary Function "_Z7bit_or6IsET_PKS0_iS0_" after disassembly {
  Number      : 178
  State       : disassembled
  Address     : 0x12a40
  Size        : 0x1fa
  MaxSize     : 0x200
  Offset      : 0x12a40
  Section     : .text
  Orc Section : .local.text._Z7bit_or6IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0177:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp1212 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %esi
    00000015: 	movl	%esi, %ecx
    00000017: 	shrl	$0x2, %ecx
    0000001a: 	addl	$0x1, %ecx
    0000001d: 	cmpl	$0x3, %esi
    00000020: 	jbe	.Ltmp1213 # Offset: 32
    00000026: 	movd	%edx, %xmm0
    0000002a: 	pxor	%xmm1, %xmm1
    0000002e: 	movq	%rdi, %rax
    00000031: 	pinsrw	$0x1, %edx, %xmm0
    00000036: 	movl	%ecx, %edx
    00000038: 	shrl	%edx
    0000003a: 	punpckldq	%xmm0, %xmm0
    0000003e: 	subl	$0x1, %edx
    00000041: 	punpcklqdq	%xmm1, %xmm0
    00000045: 	shlq	$0x4, %rdx
    00000049: 	leaq	0x10(%rdi,%rdx), %rdx
    0000004e: 	nop # Size: 2
.Ltmp1214:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	por	%xmm2, %xmm0
    0000005c: 	cmpq	%rax, %rdx
    0000005f: 	jne	.Ltmp1214 # Offset: 95
    00000061: 	pextrw	$0x4, %xmm0, %edx
    00000066: 	pextrw	$0x0, %xmm0, %eax
    0000006b: 	pextrw	$0x5, %xmm0, %esi
    00000070: 	orl	%edx, %eax
    00000072: 	pextrw	$0x1, %xmm0, %edx
    00000077: 	pextrw	$0x2, %xmm0, %r10d
    0000007d: 	orl	%esi, %edx
    0000007f: 	pextrw	$0x3, %xmm0, %esi
    00000084: 	movzwl	%dx, %r9d
    00000088: 	pextrw	$0x6, %xmm0, %edx
    0000008d: 	orl	%edx, %r10d
    00000090: 	pextrw	$0x7, %xmm0, %edx
    00000095: 	orl	%edx, %esi
    00000097: 	movl	%ecx, %edx
    00000099: 	andl	$-0x2, %edx
    0000009c: 	testl	$0x80000001, %ecx
    000000a2: 	je	.Ltmp1215 # Offset: 162
.Ltmp1221:
    000000a4: 	movq	(%rdi,%rdx,8), %xmm0
    000000a9: 	movzwl	%si, %edx
    000000ac: 	movzwl	%r10w, %r10d
    000000b0: 	movzwl	%ax, %eax
    000000b3: 	shlq	$0x10, %rdx
    000000b7: 	orq	%r10, %rdx
    000000ba: 	shlq	$0x10, %rdx
    000000be: 	orq	%r9, %rdx
    000000c1: 	shlq	$0x10, %rdx
    000000c5: 	orq	%rax, %rdx
    000000c8: 	movq	%rdx, %xmm3
    000000cd: 	por	%xmm3, %xmm0
    000000d1: 	pextrw	$0x0, %xmm0, %eax
    000000d6: 	pextrw	$0x1, %xmm0, %r9d
    000000dc: 	pextrw	$0x2, %xmm0, %r10d
    000000e2: 	pextrw	$0x3, %xmm0, %esi
.Ltmp1215:
    000000e7: 	movl	%r9d, %edx
    000000ea: 	shll	$0x2, %ecx
    000000ed: 	orl	%r10d, %edx
    000000f0: 	orl	%esi, %edx
    000000f2: 	movl	%edx, %r9d
.Ltmp1220:
    000000f5: 	cmpl	%ecx, %r8d
    000000f8: 	jle	.Ltmp1216 # Offset: 248
    000000fe: 	movl	%r8d, %r11d
    00000101: 	subl	%ecx, %r11d
    00000104: 	leal	-0x1(%r11), %edx
    00000108: 	cmpl	$0x6, %edx
    0000010b: 	jbe	.Ltmp1217 # Offset: 267
    0000010d: 	movslq	%ecx, %rdx
    00000110: 	pxor	%xmm0, %xmm0
    00000114: 	leaq	(%rdi,%rdx,2), %rsi
    00000118: 	movl	%r11d, %edx
    0000011b: 	shrl	$0x3, %edx
    0000011e: 	leal	-0x1(%rdx), %r10d
    00000122: 	leaq	0x10(%rsi), %rdx
    00000126: 	shlq	$0x4, %r10
    0000012a: 	addq	%rdx, %r10
    0000012d: 	jmp	.Ltmp1218 # Offset: 301
    0000012f: 	nop # Size: 1
.Ltmp1219:
    00000130: 	addq	$0x10, %rdx
.Ltmp1218:
    00000134: 	movdqu	(%rsi), %xmm1
    00000138: 	movq	%rdx, %rsi
    0000013b: 	por	%xmm1, %xmm0
    0000013f: 	cmpq	%r10, %rdx
    00000142: 	jne	.Ltmp1219 # Offset: 322
    00000144: 	movdqa	%xmm0, %xmm1
    00000148: 	psrldq	$0x8, %xmm1
    0000014d: 	por	%xmm1, %xmm0
    00000151: 	movdqa	%xmm0, %xmm1
    00000155: 	psrldq	$0x4, %xmm1
    0000015a: 	por	%xmm1, %xmm0
    0000015e: 	movdqa	%xmm0, %xmm1
    00000162: 	psrldq	$0x2, %xmm1
    00000167: 	por	%xmm1, %xmm0
    0000016b: 	pextrw	$0x0, %xmm0, %edx
    00000170: 	orl	%edx, %eax
    00000172: 	movl	%r11d, %edx
    00000175: 	andl	$-0x8, %edx
    00000178: 	addl	%edx, %ecx
    0000017a: 	cmpl	%r11d, %edx
    0000017d: 	je	.Ltmp1216 # Offset: 381
.Ltmp1217:
    0000017f: 	movslq	%ecx, %rsi
    00000182: 	leaq	(%rsi,%rsi), %rdx
    00000186: 	orw	(%rdi,%rsi,2), %ax
    0000018a: 	leal	0x1(%rcx), %esi
    0000018d: 	cmpl	%r8d, %esi
    00000190: 	jge	.Ltmp1216 # Offset: 400
    00000192: 	leal	0x2(%rcx), %esi
    00000195: 	orw	0x2(%rdi,%rdx), %ax
    0000019a: 	cmpl	%r8d, %esi
    0000019d: 	jge	.Ltmp1216 # Offset: 413
    0000019f: 	leal	0x3(%rcx), %esi
    000001a2: 	orw	0x4(%rdi,%rdx), %ax
    000001a7: 	cmpl	%esi, %r8d
    000001aa: 	jle	.Ltmp1216 # Offset: 426
    000001ac: 	leal	0x4(%rcx), %esi
    000001af: 	orw	0x6(%rdi,%rdx), %ax
    000001b4: 	cmpl	%esi, %r8d
    000001b7: 	jle	.Ltmp1216 # Offset: 439
    000001b9: 	leal	0x5(%rcx), %esi
    000001bc: 	orw	0x8(%rdi,%rdx), %ax
    000001c1: 	cmpl	%r8d, %esi
    000001c4: 	jge	.Ltmp1216 # Offset: 452
    000001c6: 	addl	$0x6, %ecx
    000001c9: 	orw	0xa(%rdi,%rdx), %ax
    000001ce: 	cmpl	%r8d, %ecx
    000001d1: 	jge	.Ltmp1216 # Offset: 465
    000001d3: 	orw	0xc(%rdi,%rdx), %ax
.Ltmp1216:
    000001d8: 	orl	%r9d, %eax
    000001db: 	retq # Offset: 475
    000001dc: 	nopl	(%rax) # Size: 4
.Ltmp1212:
    000001e0: 	movl	%edx, %r9d
    000001e3: 	xorl	%ecx, %ecx
    000001e5: 	jmp	.Ltmp1220 # Offset: 485
.Ltmp1213:
    000001ea: 	movl	%edx, %esi
    000001ec: 	movl	%edx, %r10d
    000001ef: 	movzwl	%dx, %r9d
    000001f3: 	xorl	%edx, %edx
    000001f5: 	jmp	.Ltmp1221 # Offset: 501
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or6IsET_PKS0_iS0_"

Binary Function "_Z7bit_or7IsET_PKS0_iS0_" after disassembly {
  Number      : 179
  State       : disassembled
  Address     : 0x12c40
  Size        : 0x1fa
  MaxSize     : 0x200
  Offset      : 0x12c40
  Section     : .text
  Orc Section : .local.text._Z7bit_or7IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0178:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp1222 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %esi
    00000015: 	movl	%esi, %ecx
    00000017: 	shrl	$0x2, %ecx
    0000001a: 	addl	$0x1, %ecx
    0000001d: 	cmpl	$0x3, %esi
    00000020: 	jbe	.Ltmp1223 # Offset: 32
    00000026: 	movd	%edx, %xmm0
    0000002a: 	pxor	%xmm1, %xmm1
    0000002e: 	movq	%rdi, %rax
    00000031: 	pinsrw	$0x1, %edx, %xmm0
    00000036: 	movl	%ecx, %edx
    00000038: 	shrl	%edx
    0000003a: 	punpckldq	%xmm0, %xmm0
    0000003e: 	subl	$0x1, %edx
    00000041: 	punpcklqdq	%xmm1, %xmm0
    00000045: 	shlq	$0x4, %rdx
    00000049: 	leaq	0x10(%rdi,%rdx), %rdx
    0000004e: 	nop # Size: 2
.Ltmp1224:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	por	%xmm2, %xmm0
    0000005c: 	cmpq	%rdx, %rax
    0000005f: 	jne	.Ltmp1224 # Offset: 95
    00000061: 	pextrw	$0x4, %xmm0, %edx
    00000066: 	pextrw	$0x0, %xmm0, %eax
    0000006b: 	pextrw	$0x5, %xmm0, %esi
    00000070: 	orl	%edx, %eax
    00000072: 	pextrw	$0x1, %xmm0, %edx
    00000077: 	pextrw	$0x2, %xmm0, %r10d
    0000007d: 	orl	%esi, %edx
    0000007f: 	pextrw	$0x3, %xmm0, %esi
    00000084: 	movzwl	%dx, %r9d
    00000088: 	pextrw	$0x6, %xmm0, %edx
    0000008d: 	orl	%edx, %r10d
    00000090: 	pextrw	$0x7, %xmm0, %edx
    00000095: 	orl	%edx, %esi
    00000097: 	movl	%ecx, %edx
    00000099: 	andl	$-0x2, %edx
    0000009c: 	testl	$0x80000001, %ecx
    000000a2: 	je	.Ltmp1225 # Offset: 162
.Ltmp1231:
    000000a4: 	movq	(%rdi,%rdx,8), %xmm0
    000000a9: 	movzwl	%si, %edx
    000000ac: 	movzwl	%r10w, %r10d
    000000b0: 	movzwl	%ax, %eax
    000000b3: 	shlq	$0x10, %rdx
    000000b7: 	orq	%r10, %rdx
    000000ba: 	shlq	$0x10, %rdx
    000000be: 	orq	%r9, %rdx
    000000c1: 	shlq	$0x10, %rdx
    000000c5: 	orq	%rax, %rdx
    000000c8: 	movq	%rdx, %xmm3
    000000cd: 	por	%xmm3, %xmm0
    000000d1: 	pextrw	$0x0, %xmm0, %eax
    000000d6: 	pextrw	$0x1, %xmm0, %r9d
    000000dc: 	pextrw	$0x2, %xmm0, %r10d
    000000e2: 	pextrw	$0x3, %xmm0, %esi
.Ltmp1225:
    000000e7: 	movl	%r9d, %edx
    000000ea: 	shll	$0x2, %ecx
    000000ed: 	orl	%r10d, %edx
    000000f0: 	orl	%esi, %edx
    000000f2: 	movl	%edx, %r9d
.Ltmp1230:
    000000f5: 	cmpl	%ecx, %r8d
    000000f8: 	jle	.Ltmp1226 # Offset: 248
    000000fe: 	movl	%r8d, %r11d
    00000101: 	subl	%ecx, %r11d
    00000104: 	leal	-0x1(%r11), %edx
    00000108: 	cmpl	$0x6, %edx
    0000010b: 	jbe	.Ltmp1227 # Offset: 267
    0000010d: 	movslq	%ecx, %rdx
    00000110: 	pxor	%xmm0, %xmm0
    00000114: 	leaq	(%rdi,%rdx,2), %rsi
    00000118: 	movl	%r11d, %edx
    0000011b: 	shrl	$0x3, %edx
    0000011e: 	leal	-0x1(%rdx), %r10d
    00000122: 	leaq	0x10(%rsi), %rdx
    00000126: 	shlq	$0x4, %r10
    0000012a: 	addq	%rdx, %r10
    0000012d: 	jmp	.Ltmp1228 # Offset: 301
    0000012f: 	nop # Size: 1
.Ltmp1229:
    00000130: 	addq	$0x10, %rdx
.Ltmp1228:
    00000134: 	movdqu	(%rsi), %xmm1
    00000138: 	movq	%rdx, %rsi
    0000013b: 	por	%xmm1, %xmm0
    0000013f: 	cmpq	%r10, %rdx
    00000142: 	jne	.Ltmp1229 # Offset: 322
    00000144: 	movdqa	%xmm0, %xmm1
    00000148: 	psrldq	$0x8, %xmm1
    0000014d: 	por	%xmm1, %xmm0
    00000151: 	movdqa	%xmm0, %xmm1
    00000155: 	psrldq	$0x4, %xmm1
    0000015a: 	por	%xmm1, %xmm0
    0000015e: 	movdqa	%xmm0, %xmm1
    00000162: 	psrldq	$0x2, %xmm1
    00000167: 	por	%xmm1, %xmm0
    0000016b: 	pextrw	$0x0, %xmm0, %edx
    00000170: 	orl	%edx, %eax
    00000172: 	movl	%r11d, %edx
    00000175: 	andl	$-0x8, %edx
    00000178: 	addl	%edx, %ecx
    0000017a: 	cmpl	%r11d, %edx
    0000017d: 	je	.Ltmp1226 # Offset: 381
.Ltmp1227:
    0000017f: 	movslq	%ecx, %rsi
    00000182: 	leaq	(%rsi,%rsi), %rdx
    00000186: 	orw	(%rdi,%rsi,2), %ax
    0000018a: 	leal	0x1(%rcx), %esi
    0000018d: 	cmpl	%r8d, %esi
    00000190: 	jge	.Ltmp1226 # Offset: 400
    00000192: 	leal	0x2(%rcx), %esi
    00000195: 	orw	0x2(%rdi,%rdx), %ax
    0000019a: 	cmpl	%r8d, %esi
    0000019d: 	jge	.Ltmp1226 # Offset: 413
    0000019f: 	leal	0x3(%rcx), %esi
    000001a2: 	orw	0x4(%rdi,%rdx), %ax
    000001a7: 	cmpl	%esi, %r8d
    000001aa: 	jle	.Ltmp1226 # Offset: 426
    000001ac: 	leal	0x4(%rcx), %esi
    000001af: 	orw	0x6(%rdi,%rdx), %ax
    000001b4: 	cmpl	%esi, %r8d
    000001b7: 	jle	.Ltmp1226 # Offset: 439
    000001b9: 	leal	0x5(%rcx), %esi
    000001bc: 	orw	0x8(%rdi,%rdx), %ax
    000001c1: 	cmpl	%r8d, %esi
    000001c4: 	jge	.Ltmp1226 # Offset: 452
    000001c6: 	addl	$0x6, %ecx
    000001c9: 	orw	0xa(%rdi,%rdx), %ax
    000001ce: 	cmpl	%r8d, %ecx
    000001d1: 	jge	.Ltmp1226 # Offset: 465
    000001d3: 	orw	0xc(%rdi,%rdx), %ax
.Ltmp1226:
    000001d8: 	orl	%r9d, %eax
    000001db: 	retq # Offset: 475
    000001dc: 	nopl	(%rax) # Size: 4
.Ltmp1222:
    000001e0: 	movl	%edx, %r9d
    000001e3: 	xorl	%ecx, %ecx
    000001e5: 	jmp	.Ltmp1230 # Offset: 485
.Ltmp1223:
    000001ea: 	movl	%edx, %esi
    000001ec: 	movl	%edx, %r10d
    000001ef: 	movzwl	%dx, %r9d
    000001f3: 	xorl	%edx, %edx
    000001f5: 	jmp	.Ltmp1231 # Offset: 501
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or7IsET_PKS0_iS0_"

Binary Function "_Z7bit_or8IsET_PKS0_iS0_" after disassembly {
  Number      : 180
  State       : disassembled
  Address     : 0x12e40
  Size        : 0x181
  MaxSize     : 0x190
  Offset      : 0x12e40
  Section     : .text
  Orc Section : .local.text._Z7bit_or8IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0179:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r9d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x7, %esi
    0000000c: 	jle	.Ltmp1232 # Offset: 12
    00000012: 	leal	-0x8(%rsi), %ecx
    00000015: 	movd	%edx, %xmm0
    00000019: 	xorl	%eax, %eax
    0000001b: 	shrl	$0x3, %ecx
    0000001e: 	punpcklwd	%xmm0, %xmm0
    00000022: 	addl	$0x1, %ecx
    00000025: 	pshufd	$0x0, %xmm0, %xmm0
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1233:
    00000030: 	movq	%rax, %rdx
    00000033: 	addq	$0x1, %rax
    00000037: 	shlq	$0x4, %rdx
    0000003b: 	movdqu	(%rdi,%rdx), %xmm1
    00000040: 	por	%xmm1, %xmm0
    00000044: 	cmpl	%eax, %ecx
    00000046: 	ja	.Ltmp1233 # Offset: 70
    00000048: 	pextrw	$0x1, %xmm0, %edx
    0000004d: 	pextrw	$0x2, %xmm0, %esi
    00000052: 	pextrw	$0x0, %xmm0, %eax
    00000057: 	shll	$0x3, %ecx
    0000005a: 	orl	%edx, %esi
    0000005c: 	pextrw	$0x3, %xmm0, %edx
    00000061: 	orl	%edx, %esi
    00000063: 	pextrw	$0x4, %xmm0, %edx
    00000068: 	orl	%edx, %esi
    0000006a: 	pextrw	$0x5, %xmm0, %edx
    0000006f: 	orl	%edx, %esi
    00000071: 	pextrw	$0x6, %xmm0, %edx
    00000076: 	orl	%edx, %esi
    00000078: 	pextrw	$0x7, %xmm0, %edx
    0000007d: 	orl	%edx, %esi
.Ltmp1238:
    0000007f: 	cmpl	%ecx, %r9d
    00000082: 	jle	.Ltmp1234 # Offset: 130
    00000088: 	movl	%r9d, %r11d
    0000008b: 	subl	%ecx, %r11d
    0000008e: 	leal	-0x1(%r11), %edx
    00000092: 	cmpl	$0x6, %edx
    00000095: 	jbe	.Ltmp1235 # Offset: 149
    00000097: 	movslq	%ecx, %rdx
    0000009a: 	pxor	%xmm0, %xmm0
    0000009e: 	leaq	(%rdi,%rdx,2), %r8
    000000a2: 	movl	%r11d, %edx
    000000a5: 	shrl	$0x3, %edx
    000000a8: 	leal	-0x1(%rdx), %r10d
    000000ac: 	leaq	0x10(%r8), %rdx
    000000b0: 	shlq	$0x4, %r10
    000000b4: 	addq	%rdx, %r10
    000000b7: 	jmp	.Ltmp1236 # Offset: 183
    000000b9: 	nopl	(%rax) # Size: 7
.Ltmp1237:
    000000c0: 	addq	$0x10, %rdx
.Ltmp1236:
    000000c4: 	movdqu	(%r8), %xmm1
    000000c9: 	movq	%rdx, %r8
    000000cc: 	por	%xmm1, %xmm0
    000000d0: 	cmpq	%rdx, %r10
    000000d3: 	jne	.Ltmp1237 # Offset: 211
    000000d5: 	movdqa	%xmm0, %xmm1
    000000d9: 	psrldq	$0x8, %xmm1
    000000de: 	por	%xmm1, %xmm0
    000000e2: 	movdqa	%xmm0, %xmm1
    000000e6: 	psrldq	$0x4, %xmm1
    000000eb: 	por	%xmm1, %xmm0
    000000ef: 	movdqa	%xmm0, %xmm1
    000000f3: 	psrldq	$0x2, %xmm1
    000000f8: 	por	%xmm1, %xmm0
    000000fc: 	pextrw	$0x0, %xmm0, %edx
    00000101: 	orl	%edx, %eax
    00000103: 	movl	%r11d, %edx
    00000106: 	andl	$-0x8, %edx
    00000109: 	addl	%edx, %ecx
    0000010b: 	cmpl	%r11d, %edx
    0000010e: 	je	.Ltmp1234 # Offset: 270
.Ltmp1235:
    00000110: 	movslq	%ecx, %r8
    00000113: 	leaq	(%r8,%r8), %rdx
    00000117: 	orw	(%rdi,%r8,2), %ax
    0000011c: 	leal	0x1(%rcx), %r8d
    00000120: 	cmpl	%r8d, %r9d
    00000123: 	jle	.Ltmp1234 # Offset: 291
    00000125: 	leal	0x2(%rcx), %r8d
    00000129: 	orw	0x2(%rdi,%rdx), %ax
    0000012e: 	cmpl	%r9d, %r8d
    00000131: 	jge	.Ltmp1234 # Offset: 305
    00000133: 	leal	0x3(%rcx), %r8d
    00000137: 	orw	0x4(%rdi,%rdx), %ax
    0000013c: 	cmpl	%r9d, %r8d
    0000013f: 	jge	.Ltmp1234 # Offset: 319
    00000141: 	leal	0x4(%rcx), %r8d
    00000145: 	orw	0x6(%rdi,%rdx), %ax
    0000014a: 	cmpl	%r9d, %r8d
    0000014d: 	jge	.Ltmp1234 # Offset: 333
    0000014f: 	leal	0x5(%rcx), %r8d
    00000153: 	orw	0x8(%rdi,%rdx), %ax
    00000158: 	cmpl	%r9d, %r8d
    0000015b: 	jge	.Ltmp1234 # Offset: 347
    0000015d: 	addl	$0x6, %ecx
    00000160: 	orw	0xa(%rdi,%rdx), %ax
    00000165: 	cmpl	%r9d, %ecx
    00000168: 	jge	.Ltmp1234 # Offset: 360
    0000016a: 	orw	0xc(%rdi,%rdx), %ax
.Ltmp1234:
    0000016f: 	orl	%esi, %eax
    00000171: 	retq # Offset: 369
    00000172: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1232:
    00000178: 	movl	%edx, %esi
    0000017a: 	xorl	%ecx, %ecx
    0000017c: 	jmp	.Ltmp1238 # Offset: 380
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or8IsET_PKS0_iS0_"

Binary Function "_Z8bit_xor1IsET_PKS0_iS0_" after disassembly {
  Number      : 181
  State       : disassembled
  Address     : 0x12fd0
  Size        : 0xef
  MaxSize     : 0xf0
  Offset      : 0x12fd0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor1IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0180:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp1239 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0x6, %eax
    00000014: 	jbe	.Ltmp1240 # Offset: 20
    0000001a: 	shrl	$0x3, %esi
    0000001d: 	movq	%rdi, %rax
    00000020: 	pxor	%xmm0, %xmm0
    00000024: 	subl	$0x1, %esi
    00000027: 	shlq	$0x4, %rsi
    0000002b: 	leaq	0x10(%rdi,%rsi), %rsi
.Ltmp1241:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	addq	$0x10, %rax
    00000038: 	pxor	%xmm2, %xmm0
    0000003c: 	cmpq	%rsi, %rax
    0000003f: 	jne	.Ltmp1241 # Offset: 63
    00000041: 	movdqa	%xmm0, %xmm1
    00000045: 	psrldq	$0x8, %xmm1
    0000004a: 	pxor	%xmm1, %xmm0
    0000004e: 	movdqa	%xmm0, %xmm1
    00000052: 	psrldq	$0x4, %xmm1
    00000057: 	pxor	%xmm1, %xmm0
    0000005b: 	movdqa	%xmm0, %xmm1
    0000005f: 	psrldq	$0x2, %xmm1
    00000064: 	pxor	%xmm1, %xmm0
    00000068: 	pextrw	$0x0, %xmm0, %eax
    0000006d: 	xorl	%edx, %eax
    0000006f: 	movl	%ecx, %edx
    00000071: 	andl	$-0x8, %edx
    00000074: 	testb	$0x7, %cl
    00000077: 	je	.Ltmp1242 # Offset: 119
.Ltmp1244:
    00000079: 	movslq	%edx, %r8
    0000007c: 	leaq	(%r8,%r8), %rsi
    00000080: 	xorw	(%rdi,%r8,2), %ax
    00000085: 	leal	0x1(%rdx), %r8d
    00000089: 	cmpl	%r8d, %ecx
    0000008c: 	jle	.Ltmp1243 # Offset: 140
    0000008e: 	leal	0x2(%rdx), %r8d
    00000092: 	xorw	0x2(%rdi,%rsi), %ax
    00000097: 	cmpl	%r8d, %ecx
    0000009a: 	jle	.Ltmp1243 # Offset: 154
    0000009c: 	leal	0x3(%rdx), %r8d
    000000a0: 	xorw	0x4(%rdi,%rsi), %ax
    000000a5: 	cmpl	%r8d, %ecx
    000000a8: 	jle	.Ltmp1243 # Offset: 168
    000000aa: 	leal	0x4(%rdx), %r8d
    000000ae: 	xorw	0x6(%rdi,%rsi), %ax
    000000b3: 	cmpl	%r8d, %ecx
    000000b6: 	jle	.Ltmp1243 # Offset: 182
    000000b8: 	leal	0x5(%rdx), %r8d
    000000bc: 	xorw	0x8(%rdi,%rsi), %ax
    000000c1: 	cmpl	%r8d, %ecx
    000000c4: 	jle	.Ltmp1243 # Offset: 196
    000000c6: 	addl	$0x6, %edx
    000000c9: 	xorw	0xa(%rdi,%rsi), %ax
    000000ce: 	cmpl	%edx, %ecx
    000000d0: 	jle	.Ltmp1243 # Offset: 208
    000000d2: 	xorw	0xc(%rdi,%rsi), %ax
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1239:
    000000e0: 	movl	%edx, %eax
.Ltmp1243:
    000000e2: 	retq # Offset: 226
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1242:
    000000e8: 	retq # Offset: 232
.Ltmp1240:
    000000e9: 	movl	%edx, %eax
    000000eb: 	xorl	%edx, %edx
    000000ed: 	jmp	.Ltmp1244 # Offset: 237
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor1IsET_PKS0_iS0_"

Binary Function "_Z8bit_xor2IsET_PKS0_iS0_" after disassembly {
  Number      : 182
  State       : disassembled
  Address     : 0x130c0
  Size        : 0x105
  MaxSize     : 0x110
  Offset      : 0x130c0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor2IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0181:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movq	%rdi, %rcx
    0000000a: 	addq	%rsi, %rsi
    0000000d: 	leaq	(%rdi,%rsi), %rdi
    00000011: 	cmpq	%rdi, %rcx
    00000014: 	je	.Ltmp1245 # Offset: 20
    0000001a: 	subq	$0x2, %rsi
    0000001e: 	movq	%rcx, %rax
    00000021: 	movq	%rsi, %r8
    00000024: 	shrq	%r8
    00000027: 	addq	$0x1, %r8
    0000002b: 	cmpq	$0xc, %rsi
    0000002f: 	jbe	.Ltmp1246 # Offset: 47
    00000035: 	movq	%r8, %rsi
    00000038: 	pxor	%xmm0, %xmm0
    0000003c: 	shrq	$0x3, %rsi
    00000040: 	shlq	$0x4, %rsi
    00000044: 	addq	%rcx, %rsi
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1247:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	pxor	%xmm2, %xmm0
    0000005c: 	cmpq	%rax, %rsi
    0000005f: 	jne	.Ltmp1247 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	psrldq	$0x8, %xmm1
    0000006a: 	pxor	%xmm1, %xmm0
    0000006e: 	movdqa	%xmm0, %xmm1
    00000072: 	psrldq	$0x4, %xmm1
    00000077: 	pxor	%xmm1, %xmm0
    0000007b: 	movdqa	%xmm0, %xmm1
    0000007f: 	psrldq	$0x2, %xmm1
    00000084: 	pxor	%xmm1, %xmm0
    00000088: 	pextrw	$0x0, %xmm0, %eax
    0000008d: 	xorl	%edx, %eax
    0000008f: 	movq	%r8, %rdx
    00000092: 	andq	$-0x8, %rdx
    00000096: 	leaq	(%rcx,%rdx,2), %rcx
    0000009a: 	cmpq	%rdx, %r8
    0000009d: 	je	.Ltmp1248 # Offset: 157
.Ltmp1250:
    0000009f: 	leaq	0x2(%rcx), %rdx
    000000a3: 	xorw	(%rcx), %ax
    000000a6: 	cmpq	%rdx, %rdi
    000000a9: 	je	.Ltmp1249 # Offset: 169
    000000ab: 	leaq	0x4(%rcx), %rdx
    000000af: 	xorw	0x2(%rcx), %ax
    000000b3: 	cmpq	%rdx, %rdi
    000000b6: 	je	.Ltmp1249 # Offset: 182
    000000b8: 	leaq	0x6(%rcx), %rdx
    000000bc: 	xorw	0x4(%rcx), %ax
    000000c0: 	cmpq	%rdx, %rdi
    000000c3: 	je	.Ltmp1249 # Offset: 195
    000000c5: 	leaq	0x8(%rcx), %rdx
    000000c9: 	xorw	0x6(%rcx), %ax
    000000cd: 	cmpq	%rdx, %rdi
    000000d0: 	je	.Ltmp1249 # Offset: 208
    000000d2: 	leaq	0xa(%rcx), %rdx
    000000d6: 	xorw	0x8(%rcx), %ax
    000000da: 	cmpq	%rdx, %rdi
    000000dd: 	je	.Ltmp1249 # Offset: 221
    000000df: 	leaq	0xc(%rcx), %rdx
    000000e3: 	xorw	0xa(%rcx), %ax
    000000e7: 	cmpq	%rdx, %rdi
    000000ea: 	je	.Ltmp1249 # Offset: 234
    000000ec: 	xorw	0xc(%rcx), %ax
    000000f0: 	retq # Offset: 240
    000000f1: 	nopl	(%rax) # Size: 7
.Ltmp1245:
    000000f8: 	movl	%edx, %eax
.Ltmp1249:
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1248:
    00000100: 	retq # Offset: 256
.Ltmp1246:
    00000101: 	movl	%edx, %eax
    00000103: 	jmp	.Ltmp1250 # Offset: 259
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor2IsET_PKS0_iS0_"

Binary Function "_Z8bit_xor3IsET_PKS0_iS0_" after disassembly {
  Number      : 183
  State       : disassembled
  Address     : 0x131d0
  Size        : 0x1b2
  MaxSize     : 0x1c0
  Offset      : 0x131d0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor3IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0182:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %r9d
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%esi, %edi
    0000000d: 	testl	%r9d, %r9d
    00000010: 	jle	.Ltmp1251 # Offset: 16
    00000016: 	leal	-0x2(%rsi), %eax
    00000019: 	movl	%eax, %r10d
    0000001c: 	shrl	%r10d
    0000001f: 	leal	0x1(%r10), %esi
    00000023: 	cmpl	$0xd, %eax
    00000026: 	jbe	.Ltmp1252 # Offset: 38
    0000002c: 	movl	%esi, %r8d
    0000002f: 	movq	%rcx, %rax
    00000032: 	pxor	%xmm4, %xmm4
    00000036: 	shrl	$0x3, %r8d
    0000003a: 	subl	$0x1, %r8d
    0000003e: 	shlq	$0x5, %r8
    00000042: 	leaq	0x20(%rcx,%r8), %r8
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1253:
    00000050: 	movdqu	(%rax), %xmm0
    00000054: 	movdqu	0x10(%rax), %xmm3
    00000059: 	addq	$0x20, %rax
    0000005d: 	movdqa	%xmm0, %xmm1
    00000061: 	movdqa	%xmm0, %xmm2
    00000065: 	punpcklwd	%xmm3, %xmm0
    00000069: 	punpcklwd	%xmm3, %xmm1
    0000006d: 	punpckhwd	%xmm3, %xmm2
    00000071: 	movdqa	%xmm1, %xmm5
    00000075: 	punpcklwd	%xmm2, %xmm0
    00000079: 	punpcklwd	%xmm2, %xmm1
    0000007d: 	punpckhwd	%xmm2, %xmm5
    00000081: 	punpcklwd	%xmm5, %xmm1
    00000085: 	punpckhwd	%xmm5, %xmm0
    00000089: 	pxor	%xmm0, %xmm1
    0000008d: 	pxor	%xmm1, %xmm4
    00000091: 	cmpq	%r8, %rax
    00000094: 	jne	.Ltmp1253 # Offset: 148
    00000096: 	movdqa	%xmm4, %xmm0
    0000009a: 	psrldq	$0x8, %xmm0
    0000009f: 	pxor	%xmm0, %xmm4
    000000a3: 	movdqa	%xmm4, %xmm0
    000000a7: 	psrldq	$0x4, %xmm0
    000000ac: 	pxor	%xmm0, %xmm4
    000000b0: 	movdqa	%xmm4, %xmm0
    000000b4: 	psrldq	$0x2, %xmm0
    000000b9: 	pxor	%xmm0, %xmm4
    000000bd: 	pextrw	$0x0, %xmm4, %eax
    000000c2: 	xorl	%edx, %eax
    000000c4: 	movl	%esi, %edx
    000000c6: 	andl	$-0x8, %edx
    000000c9: 	leal	(%rdx,%rdx), %r8d
    000000cd: 	cmpl	%edx, %esi
    000000cf: 	je	.Ltmp1254 # Offset: 207
.Ltmp1258:
    000000d5: 	movl	%r10d, %r11d
    000000d8: 	subl	%edx, %r11d
    000000db: 	leal	0x1(%r11), %r10d
    000000df: 	cmpl	$0x2, %r11d
    000000e3: 	jbe	.Ltmp1255 # Offset: 227
    000000e5: 	leaq	(%rcx,%rdx,4), %rdx
    000000e9: 	movq	(%rdx), %xmm1
    000000ed: 	movq	0x8(%rdx), %xmm2
    000000f2: 	movdqa	%xmm1, %xmm3
    000000f6: 	movdqa	%xmm1, %xmm0
    000000fa: 	punpcklwd	%xmm2, %xmm1
    000000fe: 	punpcklwd	%xmm2, %xmm3
    00000102: 	punpcklwd	%xmm2, %xmm0
    00000106: 	pshufd	$0xe, %xmm3, %xmm3
    0000010b: 	punpcklwd	%xmm3, %xmm1
    0000010f: 	punpcklwd	%xmm3, %xmm0
    00000113: 	pshufd	$0xe, %xmm1, %xmm1
    00000118: 	pxor	%xmm1, %xmm0
    0000011c: 	pextrw	$0x0, %xmm0, %edx
    00000121: 	pextrw	$0x1, %xmm0, %r11d
    00000127: 	xorl	%r11d, %edx
    0000012a: 	xorl	%eax, %edx
    0000012c: 	pextrw	$0x2, %xmm0, %eax
    00000131: 	xorl	%eax, %edx
    00000133: 	pextrw	$0x3, %xmm0, %eax
    00000138: 	xorl	%edx, %eax
    0000013a: 	movl	%r10d, %edx
    0000013d: 	andl	$-0x4, %edx
    00000140: 	leal	(%r8,%rdx,2), %r8d
    00000144: 	cmpl	%edx, %r10d
    00000147: 	je	.Ltmp1254 # Offset: 327
.Ltmp1255:
    00000149: 	movslq	%r8d, %r10
    0000014c: 	xorw	(%rcx,%r10,2), %ax
    00000151: 	leaq	(%r10,%r10), %rdx
    00000155: 	xorw	0x2(%rcx,%r10,2), %ax
    0000015b: 	leal	0x2(%r8), %r10d
    0000015f: 	cmpl	%r9d, %r10d
    00000162: 	jge	.Ltmp1254 # Offset: 354
    00000164: 	movzwl	0x6(%rcx,%rdx), %r10d
    0000016a: 	addl	$0x4, %r8d
    0000016e: 	xorw	0x4(%rcx,%rdx), %r10w
    00000174: 	xorl	%r10d, %eax
    00000177: 	cmpl	%r8d, %r9d
    0000017a: 	jle	.Ltmp1254 # Offset: 378
    0000017c: 	movzwl	0x8(%rcx,%rdx), %r8d
    00000182: 	xorw	0xa(%rcx,%rdx), %r8w
    00000188: 	movl	%r8d, %edx
    0000018b: 	xorl	%edx, %eax
.Ltmp1254:
    0000018d: 	addl	%esi, %esi
.Ltmp1257:
    0000018f: 	cmpl	%edi, %esi
    00000191: 	jge	.Ltmp1256 # Offset: 401
    00000193: 	movslq	%esi, %rsi
    00000196: 	xorw	(%rcx,%rsi,2), %ax
.Ltmp1256:
    0000019a: 	retq # Offset: 410
    0000019b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1251:
    000001a0: 	movl	%edx, %eax
    000001a2: 	xorl	%esi, %esi
    000001a4: 	jmp	.Ltmp1257 # Offset: 420
.Ltmp1252:
    000001a6: 	movl	%edx, %eax
    000001a8: 	xorl	%r8d, %r8d
    000001ab: 	xorl	%edx, %edx
    000001ad: 	jmp	.Ltmp1258 # Offset: 429
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor3IsET_PKS0_iS0_"

Binary Function "_Z8bit_xor4IsET_PKS0_iS0_" after disassembly {
  Number      : 184
  State       : disassembled
  Address     : 0x13390
  Size        : 0x332
  MaxSize     : 0x340
  Offset      : 0x13390
  Section     : .text
  Orc Section : .local.text._Z8bit_xor4IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0183:
    00000000: 	endbr64
    00000004: 	leal	-0x3(%rsi), %r8d
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%esi, %edi
    0000000d: 	testl	%r8d, %r8d
    00000010: 	jle	.Ltmp1259 # Offset: 16
    00000016: 	leal	-0x4(%rsi), %eax
    00000019: 	movl	%eax, %r11d
    0000001c: 	shrl	$0x2, %r11d
    00000020: 	leal	0x1(%r11), %esi
    00000024: 	cmpl	$0x1b, %eax
    00000027: 	jbe	.Ltmp1260 # Offset: 39
    0000002d: 	movl	%esi, %r9d
    00000030: 	movq	%rcx, %rax
    00000033: 	pxor	%xmm6, %xmm6
    00000037: 	shrl	$0x3, %r9d
    0000003b: 	subl	$0x1, %r9d
    0000003f: 	shlq	$0x6, %r9
    00000043: 	leaq	0x40(%rcx,%r9), %r9
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1261:
    00000050: 	movdqu	(%rax), %xmm0
    00000054: 	movdqu	0x10(%rax), %xmm4
    00000059: 	addq	$0x40, %rax
    0000005d: 	movdqu	-0x20(%rax), %xmm2
    00000062: 	movdqu	-0x10(%rax), %xmm5
    00000067: 	movdqa	%xmm0, %xmm1
    0000006b: 	movdqa	%xmm0, %xmm3
    0000006f: 	punpcklwd	%xmm4, %xmm0
    00000073: 	punpcklwd	%xmm4, %xmm1
    00000077: 	punpckhwd	%xmm4, %xmm3
    0000007b: 	movdqa	%xmm2, %xmm4
    0000007f: 	movdqa	%xmm1, %xmm7
    00000083: 	punpcklwd	%xmm5, %xmm4
    00000087: 	punpcklwd	%xmm3, %xmm1
    0000008b: 	punpckhwd	%xmm3, %xmm7
    0000008f: 	punpcklwd	%xmm3, %xmm0
    00000093: 	movdqa	%xmm2, %xmm3
    00000097: 	punpckhwd	%xmm5, %xmm3
    0000009b: 	punpcklwd	%xmm7, %xmm1
    0000009f: 	punpckhwd	%xmm7, %xmm0
    000000a3: 	punpcklwd	%xmm5, %xmm2
    000000a7: 	movdqa	%xmm4, %xmm7
    000000ab: 	punpcklwd	%xmm3, %xmm4
    000000af: 	punpckhwd	%xmm3, %xmm7
    000000b3: 	punpcklwd	%xmm3, %xmm2
    000000b7: 	movdqa	%xmm0, %xmm3
    000000bb: 	punpckhwd	%xmm7, %xmm2
    000000bf: 	movdqa	%xmm0, %xmm5
    000000c3: 	punpcklwd	%xmm7, %xmm4
    000000c7: 	punpcklwd	%xmm2, %xmm3
    000000cb: 	punpckhwd	%xmm2, %xmm5
    000000cf: 	punpcklwd	%xmm2, %xmm0
    000000d3: 	movdqa	%xmm3, %xmm7
    000000d7: 	punpcklwd	%xmm5, %xmm0
    000000db: 	punpcklwd	%xmm5, %xmm3
    000000df: 	punpckhwd	%xmm5, %xmm7
    000000e3: 	movdqa	%xmm1, %xmm2
    000000e7: 	punpckhwd	%xmm7, %xmm0
    000000eb: 	punpcklwd	%xmm7, %xmm3
    000000ef: 	punpckhwd	%xmm4, %xmm2
    000000f3: 	pxor	%xmm0, %xmm3
    000000f7: 	movdqa	%xmm1, %xmm0
    000000fb: 	punpcklwd	%xmm4, %xmm1
    000000ff: 	punpcklwd	%xmm4, %xmm0
    00000103: 	punpcklwd	%xmm2, %xmm1
    00000107: 	movdqa	%xmm0, %xmm5
    0000010b: 	punpcklwd	%xmm2, %xmm0
    0000010f: 	punpckhwd	%xmm2, %xmm5
    00000113: 	punpcklwd	%xmm5, %xmm0
    00000117: 	punpckhwd	%xmm5, %xmm1
    0000011b: 	pxor	%xmm1, %xmm0
    0000011f: 	pxor	%xmm0, %xmm3
    00000123: 	pxor	%xmm3, %xmm6
    00000127: 	cmpq	%r9, %rax
    0000012a: 	jne	.Ltmp1261 # Offset: 298
    00000130: 	movdqa	%xmm6, %xmm0
    00000134: 	movl	%esi, %r10d
    00000137: 	psrldq	$0x8, %xmm0
    0000013c: 	andl	$-0x8, %r10d
    00000140: 	pxor	%xmm0, %xmm6
    00000144: 	movdqa	%xmm6, %xmm0
    00000148: 	psrldq	$0x4, %xmm0
    0000014d: 	pxor	%xmm0, %xmm6
    00000151: 	movdqa	%xmm6, %xmm0
    00000155: 	psrldq	$0x2, %xmm0
    0000015a: 	pxor	%xmm0, %xmm6
    0000015e: 	pextrw	$0x0, %xmm6, %eax
    00000163: 	xorl	%edx, %eax
    00000165: 	leal	(,%r10,4), %edx
    0000016d: 	cmpl	%esi, %r10d
    00000170: 	je	.Ltmp1262 # Offset: 368
.Ltmp1266:
    00000176: 	subl	%r10d, %r11d
    00000179: 	leal	0x1(%r11), %r9d
    0000017d: 	cmpl	$0x2, %r11d
    00000181: 	jbe	.Ltmp1263 # Offset: 385
    00000187: 	leaq	(%rcx,%r10,8), %r10
    0000018b: 	movq	(%r10), %xmm0
    00000190: 	movq	0x8(%r10), %xmm4
    00000196: 	movq	0x10(%r10), %xmm3
    0000019c: 	movq	0x18(%r10), %xmm1
    000001a2: 	movdqa	%xmm0, %xmm5
    000001a6: 	movdqa	%xmm0, %xmm2
    000001aa: 	punpcklwd	%xmm4, %xmm0
    000001ae: 	punpcklwd	%xmm4, %xmm5
    000001b2: 	punpcklwd	%xmm4, %xmm2
    000001b6: 	movdqa	%xmm3, %xmm4
    000001ba: 	pshufd	$0xe, %xmm5, %xmm5
    000001bf: 	punpcklwd	%xmm1, %xmm4
    000001c3: 	punpcklwd	%xmm5, %xmm2
    000001c7: 	punpcklwd	%xmm5, %xmm0
    000001cb: 	movdqa	%xmm3, %xmm5
    000001cf: 	punpcklwd	%xmm1, %xmm5
    000001d3: 	punpcklwd	%xmm1, %xmm3
    000001d7: 	pshufd	$0xe, %xmm0, %xmm0
    000001dc: 	pshufd	$0xe, %xmm5, %xmm5
    000001e1: 	movdqa	%xmm0, %xmm1
    000001e5: 	punpcklwd	%xmm5, %xmm3
    000001e9: 	punpcklwd	%xmm5, %xmm4
    000001ed: 	movdqa	%xmm0, %xmm5
    000001f1: 	pshufd	$0xe, %xmm3, %xmm3
    000001f6: 	punpcklwd	%xmm3, %xmm5
    000001fa: 	punpcklwd	%xmm3, %xmm0
    000001fe: 	punpcklwd	%xmm3, %xmm1
    00000202: 	pshufd	$0xe, %xmm5, %xmm5
    00000207: 	movdqa	%xmm2, %xmm3
    0000020b: 	punpcklwd	%xmm5, %xmm0
    0000020f: 	punpcklwd	%xmm5, %xmm1
    00000213: 	punpcklwd	%xmm4, %xmm3
    00000217: 	pshufd	$0xe, %xmm0, %xmm0
    0000021c: 	pshufd	$0xe, %xmm3, %xmm3
    00000221: 	pxor	%xmm1, %xmm0
    00000225: 	movdqa	%xmm2, %xmm1
    00000229: 	punpcklwd	%xmm4, %xmm2
    0000022d: 	punpcklwd	%xmm4, %xmm1
    00000231: 	punpcklwd	%xmm3, %xmm2
    00000235: 	punpcklwd	%xmm3, %xmm1
    00000239: 	pshufd	$0xe, %xmm2, %xmm2
    0000023e: 	pxor	%xmm2, %xmm1
    00000242: 	pxor	%xmm1, %xmm0
    00000246: 	pextrw	$0x0, %xmm0, %r10d
    0000024c: 	pextrw	$0x1, %xmm0, %r11d
    00000252: 	xorl	%r11d, %r10d
    00000255: 	xorl	%eax, %r10d
    00000258: 	pextrw	$0x2, %xmm0, %eax
    0000025d: 	xorl	%eax, %r10d
    00000260: 	pextrw	$0x3, %xmm0, %eax
    00000265: 	xorl	%r10d, %eax
    00000268: 	movl	%r9d, %r10d
    0000026b: 	andl	$-0x4, %r10d
    0000026f: 	leal	(%rdx,%r10,4), %edx
    00000273: 	cmpl	%r10d, %r9d
    00000276: 	je	.Ltmp1262 # Offset: 630
.Ltmp1263:
    00000278: 	movslq	%edx, %r10
    0000027b: 	xorw	(%rcx,%r10,2), %ax
    00000280: 	leaq	(%r10,%r10), %r9
    00000284: 	xorw	0x2(%rcx,%r10,2), %ax
    0000028a: 	xorw	0x4(%rcx,%r10,2), %ax
    00000290: 	xorw	0x6(%rcx,%r10,2), %ax
    00000296: 	leal	0x4(%rdx), %r10d
    0000029a: 	cmpl	%r10d, %r8d
    0000029d: 	jle	.Ltmp1262 # Offset: 669
    0000029f: 	movzwl	0xa(%rcx,%r9), %r10d
    000002a5: 	addl	$0x8, %edx
    000002a8: 	xorw	0xc(%rcx,%r9), %r10w
    000002ae: 	xorw	0x8(%rcx,%r9), %r10w
    000002b4: 	xorw	0xe(%rcx,%r9), %r10w
    000002ba: 	xorl	%r10d, %eax
    000002bd: 	cmpl	%edx, %r8d
    000002c0: 	jle	.Ltmp1262 # Offset: 704
    000002c2: 	movzwl	0x12(%rcx,%r9), %edx
    000002c8: 	xorw	0x14(%rcx,%r9), %dx
    000002ce: 	xorw	0x10(%rcx,%r9), %dx
    000002d4: 	xorw	0x16(%rcx,%r9), %dx
    000002da: 	xorl	%edx, %eax
.Ltmp1262:
    000002dc: 	shll	$0x2, %esi
.Ltmp1265:
    000002df: 	cmpl	%esi, %edi
    000002e1: 	jle	.Ltmp1264 # Offset: 737
    000002e3: 	movslq	%esi, %rdx
    000002e6: 	leaq	(%rdx,%rdx), %r8
    000002ea: 	xorw	(%rcx,%rdx,2), %ax
    000002ee: 	leal	0x1(%rsi), %edx
    000002f1: 	cmpl	%edi, %edx
    000002f3: 	jge	.Ltmp1264 # Offset: 755
    000002f5: 	leal	0x2(%rsi), %edx
    000002f8: 	xorw	0x2(%rcx,%r8), %ax
    000002fe: 	cmpl	%edx, %edi
    00000300: 	jle	.Ltmp1264 # Offset: 768
    00000302: 	addl	$0x3, %esi
    00000305: 	xorw	0x4(%rcx,%r8), %ax
    0000030b: 	cmpl	%esi, %edi
    0000030d: 	jle	.Ltmp1264 # Offset: 781
    0000030f: 	xorw	0x6(%rcx,%r8), %ax
.Ltmp1264:
    00000315: 	retq # Offset: 789
    00000316: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1259:
    00000320: 	movl	%edx, %eax
    00000322: 	xorl	%esi, %esi
    00000324: 	jmp	.Ltmp1265 # Offset: 804
.Ltmp1260:
    00000326: 	movl	%edx, %eax
    00000328: 	xorl	%r10d, %r10d
    0000032b: 	xorl	%edx, %edx
    0000032d: 	jmp	.Ltmp1266 # Offset: 813
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor4IsET_PKS0_iS0_"

Binary Function "_Z8bit_xor5IsET_PKS0_iS0_" after disassembly {
  Number      : 185
  State       : disassembled
  Address     : 0x136d0
  Size        : 0x1e4
  MaxSize     : 0x1f0
  Offset      : 0x136d0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor5IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0184:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %ecx
    00000007: 	movl	%esi, %r9d
    0000000a: 	movl	%edx, %eax
    0000000c: 	testl	%ecx, %ecx
    0000000e: 	jle	.Ltmp1267 # Offset: 14
    00000014: 	leal	-0x2(%rsi), %r8d
    00000018: 	movl	%r8d, %esi
    0000001b: 	shrl	%esi
    0000001d: 	addl	$0x1, %esi
    00000020: 	cmpl	$0x5, %r8d
    00000024: 	jbe	.Ltmp1268 # Offset: 36
    0000002a: 	pxor	%xmm0, %xmm0
    0000002e: 	movq	%rdi, %rax
    00000031: 	pinsrw	$0x0, %edx, %xmm0
    00000036: 	movl	%esi, %edx
    00000038: 	shrl	$0x2, %edx
    0000003b: 	subl	$0x1, %edx
    0000003e: 	shlq	$0x4, %rdx
    00000042: 	leaq	0x10(%rdi,%rdx), %rdx
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1269:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	pxor	%xmm2, %xmm0
    0000005c: 	cmpq	%rdx, %rax
    0000005f: 	jne	.Ltmp1269 # Offset: 95
    00000061: 	pextrw	$0x2, %xmm0, %edx
    00000066: 	pextrw	$0x0, %xmm0, %eax
    0000006b: 	pextrw	$0x1, %xmm0, %r8d
    00000071: 	movl	%esi, %r10d
    00000074: 	xorl	%edx, %eax
    00000076: 	pextrw	$0x4, %xmm0, %edx
    0000007b: 	andl	$-0x4, %r10d
    0000007f: 	xorl	%edx, %eax
    00000081: 	pextrw	$0x6, %xmm0, %edx
    00000086: 	xorl	%edx, %eax
    00000088: 	pextrw	$0x3, %xmm0, %edx
    0000008d: 	xorl	%edx, %r8d
    00000090: 	pextrw	$0x5, %xmm0, %edx
    00000095: 	xorl	%edx, %r8d
    00000098: 	pextrw	$0x7, %xmm0, %edx
    0000009d: 	xorl	%edx, %r8d
    000000a0: 	leal	(%r10,%r10), %edx
    000000a4: 	cmpl	%r10d, %esi
    000000a7: 	je	.Ltmp1270 # Offset: 167
.Ltmp1276:
    000000a9: 	movslq	%edx, %r11
    000000ac: 	leaq	(%r11,%r11), %r10
    000000b0: 	xorw	(%rdi,%r11,2), %ax
    000000b5: 	xorw	0x2(%rdi,%r11,2), %r8w
    000000bb: 	leal	0x2(%rdx), %r11d
    000000bf: 	cmpl	%r11d, %ecx
    000000c2: 	jle	.Ltmp1270 # Offset: 194
    000000c4: 	addl	$0x4, %edx
    000000c7: 	xorw	0x4(%rdi,%r10), %ax
    000000cd: 	xorw	0x6(%rdi,%r10), %r8w
    000000d3: 	cmpl	%edx, %ecx
    000000d5: 	jle	.Ltmp1270 # Offset: 213
    000000d7: 	xorw	0x8(%rdi,%r10), %ax
    000000dd: 	xorw	0xa(%rdi,%r10), %r8w
.Ltmp1270:
    000000e3: 	addl	%esi, %esi
.Ltmp1275:
    000000e5: 	cmpl	%esi, %r9d
    000000e8: 	jle	.Ltmp1271 # Offset: 232
    000000ee: 	movl	%r9d, %r11d
    000000f1: 	subl	%esi, %r11d
    000000f4: 	leal	-0x1(%r11), %edx
    000000f8: 	cmpl	$0x6, %edx
    000000fb: 	jbe	.Ltmp1272 # Offset: 251
    000000fd: 	movslq	%esi, %rdx
    00000100: 	pxor	%xmm0, %xmm0
    00000104: 	leaq	(%rdi,%rdx,2), %rcx
    00000108: 	movl	%r11d, %edx
    0000010b: 	shrl	$0x3, %edx
    0000010e: 	leal	-0x1(%rdx), %r10d
    00000112: 	leaq	0x10(%rcx), %rdx
    00000116: 	shlq	$0x4, %r10
    0000011a: 	addq	%rdx, %r10
    0000011d: 	jmp	.Ltmp1273 # Offset: 285
    0000011f: 	nop # Size: 1
.Ltmp1274:
    00000120: 	addq	$0x10, %rdx
.Ltmp1273:
    00000124: 	movdqu	(%rcx), %xmm1
    00000128: 	movq	%rdx, %rcx
    0000012b: 	pxor	%xmm1, %xmm0
    0000012f: 	cmpq	%rdx, %r10
    00000132: 	jne	.Ltmp1274 # Offset: 306
    00000134: 	movdqa	%xmm0, %xmm1
    00000138: 	psrldq	$0x8, %xmm1
    0000013d: 	pxor	%xmm1, %xmm0
    00000141: 	movdqa	%xmm0, %xmm1
    00000145: 	psrldq	$0x4, %xmm1
    0000014a: 	pxor	%xmm1, %xmm0
    0000014e: 	movdqa	%xmm0, %xmm1
    00000152: 	psrldq	$0x2, %xmm1
    00000157: 	pxor	%xmm1, %xmm0
    0000015b: 	pextrw	$0x0, %xmm0, %edx
    00000160: 	xorl	%edx, %eax
    00000162: 	movl	%r11d, %edx
    00000165: 	andl	$-0x8, %edx
    00000168: 	addl	%edx, %esi
    0000016a: 	cmpl	%r11d, %edx
    0000016d: 	je	.Ltmp1271 # Offset: 365
.Ltmp1272:
    0000016f: 	movslq	%esi, %rcx
    00000172: 	leaq	(%rcx,%rcx), %rdx
    00000176: 	xorw	(%rdi,%rcx,2), %ax
    0000017a: 	leal	0x1(%rsi), %ecx
    0000017d: 	cmpl	%ecx, %r9d
    00000180: 	jle	.Ltmp1271 # Offset: 384
    00000182: 	leal	0x2(%rsi), %ecx
    00000185: 	xorw	0x2(%rdi,%rdx), %ax
    0000018a: 	cmpl	%ecx, %r9d
    0000018d: 	jle	.Ltmp1271 # Offset: 397
    0000018f: 	leal	0x3(%rsi), %ecx
    00000192: 	xorw	0x4(%rdi,%rdx), %ax
    00000197: 	cmpl	%ecx, %r9d
    0000019a: 	jle	.Ltmp1271 # Offset: 410
    0000019c: 	leal	0x4(%rsi), %ecx
    0000019f: 	xorw	0x6(%rdi,%rdx), %ax
    000001a4: 	cmpl	%ecx, %r9d
    000001a7: 	jle	.Ltmp1271 # Offset: 423
    000001a9: 	leal	0x5(%rsi), %ecx
    000001ac: 	xorw	0x8(%rdi,%rdx), %ax
    000001b1: 	cmpl	%ecx, %r9d
    000001b4: 	jle	.Ltmp1271 # Offset: 436
    000001b6: 	addl	$0x6, %esi
    000001b9: 	xorw	0xa(%rdi,%rdx), %ax
    000001be: 	cmpl	%esi, %r9d
    000001c1: 	jle	.Ltmp1271 # Offset: 449
    000001c3: 	xorw	0xc(%rdi,%rdx), %ax
.Ltmp1271:
    000001c8: 	xorl	%r8d, %eax
    000001cb: 	retq # Offset: 459
    000001cc: 	nopl	(%rax) # Size: 4
.Ltmp1267:
    000001d0: 	xorl	%esi, %esi
    000001d2: 	xorl	%r8d, %r8d
    000001d5: 	jmp	.Ltmp1275 # Offset: 469
.Ltmp1268:
    000001da: 	xorl	%edx, %edx
    000001dc: 	xorl	%r8d, %r8d
    000001df: 	jmp	.Ltmp1276 # Offset: 479
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor5IsET_PKS0_iS0_"

Binary Function "_Z8bit_xor6IsET_PKS0_iS0_" after disassembly {
  Number      : 186
  State       : disassembled
  Address     : 0x138c0
  Size        : 0x20a
  MaxSize     : 0x210
  Offset      : 0x138c0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor6IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0185:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp1277 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %edi
    00000015: 	movl	%edi, %r8d
    00000018: 	shrl	$0x2, %r8d
    0000001c: 	addl	$0x1, %r8d
    00000020: 	cmpl	$0x3, %edi
    00000023: 	jbe	.Ltmp1278 # Offset: 35
    00000029: 	pxor	%xmm0, %xmm0
    0000002d: 	movq	%rcx, %rax
    00000030: 	pinsrw	$0x0, %edx, %xmm0
    00000035: 	movl	%r8d, %edx
    00000038: 	shrl	%edx
    0000003a: 	subl	$0x1, %edx
    0000003d: 	shlq	$0x4, %rdx
    00000041: 	leaq	0x10(%rcx,%rdx), %rdx
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1279:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	pxor	%xmm2, %xmm0
    0000005c: 	cmpq	%rax, %rdx
    0000005f: 	jne	.Ltmp1279 # Offset: 95
    00000061: 	pextrw	$0x4, %xmm0, %edx
    00000066: 	pextrw	$0x0, %xmm0, %eax
    0000006b: 	pextrw	$0x1, %xmm0, %edi
    00000070: 	xorl	%edx, %eax
    00000072: 	pextrw	$0x5, %xmm0, %edx
    00000077: 	pextrw	$0x2, %xmm0, %r10d
    0000007d: 	xorl	%edx, %edi
    0000007f: 	pextrw	$0x6, %xmm0, %edx
    00000084: 	pextrw	$0x7, %xmm0, %r9d
    0000008a: 	xorl	%edx, %r10d
    0000008d: 	pextrw	$0x3, %xmm0, %edx
    00000092: 	xorl	%r9d, %edx
    00000095: 	movl	%r8d, %r9d
    00000098: 	andl	$-0x2, %r9d
    0000009c: 	testl	$0x80000001, %r8d
    000000a3: 	je	.Ltmp1280 # Offset: 163
.Ltmp1286:
    000000a5: 	movzwl	%dx, %edx
    000000a8: 	movzwl	%r10w, %r10d
    000000ac: 	movzwl	%di, %edi
    000000af: 	movzwl	%ax, %eax
    000000b2: 	shlq	$0x10, %rdx
    000000b6: 	movq	(%rcx,%r9,8), %xmm0
    000000bc: 	orq	%r10, %rdx
    000000bf: 	shlq	$0x10, %rdx
    000000c3: 	orq	%rdi, %rdx
    000000c6: 	shlq	$0x10, %rdx
    000000ca: 	orq	%rax, %rdx
    000000cd: 	movq	%rdx, %xmm3
    000000d2: 	pxor	%xmm3, %xmm0
    000000d6: 	pextrw	$0x0, %xmm0, %eax
    000000db: 	pextrw	$0x1, %xmm0, %edi
    000000e0: 	pextrw	$0x2, %xmm0, %r10d
    000000e6: 	pextrw	$0x3, %xmm0, %edx
.Ltmp1280:
    000000eb: 	xorl	%r10d, %edi
    000000ee: 	shll	$0x2, %r8d
    000000f2: 	xorl	%edx, %edi
    000000f4: 	movl	%edi, %r10d
.Ltmp1285:
    000000f7: 	cmpl	%r8d, %esi
    000000fa: 	jle	.Ltmp1281 # Offset: 250
    00000100: 	movl	%esi, %r11d
    00000103: 	subl	%r8d, %r11d
    00000106: 	leal	-0x1(%r11), %edx
    0000010a: 	cmpl	$0x6, %edx
    0000010d: 	jbe	.Ltmp1282 # Offset: 269
    0000010f: 	movslq	%r8d, %rdx
    00000112: 	pxor	%xmm0, %xmm0
    00000116: 	leaq	(%rcx,%rdx,2), %rdi
    0000011a: 	movl	%r11d, %edx
    0000011d: 	shrl	$0x3, %edx
    00000120: 	leal	-0x1(%rdx), %r9d
    00000124: 	leaq	0x10(%rdi), %rdx
    00000128: 	shlq	$0x4, %r9
    0000012c: 	addq	%rdx, %r9
    0000012f: 	jmp	.Ltmp1283 # Offset: 303
    00000131: 	nopl	(%rax) # Size: 7
.Ltmp1284:
    00000138: 	addq	$0x10, %rdx
.Ltmp1283:
    0000013c: 	movdqu	(%rdi), %xmm1
    00000140: 	movq	%rdx, %rdi
    00000143: 	pxor	%xmm1, %xmm0
    00000147: 	cmpq	%r9, %rdx
    0000014a: 	jne	.Ltmp1284 # Offset: 330
    0000014c: 	movdqa	%xmm0, %xmm1
    00000150: 	psrldq	$0x8, %xmm1
    00000155: 	pxor	%xmm1, %xmm0
    00000159: 	movdqa	%xmm0, %xmm1
    0000015d: 	psrldq	$0x4, %xmm1
    00000162: 	pxor	%xmm1, %xmm0
    00000166: 	movdqa	%xmm0, %xmm1
    0000016a: 	psrldq	$0x2, %xmm1
    0000016f: 	pxor	%xmm1, %xmm0
    00000173: 	pextrw	$0x0, %xmm0, %edx
    00000178: 	xorl	%edx, %eax
    0000017a: 	movl	%r11d, %edx
    0000017d: 	andl	$-0x8, %edx
    00000180: 	addl	%edx, %r8d
    00000183: 	cmpl	%r11d, %edx
    00000186: 	je	.Ltmp1281 # Offset: 390
.Ltmp1282:
    00000188: 	movslq	%r8d, %rdi
    0000018b: 	leaq	(%rdi,%rdi), %rdx
    0000018f: 	xorw	(%rcx,%rdi,2), %ax
    00000193: 	leal	0x1(%r8), %edi
    00000197: 	cmpl	%esi, %edi
    00000199: 	jge	.Ltmp1281 # Offset: 409
    0000019b: 	leal	0x2(%r8), %edi
    0000019f: 	xorw	0x2(%rcx,%rdx), %ax
    000001a4: 	cmpl	%edi, %esi
    000001a6: 	jle	.Ltmp1281 # Offset: 422
    000001a8: 	leal	0x3(%r8), %edi
    000001ac: 	xorw	0x4(%rcx,%rdx), %ax
    000001b1: 	cmpl	%edi, %esi
    000001b3: 	jle	.Ltmp1281 # Offset: 435
    000001b5: 	leal	0x4(%r8), %edi
    000001b9: 	xorw	0x6(%rcx,%rdx), %ax
    000001be: 	cmpl	%edi, %esi
    000001c0: 	jle	.Ltmp1281 # Offset: 448
    000001c2: 	leal	0x5(%r8), %edi
    000001c6: 	xorw	0x8(%rcx,%rdx), %ax
    000001cb: 	cmpl	%esi, %edi
    000001cd: 	jge	.Ltmp1281 # Offset: 461
    000001cf: 	addl	$0x6, %r8d
    000001d3: 	xorw	0xa(%rcx,%rdx), %ax
    000001d8: 	cmpl	%esi, %r8d
    000001db: 	jge	.Ltmp1281 # Offset: 475
    000001dd: 	xorw	0xc(%rcx,%rdx), %ax
.Ltmp1281:
    000001e2: 	xorl	%r10d, %eax
    000001e5: 	retq # Offset: 485
    000001e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1277:
    000001f0: 	xorl	%r10d, %r10d
    000001f3: 	xorl	%r8d, %r8d
    000001f6: 	jmp	.Ltmp1285 # Offset: 502
.Ltmp1278:
    000001fb: 	xorl	%r9d, %r9d
    000001fe: 	xorl	%edx, %edx
    00000200: 	xorl	%r10d, %r10d
    00000203: 	xorl	%edi, %edi
    00000205: 	jmp	.Ltmp1286 # Offset: 517
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor6IsET_PKS0_iS0_"

Binary Function "_Z8bit_xor7IsET_PKS0_iS0_" after disassembly {
  Number      : 187
  State       : disassembled
  Address     : 0x13ad0
  Size        : 0x20a
  MaxSize     : 0x210
  Offset      : 0x13ad0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor7IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0186:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp1287 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %edi
    00000015: 	movl	%edi, %r8d
    00000018: 	shrl	$0x2, %r8d
    0000001c: 	addl	$0x1, %r8d
    00000020: 	cmpl	$0x3, %edi
    00000023: 	jbe	.Ltmp1288 # Offset: 35
    00000029: 	pxor	%xmm0, %xmm0
    0000002d: 	movq	%rcx, %rax
    00000030: 	pinsrw	$0x0, %edx, %xmm0
    00000035: 	movl	%r8d, %edx
    00000038: 	shrl	%edx
    0000003a: 	subl	$0x1, %edx
    0000003d: 	shlq	$0x4, %rdx
    00000041: 	leaq	0x10(%rcx,%rdx), %rdx
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1289:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	pxor	%xmm2, %xmm0
    0000005c: 	cmpq	%rdx, %rax
    0000005f: 	jne	.Ltmp1289 # Offset: 95
    00000061: 	pextrw	$0x4, %xmm0, %edx
    00000066: 	pextrw	$0x0, %xmm0, %eax
    0000006b: 	pextrw	$0x1, %xmm0, %edi
    00000070: 	xorl	%edx, %eax
    00000072: 	pextrw	$0x5, %xmm0, %edx
    00000077: 	pextrw	$0x2, %xmm0, %r10d
    0000007d: 	xorl	%edx, %edi
    0000007f: 	pextrw	$0x6, %xmm0, %edx
    00000084: 	pextrw	$0x7, %xmm0, %r9d
    0000008a: 	xorl	%edx, %r10d
    0000008d: 	pextrw	$0x3, %xmm0, %edx
    00000092: 	xorl	%r9d, %edx
    00000095: 	movl	%r8d, %r9d
    00000098: 	andl	$-0x2, %r9d
    0000009c: 	testl	$0x80000001, %r8d
    000000a3: 	je	.Ltmp1290 # Offset: 163
.Ltmp1296:
    000000a5: 	movzwl	%dx, %edx
    000000a8: 	movzwl	%r10w, %r10d
    000000ac: 	movzwl	%di, %edi
    000000af: 	movzwl	%ax, %eax
    000000b2: 	shlq	$0x10, %rdx
    000000b6: 	movq	(%rcx,%r9,8), %xmm0
    000000bc: 	orq	%r10, %rdx
    000000bf: 	shlq	$0x10, %rdx
    000000c3: 	orq	%rdi, %rdx
    000000c6: 	shlq	$0x10, %rdx
    000000ca: 	orq	%rax, %rdx
    000000cd: 	movq	%rdx, %xmm3
    000000d2: 	pxor	%xmm3, %xmm0
    000000d6: 	pextrw	$0x0, %xmm0, %eax
    000000db: 	pextrw	$0x1, %xmm0, %edi
    000000e0: 	pextrw	$0x2, %xmm0, %r10d
    000000e6: 	pextrw	$0x3, %xmm0, %edx
.Ltmp1290:
    000000eb: 	xorl	%r10d, %edi
    000000ee: 	shll	$0x2, %r8d
    000000f2: 	xorl	%edx, %edi
    000000f4: 	movl	%edi, %r10d
.Ltmp1295:
    000000f7: 	cmpl	%r8d, %esi
    000000fa: 	jle	.Ltmp1291 # Offset: 250
    00000100: 	movl	%esi, %r11d
    00000103: 	subl	%r8d, %r11d
    00000106: 	leal	-0x1(%r11), %edx
    0000010a: 	cmpl	$0x6, %edx
    0000010d: 	jbe	.Ltmp1292 # Offset: 269
    0000010f: 	movslq	%r8d, %rdx
    00000112: 	pxor	%xmm0, %xmm0
    00000116: 	leaq	(%rcx,%rdx,2), %rdi
    0000011a: 	movl	%r11d, %edx
    0000011d: 	shrl	$0x3, %edx
    00000120: 	leal	-0x1(%rdx), %r9d
    00000124: 	leaq	0x10(%rdi), %rdx
    00000128: 	shlq	$0x4, %r9
    0000012c: 	addq	%rdx, %r9
    0000012f: 	jmp	.Ltmp1293 # Offset: 303
    00000131: 	nopl	(%rax) # Size: 7
.Ltmp1294:
    00000138: 	addq	$0x10, %rdx
.Ltmp1293:
    0000013c: 	movdqu	(%rdi), %xmm1
    00000140: 	movq	%rdx, %rdi
    00000143: 	pxor	%xmm1, %xmm0
    00000147: 	cmpq	%r9, %rdx
    0000014a: 	jne	.Ltmp1294 # Offset: 330
    0000014c: 	movdqa	%xmm0, %xmm1
    00000150: 	psrldq	$0x8, %xmm1
    00000155: 	pxor	%xmm1, %xmm0
    00000159: 	movdqa	%xmm0, %xmm1
    0000015d: 	psrldq	$0x4, %xmm1
    00000162: 	pxor	%xmm1, %xmm0
    00000166: 	movdqa	%xmm0, %xmm1
    0000016a: 	psrldq	$0x2, %xmm1
    0000016f: 	pxor	%xmm1, %xmm0
    00000173: 	pextrw	$0x0, %xmm0, %edx
    00000178: 	xorl	%edx, %eax
    0000017a: 	movl	%r11d, %edx
    0000017d: 	andl	$-0x8, %edx
    00000180: 	addl	%edx, %r8d
    00000183: 	cmpl	%r11d, %edx
    00000186: 	je	.Ltmp1291 # Offset: 390
.Ltmp1292:
    00000188: 	movslq	%r8d, %rdi
    0000018b: 	leaq	(%rdi,%rdi), %rdx
    0000018f: 	xorw	(%rcx,%rdi,2), %ax
    00000193: 	leal	0x1(%r8), %edi
    00000197: 	cmpl	%esi, %edi
    00000199: 	jge	.Ltmp1291 # Offset: 409
    0000019b: 	leal	0x2(%r8), %edi
    0000019f: 	xorw	0x2(%rcx,%rdx), %ax
    000001a4: 	cmpl	%edi, %esi
    000001a6: 	jle	.Ltmp1291 # Offset: 422
    000001a8: 	leal	0x3(%r8), %edi
    000001ac: 	xorw	0x4(%rcx,%rdx), %ax
    000001b1: 	cmpl	%edi, %esi
    000001b3: 	jle	.Ltmp1291 # Offset: 435
    000001b5: 	leal	0x4(%r8), %edi
    000001b9: 	xorw	0x6(%rcx,%rdx), %ax
    000001be: 	cmpl	%edi, %esi
    000001c0: 	jle	.Ltmp1291 # Offset: 448
    000001c2: 	leal	0x5(%r8), %edi
    000001c6: 	xorw	0x8(%rcx,%rdx), %ax
    000001cb: 	cmpl	%esi, %edi
    000001cd: 	jge	.Ltmp1291 # Offset: 461
    000001cf: 	addl	$0x6, %r8d
    000001d3: 	xorw	0xa(%rcx,%rdx), %ax
    000001d8: 	cmpl	%esi, %r8d
    000001db: 	jge	.Ltmp1291 # Offset: 475
    000001dd: 	xorw	0xc(%rcx,%rdx), %ax
.Ltmp1291:
    000001e2: 	xorl	%r10d, %eax
    000001e5: 	retq # Offset: 485
    000001e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1287:
    000001f0: 	xorl	%r10d, %r10d
    000001f3: 	xorl	%r8d, %r8d
    000001f6: 	jmp	.Ltmp1295 # Offset: 502
.Ltmp1288:
    000001fb: 	xorl	%r9d, %r9d
    000001fe: 	xorl	%edx, %edx
    00000200: 	xorl	%r10d, %r10d
    00000203: 	xorl	%edi, %edi
    00000205: 	jmp	.Ltmp1296 # Offset: 517
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor7IsET_PKS0_iS0_"

Binary Function "_Z8bit_xor8IsET_PKS0_iS0_" after disassembly {
  Number      : 188
  State       : disassembled
  Address     : 0x13ce0
  Size        : 0x181
  MaxSize     : 0x190
  Offset      : 0x13ce0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor8IsET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0187:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r9d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x7, %esi
    0000000c: 	jle	.Ltmp1297 # Offset: 12
    00000012: 	leal	-0x8(%rsi), %ecx
    00000015: 	pxor	%xmm0, %xmm0
    00000019: 	xorl	%eax, %eax
    0000001b: 	shrl	$0x3, %ecx
    0000001e: 	pinsrw	$0x0, %edx, %xmm0
    00000023: 	addl	$0x1, %ecx
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1298:
    00000030: 	movq	%rax, %rdx
    00000033: 	addq	$0x1, %rax
    00000037: 	shlq	$0x4, %rdx
    0000003b: 	movdqu	(%rdi,%rdx), %xmm1
    00000040: 	pxor	%xmm1, %xmm0
    00000044: 	cmpl	%eax, %ecx
    00000046: 	ja	.Ltmp1298 # Offset: 70
    00000048: 	pextrw	$0x1, %xmm0, %edx
    0000004d: 	pextrw	$0x2, %xmm0, %esi
    00000052: 	pextrw	$0x0, %xmm0, %eax
    00000057: 	shll	$0x3, %ecx
    0000005a: 	xorl	%edx, %esi
    0000005c: 	pextrw	$0x3, %xmm0, %edx
    00000061: 	xorl	%edx, %esi
    00000063: 	pextrw	$0x4, %xmm0, %edx
    00000068: 	xorl	%edx, %esi
    0000006a: 	pextrw	$0x5, %xmm0, %edx
    0000006f: 	xorl	%edx, %esi
    00000071: 	pextrw	$0x6, %xmm0, %edx
    00000076: 	xorl	%edx, %esi
    00000078: 	pextrw	$0x7, %xmm0, %edx
    0000007d: 	xorl	%edx, %esi
.Ltmp1303:
    0000007f: 	cmpl	%ecx, %r9d
    00000082: 	jle	.Ltmp1299 # Offset: 130
    00000088: 	movl	%r9d, %r11d
    0000008b: 	subl	%ecx, %r11d
    0000008e: 	leal	-0x1(%r11), %edx
    00000092: 	cmpl	$0x6, %edx
    00000095: 	jbe	.Ltmp1300 # Offset: 149
    00000097: 	movslq	%ecx, %rdx
    0000009a: 	pxor	%xmm0, %xmm0
    0000009e: 	leaq	(%rdi,%rdx,2), %r8
    000000a2: 	movl	%r11d, %edx
    000000a5: 	shrl	$0x3, %edx
    000000a8: 	leal	-0x1(%rdx), %r10d
    000000ac: 	leaq	0x10(%r8), %rdx
    000000b0: 	shlq	$0x4, %r10
    000000b4: 	addq	%rdx, %r10
    000000b7: 	jmp	.Ltmp1301 # Offset: 183
    000000b9: 	nopl	(%rax) # Size: 7
.Ltmp1302:
    000000c0: 	addq	$0x10, %rdx
.Ltmp1301:
    000000c4: 	movdqu	(%r8), %xmm1
    000000c9: 	movq	%rdx, %r8
    000000cc: 	pxor	%xmm1, %xmm0
    000000d0: 	cmpq	%rdx, %r10
    000000d3: 	jne	.Ltmp1302 # Offset: 211
    000000d5: 	movdqa	%xmm0, %xmm1
    000000d9: 	psrldq	$0x8, %xmm1
    000000de: 	pxor	%xmm1, %xmm0
    000000e2: 	movdqa	%xmm0, %xmm1
    000000e6: 	psrldq	$0x4, %xmm1
    000000eb: 	pxor	%xmm1, %xmm0
    000000ef: 	movdqa	%xmm0, %xmm1
    000000f3: 	psrldq	$0x2, %xmm1
    000000f8: 	pxor	%xmm1, %xmm0
    000000fc: 	pextrw	$0x0, %xmm0, %edx
    00000101: 	xorl	%edx, %eax
    00000103: 	movl	%r11d, %edx
    00000106: 	andl	$-0x8, %edx
    00000109: 	addl	%edx, %ecx
    0000010b: 	cmpl	%r11d, %edx
    0000010e: 	je	.Ltmp1299 # Offset: 270
.Ltmp1300:
    00000110: 	movslq	%ecx, %r8
    00000113: 	leaq	(%r8,%r8), %rdx
    00000117: 	xorw	(%rdi,%r8,2), %ax
    0000011c: 	leal	0x1(%rcx), %r8d
    00000120: 	cmpl	%r8d, %r9d
    00000123: 	jle	.Ltmp1299 # Offset: 291
    00000125: 	leal	0x2(%rcx), %r8d
    00000129: 	xorw	0x2(%rdi,%rdx), %ax
    0000012e: 	cmpl	%r9d, %r8d
    00000131: 	jge	.Ltmp1299 # Offset: 305
    00000133: 	leal	0x3(%rcx), %r8d
    00000137: 	xorw	0x4(%rdi,%rdx), %ax
    0000013c: 	cmpl	%r9d, %r8d
    0000013f: 	jge	.Ltmp1299 # Offset: 319
    00000141: 	leal	0x4(%rcx), %r8d
    00000145: 	xorw	0x6(%rdi,%rdx), %ax
    0000014a: 	cmpl	%r9d, %r8d
    0000014d: 	jge	.Ltmp1299 # Offset: 333
    0000014f: 	leal	0x5(%rcx), %r8d
    00000153: 	xorw	0x8(%rdi,%rdx), %ax
    00000158: 	cmpl	%r9d, %r8d
    0000015b: 	jge	.Ltmp1299 # Offset: 347
    0000015d: 	addl	$0x6, %ecx
    00000160: 	xorw	0xa(%rdi,%rdx), %ax
    00000165: 	cmpl	%r9d, %ecx
    00000168: 	jge	.Ltmp1299 # Offset: 360
    0000016a: 	xorw	0xc(%rdi,%rdx), %ax
.Ltmp1299:
    0000016f: 	xorl	%esi, %eax
    00000171: 	retq # Offset: 369
    00000172: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1297:
    00000178: 	xorl	%esi, %esi
    0000017a: 	xorl	%ecx, %ecx
    0000017c: 	jmp	.Ltmp1303 # Offset: 380
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor8IsET_PKS0_iS0_"

Binary Function "_Z10logic_and1IsEbPKT_ib" after disassembly {
  Number      : 189
  State       : disassembled
  Address     : 0x13e70
  Size        : 0x33
  MaxSize     : 0x40
  Offset      : 0x13e70
  Section     : .text
  Orc Section : .local.text._Z10logic_and1IsEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0188:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp1304 # Offset: 8
    0000000a: 	testb	%dl, %dl
    0000000c: 	je	.Ltmp1304 # Offset: 12
    0000000e: 	leal	-0x1(%rsi), %edx
    00000011: 	leaq	0x2(%rdi,%rdx,2), %rdx
.Ltmp1306:
    00000016: 	cmpw	$0x0, (%rdi)
    0000001a: 	je	.Ltmp1305 # Offset: 26
    0000001c: 	addq	$0x2, %rdi
    00000020: 	cmpq	%rdi, %rdx
    00000023: 	jne	.Ltmp1306 # Offset: 35
    00000025: 	retq # Offset: 37
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1305:
    00000030: 	xorl	%eax, %eax
.Ltmp1304:
    00000032: 	retq # Offset: 50
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and1IsEbPKT_ib"

Binary Function "_Z10logic_and2IsEbPKT_ib" after disassembly {
  Number      : 190
  State       : disassembled
  Address     : 0x13eb0
  Size        : 0x3e
  MaxSize     : 0x40
  Offset      : 0x13eb0
  Section     : .text
  Orc Section : .local.text._Z10logic_and2IsEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0189:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	leaq	(%rdi,%rsi,2), %rax
    0000000b: 	cmpq	%rax, %rdi
    0000000e: 	je	.Ltmp1307 # Offset: 14
    00000010: 	testb	%dl, %dl
    00000012: 	jne	.Ltmp1308 # Offset: 18
.Ltmp1309:
    00000014: 	jmp	.Ltmp1309 # Offset: 20
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1308:
    00000020: 	addq	$0x2, %rdi
    00000024: 	movzwl	-0x2(%rdi), %edx
    00000028: 	cmpq	%rdi, %rax
    0000002b: 	je	.Ltmp1310 # Offset: 43
    0000002d: 	testw	%dx, %dx
    00000030: 	jne	.Ltmp1308 # Offset: 48
    00000032: 	jmp	.Ltmp1309 # Offset: 50
.Ltmp1307:
    00000034: 	movl	%edx, %eax
    00000036: 	retq # Offset: 54
.Ltmp1310:
    00000037: 	testw	%dx, %dx
    0000003a: 	setne	%al
    0000003d: 	retq # Offset: 61
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and2IsEbPKT_ib"

Binary Function "_Z10logic_and3IsEbPKT_ib" after disassembly {
  Number      : 191
  State       : disassembled
  Address     : 0x13ef0
  Size        : 0x6a
  MaxSize     : 0x70
  Offset      : 0x13ef0
  Section     : .text
  Orc Section : .local.text._Z10logic_and3IsEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0190:
    00000000: 	endbr64
    00000004: 	cmpl	$0x1, %esi
    00000007: 	jle	.Ltmp1311 # Offset: 7
    00000009: 	xorl	%eax, %eax
    0000000b: 	testb	%dl, %dl
    0000000d: 	je	.Ltmp1312 # Offset: 13
    0000000f: 	leal	-0x2(%rsi), %eax
    00000012: 	shrl	%eax
    00000014: 	leal	0x2(%rax), %r8d
    00000018: 	movl	$0x2, %eax
    0000001d: 	addq	%r8, %r8
.Ltmp1314:
    00000020: 	cmpw	$0x0, -0x4(%rdi,%rax,2)
    00000026: 	je	.Ltmp1313 # Offset: 38
    00000028: 	cmpw	$0x0, -0x2(%rdi,%rax,2)
    0000002e: 	je	.Ltmp1313 # Offset: 46
    00000030: 	movslq	%eax, %rcx
    00000033: 	addq	$0x2, %rax
    00000037: 	cmpq	%r8, %rax
    0000003a: 	jne	.Ltmp1314 # Offset: 58
    0000003c: 	cmpl	%ecx, %esi
    0000003e: 	jle	.Ltmp1315 # Offset: 62
.Ltmp1316:
    00000040: 	cmpw	$0x0, (%rdi,%rcx,2)
    00000045: 	je	.Ltmp1313 # Offset: 69
    00000047: 	addq	$0x1, %rcx
    0000004b: 	cmpl	%ecx, %esi
    0000004d: 	jg	.Ltmp1316 # Offset: 77
    0000004f: 	movl	$0x1, %eax
    00000054: 	retq # Offset: 84
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp1313:
    00000058: 	xorl	%eax, %eax
    0000005a: 	retq # Offset: 90
.Ltmp1315:
    0000005b: 	movl	%edx, %eax
.Ltmp1312:
    0000005d: 	retq # Offset: 93
    0000005e: 	nop # Size: 2
.Ltmp1311:
    00000060: 	jne	.Ltmp1315 # Offset: 96
    00000062: 	testb	%dl, %dl
    00000064: 	je	.Ltmp1313 # Offset: 100
    00000066: 	xorl	%ecx, %ecx
    00000068: 	jmp	.Ltmp1316 # Offset: 104
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and3IsEbPKT_ib"

Binary Function "_Z10logic_and4IsEbPKT_ib" after disassembly {
  Number      : 192
  State       : disassembled
  Address     : 0x13f60
  Size        : 0x7a
  MaxSize     : 0x80
  Offset      : 0x13f60
  Section     : .text
  Orc Section : .local.text._Z10logic_and4IsEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0191:
    00000000: 	endbr64
    00000004: 	cmpl	$0x3, %esi
    00000007: 	jle	.Ltmp1317 # Offset: 7
    00000009: 	leal	-0x3(%rsi), %r8d
    0000000d: 	xorl	%eax, %eax
    0000000f: 	testb	%dl, %dl
    00000011: 	je	.Ltmp1318 # Offset: 17
    00000013: 	movq	%rdi, %rax
    00000016: 	xorl	%ecx, %ecx
.Ltmp1320:
    00000018: 	cmpw	$0x0, (%rax)
    0000001c: 	je	.Ltmp1319 # Offset: 28
    0000001e: 	cmpw	$0x0, 0x2(%rax)
    00000023: 	je	.Ltmp1319 # Offset: 35
    00000025: 	cmpw	$0x0, 0x4(%rax)
    0000002a: 	je	.Ltmp1319 # Offset: 42
    0000002c: 	cmpw	$0x0, 0x6(%rax)
    00000031: 	je	.Ltmp1319 # Offset: 49
    00000033: 	addl	$0x4, %ecx
    00000036: 	addq	$0x8, %rax
    0000003a: 	cmpl	%r8d, %ecx
    0000003d: 	jl	.Ltmp1320 # Offset: 61
    0000003f: 	cmpl	%ecx, %esi
    00000041: 	jg	.Ltmp1321 # Offset: 65
.Ltmp1322:
    00000043: 	movl	%edx, %eax
.Ltmp1318:
    00000045: 	retq # Offset: 69
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1319:
    00000050: 	xorl	%eax, %eax
    00000052: 	retq # Offset: 82
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1317:
    00000058: 	testl	%esi, %esi
    0000005a: 	jle	.Ltmp1322 # Offset: 90
    0000005c: 	testb	%dl, %dl
    0000005e: 	je	.Ltmp1319 # Offset: 94
    00000060: 	xorl	%ecx, %ecx
.Ltmp1321:
    00000062: 	movslq	%ecx, %rax
.Ltmp1323:
    00000065: 	cmpw	$0x0, (%rdi,%rax,2)
    0000006a: 	je	.Ltmp1319 # Offset: 106
    0000006c: 	addq	$0x1, %rax
    00000070: 	cmpl	%eax, %esi
    00000072: 	jg	.Ltmp1323 # Offset: 114
    00000074: 	movl	$0x1, %eax
    00000079: 	retq # Offset: 121
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and4IsEbPKT_ib"

Binary Function "_Z10logic_and5IsEbPKT_ib" after disassembly {
  Number      : 193
  State       : disassembled
  Address     : 0x13fe0
  Size        : 0x8c
  MaxSize     : 0x90
  Offset      : 0x13fe0
  Section     : .text
  Orc Section : .local.text._Z10logic_and5IsEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0192:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x1, %esi
    0000000c: 	jle	.Ltmp1324 # Offset: 12
    0000000e: 	leal	-0x2(%rsi), %r9d
    00000012: 	movq	%rdi, %rcx
    00000015: 	shrl	%r9d
    00000018: 	movl	%r9d, %edi
    0000001b: 	leaq	0x4(%r8,%rdi,4), %rdi
.Ltmp1327:
    00000020: 	testb	%dl, %dl
    00000022: 	je	.Ltmp1325 # Offset: 34
    00000024: 	cmpw	$0x0, (%rcx)
    00000028: 	setne	%dl
.Ltmp1325:
    0000002b: 	testb	%al, %al
    0000002d: 	je	.Ltmp1326 # Offset: 45
    0000002f: 	cmpw	$0x0, 0x2(%rcx)
    00000034: 	setne	%al
.Ltmp1326:
    00000037: 	addq	$0x4, %rcx
    0000003b: 	cmpq	%rdi, %rcx
    0000003e: 	jne	.Ltmp1327 # Offset: 62
    00000040: 	leal	0x2(%r9,%r9), %ecx
.Ltmp1331:
    00000045: 	cmpl	%ecx, %esi
    00000047: 	jle	.Ltmp1328 # Offset: 71
    00000049: 	testb	%dl, %dl
    0000004b: 	je	.Ltmp1329 # Offset: 75
    0000004d: 	subl	$0x1, %esi
    00000050: 	movslq	%ecx, %rdi
    00000053: 	subl	%ecx, %esi
    00000055: 	leaq	(%r8,%rdi,2), %rdx
    00000059: 	leaq	(%rsi,%rdi), %rcx
    0000005d: 	leaq	0x2(%r8,%rcx,2), %rcx
.Ltmp1330:
    00000062: 	cmpw	$0x0, (%rdx)
    00000066: 	je	.Ltmp1329 # Offset: 102
    00000068: 	addq	$0x2, %rdx
    0000006c: 	cmpq	%rcx, %rdx
    0000006f: 	jne	.Ltmp1330 # Offset: 111
    00000071: 	retq # Offset: 113
    00000072: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1329:
    00000078: 	xorl	%eax, %eax
    0000007a: 	retq # Offset: 122
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1328:
    00000080: 	andl	%edx, %eax
    00000082: 	retq # Offset: 130
    00000083: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1324:
    00000088: 	xorl	%ecx, %ecx
    0000008a: 	jmp	.Ltmp1331 # Offset: 138
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and5IsEbPKT_ib"

Binary Function "_Z10logic_and6IsEbPKT_ib" after disassembly {
  Number      : 194
  State       : disassembled
  Address     : 0x14070
  Size        : 0xe4
  MaxSize     : 0xf0
  Offset      : 0x14070
  Section     : .text
  Orc Section : .local.text._Z10logic_and6IsEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0193:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movl	%esi, %r11d
    00000008: 	pushq	%rbx
    00000009: 	movq	%rdi, %rbx
    0000000c: 	movl	%edx, %edi
    0000000e: 	cmpl	$0x3, %esi
    00000011: 	jle	.Ltmp1332 # Offset: 17
    00000017: 	leal	-0x4(%rsi), %ebp
    0000001a: 	movq	%rbx, %rax
    0000001d: 	movl	%edx, %esi
    0000001f: 	xorl	%r8d, %r8d
    00000022: 	shrl	$0x2, %ebp
    00000025: 	movl	%ebp, %ecx
    00000027: 	leaq	0x8(%rbx,%rcx,8), %r9
    0000002c: 	movl	%edx, %ecx
    0000002e: 	nop # Size: 2
.Ltmp1337:
    00000030: 	testb	%dil, %dil
    00000033: 	je	.Ltmp1333 # Offset: 51
    00000035: 	cmpw	$0x0, (%rax)
    00000039: 	setne	%dil
.Ltmp1333:
    0000003d: 	testb	%dl, %dl
    0000003f: 	je	.Ltmp1334 # Offset: 63
    00000041: 	cmpw	$0x0, 0x2(%rax)
    00000046: 	setne	%dl
.Ltmp1334:
    00000049: 	testb	%cl, %cl
    0000004b: 	je	.Ltmp1335 # Offset: 75
    0000004d: 	cmpw	$0x0, 0x4(%rax)
    00000052: 	setne	%cl
.Ltmp1335:
    00000055: 	xorl	%r10d, %r10d
    00000058: 	testb	%sil, %sil
    0000005b: 	je	.Ltmp1336 # Offset: 91
    0000005d: 	cmpw	$0x0, 0x6(%rax)
    00000062: 	movl	%r8d, %r10d
    00000065: 	cmovnel	%ecx, %r10d
    00000069: 	cmovel	%r8d, %esi
.Ltmp1336:
    0000006d: 	addq	$0x8, %rax
    00000071: 	cmpq	%r9, %rax
    00000074: 	jne	.Ltmp1337 # Offset: 116
    00000076: 	leal	0x4(,%rbp,4), %ecx
    0000007d: 	cmpl	%ecx, %r11d
    00000080: 	jle	.Ltmp1338 # Offset: 128
.Ltmp1341:
    00000082: 	testb	%dil, %dil
    00000085: 	je	.Ltmp1339 # Offset: 133
    00000087: 	subl	$0x1, %r11d
    0000008b: 	movslq	%ecx, %rsi
    0000008e: 	subl	%ecx, %r11d
    00000091: 	leaq	(%rbx,%rsi,2), %rax
    00000095: 	leaq	(%r11,%rsi), %rcx
    00000099: 	leaq	0x2(%rbx,%rcx,2), %rcx
.Ltmp1340:
    0000009e: 	cmpw	$0x0, (%rax)
    000000a2: 	je	.Ltmp1339 # Offset: 162
    000000a4: 	addq	$0x2, %rax
    000000a8: 	cmpq	%rax, %rcx
    000000ab: 	jne	.Ltmp1340 # Offset: 171
.Ltmp1342:
    000000ad: 	xorl	%eax, %eax
    000000af: 	testb	%dl, %dl
    000000b1: 	popq	%rbx
    000000b2: 	popq	%rbp
    000000b3: 	cmovel	%eax, %r10d
    000000b7: 	movl	%r10d, %eax
    000000ba: 	retq # Offset: 186
    000000bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1339:
    000000c0: 	xorl	%r10d, %r10d
    000000c3: 	popq	%rbx
    000000c4: 	popq	%rbp
    000000c5: 	movl	%r10d, %eax
    000000c8: 	retq # Offset: 200
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp1332:
    000000d0: 	xorl	%ecx, %ecx
    000000d2: 	movl	%edx, %r10d
    000000d5: 	cmpl	%ecx, %r11d
    000000d8: 	jg	.Ltmp1341 # Offset: 216
    000000da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1338:
    000000e0: 	andl	%edi, %edx
    000000e2: 	jmp	.Ltmp1342 # Offset: 226
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and6IsEbPKT_ib"

Binary Function "_Z10logic_and7IsEbPKT_ib" after disassembly {
  Number      : 195
  State       : disassembled
  Address     : 0x14160
  Size        : 0x130
  MaxSize     : 0x130
  Offset      : 0x14160
  Section     : .text
  Orc Section : .local.text._Z10logic_and7IsEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0194:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movl	%edx, %eax
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movl	%esi, %ebp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	cmpl	$0x3, %esi
    00000016: 	jle	.Ltmp1343 # Offset: 22
    0000001c: 	leal	-0x4(%rsi), %r14d
    00000020: 	movq	%rdi, %rcx
    00000023: 	xorl	%r10d, %r10d
    00000026: 	shrl	$0x2, %r14d
    0000002a: 	movl	%r14d, %esi
    0000002d: 	leaq	0x8(%rdi,%rsi,8), %r13
    00000032: 	movl	%edx, %edi
    00000034: 	movl	%edx, %esi
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1348:
    00000040: 	movl	%eax, %r8d
    00000043: 	testb	%al, %al
    00000045: 	je	.Ltmp1344 # Offset: 69
    00000047: 	cmpw	$0x1, (%rcx)
    0000004b: 	sbbl	%eax, %eax
    0000004d: 	addl	$0x1, %eax
    00000050: 	cmpw	$0x0, (%rcx)
    00000054: 	cmovel	%r10d, %r8d
.Ltmp1344:
    00000058: 	movl	%edx, %r9d
    0000005b: 	testb	%dl, %dl
    0000005d: 	je	.Ltmp1345 # Offset: 93
    0000005f: 	cmpw	$0x1, 0x2(%rcx)
    00000064: 	sbbl	%edx, %edx
    00000066: 	addl	$0x1, %edx
    00000069: 	cmpw	$0x0, 0x2(%rcx)
    0000006e: 	cmovel	%r10d, %r9d
.Ltmp1345:
    00000072: 	movl	%esi, %r12d
    00000075: 	testb	%sil, %sil
    00000078: 	je	.Ltmp1346 # Offset: 120
    0000007a: 	cmpw	$0x1, 0x4(%rcx)
    0000007f: 	sbbl	%esi, %esi
    00000081: 	addl	$0x1, %esi
    00000084: 	cmpw	$0x0, 0x4(%rcx)
    00000089: 	cmovel	%r10d, %r12d
.Ltmp1346:
    0000008d: 	movl	%edi, %r11d
    00000090: 	testb	%dil, %dil
    00000093: 	je	.Ltmp1347 # Offset: 147
    00000095: 	cmpw	$0x1, 0x6(%rcx)
    0000009a: 	sbbl	%edi, %edi
    0000009c: 	addl	$0x1, %edi
    0000009f: 	cmpw	$0x0, 0x6(%rcx)
    000000a4: 	cmovel	%r10d, %r11d
.Ltmp1347:
    000000a8: 	addq	$0x8, %rcx
    000000ac: 	cmpq	%rcx, %r13
    000000af: 	jne	.Ltmp1348 # Offset: 175
    000000b1: 	leal	0x4(,%r14,4), %ecx
.Ltmp1353:
    000000b9: 	cmpl	%ecx, %ebp
    000000bb: 	jle	.Ltmp1349 # Offset: 187
    000000bd: 	subl	$0x1, %ebp
    000000c0: 	movslq	%ecx, %rsi
    000000c3: 	subl	%ecx, %ebp
    000000c5: 	leaq	(%rbx,%rsi,2), %rdx
    000000c9: 	addq	%rsi, %rbp
    000000cc: 	xorl	%esi, %esi
    000000ce: 	leaq	0x2(%rbx,%rbp,2), %rcx
    000000d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1351:
    000000d8: 	movl	%eax, %r8d
    000000db: 	testb	%al, %al
    000000dd: 	je	.Ltmp1350 # Offset: 221
    000000df: 	cmpw	$0x1, (%rdx)
    000000e3: 	sbbl	%eax, %eax
    000000e5: 	addl	$0x1, %eax
    000000e8: 	cmpw	$0x0, (%rdx)
    000000ec: 	cmovel	%esi, %r8d
.Ltmp1350:
    000000f0: 	addq	$0x2, %rdx
    000000f4: 	cmpq	%rdx, %rcx
    000000f7: 	jne	.Ltmp1351 # Offset: 247
.Ltmp1349:
    000000f9: 	testb	%r8b, %r8b
    000000fc: 	je	.Ltmp1352 # Offset: 252
    000000fe: 	xorl	%r8d, %r8d
    00000101: 	testb	%r9b, %r9b
    00000104: 	je	.Ltmp1352 # Offset: 260
    00000106: 	testb	%r12b, %r12b
    00000109: 	cmovnel	%r11d, %r8d
.Ltmp1352:
    0000010d: 	popq	%rbx
    0000010e: 	movl	%r8d, %eax
    00000111: 	popq	%rbp
    00000112: 	popq	%r12
    00000114: 	popq	%r13
    00000116: 	popq	%r14
    00000118: 	retq # Offset: 280
    00000119: 	nopl	(%rax) # Size: 7
.Ltmp1343:
    00000120: 	movl	%edx, %r9d
    00000123: 	movl	%edx, %r11d
    00000126: 	movl	%edx, %r12d
    00000129: 	movl	%edx, %r8d
    0000012c: 	xorl	%ecx, %ecx
    0000012e: 	jmp	.Ltmp1353 # Offset: 302
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and7IsEbPKT_ib"

Binary Function "_Z10logic_and8IsEbPKT_ib" after disassembly {
  Number      : 196
  State       : disassembled
  Address     : 0x14290
  Size        : 0x229
  MaxSize     : 0x230
  Offset      : 0x14290
  Section     : .text
  Orc Section : .local.text._Z10logic_and8IsEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0195:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %eax
    00000008: 	movl	%edx, %ecx
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbp
    00000011: 	pushq	%rbx
    00000012: 	movq	%rdi, -0x10(%rsp)
    00000017: 	movl	%esi, -0x8(%rsp)
    0000001b: 	cmpl	$0x7, %esi
    0000001e: 	jle	.Ltmp1354 # Offset: 30
    00000024: 	leal	-0x8(%rsi), %esi
    00000027: 	movq	%rdi, %rdx
    0000002a: 	movl	%eax, %r12d
    0000002d: 	movl	%eax, %ebp
    0000002f: 	shrl	$0x3, %esi
    00000032: 	movl	%eax, %r10d
    00000035: 	movl	%eax, %r9d
    00000038: 	movl	%esi, -0x4(%rsp)
    0000003c: 	shlq	$0x4, %rsi
    00000040: 	leaq	0x10(%rdi,%rsi), %rbx
    00000045: 	xorl	%edi, %edi
    00000047: 	movl	%eax, %esi
    00000049: 	movq	%rbx, -0x18(%rsp)
    0000004e: 	movl	%eax, %ebx
.Ltmp1363:
    00000050: 	movl	%ecx, %r14d
    00000053: 	testb	%cl, %cl
    00000055: 	je	.Ltmp1355 # Offset: 85
    00000057: 	cmpw	$0x1, (%rdx)
    0000005b: 	sbbl	%ecx, %ecx
    0000005d: 	addl	$0x1, %ecx
    00000060: 	cmpw	$0x0, (%rdx)
    00000064: 	cmovel	%edi, %r14d
.Ltmp1355:
    00000068: 	movl	%eax, %r11d
    0000006b: 	testb	%al, %al
    0000006d: 	je	.Ltmp1356 # Offset: 109
    0000006f: 	cmpw	$0x1, 0x2(%rdx)
    00000074: 	sbbl	%eax, %eax
    00000076: 	addl	$0x1, %eax
    00000079: 	cmpw	$0x0, 0x2(%rdx)
    0000007e: 	cmovel	%edi, %r11d
.Ltmp1356:
    00000082: 	movl	%r9d, %r15d
    00000085: 	testb	%r9b, %r9b
    00000088: 	je	.Ltmp1357 # Offset: 136
    0000008a: 	cmpw	$0x1, 0x4(%rdx)
    0000008f: 	sbbl	%r9d, %r9d
    00000092: 	addl	$0x1, %r9d
    00000096: 	cmpw	$0x0, 0x4(%rdx)
    0000009b: 	cmovel	%edi, %r15d
.Ltmp1357:
    0000009f: 	movb	%r10b, -0x1a(%rsp)
    000000a4: 	movl	%r10d, %r8d
    000000a7: 	testb	%r10b, %r10b
    000000aa: 	je	.Ltmp1358 # Offset: 170
    000000ac: 	cmpw	$0x1, 0x6(%rdx)
    000000b1: 	sbbl	%r10d, %r10d
    000000b4: 	addl	$0x1, %r10d
    000000b8: 	cmpw	$0x0, 0x6(%rdx)
    000000bd: 	cmovel	%edi, %r8d
    000000c1: 	movb	%r8b, -0x1a(%rsp)
.Ltmp1358:
    000000c6: 	movb	%sil, -0x1c(%rsp)
    000000cb: 	movl	%esi, %r8d
    000000ce: 	testb	%sil, %sil
    000000d1: 	je	.Ltmp1359 # Offset: 209
    000000d3: 	cmpw	$0x1, 0x8(%rdx)
    000000d8: 	sbbl	%esi, %esi
    000000da: 	addl	$0x1, %esi
    000000dd: 	cmpw	$0x0, 0x8(%rdx)
    000000e2: 	cmovel	%edi, %r8d
    000000e6: 	movb	%r8b, -0x1c(%rsp)
.Ltmp1359:
    000000eb: 	movl	%ebx, %r13d
    000000ee: 	testb	%bl, %bl
    000000f0: 	je	.Ltmp1360 # Offset: 240
    000000f2: 	cmpw	$0x1, 0xa(%rdx)
    000000f7: 	sbbl	%ebx, %ebx
    000000f9: 	addl	$0x1, %ebx
    000000fc: 	cmpw	$0x0, 0xa(%rdx)
    00000101: 	cmovel	%edi, %r13d
.Ltmp1360:
    00000105: 	movb	%bpl, -0x1b(%rsp)
    0000010a: 	movl	%ebp, %r8d
    0000010d: 	testb	%bpl, %bpl
    00000110: 	je	.Ltmp1361 # Offset: 272
    00000112: 	cmpw	$0x1, 0xc(%rdx)
    00000117: 	sbbl	%ebp, %ebp
    00000119: 	addl	$0x1, %ebp
    0000011c: 	cmpw	$0x0, 0xc(%rdx)
    00000121: 	cmovel	%edi, %r8d
    00000125: 	movb	%r8b, -0x1b(%rsp)
.Ltmp1361:
    0000012a: 	movb	%r12b, -0x19(%rsp)
    0000012f: 	movl	%r12d, %r8d
    00000132: 	testb	%r12b, %r12b
    00000135: 	je	.Ltmp1362 # Offset: 309
    00000137: 	cmpw	$0x1, 0xe(%rdx)
    0000013c: 	sbbl	%r12d, %r12d
    0000013f: 	addl	$0x1, %r12d
    00000143: 	cmpw	$0x0, 0xe(%rdx)
    00000148: 	cmovel	%edi, %r8d
    0000014c: 	movb	%r8b, -0x19(%rsp)
.Ltmp1362:
    00000151: 	addq	$0x10, %rdx
    00000155: 	cmpq	%rdx, -0x18(%rsp)
    0000015a: 	jne	.Ltmp1363 # Offset: 346
    00000160: 	movl	-0x4(%rsp), %eax
    00000164: 	movzbl	-0x1c(%rsp), %r8d
    0000016a: 	movl	%r14d, %esi
    0000016d: 	movl	%r11d, %r14d
    00000170: 	leal	0x8(,%rax,8), %edi
.Ltmp1370:
    00000177: 	movl	-0x8(%rsp), %ebx
    0000017b: 	cmpl	%ebx, %edi
    0000017d: 	jge	.Ltmp1364 # Offset: 381
    0000017f: 	subl	$0x1, %ebx
    00000182: 	movslq	%edi, %rsi
    00000185: 	movq	-0x10(%rsp), %r11
    0000018a: 	movl	%ebx, %edx
    0000018c: 	subl	%edi, %edx
    0000018e: 	leaq	(%r11,%rsi,2), %rax
    00000192: 	xorl	%edi, %edi
    00000194: 	addq	%rsi, %rdx
    00000197: 	leaq	0x2(%r11,%rdx,2), %rdx
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp1366:
    000001a0: 	movl	%ecx, %esi
    000001a2: 	testb	%cl, %cl
    000001a4: 	je	.Ltmp1365 # Offset: 420
    000001a6: 	cmpw	$0x1, (%rax)
    000001aa: 	sbbl	%ecx, %ecx
    000001ac: 	addl	$0x1, %ecx
    000001af: 	cmpw	$0x0, (%rax)
    000001b3: 	cmovel	%edi, %esi
.Ltmp1365:
    000001b6: 	addq	$0x2, %rax
    000001ba: 	cmpq	%rax, %rdx
    000001bd: 	jne	.Ltmp1366 # Offset: 445
.Ltmp1364:
    000001bf: 	testb	%sil, %sil
    000001c2: 	je	.Ltmp1367 # Offset: 450
    000001c4: 	xorl	%esi, %esi
    000001c6: 	testb	%r14b, %r14b
    000001c9: 	jne	.Ltmp1368 # Offset: 457
.Ltmp1367:
    000001cb: 	testb	%r8b, %r8b
    000001ce: 	je	.Ltmp1369 # Offset: 462
    000001d0: 	xorl	%r8d, %r8d
    000001d3: 	testb	%r13b, %r13b
    000001d6: 	je	.Ltmp1369 # Offset: 470
    000001d8: 	cmpb	$0x0, -0x1b(%rsp)
    000001dd: 	cmovnel	%esi, %r8d
.Ltmp1369:
    000001e1: 	popq	%rbx
    000001e2: 	movl	%r8d, %eax
    000001e5: 	popq	%rbp
    000001e6: 	popq	%r12
    000001e8: 	popq	%r13
    000001ea: 	popq	%r14
    000001ec: 	popq	%r15
    000001ee: 	retq # Offset: 494
    000001ef: 	nop # Size: 1
.Ltmp1368:
    000001f0: 	testb	%r15b, %r15b
    000001f3: 	je	.Ltmp1367 # Offset: 499
    000001f5: 	movzbl	-0x19(%rsp), %eax
    000001fa: 	cmpb	$0x0, -0x1a(%rsp)
    000001ff: 	cmovnel	%eax, %esi
    00000202: 	jmp	.Ltmp1367 # Offset: 514
    00000204: 	nopl	(%rax) # Size: 4
.Ltmp1354:
    00000208: 	movb	%dl, -0x19(%rsp)
    0000020c: 	movl	%edx, %esi
    0000020e: 	movl	%edx, %r13d
    00000211: 	movl	%edx, %r15d
    00000214: 	movb	%dl, -0x1b(%rsp)
    00000218: 	movl	%edx, %r14d
    0000021b: 	movl	%edx, %r8d
    0000021e: 	xorl	%edi, %edi
    00000220: 	movb	%dl, -0x1a(%rsp)
    00000224: 	jmp	.Ltmp1370 # Offset: 548
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and8IsEbPKT_ib"

Binary Function "_Z9logic_or1IsEbPKT_ib" after disassembly {
  Number      : 197
  State       : disassembled
  Address     : 0x144c0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x144c0
  Section     : .text
  Orc Section : .local.text._Z9logic_or1IsEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0196:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp1371 # Offset: 8
    0000000a: 	leal	-0x1(%rsi), %edx
    0000000d: 	leaq	0x2(%rdi,%rdx,2), %rcx
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1372:
    00000018: 	cmpw	$0x0, (%rdi)
    0000001c: 	setne	%dl
    0000001f: 	addq	$0x2, %rdi
    00000023: 	orl	%edx, %eax
    00000025: 	cmpq	%rdi, %rcx
    00000028: 	jne	.Ltmp1372 # Offset: 40
.Ltmp1371:
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or1IsEbPKT_ib"

Binary Function "_Z12logic_or_optIsEbPKT_ib" after disassembly {
  Number      : 198
  State       : disassembled
  Address     : 0x144f0
  Size        : 0x43
  MaxSize     : 0x50
  Offset      : 0x144f0
  Section     : .text
  Orc Section : .local.text._Z12logic_or_optIsEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0197:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp1373 # Offset: 6
    00000008: 	cmpb	$0x1, %dl
    0000000b: 	je	.Ltmp1373 # Offset: 11
    0000000d: 	movl	$0x1, %eax
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1374:
    00000018: 	movzwl	-0x2(%rdi,%rax,2), %edx
    0000001d: 	cmpl	%eax, %esi
    0000001f: 	setg	%r8b
    00000023: 	testw	%dx, %dx
    00000026: 	sete	%cl
    00000029: 	addq	$0x1, %rax
    0000002d: 	testb	%cl, %r8b
    00000030: 	jne	.Ltmp1374 # Offset: 48
    00000032: 	testw	%dx, %dx
    00000035: 	setne	%al
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp1373:
    00000040: 	movl	%edx, %eax
    00000042: 	retq # Offset: 66
DWARF CFI Instructions:
    <empty>
End of Function "_Z12logic_or_optIsEbPKT_ib"

Binary Function "_Z9logic_or2IsEbPKT_ib" after disassembly {
  Number      : 199
  State       : disassembled
  Address     : 0x14540
  Size        : 0x87
  MaxSize     : 0x90
  Offset      : 0x14540
  Section     : .text
  Orc Section : .local.text._Z9logic_or2IsEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0198:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movl	%edx, %r8d
    0000000a: 	leaq	(%rdi,%rsi,2), %rcx
    0000000e: 	cmpq	%rcx, %rdi
    00000011: 	jne	.Ltmp1375 # Offset: 17
    00000013: 	jmp	.Ltmp1376 # Offset: 19
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp1381:
    00000018: 	testb	%r8b, %r8b
    0000001b: 	jne	.Ltmp1377 # Offset: 27
.Ltmp1379:
    0000001d: 	cmpq	%rax, %rcx
    00000020: 	je	.Ltmp1378 # Offset: 32
    00000022: 	addq	$0x2, %rax
    00000026: 	cmpw	$0x0, -0x2(%rax)
    0000002b: 	je	.Ltmp1379 # Offset: 43
.Ltmp1384:
    0000002d: 	movq	%rax, %rdi
    00000030: 	movl	$0x1, %r8d
    00000036: 	cmpq	%rdi, %rcx
    00000039: 	je	.Ltmp1380 # Offset: 57
.Ltmp1375:
    0000003b: 	cmpw	$0x0, (%rdi)
    0000003f: 	leaq	0x2(%rdi), %rax
    00000043: 	je	.Ltmp1381 # Offset: 67
.Ltmp1383:
    00000045: 	cmpq	%rax, %rcx
    00000048: 	je	.Ltmp1380 # Offset: 72
    0000004a: 	leaq	0x2(%rax), %rdi
    0000004e: 	movl	$0x1, %r8d
    00000054: 	cmpq	%rdi, %rcx
    00000057: 	jne	.Ltmp1375 # Offset: 87
.Ltmp1380:
    00000059: 	movl	$0x1, %eax
    0000005e: 	retq # Offset: 94
    0000005f: 	nop # Size: 1
.Ltmp1377:
    00000060: 	cmpq	%rax, %rcx
    00000063: 	je	.Ltmp1382 # Offset: 99
    00000065: 	cmpw	$0x0, 0x2(%rdi)
    0000006a: 	leaq	0x4(%rdi), %rax
    0000006e: 	jne	.Ltmp1383 # Offset: 110
    00000070: 	jmp	.Ltmp1384 # Offset: 112
    00000072: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1378:
    00000078: 	xorl	%eax, %eax
    0000007a: 	retq # Offset: 122
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1376:
    00000080: 	movl	%edx, %eax
    00000082: 	retq # Offset: 130
.Ltmp1382:
    00000083: 	movl	%r8d, %eax
    00000086: 	retq # Offset: 134
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or2IsEbPKT_ib"

Binary Function "_Z9logic_or3IsEbPKT_ib" after disassembly {
  Number      : 200
  State       : disassembled
  Address     : 0x145d0
  Size        : 0x84
  MaxSize     : 0x90
  Offset      : 0x145d0
  Section     : .text
  Orc Section : .local.text._Z9logic_or3IsEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0199:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%edx, %eax
    00000009: 	movl	%esi, %edi
    0000000b: 	cmpl	$0x1, %esi
    0000000e: 	jle	.Ltmp1385 # Offset: 14
    00000010: 	leal	-0x2(%rsi), %r8d
    00000014: 	movq	%r9, %rcx
    00000017: 	shrl	%r8d
    0000001a: 	movl	%r8d, %edx
    0000001d: 	leaq	0x4(%r9,%rdx,4), %rsi
    00000022: 	jmp	.Ltmp1386 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1388:
    00000028: 	addq	$0x4, %rcx
    0000002c: 	cmpq	%rcx, %rsi
    0000002f: 	je	.Ltmp1387 # Offset: 47
.Ltmp1386:
    00000031: 	cmpw	$0x0, (%rcx)
    00000035: 	setne	%dl
    00000038: 	orb	%dl, %al
    0000003a: 	jne	.Ltmp1388 # Offset: 58
    0000003c: 	cmpw	$0x0, 0x2(%rcx)
    00000041: 	setne	%al
    00000044: 	addq	$0x4, %rcx
    00000048: 	cmpq	%rcx, %rsi
    0000004b: 	jne	.Ltmp1386 # Offset: 75
.Ltmp1387:
    0000004d: 	leal	0x2(%r8,%r8), %edx
.Ltmp1390:
    00000052: 	cmpl	%edx, %edi
    00000054: 	jle	.Ltmp1389 # Offset: 84
    00000056: 	movslq	%edx, %rcx
    00000059: 	cmpw	$0x0, (%r9,%rcx,2)
    0000005f: 	leaq	(%rcx,%rcx), %rsi
    00000063: 	setne	%cl
    00000066: 	addl	$0x1, %edx
    00000069: 	orl	%ecx, %eax
    0000006b: 	cmpl	%edx, %edi
    0000006d: 	jle	.Ltmp1389 # Offset: 109
    0000006f: 	cmpw	$0x0, 0x2(%r9,%rsi)
    00000076: 	setne	%dl
    00000079: 	orl	%edx, %eax
.Ltmp1389:
    0000007b: 	retq # Offset: 123
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp1385:
    00000080: 	xorl	%edx, %edx
    00000082: 	jmp	.Ltmp1390 # Offset: 130
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or3IsEbPKT_ib"

Binary Function "_Z9logic_or4IsEbPKT_ib" after disassembly {
  Number      : 201
  State       : disassembled
  Address     : 0x14660
  Size        : 0xc4
  MaxSize     : 0xd0
  Offset      : 0x14660
  Section     : .text
  Orc Section : .local.text._Z9logic_or4IsEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0200:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	cmpl	$0x3, %esi
    00000009: 	jle	.Ltmp1391 # Offset: 9
    0000000f: 	leal	-0x4(%rsi), %r8d
    00000013: 	movq	%rdi, %rcx
    00000016: 	shrl	$0x2, %r8d
    0000001a: 	movl	%r8d, %edx
    0000001d: 	leaq	0x8(%rdi,%rdx,8), %rdx
    00000022: 	jmp	.Ltmp1392 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1395:
    00000028: 	testb	%al, %al
    0000002a: 	jne	.Ltmp1393 # Offset: 42
    0000002c: 	cmpw	$0x0, 0x2(%rcx)
    00000031: 	movl	$0x1, %eax
    00000036: 	jne	.Ltmp1393 # Offset: 54
    00000038: 	cmpw	$0x0, 0x4(%rcx)
    0000003d: 	jne	.Ltmp1393 # Offset: 61
    0000003f: 	cmpw	$0x0, 0x6(%rcx)
    00000044: 	setne	%al
.Ltmp1393:
    00000047: 	addq	$0x8, %rcx
    0000004b: 	cmpq	%rcx, %rdx
    0000004e: 	je	.Ltmp1394 # Offset: 78
.Ltmp1392:
    00000050: 	cmpw	$0x0, (%rcx)
    00000054: 	je	.Ltmp1395 # Offset: 84
    00000056: 	addq	$0x8, %rcx
    0000005a: 	movl	$0x1, %eax
    0000005f: 	cmpq	%rcx, %rdx
    00000062: 	jne	.Ltmp1392 # Offset: 98
.Ltmp1394:
    00000064: 	leal	0x4(,%r8,4), %edx
.Ltmp1397:
    0000006c: 	cmpl	%edx, %esi
    0000006e: 	jle	.Ltmp1396 # Offset: 110
    00000070: 	movslq	%edx, %rcx
    00000073: 	cmpw	$0x0, (%rdi,%rcx,2)
    00000078: 	leaq	(%rcx,%rcx), %r8
    0000007c: 	setne	%cl
    0000007f: 	orl	%ecx, %eax
    00000081: 	leal	0x1(%rdx), %ecx
    00000084: 	cmpl	%ecx, %esi
    00000086: 	jle	.Ltmp1396 # Offset: 134
    00000088: 	cmpw	$0x0, 0x2(%rdi,%r8)
    0000008f: 	setne	%cl
    00000092: 	orl	%ecx, %eax
    00000094: 	leal	0x2(%rdx), %ecx
    00000097: 	cmpl	%esi, %ecx
    00000099: 	jge	.Ltmp1396 # Offset: 153
    0000009b: 	cmpw	$0x0, 0x4(%rdi,%r8)
    000000a2: 	setne	%cl
    000000a5: 	addl	$0x3, %edx
    000000a8: 	orl	%ecx, %eax
    000000aa: 	cmpl	%esi, %edx
    000000ac: 	jge	.Ltmp1396 # Offset: 172
    000000ae: 	cmpw	$0x0, 0x6(%rdi,%r8)
    000000b5: 	setne	%dl
    000000b8: 	orl	%edx, %eax
.Ltmp1396:
    000000ba: 	retq # Offset: 186
    000000bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1391:
    000000c0: 	xorl	%edx, %edx
    000000c2: 	jmp	.Ltmp1397 # Offset: 194
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or4IsEbPKT_ib"

Binary Function "_Z9logic_or5IsEbPKT_ib" after disassembly {
  Number      : 202
  State       : disassembled
  Address     : 0x14730
  Size        : 0x84
  MaxSize     : 0x90
  Offset      : 0x14730
  Section     : .text
  Orc Section : .local.text._Z9logic_or5IsEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0201:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%edx, %eax
    00000009: 	movl	%esi, %edi
    0000000b: 	cmpl	$0x1, %esi
    0000000e: 	jle	.Ltmp1398 # Offset: 14
    00000010: 	leal	-0x2(%rsi), %r10d
    00000014: 	movq	%r9, %rcx
    00000017: 	shrl	%r10d
    0000001a: 	movl	%r10d, %esi
    0000001d: 	leaq	0x4(%r9,%rsi,4), %r8
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1399:
    00000028: 	cmpw	$0x0, (%rcx)
    0000002c: 	setne	%sil
    00000030: 	orl	%esi, %eax
    00000032: 	cmpw	$0x0, 0x2(%rcx)
    00000037: 	setne	%sil
    0000003b: 	addq	$0x4, %rcx
    0000003f: 	orl	%esi, %edx
    00000041: 	cmpq	%rcx, %r8
    00000044: 	jne	.Ltmp1399 # Offset: 68
    00000046: 	leal	0x2(%r10,%r10), %esi
.Ltmp1402:
    0000004b: 	cmpl	%esi, %edi
    0000004d: 	jle	.Ltmp1400 # Offset: 77
    0000004f: 	subl	$0x1, %edi
    00000052: 	movslq	%esi, %r8
    00000055: 	subl	%esi, %edi
    00000057: 	leaq	(%r9,%r8,2), %rcx
    0000005b: 	addq	%r8, %rdi
    0000005e: 	leaq	0x2(%r9,%rdi,2), %rdi
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1401:
    00000068: 	cmpw	$0x0, (%rcx)
    0000006c: 	setne	%sil
    00000070: 	addq	$0x2, %rcx
    00000074: 	orl	%esi, %eax
    00000076: 	cmpq	%rcx, %rdi
    00000079: 	jne	.Ltmp1401 # Offset: 121
.Ltmp1400:
    0000007b: 	orl	%edx, %eax
    0000007d: 	retq # Offset: 125
    0000007e: 	nop # Size: 2
.Ltmp1398:
    00000080: 	xorl	%esi, %esi
    00000082: 	jmp	.Ltmp1402 # Offset: 130
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or5IsEbPKT_ib"

Binary Function "_Z9logic_or6IsEbPKT_ib" after disassembly {
  Number      : 203
  State       : disassembled
  Address     : 0x147c0
  Size        : 0xb9
  MaxSize     : 0xc0
  Offset      : 0x147c0
  Section     : .text
  Orc Section : .local.text._Z9logic_or6IsEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0202:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %r10
    00000008: 	movl	%esi, %r9d
    0000000b: 	movl	%edx, %eax
    0000000d: 	cmpl	$0x3, %esi
    00000010: 	jle	.Ltmp1403 # Offset: 16
    00000016: 	leal	-0x4(%rsi), %ebx
    00000019: 	movq	%rdi, %rcx
    0000001c: 	shrl	$0x2, %ebx
    0000001f: 	movl	%ebx, %esi
    00000021: 	leaq	0x8(%rdi,%rsi,8), %r11
    00000026: 	movl	%edx, %edi
    00000028: 	movl	%edx, %esi
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1404:
    00000030: 	cmpw	$0x0, (%rcx)
    00000034: 	setne	%r8b
    00000038: 	orl	%r8d, %eax
    0000003b: 	cmpw	$0x0, 0x2(%rcx)
    00000040: 	setne	%r8b
    00000044: 	orl	%r8d, %edx
    00000047: 	cmpw	$0x0, 0x4(%rcx)
    0000004c: 	setne	%r8b
    00000050: 	orl	%r8d, %esi
    00000053: 	cmpw	$0x0, 0x6(%rcx)
    00000058: 	setne	%r8b
    0000005c: 	addq	$0x8, %rcx
    00000060: 	orl	%r8d, %edi
    00000063: 	cmpq	%rcx, %r11
    00000066: 	jne	.Ltmp1404 # Offset: 102
    00000068: 	leal	0x4(,%rbx,4), %r8d
.Ltmp1407:
    00000070: 	cmpl	%r8d, %r9d
    00000073: 	jle	.Ltmp1405 # Offset: 115
    00000075: 	subl	$0x1, %r9d
    00000079: 	movslq	%r8d, %r11
    0000007c: 	subl	%r8d, %r9d
    0000007f: 	leaq	(%r10,%r11,2), %rcx
    00000083: 	addq	%r11, %r9
    00000086: 	leaq	0x2(%r10,%r9,2), %r9
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1406:
    00000090: 	cmpw	$0x0, (%rcx)
    00000094: 	setne	%r8b
    00000098: 	addq	$0x2, %rcx
    0000009c: 	orl	%r8d, %eax
    0000009f: 	cmpq	%rcx, %r9
    000000a2: 	jne	.Ltmp1406 # Offset: 162
.Ltmp1405:
    000000a4: 	orl	%edi, %esi
    000000a6: 	orb	%dl, %al
    000000a8: 	popq	%rbx
    000000a9: 	cmovel	%esi, %eax
    000000ac: 	retq # Offset: 172
    000000ad: 	nopl	(%rax) # Size: 3
.Ltmp1403:
    000000b0: 	movl	%edx, %edi
    000000b2: 	movl	%edx, %esi
    000000b4: 	xorl	%r8d, %r8d
    000000b7: 	jmp	.Ltmp1407 # Offset: 183
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or6IsEbPKT_ib"

Binary Function "_Z9logic_or7IsEbPKT_ib" after disassembly {
  Number      : 204
  State       : disassembled
  Address     : 0x14880
  Size        : 0x101
  MaxSize     : 0x110
  Offset      : 0x14880
  Section     : .text
  Orc Section : .local.text._Z9logic_or7IsEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0203:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movq	%rdi, %r11
    00000009: 	movl	%esi, %r10d
    0000000c: 	movl	%edx, %ecx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	cmpl	$0x3, %esi
    00000017: 	jle	.Ltmp1408 # Offset: 23
    0000001d: 	leal	-0x4(%rsi), %r14d
    00000021: 	movq	%rdi, %rax
    00000024: 	movl	%edx, %r8d
    00000027: 	shrl	$0x2, %r14d
    0000002b: 	movl	%r14d, %esi
    0000002e: 	leaq	0x8(%rdi,%rsi,8), %r13
    00000033: 	movl	%edx, %edi
    00000035: 	movl	$0x1, %esi
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1409:
    00000040: 	cmpw	$0x0, (%rax)
    00000044: 	cmovnel	%esi, %ecx
    00000047: 	cmpw	$0x0, 0x2(%rax)
    0000004c: 	cmovnel	%esi, %edx
    0000004f: 	cmpw	$0x0, 0x4(%rax)
    00000054: 	cmovnel	%esi, %edi
    00000057: 	cmpw	$0x0, 0x6(%rax)
    0000005c: 	movl	%ecx, %r9d
    0000005f: 	cmovnel	%esi, %r8d
    00000063: 	addq	$0x8, %rax
    00000067: 	movl	%edx, %ebx
    00000069: 	movl	%edi, %r12d
    0000006c: 	movl	%r8d, %ebp
    0000006f: 	cmpq	%r13, %rax
    00000072: 	jne	.Ltmp1409 # Offset: 114
    00000074: 	leal	0x4(,%r14,4), %edx
.Ltmp1414:
    0000007c: 	cmpl	%edx, %r10d
    0000007f: 	jle	.Ltmp1410 # Offset: 127
    00000081: 	subl	$0x1, %r10d
    00000085: 	movslq	%edx, %rsi
    00000088: 	subl	%edx, %r10d
    0000008b: 	leaq	(%r11,%rsi,2), %rax
    0000008f: 	movl	$0x1, %edx
    00000094: 	addq	%rsi, %r10
    00000097: 	leaq	0x2(%r11,%r10,2), %rsi
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp1411:
    000000a0: 	cmpw	$0x0, (%rax)
    000000a4: 	cmovnel	%edx, %ecx
    000000a7: 	addq	$0x2, %rax
    000000ab: 	movl	%ecx, %r9d
    000000ae: 	cmpq	%rax, %rsi
    000000b1: 	jne	.Ltmp1411 # Offset: 177
.Ltmp1410:
    000000b3: 	testb	%r9b, %r9b
    000000b6: 	jne	.Ltmp1412 # Offset: 182
    000000b8: 	movl	%ebx, %r9d
    000000bb: 	testb	%bl, %bl
    000000bd: 	je	.Ltmp1413 # Offset: 189
.Ltmp1412:
    000000bf: 	popq	%rbx
    000000c0: 	movl	%r9d, %eax
    000000c3: 	popq	%rbp
    000000c4: 	popq	%r12
    000000c6: 	popq	%r13
    000000c8: 	popq	%r14
    000000ca: 	retq # Offset: 202
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1413:
    000000d0: 	testb	%r12b, %r12b
    000000d3: 	movl	%ebp, %r9d
    000000d6: 	popq	%rbx
    000000d7: 	popq	%rbp
    000000d8: 	cmovnel	%r12d, %r9d
    000000dc: 	popq	%r12
    000000de: 	popq	%r13
    000000e0: 	popq	%r14
    000000e2: 	movl	%r9d, %eax
    000000e5: 	retq # Offset: 229
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1408:
    000000f0: 	movl	%edx, %ebx
    000000f2: 	movl	%edx, %r9d
    000000f5: 	movl	%edx, %ebp
    000000f7: 	movl	%edx, %r12d
    000000fa: 	xorl	%edx, %edx
    000000fc: 	jmp	.Ltmp1414 # Offset: 252
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or7IsEbPKT_ib"

Binary Function "_Z9logic_or8IsEbPKT_ib" after disassembly {
  Number      : 205
  State       : disassembled
  Address     : 0x14990
  Size        : 0x1a2
  MaxSize     : 0x1b0
  Offset      : 0x14990
  Section     : .text
  Orc Section : .local.text._Z9logic_or8IsEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0204:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %eax
    00000008: 	pushq	%r14
    0000000a: 	pushq	%r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	movl	%esi, %ebx
    00000012: 	movl	%esi, -0x8(%rsp)
    00000016: 	movl	%edx, %esi
    00000018: 	movq	%rdi, -0x10(%rsp)
    0000001d: 	cmpl	$0x7, %ebx
    00000020: 	jle	.Ltmp1415 # Offset: 32
    00000026: 	leal	-0x8(%rbx), %ecx
    00000029: 	movq	%rdi, %rdx
    0000002c: 	movl	%eax, %ebp
    0000002e: 	movl	%eax, %ebx
    00000030: 	shrl	$0x3, %ecx
    00000033: 	movl	%eax, %r11d
    00000036: 	movl	%eax, %r10d
    00000039: 	movl	%eax, %r9d
    0000003c: 	movl	%ecx, -0x4(%rsp)
    00000040: 	shlq	$0x4, %rcx
    00000044: 	leaq	0x10(%rdi,%rcx), %rdi
    00000049: 	movl	$0x1, %ecx
    0000004e: 	movq	%rdi, -0x20(%rsp)
    00000053: 	movl	%eax, %edi
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp1416:
    00000058: 	cmpw	$0x0, (%rdx)
    0000005c: 	cmovnel	%ecx, %esi
    0000005f: 	cmpw	$0x0, 0x2(%rdx)
    00000064: 	cmovnel	%ecx, %eax
    00000067: 	cmpw	$0x0, 0x4(%rdx)
    0000006c: 	cmovnel	%ecx, %edi
    0000006f: 	cmpw	$0x0, 0x6(%rdx)
    00000074: 	cmovnel	%ecx, %r9d
    00000078: 	cmpw	$0x0, 0x8(%rdx)
    0000007d: 	movl	%eax, %r12d
    00000080: 	cmovnel	%ecx, %r10d
    00000084: 	cmpw	$0x0, 0xa(%rdx)
    00000089: 	movl	%edi, %r15d
    0000008c: 	cmovnel	%ecx, %r11d
    00000090: 	cmpw	$0x0, 0xc(%rdx)
    00000095: 	movb	%r9b, -0x13(%rsp)
    0000009a: 	cmovnel	%ecx, %ebx
    0000009d: 	cmpw	$0x0, 0xe(%rdx)
    000000a2: 	movl	%r10d, %r8d
    000000a5: 	cmovnel	%ecx, %ebp
    000000a8: 	movl	%r11d, %r13d
    000000ab: 	addq	$0x10, %rdx
    000000af: 	movb	%bl, -0x12(%rsp)
    000000b3: 	movb	%bpl, -0x11(%rsp)
    000000b8: 	cmpq	%rdx, -0x20(%rsp)
    000000bd: 	jne	.Ltmp1416 # Offset: 189
    000000bf: 	movl	-0x4(%rsp), %eax
    000000c3: 	movl	%r12d, %r14d
    000000c6: 	movl	%esi, %r12d
    000000c9: 	leal	0x8(,%rax,8), %ecx
.Ltmp1423:
    000000d0: 	movl	-0x8(%rsp), %ebx
    000000d4: 	cmpl	%ecx, %ebx
    000000d6: 	jle	.Ltmp1417 # Offset: 214
    000000d8: 	subl	$0x1, %ebx
    000000db: 	movslq	%ecx, %rdi
    000000de: 	movq	-0x10(%rsp), %r9
    000000e3: 	movl	%ebx, %edx
    000000e5: 	subl	%ecx, %edx
    000000e7: 	leaq	(%r9,%rdi,2), %rax
    000000eb: 	addq	%rdi, %rdx
    000000ee: 	leaq	0x2(%r9,%rdx,2), %rcx
    000000f3: 	movl	$0x1, %edx
    000000f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1418:
    00000100: 	cmpw	$0x0, (%rax)
    00000104: 	cmovnel	%edx, %esi
    00000107: 	addq	$0x2, %rax
    0000010b: 	movl	%esi, %r12d
    0000010e: 	cmpq	%rcx, %rax
    00000111: 	jne	.Ltmp1418 # Offset: 273
.Ltmp1417:
    00000113: 	testb	%r12b, %r12b
    00000116: 	jne	.Ltmp1419 # Offset: 278
    00000118: 	movl	%r14d, %r12d
    0000011b: 	testb	%r14b, %r14b
    0000011e: 	je	.Ltmp1420 # Offset: 286
.Ltmp1419:
    00000120: 	testb	%r8b, %r8b
    00000123: 	jne	.Ltmp1421 # Offset: 291
    00000125: 	movl	%r13d, %r8d
    00000128: 	testb	%r13b, %r13b
    0000012b: 	je	.Ltmp1422 # Offset: 299
.Ltmp1421:
    0000012d: 	popq	%rbx
    0000012e: 	movl	%r8d, %eax
    00000131: 	popq	%rbp
    00000132: 	popq	%r12
    00000134: 	popq	%r13
    00000136: 	popq	%r14
    00000138: 	popq	%r15
    0000013a: 	retq # Offset: 314
    0000013b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1422:
    00000140: 	movzbl	-0x12(%rsp), %eax
    00000145: 	orb	-0x11(%rsp), %r12b
    0000014a: 	popq	%rbx
    0000014b: 	popq	%rbp
    0000014c: 	testb	%al, %al
    0000014e: 	movl	%eax, %r8d
    00000151: 	cmovel	%r12d, %r8d
    00000155: 	popq	%r12
    00000157: 	popq	%r13
    00000159: 	popq	%r14
    0000015b: 	popq	%r15
    0000015d: 	movl	%r8d, %eax
    00000160: 	retq # Offset: 352
    00000161: 	nopl	(%rax) # Size: 7
.Ltmp1420:
    00000168: 	movzbl	-0x13(%rsp), %r12d
    0000016e: 	testb	%r15b, %r15b
    00000171: 	cmovnel	%r15d, %r12d
    00000175: 	jmp	.Ltmp1419 # Offset: 373
    00000177: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1415:
    00000180: 	movb	%dl, -0x11(%rsp)
    00000184: 	movl	%edx, %r12d
    00000187: 	movl	%edx, %r13d
    0000018a: 	movl	%edx, %r15d
    0000018d: 	movb	%dl, -0x12(%rsp)
    00000191: 	movl	%edx, %r14d
    00000194: 	movl	%edx, %r8d
    00000197: 	xorl	%ecx, %ecx
    00000199: 	movb	%dl, -0x13(%rsp)
    0000019d: 	jmp	.Ltmp1423 # Offset: 413
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or8IsEbPKT_ib"

Binary Function "_Z8bit_and1IjET_PKS0_iS0_" after disassembly {
  Number      : 206
  State       : disassembled
  Address     : 0x14b40
  Size        : 0xa7
  MaxSize     : 0xb0
  Offset      : 0x14b40
  Section     : .text
  Orc Section : .local.text._Z8bit_and1IjET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0205:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp1424 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0x2, %eax
    00000014: 	jbe	.Ltmp1425 # Offset: 20
    0000001a: 	shrl	$0x2, %esi
    0000001d: 	movq	%rdi, %rax
    00000020: 	pcmpeqd	%xmm0, %xmm0
    00000024: 	subl	$0x1, %esi
    00000027: 	shlq	$0x4, %rsi
    0000002b: 	leaq	0x10(%rdi,%rsi), %rsi
.Ltmp1426:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	addq	$0x10, %rax
    00000038: 	pand	%xmm2, %xmm0
    0000003c: 	cmpq	%rsi, %rax
    0000003f: 	jne	.Ltmp1426 # Offset: 63
    00000041: 	movdqa	%xmm0, %xmm1
    00000045: 	psrldq	$0x8, %xmm1
    0000004a: 	pand	%xmm1, %xmm0
    0000004e: 	movdqa	%xmm0, %xmm1
    00000052: 	psrldq	$0x4, %xmm1
    00000057: 	pand	%xmm1, %xmm0
    0000005b: 	movd	%xmm0, %eax
    0000005f: 	andl	%edx, %eax
    00000061: 	movl	%ecx, %edx
    00000063: 	andl	$-0x4, %edx
    00000066: 	testb	$0x3, %cl
    00000069: 	je	.Ltmp1427 # Offset: 105
.Ltmp1429:
    0000006b: 	movslq	%edx, %rsi
    0000006e: 	leaq	(,%rsi,4), %r8
    00000076: 	andl	(%rdi,%rsi,4), %eax
    00000079: 	leal	0x1(%rdx), %esi
    0000007c: 	cmpl	%esi, %ecx
    0000007e: 	jle	.Ltmp1428 # Offset: 126
    00000080: 	addl	$0x2, %edx
    00000083: 	andl	0x4(%rdi,%r8), %eax
    00000088: 	cmpl	%edx, %ecx
    0000008a: 	jle	.Ltmp1428 # Offset: 138
    0000008c: 	andl	0x8(%rdi,%r8), %eax
    00000091: 	retq # Offset: 145
    00000092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1424:
    00000098: 	movl	%edx, %eax
.Ltmp1428:
    0000009a: 	retq # Offset: 154
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1427:
    000000a0: 	retq # Offset: 160
.Ltmp1425:
    000000a1: 	movl	%edx, %eax
    000000a3: 	xorl	%edx, %edx
    000000a5: 	jmp	.Ltmp1429 # Offset: 165
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and1IjET_PKS0_iS0_"

Binary Function "_Z8bit_and2IjET_PKS0_iS0_" after disassembly {
  Number      : 207
  State       : disassembled
  Address     : 0x14bf0
  Size        : 0xb5
  MaxSize     : 0xc0
  Offset      : 0x14bf0
  Section     : .text
  Orc Section : .local.text._Z8bit_and2IjET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0206:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movq	%rdi, %rcx
    0000000a: 	shlq	$0x2, %rsi
    0000000e: 	leaq	(%rdi,%rsi), %r8
    00000012: 	cmpq	%r8, %rdi
    00000015: 	je	.Ltmp1430 # Offset: 21
    0000001b: 	subq	$0x4, %rsi
    0000001f: 	movq	%rdi, %rax
    00000022: 	movq	%rsi, %rdi
    00000025: 	shrq	$0x2, %rdi
    00000029: 	addq	$0x1, %rdi
    0000002d: 	cmpq	$0x8, %rsi
    00000031: 	jbe	.Ltmp1431 # Offset: 49
    00000033: 	movq	%rdi, %rsi
    00000036: 	pcmpeqd	%xmm0, %xmm0
    0000003a: 	shrq	$0x2, %rsi
    0000003e: 	shlq	$0x4, %rsi
    00000042: 	addq	%rcx, %rsi
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp1432:
    00000048: 	movdqu	(%rax), %xmm2
    0000004c: 	addq	$0x10, %rax
    00000050: 	pand	%xmm2, %xmm0
    00000054: 	cmpq	%rax, %rsi
    00000057: 	jne	.Ltmp1432 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	psrldq	$0x8, %xmm1
    00000062: 	pand	%xmm1, %xmm0
    00000066: 	movdqa	%xmm0, %xmm1
    0000006a: 	psrldq	$0x4, %xmm1
    0000006f: 	pand	%xmm1, %xmm0
    00000073: 	movd	%xmm0, %eax
    00000077: 	andl	%edx, %eax
    00000079: 	movq	%rdi, %rdx
    0000007c: 	andq	$-0x4, %rdx
    00000080: 	leaq	(%rcx,%rdx,4), %rcx
    00000084: 	cmpq	%rdx, %rdi
    00000087: 	je	.Ltmp1433 # Offset: 135
.Ltmp1435:
    00000089: 	leaq	0x4(%rcx), %rdx
    0000008d: 	andl	(%rcx), %eax
    0000008f: 	cmpq	%rdx, %r8
    00000092: 	je	.Ltmp1434 # Offset: 146
    00000094: 	leaq	0x8(%rcx), %rdx
    00000098: 	andl	0x4(%rcx), %eax
    0000009b: 	cmpq	%rdx, %r8
    0000009e: 	je	.Ltmp1434 # Offset: 158
    000000a0: 	andl	0x8(%rcx), %eax
    000000a3: 	retq # Offset: 163
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp1430:
    000000a8: 	movl	%edx, %eax
.Ltmp1434:
    000000aa: 	retq # Offset: 170
    000000ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1433:
    000000b0: 	retq # Offset: 176
.Ltmp1431:
    000000b1: 	movl	%edx, %eax
    000000b3: 	jmp	.Ltmp1435 # Offset: 179
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and2IjET_PKS0_iS0_"

Binary Function "_Z8bit_and3IjET_PKS0_iS0_" after disassembly {
  Number      : 208
  State       : disassembled
  Address     : 0x14cb0
  Size        : 0xf4
  MaxSize     : 0x100
  Offset      : 0x14cb0
  Section     : .text
  Orc Section : .local.text._Z8bit_and3IjET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0207:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %r9d
    00000008: 	testl	%r9d, %r9d
    0000000b: 	jle	.Ltmp1436 # Offset: 11
    00000011: 	leal	-0x2(%rsi), %eax
    00000014: 	movl	%eax, %ecx
    00000016: 	shrl	%ecx
    00000018: 	addl	$0x1, %ecx
    0000001b: 	cmpl	$0x5, %eax
    0000001e: 	jbe	.Ltmp1437 # Offset: 30
    00000024: 	movl	%ecx, %r8d
    00000027: 	movq	%rdi, %rax
    0000002a: 	pcmpeqd	%xmm2, %xmm2
    0000002e: 	shrl	$0x2, %r8d
    00000032: 	subl	$0x1, %r8d
    00000036: 	shlq	$0x5, %r8
    0000003a: 	leaq	0x20(%rdi,%r8), %r8
    0000003f: 	nop # Size: 1
.Ltmp1438:
    00000040: 	movdqu	(%rax), %xmm0
    00000044: 	movdqu	0x10(%rax), %xmm3
    00000049: 	addq	$0x20, %rax
    0000004d: 	movdqa	%xmm0, %xmm1
    00000051: 	shufps	$0xdd, %xmm3, %xmm0
    00000055: 	shufps	$0x88, %xmm3, %xmm1
    00000059: 	pand	%xmm1, %xmm0
    0000005d: 	pand	%xmm0, %xmm2
    00000061: 	cmpq	%rax, %r8
    00000064: 	jne	.Ltmp1438 # Offset: 100
    00000066: 	movdqa	%xmm2, %xmm0
    0000006a: 	movl	%ecx, %r8d
    0000006d: 	psrldq	$0x8, %xmm0
    00000072: 	andl	$-0x4, %r8d
    00000076: 	pand	%xmm0, %xmm2
    0000007a: 	movdqa	%xmm2, %xmm0
    0000007e: 	psrldq	$0x4, %xmm0
    00000083: 	pand	%xmm0, %xmm2
    00000087: 	movd	%xmm2, %eax
    0000008b: 	andl	%edx, %eax
    0000008d: 	leal	(%r8,%r8), %edx
    00000091: 	cmpl	%r8d, %ecx
    00000094: 	je	.Ltmp1439 # Offset: 148
.Ltmp1442:
    00000096: 	movslq	%edx, %r10
    00000099: 	andl	(%rdi,%r10,4), %eax
    0000009d: 	leaq	(,%r10,4), %r8
    000000a5: 	andl	0x4(%rdi,%r10,4), %eax
    000000aa: 	leal	0x2(%rdx), %r10d
    000000ae: 	cmpl	%r9d, %r10d
    000000b1: 	jge	.Ltmp1439 # Offset: 177
    000000b3: 	movl	0x8(%rdi,%r8), %r10d
    000000b8: 	addl	$0x4, %edx
    000000bb: 	andl	0xc(%rdi,%r8), %r10d
    000000c0: 	andl	%r10d, %eax
    000000c3: 	cmpl	%edx, %r9d
    000000c6: 	jle	.Ltmp1439 # Offset: 198
    000000c8: 	movl	0x14(%rdi,%r8), %edx
    000000cd: 	andl	0x10(%rdi,%r8), %edx
    000000d2: 	andl	%edx, %eax
.Ltmp1439:
    000000d4: 	addl	%ecx, %ecx
.Ltmp1441:
    000000d6: 	cmpl	%esi, %ecx
    000000d8: 	jge	.Ltmp1440 # Offset: 216
    000000da: 	movslq	%ecx, %rcx
    000000dd: 	andl	(%rdi,%rcx,4), %eax
.Ltmp1440:
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp1436:
    000000e8: 	movl	%edx, %eax
    000000ea: 	xorl	%ecx, %ecx
    000000ec: 	jmp	.Ltmp1441 # Offset: 236
.Ltmp1437:
    000000ee: 	movl	%edx, %eax
    000000f0: 	xorl	%edx, %edx
    000000f2: 	jmp	.Ltmp1442 # Offset: 242
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and3IjET_PKS0_iS0_"

Binary Function "_Z8bit_and4IjET_PKS0_iS0_" after disassembly {
  Number      : 209
  State       : disassembled
  Address     : 0x14db0
  Size        : 0x188
  MaxSize     : 0x190
  Offset      : 0x14db0
  Section     : .text
  Orc Section : .local.text._Z8bit_and4IjET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0208:
    00000000: 	endbr64
    00000004: 	leal	-0x3(%rsi), %r9d
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%esi, %edi
    0000000d: 	testl	%r9d, %r9d
    00000010: 	jle	.Ltmp1443 # Offset: 16
    00000016: 	leal	-0x4(%rsi), %eax
    00000019: 	movl	%eax, %esi
    0000001b: 	shrl	$0x2, %esi
    0000001e: 	addl	$0x1, %esi
    00000021: 	cmpl	$0xb, %eax
    00000024: 	jbe	.Ltmp1444 # Offset: 36
    0000002a: 	movl	%esi, %r8d
    0000002d: 	movq	%rcx, %rax
    00000030: 	pcmpeqd	%xmm4, %xmm4
    00000034: 	shrl	$0x2, %r8d
    00000038: 	subl	$0x1, %r8d
    0000003c: 	shlq	$0x6, %r8
    00000040: 	leaq	0x40(%rcx,%r8), %r8
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp1445:
    00000048: 	movdqu	(%rax), %xmm0
    0000004c: 	movdqu	0x10(%rax), %xmm6
    00000051: 	addq	$0x40, %rax
    00000055: 	movdqu	-0x20(%rax), %xmm2
    0000005a: 	movdqa	%xmm0, %xmm3
    0000005e: 	shufps	$0xdd, %xmm6, %xmm0
    00000062: 	movdqa	%xmm0, %xmm1
    00000066: 	shufps	$0x88, %xmm6, %xmm3
    0000006a: 	movdqu	-0x10(%rax), %xmm6
    0000006f: 	movdqa	%xmm2, %xmm5
    00000073: 	shufps	$0xdd, %xmm6, %xmm2
    00000077: 	shufps	$0x88, %xmm2, %xmm1
    0000007b: 	shufps	$0xdd, %xmm2, %xmm0
    0000007f: 	pand	%xmm1, %xmm0
    00000083: 	movdqa	%xmm3, %xmm1
    00000087: 	shufps	$0x88, %xmm6, %xmm5
    0000008b: 	shufps	$0xdd, %xmm5, %xmm3
    0000008f: 	shufps	$0x88, %xmm5, %xmm1
    00000093: 	pand	%xmm3, %xmm1
    00000097: 	pand	%xmm1, %xmm0
    0000009b: 	pand	%xmm0, %xmm4
    0000009f: 	cmpq	%rax, %r8
    000000a2: 	jne	.Ltmp1445 # Offset: 162
    000000a4: 	movdqa	%xmm4, %xmm0
    000000a8: 	psrldq	$0x8, %xmm0
    000000ad: 	pand	%xmm0, %xmm4
    000000b1: 	movdqa	%xmm4, %xmm0
    000000b5: 	psrldq	$0x4, %xmm0
    000000ba: 	pand	%xmm0, %xmm4
    000000be: 	movd	%xmm4, %eax
    000000c2: 	andl	%edx, %eax
    000000c4: 	movl	%esi, %edx
    000000c6: 	andl	$-0x4, %edx
    000000c9: 	leal	(,%rdx,4), %r10d
    000000d1: 	cmpl	%esi, %edx
    000000d3: 	je	.Ltmp1446 # Offset: 211
.Ltmp1449:
    000000d5: 	movslq	%r10d, %r8
    000000d8: 	andl	(%rcx,%r8,4), %eax
    000000dc: 	leaq	(,%r8,4), %rdx
    000000e4: 	andl	0x4(%rcx,%r8,4), %eax
    000000e9: 	andl	0x8(%rcx,%r8,4), %eax
    000000ee: 	andl	0xc(%rcx,%r8,4), %eax
    000000f3: 	leal	0x4(%r10), %r8d
    000000f7: 	cmpl	%r8d, %r9d
    000000fa: 	jle	.Ltmp1446 # Offset: 250
    000000fc: 	movl	0x14(%rcx,%rdx), %r8d
    00000101: 	addl	$0x8, %r10d
    00000105: 	andl	0x18(%rcx,%rdx), %r8d
    0000010a: 	andl	0x10(%rcx,%rdx), %r8d
    0000010f: 	andl	0x1c(%rcx,%rdx), %r8d
    00000114: 	andl	%r8d, %eax
    00000117: 	cmpl	%r10d, %r9d
    0000011a: 	jle	.Ltmp1446 # Offset: 282
    0000011c: 	movl	0x28(%rcx,%rdx), %r8d
    00000121: 	andl	0x24(%rcx,%rdx), %r8d
    00000126: 	andl	0x20(%rcx,%rdx), %r8d
    0000012b: 	andl	0x2c(%rcx,%rdx), %r8d
    00000130: 	andl	%r8d, %eax
.Ltmp1446:
    00000133: 	leal	(,%rsi,4), %edx
.Ltmp1448:
    0000013a: 	cmpl	%edx, %edi
    0000013c: 	jle	.Ltmp1447 # Offset: 316
    0000013e: 	movslq	%edx, %rsi
    00000141: 	leaq	(,%rsi,4), %r8
    00000149: 	andl	(%rcx,%rsi,4), %eax
    0000014c: 	leal	0x1(%rdx), %esi
    0000014f: 	cmpl	%edi, %esi
    00000151: 	jge	.Ltmp1447 # Offset: 337
    00000153: 	leal	0x2(%rdx), %esi
    00000156: 	andl	0x4(%rcx,%r8), %eax
    0000015b: 	cmpl	%esi, %edi
    0000015d: 	jle	.Ltmp1447 # Offset: 349
    0000015f: 	addl	$0x3, %edx
    00000162: 	andl	0x8(%rcx,%r8), %eax
    00000167: 	cmpl	%edx, %edi
    00000169: 	jle	.Ltmp1447 # Offset: 361
    0000016b: 	andl	0xc(%rcx,%r8), %eax
.Ltmp1447:
    00000170: 	retq # Offset: 368
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp1443:
    00000178: 	movl	%edx, %eax
    0000017a: 	xorl	%edx, %edx
    0000017c: 	jmp	.Ltmp1448 # Offset: 380
.Ltmp1444:
    0000017e: 	movl	%edx, %eax
    00000180: 	xorl	%r10d, %r10d
    00000183: 	jmp	.Ltmp1449 # Offset: 387
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and4IjET_PKS0_iS0_"

Binary Function "_Z8bit_and5IjET_PKS0_iS0_" after disassembly {
  Number      : 210
  State       : disassembled
  Address     : 0x14f40
  Size        : 0x163
  MaxSize     : 0x170
  Offset      : 0x14f40
  Section     : .text
  Orc Section : .local.text._Z8bit_and5IjET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0209:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %r9d
    0000000a: 	movl	%edx, %eax
    0000000c: 	cmpl	$0x1, %esi
    0000000f: 	jle	.Ltmp1450 # Offset: 15
    00000015: 	leal	-0x2(%rsi), %edx
    00000018: 	movl	%edx, %r10d
    0000001b: 	shrl	%r10d
    0000001e: 	addl	$0x1, %r10d
    00000022: 	cmpl	$0x1, %edx
    00000025: 	jbe	.Ltmp1451 # Offset: 37
    0000002b: 	movl	%r10d, %edx
    0000002e: 	movd	%eax, %xmm0
    00000032: 	movq	%rdi, %rax
    00000035: 	shrl	%edx
    00000037: 	punpckldq	%xmm0, %xmm0
    0000003b: 	subl	$0x1, %edx
    0000003e: 	movhps	DATAat0x33590(%rip), %xmm0
    00000045: 	shlq	$0x4, %rdx
    00000049: 	leaq	0x10(%rdi,%rdx), %rdx
    0000004e: 	nop # Size: 2
.Ltmp1452:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	pand	%xmm2, %xmm0
    0000005c: 	cmpq	%rax, %rdx
    0000005f: 	jne	.Ltmp1452 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	movd	%xmm0, %eax
    00000069: 	movl	%r10d, %edi
    0000006c: 	punpckhdq	%xmm0, %xmm1
    00000070: 	andl	$-0x2, %edi
    00000073: 	movd	%xmm1, %edx
    00000077: 	pshufd	$0x55, %xmm0, %xmm1
    0000007c: 	pshufd	$0xff, %xmm0, %xmm0
    00000081: 	andl	%edx, %eax
    00000083: 	movd	%xmm1, %esi
    00000087: 	movd	%xmm0, %edx
    0000008b: 	andl	%edx, %esi
    0000008d: 	leal	(%rdi,%rdi), %edx
    00000090: 	cmpl	%edi, %r10d
    00000093: 	je	.Ltmp1453 # Offset: 147
.Ltmp1459:
    00000095: 	movslq	%edx, %rdx
    00000098: 	andl	(%rcx,%rdx,4), %eax
    0000009b: 	andl	0x4(%rcx,%rdx,4), %esi
.Ltmp1453:
    0000009f: 	addl	%r10d, %r10d
.Ltmp1458:
    000000a2: 	cmpl	%r10d, %r9d
    000000a5: 	jle	.Ltmp1454 # Offset: 165
    000000ab: 	movl	%r9d, %r11d
    000000ae: 	subl	%r10d, %r11d
    000000b1: 	leal	-0x1(%r11), %edx
    000000b5: 	cmpl	$0x2, %edx
    000000b8: 	jbe	.Ltmp1455 # Offset: 184
    000000ba: 	movslq	%r10d, %rdx
    000000bd: 	pcmpeqd	%xmm0, %xmm0
    000000c1: 	leaq	(%rcx,%rdx,4), %rdi
    000000c5: 	movl	%r11d, %edx
    000000c8: 	shrl	$0x2, %edx
    000000cb: 	leal	-0x1(%rdx), %r8d
    000000cf: 	leaq	0x10(%rdi), %rdx
    000000d3: 	shlq	$0x4, %r8
    000000d7: 	addq	%rdx, %r8
    000000da: 	jmp	.Ltmp1456 # Offset: 218
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp1457:
    000000e0: 	addq	$0x10, %rdx
.Ltmp1456:
    000000e4: 	movdqu	(%rdi), %xmm1
    000000e8: 	movq	%rdx, %rdi
    000000eb: 	pand	%xmm1, %xmm0
    000000ef: 	cmpq	%rdx, %r8
    000000f2: 	jne	.Ltmp1457 # Offset: 242
    000000f4: 	movdqa	%xmm0, %xmm1
    000000f8: 	psrldq	$0x8, %xmm1
    000000fd: 	pand	%xmm1, %xmm0
    00000101: 	movdqa	%xmm0, %xmm1
    00000105: 	psrldq	$0x4, %xmm1
    0000010a: 	pand	%xmm1, %xmm0
    0000010e: 	movd	%xmm0, %edx
    00000112: 	andl	%edx, %eax
    00000114: 	movl	%r11d, %edx
    00000117: 	andl	$-0x4, %edx
    0000011a: 	addl	%edx, %r10d
    0000011d: 	cmpl	%r11d, %edx
    00000120: 	je	.Ltmp1454 # Offset: 288
.Ltmp1455:
    00000122: 	movslq	%r10d, %rdx
    00000125: 	leaq	(,%rdx,4), %rdi
    0000012d: 	andl	(%rcx,%rdx,4), %eax
    00000130: 	leal	0x1(%r10), %edx
    00000134: 	cmpl	%edx, %r9d
    00000137: 	jle	.Ltmp1454 # Offset: 311
    00000139: 	addl	$0x2, %r10d
    0000013d: 	andl	0x4(%rcx,%rdi), %eax
    00000141: 	cmpl	%r10d, %r9d
    00000144: 	jle	.Ltmp1454 # Offset: 324
    00000146: 	andl	0x8(%rcx,%rdi), %eax
.Ltmp1454:
    0000014a: 	andl	%esi, %eax
    0000014c: 	retq # Offset: 332
    0000014d: 	nopl	(%rax) # Size: 3
.Ltmp1450:
    00000150: 	movl	%edx, %esi
    00000152: 	xorl	%r10d, %r10d
    00000155: 	jmp	.Ltmp1458 # Offset: 341
.Ltmp1451:
    0000015a: 	movl	%eax, %esi
    0000015c: 	xorl	%edx, %edx
    0000015e: 	jmp	.Ltmp1459 # Offset: 350
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and5IjET_PKS0_iS0_"

Binary Function "_Z8bit_and6IjET_PKS0_iS0_" after disassembly {
  Number      : 211
  State       : disassembled
  Address     : 0x150b0
  Size        : 0x12a
  MaxSize     : 0x130
  Offset      : 0x150b0
  Section     : .text
  Orc Section : .local.text._Z8bit_and6IjET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0210:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r9d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp1460 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %ecx
    00000015: 	movd	%edx, %xmm2
    00000019: 	xorl	%eax, %eax
    0000001b: 	shrl	$0x2, %ecx
    0000001e: 	pshufd	$0x0, %xmm2, %xmm0
    00000023: 	addl	$0x1, %ecx
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1461:
    00000030: 	movq	%rax, %rdx
    00000033: 	addq	$0x1, %rax
    00000037: 	shlq	$0x4, %rdx
    0000003b: 	movdqu	(%rdi,%rdx), %xmm1
    00000040: 	pand	%xmm1, %xmm0
    00000044: 	cmpl	%eax, %ecx
    00000046: 	ja	.Ltmp1461 # Offset: 70
    00000048: 	pshufd	$0x55, %xmm0, %xmm1
    0000004d: 	movd	%xmm0, %eax
    00000051: 	shll	$0x2, %ecx
    00000054: 	movd	%xmm1, %r10d
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	punpckhdq	%xmm0, %xmm1
    00000061: 	pshufd	$0xff, %xmm0, %xmm0
    00000066: 	movd	%xmm1, %edx
    0000006a: 	andl	%edx, %r10d
    0000006d: 	movd	%xmm0, %edx
    00000071: 	andl	%edx, %r10d
.Ltmp1466:
    00000074: 	cmpl	%ecx, %r9d
    00000077: 	jle	.Ltmp1462 # Offset: 119
    0000007d: 	movl	%r9d, %r11d
    00000080: 	subl	%ecx, %r11d
    00000083: 	leal	-0x1(%r11), %edx
    00000087: 	cmpl	$0x2, %edx
    0000008a: 	jbe	.Ltmp1463 # Offset: 138
    0000008c: 	movslq	%ecx, %rdx
    0000008f: 	pcmpeqd	%xmm0, %xmm0
    00000093: 	leaq	(%rdi,%rdx,4), %rsi
    00000097: 	movl	%r11d, %edx
    0000009a: 	shrl	$0x2, %edx
    0000009d: 	leal	-0x1(%rdx), %r8d
    000000a1: 	leaq	0x10(%rsi), %rdx
    000000a5: 	shlq	$0x4, %r8
    000000a9: 	addq	%rdx, %r8
    000000ac: 	jmp	.Ltmp1464 # Offset: 172
    000000ae: 	nop # Size: 2
.Ltmp1465:
    000000b0: 	addq	$0x10, %rdx
.Ltmp1464:
    000000b4: 	movdqu	(%rsi), %xmm1
    000000b8: 	movq	%rdx, %rsi
    000000bb: 	pand	%xmm1, %xmm0
    000000bf: 	cmpq	%rdx, %r8
    000000c2: 	jne	.Ltmp1465 # Offset: 194
    000000c4: 	movdqa	%xmm0, %xmm1
    000000c8: 	psrldq	$0x8, %xmm1
    000000cd: 	pand	%xmm1, %xmm0
    000000d1: 	movdqa	%xmm0, %xmm1
    000000d5: 	psrldq	$0x4, %xmm1
    000000da: 	pand	%xmm1, %xmm0
    000000de: 	movd	%xmm0, %edx
    000000e2: 	andl	%edx, %eax
    000000e4: 	movl	%r11d, %edx
    000000e7: 	andl	$-0x4, %edx
    000000ea: 	addl	%edx, %ecx
    000000ec: 	cmpl	%r11d, %edx
    000000ef: 	je	.Ltmp1462 # Offset: 239
.Ltmp1463:
    000000f1: 	movslq	%ecx, %rdx
    000000f4: 	leaq	(,%rdx,4), %rsi
    000000fc: 	andl	(%rdi,%rdx,4), %eax
    000000ff: 	leal	0x1(%rcx), %edx
    00000102: 	cmpl	%edx, %r9d
    00000105: 	jle	.Ltmp1462 # Offset: 261
    00000107: 	addl	$0x2, %ecx
    0000010a: 	andl	0x4(%rdi,%rsi), %eax
    0000010e: 	cmpl	%r9d, %ecx
    00000111: 	jge	.Ltmp1462 # Offset: 273
    00000113: 	andl	0x8(%rdi,%rsi), %eax
.Ltmp1462:
    00000117: 	andl	%r10d, %eax
    0000011a: 	retq # Offset: 282
    0000011b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1460:
    00000120: 	movl	%edx, %r10d
    00000123: 	xorl	%ecx, %ecx
    00000125: 	jmp	.Ltmp1466 # Offset: 293
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and6IjET_PKS0_iS0_"

Binary Function "_Z8bit_and7IjET_PKS0_iS0_" after disassembly {
  Number      : 212
  State       : disassembled
  Address     : 0x151e0
  Size        : 0x12a
  MaxSize     : 0x130
  Offset      : 0x151e0
  Section     : .text
  Orc Section : .local.text._Z8bit_and7IjET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0211:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r9d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp1467 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %ecx
    00000015: 	movd	%edx, %xmm2
    00000019: 	xorl	%eax, %eax
    0000001b: 	shrl	$0x2, %ecx
    0000001e: 	pshufd	$0x0, %xmm2, %xmm0
    00000023: 	addl	$0x1, %ecx
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1468:
    00000030: 	movq	%rax, %rdx
    00000033: 	addq	$0x1, %rax
    00000037: 	shlq	$0x4, %rdx
    0000003b: 	movdqu	(%rdi,%rdx), %xmm1
    00000040: 	pand	%xmm1, %xmm0
    00000044: 	cmpl	%eax, %ecx
    00000046: 	ja	.Ltmp1468 # Offset: 70
    00000048: 	pshufd	$0x55, %xmm0, %xmm1
    0000004d: 	movd	%xmm0, %eax
    00000051: 	shll	$0x2, %ecx
    00000054: 	movd	%xmm1, %r10d
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	punpckhdq	%xmm0, %xmm1
    00000061: 	pshufd	$0xff, %xmm0, %xmm0
    00000066: 	movd	%xmm1, %edx
    0000006a: 	andl	%edx, %r10d
    0000006d: 	movd	%xmm0, %edx
    00000071: 	andl	%edx, %r10d
.Ltmp1473:
    00000074: 	cmpl	%ecx, %r9d
    00000077: 	jle	.Ltmp1469 # Offset: 119
    0000007d: 	movl	%r9d, %r11d
    00000080: 	subl	%ecx, %r11d
    00000083: 	leal	-0x1(%r11), %edx
    00000087: 	cmpl	$0x2, %edx
    0000008a: 	jbe	.Ltmp1470 # Offset: 138
    0000008c: 	movslq	%ecx, %rdx
    0000008f: 	pcmpeqd	%xmm0, %xmm0
    00000093: 	leaq	(%rdi,%rdx,4), %rsi
    00000097: 	movl	%r11d, %edx
    0000009a: 	shrl	$0x2, %edx
    0000009d: 	leal	-0x1(%rdx), %r8d
    000000a1: 	leaq	0x10(%rsi), %rdx
    000000a5: 	shlq	$0x4, %r8
    000000a9: 	addq	%rdx, %r8
    000000ac: 	jmp	.Ltmp1471 # Offset: 172
    000000ae: 	nop # Size: 2
.Ltmp1472:
    000000b0: 	addq	$0x10, %rdx
.Ltmp1471:
    000000b4: 	movdqu	(%rsi), %xmm1
    000000b8: 	movq	%rdx, %rsi
    000000bb: 	pand	%xmm1, %xmm0
    000000bf: 	cmpq	%rdx, %r8
    000000c2: 	jne	.Ltmp1472 # Offset: 194
    000000c4: 	movdqa	%xmm0, %xmm1
    000000c8: 	psrldq	$0x8, %xmm1
    000000cd: 	pand	%xmm1, %xmm0
    000000d1: 	movdqa	%xmm0, %xmm1
    000000d5: 	psrldq	$0x4, %xmm1
    000000da: 	pand	%xmm1, %xmm0
    000000de: 	movd	%xmm0, %edx
    000000e2: 	andl	%edx, %eax
    000000e4: 	movl	%r11d, %edx
    000000e7: 	andl	$-0x4, %edx
    000000ea: 	addl	%edx, %ecx
    000000ec: 	cmpl	%r11d, %edx
    000000ef: 	je	.Ltmp1469 # Offset: 239
.Ltmp1470:
    000000f1: 	movslq	%ecx, %rdx
    000000f4: 	leaq	(,%rdx,4), %rsi
    000000fc: 	andl	(%rdi,%rdx,4), %eax
    000000ff: 	leal	0x1(%rcx), %edx
    00000102: 	cmpl	%edx, %r9d
    00000105: 	jle	.Ltmp1469 # Offset: 261
    00000107: 	addl	$0x2, %ecx
    0000010a: 	andl	0x4(%rdi,%rsi), %eax
    0000010e: 	cmpl	%r9d, %ecx
    00000111: 	jge	.Ltmp1469 # Offset: 273
    00000113: 	andl	0x8(%rdi,%rsi), %eax
.Ltmp1469:
    00000117: 	andl	%r10d, %eax
    0000011a: 	retq # Offset: 282
    0000011b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1467:
    00000120: 	movl	%edx, %r10d
    00000123: 	xorl	%ecx, %ecx
    00000125: 	jmp	.Ltmp1473 # Offset: 293
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and7IjET_PKS0_iS0_"

Binary Function "_Z8bit_and8IjET_PKS0_iS0_" after disassembly {
  Number      : 213
  State       : disassembled
  Address     : 0x15310
  Size        : 0x159
  MaxSize     : 0x160
  Offset      : 0x15310
  Section     : .text
  Orc Section : .local.text._Z8bit_and8IjET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0212:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x7, %esi
    0000000c: 	jle	.Ltmp1474 # Offset: 12
    00000012: 	movd	%edx, %xmm5
    00000016: 	leal	-0x8(%rsi), %ecx
    00000019: 	movq	%rdi, %rax
    0000001c: 	xorl	%edx, %edx
    0000001e: 	shrl	$0x3, %ecx
    00000021: 	pshufd	$0x0, %xmm5, %xmm0
    00000026: 	addl	$0x1, %ecx
    00000029: 	movdqa	%xmm0, %xmm1
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp1475:
    00000030: 	movdqu	(%rax), %xmm3
    00000034: 	movdqu	0x10(%rax), %xmm4
    00000039: 	addl	$0x1, %edx
    0000003c: 	addq	$0x20, %rax
    00000040: 	pand	%xmm3, %xmm0
    00000044: 	pand	%xmm4, %xmm1
    00000048: 	cmpl	%edx, %ecx
    0000004a: 	ja	.Ltmp1475 # Offset: 74
    0000004c: 	movdqa	%xmm0, %xmm2
    00000050: 	leal	(,%rcx,8), %esi
    00000057: 	movd	%xmm0, %eax
    0000005b: 	punpckhdq	%xmm0, %xmm2
    0000005f: 	movd	%xmm2, %ecx
    00000063: 	pshufd	$0x55, %xmm0, %xmm2
    00000068: 	pshufd	$0xff, %xmm0, %xmm0
    0000006d: 	movd	%xmm2, %edx
    00000071: 	andl	%edx, %ecx
    00000073: 	movd	%xmm0, %edx
    00000077: 	pshufd	$0x55, %xmm1, %xmm0
    0000007c: 	andl	%edx, %ecx
    0000007e: 	movd	%xmm1, %edx
    00000082: 	andl	%edx, %ecx
    00000084: 	movd	%xmm0, %edx
    00000088: 	movdqa	%xmm1, %xmm0
    0000008c: 	punpckhdq	%xmm1, %xmm0
    00000090: 	andl	%edx, %ecx
    00000092: 	pshufd	$0xff, %xmm1, %xmm1
    00000097: 	movd	%xmm0, %edx
    0000009b: 	andl	%edx, %ecx
    0000009d: 	movd	%xmm1, %edx
    000000a1: 	andl	%edx, %ecx
.Ltmp1480:
    000000a3: 	cmpl	%esi, %r8d
    000000a6: 	jle	.Ltmp1476 # Offset: 166
    000000ac: 	movl	%r8d, %r11d
    000000af: 	subl	%esi, %r11d
    000000b2: 	leal	-0x1(%r11), %edx
    000000b6: 	cmpl	$0x2, %edx
    000000b9: 	jbe	.Ltmp1477 # Offset: 185
    000000bb: 	movslq	%esi, %rdx
    000000be: 	pcmpeqd	%xmm0, %xmm0
    000000c2: 	leaq	(%rdi,%rdx,4), %r9
    000000c6: 	movl	%r11d, %edx
    000000c9: 	shrl	$0x2, %edx
    000000cc: 	leal	-0x1(%rdx), %r10d
    000000d0: 	leaq	0x10(%r9), %rdx
    000000d4: 	shlq	$0x4, %r10
    000000d8: 	addq	%rdx, %r10
    000000db: 	jmp	.Ltmp1478 # Offset: 219
    000000dd: 	nopl	(%rax) # Size: 3
.Ltmp1479:
    000000e0: 	addq	$0x10, %rdx
.Ltmp1478:
    000000e4: 	movdqu	(%r9), %xmm1
    000000e9: 	movq	%rdx, %r9
    000000ec: 	pand	%xmm1, %xmm0
    000000f0: 	cmpq	%rdx, %r10
    000000f3: 	jne	.Ltmp1479 # Offset: 243
    000000f5: 	movdqa	%xmm0, %xmm1
    000000f9: 	psrldq	$0x8, %xmm1
    000000fe: 	pand	%xmm1, %xmm0
    00000102: 	movdqa	%xmm0, %xmm1
    00000106: 	psrldq	$0x4, %xmm1
    0000010b: 	pand	%xmm1, %xmm0
    0000010f: 	movd	%xmm0, %edx
    00000113: 	andl	%edx, %eax
    00000115: 	movl	%r11d, %edx
    00000118: 	andl	$-0x4, %edx
    0000011b: 	addl	%edx, %esi
    0000011d: 	cmpl	%r11d, %edx
    00000120: 	je	.Ltmp1476 # Offset: 288
.Ltmp1477:
    00000122: 	movslq	%esi, %rdx
    00000125: 	leaq	(,%rdx,4), %r9
    0000012d: 	andl	(%rdi,%rdx,4), %eax
    00000130: 	leal	0x1(%rsi), %edx
    00000133: 	cmpl	%edx, %r8d
    00000136: 	jle	.Ltmp1476 # Offset: 310
    00000138: 	addl	$0x2, %esi
    0000013b: 	andl	0x4(%rdi,%r9), %eax
    00000140: 	cmpl	%r8d, %esi
    00000143: 	jge	.Ltmp1476 # Offset: 323
    00000145: 	andl	0x8(%rdi,%r9), %eax
.Ltmp1476:
    0000014a: 	andl	%ecx, %eax
    0000014c: 	retq # Offset: 332
    0000014d: 	nopl	(%rax) # Size: 3
.Ltmp1474:
    00000150: 	movl	%edx, %ecx
    00000152: 	xorl	%esi, %esi
    00000154: 	jmp	.Ltmp1480 # Offset: 340
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and8IjET_PKS0_iS0_"

Binary Function "_Z7bit_or1IjET_PKS0_iS0_" after disassembly {
  Number      : 214
  State       : disassembled
  Address     : 0x15470
  Size        : 0xa7
  MaxSize     : 0xb0
  Offset      : 0x15470
  Section     : .text
  Orc Section : .local.text._Z7bit_or1IjET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0213:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp1481 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0x2, %eax
    00000014: 	jbe	.Ltmp1482 # Offset: 20
    0000001a: 	shrl	$0x2, %esi
    0000001d: 	movq	%rdi, %rax
    00000020: 	pxor	%xmm0, %xmm0
    00000024: 	subl	$0x1, %esi
    00000027: 	shlq	$0x4, %rsi
    0000002b: 	leaq	0x10(%rdi,%rsi), %rsi
.Ltmp1483:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	addq	$0x10, %rax
    00000038: 	por	%xmm2, %xmm0
    0000003c: 	cmpq	%rsi, %rax
    0000003f: 	jne	.Ltmp1483 # Offset: 63
    00000041: 	movdqa	%xmm0, %xmm1
    00000045: 	psrldq	$0x8, %xmm1
    0000004a: 	por	%xmm1, %xmm0
    0000004e: 	movdqa	%xmm0, %xmm1
    00000052: 	psrldq	$0x4, %xmm1
    00000057: 	por	%xmm1, %xmm0
    0000005b: 	movd	%xmm0, %eax
    0000005f: 	orl	%edx, %eax
    00000061: 	movl	%ecx, %edx
    00000063: 	andl	$-0x4, %edx
    00000066: 	testb	$0x3, %cl
    00000069: 	je	.Ltmp1484 # Offset: 105
.Ltmp1486:
    0000006b: 	movslq	%edx, %rsi
    0000006e: 	leaq	(,%rsi,4), %r8
    00000076: 	orl	(%rdi,%rsi,4), %eax
    00000079: 	leal	0x1(%rdx), %esi
    0000007c: 	cmpl	%esi, %ecx
    0000007e: 	jle	.Ltmp1485 # Offset: 126
    00000080: 	addl	$0x2, %edx
    00000083: 	orl	0x4(%rdi,%r8), %eax
    00000088: 	cmpl	%edx, %ecx
    0000008a: 	jle	.Ltmp1485 # Offset: 138
    0000008c: 	orl	0x8(%rdi,%r8), %eax
    00000091: 	retq # Offset: 145
    00000092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1481:
    00000098: 	movl	%edx, %eax
.Ltmp1485:
    0000009a: 	retq # Offset: 154
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1484:
    000000a0: 	retq # Offset: 160
.Ltmp1482:
    000000a1: 	movl	%edx, %eax
    000000a3: 	xorl	%edx, %edx
    000000a5: 	jmp	.Ltmp1486 # Offset: 165
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or1IjET_PKS0_iS0_"

Binary Function "_Z7bit_or2IjET_PKS0_iS0_" after disassembly {
  Number      : 215
  State       : disassembled
  Address     : 0x15520
  Size        : 0xb5
  MaxSize     : 0xc0
  Offset      : 0x15520
  Section     : .text
  Orc Section : .local.text._Z7bit_or2IjET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0214:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movq	%rdi, %rcx
    0000000a: 	shlq	$0x2, %rsi
    0000000e: 	leaq	(%rdi,%rsi), %r8
    00000012: 	cmpq	%r8, %rdi
    00000015: 	je	.Ltmp1487 # Offset: 21
    0000001b: 	subq	$0x4, %rsi
    0000001f: 	movq	%rdi, %rax
    00000022: 	movq	%rsi, %rdi
    00000025: 	shrq	$0x2, %rdi
    00000029: 	addq	$0x1, %rdi
    0000002d: 	cmpq	$0x8, %rsi
    00000031: 	jbe	.Ltmp1488 # Offset: 49
    00000033: 	movq	%rdi, %rsi
    00000036: 	pxor	%xmm0, %xmm0
    0000003a: 	shrq	$0x2, %rsi
    0000003e: 	shlq	$0x4, %rsi
    00000042: 	addq	%rcx, %rsi
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp1489:
    00000048: 	movdqu	(%rax), %xmm2
    0000004c: 	addq	$0x10, %rax
    00000050: 	por	%xmm2, %xmm0
    00000054: 	cmpq	%rax, %rsi
    00000057: 	jne	.Ltmp1489 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	psrldq	$0x8, %xmm1
    00000062: 	por	%xmm1, %xmm0
    00000066: 	movdqa	%xmm0, %xmm1
    0000006a: 	psrldq	$0x4, %xmm1
    0000006f: 	por	%xmm1, %xmm0
    00000073: 	movd	%xmm0, %eax
    00000077: 	orl	%edx, %eax
    00000079: 	movq	%rdi, %rdx
    0000007c: 	andq	$-0x4, %rdx
    00000080: 	leaq	(%rcx,%rdx,4), %rcx
    00000084: 	cmpq	%rdx, %rdi
    00000087: 	je	.Ltmp1490 # Offset: 135
.Ltmp1492:
    00000089: 	leaq	0x4(%rcx), %rdx
    0000008d: 	orl	(%rcx), %eax
    0000008f: 	cmpq	%rdx, %r8
    00000092: 	je	.Ltmp1491 # Offset: 146
    00000094: 	leaq	0x8(%rcx), %rdx
    00000098: 	orl	0x4(%rcx), %eax
    0000009b: 	cmpq	%rdx, %r8
    0000009e: 	je	.Ltmp1491 # Offset: 158
    000000a0: 	orl	0x8(%rcx), %eax
    000000a3: 	retq # Offset: 163
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp1487:
    000000a8: 	movl	%edx, %eax
.Ltmp1491:
    000000aa: 	retq # Offset: 170
    000000ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1490:
    000000b0: 	retq # Offset: 176
.Ltmp1488:
    000000b1: 	movl	%edx, %eax
    000000b3: 	jmp	.Ltmp1492 # Offset: 179
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or2IjET_PKS0_iS0_"

Binary Function "_Z7bit_or3IjET_PKS0_iS0_" after disassembly {
  Number      : 216
  State       : disassembled
  Address     : 0x155e0
  Size        : 0xf4
  MaxSize     : 0x100
  Offset      : 0x155e0
  Section     : .text
  Orc Section : .local.text._Z7bit_or3IjET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0215:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %r9d
    00000008: 	testl	%r9d, %r9d
    0000000b: 	jle	.Ltmp1493 # Offset: 11
    00000011: 	leal	-0x2(%rsi), %eax
    00000014: 	movl	%eax, %ecx
    00000016: 	shrl	%ecx
    00000018: 	addl	$0x1, %ecx
    0000001b: 	cmpl	$0x5, %eax
    0000001e: 	jbe	.Ltmp1494 # Offset: 30
    00000024: 	movl	%ecx, %r8d
    00000027: 	movq	%rdi, %rax
    0000002a: 	pxor	%xmm2, %xmm2
    0000002e: 	shrl	$0x2, %r8d
    00000032: 	subl	$0x1, %r8d
    00000036: 	shlq	$0x5, %r8
    0000003a: 	leaq	0x20(%rdi,%r8), %r8
    0000003f: 	nop # Size: 1
.Ltmp1495:
    00000040: 	movdqu	(%rax), %xmm0
    00000044: 	movdqu	0x10(%rax), %xmm3
    00000049: 	addq	$0x20, %rax
    0000004d: 	movdqa	%xmm0, %xmm1
    00000051: 	shufps	$0xdd, %xmm3, %xmm0
    00000055: 	shufps	$0x88, %xmm3, %xmm1
    00000059: 	por	%xmm1, %xmm0
    0000005d: 	por	%xmm0, %xmm2
    00000061: 	cmpq	%rax, %r8
    00000064: 	jne	.Ltmp1495 # Offset: 100
    00000066: 	movdqa	%xmm2, %xmm0
    0000006a: 	movl	%ecx, %r8d
    0000006d: 	psrldq	$0x8, %xmm0
    00000072: 	andl	$-0x4, %r8d
    00000076: 	por	%xmm0, %xmm2
    0000007a: 	movdqa	%xmm2, %xmm0
    0000007e: 	psrldq	$0x4, %xmm0
    00000083: 	por	%xmm0, %xmm2
    00000087: 	movd	%xmm2, %eax
    0000008b: 	orl	%edx, %eax
    0000008d: 	leal	(%r8,%r8), %edx
    00000091: 	cmpl	%r8d, %ecx
    00000094: 	je	.Ltmp1496 # Offset: 148
.Ltmp1499:
    00000096: 	movslq	%edx, %r10
    00000099: 	orl	(%rdi,%r10,4), %eax
    0000009d: 	leaq	(,%r10,4), %r8
    000000a5: 	orl	0x4(%rdi,%r10,4), %eax
    000000aa: 	leal	0x2(%rdx), %r10d
    000000ae: 	cmpl	%r9d, %r10d
    000000b1: 	jge	.Ltmp1496 # Offset: 177
    000000b3: 	movl	0x8(%rdi,%r8), %r10d
    000000b8: 	addl	$0x4, %edx
    000000bb: 	orl	0xc(%rdi,%r8), %r10d
    000000c0: 	orl	%r10d, %eax
    000000c3: 	cmpl	%edx, %r9d
    000000c6: 	jle	.Ltmp1496 # Offset: 198
    000000c8: 	movl	0x14(%rdi,%r8), %edx
    000000cd: 	orl	0x10(%rdi,%r8), %edx
    000000d2: 	orl	%edx, %eax
.Ltmp1496:
    000000d4: 	addl	%ecx, %ecx
.Ltmp1498:
    000000d6: 	cmpl	%esi, %ecx
    000000d8: 	jge	.Ltmp1497 # Offset: 216
    000000da: 	movslq	%ecx, %rcx
    000000dd: 	orl	(%rdi,%rcx,4), %eax
.Ltmp1497:
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp1493:
    000000e8: 	movl	%edx, %eax
    000000ea: 	xorl	%ecx, %ecx
    000000ec: 	jmp	.Ltmp1498 # Offset: 236
.Ltmp1494:
    000000ee: 	movl	%edx, %eax
    000000f0: 	xorl	%edx, %edx
    000000f2: 	jmp	.Ltmp1499 # Offset: 242
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or3IjET_PKS0_iS0_"

Binary Function "_Z7bit_or4IjET_PKS0_iS0_" after disassembly {
  Number      : 217
  State       : disassembled
  Address     : 0x156e0
  Size        : 0x188
  MaxSize     : 0x190
  Offset      : 0x156e0
  Section     : .text
  Orc Section : .local.text._Z7bit_or4IjET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0216:
    00000000: 	endbr64
    00000004: 	leal	-0x3(%rsi), %r9d
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%esi, %edi
    0000000d: 	testl	%r9d, %r9d
    00000010: 	jle	.Ltmp1500 # Offset: 16
    00000016: 	leal	-0x4(%rsi), %eax
    00000019: 	movl	%eax, %esi
    0000001b: 	shrl	$0x2, %esi
    0000001e: 	addl	$0x1, %esi
    00000021: 	cmpl	$0xb, %eax
    00000024: 	jbe	.Ltmp1501 # Offset: 36
    0000002a: 	movl	%esi, %r8d
    0000002d: 	movq	%rcx, %rax
    00000030: 	pxor	%xmm4, %xmm4
    00000034: 	shrl	$0x2, %r8d
    00000038: 	subl	$0x1, %r8d
    0000003c: 	shlq	$0x6, %r8
    00000040: 	leaq	0x40(%rcx,%r8), %r8
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp1502:
    00000048: 	movdqu	(%rax), %xmm0
    0000004c: 	movdqu	0x10(%rax), %xmm6
    00000051: 	addq	$0x40, %rax
    00000055: 	movdqu	-0x20(%rax), %xmm2
    0000005a: 	movdqa	%xmm0, %xmm3
    0000005e: 	shufps	$0xdd, %xmm6, %xmm0
    00000062: 	movdqa	%xmm0, %xmm1
    00000066: 	shufps	$0x88, %xmm6, %xmm3
    0000006a: 	movdqu	-0x10(%rax), %xmm6
    0000006f: 	movdqa	%xmm2, %xmm5
    00000073: 	shufps	$0xdd, %xmm6, %xmm2
    00000077: 	shufps	$0x88, %xmm2, %xmm1
    0000007b: 	shufps	$0xdd, %xmm2, %xmm0
    0000007f: 	por	%xmm1, %xmm0
    00000083: 	movdqa	%xmm3, %xmm1
    00000087: 	shufps	$0x88, %xmm6, %xmm5
    0000008b: 	shufps	$0xdd, %xmm5, %xmm3
    0000008f: 	shufps	$0x88, %xmm5, %xmm1
    00000093: 	por	%xmm3, %xmm1
    00000097: 	por	%xmm1, %xmm0
    0000009b: 	por	%xmm0, %xmm4
    0000009f: 	cmpq	%rax, %r8
    000000a2: 	jne	.Ltmp1502 # Offset: 162
    000000a4: 	movdqa	%xmm4, %xmm0
    000000a8: 	psrldq	$0x8, %xmm0
    000000ad: 	por	%xmm0, %xmm4
    000000b1: 	movdqa	%xmm4, %xmm0
    000000b5: 	psrldq	$0x4, %xmm0
    000000ba: 	por	%xmm0, %xmm4
    000000be: 	movd	%xmm4, %eax
    000000c2: 	orl	%edx, %eax
    000000c4: 	movl	%esi, %edx
    000000c6: 	andl	$-0x4, %edx
    000000c9: 	leal	(,%rdx,4), %r10d
    000000d1: 	cmpl	%esi, %edx
    000000d3: 	je	.Ltmp1503 # Offset: 211
.Ltmp1506:
    000000d5: 	movslq	%r10d, %r8
    000000d8: 	orl	(%rcx,%r8,4), %eax
    000000dc: 	leaq	(,%r8,4), %rdx
    000000e4: 	orl	0x4(%rcx,%r8,4), %eax
    000000e9: 	orl	0x8(%rcx,%r8,4), %eax
    000000ee: 	orl	0xc(%rcx,%r8,4), %eax
    000000f3: 	leal	0x4(%r10), %r8d
    000000f7: 	cmpl	%r8d, %r9d
    000000fa: 	jle	.Ltmp1503 # Offset: 250
    000000fc: 	movl	0x14(%rcx,%rdx), %r8d
    00000101: 	addl	$0x8, %r10d
    00000105: 	orl	0x18(%rcx,%rdx), %r8d
    0000010a: 	orl	0x10(%rcx,%rdx), %r8d
    0000010f: 	orl	0x1c(%rcx,%rdx), %r8d
    00000114: 	orl	%r8d, %eax
    00000117: 	cmpl	%r10d, %r9d
    0000011a: 	jle	.Ltmp1503 # Offset: 282
    0000011c: 	movl	0x28(%rcx,%rdx), %r8d
    00000121: 	orl	0x24(%rcx,%rdx), %r8d
    00000126: 	orl	0x20(%rcx,%rdx), %r8d
    0000012b: 	orl	0x2c(%rcx,%rdx), %r8d
    00000130: 	orl	%r8d, %eax
.Ltmp1503:
    00000133: 	leal	(,%rsi,4), %edx
.Ltmp1505:
    0000013a: 	cmpl	%edx, %edi
    0000013c: 	jle	.Ltmp1504 # Offset: 316
    0000013e: 	movslq	%edx, %rsi
    00000141: 	leaq	(,%rsi,4), %r8
    00000149: 	orl	(%rcx,%rsi,4), %eax
    0000014c: 	leal	0x1(%rdx), %esi
    0000014f: 	cmpl	%edi, %esi
    00000151: 	jge	.Ltmp1504 # Offset: 337
    00000153: 	leal	0x2(%rdx), %esi
    00000156: 	orl	0x4(%rcx,%r8), %eax
    0000015b: 	cmpl	%esi, %edi
    0000015d: 	jle	.Ltmp1504 # Offset: 349
    0000015f: 	addl	$0x3, %edx
    00000162: 	orl	0x8(%rcx,%r8), %eax
    00000167: 	cmpl	%edx, %edi
    00000169: 	jle	.Ltmp1504 # Offset: 361
    0000016b: 	orl	0xc(%rcx,%r8), %eax
.Ltmp1504:
    00000170: 	retq # Offset: 368
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp1500:
    00000178: 	movl	%edx, %eax
    0000017a: 	xorl	%edx, %edx
    0000017c: 	jmp	.Ltmp1505 # Offset: 380
.Ltmp1501:
    0000017e: 	movl	%edx, %eax
    00000180: 	xorl	%r10d, %r10d
    00000183: 	jmp	.Ltmp1506 # Offset: 387
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or4IjET_PKS0_iS0_"

Binary Function "_Z7bit_or5IjET_PKS0_iS0_" after disassembly {
  Number      : 218
  State       : disassembled
  Address     : 0x15870
  Size        : 0x163
  MaxSize     : 0x170
  Offset      : 0x15870
  Section     : .text
  Orc Section : .local.text._Z7bit_or5IjET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0217:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %r9d
    0000000a: 	movl	%edx, %eax
    0000000c: 	cmpl	$0x1, %esi
    0000000f: 	jle	.Ltmp1507 # Offset: 15
    00000015: 	leal	-0x2(%rsi), %edx
    00000018: 	movl	%edx, %r10d
    0000001b: 	shrl	%r10d
    0000001e: 	addl	$0x1, %r10d
    00000022: 	cmpl	$0x1, %edx
    00000025: 	jbe	.Ltmp1508 # Offset: 37
    0000002b: 	movl	%r10d, %edx
    0000002e: 	movd	%eax, %xmm0
    00000032: 	movq	%rdi, %rax
    00000035: 	shrl	%edx
    00000037: 	punpckldq	%xmm0, %xmm0
    0000003b: 	subl	$0x1, %edx
    0000003e: 	movq	%xmm0, %xmm0
    00000042: 	shlq	$0x4, %rdx
    00000046: 	leaq	0x10(%rdi,%rdx), %rdx
    0000004b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1509:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	por	%xmm2, %xmm0
    0000005c: 	cmpq	%rax, %rdx
    0000005f: 	jne	.Ltmp1509 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	movd	%xmm0, %eax
    00000069: 	movl	%r10d, %edi
    0000006c: 	punpckhdq	%xmm0, %xmm1
    00000070: 	andl	$-0x2, %edi
    00000073: 	movd	%xmm1, %edx
    00000077: 	pshufd	$0x55, %xmm0, %xmm1
    0000007c: 	pshufd	$0xff, %xmm0, %xmm0
    00000081: 	orl	%edx, %eax
    00000083: 	movd	%xmm1, %esi
    00000087: 	movd	%xmm0, %edx
    0000008b: 	orl	%edx, %esi
    0000008d: 	leal	(%rdi,%rdi), %edx
    00000090: 	cmpl	%edi, %r10d
    00000093: 	je	.Ltmp1510 # Offset: 147
.Ltmp1516:
    00000095: 	movslq	%edx, %rdx
    00000098: 	orl	(%rcx,%rdx,4), %eax
    0000009b: 	orl	0x4(%rcx,%rdx,4), %esi
.Ltmp1510:
    0000009f: 	addl	%r10d, %r10d
.Ltmp1515:
    000000a2: 	cmpl	%r10d, %r9d
    000000a5: 	jle	.Ltmp1511 # Offset: 165
    000000ab: 	movl	%r9d, %r11d
    000000ae: 	subl	%r10d, %r11d
    000000b1: 	leal	-0x1(%r11), %edx
    000000b5: 	cmpl	$0x2, %edx
    000000b8: 	jbe	.Ltmp1512 # Offset: 184
    000000ba: 	movslq	%r10d, %rdx
    000000bd: 	pxor	%xmm0, %xmm0
    000000c1: 	leaq	(%rcx,%rdx,4), %rdi
    000000c5: 	movl	%r11d, %edx
    000000c8: 	shrl	$0x2, %edx
    000000cb: 	leal	-0x1(%rdx), %r8d
    000000cf: 	leaq	0x10(%rdi), %rdx
    000000d3: 	shlq	$0x4, %r8
    000000d7: 	addq	%rdx, %r8
    000000da: 	jmp	.Ltmp1513 # Offset: 218
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp1514:
    000000e0: 	addq	$0x10, %rdx
.Ltmp1513:
    000000e4: 	movdqu	(%rdi), %xmm1
    000000e8: 	movq	%rdx, %rdi
    000000eb: 	por	%xmm1, %xmm0
    000000ef: 	cmpq	%rdx, %r8
    000000f2: 	jne	.Ltmp1514 # Offset: 242
    000000f4: 	movdqa	%xmm0, %xmm1
    000000f8: 	psrldq	$0x8, %xmm1
    000000fd: 	por	%xmm1, %xmm0
    00000101: 	movdqa	%xmm0, %xmm1
    00000105: 	psrldq	$0x4, %xmm1
    0000010a: 	por	%xmm1, %xmm0
    0000010e: 	movd	%xmm0, %edx
    00000112: 	orl	%edx, %eax
    00000114: 	movl	%r11d, %edx
    00000117: 	andl	$-0x4, %edx
    0000011a: 	addl	%edx, %r10d
    0000011d: 	cmpl	%r11d, %edx
    00000120: 	je	.Ltmp1511 # Offset: 288
.Ltmp1512:
    00000122: 	movslq	%r10d, %rdx
    00000125: 	leaq	(,%rdx,4), %rdi
    0000012d: 	orl	(%rcx,%rdx,4), %eax
    00000130: 	leal	0x1(%r10), %edx
    00000134: 	cmpl	%edx, %r9d
    00000137: 	jle	.Ltmp1511 # Offset: 311
    00000139: 	addl	$0x2, %r10d
    0000013d: 	orl	0x4(%rcx,%rdi), %eax
    00000141: 	cmpl	%r10d, %r9d
    00000144: 	jle	.Ltmp1511 # Offset: 324
    00000146: 	orl	0x8(%rcx,%rdi), %eax
.Ltmp1511:
    0000014a: 	orl	%esi, %eax
    0000014c: 	retq # Offset: 332
    0000014d: 	nopl	(%rax) # Size: 3
.Ltmp1507:
    00000150: 	movl	%edx, %esi
    00000152: 	xorl	%r10d, %r10d
    00000155: 	jmp	.Ltmp1515 # Offset: 341
.Ltmp1508:
    0000015a: 	movl	%eax, %esi
    0000015c: 	xorl	%edx, %edx
    0000015e: 	jmp	.Ltmp1516 # Offset: 350
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or5IjET_PKS0_iS0_"

Binary Function "_Z7bit_or6IjET_PKS0_iS0_" after disassembly {
  Number      : 219
  State       : disassembled
  Address     : 0x159e0
  Size        : 0x12a
  MaxSize     : 0x130
  Offset      : 0x159e0
  Section     : .text
  Orc Section : .local.text._Z7bit_or6IjET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0218:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r9d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp1517 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %ecx
    00000015: 	movd	%edx, %xmm2
    00000019: 	xorl	%eax, %eax
    0000001b: 	shrl	$0x2, %ecx
    0000001e: 	pshufd	$0x0, %xmm2, %xmm0
    00000023: 	addl	$0x1, %ecx
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1518:
    00000030: 	movq	%rax, %rdx
    00000033: 	addq	$0x1, %rax
    00000037: 	shlq	$0x4, %rdx
    0000003b: 	movdqu	(%rdi,%rdx), %xmm1
    00000040: 	por	%xmm1, %xmm0
    00000044: 	cmpl	%eax, %ecx
    00000046: 	ja	.Ltmp1518 # Offset: 70
    00000048: 	pshufd	$0x55, %xmm0, %xmm1
    0000004d: 	movd	%xmm0, %eax
    00000051: 	shll	$0x2, %ecx
    00000054: 	movd	%xmm1, %r10d
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	punpckhdq	%xmm0, %xmm1
    00000061: 	pshufd	$0xff, %xmm0, %xmm0
    00000066: 	movd	%xmm1, %edx
    0000006a: 	orl	%edx, %r10d
    0000006d: 	movd	%xmm0, %edx
    00000071: 	orl	%edx, %r10d
.Ltmp1523:
    00000074: 	cmpl	%ecx, %r9d
    00000077: 	jle	.Ltmp1519 # Offset: 119
    0000007d: 	movl	%r9d, %r11d
    00000080: 	subl	%ecx, %r11d
    00000083: 	leal	-0x1(%r11), %edx
    00000087: 	cmpl	$0x2, %edx
    0000008a: 	jbe	.Ltmp1520 # Offset: 138
    0000008c: 	movslq	%ecx, %rdx
    0000008f: 	pxor	%xmm0, %xmm0
    00000093: 	leaq	(%rdi,%rdx,4), %rsi
    00000097: 	movl	%r11d, %edx
    0000009a: 	shrl	$0x2, %edx
    0000009d: 	leal	-0x1(%rdx), %r8d
    000000a1: 	leaq	0x10(%rsi), %rdx
    000000a5: 	shlq	$0x4, %r8
    000000a9: 	addq	%rdx, %r8
    000000ac: 	jmp	.Ltmp1521 # Offset: 172
    000000ae: 	nop # Size: 2
.Ltmp1522:
    000000b0: 	addq	$0x10, %rdx
.Ltmp1521:
    000000b4: 	movdqu	(%rsi), %xmm1
    000000b8: 	movq	%rdx, %rsi
    000000bb: 	por	%xmm1, %xmm0
    000000bf: 	cmpq	%rdx, %r8
    000000c2: 	jne	.Ltmp1522 # Offset: 194
    000000c4: 	movdqa	%xmm0, %xmm1
    000000c8: 	psrldq	$0x8, %xmm1
    000000cd: 	por	%xmm1, %xmm0
    000000d1: 	movdqa	%xmm0, %xmm1
    000000d5: 	psrldq	$0x4, %xmm1
    000000da: 	por	%xmm1, %xmm0
    000000de: 	movd	%xmm0, %edx
    000000e2: 	orl	%edx, %eax
    000000e4: 	movl	%r11d, %edx
    000000e7: 	andl	$-0x4, %edx
    000000ea: 	addl	%edx, %ecx
    000000ec: 	cmpl	%r11d, %edx
    000000ef: 	je	.Ltmp1519 # Offset: 239
.Ltmp1520:
    000000f1: 	movslq	%ecx, %rdx
    000000f4: 	leaq	(,%rdx,4), %rsi
    000000fc: 	orl	(%rdi,%rdx,4), %eax
    000000ff: 	leal	0x1(%rcx), %edx
    00000102: 	cmpl	%edx, %r9d
    00000105: 	jle	.Ltmp1519 # Offset: 261
    00000107: 	addl	$0x2, %ecx
    0000010a: 	orl	0x4(%rdi,%rsi), %eax
    0000010e: 	cmpl	%r9d, %ecx
    00000111: 	jge	.Ltmp1519 # Offset: 273
    00000113: 	orl	0x8(%rdi,%rsi), %eax
.Ltmp1519:
    00000117: 	orl	%r10d, %eax
    0000011a: 	retq # Offset: 282
    0000011b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1517:
    00000120: 	movl	%edx, %r10d
    00000123: 	xorl	%ecx, %ecx
    00000125: 	jmp	.Ltmp1523 # Offset: 293
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or6IjET_PKS0_iS0_"

Binary Function "_Z7bit_or7IjET_PKS0_iS0_" after disassembly {
  Number      : 220
  State       : disassembled
  Address     : 0x15b10
  Size        : 0x12a
  MaxSize     : 0x130
  Offset      : 0x15b10
  Section     : .text
  Orc Section : .local.text._Z7bit_or7IjET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0219:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r9d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp1524 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %ecx
    00000015: 	movd	%edx, %xmm2
    00000019: 	xorl	%eax, %eax
    0000001b: 	shrl	$0x2, %ecx
    0000001e: 	pshufd	$0x0, %xmm2, %xmm0
    00000023: 	addl	$0x1, %ecx
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1525:
    00000030: 	movq	%rax, %rdx
    00000033: 	addq	$0x1, %rax
    00000037: 	shlq	$0x4, %rdx
    0000003b: 	movdqu	(%rdi,%rdx), %xmm1
    00000040: 	por	%xmm1, %xmm0
    00000044: 	cmpl	%eax, %ecx
    00000046: 	ja	.Ltmp1525 # Offset: 70
    00000048: 	pshufd	$0x55, %xmm0, %xmm1
    0000004d: 	movd	%xmm0, %eax
    00000051: 	shll	$0x2, %ecx
    00000054: 	movd	%xmm1, %r10d
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	punpckhdq	%xmm0, %xmm1
    00000061: 	pshufd	$0xff, %xmm0, %xmm0
    00000066: 	movd	%xmm1, %edx
    0000006a: 	orl	%edx, %r10d
    0000006d: 	movd	%xmm0, %edx
    00000071: 	orl	%edx, %r10d
.Ltmp1530:
    00000074: 	cmpl	%ecx, %r9d
    00000077: 	jle	.Ltmp1526 # Offset: 119
    0000007d: 	movl	%r9d, %r11d
    00000080: 	subl	%ecx, %r11d
    00000083: 	leal	-0x1(%r11), %edx
    00000087: 	cmpl	$0x2, %edx
    0000008a: 	jbe	.Ltmp1527 # Offset: 138
    0000008c: 	movslq	%ecx, %rdx
    0000008f: 	pxor	%xmm0, %xmm0
    00000093: 	leaq	(%rdi,%rdx,4), %rsi
    00000097: 	movl	%r11d, %edx
    0000009a: 	shrl	$0x2, %edx
    0000009d: 	leal	-0x1(%rdx), %r8d
    000000a1: 	leaq	0x10(%rsi), %rdx
    000000a5: 	shlq	$0x4, %r8
    000000a9: 	addq	%rdx, %r8
    000000ac: 	jmp	.Ltmp1528 # Offset: 172
    000000ae: 	nop # Size: 2
.Ltmp1529:
    000000b0: 	addq	$0x10, %rdx
.Ltmp1528:
    000000b4: 	movdqu	(%rsi), %xmm1
    000000b8: 	movq	%rdx, %rsi
    000000bb: 	por	%xmm1, %xmm0
    000000bf: 	cmpq	%rdx, %r8
    000000c2: 	jne	.Ltmp1529 # Offset: 194
    000000c4: 	movdqa	%xmm0, %xmm1
    000000c8: 	psrldq	$0x8, %xmm1
    000000cd: 	por	%xmm1, %xmm0
    000000d1: 	movdqa	%xmm0, %xmm1
    000000d5: 	psrldq	$0x4, %xmm1
    000000da: 	por	%xmm1, %xmm0
    000000de: 	movd	%xmm0, %edx
    000000e2: 	orl	%edx, %eax
    000000e4: 	movl	%r11d, %edx
    000000e7: 	andl	$-0x4, %edx
    000000ea: 	addl	%edx, %ecx
    000000ec: 	cmpl	%r11d, %edx
    000000ef: 	je	.Ltmp1526 # Offset: 239
.Ltmp1527:
    000000f1: 	movslq	%ecx, %rdx
    000000f4: 	leaq	(,%rdx,4), %rsi
    000000fc: 	orl	(%rdi,%rdx,4), %eax
    000000ff: 	leal	0x1(%rcx), %edx
    00000102: 	cmpl	%edx, %r9d
    00000105: 	jle	.Ltmp1526 # Offset: 261
    00000107: 	addl	$0x2, %ecx
    0000010a: 	orl	0x4(%rdi,%rsi), %eax
    0000010e: 	cmpl	%r9d, %ecx
    00000111: 	jge	.Ltmp1526 # Offset: 273
    00000113: 	orl	0x8(%rdi,%rsi), %eax
.Ltmp1526:
    00000117: 	orl	%r10d, %eax
    0000011a: 	retq # Offset: 282
    0000011b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1524:
    00000120: 	movl	%edx, %r10d
    00000123: 	xorl	%ecx, %ecx
    00000125: 	jmp	.Ltmp1530 # Offset: 293
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or7IjET_PKS0_iS0_"

Binary Function "_Z7bit_or8IjET_PKS0_iS0_" after disassembly {
  Number      : 221
  State       : disassembled
  Address     : 0x15c40
  Size        : 0x159
  MaxSize     : 0x160
  Offset      : 0x15c40
  Section     : .text
  Orc Section : .local.text._Z7bit_or8IjET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0220:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x7, %esi
    0000000c: 	jle	.Ltmp1531 # Offset: 12
    00000012: 	movd	%edx, %xmm5
    00000016: 	leal	-0x8(%rsi), %ecx
    00000019: 	movq	%rdi, %rax
    0000001c: 	xorl	%edx, %edx
    0000001e: 	shrl	$0x3, %ecx
    00000021: 	pshufd	$0x0, %xmm5, %xmm0
    00000026: 	addl	$0x1, %ecx
    00000029: 	movdqa	%xmm0, %xmm1
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp1532:
    00000030: 	movdqu	(%rax), %xmm3
    00000034: 	movdqu	0x10(%rax), %xmm4
    00000039: 	addl	$0x1, %edx
    0000003c: 	addq	$0x20, %rax
    00000040: 	por	%xmm3, %xmm0
    00000044: 	por	%xmm4, %xmm1
    00000048: 	cmpl	%edx, %ecx
    0000004a: 	ja	.Ltmp1532 # Offset: 74
    0000004c: 	movdqa	%xmm0, %xmm2
    00000050: 	leal	(,%rcx,8), %esi
    00000057: 	movd	%xmm0, %eax
    0000005b: 	punpckhdq	%xmm0, %xmm2
    0000005f: 	movd	%xmm2, %ecx
    00000063: 	pshufd	$0x55, %xmm0, %xmm2
    00000068: 	pshufd	$0xff, %xmm0, %xmm0
    0000006d: 	movd	%xmm2, %edx
    00000071: 	orl	%edx, %ecx
    00000073: 	movd	%xmm0, %edx
    00000077: 	pshufd	$0x55, %xmm1, %xmm0
    0000007c: 	orl	%edx, %ecx
    0000007e: 	movd	%xmm1, %edx
    00000082: 	orl	%edx, %ecx
    00000084: 	movd	%xmm0, %edx
    00000088: 	movdqa	%xmm1, %xmm0
    0000008c: 	punpckhdq	%xmm1, %xmm0
    00000090: 	orl	%edx, %ecx
    00000092: 	pshufd	$0xff, %xmm1, %xmm1
    00000097: 	movd	%xmm0, %edx
    0000009b: 	orl	%edx, %ecx
    0000009d: 	movd	%xmm1, %edx
    000000a1: 	orl	%edx, %ecx
.Ltmp1537:
    000000a3: 	cmpl	%esi, %r8d
    000000a6: 	jle	.Ltmp1533 # Offset: 166
    000000ac: 	movl	%r8d, %r11d
    000000af: 	subl	%esi, %r11d
    000000b2: 	leal	-0x1(%r11), %edx
    000000b6: 	cmpl	$0x2, %edx
    000000b9: 	jbe	.Ltmp1534 # Offset: 185
    000000bb: 	movslq	%esi, %rdx
    000000be: 	pxor	%xmm0, %xmm0
    000000c2: 	leaq	(%rdi,%rdx,4), %r9
    000000c6: 	movl	%r11d, %edx
    000000c9: 	shrl	$0x2, %edx
    000000cc: 	leal	-0x1(%rdx), %r10d
    000000d0: 	leaq	0x10(%r9), %rdx
    000000d4: 	shlq	$0x4, %r10
    000000d8: 	addq	%rdx, %r10
    000000db: 	jmp	.Ltmp1535 # Offset: 219
    000000dd: 	nopl	(%rax) # Size: 3
.Ltmp1536:
    000000e0: 	addq	$0x10, %rdx
.Ltmp1535:
    000000e4: 	movdqu	(%r9), %xmm1
    000000e9: 	movq	%rdx, %r9
    000000ec: 	por	%xmm1, %xmm0
    000000f0: 	cmpq	%rdx, %r10
    000000f3: 	jne	.Ltmp1536 # Offset: 243
    000000f5: 	movdqa	%xmm0, %xmm1
    000000f9: 	psrldq	$0x8, %xmm1
    000000fe: 	por	%xmm1, %xmm0
    00000102: 	movdqa	%xmm0, %xmm1
    00000106: 	psrldq	$0x4, %xmm1
    0000010b: 	por	%xmm1, %xmm0
    0000010f: 	movd	%xmm0, %edx
    00000113: 	orl	%edx, %eax
    00000115: 	movl	%r11d, %edx
    00000118: 	andl	$-0x4, %edx
    0000011b: 	addl	%edx, %esi
    0000011d: 	cmpl	%r11d, %edx
    00000120: 	je	.Ltmp1533 # Offset: 288
.Ltmp1534:
    00000122: 	movslq	%esi, %rdx
    00000125: 	leaq	(,%rdx,4), %r9
    0000012d: 	orl	(%rdi,%rdx,4), %eax
    00000130: 	leal	0x1(%rsi), %edx
    00000133: 	cmpl	%edx, %r8d
    00000136: 	jle	.Ltmp1533 # Offset: 310
    00000138: 	addl	$0x2, %esi
    0000013b: 	orl	0x4(%rdi,%r9), %eax
    00000140: 	cmpl	%r8d, %esi
    00000143: 	jge	.Ltmp1533 # Offset: 323
    00000145: 	orl	0x8(%rdi,%r9), %eax
.Ltmp1533:
    0000014a: 	orl	%ecx, %eax
    0000014c: 	retq # Offset: 332
    0000014d: 	nopl	(%rax) # Size: 3
.Ltmp1531:
    00000150: 	movl	%edx, %ecx
    00000152: 	xorl	%esi, %esi
    00000154: 	jmp	.Ltmp1537 # Offset: 340
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or8IjET_PKS0_iS0_"

Binary Function "_Z8bit_xor1IjET_PKS0_iS0_" after disassembly {
  Number      : 222
  State       : disassembled
  Address     : 0x15da0
  Size        : 0xa7
  MaxSize     : 0xb0
  Offset      : 0x15da0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor1IjET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0221:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp1538 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0x2, %eax
    00000014: 	jbe	.Ltmp1539 # Offset: 20
    0000001a: 	shrl	$0x2, %esi
    0000001d: 	movq	%rdi, %rax
    00000020: 	pxor	%xmm0, %xmm0
    00000024: 	subl	$0x1, %esi
    00000027: 	shlq	$0x4, %rsi
    0000002b: 	leaq	0x10(%rdi,%rsi), %rsi
.Ltmp1540:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	addq	$0x10, %rax
    00000038: 	pxor	%xmm2, %xmm0
    0000003c: 	cmpq	%rsi, %rax
    0000003f: 	jne	.Ltmp1540 # Offset: 63
    00000041: 	movdqa	%xmm0, %xmm1
    00000045: 	psrldq	$0x8, %xmm1
    0000004a: 	pxor	%xmm1, %xmm0
    0000004e: 	movdqa	%xmm0, %xmm1
    00000052: 	psrldq	$0x4, %xmm1
    00000057: 	pxor	%xmm1, %xmm0
    0000005b: 	movd	%xmm0, %eax
    0000005f: 	xorl	%edx, %eax
    00000061: 	movl	%ecx, %edx
    00000063: 	andl	$-0x4, %edx
    00000066: 	testb	$0x3, %cl
    00000069: 	je	.Ltmp1541 # Offset: 105
.Ltmp1543:
    0000006b: 	movslq	%edx, %rsi
    0000006e: 	leaq	(,%rsi,4), %r8
    00000076: 	xorl	(%rdi,%rsi,4), %eax
    00000079: 	leal	0x1(%rdx), %esi
    0000007c: 	cmpl	%esi, %ecx
    0000007e: 	jle	.Ltmp1542 # Offset: 126
    00000080: 	addl	$0x2, %edx
    00000083: 	xorl	0x4(%rdi,%r8), %eax
    00000088: 	cmpl	%edx, %ecx
    0000008a: 	jle	.Ltmp1542 # Offset: 138
    0000008c: 	xorl	0x8(%rdi,%r8), %eax
    00000091: 	retq # Offset: 145
    00000092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1538:
    00000098: 	movl	%edx, %eax
.Ltmp1542:
    0000009a: 	retq # Offset: 154
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1541:
    000000a0: 	retq # Offset: 160
.Ltmp1539:
    000000a1: 	movl	%edx, %eax
    000000a3: 	xorl	%edx, %edx
    000000a5: 	jmp	.Ltmp1543 # Offset: 165
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor1IjET_PKS0_iS0_"

Binary Function "_Z8bit_xor2IjET_PKS0_iS0_" after disassembly {
  Number      : 223
  State       : disassembled
  Address     : 0x15e50
  Size        : 0xb5
  MaxSize     : 0xc0
  Offset      : 0x15e50
  Section     : .text
  Orc Section : .local.text._Z8bit_xor2IjET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0222:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movq	%rdi, %rcx
    0000000a: 	shlq	$0x2, %rsi
    0000000e: 	leaq	(%rdi,%rsi), %r8
    00000012: 	cmpq	%r8, %rdi
    00000015: 	je	.Ltmp1544 # Offset: 21
    0000001b: 	subq	$0x4, %rsi
    0000001f: 	movq	%rdi, %rax
    00000022: 	movq	%rsi, %rdi
    00000025: 	shrq	$0x2, %rdi
    00000029: 	addq	$0x1, %rdi
    0000002d: 	cmpq	$0x8, %rsi
    00000031: 	jbe	.Ltmp1545 # Offset: 49
    00000033: 	movq	%rdi, %rsi
    00000036: 	pxor	%xmm0, %xmm0
    0000003a: 	shrq	$0x2, %rsi
    0000003e: 	shlq	$0x4, %rsi
    00000042: 	addq	%rcx, %rsi
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp1546:
    00000048: 	movdqu	(%rax), %xmm2
    0000004c: 	addq	$0x10, %rax
    00000050: 	pxor	%xmm2, %xmm0
    00000054: 	cmpq	%rax, %rsi
    00000057: 	jne	.Ltmp1546 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	psrldq	$0x8, %xmm1
    00000062: 	pxor	%xmm1, %xmm0
    00000066: 	movdqa	%xmm0, %xmm1
    0000006a: 	psrldq	$0x4, %xmm1
    0000006f: 	pxor	%xmm1, %xmm0
    00000073: 	movd	%xmm0, %eax
    00000077: 	xorl	%edx, %eax
    00000079: 	movq	%rdi, %rdx
    0000007c: 	andq	$-0x4, %rdx
    00000080: 	leaq	(%rcx,%rdx,4), %rcx
    00000084: 	cmpq	%rdx, %rdi
    00000087: 	je	.Ltmp1547 # Offset: 135
.Ltmp1549:
    00000089: 	leaq	0x4(%rcx), %rdx
    0000008d: 	xorl	(%rcx), %eax
    0000008f: 	cmpq	%rdx, %r8
    00000092: 	je	.Ltmp1548 # Offset: 146
    00000094: 	leaq	0x8(%rcx), %rdx
    00000098: 	xorl	0x4(%rcx), %eax
    0000009b: 	cmpq	%rdx, %r8
    0000009e: 	je	.Ltmp1548 # Offset: 158
    000000a0: 	xorl	0x8(%rcx), %eax
    000000a3: 	retq # Offset: 163
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp1544:
    000000a8: 	movl	%edx, %eax
.Ltmp1548:
    000000aa: 	retq # Offset: 170
    000000ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1547:
    000000b0: 	retq # Offset: 176
.Ltmp1545:
    000000b1: 	movl	%edx, %eax
    000000b3: 	jmp	.Ltmp1549 # Offset: 179
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor2IjET_PKS0_iS0_"

Binary Function "_Z8bit_xor3IjET_PKS0_iS0_" after disassembly {
  Number      : 224
  State       : disassembled
  Address     : 0x15f10
  Size        : 0xf4
  MaxSize     : 0x100
  Offset      : 0x15f10
  Section     : .text
  Orc Section : .local.text._Z8bit_xor3IjET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0223:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %r9d
    00000008: 	testl	%r9d, %r9d
    0000000b: 	jle	.Ltmp1550 # Offset: 11
    00000011: 	leal	-0x2(%rsi), %eax
    00000014: 	movl	%eax, %ecx
    00000016: 	shrl	%ecx
    00000018: 	addl	$0x1, %ecx
    0000001b: 	cmpl	$0x5, %eax
    0000001e: 	jbe	.Ltmp1551 # Offset: 30
    00000024: 	movl	%ecx, %r8d
    00000027: 	movq	%rdi, %rax
    0000002a: 	pxor	%xmm2, %xmm2
    0000002e: 	shrl	$0x2, %r8d
    00000032: 	subl	$0x1, %r8d
    00000036: 	shlq	$0x5, %r8
    0000003a: 	leaq	0x20(%rdi,%r8), %r8
    0000003f: 	nop # Size: 1
.Ltmp1552:
    00000040: 	movdqu	(%rax), %xmm0
    00000044: 	movdqu	0x10(%rax), %xmm3
    00000049: 	addq	$0x20, %rax
    0000004d: 	movdqa	%xmm0, %xmm1
    00000051: 	shufps	$0xdd, %xmm3, %xmm0
    00000055: 	shufps	$0x88, %xmm3, %xmm1
    00000059: 	pxor	%xmm1, %xmm0
    0000005d: 	pxor	%xmm0, %xmm2
    00000061: 	cmpq	%rax, %r8
    00000064: 	jne	.Ltmp1552 # Offset: 100
    00000066: 	movdqa	%xmm2, %xmm0
    0000006a: 	movl	%ecx, %r8d
    0000006d: 	psrldq	$0x8, %xmm0
    00000072: 	andl	$-0x4, %r8d
    00000076: 	pxor	%xmm0, %xmm2
    0000007a: 	movdqa	%xmm2, %xmm0
    0000007e: 	psrldq	$0x4, %xmm0
    00000083: 	pxor	%xmm0, %xmm2
    00000087: 	movd	%xmm2, %eax
    0000008b: 	xorl	%edx, %eax
    0000008d: 	leal	(%r8,%r8), %edx
    00000091: 	cmpl	%r8d, %ecx
    00000094: 	je	.Ltmp1553 # Offset: 148
.Ltmp1556:
    00000096: 	movslq	%edx, %r10
    00000099: 	xorl	(%rdi,%r10,4), %eax
    0000009d: 	leaq	(,%r10,4), %r8
    000000a5: 	xorl	0x4(%rdi,%r10,4), %eax
    000000aa: 	leal	0x2(%rdx), %r10d
    000000ae: 	cmpl	%r9d, %r10d
    000000b1: 	jge	.Ltmp1553 # Offset: 177
    000000b3: 	movl	0x8(%rdi,%r8), %r10d
    000000b8: 	addl	$0x4, %edx
    000000bb: 	xorl	0xc(%rdi,%r8), %r10d
    000000c0: 	xorl	%r10d, %eax
    000000c3: 	cmpl	%edx, %r9d
    000000c6: 	jle	.Ltmp1553 # Offset: 198
    000000c8: 	movl	0x14(%rdi,%r8), %edx
    000000cd: 	xorl	0x10(%rdi,%r8), %edx
    000000d2: 	xorl	%edx, %eax
.Ltmp1553:
    000000d4: 	addl	%ecx, %ecx
.Ltmp1555:
    000000d6: 	cmpl	%esi, %ecx
    000000d8: 	jge	.Ltmp1554 # Offset: 216
    000000da: 	movslq	%ecx, %rcx
    000000dd: 	xorl	(%rdi,%rcx,4), %eax
.Ltmp1554:
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp1550:
    000000e8: 	movl	%edx, %eax
    000000ea: 	xorl	%ecx, %ecx
    000000ec: 	jmp	.Ltmp1555 # Offset: 236
.Ltmp1551:
    000000ee: 	movl	%edx, %eax
    000000f0: 	xorl	%edx, %edx
    000000f2: 	jmp	.Ltmp1556 # Offset: 242
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor3IjET_PKS0_iS0_"

Binary Function "_Z8bit_xor4IjET_PKS0_iS0_" after disassembly {
  Number      : 225
  State       : disassembled
  Address     : 0x16010
  Size        : 0x188
  MaxSize     : 0x190
  Offset      : 0x16010
  Section     : .text
  Orc Section : .local.text._Z8bit_xor4IjET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0224:
    00000000: 	endbr64
    00000004: 	leal	-0x3(%rsi), %r9d
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%esi, %edi
    0000000d: 	testl	%r9d, %r9d
    00000010: 	jle	.Ltmp1557 # Offset: 16
    00000016: 	leal	-0x4(%rsi), %eax
    00000019: 	movl	%eax, %esi
    0000001b: 	shrl	$0x2, %esi
    0000001e: 	addl	$0x1, %esi
    00000021: 	cmpl	$0xb, %eax
    00000024: 	jbe	.Ltmp1558 # Offset: 36
    0000002a: 	movl	%esi, %r8d
    0000002d: 	movq	%rcx, %rax
    00000030: 	pxor	%xmm4, %xmm4
    00000034: 	shrl	$0x2, %r8d
    00000038: 	subl	$0x1, %r8d
    0000003c: 	shlq	$0x6, %r8
    00000040: 	leaq	0x40(%rcx,%r8), %r8
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp1559:
    00000048: 	movdqu	(%rax), %xmm0
    0000004c: 	movdqu	0x10(%rax), %xmm6
    00000051: 	addq	$0x40, %rax
    00000055: 	movdqu	-0x20(%rax), %xmm2
    0000005a: 	movdqa	%xmm0, %xmm3
    0000005e: 	shufps	$0xdd, %xmm6, %xmm0
    00000062: 	movdqa	%xmm0, %xmm1
    00000066: 	shufps	$0x88, %xmm6, %xmm3
    0000006a: 	movdqu	-0x10(%rax), %xmm6
    0000006f: 	movdqa	%xmm2, %xmm5
    00000073: 	shufps	$0xdd, %xmm6, %xmm2
    00000077: 	shufps	$0x88, %xmm2, %xmm1
    0000007b: 	shufps	$0xdd, %xmm2, %xmm0
    0000007f: 	pxor	%xmm1, %xmm0
    00000083: 	movdqa	%xmm3, %xmm1
    00000087: 	shufps	$0x88, %xmm6, %xmm5
    0000008b: 	shufps	$0xdd, %xmm5, %xmm3
    0000008f: 	shufps	$0x88, %xmm5, %xmm1
    00000093: 	pxor	%xmm3, %xmm1
    00000097: 	pxor	%xmm1, %xmm0
    0000009b: 	pxor	%xmm0, %xmm4
    0000009f: 	cmpq	%rax, %r8
    000000a2: 	jne	.Ltmp1559 # Offset: 162
    000000a4: 	movdqa	%xmm4, %xmm0
    000000a8: 	psrldq	$0x8, %xmm0
    000000ad: 	pxor	%xmm0, %xmm4
    000000b1: 	movdqa	%xmm4, %xmm0
    000000b5: 	psrldq	$0x4, %xmm0
    000000ba: 	pxor	%xmm0, %xmm4
    000000be: 	movd	%xmm4, %eax
    000000c2: 	xorl	%edx, %eax
    000000c4: 	movl	%esi, %edx
    000000c6: 	andl	$-0x4, %edx
    000000c9: 	leal	(,%rdx,4), %r10d
    000000d1: 	cmpl	%esi, %edx
    000000d3: 	je	.Ltmp1560 # Offset: 211
.Ltmp1563:
    000000d5: 	movslq	%r10d, %r8
    000000d8: 	xorl	(%rcx,%r8,4), %eax
    000000dc: 	leaq	(,%r8,4), %rdx
    000000e4: 	xorl	0x4(%rcx,%r8,4), %eax
    000000e9: 	xorl	0x8(%rcx,%r8,4), %eax
    000000ee: 	xorl	0xc(%rcx,%r8,4), %eax
    000000f3: 	leal	0x4(%r10), %r8d
    000000f7: 	cmpl	%r8d, %r9d
    000000fa: 	jle	.Ltmp1560 # Offset: 250
    000000fc: 	movl	0x14(%rcx,%rdx), %r8d
    00000101: 	addl	$0x8, %r10d
    00000105: 	xorl	0x18(%rcx,%rdx), %r8d
    0000010a: 	xorl	0x10(%rcx,%rdx), %r8d
    0000010f: 	xorl	0x1c(%rcx,%rdx), %r8d
    00000114: 	xorl	%r8d, %eax
    00000117: 	cmpl	%r10d, %r9d
    0000011a: 	jle	.Ltmp1560 # Offset: 282
    0000011c: 	movl	0x28(%rcx,%rdx), %r8d
    00000121: 	xorl	0x24(%rcx,%rdx), %r8d
    00000126: 	xorl	0x20(%rcx,%rdx), %r8d
    0000012b: 	xorl	0x2c(%rcx,%rdx), %r8d
    00000130: 	xorl	%r8d, %eax
.Ltmp1560:
    00000133: 	leal	(,%rsi,4), %edx
.Ltmp1562:
    0000013a: 	cmpl	%edx, %edi
    0000013c: 	jle	.Ltmp1561 # Offset: 316
    0000013e: 	movslq	%edx, %rsi
    00000141: 	leaq	(,%rsi,4), %r8
    00000149: 	xorl	(%rcx,%rsi,4), %eax
    0000014c: 	leal	0x1(%rdx), %esi
    0000014f: 	cmpl	%edi, %esi
    00000151: 	jge	.Ltmp1561 # Offset: 337
    00000153: 	leal	0x2(%rdx), %esi
    00000156: 	xorl	0x4(%rcx,%r8), %eax
    0000015b: 	cmpl	%esi, %edi
    0000015d: 	jle	.Ltmp1561 # Offset: 349
    0000015f: 	addl	$0x3, %edx
    00000162: 	xorl	0x8(%rcx,%r8), %eax
    00000167: 	cmpl	%edx, %edi
    00000169: 	jle	.Ltmp1561 # Offset: 361
    0000016b: 	xorl	0xc(%rcx,%r8), %eax
.Ltmp1561:
    00000170: 	retq # Offset: 368
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp1557:
    00000178: 	movl	%edx, %eax
    0000017a: 	xorl	%edx, %edx
    0000017c: 	jmp	.Ltmp1562 # Offset: 380
.Ltmp1558:
    0000017e: 	movl	%edx, %eax
    00000180: 	xorl	%r10d, %r10d
    00000183: 	jmp	.Ltmp1563 # Offset: 387
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor4IjET_PKS0_iS0_"

Binary Function "_Z8bit_xor5IjET_PKS0_iS0_" after disassembly {
  Number      : 226
  State       : disassembled
  Address     : 0x161a0
  Size        : 0x15b
  MaxSize     : 0x160
  Offset      : 0x161a0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor5IjET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0225:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %r9d
    0000000a: 	movl	%edx, %eax
    0000000c: 	cmpl	$0x1, %esi
    0000000f: 	jle	.Ltmp1564 # Offset: 15
    00000015: 	leal	-0x2(%rsi), %edx
    00000018: 	movl	%edx, %r10d
    0000001b: 	shrl	%r10d
    0000001e: 	addl	$0x1, %r10d
    00000022: 	cmpl	$0x1, %edx
    00000025: 	jbe	.Ltmp1565 # Offset: 37
    0000002b: 	movl	%r10d, %edx
    0000002e: 	movd	%eax, %xmm0
    00000032: 	movq	%rdi, %rax
    00000035: 	shrl	%edx
    00000037: 	subl	$0x1, %edx
    0000003a: 	shlq	$0x4, %rdx
    0000003e: 	leaq	0x10(%rdi,%rdx), %rdx
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1566:
    00000048: 	movdqu	(%rax), %xmm2
    0000004c: 	addq	$0x10, %rax
    00000050: 	pxor	%xmm2, %xmm0
    00000054: 	cmpq	%rax, %rdx
    00000057: 	jne	.Ltmp1566 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	movd	%xmm0, %eax
    00000061: 	movl	%r10d, %edi
    00000064: 	punpckhdq	%xmm0, %xmm1
    00000068: 	andl	$-0x2, %edi
    0000006b: 	movd	%xmm1, %edx
    0000006f: 	pshufd	$0x55, %xmm0, %xmm1
    00000074: 	pshufd	$0xff, %xmm0, %xmm0
    00000079: 	xorl	%edx, %eax
    0000007b: 	movd	%xmm1, %esi
    0000007f: 	movd	%xmm0, %edx
    00000083: 	xorl	%edx, %esi
    00000085: 	leal	(%rdi,%rdi), %edx
    00000088: 	cmpl	%edi, %r10d
    0000008b: 	je	.Ltmp1567 # Offset: 139
.Ltmp1573:
    0000008d: 	movslq	%edx, %rdx
    00000090: 	xorl	(%rcx,%rdx,4), %eax
    00000093: 	xorl	0x4(%rcx,%rdx,4), %esi
.Ltmp1567:
    00000097: 	addl	%r10d, %r10d
.Ltmp1572:
    0000009a: 	cmpl	%r10d, %r9d
    0000009d: 	jle	.Ltmp1568 # Offset: 157
    000000a3: 	movl	%r9d, %r11d
    000000a6: 	subl	%r10d, %r11d
    000000a9: 	leal	-0x1(%r11), %edx
    000000ad: 	cmpl	$0x2, %edx
    000000b0: 	jbe	.Ltmp1569 # Offset: 176
    000000b2: 	movslq	%r10d, %rdx
    000000b5: 	pxor	%xmm0, %xmm0
    000000b9: 	leaq	(%rcx,%rdx,4), %rdi
    000000bd: 	movl	%r11d, %edx
    000000c0: 	shrl	$0x2, %edx
    000000c3: 	leal	-0x1(%rdx), %r8d
    000000c7: 	leaq	0x10(%rdi), %rdx
    000000cb: 	shlq	$0x4, %r8
    000000cf: 	addq	%rdx, %r8
    000000d2: 	jmp	.Ltmp1570 # Offset: 210
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp1571:
    000000d8: 	addq	$0x10, %rdx
.Ltmp1570:
    000000dc: 	movdqu	(%rdi), %xmm1
    000000e0: 	movq	%rdx, %rdi
    000000e3: 	pxor	%xmm1, %xmm0
    000000e7: 	cmpq	%rdx, %r8
    000000ea: 	jne	.Ltmp1571 # Offset: 234
    000000ec: 	movdqa	%xmm0, %xmm1
    000000f0: 	psrldq	$0x8, %xmm1
    000000f5: 	pxor	%xmm1, %xmm0
    000000f9: 	movdqa	%xmm0, %xmm1
    000000fd: 	psrldq	$0x4, %xmm1
    00000102: 	pxor	%xmm1, %xmm0
    00000106: 	movd	%xmm0, %edx
    0000010a: 	xorl	%edx, %eax
    0000010c: 	movl	%r11d, %edx
    0000010f: 	andl	$-0x4, %edx
    00000112: 	addl	%edx, %r10d
    00000115: 	cmpl	%r11d, %edx
    00000118: 	je	.Ltmp1568 # Offset: 280
.Ltmp1569:
    0000011a: 	movslq	%r10d, %rdx
    0000011d: 	leaq	(,%rdx,4), %rdi
    00000125: 	xorl	(%rcx,%rdx,4), %eax
    00000128: 	leal	0x1(%r10), %edx
    0000012c: 	cmpl	%edx, %r9d
    0000012f: 	jle	.Ltmp1568 # Offset: 303
    00000131: 	addl	$0x2, %r10d
    00000135: 	xorl	0x4(%rcx,%rdi), %eax
    00000139: 	cmpl	%r10d, %r9d
    0000013c: 	jle	.Ltmp1568 # Offset: 316
    0000013e: 	xorl	0x8(%rcx,%rdi), %eax
.Ltmp1568:
    00000142: 	xorl	%esi, %eax
    00000144: 	retq # Offset: 324
    00000145: 	nopl	(%rax) # Size: 3
.Ltmp1564:
    00000148: 	xorl	%r10d, %r10d
    0000014b: 	xorl	%esi, %esi
    0000014d: 	jmp	.Ltmp1572 # Offset: 333
.Ltmp1565:
    00000152: 	xorl	%edx, %edx
    00000154: 	xorl	%esi, %esi
    00000156: 	jmp	.Ltmp1573 # Offset: 342
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor5IjET_PKS0_iS0_"

Binary Function "_Z8bit_xor6IjET_PKS0_iS0_" after disassembly {
  Number      : 227
  State       : disassembled
  Address     : 0x16300
  Size        : 0x12a
  MaxSize     : 0x130
  Offset      : 0x16300
  Section     : .text
  Orc Section : .local.text._Z8bit_xor6IjET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0226:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r9d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp1574 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %ecx
    00000015: 	movd	%edx, %xmm0
    00000019: 	xorl	%eax, %eax
    0000001b: 	shrl	$0x2, %ecx
    0000001e: 	addl	$0x1, %ecx
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp1575:
    00000028: 	movq	%rax, %rdx
    0000002b: 	addq	$0x1, %rax
    0000002f: 	shlq	$0x4, %rdx
    00000033: 	movdqu	(%rdi,%rdx), %xmm1
    00000038: 	pxor	%xmm1, %xmm0
    0000003c: 	cmpl	%eax, %ecx
    0000003e: 	ja	.Ltmp1575 # Offset: 62
    00000040: 	pshufd	$0x55, %xmm0, %xmm1
    00000045: 	movd	%xmm0, %eax
    00000049: 	shll	$0x2, %ecx
    0000004c: 	movd	%xmm1, %r10d
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	punpckhdq	%xmm0, %xmm1
    00000059: 	pshufd	$0xff, %xmm0, %xmm0
    0000005e: 	movd	%xmm1, %edx
    00000062: 	xorl	%edx, %r10d
    00000065: 	movd	%xmm0, %edx
    00000069: 	xorl	%edx, %r10d
.Ltmp1580:
    0000006c: 	cmpl	%ecx, %r9d
    0000006f: 	jle	.Ltmp1576 # Offset: 111
    00000075: 	movl	%r9d, %r11d
    00000078: 	subl	%ecx, %r11d
    0000007b: 	leal	-0x1(%r11), %edx
    0000007f: 	cmpl	$0x2, %edx
    00000082: 	jbe	.Ltmp1577 # Offset: 130
    00000084: 	movslq	%ecx, %rdx
    00000087: 	pxor	%xmm0, %xmm0
    0000008b: 	leaq	(%rdi,%rdx,4), %rsi
    0000008f: 	movl	%r11d, %edx
    00000092: 	shrl	$0x2, %edx
    00000095: 	leal	-0x1(%rdx), %r8d
    00000099: 	leaq	0x10(%rsi), %rdx
    0000009d: 	shlq	$0x4, %r8
    000000a1: 	addq	%rdx, %r8
    000000a4: 	jmp	.Ltmp1578 # Offset: 164
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1579:
    000000b0: 	addq	$0x10, %rdx
.Ltmp1578:
    000000b4: 	movdqu	(%rsi), %xmm1
    000000b8: 	movq	%rdx, %rsi
    000000bb: 	pxor	%xmm1, %xmm0
    000000bf: 	cmpq	%rdx, %r8
    000000c2: 	jne	.Ltmp1579 # Offset: 194
    000000c4: 	movdqa	%xmm0, %xmm1
    000000c8: 	psrldq	$0x8, %xmm1
    000000cd: 	pxor	%xmm1, %xmm0
    000000d1: 	movdqa	%xmm0, %xmm1
    000000d5: 	psrldq	$0x4, %xmm1
    000000da: 	pxor	%xmm1, %xmm0
    000000de: 	movd	%xmm0, %edx
    000000e2: 	xorl	%edx, %eax
    000000e4: 	movl	%r11d, %edx
    000000e7: 	andl	$-0x4, %edx
    000000ea: 	addl	%edx, %ecx
    000000ec: 	cmpl	%r11d, %edx
    000000ef: 	je	.Ltmp1576 # Offset: 239
.Ltmp1577:
    000000f1: 	movslq	%ecx, %rdx
    000000f4: 	leaq	(,%rdx,4), %rsi
    000000fc: 	xorl	(%rdi,%rdx,4), %eax
    000000ff: 	leal	0x1(%rcx), %edx
    00000102: 	cmpl	%edx, %r9d
    00000105: 	jle	.Ltmp1576 # Offset: 261
    00000107: 	addl	$0x2, %ecx
    0000010a: 	xorl	0x4(%rdi,%rsi), %eax
    0000010e: 	cmpl	%r9d, %ecx
    00000111: 	jge	.Ltmp1576 # Offset: 273
    00000113: 	xorl	0x8(%rdi,%rsi), %eax
.Ltmp1576:
    00000117: 	xorl	%r10d, %eax
    0000011a: 	retq # Offset: 282
    0000011b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1574:
    00000120: 	xorl	%r10d, %r10d
    00000123: 	xorl	%ecx, %ecx
    00000125: 	jmp	.Ltmp1580 # Offset: 293
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor6IjET_PKS0_iS0_"

Binary Function "_Z8bit_xor7IjET_PKS0_iS0_" after disassembly {
  Number      : 228
  State       : disassembled
  Address     : 0x16430
  Size        : 0x12a
  MaxSize     : 0x130
  Offset      : 0x16430
  Section     : .text
  Orc Section : .local.text._Z8bit_xor7IjET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0227:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r9d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp1581 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %ecx
    00000015: 	movd	%edx, %xmm0
    00000019: 	xorl	%eax, %eax
    0000001b: 	shrl	$0x2, %ecx
    0000001e: 	addl	$0x1, %ecx
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp1582:
    00000028: 	movq	%rax, %rdx
    0000002b: 	addq	$0x1, %rax
    0000002f: 	shlq	$0x4, %rdx
    00000033: 	movdqu	(%rdi,%rdx), %xmm1
    00000038: 	pxor	%xmm1, %xmm0
    0000003c: 	cmpl	%eax, %ecx
    0000003e: 	ja	.Ltmp1582 # Offset: 62
    00000040: 	pshufd	$0x55, %xmm0, %xmm1
    00000045: 	movd	%xmm0, %eax
    00000049: 	shll	$0x2, %ecx
    0000004c: 	movd	%xmm1, %r10d
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	punpckhdq	%xmm0, %xmm1
    00000059: 	pshufd	$0xff, %xmm0, %xmm0
    0000005e: 	movd	%xmm1, %edx
    00000062: 	xorl	%edx, %r10d
    00000065: 	movd	%xmm0, %edx
    00000069: 	xorl	%edx, %r10d
.Ltmp1587:
    0000006c: 	cmpl	%ecx, %r9d
    0000006f: 	jle	.Ltmp1583 # Offset: 111
    00000075: 	movl	%r9d, %r11d
    00000078: 	subl	%ecx, %r11d
    0000007b: 	leal	-0x1(%r11), %edx
    0000007f: 	cmpl	$0x2, %edx
    00000082: 	jbe	.Ltmp1584 # Offset: 130
    00000084: 	movslq	%ecx, %rdx
    00000087: 	pxor	%xmm0, %xmm0
    0000008b: 	leaq	(%rdi,%rdx,4), %rsi
    0000008f: 	movl	%r11d, %edx
    00000092: 	shrl	$0x2, %edx
    00000095: 	leal	-0x1(%rdx), %r8d
    00000099: 	leaq	0x10(%rsi), %rdx
    0000009d: 	shlq	$0x4, %r8
    000000a1: 	addq	%rdx, %r8
    000000a4: 	jmp	.Ltmp1585 # Offset: 164
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1586:
    000000b0: 	addq	$0x10, %rdx
.Ltmp1585:
    000000b4: 	movdqu	(%rsi), %xmm1
    000000b8: 	movq	%rdx, %rsi
    000000bb: 	pxor	%xmm1, %xmm0
    000000bf: 	cmpq	%rdx, %r8
    000000c2: 	jne	.Ltmp1586 # Offset: 194
    000000c4: 	movdqa	%xmm0, %xmm1
    000000c8: 	psrldq	$0x8, %xmm1
    000000cd: 	pxor	%xmm1, %xmm0
    000000d1: 	movdqa	%xmm0, %xmm1
    000000d5: 	psrldq	$0x4, %xmm1
    000000da: 	pxor	%xmm1, %xmm0
    000000de: 	movd	%xmm0, %edx
    000000e2: 	xorl	%edx, %eax
    000000e4: 	movl	%r11d, %edx
    000000e7: 	andl	$-0x4, %edx
    000000ea: 	addl	%edx, %ecx
    000000ec: 	cmpl	%r11d, %edx
    000000ef: 	je	.Ltmp1583 # Offset: 239
.Ltmp1584:
    000000f1: 	movslq	%ecx, %rdx
    000000f4: 	leaq	(,%rdx,4), %rsi
    000000fc: 	xorl	(%rdi,%rdx,4), %eax
    000000ff: 	leal	0x1(%rcx), %edx
    00000102: 	cmpl	%edx, %r9d
    00000105: 	jle	.Ltmp1583 # Offset: 261
    00000107: 	addl	$0x2, %ecx
    0000010a: 	xorl	0x4(%rdi,%rsi), %eax
    0000010e: 	cmpl	%r9d, %ecx
    00000111: 	jge	.Ltmp1583 # Offset: 273
    00000113: 	xorl	0x8(%rdi,%rsi), %eax
.Ltmp1583:
    00000117: 	xorl	%r10d, %eax
    0000011a: 	retq # Offset: 282
    0000011b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1581:
    00000120: 	xorl	%r10d, %r10d
    00000123: 	xorl	%ecx, %ecx
    00000125: 	jmp	.Ltmp1587 # Offset: 293
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor7IjET_PKS0_iS0_"

Binary Function "_Z8bit_xor8IjET_PKS0_iS0_" after disassembly {
  Number      : 229
  State       : disassembled
  Address     : 0x16560
  Size        : 0x159
  MaxSize     : 0x160
  Offset      : 0x16560
  Section     : .text
  Orc Section : .local.text._Z8bit_xor8IjET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0228:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x7, %esi
    0000000c: 	jle	.Ltmp1588 # Offset: 12
    00000012: 	leal	-0x8(%rsi), %ecx
    00000015: 	movd	%edx, %xmm1
    00000019: 	movq	%rdi, %rax
    0000001c: 	xorl	%edx, %edx
    0000001e: 	shrl	$0x3, %ecx
    00000021: 	pxor	%xmm0, %xmm0
    00000025: 	addl	$0x1, %ecx
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1589:
    00000030: 	movdqu	(%rax), %xmm3
    00000034: 	movdqu	0x10(%rax), %xmm4
    00000039: 	addl	$0x1, %edx
    0000003c: 	addq	$0x20, %rax
    00000040: 	pxor	%xmm3, %xmm1
    00000044: 	pxor	%xmm4, %xmm0
    00000048: 	cmpl	%edx, %ecx
    0000004a: 	ja	.Ltmp1589 # Offset: 74
    0000004c: 	movdqa	%xmm1, %xmm2
    00000050: 	leal	(,%rcx,8), %esi
    00000057: 	movd	%xmm1, %eax
    0000005b: 	punpckhdq	%xmm1, %xmm2
    0000005f: 	movd	%xmm2, %ecx
    00000063: 	pshufd	$0x55, %xmm1, %xmm2
    00000068: 	pshufd	$0xff, %xmm1, %xmm1
    0000006d: 	movd	%xmm2, %edx
    00000071: 	xorl	%edx, %ecx
    00000073: 	movd	%xmm1, %edx
    00000077: 	pshufd	$0x55, %xmm0, %xmm1
    0000007c: 	xorl	%edx, %ecx
    0000007e: 	movd	%xmm0, %edx
    00000082: 	xorl	%edx, %ecx
    00000084: 	movd	%xmm1, %edx
    00000088: 	movdqa	%xmm0, %xmm1
    0000008c: 	punpckhdq	%xmm0, %xmm1
    00000090: 	xorl	%edx, %ecx
    00000092: 	pshufd	$0xff, %xmm0, %xmm0
    00000097: 	movd	%xmm1, %edx
    0000009b: 	xorl	%edx, %ecx
    0000009d: 	movd	%xmm0, %edx
    000000a1: 	xorl	%edx, %ecx
.Ltmp1594:
    000000a3: 	cmpl	%esi, %r8d
    000000a6: 	jle	.Ltmp1590 # Offset: 166
    000000ac: 	movl	%r8d, %r11d
    000000af: 	subl	%esi, %r11d
    000000b2: 	leal	-0x1(%r11), %edx
    000000b6: 	cmpl	$0x2, %edx
    000000b9: 	jbe	.Ltmp1591 # Offset: 185
    000000bb: 	movslq	%esi, %rdx
    000000be: 	pxor	%xmm0, %xmm0
    000000c2: 	leaq	(%rdi,%rdx,4), %r9
    000000c6: 	movl	%r11d, %edx
    000000c9: 	shrl	$0x2, %edx
    000000cc: 	leal	-0x1(%rdx), %r10d
    000000d0: 	leaq	0x10(%r9), %rdx
    000000d4: 	shlq	$0x4, %r10
    000000d8: 	addq	%rdx, %r10
    000000db: 	jmp	.Ltmp1592 # Offset: 219
    000000dd: 	nopl	(%rax) # Size: 3
.Ltmp1593:
    000000e0: 	addq	$0x10, %rdx
.Ltmp1592:
    000000e4: 	movdqu	(%r9), %xmm1
    000000e9: 	movq	%rdx, %r9
    000000ec: 	pxor	%xmm1, %xmm0
    000000f0: 	cmpq	%rdx, %r10
    000000f3: 	jne	.Ltmp1593 # Offset: 243
    000000f5: 	movdqa	%xmm0, %xmm1
    000000f9: 	psrldq	$0x8, %xmm1
    000000fe: 	pxor	%xmm1, %xmm0
    00000102: 	movdqa	%xmm0, %xmm1
    00000106: 	psrldq	$0x4, %xmm1
    0000010b: 	pxor	%xmm1, %xmm0
    0000010f: 	movd	%xmm0, %edx
    00000113: 	xorl	%edx, %eax
    00000115: 	movl	%r11d, %edx
    00000118: 	andl	$-0x4, %edx
    0000011b: 	addl	%edx, %esi
    0000011d: 	cmpl	%r11d, %edx
    00000120: 	je	.Ltmp1590 # Offset: 288
.Ltmp1591:
    00000122: 	movslq	%esi, %rdx
    00000125: 	leaq	(,%rdx,4), %r9
    0000012d: 	xorl	(%rdi,%rdx,4), %eax
    00000130: 	leal	0x1(%rsi), %edx
    00000133: 	cmpl	%edx, %r8d
    00000136: 	jle	.Ltmp1590 # Offset: 310
    00000138: 	addl	$0x2, %esi
    0000013b: 	xorl	0x4(%rdi,%r9), %eax
    00000140: 	cmpl	%r8d, %esi
    00000143: 	jge	.Ltmp1590 # Offset: 323
    00000145: 	xorl	0x8(%rdi,%r9), %eax
.Ltmp1590:
    0000014a: 	xorl	%ecx, %eax
    0000014c: 	retq # Offset: 332
    0000014d: 	nopl	(%rax) # Size: 3
.Ltmp1588:
    00000150: 	xorl	%ecx, %ecx
    00000152: 	xorl	%esi, %esi
    00000154: 	jmp	.Ltmp1594 # Offset: 340
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor8IjET_PKS0_iS0_"

Binary Function "_Z10logic_and1IjEbPKT_ib" after disassembly {
  Number      : 230
  State       : disassembled
  Address     : 0x166c0
  Size        : 0x33
  MaxSize     : 0x40
  Offset      : 0x166c0
  Section     : .text
  Orc Section : .local.text._Z10logic_and1IjEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0229:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp1595 # Offset: 8
    0000000a: 	testb	%dl, %dl
    0000000c: 	je	.Ltmp1595 # Offset: 12
    0000000e: 	leal	-0x1(%rsi), %edx
    00000011: 	leaq	0x4(%rdi,%rdx,4), %rdx
.Ltmp1597:
    00000016: 	movl	(%rdi), %ecx
    00000018: 	testl	%ecx, %ecx
    0000001a: 	je	.Ltmp1596 # Offset: 26
    0000001c: 	addq	$0x4, %rdi
    00000020: 	cmpq	%rdi, %rdx
    00000023: 	jne	.Ltmp1597 # Offset: 35
    00000025: 	retq # Offset: 37
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1596:
    00000030: 	xorl	%eax, %eax
.Ltmp1595:
    00000032: 	retq # Offset: 50
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and1IjEbPKT_ib"

Binary Function "_Z10logic_and2IjEbPKT_ib" after disassembly {
  Number      : 231
  State       : disassembled
  Address     : 0x16700
  Size        : 0x3b
  MaxSize     : 0x40
  Offset      : 0x16700
  Section     : .text
  Orc Section : .local.text._Z10logic_and2IjEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0230:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	leaq	(%rdi,%rsi,4), %rax
    0000000b: 	cmpq	%rax, %rdi
    0000000e: 	je	.Ltmp1598 # Offset: 14
    00000010: 	testb	%dl, %dl
    00000012: 	jne	.Ltmp1599 # Offset: 18
.Ltmp1600:
    00000014: 	jmp	.Ltmp1600 # Offset: 20
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1599:
    00000020: 	addq	$0x4, %rdi
    00000024: 	movl	-0x4(%rdi), %edx
    00000027: 	cmpq	%rdi, %rax
    0000002a: 	je	.Ltmp1601 # Offset: 42
    0000002c: 	testl	%edx, %edx
    0000002e: 	jne	.Ltmp1599 # Offset: 46
    00000030: 	jmp	.Ltmp1600 # Offset: 48
.Ltmp1598:
    00000032: 	movl	%edx, %eax
    00000034: 	retq # Offset: 52
.Ltmp1601:
    00000035: 	testl	%edx, %edx
    00000037: 	setne	%al
    0000003a: 	retq # Offset: 58
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and2IjEbPKT_ib"

Binary Function "_Z10logic_and3IjEbPKT_ib" after disassembly {
  Number      : 232
  State       : disassembled
  Address     : 0x16740
  Size        : 0x7a
  MaxSize     : 0x80
  Offset      : 0x16740
  Section     : .text
  Orc Section : .local.text._Z10logic_and3IjEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0231:
    00000000: 	endbr64
    00000004: 	cmpl	$0x1, %esi
    00000007: 	jle	.Ltmp1602 # Offset: 7
    00000009: 	xorl	%eax, %eax
    0000000b: 	testb	%dl, %dl
    0000000d: 	je	.Ltmp1603 # Offset: 13
    0000000f: 	leal	-0x2(%rsi), %eax
    00000012: 	shrl	%eax
    00000014: 	leal	0x2(%rax), %r8d
    00000018: 	movl	$0x2, %eax
    0000001d: 	addq	%r8, %r8
.Ltmp1605:
    00000020: 	movl	-0x8(%rdi,%rax,4), %r9d
    00000025: 	testl	%r9d, %r9d
    00000028: 	je	.Ltmp1604 # Offset: 40
    0000002a: 	movl	-0x4(%rdi,%rax,4), %ecx
    0000002e: 	testl	%ecx, %ecx
    00000030: 	je	.Ltmp1604 # Offset: 48
    00000032: 	movslq	%eax, %rcx
    00000035: 	addq	$0x2, %rax
    00000039: 	cmpq	%r8, %rax
    0000003c: 	jne	.Ltmp1605 # Offset: 60
    0000003e: 	cmpl	%ecx, %esi
    00000040: 	jle	.Ltmp1606 # Offset: 64
.Ltmp1607:
    00000042: 	movl	(%rdi,%rcx,4), %eax
    00000045: 	testl	%eax, %eax
    00000047: 	je	.Ltmp1604 # Offset: 71
    00000049: 	addq	$0x1, %rcx
    0000004d: 	cmpl	%ecx, %esi
    0000004f: 	jg	.Ltmp1607 # Offset: 79
    00000051: 	movl	$0x1, %eax
    00000056: 	retq # Offset: 86
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1604:
    00000060: 	xorl	%eax, %eax
    00000062: 	retq # Offset: 98
.Ltmp1606:
    00000063: 	movl	%edx, %eax
.Ltmp1603:
    00000065: 	retq # Offset: 101
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1602:
    00000070: 	jne	.Ltmp1606 # Offset: 112
    00000072: 	testb	%dl, %dl
    00000074: 	je	.Ltmp1604 # Offset: 116
    00000076: 	xorl	%ecx, %ecx
    00000078: 	jmp	.Ltmp1607 # Offset: 120
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and3IjEbPKT_ib"

Binary Function "_Z10logic_and4IjEbPKT_ib" after disassembly {
  Number      : 233
  State       : disassembled
  Address     : 0x167c0
  Size        : 0x7a
  MaxSize     : 0x80
  Offset      : 0x167c0
  Section     : .text
  Orc Section : .local.text._Z10logic_and4IjEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0232:
    00000000: 	endbr64
    00000004: 	cmpl	$0x3, %esi
    00000007: 	jle	.Ltmp1608 # Offset: 7
    00000009: 	leal	-0x3(%rsi), %r8d
    0000000d: 	xorl	%eax, %eax
    0000000f: 	testb	%dl, %dl
    00000011: 	je	.Ltmp1609 # Offset: 17
    00000013: 	movq	%rdi, %rax
    00000016: 	xorl	%ecx, %ecx
.Ltmp1611:
    00000018: 	movl	(%rax), %r9d
    0000001b: 	testl	%r9d, %r9d
    0000001e: 	je	.Ltmp1610 # Offset: 30
    00000020: 	movl	0x4(%rax), %r11d
    00000024: 	testl	%r11d, %r11d
    00000027: 	je	.Ltmp1610 # Offset: 39
    00000029: 	movl	0x8(%rax), %r10d
    0000002d: 	testl	%r10d, %r10d
    00000030: 	je	.Ltmp1610 # Offset: 48
    00000032: 	movl	0xc(%rax), %r9d
    00000036: 	testl	%r9d, %r9d
    00000039: 	je	.Ltmp1610 # Offset: 57
    0000003b: 	addl	$0x4, %ecx
    0000003e: 	addq	$0x10, %rax
    00000042: 	cmpl	%r8d, %ecx
    00000045: 	jl	.Ltmp1611 # Offset: 69
    00000047: 	cmpl	%ecx, %esi
    00000049: 	jg	.Ltmp1612 # Offset: 73
.Ltmp1613:
    0000004b: 	movl	%edx, %eax
.Ltmp1609:
    0000004d: 	retq # Offset: 77
    0000004e: 	nop # Size: 2
.Ltmp1610:
    00000050: 	xorl	%eax, %eax
    00000052: 	retq # Offset: 82
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1608:
    00000058: 	testl	%esi, %esi
    0000005a: 	jle	.Ltmp1613 # Offset: 90
    0000005c: 	testb	%dl, %dl
    0000005e: 	je	.Ltmp1610 # Offset: 94
    00000060: 	xorl	%ecx, %ecx
.Ltmp1612:
    00000062: 	movslq	%ecx, %rax
.Ltmp1614:
    00000065: 	movl	(%rdi,%rax,4), %edx
    00000068: 	testl	%edx, %edx
    0000006a: 	je	.Ltmp1610 # Offset: 106
    0000006c: 	addq	$0x1, %rax
    00000070: 	cmpl	%eax, %esi
    00000072: 	jg	.Ltmp1614 # Offset: 114
    00000074: 	movl	$0x1, %eax
    00000079: 	retq # Offset: 121
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and4IjEbPKT_ib"

Binary Function "_Z10logic_and5IjEbPKT_ib" after disassembly {
  Number      : 234
  State       : disassembled
  Address     : 0x16840
  Size        : 0x94
  MaxSize     : 0xa0
  Offset      : 0x16840
  Section     : .text
  Orc Section : .local.text._Z10logic_and5IjEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0233:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x1, %esi
    0000000c: 	jle	.Ltmp1615 # Offset: 12
    00000012: 	leal	-0x2(%rsi), %r9d
    00000016: 	movq	%rdi, %rcx
    00000019: 	shrl	%r9d
    0000001c: 	movl	%r9d, %edi
    0000001f: 	leaq	0x8(%r8,%rdi,8), %rdi
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1618:
    00000028: 	testb	%dl, %dl
    0000002a: 	je	.Ltmp1616 # Offset: 42
    0000002c: 	movl	(%rcx), %r11d
    0000002f: 	testl	%r11d, %r11d
    00000032: 	setne	%dl
.Ltmp1616:
    00000035: 	testb	%al, %al
    00000037: 	je	.Ltmp1617 # Offset: 55
    00000039: 	movl	0x4(%rcx), %r10d
    0000003d: 	testl	%r10d, %r10d
    00000040: 	setne	%al
.Ltmp1617:
    00000043: 	addq	$0x8, %rcx
    00000047: 	cmpq	%rdi, %rcx
    0000004a: 	jne	.Ltmp1618 # Offset: 74
    0000004c: 	leal	0x2(%r9,%r9), %ecx
.Ltmp1622:
    00000051: 	cmpl	%ecx, %esi
    00000053: 	jle	.Ltmp1619 # Offset: 83
    00000055: 	testb	%dl, %dl
    00000057: 	je	.Ltmp1620 # Offset: 87
    00000059: 	subl	$0x1, %esi
    0000005c: 	movslq	%ecx, %rdi
    0000005f: 	subl	%ecx, %esi
    00000061: 	leaq	(%r8,%rdi,4), %rdx
    00000065: 	leaq	(%rsi,%rdi), %rcx
    00000069: 	leaq	0x4(%r8,%rcx,4), %rcx
.Ltmp1621:
    0000006e: 	movl	(%rdx), %esi
    00000070: 	testl	%esi, %esi
    00000072: 	je	.Ltmp1620 # Offset: 114
    00000074: 	addq	$0x4, %rdx
    00000078: 	cmpq	%rcx, %rdx
    0000007b: 	jne	.Ltmp1621 # Offset: 123
    0000007d: 	retq # Offset: 125
    0000007e: 	nop # Size: 2
.Ltmp1620:
    00000080: 	xorl	%eax, %eax
    00000082: 	retq # Offset: 130
    00000083: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1619:
    00000088: 	andl	%edx, %eax
    0000008a: 	retq # Offset: 138
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1615:
    00000090: 	xorl	%ecx, %ecx
    00000092: 	jmp	.Ltmp1622 # Offset: 146
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and5IjEbPKT_ib"

Binary Function "_Z10logic_and6IjEbPKT_ib" after disassembly {
  Number      : 235
  State       : disassembled
  Address     : 0x168e0
  Size        : 0xf5
  MaxSize     : 0x100
  Offset      : 0x168e0
  Section     : .text
  Orc Section : .local.text._Z10logic_and6IjEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0234:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movl	%esi, %r11d
    00000008: 	movl	%edx, %r10d
    0000000b: 	pushq	%rbx
    0000000c: 	movq	%rdi, %rbx
    0000000f: 	cmpl	$0x3, %esi
    00000012: 	jle	.Ltmp1623 # Offset: 18
    00000018: 	leal	-0x4(%rsi), %ebp
    0000001b: 	movq	%rdi, %rax
    0000001e: 	movl	%edx, %esi
    00000020: 	shrl	$0x2, %ebp
    00000023: 	movl	%ebp, %ecx
    00000025: 	shlq	$0x4, %rcx
    00000029: 	leaq	0x10(%rdi,%rcx), %r8
    0000002e: 	movl	%edx, %ecx
    00000030: 	xorl	%edi, %edi
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1628:
    00000038: 	testb	%r10b, %r10b
    0000003b: 	je	.Ltmp1624 # Offset: 59
    0000003d: 	movl	(%rax), %r10d
    00000040: 	testl	%r10d, %r10d
    00000043: 	setne	%r10b
.Ltmp1624:
    00000047: 	testb	%dl, %dl
    00000049: 	je	.Ltmp1625 # Offset: 73
    0000004b: 	movl	0x4(%rax), %r9d
    0000004f: 	testl	%r9d, %r9d
    00000052: 	setne	%dl
.Ltmp1625:
    00000055: 	testb	%cl, %cl
    00000057: 	je	.Ltmp1626 # Offset: 87
    00000059: 	movl	0x8(%rax), %ecx
    0000005c: 	testl	%ecx, %ecx
    0000005e: 	setne	%cl
.Ltmp1626:
    00000061: 	xorl	%r9d, %r9d
    00000064: 	testb	%sil, %sil
    00000067: 	je	.Ltmp1627 # Offset: 103
    00000069: 	movl	0xc(%rax), %r9d
    0000006d: 	testl	%r9d, %r9d
    00000070: 	movl	%edi, %r9d
    00000073: 	cmovnel	%ecx, %r9d
    00000077: 	cmovel	%edi, %esi
.Ltmp1627:
    0000007a: 	addq	$0x10, %rax
    0000007e: 	cmpq	%r8, %rax
    00000081: 	jne	.Ltmp1628 # Offset: 129
    00000083: 	leal	0x4(,%rbp,4), %ecx
    0000008a: 	cmpl	%ecx, %r11d
    0000008d: 	jle	.Ltmp1629 # Offset: 141
.Ltmp1632:
    0000008f: 	testb	%r10b, %r10b
    00000092: 	je	.Ltmp1630 # Offset: 146
    00000094: 	subl	$0x1, %r11d
    00000098: 	movslq	%ecx, %rsi
    0000009b: 	subl	%ecx, %r11d
    0000009e: 	leaq	(%rbx,%rsi,4), %rax
    000000a2: 	leaq	(%r11,%rsi), %rcx
    000000a6: 	leaq	0x4(%rbx,%rcx,4), %rcx
.Ltmp1631:
    000000ab: 	movl	(%rax), %esi
    000000ad: 	testl	%esi, %esi
    000000af: 	je	.Ltmp1630 # Offset: 175
    000000b1: 	addq	$0x4, %rax
    000000b5: 	cmpq	%rax, %rcx
    000000b8: 	jne	.Ltmp1631 # Offset: 184
.Ltmp1633:
    000000ba: 	xorl	%eax, %eax
    000000bc: 	testb	%dl, %dl
    000000be: 	popq	%rbx
    000000bf: 	popq	%rbp
    000000c0: 	cmovel	%eax, %r9d
    000000c4: 	movl	%r9d, %eax
    000000c7: 	retq # Offset: 199
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1630:
    000000d0: 	xorl	%r9d, %r9d
    000000d3: 	popq	%rbx
    000000d4: 	popq	%rbp
    000000d5: 	movl	%r9d, %eax
    000000d8: 	retq # Offset: 216
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp1623:
    000000e0: 	xorl	%ecx, %ecx
    000000e2: 	movl	%edx, %r9d
    000000e5: 	cmpl	%ecx, %r11d
    000000e8: 	jg	.Ltmp1632 # Offset: 232
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1629:
    000000f0: 	andl	%r10d, %edx
    000000f3: 	jmp	.Ltmp1633 # Offset: 243
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and6IjEbPKT_ib"

Binary Function "_Z10logic_and7IjEbPKT_ib" after disassembly {
  Number      : 236
  State       : disassembled
  Address     : 0x169e0
  Size        : 0x130
  MaxSize     : 0x130
  Offset      : 0x169e0
  Section     : .text
  Orc Section : .local.text._Z10logic_and7IjEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0235:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movl	%edx, %eax
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movl	%esi, %ebp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	cmpl	$0x3, %esi
    00000016: 	jle	.Ltmp1634 # Offset: 22
    0000001c: 	leal	-0x4(%rsi), %r14d
    00000020: 	movq	%rdi, %rcx
    00000023: 	xorl	%r10d, %r10d
    00000026: 	shrl	$0x2, %r14d
    0000002a: 	movl	%r14d, %esi
    0000002d: 	shlq	$0x4, %rsi
    00000031: 	leaq	0x10(%rdi,%rsi), %r13
    00000036: 	movl	%edx, %edi
    00000038: 	movl	%edx, %esi
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1639:
    00000040: 	movl	%eax, %r8d
    00000043: 	testb	%al, %al
    00000045: 	je	.Ltmp1635 # Offset: 69
    00000047: 	cmpl	$0x1, (%rcx)
    0000004a: 	movl	(%rcx), %r9d
    0000004d: 	sbbl	%eax, %eax
    0000004f: 	addl	$0x1, %eax
    00000052: 	testl	%r9d, %r9d
    00000055: 	cmovel	%r10d, %r8d
.Ltmp1635:
    00000059: 	movl	%edx, %r9d
    0000005c: 	testb	%dl, %dl
    0000005e: 	je	.Ltmp1636 # Offset: 94
    00000060: 	cmpl	$0x1, 0x4(%rcx)
    00000064: 	movl	0x4(%rcx), %r12d
    00000068: 	sbbl	%edx, %edx
    0000006a: 	addl	$0x1, %edx
    0000006d: 	testl	%r12d, %r12d
    00000070: 	cmovel	%r10d, %r9d
.Ltmp1636:
    00000074: 	movl	%esi, %r12d
    00000077: 	testb	%sil, %sil
    0000007a: 	je	.Ltmp1637 # Offset: 122
    0000007c: 	cmpl	$0x1, 0x8(%rcx)
    00000080: 	movl	0x8(%rcx), %r11d
    00000084: 	sbbl	%esi, %esi
    00000086: 	addl	$0x1, %esi
    00000089: 	testl	%r11d, %r11d
    0000008c: 	cmovel	%r10d, %r12d
.Ltmp1637:
    00000090: 	movl	%edi, %r11d
    00000093: 	testb	%dil, %dil
    00000096: 	je	.Ltmp1638 # Offset: 150
    00000098: 	cmpl	$0x1, 0xc(%rcx)
    0000009c: 	sbbl	%edi, %edi
    0000009e: 	addl	$0x1, %edi
    000000a1: 	cmpl	$0x0, 0xc(%rcx)
    000000a5: 	cmovel	%r10d, %r11d
.Ltmp1638:
    000000a9: 	addq	$0x10, %rcx
    000000ad: 	cmpq	%rcx, %r13
    000000b0: 	jne	.Ltmp1639 # Offset: 176
    000000b2: 	leal	0x4(,%r14,4), %ecx
.Ltmp1644:
    000000ba: 	cmpl	%ecx, %ebp
    000000bc: 	jle	.Ltmp1640 # Offset: 188
    000000be: 	subl	$0x1, %ebp
    000000c1: 	movslq	%ecx, %rsi
    000000c4: 	subl	%ecx, %ebp
    000000c6: 	leaq	(%rbx,%rsi,4), %rdx
    000000ca: 	addq	%rsi, %rbp
    000000cd: 	xorl	%esi, %esi
    000000cf: 	leaq	0x4(%rbx,%rbp,4), %rcx
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp1642:
    000000d8: 	movl	%eax, %r8d
    000000db: 	testb	%al, %al
    000000dd: 	je	.Ltmp1641 # Offset: 221
    000000df: 	cmpl	$0x1, (%rdx)
    000000e2: 	movl	(%rdx), %edi
    000000e4: 	sbbl	%eax, %eax
    000000e6: 	addl	$0x1, %eax
    000000e9: 	testl	%edi, %edi
    000000eb: 	cmovel	%esi, %r8d
.Ltmp1641:
    000000ef: 	addq	$0x4, %rdx
    000000f3: 	cmpq	%rdx, %rcx
    000000f6: 	jne	.Ltmp1642 # Offset: 246
.Ltmp1640:
    000000f8: 	testb	%r8b, %r8b
    000000fb: 	je	.Ltmp1643 # Offset: 251
    000000fd: 	xorl	%r8d, %r8d
    00000100: 	testb	%r9b, %r9b
    00000103: 	je	.Ltmp1643 # Offset: 259
    00000105: 	testb	%r12b, %r12b
    00000108: 	cmovnel	%r11d, %r8d
.Ltmp1643:
    0000010c: 	popq	%rbx
    0000010d: 	movl	%r8d, %eax
    00000110: 	popq	%rbp
    00000111: 	popq	%r12
    00000113: 	popq	%r13
    00000115: 	popq	%r14
    00000117: 	retq # Offset: 279
    00000118: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1634:
    00000120: 	movl	%edx, %r9d
    00000123: 	movl	%edx, %r11d
    00000126: 	movl	%edx, %r12d
    00000129: 	movl	%edx, %r8d
    0000012c: 	xorl	%ecx, %ecx
    0000012e: 	jmp	.Ltmp1644 # Offset: 302
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and7IjEbPKT_ib"

Binary Function "_Z10logic_and8IjEbPKT_ib" after disassembly {
  Number      : 237
  State       : disassembled
  Address     : 0x16b10
  Size        : 0x229
  MaxSize     : 0x230
  Offset      : 0x16b10
  Section     : .text
  Orc Section : .local.text._Z10logic_and8IjEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0236:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %eax
    00000008: 	movl	%edx, %ecx
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbp
    00000011: 	pushq	%rbx
    00000012: 	movq	%rdi, -0x10(%rsp)
    00000017: 	movl	%esi, -0x8(%rsp)
    0000001b: 	cmpl	$0x7, %esi
    0000001e: 	jle	.Ltmp1645 # Offset: 30
    00000024: 	leal	-0x8(%rsi), %esi
    00000027: 	movq	%rdi, %rdx
    0000002a: 	movl	%eax, %r12d
    0000002d: 	movl	%eax, %ebp
    0000002f: 	shrl	$0x3, %esi
    00000032: 	movl	%eax, %r10d
    00000035: 	movl	%eax, %r9d
    00000038: 	movl	%esi, -0x4(%rsp)
    0000003c: 	shlq	$0x5, %rsi
    00000040: 	leaq	0x20(%rdi,%rsi), %rbx
    00000045: 	xorl	%edi, %edi
    00000047: 	movl	%eax, %esi
    00000049: 	movq	%rbx, -0x18(%rsp)
    0000004e: 	movl	%eax, %ebx
.Ltmp1654:
    00000050: 	movl	%ecx, %r14d
    00000053: 	testb	%cl, %cl
    00000055: 	je	.Ltmp1646 # Offset: 85
    00000057: 	cmpl	$0x1, (%rdx)
    0000005a: 	movl	(%rdx), %r15d
    0000005d: 	sbbl	%ecx, %ecx
    0000005f: 	addl	$0x1, %ecx
    00000062: 	testl	%r15d, %r15d
    00000065: 	cmovel	%edi, %r14d
.Ltmp1646:
    00000069: 	movl	%eax, %r11d
    0000006c: 	testb	%al, %al
    0000006e: 	je	.Ltmp1647 # Offset: 110
    00000070: 	cmpl	$0x1, 0x4(%rdx)
    00000074: 	movl	0x4(%rdx), %r13d
    00000078: 	sbbl	%eax, %eax
    0000007a: 	addl	$0x1, %eax
    0000007d: 	testl	%r13d, %r13d
    00000080: 	cmovel	%edi, %r11d
.Ltmp1647:
    00000084: 	movl	%r9d, %r15d
    00000087: 	testb	%r9b, %r9b
    0000008a: 	je	.Ltmp1648 # Offset: 138
    0000008c: 	cmpl	$0x1, 0x8(%rdx)
    00000090: 	movl	0x8(%rdx), %r8d
    00000094: 	sbbl	%r9d, %r9d
    00000097: 	addl	$0x1, %r9d
    0000009b: 	testl	%r8d, %r8d
    0000009e: 	cmovel	%edi, %r15d
.Ltmp1648:
    000000a2: 	movb	%r10b, -0x1a(%rsp)
    000000a7: 	movl	%r10d, %r8d
    000000aa: 	testb	%r10b, %r10b
    000000ad: 	je	.Ltmp1649 # Offset: 173
    000000af: 	cmpl	$0x1, 0xc(%rdx)
    000000b3: 	movl	0xc(%rdx), %r13d
    000000b7: 	sbbl	%r10d, %r10d
    000000ba: 	addl	$0x1, %r10d
    000000be: 	testl	%r13d, %r13d
    000000c1: 	cmovel	%edi, %r8d
    000000c5: 	movb	%r8b, -0x1a(%rsp)
.Ltmp1649:
    000000ca: 	movb	%sil, -0x1c(%rsp)
    000000cf: 	movl	%esi, %r8d
    000000d2: 	testb	%sil, %sil
    000000d5: 	je	.Ltmp1650 # Offset: 213
    000000d7: 	cmpl	$0x1, 0x10(%rdx)
    000000db: 	movl	0x10(%rdx), %r13d
    000000df: 	sbbl	%esi, %esi
    000000e1: 	addl	$0x1, %esi
    000000e4: 	testl	%r13d, %r13d
    000000e7: 	cmovel	%edi, %r8d
    000000eb: 	movb	%r8b, -0x1c(%rsp)
.Ltmp1650:
    000000f0: 	movl	%ebx, %r13d
    000000f3: 	testb	%bl, %bl
    000000f5: 	je	.Ltmp1651 # Offset: 245
    000000f7: 	cmpl	$0x1, 0x14(%rdx)
    000000fb: 	movl	0x14(%rdx), %r8d
    000000ff: 	sbbl	%ebx, %ebx
    00000101: 	addl	$0x1, %ebx
    00000104: 	testl	%r8d, %r8d
    00000107: 	cmovel	%edi, %r13d
.Ltmp1651:
    0000010b: 	movb	%bpl, -0x1b(%rsp)
    00000110: 	movl	%ebp, %r8d
    00000113: 	testb	%bpl, %bpl
    00000116: 	je	.Ltmp1652 # Offset: 278
    00000118: 	cmpl	$0x1, 0x18(%rdx)
    0000011c: 	sbbl	%ebp, %ebp
    0000011e: 	addl	$0x1, %ebp
    00000121: 	cmpl	$0x0, 0x18(%rdx)
    00000125: 	cmovel	%edi, %r8d
    00000129: 	movb	%r8b, -0x1b(%rsp)
.Ltmp1652:
    0000012e: 	movb	%r12b, -0x19(%rsp)
    00000133: 	movl	%r12d, %r8d
    00000136: 	testb	%r12b, %r12b
    00000139: 	je	.Ltmp1653 # Offset: 313
    0000013b: 	cmpl	$0x1, 0x1c(%rdx)
    0000013f: 	sbbl	%r12d, %r12d
    00000142: 	addl	$0x1, %r12d
    00000146: 	cmpl	$0x0, 0x1c(%rdx)
    0000014a: 	cmovel	%edi, %r8d
    0000014e: 	movb	%r8b, -0x19(%rsp)
.Ltmp1653:
    00000153: 	addq	$0x20, %rdx
    00000157: 	cmpq	%rdx, -0x18(%rsp)
    0000015c: 	jne	.Ltmp1654 # Offset: 348
    00000162: 	movl	-0x4(%rsp), %eax
    00000166: 	movzbl	-0x1c(%rsp), %r8d
    0000016c: 	movl	%r14d, %esi
    0000016f: 	movl	%r11d, %r14d
    00000172: 	leal	0x8(,%rax,8), %edi
.Ltmp1661:
    00000179: 	movl	-0x8(%rsp), %ebx
    0000017d: 	cmpl	%ebx, %edi
    0000017f: 	jge	.Ltmp1655 # Offset: 383
    00000181: 	subl	$0x1, %ebx
    00000184: 	movslq	%edi, %rsi
    00000187: 	movq	-0x10(%rsp), %r11
    0000018c: 	movl	%ebx, %edx
    0000018e: 	subl	%edi, %edx
    00000190: 	leaq	(%r11,%rsi,4), %rax
    00000194: 	xorl	%edi, %edi
    00000196: 	addq	%rsi, %rdx
    00000199: 	leaq	0x4(%r11,%rdx,4), %rdx
    0000019e: 	nop # Size: 2
.Ltmp1657:
    000001a0: 	movl	%ecx, %esi
    000001a2: 	testb	%cl, %cl
    000001a4: 	je	.Ltmp1656 # Offset: 420
    000001a6: 	cmpl	$0x1, (%rax)
    000001a9: 	movl	(%rax), %r9d
    000001ac: 	sbbl	%ecx, %ecx
    000001ae: 	addl	$0x1, %ecx
    000001b1: 	testl	%r9d, %r9d
    000001b4: 	cmovel	%edi, %esi
.Ltmp1656:
    000001b7: 	addq	$0x4, %rax
    000001bb: 	cmpq	%rax, %rdx
    000001be: 	jne	.Ltmp1657 # Offset: 446
.Ltmp1655:
    000001c0: 	testb	%sil, %sil
    000001c3: 	je	.Ltmp1658 # Offset: 451
    000001c5: 	xorl	%esi, %esi
    000001c7: 	testb	%r14b, %r14b
    000001ca: 	jne	.Ltmp1659 # Offset: 458
.Ltmp1658:
    000001cc: 	testb	%r8b, %r8b
    000001cf: 	je	.Ltmp1660 # Offset: 463
    000001d1: 	xorl	%r8d, %r8d
    000001d4: 	testb	%r13b, %r13b
    000001d7: 	je	.Ltmp1660 # Offset: 471
    000001d9: 	cmpb	$0x0, -0x1b(%rsp)
    000001de: 	cmovnel	%esi, %r8d
.Ltmp1660:
    000001e2: 	popq	%rbx
    000001e3: 	movl	%r8d, %eax
    000001e6: 	popq	%rbp
    000001e7: 	popq	%r12
    000001e9: 	popq	%r13
    000001eb: 	popq	%r14
    000001ed: 	popq	%r15
    000001ef: 	retq # Offset: 495
.Ltmp1659:
    000001f0: 	testb	%r15b, %r15b
    000001f3: 	je	.Ltmp1658 # Offset: 499
    000001f5: 	movzbl	-0x19(%rsp), %eax
    000001fa: 	cmpb	$0x0, -0x1a(%rsp)
    000001ff: 	cmovnel	%eax, %esi
    00000202: 	jmp	.Ltmp1658 # Offset: 514
    00000204: 	nopl	(%rax) # Size: 4
.Ltmp1645:
    00000208: 	movb	%dl, -0x19(%rsp)
    0000020c: 	movl	%edx, %esi
    0000020e: 	movl	%edx, %r13d
    00000211: 	movl	%edx, %r15d
    00000214: 	movb	%dl, -0x1b(%rsp)
    00000218: 	movl	%edx, %r14d
    0000021b: 	movl	%edx, %r8d
    0000021e: 	xorl	%edi, %edi
    00000220: 	movb	%dl, -0x1a(%rsp)
    00000224: 	jmp	.Ltmp1661 # Offset: 548
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and8IjEbPKT_ib"

Binary Function "_Z9logic_or1IjEbPKT_ib" after disassembly {
  Number      : 238
  State       : disassembled
  Address     : 0x16d40
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x16d40
  Section     : .text
  Orc Section : .local.text._Z9logic_or1IjEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0237:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp1662 # Offset: 8
    0000000a: 	leal	-0x1(%rsi), %edx
    0000000d: 	leaq	0x4(%rdi,%rdx,4), %rcx
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1663:
    00000018: 	movl	(%rdi), %edx
    0000001a: 	testl	%edx, %edx
    0000001c: 	setne	%dl
    0000001f: 	addq	$0x4, %rdi
    00000023: 	orl	%edx, %eax
    00000025: 	cmpq	%rdi, %rcx
    00000028: 	jne	.Ltmp1663 # Offset: 40
.Ltmp1662:
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or1IjEbPKT_ib"

Binary Function "_Z12logic_or_optIjEbPKT_ib" after disassembly {
  Number      : 239
  State       : disassembled
  Address     : 0x16d70
  Size        : 0x43
  MaxSize     : 0x50
  Offset      : 0x16d70
  Section     : .text
  Orc Section : .local.text._Z12logic_or_optIjEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0238:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp1664 # Offset: 6
    00000008: 	cmpb	$0x1, %dl
    0000000b: 	je	.Ltmp1664 # Offset: 11
    0000000d: 	movl	$0x1, %eax
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1665:
    00000018: 	movl	-0x4(%rdi,%rax,4), %edx
    0000001c: 	cmpl	%eax, %esi
    0000001e: 	setg	%r8b
    00000022: 	testl	%edx, %edx
    00000024: 	sete	%cl
    00000027: 	addq	$0x1, %rax
    0000002b: 	testb	%cl, %r8b
    0000002e: 	jne	.Ltmp1665 # Offset: 46
    00000030: 	testl	%edx, %edx
    00000032: 	setne	%al
    00000035: 	retq # Offset: 53
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1664:
    00000040: 	movl	%edx, %eax
    00000042: 	retq # Offset: 66
DWARF CFI Instructions:
    <empty>
End of Function "_Z12logic_or_optIjEbPKT_ib"

Binary Function "_Z9logic_or2IjEbPKT_ib" after disassembly {
  Number      : 240
  State       : disassembled
  Address     : 0x16dc0
  Size        : 0x87
  MaxSize     : 0x90
  Offset      : 0x16dc0
  Section     : .text
  Orc Section : .local.text._Z9logic_or2IjEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0239:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movl	%edx, %r8d
    0000000a: 	leaq	(%rdi,%rsi,4), %rcx
    0000000e: 	cmpq	%rcx, %rdi
    00000011: 	jne	.Ltmp1666 # Offset: 17
    00000013: 	jmp	.Ltmp1667 # Offset: 19
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp1672:
    00000018: 	testb	%r8b, %r8b
    0000001b: 	jne	.Ltmp1668 # Offset: 27
.Ltmp1670:
    0000001d: 	cmpq	%rax, %rcx
    00000020: 	je	.Ltmp1669 # Offset: 32
    00000022: 	movl	(%rax), %edx
    00000024: 	addq	$0x4, %rax
    00000028: 	testl	%edx, %edx
    0000002a: 	je	.Ltmp1670 # Offset: 42
.Ltmp1675:
    0000002c: 	movq	%rax, %rdi
    0000002f: 	movl	$0x1, %r8d
    00000035: 	cmpq	%rdi, %rcx
    00000038: 	je	.Ltmp1671 # Offset: 56
.Ltmp1666:
    0000003a: 	movl	(%rdi), %r9d
    0000003d: 	leaq	0x4(%rdi), %rax
    00000041: 	testl	%r9d, %r9d
    00000044: 	je	.Ltmp1672 # Offset: 68
.Ltmp1674:
    00000046: 	cmpq	%rax, %rcx
    00000049: 	je	.Ltmp1671 # Offset: 73
    0000004b: 	leaq	0x4(%rax), %rdi
    0000004f: 	movl	$0x1, %r8d
    00000055: 	cmpq	%rdi, %rcx
    00000058: 	jne	.Ltmp1666 # Offset: 88
.Ltmp1671:
    0000005a: 	movl	$0x1, %eax
    0000005f: 	retq # Offset: 95
.Ltmp1668:
    00000060: 	cmpq	%rax, %rcx
    00000063: 	je	.Ltmp1673 # Offset: 99
    00000065: 	movl	0x4(%rdi), %esi
    00000068: 	leaq	0x8(%rdi), %rax
    0000006c: 	testl	%esi, %esi
    0000006e: 	jne	.Ltmp1674 # Offset: 110
    00000070: 	jmp	.Ltmp1675 # Offset: 112
    00000072: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1669:
    00000078: 	xorl	%eax, %eax
    0000007a: 	retq # Offset: 122
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1667:
    00000080: 	movl	%edx, %eax
    00000082: 	retq # Offset: 130
.Ltmp1673:
    00000083: 	movl	%r8d, %eax
    00000086: 	retq # Offset: 134
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or2IjEbPKT_ib"

Binary Function "_Z9logic_or3IjEbPKT_ib" after disassembly {
  Number      : 241
  State       : disassembled
  Address     : 0x16e50
  Size        : 0x8c
  MaxSize     : 0x90
  Offset      : 0x16e50
  Section     : .text
  Orc Section : .local.text._Z9logic_or3IjEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0240:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%edx, %eax
    00000009: 	movl	%esi, %edi
    0000000b: 	cmpl	$0x1, %esi
    0000000e: 	jle	.Ltmp1676 # Offset: 14
    00000010: 	leal	-0x2(%rsi), %r8d
    00000014: 	movq	%r9, %rcx
    00000017: 	shrl	%r8d
    0000001a: 	movl	%r8d, %edx
    0000001d: 	leaq	0x8(%r9,%rdx,8), %rsi
    00000022: 	jmp	.Ltmp1677 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1679:
    00000028: 	addq	$0x8, %rcx
    0000002c: 	cmpq	%rcx, %rsi
    0000002f: 	je	.Ltmp1678 # Offset: 47
.Ltmp1677:
    00000031: 	movl	(%rcx), %r11d
    00000034: 	testl	%r11d, %r11d
    00000037: 	setne	%dl
    0000003a: 	orb	%dl, %al
    0000003c: 	jne	.Ltmp1679 # Offset: 60
    0000003e: 	movl	0x4(%rcx), %r10d
    00000042: 	testl	%r10d, %r10d
    00000045: 	setne	%al
    00000048: 	addq	$0x8, %rcx
    0000004c: 	cmpq	%rcx, %rsi
    0000004f: 	jne	.Ltmp1677 # Offset: 79
.Ltmp1678:
    00000051: 	leal	0x2(%r8,%r8), %edx
.Ltmp1681:
    00000056: 	cmpl	%edx, %edi
    00000058: 	jle	.Ltmp1680 # Offset: 88
    0000005a: 	movslq	%edx, %rcx
    0000005d: 	leaq	(,%rcx,4), %rsi
    00000065: 	movl	(%r9,%rcx,4), %ecx
    00000069: 	testl	%ecx, %ecx
    0000006b: 	setne	%cl
    0000006e: 	addl	$0x1, %edx
    00000071: 	orl	%ecx, %eax
    00000073: 	cmpl	%edx, %edi
    00000075: 	jle	.Ltmp1680 # Offset: 117
    00000077: 	movl	0x4(%r9,%rsi), %edx
    0000007c: 	testl	%edx, %edx
    0000007e: 	setne	%dl
    00000081: 	orl	%edx, %eax
.Ltmp1680:
    00000083: 	retq # Offset: 131
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp1676:
    00000088: 	xorl	%edx, %edx
    0000008a: 	jmp	.Ltmp1681 # Offset: 138
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or3IjEbPKT_ib"

Binary Function "_Z9logic_or4IjEbPKT_ib" after disassembly {
  Number      : 242
  State       : disassembled
  Address     : 0x16ee0
  Size        : 0xdc
  MaxSize     : 0xe0
  Offset      : 0x16ee0
  Section     : .text
  Orc Section : .local.text._Z9logic_or4IjEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0241:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	cmpl	$0x3, %esi
    00000009: 	jle	.Ltmp1682 # Offset: 9
    0000000f: 	leal	-0x4(%rsi), %r8d
    00000013: 	movq	%rdi, %rcx
    00000016: 	shrl	$0x2, %r8d
    0000001a: 	movl	%r8d, %edx
    0000001d: 	shlq	$0x4, %rdx
    00000021: 	leaq	0x10(%rdi,%rdx), %rdx
    00000026: 	jmp	.Ltmp1683 # Offset: 38
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1686:
    00000030: 	testb	%al, %al
    00000032: 	jne	.Ltmp1684 # Offset: 50
    00000034: 	movl	0x4(%rcx), %r10d
    00000038: 	movl	$0x1, %eax
    0000003d: 	testl	%r10d, %r10d
    00000040: 	jne	.Ltmp1684 # Offset: 64
    00000042: 	movl	0x8(%rcx), %r9d
    00000046: 	testl	%r9d, %r9d
    00000049: 	jne	.Ltmp1684 # Offset: 73
    0000004b: 	movl	0xc(%rcx), %r11d
    0000004f: 	testl	%r11d, %r11d
    00000052: 	setne	%al
.Ltmp1684:
    00000055: 	addq	$0x10, %rcx
    00000059: 	cmpq	%rcx, %rdx
    0000005c: 	je	.Ltmp1685 # Offset: 92
.Ltmp1683:
    0000005e: 	movl	(%rcx), %r11d
    00000061: 	testl	%r11d, %r11d
    00000064: 	je	.Ltmp1686 # Offset: 100
    00000066: 	addq	$0x10, %rcx
    0000006a: 	movl	$0x1, %eax
    0000006f: 	cmpq	%rcx, %rdx
    00000072: 	jne	.Ltmp1683 # Offset: 114
.Ltmp1685:
    00000074: 	leal	0x4(,%r8,4), %edx
.Ltmp1688:
    0000007c: 	cmpl	%edx, %esi
    0000007e: 	jle	.Ltmp1687 # Offset: 126
    00000080: 	movslq	%edx, %rcx
    00000083: 	movl	(%rdi,%rcx,4), %r10d
    00000087: 	leaq	(,%rcx,4), %r8
    0000008f: 	testl	%r10d, %r10d
    00000092: 	setne	%cl
    00000095: 	orl	%ecx, %eax
    00000097: 	leal	0x1(%rdx), %ecx
    0000009a: 	cmpl	%ecx, %esi
    0000009c: 	jle	.Ltmp1687 # Offset: 156
    0000009e: 	movl	0x4(%rdi,%r8), %r9d
    000000a3: 	testl	%r9d, %r9d
    000000a6: 	setne	%cl
    000000a9: 	orl	%ecx, %eax
    000000ab: 	leal	0x2(%rdx), %ecx
    000000ae: 	cmpl	%esi, %ecx
    000000b0: 	jge	.Ltmp1687 # Offset: 176
    000000b2: 	movl	0x8(%rdi,%r8), %ecx
    000000b7: 	testl	%ecx, %ecx
    000000b9: 	setne	%cl
    000000bc: 	addl	$0x3, %edx
    000000bf: 	orl	%ecx, %eax
    000000c1: 	cmpl	%esi, %edx
    000000c3: 	jge	.Ltmp1687 # Offset: 195
    000000c5: 	movl	0xc(%rdi,%r8), %edx
    000000ca: 	testl	%edx, %edx
    000000cc: 	setne	%dl
    000000cf: 	orl	%edx, %eax
.Ltmp1687:
    000000d1: 	retq # Offset: 209
    000000d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1682:
    000000d8: 	xorl	%edx, %edx
    000000da: 	jmp	.Ltmp1688 # Offset: 218
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or4IjEbPKT_ib"

Binary Function "_Z9logic_or5IjEbPKT_ib" after disassembly {
  Number      : 243
  State       : disassembled
  Address     : 0x16fc0
  Size        : 0x84
  MaxSize     : 0x90
  Offset      : 0x16fc0
  Section     : .text
  Orc Section : .local.text._Z9logic_or5IjEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0242:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%edx, %eax
    00000009: 	movl	%esi, %edi
    0000000b: 	cmpl	$0x1, %esi
    0000000e: 	jle	.Ltmp1689 # Offset: 14
    00000010: 	leal	-0x2(%rsi), %r10d
    00000014: 	movq	%r9, %rcx
    00000017: 	shrl	%r10d
    0000001a: 	movl	%r10d, %esi
    0000001d: 	leaq	0x8(%r9,%rsi,8), %r8
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1690:
    00000028: 	movl	(%rcx), %r11d
    0000002b: 	testl	%r11d, %r11d
    0000002e: 	setne	%sil
    00000032: 	orl	%esi, %eax
    00000034: 	movl	0x4(%rcx), %esi
    00000037: 	testl	%esi, %esi
    00000039: 	setne	%sil
    0000003d: 	addq	$0x8, %rcx
    00000041: 	orl	%esi, %edx
    00000043: 	cmpq	%rcx, %r8
    00000046: 	jne	.Ltmp1690 # Offset: 70
    00000048: 	leal	0x2(%r10,%r10), %esi
.Ltmp1693:
    0000004d: 	cmpl	%esi, %edi
    0000004f: 	jle	.Ltmp1691 # Offset: 79
    00000051: 	subl	$0x1, %edi
    00000054: 	movslq	%esi, %r8
    00000057: 	subl	%esi, %edi
    00000059: 	leaq	(%r9,%r8,4), %rcx
    0000005d: 	addq	%r8, %rdi
    00000060: 	leaq	0x4(%r9,%rdi,4), %rdi
    00000065: 	nopl	(%rax) # Size: 3
.Ltmp1692:
    00000068: 	movl	(%rcx), %esi
    0000006a: 	testl	%esi, %esi
    0000006c: 	setne	%sil
    00000070: 	addq	$0x4, %rcx
    00000074: 	orl	%esi, %eax
    00000076: 	cmpq	%rcx, %rdi
    00000079: 	jne	.Ltmp1692 # Offset: 121
.Ltmp1691:
    0000007b: 	orl	%edx, %eax
    0000007d: 	retq # Offset: 125
    0000007e: 	nop # Size: 2
.Ltmp1689:
    00000080: 	xorl	%esi, %esi
    00000082: 	jmp	.Ltmp1693 # Offset: 130
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or5IjEbPKT_ib"

Binary Function "_Z9logic_or6IjEbPKT_ib" after disassembly {
  Number      : 244
  State       : disassembled
  Address     : 0x17050
  Size        : 0xc9
  MaxSize     : 0xd0
  Offset      : 0x17050
  Section     : .text
  Orc Section : .local.text._Z9logic_or6IjEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0243:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %r10
    00000008: 	movl	%esi, %r9d
    0000000b: 	movl	%edx, %eax
    0000000d: 	cmpl	$0x3, %esi
    00000010: 	jle	.Ltmp1694 # Offset: 16
    00000016: 	leal	-0x4(%rsi), %ebx
    00000019: 	movq	%rdi, %rcx
    0000001c: 	shrl	$0x2, %ebx
    0000001f: 	movl	%ebx, %esi
    00000021: 	shlq	$0x4, %rsi
    00000025: 	leaq	0x10(%rdi,%rsi), %r11
    0000002a: 	movl	%edx, %edi
    0000002c: 	movl	%edx, %esi
    0000002e: 	nop # Size: 2
.Ltmp1695:
    00000030: 	movl	(%rcx), %r8d
    00000033: 	testl	%r8d, %r8d
    00000036: 	setne	%r8b
    0000003a: 	orl	%r8d, %eax
    0000003d: 	movl	0x4(%rcx), %r8d
    00000041: 	testl	%r8d, %r8d
    00000044: 	setne	%r8b
    00000048: 	orl	%r8d, %edx
    0000004b: 	movl	0x8(%rcx), %r8d
    0000004f: 	testl	%r8d, %r8d
    00000052: 	setne	%r8b
    00000056: 	orl	%r8d, %esi
    00000059: 	movl	0xc(%rcx), %r8d
    0000005d: 	testl	%r8d, %r8d
    00000060: 	setne	%r8b
    00000064: 	addq	$0x10, %rcx
    00000068: 	orl	%r8d, %edi
    0000006b: 	cmpq	%rcx, %r11
    0000006e: 	jne	.Ltmp1695 # Offset: 110
    00000070: 	leal	0x4(,%rbx,4), %r8d
.Ltmp1698:
    00000078: 	cmpl	%r8d, %r9d
    0000007b: 	jle	.Ltmp1696 # Offset: 123
    0000007d: 	subl	$0x1, %r9d
    00000081: 	movslq	%r8d, %r11
    00000084: 	subl	%r8d, %r9d
    00000087: 	leaq	(%r10,%r11,4), %rcx
    0000008b: 	addq	%r11, %r9
    0000008e: 	leaq	0x4(%r10,%r9,4), %r9
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1697:
    00000098: 	movl	(%rcx), %r8d
    0000009b: 	testl	%r8d, %r8d
    0000009e: 	setne	%r8b
    000000a2: 	addq	$0x4, %rcx
    000000a6: 	orl	%r8d, %eax
    000000a9: 	cmpq	%rcx, %r9
    000000ac: 	jne	.Ltmp1697 # Offset: 172
.Ltmp1696:
    000000ae: 	orl	%edi, %esi
    000000b0: 	orb	%dl, %al
    000000b2: 	popq	%rbx
    000000b3: 	cmovel	%esi, %eax
    000000b6: 	retq # Offset: 182
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1694:
    000000c0: 	movl	%edx, %edi
    000000c2: 	movl	%edx, %esi
    000000c4: 	xorl	%r8d, %r8d
    000000c7: 	jmp	.Ltmp1698 # Offset: 199
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or6IjEbPKT_ib"

Binary Function "_Z9logic_or7IjEbPKT_ib" after disassembly {
  Number      : 245
  State       : disassembled
  Address     : 0x17120
  Size        : 0xfe
  MaxSize     : 0x100
  Offset      : 0x17120
  Section     : .text
  Orc Section : .local.text._Z9logic_or7IjEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0244:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movq	%rdi, %r11
    00000009: 	movl	%esi, %r10d
    0000000c: 	movl	%edx, %ecx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	cmpl	$0x3, %esi
    00000017: 	jle	.Ltmp1699 # Offset: 23
    0000001d: 	leal	-0x4(%rsi), %r14d
    00000021: 	movq	%rdi, %rax
    00000024: 	movl	%edx, %r8d
    00000027: 	shrl	$0x2, %r14d
    0000002b: 	movl	%r14d, %esi
    0000002e: 	shlq	$0x4, %rsi
    00000032: 	leaq	0x10(%rdi,%rsi), %r13
    00000037: 	movl	%edx, %edi
    00000039: 	movl	$0x1, %esi
    0000003e: 	nop # Size: 2
.Ltmp1700:
    00000040: 	movl	(%rax), %r9d
    00000043: 	movl	0x4(%rax), %ebx
    00000046: 	movl	0x8(%rax), %ebp
    00000049: 	testl	%r9d, %r9d
    0000004c: 	cmovnel	%esi, %ecx
    0000004f: 	testl	%ebx, %ebx
    00000051: 	cmovnel	%esi, %edx
    00000054: 	testl	%ebp, %ebp
    00000056: 	movl	0xc(%rax), %ebp
    00000059: 	cmovnel	%esi, %edi
    0000005c: 	movl	%ecx, %r9d
    0000005f: 	testl	%ebp, %ebp
    00000061: 	movl	%edx, %ebx
    00000063: 	cmovnel	%esi, %r8d
    00000067: 	addq	$0x10, %rax
    0000006b: 	movl	%edi, %r12d
    0000006e: 	movl	%r8d, %ebp
    00000071: 	cmpq	%r13, %rax
    00000074: 	jne	.Ltmp1700 # Offset: 116
    00000076: 	leal	0x4(,%r14,4), %edx
.Ltmp1705:
    0000007e: 	cmpl	%edx, %r10d
    00000081: 	jle	.Ltmp1701 # Offset: 129
    00000083: 	subl	$0x1, %r10d
    00000087: 	movslq	%edx, %rsi
    0000008a: 	subl	%edx, %r10d
    0000008d: 	leaq	(%r11,%rsi,4), %rax
    00000091: 	movl	$0x1, %edx
    00000096: 	addq	%rsi, %r10
    00000099: 	leaq	0x4(%r11,%r10,4), %rsi
    0000009e: 	nop # Size: 2
.Ltmp1702:
    000000a0: 	movl	(%rax), %edi
    000000a2: 	testl	%edi, %edi
    000000a4: 	cmovnel	%edx, %ecx
    000000a7: 	addq	$0x4, %rax
    000000ab: 	movl	%ecx, %r9d
    000000ae: 	cmpq	%rax, %rsi
    000000b1: 	jne	.Ltmp1702 # Offset: 177
.Ltmp1701:
    000000b3: 	testb	%r9b, %r9b
    000000b6: 	jne	.Ltmp1703 # Offset: 182
    000000b8: 	movl	%ebx, %r9d
    000000bb: 	testb	%bl, %bl
    000000bd: 	je	.Ltmp1704 # Offset: 189
.Ltmp1703:
    000000bf: 	popq	%rbx
    000000c0: 	movl	%r9d, %eax
    000000c3: 	popq	%rbp
    000000c4: 	popq	%r12
    000000c6: 	popq	%r13
    000000c8: 	popq	%r14
    000000ca: 	retq # Offset: 202
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1704:
    000000d0: 	testb	%r12b, %r12b
    000000d3: 	movl	%ebp, %r9d
    000000d6: 	popq	%rbx
    000000d7: 	popq	%rbp
    000000d8: 	cmovnel	%r12d, %r9d
    000000dc: 	popq	%r12
    000000de: 	popq	%r13
    000000e0: 	popq	%r14
    000000e2: 	movl	%r9d, %eax
    000000e5: 	retq # Offset: 229
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1699:
    000000f0: 	movl	%edx, %ebx
    000000f2: 	movl	%edx, %r9d
    000000f5: 	movl	%edx, %ebp
    000000f7: 	movl	%edx, %r12d
    000000fa: 	xorl	%edx, %edx
    000000fc: 	jmp	.Ltmp1705 # Offset: 252
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or7IjEbPKT_ib"

Binary Function "_Z9logic_or8IjEbPKT_ib" after disassembly {
  Number      : 246
  State       : disassembled
  Address     : 0x17220
  Size        : 0x1a2
  MaxSize     : 0x1b0
  Offset      : 0x17220
  Section     : .text
  Orc Section : .local.text._Z9logic_or8IjEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0245:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %eax
    00000008: 	pushq	%r14
    0000000a: 	pushq	%r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	movl	%esi, %ebx
    00000012: 	movl	%esi, -0x8(%rsp)
    00000016: 	movl	%edx, %esi
    00000018: 	movq	%rdi, -0x10(%rsp)
    0000001d: 	cmpl	$0x7, %ebx
    00000020: 	jle	.Ltmp1706 # Offset: 32
    00000026: 	leal	-0x8(%rbx), %ecx
    00000029: 	movq	%rdi, %rdx
    0000002c: 	movl	%eax, %ebp
    0000002e: 	movl	%eax, %ebx
    00000030: 	shrl	$0x3, %ecx
    00000033: 	movl	%eax, %r11d
    00000036: 	movl	%eax, %r10d
    00000039: 	movl	%eax, %r9d
    0000003c: 	movl	%ecx, -0x4(%rsp)
    00000040: 	shlq	$0x5, %rcx
    00000044: 	leaq	0x20(%rdi,%rcx), %rdi
    00000049: 	movl	$0x1, %ecx
    0000004e: 	movq	%rdi, -0x20(%rsp)
    00000053: 	movl	%eax, %edi
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp1707:
    00000058: 	movl	(%rdx), %r8d
    0000005b: 	movl	0x4(%rdx), %r12d
    0000005f: 	movl	0x8(%rdx), %r13d
    00000063: 	testl	%r8d, %r8d
    00000066: 	movl	0xc(%rdx), %r8d
    0000006a: 	cmovnel	%ecx, %esi
    0000006d: 	testl	%r12d, %r12d
    00000070: 	cmovnel	%ecx, %eax
    00000073: 	testl	%r13d, %r13d
    00000076: 	movl	0x10(%rdx), %r13d
    0000007a: 	cmovnel	%ecx, %edi
    0000007d: 	testl	%r8d, %r8d
    00000080: 	cmovnel	%ecx, %r9d
    00000084: 	testl	%r13d, %r13d
    00000087: 	movl	0x14(%rdx), %r13d
    0000008b: 	movl	%eax, %r12d
    0000008e: 	cmovnel	%ecx, %r10d
    00000092: 	movl	%edi, %r15d
    00000095: 	testl	%r13d, %r13d
    00000098: 	movb	%r9b, -0x13(%rsp)
    0000009d: 	cmovnel	%ecx, %r11d
    000000a1: 	cmpl	$0x0, 0x18(%rdx)
    000000a5: 	movl	%r10d, %r8d
    000000a8: 	cmovnel	%ecx, %ebx
    000000ab: 	cmpl	$0x0, 0x1c(%rdx)
    000000af: 	cmovnel	%ecx, %ebp
    000000b2: 	movl	%r11d, %r13d
    000000b5: 	addq	$0x20, %rdx
    000000b9: 	movb	%bl, -0x12(%rsp)
    000000bd: 	movb	%bpl, -0x11(%rsp)
    000000c2: 	cmpq	%rdx, -0x20(%rsp)
    000000c7: 	jne	.Ltmp1707 # Offset: 199
    000000c9: 	movl	-0x4(%rsp), %eax
    000000cd: 	movl	%r12d, %r14d
    000000d0: 	movl	%esi, %r12d
    000000d3: 	leal	0x8(,%rax,8), %ecx
.Ltmp1714:
    000000da: 	movl	-0x8(%rsp), %ebx
    000000de: 	cmpl	%ecx, %ebx
    000000e0: 	jle	.Ltmp1708 # Offset: 224
    000000e2: 	subl	$0x1, %ebx
    000000e5: 	movslq	%ecx, %rdi
    000000e8: 	movq	-0x10(%rsp), %r9
    000000ed: 	movl	%ebx, %edx
    000000ef: 	subl	%ecx, %edx
    000000f1: 	leaq	(%r9,%rdi,4), %rax
    000000f5: 	addq	%rdi, %rdx
    000000f8: 	leaq	0x4(%r9,%rdx,4), %rcx
    000000fd: 	movl	$0x1, %edx
    00000102: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1709:
    00000108: 	movl	(%rax), %edi
    0000010a: 	testl	%edi, %edi
    0000010c: 	cmovnel	%edx, %esi
    0000010f: 	addq	$0x4, %rax
    00000113: 	movl	%esi, %r12d
    00000116: 	cmpq	%rcx, %rax
    00000119: 	jne	.Ltmp1709 # Offset: 281
.Ltmp1708:
    0000011b: 	testb	%r12b, %r12b
    0000011e: 	jne	.Ltmp1710 # Offset: 286
    00000120: 	movl	%r14d, %r12d
    00000123: 	testb	%r14b, %r14b
    00000126: 	je	.Ltmp1711 # Offset: 294
.Ltmp1710:
    00000128: 	testb	%r8b, %r8b
    0000012b: 	jne	.Ltmp1712 # Offset: 299
    0000012d: 	movl	%r13d, %r8d
    00000130: 	testb	%r13b, %r13b
    00000133: 	je	.Ltmp1713 # Offset: 307
.Ltmp1712:
    00000135: 	popq	%rbx
    00000136: 	movl	%r8d, %eax
    00000139: 	popq	%rbp
    0000013a: 	popq	%r12
    0000013c: 	popq	%r13
    0000013e: 	popq	%r14
    00000140: 	popq	%r15
    00000142: 	retq # Offset: 322
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1713:
    00000148: 	movzbl	-0x12(%rsp), %eax
    0000014d: 	orb	-0x11(%rsp), %r12b
    00000152: 	popq	%rbx
    00000153: 	popq	%rbp
    00000154: 	testb	%al, %al
    00000156: 	movl	%eax, %r8d
    00000159: 	cmovel	%r12d, %r8d
    0000015d: 	popq	%r12
    0000015f: 	popq	%r13
    00000161: 	popq	%r14
    00000163: 	popq	%r15
    00000165: 	movl	%r8d, %eax
    00000168: 	retq # Offset: 360
    00000169: 	nopl	(%rax) # Size: 7
.Ltmp1711:
    00000170: 	movzbl	-0x13(%rsp), %r12d
    00000176: 	testb	%r15b, %r15b
    00000179: 	cmovnel	%r15d, %r12d
    0000017d: 	jmp	.Ltmp1710 # Offset: 381
    0000017f: 	nop # Size: 1
.Ltmp1706:
    00000180: 	movb	%dl, -0x11(%rsp)
    00000184: 	movl	%edx, %r12d
    00000187: 	movl	%edx, %r13d
    0000018a: 	movl	%edx, %r15d
    0000018d: 	movb	%dl, -0x12(%rsp)
    00000191: 	movl	%edx, %r14d
    00000194: 	movl	%edx, %r8d
    00000197: 	xorl	%ecx, %ecx
    00000199: 	movb	%dl, -0x13(%rsp)
    0000019d: 	jmp	.Ltmp1714 # Offset: 413
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or8IjEbPKT_ib"

Binary Function "_Z8bit_and1IiET_PKS0_iS0_" after disassembly {
  Number      : 247
  State       : disassembled
  Address     : 0x173d0
  Size        : 0xa7
  MaxSize     : 0xb0
  Offset      : 0x173d0
  Section     : .text
  Orc Section : .local.text._Z8bit_and1IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0246:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp1715 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0x2, %eax
    00000014: 	jbe	.Ltmp1716 # Offset: 20
    0000001a: 	shrl	$0x2, %esi
    0000001d: 	movq	%rdi, %rax
    00000020: 	pcmpeqd	%xmm0, %xmm0
    00000024: 	subl	$0x1, %esi
    00000027: 	shlq	$0x4, %rsi
    0000002b: 	leaq	0x10(%rdi,%rsi), %rsi
.Ltmp1717:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	addq	$0x10, %rax
    00000038: 	pand	%xmm2, %xmm0
    0000003c: 	cmpq	%rsi, %rax
    0000003f: 	jne	.Ltmp1717 # Offset: 63
    00000041: 	movdqa	%xmm0, %xmm1
    00000045: 	psrldq	$0x8, %xmm1
    0000004a: 	pand	%xmm1, %xmm0
    0000004e: 	movdqa	%xmm0, %xmm1
    00000052: 	psrldq	$0x4, %xmm1
    00000057: 	pand	%xmm1, %xmm0
    0000005b: 	movd	%xmm0, %eax
    0000005f: 	andl	%edx, %eax
    00000061: 	movl	%ecx, %edx
    00000063: 	andl	$-0x4, %edx
    00000066: 	testb	$0x3, %cl
    00000069: 	je	.Ltmp1718 # Offset: 105
.Ltmp1720:
    0000006b: 	movslq	%edx, %rsi
    0000006e: 	leaq	(,%rsi,4), %r8
    00000076: 	andl	(%rdi,%rsi,4), %eax
    00000079: 	leal	0x1(%rdx), %esi
    0000007c: 	cmpl	%esi, %ecx
    0000007e: 	jle	.Ltmp1719 # Offset: 126
    00000080: 	addl	$0x2, %edx
    00000083: 	andl	0x4(%rdi,%r8), %eax
    00000088: 	cmpl	%edx, %ecx
    0000008a: 	jle	.Ltmp1719 # Offset: 138
    0000008c: 	andl	0x8(%rdi,%r8), %eax
    00000091: 	retq # Offset: 145
    00000092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1715:
    00000098: 	movl	%edx, %eax
.Ltmp1719:
    0000009a: 	retq # Offset: 154
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1718:
    000000a0: 	retq # Offset: 160
.Ltmp1716:
    000000a1: 	movl	%edx, %eax
    000000a3: 	xorl	%edx, %edx
    000000a5: 	jmp	.Ltmp1720 # Offset: 165
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and1IiET_PKS0_iS0_"

Binary Function "_Z8bit_and2IiET_PKS0_iS0_" after disassembly {
  Number      : 248
  State       : disassembled
  Address     : 0x17480
  Size        : 0xb5
  MaxSize     : 0xc0
  Offset      : 0x17480
  Section     : .text
  Orc Section : .local.text._Z8bit_and2IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0247:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movq	%rdi, %rcx
    0000000a: 	shlq	$0x2, %rsi
    0000000e: 	leaq	(%rdi,%rsi), %r8
    00000012: 	cmpq	%r8, %rdi
    00000015: 	je	.Ltmp1721 # Offset: 21
    0000001b: 	subq	$0x4, %rsi
    0000001f: 	movq	%rdi, %rax
    00000022: 	movq	%rsi, %rdi
    00000025: 	shrq	$0x2, %rdi
    00000029: 	addq	$0x1, %rdi
    0000002d: 	cmpq	$0x8, %rsi
    00000031: 	jbe	.Ltmp1722 # Offset: 49
    00000033: 	movq	%rdi, %rsi
    00000036: 	pcmpeqd	%xmm0, %xmm0
    0000003a: 	shrq	$0x2, %rsi
    0000003e: 	shlq	$0x4, %rsi
    00000042: 	addq	%rcx, %rsi
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp1723:
    00000048: 	movdqu	(%rax), %xmm2
    0000004c: 	addq	$0x10, %rax
    00000050: 	pand	%xmm2, %xmm0
    00000054: 	cmpq	%rax, %rsi
    00000057: 	jne	.Ltmp1723 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	psrldq	$0x8, %xmm1
    00000062: 	pand	%xmm1, %xmm0
    00000066: 	movdqa	%xmm0, %xmm1
    0000006a: 	psrldq	$0x4, %xmm1
    0000006f: 	pand	%xmm1, %xmm0
    00000073: 	movd	%xmm0, %eax
    00000077: 	andl	%edx, %eax
    00000079: 	movq	%rdi, %rdx
    0000007c: 	andq	$-0x4, %rdx
    00000080: 	leaq	(%rcx,%rdx,4), %rcx
    00000084: 	cmpq	%rdx, %rdi
    00000087: 	je	.Ltmp1724 # Offset: 135
.Ltmp1726:
    00000089: 	leaq	0x4(%rcx), %rdx
    0000008d: 	andl	(%rcx), %eax
    0000008f: 	cmpq	%rdx, %r8
    00000092: 	je	.Ltmp1725 # Offset: 146
    00000094: 	leaq	0x8(%rcx), %rdx
    00000098: 	andl	0x4(%rcx), %eax
    0000009b: 	cmpq	%rdx, %r8
    0000009e: 	je	.Ltmp1725 # Offset: 158
    000000a0: 	andl	0x8(%rcx), %eax
    000000a3: 	retq # Offset: 163
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp1721:
    000000a8: 	movl	%edx, %eax
.Ltmp1725:
    000000aa: 	retq # Offset: 170
    000000ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1724:
    000000b0: 	retq # Offset: 176
.Ltmp1722:
    000000b1: 	movl	%edx, %eax
    000000b3: 	jmp	.Ltmp1726 # Offset: 179
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and2IiET_PKS0_iS0_"

Binary Function "_Z8bit_and3IiET_PKS0_iS0_" after disassembly {
  Number      : 249
  State       : disassembled
  Address     : 0x17540
  Size        : 0xf4
  MaxSize     : 0x100
  Offset      : 0x17540
  Section     : .text
  Orc Section : .local.text._Z8bit_and3IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0248:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %r9d
    00000008: 	testl	%r9d, %r9d
    0000000b: 	jle	.Ltmp1727 # Offset: 11
    00000011: 	leal	-0x2(%rsi), %eax
    00000014: 	movl	%eax, %ecx
    00000016: 	shrl	%ecx
    00000018: 	addl	$0x1, %ecx
    0000001b: 	cmpl	$0x5, %eax
    0000001e: 	jbe	.Ltmp1728 # Offset: 30
    00000024: 	movl	%ecx, %r8d
    00000027: 	movq	%rdi, %rax
    0000002a: 	pcmpeqd	%xmm2, %xmm2
    0000002e: 	shrl	$0x2, %r8d
    00000032: 	subl	$0x1, %r8d
    00000036: 	shlq	$0x5, %r8
    0000003a: 	leaq	0x20(%rdi,%r8), %r8
    0000003f: 	nop # Size: 1
.Ltmp1729:
    00000040: 	movdqu	(%rax), %xmm0
    00000044: 	movdqu	0x10(%rax), %xmm3
    00000049: 	addq	$0x20, %rax
    0000004d: 	movdqa	%xmm0, %xmm1
    00000051: 	shufps	$0xdd, %xmm3, %xmm0
    00000055: 	shufps	$0x88, %xmm3, %xmm1
    00000059: 	pand	%xmm1, %xmm0
    0000005d: 	pand	%xmm0, %xmm2
    00000061: 	cmpq	%rax, %r8
    00000064: 	jne	.Ltmp1729 # Offset: 100
    00000066: 	movdqa	%xmm2, %xmm0
    0000006a: 	movl	%ecx, %r8d
    0000006d: 	psrldq	$0x8, %xmm0
    00000072: 	andl	$-0x4, %r8d
    00000076: 	pand	%xmm0, %xmm2
    0000007a: 	movdqa	%xmm2, %xmm0
    0000007e: 	psrldq	$0x4, %xmm0
    00000083: 	pand	%xmm0, %xmm2
    00000087: 	movd	%xmm2, %eax
    0000008b: 	andl	%edx, %eax
    0000008d: 	leal	(%r8,%r8), %edx
    00000091: 	cmpl	%r8d, %ecx
    00000094: 	je	.Ltmp1730 # Offset: 148
.Ltmp1733:
    00000096: 	movslq	%edx, %r10
    00000099: 	andl	(%rdi,%r10,4), %eax
    0000009d: 	leaq	(,%r10,4), %r8
    000000a5: 	andl	0x4(%rdi,%r10,4), %eax
    000000aa: 	leal	0x2(%rdx), %r10d
    000000ae: 	cmpl	%r9d, %r10d
    000000b1: 	jge	.Ltmp1730 # Offset: 177
    000000b3: 	movl	0x8(%rdi,%r8), %r10d
    000000b8: 	addl	$0x4, %edx
    000000bb: 	andl	0xc(%rdi,%r8), %r10d
    000000c0: 	andl	%r10d, %eax
    000000c3: 	cmpl	%edx, %r9d
    000000c6: 	jle	.Ltmp1730 # Offset: 198
    000000c8: 	movl	0x14(%rdi,%r8), %edx
    000000cd: 	andl	0x10(%rdi,%r8), %edx
    000000d2: 	andl	%edx, %eax
.Ltmp1730:
    000000d4: 	addl	%ecx, %ecx
.Ltmp1732:
    000000d6: 	cmpl	%esi, %ecx
    000000d8: 	jge	.Ltmp1731 # Offset: 216
    000000da: 	movslq	%ecx, %rcx
    000000dd: 	andl	(%rdi,%rcx,4), %eax
.Ltmp1731:
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp1727:
    000000e8: 	movl	%edx, %eax
    000000ea: 	xorl	%ecx, %ecx
    000000ec: 	jmp	.Ltmp1732 # Offset: 236
.Ltmp1728:
    000000ee: 	movl	%edx, %eax
    000000f0: 	xorl	%edx, %edx
    000000f2: 	jmp	.Ltmp1733 # Offset: 242
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and3IiET_PKS0_iS0_"

Binary Function "_Z8bit_and4IiET_PKS0_iS0_" after disassembly {
  Number      : 250
  State       : disassembled
  Address     : 0x17640
  Size        : 0x188
  MaxSize     : 0x190
  Offset      : 0x17640
  Section     : .text
  Orc Section : .local.text._Z8bit_and4IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0249:
    00000000: 	endbr64
    00000004: 	leal	-0x3(%rsi), %r9d
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%esi, %edi
    0000000d: 	testl	%r9d, %r9d
    00000010: 	jle	.Ltmp1734 # Offset: 16
    00000016: 	leal	-0x4(%rsi), %eax
    00000019: 	movl	%eax, %esi
    0000001b: 	shrl	$0x2, %esi
    0000001e: 	addl	$0x1, %esi
    00000021: 	cmpl	$0xb, %eax
    00000024: 	jbe	.Ltmp1735 # Offset: 36
    0000002a: 	movl	%esi, %r8d
    0000002d: 	movq	%rcx, %rax
    00000030: 	pcmpeqd	%xmm4, %xmm4
    00000034: 	shrl	$0x2, %r8d
    00000038: 	subl	$0x1, %r8d
    0000003c: 	shlq	$0x6, %r8
    00000040: 	leaq	0x40(%rcx,%r8), %r8
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp1736:
    00000048: 	movdqu	(%rax), %xmm0
    0000004c: 	movdqu	0x10(%rax), %xmm6
    00000051: 	addq	$0x40, %rax
    00000055: 	movdqu	-0x20(%rax), %xmm2
    0000005a: 	movdqa	%xmm0, %xmm3
    0000005e: 	shufps	$0xdd, %xmm6, %xmm0
    00000062: 	movdqa	%xmm0, %xmm1
    00000066: 	shufps	$0x88, %xmm6, %xmm3
    0000006a: 	movdqu	-0x10(%rax), %xmm6
    0000006f: 	movdqa	%xmm2, %xmm5
    00000073: 	shufps	$0xdd, %xmm6, %xmm2
    00000077: 	shufps	$0x88, %xmm2, %xmm1
    0000007b: 	shufps	$0xdd, %xmm2, %xmm0
    0000007f: 	pand	%xmm1, %xmm0
    00000083: 	movdqa	%xmm3, %xmm1
    00000087: 	shufps	$0x88, %xmm6, %xmm5
    0000008b: 	shufps	$0xdd, %xmm5, %xmm3
    0000008f: 	shufps	$0x88, %xmm5, %xmm1
    00000093: 	pand	%xmm3, %xmm1
    00000097: 	pand	%xmm1, %xmm0
    0000009b: 	pand	%xmm0, %xmm4
    0000009f: 	cmpq	%rax, %r8
    000000a2: 	jne	.Ltmp1736 # Offset: 162
    000000a4: 	movdqa	%xmm4, %xmm0
    000000a8: 	psrldq	$0x8, %xmm0
    000000ad: 	pand	%xmm0, %xmm4
    000000b1: 	movdqa	%xmm4, %xmm0
    000000b5: 	psrldq	$0x4, %xmm0
    000000ba: 	pand	%xmm0, %xmm4
    000000be: 	movd	%xmm4, %eax
    000000c2: 	andl	%edx, %eax
    000000c4: 	movl	%esi, %edx
    000000c6: 	andl	$-0x4, %edx
    000000c9: 	leal	(,%rdx,4), %r10d
    000000d1: 	cmpl	%esi, %edx
    000000d3: 	je	.Ltmp1737 # Offset: 211
.Ltmp1740:
    000000d5: 	movslq	%r10d, %r8
    000000d8: 	andl	(%rcx,%r8,4), %eax
    000000dc: 	leaq	(,%r8,4), %rdx
    000000e4: 	andl	0x4(%rcx,%r8,4), %eax
    000000e9: 	andl	0x8(%rcx,%r8,4), %eax
    000000ee: 	andl	0xc(%rcx,%r8,4), %eax
    000000f3: 	leal	0x4(%r10), %r8d
    000000f7: 	cmpl	%r8d, %r9d
    000000fa: 	jle	.Ltmp1737 # Offset: 250
    000000fc: 	movl	0x14(%rcx,%rdx), %r8d
    00000101: 	addl	$0x8, %r10d
    00000105: 	andl	0x18(%rcx,%rdx), %r8d
    0000010a: 	andl	0x10(%rcx,%rdx), %r8d
    0000010f: 	andl	0x1c(%rcx,%rdx), %r8d
    00000114: 	andl	%r8d, %eax
    00000117: 	cmpl	%r10d, %r9d
    0000011a: 	jle	.Ltmp1737 # Offset: 282
    0000011c: 	movl	0x28(%rcx,%rdx), %r8d
    00000121: 	andl	0x24(%rcx,%rdx), %r8d
    00000126: 	andl	0x20(%rcx,%rdx), %r8d
    0000012b: 	andl	0x2c(%rcx,%rdx), %r8d
    00000130: 	andl	%r8d, %eax
.Ltmp1737:
    00000133: 	leal	(,%rsi,4), %edx
.Ltmp1739:
    0000013a: 	cmpl	%edx, %edi
    0000013c: 	jle	.Ltmp1738 # Offset: 316
    0000013e: 	movslq	%edx, %rsi
    00000141: 	leaq	(,%rsi,4), %r8
    00000149: 	andl	(%rcx,%rsi,4), %eax
    0000014c: 	leal	0x1(%rdx), %esi
    0000014f: 	cmpl	%edi, %esi
    00000151: 	jge	.Ltmp1738 # Offset: 337
    00000153: 	leal	0x2(%rdx), %esi
    00000156: 	andl	0x4(%rcx,%r8), %eax
    0000015b: 	cmpl	%esi, %edi
    0000015d: 	jle	.Ltmp1738 # Offset: 349
    0000015f: 	addl	$0x3, %edx
    00000162: 	andl	0x8(%rcx,%r8), %eax
    00000167: 	cmpl	%edx, %edi
    00000169: 	jle	.Ltmp1738 # Offset: 361
    0000016b: 	andl	0xc(%rcx,%r8), %eax
.Ltmp1738:
    00000170: 	retq # Offset: 368
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp1734:
    00000178: 	movl	%edx, %eax
    0000017a: 	xorl	%edx, %edx
    0000017c: 	jmp	.Ltmp1739 # Offset: 380
.Ltmp1735:
    0000017e: 	movl	%edx, %eax
    00000180: 	xorl	%r10d, %r10d
    00000183: 	jmp	.Ltmp1740 # Offset: 387
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and4IiET_PKS0_iS0_"

Binary Function "_Z8bit_and5IiET_PKS0_iS0_" after disassembly {
  Number      : 251
  State       : disassembled
  Address     : 0x177d0
  Size        : 0x163
  MaxSize     : 0x170
  Offset      : 0x177d0
  Section     : .text
  Orc Section : .local.text._Z8bit_and5IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0250:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %r9d
    0000000a: 	movl	%edx, %eax
    0000000c: 	cmpl	$0x1, %esi
    0000000f: 	jle	.Ltmp1741 # Offset: 15
    00000015: 	leal	-0x2(%rsi), %edx
    00000018: 	movl	%edx, %r10d
    0000001b: 	shrl	%r10d
    0000001e: 	addl	$0x1, %r10d
    00000022: 	cmpl	$0x1, %edx
    00000025: 	jbe	.Ltmp1742 # Offset: 37
    0000002b: 	movl	%r10d, %edx
    0000002e: 	movd	%eax, %xmm0
    00000032: 	movq	%rdi, %rax
    00000035: 	shrl	%edx
    00000037: 	punpckldq	%xmm0, %xmm0
    0000003b: 	subl	$0x1, %edx
    0000003e: 	movhps	DATAat0x33590(%rip), %xmm0
    00000045: 	shlq	$0x4, %rdx
    00000049: 	leaq	0x10(%rdi,%rdx), %rdx
    0000004e: 	nop # Size: 2
.Ltmp1743:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	pand	%xmm2, %xmm0
    0000005c: 	cmpq	%rax, %rdx
    0000005f: 	jne	.Ltmp1743 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	movd	%xmm0, %eax
    00000069: 	movl	%r10d, %edi
    0000006c: 	punpckhdq	%xmm0, %xmm1
    00000070: 	andl	$-0x2, %edi
    00000073: 	movd	%xmm1, %edx
    00000077: 	pshufd	$0x55, %xmm0, %xmm1
    0000007c: 	pshufd	$0xff, %xmm0, %xmm0
    00000081: 	andl	%edx, %eax
    00000083: 	movd	%xmm1, %esi
    00000087: 	movd	%xmm0, %edx
    0000008b: 	andl	%edx, %esi
    0000008d: 	leal	(%rdi,%rdi), %edx
    00000090: 	cmpl	%edi, %r10d
    00000093: 	je	.Ltmp1744 # Offset: 147
.Ltmp1750:
    00000095: 	movslq	%edx, %rdx
    00000098: 	andl	(%rcx,%rdx,4), %eax
    0000009b: 	andl	0x4(%rcx,%rdx,4), %esi
.Ltmp1744:
    0000009f: 	addl	%r10d, %r10d
.Ltmp1749:
    000000a2: 	cmpl	%r10d, %r9d
    000000a5: 	jle	.Ltmp1745 # Offset: 165
    000000ab: 	movl	%r9d, %r11d
    000000ae: 	subl	%r10d, %r11d
    000000b1: 	leal	-0x1(%r11), %edx
    000000b5: 	cmpl	$0x2, %edx
    000000b8: 	jbe	.Ltmp1746 # Offset: 184
    000000ba: 	movslq	%r10d, %rdx
    000000bd: 	pcmpeqd	%xmm0, %xmm0
    000000c1: 	leaq	(%rcx,%rdx,4), %rdi
    000000c5: 	movl	%r11d, %edx
    000000c8: 	shrl	$0x2, %edx
    000000cb: 	leal	-0x1(%rdx), %r8d
    000000cf: 	leaq	0x10(%rdi), %rdx
    000000d3: 	shlq	$0x4, %r8
    000000d7: 	addq	%rdx, %r8
    000000da: 	jmp	.Ltmp1747 # Offset: 218
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp1748:
    000000e0: 	addq	$0x10, %rdx
.Ltmp1747:
    000000e4: 	movdqu	(%rdi), %xmm1
    000000e8: 	movq	%rdx, %rdi
    000000eb: 	pand	%xmm1, %xmm0
    000000ef: 	cmpq	%rdx, %r8
    000000f2: 	jne	.Ltmp1748 # Offset: 242
    000000f4: 	movdqa	%xmm0, %xmm1
    000000f8: 	psrldq	$0x8, %xmm1
    000000fd: 	pand	%xmm1, %xmm0
    00000101: 	movdqa	%xmm0, %xmm1
    00000105: 	psrldq	$0x4, %xmm1
    0000010a: 	pand	%xmm1, %xmm0
    0000010e: 	movd	%xmm0, %edx
    00000112: 	andl	%edx, %eax
    00000114: 	movl	%r11d, %edx
    00000117: 	andl	$-0x4, %edx
    0000011a: 	addl	%edx, %r10d
    0000011d: 	cmpl	%r11d, %edx
    00000120: 	je	.Ltmp1745 # Offset: 288
.Ltmp1746:
    00000122: 	movslq	%r10d, %rdx
    00000125: 	leaq	(,%rdx,4), %rdi
    0000012d: 	andl	(%rcx,%rdx,4), %eax
    00000130: 	leal	0x1(%r10), %edx
    00000134: 	cmpl	%edx, %r9d
    00000137: 	jle	.Ltmp1745 # Offset: 311
    00000139: 	addl	$0x2, %r10d
    0000013d: 	andl	0x4(%rcx,%rdi), %eax
    00000141: 	cmpl	%r10d, %r9d
    00000144: 	jle	.Ltmp1745 # Offset: 324
    00000146: 	andl	0x8(%rcx,%rdi), %eax
.Ltmp1745:
    0000014a: 	andl	%esi, %eax
    0000014c: 	retq # Offset: 332
    0000014d: 	nopl	(%rax) # Size: 3
.Ltmp1741:
    00000150: 	movl	%edx, %esi
    00000152: 	xorl	%r10d, %r10d
    00000155: 	jmp	.Ltmp1749 # Offset: 341
.Ltmp1742:
    0000015a: 	movl	%eax, %esi
    0000015c: 	xorl	%edx, %edx
    0000015e: 	jmp	.Ltmp1750 # Offset: 350
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and5IiET_PKS0_iS0_"

Binary Function "_Z8bit_and6IiET_PKS0_iS0_" after disassembly {
  Number      : 252
  State       : disassembled
  Address     : 0x17940
  Size        : 0x12a
  MaxSize     : 0x130
  Offset      : 0x17940
  Section     : .text
  Orc Section : .local.text._Z8bit_and6IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0251:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r9d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp1751 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %ecx
    00000015: 	movd	%edx, %xmm2
    00000019: 	xorl	%eax, %eax
    0000001b: 	shrl	$0x2, %ecx
    0000001e: 	pshufd	$0x0, %xmm2, %xmm0
    00000023: 	addl	$0x1, %ecx
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1752:
    00000030: 	movq	%rax, %rdx
    00000033: 	addq	$0x1, %rax
    00000037: 	shlq	$0x4, %rdx
    0000003b: 	movdqu	(%rdi,%rdx), %xmm1
    00000040: 	pand	%xmm1, %xmm0
    00000044: 	cmpl	%eax, %ecx
    00000046: 	ja	.Ltmp1752 # Offset: 70
    00000048: 	pshufd	$0x55, %xmm0, %xmm1
    0000004d: 	movd	%xmm0, %eax
    00000051: 	shll	$0x2, %ecx
    00000054: 	movd	%xmm1, %r10d
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	punpckhdq	%xmm0, %xmm1
    00000061: 	pshufd	$0xff, %xmm0, %xmm0
    00000066: 	movd	%xmm1, %edx
    0000006a: 	andl	%edx, %r10d
    0000006d: 	movd	%xmm0, %edx
    00000071: 	andl	%edx, %r10d
.Ltmp1757:
    00000074: 	cmpl	%ecx, %r9d
    00000077: 	jle	.Ltmp1753 # Offset: 119
    0000007d: 	movl	%r9d, %r11d
    00000080: 	subl	%ecx, %r11d
    00000083: 	leal	-0x1(%r11), %edx
    00000087: 	cmpl	$0x2, %edx
    0000008a: 	jbe	.Ltmp1754 # Offset: 138
    0000008c: 	movslq	%ecx, %rdx
    0000008f: 	pcmpeqd	%xmm0, %xmm0
    00000093: 	leaq	(%rdi,%rdx,4), %rsi
    00000097: 	movl	%r11d, %edx
    0000009a: 	shrl	$0x2, %edx
    0000009d: 	leal	-0x1(%rdx), %r8d
    000000a1: 	leaq	0x10(%rsi), %rdx
    000000a5: 	shlq	$0x4, %r8
    000000a9: 	addq	%rdx, %r8
    000000ac: 	jmp	.Ltmp1755 # Offset: 172
    000000ae: 	nop # Size: 2
.Ltmp1756:
    000000b0: 	addq	$0x10, %rdx
.Ltmp1755:
    000000b4: 	movdqu	(%rsi), %xmm1
    000000b8: 	movq	%rdx, %rsi
    000000bb: 	pand	%xmm1, %xmm0
    000000bf: 	cmpq	%rdx, %r8
    000000c2: 	jne	.Ltmp1756 # Offset: 194
    000000c4: 	movdqa	%xmm0, %xmm1
    000000c8: 	psrldq	$0x8, %xmm1
    000000cd: 	pand	%xmm1, %xmm0
    000000d1: 	movdqa	%xmm0, %xmm1
    000000d5: 	psrldq	$0x4, %xmm1
    000000da: 	pand	%xmm1, %xmm0
    000000de: 	movd	%xmm0, %edx
    000000e2: 	andl	%edx, %eax
    000000e4: 	movl	%r11d, %edx
    000000e7: 	andl	$-0x4, %edx
    000000ea: 	addl	%edx, %ecx
    000000ec: 	cmpl	%r11d, %edx
    000000ef: 	je	.Ltmp1753 # Offset: 239
.Ltmp1754:
    000000f1: 	movslq	%ecx, %rdx
    000000f4: 	leaq	(,%rdx,4), %rsi
    000000fc: 	andl	(%rdi,%rdx,4), %eax
    000000ff: 	leal	0x1(%rcx), %edx
    00000102: 	cmpl	%edx, %r9d
    00000105: 	jle	.Ltmp1753 # Offset: 261
    00000107: 	addl	$0x2, %ecx
    0000010a: 	andl	0x4(%rdi,%rsi), %eax
    0000010e: 	cmpl	%r9d, %ecx
    00000111: 	jge	.Ltmp1753 # Offset: 273
    00000113: 	andl	0x8(%rdi,%rsi), %eax
.Ltmp1753:
    00000117: 	andl	%r10d, %eax
    0000011a: 	retq # Offset: 282
    0000011b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1751:
    00000120: 	movl	%edx, %r10d
    00000123: 	xorl	%ecx, %ecx
    00000125: 	jmp	.Ltmp1757 # Offset: 293
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and6IiET_PKS0_iS0_"

Binary Function "_Z8bit_and7IiET_PKS0_iS0_" after disassembly {
  Number      : 253
  State       : disassembled
  Address     : 0x17a70
  Size        : 0x12a
  MaxSize     : 0x130
  Offset      : 0x17a70
  Section     : .text
  Orc Section : .local.text._Z8bit_and7IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0252:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r9d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp1758 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %ecx
    00000015: 	movd	%edx, %xmm2
    00000019: 	xorl	%eax, %eax
    0000001b: 	shrl	$0x2, %ecx
    0000001e: 	pshufd	$0x0, %xmm2, %xmm0
    00000023: 	addl	$0x1, %ecx
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1759:
    00000030: 	movq	%rax, %rdx
    00000033: 	addq	$0x1, %rax
    00000037: 	shlq	$0x4, %rdx
    0000003b: 	movdqu	(%rdi,%rdx), %xmm1
    00000040: 	pand	%xmm1, %xmm0
    00000044: 	cmpl	%eax, %ecx
    00000046: 	ja	.Ltmp1759 # Offset: 70
    00000048: 	pshufd	$0x55, %xmm0, %xmm1
    0000004d: 	movd	%xmm0, %eax
    00000051: 	shll	$0x2, %ecx
    00000054: 	movd	%xmm1, %r10d
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	punpckhdq	%xmm0, %xmm1
    00000061: 	pshufd	$0xff, %xmm0, %xmm0
    00000066: 	movd	%xmm1, %edx
    0000006a: 	andl	%edx, %r10d
    0000006d: 	movd	%xmm0, %edx
    00000071: 	andl	%edx, %r10d
.Ltmp1764:
    00000074: 	cmpl	%ecx, %r9d
    00000077: 	jle	.Ltmp1760 # Offset: 119
    0000007d: 	movl	%r9d, %r11d
    00000080: 	subl	%ecx, %r11d
    00000083: 	leal	-0x1(%r11), %edx
    00000087: 	cmpl	$0x2, %edx
    0000008a: 	jbe	.Ltmp1761 # Offset: 138
    0000008c: 	movslq	%ecx, %rdx
    0000008f: 	pcmpeqd	%xmm0, %xmm0
    00000093: 	leaq	(%rdi,%rdx,4), %rsi
    00000097: 	movl	%r11d, %edx
    0000009a: 	shrl	$0x2, %edx
    0000009d: 	leal	-0x1(%rdx), %r8d
    000000a1: 	leaq	0x10(%rsi), %rdx
    000000a5: 	shlq	$0x4, %r8
    000000a9: 	addq	%rdx, %r8
    000000ac: 	jmp	.Ltmp1762 # Offset: 172
    000000ae: 	nop # Size: 2
.Ltmp1763:
    000000b0: 	addq	$0x10, %rdx
.Ltmp1762:
    000000b4: 	movdqu	(%rsi), %xmm1
    000000b8: 	movq	%rdx, %rsi
    000000bb: 	pand	%xmm1, %xmm0
    000000bf: 	cmpq	%rdx, %r8
    000000c2: 	jne	.Ltmp1763 # Offset: 194
    000000c4: 	movdqa	%xmm0, %xmm1
    000000c8: 	psrldq	$0x8, %xmm1
    000000cd: 	pand	%xmm1, %xmm0
    000000d1: 	movdqa	%xmm0, %xmm1
    000000d5: 	psrldq	$0x4, %xmm1
    000000da: 	pand	%xmm1, %xmm0
    000000de: 	movd	%xmm0, %edx
    000000e2: 	andl	%edx, %eax
    000000e4: 	movl	%r11d, %edx
    000000e7: 	andl	$-0x4, %edx
    000000ea: 	addl	%edx, %ecx
    000000ec: 	cmpl	%r11d, %edx
    000000ef: 	je	.Ltmp1760 # Offset: 239
.Ltmp1761:
    000000f1: 	movslq	%ecx, %rdx
    000000f4: 	leaq	(,%rdx,4), %rsi
    000000fc: 	andl	(%rdi,%rdx,4), %eax
    000000ff: 	leal	0x1(%rcx), %edx
    00000102: 	cmpl	%edx, %r9d
    00000105: 	jle	.Ltmp1760 # Offset: 261
    00000107: 	addl	$0x2, %ecx
    0000010a: 	andl	0x4(%rdi,%rsi), %eax
    0000010e: 	cmpl	%r9d, %ecx
    00000111: 	jge	.Ltmp1760 # Offset: 273
    00000113: 	andl	0x8(%rdi,%rsi), %eax
.Ltmp1760:
    00000117: 	andl	%r10d, %eax
    0000011a: 	retq # Offset: 282
    0000011b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1758:
    00000120: 	movl	%edx, %r10d
    00000123: 	xorl	%ecx, %ecx
    00000125: 	jmp	.Ltmp1764 # Offset: 293
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and7IiET_PKS0_iS0_"

Binary Function "_Z8bit_and8IiET_PKS0_iS0_" after disassembly {
  Number      : 254
  State       : disassembled
  Address     : 0x17ba0
  Size        : 0x159
  MaxSize     : 0x160
  Offset      : 0x17ba0
  Section     : .text
  Orc Section : .local.text._Z8bit_and8IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0253:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x7, %esi
    0000000c: 	jle	.Ltmp1765 # Offset: 12
    00000012: 	movd	%edx, %xmm5
    00000016: 	leal	-0x8(%rsi), %ecx
    00000019: 	movq	%rdi, %rax
    0000001c: 	xorl	%edx, %edx
    0000001e: 	shrl	$0x3, %ecx
    00000021: 	pshufd	$0x0, %xmm5, %xmm0
    00000026: 	addl	$0x1, %ecx
    00000029: 	movdqa	%xmm0, %xmm1
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp1766:
    00000030: 	movdqu	(%rax), %xmm3
    00000034: 	movdqu	0x10(%rax), %xmm4
    00000039: 	addl	$0x1, %edx
    0000003c: 	addq	$0x20, %rax
    00000040: 	pand	%xmm3, %xmm0
    00000044: 	pand	%xmm4, %xmm1
    00000048: 	cmpl	%edx, %ecx
    0000004a: 	ja	.Ltmp1766 # Offset: 74
    0000004c: 	movdqa	%xmm0, %xmm2
    00000050: 	leal	(,%rcx,8), %esi
    00000057: 	movd	%xmm0, %eax
    0000005b: 	punpckhdq	%xmm0, %xmm2
    0000005f: 	movd	%xmm2, %ecx
    00000063: 	pshufd	$0x55, %xmm0, %xmm2
    00000068: 	pshufd	$0xff, %xmm0, %xmm0
    0000006d: 	movd	%xmm2, %edx
    00000071: 	andl	%edx, %ecx
    00000073: 	movd	%xmm0, %edx
    00000077: 	pshufd	$0x55, %xmm1, %xmm0
    0000007c: 	andl	%edx, %ecx
    0000007e: 	movd	%xmm1, %edx
    00000082: 	andl	%edx, %ecx
    00000084: 	movd	%xmm0, %edx
    00000088: 	movdqa	%xmm1, %xmm0
    0000008c: 	punpckhdq	%xmm1, %xmm0
    00000090: 	andl	%edx, %ecx
    00000092: 	pshufd	$0xff, %xmm1, %xmm1
    00000097: 	movd	%xmm0, %edx
    0000009b: 	andl	%edx, %ecx
    0000009d: 	movd	%xmm1, %edx
    000000a1: 	andl	%edx, %ecx
.Ltmp1771:
    000000a3: 	cmpl	%esi, %r8d
    000000a6: 	jle	.Ltmp1767 # Offset: 166
    000000ac: 	movl	%r8d, %r11d
    000000af: 	subl	%esi, %r11d
    000000b2: 	leal	-0x1(%r11), %edx
    000000b6: 	cmpl	$0x2, %edx
    000000b9: 	jbe	.Ltmp1768 # Offset: 185
    000000bb: 	movslq	%esi, %rdx
    000000be: 	pcmpeqd	%xmm0, %xmm0
    000000c2: 	leaq	(%rdi,%rdx,4), %r9
    000000c6: 	movl	%r11d, %edx
    000000c9: 	shrl	$0x2, %edx
    000000cc: 	leal	-0x1(%rdx), %r10d
    000000d0: 	leaq	0x10(%r9), %rdx
    000000d4: 	shlq	$0x4, %r10
    000000d8: 	addq	%rdx, %r10
    000000db: 	jmp	.Ltmp1769 # Offset: 219
    000000dd: 	nopl	(%rax) # Size: 3
.Ltmp1770:
    000000e0: 	addq	$0x10, %rdx
.Ltmp1769:
    000000e4: 	movdqu	(%r9), %xmm1
    000000e9: 	movq	%rdx, %r9
    000000ec: 	pand	%xmm1, %xmm0
    000000f0: 	cmpq	%rdx, %r10
    000000f3: 	jne	.Ltmp1770 # Offset: 243
    000000f5: 	movdqa	%xmm0, %xmm1
    000000f9: 	psrldq	$0x8, %xmm1
    000000fe: 	pand	%xmm1, %xmm0
    00000102: 	movdqa	%xmm0, %xmm1
    00000106: 	psrldq	$0x4, %xmm1
    0000010b: 	pand	%xmm1, %xmm0
    0000010f: 	movd	%xmm0, %edx
    00000113: 	andl	%edx, %eax
    00000115: 	movl	%r11d, %edx
    00000118: 	andl	$-0x4, %edx
    0000011b: 	addl	%edx, %esi
    0000011d: 	cmpl	%r11d, %edx
    00000120: 	je	.Ltmp1767 # Offset: 288
.Ltmp1768:
    00000122: 	movslq	%esi, %rdx
    00000125: 	leaq	(,%rdx,4), %r9
    0000012d: 	andl	(%rdi,%rdx,4), %eax
    00000130: 	leal	0x1(%rsi), %edx
    00000133: 	cmpl	%edx, %r8d
    00000136: 	jle	.Ltmp1767 # Offset: 310
    00000138: 	addl	$0x2, %esi
    0000013b: 	andl	0x4(%rdi,%r9), %eax
    00000140: 	cmpl	%r8d, %esi
    00000143: 	jge	.Ltmp1767 # Offset: 323
    00000145: 	andl	0x8(%rdi,%r9), %eax
.Ltmp1767:
    0000014a: 	andl	%ecx, %eax
    0000014c: 	retq # Offset: 332
    0000014d: 	nopl	(%rax) # Size: 3
.Ltmp1765:
    00000150: 	movl	%edx, %ecx
    00000152: 	xorl	%esi, %esi
    00000154: 	jmp	.Ltmp1771 # Offset: 340
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and8IiET_PKS0_iS0_"

Binary Function "_Z7bit_or1IiET_PKS0_iS0_" after disassembly {
  Number      : 255
  State       : disassembled
  Address     : 0x17d00
  Size        : 0xa7
  MaxSize     : 0xb0
  Offset      : 0x17d00
  Section     : .text
  Orc Section : .local.text._Z7bit_or1IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0254:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp1772 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0x2, %eax
    00000014: 	jbe	.Ltmp1773 # Offset: 20
    0000001a: 	shrl	$0x2, %esi
    0000001d: 	movq	%rdi, %rax
    00000020: 	pxor	%xmm0, %xmm0
    00000024: 	subl	$0x1, %esi
    00000027: 	shlq	$0x4, %rsi
    0000002b: 	leaq	0x10(%rdi,%rsi), %rsi
.Ltmp1774:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	addq	$0x10, %rax
    00000038: 	por	%xmm2, %xmm0
    0000003c: 	cmpq	%rsi, %rax
    0000003f: 	jne	.Ltmp1774 # Offset: 63
    00000041: 	movdqa	%xmm0, %xmm1
    00000045: 	psrldq	$0x8, %xmm1
    0000004a: 	por	%xmm1, %xmm0
    0000004e: 	movdqa	%xmm0, %xmm1
    00000052: 	psrldq	$0x4, %xmm1
    00000057: 	por	%xmm1, %xmm0
    0000005b: 	movd	%xmm0, %eax
    0000005f: 	orl	%edx, %eax
    00000061: 	movl	%ecx, %edx
    00000063: 	andl	$-0x4, %edx
    00000066: 	testb	$0x3, %cl
    00000069: 	je	.Ltmp1775 # Offset: 105
.Ltmp1777:
    0000006b: 	movslq	%edx, %rsi
    0000006e: 	leaq	(,%rsi,4), %r8
    00000076: 	orl	(%rdi,%rsi,4), %eax
    00000079: 	leal	0x1(%rdx), %esi
    0000007c: 	cmpl	%esi, %ecx
    0000007e: 	jle	.Ltmp1776 # Offset: 126
    00000080: 	addl	$0x2, %edx
    00000083: 	orl	0x4(%rdi,%r8), %eax
    00000088: 	cmpl	%edx, %ecx
    0000008a: 	jle	.Ltmp1776 # Offset: 138
    0000008c: 	orl	0x8(%rdi,%r8), %eax
    00000091: 	retq # Offset: 145
    00000092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1772:
    00000098: 	movl	%edx, %eax
.Ltmp1776:
    0000009a: 	retq # Offset: 154
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1775:
    000000a0: 	retq # Offset: 160
.Ltmp1773:
    000000a1: 	movl	%edx, %eax
    000000a3: 	xorl	%edx, %edx
    000000a5: 	jmp	.Ltmp1777 # Offset: 165
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or1IiET_PKS0_iS0_"

Binary Function "_Z7bit_or2IiET_PKS0_iS0_" after disassembly {
  Number      : 256
  State       : disassembled
  Address     : 0x17db0
  Size        : 0xb5
  MaxSize     : 0xc0
  Offset      : 0x17db0
  Section     : .text
  Orc Section : .local.text._Z7bit_or2IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0255:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movq	%rdi, %rcx
    0000000a: 	shlq	$0x2, %rsi
    0000000e: 	leaq	(%rdi,%rsi), %r8
    00000012: 	cmpq	%r8, %rdi
    00000015: 	je	.Ltmp1778 # Offset: 21
    0000001b: 	subq	$0x4, %rsi
    0000001f: 	movq	%rdi, %rax
    00000022: 	movq	%rsi, %rdi
    00000025: 	shrq	$0x2, %rdi
    00000029: 	addq	$0x1, %rdi
    0000002d: 	cmpq	$0x8, %rsi
    00000031: 	jbe	.Ltmp1779 # Offset: 49
    00000033: 	movq	%rdi, %rsi
    00000036: 	pxor	%xmm0, %xmm0
    0000003a: 	shrq	$0x2, %rsi
    0000003e: 	shlq	$0x4, %rsi
    00000042: 	addq	%rcx, %rsi
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp1780:
    00000048: 	movdqu	(%rax), %xmm2
    0000004c: 	addq	$0x10, %rax
    00000050: 	por	%xmm2, %xmm0
    00000054: 	cmpq	%rax, %rsi
    00000057: 	jne	.Ltmp1780 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	psrldq	$0x8, %xmm1
    00000062: 	por	%xmm1, %xmm0
    00000066: 	movdqa	%xmm0, %xmm1
    0000006a: 	psrldq	$0x4, %xmm1
    0000006f: 	por	%xmm1, %xmm0
    00000073: 	movd	%xmm0, %eax
    00000077: 	orl	%edx, %eax
    00000079: 	movq	%rdi, %rdx
    0000007c: 	andq	$-0x4, %rdx
    00000080: 	leaq	(%rcx,%rdx,4), %rcx
    00000084: 	cmpq	%rdx, %rdi
    00000087: 	je	.Ltmp1781 # Offset: 135
.Ltmp1783:
    00000089: 	leaq	0x4(%rcx), %rdx
    0000008d: 	orl	(%rcx), %eax
    0000008f: 	cmpq	%rdx, %r8
    00000092: 	je	.Ltmp1782 # Offset: 146
    00000094: 	leaq	0x8(%rcx), %rdx
    00000098: 	orl	0x4(%rcx), %eax
    0000009b: 	cmpq	%rdx, %r8
    0000009e: 	je	.Ltmp1782 # Offset: 158
    000000a0: 	orl	0x8(%rcx), %eax
    000000a3: 	retq # Offset: 163
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp1778:
    000000a8: 	movl	%edx, %eax
.Ltmp1782:
    000000aa: 	retq # Offset: 170
    000000ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1781:
    000000b0: 	retq # Offset: 176
.Ltmp1779:
    000000b1: 	movl	%edx, %eax
    000000b3: 	jmp	.Ltmp1783 # Offset: 179
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or2IiET_PKS0_iS0_"

Binary Function "_Z7bit_or3IiET_PKS0_iS0_" after disassembly {
  Number      : 257
  State       : disassembled
  Address     : 0x17e70
  Size        : 0xf4
  MaxSize     : 0x100
  Offset      : 0x17e70
  Section     : .text
  Orc Section : .local.text._Z7bit_or3IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0256:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %r9d
    00000008: 	testl	%r9d, %r9d
    0000000b: 	jle	.Ltmp1784 # Offset: 11
    00000011: 	leal	-0x2(%rsi), %eax
    00000014: 	movl	%eax, %ecx
    00000016: 	shrl	%ecx
    00000018: 	addl	$0x1, %ecx
    0000001b: 	cmpl	$0x5, %eax
    0000001e: 	jbe	.Ltmp1785 # Offset: 30
    00000024: 	movl	%ecx, %r8d
    00000027: 	movq	%rdi, %rax
    0000002a: 	pxor	%xmm2, %xmm2
    0000002e: 	shrl	$0x2, %r8d
    00000032: 	subl	$0x1, %r8d
    00000036: 	shlq	$0x5, %r8
    0000003a: 	leaq	0x20(%rdi,%r8), %r8
    0000003f: 	nop # Size: 1
.Ltmp1786:
    00000040: 	movdqu	(%rax), %xmm0
    00000044: 	movdqu	0x10(%rax), %xmm3
    00000049: 	addq	$0x20, %rax
    0000004d: 	movdqa	%xmm0, %xmm1
    00000051: 	shufps	$0xdd, %xmm3, %xmm0
    00000055: 	shufps	$0x88, %xmm3, %xmm1
    00000059: 	por	%xmm1, %xmm0
    0000005d: 	por	%xmm0, %xmm2
    00000061: 	cmpq	%rax, %r8
    00000064: 	jne	.Ltmp1786 # Offset: 100
    00000066: 	movdqa	%xmm2, %xmm0
    0000006a: 	movl	%ecx, %r8d
    0000006d: 	psrldq	$0x8, %xmm0
    00000072: 	andl	$-0x4, %r8d
    00000076: 	por	%xmm0, %xmm2
    0000007a: 	movdqa	%xmm2, %xmm0
    0000007e: 	psrldq	$0x4, %xmm0
    00000083: 	por	%xmm0, %xmm2
    00000087: 	movd	%xmm2, %eax
    0000008b: 	orl	%edx, %eax
    0000008d: 	leal	(%r8,%r8), %edx
    00000091: 	cmpl	%r8d, %ecx
    00000094: 	je	.Ltmp1787 # Offset: 148
.Ltmp1790:
    00000096: 	movslq	%edx, %r10
    00000099: 	orl	(%rdi,%r10,4), %eax
    0000009d: 	leaq	(,%r10,4), %r8
    000000a5: 	orl	0x4(%rdi,%r10,4), %eax
    000000aa: 	leal	0x2(%rdx), %r10d
    000000ae: 	cmpl	%r9d, %r10d
    000000b1: 	jge	.Ltmp1787 # Offset: 177
    000000b3: 	movl	0x8(%rdi,%r8), %r10d
    000000b8: 	addl	$0x4, %edx
    000000bb: 	orl	0xc(%rdi,%r8), %r10d
    000000c0: 	orl	%r10d, %eax
    000000c3: 	cmpl	%edx, %r9d
    000000c6: 	jle	.Ltmp1787 # Offset: 198
    000000c8: 	movl	0x14(%rdi,%r8), %edx
    000000cd: 	orl	0x10(%rdi,%r8), %edx
    000000d2: 	orl	%edx, %eax
.Ltmp1787:
    000000d4: 	addl	%ecx, %ecx
.Ltmp1789:
    000000d6: 	cmpl	%esi, %ecx
    000000d8: 	jge	.Ltmp1788 # Offset: 216
    000000da: 	movslq	%ecx, %rcx
    000000dd: 	orl	(%rdi,%rcx,4), %eax
.Ltmp1788:
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp1784:
    000000e8: 	movl	%edx, %eax
    000000ea: 	xorl	%ecx, %ecx
    000000ec: 	jmp	.Ltmp1789 # Offset: 236
.Ltmp1785:
    000000ee: 	movl	%edx, %eax
    000000f0: 	xorl	%edx, %edx
    000000f2: 	jmp	.Ltmp1790 # Offset: 242
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or3IiET_PKS0_iS0_"

Binary Function "_Z7bit_or4IiET_PKS0_iS0_" after disassembly {
  Number      : 258
  State       : disassembled
  Address     : 0x17f70
  Size        : 0x188
  MaxSize     : 0x190
  Offset      : 0x17f70
  Section     : .text
  Orc Section : .local.text._Z7bit_or4IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0257:
    00000000: 	endbr64
    00000004: 	leal	-0x3(%rsi), %r9d
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%esi, %edi
    0000000d: 	testl	%r9d, %r9d
    00000010: 	jle	.Ltmp1791 # Offset: 16
    00000016: 	leal	-0x4(%rsi), %eax
    00000019: 	movl	%eax, %esi
    0000001b: 	shrl	$0x2, %esi
    0000001e: 	addl	$0x1, %esi
    00000021: 	cmpl	$0xb, %eax
    00000024: 	jbe	.Ltmp1792 # Offset: 36
    0000002a: 	movl	%esi, %r8d
    0000002d: 	movq	%rcx, %rax
    00000030: 	pxor	%xmm4, %xmm4
    00000034: 	shrl	$0x2, %r8d
    00000038: 	subl	$0x1, %r8d
    0000003c: 	shlq	$0x6, %r8
    00000040: 	leaq	0x40(%rcx,%r8), %r8
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp1793:
    00000048: 	movdqu	(%rax), %xmm0
    0000004c: 	movdqu	0x10(%rax), %xmm6
    00000051: 	addq	$0x40, %rax
    00000055: 	movdqu	-0x20(%rax), %xmm2
    0000005a: 	movdqa	%xmm0, %xmm3
    0000005e: 	shufps	$0xdd, %xmm6, %xmm0
    00000062: 	movdqa	%xmm0, %xmm1
    00000066: 	shufps	$0x88, %xmm6, %xmm3
    0000006a: 	movdqu	-0x10(%rax), %xmm6
    0000006f: 	movdqa	%xmm2, %xmm5
    00000073: 	shufps	$0xdd, %xmm6, %xmm2
    00000077: 	shufps	$0x88, %xmm2, %xmm1
    0000007b: 	shufps	$0xdd, %xmm2, %xmm0
    0000007f: 	por	%xmm1, %xmm0
    00000083: 	movdqa	%xmm3, %xmm1
    00000087: 	shufps	$0x88, %xmm6, %xmm5
    0000008b: 	shufps	$0xdd, %xmm5, %xmm3
    0000008f: 	shufps	$0x88, %xmm5, %xmm1
    00000093: 	por	%xmm3, %xmm1
    00000097: 	por	%xmm1, %xmm0
    0000009b: 	por	%xmm0, %xmm4
    0000009f: 	cmpq	%rax, %r8
    000000a2: 	jne	.Ltmp1793 # Offset: 162
    000000a4: 	movdqa	%xmm4, %xmm0
    000000a8: 	psrldq	$0x8, %xmm0
    000000ad: 	por	%xmm0, %xmm4
    000000b1: 	movdqa	%xmm4, %xmm0
    000000b5: 	psrldq	$0x4, %xmm0
    000000ba: 	por	%xmm0, %xmm4
    000000be: 	movd	%xmm4, %eax
    000000c2: 	orl	%edx, %eax
    000000c4: 	movl	%esi, %edx
    000000c6: 	andl	$-0x4, %edx
    000000c9: 	leal	(,%rdx,4), %r10d
    000000d1: 	cmpl	%esi, %edx
    000000d3: 	je	.Ltmp1794 # Offset: 211
.Ltmp1797:
    000000d5: 	movslq	%r10d, %r8
    000000d8: 	orl	(%rcx,%r8,4), %eax
    000000dc: 	leaq	(,%r8,4), %rdx
    000000e4: 	orl	0x4(%rcx,%r8,4), %eax
    000000e9: 	orl	0x8(%rcx,%r8,4), %eax
    000000ee: 	orl	0xc(%rcx,%r8,4), %eax
    000000f3: 	leal	0x4(%r10), %r8d
    000000f7: 	cmpl	%r8d, %r9d
    000000fa: 	jle	.Ltmp1794 # Offset: 250
    000000fc: 	movl	0x14(%rcx,%rdx), %r8d
    00000101: 	addl	$0x8, %r10d
    00000105: 	orl	0x18(%rcx,%rdx), %r8d
    0000010a: 	orl	0x10(%rcx,%rdx), %r8d
    0000010f: 	orl	0x1c(%rcx,%rdx), %r8d
    00000114: 	orl	%r8d, %eax
    00000117: 	cmpl	%r10d, %r9d
    0000011a: 	jle	.Ltmp1794 # Offset: 282
    0000011c: 	movl	0x28(%rcx,%rdx), %r8d
    00000121: 	orl	0x24(%rcx,%rdx), %r8d
    00000126: 	orl	0x20(%rcx,%rdx), %r8d
    0000012b: 	orl	0x2c(%rcx,%rdx), %r8d
    00000130: 	orl	%r8d, %eax
.Ltmp1794:
    00000133: 	leal	(,%rsi,4), %edx
.Ltmp1796:
    0000013a: 	cmpl	%edx, %edi
    0000013c: 	jle	.Ltmp1795 # Offset: 316
    0000013e: 	movslq	%edx, %rsi
    00000141: 	leaq	(,%rsi,4), %r8
    00000149: 	orl	(%rcx,%rsi,4), %eax
    0000014c: 	leal	0x1(%rdx), %esi
    0000014f: 	cmpl	%edi, %esi
    00000151: 	jge	.Ltmp1795 # Offset: 337
    00000153: 	leal	0x2(%rdx), %esi
    00000156: 	orl	0x4(%rcx,%r8), %eax
    0000015b: 	cmpl	%esi, %edi
    0000015d: 	jle	.Ltmp1795 # Offset: 349
    0000015f: 	addl	$0x3, %edx
    00000162: 	orl	0x8(%rcx,%r8), %eax
    00000167: 	cmpl	%edx, %edi
    00000169: 	jle	.Ltmp1795 # Offset: 361
    0000016b: 	orl	0xc(%rcx,%r8), %eax
.Ltmp1795:
    00000170: 	retq # Offset: 368
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp1791:
    00000178: 	movl	%edx, %eax
    0000017a: 	xorl	%edx, %edx
    0000017c: 	jmp	.Ltmp1796 # Offset: 380
.Ltmp1792:
    0000017e: 	movl	%edx, %eax
    00000180: 	xorl	%r10d, %r10d
    00000183: 	jmp	.Ltmp1797 # Offset: 387
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or4IiET_PKS0_iS0_"

Binary Function "_Z7bit_or5IiET_PKS0_iS0_" after disassembly {
  Number      : 259
  State       : disassembled
  Address     : 0x18100
  Size        : 0x163
  MaxSize     : 0x170
  Offset      : 0x18100
  Section     : .text
  Orc Section : .local.text._Z7bit_or5IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0258:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %r9d
    0000000a: 	movl	%edx, %eax
    0000000c: 	cmpl	$0x1, %esi
    0000000f: 	jle	.Ltmp1798 # Offset: 15
    00000015: 	leal	-0x2(%rsi), %edx
    00000018: 	movl	%edx, %r10d
    0000001b: 	shrl	%r10d
    0000001e: 	addl	$0x1, %r10d
    00000022: 	cmpl	$0x1, %edx
    00000025: 	jbe	.Ltmp1799 # Offset: 37
    0000002b: 	movl	%r10d, %edx
    0000002e: 	movd	%eax, %xmm0
    00000032: 	movq	%rdi, %rax
    00000035: 	shrl	%edx
    00000037: 	punpckldq	%xmm0, %xmm0
    0000003b: 	subl	$0x1, %edx
    0000003e: 	movq	%xmm0, %xmm0
    00000042: 	shlq	$0x4, %rdx
    00000046: 	leaq	0x10(%rdi,%rdx), %rdx
    0000004b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1800:
    00000050: 	movdqu	(%rax), %xmm2
    00000054: 	addq	$0x10, %rax
    00000058: 	por	%xmm2, %xmm0
    0000005c: 	cmpq	%rax, %rdx
    0000005f: 	jne	.Ltmp1800 # Offset: 95
    00000061: 	movdqa	%xmm0, %xmm1
    00000065: 	movd	%xmm0, %eax
    00000069: 	movl	%r10d, %edi
    0000006c: 	punpckhdq	%xmm0, %xmm1
    00000070: 	andl	$-0x2, %edi
    00000073: 	movd	%xmm1, %edx
    00000077: 	pshufd	$0x55, %xmm0, %xmm1
    0000007c: 	pshufd	$0xff, %xmm0, %xmm0
    00000081: 	orl	%edx, %eax
    00000083: 	movd	%xmm1, %esi
    00000087: 	movd	%xmm0, %edx
    0000008b: 	orl	%edx, %esi
    0000008d: 	leal	(%rdi,%rdi), %edx
    00000090: 	cmpl	%edi, %r10d
    00000093: 	je	.Ltmp1801 # Offset: 147
.Ltmp1807:
    00000095: 	movslq	%edx, %rdx
    00000098: 	orl	(%rcx,%rdx,4), %eax
    0000009b: 	orl	0x4(%rcx,%rdx,4), %esi
.Ltmp1801:
    0000009f: 	addl	%r10d, %r10d
.Ltmp1806:
    000000a2: 	cmpl	%r10d, %r9d
    000000a5: 	jle	.Ltmp1802 # Offset: 165
    000000ab: 	movl	%r9d, %r11d
    000000ae: 	subl	%r10d, %r11d
    000000b1: 	leal	-0x1(%r11), %edx
    000000b5: 	cmpl	$0x2, %edx
    000000b8: 	jbe	.Ltmp1803 # Offset: 184
    000000ba: 	movslq	%r10d, %rdx
    000000bd: 	pxor	%xmm0, %xmm0
    000000c1: 	leaq	(%rcx,%rdx,4), %rdi
    000000c5: 	movl	%r11d, %edx
    000000c8: 	shrl	$0x2, %edx
    000000cb: 	leal	-0x1(%rdx), %r8d
    000000cf: 	leaq	0x10(%rdi), %rdx
    000000d3: 	shlq	$0x4, %r8
    000000d7: 	addq	%rdx, %r8
    000000da: 	jmp	.Ltmp1804 # Offset: 218
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp1805:
    000000e0: 	addq	$0x10, %rdx
.Ltmp1804:
    000000e4: 	movdqu	(%rdi), %xmm1
    000000e8: 	movq	%rdx, %rdi
    000000eb: 	por	%xmm1, %xmm0
    000000ef: 	cmpq	%rdx, %r8
    000000f2: 	jne	.Ltmp1805 # Offset: 242
    000000f4: 	movdqa	%xmm0, %xmm1
    000000f8: 	psrldq	$0x8, %xmm1
    000000fd: 	por	%xmm1, %xmm0
    00000101: 	movdqa	%xmm0, %xmm1
    00000105: 	psrldq	$0x4, %xmm1
    0000010a: 	por	%xmm1, %xmm0
    0000010e: 	movd	%xmm0, %edx
    00000112: 	orl	%edx, %eax
    00000114: 	movl	%r11d, %edx
    00000117: 	andl	$-0x4, %edx
    0000011a: 	addl	%edx, %r10d
    0000011d: 	cmpl	%r11d, %edx
    00000120: 	je	.Ltmp1802 # Offset: 288
.Ltmp1803:
    00000122: 	movslq	%r10d, %rdx
    00000125: 	leaq	(,%rdx,4), %rdi
    0000012d: 	orl	(%rcx,%rdx,4), %eax
    00000130: 	leal	0x1(%r10), %edx
    00000134: 	cmpl	%edx, %r9d
    00000137: 	jle	.Ltmp1802 # Offset: 311
    00000139: 	addl	$0x2, %r10d
    0000013d: 	orl	0x4(%rcx,%rdi), %eax
    00000141: 	cmpl	%r10d, %r9d
    00000144: 	jle	.Ltmp1802 # Offset: 324
    00000146: 	orl	0x8(%rcx,%rdi), %eax
.Ltmp1802:
    0000014a: 	orl	%esi, %eax
    0000014c: 	retq # Offset: 332
    0000014d: 	nopl	(%rax) # Size: 3
.Ltmp1798:
    00000150: 	movl	%edx, %esi
    00000152: 	xorl	%r10d, %r10d
    00000155: 	jmp	.Ltmp1806 # Offset: 341
.Ltmp1799:
    0000015a: 	movl	%eax, %esi
    0000015c: 	xorl	%edx, %edx
    0000015e: 	jmp	.Ltmp1807 # Offset: 350
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or5IiET_PKS0_iS0_"

Binary Function "_Z7bit_or6IiET_PKS0_iS0_" after disassembly {
  Number      : 260
  State       : disassembled
  Address     : 0x18270
  Size        : 0x12a
  MaxSize     : 0x130
  Offset      : 0x18270
  Section     : .text
  Orc Section : .local.text._Z7bit_or6IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0259:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r9d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp1808 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %ecx
    00000015: 	movd	%edx, %xmm2
    00000019: 	xorl	%eax, %eax
    0000001b: 	shrl	$0x2, %ecx
    0000001e: 	pshufd	$0x0, %xmm2, %xmm0
    00000023: 	addl	$0x1, %ecx
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1809:
    00000030: 	movq	%rax, %rdx
    00000033: 	addq	$0x1, %rax
    00000037: 	shlq	$0x4, %rdx
    0000003b: 	movdqu	(%rdi,%rdx), %xmm1
    00000040: 	por	%xmm1, %xmm0
    00000044: 	cmpl	%eax, %ecx
    00000046: 	ja	.Ltmp1809 # Offset: 70
    00000048: 	pshufd	$0x55, %xmm0, %xmm1
    0000004d: 	movd	%xmm0, %eax
    00000051: 	shll	$0x2, %ecx
    00000054: 	movd	%xmm1, %r10d
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	punpckhdq	%xmm0, %xmm1
    00000061: 	pshufd	$0xff, %xmm0, %xmm0
    00000066: 	movd	%xmm1, %edx
    0000006a: 	orl	%edx, %r10d
    0000006d: 	movd	%xmm0, %edx
    00000071: 	orl	%edx, %r10d
.Ltmp1814:
    00000074: 	cmpl	%ecx, %r9d
    00000077: 	jle	.Ltmp1810 # Offset: 119
    0000007d: 	movl	%r9d, %r11d
    00000080: 	subl	%ecx, %r11d
    00000083: 	leal	-0x1(%r11), %edx
    00000087: 	cmpl	$0x2, %edx
    0000008a: 	jbe	.Ltmp1811 # Offset: 138
    0000008c: 	movslq	%ecx, %rdx
    0000008f: 	pxor	%xmm0, %xmm0
    00000093: 	leaq	(%rdi,%rdx,4), %rsi
    00000097: 	movl	%r11d, %edx
    0000009a: 	shrl	$0x2, %edx
    0000009d: 	leal	-0x1(%rdx), %r8d
    000000a1: 	leaq	0x10(%rsi), %rdx
    000000a5: 	shlq	$0x4, %r8
    000000a9: 	addq	%rdx, %r8
    000000ac: 	jmp	.Ltmp1812 # Offset: 172
    000000ae: 	nop # Size: 2
.Ltmp1813:
    000000b0: 	addq	$0x10, %rdx
.Ltmp1812:
    000000b4: 	movdqu	(%rsi), %xmm1
    000000b8: 	movq	%rdx, %rsi
    000000bb: 	por	%xmm1, %xmm0
    000000bf: 	cmpq	%rdx, %r8
    000000c2: 	jne	.Ltmp1813 # Offset: 194
    000000c4: 	movdqa	%xmm0, %xmm1
    000000c8: 	psrldq	$0x8, %xmm1
    000000cd: 	por	%xmm1, %xmm0
    000000d1: 	movdqa	%xmm0, %xmm1
    000000d5: 	psrldq	$0x4, %xmm1
    000000da: 	por	%xmm1, %xmm0
    000000de: 	movd	%xmm0, %edx
    000000e2: 	orl	%edx, %eax
    000000e4: 	movl	%r11d, %edx
    000000e7: 	andl	$-0x4, %edx
    000000ea: 	addl	%edx, %ecx
    000000ec: 	cmpl	%r11d, %edx
    000000ef: 	je	.Ltmp1810 # Offset: 239
.Ltmp1811:
    000000f1: 	movslq	%ecx, %rdx
    000000f4: 	leaq	(,%rdx,4), %rsi
    000000fc: 	orl	(%rdi,%rdx,4), %eax
    000000ff: 	leal	0x1(%rcx), %edx
    00000102: 	cmpl	%edx, %r9d
    00000105: 	jle	.Ltmp1810 # Offset: 261
    00000107: 	addl	$0x2, %ecx
    0000010a: 	orl	0x4(%rdi,%rsi), %eax
    0000010e: 	cmpl	%r9d, %ecx
    00000111: 	jge	.Ltmp1810 # Offset: 273
    00000113: 	orl	0x8(%rdi,%rsi), %eax
.Ltmp1810:
    00000117: 	orl	%r10d, %eax
    0000011a: 	retq # Offset: 282
    0000011b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1808:
    00000120: 	movl	%edx, %r10d
    00000123: 	xorl	%ecx, %ecx
    00000125: 	jmp	.Ltmp1814 # Offset: 293
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or6IiET_PKS0_iS0_"

Binary Function "_Z7bit_or7IiET_PKS0_iS0_" after disassembly {
  Number      : 261
  State       : disassembled
  Address     : 0x183a0
  Size        : 0x12a
  MaxSize     : 0x130
  Offset      : 0x183a0
  Section     : .text
  Orc Section : .local.text._Z7bit_or7IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0260:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r9d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp1815 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %ecx
    00000015: 	movd	%edx, %xmm2
    00000019: 	xorl	%eax, %eax
    0000001b: 	shrl	$0x2, %ecx
    0000001e: 	pshufd	$0x0, %xmm2, %xmm0
    00000023: 	addl	$0x1, %ecx
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1816:
    00000030: 	movq	%rax, %rdx
    00000033: 	addq	$0x1, %rax
    00000037: 	shlq	$0x4, %rdx
    0000003b: 	movdqu	(%rdi,%rdx), %xmm1
    00000040: 	por	%xmm1, %xmm0
    00000044: 	cmpl	%eax, %ecx
    00000046: 	ja	.Ltmp1816 # Offset: 70
    00000048: 	pshufd	$0x55, %xmm0, %xmm1
    0000004d: 	movd	%xmm0, %eax
    00000051: 	shll	$0x2, %ecx
    00000054: 	movd	%xmm1, %r10d
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	punpckhdq	%xmm0, %xmm1
    00000061: 	pshufd	$0xff, %xmm0, %xmm0
    00000066: 	movd	%xmm1, %edx
    0000006a: 	orl	%edx, %r10d
    0000006d: 	movd	%xmm0, %edx
    00000071: 	orl	%edx, %r10d
.Ltmp1821:
    00000074: 	cmpl	%ecx, %r9d
    00000077: 	jle	.Ltmp1817 # Offset: 119
    0000007d: 	movl	%r9d, %r11d
    00000080: 	subl	%ecx, %r11d
    00000083: 	leal	-0x1(%r11), %edx
    00000087: 	cmpl	$0x2, %edx
    0000008a: 	jbe	.Ltmp1818 # Offset: 138
    0000008c: 	movslq	%ecx, %rdx
    0000008f: 	pxor	%xmm0, %xmm0
    00000093: 	leaq	(%rdi,%rdx,4), %rsi
    00000097: 	movl	%r11d, %edx
    0000009a: 	shrl	$0x2, %edx
    0000009d: 	leal	-0x1(%rdx), %r8d
    000000a1: 	leaq	0x10(%rsi), %rdx
    000000a5: 	shlq	$0x4, %r8
    000000a9: 	addq	%rdx, %r8
    000000ac: 	jmp	.Ltmp1819 # Offset: 172
    000000ae: 	nop # Size: 2
.Ltmp1820:
    000000b0: 	addq	$0x10, %rdx
.Ltmp1819:
    000000b4: 	movdqu	(%rsi), %xmm1
    000000b8: 	movq	%rdx, %rsi
    000000bb: 	por	%xmm1, %xmm0
    000000bf: 	cmpq	%rdx, %r8
    000000c2: 	jne	.Ltmp1820 # Offset: 194
    000000c4: 	movdqa	%xmm0, %xmm1
    000000c8: 	psrldq	$0x8, %xmm1
    000000cd: 	por	%xmm1, %xmm0
    000000d1: 	movdqa	%xmm0, %xmm1
    000000d5: 	psrldq	$0x4, %xmm1
    000000da: 	por	%xmm1, %xmm0
    000000de: 	movd	%xmm0, %edx
    000000e2: 	orl	%edx, %eax
    000000e4: 	movl	%r11d, %edx
    000000e7: 	andl	$-0x4, %edx
    000000ea: 	addl	%edx, %ecx
    000000ec: 	cmpl	%r11d, %edx
    000000ef: 	je	.Ltmp1817 # Offset: 239
.Ltmp1818:
    000000f1: 	movslq	%ecx, %rdx
    000000f4: 	leaq	(,%rdx,4), %rsi
    000000fc: 	orl	(%rdi,%rdx,4), %eax
    000000ff: 	leal	0x1(%rcx), %edx
    00000102: 	cmpl	%edx, %r9d
    00000105: 	jle	.Ltmp1817 # Offset: 261
    00000107: 	addl	$0x2, %ecx
    0000010a: 	orl	0x4(%rdi,%rsi), %eax
    0000010e: 	cmpl	%r9d, %ecx
    00000111: 	jge	.Ltmp1817 # Offset: 273
    00000113: 	orl	0x8(%rdi,%rsi), %eax
.Ltmp1817:
    00000117: 	orl	%r10d, %eax
    0000011a: 	retq # Offset: 282
    0000011b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1815:
    00000120: 	movl	%edx, %r10d
    00000123: 	xorl	%ecx, %ecx
    00000125: 	jmp	.Ltmp1821 # Offset: 293
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or7IiET_PKS0_iS0_"

Binary Function "_Z7bit_or8IiET_PKS0_iS0_" after disassembly {
  Number      : 262
  State       : disassembled
  Address     : 0x184d0
  Size        : 0x159
  MaxSize     : 0x160
  Offset      : 0x184d0
  Section     : .text
  Orc Section : .local.text._Z7bit_or8IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0261:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x7, %esi
    0000000c: 	jle	.Ltmp1822 # Offset: 12
    00000012: 	movd	%edx, %xmm5
    00000016: 	leal	-0x8(%rsi), %ecx
    00000019: 	movq	%rdi, %rax
    0000001c: 	xorl	%edx, %edx
    0000001e: 	shrl	$0x3, %ecx
    00000021: 	pshufd	$0x0, %xmm5, %xmm0
    00000026: 	addl	$0x1, %ecx
    00000029: 	movdqa	%xmm0, %xmm1
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp1823:
    00000030: 	movdqu	(%rax), %xmm3
    00000034: 	movdqu	0x10(%rax), %xmm4
    00000039: 	addl	$0x1, %edx
    0000003c: 	addq	$0x20, %rax
    00000040: 	por	%xmm3, %xmm0
    00000044: 	por	%xmm4, %xmm1
    00000048: 	cmpl	%edx, %ecx
    0000004a: 	ja	.Ltmp1823 # Offset: 74
    0000004c: 	movdqa	%xmm0, %xmm2
    00000050: 	leal	(,%rcx,8), %esi
    00000057: 	movd	%xmm0, %eax
    0000005b: 	punpckhdq	%xmm0, %xmm2
    0000005f: 	movd	%xmm2, %ecx
    00000063: 	pshufd	$0x55, %xmm0, %xmm2
    00000068: 	pshufd	$0xff, %xmm0, %xmm0
    0000006d: 	movd	%xmm2, %edx
    00000071: 	orl	%edx, %ecx
    00000073: 	movd	%xmm0, %edx
    00000077: 	pshufd	$0x55, %xmm1, %xmm0
    0000007c: 	orl	%edx, %ecx
    0000007e: 	movd	%xmm1, %edx
    00000082: 	orl	%edx, %ecx
    00000084: 	movd	%xmm0, %edx
    00000088: 	movdqa	%xmm1, %xmm0
    0000008c: 	punpckhdq	%xmm1, %xmm0
    00000090: 	orl	%edx, %ecx
    00000092: 	pshufd	$0xff, %xmm1, %xmm1
    00000097: 	movd	%xmm0, %edx
    0000009b: 	orl	%edx, %ecx
    0000009d: 	movd	%xmm1, %edx
    000000a1: 	orl	%edx, %ecx
.Ltmp1828:
    000000a3: 	cmpl	%esi, %r8d
    000000a6: 	jle	.Ltmp1824 # Offset: 166
    000000ac: 	movl	%r8d, %r11d
    000000af: 	subl	%esi, %r11d
    000000b2: 	leal	-0x1(%r11), %edx
    000000b6: 	cmpl	$0x2, %edx
    000000b9: 	jbe	.Ltmp1825 # Offset: 185
    000000bb: 	movslq	%esi, %rdx
    000000be: 	pxor	%xmm0, %xmm0
    000000c2: 	leaq	(%rdi,%rdx,4), %r9
    000000c6: 	movl	%r11d, %edx
    000000c9: 	shrl	$0x2, %edx
    000000cc: 	leal	-0x1(%rdx), %r10d
    000000d0: 	leaq	0x10(%r9), %rdx
    000000d4: 	shlq	$0x4, %r10
    000000d8: 	addq	%rdx, %r10
    000000db: 	jmp	.Ltmp1826 # Offset: 219
    000000dd: 	nopl	(%rax) # Size: 3
.Ltmp1827:
    000000e0: 	addq	$0x10, %rdx
.Ltmp1826:
    000000e4: 	movdqu	(%r9), %xmm1
    000000e9: 	movq	%rdx, %r9
    000000ec: 	por	%xmm1, %xmm0
    000000f0: 	cmpq	%rdx, %r10
    000000f3: 	jne	.Ltmp1827 # Offset: 243
    000000f5: 	movdqa	%xmm0, %xmm1
    000000f9: 	psrldq	$0x8, %xmm1
    000000fe: 	por	%xmm1, %xmm0
    00000102: 	movdqa	%xmm0, %xmm1
    00000106: 	psrldq	$0x4, %xmm1
    0000010b: 	por	%xmm1, %xmm0
    0000010f: 	movd	%xmm0, %edx
    00000113: 	orl	%edx, %eax
    00000115: 	movl	%r11d, %edx
    00000118: 	andl	$-0x4, %edx
    0000011b: 	addl	%edx, %esi
    0000011d: 	cmpl	%r11d, %edx
    00000120: 	je	.Ltmp1824 # Offset: 288
.Ltmp1825:
    00000122: 	movslq	%esi, %rdx
    00000125: 	leaq	(,%rdx,4), %r9
    0000012d: 	orl	(%rdi,%rdx,4), %eax
    00000130: 	leal	0x1(%rsi), %edx
    00000133: 	cmpl	%edx, %r8d
    00000136: 	jle	.Ltmp1824 # Offset: 310
    00000138: 	addl	$0x2, %esi
    0000013b: 	orl	0x4(%rdi,%r9), %eax
    00000140: 	cmpl	%r8d, %esi
    00000143: 	jge	.Ltmp1824 # Offset: 323
    00000145: 	orl	0x8(%rdi,%r9), %eax
.Ltmp1824:
    0000014a: 	orl	%ecx, %eax
    0000014c: 	retq # Offset: 332
    0000014d: 	nopl	(%rax) # Size: 3
.Ltmp1822:
    00000150: 	movl	%edx, %ecx
    00000152: 	xorl	%esi, %esi
    00000154: 	jmp	.Ltmp1828 # Offset: 340
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or8IiET_PKS0_iS0_"

Binary Function "_Z8bit_xor1IiET_PKS0_iS0_" after disassembly {
  Number      : 263
  State       : disassembled
  Address     : 0x18630
  Size        : 0xa7
  MaxSize     : 0xb0
  Offset      : 0x18630
  Section     : .text
  Orc Section : .local.text._Z8bit_xor1IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0262:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp1829 # Offset: 8
    0000000e: 	leal	-0x1(%rsi), %eax
    00000011: 	cmpl	$0x2, %eax
    00000014: 	jbe	.Ltmp1830 # Offset: 20
    0000001a: 	shrl	$0x2, %esi
    0000001d: 	movq	%rdi, %rax
    00000020: 	pxor	%xmm0, %xmm0
    00000024: 	subl	$0x1, %esi
    00000027: 	shlq	$0x4, %rsi
    0000002b: 	leaq	0x10(%rdi,%rsi), %rsi
.Ltmp1831:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	addq	$0x10, %rax
    00000038: 	pxor	%xmm2, %xmm0
    0000003c: 	cmpq	%rsi, %rax
    0000003f: 	jne	.Ltmp1831 # Offset: 63
    00000041: 	movdqa	%xmm0, %xmm1
    00000045: 	psrldq	$0x8, %xmm1
    0000004a: 	pxor	%xmm1, %xmm0
    0000004e: 	movdqa	%xmm0, %xmm1
    00000052: 	psrldq	$0x4, %xmm1
    00000057: 	pxor	%xmm1, %xmm0
    0000005b: 	movd	%xmm0, %eax
    0000005f: 	xorl	%edx, %eax
    00000061: 	movl	%ecx, %edx
    00000063: 	andl	$-0x4, %edx
    00000066: 	testb	$0x3, %cl
    00000069: 	je	.Ltmp1832 # Offset: 105
.Ltmp1834:
    0000006b: 	movslq	%edx, %rsi
    0000006e: 	leaq	(,%rsi,4), %r8
    00000076: 	xorl	(%rdi,%rsi,4), %eax
    00000079: 	leal	0x1(%rdx), %esi
    0000007c: 	cmpl	%esi, %ecx
    0000007e: 	jle	.Ltmp1833 # Offset: 126
    00000080: 	addl	$0x2, %edx
    00000083: 	xorl	0x4(%rdi,%r8), %eax
    00000088: 	cmpl	%edx, %ecx
    0000008a: 	jle	.Ltmp1833 # Offset: 138
    0000008c: 	xorl	0x8(%rdi,%r8), %eax
    00000091: 	retq # Offset: 145
    00000092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1829:
    00000098: 	movl	%edx, %eax
.Ltmp1833:
    0000009a: 	retq # Offset: 154
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1832:
    000000a0: 	retq # Offset: 160
.Ltmp1830:
    000000a1: 	movl	%edx, %eax
    000000a3: 	xorl	%edx, %edx
    000000a5: 	jmp	.Ltmp1834 # Offset: 165
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor1IiET_PKS0_iS0_"

Binary Function "_Z8bit_xor2IiET_PKS0_iS0_" after disassembly {
  Number      : 264
  State       : disassembled
  Address     : 0x186e0
  Size        : 0xb5
  MaxSize     : 0xc0
  Offset      : 0x186e0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor2IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0263:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movq	%rdi, %rcx
    0000000a: 	shlq	$0x2, %rsi
    0000000e: 	leaq	(%rdi,%rsi), %r8
    00000012: 	cmpq	%r8, %rdi
    00000015: 	je	.Ltmp1835 # Offset: 21
    0000001b: 	subq	$0x4, %rsi
    0000001f: 	movq	%rdi, %rax
    00000022: 	movq	%rsi, %rdi
    00000025: 	shrq	$0x2, %rdi
    00000029: 	addq	$0x1, %rdi
    0000002d: 	cmpq	$0x8, %rsi
    00000031: 	jbe	.Ltmp1836 # Offset: 49
    00000033: 	movq	%rdi, %rsi
    00000036: 	pxor	%xmm0, %xmm0
    0000003a: 	shrq	$0x2, %rsi
    0000003e: 	shlq	$0x4, %rsi
    00000042: 	addq	%rcx, %rsi
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp1837:
    00000048: 	movdqu	(%rax), %xmm2
    0000004c: 	addq	$0x10, %rax
    00000050: 	pxor	%xmm2, %xmm0
    00000054: 	cmpq	%rax, %rsi
    00000057: 	jne	.Ltmp1837 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	psrldq	$0x8, %xmm1
    00000062: 	pxor	%xmm1, %xmm0
    00000066: 	movdqa	%xmm0, %xmm1
    0000006a: 	psrldq	$0x4, %xmm1
    0000006f: 	pxor	%xmm1, %xmm0
    00000073: 	movd	%xmm0, %eax
    00000077: 	xorl	%edx, %eax
    00000079: 	movq	%rdi, %rdx
    0000007c: 	andq	$-0x4, %rdx
    00000080: 	leaq	(%rcx,%rdx,4), %rcx
    00000084: 	cmpq	%rdx, %rdi
    00000087: 	je	.Ltmp1838 # Offset: 135
.Ltmp1840:
    00000089: 	leaq	0x4(%rcx), %rdx
    0000008d: 	xorl	(%rcx), %eax
    0000008f: 	cmpq	%rdx, %r8
    00000092: 	je	.Ltmp1839 # Offset: 146
    00000094: 	leaq	0x8(%rcx), %rdx
    00000098: 	xorl	0x4(%rcx), %eax
    0000009b: 	cmpq	%rdx, %r8
    0000009e: 	je	.Ltmp1839 # Offset: 158
    000000a0: 	xorl	0x8(%rcx), %eax
    000000a3: 	retq # Offset: 163
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp1835:
    000000a8: 	movl	%edx, %eax
.Ltmp1839:
    000000aa: 	retq # Offset: 170
    000000ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1838:
    000000b0: 	retq # Offset: 176
.Ltmp1836:
    000000b1: 	movl	%edx, %eax
    000000b3: 	jmp	.Ltmp1840 # Offset: 179
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor2IiET_PKS0_iS0_"

Binary Function "_Z8bit_xor3IiET_PKS0_iS0_" after disassembly {
  Number      : 265
  State       : disassembled
  Address     : 0x187a0
  Size        : 0xf4
  MaxSize     : 0x100
  Offset      : 0x187a0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor3IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0264:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %r9d
    00000008: 	testl	%r9d, %r9d
    0000000b: 	jle	.Ltmp1841 # Offset: 11
    00000011: 	leal	-0x2(%rsi), %eax
    00000014: 	movl	%eax, %ecx
    00000016: 	shrl	%ecx
    00000018: 	addl	$0x1, %ecx
    0000001b: 	cmpl	$0x5, %eax
    0000001e: 	jbe	.Ltmp1842 # Offset: 30
    00000024: 	movl	%ecx, %r8d
    00000027: 	movq	%rdi, %rax
    0000002a: 	pxor	%xmm2, %xmm2
    0000002e: 	shrl	$0x2, %r8d
    00000032: 	subl	$0x1, %r8d
    00000036: 	shlq	$0x5, %r8
    0000003a: 	leaq	0x20(%rdi,%r8), %r8
    0000003f: 	nop # Size: 1
.Ltmp1843:
    00000040: 	movdqu	(%rax), %xmm0
    00000044: 	movdqu	0x10(%rax), %xmm3
    00000049: 	addq	$0x20, %rax
    0000004d: 	movdqa	%xmm0, %xmm1
    00000051: 	shufps	$0xdd, %xmm3, %xmm0
    00000055: 	shufps	$0x88, %xmm3, %xmm1
    00000059: 	pxor	%xmm1, %xmm0
    0000005d: 	pxor	%xmm0, %xmm2
    00000061: 	cmpq	%rax, %r8
    00000064: 	jne	.Ltmp1843 # Offset: 100
    00000066: 	movdqa	%xmm2, %xmm0
    0000006a: 	movl	%ecx, %r8d
    0000006d: 	psrldq	$0x8, %xmm0
    00000072: 	andl	$-0x4, %r8d
    00000076: 	pxor	%xmm0, %xmm2
    0000007a: 	movdqa	%xmm2, %xmm0
    0000007e: 	psrldq	$0x4, %xmm0
    00000083: 	pxor	%xmm0, %xmm2
    00000087: 	movd	%xmm2, %eax
    0000008b: 	xorl	%edx, %eax
    0000008d: 	leal	(%r8,%r8), %edx
    00000091: 	cmpl	%r8d, %ecx
    00000094: 	je	.Ltmp1844 # Offset: 148
.Ltmp1847:
    00000096: 	movslq	%edx, %r10
    00000099: 	xorl	(%rdi,%r10,4), %eax
    0000009d: 	leaq	(,%r10,4), %r8
    000000a5: 	xorl	0x4(%rdi,%r10,4), %eax
    000000aa: 	leal	0x2(%rdx), %r10d
    000000ae: 	cmpl	%r9d, %r10d
    000000b1: 	jge	.Ltmp1844 # Offset: 177
    000000b3: 	movl	0x8(%rdi,%r8), %r10d
    000000b8: 	addl	$0x4, %edx
    000000bb: 	xorl	0xc(%rdi,%r8), %r10d
    000000c0: 	xorl	%r10d, %eax
    000000c3: 	cmpl	%edx, %r9d
    000000c6: 	jle	.Ltmp1844 # Offset: 198
    000000c8: 	movl	0x14(%rdi,%r8), %edx
    000000cd: 	xorl	0x10(%rdi,%r8), %edx
    000000d2: 	xorl	%edx, %eax
.Ltmp1844:
    000000d4: 	addl	%ecx, %ecx
.Ltmp1846:
    000000d6: 	cmpl	%esi, %ecx
    000000d8: 	jge	.Ltmp1845 # Offset: 216
    000000da: 	movslq	%ecx, %rcx
    000000dd: 	xorl	(%rdi,%rcx,4), %eax
.Ltmp1845:
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp1841:
    000000e8: 	movl	%edx, %eax
    000000ea: 	xorl	%ecx, %ecx
    000000ec: 	jmp	.Ltmp1846 # Offset: 236
.Ltmp1842:
    000000ee: 	movl	%edx, %eax
    000000f0: 	xorl	%edx, %edx
    000000f2: 	jmp	.Ltmp1847 # Offset: 242
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor3IiET_PKS0_iS0_"

Binary Function "_Z8bit_xor4IiET_PKS0_iS0_" after disassembly {
  Number      : 266
  State       : disassembled
  Address     : 0x188a0
  Size        : 0x188
  MaxSize     : 0x190
  Offset      : 0x188a0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor4IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0265:
    00000000: 	endbr64
    00000004: 	leal	-0x3(%rsi), %r9d
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%esi, %edi
    0000000d: 	testl	%r9d, %r9d
    00000010: 	jle	.Ltmp1848 # Offset: 16
    00000016: 	leal	-0x4(%rsi), %eax
    00000019: 	movl	%eax, %esi
    0000001b: 	shrl	$0x2, %esi
    0000001e: 	addl	$0x1, %esi
    00000021: 	cmpl	$0xb, %eax
    00000024: 	jbe	.Ltmp1849 # Offset: 36
    0000002a: 	movl	%esi, %r8d
    0000002d: 	movq	%rcx, %rax
    00000030: 	pxor	%xmm4, %xmm4
    00000034: 	shrl	$0x2, %r8d
    00000038: 	subl	$0x1, %r8d
    0000003c: 	shlq	$0x6, %r8
    00000040: 	leaq	0x40(%rcx,%r8), %r8
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp1850:
    00000048: 	movdqu	(%rax), %xmm0
    0000004c: 	movdqu	0x10(%rax), %xmm6
    00000051: 	addq	$0x40, %rax
    00000055: 	movdqu	-0x20(%rax), %xmm2
    0000005a: 	movdqa	%xmm0, %xmm3
    0000005e: 	shufps	$0xdd, %xmm6, %xmm0
    00000062: 	movdqa	%xmm0, %xmm1
    00000066: 	shufps	$0x88, %xmm6, %xmm3
    0000006a: 	movdqu	-0x10(%rax), %xmm6
    0000006f: 	movdqa	%xmm2, %xmm5
    00000073: 	shufps	$0xdd, %xmm6, %xmm2
    00000077: 	shufps	$0x88, %xmm2, %xmm1
    0000007b: 	shufps	$0xdd, %xmm2, %xmm0
    0000007f: 	pxor	%xmm1, %xmm0
    00000083: 	movdqa	%xmm3, %xmm1
    00000087: 	shufps	$0x88, %xmm6, %xmm5
    0000008b: 	shufps	$0xdd, %xmm5, %xmm3
    0000008f: 	shufps	$0x88, %xmm5, %xmm1
    00000093: 	pxor	%xmm3, %xmm1
    00000097: 	pxor	%xmm1, %xmm0
    0000009b: 	pxor	%xmm0, %xmm4
    0000009f: 	cmpq	%rax, %r8
    000000a2: 	jne	.Ltmp1850 # Offset: 162
    000000a4: 	movdqa	%xmm4, %xmm0
    000000a8: 	psrldq	$0x8, %xmm0
    000000ad: 	pxor	%xmm0, %xmm4
    000000b1: 	movdqa	%xmm4, %xmm0
    000000b5: 	psrldq	$0x4, %xmm0
    000000ba: 	pxor	%xmm0, %xmm4
    000000be: 	movd	%xmm4, %eax
    000000c2: 	xorl	%edx, %eax
    000000c4: 	movl	%esi, %edx
    000000c6: 	andl	$-0x4, %edx
    000000c9: 	leal	(,%rdx,4), %r10d
    000000d1: 	cmpl	%esi, %edx
    000000d3: 	je	.Ltmp1851 # Offset: 211
.Ltmp1854:
    000000d5: 	movslq	%r10d, %r8
    000000d8: 	xorl	(%rcx,%r8,4), %eax
    000000dc: 	leaq	(,%r8,4), %rdx
    000000e4: 	xorl	0x4(%rcx,%r8,4), %eax
    000000e9: 	xorl	0x8(%rcx,%r8,4), %eax
    000000ee: 	xorl	0xc(%rcx,%r8,4), %eax
    000000f3: 	leal	0x4(%r10), %r8d
    000000f7: 	cmpl	%r8d, %r9d
    000000fa: 	jle	.Ltmp1851 # Offset: 250
    000000fc: 	movl	0x14(%rcx,%rdx), %r8d
    00000101: 	addl	$0x8, %r10d
    00000105: 	xorl	0x18(%rcx,%rdx), %r8d
    0000010a: 	xorl	0x10(%rcx,%rdx), %r8d
    0000010f: 	xorl	0x1c(%rcx,%rdx), %r8d
    00000114: 	xorl	%r8d, %eax
    00000117: 	cmpl	%r10d, %r9d
    0000011a: 	jle	.Ltmp1851 # Offset: 282
    0000011c: 	movl	0x28(%rcx,%rdx), %r8d
    00000121: 	xorl	0x24(%rcx,%rdx), %r8d
    00000126: 	xorl	0x20(%rcx,%rdx), %r8d
    0000012b: 	xorl	0x2c(%rcx,%rdx), %r8d
    00000130: 	xorl	%r8d, %eax
.Ltmp1851:
    00000133: 	leal	(,%rsi,4), %edx
.Ltmp1853:
    0000013a: 	cmpl	%edx, %edi
    0000013c: 	jle	.Ltmp1852 # Offset: 316
    0000013e: 	movslq	%edx, %rsi
    00000141: 	leaq	(,%rsi,4), %r8
    00000149: 	xorl	(%rcx,%rsi,4), %eax
    0000014c: 	leal	0x1(%rdx), %esi
    0000014f: 	cmpl	%edi, %esi
    00000151: 	jge	.Ltmp1852 # Offset: 337
    00000153: 	leal	0x2(%rdx), %esi
    00000156: 	xorl	0x4(%rcx,%r8), %eax
    0000015b: 	cmpl	%esi, %edi
    0000015d: 	jle	.Ltmp1852 # Offset: 349
    0000015f: 	addl	$0x3, %edx
    00000162: 	xorl	0x8(%rcx,%r8), %eax
    00000167: 	cmpl	%edx, %edi
    00000169: 	jle	.Ltmp1852 # Offset: 361
    0000016b: 	xorl	0xc(%rcx,%r8), %eax
.Ltmp1852:
    00000170: 	retq # Offset: 368
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp1848:
    00000178: 	movl	%edx, %eax
    0000017a: 	xorl	%edx, %edx
    0000017c: 	jmp	.Ltmp1853 # Offset: 380
.Ltmp1849:
    0000017e: 	movl	%edx, %eax
    00000180: 	xorl	%r10d, %r10d
    00000183: 	jmp	.Ltmp1854 # Offset: 387
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor4IiET_PKS0_iS0_"

Binary Function "_Z8bit_xor5IiET_PKS0_iS0_" after disassembly {
  Number      : 267
  State       : disassembled
  Address     : 0x18a30
  Size        : 0x15b
  MaxSize     : 0x160
  Offset      : 0x18a30
  Section     : .text
  Orc Section : .local.text._Z8bit_xor5IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0266:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %r9d
    0000000a: 	movl	%edx, %eax
    0000000c: 	cmpl	$0x1, %esi
    0000000f: 	jle	.Ltmp1855 # Offset: 15
    00000015: 	leal	-0x2(%rsi), %edx
    00000018: 	movl	%edx, %r10d
    0000001b: 	shrl	%r10d
    0000001e: 	addl	$0x1, %r10d
    00000022: 	cmpl	$0x1, %edx
    00000025: 	jbe	.Ltmp1856 # Offset: 37
    0000002b: 	movl	%r10d, %edx
    0000002e: 	movd	%eax, %xmm0
    00000032: 	movq	%rdi, %rax
    00000035: 	shrl	%edx
    00000037: 	subl	$0x1, %edx
    0000003a: 	shlq	$0x4, %rdx
    0000003e: 	leaq	0x10(%rdi,%rdx), %rdx
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1857:
    00000048: 	movdqu	(%rax), %xmm2
    0000004c: 	addq	$0x10, %rax
    00000050: 	pxor	%xmm2, %xmm0
    00000054: 	cmpq	%rax, %rdx
    00000057: 	jne	.Ltmp1857 # Offset: 87
    00000059: 	movdqa	%xmm0, %xmm1
    0000005d: 	movd	%xmm0, %eax
    00000061: 	movl	%r10d, %edi
    00000064: 	punpckhdq	%xmm0, %xmm1
    00000068: 	andl	$-0x2, %edi
    0000006b: 	movd	%xmm1, %edx
    0000006f: 	pshufd	$0x55, %xmm0, %xmm1
    00000074: 	pshufd	$0xff, %xmm0, %xmm0
    00000079: 	xorl	%edx, %eax
    0000007b: 	movd	%xmm1, %esi
    0000007f: 	movd	%xmm0, %edx
    00000083: 	xorl	%edx, %esi
    00000085: 	leal	(%rdi,%rdi), %edx
    00000088: 	cmpl	%edi, %r10d
    0000008b: 	je	.Ltmp1858 # Offset: 139
.Ltmp1864:
    0000008d: 	movslq	%edx, %rdx
    00000090: 	xorl	(%rcx,%rdx,4), %eax
    00000093: 	xorl	0x4(%rcx,%rdx,4), %esi
.Ltmp1858:
    00000097: 	addl	%r10d, %r10d
.Ltmp1863:
    0000009a: 	cmpl	%r10d, %r9d
    0000009d: 	jle	.Ltmp1859 # Offset: 157
    000000a3: 	movl	%r9d, %r11d
    000000a6: 	subl	%r10d, %r11d
    000000a9: 	leal	-0x1(%r11), %edx
    000000ad: 	cmpl	$0x2, %edx
    000000b0: 	jbe	.Ltmp1860 # Offset: 176
    000000b2: 	movslq	%r10d, %rdx
    000000b5: 	pxor	%xmm0, %xmm0
    000000b9: 	leaq	(%rcx,%rdx,4), %rdi
    000000bd: 	movl	%r11d, %edx
    000000c0: 	shrl	$0x2, %edx
    000000c3: 	leal	-0x1(%rdx), %r8d
    000000c7: 	leaq	0x10(%rdi), %rdx
    000000cb: 	shlq	$0x4, %r8
    000000cf: 	addq	%rdx, %r8
    000000d2: 	jmp	.Ltmp1861 # Offset: 210
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp1862:
    000000d8: 	addq	$0x10, %rdx
.Ltmp1861:
    000000dc: 	movdqu	(%rdi), %xmm1
    000000e0: 	movq	%rdx, %rdi
    000000e3: 	pxor	%xmm1, %xmm0
    000000e7: 	cmpq	%rdx, %r8
    000000ea: 	jne	.Ltmp1862 # Offset: 234
    000000ec: 	movdqa	%xmm0, %xmm1
    000000f0: 	psrldq	$0x8, %xmm1
    000000f5: 	pxor	%xmm1, %xmm0
    000000f9: 	movdqa	%xmm0, %xmm1
    000000fd: 	psrldq	$0x4, %xmm1
    00000102: 	pxor	%xmm1, %xmm0
    00000106: 	movd	%xmm0, %edx
    0000010a: 	xorl	%edx, %eax
    0000010c: 	movl	%r11d, %edx
    0000010f: 	andl	$-0x4, %edx
    00000112: 	addl	%edx, %r10d
    00000115: 	cmpl	%r11d, %edx
    00000118: 	je	.Ltmp1859 # Offset: 280
.Ltmp1860:
    0000011a: 	movslq	%r10d, %rdx
    0000011d: 	leaq	(,%rdx,4), %rdi
    00000125: 	xorl	(%rcx,%rdx,4), %eax
    00000128: 	leal	0x1(%r10), %edx
    0000012c: 	cmpl	%edx, %r9d
    0000012f: 	jle	.Ltmp1859 # Offset: 303
    00000131: 	addl	$0x2, %r10d
    00000135: 	xorl	0x4(%rcx,%rdi), %eax
    00000139: 	cmpl	%r10d, %r9d
    0000013c: 	jle	.Ltmp1859 # Offset: 316
    0000013e: 	xorl	0x8(%rcx,%rdi), %eax
.Ltmp1859:
    00000142: 	xorl	%esi, %eax
    00000144: 	retq # Offset: 324
    00000145: 	nopl	(%rax) # Size: 3
.Ltmp1855:
    00000148: 	xorl	%r10d, %r10d
    0000014b: 	xorl	%esi, %esi
    0000014d: 	jmp	.Ltmp1863 # Offset: 333
.Ltmp1856:
    00000152: 	xorl	%edx, %edx
    00000154: 	xorl	%esi, %esi
    00000156: 	jmp	.Ltmp1864 # Offset: 342
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor5IiET_PKS0_iS0_"

Binary Function "_Z8bit_xor6IiET_PKS0_iS0_" after disassembly {
  Number      : 268
  State       : disassembled
  Address     : 0x18b90
  Size        : 0x12a
  MaxSize     : 0x130
  Offset      : 0x18b90
  Section     : .text
  Orc Section : .local.text._Z8bit_xor6IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0267:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r9d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp1865 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %ecx
    00000015: 	movd	%edx, %xmm0
    00000019: 	xorl	%eax, %eax
    0000001b: 	shrl	$0x2, %ecx
    0000001e: 	addl	$0x1, %ecx
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp1866:
    00000028: 	movq	%rax, %rdx
    0000002b: 	addq	$0x1, %rax
    0000002f: 	shlq	$0x4, %rdx
    00000033: 	movdqu	(%rdi,%rdx), %xmm1
    00000038: 	pxor	%xmm1, %xmm0
    0000003c: 	cmpl	%eax, %ecx
    0000003e: 	ja	.Ltmp1866 # Offset: 62
    00000040: 	pshufd	$0x55, %xmm0, %xmm1
    00000045: 	movd	%xmm0, %eax
    00000049: 	shll	$0x2, %ecx
    0000004c: 	movd	%xmm1, %r10d
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	punpckhdq	%xmm0, %xmm1
    00000059: 	pshufd	$0xff, %xmm0, %xmm0
    0000005e: 	movd	%xmm1, %edx
    00000062: 	xorl	%edx, %r10d
    00000065: 	movd	%xmm0, %edx
    00000069: 	xorl	%edx, %r10d
.Ltmp1871:
    0000006c: 	cmpl	%ecx, %r9d
    0000006f: 	jle	.Ltmp1867 # Offset: 111
    00000075: 	movl	%r9d, %r11d
    00000078: 	subl	%ecx, %r11d
    0000007b: 	leal	-0x1(%r11), %edx
    0000007f: 	cmpl	$0x2, %edx
    00000082: 	jbe	.Ltmp1868 # Offset: 130
    00000084: 	movslq	%ecx, %rdx
    00000087: 	pxor	%xmm0, %xmm0
    0000008b: 	leaq	(%rdi,%rdx,4), %rsi
    0000008f: 	movl	%r11d, %edx
    00000092: 	shrl	$0x2, %edx
    00000095: 	leal	-0x1(%rdx), %r8d
    00000099: 	leaq	0x10(%rsi), %rdx
    0000009d: 	shlq	$0x4, %r8
    000000a1: 	addq	%rdx, %r8
    000000a4: 	jmp	.Ltmp1869 # Offset: 164
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1870:
    000000b0: 	addq	$0x10, %rdx
.Ltmp1869:
    000000b4: 	movdqu	(%rsi), %xmm1
    000000b8: 	movq	%rdx, %rsi
    000000bb: 	pxor	%xmm1, %xmm0
    000000bf: 	cmpq	%rdx, %r8
    000000c2: 	jne	.Ltmp1870 # Offset: 194
    000000c4: 	movdqa	%xmm0, %xmm1
    000000c8: 	psrldq	$0x8, %xmm1
    000000cd: 	pxor	%xmm1, %xmm0
    000000d1: 	movdqa	%xmm0, %xmm1
    000000d5: 	psrldq	$0x4, %xmm1
    000000da: 	pxor	%xmm1, %xmm0
    000000de: 	movd	%xmm0, %edx
    000000e2: 	xorl	%edx, %eax
    000000e4: 	movl	%r11d, %edx
    000000e7: 	andl	$-0x4, %edx
    000000ea: 	addl	%edx, %ecx
    000000ec: 	cmpl	%r11d, %edx
    000000ef: 	je	.Ltmp1867 # Offset: 239
.Ltmp1868:
    000000f1: 	movslq	%ecx, %rdx
    000000f4: 	leaq	(,%rdx,4), %rsi
    000000fc: 	xorl	(%rdi,%rdx,4), %eax
    000000ff: 	leal	0x1(%rcx), %edx
    00000102: 	cmpl	%edx, %r9d
    00000105: 	jle	.Ltmp1867 # Offset: 261
    00000107: 	addl	$0x2, %ecx
    0000010a: 	xorl	0x4(%rdi,%rsi), %eax
    0000010e: 	cmpl	%r9d, %ecx
    00000111: 	jge	.Ltmp1867 # Offset: 273
    00000113: 	xorl	0x8(%rdi,%rsi), %eax
.Ltmp1867:
    00000117: 	xorl	%r10d, %eax
    0000011a: 	retq # Offset: 282
    0000011b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1865:
    00000120: 	xorl	%r10d, %r10d
    00000123: 	xorl	%ecx, %ecx
    00000125: 	jmp	.Ltmp1871 # Offset: 293
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor6IiET_PKS0_iS0_"

Binary Function "_Z8bit_xor7IiET_PKS0_iS0_" after disassembly {
  Number      : 269
  State       : disassembled
  Address     : 0x18cc0
  Size        : 0x12a
  MaxSize     : 0x130
  Offset      : 0x18cc0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor7IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0268:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r9d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp1872 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %ecx
    00000015: 	movd	%edx, %xmm0
    00000019: 	xorl	%eax, %eax
    0000001b: 	shrl	$0x2, %ecx
    0000001e: 	addl	$0x1, %ecx
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp1873:
    00000028: 	movq	%rax, %rdx
    0000002b: 	addq	$0x1, %rax
    0000002f: 	shlq	$0x4, %rdx
    00000033: 	movdqu	(%rdi,%rdx), %xmm1
    00000038: 	pxor	%xmm1, %xmm0
    0000003c: 	cmpl	%eax, %ecx
    0000003e: 	ja	.Ltmp1873 # Offset: 62
    00000040: 	pshufd	$0x55, %xmm0, %xmm1
    00000045: 	movd	%xmm0, %eax
    00000049: 	shll	$0x2, %ecx
    0000004c: 	movd	%xmm1, %r10d
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	punpckhdq	%xmm0, %xmm1
    00000059: 	pshufd	$0xff, %xmm0, %xmm0
    0000005e: 	movd	%xmm1, %edx
    00000062: 	xorl	%edx, %r10d
    00000065: 	movd	%xmm0, %edx
    00000069: 	xorl	%edx, %r10d
.Ltmp1878:
    0000006c: 	cmpl	%ecx, %r9d
    0000006f: 	jle	.Ltmp1874 # Offset: 111
    00000075: 	movl	%r9d, %r11d
    00000078: 	subl	%ecx, %r11d
    0000007b: 	leal	-0x1(%r11), %edx
    0000007f: 	cmpl	$0x2, %edx
    00000082: 	jbe	.Ltmp1875 # Offset: 130
    00000084: 	movslq	%ecx, %rdx
    00000087: 	pxor	%xmm0, %xmm0
    0000008b: 	leaq	(%rdi,%rdx,4), %rsi
    0000008f: 	movl	%r11d, %edx
    00000092: 	shrl	$0x2, %edx
    00000095: 	leal	-0x1(%rdx), %r8d
    00000099: 	leaq	0x10(%rsi), %rdx
    0000009d: 	shlq	$0x4, %r8
    000000a1: 	addq	%rdx, %r8
    000000a4: 	jmp	.Ltmp1876 # Offset: 164
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1877:
    000000b0: 	addq	$0x10, %rdx
.Ltmp1876:
    000000b4: 	movdqu	(%rsi), %xmm1
    000000b8: 	movq	%rdx, %rsi
    000000bb: 	pxor	%xmm1, %xmm0
    000000bf: 	cmpq	%rdx, %r8
    000000c2: 	jne	.Ltmp1877 # Offset: 194
    000000c4: 	movdqa	%xmm0, %xmm1
    000000c8: 	psrldq	$0x8, %xmm1
    000000cd: 	pxor	%xmm1, %xmm0
    000000d1: 	movdqa	%xmm0, %xmm1
    000000d5: 	psrldq	$0x4, %xmm1
    000000da: 	pxor	%xmm1, %xmm0
    000000de: 	movd	%xmm0, %edx
    000000e2: 	xorl	%edx, %eax
    000000e4: 	movl	%r11d, %edx
    000000e7: 	andl	$-0x4, %edx
    000000ea: 	addl	%edx, %ecx
    000000ec: 	cmpl	%r11d, %edx
    000000ef: 	je	.Ltmp1874 # Offset: 239
.Ltmp1875:
    000000f1: 	movslq	%ecx, %rdx
    000000f4: 	leaq	(,%rdx,4), %rsi
    000000fc: 	xorl	(%rdi,%rdx,4), %eax
    000000ff: 	leal	0x1(%rcx), %edx
    00000102: 	cmpl	%edx, %r9d
    00000105: 	jle	.Ltmp1874 # Offset: 261
    00000107: 	addl	$0x2, %ecx
    0000010a: 	xorl	0x4(%rdi,%rsi), %eax
    0000010e: 	cmpl	%r9d, %ecx
    00000111: 	jge	.Ltmp1874 # Offset: 273
    00000113: 	xorl	0x8(%rdi,%rsi), %eax
.Ltmp1874:
    00000117: 	xorl	%r10d, %eax
    0000011a: 	retq # Offset: 282
    0000011b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1872:
    00000120: 	xorl	%r10d, %r10d
    00000123: 	xorl	%ecx, %ecx
    00000125: 	jmp	.Ltmp1878 # Offset: 293
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor7IiET_PKS0_iS0_"

Binary Function "_Z8bit_xor8IiET_PKS0_iS0_" after disassembly {
  Number      : 270
  State       : disassembled
  Address     : 0x18df0
  Size        : 0x159
  MaxSize     : 0x160
  Offset      : 0x18df0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor8IiET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0269:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x7, %esi
    0000000c: 	jle	.Ltmp1879 # Offset: 12
    00000012: 	leal	-0x8(%rsi), %ecx
    00000015: 	movd	%edx, %xmm1
    00000019: 	movq	%rdi, %rax
    0000001c: 	xorl	%edx, %edx
    0000001e: 	shrl	$0x3, %ecx
    00000021: 	pxor	%xmm0, %xmm0
    00000025: 	addl	$0x1, %ecx
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1880:
    00000030: 	movdqu	(%rax), %xmm3
    00000034: 	movdqu	0x10(%rax), %xmm4
    00000039: 	addl	$0x1, %edx
    0000003c: 	addq	$0x20, %rax
    00000040: 	pxor	%xmm3, %xmm1
    00000044: 	pxor	%xmm4, %xmm0
    00000048: 	cmpl	%edx, %ecx
    0000004a: 	ja	.Ltmp1880 # Offset: 74
    0000004c: 	movdqa	%xmm1, %xmm2
    00000050: 	leal	(,%rcx,8), %esi
    00000057: 	movd	%xmm1, %eax
    0000005b: 	punpckhdq	%xmm1, %xmm2
    0000005f: 	movd	%xmm2, %ecx
    00000063: 	pshufd	$0x55, %xmm1, %xmm2
    00000068: 	pshufd	$0xff, %xmm1, %xmm1
    0000006d: 	movd	%xmm2, %edx
    00000071: 	xorl	%edx, %ecx
    00000073: 	movd	%xmm1, %edx
    00000077: 	pshufd	$0x55, %xmm0, %xmm1
    0000007c: 	xorl	%edx, %ecx
    0000007e: 	movd	%xmm0, %edx
    00000082: 	xorl	%edx, %ecx
    00000084: 	movd	%xmm1, %edx
    00000088: 	movdqa	%xmm0, %xmm1
    0000008c: 	punpckhdq	%xmm0, %xmm1
    00000090: 	xorl	%edx, %ecx
    00000092: 	pshufd	$0xff, %xmm0, %xmm0
    00000097: 	movd	%xmm1, %edx
    0000009b: 	xorl	%edx, %ecx
    0000009d: 	movd	%xmm0, %edx
    000000a1: 	xorl	%edx, %ecx
.Ltmp1885:
    000000a3: 	cmpl	%esi, %r8d
    000000a6: 	jle	.Ltmp1881 # Offset: 166
    000000ac: 	movl	%r8d, %r11d
    000000af: 	subl	%esi, %r11d
    000000b2: 	leal	-0x1(%r11), %edx
    000000b6: 	cmpl	$0x2, %edx
    000000b9: 	jbe	.Ltmp1882 # Offset: 185
    000000bb: 	movslq	%esi, %rdx
    000000be: 	pxor	%xmm0, %xmm0
    000000c2: 	leaq	(%rdi,%rdx,4), %r9
    000000c6: 	movl	%r11d, %edx
    000000c9: 	shrl	$0x2, %edx
    000000cc: 	leal	-0x1(%rdx), %r10d
    000000d0: 	leaq	0x10(%r9), %rdx
    000000d4: 	shlq	$0x4, %r10
    000000d8: 	addq	%rdx, %r10
    000000db: 	jmp	.Ltmp1883 # Offset: 219
    000000dd: 	nopl	(%rax) # Size: 3
.Ltmp1884:
    000000e0: 	addq	$0x10, %rdx
.Ltmp1883:
    000000e4: 	movdqu	(%r9), %xmm1
    000000e9: 	movq	%rdx, %r9
    000000ec: 	pxor	%xmm1, %xmm0
    000000f0: 	cmpq	%rdx, %r10
    000000f3: 	jne	.Ltmp1884 # Offset: 243
    000000f5: 	movdqa	%xmm0, %xmm1
    000000f9: 	psrldq	$0x8, %xmm1
    000000fe: 	pxor	%xmm1, %xmm0
    00000102: 	movdqa	%xmm0, %xmm1
    00000106: 	psrldq	$0x4, %xmm1
    0000010b: 	pxor	%xmm1, %xmm0
    0000010f: 	movd	%xmm0, %edx
    00000113: 	xorl	%edx, %eax
    00000115: 	movl	%r11d, %edx
    00000118: 	andl	$-0x4, %edx
    0000011b: 	addl	%edx, %esi
    0000011d: 	cmpl	%r11d, %edx
    00000120: 	je	.Ltmp1881 # Offset: 288
.Ltmp1882:
    00000122: 	movslq	%esi, %rdx
    00000125: 	leaq	(,%rdx,4), %r9
    0000012d: 	xorl	(%rdi,%rdx,4), %eax
    00000130: 	leal	0x1(%rsi), %edx
    00000133: 	cmpl	%edx, %r8d
    00000136: 	jle	.Ltmp1881 # Offset: 310
    00000138: 	addl	$0x2, %esi
    0000013b: 	xorl	0x4(%rdi,%r9), %eax
    00000140: 	cmpl	%r8d, %esi
    00000143: 	jge	.Ltmp1881 # Offset: 323
    00000145: 	xorl	0x8(%rdi,%r9), %eax
.Ltmp1881:
    0000014a: 	xorl	%ecx, %eax
    0000014c: 	retq # Offset: 332
    0000014d: 	nopl	(%rax) # Size: 3
.Ltmp1879:
    00000150: 	xorl	%ecx, %ecx
    00000152: 	xorl	%esi, %esi
    00000154: 	jmp	.Ltmp1885 # Offset: 340
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor8IiET_PKS0_iS0_"

Binary Function "_Z10logic_and1IiEbPKT_ib" after disassembly {
  Number      : 271
  State       : disassembled
  Address     : 0x18f50
  Size        : 0x33
  MaxSize     : 0x40
  Offset      : 0x18f50
  Section     : .text
  Orc Section : .local.text._Z10logic_and1IiEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0270:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp1886 # Offset: 8
    0000000a: 	testb	%dl, %dl
    0000000c: 	je	.Ltmp1886 # Offset: 12
    0000000e: 	leal	-0x1(%rsi), %edx
    00000011: 	leaq	0x4(%rdi,%rdx,4), %rdx
.Ltmp1888:
    00000016: 	movl	(%rdi), %ecx
    00000018: 	testl	%ecx, %ecx
    0000001a: 	je	.Ltmp1887 # Offset: 26
    0000001c: 	addq	$0x4, %rdi
    00000020: 	cmpq	%rdi, %rdx
    00000023: 	jne	.Ltmp1888 # Offset: 35
    00000025: 	retq # Offset: 37
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1887:
    00000030: 	xorl	%eax, %eax
.Ltmp1886:
    00000032: 	retq # Offset: 50
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and1IiEbPKT_ib"

Binary Function "_Z10logic_and2IiEbPKT_ib" after disassembly {
  Number      : 272
  State       : disassembled
  Address     : 0x18f90
  Size        : 0x3b
  MaxSize     : 0x40
  Offset      : 0x18f90
  Section     : .text
  Orc Section : .local.text._Z10logic_and2IiEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0271:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	leaq	(%rdi,%rsi,4), %rax
    0000000b: 	cmpq	%rax, %rdi
    0000000e: 	je	.Ltmp1889 # Offset: 14
    00000010: 	testb	%dl, %dl
    00000012: 	jne	.Ltmp1890 # Offset: 18
.Ltmp1891:
    00000014: 	jmp	.Ltmp1891 # Offset: 20
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1890:
    00000020: 	addq	$0x4, %rdi
    00000024: 	movl	-0x4(%rdi), %edx
    00000027: 	cmpq	%rdi, %rax
    0000002a: 	je	.Ltmp1892 # Offset: 42
    0000002c: 	testl	%edx, %edx
    0000002e: 	jne	.Ltmp1890 # Offset: 46
    00000030: 	jmp	.Ltmp1891 # Offset: 48
.Ltmp1889:
    00000032: 	movl	%edx, %eax
    00000034: 	retq # Offset: 52
.Ltmp1892:
    00000035: 	testl	%edx, %edx
    00000037: 	setne	%al
    0000003a: 	retq # Offset: 58
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and2IiEbPKT_ib"

Binary Function "_Z10logic_and3IiEbPKT_ib" after disassembly {
  Number      : 273
  State       : disassembled
  Address     : 0x18fd0
  Size        : 0x7a
  MaxSize     : 0x80
  Offset      : 0x18fd0
  Section     : .text
  Orc Section : .local.text._Z10logic_and3IiEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0272:
    00000000: 	endbr64
    00000004: 	cmpl	$0x1, %esi
    00000007: 	jle	.Ltmp1893 # Offset: 7
    00000009: 	xorl	%eax, %eax
    0000000b: 	testb	%dl, %dl
    0000000d: 	je	.Ltmp1894 # Offset: 13
    0000000f: 	leal	-0x2(%rsi), %eax
    00000012: 	shrl	%eax
    00000014: 	leal	0x2(%rax), %r8d
    00000018: 	movl	$0x2, %eax
    0000001d: 	addq	%r8, %r8
.Ltmp1896:
    00000020: 	movl	-0x8(%rdi,%rax,4), %r9d
    00000025: 	testl	%r9d, %r9d
    00000028: 	je	.Ltmp1895 # Offset: 40
    0000002a: 	movl	-0x4(%rdi,%rax,4), %ecx
    0000002e: 	testl	%ecx, %ecx
    00000030: 	je	.Ltmp1895 # Offset: 48
    00000032: 	movslq	%eax, %rcx
    00000035: 	addq	$0x2, %rax
    00000039: 	cmpq	%r8, %rax
    0000003c: 	jne	.Ltmp1896 # Offset: 60
    0000003e: 	cmpl	%ecx, %esi
    00000040: 	jle	.Ltmp1897 # Offset: 64
.Ltmp1898:
    00000042: 	movl	(%rdi,%rcx,4), %eax
    00000045: 	testl	%eax, %eax
    00000047: 	je	.Ltmp1895 # Offset: 71
    00000049: 	addq	$0x1, %rcx
    0000004d: 	cmpl	%ecx, %esi
    0000004f: 	jg	.Ltmp1898 # Offset: 79
    00000051: 	movl	$0x1, %eax
    00000056: 	retq # Offset: 86
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1895:
    00000060: 	xorl	%eax, %eax
    00000062: 	retq # Offset: 98
.Ltmp1897:
    00000063: 	movl	%edx, %eax
.Ltmp1894:
    00000065: 	retq # Offset: 101
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1893:
    00000070: 	jne	.Ltmp1897 # Offset: 112
    00000072: 	testb	%dl, %dl
    00000074: 	je	.Ltmp1895 # Offset: 116
    00000076: 	xorl	%ecx, %ecx
    00000078: 	jmp	.Ltmp1898 # Offset: 120
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and3IiEbPKT_ib"

Binary Function "_Z10logic_and4IiEbPKT_ib" after disassembly {
  Number      : 274
  State       : disassembled
  Address     : 0x19050
  Size        : 0x7a
  MaxSize     : 0x80
  Offset      : 0x19050
  Section     : .text
  Orc Section : .local.text._Z10logic_and4IiEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0273:
    00000000: 	endbr64
    00000004: 	cmpl	$0x3, %esi
    00000007: 	jle	.Ltmp1899 # Offset: 7
    00000009: 	leal	-0x3(%rsi), %r8d
    0000000d: 	xorl	%eax, %eax
    0000000f: 	testb	%dl, %dl
    00000011: 	je	.Ltmp1900 # Offset: 17
    00000013: 	movq	%rdi, %rax
    00000016: 	xorl	%ecx, %ecx
.Ltmp1902:
    00000018: 	movl	(%rax), %r9d
    0000001b: 	testl	%r9d, %r9d
    0000001e: 	je	.Ltmp1901 # Offset: 30
    00000020: 	movl	0x4(%rax), %r11d
    00000024: 	testl	%r11d, %r11d
    00000027: 	je	.Ltmp1901 # Offset: 39
    00000029: 	movl	0x8(%rax), %r10d
    0000002d: 	testl	%r10d, %r10d
    00000030: 	je	.Ltmp1901 # Offset: 48
    00000032: 	movl	0xc(%rax), %r9d
    00000036: 	testl	%r9d, %r9d
    00000039: 	je	.Ltmp1901 # Offset: 57
    0000003b: 	addl	$0x4, %ecx
    0000003e: 	addq	$0x10, %rax
    00000042: 	cmpl	%r8d, %ecx
    00000045: 	jl	.Ltmp1902 # Offset: 69
    00000047: 	cmpl	%ecx, %esi
    00000049: 	jg	.Ltmp1903 # Offset: 73
.Ltmp1904:
    0000004b: 	movl	%edx, %eax
.Ltmp1900:
    0000004d: 	retq # Offset: 77
    0000004e: 	nop # Size: 2
.Ltmp1901:
    00000050: 	xorl	%eax, %eax
    00000052: 	retq # Offset: 82
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1899:
    00000058: 	testl	%esi, %esi
    0000005a: 	jle	.Ltmp1904 # Offset: 90
    0000005c: 	testb	%dl, %dl
    0000005e: 	je	.Ltmp1901 # Offset: 94
    00000060: 	xorl	%ecx, %ecx
.Ltmp1903:
    00000062: 	movslq	%ecx, %rax
.Ltmp1905:
    00000065: 	movl	(%rdi,%rax,4), %edx
    00000068: 	testl	%edx, %edx
    0000006a: 	je	.Ltmp1901 # Offset: 106
    0000006c: 	addq	$0x1, %rax
    00000070: 	cmpl	%eax, %esi
    00000072: 	jg	.Ltmp1905 # Offset: 114
    00000074: 	movl	$0x1, %eax
    00000079: 	retq # Offset: 121
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and4IiEbPKT_ib"

Binary Function "_Z10logic_and5IiEbPKT_ib" after disassembly {
  Number      : 275
  State       : disassembled
  Address     : 0x190d0
  Size        : 0x94
  MaxSize     : 0xa0
  Offset      : 0x190d0
  Section     : .text
  Orc Section : .local.text._Z10logic_and5IiEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0274:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x1, %esi
    0000000c: 	jle	.Ltmp1906 # Offset: 12
    00000012: 	leal	-0x2(%rsi), %r9d
    00000016: 	movq	%rdi, %rcx
    00000019: 	shrl	%r9d
    0000001c: 	movl	%r9d, %edi
    0000001f: 	leaq	0x8(%r8,%rdi,8), %rdi
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1909:
    00000028: 	testb	%dl, %dl
    0000002a: 	je	.Ltmp1907 # Offset: 42
    0000002c: 	movl	(%rcx), %r11d
    0000002f: 	testl	%r11d, %r11d
    00000032: 	setne	%dl
.Ltmp1907:
    00000035: 	testb	%al, %al
    00000037: 	je	.Ltmp1908 # Offset: 55
    00000039: 	movl	0x4(%rcx), %r10d
    0000003d: 	testl	%r10d, %r10d
    00000040: 	setne	%al
.Ltmp1908:
    00000043: 	addq	$0x8, %rcx
    00000047: 	cmpq	%rdi, %rcx
    0000004a: 	jne	.Ltmp1909 # Offset: 74
    0000004c: 	leal	0x2(%r9,%r9), %ecx
.Ltmp1913:
    00000051: 	cmpl	%ecx, %esi
    00000053: 	jle	.Ltmp1910 # Offset: 83
    00000055: 	testb	%dl, %dl
    00000057: 	je	.Ltmp1911 # Offset: 87
    00000059: 	subl	$0x1, %esi
    0000005c: 	movslq	%ecx, %rdi
    0000005f: 	subl	%ecx, %esi
    00000061: 	leaq	(%r8,%rdi,4), %rdx
    00000065: 	leaq	(%rsi,%rdi), %rcx
    00000069: 	leaq	0x4(%r8,%rcx,4), %rcx
.Ltmp1912:
    0000006e: 	movl	(%rdx), %esi
    00000070: 	testl	%esi, %esi
    00000072: 	je	.Ltmp1911 # Offset: 114
    00000074: 	addq	$0x4, %rdx
    00000078: 	cmpq	%rcx, %rdx
    0000007b: 	jne	.Ltmp1912 # Offset: 123
    0000007d: 	retq # Offset: 125
    0000007e: 	nop # Size: 2
.Ltmp1911:
    00000080: 	xorl	%eax, %eax
    00000082: 	retq # Offset: 130
    00000083: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1910:
    00000088: 	andl	%edx, %eax
    0000008a: 	retq # Offset: 138
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1906:
    00000090: 	xorl	%ecx, %ecx
    00000092: 	jmp	.Ltmp1913 # Offset: 146
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and5IiEbPKT_ib"

Binary Function "_Z10logic_and6IiEbPKT_ib" after disassembly {
  Number      : 276
  State       : disassembled
  Address     : 0x19170
  Size        : 0xf5
  MaxSize     : 0x100
  Offset      : 0x19170
  Section     : .text
  Orc Section : .local.text._Z10logic_and6IiEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0275:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movl	%esi, %r11d
    00000008: 	movl	%edx, %r10d
    0000000b: 	pushq	%rbx
    0000000c: 	movq	%rdi, %rbx
    0000000f: 	cmpl	$0x3, %esi
    00000012: 	jle	.Ltmp1914 # Offset: 18
    00000018: 	leal	-0x4(%rsi), %ebp
    0000001b: 	movq	%rdi, %rax
    0000001e: 	movl	%edx, %esi
    00000020: 	shrl	$0x2, %ebp
    00000023: 	movl	%ebp, %ecx
    00000025: 	shlq	$0x4, %rcx
    00000029: 	leaq	0x10(%rdi,%rcx), %r8
    0000002e: 	movl	%edx, %ecx
    00000030: 	xorl	%edi, %edi
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1919:
    00000038: 	testb	%r10b, %r10b
    0000003b: 	je	.Ltmp1915 # Offset: 59
    0000003d: 	movl	(%rax), %r10d
    00000040: 	testl	%r10d, %r10d
    00000043: 	setne	%r10b
.Ltmp1915:
    00000047: 	testb	%dl, %dl
    00000049: 	je	.Ltmp1916 # Offset: 73
    0000004b: 	movl	0x4(%rax), %r9d
    0000004f: 	testl	%r9d, %r9d
    00000052: 	setne	%dl
.Ltmp1916:
    00000055: 	testb	%cl, %cl
    00000057: 	je	.Ltmp1917 # Offset: 87
    00000059: 	movl	0x8(%rax), %ecx
    0000005c: 	testl	%ecx, %ecx
    0000005e: 	setne	%cl
.Ltmp1917:
    00000061: 	xorl	%r9d, %r9d
    00000064: 	testb	%sil, %sil
    00000067: 	je	.Ltmp1918 # Offset: 103
    00000069: 	movl	0xc(%rax), %r9d
    0000006d: 	testl	%r9d, %r9d
    00000070: 	movl	%edi, %r9d
    00000073: 	cmovnel	%ecx, %r9d
    00000077: 	cmovel	%edi, %esi
.Ltmp1918:
    0000007a: 	addq	$0x10, %rax
    0000007e: 	cmpq	%r8, %rax
    00000081: 	jne	.Ltmp1919 # Offset: 129
    00000083: 	leal	0x4(,%rbp,4), %ecx
    0000008a: 	cmpl	%ecx, %r11d
    0000008d: 	jle	.Ltmp1920 # Offset: 141
.Ltmp1923:
    0000008f: 	testb	%r10b, %r10b
    00000092: 	je	.Ltmp1921 # Offset: 146
    00000094: 	subl	$0x1, %r11d
    00000098: 	movslq	%ecx, %rsi
    0000009b: 	subl	%ecx, %r11d
    0000009e: 	leaq	(%rbx,%rsi,4), %rax
    000000a2: 	leaq	(%r11,%rsi), %rcx
    000000a6: 	leaq	0x4(%rbx,%rcx,4), %rcx
.Ltmp1922:
    000000ab: 	movl	(%rax), %esi
    000000ad: 	testl	%esi, %esi
    000000af: 	je	.Ltmp1921 # Offset: 175
    000000b1: 	addq	$0x4, %rax
    000000b5: 	cmpq	%rax, %rcx
    000000b8: 	jne	.Ltmp1922 # Offset: 184
.Ltmp1924:
    000000ba: 	xorl	%eax, %eax
    000000bc: 	testb	%dl, %dl
    000000be: 	popq	%rbx
    000000bf: 	popq	%rbp
    000000c0: 	cmovel	%eax, %r9d
    000000c4: 	movl	%r9d, %eax
    000000c7: 	retq # Offset: 199
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1921:
    000000d0: 	xorl	%r9d, %r9d
    000000d3: 	popq	%rbx
    000000d4: 	popq	%rbp
    000000d5: 	movl	%r9d, %eax
    000000d8: 	retq # Offset: 216
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp1914:
    000000e0: 	xorl	%ecx, %ecx
    000000e2: 	movl	%edx, %r9d
    000000e5: 	cmpl	%ecx, %r11d
    000000e8: 	jg	.Ltmp1923 # Offset: 232
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1920:
    000000f0: 	andl	%r10d, %edx
    000000f3: 	jmp	.Ltmp1924 # Offset: 243
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and6IiEbPKT_ib"

Binary Function "_Z10logic_and7IiEbPKT_ib" after disassembly {
  Number      : 277
  State       : disassembled
  Address     : 0x19270
  Size        : 0x130
  MaxSize     : 0x130
  Offset      : 0x19270
  Section     : .text
  Orc Section : .local.text._Z10logic_and7IiEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0276:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movl	%edx, %eax
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movl	%esi, %ebp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	cmpl	$0x3, %esi
    00000016: 	jle	.Ltmp1925 # Offset: 22
    0000001c: 	leal	-0x4(%rsi), %r14d
    00000020: 	movq	%rdi, %rcx
    00000023: 	xorl	%r10d, %r10d
    00000026: 	shrl	$0x2, %r14d
    0000002a: 	movl	%r14d, %esi
    0000002d: 	shlq	$0x4, %rsi
    00000031: 	leaq	0x10(%rdi,%rsi), %r13
    00000036: 	movl	%edx, %edi
    00000038: 	movl	%edx, %esi
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1930:
    00000040: 	movl	%eax, %r8d
    00000043: 	testb	%al, %al
    00000045: 	je	.Ltmp1926 # Offset: 69
    00000047: 	cmpl	$0x1, (%rcx)
    0000004a: 	movl	(%rcx), %r9d
    0000004d: 	sbbl	%eax, %eax
    0000004f: 	addl	$0x1, %eax
    00000052: 	testl	%r9d, %r9d
    00000055: 	cmovel	%r10d, %r8d
.Ltmp1926:
    00000059: 	movl	%edx, %r9d
    0000005c: 	testb	%dl, %dl
    0000005e: 	je	.Ltmp1927 # Offset: 94
    00000060: 	cmpl	$0x1, 0x4(%rcx)
    00000064: 	movl	0x4(%rcx), %r12d
    00000068: 	sbbl	%edx, %edx
    0000006a: 	addl	$0x1, %edx
    0000006d: 	testl	%r12d, %r12d
    00000070: 	cmovel	%r10d, %r9d
.Ltmp1927:
    00000074: 	movl	%esi, %r12d
    00000077: 	testb	%sil, %sil
    0000007a: 	je	.Ltmp1928 # Offset: 122
    0000007c: 	cmpl	$0x1, 0x8(%rcx)
    00000080: 	movl	0x8(%rcx), %r11d
    00000084: 	sbbl	%esi, %esi
    00000086: 	addl	$0x1, %esi
    00000089: 	testl	%r11d, %r11d
    0000008c: 	cmovel	%r10d, %r12d
.Ltmp1928:
    00000090: 	movl	%edi, %r11d
    00000093: 	testb	%dil, %dil
    00000096: 	je	.Ltmp1929 # Offset: 150
    00000098: 	cmpl	$0x1, 0xc(%rcx)
    0000009c: 	sbbl	%edi, %edi
    0000009e: 	addl	$0x1, %edi
    000000a1: 	cmpl	$0x0, 0xc(%rcx)
    000000a5: 	cmovel	%r10d, %r11d
.Ltmp1929:
    000000a9: 	addq	$0x10, %rcx
    000000ad: 	cmpq	%rcx, %r13
    000000b0: 	jne	.Ltmp1930 # Offset: 176
    000000b2: 	leal	0x4(,%r14,4), %ecx
.Ltmp1935:
    000000ba: 	cmpl	%ecx, %ebp
    000000bc: 	jle	.Ltmp1931 # Offset: 188
    000000be: 	subl	$0x1, %ebp
    000000c1: 	movslq	%ecx, %rsi
    000000c4: 	subl	%ecx, %ebp
    000000c6: 	leaq	(%rbx,%rsi,4), %rdx
    000000ca: 	addq	%rsi, %rbp
    000000cd: 	xorl	%esi, %esi
    000000cf: 	leaq	0x4(%rbx,%rbp,4), %rcx
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp1933:
    000000d8: 	movl	%eax, %r8d
    000000db: 	testb	%al, %al
    000000dd: 	je	.Ltmp1932 # Offset: 221
    000000df: 	cmpl	$0x1, (%rdx)
    000000e2: 	movl	(%rdx), %edi
    000000e4: 	sbbl	%eax, %eax
    000000e6: 	addl	$0x1, %eax
    000000e9: 	testl	%edi, %edi
    000000eb: 	cmovel	%esi, %r8d
.Ltmp1932:
    000000ef: 	addq	$0x4, %rdx
    000000f3: 	cmpq	%rdx, %rcx
    000000f6: 	jne	.Ltmp1933 # Offset: 246
.Ltmp1931:
    000000f8: 	testb	%r8b, %r8b
    000000fb: 	je	.Ltmp1934 # Offset: 251
    000000fd: 	xorl	%r8d, %r8d
    00000100: 	testb	%r9b, %r9b
    00000103: 	je	.Ltmp1934 # Offset: 259
    00000105: 	testb	%r12b, %r12b
    00000108: 	cmovnel	%r11d, %r8d
.Ltmp1934:
    0000010c: 	popq	%rbx
    0000010d: 	movl	%r8d, %eax
    00000110: 	popq	%rbp
    00000111: 	popq	%r12
    00000113: 	popq	%r13
    00000115: 	popq	%r14
    00000117: 	retq # Offset: 279
    00000118: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1925:
    00000120: 	movl	%edx, %r9d
    00000123: 	movl	%edx, %r11d
    00000126: 	movl	%edx, %r12d
    00000129: 	movl	%edx, %r8d
    0000012c: 	xorl	%ecx, %ecx
    0000012e: 	jmp	.Ltmp1935 # Offset: 302
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and7IiEbPKT_ib"

Binary Function "_Z10logic_and8IiEbPKT_ib" after disassembly {
  Number      : 278
  State       : disassembled
  Address     : 0x193a0
  Size        : 0x229
  MaxSize     : 0x230
  Offset      : 0x193a0
  Section     : .text
  Orc Section : .local.text._Z10logic_and8IiEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0277:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %eax
    00000008: 	movl	%edx, %ecx
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbp
    00000011: 	pushq	%rbx
    00000012: 	movq	%rdi, -0x10(%rsp)
    00000017: 	movl	%esi, -0x8(%rsp)
    0000001b: 	cmpl	$0x7, %esi
    0000001e: 	jle	.Ltmp1936 # Offset: 30
    00000024: 	leal	-0x8(%rsi), %esi
    00000027: 	movq	%rdi, %rdx
    0000002a: 	movl	%eax, %r12d
    0000002d: 	movl	%eax, %ebp
    0000002f: 	shrl	$0x3, %esi
    00000032: 	movl	%eax, %r10d
    00000035: 	movl	%eax, %r9d
    00000038: 	movl	%esi, -0x4(%rsp)
    0000003c: 	shlq	$0x5, %rsi
    00000040: 	leaq	0x20(%rdi,%rsi), %rbx
    00000045: 	xorl	%edi, %edi
    00000047: 	movl	%eax, %esi
    00000049: 	movq	%rbx, -0x18(%rsp)
    0000004e: 	movl	%eax, %ebx
.Ltmp1945:
    00000050: 	movl	%ecx, %r14d
    00000053: 	testb	%cl, %cl
    00000055: 	je	.Ltmp1937 # Offset: 85
    00000057: 	cmpl	$0x1, (%rdx)
    0000005a: 	movl	(%rdx), %r15d
    0000005d: 	sbbl	%ecx, %ecx
    0000005f: 	addl	$0x1, %ecx
    00000062: 	testl	%r15d, %r15d
    00000065: 	cmovel	%edi, %r14d
.Ltmp1937:
    00000069: 	movl	%eax, %r11d
    0000006c: 	testb	%al, %al
    0000006e: 	je	.Ltmp1938 # Offset: 110
    00000070: 	cmpl	$0x1, 0x4(%rdx)
    00000074: 	movl	0x4(%rdx), %r13d
    00000078: 	sbbl	%eax, %eax
    0000007a: 	addl	$0x1, %eax
    0000007d: 	testl	%r13d, %r13d
    00000080: 	cmovel	%edi, %r11d
.Ltmp1938:
    00000084: 	movl	%r9d, %r15d
    00000087: 	testb	%r9b, %r9b
    0000008a: 	je	.Ltmp1939 # Offset: 138
    0000008c: 	cmpl	$0x1, 0x8(%rdx)
    00000090: 	movl	0x8(%rdx), %r8d
    00000094: 	sbbl	%r9d, %r9d
    00000097: 	addl	$0x1, %r9d
    0000009b: 	testl	%r8d, %r8d
    0000009e: 	cmovel	%edi, %r15d
.Ltmp1939:
    000000a2: 	movb	%r10b, -0x1a(%rsp)
    000000a7: 	movl	%r10d, %r8d
    000000aa: 	testb	%r10b, %r10b
    000000ad: 	je	.Ltmp1940 # Offset: 173
    000000af: 	cmpl	$0x1, 0xc(%rdx)
    000000b3: 	movl	0xc(%rdx), %r13d
    000000b7: 	sbbl	%r10d, %r10d
    000000ba: 	addl	$0x1, %r10d
    000000be: 	testl	%r13d, %r13d
    000000c1: 	cmovel	%edi, %r8d
    000000c5: 	movb	%r8b, -0x1a(%rsp)
.Ltmp1940:
    000000ca: 	movb	%sil, -0x1c(%rsp)
    000000cf: 	movl	%esi, %r8d
    000000d2: 	testb	%sil, %sil
    000000d5: 	je	.Ltmp1941 # Offset: 213
    000000d7: 	cmpl	$0x1, 0x10(%rdx)
    000000db: 	movl	0x10(%rdx), %r13d
    000000df: 	sbbl	%esi, %esi
    000000e1: 	addl	$0x1, %esi
    000000e4: 	testl	%r13d, %r13d
    000000e7: 	cmovel	%edi, %r8d
    000000eb: 	movb	%r8b, -0x1c(%rsp)
.Ltmp1941:
    000000f0: 	movl	%ebx, %r13d
    000000f3: 	testb	%bl, %bl
    000000f5: 	je	.Ltmp1942 # Offset: 245
    000000f7: 	cmpl	$0x1, 0x14(%rdx)
    000000fb: 	movl	0x14(%rdx), %r8d
    000000ff: 	sbbl	%ebx, %ebx
    00000101: 	addl	$0x1, %ebx
    00000104: 	testl	%r8d, %r8d
    00000107: 	cmovel	%edi, %r13d
.Ltmp1942:
    0000010b: 	movb	%bpl, -0x1b(%rsp)
    00000110: 	movl	%ebp, %r8d
    00000113: 	testb	%bpl, %bpl
    00000116: 	je	.Ltmp1943 # Offset: 278
    00000118: 	cmpl	$0x1, 0x18(%rdx)
    0000011c: 	sbbl	%ebp, %ebp
    0000011e: 	addl	$0x1, %ebp
    00000121: 	cmpl	$0x0, 0x18(%rdx)
    00000125: 	cmovel	%edi, %r8d
    00000129: 	movb	%r8b, -0x1b(%rsp)
.Ltmp1943:
    0000012e: 	movb	%r12b, -0x19(%rsp)
    00000133: 	movl	%r12d, %r8d
    00000136: 	testb	%r12b, %r12b
    00000139: 	je	.Ltmp1944 # Offset: 313
    0000013b: 	cmpl	$0x1, 0x1c(%rdx)
    0000013f: 	sbbl	%r12d, %r12d
    00000142: 	addl	$0x1, %r12d
    00000146: 	cmpl	$0x0, 0x1c(%rdx)
    0000014a: 	cmovel	%edi, %r8d
    0000014e: 	movb	%r8b, -0x19(%rsp)
.Ltmp1944:
    00000153: 	addq	$0x20, %rdx
    00000157: 	cmpq	%rdx, -0x18(%rsp)
    0000015c: 	jne	.Ltmp1945 # Offset: 348
    00000162: 	movl	-0x4(%rsp), %eax
    00000166: 	movzbl	-0x1c(%rsp), %r8d
    0000016c: 	movl	%r14d, %esi
    0000016f: 	movl	%r11d, %r14d
    00000172: 	leal	0x8(,%rax,8), %edi
.Ltmp1952:
    00000179: 	movl	-0x8(%rsp), %ebx
    0000017d: 	cmpl	%ebx, %edi
    0000017f: 	jge	.Ltmp1946 # Offset: 383
    00000181: 	subl	$0x1, %ebx
    00000184: 	movslq	%edi, %rsi
    00000187: 	movq	-0x10(%rsp), %r11
    0000018c: 	movl	%ebx, %edx
    0000018e: 	subl	%edi, %edx
    00000190: 	leaq	(%r11,%rsi,4), %rax
    00000194: 	xorl	%edi, %edi
    00000196: 	addq	%rsi, %rdx
    00000199: 	leaq	0x4(%r11,%rdx,4), %rdx
    0000019e: 	nop # Size: 2
.Ltmp1948:
    000001a0: 	movl	%ecx, %esi
    000001a2: 	testb	%cl, %cl
    000001a4: 	je	.Ltmp1947 # Offset: 420
    000001a6: 	cmpl	$0x1, (%rax)
    000001a9: 	movl	(%rax), %r9d
    000001ac: 	sbbl	%ecx, %ecx
    000001ae: 	addl	$0x1, %ecx
    000001b1: 	testl	%r9d, %r9d
    000001b4: 	cmovel	%edi, %esi
.Ltmp1947:
    000001b7: 	addq	$0x4, %rax
    000001bb: 	cmpq	%rax, %rdx
    000001be: 	jne	.Ltmp1948 # Offset: 446
.Ltmp1946:
    000001c0: 	testb	%sil, %sil
    000001c3: 	je	.Ltmp1949 # Offset: 451
    000001c5: 	xorl	%esi, %esi
    000001c7: 	testb	%r14b, %r14b
    000001ca: 	jne	.Ltmp1950 # Offset: 458
.Ltmp1949:
    000001cc: 	testb	%r8b, %r8b
    000001cf: 	je	.Ltmp1951 # Offset: 463
    000001d1: 	xorl	%r8d, %r8d
    000001d4: 	testb	%r13b, %r13b
    000001d7: 	je	.Ltmp1951 # Offset: 471
    000001d9: 	cmpb	$0x0, -0x1b(%rsp)
    000001de: 	cmovnel	%esi, %r8d
.Ltmp1951:
    000001e2: 	popq	%rbx
    000001e3: 	movl	%r8d, %eax
    000001e6: 	popq	%rbp
    000001e7: 	popq	%r12
    000001e9: 	popq	%r13
    000001eb: 	popq	%r14
    000001ed: 	popq	%r15
    000001ef: 	retq # Offset: 495
.Ltmp1950:
    000001f0: 	testb	%r15b, %r15b
    000001f3: 	je	.Ltmp1949 # Offset: 499
    000001f5: 	movzbl	-0x19(%rsp), %eax
    000001fa: 	cmpb	$0x0, -0x1a(%rsp)
    000001ff: 	cmovnel	%eax, %esi
    00000202: 	jmp	.Ltmp1949 # Offset: 514
    00000204: 	nopl	(%rax) # Size: 4
.Ltmp1936:
    00000208: 	movb	%dl, -0x19(%rsp)
    0000020c: 	movl	%edx, %esi
    0000020e: 	movl	%edx, %r13d
    00000211: 	movl	%edx, %r15d
    00000214: 	movb	%dl, -0x1b(%rsp)
    00000218: 	movl	%edx, %r14d
    0000021b: 	movl	%edx, %r8d
    0000021e: 	xorl	%edi, %edi
    00000220: 	movb	%dl, -0x1a(%rsp)
    00000224: 	jmp	.Ltmp1952 # Offset: 548
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and8IiEbPKT_ib"

Binary Function "_Z9logic_or1IiEbPKT_ib" after disassembly {
  Number      : 279
  State       : disassembled
  Address     : 0x195d0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x195d0
  Section     : .text
  Orc Section : .local.text._Z9logic_or1IiEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0278:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp1953 # Offset: 8
    0000000a: 	leal	-0x1(%rsi), %edx
    0000000d: 	leaq	0x4(%rdi,%rdx,4), %rcx
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1954:
    00000018: 	movl	(%rdi), %edx
    0000001a: 	testl	%edx, %edx
    0000001c: 	setne	%dl
    0000001f: 	addq	$0x4, %rdi
    00000023: 	orl	%edx, %eax
    00000025: 	cmpq	%rdi, %rcx
    00000028: 	jne	.Ltmp1954 # Offset: 40
.Ltmp1953:
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or1IiEbPKT_ib"

Binary Function "_Z12logic_or_optIiEbPKT_ib" after disassembly {
  Number      : 280
  State       : disassembled
  Address     : 0x19600
  Size        : 0x43
  MaxSize     : 0x50
  Offset      : 0x19600
  Section     : .text
  Orc Section : .local.text._Z12logic_or_optIiEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0279:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp1955 # Offset: 6
    00000008: 	cmpb	$0x1, %dl
    0000000b: 	je	.Ltmp1955 # Offset: 11
    0000000d: 	movl	$0x1, %eax
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1956:
    00000018: 	movl	-0x4(%rdi,%rax,4), %edx
    0000001c: 	cmpl	%eax, %esi
    0000001e: 	setg	%r8b
    00000022: 	testl	%edx, %edx
    00000024: 	sete	%cl
    00000027: 	addq	$0x1, %rax
    0000002b: 	testb	%cl, %r8b
    0000002e: 	jne	.Ltmp1956 # Offset: 46
    00000030: 	testl	%edx, %edx
    00000032: 	setne	%al
    00000035: 	retq # Offset: 53
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1955:
    00000040: 	movl	%edx, %eax
    00000042: 	retq # Offset: 66
DWARF CFI Instructions:
    <empty>
End of Function "_Z12logic_or_optIiEbPKT_ib"

Binary Function "_Z9logic_or2IiEbPKT_ib" after disassembly {
  Number      : 281
  State       : disassembled
  Address     : 0x19650
  Size        : 0x87
  MaxSize     : 0x90
  Offset      : 0x19650
  Section     : .text
  Orc Section : .local.text._Z9logic_or2IiEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0280:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movl	%edx, %r8d
    0000000a: 	leaq	(%rdi,%rsi,4), %rcx
    0000000e: 	cmpq	%rcx, %rdi
    00000011: 	jne	.Ltmp1957 # Offset: 17
    00000013: 	jmp	.Ltmp1958 # Offset: 19
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp1963:
    00000018: 	testb	%r8b, %r8b
    0000001b: 	jne	.Ltmp1959 # Offset: 27
.Ltmp1961:
    0000001d: 	cmpq	%rax, %rcx
    00000020: 	je	.Ltmp1960 # Offset: 32
    00000022: 	movl	(%rax), %edx
    00000024: 	addq	$0x4, %rax
    00000028: 	testl	%edx, %edx
    0000002a: 	je	.Ltmp1961 # Offset: 42
.Ltmp1966:
    0000002c: 	movq	%rax, %rdi
    0000002f: 	movl	$0x1, %r8d
    00000035: 	cmpq	%rdi, %rcx
    00000038: 	je	.Ltmp1962 # Offset: 56
.Ltmp1957:
    0000003a: 	movl	(%rdi), %r9d
    0000003d: 	leaq	0x4(%rdi), %rax
    00000041: 	testl	%r9d, %r9d
    00000044: 	je	.Ltmp1963 # Offset: 68
.Ltmp1965:
    00000046: 	cmpq	%rax, %rcx
    00000049: 	je	.Ltmp1962 # Offset: 73
    0000004b: 	leaq	0x4(%rax), %rdi
    0000004f: 	movl	$0x1, %r8d
    00000055: 	cmpq	%rdi, %rcx
    00000058: 	jne	.Ltmp1957 # Offset: 88
.Ltmp1962:
    0000005a: 	movl	$0x1, %eax
    0000005f: 	retq # Offset: 95
.Ltmp1959:
    00000060: 	cmpq	%rax, %rcx
    00000063: 	je	.Ltmp1964 # Offset: 99
    00000065: 	movl	0x4(%rdi), %esi
    00000068: 	leaq	0x8(%rdi), %rax
    0000006c: 	testl	%esi, %esi
    0000006e: 	jne	.Ltmp1965 # Offset: 110
    00000070: 	jmp	.Ltmp1966 # Offset: 112
    00000072: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1960:
    00000078: 	xorl	%eax, %eax
    0000007a: 	retq # Offset: 122
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1958:
    00000080: 	movl	%edx, %eax
    00000082: 	retq # Offset: 130
.Ltmp1964:
    00000083: 	movl	%r8d, %eax
    00000086: 	retq # Offset: 134
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or2IiEbPKT_ib"

Binary Function "_Z9logic_or3IiEbPKT_ib" after disassembly {
  Number      : 282
  State       : disassembled
  Address     : 0x196e0
  Size        : 0x8c
  MaxSize     : 0x90
  Offset      : 0x196e0
  Section     : .text
  Orc Section : .local.text._Z9logic_or3IiEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0281:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%edx, %eax
    00000009: 	movl	%esi, %edi
    0000000b: 	cmpl	$0x1, %esi
    0000000e: 	jle	.Ltmp1967 # Offset: 14
    00000010: 	leal	-0x2(%rsi), %r8d
    00000014: 	movq	%r9, %rcx
    00000017: 	shrl	%r8d
    0000001a: 	movl	%r8d, %edx
    0000001d: 	leaq	0x8(%r9,%rdx,8), %rsi
    00000022: 	jmp	.Ltmp1968 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1970:
    00000028: 	addq	$0x8, %rcx
    0000002c: 	cmpq	%rcx, %rsi
    0000002f: 	je	.Ltmp1969 # Offset: 47
.Ltmp1968:
    00000031: 	movl	(%rcx), %r11d
    00000034: 	testl	%r11d, %r11d
    00000037: 	setne	%dl
    0000003a: 	orb	%dl, %al
    0000003c: 	jne	.Ltmp1970 # Offset: 60
    0000003e: 	movl	0x4(%rcx), %r10d
    00000042: 	testl	%r10d, %r10d
    00000045: 	setne	%al
    00000048: 	addq	$0x8, %rcx
    0000004c: 	cmpq	%rcx, %rsi
    0000004f: 	jne	.Ltmp1968 # Offset: 79
.Ltmp1969:
    00000051: 	leal	0x2(%r8,%r8), %edx
.Ltmp1972:
    00000056: 	cmpl	%edx, %edi
    00000058: 	jle	.Ltmp1971 # Offset: 88
    0000005a: 	movslq	%edx, %rcx
    0000005d: 	leaq	(,%rcx,4), %rsi
    00000065: 	movl	(%r9,%rcx,4), %ecx
    00000069: 	testl	%ecx, %ecx
    0000006b: 	setne	%cl
    0000006e: 	addl	$0x1, %edx
    00000071: 	orl	%ecx, %eax
    00000073: 	cmpl	%edx, %edi
    00000075: 	jle	.Ltmp1971 # Offset: 117
    00000077: 	movl	0x4(%r9,%rsi), %edx
    0000007c: 	testl	%edx, %edx
    0000007e: 	setne	%dl
    00000081: 	orl	%edx, %eax
.Ltmp1971:
    00000083: 	retq # Offset: 131
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp1967:
    00000088: 	xorl	%edx, %edx
    0000008a: 	jmp	.Ltmp1972 # Offset: 138
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or3IiEbPKT_ib"

Binary Function "_Z9logic_or4IiEbPKT_ib" after disassembly {
  Number      : 283
  State       : disassembled
  Address     : 0x19770
  Size        : 0xdc
  MaxSize     : 0xe0
  Offset      : 0x19770
  Section     : .text
  Orc Section : .local.text._Z9logic_or4IiEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0282:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	cmpl	$0x3, %esi
    00000009: 	jle	.Ltmp1973 # Offset: 9
    0000000f: 	leal	-0x4(%rsi), %r8d
    00000013: 	movq	%rdi, %rcx
    00000016: 	shrl	$0x2, %r8d
    0000001a: 	movl	%r8d, %edx
    0000001d: 	shlq	$0x4, %rdx
    00000021: 	leaq	0x10(%rdi,%rdx), %rdx
    00000026: 	jmp	.Ltmp1974 # Offset: 38
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1977:
    00000030: 	testb	%al, %al
    00000032: 	jne	.Ltmp1975 # Offset: 50
    00000034: 	movl	0x4(%rcx), %r10d
    00000038: 	movl	$0x1, %eax
    0000003d: 	testl	%r10d, %r10d
    00000040: 	jne	.Ltmp1975 # Offset: 64
    00000042: 	movl	0x8(%rcx), %r9d
    00000046: 	testl	%r9d, %r9d
    00000049: 	jne	.Ltmp1975 # Offset: 73
    0000004b: 	movl	0xc(%rcx), %r11d
    0000004f: 	testl	%r11d, %r11d
    00000052: 	setne	%al
.Ltmp1975:
    00000055: 	addq	$0x10, %rcx
    00000059: 	cmpq	%rcx, %rdx
    0000005c: 	je	.Ltmp1976 # Offset: 92
.Ltmp1974:
    0000005e: 	movl	(%rcx), %r11d
    00000061: 	testl	%r11d, %r11d
    00000064: 	je	.Ltmp1977 # Offset: 100
    00000066: 	addq	$0x10, %rcx
    0000006a: 	movl	$0x1, %eax
    0000006f: 	cmpq	%rcx, %rdx
    00000072: 	jne	.Ltmp1974 # Offset: 114
.Ltmp1976:
    00000074: 	leal	0x4(,%r8,4), %edx
.Ltmp1979:
    0000007c: 	cmpl	%edx, %esi
    0000007e: 	jle	.Ltmp1978 # Offset: 126
    00000080: 	movslq	%edx, %rcx
    00000083: 	movl	(%rdi,%rcx,4), %r10d
    00000087: 	leaq	(,%rcx,4), %r8
    0000008f: 	testl	%r10d, %r10d
    00000092: 	setne	%cl
    00000095: 	orl	%ecx, %eax
    00000097: 	leal	0x1(%rdx), %ecx
    0000009a: 	cmpl	%ecx, %esi
    0000009c: 	jle	.Ltmp1978 # Offset: 156
    0000009e: 	movl	0x4(%rdi,%r8), %r9d
    000000a3: 	testl	%r9d, %r9d
    000000a6: 	setne	%cl
    000000a9: 	orl	%ecx, %eax
    000000ab: 	leal	0x2(%rdx), %ecx
    000000ae: 	cmpl	%esi, %ecx
    000000b0: 	jge	.Ltmp1978 # Offset: 176
    000000b2: 	movl	0x8(%rdi,%r8), %ecx
    000000b7: 	testl	%ecx, %ecx
    000000b9: 	setne	%cl
    000000bc: 	addl	$0x3, %edx
    000000bf: 	orl	%ecx, %eax
    000000c1: 	cmpl	%esi, %edx
    000000c3: 	jge	.Ltmp1978 # Offset: 195
    000000c5: 	movl	0xc(%rdi,%r8), %edx
    000000ca: 	testl	%edx, %edx
    000000cc: 	setne	%dl
    000000cf: 	orl	%edx, %eax
.Ltmp1978:
    000000d1: 	retq # Offset: 209
    000000d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1973:
    000000d8: 	xorl	%edx, %edx
    000000da: 	jmp	.Ltmp1979 # Offset: 218
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or4IiEbPKT_ib"

Binary Function "_Z9logic_or5IiEbPKT_ib" after disassembly {
  Number      : 284
  State       : disassembled
  Address     : 0x19850
  Size        : 0x84
  MaxSize     : 0x90
  Offset      : 0x19850
  Section     : .text
  Orc Section : .local.text._Z9logic_or5IiEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0283:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%edx, %eax
    00000009: 	movl	%esi, %edi
    0000000b: 	cmpl	$0x1, %esi
    0000000e: 	jle	.Ltmp1980 # Offset: 14
    00000010: 	leal	-0x2(%rsi), %r10d
    00000014: 	movq	%r9, %rcx
    00000017: 	shrl	%r10d
    0000001a: 	movl	%r10d, %esi
    0000001d: 	leaq	0x8(%r9,%rsi,8), %r8
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1981:
    00000028: 	movl	(%rcx), %r11d
    0000002b: 	testl	%r11d, %r11d
    0000002e: 	setne	%sil
    00000032: 	orl	%esi, %eax
    00000034: 	movl	0x4(%rcx), %esi
    00000037: 	testl	%esi, %esi
    00000039: 	setne	%sil
    0000003d: 	addq	$0x8, %rcx
    00000041: 	orl	%esi, %edx
    00000043: 	cmpq	%rcx, %r8
    00000046: 	jne	.Ltmp1981 # Offset: 70
    00000048: 	leal	0x2(%r10,%r10), %esi
.Ltmp1984:
    0000004d: 	cmpl	%esi, %edi
    0000004f: 	jle	.Ltmp1982 # Offset: 79
    00000051: 	subl	$0x1, %edi
    00000054: 	movslq	%esi, %r8
    00000057: 	subl	%esi, %edi
    00000059: 	leaq	(%r9,%r8,4), %rcx
    0000005d: 	addq	%r8, %rdi
    00000060: 	leaq	0x4(%r9,%rdi,4), %rdi
    00000065: 	nopl	(%rax) # Size: 3
.Ltmp1983:
    00000068: 	movl	(%rcx), %esi
    0000006a: 	testl	%esi, %esi
    0000006c: 	setne	%sil
    00000070: 	addq	$0x4, %rcx
    00000074: 	orl	%esi, %eax
    00000076: 	cmpq	%rcx, %rdi
    00000079: 	jne	.Ltmp1983 # Offset: 121
.Ltmp1982:
    0000007b: 	orl	%edx, %eax
    0000007d: 	retq # Offset: 125
    0000007e: 	nop # Size: 2
.Ltmp1980:
    00000080: 	xorl	%esi, %esi
    00000082: 	jmp	.Ltmp1984 # Offset: 130
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or5IiEbPKT_ib"

Binary Function "_Z9logic_or6IiEbPKT_ib" after disassembly {
  Number      : 285
  State       : disassembled
  Address     : 0x198e0
  Size        : 0xc9
  MaxSize     : 0xd0
  Offset      : 0x198e0
  Section     : .text
  Orc Section : .local.text._Z9logic_or6IiEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0284:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %r10
    00000008: 	movl	%esi, %r9d
    0000000b: 	movl	%edx, %eax
    0000000d: 	cmpl	$0x3, %esi
    00000010: 	jle	.Ltmp1985 # Offset: 16
    00000016: 	leal	-0x4(%rsi), %ebx
    00000019: 	movq	%rdi, %rcx
    0000001c: 	shrl	$0x2, %ebx
    0000001f: 	movl	%ebx, %esi
    00000021: 	shlq	$0x4, %rsi
    00000025: 	leaq	0x10(%rdi,%rsi), %r11
    0000002a: 	movl	%edx, %edi
    0000002c: 	movl	%edx, %esi
    0000002e: 	nop # Size: 2
.Ltmp1986:
    00000030: 	movl	(%rcx), %r8d
    00000033: 	testl	%r8d, %r8d
    00000036: 	setne	%r8b
    0000003a: 	orl	%r8d, %eax
    0000003d: 	movl	0x4(%rcx), %r8d
    00000041: 	testl	%r8d, %r8d
    00000044: 	setne	%r8b
    00000048: 	orl	%r8d, %edx
    0000004b: 	movl	0x8(%rcx), %r8d
    0000004f: 	testl	%r8d, %r8d
    00000052: 	setne	%r8b
    00000056: 	orl	%r8d, %esi
    00000059: 	movl	0xc(%rcx), %r8d
    0000005d: 	testl	%r8d, %r8d
    00000060: 	setne	%r8b
    00000064: 	addq	$0x10, %rcx
    00000068: 	orl	%r8d, %edi
    0000006b: 	cmpq	%rcx, %r11
    0000006e: 	jne	.Ltmp1986 # Offset: 110
    00000070: 	leal	0x4(,%rbx,4), %r8d
.Ltmp1989:
    00000078: 	cmpl	%r8d, %r9d
    0000007b: 	jle	.Ltmp1987 # Offset: 123
    0000007d: 	subl	$0x1, %r9d
    00000081: 	movslq	%r8d, %r11
    00000084: 	subl	%r8d, %r9d
    00000087: 	leaq	(%r10,%r11,4), %rcx
    0000008b: 	addq	%r11, %r9
    0000008e: 	leaq	0x4(%r10,%r9,4), %r9
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1988:
    00000098: 	movl	(%rcx), %r8d
    0000009b: 	testl	%r8d, %r8d
    0000009e: 	setne	%r8b
    000000a2: 	addq	$0x4, %rcx
    000000a6: 	orl	%r8d, %eax
    000000a9: 	cmpq	%rcx, %r9
    000000ac: 	jne	.Ltmp1988 # Offset: 172
.Ltmp1987:
    000000ae: 	orl	%edi, %esi
    000000b0: 	orb	%dl, %al
    000000b2: 	popq	%rbx
    000000b3: 	cmovel	%esi, %eax
    000000b6: 	retq # Offset: 182
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1985:
    000000c0: 	movl	%edx, %edi
    000000c2: 	movl	%edx, %esi
    000000c4: 	xorl	%r8d, %r8d
    000000c7: 	jmp	.Ltmp1989 # Offset: 199
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or6IiEbPKT_ib"

Binary Function "_Z9logic_or7IiEbPKT_ib" after disassembly {
  Number      : 286
  State       : disassembled
  Address     : 0x199b0
  Size        : 0xfe
  MaxSize     : 0x100
  Offset      : 0x199b0
  Section     : .text
  Orc Section : .local.text._Z9logic_or7IiEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0285:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movq	%rdi, %r11
    00000009: 	movl	%esi, %r10d
    0000000c: 	movl	%edx, %ecx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	cmpl	$0x3, %esi
    00000017: 	jle	.Ltmp1990 # Offset: 23
    0000001d: 	leal	-0x4(%rsi), %r14d
    00000021: 	movq	%rdi, %rax
    00000024: 	movl	%edx, %r8d
    00000027: 	shrl	$0x2, %r14d
    0000002b: 	movl	%r14d, %esi
    0000002e: 	shlq	$0x4, %rsi
    00000032: 	leaq	0x10(%rdi,%rsi), %r13
    00000037: 	movl	%edx, %edi
    00000039: 	movl	$0x1, %esi
    0000003e: 	nop # Size: 2
.Ltmp1991:
    00000040: 	movl	(%rax), %r9d
    00000043: 	movl	0x4(%rax), %ebx
    00000046: 	movl	0x8(%rax), %ebp
    00000049: 	testl	%r9d, %r9d
    0000004c: 	cmovnel	%esi, %ecx
    0000004f: 	testl	%ebx, %ebx
    00000051: 	cmovnel	%esi, %edx
    00000054: 	testl	%ebp, %ebp
    00000056: 	movl	0xc(%rax), %ebp
    00000059: 	cmovnel	%esi, %edi
    0000005c: 	movl	%ecx, %r9d
    0000005f: 	testl	%ebp, %ebp
    00000061: 	movl	%edx, %ebx
    00000063: 	cmovnel	%esi, %r8d
    00000067: 	addq	$0x10, %rax
    0000006b: 	movl	%edi, %r12d
    0000006e: 	movl	%r8d, %ebp
    00000071: 	cmpq	%r13, %rax
    00000074: 	jne	.Ltmp1991 # Offset: 116
    00000076: 	leal	0x4(,%r14,4), %edx
.Ltmp1996:
    0000007e: 	cmpl	%edx, %r10d
    00000081: 	jle	.Ltmp1992 # Offset: 129
    00000083: 	subl	$0x1, %r10d
    00000087: 	movslq	%edx, %rsi
    0000008a: 	subl	%edx, %r10d
    0000008d: 	leaq	(%r11,%rsi,4), %rax
    00000091: 	movl	$0x1, %edx
    00000096: 	addq	%rsi, %r10
    00000099: 	leaq	0x4(%r11,%r10,4), %rsi
    0000009e: 	nop # Size: 2
.Ltmp1993:
    000000a0: 	movl	(%rax), %edi
    000000a2: 	testl	%edi, %edi
    000000a4: 	cmovnel	%edx, %ecx
    000000a7: 	addq	$0x4, %rax
    000000ab: 	movl	%ecx, %r9d
    000000ae: 	cmpq	%rax, %rsi
    000000b1: 	jne	.Ltmp1993 # Offset: 177
.Ltmp1992:
    000000b3: 	testb	%r9b, %r9b
    000000b6: 	jne	.Ltmp1994 # Offset: 182
    000000b8: 	movl	%ebx, %r9d
    000000bb: 	testb	%bl, %bl
    000000bd: 	je	.Ltmp1995 # Offset: 189
.Ltmp1994:
    000000bf: 	popq	%rbx
    000000c0: 	movl	%r9d, %eax
    000000c3: 	popq	%rbp
    000000c4: 	popq	%r12
    000000c6: 	popq	%r13
    000000c8: 	popq	%r14
    000000ca: 	retq # Offset: 202
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1995:
    000000d0: 	testb	%r12b, %r12b
    000000d3: 	movl	%ebp, %r9d
    000000d6: 	popq	%rbx
    000000d7: 	popq	%rbp
    000000d8: 	cmovnel	%r12d, %r9d
    000000dc: 	popq	%r12
    000000de: 	popq	%r13
    000000e0: 	popq	%r14
    000000e2: 	movl	%r9d, %eax
    000000e5: 	retq # Offset: 229
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1990:
    000000f0: 	movl	%edx, %ebx
    000000f2: 	movl	%edx, %r9d
    000000f5: 	movl	%edx, %ebp
    000000f7: 	movl	%edx, %r12d
    000000fa: 	xorl	%edx, %edx
    000000fc: 	jmp	.Ltmp1996 # Offset: 252
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or7IiEbPKT_ib"

Binary Function "_Z9logic_or8IiEbPKT_ib" after disassembly {
  Number      : 287
  State       : disassembled
  Address     : 0x19ab0
  Size        : 0x1a2
  MaxSize     : 0x1b0
  Offset      : 0x19ab0
  Section     : .text
  Orc Section : .local.text._Z9logic_or8IiEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0286:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %eax
    00000008: 	pushq	%r14
    0000000a: 	pushq	%r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	movl	%esi, %ebx
    00000012: 	movl	%esi, -0x8(%rsp)
    00000016: 	movl	%edx, %esi
    00000018: 	movq	%rdi, -0x10(%rsp)
    0000001d: 	cmpl	$0x7, %ebx
    00000020: 	jle	.Ltmp1997 # Offset: 32
    00000026: 	leal	-0x8(%rbx), %ecx
    00000029: 	movq	%rdi, %rdx
    0000002c: 	movl	%eax, %ebp
    0000002e: 	movl	%eax, %ebx
    00000030: 	shrl	$0x3, %ecx
    00000033: 	movl	%eax, %r11d
    00000036: 	movl	%eax, %r10d
    00000039: 	movl	%eax, %r9d
    0000003c: 	movl	%ecx, -0x4(%rsp)
    00000040: 	shlq	$0x5, %rcx
    00000044: 	leaq	0x20(%rdi,%rcx), %rdi
    00000049: 	movl	$0x1, %ecx
    0000004e: 	movq	%rdi, -0x20(%rsp)
    00000053: 	movl	%eax, %edi
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp1998:
    00000058: 	movl	(%rdx), %r8d
    0000005b: 	movl	0x4(%rdx), %r12d
    0000005f: 	movl	0x8(%rdx), %r13d
    00000063: 	testl	%r8d, %r8d
    00000066: 	movl	0xc(%rdx), %r8d
    0000006a: 	cmovnel	%ecx, %esi
    0000006d: 	testl	%r12d, %r12d
    00000070: 	cmovnel	%ecx, %eax
    00000073: 	testl	%r13d, %r13d
    00000076: 	movl	0x10(%rdx), %r13d
    0000007a: 	cmovnel	%ecx, %edi
    0000007d: 	testl	%r8d, %r8d
    00000080: 	cmovnel	%ecx, %r9d
    00000084: 	testl	%r13d, %r13d
    00000087: 	movl	0x14(%rdx), %r13d
    0000008b: 	movl	%eax, %r12d
    0000008e: 	cmovnel	%ecx, %r10d
    00000092: 	movl	%edi, %r15d
    00000095: 	testl	%r13d, %r13d
    00000098: 	movb	%r9b, -0x13(%rsp)
    0000009d: 	cmovnel	%ecx, %r11d
    000000a1: 	cmpl	$0x0, 0x18(%rdx)
    000000a5: 	movl	%r10d, %r8d
    000000a8: 	cmovnel	%ecx, %ebx
    000000ab: 	cmpl	$0x0, 0x1c(%rdx)
    000000af: 	cmovnel	%ecx, %ebp
    000000b2: 	movl	%r11d, %r13d
    000000b5: 	addq	$0x20, %rdx
    000000b9: 	movb	%bl, -0x12(%rsp)
    000000bd: 	movb	%bpl, -0x11(%rsp)
    000000c2: 	cmpq	%rdx, -0x20(%rsp)
    000000c7: 	jne	.Ltmp1998 # Offset: 199
    000000c9: 	movl	-0x4(%rsp), %eax
    000000cd: 	movl	%r12d, %r14d
    000000d0: 	movl	%esi, %r12d
    000000d3: 	leal	0x8(,%rax,8), %ecx
.Ltmp2005:
    000000da: 	movl	-0x8(%rsp), %ebx
    000000de: 	cmpl	%ecx, %ebx
    000000e0: 	jle	.Ltmp1999 # Offset: 224
    000000e2: 	subl	$0x1, %ebx
    000000e5: 	movslq	%ecx, %rdi
    000000e8: 	movq	-0x10(%rsp), %r9
    000000ed: 	movl	%ebx, %edx
    000000ef: 	subl	%ecx, %edx
    000000f1: 	leaq	(%r9,%rdi,4), %rax
    000000f5: 	addq	%rdi, %rdx
    000000f8: 	leaq	0x4(%r9,%rdx,4), %rcx
    000000fd: 	movl	$0x1, %edx
    00000102: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2000:
    00000108: 	movl	(%rax), %edi
    0000010a: 	testl	%edi, %edi
    0000010c: 	cmovnel	%edx, %esi
    0000010f: 	addq	$0x4, %rax
    00000113: 	movl	%esi, %r12d
    00000116: 	cmpq	%rcx, %rax
    00000119: 	jne	.Ltmp2000 # Offset: 281
.Ltmp1999:
    0000011b: 	testb	%r12b, %r12b
    0000011e: 	jne	.Ltmp2001 # Offset: 286
    00000120: 	movl	%r14d, %r12d
    00000123: 	testb	%r14b, %r14b
    00000126: 	je	.Ltmp2002 # Offset: 294
.Ltmp2001:
    00000128: 	testb	%r8b, %r8b
    0000012b: 	jne	.Ltmp2003 # Offset: 299
    0000012d: 	movl	%r13d, %r8d
    00000130: 	testb	%r13b, %r13b
    00000133: 	je	.Ltmp2004 # Offset: 307
.Ltmp2003:
    00000135: 	popq	%rbx
    00000136: 	movl	%r8d, %eax
    00000139: 	popq	%rbp
    0000013a: 	popq	%r12
    0000013c: 	popq	%r13
    0000013e: 	popq	%r14
    00000140: 	popq	%r15
    00000142: 	retq # Offset: 322
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2004:
    00000148: 	movzbl	-0x12(%rsp), %eax
    0000014d: 	orb	-0x11(%rsp), %r12b
    00000152: 	popq	%rbx
    00000153: 	popq	%rbp
    00000154: 	testb	%al, %al
    00000156: 	movl	%eax, %r8d
    00000159: 	cmovel	%r12d, %r8d
    0000015d: 	popq	%r12
    0000015f: 	popq	%r13
    00000161: 	popq	%r14
    00000163: 	popq	%r15
    00000165: 	movl	%r8d, %eax
    00000168: 	retq # Offset: 360
    00000169: 	nopl	(%rax) # Size: 7
.Ltmp2002:
    00000170: 	movzbl	-0x13(%rsp), %r12d
    00000176: 	testb	%r15b, %r15b
    00000179: 	cmovnel	%r15d, %r12d
    0000017d: 	jmp	.Ltmp2001 # Offset: 381
    0000017f: 	nop # Size: 1
.Ltmp1997:
    00000180: 	movb	%dl, -0x11(%rsp)
    00000184: 	movl	%edx, %r12d
    00000187: 	movl	%edx, %r13d
    0000018a: 	movl	%edx, %r15d
    0000018d: 	movb	%dl, -0x12(%rsp)
    00000191: 	movl	%edx, %r14d
    00000194: 	movl	%edx, %r8d
    00000197: 	xorl	%ecx, %ecx
    00000199: 	movb	%dl, -0x13(%rsp)
    0000019d: 	jmp	.Ltmp2005 # Offset: 413
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or8IiEbPKT_ib"

Binary Function "_Z8bit_and1ImET_PKS0_iS0_" after disassembly {
  Number      : 288
  State       : disassembled
  Address     : 0x19c60
  Size        : 0x83
  MaxSize     : 0x90
  Offset      : 0x19c60
  Section     : .text
  Orc Section : .local.text._Z8bit_and1ImET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0287:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%esi, %esi
    00000009: 	jle	.Ltmp2006 # Offset: 9
    0000000b: 	cmpl	$0x1, %esi
    0000000e: 	je	.Ltmp2007 # Offset: 14
    00000010: 	movq	%rdi, %rax
    00000013: 	movl	%esi, %edi
    00000015: 	pcmpeqd	%xmm0, %xmm0
    00000019: 	shrl	%edi
    0000001b: 	subl	$0x1, %edi
    0000001e: 	shlq	$0x4, %rdi
    00000022: 	leaq	0x10(%rcx,%rdi), %rdi
    00000027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2008:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	addq	$0x10, %rax
    00000038: 	pand	%xmm2, %xmm0
    0000003c: 	cmpq	%rax, %rdi
    0000003f: 	jne	.Ltmp2008 # Offset: 63
    00000041: 	movdqa	%xmm0, %xmm1
    00000045: 	psrldq	$0x8, %xmm1
    0000004a: 	pand	%xmm1, %xmm0
    0000004e: 	movq	%xmm0, %rax
    00000053: 	andq	%rdx, %rax
    00000056: 	movl	%esi, %edx
    00000058: 	andl	$-0x2, %edx
    0000005b: 	andl	$0x1, %esi
    0000005e: 	je	.Ltmp2009 # Offset: 94
.Ltmp2010:
    00000060: 	movslq	%edx, %rdx
    00000063: 	andq	(%rcx,%rdx,8), %rax
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2009:
    00000070: 	retq # Offset: 112
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp2006:
    00000078: 	movq	%rdx, %rax
    0000007b: 	retq # Offset: 123
.Ltmp2007:
    0000007c: 	movq	%rdx, %rax
    0000007f: 	xorl	%edx, %edx
    00000081: 	jmp	.Ltmp2010 # Offset: 129
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and1ImET_PKS0_iS0_"

Binary Function "_Z8bit_and2ImET_PKS0_iS0_" after disassembly {
  Number      : 289
  State       : disassembled
  Address     : 0x19cf0
  Size        : 0x91
  MaxSize     : 0xa0
  Offset      : 0x19cf0
  Section     : .text
  Orc Section : .local.text._Z8bit_and2ImET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0288:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movq	%rdi, %rcx
    0000000a: 	shlq	$0x3, %rsi
    0000000e: 	je	.Ltmp2011 # Offset: 14
    00000010: 	movq	%rdi, %rax
    00000013: 	leaq	-0x8(%rsi), %rdi
    00000017: 	shrq	$0x3, %rdi
    0000001b: 	addq	$0x1, %rdi
    0000001f: 	cmpq	$0x8, %rsi
    00000023: 	je	.Ltmp2012 # Offset: 35
    00000025: 	movq	%rdi, %rsi
    00000028: 	pcmpeqd	%xmm0, %xmm0
    0000002c: 	shrq	%rsi
    0000002f: 	shlq	$0x4, %rsi
    00000033: 	addq	%rcx, %rsi
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2013:
    00000040: 	movdqu	(%rax), %xmm2
    00000044: 	addq	$0x10, %rax
    00000048: 	pand	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rsi
    0000004f: 	jne	.Ltmp2013 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	psrldq	$0x8, %xmm1
    0000005a: 	pand	%xmm1, %xmm0
    0000005e: 	movq	%xmm0, %rax
    00000063: 	andq	%rdx, %rax
    00000066: 	movq	%rdi, %rdx
    00000069: 	andq	$-0x2, %rdx
    0000006d: 	leaq	(%rcx,%rdx,8), %rcx
    00000071: 	cmpq	%rdx, %rdi
    00000074: 	je	.Ltmp2014 # Offset: 116
.Ltmp2015:
    00000076: 	andq	(%rcx), %rax
    00000079: 	retq # Offset: 121
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2014:
    00000080: 	retq # Offset: 128
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp2011:
    00000088: 	movq	%rdx, %rax
    0000008b: 	retq # Offset: 139
.Ltmp2012:
    0000008c: 	movq	%rdx, %rax
    0000008f: 	jmp	.Ltmp2015 # Offset: 143
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and2ImET_PKS0_iS0_"

Binary Function "_Z8bit_and3ImET_PKS0_iS0_" after disassembly {
  Number      : 290
  State       : disassembled
  Address     : 0x19d90
  Size        : 0xb6
  MaxSize     : 0xc0
  Offset      : 0x19d90
  Section     : .text
  Orc Section : .local.text._Z8bit_and3ImET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0289:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edi
    00000009: 	cmpl	$0x1, %esi
    0000000c: 	jle	.Ltmp2016 # Offset: 12
    00000012: 	leal	-0x2(%rsi), %eax
    00000015: 	movl	%eax, %esi
    00000017: 	shrl	%esi
    00000019: 	addl	$0x1, %esi
    0000001c: 	cmpl	$0x1, %eax
    0000001f: 	jbe	.Ltmp2017 # Offset: 31
    00000025: 	movl	%esi, %r8d
    00000028: 	movq	%rcx, %rax
    0000002b: 	pcmpeqd	%xmm0, %xmm0
    0000002f: 	shrl	%r8d
    00000032: 	subl	$0x1, %r8d
    00000036: 	shlq	$0x5, %r8
    0000003a: 	leaq	0x20(%rcx,%r8), %r8
    0000003f: 	nop # Size: 1
.Ltmp2018:
    00000040: 	movdqu	(%rax), %xmm1
    00000044: 	movdqu	0x10(%rax), %xmm3
    00000049: 	addq	$0x20, %rax
    0000004d: 	movdqa	%xmm1, %xmm2
    00000051: 	punpckhqdq	%xmm3, %xmm1
    00000055: 	punpcklqdq	%xmm3, %xmm2
    00000059: 	pand	%xmm2, %xmm1
    0000005d: 	pand	%xmm1, %xmm0
    00000061: 	cmpq	%rax, %r8
    00000064: 	jne	.Ltmp2018 # Offset: 100
    00000066: 	movdqa	%xmm0, %xmm1
    0000006a: 	movl	%esi, %r8d
    0000006d: 	psrldq	$0x8, %xmm1
    00000072: 	andl	$-0x2, %r8d
    00000076: 	pand	%xmm1, %xmm0
    0000007a: 	movq	%xmm0, %rax
    0000007f: 	andq	%rdx, %rax
    00000082: 	leal	(%r8,%r8), %edx
    00000086: 	cmpl	%r8d, %esi
    00000089: 	je	.Ltmp2019 # Offset: 137
.Ltmp2022:
    0000008b: 	movslq	%edx, %rdx
    0000008e: 	andq	(%rcx,%rdx,8), %rax
    00000092: 	andq	0x8(%rcx,%rdx,8), %rax
.Ltmp2019:
    00000097: 	addl	%esi, %esi
.Ltmp2021:
    00000099: 	cmpl	%edi, %esi
    0000009b: 	jge	.Ltmp2020 # Offset: 155
    0000009d: 	movslq	%esi, %rsi
    000000a0: 	andq	(%rcx,%rsi,8), %rax
.Ltmp2020:
    000000a4: 	retq # Offset: 164
    000000a5: 	nopl	(%rax) # Size: 3
.Ltmp2016:
    000000a8: 	movq	%rdx, %rax
    000000ab: 	xorl	%esi, %esi
    000000ad: 	jmp	.Ltmp2021 # Offset: 173
.Ltmp2017:
    000000af: 	movq	%rdx, %rax
    000000b2: 	xorl	%edx, %edx
    000000b4: 	jmp	.Ltmp2022 # Offset: 180
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and3ImET_PKS0_iS0_"

Binary Function "_Z8bit_and4ImET_PKS0_iS0_" after disassembly {
  Number      : 291
  State       : disassembled
  Address     : 0x19e50
  Size        : 0x12e
  MaxSize     : 0x130
  Offset      : 0x19e50
  Section     : .text
  Orc Section : .local.text._Z8bit_and4ImET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0290:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edi
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp2023 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %eax
    00000015: 	movl	%eax, %esi
    00000017: 	shrl	$0x2, %esi
    0000001a: 	addl	$0x1, %esi
    0000001d: 	cmpl	$0x3, %eax
    00000020: 	jbe	.Ltmp2024 # Offset: 32
    00000026: 	movl	%esi, %r8d
    00000029: 	movq	%rcx, %rax
    0000002c: 	pcmpeqd	%xmm0, %xmm0
    00000030: 	shrl	%r8d
    00000033: 	subl	$0x1, %r8d
    00000037: 	shlq	$0x6, %r8
    0000003b: 	leaq	0x40(%rcx,%r8), %r8
.Ltmp2025:
    00000040: 	movdqu	(%rax), %xmm1
    00000044: 	movdqu	0x10(%rax), %xmm6
    00000049: 	addq	$0x40, %rax
    0000004d: 	movdqu	-0x20(%rax), %xmm3
    00000052: 	movdqa	%xmm1, %xmm4
    00000056: 	punpckhqdq	%xmm6, %xmm1
    0000005a: 	punpcklqdq	%xmm6, %xmm4
    0000005e: 	movdqu	-0x10(%rax), %xmm6
    00000063: 	movdqa	%xmm3, %xmm5
    00000067: 	movdqa	%xmm1, %xmm2
    0000006b: 	punpckhqdq	%xmm6, %xmm3
    0000006f: 	punpcklqdq	%xmm6, %xmm5
    00000073: 	punpcklqdq	%xmm3, %xmm2
    00000077: 	punpckhqdq	%xmm3, %xmm1
    0000007b: 	pand	%xmm2, %xmm1
    0000007f: 	movdqa	%xmm4, %xmm2
    00000083: 	punpckhqdq	%xmm5, %xmm4
    00000087: 	punpcklqdq	%xmm5, %xmm2
    0000008b: 	pand	%xmm4, %xmm2
    0000008f: 	pand	%xmm2, %xmm1
    00000093: 	pand	%xmm1, %xmm0
    00000097: 	cmpq	%rax, %r8
    0000009a: 	jne	.Ltmp2025 # Offset: 154
    0000009c: 	movdqa	%xmm0, %xmm1
    000000a0: 	movl	%esi, %r8d
    000000a3: 	psrldq	$0x8, %xmm1
    000000a8: 	andl	$-0x2, %r8d
    000000ac: 	pand	%xmm1, %xmm0
    000000b0: 	movq	%xmm0, %rax
    000000b5: 	andq	%rdx, %rax
    000000b8: 	leal	(,%r8,4), %edx
    000000c0: 	cmpl	%esi, %r8d
    000000c3: 	je	.Ltmp2026 # Offset: 195
.Ltmp2029:
    000000c5: 	movslq	%edx, %rdx
    000000c8: 	andq	(%rcx,%rdx,8), %rax
    000000cc: 	andq	0x8(%rcx,%rdx,8), %rax
    000000d1: 	andq	0x10(%rcx,%rdx,8), %rax
    000000d6: 	andq	0x18(%rcx,%rdx,8), %rax
.Ltmp2026:
    000000db: 	leal	(,%rsi,4), %edx
.Ltmp2028:
    000000e2: 	cmpl	%edx, %edi
    000000e4: 	jle	.Ltmp2027 # Offset: 228
    000000e6: 	movslq	%edx, %rsi
    000000e9: 	leaq	(,%rsi,8), %r8
    000000f1: 	andq	(%rcx,%rsi,8), %rax
    000000f5: 	leal	0x1(%rdx), %esi
    000000f8: 	cmpl	%edi, %esi
    000000fa: 	jge	.Ltmp2027 # Offset: 250
    000000fc: 	leal	0x2(%rdx), %esi
    000000ff: 	andq	0x8(%rcx,%r8), %rax
    00000104: 	cmpl	%esi, %edi
    00000106: 	jle	.Ltmp2027 # Offset: 262
    00000108: 	addl	$0x3, %edx
    0000010b: 	andq	0x10(%rcx,%r8), %rax
    00000110: 	cmpl	%edx, %edi
    00000112: 	jle	.Ltmp2027 # Offset: 274
    00000114: 	andq	0x18(%rcx,%r8), %rax
.Ltmp2027:
    00000119: 	retq # Offset: 281
    0000011a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2023:
    00000120: 	movq	%rdx, %rax
    00000123: 	xorl	%edx, %edx
    00000125: 	jmp	.Ltmp2028 # Offset: 293
.Ltmp2024:
    00000127: 	movq	%rdx, %rax
    0000012a: 	xorl	%edx, %edx
    0000012c: 	jmp	.Ltmp2029 # Offset: 300
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and4ImET_PKS0_iS0_"

Binary Function "_Z8bit_and5ImET_PKS0_iS0_" after disassembly {
  Number      : 292
  State       : disassembled
  Address     : 0x19f80
  Size        : 0xd7
  MaxSize     : 0xe0
  Offset      : 0x19f80
  Section     : .text
  Orc Section : .local.text._Z8bit_and5ImET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0291:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rdx, %rax
    0000000a: 	cmpl	$0x1, %esi
    0000000d: 	jle	.Ltmp2030 # Offset: 13
    00000013: 	leal	-0x2(%rsi), %edx
    00000016: 	movq	%rax, %xmm0
    0000001b: 	xorl	%eax, %eax
    0000001d: 	shrl	%edx
    0000001f: 	punpcklqdq	%xmm0, %xmm0
    00000023: 	addl	$0x1, %edx
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2031:
    00000030: 	movq	%rax, %rcx
    00000033: 	addq	$0x1, %rax
    00000037: 	shlq	$0x4, %rcx
    0000003b: 	movdqu	(%r8,%rcx), %xmm1
    00000041: 	pand	%xmm1, %xmm0
    00000045: 	cmpl	%eax, %edx
    00000047: 	ja	.Ltmp2031 # Offset: 71
    00000049: 	movhlps	%xmm0, %xmm2
    0000004c: 	movq	%xmm0, %rax
    00000051: 	addl	%edx, %edx
    00000053: 	movq	%xmm2, %rdi
.Ltmp2036:
    00000058: 	cmpl	%edx, %esi
    0000005a: 	jle	.Ltmp2032 # Offset: 90
    0000005c: 	subl	%edx, %esi
    0000005e: 	cmpl	$0x1, %esi
    00000061: 	je	.Ltmp2033 # Offset: 97
    00000063: 	movslq	%edx, %rcx
    00000066: 	pcmpeqd	%xmm0, %xmm0
    0000006a: 	leaq	(%r8,%rcx,8), %r9
    0000006e: 	movl	%esi, %ecx
    00000070: 	shrl	%ecx
    00000072: 	leal	-0x1(%rcx), %r10d
    00000076: 	leaq	0x10(%r9), %rcx
    0000007a: 	shlq	$0x4, %r10
    0000007e: 	addq	%rcx, %r10
    00000081: 	jmp	.Ltmp2034 # Offset: 129
    00000083: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2035:
    00000088: 	addq	$0x10, %rcx
.Ltmp2034:
    0000008c: 	movdqu	(%r9), %xmm1
    00000091: 	movq	%rcx, %r9
    00000094: 	pand	%xmm1, %xmm0
    00000098: 	cmpq	%r10, %rcx
    0000009b: 	jne	.Ltmp2035 # Offset: 155
    0000009d: 	movdqa	%xmm0, %xmm1
    000000a1: 	psrldq	$0x8, %xmm1
    000000a6: 	pand	%xmm1, %xmm0
    000000aa: 	movq	%xmm0, %rcx
    000000af: 	andq	%rcx, %rax
    000000b2: 	movl	%esi, %ecx
    000000b4: 	andl	$-0x2, %ecx
    000000b7: 	addl	%ecx, %edx
    000000b9: 	cmpl	%esi, %ecx
    000000bb: 	je	.Ltmp2032 # Offset: 187
.Ltmp2033:
    000000bd: 	movslq	%edx, %rdx
    000000c0: 	andq	(%r8,%rdx,8), %rax
.Ltmp2032:
    000000c4: 	andq	%rdi, %rax
    000000c7: 	retq # Offset: 199
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2030:
    000000d0: 	movq	%rdx, %rdi
    000000d3: 	xorl	%edx, %edx
    000000d5: 	jmp	.Ltmp2036 # Offset: 213
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and5ImET_PKS0_iS0_"

Binary Function "_Z8bit_and6ImET_PKS0_iS0_" after disassembly {
  Number      : 293
  State       : disassembled
  Address     : 0x1a060
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x1a060
  Section     : .text
  Orc Section : .local.text._Z8bit_and6ImET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0292:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movq	%rdx, %rax
    0000000a: 	cmpl	$0x3, %esi
    0000000d: 	jle	.Ltmp2037 # Offset: 13
    00000013: 	movq	%rdx, %xmm0
    00000018: 	leal	-0x4(%rsi), %ecx
    0000001b: 	movq	%rdi, %rax
    0000001e: 	xorl	%edx, %edx
    00000020: 	shrl	$0x2, %ecx
    00000023: 	punpcklqdq	%xmm0, %xmm0
    00000027: 	addl	$0x1, %ecx
    0000002a: 	movdqa	%xmm0, %xmm1
    0000002e: 	nop # Size: 2
.Ltmp2038:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	movdqu	0x10(%rax), %xmm3
    00000039: 	addl	$0x1, %edx
    0000003c: 	addq	$0x20, %rax
    00000040: 	pand	%xmm2, %xmm0
    00000044: 	pand	%xmm3, %xmm1
    00000048: 	cmpl	%edx, %ecx
    0000004a: 	ja	.Ltmp2038 # Offset: 74
    0000004c: 	movhlps	%xmm0, %xmm4
    0000004f: 	movq	%xmm1, %rsi
    00000054: 	movhlps	%xmm1, %xmm5
    00000057: 	shll	$0x2, %ecx
    0000005a: 	movq	%xmm4, %rdx
    0000005f: 	movq	%xmm0, %rax
    00000064: 	andq	%rsi, %rdx
    00000067: 	movq	%xmm5, %rsi
    0000006c: 	andq	%rsi, %rdx
.Ltmp2043:
    0000006f: 	cmpl	%ecx, %r8d
    00000072: 	jle	.Ltmp2039 # Offset: 114
    00000074: 	movl	%r8d, %r9d
    00000077: 	subl	%ecx, %r9d
    0000007a: 	cmpl	$0x1, %r9d
    0000007e: 	je	.Ltmp2040 # Offset: 126
    00000080: 	movslq	%ecx, %rsi
    00000083: 	pcmpeqd	%xmm0, %xmm0
    00000087: 	leaq	(%rdi,%rsi,8), %r8
    0000008b: 	movl	%r9d, %esi
    0000008e: 	shrl	%esi
    00000090: 	leal	-0x1(%rsi), %r10d
    00000094: 	leaq	0x10(%r8), %rsi
    00000098: 	shlq	$0x4, %r10
    0000009c: 	addq	%rsi, %r10
    0000009f: 	jmp	.Ltmp2041 # Offset: 159
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp2042:
    000000a8: 	addq	$0x10, %rsi
.Ltmp2041:
    000000ac: 	movdqu	(%r8), %xmm1
    000000b1: 	movq	%rsi, %r8
    000000b4: 	pand	%xmm1, %xmm0
    000000b8: 	cmpq	%rsi, %r10
    000000bb: 	jne	.Ltmp2042 # Offset: 187
    000000bd: 	movdqa	%xmm0, %xmm1
    000000c1: 	psrldq	$0x8, %xmm1
    000000c6: 	pand	%xmm1, %xmm0
    000000ca: 	movq	%xmm0, %rsi
    000000cf: 	andq	%rsi, %rax
    000000d2: 	movl	%r9d, %esi
    000000d5: 	andl	$-0x2, %esi
    000000d8: 	addl	%esi, %ecx
    000000da: 	cmpl	%r9d, %esi
    000000dd: 	je	.Ltmp2039 # Offset: 221
.Ltmp2040:
    000000df: 	movslq	%ecx, %rcx
    000000e2: 	andq	(%rdi,%rcx,8), %rax
.Ltmp2039:
    000000e6: 	andq	%rdx, %rax
    000000e9: 	retq # Offset: 233
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2037:
    000000f0: 	xorl	%ecx, %ecx
    000000f2: 	jmp	.Ltmp2043 # Offset: 242
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and6ImET_PKS0_iS0_"

Binary Function "_Z8bit_and7ImET_PKS0_iS0_" after disassembly {
  Number      : 294
  State       : disassembled
  Address     : 0x1a160
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x1a160
  Section     : .text
  Orc Section : .local.text._Z8bit_and7ImET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0293:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movq	%rdx, %rax
    0000000a: 	cmpl	$0x3, %esi
    0000000d: 	jle	.Ltmp2044 # Offset: 13
    00000013: 	movq	%rdx, %xmm0
    00000018: 	leal	-0x4(%rsi), %ecx
    0000001b: 	movq	%rdi, %rax
    0000001e: 	xorl	%edx, %edx
    00000020: 	shrl	$0x2, %ecx
    00000023: 	punpcklqdq	%xmm0, %xmm0
    00000027: 	addl	$0x1, %ecx
    0000002a: 	movdqa	%xmm0, %xmm1
    0000002e: 	nop # Size: 2
.Ltmp2045:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	movdqu	0x10(%rax), %xmm3
    00000039: 	addl	$0x1, %edx
    0000003c: 	addq	$0x20, %rax
    00000040: 	pand	%xmm2, %xmm0
    00000044: 	pand	%xmm3, %xmm1
    00000048: 	cmpl	%edx, %ecx
    0000004a: 	ja	.Ltmp2045 # Offset: 74
    0000004c: 	movhlps	%xmm0, %xmm4
    0000004f: 	movq	%xmm1, %rsi
    00000054: 	movhlps	%xmm1, %xmm5
    00000057: 	shll	$0x2, %ecx
    0000005a: 	movq	%xmm4, %rdx
    0000005f: 	movq	%xmm0, %rax
    00000064: 	andq	%rsi, %rdx
    00000067: 	movq	%xmm5, %rsi
    0000006c: 	andq	%rsi, %rdx
.Ltmp2050:
    0000006f: 	cmpl	%ecx, %r8d
    00000072: 	jle	.Ltmp2046 # Offset: 114
    00000074: 	movl	%r8d, %r9d
    00000077: 	subl	%ecx, %r9d
    0000007a: 	cmpl	$0x1, %r9d
    0000007e: 	je	.Ltmp2047 # Offset: 126
    00000080: 	movslq	%ecx, %rsi
    00000083: 	pcmpeqd	%xmm0, %xmm0
    00000087: 	leaq	(%rdi,%rsi,8), %r8
    0000008b: 	movl	%r9d, %esi
    0000008e: 	shrl	%esi
    00000090: 	leal	-0x1(%rsi), %r10d
    00000094: 	leaq	0x10(%r8), %rsi
    00000098: 	shlq	$0x4, %r10
    0000009c: 	addq	%rsi, %r10
    0000009f: 	jmp	.Ltmp2048 # Offset: 159
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp2049:
    000000a8: 	addq	$0x10, %rsi
.Ltmp2048:
    000000ac: 	movdqu	(%r8), %xmm1
    000000b1: 	movq	%rsi, %r8
    000000b4: 	pand	%xmm1, %xmm0
    000000b8: 	cmpq	%rsi, %r10
    000000bb: 	jne	.Ltmp2049 # Offset: 187
    000000bd: 	movdqa	%xmm0, %xmm1
    000000c1: 	psrldq	$0x8, %xmm1
    000000c6: 	pand	%xmm1, %xmm0
    000000ca: 	movq	%xmm0, %rsi
    000000cf: 	andq	%rsi, %rax
    000000d2: 	movl	%r9d, %esi
    000000d5: 	andl	$-0x2, %esi
    000000d8: 	addl	%esi, %ecx
    000000da: 	cmpl	%r9d, %esi
    000000dd: 	je	.Ltmp2046 # Offset: 221
.Ltmp2047:
    000000df: 	movslq	%ecx, %rcx
    000000e2: 	andq	(%rdi,%rcx,8), %rax
.Ltmp2046:
    000000e6: 	andq	%rdx, %rax
    000000e9: 	retq # Offset: 233
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2044:
    000000f0: 	xorl	%ecx, %ecx
    000000f2: 	jmp	.Ltmp2050 # Offset: 242
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and7ImET_PKS0_iS0_"

Binary Function "_Z8bit_and8ImET_PKS0_iS0_" after disassembly {
  Number      : 295
  State       : disassembled
  Address     : 0x1a260
  Size        : 0x11c
  MaxSize     : 0x120
  Offset      : 0x1a260
  Section     : .text
  Orc Section : .local.text._Z8bit_and8ImET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0294:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movq	%rdx, %rax
    0000000a: 	cmpl	$0x7, %esi
    0000000d: 	jle	.Ltmp2051 # Offset: 13
    00000013: 	leal	-0x8(%rsi), %esi
    00000016: 	movq	%rdx, %xmm4
    0000001b: 	movq	%rdi, %rax
    0000001e: 	xorl	%ecx, %ecx
    00000020: 	punpcklqdq	%xmm4, %xmm4
    00000024: 	shrl	$0x3, %esi
    00000027: 	movdqa	%xmm4, %xmm3
    0000002b: 	movdqa	%xmm4, %xmm2
    0000002f: 	movdqa	%xmm4, %xmm1
    00000033: 	addl	$0x1, %esi
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2052:
    00000040: 	movdqu	(%rax), %xmm5
    00000044: 	movdqu	0x20(%rax), %xmm7
    00000049: 	addl	$0x1, %ecx
    0000004c: 	addq	$0x40, %rax
    00000050: 	movdqu	-0x30(%rax), %xmm6
    00000055: 	pand	%xmm5, %xmm4
    00000059: 	pand	%xmm7, %xmm2
    0000005d: 	movdqu	-0x10(%rax), %xmm5
    00000062: 	pand	%xmm6, %xmm1
    00000066: 	movdqa	%xmm2, %xmm0
    0000006a: 	pand	%xmm5, %xmm3
    0000006e: 	pand	%xmm1, %xmm0
    00000072: 	pand	%xmm3, %xmm0
    00000076: 	movhlps	%xmm0, %xmm6
    00000079: 	movq	%xmm0, %r9
    0000007e: 	movq	%xmm6, %rdx
    00000083: 	cmpl	%ecx, %esi
    00000085: 	ja	.Ltmp2052 # Offset: 133
    00000087: 	movhlps	%xmm4, %xmm7
    0000008a: 	andq	%r9, %rdx
    0000008d: 	movq	%xmm4, %rax
    00000092: 	shll	$0x3, %esi
    00000095: 	movq	%xmm7, %rcx
    0000009a: 	andq	%rcx, %rdx
.Ltmp2057:
    0000009d: 	cmpl	%esi, %r8d
    000000a0: 	jle	.Ltmp2053 # Offset: 160
    000000a2: 	movl	%r8d, %r9d
    000000a5: 	subl	%esi, %r9d
    000000a8: 	cmpl	$0x1, %r9d
    000000ac: 	je	.Ltmp2054 # Offset: 172
    000000ae: 	movslq	%esi, %rcx
    000000b1: 	pcmpeqd	%xmm0, %xmm0
    000000b5: 	leaq	(%rdi,%rcx,8), %r8
    000000b9: 	movl	%r9d, %ecx
    000000bc: 	shrl	%ecx
    000000be: 	leal	-0x1(%rcx), %r10d
    000000c2: 	leaq	0x10(%r8), %rcx
    000000c6: 	shlq	$0x4, %r10
    000000ca: 	addq	%rcx, %r10
    000000cd: 	jmp	.Ltmp2055 # Offset: 205
    000000cf: 	nop # Size: 1
.Ltmp2056:
    000000d0: 	addq	$0x10, %rcx
.Ltmp2055:
    000000d4: 	movdqu	(%r8), %xmm1
    000000d9: 	movq	%rcx, %r8
    000000dc: 	pand	%xmm1, %xmm0
    000000e0: 	cmpq	%r10, %rcx
    000000e3: 	jne	.Ltmp2056 # Offset: 227
    000000e5: 	movdqa	%xmm0, %xmm1
    000000e9: 	psrldq	$0x8, %xmm1
    000000ee: 	pand	%xmm1, %xmm0
    000000f2: 	movq	%xmm0, %rcx
    000000f7: 	andq	%rcx, %rax
    000000fa: 	movl	%r9d, %ecx
    000000fd: 	andl	$-0x2, %ecx
    00000100: 	addl	%ecx, %esi
    00000102: 	cmpl	%r9d, %ecx
    00000105: 	je	.Ltmp2053 # Offset: 261
.Ltmp2054:
    00000107: 	movslq	%esi, %rcx
    0000010a: 	andq	(%rdi,%rcx,8), %rax
.Ltmp2053:
    0000010e: 	andq	%rdx, %rax
    00000111: 	retq # Offset: 273
    00000112: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2051:
    00000118: 	xorl	%esi, %esi
    0000011a: 	jmp	.Ltmp2057 # Offset: 282
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and8ImET_PKS0_iS0_"

Binary Function "_Z7bit_or1ImET_PKS0_iS0_" after disassembly {
  Number      : 296
  State       : disassembled
  Address     : 0x1a380
  Size        : 0x83
  MaxSize     : 0x90
  Offset      : 0x1a380
  Section     : .text
  Orc Section : .local.text._Z7bit_or1ImET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0295:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%esi, %esi
    00000009: 	jle	.Ltmp2058 # Offset: 9
    0000000b: 	cmpl	$0x1, %esi
    0000000e: 	je	.Ltmp2059 # Offset: 14
    00000010: 	movq	%rdi, %rax
    00000013: 	movl	%esi, %edi
    00000015: 	pxor	%xmm0, %xmm0
    00000019: 	shrl	%edi
    0000001b: 	subl	$0x1, %edi
    0000001e: 	shlq	$0x4, %rdi
    00000022: 	leaq	0x10(%rcx,%rdi), %rdi
    00000027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2060:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	addq	$0x10, %rax
    00000038: 	por	%xmm2, %xmm0
    0000003c: 	cmpq	%rax, %rdi
    0000003f: 	jne	.Ltmp2060 # Offset: 63
    00000041: 	movdqa	%xmm0, %xmm1
    00000045: 	psrldq	$0x8, %xmm1
    0000004a: 	por	%xmm1, %xmm0
    0000004e: 	movq	%xmm0, %rax
    00000053: 	orq	%rdx, %rax
    00000056: 	movl	%esi, %edx
    00000058: 	andl	$-0x2, %edx
    0000005b: 	andl	$0x1, %esi
    0000005e: 	je	.Ltmp2061 # Offset: 94
.Ltmp2062:
    00000060: 	movslq	%edx, %rdx
    00000063: 	orq	(%rcx,%rdx,8), %rax
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2061:
    00000070: 	retq # Offset: 112
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp2058:
    00000078: 	movq	%rdx, %rax
    0000007b: 	retq # Offset: 123
.Ltmp2059:
    0000007c: 	movq	%rdx, %rax
    0000007f: 	xorl	%edx, %edx
    00000081: 	jmp	.Ltmp2062 # Offset: 129
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or1ImET_PKS0_iS0_"

Binary Function "_Z7bit_or2ImET_PKS0_iS0_" after disassembly {
  Number      : 297
  State       : disassembled
  Address     : 0x1a410
  Size        : 0x91
  MaxSize     : 0xa0
  Offset      : 0x1a410
  Section     : .text
  Orc Section : .local.text._Z7bit_or2ImET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0296:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movq	%rdi, %rcx
    0000000a: 	shlq	$0x3, %rsi
    0000000e: 	je	.Ltmp2063 # Offset: 14
    00000010: 	movq	%rdi, %rax
    00000013: 	leaq	-0x8(%rsi), %rdi
    00000017: 	shrq	$0x3, %rdi
    0000001b: 	addq	$0x1, %rdi
    0000001f: 	cmpq	$0x8, %rsi
    00000023: 	je	.Ltmp2064 # Offset: 35
    00000025: 	movq	%rdi, %rsi
    00000028: 	pxor	%xmm0, %xmm0
    0000002c: 	shrq	%rsi
    0000002f: 	shlq	$0x4, %rsi
    00000033: 	addq	%rcx, %rsi
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2065:
    00000040: 	movdqu	(%rax), %xmm2
    00000044: 	addq	$0x10, %rax
    00000048: 	por	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rsi
    0000004f: 	jne	.Ltmp2065 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	psrldq	$0x8, %xmm1
    0000005a: 	por	%xmm1, %xmm0
    0000005e: 	movq	%xmm0, %rax
    00000063: 	orq	%rdx, %rax
    00000066: 	movq	%rdi, %rdx
    00000069: 	andq	$-0x2, %rdx
    0000006d: 	leaq	(%rcx,%rdx,8), %rcx
    00000071: 	cmpq	%rdx, %rdi
    00000074: 	je	.Ltmp2066 # Offset: 116
.Ltmp2067:
    00000076: 	orq	(%rcx), %rax
    00000079: 	retq # Offset: 121
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2066:
    00000080: 	retq # Offset: 128
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp2063:
    00000088: 	movq	%rdx, %rax
    0000008b: 	retq # Offset: 139
.Ltmp2064:
    0000008c: 	movq	%rdx, %rax
    0000008f: 	jmp	.Ltmp2067 # Offset: 143
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or2ImET_PKS0_iS0_"

Binary Function "_Z7bit_or3ImET_PKS0_iS0_" after disassembly {
  Number      : 298
  State       : disassembled
  Address     : 0x1a4b0
  Size        : 0xb6
  MaxSize     : 0xc0
  Offset      : 0x1a4b0
  Section     : .text
  Orc Section : .local.text._Z7bit_or3ImET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0297:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edi
    00000009: 	cmpl	$0x1, %esi
    0000000c: 	jle	.Ltmp2068 # Offset: 12
    00000012: 	leal	-0x2(%rsi), %eax
    00000015: 	movl	%eax, %esi
    00000017: 	shrl	%esi
    00000019: 	addl	$0x1, %esi
    0000001c: 	cmpl	$0x1, %eax
    0000001f: 	jbe	.Ltmp2069 # Offset: 31
    00000025: 	movl	%esi, %r8d
    00000028: 	movq	%rcx, %rax
    0000002b: 	pxor	%xmm0, %xmm0
    0000002f: 	shrl	%r8d
    00000032: 	subl	$0x1, %r8d
    00000036: 	shlq	$0x5, %r8
    0000003a: 	leaq	0x20(%rcx,%r8), %r8
    0000003f: 	nop # Size: 1
.Ltmp2070:
    00000040: 	movdqu	(%rax), %xmm1
    00000044: 	movdqu	0x10(%rax), %xmm3
    00000049: 	addq	$0x20, %rax
    0000004d: 	movdqa	%xmm1, %xmm2
    00000051: 	punpckhqdq	%xmm3, %xmm1
    00000055: 	punpcklqdq	%xmm3, %xmm2
    00000059: 	por	%xmm2, %xmm1
    0000005d: 	por	%xmm1, %xmm0
    00000061: 	cmpq	%rax, %r8
    00000064: 	jne	.Ltmp2070 # Offset: 100
    00000066: 	movdqa	%xmm0, %xmm1
    0000006a: 	movl	%esi, %r8d
    0000006d: 	psrldq	$0x8, %xmm1
    00000072: 	andl	$-0x2, %r8d
    00000076: 	por	%xmm1, %xmm0
    0000007a: 	movq	%xmm0, %rax
    0000007f: 	orq	%rdx, %rax
    00000082: 	leal	(%r8,%r8), %edx
    00000086: 	cmpl	%r8d, %esi
    00000089: 	je	.Ltmp2071 # Offset: 137
.Ltmp2074:
    0000008b: 	movslq	%edx, %rdx
    0000008e: 	orq	(%rcx,%rdx,8), %rax
    00000092: 	orq	0x8(%rcx,%rdx,8), %rax
.Ltmp2071:
    00000097: 	addl	%esi, %esi
.Ltmp2073:
    00000099: 	cmpl	%edi, %esi
    0000009b: 	jge	.Ltmp2072 # Offset: 155
    0000009d: 	movslq	%esi, %rsi
    000000a0: 	orq	(%rcx,%rsi,8), %rax
.Ltmp2072:
    000000a4: 	retq # Offset: 164
    000000a5: 	nopl	(%rax) # Size: 3
.Ltmp2068:
    000000a8: 	movq	%rdx, %rax
    000000ab: 	xorl	%esi, %esi
    000000ad: 	jmp	.Ltmp2073 # Offset: 173
.Ltmp2069:
    000000af: 	movq	%rdx, %rax
    000000b2: 	xorl	%edx, %edx
    000000b4: 	jmp	.Ltmp2074 # Offset: 180
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or3ImET_PKS0_iS0_"

Binary Function "_Z7bit_or4ImET_PKS0_iS0_" after disassembly {
  Number      : 299
  State       : disassembled
  Address     : 0x1a570
  Size        : 0x12e
  MaxSize     : 0x130
  Offset      : 0x1a570
  Section     : .text
  Orc Section : .local.text._Z7bit_or4ImET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0298:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edi
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp2075 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %eax
    00000015: 	movl	%eax, %esi
    00000017: 	shrl	$0x2, %esi
    0000001a: 	addl	$0x1, %esi
    0000001d: 	cmpl	$0x3, %eax
    00000020: 	jbe	.Ltmp2076 # Offset: 32
    00000026: 	movl	%esi, %r8d
    00000029: 	movq	%rcx, %rax
    0000002c: 	pxor	%xmm0, %xmm0
    00000030: 	shrl	%r8d
    00000033: 	subl	$0x1, %r8d
    00000037: 	shlq	$0x6, %r8
    0000003b: 	leaq	0x40(%rcx,%r8), %r8
.Ltmp2077:
    00000040: 	movdqu	(%rax), %xmm1
    00000044: 	movdqu	0x10(%rax), %xmm6
    00000049: 	addq	$0x40, %rax
    0000004d: 	movdqu	-0x20(%rax), %xmm3
    00000052: 	movdqa	%xmm1, %xmm4
    00000056: 	punpckhqdq	%xmm6, %xmm1
    0000005a: 	punpcklqdq	%xmm6, %xmm4
    0000005e: 	movdqu	-0x10(%rax), %xmm6
    00000063: 	movdqa	%xmm3, %xmm5
    00000067: 	movdqa	%xmm1, %xmm2
    0000006b: 	punpckhqdq	%xmm6, %xmm3
    0000006f: 	punpcklqdq	%xmm6, %xmm5
    00000073: 	punpcklqdq	%xmm3, %xmm2
    00000077: 	punpckhqdq	%xmm3, %xmm1
    0000007b: 	por	%xmm2, %xmm1
    0000007f: 	movdqa	%xmm4, %xmm2
    00000083: 	punpckhqdq	%xmm5, %xmm4
    00000087: 	punpcklqdq	%xmm5, %xmm2
    0000008b: 	por	%xmm4, %xmm2
    0000008f: 	por	%xmm2, %xmm1
    00000093: 	por	%xmm1, %xmm0
    00000097: 	cmpq	%rax, %r8
    0000009a: 	jne	.Ltmp2077 # Offset: 154
    0000009c: 	movdqa	%xmm0, %xmm1
    000000a0: 	movl	%esi, %r8d
    000000a3: 	psrldq	$0x8, %xmm1
    000000a8: 	andl	$-0x2, %r8d
    000000ac: 	por	%xmm1, %xmm0
    000000b0: 	movq	%xmm0, %rax
    000000b5: 	orq	%rdx, %rax
    000000b8: 	leal	(,%r8,4), %edx
    000000c0: 	cmpl	%esi, %r8d
    000000c3: 	je	.Ltmp2078 # Offset: 195
.Ltmp2081:
    000000c5: 	movslq	%edx, %rdx
    000000c8: 	orq	(%rcx,%rdx,8), %rax
    000000cc: 	orq	0x8(%rcx,%rdx,8), %rax
    000000d1: 	orq	0x10(%rcx,%rdx,8), %rax
    000000d6: 	orq	0x18(%rcx,%rdx,8), %rax
.Ltmp2078:
    000000db: 	leal	(,%rsi,4), %edx
.Ltmp2080:
    000000e2: 	cmpl	%edx, %edi
    000000e4: 	jle	.Ltmp2079 # Offset: 228
    000000e6: 	movslq	%edx, %rsi
    000000e9: 	leaq	(,%rsi,8), %r8
    000000f1: 	orq	(%rcx,%rsi,8), %rax
    000000f5: 	leal	0x1(%rdx), %esi
    000000f8: 	cmpl	%edi, %esi
    000000fa: 	jge	.Ltmp2079 # Offset: 250
    000000fc: 	leal	0x2(%rdx), %esi
    000000ff: 	orq	0x8(%rcx,%r8), %rax
    00000104: 	cmpl	%esi, %edi
    00000106: 	jle	.Ltmp2079 # Offset: 262
    00000108: 	addl	$0x3, %edx
    0000010b: 	orq	0x10(%rcx,%r8), %rax
    00000110: 	cmpl	%edx, %edi
    00000112: 	jle	.Ltmp2079 # Offset: 274
    00000114: 	orq	0x18(%rcx,%r8), %rax
.Ltmp2079:
    00000119: 	retq # Offset: 281
    0000011a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2075:
    00000120: 	movq	%rdx, %rax
    00000123: 	xorl	%edx, %edx
    00000125: 	jmp	.Ltmp2080 # Offset: 293
.Ltmp2076:
    00000127: 	movq	%rdx, %rax
    0000012a: 	xorl	%edx, %edx
    0000012c: 	jmp	.Ltmp2081 # Offset: 300
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or4ImET_PKS0_iS0_"

Binary Function "_Z7bit_or5ImET_PKS0_iS0_" after disassembly {
  Number      : 300
  State       : disassembled
  Address     : 0x1a6a0
  Size        : 0xd7
  MaxSize     : 0xe0
  Offset      : 0x1a6a0
  Section     : .text
  Orc Section : .local.text._Z7bit_or5ImET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0299:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rdx, %rax
    0000000a: 	cmpl	$0x1, %esi
    0000000d: 	jle	.Ltmp2082 # Offset: 13
    00000013: 	leal	-0x2(%rsi), %edx
    00000016: 	movq	%rax, %xmm0
    0000001b: 	xorl	%eax, %eax
    0000001d: 	shrl	%edx
    0000001f: 	punpcklqdq	%xmm0, %xmm0
    00000023: 	addl	$0x1, %edx
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2083:
    00000030: 	movq	%rax, %rcx
    00000033: 	addq	$0x1, %rax
    00000037: 	shlq	$0x4, %rcx
    0000003b: 	movdqu	(%r8,%rcx), %xmm1
    00000041: 	por	%xmm1, %xmm0
    00000045: 	cmpl	%eax, %edx
    00000047: 	ja	.Ltmp2083 # Offset: 71
    00000049: 	movhlps	%xmm0, %xmm2
    0000004c: 	movq	%xmm0, %rax
    00000051: 	addl	%edx, %edx
    00000053: 	movq	%xmm2, %rdi
.Ltmp2088:
    00000058: 	cmpl	%edx, %esi
    0000005a: 	jle	.Ltmp2084 # Offset: 90
    0000005c: 	subl	%edx, %esi
    0000005e: 	cmpl	$0x1, %esi
    00000061: 	je	.Ltmp2085 # Offset: 97
    00000063: 	movslq	%edx, %rcx
    00000066: 	pxor	%xmm0, %xmm0
    0000006a: 	leaq	(%r8,%rcx,8), %r9
    0000006e: 	movl	%esi, %ecx
    00000070: 	shrl	%ecx
    00000072: 	leal	-0x1(%rcx), %r10d
    00000076: 	leaq	0x10(%r9), %rcx
    0000007a: 	shlq	$0x4, %r10
    0000007e: 	addq	%rcx, %r10
    00000081: 	jmp	.Ltmp2086 # Offset: 129
    00000083: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2087:
    00000088: 	addq	$0x10, %rcx
.Ltmp2086:
    0000008c: 	movdqu	(%r9), %xmm1
    00000091: 	movq	%rcx, %r9
    00000094: 	por	%xmm1, %xmm0
    00000098: 	cmpq	%r10, %rcx
    0000009b: 	jne	.Ltmp2087 # Offset: 155
    0000009d: 	movdqa	%xmm0, %xmm1
    000000a1: 	psrldq	$0x8, %xmm1
    000000a6: 	por	%xmm1, %xmm0
    000000aa: 	movq	%xmm0, %rcx
    000000af: 	orq	%rcx, %rax
    000000b2: 	movl	%esi, %ecx
    000000b4: 	andl	$-0x2, %ecx
    000000b7: 	addl	%ecx, %edx
    000000b9: 	cmpl	%esi, %ecx
    000000bb: 	je	.Ltmp2084 # Offset: 187
.Ltmp2085:
    000000bd: 	movslq	%edx, %rdx
    000000c0: 	orq	(%r8,%rdx,8), %rax
.Ltmp2084:
    000000c4: 	orq	%rdi, %rax
    000000c7: 	retq # Offset: 199
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2082:
    000000d0: 	movq	%rdx, %rdi
    000000d3: 	xorl	%edx, %edx
    000000d5: 	jmp	.Ltmp2088 # Offset: 213
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or5ImET_PKS0_iS0_"

Binary Function "_Z7bit_or6ImET_PKS0_iS0_" after disassembly {
  Number      : 301
  State       : disassembled
  Address     : 0x1a780
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x1a780
  Section     : .text
  Orc Section : .local.text._Z7bit_or6ImET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0300:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movq	%rdx, %rax
    0000000a: 	cmpl	$0x3, %esi
    0000000d: 	jle	.Ltmp2089 # Offset: 13
    00000013: 	movq	%rdx, %xmm0
    00000018: 	leal	-0x4(%rsi), %ecx
    0000001b: 	movq	%rdi, %rax
    0000001e: 	xorl	%edx, %edx
    00000020: 	shrl	$0x2, %ecx
    00000023: 	punpcklqdq	%xmm0, %xmm0
    00000027: 	addl	$0x1, %ecx
    0000002a: 	movdqa	%xmm0, %xmm1
    0000002e: 	nop # Size: 2
.Ltmp2090:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	movdqu	0x10(%rax), %xmm3
    00000039: 	addl	$0x1, %edx
    0000003c: 	addq	$0x20, %rax
    00000040: 	por	%xmm2, %xmm0
    00000044: 	por	%xmm3, %xmm1
    00000048: 	cmpl	%edx, %ecx
    0000004a: 	ja	.Ltmp2090 # Offset: 74
    0000004c: 	movhlps	%xmm0, %xmm4
    0000004f: 	movq	%xmm1, %rsi
    00000054: 	movhlps	%xmm1, %xmm5
    00000057: 	shll	$0x2, %ecx
    0000005a: 	movq	%xmm4, %rdx
    0000005f: 	movq	%xmm0, %rax
    00000064: 	orq	%rsi, %rdx
    00000067: 	movq	%xmm5, %rsi
    0000006c: 	orq	%rsi, %rdx
.Ltmp2095:
    0000006f: 	cmpl	%ecx, %r8d
    00000072: 	jle	.Ltmp2091 # Offset: 114
    00000074: 	movl	%r8d, %r9d
    00000077: 	subl	%ecx, %r9d
    0000007a: 	cmpl	$0x1, %r9d
    0000007e: 	je	.Ltmp2092 # Offset: 126
    00000080: 	movslq	%ecx, %rsi
    00000083: 	pxor	%xmm0, %xmm0
    00000087: 	leaq	(%rdi,%rsi,8), %r8
    0000008b: 	movl	%r9d, %esi
    0000008e: 	shrl	%esi
    00000090: 	leal	-0x1(%rsi), %r10d
    00000094: 	leaq	0x10(%r8), %rsi
    00000098: 	shlq	$0x4, %r10
    0000009c: 	addq	%rsi, %r10
    0000009f: 	jmp	.Ltmp2093 # Offset: 159
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp2094:
    000000a8: 	addq	$0x10, %rsi
.Ltmp2093:
    000000ac: 	movdqu	(%r8), %xmm1
    000000b1: 	movq	%rsi, %r8
    000000b4: 	por	%xmm1, %xmm0
    000000b8: 	cmpq	%rsi, %r10
    000000bb: 	jne	.Ltmp2094 # Offset: 187
    000000bd: 	movdqa	%xmm0, %xmm1
    000000c1: 	psrldq	$0x8, %xmm1
    000000c6: 	por	%xmm1, %xmm0
    000000ca: 	movq	%xmm0, %rsi
    000000cf: 	orq	%rsi, %rax
    000000d2: 	movl	%r9d, %esi
    000000d5: 	andl	$-0x2, %esi
    000000d8: 	addl	%esi, %ecx
    000000da: 	cmpl	%r9d, %esi
    000000dd: 	je	.Ltmp2091 # Offset: 221
.Ltmp2092:
    000000df: 	movslq	%ecx, %rcx
    000000e2: 	orq	(%rdi,%rcx,8), %rax
.Ltmp2091:
    000000e6: 	orq	%rdx, %rax
    000000e9: 	retq # Offset: 233
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2089:
    000000f0: 	xorl	%ecx, %ecx
    000000f2: 	jmp	.Ltmp2095 # Offset: 242
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or6ImET_PKS0_iS0_"

Binary Function "_Z7bit_or7ImET_PKS0_iS0_" after disassembly {
  Number      : 302
  State       : disassembled
  Address     : 0x1a880
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x1a880
  Section     : .text
  Orc Section : .local.text._Z7bit_or7ImET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0301:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movq	%rdx, %rax
    0000000a: 	cmpl	$0x3, %esi
    0000000d: 	jle	.Ltmp2096 # Offset: 13
    00000013: 	movq	%rdx, %xmm0
    00000018: 	leal	-0x4(%rsi), %ecx
    0000001b: 	movq	%rdi, %rax
    0000001e: 	xorl	%edx, %edx
    00000020: 	shrl	$0x2, %ecx
    00000023: 	punpcklqdq	%xmm0, %xmm0
    00000027: 	addl	$0x1, %ecx
    0000002a: 	movdqa	%xmm0, %xmm1
    0000002e: 	nop # Size: 2
.Ltmp2097:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	movdqu	0x10(%rax), %xmm3
    00000039: 	addl	$0x1, %edx
    0000003c: 	addq	$0x20, %rax
    00000040: 	por	%xmm2, %xmm0
    00000044: 	por	%xmm3, %xmm1
    00000048: 	cmpl	%edx, %ecx
    0000004a: 	ja	.Ltmp2097 # Offset: 74
    0000004c: 	movhlps	%xmm0, %xmm4
    0000004f: 	movq	%xmm1, %rsi
    00000054: 	movhlps	%xmm1, %xmm5
    00000057: 	shll	$0x2, %ecx
    0000005a: 	movq	%xmm4, %rdx
    0000005f: 	movq	%xmm0, %rax
    00000064: 	orq	%rsi, %rdx
    00000067: 	movq	%xmm5, %rsi
    0000006c: 	orq	%rsi, %rdx
.Ltmp2102:
    0000006f: 	cmpl	%ecx, %r8d
    00000072: 	jle	.Ltmp2098 # Offset: 114
    00000074: 	movl	%r8d, %r9d
    00000077: 	subl	%ecx, %r9d
    0000007a: 	cmpl	$0x1, %r9d
    0000007e: 	je	.Ltmp2099 # Offset: 126
    00000080: 	movslq	%ecx, %rsi
    00000083: 	pxor	%xmm0, %xmm0
    00000087: 	leaq	(%rdi,%rsi,8), %r8
    0000008b: 	movl	%r9d, %esi
    0000008e: 	shrl	%esi
    00000090: 	leal	-0x1(%rsi), %r10d
    00000094: 	leaq	0x10(%r8), %rsi
    00000098: 	shlq	$0x4, %r10
    0000009c: 	addq	%rsi, %r10
    0000009f: 	jmp	.Ltmp2100 # Offset: 159
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp2101:
    000000a8: 	addq	$0x10, %rsi
.Ltmp2100:
    000000ac: 	movdqu	(%r8), %xmm1
    000000b1: 	movq	%rsi, %r8
    000000b4: 	por	%xmm1, %xmm0
    000000b8: 	cmpq	%rsi, %r10
    000000bb: 	jne	.Ltmp2101 # Offset: 187
    000000bd: 	movdqa	%xmm0, %xmm1
    000000c1: 	psrldq	$0x8, %xmm1
    000000c6: 	por	%xmm1, %xmm0
    000000ca: 	movq	%xmm0, %rsi
    000000cf: 	orq	%rsi, %rax
    000000d2: 	movl	%r9d, %esi
    000000d5: 	andl	$-0x2, %esi
    000000d8: 	addl	%esi, %ecx
    000000da: 	cmpl	%r9d, %esi
    000000dd: 	je	.Ltmp2098 # Offset: 221
.Ltmp2099:
    000000df: 	movslq	%ecx, %rcx
    000000e2: 	orq	(%rdi,%rcx,8), %rax
.Ltmp2098:
    000000e6: 	orq	%rdx, %rax
    000000e9: 	retq # Offset: 233
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2096:
    000000f0: 	xorl	%ecx, %ecx
    000000f2: 	jmp	.Ltmp2102 # Offset: 242
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or7ImET_PKS0_iS0_"

Binary Function "_Z7bit_or8ImET_PKS0_iS0_" after disassembly {
  Number      : 303
  State       : disassembled
  Address     : 0x1a980
  Size        : 0x11c
  MaxSize     : 0x120
  Offset      : 0x1a980
  Section     : .text
  Orc Section : .local.text._Z7bit_or8ImET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0302:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movq	%rdx, %rax
    0000000a: 	cmpl	$0x7, %esi
    0000000d: 	jle	.Ltmp2103 # Offset: 13
    00000013: 	leal	-0x8(%rsi), %esi
    00000016: 	movq	%rdx, %xmm4
    0000001b: 	movq	%rdi, %rax
    0000001e: 	xorl	%ecx, %ecx
    00000020: 	punpcklqdq	%xmm4, %xmm4
    00000024: 	shrl	$0x3, %esi
    00000027: 	movdqa	%xmm4, %xmm3
    0000002b: 	movdqa	%xmm4, %xmm2
    0000002f: 	movdqa	%xmm4, %xmm1
    00000033: 	addl	$0x1, %esi
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2104:
    00000040: 	movdqu	(%rax), %xmm5
    00000044: 	movdqu	0x20(%rax), %xmm7
    00000049: 	addl	$0x1, %ecx
    0000004c: 	addq	$0x40, %rax
    00000050: 	movdqu	-0x30(%rax), %xmm6
    00000055: 	por	%xmm5, %xmm4
    00000059: 	por	%xmm7, %xmm2
    0000005d: 	movdqu	-0x10(%rax), %xmm5
    00000062: 	por	%xmm6, %xmm1
    00000066: 	movdqa	%xmm2, %xmm0
    0000006a: 	por	%xmm5, %xmm3
    0000006e: 	por	%xmm1, %xmm0
    00000072: 	por	%xmm3, %xmm0
    00000076: 	movhlps	%xmm0, %xmm6
    00000079: 	movq	%xmm0, %r9
    0000007e: 	movq	%xmm6, %rdx
    00000083: 	cmpl	%ecx, %esi
    00000085: 	ja	.Ltmp2104 # Offset: 133
    00000087: 	movhlps	%xmm4, %xmm7
    0000008a: 	orq	%r9, %rdx
    0000008d: 	movq	%xmm4, %rax
    00000092: 	shll	$0x3, %esi
    00000095: 	movq	%xmm7, %rcx
    0000009a: 	orq	%rcx, %rdx
.Ltmp2109:
    0000009d: 	cmpl	%esi, %r8d
    000000a0: 	jle	.Ltmp2105 # Offset: 160
    000000a2: 	movl	%r8d, %r9d
    000000a5: 	subl	%esi, %r9d
    000000a8: 	cmpl	$0x1, %r9d
    000000ac: 	je	.Ltmp2106 # Offset: 172
    000000ae: 	movslq	%esi, %rcx
    000000b1: 	pxor	%xmm0, %xmm0
    000000b5: 	leaq	(%rdi,%rcx,8), %r8
    000000b9: 	movl	%r9d, %ecx
    000000bc: 	shrl	%ecx
    000000be: 	leal	-0x1(%rcx), %r10d
    000000c2: 	leaq	0x10(%r8), %rcx
    000000c6: 	shlq	$0x4, %r10
    000000ca: 	addq	%rcx, %r10
    000000cd: 	jmp	.Ltmp2107 # Offset: 205
    000000cf: 	nop # Size: 1
.Ltmp2108:
    000000d0: 	addq	$0x10, %rcx
.Ltmp2107:
    000000d4: 	movdqu	(%r8), %xmm1
    000000d9: 	movq	%rcx, %r8
    000000dc: 	por	%xmm1, %xmm0
    000000e0: 	cmpq	%r10, %rcx
    000000e3: 	jne	.Ltmp2108 # Offset: 227
    000000e5: 	movdqa	%xmm0, %xmm1
    000000e9: 	psrldq	$0x8, %xmm1
    000000ee: 	por	%xmm1, %xmm0
    000000f2: 	movq	%xmm0, %rcx
    000000f7: 	orq	%rcx, %rax
    000000fa: 	movl	%r9d, %ecx
    000000fd: 	andl	$-0x2, %ecx
    00000100: 	addl	%ecx, %esi
    00000102: 	cmpl	%r9d, %ecx
    00000105: 	je	.Ltmp2105 # Offset: 261
.Ltmp2106:
    00000107: 	movslq	%esi, %rcx
    0000010a: 	orq	(%rdi,%rcx,8), %rax
.Ltmp2105:
    0000010e: 	orq	%rdx, %rax
    00000111: 	retq # Offset: 273
    00000112: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2103:
    00000118: 	xorl	%esi, %esi
    0000011a: 	jmp	.Ltmp2109 # Offset: 282
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or8ImET_PKS0_iS0_"

Binary Function "_Z8bit_xor1ImET_PKS0_iS0_" after disassembly {
  Number      : 304
  State       : disassembled
  Address     : 0x1aaa0
  Size        : 0x83
  MaxSize     : 0x90
  Offset      : 0x1aaa0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor1ImET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0303:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%esi, %esi
    00000009: 	jle	.Ltmp2110 # Offset: 9
    0000000b: 	cmpl	$0x1, %esi
    0000000e: 	je	.Ltmp2111 # Offset: 14
    00000010: 	movq	%rdi, %rax
    00000013: 	movl	%esi, %edi
    00000015: 	pxor	%xmm0, %xmm0
    00000019: 	shrl	%edi
    0000001b: 	subl	$0x1, %edi
    0000001e: 	shlq	$0x4, %rdi
    00000022: 	leaq	0x10(%rcx,%rdi), %rdi
    00000027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2112:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	addq	$0x10, %rax
    00000038: 	pxor	%xmm2, %xmm0
    0000003c: 	cmpq	%rax, %rdi
    0000003f: 	jne	.Ltmp2112 # Offset: 63
    00000041: 	movdqa	%xmm0, %xmm1
    00000045: 	psrldq	$0x8, %xmm1
    0000004a: 	pxor	%xmm1, %xmm0
    0000004e: 	movq	%xmm0, %rax
    00000053: 	xorq	%rdx, %rax
    00000056: 	movl	%esi, %edx
    00000058: 	andl	$-0x2, %edx
    0000005b: 	andl	$0x1, %esi
    0000005e: 	je	.Ltmp2113 # Offset: 94
.Ltmp2114:
    00000060: 	movslq	%edx, %rdx
    00000063: 	xorq	(%rcx,%rdx,8), %rax
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2113:
    00000070: 	retq # Offset: 112
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp2110:
    00000078: 	movq	%rdx, %rax
    0000007b: 	retq # Offset: 123
.Ltmp2111:
    0000007c: 	movq	%rdx, %rax
    0000007f: 	xorl	%edx, %edx
    00000081: 	jmp	.Ltmp2114 # Offset: 129
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor1ImET_PKS0_iS0_"

Binary Function "_Z8bit_xor2ImET_PKS0_iS0_" after disassembly {
  Number      : 305
  State       : disassembled
  Address     : 0x1ab30
  Size        : 0x91
  MaxSize     : 0xa0
  Offset      : 0x1ab30
  Section     : .text
  Orc Section : .local.text._Z8bit_xor2ImET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0304:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movq	%rdi, %rcx
    0000000a: 	shlq	$0x3, %rsi
    0000000e: 	je	.Ltmp2115 # Offset: 14
    00000010: 	movq	%rdi, %rax
    00000013: 	leaq	-0x8(%rsi), %rdi
    00000017: 	shrq	$0x3, %rdi
    0000001b: 	addq	$0x1, %rdi
    0000001f: 	cmpq	$0x8, %rsi
    00000023: 	je	.Ltmp2116 # Offset: 35
    00000025: 	movq	%rdi, %rsi
    00000028: 	pxor	%xmm0, %xmm0
    0000002c: 	shrq	%rsi
    0000002f: 	shlq	$0x4, %rsi
    00000033: 	addq	%rcx, %rsi
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2117:
    00000040: 	movdqu	(%rax), %xmm2
    00000044: 	addq	$0x10, %rax
    00000048: 	pxor	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rsi
    0000004f: 	jne	.Ltmp2117 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	psrldq	$0x8, %xmm1
    0000005a: 	pxor	%xmm1, %xmm0
    0000005e: 	movq	%xmm0, %rax
    00000063: 	xorq	%rdx, %rax
    00000066: 	movq	%rdi, %rdx
    00000069: 	andq	$-0x2, %rdx
    0000006d: 	leaq	(%rcx,%rdx,8), %rcx
    00000071: 	cmpq	%rdx, %rdi
    00000074: 	je	.Ltmp2118 # Offset: 116
.Ltmp2119:
    00000076: 	xorq	(%rcx), %rax
    00000079: 	retq # Offset: 121
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2118:
    00000080: 	retq # Offset: 128
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp2115:
    00000088: 	movq	%rdx, %rax
    0000008b: 	retq # Offset: 139
.Ltmp2116:
    0000008c: 	movq	%rdx, %rax
    0000008f: 	jmp	.Ltmp2119 # Offset: 143
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor2ImET_PKS0_iS0_"

Binary Function "_Z8bit_xor3ImET_PKS0_iS0_" after disassembly {
  Number      : 306
  State       : disassembled
  Address     : 0x1abd0
  Size        : 0xb6
  MaxSize     : 0xc0
  Offset      : 0x1abd0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor3ImET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0305:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edi
    00000009: 	cmpl	$0x1, %esi
    0000000c: 	jle	.Ltmp2120 # Offset: 12
    00000012: 	leal	-0x2(%rsi), %eax
    00000015: 	movl	%eax, %esi
    00000017: 	shrl	%esi
    00000019: 	addl	$0x1, %esi
    0000001c: 	cmpl	$0x1, %eax
    0000001f: 	jbe	.Ltmp2121 # Offset: 31
    00000025: 	movl	%esi, %r8d
    00000028: 	movq	%rcx, %rax
    0000002b: 	pxor	%xmm0, %xmm0
    0000002f: 	shrl	%r8d
    00000032: 	subl	$0x1, %r8d
    00000036: 	shlq	$0x5, %r8
    0000003a: 	leaq	0x20(%rcx,%r8), %r8
    0000003f: 	nop # Size: 1
.Ltmp2122:
    00000040: 	movdqu	(%rax), %xmm1
    00000044: 	movdqu	0x10(%rax), %xmm3
    00000049: 	addq	$0x20, %rax
    0000004d: 	movdqa	%xmm1, %xmm2
    00000051: 	punpckhqdq	%xmm3, %xmm1
    00000055: 	punpcklqdq	%xmm3, %xmm2
    00000059: 	pxor	%xmm2, %xmm1
    0000005d: 	pxor	%xmm1, %xmm0
    00000061: 	cmpq	%rax, %r8
    00000064: 	jne	.Ltmp2122 # Offset: 100
    00000066: 	movdqa	%xmm0, %xmm1
    0000006a: 	movl	%esi, %r8d
    0000006d: 	psrldq	$0x8, %xmm1
    00000072: 	andl	$-0x2, %r8d
    00000076: 	pxor	%xmm1, %xmm0
    0000007a: 	movq	%xmm0, %rax
    0000007f: 	xorq	%rdx, %rax
    00000082: 	leal	(%r8,%r8), %edx
    00000086: 	cmpl	%r8d, %esi
    00000089: 	je	.Ltmp2123 # Offset: 137
.Ltmp2126:
    0000008b: 	movslq	%edx, %rdx
    0000008e: 	xorq	(%rcx,%rdx,8), %rax
    00000092: 	xorq	0x8(%rcx,%rdx,8), %rax
.Ltmp2123:
    00000097: 	addl	%esi, %esi
.Ltmp2125:
    00000099: 	cmpl	%edi, %esi
    0000009b: 	jge	.Ltmp2124 # Offset: 155
    0000009d: 	movslq	%esi, %rsi
    000000a0: 	xorq	(%rcx,%rsi,8), %rax
.Ltmp2124:
    000000a4: 	retq # Offset: 164
    000000a5: 	nopl	(%rax) # Size: 3
.Ltmp2120:
    000000a8: 	movq	%rdx, %rax
    000000ab: 	xorl	%esi, %esi
    000000ad: 	jmp	.Ltmp2125 # Offset: 173
.Ltmp2121:
    000000af: 	movq	%rdx, %rax
    000000b2: 	xorl	%edx, %edx
    000000b4: 	jmp	.Ltmp2126 # Offset: 180
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor3ImET_PKS0_iS0_"

Binary Function "_Z8bit_xor4ImET_PKS0_iS0_" after disassembly {
  Number      : 307
  State       : disassembled
  Address     : 0x1ac90
  Size        : 0x12e
  MaxSize     : 0x130
  Offset      : 0x1ac90
  Section     : .text
  Orc Section : .local.text._Z8bit_xor4ImET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0306:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edi
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp2127 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %eax
    00000015: 	movl	%eax, %esi
    00000017: 	shrl	$0x2, %esi
    0000001a: 	addl	$0x1, %esi
    0000001d: 	cmpl	$0x3, %eax
    00000020: 	jbe	.Ltmp2128 # Offset: 32
    00000026: 	movl	%esi, %r8d
    00000029: 	movq	%rcx, %rax
    0000002c: 	pxor	%xmm0, %xmm0
    00000030: 	shrl	%r8d
    00000033: 	subl	$0x1, %r8d
    00000037: 	shlq	$0x6, %r8
    0000003b: 	leaq	0x40(%rcx,%r8), %r8
.Ltmp2129:
    00000040: 	movdqu	(%rax), %xmm1
    00000044: 	movdqu	0x10(%rax), %xmm6
    00000049: 	addq	$0x40, %rax
    0000004d: 	movdqu	-0x20(%rax), %xmm3
    00000052: 	movdqa	%xmm1, %xmm4
    00000056: 	punpckhqdq	%xmm6, %xmm1
    0000005a: 	punpcklqdq	%xmm6, %xmm4
    0000005e: 	movdqu	-0x10(%rax), %xmm6
    00000063: 	movdqa	%xmm3, %xmm5
    00000067: 	movdqa	%xmm1, %xmm2
    0000006b: 	punpckhqdq	%xmm6, %xmm3
    0000006f: 	punpcklqdq	%xmm6, %xmm5
    00000073: 	punpcklqdq	%xmm3, %xmm2
    00000077: 	punpckhqdq	%xmm3, %xmm1
    0000007b: 	pxor	%xmm2, %xmm1
    0000007f: 	movdqa	%xmm4, %xmm2
    00000083: 	punpckhqdq	%xmm5, %xmm4
    00000087: 	punpcklqdq	%xmm5, %xmm2
    0000008b: 	pxor	%xmm4, %xmm2
    0000008f: 	pxor	%xmm2, %xmm1
    00000093: 	pxor	%xmm1, %xmm0
    00000097: 	cmpq	%rax, %r8
    0000009a: 	jne	.Ltmp2129 # Offset: 154
    0000009c: 	movdqa	%xmm0, %xmm1
    000000a0: 	movl	%esi, %r8d
    000000a3: 	psrldq	$0x8, %xmm1
    000000a8: 	andl	$-0x2, %r8d
    000000ac: 	pxor	%xmm1, %xmm0
    000000b0: 	movq	%xmm0, %rax
    000000b5: 	xorq	%rdx, %rax
    000000b8: 	leal	(,%r8,4), %edx
    000000c0: 	cmpl	%esi, %r8d
    000000c3: 	je	.Ltmp2130 # Offset: 195
.Ltmp2133:
    000000c5: 	movslq	%edx, %rdx
    000000c8: 	xorq	(%rcx,%rdx,8), %rax
    000000cc: 	xorq	0x8(%rcx,%rdx,8), %rax
    000000d1: 	xorq	0x10(%rcx,%rdx,8), %rax
    000000d6: 	xorq	0x18(%rcx,%rdx,8), %rax
.Ltmp2130:
    000000db: 	leal	(,%rsi,4), %edx
.Ltmp2132:
    000000e2: 	cmpl	%edx, %edi
    000000e4: 	jle	.Ltmp2131 # Offset: 228
    000000e6: 	movslq	%edx, %rsi
    000000e9: 	leaq	(,%rsi,8), %r8
    000000f1: 	xorq	(%rcx,%rsi,8), %rax
    000000f5: 	leal	0x1(%rdx), %esi
    000000f8: 	cmpl	%edi, %esi
    000000fa: 	jge	.Ltmp2131 # Offset: 250
    000000fc: 	leal	0x2(%rdx), %esi
    000000ff: 	xorq	0x8(%rcx,%r8), %rax
    00000104: 	cmpl	%esi, %edi
    00000106: 	jle	.Ltmp2131 # Offset: 262
    00000108: 	addl	$0x3, %edx
    0000010b: 	xorq	0x10(%rcx,%r8), %rax
    00000110: 	cmpl	%edx, %edi
    00000112: 	jle	.Ltmp2131 # Offset: 274
    00000114: 	xorq	0x18(%rcx,%r8), %rax
.Ltmp2131:
    00000119: 	retq # Offset: 281
    0000011a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2127:
    00000120: 	movq	%rdx, %rax
    00000123: 	xorl	%edx, %edx
    00000125: 	jmp	.Ltmp2132 # Offset: 293
.Ltmp2128:
    00000127: 	movq	%rdx, %rax
    0000012a: 	xorl	%edx, %edx
    0000012c: 	jmp	.Ltmp2133 # Offset: 300
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor4ImET_PKS0_iS0_"

Binary Function "_Z8bit_xor5ImET_PKS0_iS0_" after disassembly {
  Number      : 308
  State       : disassembled
  Address     : 0x1adc0
  Size        : 0xc6
  MaxSize     : 0xd0
  Offset      : 0x1adc0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor5ImET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0307:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rdx, %rax
    0000000a: 	cmpl	$0x1, %esi
    0000000d: 	jle	.Ltmp2134 # Offset: 13
    00000013: 	leal	-0x2(%rsi), %edx
    00000016: 	movq	%rax, %xmm0
    0000001b: 	xorl	%eax, %eax
    0000001d: 	shrl	%edx
    0000001f: 	addl	$0x1, %edx
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2135:
    00000028: 	movq	%rax, %rcx
    0000002b: 	addq	$0x1, %rax
    0000002f: 	shlq	$0x4, %rcx
    00000033: 	movdqu	(%r8,%rcx), %xmm1
    00000039: 	pxor	%xmm1, %xmm0
    0000003d: 	cmpl	%eax, %edx
    0000003f: 	ja	.Ltmp2135 # Offset: 63
    00000041: 	movhlps	%xmm0, %xmm2
    00000044: 	movq	%xmm0, %rax
    00000049: 	addl	%edx, %edx
    0000004b: 	movq	%xmm2, %rdi
.Ltmp2140:
    00000050: 	cmpl	%edx, %esi
    00000052: 	jle	.Ltmp2136 # Offset: 82
    00000054: 	subl	%edx, %esi
    00000056: 	cmpl	$0x1, %esi
    00000059: 	je	.Ltmp2137 # Offset: 89
    0000005b: 	movslq	%edx, %rcx
    0000005e: 	pxor	%xmm0, %xmm0
    00000062: 	leaq	(%r8,%rcx,8), %r9
    00000066: 	movl	%esi, %ecx
    00000068: 	shrl	%ecx
    0000006a: 	leal	-0x1(%rcx), %r10d
    0000006e: 	leaq	0x10(%r9), %rcx
    00000072: 	shlq	$0x4, %r10
    00000076: 	addq	%rcx, %r10
    00000079: 	jmp	.Ltmp2138 # Offset: 121
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2139:
    00000080: 	addq	$0x10, %rcx
.Ltmp2138:
    00000084: 	movdqu	(%r9), %xmm1
    00000089: 	movq	%rcx, %r9
    0000008c: 	pxor	%xmm1, %xmm0
    00000090: 	cmpq	%r10, %rcx
    00000093: 	jne	.Ltmp2139 # Offset: 147
    00000095: 	movdqa	%xmm0, %xmm1
    00000099: 	psrldq	$0x8, %xmm1
    0000009e: 	pxor	%xmm1, %xmm0
    000000a2: 	movq	%xmm0, %rcx
    000000a7: 	xorq	%rcx, %rax
    000000aa: 	movl	%esi, %ecx
    000000ac: 	andl	$-0x2, %ecx
    000000af: 	addl	%ecx, %edx
    000000b1: 	cmpl	%esi, %ecx
    000000b3: 	je	.Ltmp2136 # Offset: 179
.Ltmp2137:
    000000b5: 	movslq	%edx, %rdx
    000000b8: 	xorq	(%r8,%rdx,8), %rax
.Ltmp2136:
    000000bc: 	xorq	%rdi, %rax
    000000bf: 	retq # Offset: 191
.Ltmp2134:
    000000c0: 	xorl	%edx, %edx
    000000c2: 	xorl	%edi, %edi
    000000c4: 	jmp	.Ltmp2140 # Offset: 196
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor5ImET_PKS0_iS0_"

Binary Function "_Z8bit_xor6ImET_PKS0_iS0_" after disassembly {
  Number      : 309
  State       : disassembled
  Address     : 0x1ae90
  Size        : 0xf9
  MaxSize     : 0x100
  Offset      : 0x1ae90
  Section     : .text
  Orc Section : .local.text._Z8bit_xor6ImET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0308:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movq	%rdx, %rax
    0000000a: 	cmpl	$0x3, %esi
    0000000d: 	jle	.Ltmp2141 # Offset: 13
    00000013: 	leal	-0x4(%rsi), %ecx
    00000016: 	movq	%rdx, %xmm0
    0000001b: 	movq	%rdi, %rax
    0000001e: 	xorl	%edx, %edx
    00000020: 	shrl	$0x2, %ecx
    00000023: 	pxor	%xmm1, %xmm1
    00000027: 	addl	$0x1, %ecx
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2142:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	movdqu	0x10(%rax), %xmm3
    00000039: 	addl	$0x1, %edx
    0000003c: 	addq	$0x20, %rax
    00000040: 	pxor	%xmm2, %xmm0
    00000044: 	pxor	%xmm3, %xmm1
    00000048: 	cmpl	%edx, %ecx
    0000004a: 	ja	.Ltmp2142 # Offset: 74
    0000004c: 	movhlps	%xmm0, %xmm4
    0000004f: 	movq	%xmm1, %rsi
    00000054: 	movhlps	%xmm1, %xmm5
    00000057: 	shll	$0x2, %ecx
    0000005a: 	movq	%xmm4, %rdx
    0000005f: 	movq	%xmm0, %rax
    00000064: 	xorq	%rsi, %rdx
    00000067: 	movq	%xmm5, %rsi
    0000006c: 	xorq	%rsi, %rdx
.Ltmp2147:
    0000006f: 	cmpl	%ecx, %r8d
    00000072: 	jle	.Ltmp2143 # Offset: 114
    00000074: 	movl	%r8d, %r9d
    00000077: 	subl	%ecx, %r9d
    0000007a: 	cmpl	$0x1, %r9d
    0000007e: 	je	.Ltmp2144 # Offset: 126
    00000080: 	movslq	%ecx, %rsi
    00000083: 	pxor	%xmm0, %xmm0
    00000087: 	leaq	(%rdi,%rsi,8), %r8
    0000008b: 	movl	%r9d, %esi
    0000008e: 	shrl	%esi
    00000090: 	leal	-0x1(%rsi), %r10d
    00000094: 	leaq	0x10(%r8), %rsi
    00000098: 	shlq	$0x4, %r10
    0000009c: 	addq	%rsi, %r10
    0000009f: 	jmp	.Ltmp2145 # Offset: 159
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp2146:
    000000a8: 	addq	$0x10, %rsi
.Ltmp2145:
    000000ac: 	movdqu	(%r8), %xmm1
    000000b1: 	movq	%rsi, %r8
    000000b4: 	pxor	%xmm1, %xmm0
    000000b8: 	cmpq	%rsi, %r10
    000000bb: 	jne	.Ltmp2146 # Offset: 187
    000000bd: 	movdqa	%xmm0, %xmm1
    000000c1: 	psrldq	$0x8, %xmm1
    000000c6: 	pxor	%xmm1, %xmm0
    000000ca: 	movq	%xmm0, %rsi
    000000cf: 	xorq	%rsi, %rax
    000000d2: 	movl	%r9d, %esi
    000000d5: 	andl	$-0x2, %esi
    000000d8: 	addl	%esi, %ecx
    000000da: 	cmpl	%r9d, %esi
    000000dd: 	je	.Ltmp2143 # Offset: 221
.Ltmp2144:
    000000df: 	movslq	%ecx, %rcx
    000000e2: 	xorq	(%rdi,%rcx,8), %rax
.Ltmp2143:
    000000e6: 	xorq	%rdx, %rax
    000000e9: 	retq # Offset: 233
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2141:
    000000f0: 	xorl	%edx, %edx
    000000f2: 	xorl	%ecx, %ecx
    000000f4: 	jmp	.Ltmp2147 # Offset: 244
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor6ImET_PKS0_iS0_"

Binary Function "_Z8bit_xor7ImET_PKS0_iS0_" after disassembly {
  Number      : 310
  State       : disassembled
  Address     : 0x1af90
  Size        : 0xf9
  MaxSize     : 0x100
  Offset      : 0x1af90
  Section     : .text
  Orc Section : .local.text._Z8bit_xor7ImET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0309:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movq	%rdx, %rax
    0000000a: 	cmpl	$0x3, %esi
    0000000d: 	jle	.Ltmp2148 # Offset: 13
    00000013: 	leal	-0x4(%rsi), %ecx
    00000016: 	movq	%rdx, %xmm0
    0000001b: 	movq	%rdi, %rax
    0000001e: 	xorl	%edx, %edx
    00000020: 	shrl	$0x2, %ecx
    00000023: 	pxor	%xmm1, %xmm1
    00000027: 	addl	$0x1, %ecx
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2149:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	movdqu	0x10(%rax), %xmm3
    00000039: 	addl	$0x1, %edx
    0000003c: 	addq	$0x20, %rax
    00000040: 	pxor	%xmm2, %xmm0
    00000044: 	pxor	%xmm3, %xmm1
    00000048: 	cmpl	%edx, %ecx
    0000004a: 	ja	.Ltmp2149 # Offset: 74
    0000004c: 	movhlps	%xmm0, %xmm4
    0000004f: 	movq	%xmm1, %rsi
    00000054: 	movhlps	%xmm1, %xmm5
    00000057: 	shll	$0x2, %ecx
    0000005a: 	movq	%xmm4, %rdx
    0000005f: 	movq	%xmm0, %rax
    00000064: 	xorq	%rsi, %rdx
    00000067: 	movq	%xmm5, %rsi
    0000006c: 	xorq	%rsi, %rdx
.Ltmp2154:
    0000006f: 	cmpl	%ecx, %r8d
    00000072: 	jle	.Ltmp2150 # Offset: 114
    00000074: 	movl	%r8d, %r9d
    00000077: 	subl	%ecx, %r9d
    0000007a: 	cmpl	$0x1, %r9d
    0000007e: 	je	.Ltmp2151 # Offset: 126
    00000080: 	movslq	%ecx, %rsi
    00000083: 	pxor	%xmm0, %xmm0
    00000087: 	leaq	(%rdi,%rsi,8), %r8
    0000008b: 	movl	%r9d, %esi
    0000008e: 	shrl	%esi
    00000090: 	leal	-0x1(%rsi), %r10d
    00000094: 	leaq	0x10(%r8), %rsi
    00000098: 	shlq	$0x4, %r10
    0000009c: 	addq	%rsi, %r10
    0000009f: 	jmp	.Ltmp2152 # Offset: 159
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp2153:
    000000a8: 	addq	$0x10, %rsi
.Ltmp2152:
    000000ac: 	movdqu	(%r8), %xmm1
    000000b1: 	movq	%rsi, %r8
    000000b4: 	pxor	%xmm1, %xmm0
    000000b8: 	cmpq	%rsi, %r10
    000000bb: 	jne	.Ltmp2153 # Offset: 187
    000000bd: 	movdqa	%xmm0, %xmm1
    000000c1: 	psrldq	$0x8, %xmm1
    000000c6: 	pxor	%xmm1, %xmm0
    000000ca: 	movq	%xmm0, %rsi
    000000cf: 	xorq	%rsi, %rax
    000000d2: 	movl	%r9d, %esi
    000000d5: 	andl	$-0x2, %esi
    000000d8: 	addl	%esi, %ecx
    000000da: 	cmpl	%r9d, %esi
    000000dd: 	je	.Ltmp2150 # Offset: 221
.Ltmp2151:
    000000df: 	movslq	%ecx, %rcx
    000000e2: 	xorq	(%rdi,%rcx,8), %rax
.Ltmp2150:
    000000e6: 	xorq	%rdx, %rax
    000000e9: 	retq # Offset: 233
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2148:
    000000f0: 	xorl	%edx, %edx
    000000f2: 	xorl	%ecx, %ecx
    000000f4: 	jmp	.Ltmp2154 # Offset: 244
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor7ImET_PKS0_iS0_"

Binary Function "_Z8bit_xor8ImET_PKS0_iS0_" after disassembly {
  Number      : 311
  State       : disassembled
  Address     : 0x1b090
  Size        : 0x121
  MaxSize     : 0x130
  Offset      : 0x1b090
  Section     : .text
  Orc Section : .local.text._Z8bit_xor8ImET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0310:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movq	%rdx, %rax
    0000000a: 	cmpl	$0x7, %esi
    0000000d: 	jle	.Ltmp2155 # Offset: 13
    00000013: 	leal	-0x8(%rsi), %ecx
    00000016: 	pxor	%xmm3, %xmm3
    0000001a: 	movq	%rdx, %xmm4
    0000001f: 	movq	%rdi, %rax
    00000022: 	shrl	$0x3, %ecx
    00000025: 	movdqa	%xmm3, %xmm2
    00000029: 	movdqa	%xmm3, %xmm1
    0000002d: 	leal	0x1(%rcx), %esi
    00000030: 	xorl	%ecx, %ecx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2156:
    00000038: 	movdqu	(%rax), %xmm5
    0000003c: 	movdqu	0x20(%rax), %xmm7
    00000041: 	addl	$0x1, %ecx
    00000044: 	addq	$0x40, %rax
    00000048: 	movdqu	-0x30(%rax), %xmm6
    0000004d: 	pxor	%xmm5, %xmm4
    00000051: 	pxor	%xmm7, %xmm2
    00000055: 	movdqu	-0x10(%rax), %xmm5
    0000005a: 	pxor	%xmm6, %xmm1
    0000005e: 	movdqa	%xmm2, %xmm0
    00000062: 	pxor	%xmm5, %xmm3
    00000066: 	pxor	%xmm1, %xmm0
    0000006a: 	pxor	%xmm3, %xmm0
    0000006e: 	movhlps	%xmm0, %xmm6
    00000071: 	movq	%xmm0, %r9
    00000076: 	movq	%xmm6, %rdx
    0000007b: 	cmpl	%ecx, %esi
    0000007d: 	ja	.Ltmp2156 # Offset: 125
    0000007f: 	movq	%xmm4, %rax
    00000084: 	psrldq	$0x8, %xmm4
    00000089: 	leal	(,%rsi,8), %ecx
    00000090: 	xorq	%r9, %rdx
    00000093: 	movq	%xmm4, %rsi
    00000098: 	xorq	%rsi, %rdx
.Ltmp2161:
    0000009b: 	cmpl	%ecx, %r8d
    0000009e: 	jle	.Ltmp2157 # Offset: 158
    000000a0: 	movl	%r8d, %r9d
    000000a3: 	subl	%ecx, %r9d
    000000a6: 	cmpl	$0x1, %r9d
    000000aa: 	je	.Ltmp2158 # Offset: 170
    000000ac: 	movslq	%ecx, %rsi
    000000af: 	pxor	%xmm0, %xmm0
    000000b3: 	leaq	(%rdi,%rsi,8), %r8
    000000b7: 	movl	%r9d, %esi
    000000ba: 	shrl	%esi
    000000bc: 	leal	-0x1(%rsi), %r10d
    000000c0: 	leaq	0x10(%r8), %rsi
    000000c4: 	shlq	$0x4, %r10
    000000c8: 	addq	%rsi, %r10
    000000cb: 	jmp	.Ltmp2159 # Offset: 203
    000000cd: 	nopl	(%rax) # Size: 3
.Ltmp2160:
    000000d0: 	addq	$0x10, %rsi
.Ltmp2159:
    000000d4: 	movdqu	(%r8), %xmm1
    000000d9: 	movq	%rsi, %r8
    000000dc: 	pxor	%xmm1, %xmm0
    000000e0: 	cmpq	%rsi, %r10
    000000e3: 	jne	.Ltmp2160 # Offset: 227
    000000e5: 	movdqa	%xmm0, %xmm1
    000000e9: 	psrldq	$0x8, %xmm1
    000000ee: 	pxor	%xmm1, %xmm0
    000000f2: 	movq	%xmm0, %rsi
    000000f7: 	xorq	%rsi, %rax
    000000fa: 	movl	%r9d, %esi
    000000fd: 	andl	$-0x2, %esi
    00000100: 	addl	%esi, %ecx
    00000102: 	cmpl	%r9d, %esi
    00000105: 	je	.Ltmp2157 # Offset: 261
.Ltmp2158:
    00000107: 	movslq	%ecx, %rcx
    0000010a: 	xorq	(%rdi,%rcx,8), %rax
.Ltmp2157:
    0000010e: 	xorq	%rdx, %rax
    00000111: 	retq # Offset: 273
    00000112: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2155:
    00000118: 	xorl	%edx, %edx
    0000011a: 	xorl	%ecx, %ecx
    0000011c: 	jmp	.Ltmp2161 # Offset: 284
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor8ImET_PKS0_iS0_"

Binary Function "_Z10logic_and1ImEbPKT_ib" after disassembly {
  Number      : 312
  State       : disassembled
  Address     : 0x1b1c0
  Size        : 0x33
  MaxSize     : 0x40
  Offset      : 0x1b1c0
  Section     : .text
  Orc Section : .local.text._Z10logic_and1ImEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0311:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp2162 # Offset: 8
    0000000a: 	testb	%dl, %dl
    0000000c: 	je	.Ltmp2162 # Offset: 12
    0000000e: 	leal	-0x1(%rsi), %edx
    00000011: 	leaq	0x8(%rdi,%rdx,8), %rdx
.Ltmp2164:
    00000016: 	cmpq	$0x0, (%rdi)
    0000001a: 	je	.Ltmp2163 # Offset: 26
    0000001c: 	addq	$0x8, %rdi
    00000020: 	cmpq	%rdi, %rdx
    00000023: 	jne	.Ltmp2164 # Offset: 35
    00000025: 	retq # Offset: 37
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2163:
    00000030: 	xorl	%eax, %eax
.Ltmp2162:
    00000032: 	retq # Offset: 50
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and1ImEbPKT_ib"

Binary Function "_Z10logic_and2ImEbPKT_ib" after disassembly {
  Number      : 313
  State       : disassembled
  Address     : 0x1b200
  Size        : 0x3e
  MaxSize     : 0x40
  Offset      : 0x1b200
  Section     : .text
  Orc Section : .local.text._Z10logic_and2ImEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0312:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	leaq	(%rdi,%rsi,8), %rax
    0000000b: 	cmpq	%rax, %rdi
    0000000e: 	je	.Ltmp2165 # Offset: 14
    00000010: 	testb	%dl, %dl
    00000012: 	jne	.Ltmp2166 # Offset: 18
.Ltmp2167:
    00000014: 	jmp	.Ltmp2167 # Offset: 20
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2166:
    00000020: 	addq	$0x8, %rdi
    00000024: 	movq	-0x8(%rdi), %rdx
    00000028: 	cmpq	%rdi, %rax
    0000002b: 	je	.Ltmp2168 # Offset: 43
    0000002d: 	testq	%rdx, %rdx
    00000030: 	jne	.Ltmp2166 # Offset: 48
    00000032: 	jmp	.Ltmp2167 # Offset: 50
.Ltmp2165:
    00000034: 	movl	%edx, %eax
    00000036: 	retq # Offset: 54
.Ltmp2168:
    00000037: 	testq	%rdx, %rdx
    0000003a: 	setne	%al
    0000003d: 	retq # Offset: 61
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and2ImEbPKT_ib"

Binary Function "_Z10logic_and3ImEbPKT_ib" after disassembly {
  Number      : 314
  State       : disassembled
  Address     : 0x1b240
  Size        : 0x6a
  MaxSize     : 0x70
  Offset      : 0x1b240
  Section     : .text
  Orc Section : .local.text._Z10logic_and3ImEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0313:
    00000000: 	endbr64
    00000004: 	cmpl	$0x1, %esi
    00000007: 	jle	.Ltmp2169 # Offset: 7
    00000009: 	xorl	%eax, %eax
    0000000b: 	testb	%dl, %dl
    0000000d: 	je	.Ltmp2170 # Offset: 13
    0000000f: 	leal	-0x2(%rsi), %eax
    00000012: 	shrl	%eax
    00000014: 	leal	0x2(%rax), %r8d
    00000018: 	movl	$0x2, %eax
    0000001d: 	addq	%r8, %r8
.Ltmp2172:
    00000020: 	cmpq	$0x0, -0x10(%rdi,%rax,8)
    00000026: 	je	.Ltmp2171 # Offset: 38
    00000028: 	cmpq	$0x0, -0x8(%rdi,%rax,8)
    0000002e: 	je	.Ltmp2171 # Offset: 46
    00000030: 	movslq	%eax, %rcx
    00000033: 	addq	$0x2, %rax
    00000037: 	cmpq	%r8, %rax
    0000003a: 	jne	.Ltmp2172 # Offset: 58
    0000003c: 	cmpl	%ecx, %esi
    0000003e: 	jle	.Ltmp2173 # Offset: 62
.Ltmp2174:
    00000040: 	cmpq	$0x0, (%rdi,%rcx,8)
    00000045: 	je	.Ltmp2171 # Offset: 69
    00000047: 	addq	$0x1, %rcx
    0000004b: 	cmpl	%ecx, %esi
    0000004d: 	jg	.Ltmp2174 # Offset: 77
    0000004f: 	movl	$0x1, %eax
    00000054: 	retq # Offset: 84
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp2171:
    00000058: 	xorl	%eax, %eax
    0000005a: 	retq # Offset: 90
.Ltmp2173:
    0000005b: 	movl	%edx, %eax
.Ltmp2170:
    0000005d: 	retq # Offset: 93
    0000005e: 	nop # Size: 2
.Ltmp2169:
    00000060: 	jne	.Ltmp2173 # Offset: 96
    00000062: 	testb	%dl, %dl
    00000064: 	je	.Ltmp2171 # Offset: 100
    00000066: 	xorl	%ecx, %ecx
    00000068: 	jmp	.Ltmp2174 # Offset: 104
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and3ImEbPKT_ib"

Binary Function "_Z10logic_and4ImEbPKT_ib" after disassembly {
  Number      : 315
  State       : disassembled
  Address     : 0x1b2b0
  Size        : 0x7a
  MaxSize     : 0x80
  Offset      : 0x1b2b0
  Section     : .text
  Orc Section : .local.text._Z10logic_and4ImEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0314:
    00000000: 	endbr64
    00000004: 	cmpl	$0x3, %esi
    00000007: 	jle	.Ltmp2175 # Offset: 7
    00000009: 	leal	-0x3(%rsi), %r8d
    0000000d: 	xorl	%eax, %eax
    0000000f: 	testb	%dl, %dl
    00000011: 	je	.Ltmp2176 # Offset: 17
    00000013: 	movq	%rdi, %rax
    00000016: 	xorl	%ecx, %ecx
.Ltmp2178:
    00000018: 	cmpq	$0x0, (%rax)
    0000001c: 	je	.Ltmp2177 # Offset: 28
    0000001e: 	cmpq	$0x0, 0x8(%rax)
    00000023: 	je	.Ltmp2177 # Offset: 35
    00000025: 	cmpq	$0x0, 0x10(%rax)
    0000002a: 	je	.Ltmp2177 # Offset: 42
    0000002c: 	cmpq	$0x0, 0x18(%rax)
    00000031: 	je	.Ltmp2177 # Offset: 49
    00000033: 	addl	$0x4, %ecx
    00000036: 	addq	$0x20, %rax
    0000003a: 	cmpl	%r8d, %ecx
    0000003d: 	jl	.Ltmp2178 # Offset: 61
    0000003f: 	cmpl	%ecx, %esi
    00000041: 	jg	.Ltmp2179 # Offset: 65
.Ltmp2180:
    00000043: 	movl	%edx, %eax
.Ltmp2176:
    00000045: 	retq # Offset: 69
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2177:
    00000050: 	xorl	%eax, %eax
    00000052: 	retq # Offset: 82
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2175:
    00000058: 	testl	%esi, %esi
    0000005a: 	jle	.Ltmp2180 # Offset: 90
    0000005c: 	testb	%dl, %dl
    0000005e: 	je	.Ltmp2177 # Offset: 94
    00000060: 	xorl	%ecx, %ecx
.Ltmp2179:
    00000062: 	movslq	%ecx, %rax
.Ltmp2181:
    00000065: 	cmpq	$0x0, (%rdi,%rax,8)
    0000006a: 	je	.Ltmp2177 # Offset: 106
    0000006c: 	addq	$0x1, %rax
    00000070: 	cmpl	%eax, %esi
    00000072: 	jg	.Ltmp2181 # Offset: 114
    00000074: 	movl	$0x1, %eax
    00000079: 	retq # Offset: 121
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and4ImEbPKT_ib"

Binary Function "_Z10logic_and5ImEbPKT_ib" after disassembly {
  Number      : 316
  State       : disassembled
  Address     : 0x1b330
  Size        : 0x9c
  MaxSize     : 0xa0
  Offset      : 0x1b330
  Section     : .text
  Orc Section : .local.text._Z10logic_and5ImEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0315:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x1, %esi
    0000000c: 	jle	.Ltmp2182 # Offset: 12
    00000012: 	leal	-0x2(%rsi), %r9d
    00000016: 	movq	%rdi, %rcx
    00000019: 	shrl	%r9d
    0000001c: 	movl	%r9d, %edi
    0000001f: 	shlq	$0x4, %rdi
    00000023: 	leaq	0x10(%r8,%rdi), %rdi
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2185:
    00000030: 	testb	%dl, %dl
    00000032: 	je	.Ltmp2183 # Offset: 50
    00000034: 	cmpq	$0x0, (%rcx)
    00000038: 	setne	%dl
.Ltmp2183:
    0000003b: 	testb	%al, %al
    0000003d: 	je	.Ltmp2184 # Offset: 61
    0000003f: 	cmpq	$0x0, 0x8(%rcx)
    00000044: 	setne	%al
.Ltmp2184:
    00000047: 	addq	$0x10, %rcx
    0000004b: 	cmpq	%rdi, %rcx
    0000004e: 	jne	.Ltmp2185 # Offset: 78
    00000050: 	leal	0x2(%r9,%r9), %ecx
.Ltmp2189:
    00000055: 	cmpl	%ecx, %esi
    00000057: 	jle	.Ltmp2186 # Offset: 87
    00000059: 	testb	%dl, %dl
    0000005b: 	je	.Ltmp2187 # Offset: 91
    0000005d: 	subl	$0x1, %esi
    00000060: 	movslq	%ecx, %rdi
    00000063: 	subl	%ecx, %esi
    00000065: 	leaq	(%r8,%rdi,8), %rdx
    00000069: 	leaq	(%rsi,%rdi), %rcx
    0000006d: 	leaq	0x8(%r8,%rcx,8), %rcx
.Ltmp2188:
    00000072: 	cmpq	$0x0, (%rdx)
    00000076: 	je	.Ltmp2187 # Offset: 118
    00000078: 	addq	$0x8, %rdx
    0000007c: 	cmpq	%rcx, %rdx
    0000007f: 	jne	.Ltmp2188 # Offset: 127
    00000081: 	retq # Offset: 129
    00000082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2187:
    00000088: 	xorl	%eax, %eax
    0000008a: 	retq # Offset: 138
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2186:
    00000090: 	andl	%edx, %eax
    00000092: 	retq # Offset: 146
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2182:
    00000098: 	xorl	%ecx, %ecx
    0000009a: 	jmp	.Ltmp2189 # Offset: 154
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and5ImEbPKT_ib"

Binary Function "_Z10logic_and6ImEbPKT_ib" after disassembly {
  Number      : 317
  State       : disassembled
  Address     : 0x1b3d0
  Size        : 0xed
  MaxSize     : 0xf0
  Offset      : 0x1b3d0
  Section     : .text
  Orc Section : .local.text._Z10logic_and6ImEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0316:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movl	%esi, %r11d
    00000008: 	movl	%edx, %r10d
    0000000b: 	pushq	%rbx
    0000000c: 	movq	%rdi, %rbx
    0000000f: 	cmpl	$0x3, %esi
    00000012: 	jle	.Ltmp2190 # Offset: 18
    00000018: 	leal	-0x4(%rsi), %ebp
    0000001b: 	movq	%rdi, %rax
    0000001e: 	movl	%edx, %esi
    00000020: 	shrl	$0x2, %ebp
    00000023: 	movl	%ebp, %ecx
    00000025: 	shlq	$0x5, %rcx
    00000029: 	leaq	0x20(%rdi,%rcx), %r8
    0000002e: 	movl	%edx, %ecx
    00000030: 	xorl	%edi, %edi
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2195:
    00000038: 	testb	%r10b, %r10b
    0000003b: 	je	.Ltmp2191 # Offset: 59
    0000003d: 	cmpq	$0x0, (%rax)
    00000041: 	setne	%r10b
.Ltmp2191:
    00000045: 	testb	%dl, %dl
    00000047: 	je	.Ltmp2192 # Offset: 71
    00000049: 	cmpq	$0x0, 0x8(%rax)
    0000004e: 	setne	%dl
.Ltmp2192:
    00000051: 	testb	%cl, %cl
    00000053: 	je	.Ltmp2193 # Offset: 83
    00000055: 	cmpq	$0x0, 0x10(%rax)
    0000005a: 	setne	%cl
.Ltmp2193:
    0000005d: 	xorl	%r9d, %r9d
    00000060: 	testb	%sil, %sil
    00000063: 	je	.Ltmp2194 # Offset: 99
    00000065: 	cmpq	$0x0, 0x18(%rax)
    0000006a: 	movl	%edi, %r9d
    0000006d: 	cmovnel	%ecx, %r9d
    00000071: 	cmovel	%edi, %esi
.Ltmp2194:
    00000074: 	addq	$0x20, %rax
    00000078: 	cmpq	%r8, %rax
    0000007b: 	jne	.Ltmp2195 # Offset: 123
    0000007d: 	leal	0x4(,%rbp,4), %ecx
    00000084: 	cmpl	%ecx, %r11d
    00000087: 	jle	.Ltmp2196 # Offset: 135
.Ltmp2199:
    00000089: 	testb	%r10b, %r10b
    0000008c: 	je	.Ltmp2197 # Offset: 140
    0000008e: 	subl	$0x1, %r11d
    00000092: 	movslq	%ecx, %rsi
    00000095: 	subl	%ecx, %r11d
    00000098: 	leaq	(%rbx,%rsi,8), %rax
    0000009c: 	leaq	(%r11,%rsi), %rcx
    000000a0: 	leaq	0x8(%rbx,%rcx,8), %rcx
.Ltmp2198:
    000000a5: 	cmpq	$0x0, (%rax)
    000000a9: 	je	.Ltmp2197 # Offset: 169
    000000ab: 	addq	$0x8, %rax
    000000af: 	cmpq	%rax, %rcx
    000000b2: 	jne	.Ltmp2198 # Offset: 178
.Ltmp2200:
    000000b4: 	xorl	%eax, %eax
    000000b6: 	testb	%dl, %dl
    000000b8: 	popq	%rbx
    000000b9: 	popq	%rbp
    000000ba: 	cmovel	%eax, %r9d
    000000be: 	movl	%r9d, %eax
    000000c1: 	retq # Offset: 193
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2197:
    000000c8: 	xorl	%r9d, %r9d
    000000cb: 	popq	%rbx
    000000cc: 	popq	%rbp
    000000cd: 	movl	%r9d, %eax
    000000d0: 	retq # Offset: 208
    000000d1: 	nopl	(%rax) # Size: 7
.Ltmp2190:
    000000d8: 	xorl	%ecx, %ecx
    000000da: 	movl	%edx, %r9d
    000000dd: 	cmpl	%ecx, %r11d
    000000e0: 	jg	.Ltmp2199 # Offset: 224
    000000e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2196:
    000000e8: 	andl	%r10d, %edx
    000000eb: 	jmp	.Ltmp2200 # Offset: 235
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and6ImEbPKT_ib"

Binary Function "_Z10logic_and7ImEbPKT_ib" after disassembly {
  Number      : 318
  State       : disassembled
  Address     : 0x1b4c0
  Size        : 0x130
  MaxSize     : 0x130
  Offset      : 0x1b4c0
  Section     : .text
  Orc Section : .local.text._Z10logic_and7ImEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0317:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movl	%edx, %eax
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movl	%esi, %ebp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	cmpl	$0x3, %esi
    00000016: 	jle	.Ltmp2201 # Offset: 22
    0000001c: 	leal	-0x4(%rsi), %r14d
    00000020: 	movq	%rdi, %rcx
    00000023: 	xorl	%r10d, %r10d
    00000026: 	shrl	$0x2, %r14d
    0000002a: 	movl	%r14d, %esi
    0000002d: 	shlq	$0x5, %rsi
    00000031: 	leaq	0x20(%rdi,%rsi), %r13
    00000036: 	movl	%edx, %edi
    00000038: 	movl	%edx, %esi
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2206:
    00000040: 	movl	%eax, %r8d
    00000043: 	testb	%al, %al
    00000045: 	je	.Ltmp2202 # Offset: 69
    00000047: 	cmpq	$0x1, (%rcx)
    0000004b: 	sbbl	%eax, %eax
    0000004d: 	addl	$0x1, %eax
    00000050: 	cmpq	$0x0, (%rcx)
    00000054: 	cmovel	%r10d, %r8d
.Ltmp2202:
    00000058: 	movl	%edx, %r9d
    0000005b: 	testb	%dl, %dl
    0000005d: 	je	.Ltmp2203 # Offset: 93
    0000005f: 	cmpq	$0x1, 0x8(%rcx)
    00000064: 	sbbl	%edx, %edx
    00000066: 	addl	$0x1, %edx
    00000069: 	cmpq	$0x0, 0x8(%rcx)
    0000006e: 	cmovel	%r10d, %r9d
.Ltmp2203:
    00000072: 	movl	%esi, %r12d
    00000075: 	testb	%sil, %sil
    00000078: 	je	.Ltmp2204 # Offset: 120
    0000007a: 	cmpq	$0x1, 0x10(%rcx)
    0000007f: 	sbbl	%esi, %esi
    00000081: 	addl	$0x1, %esi
    00000084: 	cmpq	$0x0, 0x10(%rcx)
    00000089: 	cmovel	%r10d, %r12d
.Ltmp2204:
    0000008d: 	movl	%edi, %r11d
    00000090: 	testb	%dil, %dil
    00000093: 	je	.Ltmp2205 # Offset: 147
    00000095: 	cmpq	$0x1, 0x18(%rcx)
    0000009a: 	sbbl	%edi, %edi
    0000009c: 	addl	$0x1, %edi
    0000009f: 	cmpq	$0x0, 0x18(%rcx)
    000000a4: 	cmovel	%r10d, %r11d
.Ltmp2205:
    000000a8: 	addq	$0x20, %rcx
    000000ac: 	cmpq	%rcx, %r13
    000000af: 	jne	.Ltmp2206 # Offset: 175
    000000b1: 	leal	0x4(,%r14,4), %ecx
.Ltmp2211:
    000000b9: 	cmpl	%ecx, %ebp
    000000bb: 	jle	.Ltmp2207 # Offset: 187
    000000bd: 	subl	$0x1, %ebp
    000000c0: 	movslq	%ecx, %rsi
    000000c3: 	subl	%ecx, %ebp
    000000c5: 	leaq	(%rbx,%rsi,8), %rdx
    000000c9: 	addq	%rsi, %rbp
    000000cc: 	xorl	%esi, %esi
    000000ce: 	leaq	0x8(%rbx,%rbp,8), %rcx
    000000d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2209:
    000000d8: 	movl	%eax, %r8d
    000000db: 	testb	%al, %al
    000000dd: 	je	.Ltmp2208 # Offset: 221
    000000df: 	cmpq	$0x1, (%rdx)
    000000e3: 	sbbl	%eax, %eax
    000000e5: 	addl	$0x1, %eax
    000000e8: 	cmpq	$0x0, (%rdx)
    000000ec: 	cmovel	%esi, %r8d
.Ltmp2208:
    000000f0: 	addq	$0x8, %rdx
    000000f4: 	cmpq	%rdx, %rcx
    000000f7: 	jne	.Ltmp2209 # Offset: 247
.Ltmp2207:
    000000f9: 	testb	%r8b, %r8b
    000000fc: 	je	.Ltmp2210 # Offset: 252
    000000fe: 	xorl	%r8d, %r8d
    00000101: 	testb	%r9b, %r9b
    00000104: 	je	.Ltmp2210 # Offset: 260
    00000106: 	testb	%r12b, %r12b
    00000109: 	cmovnel	%r11d, %r8d
.Ltmp2210:
    0000010d: 	popq	%rbx
    0000010e: 	movl	%r8d, %eax
    00000111: 	popq	%rbp
    00000112: 	popq	%r12
    00000114: 	popq	%r13
    00000116: 	popq	%r14
    00000118: 	retq # Offset: 280
    00000119: 	nopl	(%rax) # Size: 7
.Ltmp2201:
    00000120: 	movl	%edx, %r9d
    00000123: 	movl	%edx, %r11d
    00000126: 	movl	%edx, %r12d
    00000129: 	movl	%edx, %r8d
    0000012c: 	xorl	%ecx, %ecx
    0000012e: 	jmp	.Ltmp2211 # Offset: 302
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and7ImEbPKT_ib"

Binary Function "_Z10logic_and8ImEbPKT_ib" after disassembly {
  Number      : 319
  State       : disassembled
  Address     : 0x1b5f0
  Size        : 0x229
  MaxSize     : 0x230
  Offset      : 0x1b5f0
  Section     : .text
  Orc Section : .local.text._Z10logic_and8ImEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0318:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %eax
    00000008: 	movl	%edx, %ecx
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbp
    00000011: 	pushq	%rbx
    00000012: 	movq	%rdi, -0x10(%rsp)
    00000017: 	movl	%esi, -0x8(%rsp)
    0000001b: 	cmpl	$0x7, %esi
    0000001e: 	jle	.Ltmp2212 # Offset: 30
    00000024: 	leal	-0x8(%rsi), %esi
    00000027: 	movq	%rdi, %rdx
    0000002a: 	movl	%eax, %r12d
    0000002d: 	movl	%eax, %ebp
    0000002f: 	shrl	$0x3, %esi
    00000032: 	movl	%eax, %r10d
    00000035: 	movl	%eax, %r9d
    00000038: 	movl	%esi, -0x4(%rsp)
    0000003c: 	shlq	$0x6, %rsi
    00000040: 	leaq	0x40(%rdi,%rsi), %rbx
    00000045: 	xorl	%edi, %edi
    00000047: 	movl	%eax, %esi
    00000049: 	movq	%rbx, -0x18(%rsp)
    0000004e: 	movl	%eax, %ebx
.Ltmp2221:
    00000050: 	movl	%ecx, %r14d
    00000053: 	testb	%cl, %cl
    00000055: 	je	.Ltmp2213 # Offset: 85
    00000057: 	cmpq	$0x1, (%rdx)
    0000005b: 	sbbl	%ecx, %ecx
    0000005d: 	addl	$0x1, %ecx
    00000060: 	cmpq	$0x0, (%rdx)
    00000064: 	cmovel	%edi, %r14d
.Ltmp2213:
    00000068: 	movl	%eax, %r11d
    0000006b: 	testb	%al, %al
    0000006d: 	je	.Ltmp2214 # Offset: 109
    0000006f: 	cmpq	$0x1, 0x8(%rdx)
    00000074: 	sbbl	%eax, %eax
    00000076: 	addl	$0x1, %eax
    00000079: 	cmpq	$0x0, 0x8(%rdx)
    0000007e: 	cmovel	%edi, %r11d
.Ltmp2214:
    00000082: 	movl	%r9d, %r15d
    00000085: 	testb	%r9b, %r9b
    00000088: 	je	.Ltmp2215 # Offset: 136
    0000008a: 	cmpq	$0x1, 0x10(%rdx)
    0000008f: 	sbbl	%r9d, %r9d
    00000092: 	addl	$0x1, %r9d
    00000096: 	cmpq	$0x0, 0x10(%rdx)
    0000009b: 	cmovel	%edi, %r15d
.Ltmp2215:
    0000009f: 	movb	%r10b, -0x1a(%rsp)
    000000a4: 	movl	%r10d, %r8d
    000000a7: 	testb	%r10b, %r10b
    000000aa: 	je	.Ltmp2216 # Offset: 170
    000000ac: 	cmpq	$0x1, 0x18(%rdx)
    000000b1: 	sbbl	%r10d, %r10d
    000000b4: 	addl	$0x1, %r10d
    000000b8: 	cmpq	$0x0, 0x18(%rdx)
    000000bd: 	cmovel	%edi, %r8d
    000000c1: 	movb	%r8b, -0x1a(%rsp)
.Ltmp2216:
    000000c6: 	movb	%sil, -0x1c(%rsp)
    000000cb: 	movl	%esi, %r8d
    000000ce: 	testb	%sil, %sil
    000000d1: 	je	.Ltmp2217 # Offset: 209
    000000d3: 	cmpq	$0x1, 0x20(%rdx)
    000000d8: 	sbbl	%esi, %esi
    000000da: 	addl	$0x1, %esi
    000000dd: 	cmpq	$0x0, 0x20(%rdx)
    000000e2: 	cmovel	%edi, %r8d
    000000e6: 	movb	%r8b, -0x1c(%rsp)
.Ltmp2217:
    000000eb: 	movl	%ebx, %r13d
    000000ee: 	testb	%bl, %bl
    000000f0: 	je	.Ltmp2218 # Offset: 240
    000000f2: 	cmpq	$0x1, 0x28(%rdx)
    000000f7: 	sbbl	%ebx, %ebx
    000000f9: 	addl	$0x1, %ebx
    000000fc: 	cmpq	$0x0, 0x28(%rdx)
    00000101: 	cmovel	%edi, %r13d
.Ltmp2218:
    00000105: 	movb	%bpl, -0x1b(%rsp)
    0000010a: 	movl	%ebp, %r8d
    0000010d: 	testb	%bpl, %bpl
    00000110: 	je	.Ltmp2219 # Offset: 272
    00000112: 	cmpq	$0x1, 0x30(%rdx)
    00000117: 	sbbl	%ebp, %ebp
    00000119: 	addl	$0x1, %ebp
    0000011c: 	cmpq	$0x0, 0x30(%rdx)
    00000121: 	cmovel	%edi, %r8d
    00000125: 	movb	%r8b, -0x1b(%rsp)
.Ltmp2219:
    0000012a: 	movb	%r12b, -0x19(%rsp)
    0000012f: 	movl	%r12d, %r8d
    00000132: 	testb	%r12b, %r12b
    00000135: 	je	.Ltmp2220 # Offset: 309
    00000137: 	cmpq	$0x1, 0x38(%rdx)
    0000013c: 	sbbl	%r12d, %r12d
    0000013f: 	addl	$0x1, %r12d
    00000143: 	cmpq	$0x0, 0x38(%rdx)
    00000148: 	cmovel	%edi, %r8d
    0000014c: 	movb	%r8b, -0x19(%rsp)
.Ltmp2220:
    00000151: 	addq	$0x40, %rdx
    00000155: 	cmpq	%rdx, -0x18(%rsp)
    0000015a: 	jne	.Ltmp2221 # Offset: 346
    00000160: 	movl	-0x4(%rsp), %eax
    00000164: 	movzbl	-0x1c(%rsp), %r8d
    0000016a: 	movl	%r14d, %esi
    0000016d: 	movl	%r11d, %r14d
    00000170: 	leal	0x8(,%rax,8), %edi
.Ltmp2228:
    00000177: 	movl	-0x8(%rsp), %ebx
    0000017b: 	cmpl	%ebx, %edi
    0000017d: 	jge	.Ltmp2222 # Offset: 381
    0000017f: 	subl	$0x1, %ebx
    00000182: 	movslq	%edi, %rsi
    00000185: 	movq	-0x10(%rsp), %r11
    0000018a: 	movl	%ebx, %edx
    0000018c: 	subl	%edi, %edx
    0000018e: 	leaq	(%r11,%rsi,8), %rax
    00000192: 	xorl	%edi, %edi
    00000194: 	addq	%rsi, %rdx
    00000197: 	leaq	0x8(%r11,%rdx,8), %rdx
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp2224:
    000001a0: 	movl	%ecx, %esi
    000001a2: 	testb	%cl, %cl
    000001a4: 	je	.Ltmp2223 # Offset: 420
    000001a6: 	cmpq	$0x1, (%rax)
    000001aa: 	sbbl	%ecx, %ecx
    000001ac: 	addl	$0x1, %ecx
    000001af: 	cmpq	$0x0, (%rax)
    000001b3: 	cmovel	%edi, %esi
.Ltmp2223:
    000001b6: 	addq	$0x8, %rax
    000001ba: 	cmpq	%rax, %rdx
    000001bd: 	jne	.Ltmp2224 # Offset: 445
.Ltmp2222:
    000001bf: 	testb	%sil, %sil
    000001c2: 	je	.Ltmp2225 # Offset: 450
    000001c4: 	xorl	%esi, %esi
    000001c6: 	testb	%r14b, %r14b
    000001c9: 	jne	.Ltmp2226 # Offset: 457
.Ltmp2225:
    000001cb: 	testb	%r8b, %r8b
    000001ce: 	je	.Ltmp2227 # Offset: 462
    000001d0: 	xorl	%r8d, %r8d
    000001d3: 	testb	%r13b, %r13b
    000001d6: 	je	.Ltmp2227 # Offset: 470
    000001d8: 	cmpb	$0x0, -0x1b(%rsp)
    000001dd: 	cmovnel	%esi, %r8d
.Ltmp2227:
    000001e1: 	popq	%rbx
    000001e2: 	movl	%r8d, %eax
    000001e5: 	popq	%rbp
    000001e6: 	popq	%r12
    000001e8: 	popq	%r13
    000001ea: 	popq	%r14
    000001ec: 	popq	%r15
    000001ee: 	retq # Offset: 494
    000001ef: 	nop # Size: 1
.Ltmp2226:
    000001f0: 	testb	%r15b, %r15b
    000001f3: 	je	.Ltmp2225 # Offset: 499
    000001f5: 	movzbl	-0x19(%rsp), %eax
    000001fa: 	cmpb	$0x0, -0x1a(%rsp)
    000001ff: 	cmovnel	%eax, %esi
    00000202: 	jmp	.Ltmp2225 # Offset: 514
    00000204: 	nopl	(%rax) # Size: 4
.Ltmp2212:
    00000208: 	movb	%dl, -0x19(%rsp)
    0000020c: 	movl	%edx, %esi
    0000020e: 	movl	%edx, %r13d
    00000211: 	movl	%edx, %r15d
    00000214: 	movb	%dl, -0x1b(%rsp)
    00000218: 	movl	%edx, %r14d
    0000021b: 	movl	%edx, %r8d
    0000021e: 	xorl	%edi, %edi
    00000220: 	movb	%dl, -0x1a(%rsp)
    00000224: 	jmp	.Ltmp2228 # Offset: 548
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and8ImEbPKT_ib"

Binary Function "_Z9logic_or1ImEbPKT_ib" after disassembly {
  Number      : 320
  State       : disassembled
  Address     : 0x1b820
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1b820
  Section     : .text
  Orc Section : .local.text._Z9logic_or1ImEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0319:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp2229 # Offset: 8
    0000000a: 	leal	-0x1(%rsi), %edx
    0000000d: 	leaq	0x8(%rdi,%rdx,8), %rcx
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2230:
    00000018: 	cmpq	$0x0, (%rdi)
    0000001c: 	setne	%dl
    0000001f: 	addq	$0x8, %rdi
    00000023: 	orl	%edx, %eax
    00000025: 	cmpq	%rdi, %rcx
    00000028: 	jne	.Ltmp2230 # Offset: 40
.Ltmp2229:
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or1ImEbPKT_ib"

Binary Function "_Z12logic_or_optImEbPKT_ib" after disassembly {
  Number      : 321
  State       : disassembled
  Address     : 0x1b850
  Size        : 0x43
  MaxSize     : 0x50
  Offset      : 0x1b850
  Section     : .text
  Orc Section : .local.text._Z12logic_or_optImEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0320:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp2231 # Offset: 6
    00000008: 	cmpb	$0x1, %dl
    0000000b: 	je	.Ltmp2231 # Offset: 11
    0000000d: 	movl	$0x1, %eax
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2232:
    00000018: 	movq	-0x8(%rdi,%rax,8), %rdx
    0000001d: 	cmpl	%eax, %esi
    0000001f: 	setg	%r8b
    00000023: 	testq	%rdx, %rdx
    00000026: 	sete	%cl
    00000029: 	addq	$0x1, %rax
    0000002d: 	testb	%cl, %r8b
    00000030: 	jne	.Ltmp2232 # Offset: 48
    00000032: 	testq	%rdx, %rdx
    00000035: 	setne	%al
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp2231:
    00000040: 	movl	%edx, %eax
    00000042: 	retq # Offset: 66
DWARF CFI Instructions:
    <empty>
End of Function "_Z12logic_or_optImEbPKT_ib"

Binary Function "_Z9logic_or2ImEbPKT_ib" after disassembly {
  Number      : 322
  State       : disassembled
  Address     : 0x1b8a0
  Size        : 0x87
  MaxSize     : 0x90
  Offset      : 0x1b8a0
  Section     : .text
  Orc Section : .local.text._Z9logic_or2ImEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0321:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movl	%edx, %r8d
    0000000a: 	leaq	(%rdi,%rsi,8), %rcx
    0000000e: 	cmpq	%rcx, %rdi
    00000011: 	jne	.Ltmp2233 # Offset: 17
    00000013: 	jmp	.Ltmp2234 # Offset: 19
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp2239:
    00000018: 	testb	%r8b, %r8b
    0000001b: 	jne	.Ltmp2235 # Offset: 27
.Ltmp2237:
    0000001d: 	cmpq	%rax, %rcx
    00000020: 	je	.Ltmp2236 # Offset: 32
    00000022: 	addq	$0x8, %rax
    00000026: 	cmpq	$0x0, -0x8(%rax)
    0000002b: 	je	.Ltmp2237 # Offset: 43
.Ltmp2242:
    0000002d: 	movq	%rax, %rdi
    00000030: 	movl	$0x1, %r8d
    00000036: 	cmpq	%rdi, %rcx
    00000039: 	je	.Ltmp2238 # Offset: 57
.Ltmp2233:
    0000003b: 	cmpq	$0x0, (%rdi)
    0000003f: 	leaq	0x8(%rdi), %rax
    00000043: 	je	.Ltmp2239 # Offset: 67
.Ltmp2241:
    00000045: 	cmpq	%rax, %rcx
    00000048: 	je	.Ltmp2238 # Offset: 72
    0000004a: 	leaq	0x8(%rax), %rdi
    0000004e: 	movl	$0x1, %r8d
    00000054: 	cmpq	%rdi, %rcx
    00000057: 	jne	.Ltmp2233 # Offset: 87
.Ltmp2238:
    00000059: 	movl	$0x1, %eax
    0000005e: 	retq # Offset: 94
    0000005f: 	nop # Size: 1
.Ltmp2235:
    00000060: 	cmpq	%rax, %rcx
    00000063: 	je	.Ltmp2240 # Offset: 99
    00000065: 	cmpq	$0x0, 0x8(%rdi)
    0000006a: 	leaq	0x10(%rdi), %rax
    0000006e: 	jne	.Ltmp2241 # Offset: 110
    00000070: 	jmp	.Ltmp2242 # Offset: 112
    00000072: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2236:
    00000078: 	xorl	%eax, %eax
    0000007a: 	retq # Offset: 122
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2234:
    00000080: 	movl	%edx, %eax
    00000082: 	retq # Offset: 130
.Ltmp2240:
    00000083: 	movl	%r8d, %eax
    00000086: 	retq # Offset: 134
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or2ImEbPKT_ib"

Binary Function "_Z9logic_or3ImEbPKT_ib" after disassembly {
  Number      : 323
  State       : disassembled
  Address     : 0x1b930
  Size        : 0x94
  MaxSize     : 0xa0
  Offset      : 0x1b930
  Section     : .text
  Orc Section : .local.text._Z9logic_or3ImEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0322:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movl	%edx, %eax
    00000009: 	movl	%esi, %edi
    0000000b: 	cmpl	$0x1, %esi
    0000000e: 	jle	.Ltmp2243 # Offset: 14
    00000014: 	leal	-0x2(%rsi), %r9d
    00000018: 	movq	%r8, %rcx
    0000001b: 	shrl	%r9d
    0000001e: 	movl	%r9d, %edx
    00000021: 	shlq	$0x4, %rdx
    00000025: 	leaq	0x10(%r8,%rdx), %rsi
    0000002a: 	jmp	.Ltmp2244 # Offset: 42
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp2246:
    00000030: 	addq	$0x10, %rcx
    00000034: 	cmpq	%rcx, %rsi
    00000037: 	je	.Ltmp2245 # Offset: 55
.Ltmp2244:
    00000039: 	cmpq	$0x0, (%rcx)
    0000003d: 	setne	%dl
    00000040: 	orb	%dl, %al
    00000042: 	jne	.Ltmp2246 # Offset: 66
    00000044: 	cmpq	$0x0, 0x8(%rcx)
    00000049: 	setne	%al
    0000004c: 	addq	$0x10, %rcx
    00000050: 	cmpq	%rcx, %rsi
    00000053: 	jne	.Ltmp2244 # Offset: 83
.Ltmp2245:
    00000055: 	leal	0x2(%r9,%r9), %edx
.Ltmp2248:
    0000005a: 	cmpl	%edx, %edi
    0000005c: 	jle	.Ltmp2247 # Offset: 92
    0000005e: 	movslq	%edx, %rcx
    00000061: 	cmpq	$0x0, (%r8,%rcx,8)
    00000066: 	leaq	(,%rcx,8), %rsi
    0000006e: 	setne	%cl
    00000071: 	addl	$0x1, %edx
    00000074: 	orl	%ecx, %eax
    00000076: 	cmpl	%edx, %edi
    00000078: 	jle	.Ltmp2247 # Offset: 120
    0000007a: 	cmpq	$0x0, 0x8(%r8,%rsi)
    00000080: 	setne	%dl
    00000083: 	orl	%edx, %eax
.Ltmp2247:
    00000085: 	retq # Offset: 133
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2243:
    00000090: 	xorl	%edx, %edx
    00000092: 	jmp	.Ltmp2248 # Offset: 146
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or3ImEbPKT_ib"

Binary Function "_Z9logic_or4ImEbPKT_ib" after disassembly {
  Number      : 324
  State       : disassembled
  Address     : 0x1b9d0
  Size        : 0xcc
  MaxSize     : 0xd0
  Offset      : 0x1b9d0
  Section     : .text
  Orc Section : .local.text._Z9logic_or4ImEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0323:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	cmpl	$0x3, %esi
    00000009: 	jle	.Ltmp2249 # Offset: 9
    0000000f: 	leal	-0x4(%rsi), %r8d
    00000013: 	movq	%rdi, %rcx
    00000016: 	shrl	$0x2, %r8d
    0000001a: 	movl	%r8d, %edx
    0000001d: 	shlq	$0x5, %rdx
    00000021: 	leaq	0x20(%rdi,%rdx), %rdx
    00000026: 	jmp	.Ltmp2250 # Offset: 38
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2253:
    00000030: 	testb	%al, %al
    00000032: 	jne	.Ltmp2251 # Offset: 50
    00000034: 	cmpq	$0x0, 0x8(%rcx)
    00000039: 	movl	$0x1, %eax
    0000003e: 	jne	.Ltmp2251 # Offset: 62
    00000040: 	cmpq	$0x0, 0x10(%rcx)
    00000045: 	jne	.Ltmp2251 # Offset: 69
    00000047: 	cmpq	$0x0, 0x18(%rcx)
    0000004c: 	setne	%al
.Ltmp2251:
    0000004f: 	addq	$0x20, %rcx
    00000053: 	cmpq	%rcx, %rdx
    00000056: 	je	.Ltmp2252 # Offset: 86
.Ltmp2250:
    00000058: 	cmpq	$0x0, (%rcx)
    0000005c: 	je	.Ltmp2253 # Offset: 92
    0000005e: 	addq	$0x20, %rcx
    00000062: 	movl	$0x1, %eax
    00000067: 	cmpq	%rcx, %rdx
    0000006a: 	jne	.Ltmp2250 # Offset: 106
.Ltmp2252:
    0000006c: 	leal	0x4(,%r8,4), %edx
.Ltmp2255:
    00000074: 	cmpl	%edx, %esi
    00000076: 	jle	.Ltmp2254 # Offset: 118
    00000078: 	movslq	%edx, %rcx
    0000007b: 	cmpq	$0x0, (%rdi,%rcx,8)
    00000080: 	leaq	(,%rcx,8), %r8
    00000088: 	setne	%cl
    0000008b: 	orl	%ecx, %eax
    0000008d: 	leal	0x1(%rdx), %ecx
    00000090: 	cmpl	%ecx, %esi
    00000092: 	jle	.Ltmp2254 # Offset: 146
    00000094: 	cmpq	$0x0, 0x8(%rdi,%r8)
    0000009a: 	setne	%cl
    0000009d: 	orl	%ecx, %eax
    0000009f: 	leal	0x2(%rdx), %ecx
    000000a2: 	cmpl	%esi, %ecx
    000000a4: 	jge	.Ltmp2254 # Offset: 164
    000000a6: 	cmpq	$0x0, 0x10(%rdi,%r8)
    000000ac: 	setne	%cl
    000000af: 	addl	$0x3, %edx
    000000b2: 	orl	%ecx, %eax
    000000b4: 	cmpl	%esi, %edx
    000000b6: 	jge	.Ltmp2254 # Offset: 182
    000000b8: 	cmpq	$0x0, 0x18(%rdi,%r8)
    000000be: 	setne	%dl
    000000c1: 	orl	%edx, %eax
.Ltmp2254:
    000000c3: 	retq # Offset: 195
    000000c4: 	nopl	(%rax) # Size: 4
.Ltmp2249:
    000000c8: 	xorl	%edx, %edx
    000000ca: 	jmp	.Ltmp2255 # Offset: 202
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or4ImEbPKT_ib"

Binary Function "_Z9logic_or5ImEbPKT_ib" after disassembly {
  Number      : 325
  State       : disassembled
  Address     : 0x1baa0
  Size        : 0x94
  MaxSize     : 0xa0
  Offset      : 0x1baa0
  Section     : .text
  Orc Section : .local.text._Z9logic_or5ImEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0324:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%edx, %eax
    00000009: 	movl	%esi, %edi
    0000000b: 	cmpl	$0x1, %esi
    0000000e: 	jle	.Ltmp2256 # Offset: 14
    00000014: 	leal	-0x2(%rsi), %r10d
    00000018: 	movq	%r9, %rcx
    0000001b: 	shrl	%r10d
    0000001e: 	movl	%r10d, %esi
    00000021: 	shlq	$0x4, %rsi
    00000025: 	leaq	0x10(%r9,%rsi), %r8
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2257:
    00000030: 	cmpq	$0x0, (%rcx)
    00000034: 	setne	%sil
    00000038: 	orl	%esi, %eax
    0000003a: 	cmpq	$0x0, 0x8(%rcx)
    0000003f: 	setne	%sil
    00000043: 	addq	$0x10, %rcx
    00000047: 	orl	%esi, %edx
    00000049: 	cmpq	%rcx, %r8
    0000004c: 	jne	.Ltmp2257 # Offset: 76
    0000004e: 	leal	0x2(%r10,%r10), %esi
.Ltmp2260:
    00000053: 	cmpl	%esi, %edi
    00000055: 	jle	.Ltmp2258 # Offset: 85
    00000057: 	subl	$0x1, %edi
    0000005a: 	movslq	%esi, %r8
    0000005d: 	subl	%esi, %edi
    0000005f: 	leaq	(%r9,%r8,8), %rcx
    00000063: 	addq	%r8, %rdi
    00000066: 	leaq	0x8(%r9,%rdi,8), %rdi
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2259:
    00000070: 	cmpq	$0x0, (%rcx)
    00000074: 	setne	%sil
    00000078: 	addq	$0x8, %rcx
    0000007c: 	orl	%esi, %eax
    0000007e: 	cmpq	%rcx, %rdi
    00000081: 	jne	.Ltmp2259 # Offset: 129
.Ltmp2258:
    00000083: 	orl	%edx, %eax
    00000085: 	retq # Offset: 133
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2256:
    00000090: 	xorl	%esi, %esi
    00000092: 	jmp	.Ltmp2260 # Offset: 146
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or5ImEbPKT_ib"

Binary Function "_Z9logic_or6ImEbPKT_ib" after disassembly {
  Number      : 326
  State       : disassembled
  Address     : 0x1bb40
  Size        : 0xb9
  MaxSize     : 0xc0
  Offset      : 0x1bb40
  Section     : .text
  Orc Section : .local.text._Z9logic_or6ImEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0325:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %r10
    00000008: 	movl	%esi, %r9d
    0000000b: 	movl	%edx, %eax
    0000000d: 	cmpl	$0x3, %esi
    00000010: 	jle	.Ltmp2261 # Offset: 16
    00000016: 	leal	-0x4(%rsi), %ebx
    00000019: 	movq	%rdi, %rcx
    0000001c: 	shrl	$0x2, %ebx
    0000001f: 	movl	%ebx, %esi
    00000021: 	shlq	$0x5, %rsi
    00000025: 	leaq	0x20(%rdi,%rsi), %r11
    0000002a: 	movl	%edx, %edi
    0000002c: 	movl	%edx, %esi
    0000002e: 	nop # Size: 2
.Ltmp2262:
    00000030: 	cmpq	$0x0, (%rcx)
    00000034: 	setne	%r8b
    00000038: 	orl	%r8d, %eax
    0000003b: 	cmpq	$0x0, 0x8(%rcx)
    00000040: 	setne	%r8b
    00000044: 	orl	%r8d, %edx
    00000047: 	cmpq	$0x0, 0x10(%rcx)
    0000004c: 	setne	%r8b
    00000050: 	orl	%r8d, %esi
    00000053: 	cmpq	$0x0, 0x18(%rcx)
    00000058: 	setne	%r8b
    0000005c: 	addq	$0x20, %rcx
    00000060: 	orl	%r8d, %edi
    00000063: 	cmpq	%rcx, %r11
    00000066: 	jne	.Ltmp2262 # Offset: 102
    00000068: 	leal	0x4(,%rbx,4), %r8d
.Ltmp2265:
    00000070: 	cmpl	%r8d, %r9d
    00000073: 	jle	.Ltmp2263 # Offset: 115
    00000075: 	subl	$0x1, %r9d
    00000079: 	movslq	%r8d, %r11
    0000007c: 	subl	%r8d, %r9d
    0000007f: 	leaq	(%r10,%r11,8), %rcx
    00000083: 	addq	%r11, %r9
    00000086: 	leaq	0x8(%r10,%r9,8), %r9
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2264:
    00000090: 	cmpq	$0x0, (%rcx)
    00000094: 	setne	%r8b
    00000098: 	addq	$0x8, %rcx
    0000009c: 	orl	%r8d, %eax
    0000009f: 	cmpq	%rcx, %r9
    000000a2: 	jne	.Ltmp2264 # Offset: 162
.Ltmp2263:
    000000a4: 	orl	%edi, %esi
    000000a6: 	orb	%dl, %al
    000000a8: 	popq	%rbx
    000000a9: 	cmovel	%esi, %eax
    000000ac: 	retq # Offset: 172
    000000ad: 	nopl	(%rax) # Size: 3
.Ltmp2261:
    000000b0: 	movl	%edx, %edi
    000000b2: 	movl	%edx, %esi
    000000b4: 	xorl	%r8d, %r8d
    000000b7: 	jmp	.Ltmp2265 # Offset: 183
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or6ImEbPKT_ib"

Binary Function "_Z9logic_or7ImEbPKT_ib" after disassembly {
  Number      : 327
  State       : disassembled
  Address     : 0x1bc00
  Size        : 0x101
  MaxSize     : 0x110
  Offset      : 0x1bc00
  Section     : .text
  Orc Section : .local.text._Z9logic_or7ImEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0326:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movq	%rdi, %r11
    00000009: 	movl	%esi, %r10d
    0000000c: 	movl	%edx, %ecx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	cmpl	$0x3, %esi
    00000017: 	jle	.Ltmp2266 # Offset: 23
    0000001d: 	leal	-0x4(%rsi), %r14d
    00000021: 	movq	%rdi, %rax
    00000024: 	movl	%edx, %r8d
    00000027: 	shrl	$0x2, %r14d
    0000002b: 	movl	%r14d, %esi
    0000002e: 	shlq	$0x5, %rsi
    00000032: 	leaq	0x20(%rdi,%rsi), %r13
    00000037: 	movl	%edx, %edi
    00000039: 	movl	$0x1, %esi
    0000003e: 	nop # Size: 2
.Ltmp2267:
    00000040: 	cmpq	$0x0, (%rax)
    00000044: 	cmovnel	%esi, %ecx
    00000047: 	cmpq	$0x0, 0x8(%rax)
    0000004c: 	cmovnel	%esi, %edx
    0000004f: 	cmpq	$0x0, 0x10(%rax)
    00000054: 	cmovnel	%esi, %edi
    00000057: 	cmpq	$0x0, 0x18(%rax)
    0000005c: 	movl	%ecx, %r9d
    0000005f: 	cmovnel	%esi, %r8d
    00000063: 	addq	$0x20, %rax
    00000067: 	movl	%edx, %ebx
    00000069: 	movl	%edi, %r12d
    0000006c: 	movl	%r8d, %ebp
    0000006f: 	cmpq	%r13, %rax
    00000072: 	jne	.Ltmp2267 # Offset: 114
    00000074: 	leal	0x4(,%r14,4), %edx
.Ltmp2272:
    0000007c: 	cmpl	%edx, %r10d
    0000007f: 	jle	.Ltmp2268 # Offset: 127
    00000081: 	subl	$0x1, %r10d
    00000085: 	movslq	%edx, %rsi
    00000088: 	subl	%edx, %r10d
    0000008b: 	leaq	(%r11,%rsi,8), %rax
    0000008f: 	movl	$0x1, %edx
    00000094: 	addq	%rsi, %r10
    00000097: 	leaq	0x8(%r11,%r10,8), %rsi
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp2269:
    000000a0: 	cmpq	$0x0, (%rax)
    000000a4: 	cmovnel	%edx, %ecx
    000000a7: 	addq	$0x8, %rax
    000000ab: 	movl	%ecx, %r9d
    000000ae: 	cmpq	%rax, %rsi
    000000b1: 	jne	.Ltmp2269 # Offset: 177
.Ltmp2268:
    000000b3: 	testb	%r9b, %r9b
    000000b6: 	jne	.Ltmp2270 # Offset: 182
    000000b8: 	movl	%ebx, %r9d
    000000bb: 	testb	%bl, %bl
    000000bd: 	je	.Ltmp2271 # Offset: 189
.Ltmp2270:
    000000bf: 	popq	%rbx
    000000c0: 	movl	%r9d, %eax
    000000c3: 	popq	%rbp
    000000c4: 	popq	%r12
    000000c6: 	popq	%r13
    000000c8: 	popq	%r14
    000000ca: 	retq # Offset: 202
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2271:
    000000d0: 	testb	%r12b, %r12b
    000000d3: 	movl	%ebp, %r9d
    000000d6: 	popq	%rbx
    000000d7: 	popq	%rbp
    000000d8: 	cmovnel	%r12d, %r9d
    000000dc: 	popq	%r12
    000000de: 	popq	%r13
    000000e0: 	popq	%r14
    000000e2: 	movl	%r9d, %eax
    000000e5: 	retq # Offset: 229
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2266:
    000000f0: 	movl	%edx, %ebx
    000000f2: 	movl	%edx, %r9d
    000000f5: 	movl	%edx, %ebp
    000000f7: 	movl	%edx, %r12d
    000000fa: 	xorl	%edx, %edx
    000000fc: 	jmp	.Ltmp2272 # Offset: 252
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or7ImEbPKT_ib"

Binary Function "_Z9logic_or8ImEbPKT_ib" after disassembly {
  Number      : 328
  State       : disassembled
  Address     : 0x1bd10
  Size        : 0x1a2
  MaxSize     : 0x1b0
  Offset      : 0x1bd10
  Section     : .text
  Orc Section : .local.text._Z9logic_or8ImEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0327:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %eax
    00000008: 	pushq	%r14
    0000000a: 	pushq	%r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	movl	%esi, %ebx
    00000012: 	movl	%esi, -0x8(%rsp)
    00000016: 	movl	%edx, %esi
    00000018: 	movq	%rdi, -0x10(%rsp)
    0000001d: 	cmpl	$0x7, %ebx
    00000020: 	jle	.Ltmp2273 # Offset: 32
    00000026: 	leal	-0x8(%rbx), %ecx
    00000029: 	movq	%rdi, %rdx
    0000002c: 	movl	%eax, %ebp
    0000002e: 	movl	%eax, %ebx
    00000030: 	shrl	$0x3, %ecx
    00000033: 	movl	%eax, %r11d
    00000036: 	movl	%eax, %r10d
    00000039: 	movl	%eax, %r9d
    0000003c: 	movl	%ecx, -0x4(%rsp)
    00000040: 	shlq	$0x6, %rcx
    00000044: 	leaq	0x40(%rdi,%rcx), %rdi
    00000049: 	movl	$0x1, %ecx
    0000004e: 	movq	%rdi, -0x20(%rsp)
    00000053: 	movl	%eax, %edi
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp2274:
    00000058: 	cmpq	$0x0, (%rdx)
    0000005c: 	cmovnel	%ecx, %esi
    0000005f: 	cmpq	$0x0, 0x8(%rdx)
    00000064: 	cmovnel	%ecx, %eax
    00000067: 	cmpq	$0x0, 0x10(%rdx)
    0000006c: 	cmovnel	%ecx, %edi
    0000006f: 	cmpq	$0x0, 0x18(%rdx)
    00000074: 	cmovnel	%ecx, %r9d
    00000078: 	cmpq	$0x0, 0x20(%rdx)
    0000007d: 	movl	%eax, %r12d
    00000080: 	cmovnel	%ecx, %r10d
    00000084: 	cmpq	$0x0, 0x28(%rdx)
    00000089: 	movl	%edi, %r15d
    0000008c: 	cmovnel	%ecx, %r11d
    00000090: 	cmpq	$0x0, 0x30(%rdx)
    00000095: 	movb	%r9b, -0x13(%rsp)
    0000009a: 	cmovnel	%ecx, %ebx
    0000009d: 	cmpq	$0x0, 0x38(%rdx)
    000000a2: 	movl	%r10d, %r8d
    000000a5: 	cmovnel	%ecx, %ebp
    000000a8: 	movl	%r11d, %r13d
    000000ab: 	addq	$0x40, %rdx
    000000af: 	movb	%bl, -0x12(%rsp)
    000000b3: 	movb	%bpl, -0x11(%rsp)
    000000b8: 	cmpq	%rdx, -0x20(%rsp)
    000000bd: 	jne	.Ltmp2274 # Offset: 189
    000000bf: 	movl	-0x4(%rsp), %eax
    000000c3: 	movl	%r12d, %r14d
    000000c6: 	movl	%esi, %r12d
    000000c9: 	leal	0x8(,%rax,8), %ecx
.Ltmp2281:
    000000d0: 	movl	-0x8(%rsp), %ebx
    000000d4: 	cmpl	%ecx, %ebx
    000000d6: 	jle	.Ltmp2275 # Offset: 214
    000000d8: 	subl	$0x1, %ebx
    000000db: 	movslq	%ecx, %rdi
    000000de: 	movq	-0x10(%rsp), %r9
    000000e3: 	movl	%ebx, %edx
    000000e5: 	subl	%ecx, %edx
    000000e7: 	leaq	(%r9,%rdi,8), %rax
    000000eb: 	addq	%rdi, %rdx
    000000ee: 	leaq	0x8(%r9,%rdx,8), %rcx
    000000f3: 	movl	$0x1, %edx
    000000f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2276:
    00000100: 	cmpq	$0x0, (%rax)
    00000104: 	cmovnel	%edx, %esi
    00000107: 	addq	$0x8, %rax
    0000010b: 	movl	%esi, %r12d
    0000010e: 	cmpq	%rcx, %rax
    00000111: 	jne	.Ltmp2276 # Offset: 273
.Ltmp2275:
    00000113: 	testb	%r12b, %r12b
    00000116: 	jne	.Ltmp2277 # Offset: 278
    00000118: 	movl	%r14d, %r12d
    0000011b: 	testb	%r14b, %r14b
    0000011e: 	je	.Ltmp2278 # Offset: 286
.Ltmp2277:
    00000120: 	testb	%r8b, %r8b
    00000123: 	jne	.Ltmp2279 # Offset: 291
    00000125: 	movl	%r13d, %r8d
    00000128: 	testb	%r13b, %r13b
    0000012b: 	je	.Ltmp2280 # Offset: 299
.Ltmp2279:
    0000012d: 	popq	%rbx
    0000012e: 	movl	%r8d, %eax
    00000131: 	popq	%rbp
    00000132: 	popq	%r12
    00000134: 	popq	%r13
    00000136: 	popq	%r14
    00000138: 	popq	%r15
    0000013a: 	retq # Offset: 314
    0000013b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2280:
    00000140: 	movzbl	-0x12(%rsp), %eax
    00000145: 	orb	-0x11(%rsp), %r12b
    0000014a: 	popq	%rbx
    0000014b: 	popq	%rbp
    0000014c: 	testb	%al, %al
    0000014e: 	movl	%eax, %r8d
    00000151: 	cmovel	%r12d, %r8d
    00000155: 	popq	%r12
    00000157: 	popq	%r13
    00000159: 	popq	%r14
    0000015b: 	popq	%r15
    0000015d: 	movl	%r8d, %eax
    00000160: 	retq # Offset: 352
    00000161: 	nopl	(%rax) # Size: 7
.Ltmp2278:
    00000168: 	movzbl	-0x13(%rsp), %r12d
    0000016e: 	testb	%r15b, %r15b
    00000171: 	cmovnel	%r15d, %r12d
    00000175: 	jmp	.Ltmp2277 # Offset: 373
    00000177: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2273:
    00000180: 	movb	%dl, -0x11(%rsp)
    00000184: 	movl	%edx, %r12d
    00000187: 	movl	%edx, %r13d
    0000018a: 	movl	%edx, %r15d
    0000018d: 	movb	%dl, -0x12(%rsp)
    00000191: 	movl	%edx, %r14d
    00000194: 	movl	%edx, %r8d
    00000197: 	xorl	%ecx, %ecx
    00000199: 	movb	%dl, -0x13(%rsp)
    0000019d: 	jmp	.Ltmp2281 # Offset: 413
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or8ImEbPKT_ib"

Binary Function "_Z8bit_and1IlET_PKS0_iS0_" after disassembly {
  Number      : 329
  State       : disassembled
  Address     : 0x1bec0
  Size        : 0x83
  MaxSize     : 0x90
  Offset      : 0x1bec0
  Section     : .text
  Orc Section : .local.text._Z8bit_and1IlET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0328:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%esi, %esi
    00000009: 	jle	.Ltmp2282 # Offset: 9
    0000000b: 	cmpl	$0x1, %esi
    0000000e: 	je	.Ltmp2283 # Offset: 14
    00000010: 	movq	%rdi, %rax
    00000013: 	movl	%esi, %edi
    00000015: 	pcmpeqd	%xmm0, %xmm0
    00000019: 	shrl	%edi
    0000001b: 	subl	$0x1, %edi
    0000001e: 	shlq	$0x4, %rdi
    00000022: 	leaq	0x10(%rcx,%rdi), %rdi
    00000027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2284:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	addq	$0x10, %rax
    00000038: 	pand	%xmm2, %xmm0
    0000003c: 	cmpq	%rax, %rdi
    0000003f: 	jne	.Ltmp2284 # Offset: 63
    00000041: 	movdqa	%xmm0, %xmm1
    00000045: 	psrldq	$0x8, %xmm1
    0000004a: 	pand	%xmm1, %xmm0
    0000004e: 	movq	%xmm0, %rax
    00000053: 	andq	%rdx, %rax
    00000056: 	movl	%esi, %edx
    00000058: 	andl	$-0x2, %edx
    0000005b: 	andl	$0x1, %esi
    0000005e: 	je	.Ltmp2285 # Offset: 94
.Ltmp2286:
    00000060: 	movslq	%edx, %rdx
    00000063: 	andq	(%rcx,%rdx,8), %rax
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2285:
    00000070: 	retq # Offset: 112
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp2282:
    00000078: 	movq	%rdx, %rax
    0000007b: 	retq # Offset: 123
.Ltmp2283:
    0000007c: 	movq	%rdx, %rax
    0000007f: 	xorl	%edx, %edx
    00000081: 	jmp	.Ltmp2286 # Offset: 129
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and1IlET_PKS0_iS0_"

Binary Function "_Z8bit_and2IlET_PKS0_iS0_" after disassembly {
  Number      : 330
  State       : disassembled
  Address     : 0x1bf50
  Size        : 0x91
  MaxSize     : 0xa0
  Offset      : 0x1bf50
  Section     : .text
  Orc Section : .local.text._Z8bit_and2IlET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0329:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movq	%rdi, %rcx
    0000000a: 	shlq	$0x3, %rsi
    0000000e: 	je	.Ltmp2287 # Offset: 14
    00000010: 	movq	%rdi, %rax
    00000013: 	leaq	-0x8(%rsi), %rdi
    00000017: 	shrq	$0x3, %rdi
    0000001b: 	addq	$0x1, %rdi
    0000001f: 	cmpq	$0x8, %rsi
    00000023: 	je	.Ltmp2288 # Offset: 35
    00000025: 	movq	%rdi, %rsi
    00000028: 	pcmpeqd	%xmm0, %xmm0
    0000002c: 	shrq	%rsi
    0000002f: 	shlq	$0x4, %rsi
    00000033: 	addq	%rcx, %rsi
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2289:
    00000040: 	movdqu	(%rax), %xmm2
    00000044: 	addq	$0x10, %rax
    00000048: 	pand	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rsi
    0000004f: 	jne	.Ltmp2289 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	psrldq	$0x8, %xmm1
    0000005a: 	pand	%xmm1, %xmm0
    0000005e: 	movq	%xmm0, %rax
    00000063: 	andq	%rdx, %rax
    00000066: 	movq	%rdi, %rdx
    00000069: 	andq	$-0x2, %rdx
    0000006d: 	leaq	(%rcx,%rdx,8), %rcx
    00000071: 	cmpq	%rdx, %rdi
    00000074: 	je	.Ltmp2290 # Offset: 116
.Ltmp2291:
    00000076: 	andq	(%rcx), %rax
    00000079: 	retq # Offset: 121
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2290:
    00000080: 	retq # Offset: 128
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp2287:
    00000088: 	movq	%rdx, %rax
    0000008b: 	retq # Offset: 139
.Ltmp2288:
    0000008c: 	movq	%rdx, %rax
    0000008f: 	jmp	.Ltmp2291 # Offset: 143
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and2IlET_PKS0_iS0_"

Binary Function "_Z8bit_and3IlET_PKS0_iS0_" after disassembly {
  Number      : 331
  State       : disassembled
  Address     : 0x1bff0
  Size        : 0xb6
  MaxSize     : 0xc0
  Offset      : 0x1bff0
  Section     : .text
  Orc Section : .local.text._Z8bit_and3IlET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0330:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edi
    00000009: 	cmpl	$0x1, %esi
    0000000c: 	jle	.Ltmp2292 # Offset: 12
    00000012: 	leal	-0x2(%rsi), %eax
    00000015: 	movl	%eax, %esi
    00000017: 	shrl	%esi
    00000019: 	addl	$0x1, %esi
    0000001c: 	cmpl	$0x1, %eax
    0000001f: 	jbe	.Ltmp2293 # Offset: 31
    00000025: 	movl	%esi, %r8d
    00000028: 	movq	%rcx, %rax
    0000002b: 	pcmpeqd	%xmm0, %xmm0
    0000002f: 	shrl	%r8d
    00000032: 	subl	$0x1, %r8d
    00000036: 	shlq	$0x5, %r8
    0000003a: 	leaq	0x20(%rcx,%r8), %r8
    0000003f: 	nop # Size: 1
.Ltmp2294:
    00000040: 	movdqu	(%rax), %xmm1
    00000044: 	movdqu	0x10(%rax), %xmm3
    00000049: 	addq	$0x20, %rax
    0000004d: 	movdqa	%xmm1, %xmm2
    00000051: 	punpckhqdq	%xmm3, %xmm1
    00000055: 	punpcklqdq	%xmm3, %xmm2
    00000059: 	pand	%xmm2, %xmm1
    0000005d: 	pand	%xmm1, %xmm0
    00000061: 	cmpq	%rax, %r8
    00000064: 	jne	.Ltmp2294 # Offset: 100
    00000066: 	movdqa	%xmm0, %xmm1
    0000006a: 	movl	%esi, %r8d
    0000006d: 	psrldq	$0x8, %xmm1
    00000072: 	andl	$-0x2, %r8d
    00000076: 	pand	%xmm1, %xmm0
    0000007a: 	movq	%xmm0, %rax
    0000007f: 	andq	%rdx, %rax
    00000082: 	leal	(%r8,%r8), %edx
    00000086: 	cmpl	%r8d, %esi
    00000089: 	je	.Ltmp2295 # Offset: 137
.Ltmp2298:
    0000008b: 	movslq	%edx, %rdx
    0000008e: 	andq	(%rcx,%rdx,8), %rax
    00000092: 	andq	0x8(%rcx,%rdx,8), %rax
.Ltmp2295:
    00000097: 	addl	%esi, %esi
.Ltmp2297:
    00000099: 	cmpl	%edi, %esi
    0000009b: 	jge	.Ltmp2296 # Offset: 155
    0000009d: 	movslq	%esi, %rsi
    000000a0: 	andq	(%rcx,%rsi,8), %rax
.Ltmp2296:
    000000a4: 	retq # Offset: 164
    000000a5: 	nopl	(%rax) # Size: 3
.Ltmp2292:
    000000a8: 	movq	%rdx, %rax
    000000ab: 	xorl	%esi, %esi
    000000ad: 	jmp	.Ltmp2297 # Offset: 173
.Ltmp2293:
    000000af: 	movq	%rdx, %rax
    000000b2: 	xorl	%edx, %edx
    000000b4: 	jmp	.Ltmp2298 # Offset: 180
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and3IlET_PKS0_iS0_"

Binary Function "_Z8bit_and4IlET_PKS0_iS0_" after disassembly {
  Number      : 332
  State       : disassembled
  Address     : 0x1c0b0
  Size        : 0x12e
  MaxSize     : 0x130
  Offset      : 0x1c0b0
  Section     : .text
  Orc Section : .local.text._Z8bit_and4IlET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0331:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edi
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp2299 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %eax
    00000015: 	movl	%eax, %esi
    00000017: 	shrl	$0x2, %esi
    0000001a: 	addl	$0x1, %esi
    0000001d: 	cmpl	$0x3, %eax
    00000020: 	jbe	.Ltmp2300 # Offset: 32
    00000026: 	movl	%esi, %r8d
    00000029: 	movq	%rcx, %rax
    0000002c: 	pcmpeqd	%xmm0, %xmm0
    00000030: 	shrl	%r8d
    00000033: 	subl	$0x1, %r8d
    00000037: 	shlq	$0x6, %r8
    0000003b: 	leaq	0x40(%rcx,%r8), %r8
.Ltmp2301:
    00000040: 	movdqu	(%rax), %xmm1
    00000044: 	movdqu	0x10(%rax), %xmm6
    00000049: 	addq	$0x40, %rax
    0000004d: 	movdqu	-0x20(%rax), %xmm3
    00000052: 	movdqa	%xmm1, %xmm4
    00000056: 	punpckhqdq	%xmm6, %xmm1
    0000005a: 	punpcklqdq	%xmm6, %xmm4
    0000005e: 	movdqu	-0x10(%rax), %xmm6
    00000063: 	movdqa	%xmm3, %xmm5
    00000067: 	movdqa	%xmm1, %xmm2
    0000006b: 	punpckhqdq	%xmm6, %xmm3
    0000006f: 	punpcklqdq	%xmm6, %xmm5
    00000073: 	punpcklqdq	%xmm3, %xmm2
    00000077: 	punpckhqdq	%xmm3, %xmm1
    0000007b: 	pand	%xmm2, %xmm1
    0000007f: 	movdqa	%xmm4, %xmm2
    00000083: 	punpckhqdq	%xmm5, %xmm4
    00000087: 	punpcklqdq	%xmm5, %xmm2
    0000008b: 	pand	%xmm4, %xmm2
    0000008f: 	pand	%xmm2, %xmm1
    00000093: 	pand	%xmm1, %xmm0
    00000097: 	cmpq	%rax, %r8
    0000009a: 	jne	.Ltmp2301 # Offset: 154
    0000009c: 	movdqa	%xmm0, %xmm1
    000000a0: 	movl	%esi, %r8d
    000000a3: 	psrldq	$0x8, %xmm1
    000000a8: 	andl	$-0x2, %r8d
    000000ac: 	pand	%xmm1, %xmm0
    000000b0: 	movq	%xmm0, %rax
    000000b5: 	andq	%rdx, %rax
    000000b8: 	leal	(,%r8,4), %edx
    000000c0: 	cmpl	%esi, %r8d
    000000c3: 	je	.Ltmp2302 # Offset: 195
.Ltmp2305:
    000000c5: 	movslq	%edx, %rdx
    000000c8: 	andq	(%rcx,%rdx,8), %rax
    000000cc: 	andq	0x8(%rcx,%rdx,8), %rax
    000000d1: 	andq	0x10(%rcx,%rdx,8), %rax
    000000d6: 	andq	0x18(%rcx,%rdx,8), %rax
.Ltmp2302:
    000000db: 	leal	(,%rsi,4), %edx
.Ltmp2304:
    000000e2: 	cmpl	%edx, %edi
    000000e4: 	jle	.Ltmp2303 # Offset: 228
    000000e6: 	movslq	%edx, %rsi
    000000e9: 	leaq	(,%rsi,8), %r8
    000000f1: 	andq	(%rcx,%rsi,8), %rax
    000000f5: 	leal	0x1(%rdx), %esi
    000000f8: 	cmpl	%edi, %esi
    000000fa: 	jge	.Ltmp2303 # Offset: 250
    000000fc: 	leal	0x2(%rdx), %esi
    000000ff: 	andq	0x8(%rcx,%r8), %rax
    00000104: 	cmpl	%esi, %edi
    00000106: 	jle	.Ltmp2303 # Offset: 262
    00000108: 	addl	$0x3, %edx
    0000010b: 	andq	0x10(%rcx,%r8), %rax
    00000110: 	cmpl	%edx, %edi
    00000112: 	jle	.Ltmp2303 # Offset: 274
    00000114: 	andq	0x18(%rcx,%r8), %rax
.Ltmp2303:
    00000119: 	retq # Offset: 281
    0000011a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2299:
    00000120: 	movq	%rdx, %rax
    00000123: 	xorl	%edx, %edx
    00000125: 	jmp	.Ltmp2304 # Offset: 293
.Ltmp2300:
    00000127: 	movq	%rdx, %rax
    0000012a: 	xorl	%edx, %edx
    0000012c: 	jmp	.Ltmp2305 # Offset: 300
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and4IlET_PKS0_iS0_"

Binary Function "_Z8bit_and5IlET_PKS0_iS0_" after disassembly {
  Number      : 333
  State       : disassembled
  Address     : 0x1c1e0
  Size        : 0xd7
  MaxSize     : 0xe0
  Offset      : 0x1c1e0
  Section     : .text
  Orc Section : .local.text._Z8bit_and5IlET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0332:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rdx, %rax
    0000000a: 	cmpl	$0x1, %esi
    0000000d: 	jle	.Ltmp2306 # Offset: 13
    00000013: 	leal	-0x2(%rsi), %edx
    00000016: 	movq	%rax, %xmm0
    0000001b: 	xorl	%eax, %eax
    0000001d: 	shrl	%edx
    0000001f: 	punpcklqdq	%xmm0, %xmm0
    00000023: 	addl	$0x1, %edx
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2307:
    00000030: 	movq	%rax, %rcx
    00000033: 	addq	$0x1, %rax
    00000037: 	shlq	$0x4, %rcx
    0000003b: 	movdqu	(%r8,%rcx), %xmm1
    00000041: 	pand	%xmm1, %xmm0
    00000045: 	cmpl	%eax, %edx
    00000047: 	ja	.Ltmp2307 # Offset: 71
    00000049: 	movhlps	%xmm0, %xmm2
    0000004c: 	movq	%xmm0, %rax
    00000051: 	addl	%edx, %edx
    00000053: 	movq	%xmm2, %rdi
.Ltmp2312:
    00000058: 	cmpl	%edx, %esi
    0000005a: 	jle	.Ltmp2308 # Offset: 90
    0000005c: 	subl	%edx, %esi
    0000005e: 	cmpl	$0x1, %esi
    00000061: 	je	.Ltmp2309 # Offset: 97
    00000063: 	movslq	%edx, %rcx
    00000066: 	pcmpeqd	%xmm0, %xmm0
    0000006a: 	leaq	(%r8,%rcx,8), %r9
    0000006e: 	movl	%esi, %ecx
    00000070: 	shrl	%ecx
    00000072: 	leal	-0x1(%rcx), %r10d
    00000076: 	leaq	0x10(%r9), %rcx
    0000007a: 	shlq	$0x4, %r10
    0000007e: 	addq	%rcx, %r10
    00000081: 	jmp	.Ltmp2310 # Offset: 129
    00000083: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2311:
    00000088: 	addq	$0x10, %rcx
.Ltmp2310:
    0000008c: 	movdqu	(%r9), %xmm1
    00000091: 	movq	%rcx, %r9
    00000094: 	pand	%xmm1, %xmm0
    00000098: 	cmpq	%r10, %rcx
    0000009b: 	jne	.Ltmp2311 # Offset: 155
    0000009d: 	movdqa	%xmm0, %xmm1
    000000a1: 	psrldq	$0x8, %xmm1
    000000a6: 	pand	%xmm1, %xmm0
    000000aa: 	movq	%xmm0, %rcx
    000000af: 	andq	%rcx, %rax
    000000b2: 	movl	%esi, %ecx
    000000b4: 	andl	$-0x2, %ecx
    000000b7: 	addl	%ecx, %edx
    000000b9: 	cmpl	%esi, %ecx
    000000bb: 	je	.Ltmp2308 # Offset: 187
.Ltmp2309:
    000000bd: 	movslq	%edx, %rdx
    000000c0: 	andq	(%r8,%rdx,8), %rax
.Ltmp2308:
    000000c4: 	andq	%rdi, %rax
    000000c7: 	retq # Offset: 199
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2306:
    000000d0: 	movq	%rdx, %rdi
    000000d3: 	xorl	%edx, %edx
    000000d5: 	jmp	.Ltmp2312 # Offset: 213
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and5IlET_PKS0_iS0_"

Binary Function "_Z8bit_and6IlET_PKS0_iS0_" after disassembly {
  Number      : 334
  State       : disassembled
  Address     : 0x1c2c0
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x1c2c0
  Section     : .text
  Orc Section : .local.text._Z8bit_and6IlET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0333:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movq	%rdx, %rax
    0000000a: 	cmpl	$0x3, %esi
    0000000d: 	jle	.Ltmp2313 # Offset: 13
    00000013: 	movq	%rdx, %xmm0
    00000018: 	leal	-0x4(%rsi), %ecx
    0000001b: 	movq	%rdi, %rax
    0000001e: 	xorl	%edx, %edx
    00000020: 	shrl	$0x2, %ecx
    00000023: 	punpcklqdq	%xmm0, %xmm0
    00000027: 	addl	$0x1, %ecx
    0000002a: 	movdqa	%xmm0, %xmm1
    0000002e: 	nop # Size: 2
.Ltmp2314:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	movdqu	0x10(%rax), %xmm3
    00000039: 	addl	$0x1, %edx
    0000003c: 	addq	$0x20, %rax
    00000040: 	pand	%xmm2, %xmm0
    00000044: 	pand	%xmm3, %xmm1
    00000048: 	cmpl	%edx, %ecx
    0000004a: 	ja	.Ltmp2314 # Offset: 74
    0000004c: 	movhlps	%xmm0, %xmm4
    0000004f: 	movq	%xmm1, %rsi
    00000054: 	movhlps	%xmm1, %xmm5
    00000057: 	shll	$0x2, %ecx
    0000005a: 	movq	%xmm4, %rdx
    0000005f: 	movq	%xmm0, %rax
    00000064: 	andq	%rsi, %rdx
    00000067: 	movq	%xmm5, %rsi
    0000006c: 	andq	%rsi, %rdx
.Ltmp2319:
    0000006f: 	cmpl	%ecx, %r8d
    00000072: 	jle	.Ltmp2315 # Offset: 114
    00000074: 	movl	%r8d, %r9d
    00000077: 	subl	%ecx, %r9d
    0000007a: 	cmpl	$0x1, %r9d
    0000007e: 	je	.Ltmp2316 # Offset: 126
    00000080: 	movslq	%ecx, %rsi
    00000083: 	pcmpeqd	%xmm0, %xmm0
    00000087: 	leaq	(%rdi,%rsi,8), %r8
    0000008b: 	movl	%r9d, %esi
    0000008e: 	shrl	%esi
    00000090: 	leal	-0x1(%rsi), %r10d
    00000094: 	leaq	0x10(%r8), %rsi
    00000098: 	shlq	$0x4, %r10
    0000009c: 	addq	%rsi, %r10
    0000009f: 	jmp	.Ltmp2317 # Offset: 159
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp2318:
    000000a8: 	addq	$0x10, %rsi
.Ltmp2317:
    000000ac: 	movdqu	(%r8), %xmm1
    000000b1: 	movq	%rsi, %r8
    000000b4: 	pand	%xmm1, %xmm0
    000000b8: 	cmpq	%rsi, %r10
    000000bb: 	jne	.Ltmp2318 # Offset: 187
    000000bd: 	movdqa	%xmm0, %xmm1
    000000c1: 	psrldq	$0x8, %xmm1
    000000c6: 	pand	%xmm1, %xmm0
    000000ca: 	movq	%xmm0, %rsi
    000000cf: 	andq	%rsi, %rax
    000000d2: 	movl	%r9d, %esi
    000000d5: 	andl	$-0x2, %esi
    000000d8: 	addl	%esi, %ecx
    000000da: 	cmpl	%r9d, %esi
    000000dd: 	je	.Ltmp2315 # Offset: 221
.Ltmp2316:
    000000df: 	movslq	%ecx, %rcx
    000000e2: 	andq	(%rdi,%rcx,8), %rax
.Ltmp2315:
    000000e6: 	andq	%rdx, %rax
    000000e9: 	retq # Offset: 233
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2313:
    000000f0: 	xorl	%ecx, %ecx
    000000f2: 	jmp	.Ltmp2319 # Offset: 242
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and6IlET_PKS0_iS0_"

Binary Function "_Z8bit_and7IlET_PKS0_iS0_" after disassembly {
  Number      : 335
  State       : disassembled
  Address     : 0x1c3c0
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x1c3c0
  Section     : .text
  Orc Section : .local.text._Z8bit_and7IlET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0334:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movq	%rdx, %rax
    0000000a: 	cmpl	$0x3, %esi
    0000000d: 	jle	.Ltmp2320 # Offset: 13
    00000013: 	movq	%rdx, %xmm0
    00000018: 	leal	-0x4(%rsi), %ecx
    0000001b: 	movq	%rdi, %rax
    0000001e: 	xorl	%edx, %edx
    00000020: 	shrl	$0x2, %ecx
    00000023: 	punpcklqdq	%xmm0, %xmm0
    00000027: 	addl	$0x1, %ecx
    0000002a: 	movdqa	%xmm0, %xmm1
    0000002e: 	nop # Size: 2
.Ltmp2321:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	movdqu	0x10(%rax), %xmm3
    00000039: 	addl	$0x1, %edx
    0000003c: 	addq	$0x20, %rax
    00000040: 	pand	%xmm2, %xmm0
    00000044: 	pand	%xmm3, %xmm1
    00000048: 	cmpl	%edx, %ecx
    0000004a: 	ja	.Ltmp2321 # Offset: 74
    0000004c: 	movhlps	%xmm0, %xmm4
    0000004f: 	movq	%xmm1, %rsi
    00000054: 	movhlps	%xmm1, %xmm5
    00000057: 	shll	$0x2, %ecx
    0000005a: 	movq	%xmm4, %rdx
    0000005f: 	movq	%xmm0, %rax
    00000064: 	andq	%rsi, %rdx
    00000067: 	movq	%xmm5, %rsi
    0000006c: 	andq	%rsi, %rdx
.Ltmp2326:
    0000006f: 	cmpl	%ecx, %r8d
    00000072: 	jle	.Ltmp2322 # Offset: 114
    00000074: 	movl	%r8d, %r9d
    00000077: 	subl	%ecx, %r9d
    0000007a: 	cmpl	$0x1, %r9d
    0000007e: 	je	.Ltmp2323 # Offset: 126
    00000080: 	movslq	%ecx, %rsi
    00000083: 	pcmpeqd	%xmm0, %xmm0
    00000087: 	leaq	(%rdi,%rsi,8), %r8
    0000008b: 	movl	%r9d, %esi
    0000008e: 	shrl	%esi
    00000090: 	leal	-0x1(%rsi), %r10d
    00000094: 	leaq	0x10(%r8), %rsi
    00000098: 	shlq	$0x4, %r10
    0000009c: 	addq	%rsi, %r10
    0000009f: 	jmp	.Ltmp2324 # Offset: 159
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp2325:
    000000a8: 	addq	$0x10, %rsi
.Ltmp2324:
    000000ac: 	movdqu	(%r8), %xmm1
    000000b1: 	movq	%rsi, %r8
    000000b4: 	pand	%xmm1, %xmm0
    000000b8: 	cmpq	%rsi, %r10
    000000bb: 	jne	.Ltmp2325 # Offset: 187
    000000bd: 	movdqa	%xmm0, %xmm1
    000000c1: 	psrldq	$0x8, %xmm1
    000000c6: 	pand	%xmm1, %xmm0
    000000ca: 	movq	%xmm0, %rsi
    000000cf: 	andq	%rsi, %rax
    000000d2: 	movl	%r9d, %esi
    000000d5: 	andl	$-0x2, %esi
    000000d8: 	addl	%esi, %ecx
    000000da: 	cmpl	%r9d, %esi
    000000dd: 	je	.Ltmp2322 # Offset: 221
.Ltmp2323:
    000000df: 	movslq	%ecx, %rcx
    000000e2: 	andq	(%rdi,%rcx,8), %rax
.Ltmp2322:
    000000e6: 	andq	%rdx, %rax
    000000e9: 	retq # Offset: 233
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2320:
    000000f0: 	xorl	%ecx, %ecx
    000000f2: 	jmp	.Ltmp2326 # Offset: 242
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and7IlET_PKS0_iS0_"

Binary Function "_Z8bit_and8IlET_PKS0_iS0_" after disassembly {
  Number      : 336
  State       : disassembled
  Address     : 0x1c4c0
  Size        : 0x11c
  MaxSize     : 0x120
  Offset      : 0x1c4c0
  Section     : .text
  Orc Section : .local.text._Z8bit_and8IlET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0335:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movq	%rdx, %rax
    0000000a: 	cmpl	$0x7, %esi
    0000000d: 	jle	.Ltmp2327 # Offset: 13
    00000013: 	leal	-0x8(%rsi), %esi
    00000016: 	movq	%rdx, %xmm4
    0000001b: 	movq	%rdi, %rax
    0000001e: 	xorl	%ecx, %ecx
    00000020: 	punpcklqdq	%xmm4, %xmm4
    00000024: 	shrl	$0x3, %esi
    00000027: 	movdqa	%xmm4, %xmm3
    0000002b: 	movdqa	%xmm4, %xmm2
    0000002f: 	movdqa	%xmm4, %xmm1
    00000033: 	addl	$0x1, %esi
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2328:
    00000040: 	movdqu	(%rax), %xmm5
    00000044: 	movdqu	0x20(%rax), %xmm7
    00000049: 	addl	$0x1, %ecx
    0000004c: 	addq	$0x40, %rax
    00000050: 	movdqu	-0x30(%rax), %xmm6
    00000055: 	pand	%xmm5, %xmm4
    00000059: 	pand	%xmm7, %xmm2
    0000005d: 	movdqu	-0x10(%rax), %xmm5
    00000062: 	pand	%xmm6, %xmm1
    00000066: 	movdqa	%xmm2, %xmm0
    0000006a: 	pand	%xmm5, %xmm3
    0000006e: 	pand	%xmm1, %xmm0
    00000072: 	pand	%xmm3, %xmm0
    00000076: 	movhlps	%xmm0, %xmm6
    00000079: 	movq	%xmm0, %r9
    0000007e: 	movq	%xmm6, %rdx
    00000083: 	cmpl	%ecx, %esi
    00000085: 	ja	.Ltmp2328 # Offset: 133
    00000087: 	movhlps	%xmm4, %xmm7
    0000008a: 	andq	%r9, %rdx
    0000008d: 	movq	%xmm4, %rax
    00000092: 	shll	$0x3, %esi
    00000095: 	movq	%xmm7, %rcx
    0000009a: 	andq	%rcx, %rdx
.Ltmp2333:
    0000009d: 	cmpl	%esi, %r8d
    000000a0: 	jle	.Ltmp2329 # Offset: 160
    000000a2: 	movl	%r8d, %r9d
    000000a5: 	subl	%esi, %r9d
    000000a8: 	cmpl	$0x1, %r9d
    000000ac: 	je	.Ltmp2330 # Offset: 172
    000000ae: 	movslq	%esi, %rcx
    000000b1: 	pcmpeqd	%xmm0, %xmm0
    000000b5: 	leaq	(%rdi,%rcx,8), %r8
    000000b9: 	movl	%r9d, %ecx
    000000bc: 	shrl	%ecx
    000000be: 	leal	-0x1(%rcx), %r10d
    000000c2: 	leaq	0x10(%r8), %rcx
    000000c6: 	shlq	$0x4, %r10
    000000ca: 	addq	%rcx, %r10
    000000cd: 	jmp	.Ltmp2331 # Offset: 205
    000000cf: 	nop # Size: 1
.Ltmp2332:
    000000d0: 	addq	$0x10, %rcx
.Ltmp2331:
    000000d4: 	movdqu	(%r8), %xmm1
    000000d9: 	movq	%rcx, %r8
    000000dc: 	pand	%xmm1, %xmm0
    000000e0: 	cmpq	%r10, %rcx
    000000e3: 	jne	.Ltmp2332 # Offset: 227
    000000e5: 	movdqa	%xmm0, %xmm1
    000000e9: 	psrldq	$0x8, %xmm1
    000000ee: 	pand	%xmm1, %xmm0
    000000f2: 	movq	%xmm0, %rcx
    000000f7: 	andq	%rcx, %rax
    000000fa: 	movl	%r9d, %ecx
    000000fd: 	andl	$-0x2, %ecx
    00000100: 	addl	%ecx, %esi
    00000102: 	cmpl	%r9d, %ecx
    00000105: 	je	.Ltmp2329 # Offset: 261
.Ltmp2330:
    00000107: 	movslq	%esi, %rcx
    0000010a: 	andq	(%rdi,%rcx,8), %rax
.Ltmp2329:
    0000010e: 	andq	%rdx, %rax
    00000111: 	retq # Offset: 273
    00000112: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2327:
    00000118: 	xorl	%esi, %esi
    0000011a: 	jmp	.Ltmp2333 # Offset: 282
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_and8IlET_PKS0_iS0_"

Binary Function "_Z7bit_or1IlET_PKS0_iS0_" after disassembly {
  Number      : 337
  State       : disassembled
  Address     : 0x1c5e0
  Size        : 0x83
  MaxSize     : 0x90
  Offset      : 0x1c5e0
  Section     : .text
  Orc Section : .local.text._Z7bit_or1IlET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0336:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%esi, %esi
    00000009: 	jle	.Ltmp2334 # Offset: 9
    0000000b: 	cmpl	$0x1, %esi
    0000000e: 	je	.Ltmp2335 # Offset: 14
    00000010: 	movq	%rdi, %rax
    00000013: 	movl	%esi, %edi
    00000015: 	pxor	%xmm0, %xmm0
    00000019: 	shrl	%edi
    0000001b: 	subl	$0x1, %edi
    0000001e: 	shlq	$0x4, %rdi
    00000022: 	leaq	0x10(%rcx,%rdi), %rdi
    00000027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2336:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	addq	$0x10, %rax
    00000038: 	por	%xmm2, %xmm0
    0000003c: 	cmpq	%rax, %rdi
    0000003f: 	jne	.Ltmp2336 # Offset: 63
    00000041: 	movdqa	%xmm0, %xmm1
    00000045: 	psrldq	$0x8, %xmm1
    0000004a: 	por	%xmm1, %xmm0
    0000004e: 	movq	%xmm0, %rax
    00000053: 	orq	%rdx, %rax
    00000056: 	movl	%esi, %edx
    00000058: 	andl	$-0x2, %edx
    0000005b: 	andl	$0x1, %esi
    0000005e: 	je	.Ltmp2337 # Offset: 94
.Ltmp2338:
    00000060: 	movslq	%edx, %rdx
    00000063: 	orq	(%rcx,%rdx,8), %rax
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2337:
    00000070: 	retq # Offset: 112
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp2334:
    00000078: 	movq	%rdx, %rax
    0000007b: 	retq # Offset: 123
.Ltmp2335:
    0000007c: 	movq	%rdx, %rax
    0000007f: 	xorl	%edx, %edx
    00000081: 	jmp	.Ltmp2338 # Offset: 129
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or1IlET_PKS0_iS0_"

Binary Function "_Z7bit_or2IlET_PKS0_iS0_" after disassembly {
  Number      : 338
  State       : disassembled
  Address     : 0x1c670
  Size        : 0x91
  MaxSize     : 0xa0
  Offset      : 0x1c670
  Section     : .text
  Orc Section : .local.text._Z7bit_or2IlET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0337:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movq	%rdi, %rcx
    0000000a: 	shlq	$0x3, %rsi
    0000000e: 	je	.Ltmp2339 # Offset: 14
    00000010: 	movq	%rdi, %rax
    00000013: 	leaq	-0x8(%rsi), %rdi
    00000017: 	shrq	$0x3, %rdi
    0000001b: 	addq	$0x1, %rdi
    0000001f: 	cmpq	$0x8, %rsi
    00000023: 	je	.Ltmp2340 # Offset: 35
    00000025: 	movq	%rdi, %rsi
    00000028: 	pxor	%xmm0, %xmm0
    0000002c: 	shrq	%rsi
    0000002f: 	shlq	$0x4, %rsi
    00000033: 	addq	%rcx, %rsi
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2341:
    00000040: 	movdqu	(%rax), %xmm2
    00000044: 	addq	$0x10, %rax
    00000048: 	por	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rsi
    0000004f: 	jne	.Ltmp2341 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	psrldq	$0x8, %xmm1
    0000005a: 	por	%xmm1, %xmm0
    0000005e: 	movq	%xmm0, %rax
    00000063: 	orq	%rdx, %rax
    00000066: 	movq	%rdi, %rdx
    00000069: 	andq	$-0x2, %rdx
    0000006d: 	leaq	(%rcx,%rdx,8), %rcx
    00000071: 	cmpq	%rdx, %rdi
    00000074: 	je	.Ltmp2342 # Offset: 116
.Ltmp2343:
    00000076: 	orq	(%rcx), %rax
    00000079: 	retq # Offset: 121
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2342:
    00000080: 	retq # Offset: 128
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp2339:
    00000088: 	movq	%rdx, %rax
    0000008b: 	retq # Offset: 139
.Ltmp2340:
    0000008c: 	movq	%rdx, %rax
    0000008f: 	jmp	.Ltmp2343 # Offset: 143
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or2IlET_PKS0_iS0_"

Binary Function "_Z7bit_or3IlET_PKS0_iS0_" after disassembly {
  Number      : 339
  State       : disassembled
  Address     : 0x1c710
  Size        : 0xb6
  MaxSize     : 0xc0
  Offset      : 0x1c710
  Section     : .text
  Orc Section : .local.text._Z7bit_or3IlET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0338:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edi
    00000009: 	cmpl	$0x1, %esi
    0000000c: 	jle	.Ltmp2344 # Offset: 12
    00000012: 	leal	-0x2(%rsi), %eax
    00000015: 	movl	%eax, %esi
    00000017: 	shrl	%esi
    00000019: 	addl	$0x1, %esi
    0000001c: 	cmpl	$0x1, %eax
    0000001f: 	jbe	.Ltmp2345 # Offset: 31
    00000025: 	movl	%esi, %r8d
    00000028: 	movq	%rcx, %rax
    0000002b: 	pxor	%xmm0, %xmm0
    0000002f: 	shrl	%r8d
    00000032: 	subl	$0x1, %r8d
    00000036: 	shlq	$0x5, %r8
    0000003a: 	leaq	0x20(%rcx,%r8), %r8
    0000003f: 	nop # Size: 1
.Ltmp2346:
    00000040: 	movdqu	(%rax), %xmm1
    00000044: 	movdqu	0x10(%rax), %xmm3
    00000049: 	addq	$0x20, %rax
    0000004d: 	movdqa	%xmm1, %xmm2
    00000051: 	punpckhqdq	%xmm3, %xmm1
    00000055: 	punpcklqdq	%xmm3, %xmm2
    00000059: 	por	%xmm2, %xmm1
    0000005d: 	por	%xmm1, %xmm0
    00000061: 	cmpq	%rax, %r8
    00000064: 	jne	.Ltmp2346 # Offset: 100
    00000066: 	movdqa	%xmm0, %xmm1
    0000006a: 	movl	%esi, %r8d
    0000006d: 	psrldq	$0x8, %xmm1
    00000072: 	andl	$-0x2, %r8d
    00000076: 	por	%xmm1, %xmm0
    0000007a: 	movq	%xmm0, %rax
    0000007f: 	orq	%rdx, %rax
    00000082: 	leal	(%r8,%r8), %edx
    00000086: 	cmpl	%r8d, %esi
    00000089: 	je	.Ltmp2347 # Offset: 137
.Ltmp2350:
    0000008b: 	movslq	%edx, %rdx
    0000008e: 	orq	(%rcx,%rdx,8), %rax
    00000092: 	orq	0x8(%rcx,%rdx,8), %rax
.Ltmp2347:
    00000097: 	addl	%esi, %esi
.Ltmp2349:
    00000099: 	cmpl	%edi, %esi
    0000009b: 	jge	.Ltmp2348 # Offset: 155
    0000009d: 	movslq	%esi, %rsi
    000000a0: 	orq	(%rcx,%rsi,8), %rax
.Ltmp2348:
    000000a4: 	retq # Offset: 164
    000000a5: 	nopl	(%rax) # Size: 3
.Ltmp2344:
    000000a8: 	movq	%rdx, %rax
    000000ab: 	xorl	%esi, %esi
    000000ad: 	jmp	.Ltmp2349 # Offset: 173
.Ltmp2345:
    000000af: 	movq	%rdx, %rax
    000000b2: 	xorl	%edx, %edx
    000000b4: 	jmp	.Ltmp2350 # Offset: 180
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or3IlET_PKS0_iS0_"

Binary Function "_Z7bit_or4IlET_PKS0_iS0_" after disassembly {
  Number      : 340
  State       : disassembled
  Address     : 0x1c7d0
  Size        : 0x12e
  MaxSize     : 0x130
  Offset      : 0x1c7d0
  Section     : .text
  Orc Section : .local.text._Z7bit_or4IlET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0339:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edi
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp2351 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %eax
    00000015: 	movl	%eax, %esi
    00000017: 	shrl	$0x2, %esi
    0000001a: 	addl	$0x1, %esi
    0000001d: 	cmpl	$0x3, %eax
    00000020: 	jbe	.Ltmp2352 # Offset: 32
    00000026: 	movl	%esi, %r8d
    00000029: 	movq	%rcx, %rax
    0000002c: 	pxor	%xmm0, %xmm0
    00000030: 	shrl	%r8d
    00000033: 	subl	$0x1, %r8d
    00000037: 	shlq	$0x6, %r8
    0000003b: 	leaq	0x40(%rcx,%r8), %r8
.Ltmp2353:
    00000040: 	movdqu	(%rax), %xmm1
    00000044: 	movdqu	0x10(%rax), %xmm6
    00000049: 	addq	$0x40, %rax
    0000004d: 	movdqu	-0x20(%rax), %xmm3
    00000052: 	movdqa	%xmm1, %xmm4
    00000056: 	punpckhqdq	%xmm6, %xmm1
    0000005a: 	punpcklqdq	%xmm6, %xmm4
    0000005e: 	movdqu	-0x10(%rax), %xmm6
    00000063: 	movdqa	%xmm3, %xmm5
    00000067: 	movdqa	%xmm1, %xmm2
    0000006b: 	punpckhqdq	%xmm6, %xmm3
    0000006f: 	punpcklqdq	%xmm6, %xmm5
    00000073: 	punpcklqdq	%xmm3, %xmm2
    00000077: 	punpckhqdq	%xmm3, %xmm1
    0000007b: 	por	%xmm2, %xmm1
    0000007f: 	movdqa	%xmm4, %xmm2
    00000083: 	punpckhqdq	%xmm5, %xmm4
    00000087: 	punpcklqdq	%xmm5, %xmm2
    0000008b: 	por	%xmm4, %xmm2
    0000008f: 	por	%xmm2, %xmm1
    00000093: 	por	%xmm1, %xmm0
    00000097: 	cmpq	%rax, %r8
    0000009a: 	jne	.Ltmp2353 # Offset: 154
    0000009c: 	movdqa	%xmm0, %xmm1
    000000a0: 	movl	%esi, %r8d
    000000a3: 	psrldq	$0x8, %xmm1
    000000a8: 	andl	$-0x2, %r8d
    000000ac: 	por	%xmm1, %xmm0
    000000b0: 	movq	%xmm0, %rax
    000000b5: 	orq	%rdx, %rax
    000000b8: 	leal	(,%r8,4), %edx
    000000c0: 	cmpl	%esi, %r8d
    000000c3: 	je	.Ltmp2354 # Offset: 195
.Ltmp2357:
    000000c5: 	movslq	%edx, %rdx
    000000c8: 	orq	(%rcx,%rdx,8), %rax
    000000cc: 	orq	0x8(%rcx,%rdx,8), %rax
    000000d1: 	orq	0x10(%rcx,%rdx,8), %rax
    000000d6: 	orq	0x18(%rcx,%rdx,8), %rax
.Ltmp2354:
    000000db: 	leal	(,%rsi,4), %edx
.Ltmp2356:
    000000e2: 	cmpl	%edx, %edi
    000000e4: 	jle	.Ltmp2355 # Offset: 228
    000000e6: 	movslq	%edx, %rsi
    000000e9: 	leaq	(,%rsi,8), %r8
    000000f1: 	orq	(%rcx,%rsi,8), %rax
    000000f5: 	leal	0x1(%rdx), %esi
    000000f8: 	cmpl	%edi, %esi
    000000fa: 	jge	.Ltmp2355 # Offset: 250
    000000fc: 	leal	0x2(%rdx), %esi
    000000ff: 	orq	0x8(%rcx,%r8), %rax
    00000104: 	cmpl	%esi, %edi
    00000106: 	jle	.Ltmp2355 # Offset: 262
    00000108: 	addl	$0x3, %edx
    0000010b: 	orq	0x10(%rcx,%r8), %rax
    00000110: 	cmpl	%edx, %edi
    00000112: 	jle	.Ltmp2355 # Offset: 274
    00000114: 	orq	0x18(%rcx,%r8), %rax
.Ltmp2355:
    00000119: 	retq # Offset: 281
    0000011a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2351:
    00000120: 	movq	%rdx, %rax
    00000123: 	xorl	%edx, %edx
    00000125: 	jmp	.Ltmp2356 # Offset: 293
.Ltmp2352:
    00000127: 	movq	%rdx, %rax
    0000012a: 	xorl	%edx, %edx
    0000012c: 	jmp	.Ltmp2357 # Offset: 300
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or4IlET_PKS0_iS0_"

Binary Function "_Z7bit_or5IlET_PKS0_iS0_" after disassembly {
  Number      : 341
  State       : disassembled
  Address     : 0x1c900
  Size        : 0xd7
  MaxSize     : 0xe0
  Offset      : 0x1c900
  Section     : .text
  Orc Section : .local.text._Z7bit_or5IlET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0340:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rdx, %rax
    0000000a: 	cmpl	$0x1, %esi
    0000000d: 	jle	.Ltmp2358 # Offset: 13
    00000013: 	leal	-0x2(%rsi), %edx
    00000016: 	movq	%rax, %xmm0
    0000001b: 	xorl	%eax, %eax
    0000001d: 	shrl	%edx
    0000001f: 	punpcklqdq	%xmm0, %xmm0
    00000023: 	addl	$0x1, %edx
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2359:
    00000030: 	movq	%rax, %rcx
    00000033: 	addq	$0x1, %rax
    00000037: 	shlq	$0x4, %rcx
    0000003b: 	movdqu	(%r8,%rcx), %xmm1
    00000041: 	por	%xmm1, %xmm0
    00000045: 	cmpl	%eax, %edx
    00000047: 	ja	.Ltmp2359 # Offset: 71
    00000049: 	movhlps	%xmm0, %xmm2
    0000004c: 	movq	%xmm0, %rax
    00000051: 	addl	%edx, %edx
    00000053: 	movq	%xmm2, %rdi
.Ltmp2364:
    00000058: 	cmpl	%edx, %esi
    0000005a: 	jle	.Ltmp2360 # Offset: 90
    0000005c: 	subl	%edx, %esi
    0000005e: 	cmpl	$0x1, %esi
    00000061: 	je	.Ltmp2361 # Offset: 97
    00000063: 	movslq	%edx, %rcx
    00000066: 	pxor	%xmm0, %xmm0
    0000006a: 	leaq	(%r8,%rcx,8), %r9
    0000006e: 	movl	%esi, %ecx
    00000070: 	shrl	%ecx
    00000072: 	leal	-0x1(%rcx), %r10d
    00000076: 	leaq	0x10(%r9), %rcx
    0000007a: 	shlq	$0x4, %r10
    0000007e: 	addq	%rcx, %r10
    00000081: 	jmp	.Ltmp2362 # Offset: 129
    00000083: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2363:
    00000088: 	addq	$0x10, %rcx
.Ltmp2362:
    0000008c: 	movdqu	(%r9), %xmm1
    00000091: 	movq	%rcx, %r9
    00000094: 	por	%xmm1, %xmm0
    00000098: 	cmpq	%r10, %rcx
    0000009b: 	jne	.Ltmp2363 # Offset: 155
    0000009d: 	movdqa	%xmm0, %xmm1
    000000a1: 	psrldq	$0x8, %xmm1
    000000a6: 	por	%xmm1, %xmm0
    000000aa: 	movq	%xmm0, %rcx
    000000af: 	orq	%rcx, %rax
    000000b2: 	movl	%esi, %ecx
    000000b4: 	andl	$-0x2, %ecx
    000000b7: 	addl	%ecx, %edx
    000000b9: 	cmpl	%esi, %ecx
    000000bb: 	je	.Ltmp2360 # Offset: 187
.Ltmp2361:
    000000bd: 	movslq	%edx, %rdx
    000000c0: 	orq	(%r8,%rdx,8), %rax
.Ltmp2360:
    000000c4: 	orq	%rdi, %rax
    000000c7: 	retq # Offset: 199
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2358:
    000000d0: 	movq	%rdx, %rdi
    000000d3: 	xorl	%edx, %edx
    000000d5: 	jmp	.Ltmp2364 # Offset: 213
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or5IlET_PKS0_iS0_"

Binary Function "_Z7bit_or6IlET_PKS0_iS0_" after disassembly {
  Number      : 342
  State       : disassembled
  Address     : 0x1c9e0
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x1c9e0
  Section     : .text
  Orc Section : .local.text._Z7bit_or6IlET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0341:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movq	%rdx, %rax
    0000000a: 	cmpl	$0x3, %esi
    0000000d: 	jle	.Ltmp2365 # Offset: 13
    00000013: 	movq	%rdx, %xmm0
    00000018: 	leal	-0x4(%rsi), %ecx
    0000001b: 	movq	%rdi, %rax
    0000001e: 	xorl	%edx, %edx
    00000020: 	shrl	$0x2, %ecx
    00000023: 	punpcklqdq	%xmm0, %xmm0
    00000027: 	addl	$0x1, %ecx
    0000002a: 	movdqa	%xmm0, %xmm1
    0000002e: 	nop # Size: 2
.Ltmp2366:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	movdqu	0x10(%rax), %xmm3
    00000039: 	addl	$0x1, %edx
    0000003c: 	addq	$0x20, %rax
    00000040: 	por	%xmm2, %xmm0
    00000044: 	por	%xmm3, %xmm1
    00000048: 	cmpl	%edx, %ecx
    0000004a: 	ja	.Ltmp2366 # Offset: 74
    0000004c: 	movhlps	%xmm0, %xmm4
    0000004f: 	movq	%xmm1, %rsi
    00000054: 	movhlps	%xmm1, %xmm5
    00000057: 	shll	$0x2, %ecx
    0000005a: 	movq	%xmm4, %rdx
    0000005f: 	movq	%xmm0, %rax
    00000064: 	orq	%rsi, %rdx
    00000067: 	movq	%xmm5, %rsi
    0000006c: 	orq	%rsi, %rdx
.Ltmp2371:
    0000006f: 	cmpl	%ecx, %r8d
    00000072: 	jle	.Ltmp2367 # Offset: 114
    00000074: 	movl	%r8d, %r9d
    00000077: 	subl	%ecx, %r9d
    0000007a: 	cmpl	$0x1, %r9d
    0000007e: 	je	.Ltmp2368 # Offset: 126
    00000080: 	movslq	%ecx, %rsi
    00000083: 	pxor	%xmm0, %xmm0
    00000087: 	leaq	(%rdi,%rsi,8), %r8
    0000008b: 	movl	%r9d, %esi
    0000008e: 	shrl	%esi
    00000090: 	leal	-0x1(%rsi), %r10d
    00000094: 	leaq	0x10(%r8), %rsi
    00000098: 	shlq	$0x4, %r10
    0000009c: 	addq	%rsi, %r10
    0000009f: 	jmp	.Ltmp2369 # Offset: 159
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp2370:
    000000a8: 	addq	$0x10, %rsi
.Ltmp2369:
    000000ac: 	movdqu	(%r8), %xmm1
    000000b1: 	movq	%rsi, %r8
    000000b4: 	por	%xmm1, %xmm0
    000000b8: 	cmpq	%rsi, %r10
    000000bb: 	jne	.Ltmp2370 # Offset: 187
    000000bd: 	movdqa	%xmm0, %xmm1
    000000c1: 	psrldq	$0x8, %xmm1
    000000c6: 	por	%xmm1, %xmm0
    000000ca: 	movq	%xmm0, %rsi
    000000cf: 	orq	%rsi, %rax
    000000d2: 	movl	%r9d, %esi
    000000d5: 	andl	$-0x2, %esi
    000000d8: 	addl	%esi, %ecx
    000000da: 	cmpl	%r9d, %esi
    000000dd: 	je	.Ltmp2367 # Offset: 221
.Ltmp2368:
    000000df: 	movslq	%ecx, %rcx
    000000e2: 	orq	(%rdi,%rcx,8), %rax
.Ltmp2367:
    000000e6: 	orq	%rdx, %rax
    000000e9: 	retq # Offset: 233
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2365:
    000000f0: 	xorl	%ecx, %ecx
    000000f2: 	jmp	.Ltmp2371 # Offset: 242
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or6IlET_PKS0_iS0_"

Binary Function "_Z7bit_or7IlET_PKS0_iS0_" after disassembly {
  Number      : 343
  State       : disassembled
  Address     : 0x1cae0
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x1cae0
  Section     : .text
  Orc Section : .local.text._Z7bit_or7IlET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0342:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movq	%rdx, %rax
    0000000a: 	cmpl	$0x3, %esi
    0000000d: 	jle	.Ltmp2372 # Offset: 13
    00000013: 	movq	%rdx, %xmm0
    00000018: 	leal	-0x4(%rsi), %ecx
    0000001b: 	movq	%rdi, %rax
    0000001e: 	xorl	%edx, %edx
    00000020: 	shrl	$0x2, %ecx
    00000023: 	punpcklqdq	%xmm0, %xmm0
    00000027: 	addl	$0x1, %ecx
    0000002a: 	movdqa	%xmm0, %xmm1
    0000002e: 	nop # Size: 2
.Ltmp2373:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	movdqu	0x10(%rax), %xmm3
    00000039: 	addl	$0x1, %edx
    0000003c: 	addq	$0x20, %rax
    00000040: 	por	%xmm2, %xmm0
    00000044: 	por	%xmm3, %xmm1
    00000048: 	cmpl	%edx, %ecx
    0000004a: 	ja	.Ltmp2373 # Offset: 74
    0000004c: 	movhlps	%xmm0, %xmm4
    0000004f: 	movq	%xmm1, %rsi
    00000054: 	movhlps	%xmm1, %xmm5
    00000057: 	shll	$0x2, %ecx
    0000005a: 	movq	%xmm4, %rdx
    0000005f: 	movq	%xmm0, %rax
    00000064: 	orq	%rsi, %rdx
    00000067: 	movq	%xmm5, %rsi
    0000006c: 	orq	%rsi, %rdx
.Ltmp2378:
    0000006f: 	cmpl	%ecx, %r8d
    00000072: 	jle	.Ltmp2374 # Offset: 114
    00000074: 	movl	%r8d, %r9d
    00000077: 	subl	%ecx, %r9d
    0000007a: 	cmpl	$0x1, %r9d
    0000007e: 	je	.Ltmp2375 # Offset: 126
    00000080: 	movslq	%ecx, %rsi
    00000083: 	pxor	%xmm0, %xmm0
    00000087: 	leaq	(%rdi,%rsi,8), %r8
    0000008b: 	movl	%r9d, %esi
    0000008e: 	shrl	%esi
    00000090: 	leal	-0x1(%rsi), %r10d
    00000094: 	leaq	0x10(%r8), %rsi
    00000098: 	shlq	$0x4, %r10
    0000009c: 	addq	%rsi, %r10
    0000009f: 	jmp	.Ltmp2376 # Offset: 159
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp2377:
    000000a8: 	addq	$0x10, %rsi
.Ltmp2376:
    000000ac: 	movdqu	(%r8), %xmm1
    000000b1: 	movq	%rsi, %r8
    000000b4: 	por	%xmm1, %xmm0
    000000b8: 	cmpq	%rsi, %r10
    000000bb: 	jne	.Ltmp2377 # Offset: 187
    000000bd: 	movdqa	%xmm0, %xmm1
    000000c1: 	psrldq	$0x8, %xmm1
    000000c6: 	por	%xmm1, %xmm0
    000000ca: 	movq	%xmm0, %rsi
    000000cf: 	orq	%rsi, %rax
    000000d2: 	movl	%r9d, %esi
    000000d5: 	andl	$-0x2, %esi
    000000d8: 	addl	%esi, %ecx
    000000da: 	cmpl	%r9d, %esi
    000000dd: 	je	.Ltmp2374 # Offset: 221
.Ltmp2375:
    000000df: 	movslq	%ecx, %rcx
    000000e2: 	orq	(%rdi,%rcx,8), %rax
.Ltmp2374:
    000000e6: 	orq	%rdx, %rax
    000000e9: 	retq # Offset: 233
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2372:
    000000f0: 	xorl	%ecx, %ecx
    000000f2: 	jmp	.Ltmp2378 # Offset: 242
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or7IlET_PKS0_iS0_"

Binary Function "_Z7bit_or8IlET_PKS0_iS0_" after disassembly {
  Number      : 344
  State       : disassembled
  Address     : 0x1cbe0
  Size        : 0x11c
  MaxSize     : 0x120
  Offset      : 0x1cbe0
  Section     : .text
  Orc Section : .local.text._Z7bit_or8IlET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0343:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movq	%rdx, %rax
    0000000a: 	cmpl	$0x7, %esi
    0000000d: 	jle	.Ltmp2379 # Offset: 13
    00000013: 	leal	-0x8(%rsi), %esi
    00000016: 	movq	%rdx, %xmm4
    0000001b: 	movq	%rdi, %rax
    0000001e: 	xorl	%ecx, %ecx
    00000020: 	punpcklqdq	%xmm4, %xmm4
    00000024: 	shrl	$0x3, %esi
    00000027: 	movdqa	%xmm4, %xmm3
    0000002b: 	movdqa	%xmm4, %xmm2
    0000002f: 	movdqa	%xmm4, %xmm1
    00000033: 	addl	$0x1, %esi
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2380:
    00000040: 	movdqu	(%rax), %xmm5
    00000044: 	movdqu	0x20(%rax), %xmm7
    00000049: 	addl	$0x1, %ecx
    0000004c: 	addq	$0x40, %rax
    00000050: 	movdqu	-0x30(%rax), %xmm6
    00000055: 	por	%xmm5, %xmm4
    00000059: 	por	%xmm7, %xmm2
    0000005d: 	movdqu	-0x10(%rax), %xmm5
    00000062: 	por	%xmm6, %xmm1
    00000066: 	movdqa	%xmm2, %xmm0
    0000006a: 	por	%xmm5, %xmm3
    0000006e: 	por	%xmm1, %xmm0
    00000072: 	por	%xmm3, %xmm0
    00000076: 	movhlps	%xmm0, %xmm6
    00000079: 	movq	%xmm0, %r9
    0000007e: 	movq	%xmm6, %rdx
    00000083: 	cmpl	%ecx, %esi
    00000085: 	ja	.Ltmp2380 # Offset: 133
    00000087: 	movhlps	%xmm4, %xmm7
    0000008a: 	orq	%r9, %rdx
    0000008d: 	movq	%xmm4, %rax
    00000092: 	shll	$0x3, %esi
    00000095: 	movq	%xmm7, %rcx
    0000009a: 	orq	%rcx, %rdx
.Ltmp2385:
    0000009d: 	cmpl	%esi, %r8d
    000000a0: 	jle	.Ltmp2381 # Offset: 160
    000000a2: 	movl	%r8d, %r9d
    000000a5: 	subl	%esi, %r9d
    000000a8: 	cmpl	$0x1, %r9d
    000000ac: 	je	.Ltmp2382 # Offset: 172
    000000ae: 	movslq	%esi, %rcx
    000000b1: 	pxor	%xmm0, %xmm0
    000000b5: 	leaq	(%rdi,%rcx,8), %r8
    000000b9: 	movl	%r9d, %ecx
    000000bc: 	shrl	%ecx
    000000be: 	leal	-0x1(%rcx), %r10d
    000000c2: 	leaq	0x10(%r8), %rcx
    000000c6: 	shlq	$0x4, %r10
    000000ca: 	addq	%rcx, %r10
    000000cd: 	jmp	.Ltmp2383 # Offset: 205
    000000cf: 	nop # Size: 1
.Ltmp2384:
    000000d0: 	addq	$0x10, %rcx
.Ltmp2383:
    000000d4: 	movdqu	(%r8), %xmm1
    000000d9: 	movq	%rcx, %r8
    000000dc: 	por	%xmm1, %xmm0
    000000e0: 	cmpq	%r10, %rcx
    000000e3: 	jne	.Ltmp2384 # Offset: 227
    000000e5: 	movdqa	%xmm0, %xmm1
    000000e9: 	psrldq	$0x8, %xmm1
    000000ee: 	por	%xmm1, %xmm0
    000000f2: 	movq	%xmm0, %rcx
    000000f7: 	orq	%rcx, %rax
    000000fa: 	movl	%r9d, %ecx
    000000fd: 	andl	$-0x2, %ecx
    00000100: 	addl	%ecx, %esi
    00000102: 	cmpl	%r9d, %ecx
    00000105: 	je	.Ltmp2381 # Offset: 261
.Ltmp2382:
    00000107: 	movslq	%esi, %rcx
    0000010a: 	orq	(%rdi,%rcx,8), %rax
.Ltmp2381:
    0000010e: 	orq	%rdx, %rax
    00000111: 	retq # Offset: 273
    00000112: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2379:
    00000118: 	xorl	%esi, %esi
    0000011a: 	jmp	.Ltmp2385 # Offset: 282
DWARF CFI Instructions:
    <empty>
End of Function "_Z7bit_or8IlET_PKS0_iS0_"

Binary Function "_Z8bit_xor1IlET_PKS0_iS0_" after disassembly {
  Number      : 345
  State       : disassembled
  Address     : 0x1cd00
  Size        : 0x83
  MaxSize     : 0x90
  Offset      : 0x1cd00
  Section     : .text
  Orc Section : .local.text._Z8bit_xor1IlET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0344:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	testl	%esi, %esi
    00000009: 	jle	.Ltmp2386 # Offset: 9
    0000000b: 	cmpl	$0x1, %esi
    0000000e: 	je	.Ltmp2387 # Offset: 14
    00000010: 	movq	%rdi, %rax
    00000013: 	movl	%esi, %edi
    00000015: 	pxor	%xmm0, %xmm0
    00000019: 	shrl	%edi
    0000001b: 	subl	$0x1, %edi
    0000001e: 	shlq	$0x4, %rdi
    00000022: 	leaq	0x10(%rcx,%rdi), %rdi
    00000027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2388:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	addq	$0x10, %rax
    00000038: 	pxor	%xmm2, %xmm0
    0000003c: 	cmpq	%rax, %rdi
    0000003f: 	jne	.Ltmp2388 # Offset: 63
    00000041: 	movdqa	%xmm0, %xmm1
    00000045: 	psrldq	$0x8, %xmm1
    0000004a: 	pxor	%xmm1, %xmm0
    0000004e: 	movq	%xmm0, %rax
    00000053: 	xorq	%rdx, %rax
    00000056: 	movl	%esi, %edx
    00000058: 	andl	$-0x2, %edx
    0000005b: 	andl	$0x1, %esi
    0000005e: 	je	.Ltmp2389 # Offset: 94
.Ltmp2390:
    00000060: 	movslq	%edx, %rdx
    00000063: 	xorq	(%rcx,%rdx,8), %rax
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2389:
    00000070: 	retq # Offset: 112
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp2386:
    00000078: 	movq	%rdx, %rax
    0000007b: 	retq # Offset: 123
.Ltmp2387:
    0000007c: 	movq	%rdx, %rax
    0000007f: 	xorl	%edx, %edx
    00000081: 	jmp	.Ltmp2390 # Offset: 129
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor1IlET_PKS0_iS0_"

Binary Function "_Z8bit_xor2IlET_PKS0_iS0_" after disassembly {
  Number      : 346
  State       : disassembled
  Address     : 0x1cd90
  Size        : 0x91
  MaxSize     : 0xa0
  Offset      : 0x1cd90
  Section     : .text
  Orc Section : .local.text._Z8bit_xor2IlET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0345:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movq	%rdi, %rcx
    0000000a: 	shlq	$0x3, %rsi
    0000000e: 	je	.Ltmp2391 # Offset: 14
    00000010: 	movq	%rdi, %rax
    00000013: 	leaq	-0x8(%rsi), %rdi
    00000017: 	shrq	$0x3, %rdi
    0000001b: 	addq	$0x1, %rdi
    0000001f: 	cmpq	$0x8, %rsi
    00000023: 	je	.Ltmp2392 # Offset: 35
    00000025: 	movq	%rdi, %rsi
    00000028: 	pxor	%xmm0, %xmm0
    0000002c: 	shrq	%rsi
    0000002f: 	shlq	$0x4, %rsi
    00000033: 	addq	%rcx, %rsi
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2393:
    00000040: 	movdqu	(%rax), %xmm2
    00000044: 	addq	$0x10, %rax
    00000048: 	pxor	%xmm2, %xmm0
    0000004c: 	cmpq	%rax, %rsi
    0000004f: 	jne	.Ltmp2393 # Offset: 79
    00000051: 	movdqa	%xmm0, %xmm1
    00000055: 	psrldq	$0x8, %xmm1
    0000005a: 	pxor	%xmm1, %xmm0
    0000005e: 	movq	%xmm0, %rax
    00000063: 	xorq	%rdx, %rax
    00000066: 	movq	%rdi, %rdx
    00000069: 	andq	$-0x2, %rdx
    0000006d: 	leaq	(%rcx,%rdx,8), %rcx
    00000071: 	cmpq	%rdx, %rdi
    00000074: 	je	.Ltmp2394 # Offset: 116
.Ltmp2395:
    00000076: 	xorq	(%rcx), %rax
    00000079: 	retq # Offset: 121
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2394:
    00000080: 	retq # Offset: 128
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp2391:
    00000088: 	movq	%rdx, %rax
    0000008b: 	retq # Offset: 139
.Ltmp2392:
    0000008c: 	movq	%rdx, %rax
    0000008f: 	jmp	.Ltmp2395 # Offset: 143
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor2IlET_PKS0_iS0_"

Binary Function "_Z8bit_xor3IlET_PKS0_iS0_" after disassembly {
  Number      : 347
  State       : disassembled
  Address     : 0x1ce30
  Size        : 0xb6
  MaxSize     : 0xc0
  Offset      : 0x1ce30
  Section     : .text
  Orc Section : .local.text._Z8bit_xor3IlET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0346:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edi
    00000009: 	cmpl	$0x1, %esi
    0000000c: 	jle	.Ltmp2396 # Offset: 12
    00000012: 	leal	-0x2(%rsi), %eax
    00000015: 	movl	%eax, %esi
    00000017: 	shrl	%esi
    00000019: 	addl	$0x1, %esi
    0000001c: 	cmpl	$0x1, %eax
    0000001f: 	jbe	.Ltmp2397 # Offset: 31
    00000025: 	movl	%esi, %r8d
    00000028: 	movq	%rcx, %rax
    0000002b: 	pxor	%xmm0, %xmm0
    0000002f: 	shrl	%r8d
    00000032: 	subl	$0x1, %r8d
    00000036: 	shlq	$0x5, %r8
    0000003a: 	leaq	0x20(%rcx,%r8), %r8
    0000003f: 	nop # Size: 1
.Ltmp2398:
    00000040: 	movdqu	(%rax), %xmm1
    00000044: 	movdqu	0x10(%rax), %xmm3
    00000049: 	addq	$0x20, %rax
    0000004d: 	movdqa	%xmm1, %xmm2
    00000051: 	punpckhqdq	%xmm3, %xmm1
    00000055: 	punpcklqdq	%xmm3, %xmm2
    00000059: 	pxor	%xmm2, %xmm1
    0000005d: 	pxor	%xmm1, %xmm0
    00000061: 	cmpq	%rax, %r8
    00000064: 	jne	.Ltmp2398 # Offset: 100
    00000066: 	movdqa	%xmm0, %xmm1
    0000006a: 	movl	%esi, %r8d
    0000006d: 	psrldq	$0x8, %xmm1
    00000072: 	andl	$-0x2, %r8d
    00000076: 	pxor	%xmm1, %xmm0
    0000007a: 	movq	%xmm0, %rax
    0000007f: 	xorq	%rdx, %rax
    00000082: 	leal	(%r8,%r8), %edx
    00000086: 	cmpl	%r8d, %esi
    00000089: 	je	.Ltmp2399 # Offset: 137
.Ltmp2402:
    0000008b: 	movslq	%edx, %rdx
    0000008e: 	xorq	(%rcx,%rdx,8), %rax
    00000092: 	xorq	0x8(%rcx,%rdx,8), %rax
.Ltmp2399:
    00000097: 	addl	%esi, %esi
.Ltmp2401:
    00000099: 	cmpl	%edi, %esi
    0000009b: 	jge	.Ltmp2400 # Offset: 155
    0000009d: 	movslq	%esi, %rsi
    000000a0: 	xorq	(%rcx,%rsi,8), %rax
.Ltmp2400:
    000000a4: 	retq # Offset: 164
    000000a5: 	nopl	(%rax) # Size: 3
.Ltmp2396:
    000000a8: 	movq	%rdx, %rax
    000000ab: 	xorl	%esi, %esi
    000000ad: 	jmp	.Ltmp2401 # Offset: 173
.Ltmp2397:
    000000af: 	movq	%rdx, %rax
    000000b2: 	xorl	%edx, %edx
    000000b4: 	jmp	.Ltmp2402 # Offset: 180
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor3IlET_PKS0_iS0_"

Binary Function "_Z8bit_xor4IlET_PKS0_iS0_" after disassembly {
  Number      : 348
  State       : disassembled
  Address     : 0x1cef0
  Size        : 0x12e
  MaxSize     : 0x130
  Offset      : 0x1cef0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor4IlET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0347:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movl	%esi, %edi
    00000009: 	cmpl	$0x3, %esi
    0000000c: 	jle	.Ltmp2403 # Offset: 12
    00000012: 	leal	-0x4(%rsi), %eax
    00000015: 	movl	%eax, %esi
    00000017: 	shrl	$0x2, %esi
    0000001a: 	addl	$0x1, %esi
    0000001d: 	cmpl	$0x3, %eax
    00000020: 	jbe	.Ltmp2404 # Offset: 32
    00000026: 	movl	%esi, %r8d
    00000029: 	movq	%rcx, %rax
    0000002c: 	pxor	%xmm0, %xmm0
    00000030: 	shrl	%r8d
    00000033: 	subl	$0x1, %r8d
    00000037: 	shlq	$0x6, %r8
    0000003b: 	leaq	0x40(%rcx,%r8), %r8
.Ltmp2405:
    00000040: 	movdqu	(%rax), %xmm1
    00000044: 	movdqu	0x10(%rax), %xmm6
    00000049: 	addq	$0x40, %rax
    0000004d: 	movdqu	-0x20(%rax), %xmm3
    00000052: 	movdqa	%xmm1, %xmm4
    00000056: 	punpckhqdq	%xmm6, %xmm1
    0000005a: 	punpcklqdq	%xmm6, %xmm4
    0000005e: 	movdqu	-0x10(%rax), %xmm6
    00000063: 	movdqa	%xmm3, %xmm5
    00000067: 	movdqa	%xmm1, %xmm2
    0000006b: 	punpckhqdq	%xmm6, %xmm3
    0000006f: 	punpcklqdq	%xmm6, %xmm5
    00000073: 	punpcklqdq	%xmm3, %xmm2
    00000077: 	punpckhqdq	%xmm3, %xmm1
    0000007b: 	pxor	%xmm2, %xmm1
    0000007f: 	movdqa	%xmm4, %xmm2
    00000083: 	punpckhqdq	%xmm5, %xmm4
    00000087: 	punpcklqdq	%xmm5, %xmm2
    0000008b: 	pxor	%xmm4, %xmm2
    0000008f: 	pxor	%xmm2, %xmm1
    00000093: 	pxor	%xmm1, %xmm0
    00000097: 	cmpq	%rax, %r8
    0000009a: 	jne	.Ltmp2405 # Offset: 154
    0000009c: 	movdqa	%xmm0, %xmm1
    000000a0: 	movl	%esi, %r8d
    000000a3: 	psrldq	$0x8, %xmm1
    000000a8: 	andl	$-0x2, %r8d
    000000ac: 	pxor	%xmm1, %xmm0
    000000b0: 	movq	%xmm0, %rax
    000000b5: 	xorq	%rdx, %rax
    000000b8: 	leal	(,%r8,4), %edx
    000000c0: 	cmpl	%esi, %r8d
    000000c3: 	je	.Ltmp2406 # Offset: 195
.Ltmp2409:
    000000c5: 	movslq	%edx, %rdx
    000000c8: 	xorq	(%rcx,%rdx,8), %rax
    000000cc: 	xorq	0x8(%rcx,%rdx,8), %rax
    000000d1: 	xorq	0x10(%rcx,%rdx,8), %rax
    000000d6: 	xorq	0x18(%rcx,%rdx,8), %rax
.Ltmp2406:
    000000db: 	leal	(,%rsi,4), %edx
.Ltmp2408:
    000000e2: 	cmpl	%edx, %edi
    000000e4: 	jle	.Ltmp2407 # Offset: 228
    000000e6: 	movslq	%edx, %rsi
    000000e9: 	leaq	(,%rsi,8), %r8
    000000f1: 	xorq	(%rcx,%rsi,8), %rax
    000000f5: 	leal	0x1(%rdx), %esi
    000000f8: 	cmpl	%edi, %esi
    000000fa: 	jge	.Ltmp2407 # Offset: 250
    000000fc: 	leal	0x2(%rdx), %esi
    000000ff: 	xorq	0x8(%rcx,%r8), %rax
    00000104: 	cmpl	%esi, %edi
    00000106: 	jle	.Ltmp2407 # Offset: 262
    00000108: 	addl	$0x3, %edx
    0000010b: 	xorq	0x10(%rcx,%r8), %rax
    00000110: 	cmpl	%edx, %edi
    00000112: 	jle	.Ltmp2407 # Offset: 274
    00000114: 	xorq	0x18(%rcx,%r8), %rax
.Ltmp2407:
    00000119: 	retq # Offset: 281
    0000011a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2403:
    00000120: 	movq	%rdx, %rax
    00000123: 	xorl	%edx, %edx
    00000125: 	jmp	.Ltmp2408 # Offset: 293
.Ltmp2404:
    00000127: 	movq	%rdx, %rax
    0000012a: 	xorl	%edx, %edx
    0000012c: 	jmp	.Ltmp2409 # Offset: 300
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor4IlET_PKS0_iS0_"

Binary Function "_Z8bit_xor5IlET_PKS0_iS0_" after disassembly {
  Number      : 349
  State       : disassembled
  Address     : 0x1d020
  Size        : 0xc6
  MaxSize     : 0xd0
  Offset      : 0x1d020
  Section     : .text
  Orc Section : .local.text._Z8bit_xor5IlET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0348:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rdx, %rax
    0000000a: 	cmpl	$0x1, %esi
    0000000d: 	jle	.Ltmp2410 # Offset: 13
    00000013: 	leal	-0x2(%rsi), %edx
    00000016: 	movq	%rax, %xmm0
    0000001b: 	xorl	%eax, %eax
    0000001d: 	shrl	%edx
    0000001f: 	addl	$0x1, %edx
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2411:
    00000028: 	movq	%rax, %rcx
    0000002b: 	addq	$0x1, %rax
    0000002f: 	shlq	$0x4, %rcx
    00000033: 	movdqu	(%r8,%rcx), %xmm1
    00000039: 	pxor	%xmm1, %xmm0
    0000003d: 	cmpl	%eax, %edx
    0000003f: 	ja	.Ltmp2411 # Offset: 63
    00000041: 	movhlps	%xmm0, %xmm2
    00000044: 	movq	%xmm0, %rax
    00000049: 	addl	%edx, %edx
    0000004b: 	movq	%xmm2, %rdi
.Ltmp2416:
    00000050: 	cmpl	%edx, %esi
    00000052: 	jle	.Ltmp2412 # Offset: 82
    00000054: 	subl	%edx, %esi
    00000056: 	cmpl	$0x1, %esi
    00000059: 	je	.Ltmp2413 # Offset: 89
    0000005b: 	movslq	%edx, %rcx
    0000005e: 	pxor	%xmm0, %xmm0
    00000062: 	leaq	(%r8,%rcx,8), %r9
    00000066: 	movl	%esi, %ecx
    00000068: 	shrl	%ecx
    0000006a: 	leal	-0x1(%rcx), %r10d
    0000006e: 	leaq	0x10(%r9), %rcx
    00000072: 	shlq	$0x4, %r10
    00000076: 	addq	%rcx, %r10
    00000079: 	jmp	.Ltmp2414 # Offset: 121
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2415:
    00000080: 	addq	$0x10, %rcx
.Ltmp2414:
    00000084: 	movdqu	(%r9), %xmm1
    00000089: 	movq	%rcx, %r9
    0000008c: 	pxor	%xmm1, %xmm0
    00000090: 	cmpq	%r10, %rcx
    00000093: 	jne	.Ltmp2415 # Offset: 147
    00000095: 	movdqa	%xmm0, %xmm1
    00000099: 	psrldq	$0x8, %xmm1
    0000009e: 	pxor	%xmm1, %xmm0
    000000a2: 	movq	%xmm0, %rcx
    000000a7: 	xorq	%rcx, %rax
    000000aa: 	movl	%esi, %ecx
    000000ac: 	andl	$-0x2, %ecx
    000000af: 	addl	%ecx, %edx
    000000b1: 	cmpl	%esi, %ecx
    000000b3: 	je	.Ltmp2412 # Offset: 179
.Ltmp2413:
    000000b5: 	movslq	%edx, %rdx
    000000b8: 	xorq	(%r8,%rdx,8), %rax
.Ltmp2412:
    000000bc: 	xorq	%rdi, %rax
    000000bf: 	retq # Offset: 191
.Ltmp2410:
    000000c0: 	xorl	%edx, %edx
    000000c2: 	xorl	%edi, %edi
    000000c4: 	jmp	.Ltmp2416 # Offset: 196
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor5IlET_PKS0_iS0_"

Binary Function "_Z8bit_xor6IlET_PKS0_iS0_" after disassembly {
  Number      : 350
  State       : disassembled
  Address     : 0x1d0f0
  Size        : 0xf9
  MaxSize     : 0x100
  Offset      : 0x1d0f0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor6IlET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0349:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movq	%rdx, %rax
    0000000a: 	cmpl	$0x3, %esi
    0000000d: 	jle	.Ltmp2417 # Offset: 13
    00000013: 	leal	-0x4(%rsi), %ecx
    00000016: 	movq	%rdx, %xmm0
    0000001b: 	movq	%rdi, %rax
    0000001e: 	xorl	%edx, %edx
    00000020: 	shrl	$0x2, %ecx
    00000023: 	pxor	%xmm1, %xmm1
    00000027: 	addl	$0x1, %ecx
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2418:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	movdqu	0x10(%rax), %xmm3
    00000039: 	addl	$0x1, %edx
    0000003c: 	addq	$0x20, %rax
    00000040: 	pxor	%xmm2, %xmm0
    00000044: 	pxor	%xmm3, %xmm1
    00000048: 	cmpl	%edx, %ecx
    0000004a: 	ja	.Ltmp2418 # Offset: 74
    0000004c: 	movhlps	%xmm0, %xmm4
    0000004f: 	movq	%xmm1, %rsi
    00000054: 	movhlps	%xmm1, %xmm5
    00000057: 	shll	$0x2, %ecx
    0000005a: 	movq	%xmm4, %rdx
    0000005f: 	movq	%xmm0, %rax
    00000064: 	xorq	%rsi, %rdx
    00000067: 	movq	%xmm5, %rsi
    0000006c: 	xorq	%rsi, %rdx
.Ltmp2423:
    0000006f: 	cmpl	%ecx, %r8d
    00000072: 	jle	.Ltmp2419 # Offset: 114
    00000074: 	movl	%r8d, %r9d
    00000077: 	subl	%ecx, %r9d
    0000007a: 	cmpl	$0x1, %r9d
    0000007e: 	je	.Ltmp2420 # Offset: 126
    00000080: 	movslq	%ecx, %rsi
    00000083: 	pxor	%xmm0, %xmm0
    00000087: 	leaq	(%rdi,%rsi,8), %r8
    0000008b: 	movl	%r9d, %esi
    0000008e: 	shrl	%esi
    00000090: 	leal	-0x1(%rsi), %r10d
    00000094: 	leaq	0x10(%r8), %rsi
    00000098: 	shlq	$0x4, %r10
    0000009c: 	addq	%rsi, %r10
    0000009f: 	jmp	.Ltmp2421 # Offset: 159
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp2422:
    000000a8: 	addq	$0x10, %rsi
.Ltmp2421:
    000000ac: 	movdqu	(%r8), %xmm1
    000000b1: 	movq	%rsi, %r8
    000000b4: 	pxor	%xmm1, %xmm0
    000000b8: 	cmpq	%rsi, %r10
    000000bb: 	jne	.Ltmp2422 # Offset: 187
    000000bd: 	movdqa	%xmm0, %xmm1
    000000c1: 	psrldq	$0x8, %xmm1
    000000c6: 	pxor	%xmm1, %xmm0
    000000ca: 	movq	%xmm0, %rsi
    000000cf: 	xorq	%rsi, %rax
    000000d2: 	movl	%r9d, %esi
    000000d5: 	andl	$-0x2, %esi
    000000d8: 	addl	%esi, %ecx
    000000da: 	cmpl	%r9d, %esi
    000000dd: 	je	.Ltmp2419 # Offset: 221
.Ltmp2420:
    000000df: 	movslq	%ecx, %rcx
    000000e2: 	xorq	(%rdi,%rcx,8), %rax
.Ltmp2419:
    000000e6: 	xorq	%rdx, %rax
    000000e9: 	retq # Offset: 233
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2417:
    000000f0: 	xorl	%edx, %edx
    000000f2: 	xorl	%ecx, %ecx
    000000f4: 	jmp	.Ltmp2423 # Offset: 244
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor6IlET_PKS0_iS0_"

Binary Function "_Z8bit_xor7IlET_PKS0_iS0_" after disassembly {
  Number      : 351
  State       : disassembled
  Address     : 0x1d1f0
  Size        : 0xf9
  MaxSize     : 0x100
  Offset      : 0x1d1f0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor7IlET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0350:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movq	%rdx, %rax
    0000000a: 	cmpl	$0x3, %esi
    0000000d: 	jle	.Ltmp2424 # Offset: 13
    00000013: 	leal	-0x4(%rsi), %ecx
    00000016: 	movq	%rdx, %xmm0
    0000001b: 	movq	%rdi, %rax
    0000001e: 	xorl	%edx, %edx
    00000020: 	shrl	$0x2, %ecx
    00000023: 	pxor	%xmm1, %xmm1
    00000027: 	addl	$0x1, %ecx
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2425:
    00000030: 	movdqu	(%rax), %xmm2
    00000034: 	movdqu	0x10(%rax), %xmm3
    00000039: 	addl	$0x1, %edx
    0000003c: 	addq	$0x20, %rax
    00000040: 	pxor	%xmm2, %xmm0
    00000044: 	pxor	%xmm3, %xmm1
    00000048: 	cmpl	%edx, %ecx
    0000004a: 	ja	.Ltmp2425 # Offset: 74
    0000004c: 	movhlps	%xmm0, %xmm4
    0000004f: 	movq	%xmm1, %rsi
    00000054: 	movhlps	%xmm1, %xmm5
    00000057: 	shll	$0x2, %ecx
    0000005a: 	movq	%xmm4, %rdx
    0000005f: 	movq	%xmm0, %rax
    00000064: 	xorq	%rsi, %rdx
    00000067: 	movq	%xmm5, %rsi
    0000006c: 	xorq	%rsi, %rdx
.Ltmp2430:
    0000006f: 	cmpl	%ecx, %r8d
    00000072: 	jle	.Ltmp2426 # Offset: 114
    00000074: 	movl	%r8d, %r9d
    00000077: 	subl	%ecx, %r9d
    0000007a: 	cmpl	$0x1, %r9d
    0000007e: 	je	.Ltmp2427 # Offset: 126
    00000080: 	movslq	%ecx, %rsi
    00000083: 	pxor	%xmm0, %xmm0
    00000087: 	leaq	(%rdi,%rsi,8), %r8
    0000008b: 	movl	%r9d, %esi
    0000008e: 	shrl	%esi
    00000090: 	leal	-0x1(%rsi), %r10d
    00000094: 	leaq	0x10(%r8), %rsi
    00000098: 	shlq	$0x4, %r10
    0000009c: 	addq	%rsi, %r10
    0000009f: 	jmp	.Ltmp2428 # Offset: 159
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp2429:
    000000a8: 	addq	$0x10, %rsi
.Ltmp2428:
    000000ac: 	movdqu	(%r8), %xmm1
    000000b1: 	movq	%rsi, %r8
    000000b4: 	pxor	%xmm1, %xmm0
    000000b8: 	cmpq	%rsi, %r10
    000000bb: 	jne	.Ltmp2429 # Offset: 187
    000000bd: 	movdqa	%xmm0, %xmm1
    000000c1: 	psrldq	$0x8, %xmm1
    000000c6: 	pxor	%xmm1, %xmm0
    000000ca: 	movq	%xmm0, %rsi
    000000cf: 	xorq	%rsi, %rax
    000000d2: 	movl	%r9d, %esi
    000000d5: 	andl	$-0x2, %esi
    000000d8: 	addl	%esi, %ecx
    000000da: 	cmpl	%r9d, %esi
    000000dd: 	je	.Ltmp2426 # Offset: 221
.Ltmp2427:
    000000df: 	movslq	%ecx, %rcx
    000000e2: 	xorq	(%rdi,%rcx,8), %rax
.Ltmp2426:
    000000e6: 	xorq	%rdx, %rax
    000000e9: 	retq # Offset: 233
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2424:
    000000f0: 	xorl	%edx, %edx
    000000f2: 	xorl	%ecx, %ecx
    000000f4: 	jmp	.Ltmp2430 # Offset: 244
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor7IlET_PKS0_iS0_"

Binary Function "_Z8bit_xor8IlET_PKS0_iS0_" after disassembly {
  Number      : 352
  State       : disassembled
  Address     : 0x1d2f0
  Size        : 0x121
  MaxSize     : 0x130
  Offset      : 0x1d2f0
  Section     : .text
  Orc Section : .local.text._Z8bit_xor8IlET_PKS0_iS0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0351:
    00000000: 	endbr64
    00000004: 	movl	%esi, %r8d
    00000007: 	movq	%rdx, %rax
    0000000a: 	cmpl	$0x7, %esi
    0000000d: 	jle	.Ltmp2431 # Offset: 13
    00000013: 	leal	-0x8(%rsi), %ecx
    00000016: 	pxor	%xmm3, %xmm3
    0000001a: 	movq	%rdx, %xmm4
    0000001f: 	movq	%rdi, %rax
    00000022: 	shrl	$0x3, %ecx
    00000025: 	movdqa	%xmm3, %xmm2
    00000029: 	movdqa	%xmm3, %xmm1
    0000002d: 	leal	0x1(%rcx), %esi
    00000030: 	xorl	%ecx, %ecx
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2432:
    00000038: 	movdqu	(%rax), %xmm5
    0000003c: 	movdqu	0x20(%rax), %xmm7
    00000041: 	addl	$0x1, %ecx
    00000044: 	addq	$0x40, %rax
    00000048: 	movdqu	-0x30(%rax), %xmm6
    0000004d: 	pxor	%xmm5, %xmm4
    00000051: 	pxor	%xmm7, %xmm2
    00000055: 	movdqu	-0x10(%rax), %xmm5
    0000005a: 	pxor	%xmm6, %xmm1
    0000005e: 	movdqa	%xmm2, %xmm0
    00000062: 	pxor	%xmm5, %xmm3
    00000066: 	pxor	%xmm1, %xmm0
    0000006a: 	pxor	%xmm3, %xmm0
    0000006e: 	movhlps	%xmm0, %xmm6
    00000071: 	movq	%xmm0, %r9
    00000076: 	movq	%xmm6, %rdx
    0000007b: 	cmpl	%ecx, %esi
    0000007d: 	ja	.Ltmp2432 # Offset: 125
    0000007f: 	movq	%xmm4, %rax
    00000084: 	psrldq	$0x8, %xmm4
    00000089: 	leal	(,%rsi,8), %ecx
    00000090: 	xorq	%r9, %rdx
    00000093: 	movq	%xmm4, %rsi
    00000098: 	xorq	%rsi, %rdx
.Ltmp2437:
    0000009b: 	cmpl	%ecx, %r8d
    0000009e: 	jle	.Ltmp2433 # Offset: 158
    000000a0: 	movl	%r8d, %r9d
    000000a3: 	subl	%ecx, %r9d
    000000a6: 	cmpl	$0x1, %r9d
    000000aa: 	je	.Ltmp2434 # Offset: 170
    000000ac: 	movslq	%ecx, %rsi
    000000af: 	pxor	%xmm0, %xmm0
    000000b3: 	leaq	(%rdi,%rsi,8), %r8
    000000b7: 	movl	%r9d, %esi
    000000ba: 	shrl	%esi
    000000bc: 	leal	-0x1(%rsi), %r10d
    000000c0: 	leaq	0x10(%r8), %rsi
    000000c4: 	shlq	$0x4, %r10
    000000c8: 	addq	%rsi, %r10
    000000cb: 	jmp	.Ltmp2435 # Offset: 203
    000000cd: 	nopl	(%rax) # Size: 3
.Ltmp2436:
    000000d0: 	addq	$0x10, %rsi
.Ltmp2435:
    000000d4: 	movdqu	(%r8), %xmm1
    000000d9: 	movq	%rsi, %r8
    000000dc: 	pxor	%xmm1, %xmm0
    000000e0: 	cmpq	%rsi, %r10
    000000e3: 	jne	.Ltmp2436 # Offset: 227
    000000e5: 	movdqa	%xmm0, %xmm1
    000000e9: 	psrldq	$0x8, %xmm1
    000000ee: 	pxor	%xmm1, %xmm0
    000000f2: 	movq	%xmm0, %rsi
    000000f7: 	xorq	%rsi, %rax
    000000fa: 	movl	%r9d, %esi
    000000fd: 	andl	$-0x2, %esi
    00000100: 	addl	%esi, %ecx
    00000102: 	cmpl	%r9d, %esi
    00000105: 	je	.Ltmp2433 # Offset: 261
.Ltmp2434:
    00000107: 	movslq	%ecx, %rcx
    0000010a: 	xorq	(%rdi,%rcx,8), %rax
.Ltmp2433:
    0000010e: 	xorq	%rdx, %rax
    00000111: 	retq # Offset: 273
    00000112: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2431:
    00000118: 	xorl	%edx, %edx
    0000011a: 	xorl	%ecx, %ecx
    0000011c: 	jmp	.Ltmp2437 # Offset: 284
DWARF CFI Instructions:
    <empty>
End of Function "_Z8bit_xor8IlET_PKS0_iS0_"

Binary Function "_Z10logic_and1IlEbPKT_ib" after disassembly {
  Number      : 353
  State       : disassembled
  Address     : 0x1d420
  Size        : 0x33
  MaxSize     : 0x40
  Offset      : 0x1d420
  Section     : .text
  Orc Section : .local.text._Z10logic_and1IlEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0352:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp2438 # Offset: 8
    0000000a: 	testb	%dl, %dl
    0000000c: 	je	.Ltmp2438 # Offset: 12
    0000000e: 	leal	-0x1(%rsi), %edx
    00000011: 	leaq	0x8(%rdi,%rdx,8), %rdx
.Ltmp2440:
    00000016: 	cmpq	$0x0, (%rdi)
    0000001a: 	je	.Ltmp2439 # Offset: 26
    0000001c: 	addq	$0x8, %rdi
    00000020: 	cmpq	%rdi, %rdx
    00000023: 	jne	.Ltmp2440 # Offset: 35
    00000025: 	retq # Offset: 37
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2439:
    00000030: 	xorl	%eax, %eax
.Ltmp2438:
    00000032: 	retq # Offset: 50
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and1IlEbPKT_ib"

Binary Function "_Z10logic_and2IlEbPKT_ib" after disassembly {
  Number      : 354
  State       : disassembled
  Address     : 0x1d460
  Size        : 0x3e
  MaxSize     : 0x40
  Offset      : 0x1d460
  Section     : .text
  Orc Section : .local.text._Z10logic_and2IlEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0353:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	leaq	(%rdi,%rsi,8), %rax
    0000000b: 	cmpq	%rax, %rdi
    0000000e: 	je	.Ltmp2441 # Offset: 14
    00000010: 	testb	%dl, %dl
    00000012: 	jne	.Ltmp2442 # Offset: 18
.Ltmp2443:
    00000014: 	jmp	.Ltmp2443 # Offset: 20
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2442:
    00000020: 	addq	$0x8, %rdi
    00000024: 	movq	-0x8(%rdi), %rdx
    00000028: 	cmpq	%rdi, %rax
    0000002b: 	je	.Ltmp2444 # Offset: 43
    0000002d: 	testq	%rdx, %rdx
    00000030: 	jne	.Ltmp2442 # Offset: 48
    00000032: 	jmp	.Ltmp2443 # Offset: 50
.Ltmp2441:
    00000034: 	movl	%edx, %eax
    00000036: 	retq # Offset: 54
.Ltmp2444:
    00000037: 	testq	%rdx, %rdx
    0000003a: 	setne	%al
    0000003d: 	retq # Offset: 61
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and2IlEbPKT_ib"

Binary Function "_Z10logic_and3IlEbPKT_ib" after disassembly {
  Number      : 355
  State       : disassembled
  Address     : 0x1d4a0
  Size        : 0x6a
  MaxSize     : 0x70
  Offset      : 0x1d4a0
  Section     : .text
  Orc Section : .local.text._Z10logic_and3IlEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0354:
    00000000: 	endbr64
    00000004: 	cmpl	$0x1, %esi
    00000007: 	jle	.Ltmp2445 # Offset: 7
    00000009: 	xorl	%eax, %eax
    0000000b: 	testb	%dl, %dl
    0000000d: 	je	.Ltmp2446 # Offset: 13
    0000000f: 	leal	-0x2(%rsi), %eax
    00000012: 	shrl	%eax
    00000014: 	leal	0x2(%rax), %r8d
    00000018: 	movl	$0x2, %eax
    0000001d: 	addq	%r8, %r8
.Ltmp2448:
    00000020: 	cmpq	$0x0, -0x10(%rdi,%rax,8)
    00000026: 	je	.Ltmp2447 # Offset: 38
    00000028: 	cmpq	$0x0, -0x8(%rdi,%rax,8)
    0000002e: 	je	.Ltmp2447 # Offset: 46
    00000030: 	movslq	%eax, %rcx
    00000033: 	addq	$0x2, %rax
    00000037: 	cmpq	%r8, %rax
    0000003a: 	jne	.Ltmp2448 # Offset: 58
    0000003c: 	cmpl	%ecx, %esi
    0000003e: 	jle	.Ltmp2449 # Offset: 62
.Ltmp2450:
    00000040: 	cmpq	$0x0, (%rdi,%rcx,8)
    00000045: 	je	.Ltmp2447 # Offset: 69
    00000047: 	addq	$0x1, %rcx
    0000004b: 	cmpl	%ecx, %esi
    0000004d: 	jg	.Ltmp2450 # Offset: 77
    0000004f: 	movl	$0x1, %eax
    00000054: 	retq # Offset: 84
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp2447:
    00000058: 	xorl	%eax, %eax
    0000005a: 	retq # Offset: 90
.Ltmp2449:
    0000005b: 	movl	%edx, %eax
.Ltmp2446:
    0000005d: 	retq # Offset: 93
    0000005e: 	nop # Size: 2
.Ltmp2445:
    00000060: 	jne	.Ltmp2449 # Offset: 96
    00000062: 	testb	%dl, %dl
    00000064: 	je	.Ltmp2447 # Offset: 100
    00000066: 	xorl	%ecx, %ecx
    00000068: 	jmp	.Ltmp2450 # Offset: 104
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and3IlEbPKT_ib"

Binary Function "_Z10logic_and4IlEbPKT_ib" after disassembly {
  Number      : 356
  State       : disassembled
  Address     : 0x1d510
  Size        : 0x7a
  MaxSize     : 0x80
  Offset      : 0x1d510
  Section     : .text
  Orc Section : .local.text._Z10logic_and4IlEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0355:
    00000000: 	endbr64
    00000004: 	cmpl	$0x3, %esi
    00000007: 	jle	.Ltmp2451 # Offset: 7
    00000009: 	leal	-0x3(%rsi), %r8d
    0000000d: 	xorl	%eax, %eax
    0000000f: 	testb	%dl, %dl
    00000011: 	je	.Ltmp2452 # Offset: 17
    00000013: 	movq	%rdi, %rax
    00000016: 	xorl	%ecx, %ecx
.Ltmp2454:
    00000018: 	cmpq	$0x0, (%rax)
    0000001c: 	je	.Ltmp2453 # Offset: 28
    0000001e: 	cmpq	$0x0, 0x8(%rax)
    00000023: 	je	.Ltmp2453 # Offset: 35
    00000025: 	cmpq	$0x0, 0x10(%rax)
    0000002a: 	je	.Ltmp2453 # Offset: 42
    0000002c: 	cmpq	$0x0, 0x18(%rax)
    00000031: 	je	.Ltmp2453 # Offset: 49
    00000033: 	addl	$0x4, %ecx
    00000036: 	addq	$0x20, %rax
    0000003a: 	cmpl	%r8d, %ecx
    0000003d: 	jl	.Ltmp2454 # Offset: 61
    0000003f: 	cmpl	%ecx, %esi
    00000041: 	jg	.Ltmp2455 # Offset: 65
.Ltmp2456:
    00000043: 	movl	%edx, %eax
.Ltmp2452:
    00000045: 	retq # Offset: 69
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2453:
    00000050: 	xorl	%eax, %eax
    00000052: 	retq # Offset: 82
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2451:
    00000058: 	testl	%esi, %esi
    0000005a: 	jle	.Ltmp2456 # Offset: 90
    0000005c: 	testb	%dl, %dl
    0000005e: 	je	.Ltmp2453 # Offset: 94
    00000060: 	xorl	%ecx, %ecx
.Ltmp2455:
    00000062: 	movslq	%ecx, %rax
.Ltmp2457:
    00000065: 	cmpq	$0x0, (%rdi,%rax,8)
    0000006a: 	je	.Ltmp2453 # Offset: 106
    0000006c: 	addq	$0x1, %rax
    00000070: 	cmpl	%eax, %esi
    00000072: 	jg	.Ltmp2457 # Offset: 114
    00000074: 	movl	$0x1, %eax
    00000079: 	retq # Offset: 121
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and4IlEbPKT_ib"

Binary Function "_Z10logic_and5IlEbPKT_ib" after disassembly {
  Number      : 357
  State       : disassembled
  Address     : 0x1d590
  Size        : 0x9c
  MaxSize     : 0xa0
  Offset      : 0x1d590
  Section     : .text
  Orc Section : .local.text._Z10logic_and5IlEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0356:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movl	%edx, %eax
    00000009: 	cmpl	$0x1, %esi
    0000000c: 	jle	.Ltmp2458 # Offset: 12
    00000012: 	leal	-0x2(%rsi), %r9d
    00000016: 	movq	%rdi, %rcx
    00000019: 	shrl	%r9d
    0000001c: 	movl	%r9d, %edi
    0000001f: 	shlq	$0x4, %rdi
    00000023: 	leaq	0x10(%r8,%rdi), %rdi
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2461:
    00000030: 	testb	%dl, %dl
    00000032: 	je	.Ltmp2459 # Offset: 50
    00000034: 	cmpq	$0x0, (%rcx)
    00000038: 	setne	%dl
.Ltmp2459:
    0000003b: 	testb	%al, %al
    0000003d: 	je	.Ltmp2460 # Offset: 61
    0000003f: 	cmpq	$0x0, 0x8(%rcx)
    00000044: 	setne	%al
.Ltmp2460:
    00000047: 	addq	$0x10, %rcx
    0000004b: 	cmpq	%rdi, %rcx
    0000004e: 	jne	.Ltmp2461 # Offset: 78
    00000050: 	leal	0x2(%r9,%r9), %ecx
.Ltmp2465:
    00000055: 	cmpl	%ecx, %esi
    00000057: 	jle	.Ltmp2462 # Offset: 87
    00000059: 	testb	%dl, %dl
    0000005b: 	je	.Ltmp2463 # Offset: 91
    0000005d: 	subl	$0x1, %esi
    00000060: 	movslq	%ecx, %rdi
    00000063: 	subl	%ecx, %esi
    00000065: 	leaq	(%r8,%rdi,8), %rdx
    00000069: 	leaq	(%rsi,%rdi), %rcx
    0000006d: 	leaq	0x8(%r8,%rcx,8), %rcx
.Ltmp2464:
    00000072: 	cmpq	$0x0, (%rdx)
    00000076: 	je	.Ltmp2463 # Offset: 118
    00000078: 	addq	$0x8, %rdx
    0000007c: 	cmpq	%rcx, %rdx
    0000007f: 	jne	.Ltmp2464 # Offset: 127
    00000081: 	retq # Offset: 129
    00000082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2463:
    00000088: 	xorl	%eax, %eax
    0000008a: 	retq # Offset: 138
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2462:
    00000090: 	andl	%edx, %eax
    00000092: 	retq # Offset: 146
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2458:
    00000098: 	xorl	%ecx, %ecx
    0000009a: 	jmp	.Ltmp2465 # Offset: 154
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and5IlEbPKT_ib"

Binary Function "_Z10logic_and6IlEbPKT_ib" after disassembly {
  Number      : 358
  State       : disassembled
  Address     : 0x1d630
  Size        : 0xed
  MaxSize     : 0xf0
  Offset      : 0x1d630
  Section     : .text
  Orc Section : .local.text._Z10logic_and6IlEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0357:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movl	%esi, %r11d
    00000008: 	movl	%edx, %r10d
    0000000b: 	pushq	%rbx
    0000000c: 	movq	%rdi, %rbx
    0000000f: 	cmpl	$0x3, %esi
    00000012: 	jle	.Ltmp2466 # Offset: 18
    00000018: 	leal	-0x4(%rsi), %ebp
    0000001b: 	movq	%rdi, %rax
    0000001e: 	movl	%edx, %esi
    00000020: 	shrl	$0x2, %ebp
    00000023: 	movl	%ebp, %ecx
    00000025: 	shlq	$0x5, %rcx
    00000029: 	leaq	0x20(%rdi,%rcx), %r8
    0000002e: 	movl	%edx, %ecx
    00000030: 	xorl	%edi, %edi
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2471:
    00000038: 	testb	%r10b, %r10b
    0000003b: 	je	.Ltmp2467 # Offset: 59
    0000003d: 	cmpq	$0x0, (%rax)
    00000041: 	setne	%r10b
.Ltmp2467:
    00000045: 	testb	%dl, %dl
    00000047: 	je	.Ltmp2468 # Offset: 71
    00000049: 	cmpq	$0x0, 0x8(%rax)
    0000004e: 	setne	%dl
.Ltmp2468:
    00000051: 	testb	%cl, %cl
    00000053: 	je	.Ltmp2469 # Offset: 83
    00000055: 	cmpq	$0x0, 0x10(%rax)
    0000005a: 	setne	%cl
.Ltmp2469:
    0000005d: 	xorl	%r9d, %r9d
    00000060: 	testb	%sil, %sil
    00000063: 	je	.Ltmp2470 # Offset: 99
    00000065: 	cmpq	$0x0, 0x18(%rax)
    0000006a: 	movl	%edi, %r9d
    0000006d: 	cmovnel	%ecx, %r9d
    00000071: 	cmovel	%edi, %esi
.Ltmp2470:
    00000074: 	addq	$0x20, %rax
    00000078: 	cmpq	%r8, %rax
    0000007b: 	jne	.Ltmp2471 # Offset: 123
    0000007d: 	leal	0x4(,%rbp,4), %ecx
    00000084: 	cmpl	%ecx, %r11d
    00000087: 	jle	.Ltmp2472 # Offset: 135
.Ltmp2475:
    00000089: 	testb	%r10b, %r10b
    0000008c: 	je	.Ltmp2473 # Offset: 140
    0000008e: 	subl	$0x1, %r11d
    00000092: 	movslq	%ecx, %rsi
    00000095: 	subl	%ecx, %r11d
    00000098: 	leaq	(%rbx,%rsi,8), %rax
    0000009c: 	leaq	(%r11,%rsi), %rcx
    000000a0: 	leaq	0x8(%rbx,%rcx,8), %rcx
.Ltmp2474:
    000000a5: 	cmpq	$0x0, (%rax)
    000000a9: 	je	.Ltmp2473 # Offset: 169
    000000ab: 	addq	$0x8, %rax
    000000af: 	cmpq	%rax, %rcx
    000000b2: 	jne	.Ltmp2474 # Offset: 178
.Ltmp2476:
    000000b4: 	xorl	%eax, %eax
    000000b6: 	testb	%dl, %dl
    000000b8: 	popq	%rbx
    000000b9: 	popq	%rbp
    000000ba: 	cmovel	%eax, %r9d
    000000be: 	movl	%r9d, %eax
    000000c1: 	retq # Offset: 193
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2473:
    000000c8: 	xorl	%r9d, %r9d
    000000cb: 	popq	%rbx
    000000cc: 	popq	%rbp
    000000cd: 	movl	%r9d, %eax
    000000d0: 	retq # Offset: 208
    000000d1: 	nopl	(%rax) # Size: 7
.Ltmp2466:
    000000d8: 	xorl	%ecx, %ecx
    000000da: 	movl	%edx, %r9d
    000000dd: 	cmpl	%ecx, %r11d
    000000e0: 	jg	.Ltmp2475 # Offset: 224
    000000e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2472:
    000000e8: 	andl	%r10d, %edx
    000000eb: 	jmp	.Ltmp2476 # Offset: 235
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and6IlEbPKT_ib"

Binary Function "_Z10logic_and7IlEbPKT_ib" after disassembly {
  Number      : 359
  State       : disassembled
  Address     : 0x1d720
  Size        : 0x130
  MaxSize     : 0x130
  Offset      : 0x1d720
  Section     : .text
  Orc Section : .local.text._Z10logic_and7IlEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0358:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movl	%edx, %eax
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movl	%esi, %ebp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	cmpl	$0x3, %esi
    00000016: 	jle	.Ltmp2477 # Offset: 22
    0000001c: 	leal	-0x4(%rsi), %r14d
    00000020: 	movq	%rdi, %rcx
    00000023: 	xorl	%r10d, %r10d
    00000026: 	shrl	$0x2, %r14d
    0000002a: 	movl	%r14d, %esi
    0000002d: 	shlq	$0x5, %rsi
    00000031: 	leaq	0x20(%rdi,%rsi), %r13
    00000036: 	movl	%edx, %edi
    00000038: 	movl	%edx, %esi
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2482:
    00000040: 	movl	%eax, %r8d
    00000043: 	testb	%al, %al
    00000045: 	je	.Ltmp2478 # Offset: 69
    00000047: 	cmpq	$0x1, (%rcx)
    0000004b: 	sbbl	%eax, %eax
    0000004d: 	addl	$0x1, %eax
    00000050: 	cmpq	$0x0, (%rcx)
    00000054: 	cmovel	%r10d, %r8d
.Ltmp2478:
    00000058: 	movl	%edx, %r9d
    0000005b: 	testb	%dl, %dl
    0000005d: 	je	.Ltmp2479 # Offset: 93
    0000005f: 	cmpq	$0x1, 0x8(%rcx)
    00000064: 	sbbl	%edx, %edx
    00000066: 	addl	$0x1, %edx
    00000069: 	cmpq	$0x0, 0x8(%rcx)
    0000006e: 	cmovel	%r10d, %r9d
.Ltmp2479:
    00000072: 	movl	%esi, %r12d
    00000075: 	testb	%sil, %sil
    00000078: 	je	.Ltmp2480 # Offset: 120
    0000007a: 	cmpq	$0x1, 0x10(%rcx)
    0000007f: 	sbbl	%esi, %esi
    00000081: 	addl	$0x1, %esi
    00000084: 	cmpq	$0x0, 0x10(%rcx)
    00000089: 	cmovel	%r10d, %r12d
.Ltmp2480:
    0000008d: 	movl	%edi, %r11d
    00000090: 	testb	%dil, %dil
    00000093: 	je	.Ltmp2481 # Offset: 147
    00000095: 	cmpq	$0x1, 0x18(%rcx)
    0000009a: 	sbbl	%edi, %edi
    0000009c: 	addl	$0x1, %edi
    0000009f: 	cmpq	$0x0, 0x18(%rcx)
    000000a4: 	cmovel	%r10d, %r11d
.Ltmp2481:
    000000a8: 	addq	$0x20, %rcx
    000000ac: 	cmpq	%rcx, %r13
    000000af: 	jne	.Ltmp2482 # Offset: 175
    000000b1: 	leal	0x4(,%r14,4), %ecx
.Ltmp2487:
    000000b9: 	cmpl	%ecx, %ebp
    000000bb: 	jle	.Ltmp2483 # Offset: 187
    000000bd: 	subl	$0x1, %ebp
    000000c0: 	movslq	%ecx, %rsi
    000000c3: 	subl	%ecx, %ebp
    000000c5: 	leaq	(%rbx,%rsi,8), %rdx
    000000c9: 	addq	%rsi, %rbp
    000000cc: 	xorl	%esi, %esi
    000000ce: 	leaq	0x8(%rbx,%rbp,8), %rcx
    000000d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2485:
    000000d8: 	movl	%eax, %r8d
    000000db: 	testb	%al, %al
    000000dd: 	je	.Ltmp2484 # Offset: 221
    000000df: 	cmpq	$0x1, (%rdx)
    000000e3: 	sbbl	%eax, %eax
    000000e5: 	addl	$0x1, %eax
    000000e8: 	cmpq	$0x0, (%rdx)
    000000ec: 	cmovel	%esi, %r8d
.Ltmp2484:
    000000f0: 	addq	$0x8, %rdx
    000000f4: 	cmpq	%rdx, %rcx
    000000f7: 	jne	.Ltmp2485 # Offset: 247
.Ltmp2483:
    000000f9: 	testb	%r8b, %r8b
    000000fc: 	je	.Ltmp2486 # Offset: 252
    000000fe: 	xorl	%r8d, %r8d
    00000101: 	testb	%r9b, %r9b
    00000104: 	je	.Ltmp2486 # Offset: 260
    00000106: 	testb	%r12b, %r12b
    00000109: 	cmovnel	%r11d, %r8d
.Ltmp2486:
    0000010d: 	popq	%rbx
    0000010e: 	movl	%r8d, %eax
    00000111: 	popq	%rbp
    00000112: 	popq	%r12
    00000114: 	popq	%r13
    00000116: 	popq	%r14
    00000118: 	retq # Offset: 280
    00000119: 	nopl	(%rax) # Size: 7
.Ltmp2477:
    00000120: 	movl	%edx, %r9d
    00000123: 	movl	%edx, %r11d
    00000126: 	movl	%edx, %r12d
    00000129: 	movl	%edx, %r8d
    0000012c: 	xorl	%ecx, %ecx
    0000012e: 	jmp	.Ltmp2487 # Offset: 302
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and7IlEbPKT_ib"

Binary Function "_Z10logic_and8IlEbPKT_ib" after disassembly {
  Number      : 360
  State       : disassembled
  Address     : 0x1d850
  Size        : 0x229
  MaxSize     : 0x230
  Offset      : 0x1d850
  Section     : .text
  Orc Section : .local.text._Z10logic_and8IlEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0359:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %eax
    00000008: 	movl	%edx, %ecx
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbp
    00000011: 	pushq	%rbx
    00000012: 	movq	%rdi, -0x10(%rsp)
    00000017: 	movl	%esi, -0x8(%rsp)
    0000001b: 	cmpl	$0x7, %esi
    0000001e: 	jle	.Ltmp2488 # Offset: 30
    00000024: 	leal	-0x8(%rsi), %esi
    00000027: 	movq	%rdi, %rdx
    0000002a: 	movl	%eax, %r12d
    0000002d: 	movl	%eax, %ebp
    0000002f: 	shrl	$0x3, %esi
    00000032: 	movl	%eax, %r10d
    00000035: 	movl	%eax, %r9d
    00000038: 	movl	%esi, -0x4(%rsp)
    0000003c: 	shlq	$0x6, %rsi
    00000040: 	leaq	0x40(%rdi,%rsi), %rbx
    00000045: 	xorl	%edi, %edi
    00000047: 	movl	%eax, %esi
    00000049: 	movq	%rbx, -0x18(%rsp)
    0000004e: 	movl	%eax, %ebx
.Ltmp2497:
    00000050: 	movl	%ecx, %r14d
    00000053: 	testb	%cl, %cl
    00000055: 	je	.Ltmp2489 # Offset: 85
    00000057: 	cmpq	$0x1, (%rdx)
    0000005b: 	sbbl	%ecx, %ecx
    0000005d: 	addl	$0x1, %ecx
    00000060: 	cmpq	$0x0, (%rdx)
    00000064: 	cmovel	%edi, %r14d
.Ltmp2489:
    00000068: 	movl	%eax, %r11d
    0000006b: 	testb	%al, %al
    0000006d: 	je	.Ltmp2490 # Offset: 109
    0000006f: 	cmpq	$0x1, 0x8(%rdx)
    00000074: 	sbbl	%eax, %eax
    00000076: 	addl	$0x1, %eax
    00000079: 	cmpq	$0x0, 0x8(%rdx)
    0000007e: 	cmovel	%edi, %r11d
.Ltmp2490:
    00000082: 	movl	%r9d, %r15d
    00000085: 	testb	%r9b, %r9b
    00000088: 	je	.Ltmp2491 # Offset: 136
    0000008a: 	cmpq	$0x1, 0x10(%rdx)
    0000008f: 	sbbl	%r9d, %r9d
    00000092: 	addl	$0x1, %r9d
    00000096: 	cmpq	$0x0, 0x10(%rdx)
    0000009b: 	cmovel	%edi, %r15d
.Ltmp2491:
    0000009f: 	movb	%r10b, -0x1a(%rsp)
    000000a4: 	movl	%r10d, %r8d
    000000a7: 	testb	%r10b, %r10b
    000000aa: 	je	.Ltmp2492 # Offset: 170
    000000ac: 	cmpq	$0x1, 0x18(%rdx)
    000000b1: 	sbbl	%r10d, %r10d
    000000b4: 	addl	$0x1, %r10d
    000000b8: 	cmpq	$0x0, 0x18(%rdx)
    000000bd: 	cmovel	%edi, %r8d
    000000c1: 	movb	%r8b, -0x1a(%rsp)
.Ltmp2492:
    000000c6: 	movb	%sil, -0x1c(%rsp)
    000000cb: 	movl	%esi, %r8d
    000000ce: 	testb	%sil, %sil
    000000d1: 	je	.Ltmp2493 # Offset: 209
    000000d3: 	cmpq	$0x1, 0x20(%rdx)
    000000d8: 	sbbl	%esi, %esi
    000000da: 	addl	$0x1, %esi
    000000dd: 	cmpq	$0x0, 0x20(%rdx)
    000000e2: 	cmovel	%edi, %r8d
    000000e6: 	movb	%r8b, -0x1c(%rsp)
.Ltmp2493:
    000000eb: 	movl	%ebx, %r13d
    000000ee: 	testb	%bl, %bl
    000000f0: 	je	.Ltmp2494 # Offset: 240
    000000f2: 	cmpq	$0x1, 0x28(%rdx)
    000000f7: 	sbbl	%ebx, %ebx
    000000f9: 	addl	$0x1, %ebx
    000000fc: 	cmpq	$0x0, 0x28(%rdx)
    00000101: 	cmovel	%edi, %r13d
.Ltmp2494:
    00000105: 	movb	%bpl, -0x1b(%rsp)
    0000010a: 	movl	%ebp, %r8d
    0000010d: 	testb	%bpl, %bpl
    00000110: 	je	.Ltmp2495 # Offset: 272
    00000112: 	cmpq	$0x1, 0x30(%rdx)
    00000117: 	sbbl	%ebp, %ebp
    00000119: 	addl	$0x1, %ebp
    0000011c: 	cmpq	$0x0, 0x30(%rdx)
    00000121: 	cmovel	%edi, %r8d
    00000125: 	movb	%r8b, -0x1b(%rsp)
.Ltmp2495:
    0000012a: 	movb	%r12b, -0x19(%rsp)
    0000012f: 	movl	%r12d, %r8d
    00000132: 	testb	%r12b, %r12b
    00000135: 	je	.Ltmp2496 # Offset: 309
    00000137: 	cmpq	$0x1, 0x38(%rdx)
    0000013c: 	sbbl	%r12d, %r12d
    0000013f: 	addl	$0x1, %r12d
    00000143: 	cmpq	$0x0, 0x38(%rdx)
    00000148: 	cmovel	%edi, %r8d
    0000014c: 	movb	%r8b, -0x19(%rsp)
.Ltmp2496:
    00000151: 	addq	$0x40, %rdx
    00000155: 	cmpq	%rdx, -0x18(%rsp)
    0000015a: 	jne	.Ltmp2497 # Offset: 346
    00000160: 	movl	-0x4(%rsp), %eax
    00000164: 	movzbl	-0x1c(%rsp), %r8d
    0000016a: 	movl	%r14d, %esi
    0000016d: 	movl	%r11d, %r14d
    00000170: 	leal	0x8(,%rax,8), %edi
.Ltmp2504:
    00000177: 	movl	-0x8(%rsp), %ebx
    0000017b: 	cmpl	%ebx, %edi
    0000017d: 	jge	.Ltmp2498 # Offset: 381
    0000017f: 	subl	$0x1, %ebx
    00000182: 	movslq	%edi, %rsi
    00000185: 	movq	-0x10(%rsp), %r11
    0000018a: 	movl	%ebx, %edx
    0000018c: 	subl	%edi, %edx
    0000018e: 	leaq	(%r11,%rsi,8), %rax
    00000192: 	xorl	%edi, %edi
    00000194: 	addq	%rsi, %rdx
    00000197: 	leaq	0x8(%r11,%rdx,8), %rdx
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp2500:
    000001a0: 	movl	%ecx, %esi
    000001a2: 	testb	%cl, %cl
    000001a4: 	je	.Ltmp2499 # Offset: 420
    000001a6: 	cmpq	$0x1, (%rax)
    000001aa: 	sbbl	%ecx, %ecx
    000001ac: 	addl	$0x1, %ecx
    000001af: 	cmpq	$0x0, (%rax)
    000001b3: 	cmovel	%edi, %esi
.Ltmp2499:
    000001b6: 	addq	$0x8, %rax
    000001ba: 	cmpq	%rax, %rdx
    000001bd: 	jne	.Ltmp2500 # Offset: 445
.Ltmp2498:
    000001bf: 	testb	%sil, %sil
    000001c2: 	je	.Ltmp2501 # Offset: 450
    000001c4: 	xorl	%esi, %esi
    000001c6: 	testb	%r14b, %r14b
    000001c9: 	jne	.Ltmp2502 # Offset: 457
.Ltmp2501:
    000001cb: 	testb	%r8b, %r8b
    000001ce: 	je	.Ltmp2503 # Offset: 462
    000001d0: 	xorl	%r8d, %r8d
    000001d3: 	testb	%r13b, %r13b
    000001d6: 	je	.Ltmp2503 # Offset: 470
    000001d8: 	cmpb	$0x0, -0x1b(%rsp)
    000001dd: 	cmovnel	%esi, %r8d
.Ltmp2503:
    000001e1: 	popq	%rbx
    000001e2: 	movl	%r8d, %eax
    000001e5: 	popq	%rbp
    000001e6: 	popq	%r12
    000001e8: 	popq	%r13
    000001ea: 	popq	%r14
    000001ec: 	popq	%r15
    000001ee: 	retq # Offset: 494
    000001ef: 	nop # Size: 1
.Ltmp2502:
    000001f0: 	testb	%r15b, %r15b
    000001f3: 	je	.Ltmp2501 # Offset: 499
    000001f5: 	movzbl	-0x19(%rsp), %eax
    000001fa: 	cmpb	$0x0, -0x1a(%rsp)
    000001ff: 	cmovnel	%eax, %esi
    00000202: 	jmp	.Ltmp2501 # Offset: 514
    00000204: 	nopl	(%rax) # Size: 4
.Ltmp2488:
    00000208: 	movb	%dl, -0x19(%rsp)
    0000020c: 	movl	%edx, %esi
    0000020e: 	movl	%edx, %r13d
    00000211: 	movl	%edx, %r15d
    00000214: 	movb	%dl, -0x1b(%rsp)
    00000218: 	movl	%edx, %r14d
    0000021b: 	movl	%edx, %r8d
    0000021e: 	xorl	%edi, %edi
    00000220: 	movb	%dl, -0x1a(%rsp)
    00000224: 	jmp	.Ltmp2504 # Offset: 548
DWARF CFI Instructions:
    <empty>
End of Function "_Z10logic_and8IlEbPKT_ib"

Binary Function "_Z9logic_or1IlEbPKT_ib" after disassembly {
  Number      : 361
  State       : disassembled
  Address     : 0x1da80
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1da80
  Section     : .text
  Orc Section : .local.text._Z9logic_or1IlEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0360:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	testl	%esi, %esi
    00000008: 	jle	.Ltmp2505 # Offset: 8
    0000000a: 	leal	-0x1(%rsi), %edx
    0000000d: 	leaq	0x8(%rdi,%rdx,8), %rcx
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2506:
    00000018: 	cmpq	$0x0, (%rdi)
    0000001c: 	setne	%dl
    0000001f: 	addq	$0x8, %rdi
    00000023: 	orl	%edx, %eax
    00000025: 	cmpq	%rdi, %rcx
    00000028: 	jne	.Ltmp2506 # Offset: 40
.Ltmp2505:
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or1IlEbPKT_ib"

Binary Function "_Z12logic_or_optIlEbPKT_ib" after disassembly {
  Number      : 362
  State       : disassembled
  Address     : 0x1dab0
  Size        : 0x43
  MaxSize     : 0x50
  Offset      : 0x1dab0
  Section     : .text
  Orc Section : .local.text._Z12logic_or_optIlEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0361:
    00000000: 	endbr64
    00000004: 	testl	%esi, %esi
    00000006: 	jle	.Ltmp2507 # Offset: 6
    00000008: 	cmpb	$0x1, %dl
    0000000b: 	je	.Ltmp2507 # Offset: 11
    0000000d: 	movl	$0x1, %eax
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2508:
    00000018: 	movq	-0x8(%rdi,%rax,8), %rdx
    0000001d: 	cmpl	%eax, %esi
    0000001f: 	setg	%r8b
    00000023: 	testq	%rdx, %rdx
    00000026: 	sete	%cl
    00000029: 	addq	$0x1, %rax
    0000002d: 	testb	%cl, %r8b
    00000030: 	jne	.Ltmp2508 # Offset: 48
    00000032: 	testq	%rdx, %rdx
    00000035: 	setne	%al
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp2507:
    00000040: 	movl	%edx, %eax
    00000042: 	retq # Offset: 66
DWARF CFI Instructions:
    <empty>
End of Function "_Z12logic_or_optIlEbPKT_ib"

Binary Function "_Z9logic_or2IlEbPKT_ib" after disassembly {
  Number      : 363
  State       : disassembled
  Address     : 0x1db00
  Size        : 0x87
  MaxSize     : 0x90
  Offset      : 0x1db00
  Section     : .text
  Orc Section : .local.text._Z9logic_or2IlEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0362:
    00000000: 	endbr64
    00000004: 	movslq	%esi, %rsi
    00000007: 	movl	%edx, %r8d
    0000000a: 	leaq	(%rdi,%rsi,8), %rcx
    0000000e: 	cmpq	%rcx, %rdi
    00000011: 	jne	.Ltmp2509 # Offset: 17
    00000013: 	jmp	.Ltmp2510 # Offset: 19
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp2515:
    00000018: 	testb	%r8b, %r8b
    0000001b: 	jne	.Ltmp2511 # Offset: 27
.Ltmp2513:
    0000001d: 	cmpq	%rax, %rcx
    00000020: 	je	.Ltmp2512 # Offset: 32
    00000022: 	addq	$0x8, %rax
    00000026: 	cmpq	$0x0, -0x8(%rax)
    0000002b: 	je	.Ltmp2513 # Offset: 43
.Ltmp2518:
    0000002d: 	movq	%rax, %rdi
    00000030: 	movl	$0x1, %r8d
    00000036: 	cmpq	%rdi, %rcx
    00000039: 	je	.Ltmp2514 # Offset: 57
.Ltmp2509:
    0000003b: 	cmpq	$0x0, (%rdi)
    0000003f: 	leaq	0x8(%rdi), %rax
    00000043: 	je	.Ltmp2515 # Offset: 67
.Ltmp2517:
    00000045: 	cmpq	%rax, %rcx
    00000048: 	je	.Ltmp2514 # Offset: 72
    0000004a: 	leaq	0x8(%rax), %rdi
    0000004e: 	movl	$0x1, %r8d
    00000054: 	cmpq	%rdi, %rcx
    00000057: 	jne	.Ltmp2509 # Offset: 87
.Ltmp2514:
    00000059: 	movl	$0x1, %eax
    0000005e: 	retq # Offset: 94
    0000005f: 	nop # Size: 1
.Ltmp2511:
    00000060: 	cmpq	%rax, %rcx
    00000063: 	je	.Ltmp2516 # Offset: 99
    00000065: 	cmpq	$0x0, 0x8(%rdi)
    0000006a: 	leaq	0x10(%rdi), %rax
    0000006e: 	jne	.Ltmp2517 # Offset: 110
    00000070: 	jmp	.Ltmp2518 # Offset: 112
    00000072: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2512:
    00000078: 	xorl	%eax, %eax
    0000007a: 	retq # Offset: 122
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2510:
    00000080: 	movl	%edx, %eax
    00000082: 	retq # Offset: 130
.Ltmp2516:
    00000083: 	movl	%r8d, %eax
    00000086: 	retq # Offset: 134
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or2IlEbPKT_ib"

Binary Function "_Z9logic_or3IlEbPKT_ib" after disassembly {
  Number      : 364
  State       : disassembled
  Address     : 0x1db90
  Size        : 0x94
  MaxSize     : 0xa0
  Offset      : 0x1db90
  Section     : .text
  Orc Section : .local.text._Z9logic_or3IlEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0363:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movl	%edx, %eax
    00000009: 	movl	%esi, %edi
    0000000b: 	cmpl	$0x1, %esi
    0000000e: 	jle	.Ltmp2519 # Offset: 14
    00000014: 	leal	-0x2(%rsi), %r9d
    00000018: 	movq	%r8, %rcx
    0000001b: 	shrl	%r9d
    0000001e: 	movl	%r9d, %edx
    00000021: 	shlq	$0x4, %rdx
    00000025: 	leaq	0x10(%r8,%rdx), %rsi
    0000002a: 	jmp	.Ltmp2520 # Offset: 42
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp2522:
    00000030: 	addq	$0x10, %rcx
    00000034: 	cmpq	%rcx, %rsi
    00000037: 	je	.Ltmp2521 # Offset: 55
.Ltmp2520:
    00000039: 	cmpq	$0x0, (%rcx)
    0000003d: 	setne	%dl
    00000040: 	orb	%dl, %al
    00000042: 	jne	.Ltmp2522 # Offset: 66
    00000044: 	cmpq	$0x0, 0x8(%rcx)
    00000049: 	setne	%al
    0000004c: 	addq	$0x10, %rcx
    00000050: 	cmpq	%rcx, %rsi
    00000053: 	jne	.Ltmp2520 # Offset: 83
.Ltmp2521:
    00000055: 	leal	0x2(%r9,%r9), %edx
.Ltmp2524:
    0000005a: 	cmpl	%edx, %edi
    0000005c: 	jle	.Ltmp2523 # Offset: 92
    0000005e: 	movslq	%edx, %rcx
    00000061: 	cmpq	$0x0, (%r8,%rcx,8)
    00000066: 	leaq	(,%rcx,8), %rsi
    0000006e: 	setne	%cl
    00000071: 	addl	$0x1, %edx
    00000074: 	orl	%ecx, %eax
    00000076: 	cmpl	%edx, %edi
    00000078: 	jle	.Ltmp2523 # Offset: 120
    0000007a: 	cmpq	$0x0, 0x8(%r8,%rsi)
    00000080: 	setne	%dl
    00000083: 	orl	%edx, %eax
.Ltmp2523:
    00000085: 	retq # Offset: 133
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2519:
    00000090: 	xorl	%edx, %edx
    00000092: 	jmp	.Ltmp2524 # Offset: 146
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or3IlEbPKT_ib"

Binary Function "_Z9logic_or4IlEbPKT_ib" after disassembly {
  Number      : 365
  State       : disassembled
  Address     : 0x1dc30
  Size        : 0xcc
  MaxSize     : 0xd0
  Offset      : 0x1dc30
  Section     : .text
  Orc Section : .local.text._Z9logic_or4IlEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0364:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	cmpl	$0x3, %esi
    00000009: 	jle	.Ltmp2525 # Offset: 9
    0000000f: 	leal	-0x4(%rsi), %r8d
    00000013: 	movq	%rdi, %rcx
    00000016: 	shrl	$0x2, %r8d
    0000001a: 	movl	%r8d, %edx
    0000001d: 	shlq	$0x5, %rdx
    00000021: 	leaq	0x20(%rdi,%rdx), %rdx
    00000026: 	jmp	.Ltmp2526 # Offset: 38
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2529:
    00000030: 	testb	%al, %al
    00000032: 	jne	.Ltmp2527 # Offset: 50
    00000034: 	cmpq	$0x0, 0x8(%rcx)
    00000039: 	movl	$0x1, %eax
    0000003e: 	jne	.Ltmp2527 # Offset: 62
    00000040: 	cmpq	$0x0, 0x10(%rcx)
    00000045: 	jne	.Ltmp2527 # Offset: 69
    00000047: 	cmpq	$0x0, 0x18(%rcx)
    0000004c: 	setne	%al
.Ltmp2527:
    0000004f: 	addq	$0x20, %rcx
    00000053: 	cmpq	%rcx, %rdx
    00000056: 	je	.Ltmp2528 # Offset: 86
.Ltmp2526:
    00000058: 	cmpq	$0x0, (%rcx)
    0000005c: 	je	.Ltmp2529 # Offset: 92
    0000005e: 	addq	$0x20, %rcx
    00000062: 	movl	$0x1, %eax
    00000067: 	cmpq	%rcx, %rdx
    0000006a: 	jne	.Ltmp2526 # Offset: 106
.Ltmp2528:
    0000006c: 	leal	0x4(,%r8,4), %edx
.Ltmp2531:
    00000074: 	cmpl	%edx, %esi
    00000076: 	jle	.Ltmp2530 # Offset: 118
    00000078: 	movslq	%edx, %rcx
    0000007b: 	cmpq	$0x0, (%rdi,%rcx,8)
    00000080: 	leaq	(,%rcx,8), %r8
    00000088: 	setne	%cl
    0000008b: 	orl	%ecx, %eax
    0000008d: 	leal	0x1(%rdx), %ecx
    00000090: 	cmpl	%ecx, %esi
    00000092: 	jle	.Ltmp2530 # Offset: 146
    00000094: 	cmpq	$0x0, 0x8(%rdi,%r8)
    0000009a: 	setne	%cl
    0000009d: 	orl	%ecx, %eax
    0000009f: 	leal	0x2(%rdx), %ecx
    000000a2: 	cmpl	%esi, %ecx
    000000a4: 	jge	.Ltmp2530 # Offset: 164
    000000a6: 	cmpq	$0x0, 0x10(%rdi,%r8)
    000000ac: 	setne	%cl
    000000af: 	addl	$0x3, %edx
    000000b2: 	orl	%ecx, %eax
    000000b4: 	cmpl	%esi, %edx
    000000b6: 	jge	.Ltmp2530 # Offset: 182
    000000b8: 	cmpq	$0x0, 0x18(%rdi,%r8)
    000000be: 	setne	%dl
    000000c1: 	orl	%edx, %eax
.Ltmp2530:
    000000c3: 	retq # Offset: 195
    000000c4: 	nopl	(%rax) # Size: 4
.Ltmp2525:
    000000c8: 	xorl	%edx, %edx
    000000ca: 	jmp	.Ltmp2531 # Offset: 202
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or4IlEbPKT_ib"

Binary Function "_Z9logic_or5IlEbPKT_ib" after disassembly {
  Number      : 366
  State       : disassembled
  Address     : 0x1dd00
  Size        : 0x94
  MaxSize     : 0xa0
  Offset      : 0x1dd00
  Section     : .text
  Orc Section : .local.text._Z9logic_or5IlEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0365:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	movl	%edx, %eax
    00000009: 	movl	%esi, %edi
    0000000b: 	cmpl	$0x1, %esi
    0000000e: 	jle	.Ltmp2532 # Offset: 14
    00000014: 	leal	-0x2(%rsi), %r10d
    00000018: 	movq	%r9, %rcx
    0000001b: 	shrl	%r10d
    0000001e: 	movl	%r10d, %esi
    00000021: 	shlq	$0x4, %rsi
    00000025: 	leaq	0x10(%r9,%rsi), %r8
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2533:
    00000030: 	cmpq	$0x0, (%rcx)
    00000034: 	setne	%sil
    00000038: 	orl	%esi, %eax
    0000003a: 	cmpq	$0x0, 0x8(%rcx)
    0000003f: 	setne	%sil
    00000043: 	addq	$0x10, %rcx
    00000047: 	orl	%esi, %edx
    00000049: 	cmpq	%rcx, %r8
    0000004c: 	jne	.Ltmp2533 # Offset: 76
    0000004e: 	leal	0x2(%r10,%r10), %esi
.Ltmp2536:
    00000053: 	cmpl	%esi, %edi
    00000055: 	jle	.Ltmp2534 # Offset: 85
    00000057: 	subl	$0x1, %edi
    0000005a: 	movslq	%esi, %r8
    0000005d: 	subl	%esi, %edi
    0000005f: 	leaq	(%r9,%r8,8), %rcx
    00000063: 	addq	%r8, %rdi
    00000066: 	leaq	0x8(%r9,%rdi,8), %rdi
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2535:
    00000070: 	cmpq	$0x0, (%rcx)
    00000074: 	setne	%sil
    00000078: 	addq	$0x8, %rcx
    0000007c: 	orl	%esi, %eax
    0000007e: 	cmpq	%rcx, %rdi
    00000081: 	jne	.Ltmp2535 # Offset: 129
.Ltmp2534:
    00000083: 	orl	%edx, %eax
    00000085: 	retq # Offset: 133
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2532:
    00000090: 	xorl	%esi, %esi
    00000092: 	jmp	.Ltmp2536 # Offset: 146
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or5IlEbPKT_ib"

Binary Function "_Z9logic_or6IlEbPKT_ib" after disassembly {
  Number      : 367
  State       : disassembled
  Address     : 0x1dda0
  Size        : 0xb9
  MaxSize     : 0xc0
  Offset      : 0x1dda0
  Section     : .text
  Orc Section : .local.text._Z9logic_or6IlEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0366:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %r10
    00000008: 	movl	%esi, %r9d
    0000000b: 	movl	%edx, %eax
    0000000d: 	cmpl	$0x3, %esi
    00000010: 	jle	.Ltmp2537 # Offset: 16
    00000016: 	leal	-0x4(%rsi), %ebx
    00000019: 	movq	%rdi, %rcx
    0000001c: 	shrl	$0x2, %ebx
    0000001f: 	movl	%ebx, %esi
    00000021: 	shlq	$0x5, %rsi
    00000025: 	leaq	0x20(%rdi,%rsi), %r11
    0000002a: 	movl	%edx, %edi
    0000002c: 	movl	%edx, %esi
    0000002e: 	nop # Size: 2
.Ltmp2538:
    00000030: 	cmpq	$0x0, (%rcx)
    00000034: 	setne	%r8b
    00000038: 	orl	%r8d, %eax
    0000003b: 	cmpq	$0x0, 0x8(%rcx)
    00000040: 	setne	%r8b
    00000044: 	orl	%r8d, %edx
    00000047: 	cmpq	$0x0, 0x10(%rcx)
    0000004c: 	setne	%r8b
    00000050: 	orl	%r8d, %esi
    00000053: 	cmpq	$0x0, 0x18(%rcx)
    00000058: 	setne	%r8b
    0000005c: 	addq	$0x20, %rcx
    00000060: 	orl	%r8d, %edi
    00000063: 	cmpq	%rcx, %r11
    00000066: 	jne	.Ltmp2538 # Offset: 102
    00000068: 	leal	0x4(,%rbx,4), %r8d
.Ltmp2541:
    00000070: 	cmpl	%r8d, %r9d
    00000073: 	jle	.Ltmp2539 # Offset: 115
    00000075: 	subl	$0x1, %r9d
    00000079: 	movslq	%r8d, %r11
    0000007c: 	subl	%r8d, %r9d
    0000007f: 	leaq	(%r10,%r11,8), %rcx
    00000083: 	addq	%r11, %r9
    00000086: 	leaq	0x8(%r10,%r9,8), %r9
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2540:
    00000090: 	cmpq	$0x0, (%rcx)
    00000094: 	setne	%r8b
    00000098: 	addq	$0x8, %rcx
    0000009c: 	orl	%r8d, %eax
    0000009f: 	cmpq	%rcx, %r9
    000000a2: 	jne	.Ltmp2540 # Offset: 162
.Ltmp2539:
    000000a4: 	orl	%edi, %esi
    000000a6: 	orb	%dl, %al
    000000a8: 	popq	%rbx
    000000a9: 	cmovel	%esi, %eax
    000000ac: 	retq # Offset: 172
    000000ad: 	nopl	(%rax) # Size: 3
.Ltmp2537:
    000000b0: 	movl	%edx, %edi
    000000b2: 	movl	%edx, %esi
    000000b4: 	xorl	%r8d, %r8d
    000000b7: 	jmp	.Ltmp2541 # Offset: 183
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or6IlEbPKT_ib"

Binary Function "_Z9logic_or7IlEbPKT_ib" after disassembly {
  Number      : 368
  State       : disassembled
  Address     : 0x1de60
  Size        : 0x101
  MaxSize     : 0x110
  Offset      : 0x1de60
  Section     : .text
  Orc Section : .local.text._Z9logic_or7IlEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0367:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movq	%rdi, %r11
    00000009: 	movl	%esi, %r10d
    0000000c: 	movl	%edx, %ecx
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	cmpl	$0x3, %esi
    00000017: 	jle	.Ltmp2542 # Offset: 23
    0000001d: 	leal	-0x4(%rsi), %r14d
    00000021: 	movq	%rdi, %rax
    00000024: 	movl	%edx, %r8d
    00000027: 	shrl	$0x2, %r14d
    0000002b: 	movl	%r14d, %esi
    0000002e: 	shlq	$0x5, %rsi
    00000032: 	leaq	0x20(%rdi,%rsi), %r13
    00000037: 	movl	%edx, %edi
    00000039: 	movl	$0x1, %esi
    0000003e: 	nop # Size: 2
.Ltmp2543:
    00000040: 	cmpq	$0x0, (%rax)
    00000044: 	cmovnel	%esi, %ecx
    00000047: 	cmpq	$0x0, 0x8(%rax)
    0000004c: 	cmovnel	%esi, %edx
    0000004f: 	cmpq	$0x0, 0x10(%rax)
    00000054: 	cmovnel	%esi, %edi
    00000057: 	cmpq	$0x0, 0x18(%rax)
    0000005c: 	movl	%ecx, %r9d
    0000005f: 	cmovnel	%esi, %r8d
    00000063: 	addq	$0x20, %rax
    00000067: 	movl	%edx, %ebx
    00000069: 	movl	%edi, %r12d
    0000006c: 	movl	%r8d, %ebp
    0000006f: 	cmpq	%r13, %rax
    00000072: 	jne	.Ltmp2543 # Offset: 114
    00000074: 	leal	0x4(,%r14,4), %edx
.Ltmp2548:
    0000007c: 	cmpl	%edx, %r10d
    0000007f: 	jle	.Ltmp2544 # Offset: 127
    00000081: 	subl	$0x1, %r10d
    00000085: 	movslq	%edx, %rsi
    00000088: 	subl	%edx, %r10d
    0000008b: 	leaq	(%r11,%rsi,8), %rax
    0000008f: 	movl	$0x1, %edx
    00000094: 	addq	%rsi, %r10
    00000097: 	leaq	0x8(%r11,%r10,8), %rsi
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp2545:
    000000a0: 	cmpq	$0x0, (%rax)
    000000a4: 	cmovnel	%edx, %ecx
    000000a7: 	addq	$0x8, %rax
    000000ab: 	movl	%ecx, %r9d
    000000ae: 	cmpq	%rax, %rsi
    000000b1: 	jne	.Ltmp2545 # Offset: 177
.Ltmp2544:
    000000b3: 	testb	%r9b, %r9b
    000000b6: 	jne	.Ltmp2546 # Offset: 182
    000000b8: 	movl	%ebx, %r9d
    000000bb: 	testb	%bl, %bl
    000000bd: 	je	.Ltmp2547 # Offset: 189
.Ltmp2546:
    000000bf: 	popq	%rbx
    000000c0: 	movl	%r9d, %eax
    000000c3: 	popq	%rbp
    000000c4: 	popq	%r12
    000000c6: 	popq	%r13
    000000c8: 	popq	%r14
    000000ca: 	retq # Offset: 202
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2547:
    000000d0: 	testb	%r12b, %r12b
    000000d3: 	movl	%ebp, %r9d
    000000d6: 	popq	%rbx
    000000d7: 	popq	%rbp
    000000d8: 	cmovnel	%r12d, %r9d
    000000dc: 	popq	%r12
    000000de: 	popq	%r13
    000000e0: 	popq	%r14
    000000e2: 	movl	%r9d, %eax
    000000e5: 	retq # Offset: 229
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2542:
    000000f0: 	movl	%edx, %ebx
    000000f2: 	movl	%edx, %r9d
    000000f5: 	movl	%edx, %ebp
    000000f7: 	movl	%edx, %r12d
    000000fa: 	xorl	%edx, %edx
    000000fc: 	jmp	.Ltmp2548 # Offset: 252
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or7IlEbPKT_ib"

Binary Function "_Z9logic_or8IlEbPKT_ib" after disassembly {
  Number      : 369
  State       : disassembled
  Address     : 0x1df70
  Size        : 0x1a2
  MaxSize     : 0x1b0
  Offset      : 0x1df70
  Section     : .text
  Orc Section : .local.text._Z9logic_or8IlEbPKT_ib
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0368:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %eax
    00000008: 	pushq	%r14
    0000000a: 	pushq	%r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	movl	%esi, %ebx
    00000012: 	movl	%esi, -0x8(%rsp)
    00000016: 	movl	%edx, %esi
    00000018: 	movq	%rdi, -0x10(%rsp)
    0000001d: 	cmpl	$0x7, %ebx
    00000020: 	jle	.Ltmp2549 # Offset: 32
    00000026: 	leal	-0x8(%rbx), %ecx
    00000029: 	movq	%rdi, %rdx
    0000002c: 	movl	%eax, %ebp
    0000002e: 	movl	%eax, %ebx
    00000030: 	shrl	$0x3, %ecx
    00000033: 	movl	%eax, %r11d
    00000036: 	movl	%eax, %r10d
    00000039: 	movl	%eax, %r9d
    0000003c: 	movl	%ecx, -0x4(%rsp)
    00000040: 	shlq	$0x6, %rcx
    00000044: 	leaq	0x40(%rdi,%rcx), %rdi
    00000049: 	movl	$0x1, %ecx
    0000004e: 	movq	%rdi, -0x20(%rsp)
    00000053: 	movl	%eax, %edi
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp2550:
    00000058: 	cmpq	$0x0, (%rdx)
    0000005c: 	cmovnel	%ecx, %esi
    0000005f: 	cmpq	$0x0, 0x8(%rdx)
    00000064: 	cmovnel	%ecx, %eax
    00000067: 	cmpq	$0x0, 0x10(%rdx)
    0000006c: 	cmovnel	%ecx, %edi
    0000006f: 	cmpq	$0x0, 0x18(%rdx)
    00000074: 	cmovnel	%ecx, %r9d
    00000078: 	cmpq	$0x0, 0x20(%rdx)
    0000007d: 	movl	%eax, %r12d
    00000080: 	cmovnel	%ecx, %r10d
    00000084: 	cmpq	$0x0, 0x28(%rdx)
    00000089: 	movl	%edi, %r15d
    0000008c: 	cmovnel	%ecx, %r11d
    00000090: 	cmpq	$0x0, 0x30(%rdx)
    00000095: 	movb	%r9b, -0x13(%rsp)
    0000009a: 	cmovnel	%ecx, %ebx
    0000009d: 	cmpq	$0x0, 0x38(%rdx)
    000000a2: 	movl	%r10d, %r8d
    000000a5: 	cmovnel	%ecx, %ebp
    000000a8: 	movl	%r11d, %r13d
    000000ab: 	addq	$0x40, %rdx
    000000af: 	movb	%bl, -0x12(%rsp)
    000000b3: 	movb	%bpl, -0x11(%rsp)
    000000b8: 	cmpq	%rdx, -0x20(%rsp)
    000000bd: 	jne	.Ltmp2550 # Offset: 189
    000000bf: 	movl	-0x4(%rsp), %eax
    000000c3: 	movl	%r12d, %r14d
    000000c6: 	movl	%esi, %r12d
    000000c9: 	leal	0x8(,%rax,8), %ecx
.Ltmp2557:
    000000d0: 	movl	-0x8(%rsp), %ebx
    000000d4: 	cmpl	%ecx, %ebx
    000000d6: 	jle	.Ltmp2551 # Offset: 214
    000000d8: 	subl	$0x1, %ebx
    000000db: 	movslq	%ecx, %rdi
    000000de: 	movq	-0x10(%rsp), %r9
    000000e3: 	movl	%ebx, %edx
    000000e5: 	subl	%ecx, %edx
    000000e7: 	leaq	(%r9,%rdi,8), %rax
    000000eb: 	addq	%rdi, %rdx
    000000ee: 	leaq	0x8(%r9,%rdx,8), %rcx
    000000f3: 	movl	$0x1, %edx
    000000f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2552:
    00000100: 	cmpq	$0x0, (%rax)
    00000104: 	cmovnel	%edx, %esi
    00000107: 	addq	$0x8, %rax
    0000010b: 	movl	%esi, %r12d
    0000010e: 	cmpq	%rcx, %rax
    00000111: 	jne	.Ltmp2552 # Offset: 273
.Ltmp2551:
    00000113: 	testb	%r12b, %r12b
    00000116: 	jne	.Ltmp2553 # Offset: 278
    00000118: 	movl	%r14d, %r12d
    0000011b: 	testb	%r14b, %r14b
    0000011e: 	je	.Ltmp2554 # Offset: 286
.Ltmp2553:
    00000120: 	testb	%r8b, %r8b
    00000123: 	jne	.Ltmp2555 # Offset: 291
    00000125: 	movl	%r13d, %r8d
    00000128: 	testb	%r13b, %r13b
    0000012b: 	je	.Ltmp2556 # Offset: 299
.Ltmp2555:
    0000012d: 	popq	%rbx
    0000012e: 	movl	%r8d, %eax
    00000131: 	popq	%rbp
    00000132: 	popq	%r12
    00000134: 	popq	%r13
    00000136: 	popq	%r14
    00000138: 	popq	%r15
    0000013a: 	retq # Offset: 314
    0000013b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2556:
    00000140: 	movzbl	-0x12(%rsp), %eax
    00000145: 	orb	-0x11(%rsp), %r12b
    0000014a: 	popq	%rbx
    0000014b: 	popq	%rbp
    0000014c: 	testb	%al, %al
    0000014e: 	movl	%eax, %r8d
    00000151: 	cmovel	%r12d, %r8d
    00000155: 	popq	%r12
    00000157: 	popq	%r13
    00000159: 	popq	%r14
    0000015b: 	popq	%r15
    0000015d: 	movl	%r8d, %eax
    00000160: 	retq # Offset: 352
    00000161: 	nopl	(%rax) # Size: 7
.Ltmp2554:
    00000168: 	movzbl	-0x13(%rsp), %r12d
    0000016e: 	testb	%r15b, %r15b
    00000171: 	cmovnel	%r15d, %r12d
    00000175: 	jmp	.Ltmp2553 # Offset: 373
    00000177: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2549:
    00000180: 	movb	%dl, -0x11(%rsp)
    00000184: 	movl	%edx, %r12d
    00000187: 	movl	%edx, %r13d
    0000018a: 	movl	%edx, %r15d
    0000018d: 	movb	%dl, -0x12(%rsp)
    00000191: 	movl	%edx, %r14d
    00000194: 	movl	%edx, %r8d
    00000197: 	xorl	%ecx, %ecx
    00000199: 	movb	%dl, -0x13(%rsp)
    0000019d: 	jmp	.Ltmp2557 # Offset: 413
DWARF CFI Instructions:
    <empty>
End of Function "_Z9logic_or8IlEbPKT_ib"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
  Number      : 370
  State       : disassembled
  Address     : 0x1e120
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0x1e120
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0369:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	0x20(%rdi), %rcx
    00000019: 	movq	0x30(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	0x10(%rdi), %rbp
    00000025: 	movq	%rcx, 0x10(%rsp)
    0000002a: 	movq	0x28(%rdi), %rcx
    0000002e: 	movq	%rax, 0x8(%rsp)
    00000033: 	movq	0x48(%rdi), %rax
    00000037: 	leaq	0x8(%rcx), %r12
    0000003b: 	movq	%rcx, 0x18(%rsp)
    00000040: 	movq	%rax, (%rsp)
    00000044: 	cmpq	%r12, %rax
    00000047: 	jbe	.Ltmp2558 # Offset: 71
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp2561:
    00000050: 	movq	(%r12), %r15
    00000054: 	leaq	0x200(%r15), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2560:
    00000060: 	movq	(%r15), %rdi
    00000063: 	leaq	0x10(%r15), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp2559 # Offset: 106
    00000070: 	movq	0x10(%r15), %rax
    00000074: 	addq	$0x20, %r15
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%r15, %rbx
    00000084: 	jne	.Ltmp2560 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp2561 # Offset: 142
.Ltmp2558:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x18(%rsp)
    00000099: 	je	.Ltmp2562 # Offset: 153
    0000009f: 	cmpq	0x10(%rsp), %rbp
    000000a4: 	je	.Ltmp2563 # Offset: 164
.Ltmp2566:
    000000a6: 	movq	(%rbp), %rdi
    000000aa: 	leaq	0x10(%rbp), %rax
    000000ae: 	cmpq	%rax, %rdi
    000000b1: 	je	.Ltmp2564 # Offset: 177
.Ltmp2565:
    000000b3: 	movq	0x10(%rbp), %rax
    000000b7: 	addq	$0x20, %rbp
    000000bb: 	leaq	0x1(%rax), %rsi
    000000bf: 	callq	_ZdlPvm@PLT # Offset: 191
    000000c4: 	cmpq	%rbp, 0x10(%rsp)
    000000c9: 	je	.Ltmp2563 # Offset: 201
    000000cb: 	movq	(%rbp), %rdi
    000000cf: 	leaq	0x10(%rbp), %rax
    000000d3: 	cmpq	%rax, %rdi
    000000d6: 	jne	.Ltmp2565 # Offset: 214
.Ltmp2564:
    000000d8: 	addq	$0x20, %rbp
    000000dc: 	cmpq	%rbp, 0x10(%rsp)
    000000e1: 	jne	.Ltmp2566 # Offset: 225
    000000e3: 	cmpq	%r13, 0x8(%rsp)
    000000e8: 	je	.Ltmp2567 # Offset: 232
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2569:
    000000f0: 	movq	(%r13), %rdi
    000000f4: 	leaq	0x10(%r13), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp2568 # Offset: 251
    000000fd: 	movq	0x10(%r13), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp2568:
    0000010a: 	addq	$0x20, %r13
.Ltmp2563:
    0000010e: 	cmpq	%r13, 0x8(%rsp)
    00000113: 	jne	.Ltmp2569 # Offset: 275
.Ltmp2567:
    00000115: 	movq	(%r14), %rdi
    00000118: 	testq	%rdi, %rdi
    0000011b: 	je	.Ltmp2570 # Offset: 283
.Ltmp2576:
    00000121: 	movq	0x48(%r14), %rax
    00000125: 	movq	0x28(%r14), %rbx
    00000129: 	leaq	0x8(%rax), %rbp
    0000012d: 	cmpq	%rbx, %rbp
    00000130: 	jbe	.Ltmp2571 # Offset: 304
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2572:
    00000138: 	movq	(%rbx), %rdi
    0000013b: 	movl	$0x200, %esi
    00000140: 	addq	$0x8, %rbx
    00000144: 	callq	_ZdlPvm@PLT # Offset: 324
    00000149: 	cmpq	%rbx, %rbp
    0000014c: 	ja	.Ltmp2572 # Offset: 332
    0000014e: 	movq	(%r14), %rdi
.Ltmp2571:
    00000151: 	movq	0x8(%r14), %rsi
    00000155: 	addq	$0x28, %rsp
    00000159: 	popq	%rbx
    0000015a: 	popq	%rbp
    0000015b: 	shlq	$0x3, %rsi
    0000015f: 	popq	%r12
    00000161: 	popq	%r13
    00000163: 	popq	%r14
    00000165: 	popq	%r15
    00000167: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp2559:
    00000170: 	addq	$0x20, %r15
    00000174: 	cmpq	%r15, %rbx
    00000177: 	jne	.Ltmp2560 # Offset: 375
    0000017d: 	addq	$0x8, %r12
    00000181: 	cmpq	%r12, (%rsp)
    00000185: 	ja	.Ltmp2561 # Offset: 389
    0000018b: 	jmp	.Ltmp2558 # Offset: 395
.Ltmp2562:
    00000190: 	cmpq	0x8(%rsp), %rbp
    00000195: 	je	.Ltmp2567 # Offset: 405
.Ltmp2575:
    0000019b: 	movq	(%rbp), %rdi
    0000019f: 	leaq	0x10(%rbp), %rax
    000001a3: 	cmpq	%rax, %rdi
    000001a6: 	je	.Ltmp2573 # Offset: 422
.Ltmp2574:
    000001a8: 	movq	0x10(%rbp), %rax
    000001ac: 	addq	$0x20, %rbp
    000001b0: 	leaq	0x1(%rax), %rsi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	cmpq	%rbp, 0x8(%rsp)
    000001be: 	je	.Ltmp2567 # Offset: 446
    000001c4: 	movq	(%rbp), %rdi
    000001c8: 	leaq	0x10(%rbp), %rax
    000001cc: 	cmpq	%rax, %rdi
    000001cf: 	jne	.Ltmp2574 # Offset: 463
.Ltmp2573:
    000001d1: 	addq	$0x20, %rbp
    000001d5: 	cmpq	%rbp, 0x8(%rsp)
    000001da: 	jne	.Ltmp2575 # Offset: 474
    000001dc: 	movq	(%r14), %rdi
    000001df: 	testq	%rdi, %rdi
    000001e2: 	jne	.Ltmp2576 # Offset: 482
.Ltmp2570:
    000001e8: 	addq	$0x28, %rsp
    000001ec: 	popq	%rbx
    000001ed: 	popq	%rbp
    000001ee: 	popq	%r12
    000001f0: 	popq	%r13
    000001f2: 	popq	%r14
    000001f4: 	popq	%r15
    000001f6: 	retq # Offset: 502
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)"

Binary Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_" after disassembly {
  Number      : 371
  State       : disassembled
  Address     : 0x1e320
  Size        : 0x145
  MaxSize     : 0x150
  Offset      : 0x1e320
  Section     : .text
  Orc Section : .local.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0370:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	movq	%rdi, %r12
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdx, %rbp
    00000011: 	pushq	%rbx
    00000012: 	leaq	0x10(%rdi), %rbx
    00000016: 	subq	$0x10, %rsp
    0000001a: 	movq	0x8(%rsi), %r13
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	movq	%rbx, (%rdi)
    00000031: 	movq	(%rsi), %r14
    00000034: 	movq	%r14, %rax
    00000037: 	addq	%r13, %rax
    0000003a: 	je	.Ltmp2577 # Offset: 58
    0000003c: 	testq	%r14, %r14
    0000003f: 	je	.Ltmp2578 # Offset: 63
.Ltmp2577:
    00000045: 	movq	%r13, (%rsp)
    00000049: 	cmpq	$0xf, %r13
    0000004d: 	ja	.Ltmp2579 # Offset: 77
    0000004f: 	cmpq	$0x1, %r13
    00000053: 	jne	.Ltmp2580 # Offset: 83
    00000055: 	movzbl	(%r14), %eax
    00000059: 	movb	%al, 0x10(%r12)
    0000005e: 	movq	%rbx, %rax
.Ltmp2584:
    00000061: 	movq	%r13, 0x8(%r12)
    00000066: 	movq	%rbp, %rdi
    00000069: 	movb	$0x0, (%rax,%r13)
    0000006e: 	callq	strlen@PLT # Offset: 110
    00000073: 	movq	%rax, %rdx
    00000076: 	movabsq	$0x3fffffffffffffff, %rax
    00000080: 	subq	0x8(%r12), %rax
    00000085: 	cmpq	%rax, %rdx
    00000088: 	ja	.Ltmp2581 # Offset: 136
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movq	%r12, %rdi
    00000090: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 144
    00000095: 	movq	0x8(%rsp), %rax
    0000009a: 	subq	%fs:0x28, %rax
    000000a3: 	jne	.Ltmp2582 # Offset: 163
    000000a5: 	addq	$0x10, %rsp
    000000a9: 	movq	%r12, %rax
    000000ac: 	popq	%rbx
    000000ad: 	popq	%rbp
    000000ae: 	popq	%r12
    000000b0: 	popq	%r13
    000000b2: 	popq	%r14
    000000b4: 	retq # Offset: 180
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp2580:
    000000b8: 	testq	%r13, %r13
    000000bb: 	jne	.Ltmp2583 # Offset: 187
    000000bd: 	movq	%rbx, %rax
    000000c0: 	jmp	.Ltmp2584 # Offset: 192
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2579:
    000000c8: 	movq	%r12, %rdi
    000000cb: 	movq	%rsp, %rsi
    000000ce: 	xorl	%edx, %edx
    000000d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 208
    000000d5: 	movq	%rax, (%r12)
    000000d9: 	movq	%rax, %rdi
    000000dc: 	movq	(%rsp), %rax
    000000e0: 	movq	%rax, 0x10(%r12)
.Ltmp2585:
    000000e5: 	movq	%r13, %rdx
    000000e8: 	movq	%r14, %rsi
    000000eb: 	callq	memcpy@PLT # Offset: 235
    000000f0: 	movq	(%rsp), %r13
    000000f4: 	movq	(%r12), %rax
    000000f8: 	jmp	.Ltmp2584 # Offset: 248
.Ltmp2578:
    000000fd: 	leaq	DATAat0x33158(%rip), %rdi
    00000104: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 260
.Ltmp2581:
    00000109: 	leaq	DATAat0x33182(%rip), %rdi
    00000110: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 272
.Ltmp2582:
    00000115: 	callq	__stack_chk_fail@PLT # Offset: 277
.Ltmp2583:
    0000011a: 	movq	%rbx, %rdi
    0000011d: 	jmp	.Ltmp2585 # Offset: 285
    0000011f: 	endbr64
    00000123: 	movq	%rax, %rbp
    00000126: 	movq	(%r12), %rdi
    0000012a: 	cmpq	%rdi, %rbx
    0000012d: 	je	.Ltmp2586 # Offset: 301
    0000012f: 	movq	0x10(%r12), %rsi
    00000134: 	addq	$0x1, %rsi
    00000138: 	callq	_ZdlPvm@PLT # Offset: 312
.Ltmp2586:
    0000013d: 	movq	%rbp, %rdi
    00000140: 	callq	_Unwind_Resume@PLT # Offset: 320
DWARF CFI Instructions:
    <empty>
End of Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_" after disassembly {
  Number      : 372
  State       : disassembled
  Address     : 0x1e470
  Size        : 0x328
  MaxSize     : 0x330
  Offset      : 0x1e470
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0371:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rsi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x18, %rsp
    00000015: 	movq	0x48(%rdi), %r12
    00000019: 	movq	0x28(%rdi), %rsi
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	movq	0x30(%rdi), %rax
    00000031: 	subq	0x38(%rdi), %rax
    00000035: 	movq	%r12, %r13
    00000038: 	sarq	$0x5, %rax
    0000003c: 	subq	%rsi, %r13
    0000003f: 	movq	%r13, %rcx
    00000042: 	sarq	$0x3, %rcx
    00000046: 	cmpq	$0x1, %r12
    0000004a: 	movq	%rcx, %rdx
    0000004d: 	adcq	$-0x1, %rdx
    00000051: 	shlq	$0x4, %rdx
    00000055: 	addq	%rdx, %rax
    00000058: 	movq	0x20(%rdi), %rdx
    0000005c: 	subq	0x10(%rdi), %rdx
    00000060: 	sarq	$0x5, %rdx
    00000064: 	addq	%rdx, %rax
    00000067: 	movabsq	$0x3ffffffffffffff, %rdx
    00000071: 	cmpq	%rdx, %rax
    00000074: 	je	.Ltmp2587 # Offset: 116
    0000007a: 	movq	0x8(%rdi), %rdx
    0000007e: 	movq	%rdi, %rbx
    00000081: 	movq	(%rdi), %rdi
    00000084: 	movq	%r12, %rax
    00000087: 	subq	%rdi, %rax
    0000008a: 	movq	%rdx, %r8
    0000008d: 	sarq	$0x3, %rax
    00000091: 	subq	%rax, %r8
    00000094: 	cmpq	$0x1, %r8
    00000098: 	jbe	.Ltmp2588 # Offset: 152
.Ltmp2599:
    0000009e: 	movl	$0x200, %edi
    000000a3: 	callq	_Znwm@PLT # Offset: 163
    000000a8: 	movq	%rax, 0x8(%r12)
    000000ad: 	movq	0x30(%rbx), %r13
    000000b1: 	movq	0x8(%rbp), %r12
    000000b5: 	leaq	0x10(%r13), %rdi
    000000b9: 	movq	%rdi, (%r13)
    000000bd: 	movq	(%rbp), %r14
    000000c1: 	movq	%r14, %rax
    000000c4: 	addq	%r12, %rax
    000000c7: 	je	.Ltmp2589 # Offset: 199
    000000c9: 	testq	%r14, %r14
    000000cc: 	je	.Ltmp2590 # Offset: 204
.Ltmp2589:
    000000d2: 	movq	%r12, (%rsp)
    000000d6: 	cmpq	$0xf, %r12
    000000da: 	ja	.Ltmp2591 # Offset: 218
    000000e0: 	cmpq	$0x1, %r12
    000000e4: 	jne	.Ltmp2592 # Offset: 228
    000000e6: 	movzbl	(%r14), %eax
    000000ea: 	movb	%al, 0x10(%r13)
.Ltmp2594:
    000000ee: 	movq	%r12, 0x8(%r13)
    000000f2: 	movb	$0x0, (%rdi,%r12)
    000000f7: 	movq	0x48(%rbx), %rdx
    000000fb: 	movq	0x8(%rdx), %rax
    000000ff: 	addq	$0x8, %rdx
    00000103: 	movq	%rdx, %xmm1
    00000108: 	movq	%rax, %xmm0
    0000010d: 	addq	$0x200, %rax
    00000113: 	punpcklqdq	%xmm0, %xmm0
    00000117: 	movups	%xmm0, 0x30(%rbx)
    0000011b: 	movq	%rax, %xmm0
    00000120: 	punpcklqdq	%xmm1, %xmm0
    00000124: 	movups	%xmm0, 0x40(%rbx)
    00000128: 	movq	0x8(%rsp), %rax
    0000012d: 	subq	%fs:0x28, %rax
    00000136: 	jne	.Ltmp2593 # Offset: 310
    0000013c: 	addq	$0x18, %rsp
    00000140: 	popq	%rbx
    00000141: 	popq	%rbp
    00000142: 	popq	%r12
    00000144: 	popq	%r13
    00000146: 	popq	%r14
    00000148: 	popq	%r15
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2592:
    00000150: 	testq	%r12, %r12
    00000153: 	je	.Ltmp2594 # Offset: 339
    00000155: 	jmp	.Ltmp2595 # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2588:
    00000160: 	leaq	0x2(%rcx), %r14
    00000164: 	leaq	(%r14,%r14), %rax
    00000168: 	cmpq	%rax, %rdx
    0000016b: 	ja	.Ltmp2596 # Offset: 363
    00000171: 	testq	%rdx, %rdx
    00000174: 	movl	$0x1, %eax
    00000179: 	cmovneq	%rdx, %rax
    0000017d: 	leaq	0x2(%rdx,%rax), %r15
    00000182: 	movq	%r15, %rax
    00000185: 	shrq	$0x3c, %rax
    00000189: 	jne	.Ltmp2597 # Offset: 393
    0000018f: 	leaq	(,%r15,8), %rdi
    00000197: 	callq	_Znwm@PLT # Offset: 407
    0000019c: 	movq	0x28(%rbx), %rsi
    000001a0: 	movq	%rax, %r12
    000001a3: 	movq	%r15, %rax
    000001a6: 	subq	%r14, %rax
    000001a9: 	shrq	%rax
    000001ac: 	leaq	(%r12,%rax,8), %r14
    000001b0: 	movq	0x48(%rbx), %rax
    000001b4: 	leaq	0x8(%rax), %rdx
    000001b8: 	cmpq	%rsi, %rdx
    000001bb: 	je	.Ltmp2598 # Offset: 443
    000001bd: 	subq	%rsi, %rdx
    000001c0: 	movq	%r14, %rdi
    000001c3: 	callq	memmove@PLT # Offset: 451
.Ltmp2598:
    000001c8: 	movq	0x8(%rbx), %rax
    000001cc: 	movq	(%rbx), %rdi
    000001cf: 	leaq	(,%rax,8), %rsi
    000001d7: 	callq	_ZdlPvm@PLT # Offset: 471
    000001dc: 	movq	%r12, (%rbx)
    000001df: 	movq	%r15, 0x8(%rbx)
.Ltmp2601:
    000001e3: 	movq	(%r14), %rax
    000001e6: 	movq	(%r14), %xmm0
    000001eb: 	leaq	(%r14,%r13), %r12
    000001ef: 	movq	%r14, 0x28(%rbx)
    000001f3: 	movq	%r12, 0x48(%rbx)
    000001f7: 	addq	$0x200, %rax
    000001fd: 	movq	%rax, %xmm2
    00000202: 	punpcklqdq	%xmm2, %xmm0
    00000206: 	movups	%xmm0, 0x18(%rbx)
    0000020a: 	movq	(%r12), %rax
    0000020e: 	movq	(%r12), %xmm0
    00000214: 	addq	$0x200, %rax
    0000021a: 	movq	%rax, %xmm3
    0000021f: 	punpcklqdq	%xmm3, %xmm0
    00000223: 	movups	%xmm0, 0x38(%rbx)
    00000227: 	jmp	.Ltmp2599 # Offset: 551
    0000022c: 	nopl	(%rax) # Size: 4
.Ltmp2591:
    00000230: 	movq	%rsp, %rsi
    00000233: 	xorl	%edx, %edx
    00000235: 	movq	%r13, %rdi
    00000238: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 568
    0000023d: 	movq	%rax, (%r13)
    00000241: 	movq	%rax, %rdi
    00000244: 	movq	(%rsp), %rax
    00000248: 	movq	%rax, 0x10(%r13)
.Ltmp2595:
    0000024c: 	movq	%r12, %rdx
    0000024f: 	movq	%r14, %rsi
    00000252: 	callq	memcpy@PLT # Offset: 594
    00000257: 	movq	(%rsp), %r12
    0000025b: 	movq	(%r13), %rdi
    0000025f: 	jmp	.Ltmp2594 # Offset: 607
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp2596:
    00000268: 	subq	%r14, %rdx
    0000026b: 	addq	$0x8, %r12
    0000026f: 	shrq	%rdx
    00000272: 	leaq	(%rdi,%rdx,8), %r14
    00000276: 	movq	%r12, %rdx
    00000279: 	subq	%rsi, %rdx
    0000027c: 	cmpq	%r14, %rsi
    0000027f: 	jbe	.Ltmp2600 # Offset: 639
    00000281: 	cmpq	%r12, %rsi
    00000284: 	je	.Ltmp2601 # Offset: 644
    0000028a: 	movq	%r14, %rdi
    0000028d: 	callq	memmove@PLT # Offset: 653
    00000292: 	jmp	.Ltmp2601 # Offset: 658
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2600:
    000002a0: 	cmpq	%r12, %rsi
    000002a3: 	je	.Ltmp2601 # Offset: 675
    000002a9: 	leaq	0x8(%r13), %rdi
    000002ad: 	subq	%rdx, %rdi
    000002b0: 	addq	%r14, %rdi
    000002b3: 	callq	memmove@PLT # Offset: 691
    000002b8: 	jmp	.Ltmp2601 # Offset: 696
.Ltmp2590:
    000002bd: 	leaq	DATAat0x33158(%rip), %rdi
    000002c4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 708
    000002c9: 	nopl	(%rax) # Size: 7
.Ltmp2597:
    000002d0: 	shrq	$0x3d, %r15
    000002d4: 	je	.Ltmp2602 # Offset: 724
    000002d6: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 726
.Ltmp2602:
    000002db: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 731
.Ltmp2587:
    000002e0: 	leaq	DATAat0x33198(%rip), %rdi
    000002e7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 743
.Ltmp2593:
    000002ec: 	callq	__stack_chk_fail@PLT # Offset: 748
    000002f1: 	endbr64
    000002f5: 	movq	%rax, %rdi
    000002f8: 	callq	__cxa_begin_catch@PLT # Offset: 760
    000002fd: 	movq	0x48(%rbx), %rax
    00000301: 	movl	$0x200, %esi
    00000306: 	movq	0x8(%rax), %rdi
    0000030a: 	callq	_ZdlPvm@PLT # Offset: 778
    0000030f: 	callq	__cxa_rethrow@PLT # Offset: 783
    00000314: 	endbr64
    00000318: 	movq	%rax, %rbp
    0000031b: 	callq	__cxa_end_catch@PLT # Offset: 795
    00000320: 	movq	%rbp, %rdi
    00000323: 	callq	_Unwind_Resume@PLT # Offset: 803
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_"

Binary Function "_Z21testOneFunction_equalIjPFjPKjijEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 373
  State       : disassembled
  Address     : 0x1e7a0
  Size        : 0x224
  MaxSize     : 0x230
  Offset      : 0x1e7a0
  Section     : .text
  Orc Section : .local.text._Z21testOneFunction_equalIjPFjPKjijEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0372:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x331c8(%rip), %r15
    0000000d: 	pushq	%r14
    0000000f: 	movq	%rcx, %r14
    00000012: 	pushq	%r13
    00000014: 	movq	%rdi, %r13
    00000017: 	pushq	%r12
    00000019: 	movl	%esi, %r12d
    0000001c: 	pushq	%rbp
    0000001d: 	movq	%rdx, %rbp
    00000020: 	pushq	%rbx
    00000021: 	xorl	%ebx, %ebx
    00000023: 	subq	$0x18, %rsp
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x8(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	callq	clock@PLT # Offset: 55
    0000003c: 	movsd	init_value(%rip), %xmm0
    00000044: 	movq	%rax, start_time(%rip)
    0000004b: 	movl	iterations(%rip), %eax
    00000051: 	testl	%eax, %eax
    00000053: 	jle	.Ltmp2603 # Offset: 83
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp2605:
    00000058: 	cvttsd2si	%xmm0, %rdx
    0000005d: 	movl	%r12d, %esi
    00000060: 	movq	%r13, %rdi
    00000063: 	callq	*%rbp # Offset: 99
    00000065: 	movsd	init_value(%rip), %xmm0
    0000006d: 	movl	%eax, %r8d
    00000070: 	cvttsd2si	%xmm0, %rax
    00000075: 	cmpl	%eax, %r8d
    00000078: 	je	.Ltmp2604 # Offset: 120
    0000007a: 	movq	(%r14), %rdx
    0000007d: 	xorl	%eax, %eax
    0000007f: 	movq	%r15, %rsi
    00000082: 	movl	$0x1, %edi
    00000087: 	addl	$0x1, %ebx
    0000008a: 	callq	__printf_chk@PLT # Offset: 138
    0000008f: 	cmpl	%ebx, iterations(%rip)
    00000095: 	jle	.Ltmp2603 # Offset: 149
    00000097: 	movsd	init_value(%rip), %xmm0
    0000009f: 	jmp	.Ltmp2605 # Offset: 159
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp2604:
    000000a8: 	addl	$0x1, %ebx
    000000ab: 	cmpl	%ebx, iterations(%rip)
    000000b1: 	jg	.Ltmp2605 # Offset: 177
.Ltmp2603:
    000000b3: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000ba: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000c1: 	subq	$0x20, %rax
    000000c5: 	cmpq	%rax, %rbx
    000000c8: 	je	.Ltmp2606 # Offset: 200
    000000ce: 	leaq	0x10(%rbx), %rdi
    000000d2: 	movq	0x8(%r14), %r12
    000000d6: 	movq	%rdi, (%rbx)
    000000d9: 	movq	(%r14), %rbp
    000000dc: 	movq	%rbp, %rax
    000000df: 	addq	%r12, %rax
    000000e2: 	je	.Ltmp2607 # Offset: 226
    000000e4: 	testq	%rbp, %rbp
    000000e7: 	je	.Ltmp2608 # Offset: 231
.Ltmp2607:
    000000ed: 	movq	%r12, (%rsp)
    000000f1: 	cmpq	$0xf, %r12
    000000f5: 	ja	.Ltmp2609 # Offset: 245
    000000fb: 	cmpq	$0x1, %r12
    000000ff: 	jne	.Ltmp2610 # Offset: 255
    00000105: 	movzbl	(%rbp), %eax
    00000109: 	movb	%al, 0x10(%rbx)
.Ltmp2613:
    0000010c: 	movq	%r12, 0x8(%rbx)
    00000110: 	movb	$0x0, (%rdi,%r12)
    00000115: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000011c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000123: 	addq	$0x20, %rax
    00000127: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000012e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000135: 	je	.Ltmp2611 # Offset: 309
.Ltmp2614:
    0000013b: 	movq	-0x20(%rax), %rbp
    0000013f: 	callq	clock@PLT # Offset: 319
    00000144: 	movq	%rax, end_time(%rip)
    0000014b: 	movq	0x8(%rsp), %rdx
    00000150: 	subq	%fs:0x28, %rdx
    00000159: 	jne	.Ltmp2612 # Offset: 345
    0000015f: 	subq	start_time(%rip), %rax
    00000166: 	pxor	%xmm0, %xmm0
    0000016a: 	movq	%rbp, %rdi
    0000016d: 	cvtsi2sd	%rax, %xmm0
    00000172: 	divsd	DATAat0x335b0(%rip), %xmm0
    0000017a: 	addq	$0x18, %rsp
    0000017e: 	popq	%rbx
    0000017f: 	popq	%rbp
    00000180: 	popq	%r12
    00000182: 	popq	%r13
    00000184: 	popq	%r14
    00000186: 	popq	%r15
    00000188: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 392
    0000018d: 	nopl	(%rax) # Size: 3
.Ltmp2609:
    00000190: 	movq	%rbx, %rdi
    00000193: 	movq	%rsp, %rsi
    00000196: 	xorl	%edx, %edx
    00000198: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 408
    0000019d: 	movq	%rax, (%rbx)
    000001a0: 	movq	%rax, %rdi
    000001a3: 	movq	(%rsp), %rax
    000001a7: 	movq	%rax, 0x10(%rbx)
.Ltmp2615:
    000001ab: 	movq	%r12, %rdx
    000001ae: 	movq	%rbp, %rsi
    000001b1: 	callq	memcpy@PLT # Offset: 433
    000001b6: 	movq	(%rsp), %r12
    000001ba: 	movq	(%rbx), %rdi
    000001bd: 	jmp	.Ltmp2613 # Offset: 445
    000001c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2606:
    000001c8: 	movq	%r14, %rsi
    000001cb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001d2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 466
    000001d7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001de: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001e5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001ec: 	jne	.Ltmp2614 # Offset: 492
.Ltmp2611:
    000001f2: 	movq	-0x8(%rdx), %rax
    000001f6: 	addq	$0x200, %rax
    000001fc: 	jmp	.Ltmp2614 # Offset: 508
    00000201: 	nopl	(%rax) # Size: 7
.Ltmp2610:
    00000208: 	testq	%r12, %r12
    0000020b: 	je	.Ltmp2613 # Offset: 523
    00000211: 	jmp	.Ltmp2615 # Offset: 529
.Ltmp2612:
    00000213: 	callq	__stack_chk_fail@PLT # Offset: 531
.Ltmp2608:
    00000218: 	leaq	DATAat0x33158(%rip), %rdi
    0000021f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 543
DWARF CFI Instructions:
    <empty>
End of Function "_Z21testOneFunction_equalIjPFjPKjijEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23testOneFunction_logicalIaPFbPKaibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 374
  State       : disassembled
  Address     : 0x1e9d0
  Size        : 0x214
  MaxSize     : 0x220
  Offset      : 0x1e9d0
  Section     : .text
  Orc Section : .local.text._Z23testOneFunction_logicalIaPFbPKaibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0373:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	xorl	%r15d, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%r8, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rdi, %r13
    00000013: 	pushq	%r12
    00000015: 	movl	%esi, %r12d
    00000018: 	pushq	%rbp
    00000019: 	movq	%rcx, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	movl	%edx, %ebx
    0000001f: 	movzbl	%bl, %ebx
    00000022: 	subq	$0x18, %rsp
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x8(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	callq	clock@PLT # Offset: 54
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	movl	iterations(%rip), %eax
    00000048: 	testl	%eax, %eax
    0000004a: 	jle	.Ltmp2616 # Offset: 74
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp2618:
    00000050: 	movl	%ebx, %edx
    00000052: 	movl	%r12d, %esi
    00000055: 	movq	%r13, %rdi
    00000058: 	callq	*%rbp # Offset: 88
    0000005a: 	testb	%al, %al
    0000005c: 	je	.Ltmp2617 # Offset: 92
    00000062: 	addl	$0x1, %r15d
    00000066: 	cmpl	%r15d, iterations(%rip)
    0000006d: 	jg	.Ltmp2618 # Offset: 109
.Ltmp2616:
    0000006f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000076: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000007d: 	subq	$0x20, %rax
    00000081: 	cmpq	%rax, %rbx
    00000084: 	je	.Ltmp2619 # Offset: 132
    0000008a: 	leaq	0x10(%rbx), %rdi
    0000008e: 	movq	0x8(%r14), %r12
    00000092: 	movq	%rdi, (%rbx)
    00000095: 	movq	(%r14), %rbp
    00000098: 	movq	%rbp, %rax
    0000009b: 	addq	%r12, %rax
    0000009e: 	je	.Ltmp2620 # Offset: 158
    000000a0: 	testq	%rbp, %rbp
    000000a3: 	je	.Ltmp2621 # Offset: 163
.Ltmp2620:
    000000a9: 	movq	%r12, (%rsp)
    000000ad: 	cmpq	$0xf, %r12
    000000b1: 	ja	.Ltmp2622 # Offset: 177
    000000b7: 	cmpq	$0x1, %r12
    000000bb: 	jne	.Ltmp2623 # Offset: 187
    000000c1: 	movzbl	(%rbp), %eax
    000000c5: 	movb	%al, 0x10(%rbx)
.Ltmp2626:
    000000c8: 	movq	%r12, 0x8(%rbx)
    000000cc: 	movb	$0x0, (%rdi,%r12)
    000000d1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000d8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000df: 	addq	$0x20, %rax
    000000e3: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000000ea: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000000f1: 	je	.Ltmp2624 # Offset: 241
.Ltmp2627:
    000000f7: 	movq	-0x20(%rax), %rbp
    000000fb: 	callq	clock@PLT # Offset: 251
    00000100: 	movq	%rax, end_time(%rip)
    00000107: 	movq	0x8(%rsp), %rdx
    0000010c: 	subq	%fs:0x28, %rdx
    00000115: 	jne	.Ltmp2625 # Offset: 277
    0000011b: 	subq	start_time(%rip), %rax
    00000122: 	pxor	%xmm0, %xmm0
    00000126: 	movq	%rbp, %rdi
    00000129: 	cvtsi2sd	%rax, %xmm0
    0000012e: 	divsd	DATAat0x335b0(%rip), %xmm0
    00000136: 	addq	$0x18, %rsp
    0000013a: 	popq	%rbx
    0000013b: 	popq	%rbp
    0000013c: 	popq	%r12
    0000013e: 	popq	%r13
    00000140: 	popq	%r14
    00000142: 	popq	%r15
    00000144: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 324
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp2617:
    00000150: 	movq	(%r14), %rdx
    00000153: 	leaq	DATAat0x331c8(%rip), %rsi
    0000015a: 	movl	$0x1, %edi
    0000015f: 	addl	$0x1, %r15d
    00000163: 	callq	__printf_chk@PLT # Offset: 355
    00000168: 	cmpl	%r15d, iterations(%rip)
    0000016f: 	jg	.Ltmp2618 # Offset: 367
    00000175: 	jmp	.Ltmp2616 # Offset: 373
    0000017a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2622:
    00000180: 	movq	%rbx, %rdi
    00000183: 	movq	%rsp, %rsi
    00000186: 	xorl	%edx, %edx
    00000188: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 392
    0000018d: 	movq	%rax, (%rbx)
    00000190: 	movq	%rax, %rdi
    00000193: 	movq	(%rsp), %rax
    00000197: 	movq	%rax, 0x10(%rbx)
.Ltmp2628:
    0000019b: 	movq	%r12, %rdx
    0000019e: 	movq	%rbp, %rsi
    000001a1: 	callq	memcpy@PLT # Offset: 417
    000001a6: 	movq	(%rsp), %r12
    000001aa: 	movq	(%rbx), %rdi
    000001ad: 	jmp	.Ltmp2626 # Offset: 429
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2619:
    000001b8: 	movq	%r14, %rsi
    000001bb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001c2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 450
    000001c7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ce: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001d5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001dc: 	jne	.Ltmp2627 # Offset: 476
.Ltmp2624:
    000001e2: 	movq	-0x8(%rdx), %rax
    000001e6: 	addq	$0x200, %rax
    000001ec: 	jmp	.Ltmp2627 # Offset: 492
    000001f1: 	nopl	(%rax) # Size: 7
.Ltmp2623:
    000001f8: 	testq	%r12, %r12
    000001fb: 	je	.Ltmp2626 # Offset: 507
    00000201: 	jmp	.Ltmp2628 # Offset: 513
.Ltmp2625:
    00000203: 	callq	__stack_chk_fail@PLT # Offset: 515
.Ltmp2621:
    00000208: 	leaq	DATAat0x33158(%rip), %rdi
    0000020f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 527
DWARF CFI Instructions:
    <empty>
End of Function "_Z23testOneFunction_logicalIaPFbPKaibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23testOneFunction_logicalItPFbPKtibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 375
  State       : disassembled
  Address     : 0x1ebf0
  Size        : 0x214
  MaxSize     : 0x220
  Offset      : 0x1ebf0
  Section     : .text
  Orc Section : .local.text._Z23testOneFunction_logicalItPFbPKtibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0374:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	xorl	%r15d, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%r8, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rdi, %r13
    00000013: 	pushq	%r12
    00000015: 	movl	%esi, %r12d
    00000018: 	pushq	%rbp
    00000019: 	movq	%rcx, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	movl	%edx, %ebx
    0000001f: 	movzbl	%bl, %ebx
    00000022: 	subq	$0x18, %rsp
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x8(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	callq	clock@PLT # Offset: 54
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	movl	iterations(%rip), %eax
    00000048: 	testl	%eax, %eax
    0000004a: 	jle	.Ltmp2629 # Offset: 74
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp2631:
    00000050: 	movl	%ebx, %edx
    00000052: 	movl	%r12d, %esi
    00000055: 	movq	%r13, %rdi
    00000058: 	callq	*%rbp # Offset: 88
    0000005a: 	testb	%al, %al
    0000005c: 	je	.Ltmp2630 # Offset: 92
    00000062: 	addl	$0x1, %r15d
    00000066: 	cmpl	%r15d, iterations(%rip)
    0000006d: 	jg	.Ltmp2631 # Offset: 109
.Ltmp2629:
    0000006f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000076: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000007d: 	subq	$0x20, %rax
    00000081: 	cmpq	%rax, %rbx
    00000084: 	je	.Ltmp2632 # Offset: 132
    0000008a: 	leaq	0x10(%rbx), %rdi
    0000008e: 	movq	0x8(%r14), %r12
    00000092: 	movq	%rdi, (%rbx)
    00000095: 	movq	(%r14), %rbp
    00000098: 	movq	%rbp, %rax
    0000009b: 	addq	%r12, %rax
    0000009e: 	je	.Ltmp2633 # Offset: 158
    000000a0: 	testq	%rbp, %rbp
    000000a3: 	je	.Ltmp2634 # Offset: 163
.Ltmp2633:
    000000a9: 	movq	%r12, (%rsp)
    000000ad: 	cmpq	$0xf, %r12
    000000b1: 	ja	.Ltmp2635 # Offset: 177
    000000b7: 	cmpq	$0x1, %r12
    000000bb: 	jne	.Ltmp2636 # Offset: 187
    000000c1: 	movzbl	(%rbp), %eax
    000000c5: 	movb	%al, 0x10(%rbx)
.Ltmp2639:
    000000c8: 	movq	%r12, 0x8(%rbx)
    000000cc: 	movb	$0x0, (%rdi,%r12)
    000000d1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000d8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000df: 	addq	$0x20, %rax
    000000e3: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000000ea: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000000f1: 	je	.Ltmp2637 # Offset: 241
.Ltmp2640:
    000000f7: 	movq	-0x20(%rax), %rbp
    000000fb: 	callq	clock@PLT # Offset: 251
    00000100: 	movq	%rax, end_time(%rip)
    00000107: 	movq	0x8(%rsp), %rdx
    0000010c: 	subq	%fs:0x28, %rdx
    00000115: 	jne	.Ltmp2638 # Offset: 277
    0000011b: 	subq	start_time(%rip), %rax
    00000122: 	pxor	%xmm0, %xmm0
    00000126: 	movq	%rbp, %rdi
    00000129: 	cvtsi2sd	%rax, %xmm0
    0000012e: 	divsd	DATAat0x335b0(%rip), %xmm0
    00000136: 	addq	$0x18, %rsp
    0000013a: 	popq	%rbx
    0000013b: 	popq	%rbp
    0000013c: 	popq	%r12
    0000013e: 	popq	%r13
    00000140: 	popq	%r14
    00000142: 	popq	%r15
    00000144: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 324
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp2630:
    00000150: 	movq	(%r14), %rdx
    00000153: 	leaq	DATAat0x331c8(%rip), %rsi
    0000015a: 	movl	$0x1, %edi
    0000015f: 	addl	$0x1, %r15d
    00000163: 	callq	__printf_chk@PLT # Offset: 355
    00000168: 	cmpl	%r15d, iterations(%rip)
    0000016f: 	jg	.Ltmp2631 # Offset: 367
    00000175: 	jmp	.Ltmp2629 # Offset: 373
    0000017a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2635:
    00000180: 	movq	%rbx, %rdi
    00000183: 	movq	%rsp, %rsi
    00000186: 	xorl	%edx, %edx
    00000188: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 392
    0000018d: 	movq	%rax, (%rbx)
    00000190: 	movq	%rax, %rdi
    00000193: 	movq	(%rsp), %rax
    00000197: 	movq	%rax, 0x10(%rbx)
.Ltmp2641:
    0000019b: 	movq	%r12, %rdx
    0000019e: 	movq	%rbp, %rsi
    000001a1: 	callq	memcpy@PLT # Offset: 417
    000001a6: 	movq	(%rsp), %r12
    000001aa: 	movq	(%rbx), %rdi
    000001ad: 	jmp	.Ltmp2639 # Offset: 429
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2632:
    000001b8: 	movq	%r14, %rsi
    000001bb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001c2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 450
    000001c7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ce: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001d5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001dc: 	jne	.Ltmp2640 # Offset: 476
.Ltmp2637:
    000001e2: 	movq	-0x8(%rdx), %rax
    000001e6: 	addq	$0x200, %rax
    000001ec: 	jmp	.Ltmp2640 # Offset: 492
    000001f1: 	nopl	(%rax) # Size: 7
.Ltmp2636:
    000001f8: 	testq	%r12, %r12
    000001fb: 	je	.Ltmp2639 # Offset: 507
    00000201: 	jmp	.Ltmp2641 # Offset: 513
.Ltmp2638:
    00000203: 	callq	__stack_chk_fail@PLT # Offset: 515
.Ltmp2634:
    00000208: 	leaq	DATAat0x33158(%rip), %rdi
    0000020f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 527
DWARF CFI Instructions:
    <empty>
End of Function "_Z23testOneFunction_logicalItPFbPKtibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23testOneFunction_logicalIhPFbPKhibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 376
  State       : disassembled
  Address     : 0x1ee10
  Size        : 0x214
  MaxSize     : 0x220
  Offset      : 0x1ee10
  Section     : .text
  Orc Section : .local.text._Z23testOneFunction_logicalIhPFbPKhibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0375:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	xorl	%r15d, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%r8, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rdi, %r13
    00000013: 	pushq	%r12
    00000015: 	movl	%esi, %r12d
    00000018: 	pushq	%rbp
    00000019: 	movq	%rcx, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	movl	%edx, %ebx
    0000001f: 	movzbl	%bl, %ebx
    00000022: 	subq	$0x18, %rsp
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x8(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	callq	clock@PLT # Offset: 54
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	movl	iterations(%rip), %eax
    00000048: 	testl	%eax, %eax
    0000004a: 	jle	.Ltmp2642 # Offset: 74
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp2644:
    00000050: 	movl	%ebx, %edx
    00000052: 	movl	%r12d, %esi
    00000055: 	movq	%r13, %rdi
    00000058: 	callq	*%rbp # Offset: 88
    0000005a: 	testb	%al, %al
    0000005c: 	je	.Ltmp2643 # Offset: 92
    00000062: 	addl	$0x1, %r15d
    00000066: 	cmpl	%r15d, iterations(%rip)
    0000006d: 	jg	.Ltmp2644 # Offset: 109
.Ltmp2642:
    0000006f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000076: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000007d: 	subq	$0x20, %rax
    00000081: 	cmpq	%rax, %rbx
    00000084: 	je	.Ltmp2645 # Offset: 132
    0000008a: 	leaq	0x10(%rbx), %rdi
    0000008e: 	movq	0x8(%r14), %r12
    00000092: 	movq	%rdi, (%rbx)
    00000095: 	movq	(%r14), %rbp
    00000098: 	movq	%rbp, %rax
    0000009b: 	addq	%r12, %rax
    0000009e: 	je	.Ltmp2646 # Offset: 158
    000000a0: 	testq	%rbp, %rbp
    000000a3: 	je	.Ltmp2647 # Offset: 163
.Ltmp2646:
    000000a9: 	movq	%r12, (%rsp)
    000000ad: 	cmpq	$0xf, %r12
    000000b1: 	ja	.Ltmp2648 # Offset: 177
    000000b7: 	cmpq	$0x1, %r12
    000000bb: 	jne	.Ltmp2649 # Offset: 187
    000000c1: 	movzbl	(%rbp), %eax
    000000c5: 	movb	%al, 0x10(%rbx)
.Ltmp2652:
    000000c8: 	movq	%r12, 0x8(%rbx)
    000000cc: 	movb	$0x0, (%rdi,%r12)
    000000d1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000d8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000df: 	addq	$0x20, %rax
    000000e3: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000000ea: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000000f1: 	je	.Ltmp2650 # Offset: 241
.Ltmp2653:
    000000f7: 	movq	-0x20(%rax), %rbp
    000000fb: 	callq	clock@PLT # Offset: 251
    00000100: 	movq	%rax, end_time(%rip)
    00000107: 	movq	0x8(%rsp), %rdx
    0000010c: 	subq	%fs:0x28, %rdx
    00000115: 	jne	.Ltmp2651 # Offset: 277
    0000011b: 	subq	start_time(%rip), %rax
    00000122: 	pxor	%xmm0, %xmm0
    00000126: 	movq	%rbp, %rdi
    00000129: 	cvtsi2sd	%rax, %xmm0
    0000012e: 	divsd	DATAat0x335b0(%rip), %xmm0
    00000136: 	addq	$0x18, %rsp
    0000013a: 	popq	%rbx
    0000013b: 	popq	%rbp
    0000013c: 	popq	%r12
    0000013e: 	popq	%r13
    00000140: 	popq	%r14
    00000142: 	popq	%r15
    00000144: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 324
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp2643:
    00000150: 	movq	(%r14), %rdx
    00000153: 	leaq	DATAat0x331c8(%rip), %rsi
    0000015a: 	movl	$0x1, %edi
    0000015f: 	addl	$0x1, %r15d
    00000163: 	callq	__printf_chk@PLT # Offset: 355
    00000168: 	cmpl	%r15d, iterations(%rip)
    0000016f: 	jg	.Ltmp2644 # Offset: 367
    00000175: 	jmp	.Ltmp2642 # Offset: 373
    0000017a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2648:
    00000180: 	movq	%rbx, %rdi
    00000183: 	movq	%rsp, %rsi
    00000186: 	xorl	%edx, %edx
    00000188: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 392
    0000018d: 	movq	%rax, (%rbx)
    00000190: 	movq	%rax, %rdi
    00000193: 	movq	(%rsp), %rax
    00000197: 	movq	%rax, 0x10(%rbx)
.Ltmp2654:
    0000019b: 	movq	%r12, %rdx
    0000019e: 	movq	%rbp, %rsi
    000001a1: 	callq	memcpy@PLT # Offset: 417
    000001a6: 	movq	(%rsp), %r12
    000001aa: 	movq	(%rbx), %rdi
    000001ad: 	jmp	.Ltmp2652 # Offset: 429
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2645:
    000001b8: 	movq	%r14, %rsi
    000001bb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001c2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 450
    000001c7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ce: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001d5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001dc: 	jne	.Ltmp2653 # Offset: 476
.Ltmp2650:
    000001e2: 	movq	-0x8(%rdx), %rax
    000001e6: 	addq	$0x200, %rax
    000001ec: 	jmp	.Ltmp2653 # Offset: 492
    000001f1: 	nopl	(%rax) # Size: 7
.Ltmp2649:
    000001f8: 	testq	%r12, %r12
    000001fb: 	je	.Ltmp2652 # Offset: 507
    00000201: 	jmp	.Ltmp2654 # Offset: 513
.Ltmp2651:
    00000203: 	callq	__stack_chk_fail@PLT # Offset: 515
.Ltmp2647:
    00000208: 	leaq	DATAat0x33158(%rip), %rdi
    0000020f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 527
DWARF CFI Instructions:
    <empty>
End of Function "_Z23testOneFunction_logicalIhPFbPKhibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23testOneFunction_logicalIiPFbPKiibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 377
  State       : disassembled
  Address     : 0x1f030
  Size        : 0x214
  MaxSize     : 0x220
  Offset      : 0x1f030
  Section     : .text
  Orc Section : .local.text._Z23testOneFunction_logicalIiPFbPKiibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0376:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	xorl	%r15d, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%r8, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rdi, %r13
    00000013: 	pushq	%r12
    00000015: 	movl	%esi, %r12d
    00000018: 	pushq	%rbp
    00000019: 	movq	%rcx, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	movl	%edx, %ebx
    0000001f: 	movzbl	%bl, %ebx
    00000022: 	subq	$0x18, %rsp
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x8(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	callq	clock@PLT # Offset: 54
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	movl	iterations(%rip), %eax
    00000048: 	testl	%eax, %eax
    0000004a: 	jle	.Ltmp2655 # Offset: 74
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp2657:
    00000050: 	movl	%ebx, %edx
    00000052: 	movl	%r12d, %esi
    00000055: 	movq	%r13, %rdi
    00000058: 	callq	*%rbp # Offset: 88
    0000005a: 	testb	%al, %al
    0000005c: 	je	.Ltmp2656 # Offset: 92
    00000062: 	addl	$0x1, %r15d
    00000066: 	cmpl	%r15d, iterations(%rip)
    0000006d: 	jg	.Ltmp2657 # Offset: 109
.Ltmp2655:
    0000006f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000076: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000007d: 	subq	$0x20, %rax
    00000081: 	cmpq	%rax, %rbx
    00000084: 	je	.Ltmp2658 # Offset: 132
    0000008a: 	leaq	0x10(%rbx), %rdi
    0000008e: 	movq	0x8(%r14), %r12
    00000092: 	movq	%rdi, (%rbx)
    00000095: 	movq	(%r14), %rbp
    00000098: 	movq	%rbp, %rax
    0000009b: 	addq	%r12, %rax
    0000009e: 	je	.Ltmp2659 # Offset: 158
    000000a0: 	testq	%rbp, %rbp
    000000a3: 	je	.Ltmp2660 # Offset: 163
.Ltmp2659:
    000000a9: 	movq	%r12, (%rsp)
    000000ad: 	cmpq	$0xf, %r12
    000000b1: 	ja	.Ltmp2661 # Offset: 177
    000000b7: 	cmpq	$0x1, %r12
    000000bb: 	jne	.Ltmp2662 # Offset: 187
    000000c1: 	movzbl	(%rbp), %eax
    000000c5: 	movb	%al, 0x10(%rbx)
.Ltmp2665:
    000000c8: 	movq	%r12, 0x8(%rbx)
    000000cc: 	movb	$0x0, (%rdi,%r12)
    000000d1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000d8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000df: 	addq	$0x20, %rax
    000000e3: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000000ea: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000000f1: 	je	.Ltmp2663 # Offset: 241
.Ltmp2666:
    000000f7: 	movq	-0x20(%rax), %rbp
    000000fb: 	callq	clock@PLT # Offset: 251
    00000100: 	movq	%rax, end_time(%rip)
    00000107: 	movq	0x8(%rsp), %rdx
    0000010c: 	subq	%fs:0x28, %rdx
    00000115: 	jne	.Ltmp2664 # Offset: 277
    0000011b: 	subq	start_time(%rip), %rax
    00000122: 	pxor	%xmm0, %xmm0
    00000126: 	movq	%rbp, %rdi
    00000129: 	cvtsi2sd	%rax, %xmm0
    0000012e: 	divsd	DATAat0x335b0(%rip), %xmm0
    00000136: 	addq	$0x18, %rsp
    0000013a: 	popq	%rbx
    0000013b: 	popq	%rbp
    0000013c: 	popq	%r12
    0000013e: 	popq	%r13
    00000140: 	popq	%r14
    00000142: 	popq	%r15
    00000144: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 324
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp2656:
    00000150: 	movq	(%r14), %rdx
    00000153: 	leaq	DATAat0x331c8(%rip), %rsi
    0000015a: 	movl	$0x1, %edi
    0000015f: 	addl	$0x1, %r15d
    00000163: 	callq	__printf_chk@PLT # Offset: 355
    00000168: 	cmpl	%r15d, iterations(%rip)
    0000016f: 	jg	.Ltmp2657 # Offset: 367
    00000175: 	jmp	.Ltmp2655 # Offset: 373
    0000017a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2661:
    00000180: 	movq	%rbx, %rdi
    00000183: 	movq	%rsp, %rsi
    00000186: 	xorl	%edx, %edx
    00000188: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 392
    0000018d: 	movq	%rax, (%rbx)
    00000190: 	movq	%rax, %rdi
    00000193: 	movq	(%rsp), %rax
    00000197: 	movq	%rax, 0x10(%rbx)
.Ltmp2667:
    0000019b: 	movq	%r12, %rdx
    0000019e: 	movq	%rbp, %rsi
    000001a1: 	callq	memcpy@PLT # Offset: 417
    000001a6: 	movq	(%rsp), %r12
    000001aa: 	movq	(%rbx), %rdi
    000001ad: 	jmp	.Ltmp2665 # Offset: 429
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2658:
    000001b8: 	movq	%r14, %rsi
    000001bb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001c2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 450
    000001c7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ce: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001d5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001dc: 	jne	.Ltmp2666 # Offset: 476
.Ltmp2663:
    000001e2: 	movq	-0x8(%rdx), %rax
    000001e6: 	addq	$0x200, %rax
    000001ec: 	jmp	.Ltmp2666 # Offset: 492
    000001f1: 	nopl	(%rax) # Size: 7
.Ltmp2662:
    000001f8: 	testq	%r12, %r12
    000001fb: 	je	.Ltmp2665 # Offset: 507
    00000201: 	jmp	.Ltmp2667 # Offset: 513
.Ltmp2664:
    00000203: 	callq	__stack_chk_fail@PLT # Offset: 515
.Ltmp2660:
    00000208: 	leaq	DATAat0x33158(%rip), %rdi
    0000020f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 527
DWARF CFI Instructions:
    <empty>
End of Function "_Z23testOneFunction_logicalIiPFbPKiibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23testOneFunction_logicalIsPFbPKsibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 378
  State       : disassembled
  Address     : 0x1f250
  Size        : 0x214
  MaxSize     : 0x220
  Offset      : 0x1f250
  Section     : .text
  Orc Section : .local.text._Z23testOneFunction_logicalIsPFbPKsibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0377:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	xorl	%r15d, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%r8, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rdi, %r13
    00000013: 	pushq	%r12
    00000015: 	movl	%esi, %r12d
    00000018: 	pushq	%rbp
    00000019: 	movq	%rcx, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	movl	%edx, %ebx
    0000001f: 	movzbl	%bl, %ebx
    00000022: 	subq	$0x18, %rsp
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x8(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	callq	clock@PLT # Offset: 54
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	movl	iterations(%rip), %eax
    00000048: 	testl	%eax, %eax
    0000004a: 	jle	.Ltmp2668 # Offset: 74
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp2670:
    00000050: 	movl	%ebx, %edx
    00000052: 	movl	%r12d, %esi
    00000055: 	movq	%r13, %rdi
    00000058: 	callq	*%rbp # Offset: 88
    0000005a: 	testb	%al, %al
    0000005c: 	je	.Ltmp2669 # Offset: 92
    00000062: 	addl	$0x1, %r15d
    00000066: 	cmpl	%r15d, iterations(%rip)
    0000006d: 	jg	.Ltmp2670 # Offset: 109
.Ltmp2668:
    0000006f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000076: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000007d: 	subq	$0x20, %rax
    00000081: 	cmpq	%rax, %rbx
    00000084: 	je	.Ltmp2671 # Offset: 132
    0000008a: 	leaq	0x10(%rbx), %rdi
    0000008e: 	movq	0x8(%r14), %r12
    00000092: 	movq	%rdi, (%rbx)
    00000095: 	movq	(%r14), %rbp
    00000098: 	movq	%rbp, %rax
    0000009b: 	addq	%r12, %rax
    0000009e: 	je	.Ltmp2672 # Offset: 158
    000000a0: 	testq	%rbp, %rbp
    000000a3: 	je	.Ltmp2673 # Offset: 163
.Ltmp2672:
    000000a9: 	movq	%r12, (%rsp)
    000000ad: 	cmpq	$0xf, %r12
    000000b1: 	ja	.Ltmp2674 # Offset: 177
    000000b7: 	cmpq	$0x1, %r12
    000000bb: 	jne	.Ltmp2675 # Offset: 187
    000000c1: 	movzbl	(%rbp), %eax
    000000c5: 	movb	%al, 0x10(%rbx)
.Ltmp2678:
    000000c8: 	movq	%r12, 0x8(%rbx)
    000000cc: 	movb	$0x0, (%rdi,%r12)
    000000d1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000d8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000df: 	addq	$0x20, %rax
    000000e3: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000000ea: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000000f1: 	je	.Ltmp2676 # Offset: 241
.Ltmp2679:
    000000f7: 	movq	-0x20(%rax), %rbp
    000000fb: 	callq	clock@PLT # Offset: 251
    00000100: 	movq	%rax, end_time(%rip)
    00000107: 	movq	0x8(%rsp), %rdx
    0000010c: 	subq	%fs:0x28, %rdx
    00000115: 	jne	.Ltmp2677 # Offset: 277
    0000011b: 	subq	start_time(%rip), %rax
    00000122: 	pxor	%xmm0, %xmm0
    00000126: 	movq	%rbp, %rdi
    00000129: 	cvtsi2sd	%rax, %xmm0
    0000012e: 	divsd	DATAat0x335b0(%rip), %xmm0
    00000136: 	addq	$0x18, %rsp
    0000013a: 	popq	%rbx
    0000013b: 	popq	%rbp
    0000013c: 	popq	%r12
    0000013e: 	popq	%r13
    00000140: 	popq	%r14
    00000142: 	popq	%r15
    00000144: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 324
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp2669:
    00000150: 	movq	(%r14), %rdx
    00000153: 	leaq	DATAat0x331c8(%rip), %rsi
    0000015a: 	movl	$0x1, %edi
    0000015f: 	addl	$0x1, %r15d
    00000163: 	callq	__printf_chk@PLT # Offset: 355
    00000168: 	cmpl	%r15d, iterations(%rip)
    0000016f: 	jg	.Ltmp2670 # Offset: 367
    00000175: 	jmp	.Ltmp2668 # Offset: 373
    0000017a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2674:
    00000180: 	movq	%rbx, %rdi
    00000183: 	movq	%rsp, %rsi
    00000186: 	xorl	%edx, %edx
    00000188: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 392
    0000018d: 	movq	%rax, (%rbx)
    00000190: 	movq	%rax, %rdi
    00000193: 	movq	(%rsp), %rax
    00000197: 	movq	%rax, 0x10(%rbx)
.Ltmp2680:
    0000019b: 	movq	%r12, %rdx
    0000019e: 	movq	%rbp, %rsi
    000001a1: 	callq	memcpy@PLT # Offset: 417
    000001a6: 	movq	(%rsp), %r12
    000001aa: 	movq	(%rbx), %rdi
    000001ad: 	jmp	.Ltmp2678 # Offset: 429
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2671:
    000001b8: 	movq	%r14, %rsi
    000001bb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001c2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 450
    000001c7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ce: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001d5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001dc: 	jne	.Ltmp2679 # Offset: 476
.Ltmp2676:
    000001e2: 	movq	-0x8(%rdx), %rax
    000001e6: 	addq	$0x200, %rax
    000001ec: 	jmp	.Ltmp2679 # Offset: 492
    000001f1: 	nopl	(%rax) # Size: 7
.Ltmp2675:
    000001f8: 	testq	%r12, %r12
    000001fb: 	je	.Ltmp2678 # Offset: 507
    00000201: 	jmp	.Ltmp2680 # Offset: 513
.Ltmp2677:
    00000203: 	callq	__stack_chk_fail@PLT # Offset: 515
.Ltmp2673:
    00000208: 	leaq	DATAat0x33158(%rip), %rdi
    0000020f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 527
DWARF CFI Instructions:
    <empty>
End of Function "_Z23testOneFunction_logicalIsPFbPKsibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23testOneFunction_logicalIlPFbPKlibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 379
  State       : disassembled
  Address     : 0x1f470
  Size        : 0x214
  MaxSize     : 0x220
  Offset      : 0x1f470
  Section     : .text
  Orc Section : .local.text._Z23testOneFunction_logicalIlPFbPKlibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0378:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	xorl	%r15d, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%r8, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rdi, %r13
    00000013: 	pushq	%r12
    00000015: 	movl	%esi, %r12d
    00000018: 	pushq	%rbp
    00000019: 	movq	%rcx, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	movl	%edx, %ebx
    0000001f: 	movzbl	%bl, %ebx
    00000022: 	subq	$0x18, %rsp
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x8(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	callq	clock@PLT # Offset: 54
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	movl	iterations(%rip), %eax
    00000048: 	testl	%eax, %eax
    0000004a: 	jle	.Ltmp2681 # Offset: 74
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp2683:
    00000050: 	movl	%ebx, %edx
    00000052: 	movl	%r12d, %esi
    00000055: 	movq	%r13, %rdi
    00000058: 	callq	*%rbp # Offset: 88
    0000005a: 	testb	%al, %al
    0000005c: 	je	.Ltmp2682 # Offset: 92
    00000062: 	addl	$0x1, %r15d
    00000066: 	cmpl	%r15d, iterations(%rip)
    0000006d: 	jg	.Ltmp2683 # Offset: 109
.Ltmp2681:
    0000006f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000076: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000007d: 	subq	$0x20, %rax
    00000081: 	cmpq	%rax, %rbx
    00000084: 	je	.Ltmp2684 # Offset: 132
    0000008a: 	leaq	0x10(%rbx), %rdi
    0000008e: 	movq	0x8(%r14), %r12
    00000092: 	movq	%rdi, (%rbx)
    00000095: 	movq	(%r14), %rbp
    00000098: 	movq	%rbp, %rax
    0000009b: 	addq	%r12, %rax
    0000009e: 	je	.Ltmp2685 # Offset: 158
    000000a0: 	testq	%rbp, %rbp
    000000a3: 	je	.Ltmp2686 # Offset: 163
.Ltmp2685:
    000000a9: 	movq	%r12, (%rsp)
    000000ad: 	cmpq	$0xf, %r12
    000000b1: 	ja	.Ltmp2687 # Offset: 177
    000000b7: 	cmpq	$0x1, %r12
    000000bb: 	jne	.Ltmp2688 # Offset: 187
    000000c1: 	movzbl	(%rbp), %eax
    000000c5: 	movb	%al, 0x10(%rbx)
.Ltmp2691:
    000000c8: 	movq	%r12, 0x8(%rbx)
    000000cc: 	movb	$0x0, (%rdi,%r12)
    000000d1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000d8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000df: 	addq	$0x20, %rax
    000000e3: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000000ea: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000000f1: 	je	.Ltmp2689 # Offset: 241
.Ltmp2692:
    000000f7: 	movq	-0x20(%rax), %rbp
    000000fb: 	callq	clock@PLT # Offset: 251
    00000100: 	movq	%rax, end_time(%rip)
    00000107: 	movq	0x8(%rsp), %rdx
    0000010c: 	subq	%fs:0x28, %rdx
    00000115: 	jne	.Ltmp2690 # Offset: 277
    0000011b: 	subq	start_time(%rip), %rax
    00000122: 	pxor	%xmm0, %xmm0
    00000126: 	movq	%rbp, %rdi
    00000129: 	cvtsi2sd	%rax, %xmm0
    0000012e: 	divsd	DATAat0x335b0(%rip), %xmm0
    00000136: 	addq	$0x18, %rsp
    0000013a: 	popq	%rbx
    0000013b: 	popq	%rbp
    0000013c: 	popq	%r12
    0000013e: 	popq	%r13
    00000140: 	popq	%r14
    00000142: 	popq	%r15
    00000144: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 324
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp2682:
    00000150: 	movq	(%r14), %rdx
    00000153: 	leaq	DATAat0x331c8(%rip), %rsi
    0000015a: 	movl	$0x1, %edi
    0000015f: 	addl	$0x1, %r15d
    00000163: 	callq	__printf_chk@PLT # Offset: 355
    00000168: 	cmpl	%r15d, iterations(%rip)
    0000016f: 	jg	.Ltmp2683 # Offset: 367
    00000175: 	jmp	.Ltmp2681 # Offset: 373
    0000017a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2687:
    00000180: 	movq	%rbx, %rdi
    00000183: 	movq	%rsp, %rsi
    00000186: 	xorl	%edx, %edx
    00000188: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 392
    0000018d: 	movq	%rax, (%rbx)
    00000190: 	movq	%rax, %rdi
    00000193: 	movq	(%rsp), %rax
    00000197: 	movq	%rax, 0x10(%rbx)
.Ltmp2693:
    0000019b: 	movq	%r12, %rdx
    0000019e: 	movq	%rbp, %rsi
    000001a1: 	callq	memcpy@PLT # Offset: 417
    000001a6: 	movq	(%rsp), %r12
    000001aa: 	movq	(%rbx), %rdi
    000001ad: 	jmp	.Ltmp2691 # Offset: 429
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2684:
    000001b8: 	movq	%r14, %rsi
    000001bb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001c2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 450
    000001c7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ce: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001d5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001dc: 	jne	.Ltmp2692 # Offset: 476
.Ltmp2689:
    000001e2: 	movq	-0x8(%rdx), %rax
    000001e6: 	addq	$0x200, %rax
    000001ec: 	jmp	.Ltmp2692 # Offset: 492
    000001f1: 	nopl	(%rax) # Size: 7
.Ltmp2688:
    000001f8: 	testq	%r12, %r12
    000001fb: 	je	.Ltmp2691 # Offset: 507
    00000201: 	jmp	.Ltmp2693 # Offset: 513
.Ltmp2690:
    00000203: 	callq	__stack_chk_fail@PLT # Offset: 515
.Ltmp2686:
    00000208: 	leaq	DATAat0x33158(%rip), %rdi
    0000020f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 527
DWARF CFI Instructions:
    <empty>
End of Function "_Z23testOneFunction_logicalIlPFbPKlibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23testOneFunction_logicalImPFbPKmibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 380
  State       : disassembled
  Address     : 0x1f690
  Size        : 0x214
  MaxSize     : 0x220
  Offset      : 0x1f690
  Section     : .text
  Orc Section : .local.text._Z23testOneFunction_logicalImPFbPKmibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0379:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	xorl	%r15d, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%r8, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rdi, %r13
    00000013: 	pushq	%r12
    00000015: 	movl	%esi, %r12d
    00000018: 	pushq	%rbp
    00000019: 	movq	%rcx, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	movl	%edx, %ebx
    0000001f: 	movzbl	%bl, %ebx
    00000022: 	subq	$0x18, %rsp
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x8(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	callq	clock@PLT # Offset: 54
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	movl	iterations(%rip), %eax
    00000048: 	testl	%eax, %eax
    0000004a: 	jle	.Ltmp2694 # Offset: 74
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp2696:
    00000050: 	movl	%ebx, %edx
    00000052: 	movl	%r12d, %esi
    00000055: 	movq	%r13, %rdi
    00000058: 	callq	*%rbp # Offset: 88
    0000005a: 	testb	%al, %al
    0000005c: 	je	.Ltmp2695 # Offset: 92
    00000062: 	addl	$0x1, %r15d
    00000066: 	cmpl	%r15d, iterations(%rip)
    0000006d: 	jg	.Ltmp2696 # Offset: 109
.Ltmp2694:
    0000006f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000076: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000007d: 	subq	$0x20, %rax
    00000081: 	cmpq	%rax, %rbx
    00000084: 	je	.Ltmp2697 # Offset: 132
    0000008a: 	leaq	0x10(%rbx), %rdi
    0000008e: 	movq	0x8(%r14), %r12
    00000092: 	movq	%rdi, (%rbx)
    00000095: 	movq	(%r14), %rbp
    00000098: 	movq	%rbp, %rax
    0000009b: 	addq	%r12, %rax
    0000009e: 	je	.Ltmp2698 # Offset: 158
    000000a0: 	testq	%rbp, %rbp
    000000a3: 	je	.Ltmp2699 # Offset: 163
.Ltmp2698:
    000000a9: 	movq	%r12, (%rsp)
    000000ad: 	cmpq	$0xf, %r12
    000000b1: 	ja	.Ltmp2700 # Offset: 177
    000000b7: 	cmpq	$0x1, %r12
    000000bb: 	jne	.Ltmp2701 # Offset: 187
    000000c1: 	movzbl	(%rbp), %eax
    000000c5: 	movb	%al, 0x10(%rbx)
.Ltmp2704:
    000000c8: 	movq	%r12, 0x8(%rbx)
    000000cc: 	movb	$0x0, (%rdi,%r12)
    000000d1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000d8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000df: 	addq	$0x20, %rax
    000000e3: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000000ea: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000000f1: 	je	.Ltmp2702 # Offset: 241
.Ltmp2705:
    000000f7: 	movq	-0x20(%rax), %rbp
    000000fb: 	callq	clock@PLT # Offset: 251
    00000100: 	movq	%rax, end_time(%rip)
    00000107: 	movq	0x8(%rsp), %rdx
    0000010c: 	subq	%fs:0x28, %rdx
    00000115: 	jne	.Ltmp2703 # Offset: 277
    0000011b: 	subq	start_time(%rip), %rax
    00000122: 	pxor	%xmm0, %xmm0
    00000126: 	movq	%rbp, %rdi
    00000129: 	cvtsi2sd	%rax, %xmm0
    0000012e: 	divsd	DATAat0x335b0(%rip), %xmm0
    00000136: 	addq	$0x18, %rsp
    0000013a: 	popq	%rbx
    0000013b: 	popq	%rbp
    0000013c: 	popq	%r12
    0000013e: 	popq	%r13
    00000140: 	popq	%r14
    00000142: 	popq	%r15
    00000144: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 324
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp2695:
    00000150: 	movq	(%r14), %rdx
    00000153: 	leaq	DATAat0x331c8(%rip), %rsi
    0000015a: 	movl	$0x1, %edi
    0000015f: 	addl	$0x1, %r15d
    00000163: 	callq	__printf_chk@PLT # Offset: 355
    00000168: 	cmpl	%r15d, iterations(%rip)
    0000016f: 	jg	.Ltmp2696 # Offset: 367
    00000175: 	jmp	.Ltmp2694 # Offset: 373
    0000017a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2700:
    00000180: 	movq	%rbx, %rdi
    00000183: 	movq	%rsp, %rsi
    00000186: 	xorl	%edx, %edx
    00000188: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 392
    0000018d: 	movq	%rax, (%rbx)
    00000190: 	movq	%rax, %rdi
    00000193: 	movq	(%rsp), %rax
    00000197: 	movq	%rax, 0x10(%rbx)
.Ltmp2706:
    0000019b: 	movq	%r12, %rdx
    0000019e: 	movq	%rbp, %rsi
    000001a1: 	callq	memcpy@PLT # Offset: 417
    000001a6: 	movq	(%rsp), %r12
    000001aa: 	movq	(%rbx), %rdi
    000001ad: 	jmp	.Ltmp2704 # Offset: 429
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2697:
    000001b8: 	movq	%r14, %rsi
    000001bb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001c2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 450
    000001c7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ce: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001d5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001dc: 	jne	.Ltmp2705 # Offset: 476
.Ltmp2702:
    000001e2: 	movq	-0x8(%rdx), %rax
    000001e6: 	addq	$0x200, %rax
    000001ec: 	jmp	.Ltmp2705 # Offset: 492
    000001f1: 	nopl	(%rax) # Size: 7
.Ltmp2701:
    000001f8: 	testq	%r12, %r12
    000001fb: 	je	.Ltmp2704 # Offset: 507
    00000201: 	jmp	.Ltmp2706 # Offset: 513
.Ltmp2703:
    00000203: 	callq	__stack_chk_fail@PLT # Offset: 515
.Ltmp2699:
    00000208: 	leaq	DATAat0x33158(%rip), %rdi
    0000020f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 527
DWARF CFI Instructions:
    <empty>
End of Function "_Z23testOneFunction_logicalImPFbPKmibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23testOneFunction_logicalIjPFbPKjibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 381
  State       : disassembled
  Address     : 0x1f8b0
  Size        : 0x214
  MaxSize     : 0x220
  Offset      : 0x1f8b0
  Section     : .text
  Orc Section : .local.text._Z23testOneFunction_logicalIjPFbPKjibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0380:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	xorl	%r15d, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movq	%r8, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rdi, %r13
    00000013: 	pushq	%r12
    00000015: 	movl	%esi, %r12d
    00000018: 	pushq	%rbp
    00000019: 	movq	%rcx, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	movl	%edx, %ebx
    0000001f: 	movzbl	%bl, %ebx
    00000022: 	subq	$0x18, %rsp
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x8(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	callq	clock@PLT # Offset: 54
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	movl	iterations(%rip), %eax
    00000048: 	testl	%eax, %eax
    0000004a: 	jle	.Ltmp2707 # Offset: 74
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp2709:
    00000050: 	movl	%ebx, %edx
    00000052: 	movl	%r12d, %esi
    00000055: 	movq	%r13, %rdi
    00000058: 	callq	*%rbp # Offset: 88
    0000005a: 	testb	%al, %al
    0000005c: 	je	.Ltmp2708 # Offset: 92
    00000062: 	addl	$0x1, %r15d
    00000066: 	cmpl	%r15d, iterations(%rip)
    0000006d: 	jg	.Ltmp2709 # Offset: 109
.Ltmp2707:
    0000006f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000076: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000007d: 	subq	$0x20, %rax
    00000081: 	cmpq	%rax, %rbx
    00000084: 	je	.Ltmp2710 # Offset: 132
    0000008a: 	leaq	0x10(%rbx), %rdi
    0000008e: 	movq	0x8(%r14), %r12
    00000092: 	movq	%rdi, (%rbx)
    00000095: 	movq	(%r14), %rbp
    00000098: 	movq	%rbp, %rax
    0000009b: 	addq	%r12, %rax
    0000009e: 	je	.Ltmp2711 # Offset: 158
    000000a0: 	testq	%rbp, %rbp
    000000a3: 	je	.Ltmp2712 # Offset: 163
.Ltmp2711:
    000000a9: 	movq	%r12, (%rsp)
    000000ad: 	cmpq	$0xf, %r12
    000000b1: 	ja	.Ltmp2713 # Offset: 177
    000000b7: 	cmpq	$0x1, %r12
    000000bb: 	jne	.Ltmp2714 # Offset: 187
    000000c1: 	movzbl	(%rbp), %eax
    000000c5: 	movb	%al, 0x10(%rbx)
.Ltmp2717:
    000000c8: 	movq	%r12, 0x8(%rbx)
    000000cc: 	movb	$0x0, (%rdi,%r12)
    000000d1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000d8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000df: 	addq	$0x20, %rax
    000000e3: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000000ea: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000000f1: 	je	.Ltmp2715 # Offset: 241
.Ltmp2718:
    000000f7: 	movq	-0x20(%rax), %rbp
    000000fb: 	callq	clock@PLT # Offset: 251
    00000100: 	movq	%rax, end_time(%rip)
    00000107: 	movq	0x8(%rsp), %rdx
    0000010c: 	subq	%fs:0x28, %rdx
    00000115: 	jne	.Ltmp2716 # Offset: 277
    0000011b: 	subq	start_time(%rip), %rax
    00000122: 	pxor	%xmm0, %xmm0
    00000126: 	movq	%rbp, %rdi
    00000129: 	cvtsi2sd	%rax, %xmm0
    0000012e: 	divsd	DATAat0x335b0(%rip), %xmm0
    00000136: 	addq	$0x18, %rsp
    0000013a: 	popq	%rbx
    0000013b: 	popq	%rbp
    0000013c: 	popq	%r12
    0000013e: 	popq	%r13
    00000140: 	popq	%r14
    00000142: 	popq	%r15
    00000144: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 324
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp2708:
    00000150: 	movq	(%r14), %rdx
    00000153: 	leaq	DATAat0x331c8(%rip), %rsi
    0000015a: 	movl	$0x1, %edi
    0000015f: 	addl	$0x1, %r15d
    00000163: 	callq	__printf_chk@PLT # Offset: 355
    00000168: 	cmpl	%r15d, iterations(%rip)
    0000016f: 	jg	.Ltmp2709 # Offset: 367
    00000175: 	jmp	.Ltmp2707 # Offset: 373
    0000017a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2713:
    00000180: 	movq	%rbx, %rdi
    00000183: 	movq	%rsp, %rsi
    00000186: 	xorl	%edx, %edx
    00000188: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 392
    0000018d: 	movq	%rax, (%rbx)
    00000190: 	movq	%rax, %rdi
    00000193: 	movq	(%rsp), %rax
    00000197: 	movq	%rax, 0x10(%rbx)
.Ltmp2719:
    0000019b: 	movq	%r12, %rdx
    0000019e: 	movq	%rbp, %rsi
    000001a1: 	callq	memcpy@PLT # Offset: 417
    000001a6: 	movq	(%rsp), %r12
    000001aa: 	movq	(%rbx), %rdi
    000001ad: 	jmp	.Ltmp2717 # Offset: 429
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2710:
    000001b8: 	movq	%r14, %rsi
    000001bb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001c2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 450
    000001c7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ce: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001d5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001dc: 	jne	.Ltmp2718 # Offset: 476
.Ltmp2715:
    000001e2: 	movq	-0x8(%rdx), %rax
    000001e6: 	addq	$0x200, %rax
    000001ec: 	jmp	.Ltmp2718 # Offset: 492
    000001f1: 	nopl	(%rax) # Size: 7
.Ltmp2714:
    000001f8: 	testq	%r12, %r12
    000001fb: 	je	.Ltmp2717 # Offset: 507
    00000201: 	jmp	.Ltmp2719 # Offset: 513
.Ltmp2716:
    00000203: 	callq	__stack_chk_fail@PLT # Offset: 515
.Ltmp2712:
    00000208: 	leaq	DATAat0x33158(%rip), %rdi
    0000020f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 527
DWARF CFI Instructions:
    <empty>
End of Function "_Z23testOneFunction_logicalIjPFbPKjibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIjEvv" after disassembly {
  Number      : 382
  State       : disassembled
  Address     : 0x1fad0
  Size        : 0x2406
  MaxSize     : 0x2410
  Offset      : 0x1fad0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIjEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0381:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	$0x7d00, %edi
    0000000b: 	pushq	%r14
    0000000d: 	pushq	%r13
    0000000f: 	pushq	%r12
    00000011: 	pushq	%rbp
    00000012: 	pushq	%rbx
    00000013: 	subq	$0x118, %rsp
    0000001a: 	movq	%fs:0x28, %rax
    00000023: 	movq	%rax, 0x108(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	leaq	0x50(%rsp), %rax
    00000032: 	movb	$0x0, 0x58(%rsp)
    00000037: 	movq	%rax, 0x28(%rsp)
    0000003c: 	movq	%rax, 0x40(%rsp)
    00000041: 	movabsq	$0x745f3233746e6975, %rax
    0000004b: 	movq	%rax, 0x50(%rsp)
    00000050: 	movq	$0x8, 0x48(%rsp)
    00000059: 	callq	_Znam@PLT # Offset: 89
    0000005e: 	movq	%rax, %r12
    00000061: 	cvttsd2si	init_value(%rip), %rax
    0000006a: 	leaq	0x7d00(%r12), %rdx
    00000072: 	movq	%rax, %xmm0
    00000077: 	movq	%r12, %rax
    0000007a: 	pshufd	$0x0, %xmm0, %xmm0
    0000007f: 	nop # Size: 1
.Ltmp2720:
    00000080: 	movups	%xmm0, (%rax)
    00000083: 	addq	$0x10, %rax
    00000087: 	cmpq	%rax, %rdx
    0000008a: 	jne	.Ltmp2720 # Offset: 138
    0000008c: 	leaq	0xe0(%rsp), %rbp
    00000094: 	leaq	0x40(%rsp), %r13
    00000099: 	leaq	DATAat0x331d8(%rip), %rdx
    000000a0: 	movq	%r13, %rsi
    000000a3: 	movq	%rbp, %rdi
    000000a6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 166
    000000ab: 	movq	%rbp, %rcx
    000000ae: 	leaq	_Z8bit_and1IjET_PKS0_iS0_(%rip), %rdx
    000000b5: 	movl	$0x1f40, %esi
    000000ba: 	movq	%r12, %rdi
    000000bd: 	callq	_Z21testOneFunction_equalIjPFjPKjijEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 189
    000000c2: 	movq	0xe0(%rsp), %rdi
    000000ca: 	leaq	0xf0(%rsp), %rbx
    000000d2: 	cmpq	%rbx, %rdi
    000000d5: 	je	.Ltmp2721 # Offset: 213
    000000d7: 	movq	0xf0(%rsp), %rax
    000000df: 	leaq	0x1(%rax), %rsi
    000000e3: 	callq	_ZdlPvm@PLT # Offset: 227
.Ltmp2721:
    000000e8: 	leaq	DATAat0x331eb(%rip), %rdx
    000000ef: 	movq	%r13, %rsi
    000000f2: 	movq	%rbp, %rdi
    000000f5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 245
    000000fa: 	movq	%rbp, %rcx
    000000fd: 	leaq	_Z8bit_and2IjET_PKS0_iS0_(%rip), %rdx
    00000104: 	movl	$0x1f40, %esi
    00000109: 	movq	%r12, %rdi
    0000010c: 	callq	_Z21testOneFunction_equalIjPFjPKjijEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 268
    00000111: 	movq	0xe0(%rsp), %rdi
    00000119: 	cmpq	%rbx, %rdi
    0000011c: 	je	.Ltmp2722 # Offset: 284
    0000011e: 	movq	0xf0(%rsp), %rax
    00000126: 	leaq	0x1(%rax), %rsi
    0000012a: 	callq	_ZdlPvm@PLT # Offset: 298
.Ltmp2722:
    0000012f: 	leaq	DATAat0x331fe(%rip), %rdx
    00000136: 	movq	%r13, %rsi
    00000139: 	movq	%rbp, %rdi
    0000013c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 316
    00000141: 	movq	%rbp, %rcx
    00000144: 	leaq	_Z8bit_and3IjET_PKS0_iS0_(%rip), %rdx
    0000014b: 	movl	$0x1f40, %esi
    00000150: 	movq	%r12, %rdi
    00000153: 	callq	_Z21testOneFunction_equalIjPFjPKjijEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 339
    00000158: 	movq	0xe0(%rsp), %rdi
    00000160: 	cmpq	%rbx, %rdi
    00000163: 	je	.Ltmp2723 # Offset: 355
    00000165: 	movq	0xf0(%rsp), %rax
    0000016d: 	leaq	0x1(%rax), %rsi
    00000171: 	callq	_ZdlPvm@PLT # Offset: 369
.Ltmp2723:
    00000176: 	movq	0x40(%rsp), %r15
    0000017b: 	movq	0x48(%rsp), %r14
    00000180: 	movq	%rbx, 0xe0(%rsp)
    00000188: 	movq	%r15, %rax
    0000018b: 	addq	%r14, %rax
    0000018e: 	je	.Ltmp2724 # Offset: 398
    00000190: 	testq	%r15, %r15
    00000193: 	je	.Ltmp2725 # Offset: 403
.Ltmp2724:
    00000199: 	movq	%r14, 0x38(%rsp)
    0000019e: 	cmpq	$0xf, %r14
    000001a2: 	ja	.Ltmp2726 # Offset: 418
    000001a8: 	cmpq	$0x1, %r14
    000001ac: 	jne	.Ltmp2727 # Offset: 428
    000001b2: 	movzbl	(%r15), %eax
    000001b6: 	movb	%al, 0xf0(%rsp)
    000001bd: 	movq	%rbx, %rax
.Ltmp2865:
    000001c0: 	movq	%r14, 0xe8(%rsp)
    000001c8: 	movb	$0x0, (%rax,%r14)
    000001cd: 	movabsq	$0x3fffffffffffffff, %rax
    000001d7: 	subq	0xe8(%rsp), %rax
    000001df: 	cmpq	$0x11, %rax
    000001e3: 	jbe	.Ltmp2728 # Offset: 483
    000001e9: 	movl	$0x12, %edx
    000001ee: 	leaq	DATAat0x33211(%rip), %rsi
    000001f5: 	movq	%rbp, %rdi
    000001f8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 504
    000001fd: 	movq	%rbp, %rcx
    00000200: 	leaq	_Z8bit_and4IjET_PKS0_iS0_(%rip), %rdx
    00000207: 	movl	$0x1f40, %esi
    0000020c: 	movq	%r12, %rdi
    0000020f: 	callq	_Z21testOneFunction_equalIjPFjPKjijEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 527
    00000214: 	movq	0xe0(%rsp), %rdi
    0000021c: 	cmpq	%rbx, %rdi
    0000021f: 	je	.Ltmp2729 # Offset: 543
    00000221: 	movq	0xf0(%rsp), %rax
    00000229: 	leaq	0x1(%rax), %rsi
    0000022d: 	callq	_ZdlPvm@PLT # Offset: 557
.Ltmp2729:
    00000232: 	leaq	DATAat0x33224(%rip), %rdx
    00000239: 	movq	%r13, %rsi
    0000023c: 	movq	%rbp, %rdi
    0000023f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 575
    00000244: 	movq	%rbp, %rcx
    00000247: 	leaq	_Z8bit_and5IjET_PKS0_iS0_(%rip), %rdx
    0000024e: 	movl	$0x1f40, %esi
    00000253: 	movq	%r12, %rdi
    00000256: 	callq	_Z21testOneFunction_equalIjPFjPKjijEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 598
    0000025b: 	movq	0xe0(%rsp), %rdi
    00000263: 	cmpq	%rbx, %rdi
    00000266: 	je	.Ltmp2730 # Offset: 614
    00000268: 	movq	0xf0(%rsp), %rax
    00000270: 	leaq	0x1(%rax), %rsi
    00000274: 	callq	_ZdlPvm@PLT # Offset: 628
.Ltmp2730:
    00000279: 	leaq	DATAat0x33237(%rip), %rdx
    00000280: 	movq	%r13, %rsi
    00000283: 	movq	%rbp, %rdi
    00000286: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 646
    0000028b: 	movq	%rbp, %rcx
    0000028e: 	leaq	_Z8bit_and6IjET_PKS0_iS0_(%rip), %rdx
    00000295: 	movl	$0x1f40, %esi
    0000029a: 	movq	%r12, %rdi
    0000029d: 	callq	_Z21testOneFunction_equalIjPFjPKjijEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 669
    000002a2: 	movq	0xe0(%rsp), %rdi
    000002aa: 	cmpq	%rbx, %rdi
    000002ad: 	je	.Ltmp2731 # Offset: 685
    000002af: 	movq	0xf0(%rsp), %rax
    000002b7: 	leaq	0x1(%rax), %rsi
    000002bb: 	callq	_ZdlPvm@PLT # Offset: 699
.Ltmp2731:
    000002c0: 	leaq	DATAat0x3324a(%rip), %rdx
    000002c7: 	movq	%r13, %rsi
    000002ca: 	movq	%rbp, %rdi
    000002cd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 717
    000002d2: 	movq	%rbp, %rcx
    000002d5: 	leaq	_Z8bit_and7IjET_PKS0_iS0_(%rip), %rdx
    000002dc: 	movl	$0x1f40, %esi
    000002e1: 	movq	%r12, %rdi
    000002e4: 	callq	_Z21testOneFunction_equalIjPFjPKjijEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 740
    000002e9: 	movq	0xe0(%rsp), %rdi
    000002f1: 	cmpq	%rbx, %rdi
    000002f4: 	je	.Ltmp2732 # Offset: 756
    000002f6: 	movq	0xf0(%rsp), %rax
    000002fe: 	leaq	0x1(%rax), %rsi
    00000302: 	callq	_ZdlPvm@PLT # Offset: 770
.Ltmp2732:
    00000307: 	leaq	DATAat0x3325d(%rip), %rdx
    0000030e: 	movq	%r13, %rsi
    00000311: 	movq	%rbp, %rdi
    00000314: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 788
    00000319: 	movq	%rbp, %rcx
    0000031c: 	leaq	_Z8bit_and8IjET_PKS0_iS0_(%rip), %rdx
    00000323: 	movl	$0x1f40, %esi
    00000328: 	movq	%r12, %rdi
    0000032b: 	callq	_Z21testOneFunction_equalIjPFjPKjijEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 811
    00000330: 	movq	0xe0(%rsp), %rdi
    00000338: 	cmpq	%rbx, %rdi
    0000033b: 	je	.Ltmp2733 # Offset: 827
    0000033d: 	movq	0xf0(%rsp), %rax
    00000345: 	leaq	0x1(%rax), %rsi
    00000349: 	callq	_ZdlPvm@PLT # Offset: 841
.Ltmp2733:
    0000034e: 	movq	0x40(%rsp), %r15
    00000353: 	leaq	0x70(%rsp), %rax
    00000358: 	movq	0x48(%rsp), %r14
    0000035d: 	movq	%rax, 0x8(%rsp)
    00000362: 	movq	%rax, 0x60(%rsp)
    00000367: 	movq	%r15, %rax
    0000036a: 	addq	%r14, %rax
    0000036d: 	je	.Ltmp2734 # Offset: 877
    0000036f: 	testq	%r15, %r15
    00000372: 	je	.Ltmp2735 # Offset: 882
.Ltmp2734:
    00000378: 	movq	%r14, 0x38(%rsp)
    0000037d: 	cmpq	$0xf, %r14
    00000381: 	ja	.Ltmp2736 # Offset: 897
    00000387: 	cmpq	$0x1, %r14
    0000038b: 	jne	.Ltmp2737 # Offset: 907
    00000391: 	movzbl	(%r15), %eax
    00000395: 	movb	%al, 0x70(%rsp)
    00000399: 	movq	0x8(%rsp), %rax
.Ltmp2871:
    0000039e: 	movq	%r14, 0x68(%rsp)
    000003a3: 	movb	$0x0, (%rax,%r14)
    000003a8: 	movabsq	$0x3fffffffffffffff, %rax
    000003b2: 	subq	0x68(%rsp), %rax
    000003b7: 	cmpq	$0x10, %rax
    000003bb: 	jbe	.Ltmp2738 # Offset: 955
    000003c1: 	leaq	0x60(%rsp), %rdi
    000003c6: 	movl	$0x11, %edx
    000003cb: 	leaq	DATAat0x33270(%rip), %rsi
    000003d2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 978
    000003d7: 	movl	iterations(%rip), %esi
    000003dd: 	movq	0x60(%rsp), %rdi
    000003e2: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 994
    000003e7: 	movq	0x40(%rsp), %r15
    000003ec: 	movq	0x48(%rsp), %r14
    000003f1: 	movq	%rbx, 0xe0(%rsp)
    000003f9: 	movq	%r15, %rax
    000003fc: 	addq	%r14, %rax
    000003ff: 	je	.Ltmp2739 # Offset: 1023
    00000401: 	testq	%r15, %r15
    00000404: 	je	.Ltmp2740 # Offset: 1028
.Ltmp2739:
    0000040a: 	movq	%r14, 0x38(%rsp)
    0000040f: 	cmpq	$0xf, %r14
    00000413: 	ja	.Ltmp2741 # Offset: 1043
    00000419: 	cmpq	$0x1, %r14
    0000041d: 	jne	.Ltmp2742 # Offset: 1053
    00000423: 	movzbl	(%r15), %eax
    00000427: 	movb	%al, 0xf0(%rsp)
    0000042e: 	movq	%rbx, %rax
.Ltmp2869:
    00000431: 	movq	%r14, 0xe8(%rsp)
    00000439: 	movb	$0x0, (%rax,%r14)
    0000043e: 	movabsq	$0x3fffffffffffffff, %rax
    00000448: 	subq	0xe8(%rsp), %rax
    00000450: 	cmpq	$0x10, %rax
    00000454: 	jbe	.Ltmp2743 # Offset: 1108
    0000045a: 	movl	$0x11, %edx
    0000045f: 	leaq	DATAat0x33282(%rip), %rsi
    00000466: 	movq	%rbp, %rdi
    00000469: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1129
    0000046e: 	movq	%rbp, %rcx
    00000471: 	leaq	_Z7bit_or1IjET_PKS0_iS0_(%rip), %rdx
    00000478: 	movl	$0x1f40, %esi
    0000047d: 	movq	%r12, %rdi
    00000480: 	callq	_Z21testOneFunction_equalIjPFjPKjijEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1152
    00000485: 	movq	0xe0(%rsp), %rdi
    0000048d: 	cmpq	%rbx, %rdi
    00000490: 	je	.Ltmp2744 # Offset: 1168
    00000492: 	movq	0xf0(%rsp), %rax
    0000049a: 	leaq	0x1(%rax), %rsi
    0000049e: 	callq	_ZdlPvm@PLT # Offset: 1182
.Ltmp2744:
    000004a3: 	movq	0x40(%rsp), %r15
    000004a8: 	movq	0x48(%rsp), %r14
    000004ad: 	movq	%rbx, 0xe0(%rsp)
    000004b5: 	movq	%r15, %rax
    000004b8: 	addq	%r14, %rax
    000004bb: 	je	.Ltmp2745 # Offset: 1211
    000004bd: 	testq	%r15, %r15
    000004c0: 	je	.Ltmp2746 # Offset: 1216
.Ltmp2745:
    000004c6: 	movq	%r14, 0x38(%rsp)
    000004cb: 	cmpq	$0xf, %r14
    000004cf: 	ja	.Ltmp2747 # Offset: 1231
    000004d5: 	cmpq	$0x1, %r14
    000004d9: 	jne	.Ltmp2748 # Offset: 1241
    000004df: 	movzbl	(%r15), %eax
    000004e3: 	movb	%al, 0xf0(%rsp)
    000004ea: 	movq	%rbx, %rax
.Ltmp2867:
    000004ed: 	movq	%r14, 0xe8(%rsp)
    000004f5: 	movb	$0x0, (%rax,%r14)
    000004fa: 	movabsq	$0x3fffffffffffffff, %rax
    00000504: 	subq	0xe8(%rsp), %rax
    0000050c: 	cmpq	$0x10, %rax
    00000510: 	jbe	.Ltmp2749 # Offset: 1296
    00000516: 	movl	$0x11, %edx
    0000051b: 	leaq	DATAat0x33294(%rip), %rsi
    00000522: 	movq	%rbp, %rdi
    00000525: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1317
    0000052a: 	movq	%rbp, %rcx
    0000052d: 	leaq	_Z7bit_or2IjET_PKS0_iS0_(%rip), %rdx
    00000534: 	movl	$0x1f40, %esi
    00000539: 	movq	%r12, %rdi
    0000053c: 	callq	_Z21testOneFunction_equalIjPFjPKjijEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1340
    00000541: 	movq	0xe0(%rsp), %rdi
    00000549: 	cmpq	%rbx, %rdi
    0000054c: 	je	.Ltmp2750 # Offset: 1356
    0000054e: 	movq	0xf0(%rsp), %rax
    00000556: 	leaq	0x1(%rax), %rsi
    0000055a: 	callq	_ZdlPvm@PLT # Offset: 1370
.Ltmp2750:
    0000055f: 	leaq	DATAat0x332a6(%rip), %rdx
    00000566: 	movq	%r13, %rsi
    00000569: 	movq	%rbp, %rdi
    0000056c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1388
    00000571: 	movq	%rbp, %rcx
    00000574: 	leaq	_Z7bit_or3IjET_PKS0_iS0_(%rip), %rdx
    0000057b: 	movl	$0x1f40, %esi
    00000580: 	movq	%r12, %rdi
    00000583: 	callq	_Z21testOneFunction_equalIjPFjPKjijEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1411
    00000588: 	movq	0xe0(%rsp), %rdi
    00000590: 	cmpq	%rbx, %rdi
    00000593: 	je	.Ltmp2751 # Offset: 1427
    00000595: 	movq	0xf0(%rsp), %rax
    0000059d: 	leaq	0x1(%rax), %rsi
    000005a1: 	callq	_ZdlPvm@PLT # Offset: 1441
.Ltmp2751:
    000005a6: 	leaq	DATAat0x332b8(%rip), %rdx
    000005ad: 	movq	%r13, %rsi
    000005b0: 	movq	%rbp, %rdi
    000005b3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1459
    000005b8: 	movq	%rbp, %rcx
    000005bb: 	leaq	_Z7bit_or4IjET_PKS0_iS0_(%rip), %rdx
    000005c2: 	movl	$0x1f40, %esi
    000005c7: 	movq	%r12, %rdi
    000005ca: 	callq	_Z21testOneFunction_equalIjPFjPKjijEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1482
    000005cf: 	movq	0xe0(%rsp), %rdi
    000005d7: 	cmpq	%rbx, %rdi
    000005da: 	je	.Ltmp2752 # Offset: 1498
    000005dc: 	movq	0xf0(%rsp), %rax
    000005e4: 	leaq	0x1(%rax), %rsi
    000005e8: 	callq	_ZdlPvm@PLT # Offset: 1512
.Ltmp2752:
    000005ed: 	movq	0x40(%rsp), %r15
    000005f2: 	movq	0x48(%rsp), %r14
    000005f7: 	movq	%rbx, 0xe0(%rsp)
    000005ff: 	movq	%r15, %rax
    00000602: 	addq	%r14, %rax
    00000605: 	je	.Ltmp2753 # Offset: 1541
    00000607: 	testq	%r15, %r15
    0000060a: 	je	.Ltmp2754 # Offset: 1546
.Ltmp2753:
    00000610: 	movq	%r14, 0x38(%rsp)
    00000615: 	cmpq	$0xf, %r14
    00000619: 	ja	.Ltmp2755 # Offset: 1561
    0000061f: 	cmpq	$0x1, %r14
    00000623: 	jne	.Ltmp2756 # Offset: 1571
    00000629: 	movzbl	(%r15), %eax
    0000062d: 	movb	%al, 0xf0(%rsp)
    00000634: 	movq	%rbx, %rax
.Ltmp2873:
    00000637: 	movq	%r14, 0xe8(%rsp)
    0000063f: 	movb	$0x0, (%rax,%r14)
    00000644: 	movabsq	$0x3fffffffffffffff, %rax
    0000064e: 	subq	0xe8(%rsp), %rax
    00000656: 	cmpq	$0x10, %rax
    0000065a: 	jbe	.Ltmp2757 # Offset: 1626
    00000660: 	movl	$0x11, %edx
    00000665: 	leaq	DATAat0x332ca(%rip), %rsi
    0000066c: 	movq	%rbp, %rdi
    0000066f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1647
    00000674: 	movq	%rbp, %rcx
    00000677: 	leaq	_Z7bit_or5IjET_PKS0_iS0_(%rip), %rdx
    0000067e: 	movl	$0x1f40, %esi
    00000683: 	movq	%r12, %rdi
    00000686: 	callq	_Z21testOneFunction_equalIjPFjPKjijEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1670
    0000068b: 	movq	0xe0(%rsp), %rdi
    00000693: 	cmpq	%rbx, %rdi
    00000696: 	je	.Ltmp2758 # Offset: 1686
    00000698: 	movq	0xf0(%rsp), %rax
    000006a0: 	leaq	0x1(%rax), %rsi
    000006a4: 	callq	_ZdlPvm@PLT # Offset: 1700
.Ltmp2758:
    000006a9: 	leaq	DATAat0x332dc(%rip), %rdx
    000006b0: 	movq	%r13, %rsi
    000006b3: 	movq	%rbp, %rdi
    000006b6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1718
    000006bb: 	movq	%rbp, %rcx
    000006be: 	leaq	_Z7bit_or6IjET_PKS0_iS0_(%rip), %rdx
    000006c5: 	movl	$0x1f40, %esi
    000006ca: 	movq	%r12, %rdi
    000006cd: 	callq	_Z21testOneFunction_equalIjPFjPKjijEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1741
    000006d2: 	movq	0xe0(%rsp), %rdi
    000006da: 	cmpq	%rbx, %rdi
    000006dd: 	je	.Ltmp2759 # Offset: 1757
    000006df: 	movq	0xf0(%rsp), %rax
    000006e7: 	leaq	0x1(%rax), %rsi
    000006eb: 	callq	_ZdlPvm@PLT # Offset: 1771
.Ltmp2759:
    000006f0: 	leaq	DATAat0x332ee(%rip), %rdx
    000006f7: 	movq	%r13, %rsi
    000006fa: 	movq	%rbp, %rdi
    000006fd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1789
    00000702: 	movq	%rbp, %rcx
    00000705: 	leaq	_Z7bit_or7IjET_PKS0_iS0_(%rip), %rdx
    0000070c: 	movl	$0x1f40, %esi
    00000711: 	movq	%r12, %rdi
    00000714: 	callq	_Z21testOneFunction_equalIjPFjPKjijEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1812
    00000719: 	movq	0xe0(%rsp), %rdi
    00000721: 	cmpq	%rbx, %rdi
    00000724: 	je	.Ltmp2760 # Offset: 1828
    00000726: 	movq	0xf0(%rsp), %rax
    0000072e: 	leaq	0x1(%rax), %rsi
    00000732: 	callq	_ZdlPvm@PLT # Offset: 1842
.Ltmp2760:
    00000737: 	leaq	DATAat0x33300(%rip), %rdx
    0000073e: 	movq	%r13, %rsi
    00000741: 	movq	%rbp, %rdi
    00000744: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1860
    00000749: 	movq	%rbp, %rcx
    0000074c: 	leaq	_Z7bit_or8IjET_PKS0_iS0_(%rip), %rdx
    00000753: 	movl	$0x1f40, %esi
    00000758: 	movq	%r12, %rdi
    0000075b: 	callq	_Z21testOneFunction_equalIjPFjPKjijEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1883
    00000760: 	movq	0xe0(%rsp), %rdi
    00000768: 	cmpq	%rbx, %rdi
    0000076b: 	je	.Ltmp2761 # Offset: 1899
    0000076d: 	movq	0xf0(%rsp), %rax
    00000775: 	leaq	0x1(%rax), %rsi
    00000779: 	callq	_ZdlPvm@PLT # Offset: 1913
.Ltmp2761:
    0000077e: 	movq	0x40(%rsp), %r15
    00000783: 	leaq	0x90(%rsp), %rax
    0000078b: 	movq	0x48(%rsp), %r14
    00000790: 	movq	%rax, 0x10(%rsp)
    00000795: 	movq	%rax, 0x80(%rsp)
    0000079d: 	movq	%r15, %rax
    000007a0: 	addq	%r14, %rax
    000007a3: 	je	.Ltmp2762 # Offset: 1955
    000007a5: 	testq	%r15, %r15
    000007a8: 	je	.Ltmp2763 # Offset: 1960
.Ltmp2762:
    000007ae: 	movq	%r14, 0x38(%rsp)
    000007b3: 	cmpq	$0xf, %r14
    000007b7: 	ja	.Ltmp2764 # Offset: 1975
    000007bd: 	cmpq	$0x1, %r14
    000007c1: 	jne	.Ltmp2765 # Offset: 1985
    000007c7: 	movzbl	(%r15), %eax
    000007cb: 	movb	%al, 0x90(%rsp)
    000007d2: 	movq	0x10(%rsp), %rax
.Ltmp2881:
    000007d7: 	movq	%r14, 0x88(%rsp)
    000007df: 	movb	$0x0, (%rax,%r14)
    000007e4: 	movabsq	$0x3fffffffffffffff, %rax
    000007ee: 	subq	0x88(%rsp), %rax
    000007f6: 	cmpq	$0xf, %rax
    000007fa: 	jbe	.Ltmp2766 # Offset: 2042
    00000800: 	leaq	0x80(%rsp), %rdi
    00000808: 	movl	$0x10, %edx
    0000080d: 	leaq	DATAat0x33312(%rip), %rsi
    00000814: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2068
    00000819: 	movl	iterations(%rip), %esi
    0000081f: 	movq	0x80(%rsp), %rdi
    00000827: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 2087
    0000082c: 	movq	0x40(%rsp), %r15
    00000831: 	movq	0x48(%rsp), %r14
    00000836: 	movq	%rbx, 0xe0(%rsp)
    0000083e: 	movq	%r15, %rax
    00000841: 	addq	%r14, %rax
    00000844: 	je	.Ltmp2767 # Offset: 2116
    00000846: 	testq	%r15, %r15
    00000849: 	je	.Ltmp2768 # Offset: 2121
.Ltmp2767:
    0000084f: 	movq	%r14, 0x38(%rsp)
    00000854: 	cmpq	$0xf, %r14
    00000858: 	ja	.Ltmp2769 # Offset: 2136
    0000085e: 	cmpq	$0x1, %r14
    00000862: 	jne	.Ltmp2770 # Offset: 2146
    00000868: 	movzbl	(%r15), %eax
    0000086c: 	movb	%al, 0xf0(%rsp)
    00000873: 	movq	%rbx, %rax
.Ltmp2879:
    00000876: 	movq	%r14, 0xe8(%rsp)
    0000087e: 	movb	$0x0, (%rax,%r14)
    00000883: 	movabsq	$0x3fffffffffffffff, %rax
    0000088d: 	subq	0xe8(%rsp), %rax
    00000895: 	cmpq	$0x11, %rax
    00000899: 	jbe	.Ltmp2771 # Offset: 2201
    0000089f: 	movl	$0x12, %edx
    000008a4: 	leaq	DATAat0x33323(%rip), %rsi
    000008ab: 	movq	%rbp, %rdi
    000008ae: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2222
    000008b3: 	movq	%rbp, %rcx
    000008b6: 	leaq	_Z8bit_xor1IjET_PKS0_iS0_(%rip), %rdx
    000008bd: 	movl	$0x1f40, %esi
    000008c2: 	movq	%r12, %rdi
    000008c5: 	callq	_Z21testOneFunction_equalIjPFjPKjijEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2245
    000008ca: 	movq	0xe0(%rsp), %rdi
    000008d2: 	cmpq	%rbx, %rdi
    000008d5: 	je	.Ltmp2772 # Offset: 2261
    000008d7: 	movq	0xf0(%rsp), %rax
    000008df: 	leaq	0x1(%rax), %rsi
    000008e3: 	callq	_ZdlPvm@PLT # Offset: 2275
.Ltmp2772:
    000008e8: 	leaq	DATAat0x33336(%rip), %rdx
    000008ef: 	movq	%r13, %rsi
    000008f2: 	movq	%rbp, %rdi
    000008f5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2293
    000008fa: 	movq	%rbp, %rcx
    000008fd: 	leaq	_Z8bit_xor2IjET_PKS0_iS0_(%rip), %rdx
    00000904: 	movl	$0x1f40, %esi
    00000909: 	movq	%r12, %rdi
    0000090c: 	callq	_Z21testOneFunction_equalIjPFjPKjijEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2316
    00000911: 	movq	0xe0(%rsp), %rdi
    00000919: 	cmpq	%rbx, %rdi
    0000091c: 	je	.Ltmp2773 # Offset: 2332
    0000091e: 	movq	0xf0(%rsp), %rax
    00000926: 	leaq	0x1(%rax), %rsi
    0000092a: 	callq	_ZdlPvm@PLT # Offset: 2346
.Ltmp2773:
    0000092f: 	leaq	DATAat0x33349(%rip), %rdx
    00000936: 	movq	%r13, %rsi
    00000939: 	movq	%rbp, %rdi
    0000093c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2364
    00000941: 	movq	%rbp, %rcx
    00000944: 	leaq	_Z8bit_xor3IjET_PKS0_iS0_(%rip), %rdx
    0000094b: 	movl	$0x1f40, %esi
    00000950: 	movq	%r12, %rdi
    00000953: 	callq	_Z21testOneFunction_equalIjPFjPKjijEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2387
    00000958: 	movq	0xe0(%rsp), %rdi
    00000960: 	cmpq	%rbx, %rdi
    00000963: 	je	.Ltmp2774 # Offset: 2403
    00000965: 	movq	0xf0(%rsp), %rax
    0000096d: 	leaq	0x1(%rax), %rsi
    00000971: 	callq	_ZdlPvm@PLT # Offset: 2417
.Ltmp2774:
    00000976: 	leaq	DATAat0x3335c(%rip), %rdx
    0000097d: 	movq	%r13, %rsi
    00000980: 	movq	%rbp, %rdi
    00000983: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2435
    00000988: 	movq	%rbp, %rcx
    0000098b: 	leaq	_Z8bit_xor4IjET_PKS0_iS0_(%rip), %rdx
    00000992: 	movl	$0x1f40, %esi
    00000997: 	movq	%r12, %rdi
    0000099a: 	callq	_Z21testOneFunction_equalIjPFjPKjijEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2458
    0000099f: 	movq	0xe0(%rsp), %rdi
    000009a7: 	cmpq	%rbx, %rdi
    000009aa: 	je	.Ltmp2775 # Offset: 2474
    000009ac: 	movq	0xf0(%rsp), %rax
    000009b4: 	leaq	0x1(%rax), %rsi
    000009b8: 	callq	_ZdlPvm@PLT # Offset: 2488
.Ltmp2775:
    000009bd: 	leaq	DATAat0x3336f(%rip), %rdx
    000009c4: 	movq	%r13, %rsi
    000009c7: 	movq	%rbp, %rdi
    000009ca: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2506
    000009cf: 	movq	%rbp, %rcx
    000009d2: 	leaq	_Z8bit_xor5IjET_PKS0_iS0_(%rip), %rdx
    000009d9: 	movl	$0x1f40, %esi
    000009de: 	movq	%r12, %rdi
    000009e1: 	callq	_Z21testOneFunction_equalIjPFjPKjijEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2529
    000009e6: 	movq	0xe0(%rsp), %rdi
    000009ee: 	cmpq	%rbx, %rdi
    000009f1: 	je	.Ltmp2776 # Offset: 2545
    000009f3: 	movq	0xf0(%rsp), %rax
    000009fb: 	leaq	0x1(%rax), %rsi
    000009ff: 	callq	_ZdlPvm@PLT # Offset: 2559
.Ltmp2776:
    00000a04: 	leaq	DATAat0x33382(%rip), %rdx
    00000a0b: 	movq	%r13, %rsi
    00000a0e: 	movq	%rbp, %rdi
    00000a11: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2577
    00000a16: 	movq	%rbp, %rcx
    00000a19: 	leaq	_Z8bit_xor6IjET_PKS0_iS0_(%rip), %rdx
    00000a20: 	movl	$0x1f40, %esi
    00000a25: 	movq	%r12, %rdi
    00000a28: 	callq	_Z21testOneFunction_equalIjPFjPKjijEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2600
    00000a2d: 	movq	0xe0(%rsp), %rdi
    00000a35: 	cmpq	%rbx, %rdi
    00000a38: 	je	.Ltmp2777 # Offset: 2616
    00000a3a: 	movq	0xf0(%rsp), %rax
    00000a42: 	leaq	0x1(%rax), %rsi
    00000a46: 	callq	_ZdlPvm@PLT # Offset: 2630
.Ltmp2777:
    00000a4b: 	leaq	DATAat0x33395(%rip), %rdx
    00000a52: 	movq	%r13, %rsi
    00000a55: 	movq	%rbp, %rdi
    00000a58: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2648
    00000a5d: 	movq	%rbp, %rcx
    00000a60: 	leaq	_Z8bit_xor7IjET_PKS0_iS0_(%rip), %rdx
    00000a67: 	movl	$0x1f40, %esi
    00000a6c: 	movq	%r12, %rdi
    00000a6f: 	callq	_Z21testOneFunction_equalIjPFjPKjijEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2671
    00000a74: 	movq	0xe0(%rsp), %rdi
    00000a7c: 	cmpq	%rbx, %rdi
    00000a7f: 	je	.Ltmp2778 # Offset: 2687
    00000a81: 	movq	0xf0(%rsp), %rax
    00000a89: 	leaq	0x1(%rax), %rsi
    00000a8d: 	callq	_ZdlPvm@PLT # Offset: 2701
.Ltmp2778:
    00000a92: 	leaq	DATAat0x333a8(%rip), %rdx
    00000a99: 	movq	%r13, %rsi
    00000a9c: 	movq	%rbp, %rdi
    00000a9f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2719
    00000aa4: 	movq	%rbp, %rcx
    00000aa7: 	leaq	_Z8bit_xor8IjET_PKS0_iS0_(%rip), %rdx
    00000aae: 	movl	$0x1f40, %esi
    00000ab3: 	movq	%r12, %rdi
    00000ab6: 	callq	_Z21testOneFunction_equalIjPFjPKjijEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2742
    00000abb: 	movq	0xe0(%rsp), %rdi
    00000ac3: 	cmpq	%rbx, %rdi
    00000ac6: 	je	.Ltmp2779 # Offset: 2758
    00000ac8: 	movq	0xf0(%rsp), %rax
    00000ad0: 	leaq	0x1(%rax), %rsi
    00000ad4: 	callq	_ZdlPvm@PLT # Offset: 2772
.Ltmp2779:
    00000ad9: 	movq	0x40(%rsp), %r15
    00000ade: 	leaq	0xb0(%rsp), %rax
    00000ae6: 	movq	0x48(%rsp), %r14
    00000aeb: 	movq	%rax, 0x18(%rsp)
    00000af0: 	movq	%rax, 0xa0(%rsp)
    00000af8: 	movq	%r15, %rax
    00000afb: 	addq	%r14, %rax
    00000afe: 	je	.Ltmp2780 # Offset: 2814
    00000b00: 	testq	%r15, %r15
    00000b03: 	je	.Ltmp2781 # Offset: 2819
.Ltmp2780:
    00000b09: 	movq	%r14, 0x38(%rsp)
    00000b0e: 	cmpq	$0xf, %r14
    00000b12: 	ja	.Ltmp2782 # Offset: 2834
    00000b18: 	cmpq	$0x1, %r14
    00000b1c: 	jne	.Ltmp2783 # Offset: 2844
    00000b22: 	movzbl	(%r15), %eax
    00000b26: 	movb	%al, 0xb0(%rsp)
    00000b2d: 	movq	0x18(%rsp), %rax
.Ltmp2877:
    00000b32: 	movq	%r14, 0xa8(%rsp)
    00000b3a: 	movb	$0x0, (%rax,%r14)
    00000b3f: 	movabsq	$0x3fffffffffffffff, %rax
    00000b49: 	subq	0xa8(%rsp), %rax
    00000b51: 	cmpq	$0x10, %rax
    00000b55: 	jbe	.Ltmp2784 # Offset: 2901
    00000b5b: 	leaq	0xa0(%rsp), %rdi
    00000b63: 	movl	$0x11, %edx
    00000b68: 	leaq	DATAat0x333bb(%rip), %rsi
    00000b6f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2927
    00000b74: 	movl	iterations(%rip), %esi
    00000b7a: 	movq	0xa0(%rsp), %rdi
    00000b82: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 2946
    00000b87: 	leaq	DATAat0x333cd(%rip), %rdx
    00000b8e: 	movq	%r13, %rsi
    00000b91: 	movq	%rbp, %rdi
    00000b94: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2964
    00000b99: 	movq	%rbp, %r8
    00000b9c: 	movl	$0x1, %edx
    00000ba1: 	movl	$0x1f40, %esi
    00000ba6: 	movq	%r12, %rdi
    00000ba9: 	leaq	_Z10logic_and1IjEbPKT_ib(%rip), %rcx
    00000bb0: 	callq	_Z23testOneFunction_logicalIjPFbPKjibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2992
    00000bb5: 	movq	0xe0(%rsp), %rdi
    00000bbd: 	cmpq	%rbx, %rdi
    00000bc0: 	je	.Ltmp2785 # Offset: 3008
    00000bc2: 	movq	0xf0(%rsp), %rax
    00000bca: 	leaq	0x1(%rax), %rsi
    00000bce: 	callq	_ZdlPvm@PLT # Offset: 3022
.Ltmp2785:
    00000bd3: 	movq	0x40(%rsp), %r15
    00000bd8: 	movq	0x48(%rsp), %r14
    00000bdd: 	movq	%rbx, 0xe0(%rsp)
    00000be5: 	movq	%r15, %rax
    00000be8: 	addq	%r14, %rax
    00000beb: 	je	.Ltmp2786 # Offset: 3051
    00000bed: 	testq	%r15, %r15
    00000bf0: 	je	.Ltmp2787 # Offset: 3056
.Ltmp2786:
    00000bf6: 	movq	%r14, 0x38(%rsp)
    00000bfb: 	cmpq	$0xf, %r14
    00000bff: 	ja	.Ltmp2788 # Offset: 3071
    00000c05: 	cmpq	$0x1, %r14
    00000c09: 	jne	.Ltmp2789 # Offset: 3081
    00000c0f: 	movzbl	(%r15), %eax
    00000c13: 	movb	%al, 0xf0(%rsp)
    00000c1a: 	movq	%rbx, %rax
.Ltmp2875:
    00000c1d: 	movq	%r14, 0xe8(%rsp)
    00000c25: 	movb	$0x0, (%rax,%r14)
    00000c2a: 	movabsq	$0x3fffffffffffffff, %rax
    00000c34: 	subq	0xe8(%rsp), %rax
    00000c3c: 	cmpq	$0x15, %rax
    00000c40: 	jbe	.Ltmp2790 # Offset: 3136
    00000c46: 	movl	$0x16, %edx
    00000c4b: 	leaq	DATAat0x333e4(%rip), %rsi
    00000c52: 	movq	%rbp, %rdi
    00000c55: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3157
    00000c5a: 	movq	%rbp, %r8
    00000c5d: 	movl	$0x1, %edx
    00000c62: 	movl	$0x1f40, %esi
    00000c67: 	movq	%r12, %rdi
    00000c6a: 	leaq	_Z10logic_and2IjEbPKT_ib(%rip), %rcx
    00000c71: 	callq	_Z23testOneFunction_logicalIjPFbPKjibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3185
    00000c76: 	movq	0xe0(%rsp), %rdi
    00000c7e: 	cmpq	%rbx, %rdi
    00000c81: 	je	.Ltmp2791 # Offset: 3201
    00000c83: 	movq	0xf0(%rsp), %rax
    00000c8b: 	leaq	0x1(%rax), %rsi
    00000c8f: 	callq	_ZdlPvm@PLT # Offset: 3215
.Ltmp2791:
    00000c94: 	movq	0x40(%rsp), %r15
    00000c99: 	movq	0x48(%rsp), %r14
    00000c9e: 	movq	%rbx, 0xe0(%rsp)
    00000ca6: 	movq	%r15, %rax
    00000ca9: 	addq	%r14, %rax
    00000cac: 	je	.Ltmp2792 # Offset: 3244
    00000cae: 	testq	%r15, %r15
    00000cb1: 	je	.Ltmp2793 # Offset: 3249
.Ltmp2792:
    00000cb7: 	movq	%r14, 0x38(%rsp)
    00000cbc: 	cmpq	$0xf, %r14
    00000cc0: 	ja	.Ltmp2794 # Offset: 3264
    00000cc6: 	cmpq	$0x1, %r14
    00000cca: 	jne	.Ltmp2795 # Offset: 3274
    00000cd0: 	movzbl	(%r15), %eax
    00000cd4: 	movb	%al, 0xf0(%rsp)
    00000cdb: 	movq	%rbx, %rax
.Ltmp2889:
    00000cde: 	movq	%r14, 0xe8(%rsp)
    00000ce6: 	movb	$0x0, (%rax,%r14)
    00000ceb: 	movabsq	$0x3fffffffffffffff, %rax
    00000cf5: 	subq	0xe8(%rsp), %rax
    00000cfd: 	cmpq	$0x15, %rax
    00000d01: 	jbe	.Ltmp2796 # Offset: 3329
    00000d07: 	movl	$0x16, %edx
    00000d0c: 	leaq	DATAat0x333fb(%rip), %rsi
    00000d13: 	movq	%rbp, %rdi
    00000d16: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3350
    00000d1b: 	movq	%rbp, %r8
    00000d1e: 	movl	$0x1, %edx
    00000d23: 	movl	$0x1f40, %esi
    00000d28: 	movq	%r12, %rdi
    00000d2b: 	leaq	_Z10logic_and3IjEbPKT_ib(%rip), %rcx
    00000d32: 	callq	_Z23testOneFunction_logicalIjPFbPKjibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3378
    00000d37: 	movq	0xe0(%rsp), %rdi
    00000d3f: 	cmpq	%rbx, %rdi
    00000d42: 	je	.Ltmp2797 # Offset: 3394
    00000d44: 	movq	0xf0(%rsp), %rax
    00000d4c: 	leaq	0x1(%rax), %rsi
    00000d50: 	callq	_ZdlPvm@PLT # Offset: 3408
.Ltmp2797:
    00000d55: 	movq	0x40(%rsp), %r15
    00000d5a: 	movq	0x48(%rsp), %r14
    00000d5f: 	movq	%rbx, 0xe0(%rsp)
    00000d67: 	movq	%r15, %rax
    00000d6a: 	addq	%r14, %rax
    00000d6d: 	je	.Ltmp2798 # Offset: 3437
    00000d6f: 	testq	%r15, %r15
    00000d72: 	je	.Ltmp2799 # Offset: 3442
.Ltmp2798:
    00000d78: 	movq	%r14, 0x38(%rsp)
    00000d7d: 	cmpq	$0xf, %r14
    00000d81: 	ja	.Ltmp2800 # Offset: 3457
    00000d87: 	cmpq	$0x1, %r14
    00000d8b: 	jne	.Ltmp2801 # Offset: 3467
    00000d91: 	movzbl	(%r15), %eax
    00000d95: 	movb	%al, 0xf0(%rsp)
    00000d9c: 	movq	%rbx, %rax
.Ltmp2887:
    00000d9f: 	movq	%r14, 0xe8(%rsp)
    00000da7: 	movb	$0x0, (%rax,%r14)
    00000dac: 	movabsq	$0x3fffffffffffffff, %rax
    00000db6: 	subq	0xe8(%rsp), %rax
    00000dbe: 	cmpq	$0x15, %rax
    00000dc2: 	jbe	.Ltmp2802 # Offset: 3522
    00000dc8: 	movl	$0x16, %edx
    00000dcd: 	leaq	DATAat0x33412(%rip), %rsi
    00000dd4: 	movq	%rbp, %rdi
    00000dd7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3543
    00000ddc: 	movq	%rbp, %r8
    00000ddf: 	movl	$0x1, %edx
    00000de4: 	movl	$0x1f40, %esi
    00000de9: 	movq	%r12, %rdi
    00000dec: 	leaq	_Z10logic_and4IjEbPKT_ib(%rip), %rcx
    00000df3: 	callq	_Z23testOneFunction_logicalIjPFbPKjibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3571
    00000df8: 	movq	0xe0(%rsp), %rdi
    00000e00: 	cmpq	%rbx, %rdi
    00000e03: 	je	.Ltmp2803 # Offset: 3587
    00000e05: 	movq	0xf0(%rsp), %rax
    00000e0d: 	leaq	0x1(%rax), %rsi
    00000e11: 	callq	_ZdlPvm@PLT # Offset: 3601
.Ltmp2803:
    00000e16: 	leaq	DATAat0x33429(%rip), %rdx
    00000e1d: 	movq	%r13, %rsi
    00000e20: 	movq	%rbp, %rdi
    00000e23: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3619
    00000e28: 	movq	%rbp, %r8
    00000e2b: 	movl	$0x1, %edx
    00000e30: 	movl	$0x1f40, %esi
    00000e35: 	movq	%r12, %rdi
    00000e38: 	leaq	_Z10logic_and5IjEbPKT_ib(%rip), %rcx
    00000e3f: 	callq	_Z23testOneFunction_logicalIjPFbPKjibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3647
    00000e44: 	movq	0xe0(%rsp), %rdi
    00000e4c: 	cmpq	%rbx, %rdi
    00000e4f: 	je	.Ltmp2804 # Offset: 3663
    00000e51: 	movq	0xf0(%rsp), %rax
    00000e59: 	leaq	0x1(%rax), %rsi
    00000e5d: 	callq	_ZdlPvm@PLT # Offset: 3677
.Ltmp2804:
    00000e62: 	leaq	DATAat0x33440(%rip), %rdx
    00000e69: 	movq	%r13, %rsi
    00000e6c: 	movq	%rbp, %rdi
    00000e6f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3695
    00000e74: 	movq	%rbp, %r8
    00000e77: 	movl	$0x1, %edx
    00000e7c: 	movl	$0x1f40, %esi
    00000e81: 	movq	%r12, %rdi
    00000e84: 	leaq	_Z10logic_and6IjEbPKT_ib(%rip), %rcx
    00000e8b: 	callq	_Z23testOneFunction_logicalIjPFbPKjibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3723
    00000e90: 	movq	0xe0(%rsp), %rdi
    00000e98: 	cmpq	%rbx, %rdi
    00000e9b: 	je	.Ltmp2805 # Offset: 3739
    00000e9d: 	movq	0xf0(%rsp), %rax
    00000ea5: 	leaq	0x1(%rax), %rsi
    00000ea9: 	callq	_ZdlPvm@PLT # Offset: 3753
.Ltmp2805:
    00000eae: 	leaq	DATAat0x33457(%rip), %rdx
    00000eb5: 	movq	%r13, %rsi
    00000eb8: 	movq	%rbp, %rdi
    00000ebb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3771
    00000ec0: 	movq	%rbp, %r8
    00000ec3: 	movl	$0x1, %edx
    00000ec8: 	movl	$0x1f40, %esi
    00000ecd: 	movq	%r12, %rdi
    00000ed0: 	leaq	_Z10logic_and7IjEbPKT_ib(%rip), %rcx
    00000ed7: 	callq	_Z23testOneFunction_logicalIjPFbPKjibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3799
    00000edc: 	movq	0xe0(%rsp), %rdi
    00000ee4: 	cmpq	%rbx, %rdi
    00000ee7: 	je	.Ltmp2806 # Offset: 3815
    00000ee9: 	movq	0xf0(%rsp), %rax
    00000ef1: 	leaq	0x1(%rax), %rsi
    00000ef5: 	callq	_ZdlPvm@PLT # Offset: 3829
.Ltmp2806:
    00000efa: 	movq	0x40(%rsp), %r15
    00000eff: 	movq	0x48(%rsp), %r14
    00000f04: 	movq	%rbx, 0xe0(%rsp)
    00000f0c: 	movq	%r15, %rax
    00000f0f: 	addq	%r14, %rax
    00000f12: 	je	.Ltmp2807 # Offset: 3858
    00000f14: 	testq	%r15, %r15
    00000f17: 	je	.Ltmp2808 # Offset: 3863
.Ltmp2807:
    00000f1d: 	movq	%r14, 0x38(%rsp)
    00000f22: 	cmpq	$0xf, %r14
    00000f26: 	ja	.Ltmp2809 # Offset: 3878
    00000f2c: 	cmpq	$0x1, %r14
    00000f30: 	jne	.Ltmp2810 # Offset: 3888
    00000f36: 	movzbl	(%r15), %eax
    00000f3a: 	movb	%al, 0xf0(%rsp)
    00000f41: 	movq	%rbx, %rax
.Ltmp2885:
    00000f44: 	movq	%r14, 0xe8(%rsp)
    00000f4c: 	movb	$0x0, (%rax,%r14)
    00000f51: 	movabsq	$0x3fffffffffffffff, %rax
    00000f5b: 	subq	0xe8(%rsp), %rax
    00000f63: 	cmpq	$0x15, %rax
    00000f67: 	jbe	.Ltmp2811 # Offset: 3943
    00000f6d: 	movl	$0x16, %edx
    00000f72: 	leaq	DATAat0x3346e(%rip), %rsi
    00000f79: 	movq	%rbp, %rdi
    00000f7c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3964
    00000f81: 	movq	%rbp, %r8
    00000f84: 	movl	$0x1, %edx
    00000f89: 	movl	$0x1f40, %esi
    00000f8e: 	movq	%r12, %rdi
    00000f91: 	leaq	_Z10logic_and8IjEbPKT_ib(%rip), %rcx
    00000f98: 	callq	_Z23testOneFunction_logicalIjPFbPKjibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3992
    00000f9d: 	movq	0xe0(%rsp), %rdi
    00000fa5: 	cmpq	%rbx, %rdi
    00000fa8: 	je	.Ltmp2812 # Offset: 4008
    00000faa: 	movq	0xf0(%rsp), %rax
    00000fb2: 	leaq	0x1(%rax), %rsi
    00000fb6: 	callq	_ZdlPvm@PLT # Offset: 4022
.Ltmp2812:
    00000fbb: 	movq	0x40(%rsp), %r15
    00000fc0: 	leaq	0xd0(%rsp), %rax
    00000fc8: 	movq	0x48(%rsp), %r14
    00000fcd: 	movq	%rax, 0x20(%rsp)
    00000fd2: 	movq	%rax, 0xc0(%rsp)
    00000fda: 	movq	%r15, %rax
    00000fdd: 	addq	%r14, %rax
    00000fe0: 	je	.Ltmp2813 # Offset: 4064
    00000fe2: 	testq	%r15, %r15
    00000fe5: 	je	.Ltmp2814 # Offset: 4069
.Ltmp2813:
    00000feb: 	movq	%r14, 0x38(%rsp)
    00000ff0: 	cmpq	$0xf, %r14
    00000ff4: 	ja	.Ltmp2815 # Offset: 4084
    00000ffa: 	cmpq	$0x1, %r14
    00000ffe: 	jne	.Ltmp2816 # Offset: 4094
    00001004: 	movzbl	(%r15), %eax
    00001008: 	movb	%al, 0xd0(%rsp)
    0000100f: 	movq	0x20(%rsp), %rax
.Ltmp2883:
    00001014: 	movq	%r14, 0xc8(%rsp)
    0000101c: 	movb	$0x0, (%rax,%r14)
    00001021: 	movabsq	$0x3fffffffffffffff, %rax
    0000102b: 	subq	0xc8(%rsp), %rax
    00001033: 	cmpq	$0x14, %rax
    00001037: 	jbe	.Ltmp2817 # Offset: 4151
    0000103d: 	leaq	0xc0(%rsp), %rdi
    00001045: 	movl	$0x15, %edx
    0000104a: 	leaq	DATAat0x33485(%rip), %rsi
    00001051: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4177
    00001056: 	movl	iterations(%rip), %esi
    0000105c: 	movq	0xc0(%rsp), %rdi
    00001064: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 4196
    00001069: 	movq	0x40(%rsp), %r15
    0000106e: 	movq	0x48(%rsp), %r14
    00001073: 	movq	%rbx, 0xe0(%rsp)
    0000107b: 	movq	%r15, %rax
    0000107e: 	addq	%r14, %rax
    00001081: 	je	.Ltmp2818 # Offset: 4225
    00001083: 	testq	%r15, %r15
    00001086: 	je	.Ltmp2819 # Offset: 4230
.Ltmp2818:
    0000108c: 	movq	%r14, 0x38(%rsp)
    00001091: 	cmpq	$0xf, %r14
    00001095: 	ja	.Ltmp2820 # Offset: 4245
    0000109b: 	cmpq	$0x1, %r14
    0000109f: 	jne	.Ltmp2821 # Offset: 4255
    000010a5: 	movzbl	(%r15), %eax
    000010a9: 	movb	%al, 0xf0(%rsp)
    000010b0: 	movq	%rbx, %rax
.Ltmp2891:
    000010b3: 	movq	%r14, 0xe8(%rsp)
    000010bb: 	movb	$0x0, (%rax,%r14)
    000010c0: 	movabsq	$0x3fffffffffffffff, %rax
    000010ca: 	subq	0xe8(%rsp), %rax
    000010d2: 	cmpq	$0x14, %rax
    000010d6: 	jbe	.Ltmp2822 # Offset: 4310
    000010dc: 	movl	$0x15, %edx
    000010e1: 	leaq	DATAat0x3349b(%rip), %rsi
    000010e8: 	movq	%rbp, %rdi
    000010eb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4331
    000010f0: 	movq	%rbp, %r8
    000010f3: 	leaq	_Z9logic_or1IjEbPKT_ib(%rip), %rcx
    000010fa: 	xorl	%edx, %edx
    000010fc: 	movq	%r12, %rdi
    000010ff: 	movl	$0x1f40, %esi
    00001104: 	callq	_Z23testOneFunction_logicalIjPFbPKjibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4356
    00001109: 	movq	0xe0(%rsp), %rdi
    00001111: 	cmpq	%rbx, %rdi
    00001114: 	je	.Ltmp2823 # Offset: 4372
    00001116: 	movq	0xf0(%rsp), %rax
    0000111e: 	leaq	0x1(%rax), %rsi
    00001122: 	callq	_ZdlPvm@PLT # Offset: 4386
.Ltmp2823:
    00001127: 	leaq	DATAat0x334b1(%rip), %rdx
    0000112e: 	movq	%r13, %rsi
    00001131: 	movq	%rbp, %rdi
    00001134: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4404
    00001139: 	movq	%rbp, %r8
    0000113c: 	leaq	_Z12logic_or_optIjEbPKT_ib(%rip), %rcx
    00001143: 	xorl	%edx, %edx
    00001145: 	movq	%r12, %rdi
    00001148: 	movl	$0x1f40, %esi
    0000114d: 	callq	_Z23testOneFunction_logicalIjPFbPKjibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4429
    00001152: 	movq	0xe0(%rsp), %rdi
    0000115a: 	cmpq	%rbx, %rdi
    0000115d: 	je	.Ltmp2824 # Offset: 4445
    0000115f: 	movq	0xf0(%rsp), %rax
    00001167: 	leaq	0x1(%rax), %rsi
    0000116b: 	callq	_ZdlPvm@PLT # Offset: 4459
.Ltmp2824:
    00001170: 	leaq	DATAat0x334ce(%rip), %rdx
    00001177: 	movq	%r13, %rsi
    0000117a: 	movq	%rbp, %rdi
    0000117d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4477
    00001182: 	movq	%rbp, %r8
    00001185: 	leaq	_Z9logic_or2IjEbPKT_ib(%rip), %rcx
    0000118c: 	xorl	%edx, %edx
    0000118e: 	movq	%r12, %rdi
    00001191: 	movl	$0x1f40, %esi
    00001196: 	callq	_Z23testOneFunction_logicalIjPFbPKjibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4502
    0000119b: 	movq	0xe0(%rsp), %rdi
    000011a3: 	cmpq	%rbx, %rdi
    000011a6: 	je	.Ltmp2825 # Offset: 4518
    000011a8: 	movq	0xf0(%rsp), %rax
    000011b0: 	leaq	0x1(%rax), %rsi
    000011b4: 	callq	_ZdlPvm@PLT # Offset: 4532
.Ltmp2825:
    000011b9: 	movq	0x40(%rsp), %r15
    000011be: 	movq	0x48(%rsp), %r14
    000011c3: 	movq	%rbx, 0xe0(%rsp)
    000011cb: 	movq	%r15, %rax
    000011ce: 	addq	%r14, %rax
    000011d1: 	je	.Ltmp2826 # Offset: 4561
    000011d3: 	testq	%r15, %r15
    000011d6: 	je	.Ltmp2827 # Offset: 4566
.Ltmp2826:
    000011dc: 	movq	%r14, 0x38(%rsp)
    000011e1: 	cmpq	$0xf, %r14
    000011e5: 	ja	.Ltmp2828 # Offset: 4581
    000011eb: 	cmpq	$0x1, %r14
    000011ef: 	jne	.Ltmp2829 # Offset: 4591
    000011f5: 	movzbl	(%r15), %eax
    000011f9: 	movb	%al, 0xf0(%rsp)
    00001200: 	movq	%rbx, %rax
.Ltmp2893:
    00001203: 	movq	%r14, 0xe8(%rsp)
    0000120b: 	movb	$0x0, (%rax,%r14)
    00001210: 	movabsq	$0x3fffffffffffffff, %rax
    0000121a: 	subq	0xe8(%rsp), %rax
    00001222: 	cmpq	$0x14, %rax
    00001226: 	jbe	.Ltmp2830 # Offset: 4646
    0000122c: 	movl	$0x15, %edx
    00001231: 	leaq	DATAat0x334e4(%rip), %rsi
    00001238: 	movq	%rbp, %rdi
    0000123b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4667
    00001240: 	movq	%rbp, %r8
    00001243: 	leaq	_Z9logic_or3IjEbPKT_ib(%rip), %rcx
    0000124a: 	xorl	%edx, %edx
    0000124c: 	movq	%r12, %rdi
    0000124f: 	movl	$0x1f40, %esi
    00001254: 	callq	_Z23testOneFunction_logicalIjPFbPKjibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4692
    00001259: 	movq	0xe0(%rsp), %rdi
    00001261: 	cmpq	%rbx, %rdi
    00001264: 	je	.Ltmp2831 # Offset: 4708
    00001266: 	movq	0xf0(%rsp), %rax
    0000126e: 	leaq	0x1(%rax), %rsi
    00001272: 	callq	_ZdlPvm@PLT # Offset: 4722
.Ltmp2831:
    00001277: 	leaq	DATAat0x334fa(%rip), %rdx
    0000127e: 	movq	%r13, %rsi
    00001281: 	movq	%rbp, %rdi
    00001284: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4740
    00001289: 	movq	%rbp, %r8
    0000128c: 	leaq	_Z9logic_or4IjEbPKT_ib(%rip), %rcx
    00001293: 	xorl	%edx, %edx
    00001295: 	movq	%r12, %rdi
    00001298: 	movl	$0x1f40, %esi
    0000129d: 	callq	_Z23testOneFunction_logicalIjPFbPKjibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4765
    000012a2: 	movq	0xe0(%rsp), %rdi
    000012aa: 	cmpq	%rbx, %rdi
    000012ad: 	je	.Ltmp2832 # Offset: 4781
    000012af: 	movq	0xf0(%rsp), %rax
    000012b7: 	leaq	0x1(%rax), %rsi
    000012bb: 	callq	_ZdlPvm@PLT # Offset: 4795
.Ltmp2832:
    000012c0: 	movq	0x40(%rsp), %r15
    000012c5: 	movq	0x48(%rsp), %r14
    000012ca: 	movq	%rbx, 0xe0(%rsp)
    000012d2: 	movq	%r15, %rax
    000012d5: 	addq	%r14, %rax
    000012d8: 	je	.Ltmp2833 # Offset: 4824
    000012da: 	testq	%r15, %r15
    000012dd: 	je	.Ltmp2834 # Offset: 4829
.Ltmp2833:
    000012e3: 	movq	%r14, 0x38(%rsp)
    000012e8: 	cmpq	$0xf, %r14
    000012ec: 	ja	.Ltmp2835 # Offset: 4844
    000012f2: 	cmpq	$0x1, %r14
    000012f6: 	jne	.Ltmp2836 # Offset: 4854
    000012fc: 	movzbl	(%r15), %eax
    00001300: 	movb	%al, 0xf0(%rsp)
    00001307: 	movq	%rbx, %rax
.Ltmp2897:
    0000130a: 	movq	%r14, 0xe8(%rsp)
    00001312: 	movb	$0x0, (%rax,%r14)
    00001317: 	movabsq	$0x3fffffffffffffff, %rax
    00001321: 	subq	0xe8(%rsp), %rax
    00001329: 	cmpq	$0x14, %rax
    0000132d: 	jbe	.Ltmp2837 # Offset: 4909
    00001333: 	movl	$0x15, %edx
    00001338: 	leaq	DATAat0x33510(%rip), %rsi
    0000133f: 	movq	%rbp, %rdi
    00001342: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4930
    00001347: 	movq	%rbp, %r8
    0000134a: 	leaq	_Z9logic_or5IjEbPKT_ib(%rip), %rcx
    00001351: 	xorl	%edx, %edx
    00001353: 	movq	%r12, %rdi
    00001356: 	movl	$0x1f40, %esi
    0000135b: 	callq	_Z23testOneFunction_logicalIjPFbPKjibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4955
    00001360: 	movq	0xe0(%rsp), %rdi
    00001368: 	cmpq	%rbx, %rdi
    0000136b: 	je	.Ltmp2838 # Offset: 4971
    0000136d: 	movq	0xf0(%rsp), %rax
    00001375: 	leaq	0x1(%rax), %rsi
    00001379: 	callq	_ZdlPvm@PLT # Offset: 4985
.Ltmp2838:
    0000137e: 	leaq	DATAat0x33526(%rip), %rdx
    00001385: 	movq	%r13, %rsi
    00001388: 	movq	%rbp, %rdi
    0000138b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5003
    00001390: 	movq	%rbp, %r8
    00001393: 	leaq	_Z9logic_or6IjEbPKT_ib(%rip), %rcx
    0000139a: 	xorl	%edx, %edx
    0000139c: 	movq	%r12, %rdi
    0000139f: 	movl	$0x1f40, %esi
    000013a4: 	callq	_Z23testOneFunction_logicalIjPFbPKjibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5028
    000013a9: 	movq	0xe0(%rsp), %rdi
    000013b1: 	cmpq	%rbx, %rdi
    000013b4: 	je	.Ltmp2839 # Offset: 5044
    000013b6: 	movq	0xf0(%rsp), %rax
    000013be: 	leaq	0x1(%rax), %rsi
    000013c2: 	callq	_ZdlPvm@PLT # Offset: 5058
.Ltmp2839:
    000013c7: 	movq	0x40(%rsp), %r14
    000013cc: 	movq	0x48(%rsp), %r13
    000013d1: 	movq	%rbx, 0xe0(%rsp)
    000013d9: 	movq	%r14, %rax
    000013dc: 	addq	%r13, %rax
    000013df: 	je	.Ltmp2840 # Offset: 5087
    000013e1: 	testq	%r14, %r14
    000013e4: 	je	.Ltmp2841 # Offset: 5092
.Ltmp2840:
    000013ea: 	movq	%r13, 0x38(%rsp)
    000013ef: 	cmpq	$0xf, %r13
    000013f3: 	ja	.Ltmp2842 # Offset: 5107
    000013f9: 	cmpq	$0x1, %r13
    000013fd: 	jne	.Ltmp2843 # Offset: 5117
    00001403: 	movzbl	(%r14), %eax
    00001407: 	movb	%al, 0xf0(%rsp)
    0000140e: 	movq	%rbx, %rax
.Ltmp2895:
    00001411: 	movq	%r13, 0xe8(%rsp)
    00001419: 	movb	$0x0, (%rax,%r13)
    0000141e: 	movabsq	$0x3fffffffffffffff, %rax
    00001428: 	subq	0xe8(%rsp), %rax
    00001430: 	cmpq	$0x14, %rax
    00001434: 	jbe	.Ltmp2844 # Offset: 5172
    0000143a: 	movl	$0x15, %edx
    0000143f: 	leaq	DATAat0x3353c(%rip), %rsi
    00001446: 	movq	%rbp, %rdi
    00001449: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5193
    0000144e: 	movq	%rbp, %r8
    00001451: 	leaq	_Z9logic_or7IjEbPKT_ib(%rip), %rcx
    00001458: 	xorl	%edx, %edx
    0000145a: 	movq	%r12, %rdi
    0000145d: 	movl	$0x1f40, %esi
    00001462: 	callq	_Z23testOneFunction_logicalIjPFbPKjibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5218
    00001467: 	movq	0xe0(%rsp), %rdi
    0000146f: 	cmpq	%rbx, %rdi
    00001472: 	je	.Ltmp2845 # Offset: 5234
    00001474: 	movq	0xf0(%rsp), %rax
    0000147c: 	leaq	0x1(%rax), %rsi
    00001480: 	callq	_ZdlPvm@PLT # Offset: 5248
.Ltmp2845:
    00001485: 	movq	0x40(%rsp), %r14
    0000148a: 	movq	0x48(%rsp), %r13
    0000148f: 	movq	%rbx, 0xe0(%rsp)
    00001497: 	movq	%r14, %rax
    0000149a: 	addq	%r13, %rax
    0000149d: 	je	.Ltmp2846 # Offset: 5277
    0000149f: 	testq	%r14, %r14
    000014a2: 	je	.Ltmp2847 # Offset: 5282
.Ltmp2846:
    000014a8: 	movq	%r13, 0x38(%rsp)
    000014ad: 	cmpq	$0xf, %r13
    000014b1: 	ja	.Ltmp2848 # Offset: 5297
    000014b7: 	cmpq	$0x1, %r13
    000014bb: 	jne	.Ltmp2849 # Offset: 5307
    000014c1: 	movzbl	(%r14), %eax
    000014c5: 	movb	%al, 0xf0(%rsp)
    000014cc: 	movq	%rbx, %rax
.Ltmp2901:
    000014cf: 	movq	%r13, 0xe8(%rsp)
    000014d7: 	movb	$0x0, (%rax,%r13)
    000014dc: 	movabsq	$0x3fffffffffffffff, %rax
    000014e6: 	subq	0xe8(%rsp), %rax
    000014ee: 	cmpq	$0x14, %rax
    000014f2: 	jbe	.Ltmp2850 # Offset: 5362
    000014f8: 	movl	$0x15, %edx
    000014fd: 	leaq	DATAat0x33552(%rip), %rsi
    00001504: 	movq	%rbp, %rdi
    00001507: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5383
    0000150c: 	movq	%rbp, %r8
    0000150f: 	leaq	_Z9logic_or8IjEbPKT_ib(%rip), %rcx
    00001516: 	xorl	%edx, %edx
    00001518: 	movq	%r12, %rdi
    0000151b: 	movl	$0x1f40, %esi
    00001520: 	callq	_Z23testOneFunction_logicalIjPFbPKjibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5408
    00001525: 	movq	0xe0(%rsp), %rdi
    0000152d: 	cmpq	%rbx, %rdi
    00001530: 	je	.Ltmp2851 # Offset: 5424
    00001532: 	movq	0xf0(%rsp), %rax
    0000153a: 	leaq	0x1(%rax), %rsi
    0000153e: 	callq	_ZdlPvm@PLT # Offset: 5438
.Ltmp2851:
    00001543: 	movq	0x40(%rsp), %r14
    00001548: 	movq	0x48(%rsp), %r13
    0000154d: 	movq	%rbx, 0xe0(%rsp)
    00001555: 	movq	%r14, %rax
    00001558: 	addq	%r13, %rax
    0000155b: 	je	.Ltmp2852 # Offset: 5467
    0000155d: 	testq	%r14, %r14
    00001560: 	je	.Ltmp2853 # Offset: 5472
.Ltmp2852:
    00001566: 	movq	%r13, 0x38(%rsp)
    0000156b: 	cmpq	$0xf, %r13
    0000156f: 	ja	.Ltmp2854 # Offset: 5487
    00001575: 	cmpq	$0x1, %r13
    00001579: 	jne	.Ltmp2855 # Offset: 5497
    0000157f: 	movzbl	(%r14), %eax
    00001583: 	movb	%al, 0xf0(%rsp)
    0000158a: 	movq	%rbx, %rax
.Ltmp2899:
    0000158d: 	movq	%r13, 0xe8(%rsp)
    00001595: 	movb	$0x0, (%rax,%r13)
    0000159a: 	movabsq	$0x3fffffffffffffff, %rax
    000015a4: 	subq	0xe8(%rsp), %rax
    000015ac: 	cmpq	$0x13, %rax
    000015b0: 	jbe	.Ltmp2856 # Offset: 5552
    000015b6: 	movl	$0x14, %edx
    000015bb: 	leaq	DATAat0x33568(%rip), %rsi
    000015c2: 	movq	%rbp, %rdi
    000015c5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5573
    000015ca: 	movl	iterations(%rip), %esi
    000015d0: 	movq	0xe0(%rsp), %rdi
    000015d8: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 5592
    000015dd: 	movq	0xe0(%rsp), %rdi
    000015e5: 	cmpq	%rbx, %rdi
    000015e8: 	je	.Ltmp2857 # Offset: 5608
    000015ea: 	movq	0xf0(%rsp), %rax
    000015f2: 	leaq	0x1(%rax), %rsi
    000015f6: 	callq	_ZdlPvm@PLT # Offset: 5622
.Ltmp2857:
    000015fb: 	movq	0xc0(%rsp), %rdi
    00001603: 	cmpq	0x20(%rsp), %rdi
    00001608: 	je	.Ltmp2858 # Offset: 5640
    0000160a: 	movq	0xd0(%rsp), %rax
    00001612: 	leaq	0x1(%rax), %rsi
    00001616: 	callq	_ZdlPvm@PLT # Offset: 5654
.Ltmp2858:
    0000161b: 	movq	0xa0(%rsp), %rdi
    00001623: 	cmpq	0x18(%rsp), %rdi
    00001628: 	je	.Ltmp2859 # Offset: 5672
    0000162a: 	movq	0xb0(%rsp), %rax
    00001632: 	leaq	0x1(%rax), %rsi
    00001636: 	callq	_ZdlPvm@PLT # Offset: 5686
.Ltmp2859:
    0000163b: 	movq	0x80(%rsp), %rdi
    00001643: 	cmpq	0x10(%rsp), %rdi
    00001648: 	je	.Ltmp2860 # Offset: 5704
    0000164a: 	movq	0x90(%rsp), %rax
    00001652: 	leaq	0x1(%rax), %rsi
    00001656: 	callq	_ZdlPvm@PLT # Offset: 5718
.Ltmp2860:
    0000165b: 	movq	0x60(%rsp), %rdi
    00001660: 	cmpq	0x8(%rsp), %rdi
    00001665: 	je	.Ltmp2861 # Offset: 5733
    00001667: 	movq	0x70(%rsp), %rax
    0000166c: 	leaq	0x1(%rax), %rsi
    00001670: 	callq	_ZdlPvm@PLT # Offset: 5744
.Ltmp2861:
    00001675: 	movq	%r12, %rdi
    00001678: 	movl	$0x4, %esi
    0000167d: 	callq	_ZdlPvm@PLT # Offset: 5757
    00001682: 	movq	0x40(%rsp), %rdi
    00001687: 	cmpq	0x28(%rsp), %rdi
    0000168c: 	je	.Ltmp2862 # Offset: 5772
    0000168e: 	movq	0x50(%rsp), %rax
    00001693: 	leaq	0x1(%rax), %rsi
    00001697: 	callq	_ZdlPvm@PLT # Offset: 5783
.Ltmp2862:
    0000169c: 	movq	0x108(%rsp), %rax
    000016a4: 	subq	%fs:0x28, %rax
    000016ad: 	jne	.Ltmp2863 # Offset: 5805
    000016b3: 	addq	$0x118, %rsp
    000016ba: 	popq	%rbx
    000016bb: 	popq	%rbp
    000016bc: 	popq	%r12
    000016be: 	popq	%r13
    000016c0: 	popq	%r14
    000016c2: 	popq	%r15
    000016c4: 	retq # Offset: 5828
    000016c5: 	nopl	(%rax) # Size: 3
.Ltmp2727:
    000016c8: 	testq	%r14, %r14
    000016cb: 	jne	.Ltmp2864 # Offset: 5835
    000016d1: 	movq	%rbx, %rax
    000016d4: 	jmp	.Ltmp2865 # Offset: 5844
    000016d9: 	nopl	(%rax) # Size: 7
.Ltmp2748:
    000016e0: 	testq	%r14, %r14
    000016e3: 	jne	.Ltmp2866 # Offset: 5859
    000016e9: 	movq	%rbx, %rax
    000016ec: 	jmp	.Ltmp2867 # Offset: 5868
    000016f1: 	nopl	(%rax) # Size: 7
.Ltmp2742:
    000016f8: 	testq	%r14, %r14
    000016fb: 	jne	.Ltmp2868 # Offset: 5883
    00001701: 	movq	%rbx, %rax
    00001704: 	jmp	.Ltmp2869 # Offset: 5892
    00001709: 	nopl	(%rax) # Size: 7
.Ltmp2737:
    00001710: 	testq	%r14, %r14
    00001713: 	jne	.Ltmp2870 # Offset: 5907
    00001719: 	movq	0x8(%rsp), %rax
    0000171e: 	jmp	.Ltmp2871 # Offset: 5918
    00001723: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2756:
    00001728: 	testq	%r14, %r14
    0000172b: 	jne	.Ltmp2872 # Offset: 5931
    00001731: 	movq	%rbx, %rax
    00001734: 	jmp	.Ltmp2873 # Offset: 5940
    00001739: 	nopl	(%rax) # Size: 7
.Ltmp2789:
    00001740: 	testq	%r14, %r14
    00001743: 	jne	.Ltmp2874 # Offset: 5955
    00001749: 	movq	%rbx, %rax
    0000174c: 	jmp	.Ltmp2875 # Offset: 5964
    00001751: 	nopl	(%rax) # Size: 7
.Ltmp2783:
    00001758: 	testq	%r14, %r14
    0000175b: 	jne	.Ltmp2876 # Offset: 5979
    00001761: 	movq	0x18(%rsp), %rax
    00001766: 	jmp	.Ltmp2877 # Offset: 5990
    0000176b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2770:
    00001770: 	testq	%r14, %r14
    00001773: 	jne	.Ltmp2878 # Offset: 6003
    00001779: 	movq	%rbx, %rax
    0000177c: 	jmp	.Ltmp2879 # Offset: 6012
    00001781: 	nopl	(%rax) # Size: 7
.Ltmp2765:
    00001788: 	testq	%r14, %r14
    0000178b: 	jne	.Ltmp2880 # Offset: 6027
    00001791: 	movq	0x10(%rsp), %rax
    00001796: 	jmp	.Ltmp2881 # Offset: 6038
    0000179b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2816:
    000017a0: 	testq	%r14, %r14
    000017a3: 	jne	.Ltmp2882 # Offset: 6051
    000017a9: 	movq	0x20(%rsp), %rax
    000017ae: 	jmp	.Ltmp2883 # Offset: 6062
    000017b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2810:
    000017b8: 	testq	%r14, %r14
    000017bb: 	jne	.Ltmp2884 # Offset: 6075
    000017c1: 	movq	%rbx, %rax
    000017c4: 	jmp	.Ltmp2885 # Offset: 6084
    000017c9: 	nopl	(%rax) # Size: 7
.Ltmp2801:
    000017d0: 	testq	%r14, %r14
    000017d3: 	jne	.Ltmp2886 # Offset: 6099
    000017d9: 	movq	%rbx, %rax
    000017dc: 	jmp	.Ltmp2887 # Offset: 6108
    000017e1: 	nopl	(%rax) # Size: 7
.Ltmp2795:
    000017e8: 	testq	%r14, %r14
    000017eb: 	jne	.Ltmp2888 # Offset: 6123
    000017f1: 	movq	%rbx, %rax
    000017f4: 	jmp	.Ltmp2889 # Offset: 6132
    000017f9: 	nopl	(%rax) # Size: 7
.Ltmp2821:
    00001800: 	testq	%r14, %r14
    00001803: 	jne	.Ltmp2890 # Offset: 6147
    00001809: 	movq	%rbx, %rax
    0000180c: 	jmp	.Ltmp2891 # Offset: 6156
    00001811: 	nopl	(%rax) # Size: 7
.Ltmp2829:
    00001818: 	testq	%r14, %r14
    0000181b: 	jne	.Ltmp2892 # Offset: 6171
    00001821: 	movq	%rbx, %rax
    00001824: 	jmp	.Ltmp2893 # Offset: 6180
    00001829: 	nopl	(%rax) # Size: 7
.Ltmp2843:
    00001830: 	testq	%r13, %r13
    00001833: 	jne	.Ltmp2894 # Offset: 6195
    00001839: 	movq	%rbx, %rax
    0000183c: 	jmp	.Ltmp2895 # Offset: 6204
    00001841: 	nopl	(%rax) # Size: 7
.Ltmp2836:
    00001848: 	testq	%r14, %r14
    0000184b: 	jne	.Ltmp2896 # Offset: 6219
    00001851: 	movq	%rbx, %rax
    00001854: 	jmp	.Ltmp2897 # Offset: 6228
    00001859: 	nopl	(%rax) # Size: 7
.Ltmp2855:
    00001860: 	testq	%r13, %r13
    00001863: 	jne	.Ltmp2898 # Offset: 6243
    00001869: 	movq	%rbx, %rax
    0000186c: 	jmp	.Ltmp2899 # Offset: 6252
    00001871: 	nopl	(%rax) # Size: 7
.Ltmp2849:
    00001878: 	testq	%r13, %r13
    0000187b: 	jne	.Ltmp2900 # Offset: 6267
    00001881: 	movq	%rbx, %rax
    00001884: 	jmp	.Ltmp2901 # Offset: 6276
    00001889: 	nopl	(%rax) # Size: 7
.Ltmp2741:
    00001890: 	leaq	0x38(%rsp), %rsi
    00001895: 	xorl	%edx, %edx
    00001897: 	movq	%rbp, %rdi
    0000189a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6298
    0000189f: 	movq	%rax, 0xe0(%rsp)
    000018a7: 	movq	%rax, %rdi
    000018aa: 	movq	0x38(%rsp), %rax
    000018af: 	movq	%rax, 0xf0(%rsp)
.Ltmp2904:
    000018b7: 	movq	%r14, %rdx
    000018ba: 	movq	%r15, %rsi
    000018bd: 	callq	memcpy@PLT # Offset: 6333
    000018c2: 	movq	0x38(%rsp), %r14
    000018c7: 	movq	0xe0(%rsp), %rax
    000018cf: 	jmp	.Ltmp2869 # Offset: 6351
    000018d4: 	nopl	(%rax) # Size: 4
.Ltmp2736:
    000018d8: 	leaq	0x38(%rsp), %rsi
    000018dd: 	leaq	0x60(%rsp), %rdi
    000018e2: 	xorl	%edx, %edx
    000018e4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6372
    000018e9: 	movq	%rax, 0x60(%rsp)
    000018ee: 	movq	%rax, %rdi
    000018f1: 	movq	0x38(%rsp), %rax
    000018f6: 	movq	%rax, 0x70(%rsp)
.Ltmp2905:
    000018fb: 	movq	%r14, %rdx
    000018fe: 	movq	%r15, %rsi
    00001901: 	callq	memcpy@PLT # Offset: 6401
    00001906: 	movq	0x38(%rsp), %r14
    0000190b: 	movq	0x60(%rsp), %rax
    00001910: 	jmp	.Ltmp2871 # Offset: 6416
    00001915: 	nopl	(%rax) # Size: 3
.Ltmp2726:
    00001918: 	leaq	0x38(%rsp), %rsi
    0000191d: 	xorl	%edx, %edx
    0000191f: 	movq	%rbp, %rdi
    00001922: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6434
    00001927: 	movq	%rax, 0xe0(%rsp)
    0000192f: 	movq	%rax, %rdi
    00001932: 	movq	0x38(%rsp), %rax
    00001937: 	movq	%rax, 0xf0(%rsp)
.Ltmp2902:
    0000193f: 	movq	%r14, %rdx
    00001942: 	movq	%r15, %rsi
    00001945: 	callq	memcpy@PLT # Offset: 6469
    0000194a: 	movq	0x38(%rsp), %r14
    0000194f: 	movq	0xe0(%rsp), %rax
    00001957: 	jmp	.Ltmp2865 # Offset: 6487
    0000195c: 	nopl	(%rax) # Size: 4
.Ltmp2747:
    00001960: 	leaq	0x38(%rsp), %rsi
    00001965: 	xorl	%edx, %edx
    00001967: 	movq	%rbp, %rdi
    0000196a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6506
    0000196f: 	movq	%rax, 0xe0(%rsp)
    00001977: 	movq	%rax, %rdi
    0000197a: 	movq	0x38(%rsp), %rax
    0000197f: 	movq	%rax, 0xf0(%rsp)
.Ltmp2903:
    00001987: 	movq	%r14, %rdx
    0000198a: 	movq	%r15, %rsi
    0000198d: 	callq	memcpy@PLT # Offset: 6541
    00001992: 	movq	0x38(%rsp), %r14
    00001997: 	movq	0xe0(%rsp), %rax
    0000199f: 	jmp	.Ltmp2867 # Offset: 6559
    000019a4: 	nopl	(%rax) # Size: 4
.Ltmp2755:
    000019a8: 	leaq	0x38(%rsp), %rsi
    000019ad: 	xorl	%edx, %edx
    000019af: 	movq	%rbp, %rdi
    000019b2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6578
    000019b7: 	movq	%rax, 0xe0(%rsp)
    000019bf: 	movq	%rax, %rdi
    000019c2: 	movq	0x38(%rsp), %rax
    000019c7: 	movq	%rax, 0xf0(%rsp)
.Ltmp2906:
    000019cf: 	movq	%r14, %rdx
    000019d2: 	movq	%r15, %rsi
    000019d5: 	callq	memcpy@PLT # Offset: 6613
    000019da: 	movq	0x38(%rsp), %r14
    000019df: 	movq	0xe0(%rsp), %rax
    000019e7: 	jmp	.Ltmp2873 # Offset: 6631
    000019ec: 	nopl	(%rax) # Size: 4
.Ltmp2782:
    000019f0: 	leaq	0x38(%rsp), %rsi
    000019f5: 	leaq	0xa0(%rsp), %rdi
    000019fd: 	xorl	%edx, %edx
    000019ff: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6655
    00001a04: 	movq	%rax, 0xa0(%rsp)
    00001a0c: 	movq	%rax, %rdi
    00001a0f: 	movq	0x38(%rsp), %rax
    00001a14: 	movq	%rax, 0xb0(%rsp)
.Ltmp2908:
    00001a1c: 	movq	%r14, %rdx
    00001a1f: 	movq	%r15, %rsi
    00001a22: 	callq	memcpy@PLT # Offset: 6690
    00001a27: 	movq	0x38(%rsp), %r14
    00001a2c: 	movq	0xa0(%rsp), %rax
    00001a34: 	jmp	.Ltmp2877 # Offset: 6708
    00001a39: 	nopl	(%rax) # Size: 7
.Ltmp2769:
    00001a40: 	leaq	0x38(%rsp), %rsi
    00001a45: 	xorl	%edx, %edx
    00001a47: 	movq	%rbp, %rdi
    00001a4a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6730
    00001a4f: 	movq	%rax, 0xe0(%rsp)
    00001a57: 	movq	%rax, %rdi
    00001a5a: 	movq	0x38(%rsp), %rax
    00001a5f: 	movq	%rax, 0xf0(%rsp)
.Ltmp2909:
    00001a67: 	movq	%r14, %rdx
    00001a6a: 	movq	%r15, %rsi
    00001a6d: 	callq	memcpy@PLT # Offset: 6765
    00001a72: 	movq	0x38(%rsp), %r14
    00001a77: 	movq	0xe0(%rsp), %rax
    00001a7f: 	jmp	.Ltmp2879 # Offset: 6783
    00001a84: 	nopl	(%rax) # Size: 4
.Ltmp2764:
    00001a88: 	leaq	0x38(%rsp), %rsi
    00001a8d: 	leaq	0x80(%rsp), %rdi
    00001a95: 	xorl	%edx, %edx
    00001a97: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6807
    00001a9c: 	movq	%rax, 0x80(%rsp)
    00001aa4: 	movq	%rax, %rdi
    00001aa7: 	movq	0x38(%rsp), %rax
    00001aac: 	movq	%rax, 0x90(%rsp)
.Ltmp2910:
    00001ab4: 	movq	%r14, %rdx
    00001ab7: 	movq	%r15, %rsi
    00001aba: 	callq	memcpy@PLT # Offset: 6842
    00001abf: 	movq	0x38(%rsp), %r14
    00001ac4: 	movq	0x80(%rsp), %rax
    00001acc: 	jmp	.Ltmp2881 # Offset: 6860
    00001ad1: 	nopl	(%rax) # Size: 7
.Ltmp2815:
    00001ad8: 	leaq	0x38(%rsp), %rsi
    00001add: 	leaq	0xc0(%rsp), %rdi
    00001ae5: 	xorl	%edx, %edx
    00001ae7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6887
    00001aec: 	movq	%rax, 0xc0(%rsp)
    00001af4: 	movq	%rax, %rdi
    00001af7: 	movq	0x38(%rsp), %rax
    00001afc: 	movq	%rax, 0xd0(%rsp)
.Ltmp2911:
    00001b04: 	movq	%r14, %rdx
    00001b07: 	movq	%r15, %rsi
    00001b0a: 	callq	memcpy@PLT # Offset: 6922
    00001b0f: 	movq	0x38(%rsp), %r14
    00001b14: 	movq	0xc0(%rsp), %rax
    00001b1c: 	jmp	.Ltmp2883 # Offset: 6940
    00001b21: 	nopl	(%rax) # Size: 7
.Ltmp2788:
    00001b28: 	leaq	0x38(%rsp), %rsi
    00001b2d: 	xorl	%edx, %edx
    00001b2f: 	movq	%rbp, %rdi
    00001b32: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6962
    00001b37: 	movq	%rax, 0xe0(%rsp)
    00001b3f: 	movq	%rax, %rdi
    00001b42: 	movq	0x38(%rsp), %rax
    00001b47: 	movq	%rax, 0xf0(%rsp)
.Ltmp2907:
    00001b4f: 	movq	%r14, %rdx
    00001b52: 	movq	%r15, %rsi
    00001b55: 	callq	memcpy@PLT # Offset: 6997
    00001b5a: 	movq	0x38(%rsp), %r14
    00001b5f: 	movq	0xe0(%rsp), %rax
    00001b67: 	jmp	.Ltmp2875 # Offset: 7015
    00001b6c: 	nopl	(%rax) # Size: 4
.Ltmp2809:
    00001b70: 	leaq	0x38(%rsp), %rsi
    00001b75: 	xorl	%edx, %edx
    00001b77: 	movq	%rbp, %rdi
    00001b7a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7034
    00001b7f: 	movq	%rax, 0xe0(%rsp)
    00001b87: 	movq	%rax, %rdi
    00001b8a: 	movq	0x38(%rsp), %rax
    00001b8f: 	movq	%rax, 0xf0(%rsp)
.Ltmp2912:
    00001b97: 	movq	%r14, %rdx
    00001b9a: 	movq	%r15, %rsi
    00001b9d: 	callq	memcpy@PLT # Offset: 7069
    00001ba2: 	movq	0x38(%rsp), %r14
    00001ba7: 	movq	0xe0(%rsp), %rax
    00001baf: 	jmp	.Ltmp2885 # Offset: 7087
    00001bb4: 	nopl	(%rax) # Size: 4
.Ltmp2800:
    00001bb8: 	leaq	0x38(%rsp), %rsi
    00001bbd: 	xorl	%edx, %edx
    00001bbf: 	movq	%rbp, %rdi
    00001bc2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7106
    00001bc7: 	movq	%rax, 0xe0(%rsp)
    00001bcf: 	movq	%rax, %rdi
    00001bd2: 	movq	0x38(%rsp), %rax
    00001bd7: 	movq	%rax, 0xf0(%rsp)
.Ltmp2913:
    00001bdf: 	movq	%r14, %rdx
    00001be2: 	movq	%r15, %rsi
    00001be5: 	callq	memcpy@PLT # Offset: 7141
    00001bea: 	movq	0x38(%rsp), %r14
    00001bef: 	movq	0xe0(%rsp), %rax
    00001bf7: 	jmp	.Ltmp2887 # Offset: 7159
    00001bfc: 	nopl	(%rax) # Size: 4
.Ltmp2794:
    00001c00: 	leaq	0x38(%rsp), %rsi
    00001c05: 	xorl	%edx, %edx
    00001c07: 	movq	%rbp, %rdi
    00001c0a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7178
    00001c0f: 	movq	%rax, 0xe0(%rsp)
    00001c17: 	movq	%rax, %rdi
    00001c1a: 	movq	0x38(%rsp), %rax
    00001c1f: 	movq	%rax, 0xf0(%rsp)
.Ltmp2914:
    00001c27: 	movq	%r14, %rdx
    00001c2a: 	movq	%r15, %rsi
    00001c2d: 	callq	memcpy@PLT # Offset: 7213
    00001c32: 	movq	0x38(%rsp), %r14
    00001c37: 	movq	0xe0(%rsp), %rax
    00001c3f: 	jmp	.Ltmp2889 # Offset: 7231
    00001c44: 	nopl	(%rax) # Size: 4
.Ltmp2820:
    00001c48: 	leaq	0x38(%rsp), %rsi
    00001c4d: 	xorl	%edx, %edx
    00001c4f: 	movq	%rbp, %rdi
    00001c52: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7250
    00001c57: 	movq	%rax, 0xe0(%rsp)
    00001c5f: 	movq	%rax, %rdi
    00001c62: 	movq	0x38(%rsp), %rax
    00001c67: 	movq	%rax, 0xf0(%rsp)
.Ltmp2915:
    00001c6f: 	movq	%r14, %rdx
    00001c72: 	movq	%r15, %rsi
    00001c75: 	callq	memcpy@PLT # Offset: 7285
    00001c7a: 	movq	0x38(%rsp), %r14
    00001c7f: 	movq	0xe0(%rsp), %rax
    00001c87: 	jmp	.Ltmp2891 # Offset: 7303
    00001c8c: 	nopl	(%rax) # Size: 4
.Ltmp2848:
    00001c90: 	leaq	0x38(%rsp), %rsi
    00001c95: 	xorl	%edx, %edx
    00001c97: 	movq	%rbp, %rdi
    00001c9a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7322
    00001c9f: 	movq	%rax, 0xe0(%rsp)
    00001ca7: 	movq	%rax, %rdi
    00001caa: 	movq	0x38(%rsp), %rax
    00001caf: 	movq	%rax, 0xf0(%rsp)
.Ltmp2920:
    00001cb7: 	movq	%r13, %rdx
    00001cba: 	movq	%r14, %rsi
    00001cbd: 	callq	memcpy@PLT # Offset: 7357
    00001cc2: 	movq	0x38(%rsp), %r13
    00001cc7: 	movq	0xe0(%rsp), %rax
    00001ccf: 	jmp	.Ltmp2901 # Offset: 7375
    00001cd4: 	nopl	(%rax) # Size: 4
.Ltmp2828:
    00001cd8: 	leaq	0x38(%rsp), %rsi
    00001cdd: 	xorl	%edx, %edx
    00001cdf: 	movq	%rbp, %rdi
    00001ce2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7394
    00001ce7: 	movq	%rax, 0xe0(%rsp)
    00001cef: 	movq	%rax, %rdi
    00001cf2: 	movq	0x38(%rsp), %rax
    00001cf7: 	movq	%rax, 0xf0(%rsp)
.Ltmp2916:
    00001cff: 	movq	%r14, %rdx
    00001d02: 	movq	%r15, %rsi
    00001d05: 	callq	memcpy@PLT # Offset: 7429
    00001d0a: 	movq	0x38(%rsp), %r14
    00001d0f: 	movq	0xe0(%rsp), %rax
    00001d17: 	jmp	.Ltmp2893 # Offset: 7447
    00001d1c: 	nopl	(%rax) # Size: 4
.Ltmp2842:
    00001d20: 	leaq	0x38(%rsp), %rsi
    00001d25: 	xorl	%edx, %edx
    00001d27: 	movq	%rbp, %rdi
    00001d2a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7466
    00001d2f: 	movq	%rax, 0xe0(%rsp)
    00001d37: 	movq	%rax, %rdi
    00001d3a: 	movq	0x38(%rsp), %rax
    00001d3f: 	movq	%rax, 0xf0(%rsp)
.Ltmp2917:
    00001d47: 	movq	%r13, %rdx
    00001d4a: 	movq	%r14, %rsi
    00001d4d: 	callq	memcpy@PLT # Offset: 7501
    00001d52: 	movq	0x38(%rsp), %r13
    00001d57: 	movq	0xe0(%rsp), %rax
    00001d5f: 	jmp	.Ltmp2895 # Offset: 7519
    00001d64: 	nopl	(%rax) # Size: 4
.Ltmp2835:
    00001d68: 	leaq	0x38(%rsp), %rsi
    00001d6d: 	xorl	%edx, %edx
    00001d6f: 	movq	%rbp, %rdi
    00001d72: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7538
    00001d77: 	movq	%rax, 0xe0(%rsp)
    00001d7f: 	movq	%rax, %rdi
    00001d82: 	movq	0x38(%rsp), %rax
    00001d87: 	movq	%rax, 0xf0(%rsp)
.Ltmp2918:
    00001d8f: 	movq	%r14, %rdx
    00001d92: 	movq	%r15, %rsi
    00001d95: 	callq	memcpy@PLT # Offset: 7573
    00001d9a: 	movq	0x38(%rsp), %r14
    00001d9f: 	movq	0xe0(%rsp), %rax
    00001da7: 	jmp	.Ltmp2897 # Offset: 7591
    00001dac: 	nopl	(%rax) # Size: 4
.Ltmp2854:
    00001db0: 	leaq	0x38(%rsp), %rsi
    00001db5: 	xorl	%edx, %edx
    00001db7: 	movq	%rbp, %rdi
    00001dba: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7610
    00001dbf: 	movq	%rax, 0xe0(%rsp)
    00001dc7: 	movq	%rax, %rdi
    00001dca: 	movq	0x38(%rsp), %rax
    00001dcf: 	movq	%rax, 0xf0(%rsp)
.Ltmp2919:
    00001dd7: 	movq	%r13, %rdx
    00001dda: 	movq	%r14, %rsi
    00001ddd: 	callq	memcpy@PLT # Offset: 7645
    00001de2: 	movq	0x38(%rsp), %r13
    00001de7: 	movq	0xe0(%rsp), %rax
    00001def: 	jmp	.Ltmp2899 # Offset: 7663
.Ltmp2728:
    00001df4: 	leaq	DATAat0x33182(%rip), %rdi
    00001dfb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7675
.Ltmp2735:
    00001e00: 	leaq	DATAat0x33158(%rip), %rdi
    00001e07: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7687
.Ltmp2738:
    00001e0c: 	leaq	DATAat0x33182(%rip), %rdi
    00001e13: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7699
.Ltmp2740:
    00001e18: 	leaq	DATAat0x33158(%rip), %rdi
    00001e1f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7711
.Ltmp2743:
    00001e24: 	leaq	DATAat0x33182(%rip), %rdi
    00001e2b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7723
.Ltmp2746:
    00001e30: 	leaq	DATAat0x33158(%rip), %rdi
    00001e37: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7735
.Ltmp2749:
    00001e3c: 	leaq	DATAat0x33182(%rip), %rdi
    00001e43: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7747
.Ltmp2754:
    00001e48: 	leaq	DATAat0x33158(%rip), %rdi
    00001e4f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7759
.Ltmp2757:
    00001e54: 	leaq	DATAat0x33182(%rip), %rdi
    00001e5b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7771
.Ltmp2763:
    00001e60: 	leaq	DATAat0x33158(%rip), %rdi
    00001e67: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7783
.Ltmp2766:
    00001e6c: 	leaq	DATAat0x33182(%rip), %rdi
    00001e73: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7795
.Ltmp2768:
    00001e78: 	leaq	DATAat0x33158(%rip), %rdi
    00001e7f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7807
.Ltmp2771:
    00001e84: 	leaq	DATAat0x33182(%rip), %rdi
    00001e8b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7819
.Ltmp2781:
    00001e90: 	leaq	DATAat0x33158(%rip), %rdi
    00001e97: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7831
.Ltmp2784:
    00001e9c: 	leaq	DATAat0x33182(%rip), %rdi
    00001ea3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7843
.Ltmp2787:
    00001ea8: 	leaq	DATAat0x33158(%rip), %rdi
    00001eaf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7855
.Ltmp2790:
    00001eb4: 	leaq	DATAat0x33182(%rip), %rdi
    00001ebb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7867
.Ltmp2793:
    00001ec0: 	leaq	DATAat0x33158(%rip), %rdi
    00001ec7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7879
.Ltmp2796:
    00001ecc: 	leaq	DATAat0x33182(%rip), %rdi
    00001ed3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7891
.Ltmp2799:
    00001ed8: 	leaq	DATAat0x33158(%rip), %rdi
    00001edf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7903
.Ltmp2802:
    00001ee4: 	leaq	DATAat0x33182(%rip), %rdi
    00001eeb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7915
.Ltmp2808:
    00001ef0: 	leaq	DATAat0x33158(%rip), %rdi
    00001ef7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7927
.Ltmp2811:
    00001efc: 	leaq	DATAat0x33182(%rip), %rdi
    00001f03: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7939
.Ltmp2814:
    00001f08: 	leaq	DATAat0x33158(%rip), %rdi
    00001f0f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7951
.Ltmp2817:
    00001f14: 	leaq	DATAat0x33182(%rip), %rdi
    00001f1b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7963
.Ltmp2819:
    00001f20: 	leaq	DATAat0x33158(%rip), %rdi
    00001f27: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7975
.Ltmp2822:
    00001f2c: 	leaq	DATAat0x33182(%rip), %rdi
    00001f33: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7987
.Ltmp2827:
    00001f38: 	leaq	DATAat0x33158(%rip), %rdi
    00001f3f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7999
.Ltmp2830:
    00001f44: 	leaq	DATAat0x33182(%rip), %rdi
    00001f4b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8011
.Ltmp2834:
    00001f50: 	leaq	DATAat0x33158(%rip), %rdi
    00001f57: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8023
.Ltmp2837:
    00001f5c: 	leaq	DATAat0x33182(%rip), %rdi
    00001f63: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8035
.Ltmp2841:
    00001f68: 	leaq	DATAat0x33158(%rip), %rdi
    00001f6f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8047
.Ltmp2844:
    00001f74: 	leaq	DATAat0x33182(%rip), %rdi
    00001f7b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8059
.Ltmp2847:
    00001f80: 	leaq	DATAat0x33158(%rip), %rdi
    00001f87: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8071
.Ltmp2850:
    00001f8c: 	leaq	DATAat0x33182(%rip), %rdi
    00001f93: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8083
.Ltmp2853:
    00001f98: 	leaq	DATAat0x33158(%rip), %rdi
    00001f9f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8095
.Ltmp2856:
    00001fa4: 	leaq	DATAat0x33182(%rip), %rdi
    00001fab: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8107
.Ltmp2863:
    00001fb0: 	callq	__stack_chk_fail@PLT # Offset: 8112
.Ltmp2864:
    00001fb5: 	movq	%rbx, %rdi
    00001fb8: 	jmp	.Ltmp2902 # Offset: 8120
.Ltmp2866:
    00001fbd: 	movq	%rbx, %rdi
    00001fc0: 	jmp	.Ltmp2903 # Offset: 8128
.Ltmp2868:
    00001fc5: 	movq	%rbx, %rdi
    00001fc8: 	jmp	.Ltmp2904 # Offset: 8136
.Ltmp2870:
    00001fcd: 	movq	0x8(%rsp), %rdi
    00001fd2: 	jmp	.Ltmp2905 # Offset: 8146
.Ltmp2872:
    00001fd7: 	movq	%rbx, %rdi
    00001fda: 	jmp	.Ltmp2906 # Offset: 8154
.Ltmp2874:
    00001fdf: 	movq	%rbx, %rdi
    00001fe2: 	jmp	.Ltmp2907 # Offset: 8162
.Ltmp2876:
    00001fe7: 	movq	0x18(%rsp), %rdi
    00001fec: 	jmp	.Ltmp2908 # Offset: 8172
.Ltmp2878:
    00001ff1: 	movq	%rbx, %rdi
    00001ff4: 	jmp	.Ltmp2909 # Offset: 8180
.Ltmp2880:
    00001ff9: 	movq	0x10(%rsp), %rdi
    00001ffe: 	jmp	.Ltmp2910 # Offset: 8190
.Ltmp2882:
    00002003: 	movq	0x20(%rsp), %rdi
    00002008: 	jmp	.Ltmp2911 # Offset: 8200
.Ltmp2884:
    0000200d: 	movq	%rbx, %rdi
    00002010: 	jmp	.Ltmp2912 # Offset: 8208
.Ltmp2886:
    00002015: 	movq	%rbx, %rdi
    00002018: 	jmp	.Ltmp2913 # Offset: 8216
.Ltmp2888:
    0000201d: 	movq	%rbx, %rdi
    00002020: 	jmp	.Ltmp2914 # Offset: 8224
.Ltmp2890:
    00002025: 	movq	%rbx, %rdi
    00002028: 	jmp	.Ltmp2915 # Offset: 8232
.Ltmp2892:
    0000202d: 	movq	%rbx, %rdi
    00002030: 	jmp	.Ltmp2916 # Offset: 8240
.Ltmp2894:
    00002035: 	movq	%rbx, %rdi
    00002038: 	jmp	.Ltmp2917 # Offset: 8248
.Ltmp2896:
    0000203d: 	movq	%rbx, %rdi
    00002040: 	jmp	.Ltmp2918 # Offset: 8256
.Ltmp2898:
    00002045: 	movq	%rbx, %rdi
    00002048: 	jmp	.Ltmp2919 # Offset: 8264
.Ltmp2900:
    0000204d: 	movq	%rbx, %rdi
    00002050: 	jmp	.Ltmp2920 # Offset: 8272
.Ltmp2725:
    00002055: 	leaq	DATAat0x33158(%rip), %rdi
    0000205c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8284
    00002061: 	endbr64
.Ltmp2929:
    00002065: 	movq	%rax, %rbp
    00002068: 	jmp	.Ltmp2921 # Offset: 8296
    0000206a: 	endbr64
.Ltmp2923:
    0000206e: 	movq	%rax, %rbp
    00002071: 	jmp	.Ltmp2922 # Offset: 8305
    00002073: 	endbr64
    00002077: 	jmp	.Ltmp2923 # Offset: 8311
.Ltmp2921:
    00002079: 	movq	0xe0(%rsp), %rdi
    00002081: 	cmpq	%rbx, %rdi
    00002084: 	je	.Ltmp2924 # Offset: 8324
    00002086: 	movq	0xf0(%rsp), %rax
    0000208e: 	leaq	0x1(%rax), %rsi
    00002092: 	callq	_ZdlPvm@PLT # Offset: 8338
.Ltmp2924:
    00002097: 	movq	0x60(%rsp), %rdi
    0000209c: 	cmpq	0x8(%rsp), %rdi
    000020a1: 	je	.Ltmp2925 # Offset: 8353
    000020a3: 	movq	0x70(%rsp), %rax
    000020a8: 	leaq	0x1(%rax), %rsi
    000020ac: 	callq	_ZdlPvm@PLT # Offset: 8364
.Ltmp2925:
    000020b1: 	movl	$0x4, %esi
    000020b6: 	movq	%r12, %rdi
    000020b9: 	movq	%rbp, %rbx
    000020bc: 	callq	_ZdlPvm@PLT # Offset: 8380
.Ltmp2941:
    000020c1: 	movq	0x40(%rsp), %rdi
    000020c6: 	cmpq	0x28(%rsp), %rdi
    000020cb: 	je	.Ltmp2926 # Offset: 8395
    000020cd: 	movq	0x50(%rsp), %rax
    000020d2: 	leaq	0x1(%rax), %rsi
    000020d6: 	callq	_ZdlPvm@PLT # Offset: 8406
.Ltmp2926:
    000020db: 	movq	%rbx, %rdi
    000020de: 	callq	_Unwind_Resume@PLT # Offset: 8414
.Ltmp2922:
    000020e3: 	movq	0xe0(%rsp), %rdi
    000020eb: 	cmpq	%rbx, %rdi
    000020ee: 	je	.Ltmp2925 # Offset: 8430
.Ltmp2942:
    000020f0: 	movq	0xf0(%rsp), %rax
    000020f8: 	leaq	0x1(%rax), %rsi
    000020fc: 	callq	_ZdlPvm@PLT # Offset: 8444
    00002101: 	jmp	.Ltmp2925 # Offset: 8449
    00002103: 	endbr64
.Ltmp2928:
    00002107: 	movq	%rax, %rbp
    0000210a: 	jmp	.Ltmp2927 # Offset: 8458
    0000210f: 	endbr64
    00002113: 	jmp	.Ltmp2928 # Offset: 8467
    00002115: 	endbr64
    00002119: 	jmp	.Ltmp2928 # Offset: 8473
    0000211b: 	endbr64
    0000211f: 	jmp	.Ltmp2929 # Offset: 8479
    00002124: 	endbr64
    00002128: 	jmp	.Ltmp2929 # Offset: 8488
    0000212d: 	endbr64
    00002131: 	jmp	.Ltmp2929 # Offset: 8497
    00002136: 	endbr64
    0000213a: 	jmp	.Ltmp2929 # Offset: 8506
    0000213f: 	endbr64
.Ltmp2931:
    00002143: 	movq	%rax, %rbp
    00002146: 	jmp	.Ltmp2930 # Offset: 8518
    00002148: 	endbr64
    0000214c: 	jmp	.Ltmp2931 # Offset: 8524
    0000214e: 	endbr64
    00002152: 	jmp	.Ltmp2931 # Offset: 8530
    00002154: 	endbr64
    00002158: 	jmp	.Ltmp2931 # Offset: 8536
.Ltmp2930:
    0000215a: 	movq	0xe0(%rsp), %rdi
    00002162: 	cmpq	%rbx, %rdi
    00002165: 	je	.Ltmp2932 # Offset: 8549
    00002167: 	movq	0xf0(%rsp), %rax
    0000216f: 	leaq	0x1(%rax), %rsi
    00002173: 	callq	_ZdlPvm@PLT # Offset: 8563
.Ltmp2932:
    00002178: 	movq	0x80(%rsp), %rdi
    00002180: 	cmpq	0x10(%rsp), %rdi
    00002185: 	je	.Ltmp2924 # Offset: 8581
    0000218b: 	movq	0x90(%rsp), %rax
    00002193: 	leaq	0x1(%rax), %rsi
    00002197: 	callq	_ZdlPvm@PLT # Offset: 8599
    0000219c: 	jmp	.Ltmp2924 # Offset: 8604
    000021a1: 	endbr64
    000021a5: 	jmp	.Ltmp2931 # Offset: 8613
    000021a7: 	endbr64
    000021ab: 	jmp	.Ltmp2931 # Offset: 8619
    000021ad: 	endbr64
    000021b1: 	jmp	.Ltmp2923 # Offset: 8625
    000021b6: 	endbr64
    000021ba: 	jmp	.Ltmp2923 # Offset: 8634
    000021bf: 	endbr64
    000021c3: 	jmp	.Ltmp2923 # Offset: 8643
    000021c8: 	endbr64
    000021cc: 	jmp	.Ltmp2923 # Offset: 8652
    000021d1: 	endbr64
    000021d5: 	jmp	.Ltmp2931 # Offset: 8661
    000021da: 	endbr64
    000021de: 	jmp	.Ltmp2928 # Offset: 8670
    000021e3: 	endbr64
.Ltmp2934:
    000021e7: 	movq	%rax, %rbp
    000021ea: 	jmp	.Ltmp2933 # Offset: 8682
    000021ec: 	endbr64
    000021f0: 	jmp	.Ltmp2934 # Offset: 8688
    000021f2: 	endbr64
    000021f6: 	jmp	.Ltmp2928 # Offset: 8694
    000021fb: 	endbr64
    000021ff: 	jmp	.Ltmp2928 # Offset: 8703
.Ltmp2927:
    00002204: 	movq	0xe0(%rsp), %rdi
    0000220c: 	cmpq	%rbx, %rdi
    0000220f: 	je	.Ltmp2933 # Offset: 8719
    00002211: 	movq	0xf0(%rsp), %rax
    00002219: 	leaq	0x1(%rax), %rsi
    0000221d: 	callq	_ZdlPvm@PLT # Offset: 8733
.Ltmp2933:
    00002222: 	movq	0xa0(%rsp), %rdi
    0000222a: 	cmpq	0x18(%rsp), %rdi
    0000222f: 	je	.Ltmp2932 # Offset: 8751
    00002235: 	movq	0xb0(%rsp), %rax
    0000223d: 	leaq	0x1(%rax), %rsi
    00002241: 	callq	_ZdlPvm@PLT # Offset: 8769
    00002246: 	jmp	.Ltmp2932 # Offset: 8774
    0000224b: 	endbr64
    0000224f: 	jmp	.Ltmp2929 # Offset: 8783
    00002254: 	endbr64
    00002258: 	jmp	.Ltmp2929 # Offset: 8792
    0000225d: 	endbr64
    00002261: 	jmp	.Ltmp2929 # Offset: 8801
    00002266: 	endbr64
    0000226a: 	jmp	.Ltmp2929 # Offset: 8810
    0000226f: 	endbr64
    00002273: 	jmp	.Ltmp2931 # Offset: 8819
    00002278: 	endbr64
    0000227c: 	jmp	.Ltmp2931 # Offset: 8828
    00002281: 	endbr64
.Ltmp2935:
    00002285: 	movq	%rax, %rbp
    00002288: 	jmp	.Ltmp2932 # Offset: 8840
    0000228d: 	endbr64
    00002291: 	jmp	.Ltmp2935 # Offset: 8849
    00002293: 	endbr64
.Ltmp2937:
    00002297: 	movq	%rax, %rbp
    0000229a: 	jmp	.Ltmp2936 # Offset: 8858
    0000229c: 	endbr64
    000022a0: 	jmp	.Ltmp2937 # Offset: 8864
.Ltmp2939:
    000022a2: 	movq	0xe0(%rsp), %rdi
    000022aa: 	cmpq	%rbx, %rdi
    000022ad: 	je	.Ltmp2936 # Offset: 8877
    000022af: 	movq	0xf0(%rsp), %rax
    000022b7: 	leaq	0x1(%rax), %rsi
    000022bb: 	callq	_ZdlPvm@PLT # Offset: 8891
.Ltmp2936:
    000022c0: 	movq	0xc0(%rsp), %rdi
    000022c8: 	cmpq	0x20(%rsp), %rdi
    000022cd: 	je	.Ltmp2933 # Offset: 8909
    000022d3: 	movq	0xd0(%rsp), %rax
    000022db: 	leaq	0x1(%rax), %rsi
    000022df: 	callq	_ZdlPvm@PLT # Offset: 8927
    000022e4: 	jmp	.Ltmp2933 # Offset: 8932
    000022e9: 	endbr64
    000022ed: 	movq	%rax, %rbp
    000022f0: 	jmp	.Ltmp2938 # Offset: 8944
    000022f2: 	endbr64
.Ltmp2940:
    000022f6: 	movq	%rax, %rbp
    000022f9: 	jmp	.Ltmp2939 # Offset: 8953
    000022fb: 	endbr64
    000022ff: 	jmp	.Ltmp2940 # Offset: 8959
    00002301: 	endbr64
    00002305: 	jmp	.Ltmp2940 # Offset: 8965
    00002307: 	endbr64
    0000230b: 	jmp	.Ltmp2940 # Offset: 8971
    0000230d: 	endbr64
    00002311: 	jmp	.Ltmp2940 # Offset: 8977
    00002313: 	endbr64
    00002317: 	jmp	.Ltmp2940 # Offset: 8983
    00002319: 	endbr64
    0000231d: 	jmp	.Ltmp2928 # Offset: 8989
    00002322: 	endbr64
    00002326: 	jmp	.Ltmp2940 # Offset: 8998
    00002328: 	endbr64
    0000232c: 	jmp	.Ltmp2928 # Offset: 9004
    00002331: 	endbr64
    00002335: 	jmp	.Ltmp2940 # Offset: 9013
    00002337: 	endbr64
    0000233b: 	jmp	.Ltmp2940 # Offset: 9019
    0000233d: 	endbr64
    00002341: 	movq	%rax, %rbx
    00002344: 	jmp	.Ltmp2941 # Offset: 9028
    00002349: 	endbr64
    0000234d: 	jmp	.Ltmp2940 # Offset: 9037
.Ltmp2938:
    0000234f: 	movq	0xe0(%rsp), %rdi
    00002357: 	leaq	0xf0(%rsp), %rax
    0000235f: 	cmpq	%rax, %rdi
    00002362: 	jne	.Ltmp2942 # Offset: 9058
    00002368: 	jmp	.Ltmp2925 # Offset: 9064
    0000236d: 	endbr64
    00002371: 	jmp	.Ltmp2940 # Offset: 9073
    00002373: 	endbr64
    00002377: 	jmp	.Ltmp2940 # Offset: 9079
    0000237c: 	endbr64
    00002380: 	jmp	.Ltmp2940 # Offset: 9088
    00002385: 	endbr64
    00002389: 	jmp	.Ltmp2928 # Offset: 9097
    0000238e: 	endbr64
    00002392: 	jmp	.Ltmp2928 # Offset: 9106
    00002397: 	endbr64
    0000239b: 	jmp	.Ltmp2928 # Offset: 9115
    000023a0: 	endbr64
    000023a4: 	jmp	.Ltmp2928 # Offset: 9124
    000023a9: 	endbr64
    000023ad: 	jmp	.Ltmp2923 # Offset: 9133
    000023b2: 	endbr64
    000023b6: 	jmp	.Ltmp2923 # Offset: 9142
    000023bb: 	endbr64
    000023bf: 	movq	%rax, %rbp
    000023c2: 	jmp	.Ltmp2925 # Offset: 9154
    000023c7: 	endbr64
.Ltmp2943:
    000023cb: 	movq	%rax, %rbp
    000023ce: 	jmp	.Ltmp2924 # Offset: 9166
    000023d3: 	endbr64
    000023d7: 	jmp	.Ltmp2943 # Offset: 9175
    000023d9: 	endbr64
    000023dd: 	jmp	.Ltmp2929 # Offset: 9181
    000023e2: 	endbr64
    000023e6: 	jmp	.Ltmp2929 # Offset: 9190
    000023eb: 	endbr64
    000023ef: 	jmp	.Ltmp2940 # Offset: 9199
    000023f4: 	endbr64
    000023f8: 	jmp	.Ltmp2940 # Offset: 9208
    000023fd: 	endbr64
    00002401: 	jmp	.Ltmp2940 # Offset: 9217
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIjEvv"

Binary Function "_Z21testOneFunction_equalIlPFlPKlilEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 383
  State       : disassembled
  Address     : 0x21ee0
  Size        : 0x224
  MaxSize     : 0x230
  Offset      : 0x21ee0
  Section     : .text
  Orc Section : .local.text._Z21testOneFunction_equalIlPFlPKlilEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0382:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x331c8(%rip), %r15
    0000000d: 	pushq	%r14
    0000000f: 	movq	%rcx, %r14
    00000012: 	pushq	%r13
    00000014: 	movq	%rdi, %r13
    00000017: 	pushq	%r12
    00000019: 	movl	%esi, %r12d
    0000001c: 	pushq	%rbp
    0000001d: 	movq	%rdx, %rbp
    00000020: 	pushq	%rbx
    00000021: 	xorl	%ebx, %ebx
    00000023: 	subq	$0x18, %rsp
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x8(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	callq	clock@PLT # Offset: 55
    0000003c: 	movsd	init_value(%rip), %xmm0
    00000044: 	movq	%rax, start_time(%rip)
    0000004b: 	movl	iterations(%rip), %eax
    00000051: 	testl	%eax, %eax
    00000053: 	jle	.Ltmp2944 # Offset: 83
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp2946:
    00000058: 	cvttsd2si	%xmm0, %rdx
    0000005d: 	movl	%r12d, %esi
    00000060: 	movq	%r13, %rdi
    00000063: 	callq	*%rbp # Offset: 99
    00000065: 	movsd	init_value(%rip), %xmm0
    0000006d: 	movq	%rax, %r8
    00000070: 	cvttsd2si	%xmm0, %rax
    00000075: 	cmpq	%rax, %r8
    00000078: 	je	.Ltmp2945 # Offset: 120
    0000007a: 	movq	(%r14), %rdx
    0000007d: 	xorl	%eax, %eax
    0000007f: 	movq	%r15, %rsi
    00000082: 	movl	$0x1, %edi
    00000087: 	addl	$0x1, %ebx
    0000008a: 	callq	__printf_chk@PLT # Offset: 138
    0000008f: 	cmpl	%ebx, iterations(%rip)
    00000095: 	jle	.Ltmp2944 # Offset: 149
    00000097: 	movsd	init_value(%rip), %xmm0
    0000009f: 	jmp	.Ltmp2946 # Offset: 159
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp2945:
    000000a8: 	addl	$0x1, %ebx
    000000ab: 	cmpl	%ebx, iterations(%rip)
    000000b1: 	jg	.Ltmp2946 # Offset: 177
.Ltmp2944:
    000000b3: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000ba: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000c1: 	subq	$0x20, %rax
    000000c5: 	cmpq	%rax, %rbx
    000000c8: 	je	.Ltmp2947 # Offset: 200
    000000ce: 	leaq	0x10(%rbx), %rdi
    000000d2: 	movq	0x8(%r14), %r12
    000000d6: 	movq	%rdi, (%rbx)
    000000d9: 	movq	(%r14), %rbp
    000000dc: 	movq	%rbp, %rax
    000000df: 	addq	%r12, %rax
    000000e2: 	je	.Ltmp2948 # Offset: 226
    000000e4: 	testq	%rbp, %rbp
    000000e7: 	je	.Ltmp2949 # Offset: 231
.Ltmp2948:
    000000ed: 	movq	%r12, (%rsp)
    000000f1: 	cmpq	$0xf, %r12
    000000f5: 	ja	.Ltmp2950 # Offset: 245
    000000fb: 	cmpq	$0x1, %r12
    000000ff: 	jne	.Ltmp2951 # Offset: 255
    00000105: 	movzbl	(%rbp), %eax
    00000109: 	movb	%al, 0x10(%rbx)
.Ltmp2954:
    0000010c: 	movq	%r12, 0x8(%rbx)
    00000110: 	movb	$0x0, (%rdi,%r12)
    00000115: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000011c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000123: 	addq	$0x20, %rax
    00000127: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000012e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000135: 	je	.Ltmp2952 # Offset: 309
.Ltmp2955:
    0000013b: 	movq	-0x20(%rax), %rbp
    0000013f: 	callq	clock@PLT # Offset: 319
    00000144: 	movq	%rax, end_time(%rip)
    0000014b: 	movq	0x8(%rsp), %rdx
    00000150: 	subq	%fs:0x28, %rdx
    00000159: 	jne	.Ltmp2953 # Offset: 345
    0000015f: 	subq	start_time(%rip), %rax
    00000166: 	pxor	%xmm0, %xmm0
    0000016a: 	movq	%rbp, %rdi
    0000016d: 	cvtsi2sd	%rax, %xmm0
    00000172: 	divsd	DATAat0x335b0(%rip), %xmm0
    0000017a: 	addq	$0x18, %rsp
    0000017e: 	popq	%rbx
    0000017f: 	popq	%rbp
    00000180: 	popq	%r12
    00000182: 	popq	%r13
    00000184: 	popq	%r14
    00000186: 	popq	%r15
    00000188: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 392
    0000018d: 	nopl	(%rax) # Size: 3
.Ltmp2950:
    00000190: 	movq	%rbx, %rdi
    00000193: 	movq	%rsp, %rsi
    00000196: 	xorl	%edx, %edx
    00000198: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 408
    0000019d: 	movq	%rax, (%rbx)
    000001a0: 	movq	%rax, %rdi
    000001a3: 	movq	(%rsp), %rax
    000001a7: 	movq	%rax, 0x10(%rbx)
.Ltmp2956:
    000001ab: 	movq	%r12, %rdx
    000001ae: 	movq	%rbp, %rsi
    000001b1: 	callq	memcpy@PLT # Offset: 433
    000001b6: 	movq	(%rsp), %r12
    000001ba: 	movq	(%rbx), %rdi
    000001bd: 	jmp	.Ltmp2954 # Offset: 445
    000001c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2947:
    000001c8: 	movq	%r14, %rsi
    000001cb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001d2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 466
    000001d7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001de: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001e5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001ec: 	jne	.Ltmp2955 # Offset: 492
.Ltmp2952:
    000001f2: 	movq	-0x8(%rdx), %rax
    000001f6: 	addq	$0x200, %rax
    000001fc: 	jmp	.Ltmp2955 # Offset: 508
    00000201: 	nopl	(%rax) # Size: 7
.Ltmp2951:
    00000208: 	testq	%r12, %r12
    0000020b: 	je	.Ltmp2954 # Offset: 523
    00000211: 	jmp	.Ltmp2956 # Offset: 529
.Ltmp2953:
    00000213: 	callq	__stack_chk_fail@PLT # Offset: 531
.Ltmp2949:
    00000218: 	leaq	DATAat0x33158(%rip), %rdi
    0000021f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 543
DWARF CFI Instructions:
    <empty>
End of Function "_Z21testOneFunction_equalIlPFlPKlilEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIlEvv" after disassembly {
  Number      : 384
  State       : disassembled
  Address     : 0x22110
  Size        : 0x240a
  MaxSize     : 0x2410
  Offset      : 0x22110
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIlEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0383:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	$0xfa00, %edi
    0000000b: 	pushq	%r14
    0000000d: 	pushq	%r13
    0000000f: 	pushq	%r12
    00000011: 	pushq	%rbp
    00000012: 	pushq	%rbx
    00000013: 	subq	$0xf8, %rsp
    0000001a: 	movq	%fs:0x28, %rax
    00000023: 	movq	%rax, 0xe8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	leaq	0x30(%rsp), %rax
    00000032: 	movl	$0x36746e69, 0x30(%rsp)
    0000003a: 	movq	%rax, 0x8(%rsp)
    0000003f: 	movq	%rax, 0x20(%rsp)
    00000044: 	movl	$0x5f34, %eax
    00000049: 	movw	%ax, 0x34(%rsp)
    0000004e: 	movb	$0x74, 0x36(%rsp)
    00000053: 	movq	$0x7, 0x28(%rsp)
    0000005c: 	movb	$0x0, 0x37(%rsp)
    00000061: 	callq	_Znam@PLT # Offset: 97
    00000066: 	movq	%rax, %r12
    00000069: 	cvttsd2si	init_value(%rip), %rax
    00000072: 	leaq	0xfa00(%r12), %rdx
    0000007a: 	movq	%rax, %xmm0
    0000007f: 	movq	%r12, %rax
    00000082: 	punpcklqdq	%xmm0, %xmm0
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2957:
    00000090: 	movups	%xmm0, (%rax)
    00000093: 	addq	$0x10, %rax
    00000097: 	cmpq	%rax, %rdx
    0000009a: 	jne	.Ltmp2957 # Offset: 154
    0000009c: 	movq	0x20(%rsp), %rbp
    000000a1: 	movq	0x28(%rsp), %r13
    000000a6: 	leaq	0xd0(%rsp), %rbx
    000000ae: 	movq	%rbx, 0xc0(%rsp)
    000000b6: 	movq	%rbp, %rax
    000000b9: 	addq	%r13, %rax
    000000bc: 	je	.Ltmp2958 # Offset: 188
    000000be: 	testq	%rbp, %rbp
    000000c1: 	je	.Ltmp2959 # Offset: 193
.Ltmp2958:
    000000c7: 	movq	%r13, 0x18(%rsp)
    000000cc: 	cmpq	$0xf, %r13
    000000d0: 	ja	.Ltmp2960 # Offset: 208
    000000d6: 	cmpq	$0x1, %r13
    000000da: 	jne	.Ltmp2961 # Offset: 218
    000000e0: 	movzbl	(%rbp), %eax
    000000e4: 	movb	%al, 0xd0(%rsp)
    000000eb: 	movq	%rbx, %rax
.Ltmp3102:
    000000ee: 	movq	%r13, 0xc8(%rsp)
    000000f6: 	movb	$0x0, (%rax,%r13)
    000000fb: 	movabsq	$0x3fffffffffffffff, %rax
    00000105: 	subq	0xc8(%rsp), %rax
    0000010d: 	cmpq	$0x11, %rax
    00000111: 	jbe	.Ltmp2962 # Offset: 273
    00000117: 	leaq	0xc0(%rsp), %rbp
    0000011f: 	movl	$0x12, %edx
    00000124: 	leaq	DATAat0x331d8(%rip), %rsi
    0000012b: 	movq	%rbp, %rdi
    0000012e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 302
    00000133: 	movq	%rbp, %rcx
    00000136: 	leaq	_Z8bit_and1IlET_PKS0_iS0_(%rip), %rdx
    0000013d: 	movl	$0x1f40, %esi
    00000142: 	movq	%r12, %rdi
    00000145: 	callq	_Z21testOneFunction_equalIlPFlPKlilEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 325
    0000014a: 	movq	0xc0(%rsp), %rdi
    00000152: 	cmpq	%rbx, %rdi
    00000155: 	je	.Ltmp2963 # Offset: 341
    00000157: 	movq	0xd0(%rsp), %rax
    0000015f: 	leaq	0x1(%rax), %rsi
    00000163: 	callq	_ZdlPvm@PLT # Offset: 355
.Ltmp2963:
    00000168: 	leaq	0x20(%rsp), %r13
    0000016d: 	leaq	DATAat0x331eb(%rip), %rdx
    00000174: 	movq	%rbp, %rdi
    00000177: 	movq	%r13, %rsi
    0000017a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 378
    0000017f: 	movq	%rbp, %rcx
    00000182: 	leaq	_Z8bit_and2IlET_PKS0_iS0_(%rip), %rdx
    00000189: 	movl	$0x1f40, %esi
    0000018e: 	movq	%r12, %rdi
    00000191: 	callq	_Z21testOneFunction_equalIlPFlPKlilEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 401
    00000196: 	movq	0xc0(%rsp), %rdi
    0000019e: 	cmpq	%rbx, %rdi
    000001a1: 	je	.Ltmp2964 # Offset: 417
    000001a3: 	movq	0xd0(%rsp), %rax
    000001ab: 	leaq	0x1(%rax), %rsi
    000001af: 	callq	_ZdlPvm@PLT # Offset: 431
.Ltmp2964:
    000001b4: 	leaq	DATAat0x331fe(%rip), %rdx
    000001bb: 	movq	%r13, %rsi
    000001be: 	movq	%rbp, %rdi
    000001c1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 449
    000001c6: 	movq	%rbp, %rcx
    000001c9: 	leaq	_Z8bit_and3IlET_PKS0_iS0_(%rip), %rdx
    000001d0: 	movl	$0x1f40, %esi
    000001d5: 	movq	%r12, %rdi
    000001d8: 	callq	_Z21testOneFunction_equalIlPFlPKlilEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 472
    000001dd: 	movq	0xc0(%rsp), %rdi
    000001e5: 	cmpq	%rbx, %rdi
    000001e8: 	je	.Ltmp2965 # Offset: 488
    000001ea: 	movq	0xd0(%rsp), %rax
    000001f2: 	leaq	0x1(%rax), %rsi
    000001f6: 	callq	_ZdlPvm@PLT # Offset: 502
.Ltmp2965:
    000001fb: 	leaq	DATAat0x33211(%rip), %rdx
    00000202: 	movq	%r13, %rsi
    00000205: 	movq	%rbp, %rdi
    00000208: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 520
    0000020d: 	movq	%rbp, %rcx
    00000210: 	leaq	_Z8bit_and4IlET_PKS0_iS0_(%rip), %rdx
    00000217: 	movl	$0x1f40, %esi
    0000021c: 	movq	%r12, %rdi
    0000021f: 	callq	_Z21testOneFunction_equalIlPFlPKlilEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 543
    00000224: 	movq	0xc0(%rsp), %rdi
    0000022c: 	cmpq	%rbx, %rdi
    0000022f: 	je	.Ltmp2966 # Offset: 559
    00000231: 	movq	0xd0(%rsp), %rax
    00000239: 	leaq	0x1(%rax), %rsi
    0000023d: 	callq	_ZdlPvm@PLT # Offset: 573
.Ltmp2966:
    00000242: 	movq	0x20(%rsp), %r15
    00000247: 	movq	0x28(%rsp), %r14
    0000024c: 	movq	%rbx, 0xc0(%rsp)
    00000254: 	movq	%r15, %rax
    00000257: 	addq	%r14, %rax
    0000025a: 	je	.Ltmp2967 # Offset: 602
    0000025c: 	testq	%r15, %r15
    0000025f: 	je	.Ltmp2968 # Offset: 607
.Ltmp2967:
    00000265: 	movq	%r14, 0x18(%rsp)
    0000026a: 	cmpq	$0xf, %r14
    0000026e: 	ja	.Ltmp2969 # Offset: 622
    00000274: 	cmpq	$0x1, %r14
    00000278: 	jne	.Ltmp2970 # Offset: 632
    0000027e: 	movzbl	(%r15), %eax
    00000282: 	movb	%al, 0xd0(%rsp)
    00000289: 	movq	%rbx, %rax
.Ltmp3106:
    0000028c: 	movq	%r14, 0xc8(%rsp)
    00000294: 	movb	$0x0, (%rax,%r14)
    00000299: 	movabsq	$0x3fffffffffffffff, %rax
    000002a3: 	subq	0xc8(%rsp), %rax
    000002ab: 	cmpq	$0x11, %rax
    000002af: 	jbe	.Ltmp2971 # Offset: 687
    000002b5: 	movl	$0x12, %edx
    000002ba: 	leaq	DATAat0x33224(%rip), %rsi
    000002c1: 	movq	%rbp, %rdi
    000002c4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 708
    000002c9: 	movq	%rbp, %rcx
    000002cc: 	leaq	_Z8bit_and5IlET_PKS0_iS0_(%rip), %rdx
    000002d3: 	movl	$0x1f40, %esi
    000002d8: 	movq	%r12, %rdi
    000002db: 	callq	_Z21testOneFunction_equalIlPFlPKlilEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 731
    000002e0: 	movq	0xc0(%rsp), %rdi
    000002e8: 	cmpq	%rbx, %rdi
    000002eb: 	je	.Ltmp2972 # Offset: 747
    000002ed: 	movq	0xd0(%rsp), %rax
    000002f5: 	leaq	0x1(%rax), %rsi
    000002f9: 	callq	_ZdlPvm@PLT # Offset: 761
.Ltmp2972:
    000002fe: 	movq	0x20(%rsp), %r15
    00000303: 	movq	0x28(%rsp), %r14
    00000308: 	movq	%rbx, 0xc0(%rsp)
    00000310: 	movq	%r15, %rax
    00000313: 	addq	%r14, %rax
    00000316: 	je	.Ltmp2973 # Offset: 790
    00000318: 	testq	%r15, %r15
    0000031b: 	je	.Ltmp2974 # Offset: 795
.Ltmp2973:
    00000321: 	movq	%r14, 0x18(%rsp)
    00000326: 	cmpq	$0xf, %r14
    0000032a: 	ja	.Ltmp2975 # Offset: 810
    00000330: 	cmpq	$0x1, %r14
    00000334: 	jne	.Ltmp2976 # Offset: 820
    0000033a: 	movzbl	(%r15), %eax
    0000033e: 	movb	%al, 0xd0(%rsp)
    00000345: 	movq	%rbx, %rax
.Ltmp3104:
    00000348: 	movq	%r14, 0xc8(%rsp)
    00000350: 	movb	$0x0, (%rax,%r14)
    00000355: 	movabsq	$0x3fffffffffffffff, %rax
    0000035f: 	subq	0xc8(%rsp), %rax
    00000367: 	cmpq	$0x11, %rax
    0000036b: 	jbe	.Ltmp2977 # Offset: 875
    00000371: 	movl	$0x12, %edx
    00000376: 	leaq	DATAat0x33237(%rip), %rsi
    0000037d: 	movq	%rbp, %rdi
    00000380: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 896
    00000385: 	movq	%rbp, %rcx
    00000388: 	leaq	_Z8bit_and6IlET_PKS0_iS0_(%rip), %rdx
    0000038f: 	movl	$0x1f40, %esi
    00000394: 	movq	%r12, %rdi
    00000397: 	callq	_Z21testOneFunction_equalIlPFlPKlilEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 919
    0000039c: 	movq	0xc0(%rsp), %rdi
    000003a4: 	cmpq	%rbx, %rdi
    000003a7: 	je	.Ltmp2978 # Offset: 935
    000003a9: 	movq	0xd0(%rsp), %rax
    000003b1: 	leaq	0x1(%rax), %rsi
    000003b5: 	callq	_ZdlPvm@PLT # Offset: 949
.Ltmp2978:
    000003ba: 	leaq	DATAat0x3324a(%rip), %rdx
    000003c1: 	movq	%r13, %rsi
    000003c4: 	movq	%rbp, %rdi
    000003c7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 967
    000003cc: 	movq	%rbp, %rcx
    000003cf: 	leaq	_Z8bit_and7IlET_PKS0_iS0_(%rip), %rdx
    000003d6: 	movl	$0x1f40, %esi
    000003db: 	movq	%r12, %rdi
    000003de: 	callq	_Z21testOneFunction_equalIlPFlPKlilEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 990
    000003e3: 	movq	0xc0(%rsp), %rdi
    000003eb: 	cmpq	%rbx, %rdi
    000003ee: 	je	.Ltmp2979 # Offset: 1006
    000003f0: 	movq	0xd0(%rsp), %rax
    000003f8: 	leaq	0x1(%rax), %rsi
    000003fc: 	callq	_ZdlPvm@PLT # Offset: 1020
.Ltmp2979:
    00000401: 	movq	0x20(%rsp), %r15
    00000406: 	movq	0x28(%rsp), %r14
    0000040b: 	movq	%rbx, 0xc0(%rsp)
    00000413: 	movq	%r15, %rax
    00000416: 	addq	%r14, %rax
    00000419: 	je	.Ltmp2980 # Offset: 1049
    0000041b: 	testq	%r15, %r15
    0000041e: 	je	.Ltmp2981 # Offset: 1054
.Ltmp2980:
    00000424: 	movq	%r14, 0x18(%rsp)
    00000429: 	cmpq	$0xf, %r14
    0000042d: 	ja	.Ltmp2982 # Offset: 1069
    00000433: 	cmpq	$0x1, %r14
    00000437: 	jne	.Ltmp2983 # Offset: 1079
    0000043d: 	movzbl	(%r15), %eax
    00000441: 	movb	%al, 0xd0(%rsp)
    00000448: 	movq	%rbx, %rax
.Ltmp3108:
    0000044b: 	movq	%r14, 0xc8(%rsp)
    00000453: 	movb	$0x0, (%rax,%r14)
    00000458: 	movabsq	$0x3fffffffffffffff, %rax
    00000462: 	subq	0xc8(%rsp), %rax
    0000046a: 	cmpq	$0x11, %rax
    0000046e: 	jbe	.Ltmp2984 # Offset: 1134
    00000474: 	movl	$0x12, %edx
    00000479: 	leaq	DATAat0x3325d(%rip), %rsi
    00000480: 	movq	%rbp, %rdi
    00000483: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1155
    00000488: 	movq	%rbp, %rcx
    0000048b: 	leaq	_Z8bit_and8IlET_PKS0_iS0_(%rip), %rdx
    00000492: 	movl	$0x1f40, %esi
    00000497: 	movq	%r12, %rdi
    0000049a: 	callq	_Z21testOneFunction_equalIlPFlPKlilEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1178
    0000049f: 	movq	0xc0(%rsp), %rdi
    000004a7: 	cmpq	%rbx, %rdi
    000004aa: 	je	.Ltmp2985 # Offset: 1194
    000004ac: 	movq	0xd0(%rsp), %rax
    000004b4: 	leaq	0x1(%rax), %rsi
    000004b8: 	callq	_ZdlPvm@PLT # Offset: 1208
.Ltmp2985:
    000004bd: 	leaq	0x40(%rsp), %rdi
    000004c2: 	leaq	DATAat0x33270(%rip), %rdx
    000004c9: 	movq	%r13, %rsi
    000004cc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1228
    000004d1: 	movl	iterations(%rip), %esi
    000004d7: 	movq	0x40(%rsp), %rdi
    000004dc: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 1244
    000004e1: 	leaq	DATAat0x33282(%rip), %rdx
    000004e8: 	movq	%r13, %rsi
    000004eb: 	movq	%rbp, %rdi
    000004ee: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1262
    000004f3: 	movq	%rbp, %rcx
    000004f6: 	leaq	_Z7bit_or1IlET_PKS0_iS0_(%rip), %rdx
    000004fd: 	movl	$0x1f40, %esi
    00000502: 	movq	%r12, %rdi
    00000505: 	callq	_Z21testOneFunction_equalIlPFlPKlilEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1285
    0000050a: 	movq	0xc0(%rsp), %rdi
    00000512: 	cmpq	%rbx, %rdi
    00000515: 	je	.Ltmp2986 # Offset: 1301
    00000517: 	movq	0xd0(%rsp), %rax
    0000051f: 	leaq	0x1(%rax), %rsi
    00000523: 	callq	_ZdlPvm@PLT # Offset: 1315
.Ltmp2986:
    00000528: 	leaq	DATAat0x33294(%rip), %rdx
    0000052f: 	movq	%r13, %rsi
    00000532: 	movq	%rbp, %rdi
    00000535: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1333
    0000053a: 	movq	%rbp, %rcx
    0000053d: 	leaq	_Z7bit_or2IlET_PKS0_iS0_(%rip), %rdx
    00000544: 	movl	$0x1f40, %esi
    00000549: 	movq	%r12, %rdi
    0000054c: 	callq	_Z21testOneFunction_equalIlPFlPKlilEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1356
    00000551: 	movq	0xc0(%rsp), %rdi
    00000559: 	cmpq	%rbx, %rdi
    0000055c: 	je	.Ltmp2987 # Offset: 1372
    0000055e: 	movq	0xd0(%rsp), %rax
    00000566: 	leaq	0x1(%rax), %rsi
    0000056a: 	callq	_ZdlPvm@PLT # Offset: 1386
.Ltmp2987:
    0000056f: 	movq	0x20(%rsp), %r15
    00000574: 	movq	0x28(%rsp), %r14
    00000579: 	movq	%rbx, 0xc0(%rsp)
    00000581: 	movq	%r15, %rax
    00000584: 	addq	%r14, %rax
    00000587: 	je	.Ltmp2988 # Offset: 1415
    00000589: 	testq	%r15, %r15
    0000058c: 	je	.Ltmp2989 # Offset: 1420
.Ltmp2988:
    00000592: 	movq	%r14, 0x18(%rsp)
    00000597: 	cmpq	$0xf, %r14
    0000059b: 	ja	.Ltmp2990 # Offset: 1435
    000005a1: 	cmpq	$0x1, %r14
    000005a5: 	jne	.Ltmp2991 # Offset: 1445
    000005ab: 	movzbl	(%r15), %eax
    000005af: 	movb	%al, 0xd0(%rsp)
    000005b6: 	movq	%rbx, %rax
.Ltmp3110:
    000005b9: 	movq	%r14, 0xc8(%rsp)
    000005c1: 	movb	$0x0, (%rax,%r14)
    000005c6: 	movabsq	$0x3fffffffffffffff, %rax
    000005d0: 	subq	0xc8(%rsp), %rax
    000005d8: 	cmpq	$0x10, %rax
    000005dc: 	jbe	.Ltmp2992 # Offset: 1500
    000005e2: 	movl	$0x11, %edx
    000005e7: 	leaq	DATAat0x332a6(%rip), %rsi
    000005ee: 	movq	%rbp, %rdi
    000005f1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1521
    000005f6: 	movq	%rbp, %rcx
    000005f9: 	leaq	_Z7bit_or3IlET_PKS0_iS0_(%rip), %rdx
    00000600: 	movl	$0x1f40, %esi
    00000605: 	movq	%r12, %rdi
    00000608: 	callq	_Z21testOneFunction_equalIlPFlPKlilEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1544
    0000060d: 	movq	0xc0(%rsp), %rdi
    00000615: 	cmpq	%rbx, %rdi
    00000618: 	je	.Ltmp2993 # Offset: 1560
    0000061a: 	movq	0xd0(%rsp), %rax
    00000622: 	leaq	0x1(%rax), %rsi
    00000626: 	callq	_ZdlPvm@PLT # Offset: 1574
.Ltmp2993:
    0000062b: 	leaq	DATAat0x332b8(%rip), %rdx
    00000632: 	movq	%r13, %rsi
    00000635: 	movq	%rbp, %rdi
    00000638: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1592
    0000063d: 	movq	%rbp, %rcx
    00000640: 	leaq	_Z7bit_or4IlET_PKS0_iS0_(%rip), %rdx
    00000647: 	movl	$0x1f40, %esi
    0000064c: 	movq	%r12, %rdi
    0000064f: 	callq	_Z21testOneFunction_equalIlPFlPKlilEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1615
    00000654: 	movq	0xc0(%rsp), %rdi
    0000065c: 	cmpq	%rbx, %rdi
    0000065f: 	je	.Ltmp2994 # Offset: 1631
    00000661: 	movq	0xd0(%rsp), %rax
    00000669: 	leaq	0x1(%rax), %rsi
    0000066d: 	callq	_ZdlPvm@PLT # Offset: 1645
.Ltmp2994:
    00000672: 	leaq	DATAat0x332ca(%rip), %rdx
    00000679: 	movq	%r13, %rsi
    0000067c: 	movq	%rbp, %rdi
    0000067f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1663
    00000684: 	movq	%rbp, %rcx
    00000687: 	leaq	_Z7bit_or5IlET_PKS0_iS0_(%rip), %rdx
    0000068e: 	movl	$0x1f40, %esi
    00000693: 	movq	%r12, %rdi
    00000696: 	callq	_Z21testOneFunction_equalIlPFlPKlilEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1686
    0000069b: 	movq	0xc0(%rsp), %rdi
    000006a3: 	cmpq	%rbx, %rdi
    000006a6: 	je	.Ltmp2995 # Offset: 1702
    000006a8: 	movq	0xd0(%rsp), %rax
    000006b0: 	leaq	0x1(%rax), %rsi
    000006b4: 	callq	_ZdlPvm@PLT # Offset: 1716
.Ltmp2995:
    000006b9: 	leaq	DATAat0x332dc(%rip), %rdx
    000006c0: 	movq	%r13, %rsi
    000006c3: 	movq	%rbp, %rdi
    000006c6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1734
    000006cb: 	movq	%rbp, %rcx
    000006ce: 	leaq	_Z7bit_or6IlET_PKS0_iS0_(%rip), %rdx
    000006d5: 	movl	$0x1f40, %esi
    000006da: 	movq	%r12, %rdi
    000006dd: 	callq	_Z21testOneFunction_equalIlPFlPKlilEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1757
    000006e2: 	movq	0xc0(%rsp), %rdi
    000006ea: 	cmpq	%rbx, %rdi
    000006ed: 	je	.Ltmp2996 # Offset: 1773
    000006ef: 	movq	0xd0(%rsp), %rax
    000006f7: 	leaq	0x1(%rax), %rsi
    000006fb: 	callq	_ZdlPvm@PLT # Offset: 1787
.Ltmp2996:
    00000700: 	movq	0x20(%rsp), %r15
    00000705: 	movq	0x28(%rsp), %r14
    0000070a: 	movq	%rbx, 0xc0(%rsp)
    00000712: 	movq	%r15, %rax
    00000715: 	addq	%r14, %rax
    00000718: 	je	.Ltmp2997 # Offset: 1816
    0000071a: 	testq	%r15, %r15
    0000071d: 	je	.Ltmp2998 # Offset: 1821
.Ltmp2997:
    00000723: 	movq	%r14, 0x18(%rsp)
    00000728: 	cmpq	$0xf, %r14
    0000072c: 	ja	.Ltmp2999 # Offset: 1836
    00000732: 	cmpq	$0x1, %r14
    00000736: 	jne	.Ltmp3000 # Offset: 1846
    0000073c: 	movzbl	(%r15), %eax
    00000740: 	movb	%al, 0xd0(%rsp)
    00000747: 	movq	%rbx, %rax
.Ltmp3114:
    0000074a: 	movq	%r14, 0xc8(%rsp)
    00000752: 	movb	$0x0, (%rax,%r14)
    00000757: 	movabsq	$0x3fffffffffffffff, %rax
    00000761: 	subq	0xc8(%rsp), %rax
    00000769: 	cmpq	$0x10, %rax
    0000076d: 	jbe	.Ltmp3001 # Offset: 1901
    00000773: 	movl	$0x11, %edx
    00000778: 	leaq	DATAat0x332ee(%rip), %rsi
    0000077f: 	movq	%rbp, %rdi
    00000782: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1922
    00000787: 	movq	%rbp, %rcx
    0000078a: 	leaq	_Z7bit_or7IlET_PKS0_iS0_(%rip), %rdx
    00000791: 	movl	$0x1f40, %esi
    00000796: 	movq	%r12, %rdi
    00000799: 	callq	_Z21testOneFunction_equalIlPFlPKlilEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1945
    0000079e: 	movq	0xc0(%rsp), %rdi
    000007a6: 	cmpq	%rbx, %rdi
    000007a9: 	je	.Ltmp3002 # Offset: 1961
    000007ab: 	movq	0xd0(%rsp), %rax
    000007b3: 	leaq	0x1(%rax), %rsi
    000007b7: 	callq	_ZdlPvm@PLT # Offset: 1975
.Ltmp3002:
    000007bc: 	leaq	DATAat0x33300(%rip), %rdx
    000007c3: 	movq	%r13, %rsi
    000007c6: 	movq	%rbp, %rdi
    000007c9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1993
    000007ce: 	movq	%rbp, %rcx
    000007d1: 	leaq	_Z7bit_or8IlET_PKS0_iS0_(%rip), %rdx
    000007d8: 	movl	$0x1f40, %esi
    000007dd: 	movq	%r12, %rdi
    000007e0: 	callq	_Z21testOneFunction_equalIlPFlPKlilEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2016
    000007e5: 	movq	0xc0(%rsp), %rdi
    000007ed: 	cmpq	%rbx, %rdi
    000007f0: 	je	.Ltmp3003 # Offset: 2032
    000007f2: 	movq	0xd0(%rsp), %rax
    000007fa: 	leaq	0x1(%rax), %rsi
    000007fe: 	callq	_ZdlPvm@PLT # Offset: 2046
.Ltmp3003:
    00000803: 	leaq	0x60(%rsp), %rdi
    00000808: 	leaq	DATAat0x33312(%rip), %rdx
    0000080f: 	movq	%r13, %rsi
    00000812: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2066
    00000817: 	movl	iterations(%rip), %esi
    0000081d: 	movq	0x60(%rsp), %rdi
    00000822: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 2082
    00000827: 	leaq	DATAat0x33323(%rip), %rdx
    0000082e: 	movq	%r13, %rsi
    00000831: 	movq	%rbp, %rdi
    00000834: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2100
    00000839: 	movq	%rbp, %rcx
    0000083c: 	leaq	_Z8bit_xor1IlET_PKS0_iS0_(%rip), %rdx
    00000843: 	movl	$0x1f40, %esi
    00000848: 	movq	%r12, %rdi
    0000084b: 	callq	_Z21testOneFunction_equalIlPFlPKlilEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2123
    00000850: 	movq	0xc0(%rsp), %rdi
    00000858: 	cmpq	%rbx, %rdi
    0000085b: 	je	.Ltmp3004 # Offset: 2139
    0000085d: 	movq	0xd0(%rsp), %rax
    00000865: 	leaq	0x1(%rax), %rsi
    00000869: 	callq	_ZdlPvm@PLT # Offset: 2153
.Ltmp3004:
    0000086e: 	leaq	DATAat0x33336(%rip), %rdx
    00000875: 	movq	%r13, %rsi
    00000878: 	movq	%rbp, %rdi
    0000087b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2171
    00000880: 	movq	%rbp, %rcx
    00000883: 	leaq	_Z8bit_xor2IlET_PKS0_iS0_(%rip), %rdx
    0000088a: 	movl	$0x1f40, %esi
    0000088f: 	movq	%r12, %rdi
    00000892: 	callq	_Z21testOneFunction_equalIlPFlPKlilEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2194
    00000897: 	movq	0xc0(%rsp), %rdi
    0000089f: 	cmpq	%rbx, %rdi
    000008a2: 	je	.Ltmp3005 # Offset: 2210
    000008a4: 	movq	0xd0(%rsp), %rax
    000008ac: 	leaq	0x1(%rax), %rsi
    000008b0: 	callq	_ZdlPvm@PLT # Offset: 2224
.Ltmp3005:
    000008b5: 	leaq	DATAat0x33349(%rip), %rdx
    000008bc: 	movq	%r13, %rsi
    000008bf: 	movq	%rbp, %rdi
    000008c2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2242
    000008c7: 	movq	%rbp, %rcx
    000008ca: 	leaq	_Z8bit_xor3IlET_PKS0_iS0_(%rip), %rdx
    000008d1: 	movl	$0x1f40, %esi
    000008d6: 	movq	%r12, %rdi
    000008d9: 	callq	_Z21testOneFunction_equalIlPFlPKlilEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2265
    000008de: 	movq	0xc0(%rsp), %rdi
    000008e6: 	cmpq	%rbx, %rdi
    000008e9: 	je	.Ltmp3006 # Offset: 2281
    000008eb: 	movq	0xd0(%rsp), %rax
    000008f3: 	leaq	0x1(%rax), %rsi
    000008f7: 	callq	_ZdlPvm@PLT # Offset: 2295
.Ltmp3006:
    000008fc: 	leaq	DATAat0x3335c(%rip), %rdx
    00000903: 	movq	%r13, %rsi
    00000906: 	movq	%rbp, %rdi
    00000909: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2313
    0000090e: 	movq	%rbp, %rcx
    00000911: 	leaq	_Z8bit_xor4IlET_PKS0_iS0_(%rip), %rdx
    00000918: 	movl	$0x1f40, %esi
    0000091d: 	movq	%r12, %rdi
    00000920: 	callq	_Z21testOneFunction_equalIlPFlPKlilEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2336
    00000925: 	movq	0xc0(%rsp), %rdi
    0000092d: 	cmpq	%rbx, %rdi
    00000930: 	je	.Ltmp3007 # Offset: 2352
    00000932: 	movq	0xd0(%rsp), %rax
    0000093a: 	leaq	0x1(%rax), %rsi
    0000093e: 	callq	_ZdlPvm@PLT # Offset: 2366
.Ltmp3007:
    00000943: 	movq	0x20(%rsp), %r15
    00000948: 	movq	0x28(%rsp), %r14
    0000094d: 	movq	%rbx, 0xc0(%rsp)
    00000955: 	movq	%r15, %rax
    00000958: 	addq	%r14, %rax
    0000095b: 	je	.Ltmp3008 # Offset: 2395
    0000095d: 	testq	%r15, %r15
    00000960: 	je	.Ltmp3009 # Offset: 2400
.Ltmp3008:
    00000966: 	movq	%r14, 0x18(%rsp)
    0000096b: 	cmpq	$0xf, %r14
    0000096f: 	ja	.Ltmp3010 # Offset: 2415
    00000975: 	cmpq	$0x1, %r14
    00000979: 	jne	.Ltmp3011 # Offset: 2425
    0000097f: 	movzbl	(%r15), %eax
    00000983: 	movb	%al, 0xd0(%rsp)
    0000098a: 	movq	%rbx, %rax
.Ltmp3112:
    0000098d: 	movq	%r14, 0xc8(%rsp)
    00000995: 	movb	$0x0, (%rax,%r14)
    0000099a: 	movabsq	$0x3fffffffffffffff, %rax
    000009a4: 	subq	0xc8(%rsp), %rax
    000009ac: 	cmpq	$0x11, %rax
    000009b0: 	jbe	.Ltmp3012 # Offset: 2480
    000009b6: 	movl	$0x12, %edx
    000009bb: 	leaq	DATAat0x3336f(%rip), %rsi
    000009c2: 	movq	%rbp, %rdi
    000009c5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2501
    000009ca: 	movq	%rbp, %rcx
    000009cd: 	leaq	_Z8bit_xor5IlET_PKS0_iS0_(%rip), %rdx
    000009d4: 	movl	$0x1f40, %esi
    000009d9: 	movq	%r12, %rdi
    000009dc: 	callq	_Z21testOneFunction_equalIlPFlPKlilEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2524
    000009e1: 	movq	0xc0(%rsp), %rdi
    000009e9: 	cmpq	%rbx, %rdi
    000009ec: 	je	.Ltmp3013 # Offset: 2540
    000009ee: 	movq	0xd0(%rsp), %rax
    000009f6: 	leaq	0x1(%rax), %rsi
    000009fa: 	callq	_ZdlPvm@PLT # Offset: 2554
.Ltmp3013:
    000009ff: 	leaq	DATAat0x33382(%rip), %rdx
    00000a06: 	movq	%r13, %rsi
    00000a09: 	movq	%rbp, %rdi
    00000a0c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2572
    00000a11: 	movq	%rbp, %rcx
    00000a14: 	leaq	_Z8bit_xor6IlET_PKS0_iS0_(%rip), %rdx
    00000a1b: 	movl	$0x1f40, %esi
    00000a20: 	movq	%r12, %rdi
    00000a23: 	callq	_Z21testOneFunction_equalIlPFlPKlilEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2595
    00000a28: 	movq	0xc0(%rsp), %rdi
    00000a30: 	cmpq	%rbx, %rdi
    00000a33: 	je	.Ltmp3014 # Offset: 2611
    00000a35: 	movq	0xd0(%rsp), %rax
    00000a3d: 	leaq	0x1(%rax), %rsi
    00000a41: 	callq	_ZdlPvm@PLT # Offset: 2625
.Ltmp3014:
    00000a46: 	leaq	DATAat0x33395(%rip), %rdx
    00000a4d: 	movq	%r13, %rsi
    00000a50: 	movq	%rbp, %rdi
    00000a53: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2643
    00000a58: 	movq	%rbp, %rcx
    00000a5b: 	leaq	_Z8bit_xor7IlET_PKS0_iS0_(%rip), %rdx
    00000a62: 	movl	$0x1f40, %esi
    00000a67: 	movq	%r12, %rdi
    00000a6a: 	callq	_Z21testOneFunction_equalIlPFlPKlilEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2666
    00000a6f: 	movq	0xc0(%rsp), %rdi
    00000a77: 	cmpq	%rbx, %rdi
    00000a7a: 	je	.Ltmp3015 # Offset: 2682
    00000a7c: 	movq	0xd0(%rsp), %rax
    00000a84: 	leaq	0x1(%rax), %rsi
    00000a88: 	callq	_ZdlPvm@PLT # Offset: 2696
.Ltmp3015:
    00000a8d: 	leaq	DATAat0x333a8(%rip), %rdx
    00000a94: 	movq	%r13, %rsi
    00000a97: 	movq	%rbp, %rdi
    00000a9a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2714
    00000a9f: 	movq	%rbp, %rcx
    00000aa2: 	leaq	_Z8bit_xor8IlET_PKS0_iS0_(%rip), %rdx
    00000aa9: 	movl	$0x1f40, %esi
    00000aae: 	movq	%r12, %rdi
    00000ab1: 	callq	_Z21testOneFunction_equalIlPFlPKlilEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2737
    00000ab6: 	movq	0xc0(%rsp), %rdi
    00000abe: 	cmpq	%rbx, %rdi
    00000ac1: 	je	.Ltmp3016 # Offset: 2753
    00000ac3: 	movq	0xd0(%rsp), %rax
    00000acb: 	leaq	0x1(%rax), %rsi
    00000acf: 	callq	_ZdlPvm@PLT # Offset: 2767
.Ltmp3016:
    00000ad4: 	leaq	0x80(%rsp), %rdi
    00000adc: 	leaq	DATAat0x333bb(%rip), %rdx
    00000ae3: 	movq	%r13, %rsi
    00000ae6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2790
    00000aeb: 	movl	iterations(%rip), %esi
    00000af1: 	movq	0x80(%rsp), %rdi
    00000af9: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 2809
    00000afe: 	movq	0x20(%rsp), %r15
    00000b03: 	movq	0x28(%rsp), %r14
    00000b08: 	movq	%rbx, 0xc0(%rsp)
    00000b10: 	movq	%r15, %rax
    00000b13: 	addq	%r14, %rax
    00000b16: 	je	.Ltmp3017 # Offset: 2838
    00000b18: 	testq	%r15, %r15
    00000b1b: 	je	.Ltmp3018 # Offset: 2843
.Ltmp3017:
    00000b21: 	movq	%r14, 0x18(%rsp)
    00000b26: 	cmpq	$0xf, %r14
    00000b2a: 	ja	.Ltmp3019 # Offset: 2858
    00000b30: 	cmpq	$0x1, %r14
    00000b34: 	jne	.Ltmp3020 # Offset: 2868
    00000b3a: 	movzbl	(%r15), %eax
    00000b3e: 	movb	%al, 0xd0(%rsp)
    00000b45: 	movq	%rbx, %rax
.Ltmp3118:
    00000b48: 	movq	%r14, 0xc8(%rsp)
    00000b50: 	movb	$0x0, (%rax,%r14)
    00000b55: 	movabsq	$0x3fffffffffffffff, %rax
    00000b5f: 	subq	0xc8(%rsp), %rax
    00000b67: 	cmpq	$0x15, %rax
    00000b6b: 	jbe	.Ltmp3021 # Offset: 2923
    00000b71: 	movl	$0x16, %edx
    00000b76: 	leaq	DATAat0x333cd(%rip), %rsi
    00000b7d: 	movq	%rbp, %rdi
    00000b80: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2944
    00000b85: 	movq	%rbp, %r8
    00000b88: 	movl	$0x1, %edx
    00000b8d: 	movl	$0x1f40, %esi
    00000b92: 	movq	%r12, %rdi
    00000b95: 	leaq	_Z10logic_and1IlEbPKT_ib(%rip), %rcx
    00000b9c: 	callq	_Z23testOneFunction_logicalIlPFbPKlibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2972
    00000ba1: 	movq	0xc0(%rsp), %rdi
    00000ba9: 	cmpq	%rbx, %rdi
    00000bac: 	je	.Ltmp3022 # Offset: 2988
    00000bae: 	movq	0xd0(%rsp), %rax
    00000bb6: 	leaq	0x1(%rax), %rsi
    00000bba: 	callq	_ZdlPvm@PLT # Offset: 3002
.Ltmp3022:
    00000bbf: 	leaq	DATAat0x333e4(%rip), %rdx
    00000bc6: 	movq	%r13, %rsi
    00000bc9: 	movq	%rbp, %rdi
    00000bcc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3020
    00000bd1: 	movq	%rbp, %r8
    00000bd4: 	movl	$0x1, %edx
    00000bd9: 	movl	$0x1f40, %esi
    00000bde: 	movq	%r12, %rdi
    00000be1: 	leaq	_Z10logic_and2IlEbPKT_ib(%rip), %rcx
    00000be8: 	callq	_Z23testOneFunction_logicalIlPFbPKlibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3048
    00000bed: 	movq	0xc0(%rsp), %rdi
    00000bf5: 	cmpq	%rbx, %rdi
    00000bf8: 	je	.Ltmp3023 # Offset: 3064
    00000bfa: 	movq	0xd0(%rsp), %rax
    00000c02: 	leaq	0x1(%rax), %rsi
    00000c06: 	callq	_ZdlPvm@PLT # Offset: 3078
.Ltmp3023:
    00000c0b: 	leaq	DATAat0x333fb(%rip), %rdx
    00000c12: 	movq	%r13, %rsi
    00000c15: 	movq	%rbp, %rdi
    00000c18: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3096
    00000c1d: 	movq	%rbp, %r8
    00000c20: 	movl	$0x1, %edx
    00000c25: 	movl	$0x1f40, %esi
    00000c2a: 	movq	%r12, %rdi
    00000c2d: 	leaq	_Z10logic_and3IlEbPKT_ib(%rip), %rcx
    00000c34: 	callq	_Z23testOneFunction_logicalIlPFbPKlibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3124
    00000c39: 	movq	0xc0(%rsp), %rdi
    00000c41: 	cmpq	%rbx, %rdi
    00000c44: 	je	.Ltmp3024 # Offset: 3140
    00000c46: 	movq	0xd0(%rsp), %rax
    00000c4e: 	leaq	0x1(%rax), %rsi
    00000c52: 	callq	_ZdlPvm@PLT # Offset: 3154
.Ltmp3024:
    00000c57: 	leaq	DATAat0x33412(%rip), %rdx
    00000c5e: 	movq	%r13, %rsi
    00000c61: 	movq	%rbp, %rdi
    00000c64: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3172
    00000c69: 	movq	%rbp, %r8
    00000c6c: 	movl	$0x1, %edx
    00000c71: 	movl	$0x1f40, %esi
    00000c76: 	movq	%r12, %rdi
    00000c79: 	leaq	_Z10logic_and4IlEbPKT_ib(%rip), %rcx
    00000c80: 	callq	_Z23testOneFunction_logicalIlPFbPKlibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3200
    00000c85: 	movq	0xc0(%rsp), %rdi
    00000c8d: 	cmpq	%rbx, %rdi
    00000c90: 	je	.Ltmp3025 # Offset: 3216
    00000c92: 	movq	0xd0(%rsp), %rax
    00000c9a: 	leaq	0x1(%rax), %rsi
    00000c9e: 	callq	_ZdlPvm@PLT # Offset: 3230
.Ltmp3025:
    00000ca3: 	movq	0x20(%rsp), %r15
    00000ca8: 	movq	0x28(%rsp), %r14
    00000cad: 	movq	%rbx, 0xc0(%rsp)
    00000cb5: 	movq	%r15, %rax
    00000cb8: 	addq	%r14, %rax
    00000cbb: 	je	.Ltmp3026 # Offset: 3259
    00000cbd: 	testq	%r15, %r15
    00000cc0: 	je	.Ltmp3027 # Offset: 3264
.Ltmp3026:
    00000cc6: 	movq	%r14, 0x18(%rsp)
    00000ccb: 	cmpq	$0xf, %r14
    00000ccf: 	ja	.Ltmp3028 # Offset: 3279
    00000cd5: 	cmpq	$0x1, %r14
    00000cd9: 	jne	.Ltmp3029 # Offset: 3289
    00000cdf: 	movzbl	(%r15), %eax
    00000ce3: 	movb	%al, 0xd0(%rsp)
    00000cea: 	movq	%rbx, %rax
.Ltmp3116:
    00000ced: 	movq	%r14, 0xc8(%rsp)
    00000cf5: 	movb	$0x0, (%rax,%r14)
    00000cfa: 	movabsq	$0x3fffffffffffffff, %rax
    00000d04: 	subq	0xc8(%rsp), %rax
    00000d0c: 	cmpq	$0x15, %rax
    00000d10: 	jbe	.Ltmp3030 # Offset: 3344
    00000d16: 	movl	$0x16, %edx
    00000d1b: 	leaq	DATAat0x33429(%rip), %rsi
    00000d22: 	movq	%rbp, %rdi
    00000d25: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3365
    00000d2a: 	movq	%rbp, %r8
    00000d2d: 	movl	$0x1, %edx
    00000d32: 	movl	$0x1f40, %esi
    00000d37: 	movq	%r12, %rdi
    00000d3a: 	leaq	_Z10logic_and5IlEbPKT_ib(%rip), %rcx
    00000d41: 	callq	_Z23testOneFunction_logicalIlPFbPKlibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3393
    00000d46: 	movq	0xc0(%rsp), %rdi
    00000d4e: 	cmpq	%rbx, %rdi
    00000d51: 	je	.Ltmp3031 # Offset: 3409
    00000d53: 	movq	0xd0(%rsp), %rax
    00000d5b: 	leaq	0x1(%rax), %rsi
    00000d5f: 	callq	_ZdlPvm@PLT # Offset: 3423
.Ltmp3031:
    00000d64: 	movq	0x20(%rsp), %r15
    00000d69: 	movq	0x28(%rsp), %r14
    00000d6e: 	movq	%rbx, 0xc0(%rsp)
    00000d76: 	movq	%r15, %rax
    00000d79: 	addq	%r14, %rax
    00000d7c: 	je	.Ltmp3032 # Offset: 3452
    00000d7e: 	testq	%r15, %r15
    00000d81: 	je	.Ltmp3033 # Offset: 3457
.Ltmp3032:
    00000d87: 	movq	%r14, 0x18(%rsp)
    00000d8c: 	cmpq	$0xf, %r14
    00000d90: 	ja	.Ltmp3034 # Offset: 3472
    00000d96: 	cmpq	$0x1, %r14
    00000d9a: 	jne	.Ltmp3035 # Offset: 3482
    00000da0: 	movzbl	(%r15), %eax
    00000da4: 	movb	%al, 0xd0(%rsp)
    00000dab: 	movq	%rbx, %rax
.Ltmp3122:
    00000dae: 	movq	%r14, 0xc8(%rsp)
    00000db6: 	movb	$0x0, (%rax,%r14)
    00000dbb: 	movabsq	$0x3fffffffffffffff, %rax
    00000dc5: 	subq	0xc8(%rsp), %rax
    00000dcd: 	cmpq	$0x15, %rax
    00000dd1: 	jbe	.Ltmp3036 # Offset: 3537
    00000dd7: 	movl	$0x16, %edx
    00000ddc: 	leaq	DATAat0x33440(%rip), %rsi
    00000de3: 	movq	%rbp, %rdi
    00000de6: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3558
    00000deb: 	movq	%rbp, %r8
    00000dee: 	movl	$0x1, %edx
    00000df3: 	movl	$0x1f40, %esi
    00000df8: 	movq	%r12, %rdi
    00000dfb: 	leaq	_Z10logic_and6IlEbPKT_ib(%rip), %rcx
    00000e02: 	callq	_Z23testOneFunction_logicalIlPFbPKlibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3586
    00000e07: 	movq	0xc0(%rsp), %rdi
    00000e0f: 	cmpq	%rbx, %rdi
    00000e12: 	je	.Ltmp3037 # Offset: 3602
    00000e14: 	movq	0xd0(%rsp), %rax
    00000e1c: 	leaq	0x1(%rax), %rsi
    00000e20: 	callq	_ZdlPvm@PLT # Offset: 3616
.Ltmp3037:
    00000e25: 	movq	0x20(%rsp), %r15
    00000e2a: 	movq	0x28(%rsp), %r14
    00000e2f: 	movq	%rbx, 0xc0(%rsp)
    00000e37: 	movq	%r15, %rax
    00000e3a: 	addq	%r14, %rax
    00000e3d: 	je	.Ltmp3038 # Offset: 3645
    00000e3f: 	testq	%r15, %r15
    00000e42: 	je	.Ltmp3039 # Offset: 3650
.Ltmp3038:
    00000e48: 	movq	%r14, 0x18(%rsp)
    00000e4d: 	cmpq	$0xf, %r14
    00000e51: 	ja	.Ltmp3040 # Offset: 3665
    00000e57: 	cmpq	$0x1, %r14
    00000e5b: 	jne	.Ltmp3041 # Offset: 3675
    00000e61: 	movzbl	(%r15), %eax
    00000e65: 	movb	%al, 0xd0(%rsp)
    00000e6c: 	movq	%rbx, %rax
.Ltmp3120:
    00000e6f: 	movq	%r14, 0xc8(%rsp)
    00000e77: 	movb	$0x0, (%rax,%r14)
    00000e7c: 	movabsq	$0x3fffffffffffffff, %rax
    00000e86: 	subq	0xc8(%rsp), %rax
    00000e8e: 	cmpq	$0x15, %rax
    00000e92: 	jbe	.Ltmp3042 # Offset: 3730
    00000e98: 	movl	$0x16, %edx
    00000e9d: 	leaq	DATAat0x33457(%rip), %rsi
    00000ea4: 	movq	%rbp, %rdi
    00000ea7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3751
    00000eac: 	movq	%rbp, %r8
    00000eaf: 	movl	$0x1, %edx
    00000eb4: 	movl	$0x1f40, %esi
    00000eb9: 	movq	%r12, %rdi
    00000ebc: 	leaq	_Z10logic_and7IlEbPKT_ib(%rip), %rcx
    00000ec3: 	callq	_Z23testOneFunction_logicalIlPFbPKlibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3779
    00000ec8: 	movq	0xc0(%rsp), %rdi
    00000ed0: 	cmpq	%rbx, %rdi
    00000ed3: 	je	.Ltmp3043 # Offset: 3795
    00000ed5: 	movq	0xd0(%rsp), %rax
    00000edd: 	leaq	0x1(%rax), %rsi
    00000ee1: 	callq	_ZdlPvm@PLT # Offset: 3809
.Ltmp3043:
    00000ee6: 	leaq	DATAat0x3346e(%rip), %rdx
    00000eed: 	movq	%r13, %rsi
    00000ef0: 	movq	%rbp, %rdi
    00000ef3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3827
    00000ef8: 	movq	%rbp, %r8
    00000efb: 	movl	$0x1, %edx
    00000f00: 	movl	$0x1f40, %esi
    00000f05: 	movq	%r12, %rdi
    00000f08: 	leaq	_Z10logic_and8IlEbPKT_ib(%rip), %rcx
    00000f0f: 	callq	_Z23testOneFunction_logicalIlPFbPKlibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3855
    00000f14: 	movq	0xc0(%rsp), %rdi
    00000f1c: 	cmpq	%rbx, %rdi
    00000f1f: 	je	.Ltmp3044 # Offset: 3871
    00000f21: 	movq	0xd0(%rsp), %rax
    00000f29: 	leaq	0x1(%rax), %rsi
    00000f2d: 	callq	_ZdlPvm@PLT # Offset: 3885
.Ltmp3044:
    00000f32: 	movq	0x20(%rsp), %r15
    00000f37: 	leaq	0xb0(%rsp), %rax
    00000f3f: 	movq	0x28(%rsp), %r14
    00000f44: 	movq	%rax, (%rsp)
    00000f48: 	movq	%rax, 0xa0(%rsp)
    00000f50: 	movq	%r15, %rax
    00000f53: 	addq	%r14, %rax
    00000f56: 	je	.Ltmp3045 # Offset: 3926
    00000f58: 	testq	%r15, %r15
    00000f5b: 	je	.Ltmp3046 # Offset: 3931
.Ltmp3045:
    00000f61: 	movq	%r14, 0x18(%rsp)
    00000f66: 	cmpq	$0xf, %r14
    00000f6a: 	ja	.Ltmp3047 # Offset: 3946
    00000f70: 	cmpq	$0x1, %r14
    00000f74: 	jne	.Ltmp3048 # Offset: 3956
    00000f7a: 	movzbl	(%r15), %eax
    00000f7e: 	movb	%al, 0xb0(%rsp)
    00000f85: 	movq	(%rsp), %rax
.Ltmp3128:
    00000f89: 	movq	%r14, 0xa8(%rsp)
    00000f91: 	movb	$0x0, (%rax,%r14)
    00000f96: 	movabsq	$0x3fffffffffffffff, %rax
    00000fa0: 	subq	0xa8(%rsp), %rax
    00000fa8: 	cmpq	$0x14, %rax
    00000fac: 	jbe	.Ltmp3049 # Offset: 4012
    00000fb2: 	leaq	0xa0(%rsp), %rdi
    00000fba: 	movl	$0x15, %edx
    00000fbf: 	leaq	DATAat0x33485(%rip), %rsi
    00000fc6: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4038
    00000fcb: 	movl	iterations(%rip), %esi
    00000fd1: 	movq	0xa0(%rsp), %rdi
    00000fd9: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 4057
    00000fde: 	leaq	DATAat0x3349b(%rip), %rdx
    00000fe5: 	movq	%r13, %rsi
    00000fe8: 	movq	%rbp, %rdi
    00000feb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4075
    00000ff0: 	movq	%rbp, %r8
    00000ff3: 	leaq	_Z9logic_or1IlEbPKT_ib(%rip), %rcx
    00000ffa: 	xorl	%edx, %edx
    00000ffc: 	movq	%r12, %rdi
    00000fff: 	movl	$0x1f40, %esi
    00001004: 	callq	_Z23testOneFunction_logicalIlPFbPKlibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4100
    00001009: 	movq	0xc0(%rsp), %rdi
    00001011: 	cmpq	%rbx, %rdi
    00001014: 	je	.Ltmp3050 # Offset: 4116
    00001016: 	movq	0xd0(%rsp), %rax
    0000101e: 	leaq	0x1(%rax), %rsi
    00001022: 	callq	_ZdlPvm@PLT # Offset: 4130
.Ltmp3050:
    00001027: 	leaq	DATAat0x334b1(%rip), %rdx
    0000102e: 	movq	%r13, %rsi
    00001031: 	movq	%rbp, %rdi
    00001034: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4148
    00001039: 	movq	%rbp, %r8
    0000103c: 	leaq	_Z12logic_or_optIlEbPKT_ib(%rip), %rcx
    00001043: 	xorl	%edx, %edx
    00001045: 	movq	%r12, %rdi
    00001048: 	movl	$0x1f40, %esi
    0000104d: 	callq	_Z23testOneFunction_logicalIlPFbPKlibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4173
    00001052: 	movq	0xc0(%rsp), %rdi
    0000105a: 	cmpq	%rbx, %rdi
    0000105d: 	je	.Ltmp3051 # Offset: 4189
    0000105f: 	movq	0xd0(%rsp), %rax
    00001067: 	leaq	0x1(%rax), %rsi
    0000106b: 	callq	_ZdlPvm@PLT # Offset: 4203
.Ltmp3051:
    00001070: 	movq	0x20(%rsp), %r15
    00001075: 	movq	0x28(%rsp), %r14
    0000107a: 	movq	%rbx, 0xc0(%rsp)
    00001082: 	movq	%r15, %rax
    00001085: 	addq	%r14, %rax
    00001088: 	je	.Ltmp3052 # Offset: 4232
    0000108a: 	testq	%r15, %r15
    0000108d: 	je	.Ltmp3053 # Offset: 4237
.Ltmp3052:
    00001093: 	movq	%r14, 0x18(%rsp)
    00001098: 	cmpq	$0xf, %r14
    0000109c: 	ja	.Ltmp3054 # Offset: 4252
    000010a2: 	cmpq	$0x1, %r14
    000010a6: 	jne	.Ltmp3055 # Offset: 4262
    000010ac: 	movzbl	(%r15), %eax
    000010b0: 	movb	%al, 0xd0(%rsp)
    000010b7: 	movq	%rbx, %rax
.Ltmp3126:
    000010ba: 	movq	%r14, 0xc8(%rsp)
    000010c2: 	movb	$0x0, (%rax,%r14)
    000010c7: 	movabsq	$0x3fffffffffffffff, %rax
    000010d1: 	subq	0xc8(%rsp), %rax
    000010d9: 	cmpq	$0x14, %rax
    000010dd: 	jbe	.Ltmp3056 # Offset: 4317
    000010e3: 	movl	$0x15, %edx
    000010e8: 	leaq	DATAat0x334ce(%rip), %rsi
    000010ef: 	movq	%rbp, %rdi
    000010f2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4338
    000010f7: 	movq	%rbp, %r8
    000010fa: 	leaq	_Z9logic_or2IlEbPKT_ib(%rip), %rcx
    00001101: 	xorl	%edx, %edx
    00001103: 	movq	%r12, %rdi
    00001106: 	movl	$0x1f40, %esi
    0000110b: 	callq	_Z23testOneFunction_logicalIlPFbPKlibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4363
    00001110: 	movq	0xc0(%rsp), %rdi
    00001118: 	cmpq	%rbx, %rdi
    0000111b: 	je	.Ltmp3057 # Offset: 4379
    0000111d: 	movq	0xd0(%rsp), %rax
    00001125: 	leaq	0x1(%rax), %rsi
    00001129: 	callq	_ZdlPvm@PLT # Offset: 4393
.Ltmp3057:
    0000112e: 	movq	0x20(%rsp), %r15
    00001133: 	movq	0x28(%rsp), %r14
    00001138: 	movq	%rbx, 0xc0(%rsp)
    00001140: 	movq	%r15, %rax
    00001143: 	addq	%r14, %rax
    00001146: 	je	.Ltmp3058 # Offset: 4422
    00001148: 	testq	%r15, %r15
    0000114b: 	je	.Ltmp3059 # Offset: 4427
.Ltmp3058:
    00001151: 	movq	%r14, 0x18(%rsp)
    00001156: 	cmpq	$0xf, %r14
    0000115a: 	ja	.Ltmp3060 # Offset: 4442
    00001160: 	cmpq	$0x1, %r14
    00001164: 	jne	.Ltmp3061 # Offset: 4452
    0000116a: 	movzbl	(%r15), %eax
    0000116e: 	movb	%al, 0xd0(%rsp)
    00001175: 	movq	%rbx, %rax
.Ltmp3124:
    00001178: 	movq	%r14, 0xc8(%rsp)
    00001180: 	movb	$0x0, (%rax,%r14)
    00001185: 	movabsq	$0x3fffffffffffffff, %rax
    0000118f: 	subq	0xc8(%rsp), %rax
    00001197: 	cmpq	$0x14, %rax
    0000119b: 	jbe	.Ltmp3062 # Offset: 4507
    000011a1: 	movl	$0x15, %edx
    000011a6: 	leaq	DATAat0x334e4(%rip), %rsi
    000011ad: 	movq	%rbp, %rdi
    000011b0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4528
    000011b5: 	movq	%rbp, %r8
    000011b8: 	leaq	_Z9logic_or3IlEbPKT_ib(%rip), %rcx
    000011bf: 	xorl	%edx, %edx
    000011c1: 	movq	%r12, %rdi
    000011c4: 	movl	$0x1f40, %esi
    000011c9: 	callq	_Z23testOneFunction_logicalIlPFbPKlibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4553
    000011ce: 	movq	0xc0(%rsp), %rdi
    000011d6: 	cmpq	%rbx, %rdi
    000011d9: 	je	.Ltmp3063 # Offset: 4569
    000011db: 	movq	0xd0(%rsp), %rax
    000011e3: 	leaq	0x1(%rax), %rsi
    000011e7: 	callq	_ZdlPvm@PLT # Offset: 4583
.Ltmp3063:
    000011ec: 	movq	0x20(%rsp), %r15
    000011f1: 	movq	0x28(%rsp), %r14
    000011f6: 	movq	%rbx, 0xc0(%rsp)
    000011fe: 	movq	%r15, %rax
    00001201: 	addq	%r14, %rax
    00001204: 	je	.Ltmp3064 # Offset: 4612
    00001206: 	testq	%r15, %r15
    00001209: 	je	.Ltmp3065 # Offset: 4617
.Ltmp3064:
    0000120f: 	movq	%r14, 0x18(%rsp)
    00001214: 	cmpq	$0xf, %r14
    00001218: 	ja	.Ltmp3066 # Offset: 4632
    0000121e: 	cmpq	$0x1, %r14
    00001222: 	jne	.Ltmp3067 # Offset: 4642
    00001228: 	movzbl	(%r15), %eax
    0000122c: 	movb	%al, 0xd0(%rsp)
    00001233: 	movq	%rbx, %rax
.Ltmp3130:
    00001236: 	movq	%r14, 0xc8(%rsp)
    0000123e: 	movb	$0x0, (%rax,%r14)
    00001243: 	movabsq	$0x3fffffffffffffff, %rax
    0000124d: 	subq	0xc8(%rsp), %rax
    00001255: 	cmpq	$0x14, %rax
    00001259: 	jbe	.Ltmp3068 # Offset: 4697
    0000125f: 	movl	$0x15, %edx
    00001264: 	leaq	DATAat0x334fa(%rip), %rsi
    0000126b: 	movq	%rbp, %rdi
    0000126e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4718
    00001273: 	movq	%rbp, %r8
    00001276: 	leaq	_Z9logic_or4IlEbPKT_ib(%rip), %rcx
    0000127d: 	xorl	%edx, %edx
    0000127f: 	movq	%r12, %rdi
    00001282: 	movl	$0x1f40, %esi
    00001287: 	callq	_Z23testOneFunction_logicalIlPFbPKlibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4743
    0000128c: 	movq	0xc0(%rsp), %rdi
    00001294: 	cmpq	%rbx, %rdi
    00001297: 	je	.Ltmp3069 # Offset: 4759
    00001299: 	movq	0xd0(%rsp), %rax
    000012a1: 	leaq	0x1(%rax), %rsi
    000012a5: 	callq	_ZdlPvm@PLT # Offset: 4773
.Ltmp3069:
    000012aa: 	movq	0x20(%rsp), %r15
    000012af: 	movq	0x28(%rsp), %r14
    000012b4: 	movq	%rbx, 0xc0(%rsp)
    000012bc: 	movq	%r15, %rax
    000012bf: 	addq	%r14, %rax
    000012c2: 	je	.Ltmp3070 # Offset: 4802
    000012c4: 	testq	%r15, %r15
    000012c7: 	je	.Ltmp3071 # Offset: 4807
.Ltmp3070:
    000012cd: 	movq	%r14, 0x18(%rsp)
    000012d2: 	cmpq	$0xf, %r14
    000012d6: 	ja	.Ltmp3072 # Offset: 4822
    000012dc: 	cmpq	$0x1, %r14
    000012e0: 	jne	.Ltmp3073 # Offset: 4832
    000012e6: 	movzbl	(%r15), %eax
    000012ea: 	movb	%al, 0xd0(%rsp)
    000012f1: 	movq	%rbx, %rax
.Ltmp3138:
    000012f4: 	movq	%r14, 0xc8(%rsp)
    000012fc: 	movb	$0x0, (%rax,%r14)
    00001301: 	movabsq	$0x3fffffffffffffff, %rax
    0000130b: 	subq	0xc8(%rsp), %rax
    00001313: 	cmpq	$0x14, %rax
    00001317: 	jbe	.Ltmp3074 # Offset: 4887
    0000131d: 	movl	$0x15, %edx
    00001322: 	leaq	DATAat0x33510(%rip), %rsi
    00001329: 	movq	%rbp, %rdi
    0000132c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4908
    00001331: 	movq	%rbp, %r8
    00001334: 	leaq	_Z9logic_or5IlEbPKT_ib(%rip), %rcx
    0000133b: 	xorl	%edx, %edx
    0000133d: 	movq	%r12, %rdi
    00001340: 	movl	$0x1f40, %esi
    00001345: 	callq	_Z23testOneFunction_logicalIlPFbPKlibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4933
    0000134a: 	movq	0xc0(%rsp), %rdi
    00001352: 	cmpq	%rbx, %rdi
    00001355: 	je	.Ltmp3075 # Offset: 4949
    00001357: 	movq	0xd0(%rsp), %rax
    0000135f: 	leaq	0x1(%rax), %rsi
    00001363: 	callq	_ZdlPvm@PLT # Offset: 4963
.Ltmp3075:
    00001368: 	movq	0x20(%rsp), %r15
    0000136d: 	movq	0x28(%rsp), %r14
    00001372: 	movq	%rbx, 0xc0(%rsp)
    0000137a: 	movq	%r15, %rax
    0000137d: 	addq	%r14, %rax
    00001380: 	je	.Ltmp3076 # Offset: 4992
    00001382: 	testq	%r15, %r15
    00001385: 	je	.Ltmp3077 # Offset: 4997
.Ltmp3076:
    0000138b: 	movq	%r14, 0x18(%rsp)
    00001390: 	cmpq	$0xf, %r14
    00001394: 	ja	.Ltmp3078 # Offset: 5012
    0000139a: 	cmpq	$0x1, %r14
    0000139e: 	jne	.Ltmp3079 # Offset: 5022
    000013a4: 	movzbl	(%r15), %eax
    000013a8: 	movb	%al, 0xd0(%rsp)
    000013af: 	movq	%rbx, %rax
.Ltmp3136:
    000013b2: 	movq	%r14, 0xc8(%rsp)
    000013ba: 	movb	$0x0, (%rax,%r14)
    000013bf: 	movabsq	$0x3fffffffffffffff, %rax
    000013c9: 	subq	0xc8(%rsp), %rax
    000013d1: 	cmpq	$0x14, %rax
    000013d5: 	jbe	.Ltmp3080 # Offset: 5077
    000013db: 	movl	$0x15, %edx
    000013e0: 	leaq	DATAat0x33526(%rip), %rsi
    000013e7: 	movq	%rbp, %rdi
    000013ea: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5098
    000013ef: 	movq	%rbp, %r8
    000013f2: 	leaq	_Z9logic_or6IlEbPKT_ib(%rip), %rcx
    000013f9: 	xorl	%edx, %edx
    000013fb: 	movq	%r12, %rdi
    000013fe: 	movl	$0x1f40, %esi
    00001403: 	callq	_Z23testOneFunction_logicalIlPFbPKlibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5123
    00001408: 	movq	0xc0(%rsp), %rdi
    00001410: 	cmpq	%rbx, %rdi
    00001413: 	je	.Ltmp3081 # Offset: 5139
    00001415: 	movq	0xd0(%rsp), %rax
    0000141d: 	leaq	0x1(%rax), %rsi
    00001421: 	callq	_ZdlPvm@PLT # Offset: 5153
.Ltmp3081:
    00001426: 	movq	0x20(%rsp), %r15
    0000142b: 	movq	0x28(%rsp), %r14
    00001430: 	movq	%rbx, 0xc0(%rsp)
    00001438: 	movq	%r15, %rax
    0000143b: 	addq	%r14, %rax
    0000143e: 	je	.Ltmp3082 # Offset: 5182
    00001440: 	testq	%r15, %r15
    00001443: 	je	.Ltmp3083 # Offset: 5187
.Ltmp3082:
    00001449: 	movq	%r14, 0x18(%rsp)
    0000144e: 	cmpq	$0xf, %r14
    00001452: 	ja	.Ltmp3084 # Offset: 5202
    00001458: 	cmpq	$0x1, %r14
    0000145c: 	jne	.Ltmp3085 # Offset: 5212
    00001462: 	movzbl	(%r15), %eax
    00001466: 	movb	%al, 0xd0(%rsp)
    0000146d: 	movq	%rbx, %rax
.Ltmp3134:
    00001470: 	movq	%r14, 0xc8(%rsp)
    00001478: 	movb	$0x0, (%rax,%r14)
    0000147d: 	movabsq	$0x3fffffffffffffff, %rax
    00001487: 	subq	0xc8(%rsp), %rax
    0000148f: 	cmpq	$0x14, %rax
    00001493: 	jbe	.Ltmp3086 # Offset: 5267
    00001499: 	movl	$0x15, %edx
    0000149e: 	leaq	DATAat0x3353c(%rip), %rsi
    000014a5: 	movq	%rbp, %rdi
    000014a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5288
    000014ad: 	movq	%rbp, %r8
    000014b0: 	leaq	_Z9logic_or7IlEbPKT_ib(%rip), %rcx
    000014b7: 	xorl	%edx, %edx
    000014b9: 	movq	%r12, %rdi
    000014bc: 	movl	$0x1f40, %esi
    000014c1: 	callq	_Z23testOneFunction_logicalIlPFbPKlibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5313
    000014c6: 	movq	0xc0(%rsp), %rdi
    000014ce: 	cmpq	%rbx, %rdi
    000014d1: 	je	.Ltmp3087 # Offset: 5329
    000014d3: 	movq	0xd0(%rsp), %rax
    000014db: 	leaq	0x1(%rax), %rsi
    000014df: 	callq	_ZdlPvm@PLT # Offset: 5343
.Ltmp3087:
    000014e4: 	leaq	DATAat0x33552(%rip), %rdx
    000014eb: 	movq	%r13, %rsi
    000014ee: 	movq	%rbp, %rdi
    000014f1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5361
    000014f6: 	movq	%rbp, %r8
    000014f9: 	leaq	_Z9logic_or8IlEbPKT_ib(%rip), %rcx
    00001500: 	xorl	%edx, %edx
    00001502: 	movq	%r12, %rdi
    00001505: 	movl	$0x1f40, %esi
    0000150a: 	callq	_Z23testOneFunction_logicalIlPFbPKlibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5386
    0000150f: 	movq	0xc0(%rsp), %rdi
    00001517: 	cmpq	%rbx, %rdi
    0000151a: 	je	.Ltmp3088 # Offset: 5402
    0000151c: 	movq	0xd0(%rsp), %rax
    00001524: 	leaq	0x1(%rax), %rsi
    00001528: 	callq	_ZdlPvm@PLT # Offset: 5416
.Ltmp3088:
    0000152d: 	movq	0x20(%rsp), %r14
    00001532: 	movq	0x28(%rsp), %r13
    00001537: 	movq	%rbx, 0xc0(%rsp)
    0000153f: 	movq	%r14, %rax
    00001542: 	addq	%r13, %rax
    00001545: 	je	.Ltmp3089 # Offset: 5445
    00001547: 	testq	%r14, %r14
    0000154a: 	je	.Ltmp3090 # Offset: 5450
.Ltmp3089:
    00001550: 	movq	%r13, 0x18(%rsp)
    00001555: 	cmpq	$0xf, %r13
    00001559: 	ja	.Ltmp3091 # Offset: 5465
    0000155f: 	cmpq	$0x1, %r13
    00001563: 	jne	.Ltmp3092 # Offset: 5475
    00001569: 	movzbl	(%r14), %eax
    0000156d: 	movb	%al, 0xd0(%rsp)
    00001574: 	movq	%rbx, %rax
.Ltmp3132:
    00001577: 	movq	%r13, 0xc8(%rsp)
    0000157f: 	movb	$0x0, (%rax,%r13)
    00001584: 	movabsq	$0x3fffffffffffffff, %rax
    0000158e: 	subq	0xc8(%rsp), %rax
    00001596: 	cmpq	$0x13, %rax
    0000159a: 	jbe	.Ltmp3093 # Offset: 5530
    000015a0: 	movl	$0x14, %edx
    000015a5: 	leaq	DATAat0x33568(%rip), %rsi
    000015ac: 	movq	%rbp, %rdi
    000015af: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5551
    000015b4: 	movl	iterations(%rip), %esi
    000015ba: 	movq	0xc0(%rsp), %rdi
    000015c2: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 5570
    000015c7: 	movq	0xc0(%rsp), %rdi
    000015cf: 	cmpq	%rbx, %rdi
    000015d2: 	je	.Ltmp3094 # Offset: 5586
    000015d4: 	movq	0xd0(%rsp), %rax
    000015dc: 	leaq	0x1(%rax), %rsi
    000015e0: 	callq	_ZdlPvm@PLT # Offset: 5600
.Ltmp3094:
    000015e5: 	movq	0xa0(%rsp), %rdi
    000015ed: 	cmpq	(%rsp), %rdi
    000015f1: 	je	.Ltmp3095 # Offset: 5617
    000015f3: 	movq	0xb0(%rsp), %rax
    000015fb: 	leaq	0x1(%rax), %rsi
    000015ff: 	callq	_ZdlPvm@PLT # Offset: 5631
.Ltmp3095:
    00001604: 	movq	0x80(%rsp), %rdi
    0000160c: 	leaq	0x90(%rsp), %rax
    00001614: 	cmpq	%rax, %rdi
    00001617: 	je	.Ltmp3096 # Offset: 5655
    00001619: 	movq	0x90(%rsp), %rax
    00001621: 	leaq	0x1(%rax), %rsi
    00001625: 	callq	_ZdlPvm@PLT # Offset: 5669
.Ltmp3096:
    0000162a: 	movq	0x60(%rsp), %rdi
    0000162f: 	leaq	0x70(%rsp), %rax
    00001634: 	cmpq	%rax, %rdi
    00001637: 	je	.Ltmp3097 # Offset: 5687
    00001639: 	movq	0x70(%rsp), %rax
    0000163e: 	leaq	0x1(%rax), %rsi
    00001642: 	callq	_ZdlPvm@PLT # Offset: 5698
.Ltmp3097:
    00001647: 	movq	0x40(%rsp), %rdi
    0000164c: 	leaq	0x50(%rsp), %rax
    00001651: 	cmpq	%rax, %rdi
    00001654: 	je	.Ltmp3098 # Offset: 5716
    00001656: 	movq	0x50(%rsp), %rax
    0000165b: 	leaq	0x1(%rax), %rsi
    0000165f: 	callq	_ZdlPvm@PLT # Offset: 5727
.Ltmp3098:
    00001664: 	movq	%r12, %rdi
    00001667: 	movl	$0x8, %esi
    0000166c: 	callq	_ZdlPvm@PLT # Offset: 5740
    00001671: 	movq	0x20(%rsp), %rdi
    00001676: 	cmpq	0x8(%rsp), %rdi
    0000167b: 	je	.Ltmp3099 # Offset: 5755
    0000167d: 	movq	0x30(%rsp), %rax
    00001682: 	leaq	0x1(%rax), %rsi
    00001686: 	callq	_ZdlPvm@PLT # Offset: 5766
.Ltmp3099:
    0000168b: 	movq	0xe8(%rsp), %rax
    00001693: 	subq	%fs:0x28, %rax
    0000169c: 	jne	.Ltmp3100 # Offset: 5788
    000016a2: 	addq	$0xf8, %rsp
    000016a9: 	popq	%rbx
    000016aa: 	popq	%rbp
    000016ab: 	popq	%r12
    000016ad: 	popq	%r13
    000016af: 	popq	%r14
    000016b1: 	popq	%r15
    000016b3: 	retq # Offset: 5811
    000016b4: 	nopl	(%rax) # Size: 4
.Ltmp2961:
    000016b8: 	testq	%r13, %r13
    000016bb: 	jne	.Ltmp3101 # Offset: 5819
    000016c1: 	movq	%rbx, %rax
    000016c4: 	jmp	.Ltmp3102 # Offset: 5828
    000016c9: 	nopl	(%rax) # Size: 7
.Ltmp2976:
    000016d0: 	testq	%r14, %r14
    000016d3: 	jne	.Ltmp3103 # Offset: 5843
    000016d9: 	movq	%rbx, %rax
    000016dc: 	jmp	.Ltmp3104 # Offset: 5852
    000016e1: 	nopl	(%rax) # Size: 7
.Ltmp2970:
    000016e8: 	testq	%r14, %r14
    000016eb: 	jne	.Ltmp3105 # Offset: 5867
    000016f1: 	movq	%rbx, %rax
    000016f4: 	jmp	.Ltmp3106 # Offset: 5876
    000016f9: 	nopl	(%rax) # Size: 7
.Ltmp2983:
    00001700: 	testq	%r14, %r14
    00001703: 	jne	.Ltmp3107 # Offset: 5891
    00001709: 	movq	%rbx, %rax
    0000170c: 	jmp	.Ltmp3108 # Offset: 5900
    00001711: 	nopl	(%rax) # Size: 7
.Ltmp2991:
    00001718: 	testq	%r14, %r14
    0000171b: 	jne	.Ltmp3109 # Offset: 5915
    00001721: 	movq	%rbx, %rax
    00001724: 	jmp	.Ltmp3110 # Offset: 5924
    00001729: 	nopl	(%rax) # Size: 7
.Ltmp3011:
    00001730: 	testq	%r14, %r14
    00001733: 	jne	.Ltmp3111 # Offset: 5939
    00001739: 	movq	%rbx, %rax
    0000173c: 	jmp	.Ltmp3112 # Offset: 5948
    00001741: 	nopl	(%rax) # Size: 7
.Ltmp3000:
    00001748: 	testq	%r14, %r14
    0000174b: 	jne	.Ltmp3113 # Offset: 5963
    00001751: 	movq	%rbx, %rax
    00001754: 	jmp	.Ltmp3114 # Offset: 5972
    00001759: 	nopl	(%rax) # Size: 7
.Ltmp3029:
    00001760: 	testq	%r14, %r14
    00001763: 	jne	.Ltmp3115 # Offset: 5987
    00001769: 	movq	%rbx, %rax
    0000176c: 	jmp	.Ltmp3116 # Offset: 5996
    00001771: 	nopl	(%rax) # Size: 7
.Ltmp3020:
    00001778: 	testq	%r14, %r14
    0000177b: 	jne	.Ltmp3117 # Offset: 6011
    00001781: 	movq	%rbx, %rax
    00001784: 	jmp	.Ltmp3118 # Offset: 6020
    00001789: 	nopl	(%rax) # Size: 7
.Ltmp3041:
    00001790: 	testq	%r14, %r14
    00001793: 	jne	.Ltmp3119 # Offset: 6035
    00001799: 	movq	%rbx, %rax
    0000179c: 	jmp	.Ltmp3120 # Offset: 6044
    000017a1: 	nopl	(%rax) # Size: 7
.Ltmp3035:
    000017a8: 	testq	%r14, %r14
    000017ab: 	jne	.Ltmp3121 # Offset: 6059
    000017b1: 	movq	%rbx, %rax
    000017b4: 	jmp	.Ltmp3122 # Offset: 6068
    000017b9: 	nopl	(%rax) # Size: 7
.Ltmp3061:
    000017c0: 	testq	%r14, %r14
    000017c3: 	jne	.Ltmp3123 # Offset: 6083
    000017c9: 	movq	%rbx, %rax
    000017cc: 	jmp	.Ltmp3124 # Offset: 6092
    000017d1: 	nopl	(%rax) # Size: 7
.Ltmp3055:
    000017d8: 	testq	%r14, %r14
    000017db: 	jne	.Ltmp3125 # Offset: 6107
    000017e1: 	movq	%rbx, %rax
    000017e4: 	jmp	.Ltmp3126 # Offset: 6116
    000017e9: 	nopl	(%rax) # Size: 7
.Ltmp3048:
    000017f0: 	testq	%r14, %r14
    000017f3: 	jne	.Ltmp3127 # Offset: 6131
    000017f9: 	movq	(%rsp), %rax
    000017fd: 	jmp	.Ltmp3128 # Offset: 6141
    00001802: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3067:
    00001808: 	testq	%r14, %r14
    0000180b: 	jne	.Ltmp3129 # Offset: 6155
    00001811: 	movq	%rbx, %rax
    00001814: 	jmp	.Ltmp3130 # Offset: 6164
    00001819: 	nopl	(%rax) # Size: 7
.Ltmp3092:
    00001820: 	testq	%r13, %r13
    00001823: 	jne	.Ltmp3131 # Offset: 6179
    00001829: 	movq	%rbx, %rax
    0000182c: 	jmp	.Ltmp3132 # Offset: 6188
    00001831: 	nopl	(%rax) # Size: 7
.Ltmp3085:
    00001838: 	testq	%r14, %r14
    0000183b: 	jne	.Ltmp3133 # Offset: 6203
    00001841: 	movq	%rbx, %rax
    00001844: 	jmp	.Ltmp3134 # Offset: 6212
    00001849: 	nopl	(%rax) # Size: 7
.Ltmp3079:
    00001850: 	testq	%r14, %r14
    00001853: 	jne	.Ltmp3135 # Offset: 6227
    00001859: 	movq	%rbx, %rax
    0000185c: 	jmp	.Ltmp3136 # Offset: 6236
    00001861: 	nopl	(%rax) # Size: 7
.Ltmp3073:
    00001868: 	testq	%r14, %r14
    0000186b: 	jne	.Ltmp3137 # Offset: 6251
    00001871: 	movq	%rbx, %rax
    00001874: 	jmp	.Ltmp3138 # Offset: 6260
    00001879: 	nopl	(%rax) # Size: 7
.Ltmp2969:
    00001880: 	leaq	0x18(%rsp), %rsi
    00001885: 	xorl	%edx, %edx
    00001887: 	movq	%rbp, %rdi
    0000188a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6282
    0000188f: 	movq	%rax, 0xc0(%rsp)
    00001897: 	movq	%rax, %rdi
    0000189a: 	movq	0x18(%rsp), %rax
    0000189f: 	movq	%rax, 0xd0(%rsp)
.Ltmp3141:
    000018a7: 	movq	%r14, %rdx
    000018aa: 	movq	%r15, %rsi
    000018ad: 	callq	memcpy@PLT # Offset: 6317
    000018b2: 	movq	0x18(%rsp), %r14
    000018b7: 	movq	0xc0(%rsp), %rax
    000018bf: 	jmp	.Ltmp3106 # Offset: 6335
    000018c4: 	nopl	(%rax) # Size: 4
.Ltmp2960:
    000018c8: 	leaq	0x18(%rsp), %rsi
    000018cd: 	leaq	0xc0(%rsp), %rdi
    000018d5: 	xorl	%edx, %edx
    000018d7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6359
    000018dc: 	movq	%rax, 0xc0(%rsp)
    000018e4: 	movq	%rax, %rdi
    000018e7: 	movq	0x18(%rsp), %rax
    000018ec: 	movq	%rax, 0xd0(%rsp)
.Ltmp3139:
    000018f4: 	movq	%r13, %rdx
    000018f7: 	movq	%rbp, %rsi
    000018fa: 	callq	memcpy@PLT # Offset: 6394
    000018ff: 	movq	0x18(%rsp), %r13
    00001904: 	movq	0xc0(%rsp), %rax
    0000190c: 	jmp	.Ltmp3102 # Offset: 6412
    00001911: 	nopl	(%rax) # Size: 7
.Ltmp2975:
    00001918: 	leaq	0x18(%rsp), %rsi
    0000191d: 	xorl	%edx, %edx
    0000191f: 	movq	%rbp, %rdi
    00001922: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6434
    00001927: 	movq	%rax, 0xc0(%rsp)
    0000192f: 	movq	%rax, %rdi
    00001932: 	movq	0x18(%rsp), %rax
    00001937: 	movq	%rax, 0xd0(%rsp)
.Ltmp3140:
    0000193f: 	movq	%r14, %rdx
    00001942: 	movq	%r15, %rsi
    00001945: 	callq	memcpy@PLT # Offset: 6469
    0000194a: 	movq	0x18(%rsp), %r14
    0000194f: 	movq	0xc0(%rsp), %rax
    00001957: 	jmp	.Ltmp3104 # Offset: 6487
    0000195c: 	nopl	(%rax) # Size: 4
.Ltmp2982:
    00001960: 	leaq	0x18(%rsp), %rsi
    00001965: 	xorl	%edx, %edx
    00001967: 	movq	%rbp, %rdi
    0000196a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6506
    0000196f: 	movq	%rax, 0xc0(%rsp)
    00001977: 	movq	%rax, %rdi
    0000197a: 	movq	0x18(%rsp), %rax
    0000197f: 	movq	%rax, 0xd0(%rsp)
.Ltmp3142:
    00001987: 	movq	%r14, %rdx
    0000198a: 	movq	%r15, %rsi
    0000198d: 	callq	memcpy@PLT # Offset: 6541
    00001992: 	movq	0x18(%rsp), %r14
    00001997: 	movq	0xc0(%rsp), %rax
    0000199f: 	jmp	.Ltmp3108 # Offset: 6559
    000019a4: 	nopl	(%rax) # Size: 4
.Ltmp2990:
    000019a8: 	leaq	0x18(%rsp), %rsi
    000019ad: 	xorl	%edx, %edx
    000019af: 	movq	%rbp, %rdi
    000019b2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6578
    000019b7: 	movq	%rax, 0xc0(%rsp)
    000019bf: 	movq	%rax, %rdi
    000019c2: 	movq	0x18(%rsp), %rax
    000019c7: 	movq	%rax, 0xd0(%rsp)
.Ltmp3143:
    000019cf: 	movq	%r14, %rdx
    000019d2: 	movq	%r15, %rsi
    000019d5: 	callq	memcpy@PLT # Offset: 6613
    000019da: 	movq	0x18(%rsp), %r14
    000019df: 	movq	0xc0(%rsp), %rax
    000019e7: 	jmp	.Ltmp3110 # Offset: 6631
    000019ec: 	nopl	(%rax) # Size: 4
.Ltmp3010:
    000019f0: 	leaq	0x18(%rsp), %rsi
    000019f5: 	xorl	%edx, %edx
    000019f7: 	movq	%rbp, %rdi
    000019fa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6650
    000019ff: 	movq	%rax, 0xc0(%rsp)
    00001a07: 	movq	%rax, %rdi
    00001a0a: 	movq	0x18(%rsp), %rax
    00001a0f: 	movq	%rax, 0xd0(%rsp)
.Ltmp3144:
    00001a17: 	movq	%r14, %rdx
    00001a1a: 	movq	%r15, %rsi
    00001a1d: 	callq	memcpy@PLT # Offset: 6685
    00001a22: 	movq	0x18(%rsp), %r14
    00001a27: 	movq	0xc0(%rsp), %rax
    00001a2f: 	jmp	.Ltmp3112 # Offset: 6703
    00001a34: 	nopl	(%rax) # Size: 4
.Ltmp2999:
    00001a38: 	leaq	0x18(%rsp), %rsi
    00001a3d: 	xorl	%edx, %edx
    00001a3f: 	movq	%rbp, %rdi
    00001a42: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6722
    00001a47: 	movq	%rax, 0xc0(%rsp)
    00001a4f: 	movq	%rax, %rdi
    00001a52: 	movq	0x18(%rsp), %rax
    00001a57: 	movq	%rax, 0xd0(%rsp)
.Ltmp3145:
    00001a5f: 	movq	%r14, %rdx
    00001a62: 	movq	%r15, %rsi
    00001a65: 	callq	memcpy@PLT # Offset: 6757
    00001a6a: 	movq	0x18(%rsp), %r14
    00001a6f: 	movq	0xc0(%rsp), %rax
    00001a77: 	jmp	.Ltmp3114 # Offset: 6775
    00001a7c: 	nopl	(%rax) # Size: 4
.Ltmp3019:
    00001a80: 	leaq	0x18(%rsp), %rsi
    00001a85: 	xorl	%edx, %edx
    00001a87: 	movq	%rbp, %rdi
    00001a8a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6794
    00001a8f: 	movq	%rax, 0xc0(%rsp)
    00001a97: 	movq	%rax, %rdi
    00001a9a: 	movq	0x18(%rsp), %rax
    00001a9f: 	movq	%rax, 0xd0(%rsp)
.Ltmp3147:
    00001aa7: 	movq	%r14, %rdx
    00001aaa: 	movq	%r15, %rsi
    00001aad: 	callq	memcpy@PLT # Offset: 6829
    00001ab2: 	movq	0x18(%rsp), %r14
    00001ab7: 	movq	0xc0(%rsp), %rax
    00001abf: 	jmp	.Ltmp3118 # Offset: 6847
    00001ac4: 	nopl	(%rax) # Size: 4
.Ltmp3040:
    00001ac8: 	leaq	0x18(%rsp), %rsi
    00001acd: 	xorl	%edx, %edx
    00001acf: 	movq	%rbp, %rdi
    00001ad2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6866
    00001ad7: 	movq	%rax, 0xc0(%rsp)
    00001adf: 	movq	%rax, %rdi
    00001ae2: 	movq	0x18(%rsp), %rax
    00001ae7: 	movq	%rax, 0xd0(%rsp)
.Ltmp3148:
    00001aef: 	movq	%r14, %rdx
    00001af2: 	movq	%r15, %rsi
    00001af5: 	callq	memcpy@PLT # Offset: 6901
    00001afa: 	movq	0x18(%rsp), %r14
    00001aff: 	movq	0xc0(%rsp), %rax
    00001b07: 	jmp	.Ltmp3120 # Offset: 6919
    00001b0c: 	nopl	(%rax) # Size: 4
.Ltmp3028:
    00001b10: 	leaq	0x18(%rsp), %rsi
    00001b15: 	xorl	%edx, %edx
    00001b17: 	movq	%rbp, %rdi
    00001b1a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6938
    00001b1f: 	movq	%rax, 0xc0(%rsp)
    00001b27: 	movq	%rax, %rdi
    00001b2a: 	movq	0x18(%rsp), %rax
    00001b2f: 	movq	%rax, 0xd0(%rsp)
.Ltmp3146:
    00001b37: 	movq	%r14, %rdx
    00001b3a: 	movq	%r15, %rsi
    00001b3d: 	callq	memcpy@PLT # Offset: 6973
    00001b42: 	movq	0x18(%rsp), %r14
    00001b47: 	movq	0xc0(%rsp), %rax
    00001b4f: 	jmp	.Ltmp3116 # Offset: 6991
    00001b54: 	nopl	(%rax) # Size: 4
.Ltmp3054:
    00001b58: 	leaq	0x18(%rsp), %rsi
    00001b5d: 	xorl	%edx, %edx
    00001b5f: 	movq	%rbp, %rdi
    00001b62: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7010
    00001b67: 	movq	%rax, 0xc0(%rsp)
    00001b6f: 	movq	%rax, %rdi
    00001b72: 	movq	0x18(%rsp), %rax
    00001b77: 	movq	%rax, 0xd0(%rsp)
.Ltmp3151:
    00001b7f: 	movq	%r14, %rdx
    00001b82: 	movq	%r15, %rsi
    00001b85: 	callq	memcpy@PLT # Offset: 7045
    00001b8a: 	movq	0x18(%rsp), %r14
    00001b8f: 	movq	0xc0(%rsp), %rax
    00001b97: 	jmp	.Ltmp3126 # Offset: 7063
    00001b9c: 	nopl	(%rax) # Size: 4
.Ltmp3047:
    00001ba0: 	leaq	0x18(%rsp), %rsi
    00001ba5: 	leaq	0xa0(%rsp), %rdi
    00001bad: 	xorl	%edx, %edx
    00001baf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7087
    00001bb4: 	movq	%rax, 0xa0(%rsp)
    00001bbc: 	movq	%rax, %rdi
    00001bbf: 	movq	0x18(%rsp), %rax
    00001bc4: 	movq	%rax, 0xb0(%rsp)
.Ltmp3152:
    00001bcc: 	movq	%r14, %rdx
    00001bcf: 	movq	%r15, %rsi
    00001bd2: 	callq	memcpy@PLT # Offset: 7122
    00001bd7: 	movq	0x18(%rsp), %r14
    00001bdc: 	movq	0xa0(%rsp), %rax
    00001be4: 	jmp	.Ltmp3128 # Offset: 7140
    00001be9: 	nopl	(%rax) # Size: 7
.Ltmp3034:
    00001bf0: 	leaq	0x18(%rsp), %rsi
    00001bf5: 	xorl	%edx, %edx
    00001bf7: 	movq	%rbp, %rdi
    00001bfa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7162
    00001bff: 	movq	%rax, 0xc0(%rsp)
    00001c07: 	movq	%rax, %rdi
    00001c0a: 	movq	0x18(%rsp), %rax
    00001c0f: 	movq	%rax, 0xd0(%rsp)
.Ltmp3149:
    00001c17: 	movq	%r14, %rdx
    00001c1a: 	movq	%r15, %rsi
    00001c1d: 	callq	memcpy@PLT # Offset: 7197
    00001c22: 	movq	0x18(%rsp), %r14
    00001c27: 	movq	0xc0(%rsp), %rax
    00001c2f: 	jmp	.Ltmp3122 # Offset: 7215
    00001c34: 	nopl	(%rax) # Size: 4
.Ltmp3060:
    00001c38: 	leaq	0x18(%rsp), %rsi
    00001c3d: 	xorl	%edx, %edx
    00001c3f: 	movq	%rbp, %rdi
    00001c42: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7234
    00001c47: 	movq	%rax, 0xc0(%rsp)
    00001c4f: 	movq	%rax, %rdi
    00001c52: 	movq	0x18(%rsp), %rax
    00001c57: 	movq	%rax, 0xd0(%rsp)
.Ltmp3150:
    00001c5f: 	movq	%r14, %rdx
    00001c62: 	movq	%r15, %rsi
    00001c65: 	callq	memcpy@PLT # Offset: 7269
    00001c6a: 	movq	0x18(%rsp), %r14
    00001c6f: 	movq	0xc0(%rsp), %rax
    00001c77: 	jmp	.Ltmp3124 # Offset: 7287
    00001c7c: 	nopl	(%rax) # Size: 4
.Ltmp3072:
    00001c80: 	leaq	0x18(%rsp), %rsi
    00001c85: 	xorl	%edx, %edx
    00001c87: 	movq	%rbp, %rdi
    00001c8a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7306
    00001c8f: 	movq	%rax, 0xc0(%rsp)
    00001c97: 	movq	%rax, %rdi
    00001c9a: 	movq	0x18(%rsp), %rax
    00001c9f: 	movq	%rax, 0xd0(%rsp)
.Ltmp3157:
    00001ca7: 	movq	%r14, %rdx
    00001caa: 	movq	%r15, %rsi
    00001cad: 	callq	memcpy@PLT # Offset: 7341
    00001cb2: 	movq	0x18(%rsp), %r14
    00001cb7: 	movq	0xc0(%rsp), %rax
    00001cbf: 	jmp	.Ltmp3138 # Offset: 7359
    00001cc4: 	nopl	(%rax) # Size: 4
.Ltmp3066:
    00001cc8: 	leaq	0x18(%rsp), %rsi
    00001ccd: 	xorl	%edx, %edx
    00001ccf: 	movq	%rbp, %rdi
    00001cd2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7378
    00001cd7: 	movq	%rax, 0xc0(%rsp)
    00001cdf: 	movq	%rax, %rdi
    00001ce2: 	movq	0x18(%rsp), %rax
    00001ce7: 	movq	%rax, 0xd0(%rsp)
.Ltmp3153:
    00001cef: 	movq	%r14, %rdx
    00001cf2: 	movq	%r15, %rsi
    00001cf5: 	callq	memcpy@PLT # Offset: 7413
    00001cfa: 	movq	0x18(%rsp), %r14
    00001cff: 	movq	0xc0(%rsp), %rax
    00001d07: 	jmp	.Ltmp3130 # Offset: 7431
    00001d0c: 	nopl	(%rax) # Size: 4
.Ltmp3091:
    00001d10: 	leaq	0x18(%rsp), %rsi
    00001d15: 	xorl	%edx, %edx
    00001d17: 	movq	%rbp, %rdi
    00001d1a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7450
    00001d1f: 	movq	%rax, 0xc0(%rsp)
    00001d27: 	movq	%rax, %rdi
    00001d2a: 	movq	0x18(%rsp), %rax
    00001d2f: 	movq	%rax, 0xd0(%rsp)
.Ltmp3154:
    00001d37: 	movq	%r13, %rdx
    00001d3a: 	movq	%r14, %rsi
    00001d3d: 	callq	memcpy@PLT # Offset: 7485
    00001d42: 	movq	0x18(%rsp), %r13
    00001d47: 	movq	0xc0(%rsp), %rax
    00001d4f: 	jmp	.Ltmp3132 # Offset: 7503
    00001d54: 	nopl	(%rax) # Size: 4
.Ltmp3084:
    00001d58: 	leaq	0x18(%rsp), %rsi
    00001d5d: 	xorl	%edx, %edx
    00001d5f: 	movq	%rbp, %rdi
    00001d62: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7522
    00001d67: 	movq	%rax, 0xc0(%rsp)
    00001d6f: 	movq	%rax, %rdi
    00001d72: 	movq	0x18(%rsp), %rax
    00001d77: 	movq	%rax, 0xd0(%rsp)
.Ltmp3155:
    00001d7f: 	movq	%r14, %rdx
    00001d82: 	movq	%r15, %rsi
    00001d85: 	callq	memcpy@PLT # Offset: 7557
    00001d8a: 	movq	0x18(%rsp), %r14
    00001d8f: 	movq	0xc0(%rsp), %rax
    00001d97: 	jmp	.Ltmp3134 # Offset: 7575
    00001d9c: 	nopl	(%rax) # Size: 4
.Ltmp3078:
    00001da0: 	leaq	0x18(%rsp), %rsi
    00001da5: 	xorl	%edx, %edx
    00001da7: 	movq	%rbp, %rdi
    00001daa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7594
    00001daf: 	movq	%rax, 0xc0(%rsp)
    00001db7: 	movq	%rax, %rdi
    00001dba: 	movq	0x18(%rsp), %rax
    00001dbf: 	movq	%rax, 0xd0(%rsp)
.Ltmp3156:
    00001dc7: 	movq	%r14, %rdx
    00001dca: 	movq	%r15, %rsi
    00001dcd: 	callq	memcpy@PLT # Offset: 7629
    00001dd2: 	movq	0x18(%rsp), %r14
    00001dd7: 	movq	0xc0(%rsp), %rax
    00001ddf: 	jmp	.Ltmp3136 # Offset: 7647
.Ltmp2962:
    00001de4: 	leaq	DATAat0x33182(%rip), %rdi
    00001deb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7659
.Ltmp2968:
    00001df0: 	leaq	DATAat0x33158(%rip), %rdi
    00001df7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7671
.Ltmp2971:
    00001dfc: 	leaq	DATAat0x33182(%rip), %rdi
    00001e03: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7683
.Ltmp2974:
    00001e08: 	leaq	DATAat0x33158(%rip), %rdi
    00001e0f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7695
.Ltmp2977:
    00001e14: 	leaq	DATAat0x33182(%rip), %rdi
    00001e1b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7707
.Ltmp2981:
    00001e20: 	leaq	DATAat0x33158(%rip), %rdi
    00001e27: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7719
.Ltmp2984:
    00001e2c: 	leaq	DATAat0x33182(%rip), %rdi
    00001e33: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7731
.Ltmp2989:
    00001e38: 	leaq	DATAat0x33158(%rip), %rdi
    00001e3f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7743
.Ltmp2992:
    00001e44: 	leaq	DATAat0x33182(%rip), %rdi
    00001e4b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7755
.Ltmp2998:
    00001e50: 	leaq	DATAat0x33158(%rip), %rdi
    00001e57: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7767
.Ltmp3001:
    00001e5c: 	leaq	DATAat0x33182(%rip), %rdi
    00001e63: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7779
.Ltmp3009:
    00001e68: 	leaq	DATAat0x33158(%rip), %rdi
    00001e6f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7791
.Ltmp3012:
    00001e74: 	leaq	DATAat0x33182(%rip), %rdi
    00001e7b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7803
.Ltmp3018:
    00001e80: 	leaq	DATAat0x33158(%rip), %rdi
    00001e87: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7815
.Ltmp3021:
    00001e8c: 	leaq	DATAat0x33182(%rip), %rdi
    00001e93: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7827
.Ltmp3027:
    00001e98: 	leaq	DATAat0x33158(%rip), %rdi
    00001e9f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7839
.Ltmp3030:
    00001ea4: 	leaq	DATAat0x33182(%rip), %rdi
    00001eab: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7851
.Ltmp3033:
    00001eb0: 	leaq	DATAat0x33158(%rip), %rdi
    00001eb7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7863
.Ltmp3036:
    00001ebc: 	leaq	DATAat0x33182(%rip), %rdi
    00001ec3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7875
.Ltmp3039:
    00001ec8: 	leaq	DATAat0x33158(%rip), %rdi
    00001ecf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7887
.Ltmp3042:
    00001ed4: 	leaq	DATAat0x33182(%rip), %rdi
    00001edb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7899
.Ltmp3046:
    00001ee0: 	leaq	DATAat0x33158(%rip), %rdi
    00001ee7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7911
.Ltmp3049:
    00001eec: 	leaq	DATAat0x33182(%rip), %rdi
    00001ef3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7923
.Ltmp3053:
    00001ef8: 	leaq	DATAat0x33158(%rip), %rdi
    00001eff: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7935
.Ltmp3056:
    00001f04: 	leaq	DATAat0x33182(%rip), %rdi
    00001f0b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7947
.Ltmp3059:
    00001f10: 	leaq	DATAat0x33158(%rip), %rdi
    00001f17: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7959
.Ltmp3062:
    00001f1c: 	leaq	DATAat0x33182(%rip), %rdi
    00001f23: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7971
.Ltmp3065:
    00001f28: 	leaq	DATAat0x33158(%rip), %rdi
    00001f2f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7983
.Ltmp3068:
    00001f34: 	leaq	DATAat0x33182(%rip), %rdi
    00001f3b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7995
.Ltmp3071:
    00001f40: 	leaq	DATAat0x33158(%rip), %rdi
    00001f47: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8007
.Ltmp3074:
    00001f4c: 	leaq	DATAat0x33182(%rip), %rdi
    00001f53: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8019
.Ltmp3077:
    00001f58: 	leaq	DATAat0x33158(%rip), %rdi
    00001f5f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8031
.Ltmp3080:
    00001f64: 	leaq	DATAat0x33182(%rip), %rdi
    00001f6b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8043
.Ltmp3083:
    00001f70: 	leaq	DATAat0x33158(%rip), %rdi
    00001f77: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8055
.Ltmp3086:
    00001f7c: 	leaq	DATAat0x33182(%rip), %rdi
    00001f83: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8067
.Ltmp3090:
    00001f88: 	leaq	DATAat0x33158(%rip), %rdi
    00001f8f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8079
.Ltmp3093:
    00001f94: 	leaq	DATAat0x33182(%rip), %rdi
    00001f9b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8091
.Ltmp3100:
    00001fa0: 	callq	__stack_chk_fail@PLT # Offset: 8096
.Ltmp3101:
    00001fa5: 	movq	%rbx, %rdi
    00001fa8: 	jmp	.Ltmp3139 # Offset: 8104
.Ltmp3103:
    00001fad: 	movq	%rbx, %rdi
    00001fb0: 	jmp	.Ltmp3140 # Offset: 8112
.Ltmp3105:
    00001fb5: 	movq	%rbx, %rdi
    00001fb8: 	jmp	.Ltmp3141 # Offset: 8120
.Ltmp3107:
    00001fbd: 	movq	%rbx, %rdi
    00001fc0: 	jmp	.Ltmp3142 # Offset: 8128
.Ltmp3109:
    00001fc5: 	movq	%rbx, %rdi
    00001fc8: 	jmp	.Ltmp3143 # Offset: 8136
.Ltmp3111:
    00001fcd: 	movq	%rbx, %rdi
    00001fd0: 	jmp	.Ltmp3144 # Offset: 8144
.Ltmp3113:
    00001fd5: 	movq	%rbx, %rdi
    00001fd8: 	jmp	.Ltmp3145 # Offset: 8152
.Ltmp3115:
    00001fdd: 	movq	%rbx, %rdi
    00001fe0: 	jmp	.Ltmp3146 # Offset: 8160
.Ltmp3117:
    00001fe5: 	movq	%rbx, %rdi
    00001fe8: 	jmp	.Ltmp3147 # Offset: 8168
.Ltmp3119:
    00001fed: 	movq	%rbx, %rdi
    00001ff0: 	jmp	.Ltmp3148 # Offset: 8176
.Ltmp3121:
    00001ff5: 	movq	%rbx, %rdi
    00001ff8: 	jmp	.Ltmp3149 # Offset: 8184
.Ltmp3123:
    00001ffd: 	movq	%rbx, %rdi
    00002000: 	jmp	.Ltmp3150 # Offset: 8192
.Ltmp3125:
    00002005: 	movq	%rbx, %rdi
    00002008: 	jmp	.Ltmp3151 # Offset: 8200
.Ltmp3127:
    0000200d: 	movq	(%rsp), %rdi
    00002011: 	jmp	.Ltmp3152 # Offset: 8209
.Ltmp3129:
    00002016: 	movq	%rbx, %rdi
    00002019: 	jmp	.Ltmp3153 # Offset: 8217
.Ltmp3131:
    0000201e: 	movq	%rbx, %rdi
    00002021: 	jmp	.Ltmp3154 # Offset: 8225
.Ltmp3133:
    00002026: 	movq	%rbx, %rdi
    00002029: 	jmp	.Ltmp3155 # Offset: 8233
.Ltmp3135:
    0000202e: 	movq	%rbx, %rdi
    00002031: 	jmp	.Ltmp3156 # Offset: 8241
.Ltmp3137:
    00002036: 	movq	%rbx, %rdi
    00002039: 	jmp	.Ltmp3157 # Offset: 8249
.Ltmp2959:
    0000203e: 	leaq	DATAat0x33158(%rip), %rdi
    00002045: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8261
    0000204a: 	endbr64
.Ltmp3159:
    0000204e: 	movq	%rax, %rbp
    00002051: 	jmp	.Ltmp3158 # Offset: 8273
    00002056: 	endbr64
    0000205a: 	jmp	.Ltmp3159 # Offset: 8282
    0000205c: 	endbr64
    00002060: 	jmp	.Ltmp3159 # Offset: 8288
    00002062: 	endbr64
.Ltmp3163:
    00002066: 	movq	%rax, %rbp
    00002069: 	jmp	.Ltmp3160 # Offset: 8297
    0000206b: 	endbr64
.Ltmp3170:
    0000206f: 	movq	%rax, %rbp
    00002072: 	jmp	.Ltmp3161 # Offset: 8306
    00002077: 	endbr64
    0000207b: 	jmp	.Ltmp3159 # Offset: 8315
    0000207d: 	endbr64
.Ltmp3164:
    00002081: 	movq	%rax, %rbp
    00002084: 	jmp	.Ltmp3162 # Offset: 8324
    00002086: 	endbr64
    0000208a: 	jmp	.Ltmp3163 # Offset: 8330
    0000208c: 	endbr64
    00002090: 	jmp	.Ltmp3164 # Offset: 8336
    00002092: 	endbr64
    00002096: 	jmp	.Ltmp3163 # Offset: 8342
.Ltmp3160:
    00002098: 	movq	0xc0(%rsp), %rdi
    000020a0: 	cmpq	%rbx, %rdi
    000020a3: 	je	.Ltmp3162 # Offset: 8355
    000020a5: 	movq	0xd0(%rsp), %rax
    000020ad: 	leaq	0x1(%rax), %rsi
    000020b1: 	callq	_ZdlPvm@PLT # Offset: 8369
.Ltmp3162:
    000020b6: 	movq	0xa0(%rsp), %rdi
    000020be: 	cmpq	(%rsp), %rdi
    000020c2: 	je	.Ltmp3165 # Offset: 8386
    000020c4: 	movq	0xb0(%rsp), %rax
    000020cc: 	leaq	0x1(%rax), %rsi
    000020d0: 	callq	_ZdlPvm@PLT # Offset: 8400
.Ltmp3165:
    000020d5: 	movq	0x80(%rsp), %rdi
    000020dd: 	leaq	0x90(%rsp), %rax
    000020e5: 	cmpq	%rax, %rdi
    000020e8: 	je	.Ltmp3166 # Offset: 8424
    000020ea: 	movq	0x90(%rsp), %rax
    000020f2: 	leaq	0x1(%rax), %rsi
    000020f6: 	callq	_ZdlPvm@PLT # Offset: 8438
.Ltmp3166:
    000020fb: 	movq	0x60(%rsp), %rdi
    00002100: 	leaq	0x70(%rsp), %rax
    00002105: 	cmpq	%rax, %rdi
    00002108: 	je	.Ltmp3167 # Offset: 8456
    0000210a: 	movq	0x70(%rsp), %rax
    0000210f: 	leaq	0x1(%rax), %rsi
    00002113: 	callq	_ZdlPvm@PLT # Offset: 8467
.Ltmp3167:
    00002118: 	movq	0x40(%rsp), %rdi
    0000211d: 	leaq	0x50(%rsp), %rax
    00002122: 	cmpq	%rax, %rdi
    00002125: 	je	.Ltmp3168 # Offset: 8485
    00002127: 	movq	0x50(%rsp), %rax
    0000212c: 	leaq	0x1(%rax), %rsi
    00002130: 	callq	_ZdlPvm@PLT # Offset: 8496
.Ltmp3168:
    00002135: 	movl	$0x8, %esi
    0000213a: 	movq	%r12, %rdi
    0000213d: 	movq	%rbp, %rbx
    00002140: 	callq	_ZdlPvm@PLT # Offset: 8512
.Ltmp3175:
    00002145: 	movq	0x20(%rsp), %rdi
    0000214a: 	cmpq	0x8(%rsp), %rdi
    0000214f: 	je	.Ltmp3169 # Offset: 8527
    00002151: 	movq	0x30(%rsp), %rax
    00002156: 	leaq	0x1(%rax), %rsi
    0000215a: 	callq	_ZdlPvm@PLT # Offset: 8538
.Ltmp3169:
    0000215f: 	movq	%rbx, %rdi
    00002162: 	callq	_Unwind_Resume@PLT # Offset: 8546
    00002167: 	endbr64
    0000216b: 	jmp	.Ltmp3170 # Offset: 8555
    00002170: 	endbr64
    00002174: 	jmp	.Ltmp3170 # Offset: 8564
    00002179: 	endbr64
    0000217d: 	jmp	.Ltmp3170 # Offset: 8573
    00002182: 	endbr64
    00002186: 	jmp	.Ltmp3170 # Offset: 8582
    0000218b: 	endbr64
    0000218f: 	jmp	.Ltmp3170 # Offset: 8591
    00002194: 	endbr64
    00002198: 	jmp	.Ltmp3170 # Offset: 8600
    0000219d: 	endbr64
    000021a1: 	jmp	.Ltmp3159 # Offset: 8609
    000021a6: 	endbr64
    000021aa: 	jmp	.Ltmp3159 # Offset: 8618
    000021af: 	endbr64
    000021b3: 	jmp	.Ltmp3159 # Offset: 8627
    000021b8: 	endbr64
    000021bc: 	jmp	.Ltmp3159 # Offset: 8636
    000021c1: 	endbr64
    000021c5: 	jmp	.Ltmp3170 # Offset: 8645
    000021ca: 	endbr64
    000021ce: 	jmp	.Ltmp3170 # Offset: 8654
    000021d3: 	endbr64
    000021d7: 	jmp	.Ltmp3163 # Offset: 8663
    000021dc: 	endbr64
    000021e0: 	jmp	.Ltmp3163 # Offset: 8672
    000021e5: 	endbr64
    000021e9: 	jmp	.Ltmp3163 # Offset: 8681
    000021ee: 	endbr64
    000021f2: 	jmp	.Ltmp3163 # Offset: 8690
    000021f7: 	endbr64
    000021fb: 	jmp	.Ltmp3163 # Offset: 8699
    00002200: 	endbr64
    00002204: 	jmp	.Ltmp3163 # Offset: 8708
    00002209: 	endbr64
    0000220d: 	jmp	.Ltmp3163 # Offset: 8717
    00002212: 	endbr64
    00002216: 	jmp	.Ltmp3163 # Offset: 8726
    0000221b: 	endbr64
    0000221f: 	jmp	.Ltmp3163 # Offset: 8735
    00002224: 	endbr64
    00002228: 	jmp	.Ltmp3163 # Offset: 8744
    0000222d: 	endbr64
    00002231: 	jmp	.Ltmp3163 # Offset: 8753
    00002236: 	endbr64
    0000223a: 	jmp	.Ltmp3163 # Offset: 8762
    0000223f: 	endbr64
    00002243: 	jmp	.Ltmp3170 # Offset: 8771
    00002248: 	endbr64
    0000224c: 	jmp	.Ltmp3170 # Offset: 8780
    00002251: 	endbr64
    00002255: 	jmp	.Ltmp3170 # Offset: 8789
    0000225a: 	endbr64
.Ltmp3172:
    0000225e: 	movq	%rax, %rbp
    00002261: 	jmp	.Ltmp3171 # Offset: 8801
    00002266: 	endbr64
    0000226a: 	jmp	.Ltmp3172 # Offset: 8810
    0000226c: 	endbr64
.Ltmp3174:
    00002270: 	movq	%rax, %rbp
    00002273: 	jmp	.Ltmp3173 # Offset: 8819
    00002275: 	endbr64
    00002279: 	jmp	.Ltmp3174 # Offset: 8825
    0000227b: 	endbr64
    0000227f: 	jmp	.Ltmp3174 # Offset: 8831
    00002281: 	endbr64
    00002285: 	jmp	.Ltmp3174 # Offset: 8837
.Ltmp3173:
    00002287: 	movq	0xc0(%rsp), %rdi
    0000228f: 	cmpq	%rbx, %rdi
    00002292: 	je	.Ltmp3167 # Offset: 8850
    00002298: 	movq	0xd0(%rsp), %rax
    000022a0: 	leaq	0x1(%rax), %rsi
    000022a4: 	callq	_ZdlPvm@PLT # Offset: 8868
    000022a9: 	jmp	.Ltmp3167 # Offset: 8873
    000022ae: 	endbr64
    000022b2: 	jmp	.Ltmp3163 # Offset: 8882
    000022b7: 	endbr64
    000022bb: 	jmp	.Ltmp3163 # Offset: 8891
.Ltmp3158:
    000022c0: 	movq	0xc0(%rsp), %rdi
    000022c8: 	cmpq	%rbx, %rdi
    000022cb: 	je	.Ltmp3168 # Offset: 8907
    000022d1: 	movq	0xd0(%rsp), %rax
    000022d9: 	leaq	0x1(%rax), %rsi
    000022dd: 	callq	_ZdlPvm@PLT # Offset: 8925
    000022e2: 	jmp	.Ltmp3168 # Offset: 8930
    000022e7: 	endbr64
    000022eb: 	movq	%rax, %rbx
    000022ee: 	jmp	.Ltmp3175 # Offset: 8942
    000022f3: 	endbr64
    000022f7: 	jmp	.Ltmp3174 # Offset: 8951
    000022fc: 	endbr64
    00002300: 	jmp	.Ltmp3174 # Offset: 8960
    00002305: 	endbr64
    00002309: 	jmp	.Ltmp3174 # Offset: 8969
    0000230e: 	endbr64
    00002312: 	jmp	.Ltmp3172 # Offset: 8978
    00002317: 	endbr64
    0000231b: 	jmp	.Ltmp3172 # Offset: 8987
    00002320: 	endbr64
    00002324: 	movq	%rax, %rbp
    00002327: 	jmp	.Ltmp3165 # Offset: 8999
    0000232c: 	endbr64
    00002330: 	jmp	.Ltmp3172 # Offset: 9008
    00002335: 	endbr64
    00002339: 	jmp	.Ltmp3174 # Offset: 9017
    0000233e: 	endbr64
    00002342: 	jmp	.Ltmp3159 # Offset: 9026
    00002347: 	endbr64
    0000234b: 	jmp	.Ltmp3159 # Offset: 9035
    00002350: 	endbr64
    00002354: 	movq	%rax, %rbp
    00002357: 	jmp	.Ltmp3168 # Offset: 9047
    0000235c: 	endbr64
    00002360: 	jmp	.Ltmp3159 # Offset: 9056
    00002365: 	endbr64
    00002369: 	jmp	.Ltmp3172 # Offset: 9065
    0000236e: 	endbr64
    00002372: 	jmp	.Ltmp3172 # Offset: 9074
    00002377: 	endbr64
    0000237b: 	jmp	.Ltmp3172 # Offset: 9083
    00002380: 	endbr64
    00002384: 	jmp	.Ltmp3159 # Offset: 9092
    00002389: 	endbr64
    0000238d: 	movq	%rax, %rbp
    00002390: 	jmp	.Ltmp3166 # Offset: 9104
    00002395: 	endbr64
    00002399: 	jmp	.Ltmp3172 # Offset: 9113
    0000239e: 	endbr64
    000023a2: 	jmp	.Ltmp3174 # Offset: 9122
    000023a7: 	endbr64
    000023ab: 	movq	%rax, %rbp
    000023ae: 	jmp	.Ltmp3167 # Offset: 9134
    000023b3: 	endbr64
    000023b7: 	jmp	.Ltmp3174 # Offset: 9143
.Ltmp3171:
    000023bc: 	movq	0xc0(%rsp), %rdi
    000023c4: 	cmpq	%rbx, %rdi
    000023c7: 	je	.Ltmp3166 # Offset: 9159
    000023cd: 	movq	0xd0(%rsp), %rax
    000023d5: 	leaq	0x1(%rax), %rsi
    000023d9: 	callq	_ZdlPvm@PLT # Offset: 9177
    000023de: 	jmp	.Ltmp3166 # Offset: 9182
.Ltmp3161:
    000023e3: 	movq	0xc0(%rsp), %rdi
    000023eb: 	cmpq	%rbx, %rdi
    000023ee: 	je	.Ltmp3165 # Offset: 9198
    000023f4: 	movq	0xd0(%rsp), %rax
    000023fc: 	leaq	0x1(%rax), %rsi
    00002400: 	callq	_ZdlPvm@PLT # Offset: 9216
    00002405: 	jmp	.Ltmp3165 # Offset: 9221
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIlEvv"

Binary Function "_Z21testOneFunction_equalIiPFiPKiiiEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 385
  State       : disassembled
  Address     : 0x24520
  Size        : 0x21c
  MaxSize     : 0x220
  Offset      : 0x24520
  Section     : .text
  Orc Section : .local.text._Z21testOneFunction_equalIiPFiPKiiiEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0384:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x331c8(%rip), %r15
    0000000d: 	pushq	%r14
    0000000f: 	movq	%rcx, %r14
    00000012: 	pushq	%r13
    00000014: 	movq	%rdi, %r13
    00000017: 	pushq	%r12
    00000019: 	movl	%esi, %r12d
    0000001c: 	pushq	%rbp
    0000001d: 	movq	%rdx, %rbp
    00000020: 	pushq	%rbx
    00000021: 	xorl	%ebx, %ebx
    00000023: 	subq	$0x18, %rsp
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x8(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	callq	clock@PLT # Offset: 55
    0000003c: 	movsd	init_value(%rip), %xmm0
    00000044: 	movq	%rax, start_time(%rip)
    0000004b: 	movl	iterations(%rip), %eax
    00000051: 	testl	%eax, %eax
    00000053: 	jle	.Ltmp3176 # Offset: 83
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp3178:
    00000058: 	cvttsd2si	%xmm0, %edx
    0000005c: 	movl	%r12d, %esi
    0000005f: 	movq	%r13, %rdi
    00000062: 	callq	*%rbp # Offset: 98
    00000064: 	movsd	init_value(%rip), %xmm0
    0000006c: 	movl	%eax, %r8d
    0000006f: 	cvttsd2si	%xmm0, %eax
    00000073: 	cmpl	%eax, %r8d
    00000076: 	je	.Ltmp3177 # Offset: 118
    00000078: 	movq	(%r14), %rdx
    0000007b: 	xorl	%eax, %eax
    0000007d: 	movq	%r15, %rsi
    00000080: 	movl	$0x1, %edi
    00000085: 	addl	$0x1, %ebx
    00000088: 	callq	__printf_chk@PLT # Offset: 136
    0000008d: 	cmpl	%ebx, iterations(%rip)
    00000093: 	jle	.Ltmp3176 # Offset: 147
    00000095: 	movsd	init_value(%rip), %xmm0
    0000009d: 	jmp	.Ltmp3178 # Offset: 157
    0000009f: 	nop # Size: 1
.Ltmp3177:
    000000a0: 	addl	$0x1, %ebx
    000000a3: 	cmpl	%ebx, iterations(%rip)
    000000a9: 	jg	.Ltmp3178 # Offset: 169
.Ltmp3176:
    000000ab: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000b2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000b9: 	subq	$0x20, %rax
    000000bd: 	cmpq	%rax, %rbx
    000000c0: 	je	.Ltmp3179 # Offset: 192
    000000c6: 	leaq	0x10(%rbx), %rdi
    000000ca: 	movq	0x8(%r14), %r12
    000000ce: 	movq	%rdi, (%rbx)
    000000d1: 	movq	(%r14), %rbp
    000000d4: 	movq	%rbp, %rax
    000000d7: 	addq	%r12, %rax
    000000da: 	je	.Ltmp3180 # Offset: 218
    000000dc: 	testq	%rbp, %rbp
    000000df: 	je	.Ltmp3181 # Offset: 223
.Ltmp3180:
    000000e5: 	movq	%r12, (%rsp)
    000000e9: 	cmpq	$0xf, %r12
    000000ed: 	ja	.Ltmp3182 # Offset: 237
    000000f3: 	cmpq	$0x1, %r12
    000000f7: 	jne	.Ltmp3183 # Offset: 247
    000000fd: 	movzbl	(%rbp), %eax
    00000101: 	movb	%al, 0x10(%rbx)
.Ltmp3186:
    00000104: 	movq	%r12, 0x8(%rbx)
    00000108: 	movb	$0x0, (%rdi,%r12)
    0000010d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000114: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000011b: 	addq	$0x20, %rax
    0000011f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000126: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000012d: 	je	.Ltmp3184 # Offset: 301
.Ltmp3187:
    00000133: 	movq	-0x20(%rax), %rbp
    00000137: 	callq	clock@PLT # Offset: 311
    0000013c: 	movq	%rax, end_time(%rip)
    00000143: 	movq	0x8(%rsp), %rdx
    00000148: 	subq	%fs:0x28, %rdx
    00000151: 	jne	.Ltmp3185 # Offset: 337
    00000157: 	subq	start_time(%rip), %rax
    0000015e: 	pxor	%xmm0, %xmm0
    00000162: 	movq	%rbp, %rdi
    00000165: 	cvtsi2sd	%rax, %xmm0
    0000016a: 	divsd	DATAat0x335b0(%rip), %xmm0
    00000172: 	addq	$0x18, %rsp
    00000176: 	popq	%rbx
    00000177: 	popq	%rbp
    00000178: 	popq	%r12
    0000017a: 	popq	%r13
    0000017c: 	popq	%r14
    0000017e: 	popq	%r15
    00000180: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 384
    00000185: 	nopl	(%rax) # Size: 3
.Ltmp3182:
    00000188: 	movq	%rbx, %rdi
    0000018b: 	movq	%rsp, %rsi
    0000018e: 	xorl	%edx, %edx
    00000190: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 400
    00000195: 	movq	%rax, (%rbx)
    00000198: 	movq	%rax, %rdi
    0000019b: 	movq	(%rsp), %rax
    0000019f: 	movq	%rax, 0x10(%rbx)
.Ltmp3188:
    000001a3: 	movq	%r12, %rdx
    000001a6: 	movq	%rbp, %rsi
    000001a9: 	callq	memcpy@PLT # Offset: 425
    000001ae: 	movq	(%rsp), %r12
    000001b2: 	movq	(%rbx), %rdi
    000001b5: 	jmp	.Ltmp3186 # Offset: 437
    000001ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3179:
    000001c0: 	movq	%r14, %rsi
    000001c3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001ca: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 458
    000001cf: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001d6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001dd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001e4: 	jne	.Ltmp3187 # Offset: 484
.Ltmp3184:
    000001ea: 	movq	-0x8(%rdx), %rax
    000001ee: 	addq	$0x200, %rax
    000001f4: 	jmp	.Ltmp3187 # Offset: 500
    000001f9: 	nopl	(%rax) # Size: 7
.Ltmp3183:
    00000200: 	testq	%r12, %r12
    00000203: 	je	.Ltmp3186 # Offset: 515
    00000209: 	jmp	.Ltmp3188 # Offset: 521
.Ltmp3185:
    0000020b: 	callq	__stack_chk_fail@PLT # Offset: 523
.Ltmp3181:
    00000210: 	leaq	DATAat0x33158(%rip), %rdi
    00000217: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 535
DWARF CFI Instructions:
    <empty>
End of Function "_Z21testOneFunction_equalIiPFiPKiiiEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIiEvv" after disassembly {
  Number      : 386
  State       : disassembled
  Address     : 0x24740
  Size        : 0x24f4
  MaxSize     : 0x2500
  Offset      : 0x24740
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIiEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0385:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	$0x7d00, %edi
    0000000b: 	pushq	%r14
    0000000d: 	pushq	%r13
    0000000f: 	pushq	%r12
    00000011: 	pushq	%rbp
    00000012: 	pushq	%rbx
    00000013: 	subq	$0x108, %rsp
    0000001a: 	movq	%fs:0x28, %rax
    00000023: 	movq	%rax, 0xf8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	leaq	0x40(%rsp), %rax
    00000032: 	movl	$0x33746e69, 0x40(%rsp)
    0000003a: 	movq	%rax, 0x18(%rsp)
    0000003f: 	movq	%rax, 0x30(%rsp)
    00000044: 	movl	$0x5f32, %eax
    00000049: 	movw	%ax, 0x44(%rsp)
    0000004e: 	movb	$0x74, 0x46(%rsp)
    00000053: 	movq	$0x7, 0x38(%rsp)
    0000005c: 	movb	$0x0, 0x47(%rsp)
    00000061: 	callq	_Znam@PLT # Offset: 97
    00000066: 	movq	%rax, %r12
    00000069: 	cvttsd2si	init_value(%rip), %eax
    00000071: 	leaq	0x7d00(%r12), %rdx
    00000079: 	movd	%eax, %xmm0
    0000007d: 	movq	%r12, %rax
    00000080: 	pshufd	$0x0, %xmm0, %xmm0
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp3189:
    00000088: 	movups	%xmm0, (%rax)
    0000008b: 	addq	$0x10, %rax
    0000008f: 	cmpq	%rax, %rdx
    00000092: 	jne	.Ltmp3189 # Offset: 146
    00000094: 	leaq	0xd0(%rsp), %rbp
    0000009c: 	leaq	0x30(%rsp), %r13
    000000a1: 	leaq	DATAat0x331d8(%rip), %rdx
    000000a8: 	movq	%r13, %rsi
    000000ab: 	movq	%rbp, %rdi
    000000ae: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 174
    000000b3: 	movq	%rbp, %rcx
    000000b6: 	leaq	_Z8bit_and1IiET_PKS0_iS0_(%rip), %rdx
    000000bd: 	movl	$0x1f40, %esi
    000000c2: 	movq	%r12, %rdi
    000000c5: 	callq	_Z21testOneFunction_equalIiPFiPKiiiEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 197
    000000ca: 	movq	0xd0(%rsp), %rdi
    000000d2: 	leaq	0xe0(%rsp), %rbx
    000000da: 	cmpq	%rbx, %rdi
    000000dd: 	je	.Ltmp3190 # Offset: 221
    000000df: 	movq	0xe0(%rsp), %rax
    000000e7: 	leaq	0x1(%rax), %rsi
    000000eb: 	callq	_ZdlPvm@PLT # Offset: 235
.Ltmp3190:
    000000f0: 	leaq	DATAat0x331eb(%rip), %rdx
    000000f7: 	movq	%r13, %rsi
    000000fa: 	movq	%rbp, %rdi
    000000fd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 253
    00000102: 	movq	%rbp, %rcx
    00000105: 	leaq	_Z8bit_and2IiET_PKS0_iS0_(%rip), %rdx
    0000010c: 	movl	$0x1f40, %esi
    00000111: 	movq	%r12, %rdi
    00000114: 	callq	_Z21testOneFunction_equalIiPFiPKiiiEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 276
    00000119: 	movq	0xd0(%rsp), %rdi
    00000121: 	cmpq	%rbx, %rdi
    00000124: 	je	.Ltmp3191 # Offset: 292
    00000126: 	movq	0xe0(%rsp), %rax
    0000012e: 	leaq	0x1(%rax), %rsi
    00000132: 	callq	_ZdlPvm@PLT # Offset: 306
.Ltmp3191:
    00000137: 	leaq	DATAat0x331fe(%rip), %rdx
    0000013e: 	movq	%r13, %rsi
    00000141: 	movq	%rbp, %rdi
    00000144: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 324
    00000149: 	movq	%rbp, %rcx
    0000014c: 	leaq	_Z8bit_and3IiET_PKS0_iS0_(%rip), %rdx
    00000153: 	movl	$0x1f40, %esi
    00000158: 	movq	%r12, %rdi
    0000015b: 	callq	_Z21testOneFunction_equalIiPFiPKiiiEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 347
    00000160: 	movq	0xd0(%rsp), %rdi
    00000168: 	cmpq	%rbx, %rdi
    0000016b: 	je	.Ltmp3192 # Offset: 363
    0000016d: 	movq	0xe0(%rsp), %rax
    00000175: 	leaq	0x1(%rax), %rsi
    00000179: 	callq	_ZdlPvm@PLT # Offset: 377
.Ltmp3192:
    0000017e: 	movq	0x30(%rsp), %r15
    00000183: 	movq	0x38(%rsp), %r14
    00000188: 	movq	%rbx, 0xd0(%rsp)
    00000190: 	movq	%r15, %rax
    00000193: 	addq	%r14, %rax
    00000196: 	je	.Ltmp3193 # Offset: 406
    00000198: 	testq	%r15, %r15
    0000019b: 	je	.Ltmp3194 # Offset: 411
.Ltmp3193:
    000001a1: 	movq	%r14, 0x28(%rsp)
    000001a6: 	cmpq	$0xf, %r14
    000001aa: 	ja	.Ltmp3195 # Offset: 426
    000001b0: 	cmpq	$0x1, %r14
    000001b4: 	jne	.Ltmp3196 # Offset: 436
    000001ba: 	movzbl	(%r15), %eax
    000001be: 	movb	%al, 0xe0(%rsp)
    000001c5: 	movq	%rbx, %rax
.Ltmp3339:
    000001c8: 	movq	%r14, 0xd8(%rsp)
    000001d0: 	movb	$0x0, (%rax,%r14)
    000001d5: 	movabsq	$0x3fffffffffffffff, %rax
    000001df: 	subq	0xd8(%rsp), %rax
    000001e7: 	cmpq	$0x11, %rax
    000001eb: 	jbe	.Ltmp3197 # Offset: 491
    000001f1: 	movl	$0x12, %edx
    000001f6: 	leaq	DATAat0x33211(%rip), %rsi
    000001fd: 	movq	%rbp, %rdi
    00000200: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 512
    00000205: 	movq	%rbp, %rcx
    00000208: 	leaq	_Z8bit_and4IiET_PKS0_iS0_(%rip), %rdx
    0000020f: 	movl	$0x1f40, %esi
    00000214: 	movq	%r12, %rdi
    00000217: 	callq	_Z21testOneFunction_equalIiPFiPKiiiEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 535
    0000021c: 	movq	0xd0(%rsp), %rdi
    00000224: 	cmpq	%rbx, %rdi
    00000227: 	je	.Ltmp3198 # Offset: 551
    00000229: 	movq	0xe0(%rsp), %rax
    00000231: 	leaq	0x1(%rax), %rsi
    00000235: 	callq	_ZdlPvm@PLT # Offset: 565
.Ltmp3198:
    0000023a: 	movq	0x30(%rsp), %r15
    0000023f: 	movq	0x38(%rsp), %r14
    00000244: 	movq	%rbx, 0xd0(%rsp)
    0000024c: 	movq	%r15, %rax
    0000024f: 	addq	%r14, %rax
    00000252: 	je	.Ltmp3199 # Offset: 594
    00000254: 	testq	%r15, %r15
    00000257: 	je	.Ltmp3200 # Offset: 599
.Ltmp3199:
    0000025d: 	movq	%r14, 0x28(%rsp)
    00000262: 	cmpq	$0xf, %r14
    00000266: 	ja	.Ltmp3201 # Offset: 614
    0000026c: 	cmpq	$0x1, %r14
    00000270: 	jne	.Ltmp3202 # Offset: 624
    00000276: 	movzbl	(%r15), %eax
    0000027a: 	movb	%al, 0xe0(%rsp)
    00000281: 	movq	%rbx, %rax
.Ltmp3345:
    00000284: 	movq	%r14, 0xd8(%rsp)
    0000028c: 	movb	$0x0, (%rax,%r14)
    00000291: 	movabsq	$0x3fffffffffffffff, %rax
    0000029b: 	subq	0xd8(%rsp), %rax
    000002a3: 	cmpq	$0x11, %rax
    000002a7: 	jbe	.Ltmp3203 # Offset: 679
    000002ad: 	movl	$0x12, %edx
    000002b2: 	leaq	DATAat0x33224(%rip), %rsi
    000002b9: 	movq	%rbp, %rdi
    000002bc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 700
    000002c1: 	movq	%rbp, %rcx
    000002c4: 	leaq	_Z8bit_and5IiET_PKS0_iS0_(%rip), %rdx
    000002cb: 	movl	$0x1f40, %esi
    000002d0: 	movq	%r12, %rdi
    000002d3: 	callq	_Z21testOneFunction_equalIiPFiPKiiiEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 723
    000002d8: 	movq	0xd0(%rsp), %rdi
    000002e0: 	cmpq	%rbx, %rdi
    000002e3: 	je	.Ltmp3204 # Offset: 739
    000002e5: 	movq	0xe0(%rsp), %rax
    000002ed: 	leaq	0x1(%rax), %rsi
    000002f1: 	callq	_ZdlPvm@PLT # Offset: 753
.Ltmp3204:
    000002f6: 	movq	0x30(%rsp), %r15
    000002fb: 	movq	0x38(%rsp), %r14
    00000300: 	movq	%rbx, 0xd0(%rsp)
    00000308: 	movq	%r15, %rax
    0000030b: 	addq	%r14, %rax
    0000030e: 	je	.Ltmp3205 # Offset: 782
    00000310: 	testq	%r15, %r15
    00000313: 	je	.Ltmp3206 # Offset: 787
.Ltmp3205:
    00000319: 	movq	%r14, 0x28(%rsp)
    0000031e: 	cmpq	$0xf, %r14
    00000322: 	ja	.Ltmp3207 # Offset: 802
    00000328: 	cmpq	$0x1, %r14
    0000032c: 	jne	.Ltmp3208 # Offset: 812
    00000332: 	movzbl	(%r15), %eax
    00000336: 	movb	%al, 0xe0(%rsp)
    0000033d: 	movq	%rbx, %rax
.Ltmp3343:
    00000340: 	movq	%r14, 0xd8(%rsp)
    00000348: 	movb	$0x0, (%rax,%r14)
    0000034d: 	movabsq	$0x3fffffffffffffff, %rax
    00000357: 	subq	0xd8(%rsp), %rax
    0000035f: 	cmpq	$0x11, %rax
    00000363: 	jbe	.Ltmp3209 # Offset: 867
    00000369: 	movl	$0x12, %edx
    0000036e: 	leaq	DATAat0x33237(%rip), %rsi
    00000375: 	movq	%rbp, %rdi
    00000378: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 888
    0000037d: 	movq	%rbp, %rcx
    00000380: 	leaq	_Z8bit_and6IiET_PKS0_iS0_(%rip), %rdx
    00000387: 	movl	$0x1f40, %esi
    0000038c: 	movq	%r12, %rdi
    0000038f: 	callq	_Z21testOneFunction_equalIiPFiPKiiiEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 911
    00000394: 	movq	0xd0(%rsp), %rdi
    0000039c: 	cmpq	%rbx, %rdi
    0000039f: 	je	.Ltmp3210 # Offset: 927
    000003a1: 	movq	0xe0(%rsp), %rax
    000003a9: 	leaq	0x1(%rax), %rsi
    000003ad: 	callq	_ZdlPvm@PLT # Offset: 941
.Ltmp3210:
    000003b2: 	movq	0x30(%rsp), %r15
    000003b7: 	movq	0x38(%rsp), %r14
    000003bc: 	movq	%rbx, 0xd0(%rsp)
    000003c4: 	movq	%r15, %rax
    000003c7: 	addq	%r14, %rax
    000003ca: 	je	.Ltmp3211 # Offset: 970
    000003cc: 	testq	%r15, %r15
    000003cf: 	je	.Ltmp3212 # Offset: 975
.Ltmp3211:
    000003d5: 	movq	%r14, 0x28(%rsp)
    000003da: 	cmpq	$0xf, %r14
    000003de: 	ja	.Ltmp3213 # Offset: 990
    000003e4: 	cmpq	$0x1, %r14
    000003e8: 	jne	.Ltmp3214 # Offset: 1000
    000003ee: 	movzbl	(%r15), %eax
    000003f2: 	movb	%al, 0xe0(%rsp)
    000003f9: 	movq	%rbx, %rax
.Ltmp3341:
    000003fc: 	movq	%r14, 0xd8(%rsp)
    00000404: 	movb	$0x0, (%rax,%r14)
    00000409: 	movabsq	$0x3fffffffffffffff, %rax
    00000413: 	subq	0xd8(%rsp), %rax
    0000041b: 	cmpq	$0x11, %rax
    0000041f: 	jbe	.Ltmp3215 # Offset: 1055
    00000425: 	movl	$0x12, %edx
    0000042a: 	leaq	DATAat0x3324a(%rip), %rsi
    00000431: 	movq	%rbp, %rdi
    00000434: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1076
    00000439: 	movq	%rbp, %rcx
    0000043c: 	leaq	_Z8bit_and7IiET_PKS0_iS0_(%rip), %rdx
    00000443: 	movl	$0x1f40, %esi
    00000448: 	movq	%r12, %rdi
    0000044b: 	callq	_Z21testOneFunction_equalIiPFiPKiiiEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1099
    00000450: 	movq	0xd0(%rsp), %rdi
    00000458: 	cmpq	%rbx, %rdi
    0000045b: 	je	.Ltmp3216 # Offset: 1115
    0000045d: 	movq	0xe0(%rsp), %rax
    00000465: 	leaq	0x1(%rax), %rsi
    00000469: 	callq	_ZdlPvm@PLT # Offset: 1129
.Ltmp3216:
    0000046e: 	leaq	DATAat0x3325d(%rip), %rdx
    00000475: 	movq	%r13, %rsi
    00000478: 	movq	%rbp, %rdi
    0000047b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1147
    00000480: 	movq	%rbp, %rcx
    00000483: 	leaq	_Z8bit_and8IiET_PKS0_iS0_(%rip), %rdx
    0000048a: 	movl	$0x1f40, %esi
    0000048f: 	movq	%r12, %rdi
    00000492: 	callq	_Z21testOneFunction_equalIiPFiPKiiiEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1170
    00000497: 	movq	0xd0(%rsp), %rdi
    0000049f: 	cmpq	%rbx, %rdi
    000004a2: 	je	.Ltmp3217 # Offset: 1186
    000004a4: 	movq	0xe0(%rsp), %rax
    000004ac: 	leaq	0x1(%rax), %rsi
    000004b0: 	callq	_ZdlPvm@PLT # Offset: 1200
.Ltmp3217:
    000004b5: 	movq	0x30(%rsp), %r15
    000004ba: 	leaq	0x60(%rsp), %rax
    000004bf: 	movq	0x38(%rsp), %r14
    000004c4: 	movq	%rax, 0x8(%rsp)
    000004c9: 	movq	%rax, 0x50(%rsp)
    000004ce: 	movq	%r15, %rax
    000004d1: 	addq	%r14, %rax
    000004d4: 	je	.Ltmp3218 # Offset: 1236
    000004d6: 	testq	%r15, %r15
    000004d9: 	je	.Ltmp3219 # Offset: 1241
.Ltmp3218:
    000004df: 	movq	%r14, 0x28(%rsp)
    000004e4: 	cmpq	$0xf, %r14
    000004e8: 	ja	.Ltmp3220 # Offset: 1256
    000004ee: 	cmpq	$0x1, %r14
    000004f2: 	jne	.Ltmp3221 # Offset: 1266
    000004f8: 	movzbl	(%r15), %eax
    000004fc: 	movb	%al, 0x60(%rsp)
    00000500: 	movq	0x8(%rsp), %rax
.Ltmp3347:
    00000505: 	movq	%r14, 0x58(%rsp)
    0000050a: 	movb	$0x0, (%rax,%r14)
    0000050f: 	movabsq	$0x3fffffffffffffff, %rax
    00000519: 	subq	0x58(%rsp), %rax
    0000051e: 	cmpq	$0x10, %rax
    00000522: 	jbe	.Ltmp3222 # Offset: 1314
    00000528: 	leaq	0x50(%rsp), %rdi
    0000052d: 	movl	$0x11, %edx
    00000532: 	leaq	DATAat0x33270(%rip), %rsi
    00000539: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1337
    0000053e: 	movl	iterations(%rip), %esi
    00000544: 	movq	0x50(%rsp), %rdi
    00000549: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 1353
    0000054e: 	movq	0x30(%rsp), %r15
    00000553: 	movq	0x38(%rsp), %r14
    00000558: 	movq	%rbx, 0xd0(%rsp)
    00000560: 	movq	%r15, %rax
    00000563: 	addq	%r14, %rax
    00000566: 	je	.Ltmp3223 # Offset: 1382
    00000568: 	testq	%r15, %r15
    0000056b: 	je	.Ltmp3224 # Offset: 1387
.Ltmp3223:
    00000571: 	movq	%r14, 0x28(%rsp)
    00000576: 	cmpq	$0xf, %r14
    0000057a: 	ja	.Ltmp3225 # Offset: 1402
    00000580: 	cmpq	$0x1, %r14
    00000584: 	jne	.Ltmp3226 # Offset: 1412
    0000058a: 	movzbl	(%r15), %eax
    0000058e: 	movb	%al, 0xe0(%rsp)
    00000595: 	movq	%rbx, %rax
.Ltmp3355:
    00000598: 	movq	%r14, 0xd8(%rsp)
    000005a0: 	movb	$0x0, (%rax,%r14)
    000005a5: 	movabsq	$0x3fffffffffffffff, %rax
    000005af: 	subq	0xd8(%rsp), %rax
    000005b7: 	cmpq	$0x10, %rax
    000005bb: 	jbe	.Ltmp3227 # Offset: 1467
    000005c1: 	movl	$0x11, %edx
    000005c6: 	leaq	DATAat0x33282(%rip), %rsi
    000005cd: 	movq	%rbp, %rdi
    000005d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1488
    000005d5: 	movq	%rbp, %rcx
    000005d8: 	leaq	_Z7bit_or1IiET_PKS0_iS0_(%rip), %rdx
    000005df: 	movl	$0x1f40, %esi
    000005e4: 	movq	%r12, %rdi
    000005e7: 	callq	_Z21testOneFunction_equalIiPFiPKiiiEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1511
    000005ec: 	movq	0xd0(%rsp), %rdi
    000005f4: 	cmpq	%rbx, %rdi
    000005f7: 	je	.Ltmp3228 # Offset: 1527
    000005f9: 	movq	0xe0(%rsp), %rax
    00000601: 	leaq	0x1(%rax), %rsi
    00000605: 	callq	_ZdlPvm@PLT # Offset: 1541
.Ltmp3228:
    0000060a: 	movq	0x30(%rsp), %r15
    0000060f: 	movq	0x38(%rsp), %r14
    00000614: 	movq	%rbx, 0xd0(%rsp)
    0000061c: 	movq	%r15, %rax
    0000061f: 	addq	%r14, %rax
    00000622: 	je	.Ltmp3229 # Offset: 1570
    00000624: 	testq	%r15, %r15
    00000627: 	je	.Ltmp3230 # Offset: 1575
.Ltmp3229:
    0000062d: 	movq	%r14, 0x28(%rsp)
    00000632: 	cmpq	$0xf, %r14
    00000636: 	ja	.Ltmp3231 # Offset: 1590
    0000063c: 	cmpq	$0x1, %r14
    00000640: 	jne	.Ltmp3232 # Offset: 1600
    00000646: 	movzbl	(%r15), %eax
    0000064a: 	movb	%al, 0xe0(%rsp)
    00000651: 	movq	%rbx, %rax
.Ltmp3353:
    00000654: 	movq	%r14, 0xd8(%rsp)
    0000065c: 	movb	$0x0, (%rax,%r14)
    00000661: 	movabsq	$0x3fffffffffffffff, %rax
    0000066b: 	subq	0xd8(%rsp), %rax
    00000673: 	cmpq	$0x10, %rax
    00000677: 	jbe	.Ltmp3233 # Offset: 1655
    0000067d: 	movl	$0x11, %edx
    00000682: 	leaq	DATAat0x33294(%rip), %rsi
    00000689: 	movq	%rbp, %rdi
    0000068c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1676
    00000691: 	movq	%rbp, %rcx
    00000694: 	leaq	_Z7bit_or2IiET_PKS0_iS0_(%rip), %rdx
    0000069b: 	movl	$0x1f40, %esi
    000006a0: 	movq	%r12, %rdi
    000006a3: 	callq	_Z21testOneFunction_equalIiPFiPKiiiEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1699
    000006a8: 	movq	0xd0(%rsp), %rdi
    000006b0: 	cmpq	%rbx, %rdi
    000006b3: 	je	.Ltmp3234 # Offset: 1715
    000006b5: 	movq	0xe0(%rsp), %rax
    000006bd: 	leaq	0x1(%rax), %rsi
    000006c1: 	callq	_ZdlPvm@PLT # Offset: 1729
.Ltmp3234:
    000006c6: 	movq	0x30(%rsp), %r15
    000006cb: 	movq	0x38(%rsp), %r14
    000006d0: 	movq	%rbx, 0xd0(%rsp)
    000006d8: 	movq	%r15, %rax
    000006db: 	addq	%r14, %rax
    000006de: 	je	.Ltmp3235 # Offset: 1758
    000006e0: 	testq	%r15, %r15
    000006e3: 	je	.Ltmp3236 # Offset: 1763
.Ltmp3235:
    000006e9: 	movq	%r14, 0x28(%rsp)
    000006ee: 	cmpq	$0xf, %r14
    000006f2: 	ja	.Ltmp3237 # Offset: 1778
    000006f8: 	cmpq	$0x1, %r14
    000006fc: 	jne	.Ltmp3238 # Offset: 1788
    00000702: 	movzbl	(%r15), %eax
    00000706: 	movb	%al, 0xe0(%rsp)
    0000070d: 	movq	%rbx, %rax
.Ltmp3351:
    00000710: 	movq	%r14, 0xd8(%rsp)
    00000718: 	movb	$0x0, (%rax,%r14)
    0000071d: 	movabsq	$0x3fffffffffffffff, %rax
    00000727: 	subq	0xd8(%rsp), %rax
    0000072f: 	cmpq	$0x10, %rax
    00000733: 	jbe	.Ltmp3239 # Offset: 1843
    00000739: 	movl	$0x11, %edx
    0000073e: 	leaq	DATAat0x332a6(%rip), %rsi
    00000745: 	movq	%rbp, %rdi
    00000748: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1864
    0000074d: 	movq	%rbp, %rcx
    00000750: 	leaq	_Z7bit_or3IiET_PKS0_iS0_(%rip), %rdx
    00000757: 	movl	$0x1f40, %esi
    0000075c: 	movq	%r12, %rdi
    0000075f: 	callq	_Z21testOneFunction_equalIiPFiPKiiiEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1887
    00000764: 	movq	0xd0(%rsp), %rdi
    0000076c: 	cmpq	%rbx, %rdi
    0000076f: 	je	.Ltmp3240 # Offset: 1903
    00000771: 	movq	0xe0(%rsp), %rax
    00000779: 	leaq	0x1(%rax), %rsi
    0000077d: 	callq	_ZdlPvm@PLT # Offset: 1917
.Ltmp3240:
    00000782: 	leaq	DATAat0x332b8(%rip), %rdx
    00000789: 	movq	%r13, %rsi
    0000078c: 	movq	%rbp, %rdi
    0000078f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1935
    00000794: 	movq	%rbp, %rcx
    00000797: 	leaq	_Z7bit_or4IiET_PKS0_iS0_(%rip), %rdx
    0000079e: 	movl	$0x1f40, %esi
    000007a3: 	movq	%r12, %rdi
    000007a6: 	callq	_Z21testOneFunction_equalIiPFiPKiiiEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1958
    000007ab: 	movq	0xd0(%rsp), %rdi
    000007b3: 	cmpq	%rbx, %rdi
    000007b6: 	je	.Ltmp3241 # Offset: 1974
    000007b8: 	movq	0xe0(%rsp), %rax
    000007c0: 	leaq	0x1(%rax), %rsi
    000007c4: 	callq	_ZdlPvm@PLT # Offset: 1988
.Ltmp3241:
    000007c9: 	leaq	DATAat0x332ca(%rip), %rdx
    000007d0: 	movq	%r13, %rsi
    000007d3: 	movq	%rbp, %rdi
    000007d6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2006
    000007db: 	movq	%rbp, %rcx
    000007de: 	leaq	_Z7bit_or5IiET_PKS0_iS0_(%rip), %rdx
    000007e5: 	movl	$0x1f40, %esi
    000007ea: 	movq	%r12, %rdi
    000007ed: 	callq	_Z21testOneFunction_equalIiPFiPKiiiEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2029
    000007f2: 	movq	0xd0(%rsp), %rdi
    000007fa: 	cmpq	%rbx, %rdi
    000007fd: 	je	.Ltmp3242 # Offset: 2045
    000007ff: 	movq	0xe0(%rsp), %rax
    00000807: 	leaq	0x1(%rax), %rsi
    0000080b: 	callq	_ZdlPvm@PLT # Offset: 2059
.Ltmp3242:
    00000810: 	leaq	DATAat0x332dc(%rip), %rdx
    00000817: 	movq	%r13, %rsi
    0000081a: 	movq	%rbp, %rdi
    0000081d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2077
    00000822: 	movq	%rbp, %rcx
    00000825: 	leaq	_Z7bit_or6IiET_PKS0_iS0_(%rip), %rdx
    0000082c: 	movl	$0x1f40, %esi
    00000831: 	movq	%r12, %rdi
    00000834: 	callq	_Z21testOneFunction_equalIiPFiPKiiiEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2100
    00000839: 	movq	0xd0(%rsp), %rdi
    00000841: 	cmpq	%rbx, %rdi
    00000844: 	je	.Ltmp3243 # Offset: 2116
    00000846: 	movq	0xe0(%rsp), %rax
    0000084e: 	leaq	0x1(%rax), %rsi
    00000852: 	callq	_ZdlPvm@PLT # Offset: 2130
.Ltmp3243:
    00000857: 	leaq	DATAat0x332ee(%rip), %rdx
    0000085e: 	movq	%r13, %rsi
    00000861: 	movq	%rbp, %rdi
    00000864: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2148
    00000869: 	movq	%rbp, %rcx
    0000086c: 	leaq	_Z7bit_or7IiET_PKS0_iS0_(%rip), %rdx
    00000873: 	movl	$0x1f40, %esi
    00000878: 	movq	%r12, %rdi
    0000087b: 	callq	_Z21testOneFunction_equalIiPFiPKiiiEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2171
    00000880: 	movq	0xd0(%rsp), %rdi
    00000888: 	cmpq	%rbx, %rdi
    0000088b: 	je	.Ltmp3244 # Offset: 2187
    0000088d: 	movq	0xe0(%rsp), %rax
    00000895: 	leaq	0x1(%rax), %rsi
    00000899: 	callq	_ZdlPvm@PLT # Offset: 2201
.Ltmp3244:
    0000089e: 	leaq	DATAat0x33300(%rip), %rdx
    000008a5: 	movq	%r13, %rsi
    000008a8: 	movq	%rbp, %rdi
    000008ab: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2219
    000008b0: 	movq	%rbp, %rcx
    000008b3: 	leaq	_Z7bit_or8IiET_PKS0_iS0_(%rip), %rdx
    000008ba: 	movl	$0x1f40, %esi
    000008bf: 	movq	%r12, %rdi
    000008c2: 	callq	_Z21testOneFunction_equalIiPFiPKiiiEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2242
    000008c7: 	movq	0xd0(%rsp), %rdi
    000008cf: 	cmpq	%rbx, %rdi
    000008d2: 	je	.Ltmp3245 # Offset: 2258
    000008d4: 	movq	0xe0(%rsp), %rax
    000008dc: 	leaq	0x1(%rax), %rsi
    000008e0: 	callq	_ZdlPvm@PLT # Offset: 2272
.Ltmp3245:
    000008e5: 	movq	0x30(%rsp), %r15
    000008ea: 	leaq	0x80(%rsp), %rax
    000008f2: 	movq	0x38(%rsp), %r14
    000008f7: 	movq	%rax, 0x10(%rsp)
    000008fc: 	movq	%rax, 0x70(%rsp)
    00000901: 	movq	%r15, %rax
    00000904: 	addq	%r14, %rax
    00000907: 	je	.Ltmp3246 # Offset: 2311
    00000909: 	testq	%r15, %r15
    0000090c: 	je	.Ltmp3247 # Offset: 2316
.Ltmp3246:
    00000912: 	movq	%r14, 0x28(%rsp)
    00000917: 	cmpq	$0xf, %r14
    0000091b: 	ja	.Ltmp3248 # Offset: 2331
    00000921: 	cmpq	$0x1, %r14
    00000925: 	jne	.Ltmp3249 # Offset: 2341
    0000092b: 	movzbl	(%r15), %eax
    0000092f: 	movb	%al, 0x80(%rsp)
    00000936: 	movq	0x10(%rsp), %rax
.Ltmp3349:
    0000093b: 	movq	%r14, 0x78(%rsp)
    00000940: 	movb	$0x0, (%rax,%r14)
    00000945: 	movabsq	$0x3fffffffffffffff, %rax
    0000094f: 	subq	0x78(%rsp), %rax
    00000954: 	cmpq	$0xf, %rax
    00000958: 	jbe	.Ltmp3250 # Offset: 2392
    0000095e: 	leaq	0x70(%rsp), %rdi
    00000963: 	movl	$0x10, %edx
    00000968: 	leaq	DATAat0x33312(%rip), %rsi
    0000096f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2415
    00000974: 	movl	iterations(%rip), %esi
    0000097a: 	movq	0x70(%rsp), %rdi
    0000097f: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 2431
    00000984: 	leaq	DATAat0x33323(%rip), %rdx
    0000098b: 	movq	%r13, %rsi
    0000098e: 	movq	%rbp, %rdi
    00000991: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2449
    00000996: 	movq	%rbp, %rcx
    00000999: 	leaq	_Z8bit_xor1IiET_PKS0_iS0_(%rip), %rdx
    000009a0: 	movl	$0x1f40, %esi
    000009a5: 	movq	%r12, %rdi
    000009a8: 	callq	_Z21testOneFunction_equalIiPFiPKiiiEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2472
    000009ad: 	movq	0xd0(%rsp), %rdi
    000009b5: 	cmpq	%rbx, %rdi
    000009b8: 	je	.Ltmp3251 # Offset: 2488
    000009ba: 	movq	0xe0(%rsp), %rax
    000009c2: 	leaq	0x1(%rax), %rsi
    000009c6: 	callq	_ZdlPvm@PLT # Offset: 2502
.Ltmp3251:
    000009cb: 	movq	0x30(%rsp), %r15
    000009d0: 	movq	0x38(%rsp), %r14
    000009d5: 	movq	%rbx, 0xd0(%rsp)
    000009dd: 	movq	%r15, %rax
    000009e0: 	addq	%r14, %rax
    000009e3: 	je	.Ltmp3252 # Offset: 2531
    000009e5: 	testq	%r15, %r15
    000009e8: 	je	.Ltmp3253 # Offset: 2536
.Ltmp3252:
    000009ee: 	movq	%r14, 0x28(%rsp)
    000009f3: 	cmpq	$0xf, %r14
    000009f7: 	ja	.Ltmp3254 # Offset: 2551
    000009fd: 	cmpq	$0x1, %r14
    00000a01: 	jne	.Ltmp3255 # Offset: 2561
    00000a07: 	movzbl	(%r15), %eax
    00000a0b: 	movb	%al, 0xe0(%rsp)
    00000a12: 	movq	%rbx, %rax
.Ltmp3365:
    00000a15: 	movq	%r14, 0xd8(%rsp)
    00000a1d: 	movb	$0x0, (%rax,%r14)
    00000a22: 	movabsq	$0x3fffffffffffffff, %rax
    00000a2c: 	subq	0xd8(%rsp), %rax
    00000a34: 	cmpq	$0x11, %rax
    00000a38: 	jbe	.Ltmp3256 # Offset: 2616
    00000a3e: 	movl	$0x12, %edx
    00000a43: 	leaq	DATAat0x33336(%rip), %rsi
    00000a4a: 	movq	%rbp, %rdi
    00000a4d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2637
    00000a52: 	movq	%rbp, %rcx
    00000a55: 	leaq	_Z8bit_xor2IiET_PKS0_iS0_(%rip), %rdx
    00000a5c: 	movl	$0x1f40, %esi
    00000a61: 	movq	%r12, %rdi
    00000a64: 	callq	_Z21testOneFunction_equalIiPFiPKiiiEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2660
    00000a69: 	movq	0xd0(%rsp), %rdi
    00000a71: 	cmpq	%rbx, %rdi
    00000a74: 	je	.Ltmp3257 # Offset: 2676
    00000a76: 	movq	0xe0(%rsp), %rax
    00000a7e: 	leaq	0x1(%rax), %rsi
    00000a82: 	callq	_ZdlPvm@PLT # Offset: 2690
.Ltmp3257:
    00000a87: 	leaq	DATAat0x33349(%rip), %rdx
    00000a8e: 	movq	%r13, %rsi
    00000a91: 	movq	%rbp, %rdi
    00000a94: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2708
    00000a99: 	movq	%rbp, %rcx
    00000a9c: 	leaq	_Z8bit_xor3IiET_PKS0_iS0_(%rip), %rdx
    00000aa3: 	movl	$0x1f40, %esi
    00000aa8: 	movq	%r12, %rdi
    00000aab: 	callq	_Z21testOneFunction_equalIiPFiPKiiiEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2731
    00000ab0: 	movq	0xd0(%rsp), %rdi
    00000ab8: 	cmpq	%rbx, %rdi
    00000abb: 	je	.Ltmp3258 # Offset: 2747
    00000abd: 	movq	0xe0(%rsp), %rax
    00000ac5: 	leaq	0x1(%rax), %rsi
    00000ac9: 	callq	_ZdlPvm@PLT # Offset: 2761
.Ltmp3258:
    00000ace: 	movq	0x30(%rsp), %r15
    00000ad3: 	movq	0x38(%rsp), %r14
    00000ad8: 	movq	%rbx, 0xd0(%rsp)
    00000ae0: 	movq	%r15, %rax
    00000ae3: 	addq	%r14, %rax
    00000ae6: 	je	.Ltmp3259 # Offset: 2790
    00000ae8: 	testq	%r15, %r15
    00000aeb: 	je	.Ltmp3260 # Offset: 2795
.Ltmp3259:
    00000af1: 	movq	%r14, 0x28(%rsp)
    00000af6: 	cmpq	$0xf, %r14
    00000afa: 	ja	.Ltmp3261 # Offset: 2810
    00000b00: 	cmpq	$0x1, %r14
    00000b04: 	jne	.Ltmp3262 # Offset: 2820
    00000b0a: 	movzbl	(%r15), %eax
    00000b0e: 	movb	%al, 0xe0(%rsp)
    00000b15: 	movq	%rbx, %rax
.Ltmp3363:
    00000b18: 	movq	%r14, 0xd8(%rsp)
    00000b20: 	movb	$0x0, (%rax,%r14)
    00000b25: 	movabsq	$0x3fffffffffffffff, %rax
    00000b2f: 	subq	0xd8(%rsp), %rax
    00000b37: 	cmpq	$0x11, %rax
    00000b3b: 	jbe	.Ltmp3263 # Offset: 2875
    00000b41: 	movl	$0x12, %edx
    00000b46: 	leaq	DATAat0x3335c(%rip), %rsi
    00000b4d: 	movq	%rbp, %rdi
    00000b50: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2896
    00000b55: 	movq	%rbp, %rcx
    00000b58: 	leaq	_Z8bit_xor4IiET_PKS0_iS0_(%rip), %rdx
    00000b5f: 	movl	$0x1f40, %esi
    00000b64: 	movq	%r12, %rdi
    00000b67: 	callq	_Z21testOneFunction_equalIiPFiPKiiiEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2919
    00000b6c: 	movq	0xd0(%rsp), %rdi
    00000b74: 	cmpq	%rbx, %rdi
    00000b77: 	je	.Ltmp3264 # Offset: 2935
    00000b79: 	movq	0xe0(%rsp), %rax
    00000b81: 	leaq	0x1(%rax), %rsi
    00000b85: 	callq	_ZdlPvm@PLT # Offset: 2949
.Ltmp3264:
    00000b8a: 	leaq	DATAat0x3336f(%rip), %rdx
    00000b91: 	movq	%r13, %rsi
    00000b94: 	movq	%rbp, %rdi
    00000b97: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2967
    00000b9c: 	movq	%rbp, %rcx
    00000b9f: 	leaq	_Z8bit_xor5IiET_PKS0_iS0_(%rip), %rdx
    00000ba6: 	movl	$0x1f40, %esi
    00000bab: 	movq	%r12, %rdi
    00000bae: 	callq	_Z21testOneFunction_equalIiPFiPKiiiEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2990
    00000bb3: 	movq	0xd0(%rsp), %rdi
    00000bbb: 	cmpq	%rbx, %rdi
    00000bbe: 	je	.Ltmp3265 # Offset: 3006
    00000bc0: 	movq	0xe0(%rsp), %rax
    00000bc8: 	leaq	0x1(%rax), %rsi
    00000bcc: 	callq	_ZdlPvm@PLT # Offset: 3020
.Ltmp3265:
    00000bd1: 	movq	0x30(%rsp), %r15
    00000bd6: 	movq	0x38(%rsp), %r14
    00000bdb: 	movq	%rbx, 0xd0(%rsp)
    00000be3: 	movq	%r15, %rax
    00000be6: 	addq	%r14, %rax
    00000be9: 	je	.Ltmp3266 # Offset: 3049
    00000beb: 	testq	%r15, %r15
    00000bee: 	je	.Ltmp3267 # Offset: 3054
.Ltmp3266:
    00000bf4: 	movq	%r14, 0x28(%rsp)
    00000bf9: 	cmpq	$0xf, %r14
    00000bfd: 	ja	.Ltmp3268 # Offset: 3069
    00000c03: 	cmpq	$0x1, %r14
    00000c07: 	jne	.Ltmp3269 # Offset: 3079
    00000c0d: 	movzbl	(%r15), %eax
    00000c11: 	movb	%al, 0xe0(%rsp)
    00000c18: 	movq	%rbx, %rax
.Ltmp3361:
    00000c1b: 	movq	%r14, 0xd8(%rsp)
    00000c23: 	movb	$0x0, (%rax,%r14)
    00000c28: 	movabsq	$0x3fffffffffffffff, %rax
    00000c32: 	subq	0xd8(%rsp), %rax
    00000c3a: 	cmpq	$0x11, %rax
    00000c3e: 	jbe	.Ltmp3270 # Offset: 3134
    00000c44: 	movl	$0x12, %edx
    00000c49: 	leaq	DATAat0x33382(%rip), %rsi
    00000c50: 	movq	%rbp, %rdi
    00000c53: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3155
    00000c58: 	movq	%rbp, %rcx
    00000c5b: 	leaq	_Z8bit_xor6IiET_PKS0_iS0_(%rip), %rdx
    00000c62: 	movl	$0x1f40, %esi
    00000c67: 	movq	%r12, %rdi
    00000c6a: 	callq	_Z21testOneFunction_equalIiPFiPKiiiEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3178
    00000c6f: 	movq	0xd0(%rsp), %rdi
    00000c77: 	cmpq	%rbx, %rdi
    00000c7a: 	je	.Ltmp3271 # Offset: 3194
    00000c7c: 	movq	0xe0(%rsp), %rax
    00000c84: 	leaq	0x1(%rax), %rsi
    00000c88: 	callq	_ZdlPvm@PLT # Offset: 3208
.Ltmp3271:
    00000c8d: 	leaq	DATAat0x33395(%rip), %rdx
    00000c94: 	movq	%r13, %rsi
    00000c97: 	movq	%rbp, %rdi
    00000c9a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3226
    00000c9f: 	movq	%rbp, %rcx
    00000ca2: 	leaq	_Z8bit_xor7IiET_PKS0_iS0_(%rip), %rdx
    00000ca9: 	movl	$0x1f40, %esi
    00000cae: 	movq	%r12, %rdi
    00000cb1: 	callq	_Z21testOneFunction_equalIiPFiPKiiiEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3249
    00000cb6: 	movq	0xd0(%rsp), %rdi
    00000cbe: 	cmpq	%rbx, %rdi
    00000cc1: 	je	.Ltmp3272 # Offset: 3265
    00000cc3: 	movq	0xe0(%rsp), %rax
    00000ccb: 	leaq	0x1(%rax), %rsi
    00000ccf: 	callq	_ZdlPvm@PLT # Offset: 3279
.Ltmp3272:
    00000cd4: 	leaq	DATAat0x333a8(%rip), %rdx
    00000cdb: 	movq	%r13, %rsi
    00000cde: 	movq	%rbp, %rdi
    00000ce1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3297
    00000ce6: 	movq	%rbp, %rcx
    00000ce9: 	leaq	_Z8bit_xor8IiET_PKS0_iS0_(%rip), %rdx
    00000cf0: 	movl	$0x1f40, %esi
    00000cf5: 	movq	%r12, %rdi
    00000cf8: 	callq	_Z21testOneFunction_equalIiPFiPKiiiEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3320
    00000cfd: 	movq	0xd0(%rsp), %rdi
    00000d05: 	cmpq	%rbx, %rdi
    00000d08: 	je	.Ltmp3273 # Offset: 3336
    00000d0a: 	movq	0xe0(%rsp), %rax
    00000d12: 	leaq	0x1(%rax), %rsi
    00000d16: 	callq	_ZdlPvm@PLT # Offset: 3350
.Ltmp3273:
    00000d1b: 	leaq	0x90(%rsp), %rdi
    00000d23: 	leaq	DATAat0x333bb(%rip), %rdx
    00000d2a: 	movq	%r13, %rsi
    00000d2d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3373
    00000d32: 	movl	iterations(%rip), %esi
    00000d38: 	movq	0x90(%rsp), %rdi
    00000d40: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 3392
    00000d45: 	leaq	DATAat0x333cd(%rip), %rdx
    00000d4c: 	movq	%r13, %rsi
    00000d4f: 	movq	%rbp, %rdi
    00000d52: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3410
    00000d57: 	movq	%rbp, %r8
    00000d5a: 	movl	$0x1, %edx
    00000d5f: 	movl	$0x1f40, %esi
    00000d64: 	movq	%r12, %rdi
    00000d67: 	leaq	_Z10logic_and1IiEbPKT_ib(%rip), %rcx
    00000d6e: 	callq	_Z23testOneFunction_logicalIiPFbPKiibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3438
    00000d73: 	movq	0xd0(%rsp), %rdi
    00000d7b: 	cmpq	%rbx, %rdi
    00000d7e: 	je	.Ltmp3274 # Offset: 3454
    00000d80: 	movq	0xe0(%rsp), %rax
    00000d88: 	leaq	0x1(%rax), %rsi
    00000d8c: 	callq	_ZdlPvm@PLT # Offset: 3468
.Ltmp3274:
    00000d91: 	movq	0x30(%rsp), %r15
    00000d96: 	movq	0x38(%rsp), %r14
    00000d9b: 	movq	%rbx, 0xd0(%rsp)
    00000da3: 	movq	%r15, %rax
    00000da6: 	addq	%r14, %rax
    00000da9: 	je	.Ltmp3275 # Offset: 3497
    00000dab: 	testq	%r15, %r15
    00000dae: 	je	.Ltmp3276 # Offset: 3502
.Ltmp3275:
    00000db4: 	movq	%r14, 0x28(%rsp)
    00000db9: 	cmpq	$0xf, %r14
    00000dbd: 	ja	.Ltmp3277 # Offset: 3517
    00000dc3: 	cmpq	$0x1, %r14
    00000dc7: 	jne	.Ltmp3278 # Offset: 3527
    00000dcd: 	movzbl	(%r15), %eax
    00000dd1: 	movb	%al, 0xe0(%rsp)
    00000dd8: 	movq	%rbx, %rax
.Ltmp3359:
    00000ddb: 	movq	%r14, 0xd8(%rsp)
    00000de3: 	movb	$0x0, (%rax,%r14)
    00000de8: 	movabsq	$0x3fffffffffffffff, %rax
    00000df2: 	subq	0xd8(%rsp), %rax
    00000dfa: 	cmpq	$0x15, %rax
    00000dfe: 	jbe	.Ltmp3279 # Offset: 3582
    00000e04: 	movl	$0x16, %edx
    00000e09: 	leaq	DATAat0x333e4(%rip), %rsi
    00000e10: 	movq	%rbp, %rdi
    00000e13: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3603
    00000e18: 	movq	%rbp, %r8
    00000e1b: 	movl	$0x1, %edx
    00000e20: 	movl	$0x1f40, %esi
    00000e25: 	movq	%r12, %rdi
    00000e28: 	leaq	_Z10logic_and2IiEbPKT_ib(%rip), %rcx
    00000e2f: 	callq	_Z23testOneFunction_logicalIiPFbPKiibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3631
    00000e34: 	movq	0xd0(%rsp), %rdi
    00000e3c: 	cmpq	%rbx, %rdi
    00000e3f: 	je	.Ltmp3280 # Offset: 3647
    00000e41: 	movq	0xe0(%rsp), %rax
    00000e49: 	leaq	0x1(%rax), %rsi
    00000e4d: 	callq	_ZdlPvm@PLT # Offset: 3661
.Ltmp3280:
    00000e52: 	leaq	DATAat0x333fb(%rip), %rdx
    00000e59: 	movq	%r13, %rsi
    00000e5c: 	movq	%rbp, %rdi
    00000e5f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3679
    00000e64: 	movq	%rbp, %r8
    00000e67: 	movl	$0x1, %edx
    00000e6c: 	movl	$0x1f40, %esi
    00000e71: 	movq	%r12, %rdi
    00000e74: 	leaq	_Z10logic_and3IiEbPKT_ib(%rip), %rcx
    00000e7b: 	callq	_Z23testOneFunction_logicalIiPFbPKiibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3707
    00000e80: 	movq	0xd0(%rsp), %rdi
    00000e88: 	cmpq	%rbx, %rdi
    00000e8b: 	je	.Ltmp3281 # Offset: 3723
    00000e8d: 	movq	0xe0(%rsp), %rax
    00000e95: 	leaq	0x1(%rax), %rsi
    00000e99: 	callq	_ZdlPvm@PLT # Offset: 3737
.Ltmp3281:
    00000e9e: 	leaq	DATAat0x33412(%rip), %rdx
    00000ea5: 	movq	%r13, %rsi
    00000ea8: 	movq	%rbp, %rdi
    00000eab: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3755
    00000eb0: 	movq	%rbp, %r8
    00000eb3: 	movl	$0x1, %edx
    00000eb8: 	movl	$0x1f40, %esi
    00000ebd: 	movq	%r12, %rdi
    00000ec0: 	leaq	_Z10logic_and4IiEbPKT_ib(%rip), %rcx
    00000ec7: 	callq	_Z23testOneFunction_logicalIiPFbPKiibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3783
    00000ecc: 	movq	0xd0(%rsp), %rdi
    00000ed4: 	cmpq	%rbx, %rdi
    00000ed7: 	je	.Ltmp3282 # Offset: 3799
    00000ed9: 	movq	0xe0(%rsp), %rax
    00000ee1: 	leaq	0x1(%rax), %rsi
    00000ee5: 	callq	_ZdlPvm@PLT # Offset: 3813
.Ltmp3282:
    00000eea: 	leaq	DATAat0x33429(%rip), %rdx
    00000ef1: 	movq	%r13, %rsi
    00000ef4: 	movq	%rbp, %rdi
    00000ef7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3831
    00000efc: 	movq	%rbp, %r8
    00000eff: 	movl	$0x1, %edx
    00000f04: 	movl	$0x1f40, %esi
    00000f09: 	movq	%r12, %rdi
    00000f0c: 	leaq	_Z10logic_and5IiEbPKT_ib(%rip), %rcx
    00000f13: 	callq	_Z23testOneFunction_logicalIiPFbPKiibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3859
    00000f18: 	movq	0xd0(%rsp), %rdi
    00000f20: 	cmpq	%rbx, %rdi
    00000f23: 	je	.Ltmp3283 # Offset: 3875
    00000f25: 	movq	0xe0(%rsp), %rax
    00000f2d: 	leaq	0x1(%rax), %rsi
    00000f31: 	callq	_ZdlPvm@PLT # Offset: 3889
.Ltmp3283:
    00000f36: 	movq	0x30(%rsp), %r15
    00000f3b: 	movq	0x38(%rsp), %r14
    00000f40: 	movq	%rbx, 0xd0(%rsp)
    00000f48: 	movq	%r15, %rax
    00000f4b: 	addq	%r14, %rax
    00000f4e: 	je	.Ltmp3284 # Offset: 3918
    00000f50: 	testq	%r15, %r15
    00000f53: 	je	.Ltmp3285 # Offset: 3923
.Ltmp3284:
    00000f59: 	movq	%r14, 0x28(%rsp)
    00000f5e: 	cmpq	$0xf, %r14
    00000f62: 	ja	.Ltmp3286 # Offset: 3938
    00000f68: 	cmpq	$0x1, %r14
    00000f6c: 	jne	.Ltmp3287 # Offset: 3948
    00000f72: 	movzbl	(%r15), %eax
    00000f76: 	movb	%al, 0xe0(%rsp)
    00000f7d: 	movq	%rbx, %rax
.Ltmp3357:
    00000f80: 	movq	%r14, 0xd8(%rsp)
    00000f88: 	movb	$0x0, (%rax,%r14)
    00000f8d: 	movabsq	$0x3fffffffffffffff, %rax
    00000f97: 	subq	0xd8(%rsp), %rax
    00000f9f: 	cmpq	$0x15, %rax
    00000fa3: 	jbe	.Ltmp3288 # Offset: 4003
    00000fa9: 	movl	$0x16, %edx
    00000fae: 	leaq	DATAat0x33440(%rip), %rsi
    00000fb5: 	movq	%rbp, %rdi
    00000fb8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4024
    00000fbd: 	movq	%rbp, %r8
    00000fc0: 	movl	$0x1, %edx
    00000fc5: 	movl	$0x1f40, %esi
    00000fca: 	movq	%r12, %rdi
    00000fcd: 	leaq	_Z10logic_and6IiEbPKT_ib(%rip), %rcx
    00000fd4: 	callq	_Z23testOneFunction_logicalIiPFbPKiibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4052
    00000fd9: 	movq	0xd0(%rsp), %rdi
    00000fe1: 	cmpq	%rbx, %rdi
    00000fe4: 	je	.Ltmp3289 # Offset: 4068
    00000fe6: 	movq	0xe0(%rsp), %rax
    00000fee: 	leaq	0x1(%rax), %rsi
    00000ff2: 	callq	_ZdlPvm@PLT # Offset: 4082
.Ltmp3289:
    00000ff7: 	leaq	DATAat0x33457(%rip), %rdx
    00000ffe: 	movq	%r13, %rsi
    00001001: 	movq	%rbp, %rdi
    00001004: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4100
    00001009: 	movq	%rbp, %r8
    0000100c: 	movl	$0x1, %edx
    00001011: 	movl	$0x1f40, %esi
    00001016: 	movq	%r12, %rdi
    00001019: 	leaq	_Z10logic_and7IiEbPKT_ib(%rip), %rcx
    00001020: 	callq	_Z23testOneFunction_logicalIiPFbPKiibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4128
    00001025: 	movq	0xd0(%rsp), %rdi
    0000102d: 	cmpq	%rbx, %rdi
    00001030: 	je	.Ltmp3290 # Offset: 4144
    00001032: 	movq	0xe0(%rsp), %rax
    0000103a: 	leaq	0x1(%rax), %rsi
    0000103e: 	callq	_ZdlPvm@PLT # Offset: 4158
.Ltmp3290:
    00001043: 	movq	0x30(%rsp), %r15
    00001048: 	movq	0x38(%rsp), %r14
    0000104d: 	movq	%rbx, 0xd0(%rsp)
    00001055: 	movq	%r15, %rax
    00001058: 	addq	%r14, %rax
    0000105b: 	je	.Ltmp3291 # Offset: 4187
    0000105d: 	testq	%r15, %r15
    00001060: 	je	.Ltmp3292 # Offset: 4192
.Ltmp3291:
    00001066: 	movq	%r14, 0x28(%rsp)
    0000106b: 	cmpq	$0xf, %r14
    0000106f: 	ja	.Ltmp3293 # Offset: 4207
    00001075: 	cmpq	$0x1, %r14
    00001079: 	jne	.Ltmp3294 # Offset: 4217
    0000107f: 	movzbl	(%r15), %eax
    00001083: 	movb	%al, 0xe0(%rsp)
    0000108a: 	movq	%rbx, %rax
.Ltmp3367:
    0000108d: 	movq	%r14, 0xd8(%rsp)
    00001095: 	movb	$0x0, (%rax,%r14)
    0000109a: 	movabsq	$0x3fffffffffffffff, %rax
    000010a4: 	subq	0xd8(%rsp), %rax
    000010ac: 	cmpq	$0x15, %rax
    000010b0: 	jbe	.Ltmp3295 # Offset: 4272
    000010b6: 	movl	$0x16, %edx
    000010bb: 	leaq	DATAat0x3346e(%rip), %rsi
    000010c2: 	movq	%rbp, %rdi
    000010c5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4293
    000010ca: 	movq	%rbp, %r8
    000010cd: 	movl	$0x1, %edx
    000010d2: 	movl	$0x1f40, %esi
    000010d7: 	movq	%r12, %rdi
    000010da: 	leaq	_Z10logic_and8IiEbPKT_ib(%rip), %rcx
    000010e1: 	callq	_Z23testOneFunction_logicalIiPFbPKiibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4321
    000010e6: 	movq	0xd0(%rsp), %rdi
    000010ee: 	cmpq	%rbx, %rdi
    000010f1: 	je	.Ltmp3296 # Offset: 4337
    000010f3: 	movq	0xe0(%rsp), %rax
    000010fb: 	leaq	0x1(%rax), %rsi
    000010ff: 	callq	_ZdlPvm@PLT # Offset: 4351
.Ltmp3296:
    00001104: 	leaq	0xb0(%rsp), %rdi
    0000110c: 	leaq	DATAat0x33485(%rip), %rdx
    00001113: 	movq	%r13, %rsi
    00001116: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4374
    0000111b: 	movl	iterations(%rip), %esi
    00001121: 	movq	0xb0(%rsp), %rdi
    00001129: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 4393
    0000112e: 	leaq	DATAat0x3349b(%rip), %rdx
    00001135: 	movq	%r13, %rsi
    00001138: 	movq	%rbp, %rdi
    0000113b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4411
    00001140: 	movq	%rbp, %r8
    00001143: 	leaq	_Z9logic_or1IiEbPKT_ib(%rip), %rcx
    0000114a: 	xorl	%edx, %edx
    0000114c: 	movq	%r12, %rdi
    0000114f: 	movl	$0x1f40, %esi
    00001154: 	callq	_Z23testOneFunction_logicalIiPFbPKiibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4436
    00001159: 	movq	0xd0(%rsp), %rdi
    00001161: 	cmpq	%rbx, %rdi
    00001164: 	je	.Ltmp3297 # Offset: 4452
    00001166: 	movq	0xe0(%rsp), %rax
    0000116e: 	leaq	0x1(%rax), %rsi
    00001172: 	callq	_ZdlPvm@PLT # Offset: 4466
.Ltmp3297:
    00001177: 	leaq	DATAat0x334b1(%rip), %rdx
    0000117e: 	movq	%r13, %rsi
    00001181: 	movq	%rbp, %rdi
    00001184: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4484
    00001189: 	movq	%rbp, %r8
    0000118c: 	leaq	_Z12logic_or_optIiEbPKT_ib(%rip), %rcx
    00001193: 	xorl	%edx, %edx
    00001195: 	movq	%r12, %rdi
    00001198: 	movl	$0x1f40, %esi
    0000119d: 	callq	_Z23testOneFunction_logicalIiPFbPKiibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4509
    000011a2: 	movq	0xd0(%rsp), %rdi
    000011aa: 	cmpq	%rbx, %rdi
    000011ad: 	je	.Ltmp3298 # Offset: 4525
    000011af: 	movq	0xe0(%rsp), %rax
    000011b7: 	leaq	0x1(%rax), %rsi
    000011bb: 	callq	_ZdlPvm@PLT # Offset: 4539
.Ltmp3298:
    000011c0: 	movq	0x30(%rsp), %r15
    000011c5: 	movq	0x38(%rsp), %r14
    000011ca: 	movq	%rbx, 0xd0(%rsp)
    000011d2: 	movq	%r15, %rax
    000011d5: 	addq	%r14, %rax
    000011d8: 	je	.Ltmp3299 # Offset: 4568
    000011da: 	testq	%r15, %r15
    000011dd: 	je	.Ltmp3300 # Offset: 4573
.Ltmp3299:
    000011e3: 	movq	%r14, 0x28(%rsp)
    000011e8: 	cmpq	$0xf, %r14
    000011ec: 	ja	.Ltmp3301 # Offset: 4588
    000011f2: 	cmpq	$0x1, %r14
    000011f6: 	jne	.Ltmp3302 # Offset: 4598
    000011fc: 	movzbl	(%r15), %eax
    00001200: 	movb	%al, 0xe0(%rsp)
    00001207: 	movq	%rbx, %rax
.Ltmp3371:
    0000120a: 	movq	%r14, 0xd8(%rsp)
    00001212: 	movb	$0x0, (%rax,%r14)
    00001217: 	movabsq	$0x3fffffffffffffff, %rax
    00001221: 	subq	0xd8(%rsp), %rax
    00001229: 	cmpq	$0x14, %rax
    0000122d: 	jbe	.Ltmp3303 # Offset: 4653
    00001233: 	movl	$0x15, %edx
    00001238: 	leaq	DATAat0x334ce(%rip), %rsi
    0000123f: 	movq	%rbp, %rdi
    00001242: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4674
    00001247: 	movq	%rbp, %r8
    0000124a: 	leaq	_Z9logic_or2IiEbPKT_ib(%rip), %rcx
    00001251: 	xorl	%edx, %edx
    00001253: 	movq	%r12, %rdi
    00001256: 	movl	$0x1f40, %esi
    0000125b: 	callq	_Z23testOneFunction_logicalIiPFbPKiibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4699
    00001260: 	movq	0xd0(%rsp), %rdi
    00001268: 	cmpq	%rbx, %rdi
    0000126b: 	je	.Ltmp3304 # Offset: 4715
    0000126d: 	movq	0xe0(%rsp), %rax
    00001275: 	leaq	0x1(%rax), %rsi
    00001279: 	callq	_ZdlPvm@PLT # Offset: 4729
.Ltmp3304:
    0000127e: 	leaq	DATAat0x334e4(%rip), %rdx
    00001285: 	movq	%r13, %rsi
    00001288: 	movq	%rbp, %rdi
    0000128b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4747
    00001290: 	movq	%rbp, %r8
    00001293: 	leaq	_Z9logic_or3IiEbPKT_ib(%rip), %rcx
    0000129a: 	xorl	%edx, %edx
    0000129c: 	movq	%r12, %rdi
    0000129f: 	movl	$0x1f40, %esi
    000012a4: 	callq	_Z23testOneFunction_logicalIiPFbPKiibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4772
    000012a9: 	movq	0xd0(%rsp), %rdi
    000012b1: 	cmpq	%rbx, %rdi
    000012b4: 	je	.Ltmp3305 # Offset: 4788
    000012b6: 	movq	0xe0(%rsp), %rax
    000012be: 	leaq	0x1(%rax), %rsi
    000012c2: 	callq	_ZdlPvm@PLT # Offset: 4802
.Ltmp3305:
    000012c7: 	movq	0x30(%rsp), %r15
    000012cc: 	movq	0x38(%rsp), %r14
    000012d1: 	movq	%rbx, 0xd0(%rsp)
    000012d9: 	movq	%r15, %rax
    000012dc: 	addq	%r14, %rax
    000012df: 	je	.Ltmp3306 # Offset: 4831
    000012e1: 	testq	%r15, %r15
    000012e4: 	je	.Ltmp3307 # Offset: 4836
.Ltmp3306:
    000012ea: 	movq	%r14, 0x28(%rsp)
    000012ef: 	cmpq	$0xf, %r14
    000012f3: 	ja	.Ltmp3308 # Offset: 4851
    000012f9: 	cmpq	$0x1, %r14
    000012fd: 	jne	.Ltmp3309 # Offset: 4861
    00001303: 	movzbl	(%r15), %eax
    00001307: 	movb	%al, 0xe0(%rsp)
    0000130e: 	movq	%rbx, %rax
.Ltmp3369:
    00001311: 	movq	%r14, 0xd8(%rsp)
    00001319: 	movb	$0x0, (%rax,%r14)
    0000131e: 	movabsq	$0x3fffffffffffffff, %rax
    00001328: 	subq	0xd8(%rsp), %rax
    00001330: 	cmpq	$0x14, %rax
    00001334: 	jbe	.Ltmp3310 # Offset: 4916
    0000133a: 	movl	$0x15, %edx
    0000133f: 	leaq	DATAat0x334fa(%rip), %rsi
    00001346: 	movq	%rbp, %rdi
    00001349: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4937
    0000134e: 	movq	%rbp, %r8
    00001351: 	leaq	_Z9logic_or4IiEbPKT_ib(%rip), %rcx
    00001358: 	xorl	%edx, %edx
    0000135a: 	movq	%r12, %rdi
    0000135d: 	movl	$0x1f40, %esi
    00001362: 	callq	_Z23testOneFunction_logicalIiPFbPKiibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4962
    00001367: 	movq	0xd0(%rsp), %rdi
    0000136f: 	cmpq	%rbx, %rdi
    00001372: 	je	.Ltmp3311 # Offset: 4978
    00001374: 	movq	0xe0(%rsp), %rax
    0000137c: 	leaq	0x1(%rax), %rsi
    00001380: 	callq	_ZdlPvm@PLT # Offset: 4992
.Ltmp3311:
    00001385: 	movq	0x30(%rsp), %r15
    0000138a: 	movq	0x38(%rsp), %r14
    0000138f: 	movq	%rbx, 0xd0(%rsp)
    00001397: 	movq	%r15, %rax
    0000139a: 	addq	%r14, %rax
    0000139d: 	je	.Ltmp3312 # Offset: 5021
    0000139f: 	testq	%r15, %r15
    000013a2: 	je	.Ltmp3313 # Offset: 5026
.Ltmp3312:
    000013a8: 	movq	%r14, 0x28(%rsp)
    000013ad: 	cmpq	$0xf, %r14
    000013b1: 	ja	.Ltmp3314 # Offset: 5041
    000013b7: 	cmpq	$0x1, %r14
    000013bb: 	jne	.Ltmp3315 # Offset: 5051
    000013c1: 	movzbl	(%r15), %eax
    000013c5: 	movb	%al, 0xe0(%rsp)
    000013cc: 	movq	%rbx, %rax
.Ltmp3375:
    000013cf: 	movq	%r14, 0xd8(%rsp)
    000013d7: 	movb	$0x0, (%rax,%r14)
    000013dc: 	movabsq	$0x3fffffffffffffff, %rax
    000013e6: 	subq	0xd8(%rsp), %rax
    000013ee: 	cmpq	$0x14, %rax
    000013f2: 	jbe	.Ltmp3316 # Offset: 5106
    000013f8: 	movl	$0x15, %edx
    000013fd: 	leaq	DATAat0x33510(%rip), %rsi
    00001404: 	movq	%rbp, %rdi
    00001407: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5127
    0000140c: 	movq	%rbp, %r8
    0000140f: 	leaq	_Z9logic_or5IiEbPKT_ib(%rip), %rcx
    00001416: 	xorl	%edx, %edx
    00001418: 	movq	%r12, %rdi
    0000141b: 	movl	$0x1f40, %esi
    00001420: 	callq	_Z23testOneFunction_logicalIiPFbPKiibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5152
    00001425: 	movq	0xd0(%rsp), %rdi
    0000142d: 	cmpq	%rbx, %rdi
    00001430: 	je	.Ltmp3317 # Offset: 5168
    00001432: 	movq	0xe0(%rsp), %rax
    0000143a: 	leaq	0x1(%rax), %rsi
    0000143e: 	callq	_ZdlPvm@PLT # Offset: 5182
.Ltmp3317:
    00001443: 	movq	0x30(%rsp), %r15
    00001448: 	movq	0x38(%rsp), %r14
    0000144d: 	movq	%rbx, 0xd0(%rsp)
    00001455: 	movq	%r15, %rax
    00001458: 	addq	%r14, %rax
    0000145b: 	je	.Ltmp3318 # Offset: 5211
    0000145d: 	testq	%r15, %r15
    00001460: 	je	.Ltmp3319 # Offset: 5216
.Ltmp3318:
    00001466: 	movq	%r14, 0x28(%rsp)
    0000146b: 	cmpq	$0xf, %r14
    0000146f: 	ja	.Ltmp3320 # Offset: 5231
    00001475: 	cmpq	$0x1, %r14
    00001479: 	jne	.Ltmp3321 # Offset: 5241
    0000147f: 	movzbl	(%r15), %eax
    00001483: 	movb	%al, 0xe0(%rsp)
    0000148a: 	movq	%rbx, %rax
.Ltmp3373:
    0000148d: 	movq	%r14, 0xd8(%rsp)
    00001495: 	movb	$0x0, (%rax,%r14)
    0000149a: 	movabsq	$0x3fffffffffffffff, %rax
    000014a4: 	subq	0xd8(%rsp), %rax
    000014ac: 	cmpq	$0x14, %rax
    000014b0: 	jbe	.Ltmp3322 # Offset: 5296
    000014b6: 	movl	$0x15, %edx
    000014bb: 	leaq	DATAat0x33526(%rip), %rsi
    000014c2: 	movq	%rbp, %rdi
    000014c5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5317
    000014ca: 	movq	%rbp, %r8
    000014cd: 	leaq	_Z9logic_or6IiEbPKT_ib(%rip), %rcx
    000014d4: 	xorl	%edx, %edx
    000014d6: 	movq	%r12, %rdi
    000014d9: 	movl	$0x1f40, %esi
    000014de: 	callq	_Z23testOneFunction_logicalIiPFbPKiibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5342
    000014e3: 	movq	0xd0(%rsp), %rdi
    000014eb: 	cmpq	%rbx, %rdi
    000014ee: 	je	.Ltmp3323 # Offset: 5358
    000014f0: 	movq	0xe0(%rsp), %rax
    000014f8: 	leaq	0x1(%rax), %rsi
    000014fc: 	callq	_ZdlPvm@PLT # Offset: 5372
.Ltmp3323:
    00001501: 	leaq	DATAat0x3353c(%rip), %rdx
    00001508: 	movq	%r13, %rsi
    0000150b: 	movq	%rbp, %rdi
    0000150e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5390
    00001513: 	movq	%rbp, %r8
    00001516: 	leaq	_Z9logic_or7IiEbPKT_ib(%rip), %rcx
    0000151d: 	xorl	%edx, %edx
    0000151f: 	movq	%r12, %rdi
    00001522: 	movl	$0x1f40, %esi
    00001527: 	callq	_Z23testOneFunction_logicalIiPFbPKiibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5415
    0000152c: 	movq	0xd0(%rsp), %rdi
    00001534: 	cmpq	%rbx, %rdi
    00001537: 	je	.Ltmp3324 # Offset: 5431
    00001539: 	movq	0xe0(%rsp), %rax
    00001541: 	leaq	0x1(%rax), %rsi
    00001545: 	callq	_ZdlPvm@PLT # Offset: 5445
.Ltmp3324:
    0000154a: 	leaq	DATAat0x33552(%rip), %rdx
    00001551: 	movq	%r13, %rsi
    00001554: 	movq	%rbp, %rdi
    00001557: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5463
    0000155c: 	movq	%rbp, %r8
    0000155f: 	leaq	_Z9logic_or8IiEbPKT_ib(%rip), %rcx
    00001566: 	xorl	%edx, %edx
    00001568: 	movq	%r12, %rdi
    0000156b: 	movl	$0x1f40, %esi
    00001570: 	callq	_Z23testOneFunction_logicalIiPFbPKiibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5488
    00001575: 	movq	0xd0(%rsp), %rdi
    0000157d: 	cmpq	%rbx, %rdi
    00001580: 	je	.Ltmp3325 # Offset: 5504
    00001582: 	movq	0xe0(%rsp), %rax
    0000158a: 	leaq	0x1(%rax), %rsi
    0000158e: 	callq	_ZdlPvm@PLT # Offset: 5518
.Ltmp3325:
    00001593: 	movq	0x30(%rsp), %r14
    00001598: 	movq	0x38(%rsp), %r13
    0000159d: 	movq	%rbx, 0xd0(%rsp)
    000015a5: 	movq	%r14, %rax
    000015a8: 	addq	%r13, %rax
    000015ab: 	je	.Ltmp3326 # Offset: 5547
    000015ad: 	testq	%r14, %r14
    000015b0: 	je	.Ltmp3327 # Offset: 5552
.Ltmp3326:
    000015b6: 	movq	%r13, 0x28(%rsp)
    000015bb: 	cmpq	$0xf, %r13
    000015bf: 	ja	.Ltmp3328 # Offset: 5567
    000015c5: 	cmpq	$0x1, %r13
    000015c9: 	jne	.Ltmp3329 # Offset: 5577
    000015cf: 	movzbl	(%r14), %eax
    000015d3: 	movb	%al, 0xe0(%rsp)
    000015da: 	movq	%rbx, %rax
.Ltmp3377:
    000015dd: 	movq	%r13, 0xd8(%rsp)
    000015e5: 	movb	$0x0, (%rax,%r13)
    000015ea: 	movabsq	$0x3fffffffffffffff, %rax
    000015f4: 	subq	0xd8(%rsp), %rax
    000015fc: 	cmpq	$0x13, %rax
    00001600: 	jbe	.Ltmp3330 # Offset: 5632
    00001606: 	movl	$0x14, %edx
    0000160b: 	leaq	DATAat0x33568(%rip), %rsi
    00001612: 	movq	%rbp, %rdi
    00001615: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5653
    0000161a: 	movl	iterations(%rip), %esi
    00001620: 	movq	0xd0(%rsp), %rdi
    00001628: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 5672
    0000162d: 	movq	0xd0(%rsp), %rdi
    00001635: 	cmpq	%rbx, %rdi
    00001638: 	je	.Ltmp3331 # Offset: 5688
    0000163a: 	movq	0xe0(%rsp), %rax
    00001642: 	leaq	0x1(%rax), %rsi
    00001646: 	callq	_ZdlPvm@PLT # Offset: 5702
.Ltmp3331:
    0000164b: 	movq	0xb0(%rsp), %rdi
    00001653: 	leaq	0xc0(%rsp), %rax
    0000165b: 	cmpq	%rax, %rdi
    0000165e: 	je	.Ltmp3332 # Offset: 5726
    00001660: 	movq	0xc0(%rsp), %rax
    00001668: 	leaq	0x1(%rax), %rsi
    0000166c: 	callq	_ZdlPvm@PLT # Offset: 5740
.Ltmp3332:
    00001671: 	movq	0x90(%rsp), %rdi
    00001679: 	leaq	0xa0(%rsp), %rax
    00001681: 	cmpq	%rax, %rdi
    00001684: 	je	.Ltmp3333 # Offset: 5764
    00001686: 	movq	0xa0(%rsp), %rax
    0000168e: 	leaq	0x1(%rax), %rsi
    00001692: 	callq	_ZdlPvm@PLT # Offset: 5778
.Ltmp3333:
    00001697: 	movq	0x70(%rsp), %rdi
    0000169c: 	cmpq	0x10(%rsp), %rdi
    000016a1: 	je	.Ltmp3334 # Offset: 5793
    000016a3: 	movq	0x80(%rsp), %rax
    000016ab: 	leaq	0x1(%rax), %rsi
    000016af: 	callq	_ZdlPvm@PLT # Offset: 5807
.Ltmp3334:
    000016b4: 	movq	0x50(%rsp), %rdi
    000016b9: 	cmpq	0x8(%rsp), %rdi
    000016be: 	je	.Ltmp3335 # Offset: 5822
    000016c0: 	movq	0x60(%rsp), %rax
    000016c5: 	leaq	0x1(%rax), %rsi
    000016c9: 	callq	_ZdlPvm@PLT # Offset: 5833
.Ltmp3335:
    000016ce: 	movq	%r12, %rdi
    000016d1: 	movl	$0x4, %esi
    000016d6: 	callq	_ZdlPvm@PLT # Offset: 5846
    000016db: 	movq	0x30(%rsp), %rdi
    000016e0: 	cmpq	0x18(%rsp), %rdi
    000016e5: 	je	.Ltmp3336 # Offset: 5861
    000016e7: 	movq	0x40(%rsp), %rax
    000016ec: 	leaq	0x1(%rax), %rsi
    000016f0: 	callq	_ZdlPvm@PLT # Offset: 5872
.Ltmp3336:
    000016f5: 	movq	0xf8(%rsp), %rax
    000016fd: 	subq	%fs:0x28, %rax
    00001706: 	jne	.Ltmp3337 # Offset: 5894
    0000170c: 	addq	$0x108, %rsp
    00001713: 	popq	%rbx
    00001714: 	popq	%rbp
    00001715: 	popq	%r12
    00001717: 	popq	%r13
    00001719: 	popq	%r14
    0000171b: 	popq	%r15
    0000171d: 	retq # Offset: 5917
    0000171e: 	nop # Size: 2
.Ltmp3196:
    00001720: 	testq	%r14, %r14
    00001723: 	jne	.Ltmp3338 # Offset: 5923
    00001729: 	movq	%rbx, %rax
    0000172c: 	jmp	.Ltmp3339 # Offset: 5932
    00001731: 	nopl	(%rax) # Size: 7
.Ltmp3214:
    00001738: 	testq	%r14, %r14
    0000173b: 	jne	.Ltmp3340 # Offset: 5947
    00001741: 	movq	%rbx, %rax
    00001744: 	jmp	.Ltmp3341 # Offset: 5956
    00001749: 	nopl	(%rax) # Size: 7
.Ltmp3208:
    00001750: 	testq	%r14, %r14
    00001753: 	jne	.Ltmp3342 # Offset: 5971
    00001759: 	movq	%rbx, %rax
    0000175c: 	jmp	.Ltmp3343 # Offset: 5980
    00001761: 	nopl	(%rax) # Size: 7
.Ltmp3202:
    00001768: 	testq	%r14, %r14
    0000176b: 	jne	.Ltmp3344 # Offset: 5995
    00001771: 	movq	%rbx, %rax
    00001774: 	jmp	.Ltmp3345 # Offset: 6004
    00001779: 	nopl	(%rax) # Size: 7
.Ltmp3221:
    00001780: 	testq	%r14, %r14
    00001783: 	jne	.Ltmp3346 # Offset: 6019
    00001789: 	movq	0x8(%rsp), %rax
    0000178e: 	jmp	.Ltmp3347 # Offset: 6030
    00001793: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3249:
    00001798: 	testq	%r14, %r14
    0000179b: 	jne	.Ltmp3348 # Offset: 6043
    000017a1: 	movq	0x10(%rsp), %rax
    000017a6: 	jmp	.Ltmp3349 # Offset: 6054
    000017ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3238:
    000017b0: 	testq	%r14, %r14
    000017b3: 	jne	.Ltmp3350 # Offset: 6067
    000017b9: 	movq	%rbx, %rax
    000017bc: 	jmp	.Ltmp3351 # Offset: 6076
    000017c1: 	nopl	(%rax) # Size: 7
.Ltmp3232:
    000017c8: 	testq	%r14, %r14
    000017cb: 	jne	.Ltmp3352 # Offset: 6091
    000017d1: 	movq	%rbx, %rax
    000017d4: 	jmp	.Ltmp3353 # Offset: 6100
    000017d9: 	nopl	(%rax) # Size: 7
.Ltmp3226:
    000017e0: 	testq	%r14, %r14
    000017e3: 	jne	.Ltmp3354 # Offset: 6115
    000017e9: 	movq	%rbx, %rax
    000017ec: 	jmp	.Ltmp3355 # Offset: 6124
    000017f1: 	nopl	(%rax) # Size: 7
.Ltmp3287:
    000017f8: 	testq	%r14, %r14
    000017fb: 	jne	.Ltmp3356 # Offset: 6139
    00001801: 	movq	%rbx, %rax
    00001804: 	jmp	.Ltmp3357 # Offset: 6148
    00001809: 	nopl	(%rax) # Size: 7
.Ltmp3278:
    00001810: 	testq	%r14, %r14
    00001813: 	jne	.Ltmp3358 # Offset: 6163
    00001819: 	movq	%rbx, %rax
    0000181c: 	jmp	.Ltmp3359 # Offset: 6172
    00001821: 	nopl	(%rax) # Size: 7
.Ltmp3269:
    00001828: 	testq	%r14, %r14
    0000182b: 	jne	.Ltmp3360 # Offset: 6187
    00001831: 	movq	%rbx, %rax
    00001834: 	jmp	.Ltmp3361 # Offset: 6196
    00001839: 	nopl	(%rax) # Size: 7
.Ltmp3262:
    00001840: 	testq	%r14, %r14
    00001843: 	jne	.Ltmp3362 # Offset: 6211
    00001849: 	movq	%rbx, %rax
    0000184c: 	jmp	.Ltmp3363 # Offset: 6220
    00001851: 	nopl	(%rax) # Size: 7
.Ltmp3255:
    00001858: 	testq	%r14, %r14
    0000185b: 	jne	.Ltmp3364 # Offset: 6235
    00001861: 	movq	%rbx, %rax
    00001864: 	jmp	.Ltmp3365 # Offset: 6244
    00001869: 	nopl	(%rax) # Size: 7
.Ltmp3294:
    00001870: 	testq	%r14, %r14
    00001873: 	jne	.Ltmp3366 # Offset: 6259
    00001879: 	movq	%rbx, %rax
    0000187c: 	jmp	.Ltmp3367 # Offset: 6268
    00001881: 	nopl	(%rax) # Size: 7
.Ltmp3309:
    00001888: 	testq	%r14, %r14
    0000188b: 	jne	.Ltmp3368 # Offset: 6283
    00001891: 	movq	%rbx, %rax
    00001894: 	jmp	.Ltmp3369 # Offset: 6292
    00001899: 	nopl	(%rax) # Size: 7
.Ltmp3302:
    000018a0: 	testq	%r14, %r14
    000018a3: 	jne	.Ltmp3370 # Offset: 6307
    000018a9: 	movq	%rbx, %rax
    000018ac: 	jmp	.Ltmp3371 # Offset: 6316
    000018b1: 	nopl	(%rax) # Size: 7
.Ltmp3321:
    000018b8: 	testq	%r14, %r14
    000018bb: 	jne	.Ltmp3372 # Offset: 6331
    000018c1: 	movq	%rbx, %rax
    000018c4: 	jmp	.Ltmp3373 # Offset: 6340
    000018c9: 	nopl	(%rax) # Size: 7
.Ltmp3315:
    000018d0: 	testq	%r14, %r14
    000018d3: 	jne	.Ltmp3374 # Offset: 6355
    000018d9: 	movq	%rbx, %rax
    000018dc: 	jmp	.Ltmp3375 # Offset: 6364
    000018e1: 	nopl	(%rax) # Size: 7
.Ltmp3329:
    000018e8: 	testq	%r13, %r13
    000018eb: 	jne	.Ltmp3376 # Offset: 6379
    000018f1: 	movq	%rbx, %rax
    000018f4: 	jmp	.Ltmp3377 # Offset: 6388
    000018f9: 	nopl	(%rax) # Size: 7
.Ltmp3195:
    00001900: 	leaq	0x28(%rsp), %rsi
    00001905: 	xorl	%edx, %edx
    00001907: 	movq	%rbp, %rdi
    0000190a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6410
    0000190f: 	movq	%rax, 0xd0(%rsp)
    00001917: 	movq	%rax, %rdi
    0000191a: 	movq	0x28(%rsp), %rax
    0000191f: 	movq	%rax, 0xe0(%rsp)
.Ltmp3378:
    00001927: 	movq	%r14, %rdx
    0000192a: 	movq	%r15, %rsi
    0000192d: 	callq	memcpy@PLT # Offset: 6445
    00001932: 	movq	0x28(%rsp), %r14
    00001937: 	movq	0xd0(%rsp), %rax
    0000193f: 	jmp	.Ltmp3339 # Offset: 6463
    00001944: 	nopl	(%rax) # Size: 4
.Ltmp3207:
    00001948: 	leaq	0x28(%rsp), %rsi
    0000194d: 	xorl	%edx, %edx
    0000194f: 	movq	%rbp, %rdi
    00001952: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6482
    00001957: 	movq	%rax, 0xd0(%rsp)
    0000195f: 	movq	%rax, %rdi
    00001962: 	movq	0x28(%rsp), %rax
    00001967: 	movq	%rax, 0xe0(%rsp)
.Ltmp3380:
    0000196f: 	movq	%r14, %rdx
    00001972: 	movq	%r15, %rsi
    00001975: 	callq	memcpy@PLT # Offset: 6517
    0000197a: 	movq	0x28(%rsp), %r14
    0000197f: 	movq	0xd0(%rsp), %rax
    00001987: 	jmp	.Ltmp3343 # Offset: 6535
    0000198c: 	nopl	(%rax) # Size: 4
.Ltmp3201:
    00001990: 	leaq	0x28(%rsp), %rsi
    00001995: 	xorl	%edx, %edx
    00001997: 	movq	%rbp, %rdi
    0000199a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6554
    0000199f: 	movq	%rax, 0xd0(%rsp)
    000019a7: 	movq	%rax, %rdi
    000019aa: 	movq	0x28(%rsp), %rax
    000019af: 	movq	%rax, 0xe0(%rsp)
.Ltmp3381:
    000019b7: 	movq	%r14, %rdx
    000019ba: 	movq	%r15, %rsi
    000019bd: 	callq	memcpy@PLT # Offset: 6589
    000019c2: 	movq	0x28(%rsp), %r14
    000019c7: 	movq	0xd0(%rsp), %rax
    000019cf: 	jmp	.Ltmp3345 # Offset: 6607
    000019d4: 	nopl	(%rax) # Size: 4
.Ltmp3213:
    000019d8: 	leaq	0x28(%rsp), %rsi
    000019dd: 	xorl	%edx, %edx
    000019df: 	movq	%rbp, %rdi
    000019e2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6626
    000019e7: 	movq	%rax, 0xd0(%rsp)
    000019ef: 	movq	%rax, %rdi
    000019f2: 	movq	0x28(%rsp), %rax
    000019f7: 	movq	%rax, 0xe0(%rsp)
.Ltmp3379:
    000019ff: 	movq	%r14, %rdx
    00001a02: 	movq	%r15, %rsi
    00001a05: 	callq	memcpy@PLT # Offset: 6661
    00001a0a: 	movq	0x28(%rsp), %r14
    00001a0f: 	movq	0xd0(%rsp), %rax
    00001a17: 	jmp	.Ltmp3341 # Offset: 6679
    00001a1c: 	nopl	(%rax) # Size: 4
.Ltmp3225:
    00001a20: 	leaq	0x28(%rsp), %rsi
    00001a25: 	xorl	%edx, %edx
    00001a27: 	movq	%rbp, %rdi
    00001a2a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6698
    00001a2f: 	movq	%rax, 0xd0(%rsp)
    00001a37: 	movq	%rax, %rdi
    00001a3a: 	movq	0x28(%rsp), %rax
    00001a3f: 	movq	%rax, 0xe0(%rsp)
.Ltmp3386:
    00001a47: 	movq	%r14, %rdx
    00001a4a: 	movq	%r15, %rsi
    00001a4d: 	callq	memcpy@PLT # Offset: 6733
    00001a52: 	movq	0x28(%rsp), %r14
    00001a57: 	movq	0xd0(%rsp), %rax
    00001a5f: 	jmp	.Ltmp3355 # Offset: 6751
    00001a64: 	nopl	(%rax) # Size: 4
.Ltmp3220:
    00001a68: 	leaq	0x28(%rsp), %rsi
    00001a6d: 	leaq	0x50(%rsp), %rdi
    00001a72: 	xorl	%edx, %edx
    00001a74: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6772
    00001a79: 	movq	%rax, 0x50(%rsp)
    00001a7e: 	movq	%rax, %rdi
    00001a81: 	movq	0x28(%rsp), %rax
    00001a86: 	movq	%rax, 0x60(%rsp)
.Ltmp3382:
    00001a8b: 	movq	%r14, %rdx
    00001a8e: 	movq	%r15, %rsi
    00001a91: 	callq	memcpy@PLT # Offset: 6801
    00001a96: 	movq	0x28(%rsp), %r14
    00001a9b: 	movq	0x50(%rsp), %rax
    00001aa0: 	jmp	.Ltmp3347 # Offset: 6816
    00001aa5: 	nopl	(%rax) # Size: 3
.Ltmp3237:
    00001aa8: 	leaq	0x28(%rsp), %rsi
    00001aad: 	xorl	%edx, %edx
    00001aaf: 	movq	%rbp, %rdi
    00001ab2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6834
    00001ab7: 	movq	%rax, 0xd0(%rsp)
    00001abf: 	movq	%rax, %rdi
    00001ac2: 	movq	0x28(%rsp), %rax
    00001ac7: 	movq	%rax, 0xe0(%rsp)
.Ltmp3384:
    00001acf: 	movq	%r14, %rdx
    00001ad2: 	movq	%r15, %rsi
    00001ad5: 	callq	memcpy@PLT # Offset: 6869
    00001ada: 	movq	0x28(%rsp), %r14
    00001adf: 	movq	0xd0(%rsp), %rax
    00001ae7: 	jmp	.Ltmp3351 # Offset: 6887
    00001aec: 	nopl	(%rax) # Size: 4
.Ltmp3231:
    00001af0: 	leaq	0x28(%rsp), %rsi
    00001af5: 	xorl	%edx, %edx
    00001af7: 	movq	%rbp, %rdi
    00001afa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6906
    00001aff: 	movq	%rax, 0xd0(%rsp)
    00001b07: 	movq	%rax, %rdi
    00001b0a: 	movq	0x28(%rsp), %rax
    00001b0f: 	movq	%rax, 0xe0(%rsp)
.Ltmp3385:
    00001b17: 	movq	%r14, %rdx
    00001b1a: 	movq	%r15, %rsi
    00001b1d: 	callq	memcpy@PLT # Offset: 6941
    00001b22: 	movq	0x28(%rsp), %r14
    00001b27: 	movq	0xd0(%rsp), %rax
    00001b2f: 	jmp	.Ltmp3353 # Offset: 6959
    00001b34: 	nopl	(%rax) # Size: 4
.Ltmp3286:
    00001b38: 	leaq	0x28(%rsp), %rsi
    00001b3d: 	xorl	%edx, %edx
    00001b3f: 	movq	%rbp, %rdi
    00001b42: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6978
    00001b47: 	movq	%rax, 0xd0(%rsp)
    00001b4f: 	movq	%rax, %rdi
    00001b52: 	movq	0x28(%rsp), %rax
    00001b57: 	movq	%rax, 0xe0(%rsp)
.Ltmp3387:
    00001b5f: 	movq	%r14, %rdx
    00001b62: 	movq	%r15, %rsi
    00001b65: 	callq	memcpy@PLT # Offset: 7013
    00001b6a: 	movq	0x28(%rsp), %r14
    00001b6f: 	movq	0xd0(%rsp), %rax
    00001b77: 	jmp	.Ltmp3357 # Offset: 7031
    00001b7c: 	nopl	(%rax) # Size: 4
.Ltmp3248:
    00001b80: 	leaq	0x28(%rsp), %rsi
    00001b85: 	leaq	0x70(%rsp), %rdi
    00001b8a: 	xorl	%edx, %edx
    00001b8c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7052
    00001b91: 	movq	%rax, 0x70(%rsp)
    00001b96: 	movq	%rax, %rdi
    00001b99: 	movq	0x28(%rsp), %rax
    00001b9e: 	movq	%rax, 0x80(%rsp)
.Ltmp3383:
    00001ba6: 	movq	%r14, %rdx
    00001ba9: 	movq	%r15, %rsi
    00001bac: 	callq	memcpy@PLT # Offset: 7084
    00001bb1: 	movq	0x28(%rsp), %r14
    00001bb6: 	movq	0x70(%rsp), %rax
    00001bbb: 	jmp	.Ltmp3349 # Offset: 7099
.Ltmp3261:
    00001bc0: 	leaq	0x28(%rsp), %rsi
    00001bc5: 	xorl	%edx, %edx
    00001bc7: 	movq	%rbp, %rdi
    00001bca: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7114
    00001bcf: 	movq	%rax, 0xd0(%rsp)
    00001bd7: 	movq	%rax, %rdi
    00001bda: 	movq	0x28(%rsp), %rax
    00001bdf: 	movq	%rax, 0xe0(%rsp)
.Ltmp3390:
    00001be7: 	movq	%r14, %rdx
    00001bea: 	movq	%r15, %rsi
    00001bed: 	callq	memcpy@PLT # Offset: 7149
    00001bf2: 	movq	0x28(%rsp), %r14
    00001bf7: 	movq	0xd0(%rsp), %rax
    00001bff: 	jmp	.Ltmp3363 # Offset: 7167
    00001c04: 	nopl	(%rax) # Size: 4
.Ltmp3254:
    00001c08: 	leaq	0x28(%rsp), %rsi
    00001c0d: 	xorl	%edx, %edx
    00001c0f: 	movq	%rbp, %rdi
    00001c12: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7186
    00001c17: 	movq	%rax, 0xd0(%rsp)
    00001c1f: 	movq	%rax, %rdi
    00001c22: 	movq	0x28(%rsp), %rax
    00001c27: 	movq	%rax, 0xe0(%rsp)
.Ltmp3391:
    00001c2f: 	movq	%r14, %rdx
    00001c32: 	movq	%r15, %rsi
    00001c35: 	callq	memcpy@PLT # Offset: 7221
    00001c3a: 	movq	0x28(%rsp), %r14
    00001c3f: 	movq	0xd0(%rsp), %rax
    00001c47: 	jmp	.Ltmp3365 # Offset: 7239
    00001c4c: 	nopl	(%rax) # Size: 4
.Ltmp3277:
    00001c50: 	leaq	0x28(%rsp), %rsi
    00001c55: 	xorl	%edx, %edx
    00001c57: 	movq	%rbp, %rdi
    00001c5a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7258
    00001c5f: 	movq	%rax, 0xd0(%rsp)
    00001c67: 	movq	%rax, %rdi
    00001c6a: 	movq	0x28(%rsp), %rax
    00001c6f: 	movq	%rax, 0xe0(%rsp)
.Ltmp3388:
    00001c77: 	movq	%r14, %rdx
    00001c7a: 	movq	%r15, %rsi
    00001c7d: 	callq	memcpy@PLT # Offset: 7293
    00001c82: 	movq	0x28(%rsp), %r14
    00001c87: 	movq	0xd0(%rsp), %rax
    00001c8f: 	jmp	.Ltmp3359 # Offset: 7311
    00001c94: 	nopl	(%rax) # Size: 4
.Ltmp3268:
    00001c98: 	leaq	0x28(%rsp), %rsi
    00001c9d: 	xorl	%edx, %edx
    00001c9f: 	movq	%rbp, %rdi
    00001ca2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7330
    00001ca7: 	movq	%rax, 0xd0(%rsp)
    00001caf: 	movq	%rax, %rdi
    00001cb2: 	movq	0x28(%rsp), %rax
    00001cb7: 	movq	%rax, 0xe0(%rsp)
.Ltmp3389:
    00001cbf: 	movq	%r14, %rdx
    00001cc2: 	movq	%r15, %rsi
    00001cc5: 	callq	memcpy@PLT # Offset: 7365
    00001cca: 	movq	0x28(%rsp), %r14
    00001ccf: 	movq	0xd0(%rsp), %rax
    00001cd7: 	jmp	.Ltmp3361 # Offset: 7383
    00001cdc: 	nopl	(%rax) # Size: 4
.Ltmp3293:
    00001ce0: 	leaq	0x28(%rsp), %rsi
    00001ce5: 	xorl	%edx, %edx
    00001ce7: 	movq	%rbp, %rdi
    00001cea: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7402
    00001cef: 	movq	%rax, 0xd0(%rsp)
    00001cf7: 	movq	%rax, %rdi
    00001cfa: 	movq	0x28(%rsp), %rax
    00001cff: 	movq	%rax, 0xe0(%rsp)
.Ltmp3392:
    00001d07: 	movq	%r14, %rdx
    00001d0a: 	movq	%r15, %rsi
    00001d0d: 	callq	memcpy@PLT # Offset: 7437
    00001d12: 	movq	0x28(%rsp), %r14
    00001d17: 	movq	0xd0(%rsp), %rax
    00001d1f: 	jmp	.Ltmp3367 # Offset: 7455
    00001d24: 	nopl	(%rax) # Size: 4
.Ltmp3308:
    00001d28: 	leaq	0x28(%rsp), %rsi
    00001d2d: 	xorl	%edx, %edx
    00001d2f: 	movq	%rbp, %rdi
    00001d32: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7474
    00001d37: 	movq	%rax, 0xd0(%rsp)
    00001d3f: 	movq	%rax, %rdi
    00001d42: 	movq	0x28(%rsp), %rax
    00001d47: 	movq	%rax, 0xe0(%rsp)
.Ltmp3393:
    00001d4f: 	movq	%r14, %rdx
    00001d52: 	movq	%r15, %rsi
    00001d55: 	callq	memcpy@PLT # Offset: 7509
    00001d5a: 	movq	0x28(%rsp), %r14
    00001d5f: 	movq	0xd0(%rsp), %rax
    00001d67: 	jmp	.Ltmp3369 # Offset: 7527
    00001d6c: 	nopl	(%rax) # Size: 4
.Ltmp3301:
    00001d70: 	leaq	0x28(%rsp), %rsi
    00001d75: 	xorl	%edx, %edx
    00001d77: 	movq	%rbp, %rdi
    00001d7a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7546
    00001d7f: 	movq	%rax, 0xd0(%rsp)
    00001d87: 	movq	%rax, %rdi
    00001d8a: 	movq	0x28(%rsp), %rax
    00001d8f: 	movq	%rax, 0xe0(%rsp)
.Ltmp3394:
    00001d97: 	movq	%r14, %rdx
    00001d9a: 	movq	%r15, %rsi
    00001d9d: 	callq	memcpy@PLT # Offset: 7581
    00001da2: 	movq	0x28(%rsp), %r14
    00001da7: 	movq	0xd0(%rsp), %rax
    00001daf: 	jmp	.Ltmp3371 # Offset: 7599
    00001db4: 	nopl	(%rax) # Size: 4
.Ltmp3320:
    00001db8: 	leaq	0x28(%rsp), %rsi
    00001dbd: 	xorl	%edx, %edx
    00001dbf: 	movq	%rbp, %rdi
    00001dc2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7618
    00001dc7: 	movq	%rax, 0xd0(%rsp)
    00001dcf: 	movq	%rax, %rdi
    00001dd2: 	movq	0x28(%rsp), %rax
    00001dd7: 	movq	%rax, 0xe0(%rsp)
.Ltmp3395:
    00001ddf: 	movq	%r14, %rdx
    00001de2: 	movq	%r15, %rsi
    00001de5: 	callq	memcpy@PLT # Offset: 7653
    00001dea: 	movq	0x28(%rsp), %r14
    00001def: 	movq	0xd0(%rsp), %rax
    00001df7: 	jmp	.Ltmp3373 # Offset: 7671
    00001dfc: 	nopl	(%rax) # Size: 4
.Ltmp3314:
    00001e00: 	leaq	0x28(%rsp), %rsi
    00001e05: 	xorl	%edx, %edx
    00001e07: 	movq	%rbp, %rdi
    00001e0a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7690
    00001e0f: 	movq	%rax, 0xd0(%rsp)
    00001e17: 	movq	%rax, %rdi
    00001e1a: 	movq	0x28(%rsp), %rax
    00001e1f: 	movq	%rax, 0xe0(%rsp)
.Ltmp3396:
    00001e27: 	movq	%r14, %rdx
    00001e2a: 	movq	%r15, %rsi
    00001e2d: 	callq	memcpy@PLT # Offset: 7725
    00001e32: 	movq	0x28(%rsp), %r14
    00001e37: 	movq	0xd0(%rsp), %rax
    00001e3f: 	jmp	.Ltmp3375 # Offset: 7743
    00001e44: 	nopl	(%rax) # Size: 4
.Ltmp3328:
    00001e48: 	leaq	0x28(%rsp), %rsi
    00001e4d: 	xorl	%edx, %edx
    00001e4f: 	movq	%rbp, %rdi
    00001e52: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7762
    00001e57: 	movq	%rax, 0xd0(%rsp)
    00001e5f: 	movq	%rax, %rdi
    00001e62: 	movq	0x28(%rsp), %rax
    00001e67: 	movq	%rax, 0xe0(%rsp)
.Ltmp3397:
    00001e6f: 	movq	%r13, %rdx
    00001e72: 	movq	%r14, %rsi
    00001e75: 	callq	memcpy@PLT # Offset: 7797
    00001e7a: 	movq	0x28(%rsp), %r13
    00001e7f: 	movq	0xd0(%rsp), %rax
    00001e87: 	jmp	.Ltmp3377 # Offset: 7815
.Ltmp3197:
    00001e8c: 	leaq	DATAat0x33182(%rip), %rdi
    00001e93: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7827
.Ltmp3200:
    00001e98: 	leaq	DATAat0x33158(%rip), %rdi
    00001e9f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7839
.Ltmp3203:
    00001ea4: 	leaq	DATAat0x33182(%rip), %rdi
    00001eab: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7851
.Ltmp3206:
    00001eb0: 	leaq	DATAat0x33158(%rip), %rdi
    00001eb7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7863
.Ltmp3209:
    00001ebc: 	leaq	DATAat0x33182(%rip), %rdi
    00001ec3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7875
.Ltmp3212:
    00001ec8: 	leaq	DATAat0x33158(%rip), %rdi
    00001ecf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7887
.Ltmp3215:
    00001ed4: 	leaq	DATAat0x33182(%rip), %rdi
    00001edb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7899
.Ltmp3219:
    00001ee0: 	leaq	DATAat0x33158(%rip), %rdi
    00001ee7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7911
.Ltmp3222:
    00001eec: 	leaq	DATAat0x33182(%rip), %rdi
    00001ef3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7923
.Ltmp3224:
    00001ef8: 	leaq	DATAat0x33158(%rip), %rdi
    00001eff: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7935
.Ltmp3227:
    00001f04: 	leaq	DATAat0x33182(%rip), %rdi
    00001f0b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7947
.Ltmp3230:
    00001f10: 	leaq	DATAat0x33158(%rip), %rdi
    00001f17: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7959
.Ltmp3233:
    00001f1c: 	leaq	DATAat0x33182(%rip), %rdi
    00001f23: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7971
.Ltmp3236:
    00001f28: 	leaq	DATAat0x33158(%rip), %rdi
    00001f2f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7983
.Ltmp3239:
    00001f34: 	leaq	DATAat0x33182(%rip), %rdi
    00001f3b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7995
.Ltmp3247:
    00001f40: 	leaq	DATAat0x33158(%rip), %rdi
    00001f47: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8007
.Ltmp3250:
    00001f4c: 	leaq	DATAat0x33182(%rip), %rdi
    00001f53: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8019
.Ltmp3253:
    00001f58: 	leaq	DATAat0x33158(%rip), %rdi
    00001f5f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8031
.Ltmp3256:
    00001f64: 	leaq	DATAat0x33182(%rip), %rdi
    00001f6b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8043
.Ltmp3260:
    00001f70: 	leaq	DATAat0x33158(%rip), %rdi
    00001f77: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8055
.Ltmp3263:
    00001f7c: 	leaq	DATAat0x33182(%rip), %rdi
    00001f83: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8067
.Ltmp3267:
    00001f88: 	leaq	DATAat0x33158(%rip), %rdi
    00001f8f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8079
.Ltmp3270:
    00001f94: 	leaq	DATAat0x33182(%rip), %rdi
    00001f9b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8091
.Ltmp3276:
    00001fa0: 	leaq	DATAat0x33158(%rip), %rdi
    00001fa7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8103
.Ltmp3279:
    00001fac: 	leaq	DATAat0x33182(%rip), %rdi
    00001fb3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8115
.Ltmp3285:
    00001fb8: 	leaq	DATAat0x33158(%rip), %rdi
    00001fbf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8127
.Ltmp3288:
    00001fc4: 	leaq	DATAat0x33182(%rip), %rdi
    00001fcb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8139
.Ltmp3292:
    00001fd0: 	leaq	DATAat0x33158(%rip), %rdi
    00001fd7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8151
.Ltmp3295:
    00001fdc: 	leaq	DATAat0x33182(%rip), %rdi
    00001fe3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8163
.Ltmp3300:
    00001fe8: 	leaq	DATAat0x33158(%rip), %rdi
    00001fef: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8175
.Ltmp3303:
    00001ff4: 	leaq	DATAat0x33182(%rip), %rdi
    00001ffb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8187
.Ltmp3307:
    00002000: 	leaq	DATAat0x33158(%rip), %rdi
    00002007: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8199
.Ltmp3310:
    0000200c: 	leaq	DATAat0x33182(%rip), %rdi
    00002013: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8211
.Ltmp3313:
    00002018: 	leaq	DATAat0x33158(%rip), %rdi
    0000201f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8223
.Ltmp3316:
    00002024: 	leaq	DATAat0x33182(%rip), %rdi
    0000202b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8235
.Ltmp3319:
    00002030: 	leaq	DATAat0x33158(%rip), %rdi
    00002037: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8247
.Ltmp3322:
    0000203c: 	leaq	DATAat0x33182(%rip), %rdi
    00002043: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8259
.Ltmp3327:
    00002048: 	leaq	DATAat0x33158(%rip), %rdi
    0000204f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8271
.Ltmp3330:
    00002054: 	leaq	DATAat0x33182(%rip), %rdi
    0000205b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8283
.Ltmp3337:
    00002060: 	callq	__stack_chk_fail@PLT # Offset: 8288
.Ltmp3338:
    00002065: 	movq	%rbx, %rdi
    00002068: 	jmp	.Ltmp3378 # Offset: 8296
.Ltmp3340:
    0000206d: 	movq	%rbx, %rdi
    00002070: 	jmp	.Ltmp3379 # Offset: 8304
.Ltmp3342:
    00002075: 	movq	%rbx, %rdi
    00002078: 	jmp	.Ltmp3380 # Offset: 8312
.Ltmp3344:
    0000207d: 	movq	%rbx, %rdi
    00002080: 	jmp	.Ltmp3381 # Offset: 8320
.Ltmp3346:
    00002085: 	movq	0x8(%rsp), %rdi
    0000208a: 	jmp	.Ltmp3382 # Offset: 8330
.Ltmp3348:
    0000208f: 	movq	0x10(%rsp), %rdi
    00002094: 	jmp	.Ltmp3383 # Offset: 8340
.Ltmp3350:
    00002099: 	movq	%rbx, %rdi
    0000209c: 	jmp	.Ltmp3384 # Offset: 8348
.Ltmp3352:
    000020a1: 	movq	%rbx, %rdi
    000020a4: 	jmp	.Ltmp3385 # Offset: 8356
.Ltmp3354:
    000020a9: 	movq	%rbx, %rdi
    000020ac: 	jmp	.Ltmp3386 # Offset: 8364
.Ltmp3356:
    000020b1: 	movq	%rbx, %rdi
    000020b4: 	jmp	.Ltmp3387 # Offset: 8372
.Ltmp3358:
    000020b9: 	movq	%rbx, %rdi
    000020bc: 	jmp	.Ltmp3388 # Offset: 8380
.Ltmp3360:
    000020c1: 	movq	%rbx, %rdi
    000020c4: 	jmp	.Ltmp3389 # Offset: 8388
.Ltmp3362:
    000020c9: 	movq	%rbx, %rdi
    000020cc: 	jmp	.Ltmp3390 # Offset: 8396
.Ltmp3364:
    000020d1: 	movq	%rbx, %rdi
    000020d4: 	jmp	.Ltmp3391 # Offset: 8404
.Ltmp3366:
    000020d9: 	movq	%rbx, %rdi
    000020dc: 	jmp	.Ltmp3392 # Offset: 8412
.Ltmp3368:
    000020e1: 	movq	%rbx, %rdi
    000020e4: 	jmp	.Ltmp3393 # Offset: 8420
.Ltmp3370:
    000020e9: 	movq	%rbx, %rdi
    000020ec: 	jmp	.Ltmp3394 # Offset: 8428
.Ltmp3372:
    000020f1: 	movq	%rbx, %rdi
    000020f4: 	jmp	.Ltmp3395 # Offset: 8436
.Ltmp3374:
    000020f9: 	movq	%rbx, %rdi
    000020fc: 	jmp	.Ltmp3396 # Offset: 8444
.Ltmp3376:
    00002101: 	movq	%rbx, %rdi
    00002104: 	jmp	.Ltmp3397 # Offset: 8452
.Ltmp3194:
    00002109: 	leaq	DATAat0x33158(%rip), %rdi
    00002110: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8464
    00002115: 	endbr64
.Ltmp3399:
    00002119: 	movq	%rax, %rbp
    0000211c: 	jmp	.Ltmp3398 # Offset: 8476
    0000211e: 	endbr64
    00002122: 	jmp	.Ltmp3399 # Offset: 8482
    00002124: 	endbr64
    00002128: 	jmp	.Ltmp3399 # Offset: 8488
    0000212a: 	endbr64
    0000212e: 	jmp	.Ltmp3399 # Offset: 8494
.Ltmp3398:
    00002130: 	movq	0xd0(%rsp), %rdi
    00002138: 	cmpq	%rbx, %rdi
    0000213b: 	je	.Ltmp3400 # Offset: 8507
.Ltmp3415:
    00002141: 	movq	0xe0(%rsp), %rax
    00002149: 	leaq	0x1(%rax), %rsi
    0000214d: 	callq	_ZdlPvm@PLT # Offset: 8525
    00002152: 	jmp	.Ltmp3400 # Offset: 8530
    00002157: 	endbr64
.Ltmp3402:
    0000215b: 	movq	%rax, %rbp
    0000215e: 	jmp	.Ltmp3401 # Offset: 8542
    00002163: 	endbr64
    00002167: 	jmp	.Ltmp3402 # Offset: 8551
    00002169: 	endbr64
    0000216d: 	movq	%rax, %rbp
    00002170: 	jmp	.Ltmp3403 # Offset: 8560
    00002175: 	endbr64
.Ltmp3407:
    00002179: 	movq	%rax, %rbp
    0000217c: 	jmp	.Ltmp3404 # Offset: 8572
    00002181: 	endbr64
    00002185: 	jmp	.Ltmp3399 # Offset: 8581
    00002187: 	endbr64
.Ltmp3406:
    0000218b: 	movq	%rax, %rbp
    0000218e: 	jmp	.Ltmp3405 # Offset: 8590
    00002190: 	endbr64
    00002194: 	jmp	.Ltmp3406 # Offset: 8596
    00002196: 	endbr64
    0000219a: 	jmp	.Ltmp3407 # Offset: 8602
    0000219c: 	endbr64
    000021a0: 	jmp	.Ltmp3407 # Offset: 8608
.Ltmp3405:
    000021a2: 	movq	0xd0(%rsp), %rdi
    000021aa: 	cmpq	%rbx, %rdi
    000021ad: 	je	.Ltmp3408 # Offset: 8621
    000021af: 	movq	0xe0(%rsp), %rax
    000021b7: 	leaq	0x1(%rax), %rsi
    000021bb: 	callq	_ZdlPvm@PLT # Offset: 8635
.Ltmp3408:
    000021c0: 	movq	0x70(%rsp), %rdi
    000021c5: 	cmpq	0x10(%rsp), %rdi
    000021ca: 	je	.Ltmp3409 # Offset: 8650
    000021cc: 	movq	0x80(%rsp), %rax
    000021d4: 	leaq	0x1(%rax), %rsi
    000021d8: 	callq	_ZdlPvm@PLT # Offset: 8664
.Ltmp3409:
    000021dd: 	movq	0x50(%rsp), %rdi
    000021e2: 	cmpq	0x8(%rsp), %rdi
    000021e7: 	je	.Ltmp3400 # Offset: 8679
    000021e9: 	movq	0x60(%rsp), %rax
    000021ee: 	leaq	0x1(%rax), %rsi
    000021f2: 	callq	_ZdlPvm@PLT # Offset: 8690
.Ltmp3400:
    000021f7: 	movl	$0x4, %esi
    000021fc: 	movq	%r12, %rdi
    000021ff: 	movq	%rbp, %rbx
    00002202: 	callq	_ZdlPvm@PLT # Offset: 8706
.Ltmp3418:
    00002207: 	movq	0x30(%rsp), %rdi
    0000220c: 	cmpq	0x18(%rsp), %rdi
    00002211: 	je	.Ltmp3410 # Offset: 8721
    00002213: 	movq	0x40(%rsp), %rax
    00002218: 	leaq	0x1(%rax), %rsi
    0000221c: 	callq	_ZdlPvm@PLT # Offset: 8732
.Ltmp3410:
    00002221: 	movq	%rbx, %rdi
    00002224: 	callq	_Unwind_Resume@PLT # Offset: 8740
    00002229: 	endbr64
    0000222d: 	jmp	.Ltmp3406 # Offset: 8749
    00002232: 	endbr64
    00002236: 	jmp	.Ltmp3406 # Offset: 8758
    0000223b: 	endbr64
    0000223f: 	jmp	.Ltmp3406 # Offset: 8767
    00002244: 	endbr64
    00002248: 	jmp	.Ltmp3406 # Offset: 8776
    0000224d: 	endbr64
    00002251: 	jmp	.Ltmp3406 # Offset: 8785
    00002256: 	endbr64
    0000225a: 	movq	%rax, %rbp
    0000225d: 	jmp	.Ltmp3411 # Offset: 8797
    0000225f: 	endbr64
    00002263: 	jmp	.Ltmp3402 # Offset: 8803
    00002268: 	endbr64
    0000226c: 	jmp	.Ltmp3402 # Offset: 8812
.Ltmp3404:
    00002271: 	movq	0xd0(%rsp), %rdi
    00002279: 	cmpq	%rbx, %rdi
    0000227c: 	je	.Ltmp3411 # Offset: 8828
    0000227e: 	movq	0xe0(%rsp), %rax
    00002286: 	leaq	0x1(%rax), %rsi
    0000228a: 	callq	_ZdlPvm@PLT # Offset: 8842
.Ltmp3411:
    0000228f: 	movq	0x90(%rsp), %rdi
    00002297: 	leaq	0xa0(%rsp), %rax
    0000229f: 	cmpq	%rax, %rdi
    000022a2: 	je	.Ltmp3408 # Offset: 8866
    000022a8: 	movq	0xa0(%rsp), %rax
    000022b0: 	leaq	0x1(%rax), %rsi
    000022b4: 	callq	_ZdlPvm@PLT # Offset: 8884
    000022b9: 	jmp	.Ltmp3408 # Offset: 8889
    000022be: 	endbr64
    000022c2: 	jmp	.Ltmp3407 # Offset: 8898
    000022c7: 	endbr64
    000022cb: 	jmp	.Ltmp3407 # Offset: 8907
    000022d0: 	endbr64
.Ltmp3413:
    000022d4: 	movq	%rax, %rbp
    000022d7: 	jmp	.Ltmp3412 # Offset: 8919
    000022d9: 	endbr64
    000022dd: 	jmp	.Ltmp3413 # Offset: 8925
    000022df: 	endbr64
    000022e3: 	jmp	.Ltmp3413 # Offset: 8931
    000022e5: 	endbr64
    000022e9: 	jmp	.Ltmp3413 # Offset: 8937
.Ltmp3412:
    000022eb: 	movq	0xd0(%rsp), %rdi
    000022f3: 	cmpq	%rbx, %rdi
    000022f6: 	je	.Ltmp3409 # Offset: 8950
    000022fc: 	movq	0xe0(%rsp), %rax
    00002304: 	leaq	0x1(%rax), %rsi
    00002308: 	callq	_ZdlPvm@PLT # Offset: 8968
    0000230d: 	jmp	.Ltmp3409 # Offset: 8973
    00002312: 	endbr64
    00002316: 	jmp	.Ltmp3406 # Offset: 8982
    0000231b: 	endbr64
    0000231f: 	jmp	.Ltmp3406 # Offset: 8991
    00002324: 	endbr64
    00002328: 	jmp	.Ltmp3406 # Offset: 9000
    0000232d: 	endbr64
    00002331: 	jmp	.Ltmp3406 # Offset: 9009
    00002336: 	endbr64
    0000233a: 	jmp	.Ltmp3407 # Offset: 9018
    0000233f: 	endbr64
    00002343: 	jmp	.Ltmp3407 # Offset: 9027
    00002348: 	endbr64
    0000234c: 	jmp	.Ltmp3407 # Offset: 9036
    00002351: 	endbr64
    00002355: 	movq	%rax, %rbp
    00002358: 	jmp	.Ltmp3414 # Offset: 9048
    0000235a: 	endbr64
    0000235e: 	jmp	.Ltmp3407 # Offset: 9054
    00002363: 	endbr64
    00002367: 	jmp	.Ltmp3407 # Offset: 9063
.Ltmp3403:
    0000236c: 	movq	0xd0(%rsp), %rdi
    00002374: 	leaq	0xe0(%rsp), %rax
    0000237c: 	cmpq	%rax, %rdi
    0000237f: 	jne	.Ltmp3415 # Offset: 9087
    00002385: 	jmp	.Ltmp3400 # Offset: 9093
    0000238a: 	endbr64
    0000238e: 	jmp	.Ltmp3407 # Offset: 9102
.Ltmp3401:
    00002393: 	movq	0xd0(%rsp), %rdi
    0000239b: 	cmpq	%rbx, %rdi
    0000239e: 	je	.Ltmp3414 # Offset: 9118
    000023a0: 	movq	0xe0(%rsp), %rax
    000023a8: 	leaq	0x1(%rax), %rsi
    000023ac: 	callq	_ZdlPvm@PLT # Offset: 9132
.Ltmp3414:
    000023b1: 	movq	0xb0(%rsp), %rdi
    000023b9: 	leaq	0xc0(%rsp), %rax
    000023c1: 	cmpq	%rax, %rdi
    000023c4: 	je	.Ltmp3411 # Offset: 9156
    000023ca: 	movq	0xc0(%rsp), %rax
    000023d2: 	leaq	0x1(%rax), %rsi
    000023d6: 	callq	_ZdlPvm@PLT # Offset: 9174
    000023db: 	jmp	.Ltmp3411 # Offset: 9179
    000023e0: 	endbr64
    000023e4: 	jmp	.Ltmp3402 # Offset: 9188
    000023e9: 	endbr64
    000023ed: 	jmp	.Ltmp3413 # Offset: 9197
    000023f2: 	endbr64
    000023f6: 	jmp	.Ltmp3413 # Offset: 9206
    000023fb: 	endbr64
    000023ff: 	jmp	.Ltmp3413 # Offset: 9215
    00002404: 	endbr64
    00002408: 	jmp	.Ltmp3413 # Offset: 9224
    0000240d: 	endbr64
    00002411: 	jmp	.Ltmp3413 # Offset: 9233
    00002416: 	endbr64
    0000241a: 	jmp	.Ltmp3413 # Offset: 9242
    0000241f: 	endbr64
.Ltmp3416:
    00002423: 	movq	%rax, %rbp
    00002426: 	jmp	.Ltmp3408 # Offset: 9254
    0000242b: 	endbr64
    0000242f: 	jmp	.Ltmp3416 # Offset: 9263
    00002431: 	endbr64
    00002435: 	jmp	.Ltmp3399 # Offset: 9269
    0000243a: 	endbr64
    0000243e: 	jmp	.Ltmp3399 # Offset: 9278
    00002443: 	endbr64
.Ltmp3417:
    00002447: 	movq	%rax, %rbp
    0000244a: 	jmp	.Ltmp3409 # Offset: 9290
    0000244f: 	endbr64
    00002453: 	jmp	.Ltmp3413 # Offset: 9299
    00002458: 	endbr64
    0000245c: 	jmp	.Ltmp3399 # Offset: 9308
    00002461: 	endbr64
    00002465: 	jmp	.Ltmp3417 # Offset: 9317
    00002467: 	endbr64
    0000246b: 	jmp	.Ltmp3399 # Offset: 9323
    00002470: 	endbr64
    00002474: 	jmp	.Ltmp3402 # Offset: 9332
    00002479: 	endbr64
    0000247d: 	jmp	.Ltmp3402 # Offset: 9341
    00002482: 	endbr64
    00002486: 	jmp	.Ltmp3402 # Offset: 9350
    0000248b: 	endbr64
    0000248f: 	jmp	.Ltmp3402 # Offset: 9359
    00002494: 	endbr64
    00002498: 	jmp	.Ltmp3402 # Offset: 9368
    0000249d: 	endbr64
    000024a1: 	jmp	.Ltmp3402 # Offset: 9377
    000024a6: 	endbr64
    000024aa: 	jmp	.Ltmp3402 # Offset: 9386
    000024af: 	endbr64
    000024b3: 	jmp	.Ltmp3402 # Offset: 9395
    000024b8: 	endbr64
    000024bc: 	jmp	.Ltmp3399 # Offset: 9404
    000024c1: 	endbr64
    000024c5: 	jmp	.Ltmp3399 # Offset: 9413
    000024ca: 	endbr64
    000024ce: 	movq	%rax, %rbp
    000024d1: 	jmp	.Ltmp3400 # Offset: 9425
    000024d6: 	endbr64
    000024da: 	jmp	.Ltmp3402 # Offset: 9434
    000024df: 	endbr64
    000024e3: 	movq	%rax, %rbx
    000024e6: 	jmp	.Ltmp3418 # Offset: 9446
    000024eb: 	endbr64
    000024ef: 	jmp	.Ltmp3402 # Offset: 9455
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIiEvv"

Binary Function "_Z21testOneFunction_equalIhPFhPKhihEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 387
  State       : disassembled
  Address     : 0x26c40
  Size        : 0x21c
  MaxSize     : 0x220
  Offset      : 0x26c40
  Section     : .text
  Orc Section : .local.text._Z21testOneFunction_equalIhPFhPKhihEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0386:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rcx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdx, %r13
    00000010: 	pushq	%r12
    00000012: 	movl	%esi, %r12d
    00000015: 	pushq	%rbp
    00000016: 	movq	%rdi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	subq	$0x18, %rsp
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	callq	clock@PLT # Offset: 46
    00000033: 	movq	%rax, start_time(%rip)
    0000003a: 	movl	iterations(%rip), %eax
    00000040: 	testl	%eax, %eax
    00000042: 	jle	.Ltmp3419 # Offset: 66
    00000044: 	cvttsd2si	init_value(%rip), %edx
    0000004c: 	xorl	%ebx, %ebx
    0000004e: 	leaq	DATAat0x331c8(%rip), %r15
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp3421:
    00000058: 	movzbl	%dl, %edx
    0000005b: 	movl	%r12d, %esi
    0000005e: 	movq	%rbp, %rdi
    00000061: 	callq	*%r13 # Offset: 97
    00000064: 	cvttsd2si	init_value(%rip), %edx
    0000006c: 	cmpb	%dl, %al
    0000006e: 	je	.Ltmp3420 # Offset: 110
    00000070: 	movq	(%r14), %rdx
    00000073: 	xorl	%eax, %eax
    00000075: 	movq	%r15, %rsi
    00000078: 	movl	$0x1, %edi
    0000007d: 	addl	$0x1, %ebx
    00000080: 	callq	__printf_chk@PLT # Offset: 128
    00000085: 	cmpl	%ebx, iterations(%rip)
    0000008b: 	jle	.Ltmp3419 # Offset: 139
    0000008d: 	cvttsd2si	init_value(%rip), %edx
    00000095: 	jmp	.Ltmp3421 # Offset: 149
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3420:
    000000a0: 	addl	$0x1, %ebx
    000000a3: 	cmpl	%ebx, iterations(%rip)
    000000a9: 	jg	.Ltmp3421 # Offset: 169
.Ltmp3419:
    000000ab: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000b2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000b9: 	subq	$0x20, %rax
    000000bd: 	cmpq	%rax, %rbx
    000000c0: 	je	.Ltmp3422 # Offset: 192
    000000c6: 	leaq	0x10(%rbx), %rdi
    000000ca: 	movq	0x8(%r14), %r12
    000000ce: 	movq	%rdi, (%rbx)
    000000d1: 	movq	(%r14), %rbp
    000000d4: 	movq	%rbp, %rax
    000000d7: 	addq	%r12, %rax
    000000da: 	je	.Ltmp3423 # Offset: 218
    000000dc: 	testq	%rbp, %rbp
    000000df: 	je	.Ltmp3424 # Offset: 223
.Ltmp3423:
    000000e5: 	movq	%r12, (%rsp)
    000000e9: 	cmpq	$0xf, %r12
    000000ed: 	ja	.Ltmp3425 # Offset: 237
    000000f3: 	cmpq	$0x1, %r12
    000000f7: 	jne	.Ltmp3426 # Offset: 247
    000000fd: 	movzbl	(%rbp), %eax
    00000101: 	movb	%al, 0x10(%rbx)
.Ltmp3429:
    00000104: 	movq	%r12, 0x8(%rbx)
    00000108: 	movb	$0x0, (%rdi,%r12)
    0000010d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000114: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000011b: 	addq	$0x20, %rax
    0000011f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000126: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000012d: 	je	.Ltmp3427 # Offset: 301
.Ltmp3430:
    00000133: 	movq	-0x20(%rax), %rbp
    00000137: 	callq	clock@PLT # Offset: 311
    0000013c: 	movq	%rax, end_time(%rip)
    00000143: 	movq	0x8(%rsp), %rdx
    00000148: 	subq	%fs:0x28, %rdx
    00000151: 	jne	.Ltmp3428 # Offset: 337
    00000157: 	subq	start_time(%rip), %rax
    0000015e: 	pxor	%xmm0, %xmm0
    00000162: 	movq	%rbp, %rdi
    00000165: 	cvtsi2sd	%rax, %xmm0
    0000016a: 	divsd	DATAat0x335b0(%rip), %xmm0
    00000172: 	addq	$0x18, %rsp
    00000176: 	popq	%rbx
    00000177: 	popq	%rbp
    00000178: 	popq	%r12
    0000017a: 	popq	%r13
    0000017c: 	popq	%r14
    0000017e: 	popq	%r15
    00000180: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 384
    00000185: 	nopl	(%rax) # Size: 3
.Ltmp3425:
    00000188: 	movq	%rbx, %rdi
    0000018b: 	movq	%rsp, %rsi
    0000018e: 	xorl	%edx, %edx
    00000190: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 400
    00000195: 	movq	%rax, (%rbx)
    00000198: 	movq	%rax, %rdi
    0000019b: 	movq	(%rsp), %rax
    0000019f: 	movq	%rax, 0x10(%rbx)
.Ltmp3431:
    000001a3: 	movq	%r12, %rdx
    000001a6: 	movq	%rbp, %rsi
    000001a9: 	callq	memcpy@PLT # Offset: 425
    000001ae: 	movq	(%rsp), %r12
    000001b2: 	movq	(%rbx), %rdi
    000001b5: 	jmp	.Ltmp3429 # Offset: 437
    000001ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3422:
    000001c0: 	movq	%r14, %rsi
    000001c3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001ca: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 458
    000001cf: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001d6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001dd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001e4: 	jne	.Ltmp3430 # Offset: 484
.Ltmp3427:
    000001ea: 	movq	-0x8(%rdx), %rax
    000001ee: 	addq	$0x200, %rax
    000001f4: 	jmp	.Ltmp3430 # Offset: 500
    000001f9: 	nopl	(%rax) # Size: 7
.Ltmp3426:
    00000200: 	testq	%r12, %r12
    00000203: 	je	.Ltmp3429 # Offset: 515
    00000209: 	jmp	.Ltmp3431 # Offset: 521
.Ltmp3428:
    0000020b: 	callq	__stack_chk_fail@PLT # Offset: 523
.Ltmp3424:
    00000210: 	leaq	DATAat0x33158(%rip), %rdi
    00000217: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 535
DWARF CFI Instructions:
    <empty>
End of Function "_Z21testOneFunction_equalIhPFhPKhihEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIhEvv" after disassembly {
  Number      : 388
  State       : disassembled
  Address     : 0x26e60
  Size        : 0x240c
  MaxSize     : 0x2410
  Offset      : 0x26e60
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIhEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0387:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	$0x1f40, %edi
    0000000b: 	pushq	%r14
    0000000d: 	pushq	%r13
    0000000f: 	pushq	%r12
    00000011: 	pushq	%rbp
    00000012: 	pushq	%rbx
    00000013: 	subq	$0x108, %rsp
    0000001a: 	movq	%fs:0x28, %rax
    00000023: 	movq	%rax, 0xf8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	leaq	0x40(%rsp), %rax
    00000032: 	movl	$0x746e6975, 0x40(%rsp)
    0000003a: 	movq	%rax, 0x18(%rsp)
    0000003f: 	movq	%rax, 0x30(%rsp)
    00000044: 	movl	$0x5f38, %eax
    00000049: 	movw	%ax, 0x44(%rsp)
    0000004e: 	movb	$0x74, 0x46(%rsp)
    00000053: 	movq	$0x7, 0x38(%rsp)
    0000005c: 	movb	$0x0, 0x47(%rsp)
    00000061: 	callq	_Znam@PLT # Offset: 97
    00000066: 	movq	%rax, %r12
    00000069: 	cvttsd2si	init_value(%rip), %eax
    00000071: 	movabsq	$0x101010101010101, %rdx
    0000007b: 	leaq	0x8(%r12), %rdi
    00000080: 	movq	%r12, %rcx
    00000083: 	leaq	0xe0(%rsp), %rbx
    0000008b: 	andq	$-0x8, %rdi
    0000008f: 	subq	%rdi, %rcx
    00000092: 	movzbl	%al, %eax
    00000095: 	addl	$0x1f40, %ecx
    0000009b: 	imulq	%rdx, %rax
    0000009f: 	shrl	$0x3, %ecx
    000000a2: 	movq	%rax, (%r12)
    000000a6: 	movq	%rax, 0x1f38(%r12)
    000000ae: 	rep		stosq	%rax, %es:(%rdi)
    000000b1: 	movq	%rbx, 0xd0(%rsp)
    000000b9: 	movq	0x30(%rsp), %rbp
    000000be: 	movq	0x38(%rsp), %r13
    000000c3: 	movq	%rbp, %rax
    000000c6: 	addq	%r13, %rax
    000000c9: 	je	.Ltmp3432 # Offset: 201
    000000cb: 	testq	%rbp, %rbp
    000000ce: 	je	.Ltmp3433 # Offset: 206
.Ltmp3432:
    000000d4: 	movq	%r13, 0x28(%rsp)
    000000d9: 	cmpq	$0xf, %r13
    000000dd: 	ja	.Ltmp3434 # Offset: 221
    000000e3: 	cmpq	$0x1, %r13
    000000e7: 	jne	.Ltmp3435 # Offset: 231
    000000ed: 	movzbl	(%rbp), %eax
    000000f1: 	movb	%al, 0xe0(%rsp)
    000000f8: 	movq	%rbx, %rax
.Ltmp3576:
    000000fb: 	movq	%r13, 0xd8(%rsp)
    00000103: 	movb	$0x0, (%rax,%r13)
    00000108: 	movabsq	$0x3fffffffffffffff, %rax
    00000112: 	subq	0xd8(%rsp), %rax
    0000011a: 	cmpq	$0x11, %rax
    0000011e: 	jbe	.Ltmp3436 # Offset: 286
    00000124: 	leaq	0xd0(%rsp), %rbp
    0000012c: 	movl	$0x12, %edx
    00000131: 	leaq	DATAat0x331d8(%rip), %rsi
    00000138: 	movq	%rbp, %rdi
    0000013b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 315
    00000140: 	movq	%rbp, %rcx
    00000143: 	leaq	_Z8bit_and1IhET_PKS0_iS0_(%rip), %rdx
    0000014a: 	movl	$0x1f40, %esi
    0000014f: 	movq	%r12, %rdi
    00000152: 	callq	_Z21testOneFunction_equalIhPFhPKhihEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 338
    00000157: 	movq	0xd0(%rsp), %rdi
    0000015f: 	cmpq	%rbx, %rdi
    00000162: 	je	.Ltmp3437 # Offset: 354
    00000164: 	movq	0xe0(%rsp), %rax
    0000016c: 	leaq	0x1(%rax), %rsi
    00000170: 	callq	_ZdlPvm@PLT # Offset: 368
.Ltmp3437:
    00000175: 	leaq	0x30(%rsp), %r13
    0000017a: 	leaq	DATAat0x331eb(%rip), %rdx
    00000181: 	movq	%rbp, %rdi
    00000184: 	movq	%r13, %rsi
    00000187: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 391
    0000018c: 	movq	%rbp, %rcx
    0000018f: 	leaq	_Z8bit_and2IhET_PKS0_iS0_(%rip), %rdx
    00000196: 	movl	$0x1f40, %esi
    0000019b: 	movq	%r12, %rdi
    0000019e: 	callq	_Z21testOneFunction_equalIhPFhPKhihEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 414
    000001a3: 	movq	0xd0(%rsp), %rdi
    000001ab: 	cmpq	%rbx, %rdi
    000001ae: 	je	.Ltmp3438 # Offset: 430
    000001b0: 	movq	0xe0(%rsp), %rax
    000001b8: 	leaq	0x1(%rax), %rsi
    000001bc: 	callq	_ZdlPvm@PLT # Offset: 444
.Ltmp3438:
    000001c1: 	leaq	DATAat0x331fe(%rip), %rdx
    000001c8: 	movq	%r13, %rsi
    000001cb: 	movq	%rbp, %rdi
    000001ce: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 462
    000001d3: 	movq	%rbp, %rcx
    000001d6: 	leaq	_Z8bit_and3IhET_PKS0_iS0_(%rip), %rdx
    000001dd: 	movl	$0x1f40, %esi
    000001e2: 	movq	%r12, %rdi
    000001e5: 	callq	_Z21testOneFunction_equalIhPFhPKhihEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 485
    000001ea: 	movq	0xd0(%rsp), %rdi
    000001f2: 	cmpq	%rbx, %rdi
    000001f5: 	je	.Ltmp3439 # Offset: 501
    000001f7: 	movq	0xe0(%rsp), %rax
    000001ff: 	leaq	0x1(%rax), %rsi
    00000203: 	callq	_ZdlPvm@PLT # Offset: 515
.Ltmp3439:
    00000208: 	leaq	DATAat0x33211(%rip), %rdx
    0000020f: 	movq	%r13, %rsi
    00000212: 	movq	%rbp, %rdi
    00000215: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 533
    0000021a: 	movq	%rbp, %rcx
    0000021d: 	leaq	_Z8bit_and4IhET_PKS0_iS0_(%rip), %rdx
    00000224: 	movl	$0x1f40, %esi
    00000229: 	movq	%r12, %rdi
    0000022c: 	callq	_Z21testOneFunction_equalIhPFhPKhihEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 556
    00000231: 	movq	0xd0(%rsp), %rdi
    00000239: 	cmpq	%rbx, %rdi
    0000023c: 	je	.Ltmp3440 # Offset: 572
    0000023e: 	movq	0xe0(%rsp), %rax
    00000246: 	leaq	0x1(%rax), %rsi
    0000024a: 	callq	_ZdlPvm@PLT # Offset: 586
.Ltmp3440:
    0000024f: 	leaq	DATAat0x33224(%rip), %rdx
    00000256: 	movq	%r13, %rsi
    00000259: 	movq	%rbp, %rdi
    0000025c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 604
    00000261: 	movq	%rbp, %rcx
    00000264: 	leaq	_Z8bit_and5IhET_PKS0_iS0_(%rip), %rdx
    0000026b: 	movl	$0x1f40, %esi
    00000270: 	movq	%r12, %rdi
    00000273: 	callq	_Z21testOneFunction_equalIhPFhPKhihEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 627
    00000278: 	movq	0xd0(%rsp), %rdi
    00000280: 	cmpq	%rbx, %rdi
    00000283: 	je	.Ltmp3441 # Offset: 643
    00000285: 	movq	0xe0(%rsp), %rax
    0000028d: 	leaq	0x1(%rax), %rsi
    00000291: 	callq	_ZdlPvm@PLT # Offset: 657
.Ltmp3441:
    00000296: 	leaq	DATAat0x33237(%rip), %rdx
    0000029d: 	movq	%r13, %rsi
    000002a0: 	movq	%rbp, %rdi
    000002a3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 675
    000002a8: 	movq	%rbp, %rcx
    000002ab: 	leaq	_Z8bit_and6IhET_PKS0_iS0_(%rip), %rdx
    000002b2: 	movl	$0x1f40, %esi
    000002b7: 	movq	%r12, %rdi
    000002ba: 	callq	_Z21testOneFunction_equalIhPFhPKhihEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 698
    000002bf: 	movq	0xd0(%rsp), %rdi
    000002c7: 	cmpq	%rbx, %rdi
    000002ca: 	je	.Ltmp3442 # Offset: 714
    000002cc: 	movq	0xe0(%rsp), %rax
    000002d4: 	leaq	0x1(%rax), %rsi
    000002d8: 	callq	_ZdlPvm@PLT # Offset: 728
.Ltmp3442:
    000002dd: 	leaq	DATAat0x3324a(%rip), %rdx
    000002e4: 	movq	%r13, %rsi
    000002e7: 	movq	%rbp, %rdi
    000002ea: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 746
    000002ef: 	movq	%rbp, %rcx
    000002f2: 	leaq	_Z8bit_and7IhET_PKS0_iS0_(%rip), %rdx
    000002f9: 	movl	$0x1f40, %esi
    000002fe: 	movq	%r12, %rdi
    00000301: 	callq	_Z21testOneFunction_equalIhPFhPKhihEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 769
    00000306: 	movq	0xd0(%rsp), %rdi
    0000030e: 	cmpq	%rbx, %rdi
    00000311: 	je	.Ltmp3443 # Offset: 785
    00000313: 	movq	0xe0(%rsp), %rax
    0000031b: 	leaq	0x1(%rax), %rsi
    0000031f: 	callq	_ZdlPvm@PLT # Offset: 799
.Ltmp3443:
    00000324: 	leaq	DATAat0x3325d(%rip), %rdx
    0000032b: 	movq	%r13, %rsi
    0000032e: 	movq	%rbp, %rdi
    00000331: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 817
    00000336: 	movq	%rbp, %rcx
    00000339: 	leaq	_Z8bit_and8IhET_PKS0_iS0_(%rip), %rdx
    00000340: 	movl	$0x1f40, %esi
    00000345: 	movq	%r12, %rdi
    00000348: 	callq	_Z21testOneFunction_equalIhPFhPKhihEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 840
    0000034d: 	movq	0xd0(%rsp), %rdi
    00000355: 	cmpq	%rbx, %rdi
    00000358: 	je	.Ltmp3444 # Offset: 856
    0000035a: 	movq	0xe0(%rsp), %rax
    00000362: 	leaq	0x1(%rax), %rsi
    00000366: 	callq	_ZdlPvm@PLT # Offset: 870
.Ltmp3444:
    0000036b: 	movq	0x30(%rsp), %r15
    00000370: 	leaq	0x60(%rsp), %rax
    00000375: 	movq	0x38(%rsp), %r14
    0000037a: 	movq	%rax, (%rsp)
    0000037e: 	movq	%rax, 0x50(%rsp)
    00000383: 	movq	%r15, %rax
    00000386: 	addq	%r14, %rax
    00000389: 	je	.Ltmp3445 # Offset: 905
    0000038b: 	testq	%r15, %r15
    0000038e: 	je	.Ltmp3446 # Offset: 910
.Ltmp3445:
    00000394: 	movq	%r14, 0x28(%rsp)
    00000399: 	cmpq	$0xf, %r14
    0000039d: 	ja	.Ltmp3447 # Offset: 925
    000003a3: 	cmpq	$0x1, %r14
    000003a7: 	jne	.Ltmp3448 # Offset: 935
    000003ad: 	movzbl	(%r15), %eax
    000003b1: 	movb	%al, 0x60(%rsp)
    000003b5: 	movq	(%rsp), %rax
.Ltmp3580:
    000003b9: 	movq	%r14, 0x58(%rsp)
    000003be: 	movb	$0x0, (%rax,%r14)
    000003c3: 	movabsq	$0x3fffffffffffffff, %rax
    000003cd: 	subq	0x58(%rsp), %rax
    000003d2: 	cmpq	$0x10, %rax
    000003d6: 	jbe	.Ltmp3449 # Offset: 982
    000003dc: 	leaq	0x50(%rsp), %rdi
    000003e1: 	movl	$0x11, %edx
    000003e6: 	leaq	DATAat0x33270(%rip), %rsi
    000003ed: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1005
    000003f2: 	movl	iterations(%rip), %esi
    000003f8: 	movq	0x50(%rsp), %rdi
    000003fd: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 1021
    00000402: 	movq	0x30(%rsp), %r15
    00000407: 	movq	0x38(%rsp), %r14
    0000040c: 	movq	%rbx, 0xd0(%rsp)
    00000414: 	movq	%r15, %rax
    00000417: 	addq	%r14, %rax
    0000041a: 	je	.Ltmp3450 # Offset: 1050
    0000041c: 	testq	%r15, %r15
    0000041f: 	je	.Ltmp3451 # Offset: 1055
.Ltmp3450:
    00000425: 	movq	%r14, 0x28(%rsp)
    0000042a: 	cmpq	$0xf, %r14
    0000042e: 	ja	.Ltmp3452 # Offset: 1070
    00000434: 	cmpq	$0x1, %r14
    00000438: 	jne	.Ltmp3453 # Offset: 1080
    0000043e: 	movzbl	(%r15), %eax
    00000442: 	movb	%al, 0xe0(%rsp)
    00000449: 	movq	%rbx, %rax
.Ltmp3578:
    0000044c: 	movq	%r14, 0xd8(%rsp)
    00000454: 	movb	$0x0, (%rax,%r14)
    00000459: 	movabsq	$0x3fffffffffffffff, %rax
    00000463: 	subq	0xd8(%rsp), %rax
    0000046b: 	cmpq	$0x10, %rax
    0000046f: 	jbe	.Ltmp3454 # Offset: 1135
    00000475: 	movl	$0x11, %edx
    0000047a: 	leaq	DATAat0x33282(%rip), %rsi
    00000481: 	movq	%rbp, %rdi
    00000484: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1156
    00000489: 	movq	%rbp, %rcx
    0000048c: 	leaq	_Z7bit_or1IhET_PKS0_iS0_(%rip), %rdx
    00000493: 	movl	$0x1f40, %esi
    00000498: 	movq	%r12, %rdi
    0000049b: 	callq	_Z21testOneFunction_equalIhPFhPKhihEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1179
    000004a0: 	movq	0xd0(%rsp), %rdi
    000004a8: 	cmpq	%rbx, %rdi
    000004ab: 	je	.Ltmp3455 # Offset: 1195
    000004ad: 	movq	0xe0(%rsp), %rax
    000004b5: 	leaq	0x1(%rax), %rsi
    000004b9: 	callq	_ZdlPvm@PLT # Offset: 1209
.Ltmp3455:
    000004be: 	movq	0x30(%rsp), %r15
    000004c3: 	movq	0x38(%rsp), %r14
    000004c8: 	movq	%rbx, 0xd0(%rsp)
    000004d0: 	movq	%r15, %rax
    000004d3: 	addq	%r14, %rax
    000004d6: 	je	.Ltmp3456 # Offset: 1238
    000004d8: 	testq	%r15, %r15
    000004db: 	je	.Ltmp3457 # Offset: 1243
.Ltmp3456:
    000004e1: 	movq	%r14, 0x28(%rsp)
    000004e6: 	cmpq	$0xf, %r14
    000004ea: 	ja	.Ltmp3458 # Offset: 1258
    000004f0: 	cmpq	$0x1, %r14
    000004f4: 	jne	.Ltmp3459 # Offset: 1268
    000004fa: 	movzbl	(%r15), %eax
    000004fe: 	movb	%al, 0xe0(%rsp)
    00000505: 	movq	%rbx, %rax
.Ltmp3582:
    00000508: 	movq	%r14, 0xd8(%rsp)
    00000510: 	movb	$0x0, (%rax,%r14)
    00000515: 	movabsq	$0x3fffffffffffffff, %rax
    0000051f: 	subq	0xd8(%rsp), %rax
    00000527: 	cmpq	$0x10, %rax
    0000052b: 	jbe	.Ltmp3460 # Offset: 1323
    00000531: 	movl	$0x11, %edx
    00000536: 	leaq	DATAat0x33294(%rip), %rsi
    0000053d: 	movq	%rbp, %rdi
    00000540: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1344
    00000545: 	movq	%rbp, %rcx
    00000548: 	leaq	_Z7bit_or2IhET_PKS0_iS0_(%rip), %rdx
    0000054f: 	movl	$0x1f40, %esi
    00000554: 	movq	%r12, %rdi
    00000557: 	callq	_Z21testOneFunction_equalIhPFhPKhihEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1367
    0000055c: 	movq	0xd0(%rsp), %rdi
    00000564: 	cmpq	%rbx, %rdi
    00000567: 	je	.Ltmp3461 # Offset: 1383
    00000569: 	movq	0xe0(%rsp), %rax
    00000571: 	leaq	0x1(%rax), %rsi
    00000575: 	callq	_ZdlPvm@PLT # Offset: 1397
.Ltmp3461:
    0000057a: 	leaq	DATAat0x332a6(%rip), %rdx
    00000581: 	movq	%r13, %rsi
    00000584: 	movq	%rbp, %rdi
    00000587: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1415
    0000058c: 	movq	%rbp, %rcx
    0000058f: 	leaq	_Z7bit_or3IhET_PKS0_iS0_(%rip), %rdx
    00000596: 	movl	$0x1f40, %esi
    0000059b: 	movq	%r12, %rdi
    0000059e: 	callq	_Z21testOneFunction_equalIhPFhPKhihEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1438
    000005a3: 	movq	0xd0(%rsp), %rdi
    000005ab: 	cmpq	%rbx, %rdi
    000005ae: 	je	.Ltmp3462 # Offset: 1454
    000005b0: 	movq	0xe0(%rsp), %rax
    000005b8: 	leaq	0x1(%rax), %rsi
    000005bc: 	callq	_ZdlPvm@PLT # Offset: 1468
.Ltmp3462:
    000005c1: 	movq	0x30(%rsp), %r15
    000005c6: 	movq	0x38(%rsp), %r14
    000005cb: 	movq	%rbx, 0xd0(%rsp)
    000005d3: 	movq	%r15, %rax
    000005d6: 	addq	%r14, %rax
    000005d9: 	je	.Ltmp3463 # Offset: 1497
    000005db: 	testq	%r15, %r15
    000005de: 	je	.Ltmp3464 # Offset: 1502
.Ltmp3463:
    000005e4: 	movq	%r14, 0x28(%rsp)
    000005e9: 	cmpq	$0xf, %r14
    000005ed: 	ja	.Ltmp3465 # Offset: 1517
    000005f3: 	cmpq	$0x1, %r14
    000005f7: 	jne	.Ltmp3466 # Offset: 1527
    000005fd: 	movzbl	(%r15), %eax
    00000601: 	movb	%al, 0xe0(%rsp)
    00000608: 	movq	%rbx, %rax
.Ltmp3584:
    0000060b: 	movq	%r14, 0xd8(%rsp)
    00000613: 	movb	$0x0, (%rax,%r14)
    00000618: 	movabsq	$0x3fffffffffffffff, %rax
    00000622: 	subq	0xd8(%rsp), %rax
    0000062a: 	cmpq	$0x10, %rax
    0000062e: 	jbe	.Ltmp3467 # Offset: 1582
    00000634: 	movl	$0x11, %edx
    00000639: 	leaq	DATAat0x332b8(%rip), %rsi
    00000640: 	movq	%rbp, %rdi
    00000643: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1603
    00000648: 	movq	%rbp, %rcx
    0000064b: 	leaq	_Z7bit_or4IhET_PKS0_iS0_(%rip), %rdx
    00000652: 	movl	$0x1f40, %esi
    00000657: 	movq	%r12, %rdi
    0000065a: 	callq	_Z21testOneFunction_equalIhPFhPKhihEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1626
    0000065f: 	movq	0xd0(%rsp), %rdi
    00000667: 	cmpq	%rbx, %rdi
    0000066a: 	je	.Ltmp3468 # Offset: 1642
    0000066c: 	movq	0xe0(%rsp), %rax
    00000674: 	leaq	0x1(%rax), %rsi
    00000678: 	callq	_ZdlPvm@PLT # Offset: 1656
.Ltmp3468:
    0000067d: 	leaq	DATAat0x332ca(%rip), %rdx
    00000684: 	movq	%r13, %rsi
    00000687: 	movq	%rbp, %rdi
    0000068a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1674
    0000068f: 	movq	%rbp, %rcx
    00000692: 	leaq	_Z7bit_or5IhET_PKS0_iS0_(%rip), %rdx
    00000699: 	movl	$0x1f40, %esi
    0000069e: 	movq	%r12, %rdi
    000006a1: 	callq	_Z21testOneFunction_equalIhPFhPKhihEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1697
    000006a6: 	movq	0xd0(%rsp), %rdi
    000006ae: 	cmpq	%rbx, %rdi
    000006b1: 	je	.Ltmp3469 # Offset: 1713
    000006b3: 	movq	0xe0(%rsp), %rax
    000006bb: 	leaq	0x1(%rax), %rsi
    000006bf: 	callq	_ZdlPvm@PLT # Offset: 1727
.Ltmp3469:
    000006c4: 	movq	0x30(%rsp), %r15
    000006c9: 	movq	0x38(%rsp), %r14
    000006ce: 	movq	%rbx, 0xd0(%rsp)
    000006d6: 	movq	%r15, %rax
    000006d9: 	addq	%r14, %rax
    000006dc: 	je	.Ltmp3470 # Offset: 1756
    000006de: 	testq	%r15, %r15
    000006e1: 	je	.Ltmp3471 # Offset: 1761
.Ltmp3470:
    000006e7: 	movq	%r14, 0x28(%rsp)
    000006ec: 	cmpq	$0xf, %r14
    000006f0: 	ja	.Ltmp3472 # Offset: 1776
    000006f6: 	cmpq	$0x1, %r14
    000006fa: 	jne	.Ltmp3473 # Offset: 1786
    00000700: 	movzbl	(%r15), %eax
    00000704: 	movb	%al, 0xe0(%rsp)
    0000070b: 	movq	%rbx, %rax
.Ltmp3588:
    0000070e: 	movq	%r14, 0xd8(%rsp)
    00000716: 	movb	$0x0, (%rax,%r14)
    0000071b: 	movabsq	$0x3fffffffffffffff, %rax
    00000725: 	subq	0xd8(%rsp), %rax
    0000072d: 	cmpq	$0x10, %rax
    00000731: 	jbe	.Ltmp3474 # Offset: 1841
    00000737: 	movl	$0x11, %edx
    0000073c: 	leaq	DATAat0x332dc(%rip), %rsi
    00000743: 	movq	%rbp, %rdi
    00000746: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1862
    0000074b: 	movq	%rbp, %rcx
    0000074e: 	leaq	_Z7bit_or6IhET_PKS0_iS0_(%rip), %rdx
    00000755: 	movl	$0x1f40, %esi
    0000075a: 	movq	%r12, %rdi
    0000075d: 	callq	_Z21testOneFunction_equalIhPFhPKhihEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1885
    00000762: 	movq	0xd0(%rsp), %rdi
    0000076a: 	cmpq	%rbx, %rdi
    0000076d: 	je	.Ltmp3475 # Offset: 1901
    0000076f: 	movq	0xe0(%rsp), %rax
    00000777: 	leaq	0x1(%rax), %rsi
    0000077b: 	callq	_ZdlPvm@PLT # Offset: 1915
.Ltmp3475:
    00000780: 	movq	0x30(%rsp), %r15
    00000785: 	movq	0x38(%rsp), %r14
    0000078a: 	movq	%rbx, 0xd0(%rsp)
    00000792: 	movq	%r15, %rax
    00000795: 	addq	%r14, %rax
    00000798: 	je	.Ltmp3476 # Offset: 1944
    0000079a: 	testq	%r15, %r15
    0000079d: 	je	.Ltmp3477 # Offset: 1949
.Ltmp3476:
    000007a3: 	movq	%r14, 0x28(%rsp)
    000007a8: 	cmpq	$0xf, %r14
    000007ac: 	ja	.Ltmp3478 # Offset: 1964
    000007b2: 	cmpq	$0x1, %r14
    000007b6: 	jne	.Ltmp3479 # Offset: 1974
    000007bc: 	movzbl	(%r15), %eax
    000007c0: 	movb	%al, 0xe0(%rsp)
    000007c7: 	movq	%rbx, %rax
.Ltmp3586:
    000007ca: 	movq	%r14, 0xd8(%rsp)
    000007d2: 	movb	$0x0, (%rax,%r14)
    000007d7: 	movabsq	$0x3fffffffffffffff, %rax
    000007e1: 	subq	0xd8(%rsp), %rax
    000007e9: 	cmpq	$0x10, %rax
    000007ed: 	jbe	.Ltmp3480 # Offset: 2029
    000007f3: 	movl	$0x11, %edx
    000007f8: 	leaq	DATAat0x332ee(%rip), %rsi
    000007ff: 	movq	%rbp, %rdi
    00000802: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2050
    00000807: 	movq	%rbp, %rcx
    0000080a: 	leaq	_Z7bit_or7IhET_PKS0_iS0_(%rip), %rdx
    00000811: 	movl	$0x1f40, %esi
    00000816: 	movq	%r12, %rdi
    00000819: 	callq	_Z21testOneFunction_equalIhPFhPKhihEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2073
    0000081e: 	movq	0xd0(%rsp), %rdi
    00000826: 	cmpq	%rbx, %rdi
    00000829: 	je	.Ltmp3481 # Offset: 2089
    0000082b: 	movq	0xe0(%rsp), %rax
    00000833: 	leaq	0x1(%rax), %rsi
    00000837: 	callq	_ZdlPvm@PLT # Offset: 2103
.Ltmp3481:
    0000083c: 	movq	0x30(%rsp), %r15
    00000841: 	movq	0x38(%rsp), %r14
    00000846: 	movq	%rbx, 0xd0(%rsp)
    0000084e: 	movq	%r15, %rax
    00000851: 	addq	%r14, %rax
    00000854: 	je	.Ltmp3482 # Offset: 2132
    00000856: 	testq	%r15, %r15
    00000859: 	je	.Ltmp3483 # Offset: 2137
.Ltmp3482:
    0000085f: 	movq	%r14, 0x28(%rsp)
    00000864: 	cmpq	$0xf, %r14
    00000868: 	ja	.Ltmp3484 # Offset: 2152
    0000086e: 	cmpq	$0x1, %r14
    00000872: 	jne	.Ltmp3485 # Offset: 2162
    00000878: 	movzbl	(%r15), %eax
    0000087c: 	movb	%al, 0xe0(%rsp)
    00000883: 	movq	%rbx, %rax
.Ltmp3592:
    00000886: 	movq	%r14, 0xd8(%rsp)
    0000088e: 	movb	$0x0, (%rax,%r14)
    00000893: 	movabsq	$0x3fffffffffffffff, %rax
    0000089d: 	subq	0xd8(%rsp), %rax
    000008a5: 	cmpq	$0x10, %rax
    000008a9: 	jbe	.Ltmp3486 # Offset: 2217
    000008af: 	movl	$0x11, %edx
    000008b4: 	leaq	DATAat0x33300(%rip), %rsi
    000008bb: 	movq	%rbp, %rdi
    000008be: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2238
    000008c3: 	movq	%rbp, %rcx
    000008c6: 	leaq	_Z7bit_or8IhET_PKS0_iS0_(%rip), %rdx
    000008cd: 	movl	$0x1f40, %esi
    000008d2: 	movq	%r12, %rdi
    000008d5: 	callq	_Z21testOneFunction_equalIhPFhPKhihEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2261
    000008da: 	movq	0xd0(%rsp), %rdi
    000008e2: 	cmpq	%rbx, %rdi
    000008e5: 	je	.Ltmp3487 # Offset: 2277
    000008e7: 	movq	0xe0(%rsp), %rax
    000008ef: 	leaq	0x1(%rax), %rsi
    000008f3: 	callq	_ZdlPvm@PLT # Offset: 2291
.Ltmp3487:
    000008f8: 	movq	0x30(%rsp), %r15
    000008fd: 	leaq	0x80(%rsp), %rax
    00000905: 	movq	0x38(%rsp), %r14
    0000090a: 	movq	%rax, 0x8(%rsp)
    0000090f: 	movq	%rax, 0x70(%rsp)
    00000914: 	movq	%r15, %rax
    00000917: 	addq	%r14, %rax
    0000091a: 	je	.Ltmp3488 # Offset: 2330
    0000091c: 	testq	%r15, %r15
    0000091f: 	je	.Ltmp3489 # Offset: 2335
.Ltmp3488:
    00000925: 	movq	%r14, 0x28(%rsp)
    0000092a: 	cmpq	$0xf, %r14
    0000092e: 	ja	.Ltmp3490 # Offset: 2350
    00000934: 	cmpq	$0x1, %r14
    00000938: 	jne	.Ltmp3491 # Offset: 2360
    0000093e: 	movzbl	(%r15), %eax
    00000942: 	movb	%al, 0x80(%rsp)
    00000949: 	movq	0x8(%rsp), %rax
.Ltmp3590:
    0000094e: 	movq	%r14, 0x78(%rsp)
    00000953: 	movb	$0x0, (%rax,%r14)
    00000958: 	movabsq	$0x3fffffffffffffff, %rax
    00000962: 	subq	0x78(%rsp), %rax
    00000967: 	cmpq	$0xf, %rax
    0000096b: 	jbe	.Ltmp3492 # Offset: 2411
    00000971: 	leaq	0x70(%rsp), %rdi
    00000976: 	movl	$0x10, %edx
    0000097b: 	leaq	DATAat0x33312(%rip), %rsi
    00000982: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2434
    00000987: 	movl	iterations(%rip), %esi
    0000098d: 	movq	0x70(%rsp), %rdi
    00000992: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 2450
    00000997: 	leaq	DATAat0x33323(%rip), %rdx
    0000099e: 	movq	%r13, %rsi
    000009a1: 	movq	%rbp, %rdi
    000009a4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2468
    000009a9: 	movq	%rbp, %rcx
    000009ac: 	leaq	_Z8bit_xor1IhET_PKS0_iS0_(%rip), %rdx
    000009b3: 	movl	$0x1f40, %esi
    000009b8: 	movq	%r12, %rdi
    000009bb: 	callq	_Z21testOneFunction_equalIhPFhPKhihEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2491
    000009c0: 	movq	0xd0(%rsp), %rdi
    000009c8: 	cmpq	%rbx, %rdi
    000009cb: 	je	.Ltmp3493 # Offset: 2507
    000009cd: 	movq	0xe0(%rsp), %rax
    000009d5: 	leaq	0x1(%rax), %rsi
    000009d9: 	callq	_ZdlPvm@PLT # Offset: 2521
.Ltmp3493:
    000009de: 	leaq	DATAat0x33336(%rip), %rdx
    000009e5: 	movq	%r13, %rsi
    000009e8: 	movq	%rbp, %rdi
    000009eb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2539
    000009f0: 	movq	%rbp, %rcx
    000009f3: 	leaq	_Z8bit_xor2IhET_PKS0_iS0_(%rip), %rdx
    000009fa: 	movl	$0x1f40, %esi
    000009ff: 	movq	%r12, %rdi
    00000a02: 	callq	_Z21testOneFunction_equalIhPFhPKhihEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2562
    00000a07: 	movq	0xd0(%rsp), %rdi
    00000a0f: 	cmpq	%rbx, %rdi
    00000a12: 	je	.Ltmp3494 # Offset: 2578
    00000a14: 	movq	0xe0(%rsp), %rax
    00000a1c: 	leaq	0x1(%rax), %rsi
    00000a20: 	callq	_ZdlPvm@PLT # Offset: 2592
.Ltmp3494:
    00000a25: 	movq	0x30(%rsp), %r15
    00000a2a: 	movq	0x38(%rsp), %r14
    00000a2f: 	movq	%rbx, 0xd0(%rsp)
    00000a37: 	movq	%r15, %rax
    00000a3a: 	addq	%r14, %rax
    00000a3d: 	je	.Ltmp3495 # Offset: 2621
    00000a3f: 	testq	%r15, %r15
    00000a42: 	je	.Ltmp3496 # Offset: 2626
.Ltmp3495:
    00000a48: 	movq	%r14, 0x28(%rsp)
    00000a4d: 	cmpq	$0xf, %r14
    00000a51: 	ja	.Ltmp3497 # Offset: 2641
    00000a57: 	cmpq	$0x1, %r14
    00000a5b: 	jne	.Ltmp3498 # Offset: 2651
    00000a61: 	movzbl	(%r15), %eax
    00000a65: 	movb	%al, 0xe0(%rsp)
    00000a6c: 	movq	%rbx, %rax
.Ltmp3596:
    00000a6f: 	movq	%r14, 0xd8(%rsp)
    00000a77: 	movb	$0x0, (%rax,%r14)
    00000a7c: 	movabsq	$0x3fffffffffffffff, %rax
    00000a86: 	subq	0xd8(%rsp), %rax
    00000a8e: 	cmpq	$0x11, %rax
    00000a92: 	jbe	.Ltmp3499 # Offset: 2706
    00000a98: 	movl	$0x12, %edx
    00000a9d: 	leaq	DATAat0x33349(%rip), %rsi
    00000aa4: 	movq	%rbp, %rdi
    00000aa7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2727
    00000aac: 	movq	%rbp, %rcx
    00000aaf: 	leaq	_Z8bit_xor3IhET_PKS0_iS0_(%rip), %rdx
    00000ab6: 	movl	$0x1f40, %esi
    00000abb: 	movq	%r12, %rdi
    00000abe: 	callq	_Z21testOneFunction_equalIhPFhPKhihEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2750
    00000ac3: 	movq	0xd0(%rsp), %rdi
    00000acb: 	cmpq	%rbx, %rdi
    00000ace: 	je	.Ltmp3500 # Offset: 2766
    00000ad0: 	movq	0xe0(%rsp), %rax
    00000ad8: 	leaq	0x1(%rax), %rsi
    00000adc: 	callq	_ZdlPvm@PLT # Offset: 2780
.Ltmp3500:
    00000ae1: 	movq	0x30(%rsp), %r15
    00000ae6: 	movq	0x38(%rsp), %r14
    00000aeb: 	movq	%rbx, 0xd0(%rsp)
    00000af3: 	movq	%r15, %rax
    00000af6: 	addq	%r14, %rax
    00000af9: 	je	.Ltmp3501 # Offset: 2809
    00000afb: 	testq	%r15, %r15
    00000afe: 	je	.Ltmp3502 # Offset: 2814
.Ltmp3501:
    00000b04: 	movq	%r14, 0x28(%rsp)
    00000b09: 	cmpq	$0xf, %r14
    00000b0d: 	ja	.Ltmp3503 # Offset: 2829
    00000b13: 	cmpq	$0x1, %r14
    00000b17: 	jne	.Ltmp3504 # Offset: 2839
    00000b1d: 	movzbl	(%r15), %eax
    00000b21: 	movb	%al, 0xe0(%rsp)
    00000b28: 	movq	%rbx, %rax
.Ltmp3594:
    00000b2b: 	movq	%r14, 0xd8(%rsp)
    00000b33: 	movb	$0x0, (%rax,%r14)
    00000b38: 	movabsq	$0x3fffffffffffffff, %rax
    00000b42: 	subq	0xd8(%rsp), %rax
    00000b4a: 	cmpq	$0x11, %rax
    00000b4e: 	jbe	.Ltmp3505 # Offset: 2894
    00000b54: 	movl	$0x12, %edx
    00000b59: 	leaq	DATAat0x3335c(%rip), %rsi
    00000b60: 	movq	%rbp, %rdi
    00000b63: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2915
    00000b68: 	movq	%rbp, %rcx
    00000b6b: 	leaq	_Z8bit_xor4IhET_PKS0_iS0_(%rip), %rdx
    00000b72: 	movl	$0x1f40, %esi
    00000b77: 	movq	%r12, %rdi
    00000b7a: 	callq	_Z21testOneFunction_equalIhPFhPKhihEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2938
    00000b7f: 	movq	0xd0(%rsp), %rdi
    00000b87: 	cmpq	%rbx, %rdi
    00000b8a: 	je	.Ltmp3506 # Offset: 2954
    00000b8c: 	movq	0xe0(%rsp), %rax
    00000b94: 	leaq	0x1(%rax), %rsi
    00000b98: 	callq	_ZdlPvm@PLT # Offset: 2968
.Ltmp3506:
    00000b9d: 	movq	0x30(%rsp), %r15
    00000ba2: 	movq	0x38(%rsp), %r14
    00000ba7: 	movq	%rbx, 0xd0(%rsp)
    00000baf: 	movq	%r15, %rax
    00000bb2: 	addq	%r14, %rax
    00000bb5: 	je	.Ltmp3507 # Offset: 2997
    00000bb7: 	testq	%r15, %r15
    00000bba: 	je	.Ltmp3508 # Offset: 3002
.Ltmp3507:
    00000bc0: 	movq	%r14, 0x28(%rsp)
    00000bc5: 	cmpq	$0xf, %r14
    00000bc9: 	ja	.Ltmp3509 # Offset: 3017
    00000bcf: 	cmpq	$0x1, %r14
    00000bd3: 	jne	.Ltmp3510 # Offset: 3027
    00000bd9: 	movzbl	(%r15), %eax
    00000bdd: 	movb	%al, 0xe0(%rsp)
    00000be4: 	movq	%rbx, %rax
.Ltmp3602:
    00000be7: 	movq	%r14, 0xd8(%rsp)
    00000bef: 	movb	$0x0, (%rax,%r14)
    00000bf4: 	movabsq	$0x3fffffffffffffff, %rax
    00000bfe: 	subq	0xd8(%rsp), %rax
    00000c06: 	cmpq	$0x11, %rax
    00000c0a: 	jbe	.Ltmp3511 # Offset: 3082
    00000c10: 	movl	$0x12, %edx
    00000c15: 	leaq	DATAat0x3336f(%rip), %rsi
    00000c1c: 	movq	%rbp, %rdi
    00000c1f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3103
    00000c24: 	movq	%rbp, %rcx
    00000c27: 	leaq	_Z8bit_xor5IhET_PKS0_iS0_(%rip), %rdx
    00000c2e: 	movl	$0x1f40, %esi
    00000c33: 	movq	%r12, %rdi
    00000c36: 	callq	_Z21testOneFunction_equalIhPFhPKhihEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3126
    00000c3b: 	movq	0xd0(%rsp), %rdi
    00000c43: 	cmpq	%rbx, %rdi
    00000c46: 	je	.Ltmp3512 # Offset: 3142
    00000c48: 	movq	0xe0(%rsp), %rax
    00000c50: 	leaq	0x1(%rax), %rsi
    00000c54: 	callq	_ZdlPvm@PLT # Offset: 3156
.Ltmp3512:
    00000c59: 	leaq	DATAat0x33382(%rip), %rdx
    00000c60: 	movq	%r13, %rsi
    00000c63: 	movq	%rbp, %rdi
    00000c66: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3174
    00000c6b: 	movq	%rbp, %rcx
    00000c6e: 	leaq	_Z8bit_xor6IhET_PKS0_iS0_(%rip), %rdx
    00000c75: 	movl	$0x1f40, %esi
    00000c7a: 	movq	%r12, %rdi
    00000c7d: 	callq	_Z21testOneFunction_equalIhPFhPKhihEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3197
    00000c82: 	movq	0xd0(%rsp), %rdi
    00000c8a: 	cmpq	%rbx, %rdi
    00000c8d: 	je	.Ltmp3513 # Offset: 3213
    00000c8f: 	movq	0xe0(%rsp), %rax
    00000c97: 	leaq	0x1(%rax), %rsi
    00000c9b: 	callq	_ZdlPvm@PLT # Offset: 3227
.Ltmp3513:
    00000ca0: 	movq	0x30(%rsp), %r15
    00000ca5: 	movq	0x38(%rsp), %r14
    00000caa: 	movq	%rbx, 0xd0(%rsp)
    00000cb2: 	movq	%r15, %rax
    00000cb5: 	addq	%r14, %rax
    00000cb8: 	je	.Ltmp3514 # Offset: 3256
    00000cba: 	testq	%r15, %r15
    00000cbd: 	je	.Ltmp3515 # Offset: 3261
.Ltmp3514:
    00000cc3: 	movq	%r14, 0x28(%rsp)
    00000cc8: 	cmpq	$0xf, %r14
    00000ccc: 	ja	.Ltmp3516 # Offset: 3276
    00000cd2: 	cmpq	$0x1, %r14
    00000cd6: 	jne	.Ltmp3517 # Offset: 3286
    00000cdc: 	movzbl	(%r15), %eax
    00000ce0: 	movb	%al, 0xe0(%rsp)
    00000ce7: 	movq	%rbx, %rax
.Ltmp3600:
    00000cea: 	movq	%r14, 0xd8(%rsp)
    00000cf2: 	movb	$0x0, (%rax,%r14)
    00000cf7: 	movabsq	$0x3fffffffffffffff, %rax
    00000d01: 	subq	0xd8(%rsp), %rax
    00000d09: 	cmpq	$0x11, %rax
    00000d0d: 	jbe	.Ltmp3518 # Offset: 3341
    00000d13: 	movl	$0x12, %edx
    00000d18: 	leaq	DATAat0x33395(%rip), %rsi
    00000d1f: 	movq	%rbp, %rdi
    00000d22: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3362
    00000d27: 	movq	%rbp, %rcx
    00000d2a: 	leaq	_Z8bit_xor7IhET_PKS0_iS0_(%rip), %rdx
    00000d31: 	movl	$0x1f40, %esi
    00000d36: 	movq	%r12, %rdi
    00000d39: 	callq	_Z21testOneFunction_equalIhPFhPKhihEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3385
    00000d3e: 	movq	0xd0(%rsp), %rdi
    00000d46: 	cmpq	%rbx, %rdi
    00000d49: 	je	.Ltmp3519 # Offset: 3401
    00000d4b: 	movq	0xe0(%rsp), %rax
    00000d53: 	leaq	0x1(%rax), %rsi
    00000d57: 	callq	_ZdlPvm@PLT # Offset: 3415
.Ltmp3519:
    00000d5c: 	leaq	DATAat0x333a8(%rip), %rdx
    00000d63: 	movq	%r13, %rsi
    00000d66: 	movq	%rbp, %rdi
    00000d69: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3433
    00000d6e: 	movq	%rbp, %rcx
    00000d71: 	leaq	_Z8bit_xor8IhET_PKS0_iS0_(%rip), %rdx
    00000d78: 	movl	$0x1f40, %esi
    00000d7d: 	movq	%r12, %rdi
    00000d80: 	callq	_Z21testOneFunction_equalIhPFhPKhihEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3456
    00000d85: 	movq	0xd0(%rsp), %rdi
    00000d8d: 	cmpq	%rbx, %rdi
    00000d90: 	je	.Ltmp3520 # Offset: 3472
    00000d92: 	movq	0xe0(%rsp), %rax
    00000d9a: 	leaq	0x1(%rax), %rsi
    00000d9e: 	callq	_ZdlPvm@PLT # Offset: 3486
.Ltmp3520:
    00000da3: 	movq	0x30(%rsp), %r15
    00000da8: 	leaq	0xa0(%rsp), %rax
    00000db0: 	movq	0x38(%rsp), %r14
    00000db5: 	movq	%rax, 0x10(%rsp)
    00000dba: 	movq	%rax, 0x90(%rsp)
    00000dc2: 	movq	%r15, %rax
    00000dc5: 	addq	%r14, %rax
    00000dc8: 	je	.Ltmp3521 # Offset: 3528
    00000dca: 	testq	%r15, %r15
    00000dcd: 	je	.Ltmp3522 # Offset: 3533
.Ltmp3521:
    00000dd3: 	movq	%r14, 0x28(%rsp)
    00000dd8: 	cmpq	$0xf, %r14
    00000ddc: 	ja	.Ltmp3523 # Offset: 3548
    00000de2: 	cmpq	$0x1, %r14
    00000de6: 	jne	.Ltmp3524 # Offset: 3558
    00000dec: 	movzbl	(%r15), %eax
    00000df0: 	movb	%al, 0xa0(%rsp)
    00000df7: 	movq	0x10(%rsp), %rax
.Ltmp3598:
    00000dfc: 	movq	%r14, 0x98(%rsp)
    00000e04: 	movb	$0x0, (%rax,%r14)
    00000e09: 	movabsq	$0x3fffffffffffffff, %rax
    00000e13: 	subq	0x98(%rsp), %rax
    00000e1b: 	cmpq	$0x10, %rax
    00000e1f: 	jbe	.Ltmp3525 # Offset: 3615
    00000e25: 	leaq	0x90(%rsp), %rdi
    00000e2d: 	movl	$0x11, %edx
    00000e32: 	leaq	DATAat0x333bb(%rip), %rsi
    00000e39: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3641
    00000e3e: 	movl	iterations(%rip), %esi
    00000e44: 	movq	0x90(%rsp), %rdi
    00000e4c: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 3660
    00000e51: 	movq	0x30(%rsp), %r15
    00000e56: 	movq	0x38(%rsp), %r14
    00000e5b: 	movq	%rbx, 0xd0(%rsp)
    00000e63: 	movq	%r15, %rax
    00000e66: 	addq	%r14, %rax
    00000e69: 	je	.Ltmp3526 # Offset: 3689
    00000e6b: 	testq	%r15, %r15
    00000e6e: 	je	.Ltmp3527 # Offset: 3694
.Ltmp3526:
    00000e74: 	movq	%r14, 0x28(%rsp)
    00000e79: 	cmpq	$0xf, %r14
    00000e7d: 	ja	.Ltmp3528 # Offset: 3709
    00000e83: 	cmpq	$0x1, %r14
    00000e87: 	jne	.Ltmp3529 # Offset: 3719
    00000e8d: 	movzbl	(%r15), %eax
    00000e91: 	movb	%al, 0xe0(%rsp)
    00000e98: 	movq	%rbx, %rax
.Ltmp3604:
    00000e9b: 	movq	%r14, 0xd8(%rsp)
    00000ea3: 	movb	$0x0, (%rax,%r14)
    00000ea8: 	movabsq	$0x3fffffffffffffff, %rax
    00000eb2: 	subq	0xd8(%rsp), %rax
    00000eba: 	cmpq	$0x15, %rax
    00000ebe: 	jbe	.Ltmp3530 # Offset: 3774
    00000ec4: 	movl	$0x16, %edx
    00000ec9: 	leaq	DATAat0x333cd(%rip), %rsi
    00000ed0: 	movq	%rbp, %rdi
    00000ed3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3795
    00000ed8: 	movq	%rbp, %r8
    00000edb: 	movl	$0x1, %edx
    00000ee0: 	movl	$0x1f40, %esi
    00000ee5: 	movq	%r12, %rdi
    00000ee8: 	leaq	_Z10logic_and1IhEbPKT_ib(%rip), %rcx
    00000eef: 	callq	_Z23testOneFunction_logicalIhPFbPKhibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3823
    00000ef4: 	movq	0xd0(%rsp), %rdi
    00000efc: 	cmpq	%rbx, %rdi
    00000eff: 	je	.Ltmp3531 # Offset: 3839
    00000f01: 	movq	0xe0(%rsp), %rax
    00000f09: 	leaq	0x1(%rax), %rsi
    00000f0d: 	callq	_ZdlPvm@PLT # Offset: 3853
.Ltmp3531:
    00000f12: 	leaq	DATAat0x333e4(%rip), %rdx
    00000f19: 	movq	%r13, %rsi
    00000f1c: 	movq	%rbp, %rdi
    00000f1f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3871
    00000f24: 	movq	%rbp, %r8
    00000f27: 	movl	$0x1, %edx
    00000f2c: 	movl	$0x1f40, %esi
    00000f31: 	movq	%r12, %rdi
    00000f34: 	leaq	_Z10logic_and2IhEbPKT_ib(%rip), %rcx
    00000f3b: 	callq	_Z23testOneFunction_logicalIhPFbPKhibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3899
    00000f40: 	movq	0xd0(%rsp), %rdi
    00000f48: 	cmpq	%rbx, %rdi
    00000f4b: 	je	.Ltmp3532 # Offset: 3915
    00000f4d: 	movq	0xe0(%rsp), %rax
    00000f55: 	leaq	0x1(%rax), %rsi
    00000f59: 	callq	_ZdlPvm@PLT # Offset: 3929
.Ltmp3532:
    00000f5e: 	movq	0x30(%rsp), %r15
    00000f63: 	movq	0x38(%rsp), %r14
    00000f68: 	movq	%rbx, 0xd0(%rsp)
    00000f70: 	movq	%r15, %rax
    00000f73: 	addq	%r14, %rax
    00000f76: 	je	.Ltmp3533 # Offset: 3958
    00000f78: 	testq	%r15, %r15
    00000f7b: 	je	.Ltmp3534 # Offset: 3963
.Ltmp3533:
    00000f81: 	movq	%r14, 0x28(%rsp)
    00000f86: 	cmpq	$0xf, %r14
    00000f8a: 	ja	.Ltmp3535 # Offset: 3978
    00000f90: 	cmpq	$0x1, %r14
    00000f94: 	jne	.Ltmp3536 # Offset: 3988
    00000f9a: 	movzbl	(%r15), %eax
    00000f9e: 	movb	%al, 0xe0(%rsp)
    00000fa5: 	movq	%rbx, %rax
.Ltmp3612:
    00000fa8: 	movq	%r14, 0xd8(%rsp)
    00000fb0: 	movb	$0x0, (%rax,%r14)
    00000fb5: 	movabsq	$0x3fffffffffffffff, %rax
    00000fbf: 	subq	0xd8(%rsp), %rax
    00000fc7: 	cmpq	$0x15, %rax
    00000fcb: 	jbe	.Ltmp3537 # Offset: 4043
    00000fd1: 	movl	$0x16, %edx
    00000fd6: 	leaq	DATAat0x333fb(%rip), %rsi
    00000fdd: 	movq	%rbp, %rdi
    00000fe0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4064
    00000fe5: 	movq	%rbp, %r8
    00000fe8: 	movl	$0x1, %edx
    00000fed: 	movl	$0x1f40, %esi
    00000ff2: 	movq	%r12, %rdi
    00000ff5: 	leaq	_Z10logic_and3IhEbPKT_ib(%rip), %rcx
    00000ffc: 	callq	_Z23testOneFunction_logicalIhPFbPKhibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4092
    00001001: 	movq	0xd0(%rsp), %rdi
    00001009: 	cmpq	%rbx, %rdi
    0000100c: 	je	.Ltmp3538 # Offset: 4108
    0000100e: 	movq	0xe0(%rsp), %rax
    00001016: 	leaq	0x1(%rax), %rsi
    0000101a: 	callq	_ZdlPvm@PLT # Offset: 4122
.Ltmp3538:
    0000101f: 	leaq	DATAat0x33412(%rip), %rdx
    00001026: 	movq	%r13, %rsi
    00001029: 	movq	%rbp, %rdi
    0000102c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4140
    00001031: 	movq	%rbp, %r8
    00001034: 	movl	$0x1, %edx
    00001039: 	movl	$0x1f40, %esi
    0000103e: 	movq	%r12, %rdi
    00001041: 	leaq	_Z10logic_and4IhEbPKT_ib(%rip), %rcx
    00001048: 	callq	_Z23testOneFunction_logicalIhPFbPKhibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4168
    0000104d: 	movq	0xd0(%rsp), %rdi
    00001055: 	cmpq	%rbx, %rdi
    00001058: 	je	.Ltmp3539 # Offset: 4184
    0000105a: 	movq	0xe0(%rsp), %rax
    00001062: 	leaq	0x1(%rax), %rsi
    00001066: 	callq	_ZdlPvm@PLT # Offset: 4198
.Ltmp3539:
    0000106b: 	leaq	DATAat0x33429(%rip), %rdx
    00001072: 	movq	%r13, %rsi
    00001075: 	movq	%rbp, %rdi
    00001078: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4216
    0000107d: 	movq	%rbp, %r8
    00001080: 	movl	$0x1, %edx
    00001085: 	movl	$0x1f40, %esi
    0000108a: 	movq	%r12, %rdi
    0000108d: 	leaq	_Z10logic_and5IhEbPKT_ib(%rip), %rcx
    00001094: 	callq	_Z23testOneFunction_logicalIhPFbPKhibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4244
    00001099: 	movq	0xd0(%rsp), %rdi
    000010a1: 	cmpq	%rbx, %rdi
    000010a4: 	je	.Ltmp3540 # Offset: 4260
    000010a6: 	movq	0xe0(%rsp), %rax
    000010ae: 	leaq	0x1(%rax), %rsi
    000010b2: 	callq	_ZdlPvm@PLT # Offset: 4274
.Ltmp3540:
    000010b7: 	leaq	DATAat0x33440(%rip), %rdx
    000010be: 	movq	%r13, %rsi
    000010c1: 	movq	%rbp, %rdi
    000010c4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4292
    000010c9: 	movq	%rbp, %r8
    000010cc: 	movl	$0x1, %edx
    000010d1: 	movl	$0x1f40, %esi
    000010d6: 	movq	%r12, %rdi
    000010d9: 	leaq	_Z10logic_and6IhEbPKT_ib(%rip), %rcx
    000010e0: 	callq	_Z23testOneFunction_logicalIhPFbPKhibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4320
    000010e5: 	movq	0xd0(%rsp), %rdi
    000010ed: 	cmpq	%rbx, %rdi
    000010f0: 	je	.Ltmp3541 # Offset: 4336
    000010f2: 	movq	0xe0(%rsp), %rax
    000010fa: 	leaq	0x1(%rax), %rsi
    000010fe: 	callq	_ZdlPvm@PLT # Offset: 4350
.Ltmp3541:
    00001103: 	leaq	DATAat0x33457(%rip), %rdx
    0000110a: 	movq	%r13, %rsi
    0000110d: 	movq	%rbp, %rdi
    00001110: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4368
    00001115: 	movq	%rbp, %r8
    00001118: 	movl	$0x1, %edx
    0000111d: 	movl	$0x1f40, %esi
    00001122: 	movq	%r12, %rdi
    00001125: 	leaq	_Z10logic_and7IhEbPKT_ib(%rip), %rcx
    0000112c: 	callq	_Z23testOneFunction_logicalIhPFbPKhibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4396
    00001131: 	movq	0xd0(%rsp), %rdi
    00001139: 	cmpq	%rbx, %rdi
    0000113c: 	je	.Ltmp3542 # Offset: 4412
    0000113e: 	movq	0xe0(%rsp), %rax
    00001146: 	leaq	0x1(%rax), %rsi
    0000114a: 	callq	_ZdlPvm@PLT # Offset: 4426
.Ltmp3542:
    0000114f: 	leaq	DATAat0x3346e(%rip), %rdx
    00001156: 	movq	%r13, %rsi
    00001159: 	movq	%rbp, %rdi
    0000115c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4444
    00001161: 	movq	%rbp, %r8
    00001164: 	movl	$0x1, %edx
    00001169: 	movl	$0x1f40, %esi
    0000116e: 	movq	%r12, %rdi
    00001171: 	leaq	_Z10logic_and8IhEbPKT_ib(%rip), %rcx
    00001178: 	callq	_Z23testOneFunction_logicalIhPFbPKhibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4472
    0000117d: 	movq	0xd0(%rsp), %rdi
    00001185: 	cmpq	%rbx, %rdi
    00001188: 	je	.Ltmp3543 # Offset: 4488
    0000118a: 	movq	0xe0(%rsp), %rax
    00001192: 	leaq	0x1(%rax), %rsi
    00001196: 	callq	_ZdlPvm@PLT # Offset: 4502
.Ltmp3543:
    0000119b: 	leaq	0xb0(%rsp), %rdi
    000011a3: 	leaq	DATAat0x33485(%rip), %rdx
    000011aa: 	movq	%r13, %rsi
    000011ad: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4525
    000011b2: 	movl	iterations(%rip), %esi
    000011b8: 	movq	0xb0(%rsp), %rdi
    000011c0: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 4544
    000011c5: 	movq	0x30(%rsp), %r15
    000011ca: 	movq	0x38(%rsp), %r14
    000011cf: 	movq	%rbx, 0xd0(%rsp)
    000011d7: 	movq	%r15, %rax
    000011da: 	addq	%r14, %rax
    000011dd: 	je	.Ltmp3544 # Offset: 4573
    000011df: 	testq	%r15, %r15
    000011e2: 	je	.Ltmp3545 # Offset: 4578
.Ltmp3544:
    000011e8: 	movq	%r14, 0x28(%rsp)
    000011ed: 	cmpq	$0xf, %r14
    000011f1: 	ja	.Ltmp3546 # Offset: 4593
    000011f7: 	cmpq	$0x1, %r14
    000011fb: 	jne	.Ltmp3547 # Offset: 4603
    00001201: 	movzbl	(%r15), %eax
    00001205: 	movb	%al, 0xe0(%rsp)
    0000120c: 	movq	%rbx, %rax
.Ltmp3610:
    0000120f: 	movq	%r14, 0xd8(%rsp)
    00001217: 	movb	$0x0, (%rax,%r14)
    0000121c: 	movabsq	$0x3fffffffffffffff, %rax
    00001226: 	subq	0xd8(%rsp), %rax
    0000122e: 	cmpq	$0x14, %rax
    00001232: 	jbe	.Ltmp3548 # Offset: 4658
    00001238: 	movl	$0x15, %edx
    0000123d: 	leaq	DATAat0x3349b(%rip), %rsi
    00001244: 	movq	%rbp, %rdi
    00001247: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4679
    0000124c: 	movq	%rbp, %r8
    0000124f: 	leaq	_Z9logic_or1IhEbPKT_ib(%rip), %rcx
    00001256: 	xorl	%edx, %edx
    00001258: 	movq	%r12, %rdi
    0000125b: 	movl	$0x1f40, %esi
    00001260: 	callq	_Z23testOneFunction_logicalIhPFbPKhibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4704
    00001265: 	movq	0xd0(%rsp), %rdi
    0000126d: 	cmpq	%rbx, %rdi
    00001270: 	je	.Ltmp3549 # Offset: 4720
    00001272: 	movq	0xe0(%rsp), %rax
    0000127a: 	leaq	0x1(%rax), %rsi
    0000127e: 	callq	_ZdlPvm@PLT # Offset: 4734
.Ltmp3549:
    00001283: 	leaq	DATAat0x334b1(%rip), %rdx
    0000128a: 	movq	%r13, %rsi
    0000128d: 	movq	%rbp, %rdi
    00001290: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4752
    00001295: 	movq	%rbp, %r8
    00001298: 	leaq	_Z12logic_or_optIhEbPKT_ib(%rip), %rcx
    0000129f: 	xorl	%edx, %edx
    000012a1: 	movq	%r12, %rdi
    000012a4: 	movl	$0x1f40, %esi
    000012a9: 	callq	_Z23testOneFunction_logicalIhPFbPKhibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4777
    000012ae: 	movq	0xd0(%rsp), %rdi
    000012b6: 	cmpq	%rbx, %rdi
    000012b9: 	je	.Ltmp3550 # Offset: 4793
    000012bb: 	movq	0xe0(%rsp), %rax
    000012c3: 	leaq	0x1(%rax), %rsi
    000012c7: 	callq	_ZdlPvm@PLT # Offset: 4807
.Ltmp3550:
    000012cc: 	leaq	DATAat0x334ce(%rip), %rdx
    000012d3: 	movq	%r13, %rsi
    000012d6: 	movq	%rbp, %rdi
    000012d9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4825
    000012de: 	movq	%rbp, %r8
    000012e1: 	leaq	_Z9logic_or2IhEbPKT_ib(%rip), %rcx
    000012e8: 	xorl	%edx, %edx
    000012ea: 	movq	%r12, %rdi
    000012ed: 	movl	$0x1f40, %esi
    000012f2: 	callq	_Z23testOneFunction_logicalIhPFbPKhibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4850
    000012f7: 	movq	0xd0(%rsp), %rdi
    000012ff: 	cmpq	%rbx, %rdi
    00001302: 	je	.Ltmp3551 # Offset: 4866
    00001304: 	movq	0xe0(%rsp), %rax
    0000130c: 	leaq	0x1(%rax), %rsi
    00001310: 	callq	_ZdlPvm@PLT # Offset: 4880
.Ltmp3551:
    00001315: 	leaq	DATAat0x334e4(%rip), %rdx
    0000131c: 	movq	%r13, %rsi
    0000131f: 	movq	%rbp, %rdi
    00001322: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4898
    00001327: 	movq	%rbp, %r8
    0000132a: 	leaq	_Z9logic_or3IhEbPKT_ib(%rip), %rcx
    00001331: 	xorl	%edx, %edx
    00001333: 	movq	%r12, %rdi
    00001336: 	movl	$0x1f40, %esi
    0000133b: 	callq	_Z23testOneFunction_logicalIhPFbPKhibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4923
    00001340: 	movq	0xd0(%rsp), %rdi
    00001348: 	cmpq	%rbx, %rdi
    0000134b: 	je	.Ltmp3552 # Offset: 4939
    0000134d: 	movq	0xe0(%rsp), %rax
    00001355: 	leaq	0x1(%rax), %rsi
    00001359: 	callq	_ZdlPvm@PLT # Offset: 4953
.Ltmp3552:
    0000135e: 	leaq	DATAat0x334fa(%rip), %rdx
    00001365: 	movq	%r13, %rsi
    00001368: 	movq	%rbp, %rdi
    0000136b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4971
    00001370: 	movq	%rbp, %r8
    00001373: 	leaq	_Z9logic_or4IhEbPKT_ib(%rip), %rcx
    0000137a: 	xorl	%edx, %edx
    0000137c: 	movq	%r12, %rdi
    0000137f: 	movl	$0x1f40, %esi
    00001384: 	callq	_Z23testOneFunction_logicalIhPFbPKhibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4996
    00001389: 	movq	0xd0(%rsp), %rdi
    00001391: 	cmpq	%rbx, %rdi
    00001394: 	je	.Ltmp3553 # Offset: 5012
    00001396: 	movq	0xe0(%rsp), %rax
    0000139e: 	leaq	0x1(%rax), %rsi
    000013a2: 	callq	_ZdlPvm@PLT # Offset: 5026
.Ltmp3553:
    000013a7: 	leaq	DATAat0x33510(%rip), %rdx
    000013ae: 	movq	%r13, %rsi
    000013b1: 	movq	%rbp, %rdi
    000013b4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5044
    000013b9: 	movq	%rbp, %r8
    000013bc: 	leaq	_Z9logic_or5IhEbPKT_ib(%rip), %rcx
    000013c3: 	xorl	%edx, %edx
    000013c5: 	movq	%r12, %rdi
    000013c8: 	movl	$0x1f40, %esi
    000013cd: 	callq	_Z23testOneFunction_logicalIhPFbPKhibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5069
    000013d2: 	movq	0xd0(%rsp), %rdi
    000013da: 	cmpq	%rbx, %rdi
    000013dd: 	je	.Ltmp3554 # Offset: 5085
    000013df: 	movq	0xe0(%rsp), %rax
    000013e7: 	leaq	0x1(%rax), %rsi
    000013eb: 	callq	_ZdlPvm@PLT # Offset: 5099
.Ltmp3554:
    000013f0: 	movq	0x30(%rsp), %r15
    000013f5: 	movq	0x38(%rsp), %r14
    000013fa: 	movq	%rbx, 0xd0(%rsp)
    00001402: 	movq	%r15, %rax
    00001405: 	addq	%r14, %rax
    00001408: 	je	.Ltmp3555 # Offset: 5128
    0000140a: 	testq	%r15, %r15
    0000140d: 	je	.Ltmp3556 # Offset: 5133
.Ltmp3555:
    00001413: 	movq	%r14, 0x28(%rsp)
    00001418: 	cmpq	$0xf, %r14
    0000141c: 	ja	.Ltmp3557 # Offset: 5148
    00001422: 	cmpq	$0x1, %r14
    00001426: 	jne	.Ltmp3558 # Offset: 5158
    0000142c: 	movzbl	(%r15), %eax
    00001430: 	movb	%al, 0xe0(%rsp)
    00001437: 	movq	%rbx, %rax
.Ltmp3608:
    0000143a: 	movq	%r14, 0xd8(%rsp)
    00001442: 	movb	$0x0, (%rax,%r14)
    00001447: 	movabsq	$0x3fffffffffffffff, %rax
    00001451: 	subq	0xd8(%rsp), %rax
    00001459: 	cmpq	$0x14, %rax
    0000145d: 	jbe	.Ltmp3559 # Offset: 5213
    00001463: 	movl	$0x15, %edx
    00001468: 	leaq	DATAat0x33526(%rip), %rsi
    0000146f: 	movq	%rbp, %rdi
    00001472: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5234
    00001477: 	movq	%rbp, %r8
    0000147a: 	leaq	_Z9logic_or6IhEbPKT_ib(%rip), %rcx
    00001481: 	xorl	%edx, %edx
    00001483: 	movq	%r12, %rdi
    00001486: 	movl	$0x1f40, %esi
    0000148b: 	callq	_Z23testOneFunction_logicalIhPFbPKhibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5259
    00001490: 	movq	0xd0(%rsp), %rdi
    00001498: 	cmpq	%rbx, %rdi
    0000149b: 	je	.Ltmp3560 # Offset: 5275
    0000149d: 	movq	0xe0(%rsp), %rax
    000014a5: 	leaq	0x1(%rax), %rsi
    000014a9: 	callq	_ZdlPvm@PLT # Offset: 5289
.Ltmp3560:
    000014ae: 	leaq	DATAat0x3353c(%rip), %rdx
    000014b5: 	movq	%r13, %rsi
    000014b8: 	movq	%rbp, %rdi
    000014bb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5307
    000014c0: 	movq	%rbp, %r8
    000014c3: 	leaq	_Z9logic_or7IhEbPKT_ib(%rip), %rcx
    000014ca: 	xorl	%edx, %edx
    000014cc: 	movq	%r12, %rdi
    000014cf: 	movl	$0x1f40, %esi
    000014d4: 	callq	_Z23testOneFunction_logicalIhPFbPKhibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5332
    000014d9: 	movq	0xd0(%rsp), %rdi
    000014e1: 	cmpq	%rbx, %rdi
    000014e4: 	je	.Ltmp3561 # Offset: 5348
    000014e6: 	movq	0xe0(%rsp), %rax
    000014ee: 	leaq	0x1(%rax), %rsi
    000014f2: 	callq	_ZdlPvm@PLT # Offset: 5362
.Ltmp3561:
    000014f7: 	leaq	DATAat0x33552(%rip), %rdx
    000014fe: 	movq	%r13, %rsi
    00001501: 	movq	%rbp, %rdi
    00001504: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5380
    00001509: 	movq	%rbp, %r8
    0000150c: 	leaq	_Z9logic_or8IhEbPKT_ib(%rip), %rcx
    00001513: 	xorl	%edx, %edx
    00001515: 	movq	%r12, %rdi
    00001518: 	movl	$0x1f40, %esi
    0000151d: 	callq	_Z23testOneFunction_logicalIhPFbPKhibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5405
    00001522: 	movq	0xd0(%rsp), %rdi
    0000152a: 	cmpq	%rbx, %rdi
    0000152d: 	je	.Ltmp3562 # Offset: 5421
    0000152f: 	movq	0xe0(%rsp), %rax
    00001537: 	leaq	0x1(%rax), %rsi
    0000153b: 	callq	_ZdlPvm@PLT # Offset: 5435
.Ltmp3562:
    00001540: 	movq	0x30(%rsp), %r14
    00001545: 	movq	0x38(%rsp), %r13
    0000154a: 	movq	%rbx, 0xd0(%rsp)
    00001552: 	movq	%r14, %rax
    00001555: 	addq	%r13, %rax
    00001558: 	je	.Ltmp3563 # Offset: 5464
    0000155a: 	testq	%r14, %r14
    0000155d: 	je	.Ltmp3564 # Offset: 5469
.Ltmp3563:
    00001563: 	movq	%r13, 0x28(%rsp)
    00001568: 	cmpq	$0xf, %r13
    0000156c: 	ja	.Ltmp3565 # Offset: 5484
    00001572: 	cmpq	$0x1, %r13
    00001576: 	jne	.Ltmp3566 # Offset: 5494
    0000157c: 	movzbl	(%r14), %eax
    00001580: 	movb	%al, 0xe0(%rsp)
    00001587: 	movq	%rbx, %rax
.Ltmp3606:
    0000158a: 	movq	%r13, 0xd8(%rsp)
    00001592: 	movb	$0x0, (%rax,%r13)
    00001597: 	movabsq	$0x3fffffffffffffff, %rax
    000015a1: 	subq	0xd8(%rsp), %rax
    000015a9: 	cmpq	$0x13, %rax
    000015ad: 	jbe	.Ltmp3567 # Offset: 5549
    000015b3: 	movl	$0x14, %edx
    000015b8: 	leaq	DATAat0x33568(%rip), %rsi
    000015bf: 	movq	%rbp, %rdi
    000015c2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5570
    000015c7: 	movl	iterations(%rip), %esi
    000015cd: 	movq	0xd0(%rsp), %rdi
    000015d5: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 5589
    000015da: 	movq	0xd0(%rsp), %rdi
    000015e2: 	cmpq	%rbx, %rdi
    000015e5: 	je	.Ltmp3568 # Offset: 5605
    000015e7: 	movq	0xe0(%rsp), %rax
    000015ef: 	leaq	0x1(%rax), %rsi
    000015f3: 	callq	_ZdlPvm@PLT # Offset: 5619
.Ltmp3568:
    000015f8: 	movq	0xb0(%rsp), %rdi
    00001600: 	leaq	0xc0(%rsp), %rax
    00001608: 	cmpq	%rax, %rdi
    0000160b: 	je	.Ltmp3569 # Offset: 5643
    0000160d: 	movq	0xc0(%rsp), %rax
    00001615: 	leaq	0x1(%rax), %rsi
    00001619: 	callq	_ZdlPvm@PLT # Offset: 5657
.Ltmp3569:
    0000161e: 	movq	0x90(%rsp), %rdi
    00001626: 	cmpq	0x10(%rsp), %rdi
    0000162b: 	je	.Ltmp3570 # Offset: 5675
    0000162d: 	movq	0xa0(%rsp), %rax
    00001635: 	leaq	0x1(%rax), %rsi
    00001639: 	callq	_ZdlPvm@PLT # Offset: 5689
.Ltmp3570:
    0000163e: 	movq	0x70(%rsp), %rdi
    00001643: 	cmpq	0x8(%rsp), %rdi
    00001648: 	je	.Ltmp3571 # Offset: 5704
    0000164a: 	movq	0x80(%rsp), %rax
    00001652: 	leaq	0x1(%rax), %rsi
    00001656: 	callq	_ZdlPvm@PLT # Offset: 5718
.Ltmp3571:
    0000165b: 	movq	0x50(%rsp), %rdi
    00001660: 	cmpq	(%rsp), %rdi
    00001664: 	je	.Ltmp3572 # Offset: 5732
    00001666: 	movq	0x60(%rsp), %rax
    0000166b: 	leaq	0x1(%rax), %rsi
    0000166f: 	callq	_ZdlPvm@PLT # Offset: 5743
.Ltmp3572:
    00001674: 	movq	%r12, %rdi
    00001677: 	movl	$0x1, %esi
    0000167c: 	callq	_ZdlPvm@PLT # Offset: 5756
    00001681: 	movq	0x30(%rsp), %rdi
    00001686: 	cmpq	0x18(%rsp), %rdi
    0000168b: 	je	.Ltmp3573 # Offset: 5771
    0000168d: 	movq	0x40(%rsp), %rax
    00001692: 	leaq	0x1(%rax), %rsi
    00001696: 	callq	_ZdlPvm@PLT # Offset: 5782
.Ltmp3573:
    0000169b: 	movq	0xf8(%rsp), %rax
    000016a3: 	subq	%fs:0x28, %rax
    000016ac: 	jne	.Ltmp3574 # Offset: 5804
    000016b2: 	addq	$0x108, %rsp
    000016b9: 	popq	%rbx
    000016ba: 	popq	%rbp
    000016bb: 	popq	%r12
    000016bd: 	popq	%r13
    000016bf: 	popq	%r14
    000016c1: 	popq	%r15
    000016c3: 	retq # Offset: 5827
    000016c4: 	nopl	(%rax) # Size: 4
.Ltmp3435:
    000016c8: 	testq	%r13, %r13
    000016cb: 	jne	.Ltmp3575 # Offset: 5835
    000016d1: 	movq	%rbx, %rax
    000016d4: 	jmp	.Ltmp3576 # Offset: 5844
    000016d9: 	nopl	(%rax) # Size: 7
.Ltmp3453:
    000016e0: 	testq	%r14, %r14
    000016e3: 	jne	.Ltmp3577 # Offset: 5859
    000016e9: 	movq	%rbx, %rax
    000016ec: 	jmp	.Ltmp3578 # Offset: 5868
    000016f1: 	nopl	(%rax) # Size: 7
.Ltmp3448:
    000016f8: 	testq	%r14, %r14
    000016fb: 	jne	.Ltmp3579 # Offset: 5883
    00001701: 	movq	(%rsp), %rax
    00001705: 	jmp	.Ltmp3580 # Offset: 5893
    0000170a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3459:
    00001710: 	testq	%r14, %r14
    00001713: 	jne	.Ltmp3581 # Offset: 5907
    00001719: 	movq	%rbx, %rax
    0000171c: 	jmp	.Ltmp3582 # Offset: 5916
    00001721: 	nopl	(%rax) # Size: 7
.Ltmp3466:
    00001728: 	testq	%r14, %r14
    0000172b: 	jne	.Ltmp3583 # Offset: 5931
    00001731: 	movq	%rbx, %rax
    00001734: 	jmp	.Ltmp3584 # Offset: 5940
    00001739: 	nopl	(%rax) # Size: 7
.Ltmp3479:
    00001740: 	testq	%r14, %r14
    00001743: 	jne	.Ltmp3585 # Offset: 5955
    00001749: 	movq	%rbx, %rax
    0000174c: 	jmp	.Ltmp3586 # Offset: 5964
    00001751: 	nopl	(%rax) # Size: 7
.Ltmp3473:
    00001758: 	testq	%r14, %r14
    0000175b: 	jne	.Ltmp3587 # Offset: 5979
    00001761: 	movq	%rbx, %rax
    00001764: 	jmp	.Ltmp3588 # Offset: 5988
    00001769: 	nopl	(%rax) # Size: 7
.Ltmp3491:
    00001770: 	testq	%r14, %r14
    00001773: 	jne	.Ltmp3589 # Offset: 6003
    00001779: 	movq	0x8(%rsp), %rax
    0000177e: 	jmp	.Ltmp3590 # Offset: 6014
    00001783: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3485:
    00001788: 	testq	%r14, %r14
    0000178b: 	jne	.Ltmp3591 # Offset: 6027
    00001791: 	movq	%rbx, %rax
    00001794: 	jmp	.Ltmp3592 # Offset: 6036
    00001799: 	nopl	(%rax) # Size: 7
.Ltmp3504:
    000017a0: 	testq	%r14, %r14
    000017a3: 	jne	.Ltmp3593 # Offset: 6051
    000017a9: 	movq	%rbx, %rax
    000017ac: 	jmp	.Ltmp3594 # Offset: 6060
    000017b1: 	nopl	(%rax) # Size: 7
.Ltmp3498:
    000017b8: 	testq	%r14, %r14
    000017bb: 	jne	.Ltmp3595 # Offset: 6075
    000017c1: 	movq	%rbx, %rax
    000017c4: 	jmp	.Ltmp3596 # Offset: 6084
    000017c9: 	nopl	(%rax) # Size: 7
.Ltmp3524:
    000017d0: 	testq	%r14, %r14
    000017d3: 	jne	.Ltmp3597 # Offset: 6099
    000017d9: 	movq	0x10(%rsp), %rax
    000017de: 	jmp	.Ltmp3598 # Offset: 6110
    000017e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3517:
    000017e8: 	testq	%r14, %r14
    000017eb: 	jne	.Ltmp3599 # Offset: 6123
    000017f1: 	movq	%rbx, %rax
    000017f4: 	jmp	.Ltmp3600 # Offset: 6132
    000017f9: 	nopl	(%rax) # Size: 7
.Ltmp3510:
    00001800: 	testq	%r14, %r14
    00001803: 	jne	.Ltmp3601 # Offset: 6147
    00001809: 	movq	%rbx, %rax
    0000180c: 	jmp	.Ltmp3602 # Offset: 6156
    00001811: 	nopl	(%rax) # Size: 7
.Ltmp3529:
    00001818: 	testq	%r14, %r14
    0000181b: 	jne	.Ltmp3603 # Offset: 6171
    00001821: 	movq	%rbx, %rax
    00001824: 	jmp	.Ltmp3604 # Offset: 6180
    00001829: 	nopl	(%rax) # Size: 7
.Ltmp3566:
    00001830: 	testq	%r13, %r13
    00001833: 	jne	.Ltmp3605 # Offset: 6195
    00001839: 	movq	%rbx, %rax
    0000183c: 	jmp	.Ltmp3606 # Offset: 6204
    00001841: 	nopl	(%rax) # Size: 7
.Ltmp3558:
    00001848: 	testq	%r14, %r14
    0000184b: 	jne	.Ltmp3607 # Offset: 6219
    00001851: 	movq	%rbx, %rax
    00001854: 	jmp	.Ltmp3608 # Offset: 6228
    00001859: 	nopl	(%rax) # Size: 7
.Ltmp3547:
    00001860: 	testq	%r14, %r14
    00001863: 	jne	.Ltmp3609 # Offset: 6243
    00001869: 	movq	%rbx, %rax
    0000186c: 	jmp	.Ltmp3610 # Offset: 6252
    00001871: 	nopl	(%rax) # Size: 7
.Ltmp3536:
    00001878: 	testq	%r14, %r14
    0000187b: 	jne	.Ltmp3611 # Offset: 6267
    00001881: 	movq	%rbx, %rax
    00001884: 	jmp	.Ltmp3612 # Offset: 6276
    00001889: 	nopl	(%rax) # Size: 7
.Ltmp3447:
    00001890: 	leaq	0x28(%rsp), %rsi
    00001895: 	leaq	0x50(%rsp), %rdi
    0000189a: 	xorl	%edx, %edx
    0000189c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6300
    000018a1: 	movq	%rax, 0x50(%rsp)
    000018a6: 	movq	%rax, %rdi
    000018a9: 	movq	0x28(%rsp), %rax
    000018ae: 	movq	%rax, 0x60(%rsp)
.Ltmp3615:
    000018b3: 	movq	%r14, %rdx
    000018b6: 	movq	%r15, %rsi
    000018b9: 	callq	memcpy@PLT # Offset: 6329
    000018be: 	movq	0x28(%rsp), %r14
    000018c3: 	movq	0x50(%rsp), %rax
    000018c8: 	jmp	.Ltmp3580 # Offset: 6344
    000018cd: 	nopl	(%rax) # Size: 3
.Ltmp3434:
    000018d0: 	leaq	0x28(%rsp), %rsi
    000018d5: 	leaq	0xd0(%rsp), %rdi
    000018dd: 	xorl	%edx, %edx
    000018df: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6367
    000018e4: 	movq	%rax, 0xd0(%rsp)
    000018ec: 	movq	%rax, %rdi
    000018ef: 	movq	0x28(%rsp), %rax
    000018f4: 	movq	%rax, 0xe0(%rsp)
.Ltmp3613:
    000018fc: 	movq	%r13, %rdx
    000018ff: 	movq	%rbp, %rsi
    00001902: 	callq	memcpy@PLT # Offset: 6402
    00001907: 	movq	0x28(%rsp), %r13
    0000190c: 	movq	0xd0(%rsp), %rax
    00001914: 	jmp	.Ltmp3576 # Offset: 6420
    00001919: 	nopl	(%rax) # Size: 7
.Ltmp3452:
    00001920: 	leaq	0x28(%rsp), %rsi
    00001925: 	xorl	%edx, %edx
    00001927: 	movq	%rbp, %rdi
    0000192a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6442
    0000192f: 	movq	%rax, 0xd0(%rsp)
    00001937: 	movq	%rax, %rdi
    0000193a: 	movq	0x28(%rsp), %rax
    0000193f: 	movq	%rax, 0xe0(%rsp)
.Ltmp3614:
    00001947: 	movq	%r14, %rdx
    0000194a: 	movq	%r15, %rsi
    0000194d: 	callq	memcpy@PLT # Offset: 6477
    00001952: 	movq	0x28(%rsp), %r14
    00001957: 	movq	0xd0(%rsp), %rax
    0000195f: 	jmp	.Ltmp3578 # Offset: 6495
    00001964: 	nopl	(%rax) # Size: 4
.Ltmp3458:
    00001968: 	leaq	0x28(%rsp), %rsi
    0000196d: 	xorl	%edx, %edx
    0000196f: 	movq	%rbp, %rdi
    00001972: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6514
    00001977: 	movq	%rax, 0xd0(%rsp)
    0000197f: 	movq	%rax, %rdi
    00001982: 	movq	0x28(%rsp), %rax
    00001987: 	movq	%rax, 0xe0(%rsp)
.Ltmp3616:
    0000198f: 	movq	%r14, %rdx
    00001992: 	movq	%r15, %rsi
    00001995: 	callq	memcpy@PLT # Offset: 6549
    0000199a: 	movq	0x28(%rsp), %r14
    0000199f: 	movq	0xd0(%rsp), %rax
    000019a7: 	jmp	.Ltmp3582 # Offset: 6567
    000019ac: 	nopl	(%rax) # Size: 4
.Ltmp3465:
    000019b0: 	leaq	0x28(%rsp), %rsi
    000019b5: 	xorl	%edx, %edx
    000019b7: 	movq	%rbp, %rdi
    000019ba: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6586
    000019bf: 	movq	%rax, 0xd0(%rsp)
    000019c7: 	movq	%rax, %rdi
    000019ca: 	movq	0x28(%rsp), %rax
    000019cf: 	movq	%rax, 0xe0(%rsp)
.Ltmp3617:
    000019d7: 	movq	%r14, %rdx
    000019da: 	movq	%r15, %rsi
    000019dd: 	callq	memcpy@PLT # Offset: 6621
    000019e2: 	movq	0x28(%rsp), %r14
    000019e7: 	movq	0xd0(%rsp), %rax
    000019ef: 	jmp	.Ltmp3584 # Offset: 6639
    000019f4: 	nopl	(%rax) # Size: 4
.Ltmp3478:
    000019f8: 	leaq	0x28(%rsp), %rsi
    000019fd: 	xorl	%edx, %edx
    000019ff: 	movq	%rbp, %rdi
    00001a02: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6658
    00001a07: 	movq	%rax, 0xd0(%rsp)
    00001a0f: 	movq	%rax, %rdi
    00001a12: 	movq	0x28(%rsp), %rax
    00001a17: 	movq	%rax, 0xe0(%rsp)
.Ltmp3618:
    00001a1f: 	movq	%r14, %rdx
    00001a22: 	movq	%r15, %rsi
    00001a25: 	callq	memcpy@PLT # Offset: 6693
    00001a2a: 	movq	0x28(%rsp), %r14
    00001a2f: 	movq	0xd0(%rsp), %rax
    00001a37: 	jmp	.Ltmp3586 # Offset: 6711
    00001a3c: 	nopl	(%rax) # Size: 4
.Ltmp3472:
    00001a40: 	leaq	0x28(%rsp), %rsi
    00001a45: 	xorl	%edx, %edx
    00001a47: 	movq	%rbp, %rdi
    00001a4a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6730
    00001a4f: 	movq	%rax, 0xd0(%rsp)
    00001a57: 	movq	%rax, %rdi
    00001a5a: 	movq	0x28(%rsp), %rax
    00001a5f: 	movq	%rax, 0xe0(%rsp)
.Ltmp3619:
    00001a67: 	movq	%r14, %rdx
    00001a6a: 	movq	%r15, %rsi
    00001a6d: 	callq	memcpy@PLT # Offset: 6765
    00001a72: 	movq	0x28(%rsp), %r14
    00001a77: 	movq	0xd0(%rsp), %rax
    00001a7f: 	jmp	.Ltmp3588 # Offset: 6783
    00001a84: 	nopl	(%rax) # Size: 4
.Ltmp3484:
    00001a88: 	leaq	0x28(%rsp), %rsi
    00001a8d: 	xorl	%edx, %edx
    00001a8f: 	movq	%rbp, %rdi
    00001a92: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6802
    00001a97: 	movq	%rax, 0xd0(%rsp)
    00001a9f: 	movq	%rax, %rdi
    00001aa2: 	movq	0x28(%rsp), %rax
    00001aa7: 	movq	%rax, 0xe0(%rsp)
.Ltmp3621:
    00001aaf: 	movq	%r14, %rdx
    00001ab2: 	movq	%r15, %rsi
    00001ab5: 	callq	memcpy@PLT # Offset: 6837
    00001aba: 	movq	0x28(%rsp), %r14
    00001abf: 	movq	0xd0(%rsp), %rax
    00001ac7: 	jmp	.Ltmp3592 # Offset: 6855
    00001acc: 	nopl	(%rax) # Size: 4
.Ltmp3503:
    00001ad0: 	leaq	0x28(%rsp), %rsi
    00001ad5: 	xorl	%edx, %edx
    00001ad7: 	movq	%rbp, %rdi
    00001ada: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6874
    00001adf: 	movq	%rax, 0xd0(%rsp)
    00001ae7: 	movq	%rax, %rdi
    00001aea: 	movq	0x28(%rsp), %rax
    00001aef: 	movq	%rax, 0xe0(%rsp)
.Ltmp3622:
    00001af7: 	movq	%r14, %rdx
    00001afa: 	movq	%r15, %rsi
    00001afd: 	callq	memcpy@PLT # Offset: 6909
    00001b02: 	movq	0x28(%rsp), %r14
    00001b07: 	movq	0xd0(%rsp), %rax
    00001b0f: 	jmp	.Ltmp3594 # Offset: 6927
    00001b14: 	nopl	(%rax) # Size: 4
.Ltmp3490:
    00001b18: 	leaq	0x28(%rsp), %rsi
    00001b1d: 	leaq	0x70(%rsp), %rdi
    00001b22: 	xorl	%edx, %edx
    00001b24: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6948
    00001b29: 	movq	%rax, 0x70(%rsp)
    00001b2e: 	movq	%rax, %rdi
    00001b31: 	movq	0x28(%rsp), %rax
    00001b36: 	movq	%rax, 0x80(%rsp)
.Ltmp3620:
    00001b3e: 	movq	%r14, %rdx
    00001b41: 	movq	%r15, %rsi
    00001b44: 	callq	memcpy@PLT # Offset: 6980
    00001b49: 	movq	0x28(%rsp), %r14
    00001b4e: 	movq	0x70(%rsp), %rax
    00001b53: 	jmp	.Ltmp3590 # Offset: 6995
    00001b58: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3516:
    00001b60: 	leaq	0x28(%rsp), %rsi
    00001b65: 	xorl	%edx, %edx
    00001b67: 	movq	%rbp, %rdi
    00001b6a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7018
    00001b6f: 	movq	%rax, 0xd0(%rsp)
    00001b77: 	movq	%rax, %rdi
    00001b7a: 	movq	0x28(%rsp), %rax
    00001b7f: 	movq	%rax, 0xe0(%rsp)
.Ltmp3625:
    00001b87: 	movq	%r14, %rdx
    00001b8a: 	movq	%r15, %rsi
    00001b8d: 	callq	memcpy@PLT # Offset: 7053
    00001b92: 	movq	0x28(%rsp), %r14
    00001b97: 	movq	0xd0(%rsp), %rax
    00001b9f: 	jmp	.Ltmp3600 # Offset: 7071
    00001ba4: 	nopl	(%rax) # Size: 4
.Ltmp3509:
    00001ba8: 	leaq	0x28(%rsp), %rsi
    00001bad: 	xorl	%edx, %edx
    00001baf: 	movq	%rbp, %rdi
    00001bb2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7090
    00001bb7: 	movq	%rax, 0xd0(%rsp)
    00001bbf: 	movq	%rax, %rdi
    00001bc2: 	movq	0x28(%rsp), %rax
    00001bc7: 	movq	%rax, 0xe0(%rsp)
.Ltmp3626:
    00001bcf: 	movq	%r14, %rdx
    00001bd2: 	movq	%r15, %rsi
    00001bd5: 	callq	memcpy@PLT # Offset: 7125
    00001bda: 	movq	0x28(%rsp), %r14
    00001bdf: 	movq	0xd0(%rsp), %rax
    00001be7: 	jmp	.Ltmp3602 # Offset: 7143
    00001bec: 	nopl	(%rax) # Size: 4
.Ltmp3497:
    00001bf0: 	leaq	0x28(%rsp), %rsi
    00001bf5: 	xorl	%edx, %edx
    00001bf7: 	movq	%rbp, %rdi
    00001bfa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7162
    00001bff: 	movq	%rax, 0xd0(%rsp)
    00001c07: 	movq	%rax, %rdi
    00001c0a: 	movq	0x28(%rsp), %rax
    00001c0f: 	movq	%rax, 0xe0(%rsp)
.Ltmp3623:
    00001c17: 	movq	%r14, %rdx
    00001c1a: 	movq	%r15, %rsi
    00001c1d: 	callq	memcpy@PLT # Offset: 7197
    00001c22: 	movq	0x28(%rsp), %r14
    00001c27: 	movq	0xd0(%rsp), %rax
    00001c2f: 	jmp	.Ltmp3596 # Offset: 7215
    00001c34: 	nopl	(%rax) # Size: 4
.Ltmp3523:
    00001c38: 	leaq	0x28(%rsp), %rsi
    00001c3d: 	leaq	0x90(%rsp), %rdi
    00001c45: 	xorl	%edx, %edx
    00001c47: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7239
    00001c4c: 	movq	%rax, 0x90(%rsp)
    00001c54: 	movq	%rax, %rdi
    00001c57: 	movq	0x28(%rsp), %rax
    00001c5c: 	movq	%rax, 0xa0(%rsp)
.Ltmp3624:
    00001c64: 	movq	%r14, %rdx
    00001c67: 	movq	%r15, %rsi
    00001c6a: 	callq	memcpy@PLT # Offset: 7274
    00001c6f: 	movq	0x28(%rsp), %r14
    00001c74: 	movq	0x90(%rsp), %rax
    00001c7c: 	jmp	.Ltmp3598 # Offset: 7292
    00001c81: 	nopl	(%rax) # Size: 7
.Ltmp3535:
    00001c88: 	leaq	0x28(%rsp), %rsi
    00001c8d: 	xorl	%edx, %edx
    00001c8f: 	movq	%rbp, %rdi
    00001c92: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7314
    00001c97: 	movq	%rax, 0xd0(%rsp)
    00001c9f: 	movq	%rax, %rdi
    00001ca2: 	movq	0x28(%rsp), %rax
    00001ca7: 	movq	%rax, 0xe0(%rsp)
.Ltmp3631:
    00001caf: 	movq	%r14, %rdx
    00001cb2: 	movq	%r15, %rsi
    00001cb5: 	callq	memcpy@PLT # Offset: 7349
    00001cba: 	movq	0x28(%rsp), %r14
    00001cbf: 	movq	0xd0(%rsp), %rax
    00001cc7: 	jmp	.Ltmp3612 # Offset: 7367
    00001ccc: 	nopl	(%rax) # Size: 4
.Ltmp3528:
    00001cd0: 	leaq	0x28(%rsp), %rsi
    00001cd5: 	xorl	%edx, %edx
    00001cd7: 	movq	%rbp, %rdi
    00001cda: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7386
    00001cdf: 	movq	%rax, 0xd0(%rsp)
    00001ce7: 	movq	%rax, %rdi
    00001cea: 	movq	0x28(%rsp), %rax
    00001cef: 	movq	%rax, 0xe0(%rsp)
.Ltmp3627:
    00001cf7: 	movq	%r14, %rdx
    00001cfa: 	movq	%r15, %rsi
    00001cfd: 	callq	memcpy@PLT # Offset: 7421
    00001d02: 	movq	0x28(%rsp), %r14
    00001d07: 	movq	0xd0(%rsp), %rax
    00001d0f: 	jmp	.Ltmp3604 # Offset: 7439
    00001d14: 	nopl	(%rax) # Size: 4
.Ltmp3565:
    00001d18: 	leaq	0x28(%rsp), %rsi
    00001d1d: 	xorl	%edx, %edx
    00001d1f: 	movq	%rbp, %rdi
    00001d22: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7458
    00001d27: 	movq	%rax, 0xd0(%rsp)
    00001d2f: 	movq	%rax, %rdi
    00001d32: 	movq	0x28(%rsp), %rax
    00001d37: 	movq	%rax, 0xe0(%rsp)
.Ltmp3628:
    00001d3f: 	movq	%r13, %rdx
    00001d42: 	movq	%r14, %rsi
    00001d45: 	callq	memcpy@PLT # Offset: 7493
    00001d4a: 	movq	0x28(%rsp), %r13
    00001d4f: 	movq	0xd0(%rsp), %rax
    00001d57: 	jmp	.Ltmp3606 # Offset: 7511
    00001d5c: 	nopl	(%rax) # Size: 4
.Ltmp3557:
    00001d60: 	leaq	0x28(%rsp), %rsi
    00001d65: 	xorl	%edx, %edx
    00001d67: 	movq	%rbp, %rdi
    00001d6a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7530
    00001d6f: 	movq	%rax, 0xd0(%rsp)
    00001d77: 	movq	%rax, %rdi
    00001d7a: 	movq	0x28(%rsp), %rax
    00001d7f: 	movq	%rax, 0xe0(%rsp)
.Ltmp3629:
    00001d87: 	movq	%r14, %rdx
    00001d8a: 	movq	%r15, %rsi
    00001d8d: 	callq	memcpy@PLT # Offset: 7565
    00001d92: 	movq	0x28(%rsp), %r14
    00001d97: 	movq	0xd0(%rsp), %rax
    00001d9f: 	jmp	.Ltmp3608 # Offset: 7583
    00001da4: 	nopl	(%rax) # Size: 4
.Ltmp3546:
    00001da8: 	leaq	0x28(%rsp), %rsi
    00001dad: 	xorl	%edx, %edx
    00001daf: 	movq	%rbp, %rdi
    00001db2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7602
    00001db7: 	movq	%rax, 0xd0(%rsp)
    00001dbf: 	movq	%rax, %rdi
    00001dc2: 	movq	0x28(%rsp), %rax
    00001dc7: 	movq	%rax, 0xe0(%rsp)
.Ltmp3630:
    00001dcf: 	movq	%r14, %rdx
    00001dd2: 	movq	%r15, %rsi
    00001dd5: 	callq	memcpy@PLT # Offset: 7637
    00001dda: 	movq	0x28(%rsp), %r14
    00001ddf: 	movq	0xd0(%rsp), %rax
    00001de7: 	jmp	.Ltmp3610 # Offset: 7655
.Ltmp3436:
    00001dec: 	leaq	DATAat0x33182(%rip), %rdi
    00001df3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7667
.Ltmp3446:
    00001df8: 	leaq	DATAat0x33158(%rip), %rdi
    00001dff: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7679
.Ltmp3449:
    00001e04: 	leaq	DATAat0x33182(%rip), %rdi
    00001e0b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7691
.Ltmp3451:
    00001e10: 	leaq	DATAat0x33158(%rip), %rdi
    00001e17: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7703
.Ltmp3454:
    00001e1c: 	leaq	DATAat0x33182(%rip), %rdi
    00001e23: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7715
.Ltmp3457:
    00001e28: 	leaq	DATAat0x33158(%rip), %rdi
    00001e2f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7727
.Ltmp3460:
    00001e34: 	leaq	DATAat0x33182(%rip), %rdi
    00001e3b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7739
.Ltmp3464:
    00001e40: 	leaq	DATAat0x33158(%rip), %rdi
    00001e47: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7751
.Ltmp3467:
    00001e4c: 	leaq	DATAat0x33182(%rip), %rdi
    00001e53: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7763
.Ltmp3471:
    00001e58: 	leaq	DATAat0x33158(%rip), %rdi
    00001e5f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7775
.Ltmp3474:
    00001e64: 	leaq	DATAat0x33182(%rip), %rdi
    00001e6b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7787
.Ltmp3477:
    00001e70: 	leaq	DATAat0x33158(%rip), %rdi
    00001e77: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7799
.Ltmp3480:
    00001e7c: 	leaq	DATAat0x33182(%rip), %rdi
    00001e83: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7811
.Ltmp3483:
    00001e88: 	leaq	DATAat0x33158(%rip), %rdi
    00001e8f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7823
.Ltmp3486:
    00001e94: 	leaq	DATAat0x33182(%rip), %rdi
    00001e9b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7835
.Ltmp3489:
    00001ea0: 	leaq	DATAat0x33158(%rip), %rdi
    00001ea7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7847
.Ltmp3492:
    00001eac: 	leaq	DATAat0x33182(%rip), %rdi
    00001eb3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7859
.Ltmp3496:
    00001eb8: 	leaq	DATAat0x33158(%rip), %rdi
    00001ebf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7871
.Ltmp3499:
    00001ec4: 	leaq	DATAat0x33182(%rip), %rdi
    00001ecb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7883
.Ltmp3502:
    00001ed0: 	leaq	DATAat0x33158(%rip), %rdi
    00001ed7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7895
.Ltmp3505:
    00001edc: 	leaq	DATAat0x33182(%rip), %rdi
    00001ee3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7907
.Ltmp3508:
    00001ee8: 	leaq	DATAat0x33158(%rip), %rdi
    00001eef: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7919
.Ltmp3511:
    00001ef4: 	leaq	DATAat0x33182(%rip), %rdi
    00001efb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7931
.Ltmp3515:
    00001f00: 	leaq	DATAat0x33158(%rip), %rdi
    00001f07: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7943
.Ltmp3518:
    00001f0c: 	leaq	DATAat0x33182(%rip), %rdi
    00001f13: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7955
.Ltmp3522:
    00001f18: 	leaq	DATAat0x33158(%rip), %rdi
    00001f1f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7967
.Ltmp3525:
    00001f24: 	leaq	DATAat0x33182(%rip), %rdi
    00001f2b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7979
.Ltmp3527:
    00001f30: 	leaq	DATAat0x33158(%rip), %rdi
    00001f37: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7991
.Ltmp3530:
    00001f3c: 	leaq	DATAat0x33182(%rip), %rdi
    00001f43: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8003
.Ltmp3534:
    00001f48: 	leaq	DATAat0x33158(%rip), %rdi
    00001f4f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8015
.Ltmp3537:
    00001f54: 	leaq	DATAat0x33182(%rip), %rdi
    00001f5b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8027
.Ltmp3545:
    00001f60: 	leaq	DATAat0x33158(%rip), %rdi
    00001f67: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8039
.Ltmp3548:
    00001f6c: 	leaq	DATAat0x33182(%rip), %rdi
    00001f73: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8051
.Ltmp3556:
    00001f78: 	leaq	DATAat0x33158(%rip), %rdi
    00001f7f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8063
.Ltmp3559:
    00001f84: 	leaq	DATAat0x33182(%rip), %rdi
    00001f8b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8075
.Ltmp3564:
    00001f90: 	leaq	DATAat0x33158(%rip), %rdi
    00001f97: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8087
.Ltmp3567:
    00001f9c: 	leaq	DATAat0x33182(%rip), %rdi
    00001fa3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8099
.Ltmp3574:
    00001fa8: 	callq	__stack_chk_fail@PLT # Offset: 8104
.Ltmp3575:
    00001fad: 	movq	%rbx, %rdi
    00001fb0: 	jmp	.Ltmp3613 # Offset: 8112
.Ltmp3577:
    00001fb5: 	movq	%rbx, %rdi
    00001fb8: 	jmp	.Ltmp3614 # Offset: 8120
.Ltmp3579:
    00001fbd: 	movq	(%rsp), %rdi
    00001fc1: 	jmp	.Ltmp3615 # Offset: 8129
.Ltmp3581:
    00001fc6: 	movq	%rbx, %rdi
    00001fc9: 	jmp	.Ltmp3616 # Offset: 8137
.Ltmp3583:
    00001fce: 	movq	%rbx, %rdi
    00001fd1: 	jmp	.Ltmp3617 # Offset: 8145
.Ltmp3585:
    00001fd6: 	movq	%rbx, %rdi
    00001fd9: 	jmp	.Ltmp3618 # Offset: 8153
.Ltmp3587:
    00001fde: 	movq	%rbx, %rdi
    00001fe1: 	jmp	.Ltmp3619 # Offset: 8161
.Ltmp3589:
    00001fe6: 	movq	0x8(%rsp), %rdi
    00001feb: 	jmp	.Ltmp3620 # Offset: 8171
.Ltmp3591:
    00001ff0: 	movq	%rbx, %rdi
    00001ff3: 	jmp	.Ltmp3621 # Offset: 8179
.Ltmp3593:
    00001ff8: 	movq	%rbx, %rdi
    00001ffb: 	jmp	.Ltmp3622 # Offset: 8187
.Ltmp3595:
    00002000: 	movq	%rbx, %rdi
    00002003: 	jmp	.Ltmp3623 # Offset: 8195
.Ltmp3597:
    00002008: 	movq	0x10(%rsp), %rdi
    0000200d: 	jmp	.Ltmp3624 # Offset: 8205
.Ltmp3599:
    00002012: 	movq	%rbx, %rdi
    00002015: 	jmp	.Ltmp3625 # Offset: 8213
.Ltmp3601:
    0000201a: 	movq	%rbx, %rdi
    0000201d: 	jmp	.Ltmp3626 # Offset: 8221
.Ltmp3603:
    00002022: 	movq	%rbx, %rdi
    00002025: 	jmp	.Ltmp3627 # Offset: 8229
.Ltmp3605:
    0000202a: 	movq	%rbx, %rdi
    0000202d: 	jmp	.Ltmp3628 # Offset: 8237
.Ltmp3607:
    00002032: 	movq	%rbx, %rdi
    00002035: 	jmp	.Ltmp3629 # Offset: 8245
.Ltmp3609:
    0000203a: 	movq	%rbx, %rdi
    0000203d: 	jmp	.Ltmp3630 # Offset: 8253
.Ltmp3611:
    00002042: 	movq	%rbx, %rdi
    00002045: 	jmp	.Ltmp3631 # Offset: 8261
.Ltmp3433:
    0000204a: 	leaq	DATAat0x33158(%rip), %rdi
    00002051: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8273
    00002056: 	endbr64
.Ltmp3645:
    0000205a: 	movq	%rax, %rbp
    0000205d: 	jmp	.Ltmp3632 # Offset: 8285
    0000205f: 	endbr64
.Ltmp3634:
    00002063: 	movq	%rax, %rbp
    00002066: 	jmp	.Ltmp3633 # Offset: 8294
    00002068: 	endbr64
    0000206c: 	jmp	.Ltmp3634 # Offset: 8300
.Ltmp3632:
    0000206e: 	movq	0xd0(%rsp), %rdi
    00002076: 	cmpq	%rbx, %rdi
    00002079: 	je	.Ltmp3635 # Offset: 8313
    0000207b: 	movq	0xe0(%rsp), %rax
    00002083: 	leaq	0x1(%rax), %rsi
    00002087: 	callq	_ZdlPvm@PLT # Offset: 8327
.Ltmp3635:
    0000208c: 	movq	0x50(%rsp), %rdi
    00002091: 	cmpq	(%rsp), %rdi
    00002095: 	je	.Ltmp3636 # Offset: 8341
    00002097: 	movq	0x60(%rsp), %rax
    0000209c: 	leaq	0x1(%rax), %rsi
    000020a0: 	callq	_ZdlPvm@PLT # Offset: 8352
.Ltmp3636:
    000020a5: 	movl	$0x1, %esi
    000020aa: 	movq	%r12, %rdi
    000020ad: 	movq	%rbp, %rbx
    000020b0: 	callq	_ZdlPvm@PLT # Offset: 8368
.Ltmp3650:
    000020b5: 	movq	0x30(%rsp), %rdi
    000020ba: 	cmpq	0x18(%rsp), %rdi
    000020bf: 	je	.Ltmp3637 # Offset: 8383
    000020c1: 	movq	0x40(%rsp), %rax
    000020c6: 	leaq	0x1(%rax), %rsi
    000020ca: 	callq	_ZdlPvm@PLT # Offset: 8394
.Ltmp3637:
    000020cf: 	movq	%rbx, %rdi
    000020d2: 	callq	_Unwind_Resume@PLT # Offset: 8402
.Ltmp3633:
    000020d7: 	movq	0xd0(%rsp), %rdi
    000020df: 	cmpq	%rbx, %rdi
    000020e2: 	je	.Ltmp3636 # Offset: 8418
    000020e4: 	movq	0xe0(%rsp), %rax
    000020ec: 	leaq	0x1(%rax), %rsi
    000020f0: 	callq	_ZdlPvm@PLT # Offset: 8432
    000020f5: 	jmp	.Ltmp3636 # Offset: 8437
    000020f7: 	endbr64
.Ltmp3639:
    000020fb: 	movq	%rax, %rbp
    000020fe: 	jmp	.Ltmp3638 # Offset: 8446
    00002103: 	endbr64
    00002107: 	jmp	.Ltmp3639 # Offset: 8455
    00002109: 	endbr64
    0000210d: 	jmp	.Ltmp3639 # Offset: 8461
    0000210f: 	endbr64
.Ltmp3641:
    00002113: 	movq	%rax, %rbp
    00002116: 	jmp	.Ltmp3640 # Offset: 8470
    00002118: 	endbr64
    0000211c: 	jmp	.Ltmp3641 # Offset: 8476
    0000211e: 	endbr64
.Ltmp3643:
    00002122: 	movq	%rax, %rbp
    00002125: 	jmp	.Ltmp3642 # Offset: 8485
    00002127: 	endbr64
    0000212b: 	jmp	.Ltmp3643 # Offset: 8491
.Ltmp3642:
    0000212d: 	movq	0xd0(%rsp), %rdi
    00002135: 	cmpq	%rbx, %rdi
    00002138: 	je	.Ltmp3640 # Offset: 8504
    0000213a: 	movq	0xe0(%rsp), %rax
    00002142: 	leaq	0x1(%rax), %rsi
    00002146: 	callq	_ZdlPvm@PLT # Offset: 8518
.Ltmp3640:
    0000214b: 	movq	0x70(%rsp), %rdi
    00002150: 	cmpq	0x8(%rsp), %rdi
    00002155: 	je	.Ltmp3635 # Offset: 8533
    0000215b: 	movq	0x80(%rsp), %rax
    00002163: 	leaq	0x1(%rax), %rsi
    00002167: 	callq	_ZdlPvm@PLT # Offset: 8551
    0000216c: 	jmp	.Ltmp3635 # Offset: 8556
    00002171: 	endbr64
    00002175: 	jmp	.Ltmp3634 # Offset: 8565
    0000217a: 	endbr64
    0000217e: 	movq	%rax, %rbp
    00002181: 	jmp	.Ltmp3636 # Offset: 8577
    00002186: 	endbr64
    0000218a: 	jmp	.Ltmp3634 # Offset: 8586
    0000218f: 	endbr64
    00002193: 	jmp	.Ltmp3634 # Offset: 8595
    00002198: 	endbr64
    0000219c: 	jmp	.Ltmp3634 # Offset: 8604
    000021a1: 	endbr64
    000021a5: 	jmp	.Ltmp3634 # Offset: 8613
    000021aa: 	endbr64
    000021ae: 	jmp	.Ltmp3634 # Offset: 8622
    000021b3: 	endbr64
    000021b7: 	jmp	.Ltmp3634 # Offset: 8631
    000021bc: 	endbr64
.Ltmp3644:
    000021c0: 	movq	%rax, %rbp
    000021c3: 	jmp	.Ltmp3635 # Offset: 8643
    000021c8: 	endbr64
    000021cc: 	jmp	.Ltmp3644 # Offset: 8652
    000021ce: 	endbr64
    000021d2: 	jmp	.Ltmp3645 # Offset: 8658
    000021d7: 	endbr64
    000021db: 	jmp	.Ltmp3645 # Offset: 8667
    000021e0: 	endbr64
    000021e4: 	jmp	.Ltmp3645 # Offset: 8676
    000021e9: 	endbr64
    000021ed: 	jmp	.Ltmp3645 # Offset: 8685
    000021f2: 	endbr64
    000021f6: 	jmp	.Ltmp3645 # Offset: 8694
    000021fb: 	endbr64
    000021ff: 	jmp	.Ltmp3643 # Offset: 8703
    00002204: 	endbr64
    00002208: 	jmp	.Ltmp3643 # Offset: 8712
    0000220d: 	endbr64
    00002211: 	jmp	.Ltmp3643 # Offset: 8721
    00002216: 	endbr64
    0000221a: 	jmp	.Ltmp3643 # Offset: 8730
    0000221f: 	endbr64
    00002223: 	jmp	.Ltmp3643 # Offset: 8739
    00002228: 	endbr64
    0000222c: 	jmp	.Ltmp3645 # Offset: 8748
    00002231: 	endbr64
    00002235: 	jmp	.Ltmp3645 # Offset: 8757
    0000223a: 	endbr64
    0000223e: 	jmp	.Ltmp3645 # Offset: 8766
    00002243: 	endbr64
    00002247: 	jmp	.Ltmp3645 # Offset: 8775
    0000224c: 	endbr64
.Ltmp3647:
    00002250: 	movq	%rax, %rbp
    00002253: 	jmp	.Ltmp3646 # Offset: 8787
    00002255: 	endbr64
    00002259: 	jmp	.Ltmp3647 # Offset: 8793
.Ltmp3646:
    0000225b: 	movq	0xd0(%rsp), %rdi
    00002263: 	cmpq	%rbx, %rdi
    00002266: 	je	.Ltmp3648 # Offset: 8806
    00002268: 	movq	0xe0(%rsp), %rax
    00002270: 	leaq	0x1(%rax), %rsi
    00002274: 	callq	_ZdlPvm@PLT # Offset: 8820
.Ltmp3648:
    00002279: 	movq	0xb0(%rsp), %rdi
    00002281: 	leaq	0xc0(%rsp), %rax
    00002289: 	cmpq	%rax, %rdi
    0000228c: 	je	.Ltmp3649 # Offset: 8844
    0000228e: 	movq	0xc0(%rsp), %rax
    00002296: 	leaq	0x1(%rax), %rsi
    0000229a: 	callq	_ZdlPvm@PLT # Offset: 8858
.Ltmp3649:
    0000229f: 	movq	0x90(%rsp), %rdi
    000022a7: 	cmpq	0x10(%rsp), %rdi
    000022ac: 	je	.Ltmp3640 # Offset: 8876
    000022b2: 	movq	0xa0(%rsp), %rax
    000022ba: 	leaq	0x1(%rax), %rsi
    000022be: 	callq	_ZdlPvm@PLT # Offset: 8894
    000022c3: 	jmp	.Ltmp3640 # Offset: 8899
    000022c8: 	endbr64
    000022cc: 	jmp	.Ltmp3643 # Offset: 8908
    000022d1: 	endbr64
    000022d5: 	jmp	.Ltmp3643 # Offset: 8917
    000022da: 	endbr64
    000022de: 	jmp	.Ltmp3647 # Offset: 8926
    000022e3: 	endbr64
    000022e7: 	jmp	.Ltmp3647 # Offset: 8935
    000022ec: 	endbr64
    000022f0: 	jmp	.Ltmp3647 # Offset: 8944
    000022f5: 	endbr64
    000022f9: 	jmp	.Ltmp3647 # Offset: 8953
    000022fe: 	endbr64
    00002302: 	jmp	.Ltmp3647 # Offset: 8962
    00002307: 	endbr64
    0000230b: 	jmp	.Ltmp3647 # Offset: 8971
    00002310: 	endbr64
    00002314: 	jmp	.Ltmp3647 # Offset: 8980
    00002319: 	endbr64
    0000231d: 	movq	%rax, %rbx
    00002320: 	jmp	.Ltmp3650 # Offset: 8992
    00002325: 	endbr64
    00002329: 	jmp	.Ltmp3647 # Offset: 9001
    0000232e: 	endbr64
    00002332: 	jmp	.Ltmp3647 # Offset: 9010
    00002337: 	endbr64
    0000233b: 	jmp	.Ltmp3647 # Offset: 9019
    00002340: 	endbr64
    00002344: 	jmp	.Ltmp3647 # Offset: 9028
    00002349: 	endbr64
    0000234d: 	jmp	.Ltmp3639 # Offset: 9037
    00002352: 	endbr64
    00002356: 	jmp	.Ltmp3639 # Offset: 9046
    0000235b: 	endbr64
    0000235f: 	jmp	.Ltmp3639 # Offset: 9055
.Ltmp3638:
    00002364: 	movq	0xd0(%rsp), %rdi
    0000236c: 	cmpq	%rbx, %rdi
    0000236f: 	je	.Ltmp3649 # Offset: 9071
    00002375: 	movq	0xe0(%rsp), %rax
    0000237d: 	leaq	0x1(%rax), %rsi
    00002381: 	callq	_ZdlPvm@PLT # Offset: 9089
    00002386: 	jmp	.Ltmp3649 # Offset: 9094
    0000238b: 	endbr64
    0000238f: 	jmp	.Ltmp3643 # Offset: 9103
    00002394: 	endbr64
    00002398: 	jmp	.Ltmp3643 # Offset: 9112
    0000239d: 	endbr64
    000023a1: 	jmp	.Ltmp3639 # Offset: 9121
    000023a6: 	endbr64
    000023aa: 	jmp	.Ltmp3639 # Offset: 9130
    000023af: 	endbr64
    000023b3: 	jmp	.Ltmp3639 # Offset: 9139
    000023b8: 	endbr64
    000023bc: 	movq	%rax, %rbp
    000023bf: 	jmp	.Ltmp3648 # Offset: 9151
    000023c4: 	endbr64
.Ltmp3651:
    000023c8: 	movq	%rax, %rbp
    000023cb: 	jmp	.Ltmp3649 # Offset: 9163
    000023d0: 	endbr64
    000023d4: 	jmp	.Ltmp3651 # Offset: 9172
    000023d6: 	endbr64
    000023da: 	jmp	.Ltmp3645 # Offset: 9178
    000023df: 	endbr64
    000023e3: 	jmp	.Ltmp3645 # Offset: 9187
    000023e8: 	endbr64
    000023ec: 	jmp	.Ltmp3643 # Offset: 9196
    000023f1: 	endbr64
    000023f5: 	jmp	.Ltmp3639 # Offset: 9205
    000023fa: 	endbr64
    000023fe: 	jmp	.Ltmp3645 # Offset: 9214
    00002403: 	endbr64
    00002407: 	jmp	.Ltmp3645 # Offset: 9223
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIhEvv"

Binary Function "_Z21testOneFunction_equalIsPFsPKsisEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 389
  State       : disassembled
  Address     : 0x29270
  Size        : 0x224
  MaxSize     : 0x230
  Offset      : 0x29270
  Section     : .text
  Orc Section : .local.text._Z21testOneFunction_equalIsPFsPKsisEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0388:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x331c8(%rip), %r15
    0000000d: 	pushq	%r14
    0000000f: 	movq	%rcx, %r14
    00000012: 	pushq	%r13
    00000014: 	movq	%rdi, %r13
    00000017: 	pushq	%r12
    00000019: 	movl	%esi, %r12d
    0000001c: 	pushq	%rbp
    0000001d: 	movq	%rdx, %rbp
    00000020: 	pushq	%rbx
    00000021: 	xorl	%ebx, %ebx
    00000023: 	subq	$0x18, %rsp
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x8(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	callq	clock@PLT # Offset: 55
    0000003c: 	movsd	init_value(%rip), %xmm0
    00000044: 	movq	%rax, start_time(%rip)
    0000004b: 	movl	iterations(%rip), %eax
    00000051: 	testl	%eax, %eax
    00000053: 	jle	.Ltmp3652 # Offset: 83
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp3654:
    00000058: 	cvttsd2si	%xmm0, %edx
    0000005c: 	movl	%r12d, %esi
    0000005f: 	movq	%r13, %rdi
    00000062: 	movswl	%dx, %edx
    00000065: 	callq	*%rbp # Offset: 101
    00000067: 	movsd	init_value(%rip), %xmm0
    0000006f: 	movl	%eax, %r8d
    00000072: 	cvttsd2si	%xmm0, %eax
    00000076: 	cmpw	%ax, %r8w
    0000007a: 	je	.Ltmp3653 # Offset: 122
    0000007c: 	movq	(%r14), %rdx
    0000007f: 	xorl	%eax, %eax
    00000081: 	movq	%r15, %rsi
    00000084: 	movl	$0x1, %edi
    00000089: 	addl	$0x1, %ebx
    0000008c: 	callq	__printf_chk@PLT # Offset: 140
    00000091: 	cmpl	%ebx, iterations(%rip)
    00000097: 	jle	.Ltmp3652 # Offset: 151
    00000099: 	movsd	init_value(%rip), %xmm0
    000000a1: 	jmp	.Ltmp3654 # Offset: 161
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3653:
    000000a8: 	addl	$0x1, %ebx
    000000ab: 	cmpl	%ebx, iterations(%rip)
    000000b1: 	jg	.Ltmp3654 # Offset: 177
.Ltmp3652:
    000000b3: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000ba: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000c1: 	subq	$0x20, %rax
    000000c5: 	cmpq	%rax, %rbx
    000000c8: 	je	.Ltmp3655 # Offset: 200
    000000ce: 	leaq	0x10(%rbx), %rdi
    000000d2: 	movq	0x8(%r14), %r12
    000000d6: 	movq	%rdi, (%rbx)
    000000d9: 	movq	(%r14), %rbp
    000000dc: 	movq	%rbp, %rax
    000000df: 	addq	%r12, %rax
    000000e2: 	je	.Ltmp3656 # Offset: 226
    000000e4: 	testq	%rbp, %rbp
    000000e7: 	je	.Ltmp3657 # Offset: 231
.Ltmp3656:
    000000ed: 	movq	%r12, (%rsp)
    000000f1: 	cmpq	$0xf, %r12
    000000f5: 	ja	.Ltmp3658 # Offset: 245
    000000fb: 	cmpq	$0x1, %r12
    000000ff: 	jne	.Ltmp3659 # Offset: 255
    00000105: 	movzbl	(%rbp), %eax
    00000109: 	movb	%al, 0x10(%rbx)
.Ltmp3662:
    0000010c: 	movq	%r12, 0x8(%rbx)
    00000110: 	movb	$0x0, (%rdi,%r12)
    00000115: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000011c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000123: 	addq	$0x20, %rax
    00000127: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000012e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000135: 	je	.Ltmp3660 # Offset: 309
.Ltmp3663:
    0000013b: 	movq	-0x20(%rax), %rbp
    0000013f: 	callq	clock@PLT # Offset: 319
    00000144: 	movq	%rax, end_time(%rip)
    0000014b: 	movq	0x8(%rsp), %rdx
    00000150: 	subq	%fs:0x28, %rdx
    00000159: 	jne	.Ltmp3661 # Offset: 345
    0000015f: 	subq	start_time(%rip), %rax
    00000166: 	pxor	%xmm0, %xmm0
    0000016a: 	movq	%rbp, %rdi
    0000016d: 	cvtsi2sd	%rax, %xmm0
    00000172: 	divsd	DATAat0x335b0(%rip), %xmm0
    0000017a: 	addq	$0x18, %rsp
    0000017e: 	popq	%rbx
    0000017f: 	popq	%rbp
    00000180: 	popq	%r12
    00000182: 	popq	%r13
    00000184: 	popq	%r14
    00000186: 	popq	%r15
    00000188: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 392
    0000018d: 	nopl	(%rax) # Size: 3
.Ltmp3658:
    00000190: 	movq	%rbx, %rdi
    00000193: 	movq	%rsp, %rsi
    00000196: 	xorl	%edx, %edx
    00000198: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 408
    0000019d: 	movq	%rax, (%rbx)
    000001a0: 	movq	%rax, %rdi
    000001a3: 	movq	(%rsp), %rax
    000001a7: 	movq	%rax, 0x10(%rbx)
.Ltmp3664:
    000001ab: 	movq	%r12, %rdx
    000001ae: 	movq	%rbp, %rsi
    000001b1: 	callq	memcpy@PLT # Offset: 433
    000001b6: 	movq	(%rsp), %r12
    000001ba: 	movq	(%rbx), %rdi
    000001bd: 	jmp	.Ltmp3662 # Offset: 445
    000001c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3655:
    000001c8: 	movq	%r14, %rsi
    000001cb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001d2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 466
    000001d7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001de: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001e5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001ec: 	jne	.Ltmp3663 # Offset: 492
.Ltmp3660:
    000001f2: 	movq	-0x8(%rdx), %rax
    000001f6: 	addq	$0x200, %rax
    000001fc: 	jmp	.Ltmp3663 # Offset: 508
    00000201: 	nopl	(%rax) # Size: 7
.Ltmp3659:
    00000208: 	testq	%r12, %r12
    0000020b: 	je	.Ltmp3662 # Offset: 523
    00000211: 	jmp	.Ltmp3664 # Offset: 529
.Ltmp3661:
    00000213: 	callq	__stack_chk_fail@PLT # Offset: 531
.Ltmp3657:
    00000218: 	leaq	DATAat0x33158(%rip), %rdi
    0000021f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 543
DWARF CFI Instructions:
    <empty>
End of Function "_Z21testOneFunction_equalIsPFsPKsisEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIsEvv" after disassembly {
  Number      : 390
  State       : disassembled
  Address     : 0x294a0
  Size        : 0x24f5
  MaxSize     : 0x2500
  Offset      : 0x294a0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIsEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0389:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	$0x3e80, %edi
    0000000b: 	pushq	%r14
    0000000d: 	pushq	%r13
    0000000f: 	pushq	%r12
    00000011: 	pushq	%rbp
    00000012: 	pushq	%rbx
    00000013: 	subq	$0x108, %rsp
    0000001a: 	movq	%fs:0x28, %rax
    00000023: 	movq	%rax, 0xf8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	leaq	0x40(%rsp), %rax
    00000032: 	movl	$0x31746e69, 0x40(%rsp)
    0000003a: 	movq	%rax, 0x18(%rsp)
    0000003f: 	movq	%rax, 0x30(%rsp)
    00000044: 	movl	$0x5f36, %eax
    00000049: 	movw	%ax, 0x44(%rsp)
    0000004e: 	movb	$0x74, 0x46(%rsp)
    00000053: 	movq	$0x7, 0x38(%rsp)
    0000005c: 	movb	$0x0, 0x47(%rsp)
    00000061: 	callq	_Znam@PLT # Offset: 97
    00000066: 	movq	%rax, %r12
    00000069: 	cvttsd2si	init_value(%rip), %eax
    00000071: 	leaq	0x3e80(%r12), %rdx
    00000079: 	movd	%eax, %xmm0
    0000007d: 	movq	%r12, %rax
    00000080: 	punpcklwd	%xmm0, %xmm0
    00000084: 	pshufd	$0x0, %xmm0, %xmm0
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp3665:
    00000090: 	movups	%xmm0, (%rax)
    00000093: 	addq	$0x10, %rax
    00000097: 	cmpq	%rax, %rdx
    0000009a: 	jne	.Ltmp3665 # Offset: 154
    0000009c: 	leaq	0xd0(%rsp), %rbp
    000000a4: 	leaq	0x30(%rsp), %r13
    000000a9: 	leaq	DATAat0x331d8(%rip), %rdx
    000000b0: 	movq	%r13, %rsi
    000000b3: 	movq	%rbp, %rdi
    000000b6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 182
    000000bb: 	movq	%rbp, %rcx
    000000be: 	leaq	_Z8bit_and1IsET_PKS0_iS0_(%rip), %rdx
    000000c5: 	movl	$0x1f40, %esi
    000000ca: 	movq	%r12, %rdi
    000000cd: 	callq	_Z21testOneFunction_equalIsPFsPKsisEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 205
    000000d2: 	movq	0xd0(%rsp), %rdi
    000000da: 	leaq	0xe0(%rsp), %rbx
    000000e2: 	cmpq	%rbx, %rdi
    000000e5: 	je	.Ltmp3666 # Offset: 229
    000000e7: 	movq	0xe0(%rsp), %rax
    000000ef: 	leaq	0x1(%rax), %rsi
    000000f3: 	callq	_ZdlPvm@PLT # Offset: 243
.Ltmp3666:
    000000f8: 	leaq	DATAat0x331eb(%rip), %rdx
    000000ff: 	movq	%r13, %rsi
    00000102: 	movq	%rbp, %rdi
    00000105: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 261
    0000010a: 	movq	%rbp, %rcx
    0000010d: 	leaq	_Z8bit_and2IsET_PKS0_iS0_(%rip), %rdx
    00000114: 	movl	$0x1f40, %esi
    00000119: 	movq	%r12, %rdi
    0000011c: 	callq	_Z21testOneFunction_equalIsPFsPKsisEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 284
    00000121: 	movq	0xd0(%rsp), %rdi
    00000129: 	cmpq	%rbx, %rdi
    0000012c: 	je	.Ltmp3667 # Offset: 300
    0000012e: 	movq	0xe0(%rsp), %rax
    00000136: 	leaq	0x1(%rax), %rsi
    0000013a: 	callq	_ZdlPvm@PLT # Offset: 314
.Ltmp3667:
    0000013f: 	leaq	DATAat0x331fe(%rip), %rdx
    00000146: 	movq	%r13, %rsi
    00000149: 	movq	%rbp, %rdi
    0000014c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 332
    00000151: 	movq	%rbp, %rcx
    00000154: 	leaq	_Z8bit_and3IsET_PKS0_iS0_(%rip), %rdx
    0000015b: 	movl	$0x1f40, %esi
    00000160: 	movq	%r12, %rdi
    00000163: 	callq	_Z21testOneFunction_equalIsPFsPKsisEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 355
    00000168: 	movq	0xd0(%rsp), %rdi
    00000170: 	cmpq	%rbx, %rdi
    00000173: 	je	.Ltmp3668 # Offset: 371
    00000175: 	movq	0xe0(%rsp), %rax
    0000017d: 	leaq	0x1(%rax), %rsi
    00000181: 	callq	_ZdlPvm@PLT # Offset: 385
.Ltmp3668:
    00000186: 	leaq	DATAat0x33211(%rip), %rdx
    0000018d: 	movq	%r13, %rsi
    00000190: 	movq	%rbp, %rdi
    00000193: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 403
    00000198: 	movq	%rbp, %rcx
    0000019b: 	leaq	_Z8bit_and4IsET_PKS0_iS0_(%rip), %rdx
    000001a2: 	movl	$0x1f40, %esi
    000001a7: 	movq	%r12, %rdi
    000001aa: 	callq	_Z21testOneFunction_equalIsPFsPKsisEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 426
    000001af: 	movq	0xd0(%rsp), %rdi
    000001b7: 	cmpq	%rbx, %rdi
    000001ba: 	je	.Ltmp3669 # Offset: 442
    000001bc: 	movq	0xe0(%rsp), %rax
    000001c4: 	leaq	0x1(%rax), %rsi
    000001c8: 	callq	_ZdlPvm@PLT # Offset: 456
.Ltmp3669:
    000001cd: 	movq	0x30(%rsp), %r15
    000001d2: 	movq	0x38(%rsp), %r14
    000001d7: 	movq	%rbx, 0xd0(%rsp)
    000001df: 	movq	%r15, %rax
    000001e2: 	addq	%r14, %rax
    000001e5: 	je	.Ltmp3670 # Offset: 485
    000001e7: 	testq	%r15, %r15
    000001ea: 	je	.Ltmp3671 # Offset: 490
.Ltmp3670:
    000001f0: 	movq	%r14, 0x28(%rsp)
    000001f5: 	cmpq	$0xf, %r14
    000001f9: 	ja	.Ltmp3672 # Offset: 505
    000001ff: 	cmpq	$0x1, %r14
    00000203: 	jne	.Ltmp3673 # Offset: 515
    00000209: 	movzbl	(%r15), %eax
    0000020d: 	movb	%al, 0xe0(%rsp)
    00000214: 	movq	%rbx, %rax
.Ltmp3815:
    00000217: 	movq	%r14, 0xd8(%rsp)
    0000021f: 	movb	$0x0, (%rax,%r14)
    00000224: 	movabsq	$0x3fffffffffffffff, %rax
    0000022e: 	subq	0xd8(%rsp), %rax
    00000236: 	cmpq	$0x11, %rax
    0000023a: 	jbe	.Ltmp3674 # Offset: 570
    00000240: 	movl	$0x12, %edx
    00000245: 	leaq	DATAat0x33224(%rip), %rsi
    0000024c: 	movq	%rbp, %rdi
    0000024f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 591
    00000254: 	movq	%rbp, %rcx
    00000257: 	leaq	_Z8bit_and5IsET_PKS0_iS0_(%rip), %rdx
    0000025e: 	movl	$0x1f40, %esi
    00000263: 	movq	%r12, %rdi
    00000266: 	callq	_Z21testOneFunction_equalIsPFsPKsisEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 614
    0000026b: 	movq	0xd0(%rsp), %rdi
    00000273: 	cmpq	%rbx, %rdi
    00000276: 	je	.Ltmp3675 # Offset: 630
    00000278: 	movq	0xe0(%rsp), %rax
    00000280: 	leaq	0x1(%rax), %rsi
    00000284: 	callq	_ZdlPvm@PLT # Offset: 644
.Ltmp3675:
    00000289: 	movq	0x30(%rsp), %r15
    0000028e: 	movq	0x38(%rsp), %r14
    00000293: 	movq	%rbx, 0xd0(%rsp)
    0000029b: 	movq	%r15, %rax
    0000029e: 	addq	%r14, %rax
    000002a1: 	je	.Ltmp3676 # Offset: 673
    000002a3: 	testq	%r15, %r15
    000002a6: 	je	.Ltmp3677 # Offset: 678
.Ltmp3676:
    000002ac: 	movq	%r14, 0x28(%rsp)
    000002b1: 	cmpq	$0xf, %r14
    000002b5: 	ja	.Ltmp3678 # Offset: 693
    000002bb: 	cmpq	$0x1, %r14
    000002bf: 	jne	.Ltmp3679 # Offset: 703
    000002c5: 	movzbl	(%r15), %eax
    000002c9: 	movb	%al, 0xe0(%rsp)
    000002d0: 	movq	%rbx, %rax
.Ltmp3821:
    000002d3: 	movq	%r14, 0xd8(%rsp)
    000002db: 	movb	$0x0, (%rax,%r14)
    000002e0: 	movabsq	$0x3fffffffffffffff, %rax
    000002ea: 	subq	0xd8(%rsp), %rax
    000002f2: 	cmpq	$0x11, %rax
    000002f6: 	jbe	.Ltmp3680 # Offset: 758
    000002fc: 	movl	$0x12, %edx
    00000301: 	leaq	DATAat0x33237(%rip), %rsi
    00000308: 	movq	%rbp, %rdi
    0000030b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 779
    00000310: 	movq	%rbp, %rcx
    00000313: 	leaq	_Z8bit_and6IsET_PKS0_iS0_(%rip), %rdx
    0000031a: 	movl	$0x1f40, %esi
    0000031f: 	movq	%r12, %rdi
    00000322: 	callq	_Z21testOneFunction_equalIsPFsPKsisEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 802
    00000327: 	movq	0xd0(%rsp), %rdi
    0000032f: 	cmpq	%rbx, %rdi
    00000332: 	je	.Ltmp3681 # Offset: 818
    00000334: 	movq	0xe0(%rsp), %rax
    0000033c: 	leaq	0x1(%rax), %rsi
    00000340: 	callq	_ZdlPvm@PLT # Offset: 832
.Ltmp3681:
    00000345: 	movq	0x30(%rsp), %r15
    0000034a: 	movq	0x38(%rsp), %r14
    0000034f: 	movq	%rbx, 0xd0(%rsp)
    00000357: 	movq	%r15, %rax
    0000035a: 	addq	%r14, %rax
    0000035d: 	je	.Ltmp3682 # Offset: 861
    0000035f: 	testq	%r15, %r15
    00000362: 	je	.Ltmp3683 # Offset: 866
.Ltmp3682:
    00000368: 	movq	%r14, 0x28(%rsp)
    0000036d: 	cmpq	$0xf, %r14
    00000371: 	ja	.Ltmp3684 # Offset: 881
    00000377: 	cmpq	$0x1, %r14
    0000037b: 	jne	.Ltmp3685 # Offset: 891
    00000381: 	movzbl	(%r15), %eax
    00000385: 	movb	%al, 0xe0(%rsp)
    0000038c: 	movq	%rbx, %rax
.Ltmp3819:
    0000038f: 	movq	%r14, 0xd8(%rsp)
    00000397: 	movb	$0x0, (%rax,%r14)
    0000039c: 	movabsq	$0x3fffffffffffffff, %rax
    000003a6: 	subq	0xd8(%rsp), %rax
    000003ae: 	cmpq	$0x11, %rax
    000003b2: 	jbe	.Ltmp3686 # Offset: 946
    000003b8: 	movl	$0x12, %edx
    000003bd: 	leaq	DATAat0x3324a(%rip), %rsi
    000003c4: 	movq	%rbp, %rdi
    000003c7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 967
    000003cc: 	movq	%rbp, %rcx
    000003cf: 	leaq	_Z8bit_and7IsET_PKS0_iS0_(%rip), %rdx
    000003d6: 	movl	$0x1f40, %esi
    000003db: 	movq	%r12, %rdi
    000003de: 	callq	_Z21testOneFunction_equalIsPFsPKsisEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 990
    000003e3: 	movq	0xd0(%rsp), %rdi
    000003eb: 	cmpq	%rbx, %rdi
    000003ee: 	je	.Ltmp3687 # Offset: 1006
    000003f0: 	movq	0xe0(%rsp), %rax
    000003f8: 	leaq	0x1(%rax), %rsi
    000003fc: 	callq	_ZdlPvm@PLT # Offset: 1020
.Ltmp3687:
    00000401: 	leaq	DATAat0x3325d(%rip), %rdx
    00000408: 	movq	%r13, %rsi
    0000040b: 	movq	%rbp, %rdi
    0000040e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1038
    00000413: 	movq	%rbp, %rcx
    00000416: 	leaq	_Z8bit_and8IsET_PKS0_iS0_(%rip), %rdx
    0000041d: 	movl	$0x1f40, %esi
    00000422: 	movq	%r12, %rdi
    00000425: 	callq	_Z21testOneFunction_equalIsPFsPKsisEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1061
    0000042a: 	movq	0xd0(%rsp), %rdi
    00000432: 	cmpq	%rbx, %rdi
    00000435: 	je	.Ltmp3688 # Offset: 1077
    00000437: 	movq	0xe0(%rsp), %rax
    0000043f: 	leaq	0x1(%rax), %rsi
    00000443: 	callq	_ZdlPvm@PLT # Offset: 1091
.Ltmp3688:
    00000448: 	movq	0x30(%rsp), %r15
    0000044d: 	leaq	0x60(%rsp), %rax
    00000452: 	movq	0x38(%rsp), %r14
    00000457: 	movq	%rax, 0x8(%rsp)
    0000045c: 	movq	%rax, 0x50(%rsp)
    00000461: 	movq	%r15, %rax
    00000464: 	addq	%r14, %rax
    00000467: 	je	.Ltmp3689 # Offset: 1127
    00000469: 	testq	%r15, %r15
    0000046c: 	je	.Ltmp3690 # Offset: 1132
.Ltmp3689:
    00000472: 	movq	%r14, 0x28(%rsp)
    00000477: 	cmpq	$0xf, %r14
    0000047b: 	ja	.Ltmp3691 # Offset: 1147
    00000481: 	cmpq	$0x1, %r14
    00000485: 	jne	.Ltmp3692 # Offset: 1157
    0000048b: 	movzbl	(%r15), %eax
    0000048f: 	movb	%al, 0x60(%rsp)
    00000493: 	movq	0x8(%rsp), %rax
.Ltmp3817:
    00000498: 	movq	%r14, 0x58(%rsp)
    0000049d: 	movb	$0x0, (%rax,%r14)
    000004a2: 	movabsq	$0x3fffffffffffffff, %rax
    000004ac: 	subq	0x58(%rsp), %rax
    000004b1: 	cmpq	$0x10, %rax
    000004b5: 	jbe	.Ltmp3693 # Offset: 1205
    000004bb: 	leaq	0x50(%rsp), %rdi
    000004c0: 	movl	$0x11, %edx
    000004c5: 	leaq	DATAat0x33270(%rip), %rsi
    000004cc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1228
    000004d1: 	movl	iterations(%rip), %esi
    000004d7: 	movq	0x50(%rsp), %rdi
    000004dc: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 1244
    000004e1: 	leaq	DATAat0x33282(%rip), %rdx
    000004e8: 	movq	%r13, %rsi
    000004eb: 	movq	%rbp, %rdi
    000004ee: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1262
    000004f3: 	movq	%rbp, %rcx
    000004f6: 	leaq	_Z7bit_or1IsET_PKS0_iS0_(%rip), %rdx
    000004fd: 	movl	$0x1f40, %esi
    00000502: 	movq	%r12, %rdi
    00000505: 	callq	_Z21testOneFunction_equalIsPFsPKsisEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1285
    0000050a: 	movq	0xd0(%rsp), %rdi
    00000512: 	cmpq	%rbx, %rdi
    00000515: 	je	.Ltmp3694 # Offset: 1301
    00000517: 	movq	0xe0(%rsp), %rax
    0000051f: 	leaq	0x1(%rax), %rsi
    00000523: 	callq	_ZdlPvm@PLT # Offset: 1315
.Ltmp3694:
    00000528: 	movq	0x30(%rsp), %r15
    0000052d: 	movq	0x38(%rsp), %r14
    00000532: 	movq	%rbx, 0xd0(%rsp)
    0000053a: 	movq	%r15, %rax
    0000053d: 	addq	%r14, %rax
    00000540: 	je	.Ltmp3695 # Offset: 1344
    00000542: 	testq	%r15, %r15
    00000545: 	je	.Ltmp3696 # Offset: 1349
.Ltmp3695:
    0000054b: 	movq	%r14, 0x28(%rsp)
    00000550: 	cmpq	$0xf, %r14
    00000554: 	ja	.Ltmp3697 # Offset: 1364
    0000055a: 	cmpq	$0x1, %r14
    0000055e: 	jne	.Ltmp3698 # Offset: 1374
    00000564: 	movzbl	(%r15), %eax
    00000568: 	movb	%al, 0xe0(%rsp)
    0000056f: 	movq	%rbx, %rax
.Ltmp3831:
    00000572: 	movq	%r14, 0xd8(%rsp)
    0000057a: 	movb	$0x0, (%rax,%r14)
    0000057f: 	movabsq	$0x3fffffffffffffff, %rax
    00000589: 	subq	0xd8(%rsp), %rax
    00000591: 	cmpq	$0x10, %rax
    00000595: 	jbe	.Ltmp3699 # Offset: 1429
    0000059b: 	movl	$0x11, %edx
    000005a0: 	leaq	DATAat0x33294(%rip), %rsi
    000005a7: 	movq	%rbp, %rdi
    000005aa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1450
    000005af: 	movq	%rbp, %rcx
    000005b2: 	leaq	_Z7bit_or2IsET_PKS0_iS0_(%rip), %rdx
    000005b9: 	movl	$0x1f40, %esi
    000005be: 	movq	%r12, %rdi
    000005c1: 	callq	_Z21testOneFunction_equalIsPFsPKsisEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1473
    000005c6: 	movq	0xd0(%rsp), %rdi
    000005ce: 	cmpq	%rbx, %rdi
    000005d1: 	je	.Ltmp3700 # Offset: 1489
    000005d3: 	movq	0xe0(%rsp), %rax
    000005db: 	leaq	0x1(%rax), %rsi
    000005df: 	callq	_ZdlPvm@PLT # Offset: 1503
.Ltmp3700:
    000005e4: 	leaq	DATAat0x332a6(%rip), %rdx
    000005eb: 	movq	%r13, %rsi
    000005ee: 	movq	%rbp, %rdi
    000005f1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1521
    000005f6: 	movq	%rbp, %rcx
    000005f9: 	leaq	_Z7bit_or3IsET_PKS0_iS0_(%rip), %rdx
    00000600: 	movl	$0x1f40, %esi
    00000605: 	movq	%r12, %rdi
    00000608: 	callq	_Z21testOneFunction_equalIsPFsPKsisEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1544
    0000060d: 	movq	0xd0(%rsp), %rdi
    00000615: 	cmpq	%rbx, %rdi
    00000618: 	je	.Ltmp3701 # Offset: 1560
    0000061a: 	movq	0xe0(%rsp), %rax
    00000622: 	leaq	0x1(%rax), %rsi
    00000626: 	callq	_ZdlPvm@PLT # Offset: 1574
.Ltmp3701:
    0000062b: 	leaq	DATAat0x332b8(%rip), %rdx
    00000632: 	movq	%r13, %rsi
    00000635: 	movq	%rbp, %rdi
    00000638: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1592
    0000063d: 	movq	%rbp, %rcx
    00000640: 	leaq	_Z7bit_or4IsET_PKS0_iS0_(%rip), %rdx
    00000647: 	movl	$0x1f40, %esi
    0000064c: 	movq	%r12, %rdi
    0000064f: 	callq	_Z21testOneFunction_equalIsPFsPKsisEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1615
    00000654: 	movq	0xd0(%rsp), %rdi
    0000065c: 	cmpq	%rbx, %rdi
    0000065f: 	je	.Ltmp3702 # Offset: 1631
    00000661: 	movq	0xe0(%rsp), %rax
    00000669: 	leaq	0x1(%rax), %rsi
    0000066d: 	callq	_ZdlPvm@PLT # Offset: 1645
.Ltmp3702:
    00000672: 	movq	0x30(%rsp), %r15
    00000677: 	movq	0x38(%rsp), %r14
    0000067c: 	movq	%rbx, 0xd0(%rsp)
    00000684: 	movq	%r15, %rax
    00000687: 	addq	%r14, %rax
    0000068a: 	je	.Ltmp3703 # Offset: 1674
    0000068c: 	testq	%r15, %r15
    0000068f: 	je	.Ltmp3704 # Offset: 1679
.Ltmp3703:
    00000695: 	movq	%r14, 0x28(%rsp)
    0000069a: 	cmpq	$0xf, %r14
    0000069e: 	ja	.Ltmp3705 # Offset: 1694
    000006a4: 	cmpq	$0x1, %r14
    000006a8: 	jne	.Ltmp3706 # Offset: 1704
    000006ae: 	movzbl	(%r15), %eax
    000006b2: 	movb	%al, 0xe0(%rsp)
    000006b9: 	movq	%rbx, %rax
.Ltmp3829:
    000006bc: 	movq	%r14, 0xd8(%rsp)
    000006c4: 	movb	$0x0, (%rax,%r14)
    000006c9: 	movabsq	$0x3fffffffffffffff, %rax
    000006d3: 	subq	0xd8(%rsp), %rax
    000006db: 	cmpq	$0x10, %rax
    000006df: 	jbe	.Ltmp3707 # Offset: 1759
    000006e5: 	movl	$0x11, %edx
    000006ea: 	leaq	DATAat0x332ca(%rip), %rsi
    000006f1: 	movq	%rbp, %rdi
    000006f4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1780
    000006f9: 	movq	%rbp, %rcx
    000006fc: 	leaq	_Z7bit_or5IsET_PKS0_iS0_(%rip), %rdx
    00000703: 	movl	$0x1f40, %esi
    00000708: 	movq	%r12, %rdi
    0000070b: 	callq	_Z21testOneFunction_equalIsPFsPKsisEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1803
    00000710: 	movq	0xd0(%rsp), %rdi
    00000718: 	cmpq	%rbx, %rdi
    0000071b: 	je	.Ltmp3708 # Offset: 1819
    0000071d: 	movq	0xe0(%rsp), %rax
    00000725: 	leaq	0x1(%rax), %rsi
    00000729: 	callq	_ZdlPvm@PLT # Offset: 1833
.Ltmp3708:
    0000072e: 	leaq	DATAat0x332dc(%rip), %rdx
    00000735: 	movq	%r13, %rsi
    00000738: 	movq	%rbp, %rdi
    0000073b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1851
    00000740: 	movq	%rbp, %rcx
    00000743: 	leaq	_Z7bit_or6IsET_PKS0_iS0_(%rip), %rdx
    0000074a: 	movl	$0x1f40, %esi
    0000074f: 	movq	%r12, %rdi
    00000752: 	callq	_Z21testOneFunction_equalIsPFsPKsisEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1874
    00000757: 	movq	0xd0(%rsp), %rdi
    0000075f: 	cmpq	%rbx, %rdi
    00000762: 	je	.Ltmp3709 # Offset: 1890
    00000764: 	movq	0xe0(%rsp), %rax
    0000076c: 	leaq	0x1(%rax), %rsi
    00000770: 	callq	_ZdlPvm@PLT # Offset: 1904
.Ltmp3709:
    00000775: 	leaq	DATAat0x332ee(%rip), %rdx
    0000077c: 	movq	%r13, %rsi
    0000077f: 	movq	%rbp, %rdi
    00000782: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1922
    00000787: 	movq	%rbp, %rcx
    0000078a: 	leaq	_Z7bit_or7IsET_PKS0_iS0_(%rip), %rdx
    00000791: 	movl	$0x1f40, %esi
    00000796: 	movq	%r12, %rdi
    00000799: 	callq	_Z21testOneFunction_equalIsPFsPKsisEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1945
    0000079e: 	movq	0xd0(%rsp), %rdi
    000007a6: 	cmpq	%rbx, %rdi
    000007a9: 	je	.Ltmp3710 # Offset: 1961
    000007ab: 	movq	0xe0(%rsp), %rax
    000007b3: 	leaq	0x1(%rax), %rsi
    000007b7: 	callq	_ZdlPvm@PLT # Offset: 1975
.Ltmp3710:
    000007bc: 	leaq	DATAat0x33300(%rip), %rdx
    000007c3: 	movq	%r13, %rsi
    000007c6: 	movq	%rbp, %rdi
    000007c9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1993
    000007ce: 	movq	%rbp, %rcx
    000007d1: 	leaq	_Z7bit_or8IsET_PKS0_iS0_(%rip), %rdx
    000007d8: 	movl	$0x1f40, %esi
    000007dd: 	movq	%r12, %rdi
    000007e0: 	callq	_Z21testOneFunction_equalIsPFsPKsisEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2016
    000007e5: 	movq	0xd0(%rsp), %rdi
    000007ed: 	cmpq	%rbx, %rdi
    000007f0: 	je	.Ltmp3711 # Offset: 2032
    000007f2: 	movq	0xe0(%rsp), %rax
    000007fa: 	leaq	0x1(%rax), %rsi
    000007fe: 	callq	_ZdlPvm@PLT # Offset: 2046
.Ltmp3711:
    00000803: 	movq	0x30(%rsp), %r15
    00000808: 	leaq	0x80(%rsp), %rax
    00000810: 	movq	0x38(%rsp), %r14
    00000815: 	movq	%rax, 0x10(%rsp)
    0000081a: 	movq	%rax, 0x70(%rsp)
    0000081f: 	movq	%r15, %rax
    00000822: 	addq	%r14, %rax
    00000825: 	je	.Ltmp3712 # Offset: 2085
    00000827: 	testq	%r15, %r15
    0000082a: 	je	.Ltmp3713 # Offset: 2090
.Ltmp3712:
    00000830: 	movq	%r14, 0x28(%rsp)
    00000835: 	cmpq	$0xf, %r14
    00000839: 	ja	.Ltmp3714 # Offset: 2105
    0000083f: 	cmpq	$0x1, %r14
    00000843: 	jne	.Ltmp3715 # Offset: 2115
    00000849: 	movzbl	(%r15), %eax
    0000084d: 	movb	%al, 0x80(%rsp)
    00000854: 	movq	0x10(%rsp), %rax
.Ltmp3827:
    00000859: 	movq	%r14, 0x78(%rsp)
    0000085e: 	movb	$0x0, (%rax,%r14)
    00000863: 	movabsq	$0x3fffffffffffffff, %rax
    0000086d: 	subq	0x78(%rsp), %rax
    00000872: 	cmpq	$0xf, %rax
    00000876: 	jbe	.Ltmp3716 # Offset: 2166
    0000087c: 	leaq	0x70(%rsp), %rdi
    00000881: 	movl	$0x10, %edx
    00000886: 	leaq	DATAat0x33312(%rip), %rsi
    0000088d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2189
    00000892: 	movl	iterations(%rip), %esi
    00000898: 	movq	0x70(%rsp), %rdi
    0000089d: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 2205
    000008a2: 	leaq	DATAat0x33323(%rip), %rdx
    000008a9: 	movq	%r13, %rsi
    000008ac: 	movq	%rbp, %rdi
    000008af: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2223
    000008b4: 	movq	%rbp, %rcx
    000008b7: 	leaq	_Z8bit_xor1IsET_PKS0_iS0_(%rip), %rdx
    000008be: 	movl	$0x1f40, %esi
    000008c3: 	movq	%r12, %rdi
    000008c6: 	callq	_Z21testOneFunction_equalIsPFsPKsisEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2246
    000008cb: 	movq	0xd0(%rsp), %rdi
    000008d3: 	cmpq	%rbx, %rdi
    000008d6: 	je	.Ltmp3717 # Offset: 2262
    000008d8: 	movq	0xe0(%rsp), %rax
    000008e0: 	leaq	0x1(%rax), %rsi
    000008e4: 	callq	_ZdlPvm@PLT # Offset: 2276
.Ltmp3717:
    000008e9: 	movq	0x30(%rsp), %r15
    000008ee: 	movq	0x38(%rsp), %r14
    000008f3: 	movq	%rbx, 0xd0(%rsp)
    000008fb: 	movq	%r15, %rax
    000008fe: 	addq	%r14, %rax
    00000901: 	je	.Ltmp3718 # Offset: 2305
    00000903: 	testq	%r15, %r15
    00000906: 	je	.Ltmp3719 # Offset: 2310
.Ltmp3718:
    0000090c: 	movq	%r14, 0x28(%rsp)
    00000911: 	cmpq	$0xf, %r14
    00000915: 	ja	.Ltmp3720 # Offset: 2325
    0000091b: 	cmpq	$0x1, %r14
    0000091f: 	jne	.Ltmp3721 # Offset: 2335
    00000925: 	movzbl	(%r15), %eax
    00000929: 	movb	%al, 0xe0(%rsp)
    00000930: 	movq	%rbx, %rax
.Ltmp3825:
    00000933: 	movq	%r14, 0xd8(%rsp)
    0000093b: 	movb	$0x0, (%rax,%r14)
    00000940: 	movabsq	$0x3fffffffffffffff, %rax
    0000094a: 	subq	0xd8(%rsp), %rax
    00000952: 	cmpq	$0x11, %rax
    00000956: 	jbe	.Ltmp3722 # Offset: 2390
    0000095c: 	movl	$0x12, %edx
    00000961: 	leaq	DATAat0x33336(%rip), %rsi
    00000968: 	movq	%rbp, %rdi
    0000096b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2411
    00000970: 	movq	%rbp, %rcx
    00000973: 	leaq	_Z8bit_xor2IsET_PKS0_iS0_(%rip), %rdx
    0000097a: 	movl	$0x1f40, %esi
    0000097f: 	movq	%r12, %rdi
    00000982: 	callq	_Z21testOneFunction_equalIsPFsPKsisEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2434
    00000987: 	movq	0xd0(%rsp), %rdi
    0000098f: 	cmpq	%rbx, %rdi
    00000992: 	je	.Ltmp3723 # Offset: 2450
    00000994: 	movq	0xe0(%rsp), %rax
    0000099c: 	leaq	0x1(%rax), %rsi
    000009a0: 	callq	_ZdlPvm@PLT # Offset: 2464
.Ltmp3723:
    000009a5: 	movq	0x30(%rsp), %r15
    000009aa: 	movq	0x38(%rsp), %r14
    000009af: 	movq	%rbx, 0xd0(%rsp)
    000009b7: 	movq	%r15, %rax
    000009ba: 	addq	%r14, %rax
    000009bd: 	je	.Ltmp3724 # Offset: 2493
    000009bf: 	testq	%r15, %r15
    000009c2: 	je	.Ltmp3725 # Offset: 2498
.Ltmp3724:
    000009c8: 	movq	%r14, 0x28(%rsp)
    000009cd: 	cmpq	$0xf, %r14
    000009d1: 	ja	.Ltmp3726 # Offset: 2513
    000009d7: 	cmpq	$0x1, %r14
    000009db: 	jne	.Ltmp3727 # Offset: 2523
    000009e1: 	movzbl	(%r15), %eax
    000009e5: 	movb	%al, 0xe0(%rsp)
    000009ec: 	movq	%rbx, %rax
.Ltmp3823:
    000009ef: 	movq	%r14, 0xd8(%rsp)
    000009f7: 	movb	$0x0, (%rax,%r14)
    000009fc: 	movabsq	$0x3fffffffffffffff, %rax
    00000a06: 	subq	0xd8(%rsp), %rax
    00000a0e: 	cmpq	$0x11, %rax
    00000a12: 	jbe	.Ltmp3728 # Offset: 2578
    00000a18: 	movl	$0x12, %edx
    00000a1d: 	leaq	DATAat0x33349(%rip), %rsi
    00000a24: 	movq	%rbp, %rdi
    00000a27: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2599
    00000a2c: 	movq	%rbp, %rcx
    00000a2f: 	leaq	_Z8bit_xor3IsET_PKS0_iS0_(%rip), %rdx
    00000a36: 	movl	$0x1f40, %esi
    00000a3b: 	movq	%r12, %rdi
    00000a3e: 	callq	_Z21testOneFunction_equalIsPFsPKsisEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2622
    00000a43: 	movq	0xd0(%rsp), %rdi
    00000a4b: 	cmpq	%rbx, %rdi
    00000a4e: 	je	.Ltmp3729 # Offset: 2638
    00000a50: 	movq	0xe0(%rsp), %rax
    00000a58: 	leaq	0x1(%rax), %rsi
    00000a5c: 	callq	_ZdlPvm@PLT # Offset: 2652
.Ltmp3729:
    00000a61: 	movq	0x30(%rsp), %r15
    00000a66: 	movq	0x38(%rsp), %r14
    00000a6b: 	movq	%rbx, 0xd0(%rsp)
    00000a73: 	movq	%r15, %rax
    00000a76: 	addq	%r14, %rax
    00000a79: 	je	.Ltmp3730 # Offset: 2681
    00000a7b: 	testq	%r15, %r15
    00000a7e: 	je	.Ltmp3731 # Offset: 2686
.Ltmp3730:
    00000a84: 	movq	%r14, 0x28(%rsp)
    00000a89: 	cmpq	$0xf, %r14
    00000a8d: 	ja	.Ltmp3732 # Offset: 2701
    00000a93: 	cmpq	$0x1, %r14
    00000a97: 	jne	.Ltmp3733 # Offset: 2711
    00000a9d: 	movzbl	(%r15), %eax
    00000aa1: 	movb	%al, 0xe0(%rsp)
    00000aa8: 	movq	%rbx, %rax
.Ltmp3837:
    00000aab: 	movq	%r14, 0xd8(%rsp)
    00000ab3: 	movb	$0x0, (%rax,%r14)
    00000ab8: 	movabsq	$0x3fffffffffffffff, %rax
    00000ac2: 	subq	0xd8(%rsp), %rax
    00000aca: 	cmpq	$0x11, %rax
    00000ace: 	jbe	.Ltmp3734 # Offset: 2766
    00000ad4: 	movl	$0x12, %edx
    00000ad9: 	leaq	DATAat0x3335c(%rip), %rsi
    00000ae0: 	movq	%rbp, %rdi
    00000ae3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2787
    00000ae8: 	movq	%rbp, %rcx
    00000aeb: 	leaq	_Z8bit_xor4IsET_PKS0_iS0_(%rip), %rdx
    00000af2: 	movl	$0x1f40, %esi
    00000af7: 	movq	%r12, %rdi
    00000afa: 	callq	_Z21testOneFunction_equalIsPFsPKsisEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2810
    00000aff: 	movq	0xd0(%rsp), %rdi
    00000b07: 	cmpq	%rbx, %rdi
    00000b0a: 	je	.Ltmp3735 # Offset: 2826
    00000b0c: 	movq	0xe0(%rsp), %rax
    00000b14: 	leaq	0x1(%rax), %rsi
    00000b18: 	callq	_ZdlPvm@PLT # Offset: 2840
.Ltmp3735:
    00000b1d: 	leaq	DATAat0x3336f(%rip), %rdx
    00000b24: 	movq	%r13, %rsi
    00000b27: 	movq	%rbp, %rdi
    00000b2a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2858
    00000b2f: 	movq	%rbp, %rcx
    00000b32: 	leaq	_Z8bit_xor5IsET_PKS0_iS0_(%rip), %rdx
    00000b39: 	movl	$0x1f40, %esi
    00000b3e: 	movq	%r12, %rdi
    00000b41: 	callq	_Z21testOneFunction_equalIsPFsPKsisEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2881
    00000b46: 	movq	0xd0(%rsp), %rdi
    00000b4e: 	cmpq	%rbx, %rdi
    00000b51: 	je	.Ltmp3736 # Offset: 2897
    00000b53: 	movq	0xe0(%rsp), %rax
    00000b5b: 	leaq	0x1(%rax), %rsi
    00000b5f: 	callq	_ZdlPvm@PLT # Offset: 2911
.Ltmp3736:
    00000b64: 	leaq	DATAat0x33382(%rip), %rdx
    00000b6b: 	movq	%r13, %rsi
    00000b6e: 	movq	%rbp, %rdi
    00000b71: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2929
    00000b76: 	movq	%rbp, %rcx
    00000b79: 	leaq	_Z8bit_xor6IsET_PKS0_iS0_(%rip), %rdx
    00000b80: 	movl	$0x1f40, %esi
    00000b85: 	movq	%r12, %rdi
    00000b88: 	callq	_Z21testOneFunction_equalIsPFsPKsisEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2952
    00000b8d: 	movq	0xd0(%rsp), %rdi
    00000b95: 	cmpq	%rbx, %rdi
    00000b98: 	je	.Ltmp3737 # Offset: 2968
    00000b9a: 	movq	0xe0(%rsp), %rax
    00000ba2: 	leaq	0x1(%rax), %rsi
    00000ba6: 	callq	_ZdlPvm@PLT # Offset: 2982
.Ltmp3737:
    00000bab: 	leaq	DATAat0x33395(%rip), %rdx
    00000bb2: 	movq	%r13, %rsi
    00000bb5: 	movq	%rbp, %rdi
    00000bb8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3000
    00000bbd: 	movq	%rbp, %rcx
    00000bc0: 	leaq	_Z8bit_xor7IsET_PKS0_iS0_(%rip), %rdx
    00000bc7: 	movl	$0x1f40, %esi
    00000bcc: 	movq	%r12, %rdi
    00000bcf: 	callq	_Z21testOneFunction_equalIsPFsPKsisEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3023
    00000bd4: 	movq	0xd0(%rsp), %rdi
    00000bdc: 	cmpq	%rbx, %rdi
    00000bdf: 	je	.Ltmp3738 # Offset: 3039
    00000be1: 	movq	0xe0(%rsp), %rax
    00000be9: 	leaq	0x1(%rax), %rsi
    00000bed: 	callq	_ZdlPvm@PLT # Offset: 3053
.Ltmp3738:
    00000bf2: 	leaq	DATAat0x333a8(%rip), %rdx
    00000bf9: 	movq	%r13, %rsi
    00000bfc: 	movq	%rbp, %rdi
    00000bff: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3071
    00000c04: 	movq	%rbp, %rcx
    00000c07: 	leaq	_Z8bit_xor8IsET_PKS0_iS0_(%rip), %rdx
    00000c0e: 	movl	$0x1f40, %esi
    00000c13: 	movq	%r12, %rdi
    00000c16: 	callq	_Z21testOneFunction_equalIsPFsPKsisEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3094
    00000c1b: 	movq	0xd0(%rsp), %rdi
    00000c23: 	cmpq	%rbx, %rdi
    00000c26: 	je	.Ltmp3739 # Offset: 3110
    00000c28: 	movq	0xe0(%rsp), %rax
    00000c30: 	leaq	0x1(%rax), %rsi
    00000c34: 	callq	_ZdlPvm@PLT # Offset: 3124
.Ltmp3739:
    00000c39: 	leaq	0x90(%rsp), %rdi
    00000c41: 	leaq	DATAat0x333bb(%rip), %rdx
    00000c48: 	movq	%r13, %rsi
    00000c4b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3147
    00000c50: 	movl	iterations(%rip), %esi
    00000c56: 	movq	0x90(%rsp), %rdi
    00000c5e: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 3166
    00000c63: 	movq	0x30(%rsp), %r15
    00000c68: 	movq	0x38(%rsp), %r14
    00000c6d: 	movq	%rbx, 0xd0(%rsp)
    00000c75: 	movq	%r15, %rax
    00000c78: 	addq	%r14, %rax
    00000c7b: 	je	.Ltmp3740 # Offset: 3195
    00000c7d: 	testq	%r15, %r15
    00000c80: 	je	.Ltmp3741 # Offset: 3200
.Ltmp3740:
    00000c86: 	movq	%r14, 0x28(%rsp)
    00000c8b: 	cmpq	$0xf, %r14
    00000c8f: 	ja	.Ltmp3742 # Offset: 3215
    00000c95: 	cmpq	$0x1, %r14
    00000c99: 	jne	.Ltmp3743 # Offset: 3225
    00000c9f: 	movzbl	(%r15), %eax
    00000ca3: 	movb	%al, 0xe0(%rsp)
    00000caa: 	movq	%rbx, %rax
.Ltmp3841:
    00000cad: 	movq	%r14, 0xd8(%rsp)
    00000cb5: 	movb	$0x0, (%rax,%r14)
    00000cba: 	movabsq	$0x3fffffffffffffff, %rax
    00000cc4: 	subq	0xd8(%rsp), %rax
    00000ccc: 	cmpq	$0x15, %rax
    00000cd0: 	jbe	.Ltmp3744 # Offset: 3280
    00000cd6: 	movl	$0x16, %edx
    00000cdb: 	leaq	DATAat0x333cd(%rip), %rsi
    00000ce2: 	movq	%rbp, %rdi
    00000ce5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3301
    00000cea: 	movq	%rbp, %r8
    00000ced: 	movl	$0x1, %edx
    00000cf2: 	movl	$0x1f40, %esi
    00000cf7: 	movq	%r12, %rdi
    00000cfa: 	leaq	_Z10logic_and1IsEbPKT_ib(%rip), %rcx
    00000d01: 	callq	_Z23testOneFunction_logicalIsPFbPKsibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3329
    00000d06: 	movq	0xd0(%rsp), %rdi
    00000d0e: 	cmpq	%rbx, %rdi
    00000d11: 	je	.Ltmp3745 # Offset: 3345
    00000d13: 	movq	0xe0(%rsp), %rax
    00000d1b: 	leaq	0x1(%rax), %rsi
    00000d1f: 	callq	_ZdlPvm@PLT # Offset: 3359
.Ltmp3745:
    00000d24: 	leaq	DATAat0x333e4(%rip), %rdx
    00000d2b: 	movq	%r13, %rsi
    00000d2e: 	movq	%rbp, %rdi
    00000d31: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3377
    00000d36: 	movq	%rbp, %r8
    00000d39: 	movl	$0x1, %edx
    00000d3e: 	movl	$0x1f40, %esi
    00000d43: 	movq	%r12, %rdi
    00000d46: 	leaq	_Z10logic_and2IsEbPKT_ib(%rip), %rcx
    00000d4d: 	callq	_Z23testOneFunction_logicalIsPFbPKsibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3405
    00000d52: 	movq	0xd0(%rsp), %rdi
    00000d5a: 	cmpq	%rbx, %rdi
    00000d5d: 	je	.Ltmp3746 # Offset: 3421
    00000d5f: 	movq	0xe0(%rsp), %rax
    00000d67: 	leaq	0x1(%rax), %rsi
    00000d6b: 	callq	_ZdlPvm@PLT # Offset: 3435
.Ltmp3746:
    00000d70: 	leaq	DATAat0x333fb(%rip), %rdx
    00000d77: 	movq	%r13, %rsi
    00000d7a: 	movq	%rbp, %rdi
    00000d7d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3453
    00000d82: 	movq	%rbp, %r8
    00000d85: 	movl	$0x1, %edx
    00000d8a: 	movl	$0x1f40, %esi
    00000d8f: 	movq	%r12, %rdi
    00000d92: 	leaq	_Z10logic_and3IsEbPKT_ib(%rip), %rcx
    00000d99: 	callq	_Z23testOneFunction_logicalIsPFbPKsibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3481
    00000d9e: 	movq	0xd0(%rsp), %rdi
    00000da6: 	cmpq	%rbx, %rdi
    00000da9: 	je	.Ltmp3747 # Offset: 3497
    00000dab: 	movq	0xe0(%rsp), %rax
    00000db3: 	leaq	0x1(%rax), %rsi
    00000db7: 	callq	_ZdlPvm@PLT # Offset: 3511
.Ltmp3747:
    00000dbc: 	movq	0x30(%rsp), %r15
    00000dc1: 	movq	0x38(%rsp), %r14
    00000dc6: 	movq	%rbx, 0xd0(%rsp)
    00000dce: 	movq	%r15, %rax
    00000dd1: 	addq	%r14, %rax
    00000dd4: 	je	.Ltmp3748 # Offset: 3540
    00000dd6: 	testq	%r15, %r15
    00000dd9: 	je	.Ltmp3749 # Offset: 3545
.Ltmp3748:
    00000ddf: 	movq	%r14, 0x28(%rsp)
    00000de4: 	cmpq	$0xf, %r14
    00000de8: 	ja	.Ltmp3750 # Offset: 3560
    00000dee: 	cmpq	$0x1, %r14
    00000df2: 	jne	.Ltmp3751 # Offset: 3570
    00000df8: 	movzbl	(%r15), %eax
    00000dfc: 	movb	%al, 0xe0(%rsp)
    00000e03: 	movq	%rbx, %rax
.Ltmp3839:
    00000e06: 	movq	%r14, 0xd8(%rsp)
    00000e0e: 	movb	$0x0, (%rax,%r14)
    00000e13: 	movabsq	$0x3fffffffffffffff, %rax
    00000e1d: 	subq	0xd8(%rsp), %rax
    00000e25: 	cmpq	$0x15, %rax
    00000e29: 	jbe	.Ltmp3752 # Offset: 3625
    00000e2f: 	movl	$0x16, %edx
    00000e34: 	leaq	DATAat0x33412(%rip), %rsi
    00000e3b: 	movq	%rbp, %rdi
    00000e3e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3646
    00000e43: 	movq	%rbp, %r8
    00000e46: 	movl	$0x1, %edx
    00000e4b: 	movl	$0x1f40, %esi
    00000e50: 	movq	%r12, %rdi
    00000e53: 	leaq	_Z10logic_and4IsEbPKT_ib(%rip), %rcx
    00000e5a: 	callq	_Z23testOneFunction_logicalIsPFbPKsibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3674
    00000e5f: 	movq	0xd0(%rsp), %rdi
    00000e67: 	cmpq	%rbx, %rdi
    00000e6a: 	je	.Ltmp3753 # Offset: 3690
    00000e6c: 	movq	0xe0(%rsp), %rax
    00000e74: 	leaq	0x1(%rax), %rsi
    00000e78: 	callq	_ZdlPvm@PLT # Offset: 3704
.Ltmp3753:
    00000e7d: 	movq	0x30(%rsp), %r15
    00000e82: 	movq	0x38(%rsp), %r14
    00000e87: 	movq	%rbx, 0xd0(%rsp)
    00000e8f: 	movq	%r15, %rax
    00000e92: 	addq	%r14, %rax
    00000e95: 	je	.Ltmp3754 # Offset: 3733
    00000e97: 	testq	%r15, %r15
    00000e9a: 	je	.Ltmp3755 # Offset: 3738
.Ltmp3754:
    00000ea0: 	movq	%r14, 0x28(%rsp)
    00000ea5: 	cmpq	$0xf, %r14
    00000ea9: 	ja	.Ltmp3756 # Offset: 3753
    00000eaf: 	cmpq	$0x1, %r14
    00000eb3: 	jne	.Ltmp3757 # Offset: 3763
    00000eb9: 	movzbl	(%r15), %eax
    00000ebd: 	movb	%al, 0xe0(%rsp)
    00000ec4: 	movq	%rbx, %rax
.Ltmp3835:
    00000ec7: 	movq	%r14, 0xd8(%rsp)
    00000ecf: 	movb	$0x0, (%rax,%r14)
    00000ed4: 	movabsq	$0x3fffffffffffffff, %rax
    00000ede: 	subq	0xd8(%rsp), %rax
    00000ee6: 	cmpq	$0x15, %rax
    00000eea: 	jbe	.Ltmp3758 # Offset: 3818
    00000ef0: 	movl	$0x16, %edx
    00000ef5: 	leaq	DATAat0x33429(%rip), %rsi
    00000efc: 	movq	%rbp, %rdi
    00000eff: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3839
    00000f04: 	movq	%rbp, %r8
    00000f07: 	movl	$0x1, %edx
    00000f0c: 	movl	$0x1f40, %esi
    00000f11: 	movq	%r12, %rdi
    00000f14: 	leaq	_Z10logic_and5IsEbPKT_ib(%rip), %rcx
    00000f1b: 	callq	_Z23testOneFunction_logicalIsPFbPKsibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3867
    00000f20: 	movq	0xd0(%rsp), %rdi
    00000f28: 	cmpq	%rbx, %rdi
    00000f2b: 	je	.Ltmp3759 # Offset: 3883
    00000f2d: 	movq	0xe0(%rsp), %rax
    00000f35: 	leaq	0x1(%rax), %rsi
    00000f39: 	callq	_ZdlPvm@PLT # Offset: 3897
.Ltmp3759:
    00000f3e: 	leaq	DATAat0x33440(%rip), %rdx
    00000f45: 	movq	%r13, %rsi
    00000f48: 	movq	%rbp, %rdi
    00000f4b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3915
    00000f50: 	movq	%rbp, %r8
    00000f53: 	movl	$0x1, %edx
    00000f58: 	movl	$0x1f40, %esi
    00000f5d: 	movq	%r12, %rdi
    00000f60: 	leaq	_Z10logic_and6IsEbPKT_ib(%rip), %rcx
    00000f67: 	callq	_Z23testOneFunction_logicalIsPFbPKsibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3943
    00000f6c: 	movq	0xd0(%rsp), %rdi
    00000f74: 	cmpq	%rbx, %rdi
    00000f77: 	je	.Ltmp3760 # Offset: 3959
    00000f79: 	movq	0xe0(%rsp), %rax
    00000f81: 	leaq	0x1(%rax), %rsi
    00000f85: 	callq	_ZdlPvm@PLT # Offset: 3973
.Ltmp3760:
    00000f8a: 	leaq	DATAat0x33457(%rip), %rdx
    00000f91: 	movq	%r13, %rsi
    00000f94: 	movq	%rbp, %rdi
    00000f97: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3991
    00000f9c: 	movq	%rbp, %r8
    00000f9f: 	movl	$0x1, %edx
    00000fa4: 	movl	$0x1f40, %esi
    00000fa9: 	movq	%r12, %rdi
    00000fac: 	leaq	_Z10logic_and7IsEbPKT_ib(%rip), %rcx
    00000fb3: 	callq	_Z23testOneFunction_logicalIsPFbPKsibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4019
    00000fb8: 	movq	0xd0(%rsp), %rdi
    00000fc0: 	cmpq	%rbx, %rdi
    00000fc3: 	je	.Ltmp3761 # Offset: 4035
    00000fc5: 	movq	0xe0(%rsp), %rax
    00000fcd: 	leaq	0x1(%rax), %rsi
    00000fd1: 	callq	_ZdlPvm@PLT # Offset: 4049
.Ltmp3761:
    00000fd6: 	movq	0x30(%rsp), %r15
    00000fdb: 	movq	0x38(%rsp), %r14
    00000fe0: 	movq	%rbx, 0xd0(%rsp)
    00000fe8: 	movq	%r15, %rax
    00000feb: 	addq	%r14, %rax
    00000fee: 	je	.Ltmp3762 # Offset: 4078
    00000ff0: 	testq	%r15, %r15
    00000ff3: 	je	.Ltmp3763 # Offset: 4083
.Ltmp3762:
    00000ff9: 	movq	%r14, 0x28(%rsp)
    00000ffe: 	cmpq	$0xf, %r14
    00001002: 	ja	.Ltmp3764 # Offset: 4098
    00001008: 	cmpq	$0x1, %r14
    0000100c: 	jne	.Ltmp3765 # Offset: 4108
    00001012: 	movzbl	(%r15), %eax
    00001016: 	movb	%al, 0xe0(%rsp)
    0000101d: 	movq	%rbx, %rax
.Ltmp3833:
    00001020: 	movq	%r14, 0xd8(%rsp)
    00001028: 	movb	$0x0, (%rax,%r14)
    0000102d: 	movabsq	$0x3fffffffffffffff, %rax
    00001037: 	subq	0xd8(%rsp), %rax
    0000103f: 	cmpq	$0x15, %rax
    00001043: 	jbe	.Ltmp3766 # Offset: 4163
    00001049: 	movl	$0x16, %edx
    0000104e: 	leaq	DATAat0x3346e(%rip), %rsi
    00001055: 	movq	%rbp, %rdi
    00001058: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4184
    0000105d: 	movq	%rbp, %r8
    00001060: 	movl	$0x1, %edx
    00001065: 	movl	$0x1f40, %esi
    0000106a: 	movq	%r12, %rdi
    0000106d: 	leaq	_Z10logic_and8IsEbPKT_ib(%rip), %rcx
    00001074: 	callq	_Z23testOneFunction_logicalIsPFbPKsibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4212
    00001079: 	movq	0xd0(%rsp), %rdi
    00001081: 	cmpq	%rbx, %rdi
    00001084: 	je	.Ltmp3767 # Offset: 4228
    00001086: 	movq	0xe0(%rsp), %rax
    0000108e: 	leaq	0x1(%rax), %rsi
    00001092: 	callq	_ZdlPvm@PLT # Offset: 4242
.Ltmp3767:
    00001097: 	leaq	0xb0(%rsp), %rdi
    0000109f: 	leaq	DATAat0x33485(%rip), %rdx
    000010a6: 	movq	%r13, %rsi
    000010a9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4265
    000010ae: 	movl	iterations(%rip), %esi
    000010b4: 	movq	0xb0(%rsp), %rdi
    000010bc: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 4284
    000010c1: 	movq	0x30(%rsp), %r15
    000010c6: 	movq	0x38(%rsp), %r14
    000010cb: 	movq	%rbx, 0xd0(%rsp)
    000010d3: 	movq	%r15, %rax
    000010d6: 	addq	%r14, %rax
    000010d9: 	je	.Ltmp3768 # Offset: 4313
    000010db: 	testq	%r15, %r15
    000010de: 	je	.Ltmp3769 # Offset: 4318
.Ltmp3768:
    000010e4: 	movq	%r14, 0x28(%rsp)
    000010e9: 	cmpq	$0xf, %r14
    000010ed: 	ja	.Ltmp3770 # Offset: 4333
    000010f3: 	cmpq	$0x1, %r14
    000010f7: 	jne	.Ltmp3771 # Offset: 4343
    000010fd: 	movzbl	(%r15), %eax
    00001101: 	movb	%al, 0xe0(%rsp)
    00001108: 	movq	%rbx, %rax
.Ltmp3845:
    0000110b: 	movq	%r14, 0xd8(%rsp)
    00001113: 	movb	$0x0, (%rax,%r14)
    00001118: 	movabsq	$0x3fffffffffffffff, %rax
    00001122: 	subq	0xd8(%rsp), %rax
    0000112a: 	cmpq	$0x14, %rax
    0000112e: 	jbe	.Ltmp3772 # Offset: 4398
    00001134: 	movl	$0x15, %edx
    00001139: 	leaq	DATAat0x3349b(%rip), %rsi
    00001140: 	movq	%rbp, %rdi
    00001143: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4419
    00001148: 	movq	%rbp, %r8
    0000114b: 	leaq	_Z9logic_or1IsEbPKT_ib(%rip), %rcx
    00001152: 	xorl	%edx, %edx
    00001154: 	movq	%r12, %rdi
    00001157: 	movl	$0x1f40, %esi
    0000115c: 	callq	_Z23testOneFunction_logicalIsPFbPKsibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4444
    00001161: 	movq	0xd0(%rsp), %rdi
    00001169: 	cmpq	%rbx, %rdi
    0000116c: 	je	.Ltmp3773 # Offset: 4460
    0000116e: 	movq	0xe0(%rsp), %rax
    00001176: 	leaq	0x1(%rax), %rsi
    0000117a: 	callq	_ZdlPvm@PLT # Offset: 4474
.Ltmp3773:
    0000117f: 	leaq	DATAat0x334b1(%rip), %rdx
    00001186: 	movq	%r13, %rsi
    00001189: 	movq	%rbp, %rdi
    0000118c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4492
    00001191: 	movq	%rbp, %r8
    00001194: 	leaq	_Z12logic_or_optIsEbPKT_ib(%rip), %rcx
    0000119b: 	xorl	%edx, %edx
    0000119d: 	movq	%r12, %rdi
    000011a0: 	movl	$0x1f40, %esi
    000011a5: 	callq	_Z23testOneFunction_logicalIsPFbPKsibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4517
    000011aa: 	movq	0xd0(%rsp), %rdi
    000011b2: 	cmpq	%rbx, %rdi
    000011b5: 	je	.Ltmp3774 # Offset: 4533
    000011b7: 	movq	0xe0(%rsp), %rax
    000011bf: 	leaq	0x1(%rax), %rsi
    000011c3: 	callq	_ZdlPvm@PLT # Offset: 4547
.Ltmp3774:
    000011c8: 	movq	0x30(%rsp), %r15
    000011cd: 	movq	0x38(%rsp), %r14
    000011d2: 	movq	%rbx, 0xd0(%rsp)
    000011da: 	movq	%r15, %rax
    000011dd: 	addq	%r14, %rax
    000011e0: 	je	.Ltmp3775 # Offset: 4576
    000011e2: 	testq	%r15, %r15
    000011e5: 	je	.Ltmp3776 # Offset: 4581
.Ltmp3775:
    000011eb: 	movq	%r14, 0x28(%rsp)
    000011f0: 	cmpq	$0xf, %r14
    000011f4: 	ja	.Ltmp3777 # Offset: 4596
    000011fa: 	cmpq	$0x1, %r14
    000011fe: 	jne	.Ltmp3778 # Offset: 4606
    00001204: 	movzbl	(%r15), %eax
    00001208: 	movb	%al, 0xe0(%rsp)
    0000120f: 	movq	%rbx, %rax
.Ltmp3843:
    00001212: 	movq	%r14, 0xd8(%rsp)
    0000121a: 	movb	$0x0, (%rax,%r14)
    0000121f: 	movabsq	$0x3fffffffffffffff, %rax
    00001229: 	subq	0xd8(%rsp), %rax
    00001231: 	cmpq	$0x14, %rax
    00001235: 	jbe	.Ltmp3779 # Offset: 4661
    0000123b: 	movl	$0x15, %edx
    00001240: 	leaq	DATAat0x334ce(%rip), %rsi
    00001247: 	movq	%rbp, %rdi
    0000124a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4682
    0000124f: 	movq	%rbp, %r8
    00001252: 	leaq	_Z9logic_or2IsEbPKT_ib(%rip), %rcx
    00001259: 	xorl	%edx, %edx
    0000125b: 	movq	%r12, %rdi
    0000125e: 	movl	$0x1f40, %esi
    00001263: 	callq	_Z23testOneFunction_logicalIsPFbPKsibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4707
    00001268: 	movq	0xd0(%rsp), %rdi
    00001270: 	cmpq	%rbx, %rdi
    00001273: 	je	.Ltmp3780 # Offset: 4723
    00001275: 	movq	0xe0(%rsp), %rax
    0000127d: 	leaq	0x1(%rax), %rsi
    00001281: 	callq	_ZdlPvm@PLT # Offset: 4737
.Ltmp3780:
    00001286: 	leaq	DATAat0x334e4(%rip), %rdx
    0000128d: 	movq	%r13, %rsi
    00001290: 	movq	%rbp, %rdi
    00001293: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4755
    00001298: 	movq	%rbp, %r8
    0000129b: 	leaq	_Z9logic_or3IsEbPKT_ib(%rip), %rcx
    000012a2: 	xorl	%edx, %edx
    000012a4: 	movq	%r12, %rdi
    000012a7: 	movl	$0x1f40, %esi
    000012ac: 	callq	_Z23testOneFunction_logicalIsPFbPKsibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4780
    000012b1: 	movq	0xd0(%rsp), %rdi
    000012b9: 	cmpq	%rbx, %rdi
    000012bc: 	je	.Ltmp3781 # Offset: 4796
    000012be: 	movq	0xe0(%rsp), %rax
    000012c6: 	leaq	0x1(%rax), %rsi
    000012ca: 	callq	_ZdlPvm@PLT # Offset: 4810
.Ltmp3781:
    000012cf: 	movq	0x30(%rsp), %r15
    000012d4: 	movq	0x38(%rsp), %r14
    000012d9: 	movq	%rbx, 0xd0(%rsp)
    000012e1: 	movq	%r15, %rax
    000012e4: 	addq	%r14, %rax
    000012e7: 	je	.Ltmp3782 # Offset: 4839
    000012e9: 	testq	%r15, %r15
    000012ec: 	je	.Ltmp3783 # Offset: 4844
.Ltmp3782:
    000012f2: 	movq	%r14, 0x28(%rsp)
    000012f7: 	cmpq	$0xf, %r14
    000012fb: 	ja	.Ltmp3784 # Offset: 4859
    00001301: 	cmpq	$0x1, %r14
    00001305: 	jne	.Ltmp3785 # Offset: 4869
    0000130b: 	movzbl	(%r15), %eax
    0000130f: 	movb	%al, 0xe0(%rsp)
    00001316: 	movq	%rbx, %rax
.Ltmp3849:
    00001319: 	movq	%r14, 0xd8(%rsp)
    00001321: 	movb	$0x0, (%rax,%r14)
    00001326: 	movabsq	$0x3fffffffffffffff, %rax
    00001330: 	subq	0xd8(%rsp), %rax
    00001338: 	cmpq	$0x14, %rax
    0000133c: 	jbe	.Ltmp3786 # Offset: 4924
    00001342: 	movl	$0x15, %edx
    00001347: 	leaq	DATAat0x334fa(%rip), %rsi
    0000134e: 	movq	%rbp, %rdi
    00001351: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4945
    00001356: 	movq	%rbp, %r8
    00001359: 	leaq	_Z9logic_or4IsEbPKT_ib(%rip), %rcx
    00001360: 	xorl	%edx, %edx
    00001362: 	movq	%r12, %rdi
    00001365: 	movl	$0x1f40, %esi
    0000136a: 	callq	_Z23testOneFunction_logicalIsPFbPKsibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4970
    0000136f: 	movq	0xd0(%rsp), %rdi
    00001377: 	cmpq	%rbx, %rdi
    0000137a: 	je	.Ltmp3787 # Offset: 4986
    0000137c: 	movq	0xe0(%rsp), %rax
    00001384: 	leaq	0x1(%rax), %rsi
    00001388: 	callq	_ZdlPvm@PLT # Offset: 5000
.Ltmp3787:
    0000138d: 	movq	0x30(%rsp), %r15
    00001392: 	movq	0x38(%rsp), %r14
    00001397: 	movq	%rbx, 0xd0(%rsp)
    0000139f: 	movq	%r15, %rax
    000013a2: 	addq	%r14, %rax
    000013a5: 	je	.Ltmp3788 # Offset: 5029
    000013a7: 	testq	%r15, %r15
    000013aa: 	je	.Ltmp3789 # Offset: 5034
.Ltmp3788:
    000013b0: 	movq	%r14, 0x28(%rsp)
    000013b5: 	cmpq	$0xf, %r14
    000013b9: 	ja	.Ltmp3790 # Offset: 5049
    000013bf: 	cmpq	$0x1, %r14
    000013c3: 	jne	.Ltmp3791 # Offset: 5059
    000013c9: 	movzbl	(%r15), %eax
    000013cd: 	movb	%al, 0xe0(%rsp)
    000013d4: 	movq	%rbx, %rax
.Ltmp3847:
    000013d7: 	movq	%r14, 0xd8(%rsp)
    000013df: 	movb	$0x0, (%rax,%r14)
    000013e4: 	movabsq	$0x3fffffffffffffff, %rax
    000013ee: 	subq	0xd8(%rsp), %rax
    000013f6: 	cmpq	$0x14, %rax
    000013fa: 	jbe	.Ltmp3792 # Offset: 5114
    00001400: 	movl	$0x15, %edx
    00001405: 	leaq	DATAat0x33510(%rip), %rsi
    0000140c: 	movq	%rbp, %rdi
    0000140f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5135
    00001414: 	movq	%rbp, %r8
    00001417: 	leaq	_Z9logic_or5IsEbPKT_ib(%rip), %rcx
    0000141e: 	xorl	%edx, %edx
    00001420: 	movq	%r12, %rdi
    00001423: 	movl	$0x1f40, %esi
    00001428: 	callq	_Z23testOneFunction_logicalIsPFbPKsibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5160
    0000142d: 	movq	0xd0(%rsp), %rdi
    00001435: 	cmpq	%rbx, %rdi
    00001438: 	je	.Ltmp3793 # Offset: 5176
    0000143a: 	movq	0xe0(%rsp), %rax
    00001442: 	leaq	0x1(%rax), %rsi
    00001446: 	callq	_ZdlPvm@PLT # Offset: 5190
.Ltmp3793:
    0000144b: 	leaq	DATAat0x33526(%rip), %rdx
    00001452: 	movq	%r13, %rsi
    00001455: 	movq	%rbp, %rdi
    00001458: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5208
    0000145d: 	movq	%rbp, %r8
    00001460: 	leaq	_Z9logic_or6IsEbPKT_ib(%rip), %rcx
    00001467: 	xorl	%edx, %edx
    00001469: 	movq	%r12, %rdi
    0000146c: 	movl	$0x1f40, %esi
    00001471: 	callq	_Z23testOneFunction_logicalIsPFbPKsibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5233
    00001476: 	movq	0xd0(%rsp), %rdi
    0000147e: 	cmpq	%rbx, %rdi
    00001481: 	je	.Ltmp3794 # Offset: 5249
    00001483: 	movq	0xe0(%rsp), %rax
    0000148b: 	leaq	0x1(%rax), %rsi
    0000148f: 	callq	_ZdlPvm@PLT # Offset: 5263
.Ltmp3794:
    00001494: 	movq	0x30(%rsp), %r15
    00001499: 	movq	0x38(%rsp), %r14
    0000149e: 	movq	%rbx, 0xd0(%rsp)
    000014a6: 	movq	%r15, %rax
    000014a9: 	addq	%r14, %rax
    000014ac: 	je	.Ltmp3795 # Offset: 5292
    000014ae: 	testq	%r15, %r15
    000014b1: 	je	.Ltmp3796 # Offset: 5297
.Ltmp3795:
    000014b7: 	movq	%r14, 0x28(%rsp)
    000014bc: 	cmpq	$0xf, %r14
    000014c0: 	ja	.Ltmp3797 # Offset: 5312
    000014c6: 	cmpq	$0x1, %r14
    000014ca: 	jne	.Ltmp3798 # Offset: 5322
    000014d0: 	movzbl	(%r15), %eax
    000014d4: 	movb	%al, 0xe0(%rsp)
    000014db: 	movq	%rbx, %rax
.Ltmp3851:
    000014de: 	movq	%r14, 0xd8(%rsp)
    000014e6: 	movb	$0x0, (%rax,%r14)
    000014eb: 	movabsq	$0x3fffffffffffffff, %rax
    000014f5: 	subq	0xd8(%rsp), %rax
    000014fd: 	cmpq	$0x14, %rax
    00001501: 	jbe	.Ltmp3799 # Offset: 5377
    00001507: 	movl	$0x15, %edx
    0000150c: 	leaq	DATAat0x3353c(%rip), %rsi
    00001513: 	movq	%rbp, %rdi
    00001516: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5398
    0000151b: 	movq	%rbp, %r8
    0000151e: 	leaq	_Z9logic_or7IsEbPKT_ib(%rip), %rcx
    00001525: 	xorl	%edx, %edx
    00001527: 	movq	%r12, %rdi
    0000152a: 	movl	$0x1f40, %esi
    0000152f: 	callq	_Z23testOneFunction_logicalIsPFbPKsibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5423
    00001534: 	movq	0xd0(%rsp), %rdi
    0000153c: 	cmpq	%rbx, %rdi
    0000153f: 	je	.Ltmp3800 # Offset: 5439
    00001541: 	movq	0xe0(%rsp), %rax
    00001549: 	leaq	0x1(%rax), %rsi
    0000154d: 	callq	_ZdlPvm@PLT # Offset: 5453
.Ltmp3800:
    00001552: 	movq	0x30(%rsp), %r15
    00001557: 	movq	0x38(%rsp), %r14
    0000155c: 	movq	%rbx, 0xd0(%rsp)
    00001564: 	movq	%r15, %rax
    00001567: 	addq	%r14, %rax
    0000156a: 	je	.Ltmp3801 # Offset: 5482
    0000156c: 	testq	%r15, %r15
    0000156f: 	je	.Ltmp3802 # Offset: 5487
.Ltmp3801:
    00001575: 	movq	%r14, 0x28(%rsp)
    0000157a: 	cmpq	$0xf, %r14
    0000157e: 	ja	.Ltmp3803 # Offset: 5502
    00001584: 	cmpq	$0x1, %r14
    00001588: 	jne	.Ltmp3804 # Offset: 5512
    0000158e: 	movzbl	(%r15), %eax
    00001592: 	movb	%al, 0xe0(%rsp)
    00001599: 	movq	%rbx, %rax
.Ltmp3853:
    0000159c: 	movq	%r14, 0xd8(%rsp)
    000015a4: 	movb	$0x0, (%rax,%r14)
    000015a9: 	movabsq	$0x3fffffffffffffff, %rax
    000015b3: 	subq	0xd8(%rsp), %rax
    000015bb: 	cmpq	$0x14, %rax
    000015bf: 	jbe	.Ltmp3805 # Offset: 5567
    000015c5: 	movl	$0x15, %edx
    000015ca: 	leaq	DATAat0x33552(%rip), %rsi
    000015d1: 	movq	%rbp, %rdi
    000015d4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5588
    000015d9: 	movq	%rbp, %r8
    000015dc: 	leaq	_Z9logic_or8IsEbPKT_ib(%rip), %rcx
    000015e3: 	xorl	%edx, %edx
    000015e5: 	movq	%r12, %rdi
    000015e8: 	movl	$0x1f40, %esi
    000015ed: 	callq	_Z23testOneFunction_logicalIsPFbPKsibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5613
    000015f2: 	movq	0xd0(%rsp), %rdi
    000015fa: 	cmpq	%rbx, %rdi
    000015fd: 	je	.Ltmp3806 # Offset: 5629
    000015ff: 	movq	0xe0(%rsp), %rax
    00001607: 	leaq	0x1(%rax), %rsi
    0000160b: 	callq	_ZdlPvm@PLT # Offset: 5643
.Ltmp3806:
    00001610: 	leaq	DATAat0x33568(%rip), %rdx
    00001617: 	movq	%r13, %rsi
    0000161a: 	movq	%rbp, %rdi
    0000161d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5661
    00001622: 	movl	iterations(%rip), %esi
    00001628: 	movq	0xd0(%rsp), %rdi
    00001630: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 5680
    00001635: 	movq	0xd0(%rsp), %rdi
    0000163d: 	cmpq	%rbx, %rdi
    00001640: 	je	.Ltmp3807 # Offset: 5696
    00001642: 	movq	0xe0(%rsp), %rax
    0000164a: 	leaq	0x1(%rax), %rsi
    0000164e: 	callq	_ZdlPvm@PLT # Offset: 5710
.Ltmp3807:
    00001653: 	movq	0xb0(%rsp), %rdi
    0000165b: 	leaq	0xc0(%rsp), %rax
    00001663: 	cmpq	%rax, %rdi
    00001666: 	je	.Ltmp3808 # Offset: 5734
    00001668: 	movq	0xc0(%rsp), %rax
    00001670: 	leaq	0x1(%rax), %rsi
    00001674: 	callq	_ZdlPvm@PLT # Offset: 5748
.Ltmp3808:
    00001679: 	movq	0x90(%rsp), %rdi
    00001681: 	leaq	0xa0(%rsp), %rax
    00001689: 	cmpq	%rax, %rdi
    0000168c: 	je	.Ltmp3809 # Offset: 5772
    0000168e: 	movq	0xa0(%rsp), %rax
    00001696: 	leaq	0x1(%rax), %rsi
    0000169a: 	callq	_ZdlPvm@PLT # Offset: 5786
.Ltmp3809:
    0000169f: 	movq	0x70(%rsp), %rdi
    000016a4: 	cmpq	0x10(%rsp), %rdi
    000016a9: 	je	.Ltmp3810 # Offset: 5801
    000016ab: 	movq	0x80(%rsp), %rax
    000016b3: 	leaq	0x1(%rax), %rsi
    000016b7: 	callq	_ZdlPvm@PLT # Offset: 5815
.Ltmp3810:
    000016bc: 	movq	0x50(%rsp), %rdi
    000016c1: 	cmpq	0x8(%rsp), %rdi
    000016c6: 	je	.Ltmp3811 # Offset: 5830
    000016c8: 	movq	0x60(%rsp), %rax
    000016cd: 	leaq	0x1(%rax), %rsi
    000016d1: 	callq	_ZdlPvm@PLT # Offset: 5841
.Ltmp3811:
    000016d6: 	movq	%r12, %rdi
    000016d9: 	movl	$0x2, %esi
    000016de: 	callq	_ZdlPvm@PLT # Offset: 5854
    000016e3: 	movq	0x30(%rsp), %rdi
    000016e8: 	cmpq	0x18(%rsp), %rdi
    000016ed: 	je	.Ltmp3812 # Offset: 5869
    000016ef: 	movq	0x40(%rsp), %rax
    000016f4: 	leaq	0x1(%rax), %rsi
    000016f8: 	callq	_ZdlPvm@PLT # Offset: 5880
.Ltmp3812:
    000016fd: 	movq	0xf8(%rsp), %rax
    00001705: 	subq	%fs:0x28, %rax
    0000170e: 	jne	.Ltmp3813 # Offset: 5902
    00001714: 	addq	$0x108, %rsp
    0000171b: 	popq	%rbx
    0000171c: 	popq	%rbp
    0000171d: 	popq	%r12
    0000171f: 	popq	%r13
    00001721: 	popq	%r14
    00001723: 	popq	%r15
    00001725: 	retq # Offset: 5925
    00001726: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3673:
    00001730: 	testq	%r14, %r14
    00001733: 	jne	.Ltmp3814 # Offset: 5939
    00001739: 	movq	%rbx, %rax
    0000173c: 	jmp	.Ltmp3815 # Offset: 5948
    00001741: 	nopl	(%rax) # Size: 7
.Ltmp3692:
    00001748: 	testq	%r14, %r14
    0000174b: 	jne	.Ltmp3816 # Offset: 5963
    00001751: 	movq	0x8(%rsp), %rax
    00001756: 	jmp	.Ltmp3817 # Offset: 5974
    0000175b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3685:
    00001760: 	testq	%r14, %r14
    00001763: 	jne	.Ltmp3818 # Offset: 5987
    00001769: 	movq	%rbx, %rax
    0000176c: 	jmp	.Ltmp3819 # Offset: 5996
    00001771: 	nopl	(%rax) # Size: 7
.Ltmp3679:
    00001778: 	testq	%r14, %r14
    0000177b: 	jne	.Ltmp3820 # Offset: 6011
    00001781: 	movq	%rbx, %rax
    00001784: 	jmp	.Ltmp3821 # Offset: 6020
    00001789: 	nopl	(%rax) # Size: 7
.Ltmp3727:
    00001790: 	testq	%r14, %r14
    00001793: 	jne	.Ltmp3822 # Offset: 6035
    00001799: 	movq	%rbx, %rax
    0000179c: 	jmp	.Ltmp3823 # Offset: 6044
    000017a1: 	nopl	(%rax) # Size: 7
.Ltmp3721:
    000017a8: 	testq	%r14, %r14
    000017ab: 	jne	.Ltmp3824 # Offset: 6059
    000017b1: 	movq	%rbx, %rax
    000017b4: 	jmp	.Ltmp3825 # Offset: 6068
    000017b9: 	nopl	(%rax) # Size: 7
.Ltmp3715:
    000017c0: 	testq	%r14, %r14
    000017c3: 	jne	.Ltmp3826 # Offset: 6083
    000017c9: 	movq	0x10(%rsp), %rax
    000017ce: 	jmp	.Ltmp3827 # Offset: 6094
    000017d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3706:
    000017d8: 	testq	%r14, %r14
    000017db: 	jne	.Ltmp3828 # Offset: 6107
    000017e1: 	movq	%rbx, %rax
    000017e4: 	jmp	.Ltmp3829 # Offset: 6116
    000017e9: 	nopl	(%rax) # Size: 7
.Ltmp3698:
    000017f0: 	testq	%r14, %r14
    000017f3: 	jne	.Ltmp3830 # Offset: 6131
    000017f9: 	movq	%rbx, %rax
    000017fc: 	jmp	.Ltmp3831 # Offset: 6140
    00001801: 	nopl	(%rax) # Size: 7
.Ltmp3765:
    00001808: 	testq	%r14, %r14
    0000180b: 	jne	.Ltmp3832 # Offset: 6155
    00001811: 	movq	%rbx, %rax
    00001814: 	jmp	.Ltmp3833 # Offset: 6164
    00001819: 	nopl	(%rax) # Size: 7
.Ltmp3757:
    00001820: 	testq	%r14, %r14
    00001823: 	jne	.Ltmp3834 # Offset: 6179
    00001829: 	movq	%rbx, %rax
    0000182c: 	jmp	.Ltmp3835 # Offset: 6188
    00001831: 	nopl	(%rax) # Size: 7
.Ltmp3733:
    00001838: 	testq	%r14, %r14
    0000183b: 	jne	.Ltmp3836 # Offset: 6203
    00001841: 	movq	%rbx, %rax
    00001844: 	jmp	.Ltmp3837 # Offset: 6212
    00001849: 	nopl	(%rax) # Size: 7
.Ltmp3751:
    00001850: 	testq	%r14, %r14
    00001853: 	jne	.Ltmp3838 # Offset: 6227
    00001859: 	movq	%rbx, %rax
    0000185c: 	jmp	.Ltmp3839 # Offset: 6236
    00001861: 	nopl	(%rax) # Size: 7
.Ltmp3743:
    00001868: 	testq	%r14, %r14
    0000186b: 	jne	.Ltmp3840 # Offset: 6251
    00001871: 	movq	%rbx, %rax
    00001874: 	jmp	.Ltmp3841 # Offset: 6260
    00001879: 	nopl	(%rax) # Size: 7
.Ltmp3778:
    00001880: 	testq	%r14, %r14
    00001883: 	jne	.Ltmp3842 # Offset: 6275
    00001889: 	movq	%rbx, %rax
    0000188c: 	jmp	.Ltmp3843 # Offset: 6284
    00001891: 	nopl	(%rax) # Size: 7
.Ltmp3771:
    00001898: 	testq	%r14, %r14
    0000189b: 	jne	.Ltmp3844 # Offset: 6299
    000018a1: 	movq	%rbx, %rax
    000018a4: 	jmp	.Ltmp3845 # Offset: 6308
    000018a9: 	nopl	(%rax) # Size: 7
.Ltmp3791:
    000018b0: 	testq	%r14, %r14
    000018b3: 	jne	.Ltmp3846 # Offset: 6323
    000018b9: 	movq	%rbx, %rax
    000018bc: 	jmp	.Ltmp3847 # Offset: 6332
    000018c1: 	nopl	(%rax) # Size: 7
.Ltmp3785:
    000018c8: 	testq	%r14, %r14
    000018cb: 	jne	.Ltmp3848 # Offset: 6347
    000018d1: 	movq	%rbx, %rax
    000018d4: 	jmp	.Ltmp3849 # Offset: 6356
    000018d9: 	nopl	(%rax) # Size: 7
.Ltmp3798:
    000018e0: 	testq	%r14, %r14
    000018e3: 	jne	.Ltmp3850 # Offset: 6371
    000018e9: 	movq	%rbx, %rax
    000018ec: 	jmp	.Ltmp3851 # Offset: 6380
    000018f1: 	nopl	(%rax) # Size: 7
.Ltmp3804:
    000018f8: 	testq	%r14, %r14
    000018fb: 	jne	.Ltmp3852 # Offset: 6395
    00001901: 	movq	%rbx, %rax
    00001904: 	jmp	.Ltmp3853 # Offset: 6404
    00001909: 	nopl	(%rax) # Size: 7
.Ltmp3684:
    00001910: 	leaq	0x28(%rsp), %rsi
    00001915: 	xorl	%edx, %edx
    00001917: 	movq	%rbp, %rdi
    0000191a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6426
    0000191f: 	movq	%rax, 0xd0(%rsp)
    00001927: 	movq	%rax, %rdi
    0000192a: 	movq	0x28(%rsp), %rax
    0000192f: 	movq	%rax, 0xe0(%rsp)
.Ltmp3856:
    00001937: 	movq	%r14, %rdx
    0000193a: 	movq	%r15, %rsi
    0000193d: 	callq	memcpy@PLT # Offset: 6461
    00001942: 	movq	0x28(%rsp), %r14
    00001947: 	movq	0xd0(%rsp), %rax
    0000194f: 	jmp	.Ltmp3819 # Offset: 6479
    00001954: 	nopl	(%rax) # Size: 4
.Ltmp3678:
    00001958: 	leaq	0x28(%rsp), %rsi
    0000195d: 	xorl	%edx, %edx
    0000195f: 	movq	%rbp, %rdi
    00001962: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6498
    00001967: 	movq	%rax, 0xd0(%rsp)
    0000196f: 	movq	%rax, %rdi
    00001972: 	movq	0x28(%rsp), %rax
    00001977: 	movq	%rax, 0xe0(%rsp)
.Ltmp3857:
    0000197f: 	movq	%r14, %rdx
    00001982: 	movq	%r15, %rsi
    00001985: 	callq	memcpy@PLT # Offset: 6533
    0000198a: 	movq	0x28(%rsp), %r14
    0000198f: 	movq	0xd0(%rsp), %rax
    00001997: 	jmp	.Ltmp3821 # Offset: 6551
    0000199c: 	nopl	(%rax) # Size: 4
.Ltmp3672:
    000019a0: 	leaq	0x28(%rsp), %rsi
    000019a5: 	xorl	%edx, %edx
    000019a7: 	movq	%rbp, %rdi
    000019aa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6570
    000019af: 	movq	%rax, 0xd0(%rsp)
    000019b7: 	movq	%rax, %rdi
    000019ba: 	movq	0x28(%rsp), %rax
    000019bf: 	movq	%rax, 0xe0(%rsp)
.Ltmp3854:
    000019c7: 	movq	%r14, %rdx
    000019ca: 	movq	%r15, %rsi
    000019cd: 	callq	memcpy@PLT # Offset: 6605
    000019d2: 	movq	0x28(%rsp), %r14
    000019d7: 	movq	0xd0(%rsp), %rax
    000019df: 	jmp	.Ltmp3815 # Offset: 6623
    000019e4: 	nopl	(%rax) # Size: 4
.Ltmp3720:
    000019e8: 	leaq	0x28(%rsp), %rsi
    000019ed: 	xorl	%edx, %edx
    000019ef: 	movq	%rbp, %rdi
    000019f2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6642
    000019f7: 	movq	%rax, 0xd0(%rsp)
    000019ff: 	movq	%rax, %rdi
    00001a02: 	movq	0x28(%rsp), %rax
    00001a07: 	movq	%rax, 0xe0(%rsp)
.Ltmp3859:
    00001a0f: 	movq	%r14, %rdx
    00001a12: 	movq	%r15, %rsi
    00001a15: 	callq	memcpy@PLT # Offset: 6677
    00001a1a: 	movq	0x28(%rsp), %r14
    00001a1f: 	movq	0xd0(%rsp), %rax
    00001a27: 	jmp	.Ltmp3825 # Offset: 6695
    00001a2c: 	nopl	(%rax) # Size: 4
.Ltmp3714:
    00001a30: 	leaq	0x28(%rsp), %rsi
    00001a35: 	leaq	0x70(%rsp), %rdi
    00001a3a: 	xorl	%edx, %edx
    00001a3c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6716
    00001a41: 	movq	%rax, 0x70(%rsp)
    00001a46: 	movq	%rax, %rdi
    00001a49: 	movq	0x28(%rsp), %rax
    00001a4e: 	movq	%rax, 0x80(%rsp)
.Ltmp3860:
    00001a56: 	movq	%r14, %rdx
    00001a59: 	movq	%r15, %rsi
    00001a5c: 	callq	memcpy@PLT # Offset: 6748
    00001a61: 	movq	0x28(%rsp), %r14
    00001a66: 	movq	0x70(%rsp), %rax
    00001a6b: 	jmp	.Ltmp3827 # Offset: 6763
.Ltmp3705:
    00001a70: 	leaq	0x28(%rsp), %rsi
    00001a75: 	xorl	%edx, %edx
    00001a77: 	movq	%rbp, %rdi
    00001a7a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6778
    00001a7f: 	movq	%rax, 0xd0(%rsp)
    00001a87: 	movq	%rax, %rdi
    00001a8a: 	movq	0x28(%rsp), %rax
    00001a8f: 	movq	%rax, 0xe0(%rsp)
.Ltmp3861:
    00001a97: 	movq	%r14, %rdx
    00001a9a: 	movq	%r15, %rsi
    00001a9d: 	callq	memcpy@PLT # Offset: 6813
    00001aa2: 	movq	0x28(%rsp), %r14
    00001aa7: 	movq	0xd0(%rsp), %rax
    00001aaf: 	jmp	.Ltmp3829 # Offset: 6831
    00001ab4: 	nopl	(%rax) # Size: 4
.Ltmp3697:
    00001ab8: 	leaq	0x28(%rsp), %rsi
    00001abd: 	xorl	%edx, %edx
    00001abf: 	movq	%rbp, %rdi
    00001ac2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6850
    00001ac7: 	movq	%rax, 0xd0(%rsp)
    00001acf: 	movq	%rax, %rdi
    00001ad2: 	movq	0x28(%rsp), %rax
    00001ad7: 	movq	%rax, 0xe0(%rsp)
.Ltmp3862:
    00001adf: 	movq	%r14, %rdx
    00001ae2: 	movq	%r15, %rsi
    00001ae5: 	callq	memcpy@PLT # Offset: 6885
    00001aea: 	movq	0x28(%rsp), %r14
    00001aef: 	movq	0xd0(%rsp), %rax
    00001af7: 	jmp	.Ltmp3831 # Offset: 6903
    00001afc: 	nopl	(%rax) # Size: 4
.Ltmp3691:
    00001b00: 	leaq	0x28(%rsp), %rsi
    00001b05: 	leaq	0x50(%rsp), %rdi
    00001b0a: 	xorl	%edx, %edx
    00001b0c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6924
    00001b11: 	movq	%rax, 0x50(%rsp)
    00001b16: 	movq	%rax, %rdi
    00001b19: 	movq	0x28(%rsp), %rax
    00001b1e: 	movq	%rax, 0x60(%rsp)
.Ltmp3855:
    00001b23: 	movq	%r14, %rdx
    00001b26: 	movq	%r15, %rsi
    00001b29: 	callq	memcpy@PLT # Offset: 6953
    00001b2e: 	movq	0x28(%rsp), %r14
    00001b33: 	movq	0x50(%rsp), %rax
    00001b38: 	jmp	.Ltmp3817 # Offset: 6968
    00001b3d: 	nopl	(%rax) # Size: 3
.Ltmp3726:
    00001b40: 	leaq	0x28(%rsp), %rsi
    00001b45: 	xorl	%edx, %edx
    00001b47: 	movq	%rbp, %rdi
    00001b4a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6986
    00001b4f: 	movq	%rax, 0xd0(%rsp)
    00001b57: 	movq	%rax, %rdi
    00001b5a: 	movq	0x28(%rsp), %rax
    00001b5f: 	movq	%rax, 0xe0(%rsp)
.Ltmp3858:
    00001b67: 	movq	%r14, %rdx
    00001b6a: 	movq	%r15, %rsi
    00001b6d: 	callq	memcpy@PLT # Offset: 7021
    00001b72: 	movq	0x28(%rsp), %r14
    00001b77: 	movq	0xd0(%rsp), %rax
    00001b7f: 	jmp	.Ltmp3823 # Offset: 7039
    00001b84: 	nopl	(%rax) # Size: 4
.Ltmp3732:
    00001b88: 	leaq	0x28(%rsp), %rsi
    00001b8d: 	xorl	%edx, %edx
    00001b8f: 	movq	%rbp, %rdi
    00001b92: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7058
    00001b97: 	movq	%rax, 0xd0(%rsp)
    00001b9f: 	movq	%rax, %rdi
    00001ba2: 	movq	0x28(%rsp), %rax
    00001ba7: 	movq	%rax, 0xe0(%rsp)
.Ltmp3865:
    00001baf: 	movq	%r14, %rdx
    00001bb2: 	movq	%r15, %rsi
    00001bb5: 	callq	memcpy@PLT # Offset: 7093
    00001bba: 	movq	0x28(%rsp), %r14
    00001bbf: 	movq	0xd0(%rsp), %rax
    00001bc7: 	jmp	.Ltmp3837 # Offset: 7111
    00001bcc: 	nopl	(%rax) # Size: 4
.Ltmp3742:
    00001bd0: 	leaq	0x28(%rsp), %rsi
    00001bd5: 	xorl	%edx, %edx
    00001bd7: 	movq	%rbp, %rdi
    00001bda: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7130
    00001bdf: 	movq	%rax, 0xd0(%rsp)
    00001be7: 	movq	%rax, %rdi
    00001bea: 	movq	0x28(%rsp), %rax
    00001bef: 	movq	%rax, 0xe0(%rsp)
.Ltmp3867:
    00001bf7: 	movq	%r14, %rdx
    00001bfa: 	movq	%r15, %rsi
    00001bfd: 	callq	memcpy@PLT # Offset: 7165
    00001c02: 	movq	0x28(%rsp), %r14
    00001c07: 	movq	0xd0(%rsp), %rax
    00001c0f: 	jmp	.Ltmp3841 # Offset: 7183
    00001c14: 	nopl	(%rax) # Size: 4
.Ltmp3756:
    00001c18: 	leaq	0x28(%rsp), %rsi
    00001c1d: 	xorl	%edx, %edx
    00001c1f: 	movq	%rbp, %rdi
    00001c22: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7202
    00001c27: 	movq	%rax, 0xd0(%rsp)
    00001c2f: 	movq	%rax, %rdi
    00001c32: 	movq	0x28(%rsp), %rax
    00001c37: 	movq	%rax, 0xe0(%rsp)
.Ltmp3864:
    00001c3f: 	movq	%r14, %rdx
    00001c42: 	movq	%r15, %rsi
    00001c45: 	callq	memcpy@PLT # Offset: 7237
    00001c4a: 	movq	0x28(%rsp), %r14
    00001c4f: 	movq	0xd0(%rsp), %rax
    00001c57: 	jmp	.Ltmp3835 # Offset: 7255
    00001c5c: 	nopl	(%rax) # Size: 4
.Ltmp3750:
    00001c60: 	leaq	0x28(%rsp), %rsi
    00001c65: 	xorl	%edx, %edx
    00001c67: 	movq	%rbp, %rdi
    00001c6a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7274
    00001c6f: 	movq	%rax, 0xd0(%rsp)
    00001c77: 	movq	%rax, %rdi
    00001c7a: 	movq	0x28(%rsp), %rax
    00001c7f: 	movq	%rax, 0xe0(%rsp)
.Ltmp3866:
    00001c87: 	movq	%r14, %rdx
    00001c8a: 	movq	%r15, %rsi
    00001c8d: 	callq	memcpy@PLT # Offset: 7309
    00001c92: 	movq	0x28(%rsp), %r14
    00001c97: 	movq	0xd0(%rsp), %rax
    00001c9f: 	jmp	.Ltmp3839 # Offset: 7327
    00001ca4: 	nopl	(%rax) # Size: 4
.Ltmp3764:
    00001ca8: 	leaq	0x28(%rsp), %rsi
    00001cad: 	xorl	%edx, %edx
    00001caf: 	movq	%rbp, %rdi
    00001cb2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7346
    00001cb7: 	movq	%rax, 0xd0(%rsp)
    00001cbf: 	movq	%rax, %rdi
    00001cc2: 	movq	0x28(%rsp), %rax
    00001cc7: 	movq	%rax, 0xe0(%rsp)
.Ltmp3863:
    00001ccf: 	movq	%r14, %rdx
    00001cd2: 	movq	%r15, %rsi
    00001cd5: 	callq	memcpy@PLT # Offset: 7381
    00001cda: 	movq	0x28(%rsp), %r14
    00001cdf: 	movq	0xd0(%rsp), %rax
    00001ce7: 	jmp	.Ltmp3833 # Offset: 7399
    00001cec: 	nopl	(%rax) # Size: 4
.Ltmp3770:
    00001cf0: 	leaq	0x28(%rsp), %rsi
    00001cf5: 	xorl	%edx, %edx
    00001cf7: 	movq	%rbp, %rdi
    00001cfa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7418
    00001cff: 	movq	%rax, 0xd0(%rsp)
    00001d07: 	movq	%rax, %rdi
    00001d0a: 	movq	0x28(%rsp), %rax
    00001d0f: 	movq	%rax, 0xe0(%rsp)
.Ltmp3869:
    00001d17: 	movq	%r14, %rdx
    00001d1a: 	movq	%r15, %rsi
    00001d1d: 	callq	memcpy@PLT # Offset: 7453
    00001d22: 	movq	0x28(%rsp), %r14
    00001d27: 	movq	0xd0(%rsp), %rax
    00001d2f: 	jmp	.Ltmp3845 # Offset: 7471
    00001d34: 	nopl	(%rax) # Size: 4
.Ltmp3784:
    00001d38: 	leaq	0x28(%rsp), %rsi
    00001d3d: 	xorl	%edx, %edx
    00001d3f: 	movq	%rbp, %rdi
    00001d42: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7490
    00001d47: 	movq	%rax, 0xd0(%rsp)
    00001d4f: 	movq	%rax, %rdi
    00001d52: 	movq	0x28(%rsp), %rax
    00001d57: 	movq	%rax, 0xe0(%rsp)
.Ltmp3871:
    00001d5f: 	movq	%r14, %rdx
    00001d62: 	movq	%r15, %rsi
    00001d65: 	callq	memcpy@PLT # Offset: 7525
    00001d6a: 	movq	0x28(%rsp), %r14
    00001d6f: 	movq	0xd0(%rsp), %rax
    00001d77: 	jmp	.Ltmp3849 # Offset: 7543
    00001d7c: 	nopl	(%rax) # Size: 4
.Ltmp3777:
    00001d80: 	leaq	0x28(%rsp), %rsi
    00001d85: 	xorl	%edx, %edx
    00001d87: 	movq	%rbp, %rdi
    00001d8a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7562
    00001d8f: 	movq	%rax, 0xd0(%rsp)
    00001d97: 	movq	%rax, %rdi
    00001d9a: 	movq	0x28(%rsp), %rax
    00001d9f: 	movq	%rax, 0xe0(%rsp)
.Ltmp3868:
    00001da7: 	movq	%r14, %rdx
    00001daa: 	movq	%r15, %rsi
    00001dad: 	callq	memcpy@PLT # Offset: 7597
    00001db2: 	movq	0x28(%rsp), %r14
    00001db7: 	movq	0xd0(%rsp), %rax
    00001dbf: 	jmp	.Ltmp3843 # Offset: 7615
    00001dc4: 	nopl	(%rax) # Size: 4
.Ltmp3797:
    00001dc8: 	leaq	0x28(%rsp), %rsi
    00001dcd: 	xorl	%edx, %edx
    00001dcf: 	movq	%rbp, %rdi
    00001dd2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7634
    00001dd7: 	movq	%rax, 0xd0(%rsp)
    00001ddf: 	movq	%rax, %rdi
    00001de2: 	movq	0x28(%rsp), %rax
    00001de7: 	movq	%rax, 0xe0(%rsp)
.Ltmp3872:
    00001def: 	movq	%r14, %rdx
    00001df2: 	movq	%r15, %rsi
    00001df5: 	callq	memcpy@PLT # Offset: 7669
    00001dfa: 	movq	0x28(%rsp), %r14
    00001dff: 	movq	0xd0(%rsp), %rax
    00001e07: 	jmp	.Ltmp3851 # Offset: 7687
    00001e0c: 	nopl	(%rax) # Size: 4
.Ltmp3790:
    00001e10: 	leaq	0x28(%rsp), %rsi
    00001e15: 	xorl	%edx, %edx
    00001e17: 	movq	%rbp, %rdi
    00001e1a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7706
    00001e1f: 	movq	%rax, 0xd0(%rsp)
    00001e27: 	movq	%rax, %rdi
    00001e2a: 	movq	0x28(%rsp), %rax
    00001e2f: 	movq	%rax, 0xe0(%rsp)
.Ltmp3870:
    00001e37: 	movq	%r14, %rdx
    00001e3a: 	movq	%r15, %rsi
    00001e3d: 	callq	memcpy@PLT # Offset: 7741
    00001e42: 	movq	0x28(%rsp), %r14
    00001e47: 	movq	0xd0(%rsp), %rax
    00001e4f: 	jmp	.Ltmp3847 # Offset: 7759
    00001e54: 	nopl	(%rax) # Size: 4
.Ltmp3803:
    00001e58: 	leaq	0x28(%rsp), %rsi
    00001e5d: 	xorl	%edx, %edx
    00001e5f: 	movq	%rbp, %rdi
    00001e62: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7778
    00001e67: 	movq	%rax, 0xd0(%rsp)
    00001e6f: 	movq	%rax, %rdi
    00001e72: 	movq	0x28(%rsp), %rax
    00001e77: 	movq	%rax, 0xe0(%rsp)
.Ltmp3873:
    00001e7f: 	movq	%r14, %rdx
    00001e82: 	movq	%r15, %rsi
    00001e85: 	callq	memcpy@PLT # Offset: 7813
    00001e8a: 	movq	0x28(%rsp), %r14
    00001e8f: 	movq	0xd0(%rsp), %rax
    00001e97: 	jmp	.Ltmp3853 # Offset: 7831
.Ltmp3674:
    00001e9c: 	leaq	DATAat0x33182(%rip), %rdi
    00001ea3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7843
.Ltmp3677:
    00001ea8: 	leaq	DATAat0x33158(%rip), %rdi
    00001eaf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7855
.Ltmp3680:
    00001eb4: 	leaq	DATAat0x33182(%rip), %rdi
    00001ebb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7867
.Ltmp3683:
    00001ec0: 	leaq	DATAat0x33158(%rip), %rdi
    00001ec7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7879
.Ltmp3686:
    00001ecc: 	leaq	DATAat0x33182(%rip), %rdi
    00001ed3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7891
.Ltmp3690:
    00001ed8: 	leaq	DATAat0x33158(%rip), %rdi
    00001edf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7903
.Ltmp3693:
    00001ee4: 	leaq	DATAat0x33182(%rip), %rdi
    00001eeb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7915
.Ltmp3696:
    00001ef0: 	leaq	DATAat0x33158(%rip), %rdi
    00001ef7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7927
.Ltmp3699:
    00001efc: 	leaq	DATAat0x33182(%rip), %rdi
    00001f03: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7939
.Ltmp3704:
    00001f08: 	leaq	DATAat0x33158(%rip), %rdi
    00001f0f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7951
.Ltmp3707:
    00001f14: 	leaq	DATAat0x33182(%rip), %rdi
    00001f1b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7963
.Ltmp3713:
    00001f20: 	leaq	DATAat0x33158(%rip), %rdi
    00001f27: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7975
.Ltmp3716:
    00001f2c: 	leaq	DATAat0x33182(%rip), %rdi
    00001f33: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7987
.Ltmp3719:
    00001f38: 	leaq	DATAat0x33158(%rip), %rdi
    00001f3f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7999
.Ltmp3722:
    00001f44: 	leaq	DATAat0x33182(%rip), %rdi
    00001f4b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8011
.Ltmp3725:
    00001f50: 	leaq	DATAat0x33158(%rip), %rdi
    00001f57: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8023
.Ltmp3728:
    00001f5c: 	leaq	DATAat0x33182(%rip), %rdi
    00001f63: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8035
.Ltmp3731:
    00001f68: 	leaq	DATAat0x33158(%rip), %rdi
    00001f6f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8047
.Ltmp3734:
    00001f74: 	leaq	DATAat0x33182(%rip), %rdi
    00001f7b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8059
.Ltmp3741:
    00001f80: 	leaq	DATAat0x33158(%rip), %rdi
    00001f87: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8071
.Ltmp3744:
    00001f8c: 	leaq	DATAat0x33182(%rip), %rdi
    00001f93: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8083
.Ltmp3749:
    00001f98: 	leaq	DATAat0x33158(%rip), %rdi
    00001f9f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8095
.Ltmp3752:
    00001fa4: 	leaq	DATAat0x33182(%rip), %rdi
    00001fab: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8107
.Ltmp3755:
    00001fb0: 	leaq	DATAat0x33158(%rip), %rdi
    00001fb7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8119
.Ltmp3758:
    00001fbc: 	leaq	DATAat0x33182(%rip), %rdi
    00001fc3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8131
.Ltmp3763:
    00001fc8: 	leaq	DATAat0x33158(%rip), %rdi
    00001fcf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8143
.Ltmp3766:
    00001fd4: 	leaq	DATAat0x33182(%rip), %rdi
    00001fdb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8155
.Ltmp3769:
    00001fe0: 	leaq	DATAat0x33158(%rip), %rdi
    00001fe7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8167
.Ltmp3772:
    00001fec: 	leaq	DATAat0x33182(%rip), %rdi
    00001ff3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8179
.Ltmp3776:
    00001ff8: 	leaq	DATAat0x33158(%rip), %rdi
    00001fff: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8191
.Ltmp3779:
    00002004: 	leaq	DATAat0x33182(%rip), %rdi
    0000200b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8203
.Ltmp3783:
    00002010: 	leaq	DATAat0x33158(%rip), %rdi
    00002017: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8215
.Ltmp3786:
    0000201c: 	leaq	DATAat0x33182(%rip), %rdi
    00002023: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8227
.Ltmp3789:
    00002028: 	leaq	DATAat0x33158(%rip), %rdi
    0000202f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8239
.Ltmp3792:
    00002034: 	leaq	DATAat0x33182(%rip), %rdi
    0000203b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8251
.Ltmp3796:
    00002040: 	leaq	DATAat0x33158(%rip), %rdi
    00002047: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8263
.Ltmp3799:
    0000204c: 	leaq	DATAat0x33182(%rip), %rdi
    00002053: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8275
.Ltmp3802:
    00002058: 	leaq	DATAat0x33158(%rip), %rdi
    0000205f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8287
.Ltmp3805:
    00002064: 	leaq	DATAat0x33182(%rip), %rdi
    0000206b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8299
.Ltmp3813:
    00002070: 	callq	__stack_chk_fail@PLT # Offset: 8304
.Ltmp3814:
    00002075: 	movq	%rbx, %rdi
    00002078: 	jmp	.Ltmp3854 # Offset: 8312
.Ltmp3816:
    0000207d: 	movq	0x8(%rsp), %rdi
    00002082: 	jmp	.Ltmp3855 # Offset: 8322
.Ltmp3818:
    00002087: 	movq	%rbx, %rdi
    0000208a: 	jmp	.Ltmp3856 # Offset: 8330
.Ltmp3820:
    0000208f: 	movq	%rbx, %rdi
    00002092: 	jmp	.Ltmp3857 # Offset: 8338
.Ltmp3822:
    00002097: 	movq	%rbx, %rdi
    0000209a: 	jmp	.Ltmp3858 # Offset: 8346
.Ltmp3824:
    0000209f: 	movq	%rbx, %rdi
    000020a2: 	jmp	.Ltmp3859 # Offset: 8354
.Ltmp3826:
    000020a7: 	movq	0x10(%rsp), %rdi
    000020ac: 	jmp	.Ltmp3860 # Offset: 8364
.Ltmp3828:
    000020b1: 	movq	%rbx, %rdi
    000020b4: 	jmp	.Ltmp3861 # Offset: 8372
.Ltmp3830:
    000020b9: 	movq	%rbx, %rdi
    000020bc: 	jmp	.Ltmp3862 # Offset: 8380
.Ltmp3832:
    000020c1: 	movq	%rbx, %rdi
    000020c4: 	jmp	.Ltmp3863 # Offset: 8388
.Ltmp3834:
    000020c9: 	movq	%rbx, %rdi
    000020cc: 	jmp	.Ltmp3864 # Offset: 8396
.Ltmp3836:
    000020d1: 	movq	%rbx, %rdi
    000020d4: 	jmp	.Ltmp3865 # Offset: 8404
.Ltmp3838:
    000020d9: 	movq	%rbx, %rdi
    000020dc: 	jmp	.Ltmp3866 # Offset: 8412
.Ltmp3840:
    000020e1: 	movq	%rbx, %rdi
    000020e4: 	jmp	.Ltmp3867 # Offset: 8420
.Ltmp3842:
    000020e9: 	movq	%rbx, %rdi
    000020ec: 	jmp	.Ltmp3868 # Offset: 8428
.Ltmp3844:
    000020f1: 	movq	%rbx, %rdi
    000020f4: 	jmp	.Ltmp3869 # Offset: 8436
.Ltmp3846:
    000020f9: 	movq	%rbx, %rdi
    000020fc: 	jmp	.Ltmp3870 # Offset: 8444
.Ltmp3848:
    00002101: 	movq	%rbx, %rdi
    00002104: 	jmp	.Ltmp3871 # Offset: 8452
.Ltmp3850:
    00002109: 	movq	%rbx, %rdi
    0000210c: 	jmp	.Ltmp3872 # Offset: 8460
.Ltmp3852:
    00002111: 	movq	%rbx, %rdi
    00002114: 	jmp	.Ltmp3873 # Offset: 8468
.Ltmp3671:
    00002119: 	leaq	DATAat0x33158(%rip), %rdi
    00002120: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8480
    00002125: 	endbr64
.Ltmp3875:
    00002129: 	movq	%rax, %rbp
    0000212c: 	jmp	.Ltmp3874 # Offset: 8492
    0000212e: 	endbr64
    00002132: 	jmp	.Ltmp3875 # Offset: 8498
    00002134: 	endbr64
    00002138: 	jmp	.Ltmp3875 # Offset: 8504
    0000213a: 	endbr64
    0000213e: 	jmp	.Ltmp3875 # Offset: 8510
.Ltmp3874:
    00002140: 	movq	0xd0(%rsp), %rdi
    00002148: 	cmpq	%rbx, %rdi
    0000214b: 	je	.Ltmp3876 # Offset: 8523
.Ltmp3894:
    00002151: 	movq	0xe0(%rsp), %rax
    00002159: 	leaq	0x1(%rax), %rsi
    0000215d: 	callq	_ZdlPvm@PLT # Offset: 8541
    00002162: 	jmp	.Ltmp3876 # Offset: 8546
    00002167: 	endbr64
.Ltmp3878:
    0000216b: 	movq	%rax, %rbp
    0000216e: 	jmp	.Ltmp3877 # Offset: 8558
    00002173: 	endbr64
    00002177: 	jmp	.Ltmp3878 # Offset: 8567
    00002179: 	endbr64
    0000217d: 	movq	%rax, %rbx
    00002180: 	jmp	.Ltmp3879 # Offset: 8576
    00002185: 	endbr64
.Ltmp3883:
    00002189: 	movq	%rax, %rbp
    0000218c: 	jmp	.Ltmp3880 # Offset: 8588
    00002191: 	endbr64
.Ltmp3890:
    00002195: 	movq	%rax, %rbp
    00002198: 	jmp	.Ltmp3881 # Offset: 8600
    0000219d: 	endbr64
.Ltmp3885:
    000021a1: 	movq	%rax, %rbp
    000021a4: 	jmp	.Ltmp3882 # Offset: 8612
    000021a6: 	endbr64
    000021aa: 	jmp	.Ltmp3878 # Offset: 8618
    000021ac: 	endbr64
    000021b0: 	jmp	.Ltmp3883 # Offset: 8624
    000021b2: 	endbr64
    000021b6: 	jmp	.Ltmp3883 # Offset: 8630
    000021b8: 	endbr64
    000021bc: 	movq	%rax, %rbp
    000021bf: 	jmp	.Ltmp3884 # Offset: 8639
    000021c1: 	endbr64
    000021c5: 	jmp	.Ltmp3885 # Offset: 8645
.Ltmp3882:
    000021c7: 	movq	0xd0(%rsp), %rdi
    000021cf: 	cmpq	%rbx, %rdi
    000021d2: 	je	.Ltmp3884 # Offset: 8658
    000021d4: 	movq	0xe0(%rsp), %rax
    000021dc: 	leaq	0x1(%rax), %rsi
    000021e0: 	callq	_ZdlPvm@PLT # Offset: 8672
.Ltmp3884:
    000021e5: 	movq	0x90(%rsp), %rdi
    000021ed: 	leaq	0xa0(%rsp), %rax
    000021f5: 	cmpq	%rax, %rdi
    000021f8: 	je	.Ltmp3886 # Offset: 8696
    000021fa: 	movq	0xa0(%rsp), %rax
    00002202: 	leaq	0x1(%rax), %rsi
    00002206: 	callq	_ZdlPvm@PLT # Offset: 8710
.Ltmp3886:
    0000220b: 	movq	0x70(%rsp), %rdi
    00002210: 	cmpq	0x10(%rsp), %rdi
    00002215: 	je	.Ltmp3881 # Offset: 8725
    00002217: 	movq	0x80(%rsp), %rax
    0000221f: 	leaq	0x1(%rax), %rsi
    00002223: 	callq	_ZdlPvm@PLT # Offset: 8739
.Ltmp3881:
    00002228: 	movq	0x50(%rsp), %rdi
    0000222d: 	cmpq	0x8(%rsp), %rdi
    00002232: 	je	.Ltmp3876 # Offset: 8754
    00002234: 	movq	0x60(%rsp), %rax
    00002239: 	leaq	0x1(%rax), %rsi
    0000223d: 	callq	_ZdlPvm@PLT # Offset: 8765
.Ltmp3876:
    00002242: 	movl	$0x2, %esi
    00002247: 	movq	%r12, %rdi
    0000224a: 	movq	%rbp, %rbx
    0000224d: 	callq	_ZdlPvm@PLT # Offset: 8781
.Ltmp3879:
    00002252: 	movq	0x30(%rsp), %rdi
    00002257: 	cmpq	0x18(%rsp), %rdi
    0000225c: 	je	.Ltmp3887 # Offset: 8796
    0000225e: 	movq	0x40(%rsp), %rax
    00002263: 	leaq	0x1(%rax), %rsi
    00002267: 	callq	_ZdlPvm@PLT # Offset: 8807
.Ltmp3887:
    0000226c: 	movq	%rbx, %rdi
    0000226f: 	callq	_Unwind_Resume@PLT # Offset: 8815
    00002274: 	endbr64
.Ltmp3892:
    00002278: 	movq	%rax, %rbp
    0000227b: 	jmp	.Ltmp3886 # Offset: 8827
    0000227d: 	endbr64
    00002281: 	jmp	.Ltmp3883 # Offset: 8833
    00002286: 	endbr64
    0000228a: 	jmp	.Ltmp3883 # Offset: 8842
    0000228f: 	endbr64
    00002293: 	jmp	.Ltmp3883 # Offset: 8851
    00002298: 	endbr64
    0000229c: 	jmp	.Ltmp3883 # Offset: 8860
    000022a1: 	endbr64
    000022a5: 	jmp	.Ltmp3883 # Offset: 8869
    000022aa: 	endbr64
    000022ae: 	jmp	.Ltmp3885 # Offset: 8878
    000022b3: 	endbr64
    000022b7: 	jmp	.Ltmp3885 # Offset: 8887
    000022bc: 	endbr64
    000022c0: 	jmp	.Ltmp3883 # Offset: 8896
    000022c5: 	endbr64
    000022c9: 	jmp	.Ltmp3883 # Offset: 8905
    000022ce: 	endbr64
    000022d2: 	jmp	.Ltmp3883 # Offset: 8914
    000022d7: 	endbr64
    000022db: 	jmp	.Ltmp3885 # Offset: 8923
    000022e0: 	endbr64
    000022e4: 	jmp	.Ltmp3885 # Offset: 8932
    000022e9: 	endbr64
    000022ed: 	jmp	.Ltmp3878 # Offset: 8941
    000022f2: 	endbr64
    000022f6: 	jmp	.Ltmp3878 # Offset: 8950
    000022fb: 	endbr64
    000022ff: 	jmp	.Ltmp3885 # Offset: 8959
    00002304: 	endbr64
    00002308: 	jmp	.Ltmp3885 # Offset: 8968
    0000230d: 	endbr64
    00002311: 	jmp	.Ltmp3885 # Offset: 8977
    00002316: 	endbr64
    0000231a: 	jmp	.Ltmp3885 # Offset: 8986
    0000231f: 	endbr64
    00002323: 	jmp	.Ltmp3885 # Offset: 8995
    00002328: 	endbr64
    0000232c: 	jmp	.Ltmp3885 # Offset: 9004
    00002331: 	endbr64
    00002335: 	jmp	.Ltmp3878 # Offset: 9013
    0000233a: 	endbr64
    0000233e: 	jmp	.Ltmp3878 # Offset: 9022
    00002343: 	endbr64
    00002347: 	movq	%rax, %rbp
    0000234a: 	jmp	.Ltmp3888 # Offset: 9034
.Ltmp3877:
    0000234c: 	movq	0xd0(%rsp), %rdi
    00002354: 	cmpq	%rbx, %rdi
    00002357: 	je	.Ltmp3888 # Offset: 9047
    00002359: 	movq	0xe0(%rsp), %rax
    00002361: 	leaq	0x1(%rax), %rsi
    00002365: 	callq	_ZdlPvm@PLT # Offset: 9061
.Ltmp3888:
    0000236a: 	movq	0xb0(%rsp), %rdi
    00002372: 	leaq	0xc0(%rsp), %rax
    0000237a: 	cmpq	%rax, %rdi
    0000237d: 	je	.Ltmp3884 # Offset: 9085
    00002383: 	movq	0xc0(%rsp), %rax
    0000238b: 	leaq	0x1(%rax), %rsi
    0000238f: 	callq	_ZdlPvm@PLT # Offset: 9103
    00002394: 	jmp	.Ltmp3884 # Offset: 9108
    00002399: 	endbr64
.Ltmp3891:
    0000239d: 	movq	%rax, %rbp
    000023a0: 	jmp	.Ltmp3889 # Offset: 9120
    000023a5: 	endbr64
    000023a9: 	jmp	.Ltmp3878 # Offset: 9129
    000023ae: 	endbr64
    000023b2: 	jmp	.Ltmp3875 # Offset: 9138
    000023b7: 	endbr64
    000023bb: 	jmp	.Ltmp3875 # Offset: 9147
    000023c0: 	endbr64
    000023c4: 	jmp	.Ltmp3875 # Offset: 9156
    000023c9: 	endbr64
    000023cd: 	jmp	.Ltmp3890 # Offset: 9165
    000023d2: 	endbr64
    000023d6: 	jmp	.Ltmp3891 # Offset: 9174
    000023d8: 	endbr64
    000023dc: 	jmp	.Ltmp3891 # Offset: 9180
    000023de: 	endbr64
    000023e2: 	jmp	.Ltmp3891 # Offset: 9186
    000023e4: 	endbr64
    000023e8: 	jmp	.Ltmp3891 # Offset: 9192
    000023ea: 	endbr64
    000023ee: 	jmp	.Ltmp3891 # Offset: 9198
    000023f0: 	endbr64
    000023f4: 	jmp	.Ltmp3892 # Offset: 9204
    000023f9: 	endbr64
    000023fd: 	jmp	.Ltmp3891 # Offset: 9213
    000023ff: 	endbr64
    00002403: 	jmp	.Ltmp3891 # Offset: 9219
    00002405: 	endbr64
    00002409: 	jmp	.Ltmp3891 # Offset: 9225
    0000240b: 	endbr64
    0000240f: 	jmp	.Ltmp3891 # Offset: 9231
.Ltmp3880:
    00002411: 	movq	0xd0(%rsp), %rdi
    00002419: 	cmpq	%rbx, %rdi
    0000241c: 	je	.Ltmp3886 # Offset: 9244
    00002422: 	movq	0xe0(%rsp), %rax
    0000242a: 	leaq	0x1(%rax), %rsi
    0000242e: 	callq	_ZdlPvm@PLT # Offset: 9262
    00002433: 	jmp	.Ltmp3886 # Offset: 9267
    00002438: 	endbr64
    0000243c: 	jmp	.Ltmp3878 # Offset: 9276
    00002441: 	endbr64
    00002445: 	jmp	.Ltmp3875 # Offset: 9285
    0000244a: 	endbr64
    0000244e: 	jmp	.Ltmp3875 # Offset: 9294
    00002453: 	endbr64
    00002457: 	jmp	.Ltmp3875 # Offset: 9303
    0000245c: 	endbr64
    00002460: 	movq	%rax, %rbp
    00002463: 	jmp	.Ltmp3893 # Offset: 9315
    00002465: 	endbr64
    00002469: 	jmp	.Ltmp3878 # Offset: 9321
    0000246e: 	endbr64
    00002472: 	movq	%rax, %rbp
    00002475: 	jmp	.Ltmp3876 # Offset: 9333
.Ltmp3893:
    0000247a: 	movq	0xd0(%rsp), %rdi
    00002482: 	leaq	0xe0(%rsp), %rax
    0000248a: 	cmpq	%rax, %rdi
    0000248d: 	jne	.Ltmp3894 # Offset: 9357
    00002493: 	jmp	.Ltmp3876 # Offset: 9363
.Ltmp3889:
    00002498: 	movq	0xd0(%rsp), %rdi
    000024a0: 	cmpq	%rbx, %rdi
    000024a3: 	je	.Ltmp3881 # Offset: 9379
    000024a9: 	movq	0xe0(%rsp), %rax
    000024b1: 	leaq	0x1(%rax), %rsi
    000024b5: 	callq	_ZdlPvm@PLT # Offset: 9397
    000024ba: 	jmp	.Ltmp3881 # Offset: 9402
    000024bf: 	endbr64
    000024c3: 	jmp	.Ltmp3878 # Offset: 9411
    000024c8: 	endbr64
    000024cc: 	jmp	.Ltmp3878 # Offset: 9420
    000024d1: 	endbr64
    000024d5: 	jmp	.Ltmp3878 # Offset: 9429
    000024da: 	endbr64
    000024de: 	jmp	.Ltmp3878 # Offset: 9438
    000024e3: 	endbr64
    000024e7: 	jmp	.Ltmp3878 # Offset: 9447
    000024ec: 	endbr64
    000024f0: 	jmp	.Ltmp3878 # Offset: 9456
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIsEvv"

Binary Function "_Z21testOneFunction_equalImPFmPKmimEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 391
  State       : disassembled
  Address     : 0x2b9a0
  Size        : 0x29c
  MaxSize     : 0x2a0
  Offset      : 0x2b9a0
  Section     : .text
  Orc Section : .local.text._Z21testOneFunction_equalImPFmPKmimEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0390:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x331c8(%rip), %r15
    0000000d: 	pushq	%r14
    0000000f: 	movabsq	$-0x8000000000000000, %r14
    00000019: 	pushq	%r13
    0000001b: 	movq	%rdx, %r13
    0000001e: 	pushq	%r12
    00000020: 	movl	%esi, %r12d
    00000023: 	pushq	%rbp
    00000024: 	movq	%rdi, %rbp
    00000027: 	pushq	%rbx
    00000028: 	xorl	%ebx, %ebx
    0000002a: 	subq	$0x28, %rsp
    0000002e: 	movq	%rcx, 0x8(%rsp)
    00000033: 	movq	%fs:0x28, %rax
    0000003c: 	movq	%rax, 0x18(%rsp)
    00000041: 	xorl	%eax, %eax
    00000043: 	callq	clock@PLT # Offset: 67
    00000048: 	movsd	init_value(%rip), %xmm0
    00000050: 	movq	%rax, start_time(%rip)
    00000057: 	movl	iterations(%rip), %eax
    0000005d: 	testl	%eax, %eax
    0000005f: 	jle	.Ltmp3895 # Offset: 95
    00000065: 	nopl	(%rax) # Size: 3
.Ltmp3901:
    00000068: 	comisd	DATAat0x335c0(%rip), %xmm0
    00000070: 	jae	.Ltmp3896 # Offset: 112
.Ltmp3899:
    00000072: 	cvttsd2si	%xmm0, %rdx
.Ltmp3900:
    00000077: 	movl	%r12d, %esi
    0000007a: 	movq	%rbp, %rdi
    0000007d: 	callq	*%r13 # Offset: 125
    00000080: 	movsd	init_value(%rip), %xmm0
    00000088: 	comisd	DATAat0x335c0(%rip), %xmm0
    00000090: 	jae	.Ltmp3897 # Offset: 144
    00000096: 	cvttsd2si	%xmm0, %rdx
.Ltmp3909:
    0000009b: 	cmpq	%rdx, %rax
    0000009e: 	je	.Ltmp3898 # Offset: 158
    000000a0: 	movq	0x8(%rsp), %rax
    000000a5: 	movq	%r15, %rsi
    000000a8: 	movl	$0x1, %edi
    000000ad: 	addl	$0x1, %ebx
    000000b0: 	movq	(%rax), %rdx
    000000b3: 	xorl	%eax, %eax
    000000b5: 	callq	__printf_chk@PLT # Offset: 181
    000000ba: 	cmpl	%ebx, iterations(%rip)
    000000c0: 	jle	.Ltmp3895 # Offset: 192
    000000c2: 	movsd	init_value(%rip), %xmm0
    000000ca: 	comisd	DATAat0x335c0(%rip), %xmm0
    000000d2: 	jb	.Ltmp3899 # Offset: 210
.Ltmp3896:
    000000d4: 	subsd	DATAat0x335c0(%rip), %xmm0
    000000dc: 	cvttsd2si	%xmm0, %rdx
    000000e1: 	xorq	%r14, %rdx
    000000e4: 	jmp	.Ltmp3900 # Offset: 228
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3898:
    000000f0: 	addl	$0x1, %ebx
    000000f3: 	cmpl	%ebx, iterations(%rip)
    000000f9: 	jg	.Ltmp3901 # Offset: 249
.Ltmp3895:
    000000ff: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000106: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000010d: 	subq	$0x20, %rax
    00000111: 	cmpq	%rax, %rbx
    00000114: 	je	.Ltmp3902 # Offset: 276
    0000011a: 	movq	0x8(%rsp), %rax
    0000011f: 	leaq	0x10(%rbx), %rdi
    00000123: 	movq	%rdi, (%rbx)
    00000126: 	movq	(%rax), %rbp
    00000129: 	movq	0x8(%rax), %r12
    0000012d: 	movq	%rbp, %rax
    00000130: 	addq	%r12, %rax
    00000133: 	je	.Ltmp3903 # Offset: 307
    00000135: 	testq	%rbp, %rbp
    00000138: 	je	.Ltmp3904 # Offset: 312
.Ltmp3903:
    0000013e: 	movq	%r12, 0x10(%rsp)
    00000143: 	cmpq	$0xf, %r12
    00000147: 	ja	.Ltmp3905 # Offset: 327
    0000014d: 	cmpq	$0x1, %r12
    00000151: 	jne	.Ltmp3906 # Offset: 337
    00000157: 	movzbl	(%rbp), %eax
    0000015b: 	movb	%al, 0x10(%rbx)
.Ltmp3910:
    0000015e: 	movq	%r12, 0x8(%rbx)
    00000162: 	movb	$0x0, (%rdi,%r12)
    00000167: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000016e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000175: 	addq	$0x20, %rax
    00000179: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000180: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000187: 	je	.Ltmp3907 # Offset: 391
.Ltmp3911:
    0000018d: 	movq	-0x20(%rax), %rbp
    00000191: 	callq	clock@PLT # Offset: 401
    00000196: 	movq	%rax, end_time(%rip)
    0000019d: 	movq	0x18(%rsp), %rdx
    000001a2: 	subq	%fs:0x28, %rdx
    000001ab: 	jne	.Ltmp3908 # Offset: 427
    000001b1: 	subq	start_time(%rip), %rax
    000001b8: 	pxor	%xmm0, %xmm0
    000001bc: 	movq	%rbp, %rdi
    000001bf: 	cvtsi2sd	%rax, %xmm0
    000001c4: 	divsd	DATAat0x335b0(%rip), %xmm0
    000001cc: 	addq	$0x28, %rsp
    000001d0: 	popq	%rbx
    000001d1: 	popq	%rbp
    000001d2: 	popq	%r12
    000001d4: 	popq	%r13
    000001d6: 	popq	%r14
    000001d8: 	popq	%r15
    000001da: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 474
    000001df: 	nop # Size: 1
.Ltmp3897:
    000001e0: 	movapd	%xmm0, %xmm1
    000001e4: 	subsd	DATAat0x335c0(%rip), %xmm1
    000001ec: 	cvttsd2si	%xmm1, %rdx
    000001f1: 	xorq	%r14, %rdx
    000001f4: 	jmp	.Ltmp3909 # Offset: 500
    000001f9: 	nopl	(%rax) # Size: 7
.Ltmp3905:
    00000200: 	movq	%rbx, %rdi
    00000203: 	leaq	0x10(%rsp), %rsi
    00000208: 	xorl	%edx, %edx
    0000020a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 522
    0000020f: 	movq	%rax, (%rbx)
    00000212: 	movq	%rax, %rdi
    00000215: 	movq	0x10(%rsp), %rax
    0000021a: 	movq	%rax, 0x10(%rbx)
.Ltmp3912:
    0000021e: 	movq	%r12, %rdx
    00000221: 	movq	%rbp, %rsi
    00000224: 	callq	memcpy@PLT # Offset: 548
    00000229: 	movq	0x10(%rsp), %r12
    0000022e: 	movq	(%rbx), %rdi
    00000231: 	jmp	.Ltmp3910 # Offset: 561
    00000236: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3902:
    00000240: 	movq	0x8(%rsp), %rsi
    00000245: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000024c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 588
    00000251: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000258: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000025f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000266: 	jne	.Ltmp3911 # Offset: 614
.Ltmp3907:
    0000026c: 	movq	-0x8(%rdx), %rax
    00000270: 	addq	$0x200, %rax
    00000276: 	jmp	.Ltmp3911 # Offset: 630
    0000027b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3906:
    00000280: 	testq	%r12, %r12
    00000283: 	je	.Ltmp3910 # Offset: 643
    00000289: 	jmp	.Ltmp3912 # Offset: 649
.Ltmp3908:
    0000028b: 	callq	__stack_chk_fail@PLT # Offset: 651
.Ltmp3904:
    00000290: 	leaq	DATAat0x33158(%rip), %rdi
    00000297: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 663
DWARF CFI Instructions:
    <empty>
End of Function "_Z21testOneFunction_equalImPFmPKmimEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeImEvv" after disassembly {
  Number      : 392
  State       : disassembled
  Address     : 0x2bc40
  Size        : 0x2435
  MaxSize     : 0x2440
  Offset      : 0x2bc40
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeImEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0391:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	$0xfa00, %edi
    0000000b: 	pushq	%r14
    0000000d: 	pushq	%r13
    0000000f: 	pushq	%r12
    00000011: 	pushq	%rbp
    00000012: 	pushq	%rbx
    00000013: 	subq	$0x108, %rsp
    0000001a: 	movq	%fs:0x28, %rax
    00000023: 	movq	%rax, 0xf8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	leaq	0x40(%rsp), %rax
    00000032: 	movb	$0x0, 0x48(%rsp)
    00000037: 	movq	%rax, 0x18(%rsp)
    0000003c: 	movq	%rax, 0x30(%rsp)
    00000041: 	movabsq	$0x745f3436746e6975, %rax
    0000004b: 	movq	%rax, 0x40(%rsp)
    00000050: 	movq	$0x8, 0x38(%rsp)
    00000059: 	callq	_Znam@PLT # Offset: 89
    0000005e: 	movsd	DATAat0x335c0(%rip), %xmm1
    00000066: 	movsd	init_value(%rip), %xmm0
    0000006e: 	movq	%rax, %r12
    00000071: 	comisd	%xmm1, %xmm0
    00000075: 	jae	.Ltmp3913 # Offset: 117
    0000007b: 	cvttsd2si	%xmm0, %rax
.Ltmp4058:
    00000080: 	movq	%rax, %xmm0
    00000085: 	leaq	0xfa00(%r12), %rdx
    0000008d: 	movq	%r12, %rax
    00000090: 	punpcklqdq	%xmm0, %xmm0
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp3914:
    00000098: 	movups	%xmm0, (%rax)
    0000009b: 	addq	$0x10, %rax
    0000009f: 	cmpq	%rax, %rdx
    000000a2: 	jne	.Ltmp3914 # Offset: 162
    000000a4: 	leaq	0xd0(%rsp), %rbp
    000000ac: 	leaq	0x30(%rsp), %r13
    000000b1: 	leaq	DATAat0x331d8(%rip), %rdx
    000000b8: 	movq	%r13, %rsi
    000000bb: 	movq	%rbp, %rdi
    000000be: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 190
    000000c3: 	movq	%rbp, %rcx
    000000c6: 	leaq	_Z8bit_and1ImET_PKS0_iS0_(%rip), %rdx
    000000cd: 	movl	$0x1f40, %esi
    000000d2: 	movq	%r12, %rdi
    000000d5: 	callq	_Z21testOneFunction_equalImPFmPKmimEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 213
    000000da: 	movq	0xd0(%rsp), %rdi
    000000e2: 	leaq	0xe0(%rsp), %rbx
    000000ea: 	cmpq	%rbx, %rdi
    000000ed: 	je	.Ltmp3915 # Offset: 237
    000000ef: 	movq	0xe0(%rsp), %rax
    000000f7: 	leaq	0x1(%rax), %rsi
    000000fb: 	callq	_ZdlPvm@PLT # Offset: 251
.Ltmp3915:
    00000100: 	movq	0x30(%rsp), %r15
    00000105: 	movq	0x38(%rsp), %r14
    0000010a: 	movq	%rbx, 0xd0(%rsp)
    00000112: 	movq	%r15, %rax
    00000115: 	addq	%r14, %rax
    00000118: 	je	.Ltmp3916 # Offset: 280
    0000011a: 	testq	%r15, %r15
    0000011d: 	je	.Ltmp3917 # Offset: 285
.Ltmp3916:
    00000123: 	movq	%r14, 0x28(%rsp)
    00000128: 	cmpq	$0xf, %r14
    0000012c: 	ja	.Ltmp3918 # Offset: 300
    00000132: 	cmpq	$0x1, %r14
    00000136: 	jne	.Ltmp3919 # Offset: 310
    0000013c: 	movzbl	(%r15), %eax
    00000140: 	movb	%al, 0xe0(%rsp)
    00000147: 	movq	%rbx, %rax
.Ltmp4060:
    0000014a: 	movq	%r14, 0xd8(%rsp)
    00000152: 	movb	$0x0, (%rax,%r14)
    00000157: 	movabsq	$0x3fffffffffffffff, %rax
    00000161: 	subq	0xd8(%rsp), %rax
    00000169: 	cmpq	$0x11, %rax
    0000016d: 	jbe	.Ltmp3920 # Offset: 365
    00000173: 	movl	$0x12, %edx
    00000178: 	leaq	DATAat0x331eb(%rip), %rsi
    0000017f: 	movq	%rbp, %rdi
    00000182: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 386
    00000187: 	movq	%rbp, %rcx
    0000018a: 	leaq	_Z8bit_and2ImET_PKS0_iS0_(%rip), %rdx
    00000191: 	movl	$0x1f40, %esi
    00000196: 	movq	%r12, %rdi
    00000199: 	callq	_Z21testOneFunction_equalImPFmPKmimEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 409
    0000019e: 	movq	0xd0(%rsp), %rdi
    000001a6: 	cmpq	%rbx, %rdi
    000001a9: 	je	.Ltmp3921 # Offset: 425
    000001ab: 	movq	0xe0(%rsp), %rax
    000001b3: 	leaq	0x1(%rax), %rsi
    000001b7: 	callq	_ZdlPvm@PLT # Offset: 439
.Ltmp3921:
    000001bc: 	leaq	DATAat0x331fe(%rip), %rdx
    000001c3: 	movq	%r13, %rsi
    000001c6: 	movq	%rbp, %rdi
    000001c9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 457
    000001ce: 	movq	%rbp, %rcx
    000001d1: 	leaq	_Z8bit_and3ImET_PKS0_iS0_(%rip), %rdx
    000001d8: 	movl	$0x1f40, %esi
    000001dd: 	movq	%r12, %rdi
    000001e0: 	callq	_Z21testOneFunction_equalImPFmPKmimEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 480
    000001e5: 	movq	0xd0(%rsp), %rdi
    000001ed: 	cmpq	%rbx, %rdi
    000001f0: 	je	.Ltmp3922 # Offset: 496
    000001f2: 	movq	0xe0(%rsp), %rax
    000001fa: 	leaq	0x1(%rax), %rsi
    000001fe: 	callq	_ZdlPvm@PLT # Offset: 510
.Ltmp3922:
    00000203: 	movq	0x30(%rsp), %r15
    00000208: 	movq	0x38(%rsp), %r14
    0000020d: 	movq	%rbx, 0xd0(%rsp)
    00000215: 	movq	%r15, %rax
    00000218: 	addq	%r14, %rax
    0000021b: 	je	.Ltmp3923 # Offset: 539
    0000021d: 	testq	%r15, %r15
    00000220: 	je	.Ltmp3924 # Offset: 544
.Ltmp3923:
    00000226: 	movq	%r14, 0x28(%rsp)
    0000022b: 	cmpq	$0xf, %r14
    0000022f: 	ja	.Ltmp3925 # Offset: 559
    00000235: 	cmpq	$0x1, %r14
    00000239: 	jne	.Ltmp3926 # Offset: 569
    0000023f: 	movzbl	(%r15), %eax
    00000243: 	movb	%al, 0xe0(%rsp)
    0000024a: 	movq	%rbx, %rax
.Ltmp4062:
    0000024d: 	movq	%r14, 0xd8(%rsp)
    00000255: 	movb	$0x0, (%rax,%r14)
    0000025a: 	movabsq	$0x3fffffffffffffff, %rax
    00000264: 	subq	0xd8(%rsp), %rax
    0000026c: 	cmpq	$0x11, %rax
    00000270: 	jbe	.Ltmp3927 # Offset: 624
    00000276: 	movl	$0x12, %edx
    0000027b: 	leaq	DATAat0x33211(%rip), %rsi
    00000282: 	movq	%rbp, %rdi
    00000285: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 645
    0000028a: 	movq	%rbp, %rcx
    0000028d: 	leaq	_Z8bit_and4ImET_PKS0_iS0_(%rip), %rdx
    00000294: 	movl	$0x1f40, %esi
    00000299: 	movq	%r12, %rdi
    0000029c: 	callq	_Z21testOneFunction_equalImPFmPKmimEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 668
    000002a1: 	movq	0xd0(%rsp), %rdi
    000002a9: 	cmpq	%rbx, %rdi
    000002ac: 	je	.Ltmp3928 # Offset: 684
    000002ae: 	movq	0xe0(%rsp), %rax
    000002b6: 	leaq	0x1(%rax), %rsi
    000002ba: 	callq	_ZdlPvm@PLT # Offset: 698
.Ltmp3928:
    000002bf: 	leaq	DATAat0x33224(%rip), %rdx
    000002c6: 	movq	%r13, %rsi
    000002c9: 	movq	%rbp, %rdi
    000002cc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 716
    000002d1: 	movq	%rbp, %rcx
    000002d4: 	leaq	_Z8bit_and5ImET_PKS0_iS0_(%rip), %rdx
    000002db: 	movl	$0x1f40, %esi
    000002e0: 	movq	%r12, %rdi
    000002e3: 	callq	_Z21testOneFunction_equalImPFmPKmimEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 739
    000002e8: 	movq	0xd0(%rsp), %rdi
    000002f0: 	cmpq	%rbx, %rdi
    000002f3: 	je	.Ltmp3929 # Offset: 755
    000002f5: 	movq	0xe0(%rsp), %rax
    000002fd: 	leaq	0x1(%rax), %rsi
    00000301: 	callq	_ZdlPvm@PLT # Offset: 769
.Ltmp3929:
    00000306: 	movq	0x30(%rsp), %r15
    0000030b: 	movq	0x38(%rsp), %r14
    00000310: 	movq	%rbx, 0xd0(%rsp)
    00000318: 	movq	%r15, %rax
    0000031b: 	addq	%r14, %rax
    0000031e: 	je	.Ltmp3930 # Offset: 798
    00000320: 	testq	%r15, %r15
    00000323: 	je	.Ltmp3931 # Offset: 803
.Ltmp3930:
    00000329: 	movq	%r14, 0x28(%rsp)
    0000032e: 	cmpq	$0xf, %r14
    00000332: 	ja	.Ltmp3932 # Offset: 818
    00000338: 	cmpq	$0x1, %r14
    0000033c: 	jne	.Ltmp3933 # Offset: 828
    00000342: 	movzbl	(%r15), %eax
    00000346: 	movb	%al, 0xe0(%rsp)
    0000034d: 	movq	%rbx, %rax
.Ltmp4066:
    00000350: 	movq	%r14, 0xd8(%rsp)
    00000358: 	movb	$0x0, (%rax,%r14)
    0000035d: 	movabsq	$0x3fffffffffffffff, %rax
    00000367: 	subq	0xd8(%rsp), %rax
    0000036f: 	cmpq	$0x11, %rax
    00000373: 	jbe	.Ltmp3934 # Offset: 883
    00000379: 	movl	$0x12, %edx
    0000037e: 	leaq	DATAat0x33237(%rip), %rsi
    00000385: 	movq	%rbp, %rdi
    00000388: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 904
    0000038d: 	movq	%rbp, %rcx
    00000390: 	leaq	_Z8bit_and6ImET_PKS0_iS0_(%rip), %rdx
    00000397: 	movl	$0x1f40, %esi
    0000039c: 	movq	%r12, %rdi
    0000039f: 	callq	_Z21testOneFunction_equalImPFmPKmimEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 927
    000003a4: 	movq	0xd0(%rsp), %rdi
    000003ac: 	cmpq	%rbx, %rdi
    000003af: 	je	.Ltmp3935 # Offset: 943
    000003b1: 	movq	0xe0(%rsp), %rax
    000003b9: 	leaq	0x1(%rax), %rsi
    000003bd: 	callq	_ZdlPvm@PLT # Offset: 957
.Ltmp3935:
    000003c2: 	movq	0x30(%rsp), %r15
    000003c7: 	movq	0x38(%rsp), %r14
    000003cc: 	movq	%rbx, 0xd0(%rsp)
    000003d4: 	movq	%r15, %rax
    000003d7: 	addq	%r14, %rax
    000003da: 	je	.Ltmp3936 # Offset: 986
    000003dc: 	testq	%r15, %r15
    000003df: 	je	.Ltmp3937 # Offset: 991
.Ltmp3936:
    000003e5: 	movq	%r14, 0x28(%rsp)
    000003ea: 	cmpq	$0xf, %r14
    000003ee: 	ja	.Ltmp3938 # Offset: 1006
    000003f4: 	cmpq	$0x1, %r14
    000003f8: 	jne	.Ltmp3939 # Offset: 1016
    000003fe: 	movzbl	(%r15), %eax
    00000402: 	movb	%al, 0xe0(%rsp)
    00000409: 	movq	%rbx, %rax
.Ltmp4064:
    0000040c: 	movq	%r14, 0xd8(%rsp)
    00000414: 	movb	$0x0, (%rax,%r14)
    00000419: 	movabsq	$0x3fffffffffffffff, %rax
    00000423: 	subq	0xd8(%rsp), %rax
    0000042b: 	cmpq	$0x11, %rax
    0000042f: 	jbe	.Ltmp3940 # Offset: 1071
    00000435: 	movl	$0x12, %edx
    0000043a: 	leaq	DATAat0x3324a(%rip), %rsi
    00000441: 	movq	%rbp, %rdi
    00000444: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1092
    00000449: 	movq	%rbp, %rcx
    0000044c: 	leaq	_Z8bit_and7ImET_PKS0_iS0_(%rip), %rdx
    00000453: 	movl	$0x1f40, %esi
    00000458: 	movq	%r12, %rdi
    0000045b: 	callq	_Z21testOneFunction_equalImPFmPKmimEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1115
    00000460: 	movq	0xd0(%rsp), %rdi
    00000468: 	cmpq	%rbx, %rdi
    0000046b: 	je	.Ltmp3941 # Offset: 1131
    0000046d: 	movq	0xe0(%rsp), %rax
    00000475: 	leaq	0x1(%rax), %rsi
    00000479: 	callq	_ZdlPvm@PLT # Offset: 1145
.Ltmp3941:
    0000047e: 	leaq	DATAat0x3325d(%rip), %rdx
    00000485: 	movq	%r13, %rsi
    00000488: 	movq	%rbp, %rdi
    0000048b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1163
    00000490: 	movq	%rbp, %rcx
    00000493: 	leaq	_Z8bit_and8ImET_PKS0_iS0_(%rip), %rdx
    0000049a: 	movl	$0x1f40, %esi
    0000049f: 	movq	%r12, %rdi
    000004a2: 	callq	_Z21testOneFunction_equalImPFmPKmimEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1186
    000004a7: 	movq	0xd0(%rsp), %rdi
    000004af: 	cmpq	%rbx, %rdi
    000004b2: 	je	.Ltmp3942 # Offset: 1202
    000004b4: 	movq	0xe0(%rsp), %rax
    000004bc: 	leaq	0x1(%rax), %rsi
    000004c0: 	callq	_ZdlPvm@PLT # Offset: 1216
.Ltmp3942:
    000004c5: 	leaq	0x50(%rsp), %rdi
    000004ca: 	leaq	DATAat0x33270(%rip), %rdx
    000004d1: 	movq	%r13, %rsi
    000004d4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1236
    000004d9: 	movl	iterations(%rip), %esi
    000004df: 	movq	0x50(%rsp), %rdi
    000004e4: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 1252
    000004e9: 	movq	0x30(%rsp), %r15
    000004ee: 	movq	0x38(%rsp), %r14
    000004f3: 	movq	%rbx, 0xd0(%rsp)
    000004fb: 	movq	%r15, %rax
    000004fe: 	addq	%r14, %rax
    00000501: 	je	.Ltmp3943 # Offset: 1281
    00000503: 	testq	%r15, %r15
    00000506: 	je	.Ltmp3944 # Offset: 1286
.Ltmp3943:
    0000050c: 	movq	%r14, 0x28(%rsp)
    00000511: 	cmpq	$0xf, %r14
    00000515: 	ja	.Ltmp3945 # Offset: 1301
    0000051b: 	cmpq	$0x1, %r14
    0000051f: 	jne	.Ltmp3946 # Offset: 1311
    00000525: 	movzbl	(%r15), %eax
    00000529: 	movb	%al, 0xe0(%rsp)
    00000530: 	movq	%rbx, %rax
.Ltmp4070:
    00000533: 	movq	%r14, 0xd8(%rsp)
    0000053b: 	movb	$0x0, (%rax,%r14)
    00000540: 	movabsq	$0x3fffffffffffffff, %rax
    0000054a: 	subq	0xd8(%rsp), %rax
    00000552: 	cmpq	$0x10, %rax
    00000556: 	jbe	.Ltmp3947 # Offset: 1366
    0000055c: 	movl	$0x11, %edx
    00000561: 	leaq	DATAat0x33282(%rip), %rsi
    00000568: 	movq	%rbp, %rdi
    0000056b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1387
    00000570: 	movq	%rbp, %rcx
    00000573: 	leaq	_Z7bit_or1ImET_PKS0_iS0_(%rip), %rdx
    0000057a: 	movl	$0x1f40, %esi
    0000057f: 	movq	%r12, %rdi
    00000582: 	callq	_Z21testOneFunction_equalImPFmPKmimEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1410
    00000587: 	movq	0xd0(%rsp), %rdi
    0000058f: 	cmpq	%rbx, %rdi
    00000592: 	je	.Ltmp3948 # Offset: 1426
    00000594: 	movq	0xe0(%rsp), %rax
    0000059c: 	leaq	0x1(%rax), %rsi
    000005a0: 	callq	_ZdlPvm@PLT # Offset: 1440
.Ltmp3948:
    000005a5: 	movq	0x30(%rsp), %r15
    000005aa: 	movq	0x38(%rsp), %r14
    000005af: 	movq	%rbx, 0xd0(%rsp)
    000005b7: 	movq	%r15, %rax
    000005ba: 	addq	%r14, %rax
    000005bd: 	je	.Ltmp3949 # Offset: 1469
    000005bf: 	testq	%r15, %r15
    000005c2: 	je	.Ltmp3950 # Offset: 1474
.Ltmp3949:
    000005c8: 	movq	%r14, 0x28(%rsp)
    000005cd: 	cmpq	$0xf, %r14
    000005d1: 	ja	.Ltmp3951 # Offset: 1489
    000005d7: 	cmpq	$0x1, %r14
    000005db: 	jne	.Ltmp3952 # Offset: 1499
    000005e1: 	movzbl	(%r15), %eax
    000005e5: 	movb	%al, 0xe0(%rsp)
    000005ec: 	movq	%rbx, %rax
.Ltmp4068:
    000005ef: 	movq	%r14, 0xd8(%rsp)
    000005f7: 	movb	$0x0, (%rax,%r14)
    000005fc: 	movabsq	$0x3fffffffffffffff, %rax
    00000606: 	subq	0xd8(%rsp), %rax
    0000060e: 	cmpq	$0x10, %rax
    00000612: 	jbe	.Ltmp3953 # Offset: 1554
    00000618: 	movl	$0x11, %edx
    0000061d: 	leaq	DATAat0x33294(%rip), %rsi
    00000624: 	movq	%rbp, %rdi
    00000627: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1575
    0000062c: 	movq	%rbp, %rcx
    0000062f: 	leaq	_Z7bit_or2ImET_PKS0_iS0_(%rip), %rdx
    00000636: 	movl	$0x1f40, %esi
    0000063b: 	movq	%r12, %rdi
    0000063e: 	callq	_Z21testOneFunction_equalImPFmPKmimEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1598
    00000643: 	movq	0xd0(%rsp), %rdi
    0000064b: 	cmpq	%rbx, %rdi
    0000064e: 	je	.Ltmp3954 # Offset: 1614
    00000650: 	movq	0xe0(%rsp), %rax
    00000658: 	leaq	0x1(%rax), %rsi
    0000065c: 	callq	_ZdlPvm@PLT # Offset: 1628
.Ltmp3954:
    00000661: 	leaq	DATAat0x332a6(%rip), %rdx
    00000668: 	movq	%r13, %rsi
    0000066b: 	movq	%rbp, %rdi
    0000066e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1646
    00000673: 	movq	%rbp, %rcx
    00000676: 	leaq	_Z7bit_or3ImET_PKS0_iS0_(%rip), %rdx
    0000067d: 	movl	$0x1f40, %esi
    00000682: 	movq	%r12, %rdi
    00000685: 	callq	_Z21testOneFunction_equalImPFmPKmimEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1669
    0000068a: 	movq	0xd0(%rsp), %rdi
    00000692: 	cmpq	%rbx, %rdi
    00000695: 	je	.Ltmp3955 # Offset: 1685
    00000697: 	movq	0xe0(%rsp), %rax
    0000069f: 	leaq	0x1(%rax), %rsi
    000006a3: 	callq	_ZdlPvm@PLT # Offset: 1699
.Ltmp3955:
    000006a8: 	leaq	DATAat0x332b8(%rip), %rdx
    000006af: 	movq	%r13, %rsi
    000006b2: 	movq	%rbp, %rdi
    000006b5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1717
    000006ba: 	movq	%rbp, %rcx
    000006bd: 	leaq	_Z7bit_or4ImET_PKS0_iS0_(%rip), %rdx
    000006c4: 	movl	$0x1f40, %esi
    000006c9: 	movq	%r12, %rdi
    000006cc: 	callq	_Z21testOneFunction_equalImPFmPKmimEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1740
    000006d1: 	movq	0xd0(%rsp), %rdi
    000006d9: 	cmpq	%rbx, %rdi
    000006dc: 	je	.Ltmp3956 # Offset: 1756
    000006de: 	movq	0xe0(%rsp), %rax
    000006e6: 	leaq	0x1(%rax), %rsi
    000006ea: 	callq	_ZdlPvm@PLT # Offset: 1770
.Ltmp3956:
    000006ef: 	leaq	DATAat0x332ca(%rip), %rdx
    000006f6: 	movq	%r13, %rsi
    000006f9: 	movq	%rbp, %rdi
    000006fc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1788
    00000701: 	movq	%rbp, %rcx
    00000704: 	leaq	_Z7bit_or5ImET_PKS0_iS0_(%rip), %rdx
    0000070b: 	movl	$0x1f40, %esi
    00000710: 	movq	%r12, %rdi
    00000713: 	callq	_Z21testOneFunction_equalImPFmPKmimEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1811
    00000718: 	movq	0xd0(%rsp), %rdi
    00000720: 	cmpq	%rbx, %rdi
    00000723: 	je	.Ltmp3957 # Offset: 1827
    00000725: 	movq	0xe0(%rsp), %rax
    0000072d: 	leaq	0x1(%rax), %rsi
    00000731: 	callq	_ZdlPvm@PLT # Offset: 1841
.Ltmp3957:
    00000736: 	movq	0x30(%rsp), %r15
    0000073b: 	movq	0x38(%rsp), %r14
    00000740: 	movq	%rbx, 0xd0(%rsp)
    00000748: 	movq	%r15, %rax
    0000074b: 	addq	%r14, %rax
    0000074e: 	je	.Ltmp3958 # Offset: 1870
    00000750: 	testq	%r15, %r15
    00000753: 	je	.Ltmp3959 # Offset: 1875
.Ltmp3958:
    00000759: 	movq	%r14, 0x28(%rsp)
    0000075e: 	cmpq	$0xf, %r14
    00000762: 	ja	.Ltmp3960 # Offset: 1890
    00000768: 	cmpq	$0x1, %r14
    0000076c: 	jne	.Ltmp3961 # Offset: 1900
    00000772: 	movzbl	(%r15), %eax
    00000776: 	movb	%al, 0xe0(%rsp)
    0000077d: 	movq	%rbx, %rax
.Ltmp4076:
    00000780: 	movq	%r14, 0xd8(%rsp)
    00000788: 	movb	$0x0, (%rax,%r14)
    0000078d: 	movabsq	$0x3fffffffffffffff, %rax
    00000797: 	subq	0xd8(%rsp), %rax
    0000079f: 	cmpq	$0x10, %rax
    000007a3: 	jbe	.Ltmp3962 # Offset: 1955
    000007a9: 	movl	$0x11, %edx
    000007ae: 	leaq	DATAat0x332dc(%rip), %rsi
    000007b5: 	movq	%rbp, %rdi
    000007b8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1976
    000007bd: 	movq	%rbp, %rcx
    000007c0: 	leaq	_Z7bit_or6ImET_PKS0_iS0_(%rip), %rdx
    000007c7: 	movl	$0x1f40, %esi
    000007cc: 	movq	%r12, %rdi
    000007cf: 	callq	_Z21testOneFunction_equalImPFmPKmimEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1999
    000007d4: 	movq	0xd0(%rsp), %rdi
    000007dc: 	cmpq	%rbx, %rdi
    000007df: 	je	.Ltmp3963 # Offset: 2015
    000007e1: 	movq	0xe0(%rsp), %rax
    000007e9: 	leaq	0x1(%rax), %rsi
    000007ed: 	callq	_ZdlPvm@PLT # Offset: 2029
.Ltmp3963:
    000007f2: 	movq	0x30(%rsp), %r15
    000007f7: 	movq	0x38(%rsp), %r14
    000007fc: 	movq	%rbx, 0xd0(%rsp)
    00000804: 	movq	%r15, %rax
    00000807: 	addq	%r14, %rax
    0000080a: 	je	.Ltmp3964 # Offset: 2058
    0000080c: 	testq	%r15, %r15
    0000080f: 	je	.Ltmp3965 # Offset: 2063
.Ltmp3964:
    00000815: 	movq	%r14, 0x28(%rsp)
    0000081a: 	cmpq	$0xf, %r14
    0000081e: 	ja	.Ltmp3966 # Offset: 2078
    00000824: 	cmpq	$0x1, %r14
    00000828: 	jne	.Ltmp3967 # Offset: 2088
    0000082e: 	movzbl	(%r15), %eax
    00000832: 	movb	%al, 0xe0(%rsp)
    00000839: 	movq	%rbx, %rax
.Ltmp4074:
    0000083c: 	movq	%r14, 0xd8(%rsp)
    00000844: 	movb	$0x0, (%rax,%r14)
    00000849: 	movabsq	$0x3fffffffffffffff, %rax
    00000853: 	subq	0xd8(%rsp), %rax
    0000085b: 	cmpq	$0x10, %rax
    0000085f: 	jbe	.Ltmp3968 # Offset: 2143
    00000865: 	movl	$0x11, %edx
    0000086a: 	leaq	DATAat0x332ee(%rip), %rsi
    00000871: 	movq	%rbp, %rdi
    00000874: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2164
    00000879: 	movq	%rbp, %rcx
    0000087c: 	leaq	_Z7bit_or7ImET_PKS0_iS0_(%rip), %rdx
    00000883: 	movl	$0x1f40, %esi
    00000888: 	movq	%r12, %rdi
    0000088b: 	callq	_Z21testOneFunction_equalImPFmPKmimEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2187
    00000890: 	movq	0xd0(%rsp), %rdi
    00000898: 	cmpq	%rbx, %rdi
    0000089b: 	je	.Ltmp3969 # Offset: 2203
    0000089d: 	movq	0xe0(%rsp), %rax
    000008a5: 	leaq	0x1(%rax), %rsi
    000008a9: 	callq	_ZdlPvm@PLT # Offset: 2217
.Ltmp3969:
    000008ae: 	movq	0x30(%rsp), %r15
    000008b3: 	movq	0x38(%rsp), %r14
    000008b8: 	movq	%rbx, 0xd0(%rsp)
    000008c0: 	movq	%r15, %rax
    000008c3: 	addq	%r14, %rax
    000008c6: 	je	.Ltmp3970 # Offset: 2246
    000008c8: 	testq	%r15, %r15
    000008cb: 	je	.Ltmp3971 # Offset: 2251
.Ltmp3970:
    000008d1: 	movq	%r14, 0x28(%rsp)
    000008d6: 	cmpq	$0xf, %r14
    000008da: 	ja	.Ltmp3972 # Offset: 2266
    000008e0: 	cmpq	$0x1, %r14
    000008e4: 	jne	.Ltmp3973 # Offset: 2276
    000008ea: 	movzbl	(%r15), %eax
    000008ee: 	movb	%al, 0xe0(%rsp)
    000008f5: 	movq	%rbx, %rax
.Ltmp4072:
    000008f8: 	movq	%r14, 0xd8(%rsp)
    00000900: 	movb	$0x0, (%rax,%r14)
    00000905: 	movabsq	$0x3fffffffffffffff, %rax
    0000090f: 	subq	0xd8(%rsp), %rax
    00000917: 	cmpq	$0x10, %rax
    0000091b: 	jbe	.Ltmp3974 # Offset: 2331
    00000921: 	movl	$0x11, %edx
    00000926: 	leaq	DATAat0x33300(%rip), %rsi
    0000092d: 	movq	%rbp, %rdi
    00000930: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2352
    00000935: 	movq	%rbp, %rcx
    00000938: 	leaq	_Z7bit_or8ImET_PKS0_iS0_(%rip), %rdx
    0000093f: 	movl	$0x1f40, %esi
    00000944: 	movq	%r12, %rdi
    00000947: 	callq	_Z21testOneFunction_equalImPFmPKmimEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2375
    0000094c: 	movq	0xd0(%rsp), %rdi
    00000954: 	cmpq	%rbx, %rdi
    00000957: 	je	.Ltmp3975 # Offset: 2391
    00000959: 	movq	0xe0(%rsp), %rax
    00000961: 	leaq	0x1(%rax), %rsi
    00000965: 	callq	_ZdlPvm@PLT # Offset: 2405
.Ltmp3975:
    0000096a: 	movq	0x30(%rsp), %r15
    0000096f: 	leaq	0x80(%rsp), %rax
    00000977: 	movq	0x38(%rsp), %r14
    0000097c: 	movq	%rax, 0x8(%rsp)
    00000981: 	movq	%rax, 0x70(%rsp)
    00000986: 	movq	%r15, %rax
    00000989: 	addq	%r14, %rax
    0000098c: 	je	.Ltmp3976 # Offset: 2444
    0000098e: 	testq	%r15, %r15
    00000991: 	je	.Ltmp3977 # Offset: 2449
.Ltmp3976:
    00000997: 	movq	%r14, 0x28(%rsp)
    0000099c: 	cmpq	$0xf, %r14
    000009a0: 	ja	.Ltmp3978 # Offset: 2464
    000009a6: 	cmpq	$0x1, %r14
    000009aa: 	jne	.Ltmp3979 # Offset: 2474
    000009b0: 	movzbl	(%r15), %eax
    000009b4: 	movb	%al, 0x80(%rsp)
    000009bb: 	movq	0x8(%rsp), %rax
.Ltmp4078:
    000009c0: 	movq	%r14, 0x78(%rsp)
    000009c5: 	movb	$0x0, (%rax,%r14)
    000009ca: 	movabsq	$0x3fffffffffffffff, %rax
    000009d4: 	subq	0x78(%rsp), %rax
    000009d9: 	cmpq	$0xf, %rax
    000009dd: 	jbe	.Ltmp3980 # Offset: 2525
    000009e3: 	leaq	0x70(%rsp), %rdi
    000009e8: 	movl	$0x10, %edx
    000009ed: 	leaq	DATAat0x33312(%rip), %rsi
    000009f4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2548
    000009f9: 	movl	iterations(%rip), %esi
    000009ff: 	movq	0x70(%rsp), %rdi
    00000a04: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 2564
    00000a09: 	movq	0x30(%rsp), %r15
    00000a0e: 	movq	0x38(%rsp), %r14
    00000a13: 	movq	%rbx, 0xd0(%rsp)
    00000a1b: 	movq	%r15, %rax
    00000a1e: 	addq	%r14, %rax
    00000a21: 	je	.Ltmp3981 # Offset: 2593
    00000a23: 	testq	%r15, %r15
    00000a26: 	je	.Ltmp3982 # Offset: 2598
.Ltmp3981:
    00000a2c: 	movq	%r14, 0x28(%rsp)
    00000a31: 	cmpq	$0xf, %r14
    00000a35: 	ja	.Ltmp3983 # Offset: 2613
    00000a3b: 	cmpq	$0x1, %r14
    00000a3f: 	jne	.Ltmp3984 # Offset: 2623
    00000a45: 	movzbl	(%r15), %eax
    00000a49: 	movb	%al, 0xe0(%rsp)
    00000a50: 	movq	%rbx, %rax
.Ltmp4086:
    00000a53: 	movq	%r14, 0xd8(%rsp)
    00000a5b: 	movb	$0x0, (%rax,%r14)
    00000a60: 	movabsq	$0x3fffffffffffffff, %rax
    00000a6a: 	subq	0xd8(%rsp), %rax
    00000a72: 	cmpq	$0x11, %rax
    00000a76: 	jbe	.Ltmp3985 # Offset: 2678
    00000a7c: 	movl	$0x12, %edx
    00000a81: 	leaq	DATAat0x33323(%rip), %rsi
    00000a88: 	movq	%rbp, %rdi
    00000a8b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2699
    00000a90: 	movq	%rbp, %rcx
    00000a93: 	leaq	_Z8bit_xor1ImET_PKS0_iS0_(%rip), %rdx
    00000a9a: 	movl	$0x1f40, %esi
    00000a9f: 	movq	%r12, %rdi
    00000aa2: 	callq	_Z21testOneFunction_equalImPFmPKmimEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2722
    00000aa7: 	movq	0xd0(%rsp), %rdi
    00000aaf: 	cmpq	%rbx, %rdi
    00000ab2: 	je	.Ltmp3986 # Offset: 2738
    00000ab4: 	movq	0xe0(%rsp), %rax
    00000abc: 	leaq	0x1(%rax), %rsi
    00000ac0: 	callq	_ZdlPvm@PLT # Offset: 2752
.Ltmp3986:
    00000ac5: 	leaq	DATAat0x33336(%rip), %rdx
    00000acc: 	movq	%r13, %rsi
    00000acf: 	movq	%rbp, %rdi
    00000ad2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2770
    00000ad7: 	movq	%rbp, %rcx
    00000ada: 	leaq	_Z8bit_xor2ImET_PKS0_iS0_(%rip), %rdx
    00000ae1: 	movl	$0x1f40, %esi
    00000ae6: 	movq	%r12, %rdi
    00000ae9: 	callq	_Z21testOneFunction_equalImPFmPKmimEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2793
    00000aee: 	movq	0xd0(%rsp), %rdi
    00000af6: 	cmpq	%rbx, %rdi
    00000af9: 	je	.Ltmp3987 # Offset: 2809
    00000afb: 	movq	0xe0(%rsp), %rax
    00000b03: 	leaq	0x1(%rax), %rsi
    00000b07: 	callq	_ZdlPvm@PLT # Offset: 2823
.Ltmp3987:
    00000b0c: 	leaq	DATAat0x33349(%rip), %rdx
    00000b13: 	movq	%r13, %rsi
    00000b16: 	movq	%rbp, %rdi
    00000b19: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2841
    00000b1e: 	movq	%rbp, %rcx
    00000b21: 	leaq	_Z8bit_xor3ImET_PKS0_iS0_(%rip), %rdx
    00000b28: 	movl	$0x1f40, %esi
    00000b2d: 	movq	%r12, %rdi
    00000b30: 	callq	_Z21testOneFunction_equalImPFmPKmimEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2864
    00000b35: 	movq	0xd0(%rsp), %rdi
    00000b3d: 	cmpq	%rbx, %rdi
    00000b40: 	je	.Ltmp3988 # Offset: 2880
    00000b42: 	movq	0xe0(%rsp), %rax
    00000b4a: 	leaq	0x1(%rax), %rsi
    00000b4e: 	callq	_ZdlPvm@PLT # Offset: 2894
.Ltmp3988:
    00000b53: 	leaq	DATAat0x3335c(%rip), %rdx
    00000b5a: 	movq	%r13, %rsi
    00000b5d: 	movq	%rbp, %rdi
    00000b60: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2912
    00000b65: 	movq	%rbp, %rcx
    00000b68: 	leaq	_Z8bit_xor4ImET_PKS0_iS0_(%rip), %rdx
    00000b6f: 	movl	$0x1f40, %esi
    00000b74: 	movq	%r12, %rdi
    00000b77: 	callq	_Z21testOneFunction_equalImPFmPKmimEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2935
    00000b7c: 	movq	0xd0(%rsp), %rdi
    00000b84: 	cmpq	%rbx, %rdi
    00000b87: 	je	.Ltmp3989 # Offset: 2951
    00000b89: 	movq	0xe0(%rsp), %rax
    00000b91: 	leaq	0x1(%rax), %rsi
    00000b95: 	callq	_ZdlPvm@PLT # Offset: 2965
.Ltmp3989:
    00000b9a: 	movq	0x30(%rsp), %r15
    00000b9f: 	movq	0x38(%rsp), %r14
    00000ba4: 	movq	%rbx, 0xd0(%rsp)
    00000bac: 	movq	%r15, %rax
    00000baf: 	addq	%r14, %rax
    00000bb2: 	je	.Ltmp3990 # Offset: 2994
    00000bb4: 	testq	%r15, %r15
    00000bb7: 	je	.Ltmp3991 # Offset: 2999
.Ltmp3990:
    00000bbd: 	movq	%r14, 0x28(%rsp)
    00000bc2: 	cmpq	$0xf, %r14
    00000bc6: 	ja	.Ltmp3992 # Offset: 3014
    00000bcc: 	cmpq	$0x1, %r14
    00000bd0: 	jne	.Ltmp3993 # Offset: 3024
    00000bd6: 	movzbl	(%r15), %eax
    00000bda: 	movb	%al, 0xe0(%rsp)
    00000be1: 	movq	%rbx, %rax
.Ltmp4084:
    00000be4: 	movq	%r14, 0xd8(%rsp)
    00000bec: 	movb	$0x0, (%rax,%r14)
    00000bf1: 	movabsq	$0x3fffffffffffffff, %rax
    00000bfb: 	subq	0xd8(%rsp), %rax
    00000c03: 	cmpq	$0x11, %rax
    00000c07: 	jbe	.Ltmp3994 # Offset: 3079
    00000c0d: 	movl	$0x12, %edx
    00000c12: 	leaq	DATAat0x3336f(%rip), %rsi
    00000c19: 	movq	%rbp, %rdi
    00000c1c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3100
    00000c21: 	movq	%rbp, %rcx
    00000c24: 	leaq	_Z8bit_xor5ImET_PKS0_iS0_(%rip), %rdx
    00000c2b: 	movl	$0x1f40, %esi
    00000c30: 	movq	%r12, %rdi
    00000c33: 	callq	_Z21testOneFunction_equalImPFmPKmimEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3123
    00000c38: 	movq	0xd0(%rsp), %rdi
    00000c40: 	cmpq	%rbx, %rdi
    00000c43: 	je	.Ltmp3995 # Offset: 3139
    00000c45: 	movq	0xe0(%rsp), %rax
    00000c4d: 	leaq	0x1(%rax), %rsi
    00000c51: 	callq	_ZdlPvm@PLT # Offset: 3153
.Ltmp3995:
    00000c56: 	leaq	DATAat0x33382(%rip), %rdx
    00000c5d: 	movq	%r13, %rsi
    00000c60: 	movq	%rbp, %rdi
    00000c63: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3171
    00000c68: 	movq	%rbp, %rcx
    00000c6b: 	leaq	_Z8bit_xor6ImET_PKS0_iS0_(%rip), %rdx
    00000c72: 	movl	$0x1f40, %esi
    00000c77: 	movq	%r12, %rdi
    00000c7a: 	callq	_Z21testOneFunction_equalImPFmPKmimEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3194
    00000c7f: 	movq	0xd0(%rsp), %rdi
    00000c87: 	cmpq	%rbx, %rdi
    00000c8a: 	je	.Ltmp3996 # Offset: 3210
    00000c8c: 	movq	0xe0(%rsp), %rax
    00000c94: 	leaq	0x1(%rax), %rsi
    00000c98: 	callq	_ZdlPvm@PLT # Offset: 3224
.Ltmp3996:
    00000c9d: 	leaq	DATAat0x33395(%rip), %rdx
    00000ca4: 	movq	%r13, %rsi
    00000ca7: 	movq	%rbp, %rdi
    00000caa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3242
    00000caf: 	movq	%rbp, %rcx
    00000cb2: 	leaq	_Z8bit_xor7ImET_PKS0_iS0_(%rip), %rdx
    00000cb9: 	movl	$0x1f40, %esi
    00000cbe: 	movq	%r12, %rdi
    00000cc1: 	callq	_Z21testOneFunction_equalImPFmPKmimEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3265
    00000cc6: 	movq	0xd0(%rsp), %rdi
    00000cce: 	cmpq	%rbx, %rdi
    00000cd1: 	je	.Ltmp3997 # Offset: 3281
    00000cd3: 	movq	0xe0(%rsp), %rax
    00000cdb: 	leaq	0x1(%rax), %rsi
    00000cdf: 	callq	_ZdlPvm@PLT # Offset: 3295
.Ltmp3997:
    00000ce4: 	leaq	DATAat0x333a8(%rip), %rdx
    00000ceb: 	movq	%r13, %rsi
    00000cee: 	movq	%rbp, %rdi
    00000cf1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3313
    00000cf6: 	movq	%rbp, %rcx
    00000cf9: 	leaq	_Z8bit_xor8ImET_PKS0_iS0_(%rip), %rdx
    00000d00: 	movl	$0x1f40, %esi
    00000d05: 	movq	%r12, %rdi
    00000d08: 	callq	_Z21testOneFunction_equalImPFmPKmimEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3336
    00000d0d: 	movq	0xd0(%rsp), %rdi
    00000d15: 	cmpq	%rbx, %rdi
    00000d18: 	je	.Ltmp3998 # Offset: 3352
    00000d1a: 	movq	0xe0(%rsp), %rax
    00000d22: 	leaq	0x1(%rax), %rsi
    00000d26: 	callq	_ZdlPvm@PLT # Offset: 3366
.Ltmp3998:
    00000d2b: 	movq	0x30(%rsp), %r15
    00000d30: 	leaq	0xa0(%rsp), %rax
    00000d38: 	movq	0x38(%rsp), %r14
    00000d3d: 	movq	%rax, 0x10(%rsp)
    00000d42: 	movq	%rax, 0x90(%rsp)
    00000d4a: 	movq	%r15, %rax
    00000d4d: 	addq	%r14, %rax
    00000d50: 	je	.Ltmp3999 # Offset: 3408
    00000d52: 	testq	%r15, %r15
    00000d55: 	je	.Ltmp4000 # Offset: 3413
.Ltmp3999:
    00000d5b: 	movq	%r14, 0x28(%rsp)
    00000d60: 	cmpq	$0xf, %r14
    00000d64: 	ja	.Ltmp4001 # Offset: 3428
    00000d6a: 	cmpq	$0x1, %r14
    00000d6e: 	jne	.Ltmp4002 # Offset: 3438
    00000d74: 	movzbl	(%r15), %eax
    00000d78: 	movb	%al, 0xa0(%rsp)
    00000d7f: 	movq	0x10(%rsp), %rax
.Ltmp4082:
    00000d84: 	movq	%r14, 0x98(%rsp)
    00000d8c: 	movb	$0x0, (%rax,%r14)
    00000d91: 	movabsq	$0x3fffffffffffffff, %rax
    00000d9b: 	subq	0x98(%rsp), %rax
    00000da3: 	cmpq	$0x10, %rax
    00000da7: 	jbe	.Ltmp4003 # Offset: 3495
    00000dad: 	leaq	0x90(%rsp), %rdi
    00000db5: 	movl	$0x11, %edx
    00000dba: 	leaq	DATAat0x333bb(%rip), %rsi
    00000dc1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3521
    00000dc6: 	movl	iterations(%rip), %esi
    00000dcc: 	movq	0x90(%rsp), %rdi
    00000dd4: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 3540
    00000dd9: 	movq	0x30(%rsp), %r15
    00000dde: 	movq	0x38(%rsp), %r14
    00000de3: 	movq	%rbx, 0xd0(%rsp)
    00000deb: 	movq	%r15, %rax
    00000dee: 	addq	%r14, %rax
    00000df1: 	je	.Ltmp4004 # Offset: 3569
    00000df3: 	testq	%r15, %r15
    00000df6: 	je	.Ltmp4005 # Offset: 3574
.Ltmp4004:
    00000dfc: 	movq	%r14, 0x28(%rsp)
    00000e01: 	cmpq	$0xf, %r14
    00000e05: 	ja	.Ltmp4006 # Offset: 3589
    00000e0b: 	cmpq	$0x1, %r14
    00000e0f: 	jne	.Ltmp4007 # Offset: 3599
    00000e15: 	movzbl	(%r15), %eax
    00000e19: 	movb	%al, 0xe0(%rsp)
    00000e20: 	movq	%rbx, %rax
.Ltmp4080:
    00000e23: 	movq	%r14, 0xd8(%rsp)
    00000e2b: 	movb	$0x0, (%rax,%r14)
    00000e30: 	movabsq	$0x3fffffffffffffff, %rax
    00000e3a: 	subq	0xd8(%rsp), %rax
    00000e42: 	cmpq	$0x15, %rax
    00000e46: 	jbe	.Ltmp4008 # Offset: 3654
    00000e4c: 	movl	$0x16, %edx
    00000e51: 	leaq	DATAat0x333cd(%rip), %rsi
    00000e58: 	movq	%rbp, %rdi
    00000e5b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3675
    00000e60: 	movq	%rbp, %r8
    00000e63: 	movl	$0x1, %edx
    00000e68: 	movl	$0x1f40, %esi
    00000e6d: 	movq	%r12, %rdi
    00000e70: 	leaq	_Z10logic_and1ImEbPKT_ib(%rip), %rcx
    00000e77: 	callq	_Z23testOneFunction_logicalImPFbPKmibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3703
    00000e7c: 	movq	0xd0(%rsp), %rdi
    00000e84: 	cmpq	%rbx, %rdi
    00000e87: 	je	.Ltmp4009 # Offset: 3719
    00000e89: 	movq	0xe0(%rsp), %rax
    00000e91: 	leaq	0x1(%rax), %rsi
    00000e95: 	callq	_ZdlPvm@PLT # Offset: 3733
.Ltmp4009:
    00000e9a: 	movq	0x30(%rsp), %r15
    00000e9f: 	movq	0x38(%rsp), %r14
    00000ea4: 	movq	%rbx, 0xd0(%rsp)
    00000eac: 	movq	%r15, %rax
    00000eaf: 	addq	%r14, %rax
    00000eb2: 	je	.Ltmp4010 # Offset: 3762
    00000eb4: 	testq	%r15, %r15
    00000eb7: 	je	.Ltmp4011 # Offset: 3767
.Ltmp4010:
    00000ebd: 	movq	%r14, 0x28(%rsp)
    00000ec2: 	cmpq	$0xf, %r14
    00000ec6: 	ja	.Ltmp4012 # Offset: 3782
    00000ecc: 	cmpq	$0x1, %r14
    00000ed0: 	jne	.Ltmp4013 # Offset: 3792
    00000ed6: 	movzbl	(%r15), %eax
    00000eda: 	movb	%al, 0xe0(%rsp)
    00000ee1: 	movq	%rbx, %rax
.Ltmp4094:
    00000ee4: 	movq	%r14, 0xd8(%rsp)
    00000eec: 	movb	$0x0, (%rax,%r14)
    00000ef1: 	movabsq	$0x3fffffffffffffff, %rax
    00000efb: 	subq	0xd8(%rsp), %rax
    00000f03: 	cmpq	$0x15, %rax
    00000f07: 	jbe	.Ltmp4014 # Offset: 3847
    00000f0d: 	movl	$0x16, %edx
    00000f12: 	leaq	DATAat0x333e4(%rip), %rsi
    00000f19: 	movq	%rbp, %rdi
    00000f1c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3868
    00000f21: 	movq	%rbp, %r8
    00000f24: 	movl	$0x1, %edx
    00000f29: 	movl	$0x1f40, %esi
    00000f2e: 	movq	%r12, %rdi
    00000f31: 	leaq	_Z10logic_and2ImEbPKT_ib(%rip), %rcx
    00000f38: 	callq	_Z23testOneFunction_logicalImPFbPKmibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3896
    00000f3d: 	movq	0xd0(%rsp), %rdi
    00000f45: 	cmpq	%rbx, %rdi
    00000f48: 	je	.Ltmp4015 # Offset: 3912
    00000f4a: 	movq	0xe0(%rsp), %rax
    00000f52: 	leaq	0x1(%rax), %rsi
    00000f56: 	callq	_ZdlPvm@PLT # Offset: 3926
.Ltmp4015:
    00000f5b: 	leaq	DATAat0x333fb(%rip), %rdx
    00000f62: 	movq	%r13, %rsi
    00000f65: 	movq	%rbp, %rdi
    00000f68: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3944
    00000f6d: 	movq	%rbp, %r8
    00000f70: 	movl	$0x1, %edx
    00000f75: 	movl	$0x1f40, %esi
    00000f7a: 	movq	%r12, %rdi
    00000f7d: 	leaq	_Z10logic_and3ImEbPKT_ib(%rip), %rcx
    00000f84: 	callq	_Z23testOneFunction_logicalImPFbPKmibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3972
    00000f89: 	movq	0xd0(%rsp), %rdi
    00000f91: 	cmpq	%rbx, %rdi
    00000f94: 	je	.Ltmp4016 # Offset: 3988
    00000f96: 	movq	0xe0(%rsp), %rax
    00000f9e: 	leaq	0x1(%rax), %rsi
    00000fa2: 	callq	_ZdlPvm@PLT # Offset: 4002
.Ltmp4016:
    00000fa7: 	movq	0x30(%rsp), %r15
    00000fac: 	movq	0x38(%rsp), %r14
    00000fb1: 	movq	%rbx, 0xd0(%rsp)
    00000fb9: 	movq	%r15, %rax
    00000fbc: 	addq	%r14, %rax
    00000fbf: 	je	.Ltmp4017 # Offset: 4031
    00000fc1: 	testq	%r15, %r15
    00000fc4: 	je	.Ltmp4018 # Offset: 4036
.Ltmp4017:
    00000fca: 	movq	%r14, 0x28(%rsp)
    00000fcf: 	cmpq	$0xf, %r14
    00000fd3: 	ja	.Ltmp4019 # Offset: 4051
    00000fd9: 	cmpq	$0x1, %r14
    00000fdd: 	jne	.Ltmp4020 # Offset: 4061
    00000fe3: 	movzbl	(%r15), %eax
    00000fe7: 	movb	%al, 0xe0(%rsp)
    00000fee: 	movq	%rbx, %rax
.Ltmp4092:
    00000ff1: 	movq	%r14, 0xd8(%rsp)
    00000ff9: 	movb	$0x0, (%rax,%r14)
    00000ffe: 	movabsq	$0x3fffffffffffffff, %rax
    00001008: 	subq	0xd8(%rsp), %rax
    00001010: 	cmpq	$0x15, %rax
    00001014: 	jbe	.Ltmp4021 # Offset: 4116
    0000101a: 	movl	$0x16, %edx
    0000101f: 	leaq	DATAat0x33412(%rip), %rsi
    00001026: 	movq	%rbp, %rdi
    00001029: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4137
    0000102e: 	movq	%rbp, %r8
    00001031: 	movl	$0x1, %edx
    00001036: 	movl	$0x1f40, %esi
    0000103b: 	movq	%r12, %rdi
    0000103e: 	leaq	_Z10logic_and4ImEbPKT_ib(%rip), %rcx
    00001045: 	callq	_Z23testOneFunction_logicalImPFbPKmibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4165
    0000104a: 	movq	0xd0(%rsp), %rdi
    00001052: 	cmpq	%rbx, %rdi
    00001055: 	je	.Ltmp4022 # Offset: 4181
    00001057: 	movq	0xe0(%rsp), %rax
    0000105f: 	leaq	0x1(%rax), %rsi
    00001063: 	callq	_ZdlPvm@PLT # Offset: 4195
.Ltmp4022:
    00001068: 	leaq	DATAat0x33429(%rip), %rdx
    0000106f: 	movq	%r13, %rsi
    00001072: 	movq	%rbp, %rdi
    00001075: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4213
    0000107a: 	movq	%rbp, %r8
    0000107d: 	movl	$0x1, %edx
    00001082: 	movl	$0x1f40, %esi
    00001087: 	movq	%r12, %rdi
    0000108a: 	leaq	_Z10logic_and5ImEbPKT_ib(%rip), %rcx
    00001091: 	callq	_Z23testOneFunction_logicalImPFbPKmibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4241
    00001096: 	movq	0xd0(%rsp), %rdi
    0000109e: 	cmpq	%rbx, %rdi
    000010a1: 	je	.Ltmp4023 # Offset: 4257
    000010a3: 	movq	0xe0(%rsp), %rax
    000010ab: 	leaq	0x1(%rax), %rsi
    000010af: 	callq	_ZdlPvm@PLT # Offset: 4271
.Ltmp4023:
    000010b4: 	leaq	DATAat0x33440(%rip), %rdx
    000010bb: 	movq	%r13, %rsi
    000010be: 	movq	%rbp, %rdi
    000010c1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4289
    000010c6: 	movq	%rbp, %r8
    000010c9: 	movl	$0x1, %edx
    000010ce: 	movl	$0x1f40, %esi
    000010d3: 	movq	%r12, %rdi
    000010d6: 	leaq	_Z10logic_and6ImEbPKT_ib(%rip), %rcx
    000010dd: 	callq	_Z23testOneFunction_logicalImPFbPKmibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4317
    000010e2: 	movq	0xd0(%rsp), %rdi
    000010ea: 	cmpq	%rbx, %rdi
    000010ed: 	je	.Ltmp4024 # Offset: 4333
    000010ef: 	movq	0xe0(%rsp), %rax
    000010f7: 	leaq	0x1(%rax), %rsi
    000010fb: 	callq	_ZdlPvm@PLT # Offset: 4347
.Ltmp4024:
    00001100: 	leaq	DATAat0x33457(%rip), %rdx
    00001107: 	movq	%r13, %rsi
    0000110a: 	movq	%rbp, %rdi
    0000110d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4365
    00001112: 	movq	%rbp, %r8
    00001115: 	movl	$0x1, %edx
    0000111a: 	movl	$0x1f40, %esi
    0000111f: 	movq	%r12, %rdi
    00001122: 	leaq	_Z10logic_and7ImEbPKT_ib(%rip), %rcx
    00001129: 	callq	_Z23testOneFunction_logicalImPFbPKmibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4393
    0000112e: 	movq	0xd0(%rsp), %rdi
    00001136: 	cmpq	%rbx, %rdi
    00001139: 	je	.Ltmp4025 # Offset: 4409
    0000113b: 	movq	0xe0(%rsp), %rax
    00001143: 	leaq	0x1(%rax), %rsi
    00001147: 	callq	_ZdlPvm@PLT # Offset: 4423
.Ltmp4025:
    0000114c: 	movq	0x30(%rsp), %r15
    00001151: 	movq	0x38(%rsp), %r14
    00001156: 	movq	%rbx, 0xd0(%rsp)
    0000115e: 	movq	%r15, %rax
    00001161: 	addq	%r14, %rax
    00001164: 	je	.Ltmp4026 # Offset: 4452
    00001166: 	testq	%r15, %r15
    00001169: 	je	.Ltmp4027 # Offset: 4457
.Ltmp4026:
    0000116f: 	movq	%r14, 0x28(%rsp)
    00001174: 	cmpq	$0xf, %r14
    00001178: 	ja	.Ltmp4028 # Offset: 4472
    0000117e: 	cmpq	$0x1, %r14
    00001182: 	jne	.Ltmp4029 # Offset: 4482
    00001188: 	movzbl	(%r15), %eax
    0000118c: 	movb	%al, 0xe0(%rsp)
    00001193: 	movq	%rbx, %rax
.Ltmp4090:
    00001196: 	movq	%r14, 0xd8(%rsp)
    0000119e: 	movb	$0x0, (%rax,%r14)
    000011a3: 	movabsq	$0x3fffffffffffffff, %rax
    000011ad: 	subq	0xd8(%rsp), %rax
    000011b5: 	cmpq	$0x15, %rax
    000011b9: 	jbe	.Ltmp4030 # Offset: 4537
    000011bf: 	movl	$0x16, %edx
    000011c4: 	leaq	DATAat0x3346e(%rip), %rsi
    000011cb: 	movq	%rbp, %rdi
    000011ce: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4558
    000011d3: 	movq	%rbp, %r8
    000011d6: 	movl	$0x1, %edx
    000011db: 	movl	$0x1f40, %esi
    000011e0: 	movq	%r12, %rdi
    000011e3: 	leaq	_Z10logic_and8ImEbPKT_ib(%rip), %rcx
    000011ea: 	callq	_Z23testOneFunction_logicalImPFbPKmibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4586
    000011ef: 	movq	0xd0(%rsp), %rdi
    000011f7: 	cmpq	%rbx, %rdi
    000011fa: 	je	.Ltmp4031 # Offset: 4602
    000011fc: 	movq	0xe0(%rsp), %rax
    00001204: 	leaq	0x1(%rax), %rsi
    00001208: 	callq	_ZdlPvm@PLT # Offset: 4616
.Ltmp4031:
    0000120d: 	leaq	0xb0(%rsp), %rdi
    00001215: 	leaq	DATAat0x33485(%rip), %rdx
    0000121c: 	movq	%r13, %rsi
    0000121f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4639
    00001224: 	movl	iterations(%rip), %esi
    0000122a: 	movq	0xb0(%rsp), %rdi
    00001232: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 4658
    00001237: 	movq	0x30(%rsp), %r15
    0000123c: 	movq	0x38(%rsp), %r14
    00001241: 	movq	%rbx, 0xd0(%rsp)
    00001249: 	movq	%r15, %rax
    0000124c: 	addq	%r14, %rax
    0000124f: 	je	.Ltmp4032 # Offset: 4687
    00001251: 	testq	%r15, %r15
    00001254: 	je	.Ltmp4033 # Offset: 4692
.Ltmp4032:
    0000125a: 	movq	%r14, 0x28(%rsp)
    0000125f: 	cmpq	$0xf, %r14
    00001263: 	ja	.Ltmp4034 # Offset: 4707
    00001269: 	cmpq	$0x1, %r14
    0000126d: 	jne	.Ltmp4035 # Offset: 4717
    00001273: 	movzbl	(%r15), %eax
    00001277: 	movb	%al, 0xe0(%rsp)
    0000127e: 	movq	%rbx, %rax
.Ltmp4088:
    00001281: 	movq	%r14, 0xd8(%rsp)
    00001289: 	movb	$0x0, (%rax,%r14)
    0000128e: 	movabsq	$0x3fffffffffffffff, %rax
    00001298: 	subq	0xd8(%rsp), %rax
    000012a0: 	cmpq	$0x14, %rax
    000012a4: 	jbe	.Ltmp4036 # Offset: 4772
    000012aa: 	movl	$0x15, %edx
    000012af: 	leaq	DATAat0x3349b(%rip), %rsi
    000012b6: 	movq	%rbp, %rdi
    000012b9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4793
    000012be: 	movq	%rbp, %r8
    000012c1: 	leaq	_Z9logic_or1ImEbPKT_ib(%rip), %rcx
    000012c8: 	xorl	%edx, %edx
    000012ca: 	movq	%r12, %rdi
    000012cd: 	movl	$0x1f40, %esi
    000012d2: 	callq	_Z23testOneFunction_logicalImPFbPKmibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4818
    000012d7: 	movq	0xd0(%rsp), %rdi
    000012df: 	cmpq	%rbx, %rdi
    000012e2: 	je	.Ltmp4037 # Offset: 4834
    000012e4: 	movq	0xe0(%rsp), %rax
    000012ec: 	leaq	0x1(%rax), %rsi
    000012f0: 	callq	_ZdlPvm@PLT # Offset: 4848
.Ltmp4037:
    000012f5: 	leaq	DATAat0x334b1(%rip), %rdx
    000012fc: 	movq	%r13, %rsi
    000012ff: 	movq	%rbp, %rdi
    00001302: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4866
    00001307: 	movq	%rbp, %r8
    0000130a: 	leaq	_Z12logic_or_optImEbPKT_ib(%rip), %rcx
    00001311: 	xorl	%edx, %edx
    00001313: 	movq	%r12, %rdi
    00001316: 	movl	$0x1f40, %esi
    0000131b: 	callq	_Z23testOneFunction_logicalImPFbPKmibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4891
    00001320: 	movq	0xd0(%rsp), %rdi
    00001328: 	cmpq	%rbx, %rdi
    0000132b: 	je	.Ltmp4038 # Offset: 4907
    0000132d: 	movq	0xe0(%rsp), %rax
    00001335: 	leaq	0x1(%rax), %rsi
    00001339: 	callq	_ZdlPvm@PLT # Offset: 4921
.Ltmp4038:
    0000133e: 	movq	0x30(%rsp), %r15
    00001343: 	movq	0x38(%rsp), %r14
    00001348: 	movq	%rbx, 0xd0(%rsp)
    00001350: 	movq	%r15, %rax
    00001353: 	addq	%r14, %rax
    00001356: 	je	.Ltmp4039 # Offset: 4950
    00001358: 	testq	%r15, %r15
    0000135b: 	je	.Ltmp4040 # Offset: 4955
.Ltmp4039:
    00001361: 	movq	%r14, 0x28(%rsp)
    00001366: 	cmpq	$0xf, %r14
    0000136a: 	ja	.Ltmp4041 # Offset: 4970
    00001370: 	cmpq	$0x1, %r14
    00001374: 	jne	.Ltmp4042 # Offset: 4980
    0000137a: 	movzbl	(%r15), %eax
    0000137e: 	movb	%al, 0xe0(%rsp)
    00001385: 	movq	%rbx, %rax
.Ltmp4096:
    00001388: 	movq	%r14, 0xd8(%rsp)
    00001390: 	movb	$0x0, (%rax,%r14)
    00001395: 	movabsq	$0x3fffffffffffffff, %rax
    0000139f: 	subq	0xd8(%rsp), %rax
    000013a7: 	cmpq	$0x14, %rax
    000013ab: 	jbe	.Ltmp4043 # Offset: 5035
    000013b1: 	movl	$0x15, %edx
    000013b6: 	leaq	DATAat0x334ce(%rip), %rsi
    000013bd: 	movq	%rbp, %rdi
    000013c0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5056
    000013c5: 	movq	%rbp, %r8
    000013c8: 	leaq	_Z9logic_or2ImEbPKT_ib(%rip), %rcx
    000013cf: 	xorl	%edx, %edx
    000013d1: 	movq	%r12, %rdi
    000013d4: 	movl	$0x1f40, %esi
    000013d9: 	callq	_Z23testOneFunction_logicalImPFbPKmibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5081
    000013de: 	movq	0xd0(%rsp), %rdi
    000013e6: 	cmpq	%rbx, %rdi
    000013e9: 	je	.Ltmp4044 # Offset: 5097
    000013eb: 	movq	0xe0(%rsp), %rax
    000013f3: 	leaq	0x1(%rax), %rsi
    000013f7: 	callq	_ZdlPvm@PLT # Offset: 5111
.Ltmp4044:
    000013fc: 	leaq	DATAat0x334e4(%rip), %rdx
    00001403: 	movq	%r13, %rsi
    00001406: 	movq	%rbp, %rdi
    00001409: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5129
    0000140e: 	movq	%rbp, %r8
    00001411: 	leaq	_Z9logic_or3ImEbPKT_ib(%rip), %rcx
    00001418: 	xorl	%edx, %edx
    0000141a: 	movq	%r12, %rdi
    0000141d: 	movl	$0x1f40, %esi
    00001422: 	callq	_Z23testOneFunction_logicalImPFbPKmibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5154
    00001427: 	movq	0xd0(%rsp), %rdi
    0000142f: 	cmpq	%rbx, %rdi
    00001432: 	je	.Ltmp4045 # Offset: 5170
    00001434: 	movq	0xe0(%rsp), %rax
    0000143c: 	leaq	0x1(%rax), %rsi
    00001440: 	callq	_ZdlPvm@PLT # Offset: 5184
.Ltmp4045:
    00001445: 	leaq	DATAat0x334fa(%rip), %rdx
    0000144c: 	movq	%r13, %rsi
    0000144f: 	movq	%rbp, %rdi
    00001452: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5202
    00001457: 	movq	%rbp, %r8
    0000145a: 	leaq	_Z9logic_or4ImEbPKT_ib(%rip), %rcx
    00001461: 	xorl	%edx, %edx
    00001463: 	movq	%r12, %rdi
    00001466: 	movl	$0x1f40, %esi
    0000146b: 	callq	_Z23testOneFunction_logicalImPFbPKmibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5227
    00001470: 	movq	0xd0(%rsp), %rdi
    00001478: 	cmpq	%rbx, %rdi
    0000147b: 	je	.Ltmp4046 # Offset: 5243
    0000147d: 	movq	0xe0(%rsp), %rax
    00001485: 	leaq	0x1(%rax), %rsi
    00001489: 	callq	_ZdlPvm@PLT # Offset: 5257
.Ltmp4046:
    0000148e: 	leaq	DATAat0x33510(%rip), %rdx
    00001495: 	movq	%r13, %rsi
    00001498: 	movq	%rbp, %rdi
    0000149b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5275
    000014a0: 	movq	%rbp, %r8
    000014a3: 	leaq	_Z9logic_or5ImEbPKT_ib(%rip), %rcx
    000014aa: 	xorl	%edx, %edx
    000014ac: 	movq	%r12, %rdi
    000014af: 	movl	$0x1f40, %esi
    000014b4: 	callq	_Z23testOneFunction_logicalImPFbPKmibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5300
    000014b9: 	movq	0xd0(%rsp), %rdi
    000014c1: 	cmpq	%rbx, %rdi
    000014c4: 	je	.Ltmp4047 # Offset: 5316
    000014c6: 	movq	0xe0(%rsp), %rax
    000014ce: 	leaq	0x1(%rax), %rsi
    000014d2: 	callq	_ZdlPvm@PLT # Offset: 5330
.Ltmp4047:
    000014d7: 	leaq	DATAat0x33526(%rip), %rdx
    000014de: 	movq	%r13, %rsi
    000014e1: 	movq	%rbp, %rdi
    000014e4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5348
    000014e9: 	movq	%rbp, %r8
    000014ec: 	leaq	_Z9logic_or6ImEbPKT_ib(%rip), %rcx
    000014f3: 	xorl	%edx, %edx
    000014f5: 	movq	%r12, %rdi
    000014f8: 	movl	$0x1f40, %esi
    000014fd: 	callq	_Z23testOneFunction_logicalImPFbPKmibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5373
    00001502: 	movq	0xd0(%rsp), %rdi
    0000150a: 	cmpq	%rbx, %rdi
    0000150d: 	je	.Ltmp4048 # Offset: 5389
    0000150f: 	movq	0xe0(%rsp), %rax
    00001517: 	leaq	0x1(%rax), %rsi
    0000151b: 	callq	_ZdlPvm@PLT # Offset: 5403
.Ltmp4048:
    00001520: 	leaq	DATAat0x3353c(%rip), %rdx
    00001527: 	movq	%r13, %rsi
    0000152a: 	movq	%rbp, %rdi
    0000152d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5421
    00001532: 	movq	%rbp, %r8
    00001535: 	leaq	_Z9logic_or7ImEbPKT_ib(%rip), %rcx
    0000153c: 	xorl	%edx, %edx
    0000153e: 	movq	%r12, %rdi
    00001541: 	movl	$0x1f40, %esi
    00001546: 	callq	_Z23testOneFunction_logicalImPFbPKmibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5446
    0000154b: 	movq	0xd0(%rsp), %rdi
    00001553: 	cmpq	%rbx, %rdi
    00001556: 	je	.Ltmp4049 # Offset: 5462
    00001558: 	movq	0xe0(%rsp), %rax
    00001560: 	leaq	0x1(%rax), %rsi
    00001564: 	callq	_ZdlPvm@PLT # Offset: 5476
.Ltmp4049:
    00001569: 	leaq	DATAat0x33552(%rip), %rdx
    00001570: 	movq	%r13, %rsi
    00001573: 	movq	%rbp, %rdi
    00001576: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5494
    0000157b: 	movq	%rbp, %r8
    0000157e: 	leaq	_Z9logic_or8ImEbPKT_ib(%rip), %rcx
    00001585: 	xorl	%edx, %edx
    00001587: 	movq	%r12, %rdi
    0000158a: 	movl	$0x1f40, %esi
    0000158f: 	callq	_Z23testOneFunction_logicalImPFbPKmibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5519
    00001594: 	movq	0xd0(%rsp), %rdi
    0000159c: 	cmpq	%rbx, %rdi
    0000159f: 	je	.Ltmp4050 # Offset: 5535
    000015a1: 	movq	0xe0(%rsp), %rax
    000015a9: 	leaq	0x1(%rax), %rsi
    000015ad: 	callq	_ZdlPvm@PLT # Offset: 5549
.Ltmp4050:
    000015b2: 	leaq	DATAat0x33568(%rip), %rdx
    000015b9: 	movq	%r13, %rsi
    000015bc: 	movq	%rbp, %rdi
    000015bf: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5567
    000015c4: 	movl	iterations(%rip), %esi
    000015ca: 	movq	0xd0(%rsp), %rdi
    000015d2: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 5586
    000015d7: 	movq	0xd0(%rsp), %rdi
    000015df: 	cmpq	%rbx, %rdi
    000015e2: 	je	.Ltmp4051 # Offset: 5602
    000015e4: 	movq	0xe0(%rsp), %rax
    000015ec: 	leaq	0x1(%rax), %rsi
    000015f0: 	callq	_ZdlPvm@PLT # Offset: 5616
.Ltmp4051:
    000015f5: 	movq	0xb0(%rsp), %rdi
    000015fd: 	leaq	0xc0(%rsp), %rax
    00001605: 	cmpq	%rax, %rdi
    00001608: 	je	.Ltmp4052 # Offset: 5640
    0000160a: 	movq	0xc0(%rsp), %rax
    00001612: 	leaq	0x1(%rax), %rsi
    00001616: 	callq	_ZdlPvm@PLT # Offset: 5654
.Ltmp4052:
    0000161b: 	movq	0x90(%rsp), %rdi
    00001623: 	cmpq	0x10(%rsp), %rdi
    00001628: 	je	.Ltmp4053 # Offset: 5672
    0000162a: 	movq	0xa0(%rsp), %rax
    00001632: 	leaq	0x1(%rax), %rsi
    00001636: 	callq	_ZdlPvm@PLT # Offset: 5686
.Ltmp4053:
    0000163b: 	movq	0x70(%rsp), %rdi
    00001640: 	cmpq	0x8(%rsp), %rdi
    00001645: 	je	.Ltmp4054 # Offset: 5701
    00001647: 	movq	0x80(%rsp), %rax
    0000164f: 	leaq	0x1(%rax), %rsi
    00001653: 	callq	_ZdlPvm@PLT # Offset: 5715
.Ltmp4054:
    00001658: 	movq	0x50(%rsp), %rdi
    0000165d: 	leaq	0x60(%rsp), %rax
    00001662: 	cmpq	%rax, %rdi
    00001665: 	je	.Ltmp4055 # Offset: 5733
    00001667: 	movq	0x60(%rsp), %rax
    0000166c: 	leaq	0x1(%rax), %rsi
    00001670: 	callq	_ZdlPvm@PLT # Offset: 5744
.Ltmp4055:
    00001675: 	movq	%r12, %rdi
    00001678: 	movl	$0x8, %esi
    0000167d: 	callq	_ZdlPvm@PLT # Offset: 5757
    00001682: 	movq	0x30(%rsp), %rdi
    00001687: 	cmpq	0x18(%rsp), %rdi
    0000168c: 	je	.Ltmp4056 # Offset: 5772
    0000168e: 	movq	0x40(%rsp), %rax
    00001693: 	leaq	0x1(%rax), %rsi
    00001697: 	callq	_ZdlPvm@PLT # Offset: 5783
.Ltmp4056:
    0000169c: 	movq	0xf8(%rsp), %rax
    000016a4: 	subq	%fs:0x28, %rax
    000016ad: 	jne	.Ltmp4057 # Offset: 5805
    000016b3: 	addq	$0x108, %rsp
    000016ba: 	popq	%rbx
    000016bb: 	popq	%rbp
    000016bc: 	popq	%r12
    000016be: 	popq	%r13
    000016c0: 	popq	%r14
    000016c2: 	popq	%r15
    000016c4: 	retq # Offset: 5828
    000016c5: 	nopl	(%rax) # Size: 3
.Ltmp3913:
    000016c8: 	subsd	%xmm1, %xmm0
    000016cc: 	cvttsd2si	%xmm0, %rax
    000016d1: 	btcq	$0x3f, %rax
    000016d6: 	jmp	.Ltmp4058 # Offset: 5846
    000016db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3919:
    000016e0: 	testq	%r14, %r14
    000016e3: 	jne	.Ltmp4059 # Offset: 5859
    000016e9: 	movq	%rbx, %rax
    000016ec: 	jmp	.Ltmp4060 # Offset: 5868
    000016f1: 	nopl	(%rax) # Size: 7
.Ltmp3926:
    000016f8: 	testq	%r14, %r14
    000016fb: 	jne	.Ltmp4061 # Offset: 5883
    00001701: 	movq	%rbx, %rax
    00001704: 	jmp	.Ltmp4062 # Offset: 5892
    00001709: 	nopl	(%rax) # Size: 7
.Ltmp3939:
    00001710: 	testq	%r14, %r14
    00001713: 	jne	.Ltmp4063 # Offset: 5907
    00001719: 	movq	%rbx, %rax
    0000171c: 	jmp	.Ltmp4064 # Offset: 5916
    00001721: 	nopl	(%rax) # Size: 7
.Ltmp3933:
    00001728: 	testq	%r14, %r14
    0000172b: 	jne	.Ltmp4065 # Offset: 5931
    00001731: 	movq	%rbx, %rax
    00001734: 	jmp	.Ltmp4066 # Offset: 5940
    00001739: 	nopl	(%rax) # Size: 7
.Ltmp3952:
    00001740: 	testq	%r14, %r14
    00001743: 	jne	.Ltmp4067 # Offset: 5955
    00001749: 	movq	%rbx, %rax
    0000174c: 	jmp	.Ltmp4068 # Offset: 5964
    00001751: 	nopl	(%rax) # Size: 7
.Ltmp3946:
    00001758: 	testq	%r14, %r14
    0000175b: 	jne	.Ltmp4069 # Offset: 5979
    00001761: 	movq	%rbx, %rax
    00001764: 	jmp	.Ltmp4070 # Offset: 5988
    00001769: 	nopl	(%rax) # Size: 7
.Ltmp3973:
    00001770: 	testq	%r14, %r14
    00001773: 	jne	.Ltmp4071 # Offset: 6003
    00001779: 	movq	%rbx, %rax
    0000177c: 	jmp	.Ltmp4072 # Offset: 6012
    00001781: 	nopl	(%rax) # Size: 7
.Ltmp3967:
    00001788: 	testq	%r14, %r14
    0000178b: 	jne	.Ltmp4073 # Offset: 6027
    00001791: 	movq	%rbx, %rax
    00001794: 	jmp	.Ltmp4074 # Offset: 6036
    00001799: 	nopl	(%rax) # Size: 7
.Ltmp3961:
    000017a0: 	testq	%r14, %r14
    000017a3: 	jne	.Ltmp4075 # Offset: 6051
    000017a9: 	movq	%rbx, %rax
    000017ac: 	jmp	.Ltmp4076 # Offset: 6060
    000017b1: 	nopl	(%rax) # Size: 7
.Ltmp3979:
    000017b8: 	testq	%r14, %r14
    000017bb: 	jne	.Ltmp4077 # Offset: 6075
    000017c1: 	movq	0x8(%rsp), %rax
    000017c6: 	jmp	.Ltmp4078 # Offset: 6086
    000017cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4007:
    000017d0: 	testq	%r14, %r14
    000017d3: 	jne	.Ltmp4079 # Offset: 6099
    000017d9: 	movq	%rbx, %rax
    000017dc: 	jmp	.Ltmp4080 # Offset: 6108
    000017e1: 	nopl	(%rax) # Size: 7
.Ltmp4002:
    000017e8: 	testq	%r14, %r14
    000017eb: 	jne	.Ltmp4081 # Offset: 6123
    000017f1: 	movq	0x10(%rsp), %rax
    000017f6: 	jmp	.Ltmp4082 # Offset: 6134
    000017fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3993:
    00001800: 	testq	%r14, %r14
    00001803: 	jne	.Ltmp4083 # Offset: 6147
    00001809: 	movq	%rbx, %rax
    0000180c: 	jmp	.Ltmp4084 # Offset: 6156
    00001811: 	nopl	(%rax) # Size: 7
.Ltmp3984:
    00001818: 	testq	%r14, %r14
    0000181b: 	jne	.Ltmp4085 # Offset: 6171
    00001821: 	movq	%rbx, %rax
    00001824: 	jmp	.Ltmp4086 # Offset: 6180
    00001829: 	nopl	(%rax) # Size: 7
.Ltmp4035:
    00001830: 	testq	%r14, %r14
    00001833: 	jne	.Ltmp4087 # Offset: 6195
    00001839: 	movq	%rbx, %rax
    0000183c: 	jmp	.Ltmp4088 # Offset: 6204
    00001841: 	nopl	(%rax) # Size: 7
.Ltmp4029:
    00001848: 	testq	%r14, %r14
    0000184b: 	jne	.Ltmp4089 # Offset: 6219
    00001851: 	movq	%rbx, %rax
    00001854: 	jmp	.Ltmp4090 # Offset: 6228
    00001859: 	nopl	(%rax) # Size: 7
.Ltmp4020:
    00001860: 	testq	%r14, %r14
    00001863: 	jne	.Ltmp4091 # Offset: 6243
    00001869: 	movq	%rbx, %rax
    0000186c: 	jmp	.Ltmp4092 # Offset: 6252
    00001871: 	nopl	(%rax) # Size: 7
.Ltmp4013:
    00001878: 	testq	%r14, %r14
    0000187b: 	jne	.Ltmp4093 # Offset: 6267
    00001881: 	movq	%rbx, %rax
    00001884: 	jmp	.Ltmp4094 # Offset: 6276
    00001889: 	nopl	(%rax) # Size: 7
.Ltmp4042:
    00001890: 	testq	%r14, %r14
    00001893: 	jne	.Ltmp4095 # Offset: 6291
    00001899: 	movq	%rbx, %rax
    0000189c: 	jmp	.Ltmp4096 # Offset: 6300
    000018a1: 	nopl	(%rax) # Size: 7
.Ltmp3925:
    000018a8: 	leaq	0x28(%rsp), %rsi
    000018ad: 	xorl	%edx, %edx
    000018af: 	movq	%rbp, %rdi
    000018b2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6322
    000018b7: 	movq	%rax, 0xd0(%rsp)
    000018bf: 	movq	%rax, %rdi
    000018c2: 	movq	0x28(%rsp), %rax
    000018c7: 	movq	%rax, 0xe0(%rsp)
.Ltmp4098:
    000018cf: 	movq	%r14, %rdx
    000018d2: 	movq	%r15, %rsi
    000018d5: 	callq	memcpy@PLT # Offset: 6357
    000018da: 	movq	0x28(%rsp), %r14
    000018df: 	movq	0xd0(%rsp), %rax
    000018e7: 	jmp	.Ltmp4062 # Offset: 6375
    000018ec: 	nopl	(%rax) # Size: 4
.Ltmp3918:
    000018f0: 	leaq	0x28(%rsp), %rsi
    000018f5: 	xorl	%edx, %edx
    000018f7: 	movq	%rbp, %rdi
    000018fa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6394
    000018ff: 	movq	%rax, 0xd0(%rsp)
    00001907: 	movq	%rax, %rdi
    0000190a: 	movq	0x28(%rsp), %rax
    0000190f: 	movq	%rax, 0xe0(%rsp)
.Ltmp4097:
    00001917: 	movq	%r14, %rdx
    0000191a: 	movq	%r15, %rsi
    0000191d: 	callq	memcpy@PLT # Offset: 6429
    00001922: 	movq	0x28(%rsp), %r14
    00001927: 	movq	0xd0(%rsp), %rax
    0000192f: 	jmp	.Ltmp4060 # Offset: 6447
    00001934: 	nopl	(%rax) # Size: 4
.Ltmp3932:
    00001938: 	leaq	0x28(%rsp), %rsi
    0000193d: 	xorl	%edx, %edx
    0000193f: 	movq	%rbp, %rdi
    00001942: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6466
    00001947: 	movq	%rax, 0xd0(%rsp)
    0000194f: 	movq	%rax, %rdi
    00001952: 	movq	0x28(%rsp), %rax
    00001957: 	movq	%rax, 0xe0(%rsp)
.Ltmp4100:
    0000195f: 	movq	%r14, %rdx
    00001962: 	movq	%r15, %rsi
    00001965: 	callq	memcpy@PLT # Offset: 6501
    0000196a: 	movq	0x28(%rsp), %r14
    0000196f: 	movq	0xd0(%rsp), %rax
    00001977: 	jmp	.Ltmp4066 # Offset: 6519
    0000197c: 	nopl	(%rax) # Size: 4
.Ltmp3938:
    00001980: 	leaq	0x28(%rsp), %rsi
    00001985: 	xorl	%edx, %edx
    00001987: 	movq	%rbp, %rdi
    0000198a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6538
    0000198f: 	movq	%rax, 0xd0(%rsp)
    00001997: 	movq	%rax, %rdi
    0000199a: 	movq	0x28(%rsp), %rax
    0000199f: 	movq	%rax, 0xe0(%rsp)
.Ltmp4099:
    000019a7: 	movq	%r14, %rdx
    000019aa: 	movq	%r15, %rsi
    000019ad: 	callq	memcpy@PLT # Offset: 6573
    000019b2: 	movq	0x28(%rsp), %r14
    000019b7: 	movq	0xd0(%rsp), %rax
    000019bf: 	jmp	.Ltmp4064 # Offset: 6591
    000019c4: 	nopl	(%rax) # Size: 4
.Ltmp3951:
    000019c8: 	leaq	0x28(%rsp), %rsi
    000019cd: 	xorl	%edx, %edx
    000019cf: 	movq	%rbp, %rdi
    000019d2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6610
    000019d7: 	movq	%rax, 0xd0(%rsp)
    000019df: 	movq	%rax, %rdi
    000019e2: 	movq	0x28(%rsp), %rax
    000019e7: 	movq	%rax, 0xe0(%rsp)
.Ltmp4101:
    000019ef: 	movq	%r14, %rdx
    000019f2: 	movq	%r15, %rsi
    000019f5: 	callq	memcpy@PLT # Offset: 6645
    000019fa: 	movq	0x28(%rsp), %r14
    000019ff: 	movq	0xd0(%rsp), %rax
    00001a07: 	jmp	.Ltmp4068 # Offset: 6663
    00001a0c: 	nopl	(%rax) # Size: 4
.Ltmp3945:
    00001a10: 	leaq	0x28(%rsp), %rsi
    00001a15: 	xorl	%edx, %edx
    00001a17: 	movq	%rbp, %rdi
    00001a1a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6682
    00001a1f: 	movq	%rax, 0xd0(%rsp)
    00001a27: 	movq	%rax, %rdi
    00001a2a: 	movq	0x28(%rsp), %rax
    00001a2f: 	movq	%rax, 0xe0(%rsp)
.Ltmp4102:
    00001a37: 	movq	%r14, %rdx
    00001a3a: 	movq	%r15, %rsi
    00001a3d: 	callq	memcpy@PLT # Offset: 6717
    00001a42: 	movq	0x28(%rsp), %r14
    00001a47: 	movq	0xd0(%rsp), %rax
    00001a4f: 	jmp	.Ltmp4070 # Offset: 6735
    00001a54: 	nopl	(%rax) # Size: 4
.Ltmp3960:
    00001a58: 	leaq	0x28(%rsp), %rsi
    00001a5d: 	xorl	%edx, %edx
    00001a5f: 	movq	%rbp, %rdi
    00001a62: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6754
    00001a67: 	movq	%rax, 0xd0(%rsp)
    00001a6f: 	movq	%rax, %rdi
    00001a72: 	movq	0x28(%rsp), %rax
    00001a77: 	movq	%rax, 0xe0(%rsp)
.Ltmp4105:
    00001a7f: 	movq	%r14, %rdx
    00001a82: 	movq	%r15, %rsi
    00001a85: 	callq	memcpy@PLT # Offset: 6789
    00001a8a: 	movq	0x28(%rsp), %r14
    00001a8f: 	movq	0xd0(%rsp), %rax
    00001a97: 	jmp	.Ltmp4076 # Offset: 6807
    00001a9c: 	nopl	(%rax) # Size: 4
.Ltmp3966:
    00001aa0: 	leaq	0x28(%rsp), %rsi
    00001aa5: 	xorl	%edx, %edx
    00001aa7: 	movq	%rbp, %rdi
    00001aaa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6826
    00001aaf: 	movq	%rax, 0xd0(%rsp)
    00001ab7: 	movq	%rax, %rdi
    00001aba: 	movq	0x28(%rsp), %rax
    00001abf: 	movq	%rax, 0xe0(%rsp)
.Ltmp4104:
    00001ac7: 	movq	%r14, %rdx
    00001aca: 	movq	%r15, %rsi
    00001acd: 	callq	memcpy@PLT # Offset: 6861
    00001ad2: 	movq	0x28(%rsp), %r14
    00001ad7: 	movq	0xd0(%rsp), %rax
    00001adf: 	jmp	.Ltmp4074 # Offset: 6879
    00001ae4: 	nopl	(%rax) # Size: 4
.Ltmp3972:
    00001ae8: 	leaq	0x28(%rsp), %rsi
    00001aed: 	xorl	%edx, %edx
    00001aef: 	movq	%rbp, %rdi
    00001af2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6898
    00001af7: 	movq	%rax, 0xd0(%rsp)
    00001aff: 	movq	%rax, %rdi
    00001b02: 	movq	0x28(%rsp), %rax
    00001b07: 	movq	%rax, 0xe0(%rsp)
.Ltmp4103:
    00001b0f: 	movq	%r14, %rdx
    00001b12: 	movq	%r15, %rsi
    00001b15: 	callq	memcpy@PLT # Offset: 6933
    00001b1a: 	movq	0x28(%rsp), %r14
    00001b1f: 	movq	0xd0(%rsp), %rax
    00001b27: 	jmp	.Ltmp4072 # Offset: 6951
    00001b2c: 	nopl	(%rax) # Size: 4
.Ltmp3978:
    00001b30: 	leaq	0x28(%rsp), %rsi
    00001b35: 	leaq	0x70(%rsp), %rdi
    00001b3a: 	xorl	%edx, %edx
    00001b3c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6972
    00001b41: 	movq	%rax, 0x70(%rsp)
    00001b46: 	movq	%rax, %rdi
    00001b49: 	movq	0x28(%rsp), %rax
    00001b4e: 	movq	%rax, 0x80(%rsp)
.Ltmp4106:
    00001b56: 	movq	%r14, %rdx
    00001b59: 	movq	%r15, %rsi
    00001b5c: 	callq	memcpy@PLT # Offset: 7004
    00001b61: 	movq	0x28(%rsp), %r14
    00001b66: 	movq	0x70(%rsp), %rax
    00001b6b: 	jmp	.Ltmp4078 # Offset: 7019
.Ltmp3992:
    00001b70: 	leaq	0x28(%rsp), %rsi
    00001b75: 	xorl	%edx, %edx
    00001b77: 	movq	%rbp, %rdi
    00001b7a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7034
    00001b7f: 	movq	%rax, 0xd0(%rsp)
    00001b87: 	movq	%rax, %rdi
    00001b8a: 	movq	0x28(%rsp), %rax
    00001b8f: 	movq	%rax, 0xe0(%rsp)
.Ltmp4109:
    00001b97: 	movq	%r14, %rdx
    00001b9a: 	movq	%r15, %rsi
    00001b9d: 	callq	memcpy@PLT # Offset: 7069
    00001ba2: 	movq	0x28(%rsp), %r14
    00001ba7: 	movq	0xd0(%rsp), %rax
    00001baf: 	jmp	.Ltmp4084 # Offset: 7087
    00001bb4: 	nopl	(%rax) # Size: 4
.Ltmp3983:
    00001bb8: 	leaq	0x28(%rsp), %rsi
    00001bbd: 	xorl	%edx, %edx
    00001bbf: 	movq	%rbp, %rdi
    00001bc2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7106
    00001bc7: 	movq	%rax, 0xd0(%rsp)
    00001bcf: 	movq	%rax, %rdi
    00001bd2: 	movq	0x28(%rsp), %rax
    00001bd7: 	movq	%rax, 0xe0(%rsp)
.Ltmp4110:
    00001bdf: 	movq	%r14, %rdx
    00001be2: 	movq	%r15, %rsi
    00001be5: 	callq	memcpy@PLT # Offset: 7141
    00001bea: 	movq	0x28(%rsp), %r14
    00001bef: 	movq	0xd0(%rsp), %rax
    00001bf7: 	jmp	.Ltmp4086 # Offset: 7159
    00001bfc: 	nopl	(%rax) # Size: 4
.Ltmp4006:
    00001c00: 	leaq	0x28(%rsp), %rsi
    00001c05: 	xorl	%edx, %edx
    00001c07: 	movq	%rbp, %rdi
    00001c0a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7178
    00001c0f: 	movq	%rax, 0xd0(%rsp)
    00001c17: 	movq	%rax, %rdi
    00001c1a: 	movq	0x28(%rsp), %rax
    00001c1f: 	movq	%rax, 0xe0(%rsp)
.Ltmp4107:
    00001c27: 	movq	%r14, %rdx
    00001c2a: 	movq	%r15, %rsi
    00001c2d: 	callq	memcpy@PLT # Offset: 7213
    00001c32: 	movq	0x28(%rsp), %r14
    00001c37: 	movq	0xd0(%rsp), %rax
    00001c3f: 	jmp	.Ltmp4080 # Offset: 7231
    00001c44: 	nopl	(%rax) # Size: 4
.Ltmp4001:
    00001c48: 	leaq	0x28(%rsp), %rsi
    00001c4d: 	leaq	0x90(%rsp), %rdi
    00001c55: 	xorl	%edx, %edx
    00001c57: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7255
    00001c5c: 	movq	%rax, 0x90(%rsp)
    00001c64: 	movq	%rax, %rdi
    00001c67: 	movq	0x28(%rsp), %rax
    00001c6c: 	movq	%rax, 0xa0(%rsp)
.Ltmp4108:
    00001c74: 	movq	%r14, %rdx
    00001c77: 	movq	%r15, %rsi
    00001c7a: 	callq	memcpy@PLT # Offset: 7290
    00001c7f: 	movq	0x28(%rsp), %r14
    00001c84: 	movq	0x90(%rsp), %rax
    00001c8c: 	jmp	.Ltmp4082 # Offset: 7308
    00001c91: 	nopl	(%rax) # Size: 7
.Ltmp4041:
    00001c98: 	leaq	0x28(%rsp), %rsi
    00001c9d: 	xorl	%edx, %edx
    00001c9f: 	movq	%rbp, %rdi
    00001ca2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7330
    00001ca7: 	movq	%rax, 0xd0(%rsp)
    00001caf: 	movq	%rax, %rdi
    00001cb2: 	movq	0x28(%rsp), %rax
    00001cb7: 	movq	%rax, 0xe0(%rsp)
.Ltmp4115:
    00001cbf: 	movq	%r14, %rdx
    00001cc2: 	movq	%r15, %rsi
    00001cc5: 	callq	memcpy@PLT # Offset: 7365
    00001cca: 	movq	0x28(%rsp), %r14
    00001ccf: 	movq	0xd0(%rsp), %rax
    00001cd7: 	jmp	.Ltmp4096 # Offset: 7383
    00001cdc: 	nopl	(%rax) # Size: 4
.Ltmp4019:
    00001ce0: 	leaq	0x28(%rsp), %rsi
    00001ce5: 	xorl	%edx, %edx
    00001ce7: 	movq	%rbp, %rdi
    00001cea: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7402
    00001cef: 	movq	%rax, 0xd0(%rsp)
    00001cf7: 	movq	%rax, %rdi
    00001cfa: 	movq	0x28(%rsp), %rax
    00001cff: 	movq	%rax, 0xe0(%rsp)
.Ltmp4113:
    00001d07: 	movq	%r14, %rdx
    00001d0a: 	movq	%r15, %rsi
    00001d0d: 	callq	memcpy@PLT # Offset: 7437
    00001d12: 	movq	0x28(%rsp), %r14
    00001d17: 	movq	0xd0(%rsp), %rax
    00001d1f: 	jmp	.Ltmp4092 # Offset: 7455
    00001d24: 	nopl	(%rax) # Size: 4
.Ltmp4012:
    00001d28: 	leaq	0x28(%rsp), %rsi
    00001d2d: 	xorl	%edx, %edx
    00001d2f: 	movq	%rbp, %rdi
    00001d32: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7474
    00001d37: 	movq	%rax, 0xd0(%rsp)
    00001d3f: 	movq	%rax, %rdi
    00001d42: 	movq	0x28(%rsp), %rax
    00001d47: 	movq	%rax, 0xe0(%rsp)
.Ltmp4114:
    00001d4f: 	movq	%r14, %rdx
    00001d52: 	movq	%r15, %rsi
    00001d55: 	callq	memcpy@PLT # Offset: 7509
    00001d5a: 	movq	0x28(%rsp), %r14
    00001d5f: 	movq	0xd0(%rsp), %rax
    00001d67: 	jmp	.Ltmp4094 # Offset: 7527
    00001d6c: 	nopl	(%rax) # Size: 4
.Ltmp4034:
    00001d70: 	leaq	0x28(%rsp), %rsi
    00001d75: 	xorl	%edx, %edx
    00001d77: 	movq	%rbp, %rdi
    00001d7a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7546
    00001d7f: 	movq	%rax, 0xd0(%rsp)
    00001d87: 	movq	%rax, %rdi
    00001d8a: 	movq	0x28(%rsp), %rax
    00001d8f: 	movq	%rax, 0xe0(%rsp)
.Ltmp4111:
    00001d97: 	movq	%r14, %rdx
    00001d9a: 	movq	%r15, %rsi
    00001d9d: 	callq	memcpy@PLT # Offset: 7581
    00001da2: 	movq	0x28(%rsp), %r14
    00001da7: 	movq	0xd0(%rsp), %rax
    00001daf: 	jmp	.Ltmp4088 # Offset: 7599
    00001db4: 	nopl	(%rax) # Size: 4
.Ltmp4028:
    00001db8: 	leaq	0x28(%rsp), %rsi
    00001dbd: 	xorl	%edx, %edx
    00001dbf: 	movq	%rbp, %rdi
    00001dc2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7618
    00001dc7: 	movq	%rax, 0xd0(%rsp)
    00001dcf: 	movq	%rax, %rdi
    00001dd2: 	movq	0x28(%rsp), %rax
    00001dd7: 	movq	%rax, 0xe0(%rsp)
.Ltmp4112:
    00001ddf: 	movq	%r14, %rdx
    00001de2: 	movq	%r15, %rsi
    00001de5: 	callq	memcpy@PLT # Offset: 7653
    00001dea: 	movq	0x28(%rsp), %r14
    00001def: 	movq	0xd0(%rsp), %rax
    00001df7: 	jmp	.Ltmp4090 # Offset: 7671
.Ltmp3920:
    00001dfc: 	leaq	DATAat0x33182(%rip), %rdi
    00001e03: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7683
.Ltmp3924:
    00001e08: 	leaq	DATAat0x33158(%rip), %rdi
    00001e0f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7695
.Ltmp3927:
    00001e14: 	leaq	DATAat0x33182(%rip), %rdi
    00001e1b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7707
.Ltmp3931:
    00001e20: 	leaq	DATAat0x33158(%rip), %rdi
    00001e27: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7719
.Ltmp3934:
    00001e2c: 	leaq	DATAat0x33182(%rip), %rdi
    00001e33: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7731
.Ltmp3937:
    00001e38: 	leaq	DATAat0x33158(%rip), %rdi
    00001e3f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7743
.Ltmp3940:
    00001e44: 	leaq	DATAat0x33182(%rip), %rdi
    00001e4b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7755
.Ltmp3944:
    00001e50: 	leaq	DATAat0x33158(%rip), %rdi
    00001e57: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7767
.Ltmp3947:
    00001e5c: 	leaq	DATAat0x33182(%rip), %rdi
    00001e63: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7779
.Ltmp3950:
    00001e68: 	leaq	DATAat0x33158(%rip), %rdi
    00001e6f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7791
.Ltmp3953:
    00001e74: 	leaq	DATAat0x33182(%rip), %rdi
    00001e7b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7803
.Ltmp3959:
    00001e80: 	leaq	DATAat0x33158(%rip), %rdi
    00001e87: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7815
.Ltmp3962:
    00001e8c: 	leaq	DATAat0x33182(%rip), %rdi
    00001e93: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7827
.Ltmp3965:
    00001e98: 	leaq	DATAat0x33158(%rip), %rdi
    00001e9f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7839
.Ltmp3968:
    00001ea4: 	leaq	DATAat0x33182(%rip), %rdi
    00001eab: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7851
.Ltmp3971:
    00001eb0: 	leaq	DATAat0x33158(%rip), %rdi
    00001eb7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7863
.Ltmp3974:
    00001ebc: 	leaq	DATAat0x33182(%rip), %rdi
    00001ec3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7875
.Ltmp3977:
    00001ec8: 	leaq	DATAat0x33158(%rip), %rdi
    00001ecf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7887
.Ltmp3980:
    00001ed4: 	leaq	DATAat0x33182(%rip), %rdi
    00001edb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7899
.Ltmp3982:
    00001ee0: 	leaq	DATAat0x33158(%rip), %rdi
    00001ee7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7911
.Ltmp3985:
    00001eec: 	leaq	DATAat0x33182(%rip), %rdi
    00001ef3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7923
.Ltmp3991:
    00001ef8: 	leaq	DATAat0x33158(%rip), %rdi
    00001eff: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7935
.Ltmp3994:
    00001f04: 	leaq	DATAat0x33182(%rip), %rdi
    00001f0b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7947
.Ltmp4000:
    00001f10: 	leaq	DATAat0x33158(%rip), %rdi
    00001f17: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7959
.Ltmp4003:
    00001f1c: 	leaq	DATAat0x33182(%rip), %rdi
    00001f23: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7971
.Ltmp4005:
    00001f28: 	leaq	DATAat0x33158(%rip), %rdi
    00001f2f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7983
.Ltmp4008:
    00001f34: 	leaq	DATAat0x33182(%rip), %rdi
    00001f3b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7995
.Ltmp4011:
    00001f40: 	leaq	DATAat0x33158(%rip), %rdi
    00001f47: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8007
.Ltmp4014:
    00001f4c: 	leaq	DATAat0x33182(%rip), %rdi
    00001f53: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8019
.Ltmp4018:
    00001f58: 	leaq	DATAat0x33158(%rip), %rdi
    00001f5f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8031
.Ltmp4021:
    00001f64: 	leaq	DATAat0x33182(%rip), %rdi
    00001f6b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8043
.Ltmp4027:
    00001f70: 	leaq	DATAat0x33158(%rip), %rdi
    00001f77: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8055
.Ltmp4030:
    00001f7c: 	leaq	DATAat0x33182(%rip), %rdi
    00001f83: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8067
.Ltmp4033:
    00001f88: 	leaq	DATAat0x33158(%rip), %rdi
    00001f8f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8079
.Ltmp4036:
    00001f94: 	leaq	DATAat0x33182(%rip), %rdi
    00001f9b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8091
.Ltmp4040:
    00001fa0: 	leaq	DATAat0x33158(%rip), %rdi
    00001fa7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8103
.Ltmp4043:
    00001fac: 	leaq	DATAat0x33182(%rip), %rdi
    00001fb3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8115
.Ltmp4057:
    00001fb8: 	callq	__stack_chk_fail@PLT # Offset: 8120
.Ltmp4059:
    00001fbd: 	movq	%rbx, %rdi
    00001fc0: 	jmp	.Ltmp4097 # Offset: 8128
.Ltmp4061:
    00001fc5: 	movq	%rbx, %rdi
    00001fc8: 	jmp	.Ltmp4098 # Offset: 8136
.Ltmp4063:
    00001fcd: 	movq	%rbx, %rdi
    00001fd0: 	jmp	.Ltmp4099 # Offset: 8144
.Ltmp4065:
    00001fd5: 	movq	%rbx, %rdi
    00001fd8: 	jmp	.Ltmp4100 # Offset: 8152
.Ltmp4067:
    00001fdd: 	movq	%rbx, %rdi
    00001fe0: 	jmp	.Ltmp4101 # Offset: 8160
.Ltmp4069:
    00001fe5: 	movq	%rbx, %rdi
    00001fe8: 	jmp	.Ltmp4102 # Offset: 8168
.Ltmp4071:
    00001fed: 	movq	%rbx, %rdi
    00001ff0: 	jmp	.Ltmp4103 # Offset: 8176
.Ltmp4073:
    00001ff5: 	movq	%rbx, %rdi
    00001ff8: 	jmp	.Ltmp4104 # Offset: 8184
.Ltmp4075:
    00001ffd: 	movq	%rbx, %rdi
    00002000: 	jmp	.Ltmp4105 # Offset: 8192
.Ltmp4077:
    00002005: 	movq	0x8(%rsp), %rdi
    0000200a: 	jmp	.Ltmp4106 # Offset: 8202
.Ltmp4079:
    0000200f: 	movq	%rbx, %rdi
    00002012: 	jmp	.Ltmp4107 # Offset: 8210
.Ltmp4081:
    00002017: 	movq	0x10(%rsp), %rdi
    0000201c: 	jmp	.Ltmp4108 # Offset: 8220
.Ltmp4083:
    00002021: 	movq	%rbx, %rdi
    00002024: 	jmp	.Ltmp4109 # Offset: 8228
.Ltmp4085:
    00002029: 	movq	%rbx, %rdi
    0000202c: 	jmp	.Ltmp4110 # Offset: 8236
.Ltmp4087:
    00002031: 	movq	%rbx, %rdi
    00002034: 	jmp	.Ltmp4111 # Offset: 8244
.Ltmp4089:
    00002039: 	movq	%rbx, %rdi
    0000203c: 	jmp	.Ltmp4112 # Offset: 8252
.Ltmp4091:
    00002041: 	movq	%rbx, %rdi
    00002044: 	jmp	.Ltmp4113 # Offset: 8260
.Ltmp4093:
    00002049: 	movq	%rbx, %rdi
    0000204c: 	jmp	.Ltmp4114 # Offset: 8268
.Ltmp4095:
    00002051: 	movq	%rbx, %rdi
    00002054: 	jmp	.Ltmp4115 # Offset: 8276
.Ltmp3917:
    00002059: 	leaq	DATAat0x33158(%rip), %rdi
    00002060: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8288
    00002065: 	endbr64
.Ltmp4117:
    00002069: 	movq	%rax, %rbp
    0000206c: 	jmp	.Ltmp4116 # Offset: 8300
    00002071: 	endbr64
    00002075: 	jmp	.Ltmp4117 # Offset: 8309
    00002077: 	endbr64
    0000207b: 	jmp	.Ltmp4117 # Offset: 8315
    0000207d: 	endbr64
.Ltmp4119:
    00002081: 	movq	%rax, %rbp
    00002084: 	jmp	.Ltmp4118 # Offset: 8324
    00002089: 	endbr64
    0000208d: 	jmp	.Ltmp4119 # Offset: 8333
    0000208f: 	endbr64
    00002093: 	jmp	.Ltmp4117 # Offset: 8339
    00002095: 	endbr64
    00002099: 	movq	%rax, %rbp
    0000209c: 	jmp	.Ltmp4120 # Offset: 8348
    0000209e: 	endbr64
.Ltmp4122:
    000020a2: 	movq	%rax, %rbp
    000020a5: 	jmp	.Ltmp4121 # Offset: 8357
    000020a7: 	endbr64
    000020ab: 	jmp	.Ltmp4122 # Offset: 8363
.Ltmp4121:
    000020ad: 	movq	0xd0(%rsp), %rdi
    000020b5: 	cmpq	%rbx, %rdi
    000020b8: 	je	.Ltmp4120 # Offset: 8376
    000020ba: 	movq	0xe0(%rsp), %rax
    000020c2: 	leaq	0x1(%rax), %rsi
    000020c6: 	callq	_ZdlPvm@PLT # Offset: 8390
.Ltmp4120:
    000020cb: 	movq	0x50(%rsp), %rdi
    000020d0: 	leaq	0x60(%rsp), %rax
    000020d5: 	cmpq	%rax, %rdi
    000020d8: 	je	.Ltmp4123 # Offset: 8408
    000020da: 	movq	0x60(%rsp), %rax
    000020df: 	leaq	0x1(%rax), %rsi
    000020e3: 	callq	_ZdlPvm@PLT # Offset: 8419
.Ltmp4123:
    000020e8: 	movl	$0x8, %esi
    000020ed: 	movq	%r12, %rdi
    000020f0: 	movq	%rbp, %rbx
    000020f3: 	callq	_ZdlPvm@PLT # Offset: 8435
.Ltmp4134:
    000020f8: 	movq	0x30(%rsp), %rdi
    000020fd: 	cmpq	0x18(%rsp), %rdi
    00002102: 	je	.Ltmp4124 # Offset: 8450
    00002104: 	movq	0x40(%rsp), %rax
    00002109: 	leaq	0x1(%rax), %rsi
    0000210d: 	callq	_ZdlPvm@PLT # Offset: 8461
.Ltmp4124:
    00002112: 	movq	%rbx, %rdi
    00002115: 	callq	_Unwind_Resume@PLT # Offset: 8469
    0000211a: 	endbr64
.Ltmp4126:
    0000211e: 	movq	%rax, %rbp
    00002121: 	jmp	.Ltmp4125 # Offset: 8481
    00002123: 	endbr64
    00002127: 	jmp	.Ltmp4126 # Offset: 8487
    00002129: 	endbr64
    0000212d: 	jmp	.Ltmp4126 # Offset: 8493
    0000212f: 	endbr64
    00002133: 	jmp	.Ltmp4126 # Offset: 8499
.Ltmp4125:
    00002135: 	movq	0xd0(%rsp), %rdi
    0000213d: 	cmpq	%rbx, %rdi
    00002140: 	je	.Ltmp4127 # Offset: 8512
    00002142: 	movq	0xe0(%rsp), %rax
    0000214a: 	leaq	0x1(%rax), %rsi
    0000214e: 	callq	_ZdlPvm@PLT # Offset: 8526
.Ltmp4127:
    00002153: 	movq	0x70(%rsp), %rdi
    00002158: 	cmpq	0x8(%rsp), %rdi
    0000215d: 	je	.Ltmp4120 # Offset: 8541
    00002163: 	movq	0x80(%rsp), %rax
    0000216b: 	leaq	0x1(%rax), %rsi
    0000216f: 	callq	_ZdlPvm@PLT # Offset: 8559
    00002174: 	jmp	.Ltmp4120 # Offset: 8564
    00002179: 	endbr64
    0000217d: 	jmp	.Ltmp4126 # Offset: 8573
    0000217f: 	endbr64
    00002183: 	jmp	.Ltmp4126 # Offset: 8579
    00002185: 	endbr64
    00002189: 	jmp	.Ltmp4117 # Offset: 8585
    0000218e: 	endbr64
    00002192: 	jmp	.Ltmp4117 # Offset: 8594
    00002197: 	endbr64
    0000219b: 	jmp	.Ltmp4117 # Offset: 8603
    000021a0: 	endbr64
    000021a4: 	jmp	.Ltmp4122 # Offset: 8612
    000021a9: 	endbr64
    000021ad: 	jmp	.Ltmp4126 # Offset: 8621
    000021b2: 	endbr64
    000021b6: 	jmp	.Ltmp4126 # Offset: 8630
    000021bb: 	endbr64
    000021bf: 	jmp	.Ltmp4122 # Offset: 8639
    000021c4: 	endbr64
    000021c8: 	jmp	.Ltmp4122 # Offset: 8648
    000021cd: 	endbr64
    000021d1: 	jmp	.Ltmp4122 # Offset: 8657
    000021d6: 	endbr64
    000021da: 	jmp	.Ltmp4122 # Offset: 8666
    000021df: 	endbr64
    000021e3: 	jmp	.Ltmp4122 # Offset: 8675
    000021e8: 	endbr64
    000021ec: 	jmp	.Ltmp4122 # Offset: 8684
    000021f1: 	endbr64
.Ltmp4128:
    000021f5: 	movq	%rax, %rbp
    000021f8: 	jmp	.Ltmp4127 # Offset: 8696
    000021fd: 	endbr64
    00002201: 	jmp	.Ltmp4128 # Offset: 8705
    00002203: 	endbr64
    00002207: 	jmp	.Ltmp4122 # Offset: 8711
    0000220c: 	endbr64
    00002210: 	jmp	.Ltmp4122 # Offset: 8720
    00002215: 	endbr64
    00002219: 	jmp	.Ltmp4122 # Offset: 8729
    0000221e: 	endbr64
    00002222: 	jmp	.Ltmp4122 # Offset: 8738
    00002227: 	endbr64
    0000222b: 	jmp	.Ltmp4119 # Offset: 8747
    00002230: 	endbr64
.Ltmp4133:
    00002234: 	movq	%rax, %rbp
    00002237: 	jmp	.Ltmp4129 # Offset: 8759
    00002239: 	endbr64
    0000223d: 	movq	%rax, %rbp
    00002240: 	jmp	.Ltmp4130 # Offset: 8768
.Ltmp4116:
    00002242: 	movq	0xd0(%rsp), %rdi
    0000224a: 	cmpq	%rbx, %rdi
    0000224d: 	je	.Ltmp4123 # Offset: 8781
.Ltmp4136:
    00002253: 	movq	0xe0(%rsp), %rax
    0000225b: 	leaq	0x1(%rax), %rsi
    0000225f: 	callq	_ZdlPvm@PLT # Offset: 8799
    00002264: 	jmp	.Ltmp4123 # Offset: 8804
.Ltmp4129:
    00002269: 	movq	0xd0(%rsp), %rdi
    00002271: 	cmpq	%rbx, %rdi
    00002274: 	je	.Ltmp4130 # Offset: 8820
    00002276: 	movq	0xe0(%rsp), %rax
    0000227e: 	leaq	0x1(%rax), %rsi
    00002282: 	callq	_ZdlPvm@PLT # Offset: 8834
.Ltmp4130:
    00002287: 	movq	0xb0(%rsp), %rdi
    0000228f: 	leaq	0xc0(%rsp), %rax
    00002297: 	cmpq	%rax, %rdi
    0000229a: 	je	.Ltmp4131 # Offset: 8858
    0000229c: 	movq	0xc0(%rsp), %rax
    000022a4: 	leaq	0x1(%rax), %rsi
    000022a8: 	callq	_ZdlPvm@PLT # Offset: 8872
.Ltmp4131:
    000022ad: 	movq	0x90(%rsp), %rdi
    000022b5: 	cmpq	0x10(%rsp), %rdi
    000022ba: 	je	.Ltmp4127 # Offset: 8890
    000022c0: 	movq	0xa0(%rsp), %rax
    000022c8: 	leaq	0x1(%rax), %rsi
    000022cc: 	callq	_ZdlPvm@PLT # Offset: 8908
    000022d1: 	jmp	.Ltmp4127 # Offset: 8913
    000022d6: 	endbr64
    000022da: 	jmp	.Ltmp4126 # Offset: 8922
    000022df: 	endbr64
    000022e3: 	jmp	.Ltmp4126 # Offset: 8931
    000022e8: 	endbr64
.Ltmp4132:
    000022ec: 	movq	%rax, %rbp
    000022ef: 	jmp	.Ltmp4131 # Offset: 8943
    000022f1: 	endbr64
    000022f5: 	jmp	.Ltmp4132 # Offset: 8949
    000022f7: 	endbr64
    000022fb: 	jmp	.Ltmp4119 # Offset: 8955
    00002300: 	endbr64
    00002304: 	jmp	.Ltmp4119 # Offset: 8964
    00002309: 	endbr64
    0000230d: 	jmp	.Ltmp4119 # Offset: 8973
    00002312: 	endbr64
    00002316: 	jmp	.Ltmp4119 # Offset: 8982
    0000231b: 	endbr64
    0000231f: 	jmp	.Ltmp4119 # Offset: 8991
    00002324: 	endbr64
    00002328: 	jmp	.Ltmp4119 # Offset: 9000
    0000232d: 	endbr64
    00002331: 	jmp	.Ltmp4133 # Offset: 9009
    00002336: 	endbr64
    0000233a: 	jmp	.Ltmp4133 # Offset: 9018
    0000233f: 	endbr64
    00002343: 	jmp	.Ltmp4117 # Offset: 9027
    00002348: 	endbr64
    0000234c: 	jmp	.Ltmp4117 # Offset: 9036
    00002351: 	endbr64
    00002355: 	jmp	.Ltmp4117 # Offset: 9045
    0000235a: 	endbr64
    0000235e: 	jmp	.Ltmp4117 # Offset: 9054
    00002363: 	endbr64
    00002367: 	jmp	.Ltmp4133 # Offset: 9063
    0000236c: 	endbr64
    00002370: 	movq	%rax, %rbx
    00002373: 	jmp	.Ltmp4134 # Offset: 9075
    00002378: 	endbr64
    0000237c: 	movq	%rax, %rbp
    0000237f: 	jmp	.Ltmp4135 # Offset: 9087
    00002381: 	endbr64
    00002385: 	movq	%rax, %rbp
    00002388: 	jmp	.Ltmp4123 # Offset: 9096
.Ltmp4135:
    0000238d: 	movq	0xd0(%rsp), %rdi
    00002395: 	leaq	0xe0(%rsp), %rax
    0000239d: 	cmpq	%rax, %rdi
    000023a0: 	jne	.Ltmp4136 # Offset: 9120
    000023a6: 	jmp	.Ltmp4123 # Offset: 9126
    000023ab: 	endbr64
    000023af: 	jmp	.Ltmp4133 # Offset: 9135
    000023b4: 	endbr64
    000023b8: 	jmp	.Ltmp4133 # Offset: 9144
    000023bd: 	endbr64
    000023c1: 	jmp	.Ltmp4133 # Offset: 9153
    000023c6: 	endbr64
    000023ca: 	jmp	.Ltmp4133 # Offset: 9162
    000023cf: 	endbr64
    000023d3: 	jmp	.Ltmp4133 # Offset: 9171
    000023d8: 	endbr64
    000023dc: 	jmp	.Ltmp4133 # Offset: 9180
    000023e1: 	endbr64
    000023e5: 	jmp	.Ltmp4133 # Offset: 9189
    000023ea: 	endbr64
    000023ee: 	jmp	.Ltmp4133 # Offset: 9198
    000023f3: 	endbr64
    000023f7: 	jmp	.Ltmp4119 # Offset: 9207
    000023fc: 	endbr64
    00002400: 	jmp	.Ltmp4119 # Offset: 9216
    00002405: 	endbr64
    00002409: 	jmp	.Ltmp4119 # Offset: 9225
.Ltmp4118:
    0000240e: 	movq	0xd0(%rsp), %rdi
    00002416: 	cmpq	%rbx, %rdi
    00002419: 	je	.Ltmp4131 # Offset: 9241
    0000241f: 	movq	0xe0(%rsp), %rax
    00002427: 	leaq	0x1(%rax), %rsi
    0000242b: 	callq	_ZdlPvm@PLT # Offset: 9259
    00002430: 	jmp	.Ltmp4131 # Offset: 9264
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeImEvv"

Binary Function "_Z21testOneFunction_equalIaPFaPKaiaEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 393
  State       : disassembled
  Address     : 0x2e080
  Size        : 0x224
  MaxSize     : 0x230
  Offset      : 0x2e080
  Section     : .text
  Orc Section : .local.text._Z21testOneFunction_equalIaPFaPKaiaEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0392:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x331c8(%rip), %r15
    0000000d: 	pushq	%r14
    0000000f: 	movq	%rcx, %r14
    00000012: 	pushq	%r13
    00000014: 	movq	%rdi, %r13
    00000017: 	pushq	%r12
    00000019: 	movl	%esi, %r12d
    0000001c: 	pushq	%rbp
    0000001d: 	movq	%rdx, %rbp
    00000020: 	pushq	%rbx
    00000021: 	xorl	%ebx, %ebx
    00000023: 	subq	$0x18, %rsp
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x8(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	callq	clock@PLT # Offset: 55
    0000003c: 	movsd	init_value(%rip), %xmm0
    00000044: 	movq	%rax, start_time(%rip)
    0000004b: 	movl	iterations(%rip), %eax
    00000051: 	testl	%eax, %eax
    00000053: 	jle	.Ltmp4137 # Offset: 83
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp4139:
    00000058: 	cvttsd2si	%xmm0, %edx
    0000005c: 	movl	%r12d, %esi
    0000005f: 	movq	%r13, %rdi
    00000062: 	movsbl	%dl, %edx
    00000065: 	callq	*%rbp # Offset: 101
    00000067: 	movsd	init_value(%rip), %xmm0
    0000006f: 	movl	%eax, %r8d
    00000072: 	cvttsd2si	%xmm0, %eax
    00000076: 	cmpb	%al, %r8b
    00000079: 	je	.Ltmp4138 # Offset: 121
    0000007b: 	movq	(%r14), %rdx
    0000007e: 	xorl	%eax, %eax
    00000080: 	movq	%r15, %rsi
    00000083: 	movl	$0x1, %edi
    00000088: 	addl	$0x1, %ebx
    0000008b: 	callq	__printf_chk@PLT # Offset: 139
    00000090: 	cmpl	%ebx, iterations(%rip)
    00000096: 	jle	.Ltmp4137 # Offset: 150
    00000098: 	movsd	init_value(%rip), %xmm0
    000000a0: 	jmp	.Ltmp4139 # Offset: 160
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4138:
    000000a8: 	addl	$0x1, %ebx
    000000ab: 	cmpl	%ebx, iterations(%rip)
    000000b1: 	jg	.Ltmp4139 # Offset: 177
.Ltmp4137:
    000000b3: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000ba: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000c1: 	subq	$0x20, %rax
    000000c5: 	cmpq	%rax, %rbx
    000000c8: 	je	.Ltmp4140 # Offset: 200
    000000ce: 	leaq	0x10(%rbx), %rdi
    000000d2: 	movq	0x8(%r14), %r12
    000000d6: 	movq	%rdi, (%rbx)
    000000d9: 	movq	(%r14), %rbp
    000000dc: 	movq	%rbp, %rax
    000000df: 	addq	%r12, %rax
    000000e2: 	je	.Ltmp4141 # Offset: 226
    000000e4: 	testq	%rbp, %rbp
    000000e7: 	je	.Ltmp4142 # Offset: 231
.Ltmp4141:
    000000ed: 	movq	%r12, (%rsp)
    000000f1: 	cmpq	$0xf, %r12
    000000f5: 	ja	.Ltmp4143 # Offset: 245
    000000fb: 	cmpq	$0x1, %r12
    000000ff: 	jne	.Ltmp4144 # Offset: 255
    00000105: 	movzbl	(%rbp), %eax
    00000109: 	movb	%al, 0x10(%rbx)
.Ltmp4147:
    0000010c: 	movq	%r12, 0x8(%rbx)
    00000110: 	movb	$0x0, (%rdi,%r12)
    00000115: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000011c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000123: 	addq	$0x20, %rax
    00000127: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000012e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000135: 	je	.Ltmp4145 # Offset: 309
.Ltmp4148:
    0000013b: 	movq	-0x20(%rax), %rbp
    0000013f: 	callq	clock@PLT # Offset: 319
    00000144: 	movq	%rax, end_time(%rip)
    0000014b: 	movq	0x8(%rsp), %rdx
    00000150: 	subq	%fs:0x28, %rdx
    00000159: 	jne	.Ltmp4146 # Offset: 345
    0000015f: 	subq	start_time(%rip), %rax
    00000166: 	pxor	%xmm0, %xmm0
    0000016a: 	movq	%rbp, %rdi
    0000016d: 	cvtsi2sd	%rax, %xmm0
    00000172: 	divsd	DATAat0x335b0(%rip), %xmm0
    0000017a: 	addq	$0x18, %rsp
    0000017e: 	popq	%rbx
    0000017f: 	popq	%rbp
    00000180: 	popq	%r12
    00000182: 	popq	%r13
    00000184: 	popq	%r14
    00000186: 	popq	%r15
    00000188: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 392
    0000018d: 	nopl	(%rax) # Size: 3
.Ltmp4143:
    00000190: 	movq	%rbx, %rdi
    00000193: 	movq	%rsp, %rsi
    00000196: 	xorl	%edx, %edx
    00000198: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 408
    0000019d: 	movq	%rax, (%rbx)
    000001a0: 	movq	%rax, %rdi
    000001a3: 	movq	(%rsp), %rax
    000001a7: 	movq	%rax, 0x10(%rbx)
.Ltmp4149:
    000001ab: 	movq	%r12, %rdx
    000001ae: 	movq	%rbp, %rsi
    000001b1: 	callq	memcpy@PLT # Offset: 433
    000001b6: 	movq	(%rsp), %r12
    000001ba: 	movq	(%rbx), %rdi
    000001bd: 	jmp	.Ltmp4147 # Offset: 445
    000001c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4140:
    000001c8: 	movq	%r14, %rsi
    000001cb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001d2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 466
    000001d7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001de: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001e5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001ec: 	jne	.Ltmp4148 # Offset: 492
.Ltmp4145:
    000001f2: 	movq	-0x8(%rdx), %rax
    000001f6: 	addq	$0x200, %rax
    000001fc: 	jmp	.Ltmp4148 # Offset: 508
    00000201: 	nopl	(%rax) # Size: 7
.Ltmp4144:
    00000208: 	testq	%r12, %r12
    0000020b: 	je	.Ltmp4147 # Offset: 523
    00000211: 	jmp	.Ltmp4149 # Offset: 529
.Ltmp4146:
    00000213: 	callq	__stack_chk_fail@PLT # Offset: 531
.Ltmp4142:
    00000218: 	leaq	DATAat0x33158(%rip), %rdi
    0000021f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 543
DWARF CFI Instructions:
    <empty>
End of Function "_Z21testOneFunction_equalIaPFaPKaiaEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIaEvv" after disassembly {
  Number      : 394
  State       : disassembled
  Address     : 0x2e2b0
  Size        : 0x23e6
  MaxSize     : 0x23f0
  Offset      : 0x2e2b0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIaEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0393:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	$0x1f40, %edi
    0000000b: 	pushq	%r14
    0000000d: 	pushq	%r13
    0000000f: 	pushq	%r12
    00000011: 	pushq	%rbp
    00000012: 	pushq	%rbx
    00000013: 	subq	$0xf8, %rsp
    0000001a: 	movq	%fs:0x28, %rax
    00000023: 	movq	%rax, 0xe8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	leaq	0x30(%rsp), %rax
    00000032: 	movl	$0x38746e69, 0x30(%rsp)
    0000003a: 	movq	%rax, 0x8(%rsp)
    0000003f: 	movq	%rax, 0x20(%rsp)
    00000044: 	movl	$0x745f, %eax
    00000049: 	movw	%ax, 0x34(%rsp)
    0000004e: 	movq	$0x6, 0x28(%rsp)
    00000057: 	movb	$0x0, 0x36(%rsp)
    0000005c: 	callq	_Znam@PLT # Offset: 92
    00000061: 	movq	%rax, %r12
    00000064: 	cvttsd2si	init_value(%rip), %eax
    0000006c: 	movabsq	$0x101010101010101, %rdx
    00000076: 	leaq	0x8(%r12), %rdi
    0000007b: 	movq	%r12, %rcx
    0000007e: 	leaq	0xd0(%rsp), %rbx
    00000086: 	andq	$-0x8, %rdi
    0000008a: 	subq	%rdi, %rcx
    0000008d: 	movzbl	%al, %eax
    00000090: 	addl	$0x1f40, %ecx
    00000096: 	imulq	%rdx, %rax
    0000009a: 	shrl	$0x3, %ecx
    0000009d: 	movq	%rax, (%r12)
    000000a1: 	movq	%rax, 0x1f38(%r12)
    000000a9: 	rep		stosq	%rax, %es:(%rdi)
    000000ac: 	movq	%rbx, 0xc0(%rsp)
    000000b4: 	movq	0x20(%rsp), %rbp
    000000b9: 	movq	0x28(%rsp), %r13
    000000be: 	movq	%rbp, %rax
    000000c1: 	addq	%r13, %rax
    000000c4: 	je	.Ltmp4150 # Offset: 196
    000000c6: 	testq	%rbp, %rbp
    000000c9: 	je	.Ltmp4151 # Offset: 201
.Ltmp4150:
    000000cf: 	movq	%r13, 0x18(%rsp)
    000000d4: 	cmpq	$0xf, %r13
    000000d8: 	ja	.Ltmp4152 # Offset: 216
    000000de: 	cmpq	$0x1, %r13
    000000e2: 	jne	.Ltmp4153 # Offset: 226
    000000e8: 	movzbl	(%rbp), %eax
    000000ec: 	movb	%al, 0xd0(%rsp)
    000000f3: 	movq	%rbx, %rax
.Ltmp4294:
    000000f6: 	movq	%r13, 0xc8(%rsp)
    000000fe: 	movb	$0x0, (%rax,%r13)
    00000103: 	movabsq	$0x3fffffffffffffff, %rax
    0000010d: 	subq	0xc8(%rsp), %rax
    00000115: 	cmpq	$0x11, %rax
    00000119: 	jbe	.Ltmp4154 # Offset: 281
    0000011f: 	leaq	0xc0(%rsp), %rbp
    00000127: 	movl	$0x12, %edx
    0000012c: 	leaq	DATAat0x331d8(%rip), %rsi
    00000133: 	movq	%rbp, %rdi
    00000136: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 310
    0000013b: 	movq	%rbp, %rcx
    0000013e: 	leaq	_Z8bit_and1IaET_PKS0_iS0_(%rip), %rdx
    00000145: 	movl	$0x1f40, %esi
    0000014a: 	movq	%r12, %rdi
    0000014d: 	callq	_Z21testOneFunction_equalIaPFaPKaiaEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 333
    00000152: 	movq	0xc0(%rsp), %rdi
    0000015a: 	cmpq	%rbx, %rdi
    0000015d: 	je	.Ltmp4155 # Offset: 349
    0000015f: 	movq	0xd0(%rsp), %rax
    00000167: 	leaq	0x1(%rax), %rsi
    0000016b: 	callq	_ZdlPvm@PLT # Offset: 363
.Ltmp4155:
    00000170: 	movq	0x20(%rsp), %r14
    00000175: 	movq	0x28(%rsp), %r13
    0000017a: 	movq	%rbx, 0xc0(%rsp)
    00000182: 	movq	%r14, %rax
    00000185: 	addq	%r13, %rax
    00000188: 	je	.Ltmp4156 # Offset: 392
    0000018a: 	testq	%r14, %r14
    0000018d: 	je	.Ltmp4157 # Offset: 397
.Ltmp4156:
    00000193: 	movq	%r13, 0x18(%rsp)
    00000198: 	cmpq	$0xf, %r13
    0000019c: 	ja	.Ltmp4158 # Offset: 412
    000001a2: 	cmpq	$0x1, %r13
    000001a6: 	jne	.Ltmp4159 # Offset: 422
    000001ac: 	movzbl	(%r14), %eax
    000001b0: 	movb	%al, 0xd0(%rsp)
    000001b7: 	movq	%rbx, %rax
.Ltmp4298:
    000001ba: 	movq	%r13, 0xc8(%rsp)
    000001c2: 	movb	$0x0, (%rax,%r13)
    000001c7: 	movabsq	$0x3fffffffffffffff, %rax
    000001d1: 	subq	0xc8(%rsp), %rax
    000001d9: 	cmpq	$0x11, %rax
    000001dd: 	jbe	.Ltmp4160 # Offset: 477
    000001e3: 	movl	$0x12, %edx
    000001e8: 	leaq	DATAat0x331eb(%rip), %rsi
    000001ef: 	movq	%rbp, %rdi
    000001f2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 498
    000001f7: 	movq	%rbp, %rcx
    000001fa: 	leaq	_Z8bit_and2IaET_PKS0_iS0_(%rip), %rdx
    00000201: 	movl	$0x1f40, %esi
    00000206: 	movq	%r12, %rdi
    00000209: 	callq	_Z21testOneFunction_equalIaPFaPKaiaEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 521
    0000020e: 	movq	0xc0(%rsp), %rdi
    00000216: 	cmpq	%rbx, %rdi
    00000219: 	je	.Ltmp4161 # Offset: 537
    0000021b: 	movq	0xd0(%rsp), %rax
    00000223: 	leaq	0x1(%rax), %rsi
    00000227: 	callq	_ZdlPvm@PLT # Offset: 551
.Ltmp4161:
    0000022c: 	movq	0x20(%rsp), %r14
    00000231: 	movq	0x28(%rsp), %r13
    00000236: 	movq	%rbx, 0xc0(%rsp)
    0000023e: 	movq	%r14, %rax
    00000241: 	addq	%r13, %rax
    00000244: 	je	.Ltmp4162 # Offset: 580
    00000246: 	testq	%r14, %r14
    00000249: 	je	.Ltmp4163 # Offset: 585
.Ltmp4162:
    0000024f: 	movq	%r13, 0x18(%rsp)
    00000254: 	cmpq	$0xf, %r13
    00000258: 	ja	.Ltmp4164 # Offset: 600
    0000025e: 	cmpq	$0x1, %r13
    00000262: 	jne	.Ltmp4165 # Offset: 610
    00000268: 	movzbl	(%r14), %eax
    0000026c: 	movb	%al, 0xd0(%rsp)
    00000273: 	movq	%rbx, %rax
.Ltmp4296:
    00000276: 	movq	%r13, 0xc8(%rsp)
    0000027e: 	movb	$0x0, (%rax,%r13)
    00000283: 	movabsq	$0x3fffffffffffffff, %rax
    0000028d: 	subq	0xc8(%rsp), %rax
    00000295: 	cmpq	$0x11, %rax
    00000299: 	jbe	.Ltmp4166 # Offset: 665
    0000029f: 	movl	$0x12, %edx
    000002a4: 	leaq	DATAat0x331fe(%rip), %rsi
    000002ab: 	movq	%rbp, %rdi
    000002ae: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 686
    000002b3: 	movq	%rbp, %rcx
    000002b6: 	leaq	_Z8bit_and3IaET_PKS0_iS0_(%rip), %rdx
    000002bd: 	movl	$0x1f40, %esi
    000002c2: 	movq	%r12, %rdi
    000002c5: 	callq	_Z21testOneFunction_equalIaPFaPKaiaEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 709
    000002ca: 	movq	0xc0(%rsp), %rdi
    000002d2: 	cmpq	%rbx, %rdi
    000002d5: 	je	.Ltmp4167 # Offset: 725
    000002d7: 	movq	0xd0(%rsp), %rax
    000002df: 	leaq	0x1(%rax), %rsi
    000002e3: 	callq	_ZdlPvm@PLT # Offset: 739
.Ltmp4167:
    000002e8: 	movq	0x20(%rsp), %r14
    000002ed: 	movq	0x28(%rsp), %r13
    000002f2: 	movq	%rbx, 0xc0(%rsp)
    000002fa: 	movq	%r14, %rax
    000002fd: 	addq	%r13, %rax
    00000300: 	je	.Ltmp4168 # Offset: 768
    00000302: 	testq	%r14, %r14
    00000305: 	je	.Ltmp4169 # Offset: 773
.Ltmp4168:
    0000030b: 	movq	%r13, 0x18(%rsp)
    00000310: 	cmpq	$0xf, %r13
    00000314: 	ja	.Ltmp4170 # Offset: 788
    0000031a: 	cmpq	$0x1, %r13
    0000031e: 	jne	.Ltmp4171 # Offset: 798
    00000324: 	movzbl	(%r14), %eax
    00000328: 	movb	%al, 0xd0(%rsp)
    0000032f: 	movq	%rbx, %rax
.Ltmp4300:
    00000332: 	movq	%r13, 0xc8(%rsp)
    0000033a: 	movb	$0x0, (%rax,%r13)
    0000033f: 	movabsq	$0x3fffffffffffffff, %rax
    00000349: 	subq	0xc8(%rsp), %rax
    00000351: 	cmpq	$0x11, %rax
    00000355: 	jbe	.Ltmp4172 # Offset: 853
    0000035b: 	movl	$0x12, %edx
    00000360: 	leaq	DATAat0x33211(%rip), %rsi
    00000367: 	movq	%rbp, %rdi
    0000036a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 874
    0000036f: 	movq	%rbp, %rcx
    00000372: 	leaq	_Z8bit_and4IaET_PKS0_iS0_(%rip), %rdx
    00000379: 	movl	$0x1f40, %esi
    0000037e: 	movq	%r12, %rdi
    00000381: 	callq	_Z21testOneFunction_equalIaPFaPKaiaEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 897
    00000386: 	movq	0xc0(%rsp), %rdi
    0000038e: 	cmpq	%rbx, %rdi
    00000391: 	je	.Ltmp4173 # Offset: 913
    00000393: 	movq	0xd0(%rsp), %rax
    0000039b: 	leaq	0x1(%rax), %rsi
    0000039f: 	callq	_ZdlPvm@PLT # Offset: 927
.Ltmp4173:
    000003a4: 	leaq	0x20(%rsp), %r13
    000003a9: 	leaq	DATAat0x33224(%rip), %rdx
    000003b0: 	movq	%rbp, %rdi
    000003b3: 	movq	%r13, %rsi
    000003b6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 950
    000003bb: 	movq	%rbp, %rcx
    000003be: 	leaq	_Z8bit_and5IaET_PKS0_iS0_(%rip), %rdx
    000003c5: 	movl	$0x1f40, %esi
    000003ca: 	movq	%r12, %rdi
    000003cd: 	callq	_Z21testOneFunction_equalIaPFaPKaiaEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 973
    000003d2: 	movq	0xc0(%rsp), %rdi
    000003da: 	cmpq	%rbx, %rdi
    000003dd: 	je	.Ltmp4174 # Offset: 989
    000003df: 	movq	0xd0(%rsp), %rax
    000003e7: 	leaq	0x1(%rax), %rsi
    000003eb: 	callq	_ZdlPvm@PLT # Offset: 1003
.Ltmp4174:
    000003f0: 	leaq	DATAat0x33237(%rip), %rdx
    000003f7: 	movq	%r13, %rsi
    000003fa: 	movq	%rbp, %rdi
    000003fd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1021
    00000402: 	movq	%rbp, %rcx
    00000405: 	leaq	_Z8bit_and6IaET_PKS0_iS0_(%rip), %rdx
    0000040c: 	movl	$0x1f40, %esi
    00000411: 	movq	%r12, %rdi
    00000414: 	callq	_Z21testOneFunction_equalIaPFaPKaiaEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1044
    00000419: 	movq	0xc0(%rsp), %rdi
    00000421: 	cmpq	%rbx, %rdi
    00000424: 	je	.Ltmp4175 # Offset: 1060
    00000426: 	movq	0xd0(%rsp), %rax
    0000042e: 	leaq	0x1(%rax), %rsi
    00000432: 	callq	_ZdlPvm@PLT # Offset: 1074
.Ltmp4175:
    00000437: 	leaq	DATAat0x3324a(%rip), %rdx
    0000043e: 	movq	%r13, %rsi
    00000441: 	movq	%rbp, %rdi
    00000444: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1092
    00000449: 	movq	%rbp, %rcx
    0000044c: 	leaq	_Z8bit_and7IaET_PKS0_iS0_(%rip), %rdx
    00000453: 	movl	$0x1f40, %esi
    00000458: 	movq	%r12, %rdi
    0000045b: 	callq	_Z21testOneFunction_equalIaPFaPKaiaEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1115
    00000460: 	movq	0xc0(%rsp), %rdi
    00000468: 	cmpq	%rbx, %rdi
    0000046b: 	je	.Ltmp4176 # Offset: 1131
    0000046d: 	movq	0xd0(%rsp), %rax
    00000475: 	leaq	0x1(%rax), %rsi
    00000479: 	callq	_ZdlPvm@PLT # Offset: 1145
.Ltmp4176:
    0000047e: 	leaq	DATAat0x3325d(%rip), %rdx
    00000485: 	movq	%r13, %rsi
    00000488: 	movq	%rbp, %rdi
    0000048b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1163
    00000490: 	movq	%rbp, %rcx
    00000493: 	leaq	_Z8bit_and8IaET_PKS0_iS0_(%rip), %rdx
    0000049a: 	movl	$0x1f40, %esi
    0000049f: 	movq	%r12, %rdi
    000004a2: 	callq	_Z21testOneFunction_equalIaPFaPKaiaEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1186
    000004a7: 	movq	0xc0(%rsp), %rdi
    000004af: 	cmpq	%rbx, %rdi
    000004b2: 	je	.Ltmp4177 # Offset: 1202
    000004b4: 	movq	0xd0(%rsp), %rax
    000004bc: 	leaq	0x1(%rax), %rsi
    000004c0: 	callq	_ZdlPvm@PLT # Offset: 1216
.Ltmp4177:
    000004c5: 	leaq	0x40(%rsp), %rdi
    000004ca: 	leaq	DATAat0x33270(%rip), %rdx
    000004d1: 	movq	%r13, %rsi
    000004d4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1236
    000004d9: 	movl	iterations(%rip), %esi
    000004df: 	movq	0x40(%rsp), %rdi
    000004e4: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 1252
    000004e9: 	movq	0x20(%rsp), %r15
    000004ee: 	movq	0x28(%rsp), %r14
    000004f3: 	movq	%rbx, 0xc0(%rsp)
    000004fb: 	movq	%r15, %rax
    000004fe: 	addq	%r14, %rax
    00000501: 	je	.Ltmp4178 # Offset: 1281
    00000503: 	testq	%r15, %r15
    00000506: 	je	.Ltmp4179 # Offset: 1286
.Ltmp4178:
    0000050c: 	movq	%r14, 0x18(%rsp)
    00000511: 	cmpq	$0xf, %r14
    00000515: 	ja	.Ltmp4180 # Offset: 1301
    0000051b: 	cmpq	$0x1, %r14
    0000051f: 	jne	.Ltmp4181 # Offset: 1311
    00000525: 	movzbl	(%r15), %eax
    00000529: 	movb	%al, 0xd0(%rsp)
    00000530: 	movq	%rbx, %rax
.Ltmp4302:
    00000533: 	movq	%r14, 0xc8(%rsp)
    0000053b: 	movb	$0x0, (%rax,%r14)
    00000540: 	movabsq	$0x3fffffffffffffff, %rax
    0000054a: 	subq	0xc8(%rsp), %rax
    00000552: 	cmpq	$0x10, %rax
    00000556: 	jbe	.Ltmp4182 # Offset: 1366
    0000055c: 	movl	$0x11, %edx
    00000561: 	leaq	DATAat0x33282(%rip), %rsi
    00000568: 	movq	%rbp, %rdi
    0000056b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1387
    00000570: 	movq	%rbp, %rcx
    00000573: 	leaq	_Z7bit_or1IaET_PKS0_iS0_(%rip), %rdx
    0000057a: 	movl	$0x1f40, %esi
    0000057f: 	movq	%r12, %rdi
    00000582: 	callq	_Z21testOneFunction_equalIaPFaPKaiaEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1410
    00000587: 	movq	0xc0(%rsp), %rdi
    0000058f: 	cmpq	%rbx, %rdi
    00000592: 	je	.Ltmp4183 # Offset: 1426
    00000594: 	movq	0xd0(%rsp), %rax
    0000059c: 	leaq	0x1(%rax), %rsi
    000005a0: 	callq	_ZdlPvm@PLT # Offset: 1440
.Ltmp4183:
    000005a5: 	leaq	DATAat0x33294(%rip), %rdx
    000005ac: 	movq	%r13, %rsi
    000005af: 	movq	%rbp, %rdi
    000005b2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1458
    000005b7: 	movq	%rbp, %rcx
    000005ba: 	leaq	_Z7bit_or2IaET_PKS0_iS0_(%rip), %rdx
    000005c1: 	movl	$0x1f40, %esi
    000005c6: 	movq	%r12, %rdi
    000005c9: 	callq	_Z21testOneFunction_equalIaPFaPKaiaEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1481
    000005ce: 	movq	0xc0(%rsp), %rdi
    000005d6: 	cmpq	%rbx, %rdi
    000005d9: 	je	.Ltmp4184 # Offset: 1497
    000005db: 	movq	0xd0(%rsp), %rax
    000005e3: 	leaq	0x1(%rax), %rsi
    000005e7: 	callq	_ZdlPvm@PLT # Offset: 1511
.Ltmp4184:
    000005ec: 	leaq	DATAat0x332a6(%rip), %rdx
    000005f3: 	movq	%r13, %rsi
    000005f6: 	movq	%rbp, %rdi
    000005f9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1529
    000005fe: 	movq	%rbp, %rcx
    00000601: 	leaq	_Z7bit_or3IaET_PKS0_iS0_(%rip), %rdx
    00000608: 	movl	$0x1f40, %esi
    0000060d: 	movq	%r12, %rdi
    00000610: 	callq	_Z21testOneFunction_equalIaPFaPKaiaEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1552
    00000615: 	movq	0xc0(%rsp), %rdi
    0000061d: 	cmpq	%rbx, %rdi
    00000620: 	je	.Ltmp4185 # Offset: 1568
    00000622: 	movq	0xd0(%rsp), %rax
    0000062a: 	leaq	0x1(%rax), %rsi
    0000062e: 	callq	_ZdlPvm@PLT # Offset: 1582
.Ltmp4185:
    00000633: 	leaq	DATAat0x332b8(%rip), %rdx
    0000063a: 	movq	%r13, %rsi
    0000063d: 	movq	%rbp, %rdi
    00000640: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1600
    00000645: 	movq	%rbp, %rcx
    00000648: 	leaq	_Z7bit_or4IaET_PKS0_iS0_(%rip), %rdx
    0000064f: 	movl	$0x1f40, %esi
    00000654: 	movq	%r12, %rdi
    00000657: 	callq	_Z21testOneFunction_equalIaPFaPKaiaEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1623
    0000065c: 	movq	0xc0(%rsp), %rdi
    00000664: 	cmpq	%rbx, %rdi
    00000667: 	je	.Ltmp4186 # Offset: 1639
    00000669: 	movq	0xd0(%rsp), %rax
    00000671: 	leaq	0x1(%rax), %rsi
    00000675: 	callq	_ZdlPvm@PLT # Offset: 1653
.Ltmp4186:
    0000067a: 	leaq	DATAat0x332ca(%rip), %rdx
    00000681: 	movq	%r13, %rsi
    00000684: 	movq	%rbp, %rdi
    00000687: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1671
    0000068c: 	movq	%rbp, %rcx
    0000068f: 	leaq	_Z7bit_or5IaET_PKS0_iS0_(%rip), %rdx
    00000696: 	movl	$0x1f40, %esi
    0000069b: 	movq	%r12, %rdi
    0000069e: 	callq	_Z21testOneFunction_equalIaPFaPKaiaEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1694
    000006a3: 	movq	0xc0(%rsp), %rdi
    000006ab: 	cmpq	%rbx, %rdi
    000006ae: 	je	.Ltmp4187 # Offset: 1710
    000006b0: 	movq	0xd0(%rsp), %rax
    000006b8: 	leaq	0x1(%rax), %rsi
    000006bc: 	callq	_ZdlPvm@PLT # Offset: 1724
.Ltmp4187:
    000006c1: 	movq	0x20(%rsp), %r15
    000006c6: 	movq	0x28(%rsp), %r14
    000006cb: 	movq	%rbx, 0xc0(%rsp)
    000006d3: 	movq	%r15, %rax
    000006d6: 	addq	%r14, %rax
    000006d9: 	je	.Ltmp4188 # Offset: 1753
    000006db: 	testq	%r15, %r15
    000006de: 	je	.Ltmp4189 # Offset: 1758
.Ltmp4188:
    000006e4: 	movq	%r14, 0x18(%rsp)
    000006e9: 	cmpq	$0xf, %r14
    000006ed: 	ja	.Ltmp4190 # Offset: 1773
    000006f3: 	cmpq	$0x1, %r14
    000006f7: 	jne	.Ltmp4191 # Offset: 1783
    000006fd: 	movzbl	(%r15), %eax
    00000701: 	movb	%al, 0xd0(%rsp)
    00000708: 	movq	%rbx, %rax
.Ltmp4306:
    0000070b: 	movq	%r14, 0xc8(%rsp)
    00000713: 	movb	$0x0, (%rax,%r14)
    00000718: 	movabsq	$0x3fffffffffffffff, %rax
    00000722: 	subq	0xc8(%rsp), %rax
    0000072a: 	cmpq	$0x10, %rax
    0000072e: 	jbe	.Ltmp4192 # Offset: 1838
    00000734: 	movl	$0x11, %edx
    00000739: 	leaq	DATAat0x332dc(%rip), %rsi
    00000740: 	movq	%rbp, %rdi
    00000743: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1859
    00000748: 	movq	%rbp, %rcx
    0000074b: 	leaq	_Z7bit_or6IaET_PKS0_iS0_(%rip), %rdx
    00000752: 	movl	$0x1f40, %esi
    00000757: 	movq	%r12, %rdi
    0000075a: 	callq	_Z21testOneFunction_equalIaPFaPKaiaEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1882
    0000075f: 	movq	0xc0(%rsp), %rdi
    00000767: 	cmpq	%rbx, %rdi
    0000076a: 	je	.Ltmp4193 # Offset: 1898
    0000076c: 	movq	0xd0(%rsp), %rax
    00000774: 	leaq	0x1(%rax), %rsi
    00000778: 	callq	_ZdlPvm@PLT # Offset: 1912
.Ltmp4193:
    0000077d: 	movq	0x20(%rsp), %r15
    00000782: 	movq	0x28(%rsp), %r14
    00000787: 	movq	%rbx, 0xc0(%rsp)
    0000078f: 	movq	%r15, %rax
    00000792: 	addq	%r14, %rax
    00000795: 	je	.Ltmp4194 # Offset: 1941
    00000797: 	testq	%r15, %r15
    0000079a: 	je	.Ltmp4195 # Offset: 1946
.Ltmp4194:
    000007a0: 	movq	%r14, 0x18(%rsp)
    000007a5: 	cmpq	$0xf, %r14
    000007a9: 	ja	.Ltmp4196 # Offset: 1961
    000007af: 	cmpq	$0x1, %r14
    000007b3: 	jne	.Ltmp4197 # Offset: 1971
    000007b9: 	movzbl	(%r15), %eax
    000007bd: 	movb	%al, 0xd0(%rsp)
    000007c4: 	movq	%rbx, %rax
.Ltmp4304:
    000007c7: 	movq	%r14, 0xc8(%rsp)
    000007cf: 	movb	$0x0, (%rax,%r14)
    000007d4: 	movabsq	$0x3fffffffffffffff, %rax
    000007de: 	subq	0xc8(%rsp), %rax
    000007e6: 	cmpq	$0x10, %rax
    000007ea: 	jbe	.Ltmp4198 # Offset: 2026
    000007f0: 	movl	$0x11, %edx
    000007f5: 	leaq	DATAat0x332ee(%rip), %rsi
    000007fc: 	movq	%rbp, %rdi
    000007ff: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2047
    00000804: 	movq	%rbp, %rcx
    00000807: 	leaq	_Z7bit_or7IaET_PKS0_iS0_(%rip), %rdx
    0000080e: 	movl	$0x1f40, %esi
    00000813: 	movq	%r12, %rdi
    00000816: 	callq	_Z21testOneFunction_equalIaPFaPKaiaEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2070
    0000081b: 	movq	0xc0(%rsp), %rdi
    00000823: 	cmpq	%rbx, %rdi
    00000826: 	je	.Ltmp4199 # Offset: 2086
    00000828: 	movq	0xd0(%rsp), %rax
    00000830: 	leaq	0x1(%rax), %rsi
    00000834: 	callq	_ZdlPvm@PLT # Offset: 2100
.Ltmp4199:
    00000839: 	leaq	DATAat0x33300(%rip), %rdx
    00000840: 	movq	%r13, %rsi
    00000843: 	movq	%rbp, %rdi
    00000846: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2118
    0000084b: 	movq	%rbp, %rcx
    0000084e: 	leaq	_Z7bit_or8IaET_PKS0_iS0_(%rip), %rdx
    00000855: 	movl	$0x1f40, %esi
    0000085a: 	movq	%r12, %rdi
    0000085d: 	callq	_Z21testOneFunction_equalIaPFaPKaiaEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2141
    00000862: 	movq	0xc0(%rsp), %rdi
    0000086a: 	cmpq	%rbx, %rdi
    0000086d: 	je	.Ltmp4200 # Offset: 2157
    0000086f: 	movq	0xd0(%rsp), %rax
    00000877: 	leaq	0x1(%rax), %rsi
    0000087b: 	callq	_ZdlPvm@PLT # Offset: 2171
.Ltmp4200:
    00000880: 	movq	0x20(%rsp), %r15
    00000885: 	leaq	0x70(%rsp), %rax
    0000088a: 	movq	0x28(%rsp), %r14
    0000088f: 	movq	%rax, (%rsp)
    00000893: 	movq	%rax, 0x60(%rsp)
    00000898: 	movq	%r15, %rax
    0000089b: 	addq	%r14, %rax
    0000089e: 	je	.Ltmp4201 # Offset: 2206
    000008a0: 	testq	%r15, %r15
    000008a3: 	je	.Ltmp4202 # Offset: 2211
.Ltmp4201:
    000008a9: 	movq	%r14, 0x18(%rsp)
    000008ae: 	cmpq	$0xf, %r14
    000008b2: 	ja	.Ltmp4203 # Offset: 2226
    000008b8: 	cmpq	$0x1, %r14
    000008bc: 	jne	.Ltmp4204 # Offset: 2236
    000008c2: 	movzbl	(%r15), %eax
    000008c6: 	movb	%al, 0x70(%rsp)
    000008ca: 	movq	(%rsp), %rax
.Ltmp4310:
    000008ce: 	movq	%r14, 0x68(%rsp)
    000008d3: 	movb	$0x0, (%rax,%r14)
    000008d8: 	movabsq	$0x3fffffffffffffff, %rax
    000008e2: 	subq	0x68(%rsp), %rax
    000008e7: 	cmpq	$0xf, %rax
    000008eb: 	jbe	.Ltmp4205 # Offset: 2283
    000008f1: 	leaq	0x60(%rsp), %rdi
    000008f6: 	movl	$0x10, %edx
    000008fb: 	leaq	DATAat0x33312(%rip), %rsi
    00000902: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2306
    00000907: 	movl	iterations(%rip), %esi
    0000090d: 	movq	0x60(%rsp), %rdi
    00000912: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 2322
    00000917: 	leaq	DATAat0x33323(%rip), %rdx
    0000091e: 	movq	%r13, %rsi
    00000921: 	movq	%rbp, %rdi
    00000924: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2340
    00000929: 	movq	%rbp, %rcx
    0000092c: 	leaq	_Z8bit_xor1IaET_PKS0_iS0_(%rip), %rdx
    00000933: 	movl	$0x1f40, %esi
    00000938: 	movq	%r12, %rdi
    0000093b: 	callq	_Z21testOneFunction_equalIaPFaPKaiaEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2363
    00000940: 	movq	0xc0(%rsp), %rdi
    00000948: 	cmpq	%rbx, %rdi
    0000094b: 	je	.Ltmp4206 # Offset: 2379
    0000094d: 	movq	0xd0(%rsp), %rax
    00000955: 	leaq	0x1(%rax), %rsi
    00000959: 	callq	_ZdlPvm@PLT # Offset: 2393
.Ltmp4206:
    0000095e: 	leaq	DATAat0x33336(%rip), %rdx
    00000965: 	movq	%r13, %rsi
    00000968: 	movq	%rbp, %rdi
    0000096b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2411
    00000970: 	movq	%rbp, %rcx
    00000973: 	leaq	_Z8bit_xor2IaET_PKS0_iS0_(%rip), %rdx
    0000097a: 	movl	$0x1f40, %esi
    0000097f: 	movq	%r12, %rdi
    00000982: 	callq	_Z21testOneFunction_equalIaPFaPKaiaEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2434
    00000987: 	movq	0xc0(%rsp), %rdi
    0000098f: 	cmpq	%rbx, %rdi
    00000992: 	je	.Ltmp4207 # Offset: 2450
    00000994: 	movq	0xd0(%rsp), %rax
    0000099c: 	leaq	0x1(%rax), %rsi
    000009a0: 	callq	_ZdlPvm@PLT # Offset: 2464
.Ltmp4207:
    000009a5: 	leaq	DATAat0x33349(%rip), %rdx
    000009ac: 	movq	%r13, %rsi
    000009af: 	movq	%rbp, %rdi
    000009b2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2482
    000009b7: 	movq	%rbp, %rcx
    000009ba: 	leaq	_Z8bit_xor3IaET_PKS0_iS0_(%rip), %rdx
    000009c1: 	movl	$0x1f40, %esi
    000009c6: 	movq	%r12, %rdi
    000009c9: 	callq	_Z21testOneFunction_equalIaPFaPKaiaEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2505
    000009ce: 	movq	0xc0(%rsp), %rdi
    000009d6: 	cmpq	%rbx, %rdi
    000009d9: 	je	.Ltmp4208 # Offset: 2521
    000009db: 	movq	0xd0(%rsp), %rax
    000009e3: 	leaq	0x1(%rax), %rsi
    000009e7: 	callq	_ZdlPvm@PLT # Offset: 2535
.Ltmp4208:
    000009ec: 	leaq	DATAat0x3335c(%rip), %rdx
    000009f3: 	movq	%r13, %rsi
    000009f6: 	movq	%rbp, %rdi
    000009f9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2553
    000009fe: 	movq	%rbp, %rcx
    00000a01: 	leaq	_Z8bit_xor4IaET_PKS0_iS0_(%rip), %rdx
    00000a08: 	movl	$0x1f40, %esi
    00000a0d: 	movq	%r12, %rdi
    00000a10: 	callq	_Z21testOneFunction_equalIaPFaPKaiaEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2576
    00000a15: 	movq	0xc0(%rsp), %rdi
    00000a1d: 	cmpq	%rbx, %rdi
    00000a20: 	je	.Ltmp4209 # Offset: 2592
    00000a22: 	movq	0xd0(%rsp), %rax
    00000a2a: 	leaq	0x1(%rax), %rsi
    00000a2e: 	callq	_ZdlPvm@PLT # Offset: 2606
.Ltmp4209:
    00000a33: 	movq	0x20(%rsp), %r15
    00000a38: 	movq	0x28(%rsp), %r14
    00000a3d: 	movq	%rbx, 0xc0(%rsp)
    00000a45: 	movq	%r15, %rax
    00000a48: 	addq	%r14, %rax
    00000a4b: 	je	.Ltmp4210 # Offset: 2635
    00000a4d: 	testq	%r15, %r15
    00000a50: 	je	.Ltmp4211 # Offset: 2640
.Ltmp4210:
    00000a56: 	movq	%r14, 0x18(%rsp)
    00000a5b: 	cmpq	$0xf, %r14
    00000a5f: 	ja	.Ltmp4212 # Offset: 2655
    00000a65: 	cmpq	$0x1, %r14
    00000a69: 	jne	.Ltmp4213 # Offset: 2665
    00000a6f: 	movzbl	(%r15), %eax
    00000a73: 	movb	%al, 0xd0(%rsp)
    00000a7a: 	movq	%rbx, %rax
.Ltmp4308:
    00000a7d: 	movq	%r14, 0xc8(%rsp)
    00000a85: 	movb	$0x0, (%rax,%r14)
    00000a8a: 	movabsq	$0x3fffffffffffffff, %rax
    00000a94: 	subq	0xc8(%rsp), %rax
    00000a9c: 	cmpq	$0x11, %rax
    00000aa0: 	jbe	.Ltmp4214 # Offset: 2720
    00000aa6: 	movl	$0x12, %edx
    00000aab: 	leaq	DATAat0x3336f(%rip), %rsi
    00000ab2: 	movq	%rbp, %rdi
    00000ab5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2741
    00000aba: 	movq	%rbp, %rcx
    00000abd: 	leaq	_Z8bit_xor5IaET_PKS0_iS0_(%rip), %rdx
    00000ac4: 	movl	$0x1f40, %esi
    00000ac9: 	movq	%r12, %rdi
    00000acc: 	callq	_Z21testOneFunction_equalIaPFaPKaiaEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2764
    00000ad1: 	movq	0xc0(%rsp), %rdi
    00000ad9: 	cmpq	%rbx, %rdi
    00000adc: 	je	.Ltmp4215 # Offset: 2780
    00000ade: 	movq	0xd0(%rsp), %rax
    00000ae6: 	leaq	0x1(%rax), %rsi
    00000aea: 	callq	_ZdlPvm@PLT # Offset: 2794
.Ltmp4215:
    00000aef: 	leaq	DATAat0x33382(%rip), %rdx
    00000af6: 	movq	%r13, %rsi
    00000af9: 	movq	%rbp, %rdi
    00000afc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2812
    00000b01: 	movq	%rbp, %rcx
    00000b04: 	leaq	_Z8bit_xor6IaET_PKS0_iS0_(%rip), %rdx
    00000b0b: 	movl	$0x1f40, %esi
    00000b10: 	movq	%r12, %rdi
    00000b13: 	callq	_Z21testOneFunction_equalIaPFaPKaiaEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2835
    00000b18: 	movq	0xc0(%rsp), %rdi
    00000b20: 	cmpq	%rbx, %rdi
    00000b23: 	je	.Ltmp4216 # Offset: 2851
    00000b25: 	movq	0xd0(%rsp), %rax
    00000b2d: 	leaq	0x1(%rax), %rsi
    00000b31: 	callq	_ZdlPvm@PLT # Offset: 2865
.Ltmp4216:
    00000b36: 	leaq	DATAat0x33395(%rip), %rdx
    00000b3d: 	movq	%r13, %rsi
    00000b40: 	movq	%rbp, %rdi
    00000b43: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2883
    00000b48: 	movq	%rbp, %rcx
    00000b4b: 	leaq	_Z8bit_xor7IaET_PKS0_iS0_(%rip), %rdx
    00000b52: 	movl	$0x1f40, %esi
    00000b57: 	movq	%r12, %rdi
    00000b5a: 	callq	_Z21testOneFunction_equalIaPFaPKaiaEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2906
    00000b5f: 	movq	0xc0(%rsp), %rdi
    00000b67: 	cmpq	%rbx, %rdi
    00000b6a: 	je	.Ltmp4217 # Offset: 2922
    00000b6c: 	movq	0xd0(%rsp), %rax
    00000b74: 	leaq	0x1(%rax), %rsi
    00000b78: 	callq	_ZdlPvm@PLT # Offset: 2936
.Ltmp4217:
    00000b7d: 	movq	0x20(%rsp), %r15
    00000b82: 	movq	0x28(%rsp), %r14
    00000b87: 	movq	%rbx, 0xc0(%rsp)
    00000b8f: 	movq	%r15, %rax
    00000b92: 	addq	%r14, %rax
    00000b95: 	je	.Ltmp4218 # Offset: 2965
    00000b97: 	testq	%r15, %r15
    00000b9a: 	je	.Ltmp4219 # Offset: 2970
.Ltmp4218:
    00000ba0: 	movq	%r14, 0x18(%rsp)
    00000ba5: 	cmpq	$0xf, %r14
    00000ba9: 	ja	.Ltmp4220 # Offset: 2985
    00000baf: 	cmpq	$0x1, %r14
    00000bb3: 	jne	.Ltmp4221 # Offset: 2995
    00000bb9: 	movzbl	(%r15), %eax
    00000bbd: 	movb	%al, 0xd0(%rsp)
    00000bc4: 	movq	%rbx, %rax
.Ltmp4314:
    00000bc7: 	movq	%r14, 0xc8(%rsp)
    00000bcf: 	movb	$0x0, (%rax,%r14)
    00000bd4: 	movabsq	$0x3fffffffffffffff, %rax
    00000bde: 	subq	0xc8(%rsp), %rax
    00000be6: 	cmpq	$0x11, %rax
    00000bea: 	jbe	.Ltmp4222 # Offset: 3050
    00000bf0: 	movl	$0x12, %edx
    00000bf5: 	leaq	DATAat0x333a8(%rip), %rsi
    00000bfc: 	movq	%rbp, %rdi
    00000bff: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3071
    00000c04: 	movq	%rbp, %rcx
    00000c07: 	leaq	_Z8bit_xor8IaET_PKS0_iS0_(%rip), %rdx
    00000c0e: 	movl	$0x1f40, %esi
    00000c13: 	movq	%r12, %rdi
    00000c16: 	callq	_Z21testOneFunction_equalIaPFaPKaiaEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3094
    00000c1b: 	movq	0xc0(%rsp), %rdi
    00000c23: 	cmpq	%rbx, %rdi
    00000c26: 	je	.Ltmp4223 # Offset: 3110
    00000c28: 	movq	0xd0(%rsp), %rax
    00000c30: 	leaq	0x1(%rax), %rsi
    00000c34: 	callq	_ZdlPvm@PLT # Offset: 3124
.Ltmp4223:
    00000c39: 	leaq	0x80(%rsp), %rdi
    00000c41: 	leaq	DATAat0x333bb(%rip), %rdx
    00000c48: 	movq	%r13, %rsi
    00000c4b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3147
    00000c50: 	movl	iterations(%rip), %esi
    00000c56: 	movq	0x80(%rsp), %rdi
    00000c5e: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 3166
    00000c63: 	movq	0x20(%rsp), %r15
    00000c68: 	movq	0x28(%rsp), %r14
    00000c6d: 	movq	%rbx, 0xc0(%rsp)
    00000c75: 	movq	%r15, %rax
    00000c78: 	addq	%r14, %rax
    00000c7b: 	je	.Ltmp4224 # Offset: 3195
    00000c7d: 	testq	%r15, %r15
    00000c80: 	je	.Ltmp4225 # Offset: 3200
.Ltmp4224:
    00000c86: 	movq	%r14, 0x18(%rsp)
    00000c8b: 	cmpq	$0xf, %r14
    00000c8f: 	ja	.Ltmp4226 # Offset: 3215
    00000c95: 	cmpq	$0x1, %r14
    00000c99: 	jne	.Ltmp4227 # Offset: 3225
    00000c9f: 	movzbl	(%r15), %eax
    00000ca3: 	movb	%al, 0xd0(%rsp)
    00000caa: 	movq	%rbx, %rax
.Ltmp4312:
    00000cad: 	movq	%r14, 0xc8(%rsp)
    00000cb5: 	movb	$0x0, (%rax,%r14)
    00000cba: 	movabsq	$0x3fffffffffffffff, %rax
    00000cc4: 	subq	0xc8(%rsp), %rax
    00000ccc: 	cmpq	$0x15, %rax
    00000cd0: 	jbe	.Ltmp4228 # Offset: 3280
    00000cd6: 	movl	$0x16, %edx
    00000cdb: 	leaq	DATAat0x333cd(%rip), %rsi
    00000ce2: 	movq	%rbp, %rdi
    00000ce5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3301
    00000cea: 	movq	%rbp, %r8
    00000ced: 	movl	$0x1, %edx
    00000cf2: 	movl	$0x1f40, %esi
    00000cf7: 	movq	%r12, %rdi
    00000cfa: 	leaq	_Z10logic_and1IaEbPKT_ib(%rip), %rcx
    00000d01: 	callq	_Z23testOneFunction_logicalIaPFbPKaibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3329
    00000d06: 	movq	0xc0(%rsp), %rdi
    00000d0e: 	cmpq	%rbx, %rdi
    00000d11: 	je	.Ltmp4229 # Offset: 3345
    00000d13: 	movq	0xd0(%rsp), %rax
    00000d1b: 	leaq	0x1(%rax), %rsi
    00000d1f: 	callq	_ZdlPvm@PLT # Offset: 3359
.Ltmp4229:
    00000d24: 	leaq	DATAat0x333e4(%rip), %rdx
    00000d2b: 	movq	%r13, %rsi
    00000d2e: 	movq	%rbp, %rdi
    00000d31: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3377
    00000d36: 	movq	%rbp, %r8
    00000d39: 	movl	$0x1, %edx
    00000d3e: 	movl	$0x1f40, %esi
    00000d43: 	movq	%r12, %rdi
    00000d46: 	leaq	_Z10logic_and2IaEbPKT_ib(%rip), %rcx
    00000d4d: 	callq	_Z23testOneFunction_logicalIaPFbPKaibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3405
    00000d52: 	movq	0xc0(%rsp), %rdi
    00000d5a: 	cmpq	%rbx, %rdi
    00000d5d: 	je	.Ltmp4230 # Offset: 3421
    00000d5f: 	movq	0xd0(%rsp), %rax
    00000d67: 	leaq	0x1(%rax), %rsi
    00000d6b: 	callq	_ZdlPvm@PLT # Offset: 3435
.Ltmp4230:
    00000d70: 	movq	0x20(%rsp), %r15
    00000d75: 	movq	0x28(%rsp), %r14
    00000d7a: 	movq	%rbx, 0xc0(%rsp)
    00000d82: 	movq	%r15, %rax
    00000d85: 	addq	%r14, %rax
    00000d88: 	je	.Ltmp4231 # Offset: 3464
    00000d8a: 	testq	%r15, %r15
    00000d8d: 	je	.Ltmp4232 # Offset: 3469
.Ltmp4231:
    00000d93: 	movq	%r14, 0x18(%rsp)
    00000d98: 	cmpq	$0xf, %r14
    00000d9c: 	ja	.Ltmp4233 # Offset: 3484
    00000da2: 	cmpq	$0x1, %r14
    00000da6: 	jne	.Ltmp4234 # Offset: 3494
    00000dac: 	movzbl	(%r15), %eax
    00000db0: 	movb	%al, 0xd0(%rsp)
    00000db7: 	movq	%rbx, %rax
.Ltmp4320:
    00000dba: 	movq	%r14, 0xc8(%rsp)
    00000dc2: 	movb	$0x0, (%rax,%r14)
    00000dc7: 	movabsq	$0x3fffffffffffffff, %rax
    00000dd1: 	subq	0xc8(%rsp), %rax
    00000dd9: 	cmpq	$0x15, %rax
    00000ddd: 	jbe	.Ltmp4235 # Offset: 3549
    00000de3: 	movl	$0x16, %edx
    00000de8: 	leaq	DATAat0x333fb(%rip), %rsi
    00000def: 	movq	%rbp, %rdi
    00000df2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3570
    00000df7: 	movq	%rbp, %r8
    00000dfa: 	movl	$0x1, %edx
    00000dff: 	movl	$0x1f40, %esi
    00000e04: 	movq	%r12, %rdi
    00000e07: 	leaq	_Z10logic_and3IaEbPKT_ib(%rip), %rcx
    00000e0e: 	callq	_Z23testOneFunction_logicalIaPFbPKaibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3598
    00000e13: 	movq	0xc0(%rsp), %rdi
    00000e1b: 	cmpq	%rbx, %rdi
    00000e1e: 	je	.Ltmp4236 # Offset: 3614
    00000e20: 	movq	0xd0(%rsp), %rax
    00000e28: 	leaq	0x1(%rax), %rsi
    00000e2c: 	callq	_ZdlPvm@PLT # Offset: 3628
.Ltmp4236:
    00000e31: 	leaq	DATAat0x33412(%rip), %rdx
    00000e38: 	movq	%r13, %rsi
    00000e3b: 	movq	%rbp, %rdi
    00000e3e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3646
    00000e43: 	movq	%rbp, %r8
    00000e46: 	movl	$0x1, %edx
    00000e4b: 	movl	$0x1f40, %esi
    00000e50: 	movq	%r12, %rdi
    00000e53: 	leaq	_Z10logic_and4IaEbPKT_ib(%rip), %rcx
    00000e5a: 	callq	_Z23testOneFunction_logicalIaPFbPKaibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3674
    00000e5f: 	movq	0xc0(%rsp), %rdi
    00000e67: 	cmpq	%rbx, %rdi
    00000e6a: 	je	.Ltmp4237 # Offset: 3690
    00000e6c: 	movq	0xd0(%rsp), %rax
    00000e74: 	leaq	0x1(%rax), %rsi
    00000e78: 	callq	_ZdlPvm@PLT # Offset: 3704
.Ltmp4237:
    00000e7d: 	leaq	DATAat0x33429(%rip), %rdx
    00000e84: 	movq	%r13, %rsi
    00000e87: 	movq	%rbp, %rdi
    00000e8a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3722
    00000e8f: 	movq	%rbp, %r8
    00000e92: 	movl	$0x1, %edx
    00000e97: 	movl	$0x1f40, %esi
    00000e9c: 	movq	%r12, %rdi
    00000e9f: 	leaq	_Z10logic_and5IaEbPKT_ib(%rip), %rcx
    00000ea6: 	callq	_Z23testOneFunction_logicalIaPFbPKaibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3750
    00000eab: 	movq	0xc0(%rsp), %rdi
    00000eb3: 	cmpq	%rbx, %rdi
    00000eb6: 	je	.Ltmp4238 # Offset: 3766
    00000eb8: 	movq	0xd0(%rsp), %rax
    00000ec0: 	leaq	0x1(%rax), %rsi
    00000ec4: 	callq	_ZdlPvm@PLT # Offset: 3780
.Ltmp4238:
    00000ec9: 	leaq	DATAat0x33440(%rip), %rdx
    00000ed0: 	movq	%r13, %rsi
    00000ed3: 	movq	%rbp, %rdi
    00000ed6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3798
    00000edb: 	movq	%rbp, %r8
    00000ede: 	movl	$0x1, %edx
    00000ee3: 	movl	$0x1f40, %esi
    00000ee8: 	movq	%r12, %rdi
    00000eeb: 	leaq	_Z10logic_and6IaEbPKT_ib(%rip), %rcx
    00000ef2: 	callq	_Z23testOneFunction_logicalIaPFbPKaibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3826
    00000ef7: 	movq	0xc0(%rsp), %rdi
    00000eff: 	cmpq	%rbx, %rdi
    00000f02: 	je	.Ltmp4239 # Offset: 3842
    00000f04: 	movq	0xd0(%rsp), %rax
    00000f0c: 	leaq	0x1(%rax), %rsi
    00000f10: 	callq	_ZdlPvm@PLT # Offset: 3856
.Ltmp4239:
    00000f15: 	leaq	DATAat0x33457(%rip), %rdx
    00000f1c: 	movq	%r13, %rsi
    00000f1f: 	movq	%rbp, %rdi
    00000f22: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3874
    00000f27: 	movq	%rbp, %r8
    00000f2a: 	movl	$0x1, %edx
    00000f2f: 	movl	$0x1f40, %esi
    00000f34: 	movq	%r12, %rdi
    00000f37: 	leaq	_Z10logic_and7IaEbPKT_ib(%rip), %rcx
    00000f3e: 	callq	_Z23testOneFunction_logicalIaPFbPKaibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3902
    00000f43: 	movq	0xc0(%rsp), %rdi
    00000f4b: 	cmpq	%rbx, %rdi
    00000f4e: 	je	.Ltmp4240 # Offset: 3918
    00000f50: 	movq	0xd0(%rsp), %rax
    00000f58: 	leaq	0x1(%rax), %rsi
    00000f5c: 	callq	_ZdlPvm@PLT # Offset: 3932
.Ltmp4240:
    00000f61: 	leaq	DATAat0x3346e(%rip), %rdx
    00000f68: 	movq	%r13, %rsi
    00000f6b: 	movq	%rbp, %rdi
    00000f6e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3950
    00000f73: 	movq	%rbp, %r8
    00000f76: 	movl	$0x1, %edx
    00000f7b: 	movl	$0x1f40, %esi
    00000f80: 	movq	%r12, %rdi
    00000f83: 	leaq	_Z10logic_and8IaEbPKT_ib(%rip), %rcx
    00000f8a: 	callq	_Z23testOneFunction_logicalIaPFbPKaibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3978
    00000f8f: 	movq	0xc0(%rsp), %rdi
    00000f97: 	cmpq	%rbx, %rdi
    00000f9a: 	je	.Ltmp4241 # Offset: 3994
    00000f9c: 	movq	0xd0(%rsp), %rax
    00000fa4: 	leaq	0x1(%rax), %rsi
    00000fa8: 	callq	_ZdlPvm@PLT # Offset: 4008
.Ltmp4241:
    00000fad: 	leaq	0xa0(%rsp), %rdi
    00000fb5: 	leaq	DATAat0x33485(%rip), %rdx
    00000fbc: 	movq	%r13, %rsi
    00000fbf: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4031
    00000fc4: 	movl	iterations(%rip), %esi
    00000fca: 	movq	0xa0(%rsp), %rdi
    00000fd2: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 4050
    00000fd7: 	movq	0x20(%rsp), %r15
    00000fdc: 	movq	0x28(%rsp), %r14
    00000fe1: 	movq	%rbx, 0xc0(%rsp)
    00000fe9: 	movq	%r15, %rax
    00000fec: 	addq	%r14, %rax
    00000fef: 	je	.Ltmp4242 # Offset: 4079
    00000ff1: 	testq	%r15, %r15
    00000ff4: 	je	.Ltmp4243 # Offset: 4084
.Ltmp4242:
    00000ffa: 	movq	%r14, 0x18(%rsp)
    00000fff: 	cmpq	$0xf, %r14
    00001003: 	ja	.Ltmp4244 # Offset: 4099
    00001009: 	cmpq	$0x1, %r14
    0000100d: 	jne	.Ltmp4245 # Offset: 4109
    00001013: 	movzbl	(%r15), %eax
    00001017: 	movb	%al, 0xd0(%rsp)
    0000101e: 	movq	%rbx, %rax
.Ltmp4318:
    00001021: 	movq	%r14, 0xc8(%rsp)
    00001029: 	movb	$0x0, (%rax,%r14)
    0000102e: 	movabsq	$0x3fffffffffffffff, %rax
    00001038: 	subq	0xc8(%rsp), %rax
    00001040: 	cmpq	$0x14, %rax
    00001044: 	jbe	.Ltmp4246 # Offset: 4164
    0000104a: 	movl	$0x15, %edx
    0000104f: 	leaq	DATAat0x3349b(%rip), %rsi
    00001056: 	movq	%rbp, %rdi
    00001059: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4185
    0000105e: 	movq	%rbp, %r8
    00001061: 	leaq	_Z9logic_or1IaEbPKT_ib(%rip), %rcx
    00001068: 	xorl	%edx, %edx
    0000106a: 	movq	%r12, %rdi
    0000106d: 	movl	$0x1f40, %esi
    00001072: 	callq	_Z23testOneFunction_logicalIaPFbPKaibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4210
    00001077: 	movq	0xc0(%rsp), %rdi
    0000107f: 	cmpq	%rbx, %rdi
    00001082: 	je	.Ltmp4247 # Offset: 4226
    00001084: 	movq	0xd0(%rsp), %rax
    0000108c: 	leaq	0x1(%rax), %rsi
    00001090: 	callq	_ZdlPvm@PLT # Offset: 4240
.Ltmp4247:
    00001095: 	leaq	DATAat0x334b1(%rip), %rdx
    0000109c: 	movq	%r13, %rsi
    0000109f: 	movq	%rbp, %rdi
    000010a2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4258
    000010a7: 	movq	%rbp, %r8
    000010aa: 	leaq	_Z12logic_or_optIaEbPKT_ib(%rip), %rcx
    000010b1: 	xorl	%edx, %edx
    000010b3: 	movq	%r12, %rdi
    000010b6: 	movl	$0x1f40, %esi
    000010bb: 	callq	_Z23testOneFunction_logicalIaPFbPKaibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4283
    000010c0: 	movq	0xc0(%rsp), %rdi
    000010c8: 	cmpq	%rbx, %rdi
    000010cb: 	je	.Ltmp4248 # Offset: 4299
    000010cd: 	movq	0xd0(%rsp), %rax
    000010d5: 	leaq	0x1(%rax), %rsi
    000010d9: 	callq	_ZdlPvm@PLT # Offset: 4313
.Ltmp4248:
    000010de: 	leaq	DATAat0x334ce(%rip), %rdx
    000010e5: 	movq	%r13, %rsi
    000010e8: 	movq	%rbp, %rdi
    000010eb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4331
    000010f0: 	movq	%rbp, %r8
    000010f3: 	leaq	_Z9logic_or2IaEbPKT_ib(%rip), %rcx
    000010fa: 	xorl	%edx, %edx
    000010fc: 	movq	%r12, %rdi
    000010ff: 	movl	$0x1f40, %esi
    00001104: 	callq	_Z23testOneFunction_logicalIaPFbPKaibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4356
    00001109: 	movq	0xc0(%rsp), %rdi
    00001111: 	cmpq	%rbx, %rdi
    00001114: 	je	.Ltmp4249 # Offset: 4372
    00001116: 	movq	0xd0(%rsp), %rax
    0000111e: 	leaq	0x1(%rax), %rsi
    00001122: 	callq	_ZdlPvm@PLT # Offset: 4386
.Ltmp4249:
    00001127: 	movq	0x20(%rsp), %r15
    0000112c: 	movq	0x28(%rsp), %r14
    00001131: 	movq	%rbx, 0xc0(%rsp)
    00001139: 	movq	%r15, %rax
    0000113c: 	addq	%r14, %rax
    0000113f: 	je	.Ltmp4250 # Offset: 4415
    00001141: 	testq	%r15, %r15
    00001144: 	je	.Ltmp4251 # Offset: 4420
.Ltmp4250:
    0000114a: 	movq	%r14, 0x18(%rsp)
    0000114f: 	cmpq	$0xf, %r14
    00001153: 	ja	.Ltmp4252 # Offset: 4435
    00001159: 	cmpq	$0x1, %r14
    0000115d: 	jne	.Ltmp4253 # Offset: 4445
    00001163: 	movzbl	(%r15), %eax
    00001167: 	movb	%al, 0xd0(%rsp)
    0000116e: 	movq	%rbx, %rax
.Ltmp4316:
    00001171: 	movq	%r14, 0xc8(%rsp)
    00001179: 	movb	$0x0, (%rax,%r14)
    0000117e: 	movabsq	$0x3fffffffffffffff, %rax
    00001188: 	subq	0xc8(%rsp), %rax
    00001190: 	cmpq	$0x14, %rax
    00001194: 	jbe	.Ltmp4254 # Offset: 4500
    0000119a: 	movl	$0x15, %edx
    0000119f: 	leaq	DATAat0x334e4(%rip), %rsi
    000011a6: 	movq	%rbp, %rdi
    000011a9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4521
    000011ae: 	movq	%rbp, %r8
    000011b1: 	leaq	_Z9logic_or3IaEbPKT_ib(%rip), %rcx
    000011b8: 	xorl	%edx, %edx
    000011ba: 	movq	%r12, %rdi
    000011bd: 	movl	$0x1f40, %esi
    000011c2: 	callq	_Z23testOneFunction_logicalIaPFbPKaibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4546
    000011c7: 	movq	0xc0(%rsp), %rdi
    000011cf: 	cmpq	%rbx, %rdi
    000011d2: 	je	.Ltmp4255 # Offset: 4562
    000011d4: 	movq	0xd0(%rsp), %rax
    000011dc: 	leaq	0x1(%rax), %rsi
    000011e0: 	callq	_ZdlPvm@PLT # Offset: 4576
.Ltmp4255:
    000011e5: 	movq	0x20(%rsp), %r15
    000011ea: 	movq	0x28(%rsp), %r14
    000011ef: 	movq	%rbx, 0xc0(%rsp)
    000011f7: 	movq	%r15, %rax
    000011fa: 	addq	%r14, %rax
    000011fd: 	je	.Ltmp4256 # Offset: 4605
    000011ff: 	testq	%r15, %r15
    00001202: 	je	.Ltmp4257 # Offset: 4610
.Ltmp4256:
    00001208: 	movq	%r14, 0x18(%rsp)
    0000120d: 	cmpq	$0xf, %r14
    00001211: 	ja	.Ltmp4258 # Offset: 4625
    00001217: 	cmpq	$0x1, %r14
    0000121b: 	jne	.Ltmp4259 # Offset: 4635
    00001221: 	movzbl	(%r15), %eax
    00001225: 	movb	%al, 0xd0(%rsp)
    0000122c: 	movq	%rbx, %rax
.Ltmp4322:
    0000122f: 	movq	%r14, 0xc8(%rsp)
    00001237: 	movb	$0x0, (%rax,%r14)
    0000123c: 	movabsq	$0x3fffffffffffffff, %rax
    00001246: 	subq	0xc8(%rsp), %rax
    0000124e: 	cmpq	$0x14, %rax
    00001252: 	jbe	.Ltmp4260 # Offset: 4690
    00001258: 	movl	$0x15, %edx
    0000125d: 	leaq	DATAat0x334fa(%rip), %rsi
    00001264: 	movq	%rbp, %rdi
    00001267: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4711
    0000126c: 	movq	%rbp, %r8
    0000126f: 	leaq	_Z9logic_or4IaEbPKT_ib(%rip), %rcx
    00001276: 	xorl	%edx, %edx
    00001278: 	movq	%r12, %rdi
    0000127b: 	movl	$0x1f40, %esi
    00001280: 	callq	_Z23testOneFunction_logicalIaPFbPKaibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4736
    00001285: 	movq	0xc0(%rsp), %rdi
    0000128d: 	cmpq	%rbx, %rdi
    00001290: 	je	.Ltmp4261 # Offset: 4752
    00001292: 	movq	0xd0(%rsp), %rax
    0000129a: 	leaq	0x1(%rax), %rsi
    0000129e: 	callq	_ZdlPvm@PLT # Offset: 4766
.Ltmp4261:
    000012a3: 	movq	0x20(%rsp), %r15
    000012a8: 	movq	0x28(%rsp), %r14
    000012ad: 	movq	%rbx, 0xc0(%rsp)
    000012b5: 	movq	%r15, %rax
    000012b8: 	addq	%r14, %rax
    000012bb: 	je	.Ltmp4262 # Offset: 4795
    000012bd: 	testq	%r15, %r15
    000012c0: 	je	.Ltmp4263 # Offset: 4800
.Ltmp4262:
    000012c6: 	movq	%r14, 0x18(%rsp)
    000012cb: 	cmpq	$0xf, %r14
    000012cf: 	ja	.Ltmp4264 # Offset: 4815
    000012d5: 	cmpq	$0x1, %r14
    000012d9: 	jne	.Ltmp4265 # Offset: 4825
    000012df: 	movzbl	(%r15), %eax
    000012e3: 	movb	%al, 0xd0(%rsp)
    000012ea: 	movq	%rbx, %rax
.Ltmp4330:
    000012ed: 	movq	%r14, 0xc8(%rsp)
    000012f5: 	movb	$0x0, (%rax,%r14)
    000012fa: 	movabsq	$0x3fffffffffffffff, %rax
    00001304: 	subq	0xc8(%rsp), %rax
    0000130c: 	cmpq	$0x14, %rax
    00001310: 	jbe	.Ltmp4266 # Offset: 4880
    00001316: 	movl	$0x15, %edx
    0000131b: 	leaq	DATAat0x33510(%rip), %rsi
    00001322: 	movq	%rbp, %rdi
    00001325: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4901
    0000132a: 	movq	%rbp, %r8
    0000132d: 	leaq	_Z9logic_or5IaEbPKT_ib(%rip), %rcx
    00001334: 	xorl	%edx, %edx
    00001336: 	movq	%r12, %rdi
    00001339: 	movl	$0x1f40, %esi
    0000133e: 	callq	_Z23testOneFunction_logicalIaPFbPKaibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4926
    00001343: 	movq	0xc0(%rsp), %rdi
    0000134b: 	cmpq	%rbx, %rdi
    0000134e: 	je	.Ltmp4267 # Offset: 4942
    00001350: 	movq	0xd0(%rsp), %rax
    00001358: 	leaq	0x1(%rax), %rsi
    0000135c: 	callq	_ZdlPvm@PLT # Offset: 4956
.Ltmp4267:
    00001361: 	leaq	DATAat0x33526(%rip), %rdx
    00001368: 	movq	%r13, %rsi
    0000136b: 	movq	%rbp, %rdi
    0000136e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4974
    00001373: 	movq	%rbp, %r8
    00001376: 	leaq	_Z9logic_or6IaEbPKT_ib(%rip), %rcx
    0000137d: 	xorl	%edx, %edx
    0000137f: 	movq	%r12, %rdi
    00001382: 	movl	$0x1f40, %esi
    00001387: 	callq	_Z23testOneFunction_logicalIaPFbPKaibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4999
    0000138c: 	movq	0xc0(%rsp), %rdi
    00001394: 	cmpq	%rbx, %rdi
    00001397: 	je	.Ltmp4268 # Offset: 5015
    00001399: 	movq	0xd0(%rsp), %rax
    000013a1: 	leaq	0x1(%rax), %rsi
    000013a5: 	callq	_ZdlPvm@PLT # Offset: 5029
.Ltmp4268:
    000013aa: 	movq	0x20(%rsp), %r14
    000013af: 	movq	0x28(%rsp), %r13
    000013b4: 	movq	%rbx, 0xc0(%rsp)
    000013bc: 	movq	%r14, %rax
    000013bf: 	addq	%r13, %rax
    000013c2: 	je	.Ltmp4269 # Offset: 5058
    000013c4: 	testq	%r14, %r14
    000013c7: 	je	.Ltmp4270 # Offset: 5063
.Ltmp4269:
    000013cd: 	movq	%r13, 0x18(%rsp)
    000013d2: 	cmpq	$0xf, %r13
    000013d6: 	ja	.Ltmp4271 # Offset: 5078
    000013dc: 	cmpq	$0x1, %r13
    000013e0: 	jne	.Ltmp4272 # Offset: 5088
    000013e6: 	movzbl	(%r14), %eax
    000013ea: 	movb	%al, 0xd0(%rsp)
    000013f1: 	movq	%rbx, %rax
.Ltmp4328:
    000013f4: 	movq	%r13, 0xc8(%rsp)
    000013fc: 	movb	$0x0, (%rax,%r13)
    00001401: 	movabsq	$0x3fffffffffffffff, %rax
    0000140b: 	subq	0xc8(%rsp), %rax
    00001413: 	cmpq	$0x14, %rax
    00001417: 	jbe	.Ltmp4273 # Offset: 5143
    0000141d: 	movl	$0x15, %edx
    00001422: 	leaq	DATAat0x3353c(%rip), %rsi
    00001429: 	movq	%rbp, %rdi
    0000142c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5164
    00001431: 	movq	%rbp, %r8
    00001434: 	leaq	_Z9logic_or7IaEbPKT_ib(%rip), %rcx
    0000143b: 	xorl	%edx, %edx
    0000143d: 	movq	%r12, %rdi
    00001440: 	movl	$0x1f40, %esi
    00001445: 	callq	_Z23testOneFunction_logicalIaPFbPKaibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5189
    0000144a: 	movq	0xc0(%rsp), %rdi
    00001452: 	cmpq	%rbx, %rdi
    00001455: 	je	.Ltmp4274 # Offset: 5205
    00001457: 	movq	0xd0(%rsp), %rax
    0000145f: 	leaq	0x1(%rax), %rsi
    00001463: 	callq	_ZdlPvm@PLT # Offset: 5219
.Ltmp4274:
    00001468: 	movq	0x20(%rsp), %r14
    0000146d: 	movq	0x28(%rsp), %r13
    00001472: 	movq	%rbx, 0xc0(%rsp)
    0000147a: 	movq	%r14, %rax
    0000147d: 	addq	%r13, %rax
    00001480: 	je	.Ltmp4275 # Offset: 5248
    00001482: 	testq	%r14, %r14
    00001485: 	je	.Ltmp4276 # Offset: 5253
.Ltmp4275:
    0000148b: 	movq	%r13, 0x18(%rsp)
    00001490: 	cmpq	$0xf, %r13
    00001494: 	ja	.Ltmp4277 # Offset: 5268
    0000149a: 	cmpq	$0x1, %r13
    0000149e: 	jne	.Ltmp4278 # Offset: 5278
    000014a4: 	movzbl	(%r14), %eax
    000014a8: 	movb	%al, 0xd0(%rsp)
    000014af: 	movq	%rbx, %rax
.Ltmp4326:
    000014b2: 	movq	%r13, 0xc8(%rsp)
    000014ba: 	movb	$0x0, (%rax,%r13)
    000014bf: 	movabsq	$0x3fffffffffffffff, %rax
    000014c9: 	subq	0xc8(%rsp), %rax
    000014d1: 	cmpq	$0x14, %rax
    000014d5: 	jbe	.Ltmp4279 # Offset: 5333
    000014db: 	movl	$0x15, %edx
    000014e0: 	leaq	DATAat0x33552(%rip), %rsi
    000014e7: 	movq	%rbp, %rdi
    000014ea: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5354
    000014ef: 	movq	%rbp, %r8
    000014f2: 	leaq	_Z9logic_or8IaEbPKT_ib(%rip), %rcx
    000014f9: 	xorl	%edx, %edx
    000014fb: 	movq	%r12, %rdi
    000014fe: 	movl	$0x1f40, %esi
    00001503: 	callq	_Z23testOneFunction_logicalIaPFbPKaibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5379
    00001508: 	movq	0xc0(%rsp), %rdi
    00001510: 	cmpq	%rbx, %rdi
    00001513: 	je	.Ltmp4280 # Offset: 5395
    00001515: 	movq	0xd0(%rsp), %rax
    0000151d: 	leaq	0x1(%rax), %rsi
    00001521: 	callq	_ZdlPvm@PLT # Offset: 5409
.Ltmp4280:
    00001526: 	movq	0x20(%rsp), %r14
    0000152b: 	movq	0x28(%rsp), %r13
    00001530: 	movq	%rbx, 0xc0(%rsp)
    00001538: 	movq	%r14, %rax
    0000153b: 	addq	%r13, %rax
    0000153e: 	je	.Ltmp4281 # Offset: 5438
    00001540: 	testq	%r14, %r14
    00001543: 	je	.Ltmp4282 # Offset: 5443
.Ltmp4281:
    00001549: 	movq	%r13, 0x18(%rsp)
    0000154e: 	cmpq	$0xf, %r13
    00001552: 	ja	.Ltmp4283 # Offset: 5458
    00001558: 	cmpq	$0x1, %r13
    0000155c: 	jne	.Ltmp4284 # Offset: 5468
    00001562: 	movzbl	(%r14), %eax
    00001566: 	movb	%al, 0xd0(%rsp)
    0000156d: 	movq	%rbx, %rax
.Ltmp4324:
    00001570: 	movq	%r13, 0xc8(%rsp)
    00001578: 	movb	$0x0, (%rax,%r13)
    0000157d: 	movabsq	$0x3fffffffffffffff, %rax
    00001587: 	subq	0xc8(%rsp), %rax
    0000158f: 	cmpq	$0x13, %rax
    00001593: 	jbe	.Ltmp4285 # Offset: 5523
    00001599: 	movl	$0x14, %edx
    0000159e: 	leaq	DATAat0x33568(%rip), %rsi
    000015a5: 	movq	%rbp, %rdi
    000015a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5544
    000015ad: 	movl	iterations(%rip), %esi
    000015b3: 	movq	0xc0(%rsp), %rdi
    000015bb: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 5563
    000015c0: 	movq	0xc0(%rsp), %rdi
    000015c8: 	cmpq	%rbx, %rdi
    000015cb: 	je	.Ltmp4286 # Offset: 5579
    000015cd: 	movq	0xd0(%rsp), %rax
    000015d5: 	leaq	0x1(%rax), %rsi
    000015d9: 	callq	_ZdlPvm@PLT # Offset: 5593
.Ltmp4286:
    000015de: 	movq	0xa0(%rsp), %rdi
    000015e6: 	leaq	0xb0(%rsp), %rax
    000015ee: 	cmpq	%rax, %rdi
    000015f1: 	je	.Ltmp4287 # Offset: 5617
    000015f3: 	movq	0xb0(%rsp), %rax
    000015fb: 	leaq	0x1(%rax), %rsi
    000015ff: 	callq	_ZdlPvm@PLT # Offset: 5631
.Ltmp4287:
    00001604: 	movq	0x80(%rsp), %rdi
    0000160c: 	leaq	0x90(%rsp), %rax
    00001614: 	cmpq	%rax, %rdi
    00001617: 	je	.Ltmp4288 # Offset: 5655
    00001619: 	movq	0x90(%rsp), %rax
    00001621: 	leaq	0x1(%rax), %rsi
    00001625: 	callq	_ZdlPvm@PLT # Offset: 5669
.Ltmp4288:
    0000162a: 	movq	0x60(%rsp), %rdi
    0000162f: 	cmpq	(%rsp), %rdi
    00001633: 	je	.Ltmp4289 # Offset: 5683
    00001635: 	movq	0x70(%rsp), %rax
    0000163a: 	leaq	0x1(%rax), %rsi
    0000163e: 	callq	_ZdlPvm@PLT # Offset: 5694
.Ltmp4289:
    00001643: 	movq	0x40(%rsp), %rdi
    00001648: 	leaq	0x50(%rsp), %rax
    0000164d: 	cmpq	%rax, %rdi
    00001650: 	je	.Ltmp4290 # Offset: 5712
    00001652: 	movq	0x50(%rsp), %rax
    00001657: 	leaq	0x1(%rax), %rsi
    0000165b: 	callq	_ZdlPvm@PLT # Offset: 5723
.Ltmp4290:
    00001660: 	movq	%r12, %rdi
    00001663: 	movl	$0x1, %esi
    00001668: 	callq	_ZdlPvm@PLT # Offset: 5736
    0000166d: 	movq	0x20(%rsp), %rdi
    00001672: 	cmpq	0x8(%rsp), %rdi
    00001677: 	je	.Ltmp4291 # Offset: 5751
    00001679: 	movq	0x30(%rsp), %rax
    0000167e: 	leaq	0x1(%rax), %rsi
    00001682: 	callq	_ZdlPvm@PLT # Offset: 5762
.Ltmp4291:
    00001687: 	movq	0xe8(%rsp), %rax
    0000168f: 	subq	%fs:0x28, %rax
    00001698: 	jne	.Ltmp4292 # Offset: 5784
    0000169e: 	addq	$0xf8, %rsp
    000016a5: 	popq	%rbx
    000016a6: 	popq	%rbp
    000016a7: 	popq	%r12
    000016a9: 	popq	%r13
    000016ab: 	popq	%r14
    000016ad: 	popq	%r15
    000016af: 	retq # Offset: 5807
.Ltmp4153:
    000016b0: 	testq	%r13, %r13
    000016b3: 	jne	.Ltmp4293 # Offset: 5811
    000016b9: 	movq	%rbx, %rax
    000016bc: 	jmp	.Ltmp4294 # Offset: 5820
    000016c1: 	nopl	(%rax) # Size: 7
.Ltmp4165:
    000016c8: 	testq	%r13, %r13
    000016cb: 	jne	.Ltmp4295 # Offset: 5835
    000016d1: 	movq	%rbx, %rax
    000016d4: 	jmp	.Ltmp4296 # Offset: 5844
    000016d9: 	nopl	(%rax) # Size: 7
.Ltmp4159:
    000016e0: 	testq	%r13, %r13
    000016e3: 	jne	.Ltmp4297 # Offset: 5859
    000016e9: 	movq	%rbx, %rax
    000016ec: 	jmp	.Ltmp4298 # Offset: 5868
    000016f1: 	nopl	(%rax) # Size: 7
.Ltmp4171:
    000016f8: 	testq	%r13, %r13
    000016fb: 	jne	.Ltmp4299 # Offset: 5883
    00001701: 	movq	%rbx, %rax
    00001704: 	jmp	.Ltmp4300 # Offset: 5892
    00001709: 	nopl	(%rax) # Size: 7
.Ltmp4181:
    00001710: 	testq	%r14, %r14
    00001713: 	jne	.Ltmp4301 # Offset: 5907
    00001719: 	movq	%rbx, %rax
    0000171c: 	jmp	.Ltmp4302 # Offset: 5916
    00001721: 	nopl	(%rax) # Size: 7
.Ltmp4197:
    00001728: 	testq	%r14, %r14
    0000172b: 	jne	.Ltmp4303 # Offset: 5931
    00001731: 	movq	%rbx, %rax
    00001734: 	jmp	.Ltmp4304 # Offset: 5940
    00001739: 	nopl	(%rax) # Size: 7
.Ltmp4191:
    00001740: 	testq	%r14, %r14
    00001743: 	jne	.Ltmp4305 # Offset: 5955
    00001749: 	movq	%rbx, %rax
    0000174c: 	jmp	.Ltmp4306 # Offset: 5964
    00001751: 	nopl	(%rax) # Size: 7
.Ltmp4213:
    00001758: 	testq	%r14, %r14
    0000175b: 	jne	.Ltmp4307 # Offset: 5979
    00001761: 	movq	%rbx, %rax
    00001764: 	jmp	.Ltmp4308 # Offset: 5988
    00001769: 	nopl	(%rax) # Size: 7
.Ltmp4204:
    00001770: 	testq	%r14, %r14
    00001773: 	jne	.Ltmp4309 # Offset: 6003
    00001779: 	movq	(%rsp), %rax
    0000177d: 	jmp	.Ltmp4310 # Offset: 6013
    00001782: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4227:
    00001788: 	testq	%r14, %r14
    0000178b: 	jne	.Ltmp4311 # Offset: 6027
    00001791: 	movq	%rbx, %rax
    00001794: 	jmp	.Ltmp4312 # Offset: 6036
    00001799: 	nopl	(%rax) # Size: 7
.Ltmp4221:
    000017a0: 	testq	%r14, %r14
    000017a3: 	jne	.Ltmp4313 # Offset: 6051
    000017a9: 	movq	%rbx, %rax
    000017ac: 	jmp	.Ltmp4314 # Offset: 6060
    000017b1: 	nopl	(%rax) # Size: 7
.Ltmp4253:
    000017b8: 	testq	%r14, %r14
    000017bb: 	jne	.Ltmp4315 # Offset: 6075
    000017c1: 	movq	%rbx, %rax
    000017c4: 	jmp	.Ltmp4316 # Offset: 6084
    000017c9: 	nopl	(%rax) # Size: 7
.Ltmp4245:
    000017d0: 	testq	%r14, %r14
    000017d3: 	jne	.Ltmp4317 # Offset: 6099
    000017d9: 	movq	%rbx, %rax
    000017dc: 	jmp	.Ltmp4318 # Offset: 6108
    000017e1: 	nopl	(%rax) # Size: 7
.Ltmp4234:
    000017e8: 	testq	%r14, %r14
    000017eb: 	jne	.Ltmp4319 # Offset: 6123
    000017f1: 	movq	%rbx, %rax
    000017f4: 	jmp	.Ltmp4320 # Offset: 6132
    000017f9: 	nopl	(%rax) # Size: 7
.Ltmp4259:
    00001800: 	testq	%r14, %r14
    00001803: 	jne	.Ltmp4321 # Offset: 6147
    00001809: 	movq	%rbx, %rax
    0000180c: 	jmp	.Ltmp4322 # Offset: 6156
    00001811: 	nopl	(%rax) # Size: 7
.Ltmp4284:
    00001818: 	testq	%r13, %r13
    0000181b: 	jne	.Ltmp4323 # Offset: 6171
    00001821: 	movq	%rbx, %rax
    00001824: 	jmp	.Ltmp4324 # Offset: 6180
    00001829: 	nopl	(%rax) # Size: 7
.Ltmp4278:
    00001830: 	testq	%r13, %r13
    00001833: 	jne	.Ltmp4325 # Offset: 6195
    00001839: 	movq	%rbx, %rax
    0000183c: 	jmp	.Ltmp4326 # Offset: 6204
    00001841: 	nopl	(%rax) # Size: 7
.Ltmp4272:
    00001848: 	testq	%r13, %r13
    0000184b: 	jne	.Ltmp4327 # Offset: 6219
    00001851: 	movq	%rbx, %rax
    00001854: 	jmp	.Ltmp4328 # Offset: 6228
    00001859: 	nopl	(%rax) # Size: 7
.Ltmp4265:
    00001860: 	testq	%r14, %r14
    00001863: 	jne	.Ltmp4329 # Offset: 6243
    00001869: 	movq	%rbx, %rax
    0000186c: 	jmp	.Ltmp4330 # Offset: 6252
    00001871: 	nopl	(%rax) # Size: 7
.Ltmp4158:
    00001878: 	leaq	0x18(%rsp), %rsi
    0000187d: 	xorl	%edx, %edx
    0000187f: 	movq	%rbp, %rdi
    00001882: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6274
    00001887: 	movq	%rax, 0xc0(%rsp)
    0000188f: 	movq	%rax, %rdi
    00001892: 	movq	0x18(%rsp), %rax
    00001897: 	movq	%rax, 0xd0(%rsp)
.Ltmp4333:
    0000189f: 	movq	%r13, %rdx
    000018a2: 	movq	%r14, %rsi
    000018a5: 	callq	memcpy@PLT # Offset: 6309
    000018aa: 	movq	0x18(%rsp), %r13
    000018af: 	movq	0xc0(%rsp), %rax
    000018b7: 	jmp	.Ltmp4298 # Offset: 6327
    000018bc: 	nopl	(%rax) # Size: 4
.Ltmp4152:
    000018c0: 	leaq	0x18(%rsp), %rsi
    000018c5: 	leaq	0xc0(%rsp), %rdi
    000018cd: 	xorl	%edx, %edx
    000018cf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6351
    000018d4: 	movq	%rax, 0xc0(%rsp)
    000018dc: 	movq	%rax, %rdi
    000018df: 	movq	0x18(%rsp), %rax
    000018e4: 	movq	%rax, 0xd0(%rsp)
.Ltmp4331:
    000018ec: 	movq	%r13, %rdx
    000018ef: 	movq	%rbp, %rsi
    000018f2: 	callq	memcpy@PLT # Offset: 6386
    000018f7: 	movq	0x18(%rsp), %r13
    000018fc: 	movq	0xc0(%rsp), %rax
    00001904: 	jmp	.Ltmp4294 # Offset: 6404
    00001909: 	nopl	(%rax) # Size: 7
.Ltmp4164:
    00001910: 	leaq	0x18(%rsp), %rsi
    00001915: 	xorl	%edx, %edx
    00001917: 	movq	%rbp, %rdi
    0000191a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6426
    0000191f: 	movq	%rax, 0xc0(%rsp)
    00001927: 	movq	%rax, %rdi
    0000192a: 	movq	0x18(%rsp), %rax
    0000192f: 	movq	%rax, 0xd0(%rsp)
.Ltmp4332:
    00001937: 	movq	%r13, %rdx
    0000193a: 	movq	%r14, %rsi
    0000193d: 	callq	memcpy@PLT # Offset: 6461
    00001942: 	movq	0x18(%rsp), %r13
    00001947: 	movq	0xc0(%rsp), %rax
    0000194f: 	jmp	.Ltmp4296 # Offset: 6479
    00001954: 	nopl	(%rax) # Size: 4
.Ltmp4170:
    00001958: 	leaq	0x18(%rsp), %rsi
    0000195d: 	xorl	%edx, %edx
    0000195f: 	movq	%rbp, %rdi
    00001962: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6498
    00001967: 	movq	%rax, 0xc0(%rsp)
    0000196f: 	movq	%rax, %rdi
    00001972: 	movq	0x18(%rsp), %rax
    00001977: 	movq	%rax, 0xd0(%rsp)
.Ltmp4334:
    0000197f: 	movq	%r13, %rdx
    00001982: 	movq	%r14, %rsi
    00001985: 	callq	memcpy@PLT # Offset: 6533
    0000198a: 	movq	0x18(%rsp), %r13
    0000198f: 	movq	0xc0(%rsp), %rax
    00001997: 	jmp	.Ltmp4300 # Offset: 6551
    0000199c: 	nopl	(%rax) # Size: 4
.Ltmp4180:
    000019a0: 	leaq	0x18(%rsp), %rsi
    000019a5: 	xorl	%edx, %edx
    000019a7: 	movq	%rbp, %rdi
    000019aa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6570
    000019af: 	movq	%rax, 0xc0(%rsp)
    000019b7: 	movq	%rax, %rdi
    000019ba: 	movq	0x18(%rsp), %rax
    000019bf: 	movq	%rax, 0xd0(%rsp)
.Ltmp4335:
    000019c7: 	movq	%r14, %rdx
    000019ca: 	movq	%r15, %rsi
    000019cd: 	callq	memcpy@PLT # Offset: 6605
    000019d2: 	movq	0x18(%rsp), %r14
    000019d7: 	movq	0xc0(%rsp), %rax
    000019df: 	jmp	.Ltmp4302 # Offset: 6623
    000019e4: 	nopl	(%rax) # Size: 4
.Ltmp4196:
    000019e8: 	leaq	0x18(%rsp), %rsi
    000019ed: 	xorl	%edx, %edx
    000019ef: 	movq	%rbp, %rdi
    000019f2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6642
    000019f7: 	movq	%rax, 0xc0(%rsp)
    000019ff: 	movq	%rax, %rdi
    00001a02: 	movq	0x18(%rsp), %rax
    00001a07: 	movq	%rax, 0xd0(%rsp)
.Ltmp4336:
    00001a0f: 	movq	%r14, %rdx
    00001a12: 	movq	%r15, %rsi
    00001a15: 	callq	memcpy@PLT # Offset: 6677
    00001a1a: 	movq	0x18(%rsp), %r14
    00001a1f: 	movq	0xc0(%rsp), %rax
    00001a27: 	jmp	.Ltmp4304 # Offset: 6695
    00001a2c: 	nopl	(%rax) # Size: 4
.Ltmp4190:
    00001a30: 	leaq	0x18(%rsp), %rsi
    00001a35: 	xorl	%edx, %edx
    00001a37: 	movq	%rbp, %rdi
    00001a3a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6714
    00001a3f: 	movq	%rax, 0xc0(%rsp)
    00001a47: 	movq	%rax, %rdi
    00001a4a: 	movq	0x18(%rsp), %rax
    00001a4f: 	movq	%rax, 0xd0(%rsp)
.Ltmp4337:
    00001a57: 	movq	%r14, %rdx
    00001a5a: 	movq	%r15, %rsi
    00001a5d: 	callq	memcpy@PLT # Offset: 6749
    00001a62: 	movq	0x18(%rsp), %r14
    00001a67: 	movq	0xc0(%rsp), %rax
    00001a6f: 	jmp	.Ltmp4306 # Offset: 6767
    00001a74: 	nopl	(%rax) # Size: 4
.Ltmp4203:
    00001a78: 	leaq	0x18(%rsp), %rsi
    00001a7d: 	leaq	0x60(%rsp), %rdi
    00001a82: 	xorl	%edx, %edx
    00001a84: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6788
    00001a89: 	movq	%rax, 0x60(%rsp)
    00001a8e: 	movq	%rax, %rdi
    00001a91: 	movq	0x18(%rsp), %rax
    00001a96: 	movq	%rax, 0x70(%rsp)
.Ltmp4339:
    00001a9b: 	movq	%r14, %rdx
    00001a9e: 	movq	%r15, %rsi
    00001aa1: 	callq	memcpy@PLT # Offset: 6817
    00001aa6: 	movq	0x18(%rsp), %r14
    00001aab: 	movq	0x60(%rsp), %rax
    00001ab0: 	jmp	.Ltmp4310 # Offset: 6832
    00001ab5: 	nopl	(%rax) # Size: 3
.Ltmp4226:
    00001ab8: 	leaq	0x18(%rsp), %rsi
    00001abd: 	xorl	%edx, %edx
    00001abf: 	movq	%rbp, %rdi
    00001ac2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6850
    00001ac7: 	movq	%rax, 0xc0(%rsp)
    00001acf: 	movq	%rax, %rdi
    00001ad2: 	movq	0x18(%rsp), %rax
    00001ad7: 	movq	%rax, 0xd0(%rsp)
.Ltmp4340:
    00001adf: 	movq	%r14, %rdx
    00001ae2: 	movq	%r15, %rsi
    00001ae5: 	callq	memcpy@PLT # Offset: 6885
    00001aea: 	movq	0x18(%rsp), %r14
    00001aef: 	movq	0xc0(%rsp), %rax
    00001af7: 	jmp	.Ltmp4312 # Offset: 6903
    00001afc: 	nopl	(%rax) # Size: 4
.Ltmp4212:
    00001b00: 	leaq	0x18(%rsp), %rsi
    00001b05: 	xorl	%edx, %edx
    00001b07: 	movq	%rbp, %rdi
    00001b0a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6922
    00001b0f: 	movq	%rax, 0xc0(%rsp)
    00001b17: 	movq	%rax, %rdi
    00001b1a: 	movq	0x18(%rsp), %rax
    00001b1f: 	movq	%rax, 0xd0(%rsp)
.Ltmp4338:
    00001b27: 	movq	%r14, %rdx
    00001b2a: 	movq	%r15, %rsi
    00001b2d: 	callq	memcpy@PLT # Offset: 6957
    00001b32: 	movq	0x18(%rsp), %r14
    00001b37: 	movq	0xc0(%rsp), %rax
    00001b3f: 	jmp	.Ltmp4308 # Offset: 6975
    00001b44: 	nopl	(%rax) # Size: 4
.Ltmp4244:
    00001b48: 	leaq	0x18(%rsp), %rsi
    00001b4d: 	xorl	%edx, %edx
    00001b4f: 	movq	%rbp, %rdi
    00001b52: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6994
    00001b57: 	movq	%rax, 0xc0(%rsp)
    00001b5f: 	movq	%rax, %rdi
    00001b62: 	movq	0x18(%rsp), %rax
    00001b67: 	movq	%rax, 0xd0(%rsp)
.Ltmp4343:
    00001b6f: 	movq	%r14, %rdx
    00001b72: 	movq	%r15, %rsi
    00001b75: 	callq	memcpy@PLT # Offset: 7029
    00001b7a: 	movq	0x18(%rsp), %r14
    00001b7f: 	movq	0xc0(%rsp), %rax
    00001b87: 	jmp	.Ltmp4318 # Offset: 7047
    00001b8c: 	nopl	(%rax) # Size: 4
.Ltmp4233:
    00001b90: 	leaq	0x18(%rsp), %rsi
    00001b95: 	xorl	%edx, %edx
    00001b97: 	movq	%rbp, %rdi
    00001b9a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7066
    00001b9f: 	movq	%rax, 0xc0(%rsp)
    00001ba7: 	movq	%rax, %rdi
    00001baa: 	movq	0x18(%rsp), %rax
    00001baf: 	movq	%rax, 0xd0(%rsp)
.Ltmp4344:
    00001bb7: 	movq	%r14, %rdx
    00001bba: 	movq	%r15, %rsi
    00001bbd: 	callq	memcpy@PLT # Offset: 7101
    00001bc2: 	movq	0x18(%rsp), %r14
    00001bc7: 	movq	0xc0(%rsp), %rax
    00001bcf: 	jmp	.Ltmp4320 # Offset: 7119
    00001bd4: 	nopl	(%rax) # Size: 4
.Ltmp4220:
    00001bd8: 	leaq	0x18(%rsp), %rsi
    00001bdd: 	xorl	%edx, %edx
    00001bdf: 	movq	%rbp, %rdi
    00001be2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7138
    00001be7: 	movq	%rax, 0xc0(%rsp)
    00001bef: 	movq	%rax, %rdi
    00001bf2: 	movq	0x18(%rsp), %rax
    00001bf7: 	movq	%rax, 0xd0(%rsp)
.Ltmp4341:
    00001bff: 	movq	%r14, %rdx
    00001c02: 	movq	%r15, %rsi
    00001c05: 	callq	memcpy@PLT # Offset: 7173
    00001c0a: 	movq	0x18(%rsp), %r14
    00001c0f: 	movq	0xc0(%rsp), %rax
    00001c17: 	jmp	.Ltmp4314 # Offset: 7191
    00001c1c: 	nopl	(%rax) # Size: 4
.Ltmp4252:
    00001c20: 	leaq	0x18(%rsp), %rsi
    00001c25: 	xorl	%edx, %edx
    00001c27: 	movq	%rbp, %rdi
    00001c2a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7210
    00001c2f: 	movq	%rax, 0xc0(%rsp)
    00001c37: 	movq	%rax, %rdi
    00001c3a: 	movq	0x18(%rsp), %rax
    00001c3f: 	movq	%rax, 0xd0(%rsp)
.Ltmp4342:
    00001c47: 	movq	%r14, %rdx
    00001c4a: 	movq	%r15, %rsi
    00001c4d: 	callq	memcpy@PLT # Offset: 7245
    00001c52: 	movq	0x18(%rsp), %r14
    00001c57: 	movq	0xc0(%rsp), %rax
    00001c5f: 	jmp	.Ltmp4316 # Offset: 7263
    00001c64: 	nopl	(%rax) # Size: 4
.Ltmp4264:
    00001c68: 	leaq	0x18(%rsp), %rsi
    00001c6d: 	xorl	%edx, %edx
    00001c6f: 	movq	%rbp, %rdi
    00001c72: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7282
    00001c77: 	movq	%rax, 0xc0(%rsp)
    00001c7f: 	movq	%rax, %rdi
    00001c82: 	movq	0x18(%rsp), %rax
    00001c87: 	movq	%rax, 0xd0(%rsp)
.Ltmp4349:
    00001c8f: 	movq	%r14, %rdx
    00001c92: 	movq	%r15, %rsi
    00001c95: 	callq	memcpy@PLT # Offset: 7317
    00001c9a: 	movq	0x18(%rsp), %r14
    00001c9f: 	movq	0xc0(%rsp), %rax
    00001ca7: 	jmp	.Ltmp4330 # Offset: 7335
    00001cac: 	nopl	(%rax) # Size: 4
.Ltmp4258:
    00001cb0: 	leaq	0x18(%rsp), %rsi
    00001cb5: 	xorl	%edx, %edx
    00001cb7: 	movq	%rbp, %rdi
    00001cba: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7354
    00001cbf: 	movq	%rax, 0xc0(%rsp)
    00001cc7: 	movq	%rax, %rdi
    00001cca: 	movq	0x18(%rsp), %rax
    00001ccf: 	movq	%rax, 0xd0(%rsp)
.Ltmp4345:
    00001cd7: 	movq	%r14, %rdx
    00001cda: 	movq	%r15, %rsi
    00001cdd: 	callq	memcpy@PLT # Offset: 7389
    00001ce2: 	movq	0x18(%rsp), %r14
    00001ce7: 	movq	0xc0(%rsp), %rax
    00001cef: 	jmp	.Ltmp4322 # Offset: 7407
    00001cf4: 	nopl	(%rax) # Size: 4
.Ltmp4283:
    00001cf8: 	leaq	0x18(%rsp), %rsi
    00001cfd: 	xorl	%edx, %edx
    00001cff: 	movq	%rbp, %rdi
    00001d02: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7426
    00001d07: 	movq	%rax, 0xc0(%rsp)
    00001d0f: 	movq	%rax, %rdi
    00001d12: 	movq	0x18(%rsp), %rax
    00001d17: 	movq	%rax, 0xd0(%rsp)
.Ltmp4346:
    00001d1f: 	movq	%r13, %rdx
    00001d22: 	movq	%r14, %rsi
    00001d25: 	callq	memcpy@PLT # Offset: 7461
    00001d2a: 	movq	0x18(%rsp), %r13
    00001d2f: 	movq	0xc0(%rsp), %rax
    00001d37: 	jmp	.Ltmp4324 # Offset: 7479
    00001d3c: 	nopl	(%rax) # Size: 4
.Ltmp4277:
    00001d40: 	leaq	0x18(%rsp), %rsi
    00001d45: 	xorl	%edx, %edx
    00001d47: 	movq	%rbp, %rdi
    00001d4a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7498
    00001d4f: 	movq	%rax, 0xc0(%rsp)
    00001d57: 	movq	%rax, %rdi
    00001d5a: 	movq	0x18(%rsp), %rax
    00001d5f: 	movq	%rax, 0xd0(%rsp)
.Ltmp4347:
    00001d67: 	movq	%r13, %rdx
    00001d6a: 	movq	%r14, %rsi
    00001d6d: 	callq	memcpy@PLT # Offset: 7533
    00001d72: 	movq	0x18(%rsp), %r13
    00001d77: 	movq	0xc0(%rsp), %rax
    00001d7f: 	jmp	.Ltmp4326 # Offset: 7551
    00001d84: 	nopl	(%rax) # Size: 4
.Ltmp4271:
    00001d88: 	leaq	0x18(%rsp), %rsi
    00001d8d: 	xorl	%edx, %edx
    00001d8f: 	movq	%rbp, %rdi
    00001d92: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7570
    00001d97: 	movq	%rax, 0xc0(%rsp)
    00001d9f: 	movq	%rax, %rdi
    00001da2: 	movq	0x18(%rsp), %rax
    00001da7: 	movq	%rax, 0xd0(%rsp)
.Ltmp4348:
    00001daf: 	movq	%r13, %rdx
    00001db2: 	movq	%r14, %rsi
    00001db5: 	callq	memcpy@PLT # Offset: 7605
    00001dba: 	movq	0x18(%rsp), %r13
    00001dbf: 	movq	0xc0(%rsp), %rax
    00001dc7: 	jmp	.Ltmp4328 # Offset: 7623
.Ltmp4154:
    00001dcc: 	leaq	DATAat0x33182(%rip), %rdi
    00001dd3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7635
.Ltmp4157:
    00001dd8: 	leaq	DATAat0x33158(%rip), %rdi
    00001ddf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7647
.Ltmp4160:
    00001de4: 	leaq	DATAat0x33182(%rip), %rdi
    00001deb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7659
.Ltmp4163:
    00001df0: 	leaq	DATAat0x33158(%rip), %rdi
    00001df7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7671
.Ltmp4166:
    00001dfc: 	leaq	DATAat0x33182(%rip), %rdi
    00001e03: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7683
.Ltmp4169:
    00001e08: 	leaq	DATAat0x33158(%rip), %rdi
    00001e0f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7695
.Ltmp4172:
    00001e14: 	leaq	DATAat0x33182(%rip), %rdi
    00001e1b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7707
.Ltmp4179:
    00001e20: 	leaq	DATAat0x33158(%rip), %rdi
    00001e27: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7719
.Ltmp4182:
    00001e2c: 	leaq	DATAat0x33182(%rip), %rdi
    00001e33: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7731
.Ltmp4189:
    00001e38: 	leaq	DATAat0x33158(%rip), %rdi
    00001e3f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7743
.Ltmp4192:
    00001e44: 	leaq	DATAat0x33182(%rip), %rdi
    00001e4b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7755
.Ltmp4195:
    00001e50: 	leaq	DATAat0x33158(%rip), %rdi
    00001e57: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7767
.Ltmp4198:
    00001e5c: 	leaq	DATAat0x33182(%rip), %rdi
    00001e63: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7779
.Ltmp4202:
    00001e68: 	leaq	DATAat0x33158(%rip), %rdi
    00001e6f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7791
.Ltmp4205:
    00001e74: 	leaq	DATAat0x33182(%rip), %rdi
    00001e7b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7803
.Ltmp4211:
    00001e80: 	leaq	DATAat0x33158(%rip), %rdi
    00001e87: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7815
.Ltmp4214:
    00001e8c: 	leaq	DATAat0x33182(%rip), %rdi
    00001e93: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7827
.Ltmp4219:
    00001e98: 	leaq	DATAat0x33158(%rip), %rdi
    00001e9f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7839
.Ltmp4222:
    00001ea4: 	leaq	DATAat0x33182(%rip), %rdi
    00001eab: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7851
.Ltmp4225:
    00001eb0: 	leaq	DATAat0x33158(%rip), %rdi
    00001eb7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7863
.Ltmp4228:
    00001ebc: 	leaq	DATAat0x33182(%rip), %rdi
    00001ec3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7875
.Ltmp4232:
    00001ec8: 	leaq	DATAat0x33158(%rip), %rdi
    00001ecf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7887
.Ltmp4235:
    00001ed4: 	leaq	DATAat0x33182(%rip), %rdi
    00001edb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7899
.Ltmp4243:
    00001ee0: 	leaq	DATAat0x33158(%rip), %rdi
    00001ee7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7911
.Ltmp4246:
    00001eec: 	leaq	DATAat0x33182(%rip), %rdi
    00001ef3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7923
.Ltmp4251:
    00001ef8: 	leaq	DATAat0x33158(%rip), %rdi
    00001eff: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7935
.Ltmp4254:
    00001f04: 	leaq	DATAat0x33182(%rip), %rdi
    00001f0b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7947
.Ltmp4257:
    00001f10: 	leaq	DATAat0x33158(%rip), %rdi
    00001f17: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7959
.Ltmp4260:
    00001f1c: 	leaq	DATAat0x33182(%rip), %rdi
    00001f23: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7971
.Ltmp4263:
    00001f28: 	leaq	DATAat0x33158(%rip), %rdi
    00001f2f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7983
.Ltmp4266:
    00001f34: 	leaq	DATAat0x33182(%rip), %rdi
    00001f3b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7995
.Ltmp4270:
    00001f40: 	leaq	DATAat0x33158(%rip), %rdi
    00001f47: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8007
.Ltmp4273:
    00001f4c: 	leaq	DATAat0x33182(%rip), %rdi
    00001f53: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8019
.Ltmp4276:
    00001f58: 	leaq	DATAat0x33158(%rip), %rdi
    00001f5f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8031
.Ltmp4279:
    00001f64: 	leaq	DATAat0x33182(%rip), %rdi
    00001f6b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8043
.Ltmp4282:
    00001f70: 	leaq	DATAat0x33158(%rip), %rdi
    00001f77: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8055
.Ltmp4285:
    00001f7c: 	leaq	DATAat0x33182(%rip), %rdi
    00001f83: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8067
.Ltmp4292:
    00001f88: 	callq	__stack_chk_fail@PLT # Offset: 8072
.Ltmp4293:
    00001f8d: 	movq	%rbx, %rdi
    00001f90: 	jmp	.Ltmp4331 # Offset: 8080
.Ltmp4295:
    00001f95: 	movq	%rbx, %rdi
    00001f98: 	jmp	.Ltmp4332 # Offset: 8088
.Ltmp4297:
    00001f9d: 	movq	%rbx, %rdi
    00001fa0: 	jmp	.Ltmp4333 # Offset: 8096
.Ltmp4299:
    00001fa5: 	movq	%rbx, %rdi
    00001fa8: 	jmp	.Ltmp4334 # Offset: 8104
.Ltmp4301:
    00001fad: 	movq	%rbx, %rdi
    00001fb0: 	jmp	.Ltmp4335 # Offset: 8112
.Ltmp4303:
    00001fb5: 	movq	%rbx, %rdi
    00001fb8: 	jmp	.Ltmp4336 # Offset: 8120
.Ltmp4305:
    00001fbd: 	movq	%rbx, %rdi
    00001fc0: 	jmp	.Ltmp4337 # Offset: 8128
.Ltmp4307:
    00001fc5: 	movq	%rbx, %rdi
    00001fc8: 	jmp	.Ltmp4338 # Offset: 8136
.Ltmp4309:
    00001fcd: 	movq	(%rsp), %rdi
    00001fd1: 	jmp	.Ltmp4339 # Offset: 8145
.Ltmp4311:
    00001fd6: 	movq	%rbx, %rdi
    00001fd9: 	jmp	.Ltmp4340 # Offset: 8153
.Ltmp4313:
    00001fde: 	movq	%rbx, %rdi
    00001fe1: 	jmp	.Ltmp4341 # Offset: 8161
.Ltmp4315:
    00001fe6: 	movq	%rbx, %rdi
    00001fe9: 	jmp	.Ltmp4342 # Offset: 8169
.Ltmp4317:
    00001fee: 	movq	%rbx, %rdi
    00001ff1: 	jmp	.Ltmp4343 # Offset: 8177
.Ltmp4319:
    00001ff6: 	movq	%rbx, %rdi
    00001ff9: 	jmp	.Ltmp4344 # Offset: 8185
.Ltmp4321:
    00001ffe: 	movq	%rbx, %rdi
    00002001: 	jmp	.Ltmp4345 # Offset: 8193
.Ltmp4323:
    00002006: 	movq	%rbx, %rdi
    00002009: 	jmp	.Ltmp4346 # Offset: 8201
.Ltmp4325:
    0000200e: 	movq	%rbx, %rdi
    00002011: 	jmp	.Ltmp4347 # Offset: 8209
.Ltmp4327:
    00002016: 	movq	%rbx, %rdi
    00002019: 	jmp	.Ltmp4348 # Offset: 8217
.Ltmp4329:
    0000201e: 	movq	%rbx, %rdi
    00002021: 	jmp	.Ltmp4349 # Offset: 8225
.Ltmp4151:
    00002026: 	leaq	DATAat0x33158(%rip), %rdi
    0000202d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8237
    00002032: 	endbr64
.Ltmp4358:
    00002036: 	movq	%rax, %rbp
    00002039: 	jmp	.Ltmp4350 # Offset: 8249
    0000203b: 	endbr64
.Ltmp4352:
    0000203f: 	movq	%rax, %rbp
    00002042: 	jmp	.Ltmp4351 # Offset: 8258
    00002044: 	endbr64
    00002048: 	jmp	.Ltmp4352 # Offset: 8264
.Ltmp4350:
    0000204a: 	movq	0xc0(%rsp), %rdi
    00002052: 	cmpq	%rbx, %rdi
    00002055: 	je	.Ltmp4353 # Offset: 8277
    00002057: 	movq	0xd0(%rsp), %rax
    0000205f: 	leaq	0x1(%rax), %rsi
    00002063: 	callq	_ZdlPvm@PLT # Offset: 8291
.Ltmp4353:
    00002068: 	movq	0x40(%rsp), %rdi
    0000206d: 	leaq	0x50(%rsp), %rax
    00002072: 	cmpq	%rax, %rdi
    00002075: 	je	.Ltmp4354 # Offset: 8309
    00002077: 	movq	0x50(%rsp), %rax
    0000207c: 	leaq	0x1(%rax), %rsi
    00002080: 	callq	_ZdlPvm@PLT # Offset: 8320
.Ltmp4354:
    00002085: 	movl	$0x1, %esi
    0000208a: 	movq	%r12, %rdi
    0000208d: 	movq	%rbp, %rbx
    00002090: 	callq	_ZdlPvm@PLT # Offset: 8336
.Ltmp4366:
    00002095: 	movq	0x20(%rsp), %rdi
    0000209a: 	cmpq	0x8(%rsp), %rdi
    0000209f: 	je	.Ltmp4355 # Offset: 8351
    000020a1: 	movq	0x30(%rsp), %rax
    000020a6: 	leaq	0x1(%rax), %rsi
    000020aa: 	callq	_ZdlPvm@PLT # Offset: 8362
.Ltmp4355:
    000020af: 	movq	%rbx, %rdi
    000020b2: 	callq	_Unwind_Resume@PLT # Offset: 8370
.Ltmp4351:
    000020b7: 	movq	0xc0(%rsp), %rdi
    000020bf: 	cmpq	%rbx, %rdi
    000020c2: 	je	.Ltmp4354 # Offset: 8386
    000020c4: 	movq	0xd0(%rsp), %rax
    000020cc: 	leaq	0x1(%rax), %rsi
    000020d0: 	callq	_ZdlPvm@PLT # Offset: 8400
    000020d5: 	jmp	.Ltmp4354 # Offset: 8405
    000020d7: 	endbr64
.Ltmp4357:
    000020db: 	movq	%rax, %rbp
    000020de: 	jmp	.Ltmp4356 # Offset: 8414
    000020e3: 	endbr64
    000020e7: 	jmp	.Ltmp4357 # Offset: 8423
    000020e9: 	endbr64
    000020ed: 	jmp	.Ltmp4357 # Offset: 8429
    000020ef: 	endbr64
    000020f3: 	jmp	.Ltmp4358 # Offset: 8435
    000020f8: 	endbr64
    000020fc: 	jmp	.Ltmp4358 # Offset: 8444
    00002101: 	endbr64
    00002105: 	jmp	.Ltmp4358 # Offset: 8453
    0000210a: 	endbr64
    0000210e: 	jmp	.Ltmp4358 # Offset: 8462
    00002113: 	endbr64
.Ltmp4361:
    00002117: 	movq	%rax, %rbp
    0000211a: 	jmp	.Ltmp4359 # Offset: 8474
    0000211c: 	endbr64
.Ltmp4360:
    00002120: 	movq	%rax, %rbp
    00002123: 	movq	0xc0(%rsp), %rdi
    0000212b: 	cmpq	%rbx, %rdi
    0000212e: 	je	.Ltmp4359 # Offset: 8494
    00002130: 	movq	0xd0(%rsp), %rax
    00002138: 	leaq	0x1(%rax), %rsi
    0000213c: 	callq	_ZdlPvm@PLT # Offset: 8508
.Ltmp4359:
    00002141: 	movq	0x60(%rsp), %rdi
    00002146: 	cmpq	(%rsp), %rdi
    0000214a: 	je	.Ltmp4353 # Offset: 8522
    00002150: 	movq	0x70(%rsp), %rax
    00002155: 	leaq	0x1(%rax), %rsi
    00002159: 	callq	_ZdlPvm@PLT # Offset: 8537
    0000215e: 	jmp	.Ltmp4353 # Offset: 8542
    00002163: 	endbr64
    00002167: 	jmp	.Ltmp4360 # Offset: 8551
    00002169: 	endbr64
    0000216d: 	jmp	.Ltmp4360 # Offset: 8557
    0000216f: 	endbr64
    00002173: 	jmp	.Ltmp4360 # Offset: 8563
    00002175: 	endbr64
    00002179: 	jmp	.Ltmp4360 # Offset: 8569
    0000217b: 	endbr64
    0000217f: 	jmp	.Ltmp4360 # Offset: 8575
    00002181: 	endbr64
    00002185: 	jmp	.Ltmp4360 # Offset: 8581
    00002187: 	endbr64
    0000218b: 	jmp	.Ltmp4352 # Offset: 8587
    00002190: 	endbr64
    00002194: 	jmp	.Ltmp4352 # Offset: 8596
    00002199: 	endbr64
    0000219d: 	jmp	.Ltmp4352 # Offset: 8605
    000021a2: 	endbr64
    000021a6: 	jmp	.Ltmp4352 # Offset: 8614
    000021ab: 	endbr64
    000021af: 	jmp	.Ltmp4358 # Offset: 8623
    000021b4: 	endbr64
    000021b8: 	jmp	.Ltmp4358 # Offset: 8632
    000021bd: 	endbr64
    000021c1: 	jmp	.Ltmp4361 # Offset: 8641
    000021c6: 	endbr64
    000021ca: 	jmp	.Ltmp4360 # Offset: 8650
    000021cf: 	endbr64
    000021d3: 	jmp	.Ltmp4352 # Offset: 8659
    000021d8: 	endbr64
    000021dc: 	jmp	.Ltmp4352 # Offset: 8668
    000021e1: 	endbr64
    000021e5: 	jmp	.Ltmp4352 # Offset: 8677
    000021ea: 	endbr64
    000021ee: 	movq	%rax, %rbp
    000021f1: 	jmp	.Ltmp4353 # Offset: 8689
    000021f6: 	endbr64
    000021fa: 	jmp	.Ltmp4358 # Offset: 8698
    000021ff: 	endbr64
    00002203: 	jmp	.Ltmp4358 # Offset: 8707
    00002208: 	endbr64
    0000220c: 	jmp	.Ltmp4358 # Offset: 8716
    00002211: 	endbr64
    00002215: 	jmp	.Ltmp4358 # Offset: 8725
    0000221a: 	endbr64
.Ltmp4363:
    0000221e: 	movq	%rax, %rbp
    00002221: 	jmp	.Ltmp4362 # Offset: 8737
    00002223: 	endbr64
    00002227: 	jmp	.Ltmp4363 # Offset: 8743
.Ltmp4362:
    00002229: 	movq	0xc0(%rsp), %rdi
    00002231: 	cmpq	%rbx, %rdi
    00002234: 	je	.Ltmp4364 # Offset: 8756
    00002236: 	movq	0xd0(%rsp), %rax
    0000223e: 	leaq	0x1(%rax), %rsi
    00002242: 	callq	_ZdlPvm@PLT # Offset: 8770
.Ltmp4364:
    00002247: 	movq	0xa0(%rsp), %rdi
    0000224f: 	leaq	0xb0(%rsp), %rax
    00002257: 	cmpq	%rax, %rdi
    0000225a: 	je	.Ltmp4365 # Offset: 8794
    0000225c: 	movq	0xb0(%rsp), %rax
    00002264: 	leaq	0x1(%rax), %rsi
    00002268: 	callq	_ZdlPvm@PLT # Offset: 8808
.Ltmp4365:
    0000226d: 	movq	0x80(%rsp), %rdi
    00002275: 	leaq	0x90(%rsp), %rax
    0000227d: 	cmpq	%rax, %rdi
    00002280: 	je	.Ltmp4359 # Offset: 8832
    00002286: 	movq	0x90(%rsp), %rax
    0000228e: 	leaq	0x1(%rax), %rsi
    00002292: 	callq	_ZdlPvm@PLT # Offset: 8850
    00002297: 	jmp	.Ltmp4359 # Offset: 8855
    0000229c: 	endbr64
    000022a0: 	jmp	.Ltmp4363 # Offset: 8864
    000022a5: 	endbr64
    000022a9: 	jmp	.Ltmp4363 # Offset: 8873
    000022ae: 	endbr64
    000022b2: 	jmp	.Ltmp4363 # Offset: 8882
    000022b7: 	endbr64
    000022bb: 	jmp	.Ltmp4363 # Offset: 8891
    000022c0: 	endbr64
    000022c4: 	jmp	.Ltmp4363 # Offset: 8900
    000022c9: 	endbr64
    000022cd: 	jmp	.Ltmp4363 # Offset: 8909
    000022d2: 	endbr64
    000022d6: 	jmp	.Ltmp4357 # Offset: 8918
    000022db: 	endbr64
    000022df: 	jmp	.Ltmp4357 # Offset: 8927
    000022e4: 	endbr64
    000022e8: 	jmp	.Ltmp4357 # Offset: 8936
    000022ed: 	endbr64
    000022f1: 	jmp	.Ltmp4357 # Offset: 8945
    000022f6: 	endbr64
    000022fa: 	jmp	.Ltmp4363 # Offset: 8954
    000022ff: 	endbr64
    00002303: 	jmp	.Ltmp4363 # Offset: 8963
    00002308: 	endbr64
    0000230c: 	jmp	.Ltmp4363 # Offset: 8972
    00002311: 	endbr64
    00002315: 	movq	%rax, %rbx
    00002318: 	jmp	.Ltmp4366 # Offset: 8984
    0000231d: 	endbr64
    00002321: 	jmp	.Ltmp4357 # Offset: 8993
    00002326: 	endbr64
    0000232a: 	movq	%rax, %rbp
    0000232d: 	jmp	.Ltmp4364 # Offset: 9005
    00002332: 	endbr64
    00002336: 	jmp	.Ltmp4357 # Offset: 9014
.Ltmp4356:
    0000233b: 	movq	0xc0(%rsp), %rdi
    00002343: 	cmpq	%rbx, %rdi
    00002346: 	je	.Ltmp4365 # Offset: 9030
    0000234c: 	movq	0xd0(%rsp), %rax
    00002354: 	leaq	0x1(%rax), %rsi
    00002358: 	callq	_ZdlPvm@PLT # Offset: 9048
    0000235d: 	jmp	.Ltmp4365 # Offset: 9053
    00002362: 	endbr64
    00002366: 	jmp	.Ltmp4363 # Offset: 9062
    0000236b: 	endbr64
    0000236f: 	jmp	.Ltmp4363 # Offset: 9071
    00002374: 	endbr64
    00002378: 	jmp	.Ltmp4360 # Offset: 9080
    0000237d: 	endbr64
    00002381: 	movq	%rax, %rbp
    00002384: 	jmp	.Ltmp4365 # Offset: 9092
    00002389: 	endbr64
    0000238d: 	jmp	.Ltmp4360 # Offset: 9101
    00002392: 	endbr64
    00002396: 	jmp	.Ltmp4357 # Offset: 9110
    0000239b: 	endbr64
    0000239f: 	jmp	.Ltmp4363 # Offset: 9119
    000023a4: 	endbr64
    000023a8: 	jmp	.Ltmp4363 # Offset: 9128
    000023ad: 	endbr64
    000023b1: 	jmp	.Ltmp4352 # Offset: 9137
    000023b6: 	endbr64
    000023ba: 	jmp	.Ltmp4352 # Offset: 9146
    000023bf: 	endbr64
    000023c3: 	jmp	.Ltmp4363 # Offset: 9155
    000023c8: 	endbr64
    000023cc: 	jmp	.Ltmp4363 # Offset: 9164
    000023d1: 	endbr64
    000023d5: 	movq	%rax, %rbp
    000023d8: 	jmp	.Ltmp4354 # Offset: 9176
    000023dd: 	endbr64
    000023e1: 	jmp	.Ltmp4352 # Offset: 9185
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIaEvv"

Binary Function "_Z21testOneFunction_equalItPFtPKtitEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 395
  State       : disassembled
  Address     : 0x306a0
  Size        : 0x21c
  MaxSize     : 0x220
  Offset      : 0x306a0
  Section     : .text
  Orc Section : .local.text._Z21testOneFunction_equalItPFtPKtitEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0394:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rcx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdx, %r13
    00000010: 	pushq	%r12
    00000012: 	movl	%esi, %r12d
    00000015: 	pushq	%rbp
    00000016: 	movq	%rdi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	subq	$0x18, %rsp
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	callq	clock@PLT # Offset: 46
    00000033: 	movq	%rax, start_time(%rip)
    0000003a: 	movl	iterations(%rip), %eax
    00000040: 	testl	%eax, %eax
    00000042: 	jle	.Ltmp4367 # Offset: 66
    00000044: 	cvttsd2si	init_value(%rip), %edx
    0000004c: 	xorl	%ebx, %ebx
    0000004e: 	leaq	DATAat0x331c8(%rip), %r15
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp4369:
    00000058: 	movzwl	%dx, %edx
    0000005b: 	movl	%r12d, %esi
    0000005e: 	movq	%rbp, %rdi
    00000061: 	callq	*%r13 # Offset: 97
    00000064: 	cvttsd2si	init_value(%rip), %edx
    0000006c: 	cmpw	%dx, %ax
    0000006f: 	je	.Ltmp4368 # Offset: 111
    00000071: 	movq	(%r14), %rdx
    00000074: 	xorl	%eax, %eax
    00000076: 	movq	%r15, %rsi
    00000079: 	movl	$0x1, %edi
    0000007e: 	addl	$0x1, %ebx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	cmpl	%ebx, iterations(%rip)
    0000008c: 	jle	.Ltmp4367 # Offset: 140
    0000008e: 	cvttsd2si	init_value(%rip), %edx
    00000096: 	jmp	.Ltmp4369 # Offset: 150
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4368:
    000000a0: 	addl	$0x1, %ebx
    000000a3: 	cmpl	%ebx, iterations(%rip)
    000000a9: 	jg	.Ltmp4369 # Offset: 169
.Ltmp4367:
    000000ab: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000b2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000b9: 	subq	$0x20, %rax
    000000bd: 	cmpq	%rax, %rbx
    000000c0: 	je	.Ltmp4370 # Offset: 192
    000000c6: 	leaq	0x10(%rbx), %rdi
    000000ca: 	movq	0x8(%r14), %r12
    000000ce: 	movq	%rdi, (%rbx)
    000000d1: 	movq	(%r14), %rbp
    000000d4: 	movq	%rbp, %rax
    000000d7: 	addq	%r12, %rax
    000000da: 	je	.Ltmp4371 # Offset: 218
    000000dc: 	testq	%rbp, %rbp
    000000df: 	je	.Ltmp4372 # Offset: 223
.Ltmp4371:
    000000e5: 	movq	%r12, (%rsp)
    000000e9: 	cmpq	$0xf, %r12
    000000ed: 	ja	.Ltmp4373 # Offset: 237
    000000f3: 	cmpq	$0x1, %r12
    000000f7: 	jne	.Ltmp4374 # Offset: 247
    000000fd: 	movzbl	(%rbp), %eax
    00000101: 	movb	%al, 0x10(%rbx)
.Ltmp4377:
    00000104: 	movq	%r12, 0x8(%rbx)
    00000108: 	movb	$0x0, (%rdi,%r12)
    0000010d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000114: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000011b: 	addq	$0x20, %rax
    0000011f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000126: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000012d: 	je	.Ltmp4375 # Offset: 301
.Ltmp4378:
    00000133: 	movq	-0x20(%rax), %rbp
    00000137: 	callq	clock@PLT # Offset: 311
    0000013c: 	movq	%rax, end_time(%rip)
    00000143: 	movq	0x8(%rsp), %rdx
    00000148: 	subq	%fs:0x28, %rdx
    00000151: 	jne	.Ltmp4376 # Offset: 337
    00000157: 	subq	start_time(%rip), %rax
    0000015e: 	pxor	%xmm0, %xmm0
    00000162: 	movq	%rbp, %rdi
    00000165: 	cvtsi2sd	%rax, %xmm0
    0000016a: 	divsd	DATAat0x335b0(%rip), %xmm0
    00000172: 	addq	$0x18, %rsp
    00000176: 	popq	%rbx
    00000177: 	popq	%rbp
    00000178: 	popq	%r12
    0000017a: 	popq	%r13
    0000017c: 	popq	%r14
    0000017e: 	popq	%r15
    00000180: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 384
    00000185: 	nopl	(%rax) # Size: 3
.Ltmp4373:
    00000188: 	movq	%rbx, %rdi
    0000018b: 	movq	%rsp, %rsi
    0000018e: 	xorl	%edx, %edx
    00000190: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 400
    00000195: 	movq	%rax, (%rbx)
    00000198: 	movq	%rax, %rdi
    0000019b: 	movq	(%rsp), %rax
    0000019f: 	movq	%rax, 0x10(%rbx)
.Ltmp4379:
    000001a3: 	movq	%r12, %rdx
    000001a6: 	movq	%rbp, %rsi
    000001a9: 	callq	memcpy@PLT # Offset: 425
    000001ae: 	movq	(%rsp), %r12
    000001b2: 	movq	(%rbx), %rdi
    000001b5: 	jmp	.Ltmp4377 # Offset: 437
    000001ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4370:
    000001c0: 	movq	%r14, %rsi
    000001c3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001ca: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 458
    000001cf: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001d6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001dd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001e4: 	jne	.Ltmp4378 # Offset: 484
.Ltmp4375:
    000001ea: 	movq	-0x8(%rdx), %rax
    000001ee: 	addq	$0x200, %rax
    000001f4: 	jmp	.Ltmp4378 # Offset: 500
    000001f9: 	nopl	(%rax) # Size: 7
.Ltmp4374:
    00000200: 	testq	%r12, %r12
    00000203: 	je	.Ltmp4377 # Offset: 515
    00000209: 	jmp	.Ltmp4379 # Offset: 521
.Ltmp4376:
    0000020b: 	callq	__stack_chk_fail@PLT # Offset: 523
.Ltmp4372:
    00000210: 	leaq	DATAat0x33158(%rip), %rdi
    00000217: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 535
DWARF CFI Instructions:
    <empty>
End of Function "_Z21testOneFunction_equalItPFtPKtitEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeItEvv" after disassembly {
  Number      : 396
  State       : disassembled
  Address     : 0x308c0
  Size        : 0x240c
  MaxSize     : 0x240c
  Offset      : 0x308c0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeItEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0395:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	$0x3e80, %edi
    0000000b: 	pushq	%r14
    0000000d: 	pushq	%r13
    0000000f: 	pushq	%r12
    00000011: 	pushq	%rbp
    00000012: 	pushq	%rbx
    00000013: 	subq	$0x108, %rsp
    0000001a: 	movq	%fs:0x28, %rax
    00000023: 	movq	%rax, 0xf8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	leaq	0x40(%rsp), %rax
    00000032: 	movb	$0x0, 0x48(%rsp)
    00000037: 	movq	%rax, 0x18(%rsp)
    0000003c: 	movq	%rax, 0x30(%rsp)
    00000041: 	movabsq	$0x745f3631746e6975, %rax
    0000004b: 	movq	%rax, 0x40(%rsp)
    00000050: 	movq	$0x8, 0x38(%rsp)
    00000059: 	callq	_Znam@PLT # Offset: 89
    0000005e: 	movq	%rax, %r12
    00000061: 	cvttsd2si	init_value(%rip), %eax
    00000069: 	leaq	0x3e80(%r12), %rdx
    00000071: 	movd	%eax, %xmm0
    00000075: 	movq	%r12, %rax
    00000078: 	punpcklwd	%xmm0, %xmm0
    0000007c: 	pshufd	$0x0, %xmm0, %xmm0
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp4380:
    00000088: 	movups	%xmm0, (%rax)
    0000008b: 	addq	$0x10, %rax
    0000008f: 	cmpq	%rax, %rdx
    00000092: 	jne	.Ltmp4380 # Offset: 146
    00000094: 	movq	0x30(%rsp), %rbp
    00000099: 	movq	0x38(%rsp), %r13
    0000009e: 	leaq	0xe0(%rsp), %rbx
    000000a6: 	movq	%rbx, 0xd0(%rsp)
    000000ae: 	movq	%rbp, %rax
    000000b1: 	addq	%r13, %rax
    000000b4: 	je	.Ltmp4381 # Offset: 180
    000000b6: 	testq	%rbp, %rbp
    000000b9: 	je	.Ltmp4382 # Offset: 185
.Ltmp4381:
    000000bf: 	movq	%r13, 0x28(%rsp)
    000000c4: 	cmpq	$0xf, %r13
    000000c8: 	ja	.Ltmp4383 # Offset: 200
    000000ce: 	cmpq	$0x1, %r13
    000000d2: 	jne	.Ltmp4384 # Offset: 210
    000000d8: 	movzbl	(%rbp), %eax
    000000dc: 	movb	%al, 0xe0(%rsp)
    000000e3: 	movq	%rbx, %rax
.Ltmp4525:
    000000e6: 	movq	%r13, 0xd8(%rsp)
    000000ee: 	movb	$0x0, (%rax,%r13)
    000000f3: 	movabsq	$0x3fffffffffffffff, %rax
    000000fd: 	subq	0xd8(%rsp), %rax
    00000105: 	cmpq	$0x11, %rax
    00000109: 	jbe	.Ltmp4385 # Offset: 265
    0000010f: 	leaq	0xd0(%rsp), %rbp
    00000117: 	movl	$0x12, %edx
    0000011c: 	leaq	DATAat0x331d8(%rip), %rsi
    00000123: 	movq	%rbp, %rdi
    00000126: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 294
    0000012b: 	movq	%rbp, %rcx
    0000012e: 	leaq	_Z8bit_and1ItET_PKS0_iS0_(%rip), %rdx
    00000135: 	movl	$0x1f40, %esi
    0000013a: 	movq	%r12, %rdi
    0000013d: 	callq	_Z21testOneFunction_equalItPFtPKtitEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 317
    00000142: 	movq	0xd0(%rsp), %rdi
    0000014a: 	cmpq	%rbx, %rdi
    0000014d: 	je	.Ltmp4386 # Offset: 333
    0000014f: 	movq	0xe0(%rsp), %rax
    00000157: 	leaq	0x1(%rax), %rsi
    0000015b: 	callq	_ZdlPvm@PLT # Offset: 347
.Ltmp4386:
    00000160: 	movq	0x30(%rsp), %r14
    00000165: 	movq	0x38(%rsp), %r13
    0000016a: 	movq	%rbx, 0xd0(%rsp)
    00000172: 	movq	%r14, %rax
    00000175: 	addq	%r13, %rax
    00000178: 	je	.Ltmp4387 # Offset: 376
    0000017a: 	testq	%r14, %r14
    0000017d: 	je	.Ltmp4388 # Offset: 381
.Ltmp4387:
    00000183: 	movq	%r13, 0x28(%rsp)
    00000188: 	cmpq	$0xf, %r13
    0000018c: 	ja	.Ltmp4389 # Offset: 396
    00000192: 	cmpq	$0x1, %r13
    00000196: 	jne	.Ltmp4390 # Offset: 406
    0000019c: 	movzbl	(%r14), %eax
    000001a0: 	movb	%al, 0xe0(%rsp)
    000001a7: 	movq	%rbx, %rax
.Ltmp4529:
    000001aa: 	movq	%r13, 0xd8(%rsp)
    000001b2: 	movb	$0x0, (%rax,%r13)
    000001b7: 	movabsq	$0x3fffffffffffffff, %rax
    000001c1: 	subq	0xd8(%rsp), %rax
    000001c9: 	cmpq	$0x11, %rax
    000001cd: 	jbe	.Ltmp4391 # Offset: 461
    000001d3: 	movl	$0x12, %edx
    000001d8: 	leaq	DATAat0x331eb(%rip), %rsi
    000001df: 	movq	%rbp, %rdi
    000001e2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 482
    000001e7: 	movq	%rbp, %rcx
    000001ea: 	leaq	_Z8bit_and2ItET_PKS0_iS0_(%rip), %rdx
    000001f1: 	movl	$0x1f40, %esi
    000001f6: 	movq	%r12, %rdi
    000001f9: 	callq	_Z21testOneFunction_equalItPFtPKtitEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 505
    000001fe: 	movq	0xd0(%rsp), %rdi
    00000206: 	cmpq	%rbx, %rdi
    00000209: 	je	.Ltmp4392 # Offset: 521
    0000020b: 	movq	0xe0(%rsp), %rax
    00000213: 	leaq	0x1(%rax), %rsi
    00000217: 	callq	_ZdlPvm@PLT # Offset: 535
.Ltmp4392:
    0000021c: 	leaq	0x30(%rsp), %r13
    00000221: 	leaq	DATAat0x331fe(%rip), %rdx
    00000228: 	movq	%rbp, %rdi
    0000022b: 	movq	%r13, %rsi
    0000022e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 558
    00000233: 	movq	%rbp, %rcx
    00000236: 	leaq	_Z8bit_and3ItET_PKS0_iS0_(%rip), %rdx
    0000023d: 	movl	$0x1f40, %esi
    00000242: 	movq	%r12, %rdi
    00000245: 	callq	_Z21testOneFunction_equalItPFtPKtitEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 581
    0000024a: 	movq	0xd0(%rsp), %rdi
    00000252: 	cmpq	%rbx, %rdi
    00000255: 	je	.Ltmp4393 # Offset: 597
    00000257: 	movq	0xe0(%rsp), %rax
    0000025f: 	leaq	0x1(%rax), %rsi
    00000263: 	callq	_ZdlPvm@PLT # Offset: 611
.Ltmp4393:
    00000268: 	movq	0x30(%rsp), %r15
    0000026d: 	movq	0x38(%rsp), %r14
    00000272: 	movq	%rbx, 0xd0(%rsp)
    0000027a: 	movq	%r15, %rax
    0000027d: 	addq	%r14, %rax
    00000280: 	je	.Ltmp4394 # Offset: 640
    00000282: 	testq	%r15, %r15
    00000285: 	je	.Ltmp4395 # Offset: 645
.Ltmp4394:
    0000028b: 	movq	%r14, 0x28(%rsp)
    00000290: 	cmpq	$0xf, %r14
    00000294: 	ja	.Ltmp4396 # Offset: 660
    0000029a: 	cmpq	$0x1, %r14
    0000029e: 	jne	.Ltmp4397 # Offset: 670
    000002a4: 	movzbl	(%r15), %eax
    000002a8: 	movb	%al, 0xe0(%rsp)
    000002af: 	movq	%rbx, %rax
.Ltmp4527:
    000002b2: 	movq	%r14, 0xd8(%rsp)
    000002ba: 	movb	$0x0, (%rax,%r14)
    000002bf: 	movabsq	$0x3fffffffffffffff, %rax
    000002c9: 	subq	0xd8(%rsp), %rax
    000002d1: 	cmpq	$0x11, %rax
    000002d5: 	jbe	.Ltmp4398 # Offset: 725
    000002db: 	movl	$0x12, %edx
    000002e0: 	leaq	DATAat0x33211(%rip), %rsi
    000002e7: 	movq	%rbp, %rdi
    000002ea: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 746
    000002ef: 	movq	%rbp, %rcx
    000002f2: 	leaq	_Z8bit_and4ItET_PKS0_iS0_(%rip), %rdx
    000002f9: 	movl	$0x1f40, %esi
    000002fe: 	movq	%r12, %rdi
    00000301: 	callq	_Z21testOneFunction_equalItPFtPKtitEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 769
    00000306: 	movq	0xd0(%rsp), %rdi
    0000030e: 	cmpq	%rbx, %rdi
    00000311: 	je	.Ltmp4399 # Offset: 785
    00000313: 	movq	0xe0(%rsp), %rax
    0000031b: 	leaq	0x1(%rax), %rsi
    0000031f: 	callq	_ZdlPvm@PLT # Offset: 799
.Ltmp4399:
    00000324: 	leaq	DATAat0x33224(%rip), %rdx
    0000032b: 	movq	%r13, %rsi
    0000032e: 	movq	%rbp, %rdi
    00000331: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 817
    00000336: 	movq	%rbp, %rcx
    00000339: 	leaq	_Z8bit_and5ItET_PKS0_iS0_(%rip), %rdx
    00000340: 	movl	$0x1f40, %esi
    00000345: 	movq	%r12, %rdi
    00000348: 	callq	_Z21testOneFunction_equalItPFtPKtitEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 840
    0000034d: 	movq	0xd0(%rsp), %rdi
    00000355: 	cmpq	%rbx, %rdi
    00000358: 	je	.Ltmp4400 # Offset: 856
    0000035a: 	movq	0xe0(%rsp), %rax
    00000362: 	leaq	0x1(%rax), %rsi
    00000366: 	callq	_ZdlPvm@PLT # Offset: 870
.Ltmp4400:
    0000036b: 	leaq	DATAat0x33237(%rip), %rdx
    00000372: 	movq	%r13, %rsi
    00000375: 	movq	%rbp, %rdi
    00000378: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 888
    0000037d: 	movq	%rbp, %rcx
    00000380: 	leaq	_Z8bit_and6ItET_PKS0_iS0_(%rip), %rdx
    00000387: 	movl	$0x1f40, %esi
    0000038c: 	movq	%r12, %rdi
    0000038f: 	callq	_Z21testOneFunction_equalItPFtPKtitEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 911
    00000394: 	movq	0xd0(%rsp), %rdi
    0000039c: 	cmpq	%rbx, %rdi
    0000039f: 	je	.Ltmp4401 # Offset: 927
    000003a1: 	movq	0xe0(%rsp), %rax
    000003a9: 	leaq	0x1(%rax), %rsi
    000003ad: 	callq	_ZdlPvm@PLT # Offset: 941
.Ltmp4401:
    000003b2: 	movq	0x30(%rsp), %r15
    000003b7: 	movq	0x38(%rsp), %r14
    000003bc: 	movq	%rbx, 0xd0(%rsp)
    000003c4: 	movq	%r15, %rax
    000003c7: 	addq	%r14, %rax
    000003ca: 	je	.Ltmp4402 # Offset: 970
    000003cc: 	testq	%r15, %r15
    000003cf: 	je	.Ltmp4403 # Offset: 975
.Ltmp4402:
    000003d5: 	movq	%r14, 0x28(%rsp)
    000003da: 	cmpq	$0xf, %r14
    000003de: 	ja	.Ltmp4404 # Offset: 990
    000003e4: 	cmpq	$0x1, %r14
    000003e8: 	jne	.Ltmp4405 # Offset: 1000
    000003ee: 	movzbl	(%r15), %eax
    000003f2: 	movb	%al, 0xe0(%rsp)
    000003f9: 	movq	%rbx, %rax
.Ltmp4531:
    000003fc: 	movq	%r14, 0xd8(%rsp)
    00000404: 	movb	$0x0, (%rax,%r14)
    00000409: 	movabsq	$0x3fffffffffffffff, %rax
    00000413: 	subq	0xd8(%rsp), %rax
    0000041b: 	cmpq	$0x11, %rax
    0000041f: 	jbe	.Ltmp4406 # Offset: 1055
    00000425: 	movl	$0x12, %edx
    0000042a: 	leaq	DATAat0x3324a(%rip), %rsi
    00000431: 	movq	%rbp, %rdi
    00000434: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1076
    00000439: 	movq	%rbp, %rcx
    0000043c: 	leaq	_Z8bit_and7ItET_PKS0_iS0_(%rip), %rdx
    00000443: 	movl	$0x1f40, %esi
    00000448: 	movq	%r12, %rdi
    0000044b: 	callq	_Z21testOneFunction_equalItPFtPKtitEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1099
    00000450: 	movq	0xd0(%rsp), %rdi
    00000458: 	cmpq	%rbx, %rdi
    0000045b: 	je	.Ltmp4407 # Offset: 1115
    0000045d: 	movq	0xe0(%rsp), %rax
    00000465: 	leaq	0x1(%rax), %rsi
    00000469: 	callq	_ZdlPvm@PLT # Offset: 1129
.Ltmp4407:
    0000046e: 	leaq	DATAat0x3325d(%rip), %rdx
    00000475: 	movq	%r13, %rsi
    00000478: 	movq	%rbp, %rdi
    0000047b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1147
    00000480: 	movq	%rbp, %rcx
    00000483: 	leaq	_Z8bit_and8ItET_PKS0_iS0_(%rip), %rdx
    0000048a: 	movl	$0x1f40, %esi
    0000048f: 	movq	%r12, %rdi
    00000492: 	callq	_Z21testOneFunction_equalItPFtPKtitEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1170
    00000497: 	movq	0xd0(%rsp), %rdi
    0000049f: 	cmpq	%rbx, %rdi
    000004a2: 	je	.Ltmp4408 # Offset: 1186
    000004a4: 	movq	0xe0(%rsp), %rax
    000004ac: 	leaq	0x1(%rax), %rsi
    000004b0: 	callq	_ZdlPvm@PLT # Offset: 1200
.Ltmp4408:
    000004b5: 	leaq	0x50(%rsp), %rdi
    000004ba: 	leaq	DATAat0x33270(%rip), %rdx
    000004c1: 	movq	%r13, %rsi
    000004c4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1220
    000004c9: 	movl	iterations(%rip), %esi
    000004cf: 	movq	0x50(%rsp), %rdi
    000004d4: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 1236
    000004d9: 	leaq	DATAat0x33282(%rip), %rdx
    000004e0: 	movq	%r13, %rsi
    000004e3: 	movq	%rbp, %rdi
    000004e6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1254
    000004eb: 	movq	%rbp, %rcx
    000004ee: 	leaq	_Z7bit_or1ItET_PKS0_iS0_(%rip), %rdx
    000004f5: 	movl	$0x1f40, %esi
    000004fa: 	movq	%r12, %rdi
    000004fd: 	callq	_Z21testOneFunction_equalItPFtPKtitEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1277
    00000502: 	movq	0xd0(%rsp), %rdi
    0000050a: 	cmpq	%rbx, %rdi
    0000050d: 	je	.Ltmp4409 # Offset: 1293
    0000050f: 	movq	0xe0(%rsp), %rax
    00000517: 	leaq	0x1(%rax), %rsi
    0000051b: 	callq	_ZdlPvm@PLT # Offset: 1307
.Ltmp4409:
    00000520: 	movq	0x30(%rsp), %r15
    00000525: 	movq	0x38(%rsp), %r14
    0000052a: 	movq	%rbx, 0xd0(%rsp)
    00000532: 	movq	%r15, %rax
    00000535: 	addq	%r14, %rax
    00000538: 	je	.Ltmp4410 # Offset: 1336
    0000053a: 	testq	%r15, %r15
    0000053d: 	je	.Ltmp4411 # Offset: 1341
.Ltmp4410:
    00000543: 	movq	%r14, 0x28(%rsp)
    00000548: 	cmpq	$0xf, %r14
    0000054c: 	ja	.Ltmp4412 # Offset: 1356
    00000552: 	cmpq	$0x1, %r14
    00000556: 	jne	.Ltmp4413 # Offset: 1366
    0000055c: 	movzbl	(%r15), %eax
    00000560: 	movb	%al, 0xe0(%rsp)
    00000567: 	movq	%rbx, %rax
.Ltmp4533:
    0000056a: 	movq	%r14, 0xd8(%rsp)
    00000572: 	movb	$0x0, (%rax,%r14)
    00000577: 	movabsq	$0x3fffffffffffffff, %rax
    00000581: 	subq	0xd8(%rsp), %rax
    00000589: 	cmpq	$0x10, %rax
    0000058d: 	jbe	.Ltmp4414 # Offset: 1421
    00000593: 	movl	$0x11, %edx
    00000598: 	leaq	DATAat0x33294(%rip), %rsi
    0000059f: 	movq	%rbp, %rdi
    000005a2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1442
    000005a7: 	movq	%rbp, %rcx
    000005aa: 	leaq	_Z7bit_or2ItET_PKS0_iS0_(%rip), %rdx
    000005b1: 	movl	$0x1f40, %esi
    000005b6: 	movq	%r12, %rdi
    000005b9: 	callq	_Z21testOneFunction_equalItPFtPKtitEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1465
    000005be: 	movq	0xd0(%rsp), %rdi
    000005c6: 	cmpq	%rbx, %rdi
    000005c9: 	je	.Ltmp4415 # Offset: 1481
    000005cb: 	movq	0xe0(%rsp), %rax
    000005d3: 	leaq	0x1(%rax), %rsi
    000005d7: 	callq	_ZdlPvm@PLT # Offset: 1495
.Ltmp4415:
    000005dc: 	movq	0x30(%rsp), %r15
    000005e1: 	movq	0x38(%rsp), %r14
    000005e6: 	movq	%rbx, 0xd0(%rsp)
    000005ee: 	movq	%r15, %rax
    000005f1: 	addq	%r14, %rax
    000005f4: 	je	.Ltmp4416 # Offset: 1524
    000005f6: 	testq	%r15, %r15
    000005f9: 	je	.Ltmp4417 # Offset: 1529
.Ltmp4416:
    000005ff: 	movq	%r14, 0x28(%rsp)
    00000604: 	cmpq	$0xf, %r14
    00000608: 	ja	.Ltmp4418 # Offset: 1544
    0000060e: 	cmpq	$0x1, %r14
    00000612: 	jne	.Ltmp4419 # Offset: 1554
    00000618: 	movzbl	(%r15), %eax
    0000061c: 	movb	%al, 0xe0(%rsp)
    00000623: 	movq	%rbx, %rax
.Ltmp4537:
    00000626: 	movq	%r14, 0xd8(%rsp)
    0000062e: 	movb	$0x0, (%rax,%r14)
    00000633: 	movabsq	$0x3fffffffffffffff, %rax
    0000063d: 	subq	0xd8(%rsp), %rax
    00000645: 	cmpq	$0x10, %rax
    00000649: 	jbe	.Ltmp4420 # Offset: 1609
    0000064f: 	movl	$0x11, %edx
    00000654: 	leaq	DATAat0x332a6(%rip), %rsi
    0000065b: 	movq	%rbp, %rdi
    0000065e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1630
    00000663: 	movq	%rbp, %rcx
    00000666: 	leaq	_Z7bit_or3ItET_PKS0_iS0_(%rip), %rdx
    0000066d: 	movl	$0x1f40, %esi
    00000672: 	movq	%r12, %rdi
    00000675: 	callq	_Z21testOneFunction_equalItPFtPKtitEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1653
    0000067a: 	movq	0xd0(%rsp), %rdi
    00000682: 	cmpq	%rbx, %rdi
    00000685: 	je	.Ltmp4421 # Offset: 1669
    00000687: 	movq	0xe0(%rsp), %rax
    0000068f: 	leaq	0x1(%rax), %rsi
    00000693: 	callq	_ZdlPvm@PLT # Offset: 1683
.Ltmp4421:
    00000698: 	leaq	DATAat0x332b8(%rip), %rdx
    0000069f: 	movq	%r13, %rsi
    000006a2: 	movq	%rbp, %rdi
    000006a5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1701
    000006aa: 	movq	%rbp, %rcx
    000006ad: 	leaq	_Z7bit_or4ItET_PKS0_iS0_(%rip), %rdx
    000006b4: 	movl	$0x1f40, %esi
    000006b9: 	movq	%r12, %rdi
    000006bc: 	callq	_Z21testOneFunction_equalItPFtPKtitEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1724
    000006c1: 	movq	0xd0(%rsp), %rdi
    000006c9: 	cmpq	%rbx, %rdi
    000006cc: 	je	.Ltmp4422 # Offset: 1740
    000006ce: 	movq	0xe0(%rsp), %rax
    000006d6: 	leaq	0x1(%rax), %rsi
    000006da: 	callq	_ZdlPvm@PLT # Offset: 1754
.Ltmp4422:
    000006df: 	leaq	DATAat0x332ca(%rip), %rdx
    000006e6: 	movq	%r13, %rsi
    000006e9: 	movq	%rbp, %rdi
    000006ec: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1772
    000006f1: 	movq	%rbp, %rcx
    000006f4: 	leaq	_Z7bit_or5ItET_PKS0_iS0_(%rip), %rdx
    000006fb: 	movl	$0x1f40, %esi
    00000700: 	movq	%r12, %rdi
    00000703: 	callq	_Z21testOneFunction_equalItPFtPKtitEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1795
    00000708: 	movq	0xd0(%rsp), %rdi
    00000710: 	cmpq	%rbx, %rdi
    00000713: 	je	.Ltmp4423 # Offset: 1811
    00000715: 	movq	0xe0(%rsp), %rax
    0000071d: 	leaq	0x1(%rax), %rsi
    00000721: 	callq	_ZdlPvm@PLT # Offset: 1825
.Ltmp4423:
    00000726: 	movq	0x30(%rsp), %r15
    0000072b: 	movq	0x38(%rsp), %r14
    00000730: 	movq	%rbx, 0xd0(%rsp)
    00000738: 	movq	%r15, %rax
    0000073b: 	addq	%r14, %rax
    0000073e: 	je	.Ltmp4424 # Offset: 1854
    00000740: 	testq	%r15, %r15
    00000743: 	je	.Ltmp4425 # Offset: 1859
.Ltmp4424:
    00000749: 	movq	%r14, 0x28(%rsp)
    0000074e: 	cmpq	$0xf, %r14
    00000752: 	ja	.Ltmp4426 # Offset: 1874
    00000758: 	cmpq	$0x1, %r14
    0000075c: 	jne	.Ltmp4427 # Offset: 1884
    00000762: 	movzbl	(%r15), %eax
    00000766: 	movb	%al, 0xe0(%rsp)
    0000076d: 	movq	%rbx, %rax
.Ltmp4535:
    00000770: 	movq	%r14, 0xd8(%rsp)
    00000778: 	movb	$0x0, (%rax,%r14)
    0000077d: 	movabsq	$0x3fffffffffffffff, %rax
    00000787: 	subq	0xd8(%rsp), %rax
    0000078f: 	cmpq	$0x10, %rax
    00000793: 	jbe	.Ltmp4428 # Offset: 1939
    00000799: 	movl	$0x11, %edx
    0000079e: 	leaq	DATAat0x332dc(%rip), %rsi
    000007a5: 	movq	%rbp, %rdi
    000007a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1960
    000007ad: 	movq	%rbp, %rcx
    000007b0: 	leaq	_Z7bit_or6ItET_PKS0_iS0_(%rip), %rdx
    000007b7: 	movl	$0x1f40, %esi
    000007bc: 	movq	%r12, %rdi
    000007bf: 	callq	_Z21testOneFunction_equalItPFtPKtitEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1983
    000007c4: 	movq	0xd0(%rsp), %rdi
    000007cc: 	cmpq	%rbx, %rdi
    000007cf: 	je	.Ltmp4429 # Offset: 1999
    000007d1: 	movq	0xe0(%rsp), %rax
    000007d9: 	leaq	0x1(%rax), %rsi
    000007dd: 	callq	_ZdlPvm@PLT # Offset: 2013
.Ltmp4429:
    000007e2: 	movq	0x30(%rsp), %r15
    000007e7: 	movq	0x38(%rsp), %r14
    000007ec: 	movq	%rbx, 0xd0(%rsp)
    000007f4: 	movq	%r15, %rax
    000007f7: 	addq	%r14, %rax
    000007fa: 	je	.Ltmp4430 # Offset: 2042
    000007fc: 	testq	%r15, %r15
    000007ff: 	je	.Ltmp4431 # Offset: 2047
.Ltmp4430:
    00000805: 	movq	%r14, 0x28(%rsp)
    0000080a: 	cmpq	$0xf, %r14
    0000080e: 	ja	.Ltmp4432 # Offset: 2062
    00000814: 	cmpq	$0x1, %r14
    00000818: 	jne	.Ltmp4433 # Offset: 2072
    0000081e: 	movzbl	(%r15), %eax
    00000822: 	movb	%al, 0xe0(%rsp)
    00000829: 	movq	%rbx, %rax
.Ltmp4541:
    0000082c: 	movq	%r14, 0xd8(%rsp)
    00000834: 	movb	$0x0, (%rax,%r14)
    00000839: 	movabsq	$0x3fffffffffffffff, %rax
    00000843: 	subq	0xd8(%rsp), %rax
    0000084b: 	cmpq	$0x10, %rax
    0000084f: 	jbe	.Ltmp4434 # Offset: 2127
    00000855: 	movl	$0x11, %edx
    0000085a: 	leaq	DATAat0x332ee(%rip), %rsi
    00000861: 	movq	%rbp, %rdi
    00000864: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2148
    00000869: 	movq	%rbp, %rcx
    0000086c: 	leaq	_Z7bit_or7ItET_PKS0_iS0_(%rip), %rdx
    00000873: 	movl	$0x1f40, %esi
    00000878: 	movq	%r12, %rdi
    0000087b: 	callq	_Z21testOneFunction_equalItPFtPKtitEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2171
    00000880: 	movq	0xd0(%rsp), %rdi
    00000888: 	cmpq	%rbx, %rdi
    0000088b: 	je	.Ltmp4435 # Offset: 2187
    0000088d: 	movq	0xe0(%rsp), %rax
    00000895: 	leaq	0x1(%rax), %rsi
    00000899: 	callq	_ZdlPvm@PLT # Offset: 2201
.Ltmp4435:
    0000089e: 	leaq	DATAat0x33300(%rip), %rdx
    000008a5: 	movq	%r13, %rsi
    000008a8: 	movq	%rbp, %rdi
    000008ab: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2219
    000008b0: 	movq	%rbp, %rcx
    000008b3: 	leaq	_Z7bit_or8ItET_PKS0_iS0_(%rip), %rdx
    000008ba: 	movl	$0x1f40, %esi
    000008bf: 	movq	%r12, %rdi
    000008c2: 	callq	_Z21testOneFunction_equalItPFtPKtitEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2242
    000008c7: 	movq	0xd0(%rsp), %rdi
    000008cf: 	cmpq	%rbx, %rdi
    000008d2: 	je	.Ltmp4436 # Offset: 2258
    000008d4: 	movq	0xe0(%rsp), %rax
    000008dc: 	leaq	0x1(%rax), %rsi
    000008e0: 	callq	_ZdlPvm@PLT # Offset: 2272
.Ltmp4436:
    000008e5: 	leaq	0x70(%rsp), %rdi
    000008ea: 	leaq	DATAat0x33312(%rip), %rdx
    000008f1: 	movq	%r13, %rsi
    000008f4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2292
    000008f9: 	movl	iterations(%rip), %esi
    000008ff: 	movq	0x70(%rsp), %rdi
    00000904: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 2308
    00000909: 	leaq	DATAat0x33323(%rip), %rdx
    00000910: 	movq	%r13, %rsi
    00000913: 	movq	%rbp, %rdi
    00000916: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2326
    0000091b: 	movq	%rbp, %rcx
    0000091e: 	leaq	_Z8bit_xor1ItET_PKS0_iS0_(%rip), %rdx
    00000925: 	movl	$0x1f40, %esi
    0000092a: 	movq	%r12, %rdi
    0000092d: 	callq	_Z21testOneFunction_equalItPFtPKtitEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2349
    00000932: 	movq	0xd0(%rsp), %rdi
    0000093a: 	cmpq	%rbx, %rdi
    0000093d: 	je	.Ltmp4437 # Offset: 2365
    0000093f: 	movq	0xe0(%rsp), %rax
    00000947: 	leaq	0x1(%rax), %rsi
    0000094b: 	callq	_ZdlPvm@PLT # Offset: 2379
.Ltmp4437:
    00000950: 	movq	0x30(%rsp), %r15
    00000955: 	movq	0x38(%rsp), %r14
    0000095a: 	movq	%rbx, 0xd0(%rsp)
    00000962: 	movq	%r15, %rax
    00000965: 	addq	%r14, %rax
    00000968: 	je	.Ltmp4438 # Offset: 2408
    0000096a: 	testq	%r15, %r15
    0000096d: 	je	.Ltmp4439 # Offset: 2413
.Ltmp4438:
    00000973: 	movq	%r14, 0x28(%rsp)
    00000978: 	cmpq	$0xf, %r14
    0000097c: 	ja	.Ltmp4440 # Offset: 2428
    00000982: 	cmpq	$0x1, %r14
    00000986: 	jne	.Ltmp4441 # Offset: 2438
    0000098c: 	movzbl	(%r15), %eax
    00000990: 	movb	%al, 0xe0(%rsp)
    00000997: 	movq	%rbx, %rax
.Ltmp4539:
    0000099a: 	movq	%r14, 0xd8(%rsp)
    000009a2: 	movb	$0x0, (%rax,%r14)
    000009a7: 	movabsq	$0x3fffffffffffffff, %rax
    000009b1: 	subq	0xd8(%rsp), %rax
    000009b9: 	cmpq	$0x11, %rax
    000009bd: 	jbe	.Ltmp4442 # Offset: 2493
    000009c3: 	movl	$0x12, %edx
    000009c8: 	leaq	DATAat0x33336(%rip), %rsi
    000009cf: 	movq	%rbp, %rdi
    000009d2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2514
    000009d7: 	movq	%rbp, %rcx
    000009da: 	leaq	_Z8bit_xor2ItET_PKS0_iS0_(%rip), %rdx
    000009e1: 	movl	$0x1f40, %esi
    000009e6: 	movq	%r12, %rdi
    000009e9: 	callq	_Z21testOneFunction_equalItPFtPKtitEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2537
    000009ee: 	movq	0xd0(%rsp), %rdi
    000009f6: 	cmpq	%rbx, %rdi
    000009f9: 	je	.Ltmp4443 # Offset: 2553
    000009fb: 	movq	0xe0(%rsp), %rax
    00000a03: 	leaq	0x1(%rax), %rsi
    00000a07: 	callq	_ZdlPvm@PLT # Offset: 2567
.Ltmp4443:
    00000a0c: 	leaq	DATAat0x33349(%rip), %rdx
    00000a13: 	movq	%r13, %rsi
    00000a16: 	movq	%rbp, %rdi
    00000a19: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2585
    00000a1e: 	movq	%rbp, %rcx
    00000a21: 	leaq	_Z8bit_xor3ItET_PKS0_iS0_(%rip), %rdx
    00000a28: 	movl	$0x1f40, %esi
    00000a2d: 	movq	%r12, %rdi
    00000a30: 	callq	_Z21testOneFunction_equalItPFtPKtitEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2608
    00000a35: 	movq	0xd0(%rsp), %rdi
    00000a3d: 	cmpq	%rbx, %rdi
    00000a40: 	je	.Ltmp4444 # Offset: 2624
    00000a42: 	movq	0xe0(%rsp), %rax
    00000a4a: 	leaq	0x1(%rax), %rsi
    00000a4e: 	callq	_ZdlPvm@PLT # Offset: 2638
.Ltmp4444:
    00000a53: 	leaq	DATAat0x3335c(%rip), %rdx
    00000a5a: 	movq	%r13, %rsi
    00000a5d: 	movq	%rbp, %rdi
    00000a60: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2656
    00000a65: 	movq	%rbp, %rcx
    00000a68: 	leaq	_Z8bit_xor4ItET_PKS0_iS0_(%rip), %rdx
    00000a6f: 	movl	$0x1f40, %esi
    00000a74: 	movq	%r12, %rdi
    00000a77: 	callq	_Z21testOneFunction_equalItPFtPKtitEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2679
    00000a7c: 	movq	0xd0(%rsp), %rdi
    00000a84: 	cmpq	%rbx, %rdi
    00000a87: 	je	.Ltmp4445 # Offset: 2695
    00000a89: 	movq	0xe0(%rsp), %rax
    00000a91: 	leaq	0x1(%rax), %rsi
    00000a95: 	callq	_ZdlPvm@PLT # Offset: 2709
.Ltmp4445:
    00000a9a: 	movq	0x30(%rsp), %r15
    00000a9f: 	movq	0x38(%rsp), %r14
    00000aa4: 	movq	%rbx, 0xd0(%rsp)
    00000aac: 	movq	%r15, %rax
    00000aaf: 	addq	%r14, %rax
    00000ab2: 	je	.Ltmp4446 # Offset: 2738
    00000ab4: 	testq	%r15, %r15
    00000ab7: 	je	.Ltmp4447 # Offset: 2743
.Ltmp4446:
    00000abd: 	movq	%r14, 0x28(%rsp)
    00000ac2: 	cmpq	$0xf, %r14
    00000ac6: 	ja	.Ltmp4448 # Offset: 2758
    00000acc: 	cmpq	$0x1, %r14
    00000ad0: 	jne	.Ltmp4449 # Offset: 2768
    00000ad6: 	movzbl	(%r15), %eax
    00000ada: 	movb	%al, 0xe0(%rsp)
    00000ae1: 	movq	%rbx, %rax
.Ltmp4545:
    00000ae4: 	movq	%r14, 0xd8(%rsp)
    00000aec: 	movb	$0x0, (%rax,%r14)
    00000af1: 	movabsq	$0x3fffffffffffffff, %rax
    00000afb: 	subq	0xd8(%rsp), %rax
    00000b03: 	cmpq	$0x11, %rax
    00000b07: 	jbe	.Ltmp4450 # Offset: 2823
    00000b0d: 	movl	$0x12, %edx
    00000b12: 	leaq	DATAat0x3336f(%rip), %rsi
    00000b19: 	movq	%rbp, %rdi
    00000b1c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2844
    00000b21: 	movq	%rbp, %rcx
    00000b24: 	leaq	_Z8bit_xor5ItET_PKS0_iS0_(%rip), %rdx
    00000b2b: 	movl	$0x1f40, %esi
    00000b30: 	movq	%r12, %rdi
    00000b33: 	callq	_Z21testOneFunction_equalItPFtPKtitEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2867
    00000b38: 	movq	0xd0(%rsp), %rdi
    00000b40: 	cmpq	%rbx, %rdi
    00000b43: 	je	.Ltmp4451 # Offset: 2883
    00000b45: 	movq	0xe0(%rsp), %rax
    00000b4d: 	leaq	0x1(%rax), %rsi
    00000b51: 	callq	_ZdlPvm@PLT # Offset: 2897
.Ltmp4451:
    00000b56: 	leaq	DATAat0x33382(%rip), %rdx
    00000b5d: 	movq	%r13, %rsi
    00000b60: 	movq	%rbp, %rdi
    00000b63: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2915
    00000b68: 	movq	%rbp, %rcx
    00000b6b: 	leaq	_Z8bit_xor6ItET_PKS0_iS0_(%rip), %rdx
    00000b72: 	movl	$0x1f40, %esi
    00000b77: 	movq	%r12, %rdi
    00000b7a: 	callq	_Z21testOneFunction_equalItPFtPKtitEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2938
    00000b7f: 	movq	0xd0(%rsp), %rdi
    00000b87: 	cmpq	%rbx, %rdi
    00000b8a: 	je	.Ltmp4452 # Offset: 2954
    00000b8c: 	movq	0xe0(%rsp), %rax
    00000b94: 	leaq	0x1(%rax), %rsi
    00000b98: 	callq	_ZdlPvm@PLT # Offset: 2968
.Ltmp4452:
    00000b9d: 	leaq	DATAat0x33395(%rip), %rdx
    00000ba4: 	movq	%r13, %rsi
    00000ba7: 	movq	%rbp, %rdi
    00000baa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2986
    00000baf: 	movq	%rbp, %rcx
    00000bb2: 	leaq	_Z8bit_xor7ItET_PKS0_iS0_(%rip), %rdx
    00000bb9: 	movl	$0x1f40, %esi
    00000bbe: 	movq	%r12, %rdi
    00000bc1: 	callq	_Z21testOneFunction_equalItPFtPKtitEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3009
    00000bc6: 	movq	0xd0(%rsp), %rdi
    00000bce: 	cmpq	%rbx, %rdi
    00000bd1: 	je	.Ltmp4453 # Offset: 3025
    00000bd3: 	movq	0xe0(%rsp), %rax
    00000bdb: 	leaq	0x1(%rax), %rsi
    00000bdf: 	callq	_ZdlPvm@PLT # Offset: 3039
.Ltmp4453:
    00000be4: 	leaq	DATAat0x333a8(%rip), %rdx
    00000beb: 	movq	%r13, %rsi
    00000bee: 	movq	%rbp, %rdi
    00000bf1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3057
    00000bf6: 	movq	%rbp, %rcx
    00000bf9: 	leaq	_Z8bit_xor8ItET_PKS0_iS0_(%rip), %rdx
    00000c00: 	movl	$0x1f40, %esi
    00000c05: 	movq	%r12, %rdi
    00000c08: 	callq	_Z21testOneFunction_equalItPFtPKtitEEvPKT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3080
    00000c0d: 	movq	0xd0(%rsp), %rdi
    00000c15: 	cmpq	%rbx, %rdi
    00000c18: 	je	.Ltmp4454 # Offset: 3096
    00000c1a: 	movq	0xe0(%rsp), %rax
    00000c22: 	leaq	0x1(%rax), %rsi
    00000c26: 	callq	_ZdlPvm@PLT # Offset: 3110
.Ltmp4454:
    00000c2b: 	movq	0x30(%rsp), %r15
    00000c30: 	leaq	0xa0(%rsp), %rax
    00000c38: 	movq	0x38(%rsp), %r14
    00000c3d: 	movq	%rax, 0x8(%rsp)
    00000c42: 	movq	%rax, 0x90(%rsp)
    00000c4a: 	movq	%r15, %rax
    00000c4d: 	addq	%r14, %rax
    00000c50: 	je	.Ltmp4455 # Offset: 3152
    00000c52: 	testq	%r15, %r15
    00000c55: 	je	.Ltmp4456 # Offset: 3157
.Ltmp4455:
    00000c5b: 	movq	%r14, 0x28(%rsp)
    00000c60: 	cmpq	$0xf, %r14
    00000c64: 	ja	.Ltmp4457 # Offset: 3172
    00000c6a: 	cmpq	$0x1, %r14
    00000c6e: 	jne	.Ltmp4458 # Offset: 3182
    00000c74: 	movzbl	(%r15), %eax
    00000c78: 	movb	%al, 0xa0(%rsp)
    00000c7f: 	movq	0x8(%rsp), %rax
.Ltmp4543:
    00000c84: 	movq	%r14, 0x98(%rsp)
    00000c8c: 	movb	$0x0, (%rax,%r14)
    00000c91: 	movabsq	$0x3fffffffffffffff, %rax
    00000c9b: 	subq	0x98(%rsp), %rax
    00000ca3: 	cmpq	$0x10, %rax
    00000ca7: 	jbe	.Ltmp4459 # Offset: 3239
    00000cad: 	leaq	0x90(%rsp), %rdi
    00000cb5: 	movl	$0x11, %edx
    00000cba: 	leaq	DATAat0x333bb(%rip), %rsi
    00000cc1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3265
    00000cc6: 	movl	iterations(%rip), %esi
    00000ccc: 	movq	0x90(%rsp), %rdi
    00000cd4: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 3284
    00000cd9: 	movq	0x30(%rsp), %r15
    00000cde: 	movq	0x38(%rsp), %r14
    00000ce3: 	movq	%rbx, 0xd0(%rsp)
    00000ceb: 	movq	%r15, %rax
    00000cee: 	addq	%r14, %rax
    00000cf1: 	je	.Ltmp4460 # Offset: 3313
    00000cf3: 	testq	%r15, %r15
    00000cf6: 	je	.Ltmp4461 # Offset: 3318
.Ltmp4460:
    00000cfc: 	movq	%r14, 0x28(%rsp)
    00000d01: 	cmpq	$0xf, %r14
    00000d05: 	ja	.Ltmp4462 # Offset: 3333
    00000d0b: 	cmpq	$0x1, %r14
    00000d0f: 	jne	.Ltmp4463 # Offset: 3343
    00000d15: 	movzbl	(%r15), %eax
    00000d19: 	movb	%al, 0xe0(%rsp)
    00000d20: 	movq	%rbx, %rax
.Ltmp4551:
    00000d23: 	movq	%r14, 0xd8(%rsp)
    00000d2b: 	movb	$0x0, (%rax,%r14)
    00000d30: 	movabsq	$0x3fffffffffffffff, %rax
    00000d3a: 	subq	0xd8(%rsp), %rax
    00000d42: 	cmpq	$0x15, %rax
    00000d46: 	jbe	.Ltmp4464 # Offset: 3398
    00000d4c: 	movl	$0x16, %edx
    00000d51: 	leaq	DATAat0x333cd(%rip), %rsi
    00000d58: 	movq	%rbp, %rdi
    00000d5b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3419
    00000d60: 	movq	%rbp, %r8
    00000d63: 	movl	$0x1, %edx
    00000d68: 	movl	$0x1f40, %esi
    00000d6d: 	movq	%r12, %rdi
    00000d70: 	leaq	_Z10logic_and1ItEbPKT_ib(%rip), %rcx
    00000d77: 	callq	_Z23testOneFunction_logicalItPFbPKtibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3447
    00000d7c: 	movq	0xd0(%rsp), %rdi
    00000d84: 	cmpq	%rbx, %rdi
    00000d87: 	je	.Ltmp4465 # Offset: 3463
    00000d89: 	movq	0xe0(%rsp), %rax
    00000d91: 	leaq	0x1(%rax), %rsi
    00000d95: 	callq	_ZdlPvm@PLT # Offset: 3477
.Ltmp4465:
    00000d9a: 	leaq	DATAat0x333e4(%rip), %rdx
    00000da1: 	movq	%r13, %rsi
    00000da4: 	movq	%rbp, %rdi
    00000da7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3495
    00000dac: 	movq	%rbp, %r8
    00000daf: 	movl	$0x1, %edx
    00000db4: 	movl	$0x1f40, %esi
    00000db9: 	movq	%r12, %rdi
    00000dbc: 	leaq	_Z10logic_and2ItEbPKT_ib(%rip), %rcx
    00000dc3: 	callq	_Z23testOneFunction_logicalItPFbPKtibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3523
    00000dc8: 	movq	0xd0(%rsp), %rdi
    00000dd0: 	cmpq	%rbx, %rdi
    00000dd3: 	je	.Ltmp4466 # Offset: 3539
    00000dd5: 	movq	0xe0(%rsp), %rax
    00000ddd: 	leaq	0x1(%rax), %rsi
    00000de1: 	callq	_ZdlPvm@PLT # Offset: 3553
.Ltmp4466:
    00000de6: 	leaq	DATAat0x333fb(%rip), %rdx
    00000ded: 	movq	%r13, %rsi
    00000df0: 	movq	%rbp, %rdi
    00000df3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3571
    00000df8: 	movq	%rbp, %r8
    00000dfb: 	movl	$0x1, %edx
    00000e00: 	movl	$0x1f40, %esi
    00000e05: 	movq	%r12, %rdi
    00000e08: 	leaq	_Z10logic_and3ItEbPKT_ib(%rip), %rcx
    00000e0f: 	callq	_Z23testOneFunction_logicalItPFbPKtibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3599
    00000e14: 	movq	0xd0(%rsp), %rdi
    00000e1c: 	cmpq	%rbx, %rdi
    00000e1f: 	je	.Ltmp4467 # Offset: 3615
    00000e21: 	movq	0xe0(%rsp), %rax
    00000e29: 	leaq	0x1(%rax), %rsi
    00000e2d: 	callq	_ZdlPvm@PLT # Offset: 3629
.Ltmp4467:
    00000e32: 	leaq	DATAat0x33412(%rip), %rdx
    00000e39: 	movq	%r13, %rsi
    00000e3c: 	movq	%rbp, %rdi
    00000e3f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3647
    00000e44: 	movq	%rbp, %r8
    00000e47: 	movl	$0x1, %edx
    00000e4c: 	movl	$0x1f40, %esi
    00000e51: 	movq	%r12, %rdi
    00000e54: 	leaq	_Z10logic_and4ItEbPKT_ib(%rip), %rcx
    00000e5b: 	callq	_Z23testOneFunction_logicalItPFbPKtibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3675
    00000e60: 	movq	0xd0(%rsp), %rdi
    00000e68: 	cmpq	%rbx, %rdi
    00000e6b: 	je	.Ltmp4468 # Offset: 3691
    00000e6d: 	movq	0xe0(%rsp), %rax
    00000e75: 	leaq	0x1(%rax), %rsi
    00000e79: 	callq	_ZdlPvm@PLT # Offset: 3705
.Ltmp4468:
    00000e7e: 	movq	0x30(%rsp), %r15
    00000e83: 	movq	0x38(%rsp), %r14
    00000e88: 	movq	%rbx, 0xd0(%rsp)
    00000e90: 	movq	%r15, %rax
    00000e93: 	addq	%r14, %rax
    00000e96: 	je	.Ltmp4469 # Offset: 3734
    00000e98: 	testq	%r15, %r15
    00000e9b: 	je	.Ltmp4470 # Offset: 3739
.Ltmp4469:
    00000ea1: 	movq	%r14, 0x28(%rsp)
    00000ea6: 	cmpq	$0xf, %r14
    00000eaa: 	ja	.Ltmp4471 # Offset: 3754
    00000eb0: 	cmpq	$0x1, %r14
    00000eb4: 	jne	.Ltmp4472 # Offset: 3764
    00000eba: 	movzbl	(%r15), %eax
    00000ebe: 	movb	%al, 0xe0(%rsp)
    00000ec5: 	movq	%rbx, %rax
.Ltmp4549:
    00000ec8: 	movq	%r14, 0xd8(%rsp)
    00000ed0: 	movb	$0x0, (%rax,%r14)
    00000ed5: 	movabsq	$0x3fffffffffffffff, %rax
    00000edf: 	subq	0xd8(%rsp), %rax
    00000ee7: 	cmpq	$0x15, %rax
    00000eeb: 	jbe	.Ltmp4473 # Offset: 3819
    00000ef1: 	movl	$0x16, %edx
    00000ef6: 	leaq	DATAat0x33429(%rip), %rsi
    00000efd: 	movq	%rbp, %rdi
    00000f00: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3840
    00000f05: 	movq	%rbp, %r8
    00000f08: 	movl	$0x1, %edx
    00000f0d: 	movl	$0x1f40, %esi
    00000f12: 	movq	%r12, %rdi
    00000f15: 	leaq	_Z10logic_and5ItEbPKT_ib(%rip), %rcx
    00000f1c: 	callq	_Z23testOneFunction_logicalItPFbPKtibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3868
    00000f21: 	movq	0xd0(%rsp), %rdi
    00000f29: 	cmpq	%rbx, %rdi
    00000f2c: 	je	.Ltmp4474 # Offset: 3884
    00000f2e: 	movq	0xe0(%rsp), %rax
    00000f36: 	leaq	0x1(%rax), %rsi
    00000f3a: 	callq	_ZdlPvm@PLT # Offset: 3898
.Ltmp4474:
    00000f3f: 	leaq	DATAat0x33440(%rip), %rdx
    00000f46: 	movq	%r13, %rsi
    00000f49: 	movq	%rbp, %rdi
    00000f4c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3916
    00000f51: 	movq	%rbp, %r8
    00000f54: 	movl	$0x1, %edx
    00000f59: 	movl	$0x1f40, %esi
    00000f5e: 	movq	%r12, %rdi
    00000f61: 	leaq	_Z10logic_and6ItEbPKT_ib(%rip), %rcx
    00000f68: 	callq	_Z23testOneFunction_logicalItPFbPKtibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3944
    00000f6d: 	movq	0xd0(%rsp), %rdi
    00000f75: 	cmpq	%rbx, %rdi
    00000f78: 	je	.Ltmp4475 # Offset: 3960
    00000f7a: 	movq	0xe0(%rsp), %rax
    00000f82: 	leaq	0x1(%rax), %rsi
    00000f86: 	callq	_ZdlPvm@PLT # Offset: 3974
.Ltmp4475:
    00000f8b: 	leaq	DATAat0x33457(%rip), %rdx
    00000f92: 	movq	%r13, %rsi
    00000f95: 	movq	%rbp, %rdi
    00000f98: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3992
    00000f9d: 	movq	%rbp, %r8
    00000fa0: 	movl	$0x1, %edx
    00000fa5: 	movl	$0x1f40, %esi
    00000faa: 	movq	%r12, %rdi
    00000fad: 	leaq	_Z10logic_and7ItEbPKT_ib(%rip), %rcx
    00000fb4: 	callq	_Z23testOneFunction_logicalItPFbPKtibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4020
    00000fb9: 	movq	0xd0(%rsp), %rdi
    00000fc1: 	cmpq	%rbx, %rdi
    00000fc4: 	je	.Ltmp4476 # Offset: 4036
    00000fc6: 	movq	0xe0(%rsp), %rax
    00000fce: 	leaq	0x1(%rax), %rsi
    00000fd2: 	callq	_ZdlPvm@PLT # Offset: 4050
.Ltmp4476:
    00000fd7: 	leaq	DATAat0x3346e(%rip), %rdx
    00000fde: 	movq	%r13, %rsi
    00000fe1: 	movq	%rbp, %rdi
    00000fe4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4068
    00000fe9: 	movq	%rbp, %r8
    00000fec: 	movl	$0x1, %edx
    00000ff1: 	movl	$0x1f40, %esi
    00000ff6: 	movq	%r12, %rdi
    00000ff9: 	leaq	_Z10logic_and8ItEbPKT_ib(%rip), %rcx
    00001000: 	callq	_Z23testOneFunction_logicalItPFbPKtibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4096
    00001005: 	movq	0xd0(%rsp), %rdi
    0000100d: 	cmpq	%rbx, %rdi
    00001010: 	je	.Ltmp4477 # Offset: 4112
    00001012: 	movq	0xe0(%rsp), %rax
    0000101a: 	leaq	0x1(%rax), %rsi
    0000101e: 	callq	_ZdlPvm@PLT # Offset: 4126
.Ltmp4477:
    00001023: 	movq	0x30(%rsp), %r15
    00001028: 	leaq	0xc0(%rsp), %rax
    00001030: 	movq	0x38(%rsp), %r14
    00001035: 	movq	%rax, 0x10(%rsp)
    0000103a: 	movq	%rax, 0xb0(%rsp)
    00001042: 	movq	%r15, %rax
    00001045: 	addq	%r14, %rax
    00001048: 	je	.Ltmp4478 # Offset: 4168
    0000104a: 	testq	%r15, %r15
    0000104d: 	je	.Ltmp4479 # Offset: 4173
.Ltmp4478:
    00001053: 	movq	%r14, 0x28(%rsp)
    00001058: 	cmpq	$0xf, %r14
    0000105c: 	ja	.Ltmp4480 # Offset: 4188
    00001062: 	cmpq	$0x1, %r14
    00001066: 	jne	.Ltmp4481 # Offset: 4198
    0000106c: 	movzbl	(%r15), %eax
    00001070: 	movb	%al, 0xc0(%rsp)
    00001077: 	movq	0x10(%rsp), %rax
.Ltmp4547:
    0000107c: 	movq	%r14, 0xb8(%rsp)
    00001084: 	movb	$0x0, (%rax,%r14)
    00001089: 	movabsq	$0x3fffffffffffffff, %rax
    00001093: 	subq	0xb8(%rsp), %rax
    0000109b: 	cmpq	$0x14, %rax
    0000109f: 	jbe	.Ltmp4482 # Offset: 4255
    000010a5: 	leaq	0xb0(%rsp), %rdi
    000010ad: 	movl	$0x15, %edx
    000010b2: 	leaq	DATAat0x33485(%rip), %rsi
    000010b9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4281
    000010be: 	movl	iterations(%rip), %esi
    000010c4: 	movq	0xb0(%rsp), %rdi
    000010cc: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 4300
    000010d1: 	leaq	DATAat0x3349b(%rip), %rdx
    000010d8: 	movq	%r13, %rsi
    000010db: 	movq	%rbp, %rdi
    000010de: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4318
    000010e3: 	movq	%rbp, %r8
    000010e6: 	leaq	_Z9logic_or1ItEbPKT_ib(%rip), %rcx
    000010ed: 	xorl	%edx, %edx
    000010ef: 	movq	%r12, %rdi
    000010f2: 	movl	$0x1f40, %esi
    000010f7: 	callq	_Z23testOneFunction_logicalItPFbPKtibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4343
    000010fc: 	movq	0xd0(%rsp), %rdi
    00001104: 	cmpq	%rbx, %rdi
    00001107: 	je	.Ltmp4483 # Offset: 4359
    00001109: 	movq	0xe0(%rsp), %rax
    00001111: 	leaq	0x1(%rax), %rsi
    00001115: 	callq	_ZdlPvm@PLT # Offset: 4373
.Ltmp4483:
    0000111a: 	leaq	DATAat0x334b1(%rip), %rdx
    00001121: 	movq	%r13, %rsi
    00001124: 	movq	%rbp, %rdi
    00001127: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4391
    0000112c: 	movq	%rbp, %r8
    0000112f: 	leaq	_Z12logic_or_optItEbPKT_ib(%rip), %rcx
    00001136: 	xorl	%edx, %edx
    00001138: 	movq	%r12, %rdi
    0000113b: 	movl	$0x1f40, %esi
    00001140: 	callq	_Z23testOneFunction_logicalItPFbPKtibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4416
    00001145: 	movq	0xd0(%rsp), %rdi
    0000114d: 	cmpq	%rbx, %rdi
    00001150: 	je	.Ltmp4484 # Offset: 4432
    00001152: 	movq	0xe0(%rsp), %rax
    0000115a: 	leaq	0x1(%rax), %rsi
    0000115e: 	callq	_ZdlPvm@PLT # Offset: 4446
.Ltmp4484:
    00001163: 	leaq	DATAat0x334ce(%rip), %rdx
    0000116a: 	movq	%r13, %rsi
    0000116d: 	movq	%rbp, %rdi
    00001170: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4464
    00001175: 	movq	%rbp, %r8
    00001178: 	leaq	_Z9logic_or2ItEbPKT_ib(%rip), %rcx
    0000117f: 	xorl	%edx, %edx
    00001181: 	movq	%r12, %rdi
    00001184: 	movl	$0x1f40, %esi
    00001189: 	callq	_Z23testOneFunction_logicalItPFbPKtibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4489
    0000118e: 	movq	0xd0(%rsp), %rdi
    00001196: 	cmpq	%rbx, %rdi
    00001199: 	je	.Ltmp4485 # Offset: 4505
    0000119b: 	movq	0xe0(%rsp), %rax
    000011a3: 	leaq	0x1(%rax), %rsi
    000011a7: 	callq	_ZdlPvm@PLT # Offset: 4519
.Ltmp4485:
    000011ac: 	leaq	DATAat0x334e4(%rip), %rdx
    000011b3: 	movq	%r13, %rsi
    000011b6: 	movq	%rbp, %rdi
    000011b9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4537
    000011be: 	movq	%rbp, %r8
    000011c1: 	leaq	_Z9logic_or3ItEbPKT_ib(%rip), %rcx
    000011c8: 	xorl	%edx, %edx
    000011ca: 	movq	%r12, %rdi
    000011cd: 	movl	$0x1f40, %esi
    000011d2: 	callq	_Z23testOneFunction_logicalItPFbPKtibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4562
    000011d7: 	movq	0xd0(%rsp), %rdi
    000011df: 	cmpq	%rbx, %rdi
    000011e2: 	je	.Ltmp4486 # Offset: 4578
    000011e4: 	movq	0xe0(%rsp), %rax
    000011ec: 	leaq	0x1(%rax), %rsi
    000011f0: 	callq	_ZdlPvm@PLT # Offset: 4592
.Ltmp4486:
    000011f5: 	movq	0x30(%rsp), %r15
    000011fa: 	movq	0x38(%rsp), %r14
    000011ff: 	movq	%rbx, 0xd0(%rsp)
    00001207: 	movq	%r15, %rax
    0000120a: 	addq	%r14, %rax
    0000120d: 	je	.Ltmp4487 # Offset: 4621
    0000120f: 	testq	%r15, %r15
    00001212: 	je	.Ltmp4488 # Offset: 4626
.Ltmp4487:
    00001218: 	movq	%r14, 0x28(%rsp)
    0000121d: 	cmpq	$0xf, %r14
    00001221: 	ja	.Ltmp4489 # Offset: 4641
    00001227: 	cmpq	$0x1, %r14
    0000122b: 	jne	.Ltmp4490 # Offset: 4651
    00001231: 	movzbl	(%r15), %eax
    00001235: 	movb	%al, 0xe0(%rsp)
    0000123c: 	movq	%rbx, %rax
.Ltmp4553:
    0000123f: 	movq	%r14, 0xd8(%rsp)
    00001247: 	movb	$0x0, (%rax,%r14)
    0000124c: 	movabsq	$0x3fffffffffffffff, %rax
    00001256: 	subq	0xd8(%rsp), %rax
    0000125e: 	cmpq	$0x14, %rax
    00001262: 	jbe	.Ltmp4491 # Offset: 4706
    00001268: 	movl	$0x15, %edx
    0000126d: 	leaq	DATAat0x334fa(%rip), %rsi
    00001274: 	movq	%rbp, %rdi
    00001277: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4727
    0000127c: 	movq	%rbp, %r8
    0000127f: 	leaq	_Z9logic_or4ItEbPKT_ib(%rip), %rcx
    00001286: 	xorl	%edx, %edx
    00001288: 	movq	%r12, %rdi
    0000128b: 	movl	$0x1f40, %esi
    00001290: 	callq	_Z23testOneFunction_logicalItPFbPKtibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4752
    00001295: 	movq	0xd0(%rsp), %rdi
    0000129d: 	cmpq	%rbx, %rdi
    000012a0: 	je	.Ltmp4492 # Offset: 4768
    000012a2: 	movq	0xe0(%rsp), %rax
    000012aa: 	leaq	0x1(%rax), %rsi
    000012ae: 	callq	_ZdlPvm@PLT # Offset: 4782
.Ltmp4492:
    000012b3: 	movq	0x30(%rsp), %r15
    000012b8: 	movq	0x38(%rsp), %r14
    000012bd: 	movq	%rbx, 0xd0(%rsp)
    000012c5: 	movq	%r15, %rax
    000012c8: 	addq	%r14, %rax
    000012cb: 	je	.Ltmp4493 # Offset: 4811
    000012cd: 	testq	%r15, %r15
    000012d0: 	je	.Ltmp4494 # Offset: 4816
.Ltmp4493:
    000012d6: 	movq	%r14, 0x28(%rsp)
    000012db: 	cmpq	$0xf, %r14
    000012df: 	ja	.Ltmp4495 # Offset: 4831
    000012e5: 	cmpq	$0x1, %r14
    000012e9: 	jne	.Ltmp4496 # Offset: 4841
    000012ef: 	movzbl	(%r15), %eax
    000012f3: 	movb	%al, 0xe0(%rsp)
    000012fa: 	movq	%rbx, %rax
.Ltmp4561:
    000012fd: 	movq	%r14, 0xd8(%rsp)
    00001305: 	movb	$0x0, (%rax,%r14)
    0000130a: 	movabsq	$0x3fffffffffffffff, %rax
    00001314: 	subq	0xd8(%rsp), %rax
    0000131c: 	cmpq	$0x14, %rax
    00001320: 	jbe	.Ltmp4497 # Offset: 4896
    00001326: 	movl	$0x15, %edx
    0000132b: 	leaq	DATAat0x33510(%rip), %rsi
    00001332: 	movq	%rbp, %rdi
    00001335: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4917
    0000133a: 	movq	%rbp, %r8
    0000133d: 	leaq	_Z9logic_or5ItEbPKT_ib(%rip), %rcx
    00001344: 	xorl	%edx, %edx
    00001346: 	movq	%r12, %rdi
    00001349: 	movl	$0x1f40, %esi
    0000134e: 	callq	_Z23testOneFunction_logicalItPFbPKtibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4942
    00001353: 	movq	0xd0(%rsp), %rdi
    0000135b: 	cmpq	%rbx, %rdi
    0000135e: 	je	.Ltmp4498 # Offset: 4958
    00001360: 	movq	0xe0(%rsp), %rax
    00001368: 	leaq	0x1(%rax), %rsi
    0000136c: 	callq	_ZdlPvm@PLT # Offset: 4972
.Ltmp4498:
    00001371: 	movq	0x30(%rsp), %r15
    00001376: 	movq	0x38(%rsp), %r14
    0000137b: 	movq	%rbx, 0xd0(%rsp)
    00001383: 	movq	%r15, %rax
    00001386: 	addq	%r14, %rax
    00001389: 	je	.Ltmp4499 # Offset: 5001
    0000138b: 	testq	%r15, %r15
    0000138e: 	je	.Ltmp4500 # Offset: 5006
.Ltmp4499:
    00001394: 	movq	%r14, 0x28(%rsp)
    00001399: 	cmpq	$0xf, %r14
    0000139d: 	ja	.Ltmp4501 # Offset: 5021
    000013a3: 	cmpq	$0x1, %r14
    000013a7: 	jne	.Ltmp4502 # Offset: 5031
    000013ad: 	movzbl	(%r15), %eax
    000013b1: 	movb	%al, 0xe0(%rsp)
    000013b8: 	movq	%rbx, %rax
.Ltmp4559:
    000013bb: 	movq	%r14, 0xd8(%rsp)
    000013c3: 	movb	$0x0, (%rax,%r14)
    000013c8: 	movabsq	$0x3fffffffffffffff, %rax
    000013d2: 	subq	0xd8(%rsp), %rax
    000013da: 	cmpq	$0x14, %rax
    000013de: 	jbe	.Ltmp4503 # Offset: 5086
    000013e4: 	movl	$0x15, %edx
    000013e9: 	leaq	DATAat0x33526(%rip), %rsi
    000013f0: 	movq	%rbp, %rdi
    000013f3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5107
    000013f8: 	movq	%rbp, %r8
    000013fb: 	leaq	_Z9logic_or6ItEbPKT_ib(%rip), %rcx
    00001402: 	xorl	%edx, %edx
    00001404: 	movq	%r12, %rdi
    00001407: 	movl	$0x1f40, %esi
    0000140c: 	callq	_Z23testOneFunction_logicalItPFbPKtibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5132
    00001411: 	movq	0xd0(%rsp), %rdi
    00001419: 	cmpq	%rbx, %rdi
    0000141c: 	je	.Ltmp4504 # Offset: 5148
    0000141e: 	movq	0xe0(%rsp), %rax
    00001426: 	leaq	0x1(%rax), %rsi
    0000142a: 	callq	_ZdlPvm@PLT # Offset: 5162
.Ltmp4504:
    0000142f: 	leaq	DATAat0x3353c(%rip), %rdx
    00001436: 	movq	%r13, %rsi
    00001439: 	movq	%rbp, %rdi
    0000143c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5180
    00001441: 	movq	%rbp, %r8
    00001444: 	leaq	_Z9logic_or7ItEbPKT_ib(%rip), %rcx
    0000144b: 	xorl	%edx, %edx
    0000144d: 	movq	%r12, %rdi
    00001450: 	movl	$0x1f40, %esi
    00001455: 	callq	_Z23testOneFunction_logicalItPFbPKtibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5205
    0000145a: 	movq	0xd0(%rsp), %rdi
    00001462: 	cmpq	%rbx, %rdi
    00001465: 	je	.Ltmp4505 # Offset: 5221
    00001467: 	movq	0xe0(%rsp), %rax
    0000146f: 	leaq	0x1(%rax), %rsi
    00001473: 	callq	_ZdlPvm@PLT # Offset: 5235
.Ltmp4505:
    00001478: 	movq	0x30(%rsp), %r14
    0000147d: 	movq	0x38(%rsp), %r13
    00001482: 	movq	%rbx, 0xd0(%rsp)
    0000148a: 	movq	%r14, %rax
    0000148d: 	addq	%r13, %rax
    00001490: 	je	.Ltmp4506 # Offset: 5264
    00001492: 	testq	%r14, %r14
    00001495: 	je	.Ltmp4507 # Offset: 5269
.Ltmp4506:
    0000149b: 	movq	%r13, 0x28(%rsp)
    000014a0: 	cmpq	$0xf, %r13
    000014a4: 	ja	.Ltmp4508 # Offset: 5284
    000014aa: 	cmpq	$0x1, %r13
    000014ae: 	jne	.Ltmp4509 # Offset: 5294
    000014b4: 	movzbl	(%r14), %eax
    000014b8: 	movb	%al, 0xe0(%rsp)
    000014bf: 	movq	%rbx, %rax
.Ltmp4557:
    000014c2: 	movq	%r13, 0xd8(%rsp)
    000014ca: 	movb	$0x0, (%rax,%r13)
    000014cf: 	movabsq	$0x3fffffffffffffff, %rax
    000014d9: 	subq	0xd8(%rsp), %rax
    000014e1: 	cmpq	$0x14, %rax
    000014e5: 	jbe	.Ltmp4510 # Offset: 5349
    000014eb: 	movl	$0x15, %edx
    000014f0: 	leaq	DATAat0x33552(%rip), %rsi
    000014f7: 	movq	%rbp, %rdi
    000014fa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5370
    000014ff: 	movq	%rbp, %r8
    00001502: 	leaq	_Z9logic_or8ItEbPKT_ib(%rip), %rcx
    00001509: 	xorl	%edx, %edx
    0000150b: 	movq	%r12, %rdi
    0000150e: 	movl	$0x1f40, %esi
    00001513: 	callq	_Z23testOneFunction_logicalItPFbPKtibEEvPKT_ibT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5395
    00001518: 	movq	0xd0(%rsp), %rdi
    00001520: 	cmpq	%rbx, %rdi
    00001523: 	je	.Ltmp4511 # Offset: 5411
    00001525: 	movq	0xe0(%rsp), %rax
    0000152d: 	leaq	0x1(%rax), %rsi
    00001531: 	callq	_ZdlPvm@PLT # Offset: 5425
.Ltmp4511:
    00001536: 	movq	0x30(%rsp), %r14
    0000153b: 	movq	0x38(%rsp), %r13
    00001540: 	movq	%rbx, 0xd0(%rsp)
    00001548: 	movq	%r14, %rax
    0000154b: 	addq	%r13, %rax
    0000154e: 	je	.Ltmp4512 # Offset: 5454
    00001550: 	testq	%r14, %r14
    00001553: 	je	.Ltmp4513 # Offset: 5459
.Ltmp4512:
    00001559: 	movq	%r13, 0x28(%rsp)
    0000155e: 	cmpq	$0xf, %r13
    00001562: 	ja	.Ltmp4514 # Offset: 5474
    00001568: 	cmpq	$0x1, %r13
    0000156c: 	jne	.Ltmp4515 # Offset: 5484
    00001572: 	movzbl	(%r14), %eax
    00001576: 	movb	%al, 0xe0(%rsp)
    0000157d: 	movq	%rbx, %rax
.Ltmp4555:
    00001580: 	movq	%r13, 0xd8(%rsp)
    00001588: 	movb	$0x0, (%rax,%r13)
    0000158d: 	movabsq	$0x3fffffffffffffff, %rax
    00001597: 	subq	0xd8(%rsp), %rax
    0000159f: 	cmpq	$0x13, %rax
    000015a3: 	jbe	.Ltmp4516 # Offset: 5539
    000015a9: 	movl	$0x14, %edx
    000015ae: 	leaq	DATAat0x33568(%rip), %rsi
    000015b5: 	movq	%rbp, %rdi
    000015b8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5560
    000015bd: 	movl	iterations(%rip), %esi
    000015c3: 	movq	0xd0(%rsp), %rdi
    000015cb: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 5579
    000015d0: 	movq	0xd0(%rsp), %rdi
    000015d8: 	cmpq	%rbx, %rdi
    000015db: 	je	.Ltmp4517 # Offset: 5595
    000015dd: 	movq	0xe0(%rsp), %rax
    000015e5: 	leaq	0x1(%rax), %rsi
    000015e9: 	callq	_ZdlPvm@PLT # Offset: 5609
.Ltmp4517:
    000015ee: 	movq	0xb0(%rsp), %rdi
    000015f6: 	cmpq	0x10(%rsp), %rdi
    000015fb: 	je	.Ltmp4518 # Offset: 5627
    000015fd: 	movq	0xc0(%rsp), %rax
    00001605: 	leaq	0x1(%rax), %rsi
    00001609: 	callq	_ZdlPvm@PLT # Offset: 5641
.Ltmp4518:
    0000160e: 	movq	0x90(%rsp), %rdi
    00001616: 	cmpq	0x8(%rsp), %rdi
    0000161b: 	je	.Ltmp4519 # Offset: 5659
    0000161d: 	movq	0xa0(%rsp), %rax
    00001625: 	leaq	0x1(%rax), %rsi
    00001629: 	callq	_ZdlPvm@PLT # Offset: 5673
.Ltmp4519:
    0000162e: 	movq	0x70(%rsp), %rdi
    00001633: 	leaq	0x80(%rsp), %rax
    0000163b: 	cmpq	%rax, %rdi
    0000163e: 	je	.Ltmp4520 # Offset: 5694
    00001640: 	movq	0x80(%rsp), %rax
    00001648: 	leaq	0x1(%rax), %rsi
    0000164c: 	callq	_ZdlPvm@PLT # Offset: 5708
.Ltmp4520:
    00001651: 	movq	0x50(%rsp), %rdi
    00001656: 	leaq	0x60(%rsp), %rax
    0000165b: 	cmpq	%rax, %rdi
    0000165e: 	je	.Ltmp4521 # Offset: 5726
    00001660: 	movq	0x60(%rsp), %rax
    00001665: 	leaq	0x1(%rax), %rsi
    00001669: 	callq	_ZdlPvm@PLT # Offset: 5737
.Ltmp4521:
    0000166e: 	movq	%r12, %rdi
    00001671: 	movl	$0x2, %esi
    00001676: 	callq	_ZdlPvm@PLT # Offset: 5750
    0000167b: 	movq	0x30(%rsp), %rdi
    00001680: 	cmpq	0x18(%rsp), %rdi
    00001685: 	je	.Ltmp4522 # Offset: 5765
    00001687: 	movq	0x40(%rsp), %rax
    0000168c: 	leaq	0x1(%rax), %rsi
    00001690: 	callq	_ZdlPvm@PLT # Offset: 5776
.Ltmp4522:
    00001695: 	movq	0xf8(%rsp), %rax
    0000169d: 	subq	%fs:0x28, %rax
    000016a6: 	jne	.Ltmp4523 # Offset: 5798
    000016ac: 	addq	$0x108, %rsp
    000016b3: 	popq	%rbx
    000016b4: 	popq	%rbp
    000016b5: 	popq	%r12
    000016b7: 	popq	%r13
    000016b9: 	popq	%r14
    000016bb: 	popq	%r15
    000016bd: 	retq # Offset: 5821
    000016be: 	nop # Size: 2
.Ltmp4384:
    000016c0: 	testq	%r13, %r13
    000016c3: 	jne	.Ltmp4524 # Offset: 5827
    000016c9: 	movq	%rbx, %rax
    000016cc: 	jmp	.Ltmp4525 # Offset: 5836
    000016d1: 	nopl	(%rax) # Size: 7
.Ltmp4397:
    000016d8: 	testq	%r14, %r14
    000016db: 	jne	.Ltmp4526 # Offset: 5851
    000016e1: 	movq	%rbx, %rax
    000016e4: 	jmp	.Ltmp4527 # Offset: 5860
    000016e9: 	nopl	(%rax) # Size: 7
.Ltmp4390:
    000016f0: 	testq	%r13, %r13
    000016f3: 	jne	.Ltmp4528 # Offset: 5875
    000016f9: 	movq	%rbx, %rax
    000016fc: 	jmp	.Ltmp4529 # Offset: 5884
    00001701: 	nopl	(%rax) # Size: 7
.Ltmp4405:
    00001708: 	testq	%r14, %r14
    0000170b: 	jne	.Ltmp4530 # Offset: 5899
    00001711: 	movq	%rbx, %rax
    00001714: 	jmp	.Ltmp4531 # Offset: 5908
    00001719: 	nopl	(%rax) # Size: 7
.Ltmp4413:
    00001720: 	testq	%r14, %r14
    00001723: 	jne	.Ltmp4532 # Offset: 5923
    00001729: 	movq	%rbx, %rax
    0000172c: 	jmp	.Ltmp4533 # Offset: 5932
    00001731: 	nopl	(%rax) # Size: 7
.Ltmp4427:
    00001738: 	testq	%r14, %r14
    0000173b: 	jne	.Ltmp4534 # Offset: 5947
    00001741: 	movq	%rbx, %rax
    00001744: 	jmp	.Ltmp4535 # Offset: 5956
    00001749: 	nopl	(%rax) # Size: 7
.Ltmp4419:
    00001750: 	testq	%r14, %r14
    00001753: 	jne	.Ltmp4536 # Offset: 5971
    00001759: 	movq	%rbx, %rax
    0000175c: 	jmp	.Ltmp4537 # Offset: 5980
    00001761: 	nopl	(%rax) # Size: 7
.Ltmp4441:
    00001768: 	testq	%r14, %r14
    0000176b: 	jne	.Ltmp4538 # Offset: 5995
    00001771: 	movq	%rbx, %rax
    00001774: 	jmp	.Ltmp4539 # Offset: 6004
    00001779: 	nopl	(%rax) # Size: 7
.Ltmp4433:
    00001780: 	testq	%r14, %r14
    00001783: 	jne	.Ltmp4540 # Offset: 6019
    00001789: 	movq	%rbx, %rax
    0000178c: 	jmp	.Ltmp4541 # Offset: 6028
    00001791: 	nopl	(%rax) # Size: 7
.Ltmp4458:
    00001798: 	testq	%r14, %r14
    0000179b: 	jne	.Ltmp4542 # Offset: 6043
    000017a1: 	movq	0x8(%rsp), %rax
    000017a6: 	jmp	.Ltmp4543 # Offset: 6054
    000017ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4449:
    000017b0: 	testq	%r14, %r14
    000017b3: 	jne	.Ltmp4544 # Offset: 6067
    000017b9: 	movq	%rbx, %rax
    000017bc: 	jmp	.Ltmp4545 # Offset: 6076
    000017c1: 	nopl	(%rax) # Size: 7
.Ltmp4481:
    000017c8: 	testq	%r14, %r14
    000017cb: 	jne	.Ltmp4546 # Offset: 6091
    000017d1: 	movq	0x10(%rsp), %rax
    000017d6: 	jmp	.Ltmp4547 # Offset: 6102
    000017db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4472:
    000017e0: 	testq	%r14, %r14
    000017e3: 	jne	.Ltmp4548 # Offset: 6115
    000017e9: 	movq	%rbx, %rax
    000017ec: 	jmp	.Ltmp4549 # Offset: 6124
    000017f1: 	nopl	(%rax) # Size: 7
.Ltmp4463:
    000017f8: 	testq	%r14, %r14
    000017fb: 	jne	.Ltmp4550 # Offset: 6139
    00001801: 	movq	%rbx, %rax
    00001804: 	jmp	.Ltmp4551 # Offset: 6148
    00001809: 	nopl	(%rax) # Size: 7
.Ltmp4490:
    00001810: 	testq	%r14, %r14
    00001813: 	jne	.Ltmp4552 # Offset: 6163
    00001819: 	movq	%rbx, %rax
    0000181c: 	jmp	.Ltmp4553 # Offset: 6172
    00001821: 	nopl	(%rax) # Size: 7
.Ltmp4515:
    00001828: 	testq	%r13, %r13
    0000182b: 	jne	.Ltmp4554 # Offset: 6187
    00001831: 	movq	%rbx, %rax
    00001834: 	jmp	.Ltmp4555 # Offset: 6196
    00001839: 	nopl	(%rax) # Size: 7
.Ltmp4509:
    00001840: 	testq	%r13, %r13
    00001843: 	jne	.Ltmp4556 # Offset: 6211
    00001849: 	movq	%rbx, %rax
    0000184c: 	jmp	.Ltmp4557 # Offset: 6220
    00001851: 	nopl	(%rax) # Size: 7
.Ltmp4502:
    00001858: 	testq	%r14, %r14
    0000185b: 	jne	.Ltmp4558 # Offset: 6235
    00001861: 	movq	%rbx, %rax
    00001864: 	jmp	.Ltmp4559 # Offset: 6244
    00001869: 	nopl	(%rax) # Size: 7
.Ltmp4496:
    00001870: 	testq	%r14, %r14
    00001873: 	jne	.Ltmp4560 # Offset: 6259
    00001879: 	movq	%rbx, %rax
    0000187c: 	jmp	.Ltmp4561 # Offset: 6268
    00001881: 	nopl	(%rax) # Size: 7
.Ltmp4389:
    00001888: 	leaq	0x28(%rsp), %rsi
    0000188d: 	xorl	%edx, %edx
    0000188f: 	movq	%rbp, %rdi
    00001892: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6290
    00001897: 	movq	%rax, 0xd0(%rsp)
    0000189f: 	movq	%rax, %rdi
    000018a2: 	movq	0x28(%rsp), %rax
    000018a7: 	movq	%rax, 0xe0(%rsp)
.Ltmp4564:
    000018af: 	movq	%r13, %rdx
    000018b2: 	movq	%r14, %rsi
    000018b5: 	callq	memcpy@PLT # Offset: 6325
    000018ba: 	movq	0x28(%rsp), %r13
    000018bf: 	movq	0xd0(%rsp), %rax
    000018c7: 	jmp	.Ltmp4529 # Offset: 6343
    000018cc: 	nopl	(%rax) # Size: 4
.Ltmp4383:
    000018d0: 	leaq	0x28(%rsp), %rsi
    000018d5: 	leaq	0xd0(%rsp), %rdi
    000018dd: 	xorl	%edx, %edx
    000018df: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6367
    000018e4: 	movq	%rax, 0xd0(%rsp)
    000018ec: 	movq	%rax, %rdi
    000018ef: 	movq	0x28(%rsp), %rax
    000018f4: 	movq	%rax, 0xe0(%rsp)
.Ltmp4562:
    000018fc: 	movq	%r13, %rdx
    000018ff: 	movq	%rbp, %rsi
    00001902: 	callq	memcpy@PLT # Offset: 6402
    00001907: 	movq	0x28(%rsp), %r13
    0000190c: 	movq	0xd0(%rsp), %rax
    00001914: 	jmp	.Ltmp4525 # Offset: 6420
    00001919: 	nopl	(%rax) # Size: 7
.Ltmp4396:
    00001920: 	leaq	0x28(%rsp), %rsi
    00001925: 	xorl	%edx, %edx
    00001927: 	movq	%rbp, %rdi
    0000192a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6442
    0000192f: 	movq	%rax, 0xd0(%rsp)
    00001937: 	movq	%rax, %rdi
    0000193a: 	movq	0x28(%rsp), %rax
    0000193f: 	movq	%rax, 0xe0(%rsp)
.Ltmp4563:
    00001947: 	movq	%r14, %rdx
    0000194a: 	movq	%r15, %rsi
    0000194d: 	callq	memcpy@PLT # Offset: 6477
    00001952: 	movq	0x28(%rsp), %r14
    00001957: 	movq	0xd0(%rsp), %rax
    0000195f: 	jmp	.Ltmp4527 # Offset: 6495
    00001964: 	nopl	(%rax) # Size: 4
.Ltmp4404:
    00001968: 	leaq	0x28(%rsp), %rsi
    0000196d: 	xorl	%edx, %edx
    0000196f: 	movq	%rbp, %rdi
    00001972: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6514
    00001977: 	movq	%rax, 0xd0(%rsp)
    0000197f: 	movq	%rax, %rdi
    00001982: 	movq	0x28(%rsp), %rax
    00001987: 	movq	%rax, 0xe0(%rsp)
.Ltmp4565:
    0000198f: 	movq	%r14, %rdx
    00001992: 	movq	%r15, %rsi
    00001995: 	callq	memcpy@PLT # Offset: 6549
    0000199a: 	movq	0x28(%rsp), %r14
    0000199f: 	movq	0xd0(%rsp), %rax
    000019a7: 	jmp	.Ltmp4531 # Offset: 6567
    000019ac: 	nopl	(%rax) # Size: 4
.Ltmp4412:
    000019b0: 	leaq	0x28(%rsp), %rsi
    000019b5: 	xorl	%edx, %edx
    000019b7: 	movq	%rbp, %rdi
    000019ba: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6586
    000019bf: 	movq	%rax, 0xd0(%rsp)
    000019c7: 	movq	%rax, %rdi
    000019ca: 	movq	0x28(%rsp), %rax
    000019cf: 	movq	%rax, 0xe0(%rsp)
.Ltmp4566:
    000019d7: 	movq	%r14, %rdx
    000019da: 	movq	%r15, %rsi
    000019dd: 	callq	memcpy@PLT # Offset: 6621
    000019e2: 	movq	0x28(%rsp), %r14
    000019e7: 	movq	0xd0(%rsp), %rax
    000019ef: 	jmp	.Ltmp4533 # Offset: 6639
    000019f4: 	nopl	(%rax) # Size: 4
.Ltmp4426:
    000019f8: 	leaq	0x28(%rsp), %rsi
    000019fd: 	xorl	%edx, %edx
    000019ff: 	movq	%rbp, %rdi
    00001a02: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6658
    00001a07: 	movq	%rax, 0xd0(%rsp)
    00001a0f: 	movq	%rax, %rdi
    00001a12: 	movq	0x28(%rsp), %rax
    00001a17: 	movq	%rax, 0xe0(%rsp)
.Ltmp4567:
    00001a1f: 	movq	%r14, %rdx
    00001a22: 	movq	%r15, %rsi
    00001a25: 	callq	memcpy@PLT # Offset: 6693
    00001a2a: 	movq	0x28(%rsp), %r14
    00001a2f: 	movq	0xd0(%rsp), %rax
    00001a37: 	jmp	.Ltmp4535 # Offset: 6711
    00001a3c: 	nopl	(%rax) # Size: 4
.Ltmp4418:
    00001a40: 	leaq	0x28(%rsp), %rsi
    00001a45: 	xorl	%edx, %edx
    00001a47: 	movq	%rbp, %rdi
    00001a4a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6730
    00001a4f: 	movq	%rax, 0xd0(%rsp)
    00001a57: 	movq	%rax, %rdi
    00001a5a: 	movq	0x28(%rsp), %rax
    00001a5f: 	movq	%rax, 0xe0(%rsp)
.Ltmp4568:
    00001a67: 	movq	%r14, %rdx
    00001a6a: 	movq	%r15, %rsi
    00001a6d: 	callq	memcpy@PLT # Offset: 6765
    00001a72: 	movq	0x28(%rsp), %r14
    00001a77: 	movq	0xd0(%rsp), %rax
    00001a7f: 	jmp	.Ltmp4537 # Offset: 6783
    00001a84: 	nopl	(%rax) # Size: 4
.Ltmp4432:
    00001a88: 	leaq	0x28(%rsp), %rsi
    00001a8d: 	xorl	%edx, %edx
    00001a8f: 	movq	%rbp, %rdi
    00001a92: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6802
    00001a97: 	movq	%rax, 0xd0(%rsp)
    00001a9f: 	movq	%rax, %rdi
    00001aa2: 	movq	0x28(%rsp), %rax
    00001aa7: 	movq	%rax, 0xe0(%rsp)
.Ltmp4570:
    00001aaf: 	movq	%r14, %rdx
    00001ab2: 	movq	%r15, %rsi
    00001ab5: 	callq	memcpy@PLT # Offset: 6837
    00001aba: 	movq	0x28(%rsp), %r14
    00001abf: 	movq	0xd0(%rsp), %rax
    00001ac7: 	jmp	.Ltmp4541 # Offset: 6855
    00001acc: 	nopl	(%rax) # Size: 4
.Ltmp4457:
    00001ad0: 	leaq	0x28(%rsp), %rsi
    00001ad5: 	leaq	0x90(%rsp), %rdi
    00001add: 	xorl	%edx, %edx
    00001adf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6879
    00001ae4: 	movq	%rax, 0x90(%rsp)
    00001aec: 	movq	%rax, %rdi
    00001aef: 	movq	0x28(%rsp), %rax
    00001af4: 	movq	%rax, 0xa0(%rsp)
.Ltmp4571:
    00001afc: 	movq	%r14, %rdx
    00001aff: 	movq	%r15, %rsi
    00001b02: 	callq	memcpy@PLT # Offset: 6914
    00001b07: 	movq	0x28(%rsp), %r14
    00001b0c: 	movq	0x90(%rsp), %rax
    00001b14: 	jmp	.Ltmp4543 # Offset: 6932
    00001b19: 	nopl	(%rax) # Size: 7
.Ltmp4440:
    00001b20: 	leaq	0x28(%rsp), %rsi
    00001b25: 	xorl	%edx, %edx
    00001b27: 	movq	%rbp, %rdi
    00001b2a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6954
    00001b2f: 	movq	%rax, 0xd0(%rsp)
    00001b37: 	movq	%rax, %rdi
    00001b3a: 	movq	0x28(%rsp), %rax
    00001b3f: 	movq	%rax, 0xe0(%rsp)
.Ltmp4569:
    00001b47: 	movq	%r14, %rdx
    00001b4a: 	movq	%r15, %rsi
    00001b4d: 	callq	memcpy@PLT # Offset: 6989
    00001b52: 	movq	0x28(%rsp), %r14
    00001b57: 	movq	0xd0(%rsp), %rax
    00001b5f: 	jmp	.Ltmp4539 # Offset: 7007
    00001b64: 	nopl	(%rax) # Size: 4
.Ltmp4471:
    00001b68: 	leaq	0x28(%rsp), %rsi
    00001b6d: 	xorl	%edx, %edx
    00001b6f: 	movq	%rbp, %rdi
    00001b72: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7026
    00001b77: 	movq	%rax, 0xd0(%rsp)
    00001b7f: 	movq	%rax, %rdi
    00001b82: 	movq	0x28(%rsp), %rax
    00001b87: 	movq	%rax, 0xe0(%rsp)
.Ltmp4574:
    00001b8f: 	movq	%r14, %rdx
    00001b92: 	movq	%r15, %rsi
    00001b95: 	callq	memcpy@PLT # Offset: 7061
    00001b9a: 	movq	0x28(%rsp), %r14
    00001b9f: 	movq	0xd0(%rsp), %rax
    00001ba7: 	jmp	.Ltmp4549 # Offset: 7079
    00001bac: 	nopl	(%rax) # Size: 4
.Ltmp4462:
    00001bb0: 	leaq	0x28(%rsp), %rsi
    00001bb5: 	xorl	%edx, %edx
    00001bb7: 	movq	%rbp, %rdi
    00001bba: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7098
    00001bbf: 	movq	%rax, 0xd0(%rsp)
    00001bc7: 	movq	%rax, %rdi
    00001bca: 	movq	0x28(%rsp), %rax
    00001bcf: 	movq	%rax, 0xe0(%rsp)
.Ltmp4575:
    00001bd7: 	movq	%r14, %rdx
    00001bda: 	movq	%r15, %rsi
    00001bdd: 	callq	memcpy@PLT # Offset: 7133
    00001be2: 	movq	0x28(%rsp), %r14
    00001be7: 	movq	0xd0(%rsp), %rax
    00001bef: 	jmp	.Ltmp4551 # Offset: 7151
    00001bf4: 	nopl	(%rax) # Size: 4
.Ltmp4448:
    00001bf8: 	leaq	0x28(%rsp), %rsi
    00001bfd: 	xorl	%edx, %edx
    00001bff: 	movq	%rbp, %rdi
    00001c02: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7170
    00001c07: 	movq	%rax, 0xd0(%rsp)
    00001c0f: 	movq	%rax, %rdi
    00001c12: 	movq	0x28(%rsp), %rax
    00001c17: 	movq	%rax, 0xe0(%rsp)
.Ltmp4572:
    00001c1f: 	movq	%r14, %rdx
    00001c22: 	movq	%r15, %rsi
    00001c25: 	callq	memcpy@PLT # Offset: 7205
    00001c2a: 	movq	0x28(%rsp), %r14
    00001c2f: 	movq	0xd0(%rsp), %rax
    00001c37: 	jmp	.Ltmp4545 # Offset: 7223
    00001c3c: 	nopl	(%rax) # Size: 4
.Ltmp4480:
    00001c40: 	leaq	0x28(%rsp), %rsi
    00001c45: 	leaq	0xb0(%rsp), %rdi
    00001c4d: 	xorl	%edx, %edx
    00001c4f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7247
    00001c54: 	movq	%rax, 0xb0(%rsp)
    00001c5c: 	movq	%rax, %rdi
    00001c5f: 	movq	0x28(%rsp), %rax
    00001c64: 	movq	%rax, 0xc0(%rsp)
.Ltmp4573:
    00001c6c: 	movq	%r14, %rdx
    00001c6f: 	movq	%r15, %rsi
    00001c72: 	callq	memcpy@PLT # Offset: 7282
    00001c77: 	movq	0x28(%rsp), %r14
    00001c7c: 	movq	0xb0(%rsp), %rax
    00001c84: 	jmp	.Ltmp4547 # Offset: 7300
    00001c89: 	nopl	(%rax) # Size: 7
.Ltmp4495:
    00001c90: 	leaq	0x28(%rsp), %rsi
    00001c95: 	xorl	%edx, %edx
    00001c97: 	movq	%rbp, %rdi
    00001c9a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7322
    00001c9f: 	movq	%rax, 0xd0(%rsp)
    00001ca7: 	movq	%rax, %rdi
    00001caa: 	movq	0x28(%rsp), %rax
    00001caf: 	movq	%rax, 0xe0(%rsp)
.Ltmp4580:
    00001cb7: 	movq	%r14, %rdx
    00001cba: 	movq	%r15, %rsi
    00001cbd: 	callq	memcpy@PLT # Offset: 7357
    00001cc2: 	movq	0x28(%rsp), %r14
    00001cc7: 	movq	0xd0(%rsp), %rax
    00001ccf: 	jmp	.Ltmp4561 # Offset: 7375
    00001cd4: 	nopl	(%rax) # Size: 4
.Ltmp4489:
    00001cd8: 	leaq	0x28(%rsp), %rsi
    00001cdd: 	xorl	%edx, %edx
    00001cdf: 	movq	%rbp, %rdi
    00001ce2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7394
    00001ce7: 	movq	%rax, 0xd0(%rsp)
    00001cef: 	movq	%rax, %rdi
    00001cf2: 	movq	0x28(%rsp), %rax
    00001cf7: 	movq	%rax, 0xe0(%rsp)
.Ltmp4576:
    00001cff: 	movq	%r14, %rdx
    00001d02: 	movq	%r15, %rsi
    00001d05: 	callq	memcpy@PLT # Offset: 7429
    00001d0a: 	movq	0x28(%rsp), %r14
    00001d0f: 	movq	0xd0(%rsp), %rax
    00001d17: 	jmp	.Ltmp4553 # Offset: 7447
    00001d1c: 	nopl	(%rax) # Size: 4
.Ltmp4514:
    00001d20: 	leaq	0x28(%rsp), %rsi
    00001d25: 	xorl	%edx, %edx
    00001d27: 	movq	%rbp, %rdi
    00001d2a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7466
    00001d2f: 	movq	%rax, 0xd0(%rsp)
    00001d37: 	movq	%rax, %rdi
    00001d3a: 	movq	0x28(%rsp), %rax
    00001d3f: 	movq	%rax, 0xe0(%rsp)
.Ltmp4577:
    00001d47: 	movq	%r13, %rdx
    00001d4a: 	movq	%r14, %rsi
    00001d4d: 	callq	memcpy@PLT # Offset: 7501
    00001d52: 	movq	0x28(%rsp), %r13
    00001d57: 	movq	0xd0(%rsp), %rax
    00001d5f: 	jmp	.Ltmp4555 # Offset: 7519
    00001d64: 	nopl	(%rax) # Size: 4
.Ltmp4508:
    00001d68: 	leaq	0x28(%rsp), %rsi
    00001d6d: 	xorl	%edx, %edx
    00001d6f: 	movq	%rbp, %rdi
    00001d72: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7538
    00001d77: 	movq	%rax, 0xd0(%rsp)
    00001d7f: 	movq	%rax, %rdi
    00001d82: 	movq	0x28(%rsp), %rax
    00001d87: 	movq	%rax, 0xe0(%rsp)
.Ltmp4578:
    00001d8f: 	movq	%r13, %rdx
    00001d92: 	movq	%r14, %rsi
    00001d95: 	callq	memcpy@PLT # Offset: 7573
    00001d9a: 	movq	0x28(%rsp), %r13
    00001d9f: 	movq	0xd0(%rsp), %rax
    00001da7: 	jmp	.Ltmp4557 # Offset: 7591
    00001dac: 	nopl	(%rax) # Size: 4
.Ltmp4501:
    00001db0: 	leaq	0x28(%rsp), %rsi
    00001db5: 	xorl	%edx, %edx
    00001db7: 	movq	%rbp, %rdi
    00001dba: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7610
    00001dbf: 	movq	%rax, 0xd0(%rsp)
    00001dc7: 	movq	%rax, %rdi
    00001dca: 	movq	0x28(%rsp), %rax
    00001dcf: 	movq	%rax, 0xe0(%rsp)
.Ltmp4579:
    00001dd7: 	movq	%r14, %rdx
    00001dda: 	movq	%r15, %rsi
    00001ddd: 	callq	memcpy@PLT # Offset: 7645
    00001de2: 	movq	0x28(%rsp), %r14
    00001de7: 	movq	0xd0(%rsp), %rax
    00001def: 	jmp	.Ltmp4559 # Offset: 7663
.Ltmp4385:
    00001df4: 	leaq	DATAat0x33182(%rip), %rdi
    00001dfb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7675
.Ltmp4388:
    00001e00: 	leaq	DATAat0x33158(%rip), %rdi
    00001e07: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7687
.Ltmp4391:
    00001e0c: 	leaq	DATAat0x33182(%rip), %rdi
    00001e13: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7699
.Ltmp4395:
    00001e18: 	leaq	DATAat0x33158(%rip), %rdi
    00001e1f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7711
.Ltmp4398:
    00001e24: 	leaq	DATAat0x33182(%rip), %rdi
    00001e2b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7723
.Ltmp4403:
    00001e30: 	leaq	DATAat0x33158(%rip), %rdi
    00001e37: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7735
.Ltmp4406:
    00001e3c: 	leaq	DATAat0x33182(%rip), %rdi
    00001e43: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7747
.Ltmp4411:
    00001e48: 	leaq	DATAat0x33158(%rip), %rdi
    00001e4f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7759
.Ltmp4414:
    00001e54: 	leaq	DATAat0x33182(%rip), %rdi
    00001e5b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7771
.Ltmp4417:
    00001e60: 	leaq	DATAat0x33158(%rip), %rdi
    00001e67: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7783
.Ltmp4420:
    00001e6c: 	leaq	DATAat0x33182(%rip), %rdi
    00001e73: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7795
.Ltmp4425:
    00001e78: 	leaq	DATAat0x33158(%rip), %rdi
    00001e7f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7807
.Ltmp4428:
    00001e84: 	leaq	DATAat0x33182(%rip), %rdi
    00001e8b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7819
.Ltmp4431:
    00001e90: 	leaq	DATAat0x33158(%rip), %rdi
    00001e97: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7831
.Ltmp4434:
    00001e9c: 	leaq	DATAat0x33182(%rip), %rdi
    00001ea3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7843
.Ltmp4439:
    00001ea8: 	leaq	DATAat0x33158(%rip), %rdi
    00001eaf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7855
.Ltmp4442:
    00001eb4: 	leaq	DATAat0x33182(%rip), %rdi
    00001ebb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7867
.Ltmp4447:
    00001ec0: 	leaq	DATAat0x33158(%rip), %rdi
    00001ec7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7879
.Ltmp4450:
    00001ecc: 	leaq	DATAat0x33182(%rip), %rdi
    00001ed3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7891
.Ltmp4456:
    00001ed8: 	leaq	DATAat0x33158(%rip), %rdi
    00001edf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7903
.Ltmp4459:
    00001ee4: 	leaq	DATAat0x33182(%rip), %rdi
    00001eeb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7915
.Ltmp4461:
    00001ef0: 	leaq	DATAat0x33158(%rip), %rdi
    00001ef7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7927
.Ltmp4464:
    00001efc: 	leaq	DATAat0x33182(%rip), %rdi
    00001f03: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7939
.Ltmp4470:
    00001f08: 	leaq	DATAat0x33158(%rip), %rdi
    00001f0f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7951
.Ltmp4473:
    00001f14: 	leaq	DATAat0x33182(%rip), %rdi
    00001f1b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7963
.Ltmp4479:
    00001f20: 	leaq	DATAat0x33158(%rip), %rdi
    00001f27: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7975
.Ltmp4482:
    00001f2c: 	leaq	DATAat0x33182(%rip), %rdi
    00001f33: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7987
.Ltmp4488:
    00001f38: 	leaq	DATAat0x33158(%rip), %rdi
    00001f3f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7999
.Ltmp4491:
    00001f44: 	leaq	DATAat0x33182(%rip), %rdi
    00001f4b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8011
.Ltmp4494:
    00001f50: 	leaq	DATAat0x33158(%rip), %rdi
    00001f57: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8023
.Ltmp4497:
    00001f5c: 	leaq	DATAat0x33182(%rip), %rdi
    00001f63: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8035
.Ltmp4500:
    00001f68: 	leaq	DATAat0x33158(%rip), %rdi
    00001f6f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8047
.Ltmp4503:
    00001f74: 	leaq	DATAat0x33182(%rip), %rdi
    00001f7b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8059
.Ltmp4507:
    00001f80: 	leaq	DATAat0x33158(%rip), %rdi
    00001f87: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8071
.Ltmp4510:
    00001f8c: 	leaq	DATAat0x33182(%rip), %rdi
    00001f93: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8083
.Ltmp4513:
    00001f98: 	leaq	DATAat0x33158(%rip), %rdi
    00001f9f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8095
.Ltmp4516:
    00001fa4: 	leaq	DATAat0x33182(%rip), %rdi
    00001fab: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8107
.Ltmp4523:
    00001fb0: 	callq	__stack_chk_fail@PLT # Offset: 8112
.Ltmp4524:
    00001fb5: 	movq	%rbx, %rdi
    00001fb8: 	jmp	.Ltmp4562 # Offset: 8120
.Ltmp4526:
    00001fbd: 	movq	%rbx, %rdi
    00001fc0: 	jmp	.Ltmp4563 # Offset: 8128
.Ltmp4528:
    00001fc5: 	movq	%rbx, %rdi
    00001fc8: 	jmp	.Ltmp4564 # Offset: 8136
.Ltmp4530:
    00001fcd: 	movq	%rbx, %rdi
    00001fd0: 	jmp	.Ltmp4565 # Offset: 8144
.Ltmp4532:
    00001fd5: 	movq	%rbx, %rdi
    00001fd8: 	jmp	.Ltmp4566 # Offset: 8152
.Ltmp4534:
    00001fdd: 	movq	%rbx, %rdi
    00001fe0: 	jmp	.Ltmp4567 # Offset: 8160
.Ltmp4536:
    00001fe5: 	movq	%rbx, %rdi
    00001fe8: 	jmp	.Ltmp4568 # Offset: 8168
.Ltmp4538:
    00001fed: 	movq	%rbx, %rdi
    00001ff0: 	jmp	.Ltmp4569 # Offset: 8176
.Ltmp4540:
    00001ff5: 	movq	%rbx, %rdi
    00001ff8: 	jmp	.Ltmp4570 # Offset: 8184
.Ltmp4542:
    00001ffd: 	movq	0x8(%rsp), %rdi
    00002002: 	jmp	.Ltmp4571 # Offset: 8194
.Ltmp4544:
    00002007: 	movq	%rbx, %rdi
    0000200a: 	jmp	.Ltmp4572 # Offset: 8202
.Ltmp4546:
    0000200f: 	movq	0x10(%rsp), %rdi
    00002014: 	jmp	.Ltmp4573 # Offset: 8212
.Ltmp4548:
    00002019: 	movq	%rbx, %rdi
    0000201c: 	jmp	.Ltmp4574 # Offset: 8220
.Ltmp4550:
    00002021: 	movq	%rbx, %rdi
    00002024: 	jmp	.Ltmp4575 # Offset: 8228
.Ltmp4552:
    00002029: 	movq	%rbx, %rdi
    0000202c: 	jmp	.Ltmp4576 # Offset: 8236
.Ltmp4554:
    00002031: 	movq	%rbx, %rdi
    00002034: 	jmp	.Ltmp4577 # Offset: 8244
.Ltmp4556:
    00002039: 	movq	%rbx, %rdi
    0000203c: 	jmp	.Ltmp4578 # Offset: 8252
.Ltmp4558:
    00002041: 	movq	%rbx, %rdi
    00002044: 	jmp	.Ltmp4579 # Offset: 8260
.Ltmp4560:
    00002049: 	movq	%rbx, %rdi
    0000204c: 	jmp	.Ltmp4580 # Offset: 8268
.Ltmp4382:
    00002051: 	leaq	DATAat0x33158(%rip), %rdi
    00002058: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8280
    0000205d: 	endbr64
.Ltmp4589:
    00002061: 	movq	%rax, %rbp
    00002064: 	jmp	.Ltmp4581 # Offset: 8292
    00002066: 	endbr64
.Ltmp4583:
    0000206a: 	movq	%rax, %rbp
    0000206d: 	jmp	.Ltmp4582 # Offset: 8301
    0000206f: 	endbr64
    00002073: 	jmp	.Ltmp4583 # Offset: 8307
.Ltmp4581:
    00002075: 	movq	0xd0(%rsp), %rdi
    0000207d: 	cmpq	%rbx, %rdi
    00002080: 	je	.Ltmp4584 # Offset: 8320
    00002082: 	movq	0xe0(%rsp), %rax
    0000208a: 	leaq	0x1(%rax), %rsi
    0000208e: 	callq	_ZdlPvm@PLT # Offset: 8334
.Ltmp4584:
    00002093: 	movq	0x50(%rsp), %rdi
    00002098: 	leaq	0x60(%rsp), %rax
    0000209d: 	cmpq	%rax, %rdi
    000020a0: 	je	.Ltmp4585 # Offset: 8352
    000020a2: 	movq	0x60(%rsp), %rax
    000020a7: 	leaq	0x1(%rax), %rsi
    000020ab: 	callq	_ZdlPvm@PLT # Offset: 8363
.Ltmp4585:
    000020b0: 	movl	$0x2, %esi
    000020b5: 	movq	%r12, %rdi
    000020b8: 	movq	%rbp, %rbx
    000020bb: 	callq	_ZdlPvm@PLT # Offset: 8379
.Ltmp4596:
    000020c0: 	movq	0x30(%rsp), %rdi
    000020c5: 	cmpq	0x18(%rsp), %rdi
    000020ca: 	je	.Ltmp4586 # Offset: 8394
    000020cc: 	movq	0x40(%rsp), %rax
    000020d1: 	leaq	0x1(%rax), %rsi
    000020d5: 	callq	_ZdlPvm@PLT # Offset: 8405
.Ltmp4586:
    000020da: 	movq	%rbx, %rdi
    000020dd: 	callq	_Unwind_Resume@PLT # Offset: 8413
.Ltmp4582:
    000020e2: 	movq	0xd0(%rsp), %rdi
    000020ea: 	cmpq	%rbx, %rdi
    000020ed: 	je	.Ltmp4585 # Offset: 8429
    000020ef: 	movq	0xe0(%rsp), %rax
    000020f7: 	leaq	0x1(%rax), %rsi
    000020fb: 	callq	_ZdlPvm@PLT # Offset: 8443
    00002100: 	jmp	.Ltmp4585 # Offset: 8448
    00002102: 	endbr64
.Ltmp4588:
    00002106: 	movq	%rax, %rbp
    00002109: 	jmp	.Ltmp4587 # Offset: 8457
    0000210e: 	endbr64
    00002112: 	jmp	.Ltmp4588 # Offset: 8466
    00002114: 	endbr64
    00002118: 	jmp	.Ltmp4588 # Offset: 8472
    0000211a: 	endbr64
    0000211e: 	jmp	.Ltmp4589 # Offset: 8478
    00002123: 	endbr64
    00002127: 	jmp	.Ltmp4589 # Offset: 8487
    0000212c: 	endbr64
    00002130: 	jmp	.Ltmp4589 # Offset: 8496
    00002135: 	endbr64
    00002139: 	jmp	.Ltmp4589 # Offset: 8505
    0000213e: 	endbr64
.Ltmp4591:
    00002142: 	movq	%rax, %rbp
    00002145: 	jmp	.Ltmp4590 # Offset: 8517
    00002147: 	endbr64
    0000214b: 	jmp	.Ltmp4591 # Offset: 8523
    0000214d: 	endbr64
    00002151: 	jmp	.Ltmp4591 # Offset: 8529
    00002153: 	endbr64
    00002157: 	jmp	.Ltmp4591 # Offset: 8535
.Ltmp4590:
    00002159: 	movq	0xd0(%rsp), %rdi
    00002161: 	cmpq	%rbx, %rdi
    00002164: 	je	.Ltmp4592 # Offset: 8548
    00002166: 	movq	0xe0(%rsp), %rax
    0000216e: 	leaq	0x1(%rax), %rsi
    00002172: 	callq	_ZdlPvm@PLT # Offset: 8562
.Ltmp4592:
    00002177: 	movq	0x70(%rsp), %rdi
    0000217c: 	leaq	0x80(%rsp), %rax
    00002184: 	cmpq	%rax, %rdi
    00002187: 	je	.Ltmp4584 # Offset: 8583
    0000218d: 	movq	0x80(%rsp), %rax
    00002195: 	leaq	0x1(%rax), %rsi
    00002199: 	callq	_ZdlPvm@PLT # Offset: 8601
    0000219e: 	jmp	.Ltmp4584 # Offset: 8606
    000021a3: 	endbr64
    000021a7: 	movq	%rax, %rbp
    000021aa: 	jmp	.Ltmp4592 # Offset: 8618
    000021ac: 	endbr64
    000021b0: 	jmp	.Ltmp4591 # Offset: 8624
    000021b2: 	endbr64
    000021b6: 	jmp	.Ltmp4583 # Offset: 8630
    000021bb: 	endbr64
    000021bf: 	jmp	.Ltmp4583 # Offset: 8639
    000021c4: 	endbr64
    000021c8: 	movq	%rax, %rbp
    000021cb: 	jmp	.Ltmp4585 # Offset: 8651
    000021d0: 	endbr64
    000021d4: 	jmp	.Ltmp4583 # Offset: 8660
    000021d9: 	endbr64
    000021dd: 	jmp	.Ltmp4591 # Offset: 8669
    000021e2: 	endbr64
    000021e6: 	jmp	.Ltmp4591 # Offset: 8678
    000021eb: 	endbr64
    000021ef: 	jmp	.Ltmp4589 # Offset: 8687
    000021f4: 	endbr64
    000021f8: 	jmp	.Ltmp4589 # Offset: 8696
    000021fd: 	endbr64
    00002201: 	jmp	.Ltmp4589 # Offset: 8705
    00002206: 	endbr64
    0000220a: 	jmp	.Ltmp4591 # Offset: 8714
    0000220f: 	endbr64
    00002213: 	jmp	.Ltmp4583 # Offset: 8723
    00002218: 	endbr64
    0000221c: 	jmp	.Ltmp4583 # Offset: 8732
    00002221: 	endbr64
    00002225: 	jmp	.Ltmp4583 # Offset: 8741
    0000222a: 	endbr64
    0000222e: 	movq	%rax, %rbp
    00002231: 	jmp	.Ltmp4584 # Offset: 8753
    00002236: 	endbr64
    0000223a: 	jmp	.Ltmp4589 # Offset: 8762
    0000223f: 	endbr64
    00002243: 	jmp	.Ltmp4589 # Offset: 8771
    00002248: 	endbr64
    0000224c: 	jmp	.Ltmp4589 # Offset: 8780
    00002251: 	endbr64
    00002255: 	jmp	.Ltmp4589 # Offset: 8789
    0000225a: 	endbr64
.Ltmp4598:
    0000225e: 	movq	%rax, %rbp
    00002261: 	jmp	.Ltmp4593 # Offset: 8801
    00002263: 	endbr64
.Ltmp4595:
    00002267: 	movq	%rax, %rbp
    0000226a: 	movq	0xd0(%rsp), %rdi
    00002272: 	cmpq	%rbx, %rdi
    00002275: 	je	.Ltmp4593 # Offset: 8821
    00002277: 	movq	0xe0(%rsp), %rax
    0000227f: 	leaq	0x1(%rax), %rsi
    00002283: 	callq	_ZdlPvm@PLT # Offset: 8835
.Ltmp4593:
    00002288: 	movq	0xb0(%rsp), %rdi
    00002290: 	cmpq	0x10(%rsp), %rdi
    00002295: 	je	.Ltmp4594 # Offset: 8853
    00002297: 	movq	0xc0(%rsp), %rax
    0000229f: 	leaq	0x1(%rax), %rsi
    000022a3: 	callq	_ZdlPvm@PLT # Offset: 8867
.Ltmp4594:
    000022a8: 	movq	0x90(%rsp), %rdi
    000022b0: 	cmpq	0x8(%rsp), %rdi
    000022b5: 	je	.Ltmp4592 # Offset: 8885
    000022bb: 	movq	0xa0(%rsp), %rax
    000022c3: 	leaq	0x1(%rax), %rsi
    000022c7: 	callq	_ZdlPvm@PLT # Offset: 8903
    000022cc: 	jmp	.Ltmp4592 # Offset: 8908
    000022d1: 	endbr64
    000022d5: 	jmp	.Ltmp4595 # Offset: 8917
    000022d7: 	endbr64
    000022db: 	movq	%rax, %rbx
    000022de: 	jmp	.Ltmp4596 # Offset: 8926
    000022e3: 	endbr64
    000022e7: 	jmp	.Ltmp4595 # Offset: 8935
    000022ec: 	endbr64
    000022f0: 	jmp	.Ltmp4595 # Offset: 8944
    000022f5: 	endbr64
    000022f9: 	jmp	.Ltmp4591 # Offset: 8953
    000022fe: 	endbr64
    00002302: 	jmp	.Ltmp4591 # Offset: 8962
    00002307: 	endbr64
.Ltmp4597:
    0000230b: 	movq	%rax, %rbp
    0000230e: 	jmp	.Ltmp4594 # Offset: 8974
    00002310: 	endbr64
    00002314: 	jmp	.Ltmp4597 # Offset: 8980
    00002316: 	endbr64
    0000231a: 	jmp	.Ltmp4595 # Offset: 8986
    0000231f: 	endbr64
    00002323: 	jmp	.Ltmp4595 # Offset: 8995
    00002328: 	endbr64
    0000232c: 	jmp	.Ltmp4595 # Offset: 9004
    00002331: 	endbr64
    00002335: 	jmp	.Ltmp4595 # Offset: 9013
    0000233a: 	endbr64
    0000233e: 	jmp	.Ltmp4583 # Offset: 9022
    00002343: 	endbr64
    00002347: 	jmp	.Ltmp4583 # Offset: 9031
    0000234c: 	endbr64
    00002350: 	jmp	.Ltmp4583 # Offset: 9040
    00002355: 	endbr64
    00002359: 	jmp	.Ltmp4583 # Offset: 9049
    0000235e: 	endbr64
    00002362: 	jmp	.Ltmp4595 # Offset: 9058
    00002367: 	endbr64
    0000236b: 	jmp	.Ltmp4595 # Offset: 9067
    00002370: 	endbr64
    00002374: 	jmp	.Ltmp4595 # Offset: 9076
    00002379: 	endbr64
    0000237d: 	jmp	.Ltmp4595 # Offset: 9085
    00002382: 	endbr64
    00002386: 	jmp	.Ltmp4588 # Offset: 9094
    0000238b: 	endbr64
    0000238f: 	jmp	.Ltmp4588 # Offset: 9103
    00002394: 	endbr64
    00002398: 	jmp	.Ltmp4588 # Offset: 9112
    0000239d: 	endbr64
    000023a1: 	jmp	.Ltmp4588 # Offset: 9121
    000023a6: 	endbr64
    000023aa: 	jmp	.Ltmp4598 # Offset: 9130
    000023af: 	endbr64
    000023b3: 	jmp	.Ltmp4595 # Offset: 9139
    000023b8: 	endbr64
    000023bc: 	jmp	.Ltmp4595 # Offset: 9148
    000023c1: 	endbr64
    000023c5: 	jmp	.Ltmp4595 # Offset: 9157
    000023ca: 	endbr64
    000023ce: 	jmp	.Ltmp4588 # Offset: 9166
    000023d3: 	endbr64
    000023d7: 	jmp	.Ltmp4588 # Offset: 9175
    000023dc: 	endbr64
    000023e0: 	jmp	.Ltmp4588 # Offset: 9184
.Ltmp4587:
    000023e5: 	movq	0xd0(%rsp), %rdi
    000023ed: 	cmpq	%rbx, %rdi
    000023f0: 	je	.Ltmp4594 # Offset: 9200
    000023f6: 	movq	0xe0(%rsp), %rax
    000023fe: 	leaq	0x1(%rax), %rsi
    00002402: 	callq	_ZdlPvm@PLT # Offset: 9218
    00002407: 	jmp	.Ltmp4594 # Offset: 9223
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeItEvv"

Binary Function "_fini" after disassembly {
  Number      : 397
  State       : disassembled
  Address     : 0x32ccc
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x32ccc
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0396:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 398 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 2913 instructions were shortened
BOLT-INFO: removed 995 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 393 out of 426 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x20826c
