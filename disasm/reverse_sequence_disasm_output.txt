BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0x2e028, which lies outside .bss
BOLT-WARNING: split function detected on input : _GLOBAL__sub_I_results.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x2dff0(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 3
  State       : disassembled
  Address     : 0x1410
  Size        : 0xeb
  MaxSize     : 0xf0
  Offset      : 0x1410
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB02:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	pushq	%rbx
    0000000c: 	testl	%edi, %edi
    0000000e: 	jle	.Ltmp1 # Offset: 14
    00000014: 	leal	-0x1(%rdi), %eax
    00000017: 	movl	%edi, %r13d
    0000001a: 	movq	%rsi, %r14
    0000001d: 	movq	%rsi, %rbx
    00000020: 	leaq	0x8(%rsi,%rax,8), %r12
    00000025: 	leaq	DATAat0x27180(%rip), %rbp
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp2:
    00000030: 	movq	(%rbx), %rdx
    00000033: 	movq	%rbp, %rsi
    00000036: 	movl	$0x1, %edi
    0000003b: 	xorl	%eax, %eax
    0000003d: 	addq	$0x8, %rbx
    00000041: 	callq	__printf_chk@PLT # Offset: 65
    00000046: 	cmpq	%rbx, %r12
    00000049: 	jne	.Ltmp2 # Offset: 73
    0000004b: 	xorl	%eax, %eax
    0000004d: 	leaq	DATAat0x27166(%rip), %rsi
    00000054: 	movl	$0x1, %edi
    00000059: 	callq	__printf_chk@PLT # Offset: 89
    0000005e: 	cmpl	$0x1, %r13d
    00000062: 	jg	.Ltmp3 # Offset: 98
.Ltmp4:
    00000064: 	movl	iterations(%rip), %eax
    0000006a: 	addl	$0x1, %eax
    0000006d: 	andl	$-0x2, %eax
    00000070: 	movl	%eax, iterations(%rip)
    00000076: 	callq	_Z11TestOneTypeIhEvv # Offset: 118
    0000007b: 	callq	_Z11TestOneTypeIsEvv # Offset: 123
    00000080: 	callq	_Z11TestOneTypeIiEvv # Offset: 128
    00000085: 	callq	_Z11TestOneTypeIfEvv # Offset: 133
    0000008a: 	callq	_Z11TestOneTypeImEvv # Offset: 138
    0000008f: 	callq	_Z11TestOneTypeIdEvv # Offset: 143
    00000094: 	popq	%rbx
    00000095: 	xorl	%eax, %eax
    00000097: 	popq	%rbp
    00000098: 	popq	%r12
    0000009a: 	popq	%r13
    0000009c: 	popq	%r14
    0000009e: 	retq # Offset: 158
.Ltmp3:
    0000009f: 	movq	0x8(%r14), %rdi
    000000a3: 	movl	$0xa, %edx
    000000a8: 	xorl	%esi, %esi
    000000aa: 	callq	strtol@PLT # Offset: 170
    000000af: 	movl	%eax, iterations(%rip)
    000000b5: 	cmpl	$0x2, %r13d
    000000b9: 	jle	.Ltmp4 # Offset: 185
    000000bb: 	movq	0x10(%r14), %rdi
    000000bf: 	movl	$0xa, %edx
    000000c4: 	xorl	%esi, %esi
    000000c6: 	callq	strtol@PLT # Offset: 198
    000000cb: 	movl	%eax, init_value(%rip)
    000000d1: 	jmp	.Ltmp4 # Offset: 209
.Ltmp1:
    000000d3: 	leaq	DATAat0x27166(%rip), %rsi
    000000da: 	movl	$0x1, %edi
    000000df: 	xorl	%eax, %eax
    000000e1: 	callq	__printf_chk@PLT # Offset: 225
    000000e6: 	jmp	.Ltmp4 # Offset: 230
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 5
  State       : disassembled
  Address     : 0x15e0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x15e0
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x2dfe0(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x1610
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x1610
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp5 # Offset: 17
    00000013: 	movq	DATAat0x2dfe8(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp5 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp5:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x1640
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1640
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp6 # Offset: 34
    00000024: 	movq	DATAat0x2dff8(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp6 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x1680
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1680
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp7 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp8 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp8:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp7:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 9
  State       : disassembled
  Address     : 0x16c0
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x16c0
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1(*2)" after disassembly {
  All names   : _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1
                _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/reverse_sequence.cpp/1
  Number      : 10
  State       : disassembled
  Address     : 0x16d0
  Size        : 0xc0
  MaxSize     : 0xc0
  Offset      : 0x16d0
  Section     : .text
  Orc Section : .local.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	pushq	%r12
    00000002: 	movq	%rdx, %r12
    00000005: 	pushq	%rbp
    00000006: 	movq	%rsi, %rbp
    00000009: 	pushq	%rbx
    0000000a: 	movq	%rdi, %rbx
    0000000d: 	subq	$0x10, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	testq	%rdx, %rdx
    00000024: 	je	.Ltmp9 # Offset: 36
    00000026: 	testq	%rsi, %rsi
    00000029: 	je	.Ltmp10 # Offset: 41
.Ltmp9:
    0000002f: 	subq	%rbp, %r12
    00000032: 	movq	%r12, (%rsp)
    00000036: 	cmpq	$0xf, %r12
    0000003a: 	ja	.Ltmp11 # Offset: 58
    0000003c: 	movq	(%rbx), %rdi
    0000003f: 	cmpq	$0x1, %r12
    00000043: 	jne	.Ltmp12 # Offset: 67
    00000045: 	movzbl	(%rbp), %eax
    00000049: 	movb	%al, (%rdi)
    0000004b: 	movq	(%rsp), %r12
    0000004f: 	movq	(%rbx), %rdi
.Ltmp14:
    00000052: 	movq	%r12, 0x8(%rbx)
    00000056: 	movb	$0x0, (%rdi,%r12)
    0000005b: 	movq	0x8(%rsp), %rax
    00000060: 	subq	%fs:0x28, %rax
    00000069: 	jne	.Ltmp13 # Offset: 105
    0000006b: 	addq	$0x10, %rsp
    0000006f: 	popq	%rbx
    00000070: 	popq	%rbp
    00000071: 	popq	%r12
    00000073: 	retq # Offset: 115
    00000074: 	nopl	(%rax) # Size: 4
.Ltmp12:
    00000078: 	testq	%r12, %r12
    0000007b: 	je	.Ltmp14 # Offset: 123
    0000007d: 	jmp	.Ltmp15 # Offset: 125
    0000007f: 	nop # Size: 1
.Ltmp11:
    00000080: 	movq	%rbx, %rdi
    00000083: 	movq	%rsp, %rsi
    00000086: 	xorl	%edx, %edx
    00000088: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 136
    0000008d: 	movq	%rax, (%rbx)
    00000090: 	movq	%rax, %rdi
    00000093: 	movq	(%rsp), %rax
    00000097: 	movq	%rax, 0x10(%rbx)
.Ltmp15:
    0000009b: 	movq	%r12, %rdx
    0000009e: 	movq	%rbp, %rsi
    000000a1: 	callq	memcpy@PLT # Offset: 161
    000000a6: 	movq	(%rsp), %r12
    000000aa: 	movq	(%rbx), %rdi
    000000ad: 	jmp	.Ltmp14 # Offset: 173
.Ltmp10:
    000000af: 	leaq	DATAat0x27008(%rip), %rdi
    000000b6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 182
.Ltmp13:
    000000bb: 	callq	__stack_chk_fail@PLT # Offset: 187
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1(*2)"

Binary Function "_Z21specific_fast_reverseIPhEvT_S1_St26random_access_iterator_tag.isra.0/1(*2)" after disassembly {
  All names   : _Z21specific_fast_reverseIPhEvT_S1_St26random_access_iterator_tag.isra.0/1
                _Z21specific_fast_reverseIPhEvT_S1_St26random_access_iterator_tag.isra.0/reverse_sequence.cpp/1
  Number      : 11
  State       : disassembled
  Address     : 0x1790
  Size        : 0x107
  MaxSize     : 0x110
  Offset      : 0x1790
  Section     : .text
  Orc Section : .local.text._Z21specific_fast_reverseIPhEvT_S1_St26random_access_iterator_tag.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	movq	%rdi, %rax
    00000003: 	cmpq	%rsi, %rdi
    00000006: 	je	.Ltmp16 # Offset: 6
    0000000c: 	movq	%rsi, %rdx
    0000000f: 	subq	%rdi, %rdx
    00000012: 	leaq	-0x1(%rsi), %rdi
    00000016: 	movq	%rdx, %r10
    00000019: 	shrq	$0x3f, %r10
    0000001d: 	addq	%rdx, %r10
    00000020: 	sarq	%r10
    00000023: 	cmpq	$0x7, %rdx
    00000027: 	jle	.Ltmp17 # Offset: 39
    0000002d: 	leaq	-0x4(%r10), %r9
    00000031: 	movq	%rdi, %rdx
    00000034: 	shrq	$0x2, %r9
    00000038: 	addq	$0x1, %r9
    0000003c: 	leaq	(,%r9,4), %r11
    00000044: 	leaq	(%rax,%r11), %r8
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp18:
    00000050: 	movzbl	(%rdx), %esi
    00000053: 	movzbl	(%rax), %ecx
    00000056: 	addq	$0x4, %rax
    0000005a: 	subq	$0x4, %rdx
    0000005e: 	movb	%sil, -0x4(%rax)
    00000062: 	movzbl	0x3(%rdx), %esi
    00000066: 	movb	%cl, 0x4(%rdx)
    00000069: 	movzbl	-0x3(%rax), %ecx
    0000006d: 	movb	%sil, -0x3(%rax)
    00000071: 	movzbl	0x2(%rdx), %esi
    00000075: 	movb	%cl, 0x3(%rdx)
    00000078: 	movzbl	-0x2(%rax), %ecx
    0000007c: 	movb	%sil, -0x2(%rax)
    00000080: 	movzbl	0x1(%rdx), %esi
    00000084: 	movb	%cl, 0x2(%rdx)
    00000087: 	movzbl	-0x1(%rax), %ecx
    0000008b: 	movb	%sil, -0x1(%rax)
    0000008f: 	movb	%cl, 0x1(%rdx)
    00000092: 	cmpq	%r8, %rax
    00000095: 	jne	.Ltmp18 # Offset: 149
    00000097: 	subq	%r11, %rdi
    0000009a: 	leaq	(,%r9,4), %rax
.Ltmp19:
    000000a2: 	cmpq	%rax, %r10
    000000a5: 	jle	.Ltmp16 # Offset: 165
    000000a7: 	movzbl	(%r8), %edx
    000000ab: 	movzbl	(%rdi), %ecx
    000000ae: 	movb	%cl, (%r8)
    000000b1: 	movb	%dl, (%rdi)
    000000b3: 	leaq	0x1(%rax), %rdx
    000000b7: 	cmpq	%rdx, %r10
    000000ba: 	jle	.Ltmp16 # Offset: 186
    000000bc: 	movzbl	0x1(%r8), %edx
    000000c1: 	movzbl	-0x1(%rdi), %ecx
    000000c5: 	movb	%cl, 0x1(%r8)
    000000c9: 	movb	%dl, -0x1(%rdi)
    000000cc: 	leaq	0x2(%rax), %rdx
    000000d0: 	cmpq	%rdx, %r10
    000000d3: 	jle	.Ltmp16 # Offset: 211
    000000d5: 	movzbl	0x2(%r8), %edx
    000000da: 	movzbl	-0x2(%rdi), %ecx
    000000de: 	addq	$0x3, %rax
    000000e2: 	movb	%cl, 0x2(%r8)
    000000e6: 	movb	%dl, -0x2(%rdi)
    000000e9: 	cmpq	%rax, %r10
    000000ec: 	jle	.Ltmp16 # Offset: 236
    000000ee: 	movzbl	0x3(%r8), %eax
    000000f3: 	movzbl	-0x3(%rdi), %edx
    000000f7: 	movb	%dl, 0x3(%r8)
    000000fb: 	movb	%al, -0x3(%rdi)
.Ltmp16:
    000000fe: 	retq # Offset: 254
    000000ff: 	nop # Size: 1
.Ltmp17:
    00000100: 	movq	%rax, %r8
    00000103: 	xorl	%eax, %eax
    00000105: 	jmp	.Ltmp19 # Offset: 261
DWARF CFI Instructions:
    <empty>
End of Function "_Z21specific_fast_reverseIPhEvT_S1_St26random_access_iterator_tag.isra.0/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x18a0
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x18a0
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp20 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp21 # Offset: 38
.Ltmp20:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp22 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp21:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp22:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x27038(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x1940
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x1940
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp23 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp24 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp25:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp25 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp38:
    00000069: 	leaq	DATAat0x27182(%rip), %rbp
    00000070: 	leaq	DATAat0x27058(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x27098(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp26 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x276b8(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x270c8(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x276b0(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp27 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp31:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp28 # Offset: 244
    000000fa: 	movq	DATAat0x276a0(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp32:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x276a0(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp29 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp29:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x27167(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x276b8(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp30 # Offset: 398
.Ltmp27:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp31 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp32 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp28:
    000001c8: 	movq	DATAat0x276a8(%rip), %rsi
    000001cf: 	movq	DATAat0x276a0(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp29 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp30:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp26 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp33 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp34:
    00000210: 	addq	$0x10, %rax
.Ltmp33:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp34 # Offset: 542
.Ltmp39:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x270f8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp35 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp36 # Offset: 592
.Ltmp35:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp23:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp36:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp37:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp37 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x27142(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp23 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp24:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp38 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp26:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp39 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x1c70
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x1c70
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp40 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp41 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp42:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp42 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp47:
    0000006a: 	leaq	DATAat0x27182(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x27120(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x27168(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x27182(%rip), %r8
    000000a1: 	leaq	DATAat0x27156(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp43 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp44:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x27167(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp44 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp43 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp45 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp46:
    00000140: 	addq	$0x10, %rax
.Ltmp45:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp46 # Offset: 334
.Ltmp48:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x270f8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp40:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp41:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp47 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp43:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp48 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x1e20
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x1e20
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x1e40
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x1e40
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x276b0(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark6scrandEm" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x1e80
  Size        : 0xc
  MaxSize     : 0x10
  Offset      : 0x1e80
  Section     : .text
  Orc Section : .local.text._ZN9benchmark6scrandEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	movq	%rdi, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000000b: 	retq # Offset: 11
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark6scrandEm"

Binary Function "_ZN9benchmark7crand64Ev" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x1e90
  Size        : 0x42
  MaxSize     : 0x50
  Offset      : 0x1e90
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand64Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rdx
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rax
    00000015: 	imulq	%rax, %rdx
    00000019: 	movabsq	$0x14057b7ef767814f, %rax
    00000023: 	addq	%rax, %rdx
    00000026: 	movq	%rdx, %rax
    00000029: 	movq	%rdx, %rcx
    0000002c: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rax
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rax
    0000003e: 	xorq	%rdx, %rax
    00000041: 	retq # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand64Ev"

Binary Function "_ZN9benchmark7crand32Ev" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x1ee0
  Size        : 0x41
  MaxSize     : 0x50
  Offset      : 0x1ee0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand32Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rdx
    00000015: 	imulq	%rdx, %rax
    00000019: 	movabsq	$0x14057b7ef767814f, %rdx
    00000023: 	addq	%rdx, %rax
    00000026: 	movq	%rax, %rdx
    00000029: 	movq	%rax, %rcx
    0000002c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rdx
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rdx
    0000003e: 	xorl	%edx, %eax
    00000040: 	retq # Offset: 64
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand32Ev"

Binary Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x1f30
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1f30
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f38, %edx
    00000017: 	movl	$0x746e6975, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x1f60
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1f60
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3631746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x1f90
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1f90
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3233746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x1fc0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1fc0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3436746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x1ff0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1ff0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x2020
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2020
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x2050
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2050
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f36, %edx
    00000017: 	movl	$0x31746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x2080
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2080
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f32, %edx
    00000017: 	movl	$0x33746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x20b0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x20b0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f34, %edx
    00000017: 	movl	$0x36746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x20e0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x20e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x14(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x616f6c66, 0x10(%rdi)
    00000019: 	movq	$0x5, 0x8(%rdi)
    00000021: 	movb	$0x0, 0x15(%rdi)
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x2110
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2110
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x62756f64, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x656c, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x2140
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0x2140
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x65, 0x1a(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movl	$0x6c62, %edx
    00000021: 	movq	%rcx, 0x10(%rdi)
    00000025: 	movw	%dx, 0x18(%rdi)
    00000029: 	movq	$0xb, 0x8(%rdi)
    00000031: 	movb	$0x0, 0x1b(%rdi)
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x2180
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2180
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f38746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x21b0
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x21b0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3631746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x21e0
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x21e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3233746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x2210
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x2210
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3436746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x2240
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2240
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x745f, %edx
    00000017: 	movl	$0x38746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x2270
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2270
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3631746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x22a0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x22a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3233746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x22d0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x22d0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3436746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x2300
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2300
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x616f6c66, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x2a74, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x2330
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2330
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x656c, %edx
    00000017: 	movl	$0x62756f64, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x2360
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x2360
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x0, 0x1c(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movl	$0x2a656c62, 0x18(%rdi)
    00000027: 	movq	$0xc, 0x8(%rdi)
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZSt7reverseI20BidirectionalPointerIhEEvT_S2_" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0x2390
  Size        : 0x2e
  MaxSize     : 0x30
  Offset      : 0x2390
  Section     : .text
  Orc Section : .local.text._ZSt7reverseI20BidirectionalPointerIhEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	jmp	.Ltmp49 # Offset: 4
    00000006: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp51:
    00000010: 	subq	$0x1, %rsi
    00000014: 	cmpq	%rsi, %rdi
    00000017: 	je	.Ltmp50 # Offset: 23
    00000019: 	movzbl	(%rdi), %eax
    0000001c: 	movzbl	(%rsi), %edx
    0000001f: 	addq	$0x1, %rdi
    00000023: 	movb	%dl, -0x1(%rdi)
    00000026: 	movb	%al, (%rsi)
.Ltmp49:
    00000028: 	cmpq	%rsi, %rdi
    0000002b: 	jne	.Ltmp51 # Offset: 43
.Ltmp50:
    0000002d: 	retq # Offset: 45
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt7reverseI20BidirectionalPointerIhEEvT_S2_"

Binary Function "_Z17my_simple_reverseI20BidirectionalPointerIhEEvT_S2_" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0x23c0
  Size        : 0x2e
  MaxSize     : 0x30
  Offset      : 0x23c0
  Section     : .text
  Orc Section : .local.text._Z17my_simple_reverseI20BidirectionalPointerIhEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp52 # Offset: 7
    00000009: 	nopl	(%rax) # Size: 7
.Ltmp53:
    00000010: 	subq	$0x1, %rsi
    00000014: 	cmpq	%rdi, %rsi
    00000017: 	je	.Ltmp52 # Offset: 23
    00000019: 	movzbl	(%rsi), %edx
    0000001c: 	movzbl	(%rdi), %eax
    0000001f: 	addq	$0x1, %rdi
    00000023: 	movb	%dl, -0x1(%rdi)
    00000026: 	movb	%al, (%rsi)
    00000028: 	cmpq	%rdi, %rsi
    0000002b: 	jne	.Ltmp53 # Offset: 43
.Ltmp52:
    0000002d: 	retq # Offset: 45
DWARF CFI Instructions:
    <empty>
End of Function "_Z17my_simple_reverseI20BidirectionalPointerIhEEvT_S2_"

Binary Function "_Z15my_fast_reverseI20BidirectionalPointerIhEEvT_S2_" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0x23f0
  Size        : 0x2e
  MaxSize     : 0x30
  Offset      : 0x23f0
  Section     : .text
  Orc Section : .local.text._Z15my_fast_reverseI20BidirectionalPointerIhEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp54 # Offset: 7
    00000009: 	nopl	(%rax) # Size: 7
.Ltmp55:
    00000010: 	subq	$0x1, %rsi
    00000014: 	cmpq	%rdi, %rsi
    00000017: 	je	.Ltmp54 # Offset: 23
    00000019: 	movzbl	(%rsi), %edx
    0000001c: 	movzbl	(%rdi), %eax
    0000001f: 	addq	$0x1, %rdi
    00000023: 	movb	%dl, -0x1(%rdi)
    00000026: 	movb	%al, (%rsi)
    00000028: 	cmpq	%rdi, %rsi
    0000002b: 	jne	.Ltmp55 # Offset: 43
.Ltmp54:
    0000002d: 	retq # Offset: 45
DWARF CFI Instructions:
    <empty>
End of Function "_Z15my_fast_reverseI20BidirectionalPointerIhEEvT_S2_"

Binary Function "_ZSt7reverseIPhEvT_S1_" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0x2420
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2420
  Section     : .text
  Orc Section : .local.text._ZSt7reverseIPhEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	jne	.Ltmp56 # Offset: 7
    00000009: 	jmp	.Ltmp57 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp58:
    00000010: 	movzbl	(%rdi), %eax
    00000013: 	movzbl	(%rsi), %edx
    00000016: 	addq	$0x1, %rdi
    0000001a: 	movb	%dl, -0x1(%rdi)
    0000001d: 	movb	%al, (%rsi)
.Ltmp56:
    0000001f: 	subq	$0x1, %rsi
    00000023: 	cmpq	%rsi, %rdi
    00000026: 	jb	.Ltmp58 # Offset: 38
.Ltmp57:
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt7reverseIPhEvT_S1_"

Binary Function "_Z17my_simple_reverseIPhEvT_S1_" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0x2450
  Size        : 0x4b
  MaxSize     : 0x50
  Offset      : 0x2450
  Section     : .text
  Orc Section : .local.text._Z17my_simple_reverseIPhEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp59 # Offset: 7
    00000009: 	movq	%rsi, %rax
    0000000c: 	subq	$0x1, %rsi
    00000010: 	subq	%rdi, %rax
    00000013: 	movq	%rax, %r8
    00000016: 	shrq	$0x3f, %r8
    0000001a: 	addq	%rax, %r8
    0000001d: 	sarq	%r8
    00000020: 	cmpq	$0x1, %rax
    00000024: 	jle	.Ltmp59 # Offset: 36
    00000026: 	xorl	%eax, %eax
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp60:
    00000030: 	movzbl	(%rsi), %ecx
    00000033: 	movzbl	(%rdi,%rax), %edx
    00000037: 	subq	$0x1, %rsi
    0000003b: 	movb	%cl, (%rdi,%rax)
    0000003e: 	addq	$0x1, %rax
    00000042: 	movb	%dl, 0x1(%rsi)
    00000045: 	cmpq	%rax, %r8
    00000048: 	jg	.Ltmp60 # Offset: 72
.Ltmp59:
    0000004a: 	retq # Offset: 74
DWARF CFI Instructions:
    <empty>
End of Function "_Z17my_simple_reverseIPhEvT_S1_"

Binary Function "_Z13fast_reverse2IPhEvT_S1_" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0x24a0
  Size        : 0x397
  MaxSize     : 0x3a0
  Offset      : 0x24a0
  Section     : .text
  Orc Section : .local.text._Z13fast_reverse2IPhEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp61 # Offset: 7
    0000000d: 	movq	%rsi, %rdx
    00000010: 	movq	%rdi, %rax
    00000013: 	pushq	%r12
    00000015: 	movq	%rsi, %r11
    00000018: 	subq	%rdi, %rdx
    0000001b: 	pushq	%rbp
    0000001c: 	leaq	-0x1(%rsi), %r8
    00000020: 	movq	%rdx, %rdi
    00000023: 	pushq	%rbx
    00000024: 	shrq	$0x3f, %rdi
    00000028: 	addq	%rdx, %rdi
    0000002b: 	sarq	%rdi
    0000002e: 	cmpq	$0x7, %rdx
    00000032: 	jle	.Ltmp62 # Offset: 50
    00000038: 	leaq	-0x4(%rdi), %rcx
    0000003c: 	movq	%r11, %rbx
    0000003f: 	movq	%rcx, %r12
    00000042: 	shrq	$0x2, %r12
    00000046: 	leaq	0x1(%r12), %rsi
    0000004b: 	leaq	(,%rsi,4), %rdx
    00000053: 	subq	%rdx, %rbx
    00000056: 	leaq	(%rax,%rdx), %r9
    0000005a: 	movq	%rdx, %r10
    0000005d: 	negq	%r10
    00000060: 	cmpq	%rbx, %r9
    00000063: 	setbe	%dl
    00000066: 	cmpq	%r11, %rax
    00000069: 	setae	%bl
    0000006c: 	orb	%bl, %dl
    0000006e: 	je	.Ltmp63 # Offset: 110
    00000074: 	cmpq	$0x3, %rcx
    00000078: 	jbe	.Ltmp63 # Offset: 120
    0000007e: 	cmpq	$0xb, %rcx
    00000082: 	jbe	.Ltmp64 # Offset: 130
    00000088: 	movq	%rsi, %rbx
    0000008b: 	movdqa	DATAat0x274f0(%rip), %xmm4
    00000093: 	movq	%rax, %rdx
    00000096: 	leaq	-0x10(%r11), %rcx
    0000009a: 	shrq	$0x2, %rbx
    0000009e: 	movdqa	DATAat0x27500(%rip), %xmm3
    000000a6: 	shlq	$0x4, %rbx
    000000aa: 	addq	%rax, %rbx
    000000ad: 	nopl	(%rax) # Size: 3
.Ltmp65:
    000000b0: 	movdqu	(%rdx), %xmm2
    000000b4: 	movdqu	(%rcx), %xmm6
    000000b8: 	addq	$0x10, %rdx
    000000bc: 	subq	$0x10, %rcx
    000000c0: 	movdqa	%xmm2, %xmm0
    000000c4: 	movdqa	%xmm2, %xmm5
    000000c8: 	pshufd	$0x1b, %xmm6, %xmm1
    000000cd: 	psrld	$0x8, %xmm0
    000000d2: 	pslld	$0x8, %xmm5
    000000d7: 	pand	%xmm3, %xmm5
    000000db: 	pand	%xmm4, %xmm0
    000000df: 	pxor	%xmm5, %xmm0
    000000e3: 	movdqa	%xmm2, %xmm5
    000000e7: 	psrld	$0x18, %xmm5
    000000ec: 	pslld	$0x18, %xmm2
    000000f1: 	pxor	%xmm5, %xmm2
    000000f5: 	movdqa	%xmm1, %xmm5
    000000f9: 	pxor	%xmm2, %xmm0
    000000fd: 	pslld	$0x8, %xmm5
    00000102: 	movdqa	%xmm1, %xmm2
    00000106: 	psrld	$0x8, %xmm2
    0000010b: 	pand	%xmm3, %xmm5
    0000010f: 	pshufd	$0x1b, %xmm0, %xmm0
    00000114: 	pand	%xmm4, %xmm2
    00000118: 	pxor	%xmm5, %xmm2
    0000011c: 	movdqa	%xmm1, %xmm5
    00000120: 	psrld	$0x18, %xmm5
    00000125: 	pslld	$0x18, %xmm1
    0000012a: 	pxor	%xmm5, %xmm1
    0000012e: 	pxor	%xmm2, %xmm1
    00000132: 	movups	%xmm1, -0x10(%rdx)
    00000136: 	movups	%xmm0, 0x10(%rcx)
    0000013a: 	cmpq	%rbx, %rdx
    0000013d: 	jne	.Ltmp65 # Offset: 317
    00000143: 	movq	%rsi, %rbp
    00000146: 	movq	%rax, %rbx
    00000149: 	andq	$-0x4, %rbp
    0000014d: 	movq	%rbp, %rdx
    00000150: 	negq	%rdx
    00000153: 	shlq	$0x2, %rdx
    00000157: 	leaq	(%r8,%rdx), %rcx
    0000015b: 	subq	%rdx, %rbx
    0000015e: 	cmpq	%rbp, %rsi
    00000161: 	je	.Ltmp66 # Offset: 353
.Ltmp71:
    00000167: 	movq	%rsi, %rdx
    0000016a: 	subq	%rbp, %rdx
    0000016d: 	cmpq	%rbp, %r12
    00000170: 	je	.Ltmp67 # Offset: 368
    00000176: 	movq	DATAat0x274f0(%rip), %xmm5
    0000017e: 	shlq	$0x2, %rbp
    00000182: 	movq	DATAat0x27500(%rip), %xmm4
    0000018a: 	addq	%rbp, %rax
    0000018d: 	subq	%rbp, %r11
    00000190: 	movq	(%rax), %xmm2
    00000194: 	movq	-0x8(%r11), %xmm1
    0000019a: 	movdqa	%xmm2, %xmm0
    0000019e: 	movdqa	%xmm2, %xmm3
    000001a2: 	pshufd	$0xe1, %xmm1, %xmm1
    000001a7: 	psrld	$0x8, %xmm0
    000001ac: 	pslld	$0x8, %xmm3
    000001b1: 	pand	%xmm4, %xmm3
    000001b5: 	pand	%xmm5, %xmm0
    000001b9: 	pxor	%xmm3, %xmm0
    000001bd: 	movdqa	%xmm2, %xmm3
    000001c1: 	psrld	$0x18, %xmm3
    000001c6: 	pslld	$0x18, %xmm2
    000001cb: 	pxor	%xmm3, %xmm2
    000001cf: 	movdqa	%xmm1, %xmm3
    000001d3: 	pxor	%xmm2, %xmm0
    000001d7: 	pslld	$0x8, %xmm3
    000001dc: 	movdqa	%xmm1, %xmm2
    000001e0: 	psrld	$0x8, %xmm2
    000001e5: 	pand	%xmm4, %xmm3
    000001e9: 	pshufd	$0xe1, %xmm0, %xmm0
    000001ee: 	pand	%xmm5, %xmm2
    000001f2: 	pxor	%xmm3, %xmm2
    000001f6: 	movdqa	%xmm1, %xmm3
    000001fa: 	psrld	$0x18, %xmm3
    000001ff: 	pslld	$0x18, %xmm1
    00000204: 	pxor	%xmm3, %xmm1
    00000208: 	pxor	%xmm2, %xmm1
    0000020c: 	movq	%xmm1, (%rax)
    00000210: 	movq	%xmm0, -0x8(%r11)
    00000216: 	movq	%rdx, %r11
    00000219: 	andq	$-0x2, %r11
    0000021d: 	movq	%r11, %rax
    00000220: 	negq	%rax
    00000223: 	shlq	$0x2, %rax
    00000227: 	addq	%rax, %rcx
    0000022a: 	subq	%rax, %rbx
    0000022d: 	cmpq	%r11, %rdx
    00000230: 	je	.Ltmp66 # Offset: 560
.Ltmp67:
    00000232: 	movl	-0x3(%rcx), %edx
    00000235: 	movl	(%rbx), %eax
    00000237: 	movl	%edx, %r11d
    0000023a: 	movl	%edx, %ebp
    0000023c: 	shll	$0x18, %ebp
    0000023f: 	shrl	$0x18, %r11d
    00000243: 	xorl	%ebp, %r11d
    00000246: 	movl	%edx, %ebp
    00000248: 	shll	$0x8, %edx
    0000024b: 	shrl	$0x8, %ebp
    0000024e: 	andl	$0xff0000, %edx
    00000254: 	andl	$0xff00, %ebp
    0000025a: 	xorl	%ebp, %r11d
    0000025d: 	xorl	%r11d, %edx
    00000260: 	movl	%eax, %r11d
    00000263: 	movl	%edx, (%rbx)
    00000265: 	movl	%eax, %edx
    00000267: 	shll	$0x18, %r11d
    0000026b: 	shrl	$0x18, %edx
    0000026e: 	xorl	%r11d, %edx
    00000271: 	movl	%eax, %r11d
    00000274: 	shll	$0x8, %eax
    00000277: 	shrl	$0x8, %r11d
    0000027b: 	andl	$0xff0000, %eax
    00000280: 	andl	$0xff00, %r11d
    00000287: 	xorl	%r11d, %edx
    0000028a: 	xorl	%edx, %eax
    0000028c: 	movl	%eax, -0x3(%rcx)
.Ltmp66:
    0000028f: 	addq	%r10, %r8
    00000292: 	shlq	$0x2, %rsi
.Ltmp70:
    00000296: 	cmpq	%rsi, %rdi
    00000299: 	jle	.Ltmp68 # Offset: 665
    0000029b: 	movzbl	(%r9), %eax
    0000029f: 	movzbl	(%r8), %edx
    000002a3: 	movb	%dl, (%r9)
    000002a6: 	movb	%al, (%r8)
    000002a9: 	leaq	0x1(%rsi), %rax
    000002ad: 	cmpq	%rax, %rdi
    000002b0: 	jle	.Ltmp68 # Offset: 688
    000002b2: 	movzbl	0x1(%r9), %eax
    000002b7: 	movzbl	-0x1(%r8), %edx
    000002bc: 	movb	%dl, 0x1(%r9)
    000002c0: 	movb	%al, -0x1(%r8)
    000002c4: 	leaq	0x2(%rsi), %rax
    000002c8: 	cmpq	%rax, %rdi
    000002cb: 	jle	.Ltmp68 # Offset: 715
    000002cd: 	movzbl	0x2(%r9), %eax
    000002d2: 	movzbl	-0x2(%r8), %edx
    000002d7: 	addq	$0x3, %rsi
    000002db: 	movb	%dl, 0x2(%r9)
    000002df: 	movb	%al, -0x2(%r8)
    000002e3: 	cmpq	%rsi, %rdi
    000002e6: 	jle	.Ltmp68 # Offset: 742
    000002e8: 	movzbl	0x3(%r9), %eax
    000002ed: 	movzbl	-0x3(%r8), %edx
    000002f2: 	movb	%dl, 0x3(%r9)
    000002f6: 	movb	%al, -0x3(%r8)
.Ltmp68:
    000002fa: 	popq	%rbx
    000002fb: 	popq	%rbp
    000002fc: 	popq	%r12
    000002fe: 	retq # Offset: 766
    000002ff: 	nop # Size: 1
.Ltmp61:
    00000300: 	retq # Offset: 768
    00000301: 	nopl	(%rax) # Size: 7
.Ltmp63:
    00000308: 	movq	%r8, %r11
    0000030b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp69:
    00000310: 	movl	-0x3(%r11), %ecx
    00000314: 	movl	(%rax), %edx
    00000316: 	addq	$0x4, %rax
    0000031a: 	subq	$0x4, %r11
    0000031e: 	movl	%ecx, %ebx
    00000320: 	movl	%ecx, %ebp
    00000322: 	shll	$0x18, %ebp
    00000325: 	shrl	$0x18, %ebx
    00000328: 	xorl	%ebp, %ebx
    0000032a: 	movl	%ecx, %ebp
    0000032c: 	shll	$0x8, %ecx
    0000032f: 	shrl	$0x8, %ebp
    00000332: 	andl	$0xff0000, %ecx
    00000338: 	andl	$0xff00, %ebp
    0000033e: 	xorl	%ebp, %ebx
    00000340: 	xorl	%ebx, %ecx
    00000342: 	movl	%edx, %ebx
    00000344: 	movl	%ecx, -0x4(%rax)
    00000347: 	movl	%edx, %ecx
    00000349: 	shll	$0x18, %ebx
    0000034c: 	shrl	$0x18, %ecx
    0000034f: 	xorl	%ebx, %ecx
    00000351: 	movl	%edx, %ebx
    00000353: 	shll	$0x8, %edx
    00000356: 	shrl	$0x8, %ebx
    00000359: 	andl	$0xff0000, %edx
    0000035f: 	andl	$0xff00, %ebx
    00000365: 	xorl	%ebx, %ecx
    00000367: 	xorl	%ecx, %edx
    00000369: 	movl	%edx, 0x1(%r11)
    0000036d: 	cmpq	%rax, %r9
    00000370: 	jne	.Ltmp69 # Offset: 880
    00000372: 	jmp	.Ltmp66 # Offset: 882
    00000377: 	nopw	(%rax,%rax) # Size: 9
.Ltmp62:
    00000380: 	movq	%rax, %r9
    00000383: 	xorl	%esi, %esi
    00000385: 	jmp	.Ltmp70 # Offset: 901
.Ltmp64:
    0000038a: 	movq	%rax, %rbx
    0000038d: 	movq	%r8, %rcx
    00000390: 	xorl	%ebp, %ebp
    00000392: 	jmp	.Ltmp71 # Offset: 914
DWARF CFI Instructions:
    <empty>
End of Function "_Z13fast_reverse2IPhEvT_S1_"

Binary Function "_Z13fast_reverse3IPhEvT_S1_" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0x2840
  Size        : 0x396
  MaxSize     : 0x3a0
  Offset      : 0x2840
  Section     : .text
  Orc Section : .local.text._Z13fast_reverse3IPhEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp72 # Offset: 7
    0000000d: 	movq	%rsi, %rax
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rcx
    00000014: 	movq	%rsi, %r11
    00000017: 	subq	%rdi, %rax
    0000001a: 	leaq	-0x1(%rsi), %r8
    0000001e: 	movq	%rax, %r9
    00000021: 	shrq	$0x3f, %r9
    00000025: 	addq	%rax, %r9
    00000028: 	sarq	%r9
    0000002b: 	cmpq	$0xf, %rax
    0000002f: 	jle	.Ltmp73 # Offset: 47
    00000035: 	leaq	-0x8(%r9), %rdx
    00000039: 	movq	%r11, %rbx
    0000003c: 	movq	%rdx, %rsi
    0000003f: 	shrq	$0x3, %rsi
    00000043: 	addq	$0x1, %rsi
    00000047: 	leaq	(,%rsi,8), %rax
    0000004f: 	movq	%rax, %r10
    00000052: 	leaq	(%rdi,%rax), %rdi
    00000056: 	subq	%rax, %rbx
    00000059: 	negq	%r10
    0000005c: 	cmpq	%rbx, %rdi
    0000005f: 	jbe	.Ltmp74 # Offset: 95
    00000061: 	cmpq	%r11, %rcx
    00000064: 	jb	.Ltmp75 # Offset: 100
.Ltmp74:
    0000006a: 	cmpq	$0x7, %rdx
    0000006e: 	jbe	.Ltmp76 # Offset: 110
    00000074: 	movq	%rsi, %rbx
    00000077: 	movdqa	DATAat0x274f0(%rip), %xmm4
    0000007f: 	movq	%rcx, %rdx
    00000082: 	leaq	-0x10(%r11), %rax
    00000086: 	shrq	%rbx
    00000089: 	movdqa	DATAat0x27500(%rip), %xmm3
    00000091: 	shlq	$0x4, %rbx
    00000095: 	addq	%rcx, %rbx
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp77:
    000000a0: 	movdqu	(%rdx), %xmm1
    000000a4: 	addq	$0x10, %rdx
    000000a8: 	subq	$0x10, %rax
    000000ac: 	movdqa	%xmm1, %xmm0
    000000b0: 	movdqa	%xmm1, %xmm2
    000000b4: 	psrld	$0x8, %xmm0
    000000b9: 	pslld	$0x8, %xmm2
    000000be: 	pand	%xmm3, %xmm2
    000000c2: 	pand	%xmm4, %xmm0
    000000c6: 	pxor	%xmm2, %xmm0
    000000ca: 	movdqa	%xmm1, %xmm2
    000000ce: 	pslld	$0x18, %xmm2
    000000d3: 	psrld	$0x18, %xmm1
    000000d8: 	pxor	%xmm2, %xmm1
    000000dc: 	movq	0x18(%rax), %xmm2
    000000e1: 	pxor	%xmm1, %xmm0
    000000e5: 	movhps	0x10(%rax), %xmm2
    000000e9: 	pshufd	$0xb1, %xmm0, %xmm0
    000000ee: 	movdqa	%xmm2, %xmm1
    000000f2: 	movdqa	%xmm2, %xmm5
    000000f6: 	shufpd	$0x1, %xmm0, %xmm0
    000000fb: 	psrld	$0x8, %xmm1
    00000100: 	pslld	$0x8, %xmm5
    00000105: 	pand	%xmm3, %xmm5
    00000109: 	pand	%xmm4, %xmm1
    0000010d: 	pxor	%xmm5, %xmm1
    00000111: 	movdqa	%xmm2, %xmm5
    00000115: 	psrld	$0x18, %xmm5
    0000011a: 	pslld	$0x18, %xmm2
    0000011f: 	pxor	%xmm5, %xmm2
    00000123: 	pxor	%xmm2, %xmm1
    00000127: 	pshufd	$0xb1, %xmm1, %xmm1
    0000012c: 	movups	%xmm1, -0x10(%rdx)
    00000130: 	movups	%xmm0, 0x10(%rax)
    00000134: 	cmpq	%rbx, %rdx
    00000137: 	jne	.Ltmp77 # Offset: 311
    0000013d: 	movq	%rsi, %rdx
    00000140: 	andq	$-0x2, %rdx
    00000144: 	cmpq	%rdx, %rsi
    00000147: 	je	.Ltmp78 # Offset: 327
.Ltmp82:
    0000014d: 	movq	DATAat0x274f0(%rip), %xmm3
    00000155: 	movq	%rdx, %rax
    00000158: 	leaq	(%rcx,%rdx,8), %rdx
    0000015c: 	movq	DATAat0x27500(%rip), %xmm4
    00000164: 	movq	(%rdx), %xmm1
    00000168: 	notq	%rax
    0000016b: 	leaq	(%r11,%rax,8), %rax
    0000016f: 	movdqa	%xmm1, %xmm0
    00000173: 	movdqa	%xmm1, %xmm2
    00000177: 	psrld	$0x8, %xmm0
    0000017c: 	pslld	$0x8, %xmm2
    00000181: 	pand	%xmm3, %xmm0
    00000185: 	pand	%xmm4, %xmm2
    00000189: 	pxor	%xmm2, %xmm0
    0000018d: 	movdqa	%xmm1, %xmm2
    00000191: 	pslld	$0x18, %xmm2
    00000196: 	psrld	$0x18, %xmm1
    0000019b: 	pxor	%xmm2, %xmm1
    0000019f: 	movq	(%rax), %xmm2
    000001a3: 	pxor	%xmm1, %xmm0
    000001a7: 	movdqa	%xmm2, %xmm1
    000001ab: 	pshufd	$0xe1, %xmm0, %xmm0
    000001b0: 	psrld	$0x8, %xmm1
    000001b5: 	pand	%xmm3, %xmm1
    000001b9: 	movdqa	%xmm2, %xmm3
    000001bd: 	pslld	$0x8, %xmm3
    000001c2: 	pand	%xmm4, %xmm3
    000001c6: 	pxor	%xmm3, %xmm1
    000001ca: 	movdqa	%xmm2, %xmm3
    000001ce: 	psrld	$0x18, %xmm3
    000001d3: 	pslld	$0x18, %xmm2
    000001d8: 	pxor	%xmm3, %xmm2
    000001dc: 	pxor	%xmm2, %xmm1
    000001e0: 	pshufd	$0xe1, %xmm1, %xmm1
    000001e5: 	movq	%xmm1, (%rdx)
    000001e9: 	movq	%xmm0, (%rax)
.Ltmp78:
    000001ed: 	addq	%r10, %r8
    000001f0: 	shlq	$0x3, %rsi
.Ltmp81:
    000001f4: 	cmpq	%rsi, %r9
    000001f7: 	jle	.Ltmp79 # Offset: 503
    000001fd: 	movzbl	(%rdi), %eax
    00000200: 	movzbl	(%r8), %edx
    00000204: 	movb	%dl, (%rdi)
    00000206: 	movb	%al, (%r8)
    00000209: 	leaq	0x1(%rsi), %rax
    0000020d: 	cmpq	%rax, %r9
    00000210: 	jle	.Ltmp79 # Offset: 528
    00000216: 	movzbl	0x1(%rdi), %eax
    0000021a: 	movzbl	-0x1(%r8), %edx
    0000021f: 	movb	%dl, 0x1(%rdi)
    00000222: 	movb	%al, -0x1(%r8)
    00000226: 	leaq	0x2(%rsi), %rax
    0000022a: 	cmpq	%rax, %r9
    0000022d: 	jle	.Ltmp79 # Offset: 557
    00000233: 	movzbl	0x2(%rdi), %eax
    00000237: 	movzbl	-0x2(%r8), %edx
    0000023c: 	movb	%dl, 0x2(%rdi)
    0000023f: 	movb	%al, -0x2(%r8)
    00000243: 	leaq	0x3(%rsi), %rax
    00000247: 	cmpq	%rax, %r9
    0000024a: 	jle	.Ltmp79 # Offset: 586
    0000024c: 	movzbl	0x3(%rdi), %eax
    00000250: 	movzbl	-0x3(%r8), %edx
    00000255: 	movb	%dl, 0x3(%rdi)
    00000258: 	movb	%al, -0x3(%r8)
    0000025c: 	leaq	0x4(%rsi), %rax
    00000260: 	cmpq	%rax, %r9
    00000263: 	jle	.Ltmp79 # Offset: 611
    00000265: 	movzbl	0x4(%rdi), %eax
    00000269: 	movzbl	-0x4(%r8), %edx
    0000026e: 	movb	%dl, 0x4(%rdi)
    00000271: 	movb	%al, -0x4(%r8)
    00000275: 	leaq	0x5(%rsi), %rax
    00000279: 	cmpq	%rax, %r9
    0000027c: 	jle	.Ltmp79 # Offset: 636
    0000027e: 	movzbl	0x5(%rdi), %eax
    00000282: 	movzbl	-0x5(%r8), %edx
    00000287: 	movb	%dl, 0x5(%rdi)
    0000028a: 	movb	%al, -0x5(%r8)
    0000028e: 	leaq	0x6(%rsi), %rax
    00000292: 	cmpq	%rax, %r9
    00000295: 	jle	.Ltmp79 # Offset: 661
    00000297: 	movzbl	0x6(%rdi), %eax
    0000029b: 	movzbl	-0x6(%r8), %edx
    000002a0: 	addq	$0x7, %rsi
    000002a4: 	movb	%dl, 0x6(%rdi)
    000002a7: 	movb	%al, -0x6(%r8)
    000002ab: 	cmpq	%rsi, %r9
    000002ae: 	jle	.Ltmp79 # Offset: 686
    000002b0: 	movzbl	0x7(%rdi), %eax
    000002b4: 	movzbl	-0x7(%r8), %edx
    000002b9: 	movb	%dl, 0x7(%rdi)
    000002bc: 	movb	%al, -0x7(%r8)
.Ltmp79:
    000002c0: 	popq	%rbx
    000002c1: 	retq # Offset: 705
    000002c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp75:
    000002c8: 	movq	DATAat0x274f0(%rip), %xmm5
    000002d0: 	movq	%r8, %rax
    000002d3: 	movq	DATAat0x27500(%rip), %xmm4
    000002db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp80:
    000002e0: 	movq	(%rcx), %xmm1
    000002e4: 	addq	$0x8, %rcx
    000002e8: 	subq	$0x8, %rax
    000002ec: 	movdqa	%xmm1, %xmm0
    000002f0: 	movdqa	%xmm1, %xmm2
    000002f4: 	psrld	$0x8, %xmm0
    000002f9: 	pslld	$0x8, %xmm2
    000002fe: 	pand	%xmm4, %xmm2
    00000302: 	pand	%xmm5, %xmm0
    00000306: 	pxor	%xmm2, %xmm0
    0000030a: 	movdqa	%xmm1, %xmm2
    0000030e: 	psrld	$0x18, %xmm2
    00000313: 	pslld	$0x18, %xmm1
    00000318: 	pxor	%xmm2, %xmm1
    0000031c: 	movq	0x1(%rax), %xmm2
    00000321: 	pxor	%xmm1, %xmm0
    00000325: 	movdqa	%xmm2, %xmm3
    00000329: 	movdqa	%xmm2, %xmm1
    0000032d: 	pshufd	$0xe1, %xmm0, %xmm0
    00000332: 	pslld	$0x8, %xmm1
    00000337: 	psrld	$0x8, %xmm3
    0000033c: 	pand	%xmm5, %xmm3
    00000340: 	pand	%xmm4, %xmm1
    00000344: 	pxor	%xmm3, %xmm1
    00000348: 	movdqa	%xmm2, %xmm3
    0000034c: 	pslld	$0x18, %xmm3
    00000351: 	psrld	$0x18, %xmm2
    00000356: 	pxor	%xmm3, %xmm2
    0000035a: 	pxor	%xmm2, %xmm1
    0000035e: 	pshufd	$0xe1, %xmm1, %xmm1
    00000363: 	movq	%xmm1, -0x8(%rcx)
    00000368: 	movq	%xmm0, 0x1(%rax)
    0000036d: 	cmpq	%rcx, %rdi
    00000370: 	jne	.Ltmp80 # Offset: 880
    00000376: 	jmp	.Ltmp78 # Offset: 886
    0000037b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp72:
    00000380: 	retq # Offset: 896
    00000381: 	nopl	(%rax) # Size: 7
.Ltmp73:
    00000388: 	xorl	%esi, %esi
    0000038a: 	jmp	.Ltmp81 # Offset: 906
.Ltmp76:
    0000038f: 	xorl	%edx, %edx
    00000391: 	jmp	.Ltmp82 # Offset: 913
DWARF CFI Instructions:
    <empty>
End of Function "_Z13fast_reverse3IPhEvT_S1_"

Binary Function "_ZSt12reverse_copyI20BidirectionalPointerIhES1_ET0_T_S3_S2_" after disassembly {
  Number      : 50
  State       : disassembled
  Address     : 0x2be0
  Size        : 0x38
  MaxSize     : 0x40
  Offset      : 0x2be0
  Section     : .text
  Orc Section : .local.text._ZSt12reverse_copyI20BidirectionalPointerIhES1_ET0_T_S3_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %rax
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp83 # Offset: 10
    0000000c: 	leaq	-0x1(%rsi), %rax
    00000010: 	movq	%rdx, %rcx
    00000013: 	nopl	(%rax,%rax) # Size: 5
.Ltmp84:
    00000018: 	movzbl	(%rax), %r8d
    0000001c: 	addq	$0x1, %rcx
    00000020: 	movb	%r8b, -0x1(%rcx)
    00000024: 	movq	%rax, %r8
    00000027: 	subq	$0x1, %rax
    0000002b: 	cmpq	%rdi, %r8
    0000002e: 	jne	.Ltmp84 # Offset: 46
    00000030: 	subq	%rdi, %rsi
    00000033: 	leaq	(%rdx,%rsi), %rax
.Ltmp83:
    00000037: 	retq # Offset: 55
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt12reverse_copyI20BidirectionalPointerIhES1_ET0_T_S3_S2_"

Binary Function "_Z22my_simple_reverse_copyI20BidirectionalPointerIhES1_EvT_S2_T0_" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0x2c20
  Size        : 0x27
  MaxSize     : 0x30
  Offset      : 0x2c20
  Section     : .text
  Orc Section : .local.text._Z22my_simple_reverse_copyI20BidirectionalPointerIhES1_EvT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp85 # Offset: 7
    00000009: 	subq	$0x1, %rsi
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp86:
    00000010: 	movzbl	(%rsi), %eax
    00000013: 	addq	$0x1, %rdx
    00000017: 	movb	%al, -0x1(%rdx)
    0000001a: 	movq	%rsi, %rax
    0000001d: 	subq	$0x1, %rsi
    00000021: 	cmpq	%rdi, %rax
    00000024: 	jne	.Ltmp86 # Offset: 36
.Ltmp85:
    00000026: 	retq # Offset: 38
DWARF CFI Instructions:
    <empty>
End of Function "_Z22my_simple_reverse_copyI20BidirectionalPointerIhES1_EvT_S2_T0_"

Binary Function "_Z20my_fast_reverse_copyI20BidirectionalPointerIhES1_EvT_S2_T0_" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0x2c50
  Size        : 0x27
  MaxSize     : 0x30
  Offset      : 0x2c50
  Section     : .text
  Orc Section : .local.text._Z20my_fast_reverse_copyI20BidirectionalPointerIhES1_EvT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp87 # Offset: 7
    00000009: 	subq	$0x1, %rsi
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp88:
    00000010: 	movzbl	(%rsi), %eax
    00000013: 	addq	$0x1, %rdx
    00000017: 	movb	%al, -0x1(%rdx)
    0000001a: 	movq	%rsi, %rax
    0000001d: 	subq	$0x1, %rsi
    00000021: 	cmpq	%rdi, %rax
    00000024: 	jne	.Ltmp88 # Offset: 36
.Ltmp87:
    00000026: 	retq # Offset: 38
DWARF CFI Instructions:
    <empty>
End of Function "_Z20my_fast_reverse_copyI20BidirectionalPointerIhES1_EvT_S2_T0_"

Binary Function "_ZSt12reverse_copyIPhS0_ET0_T_S2_S1_" after disassembly {
  Number      : 53
  State       : disassembled
  Address     : 0x2c80
  Size        : 0x34
  MaxSize     : 0x40
  Offset      : 0x2c80
  Section     : .text
  Orc Section : .local.text._ZSt12reverse_copyIPhS0_ET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp89 # Offset: 7
    00000009: 	movq	%rdx, %r8
    0000000c: 	movq	%rsi, %rcx
    0000000f: 	nop # Size: 1
.Ltmp90:
    00000010: 	movzbl	-0x1(%rcx), %r9d
    00000015: 	subq	$0x1, %rcx
    00000019: 	addq	$0x1, %r8
    0000001d: 	movb	%r9b, -0x1(%r8)
    00000021: 	cmpq	%rcx, %rdi
    00000024: 	jne	.Ltmp90 # Offset: 36
    00000026: 	subq	%rdi, %rsi
    00000029: 	leaq	(%rdx,%rsi), %rax
    0000002d: 	retq # Offset: 45
    0000002e: 	nop # Size: 2
.Ltmp89:
    00000030: 	movq	%rdx, %rax
    00000033: 	retq # Offset: 51
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt12reverse_copyIPhS0_ET0_T_S2_S1_"

Binary Function "_Z22my_simple_reverse_copyIPhS0_EvT_S1_T0_" after disassembly {
  Number      : 54
  State       : disassembled
  Address     : 0x2cc0
  Size        : 0x34
  MaxSize     : 0x40
  Offset      : 0x2cc0
  Section     : .text
  Orc Section : .local.text._Z22my_simple_reverse_copyIPhS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp91 # Offset: 7
    00000009: 	movq	%rsi, %rcx
    0000000c: 	leaq	-0x1(%rsi), %rax
    00000010: 	subq	%rdi, %rcx
    00000013: 	testq	%rcx, %rcx
    00000016: 	jle	.Ltmp91 # Offset: 22
    00000018: 	notq	%rcx
    0000001b: 	addq	%rcx, %rsi
    0000001e: 	nop # Size: 2
.Ltmp92:
    00000020: 	movzbl	(%rax), %ecx
    00000023: 	subq	$0x1, %rax
    00000027: 	addq	$0x1, %rdx
    0000002b: 	movb	%cl, -0x1(%rdx)
    0000002e: 	cmpq	%rax, %rsi
    00000031: 	jne	.Ltmp92 # Offset: 49
.Ltmp91:
    00000033: 	retq # Offset: 51
DWARF CFI Instructions:
    <empty>
End of Function "_Z22my_simple_reverse_copyIPhS0_EvT_S1_T0_"

Binary Function "_Z18fast_reverse_copy2IPhS0_EvT_S1_T0_" after disassembly {
  Number      : 55
  State       : disassembled
  Address     : 0x2d00
  Size        : 0x287
  MaxSize     : 0x290
  Offset      : 0x2d00
  Section     : .text
  Orc Section : .local.text._Z18fast_reverse_copy2IPhS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp93 # Offset: 7
    0000000d: 	movq	%rsi, %r8
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %rax
    00000015: 	subq	%rdi, %r8
    00000018: 	pushq	%rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rsi, %rbx
    0000001d: 	leaq	-0x1(%rsi), %rsi
    00000021: 	cmpq	$0x3, %r8
    00000025: 	jle	.Ltmp94 # Offset: 37
    0000002b: 	leaq	-0x4(%r8), %r10
    0000002f: 	movq	%rbx, %r11
    00000032: 	movq	%r10, %r12
    00000035: 	shrq	$0x2, %r12
    00000039: 	leaq	0x1(%r12), %rcx
    0000003e: 	leaq	(,%rcx,4), %rdx
    00000046: 	subq	%rdx, %r11
    00000049: 	leaq	(%rax,%rdx), %rdi
    0000004d: 	movq	%rdx, %r9
    00000050: 	negq	%r9
    00000053: 	cmpq	%r11, %rdi
    00000056: 	setbe	%dl
    00000059: 	cmpq	%rax, %rbx
    0000005c: 	setbe	%r11b
    00000060: 	orb	%r11b, %dl
    00000063: 	je	.Ltmp95 # Offset: 99
    00000069: 	cmpq	$0x3, %r10
    0000006d: 	jbe	.Ltmp95 # Offset: 109
    00000073: 	cmpq	$0xb, %r10
    00000077: 	jbe	.Ltmp96 # Offset: 119
    0000007d: 	movq	%rcx, %r11
    00000080: 	movdqa	DATAat0x274f0(%rip), %xmm4
    00000088: 	leaq	-0x10(%rbx), %r10
    0000008c: 	movq	%rax, %rdx
    0000008f: 	shrq	$0x2, %r11
    00000093: 	movdqa	DATAat0x27500(%rip), %xmm3
    0000009b: 	shlq	$0x4, %r11
    0000009f: 	addq	%rax, %r11
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp97:
    000000a8: 	movdqu	(%r10), %xmm5
    000000ad: 	addq	$0x10, %rdx
    000000b1: 	subq	$0x10, %r10
    000000b5: 	pshufd	$0x1b, %xmm5, %xmm0
    000000ba: 	movdqa	%xmm0, %xmm1
    000000be: 	movdqa	%xmm0, %xmm2
    000000c2: 	psrld	$0x8, %xmm1
    000000c7: 	pslld	$0x8, %xmm2
    000000cc: 	pand	%xmm3, %xmm2
    000000d0: 	pand	%xmm4, %xmm1
    000000d4: 	pxor	%xmm2, %xmm1
    000000d8: 	movdqa	%xmm0, %xmm2
    000000dc: 	psrld	$0x18, %xmm2
    000000e1: 	pslld	$0x18, %xmm0
    000000e6: 	pxor	%xmm2, %xmm0
    000000ea: 	pxor	%xmm1, %xmm0
    000000ee: 	movups	%xmm0, -0x10(%rdx)
    000000f2: 	cmpq	%r11, %rdx
    000000f5: 	jne	.Ltmp97 # Offset: 245
    000000f7: 	movq	%rcx, %rdx
    000000fa: 	movq	%rsi, %r10
    000000fd: 	andq	$-0x4, %rdx
    00000101: 	leaq	(,%rdx,4), %rbp
    00000109: 	leaq	(%rax,%rbp), %r11
    0000010d: 	subq	%rbp, %r10
    00000110: 	cmpq	%rdx, %rcx
    00000113: 	je	.Ltmp98 # Offset: 275
.Ltmp103:
    00000119: 	movq	%rcx, %rbp
    0000011c: 	subq	%rdx, %rbp
    0000011f: 	cmpq	%rdx, %r12
    00000122: 	je	.Ltmp99 # Offset: 290
    00000124: 	movq	DATAat0x274f0(%rip), %xmm2
    0000012c: 	negq	%rdx
    0000012f: 	movq	DATAat0x27500(%rip), %xmm3
    00000137: 	shlq	$0x2, %rdx
    0000013b: 	movq	-0x8(%rbx,%rdx), %xmm0
    00000141: 	subq	%rdx, %rax
    00000144: 	pshufd	$0xe1, %xmm0, %xmm0
    00000149: 	movdqa	%xmm0, %xmm1
    0000014d: 	psrld	$0x8, %xmm1
    00000152: 	pand	%xmm2, %xmm1
    00000156: 	movdqa	%xmm0, %xmm2
    0000015a: 	pslld	$0x8, %xmm2
    0000015f: 	pand	%xmm3, %xmm2
    00000163: 	pxor	%xmm2, %xmm1
    00000167: 	movdqa	%xmm0, %xmm2
    0000016b: 	psrld	$0x18, %xmm2
    00000170: 	pslld	$0x18, %xmm0
    00000175: 	pxor	%xmm2, %xmm0
    00000179: 	pxor	%xmm1, %xmm0
    0000017d: 	movq	%xmm0, (%rax)
    00000181: 	movq	%rbp, %rax
    00000184: 	andq	$-0x2, %rax
    00000188: 	leaq	(,%rax,4), %rdx
    00000190: 	addq	%rdx, %r11
    00000193: 	subq	%rdx, %r10
    00000196: 	cmpq	%rax, %rbp
    00000199: 	je	.Ltmp98 # Offset: 409
.Ltmp99:
    0000019b: 	movl	-0x3(%r10), %eax
    0000019f: 	movl	%eax, %edx
    000001a1: 	movl	%eax, %r10d
    000001a4: 	shll	$0x18, %r10d
    000001a8: 	shrl	$0x18, %edx
    000001ab: 	xorl	%r10d, %edx
    000001ae: 	movl	%eax, %r10d
    000001b1: 	shll	$0x8, %eax
    000001b4: 	shrl	$0x8, %r10d
    000001b8: 	andl	$0xff0000, %eax
    000001bd: 	andl	$0xff00, %r10d
    000001c4: 	xorl	%r10d, %edx
    000001c7: 	xorl	%edx, %eax
    000001c9: 	movl	%eax, (%r11)
.Ltmp98:
    000001cc: 	shlq	$0x2, %rcx
    000001d0: 	addq	%r9, %rsi
.Ltmp102:
    000001d3: 	cmpq	%rcx, %r8
    000001d6: 	jle	.Ltmp100 # Offset: 470
    000001d8: 	movzbl	(%rsi), %eax
    000001db: 	movb	%al, (%rdi)
    000001dd: 	leaq	0x1(%rcx), %rax
    000001e1: 	cmpq	%rax, %r8
    000001e4: 	jle	.Ltmp100 # Offset: 484
    000001e6: 	movzbl	-0x1(%rsi), %eax
    000001ea: 	movb	%al, 0x1(%rdi)
    000001ed: 	leaq	0x2(%rcx), %rax
    000001f1: 	cmpq	%rax, %r8
    000001f4: 	jle	.Ltmp100 # Offset: 500
    000001f6: 	movzbl	-0x2(%rsi), %eax
    000001fa: 	addq	$0x3, %rcx
    000001fe: 	movb	%al, 0x2(%rdi)
    00000201: 	cmpq	%rcx, %r8
    00000204: 	jle	.Ltmp100 # Offset: 516
    00000206: 	movzbl	-0x3(%rsi), %eax
    0000020a: 	movb	%al, 0x3(%rdi)
.Ltmp100:
    0000020d: 	popq	%rbx
    0000020e: 	popq	%rbp
    0000020f: 	popq	%r12
    00000211: 	retq # Offset: 529
    00000212: 	nopw	(%rax,%rax) # Size: 6
.Ltmp93:
    00000218: 	retq # Offset: 536
    00000219: 	nopl	(%rax) # Size: 7
.Ltmp95:
    00000220: 	movq	%rsi, %rbx
    00000223: 	nopl	(%rax,%rax) # Size: 5
.Ltmp101:
    00000228: 	movl	-0x3(%rbx), %edx
    0000022b: 	addq	$0x4, %rax
    0000022f: 	subq	$0x4, %rbx
    00000233: 	movl	%edx, %r10d
    00000236: 	movl	%edx, %r11d
    00000239: 	shll	$0x18, %r11d
    0000023d: 	shrl	$0x18, %r10d
    00000241: 	xorl	%r11d, %r10d
    00000244: 	movl	%edx, %r11d
    00000247: 	shll	$0x8, %edx
    0000024a: 	shrl	$0x8, %r11d
    0000024e: 	andl	$0xff0000, %edx
    00000254: 	andl	$0xff00, %r11d
    0000025b: 	xorl	%r11d, %r10d
    0000025e: 	xorl	%r10d, %edx
    00000261: 	movl	%edx, -0x4(%rax)
    00000264: 	cmpq	%rax, %rdi
    00000267: 	jne	.Ltmp101 # Offset: 615
    00000269: 	jmp	.Ltmp98 # Offset: 617
    0000026e: 	nop # Size: 2
.Ltmp94:
    00000270: 	movq	%rdx, %rdi
    00000273: 	xorl	%ecx, %ecx
    00000275: 	jmp	.Ltmp102 # Offset: 629
.Ltmp96:
    0000027a: 	movq	%rsi, %r10
    0000027d: 	movq	%rax, %r11
    00000280: 	xorl	%edx, %edx
    00000282: 	jmp	.Ltmp103 # Offset: 642
DWARF CFI Instructions:
    <empty>
End of Function "_Z18fast_reverse_copy2IPhS0_EvT_S1_T0_"

Binary Function "_Z18fast_reverse_copy3IPhS0_EvT_S1_T0_" after disassembly {
  Number      : 56
  State       : disassembled
  Address     : 0x2f90
  Size        : 0x261
  MaxSize     : 0x270
  Offset      : 0x2f90
  Section     : .text
  Orc Section : .local.text._Z18fast_reverse_copy3IPhS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp104 # Offset: 7
    0000000d: 	movq	%rsi, %r9
    00000010: 	pushq	%rbx
    00000011: 	movq	%rsi, %r8
    00000014: 	movq	%rdx, %rcx
    00000017: 	subq	%rdi, %r9
    0000001a: 	leaq	-0x1(%rsi), %r10
    0000001e: 	cmpq	$0x7, %r9
    00000022: 	jle	.Ltmp105 # Offset: 34
    00000028: 	leaq	-0x8(%r9), %rdx
    0000002c: 	movq	%r8, %rbx
    0000002f: 	movq	%rdx, %rsi
    00000032: 	shrq	$0x3, %rsi
    00000036: 	addq	$0x1, %rsi
    0000003a: 	leaq	(,%rsi,8), %rax
    00000042: 	movq	%rax, %r11
    00000045: 	leaq	(%rcx,%rax), %rdi
    00000049: 	subq	%rax, %rbx
    0000004c: 	negq	%r11
    0000004f: 	cmpq	%rbx, %rdi
    00000052: 	jbe	.Ltmp106 # Offset: 82
    00000054: 	cmpq	%rcx, %r8
    00000057: 	ja	.Ltmp107 # Offset: 87
.Ltmp106:
    0000005d: 	cmpq	$0x7, %rdx
    00000061: 	jbe	.Ltmp108 # Offset: 97
    00000067: 	movq	%rsi, %rbx
    0000006a: 	movdqa	DATAat0x274f0(%rip), %xmm4
    00000072: 	leaq	-0x8(%r8), %rdx
    00000076: 	movq	%rcx, %rax
    00000079: 	shrq	%rbx
    0000007c: 	movdqa	DATAat0x27500(%rip), %xmm3
    00000084: 	shlq	$0x4, %rbx
    00000088: 	addq	%rcx, %rbx
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp109:
    00000090: 	movq	(%rdx), %xmm1
    00000094: 	addq	$0x10, %rax
    00000098: 	subq	$0x10, %rdx
    0000009c: 	movhps	0x8(%rdx), %xmm1
    000000a0: 	movdqa	%xmm1, %xmm0
    000000a4: 	movdqa	%xmm1, %xmm2
    000000a8: 	psrld	$0x8, %xmm0
    000000ad: 	pslld	$0x8, %xmm2
    000000b2: 	pand	%xmm3, %xmm2
    000000b6: 	pand	%xmm4, %xmm0
    000000ba: 	pxor	%xmm2, %xmm0
    000000be: 	movdqa	%xmm1, %xmm2
    000000c2: 	psrld	$0x18, %xmm2
    000000c7: 	pslld	$0x18, %xmm1
    000000cc: 	pxor	%xmm2, %xmm1
    000000d0: 	pxor	%xmm1, %xmm0
    000000d4: 	pshufd	$0xb1, %xmm0, %xmm0
    000000d9: 	movups	%xmm0, -0x10(%rax)
    000000dd: 	cmpq	%rax, %rbx
    000000e0: 	jne	.Ltmp109 # Offset: 224
    000000e2: 	movq	%rsi, %rax
    000000e5: 	andq	$-0x2, %rax
    000000e9: 	cmpq	%rax, %rsi
    000000ec: 	je	.Ltmp110 # Offset: 236
.Ltmp114:
    000000ee: 	movq	DATAat0x274f0(%rip), %xmm2
    000000f6: 	movq	%rax, %rdx
    000000f9: 	movq	DATAat0x27500(%rip), %xmm3
    00000101: 	notq	%rdx
    00000104: 	movq	(%r8,%rdx,8), %xmm1
    0000010a: 	movdqa	%xmm1, %xmm0
    0000010e: 	psrld	$0x8, %xmm0
    00000113: 	pand	%xmm2, %xmm0
    00000117: 	movdqa	%xmm1, %xmm2
    0000011b: 	pslld	$0x8, %xmm2
    00000120: 	pand	%xmm3, %xmm2
    00000124: 	pxor	%xmm2, %xmm0
    00000128: 	movdqa	%xmm1, %xmm2
    0000012c: 	psrld	$0x18, %xmm2
    00000131: 	pslld	$0x18, %xmm1
    00000136: 	pxor	%xmm2, %xmm1
    0000013a: 	pxor	%xmm1, %xmm0
    0000013e: 	pshufd	$0xe1, %xmm0, %xmm0
    00000143: 	movq	%xmm0, (%rcx,%rax,8)
.Ltmp110:
    00000148: 	shlq	$0x3, %rsi
    0000014c: 	addq	%r11, %r10
.Ltmp113:
    0000014f: 	cmpq	%rsi, %r9
    00000152: 	jle	.Ltmp111 # Offset: 338
    00000154: 	movzbl	(%r10), %eax
    00000158: 	movb	%al, (%rdi)
    0000015a: 	leaq	0x1(%rsi), %rax
    0000015e: 	cmpq	%rax, %r9
    00000161: 	jle	.Ltmp111 # Offset: 353
    00000163: 	movzbl	-0x1(%r10), %eax
    00000168: 	movb	%al, 0x1(%rdi)
    0000016b: 	leaq	0x2(%rsi), %rax
    0000016f: 	cmpq	%rax, %r9
    00000172: 	jle	.Ltmp111 # Offset: 370
    00000174: 	movzbl	-0x2(%r10), %eax
    00000179: 	movb	%al, 0x2(%rdi)
    0000017c: 	leaq	0x3(%rsi), %rax
    00000180: 	cmpq	%rax, %r9
    00000183: 	jle	.Ltmp111 # Offset: 387
    00000185: 	movzbl	-0x3(%r10), %eax
    0000018a: 	movb	%al, 0x3(%rdi)
    0000018d: 	leaq	0x4(%rsi), %rax
    00000191: 	cmpq	%rax, %r9
    00000194: 	jle	.Ltmp111 # Offset: 404
    00000196: 	movzbl	-0x4(%r10), %eax
    0000019b: 	movb	%al, 0x4(%rdi)
    0000019e: 	leaq	0x5(%rsi), %rax
    000001a2: 	cmpq	%rax, %r9
    000001a5: 	jle	.Ltmp111 # Offset: 421
    000001a7: 	movzbl	-0x5(%r10), %eax
    000001ac: 	movb	%al, 0x5(%rdi)
    000001af: 	leaq	0x6(%rsi), %rax
    000001b3: 	cmpq	%rax, %r9
    000001b6: 	jle	.Ltmp111 # Offset: 438
    000001b8: 	movzbl	-0x6(%r10), %eax
    000001bd: 	addq	$0x7, %rsi
    000001c1: 	movb	%al, 0x6(%rdi)
    000001c4: 	cmpq	%rsi, %r9
    000001c7: 	jle	.Ltmp111 # Offset: 455
    000001c9: 	movzbl	-0x7(%r10), %eax
    000001ce: 	movb	%al, 0x7(%rdi)
.Ltmp111:
    000001d1: 	popq	%rbx
    000001d2: 	retq # Offset: 466
    000001d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp107:
    000001d8: 	movq	DATAat0x274f0(%rip), %xmm4
    000001e0: 	movq	%r10, %rax
    000001e3: 	movq	DATAat0x27500(%rip), %xmm3
    000001eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp112:
    000001f0: 	movq	-0x7(%rax), %xmm1
    000001f5: 	addq	$0x8, %rcx
    000001f9: 	subq	$0x8, %rax
    000001fd: 	movdqa	%xmm1, %xmm0
    00000201: 	movdqa	%xmm1, %xmm2
    00000205: 	pslld	$0x8, %xmm0
    0000020a: 	psrld	$0x8, %xmm2
    0000020f: 	pand	%xmm4, %xmm2
    00000213: 	pand	%xmm3, %xmm0
    00000217: 	pxor	%xmm2, %xmm0
    0000021b: 	movdqa	%xmm1, %xmm2
    0000021f: 	psrld	$0x18, %xmm2
    00000224: 	pslld	$0x18, %xmm1
    00000229: 	pxor	%xmm2, %xmm1
    0000022d: 	pxor	%xmm1, %xmm0
    00000231: 	pshufd	$0xe1, %xmm0, %xmm0
    00000236: 	movq	%xmm0, -0x8(%rcx)
    0000023b: 	cmpq	%rcx, %rdi
    0000023e: 	jne	.Ltmp112 # Offset: 574
    00000240: 	jmp	.Ltmp110 # Offset: 576
    00000245: 	nopl	(%rax) # Size: 3
.Ltmp104:
    00000248: 	retq # Offset: 584
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp105:
    00000250: 	movq	%rdx, %rdi
    00000253: 	xorl	%esi, %esi
    00000255: 	jmp	.Ltmp113 # Offset: 597
.Ltmp108:
    0000025a: 	xorl	%eax, %eax
    0000025c: 	jmp	.Ltmp114 # Offset: 604
DWARF CFI Instructions:
    <empty>
End of Function "_Z18fast_reverse_copy3IPhS0_EvT_S1_T0_"

Binary Function "_ZSt7reverseI20BidirectionalPointerIsEEvT_S2_" after disassembly {
  Number      : 57
  State       : disassembled
  Address     : 0x3200
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x3200
  Section     : .text
  Orc Section : .local.text._ZSt7reverseI20BidirectionalPointerIsEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	endbr64
    00000004: 	jmp	.Ltmp115 # Offset: 4
    00000006: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp117:
    00000010: 	subq	$0x2, %rsi
    00000014: 	cmpq	%rsi, %rdi
    00000017: 	je	.Ltmp116 # Offset: 23
    00000019: 	movzwl	(%rdi), %eax
    0000001c: 	movzwl	(%rsi), %edx
    0000001f: 	addq	$0x2, %rdi
    00000023: 	movw	%dx, -0x2(%rdi)
    00000027: 	movw	%ax, (%rsi)
.Ltmp115:
    0000002a: 	cmpq	%rsi, %rdi
    0000002d: 	jne	.Ltmp117 # Offset: 45
.Ltmp116:
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt7reverseI20BidirectionalPointerIsEEvT_S2_"

Binary Function "_Z17my_simple_reverseI20BidirectionalPointerIsEEvT_S2_" after disassembly {
  Number      : 58
  State       : disassembled
  Address     : 0x3230
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x3230
  Section     : .text
  Orc Section : .local.text._Z17my_simple_reverseI20BidirectionalPointerIsEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp118 # Offset: 7
    00000009: 	nopl	(%rax) # Size: 7
.Ltmp119:
    00000010: 	subq	$0x2, %rsi
    00000014: 	cmpq	%rdi, %rsi
    00000017: 	je	.Ltmp118 # Offset: 23
    00000019: 	movzwl	(%rsi), %edx
    0000001c: 	movzwl	(%rdi), %eax
    0000001f: 	addq	$0x2, %rdi
    00000023: 	movw	%dx, -0x2(%rdi)
    00000027: 	movw	%ax, (%rsi)
    0000002a: 	cmpq	%rdi, %rsi
    0000002d: 	jne	.Ltmp119 # Offset: 45
.Ltmp118:
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_Z17my_simple_reverseI20BidirectionalPointerIsEEvT_S2_"

Binary Function "_Z15my_fast_reverseI20BidirectionalPointerIsEEvT_S2_" after disassembly {
  Number      : 59
  State       : disassembled
  Address     : 0x3260
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x3260
  Section     : .text
  Orc Section : .local.text._Z15my_fast_reverseI20BidirectionalPointerIsEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp120 # Offset: 7
    00000009: 	nopl	(%rax) # Size: 7
.Ltmp121:
    00000010: 	subq	$0x2, %rsi
    00000014: 	cmpq	%rdi, %rsi
    00000017: 	je	.Ltmp120 # Offset: 23
    00000019: 	movzwl	(%rsi), %edx
    0000001c: 	movzwl	(%rdi), %eax
    0000001f: 	addq	$0x2, %rdi
    00000023: 	movw	%dx, -0x2(%rdi)
    00000027: 	movw	%ax, (%rsi)
    0000002a: 	cmpq	%rdi, %rsi
    0000002d: 	jne	.Ltmp121 # Offset: 45
.Ltmp120:
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_Z15my_fast_reverseI20BidirectionalPointerIsEEvT_S2_"

Binary Function "_ZSt7reverseIPsEvT_S1_" after disassembly {
  Number      : 60
  State       : disassembled
  Address     : 0x3290
  Size        : 0x11c
  MaxSize     : 0x120
  Offset      : 0x3290
  Section     : .text
  Orc Section : .local.text._ZSt7reverseIPsEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp122 # Offset: 10
    00000010: 	leaq	-0x2(%rsi), %rcx
    00000014: 	cmpq	%rcx, %rdi
    00000017: 	jae	.Ltmp122 # Offset: 23
    0000001d: 	leaq	-0x3(%rsi), %r8
    00000021: 	movq	%rdi, %rdx
    00000024: 	movq	%rsi, %r10
    00000027: 	subq	%rdi, %r8
    0000002a: 	movq	%r8, %rdi
    0000002d: 	shrq	$0x2, %rdi
    00000031: 	addq	$0x1, %rdi
    00000035: 	leaq	(%rdi,%rdi), %r9
    00000039: 	subq	%r9, %r10
    0000003c: 	leaq	(%rax,%r9), %r11
    00000040: 	cmpq	%r10, %r11
    00000043: 	setbe	%r9b
    00000047: 	cmpq	%rsi, %rax
    0000004a: 	setae	%r10b
    0000004e: 	orb	%r10b, %r9b
    00000051: 	je	.Ltmp123 # Offset: 81
    00000057: 	cmpq	$0xb, %r8
    0000005b: 	jbe	.Ltmp123 # Offset: 91
    00000061: 	movq	%rdi, %r8
    00000064: 	subq	$0x8, %rsi
    00000068: 	shrq	$0x2, %r8
    0000006c: 	leaq	(%rax,%r8,8), %r8
.Ltmp124:
    00000070: 	movq	(%rsi), %xmm1
    00000074: 	movq	(%rdx), %xmm0
    00000078: 	addq	$0x8, %rdx
    0000007c: 	subq	$0x8, %rsi
    00000080: 	pshuflw	$0x1b, %xmm1, %xmm1
    00000085: 	pshuflw	$0x1b, %xmm0, %xmm0
    0000008a: 	movq	%xmm1, -0x8(%rdx)
    0000008f: 	movq	%xmm0, 0x8(%rsi)
    00000094: 	cmpq	%rdx, %r8
    00000097: 	jne	.Ltmp124 # Offset: 151
    00000099: 	movq	%rdi, %rdx
    0000009c: 	andq	$-0x4, %rdx
    000000a0: 	leaq	(%rdx,%rdx), %rsi
    000000a4: 	addq	%rsi, %rax
    000000a7: 	subq	%rsi, %rcx
    000000aa: 	cmpq	%rdx, %rdi
    000000ad: 	je	.Ltmp122 # Offset: 173
    000000af: 	movzwl	(%rax), %edx
    000000b2: 	movzwl	(%rcx), %esi
    000000b5: 	movw	%si, (%rax)
    000000b8: 	leaq	-0x2(%rcx), %rsi
    000000bc: 	movw	%dx, (%rcx)
    000000bf: 	leaq	0x2(%rax), %rdx
    000000c3: 	cmpq	%rdx, %rsi
    000000c6: 	jbe	.Ltmp122 # Offset: 198
    000000c8: 	movzwl	0x2(%rax), %edx
    000000cc: 	movzwl	-0x2(%rcx), %esi
    000000d0: 	movw	%si, 0x2(%rax)
    000000d4: 	leaq	0x4(%rax), %rsi
    000000d8: 	movw	%dx, -0x2(%rcx)
    000000dc: 	leaq	-0x4(%rcx), %rdx
    000000e0: 	cmpq	%rdx, %rsi
    000000e3: 	jae	.Ltmp122 # Offset: 227
    000000e5: 	movzwl	0x4(%rax), %edx
    000000e9: 	movzwl	-0x4(%rcx), %esi
    000000ed: 	movw	%si, 0x4(%rax)
    000000f1: 	movw	%dx, -0x4(%rcx)
    000000f5: 	retq # Offset: 245
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp123:
    00000100: 	movzwl	(%rax), %edx
    00000103: 	movzwl	(%rcx), %esi
    00000106: 	addq	$0x2, %rax
    0000010a: 	subq	$0x2, %rcx
    0000010e: 	movw	%si, -0x2(%rax)
    00000112: 	movw	%dx, 0x2(%rcx)
    00000116: 	cmpq	%rcx, %rax
    00000119: 	jb	.Ltmp123 # Offset: 281
.Ltmp122:
    0000011b: 	retq # Offset: 283
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt7reverseIPsEvT_S1_"

Binary Function "_Z17my_simple_reverseIPsEvT_S1_" after disassembly {
  Number      : 61
  State       : disassembled
  Address     : 0x33b0
  Size        : 0x12d
  MaxSize     : 0x130
  Offset      : 0x33b0
  Section     : .text
  Orc Section : .local.text._Z17my_simple_reverseIPsEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rdx
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp125 # Offset: 10
    00000010: 	movq	%rsi, %rax
    00000013: 	subq	%rdi, %rax
    00000016: 	movq	%rax, %rdi
    00000019: 	movq	%rax, %rcx
    0000001c: 	sarq	%rdi
    0000001f: 	shrq	$0x3f, %rcx
    00000023: 	addq	%rdi, %rcx
    00000026: 	sarq	%rcx
    00000029: 	movq	%rcx, %r8
    0000002c: 	leaq	-0x2(%rsi), %rcx
    00000030: 	cmpq	$0x2, %rax
    00000034: 	jle	.Ltmp125 # Offset: 52
    0000003a: 	leaq	(%r8,%r8), %rdi
    0000003e: 	movq	%rsi, %r9
    00000041: 	subq	%rdi, %r9
    00000044: 	leaq	(%rdx,%rdi), %r10
    00000048: 	cmpq	%r9, %r10
    0000004b: 	setbe	%dil
    0000004f: 	cmpq	%rsi, %rdx
    00000052: 	setae	%r9b
    00000056: 	orb	%r9b, %dil
    00000059: 	je	.Ltmp126 # Offset: 89
    0000005f: 	cmpq	$0xe, %rax
    00000063: 	jle	.Ltmp126 # Offset: 99
    00000069: 	movq	%r8, %rdi
    0000006c: 	movq	%rdx, %rax
    0000006f: 	subq	$0x8, %rsi
    00000073: 	shrq	$0x2, %rdi
    00000077: 	leaq	(%rdx,%rdi,8), %rdi
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp127:
    00000080: 	movq	(%rsi), %xmm1
    00000084: 	movq	(%rax), %xmm0
    00000088: 	addq	$0x8, %rax
    0000008c: 	subq	$0x8, %rsi
    00000090: 	pshuflw	$0x1b, %xmm1, %xmm1
    00000095: 	pshuflw	$0x1b, %xmm0, %xmm0
    0000009a: 	movq	%xmm1, -0x8(%rax)
    0000009f: 	movq	%xmm0, 0x8(%rsi)
    000000a4: 	cmpq	%rdi, %rax
    000000a7: 	jne	.Ltmp127 # Offset: 167
    000000a9: 	movq	%r8, %rax
    000000ac: 	andq	$-0x4, %rax
    000000b0: 	leaq	(%rax,%rax), %rdi
    000000b4: 	subq	%rdi, %rcx
    000000b7: 	addq	%rdi, %rdx
    000000ba: 	movq	%rcx, %rsi
    000000bd: 	cmpq	%rax, %r8
    000000c0: 	je	.Ltmp125 # Offset: 192
    000000c2: 	movzwl	(%rdx), %ecx
    000000c5: 	movzwl	(%rsi), %edi
    000000c8: 	movw	%di, (%rdx)
    000000cb: 	movw	%cx, (%rsi)
    000000ce: 	leaq	0x1(%rax), %rcx
    000000d2: 	cmpq	%rcx, %r8
    000000d5: 	jle	.Ltmp125 # Offset: 213
    000000d7: 	movzwl	0x2(%rdx), %ecx
    000000db: 	movzwl	-0x2(%rsi), %edi
    000000df: 	addq	$0x2, %rax
    000000e3: 	movw	%di, 0x2(%rdx)
    000000e7: 	movw	%cx, -0x2(%rsi)
    000000eb: 	cmpq	%rax, %r8
    000000ee: 	jle	.Ltmp125 # Offset: 238
    000000f0: 	movzwl	0x4(%rdx), %eax
    000000f4: 	movzwl	-0x4(%rsi), %ecx
    000000f8: 	movw	%cx, 0x4(%rdx)
    000000fc: 	movw	%ax, -0x4(%rsi)
    00000100: 	retq # Offset: 256
    00000101: 	nopl	(%rax) # Size: 7
.Ltmp126:
    00000108: 	xorl	%eax, %eax
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp128:
    00000110: 	movzwl	(%rcx), %edi
    00000113: 	movzwl	(%rdx,%rax,2), %esi
    00000117: 	subq	$0x2, %rcx
    0000011b: 	movw	%di, (%rdx,%rax,2)
    0000011f: 	addq	$0x1, %rax
    00000123: 	movw	%si, 0x2(%rcx)
    00000127: 	cmpq	%rax, %r8
    0000012a: 	jg	.Ltmp128 # Offset: 298
.Ltmp125:
    0000012c: 	retq # Offset: 300
DWARF CFI Instructions:
    <empty>
End of Function "_Z17my_simple_reverseIPsEvT_S1_"

Binary Function "_Z13fast_reverse2IPsEvT_S1_" after disassembly {
  Number      : 62
  State       : disassembled
  Address     : 0x34e0
  Size        : 0x2de
  MaxSize     : 0x2e0
  Offset      : 0x34e0
  Section     : .text
  Orc Section : .local.text._Z13fast_reverse2IPsEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp129 # Offset: 7
    0000000d: 	movq	%rsi, %rdx
    00000010: 	pushq	%rbp
    00000011: 	movq	%rdi, %rax
    00000014: 	movq	%rsi, %r9
    00000017: 	subq	%rdi, %rdx
    0000001a: 	pushq	%rbx
    0000001b: 	leaq	-0x2(%rsi), %r8
    0000001f: 	movq	%rdx, %rcx
    00000022: 	movq	%rdx, %r10
    00000025: 	sarq	%rcx
    00000028: 	shrq	$0x3f, %r10
    0000002c: 	addq	%rcx, %r10
    0000002f: 	sarq	%r10
    00000032: 	cmpq	$0xe, %rdx
    00000036: 	jle	.Ltmp130 # Offset: 54
    0000003c: 	leaq	-0x4(%r10), %rcx
    00000040: 	movq	%r9, %r11
    00000043: 	movq	%rcx, %rsi
    00000046: 	shrq	$0x2, %rsi
    0000004a: 	addq	$0x1, %rsi
    0000004e: 	leaq	(,%rsi,8), %rdx
    00000056: 	movq	%rdx, %rbx
    00000059: 	leaq	(%rdi,%rdx), %rdi
    0000005d: 	subq	%rdx, %r11
    00000060: 	negq	%rbx
    00000063: 	cmpq	%r11, %rdi
    00000066: 	jbe	.Ltmp131 # Offset: 102
    00000068: 	cmpq	%r9, %rax
    0000006b: 	jb	.Ltmp132 # Offset: 107
.Ltmp131:
    00000071: 	cmpq	$0x3, %rcx
    00000075: 	jbe	.Ltmp133 # Offset: 117
    0000007b: 	movq	%rsi, %r11
    0000007e: 	movq	%rax, %rcx
    00000081: 	leaq	-0x10(%r9), %rdx
    00000085: 	shrq	%r11
    00000088: 	shlq	$0x4, %r11
    0000008c: 	addq	%rax, %r11
    0000008f: 	nop # Size: 1
.Ltmp134:
    00000090: 	movdqu	(%rcx), %xmm1
    00000094: 	addq	$0x10, %rcx
    00000098: 	subq	$0x10, %rdx
    0000009c: 	movdqa	%xmm1, %xmm0
    000000a0: 	pslld	$0x10, %xmm1
    000000a5: 	psrld	$0x10, %xmm0
    000000aa: 	por	%xmm1, %xmm0
    000000ae: 	movq	0x18(%rdx), %xmm1
    000000b3: 	pshufd	$0xb1, %xmm0, %xmm0
    000000b8: 	movhps	0x10(%rdx), %xmm1
    000000bc: 	shufpd	$0x1, %xmm0, %xmm0
    000000c1: 	movdqa	%xmm1, %xmm2
    000000c5: 	pslld	$0x10, %xmm1
    000000ca: 	psrld	$0x10, %xmm2
    000000cf: 	por	%xmm2, %xmm1
    000000d3: 	pshufd	$0xb1, %xmm1, %xmm1
    000000d8: 	movups	%xmm1, -0x10(%rcx)
    000000dc: 	movups	%xmm0, 0x10(%rdx)
    000000e0: 	cmpq	%rcx, %r11
    000000e3: 	jne	.Ltmp134 # Offset: 227
    000000e5: 	movq	%rsi, %rcx
    000000e8: 	andq	$-0x2, %rcx
    000000ec: 	cmpq	%rcx, %rsi
    000000ef: 	je	.Ltmp135 # Offset: 239
.Ltmp140:
    000000f1: 	leaq	(%rax,%rcx,8), %rax
    000000f5: 	movq	%rcx, %rdx
    000000f8: 	movq	(%rax), %xmm1
    000000fc: 	notq	%rdx
    000000ff: 	leaq	(%r9,%rdx,8), %rdx
    00000103: 	movq	(%rdx), %xmm2
    00000107: 	movdqa	%xmm1, %xmm0
    0000010b: 	pslld	$0x10, %xmm1
    00000110: 	psrld	$0x10, %xmm0
    00000115: 	por	%xmm1, %xmm0
    00000119: 	movdqa	%xmm2, %xmm1
    0000011d: 	psrld	$0x10, %xmm1
    00000122: 	pslld	$0x10, %xmm2
    00000127: 	pshufd	$0xe1, %xmm0, %xmm0
    0000012c: 	por	%xmm2, %xmm1
    00000130: 	pshufd	$0xe1, %xmm1, %xmm1
    00000135: 	movq	%xmm1, (%rax)
    00000139: 	movq	%xmm0, (%rdx)
.Ltmp135:
    0000013d: 	addq	%rbx, %r8
    00000140: 	shlq	$0x2, %rsi
.Ltmp139:
    00000144: 	cmpq	%rsi, %r10
    00000147: 	jle	.Ltmp136 # Offset: 327
    0000014d: 	movq	%r10, %rdx
    00000150: 	movq	%r8, %r9
    00000153: 	subq	%rsi, %rdx
    00000156: 	leaq	(%rdx,%rdx), %rax
    0000015a: 	subq	%rax, %r9
    0000015d: 	leaq	(%rdi,%rax), %rcx
    00000161: 	leaq	0x2(%r9), %rax
    00000165: 	cmpq	%rax, %rcx
    00000168: 	leaq	0x2(%r8), %rcx
    0000016c: 	setbe	%al
    0000016f: 	cmpq	%rcx, %rdi
    00000172: 	setae	%cl
    00000175: 	orb	%cl, %al
    00000177: 	je	.Ltmp137 # Offset: 375
    0000017d: 	leaq	-0x1(%rdx), %rax
    00000181: 	cmpq	$0x2, %rax
    00000185: 	jbe	.Ltmp137 # Offset: 389
    0000018b: 	movq	(%rdi), %xmm0
    0000018f: 	movq	-0x6(%r8), %xmm1
    00000195: 	movq	%rdx, %rax
    00000198: 	andq	$-0x4, %rax
    0000019c: 	leaq	(%rax,%rax), %rcx
    000001a0: 	pshuflw	$0x1b, %xmm1, %xmm1
    000001a5: 	pshuflw	$0x1b, %xmm0, %xmm0
    000001aa: 	addq	%rax, %rsi
    000001ad: 	movq	%xmm1, (%rdi)
    000001b1: 	addq	%rcx, %rdi
    000001b4: 	movq	%xmm0, -0x6(%r8)
    000001ba: 	subq	%rcx, %r8
    000001bd: 	cmpq	%rax, %rdx
    000001c0: 	je	.Ltmp136 # Offset: 448
    000001c2: 	movzwl	(%rdi), %eax
    000001c5: 	movzwl	(%r8), %edx
    000001c9: 	movw	%dx, (%rdi)
    000001cc: 	movw	%ax, (%r8)
    000001d0: 	leaq	0x1(%rsi), %rax
    000001d4: 	cmpq	%rax, %r10
    000001d7: 	jle	.Ltmp136 # Offset: 471
    000001d9: 	movzwl	0x2(%rdi), %eax
    000001dd: 	movzwl	-0x2(%r8), %edx
    000001e2: 	addq	$0x2, %rsi
    000001e6: 	movw	%dx, 0x2(%rdi)
    000001ea: 	movw	%ax, -0x2(%r8)
    000001ef: 	cmpq	%rsi, %r10
    000001f2: 	jle	.Ltmp136 # Offset: 498
    000001f4: 	movzwl	0x4(%rdi), %eax
    000001f8: 	movzwl	-0x4(%r8), %edx
    000001fd: 	movw	%dx, 0x4(%rdi)
    00000201: 	movw	%ax, -0x4(%r8)
.Ltmp136:
    00000206: 	popq	%rbx
    00000207: 	popq	%rbp
    00000208: 	retq # Offset: 520
    00000209: 	nopl	(%rax) # Size: 7
.Ltmp132:
    00000210: 	movq	%r8, %rdx
    00000213: 	nopl	(%rax,%rax) # Size: 5
.Ltmp138:
    00000218: 	movl	-0x6(%rdx), %r11d
    0000021c: 	movl	-0x2(%rdx), %ebp
    0000021f: 	addq	$0x8, %rax
    00000223: 	subq	$0x8, %rdx
    00000227: 	movl	-0x8(%rax), %r9d
    0000022b: 	movl	-0x4(%rax), %ecx
    0000022e: 	roll	$0x10, %r11d
    00000232: 	roll	$0x10, %ebp
    00000235: 	roll	$0x10, %r9d
    00000239: 	roll	$0x10, %ecx
    0000023c: 	movl	%ebp, -0x8(%rax)
    0000023f: 	movl	%r11d, -0x4(%rax)
    00000243: 	movl	%r9d, 0x6(%rdx)
    00000247: 	movl	%ecx, 0x2(%rdx)
    0000024a: 	cmpq	%rax, %rdi
    0000024d: 	jne	.Ltmp138 # Offset: 589
    0000024f: 	jmp	.Ltmp135 # Offset: 591
    00000254: 	nopl	(%rax) # Size: 4
.Ltmp137:
    00000258: 	movzwl	(%rdi), %eax
    0000025b: 	movzwl	(%r8), %edx
    0000025f: 	movw	%dx, (%rdi)
    00000262: 	movw	%ax, (%r8)
    00000266: 	leaq	0x1(%rsi), %rax
    0000026a: 	cmpq	%rax, %r10
    0000026d: 	jle	.Ltmp136 # Offset: 621
    0000026f: 	movzwl	0x2(%rdi), %eax
    00000273: 	movzwl	-0x2(%r8), %edx
    00000278: 	movw	%dx, 0x2(%rdi)
    0000027c: 	movw	%ax, -0x2(%r8)
    00000281: 	leaq	0x2(%rsi), %rax
    00000285: 	cmpq	%rax, %r10
    00000288: 	jle	.Ltmp136 # Offset: 648
    0000028e: 	movzwl	0x4(%rdi), %eax
    00000292: 	movzwl	-0x4(%r8), %edx
    00000297: 	addq	$0x3, %rsi
    0000029b: 	movw	%dx, 0x4(%rdi)
    0000029f: 	movw	%ax, -0x4(%r8)
    000002a4: 	cmpq	%rsi, %r10
    000002a7: 	jle	.Ltmp136 # Offset: 679
    000002ad: 	movzwl	0x6(%rdi), %eax
    000002b1: 	movzwl	-0x6(%r8), %edx
    000002b6: 	movw	%dx, 0x6(%rdi)
    000002ba: 	movw	%ax, -0x6(%r8)
    000002bf: 	jmp	.Ltmp136 # Offset: 703
    000002c4: 	nopl	(%rax) # Size: 4
.Ltmp129:
    000002c8: 	retq # Offset: 712
    000002c9: 	nopl	(%rax) # Size: 7
.Ltmp130:
    000002d0: 	xorl	%esi, %esi
    000002d2: 	jmp	.Ltmp139 # Offset: 722
.Ltmp133:
    000002d7: 	xorl	%ecx, %ecx
    000002d9: 	jmp	.Ltmp140 # Offset: 729
DWARF CFI Instructions:
    <empty>
End of Function "_Z13fast_reverse2IPsEvT_S1_"

Binary Function "_Z13fast_reverse3IPsEvT_S1_" after disassembly {
  Number      : 63
  State       : disassembled
  Address     : 0x37c0
  Size        : 0x297
  MaxSize     : 0x2a0
  Offset      : 0x37c0
  Section     : .text
  Orc Section : .local.text._Z13fast_reverse3IPsEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp141 # Offset: 7
    0000000d: 	movq	%rsi, %rax
    00000010: 	leaq	-0x2(%rsi), %r8
    00000014: 	subq	%rdi, %rax
    00000017: 	movq	%rax, %rdx
    0000001a: 	movq	%rax, %r9
    0000001d: 	sarq	%rdx
    00000020: 	shrq	$0x3f, %r9
    00000024: 	addq	%rdx, %r9
    00000027: 	sarq	%r9
    0000002a: 	cmpq	$0x1e, %rax
    0000002e: 	jle	.Ltmp142 # Offset: 46
    00000034: 	leaq	-0x8(%r9), %rcx
    00000038: 	subq	$0x10, %rsi
    0000003c: 	movq	%rdi, %rax
    0000003f: 	xorl	%edx, %edx
    00000041: 	shrq	$0x3, %rcx
    00000045: 	addq	$0x1, %rcx
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp143:
    00000050: 	movdqu	(%rax), %xmm1
    00000054: 	movdqu	(%rsi), %xmm2
    00000058: 	addq	$0x1, %rdx
    0000005c: 	subq	$0x10, %rsi
    00000060: 	addq	$0x10, %rax
    00000064: 	movdqa	%xmm1, %xmm0
    00000068: 	pslld	$0x10, %xmm1
    0000006d: 	psrld	$0x10, %xmm0
    00000072: 	por	%xmm1, %xmm0
    00000076: 	movdqa	%xmm2, %xmm1
    0000007a: 	psrld	$0x10, %xmm1
    0000007f: 	pslld	$0x10, %xmm2
    00000084: 	pshufd	$0x1b, %xmm0, %xmm0
    00000089: 	por	%xmm2, %xmm1
    0000008d: 	pshufd	$0x1b, %xmm1, %xmm1
    00000092: 	movups	%xmm1, -0x10(%rax)
    00000096: 	movups	%xmm0, 0x10(%rsi)
    0000009a: 	cmpq	%rdx, %rcx
    0000009d: 	ja	.Ltmp143 # Offset: 157
    0000009f: 	movq	%rcx, %rax
    000000a2: 	shlq	$0x3, %rcx
    000000a6: 	negq	%rax
    000000a9: 	shlq	$0x4, %rax
    000000ad: 	addq	%rax, %r8
    000000b0: 	subq	%rax, %rdi
.Ltmp146:
    000000b3: 	cmpq	%rcx, %r9
    000000b6: 	jle	.Ltmp141 # Offset: 182
    000000bc: 	movq	%r9, %rdx
    000000bf: 	movq	%r8, %r10
    000000c2: 	subq	%rcx, %rdx
    000000c5: 	leaq	(%rdx,%rdx), %rax
    000000c9: 	subq	%rax, %r10
    000000cc: 	leaq	(%rdi,%rax), %rsi
    000000d0: 	leaq	0x2(%r10), %rax
    000000d4: 	cmpq	%rax, %rsi
    000000d7: 	leaq	0x2(%r8), %rsi
    000000db: 	setbe	%al
    000000de: 	cmpq	%rsi, %rdi
    000000e1: 	setae	%sil
    000000e5: 	orb	%sil, %al
    000000e8: 	je	.Ltmp144 # Offset: 232
    000000ee: 	leaq	-0x1(%rdx), %rax
    000000f2: 	cmpq	$0x2, %rax
    000000f6: 	jbe	.Ltmp144 # Offset: 246
    000000fc: 	movq	(%rdi), %xmm0
    00000100: 	movq	-0x6(%r8), %xmm1
    00000106: 	movq	%rdx, %rax
    00000109: 	shrq	$0x2, %rax
    0000010d: 	pshuflw	$0x1b, %xmm1, %xmm1
    00000112: 	pshuflw	$0x1b, %xmm0, %xmm0
    00000117: 	movq	%xmm1, (%rdi)
    0000011b: 	movq	%xmm0, -0x6(%r8)
    00000121: 	cmpq	$0x1, %rax
    00000125: 	je	.Ltmp145 # Offset: 293
    00000127: 	movq	0x8(%rdi), %xmm0
    0000012c: 	movq	-0xe(%r8), %xmm1
    00000132: 	pshuflw	$0x1b, %xmm0, %xmm0
    00000137: 	pshuflw	$0x1b, %xmm1, %xmm1
    0000013c: 	movq	%xmm1, 0x8(%rdi)
    00000141: 	movq	%xmm0, -0xe(%r8)
.Ltmp145:
    00000147: 	movq	%rdx, %rax
    0000014a: 	andq	$-0x4, %rax
    0000014e: 	leaq	(%rax,%rax), %rsi
    00000152: 	addq	%rax, %rcx
    00000155: 	addq	%rsi, %rdi
    00000158: 	subq	%rsi, %r8
    0000015b: 	cmpq	%rax, %rdx
    0000015e: 	je	.Ltmp141 # Offset: 350
    00000164: 	movzwl	(%rdi), %eax
    00000167: 	movzwl	(%r8), %edx
    0000016b: 	movw	%dx, (%rdi)
    0000016e: 	movw	%ax, (%r8)
    00000172: 	leaq	0x1(%rcx), %rax
    00000176: 	cmpq	%rax, %r9
    00000179: 	jle	.Ltmp141 # Offset: 377
    0000017f: 	movzwl	0x2(%rdi), %eax
    00000183: 	movzwl	-0x2(%r8), %edx
    00000188: 	addq	$0x2, %rcx
    0000018c: 	movw	%dx, 0x2(%rdi)
    00000190: 	movw	%ax, -0x2(%r8)
    00000195: 	cmpq	%rcx, %r9
    00000198: 	jle	.Ltmp141 # Offset: 408
    0000019e: 	movzwl	0x4(%rdi), %eax
    000001a2: 	movzwl	-0x4(%r8), %edx
    000001a7: 	movw	%dx, 0x4(%rdi)
    000001ab: 	movw	%ax, -0x4(%r8)
    000001b0: 	retq # Offset: 432
    000001b1: 	nopl	(%rax) # Size: 7
.Ltmp144:
    000001b8: 	movzwl	(%rdi), %eax
    000001bb: 	movzwl	(%r8), %edx
    000001bf: 	movw	%dx, (%rdi)
    000001c2: 	movw	%ax, (%r8)
    000001c6: 	leaq	0x1(%rcx), %rax
    000001ca: 	cmpq	%rax, %r9
    000001cd: 	jle	.Ltmp141 # Offset: 461
    000001d3: 	movzwl	0x2(%rdi), %eax
    000001d7: 	movzwl	-0x2(%r8), %edx
    000001dc: 	movw	%dx, 0x2(%rdi)
    000001e0: 	movw	%ax, -0x2(%r8)
    000001e5: 	leaq	0x2(%rcx), %rax
    000001e9: 	cmpq	%rax, %r9
    000001ec: 	jle	.Ltmp141 # Offset: 492
    000001f2: 	movzwl	0x4(%rdi), %eax
    000001f6: 	movzwl	-0x4(%r8), %edx
    000001fb: 	movw	%dx, 0x4(%rdi)
    000001ff: 	movw	%ax, -0x4(%r8)
    00000204: 	leaq	0x3(%rcx), %rax
    00000208: 	cmpq	%rax, %r9
    0000020b: 	jle	.Ltmp141 # Offset: 523
    0000020d: 	movzwl	0x6(%rdi), %eax
    00000211: 	movzwl	-0x6(%r8), %edx
    00000216: 	movw	%dx, 0x6(%rdi)
    0000021a: 	movw	%ax, -0x6(%r8)
    0000021f: 	leaq	0x4(%rcx), %rax
    00000223: 	cmpq	%rax, %r9
    00000226: 	jle	.Ltmp141 # Offset: 550
    00000228: 	movzwl	0x8(%rdi), %eax
    0000022c: 	movzwl	-0x8(%r8), %edx
    00000231: 	movw	%dx, 0x8(%rdi)
    00000235: 	movw	%ax, -0x8(%r8)
    0000023a: 	leaq	0x5(%rcx), %rax
    0000023e: 	cmpq	%rax, %r9
    00000241: 	jle	.Ltmp141 # Offset: 577
    00000243: 	movzwl	0xa(%rdi), %eax
    00000247: 	movzwl	-0xa(%r8), %edx
    0000024c: 	movw	%dx, 0xa(%rdi)
    00000250: 	movw	%ax, -0xa(%r8)
    00000255: 	leaq	0x6(%rcx), %rax
    00000259: 	cmpq	%rax, %r9
    0000025c: 	jle	.Ltmp141 # Offset: 604
    0000025e: 	movzwl	0xc(%rdi), %eax
    00000262: 	movzwl	-0xc(%r8), %edx
    00000267: 	addq	$0x7, %rcx
    0000026b: 	movw	%dx, 0xc(%rdi)
    0000026f: 	movw	%ax, -0xc(%r8)
    00000274: 	cmpq	%rcx, %r9
    00000277: 	jle	.Ltmp141 # Offset: 631
    00000279: 	movzwl	0xe(%rdi), %eax
    0000027d: 	movzwl	-0xe(%r8), %edx
    00000282: 	movw	%dx, 0xe(%rdi)
    00000286: 	movw	%ax, -0xe(%r8)
.Ltmp141:
    0000028b: 	retq # Offset: 651
    0000028c: 	nopl	(%rax) # Size: 4
.Ltmp142:
    00000290: 	xorl	%ecx, %ecx
    00000292: 	jmp	.Ltmp146 # Offset: 658
DWARF CFI Instructions:
    <empty>
End of Function "_Z13fast_reverse3IPsEvT_S1_"

Binary Function "_Z13fast_reverse4IPsEvT_S1_" after disassembly {
  Number      : 64
  State       : disassembled
  Address     : 0x3a60
  Size        : 0x2ef
  MaxSize     : 0x2f0
  Offset      : 0x3a60
  Section     : .text
  Orc Section : .local.text._Z13fast_reverse4IPsEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB063:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp147 # Offset: 7
    0000000d: 	movq	%rsi, %rax
    00000010: 	leaq	-0x2(%rsi), %r8
    00000014: 	subq	%rdi, %rax
    00000017: 	movq	%rax, %rdx
    0000001a: 	movq	%rax, %r9
    0000001d: 	sarq	%rdx
    00000020: 	shrq	$0x3f, %r9
    00000024: 	addq	%rdx, %r9
    00000027: 	sarq	%r9
    0000002a: 	cmpq	$0x1e, %rax
    0000002e: 	jle	.Ltmp148 # Offset: 46
    00000034: 	leaq	-0x8(%r9), %rcx
    00000038: 	subq	$0x10, %rsi
    0000003c: 	movq	%rdi, %rax
    0000003f: 	xorl	%edx, %edx
    00000041: 	shrq	$0x3, %rcx
    00000045: 	movdqa	DATAat0x27510(%rip), %xmm4
    0000004d: 	movdqa	DATAat0x27520(%rip), %xmm3
    00000055: 	addq	$0x1, %rcx
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp149:
    00000060: 	movdqu	(%rax), %xmm1
    00000064: 	addq	$0x1, %rdx
    00000068: 	subq	$0x10, %rsi
    0000006c: 	addq	$0x10, %rax
    00000070: 	movdqa	%xmm1, %xmm0
    00000074: 	movdqa	%xmm1, %xmm2
    00000078: 	psrlq	$0x10, %xmm0
    0000007d: 	psllq	$0x10, %xmm2
    00000082: 	pand	%xmm3, %xmm2
    00000086: 	pand	%xmm4, %xmm0
    0000008a: 	pxor	%xmm2, %xmm0
    0000008e: 	movdqa	%xmm1, %xmm2
    00000092: 	psrlq	$0x30, %xmm2
    00000097: 	psllq	$0x30, %xmm1
    0000009c: 	pxor	%xmm2, %xmm1
    000000a0: 	movdqu	0x10(%rsi), %xmm2
    000000a5: 	pxor	%xmm1, %xmm0
    000000a9: 	movdqa	%xmm2, %xmm5
    000000ad: 	movdqa	%xmm2, %xmm1
    000000b1: 	shufpd	$0x1, %xmm0, %xmm0
    000000b6: 	psrlq	$0x10, %xmm1
    000000bb: 	psllq	$0x10, %xmm5
    000000c0: 	pand	%xmm3, %xmm5
    000000c4: 	pand	%xmm4, %xmm1
    000000c8: 	pxor	%xmm5, %xmm1
    000000cc: 	movdqa	%xmm2, %xmm5
    000000d0: 	psrlq	$0x30, %xmm5
    000000d5: 	psllq	$0x30, %xmm2
    000000da: 	pxor	%xmm5, %xmm2
    000000de: 	pxor	%xmm2, %xmm1
    000000e2: 	shufpd	$0x1, %xmm1, %xmm1
    000000e7: 	movups	%xmm1, -0x10(%rax)
    000000eb: 	movups	%xmm0, 0x10(%rsi)
    000000ef: 	cmpq	%rdx, %rcx
    000000f2: 	ja	.Ltmp149 # Offset: 242
    000000f8: 	movq	%rcx, %rax
    000000fb: 	shlq	$0x3, %rcx
    000000ff: 	negq	%rax
    00000102: 	shlq	$0x4, %rax
    00000106: 	addq	%rax, %r8
    00000109: 	subq	%rax, %rdi
.Ltmp152:
    0000010c: 	cmpq	%rcx, %r9
    0000010f: 	jle	.Ltmp147 # Offset: 271
    00000115: 	movq	%r9, %rax
    00000118: 	movq	%r8, %rsi
    0000011b: 	subq	%rcx, %rax
    0000011e: 	leaq	(%rax,%rax), %rdx
    00000122: 	subq	%rdx, %rsi
    00000125: 	addq	%rdi, %rdx
    00000128: 	addq	$0x2, %rsi
    0000012c: 	cmpq	%rdx, %rsi
    0000012f: 	leaq	0x2(%r8), %rsi
    00000133: 	setae	%dl
    00000136: 	cmpq	%rsi, %rdi
    00000139: 	setae	%sil
    0000013d: 	orb	%sil, %dl
    00000140: 	je	.Ltmp150 # Offset: 320
    00000146: 	leaq	-0x1(%rax), %rdx
    0000014a: 	cmpq	$0x2, %rdx
    0000014e: 	jbe	.Ltmp150 # Offset: 334
    00000154: 	movq	(%rdi), %xmm0
    00000158: 	movq	-0x6(%r8), %xmm1
    0000015e: 	movq	%rax, %rdx
    00000161: 	shrq	$0x2, %rdx
    00000165: 	pshuflw	$0x1b, %xmm1, %xmm1
    0000016a: 	pshuflw	$0x1b, %xmm0, %xmm0
    0000016f: 	movq	%xmm1, (%rdi)
    00000173: 	movq	%xmm0, -0x6(%r8)
    00000179: 	cmpq	$0x1, %rdx
    0000017d: 	je	.Ltmp151 # Offset: 381
    0000017f: 	movq	0x8(%rdi), %xmm0
    00000184: 	movq	-0xe(%r8), %xmm1
    0000018a: 	pshuflw	$0x1b, %xmm0, %xmm0
    0000018f: 	pshuflw	$0x1b, %xmm1, %xmm1
    00000194: 	movq	%xmm1, 0x8(%rdi)
    00000199: 	movq	%xmm0, -0xe(%r8)
.Ltmp151:
    0000019f: 	movq	%rax, %rdx
    000001a2: 	andq	$-0x4, %rdx
    000001a6: 	leaq	(%rdx,%rdx), %rsi
    000001aa: 	addq	%rdx, %rcx
    000001ad: 	addq	%rsi, %rdi
    000001b0: 	subq	%rsi, %r8
    000001b3: 	cmpq	%rax, %rdx
    000001b6: 	je	.Ltmp147 # Offset: 438
    000001bc: 	movzwl	(%rdi), %eax
    000001bf: 	movzwl	(%r8), %edx
    000001c3: 	movw	%dx, (%rdi)
    000001c6: 	movw	%ax, (%r8)
    000001ca: 	leaq	0x1(%rcx), %rax
    000001ce: 	cmpq	%rax, %r9
    000001d1: 	jle	.Ltmp147 # Offset: 465
    000001d7: 	movzwl	0x2(%rdi), %eax
    000001db: 	movzwl	-0x2(%r8), %edx
    000001e0: 	addq	$0x2, %rcx
    000001e4: 	movw	%dx, 0x2(%rdi)
    000001e8: 	movw	%ax, -0x2(%r8)
    000001ed: 	cmpq	%rcx, %r9
    000001f0: 	jle	.Ltmp147 # Offset: 496
    000001f6: 	movzwl	0x4(%rdi), %eax
    000001fa: 	movzwl	-0x4(%r8), %edx
    000001ff: 	movw	%dx, 0x4(%rdi)
    00000203: 	movw	%ax, -0x4(%r8)
    00000208: 	retq # Offset: 520
    00000209: 	nopl	(%rax) # Size: 7
.Ltmp150:
    00000210: 	movzwl	(%rdi), %eax
    00000213: 	movzwl	(%r8), %edx
    00000217: 	movw	%dx, (%rdi)
    0000021a: 	movw	%ax, (%r8)
    0000021e: 	leaq	0x1(%rcx), %rax
    00000222: 	cmpq	%rax, %r9
    00000225: 	jle	.Ltmp147 # Offset: 549
    0000022b: 	movzwl	0x2(%rdi), %eax
    0000022f: 	movzwl	-0x2(%r8), %edx
    00000234: 	movw	%dx, 0x2(%rdi)
    00000238: 	movw	%ax, -0x2(%r8)
    0000023d: 	leaq	0x2(%rcx), %rax
    00000241: 	cmpq	%rax, %r9
    00000244: 	jle	.Ltmp147 # Offset: 580
    0000024a: 	movzwl	0x4(%rdi), %eax
    0000024e: 	movzwl	-0x4(%r8), %edx
    00000253: 	movw	%dx, 0x4(%rdi)
    00000257: 	movw	%ax, -0x4(%r8)
    0000025c: 	leaq	0x3(%rcx), %rax
    00000260: 	cmpq	%rax, %r9
    00000263: 	jle	.Ltmp147 # Offset: 611
    00000265: 	movzwl	0x6(%rdi), %eax
    00000269: 	movzwl	-0x6(%r8), %edx
    0000026e: 	movw	%dx, 0x6(%rdi)
    00000272: 	movw	%ax, -0x6(%r8)
    00000277: 	leaq	0x4(%rcx), %rax
    0000027b: 	cmpq	%rax, %r9
    0000027e: 	jle	.Ltmp147 # Offset: 638
    00000280: 	movzwl	0x8(%rdi), %eax
    00000284: 	movzwl	-0x8(%r8), %edx
    00000289: 	movw	%dx, 0x8(%rdi)
    0000028d: 	movw	%ax, -0x8(%r8)
    00000292: 	leaq	0x5(%rcx), %rax
    00000296: 	cmpq	%rax, %r9
    00000299: 	jle	.Ltmp147 # Offset: 665
    0000029b: 	movzwl	0xa(%rdi), %eax
    0000029f: 	movzwl	-0xa(%r8), %edx
    000002a4: 	movw	%dx, 0xa(%rdi)
    000002a8: 	movw	%ax, -0xa(%r8)
    000002ad: 	leaq	0x6(%rcx), %rax
    000002b1: 	cmpq	%rax, %r9
    000002b4: 	jle	.Ltmp147 # Offset: 692
    000002b6: 	movzwl	0xc(%rdi), %eax
    000002ba: 	movzwl	-0xc(%r8), %edx
    000002bf: 	addq	$0x7, %rcx
    000002c3: 	movw	%dx, 0xc(%rdi)
    000002c7: 	movw	%ax, -0xc(%r8)
    000002cc: 	cmpq	%rcx, %r9
    000002cf: 	jle	.Ltmp147 # Offset: 719
    000002d1: 	movzwl	0xe(%rdi), %eax
    000002d5: 	movzwl	-0xe(%r8), %edx
    000002da: 	movw	%dx, 0xe(%rdi)
    000002de: 	movw	%ax, -0xe(%r8)
.Ltmp147:
    000002e3: 	retq # Offset: 739
    000002e4: 	nopl	(%rax) # Size: 4
.Ltmp148:
    000002e8: 	xorl	%ecx, %ecx
    000002ea: 	jmp	.Ltmp152 # Offset: 746
DWARF CFI Instructions:
    <empty>
End of Function "_Z13fast_reverse4IPsEvT_S1_"

Binary Function "_ZSt12reverse_copyI20BidirectionalPointerIsES1_ET0_T_S3_S2_" after disassembly {
  Number      : 65
  State       : disassembled
  Address     : 0x3d50
  Size        : 0xe7
  MaxSize     : 0xf0
  Offset      : 0x3d50
  Section     : .text
  Orc Section : .local.text._ZSt12reverse_copyI20BidirectionalPointerIsES1_ET0_T_S3_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB064:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp153 # Offset: 10
    00000010: 	movq	%rsi, %r8
    00000013: 	subq	%rdi, %r8
    00000016: 	leaq	-0x2(%r8), %r9
    0000001a: 	addq	%rdx, %r8
    0000001d: 	movq	%r9, %rcx
    00000020: 	shrq	%rcx
    00000023: 	leaq	0x1(%rcx), %r10
    00000027: 	notq	%rcx
    0000002a: 	leaq	(%rsi,%rcx,2), %rcx
    0000002e: 	cmpq	%rcx, %r8
    00000031: 	setbe	%cl
    00000034: 	cmpq	%rdx, %rsi
    00000037: 	setbe	%r11b
    0000003b: 	orb	%r11b, %cl
    0000003e: 	je	.Ltmp154 # Offset: 62
    00000044: 	cmpq	$0x4, %r9
    00000048: 	jbe	.Ltmp154 # Offset: 72
    0000004a: 	movq	%r10, %r9
    0000004d: 	leaq	-0x8(%rsi), %rcx
    00000051: 	movq	%rdx, %rax
    00000054: 	shrq	$0x2, %r9
    00000058: 	leaq	(%rdx,%r9,8), %r9
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp155:
    00000060: 	movq	(%rcx), %xmm0
    00000064: 	addq	$0x8, %rax
    00000068: 	subq	$0x8, %rcx
    0000006c: 	pshuflw	$0x1b, %xmm0, %xmm0
    00000071: 	movq	%xmm0, -0x8(%rax)
    00000076: 	cmpq	%rax, %r9
    00000079: 	jne	.Ltmp155 # Offset: 121
    0000007b: 	movq	%r10, %rcx
    0000007e: 	andq	$-0x4, %rcx
    00000082: 	movq	%rcx, %rax
    00000085: 	negq	%rax
    00000088: 	addq	%rax, %rax
    0000008b: 	subq	%rax, %rdx
    0000008e: 	cmpq	%rcx, %r10
    00000091: 	je	.Ltmp156 # Offset: 145
    00000093: 	leaq	-0x2(%rsi,%rax), %rax
    00000098: 	movzwl	(%rax), %ecx
    0000009b: 	movw	%cx, (%rdx)
    0000009e: 	cmpq	%rdi, %rax
    000000a1: 	je	.Ltmp156 # Offset: 161
    000000a3: 	movzwl	-0x2(%rax), %ecx
    000000a7: 	movw	%cx, 0x2(%rdx)
    000000ab: 	leaq	-0x2(%rax), %rcx
    000000af: 	cmpq	%rcx, %rdi
    000000b2: 	je	.Ltmp156 # Offset: 178
    000000b4: 	movzwl	-0x4(%rax), %eax
    000000b8: 	movw	%ax, 0x4(%rdx)
.Ltmp156:
    000000bc: 	movq	%r8, %rax
    000000bf: 	retq # Offset: 191
.Ltmp154:
    000000c0: 	movzwl	-0x2(%rax), %ecx
    000000c4: 	subq	$0x2, %rax
    000000c8: 	addq	$0x2, %rdx
    000000cc: 	movw	%cx, -0x2(%rdx)
    000000d0: 	cmpq	%rax, %rdi
    000000d3: 	jne	.Ltmp154 # Offset: 211
    000000d5: 	jmp	.Ltmp156 # Offset: 213
    000000d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp153:
    000000e0: 	movq	%rdx, %r8
    000000e3: 	movq	%r8, %rax
    000000e6: 	retq # Offset: 230
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt12reverse_copyI20BidirectionalPointerIsES1_ET0_T_S3_S2_"

Binary Function "_Z22my_simple_reverse_copyI20BidirectionalPointerIsES1_EvT_S2_T0_" after disassembly {
  Number      : 66
  State       : disassembled
  Address     : 0x3e40
  Size        : 0xd6
  MaxSize     : 0xe0
  Offset      : 0x3e40
  Section     : .text
  Orc Section : .local.text._Z22my_simple_reverse_copyI20BidirectionalPointerIsES1_EvT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB065:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp157 # Offset: 10
    00000010: 	movq	%rsi, %rcx
    00000013: 	subq	%rdi, %rcx
    00000016: 	leaq	-0x2(%rcx), %r10
    0000001a: 	addq	%rdx, %rcx
    0000001d: 	movq	%r10, %r8
    00000020: 	shrq	%r8
    00000023: 	leaq	0x1(%r8), %r9
    00000027: 	notq	%r8
    0000002a: 	leaq	(%rsi,%r8,2), %r8
    0000002e: 	cmpq	%r8, %rcx
    00000031: 	setbe	%cl
    00000034: 	cmpq	%rsi, %rdx
    00000037: 	setae	%r8b
    0000003b: 	orb	%r8b, %cl
    0000003e: 	je	.Ltmp158 # Offset: 62
    00000044: 	cmpq	$0x4, %r10
    00000048: 	jbe	.Ltmp158 # Offset: 72
    0000004a: 	movq	%r9, %r8
    0000004d: 	leaq	-0x8(%rsi), %rcx
    00000051: 	movq	%rdx, %rax
    00000054: 	shrq	$0x2, %r8
    00000058: 	leaq	(%rdx,%r8,8), %r8
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp159:
    00000060: 	movq	(%rcx), %xmm0
    00000064: 	addq	$0x8, %rax
    00000068: 	subq	$0x8, %rcx
    0000006c: 	pshuflw	$0x1b, %xmm0, %xmm0
    00000071: 	movq	%xmm0, -0x8(%rax)
    00000076: 	cmpq	%rax, %r8
    00000079: 	jne	.Ltmp159 # Offset: 121
    0000007b: 	movq	%r9, %rcx
    0000007e: 	andq	$-0x4, %rcx
    00000082: 	movq	%rcx, %rax
    00000085: 	negq	%rax
    00000088: 	addq	%rax, %rax
    0000008b: 	subq	%rax, %rdx
    0000008e: 	cmpq	%rcx, %r9
    00000091: 	je	.Ltmp157 # Offset: 145
    00000093: 	leaq	-0x2(%rsi,%rax), %rax
    00000098: 	movzwl	(%rax), %ecx
    0000009b: 	movw	%cx, (%rdx)
    0000009e: 	cmpq	%rax, %rdi
    000000a1: 	je	.Ltmp157 # Offset: 161
    000000a3: 	movzwl	-0x2(%rax), %ecx
    000000a7: 	movw	%cx, 0x2(%rdx)
    000000ab: 	leaq	-0x2(%rax), %rcx
    000000af: 	cmpq	%rcx, %rdi
    000000b2: 	je	.Ltmp157 # Offset: 178
    000000b4: 	movzwl	-0x4(%rax), %eax
    000000b8: 	movw	%ax, 0x4(%rdx)
    000000bc: 	retq # Offset: 188
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp158:
    000000c0: 	movzwl	-0x2(%rax), %ecx
    000000c4: 	subq	$0x2, %rax
    000000c8: 	addq	$0x2, %rdx
    000000cc: 	movw	%cx, -0x2(%rdx)
    000000d0: 	cmpq	%rax, %rdi
    000000d3: 	jne	.Ltmp158 # Offset: 211
.Ltmp157:
    000000d5: 	retq # Offset: 213
DWARF CFI Instructions:
    <empty>
End of Function "_Z22my_simple_reverse_copyI20BidirectionalPointerIsES1_EvT_S2_T0_"

Binary Function "_Z20my_fast_reverse_copyI20BidirectionalPointerIsES1_EvT_S2_T0_" after disassembly {
  Number      : 67
  State       : disassembled
  Address     : 0x3f20
  Size        : 0xd6
  MaxSize     : 0xe0
  Offset      : 0x3f20
  Section     : .text
  Orc Section : .local.text._Z20my_fast_reverse_copyI20BidirectionalPointerIsES1_EvT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB066:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp160 # Offset: 10
    00000010: 	movq	%rsi, %rcx
    00000013: 	subq	%rdi, %rcx
    00000016: 	leaq	-0x2(%rcx), %r10
    0000001a: 	addq	%rdx, %rcx
    0000001d: 	movq	%r10, %r8
    00000020: 	shrq	%r8
    00000023: 	leaq	0x1(%r8), %r9
    00000027: 	notq	%r8
    0000002a: 	leaq	(%rsi,%r8,2), %r8
    0000002e: 	cmpq	%r8, %rcx
    00000031: 	setbe	%cl
    00000034: 	cmpq	%rsi, %rdx
    00000037: 	setae	%r8b
    0000003b: 	orb	%r8b, %cl
    0000003e: 	je	.Ltmp161 # Offset: 62
    00000044: 	cmpq	$0x4, %r10
    00000048: 	jbe	.Ltmp161 # Offset: 72
    0000004a: 	movq	%r9, %r8
    0000004d: 	leaq	-0x8(%rsi), %rcx
    00000051: 	movq	%rdx, %rax
    00000054: 	shrq	$0x2, %r8
    00000058: 	leaq	(%rdx,%r8,8), %r8
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp162:
    00000060: 	movq	(%rcx), %xmm0
    00000064: 	addq	$0x8, %rax
    00000068: 	subq	$0x8, %rcx
    0000006c: 	pshuflw	$0x1b, %xmm0, %xmm0
    00000071: 	movq	%xmm0, -0x8(%rax)
    00000076: 	cmpq	%rax, %r8
    00000079: 	jne	.Ltmp162 # Offset: 121
    0000007b: 	movq	%r9, %rcx
    0000007e: 	andq	$-0x4, %rcx
    00000082: 	movq	%rcx, %rax
    00000085: 	negq	%rax
    00000088: 	addq	%rax, %rax
    0000008b: 	subq	%rax, %rdx
    0000008e: 	cmpq	%rcx, %r9
    00000091: 	je	.Ltmp160 # Offset: 145
    00000093: 	leaq	-0x2(%rsi,%rax), %rax
    00000098: 	movzwl	(%rax), %ecx
    0000009b: 	movw	%cx, (%rdx)
    0000009e: 	cmpq	%rax, %rdi
    000000a1: 	je	.Ltmp160 # Offset: 161
    000000a3: 	movzwl	-0x2(%rax), %ecx
    000000a7: 	movw	%cx, 0x2(%rdx)
    000000ab: 	leaq	-0x2(%rax), %rcx
    000000af: 	cmpq	%rcx, %rdi
    000000b2: 	je	.Ltmp160 # Offset: 178
    000000b4: 	movzwl	-0x4(%rax), %eax
    000000b8: 	movw	%ax, 0x4(%rdx)
    000000bc: 	retq # Offset: 188
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp161:
    000000c0: 	movzwl	-0x2(%rax), %ecx
    000000c4: 	subq	$0x2, %rax
    000000c8: 	addq	$0x2, %rdx
    000000cc: 	movw	%cx, -0x2(%rdx)
    000000d0: 	cmpq	%rax, %rdi
    000000d3: 	jne	.Ltmp161 # Offset: 211
.Ltmp160:
    000000d5: 	retq # Offset: 213
DWARF CFI Instructions:
    <empty>
End of Function "_Z20my_fast_reverse_copyI20BidirectionalPointerIsES1_EvT_S2_T0_"

Binary Function "_ZSt12reverse_copyIPsS0_ET0_T_S2_S1_" after disassembly {
  Number      : 68
  State       : disassembled
  Address     : 0x4000
  Size        : 0xe7
  MaxSize     : 0xf0
  Offset      : 0x4000
  Section     : .text
  Orc Section : .local.text._ZSt12reverse_copyIPsS0_ET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB067:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp163 # Offset: 10
    00000010: 	movq	%rsi, %r8
    00000013: 	subq	%rdi, %r8
    00000016: 	leaq	-0x2(%r8), %rsi
    0000001a: 	addq	%rdx, %r8
    0000001d: 	movq	%rsi, %rax
    00000020: 	shrq	%rax
    00000023: 	leaq	0x1(%rax), %r10
    00000027: 	notq	%rax
    0000002a: 	leaq	(%rcx,%rax,2), %rax
    0000002e: 	cmpq	%rax, %r8
    00000031: 	setbe	%al
    00000034: 	cmpq	%rdx, %rcx
    00000037: 	setbe	%r9b
    0000003b: 	orb	%r9b, %al
    0000003e: 	je	.Ltmp164 # Offset: 62
    00000044: 	cmpq	$0x4, %rsi
    00000048: 	jbe	.Ltmp164 # Offset: 72
    0000004a: 	movq	%r10, %r9
    0000004d: 	leaq	-0x8(%rcx), %rsi
    00000051: 	movq	%rdx, %rax
    00000054: 	shrq	$0x2, %r9
    00000058: 	leaq	(%rdx,%r9,8), %r9
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp165:
    00000060: 	movq	(%rsi), %xmm0
    00000064: 	addq	$0x8, %rax
    00000068: 	subq	$0x8, %rsi
    0000006c: 	pshuflw	$0x1b, %xmm0, %xmm0
    00000071: 	movq	%xmm0, -0x8(%rax)
    00000076: 	cmpq	%r9, %rax
    00000079: 	jne	.Ltmp165 # Offset: 121
    0000007b: 	movq	%r10, %rsi
    0000007e: 	andq	$-0x4, %rsi
    00000082: 	movq	%rsi, %rax
    00000085: 	negq	%rax
    00000088: 	addq	%rax, %rax
    0000008b: 	subq	%rax, %rdx
    0000008e: 	cmpq	%rsi, %r10
    00000091: 	je	.Ltmp166 # Offset: 145
    00000093: 	leaq	-0x2(%rcx,%rax), %rax
    00000098: 	movzwl	(%rax), %ecx
    0000009b: 	movw	%cx, (%rdx)
    0000009e: 	cmpq	%rdi, %rax
    000000a1: 	je	.Ltmp166 # Offset: 161
    000000a3: 	movzwl	-0x2(%rax), %ecx
    000000a7: 	movw	%cx, 0x2(%rdx)
    000000ab: 	leaq	-0x2(%rax), %rcx
    000000af: 	cmpq	%rcx, %rdi
    000000b2: 	je	.Ltmp166 # Offset: 178
    000000b4: 	movzwl	-0x4(%rax), %eax
    000000b8: 	movw	%ax, 0x4(%rdx)
.Ltmp166:
    000000bc: 	movq	%r8, %rax
    000000bf: 	retq # Offset: 191
.Ltmp164:
    000000c0: 	movzwl	-0x2(%rcx), %eax
    000000c4: 	subq	$0x2, %rcx
    000000c8: 	addq	$0x2, %rdx
    000000cc: 	movw	%ax, -0x2(%rdx)
    000000d0: 	cmpq	%rcx, %rdi
    000000d3: 	jne	.Ltmp164 # Offset: 211
    000000d5: 	jmp	.Ltmp166 # Offset: 213
    000000d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp163:
    000000e0: 	movq	%rdx, %r8
    000000e3: 	movq	%r8, %rax
    000000e6: 	retq # Offset: 230
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt12reverse_copyIPsS0_ET0_T_S2_S1_"

Binary Function "_Z22my_simple_reverse_copyIPsS0_EvT_S1_T0_" after disassembly {
  Number      : 69
  State       : disassembled
  Address     : 0x40f0
  Size        : 0xdd
  MaxSize     : 0xe0
  Offset      : 0x40f0
  Section     : .text
  Orc Section : .local.text._Z22my_simple_reverse_copyIPsS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB068:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp167 # Offset: 7
    0000000d: 	movq	%rsi, %rax
    00000010: 	leaq	-0x2(%rsi), %rcx
    00000014: 	subq	%rdi, %rax
    00000017: 	movq	%rax, %rdi
    0000001a: 	sarq	%rdi
    0000001d: 	testq	%rax, %rax
    00000020: 	jle	.Ltmp167 # Offset: 32
    00000026: 	movq	%rsi, %r8
    00000029: 	leaq	(%rdx,%rax), %r9
    0000002d: 	subq	%rax, %r8
    00000030: 	cmpq	%r8, %r9
    00000033: 	setbe	%r8b
    00000037: 	cmpq	%rdx, %rsi
    0000003a: 	setbe	%r9b
    0000003e: 	orb	%r9b, %r8b
    00000041: 	je	.Ltmp168 # Offset: 65
    00000043: 	cmpq	$0x6, %rax
    00000047: 	jle	.Ltmp168 # Offset: 71
    00000049: 	movq	%rdi, %r8
    0000004c: 	subq	$0x8, %rsi
    00000050: 	movq	%rdx, %rax
    00000053: 	shrq	$0x2, %r8
    00000057: 	leaq	(%rdx,%r8,8), %r8
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp169:
    00000060: 	movq	(%rsi), %xmm0
    00000064: 	addq	$0x8, %rax
    00000068: 	subq	$0x8, %rsi
    0000006c: 	pshuflw	$0x1b, %xmm0, %xmm0
    00000071: 	movq	%xmm0, -0x8(%rax)
    00000076: 	cmpq	%r8, %rax
    00000079: 	jne	.Ltmp169 # Offset: 121
    0000007b: 	movq	%rdi, %rax
    0000007e: 	andq	$-0x4, %rax
    00000082: 	movq	%rax, %rsi
    00000085: 	negq	%rsi
    00000088: 	addq	%rsi, %rsi
    0000008b: 	addq	%rsi, %rcx
    0000008e: 	subq	%rsi, %rdx
    00000091: 	cmpq	%rax, %rdi
    00000094: 	je	.Ltmp167 # Offset: 148
    00000096: 	movzwl	(%rcx), %esi
    00000099: 	movw	%si, (%rdx)
    0000009c: 	leaq	0x1(%rax), %rsi
    000000a0: 	cmpq	%rsi, %rdi
    000000a3: 	jle	.Ltmp167 # Offset: 163
    000000a5: 	movzwl	-0x2(%rcx), %esi
    000000a9: 	addq	$0x2, %rax
    000000ad: 	movw	%si, 0x2(%rdx)
    000000b1: 	cmpq	%rax, %rdi
    000000b4: 	jle	.Ltmp167 # Offset: 180
    000000b6: 	movzwl	-0x4(%rcx), %eax
    000000ba: 	movw	%ax, 0x4(%rdx)
    000000be: 	retq # Offset: 190
    000000bf: 	nop # Size: 1
.Ltmp168:
    000000c0: 	xorl	%eax, %eax
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp170:
    000000c8: 	movzwl	(%rcx), %esi
    000000cb: 	subq	$0x2, %rcx
    000000cf: 	movw	%si, (%rdx,%rax,2)
    000000d3: 	addq	$0x1, %rax
    000000d7: 	cmpq	%rax, %rdi
    000000da: 	jg	.Ltmp170 # Offset: 218
.Ltmp167:
    000000dc: 	retq # Offset: 220
DWARF CFI Instructions:
    <empty>
End of Function "_Z22my_simple_reverse_copyIPsS0_EvT_S1_T0_"

Binary Function "_Z18fast_reverse_copy2IPsS0_EvT_S1_T0_" after disassembly {
  Number      : 70
  State       : disassembled
  Address     : 0x41d0
  Size        : 0x239
  MaxSize     : 0x240
  Offset      : 0x41d0
  Section     : .text
  Orc Section : .local.text._Z18fast_reverse_copy2IPsS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB069:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp171 # Offset: 7
    0000000d: 	movq	%rsi, %rax
    00000010: 	pushq	%rbx
    00000011: 	movq	%rsi, %r8
    00000014: 	movq	%rdx, %rcx
    00000017: 	subq	%rdi, %rax
    0000001a: 	leaq	-0x2(%rsi), %r9
    0000001e: 	movq	%rax, %r11
    00000021: 	sarq	%r11
    00000024: 	cmpq	$0x6, %rax
    00000028: 	jle	.Ltmp172 # Offset: 40
    0000002e: 	leaq	-0x4(%r11), %rdx
    00000032: 	movq	%r8, %r10
    00000035: 	movq	%rdx, %rsi
    00000038: 	shrq	$0x2, %rsi
    0000003c: 	addq	$0x1, %rsi
    00000040: 	leaq	(,%rsi,8), %rax
    00000048: 	movq	%rax, %rbx
    0000004b: 	leaq	(%rcx,%rax), %rdi
    0000004f: 	subq	%rax, %r10
    00000052: 	negq	%rbx
    00000055: 	cmpq	%r10, %rdi
    00000058: 	jbe	.Ltmp173 # Offset: 88
    0000005a: 	cmpq	%rcx, %r8
    0000005d: 	ja	.Ltmp174 # Offset: 93
.Ltmp173:
    00000063: 	cmpq	$0x3, %rdx
    00000067: 	jbe	.Ltmp175 # Offset: 103
    0000006d: 	movq	%rsi, %r10
    00000070: 	leaq	-0x8(%r8), %rdx
    00000074: 	movq	%rcx, %rax
    00000077: 	shrq	%r10
    0000007a: 	shlq	$0x4, %r10
    0000007e: 	addq	%rcx, %r10
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp176:
    00000088: 	movq	(%rdx), %xmm0
    0000008c: 	addq	$0x10, %rax
    00000090: 	subq	$0x10, %rdx
    00000094: 	movhps	0x8(%rdx), %xmm0
    00000098: 	movdqa	%xmm0, %xmm1
    0000009c: 	pslld	$0x10, %xmm0
    000000a1: 	psrld	$0x10, %xmm1
    000000a6: 	por	%xmm1, %xmm0
    000000aa: 	pshufd	$0xb1, %xmm0, %xmm0
    000000af: 	movups	%xmm0, -0x10(%rax)
    000000b3: 	cmpq	%rax, %r10
    000000b6: 	jne	.Ltmp176 # Offset: 182
    000000b8: 	movq	%rsi, %rax
    000000bb: 	andq	$-0x2, %rax
    000000bf: 	cmpq	%rax, %rsi
    000000c2: 	je	.Ltmp177 # Offset: 194
.Ltmp182:
    000000c4: 	movq	%rax, %rdx
    000000c7: 	notq	%rdx
    000000ca: 	movq	(%r8,%rdx,8), %xmm1
    000000d0: 	movdqa	%xmm1, %xmm0
    000000d4: 	pslld	$0x10, %xmm1
    000000d9: 	psrld	$0x10, %xmm0
    000000de: 	por	%xmm1, %xmm0
    000000e2: 	pshufd	$0xe1, %xmm0, %xmm0
    000000e7: 	movq	%xmm0, (%rcx,%rax,8)
.Ltmp177:
    000000ec: 	shlq	$0x2, %rsi
    000000f0: 	addq	%rbx, %r9
.Ltmp181:
    000000f3: 	cmpq	%rsi, %r11
    000000f6: 	jle	.Ltmp178 # Offset: 246
    000000fc: 	movq	%r11, %rcx
    000000ff: 	movq	%r9, %r8
    00000102: 	subq	%rsi, %rcx
    00000105: 	leaq	(%rcx,%rcx), %rax
    00000109: 	subq	%rax, %r8
    0000010c: 	leaq	(%rdi,%rax), %rdx
    00000110: 	leaq	0x2(%r8), %rax
    00000114: 	cmpq	%rax, %rdx
    00000117: 	leaq	0x2(%r9), %rdx
    0000011b: 	setbe	%al
    0000011e: 	cmpq	%rdx, %rdi
    00000121: 	setae	%dl
    00000124: 	orb	%dl, %al
    00000126: 	je	.Ltmp179 # Offset: 294
    0000012c: 	leaq	-0x1(%rcx), %rax
    00000130: 	cmpq	$0x2, %rax
    00000134: 	jbe	.Ltmp179 # Offset: 308
    0000013a: 	movq	%rcx, %rdx
    0000013d: 	movq	-0x6(%r9), %xmm0
    00000143: 	andq	$-0x4, %rdx
    00000147: 	movq	%rdx, %rax
    0000014a: 	pshuflw	$0x1b, %xmm0, %xmm0
    0000014f: 	addq	%rdx, %rsi
    00000152: 	negq	%rax
    00000155: 	movq	%xmm0, (%rdi)
    00000159: 	addq	%rax, %rax
    0000015c: 	addq	%rax, %r9
    0000015f: 	subq	%rax, %rdi
    00000162: 	cmpq	%rdx, %rcx
    00000165: 	je	.Ltmp178 # Offset: 357
    00000167: 	movzwl	(%r9), %eax
    0000016b: 	movw	%ax, (%rdi)
    0000016e: 	leaq	0x1(%rsi), %rax
    00000172: 	cmpq	%rax, %r11
    00000175: 	jle	.Ltmp178 # Offset: 373
    00000177: 	movzwl	-0x2(%r9), %eax
    0000017c: 	addq	$0x2, %rsi
    00000180: 	movw	%ax, 0x2(%rdi)
    00000184: 	cmpq	%rsi, %r11
    00000187: 	jle	.Ltmp178 # Offset: 391
    00000189: 	movzwl	-0x4(%r9), %eax
    0000018e: 	movw	%ax, 0x4(%rdi)
.Ltmp178:
    00000192: 	popq	%rbx
    00000193: 	retq # Offset: 403
    00000194: 	nopl	(%rax) # Size: 4
.Ltmp174:
    00000198: 	movq	%r9, %rax
    0000019b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp180:
    000001a0: 	movq	-0x6(%rax), %xmm1
    000001a5: 	addq	$0x8, %rcx
    000001a9: 	subq	$0x8, %rax
    000001ad: 	movdqa	%xmm1, %xmm0
    000001b1: 	psrld	$0x10, %xmm1
    000001b6: 	pslld	$0x10, %xmm0
    000001bb: 	por	%xmm1, %xmm0
    000001bf: 	pshufd	$0xe1, %xmm0, %xmm0
    000001c4: 	movq	%xmm0, -0x8(%rcx)
    000001c9: 	cmpq	%rcx, %rdi
    000001cc: 	jne	.Ltmp180 # Offset: 460
    000001ce: 	jmp	.Ltmp177 # Offset: 462
    000001d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp179:
    000001d8: 	movzwl	(%r9), %eax
    000001dc: 	movw	%ax, (%rdi)
    000001df: 	leaq	0x1(%rsi), %rax
    000001e3: 	cmpq	%rax, %r11
    000001e6: 	jle	.Ltmp178 # Offset: 486
    000001e8: 	movzwl	-0x2(%r9), %eax
    000001ed: 	movw	%ax, 0x2(%rdi)
    000001f1: 	leaq	0x2(%rsi), %rax
    000001f5: 	cmpq	%rax, %r11
    000001f8: 	jle	.Ltmp178 # Offset: 504
    000001fa: 	movzwl	-0x4(%r9), %eax
    000001ff: 	addq	$0x3, %rsi
    00000203: 	movw	%ax, 0x4(%rdi)
    00000207: 	cmpq	%rsi, %r11
    0000020a: 	jle	.Ltmp178 # Offset: 522
    0000020c: 	movzwl	-0x6(%r9), %eax
    00000211: 	movw	%ax, 0x6(%rdi)
    00000215: 	popq	%rbx
    00000216: 	retq # Offset: 534
    00000217: 	nopw	(%rax,%rax) # Size: 9
.Ltmp171:
    00000220: 	retq # Offset: 544
    00000221: 	nopl	(%rax) # Size: 7
.Ltmp172:
    00000228: 	movq	%rdx, %rdi
    0000022b: 	xorl	%esi, %esi
    0000022d: 	jmp	.Ltmp181 # Offset: 557
.Ltmp175:
    00000232: 	xorl	%eax, %eax
    00000234: 	jmp	.Ltmp182 # Offset: 564
DWARF CFI Instructions:
    <empty>
End of Function "_Z18fast_reverse_copy2IPsS0_EvT_S1_T0_"

Binary Function "_Z18fast_reverse_copy3IPsS0_EvT_S1_T0_" after disassembly {
  Number      : 71
  State       : disassembled
  Address     : 0x4410
  Size        : 0x1e7
  MaxSize     : 0x1f0
  Offset      : 0x4410
  Section     : .text
  Orc Section : .local.text._Z18fast_reverse_copy3IPsS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB070:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp183 # Offset: 10
    00000010: 	movq	%rsi, %rax
    00000013: 	subq	%rdi, %rax
    00000016: 	leaq	-0x2(%rsi), %rdi
    0000001a: 	movq	%rax, %r9
    0000001d: 	sarq	%r9
    00000020: 	cmpq	$0xe, %rax
    00000024: 	jle	.Ltmp184 # Offset: 36
    0000002a: 	leaq	-0x8(%r9), %rcx
    0000002e: 	subq	$0x10, %rsi
    00000032: 	xorl	%eax, %eax
    00000034: 	shrq	$0x3, %rcx
    00000038: 	addq	$0x1, %rcx
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp185:
    00000040: 	movdqu	(%rsi), %xmm1
    00000044: 	movq	%rax, %rdx
    00000047: 	addq	$0x1, %rax
    0000004b: 	subq	$0x10, %rsi
    0000004f: 	shlq	$0x4, %rdx
    00000053: 	movdqa	%xmm1, %xmm0
    00000057: 	pslld	$0x10, %xmm1
    0000005c: 	psrld	$0x10, %xmm0
    00000061: 	por	%xmm1, %xmm0
    00000065: 	pshufd	$0x1b, %xmm0, %xmm0
    0000006a: 	movups	%xmm0, (%r8,%rdx)
    0000006f: 	cmpq	%rax, %rcx
    00000072: 	ja	.Ltmp185 # Offset: 114
    00000074: 	movq	%rcx, %rax
    00000077: 	shlq	$0x3, %rcx
    0000007b: 	shlq	$0x4, %rax
    0000007f: 	addq	%rax, %r8
    00000082: 	subq	%rax, %rdi
.Ltmp188:
    00000085: 	cmpq	%rcx, %r9
    00000088: 	jle	.Ltmp183 # Offset: 136
    0000008e: 	movq	%r9, %rsi
    00000091: 	movq	%rdi, %r10
    00000094: 	subq	%rcx, %rsi
    00000097: 	leaq	(%rsi,%rsi), %rax
    0000009b: 	subq	%rax, %r10
    0000009e: 	leaq	(%r8,%rax), %rdx
    000000a2: 	leaq	0x2(%r10), %rax
    000000a6: 	cmpq	%rax, %rdx
    000000a9: 	leaq	0x2(%rdi), %rdx
    000000ad: 	setbe	%al
    000000b0: 	cmpq	%rdx, %r8
    000000b3: 	setae	%dl
    000000b6: 	orb	%dl, %al
    000000b8: 	je	.Ltmp186 # Offset: 184
    000000be: 	leaq	-0x1(%rsi), %rax
    000000c2: 	cmpq	$0x2, %rax
    000000c6: 	jbe	.Ltmp186 # Offset: 198
    000000cc: 	movq	-0x6(%rdi), %xmm0
    000000d1: 	movq	%rsi, %rax
    000000d4: 	shrq	$0x2, %rax
    000000d8: 	pshuflw	$0x1b, %xmm0, %xmm0
    000000dd: 	movq	%xmm0, (%r8)
    000000e2: 	cmpq	$0x1, %rax
    000000e6: 	je	.Ltmp187 # Offset: 230
    000000e8: 	movq	-0xe(%rdi), %xmm0
    000000ed: 	pshuflw	$0x1b, %xmm0, %xmm0
    000000f2: 	movq	%xmm0, 0x8(%r8)
.Ltmp187:
    000000f8: 	movq	%rsi, %rdx
    000000fb: 	andq	$-0x4, %rdx
    000000ff: 	movq	%rdx, %rax
    00000102: 	addq	%rdx, %rcx
    00000105: 	negq	%rax
    00000108: 	addq	%rax, %rax
    0000010b: 	addq	%rax, %rdi
    0000010e: 	subq	%rax, %r8
    00000111: 	cmpq	%rdx, %rsi
    00000114: 	je	.Ltmp183 # Offset: 276
    0000011a: 	movzwl	(%rdi), %eax
    0000011d: 	movw	%ax, (%r8)
    00000121: 	leaq	0x1(%rcx), %rax
    00000125: 	cmpq	%rax, %r9
    00000128: 	jle	.Ltmp183 # Offset: 296
    0000012e: 	movzwl	-0x2(%rdi), %eax
    00000132: 	addq	$0x2, %rcx
    00000136: 	movw	%ax, 0x2(%r8)
    0000013b: 	cmpq	%rcx, %r9
    0000013e: 	jle	.Ltmp183 # Offset: 318
    00000144: 	movzwl	-0x4(%rdi), %eax
    00000148: 	movw	%ax, 0x4(%r8)
    0000014d: 	retq # Offset: 333
    0000014e: 	nop # Size: 2
.Ltmp186:
    00000150: 	movzwl	(%rdi), %eax
    00000153: 	movw	%ax, (%r8)
    00000157: 	leaq	0x1(%rcx), %rax
    0000015b: 	cmpq	%rax, %r9
    0000015e: 	jle	.Ltmp183 # Offset: 350
    00000160: 	movzwl	-0x2(%rdi), %eax
    00000164: 	movw	%ax, 0x2(%r8)
    00000169: 	leaq	0x2(%rcx), %rax
    0000016d: 	cmpq	%rax, %r9
    00000170: 	jle	.Ltmp183 # Offset: 368
    00000172: 	movzwl	-0x4(%rdi), %eax
    00000176: 	movw	%ax, 0x4(%r8)
    0000017b: 	leaq	0x3(%rcx), %rax
    0000017f: 	cmpq	%rax, %r9
    00000182: 	jle	.Ltmp183 # Offset: 386
    00000184: 	movzwl	-0x6(%rdi), %eax
    00000188: 	movw	%ax, 0x6(%r8)
    0000018d: 	leaq	0x4(%rcx), %rax
    00000191: 	cmpq	%rax, %r9
    00000194: 	jle	.Ltmp183 # Offset: 404
    00000196: 	movzwl	-0x8(%rdi), %eax
    0000019a: 	movw	%ax, 0x8(%r8)
    0000019f: 	leaq	0x5(%rcx), %rax
    000001a3: 	cmpq	%rax, %r9
    000001a6: 	jle	.Ltmp183 # Offset: 422
    000001a8: 	movzwl	-0xa(%rdi), %eax
    000001ac: 	movw	%ax, 0xa(%r8)
    000001b1: 	leaq	0x6(%rcx), %rax
    000001b5: 	cmpq	%rax, %r9
    000001b8: 	jle	.Ltmp183 # Offset: 440
    000001ba: 	movzwl	-0xc(%rdi), %eax
    000001be: 	addq	$0x7, %rcx
    000001c2: 	movw	%ax, 0xc(%r8)
    000001c7: 	cmpq	%rcx, %r9
    000001ca: 	jle	.Ltmp183 # Offset: 458
    000001cc: 	movzwl	-0xe(%rdi), %eax
    000001d0: 	movw	%ax, 0xe(%r8)
.Ltmp183:
    000001d5: 	retq # Offset: 469
    000001d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp184:
    000001e0: 	xorl	%ecx, %ecx
    000001e2: 	jmp	.Ltmp188 # Offset: 482
DWARF CFI Instructions:
    <empty>
End of Function "_Z18fast_reverse_copy3IPsS0_EvT_S1_T0_"

Binary Function "_Z18fast_reverse_copy4IPsS0_EvT_S1_T0_" after disassembly {
  Number      : 72
  State       : disassembled
  Address     : 0x4600
  Size        : 0x217
  MaxSize     : 0x220
  Offset      : 0x4600
  Section     : .text
  Orc Section : .local.text._Z18fast_reverse_copy4IPsS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB071:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp189 # Offset: 10
    00000010: 	movq	%rsi, %rax
    00000013: 	subq	%rdi, %rax
    00000016: 	leaq	-0x2(%rsi), %rdi
    0000001a: 	movq	%rax, %r9
    0000001d: 	sarq	%r9
    00000020: 	cmpq	$0xe, %rax
    00000024: 	jle	.Ltmp190 # Offset: 36
    0000002a: 	leaq	-0x8(%r9), %rcx
    0000002e: 	movdqa	DATAat0x27510(%rip), %xmm4
    00000036: 	movdqa	DATAat0x27520(%rip), %xmm3
    0000003e: 	xorl	%eax, %eax
    00000040: 	shrq	$0x3, %rcx
    00000044: 	subq	$0x10, %rsi
    00000048: 	addq	$0x1, %rcx
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp191:
    00000050: 	movdqu	(%rsi), %xmm1
    00000054: 	movq	%rax, %rdx
    00000057: 	addq	$0x1, %rax
    0000005b: 	subq	$0x10, %rsi
    0000005f: 	shlq	$0x4, %rdx
    00000063: 	movdqa	%xmm1, %xmm0
    00000067: 	movdqa	%xmm1, %xmm2
    0000006b: 	psrlq	$0x10, %xmm0
    00000070: 	psllq	$0x10, %xmm2
    00000075: 	pand	%xmm3, %xmm2
    00000079: 	pand	%xmm4, %xmm0
    0000007d: 	pxor	%xmm2, %xmm0
    00000081: 	movdqa	%xmm1, %xmm2
    00000085: 	psrlq	$0x30, %xmm2
    0000008a: 	psllq	$0x30, %xmm1
    0000008f: 	pxor	%xmm2, %xmm1
    00000093: 	pxor	%xmm1, %xmm0
    00000097: 	shufpd	$0x1, %xmm0, %xmm0
    0000009c: 	movups	%xmm0, (%r8,%rdx)
    000000a1: 	cmpq	%rax, %rcx
    000000a4: 	ja	.Ltmp191 # Offset: 164
    000000a6: 	movq	%rcx, %rax
    000000a9: 	shlq	$0x3, %rcx
    000000ad: 	shlq	$0x4, %rax
    000000b1: 	addq	%rax, %r8
    000000b4: 	subq	%rax, %rdi
.Ltmp194:
    000000b7: 	cmpq	%rcx, %r9
    000000ba: 	jle	.Ltmp189 # Offset: 186
    000000c0: 	movq	%r9, %rsi
    000000c3: 	movq	%rdi, %rdx
    000000c6: 	subq	%rcx, %rsi
    000000c9: 	leaq	(%rsi,%rsi), %rax
    000000cd: 	subq	%rax, %rdx
    000000d0: 	addq	%r8, %rax
    000000d3: 	addq	$0x2, %rdx
    000000d7: 	cmpq	%rax, %rdx
    000000da: 	leaq	0x2(%rdi), %rdx
    000000de: 	setae	%al
    000000e1: 	cmpq	%rdx, %r8
    000000e4: 	setae	%dl
    000000e7: 	orb	%dl, %al
    000000e9: 	je	.Ltmp192 # Offset: 233
    000000ef: 	leaq	-0x1(%rsi), %rax
    000000f3: 	cmpq	$0x2, %rax
    000000f7: 	jbe	.Ltmp192 # Offset: 247
    000000fd: 	movq	-0x6(%rdi), %xmm0
    00000102: 	movq	%rsi, %rax
    00000105: 	shrq	$0x2, %rax
    00000109: 	pshuflw	$0x1b, %xmm0, %xmm0
    0000010e: 	movq	%xmm0, (%r8)
    00000113: 	cmpq	$0x1, %rax
    00000117: 	je	.Ltmp193 # Offset: 279
    00000119: 	movq	-0xe(%rdi), %xmm0
    0000011e: 	pshuflw	$0x1b, %xmm0, %xmm0
    00000123: 	movq	%xmm0, 0x8(%r8)
.Ltmp193:
    00000129: 	movq	%rsi, %rdx
    0000012c: 	andq	$-0x4, %rdx
    00000130: 	movq	%rdx, %rax
    00000133: 	addq	%rdx, %rcx
    00000136: 	negq	%rax
    00000139: 	addq	%rax, %rax
    0000013c: 	addq	%rax, %rdi
    0000013f: 	subq	%rax, %r8
    00000142: 	cmpq	%rdx, %rsi
    00000145: 	je	.Ltmp189 # Offset: 325
    0000014b: 	movzwl	(%rdi), %eax
    0000014e: 	movw	%ax, (%r8)
    00000152: 	leaq	0x1(%rcx), %rax
    00000156: 	cmpq	%rax, %r9
    00000159: 	jle	.Ltmp189 # Offset: 345
    0000015f: 	movzwl	-0x2(%rdi), %eax
    00000163: 	addq	$0x2, %rcx
    00000167: 	movw	%ax, 0x2(%r8)
    0000016c: 	cmpq	%rcx, %r9
    0000016f: 	jle	.Ltmp189 # Offset: 367
    00000175: 	movzwl	-0x4(%rdi), %eax
    00000179: 	movw	%ax, 0x4(%r8)
    0000017e: 	retq # Offset: 382
    0000017f: 	nop # Size: 1
.Ltmp192:
    00000180: 	movzwl	(%rdi), %eax
    00000183: 	movw	%ax, (%r8)
    00000187: 	leaq	0x1(%rcx), %rax
    0000018b: 	cmpq	%rax, %r9
    0000018e: 	jle	.Ltmp189 # Offset: 398
    00000190: 	movzwl	-0x2(%rdi), %eax
    00000194: 	movw	%ax, 0x2(%r8)
    00000199: 	leaq	0x2(%rcx), %rax
    0000019d: 	cmpq	%rax, %r9
    000001a0: 	jle	.Ltmp189 # Offset: 416
    000001a2: 	movzwl	-0x4(%rdi), %eax
    000001a6: 	movw	%ax, 0x4(%r8)
    000001ab: 	leaq	0x3(%rcx), %rax
    000001af: 	cmpq	%rax, %r9
    000001b2: 	jle	.Ltmp189 # Offset: 434
    000001b4: 	movzwl	-0x6(%rdi), %eax
    000001b8: 	movw	%ax, 0x6(%r8)
    000001bd: 	leaq	0x4(%rcx), %rax
    000001c1: 	cmpq	%rax, %r9
    000001c4: 	jle	.Ltmp189 # Offset: 452
    000001c6: 	movzwl	-0x8(%rdi), %eax
    000001ca: 	movw	%ax, 0x8(%r8)
    000001cf: 	leaq	0x5(%rcx), %rax
    000001d3: 	cmpq	%rax, %r9
    000001d6: 	jle	.Ltmp189 # Offset: 470
    000001d8: 	movzwl	-0xa(%rdi), %eax
    000001dc: 	movw	%ax, 0xa(%r8)
    000001e1: 	leaq	0x6(%rcx), %rax
    000001e5: 	cmpq	%rax, %r9
    000001e8: 	jle	.Ltmp189 # Offset: 488
    000001ea: 	movzwl	-0xc(%rdi), %eax
    000001ee: 	addq	$0x7, %rcx
    000001f2: 	movw	%ax, 0xc(%r8)
    000001f7: 	cmpq	%rcx, %r9
    000001fa: 	jle	.Ltmp189 # Offset: 506
    000001fc: 	movzwl	-0xe(%rdi), %eax
    00000200: 	movw	%ax, 0xe(%r8)
.Ltmp189:
    00000205: 	retq # Offset: 517
    00000206: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp190:
    00000210: 	xorl	%ecx, %ecx
    00000212: 	jmp	.Ltmp194 # Offset: 530
DWARF CFI Instructions:
    <empty>
End of Function "_Z18fast_reverse_copy4IPsS0_EvT_S1_T0_"

Binary Function "_ZSt7reverseI20BidirectionalPointerIiEEvT_S2_" after disassembly {
  Number      : 73
  State       : disassembled
  Address     : 0x4820
  Size        : 0x2c
  MaxSize     : 0x30
  Offset      : 0x4820
  Section     : .text
  Orc Section : .local.text._ZSt7reverseI20BidirectionalPointerIiEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB072:
    00000000: 	endbr64
    00000004: 	jmp	.Ltmp195 # Offset: 4
    00000006: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp197:
    00000010: 	subq	$0x4, %rsi
    00000014: 	cmpq	%rsi, %rdi
    00000017: 	je	.Ltmp196 # Offset: 23
    00000019: 	movl	(%rdi), %eax
    0000001b: 	movl	(%rsi), %edx
    0000001d: 	addq	$0x4, %rdi
    00000021: 	movl	%edx, -0x4(%rdi)
    00000024: 	movl	%eax, (%rsi)
.Ltmp195:
    00000026: 	cmpq	%rsi, %rdi
    00000029: 	jne	.Ltmp197 # Offset: 41
.Ltmp196:
    0000002b: 	retq # Offset: 43
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt7reverseI20BidirectionalPointerIiEEvT_S2_"

Binary Function "_Z17my_simple_reverseI20BidirectionalPointerIiEEvT_S2_" after disassembly {
  Number      : 74
  State       : disassembled
  Address     : 0x4850
  Size        : 0x2c
  MaxSize     : 0x30
  Offset      : 0x4850
  Section     : .text
  Orc Section : .local.text._Z17my_simple_reverseI20BidirectionalPointerIiEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB073:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp198 # Offset: 7
    00000009: 	nopl	(%rax) # Size: 7
.Ltmp199:
    00000010: 	subq	$0x4, %rsi
    00000014: 	cmpq	%rdi, %rsi
    00000017: 	je	.Ltmp198 # Offset: 23
    00000019: 	movl	(%rsi), %edx
    0000001b: 	movl	(%rdi), %eax
    0000001d: 	addq	$0x4, %rdi
    00000021: 	movl	%edx, -0x4(%rdi)
    00000024: 	movl	%eax, (%rsi)
    00000026: 	cmpq	%rdi, %rsi
    00000029: 	jne	.Ltmp199 # Offset: 41
.Ltmp198:
    0000002b: 	retq # Offset: 43
DWARF CFI Instructions:
    <empty>
End of Function "_Z17my_simple_reverseI20BidirectionalPointerIiEEvT_S2_"

Binary Function "_Z15my_fast_reverseI20BidirectionalPointerIiEEvT_S2_" after disassembly {
  Number      : 75
  State       : disassembled
  Address     : 0x4880
  Size        : 0x2c
  MaxSize     : 0x30
  Offset      : 0x4880
  Section     : .text
  Orc Section : .local.text._Z15my_fast_reverseI20BidirectionalPointerIiEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB074:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp200 # Offset: 7
    00000009: 	nopl	(%rax) # Size: 7
.Ltmp201:
    00000010: 	subq	$0x4, %rsi
    00000014: 	cmpq	%rdi, %rsi
    00000017: 	je	.Ltmp200 # Offset: 23
    00000019: 	movl	(%rsi), %edx
    0000001b: 	movl	(%rdi), %eax
    0000001d: 	addq	$0x4, %rdi
    00000021: 	movl	%edx, -0x4(%rdi)
    00000024: 	movl	%eax, (%rsi)
    00000026: 	cmpq	%rdi, %rsi
    00000029: 	jne	.Ltmp201 # Offset: 41
.Ltmp200:
    0000002b: 	retq # Offset: 43
DWARF CFI Instructions:
    <empty>
End of Function "_Z15my_fast_reverseI20BidirectionalPointerIiEEvT_S2_"

Binary Function "_ZSt7reverseIPiEvT_S1_" after disassembly {
  Number      : 76
  State       : disassembled
  Address     : 0x48b0
  Size        : 0x145
  MaxSize     : 0x150
  Offset      : 0x48b0
  Section     : .text
  Orc Section : .local.text._ZSt7reverseIPiEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB075:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp202 # Offset: 10
    00000010: 	leaq	-0x4(%rsi), %rdx
    00000014: 	movq	%rsi, %rdi
    00000017: 	cmpq	%rdx, %rax
    0000001a: 	jae	.Ltmp202 # Offset: 26
    00000020: 	leaq	-0x5(%rsi), %rsi
    00000024: 	movq	%rdi, %r11
    00000027: 	pushq	%rbx
    00000028: 	movq	%rax, %rcx
    0000002b: 	subq	%rax, %rsi
    0000002e: 	movq	%rsi, %r10
    00000031: 	shrq	$0x3, %r10
    00000035: 	leaq	0x1(%r10), %r9
    00000039: 	leaq	(,%r9,4), %r8
    00000041: 	subq	%r8, %r11
    00000044: 	leaq	(%rax,%r8), %rbx
    00000048: 	cmpq	%r11, %rbx
    0000004b: 	setbe	%r8b
    0000004f: 	cmpq	%rdi, %rax
    00000052: 	setae	%r11b
    00000056: 	orb	%r11b, %r8b
    00000059: 	je	.Ltmp203 # Offset: 89
    0000005f: 	cmpq	$0x7, %rsi
    00000063: 	jbe	.Ltmp203 # Offset: 99
    00000069: 	cmpq	$0x17, %rsi
    0000006d: 	jbe	.Ltmp204 # Offset: 109
    00000073: 	movq	%r9, %r8
    00000076: 	leaq	-0x10(%rdi), %rsi
    0000007a: 	shrq	$0x2, %r8
    0000007e: 	shlq	$0x4, %r8
    00000082: 	addq	%rax, %r8
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp205:
    00000088: 	movdqu	(%rsi), %xmm2
    0000008c: 	movdqu	(%rcx), %xmm0
    00000090: 	addq	$0x10, %rcx
    00000094: 	subq	$0x10, %rsi
    00000098: 	pshufd	$0x1b, %xmm2, %xmm1
    0000009d: 	pshufd	$0x1b, %xmm0, %xmm0
    000000a2: 	movups	%xmm1, -0x10(%rcx)
    000000a6: 	movups	%xmm0, 0x10(%rsi)
    000000aa: 	cmpq	%rcx, %r8
    000000ad: 	jne	.Ltmp205 # Offset: 173
    000000af: 	movq	%r9, %rsi
    000000b2: 	andq	$-0x4, %rsi
    000000b6: 	leaq	(,%rsi,4), %r8
    000000be: 	leaq	(%rax,%r8), %rcx
    000000c2: 	subq	%r8, %rdx
    000000c5: 	cmpq	%rsi, %r9
    000000c8: 	je	.Ltmp206 # Offset: 200
.Ltmp208:
    000000ca: 	subq	%rsi, %r9
    000000cd: 	cmpq	%rsi, %r10
    000000d0: 	je	.Ltmp207 # Offset: 208
    000000d2: 	shlq	$0x2, %rsi
    000000d6: 	subq	%rsi, %rdi
    000000d9: 	addq	%rsi, %rax
    000000dc: 	movq	-0x8(%rdi), %xmm1
    000000e1: 	movq	(%rax), %xmm0
    000000e5: 	pshufd	$0xe1, %xmm1, %xmm1
    000000ea: 	pshufd	$0xe1, %xmm0, %xmm0
    000000ef: 	movq	%xmm1, (%rax)
    000000f3: 	movq	%r9, %rax
    000000f6: 	andq	$-0x2, %rax
    000000fa: 	movq	%xmm0, -0x8(%rdi)
    000000ff: 	leaq	(,%rax,4), %rsi
    00000107: 	addq	%rsi, %rcx
    0000010a: 	subq	%rsi, %rdx
    0000010d: 	cmpq	%rax, %r9
    00000110: 	je	.Ltmp206 # Offset: 272
.Ltmp207:
    00000112: 	movl	(%rcx), %eax
    00000114: 	movl	(%rdx), %esi
    00000116: 	movl	%esi, (%rcx)
    00000118: 	movl	%eax, (%rdx)
.Ltmp206:
    0000011a: 	popq	%rbx
    0000011b: 	retq # Offset: 283
    0000011c: 	nopl	(%rax) # Size: 4
.Ltmp203:
    00000120: 	movl	(%rax), %ecx
    00000122: 	movl	(%rdx), %esi
    00000124: 	addq	$0x4, %rax
    00000128: 	subq	$0x4, %rdx
    0000012c: 	movl	%esi, -0x4(%rax)
    0000012f: 	movl	%ecx, 0x4(%rdx)
    00000132: 	cmpq	%rdx, %rax
    00000135: 	jb	.Ltmp203 # Offset: 309
    00000137: 	jmp	.Ltmp206 # Offset: 311
    00000139: 	nopl	(%rax) # Size: 7
.Ltmp202:
    00000140: 	retq # Offset: 320
.Ltmp204:
    00000141: 	xorl	%esi, %esi
    00000143: 	jmp	.Ltmp208 # Offset: 323
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt7reverseIPiEvT_S1_"

Binary Function "_Z17my_simple_reverseIPiEvT_S1_" after disassembly {
  Number      : 77
  State       : disassembled
  Address     : 0x4a00
  Size        : 0x163
  MaxSize     : 0x170
  Offset      : 0x4a00
  Section     : .text
  Orc Section : .local.text._Z17my_simple_reverseIPiEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB076:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movq	%rsi, %r9
    0000000a: 	cmpq	%rsi, %rdi
    0000000d: 	je	.Ltmp209 # Offset: 13
    00000013: 	subq	%rdi, %rsi
    00000016: 	leaq	-0x4(%r9), %rdx
    0000001a: 	movq	%rsi, %rax
    0000001d: 	movq	%rsi, %rdi
    00000020: 	sarq	$0x2, %rax
    00000024: 	shrq	$0x3f, %rdi
    00000028: 	addq	%rax, %rdi
    0000002b: 	sarq	%rdi
    0000002e: 	cmpq	$0x4, %rsi
    00000032: 	jle	.Ltmp209 # Offset: 50
    00000038: 	leaq	(,%rdi,4), %rax
    00000040: 	movq	%r9, %r8
    00000043: 	subq	%rax, %r8
    00000046: 	leaq	(%rcx,%rax), %r10
    0000004a: 	cmpq	%r8, %r10
    0000004d: 	setbe	%al
    00000050: 	cmpq	%r9, %rcx
    00000053: 	setae	%r8b
    00000057: 	orb	%r8b, %al
    0000005a: 	je	.Ltmp210 # Offset: 90
    00000060: 	cmpq	$0xc, %rsi
    00000064: 	jle	.Ltmp210 # Offset: 100
    0000006a: 	cmpq	$0x1c, %rsi
    0000006e: 	jle	.Ltmp211 # Offset: 110
    00000074: 	movq	%rdi, %r8
    00000077: 	movq	%rcx, %rax
    0000007a: 	leaq	-0x10(%r9), %rsi
    0000007e: 	shrq	$0x2, %r8
    00000082: 	shlq	$0x4, %r8
    00000086: 	addq	%rcx, %r8
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp212:
    00000090: 	movdqu	(%rsi), %xmm2
    00000094: 	movdqu	(%rax), %xmm0
    00000098: 	addq	$0x10, %rax
    0000009c: 	subq	$0x10, %rsi
    000000a0: 	pshufd	$0x1b, %xmm2, %xmm1
    000000a5: 	pshufd	$0x1b, %xmm0, %xmm0
    000000aa: 	movups	%xmm1, -0x10(%rax)
    000000ae: 	movups	%xmm0, 0x10(%rsi)
    000000b2: 	cmpq	%r8, %rax
    000000b5: 	jne	.Ltmp212 # Offset: 181
    000000b7: 	movq	%rdi, %rsi
    000000ba: 	andq	$-0x4, %rsi
    000000be: 	leaq	(,%rsi,4), %rax
    000000c6: 	leaq	(%rcx,%rax), %r8
    000000ca: 	subq	%rax, %rdx
    000000cd: 	cmpq	%rsi, %rdi
    000000d0: 	je	.Ltmp213 # Offset: 208
.Ltmp216:
    000000d6: 	subq	%rsi, %rdi
    000000d9: 	cmpq	$0x1, %rdi
    000000dd: 	je	.Ltmp214 # Offset: 221
    000000df: 	shlq	$0x2, %rsi
    000000e3: 	movq	%r9, %rax
    000000e6: 	addq	%rsi, %rcx
    000000e9: 	subq	%rsi, %rax
    000000ec: 	movq	(%rcx), %xmm0
    000000f0: 	movq	-0x8(%rax), %xmm1
    000000f5: 	pshufd	$0xe1, %xmm0, %xmm0
    000000fa: 	pshufd	$0xe1, %xmm1, %xmm1
    000000ff: 	movq	%xmm1, (%rcx)
    00000103: 	movq	%xmm0, -0x8(%rax)
    00000108: 	movq	%rdi, %rax
    0000010b: 	andq	$-0x2, %rax
    0000010f: 	leaq	(,%rax,4), %rcx
    00000117: 	addq	%rcx, %r8
    0000011a: 	subq	%rcx, %rdx
    0000011d: 	cmpq	%rax, %rdi
    00000120: 	je	.Ltmp209 # Offset: 288
.Ltmp214:
    00000122: 	movl	(%r8), %eax
    00000125: 	movl	(%rdx), %ecx
    00000127: 	movl	%ecx, (%r8)
    0000012a: 	movl	%eax, (%rdx)
    0000012c: 	retq # Offset: 300
    0000012d: 	nopl	(%rax) # Size: 3
.Ltmp210:
    00000130: 	xorl	%eax, %eax
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp215:
    00000138: 	movl	(%rdx), %r8d
    0000013b: 	movl	(%rcx,%rax,4), %esi
    0000013e: 	subq	$0x4, %rdx
    00000142: 	movl	%r8d, (%rcx,%rax,4)
    00000146: 	addq	$0x1, %rax
    0000014a: 	movl	%esi, 0x4(%rdx)
    0000014d: 	cmpq	%rax, %rdi
    00000150: 	jg	.Ltmp215 # Offset: 336
.Ltmp209:
    00000152: 	retq # Offset: 338
    00000153: 	nopl	(%rax,%rax) # Size: 5
.Ltmp213:
    00000158: 	retq # Offset: 344
.Ltmp211:
    00000159: 	movq	%rcx, %r8
    0000015c: 	xorl	%esi, %esi
    0000015e: 	jmp	.Ltmp216 # Offset: 350
DWARF CFI Instructions:
    <empty>
End of Function "_Z17my_simple_reverseIPiEvT_S1_"

Binary Function "_Z13fast_reverse2IPiEvT_S1_" after disassembly {
  Number      : 78
  State       : disassembled
  Address     : 0x4b70
  Size        : 0x277
  MaxSize     : 0x280
  Offset      : 0x4b70
  Section     : .text
  Orc Section : .local.text._Z13fast_reverse2IPiEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB077:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp217 # Offset: 7
    0000000d: 	movq	%rsi, %rcx
    00000010: 	movq	%rsi, %rdx
    00000013: 	movq	%rdi, %rax
    00000016: 	pushq	%rbx
    00000017: 	subq	%rdi, %rcx
    0000001a: 	leaq	-0x4(%rdx), %r8
    0000001e: 	movq	%rcx, %rsi
    00000021: 	movq	%rcx, %rdi
    00000024: 	sarq	$0x2, %rsi
    00000028: 	shrq	$0x3f, %rdi
    0000002c: 	addq	%rsi, %rdi
    0000002f: 	sarq	%rdi
    00000032: 	cmpq	$0x1c, %rcx
    00000036: 	jle	.Ltmp218 # Offset: 54
    0000003c: 	leaq	-0x4(%rdi), %rcx
    00000040: 	movq	%rdx, %rbx
    00000043: 	shrq	$0x2, %rcx
    00000047: 	leaq	0x1(%rcx), %rsi
    0000004b: 	movq	%rsi, %r10
    0000004e: 	shlq	$0x4, %r10
    00000052: 	movq	%r10, %r11
    00000055: 	leaq	(%rax,%r10), %r9
    00000059: 	subq	%r10, %rbx
    0000005c: 	negq	%r11
    0000005f: 	cmpq	%rbx, %r9
    00000062: 	jbe	.Ltmp219 # Offset: 98
    00000064: 	cmpq	%rdx, %rax
    00000067: 	jb	.Ltmp220 # Offset: 103
.Ltmp219:
    0000006d: 	subq	$0x10, %rdx
    00000071: 	xorl	%ecx, %ecx
    00000073: 	nopl	(%rax,%rax) # Size: 5
.Ltmp221:
    00000078: 	movdqu	(%rax), %xmm0
    0000007c: 	movdqu	(%rdx), %xmm2
    00000080: 	addq	$0x1, %rcx
    00000084: 	subq	$0x10, %rdx
    00000088: 	addq	$0x10, %rax
    0000008c: 	pshufd	$0x1b, %xmm2, %xmm1
    00000091: 	pshufd	$0x1b, %xmm0, %xmm0
    00000096: 	movups	%xmm1, -0x10(%rax)
    0000009a: 	movups	%xmm0, 0x10(%rdx)
    0000009e: 	cmpq	%rsi, %rcx
    000000a1: 	jb	.Ltmp221 # Offset: 161
.Ltmp227:
    000000a3: 	shlq	$0x2, %rsi
    000000a7: 	addq	%r11, %r8
.Ltmp228:
    000000aa: 	cmpq	%rsi, %rdi
    000000ad: 	jle	.Ltmp222 # Offset: 173
    000000b3: 	movq	%rdi, %rax
    000000b6: 	movq	%r8, %r10
    000000b9: 	subq	%rsi, %rax
    000000bc: 	leaq	(,%rax,4), %rdx
    000000c4: 	subq	%rdx, %r10
    000000c7: 	leaq	(%r9,%rdx), %rcx
    000000cb: 	leaq	0x4(%r10), %rdx
    000000cf: 	cmpq	%rdx, %rcx
    000000d2: 	leaq	0x4(%r8), %rcx
    000000d6: 	setbe	%dl
    000000d9: 	cmpq	%rcx, %r9
    000000dc: 	setae	%cl
    000000df: 	orb	%cl, %dl
    000000e1: 	je	.Ltmp223 # Offset: 225
    000000e7: 	cmpq	$0x1, %rax
    000000eb: 	je	.Ltmp223 # Offset: 235
    000000f1: 	leaq	-0x1(%rax), %rdx
    000000f5: 	cmpq	$0x2, %rdx
    000000f9: 	jbe	.Ltmp224 # Offset: 249
    000000ff: 	movdqu	(%r9), %xmm0
    00000104: 	movdqu	-0xc(%r8), %xmm3
    0000010a: 	movq	%rax, %rdx
    0000010d: 	movq	%r8, %rcx
    00000110: 	andq	$-0x4, %rdx
    00000114: 	leaq	(,%rdx,4), %rdi
    0000011c: 	pshufd	$0x1b, %xmm3, %xmm1
    00000121: 	pshufd	$0x1b, %xmm0, %xmm0
    00000126: 	movups	%xmm1, (%r9)
    0000012a: 	leaq	(%r9,%rdi), %rsi
    0000012e: 	subq	%rdi, %rcx
    00000131: 	movups	%xmm0, -0xc(%r8)
    00000136: 	cmpq	%rdx, %rax
    00000139: 	je	.Ltmp222 # Offset: 313
    0000013b: 	subq	%rdx, %rax
    0000013e: 	cmpq	$0x1, %rax
    00000142: 	je	.Ltmp225 # Offset: 322
.Ltmp229:
    00000144: 	leaq	(%r9,%rdx,4), %rdi
    00000148: 	notq	%rdx
    0000014b: 	leaq	(%r8,%rdx,4), %rdx
    0000014f: 	movq	(%rdi), %xmm0
    00000153: 	movq	(%rdx), %xmm1
    00000157: 	pshufd	$0xe1, %xmm0, %xmm0
    0000015c: 	pshufd	$0xe1, %xmm1, %xmm1
    00000161: 	movq	%xmm1, (%rdi)
    00000165: 	movq	%xmm0, (%rdx)
    00000169: 	movq	%rax, %rdx
    0000016c: 	andq	$-0x2, %rdx
    00000170: 	leaq	(,%rdx,4), %rdi
    00000178: 	addq	%rdi, %rsi
    0000017b: 	subq	%rdi, %rcx
    0000017e: 	cmpq	%rax, %rdx
    00000181: 	je	.Ltmp222 # Offset: 385
.Ltmp225:
    00000183: 	movl	(%rsi), %eax
    00000185: 	movl	(%rcx), %edx
    00000187: 	movl	%edx, (%rsi)
    00000189: 	movl	%eax, (%rcx)
.Ltmp222:
    0000018b: 	popq	%rbx
    0000018c: 	retq # Offset: 396
    0000018d: 	nopl	(%rax) # Size: 3
.Ltmp220:
    00000190: 	negq	%rcx
    00000193: 	shlq	$0x4, %rcx
    00000197: 	leaq	-0x14(%rdx,%rcx), %rbx
    0000019c: 	movq	%r8, %rdx
    0000019f: 	nop # Size: 1
.Ltmp226:
    000001a0: 	movl	(%rax), %ecx
    000001a2: 	movl	(%rdx), %r10d
    000001a5: 	subq	$0x10, %rdx
    000001a9: 	addq	$0x10, %rax
    000001ad: 	movl	%r10d, -0x10(%rax)
    000001b1: 	movl	0xc(%rdx), %r10d
    000001b5: 	movl	%ecx, 0x10(%rdx)
    000001b8: 	movl	-0xc(%rax), %ecx
    000001bb: 	movl	%r10d, -0xc(%rax)
    000001bf: 	movl	0x8(%rdx), %r10d
    000001c3: 	movl	%ecx, 0xc(%rdx)
    000001c6: 	movl	-0x8(%rax), %ecx
    000001c9: 	movl	%r10d, -0x8(%rax)
    000001cd: 	movl	0x4(%rdx), %r10d
    000001d1: 	movl	%ecx, 0x8(%rdx)
    000001d4: 	movl	-0x4(%rax), %ecx
    000001d7: 	movl	%r10d, -0x4(%rax)
    000001db: 	movl	%ecx, 0x4(%rdx)
    000001de: 	cmpq	%rdx, %rbx
    000001e1: 	jne	.Ltmp226 # Offset: 481
    000001e3: 	jmp	.Ltmp227 # Offset: 483
    000001e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp223:
    000001f0: 	movl	(%r9), %eax
    000001f3: 	movl	(%r8), %edx
    000001f6: 	movl	%edx, (%r9)
    000001f9: 	movl	%eax, (%r8)
    000001fc: 	leaq	0x1(%rsi), %rax
    00000200: 	cmpq	%rax, %rdi
    00000203: 	jle	.Ltmp222 # Offset: 515
    00000205: 	movl	0x4(%r9), %eax
    00000209: 	movl	-0x4(%r8), %edx
    0000020d: 	movl	%edx, 0x4(%r9)
    00000211: 	movl	%eax, -0x4(%r8)
    00000215: 	leaq	0x2(%rsi), %rax
    00000219: 	cmpq	%rax, %rdi
    0000021c: 	jle	.Ltmp222 # Offset: 540
    00000222: 	movl	0x8(%r9), %eax
    00000226: 	movl	-0x8(%r8), %edx
    0000022a: 	addq	$0x3, %rsi
    0000022e: 	movl	%edx, 0x8(%r9)
    00000232: 	movl	%eax, -0x8(%r8)
    00000236: 	cmpq	%rsi, %rdi
    00000239: 	jle	.Ltmp222 # Offset: 569
    0000023f: 	movl	0xc(%r9), %eax
    00000243: 	movl	-0xc(%r8), %edx
    00000247: 	movl	%edx, 0xc(%r9)
    0000024b: 	movl	%eax, -0xc(%r8)
    0000024f: 	popq	%rbx
    00000250: 	retq # Offset: 592
    00000251: 	nopl	(%rax) # Size: 7
.Ltmp217:
    00000258: 	retq # Offset: 600
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp218:
    00000260: 	movq	%rax, %r9
    00000263: 	xorl	%esi, %esi
    00000265: 	jmp	.Ltmp228 # Offset: 613
.Ltmp224:
    0000026a: 	movq	%r8, %rcx
    0000026d: 	movq	%r9, %rsi
    00000270: 	xorl	%edx, %edx
    00000272: 	jmp	.Ltmp229 # Offset: 626
DWARF CFI Instructions:
    <empty>
End of Function "_Z13fast_reverse2IPiEvT_S1_"

Binary Function "_Z13fast_reverse3IPiEvT_S1_" after disassembly {
  Number      : 79
  State       : disassembled
  Address     : 0x4df0
  Size        : 0x2bc
  MaxSize     : 0x2c0
  Offset      : 0x4df0
  Section     : .text
  Orc Section : .local.text._Z13fast_reverse3IPiEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB078:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp230 # Offset: 7
    0000000d: 	movq	%rsi, %rax
    00000010: 	leaq	-0x4(%rsi), %r8
    00000014: 	subq	%rdi, %rax
    00000017: 	movq	%rax, %rdx
    0000001a: 	movq	%rax, %r10
    0000001d: 	sarq	$0x2, %rdx
    00000021: 	shrq	$0x3f, %r10
    00000025: 	addq	%rdx, %r10
    00000028: 	sarq	%r10
    0000002b: 	cmpq	$0x3c, %rax
    0000002f: 	jle	.Ltmp231 # Offset: 47
    00000035: 	leaq	-0x8(%r10), %r11
    00000039: 	movq	%rdi, %rdx
    0000003c: 	shrq	$0x3, %r11
    00000040: 	movq	%r11, %rax
    00000043: 	negq	%rax
    00000046: 	shlq	$0x5, %rax
    0000004a: 	leaq	-0x24(%rsi,%rax), %r9
    0000004f: 	movq	%r8, %rax
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp232:
    00000058: 	movl	(%rdx), %ecx
    0000005a: 	movl	(%rax), %esi
    0000005c: 	subq	$0x20, %rax
    00000060: 	addq	$0x20, %rdx
    00000064: 	movl	%esi, -0x20(%rdx)
    00000067: 	movl	0x1c(%rax), %esi
    0000006a: 	movl	%ecx, 0x20(%rax)
    0000006d: 	movl	-0x1c(%rdx), %ecx
    00000070: 	movl	%esi, -0x1c(%rdx)
    00000073: 	movl	0x18(%rax), %esi
    00000076: 	movl	%ecx, 0x1c(%rax)
    00000079: 	movl	-0x18(%rdx), %ecx
    0000007c: 	movl	%esi, -0x18(%rdx)
    0000007f: 	movl	0x14(%rax), %esi
    00000082: 	movl	%ecx, 0x18(%rax)
    00000085: 	movl	-0x14(%rdx), %ecx
    00000088: 	movl	%esi, -0x14(%rdx)
    0000008b: 	movl	0x10(%rax), %esi
    0000008e: 	movl	%ecx, 0x14(%rax)
    00000091: 	movl	-0x10(%rdx), %ecx
    00000094: 	movl	%esi, -0x10(%rdx)
    00000097: 	movl	0xc(%rax), %esi
    0000009a: 	movl	%ecx, 0x10(%rax)
    0000009d: 	movl	-0xc(%rdx), %ecx
    000000a0: 	movl	%esi, -0xc(%rdx)
    000000a3: 	movl	0x8(%rax), %esi
    000000a6: 	movl	%ecx, 0xc(%rax)
    000000a9: 	movl	-0x8(%rdx), %ecx
    000000ac: 	movl	%esi, -0x8(%rdx)
    000000af: 	movl	0x4(%rax), %esi
    000000b2: 	movl	%ecx, 0x8(%rax)
    000000b5: 	movl	-0x4(%rdx), %ecx
    000000b8: 	movl	%esi, -0x4(%rdx)
    000000bb: 	movl	%ecx, 0x4(%rax)
    000000be: 	cmpq	%r9, %rax
    000000c1: 	jne	.Ltmp232 # Offset: 193
    000000c3: 	movq	%r11, %rax
    000000c6: 	leaq	0x8(,%r11,8), %rdx
    000000ce: 	notq	%rax
    000000d1: 	shlq	$0x5, %rax
    000000d5: 	addq	%rax, %r8
    000000d8: 	subq	%rax, %rdi
.Ltmp237:
    000000db: 	cmpq	%rdx, %r10
    000000de: 	jle	.Ltmp230 # Offset: 222
    000000e4: 	movq	%r10, %rcx
    000000e7: 	movq	%r8, %r9
    000000ea: 	subq	%rdx, %rcx
    000000ed: 	leaq	(,%rcx,4), %rax
    000000f5: 	subq	%rax, %r9
    000000f8: 	leaq	(%rdi,%rax), %rsi
    000000fc: 	leaq	0x4(%r9), %rax
    00000100: 	cmpq	%rax, %rsi
    00000103: 	leaq	0x4(%r8), %rsi
    00000107: 	setbe	%al
    0000010a: 	cmpq	%rsi, %rdi
    0000010d: 	setae	%sil
    00000111: 	orb	%sil, %al
    00000114: 	je	.Ltmp233 # Offset: 276
    0000011a: 	cmpq	$0x1, %rcx
    0000011e: 	je	.Ltmp233 # Offset: 286
    00000124: 	leaq	-0x1(%rcx), %rax
    00000128: 	cmpq	$0x2, %rax
    0000012c: 	jbe	.Ltmp234 # Offset: 300
    00000132: 	movdqu	(%rdi), %xmm0
    00000136: 	movdqu	-0xc(%r8), %xmm2
    0000013c: 	movq	%rcx, %rax
    0000013f: 	shrq	$0x2, %rax
    00000143: 	pshufd	$0x1b, %xmm2, %xmm1
    00000148: 	pshufd	$0x1b, %xmm0, %xmm0
    0000014d: 	movups	%xmm1, (%rdi)
    00000150: 	movups	%xmm0, -0xc(%r8)
    00000155: 	cmpq	$0x1, %rax
    00000159: 	je	.Ltmp235 # Offset: 345
    0000015b: 	movdqu	0x10(%rdi), %xmm0
    00000160: 	movdqu	-0x1c(%r8), %xmm3
    00000166: 	pshufd	$0x1b, %xmm0, %xmm0
    0000016b: 	pshufd	$0x1b, %xmm3, %xmm1
    00000170: 	movups	%xmm1, 0x10(%rdi)
    00000174: 	movups	%xmm0, -0x1c(%r8)
.Ltmp235:
    00000179: 	movq	%rcx, %rsi
    0000017c: 	movq	%r8, %rax
    0000017f: 	andq	$-0x4, %rsi
    00000183: 	leaq	(,%rsi,4), %r9
    0000018b: 	leaq	(%rdi,%r9), %rdx
    0000018f: 	subq	%r9, %rax
    00000192: 	cmpq	%rsi, %rcx
    00000195: 	je	.Ltmp230 # Offset: 405
    0000019b: 	subq	%rsi, %rcx
    0000019e: 	cmpq	$0x1, %rcx
    000001a2: 	je	.Ltmp236 # Offset: 418
.Ltmp238:
    000001a4: 	leaq	(%rdi,%rsi,4), %rdi
    000001a8: 	notq	%rsi
    000001ab: 	leaq	(%r8,%rsi,4), %rsi
    000001af: 	movq	(%rdi), %xmm0
    000001b3: 	movq	(%rsi), %xmm1
    000001b7: 	pshufd	$0xe1, %xmm0, %xmm0
    000001bc: 	pshufd	$0xe1, %xmm1, %xmm1
    000001c1: 	movq	%xmm1, (%rdi)
    000001c5: 	movq	%xmm0, (%rsi)
    000001c9: 	movq	%rcx, %rsi
    000001cc: 	andq	$-0x2, %rsi
    000001d0: 	leaq	(,%rsi,4), %rdi
    000001d8: 	addq	%rdi, %rdx
    000001db: 	subq	%rdi, %rax
    000001de: 	cmpq	%rsi, %rcx
    000001e1: 	je	.Ltmp230 # Offset: 481
.Ltmp236:
    000001e7: 	movl	(%rdx), %ecx
    000001e9: 	movl	(%rax), %esi
    000001eb: 	movl	%esi, (%rdx)
    000001ed: 	movl	%ecx, (%rax)
    000001ef: 	retq # Offset: 495
.Ltmp233:
    000001f0: 	movl	(%rdi), %eax
    000001f2: 	movl	(%r8), %ecx
    000001f5: 	movl	%ecx, (%rdi)
    000001f7: 	movl	%eax, (%r8)
    000001fa: 	leaq	0x1(%rdx), %rax
    000001fe: 	cmpq	%rax, %r10
    00000201: 	jle	.Ltmp230 # Offset: 513
    00000207: 	movl	0x4(%rdi), %eax
    0000020a: 	movl	-0x4(%r8), %ecx
    0000020e: 	movl	%ecx, 0x4(%rdi)
    00000211: 	movl	%eax, -0x4(%r8)
    00000215: 	leaq	0x2(%rdx), %rax
    00000219: 	cmpq	%rax, %r10
    0000021c: 	jle	.Ltmp230 # Offset: 540
    00000222: 	movl	0x8(%rdi), %eax
    00000225: 	movl	-0x8(%r8), %ecx
    00000229: 	movl	%ecx, 0x8(%rdi)
    0000022c: 	movl	%eax, -0x8(%r8)
    00000230: 	leaq	0x3(%rdx), %rax
    00000234: 	cmpq	%rax, %r10
    00000237: 	jle	.Ltmp230 # Offset: 567
    00000239: 	movl	0xc(%rdi), %eax
    0000023c: 	movl	-0xc(%r8), %ecx
    00000240: 	movl	%ecx, 0xc(%rdi)
    00000243: 	movl	%eax, -0xc(%r8)
    00000247: 	leaq	0x4(%rdx), %rax
    0000024b: 	cmpq	%rax, %r10
    0000024e: 	jle	.Ltmp230 # Offset: 590
    00000250: 	movl	0x10(%rdi), %eax
    00000253: 	movl	-0x10(%r8), %ecx
    00000257: 	movl	%ecx, 0x10(%rdi)
    0000025a: 	movl	%eax, -0x10(%r8)
    0000025e: 	leaq	0x5(%rdx), %rax
    00000262: 	cmpq	%rax, %r10
    00000265: 	jle	.Ltmp230 # Offset: 613
    00000267: 	movl	0x14(%rdi), %eax
    0000026a: 	movl	-0x14(%r8), %ecx
    0000026e: 	movl	%ecx, 0x14(%rdi)
    00000271: 	movl	%eax, -0x14(%r8)
    00000275: 	leaq	0x6(%rdx), %rax
    00000279: 	cmpq	%rax, %r10
    0000027c: 	jle	.Ltmp230 # Offset: 636
    0000027e: 	movl	0x18(%rdi), %eax
    00000281: 	movl	-0x18(%r8), %ecx
    00000285: 	addq	$0x7, %rdx
    00000289: 	movl	%ecx, 0x18(%rdi)
    0000028c: 	movl	%eax, -0x18(%r8)
    00000290: 	cmpq	%rdx, %r10
    00000293: 	jle	.Ltmp230 # Offset: 659
    00000295: 	movl	0x1c(%rdi), %eax
    00000298: 	movl	-0x1c(%r8), %edx
    0000029c: 	movl	%edx, 0x1c(%rdi)
    0000029f: 	movl	%eax, -0x1c(%r8)
.Ltmp230:
    000002a3: 	retq # Offset: 675
    000002a4: 	nopl	(%rax) # Size: 4
.Ltmp231:
    000002a8: 	xorl	%edx, %edx
    000002aa: 	jmp	.Ltmp237 # Offset: 682
.Ltmp234:
    000002af: 	movq	%r8, %rax
    000002b2: 	movq	%rdi, %rdx
    000002b5: 	xorl	%esi, %esi
    000002b7: 	jmp	.Ltmp238 # Offset: 695
DWARF CFI Instructions:
    <empty>
End of Function "_Z13fast_reverse3IPiEvT_S1_"

Binary Function "_Z13fast_reverse4IPiEvT_S1_" after disassembly {
  Number      : 80
  State       : disassembled
  Address     : 0x50b0
  Size        : 0x2d5
  MaxSize     : 0x2e0
  Offset      : 0x50b0
  Section     : .text
  Orc Section : .local.text._Z13fast_reverse4IPiEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB079:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp239 # Offset: 10
    00000010: 	movq	%rsi, %rax
    00000013: 	subq	%rdi, %rax
    00000016: 	leaq	-0x4(%rsi), %rdi
    0000001a: 	movq	%rax, %rdx
    0000001d: 	movq	%rax, %r8
    00000020: 	sarq	$0x2, %rdx
    00000024: 	shrq	$0x3f, %r8
    00000028: 	addq	%rdx, %r8
    0000002b: 	sarq	%r8
    0000002e: 	cmpq	$0x3c, %rax
    00000032: 	jle	.Ltmp240 # Offset: 50
    00000038: 	leaq	-0x8(%r8), %r9
    0000003c: 	movq	%rcx, %rdx
    0000003f: 	shrq	$0x3, %r9
    00000043: 	movq	%r9, %rax
    00000046: 	negq	%rax
    00000049: 	shlq	$0x5, %rax
    0000004d: 	leaq	-0x24(%rsi,%rax), %rsi
    00000052: 	movq	%rdi, %rax
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp241:
    00000058: 	movdqu	(%rdx), %xmm1
    0000005c: 	movdqu	0x10(%rdx), %xmm2
    00000061: 	subq	$0x20, %rax
    00000065: 	addq	$0x20, %rdx
    00000069: 	movdqu	0x4(%rax), %xmm3
    0000006e: 	movdqu	0x14(%rax), %xmm4
    00000073: 	movdqa	%xmm1, %xmm0
    00000077: 	psllq	$0x20, %xmm1
    0000007c: 	psrlq	$0x20, %xmm0
    00000081: 	por	%xmm1, %xmm0
    00000085: 	movdqa	%xmm2, %xmm1
    00000089: 	psrlq	$0x20, %xmm1
    0000008e: 	psllq	$0x20, %xmm2
    00000093: 	shufpd	$0x1, %xmm0, %xmm0
    00000098: 	por	%xmm2, %xmm1
    0000009c: 	movdqa	%xmm3, %xmm2
    000000a0: 	psrlq	$0x20, %xmm2
    000000a5: 	psllq	$0x20, %xmm3
    000000aa: 	shufpd	$0x1, %xmm1, %xmm1
    000000af: 	por	%xmm3, %xmm2
    000000b3: 	movdqa	%xmm4, %xmm3
    000000b7: 	psrlq	$0x20, %xmm3
    000000bc: 	psllq	$0x20, %xmm4
    000000c1: 	shufpd	$0x1, %xmm2, %xmm2
    000000c6: 	movups	%xmm2, -0x10(%rdx)
    000000ca: 	por	%xmm4, %xmm3
    000000ce: 	shufpd	$0x1, %xmm3, %xmm3
    000000d3: 	movups	%xmm3, -0x20(%rdx)
    000000d7: 	movups	%xmm1, 0x4(%rax)
    000000db: 	movups	%xmm0, 0x14(%rax)
    000000df: 	cmpq	%rsi, %rax
    000000e2: 	jne	.Ltmp241 # Offset: 226
    000000e8: 	movq	%r9, %rax
    000000eb: 	leaq	0x8(,%r9,8), %rdx
    000000f3: 	notq	%rax
    000000f6: 	shlq	$0x5, %rax
    000000fa: 	addq	%rax, %rdi
    000000fd: 	subq	%rax, %rcx
.Ltmp246:
    00000100: 	cmpq	%rdx, %r8
    00000103: 	jle	.Ltmp239 # Offset: 259
    00000109: 	movq	%r8, %rsi
    0000010c: 	movq	%rdi, %r10
    0000010f: 	subq	%rdx, %rsi
    00000112: 	leaq	(,%rsi,4), %rax
    0000011a: 	subq	%rax, %r10
    0000011d: 	leaq	(%rcx,%rax), %r9
    00000121: 	leaq	0x4(%r10), %rax
    00000125: 	cmpq	%rax, %r9
    00000128: 	leaq	0x4(%rdi), %r9
    0000012c: 	setbe	%al
    0000012f: 	cmpq	%r9, %rcx
    00000132: 	setae	%r9b
    00000136: 	orb	%r9b, %al
    00000139: 	je	.Ltmp242 # Offset: 313
    0000013f: 	cmpq	$0x1, %rsi
    00000143: 	je	.Ltmp242 # Offset: 323
    00000149: 	leaq	-0x1(%rsi), %rax
    0000014d: 	cmpq	$0x2, %rax
    00000151: 	jbe	.Ltmp243 # Offset: 337
    00000157: 	movdqu	(%rcx), %xmm0
    0000015b: 	movdqu	-0xc(%rdi), %xmm5
    00000160: 	movq	%rsi, %rax
    00000163: 	shrq	$0x2, %rax
    00000167: 	pshufd	$0x1b, %xmm5, %xmm1
    0000016c: 	pshufd	$0x1b, %xmm0, %xmm0
    00000171: 	movups	%xmm1, (%rcx)
    00000174: 	movups	%xmm0, -0xc(%rdi)
    00000178: 	cmpq	$0x1, %rax
    0000017c: 	je	.Ltmp244 # Offset: 380
    0000017e: 	movdqu	0x10(%rcx), %xmm0
    00000183: 	movdqu	-0x1c(%rdi), %xmm6
    00000188: 	pshufd	$0x1b, %xmm0, %xmm0
    0000018d: 	pshufd	$0x1b, %xmm6, %xmm1
    00000192: 	movups	%xmm1, 0x10(%rcx)
    00000196: 	movups	%xmm0, -0x1c(%rdi)
.Ltmp244:
    0000019a: 	movq	%rsi, %r8
    0000019d: 	movq	%rdi, %rax
    000001a0: 	andq	$-0x4, %r8
    000001a4: 	leaq	(,%r8,4), %r9
    000001ac: 	leaq	(%rcx,%r9), %rdx
    000001b0: 	subq	%r9, %rax
    000001b3: 	cmpq	%r8, %rsi
    000001b6: 	je	.Ltmp239 # Offset: 438
    000001bc: 	subq	%r8, %rsi
    000001bf: 	cmpq	$0x1, %rsi
    000001c3: 	je	.Ltmp245 # Offset: 451
.Ltmp247:
    000001c5: 	leaq	(%rcx,%r8,4), %r9
    000001c9: 	notq	%r8
    000001cc: 	leaq	(%rdi,%r8,4), %rcx
    000001d0: 	movq	(%r9), %xmm0
    000001d5: 	movq	(%rcx), %xmm1
    000001d9: 	pshufd	$0xe1, %xmm0, %xmm0
    000001de: 	pshufd	$0xe1, %xmm1, %xmm1
    000001e3: 	movq	%xmm1, (%r9)
    000001e8: 	movq	%xmm0, (%rcx)
    000001ec: 	movq	%rsi, %rcx
    000001ef: 	andq	$-0x2, %rcx
    000001f3: 	leaq	(,%rcx,4), %rdi
    000001fb: 	addq	%rdi, %rdx
    000001fe: 	subq	%rdi, %rax
    00000201: 	cmpq	%rcx, %rsi
    00000204: 	je	.Ltmp239 # Offset: 516
.Ltmp245:
    0000020a: 	movl	(%rdx), %ecx
    0000020c: 	movl	(%rax), %esi
    0000020e: 	movl	%esi, (%rdx)
    00000210: 	movl	%ecx, (%rax)
    00000212: 	retq # Offset: 530
    00000213: 	nopl	(%rax,%rax) # Size: 5
.Ltmp242:
    00000218: 	movl	(%rcx), %eax
    0000021a: 	movl	(%rdi), %esi
    0000021c: 	movl	%esi, (%rcx)
    0000021e: 	movl	%eax, (%rdi)
    00000220: 	leaq	0x1(%rdx), %rax
    00000224: 	cmpq	%rax, %r8
    00000227: 	jle	.Ltmp239 # Offset: 551
    0000022d: 	movl	0x4(%rcx), %eax
    00000230: 	movl	-0x4(%rdi), %esi
    00000233: 	movl	%esi, 0x4(%rcx)
    00000236: 	movl	%eax, -0x4(%rdi)
    00000239: 	leaq	0x2(%rdx), %rax
    0000023d: 	cmpq	%rax, %r8
    00000240: 	jle	.Ltmp239 # Offset: 576
    00000242: 	movl	0x8(%rcx), %eax
    00000245: 	movl	-0x8(%rdi), %esi
    00000248: 	movl	%esi, 0x8(%rcx)
    0000024b: 	movl	%eax, -0x8(%rdi)
    0000024e: 	leaq	0x3(%rdx), %rax
    00000252: 	cmpq	%rax, %r8
    00000255: 	jle	.Ltmp239 # Offset: 597
    00000257: 	movl	0xc(%rcx), %eax
    0000025a: 	movl	-0xc(%rdi), %esi
    0000025d: 	movl	%esi, 0xc(%rcx)
    00000260: 	movl	%eax, -0xc(%rdi)
    00000263: 	leaq	0x4(%rdx), %rax
    00000267: 	cmpq	%rax, %r8
    0000026a: 	jle	.Ltmp239 # Offset: 618
    0000026c: 	movl	0x10(%rcx), %eax
    0000026f: 	movl	-0x10(%rdi), %esi
    00000272: 	movl	%esi, 0x10(%rcx)
    00000275: 	movl	%eax, -0x10(%rdi)
    00000278: 	leaq	0x5(%rdx), %rax
    0000027c: 	cmpq	%rax, %r8
    0000027f: 	jle	.Ltmp239 # Offset: 639
    00000281: 	movl	0x14(%rcx), %eax
    00000284: 	movl	-0x14(%rdi), %esi
    00000287: 	movl	%esi, 0x14(%rcx)
    0000028a: 	movl	%eax, -0x14(%rdi)
    0000028d: 	leaq	0x6(%rdx), %rax
    00000291: 	cmpq	%rax, %r8
    00000294: 	jle	.Ltmp239 # Offset: 660
    00000296: 	movl	0x18(%rcx), %eax
    00000299: 	movl	-0x18(%rdi), %esi
    0000029c: 	addq	$0x7, %rdx
    000002a0: 	movl	%esi, 0x18(%rcx)
    000002a3: 	movl	%eax, -0x18(%rdi)
    000002a6: 	cmpq	%rdx, %r8
    000002a9: 	jle	.Ltmp239 # Offset: 681
    000002ab: 	movl	0x1c(%rcx), %eax
    000002ae: 	movl	-0x1c(%rdi), %edx
    000002b1: 	movl	%edx, 0x1c(%rcx)
    000002b4: 	movl	%eax, -0x1c(%rdi)
.Ltmp239:
    000002b7: 	retq # Offset: 695
    000002b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp240:
    000002c0: 	xorl	%edx, %edx
    000002c2: 	jmp	.Ltmp246 # Offset: 706
.Ltmp243:
    000002c7: 	movq	%rdi, %rax
    000002ca: 	movq	%rcx, %rdx
    000002cd: 	xorl	%r8d, %r8d
    000002d0: 	jmp	.Ltmp247 # Offset: 720
DWARF CFI Instructions:
    <empty>
End of Function "_Z13fast_reverse4IPiEvT_S1_"

Binary Function "_ZSt12reverse_copyI20BidirectionalPointerIiES1_ET0_T_S3_S2_" after disassembly {
  Number      : 81
  State       : disassembled
  Address     : 0x5390
  Size        : 0xef
  MaxSize     : 0xf0
  Offset      : 0x5390
  Section     : .text
  Orc Section : .local.text._ZSt12reverse_copyI20BidirectionalPointerIiES1_ET0_T_S3_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB080:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rsi, %rax
    0000000a: 	movq	%rsi, %rdi
    0000000d: 	cmpq	%r8, %rsi
    00000010: 	je	.Ltmp248 # Offset: 16
    00000016: 	movq	%rsi, %r9
    00000019: 	subq	%r8, %r9
    0000001c: 	leaq	-0x4(%r9), %rsi
    00000020: 	addq	%rdx, %r9
    00000023: 	movq	%rsi, %rcx
    00000026: 	shrq	$0x2, %rcx
    0000002a: 	leaq	0x1(%rcx), %r10
    0000002e: 	notq	%rcx
    00000031: 	leaq	(%rdi,%rcx,4), %rcx
    00000035: 	cmpq	%rcx, %r9
    00000038: 	setbe	%cl
    0000003b: 	cmpq	%rdx, %rdi
    0000003e: 	setbe	%r11b
    00000042: 	orb	%r11b, %cl
    00000045: 	je	.Ltmp249 # Offset: 69
    0000004b: 	cmpq	$0x8, %rsi
    0000004f: 	jbe	.Ltmp249 # Offset: 79
    00000051: 	movq	%r10, %rsi
    00000054: 	leaq	-0x10(%rdi), %rcx
    00000058: 	movq	%rdx, %rax
    0000005b: 	shrq	$0x2, %rsi
    0000005f: 	shlq	$0x4, %rsi
    00000063: 	addq	%rdx, %rsi
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp250:
    00000070: 	movdqu	(%rcx), %xmm1
    00000074: 	addq	$0x10, %rax
    00000078: 	subq	$0x10, %rcx
    0000007c: 	pshufd	$0x1b, %xmm1, %xmm0
    00000081: 	movups	%xmm0, -0x10(%rax)
    00000085: 	cmpq	%rax, %rsi
    00000088: 	jne	.Ltmp250 # Offset: 136
    0000008a: 	movq	%r10, %rcx
    0000008d: 	andq	$-0x4, %rcx
    00000091: 	movq	%rcx, %rax
    00000094: 	negq	%rax
    00000097: 	shlq	$0x2, %rax
    0000009b: 	subq	%rax, %rdx
    0000009e: 	cmpq	%rcx, %r10
    000000a1: 	je	.Ltmp251 # Offset: 161
    000000a3: 	leaq	-0x4(%rdi,%rax), %rax
    000000a8: 	movl	(%rax), %ecx
    000000aa: 	movl	%ecx, (%rdx)
    000000ac: 	cmpq	%r8, %rax
    000000af: 	je	.Ltmp251 # Offset: 175
    000000b1: 	movl	-0x4(%rax), %ecx
    000000b4: 	movl	%ecx, 0x4(%rdx)
    000000b7: 	leaq	-0x4(%rax), %rcx
    000000bb: 	cmpq	%rcx, %r8
    000000be: 	je	.Ltmp251 # Offset: 190
    000000c0: 	movl	-0x8(%rax), %eax
    000000c3: 	movl	%eax, 0x8(%rdx)
.Ltmp251:
    000000c6: 	movq	%r9, %rax
    000000c9: 	retq # Offset: 201
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp249:
    000000d0: 	movl	-0x4(%rax), %ecx
    000000d3: 	subq	$0x4, %rax
    000000d7: 	addq	$0x4, %rdx
    000000db: 	movl	%ecx, -0x4(%rdx)
    000000de: 	cmpq	%rax, %r8
    000000e1: 	jne	.Ltmp249 # Offset: 225
    000000e3: 	jmp	.Ltmp251 # Offset: 227
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp248:
    000000e8: 	movq	%rdx, %r9
    000000eb: 	movq	%r9, %rax
    000000ee: 	retq # Offset: 238
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt12reverse_copyI20BidirectionalPointerIiES1_ET0_T_S3_S2_"

Binary Function "_Z22my_simple_reverse_copyI20BidirectionalPointerIiES1_EvT_S2_T0_" after disassembly {
  Number      : 82
  State       : disassembled
  Address     : 0x5480
  Size        : 0xd4
  MaxSize     : 0xe0
  Offset      : 0x5480
  Section     : .text
  Orc Section : .local.text._Z22my_simple_reverse_copyI20BidirectionalPointerIiES1_EvT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB081:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rsi, %rax
    0000000a: 	cmpq	%rsi, %rdi
    0000000d: 	je	.Ltmp252 # Offset: 13
    00000013: 	movq	%rsi, %rcx
    00000016: 	subq	%rdi, %rcx
    00000019: 	leaq	-0x4(%rcx), %r10
    0000001d: 	addq	%rdx, %rcx
    00000020: 	movq	%r10, %rdi
    00000023: 	shrq	$0x2, %rdi
    00000027: 	leaq	0x1(%rdi), %r9
    0000002b: 	notq	%rdi
    0000002e: 	leaq	(%rsi,%rdi,4), %rdi
    00000032: 	cmpq	%rdi, %rcx
    00000035: 	setbe	%cl
    00000038: 	cmpq	%rsi, %rdx
    0000003b: 	setae	%dil
    0000003f: 	orb	%dil, %cl
    00000042: 	je	.Ltmp253 # Offset: 66
    00000044: 	cmpq	$0x8, %r10
    00000048: 	jbe	.Ltmp253 # Offset: 72
    0000004a: 	movq	%r9, %rdi
    0000004d: 	leaq	-0x10(%rsi), %rcx
    00000051: 	movq	%rdx, %rax
    00000054: 	shrq	$0x2, %rdi
    00000058: 	shlq	$0x4, %rdi
    0000005c: 	addq	%rdx, %rdi
    0000005f: 	nop # Size: 1
.Ltmp254:
    00000060: 	movdqu	(%rcx), %xmm1
    00000064: 	addq	$0x10, %rax
    00000068: 	subq	$0x10, %rcx
    0000006c: 	pshufd	$0x1b, %xmm1, %xmm0
    00000071: 	movups	%xmm0, -0x10(%rax)
    00000075: 	cmpq	%rax, %rdi
    00000078: 	jne	.Ltmp254 # Offset: 120
    0000007a: 	movq	%r9, %rcx
    0000007d: 	andq	$-0x4, %rcx
    00000081: 	movq	%rcx, %rax
    00000084: 	negq	%rax
    00000087: 	shlq	$0x2, %rax
    0000008b: 	subq	%rax, %rdx
    0000008e: 	cmpq	%rcx, %r9
    00000091: 	je	.Ltmp252 # Offset: 145
    00000093: 	leaq	-0x4(%rsi,%rax), %rax
    00000098: 	movl	(%rax), %ecx
    0000009a: 	movl	%ecx, (%rdx)
    0000009c: 	cmpq	%rax, %r8
    0000009f: 	je	.Ltmp252 # Offset: 159
    000000a1: 	movl	-0x4(%rax), %ecx
    000000a4: 	movl	%ecx, 0x4(%rdx)
    000000a7: 	leaq	-0x4(%rax), %rcx
    000000ab: 	cmpq	%rcx, %r8
    000000ae: 	je	.Ltmp252 # Offset: 174
    000000b0: 	movl	-0x8(%rax), %eax
    000000b3: 	movl	%eax, 0x8(%rdx)
    000000b6: 	retq # Offset: 182
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp253:
    000000c0: 	movl	-0x4(%rax), %ecx
    000000c3: 	subq	$0x4, %rax
    000000c7: 	addq	$0x4, %rdx
    000000cb: 	movl	%ecx, -0x4(%rdx)
    000000ce: 	cmpq	%rax, %r8
    000000d1: 	jne	.Ltmp253 # Offset: 209
.Ltmp252:
    000000d3: 	retq # Offset: 211
DWARF CFI Instructions:
    <empty>
End of Function "_Z22my_simple_reverse_copyI20BidirectionalPointerIiES1_EvT_S2_T0_"

Binary Function "_Z20my_fast_reverse_copyI20BidirectionalPointerIiES1_EvT_S2_T0_" after disassembly {
  Number      : 83
  State       : disassembled
  Address     : 0x5560
  Size        : 0xd4
  MaxSize     : 0xe0
  Offset      : 0x5560
  Section     : .text
  Orc Section : .local.text._Z20my_fast_reverse_copyI20BidirectionalPointerIiES1_EvT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB082:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rsi, %rax
    0000000a: 	cmpq	%rsi, %rdi
    0000000d: 	je	.Ltmp255 # Offset: 13
    00000013: 	movq	%rsi, %rcx
    00000016: 	subq	%rdi, %rcx
    00000019: 	leaq	-0x4(%rcx), %r10
    0000001d: 	addq	%rdx, %rcx
    00000020: 	movq	%r10, %rdi
    00000023: 	shrq	$0x2, %rdi
    00000027: 	leaq	0x1(%rdi), %r9
    0000002b: 	notq	%rdi
    0000002e: 	leaq	(%rsi,%rdi,4), %rdi
    00000032: 	cmpq	%rdi, %rcx
    00000035: 	setbe	%cl
    00000038: 	cmpq	%rsi, %rdx
    0000003b: 	setae	%dil
    0000003f: 	orb	%dil, %cl
    00000042: 	je	.Ltmp256 # Offset: 66
    00000044: 	cmpq	$0x8, %r10
    00000048: 	jbe	.Ltmp256 # Offset: 72
    0000004a: 	movq	%r9, %rdi
    0000004d: 	leaq	-0x10(%rsi), %rcx
    00000051: 	movq	%rdx, %rax
    00000054: 	shrq	$0x2, %rdi
    00000058: 	shlq	$0x4, %rdi
    0000005c: 	addq	%rdx, %rdi
    0000005f: 	nop # Size: 1
.Ltmp257:
    00000060: 	movdqu	(%rcx), %xmm1
    00000064: 	addq	$0x10, %rax
    00000068: 	subq	$0x10, %rcx
    0000006c: 	pshufd	$0x1b, %xmm1, %xmm0
    00000071: 	movups	%xmm0, -0x10(%rax)
    00000075: 	cmpq	%rax, %rdi
    00000078: 	jne	.Ltmp257 # Offset: 120
    0000007a: 	movq	%r9, %rcx
    0000007d: 	andq	$-0x4, %rcx
    00000081: 	movq	%rcx, %rax
    00000084: 	negq	%rax
    00000087: 	shlq	$0x2, %rax
    0000008b: 	subq	%rax, %rdx
    0000008e: 	cmpq	%rcx, %r9
    00000091: 	je	.Ltmp255 # Offset: 145
    00000093: 	leaq	-0x4(%rsi,%rax), %rax
    00000098: 	movl	(%rax), %ecx
    0000009a: 	movl	%ecx, (%rdx)
    0000009c: 	cmpq	%rax, %r8
    0000009f: 	je	.Ltmp255 # Offset: 159
    000000a1: 	movl	-0x4(%rax), %ecx
    000000a4: 	movl	%ecx, 0x4(%rdx)
    000000a7: 	leaq	-0x4(%rax), %rcx
    000000ab: 	cmpq	%rcx, %r8
    000000ae: 	je	.Ltmp255 # Offset: 174
    000000b0: 	movl	-0x8(%rax), %eax
    000000b3: 	movl	%eax, 0x8(%rdx)
    000000b6: 	retq # Offset: 182
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp256:
    000000c0: 	movl	-0x4(%rax), %ecx
    000000c3: 	subq	$0x4, %rax
    000000c7: 	addq	$0x4, %rdx
    000000cb: 	movl	%ecx, -0x4(%rdx)
    000000ce: 	cmpq	%rax, %r8
    000000d1: 	jne	.Ltmp256 # Offset: 209
.Ltmp255:
    000000d3: 	retq # Offset: 211
DWARF CFI Instructions:
    <empty>
End of Function "_Z20my_fast_reverse_copyI20BidirectionalPointerIiES1_EvT_S2_T0_"

Binary Function "_ZSt12reverse_copyIPiS0_ET0_T_S2_S1_" after disassembly {
  Number      : 84
  State       : disassembled
  Address     : 0x5640
  Size        : 0xdf
  MaxSize     : 0xe0
  Offset      : 0x5640
  Section     : .text
  Orc Section : .local.text._ZSt12reverse_copyIPiS0_ET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB083:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rsi, %rcx
    0000000a: 	cmpq	%rdi, %rsi
    0000000d: 	je	.Ltmp258 # Offset: 13
    00000013: 	movq	%rsi, %r9
    00000016: 	subq	%rdi, %r9
    00000019: 	leaq	-0x4(%r9), %rsi
    0000001d: 	addq	%rdx, %r9
    00000020: 	movq	%rsi, %rax
    00000023: 	shrq	$0x2, %rax
    00000027: 	leaq	0x1(%rax), %r10
    0000002b: 	notq	%rax
    0000002e: 	leaq	(%rcx,%rax,4), %rax
    00000032: 	cmpq	%rax, %r9
    00000035: 	setbe	%al
    00000038: 	cmpq	%rdx, %rcx
    0000003b: 	setbe	%dil
    0000003f: 	orb	%dil, %al
    00000042: 	je	.Ltmp259 # Offset: 66
    00000044: 	cmpq	$0x8, %rsi
    00000048: 	jbe	.Ltmp259 # Offset: 72
    0000004a: 	movq	%r10, %rdi
    0000004d: 	leaq	-0x10(%rcx), %rsi
    00000051: 	movq	%rdx, %rax
    00000054: 	shrq	$0x2, %rdi
    00000058: 	shlq	$0x4, %rdi
    0000005c: 	addq	%rdx, %rdi
    0000005f: 	nop # Size: 1
.Ltmp260:
    00000060: 	movdqu	(%rsi), %xmm1
    00000064: 	addq	$0x10, %rax
    00000068: 	subq	$0x10, %rsi
    0000006c: 	pshufd	$0x1b, %xmm1, %xmm0
    00000071: 	movups	%xmm0, -0x10(%rax)
    00000075: 	cmpq	%rdi, %rax
    00000078: 	jne	.Ltmp260 # Offset: 120
    0000007a: 	movq	%r10, %rsi
    0000007d: 	andq	$-0x4, %rsi
    00000081: 	movq	%rsi, %rax
    00000084: 	negq	%rax
    00000087: 	shlq	$0x2, %rax
    0000008b: 	subq	%rax, %rdx
    0000008e: 	cmpq	%rsi, %r10
    00000091: 	je	.Ltmp261 # Offset: 145
    00000093: 	leaq	-0x4(%rcx,%rax), %rax
    00000098: 	movl	(%rax), %ecx
    0000009a: 	movl	%ecx, (%rdx)
    0000009c: 	cmpq	%r8, %rax
    0000009f: 	je	.Ltmp261 # Offset: 159
    000000a1: 	movl	-0x4(%rax), %ecx
    000000a4: 	movl	%ecx, 0x4(%rdx)
    000000a7: 	leaq	-0x4(%rax), %rcx
    000000ab: 	cmpq	%rcx, %r8
    000000ae: 	je	.Ltmp261 # Offset: 174
    000000b0: 	movl	-0x8(%rax), %eax
    000000b3: 	movl	%eax, 0x8(%rdx)
.Ltmp261:
    000000b6: 	movq	%r9, %rax
    000000b9: 	retq # Offset: 185
    000000ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp259:
    000000c0: 	movl	-0x4(%rcx), %eax
    000000c3: 	subq	$0x4, %rcx
    000000c7: 	addq	$0x4, %rdx
    000000cb: 	movl	%eax, -0x4(%rdx)
    000000ce: 	cmpq	%rcx, %r8
    000000d1: 	jne	.Ltmp259 # Offset: 209
    000000d3: 	jmp	.Ltmp261 # Offset: 211
    000000d5: 	nopl	(%rax) # Size: 3
.Ltmp258:
    000000d8: 	movq	%rdx, %r9
    000000db: 	movq	%r9, %rax
    000000de: 	retq # Offset: 222
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt12reverse_copyIPiS0_ET0_T_S2_S1_"

Binary Function "_Z22my_simple_reverse_copyIPiS0_EvT_S1_T0_" after disassembly {
  Number      : 85
  State       : disassembled
  Address     : 0x5720
  Size        : 0xdb
  MaxSize     : 0xe0
  Offset      : 0x5720
  Section     : .text
  Orc Section : .local.text._Z22my_simple_reverse_copyIPiS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB084:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp262 # Offset: 7
    0000000d: 	movq	%rsi, %rax
    00000010: 	leaq	-0x4(%rsi), %rcx
    00000014: 	subq	%rdi, %rax
    00000017: 	movq	%rax, %r8
    0000001a: 	sarq	$0x2, %r8
    0000001e: 	testq	%rax, %rax
    00000021: 	jle	.Ltmp262 # Offset: 33
    00000027: 	movq	%rsi, %rdi
    0000002a: 	leaq	(%rdx,%rax), %r9
    0000002e: 	subq	%rax, %rdi
    00000031: 	cmpq	%rdi, %r9
    00000034: 	setbe	%dil
    00000038: 	cmpq	%rdx, %rsi
    0000003b: 	setbe	%r9b
    0000003f: 	orb	%r9b, %dil
    00000042: 	je	.Ltmp263 # Offset: 66
    00000044: 	cmpq	$0xc, %rax
    00000048: 	jle	.Ltmp263 # Offset: 72
    0000004a: 	movq	%r8, %rdi
    0000004d: 	subq	$0x10, %rsi
    00000051: 	movq	%rdx, %rax
    00000054: 	shrq	$0x2, %rdi
    00000058: 	shlq	$0x4, %rdi
    0000005c: 	addq	%rdx, %rdi
    0000005f: 	nop # Size: 1
.Ltmp264:
    00000060: 	movdqu	(%rsi), %xmm1
    00000064: 	addq	$0x10, %rax
    00000068: 	subq	$0x10, %rsi
    0000006c: 	pshufd	$0x1b, %xmm1, %xmm0
    00000071: 	movups	%xmm0, -0x10(%rax)
    00000075: 	cmpq	%rdi, %rax
    00000078: 	jne	.Ltmp264 # Offset: 120
    0000007a: 	movq	%r8, %rax
    0000007d: 	andq	$-0x4, %rax
    00000081: 	movq	%rax, %rsi
    00000084: 	negq	%rsi
    00000087: 	shlq	$0x2, %rsi
    0000008b: 	addq	%rsi, %rcx
    0000008e: 	subq	%rsi, %rdx
    00000091: 	cmpq	%rax, %r8
    00000094: 	je	.Ltmp262 # Offset: 148
    00000096: 	movl	(%rcx), %esi
    00000098: 	movl	%esi, (%rdx)
    0000009a: 	leaq	0x1(%rax), %rsi
    0000009e: 	cmpq	%rsi, %r8
    000000a1: 	jle	.Ltmp262 # Offset: 161
    000000a3: 	movl	-0x4(%rcx), %esi
    000000a6: 	addq	$0x2, %rax
    000000aa: 	movl	%esi, 0x4(%rdx)
    000000ad: 	cmpq	%rax, %r8
    000000b0: 	jle	.Ltmp262 # Offset: 176
    000000b2: 	movl	-0x8(%rcx), %eax
    000000b5: 	movl	%eax, 0x8(%rdx)
    000000b8: 	retq # Offset: 184
    000000b9: 	nopl	(%rax) # Size: 7
.Ltmp263:
    000000c0: 	xorl	%eax, %eax
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp265:
    000000c8: 	movl	(%rcx), %esi
    000000ca: 	subq	$0x4, %rcx
    000000ce: 	movl	%esi, (%rdx,%rax,4)
    000000d1: 	addq	$0x1, %rax
    000000d5: 	cmpq	%rax, %r8
    000000d8: 	jg	.Ltmp265 # Offset: 216
.Ltmp262:
    000000da: 	retq # Offset: 218
DWARF CFI Instructions:
    <empty>
End of Function "_Z22my_simple_reverse_copyIPiS0_EvT_S1_T0_"

Binary Function "_Z18fast_reverse_copy2IPiS0_EvT_S1_T0_" after disassembly {
  Number      : 86
  State       : disassembled
  Address     : 0x5800
  Size        : 0x1aa
  MaxSize     : 0x1b0
  Offset      : 0x5800
  Section     : .text
  Orc Section : .local.text._Z18fast_reverse_copy2IPiS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB085:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp266 # Offset: 7
    0000000d: 	movq	%rsi, %rax
    00000010: 	leaq	-0x4(%rsi), %r9
    00000014: 	subq	%rdi, %rax
    00000017: 	movq	%rax, %r10
    0000001a: 	sarq	$0x2, %r10
    0000001e: 	cmpq	$0xc, %rax
    00000022: 	jle	.Ltmp267 # Offset: 34
    00000028: 	leaq	-0x4(%r10), %rcx
    0000002c: 	movq	%rsi, %rdi
    0000002f: 	shrq	$0x2, %rcx
    00000033: 	addq	$0x1, %rcx
    00000037: 	movq	%rcx, %rax
    0000003a: 	shlq	$0x4, %rax
    0000003e: 	movq	%rax, %r11
    00000041: 	leaq	(%rdx,%rax), %r8
    00000045: 	subq	%rax, %rdi
    00000048: 	negq	%r11
    0000004b: 	cmpq	%rdi, %r8
    0000004e: 	jbe	.Ltmp268 # Offset: 78
    00000050: 	cmpq	%rdx, %rsi
    00000053: 	ja	.Ltmp269 # Offset: 83
.Ltmp268:
    00000059: 	subq	$0x10, %rsi
    0000005d: 	xorl	%eax, %eax
    0000005f: 	nop # Size: 1
.Ltmp270:
    00000060: 	movdqu	(%rsi), %xmm1
    00000064: 	movq	%rax, %rdi
    00000067: 	addq	$0x1, %rax
    0000006b: 	subq	$0x10, %rsi
    0000006f: 	shlq	$0x4, %rdi
    00000073: 	pshufd	$0x1b, %xmm1, %xmm0
    00000078: 	movups	%xmm0, (%rdx,%rdi)
    0000007c: 	cmpq	%rcx, %rax
    0000007f: 	jb	.Ltmp270 # Offset: 127
.Ltmp273:
    00000081: 	addq	%r11, %r9
    00000084: 	shlq	$0x2, %rcx
.Ltmp274:
    00000088: 	cmpq	%rcx, %r10
    0000008b: 	jle	.Ltmp266 # Offset: 139
    00000091: 	movq	%r10, %rsi
    00000094: 	movq	%r9, %rdi
    00000097: 	subq	%rcx, %rsi
    0000009a: 	leaq	(,%rsi,4), %rax
    000000a2: 	subq	%rax, %rdi
    000000a5: 	leaq	(%r8,%rax), %rdx
    000000a9: 	leaq	0x4(%rdi), %rax
    000000ad: 	cmpq	%rax, %rdx
    000000b0: 	leaq	0x4(%r9), %rdx
    000000b4: 	setbe	%al
    000000b7: 	cmpq	%rdx, %r8
    000000ba: 	setae	%dl
    000000bd: 	orb	%dl, %al
    000000bf: 	je	.Ltmp271 # Offset: 191
    000000c1: 	leaq	-0x1(%rsi), %rax
    000000c5: 	cmpq	$0x2, %rax
    000000c9: 	jbe	.Ltmp271 # Offset: 201
    000000cb: 	movq	%rsi, %rdx
    000000ce: 	movdqu	-0xc(%r9), %xmm2
    000000d4: 	andq	$-0x4, %rdx
    000000d8: 	movq	%rdx, %rax
    000000db: 	pshufd	$0x1b, %xmm2, %xmm0
    000000e0: 	addq	%rdx, %rcx
    000000e3: 	negq	%rax
    000000e6: 	movups	%xmm0, (%r8)
    000000ea: 	shlq	$0x2, %rax
    000000ee: 	addq	%rax, %r9
    000000f1: 	subq	%rax, %r8
    000000f4: 	cmpq	%rdx, %rsi
    000000f7: 	je	.Ltmp266 # Offset: 247
    000000f9: 	movl	(%r9), %eax
    000000fc: 	movl	%eax, (%r8)
    000000ff: 	leaq	0x1(%rcx), %rax
    00000103: 	cmpq	%rax, %r10
    00000106: 	jle	.Ltmp266 # Offset: 262
    00000108: 	movl	-0x4(%r9), %eax
    0000010c: 	addq	$0x2, %rcx
    00000110: 	movl	%eax, 0x4(%r8)
    00000114: 	cmpq	%rcx, %r10
    00000117: 	jle	.Ltmp266 # Offset: 279
    00000119: 	movl	-0x8(%r9), %eax
    0000011d: 	movl	%eax, 0x8(%r8)
    00000121: 	retq # Offset: 289
    00000122: 	nopw	(%rax,%rax) # Size: 6
.Ltmp271:
    00000128: 	movl	(%r9), %eax
    0000012b: 	movl	%eax, (%r8)
    0000012e: 	leaq	0x1(%rcx), %rax
    00000132: 	cmpq	%rax, %r10
    00000135: 	jle	.Ltmp266 # Offset: 309
    00000137: 	movl	-0x4(%r9), %eax
    0000013b: 	movl	%eax, 0x4(%r8)
    0000013f: 	leaq	0x2(%rcx), %rax
    00000143: 	cmpq	%rax, %r10
    00000146: 	jle	.Ltmp266 # Offset: 326
    00000148: 	movl	-0x8(%r9), %eax
    0000014c: 	addq	$0x3, %rcx
    00000150: 	movl	%eax, 0x8(%r8)
    00000154: 	cmpq	%rcx, %r10
    00000157: 	jle	.Ltmp266 # Offset: 343
    00000159: 	movl	-0xc(%r9), %eax
    0000015d: 	movl	%eax, 0xc(%r8)
.Ltmp266:
    00000161: 	retq # Offset: 353
    00000162: 	nopw	(%rax,%rax) # Size: 6
.Ltmp269:
    00000168: 	movq	%r9, %rax
    0000016b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp272:
    00000170: 	movl	(%rax), %esi
    00000172: 	addq	$0x10, %rdx
    00000176: 	subq	$0x10, %rax
    0000017a: 	movl	%esi, -0x10(%rdx)
    0000017d: 	movl	0xc(%rax), %esi
    00000180: 	movl	%esi, -0xc(%rdx)
    00000183: 	movl	0x8(%rax), %esi
    00000186: 	movl	%esi, -0x8(%rdx)
    00000189: 	movl	0x4(%rax), %esi
    0000018c: 	movl	%esi, -0x4(%rdx)
    0000018f: 	cmpq	%rdx, %r8
    00000192: 	jne	.Ltmp272 # Offset: 402
    00000194: 	jmp	.Ltmp273 # Offset: 404
    00000199: 	nopl	(%rax) # Size: 7
.Ltmp267:
    000001a0: 	movq	%rdx, %r8
    000001a3: 	xorl	%ecx, %ecx
    000001a5: 	jmp	.Ltmp274 # Offset: 421
DWARF CFI Instructions:
    <empty>
End of Function "_Z18fast_reverse_copy2IPiS0_EvT_S1_T0_"

Binary Function "_Z18fast_reverse_copy3IPiS0_EvT_S1_T0_" after disassembly {
  Number      : 87
  State       : disassembled
  Address     : 0x59b0
  Size        : 0x1aa
  MaxSize     : 0x1b0
  Offset      : 0x59b0
  Section     : .text
  Orc Section : .local.text._Z18fast_reverse_copy3IPiS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB086:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp275 # Offset: 7
    0000000d: 	movq	%rsi, %rax
    00000010: 	leaq	-0x4(%rsi), %r9
    00000014: 	subq	%rdi, %rax
    00000017: 	movq	%rax, %r10
    0000001a: 	sarq	$0x2, %r10
    0000001e: 	cmpq	$0xc, %rax
    00000022: 	jle	.Ltmp276 # Offset: 34
    00000028: 	leaq	-0x4(%r10), %rcx
    0000002c: 	movq	%rsi, %rdi
    0000002f: 	shrq	$0x2, %rcx
    00000033: 	addq	$0x1, %rcx
    00000037: 	movq	%rcx, %rax
    0000003a: 	shlq	$0x4, %rax
    0000003e: 	movq	%rax, %r11
    00000041: 	leaq	(%rdx,%rax), %r8
    00000045: 	subq	%rax, %rdi
    00000048: 	negq	%r11
    0000004b: 	cmpq	%rdi, %r8
    0000004e: 	jbe	.Ltmp277 # Offset: 78
    00000050: 	cmpq	%rdx, %rsi
    00000053: 	ja	.Ltmp278 # Offset: 83
.Ltmp277:
    00000059: 	subq	$0x10, %rsi
    0000005d: 	xorl	%eax, %eax
    0000005f: 	nop # Size: 1
.Ltmp279:
    00000060: 	movdqu	(%rsi), %xmm1
    00000064: 	movq	%rax, %rdi
    00000067: 	addq	$0x1, %rax
    0000006b: 	subq	$0x10, %rsi
    0000006f: 	shlq	$0x4, %rdi
    00000073: 	pshufd	$0x1b, %xmm1, %xmm0
    00000078: 	movups	%xmm0, (%rdx,%rdi)
    0000007c: 	cmpq	%rcx, %rax
    0000007f: 	jb	.Ltmp279 # Offset: 127
.Ltmp282:
    00000081: 	shlq	$0x2, %rcx
    00000085: 	addq	%r11, %r9
.Ltmp283:
    00000088: 	cmpq	%rcx, %r10
    0000008b: 	jle	.Ltmp275 # Offset: 139
    00000091: 	movq	%r10, %rsi
    00000094: 	movq	%r9, %rdi
    00000097: 	subq	%rcx, %rsi
    0000009a: 	leaq	(,%rsi,4), %rax
    000000a2: 	subq	%rax, %rdi
    000000a5: 	leaq	(%r8,%rax), %rdx
    000000a9: 	leaq	0x4(%rdi), %rax
    000000ad: 	cmpq	%rax, %rdx
    000000b0: 	leaq	0x4(%r9), %rdx
    000000b4: 	setbe	%al
    000000b7: 	cmpq	%rdx, %r8
    000000ba: 	setae	%dl
    000000bd: 	orb	%dl, %al
    000000bf: 	je	.Ltmp280 # Offset: 191
    000000c1: 	leaq	-0x1(%rsi), %rax
    000000c5: 	cmpq	$0x2, %rax
    000000c9: 	jbe	.Ltmp280 # Offset: 201
    000000cb: 	movq	%rsi, %rdx
    000000ce: 	movdqu	-0xc(%r9), %xmm2
    000000d4: 	andq	$-0x4, %rdx
    000000d8: 	movq	%rdx, %rax
    000000db: 	pshufd	$0x1b, %xmm2, %xmm0
    000000e0: 	addq	%rdx, %rcx
    000000e3: 	negq	%rax
    000000e6: 	movups	%xmm0, (%r8)
    000000ea: 	shlq	$0x2, %rax
    000000ee: 	addq	%rax, %r9
    000000f1: 	subq	%rax, %r8
    000000f4: 	cmpq	%rdx, %rsi
    000000f7: 	je	.Ltmp275 # Offset: 247
    000000f9: 	movl	(%r9), %eax
    000000fc: 	movl	%eax, (%r8)
    000000ff: 	leaq	0x1(%rcx), %rax
    00000103: 	cmpq	%rax, %r10
    00000106: 	jle	.Ltmp275 # Offset: 262
    00000108: 	movl	-0x4(%r9), %eax
    0000010c: 	addq	$0x2, %rcx
    00000110: 	movl	%eax, 0x4(%r8)
    00000114: 	cmpq	%rcx, %r10
    00000117: 	jle	.Ltmp275 # Offset: 279
    00000119: 	movl	-0x8(%r9), %eax
    0000011d: 	movl	%eax, 0x8(%r8)
    00000121: 	retq # Offset: 289
    00000122: 	nopw	(%rax,%rax) # Size: 6
.Ltmp280:
    00000128: 	movl	(%r9), %eax
    0000012b: 	movl	%eax, (%r8)
    0000012e: 	leaq	0x1(%rcx), %rax
    00000132: 	cmpq	%rax, %r10
    00000135: 	jle	.Ltmp275 # Offset: 309
    00000137: 	movl	-0x4(%r9), %eax
    0000013b: 	movl	%eax, 0x4(%r8)
    0000013f: 	leaq	0x2(%rcx), %rax
    00000143: 	cmpq	%rax, %r10
    00000146: 	jle	.Ltmp275 # Offset: 326
    00000148: 	movl	-0x8(%r9), %eax
    0000014c: 	addq	$0x3, %rcx
    00000150: 	movl	%eax, 0x8(%r8)
    00000154: 	cmpq	%rcx, %r10
    00000157: 	jle	.Ltmp275 # Offset: 343
    00000159: 	movl	-0xc(%r9), %eax
    0000015d: 	movl	%eax, 0xc(%r8)
.Ltmp275:
    00000161: 	retq # Offset: 353
    00000162: 	nopw	(%rax,%rax) # Size: 6
.Ltmp278:
    00000168: 	movq	%r9, %rax
    0000016b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp281:
    00000170: 	movl	(%rax), %esi
    00000172: 	addq	$0x10, %rdx
    00000176: 	subq	$0x10, %rax
    0000017a: 	movl	%esi, -0x10(%rdx)
    0000017d: 	movl	0xc(%rax), %esi
    00000180: 	movl	%esi, -0xc(%rdx)
    00000183: 	movl	0x8(%rax), %esi
    00000186: 	movl	%esi, -0x8(%rdx)
    00000189: 	movl	0x4(%rax), %esi
    0000018c: 	movl	%esi, -0x4(%rdx)
    0000018f: 	cmpq	%rdx, %r8
    00000192: 	jne	.Ltmp281 # Offset: 402
    00000194: 	jmp	.Ltmp282 # Offset: 404
    00000199: 	nopl	(%rax) # Size: 7
.Ltmp276:
    000001a0: 	movq	%rdx, %r8
    000001a3: 	xorl	%ecx, %ecx
    000001a5: 	jmp	.Ltmp283 # Offset: 421
DWARF CFI Instructions:
    <empty>
End of Function "_Z18fast_reverse_copy3IPiS0_EvT_S1_T0_"

Binary Function "_Z18fast_reverse_copy4IPiS0_EvT_S1_T0_" after disassembly {
  Number      : 88
  State       : disassembled
  Address     : 0x5b60
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0x5b60
  Section     : .text
  Orc Section : .local.text._Z18fast_reverse_copy4IPiS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB087:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp284 # Offset: 7
    0000000d: 	movq	%rsi, %rax
    00000010: 	leaq	-0x4(%rsi), %rcx
    00000014: 	subq	%rdi, %rax
    00000017: 	movq	%rax, %r8
    0000001a: 	sarq	$0x2, %r8
    0000001e: 	cmpq	$0x1c, %rax
    00000022: 	jle	.Ltmp285 # Offset: 34
    00000028: 	leaq	-0x8(%r8), %rax
    0000002c: 	shrq	$0x3, %rax
    00000030: 	leaq	0x1(%rax), %rdi
    00000034: 	movq	%rcx, %rax
    00000037: 	movq	%rdi, %r9
    0000003a: 	shlq	$0x5, %r9
    0000003e: 	leaq	(%rdx,%r9), %rsi
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp286:
    00000048: 	movdqu	-0x1c(%rax), %xmm1
    0000004d: 	movdqu	-0xc(%rax), %xmm2
    00000052: 	addq	$0x20, %rdx
    00000056: 	subq	$0x20, %rax
    0000005a: 	movdqa	%xmm1, %xmm0
    0000005e: 	psllq	$0x20, %xmm1
    00000063: 	psrlq	$0x20, %xmm0
    00000068: 	por	%xmm1, %xmm0
    0000006c: 	movdqa	%xmm2, %xmm1
    00000070: 	psrlq	$0x20, %xmm1
    00000075: 	psllq	$0x20, %xmm2
    0000007a: 	shufpd	$0x1, %xmm0, %xmm0
    0000007f: 	movups	%xmm0, -0x10(%rdx)
    00000083: 	por	%xmm2, %xmm1
    00000087: 	shufpd	$0x1, %xmm1, %xmm1
    0000008c: 	movups	%xmm1, -0x20(%rdx)
    00000090: 	cmpq	%rsi, %rdx
    00000093: 	jne	.Ltmp286 # Offset: 147
    00000095: 	leaq	(,%rdi,8), %rax
    0000009d: 	subq	%r9, %rcx
.Ltmp289:
    000000a0: 	cmpq	%rax, %r8
    000000a3: 	jle	.Ltmp284 # Offset: 163
    000000a9: 	movq	%r8, %r9
    000000ac: 	movq	%rcx, %r10
    000000af: 	subq	%rax, %r9
    000000b2: 	leaq	(,%r9,4), %rdx
    000000ba: 	subq	%rdx, %r10
    000000bd: 	leaq	(%rsi,%rdx), %rdi
    000000c1: 	leaq	0x4(%r10), %rdx
    000000c5: 	cmpq	%rdx, %rdi
    000000c8: 	leaq	0x4(%rcx), %rdi
    000000cc: 	setbe	%dl
    000000cf: 	cmpq	%rdi, %rsi
    000000d2: 	setae	%dil
    000000d6: 	orb	%dil, %dl
    000000d9: 	je	.Ltmp287 # Offset: 217
    000000df: 	leaq	-0x1(%r9), %rdx
    000000e3: 	cmpq	$0x2, %rdx
    000000e7: 	jbe	.Ltmp287 # Offset: 231
    000000e9: 	movdqu	-0xc(%rcx), %xmm3
    000000ee: 	movq	%r9, %rdx
    000000f1: 	shrq	$0x2, %rdx
    000000f5: 	pshufd	$0x1b, %xmm3, %xmm0
    000000fa: 	movups	%xmm0, (%rsi)
    000000fd: 	cmpq	$0x1, %rdx
    00000101: 	je	.Ltmp288 # Offset: 257
    00000103: 	movdqu	-0x1c(%rcx), %xmm4
    00000108: 	pshufd	$0x1b, %xmm4, %xmm0
    0000010d: 	movups	%xmm0, 0x10(%rsi)
.Ltmp288:
    00000111: 	movq	%r9, %rdi
    00000114: 	andq	$-0x4, %rdi
    00000118: 	movq	%rdi, %rdx
    0000011b: 	addq	%rdi, %rax
    0000011e: 	negq	%rdx
    00000121: 	shlq	$0x2, %rdx
    00000125: 	addq	%rdx, %rcx
    00000128: 	subq	%rdx, %rsi
    0000012b: 	cmpq	%rdi, %r9
    0000012e: 	je	.Ltmp284 # Offset: 302
    00000134: 	movl	(%rcx), %edx
    00000136: 	movl	%edx, (%rsi)
    00000138: 	leaq	0x1(%rax), %rdx
    0000013c: 	cmpq	%rdx, %r8
    0000013f: 	jle	.Ltmp284 # Offset: 319
    00000145: 	movl	-0x4(%rcx), %edx
    00000148: 	addq	$0x2, %rax
    0000014c: 	movl	%edx, 0x4(%rsi)
    0000014f: 	cmpq	%rax, %r8
    00000152: 	jle	.Ltmp284 # Offset: 338
    00000154: 	movl	-0x8(%rcx), %eax
    00000157: 	movl	%eax, 0x8(%rsi)
    0000015a: 	retq # Offset: 346
    0000015b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp287:
    00000160: 	movl	(%rcx), %edx
    00000162: 	movl	%edx, (%rsi)
    00000164: 	leaq	0x1(%rax), %rdx
    00000168: 	cmpq	%rdx, %r8
    0000016b: 	jle	.Ltmp284 # Offset: 363
    0000016d: 	movl	-0x4(%rcx), %edx
    00000170: 	movl	%edx, 0x4(%rsi)
    00000173: 	leaq	0x2(%rax), %rdx
    00000177: 	cmpq	%rdx, %r8
    0000017a: 	jle	.Ltmp284 # Offset: 378
    0000017c: 	movl	-0x8(%rcx), %edx
    0000017f: 	movl	%edx, 0x8(%rsi)
    00000182: 	leaq	0x3(%rax), %rdx
    00000186: 	cmpq	%rdx, %r8
    00000189: 	jle	.Ltmp284 # Offset: 393
    0000018b: 	movl	-0xc(%rcx), %edx
    0000018e: 	movl	%edx, 0xc(%rsi)
    00000191: 	leaq	0x4(%rax), %rdx
    00000195: 	cmpq	%rdx, %r8
    00000198: 	jle	.Ltmp284 # Offset: 408
    0000019a: 	movl	-0x10(%rcx), %edx
    0000019d: 	movl	%edx, 0x10(%rsi)
    000001a0: 	leaq	0x5(%rax), %rdx
    000001a4: 	cmpq	%rdx, %r8
    000001a7: 	jle	.Ltmp284 # Offset: 423
    000001a9: 	movl	-0x14(%rcx), %edx
    000001ac: 	movl	%edx, 0x14(%rsi)
    000001af: 	leaq	0x6(%rax), %rdx
    000001b3: 	cmpq	%rdx, %r8
    000001b6: 	jle	.Ltmp284 # Offset: 438
    000001b8: 	movl	-0x18(%rcx), %edx
    000001bb: 	addq	$0x7, %rax
    000001bf: 	movl	%edx, 0x18(%rsi)
    000001c2: 	cmpq	%rax, %r8
    000001c5: 	jle	.Ltmp284 # Offset: 453
    000001c7: 	movl	-0x1c(%rcx), %eax
    000001ca: 	movl	%eax, 0x1c(%rsi)
.Ltmp284:
    000001cd: 	retq # Offset: 461
    000001ce: 	nop # Size: 2
.Ltmp285:
    000001d0: 	movq	%rdx, %rsi
    000001d3: 	xorl	%eax, %eax
    000001d5: 	jmp	.Ltmp289 # Offset: 469
DWARF CFI Instructions:
    <empty>
End of Function "_Z18fast_reverse_copy4IPiS0_EvT_S1_T0_"

Binary Function "_ZSt7reverseI20BidirectionalPointerIfEEvT_S2_" after disassembly {
  Number      : 89
  State       : disassembled
  Address     : 0x5d40
  Size        : 0x34
  MaxSize     : 0x40
  Offset      : 0x5d40
  Section     : .text
  Orc Section : .local.text._ZSt7reverseI20BidirectionalPointerIfEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB088:
    00000000: 	endbr64
    00000004: 	jmp	.Ltmp290 # Offset: 4
    00000006: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp292:
    00000010: 	subq	$0x4, %rsi
    00000014: 	cmpq	%rsi, %rdi
    00000017: 	je	.Ltmp291 # Offset: 23
    00000019: 	movss	(%rdi), %xmm0
    0000001d: 	movss	(%rsi), %xmm1
    00000021: 	addq	$0x4, %rdi
    00000025: 	movss	%xmm1, -0x4(%rdi)
    0000002a: 	movss	%xmm0, (%rsi)
.Ltmp290:
    0000002e: 	cmpq	%rsi, %rdi
    00000031: 	jne	.Ltmp292 # Offset: 49
.Ltmp291:
    00000033: 	retq # Offset: 51
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt7reverseI20BidirectionalPointerIfEEvT_S2_"

Binary Function "_Z17my_simple_reverseI20BidirectionalPointerIfEEvT_S2_" after disassembly {
  Number      : 90
  State       : disassembled
  Address     : 0x5d80
  Size        : 0x34
  MaxSize     : 0x40
  Offset      : 0x5d80
  Section     : .text
  Orc Section : .local.text._Z17my_simple_reverseI20BidirectionalPointerIfEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB089:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp293 # Offset: 7
    00000009: 	nopl	(%rax) # Size: 7
.Ltmp294:
    00000010: 	subq	$0x4, %rsi
    00000014: 	cmpq	%rdi, %rsi
    00000017: 	je	.Ltmp293 # Offset: 23
    00000019: 	movss	(%rsi), %xmm1
    0000001d: 	movss	(%rdi), %xmm0
    00000021: 	addq	$0x4, %rdi
    00000025: 	movss	%xmm1, -0x4(%rdi)
    0000002a: 	movss	%xmm0, (%rsi)
    0000002e: 	cmpq	%rdi, %rsi
    00000031: 	jne	.Ltmp294 # Offset: 49
.Ltmp293:
    00000033: 	retq # Offset: 51
DWARF CFI Instructions:
    <empty>
End of Function "_Z17my_simple_reverseI20BidirectionalPointerIfEEvT_S2_"

Binary Function "_Z15my_fast_reverseI20BidirectionalPointerIfEEvT_S2_" after disassembly {
  Number      : 91
  State       : disassembled
  Address     : 0x5dc0
  Size        : 0x34
  MaxSize     : 0x40
  Offset      : 0x5dc0
  Section     : .text
  Orc Section : .local.text._Z15my_fast_reverseI20BidirectionalPointerIfEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB090:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp295 # Offset: 7
    00000009: 	nopl	(%rax) # Size: 7
.Ltmp296:
    00000010: 	subq	$0x4, %rsi
    00000014: 	cmpq	%rdi, %rsi
    00000017: 	je	.Ltmp295 # Offset: 23
    00000019: 	movss	(%rsi), %xmm1
    0000001d: 	movss	(%rdi), %xmm0
    00000021: 	addq	$0x4, %rdi
    00000025: 	movss	%xmm1, -0x4(%rdi)
    0000002a: 	movss	%xmm0, (%rsi)
    0000002e: 	cmpq	%rdi, %rsi
    00000031: 	jne	.Ltmp296 # Offset: 49
.Ltmp295:
    00000033: 	retq # Offset: 51
DWARF CFI Instructions:
    <empty>
End of Function "_Z15my_fast_reverseI20BidirectionalPointerIfEEvT_S2_"

Binary Function "_ZSt7reverseIPfEvT_S1_" after disassembly {
  Number      : 92
  State       : disassembled
  Address     : 0x5e00
  Size        : 0x150
  MaxSize     : 0x150
  Offset      : 0x5e00
  Section     : .text
  Orc Section : .local.text._ZSt7reverseIPfEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB091:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp297 # Offset: 10
    00000010: 	leaq	-0x4(%rsi), %rdx
    00000014: 	movq	%rsi, %rdi
    00000017: 	cmpq	%rdx, %rax
    0000001a: 	jae	.Ltmp297 # Offset: 26
    00000020: 	leaq	-0x5(%rsi), %rsi
    00000024: 	movq	%rdi, %r11
    00000027: 	pushq	%rbx
    00000028: 	movq	%rax, %rcx
    0000002b: 	subq	%rax, %rsi
    0000002e: 	movq	%rsi, %r10
    00000031: 	shrq	$0x3, %r10
    00000035: 	leaq	0x1(%r10), %r9
    00000039: 	leaq	(,%r9,4), %r8
    00000041: 	subq	%r8, %r11
    00000044: 	leaq	(%rax,%r8), %rbx
    00000048: 	cmpq	%r11, %rbx
    0000004b: 	setbe	%r8b
    0000004f: 	cmpq	%rdi, %rax
    00000052: 	setae	%r11b
    00000056: 	orb	%r11b, %r8b
    00000059: 	je	.Ltmp298 # Offset: 89
    0000005f: 	cmpq	$0x7, %rsi
    00000063: 	jbe	.Ltmp298 # Offset: 99
    00000069: 	cmpq	$0x17, %rsi
    0000006d: 	jbe	.Ltmp299 # Offset: 109
    00000073: 	movq	%r9, %r8
    00000076: 	leaq	-0x10(%rdi), %rsi
    0000007a: 	shrq	$0x2, %r8
    0000007e: 	shlq	$0x4, %r8
    00000082: 	addq	%rax, %r8
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp300:
    00000088: 	movups	(%rsi), %xmm1
    0000008b: 	movups	(%rcx), %xmm0
    0000008e: 	addq	$0x10, %rcx
    00000092: 	subq	$0x10, %rsi
    00000096: 	shufps	$0x1b, %xmm1, %xmm1
    0000009a: 	shufps	$0x1b, %xmm0, %xmm0
    0000009e: 	movups	%xmm1, -0x10(%rcx)
    000000a2: 	movups	%xmm0, 0x10(%rsi)
    000000a6: 	cmpq	%rcx, %r8
    000000a9: 	jne	.Ltmp300 # Offset: 169
    000000ab: 	movq	%r9, %rsi
    000000ae: 	andq	$-0x4, %rsi
    000000b2: 	leaq	(,%rsi,4), %r8
    000000ba: 	leaq	(%rax,%r8), %rcx
    000000be: 	subq	%r8, %rdx
    000000c1: 	cmpq	%rsi, %r9
    000000c4: 	je	.Ltmp301 # Offset: 196
.Ltmp303:
    000000c6: 	subq	%rsi, %r9
    000000c9: 	cmpq	%rsi, %r10
    000000cc: 	je	.Ltmp302 # Offset: 204
    000000ce: 	shlq	$0x2, %rsi
    000000d2: 	subq	%rsi, %rdi
    000000d5: 	addq	%rsi, %rax
    000000d8: 	movq	-0x8(%rdi), %xmm1
    000000dd: 	movq	(%rax), %xmm0
    000000e1: 	shufps	$0xe1, %xmm1, %xmm1
    000000e5: 	shufps	$0xe1, %xmm0, %xmm0
    000000e9: 	movlps	%xmm1, (%rax)
    000000ec: 	movq	%r9, %rax
    000000ef: 	andq	$-0x2, %rax
    000000f3: 	movlps	%xmm0, -0x8(%rdi)
    000000f7: 	leaq	(,%rax,4), %rsi
    000000ff: 	addq	%rsi, %rcx
    00000102: 	subq	%rsi, %rdx
    00000105: 	cmpq	%rax, %r9
    00000108: 	je	.Ltmp301 # Offset: 264
.Ltmp302:
    0000010a: 	movss	(%rcx), %xmm0
    0000010e: 	movss	(%rdx), %xmm1
    00000112: 	movss	%xmm1, (%rcx)
    00000116: 	movss	%xmm0, (%rdx)
.Ltmp301:
    0000011a: 	popq	%rbx
    0000011b: 	retq # Offset: 283
    0000011c: 	nopl	(%rax) # Size: 4
.Ltmp298:
    00000120: 	movss	(%rax), %xmm0
    00000124: 	movss	(%rdx), %xmm1
    00000128: 	addq	$0x4, %rax
    0000012c: 	subq	$0x4, %rdx
    00000130: 	movss	%xmm1, -0x4(%rax)
    00000135: 	movss	%xmm0, 0x4(%rdx)
    0000013a: 	cmpq	%rdx, %rax
    0000013d: 	jb	.Ltmp298 # Offset: 317
    0000013f: 	jmp	.Ltmp301 # Offset: 319
    00000141: 	nopl	(%rax) # Size: 7
.Ltmp297:
    00000148: 	retq # Offset: 328
.Ltmp299:
    00000149: 	xorl	%esi, %esi
    0000014b: 	jmp	.Ltmp303 # Offset: 331
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt7reverseIPfEvT_S1_"

Binary Function "_Z17my_simple_reverseIPfEvT_S1_" after disassembly {
  Number      : 93
  State       : disassembled
  Address     : 0x5f50
  Size        : 0x16b
  MaxSize     : 0x170
  Offset      : 0x5f50
  Section     : .text
  Orc Section : .local.text._Z17my_simple_reverseIPfEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB092:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movq	%rsi, %r9
    0000000a: 	cmpq	%rsi, %rdi
    0000000d: 	je	.Ltmp304 # Offset: 13
    00000013: 	subq	%rdi, %rsi
    00000016: 	leaq	-0x4(%r9), %rdx
    0000001a: 	movq	%rsi, %rax
    0000001d: 	movq	%rsi, %rdi
    00000020: 	sarq	$0x2, %rax
    00000024: 	shrq	$0x3f, %rdi
    00000028: 	addq	%rax, %rdi
    0000002b: 	sarq	%rdi
    0000002e: 	cmpq	$0x4, %rsi
    00000032: 	jle	.Ltmp304 # Offset: 50
    00000038: 	leaq	(,%rdi,4), %rax
    00000040: 	movq	%r9, %r8
    00000043: 	subq	%rax, %r8
    00000046: 	leaq	(%rcx,%rax), %r10
    0000004a: 	cmpq	%r8, %r10
    0000004d: 	setbe	%al
    00000050: 	cmpq	%r9, %rcx
    00000053: 	setae	%r8b
    00000057: 	orb	%r8b, %al
    0000005a: 	je	.Ltmp305 # Offset: 90
    00000060: 	cmpq	$0xc, %rsi
    00000064: 	jle	.Ltmp305 # Offset: 100
    0000006a: 	cmpq	$0x1c, %rsi
    0000006e: 	jle	.Ltmp306 # Offset: 110
    00000074: 	movq	%rdi, %r8
    00000077: 	movq	%rcx, %rax
    0000007a: 	leaq	-0x10(%r9), %rsi
    0000007e: 	shrq	$0x2, %r8
    00000082: 	shlq	$0x4, %r8
    00000086: 	addq	%rcx, %r8
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp307:
    00000090: 	movups	(%rsi), %xmm1
    00000093: 	movups	(%rax), %xmm0
    00000096: 	addq	$0x10, %rax
    0000009a: 	subq	$0x10, %rsi
    0000009e: 	shufps	$0x1b, %xmm1, %xmm1
    000000a2: 	shufps	$0x1b, %xmm0, %xmm0
    000000a6: 	movups	%xmm1, -0x10(%rax)
    000000aa: 	movups	%xmm0, 0x10(%rsi)
    000000ae: 	cmpq	%r8, %rax
    000000b1: 	jne	.Ltmp307 # Offset: 177
    000000b3: 	movq	%rdi, %rsi
    000000b6: 	andq	$-0x4, %rsi
    000000ba: 	leaq	(,%rsi,4), %rax
    000000c2: 	leaq	(%rcx,%rax), %r8
    000000c6: 	subq	%rax, %rdx
    000000c9: 	cmpq	%rsi, %rdi
    000000cc: 	je	.Ltmp308 # Offset: 204
.Ltmp311:
    000000d2: 	subq	%rsi, %rdi
    000000d5: 	cmpq	$0x1, %rdi
    000000d9: 	je	.Ltmp309 # Offset: 217
    000000db: 	shlq	$0x2, %rsi
    000000df: 	movq	%r9, %rax
    000000e2: 	addq	%rsi, %rcx
    000000e5: 	subq	%rsi, %rax
    000000e8: 	movq	(%rcx), %xmm0
    000000ec: 	movq	-0x8(%rax), %xmm1
    000000f1: 	shufps	$0xe1, %xmm0, %xmm0
    000000f5: 	shufps	$0xe1, %xmm1, %xmm1
    000000f9: 	movlps	%xmm1, (%rcx)
    000000fc: 	movlps	%xmm0, -0x8(%rax)
    00000100: 	movq	%rdi, %rax
    00000103: 	andq	$-0x2, %rax
    00000107: 	leaq	(,%rax,4), %rcx
    0000010f: 	addq	%rcx, %r8
    00000112: 	subq	%rcx, %rdx
    00000115: 	cmpq	%rax, %rdi
    00000118: 	je	.Ltmp304 # Offset: 280
.Ltmp309:
    0000011a: 	movss	(%r8), %xmm0
    0000011f: 	movss	(%rdx), %xmm1
    00000123: 	movss	%xmm1, (%r8)
    00000128: 	movss	%xmm0, (%rdx)
    0000012c: 	retq # Offset: 300
    0000012d: 	nopl	(%rax) # Size: 3
.Ltmp305:
    00000130: 	xorl	%eax, %eax
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp310:
    00000138: 	movss	(%rdx), %xmm1
    0000013c: 	movss	(%rcx,%rax,4), %xmm0
    00000141: 	subq	$0x4, %rdx
    00000145: 	movss	%xmm1, (%rcx,%rax,4)
    0000014a: 	addq	$0x1, %rax
    0000014e: 	movss	%xmm0, 0x4(%rdx)
    00000153: 	cmpq	%rax, %rdi
    00000156: 	jg	.Ltmp310 # Offset: 342
.Ltmp304:
    00000158: 	retq # Offset: 344
    00000159: 	nopl	(%rax) # Size: 7
.Ltmp308:
    00000160: 	retq # Offset: 352
.Ltmp306:
    00000161: 	movq	%rcx, %r8
    00000164: 	xorl	%esi, %esi
    00000166: 	jmp	.Ltmp311 # Offset: 358
DWARF CFI Instructions:
    <empty>
End of Function "_Z17my_simple_reverseIPfEvT_S1_"

Binary Function "_Z13fast_reverse2IPfEvT_S1_" after disassembly {
  Number      : 94
  State       : disassembled
  Address     : 0x60c0
  Size        : 0x2a7
  MaxSize     : 0x2b0
  Offset      : 0x60c0
  Section     : .text
  Orc Section : .local.text._Z13fast_reverse2IPfEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB093:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp312 # Offset: 7
    0000000d: 	movq	%rsi, %rcx
    00000010: 	movq	%rsi, %rdx
    00000013: 	movq	%rdi, %rax
    00000016: 	pushq	%rbx
    00000017: 	subq	%rdi, %rcx
    0000001a: 	leaq	-0x4(%rdx), %r8
    0000001e: 	movq	%rcx, %rsi
    00000021: 	movq	%rcx, %rdi
    00000024: 	sarq	$0x2, %rsi
    00000028: 	shrq	$0x3f, %rdi
    0000002c: 	addq	%rsi, %rdi
    0000002f: 	sarq	%rdi
    00000032: 	cmpq	$0x1c, %rcx
    00000036: 	jle	.Ltmp313 # Offset: 54
    0000003c: 	leaq	-0x4(%rdi), %rcx
    00000040: 	movq	%rdx, %rbx
    00000043: 	shrq	$0x2, %rcx
    00000047: 	leaq	0x1(%rcx), %rsi
    0000004b: 	movq	%rsi, %r10
    0000004e: 	shlq	$0x4, %r10
    00000052: 	movq	%r10, %r11
    00000055: 	leaq	(%rax,%r10), %r9
    00000059: 	subq	%r10, %rbx
    0000005c: 	negq	%r11
    0000005f: 	cmpq	%rbx, %r9
    00000062: 	jbe	.Ltmp314 # Offset: 98
    00000064: 	cmpq	%rdx, %rax
    00000067: 	jb	.Ltmp315 # Offset: 103
.Ltmp314:
    0000006d: 	subq	$0x10, %rdx
    00000071: 	xorl	%ecx, %ecx
    00000073: 	nopl	(%rax,%rax) # Size: 5
.Ltmp316:
    00000078: 	movups	(%rax), %xmm0
    0000007b: 	movups	(%rdx), %xmm1
    0000007e: 	addq	$0x1, %rcx
    00000082: 	subq	$0x10, %rdx
    00000086: 	addq	$0x10, %rax
    0000008a: 	shufps	$0x1b, %xmm1, %xmm1
    0000008e: 	shufps	$0x1b, %xmm0, %xmm0
    00000092: 	movups	%xmm1, -0x10(%rax)
    00000096: 	movups	%xmm0, 0x10(%rdx)
    0000009a: 	cmpq	%rsi, %rcx
    0000009d: 	jb	.Ltmp316 # Offset: 157
.Ltmp322:
    0000009f: 	shlq	$0x2, %rsi
    000000a3: 	addq	%r11, %r8
.Ltmp323:
    000000a6: 	cmpq	%rsi, %rdi
    000000a9: 	jle	.Ltmp317 # Offset: 169
    000000af: 	movq	%rdi, %rax
    000000b2: 	movq	%r8, %r10
    000000b5: 	subq	%rsi, %rax
    000000b8: 	leaq	(,%rax,4), %rdx
    000000c0: 	subq	%rdx, %r10
    000000c3: 	leaq	(%r9,%rdx), %rcx
    000000c7: 	leaq	0x4(%r10), %rdx
    000000cb: 	cmpq	%rdx, %rcx
    000000ce: 	leaq	0x4(%r8), %rcx
    000000d2: 	setbe	%dl
    000000d5: 	cmpq	%rcx, %r9
    000000d8: 	setae	%cl
    000000db: 	orb	%cl, %dl
    000000dd: 	je	.Ltmp318 # Offset: 221
    000000e3: 	cmpq	$0x1, %rax
    000000e7: 	je	.Ltmp318 # Offset: 231
    000000ed: 	leaq	-0x1(%rax), %rdx
    000000f1: 	cmpq	$0x2, %rdx
    000000f5: 	jbe	.Ltmp319 # Offset: 245
    000000fb: 	movq	%rax, %rdx
    000000fe: 	movups	(%r9), %xmm0
    00000102: 	movups	-0xc(%r8), %xmm1
    00000107: 	movq	%r8, %rcx
    0000010a: 	andq	$-0x4, %rdx
    0000010e: 	leaq	(,%rdx,4), %rdi
    00000116: 	shufps	$0x1b, %xmm1, %xmm1
    0000011a: 	shufps	$0x1b, %xmm0, %xmm0
    0000011e: 	movups	%xmm1, (%r9)
    00000122: 	leaq	(%r9,%rdi), %rsi
    00000126: 	movups	%xmm0, -0xc(%r8)
    0000012b: 	subq	%rdi, %rcx
    0000012e: 	cmpq	%rdx, %rax
    00000131: 	je	.Ltmp317 # Offset: 305
    00000133: 	subq	%rdx, %rax
    00000136: 	cmpq	$0x1, %rax
    0000013a: 	je	.Ltmp320 # Offset: 314
.Ltmp324:
    0000013c: 	leaq	(%r9,%rdx,4), %rdi
    00000140: 	notq	%rdx
    00000143: 	leaq	(%r8,%rdx,4), %rdx
    00000147: 	movq	(%rdi), %xmm0
    0000014b: 	movq	(%rdx), %xmm1
    0000014f: 	shufps	$0xe1, %xmm0, %xmm0
    00000153: 	shufps	$0xe1, %xmm1, %xmm1
    00000157: 	movlps	%xmm1, (%rdi)
    0000015a: 	movlps	%xmm0, (%rdx)
    0000015d: 	movq	%rax, %rdx
    00000160: 	andq	$-0x2, %rdx
    00000164: 	leaq	(,%rdx,4), %rdi
    0000016c: 	addq	%rdi, %rsi
    0000016f: 	subq	%rdi, %rcx
    00000172: 	cmpq	%rax, %rdx
    00000175: 	je	.Ltmp317 # Offset: 373
.Ltmp320:
    00000177: 	movss	(%rsi), %xmm0
    0000017b: 	movss	(%rcx), %xmm1
    0000017f: 	movss	%xmm1, (%rsi)
    00000183: 	movss	%xmm0, (%rcx)
.Ltmp317:
    00000187: 	popq	%rbx
    00000188: 	retq # Offset: 392
    00000189: 	nopl	(%rax) # Size: 7
.Ltmp315:
    00000190: 	negq	%rcx
    00000193: 	shlq	$0x4, %rcx
    00000197: 	leaq	-0x14(%rdx,%rcx), %rcx
    0000019c: 	movq	%r8, %rdx
    0000019f: 	nop # Size: 1
.Ltmp321:
    000001a0: 	movss	(%rax), %xmm0
    000001a4: 	movss	(%rdx), %xmm1
    000001a8: 	subq	$0x10, %rdx
    000001ac: 	addq	$0x10, %rax
    000001b0: 	movss	%xmm1, -0x10(%rax)
    000001b5: 	movss	0xc(%rdx), %xmm1
    000001ba: 	movss	%xmm0, 0x10(%rdx)
    000001bf: 	movss	-0xc(%rax), %xmm0
    000001c4: 	movss	%xmm1, -0xc(%rax)
    000001c9: 	movss	0x8(%rdx), %xmm1
    000001ce: 	movss	%xmm0, 0xc(%rdx)
    000001d3: 	movss	-0x8(%rax), %xmm0
    000001d8: 	movss	%xmm1, -0x8(%rax)
    000001dd: 	movss	0x4(%rdx), %xmm1
    000001e2: 	movss	%xmm0, 0x8(%rdx)
    000001e7: 	movss	-0x4(%rax), %xmm0
    000001ec: 	movss	%xmm1, -0x4(%rax)
    000001f1: 	movss	%xmm0, 0x4(%rdx)
    000001f6: 	cmpq	%rdx, %rcx
    000001f9: 	jne	.Ltmp321 # Offset: 505
    000001fb: 	jmp	.Ltmp322 # Offset: 507
.Ltmp318:
    00000200: 	movss	(%r9), %xmm0
    00000205: 	movss	(%r8), %xmm1
    0000020a: 	leaq	0x1(%rsi), %rax
    0000020e: 	movss	%xmm1, (%r9)
    00000213: 	movss	%xmm0, (%r8)
    00000218: 	cmpq	%rax, %rdi
    0000021b: 	jle	.Ltmp317 # Offset: 539
    00000221: 	movss	0x4(%r9), %xmm0
    00000227: 	movss	-0x4(%r8), %xmm1
    0000022d: 	leaq	0x2(%rsi), %rax
    00000231: 	movss	%xmm1, 0x4(%r9)
    00000237: 	movss	%xmm0, -0x4(%r8)
    0000023d: 	cmpq	%rax, %rdi
    00000240: 	jle	.Ltmp317 # Offset: 576
    00000246: 	movss	0x8(%r9), %xmm0
    0000024c: 	movss	-0x8(%r8), %xmm1
    00000252: 	addq	$0x3, %rsi
    00000256: 	movss	%xmm1, 0x8(%r9)
    0000025c: 	movss	%xmm0, -0x8(%r8)
    00000262: 	cmpq	%rsi, %rdi
    00000265: 	jle	.Ltmp317 # Offset: 613
    0000026b: 	movss	0xc(%r9), %xmm0
    00000271: 	movss	-0xc(%r8), %xmm1
    00000277: 	movss	%xmm1, 0xc(%r9)
    0000027d: 	movss	%xmm0, -0xc(%r8)
    00000283: 	popq	%rbx
    00000284: 	retq # Offset: 644
    00000285: 	nopl	(%rax) # Size: 3
.Ltmp312:
    00000288: 	retq # Offset: 648
    00000289: 	nopl	(%rax) # Size: 7
.Ltmp313:
    00000290: 	movq	%rax, %r9
    00000293: 	xorl	%esi, %esi
    00000295: 	jmp	.Ltmp323 # Offset: 661
.Ltmp319:
    0000029a: 	movq	%r8, %rcx
    0000029d: 	movq	%r9, %rsi
    000002a0: 	xorl	%edx, %edx
    000002a2: 	jmp	.Ltmp324 # Offset: 674
DWARF CFI Instructions:
    <empty>
End of Function "_Z13fast_reverse2IPfEvT_S1_"

Binary Function "_Z13fast_reverse3IPfEvT_S1_" after disassembly {
  Number      : 95
  State       : disassembled
  Address     : 0x6370
  Size        : 0x335
  MaxSize     : 0x340
  Offset      : 0x6370
  Section     : .text
  Orc Section : .local.text._Z13fast_reverse3IPfEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB094:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp325 # Offset: 10
    00000010: 	movq	%rsi, %rax
    00000013: 	subq	%rdi, %rax
    00000016: 	leaq	-0x4(%rsi), %rdi
    0000001a: 	movq	%rax, %rdx
    0000001d: 	movq	%rax, %r8
    00000020: 	sarq	$0x2, %rdx
    00000024: 	shrq	$0x3f, %r8
    00000028: 	addq	%rdx, %r8
    0000002b: 	sarq	%r8
    0000002e: 	cmpq	$0x3c, %rax
    00000032: 	jle	.Ltmp326 # Offset: 50
    00000038: 	leaq	-0x8(%r8), %r9
    0000003c: 	movq	%rcx, %rdx
    0000003f: 	shrq	$0x3, %r9
    00000043: 	movq	%r9, %rax
    00000046: 	negq	%rax
    00000049: 	shlq	$0x5, %rax
    0000004d: 	leaq	-0x24(%rsi,%rax), %rsi
    00000052: 	movq	%rdi, %rax
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp327:
    00000058: 	movss	(%rdx), %xmm0
    0000005c: 	movss	(%rax), %xmm1
    00000060: 	subq	$0x20, %rax
    00000064: 	addq	$0x20, %rdx
    00000068: 	movss	%xmm1, -0x20(%rdx)
    0000006d: 	movss	0x1c(%rax), %xmm1
    00000072: 	movss	%xmm0, 0x20(%rax)
    00000077: 	movss	-0x1c(%rdx), %xmm0
    0000007c: 	movss	%xmm1, -0x1c(%rdx)
    00000081: 	movss	0x18(%rax), %xmm1
    00000086: 	movss	%xmm0, 0x1c(%rax)
    0000008b: 	movss	-0x18(%rdx), %xmm0
    00000090: 	movss	%xmm1, -0x18(%rdx)
    00000095: 	movss	0x14(%rax), %xmm1
    0000009a: 	movss	%xmm0, 0x18(%rax)
    0000009f: 	movss	-0x14(%rdx), %xmm0
    000000a4: 	movss	%xmm1, -0x14(%rdx)
    000000a9: 	movss	0x10(%rax), %xmm1
    000000ae: 	movss	%xmm0, 0x14(%rax)
    000000b3: 	movss	-0x10(%rdx), %xmm0
    000000b8: 	movss	%xmm1, -0x10(%rdx)
    000000bd: 	movss	0xc(%rax), %xmm1
    000000c2: 	movss	%xmm0, 0x10(%rax)
    000000c7: 	movss	-0xc(%rdx), %xmm0
    000000cc: 	movss	%xmm1, -0xc(%rdx)
    000000d1: 	movss	0x8(%rax), %xmm1
    000000d6: 	movss	%xmm0, 0xc(%rax)
    000000db: 	movss	-0x8(%rdx), %xmm0
    000000e0: 	movss	%xmm1, -0x8(%rdx)
    000000e5: 	movss	0x4(%rax), %xmm1
    000000ea: 	movss	%xmm0, 0x8(%rax)
    000000ef: 	movss	-0x4(%rdx), %xmm0
    000000f4: 	movss	%xmm1, -0x4(%rdx)
    000000f9: 	movss	%xmm0, 0x4(%rax)
    000000fe: 	cmpq	%rsi, %rax
    00000101: 	jne	.Ltmp327 # Offset: 257
    00000107: 	movq	%r9, %rax
    0000010a: 	leaq	0x8(,%r9,8), %rdx
    00000112: 	notq	%rax
    00000115: 	shlq	$0x5, %rax
    00000119: 	addq	%rax, %rdi
    0000011c: 	subq	%rax, %rcx
.Ltmp332:
    0000011f: 	cmpq	%rdx, %r8
    00000122: 	jle	.Ltmp325 # Offset: 290
    00000128: 	movq	%r8, %rsi
    0000012b: 	movq	%rdi, %r10
    0000012e: 	subq	%rdx, %rsi
    00000131: 	leaq	(,%rsi,4), %rax
    00000139: 	subq	%rax, %r10
    0000013c: 	leaq	(%rcx,%rax), %r9
    00000140: 	leaq	0x4(%r10), %rax
    00000144: 	cmpq	%rax, %r9
    00000147: 	leaq	0x4(%rdi), %r9
    0000014b: 	setbe	%al
    0000014e: 	cmpq	%r9, %rcx
    00000151: 	setae	%r9b
    00000155: 	orb	%r9b, %al
    00000158: 	je	.Ltmp328 # Offset: 344
    0000015e: 	cmpq	$0x1, %rsi
    00000162: 	je	.Ltmp328 # Offset: 354
    00000168: 	leaq	-0x1(%rsi), %rax
    0000016c: 	cmpq	$0x2, %rax
    00000170: 	jbe	.Ltmp329 # Offset: 368
    00000176: 	movups	(%rcx), %xmm0
    00000179: 	movups	-0xc(%rdi), %xmm1
    0000017d: 	movq	%rsi, %rax
    00000180: 	shrq	$0x2, %rax
    00000184: 	shufps	$0x1b, %xmm1, %xmm1
    00000188: 	shufps	$0x1b, %xmm0, %xmm0
    0000018c: 	movups	%xmm1, (%rcx)
    0000018f: 	movups	%xmm0, -0xc(%rdi)
    00000193: 	cmpq	$0x1, %rax
    00000197: 	je	.Ltmp330 # Offset: 407
    00000199: 	movups	0x10(%rcx), %xmm0
    0000019d: 	movups	-0x1c(%rdi), %xmm1
    000001a1: 	shufps	$0x1b, %xmm0, %xmm0
    000001a5: 	shufps	$0x1b, %xmm1, %xmm1
    000001a9: 	movups	%xmm1, 0x10(%rcx)
    000001ad: 	movups	%xmm0, -0x1c(%rdi)
.Ltmp330:
    000001b1: 	movq	%rsi, %r8
    000001b4: 	movq	%rdi, %rax
    000001b7: 	andq	$-0x4, %r8
    000001bb: 	leaq	(,%r8,4), %r9
    000001c3: 	leaq	(%rcx,%r9), %rdx
    000001c7: 	subq	%r9, %rax
    000001ca: 	cmpq	%r8, %rsi
    000001cd: 	je	.Ltmp325 # Offset: 461
    000001d3: 	subq	%r8, %rsi
    000001d6: 	cmpq	$0x1, %rsi
    000001da: 	je	.Ltmp331 # Offset: 474
.Ltmp333:
    000001dc: 	leaq	(%rcx,%r8,4), %r9
    000001e0: 	notq	%r8
    000001e3: 	leaq	(%rdi,%r8,4), %rcx
    000001e7: 	movq	(%r9), %xmm0
    000001ec: 	movq	(%rcx), %xmm1
    000001f0: 	shufps	$0xe1, %xmm0, %xmm0
    000001f4: 	shufps	$0xe1, %xmm1, %xmm1
    000001f8: 	movlps	%xmm1, (%r9)
    000001fc: 	movlps	%xmm0, (%rcx)
    000001ff: 	movq	%rsi, %rcx
    00000202: 	andq	$-0x2, %rcx
    00000206: 	leaq	(,%rcx,4), %rdi
    0000020e: 	addq	%rdi, %rdx
    00000211: 	subq	%rdi, %rax
    00000214: 	cmpq	%rcx, %rsi
    00000217: 	je	.Ltmp325 # Offset: 535
.Ltmp331:
    0000021d: 	movss	(%rdx), %xmm0
    00000221: 	movss	(%rax), %xmm1
    00000225: 	movss	%xmm1, (%rdx)
    00000229: 	movss	%xmm0, (%rax)
    0000022d: 	retq # Offset: 557
    0000022e: 	nop # Size: 2
.Ltmp328:
    00000230: 	movss	(%rcx), %xmm0
    00000234: 	movss	(%rdi), %xmm1
    00000238: 	leaq	0x1(%rdx), %rax
    0000023c: 	movss	%xmm1, (%rcx)
    00000240: 	movss	%xmm0, (%rdi)
    00000244: 	cmpq	%rax, %r8
    00000247: 	jle	.Ltmp325 # Offset: 583
    0000024d: 	movss	0x4(%rcx), %xmm0
    00000252: 	movss	-0x4(%rdi), %xmm1
    00000257: 	leaq	0x2(%rdx), %rax
    0000025b: 	movss	%xmm1, 0x4(%rcx)
    00000260: 	movss	%xmm0, -0x4(%rdi)
    00000265: 	cmpq	%rax, %r8
    00000268: 	jle	.Ltmp325 # Offset: 616
    0000026e: 	movss	0x8(%rcx), %xmm0
    00000273: 	movss	-0x8(%rdi), %xmm1
    00000278: 	leaq	0x3(%rdx), %rax
    0000027c: 	movss	%xmm1, 0x8(%rcx)
    00000281: 	movss	%xmm0, -0x8(%rdi)
    00000286: 	cmpq	%rax, %r8
    00000289: 	jle	.Ltmp325 # Offset: 649
    0000028f: 	movss	0xc(%rcx), %xmm0
    00000294: 	movss	-0xc(%rdi), %xmm1
    00000299: 	leaq	0x4(%rdx), %rax
    0000029d: 	movss	%xmm1, 0xc(%rcx)
    000002a2: 	movss	%xmm0, -0xc(%rdi)
    000002a7: 	cmpq	%rax, %r8
    000002aa: 	jle	.Ltmp325 # Offset: 682
    000002ac: 	movss	0x10(%rcx), %xmm0
    000002b1: 	movss	-0x10(%rdi), %xmm1
    000002b6: 	leaq	0x5(%rdx), %rax
    000002ba: 	movss	%xmm1, 0x10(%rcx)
    000002bf: 	movss	%xmm0, -0x10(%rdi)
    000002c4: 	cmpq	%rax, %r8
    000002c7: 	jle	.Ltmp325 # Offset: 711
    000002c9: 	movss	0x14(%rcx), %xmm0
    000002ce: 	movss	-0x14(%rdi), %xmm1
    000002d3: 	leaq	0x6(%rdx), %rax
    000002d7: 	movss	%xmm1, 0x14(%rcx)
    000002dc: 	movss	%xmm0, -0x14(%rdi)
    000002e1: 	cmpq	%rax, %r8
    000002e4: 	jle	.Ltmp325 # Offset: 740
    000002e6: 	movss	0x18(%rcx), %xmm0
    000002eb: 	movss	-0x18(%rdi), %xmm1
    000002f0: 	addq	$0x7, %rdx
    000002f4: 	movss	%xmm1, 0x18(%rcx)
    000002f9: 	movss	%xmm0, -0x18(%rdi)
    000002fe: 	cmpq	%rdx, %r8
    00000301: 	jle	.Ltmp325 # Offset: 769
    00000303: 	movss	0x1c(%rcx), %xmm0
    00000308: 	movss	-0x1c(%rdi), %xmm1
    0000030d: 	movss	%xmm1, 0x1c(%rcx)
    00000312: 	movss	%xmm0, -0x1c(%rdi)
.Ltmp325:
    00000317: 	retq # Offset: 791
    00000318: 	nopl	(%rax,%rax) # Size: 8
.Ltmp326:
    00000320: 	xorl	%edx, %edx
    00000322: 	jmp	.Ltmp332 # Offset: 802
.Ltmp329:
    00000327: 	movq	%rdi, %rax
    0000032a: 	movq	%rcx, %rdx
    0000032d: 	xorl	%r8d, %r8d
    00000330: 	jmp	.Ltmp333 # Offset: 816
DWARF CFI Instructions:
    <empty>
End of Function "_Z13fast_reverse3IPfEvT_S1_"

Binary Function "_Z13fast_reverse4IPfEvT_S1_" after disassembly {
  Number      : 96
  State       : disassembled
  Address     : 0x66b0
  Size        : 0x315
  MaxSize     : 0x320
  Offset      : 0x66b0
  Section     : .text
  Orc Section : .local.text._Z13fast_reverse4IPfEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB095:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp334 # Offset: 10
    00000010: 	movq	%rsi, %rax
    00000013: 	subq	%rdi, %rax
    00000016: 	leaq	-0x4(%rsi), %rdi
    0000001a: 	movq	%rax, %rdx
    0000001d: 	movq	%rax, %r8
    00000020: 	sarq	$0x2, %rdx
    00000024: 	shrq	$0x3f, %r8
    00000028: 	addq	%rdx, %r8
    0000002b: 	sarq	%r8
    0000002e: 	cmpq	$0x3c, %rax
    00000032: 	jle	.Ltmp335 # Offset: 50
    00000038: 	leaq	-0x8(%r8), %r9
    0000003c: 	movq	%rcx, %rdx
    0000003f: 	shrq	$0x3, %r9
    00000043: 	movq	%r9, %rax
    00000046: 	negq	%rax
    00000049: 	shlq	$0x5, %rax
    0000004d: 	leaq	-0x24(%rsi,%rax), %rsi
    00000052: 	movq	%rdi, %rax
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp336:
    00000058: 	movdqu	(%rdx), %xmm1
    0000005c: 	movdqu	0x10(%rdx), %xmm2
    00000061: 	subq	$0x20, %rax
    00000065: 	addq	$0x20, %rdx
    00000069: 	movdqu	0x4(%rax), %xmm3
    0000006e: 	movdqu	0x14(%rax), %xmm4
    00000073: 	movdqa	%xmm1, %xmm0
    00000077: 	psllq	$0x20, %xmm1
    0000007c: 	psrlq	$0x20, %xmm0
    00000081: 	por	%xmm1, %xmm0
    00000085: 	movdqa	%xmm2, %xmm1
    00000089: 	psrlq	$0x20, %xmm1
    0000008e: 	psllq	$0x20, %xmm2
    00000093: 	shufpd	$0x1, %xmm0, %xmm0
    00000098: 	por	%xmm2, %xmm1
    0000009c: 	movdqa	%xmm3, %xmm2
    000000a0: 	psrlq	$0x20, %xmm2
    000000a5: 	psllq	$0x20, %xmm3
    000000aa: 	shufpd	$0x1, %xmm1, %xmm1
    000000af: 	por	%xmm3, %xmm2
    000000b3: 	movdqa	%xmm4, %xmm3
    000000b7: 	psrlq	$0x20, %xmm3
    000000bc: 	psllq	$0x20, %xmm4
    000000c1: 	shufpd	$0x1, %xmm2, %xmm2
    000000c6: 	movups	%xmm2, -0x10(%rdx)
    000000ca: 	por	%xmm4, %xmm3
    000000ce: 	shufpd	$0x1, %xmm3, %xmm3
    000000d3: 	movups	%xmm3, -0x20(%rdx)
    000000d7: 	movups	%xmm1, 0x4(%rax)
    000000db: 	movups	%xmm0, 0x14(%rax)
    000000df: 	cmpq	%rsi, %rax
    000000e2: 	jne	.Ltmp336 # Offset: 226
    000000e8: 	movq	%r9, %rax
    000000eb: 	leaq	0x8(,%r9,8), %rdx
    000000f3: 	notq	%rax
    000000f6: 	shlq	$0x5, %rax
    000000fa: 	addq	%rax, %rdi
    000000fd: 	subq	%rax, %rcx
.Ltmp341:
    00000100: 	cmpq	%rdx, %r8
    00000103: 	jle	.Ltmp334 # Offset: 259
    00000109: 	movq	%r8, %rsi
    0000010c: 	movq	%rdi, %r10
    0000010f: 	subq	%rdx, %rsi
    00000112: 	leaq	(,%rsi,4), %rax
    0000011a: 	subq	%rax, %r10
    0000011d: 	leaq	(%rcx,%rax), %r9
    00000121: 	leaq	0x4(%r10), %rax
    00000125: 	cmpq	%rax, %r9
    00000128: 	leaq	0x4(%rdi), %r9
    0000012c: 	setbe	%al
    0000012f: 	cmpq	%r9, %rcx
    00000132: 	setae	%r9b
    00000136: 	orb	%r9b, %al
    00000139: 	je	.Ltmp337 # Offset: 313
    0000013f: 	cmpq	$0x1, %rsi
    00000143: 	je	.Ltmp337 # Offset: 323
    00000149: 	leaq	-0x1(%rsi), %rax
    0000014d: 	cmpq	$0x2, %rax
    00000151: 	jbe	.Ltmp338 # Offset: 337
    00000157: 	movups	(%rcx), %xmm0
    0000015a: 	movups	-0xc(%rdi), %xmm1
    0000015e: 	movq	%rsi, %rax
    00000161: 	shrq	$0x2, %rax
    00000165: 	shufps	$0x1b, %xmm1, %xmm1
    00000169: 	shufps	$0x1b, %xmm0, %xmm0
    0000016d: 	movups	%xmm1, (%rcx)
    00000170: 	movups	%xmm0, -0xc(%rdi)
    00000174: 	cmpq	$0x1, %rax
    00000178: 	je	.Ltmp339 # Offset: 376
    0000017a: 	movups	0x10(%rcx), %xmm0
    0000017e: 	movups	-0x1c(%rdi), %xmm1
    00000182: 	shufps	$0x1b, %xmm0, %xmm0
    00000186: 	shufps	$0x1b, %xmm1, %xmm1
    0000018a: 	movups	%xmm1, 0x10(%rcx)
    0000018e: 	movups	%xmm0, -0x1c(%rdi)
.Ltmp339:
    00000192: 	movq	%rsi, %r8
    00000195: 	movq	%rdi, %rax
    00000198: 	andq	$-0x4, %r8
    0000019c: 	leaq	(,%r8,4), %r9
    000001a4: 	leaq	(%rcx,%r9), %rdx
    000001a8: 	subq	%r9, %rax
    000001ab: 	cmpq	%r8, %rsi
    000001ae: 	je	.Ltmp334 # Offset: 430
    000001b4: 	subq	%r8, %rsi
    000001b7: 	cmpq	$0x1, %rsi
    000001bb: 	je	.Ltmp340 # Offset: 443
.Ltmp342:
    000001bd: 	leaq	(%rcx,%r8,4), %r9
    000001c1: 	notq	%r8
    000001c4: 	leaq	(%rdi,%r8,4), %rcx
    000001c8: 	movq	(%r9), %xmm0
    000001cd: 	movq	(%rcx), %xmm1
    000001d1: 	shufps	$0xe1, %xmm0, %xmm0
    000001d5: 	shufps	$0xe1, %xmm1, %xmm1
    000001d9: 	movlps	%xmm1, (%r9)
    000001dd: 	movlps	%xmm0, (%rcx)
    000001e0: 	movq	%rsi, %rcx
    000001e3: 	andq	$-0x2, %rcx
    000001e7: 	leaq	(,%rcx,4), %rdi
    000001ef: 	addq	%rdi, %rdx
    000001f2: 	subq	%rdi, %rax
    000001f5: 	cmpq	%rcx, %rsi
    000001f8: 	je	.Ltmp334 # Offset: 504
.Ltmp340:
    000001fe: 	movss	(%rdx), %xmm0
    00000202: 	movss	(%rax), %xmm1
    00000206: 	movss	%xmm1, (%rdx)
    0000020a: 	movss	%xmm0, (%rax)
    0000020e: 	retq # Offset: 526
    0000020f: 	nop # Size: 1
.Ltmp337:
    00000210: 	movss	(%rcx), %xmm0
    00000214: 	movss	(%rdi), %xmm1
    00000218: 	leaq	0x1(%rdx), %rax
    0000021c: 	movss	%xmm1, (%rcx)
    00000220: 	movss	%xmm0, (%rdi)
    00000224: 	cmpq	%rax, %r8
    00000227: 	jle	.Ltmp334 # Offset: 551
    0000022d: 	movss	0x4(%rcx), %xmm0
    00000232: 	movss	-0x4(%rdi), %xmm1
    00000237: 	leaq	0x2(%rdx), %rax
    0000023b: 	movss	%xmm1, 0x4(%rcx)
    00000240: 	movss	%xmm0, -0x4(%rdi)
    00000245: 	cmpq	%rax, %r8
    00000248: 	jle	.Ltmp334 # Offset: 584
    0000024e: 	movss	0x8(%rcx), %xmm0
    00000253: 	movss	-0x8(%rdi), %xmm1
    00000258: 	leaq	0x3(%rdx), %rax
    0000025c: 	movss	%xmm1, 0x8(%rcx)
    00000261: 	movss	%xmm0, -0x8(%rdi)
    00000266: 	cmpq	%rax, %r8
    00000269: 	jle	.Ltmp334 # Offset: 617
    0000026f: 	movss	0xc(%rcx), %xmm0
    00000274: 	movss	-0xc(%rdi), %xmm1
    00000279: 	leaq	0x4(%rdx), %rax
    0000027d: 	movss	%xmm1, 0xc(%rcx)
    00000282: 	movss	%xmm0, -0xc(%rdi)
    00000287: 	cmpq	%rax, %r8
    0000028a: 	jle	.Ltmp334 # Offset: 650
    0000028c: 	movss	0x10(%rcx), %xmm0
    00000291: 	movss	-0x10(%rdi), %xmm1
    00000296: 	leaq	0x5(%rdx), %rax
    0000029a: 	movss	%xmm1, 0x10(%rcx)
    0000029f: 	movss	%xmm0, -0x10(%rdi)
    000002a4: 	cmpq	%rax, %r8
    000002a7: 	jle	.Ltmp334 # Offset: 679
    000002a9: 	movss	0x14(%rcx), %xmm0
    000002ae: 	movss	-0x14(%rdi), %xmm1
    000002b3: 	leaq	0x6(%rdx), %rax
    000002b7: 	movss	%xmm1, 0x14(%rcx)
    000002bc: 	movss	%xmm0, -0x14(%rdi)
    000002c1: 	cmpq	%rax, %r8
    000002c4: 	jle	.Ltmp334 # Offset: 708
    000002c6: 	movss	0x18(%rcx), %xmm0
    000002cb: 	movss	-0x18(%rdi), %xmm1
    000002d0: 	addq	$0x7, %rdx
    000002d4: 	movss	%xmm1, 0x18(%rcx)
    000002d9: 	movss	%xmm0, -0x18(%rdi)
    000002de: 	cmpq	%rdx, %r8
    000002e1: 	jle	.Ltmp334 # Offset: 737
    000002e3: 	movss	0x1c(%rcx), %xmm0
    000002e8: 	movss	-0x1c(%rdi), %xmm1
    000002ed: 	movss	%xmm1, 0x1c(%rcx)
    000002f2: 	movss	%xmm0, -0x1c(%rdi)
.Ltmp334:
    000002f7: 	retq # Offset: 759
    000002f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp335:
    00000300: 	xorl	%edx, %edx
    00000302: 	jmp	.Ltmp341 # Offset: 770
.Ltmp338:
    00000307: 	movq	%rdi, %rax
    0000030a: 	movq	%rcx, %rdx
    0000030d: 	xorl	%r8d, %r8d
    00000310: 	jmp	.Ltmp342 # Offset: 784
DWARF CFI Instructions:
    <empty>
End of Function "_Z13fast_reverse4IPfEvT_S1_"

Binary Function "_ZSt12reverse_copyI20BidirectionalPointerIfES1_ET0_T_S3_S2_" after disassembly {
  Number      : 97
  State       : disassembled
  Address     : 0x69d0
  Size        : 0xff
  MaxSize     : 0x100
  Offset      : 0x69d0
  Section     : .text
  Orc Section : .local.text._ZSt12reverse_copyI20BidirectionalPointerIfES1_ET0_T_S3_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB096:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rsi, %rax
    0000000a: 	movq	%rsi, %rdi
    0000000d: 	cmpq	%r8, %rsi
    00000010: 	je	.Ltmp343 # Offset: 16
    00000016: 	movq	%rsi, %r9
    00000019: 	subq	%r8, %r9
    0000001c: 	leaq	-0x4(%r9), %rsi
    00000020: 	addq	%rdx, %r9
    00000023: 	movq	%rsi, %rcx
    00000026: 	shrq	$0x2, %rcx
    0000002a: 	leaq	0x1(%rcx), %r10
    0000002e: 	notq	%rcx
    00000031: 	leaq	(%rdi,%rcx,4), %rcx
    00000035: 	cmpq	%rcx, %r9
    00000038: 	setbe	%cl
    0000003b: 	cmpq	%rdx, %rdi
    0000003e: 	setbe	%r11b
    00000042: 	orb	%r11b, %cl
    00000045: 	je	.Ltmp344 # Offset: 69
    0000004b: 	cmpq	$0x8, %rsi
    0000004f: 	jbe	.Ltmp344 # Offset: 79
    00000055: 	movq	%r10, %rsi
    00000058: 	leaq	-0x10(%rdi), %rcx
    0000005c: 	movq	%rdx, %rax
    0000005f: 	shrq	$0x2, %rsi
    00000063: 	shlq	$0x4, %rsi
    00000067: 	addq	%rdx, %rsi
    0000006a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp345:
    00000070: 	movups	(%rcx), %xmm0
    00000073: 	addq	$0x10, %rax
    00000077: 	subq	$0x10, %rcx
    0000007b: 	shufps	$0x1b, %xmm0, %xmm0
    0000007f: 	movups	%xmm0, -0x10(%rax)
    00000083: 	cmpq	%rax, %rsi
    00000086: 	jne	.Ltmp345 # Offset: 134
    00000088: 	movq	%r10, %rcx
    0000008b: 	andq	$-0x4, %rcx
    0000008f: 	movq	%rcx, %rax
    00000092: 	negq	%rax
    00000095: 	shlq	$0x2, %rax
    00000099: 	subq	%rax, %rdx
    0000009c: 	cmpq	%rcx, %r10
    0000009f: 	je	.Ltmp346 # Offset: 159
    000000a1: 	leaq	-0x4(%rdi,%rax), %rax
    000000a6: 	movss	(%rax), %xmm0
    000000aa: 	movss	%xmm0, (%rdx)
    000000ae: 	cmpq	%r8, %rax
    000000b1: 	je	.Ltmp346 # Offset: 177
    000000b3: 	movss	-0x4(%rax), %xmm0
    000000b8: 	leaq	-0x4(%rax), %rcx
    000000bc: 	movss	%xmm0, 0x4(%rdx)
    000000c1: 	cmpq	%rcx, %r8
    000000c4: 	je	.Ltmp346 # Offset: 196
    000000c6: 	movss	-0x8(%rax), %xmm0
    000000cb: 	movss	%xmm0, 0x8(%rdx)
.Ltmp346:
    000000d0: 	movq	%r9, %rax
    000000d3: 	retq # Offset: 211
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp344:
    000000d8: 	movss	-0x4(%rax), %xmm0
    000000dd: 	subq	$0x4, %rax
    000000e1: 	addq	$0x4, %rdx
    000000e5: 	movss	%xmm0, -0x4(%rdx)
    000000ea: 	cmpq	%rax, %r8
    000000ed: 	jne	.Ltmp344 # Offset: 237
    000000ef: 	jmp	.Ltmp346 # Offset: 239
    000000f1: 	nopl	(%rax) # Size: 7
.Ltmp343:
    000000f8: 	movq	%rdx, %r9
    000000fb: 	movq	%r9, %rax
    000000fe: 	retq # Offset: 254
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt12reverse_copyI20BidirectionalPointerIfES1_ET0_T_S3_S2_"

Binary Function "_Z22my_simple_reverse_copyI20BidirectionalPointerIfES1_EvT_S2_T0_" after disassembly {
  Number      : 98
  State       : disassembled
  Address     : 0x6ad0
  Size        : 0xf0
  MaxSize     : 0xf0
  Offset      : 0x6ad0
  Section     : .text
  Orc Section : .local.text._Z22my_simple_reverse_copyI20BidirectionalPointerIfES1_EvT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB097:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rsi, %rax
    0000000a: 	cmpq	%rsi, %rdi
    0000000d: 	je	.Ltmp347 # Offset: 13
    00000013: 	movq	%rsi, %rcx
    00000016: 	subq	%rdi, %rcx
    00000019: 	leaq	-0x4(%rcx), %r10
    0000001d: 	addq	%rdx, %rcx
    00000020: 	movq	%r10, %rdi
    00000023: 	shrq	$0x2, %rdi
    00000027: 	leaq	0x1(%rdi), %r9
    0000002b: 	notq	%rdi
    0000002e: 	leaq	(%rsi,%rdi,4), %rdi
    00000032: 	cmpq	%rdi, %rcx
    00000035: 	setbe	%cl
    00000038: 	cmpq	%rsi, %rdx
    0000003b: 	setae	%dil
    0000003f: 	orb	%dil, %cl
    00000042: 	je	.Ltmp348 # Offset: 66
    00000048: 	cmpq	$0x8, %r10
    0000004c: 	jbe	.Ltmp348 # Offset: 76
    00000052: 	movq	%r9, %rdi
    00000055: 	leaq	-0x10(%rsi), %rcx
    00000059: 	movq	%rdx, %rax
    0000005c: 	shrq	$0x2, %rdi
    00000060: 	shlq	$0x4, %rdi
    00000064: 	addq	%rdx, %rdi
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp349:
    00000070: 	movups	(%rcx), %xmm0
    00000073: 	addq	$0x10, %rax
    00000077: 	subq	$0x10, %rcx
    0000007b: 	shufps	$0x1b, %xmm0, %xmm0
    0000007f: 	movups	%xmm0, -0x10(%rax)
    00000083: 	cmpq	%rax, %rdi
    00000086: 	jne	.Ltmp349 # Offset: 134
    00000088: 	movq	%r9, %rcx
    0000008b: 	andq	$-0x4, %rcx
    0000008f: 	movq	%rcx, %rax
    00000092: 	negq	%rax
    00000095: 	shlq	$0x2, %rax
    00000099: 	subq	%rax, %rdx
    0000009c: 	cmpq	%rcx, %r9
    0000009f: 	je	.Ltmp347 # Offset: 159
    000000a1: 	leaq	-0x4(%rsi,%rax), %rax
    000000a6: 	movss	(%rax), %xmm0
    000000aa: 	movss	%xmm0, (%rdx)
    000000ae: 	cmpq	%rax, %r8
    000000b1: 	je	.Ltmp347 # Offset: 177
    000000b3: 	movss	-0x4(%rax), %xmm0
    000000b8: 	leaq	-0x4(%rax), %rcx
    000000bc: 	movss	%xmm0, 0x4(%rdx)
    000000c1: 	cmpq	%rcx, %r8
    000000c4: 	je	.Ltmp347 # Offset: 196
    000000c6: 	movss	-0x8(%rax), %xmm0
    000000cb: 	movss	%xmm0, 0x8(%rdx)
    000000d0: 	retq # Offset: 208
    000000d1: 	nopl	(%rax) # Size: 7
.Ltmp348:
    000000d8: 	movss	-0x4(%rax), %xmm0
    000000dd: 	subq	$0x4, %rax
    000000e1: 	addq	$0x4, %rdx
    000000e5: 	movss	%xmm0, -0x4(%rdx)
    000000ea: 	cmpq	%rax, %r8
    000000ed: 	jne	.Ltmp348 # Offset: 237
.Ltmp347:
    000000ef: 	retq # Offset: 239
DWARF CFI Instructions:
    <empty>
End of Function "_Z22my_simple_reverse_copyI20BidirectionalPointerIfES1_EvT_S2_T0_"

Binary Function "_Z20my_fast_reverse_copyI20BidirectionalPointerIfES1_EvT_S2_T0_" after disassembly {
  Number      : 99
  State       : disassembled
  Address     : 0x6bc0
  Size        : 0xf0
  MaxSize     : 0xf0
  Offset      : 0x6bc0
  Section     : .text
  Orc Section : .local.text._Z20my_fast_reverse_copyI20BidirectionalPointerIfES1_EvT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB098:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rsi, %rax
    0000000a: 	cmpq	%rsi, %rdi
    0000000d: 	je	.Ltmp350 # Offset: 13
    00000013: 	movq	%rsi, %rcx
    00000016: 	subq	%rdi, %rcx
    00000019: 	leaq	-0x4(%rcx), %r10
    0000001d: 	addq	%rdx, %rcx
    00000020: 	movq	%r10, %rdi
    00000023: 	shrq	$0x2, %rdi
    00000027: 	leaq	0x1(%rdi), %r9
    0000002b: 	notq	%rdi
    0000002e: 	leaq	(%rsi,%rdi,4), %rdi
    00000032: 	cmpq	%rdi, %rcx
    00000035: 	setbe	%cl
    00000038: 	cmpq	%rsi, %rdx
    0000003b: 	setae	%dil
    0000003f: 	orb	%dil, %cl
    00000042: 	je	.Ltmp351 # Offset: 66
    00000048: 	cmpq	$0x8, %r10
    0000004c: 	jbe	.Ltmp351 # Offset: 76
    00000052: 	movq	%r9, %rdi
    00000055: 	leaq	-0x10(%rsi), %rcx
    00000059: 	movq	%rdx, %rax
    0000005c: 	shrq	$0x2, %rdi
    00000060: 	shlq	$0x4, %rdi
    00000064: 	addq	%rdx, %rdi
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp352:
    00000070: 	movups	(%rcx), %xmm0
    00000073: 	addq	$0x10, %rax
    00000077: 	subq	$0x10, %rcx
    0000007b: 	shufps	$0x1b, %xmm0, %xmm0
    0000007f: 	movups	%xmm0, -0x10(%rax)
    00000083: 	cmpq	%rax, %rdi
    00000086: 	jne	.Ltmp352 # Offset: 134
    00000088: 	movq	%r9, %rcx
    0000008b: 	andq	$-0x4, %rcx
    0000008f: 	movq	%rcx, %rax
    00000092: 	negq	%rax
    00000095: 	shlq	$0x2, %rax
    00000099: 	subq	%rax, %rdx
    0000009c: 	cmpq	%rcx, %r9
    0000009f: 	je	.Ltmp350 # Offset: 159
    000000a1: 	leaq	-0x4(%rsi,%rax), %rax
    000000a6: 	movss	(%rax), %xmm0
    000000aa: 	movss	%xmm0, (%rdx)
    000000ae: 	cmpq	%rax, %r8
    000000b1: 	je	.Ltmp350 # Offset: 177
    000000b3: 	movss	-0x4(%rax), %xmm0
    000000b8: 	leaq	-0x4(%rax), %rcx
    000000bc: 	movss	%xmm0, 0x4(%rdx)
    000000c1: 	cmpq	%rcx, %r8
    000000c4: 	je	.Ltmp350 # Offset: 196
    000000c6: 	movss	-0x8(%rax), %xmm0
    000000cb: 	movss	%xmm0, 0x8(%rdx)
    000000d0: 	retq # Offset: 208
    000000d1: 	nopl	(%rax) # Size: 7
.Ltmp351:
    000000d8: 	movss	-0x4(%rax), %xmm0
    000000dd: 	subq	$0x4, %rax
    000000e1: 	addq	$0x4, %rdx
    000000e5: 	movss	%xmm0, -0x4(%rdx)
    000000ea: 	cmpq	%rax, %r8
    000000ed: 	jne	.Ltmp351 # Offset: 237
.Ltmp350:
    000000ef: 	retq # Offset: 239
DWARF CFI Instructions:
    <empty>
End of Function "_Z20my_fast_reverse_copyI20BidirectionalPointerIfES1_EvT_S2_T0_"

Binary Function "_ZSt12reverse_copyIPfS0_ET0_T_S2_S1_" after disassembly {
  Number      : 100
  State       : disassembled
  Address     : 0x6cb0
  Size        : 0xff
  MaxSize     : 0x100
  Offset      : 0x6cb0
  Section     : .text
  Orc Section : .local.text._ZSt12reverse_copyIPfS0_ET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB099:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rsi, %rcx
    0000000a: 	cmpq	%rdi, %rsi
    0000000d: 	je	.Ltmp353 # Offset: 13
    00000013: 	movq	%rsi, %r9
    00000016: 	subq	%rdi, %r9
    00000019: 	leaq	-0x4(%r9), %rsi
    0000001d: 	addq	%rdx, %r9
    00000020: 	movq	%rsi, %rax
    00000023: 	shrq	$0x2, %rax
    00000027: 	leaq	0x1(%rax), %r10
    0000002b: 	notq	%rax
    0000002e: 	leaq	(%rcx,%rax,4), %rax
    00000032: 	cmpq	%rax, %r9
    00000035: 	setbe	%al
    00000038: 	cmpq	%rdx, %rcx
    0000003b: 	setbe	%dil
    0000003f: 	orb	%dil, %al
    00000042: 	je	.Ltmp354 # Offset: 66
    00000048: 	cmpq	$0x8, %rsi
    0000004c: 	jbe	.Ltmp354 # Offset: 76
    00000052: 	movq	%r10, %rdi
    00000055: 	leaq	-0x10(%rcx), %rsi
    00000059: 	movq	%rdx, %rax
    0000005c: 	shrq	$0x2, %rdi
    00000060: 	shlq	$0x4, %rdi
    00000064: 	addq	%rdx, %rdi
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp355:
    00000070: 	movups	(%rsi), %xmm0
    00000073: 	addq	$0x10, %rax
    00000077: 	subq	$0x10, %rsi
    0000007b: 	shufps	$0x1b, %xmm0, %xmm0
    0000007f: 	movups	%xmm0, -0x10(%rax)
    00000083: 	cmpq	%rdi, %rax
    00000086: 	jne	.Ltmp355 # Offset: 134
    00000088: 	movq	%r10, %rsi
    0000008b: 	andq	$-0x4, %rsi
    0000008f: 	movq	%rsi, %rax
    00000092: 	negq	%rax
    00000095: 	shlq	$0x2, %rax
    00000099: 	subq	%rax, %rdx
    0000009c: 	cmpq	%rsi, %r10
    0000009f: 	je	.Ltmp356 # Offset: 159
    000000a1: 	leaq	-0x4(%rcx,%rax), %rax
    000000a6: 	movss	(%rax), %xmm0
    000000aa: 	movss	%xmm0, (%rdx)
    000000ae: 	cmpq	%r8, %rax
    000000b1: 	je	.Ltmp356 # Offset: 177
    000000b3: 	movss	-0x4(%rax), %xmm0
    000000b8: 	leaq	-0x4(%rax), %rcx
    000000bc: 	movss	%xmm0, 0x4(%rdx)
    000000c1: 	cmpq	%rcx, %r8
    000000c4: 	je	.Ltmp356 # Offset: 196
    000000c6: 	movss	-0x8(%rax), %xmm0
    000000cb: 	movss	%xmm0, 0x8(%rdx)
.Ltmp356:
    000000d0: 	movq	%r9, %rax
    000000d3: 	retq # Offset: 211
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp354:
    000000d8: 	movss	-0x4(%rcx), %xmm0
    000000dd: 	subq	$0x4, %rcx
    000000e1: 	addq	$0x4, %rdx
    000000e5: 	movss	%xmm0, -0x4(%rdx)
    000000ea: 	cmpq	%rcx, %r8
    000000ed: 	jne	.Ltmp354 # Offset: 237
    000000ef: 	jmp	.Ltmp356 # Offset: 239
    000000f1: 	nopl	(%rax) # Size: 7
.Ltmp353:
    000000f8: 	movq	%rdx, %r9
    000000fb: 	movq	%r9, %rax
    000000fe: 	retq # Offset: 254
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt12reverse_copyIPfS0_ET0_T_S2_S1_"

Binary Function "_Z22my_simple_reverse_copyIPfS0_EvT_S1_T0_" after disassembly {
  Number      : 101
  State       : disassembled
  Address     : 0x6db0
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0x6db0
  Section     : .text
  Orc Section : .local.text._Z22my_simple_reverse_copyIPfS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0100:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp357 # Offset: 7
    0000000d: 	movq	%rsi, %rax
    00000010: 	leaq	-0x4(%rsi), %rcx
    00000014: 	subq	%rdi, %rax
    00000017: 	movq	%rax, %r8
    0000001a: 	sarq	$0x2, %r8
    0000001e: 	testq	%rax, %rax
    00000021: 	jle	.Ltmp357 # Offset: 33
    00000027: 	movq	%rsi, %rdi
    0000002a: 	leaq	(%rdx,%rax), %r9
    0000002e: 	subq	%rax, %rdi
    00000031: 	cmpq	%rdi, %r9
    00000034: 	setbe	%dil
    00000038: 	cmpq	%rdx, %rsi
    0000003b: 	setbe	%r9b
    0000003f: 	orb	%r9b, %dil
    00000042: 	je	.Ltmp358 # Offset: 66
    00000048: 	cmpq	$0xc, %rax
    0000004c: 	jle	.Ltmp358 # Offset: 76
    00000052: 	movq	%r8, %rdi
    00000055: 	subq	$0x10, %rsi
    00000059: 	movq	%rdx, %rax
    0000005c: 	shrq	$0x2, %rdi
    00000060: 	shlq	$0x4, %rdi
    00000064: 	addq	%rdx, %rdi
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp359:
    00000070: 	movups	(%rsi), %xmm0
    00000073: 	addq	$0x10, %rax
    00000077: 	subq	$0x10, %rsi
    0000007b: 	shufps	$0x1b, %xmm0, %xmm0
    0000007f: 	movups	%xmm0, -0x10(%rax)
    00000083: 	cmpq	%rdi, %rax
    00000086: 	jne	.Ltmp359 # Offset: 134
    00000088: 	movq	%r8, %rax
    0000008b: 	andq	$-0x4, %rax
    0000008f: 	movq	%rax, %rsi
    00000092: 	negq	%rsi
    00000095: 	shlq	$0x2, %rsi
    00000099: 	addq	%rsi, %rcx
    0000009c: 	subq	%rsi, %rdx
    0000009f: 	cmpq	%rax, %r8
    000000a2: 	je	.Ltmp357 # Offset: 162
    000000a4: 	movss	(%rcx), %xmm0
    000000a8: 	leaq	0x1(%rax), %rsi
    000000ac: 	movss	%xmm0, (%rdx)
    000000b0: 	cmpq	%rsi, %r8
    000000b3: 	jle	.Ltmp357 # Offset: 179
    000000b5: 	movss	-0x4(%rcx), %xmm0
    000000ba: 	addq	$0x2, %rax
    000000be: 	movss	%xmm0, 0x4(%rdx)
    000000c3: 	cmpq	%rax, %r8
    000000c6: 	jle	.Ltmp357 # Offset: 198
    000000c8: 	movss	-0x8(%rcx), %xmm0
    000000cd: 	movss	%xmm0, 0x8(%rdx)
    000000d2: 	retq # Offset: 210
    000000d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp358:
    000000d8: 	xorl	%eax, %eax
    000000da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp360:
    000000e0: 	movss	(%rcx), %xmm0
    000000e4: 	subq	$0x4, %rcx
    000000e8: 	movss	%xmm0, (%rdx,%rax,4)
    000000ed: 	addq	$0x1, %rax
    000000f1: 	cmpq	%rax, %r8
    000000f4: 	jg	.Ltmp360 # Offset: 244
.Ltmp357:
    000000f6: 	retq # Offset: 246
DWARF CFI Instructions:
    <empty>
End of Function "_Z22my_simple_reverse_copyIPfS0_EvT_S1_T0_"

Binary Function "_Z18fast_reverse_copy2IPfS0_EvT_S1_T0_" after disassembly {
  Number      : 102
  State       : disassembled
  Address     : 0x6eb0
  Size        : 0x1d2
  MaxSize     : 0x1e0
  Offset      : 0x6eb0
  Section     : .text
  Orc Section : .local.text._Z18fast_reverse_copy2IPfS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0101:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp361 # Offset: 7
    0000000d: 	movq	%rsi, %rax
    00000010: 	leaq	-0x4(%rsi), %r8
    00000014: 	subq	%rdi, %rax
    00000017: 	movq	%rax, %r9
    0000001a: 	sarq	$0x2, %r9
    0000001e: 	cmpq	$0xc, %rax
    00000022: 	jle	.Ltmp362 # Offset: 34
    00000028: 	leaq	-0x4(%r9), %rdi
    0000002c: 	movq	%rsi, %rcx
    0000002f: 	shrq	$0x2, %rdi
    00000033: 	addq	$0x1, %rdi
    00000037: 	movq	%rdi, %rax
    0000003a: 	shlq	$0x4, %rax
    0000003e: 	movq	%rax, %r11
    00000041: 	leaq	(%rdx,%rax), %r10
    00000045: 	subq	%rax, %rcx
    00000048: 	negq	%r11
    0000004b: 	cmpq	%rcx, %r10
    0000004e: 	jbe	.Ltmp363 # Offset: 78
    00000050: 	cmpq	%rdx, %rsi
    00000053: 	ja	.Ltmp364 # Offset: 83
.Ltmp363:
    00000059: 	subq	$0x10, %rsi
    0000005d: 	xorl	%eax, %eax
    0000005f: 	nop # Size: 1
.Ltmp365:
    00000060: 	movups	(%rsi), %xmm0
    00000063: 	movq	%rax, %rcx
    00000066: 	addq	$0x1, %rax
    0000006a: 	subq	$0x10, %rsi
    0000006e: 	shlq	$0x4, %rcx
    00000072: 	shufps	$0x1b, %xmm0, %xmm0
    00000076: 	movups	%xmm0, (%rdx,%rcx)
    0000007a: 	cmpq	%rdi, %rax
    0000007d: 	jb	.Ltmp365 # Offset: 125
.Ltmp368:
    0000007f: 	addq	%r11, %r8
    00000082: 	shlq	$0x2, %rdi
.Ltmp369:
    00000086: 	cmpq	%rdi, %r9
    00000089: 	jle	.Ltmp361 # Offset: 137
    0000008f: 	movq	%r9, %rcx
    00000092: 	movq	%r8, %rsi
    00000095: 	subq	%rdi, %rcx
    00000098: 	leaq	(,%rcx,4), %rax
    000000a0: 	subq	%rax, %rsi
    000000a3: 	leaq	(%r10,%rax), %rdx
    000000a7: 	leaq	0x4(%rsi), %rax
    000000ab: 	cmpq	%rax, %rdx
    000000ae: 	leaq	0x4(%r8), %rdx
    000000b2: 	setbe	%al
    000000b5: 	cmpq	%rdx, %r10
    000000b8: 	setae	%dl
    000000bb: 	orb	%dl, %al
    000000bd: 	je	.Ltmp366 # Offset: 189
    000000bf: 	leaq	-0x1(%rcx), %rax
    000000c3: 	cmpq	$0x2, %rax
    000000c7: 	jbe	.Ltmp366 # Offset: 199
    000000c9: 	movq	%rcx, %rdx
    000000cc: 	movups	-0xc(%r8), %xmm0
    000000d1: 	andq	$-0x4, %rdx
    000000d5: 	movq	%rdx, %rax
    000000d8: 	shufps	$0x1b, %xmm0, %xmm0
    000000dc: 	addq	%rdx, %rdi
    000000df: 	movups	%xmm0, (%r10)
    000000e3: 	negq	%rax
    000000e6: 	shlq	$0x2, %rax
    000000ea: 	addq	%rax, %r8
    000000ed: 	subq	%rax, %r10
    000000f0: 	cmpq	%rdx, %rcx
    000000f3: 	je	.Ltmp361 # Offset: 243
    000000f9: 	movss	(%r8), %xmm0
    000000fe: 	leaq	0x1(%rdi), %rax
    00000102: 	movss	%xmm0, (%r10)
    00000107: 	cmpq	%rax, %r9
    0000010a: 	jle	.Ltmp361 # Offset: 266
    0000010c: 	movss	-0x4(%r8), %xmm0
    00000112: 	addq	$0x2, %rdi
    00000116: 	movss	%xmm0, 0x4(%r10)
    0000011c: 	cmpq	%rdi, %r9
    0000011f: 	jle	.Ltmp361 # Offset: 287
    00000121: 	movss	-0x8(%r8), %xmm0
    00000127: 	movss	%xmm0, 0x8(%r10)
    0000012d: 	retq # Offset: 301
    0000012e: 	nop # Size: 2
.Ltmp366:
    00000130: 	movss	(%r8), %xmm0
    00000135: 	leaq	0x1(%rdi), %rax
    00000139: 	movss	%xmm0, (%r10)
    0000013e: 	cmpq	%rax, %r9
    00000141: 	jle	.Ltmp361 # Offset: 321
    00000143: 	movss	-0x4(%r8), %xmm0
    00000149: 	leaq	0x2(%rdi), %rax
    0000014d: 	movss	%xmm0, 0x4(%r10)
    00000153: 	cmpq	%rax, %r9
    00000156: 	jle	.Ltmp361 # Offset: 342
    00000158: 	movss	-0x8(%r8), %xmm0
    0000015e: 	addq	$0x3, %rdi
    00000162: 	movss	%xmm0, 0x8(%r10)
    00000168: 	cmpq	%rdi, %r9
    0000016b: 	jle	.Ltmp361 # Offset: 363
    0000016d: 	movss	-0xc(%r8), %xmm0
    00000173: 	movss	%xmm0, 0xc(%r10)
.Ltmp361:
    00000179: 	retq # Offset: 377
    0000017a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp364:
    00000180: 	movq	%r8, %rax
    00000183: 	nopl	(%rax,%rax) # Size: 5
.Ltmp367:
    00000188: 	movss	(%rax), %xmm0
    0000018c: 	addq	$0x10, %rdx
    00000190: 	subq	$0x10, %rax
    00000194: 	movss	%xmm0, -0x10(%rdx)
    00000199: 	movss	0xc(%rax), %xmm0
    0000019e: 	movss	%xmm0, -0xc(%rdx)
    000001a3: 	movss	0x8(%rax), %xmm0
    000001a8: 	movss	%xmm0, -0x8(%rdx)
    000001ad: 	movss	0x4(%rax), %xmm0
    000001b2: 	movss	%xmm0, -0x4(%rdx)
    000001b7: 	cmpq	%rdx, %r10
    000001ba: 	jne	.Ltmp367 # Offset: 442
    000001bc: 	jmp	.Ltmp368 # Offset: 444
    000001c1: 	nopl	(%rax) # Size: 7
.Ltmp362:
    000001c8: 	movq	%rdx, %r10
    000001cb: 	xorl	%edi, %edi
    000001cd: 	jmp	.Ltmp369 # Offset: 461
DWARF CFI Instructions:
    <empty>
End of Function "_Z18fast_reverse_copy2IPfS0_EvT_S1_T0_"

Binary Function "_Z18fast_reverse_copy3IPfS0_EvT_S1_T0_" after disassembly {
  Number      : 103
  State       : disassembled
  Address     : 0x7090
  Size        : 0x1d2
  MaxSize     : 0x1e0
  Offset      : 0x7090
  Section     : .text
  Orc Section : .local.text._Z18fast_reverse_copy3IPfS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0102:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp370 # Offset: 7
    0000000d: 	movq	%rsi, %rax
    00000010: 	leaq	-0x4(%rsi), %r8
    00000014: 	subq	%rdi, %rax
    00000017: 	movq	%rax, %r9
    0000001a: 	sarq	$0x2, %r9
    0000001e: 	cmpq	$0xc, %rax
    00000022: 	jle	.Ltmp371 # Offset: 34
    00000028: 	leaq	-0x4(%r9), %rdi
    0000002c: 	movq	%rsi, %rcx
    0000002f: 	shrq	$0x2, %rdi
    00000033: 	addq	$0x1, %rdi
    00000037: 	movq	%rdi, %rax
    0000003a: 	shlq	$0x4, %rax
    0000003e: 	movq	%rax, %r11
    00000041: 	leaq	(%rdx,%rax), %r10
    00000045: 	subq	%rax, %rcx
    00000048: 	negq	%r11
    0000004b: 	cmpq	%rcx, %r10
    0000004e: 	jbe	.Ltmp372 # Offset: 78
    00000050: 	cmpq	%rdx, %rsi
    00000053: 	ja	.Ltmp373 # Offset: 83
.Ltmp372:
    00000059: 	subq	$0x10, %rsi
    0000005d: 	xorl	%eax, %eax
    0000005f: 	nop # Size: 1
.Ltmp374:
    00000060: 	movups	(%rsi), %xmm0
    00000063: 	movq	%rax, %rcx
    00000066: 	addq	$0x1, %rax
    0000006a: 	subq	$0x10, %rsi
    0000006e: 	shlq	$0x4, %rcx
    00000072: 	shufps	$0x1b, %xmm0, %xmm0
    00000076: 	movups	%xmm0, (%rdx,%rcx)
    0000007a: 	cmpq	%rdi, %rax
    0000007d: 	jb	.Ltmp374 # Offset: 125
.Ltmp377:
    0000007f: 	shlq	$0x2, %rdi
    00000083: 	addq	%r11, %r8
.Ltmp378:
    00000086: 	cmpq	%rdi, %r9
    00000089: 	jle	.Ltmp370 # Offset: 137
    0000008f: 	movq	%r9, %rcx
    00000092: 	movq	%r8, %rsi
    00000095: 	subq	%rdi, %rcx
    00000098: 	leaq	(,%rcx,4), %rax
    000000a0: 	subq	%rax, %rsi
    000000a3: 	leaq	(%r10,%rax), %rdx
    000000a7: 	leaq	0x4(%rsi), %rax
    000000ab: 	cmpq	%rax, %rdx
    000000ae: 	leaq	0x4(%r8), %rdx
    000000b2: 	setbe	%al
    000000b5: 	cmpq	%rdx, %r10
    000000b8: 	setae	%dl
    000000bb: 	orb	%dl, %al
    000000bd: 	je	.Ltmp375 # Offset: 189
    000000bf: 	leaq	-0x1(%rcx), %rax
    000000c3: 	cmpq	$0x2, %rax
    000000c7: 	jbe	.Ltmp375 # Offset: 199
    000000c9: 	movq	%rcx, %rdx
    000000cc: 	movups	-0xc(%r8), %xmm0
    000000d1: 	andq	$-0x4, %rdx
    000000d5: 	movq	%rdx, %rax
    000000d8: 	shufps	$0x1b, %xmm0, %xmm0
    000000dc: 	addq	%rdx, %rdi
    000000df: 	movups	%xmm0, (%r10)
    000000e3: 	negq	%rax
    000000e6: 	shlq	$0x2, %rax
    000000ea: 	addq	%rax, %r8
    000000ed: 	subq	%rax, %r10
    000000f0: 	cmpq	%rdx, %rcx
    000000f3: 	je	.Ltmp370 # Offset: 243
    000000f9: 	movss	(%r8), %xmm0
    000000fe: 	leaq	0x1(%rdi), %rax
    00000102: 	movss	%xmm0, (%r10)
    00000107: 	cmpq	%rax, %r9
    0000010a: 	jle	.Ltmp370 # Offset: 266
    0000010c: 	movss	-0x4(%r8), %xmm0
    00000112: 	addq	$0x2, %rdi
    00000116: 	movss	%xmm0, 0x4(%r10)
    0000011c: 	cmpq	%rdi, %r9
    0000011f: 	jle	.Ltmp370 # Offset: 287
    00000121: 	movss	-0x8(%r8), %xmm0
    00000127: 	movss	%xmm0, 0x8(%r10)
    0000012d: 	retq # Offset: 301
    0000012e: 	nop # Size: 2
.Ltmp375:
    00000130: 	movss	(%r8), %xmm0
    00000135: 	leaq	0x1(%rdi), %rax
    00000139: 	movss	%xmm0, (%r10)
    0000013e: 	cmpq	%rax, %r9
    00000141: 	jle	.Ltmp370 # Offset: 321
    00000143: 	movss	-0x4(%r8), %xmm0
    00000149: 	leaq	0x2(%rdi), %rax
    0000014d: 	movss	%xmm0, 0x4(%r10)
    00000153: 	cmpq	%rax, %r9
    00000156: 	jle	.Ltmp370 # Offset: 342
    00000158: 	movss	-0x8(%r8), %xmm0
    0000015e: 	addq	$0x3, %rdi
    00000162: 	movss	%xmm0, 0x8(%r10)
    00000168: 	cmpq	%rdi, %r9
    0000016b: 	jle	.Ltmp370 # Offset: 363
    0000016d: 	movss	-0xc(%r8), %xmm0
    00000173: 	movss	%xmm0, 0xc(%r10)
.Ltmp370:
    00000179: 	retq # Offset: 377
    0000017a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp373:
    00000180: 	movq	%r8, %rax
    00000183: 	nopl	(%rax,%rax) # Size: 5
.Ltmp376:
    00000188: 	movss	(%rax), %xmm0
    0000018c: 	addq	$0x10, %rdx
    00000190: 	subq	$0x10, %rax
    00000194: 	movss	%xmm0, -0x10(%rdx)
    00000199: 	movss	0xc(%rax), %xmm0
    0000019e: 	movss	%xmm0, -0xc(%rdx)
    000001a3: 	movss	0x8(%rax), %xmm0
    000001a8: 	movss	%xmm0, -0x8(%rdx)
    000001ad: 	movss	0x4(%rax), %xmm0
    000001b2: 	movss	%xmm0, -0x4(%rdx)
    000001b7: 	cmpq	%rdx, %r10
    000001ba: 	jne	.Ltmp376 # Offset: 442
    000001bc: 	jmp	.Ltmp377 # Offset: 444
    000001c1: 	nopl	(%rax) # Size: 7
.Ltmp371:
    000001c8: 	movq	%rdx, %r10
    000001cb: 	xorl	%edi, %edi
    000001cd: 	jmp	.Ltmp378 # Offset: 461
DWARF CFI Instructions:
    <empty>
End of Function "_Z18fast_reverse_copy3IPfS0_EvT_S1_T0_"

Binary Function "_Z18fast_reverse_copy4IPfS0_EvT_S1_T0_" after disassembly {
  Number      : 104
  State       : disassembled
  Address     : 0x7270
  Size        : 0x20a
  MaxSize     : 0x210
  Offset      : 0x7270
  Section     : .text
  Orc Section : .local.text._Z18fast_reverse_copy4IPfS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0103:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp379 # Offset: 7
    0000000d: 	movq	%rsi, %rax
    00000010: 	leaq	-0x4(%rsi), %rcx
    00000014: 	subq	%rdi, %rax
    00000017: 	movq	%rax, %r8
    0000001a: 	sarq	$0x2, %r8
    0000001e: 	cmpq	$0x1c, %rax
    00000022: 	jle	.Ltmp380 # Offset: 34
    00000028: 	leaq	-0x8(%r8), %rax
    0000002c: 	shrq	$0x3, %rax
    00000030: 	leaq	0x1(%rax), %rdi
    00000034: 	movq	%rcx, %rax
    00000037: 	movq	%rdi, %r9
    0000003a: 	shlq	$0x5, %r9
    0000003e: 	leaq	(%rdx,%r9), %rsi
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp381:
    00000048: 	movdqu	-0x1c(%rax), %xmm1
    0000004d: 	movdqu	-0xc(%rax), %xmm2
    00000052: 	addq	$0x20, %rdx
    00000056: 	subq	$0x20, %rax
    0000005a: 	movdqa	%xmm1, %xmm0
    0000005e: 	psllq	$0x20, %xmm1
    00000063: 	psrlq	$0x20, %xmm0
    00000068: 	por	%xmm1, %xmm0
    0000006c: 	movdqa	%xmm2, %xmm1
    00000070: 	psrlq	$0x20, %xmm1
    00000075: 	psllq	$0x20, %xmm2
    0000007a: 	shufpd	$0x1, %xmm0, %xmm0
    0000007f: 	movups	%xmm0, -0x10(%rdx)
    00000083: 	por	%xmm2, %xmm1
    00000087: 	shufpd	$0x1, %xmm1, %xmm1
    0000008c: 	movups	%xmm1, -0x20(%rdx)
    00000090: 	cmpq	%rsi, %rdx
    00000093: 	jne	.Ltmp381 # Offset: 147
    00000095: 	leaq	(,%rdi,8), %rax
    0000009d: 	subq	%r9, %rcx
.Ltmp384:
    000000a0: 	cmpq	%rax, %r8
    000000a3: 	jle	.Ltmp379 # Offset: 163
    000000a9: 	movq	%r8, %r9
    000000ac: 	movq	%rcx, %r10
    000000af: 	subq	%rax, %r9
    000000b2: 	leaq	(,%r9,4), %rdx
    000000ba: 	subq	%rdx, %r10
    000000bd: 	leaq	(%rsi,%rdx), %rdi
    000000c1: 	leaq	0x4(%r10), %rdx
    000000c5: 	cmpq	%rdx, %rdi
    000000c8: 	leaq	0x4(%rcx), %rdi
    000000cc: 	setbe	%dl
    000000cf: 	cmpq	%rdi, %rsi
    000000d2: 	setae	%dil
    000000d6: 	orb	%dil, %dl
    000000d9: 	je	.Ltmp382 # Offset: 217
    000000df: 	leaq	-0x1(%r9), %rdx
    000000e3: 	cmpq	$0x2, %rdx
    000000e7: 	jbe	.Ltmp382 # Offset: 231
    000000ed: 	movups	-0xc(%rcx), %xmm0
    000000f1: 	movq	%r9, %rdx
    000000f4: 	shrq	$0x2, %rdx
    000000f8: 	shufps	$0x1b, %xmm0, %xmm0
    000000fc: 	movups	%xmm0, (%rsi)
    000000ff: 	cmpq	$0x1, %rdx
    00000103: 	je	.Ltmp383 # Offset: 259
    00000105: 	movups	-0x1c(%rcx), %xmm0
    00000109: 	shufps	$0x1b, %xmm0, %xmm0
    0000010d: 	movups	%xmm0, 0x10(%rsi)
.Ltmp383:
    00000111: 	movq	%r9, %rdi
    00000114: 	andq	$-0x4, %rdi
    00000118: 	movq	%rdi, %rdx
    0000011b: 	addq	%rdi, %rax
    0000011e: 	negq	%rdx
    00000121: 	shlq	$0x2, %rdx
    00000125: 	addq	%rdx, %rcx
    00000128: 	subq	%rdx, %rsi
    0000012b: 	cmpq	%rdi, %r9
    0000012e: 	je	.Ltmp379 # Offset: 302
    00000134: 	movss	(%rcx), %xmm0
    00000138: 	leaq	0x1(%rax), %rdx
    0000013c: 	movss	%xmm0, (%rsi)
    00000140: 	cmpq	%rdx, %r8
    00000143: 	jle	.Ltmp379 # Offset: 323
    00000149: 	movss	-0x4(%rcx), %xmm0
    0000014e: 	addq	$0x2, %rax
    00000152: 	movss	%xmm0, 0x4(%rsi)
    00000157: 	cmpq	%rax, %r8
    0000015a: 	jle	.Ltmp379 # Offset: 346
    00000160: 	movss	-0x8(%rcx), %xmm0
    00000165: 	movss	%xmm0, 0x8(%rsi)
    0000016a: 	retq # Offset: 362
    0000016b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp382:
    00000170: 	movss	(%rcx), %xmm0
    00000174: 	leaq	0x1(%rax), %rdx
    00000178: 	movss	%xmm0, (%rsi)
    0000017c: 	cmpq	%rdx, %r8
    0000017f: 	jle	.Ltmp379 # Offset: 383
    00000181: 	movss	-0x4(%rcx), %xmm0
    00000186: 	leaq	0x2(%rax), %rdx
    0000018a: 	movss	%xmm0, 0x4(%rsi)
    0000018f: 	cmpq	%rdx, %r8
    00000192: 	jle	.Ltmp379 # Offset: 402
    00000194: 	movss	-0x8(%rcx), %xmm0
    00000199: 	leaq	0x3(%rax), %rdx
    0000019d: 	movss	%xmm0, 0x8(%rsi)
    000001a2: 	cmpq	%rdx, %r8
    000001a5: 	jle	.Ltmp379 # Offset: 421
    000001a7: 	movss	-0xc(%rcx), %xmm0
    000001ac: 	leaq	0x4(%rax), %rdx
    000001b0: 	movss	%xmm0, 0xc(%rsi)
    000001b5: 	cmpq	%rdx, %r8
    000001b8: 	jle	.Ltmp379 # Offset: 440
    000001ba: 	movss	-0x10(%rcx), %xmm0
    000001bf: 	leaq	0x5(%rax), %rdx
    000001c3: 	movss	%xmm0, 0x10(%rsi)
    000001c8: 	cmpq	%rdx, %r8
    000001cb: 	jle	.Ltmp379 # Offset: 459
    000001cd: 	movss	-0x14(%rcx), %xmm0
    000001d2: 	leaq	0x6(%rax), %rdx
    000001d6: 	movss	%xmm0, 0x14(%rsi)
    000001db: 	cmpq	%rdx, %r8
    000001de: 	jle	.Ltmp379 # Offset: 478
    000001e0: 	movss	-0x18(%rcx), %xmm0
    000001e5: 	addq	$0x7, %rax
    000001e9: 	movss	%xmm0, 0x18(%rsi)
    000001ee: 	cmpq	%rax, %r8
    000001f1: 	jle	.Ltmp379 # Offset: 497
    000001f3: 	movss	-0x1c(%rcx), %xmm0
    000001f8: 	movss	%xmm0, 0x1c(%rsi)
.Ltmp379:
    000001fd: 	retq # Offset: 509
    000001fe: 	nop # Size: 2
.Ltmp380:
    00000200: 	movq	%rdx, %rsi
    00000203: 	xorl	%eax, %eax
    00000205: 	jmp	.Ltmp384 # Offset: 517
DWARF CFI Instructions:
    <empty>
End of Function "_Z18fast_reverse_copy4IPfS0_EvT_S1_T0_"

Binary Function "_ZSt7reverseI20BidirectionalPointerImEEvT_S2_" after disassembly {
  Number      : 105
  State       : disassembled
  Address     : 0x7480
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x7480
  Section     : .text
  Orc Section : .local.text._ZSt7reverseI20BidirectionalPointerImEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0104:
    00000000: 	endbr64
    00000004: 	jmp	.Ltmp385 # Offset: 4
    00000006: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp387:
    00000010: 	subq	$0x8, %rsi
    00000014: 	cmpq	%rsi, %rdi
    00000017: 	je	.Ltmp386 # Offset: 23
    00000019: 	movq	(%rdi), %rax
    0000001c: 	movq	(%rsi), %rdx
    0000001f: 	addq	$0x8, %rdi
    00000023: 	movq	%rdx, -0x8(%rdi)
    00000027: 	movq	%rax, (%rsi)
.Ltmp385:
    0000002a: 	cmpq	%rsi, %rdi
    0000002d: 	jne	.Ltmp387 # Offset: 45
.Ltmp386:
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt7reverseI20BidirectionalPointerImEEvT_S2_"

Binary Function "_Z17my_simple_reverseI20BidirectionalPointerImEEvT_S2_" after disassembly {
  Number      : 106
  State       : disassembled
  Address     : 0x74b0
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x74b0
  Section     : .text
  Orc Section : .local.text._Z17my_simple_reverseI20BidirectionalPointerImEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0105:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp388 # Offset: 7
    00000009: 	nopl	(%rax) # Size: 7
.Ltmp389:
    00000010: 	subq	$0x8, %rsi
    00000014: 	cmpq	%rdi, %rsi
    00000017: 	je	.Ltmp388 # Offset: 23
    00000019: 	movq	(%rsi), %rdx
    0000001c: 	movq	(%rdi), %rax
    0000001f: 	addq	$0x8, %rdi
    00000023: 	movq	%rdx, -0x8(%rdi)
    00000027: 	movq	%rax, (%rsi)
    0000002a: 	cmpq	%rdi, %rsi
    0000002d: 	jne	.Ltmp389 # Offset: 45
.Ltmp388:
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_Z17my_simple_reverseI20BidirectionalPointerImEEvT_S2_"

Binary Function "_Z15my_fast_reverseI20BidirectionalPointerImEEvT_S2_" after disassembly {
  Number      : 107
  State       : disassembled
  Address     : 0x74e0
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x74e0
  Section     : .text
  Orc Section : .local.text._Z15my_fast_reverseI20BidirectionalPointerImEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0106:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp390 # Offset: 7
    00000009: 	nopl	(%rax) # Size: 7
.Ltmp391:
    00000010: 	subq	$0x8, %rsi
    00000014: 	cmpq	%rdi, %rsi
    00000017: 	je	.Ltmp390 # Offset: 23
    00000019: 	movq	(%rsi), %rdx
    0000001c: 	movq	(%rdi), %rax
    0000001f: 	addq	$0x8, %rdi
    00000023: 	movq	%rdx, -0x8(%rdi)
    00000027: 	movq	%rax, (%rsi)
    0000002a: 	cmpq	%rdi, %rsi
    0000002d: 	jne	.Ltmp391 # Offset: 45
.Ltmp390:
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_Z15my_fast_reverseI20BidirectionalPointerImEEvT_S2_"

Binary Function "_ZSt7reverseIPmEvT_S1_" after disassembly {
  Number      : 108
  State       : disassembled
  Address     : 0x7510
  Size        : 0xdc
  MaxSize     : 0xe0
  Offset      : 0x7510
  Section     : .text
  Orc Section : .local.text._ZSt7reverseIPmEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0107:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp392 # Offset: 10
    00000010: 	leaq	-0x8(%rsi), %rcx
    00000014: 	cmpq	%rcx, %rdi
    00000017: 	jae	.Ltmp392 # Offset: 23
    0000001d: 	movq	%rdi, %rdx
    00000020: 	leaq	-0x9(%rsi), %rdi
    00000024: 	movq	%rsi, %r10
    00000027: 	subq	%rax, %rdi
    0000002a: 	movq	%rdi, %r8
    0000002d: 	shrq	$0x4, %r8
    00000031: 	addq	$0x1, %r8
    00000035: 	leaq	(,%r8,8), %r9
    0000003d: 	subq	%r9, %r10
    00000040: 	leaq	(%rax,%r9), %r11
    00000044: 	cmpq	%r10, %r11
    00000047: 	setbe	%r9b
    0000004b: 	cmpq	%rsi, %rax
    0000004e: 	setae	%r10b
    00000052: 	orb	%r10b, %r9b
    00000055: 	je	.Ltmp393 # Offset: 85
    00000057: 	cmpq	$0x1f, %rdi
    0000005b: 	jbe	.Ltmp393 # Offset: 91
    0000005d: 	movq	%r8, %rdi
    00000060: 	subq	$0x10, %rsi
    00000064: 	shrq	%rdi
    00000067: 	shlq	$0x4, %rdi
    0000006b: 	addq	%rax, %rdi
    0000006e: 	nop # Size: 2
.Ltmp394:
    00000070: 	movdqu	(%rsi), %xmm1
    00000074: 	movdqu	(%rdx), %xmm0
    00000078: 	addq	$0x10, %rdx
    0000007c: 	subq	$0x10, %rsi
    00000080: 	shufpd	$0x1, %xmm1, %xmm1
    00000085: 	shufpd	$0x1, %xmm0, %xmm0
    0000008a: 	movups	%xmm1, -0x10(%rdx)
    0000008e: 	movups	%xmm0, 0x10(%rsi)
    00000092: 	cmpq	%rdi, %rdx
    00000095: 	jne	.Ltmp394 # Offset: 149
    00000097: 	movq	%r8, %rdx
    0000009a: 	andq	$-0x2, %rdx
    0000009e: 	leaq	(,%rdx,8), %rsi
    000000a6: 	addq	%rsi, %rax
    000000a9: 	subq	%rsi, %rcx
    000000ac: 	cmpq	%rdx, %r8
    000000af: 	je	.Ltmp392 # Offset: 175
    000000b1: 	movq	(%rax), %rdx
    000000b4: 	movq	(%rcx), %rsi
    000000b7: 	movq	%rsi, (%rax)
    000000ba: 	movq	%rdx, (%rcx)
    000000bd: 	retq # Offset: 189
    000000be: 	nop # Size: 2
.Ltmp393:
    000000c0: 	movq	(%rax), %rdx
    000000c3: 	movq	(%rcx), %rsi
    000000c6: 	addq	$0x8, %rax
    000000ca: 	subq	$0x8, %rcx
    000000ce: 	movq	%rsi, -0x8(%rax)
    000000d2: 	movq	%rdx, 0x8(%rcx)
    000000d6: 	cmpq	%rcx, %rax
    000000d9: 	jb	.Ltmp393 # Offset: 217
.Ltmp392:
    000000db: 	retq # Offset: 219
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt7reverseIPmEvT_S1_"

Binary Function "_Z17my_simple_reverseIPmEvT_S1_" after disassembly {
  Number      : 109
  State       : disassembled
  Address     : 0x75f0
  Size        : 0xfd
  MaxSize     : 0x100
  Offset      : 0x75f0
  Section     : .text
  Orc Section : .local.text._Z17my_simple_reverseIPmEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0108:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp395 # Offset: 10
    00000010: 	movq	%rsi, %rdx
    00000013: 	subq	%rdi, %rdx
    00000016: 	movq	%rdx, %rcx
    00000019: 	movq	%rdx, %rdi
    0000001c: 	sarq	$0x3, %rcx
    00000020: 	shrq	$0x3f, %rdi
    00000024: 	addq	%rcx, %rdi
    00000027: 	leaq	-0x8(%rsi), %rcx
    0000002b: 	sarq	%rdi
    0000002e: 	cmpq	$0x8, %rdx
    00000032: 	jle	.Ltmp395 # Offset: 50
    00000038: 	leaq	(,%rdi,8), %r8
    00000040: 	movq	%rsi, %r9
    00000043: 	subq	%r8, %r9
    00000046: 	leaq	(%rax,%r8), %r10
    0000004a: 	cmpq	%r9, %r10
    0000004d: 	setbe	%r8b
    00000051: 	cmpq	%rsi, %rax
    00000054: 	setae	%r9b
    00000058: 	orb	%r9b, %r8b
    0000005b: 	je	.Ltmp396 # Offset: 91
    0000005d: 	cmpq	$0x28, %rdx
    00000061: 	jle	.Ltmp396 # Offset: 97
    00000063: 	movq	%rdi, %r8
    00000066: 	movq	%rax, %rdx
    00000069: 	subq	$0x10, %rsi
    0000006d: 	shrq	%r8
    00000070: 	shlq	$0x4, %r8
    00000074: 	addq	%rax, %r8
    00000077: 	nopw	(%rax,%rax) # Size: 9
.Ltmp397:
    00000080: 	movdqu	(%rsi), %xmm1
    00000084: 	movdqu	(%rdx), %xmm0
    00000088: 	addq	$0x10, %rdx
    0000008c: 	subq	$0x10, %rsi
    00000090: 	shufpd	$0x1, %xmm1, %xmm1
    00000095: 	shufpd	$0x1, %xmm0, %xmm0
    0000009a: 	movups	%xmm1, -0x10(%rdx)
    0000009e: 	movups	%xmm0, 0x10(%rsi)
    000000a2: 	cmpq	%r8, %rdx
    000000a5: 	jne	.Ltmp397 # Offset: 165
    000000a7: 	movq	%rdi, %rsi
    000000aa: 	andq	$-0x2, %rsi
    000000ae: 	leaq	(,%rsi,8), %r8
    000000b6: 	subq	%r8, %rcx
    000000b9: 	addq	%r8, %rax
    000000bc: 	movq	%rcx, %rdx
    000000bf: 	cmpq	%rsi, %rdi
    000000c2: 	je	.Ltmp395 # Offset: 194
    000000c4: 	movq	(%rax), %rcx
    000000c7: 	movq	(%rdx), %rsi
    000000ca: 	movq	%rsi, (%rax)
    000000cd: 	movq	%rcx, (%rdx)
    000000d0: 	retq # Offset: 208
    000000d1: 	nopl	(%rax) # Size: 7
.Ltmp396:
    000000d8: 	xorl	%edx, %edx
    000000da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp398:
    000000e0: 	movq	(%rcx), %r8
    000000e3: 	movq	(%rax,%rdx,8), %rsi
    000000e7: 	subq	$0x8, %rcx
    000000eb: 	movq	%r8, (%rax,%rdx,8)
    000000ef: 	addq	$0x1, %rdx
    000000f3: 	movq	%rsi, 0x8(%rcx)
    000000f7: 	cmpq	%rdx, %rdi
    000000fa: 	jg	.Ltmp398 # Offset: 250
.Ltmp395:
    000000fc: 	retq # Offset: 252
DWARF CFI Instructions:
    <empty>
End of Function "_Z17my_simple_reverseIPmEvT_S1_"

Binary Function "_Z13fast_reverse2IPmEvT_S1_" after disassembly {
  Number      : 110
  State       : disassembled
  Address     : 0x76f0
  Size        : 0x1d7
  MaxSize     : 0x1e0
  Offset      : 0x76f0
  Section     : .text
  Orc Section : .local.text._Z13fast_reverse2IPmEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0109:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp399 # Offset: 10
    00000010: 	movq	%rsi, %rax
    00000013: 	leaq	-0x8(%rsi), %r8
    00000017: 	subq	%rdi, %rax
    0000001a: 	movq	%rax, %rdx
    0000001d: 	movq	%rax, %r9
    00000020: 	sarq	$0x3, %rdx
    00000024: 	shrq	$0x3f, %r9
    00000028: 	addq	%rdx, %r9
    0000002b: 	sarq	%r9
    0000002e: 	cmpq	$0x38, %rax
    00000032: 	jle	.Ltmp400 # Offset: 50
    00000038: 	leaq	-0x4(%r9), %rax
    0000003c: 	movq	%rdi, %rdx
    0000003f: 	shrq	$0x2, %rax
    00000043: 	movq	%rax, %r10
    00000046: 	negq	%rax
    00000049: 	shlq	$0x5, %rax
    0000004d: 	leaq	-0x28(%rsi,%rax), %r11
    00000052: 	movq	%r8, %rax
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp401:
    00000058: 	movq	(%rdx), %rsi
    0000005b: 	movq	(%rax), %rdi
    0000005e: 	subq	$0x20, %rax
    00000062: 	addq	$0x20, %rdx
    00000066: 	movq	%rdi, -0x20(%rdx)
    0000006a: 	movq	0x18(%rax), %rdi
    0000006e: 	movq	%rsi, 0x20(%rax)
    00000072: 	movq	-0x18(%rdx), %rsi
    00000076: 	movq	%rdi, -0x18(%rdx)
    0000007a: 	movq	0x10(%rax), %rdi
    0000007e: 	movq	%rsi, 0x18(%rax)
    00000082: 	movq	-0x10(%rdx), %rsi
    00000086: 	movq	%rdi, -0x10(%rdx)
    0000008a: 	movq	0x8(%rax), %rdi
    0000008e: 	movq	%rsi, 0x10(%rax)
    00000092: 	movq	-0x8(%rdx), %rsi
    00000096: 	movq	%rdi, -0x8(%rdx)
    0000009a: 	movq	%rsi, 0x8(%rax)
    0000009e: 	cmpq	%r11, %rax
    000000a1: 	jne	.Ltmp401 # Offset: 161
    000000a3: 	leaq	0x1(%r10), %rax
    000000a7: 	leaq	(,%rax,4), %rdx
    000000af: 	negq	%rax
    000000b2: 	shlq	$0x5, %rax
    000000b6: 	addq	%rax, %r8
    000000b9: 	subq	%rax, %rcx
.Ltmp404:
    000000bc: 	cmpq	%rdx, %r9
    000000bf: 	jle	.Ltmp399 # Offset: 191
    000000c5: 	movq	%r9, %rax
    000000c8: 	movq	%r8, %r10
    000000cb: 	subq	%rdx, %rax
    000000ce: 	leaq	(,%rax,8), %rsi
    000000d6: 	subq	%rsi, %r10
    000000d9: 	leaq	(%rcx,%rsi), %rdi
    000000dd: 	leaq	0x8(%r10), %rsi
    000000e1: 	cmpq	%rsi, %rdi
    000000e4: 	leaq	0x8(%r8), %rdi
    000000e8: 	setbe	%sil
    000000ec: 	cmpq	%rdi, %rcx
    000000ef: 	setae	%dil
    000000f3: 	orb	%dil, %sil
    000000f6: 	je	.Ltmp402 # Offset: 246
    000000f8: 	leaq	-0x1(%rax), %rsi
    000000fc: 	cmpq	$0x1, %rsi
    00000100: 	jbe	.Ltmp402 # Offset: 256
    00000102: 	movdqu	(%rcx), %xmm0
    00000106: 	movdqu	-0x8(%r8), %xmm1
    0000010c: 	movq	%rax, %rdx
    0000010f: 	shrq	%rdx
    00000112: 	shufpd	$0x1, %xmm1, %xmm1
    00000117: 	shufpd	$0x1, %xmm0, %xmm0
    0000011c: 	movups	%xmm1, (%rcx)
    0000011f: 	movups	%xmm0, -0x8(%r8)
    00000124: 	cmpq	$0x1, %rdx
    00000128: 	je	.Ltmp403 # Offset: 296
    0000012a: 	movdqu	0x10(%rcx), %xmm0
    0000012f: 	movdqu	-0x18(%r8), %xmm1
    00000135: 	shufpd	$0x1, %xmm0, %xmm0
    0000013a: 	shufpd	$0x1, %xmm1, %xmm1
    0000013f: 	movups	%xmm1, 0x10(%rcx)
    00000143: 	movups	%xmm0, -0x18(%r8)
.Ltmp403:
    00000148: 	movq	%rax, %rdx
    0000014b: 	andq	$-0x2, %rdx
    0000014f: 	leaq	(,%rdx,8), %rsi
    00000157: 	addq	%rsi, %rcx
    0000015a: 	subq	%rsi, %r8
    0000015d: 	cmpq	%rdx, %rax
    00000160: 	je	.Ltmp399 # Offset: 352
    00000162: 	movq	(%rcx), %rax
    00000165: 	movq	(%r8), %rdx
    00000168: 	movq	%rdx, (%rcx)
    0000016b: 	movq	%rax, (%r8)
    0000016e: 	retq # Offset: 366
    0000016f: 	nop # Size: 1
.Ltmp402:
    00000170: 	movq	(%rcx), %rax
    00000173: 	movq	(%r8), %rsi
    00000176: 	movq	%rsi, (%rcx)
    00000179: 	movq	%rax, (%r8)
    0000017c: 	leaq	0x1(%rdx), %rax
    00000180: 	cmpq	%rax, %r9
    00000183: 	jle	.Ltmp399 # Offset: 387
    00000185: 	movq	0x8(%rcx), %rax
    00000189: 	movq	-0x8(%r8), %rsi
    0000018d: 	movq	%rsi, 0x8(%rcx)
    00000191: 	movq	%rax, -0x8(%r8)
    00000195: 	leaq	0x2(%rdx), %rax
    00000199: 	cmpq	%rax, %r9
    0000019c: 	jle	.Ltmp399 # Offset: 412
    0000019e: 	movq	0x10(%rcx), %rax
    000001a2: 	movq	-0x10(%r8), %rsi
    000001a6: 	addq	$0x3, %rdx
    000001aa: 	movq	%rsi, 0x10(%rcx)
    000001ae: 	movq	%rax, -0x10(%r8)
    000001b2: 	cmpq	%rdx, %r9
    000001b5: 	jle	.Ltmp399 # Offset: 437
    000001b7: 	movq	0x18(%rcx), %rax
    000001bb: 	movq	-0x18(%r8), %rdx
    000001bf: 	movq	%rdx, 0x18(%rcx)
    000001c3: 	movq	%rax, -0x18(%r8)
.Ltmp399:
    000001c7: 	retq # Offset: 455
    000001c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp400:
    000001d0: 	xorl	%edx, %edx
    000001d2: 	jmp	.Ltmp404 # Offset: 466
DWARF CFI Instructions:
    <empty>
End of Function "_Z13fast_reverse2IPmEvT_S1_"

Binary Function "_Z13fast_reverse3IPmEvT_S1_" after disassembly {
  Number      : 111
  State       : disassembled
  Address     : 0x78d0
  Size        : 0x2cf
  MaxSize     : 0x2d0
  Offset      : 0x78d0
  Section     : .text
  Orc Section : .local.text._Z13fast_reverse3IPmEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0110:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp405 # Offset: 10
    00000010: 	movq	%rsi, %rax
    00000013: 	subq	%rdi, %rax
    00000016: 	leaq	-0x8(%rsi), %rdi
    0000001a: 	movq	%rax, %rdx
    0000001d: 	movq	%rax, %r10
    00000020: 	sarq	$0x3, %rdx
    00000024: 	shrq	$0x3f, %r10
    00000028: 	addq	%rdx, %r10
    0000002b: 	sarq	%r10
    0000002e: 	cmpq	$0x78, %rax
    00000032: 	jle	.Ltmp406 # Offset: 50
    00000038: 	leaq	-0x8(%r10), %r11
    0000003c: 	movq	%rcx, %rdx
    0000003f: 	shrq	$0x3, %r11
    00000043: 	movq	%r11, %rax
    00000046: 	negq	%rax
    00000049: 	shlq	$0x6, %rax
    0000004d: 	leaq	-0x48(%rsi,%rax), %r9
    00000052: 	movq	%rdi, %rax
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp407:
    00000058: 	movq	(%rdx), %rsi
    0000005b: 	movq	(%rax), %r8
    0000005e: 	subq	$0x40, %rax
    00000062: 	addq	$0x40, %rdx
    00000066: 	movq	%r8, -0x40(%rdx)
    0000006a: 	movq	0x38(%rax), %r8
    0000006e: 	movq	%rsi, 0x40(%rax)
    00000072: 	movq	-0x38(%rdx), %rsi
    00000076: 	movq	%r8, -0x38(%rdx)
    0000007a: 	movq	0x30(%rax), %r8
    0000007e: 	movq	%rsi, 0x38(%rax)
    00000082: 	movq	-0x30(%rdx), %rsi
    00000086: 	movq	%r8, -0x30(%rdx)
    0000008a: 	movq	0x28(%rax), %r8
    0000008e: 	movq	%rsi, 0x30(%rax)
    00000092: 	movq	-0x28(%rdx), %rsi
    00000096: 	movq	%r8, -0x28(%rdx)
    0000009a: 	movq	0x20(%rax), %r8
    0000009e: 	movq	%rsi, 0x28(%rax)
    000000a2: 	movq	-0x20(%rdx), %rsi
    000000a6: 	movq	%r8, -0x20(%rdx)
    000000aa: 	movq	0x18(%rax), %r8
    000000ae: 	movq	%rsi, 0x20(%rax)
    000000b2: 	movq	-0x18(%rdx), %rsi
    000000b6: 	movq	%r8, -0x18(%rdx)
    000000ba: 	movq	0x10(%rax), %r8
    000000be: 	movq	%rsi, 0x18(%rax)
    000000c2: 	movq	-0x10(%rdx), %rsi
    000000c6: 	movq	%r8, -0x10(%rdx)
    000000ca: 	movq	0x8(%rax), %r8
    000000ce: 	movq	%rsi, 0x10(%rax)
    000000d2: 	movq	-0x8(%rdx), %rsi
    000000d6: 	movq	%r8, -0x8(%rdx)
    000000da: 	movq	%rsi, 0x8(%rax)
    000000de: 	cmpq	%r9, %rax
    000000e1: 	jne	.Ltmp407 # Offset: 225
    000000e7: 	movq	%r11, %rax
    000000ea: 	leaq	0x8(,%r11,8), %rdx
    000000f2: 	notq	%rax
    000000f5: 	shlq	$0x6, %rax
    000000f9: 	addq	%rax, %rdi
    000000fc: 	subq	%rax, %rcx
.Ltmp410:
    000000ff: 	cmpq	%rdx, %r10
    00000102: 	jle	.Ltmp405 # Offset: 258
    00000108: 	movq	%r10, %rax
    0000010b: 	movq	%rdi, %r9
    0000010e: 	subq	%rdx, %rax
    00000111: 	leaq	(,%rax,8), %rsi
    00000119: 	subq	%rsi, %r9
    0000011c: 	leaq	(%rcx,%rsi), %r8
    00000120: 	leaq	0x8(%r9), %rsi
    00000124: 	cmpq	%rsi, %r8
    00000127: 	leaq	0x8(%rdi), %r8
    0000012b: 	setbe	%sil
    0000012f: 	cmpq	%r8, %rcx
    00000132: 	setae	%r8b
    00000136: 	orb	%r8b, %sil
    00000139: 	je	.Ltmp408 # Offset: 313
    0000013f: 	leaq	-0x1(%rax), %rsi
    00000143: 	cmpq	$0x1, %rsi
    00000147: 	jbe	.Ltmp408 # Offset: 327
    0000014d: 	movdqu	(%rcx), %xmm0
    00000151: 	movdqu	-0x8(%rdi), %xmm1
    00000156: 	movq	%rax, %rdx
    00000159: 	shrq	%rdx
    0000015c: 	shufpd	$0x1, %xmm1, %xmm1
    00000161: 	shufpd	$0x1, %xmm0, %xmm0
    00000166: 	movups	%xmm1, (%rcx)
    00000169: 	movups	%xmm0, -0x8(%rdi)
    0000016d: 	cmpq	$0x1, %rdx
    00000171: 	je	.Ltmp409 # Offset: 369
    00000173: 	movdqu	0x10(%rcx), %xmm0
    00000178: 	movdqu	-0x18(%rdi), %xmm1
    0000017d: 	shufpd	$0x1, %xmm0, %xmm0
    00000182: 	shufpd	$0x1, %xmm1, %xmm1
    00000187: 	movups	%xmm1, 0x10(%rcx)
    0000018b: 	movups	%xmm0, -0x18(%rdi)
    0000018f: 	cmpq	$0x2, %rdx
    00000193: 	je	.Ltmp409 # Offset: 403
    00000195: 	movdqu	0x20(%rcx), %xmm0
    0000019a: 	movdqu	-0x28(%rdi), %xmm1
    0000019f: 	shufpd	$0x1, %xmm0, %xmm0
    000001a4: 	shufpd	$0x1, %xmm1, %xmm1
    000001a9: 	movups	%xmm1, 0x20(%rcx)
    000001ad: 	movups	%xmm0, -0x28(%rdi)
    000001b1: 	cmpq	$0x3, %rdx
    000001b5: 	je	.Ltmp409 # Offset: 437
    000001b7: 	movdqu	0x30(%rcx), %xmm0
    000001bc: 	movdqu	-0x38(%rdi), %xmm1
    000001c1: 	shufpd	$0x1, %xmm0, %xmm0
    000001c6: 	shufpd	$0x1, %xmm1, %xmm1
    000001cb: 	movups	%xmm1, 0x30(%rcx)
    000001cf: 	movups	%xmm0, -0x38(%rdi)
.Ltmp409:
    000001d3: 	movq	%rax, %rdx
    000001d6: 	andq	$-0x2, %rdx
    000001da: 	leaq	(,%rdx,8), %rsi
    000001e2: 	addq	%rsi, %rcx
    000001e5: 	subq	%rsi, %rdi
    000001e8: 	cmpq	%rdx, %rax
    000001eb: 	je	.Ltmp405 # Offset: 491
    000001f1: 	movq	(%rcx), %rax
    000001f4: 	movq	(%rdi), %rdx
    000001f7: 	movq	%rdx, (%rcx)
    000001fa: 	movq	%rax, (%rdi)
    000001fd: 	retq # Offset: 509
    000001fe: 	nop # Size: 2
.Ltmp408:
    00000200: 	movq	(%rcx), %rax
    00000203: 	movq	(%rdi), %rsi
    00000206: 	movq	%rsi, (%rcx)
    00000209: 	movq	%rax, (%rdi)
    0000020c: 	leaq	0x1(%rdx), %rax
    00000210: 	cmpq	%rax, %r10
    00000213: 	jle	.Ltmp405 # Offset: 531
    00000219: 	movq	0x8(%rcx), %rax
    0000021d: 	movq	-0x8(%rdi), %rsi
    00000221: 	movq	%rsi, 0x8(%rcx)
    00000225: 	movq	%rax, -0x8(%rdi)
    00000229: 	leaq	0x2(%rdx), %rax
    0000022d: 	cmpq	%rax, %r10
    00000230: 	jle	.Ltmp405 # Offset: 560
    00000236: 	movq	0x10(%rcx), %rax
    0000023a: 	movq	-0x10(%rdi), %rsi
    0000023e: 	movq	%rsi, 0x10(%rcx)
    00000242: 	movq	%rax, -0x10(%rdi)
    00000246: 	leaq	0x3(%rdx), %rax
    0000024a: 	cmpq	%rax, %r10
    0000024d: 	jle	.Ltmp405 # Offset: 589
    0000024f: 	movq	0x18(%rcx), %rax
    00000253: 	movq	-0x18(%rdi), %rsi
    00000257: 	movq	%rsi, 0x18(%rcx)
    0000025b: 	movq	%rax, -0x18(%rdi)
    0000025f: 	leaq	0x4(%rdx), %rax
    00000263: 	cmpq	%rax, %r10
    00000266: 	jle	.Ltmp405 # Offset: 614
    00000268: 	movq	0x20(%rcx), %rax
    0000026c: 	movq	-0x20(%rdi), %rsi
    00000270: 	movq	%rsi, 0x20(%rcx)
    00000274: 	movq	%rax, -0x20(%rdi)
    00000278: 	leaq	0x5(%rdx), %rax
    0000027c: 	cmpq	%rax, %r10
    0000027f: 	jle	.Ltmp405 # Offset: 639
    00000281: 	movq	0x28(%rcx), %rax
    00000285: 	movq	-0x28(%rdi), %rsi
    00000289: 	movq	%rsi, 0x28(%rcx)
    0000028d: 	movq	%rax, -0x28(%rdi)
    00000291: 	leaq	0x6(%rdx), %rax
    00000295: 	cmpq	%rax, %r10
    00000298: 	jle	.Ltmp405 # Offset: 664
    0000029a: 	movq	0x30(%rcx), %rax
    0000029e: 	movq	-0x30(%rdi), %rsi
    000002a2: 	addq	$0x7, %rdx
    000002a6: 	movq	%rsi, 0x30(%rcx)
    000002aa: 	movq	%rax, -0x30(%rdi)
    000002ae: 	cmpq	%rdx, %r10
    000002b1: 	jle	.Ltmp405 # Offset: 689
    000002b3: 	movq	0x38(%rcx), %rax
    000002b7: 	movq	-0x38(%rdi), %rdx
    000002bb: 	movq	%rdx, 0x38(%rcx)
    000002bf: 	movq	%rax, -0x38(%rdi)
.Ltmp405:
    000002c3: 	retq # Offset: 707
    000002c4: 	nopl	(%rax) # Size: 4
.Ltmp406:
    000002c8: 	xorl	%edx, %edx
    000002ca: 	jmp	.Ltmp410 # Offset: 714
DWARF CFI Instructions:
    <empty>
End of Function "_Z13fast_reverse3IPmEvT_S1_"

Binary Function "_Z13fast_reverse4IPmEvT_S1_" after disassembly {
  Number      : 112
  State       : disassembled
  Address     : 0x7ba0
  Size        : 0x1d7
  MaxSize     : 0x1e0
  Offset      : 0x7ba0
  Section     : .text
  Orc Section : .local.text._Z13fast_reverse4IPmEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0111:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp411 # Offset: 10
    00000010: 	movq	%rsi, %rax
    00000013: 	leaq	-0x8(%rsi), %r8
    00000017: 	subq	%rdi, %rax
    0000001a: 	movq	%rax, %rdx
    0000001d: 	movq	%rax, %r10
    00000020: 	sarq	$0x3, %rdx
    00000024: 	shrq	$0x3f, %r10
    00000028: 	addq	%rdx, %r10
    0000002b: 	sarq	%r10
    0000002e: 	cmpq	$0x38, %rax
    00000032: 	jle	.Ltmp412 # Offset: 50
    00000038: 	leaq	-0x4(%r10), %r11
    0000003c: 	movq	%rdi, %rdx
    0000003f: 	shrq	$0x2, %r11
    00000043: 	movq	%r11, %rax
    00000046: 	negq	%rax
    00000049: 	shlq	$0x5, %rax
    0000004d: 	leaq	-0x28(%rsi,%rax), %r9
    00000052: 	movq	%r8, %rax
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp413:
    00000058: 	movq	(%rdx), %rsi
    0000005b: 	movq	(%rax), %rdi
    0000005e: 	subq	$0x20, %rax
    00000062: 	addq	$0x20, %rdx
    00000066: 	movq	%rdi, -0x20(%rdx)
    0000006a: 	movq	0x18(%rax), %rdi
    0000006e: 	movq	%rsi, 0x20(%rax)
    00000072: 	movq	-0x18(%rdx), %rsi
    00000076: 	movq	%rdi, -0x18(%rdx)
    0000007a: 	movq	0x10(%rax), %rdi
    0000007e: 	movq	%rsi, 0x18(%rax)
    00000082: 	movq	-0x10(%rdx), %rsi
    00000086: 	movq	%rdi, -0x10(%rdx)
    0000008a: 	movq	0x8(%rax), %rdi
    0000008e: 	movq	%rsi, 0x10(%rax)
    00000092: 	movq	-0x8(%rdx), %rsi
    00000096: 	movq	%rdi, -0x8(%rdx)
    0000009a: 	movq	%rsi, 0x8(%rax)
    0000009e: 	cmpq	%r9, %rax
    000000a1: 	jne	.Ltmp413 # Offset: 161
    000000a3: 	movq	%r11, %rax
    000000a6: 	leaq	0x4(,%r11,4), %rdx
    000000ae: 	notq	%rax
    000000b1: 	shlq	$0x5, %rax
    000000b5: 	addq	%rax, %r8
    000000b8: 	subq	%rax, %rcx
.Ltmp416:
    000000bb: 	cmpq	%rdx, %r10
    000000be: 	jle	.Ltmp411 # Offset: 190
    000000c4: 	movq	%r10, %rax
    000000c7: 	movq	%r8, %r9
    000000ca: 	subq	%rdx, %rax
    000000cd: 	leaq	(,%rax,8), %rsi
    000000d5: 	subq	%rsi, %r9
    000000d8: 	leaq	(%rcx,%rsi), %rdi
    000000dc: 	leaq	0x8(%r9), %rsi
    000000e0: 	cmpq	%rsi, %rdi
    000000e3: 	leaq	0x8(%r8), %rdi
    000000e7: 	setbe	%sil
    000000eb: 	cmpq	%rdi, %rcx
    000000ee: 	setae	%dil
    000000f2: 	orb	%dil, %sil
    000000f5: 	je	.Ltmp414 # Offset: 245
    000000f7: 	leaq	-0x1(%rax), %rsi
    000000fb: 	cmpq	$0x1, %rsi
    000000ff: 	jbe	.Ltmp414 # Offset: 255
    00000101: 	movdqu	(%rcx), %xmm0
    00000105: 	movdqu	-0x8(%r8), %xmm1
    0000010b: 	movq	%rax, %rdx
    0000010e: 	shrq	%rdx
    00000111: 	shufpd	$0x1, %xmm1, %xmm1
    00000116: 	shufpd	$0x1, %xmm0, %xmm0
    0000011b: 	movups	%xmm1, (%rcx)
    0000011e: 	movups	%xmm0, -0x8(%r8)
    00000123: 	cmpq	$0x1, %rdx
    00000127: 	je	.Ltmp415 # Offset: 295
    00000129: 	movdqu	0x10(%rcx), %xmm0
    0000012e: 	movdqu	-0x18(%r8), %xmm1
    00000134: 	shufpd	$0x1, %xmm0, %xmm0
    00000139: 	shufpd	$0x1, %xmm1, %xmm1
    0000013e: 	movups	%xmm1, 0x10(%rcx)
    00000142: 	movups	%xmm0, -0x18(%r8)
.Ltmp415:
    00000147: 	movq	%rax, %rdx
    0000014a: 	andq	$-0x2, %rdx
    0000014e: 	leaq	(,%rdx,8), %rsi
    00000156: 	addq	%rsi, %rcx
    00000159: 	subq	%rsi, %r8
    0000015c: 	cmpq	%rdx, %rax
    0000015f: 	je	.Ltmp411 # Offset: 351
    00000161: 	movq	(%rcx), %rax
    00000164: 	movq	(%r8), %rdx
    00000167: 	movq	%rdx, (%rcx)
    0000016a: 	movq	%rax, (%r8)
    0000016d: 	retq # Offset: 365
    0000016e: 	nop # Size: 2
.Ltmp414:
    00000170: 	movq	(%rcx), %rax
    00000173: 	movq	(%r8), %rsi
    00000176: 	movq	%rsi, (%rcx)
    00000179: 	movq	%rax, (%r8)
    0000017c: 	leaq	0x1(%rdx), %rax
    00000180: 	cmpq	%rax, %r10
    00000183: 	jle	.Ltmp411 # Offset: 387
    00000185: 	movq	0x8(%rcx), %rax
    00000189: 	movq	-0x8(%r8), %rsi
    0000018d: 	movq	%rsi, 0x8(%rcx)
    00000191: 	movq	%rax, -0x8(%r8)
    00000195: 	leaq	0x2(%rdx), %rax
    00000199: 	cmpq	%rax, %r10
    0000019c: 	jle	.Ltmp411 # Offset: 412
    0000019e: 	movq	0x10(%rcx), %rax
    000001a2: 	movq	-0x10(%r8), %rsi
    000001a6: 	addq	$0x3, %rdx
    000001aa: 	movq	%rsi, 0x10(%rcx)
    000001ae: 	movq	%rax, -0x10(%r8)
    000001b2: 	cmpq	%rdx, %r10
    000001b5: 	jle	.Ltmp411 # Offset: 437
    000001b7: 	movq	0x18(%rcx), %rax
    000001bb: 	movq	-0x18(%r8), %rdx
    000001bf: 	movq	%rdx, 0x18(%rcx)
    000001c3: 	movq	%rax, -0x18(%r8)
.Ltmp411:
    000001c7: 	retq # Offset: 455
    000001c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp412:
    000001d0: 	xorl	%edx, %edx
    000001d2: 	jmp	.Ltmp416 # Offset: 466
DWARF CFI Instructions:
    <empty>
End of Function "_Z13fast_reverse4IPmEvT_S1_"

Binary Function "_ZSt12reverse_copyI20BidirectionalPointerImES1_ET0_T_S3_S2_" after disassembly {
  Number      : 113
  State       : disassembled
  Address     : 0x7d80
  Size        : 0xd7
  MaxSize     : 0xe0
  Offset      : 0x7d80
  Section     : .text
  Orc Section : .local.text._ZSt12reverse_copyI20BidirectionalPointerImES1_ET0_T_S3_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0112:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movq	%rsi, %rax
    0000000a: 	movq	%rsi, %rdi
    0000000d: 	cmpq	%rcx, %rsi
    00000010: 	je	.Ltmp417 # Offset: 16
    00000016: 	movq	%rsi, %r8
    00000019: 	subq	%rcx, %r8
    0000001c: 	leaq	-0x8(%r8), %r10
    00000020: 	addq	%rdx, %r8
    00000023: 	movq	%r10, %rsi
    00000026: 	shrq	$0x3, %rsi
    0000002a: 	leaq	0x1(%rsi), %r9
    0000002e: 	notq	%rsi
    00000031: 	leaq	(%rdi,%rsi,8), %rsi
    00000035: 	cmpq	%rsi, %r8
    00000038: 	setbe	%sil
    0000003c: 	cmpq	%rdx, %rdi
    0000003f: 	setbe	%r11b
    00000043: 	orb	%r11b, %sil
    00000046: 	je	.Ltmp418 # Offset: 70
    00000048: 	cmpq	$0x10, %r10
    0000004c: 	jbe	.Ltmp418 # Offset: 76
    0000004e: 	movq	%r9, %rsi
    00000051: 	leaq	-0x10(%rdi), %rcx
    00000055: 	movq	%rdx, %rax
    00000058: 	shrq	%rsi
    0000005b: 	shlq	$0x4, %rsi
    0000005f: 	addq	%rdx, %rsi
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp419:
    00000068: 	movdqu	(%rcx), %xmm0
    0000006c: 	addq	$0x10, %rax
    00000070: 	subq	$0x10, %rcx
    00000074: 	shufpd	$0x1, %xmm0, %xmm0
    00000079: 	movups	%xmm0, -0x10(%rax)
    0000007d: 	cmpq	%rsi, %rax
    00000080: 	jne	.Ltmp419 # Offset: 128
    00000082: 	movq	%r9, %rcx
    00000085: 	andq	$-0x2, %rcx
    00000089: 	movq	%rcx, %rax
    0000008c: 	negq	%rax
    0000008f: 	shlq	$0x3, %rax
    00000093: 	subq	%rax, %rdx
    00000096: 	cmpq	%rcx, %r9
    00000099: 	je	.Ltmp420 # Offset: 153
    0000009b: 	movq	-0x8(%rdi,%rax), %rax
    000000a0: 	movq	%rax, (%rdx)
.Ltmp420:
    000000a3: 	movq	%r8, %rax
    000000a6: 	retq # Offset: 166
    000000a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp418:
    000000b0: 	movq	-0x8(%rax), %rsi
    000000b4: 	subq	$0x8, %rax
    000000b8: 	addq	$0x8, %rdx
    000000bc: 	movq	%rsi, -0x8(%rdx)
    000000c0: 	cmpq	%rax, %rcx
    000000c3: 	jne	.Ltmp418 # Offset: 195
    000000c5: 	jmp	.Ltmp420 # Offset: 197
    000000c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp417:
    000000d0: 	movq	%rdx, %r8
    000000d3: 	movq	%r8, %rax
    000000d6: 	retq # Offset: 214
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt12reverse_copyI20BidirectionalPointerImES1_ET0_T_S3_S2_"

Binary Function "_Z22my_simple_reverse_copyI20BidirectionalPointerImES1_EvT_S2_T0_" after disassembly {
  Number      : 114
  State       : disassembled
  Address     : 0x7e60
  Size        : 0xb6
  MaxSize     : 0xc0
  Offset      : 0x7e60
  Section     : .text
  Orc Section : .local.text._Z22my_simple_reverse_copyI20BidirectionalPointerImES1_EvT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0113:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movq	%rsi, %rax
    0000000a: 	movq	%rsi, %rdi
    0000000d: 	cmpq	%rsi, %rcx
    00000010: 	je	.Ltmp421 # Offset: 16
    00000016: 	subq	%rcx, %rsi
    00000019: 	leaq	-0x8(%rsi), %r10
    0000001d: 	addq	%rdx, %rsi
    00000020: 	movq	%r10, %r9
    00000023: 	shrq	$0x3, %r9
    00000027: 	leaq	0x1(%r9), %r8
    0000002b: 	notq	%r9
    0000002e: 	leaq	(%rdi,%r9,8), %r9
    00000032: 	cmpq	%r9, %rsi
    00000035: 	setbe	%sil
    00000039: 	cmpq	%rdi, %rdx
    0000003c: 	setae	%r9b
    00000040: 	orb	%r9b, %sil
    00000043: 	je	.Ltmp422 # Offset: 67
    00000045: 	cmpq	$0x10, %r10
    00000049: 	jbe	.Ltmp422 # Offset: 73
    0000004b: 	movq	%r8, %rsi
    0000004e: 	leaq	-0x10(%rdi), %rcx
    00000052: 	movq	%rdx, %rax
    00000055: 	shrq	%rsi
    00000058: 	shlq	$0x4, %rsi
    0000005c: 	addq	%rdx, %rsi
    0000005f: 	nop # Size: 1
.Ltmp423:
    00000060: 	movdqu	(%rcx), %xmm0
    00000064: 	addq	$0x10, %rax
    00000068: 	subq	$0x10, %rcx
    0000006c: 	shufpd	$0x1, %xmm0, %xmm0
    00000071: 	movups	%xmm0, -0x10(%rax)
    00000075: 	cmpq	%rsi, %rax
    00000078: 	jne	.Ltmp423 # Offset: 120
    0000007a: 	movq	%r8, %rcx
    0000007d: 	andq	$-0x2, %rcx
    00000081: 	movq	%rcx, %rax
    00000084: 	negq	%rax
    00000087: 	shlq	$0x3, %rax
    0000008b: 	subq	%rax, %rdx
    0000008e: 	cmpq	%rcx, %r8
    00000091: 	je	.Ltmp421 # Offset: 145
    00000093: 	movq	-0x8(%rdi,%rax), %rax
    00000098: 	movq	%rax, (%rdx)
    0000009b: 	retq # Offset: 155
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp422:
    000000a0: 	movq	-0x8(%rax), %rsi
    000000a4: 	subq	$0x8, %rax
    000000a8: 	addq	$0x8, %rdx
    000000ac: 	movq	%rsi, -0x8(%rdx)
    000000b0: 	cmpq	%rax, %rcx
    000000b3: 	jne	.Ltmp422 # Offset: 179
.Ltmp421:
    000000b5: 	retq # Offset: 181
DWARF CFI Instructions:
    <empty>
End of Function "_Z22my_simple_reverse_copyI20BidirectionalPointerImES1_EvT_S2_T0_"

Binary Function "_Z20my_fast_reverse_copyI20BidirectionalPointerImES1_EvT_S2_T0_" after disassembly {
  Number      : 115
  State       : disassembled
  Address     : 0x7f20
  Size        : 0xb6
  MaxSize     : 0xc0
  Offset      : 0x7f20
  Section     : .text
  Orc Section : .local.text._Z20my_fast_reverse_copyI20BidirectionalPointerImES1_EvT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0114:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movq	%rsi, %rax
    0000000a: 	movq	%rsi, %rdi
    0000000d: 	cmpq	%rsi, %rcx
    00000010: 	je	.Ltmp424 # Offset: 16
    00000016: 	subq	%rcx, %rsi
    00000019: 	leaq	-0x8(%rsi), %r10
    0000001d: 	addq	%rdx, %rsi
    00000020: 	movq	%r10, %r9
    00000023: 	shrq	$0x3, %r9
    00000027: 	leaq	0x1(%r9), %r8
    0000002b: 	notq	%r9
    0000002e: 	leaq	(%rdi,%r9,8), %r9
    00000032: 	cmpq	%r9, %rsi
    00000035: 	setbe	%sil
    00000039: 	cmpq	%rdi, %rdx
    0000003c: 	setae	%r9b
    00000040: 	orb	%r9b, %sil
    00000043: 	je	.Ltmp425 # Offset: 67
    00000045: 	cmpq	$0x10, %r10
    00000049: 	jbe	.Ltmp425 # Offset: 73
    0000004b: 	movq	%r8, %rsi
    0000004e: 	leaq	-0x10(%rdi), %rcx
    00000052: 	movq	%rdx, %rax
    00000055: 	shrq	%rsi
    00000058: 	shlq	$0x4, %rsi
    0000005c: 	addq	%rdx, %rsi
    0000005f: 	nop # Size: 1
.Ltmp426:
    00000060: 	movdqu	(%rcx), %xmm0
    00000064: 	addq	$0x10, %rax
    00000068: 	subq	$0x10, %rcx
    0000006c: 	shufpd	$0x1, %xmm0, %xmm0
    00000071: 	movups	%xmm0, -0x10(%rax)
    00000075: 	cmpq	%rsi, %rax
    00000078: 	jne	.Ltmp426 # Offset: 120
    0000007a: 	movq	%r8, %rcx
    0000007d: 	andq	$-0x2, %rcx
    00000081: 	movq	%rcx, %rax
    00000084: 	negq	%rax
    00000087: 	shlq	$0x3, %rax
    0000008b: 	subq	%rax, %rdx
    0000008e: 	cmpq	%rcx, %r8
    00000091: 	je	.Ltmp424 # Offset: 145
    00000093: 	movq	-0x8(%rdi,%rax), %rax
    00000098: 	movq	%rax, (%rdx)
    0000009b: 	retq # Offset: 155
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp425:
    000000a0: 	movq	-0x8(%rax), %rsi
    000000a4: 	subq	$0x8, %rax
    000000a8: 	addq	$0x8, %rdx
    000000ac: 	movq	%rsi, -0x8(%rdx)
    000000b0: 	cmpq	%rax, %rcx
    000000b3: 	jne	.Ltmp425 # Offset: 179
.Ltmp424:
    000000b5: 	retq # Offset: 181
DWARF CFI Instructions:
    <empty>
End of Function "_Z20my_fast_reverse_copyI20BidirectionalPointerImES1_EvT_S2_T0_"

Binary Function "_ZSt12reverse_copyIPmS0_ET0_T_S2_S1_" after disassembly {
  Number      : 116
  State       : disassembled
  Address     : 0x7fe0
  Size        : 0xc7
  MaxSize     : 0xd0
  Offset      : 0x7fe0
  Section     : .text
  Orc Section : .local.text._ZSt12reverse_copyIPmS0_ET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0115:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	movq	%rdx, %rcx
    0000000a: 	cmpq	%rdi, %rsi
    0000000d: 	je	.Ltmp427 # Offset: 13
    00000013: 	movq	%rsi, %r8
    00000016: 	subq	%rdi, %r8
    00000019: 	leaq	-0x8(%r8), %rsi
    0000001d: 	addq	%rdx, %r8
    00000020: 	movq	%rsi, %rdx
    00000023: 	shrq	$0x3, %rdx
    00000027: 	leaq	0x1(%rdx), %r9
    0000002b: 	notq	%rdx
    0000002e: 	leaq	(%rax,%rdx,8), %rdx
    00000032: 	cmpq	%rdx, %r8
    00000035: 	setbe	%dl
    00000038: 	cmpq	%rcx, %rax
    0000003b: 	setbe	%r10b
    0000003f: 	orb	%r10b, %dl
    00000042: 	je	.Ltmp428 # Offset: 66
    00000044: 	cmpq	$0x10, %rsi
    00000048: 	jbe	.Ltmp428 # Offset: 72
    0000004a: 	movq	%r9, %rdi
    0000004d: 	leaq	-0x10(%rax), %rsi
    00000051: 	movq	%rcx, %rdx
    00000054: 	shrq	%rdi
    00000057: 	shlq	$0x4, %rdi
    0000005b: 	addq	%rcx, %rdi
    0000005e: 	nop # Size: 2
.Ltmp429:
    00000060: 	movdqu	(%rsi), %xmm0
    00000064: 	addq	$0x10, %rdx
    00000068: 	subq	$0x10, %rsi
    0000006c: 	shufpd	$0x1, %xmm0, %xmm0
    00000071: 	movups	%xmm0, -0x10(%rdx)
    00000075: 	cmpq	%rdi, %rdx
    00000078: 	jne	.Ltmp429 # Offset: 120
    0000007a: 	movq	%r9, %rsi
    0000007d: 	andq	$-0x2, %rsi
    00000081: 	movq	%rsi, %rdx
    00000084: 	negq	%rdx
    00000087: 	shlq	$0x3, %rdx
    0000008b: 	subq	%rdx, %rcx
    0000008e: 	cmpq	%rsi, %r9
    00000091: 	je	.Ltmp430 # Offset: 145
    00000093: 	movq	-0x8(%rax,%rdx), %rax
    00000098: 	movq	%rax, (%rcx)
.Ltmp430:
    0000009b: 	movq	%r8, %rax
    0000009e: 	retq # Offset: 158
    0000009f: 	nop # Size: 1
.Ltmp428:
    000000a0: 	movq	-0x8(%rax), %rdx
    000000a4: 	subq	$0x8, %rax
    000000a8: 	addq	$0x8, %rcx
    000000ac: 	movq	%rdx, -0x8(%rcx)
    000000b0: 	cmpq	%rax, %rdi
    000000b3: 	jne	.Ltmp428 # Offset: 179
    000000b5: 	jmp	.Ltmp430 # Offset: 181
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp427:
    000000c0: 	movq	%rdx, %r8
    000000c3: 	movq	%r8, %rax
    000000c6: 	retq # Offset: 198
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt12reverse_copyIPmS0_ET0_T_S2_S1_"

Binary Function "_Z22my_simple_reverse_copyIPmS0_EvT_S1_T0_" after disassembly {
  Number      : 117
  State       : disassembled
  Address     : 0x80b0
  Size        : 0xbd
  MaxSize     : 0xc0
  Offset      : 0x80b0
  Section     : .text
  Orc Section : .local.text._Z22my_simple_reverse_copyIPmS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0116:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp431 # Offset: 7
    0000000d: 	movq	%rsi, %rax
    00000010: 	leaq	-0x8(%rsi), %rcx
    00000014: 	subq	%rdi, %rax
    00000017: 	movq	%rax, %r8
    0000001a: 	sarq	$0x3, %r8
    0000001e: 	testq	%rax, %rax
    00000021: 	jle	.Ltmp431 # Offset: 33
    00000027: 	movq	%rsi, %rdi
    0000002a: 	leaq	(%rdx,%rax), %r9
    0000002e: 	subq	%rax, %rdi
    00000031: 	cmpq	%rdi, %r9
    00000034: 	setbe	%dil
    00000038: 	cmpq	%rdx, %rsi
    0000003b: 	setbe	%r9b
    0000003f: 	orb	%r9b, %dil
    00000042: 	je	.Ltmp432 # Offset: 66
    00000044: 	cmpq	$0x18, %rax
    00000048: 	jle	.Ltmp432 # Offset: 72
    0000004a: 	movq	%r8, %rdi
    0000004d: 	subq	$0x10, %rsi
    00000051: 	movq	%rdx, %rax
    00000054: 	shrq	%rdi
    00000057: 	shlq	$0x4, %rdi
    0000005b: 	addq	%rdx, %rdi
    0000005e: 	nop # Size: 2
.Ltmp433:
    00000060: 	movdqu	(%rsi), %xmm0
    00000064: 	addq	$0x10, %rax
    00000068: 	subq	$0x10, %rsi
    0000006c: 	shufpd	$0x1, %xmm0, %xmm0
    00000071: 	movups	%xmm0, -0x10(%rax)
    00000075: 	cmpq	%rdi, %rax
    00000078: 	jne	.Ltmp433 # Offset: 120
    0000007a: 	movq	%r8, %rsi
    0000007d: 	andq	$-0x2, %rsi
    00000081: 	movq	%rsi, %rax
    00000084: 	negq	%rax
    00000087: 	shlq	$0x3, %rax
    0000008b: 	addq	%rax, %rcx
    0000008e: 	subq	%rax, %rdx
    00000091: 	cmpq	%rsi, %r8
    00000094: 	je	.Ltmp431 # Offset: 148
    00000096: 	movq	(%rcx), %rax
    00000099: 	movq	%rax, (%rdx)
    0000009c: 	retq # Offset: 156
    0000009d: 	nopl	(%rax) # Size: 3
.Ltmp432:
    000000a0: 	xorl	%eax, %eax
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp434:
    000000a8: 	movq	(%rcx), %rsi
    000000ab: 	subq	$0x8, %rcx
    000000af: 	movq	%rsi, (%rdx,%rax,8)
    000000b3: 	addq	$0x1, %rax
    000000b7: 	cmpq	%rax, %r8
    000000ba: 	jg	.Ltmp434 # Offset: 186
.Ltmp431:
    000000bc: 	retq # Offset: 188
DWARF CFI Instructions:
    <empty>
End of Function "_Z22my_simple_reverse_copyIPmS0_EvT_S1_T0_"

Binary Function "_Z18fast_reverse_copy2IPmS0_EvT_S1_T0_" after disassembly {
  Number      : 118
  State       : disassembled
  Address     : 0x8170
  Size        : 0x15a
  MaxSize     : 0x160
  Offset      : 0x8170
  Section     : .text
  Orc Section : .local.text._Z18fast_reverse_copy2IPmS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0117:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp435 # Offset: 10
    00000010: 	movq	%rsi, %rdx
    00000013: 	subq	$0x8, %rsi
    00000017: 	subq	%rdi, %rdx
    0000001a: 	movq	%rdx, %r9
    0000001d: 	sarq	$0x3, %r9
    00000021: 	cmpq	$0x18, %rdx
    00000025: 	jle	.Ltmp436 # Offset: 37
    0000002b: 	leaq	-0x4(%r9), %r8
    0000002f: 	movq	%rsi, %rdx
    00000032: 	shrq	$0x2, %r8
    00000036: 	addq	$0x1, %r8
    0000003a: 	movq	%r8, %r10
    0000003d: 	shlq	$0x5, %r10
    00000041: 	leaq	(%rax,%r10), %rdi
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp437:
    00000048: 	movq	(%rdx), %rcx
    0000004b: 	addq	$0x20, %rax
    0000004f: 	subq	$0x20, %rdx
    00000053: 	movq	%rcx, -0x20(%rax)
    00000057: 	movq	0x18(%rdx), %rcx
    0000005b: 	movq	%rcx, -0x18(%rax)
    0000005f: 	movq	0x10(%rdx), %rcx
    00000063: 	movq	%rcx, -0x10(%rax)
    00000067: 	movq	0x8(%rdx), %rcx
    0000006b: 	movq	%rcx, -0x8(%rax)
    0000006f: 	cmpq	%rdi, %rax
    00000072: 	jne	.Ltmp437 # Offset: 114
    00000074: 	subq	%r10, %rsi
    00000077: 	leaq	(,%r8,4), %rax
.Ltmp440:
    0000007f: 	cmpq	%rax, %r9
    00000082: 	jle	.Ltmp435 # Offset: 130
    00000088: 	movq	%r9, %rdx
    0000008b: 	movq	%rsi, %r10
    0000008e: 	subq	%rax, %rdx
    00000091: 	leaq	(,%rdx,8), %rcx
    00000099: 	subq	%rcx, %r10
    0000009c: 	leaq	(%rdi,%rcx), %r8
    000000a0: 	leaq	0x8(%r10), %rcx
    000000a4: 	cmpq	%rcx, %r8
    000000a7: 	leaq	0x8(%rsi), %r8
    000000ab: 	setbe	%cl
    000000ae: 	cmpq	%r8, %rdi
    000000b1: 	setae	%r8b
    000000b5: 	orb	%r8b, %cl
    000000b8: 	je	.Ltmp438 # Offset: 184
    000000ba: 	leaq	-0x1(%rdx), %rcx
    000000be: 	cmpq	$0x2, %rcx
    000000c2: 	jbe	.Ltmp438 # Offset: 194
    000000c4: 	movdqu	-0x8(%rsi), %xmm0
    000000c9: 	movq	%rdx, %rax
    000000cc: 	shrq	%rax
    000000cf: 	shufpd	$0x1, %xmm0, %xmm0
    000000d4: 	movups	%xmm0, (%rdi)
    000000d7: 	cmpq	$0x1, %rax
    000000db: 	je	.Ltmp439 # Offset: 219
    000000dd: 	movdqu	-0x18(%rsi), %xmm0
    000000e2: 	shufpd	$0x1, %xmm0, %xmm0
    000000e7: 	movups	%xmm0, 0x10(%rdi)
.Ltmp439:
    000000eb: 	movq	%rdx, %rcx
    000000ee: 	andq	$-0x2, %rcx
    000000f2: 	movq	%rcx, %rax
    000000f5: 	negq	%rax
    000000f8: 	shlq	$0x3, %rax
    000000fc: 	addq	%rax, %rsi
    000000ff: 	subq	%rax, %rdi
    00000102: 	cmpq	%rcx, %rdx
    00000105: 	je	.Ltmp435 # Offset: 261
    00000107: 	movq	(%rsi), %rax
    0000010a: 	movq	%rax, (%rdi)
    0000010d: 	retq # Offset: 269
    0000010e: 	nop # Size: 2
.Ltmp438:
    00000110: 	movq	(%rsi), %rdx
    00000113: 	movq	%rdx, (%rdi)
    00000116: 	leaq	0x1(%rax), %rdx
    0000011a: 	cmpq	%rdx, %r9
    0000011d: 	jle	.Ltmp435 # Offset: 285
    0000011f: 	movq	-0x8(%rsi), %rdx
    00000123: 	movq	%rdx, 0x8(%rdi)
    00000127: 	leaq	0x2(%rax), %rdx
    0000012b: 	cmpq	%rdx, %r9
    0000012e: 	jle	.Ltmp435 # Offset: 302
    00000130: 	movq	-0x10(%rsi), %rdx
    00000134: 	addq	$0x3, %rax
    00000138: 	movq	%rdx, 0x10(%rdi)
    0000013c: 	cmpq	%rax, %r9
    0000013f: 	jle	.Ltmp435 # Offset: 319
    00000141: 	movq	-0x18(%rsi), %rax
    00000145: 	movq	%rax, 0x18(%rdi)
.Ltmp435:
    00000149: 	retq # Offset: 329
    0000014a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp436:
    00000150: 	movq	%rax, %rdi
    00000153: 	xorl	%eax, %eax
    00000155: 	jmp	.Ltmp440 # Offset: 341
DWARF CFI Instructions:
    <empty>
End of Function "_Z18fast_reverse_copy2IPmS0_EvT_S1_T0_"

Binary Function "_Z18fast_reverse_copy3IPmS0_EvT_S1_T0_" after disassembly {
  Number      : 119
  State       : disassembled
  Address     : 0x82d0
  Size        : 0x15a
  MaxSize     : 0x160
  Offset      : 0x82d0
  Section     : .text
  Orc Section : .local.text._Z18fast_reverse_copy3IPmS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0118:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp441 # Offset: 10
    00000010: 	movq	%rsi, %rdx
    00000013: 	subq	$0x8, %rsi
    00000017: 	subq	%rdi, %rdx
    0000001a: 	movq	%rdx, %r9
    0000001d: 	sarq	$0x3, %r9
    00000021: 	cmpq	$0x18, %rdx
    00000025: 	jle	.Ltmp442 # Offset: 37
    0000002b: 	leaq	-0x4(%r9), %r8
    0000002f: 	movq	%rsi, %rdx
    00000032: 	shrq	$0x2, %r8
    00000036: 	addq	$0x1, %r8
    0000003a: 	movq	%r8, %r10
    0000003d: 	shlq	$0x5, %r10
    00000041: 	leaq	(%rax,%r10), %rdi
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp443:
    00000048: 	movq	(%rdx), %rcx
    0000004b: 	addq	$0x20, %rax
    0000004f: 	subq	$0x20, %rdx
    00000053: 	movq	%rcx, -0x20(%rax)
    00000057: 	movq	0x18(%rdx), %rcx
    0000005b: 	movq	%rcx, -0x18(%rax)
    0000005f: 	movq	0x10(%rdx), %rcx
    00000063: 	movq	%rcx, -0x10(%rax)
    00000067: 	movq	0x8(%rdx), %rcx
    0000006b: 	movq	%rcx, -0x8(%rax)
    0000006f: 	cmpq	%rdi, %rax
    00000072: 	jne	.Ltmp443 # Offset: 114
    00000074: 	leaq	(,%r8,4), %rax
    0000007c: 	subq	%r10, %rsi
.Ltmp446:
    0000007f: 	cmpq	%rax, %r9
    00000082: 	jle	.Ltmp441 # Offset: 130
    00000088: 	movq	%r9, %rdx
    0000008b: 	movq	%rsi, %r10
    0000008e: 	subq	%rax, %rdx
    00000091: 	leaq	(,%rdx,8), %rcx
    00000099: 	subq	%rcx, %r10
    0000009c: 	leaq	(%rdi,%rcx), %r8
    000000a0: 	leaq	0x8(%r10), %rcx
    000000a4: 	cmpq	%rcx, %r8
    000000a7: 	leaq	0x8(%rsi), %r8
    000000ab: 	setbe	%cl
    000000ae: 	cmpq	%r8, %rdi
    000000b1: 	setae	%r8b
    000000b5: 	orb	%r8b, %cl
    000000b8: 	je	.Ltmp444 # Offset: 184
    000000ba: 	leaq	-0x1(%rdx), %rcx
    000000be: 	cmpq	$0x2, %rcx
    000000c2: 	jbe	.Ltmp444 # Offset: 194
    000000c4: 	movdqu	-0x8(%rsi), %xmm0
    000000c9: 	movq	%rdx, %rax
    000000cc: 	shrq	%rax
    000000cf: 	shufpd	$0x1, %xmm0, %xmm0
    000000d4: 	movups	%xmm0, (%rdi)
    000000d7: 	cmpq	$0x1, %rax
    000000db: 	je	.Ltmp445 # Offset: 219
    000000dd: 	movdqu	-0x18(%rsi), %xmm0
    000000e2: 	shufpd	$0x1, %xmm0, %xmm0
    000000e7: 	movups	%xmm0, 0x10(%rdi)
.Ltmp445:
    000000eb: 	movq	%rdx, %rcx
    000000ee: 	andq	$-0x2, %rcx
    000000f2: 	movq	%rcx, %rax
    000000f5: 	negq	%rax
    000000f8: 	shlq	$0x3, %rax
    000000fc: 	addq	%rax, %rsi
    000000ff: 	subq	%rax, %rdi
    00000102: 	cmpq	%rcx, %rdx
    00000105: 	je	.Ltmp441 # Offset: 261
    00000107: 	movq	(%rsi), %rax
    0000010a: 	movq	%rax, (%rdi)
    0000010d: 	retq # Offset: 269
    0000010e: 	nop # Size: 2
.Ltmp444:
    00000110: 	movq	(%rsi), %rdx
    00000113: 	movq	%rdx, (%rdi)
    00000116: 	leaq	0x1(%rax), %rdx
    0000011a: 	cmpq	%rdx, %r9
    0000011d: 	jle	.Ltmp441 # Offset: 285
    0000011f: 	movq	-0x8(%rsi), %rdx
    00000123: 	movq	%rdx, 0x8(%rdi)
    00000127: 	leaq	0x2(%rax), %rdx
    0000012b: 	cmpq	%rdx, %r9
    0000012e: 	jle	.Ltmp441 # Offset: 302
    00000130: 	movq	-0x10(%rsi), %rdx
    00000134: 	addq	$0x3, %rax
    00000138: 	movq	%rdx, 0x10(%rdi)
    0000013c: 	cmpq	%rax, %r9
    0000013f: 	jle	.Ltmp441 # Offset: 319
    00000141: 	movq	-0x18(%rsi), %rax
    00000145: 	movq	%rax, 0x18(%rdi)
.Ltmp441:
    00000149: 	retq # Offset: 329
    0000014a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp442:
    00000150: 	movq	%rax, %rdi
    00000153: 	xorl	%eax, %eax
    00000155: 	jmp	.Ltmp446 # Offset: 341
DWARF CFI Instructions:
    <empty>
End of Function "_Z18fast_reverse_copy3IPmS0_EvT_S1_T0_"

Binary Function "_Z18fast_reverse_copy4IPmS0_EvT_S1_T0_" after disassembly {
  Number      : 120
  State       : disassembled
  Address     : 0x8430
  Size        : 0x15a
  MaxSize     : 0x160
  Offset      : 0x8430
  Section     : .text
  Orc Section : .local.text._Z18fast_reverse_copy4IPmS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0119:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp447 # Offset: 10
    00000010: 	movq	%rsi, %rdx
    00000013: 	subq	$0x8, %rsi
    00000017: 	subq	%rdi, %rdx
    0000001a: 	movq	%rdx, %r9
    0000001d: 	sarq	$0x3, %r9
    00000021: 	cmpq	$0x18, %rdx
    00000025: 	jle	.Ltmp448 # Offset: 37
    0000002b: 	leaq	-0x4(%r9), %r8
    0000002f: 	movq	%rsi, %rdx
    00000032: 	shrq	$0x2, %r8
    00000036: 	addq	$0x1, %r8
    0000003a: 	movq	%r8, %r10
    0000003d: 	shlq	$0x5, %r10
    00000041: 	leaq	(%rax,%r10), %rdi
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp449:
    00000048: 	movq	(%rdx), %rcx
    0000004b: 	addq	$0x20, %rax
    0000004f: 	subq	$0x20, %rdx
    00000053: 	movq	%rcx, -0x20(%rax)
    00000057: 	movq	0x18(%rdx), %rcx
    0000005b: 	movq	%rcx, -0x18(%rax)
    0000005f: 	movq	0x10(%rdx), %rcx
    00000063: 	movq	%rcx, -0x10(%rax)
    00000067: 	movq	0x8(%rdx), %rcx
    0000006b: 	movq	%rcx, -0x8(%rax)
    0000006f: 	cmpq	%rdi, %rax
    00000072: 	jne	.Ltmp449 # Offset: 114
    00000074: 	leaq	(,%r8,4), %rax
    0000007c: 	subq	%r10, %rsi
.Ltmp452:
    0000007f: 	cmpq	%rax, %r9
    00000082: 	jle	.Ltmp447 # Offset: 130
    00000088: 	movq	%r9, %rdx
    0000008b: 	movq	%rsi, %r10
    0000008e: 	subq	%rax, %rdx
    00000091: 	leaq	(,%rdx,8), %rcx
    00000099: 	subq	%rcx, %r10
    0000009c: 	leaq	(%rdi,%rcx), %r8
    000000a0: 	leaq	0x8(%r10), %rcx
    000000a4: 	cmpq	%rcx, %r8
    000000a7: 	leaq	0x8(%rsi), %r8
    000000ab: 	setbe	%cl
    000000ae: 	cmpq	%r8, %rdi
    000000b1: 	setae	%r8b
    000000b5: 	orb	%r8b, %cl
    000000b8: 	je	.Ltmp450 # Offset: 184
    000000ba: 	leaq	-0x1(%rdx), %rcx
    000000be: 	cmpq	$0x2, %rcx
    000000c2: 	jbe	.Ltmp450 # Offset: 194
    000000c4: 	movdqu	-0x8(%rsi), %xmm0
    000000c9: 	movq	%rdx, %rax
    000000cc: 	shrq	%rax
    000000cf: 	shufpd	$0x1, %xmm0, %xmm0
    000000d4: 	movups	%xmm0, (%rdi)
    000000d7: 	cmpq	$0x1, %rax
    000000db: 	je	.Ltmp451 # Offset: 219
    000000dd: 	movdqu	-0x18(%rsi), %xmm0
    000000e2: 	shufpd	$0x1, %xmm0, %xmm0
    000000e7: 	movups	%xmm0, 0x10(%rdi)
.Ltmp451:
    000000eb: 	movq	%rdx, %rcx
    000000ee: 	andq	$-0x2, %rcx
    000000f2: 	movq	%rcx, %rax
    000000f5: 	negq	%rax
    000000f8: 	shlq	$0x3, %rax
    000000fc: 	addq	%rax, %rsi
    000000ff: 	subq	%rax, %rdi
    00000102: 	cmpq	%rcx, %rdx
    00000105: 	je	.Ltmp447 # Offset: 261
    00000107: 	movq	(%rsi), %rax
    0000010a: 	movq	%rax, (%rdi)
    0000010d: 	retq # Offset: 269
    0000010e: 	nop # Size: 2
.Ltmp450:
    00000110: 	movq	(%rsi), %rdx
    00000113: 	movq	%rdx, (%rdi)
    00000116: 	leaq	0x1(%rax), %rdx
    0000011a: 	cmpq	%rdx, %r9
    0000011d: 	jle	.Ltmp447 # Offset: 285
    0000011f: 	movq	-0x8(%rsi), %rdx
    00000123: 	movq	%rdx, 0x8(%rdi)
    00000127: 	leaq	0x2(%rax), %rdx
    0000012b: 	cmpq	%rdx, %r9
    0000012e: 	jle	.Ltmp447 # Offset: 302
    00000130: 	movq	-0x10(%rsi), %rdx
    00000134: 	addq	$0x3, %rax
    00000138: 	movq	%rdx, 0x10(%rdi)
    0000013c: 	cmpq	%rax, %r9
    0000013f: 	jle	.Ltmp447 # Offset: 319
    00000141: 	movq	-0x18(%rsi), %rax
    00000145: 	movq	%rax, 0x18(%rdi)
.Ltmp447:
    00000149: 	retq # Offset: 329
    0000014a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp448:
    00000150: 	movq	%rax, %rdi
    00000153: 	xorl	%eax, %eax
    00000155: 	jmp	.Ltmp452 # Offset: 341
DWARF CFI Instructions:
    <empty>
End of Function "_Z18fast_reverse_copy4IPmS0_EvT_S1_T0_"

Binary Function "_ZSt7reverseI20BidirectionalPointerIdEEvT_S2_" after disassembly {
  Number      : 121
  State       : disassembled
  Address     : 0x8590
  Size        : 0x34
  MaxSize     : 0x40
  Offset      : 0x8590
  Section     : .text
  Orc Section : .local.text._ZSt7reverseI20BidirectionalPointerIdEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0120:
    00000000: 	endbr64
    00000004: 	jmp	.Ltmp453 # Offset: 4
    00000006: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp455:
    00000010: 	subq	$0x8, %rsi
    00000014: 	cmpq	%rsi, %rdi
    00000017: 	je	.Ltmp454 # Offset: 23
    00000019: 	movsd	(%rdi), %xmm0
    0000001d: 	movsd	(%rsi), %xmm1
    00000021: 	addq	$0x8, %rdi
    00000025: 	movsd	%xmm1, -0x8(%rdi)
    0000002a: 	movsd	%xmm0, (%rsi)
.Ltmp453:
    0000002e: 	cmpq	%rsi, %rdi
    00000031: 	jne	.Ltmp455 # Offset: 49
.Ltmp454:
    00000033: 	retq # Offset: 51
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt7reverseI20BidirectionalPointerIdEEvT_S2_"

Binary Function "_Z17my_simple_reverseI20BidirectionalPointerIdEEvT_S2_" after disassembly {
  Number      : 122
  State       : disassembled
  Address     : 0x85d0
  Size        : 0x34
  MaxSize     : 0x40
  Offset      : 0x85d0
  Section     : .text
  Orc Section : .local.text._Z17my_simple_reverseI20BidirectionalPointerIdEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0121:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp456 # Offset: 7
    00000009: 	nopl	(%rax) # Size: 7
.Ltmp457:
    00000010: 	subq	$0x8, %rsi
    00000014: 	cmpq	%rdi, %rsi
    00000017: 	je	.Ltmp456 # Offset: 23
    00000019: 	movsd	(%rsi), %xmm1
    0000001d: 	movsd	(%rdi), %xmm0
    00000021: 	addq	$0x8, %rdi
    00000025: 	movsd	%xmm1, -0x8(%rdi)
    0000002a: 	movsd	%xmm0, (%rsi)
    0000002e: 	cmpq	%rdi, %rsi
    00000031: 	jne	.Ltmp457 # Offset: 49
.Ltmp456:
    00000033: 	retq # Offset: 51
DWARF CFI Instructions:
    <empty>
End of Function "_Z17my_simple_reverseI20BidirectionalPointerIdEEvT_S2_"

Binary Function "_Z15my_fast_reverseI20BidirectionalPointerIdEEvT_S2_" after disassembly {
  Number      : 123
  State       : disassembled
  Address     : 0x8610
  Size        : 0x34
  MaxSize     : 0x40
  Offset      : 0x8610
  Section     : .text
  Orc Section : .local.text._Z15my_fast_reverseI20BidirectionalPointerIdEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0122:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp458 # Offset: 7
    00000009: 	nopl	(%rax) # Size: 7
.Ltmp459:
    00000010: 	subq	$0x8, %rsi
    00000014: 	cmpq	%rdi, %rsi
    00000017: 	je	.Ltmp458 # Offset: 23
    00000019: 	movsd	(%rsi), %xmm1
    0000001d: 	movsd	(%rdi), %xmm0
    00000021: 	addq	$0x8, %rdi
    00000025: 	movsd	%xmm1, -0x8(%rdi)
    0000002a: 	movsd	%xmm0, (%rsi)
    0000002e: 	cmpq	%rdi, %rsi
    00000031: 	jne	.Ltmp459 # Offset: 49
.Ltmp458:
    00000033: 	retq # Offset: 51
DWARF CFI Instructions:
    <empty>
End of Function "_Z15my_fast_reverseI20BidirectionalPointerIdEEvT_S2_"

Binary Function "_ZSt7reverseIPdEvT_S1_" after disassembly {
  Number      : 124
  State       : disassembled
  Address     : 0x8650
  Size        : 0xe8
  MaxSize     : 0xf0
  Offset      : 0x8650
  Section     : .text
  Orc Section : .local.text._ZSt7reverseIPdEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0123:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp460 # Offset: 10
    00000010: 	leaq	-0x8(%rsi), %rcx
    00000014: 	cmpq	%rcx, %rdi
    00000017: 	jae	.Ltmp460 # Offset: 23
    0000001d: 	movq	%rdi, %rdx
    00000020: 	leaq	-0x9(%rsi), %rdi
    00000024: 	movq	%rsi, %r10
    00000027: 	subq	%rax, %rdi
    0000002a: 	movq	%rdi, %r8
    0000002d: 	shrq	$0x4, %r8
    00000031: 	addq	$0x1, %r8
    00000035: 	leaq	(,%r8,8), %r9
    0000003d: 	subq	%r9, %r10
    00000040: 	leaq	(%rax,%r9), %r11
    00000044: 	cmpq	%r10, %r11
    00000047: 	setbe	%r9b
    0000004b: 	cmpq	%rsi, %rax
    0000004e: 	setae	%r10b
    00000052: 	orb	%r10b, %r9b
    00000055: 	je	.Ltmp461 # Offset: 85
    00000057: 	cmpq	$0x1f, %rdi
    0000005b: 	jbe	.Ltmp461 # Offset: 91
    0000005d: 	movq	%r8, %rdi
    00000060: 	subq	$0x10, %rsi
    00000064: 	shrq	%rdi
    00000067: 	shlq	$0x4, %rdi
    0000006b: 	addq	%rax, %rdi
    0000006e: 	nop # Size: 2
.Ltmp462:
    00000070: 	movupd	(%rsi), %xmm1
    00000074: 	movupd	(%rdx), %xmm0
    00000078: 	addq	$0x10, %rdx
    0000007c: 	subq	$0x10, %rsi
    00000080: 	shufpd	$0x1, %xmm1, %xmm1
    00000085: 	shufpd	$0x1, %xmm0, %xmm0
    0000008a: 	movups	%xmm1, -0x10(%rdx)
    0000008e: 	movups	%xmm0, 0x10(%rsi)
    00000092: 	cmpq	%rdi, %rdx
    00000095: 	jne	.Ltmp462 # Offset: 149
    00000097: 	movq	%r8, %rdx
    0000009a: 	andq	$-0x2, %rdx
    0000009e: 	leaq	(,%rdx,8), %rsi
    000000a6: 	addq	%rsi, %rax
    000000a9: 	subq	%rsi, %rcx
    000000ac: 	cmpq	%rdx, %r8
    000000af: 	je	.Ltmp460 # Offset: 175
    000000b1: 	movsd	(%rax), %xmm0
    000000b5: 	movsd	(%rcx), %xmm1
    000000b9: 	movsd	%xmm1, (%rax)
    000000bd: 	movsd	%xmm0, (%rcx)
    000000c1: 	retq # Offset: 193
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp461:
    000000c8: 	movsd	(%rax), %xmm0
    000000cc: 	movsd	(%rcx), %xmm1
    000000d0: 	addq	$0x8, %rax
    000000d4: 	subq	$0x8, %rcx
    000000d8: 	movsd	%xmm1, -0x8(%rax)
    000000dd: 	movsd	%xmm0, 0x8(%rcx)
    000000e2: 	cmpq	%rcx, %rax
    000000e5: 	jb	.Ltmp461 # Offset: 229
.Ltmp460:
    000000e7: 	retq # Offset: 231
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt7reverseIPdEvT_S1_"

Binary Function "_Z17my_simple_reverseIPdEvT_S1_" after disassembly {
  Number      : 125
  State       : disassembled
  Address     : 0x8740
  Size        : 0x101
  MaxSize     : 0x110
  Offset      : 0x8740
  Section     : .text
  Orc Section : .local.text._Z17my_simple_reverseIPdEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0124:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp463 # Offset: 10
    00000010: 	movq	%rsi, %rdx
    00000013: 	subq	%rdi, %rdx
    00000016: 	movq	%rdx, %rcx
    00000019: 	movq	%rdx, %rdi
    0000001c: 	sarq	$0x3, %rcx
    00000020: 	shrq	$0x3f, %rdi
    00000024: 	addq	%rcx, %rdi
    00000027: 	leaq	-0x8(%rsi), %rcx
    0000002b: 	sarq	%rdi
    0000002e: 	cmpq	$0x8, %rdx
    00000032: 	jle	.Ltmp463 # Offset: 50
    00000038: 	leaq	(,%rdi,8), %r8
    00000040: 	movq	%rsi, %r9
    00000043: 	subq	%r8, %r9
    00000046: 	leaq	(%rax,%r8), %r10
    0000004a: 	cmpq	%r9, %r10
    0000004d: 	setbe	%r8b
    00000051: 	cmpq	%rsi, %rax
    00000054: 	setae	%r9b
    00000058: 	orb	%r9b, %r8b
    0000005b: 	je	.Ltmp464 # Offset: 91
    0000005d: 	cmpq	$0x28, %rdx
    00000061: 	jle	.Ltmp464 # Offset: 97
    00000063: 	movq	%rdi, %r8
    00000066: 	movq	%rax, %rdx
    00000069: 	subq	$0x10, %rsi
    0000006d: 	shrq	%r8
    00000070: 	shlq	$0x4, %r8
    00000074: 	addq	%rax, %r8
    00000077: 	nopw	(%rax,%rax) # Size: 9
.Ltmp465:
    00000080: 	movupd	(%rsi), %xmm1
    00000084: 	movupd	(%rdx), %xmm0
    00000088: 	addq	$0x10, %rdx
    0000008c: 	subq	$0x10, %rsi
    00000090: 	shufpd	$0x1, %xmm1, %xmm1
    00000095: 	shufpd	$0x1, %xmm0, %xmm0
    0000009a: 	movups	%xmm1, -0x10(%rdx)
    0000009e: 	movups	%xmm0, 0x10(%rsi)
    000000a2: 	cmpq	%r8, %rdx
    000000a5: 	jne	.Ltmp465 # Offset: 165
    000000a7: 	movq	%rdi, %rsi
    000000aa: 	andq	$-0x2, %rsi
    000000ae: 	leaq	(,%rsi,8), %r8
    000000b6: 	addq	%r8, %rax
    000000b9: 	subq	%r8, %rcx
    000000bc: 	cmpq	%rsi, %rdi
    000000bf: 	je	.Ltmp463 # Offset: 191
    000000c1: 	movsd	(%rax), %xmm0
    000000c5: 	movsd	(%rcx), %xmm1
    000000c9: 	movsd	%xmm1, (%rax)
    000000cd: 	movsd	%xmm0, (%rcx)
    000000d1: 	retq # Offset: 209
    000000d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp464:
    000000d8: 	xorl	%edx, %edx
    000000da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp466:
    000000e0: 	movsd	(%rcx), %xmm1
    000000e4: 	movsd	(%rax,%rdx,8), %xmm0
    000000e9: 	subq	$0x8, %rcx
    000000ed: 	movsd	%xmm1, (%rax,%rdx,8)
    000000f2: 	addq	$0x1, %rdx
    000000f6: 	movsd	%xmm0, 0x8(%rcx)
    000000fb: 	cmpq	%rdx, %rdi
    000000fe: 	jg	.Ltmp466 # Offset: 254
.Ltmp463:
    00000100: 	retq # Offset: 256
DWARF CFI Instructions:
    <empty>
End of Function "_Z17my_simple_reverseIPdEvT_S1_"

Binary Function "_Z13fast_reverse2IPdEvT_S1_" after disassembly {
  Number      : 126
  State       : disassembled
  Address     : 0x8850
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0x8850
  Section     : .text
  Orc Section : .local.text._Z13fast_reverse2IPdEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0125:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp467 # Offset: 10
    00000010: 	movq	%rsi, %rax
    00000013: 	subq	%rdi, %rax
    00000016: 	leaq	-0x8(%rsi), %rdi
    0000001a: 	movq	%rax, %rdx
    0000001d: 	movq	%rax, %r9
    00000020: 	sarq	$0x3, %rdx
    00000024: 	shrq	$0x3f, %r9
    00000028: 	addq	%rdx, %r9
    0000002b: 	sarq	%r9
    0000002e: 	cmpq	$0x38, %rax
    00000032: 	jle	.Ltmp468 # Offset: 50
    00000038: 	leaq	-0x4(%r9), %rax
    0000003c: 	movq	%rcx, %rdx
    0000003f: 	shrq	$0x2, %rax
    00000043: 	movq	%rax, %r8
    00000046: 	negq	%rax
    00000049: 	shlq	$0x5, %rax
    0000004d: 	leaq	-0x28(%rsi,%rax), %rsi
    00000052: 	movq	%rdi, %rax
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp469:
    00000058: 	movsd	(%rdx), %xmm0
    0000005c: 	movsd	(%rax), %xmm1
    00000060: 	subq	$0x20, %rax
    00000064: 	addq	$0x20, %rdx
    00000068: 	movsd	%xmm1, -0x20(%rdx)
    0000006d: 	movsd	0x18(%rax), %xmm1
    00000072: 	movsd	%xmm0, 0x20(%rax)
    00000077: 	movsd	-0x18(%rdx), %xmm0
    0000007c: 	movsd	%xmm1, -0x18(%rdx)
    00000081: 	movsd	0x10(%rax), %xmm1
    00000086: 	movsd	%xmm0, 0x18(%rax)
    0000008b: 	movsd	-0x10(%rdx), %xmm0
    00000090: 	movsd	%xmm1, -0x10(%rdx)
    00000095: 	movsd	0x8(%rax), %xmm1
    0000009a: 	movsd	%xmm0, 0x10(%rax)
    0000009f: 	movsd	-0x8(%rdx), %xmm0
    000000a4: 	movsd	%xmm1, -0x8(%rdx)
    000000a9: 	movsd	%xmm0, 0x8(%rax)
    000000ae: 	cmpq	%rsi, %rax
    000000b1: 	jne	.Ltmp469 # Offset: 177
    000000b3: 	leaq	0x1(%r8), %rax
    000000b7: 	leaq	(,%rax,4), %rdx
    000000bf: 	negq	%rax
    000000c2: 	shlq	$0x5, %rax
    000000c6: 	addq	%rax, %rdi
    000000c9: 	subq	%rax, %rcx
.Ltmp472:
    000000cc: 	cmpq	%rdx, %r9
    000000cf: 	jle	.Ltmp467 # Offset: 207
    000000d5: 	movq	%r9, %rax
    000000d8: 	movq	%rdi, %r10
    000000db: 	subq	%rdx, %rax
    000000de: 	leaq	(,%rax,8), %rsi
    000000e6: 	subq	%rsi, %r10
    000000e9: 	leaq	(%rcx,%rsi), %r8
    000000ed: 	leaq	0x8(%r10), %rsi
    000000f1: 	cmpq	%rsi, %r8
    000000f4: 	leaq	0x8(%rdi), %r8
    000000f8: 	setbe	%sil
    000000fc: 	cmpq	%r8, %rcx
    000000ff: 	setae	%r8b
    00000103: 	orb	%r8b, %sil
    00000106: 	je	.Ltmp470 # Offset: 262
    00000108: 	leaq	-0x1(%rax), %rsi
    0000010c: 	cmpq	$0x1, %rsi
    00000110: 	jbe	.Ltmp470 # Offset: 272
    00000112: 	movupd	(%rcx), %xmm0
    00000116: 	movupd	-0x8(%rdi), %xmm1
    0000011b: 	movq	%rax, %rdx
    0000011e: 	shrq	%rdx
    00000121: 	shufpd	$0x1, %xmm1, %xmm1
    00000126: 	shufpd	$0x1, %xmm0, %xmm0
    0000012b: 	movups	%xmm1, (%rcx)
    0000012e: 	movups	%xmm0, -0x8(%rdi)
    00000132: 	cmpq	$0x1, %rdx
    00000136: 	je	.Ltmp471 # Offset: 310
    00000138: 	movupd	0x10(%rcx), %xmm0
    0000013d: 	movupd	-0x18(%rdi), %xmm1
    00000142: 	shufpd	$0x1, %xmm0, %xmm0
    00000147: 	shufpd	$0x1, %xmm1, %xmm1
    0000014c: 	movups	%xmm1, 0x10(%rcx)
    00000150: 	movups	%xmm0, -0x18(%rdi)
.Ltmp471:
    00000154: 	movq	%rax, %rdx
    00000157: 	andq	$-0x2, %rdx
    0000015b: 	leaq	(,%rdx,8), %rsi
    00000163: 	addq	%rsi, %rcx
    00000166: 	subq	%rsi, %rdi
    00000169: 	cmpq	%rdx, %rax
    0000016c: 	je	.Ltmp467 # Offset: 364
    0000016e: 	movsd	(%rcx), %xmm0
    00000172: 	movsd	(%rdi), %xmm1
    00000176: 	movsd	%xmm1, (%rcx)
    0000017a: 	movsd	%xmm0, (%rdi)
    0000017e: 	retq # Offset: 382
    0000017f: 	nop # Size: 1
.Ltmp470:
    00000180: 	movsd	(%rcx), %xmm0
    00000184: 	movsd	(%rdi), %xmm1
    00000188: 	leaq	0x1(%rdx), %rax
    0000018c: 	movsd	%xmm1, (%rcx)
    00000190: 	movsd	%xmm0, (%rdi)
    00000194: 	cmpq	%rax, %r9
    00000197: 	jle	.Ltmp467 # Offset: 407
    00000199: 	movsd	0x8(%rcx), %xmm0
    0000019e: 	movsd	-0x8(%rdi), %xmm1
    000001a3: 	leaq	0x2(%rdx), %rax
    000001a7: 	movsd	%xmm1, 0x8(%rcx)
    000001ac: 	movsd	%xmm0, -0x8(%rdi)
    000001b1: 	cmpq	%rax, %r9
    000001b4: 	jle	.Ltmp467 # Offset: 436
    000001b6: 	movsd	0x10(%rcx), %xmm0
    000001bb: 	movsd	-0x10(%rdi), %xmm1
    000001c0: 	addq	$0x3, %rdx
    000001c4: 	movsd	%xmm1, 0x10(%rcx)
    000001c9: 	movsd	%xmm0, -0x10(%rdi)
    000001ce: 	cmpq	%rdx, %r9
    000001d1: 	jle	.Ltmp467 # Offset: 465
    000001d3: 	movsd	0x18(%rcx), %xmm0
    000001d8: 	movsd	-0x18(%rdi), %xmm1
    000001dd: 	movsd	%xmm1, 0x18(%rcx)
    000001e2: 	movsd	%xmm0, -0x18(%rdi)
.Ltmp467:
    000001e7: 	retq # Offset: 487
    000001e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp468:
    000001f0: 	xorl	%edx, %edx
    000001f2: 	jmp	.Ltmp472 # Offset: 498
DWARF CFI Instructions:
    <empty>
End of Function "_Z13fast_reverse2IPdEvT_S1_"

Binary Function "_Z13fast_reverse3IPdEvT_S1_" after disassembly {
  Number      : 127
  State       : disassembled
  Address     : 0x8a50
  Size        : 0x317
  MaxSize     : 0x320
  Offset      : 0x8a50
  Section     : .text
  Orc Section : .local.text._Z13fast_reverse3IPdEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0126:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp473 # Offset: 10
    00000010: 	movq	%rsi, %rax
    00000013: 	subq	%rdi, %rax
    00000016: 	leaq	-0x8(%rsi), %rdi
    0000001a: 	movq	%rax, %rdx
    0000001d: 	movq	%rax, %r8
    00000020: 	sarq	$0x3, %rdx
    00000024: 	shrq	$0x3f, %r8
    00000028: 	addq	%rdx, %r8
    0000002b: 	sarq	%r8
    0000002e: 	cmpq	$0x78, %rax
    00000032: 	jle	.Ltmp474 # Offset: 50
    00000038: 	leaq	-0x8(%r8), %r9
    0000003c: 	movq	%rcx, %rdx
    0000003f: 	shrq	$0x3, %r9
    00000043: 	movq	%r9, %rax
    00000046: 	negq	%rax
    00000049: 	shlq	$0x6, %rax
    0000004d: 	leaq	-0x48(%rsi,%rax), %rsi
    00000052: 	movq	%rdi, %rax
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp475:
    00000058: 	movsd	(%rdx), %xmm0
    0000005c: 	movsd	(%rax), %xmm1
    00000060: 	subq	$0x40, %rax
    00000064: 	addq	$0x40, %rdx
    00000068: 	movsd	%xmm1, -0x40(%rdx)
    0000006d: 	movsd	0x38(%rax), %xmm1
    00000072: 	movsd	%xmm0, 0x40(%rax)
    00000077: 	movsd	-0x38(%rdx), %xmm0
    0000007c: 	movsd	%xmm1, -0x38(%rdx)
    00000081: 	movsd	0x30(%rax), %xmm1
    00000086: 	movsd	%xmm0, 0x38(%rax)
    0000008b: 	movsd	-0x30(%rdx), %xmm0
    00000090: 	movsd	%xmm1, -0x30(%rdx)
    00000095: 	movsd	0x28(%rax), %xmm1
    0000009a: 	movsd	%xmm0, 0x30(%rax)
    0000009f: 	movsd	-0x28(%rdx), %xmm0
    000000a4: 	movsd	%xmm1, -0x28(%rdx)
    000000a9: 	movsd	0x20(%rax), %xmm1
    000000ae: 	movsd	%xmm0, 0x28(%rax)
    000000b3: 	movsd	-0x20(%rdx), %xmm0
    000000b8: 	movsd	%xmm1, -0x20(%rdx)
    000000bd: 	movsd	0x18(%rax), %xmm1
    000000c2: 	movsd	%xmm0, 0x20(%rax)
    000000c7: 	movsd	-0x18(%rdx), %xmm0
    000000cc: 	movsd	%xmm1, -0x18(%rdx)
    000000d1: 	movsd	0x10(%rax), %xmm1
    000000d6: 	movsd	%xmm0, 0x18(%rax)
    000000db: 	movsd	-0x10(%rdx), %xmm0
    000000e0: 	movsd	%xmm1, -0x10(%rdx)
    000000e5: 	movsd	0x8(%rax), %xmm1
    000000ea: 	movsd	%xmm0, 0x10(%rax)
    000000ef: 	movsd	-0x8(%rdx), %xmm0
    000000f4: 	movsd	%xmm1, -0x8(%rdx)
    000000f9: 	movsd	%xmm0, 0x8(%rax)
    000000fe: 	cmpq	%rsi, %rax
    00000101: 	jne	.Ltmp475 # Offset: 257
    00000107: 	movq	%r9, %rax
    0000010a: 	leaq	0x8(,%r9,8), %rdx
    00000112: 	notq	%rax
    00000115: 	shlq	$0x6, %rax
    00000119: 	addq	%rax, %rdi
    0000011c: 	subq	%rax, %rcx
.Ltmp478:
    0000011f: 	cmpq	%rdx, %r8
    00000122: 	jle	.Ltmp473 # Offset: 290
    00000128: 	movq	%r8, %rax
    0000012b: 	movq	%rdi, %r10
    0000012e: 	subq	%rdx, %rax
    00000131: 	leaq	(,%rax,8), %rsi
    00000139: 	subq	%rsi, %r10
    0000013c: 	leaq	(%rcx,%rsi), %r9
    00000140: 	leaq	0x8(%r10), %rsi
    00000144: 	cmpq	%rsi, %r9
    00000147: 	leaq	0x8(%rdi), %r9
    0000014b: 	setbe	%sil
    0000014f: 	cmpq	%r9, %rcx
    00000152: 	setae	%r9b
    00000156: 	orb	%r9b, %sil
    00000159: 	je	.Ltmp476 # Offset: 345
    0000015f: 	leaq	-0x1(%rax), %rsi
    00000163: 	cmpq	$0x1, %rsi
    00000167: 	jbe	.Ltmp476 # Offset: 359
    0000016d: 	movupd	(%rcx), %xmm0
    00000171: 	movupd	-0x8(%rdi), %xmm1
    00000176: 	movq	%rax, %rdx
    00000179: 	shrq	%rdx
    0000017c: 	shufpd	$0x1, %xmm1, %xmm1
    00000181: 	shufpd	$0x1, %xmm0, %xmm0
    00000186: 	movups	%xmm1, (%rcx)
    00000189: 	movups	%xmm0, -0x8(%rdi)
    0000018d: 	cmpq	$0x1, %rdx
    00000191: 	je	.Ltmp477 # Offset: 401
    00000193: 	movupd	0x10(%rcx), %xmm0
    00000198: 	movupd	-0x18(%rdi), %xmm1
    0000019d: 	shufpd	$0x1, %xmm0, %xmm0
    000001a2: 	shufpd	$0x1, %xmm1, %xmm1
    000001a7: 	movups	%xmm1, 0x10(%rcx)
    000001ab: 	movups	%xmm0, -0x18(%rdi)
    000001af: 	cmpq	$0x2, %rdx
    000001b3: 	je	.Ltmp477 # Offset: 435
    000001b5: 	movupd	0x20(%rcx), %xmm0
    000001ba: 	movupd	-0x28(%rdi), %xmm1
    000001bf: 	shufpd	$0x1, %xmm0, %xmm0
    000001c4: 	shufpd	$0x1, %xmm1, %xmm1
    000001c9: 	movups	%xmm1, 0x20(%rcx)
    000001cd: 	movups	%xmm0, -0x28(%rdi)
    000001d1: 	cmpq	$0x3, %rdx
    000001d5: 	je	.Ltmp477 # Offset: 469
    000001d7: 	movupd	0x30(%rcx), %xmm0
    000001dc: 	movupd	-0x38(%rdi), %xmm1
    000001e1: 	shufpd	$0x1, %xmm0, %xmm0
    000001e6: 	shufpd	$0x1, %xmm1, %xmm1
    000001eb: 	movups	%xmm1, 0x30(%rcx)
    000001ef: 	movups	%xmm0, -0x38(%rdi)
.Ltmp477:
    000001f3: 	movq	%rax, %rdx
    000001f6: 	andq	$-0x2, %rdx
    000001fa: 	leaq	(,%rdx,8), %rsi
    00000202: 	addq	%rsi, %rcx
    00000205: 	subq	%rsi, %rdi
    00000208: 	cmpq	%rdx, %rax
    0000020b: 	je	.Ltmp473 # Offset: 523
    00000211: 	movsd	(%rcx), %xmm0
    00000215: 	movsd	(%rdi), %xmm1
    00000219: 	movsd	%xmm1, (%rcx)
    0000021d: 	movsd	%xmm0, (%rdi)
    00000221: 	retq # Offset: 545
    00000222: 	nopw	(%rax,%rax) # Size: 6
.Ltmp476:
    00000228: 	movsd	(%rcx), %xmm0
    0000022c: 	movsd	(%rdi), %xmm1
    00000230: 	leaq	0x1(%rdx), %rax
    00000234: 	movsd	%xmm1, (%rcx)
    00000238: 	movsd	%xmm0, (%rdi)
    0000023c: 	cmpq	%rax, %r8
    0000023f: 	jle	.Ltmp473 # Offset: 575
    00000245: 	movsd	0x8(%rcx), %xmm0
    0000024a: 	movsd	-0x8(%rdi), %xmm1
    0000024f: 	leaq	0x2(%rdx), %rax
    00000253: 	movsd	%xmm1, 0x8(%rcx)
    00000258: 	movsd	%xmm0, -0x8(%rdi)
    0000025d: 	cmpq	%rax, %r8
    00000260: 	jle	.Ltmp473 # Offset: 608
    00000266: 	movsd	0x10(%rcx), %xmm0
    0000026b: 	movsd	-0x10(%rdi), %xmm1
    00000270: 	leaq	0x3(%rdx), %rax
    00000274: 	movsd	%xmm1, 0x10(%rcx)
    00000279: 	movsd	%xmm0, -0x10(%rdi)
    0000027e: 	cmpq	%rax, %r8
    00000281: 	jle	.Ltmp473 # Offset: 641
    00000287: 	movsd	0x18(%rcx), %xmm0
    0000028c: 	movsd	-0x18(%rdi), %xmm1
    00000291: 	leaq	0x4(%rdx), %rax
    00000295: 	movsd	%xmm1, 0x18(%rcx)
    0000029a: 	movsd	%xmm0, -0x18(%rdi)
    0000029f: 	cmpq	%rax, %r8
    000002a2: 	jle	.Ltmp473 # Offset: 674
    000002a4: 	movsd	0x20(%rcx), %xmm0
    000002a9: 	movsd	-0x20(%rdi), %xmm1
    000002ae: 	leaq	0x5(%rdx), %rax
    000002b2: 	movsd	%xmm1, 0x20(%rcx)
    000002b7: 	movsd	%xmm0, -0x20(%rdi)
    000002bc: 	cmpq	%rax, %r8
    000002bf: 	jle	.Ltmp473 # Offset: 703
    000002c1: 	movsd	0x28(%rcx), %xmm0
    000002c6: 	movsd	-0x28(%rdi), %xmm1
    000002cb: 	leaq	0x6(%rdx), %rax
    000002cf: 	movsd	%xmm1, 0x28(%rcx)
    000002d4: 	movsd	%xmm0, -0x28(%rdi)
    000002d9: 	cmpq	%rax, %r8
    000002dc: 	jle	.Ltmp473 # Offset: 732
    000002de: 	movsd	0x30(%rcx), %xmm0
    000002e3: 	movsd	-0x30(%rdi), %xmm1
    000002e8: 	addq	$0x7, %rdx
    000002ec: 	movsd	%xmm1, 0x30(%rcx)
    000002f1: 	movsd	%xmm0, -0x30(%rdi)
    000002f6: 	cmpq	%rdx, %r8
    000002f9: 	jle	.Ltmp473 # Offset: 761
    000002fb: 	movsd	0x38(%rcx), %xmm0
    00000300: 	movsd	-0x38(%rdi), %xmm1
    00000305: 	movsd	%xmm1, 0x38(%rcx)
    0000030a: 	movsd	%xmm0, -0x38(%rdi)
.Ltmp473:
    0000030f: 	retq # Offset: 783
.Ltmp474:
    00000310: 	xorl	%edx, %edx
    00000312: 	jmp	.Ltmp478 # Offset: 786
DWARF CFI Instructions:
    <empty>
End of Function "_Z13fast_reverse3IPdEvT_S1_"

Binary Function "_Z13fast_reverse4IPdEvT_S1_" after disassembly {
  Number      : 128
  State       : disassembled
  Address     : 0x8d70
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0x8d70
  Section     : .text
  Orc Section : .local.text._Z13fast_reverse4IPdEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0127:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp479 # Offset: 10
    00000010: 	movq	%rsi, %rax
    00000013: 	subq	%rdi, %rax
    00000016: 	leaq	-0x8(%rsi), %rdi
    0000001a: 	movq	%rax, %rdx
    0000001d: 	movq	%rax, %r8
    00000020: 	sarq	$0x3, %rdx
    00000024: 	shrq	$0x3f, %r8
    00000028: 	addq	%rdx, %r8
    0000002b: 	sarq	%r8
    0000002e: 	cmpq	$0x38, %rax
    00000032: 	jle	.Ltmp480 # Offset: 50
    00000038: 	leaq	-0x4(%r8), %r9
    0000003c: 	movq	%rcx, %rdx
    0000003f: 	shrq	$0x2, %r9
    00000043: 	movq	%r9, %rax
    00000046: 	negq	%rax
    00000049: 	shlq	$0x5, %rax
    0000004d: 	leaq	-0x28(%rsi,%rax), %rsi
    00000052: 	movq	%rdi, %rax
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp481:
    00000058: 	movsd	(%rdx), %xmm0
    0000005c: 	movsd	(%rax), %xmm1
    00000060: 	subq	$0x20, %rax
    00000064: 	addq	$0x20, %rdx
    00000068: 	movsd	%xmm1, -0x20(%rdx)
    0000006d: 	movsd	0x18(%rax), %xmm1
    00000072: 	movsd	%xmm0, 0x20(%rax)
    00000077: 	movsd	-0x18(%rdx), %xmm0
    0000007c: 	movsd	%xmm1, -0x18(%rdx)
    00000081: 	movsd	0x10(%rax), %xmm1
    00000086: 	movsd	%xmm0, 0x18(%rax)
    0000008b: 	movsd	-0x10(%rdx), %xmm0
    00000090: 	movsd	%xmm1, -0x10(%rdx)
    00000095: 	movsd	0x8(%rax), %xmm1
    0000009a: 	movsd	%xmm0, 0x10(%rax)
    0000009f: 	movsd	-0x8(%rdx), %xmm0
    000000a4: 	movsd	%xmm1, -0x8(%rdx)
    000000a9: 	movsd	%xmm0, 0x8(%rax)
    000000ae: 	cmpq	%rsi, %rax
    000000b1: 	jne	.Ltmp481 # Offset: 177
    000000b3: 	movq	%r9, %rax
    000000b6: 	leaq	0x4(,%r9,4), %rdx
    000000be: 	notq	%rax
    000000c1: 	shlq	$0x5, %rax
    000000c5: 	addq	%rax, %rdi
    000000c8: 	subq	%rax, %rcx
.Ltmp484:
    000000cb: 	cmpq	%rdx, %r8
    000000ce: 	jle	.Ltmp479 # Offset: 206
    000000d4: 	movq	%r8, %rax
    000000d7: 	movq	%rdi, %r10
    000000da: 	subq	%rdx, %rax
    000000dd: 	leaq	(,%rax,8), %rsi
    000000e5: 	subq	%rsi, %r10
    000000e8: 	leaq	(%rcx,%rsi), %r9
    000000ec: 	leaq	0x8(%r10), %rsi
    000000f0: 	cmpq	%rsi, %r9
    000000f3: 	leaq	0x8(%rdi), %r9
    000000f7: 	setbe	%sil
    000000fb: 	cmpq	%r9, %rcx
    000000fe: 	setae	%r9b
    00000102: 	orb	%r9b, %sil
    00000105: 	je	.Ltmp482 # Offset: 261
    00000107: 	leaq	-0x1(%rax), %rsi
    0000010b: 	cmpq	$0x1, %rsi
    0000010f: 	jbe	.Ltmp482 # Offset: 271
    00000111: 	movupd	(%rcx), %xmm0
    00000115: 	movupd	-0x8(%rdi), %xmm1
    0000011a: 	movq	%rax, %rdx
    0000011d: 	shrq	%rdx
    00000120: 	shufpd	$0x1, %xmm1, %xmm1
    00000125: 	shufpd	$0x1, %xmm0, %xmm0
    0000012a: 	movups	%xmm1, (%rcx)
    0000012d: 	movups	%xmm0, -0x8(%rdi)
    00000131: 	cmpq	$0x1, %rdx
    00000135: 	je	.Ltmp483 # Offset: 309
    00000137: 	movupd	0x10(%rcx), %xmm0
    0000013c: 	movupd	-0x18(%rdi), %xmm1
    00000141: 	shufpd	$0x1, %xmm0, %xmm0
    00000146: 	shufpd	$0x1, %xmm1, %xmm1
    0000014b: 	movups	%xmm1, 0x10(%rcx)
    0000014f: 	movups	%xmm0, -0x18(%rdi)
.Ltmp483:
    00000153: 	movq	%rax, %rdx
    00000156: 	andq	$-0x2, %rdx
    0000015a: 	leaq	(,%rdx,8), %rsi
    00000162: 	addq	%rsi, %rcx
    00000165: 	subq	%rsi, %rdi
    00000168: 	cmpq	%rdx, %rax
    0000016b: 	je	.Ltmp479 # Offset: 363
    0000016d: 	movsd	(%rcx), %xmm0
    00000171: 	movsd	(%rdi), %xmm1
    00000175: 	movsd	%xmm1, (%rcx)
    00000179: 	movsd	%xmm0, (%rdi)
    0000017d: 	retq # Offset: 381
    0000017e: 	nop # Size: 2
.Ltmp482:
    00000180: 	movsd	(%rcx), %xmm0
    00000184: 	movsd	(%rdi), %xmm1
    00000188: 	leaq	0x1(%rdx), %rax
    0000018c: 	movsd	%xmm1, (%rcx)
    00000190: 	movsd	%xmm0, (%rdi)
    00000194: 	cmpq	%rax, %r8
    00000197: 	jle	.Ltmp479 # Offset: 407
    00000199: 	movsd	0x8(%rcx), %xmm0
    0000019e: 	movsd	-0x8(%rdi), %xmm1
    000001a3: 	leaq	0x2(%rdx), %rax
    000001a7: 	movsd	%xmm1, 0x8(%rcx)
    000001ac: 	movsd	%xmm0, -0x8(%rdi)
    000001b1: 	cmpq	%rax, %r8
    000001b4: 	jle	.Ltmp479 # Offset: 436
    000001b6: 	movsd	0x10(%rcx), %xmm0
    000001bb: 	movsd	-0x10(%rdi), %xmm1
    000001c0: 	addq	$0x3, %rdx
    000001c4: 	movsd	%xmm1, 0x10(%rcx)
    000001c9: 	movsd	%xmm0, -0x10(%rdi)
    000001ce: 	cmpq	%rdx, %r8
    000001d1: 	jle	.Ltmp479 # Offset: 465
    000001d3: 	movsd	0x18(%rcx), %xmm0
    000001d8: 	movsd	-0x18(%rdi), %xmm1
    000001dd: 	movsd	%xmm1, 0x18(%rcx)
    000001e2: 	movsd	%xmm0, -0x18(%rdi)
.Ltmp479:
    000001e7: 	retq # Offset: 487
    000001e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp480:
    000001f0: 	xorl	%edx, %edx
    000001f2: 	jmp	.Ltmp484 # Offset: 498
DWARF CFI Instructions:
    <empty>
End of Function "_Z13fast_reverse4IPdEvT_S1_"

Binary Function "_ZSt12reverse_copyI20BidirectionalPointerIdES1_ET0_T_S3_S2_" after disassembly {
  Number      : 129
  State       : disassembled
  Address     : 0x8f70
  Size        : 0xd7
  MaxSize     : 0xe0
  Offset      : 0x8f70
  Section     : .text
  Orc Section : .local.text._ZSt12reverse_copyI20BidirectionalPointerIdES1_ET0_T_S3_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0128:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movq	%rsi, %rax
    0000000a: 	movq	%rsi, %rdi
    0000000d: 	cmpq	%rcx, %rsi
    00000010: 	je	.Ltmp485 # Offset: 16
    00000016: 	movq	%rsi, %r8
    00000019: 	subq	%rcx, %r8
    0000001c: 	leaq	-0x8(%r8), %r10
    00000020: 	addq	%rdx, %r8
    00000023: 	movq	%r10, %rsi
    00000026: 	shrq	$0x3, %rsi
    0000002a: 	leaq	0x1(%rsi), %r9
    0000002e: 	notq	%rsi
    00000031: 	leaq	(%rdi,%rsi,8), %rsi
    00000035: 	cmpq	%rsi, %r8
    00000038: 	setbe	%sil
    0000003c: 	cmpq	%rdx, %rdi
    0000003f: 	setbe	%r11b
    00000043: 	orb	%r11b, %sil
    00000046: 	je	.Ltmp486 # Offset: 70
    00000048: 	cmpq	$0x10, %r10
    0000004c: 	jbe	.Ltmp486 # Offset: 76
    0000004e: 	movq	%r9, %rsi
    00000051: 	leaq	-0x10(%rdi), %rcx
    00000055: 	movq	%rdx, %rax
    00000058: 	shrq	%rsi
    0000005b: 	shlq	$0x4, %rsi
    0000005f: 	addq	%rdx, %rsi
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp487:
    00000068: 	movupd	(%rcx), %xmm0
    0000006c: 	addq	$0x10, %rax
    00000070: 	subq	$0x10, %rcx
    00000074: 	shufpd	$0x1, %xmm0, %xmm0
    00000079: 	movups	%xmm0, -0x10(%rax)
    0000007d: 	cmpq	%rsi, %rax
    00000080: 	jne	.Ltmp487 # Offset: 128
    00000082: 	movq	%r9, %rcx
    00000085: 	andq	$-0x2, %rcx
    00000089: 	movq	%rcx, %rax
    0000008c: 	negq	%rax
    0000008f: 	shlq	$0x3, %rax
    00000093: 	subq	%rax, %rdx
    00000096: 	cmpq	%rcx, %r9
    00000099: 	je	.Ltmp488 # Offset: 153
    0000009b: 	movsd	-0x8(%rdi,%rax), %xmm0
    000000a1: 	movsd	%xmm0, (%rdx)
.Ltmp488:
    000000a5: 	movq	%r8, %rax
    000000a8: 	retq # Offset: 168
    000000a9: 	nopl	(%rax) # Size: 7
.Ltmp486:
    000000b0: 	movsd	-0x8(%rax), %xmm0
    000000b5: 	subq	$0x8, %rax
    000000b9: 	addq	$0x8, %rdx
    000000bd: 	movsd	%xmm0, -0x8(%rdx)
    000000c2: 	cmpq	%rax, %rcx
    000000c5: 	jne	.Ltmp486 # Offset: 197
    000000c7: 	jmp	.Ltmp488 # Offset: 199
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp485:
    000000d0: 	movq	%rdx, %r8
    000000d3: 	movq	%r8, %rax
    000000d6: 	retq # Offset: 214
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt12reverse_copyI20BidirectionalPointerIdES1_ET0_T_S3_S2_"

Binary Function "_Z22my_simple_reverse_copyI20BidirectionalPointerIdES1_EvT_S2_T0_" after disassembly {
  Number      : 130
  State       : disassembled
  Address     : 0x9050
  Size        : 0xb8
  MaxSize     : 0xc0
  Offset      : 0x9050
  Section     : .text
  Orc Section : .local.text._Z22my_simple_reverse_copyI20BidirectionalPointerIdES1_EvT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0129:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movq	%rsi, %rax
    0000000a: 	movq	%rsi, %rdi
    0000000d: 	cmpq	%rsi, %rcx
    00000010: 	je	.Ltmp489 # Offset: 16
    00000016: 	subq	%rcx, %rsi
    00000019: 	leaq	-0x8(%rsi), %r10
    0000001d: 	addq	%rdx, %rsi
    00000020: 	movq	%r10, %r9
    00000023: 	shrq	$0x3, %r9
    00000027: 	leaq	0x1(%r9), %r8
    0000002b: 	notq	%r9
    0000002e: 	leaq	(%rdi,%r9,8), %r9
    00000032: 	cmpq	%r9, %rsi
    00000035: 	setbe	%sil
    00000039: 	cmpq	%rdi, %rdx
    0000003c: 	setae	%r9b
    00000040: 	orb	%r9b, %sil
    00000043: 	je	.Ltmp490 # Offset: 67
    00000045: 	cmpq	$0x10, %r10
    00000049: 	jbe	.Ltmp490 # Offset: 73
    0000004b: 	movq	%r8, %rsi
    0000004e: 	leaq	-0x10(%rdi), %rcx
    00000052: 	movq	%rdx, %rax
    00000055: 	shrq	%rsi
    00000058: 	shlq	$0x4, %rsi
    0000005c: 	addq	%rdx, %rsi
    0000005f: 	nop # Size: 1
.Ltmp491:
    00000060: 	movupd	(%rcx), %xmm0
    00000064: 	addq	$0x10, %rax
    00000068: 	subq	$0x10, %rcx
    0000006c: 	shufpd	$0x1, %xmm0, %xmm0
    00000071: 	movups	%xmm0, -0x10(%rax)
    00000075: 	cmpq	%rsi, %rax
    00000078: 	jne	.Ltmp491 # Offset: 120
    0000007a: 	movq	%r8, %rcx
    0000007d: 	andq	$-0x2, %rcx
    00000081: 	movq	%rcx, %rax
    00000084: 	negq	%rax
    00000087: 	shlq	$0x3, %rax
    0000008b: 	subq	%rax, %rdx
    0000008e: 	cmpq	%rcx, %r8
    00000091: 	je	.Ltmp489 # Offset: 145
    00000093: 	movsd	-0x8(%rdi,%rax), %xmm0
    00000099: 	movsd	%xmm0, (%rdx)
    0000009d: 	retq # Offset: 157
    0000009e: 	nop # Size: 2
.Ltmp490:
    000000a0: 	movsd	-0x8(%rax), %xmm0
    000000a5: 	subq	$0x8, %rax
    000000a9: 	addq	$0x8, %rdx
    000000ad: 	movsd	%xmm0, -0x8(%rdx)
    000000b2: 	cmpq	%rax, %rcx
    000000b5: 	jne	.Ltmp490 # Offset: 181
.Ltmp489:
    000000b7: 	retq # Offset: 183
DWARF CFI Instructions:
    <empty>
End of Function "_Z22my_simple_reverse_copyI20BidirectionalPointerIdES1_EvT_S2_T0_"

Binary Function "_Z20my_fast_reverse_copyI20BidirectionalPointerIdES1_EvT_S2_T0_" after disassembly {
  Number      : 131
  State       : disassembled
  Address     : 0x9110
  Size        : 0xb8
  MaxSize     : 0xc0
  Offset      : 0x9110
  Section     : .text
  Orc Section : .local.text._Z20my_fast_reverse_copyI20BidirectionalPointerIdES1_EvT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0130:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	movq	%rsi, %rax
    0000000a: 	movq	%rsi, %rdi
    0000000d: 	cmpq	%rsi, %rcx
    00000010: 	je	.Ltmp492 # Offset: 16
    00000016: 	subq	%rcx, %rsi
    00000019: 	leaq	-0x8(%rsi), %r10
    0000001d: 	addq	%rdx, %rsi
    00000020: 	movq	%r10, %r9
    00000023: 	shrq	$0x3, %r9
    00000027: 	leaq	0x1(%r9), %r8
    0000002b: 	notq	%r9
    0000002e: 	leaq	(%rdi,%r9,8), %r9
    00000032: 	cmpq	%r9, %rsi
    00000035: 	setbe	%sil
    00000039: 	cmpq	%rdi, %rdx
    0000003c: 	setae	%r9b
    00000040: 	orb	%r9b, %sil
    00000043: 	je	.Ltmp493 # Offset: 67
    00000045: 	cmpq	$0x10, %r10
    00000049: 	jbe	.Ltmp493 # Offset: 73
    0000004b: 	movq	%r8, %rsi
    0000004e: 	leaq	-0x10(%rdi), %rcx
    00000052: 	movq	%rdx, %rax
    00000055: 	shrq	%rsi
    00000058: 	shlq	$0x4, %rsi
    0000005c: 	addq	%rdx, %rsi
    0000005f: 	nop # Size: 1
.Ltmp494:
    00000060: 	movupd	(%rcx), %xmm0
    00000064: 	addq	$0x10, %rax
    00000068: 	subq	$0x10, %rcx
    0000006c: 	shufpd	$0x1, %xmm0, %xmm0
    00000071: 	movups	%xmm0, -0x10(%rax)
    00000075: 	cmpq	%rsi, %rax
    00000078: 	jne	.Ltmp494 # Offset: 120
    0000007a: 	movq	%r8, %rcx
    0000007d: 	andq	$-0x2, %rcx
    00000081: 	movq	%rcx, %rax
    00000084: 	negq	%rax
    00000087: 	shlq	$0x3, %rax
    0000008b: 	subq	%rax, %rdx
    0000008e: 	cmpq	%rcx, %r8
    00000091: 	je	.Ltmp492 # Offset: 145
    00000093: 	movsd	-0x8(%rdi,%rax), %xmm0
    00000099: 	movsd	%xmm0, (%rdx)
    0000009d: 	retq # Offset: 157
    0000009e: 	nop # Size: 2
.Ltmp493:
    000000a0: 	movsd	-0x8(%rax), %xmm0
    000000a5: 	subq	$0x8, %rax
    000000a9: 	addq	$0x8, %rdx
    000000ad: 	movsd	%xmm0, -0x8(%rdx)
    000000b2: 	cmpq	%rax, %rcx
    000000b5: 	jne	.Ltmp493 # Offset: 181
.Ltmp492:
    000000b7: 	retq # Offset: 183
DWARF CFI Instructions:
    <empty>
End of Function "_Z20my_fast_reverse_copyI20BidirectionalPointerIdES1_EvT_S2_T0_"

Binary Function "_ZSt12reverse_copyIPdS0_ET0_T_S2_S1_" after disassembly {
  Number      : 132
  State       : disassembled
  Address     : 0x91d0
  Size        : 0xcf
  MaxSize     : 0xd0
  Offset      : 0x91d0
  Section     : .text
  Orc Section : .local.text._ZSt12reverse_copyIPdS0_ET0_T_S2_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0131:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	movq	%rdx, %rcx
    0000000a: 	cmpq	%rdi, %rsi
    0000000d: 	je	.Ltmp495 # Offset: 13
    00000013: 	movq	%rsi, %r8
    00000016: 	subq	%rdi, %r8
    00000019: 	leaq	-0x8(%r8), %rsi
    0000001d: 	addq	%rdx, %r8
    00000020: 	movq	%rsi, %rdx
    00000023: 	shrq	$0x3, %rdx
    00000027: 	leaq	0x1(%rdx), %r9
    0000002b: 	notq	%rdx
    0000002e: 	leaq	(%rax,%rdx,8), %rdx
    00000032: 	cmpq	%rdx, %r8
    00000035: 	setbe	%dl
    00000038: 	cmpq	%rcx, %rax
    0000003b: 	setbe	%r10b
    0000003f: 	orb	%r10b, %dl
    00000042: 	je	.Ltmp496 # Offset: 66
    00000044: 	cmpq	$0x10, %rsi
    00000048: 	jbe	.Ltmp496 # Offset: 72
    0000004a: 	movq	%r9, %rdi
    0000004d: 	leaq	-0x10(%rax), %rsi
    00000051: 	movq	%rcx, %rdx
    00000054: 	shrq	%rdi
    00000057: 	shlq	$0x4, %rdi
    0000005b: 	addq	%rcx, %rdi
    0000005e: 	nop # Size: 2
.Ltmp497:
    00000060: 	movupd	(%rsi), %xmm0
    00000064: 	addq	$0x10, %rdx
    00000068: 	subq	$0x10, %rsi
    0000006c: 	shufpd	$0x1, %xmm0, %xmm0
    00000071: 	movups	%xmm0, -0x10(%rdx)
    00000075: 	cmpq	%rdi, %rdx
    00000078: 	jne	.Ltmp497 # Offset: 120
    0000007a: 	movq	%r9, %rsi
    0000007d: 	andq	$-0x2, %rsi
    00000081: 	movq	%rsi, %rdx
    00000084: 	negq	%rdx
    00000087: 	shlq	$0x3, %rdx
    0000008b: 	subq	%rdx, %rcx
    0000008e: 	cmpq	%rsi, %r9
    00000091: 	je	.Ltmp498 # Offset: 145
    00000093: 	movsd	-0x8(%rax,%rdx), %xmm0
    00000099: 	movsd	%xmm0, (%rcx)
.Ltmp498:
    0000009d: 	movq	%r8, %rax
    000000a0: 	retq # Offset: 160
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp496:
    000000a8: 	movsd	-0x8(%rax), %xmm0
    000000ad: 	subq	$0x8, %rax
    000000b1: 	addq	$0x8, %rcx
    000000b5: 	movsd	%xmm0, -0x8(%rcx)
    000000ba: 	cmpq	%rax, %rdi
    000000bd: 	jne	.Ltmp496 # Offset: 189
    000000bf: 	jmp	.Ltmp498 # Offset: 191
    000000c1: 	nopl	(%rax) # Size: 7
.Ltmp495:
    000000c8: 	movq	%rdx, %r8
    000000cb: 	movq	%r8, %rax
    000000ce: 	retq # Offset: 206
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt12reverse_copyIPdS0_ET0_T_S2_S1_"

Binary Function "_Z22my_simple_reverse_copyIPdS0_EvT_S1_T0_" after disassembly {
  Number      : 133
  State       : disassembled
  Address     : 0x92a0
  Size        : 0xbf
  MaxSize     : 0xc0
  Offset      : 0x92a0
  Section     : .text
  Orc Section : .local.text._Z22my_simple_reverse_copyIPdS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0132:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp499 # Offset: 7
    0000000d: 	movq	%rsi, %rax
    00000010: 	leaq	-0x8(%rsi), %rcx
    00000014: 	subq	%rdi, %rax
    00000017: 	movq	%rax, %r8
    0000001a: 	sarq	$0x3, %r8
    0000001e: 	testq	%rax, %rax
    00000021: 	jle	.Ltmp499 # Offset: 33
    00000027: 	movq	%rsi, %rdi
    0000002a: 	leaq	(%rdx,%rax), %r9
    0000002e: 	subq	%rax, %rdi
    00000031: 	cmpq	%rdi, %r9
    00000034: 	setbe	%dil
    00000038: 	cmpq	%rdx, %rsi
    0000003b: 	setbe	%r9b
    0000003f: 	orb	%r9b, %dil
    00000042: 	je	.Ltmp500 # Offset: 66
    00000044: 	cmpq	$0x18, %rax
    00000048: 	jle	.Ltmp500 # Offset: 72
    0000004a: 	movq	%r8, %rdi
    0000004d: 	subq	$0x10, %rsi
    00000051: 	movq	%rdx, %rax
    00000054: 	shrq	%rdi
    00000057: 	shlq	$0x4, %rdi
    0000005b: 	addq	%rdx, %rdi
    0000005e: 	nop # Size: 2
.Ltmp501:
    00000060: 	movupd	(%rsi), %xmm0
    00000064: 	addq	$0x10, %rax
    00000068: 	subq	$0x10, %rsi
    0000006c: 	shufpd	$0x1, %xmm0, %xmm0
    00000071: 	movups	%xmm0, -0x10(%rax)
    00000075: 	cmpq	%rdi, %rax
    00000078: 	jne	.Ltmp501 # Offset: 120
    0000007a: 	movq	%r8, %rsi
    0000007d: 	andq	$-0x2, %rsi
    00000081: 	movq	%rsi, %rax
    00000084: 	negq	%rax
    00000087: 	shlq	$0x3, %rax
    0000008b: 	addq	%rax, %rcx
    0000008e: 	subq	%rax, %rdx
    00000091: 	cmpq	%rsi, %r8
    00000094: 	je	.Ltmp499 # Offset: 148
    00000096: 	movsd	(%rcx), %xmm0
    0000009a: 	movsd	%xmm0, (%rdx)
    0000009e: 	retq # Offset: 158
    0000009f: 	nop # Size: 1
.Ltmp500:
    000000a0: 	xorl	%eax, %eax
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp502:
    000000a8: 	movsd	(%rcx), %xmm0
    000000ac: 	subq	$0x8, %rcx
    000000b0: 	movsd	%xmm0, (%rdx,%rax,8)
    000000b5: 	addq	$0x1, %rax
    000000b9: 	cmpq	%rax, %r8
    000000bc: 	jg	.Ltmp502 # Offset: 188
.Ltmp499:
    000000be: 	retq # Offset: 190
DWARF CFI Instructions:
    <empty>
End of Function "_Z22my_simple_reverse_copyIPdS0_EvT_S1_T0_"

Binary Function "_Z18fast_reverse_copy2IPdS0_EvT_S1_T0_" after disassembly {
  Number      : 134
  State       : disassembled
  Address     : 0x9360
  Size        : 0x172
  MaxSize     : 0x180
  Offset      : 0x9360
  Section     : .text
  Orc Section : .local.text._Z18fast_reverse_copy2IPdS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0133:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp503 # Offset: 7
    0000000d: 	movq	%rsi, %rax
    00000010: 	leaq	-0x8(%rsi), %rcx
    00000014: 	subq	%rdi, %rax
    00000017: 	movq	%rax, %r8
    0000001a: 	sarq	$0x3, %r8
    0000001e: 	cmpq	$0x18, %rax
    00000022: 	jle	.Ltmp504 # Offset: 34
    00000028: 	leaq	-0x4(%r8), %rax
    0000002c: 	shrq	$0x2, %rax
    00000030: 	leaq	0x1(%rax), %rdi
    00000034: 	movq	%rcx, %rax
    00000037: 	movq	%rdi, %r9
    0000003a: 	shlq	$0x5, %r9
    0000003e: 	leaq	(%rdx,%r9), %rsi
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp505:
    00000048: 	movsd	(%rax), %xmm0
    0000004c: 	addq	$0x20, %rdx
    00000050: 	subq	$0x20, %rax
    00000054: 	movsd	%xmm0, -0x20(%rdx)
    00000059: 	movsd	0x18(%rax), %xmm0
    0000005e: 	movsd	%xmm0, -0x18(%rdx)
    00000063: 	movsd	0x10(%rax), %xmm0
    00000068: 	movsd	%xmm0, -0x10(%rdx)
    0000006d: 	movsd	0x8(%rax), %xmm0
    00000072: 	movsd	%xmm0, -0x8(%rdx)
    00000077: 	cmpq	%rdx, %rsi
    0000007a: 	jne	.Ltmp505 # Offset: 122
    0000007c: 	subq	%r9, %rcx
    0000007f: 	leaq	(,%rdi,4), %rax
.Ltmp508:
    00000087: 	cmpq	%rax, %r8
    0000008a: 	jle	.Ltmp503 # Offset: 138
    00000090: 	movq	%r8, %rdx
    00000093: 	movq	%rcx, %r10
    00000096: 	subq	%rax, %rdx
    00000099: 	leaq	(,%rdx,8), %rdi
    000000a1: 	subq	%rdi, %r10
    000000a4: 	leaq	(%rsi,%rdi), %r9
    000000a8: 	leaq	0x8(%r10), %rdi
    000000ac: 	cmpq	%rdi, %r9
    000000af: 	leaq	0x8(%rcx), %r9
    000000b3: 	setbe	%dil
    000000b7: 	cmpq	%r9, %rsi
    000000ba: 	setae	%r9b
    000000be: 	orb	%r9b, %dil
    000000c1: 	je	.Ltmp506 # Offset: 193
    000000c3: 	leaq	-0x1(%rdx), %rdi
    000000c7: 	cmpq	$0x2, %rdi
    000000cb: 	jbe	.Ltmp506 # Offset: 203
    000000cd: 	movupd	-0x8(%rcx), %xmm0
    000000d2: 	movq	%rdx, %rax
    000000d5: 	shrq	%rax
    000000d8: 	shufpd	$0x1, %xmm0, %xmm0
    000000dd: 	movups	%xmm0, (%rsi)
    000000e0: 	cmpq	$0x1, %rax
    000000e4: 	je	.Ltmp507 # Offset: 228
    000000e6: 	movupd	-0x18(%rcx), %xmm0
    000000eb: 	shufpd	$0x1, %xmm0, %xmm0
    000000f0: 	movups	%xmm0, 0x10(%rsi)
.Ltmp507:
    000000f4: 	movq	%rdx, %rdi
    000000f7: 	andq	$-0x2, %rdi
    000000fb: 	movq	%rdi, %rax
    000000fe: 	negq	%rax
    00000101: 	shlq	$0x3, %rax
    00000105: 	addq	%rax, %rcx
    00000108: 	subq	%rax, %rsi
    0000010b: 	cmpq	%rdi, %rdx
    0000010e: 	je	.Ltmp503 # Offset: 270
    00000110: 	movsd	(%rcx), %xmm0
    00000114: 	movsd	%xmm0, (%rsi)
    00000118: 	retq # Offset: 280
    00000119: 	nopl	(%rax) # Size: 7
.Ltmp506:
    00000120: 	movsd	(%rcx), %xmm0
    00000124: 	leaq	0x1(%rax), %rdx
    00000128: 	movsd	%xmm0, (%rsi)
    0000012c: 	cmpq	%rdx, %r8
    0000012f: 	jle	.Ltmp503 # Offset: 303
    00000131: 	movsd	-0x8(%rcx), %xmm0
    00000136: 	leaq	0x2(%rax), %rdx
    0000013a: 	movsd	%xmm0, 0x8(%rsi)
    0000013f: 	cmpq	%rdx, %r8
    00000142: 	jle	.Ltmp503 # Offset: 322
    00000144: 	movsd	-0x10(%rcx), %xmm0
    00000149: 	addq	$0x3, %rax
    0000014d: 	movsd	%xmm0, 0x10(%rsi)
    00000152: 	cmpq	%rax, %r8
    00000155: 	jle	.Ltmp503 # Offset: 341
    00000157: 	movsd	-0x18(%rcx), %xmm0
    0000015c: 	movsd	%xmm0, 0x18(%rsi)
.Ltmp503:
    00000161: 	retq # Offset: 353
    00000162: 	nopw	(%rax,%rax) # Size: 6
.Ltmp504:
    00000168: 	movq	%rdx, %rsi
    0000016b: 	xorl	%eax, %eax
    0000016d: 	jmp	.Ltmp508 # Offset: 365
DWARF CFI Instructions:
    <empty>
End of Function "_Z18fast_reverse_copy2IPdS0_EvT_S1_T0_"

Binary Function "_Z18fast_reverse_copy3IPdS0_EvT_S1_T0_" after disassembly {
  Number      : 135
  State       : disassembled
  Address     : 0x94e0
  Size        : 0x172
  MaxSize     : 0x180
  Offset      : 0x94e0
  Section     : .text
  Orc Section : .local.text._Z18fast_reverse_copy3IPdS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0134:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp509 # Offset: 7
    0000000d: 	movq	%rsi, %rax
    00000010: 	leaq	-0x8(%rsi), %rcx
    00000014: 	subq	%rdi, %rax
    00000017: 	movq	%rax, %r8
    0000001a: 	sarq	$0x3, %r8
    0000001e: 	cmpq	$0x18, %rax
    00000022: 	jle	.Ltmp510 # Offset: 34
    00000028: 	leaq	-0x4(%r8), %rax
    0000002c: 	shrq	$0x2, %rax
    00000030: 	leaq	0x1(%rax), %rdi
    00000034: 	movq	%rcx, %rax
    00000037: 	movq	%rdi, %r9
    0000003a: 	shlq	$0x5, %r9
    0000003e: 	leaq	(%rdx,%r9), %rsi
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp511:
    00000048: 	movsd	(%rax), %xmm0
    0000004c: 	addq	$0x20, %rdx
    00000050: 	subq	$0x20, %rax
    00000054: 	movsd	%xmm0, -0x20(%rdx)
    00000059: 	movsd	0x18(%rax), %xmm0
    0000005e: 	movsd	%xmm0, -0x18(%rdx)
    00000063: 	movsd	0x10(%rax), %xmm0
    00000068: 	movsd	%xmm0, -0x10(%rdx)
    0000006d: 	movsd	0x8(%rax), %xmm0
    00000072: 	movsd	%xmm0, -0x8(%rdx)
    00000077: 	cmpq	%rdx, %rsi
    0000007a: 	jne	.Ltmp511 # Offset: 122
    0000007c: 	leaq	(,%rdi,4), %rax
    00000084: 	subq	%r9, %rcx
.Ltmp514:
    00000087: 	cmpq	%rax, %r8
    0000008a: 	jle	.Ltmp509 # Offset: 138
    00000090: 	movq	%r8, %rdx
    00000093: 	movq	%rcx, %r10
    00000096: 	subq	%rax, %rdx
    00000099: 	leaq	(,%rdx,8), %rdi
    000000a1: 	subq	%rdi, %r10
    000000a4: 	leaq	(%rsi,%rdi), %r9
    000000a8: 	leaq	0x8(%r10), %rdi
    000000ac: 	cmpq	%rdi, %r9
    000000af: 	leaq	0x8(%rcx), %r9
    000000b3: 	setbe	%dil
    000000b7: 	cmpq	%r9, %rsi
    000000ba: 	setae	%r9b
    000000be: 	orb	%r9b, %dil
    000000c1: 	je	.Ltmp512 # Offset: 193
    000000c3: 	leaq	-0x1(%rdx), %rdi
    000000c7: 	cmpq	$0x2, %rdi
    000000cb: 	jbe	.Ltmp512 # Offset: 203
    000000cd: 	movupd	-0x8(%rcx), %xmm0
    000000d2: 	movq	%rdx, %rax
    000000d5: 	shrq	%rax
    000000d8: 	shufpd	$0x1, %xmm0, %xmm0
    000000dd: 	movups	%xmm0, (%rsi)
    000000e0: 	cmpq	$0x1, %rax
    000000e4: 	je	.Ltmp513 # Offset: 228
    000000e6: 	movupd	-0x18(%rcx), %xmm0
    000000eb: 	shufpd	$0x1, %xmm0, %xmm0
    000000f0: 	movups	%xmm0, 0x10(%rsi)
.Ltmp513:
    000000f4: 	movq	%rdx, %rdi
    000000f7: 	andq	$-0x2, %rdi
    000000fb: 	movq	%rdi, %rax
    000000fe: 	negq	%rax
    00000101: 	shlq	$0x3, %rax
    00000105: 	addq	%rax, %rcx
    00000108: 	subq	%rax, %rsi
    0000010b: 	cmpq	%rdi, %rdx
    0000010e: 	je	.Ltmp509 # Offset: 270
    00000110: 	movsd	(%rcx), %xmm0
    00000114: 	movsd	%xmm0, (%rsi)
    00000118: 	retq # Offset: 280
    00000119: 	nopl	(%rax) # Size: 7
.Ltmp512:
    00000120: 	movsd	(%rcx), %xmm0
    00000124: 	leaq	0x1(%rax), %rdx
    00000128: 	movsd	%xmm0, (%rsi)
    0000012c: 	cmpq	%rdx, %r8
    0000012f: 	jle	.Ltmp509 # Offset: 303
    00000131: 	movsd	-0x8(%rcx), %xmm0
    00000136: 	leaq	0x2(%rax), %rdx
    0000013a: 	movsd	%xmm0, 0x8(%rsi)
    0000013f: 	cmpq	%rdx, %r8
    00000142: 	jle	.Ltmp509 # Offset: 322
    00000144: 	movsd	-0x10(%rcx), %xmm0
    00000149: 	addq	$0x3, %rax
    0000014d: 	movsd	%xmm0, 0x10(%rsi)
    00000152: 	cmpq	%rax, %r8
    00000155: 	jle	.Ltmp509 # Offset: 341
    00000157: 	movsd	-0x18(%rcx), %xmm0
    0000015c: 	movsd	%xmm0, 0x18(%rsi)
.Ltmp509:
    00000161: 	retq # Offset: 353
    00000162: 	nopw	(%rax,%rax) # Size: 6
.Ltmp510:
    00000168: 	movq	%rdx, %rsi
    0000016b: 	xorl	%eax, %eax
    0000016d: 	jmp	.Ltmp514 # Offset: 365
DWARF CFI Instructions:
    <empty>
End of Function "_Z18fast_reverse_copy3IPdS0_EvT_S1_T0_"

Binary Function "_Z18fast_reverse_copy4IPdS0_EvT_S1_T0_" after disassembly {
  Number      : 136
  State       : disassembled
  Address     : 0x9660
  Size        : 0x172
  MaxSize     : 0x180
  Offset      : 0x9660
  Section     : .text
  Orc Section : .local.text._Z18fast_reverse_copy4IPdS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0135:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp515 # Offset: 7
    0000000d: 	movq	%rsi, %rax
    00000010: 	leaq	-0x8(%rsi), %rcx
    00000014: 	subq	%rdi, %rax
    00000017: 	movq	%rax, %r8
    0000001a: 	sarq	$0x3, %r8
    0000001e: 	cmpq	$0x18, %rax
    00000022: 	jle	.Ltmp516 # Offset: 34
    00000028: 	leaq	-0x4(%r8), %rax
    0000002c: 	shrq	$0x2, %rax
    00000030: 	leaq	0x1(%rax), %rdi
    00000034: 	movq	%rcx, %rax
    00000037: 	movq	%rdi, %r9
    0000003a: 	shlq	$0x5, %r9
    0000003e: 	leaq	(%rdx,%r9), %rsi
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp517:
    00000048: 	movsd	(%rax), %xmm0
    0000004c: 	addq	$0x20, %rdx
    00000050: 	subq	$0x20, %rax
    00000054: 	movsd	%xmm0, -0x20(%rdx)
    00000059: 	movsd	0x18(%rax), %xmm0
    0000005e: 	movsd	%xmm0, -0x18(%rdx)
    00000063: 	movsd	0x10(%rax), %xmm0
    00000068: 	movsd	%xmm0, -0x10(%rdx)
    0000006d: 	movsd	0x8(%rax), %xmm0
    00000072: 	movsd	%xmm0, -0x8(%rdx)
    00000077: 	cmpq	%rdx, %rsi
    0000007a: 	jne	.Ltmp517 # Offset: 122
    0000007c: 	leaq	(,%rdi,4), %rax
    00000084: 	subq	%r9, %rcx
.Ltmp520:
    00000087: 	cmpq	%rax, %r8
    0000008a: 	jle	.Ltmp515 # Offset: 138
    00000090: 	movq	%r8, %rdx
    00000093: 	movq	%rcx, %r10
    00000096: 	subq	%rax, %rdx
    00000099: 	leaq	(,%rdx,8), %rdi
    000000a1: 	subq	%rdi, %r10
    000000a4: 	leaq	(%rsi,%rdi), %r9
    000000a8: 	leaq	0x8(%r10), %rdi
    000000ac: 	cmpq	%rdi, %r9
    000000af: 	leaq	0x8(%rcx), %r9
    000000b3: 	setbe	%dil
    000000b7: 	cmpq	%r9, %rsi
    000000ba: 	setae	%r9b
    000000be: 	orb	%r9b, %dil
    000000c1: 	je	.Ltmp518 # Offset: 193
    000000c3: 	leaq	-0x1(%rdx), %rdi
    000000c7: 	cmpq	$0x2, %rdi
    000000cb: 	jbe	.Ltmp518 # Offset: 203
    000000cd: 	movupd	-0x8(%rcx), %xmm0
    000000d2: 	movq	%rdx, %rax
    000000d5: 	shrq	%rax
    000000d8: 	shufpd	$0x1, %xmm0, %xmm0
    000000dd: 	movups	%xmm0, (%rsi)
    000000e0: 	cmpq	$0x1, %rax
    000000e4: 	je	.Ltmp519 # Offset: 228
    000000e6: 	movupd	-0x18(%rcx), %xmm0
    000000eb: 	shufpd	$0x1, %xmm0, %xmm0
    000000f0: 	movups	%xmm0, 0x10(%rsi)
.Ltmp519:
    000000f4: 	movq	%rdx, %rdi
    000000f7: 	andq	$-0x2, %rdi
    000000fb: 	movq	%rdi, %rax
    000000fe: 	negq	%rax
    00000101: 	shlq	$0x3, %rax
    00000105: 	addq	%rax, %rcx
    00000108: 	subq	%rax, %rsi
    0000010b: 	cmpq	%rdi, %rdx
    0000010e: 	je	.Ltmp515 # Offset: 270
    00000110: 	movsd	(%rcx), %xmm0
    00000114: 	movsd	%xmm0, (%rsi)
    00000118: 	retq # Offset: 280
    00000119: 	nopl	(%rax) # Size: 7
.Ltmp518:
    00000120: 	movsd	(%rcx), %xmm0
    00000124: 	leaq	0x1(%rax), %rdx
    00000128: 	movsd	%xmm0, (%rsi)
    0000012c: 	cmpq	%rdx, %r8
    0000012f: 	jle	.Ltmp515 # Offset: 303
    00000131: 	movsd	-0x8(%rcx), %xmm0
    00000136: 	leaq	0x2(%rax), %rdx
    0000013a: 	movsd	%xmm0, 0x8(%rsi)
    0000013f: 	cmpq	%rdx, %r8
    00000142: 	jle	.Ltmp515 # Offset: 322
    00000144: 	movsd	-0x10(%rcx), %xmm0
    00000149: 	addq	$0x3, %rax
    0000014d: 	movsd	%xmm0, 0x10(%rsi)
    00000152: 	cmpq	%rax, %r8
    00000155: 	jle	.Ltmp515 # Offset: 341
    00000157: 	movsd	-0x18(%rcx), %xmm0
    0000015c: 	movsd	%xmm0, 0x18(%rsi)
.Ltmp515:
    00000161: 	retq # Offset: 353
    00000162: 	nopw	(%rax,%rax) # Size: 6
.Ltmp516:
    00000168: 	movq	%rdx, %rsi
    0000016b: 	xorl	%eax, %eax
    0000016d: 	jmp	.Ltmp520 # Offset: 365
DWARF CFI Instructions:
    <empty>
End of Function "_Z18fast_reverse_copy4IPdS0_EvT_S1_T0_"

Binary Function "_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1(*2)" after disassembly {
  All names   : _ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1
                _ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/reverse_sequence.cpp/1
  Number      : 137
  State       : disassembled
  Address     : 0x97e0
  Size        : 0x120
  MaxSize     : 0x120
  Offset      : 0x97e0
  Section     : .text
  Orc Section : .local.text._ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0136:
    00000000: 	leaq	-0x1(%rdx), %rax
    00000004: 	movq	%rdx, %r11
    00000007: 	movq	%rdi, %rcx
    0000000a: 	movq	%rsi, %r8
    0000000d: 	movq	%rax, %r9
    00000010: 	movq	%rdx, %r10
    00000013: 	andl	$0x1, %r11d
    00000017: 	shrq	$0x3f, %r9
    0000001b: 	addq	%rax, %r9
    0000001e: 	sarq	%r9
    00000021: 	cmpq	%r9, %rsi
    00000024: 	jge	.Ltmp521 # Offset: 36
    0000002a: 	movq	%rsi, %rdi
    0000002d: 	jmp	.Ltmp522 # Offset: 45
    0000002f: 	nop # Size: 1
.Ltmp524:
    00000030: 	subq	$0x1, %rax
    00000034: 	leaq	(%rcx,%rax,8), %rsi
    00000038: 	movsd	(%rsi), %xmm1
    0000003c: 	movsd	%xmm1, (%rcx,%rdi,8)
    00000041: 	cmpq	%r9, %rax
    00000044: 	jge	.Ltmp523 # Offset: 68
.Ltmp525:
    00000046: 	movq	%rax, %rdi
.Ltmp522:
    00000049: 	leaq	0x1(%rdi), %rdx
    0000004d: 	leaq	(%rdx,%rdx), %rax
    00000051: 	shlq	$0x4, %rdx
    00000055: 	leaq	(%rcx,%rdx), %rsi
    00000059: 	movsd	-0x8(%rcx,%rdx), %xmm2
    0000005f: 	movsd	(%rsi), %xmm1
    00000063: 	comisd	%xmm1, %xmm2
    00000067: 	ja	.Ltmp524 # Offset: 103
    00000069: 	movsd	%xmm1, (%rcx,%rdi,8)
    0000006e: 	cmpq	%r9, %rax
    00000071: 	jl	.Ltmp525 # Offset: 113
.Ltmp523:
    00000073: 	testq	%r11, %r11
    00000076: 	je	.Ltmp526 # Offset: 118
.Ltmp531:
    00000078: 	leaq	-0x1(%rax), %rdx
    0000007c: 	movq	%rdx, %rdi
    0000007f: 	shrq	$0x3f, %rdi
    00000083: 	addq	%rdx, %rdi
    00000086: 	sarq	%rdi
    00000089: 	cmpq	%r8, %rax
    0000008c: 	jg	.Ltmp527 # Offset: 140
    0000008e: 	jmp	.Ltmp528 # Offset: 142
.Ltmp530:
    00000090: 	leaq	-0x1(%rdi), %rdx
    00000094: 	movsd	%xmm1, (%rsi)
    00000098: 	movq	%rdx, %rax
    0000009b: 	shrq	$0x3f, %rax
    0000009f: 	addq	%rdx, %rax
    000000a2: 	sarq	%rax
    000000a5: 	movq	%rax, %rdx
    000000a8: 	movq	%rdi, %rax
    000000ab: 	cmpq	%rdi, %r8
    000000ae: 	jge	.Ltmp529 # Offset: 174
    000000b0: 	movq	%rdx, %rdi
.Ltmp527:
    000000b3: 	leaq	(%rcx,%rdi,8), %r9
    000000b7: 	leaq	(%rcx,%rax,8), %rsi
    000000bb: 	movsd	(%r9), %xmm1
    000000c0: 	comisd	%xmm1, %xmm0
    000000c4: 	ja	.Ltmp530 # Offset: 196
.Ltmp528:
    000000c6: 	movsd	%xmm0, (%rsi)
    000000ca: 	retq # Offset: 202
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp521:
    000000d0: 	leaq	(%rdi,%rsi,8), %rsi
    000000d4: 	testq	%r11, %r11
    000000d7: 	jne	.Ltmp528 # Offset: 215
    000000d9: 	movq	%r8, %rax
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp526:
    000000e0: 	subq	$0x2, %r10
    000000e4: 	movq	%r10, %rdx
    000000e7: 	shrq	$0x3f, %rdx
    000000eb: 	addq	%r10, %rdx
    000000ee: 	sarq	%rdx
    000000f1: 	cmpq	%rdx, %rax
    000000f4: 	jne	.Ltmp531 # Offset: 244
    000000f6: 	leaq	0x2(%rax,%rax), %rax
    000000fb: 	movsd	-0x8(%rcx,%rax,8), %xmm1
    00000101: 	subq	$0x1, %rax
    00000105: 	movsd	%xmm1, (%rsi)
    00000109: 	leaq	(%rcx,%rax,8), %rsi
    0000010d: 	jmp	.Ltmp531 # Offset: 269
    00000112: 	nopw	(%rax,%rax) # Size: 6
.Ltmp529:
    00000118: 	movq	%r9, %rsi
    0000011b: 	movsd	%xmm0, (%rsi)
    0000011f: 	retq # Offset: 287
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1(*2)"

Binary Function "_ZSt13__adjust_heapIPmlmN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1(*2)" after disassembly {
  All names   : _ZSt13__adjust_heapIPmlmN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1
                _ZSt13__adjust_heapIPmlmN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/reverse_sequence.cpp/1
  Number      : 138
  State       : disassembled
  Address     : 0x9900
  Size        : 0x121
  MaxSize     : 0x130
  Offset      : 0x9900
  Section     : .text
  Orc Section : .local.text._ZSt13__adjust_heapIPmlmN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0137:
    00000000: 	leaq	-0x1(%rdx), %rax
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdx, %rbp
    00000008: 	movq	%rsi, %r8
    0000000b: 	movq	%rax, %r11
    0000000e: 	pushq	%rbx
    0000000f: 	movq	%rcx, %r9
    00000012: 	movq	%rdx, %rbx
    00000015: 	shrq	$0x3f, %r11
    00000019: 	andl	$0x1, %ebp
    0000001c: 	addq	%rax, %r11
    0000001f: 	sarq	%r11
    00000022: 	cmpq	%r11, %rsi
    00000025: 	jl	.Ltmp532 # Offset: 37
    00000027: 	jmp	.Ltmp533 # Offset: 39
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp535:
    00000030: 	subq	$0x1, %rax
    00000034: 	leaq	(%rdi,%rax,8), %rcx
    00000038: 	movq	(%rcx), %rdx
    0000003b: 	movq	%rdx, (%rdi,%rsi,8)
    0000003f: 	cmpq	%r11, %rax
    00000042: 	jge	.Ltmp534 # Offset: 66
.Ltmp536:
    00000044: 	movq	%rax, %rsi
.Ltmp532:
    00000047: 	leaq	0x1(%rsi), %rdx
    0000004b: 	leaq	(%rdx,%rdx), %rax
    0000004f: 	shlq	$0x4, %rdx
    00000053: 	leaq	(%rdi,%rdx), %rcx
    00000057: 	movq	(%rcx), %r10
    0000005a: 	cmpq	-0x8(%rdi,%rdx), %r10
    0000005f: 	jb	.Ltmp535 # Offset: 95
    00000061: 	movq	%r10, (%rdi,%rsi,8)
    00000065: 	cmpq	%r11, %rax
    00000068: 	jl	.Ltmp536 # Offset: 104
.Ltmp534:
    0000006a: 	testq	%rbp, %rbp
    0000006d: 	je	.Ltmp537 # Offset: 109
.Ltmp542:
    0000006f: 	leaq	-0x1(%rax), %rdx
    00000073: 	movq	%rdx, %rsi
    00000076: 	shrq	$0x3f, %rsi
    0000007a: 	addq	%rdx, %rsi
    0000007d: 	sarq	%rsi
    00000080: 	cmpq	%r8, %rax
    00000083: 	jg	.Ltmp538 # Offset: 131
    00000085: 	jmp	.Ltmp539 # Offset: 133
    00000087: 	nopw	(%rax,%rax) # Size: 9
.Ltmp541:
    00000090: 	movq	%rdx, (%rcx)
    00000093: 	leaq	-0x1(%rsi), %rdx
    00000097: 	movq	%rdx, %rax
    0000009a: 	shrq	$0x3f, %rax
    0000009e: 	addq	%rdx, %rax
    000000a1: 	sarq	%rax
    000000a4: 	movq	%rax, %rdx
    000000a7: 	movq	%rsi, %rax
    000000aa: 	cmpq	%rsi, %r8
    000000ad: 	jge	.Ltmp540 # Offset: 173
    000000af: 	movq	%rdx, %rsi
.Ltmp538:
    000000b2: 	leaq	(%rdi,%rsi,8), %r10
    000000b6: 	leaq	(%rdi,%rax,8), %rcx
    000000ba: 	movq	(%r10), %rdx
    000000bd: 	cmpq	%r9, %rdx
    000000c0: 	jb	.Ltmp541 # Offset: 192
.Ltmp539:
    000000c2: 	movq	%r9, (%rcx)
    000000c5: 	popq	%rbx
    000000c6: 	popq	%rbp
    000000c7: 	retq # Offset: 199
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp533:
    000000d0: 	leaq	(%rdi,%rsi,8), %rcx
    000000d4: 	testq	%rbp, %rbp
    000000d7: 	jne	.Ltmp539 # Offset: 215
    000000d9: 	movq	%r8, %rax
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp537:
    000000e0: 	subq	$0x2, %rbx
    000000e4: 	movq	%rbx, %rdx
    000000e7: 	shrq	$0x3f, %rdx
    000000eb: 	addq	%rbx, %rdx
    000000ee: 	sarq	%rdx
    000000f1: 	cmpq	%rdx, %rax
    000000f4: 	jne	.Ltmp542 # Offset: 244
    000000fa: 	leaq	0x2(%rax,%rax), %rax
    000000ff: 	movq	-0x8(%rdi,%rax,8), %rdx
    00000104: 	subq	$0x1, %rax
    00000108: 	movq	%rdx, (%rcx)
    0000010b: 	leaq	(%rdi,%rax,8), %rcx
    0000010f: 	jmp	.Ltmp542 # Offset: 271
    00000114: 	nopl	(%rax) # Size: 4
.Ltmp540:
    00000118: 	movq	%r10, %rcx
    0000011b: 	movq	%r9, (%rcx)
    0000011e: 	popq	%rbx
    0000011f: 	popq	%rbp
    00000120: 	retq # Offset: 288
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt13__adjust_heapIPmlmN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1(*2)"

Binary Function "_ZSt13__adjust_heapIPflfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1(*2)" after disassembly {
  All names   : _ZSt13__adjust_heapIPflfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1
                _ZSt13__adjust_heapIPflfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/reverse_sequence.cpp/1
  Number      : 139
  State       : disassembled
  Address     : 0x9a30
  Size        : 0x120
  MaxSize     : 0x120
  Offset      : 0x9a30
  Section     : .text
  Orc Section : .local.text._ZSt13__adjust_heapIPflfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0138:
    00000000: 	leaq	-0x1(%rdx), %rax
    00000004: 	movq	%rdx, %r11
    00000007: 	movq	%rdi, %rcx
    0000000a: 	movq	%rsi, %r8
    0000000d: 	movq	%rax, %r9
    00000010: 	movq	%rdx, %r10
    00000013: 	andl	$0x1, %r11d
    00000017: 	shrq	$0x3f, %r9
    0000001b: 	addq	%rax, %r9
    0000001e: 	sarq	%r9
    00000021: 	cmpq	%r9, %rsi
    00000024: 	jge	.Ltmp543 # Offset: 36
    0000002a: 	movq	%rsi, %rdi
    0000002d: 	jmp	.Ltmp544 # Offset: 45
    0000002f: 	nop # Size: 1
.Ltmp546:
    00000030: 	subq	$0x1, %rax
    00000034: 	leaq	(%rcx,%rax,4), %rsi
    00000038: 	movss	(%rsi), %xmm1
    0000003c: 	movss	%xmm1, (%rcx,%rdi,4)
    00000041: 	cmpq	%r9, %rax
    00000044: 	jge	.Ltmp545 # Offset: 68
.Ltmp547:
    00000046: 	movq	%rax, %rdi
.Ltmp544:
    00000049: 	leaq	0x1(%rdi), %rdx
    0000004d: 	leaq	(%rdx,%rdx), %rax
    00000051: 	shlq	$0x3, %rdx
    00000055: 	leaq	(%rcx,%rdx), %rsi
    00000059: 	movss	-0x4(%rcx,%rdx), %xmm2
    0000005f: 	movss	(%rsi), %xmm1
    00000063: 	comiss	%xmm1, %xmm2
    00000066: 	ja	.Ltmp546 # Offset: 102
    00000068: 	movss	%xmm1, (%rcx,%rdi,4)
    0000006d: 	cmpq	%r9, %rax
    00000070: 	jl	.Ltmp547 # Offset: 112
.Ltmp545:
    00000072: 	testq	%r11, %r11
    00000075: 	je	.Ltmp548 # Offset: 117
.Ltmp553:
    00000077: 	leaq	-0x1(%rax), %rdx
    0000007b: 	movq	%rdx, %rdi
    0000007e: 	shrq	$0x3f, %rdi
    00000082: 	addq	%rdx, %rdi
    00000085: 	sarq	%rdi
    00000088: 	cmpq	%r8, %rax
    0000008b: 	jg	.Ltmp549 # Offset: 139
    0000008d: 	jmp	.Ltmp550 # Offset: 141
    0000008f: 	nop # Size: 1
.Ltmp552:
    00000090: 	leaq	-0x1(%rdi), %rdx
    00000094: 	movss	%xmm1, (%rsi)
    00000098: 	movq	%rdx, %rax
    0000009b: 	shrq	$0x3f, %rax
    0000009f: 	addq	%rdx, %rax
    000000a2: 	sarq	%rax
    000000a5: 	movq	%rax, %rdx
    000000a8: 	movq	%rdi, %rax
    000000ab: 	cmpq	%rdi, %r8
    000000ae: 	jge	.Ltmp551 # Offset: 174
    000000b0: 	movq	%rdx, %rdi
.Ltmp549:
    000000b3: 	leaq	(%rcx,%rdi,4), %r9
    000000b7: 	leaq	(%rcx,%rax,4), %rsi
    000000bb: 	movss	(%r9), %xmm1
    000000c0: 	comiss	%xmm1, %xmm0
    000000c3: 	ja	.Ltmp552 # Offset: 195
.Ltmp550:
    000000c5: 	movss	%xmm0, (%rsi)
    000000c9: 	retq # Offset: 201
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp543:
    000000d0: 	leaq	(%rdi,%rsi,4), %rsi
    000000d4: 	testq	%r11, %r11
    000000d7: 	jne	.Ltmp550 # Offset: 215
    000000d9: 	movq	%r8, %rax
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp548:
    000000e0: 	subq	$0x2, %r10
    000000e4: 	movq	%r10, %rdx
    000000e7: 	shrq	$0x3f, %rdx
    000000eb: 	addq	%r10, %rdx
    000000ee: 	sarq	%rdx
    000000f1: 	cmpq	%rdx, %rax
    000000f4: 	jne	.Ltmp553 # Offset: 244
    000000f6: 	leaq	0x2(%rax,%rax), %rax
    000000fb: 	movss	-0x4(%rcx,%rax,4), %xmm1
    00000101: 	subq	$0x1, %rax
    00000105: 	movss	%xmm1, (%rsi)
    00000109: 	leaq	(%rcx,%rax,4), %rsi
    0000010d: 	jmp	.Ltmp553 # Offset: 269
    00000112: 	nopw	(%rax,%rax) # Size: 6
.Ltmp551:
    00000118: 	movq	%r9, %rsi
    0000011b: 	movss	%xmm0, (%rsi)
    0000011f: 	retq # Offset: 287
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt13__adjust_heapIPflfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1(*2)"

Binary Function "_ZSt13__adjust_heapIPiliN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1(*2)" after disassembly {
  All names   : _ZSt13__adjust_heapIPiliN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1
                _ZSt13__adjust_heapIPiliN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/reverse_sequence.cpp/1
  Number      : 140
  State       : disassembled
  Address     : 0x9b50
  Size        : 0x109
  MaxSize     : 0x110
  Offset      : 0x9b50
  Section     : .text
  Orc Section : .local.text._ZSt13__adjust_heapIPiliN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0139:
    00000000: 	leaq	-0x1(%rdx), %rax
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdx, %rbp
    00000008: 	movq	%rsi, %r8
    0000000b: 	movq	%rax, %r11
    0000000e: 	pushq	%rbx
    0000000f: 	movl	%ecx, %r9d
    00000012: 	movq	%rdx, %rbx
    00000015: 	shrq	$0x3f, %r11
    00000019: 	andl	$0x1, %ebp
    0000001c: 	addq	%rax, %r11
    0000001f: 	sarq	%r11
    00000022: 	cmpq	%r11, %rsi
    00000025: 	jl	.Ltmp554 # Offset: 37
    00000027: 	jmp	.Ltmp555 # Offset: 39
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp557:
    00000030: 	subq	$0x1, %rax
    00000034: 	leaq	(%rdi,%rax,4), %rcx
    00000038: 	movl	(%rcx), %edx
    0000003a: 	movl	%edx, (%rdi,%rsi,4)
    0000003d: 	cmpq	%r11, %rax
    00000040: 	jge	.Ltmp556 # Offset: 64
.Ltmp558:
    00000042: 	movq	%rax, %rsi
.Ltmp554:
    00000045: 	leaq	0x1(%rsi), %rdx
    00000049: 	leaq	(%rdx,%rdx), %rax
    0000004d: 	shlq	$0x3, %rdx
    00000051: 	leaq	(%rdi,%rdx), %rcx
    00000055: 	movl	(%rcx), %r10d
    00000058: 	cmpl	-0x4(%rdi,%rdx), %r10d
    0000005d: 	jl	.Ltmp557 # Offset: 93
    0000005f: 	movl	%r10d, (%rdi,%rsi,4)
    00000063: 	cmpq	%r11, %rax
    00000066: 	jl	.Ltmp558 # Offset: 102
.Ltmp556:
    00000068: 	testq	%rbp, %rbp
    0000006b: 	je	.Ltmp559 # Offset: 107
.Ltmp564:
    0000006d: 	leaq	-0x1(%rax), %rdx
    00000071: 	movq	%rdx, %rsi
    00000074: 	shrq	$0x3f, %rsi
    00000078: 	addq	%rdx, %rsi
    0000007b: 	sarq	%rsi
    0000007e: 	cmpq	%r8, %rax
    00000081: 	jg	.Ltmp560 # Offset: 129
    00000083: 	jmp	.Ltmp561 # Offset: 131
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp563:
    00000088: 	movl	%edx, (%rcx)
    0000008a: 	leaq	-0x1(%rsi), %rdx
    0000008e: 	movq	%rdx, %rax
    00000091: 	shrq	$0x3f, %rax
    00000095: 	addq	%rdx, %rax
    00000098: 	sarq	%rax
    0000009b: 	movq	%rax, %rdx
    0000009e: 	movq	%rsi, %rax
    000000a1: 	cmpq	%rsi, %r8
    000000a4: 	jge	.Ltmp562 # Offset: 164
    000000a6: 	movq	%rdx, %rsi
.Ltmp560:
    000000a9: 	leaq	(%rdi,%rsi,4), %r10
    000000ad: 	leaq	(%rdi,%rax,4), %rcx
    000000b1: 	movl	(%r10), %edx
    000000b4: 	cmpl	%r9d, %edx
    000000b7: 	jl	.Ltmp563 # Offset: 183
.Ltmp561:
    000000b9: 	movl	%r9d, (%rcx)
    000000bc: 	popq	%rbx
    000000bd: 	popq	%rbp
    000000be: 	retq # Offset: 190
    000000bf: 	nop # Size: 1
.Ltmp555:
    000000c0: 	leaq	(%rdi,%rsi,4), %rcx
    000000c4: 	testq	%rbp, %rbp
    000000c7: 	jne	.Ltmp561 # Offset: 199
    000000c9: 	movq	%r8, %rax
    000000cc: 	nopl	(%rax) # Size: 4
.Ltmp559:
    000000d0: 	subq	$0x2, %rbx
    000000d4: 	movq	%rbx, %rdx
    000000d7: 	shrq	$0x3f, %rdx
    000000db: 	addq	%rbx, %rdx
    000000de: 	sarq	%rdx
    000000e1: 	cmpq	%rdx, %rax
    000000e4: 	jne	.Ltmp564 # Offset: 228
    000000e6: 	leaq	0x2(%rax,%rax), %rax
    000000eb: 	movl	-0x4(%rdi,%rax,4), %edx
    000000ef: 	subq	$0x1, %rax
    000000f3: 	movl	%edx, (%rcx)
    000000f5: 	leaq	(%rdi,%rax,4), %rcx
    000000f9: 	jmp	.Ltmp564 # Offset: 249
    000000fe: 	nop # Size: 2
.Ltmp562:
    00000100: 	movq	%r10, %rcx
    00000103: 	movl	%r9d, (%rcx)
    00000106: 	popq	%rbx
    00000107: 	popq	%rbp
    00000108: 	retq # Offset: 264
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt13__adjust_heapIPiliN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1(*2)"

Binary Function "_ZSt13__adjust_heapIPslsN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1(*2)" after disassembly {
  All names   : _ZSt13__adjust_heapIPslsN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1
                _ZSt13__adjust_heapIPslsN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/reverse_sequence.cpp/1
  Number      : 141
  State       : disassembled
  Address     : 0x9c60
  Size        : 0x14c
  MaxSize     : 0x150
  Offset      : 0x9c60
  Section     : .text
  Orc Section : .local.text._ZSt13__adjust_heapIPslsN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0140:
    00000000: 	leaq	-0x1(%rdx), %rax
    00000004: 	pushq	%r12
    00000006: 	movq	%rdx, %r12
    00000009: 	movq	%rsi, %r8
    0000000c: 	movq	%rax, %r11
    0000000f: 	pushq	%rbp
    00000010: 	movl	%ecx, %r10d
    00000013: 	movq	%rdx, %rbp
    00000016: 	shrq	$0x3f, %r11
    0000001a: 	pushq	%rbx
    0000001b: 	movl	%ecx, %r9d
    0000001e: 	andl	$0x1, %r12d
    00000022: 	addq	%rax, %r11
    00000025: 	sarq	%r11
    00000028: 	cmpq	%r11, %rsi
    0000002b: 	jge	.Ltmp565 # Offset: 43
    00000031: 	movq	%rsi, %rax
    00000034: 	nopl	(%rax) # Size: 4
.Ltmp567:
    00000038: 	leaq	0x1(%rax), %rdx
    0000003c: 	leaq	(%rdx,%rdx), %rax
    00000040: 	shlq	$0x2, %rdx
    00000044: 	leaq	(%rdi,%rdx), %rcx
    00000048: 	movq	%rax, %rbx
    0000004b: 	movzwl	(%rcx), %esi
    0000004e: 	cmpw	-0x2(%rdi,%rdx), %si
    00000053: 	jge	.Ltmp566 # Offset: 83
    00000059: 	subq	$0x1, %rax
    0000005d: 	leaq	(%rdi,%rax,2), %rcx
    00000061: 	movzwl	(%rcx), %edx
    00000064: 	movw	%dx, -0x2(%rdi,%rbx)
    00000069: 	cmpq	%r11, %rax
    0000006c: 	jl	.Ltmp567 # Offset: 108
    0000006e: 	testq	%r12, %r12
    00000071: 	je	.Ltmp568 # Offset: 113
.Ltmp573:
    00000073: 	leaq	-0x1(%rax), %rdx
    00000077: 	movq	%rdx, %rsi
    0000007a: 	shrq	$0x3f, %rsi
    0000007e: 	addq	%rdx, %rsi
    00000081: 	sarq	%rsi
    00000084: 	cmpq	%r8, %rax
    00000087: 	jg	.Ltmp569 # Offset: 135
    00000089: 	jmp	.Ltmp570 # Offset: 137
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp572:
    00000090: 	movw	%dx, (%rcx)
    00000093: 	leaq	-0x1(%rsi), %rdx
    00000097: 	movq	%rdx, %rax
    0000009a: 	shrq	$0x3f, %rax
    0000009e: 	addq	%rdx, %rax
    000000a1: 	sarq	%rax
    000000a4: 	movq	%rax, %rdx
    000000a7: 	movq	%rsi, %rax
    000000aa: 	cmpq	%rsi, %r8
    000000ad: 	jge	.Ltmp571 # Offset: 173
    000000b3: 	movq	%rdx, %rsi
.Ltmp569:
    000000b6: 	leaq	(%rdi,%rsi,2), %r11
    000000ba: 	leaq	(%rdi,%rax,2), %rcx
    000000be: 	movzwl	(%r11), %edx
    000000c2: 	cmpw	%r9w, %dx
    000000c6: 	jl	.Ltmp572 # Offset: 198
.Ltmp570:
    000000c8: 	movw	%r10w, (%rcx)
    000000cc: 	popq	%rbx
    000000cd: 	popq	%rbp
    000000ce: 	popq	%r12
    000000d0: 	retq # Offset: 208
    000000d1: 	nopl	(%rax) # Size: 7
.Ltmp565:
    000000d8: 	leaq	(%rdi,%rsi,2), %rcx
    000000dc: 	testq	%r12, %r12
    000000df: 	jne	.Ltmp570 # Offset: 223
    000000e1: 	movq	%r8, %rax
    000000e4: 	nopl	(%rax) # Size: 4
.Ltmp568:
    000000e8: 	subq	$0x2, %rbp
    000000ec: 	movq	%rbp, %rdx
    000000ef: 	shrq	$0x3f, %rdx
    000000f3: 	addq	%rbp, %rdx
    000000f6: 	sarq	%rdx
    000000f9: 	cmpq	%rdx, %rax
    000000fc: 	jne	.Ltmp573 # Offset: 252
    00000102: 	leaq	0x2(%rax,%rax), %rax
    00000107: 	movzwl	-0x2(%rdi,%rax,2), %edx
    0000010c: 	subq	$0x1, %rax
    00000110: 	movw	%dx, (%rcx)
    00000113: 	leaq	(%rdi,%rax,2), %rcx
    00000117: 	jmp	.Ltmp573 # Offset: 279
    0000011c: 	nopl	(%rax) # Size: 4
.Ltmp566:
    00000120: 	movw	%si, -0x2(%rdi,%rax)
    00000125: 	cmpq	%r11, %rax
    00000128: 	jl	.Ltmp567 # Offset: 296
    0000012e: 	testq	%r12, %r12
    00000131: 	jne	.Ltmp573 # Offset: 305
    00000137: 	jmp	.Ltmp568 # Offset: 311
    00000139: 	nopl	(%rax) # Size: 7
.Ltmp571:
    00000140: 	movq	%r11, %rcx
    00000143: 	movw	%r10w, (%rcx)
    00000147: 	popq	%rbx
    00000148: 	popq	%rbp
    00000149: 	popq	%r12
    0000014b: 	retq # Offset: 331
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt13__adjust_heapIPslsN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1(*2)"

Binary Function "_ZSt13__adjust_heapIPhlhN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1(*2)" after disassembly {
  All names   : _ZSt13__adjust_heapIPhlhN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1
                _ZSt13__adjust_heapIPhlhN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/reverse_sequence.cpp/1
  Number      : 142
  State       : disassembled
  Address     : 0x9db0
  Size        : 0x14e
  MaxSize     : 0x150
  Offset      : 0x9db0
  Section     : .text
  Orc Section : .local.text._ZSt13__adjust_heapIPhlhN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0141:
    00000000: 	leaq	-0x1(%rdx), %rax
    00000004: 	pushq	%r14
    00000006: 	movq	%rdx, %r14
    00000009: 	movq	%rsi, %r8
    0000000c: 	pushq	%r13
    0000000e: 	movl	%ecx, %r10d
    00000011: 	movq	%rdx, %r13
    00000014: 	movl	%ecx, %r9d
    00000017: 	pushq	%r12
    00000019: 	movq	%rax, %r12
    0000001c: 	andl	$0x1, %r14d
    00000020: 	shrq	$0x3f, %r12
    00000024: 	pushq	%rbp
    00000025: 	addq	%rax, %r12
    00000028: 	pushq	%rbx
    00000029: 	sarq	%r12
    0000002c: 	cmpq	%r12, %rsi
    0000002f: 	jge	.Ltmp574 # Offset: 47
    00000035: 	movq	%rsi, %rcx
    00000038: 	jmp	.Ltmp575 # Offset: 56
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp577:
    00000040: 	movb	%r11b, (%rdi,%rcx)
    00000044: 	movq	%rbx, %rax
    00000047: 	cmpq	%r12, %rbx
    0000004a: 	jge	.Ltmp576 # Offset: 74
.Ltmp578:
    00000050: 	movq	%rax, %rcx
.Ltmp575:
    00000053: 	leaq	0x2(%rcx,%rcx), %rax
    00000058: 	leaq	-0x1(%rax), %rbx
    0000005c: 	leaq	(%rdi,%rax), %rdx
    00000060: 	leaq	(%rdi,%rbx), %rbp
    00000064: 	movzbl	(%rdx), %esi
    00000067: 	movzbl	(%rbp), %r11d
    0000006c: 	cmpb	%r11b, %sil
    0000006f: 	jb	.Ltmp577 # Offset: 111
    00000071: 	movb	%sil, (%rdi,%rcx)
    00000075: 	cmpq	%r12, %rax
    00000078: 	jl	.Ltmp578 # Offset: 120
    0000007a: 	testq	%r14, %r14
    0000007d: 	je	.Ltmp579 # Offset: 125
.Ltmp584:
    0000007f: 	leaq	-0x1(%rax), %rsi
    00000083: 	movq	%rsi, %rcx
    00000086: 	shrq	$0x3f, %rcx
    0000008a: 	addq	%rsi, %rcx
    0000008d: 	sarq	%rcx
    00000090: 	cmpq	%r8, %rax
    00000093: 	jg	.Ltmp580 # Offset: 147
    00000095: 	jmp	.Ltmp581 # Offset: 149
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp583:
    000000a0: 	movb	%sil, (%rdx)
    000000a3: 	leaq	-0x1(%rcx), %rdx
    000000a7: 	movq	%rdx, %rax
    000000aa: 	shrq	$0x3f, %rax
    000000ae: 	addq	%rdx, %rax
    000000b1: 	sarq	%rax
    000000b4: 	movq	%rax, %rdx
    000000b7: 	movq	%rcx, %rax
    000000ba: 	cmpq	%rcx, %r8
    000000bd: 	jge	.Ltmp582 # Offset: 189
    000000bf: 	movq	%rdx, %rcx
.Ltmp580:
    000000c2: 	leaq	(%rdi,%rcx), %r11
    000000c6: 	leaq	(%rdi,%rax), %rdx
    000000ca: 	movzbl	(%r11), %esi
    000000ce: 	cmpb	%r9b, %sil
    000000d1: 	jb	.Ltmp583 # Offset: 209
.Ltmp581:
    000000d3: 	movb	%r10b, (%rdx)
    000000d6: 	popq	%rbx
    000000d7: 	popq	%rbp
    000000d8: 	popq	%r12
    000000da: 	popq	%r13
    000000dc: 	popq	%r14
    000000de: 	retq # Offset: 222
    000000df: 	nop # Size: 1
.Ltmp574:
    000000e0: 	leaq	(%rdi,%rsi), %rdx
    000000e4: 	testq	%r14, %r14
    000000e7: 	jne	.Ltmp581 # Offset: 231
    000000e9: 	movq	%r8, %rax
    000000ec: 	nopl	(%rax) # Size: 4
.Ltmp579:
    000000f0: 	subq	$0x2, %r13
    000000f4: 	movq	%r13, %rcx
    000000f7: 	shrq	$0x3f, %rcx
    000000fb: 	addq	%r13, %rcx
    000000fe: 	sarq	%rcx
    00000101: 	cmpq	%rcx, %rax
    00000104: 	jne	.Ltmp584 # Offset: 260
    0000010a: 	leaq	0x1(%rax,%rax), %rax
    0000010f: 	leaq	(%rdi,%rax), %rcx
    00000113: 	movzbl	(%rcx), %esi
    00000116: 	movb	%sil, (%rdx)
    00000119: 	movq	%rcx, %rdx
    0000011c: 	jmp	.Ltmp584 # Offset: 284
    00000121: 	nopl	(%rax) # Size: 7
.Ltmp582:
    00000128: 	movq	%r11, %rdx
    0000012b: 	movb	%r10b, (%rdx)
    0000012e: 	popq	%rbx
    0000012f: 	popq	%rbp
    00000130: 	popq	%r12
    00000132: 	popq	%r13
    00000134: 	popq	%r14
    00000136: 	retq # Offset: 310
    00000137: 	nopw	(%rax,%rax) # Size: 9
.Ltmp576:
    00000140: 	movq	%rbp, %rdx
    00000143: 	testq	%r14, %r14
    00000146: 	jne	.Ltmp584 # Offset: 326
    0000014c: 	jmp	.Ltmp579 # Offset: 332
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt13__adjust_heapIPhlhN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1(*2)"

Binary Function "_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1(*2)" after disassembly {
  All names   : _ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1
                _ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/reverse_sequence.cpp/1
  Number      : 143
  State       : disassembled
  Address     : 0x9f00
  Size        : 0x1d2
  MaxSize     : 0x1e0
  Offset      : 0x9f00
  Section     : .text
  Orc Section : .local.text._ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0142:
    00000000: 	movq	%rsi, %rax
    00000003: 	subq	%rdi, %rax
    00000006: 	cmpq	$0x80, %rax
    0000000c: 	jle	.Ltmp585 # Offset: 12
    00000012: 	pushq	%r13
    00000014: 	movq	%rdx, %r13
    00000017: 	pushq	%r12
    00000019: 	leaq	0x8(%rdi), %r12
    0000001d: 	pushq	%rbp
    0000001e: 	movq	%rdi, %rbp
    00000021: 	pushq	%rbx
    00000022: 	subq	$0x8, %rsp
    00000026: 	testq	%rdx, %rdx
    00000029: 	je	.Ltmp586 # Offset: 41
.Ltmp599:
    0000002f: 	movupd	(%rbp), %xmm0
    00000034: 	sarq	$0x4, %rax
    00000038: 	subq	$0x1, %r13
    0000003c: 	movsd	-0x8(%rsi), %xmm3
    00000041: 	leaq	(%rbp,%rax,8), %rax
    00000046: 	movapd	%xmm0, %xmm4
    0000004a: 	movsd	(%rax), %xmm2
    0000004e: 	movapd	%xmm0, %xmm1
    00000052: 	shufpd	$0x1, %xmm0, %xmm4
    00000057: 	unpckhpd	%xmm0, %xmm0
    0000005b: 	comisd	%xmm0, %xmm2
    0000005f: 	jbe	.Ltmp587 # Offset: 95
    00000061: 	comisd	%xmm2, %xmm3
    00000065: 	ja	.Ltmp588 # Offset: 101
    0000006b: 	comisd	%xmm0, %xmm3
    0000006f: 	ja	.Ltmp589 # Offset: 111
.Ltmp595:
    00000071: 	movups	%xmm4, (%rbp)
    00000075: 	movsd	-0x8(%rsi), %xmm2
.Ltmp596:
    0000007a: 	movq	%rsi, %rax
    0000007d: 	movq	%r12, %rbx
    00000080: 	jmp	.Ltmp590 # Offset: 128
    00000082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp591:
    00000088: 	movsd	0x8(%rbx), %xmm1
    0000008d: 	addq	$0x8, %rbx
.Ltmp590:
    00000091: 	comisd	%xmm1, %xmm0
    00000095: 	ja	.Ltmp591 # Offset: 149
    00000097: 	subq	$0x8, %rax
    0000009b: 	comisd	%xmm0, %xmm2
    0000009f: 	jbe	.Ltmp592 # Offset: 159
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp593:
    000000a8: 	movsd	-0x8(%rax), %xmm2
    000000ad: 	subq	$0x8, %rax
    000000b1: 	comisd	%xmm0, %xmm2
    000000b5: 	ja	.Ltmp593 # Offset: 181
.Ltmp592:
    000000b7: 	cmpq	%rbx, %rax
    000000ba: 	jbe	.Ltmp594 # Offset: 186
    000000bc: 	movsd	%xmm2, (%rbx)
    000000c0: 	addq	$0x8, %rbx
    000000c4: 	movsd	-0x8(%rax), %xmm2
    000000c9: 	movsd	%xmm1, (%rax)
    000000cd: 	movsd	(%rbx), %xmm1
    000000d1: 	movsd	(%rbp), %xmm0
    000000d6: 	jmp	.Ltmp590 # Offset: 214
.Ltmp587:
    000000d8: 	comisd	%xmm0, %xmm3
    000000dc: 	ja	.Ltmp595 # Offset: 220
    000000de: 	comisd	%xmm2, %xmm3
    000000e2: 	jbe	.Ltmp588 # Offset: 226
.Ltmp589:
    000000e4: 	movsd	%xmm3, (%rbp)
    000000e9: 	movapd	%xmm1, %xmm2
    000000ed: 	movsd	%xmm1, -0x8(%rsi)
    000000f2: 	movsd	(%rbp), %xmm0
    000000f7: 	movsd	0x8(%rbp), %xmm1
    000000fc: 	jmp	.Ltmp596 # Offset: 252
    00000101: 	nopl	(%rax) # Size: 7
.Ltmp594:
    00000108: 	movq	%r13, %rdx
    0000010b: 	movq	%rbx, %rdi
    0000010e: 	callq	"_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1" # Offset: 270
    00000113: 	movq	%rbx, %rax
    00000116: 	subq	%rbp, %rax
    00000119: 	cmpq	$0x80, %rax
    0000011f: 	jle	.Ltmp597 # Offset: 287
    00000125: 	testq	%r13, %r13
    00000128: 	je	.Ltmp598 # Offset: 296
    0000012a: 	movq	%rbx, %rsi
    0000012d: 	jmp	.Ltmp599 # Offset: 301
.Ltmp588:
    00000132: 	movsd	%xmm2, (%rbp)
    00000137: 	movsd	%xmm1, (%rax)
    0000013b: 	movsd	0x8(%rbp), %xmm1
    00000140: 	movsd	(%rbp), %xmm0
    00000145: 	movsd	-0x8(%rsi), %xmm2
    0000014a: 	jmp	.Ltmp596 # Offset: 330
.Ltmp586:
    0000014f: 	movq	%rsi, %rbx
.Ltmp598:
    00000152: 	sarq	$0x3, %rax
    00000156: 	movq	%rbp, %rdi
    00000159: 	leaq	-0x2(%rax), %r13
    0000015d: 	movq	%rax, %rdx
    00000160: 	movq	%rax, %r12
    00000163: 	sarq	%r13
    00000166: 	movsd	(%rbp,%r13,8), %xmm0
    0000016d: 	movq	%r13, %rsi
    00000170: 	callq	"_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1" # Offset: 368
.Ltmp600:
    00000175: 	subq	$0x1, %r13
    00000179: 	movq	%r12, %rdx
    0000017c: 	movq	%rbp, %rdi
    0000017f: 	movsd	(%rbp,%r13,8), %xmm0
    00000186: 	movq	%r13, %rsi
    00000189: 	callq	"_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1" # Offset: 393
    0000018e: 	testq	%r13, %r13
    00000191: 	jne	.Ltmp600 # Offset: 401
    00000193: 	nopl	(%rax,%rax) # Size: 5
.Ltmp601:
    00000198: 	subq	$0x8, %rbx
    0000019c: 	movsd	(%rbp), %xmm1
    000001a1: 	movsd	(%rbx), %xmm0
    000001a5: 	xorl	%esi, %esi
    000001a7: 	movq	%rbx, %r12
    000001aa: 	movq	%rbp, %rdi
    000001ad: 	subq	%rbp, %r12
    000001b0: 	movsd	%xmm1, (%rbx)
    000001b4: 	movq	%r12, %rdx
    000001b7: 	sarq	$0x3, %rdx
    000001bb: 	callq	"_ZSt13__adjust_heapIPdldN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1" # Offset: 443
    000001c0: 	cmpq	$0x8, %r12
    000001c4: 	jg	.Ltmp601 # Offset: 452
.Ltmp597:
    000001c6: 	addq	$0x8, %rsp
    000001ca: 	popq	%rbx
    000001cb: 	popq	%rbp
    000001cc: 	popq	%r12
    000001ce: 	popq	%r13
    000001d0: 	retq # Offset: 464
.Ltmp585:
    000001d1: 	retq # Offset: 465
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1(*2)"

Binary Function "_ZSt16__introsort_loopIPmlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1(*2)" after disassembly {
  All names   : _ZSt16__introsort_loopIPmlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1
                _ZSt16__introsort_loopIPmlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/reverse_sequence.cpp/1
  Number      : 144
  State       : disassembled
  Address     : 0xa0e0
  Size        : 0x1bf
  MaxSize     : 0x1c0
  Offset      : 0xa0e0
  Section     : .text
  Orc Section : .local.text._ZSt16__introsort_loopIPmlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0143:
    00000000: 	movq	%rsi, %rax
    00000003: 	subq	%rdi, %rax
    00000006: 	cmpq	$0x80, %rax
    0000000c: 	jle	.Ltmp602 # Offset: 12
    00000012: 	pushq	%r13
    00000014: 	movq	%rsi, %r8
    00000017: 	movq	%rdx, %r13
    0000001a: 	pushq	%r12
    0000001c: 	movq	%rdi, %r12
    0000001f: 	pushq	%rbp
    00000020: 	leaq	0x8(%rdi), %rbp
    00000024: 	pushq	%rbx
    00000025: 	subq	$0x8, %rsp
    00000029: 	testq	%rdx, %rdx
    0000002c: 	je	.Ltmp603 # Offset: 44
.Ltmp617:
    00000032: 	movdqu	(%r12), %xmm0
    00000038: 	sarq	$0x4, %rax
    0000003c: 	movq	-0x8(%r8), %rsi
    00000040: 	subq	$0x1, %r13
    00000044: 	leaq	(%r12,%rax,8), %rdi
    00000048: 	movhlps	%xmm0, %xmm2
    0000004b: 	movq	(%rdi), %rax
    0000004e: 	movdqa	%xmm0, %xmm1
    00000052: 	movq	%xmm0, %rcx
    00000057: 	movq	%xmm2, %rdx
    0000005c: 	shufpd	$0x1, %xmm0, %xmm1
    00000061: 	cmpq	%rdx, %rax
    00000064: 	jbe	.Ltmp604 # Offset: 100
    00000066: 	cmpq	%rsi, %rax
    00000069: 	jb	.Ltmp605 # Offset: 105
    0000006f: 	cmpq	%rsi, %rdx
    00000072: 	jb	.Ltmp606 # Offset: 114
.Ltmp613:
    00000074: 	movups	%xmm1, (%r12)
    00000079: 	movq	-0x8(%r8), %rsi
.Ltmp614:
    0000007d: 	movq	%r8, %rax
    00000080: 	movq	%rbp, %rbx
    00000083: 	nopl	(%rax,%rax) # Size: 5
.Ltmp612:
    00000088: 	cmpq	%rcx, %rdx
    0000008b: 	jbe	.Ltmp607 # Offset: 139
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp608:
    00000090: 	movq	0x8(%rbx), %rcx
    00000094: 	addq	$0x8, %rbx
    00000098: 	cmpq	%rdx, %rcx
    0000009b: 	jb	.Ltmp608 # Offset: 155
.Ltmp607:
    0000009d: 	subq	$0x8, %rax
    000000a1: 	cmpq	%rdx, %rsi
    000000a4: 	jbe	.Ltmp609 # Offset: 164
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp610:
    000000b0: 	movq	-0x8(%rax), %rsi
    000000b4: 	subq	$0x8, %rax
    000000b8: 	cmpq	%rdx, %rsi
    000000bb: 	ja	.Ltmp610 # Offset: 187
.Ltmp609:
    000000bd: 	cmpq	%rax, %rbx
    000000c0: 	jae	.Ltmp611 # Offset: 192
    000000c2: 	movq	%rsi, (%rbx)
    000000c5: 	addq	$0x8, %rbx
    000000c9: 	movq	-0x8(%rax), %rsi
    000000cd: 	movq	%rcx, (%rax)
    000000d0: 	movq	(%rbx), %rcx
    000000d3: 	movq	(%r12), %rdx
    000000d7: 	jmp	.Ltmp612 # Offset: 215
.Ltmp604:
    000000d9: 	cmpq	%rsi, %rdx
    000000dc: 	jb	.Ltmp613 # Offset: 220
    000000de: 	cmpq	%rsi, %rax
    000000e1: 	jae	.Ltmp605 # Offset: 225
.Ltmp606:
    000000e3: 	movq	%rsi, (%r12)
    000000e7: 	movq	%rcx, %rsi
    000000ea: 	movq	%rcx, -0x8(%r8)
    000000ee: 	movq	(%r12), %rdx
    000000f2: 	movq	0x8(%r12), %rcx
    000000f7: 	jmp	.Ltmp614 # Offset: 247
    000000f9: 	nopl	(%rax) # Size: 7
.Ltmp611:
    00000100: 	movq	%r13, %rdx
    00000103: 	movq	%r8, %rsi
    00000106: 	movq	%rbx, %rdi
    00000109: 	callq	"_ZSt16__introsort_loopIPmlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1" # Offset: 265
    0000010e: 	movq	%rbx, %rax
    00000111: 	subq	%r12, %rax
    00000114: 	cmpq	$0x80, %rax
    0000011a: 	jle	.Ltmp615 # Offset: 282
    00000120: 	testq	%r13, %r13
    00000123: 	je	.Ltmp616 # Offset: 291
    00000125: 	movq	%rbx, %r8
    00000128: 	jmp	.Ltmp617 # Offset: 296
.Ltmp605:
    0000012d: 	movq	%rax, (%r12)
    00000131: 	movq	%rcx, (%rdi)
    00000134: 	movq	0x8(%r12), %rcx
    00000139: 	movq	(%r12), %rdx
    0000013d: 	movq	-0x8(%r8), %rsi
    00000141: 	jmp	.Ltmp614 # Offset: 321
.Ltmp603:
    00000146: 	movq	%r8, %rbx
.Ltmp616:
    00000149: 	sarq	$0x3, %rax
    0000014d: 	movq	%r12, %rdi
    00000150: 	leaq	-0x2(%rax), %r13
    00000154: 	movq	%rax, %rdx
    00000157: 	movq	%rax, %rbp
    0000015a: 	sarq	%r13
    0000015d: 	movq	(%r12,%r13,8), %rcx
    00000161: 	movq	%r13, %rsi
    00000164: 	callq	"_ZSt13__adjust_heapIPmlmN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1" # Offset: 356
.Ltmp618:
    00000169: 	subq	$0x1, %r13
    0000016d: 	movq	%rbp, %rdx
    00000170: 	movq	%r12, %rdi
    00000173: 	movq	(%r12,%r13,8), %rcx
    00000177: 	movq	%r13, %rsi
    0000017a: 	callq	"_ZSt13__adjust_heapIPmlmN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1" # Offset: 378
    0000017f: 	testq	%r13, %r13
    00000182: 	jne	.Ltmp618 # Offset: 386
    00000184: 	nopl	(%rax) # Size: 4
.Ltmp619:
    00000188: 	subq	$0x8, %rbx
    0000018c: 	movq	(%r12), %rax
    00000190: 	movq	(%rbx), %rcx
    00000193: 	xorl	%esi, %esi
    00000195: 	movq	%rbx, %rbp
    00000198: 	movq	%r12, %rdi
    0000019b: 	subq	%r12, %rbp
    0000019e: 	movq	%rax, (%rbx)
    000001a1: 	movq	%rbp, %rdx
    000001a4: 	sarq	$0x3, %rdx
    000001a8: 	callq	"_ZSt13__adjust_heapIPmlmN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1" # Offset: 424
    000001ad: 	cmpq	$0x8, %rbp
    000001b1: 	jg	.Ltmp619 # Offset: 433
.Ltmp615:
    000001b3: 	addq	$0x8, %rsp
    000001b7: 	popq	%rbx
    000001b8: 	popq	%rbp
    000001b9: 	popq	%r12
    000001bb: 	popq	%r13
    000001bd: 	retq # Offset: 445
.Ltmp602:
    000001be: 	retq # Offset: 446
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt16__introsort_loopIPmlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1(*2)"

Binary Function "_ZSt16__introsort_loopIPflN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1(*2)" after disassembly {
  All names   : _ZSt16__introsort_loopIPflN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1
                _ZSt16__introsort_loopIPflN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/reverse_sequence.cpp/1
  Number      : 145
  State       : disassembled
  Address     : 0xa2a0
  Size        : 0x1c2
  MaxSize     : 0x1d0
  Offset      : 0xa2a0
  Section     : .text
  Orc Section : .local.text._ZSt16__introsort_loopIPflN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0144:
    00000000: 	movq	%rsi, %rax
    00000003: 	subq	%rdi, %rax
    00000006: 	cmpq	$0x40, %rax
    0000000a: 	jle	.Ltmp620 # Offset: 10
    00000010: 	pushq	%r13
    00000012: 	movq	%rdx, %r13
    00000015: 	pushq	%r12
    00000017: 	leaq	0x4(%rdi), %r12
    0000001b: 	pushq	%rbp
    0000001c: 	movq	%rdi, %rbp
    0000001f: 	pushq	%rbx
    00000020: 	subq	$0x8, %rsp
    00000024: 	testq	%rdx, %rdx
    00000027: 	je	.Ltmp621 # Offset: 39
.Ltmp634:
    0000002d: 	sarq	$0x3, %rax
    00000031: 	movq	(%rbp), %xmm0
    00000036: 	subq	$0x1, %r13
    0000003a: 	movss	-0x4(%rsi), %xmm3
    0000003f: 	leaq	(%rbp,%rax,4), %rax
    00000044: 	movss	(%rax), %xmm2
    00000048: 	movaps	%xmm0, %xmm4
    0000004b: 	movaps	%xmm0, %xmm1
    0000004e: 	shufps	$0xe5, %xmm0, %xmm0
    00000052: 	shufps	$0xe1, %xmm4, %xmm4
    00000056: 	comiss	%xmm0, %xmm2
    00000059: 	jbe	.Ltmp622 # Offset: 89
    0000005b: 	comiss	%xmm2, %xmm3
    0000005e: 	ja	.Ltmp623 # Offset: 94
    00000064: 	comiss	%xmm0, %xmm3
    00000067: 	ja	.Ltmp624 # Offset: 103
.Ltmp630:
    00000069: 	movlps	%xmm4, (%rbp)
    0000006d: 	movss	-0x4(%rsi), %xmm2
.Ltmp631:
    00000072: 	movq	%rsi, %rax
    00000075: 	movq	%r12, %rbx
    00000078: 	jmp	.Ltmp625 # Offset: 120
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp626:
    00000080: 	movss	0x4(%rbx), %xmm1
    00000085: 	addq	$0x4, %rbx
.Ltmp625:
    00000089: 	comiss	%xmm1, %xmm0
    0000008c: 	ja	.Ltmp626 # Offset: 140
    0000008e: 	subq	$0x4, %rax
    00000092: 	comiss	%xmm0, %xmm2
    00000095: 	jbe	.Ltmp627 # Offset: 149
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp628:
    000000a0: 	movss	-0x4(%rax), %xmm2
    000000a5: 	subq	$0x4, %rax
    000000a9: 	comiss	%xmm0, %xmm2
    000000ac: 	ja	.Ltmp628 # Offset: 172
.Ltmp627:
    000000ae: 	cmpq	%rbx, %rax
    000000b1: 	jbe	.Ltmp629 # Offset: 177
    000000b3: 	movss	%xmm2, (%rbx)
    000000b7: 	addq	$0x4, %rbx
    000000bb: 	movss	-0x4(%rax), %xmm2
    000000c0: 	movss	%xmm1, (%rax)
    000000c4: 	movss	(%rbx), %xmm1
    000000c8: 	movss	(%rbp), %xmm0
    000000cd: 	jmp	.Ltmp625 # Offset: 205
.Ltmp622:
    000000cf: 	comiss	%xmm0, %xmm3
    000000d2: 	ja	.Ltmp630 # Offset: 210
    000000d4: 	comiss	%xmm2, %xmm3
    000000d7: 	jbe	.Ltmp623 # Offset: 215
.Ltmp624:
    000000d9: 	movss	%xmm3, (%rbp)
    000000de: 	movaps	%xmm1, %xmm2
    000000e1: 	movss	%xmm1, -0x4(%rsi)
    000000e6: 	movss	(%rbp), %xmm0
    000000eb: 	movss	0x4(%rbp), %xmm1
    000000f0: 	jmp	.Ltmp631 # Offset: 240
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp629:
    000000f8: 	movq	%r13, %rdx
    000000fb: 	movq	%rbx, %rdi
    000000fe: 	callq	"_ZSt16__introsort_loopIPflN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1" # Offset: 254
    00000103: 	movq	%rbx, %rax
    00000106: 	subq	%rbp, %rax
    00000109: 	cmpq	$0x40, %rax
    0000010d: 	jle	.Ltmp632 # Offset: 269
    00000113: 	testq	%r13, %r13
    00000116: 	je	.Ltmp633 # Offset: 278
    00000118: 	movq	%rbx, %rsi
    0000011b: 	jmp	.Ltmp634 # Offset: 283
.Ltmp623:
    00000120: 	movss	%xmm2, (%rbp)
    00000125: 	movss	%xmm1, (%rax)
    00000129: 	movss	0x4(%rbp), %xmm1
    0000012e: 	movss	(%rbp), %xmm0
    00000133: 	movss	-0x4(%rsi), %xmm2
    00000138: 	jmp	.Ltmp631 # Offset: 312
.Ltmp621:
    0000013d: 	movq	%rsi, %rbx
.Ltmp633:
    00000140: 	sarq	$0x2, %rax
    00000144: 	movq	%rbp, %rdi
    00000147: 	leaq	-0x2(%rax), %r13
    0000014b: 	movq	%rax, %rdx
    0000014e: 	movq	%rax, %r12
    00000151: 	sarq	%r13
    00000154: 	movss	(%rbp,%r13,4), %xmm0
    0000015b: 	movq	%r13, %rsi
    0000015e: 	callq	"_ZSt13__adjust_heapIPflfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1" # Offset: 350
.Ltmp635:
    00000163: 	subq	$0x1, %r13
    00000167: 	movq	%r12, %rdx
    0000016a: 	movq	%rbp, %rdi
    0000016d: 	movss	(%rbp,%r13,4), %xmm0
    00000174: 	movq	%r13, %rsi
    00000177: 	callq	"_ZSt13__adjust_heapIPflfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1" # Offset: 375
    0000017c: 	testq	%r13, %r13
    0000017f: 	jne	.Ltmp635 # Offset: 383
    00000181: 	nopl	(%rax) # Size: 7
.Ltmp636:
    00000188: 	subq	$0x4, %rbx
    0000018c: 	movss	(%rbp), %xmm1
    00000191: 	movss	(%rbx), %xmm0
    00000195: 	xorl	%esi, %esi
    00000197: 	movq	%rbx, %r12
    0000019a: 	movq	%rbp, %rdi
    0000019d: 	subq	%rbp, %r12
    000001a0: 	movss	%xmm1, (%rbx)
    000001a4: 	movq	%r12, %rdx
    000001a7: 	sarq	$0x2, %rdx
    000001ab: 	callq	"_ZSt13__adjust_heapIPflfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1" # Offset: 427
    000001b0: 	cmpq	$0x4, %r12
    000001b4: 	jg	.Ltmp636 # Offset: 436
.Ltmp632:
    000001b6: 	addq	$0x8, %rsp
    000001ba: 	popq	%rbx
    000001bb: 	popq	%rbp
    000001bc: 	popq	%r12
    000001be: 	popq	%r13
    000001c0: 	retq # Offset: 448
.Ltmp620:
    000001c1: 	retq # Offset: 449
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt16__introsort_loopIPflN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1(*2)"

Binary Function "_ZSt16__introsort_loopIPilN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1(*2)" after disassembly {
  All names   : _ZSt16__introsort_loopIPilN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1
                _ZSt16__introsort_loopIPilN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/reverse_sequence.cpp/1
  Number      : 146
  State       : disassembled
  Address     : 0xa470
  Size        : 0x19d
  MaxSize     : 0x1a0
  Offset      : 0xa470
  Section     : .text
  Orc Section : .local.text._ZSt16__introsort_loopIPilN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0145:
    00000000: 	movq	%rsi, %rax
    00000003: 	subq	%rdi, %rax
    00000006: 	cmpq	$0x40, %rax
    0000000a: 	jle	.Ltmp637 # Offset: 10
    00000010: 	pushq	%r13
    00000012: 	movq	%rsi, %r8
    00000015: 	movq	%rdx, %r13
    00000018: 	pushq	%r12
    0000001a: 	movq	%rdi, %r12
    0000001d: 	pushq	%rbp
    0000001e: 	leaq	0x4(%rdi), %rbp
    00000022: 	pushq	%rbx
    00000023: 	subq	$0x8, %rsp
    00000027: 	testq	%rdx, %rdx
    0000002a: 	je	.Ltmp638 # Offset: 42
.Ltmp652:
    00000030: 	sarq	$0x3, %rax
    00000034: 	movq	(%r12), %xmm0
    0000003a: 	movl	-0x4(%r8), %esi
    0000003e: 	subq	$0x1, %r13
    00000042: 	leaq	(%r12,%rax,4), %rdi
    00000046: 	movl	(%rdi), %eax
    00000048: 	pshufd	$0xe5, %xmm0, %xmm2
    0000004d: 	movd	%xmm2, %edx
    00000051: 	pshufd	$0xe1, %xmm0, %xmm1
    00000056: 	movd	%xmm0, %ecx
    0000005a: 	cmpl	%edx, %eax
    0000005c: 	jle	.Ltmp639 # Offset: 92
    0000005e: 	cmpl	%esi, %eax
    00000060: 	jl	.Ltmp640 # Offset: 96
    00000066: 	cmpl	%esi, %edx
    00000068: 	jl	.Ltmp641 # Offset: 104
.Ltmp648:
    0000006a: 	movq	%xmm1, (%r12)
    00000070: 	movl	-0x4(%r8), %esi
.Ltmp649:
    00000074: 	movq	%r8, %rax
    00000077: 	movq	%rbp, %rbx
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp647:
    00000080: 	cmpl	%ecx, %edx
    00000082: 	jle	.Ltmp642 # Offset: 130
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp643:
    00000088: 	movl	0x4(%rbx), %ecx
    0000008b: 	addq	$0x4, %rbx
    0000008f: 	cmpl	%edx, %ecx
    00000091: 	jl	.Ltmp643 # Offset: 145
.Ltmp642:
    00000093: 	subq	$0x4, %rax
    00000097: 	cmpl	%edx, %esi
    00000099: 	jle	.Ltmp644 # Offset: 153
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp645:
    000000a0: 	movl	-0x4(%rax), %esi
    000000a3: 	subq	$0x4, %rax
    000000a7: 	cmpl	%edx, %esi
    000000a9: 	jg	.Ltmp645 # Offset: 169
.Ltmp644:
    000000ab: 	cmpq	%rax, %rbx
    000000ae: 	jae	.Ltmp646 # Offset: 174
    000000b0: 	movl	%esi, (%rbx)
    000000b2: 	addq	$0x4, %rbx
    000000b6: 	movl	-0x4(%rax), %esi
    000000b9: 	movl	%ecx, (%rax)
    000000bb: 	movl	(%rbx), %ecx
    000000bd: 	movl	(%r12), %edx
    000000c1: 	jmp	.Ltmp647 # Offset: 193
.Ltmp639:
    000000c3: 	cmpl	%esi, %edx
    000000c5: 	jl	.Ltmp648 # Offset: 197
    000000c7: 	cmpl	%esi, %eax
    000000c9: 	jge	.Ltmp640 # Offset: 201
.Ltmp641:
    000000cb: 	movl	%esi, (%r12)
    000000cf: 	movl	%ecx, %esi
    000000d1: 	movl	%ecx, -0x4(%r8)
    000000d5: 	movl	(%r12), %edx
    000000d9: 	movl	0x4(%r12), %ecx
    000000de: 	jmp	.Ltmp649 # Offset: 222
.Ltmp646:
    000000e0: 	movq	%r13, %rdx
    000000e3: 	movq	%r8, %rsi
    000000e6: 	movq	%rbx, %rdi
    000000e9: 	callq	"_ZSt16__introsort_loopIPilN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1" # Offset: 233
    000000ee: 	movq	%rbx, %rax
    000000f1: 	subq	%r12, %rax
    000000f4: 	cmpq	$0x40, %rax
    000000f8: 	jle	.Ltmp650 # Offset: 248
    000000fe: 	testq	%r13, %r13
    00000101: 	je	.Ltmp651 # Offset: 257
    00000103: 	movq	%rbx, %r8
    00000106: 	jmp	.Ltmp652 # Offset: 262
.Ltmp640:
    0000010b: 	movl	%eax, (%r12)
    0000010f: 	movl	%ecx, (%rdi)
    00000111: 	movl	0x4(%r12), %ecx
    00000116: 	movl	(%r12), %edx
    0000011a: 	movl	-0x4(%r8), %esi
    0000011e: 	jmp	.Ltmp649 # Offset: 286
.Ltmp638:
    00000123: 	movq	%r8, %rbx
.Ltmp651:
    00000126: 	sarq	$0x2, %rax
    0000012a: 	movq	%r12, %rdi
    0000012d: 	leaq	-0x2(%rax), %r13
    00000131: 	movq	%rax, %rdx
    00000134: 	movq	%rax, %rbp
    00000137: 	sarq	%r13
    0000013a: 	movl	(%r12,%r13,4), %ecx
    0000013e: 	movq	%r13, %rsi
    00000141: 	callq	"_ZSt13__adjust_heapIPiliN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1" # Offset: 321
.Ltmp653:
    00000146: 	subq	$0x1, %r13
    0000014a: 	movq	%rbp, %rdx
    0000014d: 	movq	%r12, %rdi
    00000150: 	movl	(%r12,%r13,4), %ecx
    00000154: 	movq	%r13, %rsi
    00000157: 	callq	"_ZSt13__adjust_heapIPiliN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1" # Offset: 343
    0000015c: 	testq	%r13, %r13
    0000015f: 	jne	.Ltmp653 # Offset: 351
    00000161: 	nopl	(%rax) # Size: 7
.Ltmp654:
    00000168: 	subq	$0x4, %rbx
    0000016c: 	movl	(%r12), %eax
    00000170: 	movl	(%rbx), %ecx
    00000172: 	xorl	%esi, %esi
    00000174: 	movq	%rbx, %rbp
    00000177: 	movq	%r12, %rdi
    0000017a: 	subq	%r12, %rbp
    0000017d: 	movl	%eax, (%rbx)
    0000017f: 	movq	%rbp, %rdx
    00000182: 	sarq	$0x2, %rdx
    00000186: 	callq	"_ZSt13__adjust_heapIPiliN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1" # Offset: 390
    0000018b: 	cmpq	$0x4, %rbp
    0000018f: 	jg	.Ltmp654 # Offset: 399
.Ltmp650:
    00000191: 	addq	$0x8, %rsp
    00000195: 	popq	%rbx
    00000196: 	popq	%rbp
    00000197: 	popq	%r12
    00000199: 	popq	%r13
    0000019b: 	retq # Offset: 411
.Ltmp637:
    0000019c: 	retq # Offset: 412
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt16__introsort_loopIPilN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1(*2)"

Binary Function "_ZSt16__introsort_loopIPslN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1(*2)" after disassembly {
  All names   : _ZSt16__introsort_loopIPslN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1
                _ZSt16__introsort_loopIPslN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/reverse_sequence.cpp/1
  Number      : 147
  State       : disassembled
  Address     : 0xa610
  Size        : 0x1b7
  MaxSize     : 0x1c0
  Offset      : 0xa610
  Section     : .text
  Orc Section : .local.text._ZSt16__introsort_loopIPslN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0146:
    00000000: 	movq	%rsi, %rax
    00000003: 	subq	%rdi, %rax
    00000006: 	cmpq	$0x20, %rax
    0000000a: 	jle	.Ltmp655 # Offset: 10
    00000010: 	pushq	%r13
    00000012: 	movq	%rsi, %r8
    00000015: 	movq	%rdx, %r13
    00000018: 	pushq	%r12
    0000001a: 	movq	%rdi, %r12
    0000001d: 	pushq	%rbp
    0000001e: 	leaq	0x2(%rdi), %rbp
    00000022: 	pushq	%rbx
    00000023: 	subq	$0x8, %rsp
    00000027: 	testq	%rdx, %rdx
    0000002a: 	je	.Ltmp656 # Offset: 42
.Ltmp670:
    00000030: 	sarq	$0x2, %rax
    00000034: 	movzwl	0x2(%r12), %edx
    0000003a: 	movzwl	-0x2(%r8), %esi
    0000003f: 	subq	$0x1, %r13
    00000043: 	leaq	(%r12,%rax,2), %rdi
    00000047: 	movzwl	(%r12), %ecx
    0000004c: 	movzwl	(%rdi), %eax
    0000004f: 	cmpw	%ax, %dx
    00000052: 	jge	.Ltmp657 # Offset: 82
    00000054: 	cmpw	%si, %ax
    00000057: 	jl	.Ltmp658 # Offset: 87
    0000005d: 	cmpw	%si, %dx
    00000060: 	jl	.Ltmp659 # Offset: 96
.Ltmp666:
    00000062: 	movw	%dx, (%r12)
    00000067: 	movw	%cx, 0x2(%r12)
    0000006d: 	movzwl	-0x2(%r8), %esi
.Ltmp667:
    00000072: 	movq	%r8, %rax
    00000075: 	movq	%rbp, %rbx
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp665:
    00000080: 	cmpw	%cx, %dx
    00000083: 	jle	.Ltmp660 # Offset: 131
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp661:
    00000088: 	movzwl	0x2(%rbx), %ecx
    0000008c: 	addq	$0x2, %rbx
    00000090: 	cmpw	%dx, %cx
    00000093: 	jl	.Ltmp661 # Offset: 147
.Ltmp660:
    00000095: 	subq	$0x2, %rax
    00000099: 	cmpw	%dx, %si
    0000009c: 	jle	.Ltmp662 # Offset: 156
    0000009e: 	nop # Size: 2
.Ltmp663:
    000000a0: 	movzwl	-0x2(%rax), %esi
    000000a4: 	subq	$0x2, %rax
    000000a8: 	cmpw	%dx, %si
    000000ab: 	jg	.Ltmp663 # Offset: 171
.Ltmp662:
    000000ad: 	cmpq	%rax, %rbx
    000000b0: 	jae	.Ltmp664 # Offset: 176
    000000b2: 	movw	%si, (%rbx)
    000000b5: 	addq	$0x2, %rbx
    000000b9: 	movzwl	-0x2(%rax), %esi
    000000bd: 	movw	%cx, (%rax)
    000000c0: 	movzwl	(%rbx), %ecx
    000000c3: 	movzwl	(%r12), %edx
    000000c8: 	jmp	.Ltmp665 # Offset: 200
.Ltmp657:
    000000ca: 	cmpw	%si, %dx
    000000cd: 	jl	.Ltmp666 # Offset: 205
    000000cf: 	cmpw	%si, %ax
    000000d2: 	jge	.Ltmp658 # Offset: 210
.Ltmp659:
    000000d4: 	movw	%si, (%r12)
    000000d9: 	movl	%ecx, %esi
    000000db: 	movw	%cx, -0x2(%r8)
    000000e0: 	movzwl	(%r12), %edx
    000000e5: 	movzwl	0x2(%r12), %ecx
    000000eb: 	jmp	.Ltmp667 # Offset: 235
    000000ed: 	nopl	(%rax) # Size: 3
.Ltmp664:
    000000f0: 	movq	%r13, %rdx
    000000f3: 	movq	%r8, %rsi
    000000f6: 	movq	%rbx, %rdi
    000000f9: 	callq	"_ZSt16__introsort_loopIPslN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1" # Offset: 249
    000000fe: 	movq	%rbx, %rax
    00000101: 	subq	%r12, %rax
    00000104: 	cmpq	$0x20, %rax
    00000108: 	jle	.Ltmp668 # Offset: 264
    0000010e: 	testq	%r13, %r13
    00000111: 	je	.Ltmp669 # Offset: 273
    00000113: 	movq	%rbx, %r8
    00000116: 	jmp	.Ltmp670 # Offset: 278
.Ltmp658:
    0000011b: 	movw	%ax, (%r12)
    00000120: 	movw	%cx, (%rdi)
    00000123: 	movzwl	0x2(%r12), %ecx
    00000129: 	movzwl	(%r12), %edx
    0000012e: 	movzwl	-0x2(%r8), %esi
    00000133: 	jmp	.Ltmp667 # Offset: 307
.Ltmp656:
    00000138: 	movq	%r8, %rbx
.Ltmp669:
    0000013b: 	sarq	%rax
    0000013e: 	movq	%r12, %rdi
    00000141: 	leaq	-0x2(%rax), %r13
    00000145: 	movq	%rax, %rdx
    00000148: 	movq	%rax, %rbp
    0000014b: 	sarq	%r13
    0000014e: 	movswl	(%r12,%r13,2), %ecx
    00000153: 	movq	%r13, %rsi
    00000156: 	callq	"_ZSt13__adjust_heapIPslsN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1" # Offset: 342
.Ltmp671:
    0000015b: 	subq	$0x1, %r13
    0000015f: 	movq	%rbp, %rdx
    00000162: 	movq	%r12, %rdi
    00000165: 	movswl	(%r12,%r13,2), %ecx
    0000016a: 	movq	%r13, %rsi
    0000016d: 	callq	"_ZSt13__adjust_heapIPslsN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1" # Offset: 365
    00000172: 	testq	%r13, %r13
    00000175: 	jne	.Ltmp671 # Offset: 373
    00000177: 	nopw	(%rax,%rax) # Size: 9
.Ltmp672:
    00000180: 	subq	$0x2, %rbx
    00000184: 	movzwl	(%r12), %eax
    00000189: 	movswl	(%rbx), %ecx
    0000018c: 	xorl	%esi, %esi
    0000018e: 	movq	%rbx, %rbp
    00000191: 	movq	%r12, %rdi
    00000194: 	subq	%r12, %rbp
    00000197: 	movw	%ax, (%rbx)
    0000019a: 	movq	%rbp, %rdx
    0000019d: 	sarq	%rdx
    000001a0: 	callq	"_ZSt13__adjust_heapIPslsN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1" # Offset: 416
    000001a5: 	cmpq	$0x2, %rbp
    000001a9: 	jg	.Ltmp672 # Offset: 425
.Ltmp668:
    000001ab: 	addq	$0x8, %rsp
    000001af: 	popq	%rbx
    000001b0: 	popq	%rbp
    000001b1: 	popq	%r12
    000001b3: 	popq	%r13
    000001b5: 	retq # Offset: 437
.Ltmp655:
    000001b6: 	retq # Offset: 438
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt16__introsort_loopIPslN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1(*2)"

Binary Function "_ZSt16__introsort_loopIPhlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1(*2)" after disassembly {
  All names   : _ZSt16__introsort_loopIPhlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1
                _ZSt16__introsort_loopIPhlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/reverse_sequence.cpp/1
  Number      : 148
  State       : disassembled
  Address     : 0xa7d0
  Size        : 0x1a0
  MaxSize     : 0x1a0
  Offset      : 0xa7d0
  Section     : .text
  Orc Section : .local.text._ZSt16__introsort_loopIPhlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0147:
    00000000: 	pushq	%r14
    00000002: 	pushq	%r13
    00000004: 	movq	%rsi, %r13
    00000007: 	subq	%rdi, %r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	cmpq	$0x10, %r13
    00000012: 	jle	.Ltmp673 # Offset: 18
    00000018: 	movq	%rdi, %r12
    0000001b: 	movq	%rsi, %r8
    0000001e: 	leaq	0x1(%rdi), %rbp
    00000022: 	movq	%rdx, %r14
    00000025: 	testq	%rdx, %rdx
    00000028: 	je	.Ltmp674 # Offset: 40
.Ltmp687:
    0000002e: 	sarq	%r13
    00000031: 	movzwl	(%r12), %esi
    00000036: 	movzbl	0x1(%r12), %edx
    0000003c: 	subq	$0x1, %r14
    00000040: 	leaq	(%r12,%r13), %rax
    00000044: 	movzbl	-0x1(%r8), %r9d
    00000049: 	movzbl	(%r12), %ecx
    0000004e: 	movzbl	(%rax), %edi
    00000051: 	rolw	$0x8, %si
    00000055: 	cmpb	%dil, %dl
    00000058: 	jae	.Ltmp675 # Offset: 88
    0000005a: 	cmpb	%r9b, %dil
    0000005d: 	jb	.Ltmp676 # Offset: 93
    00000063: 	cmpb	%r9b, %dl
    00000066: 	jb	.Ltmp677 # Offset: 102
.Ltmp684:
    00000068: 	movw	%si, (%r12)
    0000006d: 	movzbl	-0x1(%r8), %esi
.Ltmp685:
    00000072: 	movq	%r8, %rax
    00000075: 	movq	%rbp, %rbx
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp683:
    00000080: 	cmpb	%cl, %dl
    00000082: 	jbe	.Ltmp678 # Offset: 130
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp679:
    00000088: 	movzbl	0x1(%rbx), %ecx
    0000008c: 	addq	$0x1, %rbx
    00000090: 	cmpb	%dl, %cl
    00000092: 	jb	.Ltmp679 # Offset: 146
.Ltmp678:
    00000094: 	subq	$0x1, %rax
    00000098: 	cmpb	%dl, %sil
    0000009b: 	jbe	.Ltmp680 # Offset: 155
    0000009d: 	nopl	(%rax) # Size: 3
.Ltmp681:
    000000a0: 	movzbl	-0x1(%rax), %esi
    000000a4: 	subq	$0x1, %rax
    000000a8: 	cmpb	%dl, %sil
    000000ab: 	ja	.Ltmp681 # Offset: 171
.Ltmp680:
    000000ad: 	cmpq	%rax, %rbx
    000000b0: 	jae	.Ltmp682 # Offset: 176
    000000b2: 	movb	%sil, (%rbx)
    000000b5: 	addq	$0x1, %rbx
    000000b9: 	movzbl	-0x1(%rax), %esi
    000000bd: 	movb	%cl, (%rax)
    000000bf: 	movzbl	(%rbx), %ecx
    000000c2: 	movzbl	(%r12), %edx
    000000c7: 	jmp	.Ltmp683 # Offset: 199
.Ltmp675:
    000000c9: 	cmpb	%r9b, %dl
    000000cc: 	jb	.Ltmp684 # Offset: 204
    000000ce: 	cmpb	%r9b, %dil
    000000d1: 	jae	.Ltmp676 # Offset: 209
.Ltmp677:
    000000d3: 	movb	%r9b, (%r12)
    000000d7: 	movl	%ecx, %esi
    000000d9: 	movb	%cl, -0x1(%r8)
    000000dd: 	movzbl	(%r12), %edx
    000000e2: 	movzbl	0x1(%r12), %ecx
    000000e8: 	jmp	.Ltmp685 # Offset: 232
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp682:
    000000f0: 	movq	%rbx, %r13
    000000f3: 	movq	%r14, %rdx
    000000f6: 	movq	%r8, %rsi
    000000f9: 	movq	%rbx, %rdi
    000000fc: 	callq	"_ZSt16__introsort_loopIPhlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1" # Offset: 252
    00000101: 	subq	%r12, %r13
    00000104: 	cmpq	$0x10, %r13
    00000108: 	jle	.Ltmp673 # Offset: 264
    0000010e: 	testq	%r14, %r14
    00000111: 	je	.Ltmp686 # Offset: 273
    00000113: 	movq	%rbx, %r8
    00000116: 	jmp	.Ltmp687 # Offset: 278
.Ltmp676:
    0000011b: 	movb	%dil, (%r12)
    0000011f: 	movb	%cl, (%rax)
    00000121: 	movzbl	0x1(%r12), %ecx
    00000127: 	movzbl	(%r12), %edx
    0000012c: 	movzbl	-0x1(%r8), %esi
    00000131: 	jmp	.Ltmp685 # Offset: 305
.Ltmp674:
    00000136: 	movq	%r8, %rbx
.Ltmp686:
    00000139: 	leaq	-0x2(%r13), %rbp
    0000013d: 	movq	%r13, %rdx
    00000140: 	movq	%r12, %rdi
    00000143: 	sarq	%rbp
    00000146: 	movzbl	(%r12,%rbp), %ecx
    0000014b: 	movq	%rbp, %rsi
    0000014e: 	callq	"_ZSt13__adjust_heapIPhlhN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1" # Offset: 334
.Ltmp688:
    00000153: 	subq	$0x1, %rbp
    00000157: 	movq	%r13, %rdx
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movzbl	(%r12,%rbp), %ecx
    00000162: 	movq	%rbp, %rsi
    00000165: 	callq	"_ZSt13__adjust_heapIPhlhN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1" # Offset: 357
    0000016a: 	testq	%rbp, %rbp
    0000016d: 	jne	.Ltmp688 # Offset: 365
    0000016f: 	nop # Size: 1
.Ltmp689:
    00000170: 	movzbl	(%r12), %eax
    00000175: 	subq	$0x1, %rbx
    00000179: 	movzbl	(%rbx), %ecx
    0000017c: 	xorl	%esi, %esi
    0000017e: 	movq	%rbx, %rbp
    00000181: 	movq	%r12, %rdi
    00000184: 	movb	%al, (%rbx)
    00000186: 	subq	%r12, %rbp
    00000189: 	movq	%rbp, %rdx
    0000018c: 	callq	"_ZSt13__adjust_heapIPhlhN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_.isra.0/1" # Offset: 396
    00000191: 	cmpq	$0x1, %rbp
    00000195: 	jg	.Ltmp689 # Offset: 405
.Ltmp673:
    00000197: 	popq	%rbx
    00000198: 	popq	%rbp
    00000199: 	popq	%r12
    0000019b: 	popq	%r13
    0000019d: 	popq	%r14
    0000019f: 	retq # Offset: 415
DWARF CFI Instructions:
    <empty>
End of Function "_ZSt16__introsort_loopIPhlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1(*2)"

Binary Function "_Z20my_fast_reverse_copyIPdS0_EvT_S1_T0_" after disassembly {
  Number      : 149
  State       : disassembled
  Address     : 0xa970
  Size        : 0x17a
  MaxSize     : 0x180
  Offset      : 0xa970
  Section     : .text
  Orc Section : .local.text._Z20my_fast_reverse_copyIPdS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0148:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp690 # Offset: 7
    0000000d: 	movq	%rsi, %rax
    00000010: 	leaq	-0x8(%rsi), %rcx
    00000014: 	subq	%rdi, %rax
    00000017: 	movq	%rax, %r8
    0000001a: 	sarq	$0x3, %r8
    0000001e: 	cmpq	$0x18, %rax
    00000022: 	jle	.Ltmp691 # Offset: 34
    00000028: 	leaq	-0x4(%r8), %rax
    0000002c: 	shrq	$0x2, %rax
    00000030: 	leaq	0x1(%rax), %rdi
    00000034: 	movq	%rcx, %rax
    00000037: 	movq	%rdi, %r9
    0000003a: 	shlq	$0x5, %r9
    0000003e: 	leaq	(%rdx,%r9), %rsi
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp692:
    00000048: 	movsd	(%rax), %xmm0
    0000004c: 	addq	$0x20, %rdx
    00000050: 	subq	$0x20, %rax
    00000054: 	movsd	%xmm0, -0x20(%rdx)
    00000059: 	movsd	0x18(%rax), %xmm0
    0000005e: 	movsd	%xmm0, -0x18(%rdx)
    00000063: 	movsd	0x10(%rax), %xmm0
    00000068: 	movsd	%xmm0, -0x10(%rdx)
    0000006d: 	movsd	0x8(%rax), %xmm0
    00000072: 	movsd	%xmm0, -0x8(%rdx)
    00000077: 	cmpq	%rdx, %rsi
    0000007a: 	jne	.Ltmp692 # Offset: 122
    0000007c: 	subq	%r9, %rcx
    0000007f: 	leaq	(,%rdi,4), %rax
.Ltmp696:
    00000087: 	cmpq	%rax, %r8
    0000008a: 	jle	.Ltmp690 # Offset: 138
    00000090: 	movq	%r8, %rdx
    00000093: 	movq	%rcx, %r10
    00000096: 	subq	%rax, %rdx
    00000099: 	leaq	(,%rdx,8), %rdi
    000000a1: 	subq	%rdi, %r10
    000000a4: 	leaq	(%rsi,%rdi), %r9
    000000a8: 	leaq	0x8(%r10), %rdi
    000000ac: 	cmpq	%rdi, %r9
    000000af: 	leaq	0x8(%rcx), %r9
    000000b3: 	setbe	%dil
    000000b7: 	cmpq	%r9, %rsi
    000000ba: 	setae	%r9b
    000000be: 	orb	%r9b, %dil
    000000c1: 	je	.Ltmp693 # Offset: 193
    000000c3: 	leaq	-0x1(%rdx), %rdi
    000000c7: 	cmpq	$0x2, %rdi
    000000cb: 	jbe	.Ltmp693 # Offset: 203
    000000cd: 	movupd	-0x8(%rcx), %xmm0
    000000d2: 	movq	%rdx, %rax
    000000d5: 	shrq	%rax
    000000d8: 	shufpd	$0x1, %xmm0, %xmm0
    000000dd: 	movups	%xmm0, (%rsi)
    000000e0: 	cmpq	$0x1, %rax
    000000e4: 	jne	.Ltmp694 # Offset: 228
.Ltmp695:
    000000e6: 	movq	%rdx, %rdi
    000000e9: 	andq	$-0x2, %rdi
    000000ed: 	movq	%rdi, %rax
    000000f0: 	negq	%rax
    000000f3: 	shlq	$0x3, %rax
    000000f7: 	addq	%rax, %rcx
    000000fa: 	subq	%rax, %rsi
    000000fd: 	cmpq	%rdi, %rdx
    00000100: 	je	.Ltmp690 # Offset: 256
    00000102: 	movsd	(%rcx), %xmm0
    00000106: 	movsd	%xmm0, (%rsi)
    0000010a: 	retq # Offset: 266
    0000010b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp693:
    00000110: 	movsd	(%rcx), %xmm0
    00000114: 	leaq	0x1(%rax), %rdx
    00000118: 	movsd	%xmm0, (%rsi)
    0000011c: 	cmpq	%rdx, %r8
    0000011f: 	jle	.Ltmp690 # Offset: 287
    00000121: 	movsd	-0x8(%rcx), %xmm0
    00000126: 	leaq	0x2(%rax), %rdx
    0000012a: 	movsd	%xmm0, 0x8(%rsi)
    0000012f: 	cmpq	%rdx, %r8
    00000132: 	jle	.Ltmp690 # Offset: 306
    00000134: 	movsd	-0x10(%rcx), %xmm0
    00000139: 	addq	$0x3, %rax
    0000013d: 	movsd	%xmm0, 0x10(%rsi)
    00000142: 	cmpq	%rax, %r8
    00000145: 	jle	.Ltmp690 # Offset: 325
    00000147: 	movsd	-0x18(%rcx), %xmm0
    0000014c: 	movsd	%xmm0, 0x18(%rsi)
.Ltmp690:
    00000151: 	retq # Offset: 337
    00000152: 	nopw	(%rax,%rax) # Size: 6
.Ltmp694:
    00000158: 	movupd	-0x18(%rcx), %xmm0
    0000015d: 	shufpd	$0x1, %xmm0, %xmm0
    00000162: 	movups	%xmm0, 0x10(%rsi)
    00000166: 	jmp	.Ltmp695 # Offset: 358
    0000016b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp691:
    00000170: 	movq	%rdx, %rsi
    00000173: 	xorl	%eax, %eax
    00000175: 	jmp	.Ltmp696 # Offset: 373
DWARF CFI Instructions:
    <empty>
End of Function "_Z20my_fast_reverse_copyIPdS0_EvT_S1_T0_"

Binary Function "_Z15my_fast_reverseIPdEvT_S1_" after disassembly {
  Number      : 150
  State       : disassembled
  Address     : 0xaaf0
  Size        : 0x1ff
  MaxSize     : 0x200
  Offset      : 0xaaf0
  Section     : .text
  Orc Section : .local.text._Z15my_fast_reverseIPdEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0149:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp697 # Offset: 10
    00000010: 	movq	%rsi, %rax
    00000013: 	subq	%rdi, %rax
    00000016: 	leaq	-0x8(%rsi), %rdi
    0000001a: 	movq	%rax, %rdx
    0000001d: 	movq	%rax, %r9
    00000020: 	sarq	$0x3, %rdx
    00000024: 	shrq	$0x3f, %r9
    00000028: 	addq	%rdx, %r9
    0000002b: 	sarq	%r9
    0000002e: 	cmpq	$0x38, %rax
    00000032: 	jle	.Ltmp698 # Offset: 50
    00000038: 	leaq	-0x4(%r9), %rax
    0000003c: 	movq	%rcx, %rdx
    0000003f: 	shrq	$0x2, %rax
    00000043: 	movq	%rax, %r8
    00000046: 	negq	%rax
    00000049: 	shlq	$0x5, %rax
    0000004d: 	leaq	-0x28(%rsi,%rax), %rsi
    00000052: 	movq	%rdi, %rax
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp699:
    00000058: 	movsd	(%rdx), %xmm0
    0000005c: 	movsd	(%rax), %xmm1
    00000060: 	subq	$0x20, %rax
    00000064: 	addq	$0x20, %rdx
    00000068: 	movsd	%xmm1, -0x20(%rdx)
    0000006d: 	movsd	0x18(%rax), %xmm1
    00000072: 	movsd	%xmm0, 0x20(%rax)
    00000077: 	movsd	-0x18(%rdx), %xmm0
    0000007c: 	movsd	%xmm1, -0x18(%rdx)
    00000081: 	movsd	0x10(%rax), %xmm1
    00000086: 	movsd	%xmm0, 0x18(%rax)
    0000008b: 	movsd	-0x10(%rdx), %xmm0
    00000090: 	movsd	%xmm1, -0x10(%rdx)
    00000095: 	movsd	0x8(%rax), %xmm1
    0000009a: 	movsd	%xmm0, 0x10(%rax)
    0000009f: 	movsd	-0x8(%rdx), %xmm0
    000000a4: 	movsd	%xmm1, -0x8(%rdx)
    000000a9: 	movsd	%xmm0, 0x8(%rax)
    000000ae: 	cmpq	%rsi, %rax
    000000b1: 	jne	.Ltmp699 # Offset: 177
    000000b3: 	leaq	0x1(%r8), %rax
    000000b7: 	movq	%rax, %rdx
    000000ba: 	shlq	$0x2, %rax
    000000be: 	shlq	$0x5, %rdx
    000000c2: 	addq	%rdx, %rcx
    000000c5: 	subq	%rdx, %rdi
.Ltmp703:
    000000c8: 	cmpq	%rax, %r9
    000000cb: 	jle	.Ltmp697 # Offset: 203
    000000d1: 	movq	%r9, %rdx
    000000d4: 	movq	%rdi, %r10
    000000d7: 	subq	%rax, %rdx
    000000da: 	leaq	(,%rdx,8), %rsi
    000000e2: 	subq	%rsi, %r10
    000000e5: 	leaq	(%rcx,%rsi), %r8
    000000e9: 	leaq	0x8(%r10), %rsi
    000000ed: 	cmpq	%rsi, %r8
    000000f0: 	leaq	0x8(%rdi), %r8
    000000f4: 	setbe	%sil
    000000f8: 	cmpq	%r8, %rcx
    000000fb: 	setae	%r8b
    000000ff: 	orb	%r8b, %sil
    00000102: 	je	.Ltmp700 # Offset: 258
    00000104: 	leaq	-0x1(%rdx), %rsi
    00000108: 	cmpq	$0x1, %rsi
    0000010c: 	jbe	.Ltmp700 # Offset: 268
    0000010e: 	movupd	(%rcx), %xmm0
    00000112: 	movupd	-0x8(%rdi), %xmm1
    00000117: 	movq	%rdx, %rax
    0000011a: 	shrq	%rax
    0000011d: 	shufpd	$0x1, %xmm1, %xmm1
    00000122: 	shufpd	$0x1, %xmm0, %xmm0
    00000127: 	movups	%xmm1, (%rcx)
    0000012a: 	movups	%xmm0, -0x8(%rdi)
    0000012e: 	cmpq	$0x1, %rax
    00000132: 	jne	.Ltmp701 # Offset: 306
.Ltmp702:
    00000138: 	movq	%rdx, %rax
    0000013b: 	andq	$-0x2, %rax
    0000013f: 	leaq	(,%rax,8), %rsi
    00000147: 	addq	%rsi, %rcx
    0000014a: 	subq	%rsi, %rdi
    0000014d: 	cmpq	%rax, %rdx
    00000150: 	je	.Ltmp697 # Offset: 336
    00000152: 	movsd	(%rcx), %xmm0
    00000156: 	movsd	(%rdi), %xmm1
    0000015a: 	movsd	%xmm1, (%rcx)
    0000015e: 	movsd	%xmm0, (%rdi)
    00000162: 	retq # Offset: 354
    00000163: 	nopl	(%rax,%rax) # Size: 5
.Ltmp700:
    00000168: 	movsd	(%rcx), %xmm0
    0000016c: 	movsd	(%rdi), %xmm1
    00000170: 	leaq	0x1(%rax), %rdx
    00000174: 	movsd	%xmm1, (%rcx)
    00000178: 	movsd	%xmm0, (%rdi)
    0000017c: 	cmpq	%rdx, %r9
    0000017f: 	jle	.Ltmp697 # Offset: 383
    00000181: 	movsd	0x8(%rcx), %xmm0
    00000186: 	movsd	-0x8(%rdi), %xmm1
    0000018b: 	leaq	0x2(%rax), %rdx
    0000018f: 	movsd	%xmm1, 0x8(%rcx)
    00000194: 	movsd	%xmm0, -0x8(%rdi)
    00000199: 	cmpq	%rdx, %r9
    0000019c: 	jle	.Ltmp697 # Offset: 412
    0000019e: 	movsd	0x10(%rcx), %xmm0
    000001a3: 	movsd	-0x10(%rdi), %xmm1
    000001a8: 	addq	$0x3, %rax
    000001ac: 	movsd	%xmm1, 0x10(%rcx)
    000001b1: 	movsd	%xmm0, -0x10(%rdi)
    000001b6: 	cmpq	%rax, %r9
    000001b9: 	jle	.Ltmp697 # Offset: 441
    000001bb: 	movsd	0x18(%rcx), %xmm0
    000001c0: 	movsd	-0x18(%rdi), %xmm1
    000001c5: 	movsd	%xmm1, 0x18(%rcx)
    000001ca: 	movsd	%xmm0, -0x18(%rdi)
.Ltmp697:
    000001cf: 	retq # Offset: 463
.Ltmp701:
    000001d0: 	movupd	0x10(%rcx), %xmm0
    000001d5: 	movupd	-0x18(%rdi), %xmm1
    000001da: 	shufpd	$0x1, %xmm0, %xmm0
    000001df: 	shufpd	$0x1, %xmm1, %xmm1
    000001e4: 	movups	%xmm1, 0x10(%rcx)
    000001e8: 	movups	%xmm0, -0x18(%rdi)
    000001ec: 	jmp	.Ltmp702 # Offset: 492
    000001f1: 	nopl	(%rax) # Size: 7
.Ltmp698:
    000001f8: 	xorl	%eax, %eax
    000001fa: 	jmp	.Ltmp703 # Offset: 506
DWARF CFI Instructions:
    <empty>
End of Function "_Z15my_fast_reverseIPdEvT_S1_"

Binary Function "_Z20my_fast_reverse_copyIPmS0_EvT_S1_T0_" after disassembly {
  Number      : 151
  State       : disassembled
  Address     : 0xacf0
  Size        : 0x16a
  MaxSize     : 0x170
  Offset      : 0xacf0
  Section     : .text
  Orc Section : .local.text._Z20my_fast_reverse_copyIPmS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0150:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp704 # Offset: 10
    00000010: 	movq	%rsi, %rdx
    00000013: 	leaq	-0x8(%rsi), %r8
    00000017: 	subq	%rdi, %rdx
    0000001a: 	movq	%rdx, %r9
    0000001d: 	sarq	$0x3, %r9
    00000021: 	cmpq	$0x18, %rdx
    00000025: 	jle	.Ltmp705 # Offset: 37
    0000002b: 	leaq	-0x4(%r9), %rdi
    0000002f: 	movq	%r8, %rdx
    00000032: 	shrq	$0x2, %rdi
    00000036: 	addq	$0x1, %rdi
    0000003a: 	movq	%rdi, %r10
    0000003d: 	shlq	$0x5, %r10
    00000041: 	leaq	(%rax,%r10), %rsi
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp706:
    00000048: 	movq	(%rdx), %rcx
    0000004b: 	addq	$0x20, %rax
    0000004f: 	subq	$0x20, %rdx
    00000053: 	movq	%rcx, -0x20(%rax)
    00000057: 	movq	0x18(%rdx), %rcx
    0000005b: 	movq	%rcx, -0x18(%rax)
    0000005f: 	movq	0x10(%rdx), %rcx
    00000063: 	movq	%rcx, -0x10(%rax)
    00000067: 	movq	0x8(%rdx), %rcx
    0000006b: 	movq	%rcx, -0x8(%rax)
    0000006f: 	cmpq	%rsi, %rax
    00000072: 	jne	.Ltmp706 # Offset: 114
    00000074: 	subq	%r10, %r8
    00000077: 	leaq	(,%rdi,4), %rax
.Ltmp710:
    0000007f: 	cmpq	%rax, %r9
    00000082: 	jle	.Ltmp704 # Offset: 130
    00000088: 	movq	%r9, %rdx
    0000008b: 	movq	%r8, %r10
    0000008e: 	subq	%rax, %rdx
    00000091: 	leaq	(,%rdx,8), %rcx
    00000099: 	subq	%rcx, %r10
    0000009c: 	leaq	(%rsi,%rcx), %rdi
    000000a0: 	leaq	0x8(%r10), %rcx
    000000a4: 	cmpq	%rcx, %rdi
    000000a7: 	leaq	0x8(%r8), %rdi
    000000ab: 	setbe	%cl
    000000ae: 	cmpq	%rdi, %rsi
    000000b1: 	setae	%dil
    000000b5: 	orb	%dil, %cl
    000000b8: 	je	.Ltmp707 # Offset: 184
    000000ba: 	leaq	-0x1(%rdx), %rcx
    000000be: 	cmpq	$0x2, %rcx
    000000c2: 	jbe	.Ltmp707 # Offset: 194
    000000c4: 	movdqu	-0x8(%r8), %xmm0
    000000ca: 	movq	%rdx, %rax
    000000cd: 	shrq	%rax
    000000d0: 	shufpd	$0x1, %xmm0, %xmm0
    000000d5: 	movups	%xmm0, (%rsi)
    000000d8: 	cmpq	$0x1, %rax
    000000dc: 	jne	.Ltmp708 # Offset: 220
.Ltmp709:
    000000de: 	movq	%rdx, %rcx
    000000e1: 	andq	$-0x2, %rcx
    000000e5: 	movq	%rcx, %rax
    000000e8: 	negq	%rax
    000000eb: 	shlq	$0x3, %rax
    000000ef: 	addq	%rax, %r8
    000000f2: 	subq	%rax, %rsi
    000000f5: 	cmpq	%rcx, %rdx
    000000f8: 	je	.Ltmp704 # Offset: 248
    000000fa: 	movq	(%r8), %rax
    000000fd: 	movq	%rax, (%rsi)
    00000100: 	retq # Offset: 256
    00000101: 	nopl	(%rax) # Size: 7
.Ltmp707:
    00000108: 	movq	(%r8), %rdx
    0000010b: 	movq	%rdx, (%rsi)
    0000010e: 	leaq	0x1(%rax), %rdx
    00000112: 	cmpq	%rdx, %r9
    00000115: 	jle	.Ltmp704 # Offset: 277
    00000117: 	movq	-0x8(%r8), %rdx
    0000011b: 	movq	%rdx, 0x8(%rsi)
    0000011f: 	leaq	0x2(%rax), %rdx
    00000123: 	cmpq	%rdx, %r9
    00000126: 	jle	.Ltmp704 # Offset: 294
    00000128: 	movq	-0x10(%r8), %rdx
    0000012c: 	addq	$0x3, %rax
    00000130: 	movq	%rdx, 0x10(%rsi)
    00000134: 	cmpq	%rax, %r9
    00000137: 	jle	.Ltmp704 # Offset: 311
    00000139: 	movq	-0x18(%r8), %rax
    0000013d: 	movq	%rax, 0x18(%rsi)
.Ltmp704:
    00000141: 	retq # Offset: 321
    00000142: 	nopw	(%rax,%rax) # Size: 6
.Ltmp708:
    00000148: 	movdqu	-0x18(%r8), %xmm0
    0000014e: 	shufpd	$0x1, %xmm0, %xmm0
    00000153: 	movups	%xmm0, 0x10(%rsi)
    00000157: 	jmp	.Ltmp709 # Offset: 343
    00000159: 	nopl	(%rax) # Size: 7
.Ltmp705:
    00000160: 	movq	%rax, %rsi
    00000163: 	xorl	%eax, %eax
    00000165: 	jmp	.Ltmp710 # Offset: 357
DWARF CFI Instructions:
    <empty>
End of Function "_Z20my_fast_reverse_copyIPmS0_EvT_S1_T0_"

Binary Function "_Z15my_fast_reverseIPmEvT_S1_" after disassembly {
  Number      : 152
  State       : disassembled
  Address     : 0xae60
  Size        : 0x1e0
  MaxSize     : 0x1e0
  Offset      : 0xae60
  Section     : .text
  Orc Section : .local.text._Z15my_fast_reverseIPmEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0151:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rcx
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp711 # Offset: 10
    00000010: 	movq	%rsi, %rax
    00000013: 	leaq	-0x8(%rsi), %r8
    00000017: 	subq	%rdi, %rax
    0000001a: 	movq	%rax, %rdx
    0000001d: 	movq	%rax, %r10
    00000020: 	sarq	$0x3, %rdx
    00000024: 	shrq	$0x3f, %r10
    00000028: 	addq	%rdx, %r10
    0000002b: 	sarq	%r10
    0000002e: 	cmpq	$0x38, %rax
    00000032: 	jle	.Ltmp712 # Offset: 50
    00000038: 	leaq	-0x4(%r10), %r9
    0000003c: 	movq	%rdi, %rdx
    0000003f: 	shrq	$0x2, %r9
    00000043: 	movq	%r9, %rax
    00000046: 	negq	%rax
    00000049: 	shlq	$0x5, %rax
    0000004d: 	leaq	-0x28(%rsi,%rax), %r11
    00000052: 	movq	%r8, %rax
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp713:
    00000058: 	movq	(%rdx), %rsi
    0000005b: 	movq	(%rax), %rdi
    0000005e: 	subq	$0x20, %rax
    00000062: 	addq	$0x20, %rdx
    00000066: 	movq	%rdi, -0x20(%rdx)
    0000006a: 	movq	0x18(%rax), %rdi
    0000006e: 	movq	%rsi, 0x20(%rax)
    00000072: 	movq	-0x18(%rdx), %rsi
    00000076: 	movq	%rdi, -0x18(%rdx)
    0000007a: 	movq	0x10(%rax), %rdi
    0000007e: 	movq	%rsi, 0x18(%rax)
    00000082: 	movq	-0x10(%rdx), %rsi
    00000086: 	movq	%rdi, -0x10(%rdx)
    0000008a: 	movq	0x8(%rax), %rdi
    0000008e: 	movq	%rsi, 0x10(%rax)
    00000092: 	movq	-0x8(%rdx), %rsi
    00000096: 	movq	%rdi, -0x8(%rdx)
    0000009a: 	movq	%rsi, 0x8(%rax)
    0000009e: 	cmpq	%r11, %rax
    000000a1: 	jne	.Ltmp713 # Offset: 161
    000000a3: 	addq	$0x1, %r9
    000000a7: 	movq	%r9, %rax
    000000aa: 	shlq	$0x2, %r9
    000000ae: 	shlq	$0x5, %rax
    000000b2: 	addq	%rax, %rcx
    000000b5: 	subq	%rax, %r8
.Ltmp717:
    000000b8: 	cmpq	%r9, %r10
    000000bb: 	jle	.Ltmp711 # Offset: 187
    000000c1: 	movq	%r10, %rax
    000000c4: 	movq	%r8, %rdi
    000000c7: 	subq	%r9, %rax
    000000ca: 	leaq	(,%rax,8), %rdx
    000000d2: 	subq	%rdx, %rdi
    000000d5: 	leaq	(%rcx,%rdx), %rsi
    000000d9: 	leaq	0x8(%rdi), %rdx
    000000dd: 	cmpq	%rdx, %rsi
    000000e0: 	leaq	0x8(%r8), %rsi
    000000e4: 	setbe	%dl
    000000e7: 	cmpq	%rsi, %rcx
    000000ea: 	setae	%sil
    000000ee: 	orb	%sil, %dl
    000000f1: 	je	.Ltmp714 # Offset: 241
    000000f3: 	leaq	-0x1(%rax), %rdx
    000000f7: 	cmpq	$0x1, %rdx
    000000fb: 	jbe	.Ltmp714 # Offset: 251
    000000fd: 	movdqu	(%rcx), %xmm0
    00000101: 	movdqu	-0x8(%r8), %xmm1
    00000107: 	movq	%rax, %rdx
    0000010a: 	shrq	%rdx
    0000010d: 	shufpd	$0x1, %xmm1, %xmm1
    00000112: 	shufpd	$0x1, %xmm0, %xmm0
    00000117: 	movups	%xmm1, (%rcx)
    0000011a: 	movups	%xmm0, -0x8(%r8)
    0000011f: 	cmpq	$0x1, %rdx
    00000123: 	jne	.Ltmp715 # Offset: 291
.Ltmp716:
    00000129: 	movq	%rax, %rdx
    0000012c: 	andq	$-0x2, %rdx
    00000130: 	leaq	(,%rdx,8), %rsi
    00000138: 	addq	%rsi, %rcx
    0000013b: 	subq	%rsi, %r8
    0000013e: 	cmpq	%rdx, %rax
    00000141: 	je	.Ltmp711 # Offset: 321
    00000143: 	movq	(%rcx), %rax
    00000146: 	movq	(%r8), %rdx
    00000149: 	movq	%rdx, (%rcx)
    0000014c: 	movq	%rax, (%r8)
    0000014f: 	retq # Offset: 335
.Ltmp714:
    00000150: 	movq	(%rcx), %rax
    00000153: 	movq	(%r8), %rdx
    00000156: 	movq	%rdx, (%rcx)
    00000159: 	movq	%rax, (%r8)
    0000015c: 	leaq	0x1(%r9), %rax
    00000160: 	cmpq	%rax, %r10
    00000163: 	jle	.Ltmp711 # Offset: 355
    00000165: 	movq	0x8(%rcx), %rax
    00000169: 	movq	-0x8(%r8), %rdx
    0000016d: 	movq	%rdx, 0x8(%rcx)
    00000171: 	movq	%rax, -0x8(%r8)
    00000175: 	leaq	0x2(%r9), %rax
    00000179: 	cmpq	%rax, %r10
    0000017c: 	jle	.Ltmp711 # Offset: 380
    0000017e: 	movq	0x10(%rcx), %rax
    00000182: 	movq	-0x10(%r8), %rdx
    00000186: 	addq	$0x3, %r9
    0000018a: 	movq	%rdx, 0x10(%rcx)
    0000018e: 	movq	%rax, -0x10(%r8)
    00000192: 	cmpq	%r9, %r10
    00000195: 	jle	.Ltmp711 # Offset: 405
    00000197: 	movq	0x18(%rcx), %rax
    0000019b: 	movq	-0x18(%r8), %rdx
    0000019f: 	movq	%rdx, 0x18(%rcx)
    000001a3: 	movq	%rax, -0x18(%r8)
.Ltmp711:
    000001a7: 	retq # Offset: 423
    000001a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp715:
    000001b0: 	movdqu	0x10(%rcx), %xmm0
    000001b5: 	movdqu	-0x18(%r8), %xmm1
    000001bb: 	shufpd	$0x1, %xmm0, %xmm0
    000001c0: 	shufpd	$0x1, %xmm1, %xmm1
    000001c5: 	movups	%xmm1, 0x10(%rcx)
    000001c9: 	movups	%xmm0, -0x18(%r8)
    000001ce: 	jmp	.Ltmp716 # Offset: 462
    000001d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp712:
    000001d8: 	xorl	%r9d, %r9d
    000001db: 	jmp	.Ltmp717 # Offset: 475
DWARF CFI Instructions:
    <empty>
End of Function "_Z15my_fast_reverseIPmEvT_S1_"

Binary Function "_Z20my_fast_reverse_copyIPfS0_EvT_S1_T0_" after disassembly {
  Number      : 153
  State       : disassembled
  Address     : 0xb040
  Size        : 0x202
  MaxSize     : 0x210
  Offset      : 0xb040
  Section     : .text
  Orc Section : .local.text._Z20my_fast_reverse_copyIPfS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0152:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp718 # Offset: 7
    0000000d: 	movq	%rdx, %rcx
    00000010: 	movq	%rsi, %rdx
    00000013: 	pushq	%rbx
    00000014: 	movq	%rsi, %rax
    00000017: 	subq	%rdi, %rdx
    0000001a: 	leaq	-0x4(%rsi), %r8
    0000001e: 	movq	%rdx, %r9
    00000021: 	sarq	$0x2, %r9
    00000025: 	cmpq	$0xc, %rdx
    00000029: 	jle	.Ltmp719 # Offset: 41
    0000002f: 	leaq	-0x4(%r9), %rdx
    00000033: 	movq	%rax, %rbx
    00000036: 	shrq	$0x2, %rdx
    0000003a: 	leaq	0x1(%rdx), %rsi
    0000003e: 	movq	%rsi, %rdi
    00000041: 	shlq	$0x4, %rdi
    00000045: 	movq	%rdi, %r11
    00000048: 	leaq	(%rcx,%rdi), %r10
    0000004c: 	subq	%rdi, %rbx
    0000004f: 	negq	%r11
    00000052: 	cmpq	%rbx, %r10
    00000055: 	jbe	.Ltmp720 # Offset: 85
    00000057: 	cmpq	%rcx, %rax
    0000005a: 	ja	.Ltmp721 # Offset: 90
.Ltmp720:
    00000060: 	leaq	-0x10(%rax), %rdx
    00000064: 	xorl	%eax, %eax
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp722:
    00000070: 	movups	(%rdx), %xmm0
    00000073: 	movq	%rax, %rdi
    00000076: 	addq	$0x1, %rax
    0000007a: 	subq	$0x10, %rdx
    0000007e: 	shlq	$0x4, %rdi
    00000082: 	shufps	$0x1b, %xmm0, %xmm0
    00000086: 	movups	%xmm0, (%rcx,%rdi)
    0000008a: 	cmpq	%rsi, %rax
    0000008d: 	jb	.Ltmp722 # Offset: 141
.Ltmp726:
    0000008f: 	addq	%r11, %r8
    00000092: 	shlq	$0x2, %rsi
.Ltmp727:
    00000096: 	cmpq	%rsi, %r9
    00000099: 	jle	.Ltmp723 # Offset: 153
    0000009f: 	movq	%r9, %rcx
    000000a2: 	movq	%r8, %rdi
    000000a5: 	subq	%rsi, %rcx
    000000a8: 	leaq	(,%rcx,4), %rax
    000000b0: 	subq	%rax, %rdi
    000000b3: 	leaq	(%r10,%rax), %rdx
    000000b7: 	leaq	0x4(%rdi), %rax
    000000bb: 	cmpq	%rax, %rdx
    000000be: 	leaq	0x4(%r8), %rdx
    000000c2: 	setbe	%al
    000000c5: 	cmpq	%rdx, %r10
    000000c8: 	setae	%dl
    000000cb: 	orb	%dl, %al
    000000cd: 	je	.Ltmp724 # Offset: 205
    000000d3: 	leaq	-0x1(%rcx), %rax
    000000d7: 	cmpq	$0x2, %rax
    000000db: 	jbe	.Ltmp724 # Offset: 219
    000000e1: 	movq	%rcx, %rdx
    000000e4: 	movups	-0xc(%r8), %xmm0
    000000e9: 	andq	$-0x4, %rdx
    000000ed: 	movq	%rdx, %rax
    000000f0: 	shufps	$0x1b, %xmm0, %xmm0
    000000f4: 	addq	%rdx, %rsi
    000000f7: 	movups	%xmm0, (%r10)
    000000fb: 	negq	%rax
    000000fe: 	shlq	$0x2, %rax
    00000102: 	addq	%rax, %r8
    00000105: 	subq	%rax, %r10
    00000108: 	cmpq	%rdx, %rcx
    0000010b: 	je	.Ltmp723 # Offset: 267
    0000010d: 	movss	(%r8), %xmm0
    00000112: 	leaq	0x1(%rsi), %rax
    00000116: 	movss	%xmm0, (%r10)
    0000011b: 	cmpq	%rax, %r9
    0000011e: 	jle	.Ltmp723 # Offset: 286
    00000120: 	movss	-0x4(%r8), %xmm0
    00000126: 	addq	$0x2, %rsi
    0000012a: 	movss	%xmm0, 0x4(%r10)
    00000130: 	cmpq	%rsi, %r9
    00000133: 	jle	.Ltmp723 # Offset: 307
    00000135: 	movss	-0x8(%r8), %xmm0
    0000013b: 	movss	%xmm0, 0x8(%r10)
.Ltmp723:
    00000141: 	popq	%rbx
    00000142: 	retq # Offset: 322
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp718:
    00000148: 	retq # Offset: 328
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp721:
    00000150: 	negq	%rdx
    00000153: 	shlq	$0x4, %rdx
    00000157: 	leaq	-0x14(%rax,%rdx), %rdx
    0000015c: 	movq	%r8, %rax
    0000015f: 	nop # Size: 1
.Ltmp725:
    00000160: 	movss	(%rax), %xmm0
    00000164: 	subq	$0x10, %rax
    00000168: 	addq	$0x10, %rcx
    0000016c: 	movss	%xmm0, -0x10(%rcx)
    00000171: 	movss	0xc(%rax), %xmm0
    00000176: 	movss	%xmm0, -0xc(%rcx)
    0000017b: 	movss	0x8(%rax), %xmm0
    00000180: 	movss	%xmm0, -0x8(%rcx)
    00000185: 	movss	0x4(%rax), %xmm0
    0000018a: 	movss	%xmm0, -0x4(%rcx)
    0000018f: 	cmpq	%rax, %rdx
    00000192: 	jne	.Ltmp725 # Offset: 402
    00000194: 	jmp	.Ltmp726 # Offset: 404
    00000199: 	nopl	(%rax) # Size: 7
.Ltmp724:
    000001a0: 	movss	(%r8), %xmm0
    000001a5: 	leaq	0x1(%rsi), %rax
    000001a9: 	movss	%xmm0, (%r10)
    000001ae: 	cmpq	%rax, %r9
    000001b1: 	jle	.Ltmp723 # Offset: 433
    000001b3: 	movss	-0x4(%r8), %xmm0
    000001b9: 	leaq	0x2(%rsi), %rax
    000001bd: 	movss	%xmm0, 0x4(%r10)
    000001c3: 	cmpq	%rax, %r9
    000001c6: 	jle	.Ltmp723 # Offset: 454
    000001cc: 	movss	-0x8(%r8), %xmm0
    000001d2: 	addq	$0x3, %rsi
    000001d6: 	movss	%xmm0, 0x8(%r10)
    000001dc: 	cmpq	%rsi, %r9
    000001df: 	jle	.Ltmp723 # Offset: 479
    000001e5: 	movss	-0xc(%r8), %xmm0
    000001eb: 	movss	%xmm0, 0xc(%r10)
    000001f1: 	popq	%rbx
    000001f2: 	retq # Offset: 498
    000001f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp719:
    000001f8: 	movq	%rcx, %r10
    000001fb: 	xorl	%esi, %esi
    000001fd: 	jmp	.Ltmp727 # Offset: 509
DWARF CFI Instructions:
    <empty>
End of Function "_Z20my_fast_reverse_copyIPfS0_EvT_S1_T0_"

Binary Function "_Z15my_fast_reverseIPfEvT_S1_" after disassembly {
  Number      : 154
  State       : disassembled
  Address     : 0xb250
  Size        : 0x297
  MaxSize     : 0x2a0
  Offset      : 0xb250
  Section     : .text
  Orc Section : .local.text._Z15my_fast_reverseIPfEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0153:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp728 # Offset: 10
    00000010: 	movq	%rsi, %rdx
    00000013: 	subq	%rdi, %rdx
    00000016: 	movq	%rdx, %rdi
    00000019: 	movq	%rdx, %rcx
    0000001c: 	sarq	$0x2, %rdi
    00000020: 	shrq	$0x3f, %rcx
    00000024: 	addq	%rdi, %rcx
    00000027: 	leaq	-0x4(%rsi), %rdi
    0000002b: 	sarq	%rcx
    0000002e: 	movq	%rcx, %r9
    00000031: 	cmpq	$0x1c, %rdx
    00000035: 	jle	.Ltmp729 # Offset: 53
    0000003b: 	leaq	-0x4(%rcx), %rdx
    0000003f: 	movq	%rsi, %r11
    00000042: 	shrq	$0x2, %rdx
    00000046: 	leaq	0x1(%rdx), %rcx
    0000004a: 	movq	%rcx, %rdx
    0000004d: 	shlq	$0x4, %rdx
    00000051: 	movq	%rdx, %r10
    00000054: 	leaq	(%rax,%rdx), %r8
    00000058: 	subq	%rdx, %r11
    0000005b: 	negq	%r10
    0000005e: 	cmpq	%r11, %r8
    00000061: 	jbe	.Ltmp730 # Offset: 97
    00000063: 	cmpq	%rsi, %rax
    00000066: 	jb	.Ltmp731 # Offset: 102
.Ltmp730:
    0000006c: 	subq	$0x10, %rsi
    00000070: 	xorl	%edx, %edx
    00000072: 	nopw	(%rax,%rax) # Size: 6
.Ltmp732:
    00000078: 	movups	(%rax), %xmm0
    0000007b: 	movups	(%rsi), %xmm1
    0000007e: 	addq	$0x1, %rdx
    00000082: 	subq	$0x10, %rsi
    00000086: 	addq	$0x10, %rax
    0000008a: 	shufps	$0x1b, %xmm1, %xmm1
    0000008e: 	shufps	$0x1b, %xmm0, %xmm0
    00000092: 	movups	%xmm1, -0x10(%rax)
    00000096: 	movups	%xmm0, 0x10(%rsi)
    0000009a: 	cmpq	%rcx, %rdx
    0000009d: 	jb	.Ltmp732 # Offset: 157
.Ltmp737:
    0000009f: 	addq	%r10, %rdi
    000000a2: 	shlq	$0x2, %rcx
.Ltmp738:
    000000a6: 	cmpq	%rcx, %r9
    000000a9: 	jle	.Ltmp728 # Offset: 169
    000000af: 	movq	%r9, %rax
    000000b2: 	movq	%rdi, %r10
    000000b5: 	subq	%rcx, %rax
    000000b8: 	leaq	(,%rax,4), %rdx
    000000c0: 	subq	%rdx, %r10
    000000c3: 	leaq	(%r8,%rdx), %rsi
    000000c7: 	leaq	0x4(%r10), %rdx
    000000cb: 	cmpq	%rdx, %rsi
    000000ce: 	leaq	0x4(%rdi), %rsi
    000000d2: 	setbe	%dl
    000000d5: 	cmpq	%rsi, %r8
    000000d8: 	setae	%sil
    000000dc: 	orb	%sil, %dl
    000000df: 	je	.Ltmp733 # Offset: 223
    000000e5: 	cmpq	$0x1, %rax
    000000e9: 	je	.Ltmp733 # Offset: 233
    000000ef: 	leaq	-0x1(%rax), %rdx
    000000f3: 	cmpq	$0x2, %rdx
    000000f7: 	jbe	.Ltmp734 # Offset: 247
    000000fd: 	movq	%rax, %rdx
    00000100: 	movups	(%r8), %xmm0
    00000104: 	movups	-0xc(%rdi), %xmm1
    00000108: 	movq	%rdi, %rcx
    0000010b: 	andq	$-0x4, %rdx
    0000010f: 	leaq	(,%rdx,4), %r9
    00000117: 	shufps	$0x1b, %xmm1, %xmm1
    0000011b: 	shufps	$0x1b, %xmm0, %xmm0
    0000011f: 	movups	%xmm1, (%r8)
    00000123: 	leaq	(%r8,%r9), %rsi
    00000127: 	movups	%xmm0, -0xc(%rdi)
    0000012b: 	subq	%r9, %rcx
    0000012e: 	cmpq	%rdx, %rax
    00000131: 	je	.Ltmp728 # Offset: 305
    00000137: 	subq	%rdx, %rax
    0000013a: 	cmpq	$0x1, %rax
    0000013e: 	je	.Ltmp735 # Offset: 318
.Ltmp739:
    00000140: 	leaq	(%r8,%rdx,4), %r8
    00000144: 	notq	%rdx
    00000147: 	leaq	(%rdi,%rdx,4), %rdx
    0000014b: 	movq	(%r8), %xmm0
    00000150: 	movq	(%rdx), %xmm1
    00000154: 	shufps	$0xe1, %xmm0, %xmm0
    00000158: 	shufps	$0xe1, %xmm1, %xmm1
    0000015c: 	movlps	%xmm1, (%r8)
    00000160: 	movlps	%xmm0, (%rdx)
    00000163: 	movq	%rax, %rdx
    00000166: 	andq	$-0x2, %rdx
    0000016a: 	leaq	(,%rdx,4), %rdi
    00000172: 	addq	%rdi, %rsi
    00000175: 	subq	%rdi, %rcx
    00000178: 	cmpq	%rax, %rdx
    0000017b: 	je	.Ltmp728 # Offset: 379
.Ltmp735:
    00000181: 	movss	(%rsi), %xmm0
    00000185: 	movss	(%rcx), %xmm1
    00000189: 	movss	%xmm1, (%rsi)
    0000018d: 	movss	%xmm0, (%rcx)
    00000191: 	retq # Offset: 401
    00000192: 	nopw	(%rax,%rax) # Size: 6
.Ltmp733:
    00000198: 	movss	(%r8), %xmm0
    0000019d: 	movss	(%rdi), %xmm1
    000001a1: 	leaq	0x1(%rcx), %rax
    000001a5: 	movss	%xmm1, (%r8)
    000001aa: 	movss	%xmm0, (%rdi)
    000001ae: 	cmpq	%rax, %r9
    000001b1: 	jle	.Ltmp728 # Offset: 433
    000001b3: 	movss	0x4(%r8), %xmm0
    000001b9: 	movss	-0x4(%rdi), %xmm1
    000001be: 	leaq	0x2(%rcx), %rax
    000001c2: 	movss	%xmm1, 0x4(%r8)
    000001c8: 	movss	%xmm0, -0x4(%rdi)
    000001cd: 	cmpq	%rax, %r9
    000001d0: 	jle	.Ltmp728 # Offset: 464
    000001d2: 	movss	0x8(%r8), %xmm0
    000001d8: 	movss	-0x8(%rdi), %xmm1
    000001dd: 	addq	$0x3, %rcx
    000001e1: 	movss	%xmm1, 0x8(%r8)
    000001e7: 	movss	%xmm0, -0x8(%rdi)
    000001ec: 	cmpq	%rcx, %r9
    000001ef: 	jle	.Ltmp728 # Offset: 495
    000001f1: 	movss	0xc(%r8), %xmm0
    000001f7: 	movss	-0xc(%rdi), %xmm1
    000001fc: 	movss	%xmm1, 0xc(%r8)
    00000202: 	movss	%xmm0, -0xc(%rdi)
.Ltmp728:
    00000207: 	retq # Offset: 519
    00000208: 	nopl	(%rax,%rax) # Size: 8
.Ltmp731:
    00000210: 	movq	%rdi, %rdx
    00000213: 	nopl	(%rax,%rax) # Size: 5
.Ltmp736:
    00000218: 	movss	(%rdx), %xmm1
    0000021c: 	movss	(%rax), %xmm0
    00000220: 	addq	$0x10, %rax
    00000224: 	subq	$0x10, %rdx
    00000228: 	movss	%xmm1, -0x10(%rax)
    0000022d: 	movss	0xc(%rdx), %xmm1
    00000232: 	movss	%xmm0, 0x10(%rdx)
    00000237: 	movss	-0xc(%rax), %xmm0
    0000023c: 	movss	%xmm1, -0xc(%rax)
    00000241: 	movss	0x8(%rdx), %xmm1
    00000246: 	movss	%xmm0, 0xc(%rdx)
    0000024b: 	movss	-0x8(%rax), %xmm0
    00000250: 	movss	%xmm1, -0x8(%rax)
    00000255: 	movss	0x4(%rdx), %xmm1
    0000025a: 	movss	%xmm0, 0x8(%rdx)
    0000025f: 	movss	-0x4(%rax), %xmm0
    00000264: 	movss	%xmm1, -0x4(%rax)
    00000269: 	movss	%xmm0, 0x4(%rdx)
    0000026e: 	cmpq	%rax, %r8
    00000271: 	jne	.Ltmp736 # Offset: 625
    00000273: 	jmp	.Ltmp737 # Offset: 627
    00000278: 	nopl	(%rax,%rax) # Size: 8
.Ltmp729:
    00000280: 	movq	%rax, %r8
    00000283: 	xorl	%ecx, %ecx
    00000285: 	jmp	.Ltmp738 # Offset: 645
.Ltmp734:
    0000028a: 	movq	%rdi, %rcx
    0000028d: 	movq	%r8, %rsi
    00000290: 	xorl	%edx, %edx
    00000292: 	jmp	.Ltmp739 # Offset: 658
DWARF CFI Instructions:
    <empty>
End of Function "_Z15my_fast_reverseIPfEvT_S1_"

Binary Function "_Z20my_fast_reverse_copyIPiS0_EvT_S1_T0_" after disassembly {
  Number      : 155
  State       : disassembled
  Address     : 0xb4f0
  Size        : 0x1da
  MaxSize     : 0x1e0
  Offset      : 0xb4f0
  Section     : .text
  Orc Section : .local.text._Z20my_fast_reverse_copyIPiS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0154:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp740 # Offset: 10
    00000010: 	movq	%rdx, %rsi
    00000013: 	movq	%rax, %rdx
    00000016: 	pushq	%rbx
    00000017: 	subq	%rdi, %rdx
    0000001a: 	leaq	-0x4(%rax), %rdi
    0000001e: 	movq	%rdx, %r8
    00000021: 	sarq	$0x2, %r8
    00000025: 	cmpq	$0xc, %rdx
    00000029: 	jle	.Ltmp741 # Offset: 41
    0000002f: 	leaq	-0x4(%r8), %rdx
    00000033: 	movq	%rax, %rbx
    00000036: 	shrq	$0x2, %rdx
    0000003a: 	leaq	0x1(%rdx), %r10
    0000003e: 	movq	%r10, %rcx
    00000041: 	shlq	$0x4, %rcx
    00000045: 	movq	%rcx, %r11
    00000048: 	leaq	(%rsi,%rcx), %r9
    0000004c: 	subq	%rcx, %rbx
    0000004f: 	negq	%r11
    00000052: 	cmpq	%rbx, %r9
    00000055: 	jbe	.Ltmp742 # Offset: 85
    00000057: 	cmpq	%rsi, %rax
    0000005a: 	ja	.Ltmp743 # Offset: 90
.Ltmp742:
    00000060: 	leaq	-0x10(%rax), %rdx
    00000064: 	xorl	%eax, %eax
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp744:
    00000070: 	movdqu	(%rdx), %xmm1
    00000074: 	movq	%rax, %rcx
    00000077: 	addq	$0x1, %rax
    0000007b: 	subq	$0x10, %rdx
    0000007f: 	shlq	$0x4, %rcx
    00000083: 	pshufd	$0x1b, %xmm1, %xmm0
    00000088: 	movups	%xmm0, (%rsi,%rcx)
    0000008c: 	cmpq	%r10, %rax
    0000008f: 	jb	.Ltmp744 # Offset: 143
.Ltmp748:
    00000091: 	addq	%r11, %rdi
    00000094: 	leaq	(,%r10,4), %rax
.Ltmp749:
    0000009c: 	cmpq	%rax, %r8
    0000009f: 	jle	.Ltmp745 # Offset: 159
    000000a5: 	movq	%r8, %rsi
    000000a8: 	movq	%rdi, %r10
    000000ab: 	subq	%rax, %rsi
    000000ae: 	leaq	(,%rsi,4), %rdx
    000000b6: 	subq	%rdx, %r10
    000000b9: 	leaq	(%r9,%rdx), %rcx
    000000bd: 	leaq	0x4(%r10), %rdx
    000000c1: 	cmpq	%rdx, %rcx
    000000c4: 	leaq	0x4(%rdi), %rcx
    000000c8: 	setbe	%dl
    000000cb: 	cmpq	%rcx, %r9
    000000ce: 	setae	%cl
    000000d1: 	orb	%cl, %dl
    000000d3: 	je	.Ltmp746 # Offset: 211
    000000d9: 	leaq	-0x1(%rsi), %rdx
    000000dd: 	cmpq	$0x2, %rdx
    000000e1: 	jbe	.Ltmp746 # Offset: 225
    000000e7: 	movq	%rsi, %rcx
    000000ea: 	movdqu	-0xc(%rdi), %xmm2
    000000ef: 	andq	$-0x4, %rcx
    000000f3: 	movq	%rcx, %rdx
    000000f6: 	pshufd	$0x1b, %xmm2, %xmm0
    000000fb: 	addq	%rcx, %rax
    000000fe: 	negq	%rdx
    00000101: 	movups	%xmm0, (%r9)
    00000105: 	shlq	$0x2, %rdx
    00000109: 	addq	%rdx, %rdi
    0000010c: 	subq	%rdx, %r9
    0000010f: 	cmpq	%rcx, %rsi
    00000112: 	je	.Ltmp745 # Offset: 274
    00000114: 	movl	(%rdi), %edx
    00000116: 	movl	%edx, (%r9)
    00000119: 	leaq	0x1(%rax), %rdx
    0000011d: 	cmpq	%rdx, %r8
    00000120: 	jle	.Ltmp745 # Offset: 288
    00000122: 	movl	-0x4(%rdi), %edx
    00000125: 	addq	$0x2, %rax
    00000129: 	movl	%edx, 0x4(%r9)
    0000012d: 	cmpq	%rax, %r8
    00000130: 	jle	.Ltmp745 # Offset: 304
    00000132: 	movl	-0x8(%rdi), %eax
    00000135: 	movl	%eax, 0x8(%r9)
.Ltmp745:
    00000139: 	popq	%rbx
    0000013a: 	retq # Offset: 314
    0000013b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp740:
    00000140: 	retq # Offset: 320
    00000141: 	nopl	(%rax) # Size: 7
.Ltmp743:
    00000148: 	negq	%rdx
    0000014b: 	shlq	$0x4, %rdx
    0000014f: 	leaq	-0x14(%rax,%rdx), %rcx
    00000154: 	movq	%rdi, %rax
    00000157: 	nopw	(%rax,%rax) # Size: 9
.Ltmp747:
    00000160: 	movl	(%rax), %edx
    00000162: 	subq	$0x10, %rax
    00000166: 	addq	$0x10, %rsi
    0000016a: 	movl	%edx, -0x10(%rsi)
    0000016d: 	movl	0xc(%rax), %edx
    00000170: 	movl	%edx, -0xc(%rsi)
    00000173: 	movl	0x8(%rax), %edx
    00000176: 	movl	%edx, -0x8(%rsi)
    00000179: 	movl	0x4(%rax), %edx
    0000017c: 	movl	%edx, -0x4(%rsi)
    0000017f: 	cmpq	%rax, %rcx
    00000182: 	jne	.Ltmp747 # Offset: 386
    00000184: 	jmp	.Ltmp748 # Offset: 388
    00000189: 	nopl	(%rax) # Size: 7
.Ltmp746:
    00000190: 	movl	(%rdi), %edx
    00000192: 	movl	%edx, (%r9)
    00000195: 	leaq	0x1(%rax), %rdx
    00000199: 	cmpq	%rdx, %r8
    0000019c: 	jle	.Ltmp745 # Offset: 412
    0000019e: 	movl	-0x4(%rdi), %edx
    000001a1: 	movl	%edx, 0x4(%r9)
    000001a5: 	leaq	0x2(%rax), %rdx
    000001a9: 	cmpq	%rdx, %r8
    000001ac: 	jle	.Ltmp745 # Offset: 428
    000001ae: 	movl	-0x8(%rdi), %edx
    000001b1: 	addq	$0x3, %rax
    000001b5: 	movl	%edx, 0x8(%r9)
    000001b9: 	cmpq	%rax, %r8
    000001bc: 	jle	.Ltmp745 # Offset: 444
    000001c2: 	movl	-0xc(%rdi), %eax
    000001c5: 	movl	%eax, 0xc(%r9)
    000001c9: 	popq	%rbx
    000001ca: 	retq # Offset: 458
    000001cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp741:
    000001d0: 	movq	%rsi, %r9
    000001d3: 	xorl	%eax, %eax
    000001d5: 	jmp	.Ltmp749 # Offset: 469
DWARF CFI Instructions:
    <empty>
End of Function "_Z20my_fast_reverse_copyIPiS0_EvT_S1_T0_"

Binary Function "_Z15my_fast_reverseIPiEvT_S1_" after disassembly {
  Number      : 156
  State       : disassembled
  Address     : 0xb6d0
  Size        : 0x257
  MaxSize     : 0x260
  Offset      : 0xb6d0
  Section     : .text
  Orc Section : .local.text._Z15my_fast_reverseIPiEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0155:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp750 # Offset: 10
    00000010: 	movq	%rsi, %rdx
    00000013: 	subq	%rdi, %rdx
    00000016: 	movq	%rdx, %rdi
    00000019: 	movq	%rdx, %rcx
    0000001c: 	sarq	$0x2, %rdi
    00000020: 	shrq	$0x3f, %rcx
    00000024: 	addq	%rdi, %rcx
    00000027: 	leaq	-0x4(%rsi), %rdi
    0000002b: 	sarq	%rcx
    0000002e: 	movq	%rcx, %r9
    00000031: 	cmpq	$0x1c, %rdx
    00000035: 	jle	.Ltmp751 # Offset: 53
    0000003b: 	leaq	-0x4(%rcx), %rdx
    0000003f: 	movq	%rsi, %r10
    00000042: 	shrq	$0x2, %rdx
    00000046: 	leaq	0x1(%rdx), %rcx
    0000004a: 	movq	%rcx, %rdx
    0000004d: 	shlq	$0x4, %rdx
    00000051: 	movq	%rdx, %r11
    00000054: 	leaq	(%rax,%rdx), %r8
    00000058: 	subq	%rdx, %r10
    0000005b: 	negq	%r11
    0000005e: 	cmpq	%r10, %r8
    00000061: 	jbe	.Ltmp752 # Offset: 97
    00000063: 	cmpq	%rsi, %rax
    00000066: 	jb	.Ltmp753 # Offset: 102
.Ltmp752:
    0000006c: 	subq	$0x10, %rsi
    00000070: 	xorl	%edx, %edx
    00000072: 	nopw	(%rax,%rax) # Size: 6
.Ltmp754:
    00000078: 	movdqu	(%rax), %xmm0
    0000007c: 	movdqu	(%rsi), %xmm2
    00000080: 	addq	$0x1, %rdx
    00000084: 	subq	$0x10, %rsi
    00000088: 	addq	$0x10, %rax
    0000008c: 	pshufd	$0x1b, %xmm2, %xmm1
    00000091: 	pshufd	$0x1b, %xmm0, %xmm0
    00000096: 	movups	%xmm1, -0x10(%rax)
    0000009a: 	movups	%xmm0, 0x10(%rsi)
    0000009e: 	cmpq	%rcx, %rdx
    000000a1: 	jb	.Ltmp754 # Offset: 161
.Ltmp759:
    000000a3: 	addq	%r11, %rdi
    000000a6: 	shlq	$0x2, %rcx
.Ltmp760:
    000000aa: 	cmpq	%rcx, %r9
    000000ad: 	jle	.Ltmp750 # Offset: 173
    000000b3: 	movq	%r9, %rax
    000000b6: 	movq	%rdi, %r10
    000000b9: 	subq	%rcx, %rax
    000000bc: 	leaq	(,%rax,4), %rdx
    000000c4: 	subq	%rdx, %r10
    000000c7: 	leaq	(%r8,%rdx), %rsi
    000000cb: 	leaq	0x4(%r10), %rdx
    000000cf: 	cmpq	%rdx, %rsi
    000000d2: 	leaq	0x4(%rdi), %rsi
    000000d6: 	setbe	%dl
    000000d9: 	cmpq	%rsi, %r8
    000000dc: 	setae	%sil
    000000e0: 	orb	%sil, %dl
    000000e3: 	je	.Ltmp755 # Offset: 227
    000000e9: 	cmpq	$0x1, %rax
    000000ed: 	je	.Ltmp755 # Offset: 237
    000000f3: 	leaq	-0x1(%rax), %rdx
    000000f7: 	cmpq	$0x2, %rdx
    000000fb: 	jbe	.Ltmp756 # Offset: 251
    00000101: 	movdqu	(%r8), %xmm0
    00000106: 	movdqu	-0xc(%rdi), %xmm3
    0000010b: 	movq	%rax, %rdx
    0000010e: 	movq	%rdi, %rcx
    00000111: 	andq	$-0x4, %rdx
    00000115: 	leaq	(,%rdx,4), %r9
    0000011d: 	pshufd	$0x1b, %xmm3, %xmm1
    00000122: 	pshufd	$0x1b, %xmm0, %xmm0
    00000127: 	movups	%xmm1, (%r8)
    0000012b: 	leaq	(%r8,%r9), %rsi
    0000012f: 	subq	%r9, %rcx
    00000132: 	movups	%xmm0, -0xc(%rdi)
    00000136: 	cmpq	%rdx, %rax
    00000139: 	je	.Ltmp750 # Offset: 313
    0000013f: 	subq	%rdx, %rax
    00000142: 	cmpq	$0x1, %rax
    00000146: 	je	.Ltmp757 # Offset: 326
.Ltmp761:
    00000148: 	leaq	(%r8,%rdx,4), %r8
    0000014c: 	notq	%rdx
    0000014f: 	leaq	(%rdi,%rdx,4), %rdx
    00000153: 	movq	(%r8), %xmm0
    00000158: 	movq	(%rdx), %xmm1
    0000015c: 	pshufd	$0xe1, %xmm0, %xmm0
    00000161: 	pshufd	$0xe1, %xmm1, %xmm1
    00000166: 	movq	%xmm1, (%r8)
    0000016b: 	movq	%xmm0, (%rdx)
    0000016f: 	movq	%rax, %rdx
    00000172: 	andq	$-0x2, %rdx
    00000176: 	leaq	(,%rdx,4), %rdi
    0000017e: 	addq	%rdi, %rsi
    00000181: 	subq	%rdi, %rcx
    00000184: 	cmpq	%rax, %rdx
    00000187: 	je	.Ltmp750 # Offset: 391
.Ltmp757:
    00000189: 	movl	(%rsi), %eax
    0000018b: 	movl	(%rcx), %edx
    0000018d: 	movl	%edx, (%rsi)
    0000018f: 	movl	%eax, (%rcx)
    00000191: 	retq # Offset: 401
    00000192: 	nopw	(%rax,%rax) # Size: 6
.Ltmp755:
    00000198: 	movl	(%r8), %eax
    0000019b: 	movl	(%rdi), %edx
    0000019d: 	movl	%edx, (%r8)
    000001a0: 	movl	%eax, (%rdi)
    000001a2: 	leaq	0x1(%rcx), %rax
    000001a6: 	cmpq	%rax, %r9
    000001a9: 	jle	.Ltmp750 # Offset: 425
    000001ab: 	movl	0x4(%r8), %eax
    000001af: 	movl	-0x4(%rdi), %edx
    000001b2: 	movl	%edx, 0x4(%r8)
    000001b6: 	movl	%eax, -0x4(%rdi)
    000001b9: 	leaq	0x2(%rcx), %rax
    000001bd: 	cmpq	%rax, %r9
    000001c0: 	jle	.Ltmp750 # Offset: 448
    000001c2: 	movl	0x8(%r8), %eax
    000001c6: 	movl	-0x8(%rdi), %edx
    000001c9: 	addq	$0x3, %rcx
    000001cd: 	movl	%edx, 0x8(%r8)
    000001d1: 	movl	%eax, -0x8(%rdi)
    000001d4: 	cmpq	%rcx, %r9
    000001d7: 	jle	.Ltmp750 # Offset: 471
    000001d9: 	movl	0xc(%r8), %eax
    000001dd: 	movl	-0xc(%rdi), %edx
    000001e0: 	movl	%edx, 0xc(%r8)
    000001e4: 	movl	%eax, -0xc(%rdi)
.Ltmp750:
    000001e7: 	retq # Offset: 487
    000001e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp753:
    000001f0: 	movq	%rdi, %rdx
    000001f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp758:
    000001f8: 	movl	(%rdx), %r10d
    000001fb: 	movl	(%rax), %esi
    000001fd: 	addq	$0x10, %rax
    00000201: 	subq	$0x10, %rdx
    00000205: 	movl	%r10d, -0x10(%rax)
    00000209: 	movl	0xc(%rdx), %r10d
    0000020d: 	movl	%esi, 0x10(%rdx)
    00000210: 	movl	-0xc(%rax), %esi
    00000213: 	movl	%r10d, -0xc(%rax)
    00000217: 	movl	0x8(%rdx), %r10d
    0000021b: 	movl	%esi, 0xc(%rdx)
    0000021e: 	movl	-0x8(%rax), %esi
    00000221: 	movl	%r10d, -0x8(%rax)
    00000225: 	movl	0x4(%rdx), %r10d
    00000229: 	movl	%esi, 0x8(%rdx)
    0000022c: 	movl	-0x4(%rax), %esi
    0000022f: 	movl	%r10d, -0x4(%rax)
    00000233: 	movl	%esi, 0x4(%rdx)
    00000236: 	cmpq	%rax, %r8
    00000239: 	jne	.Ltmp758 # Offset: 569
    0000023b: 	jmp	.Ltmp759 # Offset: 571
.Ltmp751:
    00000240: 	movq	%rax, %r8
    00000243: 	xorl	%ecx, %ecx
    00000245: 	jmp	.Ltmp760 # Offset: 581
.Ltmp756:
    0000024a: 	movq	%rdi, %rcx
    0000024d: 	movq	%r8, %rsi
    00000250: 	xorl	%edx, %edx
    00000252: 	jmp	.Ltmp761 # Offset: 594
DWARF CFI Instructions:
    <empty>
End of Function "_Z15my_fast_reverseIPiEvT_S1_"

Binary Function "_Z20my_fast_reverse_copyIPsS0_EvT_S1_T0_" after disassembly {
  Number      : 157
  State       : disassembled
  Address     : 0xb930
  Size        : 0x221
  MaxSize     : 0x230
  Offset      : 0xb930
  Section     : .text
  Orc Section : .local.text._Z20my_fast_reverse_copyIPsS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0156:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp762 # Offset: 7
    0000000d: 	movq	%rdx, %rax
    00000010: 	movq	%rsi, %rdx
    00000013: 	pushq	%rbx
    00000014: 	movq	%rsi, %r8
    00000017: 	subq	%rdi, %rdx
    0000001a: 	leaq	-0x2(%rsi), %r10
    0000001e: 	movq	%rdx, %r11
    00000021: 	sarq	%r11
    00000024: 	cmpq	$0x6, %rdx
    00000028: 	jle	.Ltmp763 # Offset: 40
    0000002e: 	leaq	-0x4(%r11), %rcx
    00000032: 	movq	%r8, %rdi
    00000035: 	movq	%rcx, %rsi
    00000038: 	shrq	$0x2, %rsi
    0000003c: 	addq	$0x1, %rsi
    00000040: 	leaq	(,%rsi,8), %rdx
    00000048: 	movq	%rdx, %rbx
    0000004b: 	leaq	(%rax,%rdx), %r9
    0000004f: 	subq	%rdx, %rdi
    00000052: 	negq	%rbx
    00000055: 	cmpq	%rdi, %r9
    00000058: 	jbe	.Ltmp764 # Offset: 88
    0000005a: 	cmpq	%rax, %r8
    0000005d: 	ja	.Ltmp765 # Offset: 93
.Ltmp764:
    00000063: 	cmpq	$0x3, %rcx
    00000067: 	jbe	.Ltmp766 # Offset: 103
    0000006d: 	movq	%rsi, %rdi
    00000070: 	leaq	-0x8(%r8), %rcx
    00000074: 	movq	%rax, %rdx
    00000077: 	shrq	%rdi
    0000007a: 	shlq	$0x4, %rdi
    0000007e: 	addq	%rax, %rdi
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp767:
    00000088: 	movq	(%rcx), %xmm0
    0000008c: 	addq	$0x10, %rdx
    00000090: 	subq	$0x10, %rcx
    00000094: 	movhps	0x8(%rcx), %xmm0
    00000098: 	pshuflw	$0x1b, %xmm0, %xmm0
    0000009d: 	pshufhw	$0x1b, %xmm0, %xmm0
    000000a2: 	movups	%xmm0, -0x10(%rdx)
    000000a6: 	cmpq	%rdx, %rdi
    000000a9: 	jne	.Ltmp767 # Offset: 169
    000000ab: 	movq	%rsi, %rdx
    000000ae: 	andq	$-0x2, %rdx
    000000b2: 	cmpq	%rdx, %rsi
    000000b5: 	je	.Ltmp768 # Offset: 181
.Ltmp773:
    000000b7: 	movq	%rdx, %rcx
    000000ba: 	notq	%rcx
    000000bd: 	movq	(%r8,%rcx,8), %xmm0
    000000c3: 	pshuflw	$0x1b, %xmm0, %xmm0
    000000c8: 	movq	%xmm0, (%rax,%rdx,8)
.Ltmp768:
    000000cd: 	addq	%rbx, %r10
    000000d0: 	shlq	$0x2, %rsi
.Ltmp772:
    000000d4: 	cmpq	%rsi, %r11
    000000d7: 	jle	.Ltmp769 # Offset: 215
    000000dd: 	movq	%r11, %rcx
    000000e0: 	movq	%r10, %rdi
    000000e3: 	subq	%rsi, %rcx
    000000e6: 	leaq	(%rcx,%rcx), %rax
    000000ea: 	subq	%rax, %rdi
    000000ed: 	leaq	(%r9,%rax), %rdx
    000000f1: 	leaq	0x2(%rdi), %rax
    000000f5: 	cmpq	%rax, %rdx
    000000f8: 	leaq	0x2(%r10), %rdx
    000000fc: 	setbe	%al
    000000ff: 	cmpq	%rdx, %r9
    00000102: 	setae	%dl
    00000105: 	orb	%dl, %al
    00000107: 	je	.Ltmp770 # Offset: 263
    0000010d: 	leaq	-0x1(%rcx), %rax
    00000111: 	cmpq	$0x2, %rax
    00000115: 	jbe	.Ltmp770 # Offset: 277
    0000011b: 	movq	%rcx, %rdx
    0000011e: 	movq	-0x6(%r10), %xmm0
    00000124: 	andq	$-0x4, %rdx
    00000128: 	movq	%rdx, %rax
    0000012b: 	pshuflw	$0x1b, %xmm0, %xmm0
    00000130: 	addq	%rdx, %rsi
    00000133: 	negq	%rax
    00000136: 	movq	%xmm0, (%r9)
    0000013b: 	addq	%rax, %rax
    0000013e: 	addq	%rax, %r10
    00000141: 	subq	%rax, %r9
    00000144: 	cmpq	%rdx, %rcx
    00000147: 	je	.Ltmp769 # Offset: 327
    00000149: 	movzwl	(%r10), %eax
    0000014d: 	movw	%ax, (%r9)
    00000151: 	leaq	0x1(%rsi), %rax
    00000155: 	cmpq	%rax, %r11
    00000158: 	jle	.Ltmp769 # Offset: 344
    0000015a: 	movzwl	-0x2(%r10), %eax
    0000015f: 	addq	$0x2, %rsi
    00000163: 	movw	%ax, 0x2(%r9)
    00000168: 	cmpq	%rsi, %r11
    0000016b: 	jle	.Ltmp769 # Offset: 363
    0000016d: 	movzwl	-0x4(%r10), %eax
    00000172: 	movw	%ax, 0x4(%r9)
.Ltmp769:
    00000177: 	popq	%rbx
    00000178: 	retq # Offset: 376
    00000179: 	nopl	(%rax) # Size: 7
.Ltmp762:
    00000180: 	retq # Offset: 384
    00000181: 	nopl	(%rax) # Size: 7
.Ltmp765:
    00000188: 	movq	%r10, %rdx
    0000018b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp771:
    00000190: 	movzwl	(%rdx), %ecx
    00000193: 	addq	$0x8, %rax
    00000197: 	subq	$0x8, %rdx
    0000019b: 	movw	%cx, -0x8(%rax)
    0000019f: 	movzwl	0x6(%rdx), %ecx
    000001a3: 	movw	%cx, -0x6(%rax)
    000001a7: 	movzwl	0x4(%rdx), %ecx
    000001ab: 	movw	%cx, -0x4(%rax)
    000001af: 	movzwl	0x2(%rdx), %ecx
    000001b3: 	movw	%cx, -0x2(%rax)
    000001b7: 	cmpq	%rax, %r9
    000001ba: 	jne	.Ltmp771 # Offset: 442
    000001bc: 	jmp	.Ltmp768 # Offset: 444
    000001c1: 	nopl	(%rax) # Size: 7
.Ltmp770:
    000001c8: 	movzwl	(%r10), %eax
    000001cc: 	movw	%ax, (%r9)
    000001d0: 	leaq	0x1(%rsi), %rax
    000001d4: 	cmpq	%rax, %r11
    000001d7: 	jle	.Ltmp769 # Offset: 471
    000001d9: 	movzwl	-0x2(%r10), %eax
    000001de: 	movw	%ax, 0x2(%r9)
    000001e3: 	leaq	0x2(%rsi), %rax
    000001e7: 	cmpq	%rax, %r11
    000001ea: 	jle	.Ltmp769 # Offset: 490
    000001ec: 	movzwl	-0x4(%r10), %eax
    000001f1: 	addq	$0x3, %rsi
    000001f5: 	movw	%ax, 0x4(%r9)
    000001fa: 	cmpq	%rsi, %r11
    000001fd: 	jle	.Ltmp769 # Offset: 509
    00000203: 	movzwl	-0x6(%r10), %eax
    00000208: 	movw	%ax, 0x6(%r9)
    0000020d: 	popq	%rbx
    0000020e: 	retq # Offset: 526
    0000020f: 	nop # Size: 1
.Ltmp763:
    00000210: 	movq	%rax, %r9
    00000213: 	xorl	%esi, %esi
    00000215: 	jmp	.Ltmp772 # Offset: 533
.Ltmp766:
    0000021a: 	xorl	%edx, %edx
    0000021c: 	jmp	.Ltmp773 # Offset: 540
DWARF CFI Instructions:
    <empty>
End of Function "_Z20my_fast_reverse_copyIPsS0_EvT_S1_T0_"

Binary Function "_Z15my_fast_reverseIPsEvT_S1_" after disassembly {
  Number      : 158
  State       : disassembled
  Address     : 0xbb60
  Size        : 0x2c9
  MaxSize     : 0x2d0
  Offset      : 0xbb60
  Section     : .text
  Orc Section : .local.text._Z15my_fast_reverseIPsEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0157:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp774 # Offset: 7
    0000000d: 	movq	%rsi, %rdx
    00000010: 	movq	%rsi, %r8
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rax
    00000017: 	subq	%rdi, %rdx
    0000001a: 	leaq	-0x2(%r8), %r9
    0000001e: 	movq	%rdx, %rsi
    00000021: 	movq	%rdx, %rcx
    00000024: 	sarq	%rsi
    00000027: 	shrq	$0x3f, %rcx
    0000002b: 	addq	%rsi, %rcx
    0000002e: 	sarq	%rcx
    00000031: 	movq	%rcx, %r10
    00000034: 	cmpq	$0xe, %rdx
    00000038: 	jle	.Ltmp775 # Offset: 56
    0000003e: 	leaq	-0x4(%rcx), %rcx
    00000042: 	movq	%rcx, %rsi
    00000045: 	shrq	$0x2, %rsi
    00000049: 	addq	$0x1, %rsi
    0000004d: 	leaq	(,%rsi,8), %rdx
    00000055: 	leaq	(%rdi,%rdx), %r11
    00000059: 	movq	%r8, %rdi
    0000005c: 	movq	%rdx, %rbx
    0000005f: 	subq	%rdx, %rdi
    00000062: 	negq	%rbx
    00000065: 	cmpq	%rdi, %r11
    00000068: 	jbe	.Ltmp776 # Offset: 104
    0000006a: 	cmpq	%r8, %rax
    0000006d: 	jb	.Ltmp777 # Offset: 109
.Ltmp776:
    00000073: 	cmpq	$0x3, %rcx
    00000077: 	jbe	.Ltmp778 # Offset: 119
    0000007d: 	movq	%rsi, %rdi
    00000080: 	movq	%rax, %rcx
    00000083: 	leaq	-0x10(%r8), %rdx
    00000087: 	shrq	%rdi
    0000008a: 	shlq	$0x4, %rdi
    0000008e: 	addq	%rax, %rdi
    00000091: 	nopl	(%rax) # Size: 7
.Ltmp779:
    00000098: 	movq	0x8(%rdx), %xmm1
    0000009d: 	movdqu	(%rcx), %xmm0
    000000a1: 	addq	$0x10, %rcx
    000000a5: 	subq	$0x10, %rdx
    000000a9: 	movhps	0x10(%rdx), %xmm1
    000000ad: 	pshuflw	$0x1b, %xmm0, %xmm0
    000000b2: 	pshuflw	$0x1b, %xmm1, %xmm1
    000000b7: 	pshufhw	$0x1b, %xmm0, %xmm0
    000000bc: 	pshufhw	$0x1b, %xmm1, %xmm1
    000000c1: 	shufpd	$0x1, %xmm0, %xmm0
    000000c6: 	movups	%xmm1, -0x10(%rcx)
    000000ca: 	movups	%xmm0, 0x10(%rdx)
    000000ce: 	cmpq	%rdi, %rcx
    000000d1: 	jne	.Ltmp779 # Offset: 209
    000000d3: 	movq	%rsi, %rdx
    000000d6: 	andq	$-0x2, %rdx
    000000da: 	cmpq	%rdx, %rsi
    000000dd: 	je	.Ltmp780 # Offset: 221
.Ltmp785:
    000000df: 	movq	%rdx, %rcx
    000000e2: 	leaq	(%rax,%rdx,8), %rax
    000000e6: 	notq	%rcx
    000000e9: 	movq	(%rax), %xmm0
    000000ed: 	leaq	(%r8,%rcx,8), %rcx
    000000f1: 	movq	(%rcx), %xmm1
    000000f5: 	pshuflw	$0x1b, %xmm0, %xmm0
    000000fa: 	pshuflw	$0x1b, %xmm1, %xmm1
    000000ff: 	movq	%xmm1, (%rax)
    00000103: 	movq	%xmm0, (%rcx)
.Ltmp780:
    00000107: 	addq	%rbx, %r9
    0000010a: 	shlq	$0x2, %rsi
.Ltmp784:
    0000010e: 	cmpq	%rsi, %r10
    00000111: 	jle	.Ltmp781 # Offset: 273
    00000117: 	movq	%r10, %rdx
    0000011a: 	movq	%r9, %rdi
    0000011d: 	subq	%rsi, %rdx
    00000120: 	leaq	(%rdx,%rdx), %rax
    00000124: 	subq	%rax, %rdi
    00000127: 	leaq	(%r11,%rax), %rcx
    0000012b: 	leaq	0x2(%rdi), %rax
    0000012f: 	cmpq	%rax, %rcx
    00000132: 	leaq	0x2(%r9), %rcx
    00000136: 	setbe	%al
    00000139: 	cmpq	%rcx, %r11
    0000013c: 	setae	%cl
    0000013f: 	orb	%cl, %al
    00000141: 	je	.Ltmp782 # Offset: 321
    00000147: 	leaq	-0x1(%rdx), %rax
    0000014b: 	cmpq	$0x2, %rax
    0000014f: 	jbe	.Ltmp782 # Offset: 335
    00000155: 	movq	(%r11), %xmm0
    0000015a: 	movq	-0x6(%r9), %xmm1
    00000160: 	movq	%rdx, %rax
    00000163: 	andq	$-0x4, %rax
    00000167: 	leaq	(%rax,%rax), %rcx
    0000016b: 	pshuflw	$0x1b, %xmm1, %xmm1
    00000170: 	pshuflw	$0x1b, %xmm0, %xmm0
    00000175: 	addq	%rax, %rsi
    00000178: 	movq	%xmm1, (%r11)
    0000017d: 	addq	%rcx, %r11
    00000180: 	movq	%xmm0, -0x6(%r9)
    00000186: 	subq	%rcx, %r9
    00000189: 	cmpq	%rax, %rdx
    0000018c: 	je	.Ltmp781 # Offset: 396
    0000018e: 	movzwl	(%r11), %eax
    00000192: 	movzwl	(%r9), %edx
    00000196: 	movw	%dx, (%r11)
    0000019a: 	movw	%ax, (%r9)
    0000019e: 	leaq	0x1(%rsi), %rax
    000001a2: 	cmpq	%rax, %r10
    000001a5: 	jle	.Ltmp781 # Offset: 421
    000001a7: 	movzwl	0x2(%r11), %eax
    000001ac: 	movzwl	-0x2(%r9), %edx
    000001b1: 	addq	$0x2, %rsi
    000001b5: 	movw	%dx, 0x2(%r11)
    000001ba: 	movw	%ax, -0x2(%r9)
    000001bf: 	cmpq	%rsi, %r10
    000001c2: 	jle	.Ltmp781 # Offset: 450
    000001c4: 	movzwl	0x4(%r11), %eax
    000001c9: 	movzwl	-0x4(%r9), %edx
    000001ce: 	movw	%dx, 0x4(%r11)
    000001d3: 	movw	%ax, -0x4(%r9)
.Ltmp781:
    000001d8: 	popq	%rbx
    000001d9: 	retq # Offset: 473
    000001da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp774:
    000001e0: 	retq # Offset: 480
    000001e1: 	nopl	(%rax) # Size: 7
.Ltmp777:
    000001e8: 	movq	%r9, %rdx
    000001eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp783:
    000001f0: 	movzwl	(%rdx), %edi
    000001f3: 	movzwl	(%rax), %ecx
    000001f6: 	addq	$0x8, %rax
    000001fa: 	subq	$0x8, %rdx
    000001fe: 	movw	%di, -0x8(%rax)
    00000202: 	movzwl	0x6(%rdx), %edi
    00000206: 	movw	%cx, 0x8(%rdx)
    0000020a: 	movzwl	-0x6(%rax), %ecx
    0000020e: 	movw	%di, -0x6(%rax)
    00000212: 	movzwl	0x4(%rdx), %edi
    00000216: 	movw	%cx, 0x6(%rdx)
    0000021a: 	movzwl	-0x4(%rax), %ecx
    0000021e: 	movw	%di, -0x4(%rax)
    00000222: 	movzwl	0x2(%rdx), %edi
    00000226: 	movw	%cx, 0x4(%rdx)
    0000022a: 	movzwl	-0x2(%rax), %ecx
    0000022e: 	movw	%di, -0x2(%rax)
    00000232: 	movw	%cx, 0x2(%rdx)
    00000236: 	cmpq	%rax, %r11
    00000239: 	jne	.Ltmp783 # Offset: 569
    0000023b: 	jmp	.Ltmp780 # Offset: 571
.Ltmp782:
    00000240: 	movzwl	(%r11), %eax
    00000244: 	movzwl	(%r9), %edx
    00000248: 	movw	%dx, (%r11)
    0000024c: 	movw	%ax, (%r9)
    00000250: 	leaq	0x1(%rsi), %rax
    00000254: 	cmpq	%rax, %r10
    00000257: 	jle	.Ltmp781 # Offset: 599
    0000025d: 	movzwl	0x2(%r11), %eax
    00000262: 	movzwl	-0x2(%r9), %edx
    00000267: 	movw	%dx, 0x2(%r11)
    0000026c: 	movw	%ax, -0x2(%r9)
    00000271: 	leaq	0x2(%rsi), %rax
    00000275: 	cmpq	%rax, %r10
    00000278: 	jle	.Ltmp781 # Offset: 632
    0000027e: 	movzwl	0x4(%r11), %eax
    00000283: 	movzwl	-0x4(%r9), %edx
    00000288: 	addq	$0x3, %rsi
    0000028c: 	movw	%dx, 0x4(%r11)
    00000291: 	movw	%ax, -0x4(%r9)
    00000296: 	cmpq	%rsi, %r10
    00000299: 	jle	.Ltmp781 # Offset: 665
    0000029f: 	movzwl	0x6(%r11), %eax
    000002a4: 	movzwl	-0x6(%r9), %edx
    000002a9: 	movw	%dx, 0x6(%r11)
    000002ae: 	movw	%ax, -0x6(%r9)
    000002b3: 	popq	%rbx
    000002b4: 	retq # Offset: 692
    000002b5: 	nopl	(%rax) # Size: 3
.Ltmp775:
    000002b8: 	movq	%rdi, %r11
    000002bb: 	xorl	%esi, %esi
    000002bd: 	jmp	.Ltmp784 # Offset: 701
.Ltmp778:
    000002c2: 	xorl	%edx, %edx
    000002c4: 	jmp	.Ltmp785 # Offset: 708
DWARF CFI Instructions:
    <empty>
End of Function "_Z15my_fast_reverseIPsEvT_S1_"

Binary Function "_Z20my_fast_reverse_copyIPhS0_EvT_S1_T0_" after disassembly {
  Number      : 159
  State       : disassembled
  Address     : 0xbe30
  Size        : 0xb7
  MaxSize     : 0xc0
  Offset      : 0xbe30
  Section     : .text
  Orc Section : .local.text._Z20my_fast_reverse_copyIPhS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0158:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp786 # Offset: 7
    0000000d: 	movq	%rsi, %r9
    00000010: 	subq	$0x1, %rsi
    00000014: 	subq	%rdi, %r9
    00000017: 	cmpq	$0x3, %r9
    0000001b: 	jle	.Ltmp787 # Offset: 27
    00000021: 	leaq	-0x4(%r9), %rax
    00000025: 	shrq	$0x2, %rax
    00000029: 	leaq	0x1(%rax), %r8
    0000002d: 	movq	%rsi, %rax
    00000030: 	leaq	(,%r8,4), %r10
    00000038: 	leaq	(%rdx,%r10), %rdi
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp788:
    00000040: 	movzbl	(%rax), %ecx
    00000043: 	addq	$0x4, %rdx
    00000047: 	subq	$0x4, %rax
    0000004b: 	movb	%cl, -0x4(%rdx)
    0000004e: 	movzbl	0x3(%rax), %ecx
    00000052: 	movb	%cl, -0x3(%rdx)
    00000055: 	movzbl	0x2(%rax), %ecx
    00000059: 	movb	%cl, -0x2(%rdx)
    0000005c: 	movzbl	0x1(%rax), %ecx
    00000060: 	movb	%cl, -0x1(%rdx)
    00000063: 	cmpq	%rdx, %rdi
    00000066: 	jne	.Ltmp788 # Offset: 102
    00000068: 	subq	%r10, %rsi
    0000006b: 	leaq	(,%r8,4), %rax
.Ltmp789:
    00000073: 	cmpq	%rax, %r9
    00000076: 	jle	.Ltmp786 # Offset: 118
    00000078: 	movzbl	(%rsi), %edx
    0000007b: 	movb	%dl, (%rdi)
    0000007d: 	leaq	0x1(%rax), %rdx
    00000081: 	cmpq	%rdx, %r9
    00000084: 	jle	.Ltmp786 # Offset: 132
    00000086: 	movzbl	-0x1(%rsi), %edx
    0000008a: 	movb	%dl, 0x1(%rdi)
    0000008d: 	leaq	0x2(%rax), %rdx
    00000091: 	cmpq	%rdx, %r9
    00000094: 	jle	.Ltmp786 # Offset: 148
    00000096: 	movzbl	-0x2(%rsi), %edx
    0000009a: 	addq	$0x3, %rax
    0000009e: 	movb	%dl, 0x2(%rdi)
    000000a1: 	cmpq	%rax, %r9
    000000a4: 	jle	.Ltmp786 # Offset: 164
    000000a6: 	movzbl	-0x3(%rsi), %eax
    000000aa: 	movb	%al, 0x3(%rdi)
.Ltmp786:
    000000ad: 	retq # Offset: 173
    000000ae: 	nop # Size: 2
.Ltmp787:
    000000b0: 	movq	%rdx, %rdi
    000000b3: 	xorl	%eax, %eax
    000000b5: 	jmp	.Ltmp789 # Offset: 181
DWARF CFI Instructions:
    <empty>
End of Function "_Z20my_fast_reverse_copyIPhS0_EvT_S1_T0_"

Binary Function "_Z15my_fast_reverseIPhEvT_S1_" after disassembly {
  Number      : 160
  State       : disassembled
  Address     : 0xbef0
  Size        : 0x11
  MaxSize     : 0x20
  Offset      : 0xbef0
  Section     : .text
  Orc Section : .local.text._Z15my_fast_reverseIPhEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0159:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp790 # Offset: 7
    00000009: 	jmp	"_Z21specific_fast_reverseIPhEvT_S1_St26random_access_iterator_tag.isra.0/1" # TAILCALL  # Offset: 9
    0000000e: 	nop # Size: 2
.Ltmp790:
    00000010: 	retq # Offset: 16
DWARF CFI Instructions:
    <empty>
End of Function "_Z15my_fast_reverseIPhEvT_S1_"

Binary Function "_Z18fast_reverse_copy4IPhS0_EvT_S1_T0_" after disassembly {
  Number      : 161
  State       : disassembled
  Address     : 0xbf10
  Size        : 0x372
  MaxSize     : 0x380
  Offset      : 0xbf10
  Section     : .text
  Orc Section : .local.text._Z18fast_reverse_copy4IPhS0_EvT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0160:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp791 # Offset: 7
    0000000d: 	movq	%rsi, %r8
    00000010: 	pushq	%r13
    00000012: 	movq	%rsi, %rax
    00000015: 	movq	%rdx, %rcx
    00000018: 	subq	%rdi, %r8
    0000001b: 	pushq	%r12
    0000001d: 	leaq	-0x1(%rsi), %rdi
    00000021: 	pushq	%rbp
    00000022: 	pushq	%rbx
    00000023: 	cmpq	$0x7, %r8
    00000027: 	jle	.Ltmp792 # Offset: 39
    0000002d: 	leaq	-0x8(%r8), %r11
    00000031: 	movq	%rax, %rbx
    00000034: 	movq	%r11, %rsi
    00000037: 	shrq	$0x3, %rsi
    0000003b: 	addq	$0x1, %rsi
    0000003f: 	leaq	(,%rsi,8), %rdx
    00000047: 	subq	%rdx, %rbx
    0000004a: 	leaq	(%rcx,%rdx), %r9
    0000004e: 	movq	%rdx, %r10
    00000051: 	negq	%r10
    00000054: 	cmpq	%rbx, %r9
    00000057: 	setbe	%dl
    0000005a: 	cmpq	%rcx, %rax
    0000005d: 	setbe	%bl
    00000060: 	orb	%bl, %dl
    00000062: 	je	.Ltmp793 # Offset: 98
    00000068: 	cmpq	$0x7, %r11
    0000006c: 	jbe	.Ltmp793 # Offset: 108
    00000072: 	movq	%rsi, %r11
    00000075: 	movdqa	DATAat0x27530(%rip), %xmm7
    0000007d: 	movdqa	DATAat0x27540(%rip), %xmm6
    00000085: 	subq	$0x10, %rax
    00000089: 	shrq	%r11
    0000008c: 	movdqa	DATAat0x27550(%rip), %xmm5
    00000094: 	movdqa	DATAat0x27560(%rip), %xmm4
    0000009c: 	movq	%rcx, %rdx
    0000009f: 	shlq	$0x4, %r11
    000000a3: 	movdqa	DATAat0x27570(%rip), %xmm3
    000000ab: 	movdqa	DATAat0x27580(%rip), %xmm2
    000000b3: 	addq	%rcx, %r11
    000000b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp794:
    000000c0: 	movdqu	(%rax), %xmm0
    000000c4: 	addq	$0x10, %rdx
    000000c8: 	subq	$0x10, %rax
    000000cc: 	shufpd	$0x1, %xmm0, %xmm0
    000000d1: 	movdqa	%xmm0, %xmm1
    000000d5: 	movdqa	%xmm0, %xmm8
    000000da: 	movdqa	%xmm0, %xmm9
    000000df: 	psrlq	$0x28, %xmm1
    000000e4: 	psrlq	$0x18, %xmm8
    000000ea: 	pand	%xmm6, %xmm8
    000000ef: 	psllq	$0x38, %xmm9
    000000f5: 	pand	%xmm7, %xmm1
    000000f9: 	pxor	%xmm8, %xmm1
    000000fe: 	movdqa	%xmm0, %xmm8
    00000103: 	psrlq	$0x38, %xmm8
    00000109: 	pxor	%xmm9, %xmm8
    0000010e: 	movdqa	%xmm0, %xmm9
    00000113: 	pxor	%xmm8, %xmm1
    00000118: 	psllq	$0x28, %xmm9
    0000011e: 	movdqa	%xmm0, %xmm8
    00000123: 	psrlq	$0x8, %xmm8
    00000129: 	pand	%xmm4, %xmm9
    0000012e: 	pand	%xmm5, %xmm8
    00000133: 	pxor	%xmm9, %xmm8
    00000138: 	pxor	%xmm8, %xmm1
    0000013d: 	movdqa	%xmm0, %xmm8
    00000142: 	psllq	$0x18, %xmm8
    00000148: 	psllq	$0x8, %xmm0
    0000014d: 	pand	%xmm3, %xmm8
    00000152: 	pand	%xmm2, %xmm0
    00000156: 	pxor	%xmm8, %xmm0
    0000015b: 	pxor	%xmm1, %xmm0
    0000015f: 	movups	%xmm0, -0x10(%rdx)
    00000163: 	cmpq	%r11, %rdx
    00000166: 	jne	.Ltmp794 # Offset: 358
    0000016c: 	movq	%rsi, %rdx
    0000016f: 	movq	%rdi, %rax
    00000172: 	andq	$-0x2, %rdx
    00000176: 	leaq	(,%rdx,8), %r11
    0000017e: 	addq	%r11, %rcx
    00000181: 	subq	%r11, %rax
    00000184: 	cmpq	%rdx, %rsi
    00000187: 	je	.Ltmp795 # Offset: 391
    0000018d: 	movabsq	$0xff000000000000, %rbx
    00000197: 	movq	-0x7(%rax), %rdx
    0000019b: 	movq	%rdx, %rax
    0000019e: 	movq	%rdx, %r11
    000001a1: 	shlq	$0x38, %r11
    000001a5: 	shrq	$0x38, %rax
    000001a9: 	xorq	%r11, %rax
    000001ac: 	movq	%rdx, %r11
    000001af: 	shrq	$0x28, %r11
    000001b3: 	andl	$0xff00, %r11d
    000001ba: 	xorq	%r11, %rax
    000001bd: 	movq	%rdx, %r11
    000001c0: 	shrq	$0x18, %r11
    000001c4: 	andl	$0xff0000, %r11d
    000001cb: 	xorq	%r11, %rax
    000001ce: 	movq	%rdx, %r11
    000001d1: 	shrq	$0x8, %r11
    000001d5: 	andl	$0xff000000, %r11d
    000001dc: 	xorq	%r11, %rax
    000001df: 	movq	%rdx, %r11
    000001e2: 	shlq	$0x28, %r11
    000001e6: 	andq	%rbx, %r11
    000001e9: 	movabsq	$0xff0000000000, %rbx
    000001f3: 	xorq	%r11, %rax
    000001f6: 	movq	%rdx, %r11
    000001f9: 	shlq	$0x8, %rdx
    000001fd: 	shlq	$0x18, %r11
    00000201: 	andq	%rbx, %r11
    00000204: 	xorq	%r11, %rax
    00000207: 	movabsq	$0xff00000000, %r11
    00000211: 	andq	%r11, %rdx
    00000214: 	xorq	%rdx, %rax
    00000217: 	movq	%rax, (%rcx)
.Ltmp795:
    0000021a: 	shlq	$0x3, %rsi
    0000021e: 	addq	%r10, %rdi
.Ltmp798:
    00000221: 	cmpq	%rsi, %r8
    00000224: 	jle	.Ltmp796 # Offset: 548
    00000226: 	movzbl	(%rdi), %eax
    00000229: 	movb	%al, (%r9)
    0000022c: 	leaq	0x1(%rsi), %rax
    00000230: 	cmpq	%rax, %r8
    00000233: 	jle	.Ltmp796 # Offset: 563
    00000235: 	movzbl	-0x1(%rdi), %eax
    00000239: 	movb	%al, 0x1(%r9)
    0000023d: 	leaq	0x2(%rsi), %rax
    00000241: 	cmpq	%rax, %r8
    00000244: 	jle	.Ltmp796 # Offset: 580
    00000246: 	movzbl	-0x2(%rdi), %eax
    0000024a: 	movb	%al, 0x2(%r9)
    0000024e: 	leaq	0x3(%rsi), %rax
    00000252: 	cmpq	%rax, %r8
    00000255: 	jle	.Ltmp796 # Offset: 597
    00000257: 	movzbl	-0x3(%rdi), %eax
    0000025b: 	movb	%al, 0x3(%r9)
    0000025f: 	leaq	0x4(%rsi), %rax
    00000263: 	cmpq	%rax, %r8
    00000266: 	jle	.Ltmp796 # Offset: 614
    00000268: 	movzbl	-0x4(%rdi), %eax
    0000026c: 	movb	%al, 0x4(%r9)
    00000270: 	leaq	0x5(%rsi), %rax
    00000274: 	cmpq	%rax, %r8
    00000277: 	jle	.Ltmp796 # Offset: 631
    00000279: 	movzbl	-0x5(%rdi), %eax
    0000027d: 	movb	%al, 0x5(%r9)
    00000281: 	leaq	0x6(%rsi), %rax
    00000285: 	cmpq	%rax, %r8
    00000288: 	jle	.Ltmp796 # Offset: 648
    0000028a: 	movzbl	-0x6(%rdi), %eax
    0000028e: 	addq	$0x7, %rsi
    00000292: 	movb	%al, 0x6(%r9)
    00000296: 	cmpq	%rsi, %r8
    00000299: 	jle	.Ltmp796 # Offset: 665
    0000029b: 	movzbl	-0x7(%rdi), %eax
    0000029f: 	movb	%al, 0x7(%r9)
.Ltmp796:
    000002a3: 	popq	%rbx
    000002a4: 	popq	%rbp
    000002a5: 	popq	%r12
    000002a7: 	popq	%r13
    000002a9: 	retq # Offset: 681
    000002aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp791:
    000002b0: 	retq # Offset: 688
    000002b1: 	nopl	(%rax) # Size: 7
.Ltmp793:
    000002b8: 	movabsq	$0xff000000000000, %rbp
    000002c2: 	movq	%rdi, %rdx
    000002c5: 	movabsq	$0xff0000000000, %rbx
    000002cf: 	movabsq	$0xff00000000, %r11
    000002d9: 	nopl	(%rax) # Size: 7
.Ltmp797:
    000002e0: 	movq	-0x7(%rdx), %r12
    000002e4: 	addq	$0x8, %rcx
    000002e8: 	subq	$0x8, %rdx
    000002ec: 	movq	%r12, %rax
    000002ef: 	movq	%r12, %r13
    000002f2: 	shlq	$0x38, %r13
    000002f6: 	shrq	$0x38, %rax
    000002fa: 	xorq	%r13, %rax
    000002fd: 	movq	%r12, %r13
    00000300: 	shrq	$0x28, %r13
    00000304: 	andl	$0xff00, %r13d
    0000030b: 	xorq	%r13, %rax
    0000030e: 	movq	%r12, %r13
    00000311: 	shrq	$0x18, %r13
    00000315: 	andl	$0xff0000, %r13d
    0000031c: 	xorq	%r13, %rax
    0000031f: 	movq	%r12, %r13
    00000322: 	shrq	$0x8, %r13
    00000326: 	andl	$0xff000000, %r13d
    0000032d: 	xorq	%r13, %rax
    00000330: 	movq	%r12, %r13
    00000333: 	shlq	$0x28, %r13
    00000337: 	andq	%rbp, %r13
    0000033a: 	xorq	%r13, %rax
    0000033d: 	movq	%r12, %r13
    00000340: 	shlq	$0x8, %r12
    00000344: 	shlq	$0x18, %r13
    00000348: 	andq	%r11, %r12
    0000034b: 	andq	%rbx, %r13
    0000034e: 	xorq	%r13, %rax
    00000351: 	xorq	%r12, %rax
    00000354: 	movq	%rax, -0x8(%rcx)
    00000358: 	cmpq	%rcx, %r9
    0000035b: 	jne	.Ltmp797 # Offset: 859
    0000035d: 	jmp	.Ltmp795 # Offset: 861
    00000362: 	nopw	(%rax,%rax) # Size: 6
.Ltmp792:
    00000368: 	movq	%rdx, %r9
    0000036b: 	xorl	%esi, %esi
    0000036d: 	jmp	.Ltmp798 # Offset: 877
DWARF CFI Instructions:
    <empty>
End of Function "_Z18fast_reverse_copy4IPhS0_EvT_S1_T0_"

Binary Function "_Z13fast_reverse4IPhEvT_S1_" after disassembly {
  Number      : 162
  State       : disassembled
  Address     : 0xc290
  Size        : 0x537
  MaxSize     : 0x540
  Offset      : 0xc290
  Section     : .text
  Orc Section : .local.text._Z13fast_reverse4IPhEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0161:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp799 # Offset: 7
    0000000d: 	movq	%rsi, %rdx
    00000010: 	pushq	%r14
    00000012: 	movq	%rsi, %rax
    00000015: 	leaq	-0x1(%rsi), %rsi
    00000019: 	subq	%rdi, %rdx
    0000001c: 	pushq	%r13
    0000001e: 	movq	%rdx, %r8
    00000021: 	pushq	%r12
    00000023: 	movq	%rdi, %r12
    00000026: 	shrq	$0x3f, %r8
    0000002a: 	pushq	%rbp
    0000002b: 	addq	%rdx, %r8
    0000002e: 	pushq	%rbx
    0000002f: 	sarq	%r8
    00000032: 	cmpq	$0xf, %rdx
    00000036: 	jle	.Ltmp800 # Offset: 54
    0000003c: 	leaq	-0x8(%r8), %r9
    00000040: 	movq	%rax, %r11
    00000043: 	movq	%r9, %rcx
    00000046: 	shrq	$0x3, %rcx
    0000004a: 	addq	$0x1, %rcx
    0000004e: 	leaq	(,%rcx,8), %rdx
    00000056: 	subq	%rdx, %r11
    00000059: 	leaq	(%rdi,%rdx), %rdi
    0000005d: 	movq	%rdx, %r10
    00000060: 	negq	%r10
    00000063: 	cmpq	%r11, %rdi
    00000066: 	setbe	%dl
    00000069: 	cmpq	%rax, %r12
    0000006c: 	setae	%r11b
    00000070: 	orb	%r11b, %dl
    00000073: 	je	.Ltmp801 # Offset: 115
    00000079: 	cmpq	$0x7, %r9
    0000007d: 	jbe	.Ltmp801 # Offset: 125
    00000083: 	movq	%rcx, %r9
    00000086: 	movdqa	DATAat0x27540(%rip), %xmm7
    0000008e: 	movdqa	DATAat0x27530(%rip), %xmm8
    00000097: 	movq	%r12, %rdx
    0000009a: 	shrq	%r9
    0000009d: 	movdqa	DATAat0x27550(%rip), %xmm6
    000000a5: 	movdqa	DATAat0x27560(%rip), %xmm5
    000000ad: 	subq	$0x10, %rax
    000000b1: 	shlq	$0x4, %r9
    000000b5: 	movdqa	DATAat0x27570(%rip), %xmm4
    000000bd: 	movdqa	DATAat0x27580(%rip), %xmm3
    000000c5: 	addq	%r12, %r9
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp802:
    000000d0: 	movdqu	(%rdx), %xmm2
    000000d4: 	movdqu	(%rax), %xmm0
    000000d8: 	addq	$0x10, %rdx
    000000dc: 	subq	$0x10, %rax
    000000e0: 	movdqa	%xmm2, %xmm1
    000000e4: 	movdqa	%xmm2, %xmm9
    000000e9: 	movdqa	%xmm2, %xmm10
    000000ee: 	shufpd	$0x1, %xmm0, %xmm0
    000000f3: 	psrlq	$0x28, %xmm1
    000000f8: 	psrlq	$0x18, %xmm9
    000000fe: 	pand	%xmm7, %xmm9
    00000103: 	psllq	$0x38, %xmm10
    00000109: 	pand	%xmm8, %xmm1
    0000010e: 	pxor	%xmm9, %xmm1
    00000113: 	movdqa	%xmm2, %xmm9
    00000118: 	psrlq	$0x38, %xmm9
    0000011e: 	pxor	%xmm10, %xmm9
    00000123: 	movdqa	%xmm2, %xmm10
    00000128: 	pxor	%xmm9, %xmm1
    0000012d: 	psllq	$0x28, %xmm10
    00000133: 	movdqa	%xmm2, %xmm9
    00000138: 	psrlq	$0x8, %xmm9
    0000013e: 	pand	%xmm5, %xmm10
    00000143: 	pand	%xmm6, %xmm9
    00000148: 	pxor	%xmm10, %xmm9
    0000014d: 	movdqa	%xmm0, %xmm10
    00000152: 	pxor	%xmm9, %xmm1
    00000157: 	psllq	$0x38, %xmm10
    0000015d: 	movdqa	%xmm2, %xmm9
    00000162: 	psllq	$0x18, %xmm9
    00000168: 	psllq	$0x8, %xmm2
    0000016d: 	pand	%xmm4, %xmm9
    00000172: 	pand	%xmm3, %xmm2
    00000176: 	pxor	%xmm9, %xmm2
    0000017b: 	movdqa	%xmm0, %xmm9
    00000180: 	pxor	%xmm2, %xmm1
    00000184: 	psrlq	$0x18, %xmm9
    0000018a: 	movdqa	%xmm0, %xmm2
    0000018e: 	psrlq	$0x28, %xmm2
    00000193: 	pand	%xmm7, %xmm9
    00000198: 	shufpd	$0x1, %xmm1, %xmm1
    0000019d: 	pand	%xmm8, %xmm2
    000001a2: 	pxor	%xmm9, %xmm2
    000001a7: 	movdqa	%xmm0, %xmm9
    000001ac: 	psrlq	$0x38, %xmm9
    000001b2: 	pxor	%xmm10, %xmm9
    000001b7: 	movdqa	%xmm0, %xmm10
    000001bc: 	pxor	%xmm9, %xmm2
    000001c1: 	psllq	$0x28, %xmm10
    000001c7: 	movdqa	%xmm0, %xmm9
    000001cc: 	psrlq	$0x8, %xmm9
    000001d2: 	pand	%xmm5, %xmm10
    000001d7: 	pand	%xmm6, %xmm9
    000001dc: 	pxor	%xmm10, %xmm9
    000001e1: 	pxor	%xmm9, %xmm2
    000001e6: 	movdqa	%xmm0, %xmm9
    000001eb: 	psllq	$0x18, %xmm9
    000001f1: 	psllq	$0x8, %xmm0
    000001f6: 	pand	%xmm4, %xmm9
    000001fb: 	pand	%xmm3, %xmm0
    000001ff: 	pxor	%xmm9, %xmm0
    00000204: 	pxor	%xmm2, %xmm0
    00000208: 	movups	%xmm0, -0x10(%rdx)
    0000020c: 	movups	%xmm1, 0x10(%rax)
    00000210: 	cmpq	%r9, %rdx
    00000213: 	jne	.Ltmp802 # Offset: 531
    00000219: 	movq	%rcx, %rdx
    0000021c: 	andq	$-0x2, %rdx
    00000220: 	movq	%rdx, %rax
    00000223: 	negq	%rax
    00000226: 	shlq	$0x3, %rax
    0000022a: 	leaq	(%rsi,%rax), %r9
    0000022e: 	subq	%rax, %r12
    00000231: 	cmpq	%rdx, %rcx
    00000234: 	je	.Ltmp803 # Offset: 564
    0000023a: 	movq	-0x7(%r9), %r11
    0000023e: 	movq	(%r12), %rdx
    00000242: 	movabsq	$0xff000000000000, %rbp
    0000024c: 	movq	%r11, %rax
    0000024f: 	movq	%r11, %rbx
    00000252: 	movq	%r11, %r13
    00000255: 	shlq	$0x38, %rbx
    00000259: 	shrq	$0x38, %rax
    0000025d: 	xorq	%rbx, %rax
    00000260: 	movq	%r11, %rbx
    00000263: 	shlq	$0x18, %r13
    00000267: 	shrq	$0x28, %rbx
    0000026b: 	andl	$0xff00, %ebx
    00000271: 	xorq	%rbx, %rax
    00000274: 	movq	%r11, %rbx
    00000277: 	shrq	$0x18, %rbx
    0000027b: 	andl	$0xff0000, %ebx
    00000281: 	xorq	%rbx, %rax
    00000284: 	movq	%r11, %rbx
    00000287: 	shrq	$0x8, %rbx
    0000028b: 	andl	$0xff000000, %ebx
    00000291: 	xorq	%rbx, %rax
    00000294: 	movq	%r11, %rbx
    00000297: 	shlq	$0x8, %r11
    0000029b: 	shlq	$0x28, %rbx
    0000029f: 	andq	%rbp, %rbx
    000002a2: 	xorq	%rbx, %rax
    000002a5: 	movabsq	$0xff0000000000, %rbx
    000002af: 	andq	%rbx, %r13
    000002b2: 	xorq	%r13, %rax
    000002b5: 	movq	%r11, %r13
    000002b8: 	movabsq	$0xff00000000, %r11
    000002c2: 	andq	%r11, %r13
    000002c5: 	xorq	%r13, %rax
    000002c8: 	movq	%rax, (%r12)
    000002cc: 	movq	%rdx, %rax
    000002cf: 	movq	%rdx, %r12
    000002d2: 	shlq	$0x38, %r12
    000002d6: 	shrq	$0x38, %rax
    000002da: 	xorq	%r12, %rax
    000002dd: 	movq	%rdx, %r12
    000002e0: 	shrq	$0x28, %r12
    000002e4: 	andl	$0xff00, %r12d
    000002eb: 	xorq	%r12, %rax
    000002ee: 	movq	%rdx, %r12
    000002f1: 	shrq	$0x18, %r12
    000002f5: 	andl	$0xff0000, %r12d
    000002fc: 	xorq	%r12, %rax
    000002ff: 	movq	%rdx, %r12
    00000302: 	shrq	$0x8, %r12
    00000306: 	andl	$0xff000000, %r12d
    0000030d: 	xorq	%r12, %rax
    00000310: 	movq	%rdx, %r12
    00000313: 	shlq	$0x28, %r12
    00000317: 	andq	%r12, %rbp
    0000031a: 	xorq	%rbp, %rax
    0000031d: 	movq	%rdx, %rbp
    00000320: 	shlq	$0x8, %rdx
    00000324: 	shlq	$0x18, %rbp
    00000328: 	andq	%r11, %rdx
    0000032b: 	andq	%rbp, %rbx
    0000032e: 	xorq	%rbx, %rax
    00000331: 	xorq	%rdx, %rax
    00000334: 	movq	%rax, -0x7(%r9)
.Ltmp803:
    00000338: 	addq	%r10, %rsi
    0000033b: 	shlq	$0x3, %rcx
.Ltmp806:
    0000033f: 	cmpq	%rcx, %r8
    00000342: 	jle	.Ltmp804 # Offset: 834
    00000348: 	movzbl	(%rdi), %eax
    0000034b: 	movzbl	(%rsi), %edx
    0000034e: 	movb	%dl, (%rdi)
    00000350: 	movb	%al, (%rsi)
    00000352: 	leaq	0x1(%rcx), %rax
    00000356: 	cmpq	%rax, %r8
    00000359: 	jle	.Ltmp804 # Offset: 857
    0000035f: 	movzbl	0x1(%rdi), %eax
    00000363: 	movzbl	-0x1(%rsi), %edx
    00000367: 	movb	%dl, 0x1(%rdi)
    0000036a: 	movb	%al, -0x1(%rsi)
    0000036d: 	leaq	0x2(%rcx), %rax
    00000371: 	cmpq	%rax, %r8
    00000374: 	jle	.Ltmp804 # Offset: 884
    0000037a: 	movzbl	0x2(%rdi), %eax
    0000037e: 	movzbl	-0x2(%rsi), %edx
    00000382: 	movb	%dl, 0x2(%rdi)
    00000385: 	movb	%al, -0x2(%rsi)
    00000388: 	leaq	0x3(%rcx), %rax
    0000038c: 	cmpq	%rax, %r8
    0000038f: 	jle	.Ltmp804 # Offset: 911
    00000391: 	movzbl	0x3(%rdi), %eax
    00000395: 	movzbl	-0x3(%rsi), %edx
    00000399: 	movb	%dl, 0x3(%rdi)
    0000039c: 	movb	%al, -0x3(%rsi)
    0000039f: 	leaq	0x4(%rcx), %rax
    000003a3: 	cmpq	%rax, %r8
    000003a6: 	jle	.Ltmp804 # Offset: 934
    000003a8: 	movzbl	0x4(%rdi), %eax
    000003ac: 	movzbl	-0x4(%rsi), %edx
    000003b0: 	movb	%dl, 0x4(%rdi)
    000003b3: 	movb	%al, -0x4(%rsi)
    000003b6: 	leaq	0x5(%rcx), %rax
    000003ba: 	cmpq	%rax, %r8
    000003bd: 	jle	.Ltmp804 # Offset: 957
    000003bf: 	movzbl	0x5(%rdi), %eax
    000003c3: 	movzbl	-0x5(%rsi), %edx
    000003c7: 	movb	%dl, 0x5(%rdi)
    000003ca: 	movb	%al, -0x5(%rsi)
    000003cd: 	leaq	0x6(%rcx), %rax
    000003d1: 	cmpq	%rax, %r8
    000003d4: 	jle	.Ltmp804 # Offset: 980
    000003d6: 	movzbl	0x6(%rdi), %eax
    000003da: 	movzbl	-0x6(%rsi), %edx
    000003de: 	addq	$0x7, %rcx
    000003e2: 	movb	%dl, 0x6(%rdi)
    000003e5: 	movb	%al, -0x6(%rsi)
    000003e8: 	cmpq	%rcx, %r8
    000003eb: 	jle	.Ltmp804 # Offset: 1003
    000003ed: 	movzbl	0x7(%rdi), %eax
    000003f1: 	movzbl	-0x7(%rsi), %edx
    000003f5: 	movb	%dl, 0x7(%rdi)
    000003f8: 	movb	%al, -0x7(%rsi)
.Ltmp804:
    000003fb: 	popq	%rbx
    000003fc: 	popq	%rbp
    000003fd: 	popq	%r12
    000003ff: 	popq	%r13
    00000401: 	popq	%r14
    00000403: 	retq # Offset: 1027
    00000404: 	nopl	(%rax) # Size: 4
.Ltmp799:
    00000408: 	retq # Offset: 1032
    00000409: 	nopl	(%rax) # Size: 7
.Ltmp801:
    00000410: 	movabsq	$0xff000000000000, %rbx
    0000041a: 	movq	%rsi, %rdx
    0000041d: 	movabsq	$0xff0000000000, %r11
    00000427: 	movabsq	$0xff00000000, %r9
    00000431: 	nopl	(%rax) # Size: 7
.Ltmp805:
    00000438: 	movq	-0x7(%rdx), %r13
    0000043c: 	movq	(%r12), %rbp
    00000440: 	movq	%r13, %rax
    00000443: 	movq	%r13, %r14
    00000446: 	shrq	$0x38, %r14
    0000044a: 	shlq	$0x38, %rax
    0000044e: 	xorq	%r14, %rax
    00000451: 	movq	%r13, %r14
    00000454: 	shrq	$0x28, %r14
    00000458: 	andl	$0xff00, %r14d
    0000045f: 	xorq	%r14, %rax
    00000462: 	movq	%r13, %r14
    00000465: 	shrq	$0x18, %r14
    00000469: 	andl	$0xff0000, %r14d
    00000470: 	xorq	%r14, %rax
    00000473: 	movq	%r13, %r14
    00000476: 	shrq	$0x8, %r14
    0000047a: 	andl	$0xff000000, %r14d
    00000481: 	xorq	%r14, %rax
    00000484: 	movq	%r13, %r14
    00000487: 	shlq	$0x28, %r14
    0000048b: 	andq	%rbx, %r14
    0000048e: 	xorq	%r14, %rax
    00000491: 	movq	%r13, %r14
    00000494: 	shlq	$0x8, %r13
    00000498: 	shlq	$0x18, %r14
    0000049c: 	andq	%r9, %r13
    0000049f: 	andq	%r11, %r14
    000004a2: 	xorq	%r14, %rax
    000004a5: 	xorq	%r13, %rax
    000004a8: 	movq	%rbp, %r13
    000004ab: 	movq	%rax, (%r12)
    000004af: 	movq	%rbp, %rax
    000004b2: 	shrq	$0x38, %r13
    000004b6: 	shlq	$0x38, %rax
    000004ba: 	xorq	%r13, %rax
    000004bd: 	movq	%rbp, %r13
    000004c0: 	shrq	$0x28, %r13
    000004c4: 	andl	$0xff00, %r13d
    000004cb: 	xorq	%r13, %rax
    000004ce: 	movq	%rbp, %r13
    000004d1: 	shrq	$0x18, %r13
    000004d5: 	andl	$0xff0000, %r13d
    000004dc: 	xorq	%r13, %rax
    000004df: 	movq	%rbp, %r13
    000004e2: 	shrq	$0x8, %r13
    000004e6: 	andl	$0xff000000, %r13d
    000004ed: 	xorq	%r13, %rax
    000004f0: 	movq	%rbp, %r13
    000004f3: 	addq	$0x8, %r12
    000004f7: 	subq	$0x8, %rdx
    000004fb: 	shlq	$0x28, %r13
    000004ff: 	andq	%rbx, %r13
    00000502: 	xorq	%r13, %rax
    00000505: 	movq	%rbp, %r13
    00000508: 	shlq	$0x8, %rbp
    0000050c: 	shlq	$0x18, %r13
    00000510: 	andq	%r9, %rbp
    00000513: 	andq	%r11, %r13
    00000516: 	xorq	%r13, %rax
    00000519: 	xorq	%rbp, %rax
    0000051c: 	movq	%rax, 0x1(%rdx)
    00000520: 	cmpq	%rdi, %r12
    00000523: 	jne	.Ltmp805 # Offset: 1315
    00000529: 	jmp	.Ltmp803 # Offset: 1321
    0000052e: 	nop # Size: 2
.Ltmp800:
    00000530: 	xorl	%ecx, %ecx
    00000532: 	jmp	.Ltmp806 # Offset: 1330
DWARF CFI Instructions:
    <empty>
End of Function "_Z13fast_reverse4IPhEvT_S1_"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
  Number      : 163
  State       : disassembled
  Address     : 0xc7d0
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0xc7d0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0162:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	0x20(%rdi), %rcx
    00000019: 	movq	0x30(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	0x10(%rdi), %rbp
    00000025: 	movq	%rcx, 0x10(%rsp)
    0000002a: 	movq	0x28(%rdi), %rcx
    0000002e: 	movq	%rax, 0x8(%rsp)
    00000033: 	movq	0x48(%rdi), %rax
    00000037: 	leaq	0x8(%rcx), %r12
    0000003b: 	movq	%rcx, 0x18(%rsp)
    00000040: 	movq	%rax, (%rsp)
    00000044: 	cmpq	%r12, %rax
    00000047: 	jbe	.Ltmp807 # Offset: 71
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp810:
    00000050: 	movq	(%r12), %r15
    00000054: 	leaq	0x200(%r15), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp809:
    00000060: 	movq	(%r15), %rdi
    00000063: 	leaq	0x10(%r15), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp808 # Offset: 106
    00000070: 	movq	0x10(%r15), %rax
    00000074: 	addq	$0x20, %r15
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%r15, %rbx
    00000084: 	jne	.Ltmp809 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp810 # Offset: 142
.Ltmp807:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x18(%rsp)
    00000099: 	je	.Ltmp811 # Offset: 153
    0000009f: 	cmpq	0x10(%rsp), %rbp
    000000a4: 	je	.Ltmp812 # Offset: 164
.Ltmp815:
    000000a6: 	movq	(%rbp), %rdi
    000000aa: 	leaq	0x10(%rbp), %rax
    000000ae: 	cmpq	%rax, %rdi
    000000b1: 	je	.Ltmp813 # Offset: 177
.Ltmp814:
    000000b3: 	movq	0x10(%rbp), %rax
    000000b7: 	addq	$0x20, %rbp
    000000bb: 	leaq	0x1(%rax), %rsi
    000000bf: 	callq	_ZdlPvm@PLT # Offset: 191
    000000c4: 	cmpq	%rbp, 0x10(%rsp)
    000000c9: 	je	.Ltmp812 # Offset: 201
    000000cb: 	movq	(%rbp), %rdi
    000000cf: 	leaq	0x10(%rbp), %rax
    000000d3: 	cmpq	%rax, %rdi
    000000d6: 	jne	.Ltmp814 # Offset: 214
.Ltmp813:
    000000d8: 	addq	$0x20, %rbp
    000000dc: 	cmpq	%rbp, 0x10(%rsp)
    000000e1: 	jne	.Ltmp815 # Offset: 225
    000000e3: 	cmpq	%r13, 0x8(%rsp)
    000000e8: 	je	.Ltmp816 # Offset: 232
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp818:
    000000f0: 	movq	(%r13), %rdi
    000000f4: 	leaq	0x10(%r13), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp817 # Offset: 251
    000000fd: 	movq	0x10(%r13), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp817:
    0000010a: 	addq	$0x20, %r13
.Ltmp812:
    0000010e: 	cmpq	%r13, 0x8(%rsp)
    00000113: 	jne	.Ltmp818 # Offset: 275
.Ltmp816:
    00000115: 	movq	(%r14), %rdi
    00000118: 	testq	%rdi, %rdi
    0000011b: 	je	.Ltmp819 # Offset: 283
.Ltmp825:
    00000121: 	movq	0x48(%r14), %rax
    00000125: 	movq	0x28(%r14), %rbx
    00000129: 	leaq	0x8(%rax), %rbp
    0000012d: 	cmpq	%rbx, %rbp
    00000130: 	jbe	.Ltmp820 # Offset: 304
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp821:
    00000138: 	movq	(%rbx), %rdi
    0000013b: 	movl	$0x200, %esi
    00000140: 	addq	$0x8, %rbx
    00000144: 	callq	_ZdlPvm@PLT # Offset: 324
    00000149: 	cmpq	%rbx, %rbp
    0000014c: 	ja	.Ltmp821 # Offset: 332
    0000014e: 	movq	(%r14), %rdi
.Ltmp820:
    00000151: 	movq	0x8(%r14), %rsi
    00000155: 	addq	$0x28, %rsp
    00000159: 	popq	%rbx
    0000015a: 	popq	%rbp
    0000015b: 	shlq	$0x3, %rsi
    0000015f: 	popq	%r12
    00000161: 	popq	%r13
    00000163: 	popq	%r14
    00000165: 	popq	%r15
    00000167: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp808:
    00000170: 	addq	$0x20, %r15
    00000174: 	cmpq	%r15, %rbx
    00000177: 	jne	.Ltmp809 # Offset: 375
    0000017d: 	addq	$0x8, %r12
    00000181: 	cmpq	%r12, (%rsp)
    00000185: 	ja	.Ltmp810 # Offset: 389
    0000018b: 	jmp	.Ltmp807 # Offset: 395
.Ltmp811:
    00000190: 	cmpq	0x8(%rsp), %rbp
    00000195: 	je	.Ltmp816 # Offset: 405
.Ltmp824:
    0000019b: 	movq	(%rbp), %rdi
    0000019f: 	leaq	0x10(%rbp), %rax
    000001a3: 	cmpq	%rax, %rdi
    000001a6: 	je	.Ltmp822 # Offset: 422
.Ltmp823:
    000001a8: 	movq	0x10(%rbp), %rax
    000001ac: 	addq	$0x20, %rbp
    000001b0: 	leaq	0x1(%rax), %rsi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	cmpq	%rbp, 0x8(%rsp)
    000001be: 	je	.Ltmp816 # Offset: 446
    000001c4: 	movq	(%rbp), %rdi
    000001c8: 	leaq	0x10(%rbp), %rax
    000001cc: 	cmpq	%rax, %rdi
    000001cf: 	jne	.Ltmp823 # Offset: 463
.Ltmp822:
    000001d1: 	addq	$0x20, %rbp
    000001d5: 	cmpq	%rbp, 0x8(%rsp)
    000001da: 	jne	.Ltmp824 # Offset: 474
    000001dc: 	movq	(%r14), %rdi
    000001df: 	testq	%rdi, %rdi
    000001e2: 	jne	.Ltmp825 # Offset: 482
.Ltmp819:
    000001e8: 	addq	$0x28, %rsp
    000001ec: 	popq	%rbx
    000001ed: 	popq	%rbp
    000001ee: 	popq	%r12
    000001f0: 	popq	%r13
    000001f2: 	popq	%r14
    000001f4: 	popq	%r15
    000001f6: 	retq # Offset: 502
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)"

Binary Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_" after disassembly {
  Number      : 164
  State       : disassembled
  Address     : 0xc9d0
  Size        : 0x145
  MaxSize     : 0x150
  Offset      : 0xc9d0
  Section     : .text
  Orc Section : .local.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0163:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	movq	%rdi, %r12
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdx, %rbp
    00000011: 	pushq	%rbx
    00000012: 	leaq	0x10(%rdi), %rbx
    00000016: 	subq	$0x10, %rsp
    0000001a: 	movq	0x8(%rsi), %r13
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	movq	%rbx, (%rdi)
    00000031: 	movq	(%rsi), %r14
    00000034: 	movq	%r14, %rax
    00000037: 	addq	%r13, %rax
    0000003a: 	je	.Ltmp826 # Offset: 58
    0000003c: 	testq	%r14, %r14
    0000003f: 	je	.Ltmp827 # Offset: 63
.Ltmp826:
    00000045: 	movq	%r13, (%rsp)
    00000049: 	cmpq	$0xf, %r13
    0000004d: 	ja	.Ltmp828 # Offset: 77
    0000004f: 	cmpq	$0x1, %r13
    00000053: 	jne	.Ltmp829 # Offset: 83
    00000055: 	movzbl	(%r14), %eax
    00000059: 	movb	%al, 0x10(%r12)
    0000005e: 	movq	%rbx, %rax
.Ltmp833:
    00000061: 	movq	%r13, 0x8(%r12)
    00000066: 	movq	%rbp, %rdi
    00000069: 	movb	$0x0, (%rax,%r13)
    0000006e: 	callq	strlen@PLT # Offset: 110
    00000073: 	movq	%rax, %rdx
    00000076: 	movabsq	$0x3fffffffffffffff, %rax
    00000080: 	subq	0x8(%r12), %rax
    00000085: 	cmpq	%rax, %rdx
    00000088: 	ja	.Ltmp830 # Offset: 136
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movq	%r12, %rdi
    00000090: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 144
    00000095: 	movq	0x8(%rsp), %rax
    0000009a: 	subq	%fs:0x28, %rax
    000000a3: 	jne	.Ltmp831 # Offset: 163
    000000a5: 	addq	$0x10, %rsp
    000000a9: 	movq	%r12, %rax
    000000ac: 	popq	%rbx
    000000ad: 	popq	%rbp
    000000ae: 	popq	%r12
    000000b0: 	popq	%r13
    000000b2: 	popq	%r14
    000000b4: 	retq # Offset: 180
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp829:
    000000b8: 	testq	%r13, %r13
    000000bb: 	jne	.Ltmp832 # Offset: 187
    000000bd: 	movq	%rbx, %rax
    000000c0: 	jmp	.Ltmp833 # Offset: 192
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp828:
    000000c8: 	movq	%r12, %rdi
    000000cb: 	movq	%rsp, %rsi
    000000ce: 	xorl	%edx, %edx
    000000d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 208
    000000d5: 	movq	%rax, (%r12)
    000000d9: 	movq	%rax, %rdi
    000000dc: 	movq	(%rsp), %rax
    000000e0: 	movq	%rax, 0x10(%r12)
.Ltmp834:
    000000e5: 	movq	%r13, %rdx
    000000e8: 	movq	%r14, %rsi
    000000eb: 	callq	memcpy@PLT # Offset: 235
    000000f0: 	movq	(%rsp), %r13
    000000f4: 	movq	(%r12), %rax
    000000f8: 	jmp	.Ltmp833 # Offset: 248
.Ltmp827:
    000000fd: 	leaq	DATAat0x27008(%rip), %rdi
    00000104: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 260
.Ltmp830:
    00000109: 	leaq	DATAat0x27184(%rip), %rdi
    00000110: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 272
.Ltmp831:
    00000115: 	callq	__stack_chk_fail@PLT # Offset: 277
.Ltmp832:
    0000011a: 	movq	%rbx, %rdi
    0000011d: 	jmp	.Ltmp834 # Offset: 285
    0000011f: 	endbr64
    00000123: 	movq	%rax, %rbp
    00000126: 	movq	(%r12), %rdi
    0000012a: 	cmpq	%rdi, %rbx
    0000012d: 	je	.Ltmp835 # Offset: 301
    0000012f: 	movq	0x10(%r12), %rsi
    00000134: 	addq	$0x1, %rsi
    00000138: 	callq	_ZdlPvm@PLT # Offset: 312
.Ltmp835:
    0000013d: 	movq	%rbp, %rdi
    00000140: 	callq	_Unwind_Resume@PLT # Offset: 320
DWARF CFI Instructions:
    <empty>
End of Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_" after disassembly {
  Number      : 165
  State       : disassembled
  Address     : 0xcb20
  Size        : 0x328
  MaxSize     : 0x330
  Offset      : 0xcb20
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0164:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rsi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x18, %rsp
    00000015: 	movq	0x48(%rdi), %r12
    00000019: 	movq	0x28(%rdi), %rsi
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	movq	0x30(%rdi), %rax
    00000031: 	subq	0x38(%rdi), %rax
    00000035: 	movq	%r12, %r13
    00000038: 	sarq	$0x5, %rax
    0000003c: 	subq	%rsi, %r13
    0000003f: 	movq	%r13, %rcx
    00000042: 	sarq	$0x3, %rcx
    00000046: 	cmpq	$0x1, %r12
    0000004a: 	movq	%rcx, %rdx
    0000004d: 	adcq	$-0x1, %rdx
    00000051: 	shlq	$0x4, %rdx
    00000055: 	addq	%rdx, %rax
    00000058: 	movq	0x20(%rdi), %rdx
    0000005c: 	subq	0x10(%rdi), %rdx
    00000060: 	sarq	$0x5, %rdx
    00000064: 	addq	%rdx, %rax
    00000067: 	movabsq	$0x3ffffffffffffff, %rdx
    00000071: 	cmpq	%rdx, %rax
    00000074: 	je	.Ltmp836 # Offset: 116
    0000007a: 	movq	0x8(%rdi), %rdx
    0000007e: 	movq	%rdi, %rbx
    00000081: 	movq	(%rdi), %rdi
    00000084: 	movq	%r12, %rax
    00000087: 	subq	%rdi, %rax
    0000008a: 	movq	%rdx, %r8
    0000008d: 	sarq	$0x3, %rax
    00000091: 	subq	%rax, %r8
    00000094: 	cmpq	$0x1, %r8
    00000098: 	jbe	.Ltmp837 # Offset: 152
.Ltmp848:
    0000009e: 	movl	$0x200, %edi
    000000a3: 	callq	_Znwm@PLT # Offset: 163
    000000a8: 	movq	%rax, 0x8(%r12)
    000000ad: 	movq	0x30(%rbx), %r13
    000000b1: 	movq	0x8(%rbp), %r12
    000000b5: 	leaq	0x10(%r13), %rdi
    000000b9: 	movq	%rdi, (%r13)
    000000bd: 	movq	(%rbp), %r14
    000000c1: 	movq	%r14, %rax
    000000c4: 	addq	%r12, %rax
    000000c7: 	je	.Ltmp838 # Offset: 199
    000000c9: 	testq	%r14, %r14
    000000cc: 	je	.Ltmp839 # Offset: 204
.Ltmp838:
    000000d2: 	movq	%r12, (%rsp)
    000000d6: 	cmpq	$0xf, %r12
    000000da: 	ja	.Ltmp840 # Offset: 218
    000000e0: 	cmpq	$0x1, %r12
    000000e4: 	jne	.Ltmp841 # Offset: 228
    000000e6: 	movzbl	(%r14), %eax
    000000ea: 	movb	%al, 0x10(%r13)
.Ltmp843:
    000000ee: 	movq	%r12, 0x8(%r13)
    000000f2: 	movb	$0x0, (%rdi,%r12)
    000000f7: 	movq	0x48(%rbx), %rdx
    000000fb: 	movq	0x8(%rdx), %rax
    000000ff: 	addq	$0x8, %rdx
    00000103: 	movq	%rdx, %xmm1
    00000108: 	movq	%rax, %xmm0
    0000010d: 	addq	$0x200, %rax
    00000113: 	punpcklqdq	%xmm0, %xmm0
    00000117: 	movups	%xmm0, 0x30(%rbx)
    0000011b: 	movq	%rax, %xmm0
    00000120: 	punpcklqdq	%xmm1, %xmm0
    00000124: 	movups	%xmm0, 0x40(%rbx)
    00000128: 	movq	0x8(%rsp), %rax
    0000012d: 	subq	%fs:0x28, %rax
    00000136: 	jne	.Ltmp842 # Offset: 310
    0000013c: 	addq	$0x18, %rsp
    00000140: 	popq	%rbx
    00000141: 	popq	%rbp
    00000142: 	popq	%r12
    00000144: 	popq	%r13
    00000146: 	popq	%r14
    00000148: 	popq	%r15
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp841:
    00000150: 	testq	%r12, %r12
    00000153: 	je	.Ltmp843 # Offset: 339
    00000155: 	jmp	.Ltmp844 # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp837:
    00000160: 	leaq	0x2(%rcx), %r14
    00000164: 	leaq	(%r14,%r14), %rax
    00000168: 	cmpq	%rax, %rdx
    0000016b: 	ja	.Ltmp845 # Offset: 363
    00000171: 	testq	%rdx, %rdx
    00000174: 	movl	$0x1, %eax
    00000179: 	cmovneq	%rdx, %rax
    0000017d: 	leaq	0x2(%rdx,%rax), %r15
    00000182: 	movq	%r15, %rax
    00000185: 	shrq	$0x3c, %rax
    00000189: 	jne	.Ltmp846 # Offset: 393
    0000018f: 	leaq	(,%r15,8), %rdi
    00000197: 	callq	_Znwm@PLT # Offset: 407
    0000019c: 	movq	0x28(%rbx), %rsi
    000001a0: 	movq	%rax, %r12
    000001a3: 	movq	%r15, %rax
    000001a6: 	subq	%r14, %rax
    000001a9: 	shrq	%rax
    000001ac: 	leaq	(%r12,%rax,8), %r14
    000001b0: 	movq	0x48(%rbx), %rax
    000001b4: 	leaq	0x8(%rax), %rdx
    000001b8: 	cmpq	%rsi, %rdx
    000001bb: 	je	.Ltmp847 # Offset: 443
    000001bd: 	subq	%rsi, %rdx
    000001c0: 	movq	%r14, %rdi
    000001c3: 	callq	memmove@PLT # Offset: 451
.Ltmp847:
    000001c8: 	movq	0x8(%rbx), %rax
    000001cc: 	movq	(%rbx), %rdi
    000001cf: 	leaq	(,%rax,8), %rsi
    000001d7: 	callq	_ZdlPvm@PLT # Offset: 471
    000001dc: 	movq	%r12, (%rbx)
    000001df: 	movq	%r15, 0x8(%rbx)
.Ltmp850:
    000001e3: 	movq	(%r14), %rax
    000001e6: 	movq	(%r14), %xmm0
    000001eb: 	leaq	(%r14,%r13), %r12
    000001ef: 	movq	%r14, 0x28(%rbx)
    000001f3: 	movq	%r12, 0x48(%rbx)
    000001f7: 	addq	$0x200, %rax
    000001fd: 	movq	%rax, %xmm2
    00000202: 	punpcklqdq	%xmm2, %xmm0
    00000206: 	movups	%xmm0, 0x18(%rbx)
    0000020a: 	movq	(%r12), %rax
    0000020e: 	movq	(%r12), %xmm0
    00000214: 	addq	$0x200, %rax
    0000021a: 	movq	%rax, %xmm3
    0000021f: 	punpcklqdq	%xmm3, %xmm0
    00000223: 	movups	%xmm0, 0x38(%rbx)
    00000227: 	jmp	.Ltmp848 # Offset: 551
    0000022c: 	nopl	(%rax) # Size: 4
.Ltmp840:
    00000230: 	movq	%rsp, %rsi
    00000233: 	xorl	%edx, %edx
    00000235: 	movq	%r13, %rdi
    00000238: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 568
    0000023d: 	movq	%rax, (%r13)
    00000241: 	movq	%rax, %rdi
    00000244: 	movq	(%rsp), %rax
    00000248: 	movq	%rax, 0x10(%r13)
.Ltmp844:
    0000024c: 	movq	%r12, %rdx
    0000024f: 	movq	%r14, %rsi
    00000252: 	callq	memcpy@PLT # Offset: 594
    00000257: 	movq	(%rsp), %r12
    0000025b: 	movq	(%r13), %rdi
    0000025f: 	jmp	.Ltmp843 # Offset: 607
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp845:
    00000268: 	subq	%r14, %rdx
    0000026b: 	addq	$0x8, %r12
    0000026f: 	shrq	%rdx
    00000272: 	leaq	(%rdi,%rdx,8), %r14
    00000276: 	movq	%r12, %rdx
    00000279: 	subq	%rsi, %rdx
    0000027c: 	cmpq	%r14, %rsi
    0000027f: 	jbe	.Ltmp849 # Offset: 639
    00000281: 	cmpq	%r12, %rsi
    00000284: 	je	.Ltmp850 # Offset: 644
    0000028a: 	movq	%r14, %rdi
    0000028d: 	callq	memmove@PLT # Offset: 653
    00000292: 	jmp	.Ltmp850 # Offset: 658
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp849:
    000002a0: 	cmpq	%r12, %rsi
    000002a3: 	je	.Ltmp850 # Offset: 675
    000002a9: 	leaq	0x8(%r13), %rdi
    000002ad: 	subq	%rdx, %rdi
    000002b0: 	addq	%r14, %rdi
    000002b3: 	callq	memmove@PLT # Offset: 691
    000002b8: 	jmp	.Ltmp850 # Offset: 696
.Ltmp839:
    000002bd: 	leaq	DATAat0x27008(%rip), %rdi
    000002c4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 708
    000002c9: 	nopl	(%rax) # Size: 7
.Ltmp846:
    000002d0: 	shrq	$0x3d, %r15
    000002d4: 	je	.Ltmp851 # Offset: 724
    000002d6: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 726
.Ltmp851:
    000002db: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 731
.Ltmp836:
    000002e0: 	leaq	DATAat0x271a0(%rip), %rdi
    000002e7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 743
.Ltmp842:
    000002ec: 	callq	__stack_chk_fail@PLT # Offset: 748
    000002f1: 	endbr64
    000002f5: 	movq	%rax, %rdi
    000002f8: 	callq	__cxa_begin_catch@PLT # Offset: 760
    000002fd: 	movq	0x48(%rbx), %rax
    00000301: 	movl	$0x200, %esi
    00000306: 	movq	0x8(%rax), %rdi
    0000030a: 	callq	_ZdlPvm@PLT # Offset: 778
    0000030f: 	callq	__cxa_rethrow@PLT # Offset: 783
    00000314: 	endbr64
    00000318: 	movq	%rax, %rbp
    0000031b: 	callq	__cxa_end_catch@PLT # Offset: 795
    00000320: 	movq	%rbp, %rdi
    00000323: 	callq	_Unwind_Resume@PLT # Offset: 803
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_"

Binary Function "_Z17test_reverse_copyIPhPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1(*2)" after disassembly {
  All names   : _Z17test_reverse_copyIPhPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1
                _Z17test_reverse_copyIPhPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/reverse_sequence.cpp/1
  Number      : 166
  State       : disassembled
  Address     : 0xce50
  Size        : 0x31b
  MaxSize     : 0x320
  Offset      : 0xce50
  Section     : .text
  Orc Section : .local.text._Z17test_reverse_copyIPhPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0165:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	movq	%rdi, %r13
    00000009: 	pushq	%r12
    0000000b: 	movq	%rsi, %r12
    0000000e: 	pushq	%rbp
    0000000f: 	movq	%rcx, %rbp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdx, %rbx
    00000016: 	subq	$0x28, %rsp
    0000001a: 	movq	%r8, 0x8(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x18(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	cmpq	%rdx, %rcx
    00000032: 	je	.Ltmp852 # Offset: 50
    00000034: 	movq	%rcx, %rdx
    00000037: 	movl	$0x63, %esi
    0000003c: 	movq	%rbx, %rdi
    0000003f: 	subq	%rbx, %rdx
    00000042: 	callq	memset@PLT # Offset: 66
.Ltmp852:
    00000047: 	callq	clock@PLT # Offset: 71
    0000004c: 	movl	iterations(%rip), %ecx
    00000052: 	movq	%rax, start_time(%rip)
    00000059: 	testl	%ecx, %ecx
    0000005b: 	jle	.Ltmp853 # Offset: 91
    00000061: 	movq	%r12, %rsi
    00000064: 	leaq	-0x1(%r12), %r11
    00000069: 	xorl	%edx, %edx
    0000006b: 	subq	%r13, %rsi
    0000006e: 	movq	%r11, %r15
    00000071: 	leaq	-0x4(%rsi), %rax
    00000075: 	leaq	-0x3(%rsi), %r14
    00000079: 	shrq	$0x2, %rax
    0000007d: 	leaq	0x4(,%rax,4), %r10
    00000085: 	leaq	(%rbx,%r10), %rax
    00000089: 	subq	%r10, %r15
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp858:
    00000090: 	cmpq	%r12, %r13
    00000093: 	je	.Ltmp854 # Offset: 147
    00000099: 	testq	%r14, %r14
    0000009c: 	jle	.Ltmp855 # Offset: 156
    000000a2: 	movq	%rbx, %rcx
    000000a5: 	movq	%r11, %rdi
    000000a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp856:
    000000b0: 	movzbl	(%rdi), %r8d
    000000b4: 	addq	$0x4, %rcx
    000000b8: 	subq	$0x4, %rdi
    000000bc: 	movb	%r8b, -0x4(%rcx)
    000000c0: 	movzbl	0x3(%rdi), %r8d
    000000c5: 	movb	%r8b, -0x3(%rcx)
    000000c9: 	movzbl	0x2(%rdi), %r8d
    000000ce: 	movb	%r8b, -0x2(%rcx)
    000000d2: 	movzbl	0x1(%rdi), %r8d
    000000d7: 	movb	%r8b, -0x1(%rcx)
    000000db: 	cmpq	%rax, %rcx
    000000de: 	jne	.Ltmp856 # Offset: 222
    000000e0: 	movq	%r10, %rcx
    000000e3: 	movq	%rax, %rdi
    000000e6: 	movq	%r15, %r8
.Ltmp869:
    000000e9: 	cmpq	%rcx, %rsi
    000000ec: 	jle	.Ltmp857 # Offset: 236
    000000ee: 	movzbl	(%r8), %r9d
    000000f2: 	movb	%r9b, (%rdi)
    000000f5: 	leaq	0x1(%rcx), %r9
    000000f9: 	cmpq	%r9, %rsi
    000000fc: 	jle	.Ltmp857 # Offset: 252
    000000fe: 	movzbl	-0x1(%r8), %r9d
    00000103: 	movb	%r9b, 0x1(%rdi)
    00000107: 	leaq	0x2(%rcx), %r9
    0000010b: 	cmpq	%r9, %rsi
    0000010e: 	jle	.Ltmp857 # Offset: 270
    00000110: 	movzbl	-0x2(%r8), %r9d
    00000115: 	addq	$0x3, %rcx
    00000119: 	movb	%r9b, 0x2(%rdi)
    0000011d: 	cmpq	%rcx, %rsi
    00000120: 	jle	.Ltmp857 # Offset: 288
    00000122: 	movzbl	-0x3(%r8), %ecx
    00000127: 	movb	%cl, 0x3(%rdi)
.Ltmp857:
    0000012a: 	movl	iterations(%rip), %ecx
.Ltmp854:
    00000130: 	addl	$0x1, %edx
    00000133: 	cmpl	%ecx, %edx
    00000135: 	jl	.Ltmp858 # Offset: 309
.Ltmp853:
    0000013b: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000142: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    00000149: 	subq	$0x20, %rax
    0000014d: 	cmpq	%rax, %r13
    00000150: 	je	.Ltmp859 # Offset: 336
    00000156: 	movq	0x8(%rsp), %rax
    0000015b: 	leaq	0x10(%r13), %rdi
    0000015f: 	movq	%rdi, (%r13)
    00000163: 	movq	(%rax), %r14
    00000166: 	movq	0x8(%rax), %r12
    0000016a: 	movq	%r14, %rax
    0000016d: 	addq	%r12, %rax
    00000170: 	je	.Ltmp860 # Offset: 368
    00000172: 	testq	%r14, %r14
    00000175: 	je	.Ltmp861 # Offset: 373
.Ltmp860:
    0000017b: 	movq	%r12, 0x10(%rsp)
    00000180: 	cmpq	$0xf, %r12
    00000184: 	ja	.Ltmp862 # Offset: 388
    0000018a: 	cmpq	$0x1, %r12
    0000018e: 	jne	.Ltmp863 # Offset: 398
    00000194: 	movzbl	(%r14), %eax
    00000198: 	movb	%al, 0x10(%r13)
.Ltmp870:
    0000019c: 	movq	%r12, 0x8(%r13)
    000001a0: 	movb	$0x0, (%rdi,%r12)
    000001a5: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000001ac: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000001b3: 	addq	$0x20, %rax
    000001b7: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001be: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000001c5: 	je	.Ltmp864 # Offset: 453
.Ltmp871:
    000001cb: 	movq	-0x20(%rax), %r12
    000001cf: 	subq	$0x1, %rbp
    000001d3: 	callq	clock@PLT # Offset: 467
    000001d8: 	pxor	%xmm0, %xmm0
    000001dc: 	movq	%rax, end_time(%rip)
    000001e3: 	movq	%r12, %rdi
    000001e6: 	subq	start_time(%rip), %rax
    000001ed: 	cvtsi2sd	%rax, %xmm0
    000001f2: 	divsd	DATAat0x276b0(%rip), %xmm0
    000001fa: 	callq	_Z13record_resultdPKc # Offset: 506
    000001ff: 	jmp	.Ltmp865 # Offset: 511
    00000201: 	nopl	(%rax) # Size: 7
.Ltmp867:
    00000208: 	addq	$0x1, %rbx
    0000020c: 	movzbl	(%rbx), %eax
    0000020f: 	cmpb	%al, -0x1(%rbx)
    00000212: 	jb	.Ltmp866 # Offset: 530
.Ltmp865:
    00000214: 	cmpq	%rbx, %rbp
    00000217: 	jne	.Ltmp867 # Offset: 535
    00000219: 	movq	0x18(%rsp), %rax
    0000021e: 	subq	%fs:0x28, %rax
    00000227: 	jne	.Ltmp868 # Offset: 551
    0000022d: 	addq	$0x28, %rsp
    00000231: 	popq	%rbx
    00000232: 	popq	%rbp
    00000233: 	popq	%r12
    00000235: 	popq	%r13
    00000237: 	popq	%r14
    00000239: 	popq	%r15
    0000023b: 	retq # Offset: 571
    0000023c: 	nopl	(%rax) # Size: 4
.Ltmp855:
    00000240: 	movq	%rbx, %rdi
    00000243: 	movq	%r11, %r8
    00000246: 	xorl	%ecx, %ecx
    00000248: 	jmp	.Ltmp869 # Offset: 584
.Ltmp862:
    0000024d: 	movq	%r13, %rdi
    00000250: 	leaq	0x10(%rsp), %rsi
    00000255: 	xorl	%edx, %edx
    00000257: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 599
    0000025c: 	movq	%rax, (%r13)
    00000260: 	movq	%rax, %rdi
    00000263: 	movq	0x10(%rsp), %rax
    00000268: 	movq	%rax, 0x10(%r13)
.Ltmp872:
    0000026c: 	movq	%r12, %rdx
    0000026f: 	movq	%r14, %rsi
    00000272: 	callq	memcpy@PLT # Offset: 626
    00000277: 	movq	0x10(%rsp), %r12
    0000027c: 	movq	(%r13), %rdi
    00000280: 	jmp	.Ltmp870 # Offset: 640
    00000285: 	nopl	(%rax) # Size: 3
.Ltmp866:
    00000288: 	movq	0x18(%rsp), %rax
    0000028d: 	subq	%fs:0x28, %rax
    00000296: 	jne	.Ltmp868 # Offset: 662
    00000298: 	movq	0x8(%rsp), %rax
    0000029d: 	leaq	DATAat0x271d0(%rip), %rsi
    000002a4: 	movl	$0x1, %edi
    000002a9: 	movq	(%rax), %rdx
    000002ac: 	addq	$0x28, %rsp
    000002b0: 	xorl	%eax, %eax
    000002b2: 	popq	%rbx
    000002b3: 	popq	%rbp
    000002b4: 	popq	%r12
    000002b6: 	popq	%r13
    000002b8: 	popq	%r14
    000002ba: 	popq	%r15
    000002bc: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 700
.Ltmp859:
    000002c1: 	movq	0x8(%rsp), %rsi
    000002c6: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000002cd: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 717
    000002d2: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000002d9: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000002e0: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000002e7: 	jne	.Ltmp871 # Offset: 743
.Ltmp864:
    000002ed: 	movq	-0x8(%rdx), %rax
    000002f1: 	addq	$0x200, %rax
    000002f7: 	jmp	.Ltmp871 # Offset: 759
.Ltmp863:
    000002fc: 	testq	%r12, %r12
    000002ff: 	je	.Ltmp870 # Offset: 767
    00000305: 	jmp	.Ltmp872 # Offset: 773
.Ltmp868:
    0000030a: 	callq	__stack_chk_fail@PLT # Offset: 778
.Ltmp861:
    0000030f: 	leaq	DATAat0x27008(%rip), %rdi
    00000316: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 790
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_reverse_copyIPhPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1(*2)"

Binary Function "_Z12test_reverseI20BidirectionalPointerIfEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 167
  State       : disassembled
  Address     : 0xd170
  Size        : 0x237
  MaxSize     : 0x240
  Offset      : 0xd170
  Section     : .text
  Orc Section : .local.text._Z12test_reverseI20BidirectionalPointerIfEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0166:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rcx, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	xorl	%ebp, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rdi, %rbx
    0000001c: 	subq	$0x18, %rsp
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x8(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	callq	clock@PLT # Offset: 48
    00000035: 	movq	%rax, start_time(%rip)
    0000003c: 	movl	iterations(%rip), %eax
    00000042: 	testl	%eax, %eax
    00000044: 	jle	.Ltmp873 # Offset: 68
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp874:
    00000050: 	movq	%r12, %rsi
    00000053: 	movq	%rbx, %rdi
    00000056: 	addl	$0x1, %ebp
    00000059: 	callq	*%r14 # Offset: 89
    0000005c: 	cmpl	%ebp, iterations(%rip)
    00000062: 	jg	.Ltmp874 # Offset: 98
.Ltmp873:
    00000064: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000006b: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    00000072: 	subq	$0x20, %rax
    00000076: 	cmpq	%rax, %rbp
    00000079: 	je	.Ltmp875 # Offset: 121
    0000007f: 	leaq	0x10(%rbp), %rdi
    00000083: 	movq	0x8(%r13), %r14
    00000087: 	movq	%rdi, (%rbp)
    0000008b: 	movq	(%r13), %r15
    0000008f: 	movq	%r15, %rax
    00000092: 	addq	%r14, %rax
    00000095: 	je	.Ltmp876 # Offset: 149
    00000097: 	testq	%r15, %r15
    0000009a: 	je	.Ltmp877 # Offset: 154
.Ltmp876:
    000000a0: 	movq	%r14, (%rsp)
    000000a4: 	cmpq	$0xf, %r14
    000000a8: 	ja	.Ltmp878 # Offset: 168
    000000ae: 	cmpq	$0x1, %r14
    000000b2: 	jne	.Ltmp879 # Offset: 178
    000000b8: 	movzbl	(%r15), %eax
    000000bc: 	movb	%al, 0x10(%rbp)
.Ltmp885:
    000000bf: 	movq	%r14, 0x8(%rbp)
    000000c3: 	movb	$0x0, (%rdi,%r14)
    000000c8: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000cf: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000d6: 	addq	$0x20, %rax
    000000da: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000e1: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000e8: 	je	.Ltmp880 # Offset: 232
.Ltmp886:
    000000ee: 	movq	-0x20(%rax), %rbp
    000000f2: 	callq	clock@PLT # Offset: 242
    000000f7: 	pxor	%xmm0, %xmm0
    000000fb: 	movq	%rax, end_time(%rip)
    00000102: 	movq	%rbp, %rdi
    00000105: 	subq	start_time(%rip), %rax
    0000010c: 	cvtsi2sd	%rax, %xmm0
    00000111: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000119: 	callq	_Z13record_resultdPKc # Offset: 281
    0000011e: 	leaq	0x4(%rbx), %rax
    00000122: 	jmp	.Ltmp881 # Offset: 290
    00000124: 	nopl	(%rax) # Size: 4
.Ltmp883:
    00000128: 	addq	$0x4, %rax
    0000012c: 	movss	-0x8(%rax), %xmm0
    00000131: 	comiss	(%rdx), %xmm0
    00000134: 	ja	.Ltmp882 # Offset: 308
.Ltmp881:
    00000136: 	movq	%rax, %rdx
    00000139: 	cmpq	%rax, %r12
    0000013c: 	jne	.Ltmp883 # Offset: 316
    0000013e: 	movq	0x8(%rsp), %rax
    00000143: 	subq	%fs:0x28, %rax
    0000014c: 	jne	.Ltmp884 # Offset: 332
    00000152: 	addq	$0x18, %rsp
    00000156: 	popq	%rbx
    00000157: 	popq	%rbp
    00000158: 	popq	%r12
    0000015a: 	popq	%r13
    0000015c: 	popq	%r14
    0000015e: 	popq	%r15
    00000160: 	retq # Offset: 352
    00000161: 	nopl	(%rax) # Size: 7
.Ltmp878:
    00000168: 	movq	%rbp, %rdi
    0000016b: 	movq	%rsp, %rsi
    0000016e: 	xorl	%edx, %edx
    00000170: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 368
    00000175: 	movq	%rax, (%rbp)
    00000179: 	movq	%rax, %rdi
    0000017c: 	movq	(%rsp), %rax
    00000180: 	movq	%rax, 0x10(%rbp)
.Ltmp887:
    00000184: 	movq	%r14, %rdx
    00000187: 	movq	%r15, %rsi
    0000018a: 	callq	memcpy@PLT # Offset: 394
    0000018f: 	movq	(%rsp), %r14
    00000193: 	movq	(%rbp), %rdi
    00000197: 	jmp	.Ltmp885 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp882:
    000001a0: 	movq	0x8(%rsp), %rax
    000001a5: 	subq	%fs:0x28, %rax
    000001ae: 	jne	.Ltmp884 # Offset: 430
    000001b0: 	movq	(%r13), %rdx
    000001b4: 	addq	$0x18, %rsp
    000001b8: 	leaq	DATAat0x271d0(%rip), %rsi
    000001bf: 	xorl	%eax, %eax
    000001c1: 	popq	%rbx
    000001c2: 	movl	$0x1, %edi
    000001c7: 	popq	%rbp
    000001c8: 	popq	%r12
    000001ca: 	popq	%r13
    000001cc: 	popq	%r14
    000001ce: 	popq	%r15
    000001d0: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 464
    000001d5: 	nopl	(%rax) # Size: 3
.Ltmp875:
    000001d8: 	movq	%r13, %rsi
    000001db: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000001e2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 482
    000001e7: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000001ee: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001f5: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000001fc: 	jne	.Ltmp886 # Offset: 508
.Ltmp880:
    00000202: 	movq	-0x8(%rdx), %rax
    00000206: 	addq	$0x200, %rax
    0000020c: 	jmp	.Ltmp886 # Offset: 524
    00000211: 	nopl	(%rax) # Size: 7
.Ltmp879:
    00000218: 	testq	%r14, %r14
    0000021b: 	je	.Ltmp885 # Offset: 539
    00000221: 	jmp	.Ltmp887 # Offset: 545
.Ltmp884:
    00000226: 	callq	__stack_chk_fail@PLT # Offset: 550
.Ltmp877:
    0000022b: 	leaq	DATAat0x27008(%rip), %rdi
    00000232: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 562
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_reverseI20BidirectionalPointerIfEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_reverse_sizesI20BidirectionalPointerIfEPFvS1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 168
  State       : disassembled
  Address     : 0xd3b0
  Size        : 0x2a1
  MaxSize     : 0x2b0
  Offset      : 0xd3b0
  Section     : .text
  Orc Section : .local.text._Z18test_reverse_sizesI20BidirectionalPointerIfEPFvS1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0167:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	movl	$0x1, %edi
    00000010: 	pushq	%r13
    00000012: 	pushq	%r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%rcx, %rbp
    00000018: 	pushq	%rbx
    00000019: 	movl	%esi, %ebx
    0000001b: 	subq	$0x88, %rsp
    00000022: 	movl	%esi, 0x38(%rsp)
    00000026: 	leaq	DATAat0x271e0(%rip), %rsi
    0000002d: 	movq	%rdx, 0x8(%rsp)
    00000032: 	movq	%fs:0x28, %rax
    0000003b: 	movq	%rax, 0x78(%rsp)
    00000040: 	movl	iterations(%rip), %eax
    00000046: 	movl	%eax, 0x3c(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	callq	__printf_chk@PLT # Offset: 76
    00000051: 	xorl	%eax, %eax
    00000053: 	movl	$0x1, %edi
    00000058: 	leaq	DATAat0x27210(%rip), %rsi
    0000005f: 	callq	__printf_chk@PLT # Offset: 95
    00000064: 	cmpl	$0x3, %ebx
    00000067: 	jle	.Ltmp888 # Offset: 103
    0000006d: 	movslq	0x3c(%rsp), %rax
    00000072: 	xorl	%r12d, %r12d
    00000075: 	movl	$0x4, %ebx
    0000007a: 	leaq	0x60(%rsp), %r13
    0000007f: 	leaq	0x50(%rsp), %r15
    00000084: 	movq	%rax, 0x10(%rsp)
    00000089: 	leaq	0x48(%rsp), %rax
    0000008e: 	movq	%rax, 0x30(%rsp)
    00000093: 	jmp	.Ltmp889 # Offset: 147
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp894:
    000000a0: 	movzbl	(%r9), %eax
    000000a4: 	movb	%al, 0x60(%rsp)
    000000a8: 	movq	%r13, %rax
.Ltmp896:
    000000ab: 	movq	%r8, 0x58(%rsp)
    000000b0: 	movq	0x8(%rsp), %rdx
    000000b5: 	movq	%r15, %rcx
    000000b8: 	movq	%r10, %rsi
    000000bb: 	movb	$0x0, (%rax,%r8)
    000000c0: 	movq	%r14, %rdi
    000000c3: 	callq	_Z12test_reverseI20BidirectionalPointerIfEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 195
    000000c8: 	movq	0x50(%rsp), %rdi
    000000cd: 	cmpq	%r13, %rdi
    000000d0: 	je	.Ltmp890 # Offset: 208
    000000d2: 	movq	0x60(%rsp), %rax
    000000d7: 	leaq	0x1(%rax), %rsi
    000000db: 	callq	_ZdlPvm@PLT # Offset: 219
.Ltmp890:
    000000e0: 	pxor	%xmm1, %xmm1
    000000e4: 	pxor	%xmm2, %xmm2
    000000e8: 	movq	(%rbp), %rcx
    000000ec: 	movl	%ebx, %r8d
    000000ef: 	cvtsi2sd	%ebx, %xmm2
    000000f3: 	movq	results(%rip), %rax
    000000fa: 	movl	%r12d, %edx
    000000fd: 	addl	%ebx, %ebx
    000000ff: 	leaq	DATAat0x27240(%rip), %rsi
    00000106: 	movl	$0x1, %edi
    0000010b: 	addl	$0x1, %r12d
    0000010f: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000117: 	movsd	(%rax), %xmm0
    0000011b: 	movl	$0x2, %eax
    00000120: 	mulsd	%xmm2, %xmm1
    00000124: 	divsd	DATAat0x276b0(%rip), %xmm1
    0000012c: 	divsd	%xmm0, %xmm1
    00000130: 	callq	__printf_chk@PLT # Offset: 304
    00000135: 	movl	$0x0, current_test(%rip)
    0000013f: 	cmpl	%ebx, 0x38(%rsp)
    00000143: 	jl	.Ltmp888 # Offset: 323
.Ltmp889:
    00000149: 	movl	0x38(%rsp), %eax
    0000014d: 	movq	(%rbp), %r9
    00000151: 	movq	%r13, 0x50(%rsp)
    00000156: 	movq	0x8(%rbp), %r8
    0000015a: 	cltd
    0000015b: 	idivl	%ebx
    0000015d: 	movl	$0x4, %edx
    00000162: 	cltq
    00000164: 	imulq	0x10(%rsp), %rax
    0000016a: 	cmpq	%rdx, %rax
    0000016d: 	cmovlq	%rdx, %rax
    00000171: 	movl	$0x70000000, %edx
    00000176: 	cmpq	%rdx, %rax
    00000179: 	cmovgq	%rdx, %rax
    0000017d: 	addq	$0x1, %rax
    00000181: 	andq	$-0x2, %rax
    00000185: 	movl	%eax, iterations(%rip)
    0000018b: 	movslq	%ebx, %rax
    0000018e: 	leaq	(%r14,%rax,4), %r10
    00000192: 	movq	%r9, %rax
    00000195: 	addq	%r8, %rax
    00000198: 	je	.Ltmp891 # Offset: 408
    0000019a: 	testq	%r9, %r9
    0000019d: 	je	.Ltmp892 # Offset: 413
.Ltmp891:
    000001a3: 	movq	%r8, 0x48(%rsp)
    000001a8: 	cmpq	$0xf, %r8
    000001ac: 	ja	.Ltmp893 # Offset: 428
    000001ae: 	cmpq	$0x1, %r8
    000001b2: 	je	.Ltmp894 # Offset: 434
    000001b8: 	testq	%r8, %r8
    000001bb: 	jne	.Ltmp895 # Offset: 443
    000001c1: 	movq	%r13, %rax
    000001c4: 	jmp	.Ltmp896 # Offset: 452
    000001c9: 	nopl	(%rax) # Size: 7
.Ltmp893:
    000001d0: 	movq	0x30(%rsp), %rsi
    000001d5: 	movq	%r15, %rdi
    000001d8: 	xorl	%edx, %edx
    000001da: 	movq	%r10, 0x28(%rsp)
    000001df: 	movq	%r8, 0x20(%rsp)
    000001e4: 	movq	%r9, 0x18(%rsp)
    000001e9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 489
    000001ee: 	movq	0x18(%rsp), %r9
    000001f3: 	movq	0x20(%rsp), %r8
    000001f8: 	movq	%rax, 0x50(%rsp)
    000001fd: 	movq	%rax, %rdi
    00000200: 	movq	0x48(%rsp), %rax
    00000205: 	movq	0x28(%rsp), %r10
    0000020a: 	movq	%rax, 0x60(%rsp)
.Ltmp898:
    0000020f: 	movq	%r8, %rdx
    00000212: 	movq	%r9, %rsi
    00000215: 	movq	%r10, 0x18(%rsp)
    0000021a: 	callq	memcpy@PLT # Offset: 538
    0000021f: 	movq	0x48(%rsp), %r8
    00000224: 	movq	0x50(%rsp), %rax
    00000229: 	movq	0x18(%rsp), %r10
    0000022e: 	jmp	.Ltmp896 # Offset: 558
    00000233: 	nopl	(%rax,%rax) # Size: 5
.Ltmp888:
    00000238: 	movl	0x3c(%rsp), %eax
    0000023c: 	movl	%eax, iterations(%rip)
    00000242: 	movq	0x78(%rsp), %rax
    00000247: 	subq	%fs:0x28, %rax
    00000250: 	jne	.Ltmp897 # Offset: 592
    00000252: 	addq	$0x88, %rsp
    00000259: 	popq	%rbx
    0000025a: 	popq	%rbp
    0000025b: 	popq	%r12
    0000025d: 	popq	%r13
    0000025f: 	popq	%r14
    00000261: 	popq	%r15
    00000263: 	retq # Offset: 611
.Ltmp892:
    00000264: 	leaq	DATAat0x27008(%rip), %rdi
    0000026b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 619
.Ltmp897:
    00000270: 	callq	__stack_chk_fail@PLT # Offset: 624
.Ltmp895:
    00000275: 	movq	%r13, %rdi
    00000278: 	jmp	.Ltmp898 # Offset: 632
    0000027a: 	endbr64
    0000027e: 	movq	%rax, %rbp
    00000281: 	movq	0x50(%rsp), %rdi
    00000286: 	cmpq	%r13, %rdi
    00000289: 	je	.Ltmp899 # Offset: 649
    0000028b: 	movq	0x60(%rsp), %rax
    00000290: 	leaq	0x1(%rax), %rsi
    00000294: 	callq	_ZdlPvm@PLT # Offset: 660
.Ltmp899:
    00000299: 	movq	%rbp, %rdi
    0000029c: 	callq	_Unwind_Resume@PLT # Offset: 668
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_reverse_sizesI20BidirectionalPointerIfEPFvS1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12test_reverseI20BidirectionalPointerIsEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 169
  State       : disassembled
  Address     : 0xd660
  Size        : 0x22f
  MaxSize     : 0x230
  Offset      : 0xd660
  Section     : .text
  Orc Section : .local.text._Z12test_reverseI20BidirectionalPointerIsEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0168:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rcx, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	xorl	%ebp, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rdi, %rbx
    0000001c: 	subq	$0x18, %rsp
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x8(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	callq	clock@PLT # Offset: 48
    00000035: 	movq	%rax, start_time(%rip)
    0000003c: 	movl	iterations(%rip), %eax
    00000042: 	testl	%eax, %eax
    00000044: 	jle	.Ltmp900 # Offset: 68
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp901:
    00000050: 	movq	%r12, %rsi
    00000053: 	movq	%rbx, %rdi
    00000056: 	addl	$0x1, %ebp
    00000059: 	callq	*%r14 # Offset: 89
    0000005c: 	cmpl	%ebp, iterations(%rip)
    00000062: 	jg	.Ltmp901 # Offset: 98
.Ltmp900:
    00000064: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000006b: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    00000072: 	subq	$0x20, %rax
    00000076: 	cmpq	%rax, %rbp
    00000079: 	je	.Ltmp902 # Offset: 121
    0000007f: 	leaq	0x10(%rbp), %rdi
    00000083: 	movq	0x8(%r13), %r14
    00000087: 	movq	%rdi, (%rbp)
    0000008b: 	movq	(%r13), %r15
    0000008f: 	movq	%r15, %rax
    00000092: 	addq	%r14, %rax
    00000095: 	je	.Ltmp903 # Offset: 149
    00000097: 	testq	%r15, %r15
    0000009a: 	je	.Ltmp904 # Offset: 154
.Ltmp903:
    000000a0: 	movq	%r14, (%rsp)
    000000a4: 	cmpq	$0xf, %r14
    000000a8: 	ja	.Ltmp905 # Offset: 168
    000000ae: 	cmpq	$0x1, %r14
    000000b2: 	jne	.Ltmp906 # Offset: 178
    000000b8: 	movzbl	(%r15), %eax
    000000bc: 	movb	%al, 0x10(%rbp)
.Ltmp912:
    000000bf: 	movq	%r14, 0x8(%rbp)
    000000c3: 	movb	$0x0, (%rdi,%r14)
    000000c8: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000cf: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000d6: 	addq	$0x20, %rax
    000000da: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000e1: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000e8: 	je	.Ltmp907 # Offset: 232
.Ltmp913:
    000000ee: 	movq	-0x20(%rax), %rbp
    000000f2: 	callq	clock@PLT # Offset: 242
    000000f7: 	pxor	%xmm0, %xmm0
    000000fb: 	movq	%rax, end_time(%rip)
    00000102: 	movq	%rbp, %rdi
    00000105: 	subq	start_time(%rip), %rax
    0000010c: 	cvtsi2sd	%rax, %xmm0
    00000111: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000119: 	callq	_Z13record_resultdPKc # Offset: 281
    0000011e: 	leaq	0x2(%rbx), %rax
    00000122: 	jmp	.Ltmp908 # Offset: 290
    00000124: 	nopl	(%rax) # Size: 4
.Ltmp910:
    00000128: 	addq	$0x2, %rax
    0000012c: 	movzwl	-0x4(%rax), %ecx
    00000130: 	cmpw	%cx, (%rdx)
    00000133: 	jl	.Ltmp909 # Offset: 307
.Ltmp908:
    00000135: 	movq	%rax, %rdx
    00000138: 	cmpq	%rax, %r12
    0000013b: 	jne	.Ltmp910 # Offset: 315
    0000013d: 	movq	0x8(%rsp), %rax
    00000142: 	subq	%fs:0x28, %rax
    0000014b: 	jne	.Ltmp911 # Offset: 331
    00000151: 	addq	$0x18, %rsp
    00000155: 	popq	%rbx
    00000156: 	popq	%rbp
    00000157: 	popq	%r12
    00000159: 	popq	%r13
    0000015b: 	popq	%r14
    0000015d: 	popq	%r15
    0000015f: 	retq # Offset: 351
.Ltmp905:
    00000160: 	movq	%rbp, %rdi
    00000163: 	movq	%rsp, %rsi
    00000166: 	xorl	%edx, %edx
    00000168: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 360
    0000016d: 	movq	%rax, (%rbp)
    00000171: 	movq	%rax, %rdi
    00000174: 	movq	(%rsp), %rax
    00000178: 	movq	%rax, 0x10(%rbp)
.Ltmp914:
    0000017c: 	movq	%r14, %rdx
    0000017f: 	movq	%r15, %rsi
    00000182: 	callq	memcpy@PLT # Offset: 386
    00000187: 	movq	(%rsp), %r14
    0000018b: 	movq	(%rbp), %rdi
    0000018f: 	jmp	.Ltmp912 # Offset: 399
    00000194: 	nopl	(%rax) # Size: 4
.Ltmp909:
    00000198: 	movq	0x8(%rsp), %rax
    0000019d: 	subq	%fs:0x28, %rax
    000001a6: 	jne	.Ltmp911 # Offset: 422
    000001a8: 	movq	(%r13), %rdx
    000001ac: 	addq	$0x18, %rsp
    000001b0: 	leaq	DATAat0x271d0(%rip), %rsi
    000001b7: 	xorl	%eax, %eax
    000001b9: 	popq	%rbx
    000001ba: 	movl	$0x1, %edi
    000001bf: 	popq	%rbp
    000001c0: 	popq	%r12
    000001c2: 	popq	%r13
    000001c4: 	popq	%r14
    000001c6: 	popq	%r15
    000001c8: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 456
    000001cd: 	nopl	(%rax) # Size: 3
.Ltmp902:
    000001d0: 	movq	%r13, %rsi
    000001d3: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000001da: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 474
    000001df: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000001e6: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001ed: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000001f4: 	jne	.Ltmp913 # Offset: 500
.Ltmp907:
    000001fa: 	movq	-0x8(%rdx), %rax
    000001fe: 	addq	$0x200, %rax
    00000204: 	jmp	.Ltmp913 # Offset: 516
    00000209: 	nopl	(%rax) # Size: 7
.Ltmp906:
    00000210: 	testq	%r14, %r14
    00000213: 	je	.Ltmp912 # Offset: 531
    00000219: 	jmp	.Ltmp914 # Offset: 537
.Ltmp911:
    0000021e: 	callq	__stack_chk_fail@PLT # Offset: 542
.Ltmp904:
    00000223: 	leaq	DATAat0x27008(%rip), %rdi
    0000022a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 554
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_reverseI20BidirectionalPointerIsEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12test_reverseIPmPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 170
  State       : disassembled
  Address     : 0xd890
  Size        : 0x22f
  MaxSize     : 0x230
  Offset      : 0xd890
  Section     : .text
  Orc Section : .local.text._Z12test_reverseIPmPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0169:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rcx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdx, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	xorl	%ebp, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rdi, %rbx
    0000001c: 	subq	$0x18, %rsp
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x8(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	callq	clock@PLT # Offset: 48
    00000035: 	movq	%rax, start_time(%rip)
    0000003c: 	movl	iterations(%rip), %eax
    00000042: 	testl	%eax, %eax
    00000044: 	jle	.Ltmp915 # Offset: 68
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp916:
    00000050: 	movq	%r12, %rsi
    00000053: 	movq	%rbx, %rdi
    00000056: 	addl	$0x1, %ebp
    00000059: 	callq	*%r13 # Offset: 89
    0000005c: 	cmpl	%ebp, iterations(%rip)
    00000062: 	jg	.Ltmp916 # Offset: 98
.Ltmp915:
    00000064: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000006b: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    00000072: 	subq	$0x20, %rax
    00000076: 	cmpq	%rax, %rbp
    00000079: 	je	.Ltmp917 # Offset: 121
    0000007f: 	leaq	0x10(%rbp), %rdi
    00000083: 	movq	0x8(%r14), %r13
    00000087: 	movq	%rdi, (%rbp)
    0000008b: 	movq	(%r14), %r15
    0000008e: 	movq	%r15, %rax
    00000091: 	addq	%r13, %rax
    00000094: 	je	.Ltmp918 # Offset: 148
    00000096: 	testq	%r15, %r15
    00000099: 	je	.Ltmp919 # Offset: 153
.Ltmp918:
    0000009f: 	movq	%r13, (%rsp)
    000000a3: 	cmpq	$0xf, %r13
    000000a7: 	ja	.Ltmp920 # Offset: 167
    000000ad: 	cmpq	$0x1, %r13
    000000b1: 	jne	.Ltmp921 # Offset: 177
    000000b7: 	movzbl	(%r15), %eax
    000000bb: 	movb	%al, 0x10(%rbp)
.Ltmp927:
    000000be: 	movq	%r13, 0x8(%rbp)
    000000c2: 	movb	$0x0, (%rdi,%r13)
    000000c7: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000ce: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000d5: 	addq	$0x20, %rax
    000000d9: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000e0: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000e7: 	je	.Ltmp922 # Offset: 231
.Ltmp928:
    000000ed: 	movq	-0x20(%rax), %rbp
    000000f1: 	callq	clock@PLT # Offset: 241
    000000f6: 	pxor	%xmm0, %xmm0
    000000fa: 	movq	%rax, end_time(%rip)
    00000101: 	movq	%rbp, %rdi
    00000104: 	subq	start_time(%rip), %rax
    0000010b: 	cvtsi2sd	%rax, %xmm0
    00000110: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000118: 	callq	_Z13record_resultdPKc # Offset: 280
    0000011d: 	leaq	0x8(%rbx), %rax
    00000121: 	jmp	.Ltmp923 # Offset: 289
    00000123: 	nopl	(%rax,%rax) # Size: 5
.Ltmp925:
    00000128: 	addq	$0x8, %rax
    0000012c: 	movq	-0x10(%rax), %rcx
    00000130: 	cmpq	%rcx, -0x8(%rax)
    00000134: 	jb	.Ltmp924 # Offset: 308
.Ltmp923:
    00000136: 	cmpq	%rax, %r12
    00000139: 	jne	.Ltmp925 # Offset: 313
    0000013b: 	movq	0x8(%rsp), %rax
    00000140: 	subq	%fs:0x28, %rax
    00000149: 	jne	.Ltmp926 # Offset: 329
    0000014f: 	addq	$0x18, %rsp
    00000153: 	popq	%rbx
    00000154: 	popq	%rbp
    00000155: 	popq	%r12
    00000157: 	popq	%r13
    00000159: 	popq	%r14
    0000015b: 	popq	%r15
    0000015d: 	retq # Offset: 349
    0000015e: 	nop # Size: 2
.Ltmp920:
    00000160: 	movq	%rbp, %rdi
    00000163: 	movq	%rsp, %rsi
    00000166: 	xorl	%edx, %edx
    00000168: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 360
    0000016d: 	movq	%rax, (%rbp)
    00000171: 	movq	%rax, %rdi
    00000174: 	movq	(%rsp), %rax
    00000178: 	movq	%rax, 0x10(%rbp)
.Ltmp929:
    0000017c: 	movq	%r13, %rdx
    0000017f: 	movq	%r15, %rsi
    00000182: 	callq	memcpy@PLT # Offset: 386
    00000187: 	movq	(%rsp), %r13
    0000018b: 	movq	(%rbp), %rdi
    0000018f: 	jmp	.Ltmp927 # Offset: 399
    00000194: 	nopl	(%rax) # Size: 4
.Ltmp924:
    00000198: 	movq	0x8(%rsp), %rax
    0000019d: 	subq	%fs:0x28, %rax
    000001a6: 	jne	.Ltmp926 # Offset: 422
    000001a8: 	movq	(%r14), %rdx
    000001ab: 	addq	$0x18, %rsp
    000001af: 	leaq	DATAat0x271d0(%rip), %rsi
    000001b6: 	xorl	%eax, %eax
    000001b8: 	popq	%rbx
    000001b9: 	movl	$0x1, %edi
    000001be: 	popq	%rbp
    000001bf: 	popq	%r12
    000001c1: 	popq	%r13
    000001c3: 	popq	%r14
    000001c5: 	popq	%r15
    000001c7: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 455
    000001cc: 	nopl	(%rax) # Size: 4
.Ltmp917:
    000001d0: 	movq	%r14, %rsi
    000001d3: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000001da: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 474
    000001df: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000001e6: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001ed: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000001f4: 	jne	.Ltmp928 # Offset: 500
.Ltmp922:
    000001fa: 	movq	-0x8(%rdx), %rax
    000001fe: 	addq	$0x200, %rax
    00000204: 	jmp	.Ltmp928 # Offset: 516
    00000209: 	nopl	(%rax) # Size: 7
.Ltmp921:
    00000210: 	testq	%r13, %r13
    00000213: 	je	.Ltmp927 # Offset: 531
    00000219: 	jmp	.Ltmp929 # Offset: 537
.Ltmp926:
    0000021e: 	callq	__stack_chk_fail@PLT # Offset: 542
.Ltmp919:
    00000223: 	leaq	DATAat0x27008(%rip), %rdi
    0000022a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 554
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_reverseIPmPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_reverse_sizesIPmPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 171
  State       : disassembled
  Address     : 0xdac0
  Size        : 0x2a1
  MaxSize     : 0x2b0
  Offset      : 0xdac0
  Section     : .text
  Orc Section : .local.text._Z18test_reverse_sizesIPmPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0170:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	movl	$0x1, %edi
    00000010: 	pushq	%r13
    00000012: 	pushq	%r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%rcx, %rbp
    00000018: 	pushq	%rbx
    00000019: 	movl	%esi, %ebx
    0000001b: 	subq	$0x88, %rsp
    00000022: 	movl	%esi, 0x38(%rsp)
    00000026: 	leaq	DATAat0x271e0(%rip), %rsi
    0000002d: 	movq	%rdx, 0x8(%rsp)
    00000032: 	movq	%fs:0x28, %rax
    0000003b: 	movq	%rax, 0x78(%rsp)
    00000040: 	movl	iterations(%rip), %eax
    00000046: 	movl	%eax, 0x3c(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	callq	__printf_chk@PLT # Offset: 76
    00000051: 	xorl	%eax, %eax
    00000053: 	movl	$0x1, %edi
    00000058: 	leaq	DATAat0x27210(%rip), %rsi
    0000005f: 	callq	__printf_chk@PLT # Offset: 95
    00000064: 	cmpl	$0x3, %ebx
    00000067: 	jle	.Ltmp930 # Offset: 103
    0000006d: 	movslq	0x3c(%rsp), %rax
    00000072: 	xorl	%r12d, %r12d
    00000075: 	movl	$0x4, %ebx
    0000007a: 	leaq	0x60(%rsp), %r13
    0000007f: 	leaq	0x50(%rsp), %r15
    00000084: 	movq	%rax, 0x10(%rsp)
    00000089: 	leaq	0x48(%rsp), %rax
    0000008e: 	movq	%rax, 0x30(%rsp)
    00000093: 	jmp	.Ltmp931 # Offset: 147
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp936:
    000000a0: 	movzbl	(%r9), %eax
    000000a4: 	movb	%al, 0x60(%rsp)
    000000a8: 	movq	%r13, %rax
.Ltmp938:
    000000ab: 	movq	%r8, 0x58(%rsp)
    000000b0: 	movq	0x8(%rsp), %rdx
    000000b5: 	movq	%r15, %rcx
    000000b8: 	movq	%r10, %rsi
    000000bb: 	movb	$0x0, (%rax,%r8)
    000000c0: 	movq	%r14, %rdi
    000000c3: 	callq	_Z12test_reverseIPmPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 195
    000000c8: 	movq	0x50(%rsp), %rdi
    000000cd: 	cmpq	%r13, %rdi
    000000d0: 	je	.Ltmp932 # Offset: 208
    000000d2: 	movq	0x60(%rsp), %rax
    000000d7: 	leaq	0x1(%rax), %rsi
    000000db: 	callq	_ZdlPvm@PLT # Offset: 219
.Ltmp932:
    000000e0: 	pxor	%xmm1, %xmm1
    000000e4: 	pxor	%xmm2, %xmm2
    000000e8: 	movq	(%rbp), %rcx
    000000ec: 	movl	%ebx, %r8d
    000000ef: 	cvtsi2sd	%ebx, %xmm2
    000000f3: 	movq	results(%rip), %rax
    000000fa: 	movl	%r12d, %edx
    000000fd: 	addl	%ebx, %ebx
    000000ff: 	leaq	DATAat0x27240(%rip), %rsi
    00000106: 	movl	$0x1, %edi
    0000010b: 	addl	$0x1, %r12d
    0000010f: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000117: 	movsd	(%rax), %xmm0
    0000011b: 	movl	$0x2, %eax
    00000120: 	mulsd	%xmm2, %xmm1
    00000124: 	divsd	DATAat0x276b0(%rip), %xmm1
    0000012c: 	divsd	%xmm0, %xmm1
    00000130: 	callq	__printf_chk@PLT # Offset: 304
    00000135: 	movl	$0x0, current_test(%rip)
    0000013f: 	cmpl	%ebx, 0x38(%rsp)
    00000143: 	jl	.Ltmp930 # Offset: 323
.Ltmp931:
    00000149: 	movl	0x38(%rsp), %eax
    0000014d: 	movq	(%rbp), %r9
    00000151: 	movq	%r13, 0x50(%rsp)
    00000156: 	movq	0x8(%rbp), %r8
    0000015a: 	cltd
    0000015b: 	idivl	%ebx
    0000015d: 	movl	$0x4, %edx
    00000162: 	cltq
    00000164: 	imulq	0x10(%rsp), %rax
    0000016a: 	cmpq	%rdx, %rax
    0000016d: 	cmovlq	%rdx, %rax
    00000171: 	movl	$0x70000000, %edx
    00000176: 	cmpq	%rdx, %rax
    00000179: 	cmovgq	%rdx, %rax
    0000017d: 	addq	$0x1, %rax
    00000181: 	andq	$-0x2, %rax
    00000185: 	movl	%eax, iterations(%rip)
    0000018b: 	movslq	%ebx, %rax
    0000018e: 	leaq	(%r14,%rax,8), %r10
    00000192: 	movq	%r9, %rax
    00000195: 	addq	%r8, %rax
    00000198: 	je	.Ltmp933 # Offset: 408
    0000019a: 	testq	%r9, %r9
    0000019d: 	je	.Ltmp934 # Offset: 413
.Ltmp933:
    000001a3: 	movq	%r8, 0x48(%rsp)
    000001a8: 	cmpq	$0xf, %r8
    000001ac: 	ja	.Ltmp935 # Offset: 428
    000001ae: 	cmpq	$0x1, %r8
    000001b2: 	je	.Ltmp936 # Offset: 434
    000001b8: 	testq	%r8, %r8
    000001bb: 	jne	.Ltmp937 # Offset: 443
    000001c1: 	movq	%r13, %rax
    000001c4: 	jmp	.Ltmp938 # Offset: 452
    000001c9: 	nopl	(%rax) # Size: 7
.Ltmp935:
    000001d0: 	movq	0x30(%rsp), %rsi
    000001d5: 	movq	%r15, %rdi
    000001d8: 	xorl	%edx, %edx
    000001da: 	movq	%r8, 0x28(%rsp)
    000001df: 	movq	%r9, 0x20(%rsp)
    000001e4: 	movq	%r10, 0x18(%rsp)
    000001e9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 489
    000001ee: 	movq	0x18(%rsp), %r10
    000001f3: 	movq	0x20(%rsp), %r9
    000001f8: 	movq	%rax, 0x50(%rsp)
    000001fd: 	movq	%rax, %rdi
    00000200: 	movq	0x48(%rsp), %rax
    00000205: 	movq	0x28(%rsp), %r8
    0000020a: 	movq	%rax, 0x60(%rsp)
.Ltmp940:
    0000020f: 	movq	%r8, %rdx
    00000212: 	movq	%r9, %rsi
    00000215: 	movq	%r10, 0x18(%rsp)
    0000021a: 	callq	memcpy@PLT # Offset: 538
    0000021f: 	movq	0x48(%rsp), %r8
    00000224: 	movq	0x50(%rsp), %rax
    00000229: 	movq	0x18(%rsp), %r10
    0000022e: 	jmp	.Ltmp938 # Offset: 558
    00000233: 	nopl	(%rax,%rax) # Size: 5
.Ltmp930:
    00000238: 	movl	0x3c(%rsp), %eax
    0000023c: 	movl	%eax, iterations(%rip)
    00000242: 	movq	0x78(%rsp), %rax
    00000247: 	subq	%fs:0x28, %rax
    00000250: 	jne	.Ltmp939 # Offset: 592
    00000252: 	addq	$0x88, %rsp
    00000259: 	popq	%rbx
    0000025a: 	popq	%rbp
    0000025b: 	popq	%r12
    0000025d: 	popq	%r13
    0000025f: 	popq	%r14
    00000261: 	popq	%r15
    00000263: 	retq # Offset: 611
.Ltmp934:
    00000264: 	leaq	DATAat0x27008(%rip), %rdi
    0000026b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 619
.Ltmp939:
    00000270: 	callq	__stack_chk_fail@PLT # Offset: 624
.Ltmp937:
    00000275: 	movq	%r13, %rdi
    00000278: 	jmp	.Ltmp940 # Offset: 632
    0000027a: 	endbr64
    0000027e: 	movq	%rax, %rbp
    00000281: 	movq	0x50(%rsp), %rdi
    00000286: 	cmpq	%r13, %rdi
    00000289: 	je	.Ltmp941 # Offset: 649
    0000028b: 	movq	0x60(%rsp), %rax
    00000290: 	leaq	0x1(%rax), %rsi
    00000294: 	callq	_ZdlPvm@PLT # Offset: 660
.Ltmp941:
    00000299: 	movq	%rbp, %rdi
    0000029c: 	callq	_Unwind_Resume@PLT # Offset: 668
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_reverse_sizesIPmPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12test_reverseIPfPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 172
  State       : disassembled
  Address     : 0xdd70
  Size        : 0x22f
  MaxSize     : 0x230
  Offset      : 0xdd70
  Section     : .text
  Orc Section : .local.text._Z12test_reverseIPfPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0171:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rcx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdx, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	xorl	%ebp, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rdi, %rbx
    0000001c: 	subq	$0x18, %rsp
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x8(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	callq	clock@PLT # Offset: 48
    00000035: 	movq	%rax, start_time(%rip)
    0000003c: 	movl	iterations(%rip), %eax
    00000042: 	testl	%eax, %eax
    00000044: 	jle	.Ltmp942 # Offset: 68
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp943:
    00000050: 	movq	%r12, %rsi
    00000053: 	movq	%rbx, %rdi
    00000056: 	addl	$0x1, %ebp
    00000059: 	callq	*%r13 # Offset: 89
    0000005c: 	cmpl	%ebp, iterations(%rip)
    00000062: 	jg	.Ltmp943 # Offset: 98
.Ltmp942:
    00000064: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000006b: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    00000072: 	subq	$0x20, %rax
    00000076: 	cmpq	%rax, %rbp
    00000079: 	je	.Ltmp944 # Offset: 121
    0000007f: 	leaq	0x10(%rbp), %rdi
    00000083: 	movq	0x8(%r14), %r13
    00000087: 	movq	%rdi, (%rbp)
    0000008b: 	movq	(%r14), %r15
    0000008e: 	movq	%r15, %rax
    00000091: 	addq	%r13, %rax
    00000094: 	je	.Ltmp945 # Offset: 148
    00000096: 	testq	%r15, %r15
    00000099: 	je	.Ltmp946 # Offset: 153
.Ltmp945:
    0000009f: 	movq	%r13, (%rsp)
    000000a3: 	cmpq	$0xf, %r13
    000000a7: 	ja	.Ltmp947 # Offset: 167
    000000ad: 	cmpq	$0x1, %r13
    000000b1: 	jne	.Ltmp948 # Offset: 177
    000000b7: 	movzbl	(%r15), %eax
    000000bb: 	movb	%al, 0x10(%rbp)
.Ltmp954:
    000000be: 	movq	%r13, 0x8(%rbp)
    000000c2: 	movb	$0x0, (%rdi,%r13)
    000000c7: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000ce: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000d5: 	addq	$0x20, %rax
    000000d9: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000e0: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000e7: 	je	.Ltmp949 # Offset: 231
.Ltmp955:
    000000ed: 	movq	-0x20(%rax), %rbp
    000000f1: 	callq	clock@PLT # Offset: 241
    000000f6: 	pxor	%xmm0, %xmm0
    000000fa: 	movq	%rax, end_time(%rip)
    00000101: 	movq	%rbp, %rdi
    00000104: 	subq	start_time(%rip), %rax
    0000010b: 	cvtsi2sd	%rax, %xmm0
    00000110: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000118: 	callq	_Z13record_resultdPKc # Offset: 280
    0000011d: 	leaq	0x4(%rbx), %rax
    00000121: 	jmp	.Ltmp950 # Offset: 289
    00000123: 	nopl	(%rax,%rax) # Size: 5
.Ltmp952:
    00000128: 	addq	$0x4, %rax
    0000012c: 	movss	-0x8(%rax), %xmm0
    00000131: 	comiss	-0x4(%rax), %xmm0
    00000135: 	ja	.Ltmp951 # Offset: 309
.Ltmp950:
    00000137: 	cmpq	%rax, %r12
    0000013a: 	jne	.Ltmp952 # Offset: 314
    0000013c: 	movq	0x8(%rsp), %rax
    00000141: 	subq	%fs:0x28, %rax
    0000014a: 	jne	.Ltmp953 # Offset: 330
    00000150: 	addq	$0x18, %rsp
    00000154: 	popq	%rbx
    00000155: 	popq	%rbp
    00000156: 	popq	%r12
    00000158: 	popq	%r13
    0000015a: 	popq	%r14
    0000015c: 	popq	%r15
    0000015e: 	retq # Offset: 350
    0000015f: 	nop # Size: 1
.Ltmp947:
    00000160: 	movq	%rbp, %rdi
    00000163: 	movq	%rsp, %rsi
    00000166: 	xorl	%edx, %edx
    00000168: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 360
    0000016d: 	movq	%rax, (%rbp)
    00000171: 	movq	%rax, %rdi
    00000174: 	movq	(%rsp), %rax
    00000178: 	movq	%rax, 0x10(%rbp)
.Ltmp956:
    0000017c: 	movq	%r13, %rdx
    0000017f: 	movq	%r15, %rsi
    00000182: 	callq	memcpy@PLT # Offset: 386
    00000187: 	movq	(%rsp), %r13
    0000018b: 	movq	(%rbp), %rdi
    0000018f: 	jmp	.Ltmp954 # Offset: 399
    00000194: 	nopl	(%rax) # Size: 4
.Ltmp951:
    00000198: 	movq	0x8(%rsp), %rax
    0000019d: 	subq	%fs:0x28, %rax
    000001a6: 	jne	.Ltmp953 # Offset: 422
    000001a8: 	movq	(%r14), %rdx
    000001ab: 	addq	$0x18, %rsp
    000001af: 	leaq	DATAat0x271d0(%rip), %rsi
    000001b6: 	xorl	%eax, %eax
    000001b8: 	popq	%rbx
    000001b9: 	movl	$0x1, %edi
    000001be: 	popq	%rbp
    000001bf: 	popq	%r12
    000001c1: 	popq	%r13
    000001c3: 	popq	%r14
    000001c5: 	popq	%r15
    000001c7: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 455
    000001cc: 	nopl	(%rax) # Size: 4
.Ltmp944:
    000001d0: 	movq	%r14, %rsi
    000001d3: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000001da: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 474
    000001df: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000001e6: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001ed: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000001f4: 	jne	.Ltmp955 # Offset: 500
.Ltmp949:
    000001fa: 	movq	-0x8(%rdx), %rax
    000001fe: 	addq	$0x200, %rax
    00000204: 	jmp	.Ltmp955 # Offset: 516
    00000209: 	nopl	(%rax) # Size: 7
.Ltmp948:
    00000210: 	testq	%r13, %r13
    00000213: 	je	.Ltmp954 # Offset: 531
    00000219: 	jmp	.Ltmp956 # Offset: 537
.Ltmp953:
    0000021e: 	callq	__stack_chk_fail@PLT # Offset: 542
.Ltmp946:
    00000223: 	leaq	DATAat0x27008(%rip), %rdi
    0000022a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 554
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_reverseIPfPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_reverse_sizesIPfPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 173
  State       : disassembled
  Address     : 0xdfa0
  Size        : 0x2a1
  MaxSize     : 0x2b0
  Offset      : 0xdfa0
  Section     : .text
  Orc Section : .local.text._Z18test_reverse_sizesIPfPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0172:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	movl	$0x1, %edi
    00000010: 	pushq	%r13
    00000012: 	pushq	%r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%rcx, %rbp
    00000018: 	pushq	%rbx
    00000019: 	movl	%esi, %ebx
    0000001b: 	subq	$0x88, %rsp
    00000022: 	movl	%esi, 0x38(%rsp)
    00000026: 	leaq	DATAat0x271e0(%rip), %rsi
    0000002d: 	movq	%rdx, 0x8(%rsp)
    00000032: 	movq	%fs:0x28, %rax
    0000003b: 	movq	%rax, 0x78(%rsp)
    00000040: 	movl	iterations(%rip), %eax
    00000046: 	movl	%eax, 0x3c(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	callq	__printf_chk@PLT # Offset: 76
    00000051: 	xorl	%eax, %eax
    00000053: 	movl	$0x1, %edi
    00000058: 	leaq	DATAat0x27210(%rip), %rsi
    0000005f: 	callq	__printf_chk@PLT # Offset: 95
    00000064: 	cmpl	$0x3, %ebx
    00000067: 	jle	.Ltmp957 # Offset: 103
    0000006d: 	movslq	0x3c(%rsp), %rax
    00000072: 	xorl	%r12d, %r12d
    00000075: 	movl	$0x4, %ebx
    0000007a: 	leaq	0x60(%rsp), %r13
    0000007f: 	leaq	0x50(%rsp), %r15
    00000084: 	movq	%rax, 0x10(%rsp)
    00000089: 	leaq	0x48(%rsp), %rax
    0000008e: 	movq	%rax, 0x30(%rsp)
    00000093: 	jmp	.Ltmp958 # Offset: 147
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp963:
    000000a0: 	movzbl	(%r9), %eax
    000000a4: 	movb	%al, 0x60(%rsp)
    000000a8: 	movq	%r13, %rax
.Ltmp965:
    000000ab: 	movq	%r8, 0x58(%rsp)
    000000b0: 	movq	0x8(%rsp), %rdx
    000000b5: 	movq	%r15, %rcx
    000000b8: 	movq	%r10, %rsi
    000000bb: 	movb	$0x0, (%rax,%r8)
    000000c0: 	movq	%r14, %rdi
    000000c3: 	callq	_Z12test_reverseIPfPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 195
    000000c8: 	movq	0x50(%rsp), %rdi
    000000cd: 	cmpq	%r13, %rdi
    000000d0: 	je	.Ltmp959 # Offset: 208
    000000d2: 	movq	0x60(%rsp), %rax
    000000d7: 	leaq	0x1(%rax), %rsi
    000000db: 	callq	_ZdlPvm@PLT # Offset: 219
.Ltmp959:
    000000e0: 	pxor	%xmm1, %xmm1
    000000e4: 	pxor	%xmm2, %xmm2
    000000e8: 	movq	(%rbp), %rcx
    000000ec: 	movl	%ebx, %r8d
    000000ef: 	cvtsi2sd	%ebx, %xmm2
    000000f3: 	movq	results(%rip), %rax
    000000fa: 	movl	%r12d, %edx
    000000fd: 	addl	%ebx, %ebx
    000000ff: 	leaq	DATAat0x27240(%rip), %rsi
    00000106: 	movl	$0x1, %edi
    0000010b: 	addl	$0x1, %r12d
    0000010f: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000117: 	movsd	(%rax), %xmm0
    0000011b: 	movl	$0x2, %eax
    00000120: 	mulsd	%xmm2, %xmm1
    00000124: 	divsd	DATAat0x276b0(%rip), %xmm1
    0000012c: 	divsd	%xmm0, %xmm1
    00000130: 	callq	__printf_chk@PLT # Offset: 304
    00000135: 	movl	$0x0, current_test(%rip)
    0000013f: 	cmpl	%ebx, 0x38(%rsp)
    00000143: 	jl	.Ltmp957 # Offset: 323
.Ltmp958:
    00000149: 	movl	0x38(%rsp), %eax
    0000014d: 	movq	(%rbp), %r9
    00000151: 	movq	%r13, 0x50(%rsp)
    00000156: 	movq	0x8(%rbp), %r8
    0000015a: 	cltd
    0000015b: 	idivl	%ebx
    0000015d: 	movl	$0x4, %edx
    00000162: 	cltq
    00000164: 	imulq	0x10(%rsp), %rax
    0000016a: 	cmpq	%rdx, %rax
    0000016d: 	cmovlq	%rdx, %rax
    00000171: 	movl	$0x70000000, %edx
    00000176: 	cmpq	%rdx, %rax
    00000179: 	cmovgq	%rdx, %rax
    0000017d: 	addq	$0x1, %rax
    00000181: 	andq	$-0x2, %rax
    00000185: 	movl	%eax, iterations(%rip)
    0000018b: 	movslq	%ebx, %rax
    0000018e: 	leaq	(%r14,%rax,4), %r10
    00000192: 	movq	%r9, %rax
    00000195: 	addq	%r8, %rax
    00000198: 	je	.Ltmp960 # Offset: 408
    0000019a: 	testq	%r9, %r9
    0000019d: 	je	.Ltmp961 # Offset: 413
.Ltmp960:
    000001a3: 	movq	%r8, 0x48(%rsp)
    000001a8: 	cmpq	$0xf, %r8
    000001ac: 	ja	.Ltmp962 # Offset: 428
    000001ae: 	cmpq	$0x1, %r8
    000001b2: 	je	.Ltmp963 # Offset: 434
    000001b8: 	testq	%r8, %r8
    000001bb: 	jne	.Ltmp964 # Offset: 443
    000001c1: 	movq	%r13, %rax
    000001c4: 	jmp	.Ltmp965 # Offset: 452
    000001c9: 	nopl	(%rax) # Size: 7
.Ltmp962:
    000001d0: 	movq	0x30(%rsp), %rsi
    000001d5: 	movq	%r15, %rdi
    000001d8: 	xorl	%edx, %edx
    000001da: 	movq	%r8, 0x28(%rsp)
    000001df: 	movq	%r9, 0x20(%rsp)
    000001e4: 	movq	%r10, 0x18(%rsp)
    000001e9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 489
    000001ee: 	movq	0x18(%rsp), %r10
    000001f3: 	movq	0x20(%rsp), %r9
    000001f8: 	movq	%rax, 0x50(%rsp)
    000001fd: 	movq	%rax, %rdi
    00000200: 	movq	0x48(%rsp), %rax
    00000205: 	movq	0x28(%rsp), %r8
    0000020a: 	movq	%rax, 0x60(%rsp)
.Ltmp967:
    0000020f: 	movq	%r8, %rdx
    00000212: 	movq	%r9, %rsi
    00000215: 	movq	%r10, 0x18(%rsp)
    0000021a: 	callq	memcpy@PLT # Offset: 538
    0000021f: 	movq	0x48(%rsp), %r8
    00000224: 	movq	0x50(%rsp), %rax
    00000229: 	movq	0x18(%rsp), %r10
    0000022e: 	jmp	.Ltmp965 # Offset: 558
    00000233: 	nopl	(%rax,%rax) # Size: 5
.Ltmp957:
    00000238: 	movl	0x3c(%rsp), %eax
    0000023c: 	movl	%eax, iterations(%rip)
    00000242: 	movq	0x78(%rsp), %rax
    00000247: 	subq	%fs:0x28, %rax
    00000250: 	jne	.Ltmp966 # Offset: 592
    00000252: 	addq	$0x88, %rsp
    00000259: 	popq	%rbx
    0000025a: 	popq	%rbp
    0000025b: 	popq	%r12
    0000025d: 	popq	%r13
    0000025f: 	popq	%r14
    00000261: 	popq	%r15
    00000263: 	retq # Offset: 611
.Ltmp961:
    00000264: 	leaq	DATAat0x27008(%rip), %rdi
    0000026b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 619
.Ltmp966:
    00000270: 	callq	__stack_chk_fail@PLT # Offset: 624
.Ltmp964:
    00000275: 	movq	%r13, %rdi
    00000278: 	jmp	.Ltmp967 # Offset: 632
    0000027a: 	endbr64
    0000027e: 	movq	%rax, %rbp
    00000281: 	movq	0x50(%rsp), %rdi
    00000286: 	cmpq	%r13, %rdi
    00000289: 	je	.Ltmp968 # Offset: 649
    0000028b: 	movq	0x60(%rsp), %rax
    00000290: 	leaq	0x1(%rax), %rsi
    00000294: 	callq	_ZdlPvm@PLT # Offset: 660
.Ltmp968:
    00000299: 	movq	%rbp, %rdi
    0000029c: 	callq	_Unwind_Resume@PLT # Offset: 668
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_reverse_sizesIPfPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12test_reverseIPdPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 174
  State       : disassembled
  Address     : 0xe250
  Size        : 0x22f
  MaxSize     : 0x230
  Offset      : 0xe250
  Section     : .text
  Orc Section : .local.text._Z12test_reverseIPdPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0173:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rcx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdx, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	xorl	%ebp, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rdi, %rbx
    0000001c: 	subq	$0x18, %rsp
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x8(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	callq	clock@PLT # Offset: 48
    00000035: 	movq	%rax, start_time(%rip)
    0000003c: 	movl	iterations(%rip), %eax
    00000042: 	testl	%eax, %eax
    00000044: 	jle	.Ltmp969 # Offset: 68
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp970:
    00000050: 	movq	%r12, %rsi
    00000053: 	movq	%rbx, %rdi
    00000056: 	addl	$0x1, %ebp
    00000059: 	callq	*%r13 # Offset: 89
    0000005c: 	cmpl	%ebp, iterations(%rip)
    00000062: 	jg	.Ltmp970 # Offset: 98
.Ltmp969:
    00000064: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000006b: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    00000072: 	subq	$0x20, %rax
    00000076: 	cmpq	%rax, %rbp
    00000079: 	je	.Ltmp971 # Offset: 121
    0000007f: 	leaq	0x10(%rbp), %rdi
    00000083: 	movq	0x8(%r14), %r13
    00000087: 	movq	%rdi, (%rbp)
    0000008b: 	movq	(%r14), %r15
    0000008e: 	movq	%r15, %rax
    00000091: 	addq	%r13, %rax
    00000094: 	je	.Ltmp972 # Offset: 148
    00000096: 	testq	%r15, %r15
    00000099: 	je	.Ltmp973 # Offset: 153
.Ltmp972:
    0000009f: 	movq	%r13, (%rsp)
    000000a3: 	cmpq	$0xf, %r13
    000000a7: 	ja	.Ltmp974 # Offset: 167
    000000ad: 	cmpq	$0x1, %r13
    000000b1: 	jne	.Ltmp975 # Offset: 177
    000000b7: 	movzbl	(%r15), %eax
    000000bb: 	movb	%al, 0x10(%rbp)
.Ltmp981:
    000000be: 	movq	%r13, 0x8(%rbp)
    000000c2: 	movb	$0x0, (%rdi,%r13)
    000000c7: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000ce: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000d5: 	addq	$0x20, %rax
    000000d9: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000e0: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000e7: 	je	.Ltmp976 # Offset: 231
.Ltmp982:
    000000ed: 	movq	-0x20(%rax), %rbp
    000000f1: 	callq	clock@PLT # Offset: 241
    000000f6: 	pxor	%xmm0, %xmm0
    000000fa: 	movq	%rax, end_time(%rip)
    00000101: 	movq	%rbp, %rdi
    00000104: 	subq	start_time(%rip), %rax
    0000010b: 	cvtsi2sd	%rax, %xmm0
    00000110: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000118: 	callq	_Z13record_resultdPKc # Offset: 280
    0000011d: 	leaq	0x8(%rbx), %rax
    00000121: 	jmp	.Ltmp977 # Offset: 289
    00000123: 	nopl	(%rax,%rax) # Size: 5
.Ltmp979:
    00000128: 	addq	$0x8, %rax
    0000012c: 	movsd	-0x10(%rax), %xmm0
    00000131: 	comisd	-0x8(%rax), %xmm0
    00000136: 	ja	.Ltmp978 # Offset: 310
.Ltmp977:
    00000138: 	cmpq	%rax, %r12
    0000013b: 	jne	.Ltmp979 # Offset: 315
    0000013d: 	movq	0x8(%rsp), %rax
    00000142: 	subq	%fs:0x28, %rax
    0000014b: 	jne	.Ltmp980 # Offset: 331
    00000151: 	addq	$0x18, %rsp
    00000155: 	popq	%rbx
    00000156: 	popq	%rbp
    00000157: 	popq	%r12
    00000159: 	popq	%r13
    0000015b: 	popq	%r14
    0000015d: 	popq	%r15
    0000015f: 	retq # Offset: 351
.Ltmp974:
    00000160: 	movq	%rbp, %rdi
    00000163: 	movq	%rsp, %rsi
    00000166: 	xorl	%edx, %edx
    00000168: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 360
    0000016d: 	movq	%rax, (%rbp)
    00000171: 	movq	%rax, %rdi
    00000174: 	movq	(%rsp), %rax
    00000178: 	movq	%rax, 0x10(%rbp)
.Ltmp983:
    0000017c: 	movq	%r13, %rdx
    0000017f: 	movq	%r15, %rsi
    00000182: 	callq	memcpy@PLT # Offset: 386
    00000187: 	movq	(%rsp), %r13
    0000018b: 	movq	(%rbp), %rdi
    0000018f: 	jmp	.Ltmp981 # Offset: 399
    00000194: 	nopl	(%rax) # Size: 4
.Ltmp978:
    00000198: 	movq	0x8(%rsp), %rax
    0000019d: 	subq	%fs:0x28, %rax
    000001a6: 	jne	.Ltmp980 # Offset: 422
    000001a8: 	movq	(%r14), %rdx
    000001ab: 	addq	$0x18, %rsp
    000001af: 	leaq	DATAat0x271d0(%rip), %rsi
    000001b6: 	xorl	%eax, %eax
    000001b8: 	popq	%rbx
    000001b9: 	movl	$0x1, %edi
    000001be: 	popq	%rbp
    000001bf: 	popq	%r12
    000001c1: 	popq	%r13
    000001c3: 	popq	%r14
    000001c5: 	popq	%r15
    000001c7: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 455
    000001cc: 	nopl	(%rax) # Size: 4
.Ltmp971:
    000001d0: 	movq	%r14, %rsi
    000001d3: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000001da: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 474
    000001df: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000001e6: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001ed: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000001f4: 	jne	.Ltmp982 # Offset: 500
.Ltmp976:
    000001fa: 	movq	-0x8(%rdx), %rax
    000001fe: 	addq	$0x200, %rax
    00000204: 	jmp	.Ltmp982 # Offset: 516
    00000209: 	nopl	(%rax) # Size: 7
.Ltmp975:
    00000210: 	testq	%r13, %r13
    00000213: 	je	.Ltmp981 # Offset: 531
    00000219: 	jmp	.Ltmp983 # Offset: 537
.Ltmp980:
    0000021e: 	callq	__stack_chk_fail@PLT # Offset: 542
.Ltmp973:
    00000223: 	leaq	DATAat0x27008(%rip), %rdi
    0000022a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 554
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_reverseIPdPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_reverse_sizesIPdPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 175
  State       : disassembled
  Address     : 0xe480
  Size        : 0x2a1
  MaxSize     : 0x2b0
  Offset      : 0xe480
  Section     : .text
  Orc Section : .local.text._Z18test_reverse_sizesIPdPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0174:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	movl	$0x1, %edi
    00000010: 	pushq	%r13
    00000012: 	pushq	%r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%rcx, %rbp
    00000018: 	pushq	%rbx
    00000019: 	movl	%esi, %ebx
    0000001b: 	subq	$0x88, %rsp
    00000022: 	movl	%esi, 0x38(%rsp)
    00000026: 	leaq	DATAat0x271e0(%rip), %rsi
    0000002d: 	movq	%rdx, 0x8(%rsp)
    00000032: 	movq	%fs:0x28, %rax
    0000003b: 	movq	%rax, 0x78(%rsp)
    00000040: 	movl	iterations(%rip), %eax
    00000046: 	movl	%eax, 0x3c(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	callq	__printf_chk@PLT # Offset: 76
    00000051: 	xorl	%eax, %eax
    00000053: 	movl	$0x1, %edi
    00000058: 	leaq	DATAat0x27210(%rip), %rsi
    0000005f: 	callq	__printf_chk@PLT # Offset: 95
    00000064: 	cmpl	$0x3, %ebx
    00000067: 	jle	.Ltmp984 # Offset: 103
    0000006d: 	movslq	0x3c(%rsp), %rax
    00000072: 	xorl	%r12d, %r12d
    00000075: 	movl	$0x4, %ebx
    0000007a: 	leaq	0x60(%rsp), %r13
    0000007f: 	leaq	0x50(%rsp), %r15
    00000084: 	movq	%rax, 0x10(%rsp)
    00000089: 	leaq	0x48(%rsp), %rax
    0000008e: 	movq	%rax, 0x30(%rsp)
    00000093: 	jmp	.Ltmp985 # Offset: 147
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp990:
    000000a0: 	movzbl	(%r9), %eax
    000000a4: 	movb	%al, 0x60(%rsp)
    000000a8: 	movq	%r13, %rax
.Ltmp992:
    000000ab: 	movq	%r8, 0x58(%rsp)
    000000b0: 	movq	0x8(%rsp), %rdx
    000000b5: 	movq	%r15, %rcx
    000000b8: 	movq	%r10, %rsi
    000000bb: 	movb	$0x0, (%rax,%r8)
    000000c0: 	movq	%r14, %rdi
    000000c3: 	callq	_Z12test_reverseIPdPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 195
    000000c8: 	movq	0x50(%rsp), %rdi
    000000cd: 	cmpq	%r13, %rdi
    000000d0: 	je	.Ltmp986 # Offset: 208
    000000d2: 	movq	0x60(%rsp), %rax
    000000d7: 	leaq	0x1(%rax), %rsi
    000000db: 	callq	_ZdlPvm@PLT # Offset: 219
.Ltmp986:
    000000e0: 	pxor	%xmm1, %xmm1
    000000e4: 	pxor	%xmm2, %xmm2
    000000e8: 	movq	(%rbp), %rcx
    000000ec: 	movl	%ebx, %r8d
    000000ef: 	cvtsi2sd	%ebx, %xmm2
    000000f3: 	movq	results(%rip), %rax
    000000fa: 	movl	%r12d, %edx
    000000fd: 	addl	%ebx, %ebx
    000000ff: 	leaq	DATAat0x27240(%rip), %rsi
    00000106: 	movl	$0x1, %edi
    0000010b: 	addl	$0x1, %r12d
    0000010f: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000117: 	movsd	(%rax), %xmm0
    0000011b: 	movl	$0x2, %eax
    00000120: 	mulsd	%xmm2, %xmm1
    00000124: 	divsd	DATAat0x276b0(%rip), %xmm1
    0000012c: 	divsd	%xmm0, %xmm1
    00000130: 	callq	__printf_chk@PLT # Offset: 304
    00000135: 	movl	$0x0, current_test(%rip)
    0000013f: 	cmpl	%ebx, 0x38(%rsp)
    00000143: 	jl	.Ltmp984 # Offset: 323
.Ltmp985:
    00000149: 	movl	0x38(%rsp), %eax
    0000014d: 	movq	(%rbp), %r9
    00000151: 	movq	%r13, 0x50(%rsp)
    00000156: 	movq	0x8(%rbp), %r8
    0000015a: 	cltd
    0000015b: 	idivl	%ebx
    0000015d: 	movl	$0x4, %edx
    00000162: 	cltq
    00000164: 	imulq	0x10(%rsp), %rax
    0000016a: 	cmpq	%rdx, %rax
    0000016d: 	cmovlq	%rdx, %rax
    00000171: 	movl	$0x70000000, %edx
    00000176: 	cmpq	%rdx, %rax
    00000179: 	cmovgq	%rdx, %rax
    0000017d: 	addq	$0x1, %rax
    00000181: 	andq	$-0x2, %rax
    00000185: 	movl	%eax, iterations(%rip)
    0000018b: 	movslq	%ebx, %rax
    0000018e: 	leaq	(%r14,%rax,8), %r10
    00000192: 	movq	%r9, %rax
    00000195: 	addq	%r8, %rax
    00000198: 	je	.Ltmp987 # Offset: 408
    0000019a: 	testq	%r9, %r9
    0000019d: 	je	.Ltmp988 # Offset: 413
.Ltmp987:
    000001a3: 	movq	%r8, 0x48(%rsp)
    000001a8: 	cmpq	$0xf, %r8
    000001ac: 	ja	.Ltmp989 # Offset: 428
    000001ae: 	cmpq	$0x1, %r8
    000001b2: 	je	.Ltmp990 # Offset: 434
    000001b8: 	testq	%r8, %r8
    000001bb: 	jne	.Ltmp991 # Offset: 443
    000001c1: 	movq	%r13, %rax
    000001c4: 	jmp	.Ltmp992 # Offset: 452
    000001c9: 	nopl	(%rax) # Size: 7
.Ltmp989:
    000001d0: 	movq	0x30(%rsp), %rsi
    000001d5: 	movq	%r15, %rdi
    000001d8: 	xorl	%edx, %edx
    000001da: 	movq	%r8, 0x28(%rsp)
    000001df: 	movq	%r9, 0x20(%rsp)
    000001e4: 	movq	%r10, 0x18(%rsp)
    000001e9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 489
    000001ee: 	movq	0x18(%rsp), %r10
    000001f3: 	movq	0x20(%rsp), %r9
    000001f8: 	movq	%rax, 0x50(%rsp)
    000001fd: 	movq	%rax, %rdi
    00000200: 	movq	0x48(%rsp), %rax
    00000205: 	movq	0x28(%rsp), %r8
    0000020a: 	movq	%rax, 0x60(%rsp)
.Ltmp994:
    0000020f: 	movq	%r8, %rdx
    00000212: 	movq	%r9, %rsi
    00000215: 	movq	%r10, 0x18(%rsp)
    0000021a: 	callq	memcpy@PLT # Offset: 538
    0000021f: 	movq	0x48(%rsp), %r8
    00000224: 	movq	0x50(%rsp), %rax
    00000229: 	movq	0x18(%rsp), %r10
    0000022e: 	jmp	.Ltmp992 # Offset: 558
    00000233: 	nopl	(%rax,%rax) # Size: 5
.Ltmp984:
    00000238: 	movl	0x3c(%rsp), %eax
    0000023c: 	movl	%eax, iterations(%rip)
    00000242: 	movq	0x78(%rsp), %rax
    00000247: 	subq	%fs:0x28, %rax
    00000250: 	jne	.Ltmp993 # Offset: 592
    00000252: 	addq	$0x88, %rsp
    00000259: 	popq	%rbx
    0000025a: 	popq	%rbp
    0000025b: 	popq	%r12
    0000025d: 	popq	%r13
    0000025f: 	popq	%r14
    00000261: 	popq	%r15
    00000263: 	retq # Offset: 611
.Ltmp988:
    00000264: 	leaq	DATAat0x27008(%rip), %rdi
    0000026b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 619
.Ltmp993:
    00000270: 	callq	__stack_chk_fail@PLT # Offset: 624
.Ltmp991:
    00000275: 	movq	%r13, %rdi
    00000278: 	jmp	.Ltmp994 # Offset: 632
    0000027a: 	endbr64
    0000027e: 	movq	%rax, %rbp
    00000281: 	movq	0x50(%rsp), %rdi
    00000286: 	cmpq	%r13, %rdi
    00000289: 	je	.Ltmp995 # Offset: 649
    0000028b: 	movq	0x60(%rsp), %rax
    00000290: 	leaq	0x1(%rax), %rsi
    00000294: 	callq	_ZdlPvm@PLT # Offset: 660
.Ltmp995:
    00000299: 	movq	%rbp, %rdi
    0000029c: 	callq	_Unwind_Resume@PLT # Offset: 668
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_reverse_sizesIPdPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12test_reverseI20BidirectionalPointerIiEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 176
  State       : disassembled
  Address     : 0xe730
  Size        : 0x22f
  MaxSize     : 0x230
  Offset      : 0xe730
  Section     : .text
  Orc Section : .local.text._Z12test_reverseI20BidirectionalPointerIiEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0175:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rcx, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	xorl	%ebp, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rdi, %rbx
    0000001c: 	subq	$0x18, %rsp
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x8(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	callq	clock@PLT # Offset: 48
    00000035: 	movq	%rax, start_time(%rip)
    0000003c: 	movl	iterations(%rip), %eax
    00000042: 	testl	%eax, %eax
    00000044: 	jle	.Ltmp996 # Offset: 68
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp997:
    00000050: 	movq	%r12, %rsi
    00000053: 	movq	%rbx, %rdi
    00000056: 	addl	$0x1, %ebp
    00000059: 	callq	*%r14 # Offset: 89
    0000005c: 	cmpl	%ebp, iterations(%rip)
    00000062: 	jg	.Ltmp997 # Offset: 98
.Ltmp996:
    00000064: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000006b: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    00000072: 	subq	$0x20, %rax
    00000076: 	cmpq	%rax, %rbp
    00000079: 	je	.Ltmp998 # Offset: 121
    0000007f: 	leaq	0x10(%rbp), %rdi
    00000083: 	movq	0x8(%r13), %r14
    00000087: 	movq	%rdi, (%rbp)
    0000008b: 	movq	(%r13), %r15
    0000008f: 	movq	%r15, %rax
    00000092: 	addq	%r14, %rax
    00000095: 	je	.Ltmp999 # Offset: 149
    00000097: 	testq	%r15, %r15
    0000009a: 	je	.Ltmp1000 # Offset: 154
.Ltmp999:
    000000a0: 	movq	%r14, (%rsp)
    000000a4: 	cmpq	$0xf, %r14
    000000a8: 	ja	.Ltmp1001 # Offset: 168
    000000ae: 	cmpq	$0x1, %r14
    000000b2: 	jne	.Ltmp1002 # Offset: 178
    000000b8: 	movzbl	(%r15), %eax
    000000bc: 	movb	%al, 0x10(%rbp)
.Ltmp1008:
    000000bf: 	movq	%r14, 0x8(%rbp)
    000000c3: 	movb	$0x0, (%rdi,%r14)
    000000c8: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000cf: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000d6: 	addq	$0x20, %rax
    000000da: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000e1: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000e8: 	je	.Ltmp1003 # Offset: 232
.Ltmp1009:
    000000ee: 	movq	-0x20(%rax), %rbp
    000000f2: 	callq	clock@PLT # Offset: 242
    000000f7: 	pxor	%xmm0, %xmm0
    000000fb: 	movq	%rax, end_time(%rip)
    00000102: 	movq	%rbp, %rdi
    00000105: 	subq	start_time(%rip), %rax
    0000010c: 	cvtsi2sd	%rax, %xmm0
    00000111: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000119: 	callq	_Z13record_resultdPKc # Offset: 281
    0000011e: 	leaq	0x4(%rbx), %rax
    00000122: 	jmp	.Ltmp1004 # Offset: 290
    00000124: 	nopl	(%rax) # Size: 4
.Ltmp1006:
    00000128: 	addq	$0x4, %rax
    0000012c: 	movl	-0x8(%rax), %ecx
    0000012f: 	cmpl	%ecx, (%rdx)
    00000131: 	jl	.Ltmp1005 # Offset: 305
.Ltmp1004:
    00000133: 	movq	%rax, %rdx
    00000136: 	cmpq	%rax, %r12
    00000139: 	jne	.Ltmp1006 # Offset: 313
    0000013b: 	movq	0x8(%rsp), %rax
    00000140: 	subq	%fs:0x28, %rax
    00000149: 	jne	.Ltmp1007 # Offset: 329
    0000014f: 	addq	$0x18, %rsp
    00000153: 	popq	%rbx
    00000154: 	popq	%rbp
    00000155: 	popq	%r12
    00000157: 	popq	%r13
    00000159: 	popq	%r14
    0000015b: 	popq	%r15
    0000015d: 	retq # Offset: 349
    0000015e: 	nop # Size: 2
.Ltmp1001:
    00000160: 	movq	%rbp, %rdi
    00000163: 	movq	%rsp, %rsi
    00000166: 	xorl	%edx, %edx
    00000168: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 360
    0000016d: 	movq	%rax, (%rbp)
    00000171: 	movq	%rax, %rdi
    00000174: 	movq	(%rsp), %rax
    00000178: 	movq	%rax, 0x10(%rbp)
.Ltmp1010:
    0000017c: 	movq	%r14, %rdx
    0000017f: 	movq	%r15, %rsi
    00000182: 	callq	memcpy@PLT # Offset: 386
    00000187: 	movq	(%rsp), %r14
    0000018b: 	movq	(%rbp), %rdi
    0000018f: 	jmp	.Ltmp1008 # Offset: 399
    00000194: 	nopl	(%rax) # Size: 4
.Ltmp1005:
    00000198: 	movq	0x8(%rsp), %rax
    0000019d: 	subq	%fs:0x28, %rax
    000001a6: 	jne	.Ltmp1007 # Offset: 422
    000001a8: 	movq	(%r13), %rdx
    000001ac: 	addq	$0x18, %rsp
    000001b0: 	leaq	DATAat0x271d0(%rip), %rsi
    000001b7: 	xorl	%eax, %eax
    000001b9: 	popq	%rbx
    000001ba: 	movl	$0x1, %edi
    000001bf: 	popq	%rbp
    000001c0: 	popq	%r12
    000001c2: 	popq	%r13
    000001c4: 	popq	%r14
    000001c6: 	popq	%r15
    000001c8: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 456
    000001cd: 	nopl	(%rax) # Size: 3
.Ltmp998:
    000001d0: 	movq	%r13, %rsi
    000001d3: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000001da: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 474
    000001df: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000001e6: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001ed: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000001f4: 	jne	.Ltmp1009 # Offset: 500
.Ltmp1003:
    000001fa: 	movq	-0x8(%rdx), %rax
    000001fe: 	addq	$0x200, %rax
    00000204: 	jmp	.Ltmp1009 # Offset: 516
    00000209: 	nopl	(%rax) # Size: 7
.Ltmp1002:
    00000210: 	testq	%r14, %r14
    00000213: 	je	.Ltmp1008 # Offset: 531
    00000219: 	jmp	.Ltmp1010 # Offset: 537
.Ltmp1007:
    0000021e: 	callq	__stack_chk_fail@PLT # Offset: 542
.Ltmp1000:
    00000223: 	leaq	DATAat0x27008(%rip), %rdi
    0000022a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 554
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_reverseI20BidirectionalPointerIiEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_reverse_sizesI20BidirectionalPointerIiEPFvS1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 177
  State       : disassembled
  Address     : 0xe960
  Size        : 0x2a1
  MaxSize     : 0x2b0
  Offset      : 0xe960
  Section     : .text
  Orc Section : .local.text._Z18test_reverse_sizesI20BidirectionalPointerIiEPFvS1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0176:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	movl	$0x1, %edi
    00000010: 	pushq	%r13
    00000012: 	pushq	%r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%rcx, %rbp
    00000018: 	pushq	%rbx
    00000019: 	movl	%esi, %ebx
    0000001b: 	subq	$0x88, %rsp
    00000022: 	movl	%esi, 0x38(%rsp)
    00000026: 	leaq	DATAat0x271e0(%rip), %rsi
    0000002d: 	movq	%rdx, 0x8(%rsp)
    00000032: 	movq	%fs:0x28, %rax
    0000003b: 	movq	%rax, 0x78(%rsp)
    00000040: 	movl	iterations(%rip), %eax
    00000046: 	movl	%eax, 0x3c(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	callq	__printf_chk@PLT # Offset: 76
    00000051: 	xorl	%eax, %eax
    00000053: 	movl	$0x1, %edi
    00000058: 	leaq	DATAat0x27210(%rip), %rsi
    0000005f: 	callq	__printf_chk@PLT # Offset: 95
    00000064: 	cmpl	$0x3, %ebx
    00000067: 	jle	.Ltmp1011 # Offset: 103
    0000006d: 	movslq	0x3c(%rsp), %rax
    00000072: 	xorl	%r12d, %r12d
    00000075: 	movl	$0x4, %ebx
    0000007a: 	leaq	0x60(%rsp), %r13
    0000007f: 	leaq	0x50(%rsp), %r15
    00000084: 	movq	%rax, 0x10(%rsp)
    00000089: 	leaq	0x48(%rsp), %rax
    0000008e: 	movq	%rax, 0x30(%rsp)
    00000093: 	jmp	.Ltmp1012 # Offset: 147
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1017:
    000000a0: 	movzbl	(%r9), %eax
    000000a4: 	movb	%al, 0x60(%rsp)
    000000a8: 	movq	%r13, %rax
.Ltmp1019:
    000000ab: 	movq	%r8, 0x58(%rsp)
    000000b0: 	movq	0x8(%rsp), %rdx
    000000b5: 	movq	%r15, %rcx
    000000b8: 	movq	%r10, %rsi
    000000bb: 	movb	$0x0, (%rax,%r8)
    000000c0: 	movq	%r14, %rdi
    000000c3: 	callq	_Z12test_reverseI20BidirectionalPointerIiEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 195
    000000c8: 	movq	0x50(%rsp), %rdi
    000000cd: 	cmpq	%r13, %rdi
    000000d0: 	je	.Ltmp1013 # Offset: 208
    000000d2: 	movq	0x60(%rsp), %rax
    000000d7: 	leaq	0x1(%rax), %rsi
    000000db: 	callq	_ZdlPvm@PLT # Offset: 219
.Ltmp1013:
    000000e0: 	pxor	%xmm1, %xmm1
    000000e4: 	pxor	%xmm2, %xmm2
    000000e8: 	movq	(%rbp), %rcx
    000000ec: 	movl	%ebx, %r8d
    000000ef: 	cvtsi2sd	%ebx, %xmm2
    000000f3: 	movq	results(%rip), %rax
    000000fa: 	movl	%r12d, %edx
    000000fd: 	addl	%ebx, %ebx
    000000ff: 	leaq	DATAat0x27240(%rip), %rsi
    00000106: 	movl	$0x1, %edi
    0000010b: 	addl	$0x1, %r12d
    0000010f: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000117: 	movsd	(%rax), %xmm0
    0000011b: 	movl	$0x2, %eax
    00000120: 	mulsd	%xmm2, %xmm1
    00000124: 	divsd	DATAat0x276b0(%rip), %xmm1
    0000012c: 	divsd	%xmm0, %xmm1
    00000130: 	callq	__printf_chk@PLT # Offset: 304
    00000135: 	movl	$0x0, current_test(%rip)
    0000013f: 	cmpl	%ebx, 0x38(%rsp)
    00000143: 	jl	.Ltmp1011 # Offset: 323
.Ltmp1012:
    00000149: 	movl	0x38(%rsp), %eax
    0000014d: 	movq	(%rbp), %r9
    00000151: 	movq	%r13, 0x50(%rsp)
    00000156: 	movq	0x8(%rbp), %r8
    0000015a: 	cltd
    0000015b: 	idivl	%ebx
    0000015d: 	movl	$0x4, %edx
    00000162: 	cltq
    00000164: 	imulq	0x10(%rsp), %rax
    0000016a: 	cmpq	%rdx, %rax
    0000016d: 	cmovlq	%rdx, %rax
    00000171: 	movl	$0x70000000, %edx
    00000176: 	cmpq	%rdx, %rax
    00000179: 	cmovgq	%rdx, %rax
    0000017d: 	addq	$0x1, %rax
    00000181: 	andq	$-0x2, %rax
    00000185: 	movl	%eax, iterations(%rip)
    0000018b: 	movslq	%ebx, %rax
    0000018e: 	leaq	(%r14,%rax,4), %r10
    00000192: 	movq	%r9, %rax
    00000195: 	addq	%r8, %rax
    00000198: 	je	.Ltmp1014 # Offset: 408
    0000019a: 	testq	%r9, %r9
    0000019d: 	je	.Ltmp1015 # Offset: 413
.Ltmp1014:
    000001a3: 	movq	%r8, 0x48(%rsp)
    000001a8: 	cmpq	$0xf, %r8
    000001ac: 	ja	.Ltmp1016 # Offset: 428
    000001ae: 	cmpq	$0x1, %r8
    000001b2: 	je	.Ltmp1017 # Offset: 434
    000001b8: 	testq	%r8, %r8
    000001bb: 	jne	.Ltmp1018 # Offset: 443
    000001c1: 	movq	%r13, %rax
    000001c4: 	jmp	.Ltmp1019 # Offset: 452
    000001c9: 	nopl	(%rax) # Size: 7
.Ltmp1016:
    000001d0: 	movq	0x30(%rsp), %rsi
    000001d5: 	movq	%r15, %rdi
    000001d8: 	xorl	%edx, %edx
    000001da: 	movq	%r10, 0x28(%rsp)
    000001df: 	movq	%r8, 0x20(%rsp)
    000001e4: 	movq	%r9, 0x18(%rsp)
    000001e9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 489
    000001ee: 	movq	0x18(%rsp), %r9
    000001f3: 	movq	0x20(%rsp), %r8
    000001f8: 	movq	%rax, 0x50(%rsp)
    000001fd: 	movq	%rax, %rdi
    00000200: 	movq	0x48(%rsp), %rax
    00000205: 	movq	0x28(%rsp), %r10
    0000020a: 	movq	%rax, 0x60(%rsp)
.Ltmp1021:
    0000020f: 	movq	%r8, %rdx
    00000212: 	movq	%r9, %rsi
    00000215: 	movq	%r10, 0x18(%rsp)
    0000021a: 	callq	memcpy@PLT # Offset: 538
    0000021f: 	movq	0x48(%rsp), %r8
    00000224: 	movq	0x50(%rsp), %rax
    00000229: 	movq	0x18(%rsp), %r10
    0000022e: 	jmp	.Ltmp1019 # Offset: 558
    00000233: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1011:
    00000238: 	movl	0x3c(%rsp), %eax
    0000023c: 	movl	%eax, iterations(%rip)
    00000242: 	movq	0x78(%rsp), %rax
    00000247: 	subq	%fs:0x28, %rax
    00000250: 	jne	.Ltmp1020 # Offset: 592
    00000252: 	addq	$0x88, %rsp
    00000259: 	popq	%rbx
    0000025a: 	popq	%rbp
    0000025b: 	popq	%r12
    0000025d: 	popq	%r13
    0000025f: 	popq	%r14
    00000261: 	popq	%r15
    00000263: 	retq # Offset: 611
.Ltmp1015:
    00000264: 	leaq	DATAat0x27008(%rip), %rdi
    0000026b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 619
.Ltmp1020:
    00000270: 	callq	__stack_chk_fail@PLT # Offset: 624
.Ltmp1018:
    00000275: 	movq	%r13, %rdi
    00000278: 	jmp	.Ltmp1021 # Offset: 632
    0000027a: 	endbr64
    0000027e: 	movq	%rax, %rbp
    00000281: 	movq	0x50(%rsp), %rdi
    00000286: 	cmpq	%r13, %rdi
    00000289: 	je	.Ltmp1022 # Offset: 649
    0000028b: 	movq	0x60(%rsp), %rax
    00000290: 	leaq	0x1(%rax), %rsi
    00000294: 	callq	_ZdlPvm@PLT # Offset: 660
.Ltmp1022:
    00000299: 	movq	%rbp, %rdi
    0000029c: 	callq	_Unwind_Resume@PLT # Offset: 668
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_reverse_sizesI20BidirectionalPointerIiEPFvS1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12test_reverseIPiPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 178
  State       : disassembled
  Address     : 0xec10
  Size        : 0x22f
  MaxSize     : 0x230
  Offset      : 0xec10
  Section     : .text
  Orc Section : .local.text._Z12test_reverseIPiPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0177:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rcx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdx, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	xorl	%ebp, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rdi, %rbx
    0000001c: 	subq	$0x18, %rsp
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x8(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	callq	clock@PLT # Offset: 48
    00000035: 	movq	%rax, start_time(%rip)
    0000003c: 	movl	iterations(%rip), %eax
    00000042: 	testl	%eax, %eax
    00000044: 	jle	.Ltmp1023 # Offset: 68
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1024:
    00000050: 	movq	%r12, %rsi
    00000053: 	movq	%rbx, %rdi
    00000056: 	addl	$0x1, %ebp
    00000059: 	callq	*%r13 # Offset: 89
    0000005c: 	cmpl	%ebp, iterations(%rip)
    00000062: 	jg	.Ltmp1024 # Offset: 98
.Ltmp1023:
    00000064: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000006b: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    00000072: 	subq	$0x20, %rax
    00000076: 	cmpq	%rax, %rbp
    00000079: 	je	.Ltmp1025 # Offset: 121
    0000007f: 	leaq	0x10(%rbp), %rdi
    00000083: 	movq	0x8(%r14), %r13
    00000087: 	movq	%rdi, (%rbp)
    0000008b: 	movq	(%r14), %r15
    0000008e: 	movq	%r15, %rax
    00000091: 	addq	%r13, %rax
    00000094: 	je	.Ltmp1026 # Offset: 148
    00000096: 	testq	%r15, %r15
    00000099: 	je	.Ltmp1027 # Offset: 153
.Ltmp1026:
    0000009f: 	movq	%r13, (%rsp)
    000000a3: 	cmpq	$0xf, %r13
    000000a7: 	ja	.Ltmp1028 # Offset: 167
    000000ad: 	cmpq	$0x1, %r13
    000000b1: 	jne	.Ltmp1029 # Offset: 177
    000000b7: 	movzbl	(%r15), %eax
    000000bb: 	movb	%al, 0x10(%rbp)
.Ltmp1035:
    000000be: 	movq	%r13, 0x8(%rbp)
    000000c2: 	movb	$0x0, (%rdi,%r13)
    000000c7: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000ce: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000d5: 	addq	$0x20, %rax
    000000d9: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000e0: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000e7: 	je	.Ltmp1030 # Offset: 231
.Ltmp1036:
    000000ed: 	movq	-0x20(%rax), %rbp
    000000f1: 	callq	clock@PLT # Offset: 241
    000000f6: 	pxor	%xmm0, %xmm0
    000000fa: 	movq	%rax, end_time(%rip)
    00000101: 	movq	%rbp, %rdi
    00000104: 	subq	start_time(%rip), %rax
    0000010b: 	cvtsi2sd	%rax, %xmm0
    00000110: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000118: 	callq	_Z13record_resultdPKc # Offset: 280
    0000011d: 	leaq	0x4(%rbx), %rax
    00000121: 	jmp	.Ltmp1031 # Offset: 289
    00000123: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1033:
    00000128: 	addq	$0x4, %rax
    0000012c: 	movl	-0x8(%rax), %ecx
    0000012f: 	cmpl	%ecx, -0x4(%rax)
    00000132: 	jl	.Ltmp1032 # Offset: 306
.Ltmp1031:
    00000134: 	cmpq	%rax, %r12
    00000137: 	jne	.Ltmp1033 # Offset: 311
    00000139: 	movq	0x8(%rsp), %rax
    0000013e: 	subq	%fs:0x28, %rax
    00000147: 	jne	.Ltmp1034 # Offset: 327
    0000014d: 	addq	$0x18, %rsp
    00000151: 	popq	%rbx
    00000152: 	popq	%rbp
    00000153: 	popq	%r12
    00000155: 	popq	%r13
    00000157: 	popq	%r14
    00000159: 	popq	%r15
    0000015b: 	retq # Offset: 347
    0000015c: 	nopl	(%rax) # Size: 4
.Ltmp1028:
    00000160: 	movq	%rbp, %rdi
    00000163: 	movq	%rsp, %rsi
    00000166: 	xorl	%edx, %edx
    00000168: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 360
    0000016d: 	movq	%rax, (%rbp)
    00000171: 	movq	%rax, %rdi
    00000174: 	movq	(%rsp), %rax
    00000178: 	movq	%rax, 0x10(%rbp)
.Ltmp1037:
    0000017c: 	movq	%r13, %rdx
    0000017f: 	movq	%r15, %rsi
    00000182: 	callq	memcpy@PLT # Offset: 386
    00000187: 	movq	(%rsp), %r13
    0000018b: 	movq	(%rbp), %rdi
    0000018f: 	jmp	.Ltmp1035 # Offset: 399
    00000194: 	nopl	(%rax) # Size: 4
.Ltmp1032:
    00000198: 	movq	0x8(%rsp), %rax
    0000019d: 	subq	%fs:0x28, %rax
    000001a6: 	jne	.Ltmp1034 # Offset: 422
    000001a8: 	movq	(%r14), %rdx
    000001ab: 	addq	$0x18, %rsp
    000001af: 	leaq	DATAat0x271d0(%rip), %rsi
    000001b6: 	xorl	%eax, %eax
    000001b8: 	popq	%rbx
    000001b9: 	movl	$0x1, %edi
    000001be: 	popq	%rbp
    000001bf: 	popq	%r12
    000001c1: 	popq	%r13
    000001c3: 	popq	%r14
    000001c5: 	popq	%r15
    000001c7: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 455
    000001cc: 	nopl	(%rax) # Size: 4
.Ltmp1025:
    000001d0: 	movq	%r14, %rsi
    000001d3: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000001da: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 474
    000001df: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000001e6: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001ed: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000001f4: 	jne	.Ltmp1036 # Offset: 500
.Ltmp1030:
    000001fa: 	movq	-0x8(%rdx), %rax
    000001fe: 	addq	$0x200, %rax
    00000204: 	jmp	.Ltmp1036 # Offset: 516
    00000209: 	nopl	(%rax) # Size: 7
.Ltmp1029:
    00000210: 	testq	%r13, %r13
    00000213: 	je	.Ltmp1035 # Offset: 531
    00000219: 	jmp	.Ltmp1037 # Offset: 537
.Ltmp1034:
    0000021e: 	callq	__stack_chk_fail@PLT # Offset: 542
.Ltmp1027:
    00000223: 	leaq	DATAat0x27008(%rip), %rdi
    0000022a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 554
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_reverseIPiPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_reverse_sizesIPiPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 179
  State       : disassembled
  Address     : 0xee40
  Size        : 0x2a1
  MaxSize     : 0x2b0
  Offset      : 0xee40
  Section     : .text
  Orc Section : .local.text._Z18test_reverse_sizesIPiPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0178:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	movl	$0x1, %edi
    00000010: 	pushq	%r13
    00000012: 	pushq	%r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%rcx, %rbp
    00000018: 	pushq	%rbx
    00000019: 	movl	%esi, %ebx
    0000001b: 	subq	$0x88, %rsp
    00000022: 	movl	%esi, 0x38(%rsp)
    00000026: 	leaq	DATAat0x271e0(%rip), %rsi
    0000002d: 	movq	%rdx, 0x8(%rsp)
    00000032: 	movq	%fs:0x28, %rax
    0000003b: 	movq	%rax, 0x78(%rsp)
    00000040: 	movl	iterations(%rip), %eax
    00000046: 	movl	%eax, 0x3c(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	callq	__printf_chk@PLT # Offset: 76
    00000051: 	xorl	%eax, %eax
    00000053: 	movl	$0x1, %edi
    00000058: 	leaq	DATAat0x27210(%rip), %rsi
    0000005f: 	callq	__printf_chk@PLT # Offset: 95
    00000064: 	cmpl	$0x3, %ebx
    00000067: 	jle	.Ltmp1038 # Offset: 103
    0000006d: 	movslq	0x3c(%rsp), %rax
    00000072: 	xorl	%r12d, %r12d
    00000075: 	movl	$0x4, %ebx
    0000007a: 	leaq	0x60(%rsp), %r13
    0000007f: 	leaq	0x50(%rsp), %r15
    00000084: 	movq	%rax, 0x10(%rsp)
    00000089: 	leaq	0x48(%rsp), %rax
    0000008e: 	movq	%rax, 0x30(%rsp)
    00000093: 	jmp	.Ltmp1039 # Offset: 147
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1044:
    000000a0: 	movzbl	(%r9), %eax
    000000a4: 	movb	%al, 0x60(%rsp)
    000000a8: 	movq	%r13, %rax
.Ltmp1046:
    000000ab: 	movq	%r8, 0x58(%rsp)
    000000b0: 	movq	0x8(%rsp), %rdx
    000000b5: 	movq	%r15, %rcx
    000000b8: 	movq	%r10, %rsi
    000000bb: 	movb	$0x0, (%rax,%r8)
    000000c0: 	movq	%r14, %rdi
    000000c3: 	callq	_Z12test_reverseIPiPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 195
    000000c8: 	movq	0x50(%rsp), %rdi
    000000cd: 	cmpq	%r13, %rdi
    000000d0: 	je	.Ltmp1040 # Offset: 208
    000000d2: 	movq	0x60(%rsp), %rax
    000000d7: 	leaq	0x1(%rax), %rsi
    000000db: 	callq	_ZdlPvm@PLT # Offset: 219
.Ltmp1040:
    000000e0: 	pxor	%xmm1, %xmm1
    000000e4: 	pxor	%xmm2, %xmm2
    000000e8: 	movq	(%rbp), %rcx
    000000ec: 	movl	%ebx, %r8d
    000000ef: 	cvtsi2sd	%ebx, %xmm2
    000000f3: 	movq	results(%rip), %rax
    000000fa: 	movl	%r12d, %edx
    000000fd: 	addl	%ebx, %ebx
    000000ff: 	leaq	DATAat0x27240(%rip), %rsi
    00000106: 	movl	$0x1, %edi
    0000010b: 	addl	$0x1, %r12d
    0000010f: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000117: 	movsd	(%rax), %xmm0
    0000011b: 	movl	$0x2, %eax
    00000120: 	mulsd	%xmm2, %xmm1
    00000124: 	divsd	DATAat0x276b0(%rip), %xmm1
    0000012c: 	divsd	%xmm0, %xmm1
    00000130: 	callq	__printf_chk@PLT # Offset: 304
    00000135: 	movl	$0x0, current_test(%rip)
    0000013f: 	cmpl	%ebx, 0x38(%rsp)
    00000143: 	jl	.Ltmp1038 # Offset: 323
.Ltmp1039:
    00000149: 	movl	0x38(%rsp), %eax
    0000014d: 	movq	(%rbp), %r9
    00000151: 	movq	%r13, 0x50(%rsp)
    00000156: 	movq	0x8(%rbp), %r8
    0000015a: 	cltd
    0000015b: 	idivl	%ebx
    0000015d: 	movl	$0x4, %edx
    00000162: 	cltq
    00000164: 	imulq	0x10(%rsp), %rax
    0000016a: 	cmpq	%rdx, %rax
    0000016d: 	cmovlq	%rdx, %rax
    00000171: 	movl	$0x70000000, %edx
    00000176: 	cmpq	%rdx, %rax
    00000179: 	cmovgq	%rdx, %rax
    0000017d: 	addq	$0x1, %rax
    00000181: 	andq	$-0x2, %rax
    00000185: 	movl	%eax, iterations(%rip)
    0000018b: 	movslq	%ebx, %rax
    0000018e: 	leaq	(%r14,%rax,4), %r10
    00000192: 	movq	%r9, %rax
    00000195: 	addq	%r8, %rax
    00000198: 	je	.Ltmp1041 # Offset: 408
    0000019a: 	testq	%r9, %r9
    0000019d: 	je	.Ltmp1042 # Offset: 413
.Ltmp1041:
    000001a3: 	movq	%r8, 0x48(%rsp)
    000001a8: 	cmpq	$0xf, %r8
    000001ac: 	ja	.Ltmp1043 # Offset: 428
    000001ae: 	cmpq	$0x1, %r8
    000001b2: 	je	.Ltmp1044 # Offset: 434
    000001b8: 	testq	%r8, %r8
    000001bb: 	jne	.Ltmp1045 # Offset: 443
    000001c1: 	movq	%r13, %rax
    000001c4: 	jmp	.Ltmp1046 # Offset: 452
    000001c9: 	nopl	(%rax) # Size: 7
.Ltmp1043:
    000001d0: 	movq	0x30(%rsp), %rsi
    000001d5: 	movq	%r15, %rdi
    000001d8: 	xorl	%edx, %edx
    000001da: 	movq	%r8, 0x28(%rsp)
    000001df: 	movq	%r9, 0x20(%rsp)
    000001e4: 	movq	%r10, 0x18(%rsp)
    000001e9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 489
    000001ee: 	movq	0x18(%rsp), %r10
    000001f3: 	movq	0x20(%rsp), %r9
    000001f8: 	movq	%rax, 0x50(%rsp)
    000001fd: 	movq	%rax, %rdi
    00000200: 	movq	0x48(%rsp), %rax
    00000205: 	movq	0x28(%rsp), %r8
    0000020a: 	movq	%rax, 0x60(%rsp)
.Ltmp1048:
    0000020f: 	movq	%r8, %rdx
    00000212: 	movq	%r9, %rsi
    00000215: 	movq	%r10, 0x18(%rsp)
    0000021a: 	callq	memcpy@PLT # Offset: 538
    0000021f: 	movq	0x48(%rsp), %r8
    00000224: 	movq	0x50(%rsp), %rax
    00000229: 	movq	0x18(%rsp), %r10
    0000022e: 	jmp	.Ltmp1046 # Offset: 558
    00000233: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1038:
    00000238: 	movl	0x3c(%rsp), %eax
    0000023c: 	movl	%eax, iterations(%rip)
    00000242: 	movq	0x78(%rsp), %rax
    00000247: 	subq	%fs:0x28, %rax
    00000250: 	jne	.Ltmp1047 # Offset: 592
    00000252: 	addq	$0x88, %rsp
    00000259: 	popq	%rbx
    0000025a: 	popq	%rbp
    0000025b: 	popq	%r12
    0000025d: 	popq	%r13
    0000025f: 	popq	%r14
    00000261: 	popq	%r15
    00000263: 	retq # Offset: 611
.Ltmp1042:
    00000264: 	leaq	DATAat0x27008(%rip), %rdi
    0000026b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 619
.Ltmp1047:
    00000270: 	callq	__stack_chk_fail@PLT # Offset: 624
.Ltmp1045:
    00000275: 	movq	%r13, %rdi
    00000278: 	jmp	.Ltmp1048 # Offset: 632
    0000027a: 	endbr64
    0000027e: 	movq	%rax, %rbp
    00000281: 	movq	0x50(%rsp), %rdi
    00000286: 	cmpq	%r13, %rdi
    00000289: 	je	.Ltmp1049 # Offset: 649
    0000028b: 	movq	0x60(%rsp), %rax
    00000290: 	leaq	0x1(%rax), %rsi
    00000294: 	callq	_ZdlPvm@PLT # Offset: 660
.Ltmp1049:
    00000299: 	movq	%rbp, %rdi
    0000029c: 	callq	_Unwind_Resume@PLT # Offset: 668
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_reverse_sizesIPiPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12test_reverseIPhPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 180
  State       : disassembled
  Address     : 0xf0f0
  Size        : 0x22f
  MaxSize     : 0x230
  Offset      : 0xf0f0
  Section     : .text
  Orc Section : .local.text._Z12test_reverseIPhPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0179:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rcx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdx, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	xorl	%ebp, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rdi, %rbx
    0000001c: 	subq	$0x18, %rsp
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x8(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	callq	clock@PLT # Offset: 48
    00000035: 	movq	%rax, start_time(%rip)
    0000003c: 	movl	iterations(%rip), %eax
    00000042: 	testl	%eax, %eax
    00000044: 	jle	.Ltmp1050 # Offset: 68
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1051:
    00000050: 	movq	%r12, %rsi
    00000053: 	movq	%rbx, %rdi
    00000056: 	addl	$0x1, %ebp
    00000059: 	callq	*%r13 # Offset: 89
    0000005c: 	cmpl	%ebp, iterations(%rip)
    00000062: 	jg	.Ltmp1051 # Offset: 98
.Ltmp1050:
    00000064: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000006b: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    00000072: 	subq	$0x20, %rax
    00000076: 	cmpq	%rax, %rbp
    00000079: 	je	.Ltmp1052 # Offset: 121
    0000007f: 	leaq	0x10(%rbp), %rdi
    00000083: 	movq	0x8(%r14), %r13
    00000087: 	movq	%rdi, (%rbp)
    0000008b: 	movq	(%r14), %r15
    0000008e: 	movq	%r15, %rax
    00000091: 	addq	%r13, %rax
    00000094: 	je	.Ltmp1053 # Offset: 148
    00000096: 	testq	%r15, %r15
    00000099: 	je	.Ltmp1054 # Offset: 153
.Ltmp1053:
    0000009f: 	movq	%r13, (%rsp)
    000000a3: 	cmpq	$0xf, %r13
    000000a7: 	ja	.Ltmp1055 # Offset: 167
    000000ad: 	cmpq	$0x1, %r13
    000000b1: 	jne	.Ltmp1056 # Offset: 177
    000000b7: 	movzbl	(%r15), %eax
    000000bb: 	movb	%al, 0x10(%rbp)
.Ltmp1062:
    000000be: 	movq	%r13, 0x8(%rbp)
    000000c2: 	movb	$0x0, (%rdi,%r13)
    000000c7: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000ce: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000d5: 	addq	$0x20, %rax
    000000d9: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000e0: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000e7: 	je	.Ltmp1057 # Offset: 231
.Ltmp1063:
    000000ed: 	movq	-0x20(%rax), %rbp
    000000f1: 	callq	clock@PLT # Offset: 241
    000000f6: 	pxor	%xmm0, %xmm0
    000000fa: 	movq	%rax, end_time(%rip)
    00000101: 	movq	%rbp, %rdi
    00000104: 	subq	start_time(%rip), %rax
    0000010b: 	cvtsi2sd	%rax, %xmm0
    00000110: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000118: 	callq	_Z13record_resultdPKc # Offset: 280
    0000011d: 	leaq	0x1(%rbx), %rax
    00000121: 	jmp	.Ltmp1058 # Offset: 289
    00000123: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1060:
    00000128: 	addq	$0x1, %rax
    0000012c: 	movzbl	-0x2(%rax), %ecx
    00000130: 	cmpb	%cl, -0x1(%rax)
    00000133: 	jb	.Ltmp1059 # Offset: 307
.Ltmp1058:
    00000135: 	cmpq	%rax, %r12
    00000138: 	jne	.Ltmp1060 # Offset: 312
    0000013a: 	movq	0x8(%rsp), %rax
    0000013f: 	subq	%fs:0x28, %rax
    00000148: 	jne	.Ltmp1061 # Offset: 328
    0000014e: 	addq	$0x18, %rsp
    00000152: 	popq	%rbx
    00000153: 	popq	%rbp
    00000154: 	popq	%r12
    00000156: 	popq	%r13
    00000158: 	popq	%r14
    0000015a: 	popq	%r15
    0000015c: 	retq # Offset: 348
    0000015d: 	nopl	(%rax) # Size: 3
.Ltmp1055:
    00000160: 	movq	%rbp, %rdi
    00000163: 	movq	%rsp, %rsi
    00000166: 	xorl	%edx, %edx
    00000168: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 360
    0000016d: 	movq	%rax, (%rbp)
    00000171: 	movq	%rax, %rdi
    00000174: 	movq	(%rsp), %rax
    00000178: 	movq	%rax, 0x10(%rbp)
.Ltmp1064:
    0000017c: 	movq	%r13, %rdx
    0000017f: 	movq	%r15, %rsi
    00000182: 	callq	memcpy@PLT # Offset: 386
    00000187: 	movq	(%rsp), %r13
    0000018b: 	movq	(%rbp), %rdi
    0000018f: 	jmp	.Ltmp1062 # Offset: 399
    00000194: 	nopl	(%rax) # Size: 4
.Ltmp1059:
    00000198: 	movq	0x8(%rsp), %rax
    0000019d: 	subq	%fs:0x28, %rax
    000001a6: 	jne	.Ltmp1061 # Offset: 422
    000001a8: 	movq	(%r14), %rdx
    000001ab: 	addq	$0x18, %rsp
    000001af: 	leaq	DATAat0x271d0(%rip), %rsi
    000001b6: 	xorl	%eax, %eax
    000001b8: 	popq	%rbx
    000001b9: 	movl	$0x1, %edi
    000001be: 	popq	%rbp
    000001bf: 	popq	%r12
    000001c1: 	popq	%r13
    000001c3: 	popq	%r14
    000001c5: 	popq	%r15
    000001c7: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 455
    000001cc: 	nopl	(%rax) # Size: 4
.Ltmp1052:
    000001d0: 	movq	%r14, %rsi
    000001d3: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000001da: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 474
    000001df: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000001e6: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001ed: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000001f4: 	jne	.Ltmp1063 # Offset: 500
.Ltmp1057:
    000001fa: 	movq	-0x8(%rdx), %rax
    000001fe: 	addq	$0x200, %rax
    00000204: 	jmp	.Ltmp1063 # Offset: 516
    00000209: 	nopl	(%rax) # Size: 7
.Ltmp1056:
    00000210: 	testq	%r13, %r13
    00000213: 	je	.Ltmp1062 # Offset: 531
    00000219: 	jmp	.Ltmp1064 # Offset: 537
.Ltmp1061:
    0000021e: 	callq	__stack_chk_fail@PLT # Offset: 542
.Ltmp1054:
    00000223: 	leaq	DATAat0x27008(%rip), %rdi
    0000022a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 554
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_reverseIPhPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_reverse_sizesIPhPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 181
  State       : disassembled
  Address     : 0xf320
  Size        : 0x2a1
  MaxSize     : 0x2b0
  Offset      : 0xf320
  Section     : .text
  Orc Section : .local.text._Z18test_reverse_sizesIPhPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0180:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	movl	$0x1, %edi
    00000010: 	pushq	%r13
    00000012: 	pushq	%r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%rcx, %rbp
    00000018: 	pushq	%rbx
    00000019: 	movl	%esi, %ebx
    0000001b: 	subq	$0x88, %rsp
    00000022: 	movl	%esi, 0x38(%rsp)
    00000026: 	leaq	DATAat0x271e0(%rip), %rsi
    0000002d: 	movq	%rdx, 0x8(%rsp)
    00000032: 	movq	%fs:0x28, %rax
    0000003b: 	movq	%rax, 0x78(%rsp)
    00000040: 	movl	iterations(%rip), %eax
    00000046: 	movl	%eax, 0x3c(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	callq	__printf_chk@PLT # Offset: 76
    00000051: 	xorl	%eax, %eax
    00000053: 	movl	$0x1, %edi
    00000058: 	leaq	DATAat0x27210(%rip), %rsi
    0000005f: 	callq	__printf_chk@PLT # Offset: 95
    00000064: 	cmpl	$0x3, %ebx
    00000067: 	jle	.Ltmp1065 # Offset: 103
    0000006d: 	movslq	0x3c(%rsp), %rax
    00000072: 	xorl	%r12d, %r12d
    00000075: 	movl	$0x4, %ebx
    0000007a: 	leaq	0x60(%rsp), %r13
    0000007f: 	leaq	0x50(%rsp), %r15
    00000084: 	movq	%rax, 0x10(%rsp)
    00000089: 	leaq	0x48(%rsp), %rax
    0000008e: 	movq	%rax, 0x30(%rsp)
    00000093: 	jmp	.Ltmp1066 # Offset: 147
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1071:
    000000a0: 	movzbl	(%r9), %eax
    000000a4: 	movb	%al, 0x60(%rsp)
    000000a8: 	movq	%r13, %rax
.Ltmp1073:
    000000ab: 	movq	%r8, 0x58(%rsp)
    000000b0: 	movq	0x8(%rsp), %rdx
    000000b5: 	movq	%r15, %rcx
    000000b8: 	movq	%r10, %rsi
    000000bb: 	movb	$0x0, (%rax,%r8)
    000000c0: 	movq	%r14, %rdi
    000000c3: 	callq	_Z12test_reverseIPhPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 195
    000000c8: 	movq	0x50(%rsp), %rdi
    000000cd: 	cmpq	%r13, %rdi
    000000d0: 	je	.Ltmp1067 # Offset: 208
    000000d2: 	movq	0x60(%rsp), %rax
    000000d7: 	leaq	0x1(%rax), %rsi
    000000db: 	callq	_ZdlPvm@PLT # Offset: 219
.Ltmp1067:
    000000e0: 	pxor	%xmm1, %xmm1
    000000e4: 	pxor	%xmm2, %xmm2
    000000e8: 	movq	(%rbp), %rcx
    000000ec: 	movl	%ebx, %r8d
    000000ef: 	cvtsi2sd	%ebx, %xmm2
    000000f3: 	movq	results(%rip), %rax
    000000fa: 	movl	%r12d, %edx
    000000fd: 	addl	%ebx, %ebx
    000000ff: 	leaq	DATAat0x27240(%rip), %rsi
    00000106: 	movl	$0x1, %edi
    0000010b: 	addl	$0x1, %r12d
    0000010f: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000117: 	movsd	(%rax), %xmm0
    0000011b: 	movl	$0x2, %eax
    00000120: 	mulsd	%xmm2, %xmm1
    00000124: 	divsd	DATAat0x276b0(%rip), %xmm1
    0000012c: 	divsd	%xmm0, %xmm1
    00000130: 	callq	__printf_chk@PLT # Offset: 304
    00000135: 	movl	$0x0, current_test(%rip)
    0000013f: 	cmpl	%ebx, 0x38(%rsp)
    00000143: 	jl	.Ltmp1065 # Offset: 323
.Ltmp1066:
    00000149: 	movl	0x38(%rsp), %eax
    0000014d: 	movq	(%rbp), %r9
    00000151: 	movq	%r13, 0x50(%rsp)
    00000156: 	movq	0x8(%rbp), %r8
    0000015a: 	cltd
    0000015b: 	idivl	%ebx
    0000015d: 	movl	$0x4, %edx
    00000162: 	cltq
    00000164: 	imulq	0x10(%rsp), %rax
    0000016a: 	cmpq	%rdx, %rax
    0000016d: 	cmovlq	%rdx, %rax
    00000171: 	movl	$0x70000000, %edx
    00000176: 	cmpq	%rdx, %rax
    00000179: 	cmovgq	%rdx, %rax
    0000017d: 	addq	$0x1, %rax
    00000181: 	andq	$-0x2, %rax
    00000185: 	movl	%eax, iterations(%rip)
    0000018b: 	movslq	%ebx, %rax
    0000018e: 	leaq	(%r14,%rax), %r10
    00000192: 	movq	%r9, %rax
    00000195: 	addq	%r8, %rax
    00000198: 	je	.Ltmp1068 # Offset: 408
    0000019a: 	testq	%r9, %r9
    0000019d: 	je	.Ltmp1069 # Offset: 413
.Ltmp1068:
    000001a3: 	movq	%r8, 0x48(%rsp)
    000001a8: 	cmpq	$0xf, %r8
    000001ac: 	ja	.Ltmp1070 # Offset: 428
    000001ae: 	cmpq	$0x1, %r8
    000001b2: 	je	.Ltmp1071 # Offset: 434
    000001b8: 	testq	%r8, %r8
    000001bb: 	jne	.Ltmp1072 # Offset: 443
    000001c1: 	movq	%r13, %rax
    000001c4: 	jmp	.Ltmp1073 # Offset: 452
    000001c9: 	nopl	(%rax) # Size: 7
.Ltmp1070:
    000001d0: 	movq	0x30(%rsp), %rsi
    000001d5: 	movq	%r15, %rdi
    000001d8: 	xorl	%edx, %edx
    000001da: 	movq	%r8, 0x28(%rsp)
    000001df: 	movq	%r9, 0x20(%rsp)
    000001e4: 	movq	%r10, 0x18(%rsp)
    000001e9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 489
    000001ee: 	movq	0x18(%rsp), %r10
    000001f3: 	movq	0x20(%rsp), %r9
    000001f8: 	movq	%rax, 0x50(%rsp)
    000001fd: 	movq	%rax, %rdi
    00000200: 	movq	0x48(%rsp), %rax
    00000205: 	movq	0x28(%rsp), %r8
    0000020a: 	movq	%rax, 0x60(%rsp)
.Ltmp1075:
    0000020f: 	movq	%r8, %rdx
    00000212: 	movq	%r9, %rsi
    00000215: 	movq	%r10, 0x18(%rsp)
    0000021a: 	callq	memcpy@PLT # Offset: 538
    0000021f: 	movq	0x48(%rsp), %r8
    00000224: 	movq	0x50(%rsp), %rax
    00000229: 	movq	0x18(%rsp), %r10
    0000022e: 	jmp	.Ltmp1073 # Offset: 558
    00000233: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1065:
    00000238: 	movl	0x3c(%rsp), %eax
    0000023c: 	movl	%eax, iterations(%rip)
    00000242: 	movq	0x78(%rsp), %rax
    00000247: 	subq	%fs:0x28, %rax
    00000250: 	jne	.Ltmp1074 # Offset: 592
    00000252: 	addq	$0x88, %rsp
    00000259: 	popq	%rbx
    0000025a: 	popq	%rbp
    0000025b: 	popq	%r12
    0000025d: 	popq	%r13
    0000025f: 	popq	%r14
    00000261: 	popq	%r15
    00000263: 	retq # Offset: 611
.Ltmp1069:
    00000264: 	leaq	DATAat0x27008(%rip), %rdi
    0000026b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 619
.Ltmp1074:
    00000270: 	callq	__stack_chk_fail@PLT # Offset: 624
.Ltmp1072:
    00000275: 	movq	%r13, %rdi
    00000278: 	jmp	.Ltmp1075 # Offset: 632
    0000027a: 	endbr64
    0000027e: 	movq	%rax, %rbp
    00000281: 	movq	0x50(%rsp), %rdi
    00000286: 	cmpq	%r13, %rdi
    00000289: 	je	.Ltmp1076 # Offset: 649
    0000028b: 	movq	0x60(%rsp), %rax
    00000290: 	leaq	0x1(%rax), %rsi
    00000294: 	callq	_ZdlPvm@PLT # Offset: 660
.Ltmp1076:
    00000299: 	movq	%rbp, %rdi
    0000029c: 	callq	_Unwind_Resume@PLT # Offset: 668
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_reverse_sizesIPhPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12test_reverseI20BidirectionalPointerImEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 182
  State       : disassembled
  Address     : 0xf5d0
  Size        : 0x22f
  MaxSize     : 0x230
  Offset      : 0xf5d0
  Section     : .text
  Orc Section : .local.text._Z12test_reverseI20BidirectionalPointerImEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0181:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rcx, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	xorl	%ebp, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rdi, %rbx
    0000001c: 	subq	$0x18, %rsp
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x8(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	callq	clock@PLT # Offset: 48
    00000035: 	movq	%rax, start_time(%rip)
    0000003c: 	movl	iterations(%rip), %eax
    00000042: 	testl	%eax, %eax
    00000044: 	jle	.Ltmp1077 # Offset: 68
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1078:
    00000050: 	movq	%r12, %rsi
    00000053: 	movq	%rbx, %rdi
    00000056: 	addl	$0x1, %ebp
    00000059: 	callq	*%r14 # Offset: 89
    0000005c: 	cmpl	%ebp, iterations(%rip)
    00000062: 	jg	.Ltmp1078 # Offset: 98
.Ltmp1077:
    00000064: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000006b: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    00000072: 	subq	$0x20, %rax
    00000076: 	cmpq	%rax, %rbp
    00000079: 	je	.Ltmp1079 # Offset: 121
    0000007f: 	leaq	0x10(%rbp), %rdi
    00000083: 	movq	0x8(%r13), %r14
    00000087: 	movq	%rdi, (%rbp)
    0000008b: 	movq	(%r13), %r15
    0000008f: 	movq	%r15, %rax
    00000092: 	addq	%r14, %rax
    00000095: 	je	.Ltmp1080 # Offset: 149
    00000097: 	testq	%r15, %r15
    0000009a: 	je	.Ltmp1081 # Offset: 154
.Ltmp1080:
    000000a0: 	movq	%r14, (%rsp)
    000000a4: 	cmpq	$0xf, %r14
    000000a8: 	ja	.Ltmp1082 # Offset: 168
    000000ae: 	cmpq	$0x1, %r14
    000000b2: 	jne	.Ltmp1083 # Offset: 178
    000000b8: 	movzbl	(%r15), %eax
    000000bc: 	movb	%al, 0x10(%rbp)
.Ltmp1089:
    000000bf: 	movq	%r14, 0x8(%rbp)
    000000c3: 	movb	$0x0, (%rdi,%r14)
    000000c8: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000cf: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000d6: 	addq	$0x20, %rax
    000000da: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000e1: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000e8: 	je	.Ltmp1084 # Offset: 232
.Ltmp1090:
    000000ee: 	movq	-0x20(%rax), %rbp
    000000f2: 	callq	clock@PLT # Offset: 242
    000000f7: 	pxor	%xmm0, %xmm0
    000000fb: 	movq	%rax, end_time(%rip)
    00000102: 	movq	%rbp, %rdi
    00000105: 	subq	start_time(%rip), %rax
    0000010c: 	cvtsi2sd	%rax, %xmm0
    00000111: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000119: 	callq	_Z13record_resultdPKc # Offset: 281
    0000011e: 	leaq	0x8(%rbx), %rax
    00000122: 	jmp	.Ltmp1085 # Offset: 290
    00000124: 	nopl	(%rax) # Size: 4
.Ltmp1087:
    00000128: 	addq	$0x8, %rax
    0000012c: 	movq	-0x10(%rax), %rcx
    00000130: 	cmpq	%rcx, (%rdx)
    00000133: 	jb	.Ltmp1086 # Offset: 307
.Ltmp1085:
    00000135: 	movq	%rax, %rdx
    00000138: 	cmpq	%rax, %r12
    0000013b: 	jne	.Ltmp1087 # Offset: 315
    0000013d: 	movq	0x8(%rsp), %rax
    00000142: 	subq	%fs:0x28, %rax
    0000014b: 	jne	.Ltmp1088 # Offset: 331
    00000151: 	addq	$0x18, %rsp
    00000155: 	popq	%rbx
    00000156: 	popq	%rbp
    00000157: 	popq	%r12
    00000159: 	popq	%r13
    0000015b: 	popq	%r14
    0000015d: 	popq	%r15
    0000015f: 	retq # Offset: 351
.Ltmp1082:
    00000160: 	movq	%rbp, %rdi
    00000163: 	movq	%rsp, %rsi
    00000166: 	xorl	%edx, %edx
    00000168: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 360
    0000016d: 	movq	%rax, (%rbp)
    00000171: 	movq	%rax, %rdi
    00000174: 	movq	(%rsp), %rax
    00000178: 	movq	%rax, 0x10(%rbp)
.Ltmp1091:
    0000017c: 	movq	%r14, %rdx
    0000017f: 	movq	%r15, %rsi
    00000182: 	callq	memcpy@PLT # Offset: 386
    00000187: 	movq	(%rsp), %r14
    0000018b: 	movq	(%rbp), %rdi
    0000018f: 	jmp	.Ltmp1089 # Offset: 399
    00000194: 	nopl	(%rax) # Size: 4
.Ltmp1086:
    00000198: 	movq	0x8(%rsp), %rax
    0000019d: 	subq	%fs:0x28, %rax
    000001a6: 	jne	.Ltmp1088 # Offset: 422
    000001a8: 	movq	(%r13), %rdx
    000001ac: 	addq	$0x18, %rsp
    000001b0: 	leaq	DATAat0x271d0(%rip), %rsi
    000001b7: 	xorl	%eax, %eax
    000001b9: 	popq	%rbx
    000001ba: 	movl	$0x1, %edi
    000001bf: 	popq	%rbp
    000001c0: 	popq	%r12
    000001c2: 	popq	%r13
    000001c4: 	popq	%r14
    000001c6: 	popq	%r15
    000001c8: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 456
    000001cd: 	nopl	(%rax) # Size: 3
.Ltmp1079:
    000001d0: 	movq	%r13, %rsi
    000001d3: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000001da: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 474
    000001df: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000001e6: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001ed: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000001f4: 	jne	.Ltmp1090 # Offset: 500
.Ltmp1084:
    000001fa: 	movq	-0x8(%rdx), %rax
    000001fe: 	addq	$0x200, %rax
    00000204: 	jmp	.Ltmp1090 # Offset: 516
    00000209: 	nopl	(%rax) # Size: 7
.Ltmp1083:
    00000210: 	testq	%r14, %r14
    00000213: 	je	.Ltmp1089 # Offset: 531
    00000219: 	jmp	.Ltmp1091 # Offset: 537
.Ltmp1088:
    0000021e: 	callq	__stack_chk_fail@PLT # Offset: 542
.Ltmp1081:
    00000223: 	leaq	DATAat0x27008(%rip), %rdi
    0000022a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 554
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_reverseI20BidirectionalPointerImEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_reverse_sizesI20BidirectionalPointerImEPFvS1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 183
  State       : disassembled
  Address     : 0xf800
  Size        : 0x2a1
  MaxSize     : 0x2b0
  Offset      : 0xf800
  Section     : .text
  Orc Section : .local.text._Z18test_reverse_sizesI20BidirectionalPointerImEPFvS1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0182:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	movl	$0x1, %edi
    00000010: 	pushq	%r13
    00000012: 	pushq	%r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%rcx, %rbp
    00000018: 	pushq	%rbx
    00000019: 	movl	%esi, %ebx
    0000001b: 	subq	$0x88, %rsp
    00000022: 	movl	%esi, 0x38(%rsp)
    00000026: 	leaq	DATAat0x271e0(%rip), %rsi
    0000002d: 	movq	%rdx, 0x8(%rsp)
    00000032: 	movq	%fs:0x28, %rax
    0000003b: 	movq	%rax, 0x78(%rsp)
    00000040: 	movl	iterations(%rip), %eax
    00000046: 	movl	%eax, 0x3c(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	callq	__printf_chk@PLT # Offset: 76
    00000051: 	xorl	%eax, %eax
    00000053: 	movl	$0x1, %edi
    00000058: 	leaq	DATAat0x27210(%rip), %rsi
    0000005f: 	callq	__printf_chk@PLT # Offset: 95
    00000064: 	cmpl	$0x3, %ebx
    00000067: 	jle	.Ltmp1092 # Offset: 103
    0000006d: 	movslq	0x3c(%rsp), %rax
    00000072: 	xorl	%r12d, %r12d
    00000075: 	movl	$0x4, %ebx
    0000007a: 	leaq	0x60(%rsp), %r13
    0000007f: 	leaq	0x50(%rsp), %r15
    00000084: 	movq	%rax, 0x10(%rsp)
    00000089: 	leaq	0x48(%rsp), %rax
    0000008e: 	movq	%rax, 0x30(%rsp)
    00000093: 	jmp	.Ltmp1093 # Offset: 147
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1098:
    000000a0: 	movzbl	(%r9), %eax
    000000a4: 	movb	%al, 0x60(%rsp)
    000000a8: 	movq	%r13, %rax
.Ltmp1100:
    000000ab: 	movq	%r8, 0x58(%rsp)
    000000b0: 	movq	0x8(%rsp), %rdx
    000000b5: 	movq	%r15, %rcx
    000000b8: 	movq	%r10, %rsi
    000000bb: 	movb	$0x0, (%rax,%r8)
    000000c0: 	movq	%r14, %rdi
    000000c3: 	callq	_Z12test_reverseI20BidirectionalPointerImEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 195
    000000c8: 	movq	0x50(%rsp), %rdi
    000000cd: 	cmpq	%r13, %rdi
    000000d0: 	je	.Ltmp1094 # Offset: 208
    000000d2: 	movq	0x60(%rsp), %rax
    000000d7: 	leaq	0x1(%rax), %rsi
    000000db: 	callq	_ZdlPvm@PLT # Offset: 219
.Ltmp1094:
    000000e0: 	pxor	%xmm1, %xmm1
    000000e4: 	pxor	%xmm2, %xmm2
    000000e8: 	movq	(%rbp), %rcx
    000000ec: 	movl	%ebx, %r8d
    000000ef: 	cvtsi2sd	%ebx, %xmm2
    000000f3: 	movq	results(%rip), %rax
    000000fa: 	movl	%r12d, %edx
    000000fd: 	addl	%ebx, %ebx
    000000ff: 	leaq	DATAat0x27240(%rip), %rsi
    00000106: 	movl	$0x1, %edi
    0000010b: 	addl	$0x1, %r12d
    0000010f: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000117: 	movsd	(%rax), %xmm0
    0000011b: 	movl	$0x2, %eax
    00000120: 	mulsd	%xmm2, %xmm1
    00000124: 	divsd	DATAat0x276b0(%rip), %xmm1
    0000012c: 	divsd	%xmm0, %xmm1
    00000130: 	callq	__printf_chk@PLT # Offset: 304
    00000135: 	movl	$0x0, current_test(%rip)
    0000013f: 	cmpl	%ebx, 0x38(%rsp)
    00000143: 	jl	.Ltmp1092 # Offset: 323
.Ltmp1093:
    00000149: 	movl	0x38(%rsp), %eax
    0000014d: 	movq	(%rbp), %r9
    00000151: 	movq	%r13, 0x50(%rsp)
    00000156: 	movq	0x8(%rbp), %r8
    0000015a: 	cltd
    0000015b: 	idivl	%ebx
    0000015d: 	movl	$0x4, %edx
    00000162: 	cltq
    00000164: 	imulq	0x10(%rsp), %rax
    0000016a: 	cmpq	%rdx, %rax
    0000016d: 	cmovlq	%rdx, %rax
    00000171: 	movl	$0x70000000, %edx
    00000176: 	cmpq	%rdx, %rax
    00000179: 	cmovgq	%rdx, %rax
    0000017d: 	addq	$0x1, %rax
    00000181: 	andq	$-0x2, %rax
    00000185: 	movl	%eax, iterations(%rip)
    0000018b: 	movslq	%ebx, %rax
    0000018e: 	leaq	(%r14,%rax,8), %r10
    00000192: 	movq	%r9, %rax
    00000195: 	addq	%r8, %rax
    00000198: 	je	.Ltmp1095 # Offset: 408
    0000019a: 	testq	%r9, %r9
    0000019d: 	je	.Ltmp1096 # Offset: 413
.Ltmp1095:
    000001a3: 	movq	%r8, 0x48(%rsp)
    000001a8: 	cmpq	$0xf, %r8
    000001ac: 	ja	.Ltmp1097 # Offset: 428
    000001ae: 	cmpq	$0x1, %r8
    000001b2: 	je	.Ltmp1098 # Offset: 434
    000001b8: 	testq	%r8, %r8
    000001bb: 	jne	.Ltmp1099 # Offset: 443
    000001c1: 	movq	%r13, %rax
    000001c4: 	jmp	.Ltmp1100 # Offset: 452
    000001c9: 	nopl	(%rax) # Size: 7
.Ltmp1097:
    000001d0: 	movq	0x30(%rsp), %rsi
    000001d5: 	movq	%r15, %rdi
    000001d8: 	xorl	%edx, %edx
    000001da: 	movq	%r10, 0x28(%rsp)
    000001df: 	movq	%r8, 0x20(%rsp)
    000001e4: 	movq	%r9, 0x18(%rsp)
    000001e9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 489
    000001ee: 	movq	0x18(%rsp), %r9
    000001f3: 	movq	0x20(%rsp), %r8
    000001f8: 	movq	%rax, 0x50(%rsp)
    000001fd: 	movq	%rax, %rdi
    00000200: 	movq	0x48(%rsp), %rax
    00000205: 	movq	0x28(%rsp), %r10
    0000020a: 	movq	%rax, 0x60(%rsp)
.Ltmp1102:
    0000020f: 	movq	%r8, %rdx
    00000212: 	movq	%r9, %rsi
    00000215: 	movq	%r10, 0x18(%rsp)
    0000021a: 	callq	memcpy@PLT # Offset: 538
    0000021f: 	movq	0x48(%rsp), %r8
    00000224: 	movq	0x50(%rsp), %rax
    00000229: 	movq	0x18(%rsp), %r10
    0000022e: 	jmp	.Ltmp1100 # Offset: 558
    00000233: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1092:
    00000238: 	movl	0x3c(%rsp), %eax
    0000023c: 	movl	%eax, iterations(%rip)
    00000242: 	movq	0x78(%rsp), %rax
    00000247: 	subq	%fs:0x28, %rax
    00000250: 	jne	.Ltmp1101 # Offset: 592
    00000252: 	addq	$0x88, %rsp
    00000259: 	popq	%rbx
    0000025a: 	popq	%rbp
    0000025b: 	popq	%r12
    0000025d: 	popq	%r13
    0000025f: 	popq	%r14
    00000261: 	popq	%r15
    00000263: 	retq # Offset: 611
.Ltmp1096:
    00000264: 	leaq	DATAat0x27008(%rip), %rdi
    0000026b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 619
.Ltmp1101:
    00000270: 	callq	__stack_chk_fail@PLT # Offset: 624
.Ltmp1099:
    00000275: 	movq	%r13, %rdi
    00000278: 	jmp	.Ltmp1102 # Offset: 632
    0000027a: 	endbr64
    0000027e: 	movq	%rax, %rbp
    00000281: 	movq	0x50(%rsp), %rdi
    00000286: 	cmpq	%r13, %rdi
    00000289: 	je	.Ltmp1103 # Offset: 649
    0000028b: 	movq	0x60(%rsp), %rax
    00000290: 	leaq	0x1(%rax), %rsi
    00000294: 	callq	_ZdlPvm@PLT # Offset: 660
.Ltmp1103:
    00000299: 	movq	%rbp, %rdi
    0000029c: 	callq	_Unwind_Resume@PLT # Offset: 668
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_reverse_sizesI20BidirectionalPointerImEPFvS1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12test_reverseI20BidirectionalPointerIdEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 184
  State       : disassembled
  Address     : 0xfab0
  Size        : 0x237
  MaxSize     : 0x240
  Offset      : 0xfab0
  Section     : .text
  Orc Section : .local.text._Z12test_reverseI20BidirectionalPointerIdEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0183:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rcx, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	xorl	%ebp, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rdi, %rbx
    0000001c: 	subq	$0x18, %rsp
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x8(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	callq	clock@PLT # Offset: 48
    00000035: 	movq	%rax, start_time(%rip)
    0000003c: 	movl	iterations(%rip), %eax
    00000042: 	testl	%eax, %eax
    00000044: 	jle	.Ltmp1104 # Offset: 68
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1105:
    00000050: 	movq	%r12, %rsi
    00000053: 	movq	%rbx, %rdi
    00000056: 	addl	$0x1, %ebp
    00000059: 	callq	*%r14 # Offset: 89
    0000005c: 	cmpl	%ebp, iterations(%rip)
    00000062: 	jg	.Ltmp1105 # Offset: 98
.Ltmp1104:
    00000064: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000006b: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    00000072: 	subq	$0x20, %rax
    00000076: 	cmpq	%rax, %rbp
    00000079: 	je	.Ltmp1106 # Offset: 121
    0000007f: 	leaq	0x10(%rbp), %rdi
    00000083: 	movq	0x8(%r13), %r14
    00000087: 	movq	%rdi, (%rbp)
    0000008b: 	movq	(%r13), %r15
    0000008f: 	movq	%r15, %rax
    00000092: 	addq	%r14, %rax
    00000095: 	je	.Ltmp1107 # Offset: 149
    00000097: 	testq	%r15, %r15
    0000009a: 	je	.Ltmp1108 # Offset: 154
.Ltmp1107:
    000000a0: 	movq	%r14, (%rsp)
    000000a4: 	cmpq	$0xf, %r14
    000000a8: 	ja	.Ltmp1109 # Offset: 168
    000000ae: 	cmpq	$0x1, %r14
    000000b2: 	jne	.Ltmp1110 # Offset: 178
    000000b8: 	movzbl	(%r15), %eax
    000000bc: 	movb	%al, 0x10(%rbp)
.Ltmp1116:
    000000bf: 	movq	%r14, 0x8(%rbp)
    000000c3: 	movb	$0x0, (%rdi,%r14)
    000000c8: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000cf: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000d6: 	addq	$0x20, %rax
    000000da: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000e1: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000e8: 	je	.Ltmp1111 # Offset: 232
.Ltmp1117:
    000000ee: 	movq	-0x20(%rax), %rbp
    000000f2: 	callq	clock@PLT # Offset: 242
    000000f7: 	pxor	%xmm0, %xmm0
    000000fb: 	movq	%rax, end_time(%rip)
    00000102: 	movq	%rbp, %rdi
    00000105: 	subq	start_time(%rip), %rax
    0000010c: 	cvtsi2sd	%rax, %xmm0
    00000111: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000119: 	callq	_Z13record_resultdPKc # Offset: 281
    0000011e: 	leaq	0x8(%rbx), %rax
    00000122: 	jmp	.Ltmp1112 # Offset: 290
    00000124: 	nopl	(%rax) # Size: 4
.Ltmp1114:
    00000128: 	addq	$0x8, %rax
    0000012c: 	movsd	-0x10(%rax), %xmm0
    00000131: 	comisd	(%rdx), %xmm0
    00000135: 	ja	.Ltmp1113 # Offset: 309
.Ltmp1112:
    00000137: 	movq	%rax, %rdx
    0000013a: 	cmpq	%rax, %r12
    0000013d: 	jne	.Ltmp1114 # Offset: 317
    0000013f: 	movq	0x8(%rsp), %rax
    00000144: 	subq	%fs:0x28, %rax
    0000014d: 	jne	.Ltmp1115 # Offset: 333
    00000153: 	addq	$0x18, %rsp
    00000157: 	popq	%rbx
    00000158: 	popq	%rbp
    00000159: 	popq	%r12
    0000015b: 	popq	%r13
    0000015d: 	popq	%r14
    0000015f: 	popq	%r15
    00000161: 	retq # Offset: 353
    00000162: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1109:
    00000168: 	movq	%rbp, %rdi
    0000016b: 	movq	%rsp, %rsi
    0000016e: 	xorl	%edx, %edx
    00000170: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 368
    00000175: 	movq	%rax, (%rbp)
    00000179: 	movq	%rax, %rdi
    0000017c: 	movq	(%rsp), %rax
    00000180: 	movq	%rax, 0x10(%rbp)
.Ltmp1118:
    00000184: 	movq	%r14, %rdx
    00000187: 	movq	%r15, %rsi
    0000018a: 	callq	memcpy@PLT # Offset: 394
    0000018f: 	movq	(%rsp), %r14
    00000193: 	movq	(%rbp), %rdi
    00000197: 	jmp	.Ltmp1116 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp1113:
    000001a0: 	movq	0x8(%rsp), %rax
    000001a5: 	subq	%fs:0x28, %rax
    000001ae: 	jne	.Ltmp1115 # Offset: 430
    000001b0: 	movq	(%r13), %rdx
    000001b4: 	addq	$0x18, %rsp
    000001b8: 	leaq	DATAat0x271d0(%rip), %rsi
    000001bf: 	xorl	%eax, %eax
    000001c1: 	popq	%rbx
    000001c2: 	movl	$0x1, %edi
    000001c7: 	popq	%rbp
    000001c8: 	popq	%r12
    000001ca: 	popq	%r13
    000001cc: 	popq	%r14
    000001ce: 	popq	%r15
    000001d0: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 464
    000001d5: 	nopl	(%rax) # Size: 3
.Ltmp1106:
    000001d8: 	movq	%r13, %rsi
    000001db: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000001e2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 482
    000001e7: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000001ee: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001f5: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000001fc: 	jne	.Ltmp1117 # Offset: 508
.Ltmp1111:
    00000202: 	movq	-0x8(%rdx), %rax
    00000206: 	addq	$0x200, %rax
    0000020c: 	jmp	.Ltmp1117 # Offset: 524
    00000211: 	nopl	(%rax) # Size: 7
.Ltmp1110:
    00000218: 	testq	%r14, %r14
    0000021b: 	je	.Ltmp1116 # Offset: 539
    00000221: 	jmp	.Ltmp1118 # Offset: 545
.Ltmp1115:
    00000226: 	callq	__stack_chk_fail@PLT # Offset: 550
.Ltmp1108:
    0000022b: 	leaq	DATAat0x27008(%rip), %rdi
    00000232: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 562
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_reverseI20BidirectionalPointerIdEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_reverse_sizesI20BidirectionalPointerIdEPFvS1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 185
  State       : disassembled
  Address     : 0xfcf0
  Size        : 0x2a1
  MaxSize     : 0x2b0
  Offset      : 0xfcf0
  Section     : .text
  Orc Section : .local.text._Z18test_reverse_sizesI20BidirectionalPointerIdEPFvS1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0184:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	movl	$0x1, %edi
    00000010: 	pushq	%r13
    00000012: 	pushq	%r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%rcx, %rbp
    00000018: 	pushq	%rbx
    00000019: 	movl	%esi, %ebx
    0000001b: 	subq	$0x88, %rsp
    00000022: 	movl	%esi, 0x38(%rsp)
    00000026: 	leaq	DATAat0x271e0(%rip), %rsi
    0000002d: 	movq	%rdx, 0x8(%rsp)
    00000032: 	movq	%fs:0x28, %rax
    0000003b: 	movq	%rax, 0x78(%rsp)
    00000040: 	movl	iterations(%rip), %eax
    00000046: 	movl	%eax, 0x3c(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	callq	__printf_chk@PLT # Offset: 76
    00000051: 	xorl	%eax, %eax
    00000053: 	movl	$0x1, %edi
    00000058: 	leaq	DATAat0x27210(%rip), %rsi
    0000005f: 	callq	__printf_chk@PLT # Offset: 95
    00000064: 	cmpl	$0x3, %ebx
    00000067: 	jle	.Ltmp1119 # Offset: 103
    0000006d: 	movslq	0x3c(%rsp), %rax
    00000072: 	xorl	%r12d, %r12d
    00000075: 	movl	$0x4, %ebx
    0000007a: 	leaq	0x60(%rsp), %r13
    0000007f: 	leaq	0x50(%rsp), %r15
    00000084: 	movq	%rax, 0x10(%rsp)
    00000089: 	leaq	0x48(%rsp), %rax
    0000008e: 	movq	%rax, 0x30(%rsp)
    00000093: 	jmp	.Ltmp1120 # Offset: 147
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1125:
    000000a0: 	movzbl	(%r9), %eax
    000000a4: 	movb	%al, 0x60(%rsp)
    000000a8: 	movq	%r13, %rax
.Ltmp1127:
    000000ab: 	movq	%r8, 0x58(%rsp)
    000000b0: 	movq	0x8(%rsp), %rdx
    000000b5: 	movq	%r15, %rcx
    000000b8: 	movq	%r10, %rsi
    000000bb: 	movb	$0x0, (%rax,%r8)
    000000c0: 	movq	%r14, %rdi
    000000c3: 	callq	_Z12test_reverseI20BidirectionalPointerIdEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 195
    000000c8: 	movq	0x50(%rsp), %rdi
    000000cd: 	cmpq	%r13, %rdi
    000000d0: 	je	.Ltmp1121 # Offset: 208
    000000d2: 	movq	0x60(%rsp), %rax
    000000d7: 	leaq	0x1(%rax), %rsi
    000000db: 	callq	_ZdlPvm@PLT # Offset: 219
.Ltmp1121:
    000000e0: 	pxor	%xmm1, %xmm1
    000000e4: 	pxor	%xmm2, %xmm2
    000000e8: 	movq	(%rbp), %rcx
    000000ec: 	movl	%ebx, %r8d
    000000ef: 	cvtsi2sd	%ebx, %xmm2
    000000f3: 	movq	results(%rip), %rax
    000000fa: 	movl	%r12d, %edx
    000000fd: 	addl	%ebx, %ebx
    000000ff: 	leaq	DATAat0x27240(%rip), %rsi
    00000106: 	movl	$0x1, %edi
    0000010b: 	addl	$0x1, %r12d
    0000010f: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000117: 	movsd	(%rax), %xmm0
    0000011b: 	movl	$0x2, %eax
    00000120: 	mulsd	%xmm2, %xmm1
    00000124: 	divsd	DATAat0x276b0(%rip), %xmm1
    0000012c: 	divsd	%xmm0, %xmm1
    00000130: 	callq	__printf_chk@PLT # Offset: 304
    00000135: 	movl	$0x0, current_test(%rip)
    0000013f: 	cmpl	%ebx, 0x38(%rsp)
    00000143: 	jl	.Ltmp1119 # Offset: 323
.Ltmp1120:
    00000149: 	movl	0x38(%rsp), %eax
    0000014d: 	movq	(%rbp), %r9
    00000151: 	movq	%r13, 0x50(%rsp)
    00000156: 	movq	0x8(%rbp), %r8
    0000015a: 	cltd
    0000015b: 	idivl	%ebx
    0000015d: 	movl	$0x4, %edx
    00000162: 	cltq
    00000164: 	imulq	0x10(%rsp), %rax
    0000016a: 	cmpq	%rdx, %rax
    0000016d: 	cmovlq	%rdx, %rax
    00000171: 	movl	$0x70000000, %edx
    00000176: 	cmpq	%rdx, %rax
    00000179: 	cmovgq	%rdx, %rax
    0000017d: 	addq	$0x1, %rax
    00000181: 	andq	$-0x2, %rax
    00000185: 	movl	%eax, iterations(%rip)
    0000018b: 	movslq	%ebx, %rax
    0000018e: 	leaq	(%r14,%rax,8), %r10
    00000192: 	movq	%r9, %rax
    00000195: 	addq	%r8, %rax
    00000198: 	je	.Ltmp1122 # Offset: 408
    0000019a: 	testq	%r9, %r9
    0000019d: 	je	.Ltmp1123 # Offset: 413
.Ltmp1122:
    000001a3: 	movq	%r8, 0x48(%rsp)
    000001a8: 	cmpq	$0xf, %r8
    000001ac: 	ja	.Ltmp1124 # Offset: 428
    000001ae: 	cmpq	$0x1, %r8
    000001b2: 	je	.Ltmp1125 # Offset: 434
    000001b8: 	testq	%r8, %r8
    000001bb: 	jne	.Ltmp1126 # Offset: 443
    000001c1: 	movq	%r13, %rax
    000001c4: 	jmp	.Ltmp1127 # Offset: 452
    000001c9: 	nopl	(%rax) # Size: 7
.Ltmp1124:
    000001d0: 	movq	0x30(%rsp), %rsi
    000001d5: 	movq	%r15, %rdi
    000001d8: 	xorl	%edx, %edx
    000001da: 	movq	%r10, 0x28(%rsp)
    000001df: 	movq	%r8, 0x20(%rsp)
    000001e4: 	movq	%r9, 0x18(%rsp)
    000001e9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 489
    000001ee: 	movq	0x18(%rsp), %r9
    000001f3: 	movq	0x20(%rsp), %r8
    000001f8: 	movq	%rax, 0x50(%rsp)
    000001fd: 	movq	%rax, %rdi
    00000200: 	movq	0x48(%rsp), %rax
    00000205: 	movq	0x28(%rsp), %r10
    0000020a: 	movq	%rax, 0x60(%rsp)
.Ltmp1129:
    0000020f: 	movq	%r8, %rdx
    00000212: 	movq	%r9, %rsi
    00000215: 	movq	%r10, 0x18(%rsp)
    0000021a: 	callq	memcpy@PLT # Offset: 538
    0000021f: 	movq	0x48(%rsp), %r8
    00000224: 	movq	0x50(%rsp), %rax
    00000229: 	movq	0x18(%rsp), %r10
    0000022e: 	jmp	.Ltmp1127 # Offset: 558
    00000233: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1119:
    00000238: 	movl	0x3c(%rsp), %eax
    0000023c: 	movl	%eax, iterations(%rip)
    00000242: 	movq	0x78(%rsp), %rax
    00000247: 	subq	%fs:0x28, %rax
    00000250: 	jne	.Ltmp1128 # Offset: 592
    00000252: 	addq	$0x88, %rsp
    00000259: 	popq	%rbx
    0000025a: 	popq	%rbp
    0000025b: 	popq	%r12
    0000025d: 	popq	%r13
    0000025f: 	popq	%r14
    00000261: 	popq	%r15
    00000263: 	retq # Offset: 611
.Ltmp1123:
    00000264: 	leaq	DATAat0x27008(%rip), %rdi
    0000026b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 619
.Ltmp1128:
    00000270: 	callq	__stack_chk_fail@PLT # Offset: 624
.Ltmp1126:
    00000275: 	movq	%r13, %rdi
    00000278: 	jmp	.Ltmp1129 # Offset: 632
    0000027a: 	endbr64
    0000027e: 	movq	%rax, %rbp
    00000281: 	movq	0x50(%rsp), %rdi
    00000286: 	cmpq	%r13, %rdi
    00000289: 	je	.Ltmp1130 # Offset: 649
    0000028b: 	movq	0x60(%rsp), %rax
    00000290: 	leaq	0x1(%rax), %rsi
    00000294: 	callq	_ZdlPvm@PLT # Offset: 660
.Ltmp1130:
    00000299: 	movq	%rbp, %rdi
    0000029c: 	callq	_Unwind_Resume@PLT # Offset: 668
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_reverse_sizesI20BidirectionalPointerIdEPFvS1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12test_reverseIPsPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 186
  State       : disassembled
  Address     : 0xffa0
  Size        : 0x22f
  MaxSize     : 0x230
  Offset      : 0xffa0
  Section     : .text
  Orc Section : .local.text._Z12test_reverseIPsPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0185:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rcx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdx, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rsi, %r12
    00000015: 	pushq	%rbp
    00000016: 	xorl	%ebp, %ebp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rdi, %rbx
    0000001c: 	subq	$0x18, %rsp
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x8(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	callq	clock@PLT # Offset: 48
    00000035: 	movq	%rax, start_time(%rip)
    0000003c: 	movl	iterations(%rip), %eax
    00000042: 	testl	%eax, %eax
    00000044: 	jle	.Ltmp1131 # Offset: 68
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1132:
    00000050: 	movq	%r12, %rsi
    00000053: 	movq	%rbx, %rdi
    00000056: 	addl	$0x1, %ebp
    00000059: 	callq	*%r13 # Offset: 89
    0000005c: 	cmpl	%ebp, iterations(%rip)
    00000062: 	jg	.Ltmp1132 # Offset: 98
.Ltmp1131:
    00000064: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000006b: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    00000072: 	subq	$0x20, %rax
    00000076: 	cmpq	%rax, %rbp
    00000079: 	je	.Ltmp1133 # Offset: 121
    0000007f: 	leaq	0x10(%rbp), %rdi
    00000083: 	movq	0x8(%r14), %r13
    00000087: 	movq	%rdi, (%rbp)
    0000008b: 	movq	(%r14), %r15
    0000008e: 	movq	%r15, %rax
    00000091: 	addq	%r13, %rax
    00000094: 	je	.Ltmp1134 # Offset: 148
    00000096: 	testq	%r15, %r15
    00000099: 	je	.Ltmp1135 # Offset: 153
.Ltmp1134:
    0000009f: 	movq	%r13, (%rsp)
    000000a3: 	cmpq	$0xf, %r13
    000000a7: 	ja	.Ltmp1136 # Offset: 167
    000000ad: 	cmpq	$0x1, %r13
    000000b1: 	jne	.Ltmp1137 # Offset: 177
    000000b7: 	movzbl	(%r15), %eax
    000000bb: 	movb	%al, 0x10(%rbp)
.Ltmp1143:
    000000be: 	movq	%r13, 0x8(%rbp)
    000000c2: 	movb	$0x0, (%rdi,%r13)
    000000c7: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000ce: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000d5: 	addq	$0x20, %rax
    000000d9: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000e0: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000e7: 	je	.Ltmp1138 # Offset: 231
.Ltmp1144:
    000000ed: 	movq	-0x20(%rax), %rbp
    000000f1: 	callq	clock@PLT # Offset: 241
    000000f6: 	pxor	%xmm0, %xmm0
    000000fa: 	movq	%rax, end_time(%rip)
    00000101: 	movq	%rbp, %rdi
    00000104: 	subq	start_time(%rip), %rax
    0000010b: 	cvtsi2sd	%rax, %xmm0
    00000110: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000118: 	callq	_Z13record_resultdPKc # Offset: 280
    0000011d: 	leaq	0x2(%rbx), %rax
    00000121: 	jmp	.Ltmp1139 # Offset: 289
    00000123: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1141:
    00000128: 	addq	$0x2, %rax
    0000012c: 	movzwl	-0x4(%rax), %ecx
    00000130: 	cmpw	%cx, -0x2(%rax)
    00000134: 	jl	.Ltmp1140 # Offset: 308
.Ltmp1139:
    00000136: 	cmpq	%rax, %r12
    00000139: 	jne	.Ltmp1141 # Offset: 313
    0000013b: 	movq	0x8(%rsp), %rax
    00000140: 	subq	%fs:0x28, %rax
    00000149: 	jne	.Ltmp1142 # Offset: 329
    0000014f: 	addq	$0x18, %rsp
    00000153: 	popq	%rbx
    00000154: 	popq	%rbp
    00000155: 	popq	%r12
    00000157: 	popq	%r13
    00000159: 	popq	%r14
    0000015b: 	popq	%r15
    0000015d: 	retq # Offset: 349
    0000015e: 	nop # Size: 2
.Ltmp1136:
    00000160: 	movq	%rbp, %rdi
    00000163: 	movq	%rsp, %rsi
    00000166: 	xorl	%edx, %edx
    00000168: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 360
    0000016d: 	movq	%rax, (%rbp)
    00000171: 	movq	%rax, %rdi
    00000174: 	movq	(%rsp), %rax
    00000178: 	movq	%rax, 0x10(%rbp)
.Ltmp1145:
    0000017c: 	movq	%r13, %rdx
    0000017f: 	movq	%r15, %rsi
    00000182: 	callq	memcpy@PLT # Offset: 386
    00000187: 	movq	(%rsp), %r13
    0000018b: 	movq	(%rbp), %rdi
    0000018f: 	jmp	.Ltmp1143 # Offset: 399
    00000194: 	nopl	(%rax) # Size: 4
.Ltmp1140:
    00000198: 	movq	0x8(%rsp), %rax
    0000019d: 	subq	%fs:0x28, %rax
    000001a6: 	jne	.Ltmp1142 # Offset: 422
    000001a8: 	movq	(%r14), %rdx
    000001ab: 	addq	$0x18, %rsp
    000001af: 	leaq	DATAat0x271d0(%rip), %rsi
    000001b6: 	xorl	%eax, %eax
    000001b8: 	popq	%rbx
    000001b9: 	movl	$0x1, %edi
    000001be: 	popq	%rbp
    000001bf: 	popq	%r12
    000001c1: 	popq	%r13
    000001c3: 	popq	%r14
    000001c5: 	popq	%r15
    000001c7: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 455
    000001cc: 	nopl	(%rax) # Size: 4
.Ltmp1133:
    000001d0: 	movq	%r14, %rsi
    000001d3: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000001da: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 474
    000001df: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000001e6: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001ed: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000001f4: 	jne	.Ltmp1144 # Offset: 500
.Ltmp1138:
    000001fa: 	movq	-0x8(%rdx), %rax
    000001fe: 	addq	$0x200, %rax
    00000204: 	jmp	.Ltmp1144 # Offset: 516
    00000209: 	nopl	(%rax) # Size: 7
.Ltmp1137:
    00000210: 	testq	%r13, %r13
    00000213: 	je	.Ltmp1143 # Offset: 531
    00000219: 	jmp	.Ltmp1145 # Offset: 537
.Ltmp1142:
    0000021e: 	callq	__stack_chk_fail@PLT # Offset: 542
.Ltmp1135:
    00000223: 	leaq	DATAat0x27008(%rip), %rdi
    0000022a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 554
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_reverseIPsPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_reverse_sizesIPsPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 187
  State       : disassembled
  Address     : 0x101d0
  Size        : 0x2a1
  MaxSize     : 0x2b0
  Offset      : 0x101d0
  Section     : .text
  Orc Section : .local.text._Z18test_reverse_sizesIPsPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0186:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	movl	$0x1, %edi
    00000010: 	pushq	%r13
    00000012: 	pushq	%r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%rcx, %rbp
    00000018: 	pushq	%rbx
    00000019: 	movl	%esi, %ebx
    0000001b: 	subq	$0x88, %rsp
    00000022: 	movl	%esi, 0x38(%rsp)
    00000026: 	leaq	DATAat0x271e0(%rip), %rsi
    0000002d: 	movq	%rdx, 0x8(%rsp)
    00000032: 	movq	%fs:0x28, %rax
    0000003b: 	movq	%rax, 0x78(%rsp)
    00000040: 	movl	iterations(%rip), %eax
    00000046: 	movl	%eax, 0x3c(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	callq	__printf_chk@PLT # Offset: 76
    00000051: 	xorl	%eax, %eax
    00000053: 	movl	$0x1, %edi
    00000058: 	leaq	DATAat0x27210(%rip), %rsi
    0000005f: 	callq	__printf_chk@PLT # Offset: 95
    00000064: 	cmpl	$0x3, %ebx
    00000067: 	jle	.Ltmp1146 # Offset: 103
    0000006d: 	movslq	0x3c(%rsp), %rax
    00000072: 	xorl	%r12d, %r12d
    00000075: 	movl	$0x4, %ebx
    0000007a: 	leaq	0x60(%rsp), %r13
    0000007f: 	leaq	0x50(%rsp), %r15
    00000084: 	movq	%rax, 0x10(%rsp)
    00000089: 	leaq	0x48(%rsp), %rax
    0000008e: 	movq	%rax, 0x30(%rsp)
    00000093: 	jmp	.Ltmp1147 # Offset: 147
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1152:
    000000a0: 	movzbl	(%r9), %eax
    000000a4: 	movb	%al, 0x60(%rsp)
    000000a8: 	movq	%r13, %rax
.Ltmp1154:
    000000ab: 	movq	%r8, 0x58(%rsp)
    000000b0: 	movq	0x8(%rsp), %rdx
    000000b5: 	movq	%r15, %rcx
    000000b8: 	movq	%r10, %rsi
    000000bb: 	movb	$0x0, (%rax,%r8)
    000000c0: 	movq	%r14, %rdi
    000000c3: 	callq	_Z12test_reverseIPsPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 195
    000000c8: 	movq	0x50(%rsp), %rdi
    000000cd: 	cmpq	%r13, %rdi
    000000d0: 	je	.Ltmp1148 # Offset: 208
    000000d2: 	movq	0x60(%rsp), %rax
    000000d7: 	leaq	0x1(%rax), %rsi
    000000db: 	callq	_ZdlPvm@PLT # Offset: 219
.Ltmp1148:
    000000e0: 	pxor	%xmm1, %xmm1
    000000e4: 	pxor	%xmm2, %xmm2
    000000e8: 	movq	(%rbp), %rcx
    000000ec: 	movl	%ebx, %r8d
    000000ef: 	cvtsi2sd	%ebx, %xmm2
    000000f3: 	movq	results(%rip), %rax
    000000fa: 	movl	%r12d, %edx
    000000fd: 	addl	%ebx, %ebx
    000000ff: 	leaq	DATAat0x27240(%rip), %rsi
    00000106: 	movl	$0x1, %edi
    0000010b: 	addl	$0x1, %r12d
    0000010f: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000117: 	movsd	(%rax), %xmm0
    0000011b: 	movl	$0x2, %eax
    00000120: 	mulsd	%xmm2, %xmm1
    00000124: 	divsd	DATAat0x276b0(%rip), %xmm1
    0000012c: 	divsd	%xmm0, %xmm1
    00000130: 	callq	__printf_chk@PLT # Offset: 304
    00000135: 	movl	$0x0, current_test(%rip)
    0000013f: 	cmpl	%ebx, 0x38(%rsp)
    00000143: 	jl	.Ltmp1146 # Offset: 323
.Ltmp1147:
    00000149: 	movl	0x38(%rsp), %eax
    0000014d: 	movq	(%rbp), %r9
    00000151: 	movq	%r13, 0x50(%rsp)
    00000156: 	movq	0x8(%rbp), %r8
    0000015a: 	cltd
    0000015b: 	idivl	%ebx
    0000015d: 	movl	$0x4, %edx
    00000162: 	cltq
    00000164: 	imulq	0x10(%rsp), %rax
    0000016a: 	cmpq	%rdx, %rax
    0000016d: 	cmovlq	%rdx, %rax
    00000171: 	movl	$0x70000000, %edx
    00000176: 	cmpq	%rdx, %rax
    00000179: 	cmovgq	%rdx, %rax
    0000017d: 	addq	$0x1, %rax
    00000181: 	andq	$-0x2, %rax
    00000185: 	movl	%eax, iterations(%rip)
    0000018b: 	movslq	%ebx, %rax
    0000018e: 	leaq	(%r14,%rax,2), %r10
    00000192: 	movq	%r9, %rax
    00000195: 	addq	%r8, %rax
    00000198: 	je	.Ltmp1149 # Offset: 408
    0000019a: 	testq	%r9, %r9
    0000019d: 	je	.Ltmp1150 # Offset: 413
.Ltmp1149:
    000001a3: 	movq	%r8, 0x48(%rsp)
    000001a8: 	cmpq	$0xf, %r8
    000001ac: 	ja	.Ltmp1151 # Offset: 428
    000001ae: 	cmpq	$0x1, %r8
    000001b2: 	je	.Ltmp1152 # Offset: 434
    000001b8: 	testq	%r8, %r8
    000001bb: 	jne	.Ltmp1153 # Offset: 443
    000001c1: 	movq	%r13, %rax
    000001c4: 	jmp	.Ltmp1154 # Offset: 452
    000001c9: 	nopl	(%rax) # Size: 7
.Ltmp1151:
    000001d0: 	movq	0x30(%rsp), %rsi
    000001d5: 	movq	%r15, %rdi
    000001d8: 	xorl	%edx, %edx
    000001da: 	movq	%r8, 0x28(%rsp)
    000001df: 	movq	%r9, 0x20(%rsp)
    000001e4: 	movq	%r10, 0x18(%rsp)
    000001e9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 489
    000001ee: 	movq	0x18(%rsp), %r10
    000001f3: 	movq	0x20(%rsp), %r9
    000001f8: 	movq	%rax, 0x50(%rsp)
    000001fd: 	movq	%rax, %rdi
    00000200: 	movq	0x48(%rsp), %rax
    00000205: 	movq	0x28(%rsp), %r8
    0000020a: 	movq	%rax, 0x60(%rsp)
.Ltmp1156:
    0000020f: 	movq	%r8, %rdx
    00000212: 	movq	%r9, %rsi
    00000215: 	movq	%r10, 0x18(%rsp)
    0000021a: 	callq	memcpy@PLT # Offset: 538
    0000021f: 	movq	0x48(%rsp), %r8
    00000224: 	movq	0x50(%rsp), %rax
    00000229: 	movq	0x18(%rsp), %r10
    0000022e: 	jmp	.Ltmp1154 # Offset: 558
    00000233: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1146:
    00000238: 	movl	0x3c(%rsp), %eax
    0000023c: 	movl	%eax, iterations(%rip)
    00000242: 	movq	0x78(%rsp), %rax
    00000247: 	subq	%fs:0x28, %rax
    00000250: 	jne	.Ltmp1155 # Offset: 592
    00000252: 	addq	$0x88, %rsp
    00000259: 	popq	%rbx
    0000025a: 	popq	%rbp
    0000025b: 	popq	%r12
    0000025d: 	popq	%r13
    0000025f: 	popq	%r14
    00000261: 	popq	%r15
    00000263: 	retq # Offset: 611
.Ltmp1150:
    00000264: 	leaq	DATAat0x27008(%rip), %rdi
    0000026b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 619
.Ltmp1155:
    00000270: 	callq	__stack_chk_fail@PLT # Offset: 624
.Ltmp1153:
    00000275: 	movq	%r13, %rdi
    00000278: 	jmp	.Ltmp1156 # Offset: 632
    0000027a: 	endbr64
    0000027e: 	movq	%rax, %rbp
    00000281: 	movq	0x50(%rsp), %rdi
    00000286: 	cmpq	%r13, %rdi
    00000289: 	je	.Ltmp1157 # Offset: 649
    0000028b: 	movq	0x60(%rsp), %rax
    00000290: 	leaq	0x1(%rax), %rsi
    00000294: 	callq	_ZdlPvm@PLT # Offset: 660
.Ltmp1157:
    00000299: 	movq	%rbp, %rdi
    0000029c: 	callq	_Unwind_Resume@PLT # Offset: 668
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_reverse_sizesIPsPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12test_reverseIPhPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z12test_reverseIPhPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z12test_reverseIPhPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/reverse_sequence.cpp/1
  Number      : 188
  State       : disassembled
  Address     : 0x10480
  Size        : 0x227
  MaxSize     : 0x230
  Offset      : 0x10480
  Section     : .text
  Orc Section : .local.text._Z12test_reverseIPhPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0187:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	movq	%rdx, %r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	movq	%rsi, %rbp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	subq	$0x18, %rsp
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0x8(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	callq	clock@PLT # Offset: 39
    0000002c: 	movq	%rax, start_time(%rip)
    00000033: 	movl	iterations(%rip), %eax
    00000039: 	testl	%eax, %eax
    0000003b: 	jle	.Ltmp1158 # Offset: 59
    0000003d: 	cmpq	%rbp, %rbx
    00000040: 	je	.Ltmp1158 # Offset: 64
    00000042: 	xorl	%r12d, %r12d
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp1159:
    00000048: 	movq	%rbp, %rsi
    0000004b: 	movq	%rbx, %rdi
    0000004e: 	addl	$0x1, %r12d
    00000052: 	callq	"_Z21specific_fast_reverseIPhEvT_S1_St26random_access_iterator_tag.isra.0/1" # Offset: 82
    00000057: 	cmpl	iterations(%rip), %r12d
    0000005e: 	jl	.Ltmp1159 # Offset: 94
.Ltmp1158:
    00000060: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000067: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    0000006e: 	subq	$0x20, %rax
    00000072: 	cmpq	%rax, %r14
    00000075: 	je	.Ltmp1160 # Offset: 117
    0000007b: 	leaq	0x10(%r14), %rdi
    0000007f: 	movq	0x8(%r13), %r12
    00000083: 	movq	%rdi, (%r14)
    00000086: 	movq	(%r13), %r15
    0000008a: 	movq	%r15, %rax
    0000008d: 	addq	%r12, %rax
    00000090: 	je	.Ltmp1161 # Offset: 144
    00000092: 	testq	%r15, %r15
    00000095: 	je	.Ltmp1162 # Offset: 149
.Ltmp1161:
    0000009b: 	movq	%r12, (%rsp)
    0000009f: 	cmpq	$0xf, %r12
    000000a3: 	ja	.Ltmp1163 # Offset: 163
    000000a9: 	cmpq	$0x1, %r12
    000000ad: 	jne	.Ltmp1164 # Offset: 173
    000000b3: 	movzbl	(%r15), %eax
    000000b7: 	movb	%al, 0x10(%r14)
.Ltmp1170:
    000000bb: 	movq	%r12, 0x8(%r14)
    000000bf: 	movb	$0x0, (%rdi,%r12)
    000000c4: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000cb: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000d2: 	addq	$0x20, %rax
    000000d6: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000dd: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000e4: 	je	.Ltmp1165 # Offset: 228
.Ltmp1171:
    000000ea: 	movq	-0x20(%rax), %r12
    000000ee: 	callq	clock@PLT # Offset: 238
    000000f3: 	pxor	%xmm0, %xmm0
    000000f7: 	movq	%rax, end_time(%rip)
    000000fe: 	movq	%r12, %rdi
    00000101: 	subq	start_time(%rip), %rax
    00000108: 	cvtsi2sd	%rax, %xmm0
    0000010d: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000115: 	callq	_Z13record_resultdPKc # Offset: 277
    0000011a: 	leaq	0x1(%rbx), %rax
    0000011e: 	jmp	.Ltmp1166 # Offset: 286
.Ltmp1168:
    00000120: 	addq	$0x1, %rax
    00000124: 	movzbl	-0x2(%rax), %ecx
    00000128: 	cmpb	%cl, -0x1(%rax)
    0000012b: 	jb	.Ltmp1167 # Offset: 299
.Ltmp1166:
    0000012d: 	cmpq	%rax, %rbp
    00000130: 	jne	.Ltmp1168 # Offset: 304
    00000132: 	movq	0x8(%rsp), %rax
    00000137: 	subq	%fs:0x28, %rax
    00000140: 	jne	.Ltmp1169 # Offset: 320
    00000146: 	addq	$0x18, %rsp
    0000014a: 	popq	%rbx
    0000014b: 	popq	%rbp
    0000014c: 	popq	%r12
    0000014e: 	popq	%r13
    00000150: 	popq	%r14
    00000152: 	popq	%r15
    00000154: 	retq # Offset: 340
    00000155: 	nopl	(%rax) # Size: 3
.Ltmp1163:
    00000158: 	movq	%r14, %rdi
    0000015b: 	movq	%rsp, %rsi
    0000015e: 	xorl	%edx, %edx
    00000160: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 352
    00000165: 	movq	%rax, (%r14)
    00000168: 	movq	%rax, %rdi
    0000016b: 	movq	(%rsp), %rax
    0000016f: 	movq	%rax, 0x10(%r14)
.Ltmp1172:
    00000173: 	movq	%r12, %rdx
    00000176: 	movq	%r15, %rsi
    00000179: 	callq	memcpy@PLT # Offset: 377
    0000017e: 	movq	(%rsp), %r12
    00000182: 	movq	(%r14), %rdi
    00000185: 	jmp	.Ltmp1170 # Offset: 389
    0000018a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1167:
    00000190: 	movq	0x8(%rsp), %rax
    00000195: 	subq	%fs:0x28, %rax
    0000019e: 	jne	.Ltmp1169 # Offset: 414
    000001a0: 	movq	(%r13), %rdx
    000001a4: 	addq	$0x18, %rsp
    000001a8: 	leaq	DATAat0x271d0(%rip), %rsi
    000001af: 	xorl	%eax, %eax
    000001b1: 	popq	%rbx
    000001b2: 	movl	$0x1, %edi
    000001b7: 	popq	%rbp
    000001b8: 	popq	%r12
    000001ba: 	popq	%r13
    000001bc: 	popq	%r14
    000001be: 	popq	%r15
    000001c0: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 448
    000001c5: 	nopl	(%rax) # Size: 3
.Ltmp1160:
    000001c8: 	movq	%r13, %rsi
    000001cb: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000001d2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 466
    000001d7: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000001de: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001e5: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000001ec: 	jne	.Ltmp1171 # Offset: 492
.Ltmp1165:
    000001f2: 	movq	-0x8(%rdx), %rax
    000001f6: 	addq	$0x200, %rax
    000001fc: 	jmp	.Ltmp1171 # Offset: 508
    00000201: 	nopl	(%rax) # Size: 7
.Ltmp1164:
    00000208: 	testq	%r12, %r12
    0000020b: 	je	.Ltmp1170 # Offset: 523
    00000211: 	jmp	.Ltmp1172 # Offset: 529
.Ltmp1169:
    00000216: 	callq	__stack_chk_fail@PLT # Offset: 534
.Ltmp1162:
    0000021b: 	leaq	DATAat0x27008(%rip), %rdi
    00000222: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 546
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_reverseIPhPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z17test_reverse_copyIPhPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z17test_reverse_copyIPhPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z17test_reverse_copyIPhPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/reverse_sequence.cpp/1
  Number      : 189
  State       : disassembled
  Address     : 0x106b0
  Size        : 0x247
  MaxSize     : 0x250
  Offset      : 0x106b0
  Section     : .text
  Orc Section : .local.text._Z17test_reverse_copyIPhPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0188:
    00000000: 	pushq	%r15
    00000002: 	movq	%rsi, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%r8, %r14
    0000000a: 	pushq	%r13
    0000000c: 	movq	%rdi, %r13
    0000000f: 	pushq	%r12
    00000011: 	movq	%rcx, %r12
    00000014: 	pushq	%rbp
    00000015: 	pushq	%rbx
    00000016: 	movq	%rdx, %rbx
    00000019: 	subq	$0x18, %rsp
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	cmpq	%rdx, %rcx
    00000030: 	je	.Ltmp1173 # Offset: 48
    00000032: 	movq	%rcx, %rdx
    00000035: 	movl	$0x63, %esi
    0000003a: 	movq	%rbx, %rdi
    0000003d: 	subq	%rbx, %rdx
    00000040: 	callq	memset@PLT # Offset: 64
.Ltmp1173:
    00000045: 	callq	clock@PLT # Offset: 69
    0000004a: 	xorl	%ebp, %ebp
    0000004c: 	movq	%rax, start_time(%rip)
    00000053: 	movl	iterations(%rip), %eax
    00000059: 	testl	%eax, %eax
    0000005b: 	jle	.Ltmp1174 # Offset: 91
    0000005d: 	nopl	(%rax) # Size: 3
.Ltmp1175:
    00000060: 	movq	%rbx, %rdx
    00000063: 	movq	%r15, %rsi
    00000066: 	movq	%r13, %rdi
    00000069: 	addl	$0x1, %ebp
    0000006c: 	callq	_Z18fast_reverse_copy4IPhS0_EvT_S1_T0_ # Offset: 108
    00000071: 	cmpl	iterations(%rip), %ebp
    00000077: 	jl	.Ltmp1175 # Offset: 119
.Ltmp1174:
    00000079: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000080: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    00000087: 	subq	$0x20, %rax
    0000008b: 	cmpq	%rax, %rbp
    0000008e: 	je	.Ltmp1176 # Offset: 142
    00000094: 	leaq	0x10(%rbp), %rdi
    00000098: 	movq	0x8(%r14), %r13
    0000009c: 	movq	%rdi, (%rbp)
    000000a0: 	movq	(%r14), %r15
    000000a3: 	movq	%r15, %rax
    000000a6: 	addq	%r13, %rax
    000000a9: 	je	.Ltmp1177 # Offset: 169
    000000ab: 	testq	%r15, %r15
    000000ae: 	je	.Ltmp1178 # Offset: 174
.Ltmp1177:
    000000b4: 	movq	%r13, (%rsp)
    000000b8: 	cmpq	$0xf, %r13
    000000bc: 	ja	.Ltmp1179 # Offset: 188
    000000c2: 	cmpq	$0x1, %r13
    000000c6: 	jne	.Ltmp1180 # Offset: 198
    000000cc: 	movzbl	(%r15), %eax
    000000d0: 	movb	%al, 0x10(%rbp)
.Ltmp1186:
    000000d3: 	movq	%r13, 0x8(%rbp)
    000000d7: 	movb	$0x0, (%rdi,%r13)
    000000dc: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000e3: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000ea: 	addq	$0x20, %rax
    000000ee: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000f5: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000fc: 	je	.Ltmp1181 # Offset: 252
.Ltmp1187:
    00000102: 	movq	-0x20(%rax), %rbp
    00000106: 	callq	clock@PLT # Offset: 262
    0000010b: 	pxor	%xmm0, %xmm0
    0000010f: 	movq	%rax, end_time(%rip)
    00000116: 	movq	%rbp, %rdi
    00000119: 	subq	start_time(%rip), %rax
    00000120: 	cvtsi2sd	%rax, %xmm0
    00000125: 	divsd	DATAat0x276b0(%rip), %xmm0
    0000012d: 	callq	_Z13record_resultdPKc # Offset: 301
    00000132: 	leaq	-0x1(%r12), %rax
    00000137: 	jmp	.Ltmp1182 # Offset: 311
    00000139: 	nopl	(%rax) # Size: 7
.Ltmp1184:
    00000140: 	addq	$0x1, %rbx
    00000144: 	movzbl	(%rbx), %ecx
    00000147: 	cmpb	%cl, -0x1(%rbx)
    0000014a: 	jb	.Ltmp1183 # Offset: 330
.Ltmp1182:
    0000014c: 	cmpq	%rax, %rbx
    0000014f: 	jne	.Ltmp1184 # Offset: 335
    00000151: 	movq	0x8(%rsp), %rax
    00000156: 	subq	%fs:0x28, %rax
    0000015f: 	jne	.Ltmp1185 # Offset: 351
    00000165: 	addq	$0x18, %rsp
    00000169: 	popq	%rbx
    0000016a: 	popq	%rbp
    0000016b: 	popq	%r12
    0000016d: 	popq	%r13
    0000016f: 	popq	%r14
    00000171: 	popq	%r15
    00000173: 	retq # Offset: 371
    00000174: 	nopl	(%rax) # Size: 4
.Ltmp1179:
    00000178: 	movq	%rbp, %rdi
    0000017b: 	movq	%rsp, %rsi
    0000017e: 	xorl	%edx, %edx
    00000180: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 384
    00000185: 	movq	%rax, (%rbp)
    00000189: 	movq	%rax, %rdi
    0000018c: 	movq	(%rsp), %rax
    00000190: 	movq	%rax, 0x10(%rbp)
.Ltmp1188:
    00000194: 	movq	%r13, %rdx
    00000197: 	movq	%r15, %rsi
    0000019a: 	callq	memcpy@PLT # Offset: 410
    0000019f: 	movq	(%rsp), %r13
    000001a3: 	movq	(%rbp), %rdi
    000001a7: 	jmp	.Ltmp1186 # Offset: 423
    000001ac: 	nopl	(%rax) # Size: 4
.Ltmp1183:
    000001b0: 	movq	0x8(%rsp), %rax
    000001b5: 	subq	%fs:0x28, %rax
    000001be: 	jne	.Ltmp1185 # Offset: 446
    000001c0: 	movq	(%r14), %rdx
    000001c3: 	addq	$0x18, %rsp
    000001c7: 	leaq	DATAat0x271d0(%rip), %rsi
    000001ce: 	xorl	%eax, %eax
    000001d0: 	popq	%rbx
    000001d1: 	movl	$0x1, %edi
    000001d6: 	popq	%rbp
    000001d7: 	popq	%r12
    000001d9: 	popq	%r13
    000001db: 	popq	%r14
    000001dd: 	popq	%r15
    000001df: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 479
    000001e4: 	nopl	(%rax) # Size: 4
.Ltmp1176:
    000001e8: 	movq	%r14, %rsi
    000001eb: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000001f2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 498
    000001f7: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000001fe: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000205: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000020c: 	jne	.Ltmp1187 # Offset: 524
.Ltmp1181:
    00000212: 	movq	-0x8(%rdx), %rax
    00000216: 	addq	$0x200, %rax
    0000021c: 	jmp	.Ltmp1187 # Offset: 540
    00000221: 	nopl	(%rax) # Size: 7
.Ltmp1180:
    00000228: 	testq	%r13, %r13
    0000022b: 	je	.Ltmp1186 # Offset: 555
    00000231: 	jmp	.Ltmp1188 # Offset: 561
.Ltmp1185:
    00000236: 	callq	__stack_chk_fail@PLT # Offset: 566
.Ltmp1178:
    0000023b: 	leaq	DATAat0x27008(%rip), %rdi
    00000242: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 578
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_reverse_copyIPhPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z17test_reverse_copyIPfPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 190
  State       : disassembled
  Address     : 0x10900
  Size        : 0x2cf
  MaxSize     : 0x2d0
  Offset      : 0x10900
  Section     : .text
  Orc Section : .local.text._Z17test_reverse_copyIPfPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0189:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rcx, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdx, %rbx
    0000001d: 	subq	$0x28, %rsp
    00000021: 	movq	%r9, 0x8(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x18(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rcx, %rdx
    00000039: 	je	.Ltmp1189 # Offset: 57
    0000003b: 	movq	%rdx, %rax
    0000003e: 	leaq	-0x4(%rcx), %rdx
    00000042: 	subq	%rbx, %rdx
    00000045: 	movq	%rdx, %rcx
    00000048: 	shrq	$0x2, %rcx
    0000004c: 	addq	$0x1, %rcx
    00000050: 	cmpq	$0x8, %rdx
    00000054: 	jbe	.Ltmp1190 # Offset: 84
    00000056: 	movq	%rcx, %rdx
    00000059: 	movaps	DATAat0x27590(%rip), %xmm0
    00000060: 	shrq	$0x2, %rdx
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rbx, %rdx
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1191:
    00000070: 	movups	%xmm0, (%rax)
    00000073: 	addq	$0x10, %rax
    00000077: 	cmpq	%rdx, %rax
    0000007a: 	jne	.Ltmp1191 # Offset: 122
    0000007c: 	movq	%rcx, %rdx
    0000007f: 	andq	$-0x4, %rdx
    00000083: 	leaq	(%rbx,%rdx,4), %rax
    00000087: 	cmpq	%rdx, %rcx
    0000008a: 	je	.Ltmp1189 # Offset: 138
.Ltmp1190:
    0000008c: 	movss	DATAat0x27590(%rip), %xmm0
    00000094: 	leaq	0x4(%rax), %rdx
    00000098: 	movss	%xmm0, (%rax)
    0000009c: 	cmpq	%rdx, %rbp
    0000009f: 	je	.Ltmp1189 # Offset: 159
    000000a1: 	leaq	0x8(%rax), %rdx
    000000a5: 	movss	%xmm0, 0x4(%rax)
    000000aa: 	cmpq	%rdx, %rbp
    000000ad: 	je	.Ltmp1189 # Offset: 173
    000000af: 	movss	%xmm0, 0x8(%rax)
.Ltmp1189:
    000000b4: 	callq	clock@PLT # Offset: 180
    000000b9: 	xorl	%r14d, %r14d
    000000bc: 	movq	%rax, start_time(%rip)
    000000c3: 	movl	iterations(%rip), %eax
    000000c9: 	testl	%eax, %eax
    000000cb: 	jle	.Ltmp1192 # Offset: 203
    000000cd: 	nopl	(%rax) # Size: 3
.Ltmp1193:
    000000d0: 	movq	%rbx, %rdx
    000000d3: 	movq	%r13, %rsi
    000000d6: 	movq	%r12, %rdi
    000000d9: 	addl	$0x1, %r14d
    000000dd: 	callq	*%r15 # Offset: 221
    000000e0: 	cmpl	%r14d, iterations(%rip)
    000000e7: 	jg	.Ltmp1193 # Offset: 231
.Ltmp1192:
    000000e9: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000f0: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    000000f7: 	subq	$0x20, %rax
    000000fb: 	cmpq	%rax, %r13
    000000fe: 	je	.Ltmp1194 # Offset: 254
    00000104: 	movq	0x8(%rsp), %rax
    00000109: 	leaq	0x10(%r13), %rdi
    0000010d: 	movq	%rdi, (%r13)
    00000111: 	movq	(%rax), %r15
    00000114: 	movq	0x8(%rax), %r12
    00000118: 	movq	%r15, %rax
    0000011b: 	addq	%r12, %rax
    0000011e: 	je	.Ltmp1195 # Offset: 286
    00000120: 	testq	%r15, %r15
    00000123: 	je	.Ltmp1196 # Offset: 291
.Ltmp1195:
    00000129: 	movq	%r12, 0x10(%rsp)
    0000012e: 	cmpq	$0xf, %r12
    00000132: 	ja	.Ltmp1197 # Offset: 306
    00000138: 	cmpq	$0x1, %r12
    0000013c: 	jne	.Ltmp1198 # Offset: 316
    00000142: 	movzbl	(%r15), %eax
    00000146: 	movb	%al, 0x10(%r13)
.Ltmp1204:
    0000014a: 	movq	%r12, 0x8(%r13)
    0000014e: 	movb	$0x0, (%rdi,%r12)
    00000153: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000015a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000161: 	addq	$0x20, %rax
    00000165: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000016c: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000173: 	je	.Ltmp1199 # Offset: 371
.Ltmp1205:
    00000179: 	movq	-0x20(%rax), %r12
    0000017d: 	callq	clock@PLT # Offset: 381
    00000182: 	pxor	%xmm0, %xmm0
    00000186: 	movq	%rax, end_time(%rip)
    0000018d: 	movq	%r12, %rdi
    00000190: 	subq	start_time(%rip), %rax
    00000197: 	cvtsi2sd	%rax, %xmm0
    0000019c: 	divsd	DATAat0x276b0(%rip), %xmm0
    000001a4: 	callq	_Z13record_resultdPKc # Offset: 420
    000001a9: 	leaq	0x4(%rbx), %rax
    000001ad: 	jmp	.Ltmp1200 # Offset: 429
    000001af: 	nop # Size: 1
.Ltmp1202:
    000001b0: 	movss	-0x4(%rax), %xmm0
    000001b5: 	movss	(%rax), %xmm1
    000001b9: 	addq	$0x4, %rax
    000001bd: 	comiss	%xmm0, %xmm1
    000001c0: 	ja	.Ltmp1201 # Offset: 448
.Ltmp1200:
    000001c2: 	cmpq	%rax, %rbp
    000001c5: 	jne	.Ltmp1202 # Offset: 453
    000001c7: 	movq	0x18(%rsp), %rax
    000001cc: 	subq	%fs:0x28, %rax
    000001d5: 	jne	.Ltmp1203 # Offset: 469
    000001db: 	addq	$0x28, %rsp
    000001df: 	popq	%rbx
    000001e0: 	popq	%rbp
    000001e1: 	popq	%r12
    000001e3: 	popq	%r13
    000001e5: 	popq	%r14
    000001e7: 	popq	%r15
    000001e9: 	retq # Offset: 489
    000001ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1197:
    000001f0: 	movq	%r13, %rdi
    000001f3: 	leaq	0x10(%rsp), %rsi
    000001f8: 	xorl	%edx, %edx
    000001fa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 506
    000001ff: 	movq	%rax, (%r13)
    00000203: 	movq	%rax, %rdi
    00000206: 	movq	0x10(%rsp), %rax
    0000020b: 	movq	%rax, 0x10(%r13)
.Ltmp1206:
    0000020f: 	movq	%r12, %rdx
    00000212: 	movq	%r15, %rsi
    00000215: 	callq	memcpy@PLT # Offset: 533
    0000021a: 	movq	0x10(%rsp), %r12
    0000021f: 	movq	(%r13), %rdi
    00000223: 	jmp	.Ltmp1204 # Offset: 547
    00000228: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1201:
    00000230: 	movq	0x18(%rsp), %rax
    00000235: 	subq	%fs:0x28, %rax
    0000023e: 	jne	.Ltmp1203 # Offset: 574
    00000240: 	movq	0x8(%rsp), %rax
    00000245: 	leaq	DATAat0x271d0(%rip), %rsi
    0000024c: 	movl	$0x1, %edi
    00000251: 	movq	(%rax), %rdx
    00000254: 	addq	$0x28, %rsp
    00000258: 	xorl	%eax, %eax
    0000025a: 	popq	%rbx
    0000025b: 	popq	%rbp
    0000025c: 	popq	%r12
    0000025e: 	popq	%r13
    00000260: 	popq	%r14
    00000262: 	popq	%r15
    00000264: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 612
    00000269: 	nopl	(%rax) # Size: 7
.Ltmp1194:
    00000270: 	movq	0x8(%rsp), %rsi
    00000275: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000027c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 636
    00000281: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000288: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000028f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000296: 	jne	.Ltmp1205 # Offset: 662
.Ltmp1199:
    0000029c: 	movq	-0x8(%rdx), %rax
    000002a0: 	addq	$0x200, %rax
    000002a6: 	jmp	.Ltmp1205 # Offset: 678
    000002ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1198:
    000002b0: 	testq	%r12, %r12
    000002b3: 	je	.Ltmp1204 # Offset: 691
    000002b9: 	jmp	.Ltmp1206 # Offset: 697
.Ltmp1203:
    000002be: 	callq	__stack_chk_fail@PLT # Offset: 702
.Ltmp1196:
    000002c3: 	leaq	DATAat0x27008(%rip), %rdi
    000002ca: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 714
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_reverse_copyIPfPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23test_reverse_copy_sizesIPfPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 191
  State       : disassembled
  Address     : 0x10bd0
  Size        : 0x2cc
  MaxSize     : 0x2d0
  Offset      : 0x10bd0
  Section     : .text
  Orc Section : .local.text._Z23test_reverse_copy_sizesIPfPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0190:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	leaq	DATAat0x271e0(%rip), %rsi
    00000010: 	pushq	%r14
    00000012: 	movq	%rdi, %r14
    00000015: 	movl	$0x1, %edi
    0000001a: 	pushq	%r13
    0000001c: 	pushq	%r12
    0000001e: 	pushq	%rbp
    0000001f: 	movq	%r8, %rbp
    00000022: 	pushq	%rbx
    00000023: 	movl	%edx, %ebx
    00000025: 	subq	$0x98, %rsp
    0000002c: 	movl	%edx, 0x48(%rsp)
    00000030: 	movq	%rcx, 0x10(%rsp)
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x88(%rsp)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	movl	%eax, 0x4c(%rsp)
    00000050: 	xorl	%eax, %eax
    00000052: 	callq	__printf_chk@PLT # Offset: 82
    00000057: 	xorl	%eax, %eax
    00000059: 	movl	$0x1, %edi
    0000005e: 	leaq	DATAat0x27210(%rip), %rsi
    00000065: 	callq	__printf_chk@PLT # Offset: 101
    0000006a: 	cmpl	$0x3, %ebx
    0000006d: 	jle	.Ltmp1207 # Offset: 109
    00000073: 	movslq	0x4c(%rsp), %rax
    00000078: 	xorl	%r12d, %r12d
    0000007b: 	movl	$0x4, %ebx
    00000080: 	leaq	0x70(%rsp), %r13
    00000085: 	movq	%rax, 0x18(%rsp)
    0000008a: 	leaq	0x60(%rsp), %rax
    0000008f: 	movq	%rax, 0x8(%rsp)
    00000094: 	leaq	0x58(%rsp), %rax
    00000099: 	movq	%rax, 0x40(%rsp)
    0000009e: 	jmp	.Ltmp1208 # Offset: 158
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1213:
    000000a8: 	movzbl	(%r9), %eax
    000000ac: 	movb	%al, 0x70(%rsp)
    000000b0: 	movq	%r13, %rax
.Ltmp1215:
    000000b3: 	movq	%r8, 0x68(%rsp)
    000000b8: 	movq	0x8(%rsp), %r9
    000000bd: 	movq	%r15, %rdx
    000000c0: 	movq	%r10, %rsi
    000000c3: 	movb	$0x0, (%rax,%r8)
    000000c8: 	movq	0x10(%rsp), %r8
    000000cd: 	movq	%r14, %rdi
    000000d0: 	callq	_Z17test_reverse_copyIPfPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 208
    000000d5: 	movq	0x60(%rsp), %rdi
    000000da: 	cmpq	%r13, %rdi
    000000dd: 	je	.Ltmp1209 # Offset: 221
    000000df: 	movq	0x70(%rsp), %rax
    000000e4: 	leaq	0x1(%rax), %rsi
    000000e8: 	callq	_ZdlPvm@PLT # Offset: 232
.Ltmp1209:
    000000ed: 	pxor	%xmm1, %xmm1
    000000f1: 	pxor	%xmm2, %xmm2
    000000f5: 	movq	(%rbp), %rcx
    000000f9: 	movl	%ebx, %r8d
    000000fc: 	cvtsi2sd	%ebx, %xmm2
    00000100: 	movq	results(%rip), %rax
    00000107: 	movl	%r12d, %edx
    0000010a: 	addl	%ebx, %ebx
    0000010c: 	leaq	DATAat0x27240(%rip), %rsi
    00000113: 	movl	$0x1, %edi
    00000118: 	addl	$0x1, %r12d
    0000011c: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000124: 	movsd	(%rax), %xmm0
    00000128: 	movl	$0x2, %eax
    0000012d: 	mulsd	%xmm2, %xmm1
    00000131: 	divsd	DATAat0x276b0(%rip), %xmm1
    00000139: 	divsd	%xmm0, %xmm1
    0000013d: 	callq	__printf_chk@PLT # Offset: 317
    00000142: 	movl	$0x0, current_test(%rip)
    0000014c: 	cmpl	%ebx, 0x48(%rsp)
    00000150: 	jl	.Ltmp1207 # Offset: 336
.Ltmp1208:
    00000156: 	movl	0x48(%rsp), %eax
    0000015a: 	movq	(%rbp), %r9
    0000015e: 	movq	%r13, 0x60(%rsp)
    00000163: 	movq	0x8(%rbp), %r8
    00000167: 	cltd
    00000168: 	idivl	%ebx
    0000016a: 	movl	$0x4, %edx
    0000016f: 	cltq
    00000171: 	imulq	0x18(%rsp), %rax
    00000177: 	cmpq	%rdx, %rax
    0000017a: 	cmovlq	%rdx, %rax
    0000017e: 	movl	$0x70000000, %edx
    00000183: 	cmpq	%rdx, %rax
    00000186: 	cmovgq	%rdx, %rax
    0000018a: 	addq	$0x1, %rax
    0000018e: 	andq	$-0x2, %rax
    00000192: 	movl	%eax, iterations(%rip)
    00000198: 	movslq	%ebx, %rax
    0000019b: 	shlq	$0x2, %rax
    0000019f: 	leaq	(%r14,%rax), %r10
    000001a3: 	leaq	(%r15,%rax), %rcx
    000001a7: 	movq	%r9, %rax
    000001aa: 	addq	%r8, %rax
    000001ad: 	je	.Ltmp1210 # Offset: 429
    000001af: 	testq	%r9, %r9
    000001b2: 	je	.Ltmp1211 # Offset: 434
.Ltmp1210:
    000001b8: 	movq	%r8, 0x58(%rsp)
    000001bd: 	cmpq	$0xf, %r8
    000001c1: 	ja	.Ltmp1212 # Offset: 449
    000001c3: 	cmpq	$0x1, %r8
    000001c7: 	je	.Ltmp1213 # Offset: 455
    000001cd: 	testq	%r8, %r8
    000001d0: 	jne	.Ltmp1214 # Offset: 464
    000001d6: 	movq	%r13, %rax
    000001d9: 	jmp	.Ltmp1215 # Offset: 473
    000001de: 	nop # Size: 2
.Ltmp1212:
    000001e0: 	movq	0x8(%rsp), %rdi
    000001e5: 	movq	0x40(%rsp), %rsi
    000001ea: 	xorl	%edx, %edx
    000001ec: 	movq	%r8, 0x38(%rsp)
    000001f1: 	movq	%r9, 0x30(%rsp)
    000001f6: 	movq	%rcx, 0x28(%rsp)
    000001fb: 	movq	%r10, 0x20(%rsp)
    00000200: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 512
    00000205: 	movq	0x20(%rsp), %r10
    0000020a: 	movq	0x28(%rsp), %rcx
    0000020f: 	movq	%rax, 0x60(%rsp)
    00000214: 	movq	%rax, %rdi
    00000217: 	movq	0x58(%rsp), %rax
    0000021c: 	movq	0x30(%rsp), %r9
    00000221: 	movq	0x38(%rsp), %r8
    00000226: 	movq	%rax, 0x70(%rsp)
.Ltmp1217:
    0000022b: 	movq	%r8, %rdx
    0000022e: 	movq	%r9, %rsi
    00000231: 	movq	%rcx, 0x28(%rsp)
    00000236: 	movq	%r10, 0x20(%rsp)
    0000023b: 	callq	memcpy@PLT # Offset: 571
    00000240: 	movq	0x58(%rsp), %r8
    00000245: 	movq	0x60(%rsp), %rax
    0000024a: 	movq	0x20(%rsp), %r10
    0000024f: 	movq	0x28(%rsp), %rcx
    00000254: 	jmp	.Ltmp1215 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp1207:
    00000260: 	movl	0x4c(%rsp), %eax
    00000264: 	movl	%eax, iterations(%rip)
    0000026a: 	movq	0x88(%rsp), %rax
    00000272: 	subq	%fs:0x28, %rax
    0000027b: 	jne	.Ltmp1216 # Offset: 635
    0000027d: 	addq	$0x98, %rsp
    00000284: 	popq	%rbx
    00000285: 	popq	%rbp
    00000286: 	popq	%r12
    00000288: 	popq	%r13
    0000028a: 	popq	%r14
    0000028c: 	popq	%r15
    0000028e: 	retq # Offset: 654
.Ltmp1211:
    0000028f: 	leaq	DATAat0x27008(%rip), %rdi
    00000296: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 662
.Ltmp1216:
    0000029b: 	callq	__stack_chk_fail@PLT # Offset: 667
.Ltmp1214:
    000002a0: 	movq	%r13, %rdi
    000002a3: 	jmp	.Ltmp1217 # Offset: 675
    000002a5: 	endbr64
    000002a9: 	movq	%rax, %rbp
    000002ac: 	movq	0x60(%rsp), %rdi
    000002b1: 	cmpq	%r13, %rdi
    000002b4: 	je	.Ltmp1218 # Offset: 692
    000002b6: 	movq	0x70(%rsp), %rax
    000002bb: 	leaq	0x1(%rax), %rsi
    000002bf: 	callq	_ZdlPvm@PLT # Offset: 703
.Ltmp1218:
    000002c4: 	movq	%rbp, %rdi
    000002c7: 	callq	_Unwind_Resume@PLT # Offset: 711
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_reverse_copy_sizesIPfPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_reverse_copyIPmPFS0_S0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 192
  State       : disassembled
  Address     : 0x10ea0
  Size        : 0x2af
  MaxSize     : 0x2b0
  Offset      : 0x10ea0
  Section     : .text
  Orc Section : .local.text._Z17test_reverse_copyIPmPFS0_S0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0191:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rcx, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdx, %rbx
    0000001d: 	subq	$0x28, %rsp
    00000021: 	movq	%r9, 0x8(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x18(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rcx, %rdx
    00000039: 	je	.Ltmp1219 # Offset: 57
    0000003b: 	movq	%rdx, %rax
    0000003e: 	movq	%rcx, %rdx
    00000041: 	subq	%rbx, %rdx
    00000044: 	leaq	-0x8(%rdx), %rcx
    00000048: 	shrq	$0x3, %rcx
    0000004c: 	addq	$0x1, %rcx
    00000050: 	cmpq	$0x8, %rdx
    00000054: 	je	.Ltmp1220 # Offset: 84
    00000056: 	movq	%rcx, %rdx
    00000059: 	movdqa	DATAat0x275a0(%rip), %xmm0
    00000061: 	shrq	%rdx
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rbx, %rdx
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1221:
    00000070: 	movups	%xmm0, (%rax)
    00000073: 	addq	$0x10, %rax
    00000077: 	cmpq	%rdx, %rax
    0000007a: 	jne	.Ltmp1221 # Offset: 122
    0000007c: 	movq	%rcx, %rdx
    0000007f: 	andq	$-0x2, %rdx
    00000083: 	leaq	(%rbx,%rdx,8), %rax
    00000087: 	cmpq	%rdx, %rcx
    0000008a: 	je	.Ltmp1219 # Offset: 138
.Ltmp1220:
    0000008c: 	movq	$0x63, (%rax)
.Ltmp1219:
    00000093: 	callq	clock@PLT # Offset: 147
    00000098: 	xorl	%r14d, %r14d
    0000009b: 	movq	%rax, start_time(%rip)
    000000a2: 	movl	iterations(%rip), %eax
    000000a8: 	testl	%eax, %eax
    000000aa: 	jle	.Ltmp1222 # Offset: 170
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp1223:
    000000b0: 	movq	%rbx, %rdx
    000000b3: 	movq	%r13, %rsi
    000000b6: 	movq	%r12, %rdi
    000000b9: 	addl	$0x1, %r14d
    000000bd: 	callq	*%r15 # Offset: 189
    000000c0: 	cmpl	%r14d, iterations(%rip)
    000000c7: 	jg	.Ltmp1223 # Offset: 199
.Ltmp1222:
    000000c9: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000d0: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    000000d7: 	subq	$0x20, %rax
    000000db: 	cmpq	%rax, %r13
    000000de: 	je	.Ltmp1224 # Offset: 222
    000000e4: 	movq	0x8(%rsp), %rax
    000000e9: 	leaq	0x10(%r13), %rdi
    000000ed: 	movq	%rdi, (%r13)
    000000f1: 	movq	(%rax), %r15
    000000f4: 	movq	0x8(%rax), %r12
    000000f8: 	movq	%r15, %rax
    000000fb: 	addq	%r12, %rax
    000000fe: 	je	.Ltmp1225 # Offset: 254
    00000100: 	testq	%r15, %r15
    00000103: 	je	.Ltmp1226 # Offset: 259
.Ltmp1225:
    00000109: 	movq	%r12, 0x10(%rsp)
    0000010e: 	cmpq	$0xf, %r12
    00000112: 	ja	.Ltmp1227 # Offset: 274
    00000118: 	cmpq	$0x1, %r12
    0000011c: 	jne	.Ltmp1228 # Offset: 284
    00000122: 	movzbl	(%r15), %eax
    00000126: 	movb	%al, 0x10(%r13)
.Ltmp1234:
    0000012a: 	movq	%r12, 0x8(%r13)
    0000012e: 	movb	$0x0, (%rdi,%r12)
    00000133: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000013a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000141: 	addq	$0x20, %rax
    00000145: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000014c: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000153: 	je	.Ltmp1229 # Offset: 339
.Ltmp1235:
    00000159: 	movq	-0x20(%rax), %r12
    0000015d: 	callq	clock@PLT # Offset: 349
    00000162: 	pxor	%xmm0, %xmm0
    00000166: 	movq	%rax, end_time(%rip)
    0000016d: 	movq	%r12, %rdi
    00000170: 	subq	start_time(%rip), %rax
    00000177: 	cvtsi2sd	%rax, %xmm0
    0000017c: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000184: 	callq	_Z13record_resultdPKc # Offset: 388
    00000189: 	leaq	0x8(%rbx), %rax
    0000018d: 	jmp	.Ltmp1230 # Offset: 397
    0000018f: 	nop # Size: 1
.Ltmp1232:
    00000190: 	movq	-0x8(%rax), %rdx
    00000194: 	addq	$0x8, %rax
    00000198: 	cmpq	-0x8(%rax), %rdx
    0000019c: 	jb	.Ltmp1231 # Offset: 412
.Ltmp1230:
    0000019e: 	cmpq	%rax, %rbp
    000001a1: 	jne	.Ltmp1232 # Offset: 417
    000001a3: 	movq	0x18(%rsp), %rax
    000001a8: 	subq	%fs:0x28, %rax
    000001b1: 	jne	.Ltmp1233 # Offset: 433
    000001b7: 	addq	$0x28, %rsp
    000001bb: 	popq	%rbx
    000001bc: 	popq	%rbp
    000001bd: 	popq	%r12
    000001bf: 	popq	%r13
    000001c1: 	popq	%r14
    000001c3: 	popq	%r15
    000001c5: 	retq # Offset: 453
    000001c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1227:
    000001d0: 	movq	%r13, %rdi
    000001d3: 	leaq	0x10(%rsp), %rsi
    000001d8: 	xorl	%edx, %edx
    000001da: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 474
    000001df: 	movq	%rax, (%r13)
    000001e3: 	movq	%rax, %rdi
    000001e6: 	movq	0x10(%rsp), %rax
    000001eb: 	movq	%rax, 0x10(%r13)
.Ltmp1236:
    000001ef: 	movq	%r12, %rdx
    000001f2: 	movq	%r15, %rsi
    000001f5: 	callq	memcpy@PLT # Offset: 501
    000001fa: 	movq	0x10(%rsp), %r12
    000001ff: 	movq	(%r13), %rdi
    00000203: 	jmp	.Ltmp1234 # Offset: 515
    00000208: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1231:
    00000210: 	movq	0x18(%rsp), %rax
    00000215: 	subq	%fs:0x28, %rax
    0000021e: 	jne	.Ltmp1233 # Offset: 542
    00000220: 	movq	0x8(%rsp), %rax
    00000225: 	leaq	DATAat0x271d0(%rip), %rsi
    0000022c: 	movl	$0x1, %edi
    00000231: 	movq	(%rax), %rdx
    00000234: 	addq	$0x28, %rsp
    00000238: 	xorl	%eax, %eax
    0000023a: 	popq	%rbx
    0000023b: 	popq	%rbp
    0000023c: 	popq	%r12
    0000023e: 	popq	%r13
    00000240: 	popq	%r14
    00000242: 	popq	%r15
    00000244: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 580
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp1224:
    00000250: 	movq	0x8(%rsp), %rsi
    00000255: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000025c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 604
    00000261: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000268: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000026f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000276: 	jne	.Ltmp1235 # Offset: 630
.Ltmp1229:
    0000027c: 	movq	-0x8(%rdx), %rax
    00000280: 	addq	$0x200, %rax
    00000286: 	jmp	.Ltmp1235 # Offset: 646
    0000028b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1228:
    00000290: 	testq	%r12, %r12
    00000293: 	je	.Ltmp1234 # Offset: 659
    00000299: 	jmp	.Ltmp1236 # Offset: 665
.Ltmp1233:
    0000029e: 	callq	__stack_chk_fail@PLT # Offset: 670
.Ltmp1226:
    000002a3: 	leaq	DATAat0x27008(%rip), %rdi
    000002aa: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 682
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_reverse_copyIPmPFS0_S0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23test_reverse_copy_sizesIPmPFS0_S0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 193
  State       : disassembled
  Address     : 0x11150
  Size        : 0x2cc
  MaxSize     : 0x2d0
  Offset      : 0x11150
  Section     : .text
  Orc Section : .local.text._Z23test_reverse_copy_sizesIPmPFS0_S0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0192:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	leaq	DATAat0x271e0(%rip), %rsi
    00000010: 	pushq	%r14
    00000012: 	movq	%rdi, %r14
    00000015: 	movl	$0x1, %edi
    0000001a: 	pushq	%r13
    0000001c: 	pushq	%r12
    0000001e: 	pushq	%rbp
    0000001f: 	movq	%r8, %rbp
    00000022: 	pushq	%rbx
    00000023: 	movl	%edx, %ebx
    00000025: 	subq	$0x98, %rsp
    0000002c: 	movl	%edx, 0x48(%rsp)
    00000030: 	movq	%rcx, 0x10(%rsp)
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x88(%rsp)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	movl	%eax, 0x4c(%rsp)
    00000050: 	xorl	%eax, %eax
    00000052: 	callq	__printf_chk@PLT # Offset: 82
    00000057: 	xorl	%eax, %eax
    00000059: 	movl	$0x1, %edi
    0000005e: 	leaq	DATAat0x27210(%rip), %rsi
    00000065: 	callq	__printf_chk@PLT # Offset: 101
    0000006a: 	cmpl	$0x3, %ebx
    0000006d: 	jle	.Ltmp1237 # Offset: 109
    00000073: 	movslq	0x4c(%rsp), %rax
    00000078: 	xorl	%r12d, %r12d
    0000007b: 	movl	$0x4, %ebx
    00000080: 	leaq	0x70(%rsp), %r13
    00000085: 	movq	%rax, 0x18(%rsp)
    0000008a: 	leaq	0x60(%rsp), %rax
    0000008f: 	movq	%rax, 0x8(%rsp)
    00000094: 	leaq	0x58(%rsp), %rax
    00000099: 	movq	%rax, 0x40(%rsp)
    0000009e: 	jmp	.Ltmp1238 # Offset: 158
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1243:
    000000a8: 	movzbl	(%r9), %eax
    000000ac: 	movb	%al, 0x70(%rsp)
    000000b0: 	movq	%r13, %rax
.Ltmp1245:
    000000b3: 	movq	%r8, 0x68(%rsp)
    000000b8: 	movq	0x8(%rsp), %r9
    000000bd: 	movq	%r15, %rdx
    000000c0: 	movq	%r10, %rsi
    000000c3: 	movb	$0x0, (%rax,%r8)
    000000c8: 	movq	0x10(%rsp), %r8
    000000cd: 	movq	%r14, %rdi
    000000d0: 	callq	_Z17test_reverse_copyIPmPFS0_S0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 208
    000000d5: 	movq	0x60(%rsp), %rdi
    000000da: 	cmpq	%r13, %rdi
    000000dd: 	je	.Ltmp1239 # Offset: 221
    000000df: 	movq	0x70(%rsp), %rax
    000000e4: 	leaq	0x1(%rax), %rsi
    000000e8: 	callq	_ZdlPvm@PLT # Offset: 232
.Ltmp1239:
    000000ed: 	pxor	%xmm1, %xmm1
    000000f1: 	pxor	%xmm2, %xmm2
    000000f5: 	movq	(%rbp), %rcx
    000000f9: 	movl	%ebx, %r8d
    000000fc: 	cvtsi2sd	%ebx, %xmm2
    00000100: 	movq	results(%rip), %rax
    00000107: 	movl	%r12d, %edx
    0000010a: 	addl	%ebx, %ebx
    0000010c: 	leaq	DATAat0x27240(%rip), %rsi
    00000113: 	movl	$0x1, %edi
    00000118: 	addl	$0x1, %r12d
    0000011c: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000124: 	movsd	(%rax), %xmm0
    00000128: 	movl	$0x2, %eax
    0000012d: 	mulsd	%xmm2, %xmm1
    00000131: 	divsd	DATAat0x276b0(%rip), %xmm1
    00000139: 	divsd	%xmm0, %xmm1
    0000013d: 	callq	__printf_chk@PLT # Offset: 317
    00000142: 	movl	$0x0, current_test(%rip)
    0000014c: 	cmpl	%ebx, 0x48(%rsp)
    00000150: 	jl	.Ltmp1237 # Offset: 336
.Ltmp1238:
    00000156: 	movl	0x48(%rsp), %eax
    0000015a: 	movq	(%rbp), %r9
    0000015e: 	movq	%r13, 0x60(%rsp)
    00000163: 	movq	0x8(%rbp), %r8
    00000167: 	cltd
    00000168: 	idivl	%ebx
    0000016a: 	movl	$0x4, %edx
    0000016f: 	cltq
    00000171: 	imulq	0x18(%rsp), %rax
    00000177: 	cmpq	%rdx, %rax
    0000017a: 	cmovlq	%rdx, %rax
    0000017e: 	movl	$0x70000000, %edx
    00000183: 	cmpq	%rdx, %rax
    00000186: 	cmovgq	%rdx, %rax
    0000018a: 	addq	$0x1, %rax
    0000018e: 	andq	$-0x2, %rax
    00000192: 	movl	%eax, iterations(%rip)
    00000198: 	movslq	%ebx, %rax
    0000019b: 	shlq	$0x3, %rax
    0000019f: 	leaq	(%r14,%rax), %r10
    000001a3: 	leaq	(%r15,%rax), %rcx
    000001a7: 	movq	%r9, %rax
    000001aa: 	addq	%r8, %rax
    000001ad: 	je	.Ltmp1240 # Offset: 429
    000001af: 	testq	%r9, %r9
    000001b2: 	je	.Ltmp1241 # Offset: 434
.Ltmp1240:
    000001b8: 	movq	%r8, 0x58(%rsp)
    000001bd: 	cmpq	$0xf, %r8
    000001c1: 	ja	.Ltmp1242 # Offset: 449
    000001c3: 	cmpq	$0x1, %r8
    000001c7: 	je	.Ltmp1243 # Offset: 455
    000001cd: 	testq	%r8, %r8
    000001d0: 	jne	.Ltmp1244 # Offset: 464
    000001d6: 	movq	%r13, %rax
    000001d9: 	jmp	.Ltmp1245 # Offset: 473
    000001de: 	nop # Size: 2
.Ltmp1242:
    000001e0: 	movq	0x8(%rsp), %rdi
    000001e5: 	movq	0x40(%rsp), %rsi
    000001ea: 	xorl	%edx, %edx
    000001ec: 	movq	%r8, 0x38(%rsp)
    000001f1: 	movq	%r9, 0x30(%rsp)
    000001f6: 	movq	%rcx, 0x28(%rsp)
    000001fb: 	movq	%r10, 0x20(%rsp)
    00000200: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 512
    00000205: 	movq	0x20(%rsp), %r10
    0000020a: 	movq	0x28(%rsp), %rcx
    0000020f: 	movq	%rax, 0x60(%rsp)
    00000214: 	movq	%rax, %rdi
    00000217: 	movq	0x58(%rsp), %rax
    0000021c: 	movq	0x30(%rsp), %r9
    00000221: 	movq	0x38(%rsp), %r8
    00000226: 	movq	%rax, 0x70(%rsp)
.Ltmp1247:
    0000022b: 	movq	%r8, %rdx
    0000022e: 	movq	%r9, %rsi
    00000231: 	movq	%rcx, 0x28(%rsp)
    00000236: 	movq	%r10, 0x20(%rsp)
    0000023b: 	callq	memcpy@PLT # Offset: 571
    00000240: 	movq	0x58(%rsp), %r8
    00000245: 	movq	0x60(%rsp), %rax
    0000024a: 	movq	0x20(%rsp), %r10
    0000024f: 	movq	0x28(%rsp), %rcx
    00000254: 	jmp	.Ltmp1245 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp1237:
    00000260: 	movl	0x4c(%rsp), %eax
    00000264: 	movl	%eax, iterations(%rip)
    0000026a: 	movq	0x88(%rsp), %rax
    00000272: 	subq	%fs:0x28, %rax
    0000027b: 	jne	.Ltmp1246 # Offset: 635
    0000027d: 	addq	$0x98, %rsp
    00000284: 	popq	%rbx
    00000285: 	popq	%rbp
    00000286: 	popq	%r12
    00000288: 	popq	%r13
    0000028a: 	popq	%r14
    0000028c: 	popq	%r15
    0000028e: 	retq # Offset: 654
.Ltmp1241:
    0000028f: 	leaq	DATAat0x27008(%rip), %rdi
    00000296: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 662
.Ltmp1246:
    0000029b: 	callq	__stack_chk_fail@PLT # Offset: 667
.Ltmp1244:
    000002a0: 	movq	%r13, %rdi
    000002a3: 	jmp	.Ltmp1247 # Offset: 675
    000002a5: 	endbr64
    000002a9: 	movq	%rax, %rbp
    000002ac: 	movq	0x60(%rsp), %rdi
    000002b1: 	cmpq	%r13, %rdi
    000002b4: 	je	.Ltmp1248 # Offset: 692
    000002b6: 	movq	0x70(%rsp), %rax
    000002bb: 	leaq	0x1(%rax), %rsi
    000002bf: 	callq	_ZdlPvm@PLT # Offset: 703
.Ltmp1248:
    000002c4: 	movq	%rbp, %rdi
    000002c7: 	callq	_Unwind_Resume@PLT # Offset: 711
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_reverse_copy_sizesIPmPFS0_S0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_reverse_copyIPhPFS0_S0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z17test_reverse_copyIPhPFS0_S0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z17test_reverse_copyIPhPFS0_S0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/reverse_sequence.cpp/1
  Number      : 194
  State       : disassembled
  Address     : 0x11420
  Size        : 0x257
  MaxSize     : 0x260
  Offset      : 0x11420
  Section     : .text
  Orc Section : .local.text._Z17test_reverse_copyIPhPFS0_S0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0193:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rdi, %r14
    00000007: 	pushq	%r13
    00000009: 	movq	%rsi, %r13
    0000000c: 	pushq	%r12
    0000000e: 	movq	%rdx, %r12
    00000011: 	pushq	%rbp
    00000012: 	movq	%r8, %rbp
    00000015: 	pushq	%rbx
    00000016: 	movq	%rcx, %rbx
    00000019: 	subq	$0x18, %rsp
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	cmpq	%rdx, %rcx
    00000030: 	je	.Ltmp1249 # Offset: 48
    00000032: 	movq	%rcx, %rdx
    00000035: 	movl	$0x63, %esi
    0000003a: 	movq	%r12, %rdi
    0000003d: 	subq	%r12, %rdx
    00000040: 	callq	memset@PLT # Offset: 64
.Ltmp1249:
    00000045: 	callq	clock@PLT # Offset: 69
    0000004a: 	movq	%rax, start_time(%rip)
    00000051: 	movl	iterations(%rip), %eax
    00000057: 	testl	%eax, %eax
    00000059: 	jle	.Ltmp1250 # Offset: 89
    0000005b: 	movq	%r13, %rsi
    0000005e: 	xorl	%edi, %edi
    00000060: 	subq	%r14, %rsi
    00000063: 	addq	%r12, %rsi
    00000066: 	cmpq	%r13, %r14
    00000069: 	je	.Ltmp1250 # Offset: 105
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1252:
    00000070: 	movq	%r12, %rax
    00000073: 	movq	%r13, %rdx
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1251:
    00000080: 	movzbl	-0x1(%rdx), %ecx
    00000084: 	addq	$0x1, %rax
    00000088: 	subq	$0x1, %rdx
    0000008c: 	movb	%cl, -0x1(%rax)
    0000008f: 	cmpq	%rsi, %rax
    00000092: 	jne	.Ltmp1251 # Offset: 146
    00000094: 	addl	$0x1, %edi
    00000097: 	cmpl	%edi, iterations(%rip)
    0000009d: 	jg	.Ltmp1252 # Offset: 157
.Ltmp1250:
    0000009f: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000a6: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    000000ad: 	subq	$0x20, %rax
    000000b1: 	cmpq	%rax, %r14
    000000b4: 	je	.Ltmp1253 # Offset: 180
    000000ba: 	leaq	0x10(%r14), %rdi
    000000be: 	movq	0x8(%rbp), %r13
    000000c2: 	movq	%rdi, (%r14)
    000000c5: 	movq	(%rbp), %r15
    000000c9: 	movq	%r15, %rax
    000000cc: 	addq	%r13, %rax
    000000cf: 	je	.Ltmp1254 # Offset: 207
    000000d1: 	testq	%r15, %r15
    000000d4: 	je	.Ltmp1255 # Offset: 212
.Ltmp1254:
    000000da: 	movq	%r13, (%rsp)
    000000de: 	cmpq	$0xf, %r13
    000000e2: 	ja	.Ltmp1256 # Offset: 226
    000000e8: 	cmpq	$0x1, %r13
    000000ec: 	jne	.Ltmp1257 # Offset: 236
    000000f2: 	movzbl	(%r15), %eax
    000000f6: 	movb	%al, 0x10(%r14)
.Ltmp1263:
    000000fa: 	movq	%r13, 0x8(%r14)
    000000fe: 	movb	$0x0, (%rdi,%r13)
    00000103: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000010a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000111: 	addq	$0x20, %rax
    00000115: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000011c: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000123: 	je	.Ltmp1258 # Offset: 291
.Ltmp1264:
    00000129: 	movq	-0x20(%rax), %r13
    0000012d: 	subq	$0x1, %rbx
    00000131: 	callq	clock@PLT # Offset: 305
    00000136: 	pxor	%xmm0, %xmm0
    0000013a: 	movq	%rax, end_time(%rip)
    00000141: 	movq	%r13, %rdi
    00000144: 	subq	start_time(%rip), %rax
    0000014b: 	cvtsi2sd	%rax, %xmm0
    00000150: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000158: 	callq	_Z13record_resultdPKc # Offset: 344
    0000015d: 	jmp	.Ltmp1259 # Offset: 349
    0000015f: 	nop # Size: 1
.Ltmp1261:
    00000160: 	addq	$0x1, %r12
    00000164: 	movzbl	(%r12), %eax
    00000169: 	cmpb	%al, -0x1(%r12)
    0000016e: 	jb	.Ltmp1260 # Offset: 366
.Ltmp1259:
    00000170: 	cmpq	%rbx, %r12
    00000173: 	jne	.Ltmp1261 # Offset: 371
    00000175: 	movq	0x8(%rsp), %rax
    0000017a: 	subq	%fs:0x28, %rax
    00000183: 	jne	.Ltmp1262 # Offset: 387
    00000189: 	addq	$0x18, %rsp
    0000018d: 	popq	%rbx
    0000018e: 	popq	%rbp
    0000018f: 	popq	%r12
    00000191: 	popq	%r13
    00000193: 	popq	%r14
    00000195: 	popq	%r15
    00000197: 	retq # Offset: 407
.Ltmp1256:
    00000198: 	movq	%r14, %rdi
    0000019b: 	movq	%rsp, %rsi
    0000019e: 	xorl	%edx, %edx
    000001a0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 416
    000001a5: 	movq	%rax, (%r14)
    000001a8: 	movq	%rax, %rdi
    000001ab: 	movq	(%rsp), %rax
    000001af: 	movq	%rax, 0x10(%r14)
.Ltmp1265:
    000001b3: 	movq	%r13, %rdx
    000001b6: 	movq	%r15, %rsi
    000001b9: 	callq	memcpy@PLT # Offset: 441
    000001be: 	movq	(%rsp), %r13
    000001c2: 	movq	(%r14), %rdi
    000001c5: 	jmp	.Ltmp1263 # Offset: 453
.Ltmp1260:
    000001ca: 	movq	0x8(%rsp), %rax
    000001cf: 	subq	%fs:0x28, %rax
    000001d8: 	jne	.Ltmp1262 # Offset: 472
    000001da: 	movq	(%rbp), %rdx
    000001de: 	addq	$0x18, %rsp
    000001e2: 	leaq	DATAat0x271d0(%rip), %rsi
    000001e9: 	xorl	%eax, %eax
    000001eb: 	popq	%rbx
    000001ec: 	movl	$0x1, %edi
    000001f1: 	popq	%rbp
    000001f2: 	popq	%r12
    000001f4: 	popq	%r13
    000001f6: 	popq	%r14
    000001f8: 	popq	%r15
    000001fa: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 506
.Ltmp1253:
    000001ff: 	movq	%rbp, %rsi
    00000202: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000209: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 521
    0000020e: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000215: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000021c: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000223: 	jne	.Ltmp1264 # Offset: 547
.Ltmp1258:
    00000229: 	movq	-0x8(%rdx), %rax
    0000022d: 	addq	$0x200, %rax
    00000233: 	jmp	.Ltmp1264 # Offset: 563
.Ltmp1257:
    00000238: 	testq	%r13, %r13
    0000023b: 	je	.Ltmp1263 # Offset: 571
    00000241: 	jmp	.Ltmp1265 # Offset: 577
.Ltmp1262:
    00000246: 	callq	__stack_chk_fail@PLT # Offset: 582
.Ltmp1255:
    0000024b: 	leaq	DATAat0x27008(%rip), %rdi
    00000252: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 594
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_reverse_copyIPhPFS0_S0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z17test_reverse_copyIPsPFS0_S0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 195
  State       : disassembled
  Address     : 0x11680
  Size        : 0x308
  MaxSize     : 0x310
  Offset      : 0x11680
  Section     : .text
  Orc Section : .local.text._Z17test_reverse_copyIPsPFS0_S0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0194:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rcx, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdx, %rbx
    0000001d: 	subq	$0x28, %rsp
    00000021: 	movq	%r9, 0x8(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x18(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rcx, %rdx
    00000039: 	je	.Ltmp1266 # Offset: 57
    0000003f: 	movq	%rdx, %rax
    00000042: 	leaq	-0x2(%rcx), %rdx
    00000046: 	subq	%rbx, %rdx
    00000049: 	movq	%rdx, %rcx
    0000004c: 	shrq	%rcx
    0000004f: 	leaq	0x1(%rcx), %rsi
    00000053: 	cmpq	$0xc, %rdx
    00000057: 	jbe	.Ltmp1267 # Offset: 87
    0000005d: 	movq	%rsi, %rdx
    00000060: 	movdqa	DATAat0x275b0(%rip), %xmm0
    00000068: 	shrq	$0x3, %rdx
    0000006c: 	shlq	$0x4, %rdx
    00000070: 	addq	%rbx, %rdx
    00000073: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1268:
    00000078: 	movups	%xmm0, (%rax)
    0000007b: 	addq	$0x10, %rax
    0000007f: 	cmpq	%rdx, %rax
    00000082: 	jne	.Ltmp1268 # Offset: 130
    00000084: 	movq	%rsi, %rdx
    00000087: 	andq	$-0x8, %rdx
    0000008b: 	leaq	(%rbx,%rdx,2), %rax
    0000008f: 	cmpq	%rdx, %rsi
    00000092: 	je	.Ltmp1266 # Offset: 146
.Ltmp1286:
    00000094: 	subq	%rdx, %rcx
    00000097: 	leaq	0x1(%rcx), %rsi
    0000009b: 	cmpq	$0x2, %rcx
    0000009f: 	jbe	.Ltmp1269 # Offset: 159
    000000a1: 	movq	DATAat0x275b0(%rip), %rcx
    000000a8: 	movq	%rcx, (%rbx,%rdx,2)
    000000ac: 	movq	%rsi, %rdx
    000000af: 	andq	$-0x4, %rdx
    000000b3: 	leaq	(%rax,%rdx,2), %rax
    000000b7: 	cmpq	%rdx, %rsi
    000000ba: 	je	.Ltmp1266 # Offset: 186
.Ltmp1269:
    000000bc: 	movl	$0x63, %esi
    000000c1: 	leaq	0x2(%rax), %rdx
    000000c5: 	movw	%si, (%rax)
    000000c8: 	cmpq	%rdx, %rbp
    000000cb: 	je	.Ltmp1266 # Offset: 203
    000000cd: 	movl	$0x63, %ecx
    000000d2: 	leaq	0x4(%rax), %rdx
    000000d6: 	movw	%cx, 0x2(%rax)
    000000da: 	cmpq	%rdx, %rbp
    000000dd: 	je	.Ltmp1266 # Offset: 221
    000000df: 	movl	$0x63, %edx
    000000e4: 	movw	%dx, 0x4(%rax)
.Ltmp1266:
    000000e8: 	callq	clock@PLT # Offset: 232
    000000ed: 	movl	iterations(%rip), %edi
    000000f3: 	xorl	%r14d, %r14d
    000000f6: 	movq	%rax, start_time(%rip)
    000000fd: 	testl	%edi, %edi
    000000ff: 	jle	.Ltmp1270 # Offset: 255
    00000101: 	nopl	(%rax) # Size: 7
.Ltmp1271:
    00000108: 	movq	%rbx, %rdx
    0000010b: 	movq	%r13, %rsi
    0000010e: 	movq	%r12, %rdi
    00000111: 	addl	$0x1, %r14d
    00000115: 	callq	*%r15 # Offset: 277
    00000118: 	cmpl	%r14d, iterations(%rip)
    0000011f: 	jg	.Ltmp1271 # Offset: 287
.Ltmp1270:
    00000121: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000128: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    0000012f: 	subq	$0x20, %rax
    00000133: 	cmpq	%rax, %r13
    00000136: 	je	.Ltmp1272 # Offset: 310
    0000013c: 	movq	0x8(%rsp), %rax
    00000141: 	leaq	0x10(%r13), %rdi
    00000145: 	movq	%rdi, (%r13)
    00000149: 	movq	(%rax), %r15
    0000014c: 	movq	0x8(%rax), %r12
    00000150: 	movq	%r15, %rax
    00000153: 	addq	%r12, %rax
    00000156: 	je	.Ltmp1273 # Offset: 342
    00000158: 	testq	%r15, %r15
    0000015b: 	je	.Ltmp1274 # Offset: 347
.Ltmp1273:
    00000161: 	movq	%r12, 0x10(%rsp)
    00000166: 	cmpq	$0xf, %r12
    0000016a: 	ja	.Ltmp1275 # Offset: 362
    00000170: 	cmpq	$0x1, %r12
    00000174: 	jne	.Ltmp1276 # Offset: 372
    0000017a: 	movzbl	(%r15), %eax
    0000017e: 	movb	%al, 0x10(%r13)
.Ltmp1282:
    00000182: 	movq	%r12, 0x8(%r13)
    00000186: 	movb	$0x0, (%rdi,%r12)
    0000018b: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000192: 	addq	$0x20, %rax
    00000196: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1284:
    0000019d: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001a4: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000001ab: 	je	.Ltmp1277 # Offset: 427
.Ltmp1283:
    000001b1: 	movq	-0x20(%rax), %r12
    000001b5: 	callq	clock@PLT # Offset: 437
    000001ba: 	pxor	%xmm0, %xmm0
    000001be: 	movq	%rax, end_time(%rip)
    000001c5: 	movq	%r12, %rdi
    000001c8: 	subq	start_time(%rip), %rax
    000001cf: 	cvtsi2sd	%rax, %xmm0
    000001d4: 	divsd	DATAat0x276b0(%rip), %xmm0
    000001dc: 	callq	_Z13record_resultdPKc # Offset: 476
    000001e1: 	leaq	0x2(%rbx), %rax
    000001e5: 	jmp	.Ltmp1278 # Offset: 485
    000001e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1280:
    000001f0: 	movzwl	-0x2(%rax), %edx
    000001f4: 	addq	$0x2, %rax
    000001f8: 	cmpw	-0x2(%rax), %dx
    000001fc: 	jl	.Ltmp1279 # Offset: 508
.Ltmp1278:
    000001fe: 	cmpq	%rax, %rbp
    00000201: 	jne	.Ltmp1280 # Offset: 513
    00000203: 	movq	0x18(%rsp), %rax
    00000208: 	subq	%fs:0x28, %rax
    00000211: 	jne	.Ltmp1281 # Offset: 529
    00000217: 	addq	$0x28, %rsp
    0000021b: 	popq	%rbx
    0000021c: 	popq	%rbp
    0000021d: 	popq	%r12
    0000021f: 	popq	%r13
    00000221: 	popq	%r14
    00000223: 	popq	%r15
    00000225: 	retq # Offset: 549
    00000226: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1275:
    00000230: 	movq	%r13, %rdi
    00000233: 	leaq	0x10(%rsp), %rsi
    00000238: 	xorl	%edx, %edx
    0000023a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 570
    0000023f: 	movq	%rax, (%r13)
    00000243: 	movq	%rax, %rdi
    00000246: 	movq	0x10(%rsp), %rax
    0000024b: 	movq	%rax, 0x10(%r13)
.Ltmp1285:
    0000024f: 	movq	%r12, %rdx
    00000252: 	movq	%r15, %rsi
    00000255: 	callq	memcpy@PLT # Offset: 597
    0000025a: 	movq	0x10(%rsp), %r12
    0000025f: 	movq	(%r13), %rdi
    00000263: 	jmp	.Ltmp1282 # Offset: 611
    00000268: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1279:
    00000270: 	movq	0x18(%rsp), %rax
    00000275: 	subq	%fs:0x28, %rax
    0000027e: 	jne	.Ltmp1281 # Offset: 638
    00000284: 	movq	0x8(%rsp), %rax
    00000289: 	leaq	DATAat0x271d0(%rip), %rsi
    00000290: 	movl	$0x1, %edi
    00000295: 	movq	(%rax), %rdx
    00000298: 	addq	$0x28, %rsp
    0000029c: 	xorl	%eax, %eax
    0000029e: 	popq	%rbx
    0000029f: 	popq	%rbp
    000002a0: 	popq	%r12
    000002a2: 	popq	%r13
    000002a4: 	popq	%r14
    000002a6: 	popq	%r15
    000002a8: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 680
    000002ad: 	nopl	(%rax) # Size: 3
.Ltmp1277:
    000002b0: 	movq	-0x8(%rdx), %rax
    000002b4: 	addq	$0x200, %rax
    000002ba: 	jmp	.Ltmp1283 # Offset: 698
    000002bf: 	nop # Size: 1
.Ltmp1272:
    000002c0: 	movq	0x8(%rsp), %rsi
    000002c5: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000002cc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 716
    000002d1: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000002d8: 	jmp	.Ltmp1284 # Offset: 728
    000002dd: 	nopl	(%rax) # Size: 3
.Ltmp1276:
    000002e0: 	testq	%r12, %r12
    000002e3: 	je	.Ltmp1282 # Offset: 739
    000002e9: 	jmp	.Ltmp1285 # Offset: 745
    000002ee: 	nop # Size: 2
.Ltmp1267:
    000002f0: 	xorl	%edx, %edx
    000002f2: 	jmp	.Ltmp1286 # Offset: 754
.Ltmp1274:
    000002f7: 	leaq	DATAat0x27008(%rip), %rdi
    000002fe: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 766
.Ltmp1281:
    00000303: 	callq	__stack_chk_fail@PLT # Offset: 771
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_reverse_copyIPsPFS0_S0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23test_reverse_copy_sizesIPsPFS0_S0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 196
  State       : disassembled
  Address     : 0x11990
  Size        : 0x2cc
  MaxSize     : 0x2d0
  Offset      : 0x11990
  Section     : .text
  Orc Section : .local.text._Z23test_reverse_copy_sizesIPsPFS0_S0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0195:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	leaq	DATAat0x271e0(%rip), %rsi
    00000010: 	pushq	%r14
    00000012: 	movq	%rdi, %r14
    00000015: 	movl	$0x1, %edi
    0000001a: 	pushq	%r13
    0000001c: 	pushq	%r12
    0000001e: 	pushq	%rbp
    0000001f: 	movq	%r8, %rbp
    00000022: 	pushq	%rbx
    00000023: 	movl	%edx, %ebx
    00000025: 	subq	$0x98, %rsp
    0000002c: 	movl	%edx, 0x48(%rsp)
    00000030: 	movq	%rcx, 0x10(%rsp)
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x88(%rsp)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	movl	%eax, 0x4c(%rsp)
    00000050: 	xorl	%eax, %eax
    00000052: 	callq	__printf_chk@PLT # Offset: 82
    00000057: 	xorl	%eax, %eax
    00000059: 	movl	$0x1, %edi
    0000005e: 	leaq	DATAat0x27210(%rip), %rsi
    00000065: 	callq	__printf_chk@PLT # Offset: 101
    0000006a: 	cmpl	$0x3, %ebx
    0000006d: 	jle	.Ltmp1287 # Offset: 109
    00000073: 	movslq	0x4c(%rsp), %rax
    00000078: 	xorl	%r12d, %r12d
    0000007b: 	movl	$0x4, %ebx
    00000080: 	leaq	0x70(%rsp), %r13
    00000085: 	movq	%rax, 0x18(%rsp)
    0000008a: 	leaq	0x60(%rsp), %rax
    0000008f: 	movq	%rax, 0x8(%rsp)
    00000094: 	leaq	0x58(%rsp), %rax
    00000099: 	movq	%rax, 0x40(%rsp)
    0000009e: 	jmp	.Ltmp1288 # Offset: 158
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1293:
    000000a8: 	movzbl	(%r9), %eax
    000000ac: 	movb	%al, 0x70(%rsp)
    000000b0: 	movq	%r13, %rax
.Ltmp1295:
    000000b3: 	movq	%r8, 0x68(%rsp)
    000000b8: 	movq	0x8(%rsp), %r9
    000000bd: 	movq	%r15, %rdx
    000000c0: 	movq	%r10, %rsi
    000000c3: 	movb	$0x0, (%rax,%r8)
    000000c8: 	movq	0x10(%rsp), %r8
    000000cd: 	movq	%r14, %rdi
    000000d0: 	callq	_Z17test_reverse_copyIPsPFS0_S0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 208
    000000d5: 	movq	0x60(%rsp), %rdi
    000000da: 	cmpq	%r13, %rdi
    000000dd: 	je	.Ltmp1289 # Offset: 221
    000000df: 	movq	0x70(%rsp), %rax
    000000e4: 	leaq	0x1(%rax), %rsi
    000000e8: 	callq	_ZdlPvm@PLT # Offset: 232
.Ltmp1289:
    000000ed: 	pxor	%xmm1, %xmm1
    000000f1: 	pxor	%xmm2, %xmm2
    000000f5: 	movq	(%rbp), %rcx
    000000f9: 	movl	%ebx, %r8d
    000000fc: 	cvtsi2sd	%ebx, %xmm2
    00000100: 	movq	results(%rip), %rax
    00000107: 	movl	%r12d, %edx
    0000010a: 	addl	%ebx, %ebx
    0000010c: 	leaq	DATAat0x27240(%rip), %rsi
    00000113: 	movl	$0x1, %edi
    00000118: 	addl	$0x1, %r12d
    0000011c: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000124: 	movsd	(%rax), %xmm0
    00000128: 	movl	$0x2, %eax
    0000012d: 	mulsd	%xmm2, %xmm1
    00000131: 	divsd	DATAat0x276b0(%rip), %xmm1
    00000139: 	divsd	%xmm0, %xmm1
    0000013d: 	callq	__printf_chk@PLT # Offset: 317
    00000142: 	movl	$0x0, current_test(%rip)
    0000014c: 	cmpl	%ebx, 0x48(%rsp)
    00000150: 	jl	.Ltmp1287 # Offset: 336
.Ltmp1288:
    00000156: 	movl	0x48(%rsp), %eax
    0000015a: 	movq	(%rbp), %r9
    0000015e: 	movq	%r13, 0x60(%rsp)
    00000163: 	movq	0x8(%rbp), %r8
    00000167: 	cltd
    00000168: 	idivl	%ebx
    0000016a: 	movl	$0x4, %edx
    0000016f: 	cltq
    00000171: 	imulq	0x18(%rsp), %rax
    00000177: 	cmpq	%rdx, %rax
    0000017a: 	cmovlq	%rdx, %rax
    0000017e: 	movl	$0x70000000, %edx
    00000183: 	cmpq	%rdx, %rax
    00000186: 	cmovgq	%rdx, %rax
    0000018a: 	addq	$0x1, %rax
    0000018e: 	andq	$-0x2, %rax
    00000192: 	movl	%eax, iterations(%rip)
    00000198: 	movslq	%ebx, %rax
    0000019b: 	addq	%rax, %rax
    0000019e: 	leaq	(%r14,%rax), %r10
    000001a2: 	leaq	(%r15,%rax), %rcx
    000001a6: 	movq	%r9, %rax
    000001a9: 	addq	%r8, %rax
    000001ac: 	je	.Ltmp1290 # Offset: 428
    000001ae: 	testq	%r9, %r9
    000001b1: 	je	.Ltmp1291 # Offset: 433
.Ltmp1290:
    000001b7: 	movq	%r8, 0x58(%rsp)
    000001bc: 	cmpq	$0xf, %r8
    000001c0: 	ja	.Ltmp1292 # Offset: 448
    000001c2: 	cmpq	$0x1, %r8
    000001c6: 	je	.Ltmp1293 # Offset: 454
    000001cc: 	testq	%r8, %r8
    000001cf: 	jne	.Ltmp1294 # Offset: 463
    000001d5: 	movq	%r13, %rax
    000001d8: 	jmp	.Ltmp1295 # Offset: 472
    000001dd: 	nopl	(%rax) # Size: 3
.Ltmp1292:
    000001e0: 	movq	0x8(%rsp), %rdi
    000001e5: 	movq	0x40(%rsp), %rsi
    000001ea: 	xorl	%edx, %edx
    000001ec: 	movq	%r8, 0x38(%rsp)
    000001f1: 	movq	%r9, 0x30(%rsp)
    000001f6: 	movq	%rcx, 0x28(%rsp)
    000001fb: 	movq	%r10, 0x20(%rsp)
    00000200: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 512
    00000205: 	movq	0x20(%rsp), %r10
    0000020a: 	movq	0x28(%rsp), %rcx
    0000020f: 	movq	%rax, 0x60(%rsp)
    00000214: 	movq	%rax, %rdi
    00000217: 	movq	0x58(%rsp), %rax
    0000021c: 	movq	0x30(%rsp), %r9
    00000221: 	movq	0x38(%rsp), %r8
    00000226: 	movq	%rax, 0x70(%rsp)
.Ltmp1297:
    0000022b: 	movq	%r8, %rdx
    0000022e: 	movq	%r9, %rsi
    00000231: 	movq	%rcx, 0x28(%rsp)
    00000236: 	movq	%r10, 0x20(%rsp)
    0000023b: 	callq	memcpy@PLT # Offset: 571
    00000240: 	movq	0x58(%rsp), %r8
    00000245: 	movq	0x60(%rsp), %rax
    0000024a: 	movq	0x20(%rsp), %r10
    0000024f: 	movq	0x28(%rsp), %rcx
    00000254: 	jmp	.Ltmp1295 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp1287:
    00000260: 	movl	0x4c(%rsp), %eax
    00000264: 	movl	%eax, iterations(%rip)
    0000026a: 	movq	0x88(%rsp), %rax
    00000272: 	subq	%fs:0x28, %rax
    0000027b: 	jne	.Ltmp1296 # Offset: 635
    0000027d: 	addq	$0x98, %rsp
    00000284: 	popq	%rbx
    00000285: 	popq	%rbp
    00000286: 	popq	%r12
    00000288: 	popq	%r13
    0000028a: 	popq	%r14
    0000028c: 	popq	%r15
    0000028e: 	retq # Offset: 654
.Ltmp1291:
    0000028f: 	leaq	DATAat0x27008(%rip), %rdi
    00000296: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 662
.Ltmp1296:
    0000029b: 	callq	__stack_chk_fail@PLT # Offset: 667
.Ltmp1294:
    000002a0: 	movq	%r13, %rdi
    000002a3: 	jmp	.Ltmp1297 # Offset: 675
    000002a5: 	endbr64
    000002a9: 	movq	%rax, %rbp
    000002ac: 	movq	0x60(%rsp), %rdi
    000002b1: 	cmpq	%r13, %rdi
    000002b4: 	je	.Ltmp1298 # Offset: 692
    000002b6: 	movq	0x70(%rsp), %rax
    000002bb: 	leaq	0x1(%rax), %rsi
    000002bf: 	callq	_ZdlPvm@PLT # Offset: 703
.Ltmp1298:
    000002c4: 	movq	%rbp, %rdi
    000002c7: 	callq	_Unwind_Resume@PLT # Offset: 711
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_reverse_copy_sizesIPsPFS0_S0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_reverse_copyIPfPFS0_S0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 197
  State       : disassembled
  Address     : 0x11c60
  Size        : 0x2cf
  MaxSize     : 0x2d0
  Offset      : 0x11c60
  Section     : .text
  Orc Section : .local.text._Z17test_reverse_copyIPfPFS0_S0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0196:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rcx, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdx, %rbx
    0000001d: 	subq	$0x28, %rsp
    00000021: 	movq	%r9, 0x8(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x18(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rcx, %rdx
    00000039: 	je	.Ltmp1299 # Offset: 57
    0000003b: 	movq	%rdx, %rax
    0000003e: 	leaq	-0x4(%rcx), %rdx
    00000042: 	subq	%rbx, %rdx
    00000045: 	movq	%rdx, %rcx
    00000048: 	shrq	$0x2, %rcx
    0000004c: 	addq	$0x1, %rcx
    00000050: 	cmpq	$0x8, %rdx
    00000054: 	jbe	.Ltmp1300 # Offset: 84
    00000056: 	movq	%rcx, %rdx
    00000059: 	movaps	DATAat0x27590(%rip), %xmm0
    00000060: 	shrq	$0x2, %rdx
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rbx, %rdx
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1301:
    00000070: 	movups	%xmm0, (%rax)
    00000073: 	addq	$0x10, %rax
    00000077: 	cmpq	%rdx, %rax
    0000007a: 	jne	.Ltmp1301 # Offset: 122
    0000007c: 	movq	%rcx, %rdx
    0000007f: 	andq	$-0x4, %rdx
    00000083: 	leaq	(%rbx,%rdx,4), %rax
    00000087: 	cmpq	%rdx, %rcx
    0000008a: 	je	.Ltmp1299 # Offset: 138
.Ltmp1300:
    0000008c: 	movss	DATAat0x27590(%rip), %xmm0
    00000094: 	leaq	0x4(%rax), %rdx
    00000098: 	movss	%xmm0, (%rax)
    0000009c: 	cmpq	%rdx, %rbp
    0000009f: 	je	.Ltmp1299 # Offset: 159
    000000a1: 	leaq	0x8(%rax), %rdx
    000000a5: 	movss	%xmm0, 0x4(%rax)
    000000aa: 	cmpq	%rdx, %rbp
    000000ad: 	je	.Ltmp1299 # Offset: 173
    000000af: 	movss	%xmm0, 0x8(%rax)
.Ltmp1299:
    000000b4: 	callq	clock@PLT # Offset: 180
    000000b9: 	xorl	%r14d, %r14d
    000000bc: 	movq	%rax, start_time(%rip)
    000000c3: 	movl	iterations(%rip), %eax
    000000c9: 	testl	%eax, %eax
    000000cb: 	jle	.Ltmp1302 # Offset: 203
    000000cd: 	nopl	(%rax) # Size: 3
.Ltmp1303:
    000000d0: 	movq	%rbx, %rdx
    000000d3: 	movq	%r13, %rsi
    000000d6: 	movq	%r12, %rdi
    000000d9: 	addl	$0x1, %r14d
    000000dd: 	callq	*%r15 # Offset: 221
    000000e0: 	cmpl	%r14d, iterations(%rip)
    000000e7: 	jg	.Ltmp1303 # Offset: 231
.Ltmp1302:
    000000e9: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000f0: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    000000f7: 	subq	$0x20, %rax
    000000fb: 	cmpq	%rax, %r13
    000000fe: 	je	.Ltmp1304 # Offset: 254
    00000104: 	movq	0x8(%rsp), %rax
    00000109: 	leaq	0x10(%r13), %rdi
    0000010d: 	movq	%rdi, (%r13)
    00000111: 	movq	(%rax), %r15
    00000114: 	movq	0x8(%rax), %r12
    00000118: 	movq	%r15, %rax
    0000011b: 	addq	%r12, %rax
    0000011e: 	je	.Ltmp1305 # Offset: 286
    00000120: 	testq	%r15, %r15
    00000123: 	je	.Ltmp1306 # Offset: 291
.Ltmp1305:
    00000129: 	movq	%r12, 0x10(%rsp)
    0000012e: 	cmpq	$0xf, %r12
    00000132: 	ja	.Ltmp1307 # Offset: 306
    00000138: 	cmpq	$0x1, %r12
    0000013c: 	jne	.Ltmp1308 # Offset: 316
    00000142: 	movzbl	(%r15), %eax
    00000146: 	movb	%al, 0x10(%r13)
.Ltmp1314:
    0000014a: 	movq	%r12, 0x8(%r13)
    0000014e: 	movb	$0x0, (%rdi,%r12)
    00000153: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000015a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000161: 	addq	$0x20, %rax
    00000165: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000016c: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000173: 	je	.Ltmp1309 # Offset: 371
.Ltmp1315:
    00000179: 	movq	-0x20(%rax), %r12
    0000017d: 	callq	clock@PLT # Offset: 381
    00000182: 	pxor	%xmm0, %xmm0
    00000186: 	movq	%rax, end_time(%rip)
    0000018d: 	movq	%r12, %rdi
    00000190: 	subq	start_time(%rip), %rax
    00000197: 	cvtsi2sd	%rax, %xmm0
    0000019c: 	divsd	DATAat0x276b0(%rip), %xmm0
    000001a4: 	callq	_Z13record_resultdPKc # Offset: 420
    000001a9: 	leaq	0x4(%rbx), %rax
    000001ad: 	jmp	.Ltmp1310 # Offset: 429
    000001af: 	nop # Size: 1
.Ltmp1312:
    000001b0: 	movss	-0x4(%rax), %xmm0
    000001b5: 	movss	(%rax), %xmm1
    000001b9: 	addq	$0x4, %rax
    000001bd: 	comiss	%xmm0, %xmm1
    000001c0: 	ja	.Ltmp1311 # Offset: 448
.Ltmp1310:
    000001c2: 	cmpq	%rax, %rbp
    000001c5: 	jne	.Ltmp1312 # Offset: 453
    000001c7: 	movq	0x18(%rsp), %rax
    000001cc: 	subq	%fs:0x28, %rax
    000001d5: 	jne	.Ltmp1313 # Offset: 469
    000001db: 	addq	$0x28, %rsp
    000001df: 	popq	%rbx
    000001e0: 	popq	%rbp
    000001e1: 	popq	%r12
    000001e3: 	popq	%r13
    000001e5: 	popq	%r14
    000001e7: 	popq	%r15
    000001e9: 	retq # Offset: 489
    000001ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1307:
    000001f0: 	movq	%r13, %rdi
    000001f3: 	leaq	0x10(%rsp), %rsi
    000001f8: 	xorl	%edx, %edx
    000001fa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 506
    000001ff: 	movq	%rax, (%r13)
    00000203: 	movq	%rax, %rdi
    00000206: 	movq	0x10(%rsp), %rax
    0000020b: 	movq	%rax, 0x10(%r13)
.Ltmp1316:
    0000020f: 	movq	%r12, %rdx
    00000212: 	movq	%r15, %rsi
    00000215: 	callq	memcpy@PLT # Offset: 533
    0000021a: 	movq	0x10(%rsp), %r12
    0000021f: 	movq	(%r13), %rdi
    00000223: 	jmp	.Ltmp1314 # Offset: 547
    00000228: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1311:
    00000230: 	movq	0x18(%rsp), %rax
    00000235: 	subq	%fs:0x28, %rax
    0000023e: 	jne	.Ltmp1313 # Offset: 574
    00000240: 	movq	0x8(%rsp), %rax
    00000245: 	leaq	DATAat0x271d0(%rip), %rsi
    0000024c: 	movl	$0x1, %edi
    00000251: 	movq	(%rax), %rdx
    00000254: 	addq	$0x28, %rsp
    00000258: 	xorl	%eax, %eax
    0000025a: 	popq	%rbx
    0000025b: 	popq	%rbp
    0000025c: 	popq	%r12
    0000025e: 	popq	%r13
    00000260: 	popq	%r14
    00000262: 	popq	%r15
    00000264: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 612
    00000269: 	nopl	(%rax) # Size: 7
.Ltmp1304:
    00000270: 	movq	0x8(%rsp), %rsi
    00000275: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000027c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 636
    00000281: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000288: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000028f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000296: 	jne	.Ltmp1315 # Offset: 662
.Ltmp1309:
    0000029c: 	movq	-0x8(%rdx), %rax
    000002a0: 	addq	$0x200, %rax
    000002a6: 	jmp	.Ltmp1315 # Offset: 678
    000002ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1308:
    000002b0: 	testq	%r12, %r12
    000002b3: 	je	.Ltmp1314 # Offset: 691
    000002b9: 	jmp	.Ltmp1316 # Offset: 697
.Ltmp1313:
    000002be: 	callq	__stack_chk_fail@PLT # Offset: 702
.Ltmp1306:
    000002c3: 	leaq	DATAat0x27008(%rip), %rdi
    000002ca: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 714
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_reverse_copyIPfPFS0_S0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23test_reverse_copy_sizesIPfPFS0_S0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 198
  State       : disassembled
  Address     : 0x11f30
  Size        : 0x2cc
  MaxSize     : 0x2d0
  Offset      : 0x11f30
  Section     : .text
  Orc Section : .local.text._Z23test_reverse_copy_sizesIPfPFS0_S0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0197:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	leaq	DATAat0x271e0(%rip), %rsi
    00000010: 	pushq	%r14
    00000012: 	movq	%rdi, %r14
    00000015: 	movl	$0x1, %edi
    0000001a: 	pushq	%r13
    0000001c: 	pushq	%r12
    0000001e: 	pushq	%rbp
    0000001f: 	movq	%r8, %rbp
    00000022: 	pushq	%rbx
    00000023: 	movl	%edx, %ebx
    00000025: 	subq	$0x98, %rsp
    0000002c: 	movl	%edx, 0x48(%rsp)
    00000030: 	movq	%rcx, 0x10(%rsp)
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x88(%rsp)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	movl	%eax, 0x4c(%rsp)
    00000050: 	xorl	%eax, %eax
    00000052: 	callq	__printf_chk@PLT # Offset: 82
    00000057: 	xorl	%eax, %eax
    00000059: 	movl	$0x1, %edi
    0000005e: 	leaq	DATAat0x27210(%rip), %rsi
    00000065: 	callq	__printf_chk@PLT # Offset: 101
    0000006a: 	cmpl	$0x3, %ebx
    0000006d: 	jle	.Ltmp1317 # Offset: 109
    00000073: 	movslq	0x4c(%rsp), %rax
    00000078: 	xorl	%r12d, %r12d
    0000007b: 	movl	$0x4, %ebx
    00000080: 	leaq	0x70(%rsp), %r13
    00000085: 	movq	%rax, 0x18(%rsp)
    0000008a: 	leaq	0x60(%rsp), %rax
    0000008f: 	movq	%rax, 0x8(%rsp)
    00000094: 	leaq	0x58(%rsp), %rax
    00000099: 	movq	%rax, 0x40(%rsp)
    0000009e: 	jmp	.Ltmp1318 # Offset: 158
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1323:
    000000a8: 	movzbl	(%r9), %eax
    000000ac: 	movb	%al, 0x70(%rsp)
    000000b0: 	movq	%r13, %rax
.Ltmp1325:
    000000b3: 	movq	%r8, 0x68(%rsp)
    000000b8: 	movq	0x8(%rsp), %r9
    000000bd: 	movq	%r15, %rdx
    000000c0: 	movq	%r10, %rsi
    000000c3: 	movb	$0x0, (%rax,%r8)
    000000c8: 	movq	0x10(%rsp), %r8
    000000cd: 	movq	%r14, %rdi
    000000d0: 	callq	_Z17test_reverse_copyIPfPFS0_S0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 208
    000000d5: 	movq	0x60(%rsp), %rdi
    000000da: 	cmpq	%r13, %rdi
    000000dd: 	je	.Ltmp1319 # Offset: 221
    000000df: 	movq	0x70(%rsp), %rax
    000000e4: 	leaq	0x1(%rax), %rsi
    000000e8: 	callq	_ZdlPvm@PLT # Offset: 232
.Ltmp1319:
    000000ed: 	pxor	%xmm1, %xmm1
    000000f1: 	pxor	%xmm2, %xmm2
    000000f5: 	movq	(%rbp), %rcx
    000000f9: 	movl	%ebx, %r8d
    000000fc: 	cvtsi2sd	%ebx, %xmm2
    00000100: 	movq	results(%rip), %rax
    00000107: 	movl	%r12d, %edx
    0000010a: 	addl	%ebx, %ebx
    0000010c: 	leaq	DATAat0x27240(%rip), %rsi
    00000113: 	movl	$0x1, %edi
    00000118: 	addl	$0x1, %r12d
    0000011c: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000124: 	movsd	(%rax), %xmm0
    00000128: 	movl	$0x2, %eax
    0000012d: 	mulsd	%xmm2, %xmm1
    00000131: 	divsd	DATAat0x276b0(%rip), %xmm1
    00000139: 	divsd	%xmm0, %xmm1
    0000013d: 	callq	__printf_chk@PLT # Offset: 317
    00000142: 	movl	$0x0, current_test(%rip)
    0000014c: 	cmpl	%ebx, 0x48(%rsp)
    00000150: 	jl	.Ltmp1317 # Offset: 336
.Ltmp1318:
    00000156: 	movl	0x48(%rsp), %eax
    0000015a: 	movq	(%rbp), %r9
    0000015e: 	movq	%r13, 0x60(%rsp)
    00000163: 	movq	0x8(%rbp), %r8
    00000167: 	cltd
    00000168: 	idivl	%ebx
    0000016a: 	movl	$0x4, %edx
    0000016f: 	cltq
    00000171: 	imulq	0x18(%rsp), %rax
    00000177: 	cmpq	%rdx, %rax
    0000017a: 	cmovlq	%rdx, %rax
    0000017e: 	movl	$0x70000000, %edx
    00000183: 	cmpq	%rdx, %rax
    00000186: 	cmovgq	%rdx, %rax
    0000018a: 	addq	$0x1, %rax
    0000018e: 	andq	$-0x2, %rax
    00000192: 	movl	%eax, iterations(%rip)
    00000198: 	movslq	%ebx, %rax
    0000019b: 	shlq	$0x2, %rax
    0000019f: 	leaq	(%r14,%rax), %r10
    000001a3: 	leaq	(%r15,%rax), %rcx
    000001a7: 	movq	%r9, %rax
    000001aa: 	addq	%r8, %rax
    000001ad: 	je	.Ltmp1320 # Offset: 429
    000001af: 	testq	%r9, %r9
    000001b2: 	je	.Ltmp1321 # Offset: 434
.Ltmp1320:
    000001b8: 	movq	%r8, 0x58(%rsp)
    000001bd: 	cmpq	$0xf, %r8
    000001c1: 	ja	.Ltmp1322 # Offset: 449
    000001c3: 	cmpq	$0x1, %r8
    000001c7: 	je	.Ltmp1323 # Offset: 455
    000001cd: 	testq	%r8, %r8
    000001d0: 	jne	.Ltmp1324 # Offset: 464
    000001d6: 	movq	%r13, %rax
    000001d9: 	jmp	.Ltmp1325 # Offset: 473
    000001de: 	nop # Size: 2
.Ltmp1322:
    000001e0: 	movq	0x8(%rsp), %rdi
    000001e5: 	movq	0x40(%rsp), %rsi
    000001ea: 	xorl	%edx, %edx
    000001ec: 	movq	%r8, 0x38(%rsp)
    000001f1: 	movq	%r9, 0x30(%rsp)
    000001f6: 	movq	%rcx, 0x28(%rsp)
    000001fb: 	movq	%r10, 0x20(%rsp)
    00000200: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 512
    00000205: 	movq	0x20(%rsp), %r10
    0000020a: 	movq	0x28(%rsp), %rcx
    0000020f: 	movq	%rax, 0x60(%rsp)
    00000214: 	movq	%rax, %rdi
    00000217: 	movq	0x58(%rsp), %rax
    0000021c: 	movq	0x30(%rsp), %r9
    00000221: 	movq	0x38(%rsp), %r8
    00000226: 	movq	%rax, 0x70(%rsp)
.Ltmp1327:
    0000022b: 	movq	%r8, %rdx
    0000022e: 	movq	%r9, %rsi
    00000231: 	movq	%rcx, 0x28(%rsp)
    00000236: 	movq	%r10, 0x20(%rsp)
    0000023b: 	callq	memcpy@PLT # Offset: 571
    00000240: 	movq	0x58(%rsp), %r8
    00000245: 	movq	0x60(%rsp), %rax
    0000024a: 	movq	0x20(%rsp), %r10
    0000024f: 	movq	0x28(%rsp), %rcx
    00000254: 	jmp	.Ltmp1325 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp1317:
    00000260: 	movl	0x4c(%rsp), %eax
    00000264: 	movl	%eax, iterations(%rip)
    0000026a: 	movq	0x88(%rsp), %rax
    00000272: 	subq	%fs:0x28, %rax
    0000027b: 	jne	.Ltmp1326 # Offset: 635
    0000027d: 	addq	$0x98, %rsp
    00000284: 	popq	%rbx
    00000285: 	popq	%rbp
    00000286: 	popq	%r12
    00000288: 	popq	%r13
    0000028a: 	popq	%r14
    0000028c: 	popq	%r15
    0000028e: 	retq # Offset: 654
.Ltmp1321:
    0000028f: 	leaq	DATAat0x27008(%rip), %rdi
    00000296: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 662
.Ltmp1326:
    0000029b: 	callq	__stack_chk_fail@PLT # Offset: 667
.Ltmp1324:
    000002a0: 	movq	%r13, %rdi
    000002a3: 	jmp	.Ltmp1327 # Offset: 675
    000002a5: 	endbr64
    000002a9: 	movq	%rax, %rbp
    000002ac: 	movq	0x60(%rsp), %rdi
    000002b1: 	cmpq	%r13, %rdi
    000002b4: 	je	.Ltmp1328 # Offset: 692
    000002b6: 	movq	0x70(%rsp), %rax
    000002bb: 	leaq	0x1(%rax), %rsi
    000002bf: 	callq	_ZdlPvm@PLT # Offset: 703
.Ltmp1328:
    000002c4: 	movq	%rbp, %rdi
    000002c7: 	callq	_Unwind_Resume@PLT # Offset: 711
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_reverse_copy_sizesIPfPFS0_S0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12test_reverseI20BidirectionalPointerIhEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1(*2)" after disassembly {
  All names   : _Z12test_reverseI20BidirectionalPointerIhEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1
                _Z12test_reverseI20BidirectionalPointerIhEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/reverse_sequence.cpp/1
  Number      : 199
  State       : disassembled
  Address     : 0x12200
  Size        : 0x242
  MaxSize     : 0x250
  Offset      : 0x12200
  Section     : .text
  Orc Section : .local.text._Z12test_reverseI20BidirectionalPointerIhEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0198:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movq	%rsi, %r12
    0000000b: 	pushq	%rbp
    0000000c: 	movq	%rdi, %rbp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdx, %rbx
    00000013: 	subq	$0x18, %rsp
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0x8(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	callq	clock@PLT # Offset: 39
    0000002c: 	movq	%rax, start_time(%rip)
    00000033: 	movl	iterations(%rip), %eax
    00000039: 	testl	%eax, %eax
    0000003b: 	jle	.Ltmp1329 # Offset: 59
    0000003d: 	leaq	-0x1(%r12), %r8
    00000042: 	cmpq	%rbp, %r12
    00000045: 	je	.Ltmp1329 # Offset: 69
    00000047: 	cmpq	%r8, %rbp
    0000004a: 	je	.Ltmp1329 # Offset: 74
    0000004c: 	xorl	%edi, %edi
    0000004e: 	nop # Size: 2
.Ltmp1333:
    00000050: 	movq	%r8, %rdx
    00000053: 	movq	%rbp, %rax
    00000056: 	jmp	.Ltmp1330 # Offset: 86
    00000058: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1332:
    00000060: 	subq	$0x1, %rdx
    00000064: 	cmpq	%rdx, %rax
    00000067: 	je	.Ltmp1331 # Offset: 103
.Ltmp1330:
    00000069: 	movzbl	(%rdx), %esi
    0000006c: 	movzbl	(%rax), %ecx
    0000006f: 	addq	$0x1, %rax
    00000073: 	movb	%sil, -0x1(%rax)
    00000077: 	movb	%cl, (%rdx)
    00000079: 	cmpq	%rdx, %rax
    0000007c: 	jne	.Ltmp1332 # Offset: 124
.Ltmp1331:
    0000007e: 	addl	$0x1, %edi
    00000081: 	cmpl	iterations(%rip), %edi
    00000087: 	jl	.Ltmp1333 # Offset: 135
.Ltmp1329:
    00000089: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000090: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    00000097: 	subq	$0x20, %rax
    0000009b: 	cmpq	%rax, %r14
    0000009e: 	je	.Ltmp1334 # Offset: 158
    000000a4: 	leaq	0x10(%r14), %rdi
    000000a8: 	movq	0x8(%rbx), %r13
    000000ac: 	movq	%rdi, (%r14)
    000000af: 	movq	(%rbx), %r15
    000000b2: 	movq	%r15, %rax
    000000b5: 	addq	%r13, %rax
    000000b8: 	je	.Ltmp1335 # Offset: 184
    000000ba: 	testq	%r15, %r15
    000000bd: 	je	.Ltmp1336 # Offset: 189
.Ltmp1335:
    000000c3: 	movq	%r13, (%rsp)
    000000c7: 	cmpq	$0xf, %r13
    000000cb: 	ja	.Ltmp1337 # Offset: 203
    000000d1: 	cmpq	$0x1, %r13
    000000d5: 	jne	.Ltmp1338 # Offset: 213
    000000db: 	movzbl	(%r15), %eax
    000000df: 	movb	%al, 0x10(%r14)
.Ltmp1344:
    000000e3: 	movq	%r13, 0x8(%r14)
    000000e7: 	movb	$0x0, (%rdi,%r13)
    000000ec: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000f3: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000fa: 	addq	$0x20, %rax
    000000fe: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000105: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    0000010c: 	je	.Ltmp1339 # Offset: 268
.Ltmp1345:
    00000112: 	movq	-0x20(%rax), %r13
    00000116: 	callq	clock@PLT # Offset: 278
    0000011b: 	pxor	%xmm0, %xmm0
    0000011f: 	movq	%rax, end_time(%rip)
    00000126: 	movq	%r13, %rdi
    00000129: 	subq	start_time(%rip), %rax
    00000130: 	cvtsi2sd	%rax, %xmm0
    00000135: 	divsd	DATAat0x276b0(%rip), %xmm0
    0000013d: 	callq	_Z13record_resultdPKc # Offset: 317
    00000142: 	leaq	0x1(%rbp), %rax
    00000146: 	jmp	.Ltmp1340 # Offset: 326
    00000148: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1342:
    00000150: 	movzbl	(%rax), %edx
    00000153: 	addq	$0x1, %rax
    00000157: 	cmpb	-0x2(%rax), %dl
    0000015a: 	jb	.Ltmp1341 # Offset: 346
.Ltmp1340:
    0000015c: 	cmpq	%rax, %r12
    0000015f: 	jne	.Ltmp1342 # Offset: 351
    00000161: 	movq	0x8(%rsp), %rax
    00000166: 	subq	%fs:0x28, %rax
    0000016f: 	jne	.Ltmp1343 # Offset: 367
    00000175: 	addq	$0x18, %rsp
    00000179: 	popq	%rbx
    0000017a: 	popq	%rbp
    0000017b: 	popq	%r12
    0000017d: 	popq	%r13
    0000017f: 	popq	%r14
    00000181: 	popq	%r15
    00000183: 	retq # Offset: 387
.Ltmp1337:
    00000184: 	movq	%r14, %rdi
    00000187: 	movq	%rsp, %rsi
    0000018a: 	xorl	%edx, %edx
    0000018c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 396
    00000191: 	movq	%rax, (%r14)
    00000194: 	movq	%rax, %rdi
    00000197: 	movq	(%rsp), %rax
    0000019b: 	movq	%rax, 0x10(%r14)
.Ltmp1346:
    0000019f: 	movq	%r13, %rdx
    000001a2: 	movq	%r15, %rsi
    000001a5: 	callq	memcpy@PLT # Offset: 421
    000001aa: 	movq	(%rsp), %r13
    000001ae: 	movq	(%r14), %rdi
    000001b1: 	jmp	.Ltmp1344 # Offset: 433
.Ltmp1341:
    000001b6: 	movq	0x8(%rsp), %rax
    000001bb: 	subq	%fs:0x28, %rax
    000001c4: 	jne	.Ltmp1343 # Offset: 452
    000001c6: 	movq	(%rbx), %rdx
    000001c9: 	addq	$0x18, %rsp
    000001cd: 	leaq	DATAat0x271d0(%rip), %rsi
    000001d4: 	xorl	%eax, %eax
    000001d6: 	popq	%rbx
    000001d7: 	movl	$0x1, %edi
    000001dc: 	popq	%rbp
    000001dd: 	popq	%r12
    000001df: 	popq	%r13
    000001e1: 	popq	%r14
    000001e3: 	popq	%r15
    000001e5: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 485
.Ltmp1334:
    000001ea: 	movq	%rbx, %rsi
    000001ed: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000001f4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 500
    000001f9: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000200: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000207: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000020e: 	jne	.Ltmp1345 # Offset: 526
.Ltmp1339:
    00000214: 	movq	-0x8(%rdx), %rax
    00000218: 	addq	$0x200, %rax
    0000021e: 	jmp	.Ltmp1345 # Offset: 542
.Ltmp1338:
    00000223: 	testq	%r13, %r13
    00000226: 	je	.Ltmp1344 # Offset: 550
    0000022c: 	jmp	.Ltmp1346 # Offset: 556
.Ltmp1343:
    00000231: 	callq	__stack_chk_fail@PLT # Offset: 561
.Ltmp1336:
    00000236: 	leaq	DATAat0x27008(%rip), %rdi
    0000023d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 573
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_reverseI20BidirectionalPointerIhEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1(*2)"

Binary Function "_Z17test_reverse_copyIPiPFS0_S0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 200
  State       : disassembled
  Address     : 0x12450
  Size        : 0x2bf
  MaxSize     : 0x2c0
  Offset      : 0x12450
  Section     : .text
  Orc Section : .local.text._Z17test_reverse_copyIPiPFS0_S0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0199:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rcx, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdx, %rbx
    0000001d: 	subq	$0x28, %rsp
    00000021: 	movq	%r9, 0x8(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x18(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rcx, %rdx
    00000039: 	je	.Ltmp1347 # Offset: 57
    0000003b: 	movq	%rdx, %rax
    0000003e: 	leaq	-0x4(%rcx), %rdx
    00000042: 	subq	%rbx, %rdx
    00000045: 	movq	%rdx, %rcx
    00000048: 	shrq	$0x2, %rcx
    0000004c: 	addq	$0x1, %rcx
    00000050: 	cmpq	$0x8, %rdx
    00000054: 	jbe	.Ltmp1348 # Offset: 84
    00000056: 	movq	%rcx, %rdx
    00000059: 	movdqa	DATAat0x275c0(%rip), %xmm0
    00000061: 	shrq	$0x2, %rdx
    00000065: 	shlq	$0x4, %rdx
    00000069: 	addq	%rbx, %rdx
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp1349:
    00000070: 	movups	%xmm0, (%rax)
    00000073: 	addq	$0x10, %rax
    00000077: 	cmpq	%rdx, %rax
    0000007a: 	jne	.Ltmp1349 # Offset: 122
    0000007c: 	movq	%rcx, %rdx
    0000007f: 	andq	$-0x4, %rdx
    00000083: 	leaq	(%rbx,%rdx,4), %rax
    00000087: 	cmpq	%rdx, %rcx
    0000008a: 	je	.Ltmp1347 # Offset: 138
.Ltmp1348:
    0000008c: 	leaq	0x4(%rax), %rdx
    00000090: 	movl	$0x63, (%rax)
    00000096: 	cmpq	%rdx, %rbp
    00000099: 	je	.Ltmp1347 # Offset: 153
    0000009b: 	leaq	0x8(%rax), %rdx
    0000009f: 	movl	$0x63, 0x4(%rax)
    000000a6: 	cmpq	%rdx, %rbp
    000000a9: 	je	.Ltmp1347 # Offset: 169
    000000ab: 	movl	$0x63, 0x8(%rax)
.Ltmp1347:
    000000b2: 	callq	clock@PLT # Offset: 178
    000000b7: 	xorl	%r14d, %r14d
    000000ba: 	movq	%rax, start_time(%rip)
    000000c1: 	movl	iterations(%rip), %eax
    000000c7: 	testl	%eax, %eax
    000000c9: 	jle	.Ltmp1350 # Offset: 201
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1351:
    000000d0: 	movq	%rbx, %rdx
    000000d3: 	movq	%r13, %rsi
    000000d6: 	movq	%r12, %rdi
    000000d9: 	addl	$0x1, %r14d
    000000dd: 	callq	*%r15 # Offset: 221
    000000e0: 	cmpl	%r14d, iterations(%rip)
    000000e7: 	jg	.Ltmp1351 # Offset: 231
.Ltmp1350:
    000000e9: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000f0: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    000000f7: 	subq	$0x20, %rax
    000000fb: 	cmpq	%rax, %r13
    000000fe: 	je	.Ltmp1352 # Offset: 254
    00000104: 	movq	0x8(%rsp), %rax
    00000109: 	leaq	0x10(%r13), %rdi
    0000010d: 	movq	%rdi, (%r13)
    00000111: 	movq	(%rax), %r15
    00000114: 	movq	0x8(%rax), %r12
    00000118: 	movq	%r15, %rax
    0000011b: 	addq	%r12, %rax
    0000011e: 	je	.Ltmp1353 # Offset: 286
    00000120: 	testq	%r15, %r15
    00000123: 	je	.Ltmp1354 # Offset: 291
.Ltmp1353:
    00000129: 	movq	%r12, 0x10(%rsp)
    0000012e: 	cmpq	$0xf, %r12
    00000132: 	ja	.Ltmp1355 # Offset: 306
    00000138: 	cmpq	$0x1, %r12
    0000013c: 	jne	.Ltmp1356 # Offset: 316
    00000142: 	movzbl	(%r15), %eax
    00000146: 	movb	%al, 0x10(%r13)
.Ltmp1362:
    0000014a: 	movq	%r12, 0x8(%r13)
    0000014e: 	movb	$0x0, (%rdi,%r12)
    00000153: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000015a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000161: 	addq	$0x20, %rax
    00000165: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000016c: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000173: 	je	.Ltmp1357 # Offset: 371
.Ltmp1363:
    00000179: 	movq	-0x20(%rax), %r12
    0000017d: 	callq	clock@PLT # Offset: 381
    00000182: 	pxor	%xmm0, %xmm0
    00000186: 	movq	%rax, end_time(%rip)
    0000018d: 	movq	%r12, %rdi
    00000190: 	subq	start_time(%rip), %rax
    00000197: 	cvtsi2sd	%rax, %xmm0
    0000019c: 	divsd	DATAat0x276b0(%rip), %xmm0
    000001a4: 	callq	_Z13record_resultdPKc # Offset: 420
    000001a9: 	leaq	0x4(%rbx), %rax
    000001ad: 	jmp	.Ltmp1358 # Offset: 429
    000001af: 	nop # Size: 1
.Ltmp1360:
    000001b0: 	movl	-0x4(%rax), %edx
    000001b3: 	addq	$0x4, %rax
    000001b7: 	cmpl	-0x4(%rax), %edx
    000001ba: 	jl	.Ltmp1359 # Offset: 442
.Ltmp1358:
    000001bc: 	cmpq	%rax, %rbp
    000001bf: 	jne	.Ltmp1360 # Offset: 447
    000001c1: 	movq	0x18(%rsp), %rax
    000001c6: 	subq	%fs:0x28, %rax
    000001cf: 	jne	.Ltmp1361 # Offset: 463
    000001d5: 	addq	$0x28, %rsp
    000001d9: 	popq	%rbx
    000001da: 	popq	%rbp
    000001db: 	popq	%r12
    000001dd: 	popq	%r13
    000001df: 	popq	%r14
    000001e1: 	popq	%r15
    000001e3: 	retq # Offset: 483
    000001e4: 	nopl	(%rax) # Size: 4
.Ltmp1355:
    000001e8: 	movq	%r13, %rdi
    000001eb: 	leaq	0x10(%rsp), %rsi
    000001f0: 	xorl	%edx, %edx
    000001f2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 498
    000001f7: 	movq	%rax, (%r13)
    000001fb: 	movq	%rax, %rdi
    000001fe: 	movq	0x10(%rsp), %rax
    00000203: 	movq	%rax, 0x10(%r13)
.Ltmp1364:
    00000207: 	movq	%r12, %rdx
    0000020a: 	movq	%r15, %rsi
    0000020d: 	callq	memcpy@PLT # Offset: 525
    00000212: 	movq	0x10(%rsp), %r12
    00000217: 	movq	(%r13), %rdi
    0000021b: 	jmp	.Ltmp1362 # Offset: 539
.Ltmp1359:
    00000220: 	movq	0x18(%rsp), %rax
    00000225: 	subq	%fs:0x28, %rax
    0000022e: 	jne	.Ltmp1361 # Offset: 558
    00000230: 	movq	0x8(%rsp), %rax
    00000235: 	leaq	DATAat0x271d0(%rip), %rsi
    0000023c: 	movl	$0x1, %edi
    00000241: 	movq	(%rax), %rdx
    00000244: 	addq	$0x28, %rsp
    00000248: 	xorl	%eax, %eax
    0000024a: 	popq	%rbx
    0000024b: 	popq	%rbp
    0000024c: 	popq	%r12
    0000024e: 	popq	%r13
    00000250: 	popq	%r14
    00000252: 	popq	%r15
    00000254: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp1352:
    00000260: 	movq	0x8(%rsp), %rsi
    00000265: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000026c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 620
    00000271: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000278: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000027f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000286: 	jne	.Ltmp1363 # Offset: 646
.Ltmp1357:
    0000028c: 	movq	-0x8(%rdx), %rax
    00000290: 	addq	$0x200, %rax
    00000296: 	jmp	.Ltmp1363 # Offset: 662
    0000029b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1356:
    000002a0: 	testq	%r12, %r12
    000002a3: 	je	.Ltmp1362 # Offset: 675
    000002a9: 	jmp	.Ltmp1364 # Offset: 681
.Ltmp1361:
    000002ae: 	callq	__stack_chk_fail@PLT # Offset: 686
.Ltmp1354:
    000002b3: 	leaq	DATAat0x27008(%rip), %rdi
    000002ba: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 698
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_reverse_copyIPiPFS0_S0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23test_reverse_copy_sizesIPiPFS0_S0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 201
  State       : disassembled
  Address     : 0x12710
  Size        : 0x2cc
  MaxSize     : 0x2d0
  Offset      : 0x12710
  Section     : .text
  Orc Section : .local.text._Z23test_reverse_copy_sizesIPiPFS0_S0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0200:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	leaq	DATAat0x271e0(%rip), %rsi
    00000010: 	pushq	%r14
    00000012: 	movq	%rdi, %r14
    00000015: 	movl	$0x1, %edi
    0000001a: 	pushq	%r13
    0000001c: 	pushq	%r12
    0000001e: 	pushq	%rbp
    0000001f: 	movq	%r8, %rbp
    00000022: 	pushq	%rbx
    00000023: 	movl	%edx, %ebx
    00000025: 	subq	$0x98, %rsp
    0000002c: 	movl	%edx, 0x48(%rsp)
    00000030: 	movq	%rcx, 0x10(%rsp)
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x88(%rsp)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	movl	%eax, 0x4c(%rsp)
    00000050: 	xorl	%eax, %eax
    00000052: 	callq	__printf_chk@PLT # Offset: 82
    00000057: 	xorl	%eax, %eax
    00000059: 	movl	$0x1, %edi
    0000005e: 	leaq	DATAat0x27210(%rip), %rsi
    00000065: 	callq	__printf_chk@PLT # Offset: 101
    0000006a: 	cmpl	$0x3, %ebx
    0000006d: 	jle	.Ltmp1365 # Offset: 109
    00000073: 	movslq	0x4c(%rsp), %rax
    00000078: 	xorl	%r12d, %r12d
    0000007b: 	movl	$0x4, %ebx
    00000080: 	leaq	0x70(%rsp), %r13
    00000085: 	movq	%rax, 0x18(%rsp)
    0000008a: 	leaq	0x60(%rsp), %rax
    0000008f: 	movq	%rax, 0x8(%rsp)
    00000094: 	leaq	0x58(%rsp), %rax
    00000099: 	movq	%rax, 0x40(%rsp)
    0000009e: 	jmp	.Ltmp1366 # Offset: 158
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1371:
    000000a8: 	movzbl	(%r9), %eax
    000000ac: 	movb	%al, 0x70(%rsp)
    000000b0: 	movq	%r13, %rax
.Ltmp1373:
    000000b3: 	movq	%r8, 0x68(%rsp)
    000000b8: 	movq	0x8(%rsp), %r9
    000000bd: 	movq	%r15, %rdx
    000000c0: 	movq	%r10, %rsi
    000000c3: 	movb	$0x0, (%rax,%r8)
    000000c8: 	movq	0x10(%rsp), %r8
    000000cd: 	movq	%r14, %rdi
    000000d0: 	callq	_Z17test_reverse_copyIPiPFS0_S0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 208
    000000d5: 	movq	0x60(%rsp), %rdi
    000000da: 	cmpq	%r13, %rdi
    000000dd: 	je	.Ltmp1367 # Offset: 221
    000000df: 	movq	0x70(%rsp), %rax
    000000e4: 	leaq	0x1(%rax), %rsi
    000000e8: 	callq	_ZdlPvm@PLT # Offset: 232
.Ltmp1367:
    000000ed: 	pxor	%xmm1, %xmm1
    000000f1: 	pxor	%xmm2, %xmm2
    000000f5: 	movq	(%rbp), %rcx
    000000f9: 	movl	%ebx, %r8d
    000000fc: 	cvtsi2sd	%ebx, %xmm2
    00000100: 	movq	results(%rip), %rax
    00000107: 	movl	%r12d, %edx
    0000010a: 	addl	%ebx, %ebx
    0000010c: 	leaq	DATAat0x27240(%rip), %rsi
    00000113: 	movl	$0x1, %edi
    00000118: 	addl	$0x1, %r12d
    0000011c: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000124: 	movsd	(%rax), %xmm0
    00000128: 	movl	$0x2, %eax
    0000012d: 	mulsd	%xmm2, %xmm1
    00000131: 	divsd	DATAat0x276b0(%rip), %xmm1
    00000139: 	divsd	%xmm0, %xmm1
    0000013d: 	callq	__printf_chk@PLT # Offset: 317
    00000142: 	movl	$0x0, current_test(%rip)
    0000014c: 	cmpl	%ebx, 0x48(%rsp)
    00000150: 	jl	.Ltmp1365 # Offset: 336
.Ltmp1366:
    00000156: 	movl	0x48(%rsp), %eax
    0000015a: 	movq	(%rbp), %r9
    0000015e: 	movq	%r13, 0x60(%rsp)
    00000163: 	movq	0x8(%rbp), %r8
    00000167: 	cltd
    00000168: 	idivl	%ebx
    0000016a: 	movl	$0x4, %edx
    0000016f: 	cltq
    00000171: 	imulq	0x18(%rsp), %rax
    00000177: 	cmpq	%rdx, %rax
    0000017a: 	cmovlq	%rdx, %rax
    0000017e: 	movl	$0x70000000, %edx
    00000183: 	cmpq	%rdx, %rax
    00000186: 	cmovgq	%rdx, %rax
    0000018a: 	addq	$0x1, %rax
    0000018e: 	andq	$-0x2, %rax
    00000192: 	movl	%eax, iterations(%rip)
    00000198: 	movslq	%ebx, %rax
    0000019b: 	shlq	$0x2, %rax
    0000019f: 	leaq	(%r14,%rax), %r10
    000001a3: 	leaq	(%r15,%rax), %rcx
    000001a7: 	movq	%r9, %rax
    000001aa: 	addq	%r8, %rax
    000001ad: 	je	.Ltmp1368 # Offset: 429
    000001af: 	testq	%r9, %r9
    000001b2: 	je	.Ltmp1369 # Offset: 434
.Ltmp1368:
    000001b8: 	movq	%r8, 0x58(%rsp)
    000001bd: 	cmpq	$0xf, %r8
    000001c1: 	ja	.Ltmp1370 # Offset: 449
    000001c3: 	cmpq	$0x1, %r8
    000001c7: 	je	.Ltmp1371 # Offset: 455
    000001cd: 	testq	%r8, %r8
    000001d0: 	jne	.Ltmp1372 # Offset: 464
    000001d6: 	movq	%r13, %rax
    000001d9: 	jmp	.Ltmp1373 # Offset: 473
    000001de: 	nop # Size: 2
.Ltmp1370:
    000001e0: 	movq	0x8(%rsp), %rdi
    000001e5: 	movq	0x40(%rsp), %rsi
    000001ea: 	xorl	%edx, %edx
    000001ec: 	movq	%r8, 0x38(%rsp)
    000001f1: 	movq	%r9, 0x30(%rsp)
    000001f6: 	movq	%rcx, 0x28(%rsp)
    000001fb: 	movq	%r10, 0x20(%rsp)
    00000200: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 512
    00000205: 	movq	0x20(%rsp), %r10
    0000020a: 	movq	0x28(%rsp), %rcx
    0000020f: 	movq	%rax, 0x60(%rsp)
    00000214: 	movq	%rax, %rdi
    00000217: 	movq	0x58(%rsp), %rax
    0000021c: 	movq	0x30(%rsp), %r9
    00000221: 	movq	0x38(%rsp), %r8
    00000226: 	movq	%rax, 0x70(%rsp)
.Ltmp1375:
    0000022b: 	movq	%r8, %rdx
    0000022e: 	movq	%r9, %rsi
    00000231: 	movq	%rcx, 0x28(%rsp)
    00000236: 	movq	%r10, 0x20(%rsp)
    0000023b: 	callq	memcpy@PLT # Offset: 571
    00000240: 	movq	0x58(%rsp), %r8
    00000245: 	movq	0x60(%rsp), %rax
    0000024a: 	movq	0x20(%rsp), %r10
    0000024f: 	movq	0x28(%rsp), %rcx
    00000254: 	jmp	.Ltmp1373 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp1365:
    00000260: 	movl	0x4c(%rsp), %eax
    00000264: 	movl	%eax, iterations(%rip)
    0000026a: 	movq	0x88(%rsp), %rax
    00000272: 	subq	%fs:0x28, %rax
    0000027b: 	jne	.Ltmp1374 # Offset: 635
    0000027d: 	addq	$0x98, %rsp
    00000284: 	popq	%rbx
    00000285: 	popq	%rbp
    00000286: 	popq	%r12
    00000288: 	popq	%r13
    0000028a: 	popq	%r14
    0000028c: 	popq	%r15
    0000028e: 	retq # Offset: 654
.Ltmp1369:
    0000028f: 	leaq	DATAat0x27008(%rip), %rdi
    00000296: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 662
.Ltmp1374:
    0000029b: 	callq	__stack_chk_fail@PLT # Offset: 667
.Ltmp1372:
    000002a0: 	movq	%r13, %rdi
    000002a3: 	jmp	.Ltmp1375 # Offset: 675
    000002a5: 	endbr64
    000002a9: 	movq	%rax, %rbp
    000002ac: 	movq	0x60(%rsp), %rdi
    000002b1: 	cmpq	%r13, %rdi
    000002b4: 	je	.Ltmp1376 # Offset: 692
    000002b6: 	movq	0x70(%rsp), %rax
    000002bb: 	leaq	0x1(%rax), %rsi
    000002bf: 	callq	_ZdlPvm@PLT # Offset: 703
.Ltmp1376:
    000002c4: 	movq	%rbp, %rdi
    000002c7: 	callq	_Unwind_Resume@PLT # Offset: 711
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_reverse_copy_sizesIPiPFS0_S0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_reverse_copyIPmPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 202
  State       : disassembled
  Address     : 0x129e0
  Size        : 0x2af
  MaxSize     : 0x2b0
  Offset      : 0x129e0
  Section     : .text
  Orc Section : .local.text._Z17test_reverse_copyIPmPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0201:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rcx, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdx, %rbx
    0000001d: 	subq	$0x28, %rsp
    00000021: 	movq	%r9, 0x8(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x18(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rcx, %rdx
    00000039: 	je	.Ltmp1377 # Offset: 57
    0000003b: 	movq	%rdx, %rax
    0000003e: 	movq	%rcx, %rdx
    00000041: 	subq	%rbx, %rdx
    00000044: 	leaq	-0x8(%rdx), %rcx
    00000048: 	shrq	$0x3, %rcx
    0000004c: 	addq	$0x1, %rcx
    00000050: 	cmpq	$0x8, %rdx
    00000054: 	je	.Ltmp1378 # Offset: 84
    00000056: 	movq	%rcx, %rdx
    00000059: 	movdqa	DATAat0x275a0(%rip), %xmm0
    00000061: 	shrq	%rdx
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rbx, %rdx
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1379:
    00000070: 	movups	%xmm0, (%rax)
    00000073: 	addq	$0x10, %rax
    00000077: 	cmpq	%rdx, %rax
    0000007a: 	jne	.Ltmp1379 # Offset: 122
    0000007c: 	movq	%rcx, %rdx
    0000007f: 	andq	$-0x2, %rdx
    00000083: 	leaq	(%rbx,%rdx,8), %rax
    00000087: 	cmpq	%rdx, %rcx
    0000008a: 	je	.Ltmp1377 # Offset: 138
.Ltmp1378:
    0000008c: 	movq	$0x63, (%rax)
.Ltmp1377:
    00000093: 	callq	clock@PLT # Offset: 147
    00000098: 	xorl	%r14d, %r14d
    0000009b: 	movq	%rax, start_time(%rip)
    000000a2: 	movl	iterations(%rip), %eax
    000000a8: 	testl	%eax, %eax
    000000aa: 	jle	.Ltmp1380 # Offset: 170
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp1381:
    000000b0: 	movq	%rbx, %rdx
    000000b3: 	movq	%r13, %rsi
    000000b6: 	movq	%r12, %rdi
    000000b9: 	addl	$0x1, %r14d
    000000bd: 	callq	*%r15 # Offset: 189
    000000c0: 	cmpl	%r14d, iterations(%rip)
    000000c7: 	jg	.Ltmp1381 # Offset: 199
.Ltmp1380:
    000000c9: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000d0: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    000000d7: 	subq	$0x20, %rax
    000000db: 	cmpq	%rax, %r13
    000000de: 	je	.Ltmp1382 # Offset: 222
    000000e4: 	movq	0x8(%rsp), %rax
    000000e9: 	leaq	0x10(%r13), %rdi
    000000ed: 	movq	%rdi, (%r13)
    000000f1: 	movq	(%rax), %r15
    000000f4: 	movq	0x8(%rax), %r12
    000000f8: 	movq	%r15, %rax
    000000fb: 	addq	%r12, %rax
    000000fe: 	je	.Ltmp1383 # Offset: 254
    00000100: 	testq	%r15, %r15
    00000103: 	je	.Ltmp1384 # Offset: 259
.Ltmp1383:
    00000109: 	movq	%r12, 0x10(%rsp)
    0000010e: 	cmpq	$0xf, %r12
    00000112: 	ja	.Ltmp1385 # Offset: 274
    00000118: 	cmpq	$0x1, %r12
    0000011c: 	jne	.Ltmp1386 # Offset: 284
    00000122: 	movzbl	(%r15), %eax
    00000126: 	movb	%al, 0x10(%r13)
.Ltmp1392:
    0000012a: 	movq	%r12, 0x8(%r13)
    0000012e: 	movb	$0x0, (%rdi,%r12)
    00000133: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000013a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000141: 	addq	$0x20, %rax
    00000145: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000014c: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000153: 	je	.Ltmp1387 # Offset: 339
.Ltmp1393:
    00000159: 	movq	-0x20(%rax), %r12
    0000015d: 	callq	clock@PLT # Offset: 349
    00000162: 	pxor	%xmm0, %xmm0
    00000166: 	movq	%rax, end_time(%rip)
    0000016d: 	movq	%r12, %rdi
    00000170: 	subq	start_time(%rip), %rax
    00000177: 	cvtsi2sd	%rax, %xmm0
    0000017c: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000184: 	callq	_Z13record_resultdPKc # Offset: 388
    00000189: 	leaq	0x8(%rbx), %rax
    0000018d: 	jmp	.Ltmp1388 # Offset: 397
    0000018f: 	nop # Size: 1
.Ltmp1390:
    00000190: 	movq	-0x8(%rax), %rdx
    00000194: 	addq	$0x8, %rax
    00000198: 	cmpq	-0x8(%rax), %rdx
    0000019c: 	jb	.Ltmp1389 # Offset: 412
.Ltmp1388:
    0000019e: 	cmpq	%rax, %rbp
    000001a1: 	jne	.Ltmp1390 # Offset: 417
    000001a3: 	movq	0x18(%rsp), %rax
    000001a8: 	subq	%fs:0x28, %rax
    000001b1: 	jne	.Ltmp1391 # Offset: 433
    000001b7: 	addq	$0x28, %rsp
    000001bb: 	popq	%rbx
    000001bc: 	popq	%rbp
    000001bd: 	popq	%r12
    000001bf: 	popq	%r13
    000001c1: 	popq	%r14
    000001c3: 	popq	%r15
    000001c5: 	retq # Offset: 453
    000001c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1385:
    000001d0: 	movq	%r13, %rdi
    000001d3: 	leaq	0x10(%rsp), %rsi
    000001d8: 	xorl	%edx, %edx
    000001da: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 474
    000001df: 	movq	%rax, (%r13)
    000001e3: 	movq	%rax, %rdi
    000001e6: 	movq	0x10(%rsp), %rax
    000001eb: 	movq	%rax, 0x10(%r13)
.Ltmp1394:
    000001ef: 	movq	%r12, %rdx
    000001f2: 	movq	%r15, %rsi
    000001f5: 	callq	memcpy@PLT # Offset: 501
    000001fa: 	movq	0x10(%rsp), %r12
    000001ff: 	movq	(%r13), %rdi
    00000203: 	jmp	.Ltmp1392 # Offset: 515
    00000208: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1389:
    00000210: 	movq	0x18(%rsp), %rax
    00000215: 	subq	%fs:0x28, %rax
    0000021e: 	jne	.Ltmp1391 # Offset: 542
    00000220: 	movq	0x8(%rsp), %rax
    00000225: 	leaq	DATAat0x271d0(%rip), %rsi
    0000022c: 	movl	$0x1, %edi
    00000231: 	movq	(%rax), %rdx
    00000234: 	addq	$0x28, %rsp
    00000238: 	xorl	%eax, %eax
    0000023a: 	popq	%rbx
    0000023b: 	popq	%rbp
    0000023c: 	popq	%r12
    0000023e: 	popq	%r13
    00000240: 	popq	%r14
    00000242: 	popq	%r15
    00000244: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 580
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp1382:
    00000250: 	movq	0x8(%rsp), %rsi
    00000255: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000025c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 604
    00000261: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000268: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000026f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000276: 	jne	.Ltmp1393 # Offset: 630
.Ltmp1387:
    0000027c: 	movq	-0x8(%rdx), %rax
    00000280: 	addq	$0x200, %rax
    00000286: 	jmp	.Ltmp1393 # Offset: 646
    0000028b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1386:
    00000290: 	testq	%r12, %r12
    00000293: 	je	.Ltmp1392 # Offset: 659
    00000299: 	jmp	.Ltmp1394 # Offset: 665
.Ltmp1391:
    0000029e: 	callq	__stack_chk_fail@PLT # Offset: 670
.Ltmp1384:
    000002a3: 	leaq	DATAat0x27008(%rip), %rdi
    000002aa: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 682
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_reverse_copyIPmPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23test_reverse_copy_sizesIPmPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 203
  State       : disassembled
  Address     : 0x12c90
  Size        : 0x2cc
  MaxSize     : 0x2d0
  Offset      : 0x12c90
  Section     : .text
  Orc Section : .local.text._Z23test_reverse_copy_sizesIPmPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0202:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	leaq	DATAat0x271e0(%rip), %rsi
    00000010: 	pushq	%r14
    00000012: 	movq	%rdi, %r14
    00000015: 	movl	$0x1, %edi
    0000001a: 	pushq	%r13
    0000001c: 	pushq	%r12
    0000001e: 	pushq	%rbp
    0000001f: 	movq	%r8, %rbp
    00000022: 	pushq	%rbx
    00000023: 	movl	%edx, %ebx
    00000025: 	subq	$0x98, %rsp
    0000002c: 	movl	%edx, 0x48(%rsp)
    00000030: 	movq	%rcx, 0x10(%rsp)
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x88(%rsp)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	movl	%eax, 0x4c(%rsp)
    00000050: 	xorl	%eax, %eax
    00000052: 	callq	__printf_chk@PLT # Offset: 82
    00000057: 	xorl	%eax, %eax
    00000059: 	movl	$0x1, %edi
    0000005e: 	leaq	DATAat0x27210(%rip), %rsi
    00000065: 	callq	__printf_chk@PLT # Offset: 101
    0000006a: 	cmpl	$0x3, %ebx
    0000006d: 	jle	.Ltmp1395 # Offset: 109
    00000073: 	movslq	0x4c(%rsp), %rax
    00000078: 	xorl	%r12d, %r12d
    0000007b: 	movl	$0x4, %ebx
    00000080: 	leaq	0x70(%rsp), %r13
    00000085: 	movq	%rax, 0x18(%rsp)
    0000008a: 	leaq	0x60(%rsp), %rax
    0000008f: 	movq	%rax, 0x8(%rsp)
    00000094: 	leaq	0x58(%rsp), %rax
    00000099: 	movq	%rax, 0x40(%rsp)
    0000009e: 	jmp	.Ltmp1396 # Offset: 158
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1401:
    000000a8: 	movzbl	(%r9), %eax
    000000ac: 	movb	%al, 0x70(%rsp)
    000000b0: 	movq	%r13, %rax
.Ltmp1403:
    000000b3: 	movq	%r8, 0x68(%rsp)
    000000b8: 	movq	0x8(%rsp), %r9
    000000bd: 	movq	%r15, %rdx
    000000c0: 	movq	%r10, %rsi
    000000c3: 	movb	$0x0, (%rax,%r8)
    000000c8: 	movq	0x10(%rsp), %r8
    000000cd: 	movq	%r14, %rdi
    000000d0: 	callq	_Z17test_reverse_copyIPmPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 208
    000000d5: 	movq	0x60(%rsp), %rdi
    000000da: 	cmpq	%r13, %rdi
    000000dd: 	je	.Ltmp1397 # Offset: 221
    000000df: 	movq	0x70(%rsp), %rax
    000000e4: 	leaq	0x1(%rax), %rsi
    000000e8: 	callq	_ZdlPvm@PLT # Offset: 232
.Ltmp1397:
    000000ed: 	pxor	%xmm1, %xmm1
    000000f1: 	pxor	%xmm2, %xmm2
    000000f5: 	movq	(%rbp), %rcx
    000000f9: 	movl	%ebx, %r8d
    000000fc: 	cvtsi2sd	%ebx, %xmm2
    00000100: 	movq	results(%rip), %rax
    00000107: 	movl	%r12d, %edx
    0000010a: 	addl	%ebx, %ebx
    0000010c: 	leaq	DATAat0x27240(%rip), %rsi
    00000113: 	movl	$0x1, %edi
    00000118: 	addl	$0x1, %r12d
    0000011c: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000124: 	movsd	(%rax), %xmm0
    00000128: 	movl	$0x2, %eax
    0000012d: 	mulsd	%xmm2, %xmm1
    00000131: 	divsd	DATAat0x276b0(%rip), %xmm1
    00000139: 	divsd	%xmm0, %xmm1
    0000013d: 	callq	__printf_chk@PLT # Offset: 317
    00000142: 	movl	$0x0, current_test(%rip)
    0000014c: 	cmpl	%ebx, 0x48(%rsp)
    00000150: 	jl	.Ltmp1395 # Offset: 336
.Ltmp1396:
    00000156: 	movl	0x48(%rsp), %eax
    0000015a: 	movq	(%rbp), %r9
    0000015e: 	movq	%r13, 0x60(%rsp)
    00000163: 	movq	0x8(%rbp), %r8
    00000167: 	cltd
    00000168: 	idivl	%ebx
    0000016a: 	movl	$0x4, %edx
    0000016f: 	cltq
    00000171: 	imulq	0x18(%rsp), %rax
    00000177: 	cmpq	%rdx, %rax
    0000017a: 	cmovlq	%rdx, %rax
    0000017e: 	movl	$0x70000000, %edx
    00000183: 	cmpq	%rdx, %rax
    00000186: 	cmovgq	%rdx, %rax
    0000018a: 	addq	$0x1, %rax
    0000018e: 	andq	$-0x2, %rax
    00000192: 	movl	%eax, iterations(%rip)
    00000198: 	movslq	%ebx, %rax
    0000019b: 	shlq	$0x3, %rax
    0000019f: 	leaq	(%r14,%rax), %r10
    000001a3: 	leaq	(%r15,%rax), %rcx
    000001a7: 	movq	%r9, %rax
    000001aa: 	addq	%r8, %rax
    000001ad: 	je	.Ltmp1398 # Offset: 429
    000001af: 	testq	%r9, %r9
    000001b2: 	je	.Ltmp1399 # Offset: 434
.Ltmp1398:
    000001b8: 	movq	%r8, 0x58(%rsp)
    000001bd: 	cmpq	$0xf, %r8
    000001c1: 	ja	.Ltmp1400 # Offset: 449
    000001c3: 	cmpq	$0x1, %r8
    000001c7: 	je	.Ltmp1401 # Offset: 455
    000001cd: 	testq	%r8, %r8
    000001d0: 	jne	.Ltmp1402 # Offset: 464
    000001d6: 	movq	%r13, %rax
    000001d9: 	jmp	.Ltmp1403 # Offset: 473
    000001de: 	nop # Size: 2
.Ltmp1400:
    000001e0: 	movq	0x8(%rsp), %rdi
    000001e5: 	movq	0x40(%rsp), %rsi
    000001ea: 	xorl	%edx, %edx
    000001ec: 	movq	%r8, 0x38(%rsp)
    000001f1: 	movq	%r9, 0x30(%rsp)
    000001f6: 	movq	%rcx, 0x28(%rsp)
    000001fb: 	movq	%r10, 0x20(%rsp)
    00000200: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 512
    00000205: 	movq	0x20(%rsp), %r10
    0000020a: 	movq	0x28(%rsp), %rcx
    0000020f: 	movq	%rax, 0x60(%rsp)
    00000214: 	movq	%rax, %rdi
    00000217: 	movq	0x58(%rsp), %rax
    0000021c: 	movq	0x30(%rsp), %r9
    00000221: 	movq	0x38(%rsp), %r8
    00000226: 	movq	%rax, 0x70(%rsp)
.Ltmp1405:
    0000022b: 	movq	%r8, %rdx
    0000022e: 	movq	%r9, %rsi
    00000231: 	movq	%rcx, 0x28(%rsp)
    00000236: 	movq	%r10, 0x20(%rsp)
    0000023b: 	callq	memcpy@PLT # Offset: 571
    00000240: 	movq	0x58(%rsp), %r8
    00000245: 	movq	0x60(%rsp), %rax
    0000024a: 	movq	0x20(%rsp), %r10
    0000024f: 	movq	0x28(%rsp), %rcx
    00000254: 	jmp	.Ltmp1403 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp1395:
    00000260: 	movl	0x4c(%rsp), %eax
    00000264: 	movl	%eax, iterations(%rip)
    0000026a: 	movq	0x88(%rsp), %rax
    00000272: 	subq	%fs:0x28, %rax
    0000027b: 	jne	.Ltmp1404 # Offset: 635
    0000027d: 	addq	$0x98, %rsp
    00000284: 	popq	%rbx
    00000285: 	popq	%rbp
    00000286: 	popq	%r12
    00000288: 	popq	%r13
    0000028a: 	popq	%r14
    0000028c: 	popq	%r15
    0000028e: 	retq # Offset: 654
.Ltmp1399:
    0000028f: 	leaq	DATAat0x27008(%rip), %rdi
    00000296: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 662
.Ltmp1404:
    0000029b: 	callq	__stack_chk_fail@PLT # Offset: 667
.Ltmp1402:
    000002a0: 	movq	%r13, %rdi
    000002a3: 	jmp	.Ltmp1405 # Offset: 675
    000002a5: 	endbr64
    000002a9: 	movq	%rax, %rbp
    000002ac: 	movq	0x60(%rsp), %rdi
    000002b1: 	cmpq	%r13, %rdi
    000002b4: 	je	.Ltmp1406 # Offset: 692
    000002b6: 	movq	0x70(%rsp), %rax
    000002bb: 	leaq	0x1(%rax), %rsi
    000002bf: 	callq	_ZdlPvm@PLT # Offset: 703
.Ltmp1406:
    000002c4: 	movq	%rbp, %rdi
    000002c7: 	callq	_Unwind_Resume@PLT # Offset: 711
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_reverse_copy_sizesIPmPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_reverse_copyIPsPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 204
  State       : disassembled
  Address     : 0x12f60
  Size        : 0x308
  MaxSize     : 0x310
  Offset      : 0x12f60
  Section     : .text
  Orc Section : .local.text._Z17test_reverse_copyIPsPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0203:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rcx, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdx, %rbx
    0000001d: 	subq	$0x28, %rsp
    00000021: 	movq	%r9, 0x8(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x18(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rcx, %rdx
    00000039: 	je	.Ltmp1407 # Offset: 57
    0000003f: 	movq	%rdx, %rax
    00000042: 	leaq	-0x2(%rcx), %rdx
    00000046: 	subq	%rbx, %rdx
    00000049: 	movq	%rdx, %rcx
    0000004c: 	shrq	%rcx
    0000004f: 	leaq	0x1(%rcx), %rsi
    00000053: 	cmpq	$0xc, %rdx
    00000057: 	jbe	.Ltmp1408 # Offset: 87
    0000005d: 	movq	%rsi, %rdx
    00000060: 	movdqa	DATAat0x275b0(%rip), %xmm0
    00000068: 	shrq	$0x3, %rdx
    0000006c: 	shlq	$0x4, %rdx
    00000070: 	addq	%rbx, %rdx
    00000073: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1409:
    00000078: 	movups	%xmm0, (%rax)
    0000007b: 	addq	$0x10, %rax
    0000007f: 	cmpq	%rdx, %rax
    00000082: 	jne	.Ltmp1409 # Offset: 130
    00000084: 	movq	%rsi, %rdx
    00000087: 	andq	$-0x8, %rdx
    0000008b: 	leaq	(%rbx,%rdx,2), %rax
    0000008f: 	cmpq	%rdx, %rsi
    00000092: 	je	.Ltmp1407 # Offset: 146
.Ltmp1427:
    00000094: 	subq	%rdx, %rcx
    00000097: 	leaq	0x1(%rcx), %rsi
    0000009b: 	cmpq	$0x2, %rcx
    0000009f: 	jbe	.Ltmp1410 # Offset: 159
    000000a1: 	movq	DATAat0x275b0(%rip), %rcx
    000000a8: 	movq	%rcx, (%rbx,%rdx,2)
    000000ac: 	movq	%rsi, %rdx
    000000af: 	andq	$-0x4, %rdx
    000000b3: 	leaq	(%rax,%rdx,2), %rax
    000000b7: 	cmpq	%rdx, %rsi
    000000ba: 	je	.Ltmp1407 # Offset: 186
.Ltmp1410:
    000000bc: 	movl	$0x63, %esi
    000000c1: 	leaq	0x2(%rax), %rdx
    000000c5: 	movw	%si, (%rax)
    000000c8: 	cmpq	%rdx, %rbp
    000000cb: 	je	.Ltmp1407 # Offset: 203
    000000cd: 	movl	$0x63, %ecx
    000000d2: 	leaq	0x4(%rax), %rdx
    000000d6: 	movw	%cx, 0x2(%rax)
    000000da: 	cmpq	%rdx, %rbp
    000000dd: 	je	.Ltmp1407 # Offset: 221
    000000df: 	movl	$0x63, %edx
    000000e4: 	movw	%dx, 0x4(%rax)
.Ltmp1407:
    000000e8: 	callq	clock@PLT # Offset: 232
    000000ed: 	movl	iterations(%rip), %edi
    000000f3: 	xorl	%r14d, %r14d
    000000f6: 	movq	%rax, start_time(%rip)
    000000fd: 	testl	%edi, %edi
    000000ff: 	jle	.Ltmp1411 # Offset: 255
    00000101: 	nopl	(%rax) # Size: 7
.Ltmp1412:
    00000108: 	movq	%rbx, %rdx
    0000010b: 	movq	%r13, %rsi
    0000010e: 	movq	%r12, %rdi
    00000111: 	addl	$0x1, %r14d
    00000115: 	callq	*%r15 # Offset: 277
    00000118: 	cmpl	%r14d, iterations(%rip)
    0000011f: 	jg	.Ltmp1412 # Offset: 287
.Ltmp1411:
    00000121: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000128: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    0000012f: 	subq	$0x20, %rax
    00000133: 	cmpq	%rax, %r13
    00000136: 	je	.Ltmp1413 # Offset: 310
    0000013c: 	movq	0x8(%rsp), %rax
    00000141: 	leaq	0x10(%r13), %rdi
    00000145: 	movq	%rdi, (%r13)
    00000149: 	movq	(%rax), %r15
    0000014c: 	movq	0x8(%rax), %r12
    00000150: 	movq	%r15, %rax
    00000153: 	addq	%r12, %rax
    00000156: 	je	.Ltmp1414 # Offset: 342
    00000158: 	testq	%r15, %r15
    0000015b: 	je	.Ltmp1415 # Offset: 347
.Ltmp1414:
    00000161: 	movq	%r12, 0x10(%rsp)
    00000166: 	cmpq	$0xf, %r12
    0000016a: 	ja	.Ltmp1416 # Offset: 362
    00000170: 	cmpq	$0x1, %r12
    00000174: 	jne	.Ltmp1417 # Offset: 372
    0000017a: 	movzbl	(%r15), %eax
    0000017e: 	movb	%al, 0x10(%r13)
.Ltmp1423:
    00000182: 	movq	%r12, 0x8(%r13)
    00000186: 	movb	$0x0, (%rdi,%r12)
    0000018b: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000192: 	addq	$0x20, %rax
    00000196: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1425:
    0000019d: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001a4: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000001ab: 	je	.Ltmp1418 # Offset: 427
.Ltmp1424:
    000001b1: 	movq	-0x20(%rax), %r12
    000001b5: 	callq	clock@PLT # Offset: 437
    000001ba: 	pxor	%xmm0, %xmm0
    000001be: 	movq	%rax, end_time(%rip)
    000001c5: 	movq	%r12, %rdi
    000001c8: 	subq	start_time(%rip), %rax
    000001cf: 	cvtsi2sd	%rax, %xmm0
    000001d4: 	divsd	DATAat0x276b0(%rip), %xmm0
    000001dc: 	callq	_Z13record_resultdPKc # Offset: 476
    000001e1: 	leaq	0x2(%rbx), %rax
    000001e5: 	jmp	.Ltmp1419 # Offset: 485
    000001e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1421:
    000001f0: 	movzwl	-0x2(%rax), %edx
    000001f4: 	addq	$0x2, %rax
    000001f8: 	cmpw	-0x2(%rax), %dx
    000001fc: 	jl	.Ltmp1420 # Offset: 508
.Ltmp1419:
    000001fe: 	cmpq	%rax, %rbp
    00000201: 	jne	.Ltmp1421 # Offset: 513
    00000203: 	movq	0x18(%rsp), %rax
    00000208: 	subq	%fs:0x28, %rax
    00000211: 	jne	.Ltmp1422 # Offset: 529
    00000217: 	addq	$0x28, %rsp
    0000021b: 	popq	%rbx
    0000021c: 	popq	%rbp
    0000021d: 	popq	%r12
    0000021f: 	popq	%r13
    00000221: 	popq	%r14
    00000223: 	popq	%r15
    00000225: 	retq # Offset: 549
    00000226: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1416:
    00000230: 	movq	%r13, %rdi
    00000233: 	leaq	0x10(%rsp), %rsi
    00000238: 	xorl	%edx, %edx
    0000023a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 570
    0000023f: 	movq	%rax, (%r13)
    00000243: 	movq	%rax, %rdi
    00000246: 	movq	0x10(%rsp), %rax
    0000024b: 	movq	%rax, 0x10(%r13)
.Ltmp1426:
    0000024f: 	movq	%r12, %rdx
    00000252: 	movq	%r15, %rsi
    00000255: 	callq	memcpy@PLT # Offset: 597
    0000025a: 	movq	0x10(%rsp), %r12
    0000025f: 	movq	(%r13), %rdi
    00000263: 	jmp	.Ltmp1423 # Offset: 611
    00000268: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1420:
    00000270: 	movq	0x18(%rsp), %rax
    00000275: 	subq	%fs:0x28, %rax
    0000027e: 	jne	.Ltmp1422 # Offset: 638
    00000284: 	movq	0x8(%rsp), %rax
    00000289: 	leaq	DATAat0x271d0(%rip), %rsi
    00000290: 	movl	$0x1, %edi
    00000295: 	movq	(%rax), %rdx
    00000298: 	addq	$0x28, %rsp
    0000029c: 	xorl	%eax, %eax
    0000029e: 	popq	%rbx
    0000029f: 	popq	%rbp
    000002a0: 	popq	%r12
    000002a2: 	popq	%r13
    000002a4: 	popq	%r14
    000002a6: 	popq	%r15
    000002a8: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 680
    000002ad: 	nopl	(%rax) # Size: 3
.Ltmp1418:
    000002b0: 	movq	-0x8(%rdx), %rax
    000002b4: 	addq	$0x200, %rax
    000002ba: 	jmp	.Ltmp1424 # Offset: 698
    000002bf: 	nop # Size: 1
.Ltmp1413:
    000002c0: 	movq	0x8(%rsp), %rsi
    000002c5: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000002cc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 716
    000002d1: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000002d8: 	jmp	.Ltmp1425 # Offset: 728
    000002dd: 	nopl	(%rax) # Size: 3
.Ltmp1417:
    000002e0: 	testq	%r12, %r12
    000002e3: 	je	.Ltmp1423 # Offset: 739
    000002e9: 	jmp	.Ltmp1426 # Offset: 745
    000002ee: 	nop # Size: 2
.Ltmp1408:
    000002f0: 	xorl	%edx, %edx
    000002f2: 	jmp	.Ltmp1427 # Offset: 754
.Ltmp1415:
    000002f7: 	leaq	DATAat0x27008(%rip), %rdi
    000002fe: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 766
.Ltmp1422:
    00000303: 	callq	__stack_chk_fail@PLT # Offset: 771
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_reverse_copyIPsPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23test_reverse_copy_sizesIPsPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 205
  State       : disassembled
  Address     : 0x13270
  Size        : 0x2cc
  MaxSize     : 0x2d0
  Offset      : 0x13270
  Section     : .text
  Orc Section : .local.text._Z23test_reverse_copy_sizesIPsPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0204:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	leaq	DATAat0x271e0(%rip), %rsi
    00000010: 	pushq	%r14
    00000012: 	movq	%rdi, %r14
    00000015: 	movl	$0x1, %edi
    0000001a: 	pushq	%r13
    0000001c: 	pushq	%r12
    0000001e: 	pushq	%rbp
    0000001f: 	movq	%r8, %rbp
    00000022: 	pushq	%rbx
    00000023: 	movl	%edx, %ebx
    00000025: 	subq	$0x98, %rsp
    0000002c: 	movl	%edx, 0x48(%rsp)
    00000030: 	movq	%rcx, 0x10(%rsp)
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x88(%rsp)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	movl	%eax, 0x4c(%rsp)
    00000050: 	xorl	%eax, %eax
    00000052: 	callq	__printf_chk@PLT # Offset: 82
    00000057: 	xorl	%eax, %eax
    00000059: 	movl	$0x1, %edi
    0000005e: 	leaq	DATAat0x27210(%rip), %rsi
    00000065: 	callq	__printf_chk@PLT # Offset: 101
    0000006a: 	cmpl	$0x3, %ebx
    0000006d: 	jle	.Ltmp1428 # Offset: 109
    00000073: 	movslq	0x4c(%rsp), %rax
    00000078: 	xorl	%r12d, %r12d
    0000007b: 	movl	$0x4, %ebx
    00000080: 	leaq	0x70(%rsp), %r13
    00000085: 	movq	%rax, 0x18(%rsp)
    0000008a: 	leaq	0x60(%rsp), %rax
    0000008f: 	movq	%rax, 0x8(%rsp)
    00000094: 	leaq	0x58(%rsp), %rax
    00000099: 	movq	%rax, 0x40(%rsp)
    0000009e: 	jmp	.Ltmp1429 # Offset: 158
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1434:
    000000a8: 	movzbl	(%r9), %eax
    000000ac: 	movb	%al, 0x70(%rsp)
    000000b0: 	movq	%r13, %rax
.Ltmp1436:
    000000b3: 	movq	%r8, 0x68(%rsp)
    000000b8: 	movq	0x8(%rsp), %r9
    000000bd: 	movq	%r15, %rdx
    000000c0: 	movq	%r10, %rsi
    000000c3: 	movb	$0x0, (%rax,%r8)
    000000c8: 	movq	0x10(%rsp), %r8
    000000cd: 	movq	%r14, %rdi
    000000d0: 	callq	_Z17test_reverse_copyIPsPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 208
    000000d5: 	movq	0x60(%rsp), %rdi
    000000da: 	cmpq	%r13, %rdi
    000000dd: 	je	.Ltmp1430 # Offset: 221
    000000df: 	movq	0x70(%rsp), %rax
    000000e4: 	leaq	0x1(%rax), %rsi
    000000e8: 	callq	_ZdlPvm@PLT # Offset: 232
.Ltmp1430:
    000000ed: 	pxor	%xmm1, %xmm1
    000000f1: 	pxor	%xmm2, %xmm2
    000000f5: 	movq	(%rbp), %rcx
    000000f9: 	movl	%ebx, %r8d
    000000fc: 	cvtsi2sd	%ebx, %xmm2
    00000100: 	movq	results(%rip), %rax
    00000107: 	movl	%r12d, %edx
    0000010a: 	addl	%ebx, %ebx
    0000010c: 	leaq	DATAat0x27240(%rip), %rsi
    00000113: 	movl	$0x1, %edi
    00000118: 	addl	$0x1, %r12d
    0000011c: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000124: 	movsd	(%rax), %xmm0
    00000128: 	movl	$0x2, %eax
    0000012d: 	mulsd	%xmm2, %xmm1
    00000131: 	divsd	DATAat0x276b0(%rip), %xmm1
    00000139: 	divsd	%xmm0, %xmm1
    0000013d: 	callq	__printf_chk@PLT # Offset: 317
    00000142: 	movl	$0x0, current_test(%rip)
    0000014c: 	cmpl	%ebx, 0x48(%rsp)
    00000150: 	jl	.Ltmp1428 # Offset: 336
.Ltmp1429:
    00000156: 	movl	0x48(%rsp), %eax
    0000015a: 	movq	(%rbp), %r9
    0000015e: 	movq	%r13, 0x60(%rsp)
    00000163: 	movq	0x8(%rbp), %r8
    00000167: 	cltd
    00000168: 	idivl	%ebx
    0000016a: 	movl	$0x4, %edx
    0000016f: 	cltq
    00000171: 	imulq	0x18(%rsp), %rax
    00000177: 	cmpq	%rdx, %rax
    0000017a: 	cmovlq	%rdx, %rax
    0000017e: 	movl	$0x70000000, %edx
    00000183: 	cmpq	%rdx, %rax
    00000186: 	cmovgq	%rdx, %rax
    0000018a: 	addq	$0x1, %rax
    0000018e: 	andq	$-0x2, %rax
    00000192: 	movl	%eax, iterations(%rip)
    00000198: 	movslq	%ebx, %rax
    0000019b: 	addq	%rax, %rax
    0000019e: 	leaq	(%r14,%rax), %r10
    000001a2: 	leaq	(%r15,%rax), %rcx
    000001a6: 	movq	%r9, %rax
    000001a9: 	addq	%r8, %rax
    000001ac: 	je	.Ltmp1431 # Offset: 428
    000001ae: 	testq	%r9, %r9
    000001b1: 	je	.Ltmp1432 # Offset: 433
.Ltmp1431:
    000001b7: 	movq	%r8, 0x58(%rsp)
    000001bc: 	cmpq	$0xf, %r8
    000001c0: 	ja	.Ltmp1433 # Offset: 448
    000001c2: 	cmpq	$0x1, %r8
    000001c6: 	je	.Ltmp1434 # Offset: 454
    000001cc: 	testq	%r8, %r8
    000001cf: 	jne	.Ltmp1435 # Offset: 463
    000001d5: 	movq	%r13, %rax
    000001d8: 	jmp	.Ltmp1436 # Offset: 472
    000001dd: 	nopl	(%rax) # Size: 3
.Ltmp1433:
    000001e0: 	movq	0x8(%rsp), %rdi
    000001e5: 	movq	0x40(%rsp), %rsi
    000001ea: 	xorl	%edx, %edx
    000001ec: 	movq	%r8, 0x38(%rsp)
    000001f1: 	movq	%r9, 0x30(%rsp)
    000001f6: 	movq	%rcx, 0x28(%rsp)
    000001fb: 	movq	%r10, 0x20(%rsp)
    00000200: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 512
    00000205: 	movq	0x20(%rsp), %r10
    0000020a: 	movq	0x28(%rsp), %rcx
    0000020f: 	movq	%rax, 0x60(%rsp)
    00000214: 	movq	%rax, %rdi
    00000217: 	movq	0x58(%rsp), %rax
    0000021c: 	movq	0x30(%rsp), %r9
    00000221: 	movq	0x38(%rsp), %r8
    00000226: 	movq	%rax, 0x70(%rsp)
.Ltmp1438:
    0000022b: 	movq	%r8, %rdx
    0000022e: 	movq	%r9, %rsi
    00000231: 	movq	%rcx, 0x28(%rsp)
    00000236: 	movq	%r10, 0x20(%rsp)
    0000023b: 	callq	memcpy@PLT # Offset: 571
    00000240: 	movq	0x58(%rsp), %r8
    00000245: 	movq	0x60(%rsp), %rax
    0000024a: 	movq	0x20(%rsp), %r10
    0000024f: 	movq	0x28(%rsp), %rcx
    00000254: 	jmp	.Ltmp1436 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp1428:
    00000260: 	movl	0x4c(%rsp), %eax
    00000264: 	movl	%eax, iterations(%rip)
    0000026a: 	movq	0x88(%rsp), %rax
    00000272: 	subq	%fs:0x28, %rax
    0000027b: 	jne	.Ltmp1437 # Offset: 635
    0000027d: 	addq	$0x98, %rsp
    00000284: 	popq	%rbx
    00000285: 	popq	%rbp
    00000286: 	popq	%r12
    00000288: 	popq	%r13
    0000028a: 	popq	%r14
    0000028c: 	popq	%r15
    0000028e: 	retq # Offset: 654
.Ltmp1432:
    0000028f: 	leaq	DATAat0x27008(%rip), %rdi
    00000296: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 662
.Ltmp1437:
    0000029b: 	callq	__stack_chk_fail@PLT # Offset: 667
.Ltmp1435:
    000002a0: 	movq	%r13, %rdi
    000002a3: 	jmp	.Ltmp1438 # Offset: 675
    000002a5: 	endbr64
    000002a9: 	movq	%rax, %rbp
    000002ac: 	movq	0x60(%rsp), %rdi
    000002b1: 	cmpq	%r13, %rdi
    000002b4: 	je	.Ltmp1439 # Offset: 692
    000002b6: 	movq	0x70(%rsp), %rax
    000002bb: 	leaq	0x1(%rax), %rsi
    000002bf: 	callq	_ZdlPvm@PLT # Offset: 703
.Ltmp1439:
    000002c4: 	movq	%rbp, %rdi
    000002c7: 	callq	_Unwind_Resume@PLT # Offset: 711
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_reverse_copy_sizesIPsPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_reverse_copyIPiPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 206
  State       : disassembled
  Address     : 0x13540
  Size        : 0x2bf
  MaxSize     : 0x2c0
  Offset      : 0x13540
  Section     : .text
  Orc Section : .local.text._Z17test_reverse_copyIPiPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0205:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rcx, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdx, %rbx
    0000001d: 	subq	$0x28, %rsp
    00000021: 	movq	%r9, 0x8(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x18(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rcx, %rdx
    00000039: 	je	.Ltmp1440 # Offset: 57
    0000003b: 	movq	%rdx, %rax
    0000003e: 	leaq	-0x4(%rcx), %rdx
    00000042: 	subq	%rbx, %rdx
    00000045: 	movq	%rdx, %rcx
    00000048: 	shrq	$0x2, %rcx
    0000004c: 	addq	$0x1, %rcx
    00000050: 	cmpq	$0x8, %rdx
    00000054: 	jbe	.Ltmp1441 # Offset: 84
    00000056: 	movq	%rcx, %rdx
    00000059: 	movdqa	DATAat0x275c0(%rip), %xmm0
    00000061: 	shrq	$0x2, %rdx
    00000065: 	shlq	$0x4, %rdx
    00000069: 	addq	%rbx, %rdx
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp1442:
    00000070: 	movups	%xmm0, (%rax)
    00000073: 	addq	$0x10, %rax
    00000077: 	cmpq	%rdx, %rax
    0000007a: 	jne	.Ltmp1442 # Offset: 122
    0000007c: 	movq	%rcx, %rdx
    0000007f: 	andq	$-0x4, %rdx
    00000083: 	leaq	(%rbx,%rdx,4), %rax
    00000087: 	cmpq	%rdx, %rcx
    0000008a: 	je	.Ltmp1440 # Offset: 138
.Ltmp1441:
    0000008c: 	leaq	0x4(%rax), %rdx
    00000090: 	movl	$0x63, (%rax)
    00000096: 	cmpq	%rdx, %rbp
    00000099: 	je	.Ltmp1440 # Offset: 153
    0000009b: 	leaq	0x8(%rax), %rdx
    0000009f: 	movl	$0x63, 0x4(%rax)
    000000a6: 	cmpq	%rdx, %rbp
    000000a9: 	je	.Ltmp1440 # Offset: 169
    000000ab: 	movl	$0x63, 0x8(%rax)
.Ltmp1440:
    000000b2: 	callq	clock@PLT # Offset: 178
    000000b7: 	xorl	%r14d, %r14d
    000000ba: 	movq	%rax, start_time(%rip)
    000000c1: 	movl	iterations(%rip), %eax
    000000c7: 	testl	%eax, %eax
    000000c9: 	jle	.Ltmp1443 # Offset: 201
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1444:
    000000d0: 	movq	%rbx, %rdx
    000000d3: 	movq	%r13, %rsi
    000000d6: 	movq	%r12, %rdi
    000000d9: 	addl	$0x1, %r14d
    000000dd: 	callq	*%r15 # Offset: 221
    000000e0: 	cmpl	%r14d, iterations(%rip)
    000000e7: 	jg	.Ltmp1444 # Offset: 231
.Ltmp1443:
    000000e9: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000f0: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    000000f7: 	subq	$0x20, %rax
    000000fb: 	cmpq	%rax, %r13
    000000fe: 	je	.Ltmp1445 # Offset: 254
    00000104: 	movq	0x8(%rsp), %rax
    00000109: 	leaq	0x10(%r13), %rdi
    0000010d: 	movq	%rdi, (%r13)
    00000111: 	movq	(%rax), %r15
    00000114: 	movq	0x8(%rax), %r12
    00000118: 	movq	%r15, %rax
    0000011b: 	addq	%r12, %rax
    0000011e: 	je	.Ltmp1446 # Offset: 286
    00000120: 	testq	%r15, %r15
    00000123: 	je	.Ltmp1447 # Offset: 291
.Ltmp1446:
    00000129: 	movq	%r12, 0x10(%rsp)
    0000012e: 	cmpq	$0xf, %r12
    00000132: 	ja	.Ltmp1448 # Offset: 306
    00000138: 	cmpq	$0x1, %r12
    0000013c: 	jne	.Ltmp1449 # Offset: 316
    00000142: 	movzbl	(%r15), %eax
    00000146: 	movb	%al, 0x10(%r13)
.Ltmp1455:
    0000014a: 	movq	%r12, 0x8(%r13)
    0000014e: 	movb	$0x0, (%rdi,%r12)
    00000153: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000015a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000161: 	addq	$0x20, %rax
    00000165: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000016c: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000173: 	je	.Ltmp1450 # Offset: 371
.Ltmp1456:
    00000179: 	movq	-0x20(%rax), %r12
    0000017d: 	callq	clock@PLT # Offset: 381
    00000182: 	pxor	%xmm0, %xmm0
    00000186: 	movq	%rax, end_time(%rip)
    0000018d: 	movq	%r12, %rdi
    00000190: 	subq	start_time(%rip), %rax
    00000197: 	cvtsi2sd	%rax, %xmm0
    0000019c: 	divsd	DATAat0x276b0(%rip), %xmm0
    000001a4: 	callq	_Z13record_resultdPKc # Offset: 420
    000001a9: 	leaq	0x4(%rbx), %rax
    000001ad: 	jmp	.Ltmp1451 # Offset: 429
    000001af: 	nop # Size: 1
.Ltmp1453:
    000001b0: 	movl	-0x4(%rax), %edx
    000001b3: 	addq	$0x4, %rax
    000001b7: 	cmpl	-0x4(%rax), %edx
    000001ba: 	jl	.Ltmp1452 # Offset: 442
.Ltmp1451:
    000001bc: 	cmpq	%rax, %rbp
    000001bf: 	jne	.Ltmp1453 # Offset: 447
    000001c1: 	movq	0x18(%rsp), %rax
    000001c6: 	subq	%fs:0x28, %rax
    000001cf: 	jne	.Ltmp1454 # Offset: 463
    000001d5: 	addq	$0x28, %rsp
    000001d9: 	popq	%rbx
    000001da: 	popq	%rbp
    000001db: 	popq	%r12
    000001dd: 	popq	%r13
    000001df: 	popq	%r14
    000001e1: 	popq	%r15
    000001e3: 	retq # Offset: 483
    000001e4: 	nopl	(%rax) # Size: 4
.Ltmp1448:
    000001e8: 	movq	%r13, %rdi
    000001eb: 	leaq	0x10(%rsp), %rsi
    000001f0: 	xorl	%edx, %edx
    000001f2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 498
    000001f7: 	movq	%rax, (%r13)
    000001fb: 	movq	%rax, %rdi
    000001fe: 	movq	0x10(%rsp), %rax
    00000203: 	movq	%rax, 0x10(%r13)
.Ltmp1457:
    00000207: 	movq	%r12, %rdx
    0000020a: 	movq	%r15, %rsi
    0000020d: 	callq	memcpy@PLT # Offset: 525
    00000212: 	movq	0x10(%rsp), %r12
    00000217: 	movq	(%r13), %rdi
    0000021b: 	jmp	.Ltmp1455 # Offset: 539
.Ltmp1452:
    00000220: 	movq	0x18(%rsp), %rax
    00000225: 	subq	%fs:0x28, %rax
    0000022e: 	jne	.Ltmp1454 # Offset: 558
    00000230: 	movq	0x8(%rsp), %rax
    00000235: 	leaq	DATAat0x271d0(%rip), %rsi
    0000023c: 	movl	$0x1, %edi
    00000241: 	movq	(%rax), %rdx
    00000244: 	addq	$0x28, %rsp
    00000248: 	xorl	%eax, %eax
    0000024a: 	popq	%rbx
    0000024b: 	popq	%rbp
    0000024c: 	popq	%r12
    0000024e: 	popq	%r13
    00000250: 	popq	%r14
    00000252: 	popq	%r15
    00000254: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp1445:
    00000260: 	movq	0x8(%rsp), %rsi
    00000265: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000026c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 620
    00000271: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000278: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000027f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000286: 	jne	.Ltmp1456 # Offset: 646
.Ltmp1450:
    0000028c: 	movq	-0x8(%rdx), %rax
    00000290: 	addq	$0x200, %rax
    00000296: 	jmp	.Ltmp1456 # Offset: 662
    0000029b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1449:
    000002a0: 	testq	%r12, %r12
    000002a3: 	je	.Ltmp1455 # Offset: 675
    000002a9: 	jmp	.Ltmp1457 # Offset: 681
.Ltmp1454:
    000002ae: 	callq	__stack_chk_fail@PLT # Offset: 686
.Ltmp1447:
    000002b3: 	leaq	DATAat0x27008(%rip), %rdi
    000002ba: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 698
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_reverse_copyIPiPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23test_reverse_copy_sizesIPiPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 207
  State       : disassembled
  Address     : 0x13800
  Size        : 0x2cc
  MaxSize     : 0x2d0
  Offset      : 0x13800
  Section     : .text
  Orc Section : .local.text._Z23test_reverse_copy_sizesIPiPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0206:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	leaq	DATAat0x271e0(%rip), %rsi
    00000010: 	pushq	%r14
    00000012: 	movq	%rdi, %r14
    00000015: 	movl	$0x1, %edi
    0000001a: 	pushq	%r13
    0000001c: 	pushq	%r12
    0000001e: 	pushq	%rbp
    0000001f: 	movq	%r8, %rbp
    00000022: 	pushq	%rbx
    00000023: 	movl	%edx, %ebx
    00000025: 	subq	$0x98, %rsp
    0000002c: 	movl	%edx, 0x48(%rsp)
    00000030: 	movq	%rcx, 0x10(%rsp)
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x88(%rsp)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	movl	%eax, 0x4c(%rsp)
    00000050: 	xorl	%eax, %eax
    00000052: 	callq	__printf_chk@PLT # Offset: 82
    00000057: 	xorl	%eax, %eax
    00000059: 	movl	$0x1, %edi
    0000005e: 	leaq	DATAat0x27210(%rip), %rsi
    00000065: 	callq	__printf_chk@PLT # Offset: 101
    0000006a: 	cmpl	$0x3, %ebx
    0000006d: 	jle	.Ltmp1458 # Offset: 109
    00000073: 	movslq	0x4c(%rsp), %rax
    00000078: 	xorl	%r12d, %r12d
    0000007b: 	movl	$0x4, %ebx
    00000080: 	leaq	0x70(%rsp), %r13
    00000085: 	movq	%rax, 0x18(%rsp)
    0000008a: 	leaq	0x60(%rsp), %rax
    0000008f: 	movq	%rax, 0x8(%rsp)
    00000094: 	leaq	0x58(%rsp), %rax
    00000099: 	movq	%rax, 0x40(%rsp)
    0000009e: 	jmp	.Ltmp1459 # Offset: 158
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1464:
    000000a8: 	movzbl	(%r9), %eax
    000000ac: 	movb	%al, 0x70(%rsp)
    000000b0: 	movq	%r13, %rax
.Ltmp1466:
    000000b3: 	movq	%r8, 0x68(%rsp)
    000000b8: 	movq	0x8(%rsp), %r9
    000000bd: 	movq	%r15, %rdx
    000000c0: 	movq	%r10, %rsi
    000000c3: 	movb	$0x0, (%rax,%r8)
    000000c8: 	movq	0x10(%rsp), %r8
    000000cd: 	movq	%r14, %rdi
    000000d0: 	callq	_Z17test_reverse_copyIPiPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 208
    000000d5: 	movq	0x60(%rsp), %rdi
    000000da: 	cmpq	%r13, %rdi
    000000dd: 	je	.Ltmp1460 # Offset: 221
    000000df: 	movq	0x70(%rsp), %rax
    000000e4: 	leaq	0x1(%rax), %rsi
    000000e8: 	callq	_ZdlPvm@PLT # Offset: 232
.Ltmp1460:
    000000ed: 	pxor	%xmm1, %xmm1
    000000f1: 	pxor	%xmm2, %xmm2
    000000f5: 	movq	(%rbp), %rcx
    000000f9: 	movl	%ebx, %r8d
    000000fc: 	cvtsi2sd	%ebx, %xmm2
    00000100: 	movq	results(%rip), %rax
    00000107: 	movl	%r12d, %edx
    0000010a: 	addl	%ebx, %ebx
    0000010c: 	leaq	DATAat0x27240(%rip), %rsi
    00000113: 	movl	$0x1, %edi
    00000118: 	addl	$0x1, %r12d
    0000011c: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000124: 	movsd	(%rax), %xmm0
    00000128: 	movl	$0x2, %eax
    0000012d: 	mulsd	%xmm2, %xmm1
    00000131: 	divsd	DATAat0x276b0(%rip), %xmm1
    00000139: 	divsd	%xmm0, %xmm1
    0000013d: 	callq	__printf_chk@PLT # Offset: 317
    00000142: 	movl	$0x0, current_test(%rip)
    0000014c: 	cmpl	%ebx, 0x48(%rsp)
    00000150: 	jl	.Ltmp1458 # Offset: 336
.Ltmp1459:
    00000156: 	movl	0x48(%rsp), %eax
    0000015a: 	movq	(%rbp), %r9
    0000015e: 	movq	%r13, 0x60(%rsp)
    00000163: 	movq	0x8(%rbp), %r8
    00000167: 	cltd
    00000168: 	idivl	%ebx
    0000016a: 	movl	$0x4, %edx
    0000016f: 	cltq
    00000171: 	imulq	0x18(%rsp), %rax
    00000177: 	cmpq	%rdx, %rax
    0000017a: 	cmovlq	%rdx, %rax
    0000017e: 	movl	$0x70000000, %edx
    00000183: 	cmpq	%rdx, %rax
    00000186: 	cmovgq	%rdx, %rax
    0000018a: 	addq	$0x1, %rax
    0000018e: 	andq	$-0x2, %rax
    00000192: 	movl	%eax, iterations(%rip)
    00000198: 	movslq	%ebx, %rax
    0000019b: 	shlq	$0x2, %rax
    0000019f: 	leaq	(%r14,%rax), %r10
    000001a3: 	leaq	(%r15,%rax), %rcx
    000001a7: 	movq	%r9, %rax
    000001aa: 	addq	%r8, %rax
    000001ad: 	je	.Ltmp1461 # Offset: 429
    000001af: 	testq	%r9, %r9
    000001b2: 	je	.Ltmp1462 # Offset: 434
.Ltmp1461:
    000001b8: 	movq	%r8, 0x58(%rsp)
    000001bd: 	cmpq	$0xf, %r8
    000001c1: 	ja	.Ltmp1463 # Offset: 449
    000001c3: 	cmpq	$0x1, %r8
    000001c7: 	je	.Ltmp1464 # Offset: 455
    000001cd: 	testq	%r8, %r8
    000001d0: 	jne	.Ltmp1465 # Offset: 464
    000001d6: 	movq	%r13, %rax
    000001d9: 	jmp	.Ltmp1466 # Offset: 473
    000001de: 	nop # Size: 2
.Ltmp1463:
    000001e0: 	movq	0x8(%rsp), %rdi
    000001e5: 	movq	0x40(%rsp), %rsi
    000001ea: 	xorl	%edx, %edx
    000001ec: 	movq	%r8, 0x38(%rsp)
    000001f1: 	movq	%r9, 0x30(%rsp)
    000001f6: 	movq	%rcx, 0x28(%rsp)
    000001fb: 	movq	%r10, 0x20(%rsp)
    00000200: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 512
    00000205: 	movq	0x20(%rsp), %r10
    0000020a: 	movq	0x28(%rsp), %rcx
    0000020f: 	movq	%rax, 0x60(%rsp)
    00000214: 	movq	%rax, %rdi
    00000217: 	movq	0x58(%rsp), %rax
    0000021c: 	movq	0x30(%rsp), %r9
    00000221: 	movq	0x38(%rsp), %r8
    00000226: 	movq	%rax, 0x70(%rsp)
.Ltmp1468:
    0000022b: 	movq	%r8, %rdx
    0000022e: 	movq	%r9, %rsi
    00000231: 	movq	%rcx, 0x28(%rsp)
    00000236: 	movq	%r10, 0x20(%rsp)
    0000023b: 	callq	memcpy@PLT # Offset: 571
    00000240: 	movq	0x58(%rsp), %r8
    00000245: 	movq	0x60(%rsp), %rax
    0000024a: 	movq	0x20(%rsp), %r10
    0000024f: 	movq	0x28(%rsp), %rcx
    00000254: 	jmp	.Ltmp1466 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp1458:
    00000260: 	movl	0x4c(%rsp), %eax
    00000264: 	movl	%eax, iterations(%rip)
    0000026a: 	movq	0x88(%rsp), %rax
    00000272: 	subq	%fs:0x28, %rax
    0000027b: 	jne	.Ltmp1467 # Offset: 635
    0000027d: 	addq	$0x98, %rsp
    00000284: 	popq	%rbx
    00000285: 	popq	%rbp
    00000286: 	popq	%r12
    00000288: 	popq	%r13
    0000028a: 	popq	%r14
    0000028c: 	popq	%r15
    0000028e: 	retq # Offset: 654
.Ltmp1462:
    0000028f: 	leaq	DATAat0x27008(%rip), %rdi
    00000296: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 662
.Ltmp1467:
    0000029b: 	callq	__stack_chk_fail@PLT # Offset: 667
.Ltmp1465:
    000002a0: 	movq	%r13, %rdi
    000002a3: 	jmp	.Ltmp1468 # Offset: 675
    000002a5: 	endbr64
    000002a9: 	movq	%rax, %rbp
    000002ac: 	movq	0x60(%rsp), %rdi
    000002b1: 	cmpq	%r13, %rdi
    000002b4: 	je	.Ltmp1469 # Offset: 692
    000002b6: 	movq	0x70(%rsp), %rax
    000002bb: 	leaq	0x1(%rax), %rsi
    000002bf: 	callq	_ZdlPvm@PLT # Offset: 703
.Ltmp1469:
    000002c4: 	movq	%rbp, %rdi
    000002c7: 	callq	_Unwind_Resume@PLT # Offset: 711
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_reverse_copy_sizesIPiPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_reverse_copyIPhPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 208
  State       : disassembled
  Address     : 0x13ad0
  Size        : 0x25f
  MaxSize     : 0x260
  Offset      : 0x13ad0
  Section     : .text
  Orc Section : .local.text._Z17test_reverse_copyIPhPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0207:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%r8, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rcx, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdx, %rbx
    0000001d: 	subq	$0x28, %rsp
    00000021: 	movq	%r9, 0x8(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x18(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rcx, %rdx
    00000039: 	je	.Ltmp1470 # Offset: 57
    0000003b: 	movq	%rcx, %rdx
    0000003e: 	movl	$0x63, %esi
    00000043: 	movq	%rbx, %rdi
    00000046: 	subq	%rbx, %rdx
    00000049: 	callq	memset@PLT # Offset: 73
.Ltmp1470:
    0000004e: 	callq	clock@PLT # Offset: 78
    00000053: 	xorl	%r15d, %r15d
    00000056: 	movq	%rax, start_time(%rip)
    0000005d: 	movl	iterations(%rip), %eax
    00000063: 	testl	%eax, %eax
    00000065: 	jle	.Ltmp1471 # Offset: 101
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1472:
    00000070: 	movq	%rbx, %rdx
    00000073: 	movq	%r13, %rsi
    00000076: 	movq	%r12, %rdi
    00000079: 	addl	$0x1, %r15d
    0000007d: 	callq	*%r14 # Offset: 125
    00000080: 	cmpl	%r15d, iterations(%rip)
    00000087: 	jg	.Ltmp1472 # Offset: 135
.Ltmp1471:
    00000089: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000090: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    00000097: 	subq	$0x20, %rax
    0000009b: 	cmpq	%rax, %r13
    0000009e: 	je	.Ltmp1473 # Offset: 158
    000000a4: 	movq	0x8(%rsp), %rax
    000000a9: 	leaq	0x10(%r13), %rdi
    000000ad: 	movq	%rdi, (%r13)
    000000b1: 	movq	(%rax), %r14
    000000b4: 	movq	0x8(%rax), %r12
    000000b8: 	movq	%r14, %rax
    000000bb: 	addq	%r12, %rax
    000000be: 	je	.Ltmp1474 # Offset: 190
    000000c0: 	testq	%r14, %r14
    000000c3: 	je	.Ltmp1475 # Offset: 195
.Ltmp1474:
    000000c9: 	movq	%r12, 0x10(%rsp)
    000000ce: 	cmpq	$0xf, %r12
    000000d2: 	ja	.Ltmp1476 # Offset: 210
    000000d8: 	cmpq	$0x1, %r12
    000000dc: 	jne	.Ltmp1477 # Offset: 220
    000000e2: 	movzbl	(%r14), %eax
    000000e6: 	movb	%al, 0x10(%r13)
.Ltmp1483:
    000000ea: 	movq	%r12, 0x8(%r13)
    000000ee: 	movb	$0x0, (%rdi,%r12)
    000000f3: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000fa: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000101: 	addq	$0x20, %rax
    00000105: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000010c: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000113: 	je	.Ltmp1478 # Offset: 275
.Ltmp1484:
    00000119: 	movq	-0x20(%rax), %r12
    0000011d: 	subq	$0x1, %rbp
    00000121: 	callq	clock@PLT # Offset: 289
    00000126: 	pxor	%xmm0, %xmm0
    0000012a: 	movq	%rax, end_time(%rip)
    00000131: 	movq	%r12, %rdi
    00000134: 	subq	start_time(%rip), %rax
    0000013b: 	cvtsi2sd	%rax, %xmm0
    00000140: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000148: 	callq	_Z13record_resultdPKc # Offset: 328
    0000014d: 	jmp	.Ltmp1479 # Offset: 333
    0000014f: 	nop # Size: 1
.Ltmp1481:
    00000150: 	addq	$0x1, %rbx
    00000154: 	movzbl	(%rbx), %eax
    00000157: 	cmpb	%al, -0x1(%rbx)
    0000015a: 	jb	.Ltmp1480 # Offset: 346
.Ltmp1479:
    0000015c: 	cmpq	%rbp, %rbx
    0000015f: 	jne	.Ltmp1481 # Offset: 351
    00000161: 	movq	0x18(%rsp), %rax
    00000166: 	subq	%fs:0x28, %rax
    0000016f: 	jne	.Ltmp1482 # Offset: 367
    00000175: 	addq	$0x28, %rsp
    00000179: 	popq	%rbx
    0000017a: 	popq	%rbp
    0000017b: 	popq	%r12
    0000017d: 	popq	%r13
    0000017f: 	popq	%r14
    00000181: 	popq	%r15
    00000183: 	retq # Offset: 387
    00000184: 	nopl	(%rax) # Size: 4
.Ltmp1476:
    00000188: 	movq	%r13, %rdi
    0000018b: 	leaq	0x10(%rsp), %rsi
    00000190: 	xorl	%edx, %edx
    00000192: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 402
    00000197: 	movq	%rax, (%r13)
    0000019b: 	movq	%rax, %rdi
    0000019e: 	movq	0x10(%rsp), %rax
    000001a3: 	movq	%rax, 0x10(%r13)
.Ltmp1485:
    000001a7: 	movq	%r12, %rdx
    000001aa: 	movq	%r14, %rsi
    000001ad: 	callq	memcpy@PLT # Offset: 429
    000001b2: 	movq	0x10(%rsp), %r12
    000001b7: 	movq	(%r13), %rdi
    000001bb: 	jmp	.Ltmp1483 # Offset: 443
.Ltmp1480:
    000001c0: 	movq	0x18(%rsp), %rax
    000001c5: 	subq	%fs:0x28, %rax
    000001ce: 	jne	.Ltmp1482 # Offset: 462
    000001d0: 	movq	0x8(%rsp), %rax
    000001d5: 	leaq	DATAat0x271d0(%rip), %rsi
    000001dc: 	movl	$0x1, %edi
    000001e1: 	movq	(%rax), %rdx
    000001e4: 	addq	$0x28, %rsp
    000001e8: 	xorl	%eax, %eax
    000001ea: 	popq	%rbx
    000001eb: 	popq	%rbp
    000001ec: 	popq	%r12
    000001ee: 	popq	%r13
    000001f0: 	popq	%r14
    000001f2: 	popq	%r15
    000001f4: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 500
    000001f9: 	nopl	(%rax) # Size: 7
.Ltmp1473:
    00000200: 	movq	0x8(%rsp), %rsi
    00000205: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000020c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 524
    00000211: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000218: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000021f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000226: 	jne	.Ltmp1484 # Offset: 550
.Ltmp1478:
    0000022c: 	movq	-0x8(%rdx), %rax
    00000230: 	addq	$0x200, %rax
    00000236: 	jmp	.Ltmp1484 # Offset: 566
    0000023b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1477:
    00000240: 	testq	%r12, %r12
    00000243: 	je	.Ltmp1483 # Offset: 579
    00000249: 	jmp	.Ltmp1485 # Offset: 585
.Ltmp1482:
    0000024e: 	callq	__stack_chk_fail@PLT # Offset: 590
.Ltmp1475:
    00000253: 	leaq	DATAat0x27008(%rip), %rdi
    0000025a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 602
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_reverse_copyIPhPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23test_reverse_copy_sizesIPhPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 209
  State       : disassembled
  Address     : 0x13d30
  Size        : 0x2cc
  MaxSize     : 0x2d0
  Offset      : 0x13d30
  Section     : .text
  Orc Section : .local.text._Z23test_reverse_copy_sizesIPhPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0208:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	leaq	DATAat0x271e0(%rip), %rsi
    00000010: 	pushq	%r14
    00000012: 	movq	%rdi, %r14
    00000015: 	movl	$0x1, %edi
    0000001a: 	pushq	%r13
    0000001c: 	pushq	%r12
    0000001e: 	pushq	%rbp
    0000001f: 	movq	%r8, %rbp
    00000022: 	pushq	%rbx
    00000023: 	movl	%edx, %ebx
    00000025: 	subq	$0x98, %rsp
    0000002c: 	movl	%edx, 0x48(%rsp)
    00000030: 	movq	%rcx, 0x10(%rsp)
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x88(%rsp)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	movl	%eax, 0x4c(%rsp)
    00000050: 	xorl	%eax, %eax
    00000052: 	callq	__printf_chk@PLT # Offset: 82
    00000057: 	xorl	%eax, %eax
    00000059: 	movl	$0x1, %edi
    0000005e: 	leaq	DATAat0x27210(%rip), %rsi
    00000065: 	callq	__printf_chk@PLT # Offset: 101
    0000006a: 	cmpl	$0x3, %ebx
    0000006d: 	jle	.Ltmp1486 # Offset: 109
    00000073: 	movslq	0x4c(%rsp), %rax
    00000078: 	xorl	%r12d, %r12d
    0000007b: 	movl	$0x4, %ebx
    00000080: 	leaq	0x70(%rsp), %r13
    00000085: 	movq	%rax, 0x18(%rsp)
    0000008a: 	leaq	0x60(%rsp), %rax
    0000008f: 	movq	%rax, 0x8(%rsp)
    00000094: 	leaq	0x58(%rsp), %rax
    00000099: 	movq	%rax, 0x40(%rsp)
    0000009e: 	jmp	.Ltmp1487 # Offset: 158
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1492:
    000000a8: 	movzbl	(%r9), %eax
    000000ac: 	movb	%al, 0x70(%rsp)
    000000b0: 	movq	%r13, %rax
.Ltmp1494:
    000000b3: 	movq	%r8, 0x68(%rsp)
    000000b8: 	movq	0x8(%rsp), %r9
    000000bd: 	movq	%r15, %rdx
    000000c0: 	movq	%r10, %rsi
    000000c3: 	movb	$0x0, (%rax,%r8)
    000000c8: 	movq	0x10(%rsp), %r8
    000000cd: 	movq	%r14, %rdi
    000000d0: 	callq	_Z17test_reverse_copyIPhPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 208
    000000d5: 	movq	0x60(%rsp), %rdi
    000000da: 	cmpq	%r13, %rdi
    000000dd: 	je	.Ltmp1488 # Offset: 221
    000000df: 	movq	0x70(%rsp), %rax
    000000e4: 	leaq	0x1(%rax), %rsi
    000000e8: 	callq	_ZdlPvm@PLT # Offset: 232
.Ltmp1488:
    000000ed: 	pxor	%xmm1, %xmm1
    000000f1: 	pxor	%xmm2, %xmm2
    000000f5: 	movq	(%rbp), %rcx
    000000f9: 	movl	%ebx, %r8d
    000000fc: 	cvtsi2sd	%ebx, %xmm2
    00000100: 	movq	results(%rip), %rax
    00000107: 	movl	%r12d, %edx
    0000010a: 	addl	%ebx, %ebx
    0000010c: 	leaq	DATAat0x27240(%rip), %rsi
    00000113: 	movl	$0x1, %edi
    00000118: 	addl	$0x1, %r12d
    0000011c: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000124: 	movsd	(%rax), %xmm0
    00000128: 	movl	$0x2, %eax
    0000012d: 	mulsd	%xmm2, %xmm1
    00000131: 	divsd	DATAat0x276b0(%rip), %xmm1
    00000139: 	divsd	%xmm0, %xmm1
    0000013d: 	callq	__printf_chk@PLT # Offset: 317
    00000142: 	movl	$0x0, current_test(%rip)
    0000014c: 	cmpl	%ebx, 0x48(%rsp)
    00000150: 	jl	.Ltmp1486 # Offset: 336
.Ltmp1487:
    00000156: 	movl	0x48(%rsp), %eax
    0000015a: 	movq	(%rbp), %r9
    0000015e: 	movslq	%ebx, %rcx
    00000161: 	movq	%r13, 0x60(%rsp)
    00000166: 	movq	0x8(%rbp), %r8
    0000016a: 	leaq	(%r14,%rcx), %r10
    0000016e: 	cltd
    0000016f: 	idivl	%ebx
    00000171: 	movl	$0x4, %edx
    00000176: 	cltq
    00000178: 	imulq	0x18(%rsp), %rax
    0000017e: 	cmpq	%rdx, %rax
    00000181: 	cmovlq	%rdx, %rax
    00000185: 	movl	$0x70000000, %edx
    0000018a: 	cmpq	%rdx, %rax
    0000018d: 	cmovgq	%rdx, %rax
    00000191: 	addq	%r15, %rcx
    00000194: 	addq	$0x1, %rax
    00000198: 	andq	$-0x2, %rax
    0000019c: 	movl	%eax, iterations(%rip)
    000001a2: 	movq	%r9, %rax
    000001a5: 	addq	%r8, %rax
    000001a8: 	je	.Ltmp1489 # Offset: 424
    000001aa: 	testq	%r9, %r9
    000001ad: 	je	.Ltmp1490 # Offset: 429
.Ltmp1489:
    000001b3: 	movq	%r8, 0x58(%rsp)
    000001b8: 	cmpq	$0xf, %r8
    000001bc: 	ja	.Ltmp1491 # Offset: 444
    000001be: 	cmpq	$0x1, %r8
    000001c2: 	je	.Ltmp1492 # Offset: 450
    000001c8: 	testq	%r8, %r8
    000001cb: 	jne	.Ltmp1493 # Offset: 459
    000001d1: 	movq	%r13, %rax
    000001d4: 	jmp	.Ltmp1494 # Offset: 468
    000001d9: 	nopl	(%rax) # Size: 7
.Ltmp1491:
    000001e0: 	movq	0x8(%rsp), %rdi
    000001e5: 	movq	0x40(%rsp), %rsi
    000001ea: 	xorl	%edx, %edx
    000001ec: 	movq	%r8, 0x38(%rsp)
    000001f1: 	movq	%r9, 0x30(%rsp)
    000001f6: 	movq	%rcx, 0x28(%rsp)
    000001fb: 	movq	%r10, 0x20(%rsp)
    00000200: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 512
    00000205: 	movq	0x20(%rsp), %r10
    0000020a: 	movq	0x28(%rsp), %rcx
    0000020f: 	movq	%rax, 0x60(%rsp)
    00000214: 	movq	%rax, %rdi
    00000217: 	movq	0x58(%rsp), %rax
    0000021c: 	movq	0x30(%rsp), %r9
    00000221: 	movq	0x38(%rsp), %r8
    00000226: 	movq	%rax, 0x70(%rsp)
.Ltmp1496:
    0000022b: 	movq	%r8, %rdx
    0000022e: 	movq	%r9, %rsi
    00000231: 	movq	%rcx, 0x28(%rsp)
    00000236: 	movq	%r10, 0x20(%rsp)
    0000023b: 	callq	memcpy@PLT # Offset: 571
    00000240: 	movq	0x58(%rsp), %r8
    00000245: 	movq	0x60(%rsp), %rax
    0000024a: 	movq	0x20(%rsp), %r10
    0000024f: 	movq	0x28(%rsp), %rcx
    00000254: 	jmp	.Ltmp1494 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp1486:
    00000260: 	movl	0x4c(%rsp), %eax
    00000264: 	movl	%eax, iterations(%rip)
    0000026a: 	movq	0x88(%rsp), %rax
    00000272: 	subq	%fs:0x28, %rax
    0000027b: 	jne	.Ltmp1495 # Offset: 635
    0000027d: 	addq	$0x98, %rsp
    00000284: 	popq	%rbx
    00000285: 	popq	%rbp
    00000286: 	popq	%r12
    00000288: 	popq	%r13
    0000028a: 	popq	%r14
    0000028c: 	popq	%r15
    0000028e: 	retq # Offset: 654
.Ltmp1490:
    0000028f: 	leaq	DATAat0x27008(%rip), %rdi
    00000296: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 662
.Ltmp1495:
    0000029b: 	callq	__stack_chk_fail@PLT # Offset: 667
.Ltmp1493:
    000002a0: 	movq	%r13, %rdi
    000002a3: 	jmp	.Ltmp1496 # Offset: 675
    000002a5: 	endbr64
    000002a9: 	movq	%rax, %rbp
    000002ac: 	movq	0x60(%rsp), %rdi
    000002b1: 	cmpq	%r13, %rdi
    000002b4: 	je	.Ltmp1497 # Offset: 692
    000002b6: 	movq	0x70(%rsp), %rax
    000002bb: 	leaq	0x1(%rax), %rsi
    000002bf: 	callq	_ZdlPvm@PLT # Offset: 703
.Ltmp1497:
    000002c4: 	movq	%rbp, %rdi
    000002c7: 	callq	_Unwind_Resume@PLT # Offset: 711
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_reverse_copy_sizesIPhPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_reverse_copyIPdPFS0_S0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 210
  State       : disassembled
  Address     : 0x14000
  Size        : 0x2af
  MaxSize     : 0x2b0
  Offset      : 0x14000
  Section     : .text
  Orc Section : .local.text._Z17test_reverse_copyIPdPFS0_S0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0209:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rcx, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdx, %rbx
    0000001d: 	subq	$0x28, %rsp
    00000021: 	movq	%r9, 0x8(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x18(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rcx, %rdx
    00000039: 	je	.Ltmp1498 # Offset: 57
    0000003b: 	movq	%rdx, %rax
    0000003e: 	movq	%rcx, %rdx
    00000041: 	subq	%rbx, %rdx
    00000044: 	leaq	-0x8(%rdx), %rcx
    00000048: 	shrq	$0x3, %rcx
    0000004c: 	addq	$0x1, %rcx
    00000050: 	cmpq	$0x8, %rdx
    00000054: 	je	.Ltmp1499 # Offset: 84
    00000056: 	movq	%rcx, %rdx
    00000059: 	movapd	DATAat0x275d0(%rip), %xmm0
    00000061: 	shrq	%rdx
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rbx, %rdx
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1500:
    00000070: 	movups	%xmm0, (%rax)
    00000073: 	addq	$0x10, %rax
    00000077: 	cmpq	%rdx, %rax
    0000007a: 	jne	.Ltmp1500 # Offset: 122
    0000007c: 	movq	%rcx, %rdx
    0000007f: 	andq	$-0x2, %rdx
    00000083: 	leaq	(%rbx,%rdx,8), %rax
    00000087: 	cmpq	%rdx, %rcx
    0000008a: 	je	.Ltmp1498 # Offset: 138
.Ltmp1499:
    0000008c: 	movq	DATAat0x275d0(%rip), %rcx
    00000093: 	movq	%rcx, (%rax)
.Ltmp1498:
    00000096: 	callq	clock@PLT # Offset: 150
    0000009b: 	xorl	%r14d, %r14d
    0000009e: 	movq	%rax, start_time(%rip)
    000000a5: 	movl	iterations(%rip), %eax
    000000ab: 	testl	%eax, %eax
    000000ad: 	jle	.Ltmp1501 # Offset: 173
    000000af: 	nop # Size: 1
.Ltmp1502:
    000000b0: 	movq	%rbx, %rdx
    000000b3: 	movq	%r13, %rsi
    000000b6: 	movq	%r12, %rdi
    000000b9: 	addl	$0x1, %r14d
    000000bd: 	callq	*%r15 # Offset: 189
    000000c0: 	cmpl	%r14d, iterations(%rip)
    000000c7: 	jg	.Ltmp1502 # Offset: 199
.Ltmp1501:
    000000c9: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000d0: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    000000d7: 	subq	$0x20, %rax
    000000db: 	cmpq	%rax, %r13
    000000de: 	je	.Ltmp1503 # Offset: 222
    000000e4: 	movq	0x8(%rsp), %rax
    000000e9: 	leaq	0x10(%r13), %rdi
    000000ed: 	movq	%rdi, (%r13)
    000000f1: 	movq	(%rax), %r15
    000000f4: 	movq	0x8(%rax), %r12
    000000f8: 	movq	%r15, %rax
    000000fb: 	addq	%r12, %rax
    000000fe: 	je	.Ltmp1504 # Offset: 254
    00000100: 	testq	%r15, %r15
    00000103: 	je	.Ltmp1505 # Offset: 259
.Ltmp1504:
    00000109: 	movq	%r12, 0x10(%rsp)
    0000010e: 	cmpq	$0xf, %r12
    00000112: 	ja	.Ltmp1506 # Offset: 274
    00000118: 	cmpq	$0x1, %r12
    0000011c: 	jne	.Ltmp1507 # Offset: 284
    00000122: 	movzbl	(%r15), %eax
    00000126: 	movb	%al, 0x10(%r13)
.Ltmp1513:
    0000012a: 	movq	%r12, 0x8(%r13)
    0000012e: 	movb	$0x0, (%rdi,%r12)
    00000133: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000013a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000141: 	addq	$0x20, %rax
    00000145: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000014c: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000153: 	je	.Ltmp1508 # Offset: 339
.Ltmp1514:
    00000159: 	movq	-0x20(%rax), %r12
    0000015d: 	callq	clock@PLT # Offset: 349
    00000162: 	pxor	%xmm0, %xmm0
    00000166: 	movq	%rax, end_time(%rip)
    0000016d: 	movq	%r12, %rdi
    00000170: 	subq	start_time(%rip), %rax
    00000177: 	cvtsi2sd	%rax, %xmm0
    0000017c: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000184: 	callq	_Z13record_resultdPKc # Offset: 388
    00000189: 	leaq	0x8(%rbx), %rax
    0000018d: 	jmp	.Ltmp1509 # Offset: 397
    0000018f: 	nop # Size: 1
.Ltmp1511:
    00000190: 	movsd	-0x8(%rax), %xmm0
    00000195: 	movsd	(%rax), %xmm1
    00000199: 	addq	$0x8, %rax
    0000019d: 	comisd	%xmm0, %xmm1
    000001a1: 	ja	.Ltmp1510 # Offset: 417
.Ltmp1509:
    000001a3: 	cmpq	%rax, %rbp
    000001a6: 	jne	.Ltmp1511 # Offset: 422
    000001a8: 	movq	0x18(%rsp), %rax
    000001ad: 	subq	%fs:0x28, %rax
    000001b6: 	jne	.Ltmp1512 # Offset: 438
    000001bc: 	addq	$0x28, %rsp
    000001c0: 	popq	%rbx
    000001c1: 	popq	%rbp
    000001c2: 	popq	%r12
    000001c4: 	popq	%r13
    000001c6: 	popq	%r14
    000001c8: 	popq	%r15
    000001ca: 	retq # Offset: 458
    000001cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1506:
    000001d0: 	movq	%r13, %rdi
    000001d3: 	leaq	0x10(%rsp), %rsi
    000001d8: 	xorl	%edx, %edx
    000001da: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 474
    000001df: 	movq	%rax, (%r13)
    000001e3: 	movq	%rax, %rdi
    000001e6: 	movq	0x10(%rsp), %rax
    000001eb: 	movq	%rax, 0x10(%r13)
.Ltmp1515:
    000001ef: 	movq	%r12, %rdx
    000001f2: 	movq	%r15, %rsi
    000001f5: 	callq	memcpy@PLT # Offset: 501
    000001fa: 	movq	0x10(%rsp), %r12
    000001ff: 	movq	(%r13), %rdi
    00000203: 	jmp	.Ltmp1513 # Offset: 515
    00000208: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1510:
    00000210: 	movq	0x18(%rsp), %rax
    00000215: 	subq	%fs:0x28, %rax
    0000021e: 	jne	.Ltmp1512 # Offset: 542
    00000220: 	movq	0x8(%rsp), %rax
    00000225: 	leaq	DATAat0x271d0(%rip), %rsi
    0000022c: 	movl	$0x1, %edi
    00000231: 	movq	(%rax), %rdx
    00000234: 	addq	$0x28, %rsp
    00000238: 	xorl	%eax, %eax
    0000023a: 	popq	%rbx
    0000023b: 	popq	%rbp
    0000023c: 	popq	%r12
    0000023e: 	popq	%r13
    00000240: 	popq	%r14
    00000242: 	popq	%r15
    00000244: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 580
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp1503:
    00000250: 	movq	0x8(%rsp), %rsi
    00000255: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000025c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 604
    00000261: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000268: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000026f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000276: 	jne	.Ltmp1514 # Offset: 630
.Ltmp1508:
    0000027c: 	movq	-0x8(%rdx), %rax
    00000280: 	addq	$0x200, %rax
    00000286: 	jmp	.Ltmp1514 # Offset: 646
    0000028b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1507:
    00000290: 	testq	%r12, %r12
    00000293: 	je	.Ltmp1513 # Offset: 659
    00000299: 	jmp	.Ltmp1515 # Offset: 665
.Ltmp1512:
    0000029e: 	callq	__stack_chk_fail@PLT # Offset: 670
.Ltmp1505:
    000002a3: 	leaq	DATAat0x27008(%rip), %rdi
    000002aa: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 682
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_reverse_copyIPdPFS0_S0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23test_reverse_copy_sizesIPdPFS0_S0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 211
  State       : disassembled
  Address     : 0x142b0
  Size        : 0x2cc
  MaxSize     : 0x2d0
  Offset      : 0x142b0
  Section     : .text
  Orc Section : .local.text._Z23test_reverse_copy_sizesIPdPFS0_S0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0210:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	leaq	DATAat0x271e0(%rip), %rsi
    00000010: 	pushq	%r14
    00000012: 	movq	%rdi, %r14
    00000015: 	movl	$0x1, %edi
    0000001a: 	pushq	%r13
    0000001c: 	pushq	%r12
    0000001e: 	pushq	%rbp
    0000001f: 	movq	%r8, %rbp
    00000022: 	pushq	%rbx
    00000023: 	movl	%edx, %ebx
    00000025: 	subq	$0x98, %rsp
    0000002c: 	movl	%edx, 0x48(%rsp)
    00000030: 	movq	%rcx, 0x10(%rsp)
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x88(%rsp)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	movl	%eax, 0x4c(%rsp)
    00000050: 	xorl	%eax, %eax
    00000052: 	callq	__printf_chk@PLT # Offset: 82
    00000057: 	xorl	%eax, %eax
    00000059: 	movl	$0x1, %edi
    0000005e: 	leaq	DATAat0x27210(%rip), %rsi
    00000065: 	callq	__printf_chk@PLT # Offset: 101
    0000006a: 	cmpl	$0x3, %ebx
    0000006d: 	jle	.Ltmp1516 # Offset: 109
    00000073: 	movslq	0x4c(%rsp), %rax
    00000078: 	xorl	%r12d, %r12d
    0000007b: 	movl	$0x4, %ebx
    00000080: 	leaq	0x70(%rsp), %r13
    00000085: 	movq	%rax, 0x18(%rsp)
    0000008a: 	leaq	0x60(%rsp), %rax
    0000008f: 	movq	%rax, 0x8(%rsp)
    00000094: 	leaq	0x58(%rsp), %rax
    00000099: 	movq	%rax, 0x40(%rsp)
    0000009e: 	jmp	.Ltmp1517 # Offset: 158
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1522:
    000000a8: 	movzbl	(%r9), %eax
    000000ac: 	movb	%al, 0x70(%rsp)
    000000b0: 	movq	%r13, %rax
.Ltmp1524:
    000000b3: 	movq	%r8, 0x68(%rsp)
    000000b8: 	movq	0x8(%rsp), %r9
    000000bd: 	movq	%r15, %rdx
    000000c0: 	movq	%r10, %rsi
    000000c3: 	movb	$0x0, (%rax,%r8)
    000000c8: 	movq	0x10(%rsp), %r8
    000000cd: 	movq	%r14, %rdi
    000000d0: 	callq	_Z17test_reverse_copyIPdPFS0_S0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 208
    000000d5: 	movq	0x60(%rsp), %rdi
    000000da: 	cmpq	%r13, %rdi
    000000dd: 	je	.Ltmp1518 # Offset: 221
    000000df: 	movq	0x70(%rsp), %rax
    000000e4: 	leaq	0x1(%rax), %rsi
    000000e8: 	callq	_ZdlPvm@PLT # Offset: 232
.Ltmp1518:
    000000ed: 	pxor	%xmm1, %xmm1
    000000f1: 	pxor	%xmm2, %xmm2
    000000f5: 	movq	(%rbp), %rcx
    000000f9: 	movl	%ebx, %r8d
    000000fc: 	cvtsi2sd	%ebx, %xmm2
    00000100: 	movq	results(%rip), %rax
    00000107: 	movl	%r12d, %edx
    0000010a: 	addl	%ebx, %ebx
    0000010c: 	leaq	DATAat0x27240(%rip), %rsi
    00000113: 	movl	$0x1, %edi
    00000118: 	addl	$0x1, %r12d
    0000011c: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000124: 	movsd	(%rax), %xmm0
    00000128: 	movl	$0x2, %eax
    0000012d: 	mulsd	%xmm2, %xmm1
    00000131: 	divsd	DATAat0x276b0(%rip), %xmm1
    00000139: 	divsd	%xmm0, %xmm1
    0000013d: 	callq	__printf_chk@PLT # Offset: 317
    00000142: 	movl	$0x0, current_test(%rip)
    0000014c: 	cmpl	%ebx, 0x48(%rsp)
    00000150: 	jl	.Ltmp1516 # Offset: 336
.Ltmp1517:
    00000156: 	movl	0x48(%rsp), %eax
    0000015a: 	movq	(%rbp), %r9
    0000015e: 	movq	%r13, 0x60(%rsp)
    00000163: 	movq	0x8(%rbp), %r8
    00000167: 	cltd
    00000168: 	idivl	%ebx
    0000016a: 	movl	$0x4, %edx
    0000016f: 	cltq
    00000171: 	imulq	0x18(%rsp), %rax
    00000177: 	cmpq	%rdx, %rax
    0000017a: 	cmovlq	%rdx, %rax
    0000017e: 	movl	$0x70000000, %edx
    00000183: 	cmpq	%rdx, %rax
    00000186: 	cmovgq	%rdx, %rax
    0000018a: 	addq	$0x1, %rax
    0000018e: 	andq	$-0x2, %rax
    00000192: 	movl	%eax, iterations(%rip)
    00000198: 	movslq	%ebx, %rax
    0000019b: 	shlq	$0x3, %rax
    0000019f: 	leaq	(%r14,%rax), %r10
    000001a3: 	leaq	(%r15,%rax), %rcx
    000001a7: 	movq	%r9, %rax
    000001aa: 	addq	%r8, %rax
    000001ad: 	je	.Ltmp1519 # Offset: 429
    000001af: 	testq	%r9, %r9
    000001b2: 	je	.Ltmp1520 # Offset: 434
.Ltmp1519:
    000001b8: 	movq	%r8, 0x58(%rsp)
    000001bd: 	cmpq	$0xf, %r8
    000001c1: 	ja	.Ltmp1521 # Offset: 449
    000001c3: 	cmpq	$0x1, %r8
    000001c7: 	je	.Ltmp1522 # Offset: 455
    000001cd: 	testq	%r8, %r8
    000001d0: 	jne	.Ltmp1523 # Offset: 464
    000001d6: 	movq	%r13, %rax
    000001d9: 	jmp	.Ltmp1524 # Offset: 473
    000001de: 	nop # Size: 2
.Ltmp1521:
    000001e0: 	movq	0x8(%rsp), %rdi
    000001e5: 	movq	0x40(%rsp), %rsi
    000001ea: 	xorl	%edx, %edx
    000001ec: 	movq	%r8, 0x38(%rsp)
    000001f1: 	movq	%r9, 0x30(%rsp)
    000001f6: 	movq	%rcx, 0x28(%rsp)
    000001fb: 	movq	%r10, 0x20(%rsp)
    00000200: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 512
    00000205: 	movq	0x20(%rsp), %r10
    0000020a: 	movq	0x28(%rsp), %rcx
    0000020f: 	movq	%rax, 0x60(%rsp)
    00000214: 	movq	%rax, %rdi
    00000217: 	movq	0x58(%rsp), %rax
    0000021c: 	movq	0x30(%rsp), %r9
    00000221: 	movq	0x38(%rsp), %r8
    00000226: 	movq	%rax, 0x70(%rsp)
.Ltmp1526:
    0000022b: 	movq	%r8, %rdx
    0000022e: 	movq	%r9, %rsi
    00000231: 	movq	%rcx, 0x28(%rsp)
    00000236: 	movq	%r10, 0x20(%rsp)
    0000023b: 	callq	memcpy@PLT # Offset: 571
    00000240: 	movq	0x58(%rsp), %r8
    00000245: 	movq	0x60(%rsp), %rax
    0000024a: 	movq	0x20(%rsp), %r10
    0000024f: 	movq	0x28(%rsp), %rcx
    00000254: 	jmp	.Ltmp1524 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp1516:
    00000260: 	movl	0x4c(%rsp), %eax
    00000264: 	movl	%eax, iterations(%rip)
    0000026a: 	movq	0x88(%rsp), %rax
    00000272: 	subq	%fs:0x28, %rax
    0000027b: 	jne	.Ltmp1525 # Offset: 635
    0000027d: 	addq	$0x98, %rsp
    00000284: 	popq	%rbx
    00000285: 	popq	%rbp
    00000286: 	popq	%r12
    00000288: 	popq	%r13
    0000028a: 	popq	%r14
    0000028c: 	popq	%r15
    0000028e: 	retq # Offset: 654
.Ltmp1520:
    0000028f: 	leaq	DATAat0x27008(%rip), %rdi
    00000296: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 662
.Ltmp1525:
    0000029b: 	callq	__stack_chk_fail@PLT # Offset: 667
.Ltmp1523:
    000002a0: 	movq	%r13, %rdi
    000002a3: 	jmp	.Ltmp1526 # Offset: 675
    000002a5: 	endbr64
    000002a9: 	movq	%rax, %rbp
    000002ac: 	movq	0x60(%rsp), %rdi
    000002b1: 	cmpq	%r13, %rdi
    000002b4: 	je	.Ltmp1527 # Offset: 692
    000002b6: 	movq	0x70(%rsp), %rax
    000002bb: 	leaq	0x1(%rax), %rsi
    000002bf: 	callq	_ZdlPvm@PLT # Offset: 703
.Ltmp1527:
    000002c4: 	movq	%rbp, %rdi
    000002c7: 	callq	_Unwind_Resume@PLT # Offset: 711
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_reverse_copy_sizesIPdPFS0_S0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_reverse_copyIPdPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 212
  State       : disassembled
  Address     : 0x14580
  Size        : 0x2af
  MaxSize     : 0x2b0
  Offset      : 0x14580
  Section     : .text
  Orc Section : .local.text._Z17test_reverse_copyIPdPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0211:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rcx, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdx, %rbx
    0000001d: 	subq	$0x28, %rsp
    00000021: 	movq	%r9, 0x8(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x18(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rcx, %rdx
    00000039: 	je	.Ltmp1528 # Offset: 57
    0000003b: 	movq	%rdx, %rax
    0000003e: 	movq	%rcx, %rdx
    00000041: 	subq	%rbx, %rdx
    00000044: 	leaq	-0x8(%rdx), %rcx
    00000048: 	shrq	$0x3, %rcx
    0000004c: 	addq	$0x1, %rcx
    00000050: 	cmpq	$0x8, %rdx
    00000054: 	je	.Ltmp1529 # Offset: 84
    00000056: 	movq	%rcx, %rdx
    00000059: 	movapd	DATAat0x275d0(%rip), %xmm0
    00000061: 	shrq	%rdx
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rbx, %rdx
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1530:
    00000070: 	movups	%xmm0, (%rax)
    00000073: 	addq	$0x10, %rax
    00000077: 	cmpq	%rdx, %rax
    0000007a: 	jne	.Ltmp1530 # Offset: 122
    0000007c: 	movq	%rcx, %rdx
    0000007f: 	andq	$-0x2, %rdx
    00000083: 	leaq	(%rbx,%rdx,8), %rax
    00000087: 	cmpq	%rdx, %rcx
    0000008a: 	je	.Ltmp1528 # Offset: 138
.Ltmp1529:
    0000008c: 	movq	DATAat0x275d0(%rip), %rcx
    00000093: 	movq	%rcx, (%rax)
.Ltmp1528:
    00000096: 	callq	clock@PLT # Offset: 150
    0000009b: 	xorl	%r14d, %r14d
    0000009e: 	movq	%rax, start_time(%rip)
    000000a5: 	movl	iterations(%rip), %eax
    000000ab: 	testl	%eax, %eax
    000000ad: 	jle	.Ltmp1531 # Offset: 173
    000000af: 	nop # Size: 1
.Ltmp1532:
    000000b0: 	movq	%rbx, %rdx
    000000b3: 	movq	%r13, %rsi
    000000b6: 	movq	%r12, %rdi
    000000b9: 	addl	$0x1, %r14d
    000000bd: 	callq	*%r15 # Offset: 189
    000000c0: 	cmpl	%r14d, iterations(%rip)
    000000c7: 	jg	.Ltmp1532 # Offset: 199
.Ltmp1531:
    000000c9: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000d0: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    000000d7: 	subq	$0x20, %rax
    000000db: 	cmpq	%rax, %r13
    000000de: 	je	.Ltmp1533 # Offset: 222
    000000e4: 	movq	0x8(%rsp), %rax
    000000e9: 	leaq	0x10(%r13), %rdi
    000000ed: 	movq	%rdi, (%r13)
    000000f1: 	movq	(%rax), %r15
    000000f4: 	movq	0x8(%rax), %r12
    000000f8: 	movq	%r15, %rax
    000000fb: 	addq	%r12, %rax
    000000fe: 	je	.Ltmp1534 # Offset: 254
    00000100: 	testq	%r15, %r15
    00000103: 	je	.Ltmp1535 # Offset: 259
.Ltmp1534:
    00000109: 	movq	%r12, 0x10(%rsp)
    0000010e: 	cmpq	$0xf, %r12
    00000112: 	ja	.Ltmp1536 # Offset: 274
    00000118: 	cmpq	$0x1, %r12
    0000011c: 	jne	.Ltmp1537 # Offset: 284
    00000122: 	movzbl	(%r15), %eax
    00000126: 	movb	%al, 0x10(%r13)
.Ltmp1543:
    0000012a: 	movq	%r12, 0x8(%r13)
    0000012e: 	movb	$0x0, (%rdi,%r12)
    00000133: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000013a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000141: 	addq	$0x20, %rax
    00000145: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000014c: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000153: 	je	.Ltmp1538 # Offset: 339
.Ltmp1544:
    00000159: 	movq	-0x20(%rax), %r12
    0000015d: 	callq	clock@PLT # Offset: 349
    00000162: 	pxor	%xmm0, %xmm0
    00000166: 	movq	%rax, end_time(%rip)
    0000016d: 	movq	%r12, %rdi
    00000170: 	subq	start_time(%rip), %rax
    00000177: 	cvtsi2sd	%rax, %xmm0
    0000017c: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000184: 	callq	_Z13record_resultdPKc # Offset: 388
    00000189: 	leaq	0x8(%rbx), %rax
    0000018d: 	jmp	.Ltmp1539 # Offset: 397
    0000018f: 	nop # Size: 1
.Ltmp1541:
    00000190: 	movsd	-0x8(%rax), %xmm0
    00000195: 	movsd	(%rax), %xmm1
    00000199: 	addq	$0x8, %rax
    0000019d: 	comisd	%xmm0, %xmm1
    000001a1: 	ja	.Ltmp1540 # Offset: 417
.Ltmp1539:
    000001a3: 	cmpq	%rax, %rbp
    000001a6: 	jne	.Ltmp1541 # Offset: 422
    000001a8: 	movq	0x18(%rsp), %rax
    000001ad: 	subq	%fs:0x28, %rax
    000001b6: 	jne	.Ltmp1542 # Offset: 438
    000001bc: 	addq	$0x28, %rsp
    000001c0: 	popq	%rbx
    000001c1: 	popq	%rbp
    000001c2: 	popq	%r12
    000001c4: 	popq	%r13
    000001c6: 	popq	%r14
    000001c8: 	popq	%r15
    000001ca: 	retq # Offset: 458
    000001cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1536:
    000001d0: 	movq	%r13, %rdi
    000001d3: 	leaq	0x10(%rsp), %rsi
    000001d8: 	xorl	%edx, %edx
    000001da: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 474
    000001df: 	movq	%rax, (%r13)
    000001e3: 	movq	%rax, %rdi
    000001e6: 	movq	0x10(%rsp), %rax
    000001eb: 	movq	%rax, 0x10(%r13)
.Ltmp1545:
    000001ef: 	movq	%r12, %rdx
    000001f2: 	movq	%r15, %rsi
    000001f5: 	callq	memcpy@PLT # Offset: 501
    000001fa: 	movq	0x10(%rsp), %r12
    000001ff: 	movq	(%r13), %rdi
    00000203: 	jmp	.Ltmp1543 # Offset: 515
    00000208: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1540:
    00000210: 	movq	0x18(%rsp), %rax
    00000215: 	subq	%fs:0x28, %rax
    0000021e: 	jne	.Ltmp1542 # Offset: 542
    00000220: 	movq	0x8(%rsp), %rax
    00000225: 	leaq	DATAat0x271d0(%rip), %rsi
    0000022c: 	movl	$0x1, %edi
    00000231: 	movq	(%rax), %rdx
    00000234: 	addq	$0x28, %rsp
    00000238: 	xorl	%eax, %eax
    0000023a: 	popq	%rbx
    0000023b: 	popq	%rbp
    0000023c: 	popq	%r12
    0000023e: 	popq	%r13
    00000240: 	popq	%r14
    00000242: 	popq	%r15
    00000244: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 580
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp1533:
    00000250: 	movq	0x8(%rsp), %rsi
    00000255: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000025c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 604
    00000261: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000268: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000026f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000276: 	jne	.Ltmp1544 # Offset: 630
.Ltmp1538:
    0000027c: 	movq	-0x8(%rdx), %rax
    00000280: 	addq	$0x200, %rax
    00000286: 	jmp	.Ltmp1544 # Offset: 646
    0000028b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1537:
    00000290: 	testq	%r12, %r12
    00000293: 	je	.Ltmp1543 # Offset: 659
    00000299: 	jmp	.Ltmp1545 # Offset: 665
.Ltmp1542:
    0000029e: 	callq	__stack_chk_fail@PLT # Offset: 670
.Ltmp1535:
    000002a3: 	leaq	DATAat0x27008(%rip), %rdi
    000002aa: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 682
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_reverse_copyIPdPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23test_reverse_copy_sizesIPdPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 213
  State       : disassembled
  Address     : 0x14830
  Size        : 0x2cc
  MaxSize     : 0x2d0
  Offset      : 0x14830
  Section     : .text
  Orc Section : .local.text._Z23test_reverse_copy_sizesIPdPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0212:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	leaq	DATAat0x271e0(%rip), %rsi
    00000010: 	pushq	%r14
    00000012: 	movq	%rdi, %r14
    00000015: 	movl	$0x1, %edi
    0000001a: 	pushq	%r13
    0000001c: 	pushq	%r12
    0000001e: 	pushq	%rbp
    0000001f: 	movq	%r8, %rbp
    00000022: 	pushq	%rbx
    00000023: 	movl	%edx, %ebx
    00000025: 	subq	$0x98, %rsp
    0000002c: 	movl	%edx, 0x48(%rsp)
    00000030: 	movq	%rcx, 0x10(%rsp)
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x88(%rsp)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	movl	%eax, 0x4c(%rsp)
    00000050: 	xorl	%eax, %eax
    00000052: 	callq	__printf_chk@PLT # Offset: 82
    00000057: 	xorl	%eax, %eax
    00000059: 	movl	$0x1, %edi
    0000005e: 	leaq	DATAat0x27210(%rip), %rsi
    00000065: 	callq	__printf_chk@PLT # Offset: 101
    0000006a: 	cmpl	$0x3, %ebx
    0000006d: 	jle	.Ltmp1546 # Offset: 109
    00000073: 	movslq	0x4c(%rsp), %rax
    00000078: 	xorl	%r12d, %r12d
    0000007b: 	movl	$0x4, %ebx
    00000080: 	leaq	0x70(%rsp), %r13
    00000085: 	movq	%rax, 0x18(%rsp)
    0000008a: 	leaq	0x60(%rsp), %rax
    0000008f: 	movq	%rax, 0x8(%rsp)
    00000094: 	leaq	0x58(%rsp), %rax
    00000099: 	movq	%rax, 0x40(%rsp)
    0000009e: 	jmp	.Ltmp1547 # Offset: 158
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1552:
    000000a8: 	movzbl	(%r9), %eax
    000000ac: 	movb	%al, 0x70(%rsp)
    000000b0: 	movq	%r13, %rax
.Ltmp1554:
    000000b3: 	movq	%r8, 0x68(%rsp)
    000000b8: 	movq	0x8(%rsp), %r9
    000000bd: 	movq	%r15, %rdx
    000000c0: 	movq	%r10, %rsi
    000000c3: 	movb	$0x0, (%rax,%r8)
    000000c8: 	movq	0x10(%rsp), %r8
    000000cd: 	movq	%r14, %rdi
    000000d0: 	callq	_Z17test_reverse_copyIPdPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 208
    000000d5: 	movq	0x60(%rsp), %rdi
    000000da: 	cmpq	%r13, %rdi
    000000dd: 	je	.Ltmp1548 # Offset: 221
    000000df: 	movq	0x70(%rsp), %rax
    000000e4: 	leaq	0x1(%rax), %rsi
    000000e8: 	callq	_ZdlPvm@PLT # Offset: 232
.Ltmp1548:
    000000ed: 	pxor	%xmm1, %xmm1
    000000f1: 	pxor	%xmm2, %xmm2
    000000f5: 	movq	(%rbp), %rcx
    000000f9: 	movl	%ebx, %r8d
    000000fc: 	cvtsi2sd	%ebx, %xmm2
    00000100: 	movq	results(%rip), %rax
    00000107: 	movl	%r12d, %edx
    0000010a: 	addl	%ebx, %ebx
    0000010c: 	leaq	DATAat0x27240(%rip), %rsi
    00000113: 	movl	$0x1, %edi
    00000118: 	addl	$0x1, %r12d
    0000011c: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000124: 	movsd	(%rax), %xmm0
    00000128: 	movl	$0x2, %eax
    0000012d: 	mulsd	%xmm2, %xmm1
    00000131: 	divsd	DATAat0x276b0(%rip), %xmm1
    00000139: 	divsd	%xmm0, %xmm1
    0000013d: 	callq	__printf_chk@PLT # Offset: 317
    00000142: 	movl	$0x0, current_test(%rip)
    0000014c: 	cmpl	%ebx, 0x48(%rsp)
    00000150: 	jl	.Ltmp1546 # Offset: 336
.Ltmp1547:
    00000156: 	movl	0x48(%rsp), %eax
    0000015a: 	movq	(%rbp), %r9
    0000015e: 	movq	%r13, 0x60(%rsp)
    00000163: 	movq	0x8(%rbp), %r8
    00000167: 	cltd
    00000168: 	idivl	%ebx
    0000016a: 	movl	$0x4, %edx
    0000016f: 	cltq
    00000171: 	imulq	0x18(%rsp), %rax
    00000177: 	cmpq	%rdx, %rax
    0000017a: 	cmovlq	%rdx, %rax
    0000017e: 	movl	$0x70000000, %edx
    00000183: 	cmpq	%rdx, %rax
    00000186: 	cmovgq	%rdx, %rax
    0000018a: 	addq	$0x1, %rax
    0000018e: 	andq	$-0x2, %rax
    00000192: 	movl	%eax, iterations(%rip)
    00000198: 	movslq	%ebx, %rax
    0000019b: 	shlq	$0x3, %rax
    0000019f: 	leaq	(%r14,%rax), %r10
    000001a3: 	leaq	(%r15,%rax), %rcx
    000001a7: 	movq	%r9, %rax
    000001aa: 	addq	%r8, %rax
    000001ad: 	je	.Ltmp1549 # Offset: 429
    000001af: 	testq	%r9, %r9
    000001b2: 	je	.Ltmp1550 # Offset: 434
.Ltmp1549:
    000001b8: 	movq	%r8, 0x58(%rsp)
    000001bd: 	cmpq	$0xf, %r8
    000001c1: 	ja	.Ltmp1551 # Offset: 449
    000001c3: 	cmpq	$0x1, %r8
    000001c7: 	je	.Ltmp1552 # Offset: 455
    000001cd: 	testq	%r8, %r8
    000001d0: 	jne	.Ltmp1553 # Offset: 464
    000001d6: 	movq	%r13, %rax
    000001d9: 	jmp	.Ltmp1554 # Offset: 473
    000001de: 	nop # Size: 2
.Ltmp1551:
    000001e0: 	movq	0x8(%rsp), %rdi
    000001e5: 	movq	0x40(%rsp), %rsi
    000001ea: 	xorl	%edx, %edx
    000001ec: 	movq	%r8, 0x38(%rsp)
    000001f1: 	movq	%r9, 0x30(%rsp)
    000001f6: 	movq	%rcx, 0x28(%rsp)
    000001fb: 	movq	%r10, 0x20(%rsp)
    00000200: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 512
    00000205: 	movq	0x20(%rsp), %r10
    0000020a: 	movq	0x28(%rsp), %rcx
    0000020f: 	movq	%rax, 0x60(%rsp)
    00000214: 	movq	%rax, %rdi
    00000217: 	movq	0x58(%rsp), %rax
    0000021c: 	movq	0x30(%rsp), %r9
    00000221: 	movq	0x38(%rsp), %r8
    00000226: 	movq	%rax, 0x70(%rsp)
.Ltmp1556:
    0000022b: 	movq	%r8, %rdx
    0000022e: 	movq	%r9, %rsi
    00000231: 	movq	%rcx, 0x28(%rsp)
    00000236: 	movq	%r10, 0x20(%rsp)
    0000023b: 	callq	memcpy@PLT # Offset: 571
    00000240: 	movq	0x58(%rsp), %r8
    00000245: 	movq	0x60(%rsp), %rax
    0000024a: 	movq	0x20(%rsp), %r10
    0000024f: 	movq	0x28(%rsp), %rcx
    00000254: 	jmp	.Ltmp1554 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp1546:
    00000260: 	movl	0x4c(%rsp), %eax
    00000264: 	movl	%eax, iterations(%rip)
    0000026a: 	movq	0x88(%rsp), %rax
    00000272: 	subq	%fs:0x28, %rax
    0000027b: 	jne	.Ltmp1555 # Offset: 635
    0000027d: 	addq	$0x98, %rsp
    00000284: 	popq	%rbx
    00000285: 	popq	%rbp
    00000286: 	popq	%r12
    00000288: 	popq	%r13
    0000028a: 	popq	%r14
    0000028c: 	popq	%r15
    0000028e: 	retq # Offset: 654
.Ltmp1550:
    0000028f: 	leaq	DATAat0x27008(%rip), %rdi
    00000296: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 662
.Ltmp1555:
    0000029b: 	callq	__stack_chk_fail@PLT # Offset: 667
.Ltmp1553:
    000002a0: 	movq	%r13, %rdi
    000002a3: 	jmp	.Ltmp1556 # Offset: 675
    000002a5: 	endbr64
    000002a9: 	movq	%rax, %rbp
    000002ac: 	movq	0x60(%rsp), %rdi
    000002b1: 	cmpq	%r13, %rdi
    000002b4: 	je	.Ltmp1557 # Offset: 692
    000002b6: 	movq	0x70(%rsp), %rax
    000002bb: 	leaq	0x1(%rax), %rsi
    000002bf: 	callq	_ZdlPvm@PLT # Offset: 703
.Ltmp1557:
    000002c4: 	movq	%rbp, %rdi
    000002c7: 	callq	_Unwind_Resume@PLT # Offset: 711
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_reverse_copy_sizesIPdPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12test_reverseIPhPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1(*2)" after disassembly {
  All names   : _Z12test_reverseIPhPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1
                _Z12test_reverseIPhPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/reverse_sequence.cpp/1
  Number      : 214
  State       : disassembled
  Address     : 0x14b00
  Size        : 0x23c
  MaxSize     : 0x240
  Offset      : 0x14b00
  Section     : .text
  Orc Section : .local.text._Z12test_reverseIPhPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0213:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movq	%rsi, %r12
    0000000b: 	pushq	%rbp
    0000000c: 	movq	%rdi, %rbp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdx, %rbx
    00000013: 	subq	$0x18, %rsp
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0x8(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	callq	clock@PLT # Offset: 39
    0000002c: 	movq	%rax, start_time(%rip)
    00000033: 	movl	iterations(%rip), %eax
    00000039: 	testl	%eax, %eax
    0000003b: 	jle	.Ltmp1558 # Offset: 59
    0000003d: 	leaq	-0x1(%r12), %r8
    00000042: 	cmpq	%r12, %rbp
    00000045: 	je	.Ltmp1558 # Offset: 69
    00000047: 	cmpq	%r8, %rbp
    0000004a: 	jae	.Ltmp1558 # Offset: 74
    0000004c: 	xorl	%edi, %edi
    0000004e: 	nop # Size: 2
.Ltmp1560:
    00000050: 	movq	%r8, %rdx
    00000053: 	movq	%rbp, %rax
    00000056: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1559:
    00000060: 	movzbl	(%rax), %ecx
    00000063: 	movzbl	(%rdx), %esi
    00000066: 	addq	$0x1, %rax
    0000006a: 	subq	$0x1, %rdx
    0000006e: 	movb	%sil, -0x1(%rax)
    00000072: 	movb	%cl, 0x1(%rdx)
    00000075: 	cmpq	%rdx, %rax
    00000078: 	jb	.Ltmp1559 # Offset: 120
    0000007a: 	addl	$0x1, %edi
    0000007d: 	cmpl	iterations(%rip), %edi
    00000083: 	jl	.Ltmp1560 # Offset: 131
.Ltmp1558:
    00000085: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000008c: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    00000093: 	subq	$0x20, %rax
    00000097: 	cmpq	%rax, %r14
    0000009a: 	je	.Ltmp1561 # Offset: 154
    000000a0: 	leaq	0x10(%r14), %rdi
    000000a4: 	movq	0x8(%rbx), %r13
    000000a8: 	movq	%rdi, (%r14)
    000000ab: 	movq	(%rbx), %r15
    000000ae: 	movq	%r15, %rax
    000000b1: 	addq	%r13, %rax
    000000b4: 	je	.Ltmp1562 # Offset: 180
    000000b6: 	testq	%r15, %r15
    000000b9: 	je	.Ltmp1563 # Offset: 185
.Ltmp1562:
    000000bf: 	movq	%r13, (%rsp)
    000000c3: 	cmpq	$0xf, %r13
    000000c7: 	ja	.Ltmp1564 # Offset: 199
    000000cd: 	cmpq	$0x1, %r13
    000000d1: 	jne	.Ltmp1565 # Offset: 209
    000000d7: 	movzbl	(%r15), %eax
    000000db: 	movb	%al, 0x10(%r14)
.Ltmp1571:
    000000df: 	movq	%r13, 0x8(%r14)
    000000e3: 	movb	$0x0, (%rdi,%r13)
    000000e8: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000ef: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000f6: 	addq	$0x20, %rax
    000000fa: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000101: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000108: 	je	.Ltmp1566 # Offset: 264
.Ltmp1572:
    0000010e: 	movq	-0x20(%rax), %r13
    00000112: 	callq	clock@PLT # Offset: 274
    00000117: 	pxor	%xmm0, %xmm0
    0000011b: 	movq	%rax, end_time(%rip)
    00000122: 	movq	%r13, %rdi
    00000125: 	subq	start_time(%rip), %rax
    0000012c: 	cvtsi2sd	%rax, %xmm0
    00000131: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000139: 	callq	_Z13record_resultdPKc # Offset: 313
    0000013e: 	leaq	0x1(%rbp), %rax
    00000142: 	jmp	.Ltmp1567 # Offset: 322
    00000144: 	nopl	(%rax) # Size: 4
.Ltmp1569:
    00000148: 	addq	$0x1, %rax
    0000014c: 	movzbl	-0x2(%rax), %edi
    00000150: 	cmpb	%dil, -0x1(%rax)
    00000154: 	jb	.Ltmp1568 # Offset: 340
.Ltmp1567:
    00000156: 	cmpq	%rax, %r12
    00000159: 	jne	.Ltmp1569 # Offset: 345
    0000015b: 	movq	0x8(%rsp), %rax
    00000160: 	subq	%fs:0x28, %rax
    00000169: 	jne	.Ltmp1570 # Offset: 361
    0000016f: 	addq	$0x18, %rsp
    00000173: 	popq	%rbx
    00000174: 	popq	%rbp
    00000175: 	popq	%r12
    00000177: 	popq	%r13
    00000179: 	popq	%r14
    0000017b: 	popq	%r15
    0000017d: 	retq # Offset: 381
.Ltmp1564:
    0000017e: 	movq	%r14, %rdi
    00000181: 	movq	%rsp, %rsi
    00000184: 	xorl	%edx, %edx
    00000186: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 390
    0000018b: 	movq	%rax, (%r14)
    0000018e: 	movq	%rax, %rdi
    00000191: 	movq	(%rsp), %rax
    00000195: 	movq	%rax, 0x10(%r14)
.Ltmp1573:
    00000199: 	movq	%r13, %rdx
    0000019c: 	movq	%r15, %rsi
    0000019f: 	callq	memcpy@PLT # Offset: 415
    000001a4: 	movq	(%rsp), %r13
    000001a8: 	movq	(%r14), %rdi
    000001ab: 	jmp	.Ltmp1571 # Offset: 427
.Ltmp1568:
    000001b0: 	movq	0x8(%rsp), %rax
    000001b5: 	subq	%fs:0x28, %rax
    000001be: 	jne	.Ltmp1570 # Offset: 446
    000001c0: 	movq	(%rbx), %rdx
    000001c3: 	addq	$0x18, %rsp
    000001c7: 	leaq	DATAat0x271d0(%rip), %rsi
    000001ce: 	xorl	%eax, %eax
    000001d0: 	popq	%rbx
    000001d1: 	movl	$0x1, %edi
    000001d6: 	popq	%rbp
    000001d7: 	popq	%r12
    000001d9: 	popq	%r13
    000001db: 	popq	%r14
    000001dd: 	popq	%r15
    000001df: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 479
.Ltmp1561:
    000001e4: 	movq	%rbx, %rsi
    000001e7: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000001ee: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 494
    000001f3: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000001fa: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000201: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000208: 	jne	.Ltmp1572 # Offset: 520
.Ltmp1566:
    0000020e: 	movq	-0x8(%rdx), %rax
    00000212: 	addq	$0x200, %rax
    00000218: 	jmp	.Ltmp1572 # Offset: 536
.Ltmp1565:
    0000021d: 	testq	%r13, %r13
    00000220: 	je	.Ltmp1571 # Offset: 544
    00000226: 	jmp	.Ltmp1573 # Offset: 550
.Ltmp1570:
    0000022b: 	callq	__stack_chk_fail@PLT # Offset: 555
.Ltmp1563:
    00000230: 	leaq	DATAat0x27008(%rip), %rdi
    00000237: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 567
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_reverseIPhPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1(*2)"

Binary Function "_Z17test_reverse_copyI20BidirectionalPointerImEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 215
  State       : disassembled
  Address     : 0x14d40
  Size        : 0x2af
  MaxSize     : 0x2b0
  Offset      : 0x14d40
  Section     : .text
  Orc Section : .local.text._Z17test_reverse_copyI20BidirectionalPointerImEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0214:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rcx, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdx, %rbx
    0000001d: 	subq	$0x28, %rsp
    00000021: 	movq	%r9, 0x8(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x18(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rcx, %rdx
    00000039: 	je	.Ltmp1574 # Offset: 57
    0000003b: 	movq	%rdx, %rax
    0000003e: 	movq	%rcx, %rdx
    00000041: 	subq	%rbx, %rdx
    00000044: 	leaq	-0x8(%rdx), %rcx
    00000048: 	shrq	$0x3, %rcx
    0000004c: 	addq	$0x1, %rcx
    00000050: 	cmpq	$0x8, %rdx
    00000054: 	je	.Ltmp1575 # Offset: 84
    00000056: 	movq	%rcx, %rdx
    00000059: 	movdqa	DATAat0x275a0(%rip), %xmm0
    00000061: 	shrq	%rdx
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rbx, %rdx
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1576:
    00000070: 	movups	%xmm0, (%rax)
    00000073: 	addq	$0x10, %rax
    00000077: 	cmpq	%rdx, %rax
    0000007a: 	jne	.Ltmp1576 # Offset: 122
    0000007c: 	movq	%rcx, %rdx
    0000007f: 	andq	$-0x2, %rdx
    00000083: 	leaq	(%rbx,%rdx,8), %rax
    00000087: 	cmpq	%rcx, %rdx
    0000008a: 	je	.Ltmp1574 # Offset: 138
.Ltmp1575:
    0000008c: 	movq	$0x63, (%rax)
.Ltmp1574:
    00000093: 	callq	clock@PLT # Offset: 147
    00000098: 	xorl	%r14d, %r14d
    0000009b: 	movq	%rax, start_time(%rip)
    000000a2: 	movl	iterations(%rip), %eax
    000000a8: 	testl	%eax, %eax
    000000aa: 	jle	.Ltmp1577 # Offset: 170
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp1578:
    000000b0: 	movq	%rbx, %rdx
    000000b3: 	movq	%r13, %rsi
    000000b6: 	movq	%r12, %rdi
    000000b9: 	addl	$0x1, %r14d
    000000bd: 	callq	*%r15 # Offset: 189
    000000c0: 	cmpl	%r14d, iterations(%rip)
    000000c7: 	jg	.Ltmp1578 # Offset: 199
.Ltmp1577:
    000000c9: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000d0: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    000000d7: 	subq	$0x20, %rax
    000000db: 	cmpq	%rax, %r13
    000000de: 	je	.Ltmp1579 # Offset: 222
    000000e4: 	movq	0x8(%rsp), %rax
    000000e9: 	leaq	0x10(%r13), %rdi
    000000ed: 	movq	%rdi, (%r13)
    000000f1: 	movq	(%rax), %r15
    000000f4: 	movq	0x8(%rax), %r12
    000000f8: 	movq	%r15, %rax
    000000fb: 	addq	%r12, %rax
    000000fe: 	je	.Ltmp1580 # Offset: 254
    00000100: 	testq	%r15, %r15
    00000103: 	je	.Ltmp1581 # Offset: 259
.Ltmp1580:
    00000109: 	movq	%r12, 0x10(%rsp)
    0000010e: 	cmpq	$0xf, %r12
    00000112: 	ja	.Ltmp1582 # Offset: 274
    00000118: 	cmpq	$0x1, %r12
    0000011c: 	jne	.Ltmp1583 # Offset: 284
    00000122: 	movzbl	(%r15), %eax
    00000126: 	movb	%al, 0x10(%r13)
.Ltmp1589:
    0000012a: 	movq	%r12, 0x8(%r13)
    0000012e: 	movb	$0x0, (%rdi,%r12)
    00000133: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000013a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000141: 	addq	$0x20, %rax
    00000145: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000014c: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000153: 	je	.Ltmp1584 # Offset: 339
.Ltmp1590:
    00000159: 	movq	-0x20(%rax), %r12
    0000015d: 	callq	clock@PLT # Offset: 349
    00000162: 	pxor	%xmm0, %xmm0
    00000166: 	movq	%rax, end_time(%rip)
    0000016d: 	movq	%r12, %rdi
    00000170: 	subq	start_time(%rip), %rax
    00000177: 	cvtsi2sd	%rax, %xmm0
    0000017c: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000184: 	callq	_Z13record_resultdPKc # Offset: 388
    00000189: 	leaq	0x8(%rbx), %rax
    0000018d: 	jmp	.Ltmp1585 # Offset: 397
    0000018f: 	nop # Size: 1
.Ltmp1587:
    00000190: 	addq	$0x8, %rax
    00000194: 	movq	-0x8(%rax), %rcx
    00000198: 	cmpq	%rcx, -0x8(%rdx)
    0000019c: 	jb	.Ltmp1586 # Offset: 412
.Ltmp1585:
    0000019e: 	movq	%rax, %rdx
    000001a1: 	cmpq	%rax, %rbp
    000001a4: 	jne	.Ltmp1587 # Offset: 420
    000001a6: 	movq	0x18(%rsp), %rax
    000001ab: 	subq	%fs:0x28, %rax
    000001b4: 	jne	.Ltmp1588 # Offset: 436
    000001ba: 	addq	$0x28, %rsp
    000001be: 	popq	%rbx
    000001bf: 	popq	%rbp
    000001c0: 	popq	%r12
    000001c2: 	popq	%r13
    000001c4: 	popq	%r14
    000001c6: 	popq	%r15
    000001c8: 	retq # Offset: 456
    000001c9: 	nopl	(%rax) # Size: 7
.Ltmp1582:
    000001d0: 	movq	%r13, %rdi
    000001d3: 	leaq	0x10(%rsp), %rsi
    000001d8: 	xorl	%edx, %edx
    000001da: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 474
    000001df: 	movq	%rax, (%r13)
    000001e3: 	movq	%rax, %rdi
    000001e6: 	movq	0x10(%rsp), %rax
    000001eb: 	movq	%rax, 0x10(%r13)
.Ltmp1591:
    000001ef: 	movq	%r12, %rdx
    000001f2: 	movq	%r15, %rsi
    000001f5: 	callq	memcpy@PLT # Offset: 501
    000001fa: 	movq	0x10(%rsp), %r12
    000001ff: 	movq	(%r13), %rdi
    00000203: 	jmp	.Ltmp1589 # Offset: 515
    00000208: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1586:
    00000210: 	movq	0x18(%rsp), %rax
    00000215: 	subq	%fs:0x28, %rax
    0000021e: 	jne	.Ltmp1588 # Offset: 542
    00000220: 	movq	0x8(%rsp), %rax
    00000225: 	leaq	DATAat0x271d0(%rip), %rsi
    0000022c: 	movl	$0x1, %edi
    00000231: 	movq	(%rax), %rdx
    00000234: 	addq	$0x28, %rsp
    00000238: 	xorl	%eax, %eax
    0000023a: 	popq	%rbx
    0000023b: 	popq	%rbp
    0000023c: 	popq	%r12
    0000023e: 	popq	%r13
    00000240: 	popq	%r14
    00000242: 	popq	%r15
    00000244: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 580
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp1579:
    00000250: 	movq	0x8(%rsp), %rsi
    00000255: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000025c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 604
    00000261: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000268: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000026f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000276: 	jne	.Ltmp1590 # Offset: 630
.Ltmp1584:
    0000027c: 	movq	-0x8(%rdx), %rax
    00000280: 	addq	$0x200, %rax
    00000286: 	jmp	.Ltmp1590 # Offset: 646
    0000028b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1583:
    00000290: 	testq	%r12, %r12
    00000293: 	je	.Ltmp1589 # Offset: 659
    00000299: 	jmp	.Ltmp1591 # Offset: 665
.Ltmp1588:
    0000029e: 	callq	__stack_chk_fail@PLT # Offset: 670
.Ltmp1581:
    000002a3: 	leaq	DATAat0x27008(%rip), %rdi
    000002aa: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 682
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_reverse_copyI20BidirectionalPointerImEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23test_reverse_copy_sizesI20BidirectionalPointerImEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 216
  State       : disassembled
  Address     : 0x14ff0
  Size        : 0x2cc
  MaxSize     : 0x2d0
  Offset      : 0x14ff0
  Section     : .text
  Orc Section : .local.text._Z23test_reverse_copy_sizesI20BidirectionalPointerImEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0215:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	leaq	DATAat0x271e0(%rip), %rsi
    00000010: 	pushq	%r14
    00000012: 	movq	%rdi, %r14
    00000015: 	movl	$0x1, %edi
    0000001a: 	pushq	%r13
    0000001c: 	pushq	%r12
    0000001e: 	pushq	%rbp
    0000001f: 	movq	%r8, %rbp
    00000022: 	pushq	%rbx
    00000023: 	movl	%edx, %ebx
    00000025: 	subq	$0x98, %rsp
    0000002c: 	movl	%edx, 0x48(%rsp)
    00000030: 	movq	%rcx, 0x10(%rsp)
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x88(%rsp)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	movl	%eax, 0x4c(%rsp)
    00000050: 	xorl	%eax, %eax
    00000052: 	callq	__printf_chk@PLT # Offset: 82
    00000057: 	xorl	%eax, %eax
    00000059: 	movl	$0x1, %edi
    0000005e: 	leaq	DATAat0x27210(%rip), %rsi
    00000065: 	callq	__printf_chk@PLT # Offset: 101
    0000006a: 	cmpl	$0x3, %ebx
    0000006d: 	jle	.Ltmp1592 # Offset: 109
    00000073: 	movslq	0x4c(%rsp), %rax
    00000078: 	xorl	%r12d, %r12d
    0000007b: 	movl	$0x4, %ebx
    00000080: 	leaq	0x70(%rsp), %r13
    00000085: 	movq	%rax, 0x18(%rsp)
    0000008a: 	leaq	0x60(%rsp), %rax
    0000008f: 	movq	%rax, 0x8(%rsp)
    00000094: 	leaq	0x58(%rsp), %rax
    00000099: 	movq	%rax, 0x40(%rsp)
    0000009e: 	jmp	.Ltmp1593 # Offset: 158
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1598:
    000000a8: 	movzbl	(%r9), %eax
    000000ac: 	movb	%al, 0x70(%rsp)
    000000b0: 	movq	%r13, %rax
.Ltmp1600:
    000000b3: 	movq	%r8, 0x68(%rsp)
    000000b8: 	movq	0x8(%rsp), %r9
    000000bd: 	movq	%r15, %rdx
    000000c0: 	movq	%r10, %rsi
    000000c3: 	movb	$0x0, (%rax,%r8)
    000000c8: 	movq	0x10(%rsp), %r8
    000000cd: 	movq	%r14, %rdi
    000000d0: 	callq	_Z17test_reverse_copyI20BidirectionalPointerImEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 208
    000000d5: 	movq	0x60(%rsp), %rdi
    000000da: 	cmpq	%r13, %rdi
    000000dd: 	je	.Ltmp1594 # Offset: 221
    000000df: 	movq	0x70(%rsp), %rax
    000000e4: 	leaq	0x1(%rax), %rsi
    000000e8: 	callq	_ZdlPvm@PLT # Offset: 232
.Ltmp1594:
    000000ed: 	pxor	%xmm1, %xmm1
    000000f1: 	pxor	%xmm2, %xmm2
    000000f5: 	movq	(%rbp), %rcx
    000000f9: 	movl	%ebx, %r8d
    000000fc: 	cvtsi2sd	%ebx, %xmm2
    00000100: 	movq	results(%rip), %rax
    00000107: 	movl	%r12d, %edx
    0000010a: 	addl	%ebx, %ebx
    0000010c: 	leaq	DATAat0x27240(%rip), %rsi
    00000113: 	movl	$0x1, %edi
    00000118: 	addl	$0x1, %r12d
    0000011c: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000124: 	movsd	(%rax), %xmm0
    00000128: 	movl	$0x2, %eax
    0000012d: 	mulsd	%xmm2, %xmm1
    00000131: 	divsd	DATAat0x276b0(%rip), %xmm1
    00000139: 	divsd	%xmm0, %xmm1
    0000013d: 	callq	__printf_chk@PLT # Offset: 317
    00000142: 	movl	$0x0, current_test(%rip)
    0000014c: 	cmpl	%ebx, 0x48(%rsp)
    00000150: 	jl	.Ltmp1592 # Offset: 336
.Ltmp1593:
    00000156: 	movl	0x48(%rsp), %eax
    0000015a: 	movq	(%rbp), %r9
    0000015e: 	movq	%r13, 0x60(%rsp)
    00000163: 	movq	0x8(%rbp), %r8
    00000167: 	cltd
    00000168: 	idivl	%ebx
    0000016a: 	movl	$0x4, %edx
    0000016f: 	cltq
    00000171: 	imulq	0x18(%rsp), %rax
    00000177: 	cmpq	%rdx, %rax
    0000017a: 	cmovlq	%rdx, %rax
    0000017e: 	movl	$0x70000000, %edx
    00000183: 	cmpq	%rdx, %rax
    00000186: 	cmovgq	%rdx, %rax
    0000018a: 	addq	$0x1, %rax
    0000018e: 	andq	$-0x2, %rax
    00000192: 	movl	%eax, iterations(%rip)
    00000198: 	movslq	%ebx, %rax
    0000019b: 	shlq	$0x3, %rax
    0000019f: 	leaq	(%r14,%rax), %r10
    000001a3: 	leaq	(%r15,%rax), %rcx
    000001a7: 	movq	%r9, %rax
    000001aa: 	addq	%r8, %rax
    000001ad: 	je	.Ltmp1595 # Offset: 429
    000001af: 	testq	%r9, %r9
    000001b2: 	je	.Ltmp1596 # Offset: 434
.Ltmp1595:
    000001b8: 	movq	%r8, 0x58(%rsp)
    000001bd: 	cmpq	$0xf, %r8
    000001c1: 	ja	.Ltmp1597 # Offset: 449
    000001c3: 	cmpq	$0x1, %r8
    000001c7: 	je	.Ltmp1598 # Offset: 455
    000001cd: 	testq	%r8, %r8
    000001d0: 	jne	.Ltmp1599 # Offset: 464
    000001d6: 	movq	%r13, %rax
    000001d9: 	jmp	.Ltmp1600 # Offset: 473
    000001de: 	nop # Size: 2
.Ltmp1597:
    000001e0: 	movq	0x8(%rsp), %rdi
    000001e5: 	movq	0x40(%rsp), %rsi
    000001ea: 	xorl	%edx, %edx
    000001ec: 	movq	%r10, 0x38(%rsp)
    000001f1: 	movq	%rcx, 0x30(%rsp)
    000001f6: 	movq	%r8, 0x28(%rsp)
    000001fb: 	movq	%r9, 0x20(%rsp)
    00000200: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 512
    00000205: 	movq	0x20(%rsp), %r9
    0000020a: 	movq	0x28(%rsp), %r8
    0000020f: 	movq	%rax, 0x60(%rsp)
    00000214: 	movq	%rax, %rdi
    00000217: 	movq	0x58(%rsp), %rax
    0000021c: 	movq	0x30(%rsp), %rcx
    00000221: 	movq	0x38(%rsp), %r10
    00000226: 	movq	%rax, 0x70(%rsp)
.Ltmp1602:
    0000022b: 	movq	%r8, %rdx
    0000022e: 	movq	%r9, %rsi
    00000231: 	movq	%r10, 0x28(%rsp)
    00000236: 	movq	%rcx, 0x20(%rsp)
    0000023b: 	callq	memcpy@PLT # Offset: 571
    00000240: 	movq	0x58(%rsp), %r8
    00000245: 	movq	0x60(%rsp), %rax
    0000024a: 	movq	0x20(%rsp), %rcx
    0000024f: 	movq	0x28(%rsp), %r10
    00000254: 	jmp	.Ltmp1600 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp1592:
    00000260: 	movl	0x4c(%rsp), %eax
    00000264: 	movl	%eax, iterations(%rip)
    0000026a: 	movq	0x88(%rsp), %rax
    00000272: 	subq	%fs:0x28, %rax
    0000027b: 	jne	.Ltmp1601 # Offset: 635
    0000027d: 	addq	$0x98, %rsp
    00000284: 	popq	%rbx
    00000285: 	popq	%rbp
    00000286: 	popq	%r12
    00000288: 	popq	%r13
    0000028a: 	popq	%r14
    0000028c: 	popq	%r15
    0000028e: 	retq # Offset: 654
.Ltmp1596:
    0000028f: 	leaq	DATAat0x27008(%rip), %rdi
    00000296: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 662
.Ltmp1601:
    0000029b: 	callq	__stack_chk_fail@PLT # Offset: 667
.Ltmp1599:
    000002a0: 	movq	%r13, %rdi
    000002a3: 	jmp	.Ltmp1602 # Offset: 675
    000002a5: 	endbr64
    000002a9: 	movq	%rax, %rbp
    000002ac: 	movq	0x60(%rsp), %rdi
    000002b1: 	cmpq	%r13, %rdi
    000002b4: 	je	.Ltmp1603 # Offset: 692
    000002b6: 	movq	0x70(%rsp), %rax
    000002bb: 	leaq	0x1(%rax), %rsi
    000002bf: 	callq	_ZdlPvm@PLT # Offset: 703
.Ltmp1603:
    000002c4: 	movq	%rbp, %rdi
    000002c7: 	callq	_Unwind_Resume@PLT # Offset: 711
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_reverse_copy_sizesI20BidirectionalPointerImEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12test_reverseI20BidirectionalPointerIhEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z12test_reverseI20BidirectionalPointerIhEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z12test_reverseI20BidirectionalPointerIhEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/reverse_sequence.cpp/1
  Number      : 217
  State       : disassembled
  Address     : 0x152c0
  Size        : 0x232
  MaxSize     : 0x240
  Offset      : 0x152c0
  Section     : .text
  Orc Section : .local.text._Z12test_reverseI20BidirectionalPointerIhEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0216:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movq	%rsi, %r12
    0000000b: 	pushq	%rbp
    0000000c: 	movq	%rdi, %rbp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdx, %rbx
    00000013: 	subq	$0x18, %rsp
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0x8(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	callq	clock@PLT # Offset: 39
    0000002c: 	movq	%rax, start_time(%rip)
    00000033: 	movl	iterations(%rip), %eax
    00000039: 	testl	%eax, %eax
    0000003b: 	jle	.Ltmp1604 # Offset: 59
    0000003d: 	cmpq	%rbp, %r12
    00000040: 	je	.Ltmp1604 # Offset: 64
    00000042: 	xorl	%edi, %edi
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp1607:
    00000048: 	movq	%rbp, %rdx
    0000004b: 	movq	%r12, %rax
    0000004e: 	nop # Size: 2
.Ltmp1606:
    00000050: 	subq	$0x1, %rax
    00000054: 	cmpq	%rdx, %rax
    00000057: 	je	.Ltmp1605 # Offset: 87
    00000059: 	movzbl	(%rax), %esi
    0000005c: 	movzbl	(%rdx), %ecx
    0000005f: 	addq	$0x1, %rdx
    00000063: 	movb	%sil, -0x1(%rdx)
    00000067: 	movb	%cl, (%rax)
    00000069: 	cmpq	%rdx, %rax
    0000006c: 	jne	.Ltmp1606 # Offset: 108
.Ltmp1605:
    0000006e: 	movl	iterations(%rip), %eax
    00000074: 	addl	$0x1, %edi
    00000077: 	cmpl	%eax, %edi
    00000079: 	jl	.Ltmp1607 # Offset: 121
.Ltmp1604:
    0000007b: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000082: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    00000089: 	subq	$0x20, %rax
    0000008d: 	cmpq	%rax, %r14
    00000090: 	je	.Ltmp1608 # Offset: 144
    00000096: 	leaq	0x10(%r14), %rdi
    0000009a: 	movq	0x8(%rbx), %r13
    0000009e: 	movq	%rdi, (%r14)
    000000a1: 	movq	(%rbx), %r15
    000000a4: 	movq	%r15, %rax
    000000a7: 	addq	%r13, %rax
    000000aa: 	je	.Ltmp1609 # Offset: 170
    000000ac: 	testq	%r15, %r15
    000000af: 	je	.Ltmp1610 # Offset: 175
.Ltmp1609:
    000000b5: 	movq	%r13, (%rsp)
    000000b9: 	cmpq	$0xf, %r13
    000000bd: 	ja	.Ltmp1611 # Offset: 189
    000000c3: 	cmpq	$0x1, %r13
    000000c7: 	jne	.Ltmp1612 # Offset: 199
    000000cd: 	movzbl	(%r15), %eax
    000000d1: 	movb	%al, 0x10(%r14)
.Ltmp1618:
    000000d5: 	movq	%r13, 0x8(%r14)
    000000d9: 	movb	$0x0, (%rdi,%r13)
    000000de: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000e5: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000ec: 	addq	$0x20, %rax
    000000f0: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000f7: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000fe: 	je	.Ltmp1613 # Offset: 254
.Ltmp1619:
    00000104: 	movq	-0x20(%rax), %r13
    00000108: 	callq	clock@PLT # Offset: 264
    0000010d: 	pxor	%xmm0, %xmm0
    00000111: 	movq	%rax, end_time(%rip)
    00000118: 	movq	%r13, %rdi
    0000011b: 	subq	start_time(%rip), %rax
    00000122: 	cvtsi2sd	%rax, %xmm0
    00000127: 	divsd	DATAat0x276b0(%rip), %xmm0
    0000012f: 	callq	_Z13record_resultdPKc # Offset: 303
    00000134: 	leaq	0x1(%rbp), %rax
    00000138: 	jmp	.Ltmp1614 # Offset: 312
    0000013a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1616:
    00000140: 	movzbl	(%rax), %edx
    00000143: 	addq	$0x1, %rax
    00000147: 	cmpb	-0x2(%rax), %dl
    0000014a: 	jb	.Ltmp1615 # Offset: 330
.Ltmp1614:
    0000014c: 	cmpq	%r12, %rax
    0000014f: 	jne	.Ltmp1616 # Offset: 335
    00000151: 	movq	0x8(%rsp), %rax
    00000156: 	subq	%fs:0x28, %rax
    0000015f: 	jne	.Ltmp1617 # Offset: 351
    00000165: 	addq	$0x18, %rsp
    00000169: 	popq	%rbx
    0000016a: 	popq	%rbp
    0000016b: 	popq	%r12
    0000016d: 	popq	%r13
    0000016f: 	popq	%r14
    00000171: 	popq	%r15
    00000173: 	retq # Offset: 371
.Ltmp1611:
    00000174: 	movq	%r14, %rdi
    00000177: 	movq	%rsp, %rsi
    0000017a: 	xorl	%edx, %edx
    0000017c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 380
    00000181: 	movq	%rax, (%r14)
    00000184: 	movq	%rax, %rdi
    00000187: 	movq	(%rsp), %rax
    0000018b: 	movq	%rax, 0x10(%r14)
.Ltmp1620:
    0000018f: 	movq	%r13, %rdx
    00000192: 	movq	%r15, %rsi
    00000195: 	callq	memcpy@PLT # Offset: 405
    0000019a: 	movq	(%rsp), %r13
    0000019e: 	movq	(%r14), %rdi
    000001a1: 	jmp	.Ltmp1618 # Offset: 417
.Ltmp1615:
    000001a6: 	movq	0x8(%rsp), %rax
    000001ab: 	subq	%fs:0x28, %rax
    000001b4: 	jne	.Ltmp1617 # Offset: 436
    000001b6: 	movq	(%rbx), %rdx
    000001b9: 	addq	$0x18, %rsp
    000001bd: 	leaq	DATAat0x271d0(%rip), %rsi
    000001c4: 	xorl	%eax, %eax
    000001c6: 	popq	%rbx
    000001c7: 	movl	$0x1, %edi
    000001cc: 	popq	%rbp
    000001cd: 	popq	%r12
    000001cf: 	popq	%r13
    000001d1: 	popq	%r14
    000001d3: 	popq	%r15
    000001d5: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 469
.Ltmp1608:
    000001da: 	movq	%rbx, %rsi
    000001dd: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000001e4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 484
    000001e9: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000001f0: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001f7: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000001fe: 	jne	.Ltmp1619 # Offset: 510
.Ltmp1613:
    00000204: 	movq	-0x8(%rdx), %rax
    00000208: 	addq	$0x200, %rax
    0000020e: 	jmp	.Ltmp1619 # Offset: 526
.Ltmp1612:
    00000213: 	testq	%r13, %r13
    00000216: 	je	.Ltmp1618 # Offset: 534
    0000021c: 	jmp	.Ltmp1620 # Offset: 540
.Ltmp1617:
    00000221: 	callq	__stack_chk_fail@PLT # Offset: 545
.Ltmp1610:
    00000226: 	leaq	DATAat0x27008(%rip), %rdi
    0000022d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 557
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_reverseI20BidirectionalPointerIhEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z17test_reverse_copyI20BidirectionalPointerIiEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 218
  State       : disassembled
  Address     : 0x15500
  Size        : 0x2cf
  MaxSize     : 0x2d0
  Offset      : 0x15500
  Section     : .text
  Orc Section : .local.text._Z17test_reverse_copyI20BidirectionalPointerIiEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0217:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rcx, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdx, %rbx
    0000001d: 	subq	$0x28, %rsp
    00000021: 	movq	%r9, 0x8(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x18(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rcx, %rdx
    00000039: 	je	.Ltmp1621 # Offset: 57
    0000003b: 	movq	%rdx, %rax
    0000003e: 	leaq	-0x4(%rcx), %rdx
    00000042: 	subq	%rbx, %rdx
    00000045: 	movq	%rdx, %rcx
    00000048: 	shrq	$0x2, %rcx
    0000004c: 	addq	$0x1, %rcx
    00000050: 	cmpq	$0x8, %rdx
    00000054: 	jbe	.Ltmp1622 # Offset: 84
    00000056: 	movq	%rcx, %rdx
    00000059: 	movdqa	DATAat0x275c0(%rip), %xmm0
    00000061: 	shrq	$0x2, %rdx
    00000065: 	shlq	$0x4, %rdx
    00000069: 	addq	%rbx, %rdx
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp1623:
    00000070: 	movups	%xmm0, (%rax)
    00000073: 	addq	$0x10, %rax
    00000077: 	cmpq	%rdx, %rax
    0000007a: 	jne	.Ltmp1623 # Offset: 122
    0000007c: 	movq	%rcx, %rdx
    0000007f: 	andq	$-0x4, %rdx
    00000083: 	leaq	(%rbx,%rdx,4), %rax
    00000087: 	cmpq	%rdx, %rcx
    0000008a: 	je	.Ltmp1621 # Offset: 138
.Ltmp1622:
    0000008c: 	leaq	0x4(%rax), %rdx
    00000090: 	movl	$0x63, (%rax)
    00000096: 	cmpq	%rdx, %rbp
    00000099: 	je	.Ltmp1621 # Offset: 153
    0000009b: 	leaq	0x8(%rax), %rdx
    0000009f: 	movl	$0x63, 0x4(%rax)
    000000a6: 	cmpq	%rdx, %rbp
    000000a9: 	je	.Ltmp1621 # Offset: 169
    000000ab: 	movl	$0x63, 0x8(%rax)
.Ltmp1621:
    000000b2: 	callq	clock@PLT # Offset: 178
    000000b7: 	xorl	%r14d, %r14d
    000000ba: 	movq	%rax, start_time(%rip)
    000000c1: 	movl	iterations(%rip), %eax
    000000c7: 	testl	%eax, %eax
    000000c9: 	jle	.Ltmp1624 # Offset: 201
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1625:
    000000d0: 	movq	%rbx, %rdx
    000000d3: 	movq	%r13, %rsi
    000000d6: 	movq	%r12, %rdi
    000000d9: 	addl	$0x1, %r14d
    000000dd: 	callq	*%r15 # Offset: 221
    000000e0: 	cmpl	%r14d, iterations(%rip)
    000000e7: 	jg	.Ltmp1625 # Offset: 231
.Ltmp1624:
    000000e9: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000f0: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    000000f7: 	subq	$0x20, %rax
    000000fb: 	cmpq	%rax, %r13
    000000fe: 	je	.Ltmp1626 # Offset: 254
    00000104: 	movq	0x8(%rsp), %rax
    00000109: 	leaq	0x10(%r13), %rdi
    0000010d: 	movq	%rdi, (%r13)
    00000111: 	movq	(%rax), %r15
    00000114: 	movq	0x8(%rax), %r12
    00000118: 	movq	%r15, %rax
    0000011b: 	addq	%r12, %rax
    0000011e: 	je	.Ltmp1627 # Offset: 286
    00000120: 	testq	%r15, %r15
    00000123: 	je	.Ltmp1628 # Offset: 291
.Ltmp1627:
    00000129: 	movq	%r12, 0x10(%rsp)
    0000012e: 	cmpq	$0xf, %r12
    00000132: 	ja	.Ltmp1629 # Offset: 306
    00000138: 	cmpq	$0x1, %r12
    0000013c: 	jne	.Ltmp1630 # Offset: 316
    00000142: 	movzbl	(%r15), %eax
    00000146: 	movb	%al, 0x10(%r13)
.Ltmp1636:
    0000014a: 	movq	%r12, 0x8(%r13)
    0000014e: 	movb	$0x0, (%rdi,%r12)
    00000153: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000015a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000161: 	addq	$0x20, %rax
    00000165: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000016c: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000173: 	je	.Ltmp1631 # Offset: 371
.Ltmp1637:
    00000179: 	movq	-0x20(%rax), %r12
    0000017d: 	callq	clock@PLT # Offset: 381
    00000182: 	pxor	%xmm0, %xmm0
    00000186: 	movq	%rax, end_time(%rip)
    0000018d: 	movq	%r12, %rdi
    00000190: 	subq	start_time(%rip), %rax
    00000197: 	cvtsi2sd	%rax, %xmm0
    0000019c: 	divsd	DATAat0x276b0(%rip), %xmm0
    000001a4: 	callq	_Z13record_resultdPKc # Offset: 420
    000001a9: 	leaq	0x4(%rbx), %rax
    000001ad: 	jmp	.Ltmp1632 # Offset: 429
    000001af: 	nop # Size: 1
.Ltmp1634:
    000001b0: 	addq	$0x4, %rax
    000001b4: 	movl	-0x4(%rax), %ecx
    000001b7: 	cmpl	%ecx, -0x4(%rdx)
    000001ba: 	jl	.Ltmp1633 # Offset: 442
.Ltmp1632:
    000001bc: 	movq	%rax, %rdx
    000001bf: 	cmpq	%rax, %rbp
    000001c2: 	jne	.Ltmp1634 # Offset: 450
    000001c4: 	movq	0x18(%rsp), %rax
    000001c9: 	subq	%fs:0x28, %rax
    000001d2: 	jne	.Ltmp1635 # Offset: 466
    000001d8: 	addq	$0x28, %rsp
    000001dc: 	popq	%rbx
    000001dd: 	popq	%rbp
    000001de: 	popq	%r12
    000001e0: 	popq	%r13
    000001e2: 	popq	%r14
    000001e4: 	popq	%r15
    000001e6: 	retq # Offset: 486
    000001e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1629:
    000001f0: 	movq	%r13, %rdi
    000001f3: 	leaq	0x10(%rsp), %rsi
    000001f8: 	xorl	%edx, %edx
    000001fa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 506
    000001ff: 	movq	%rax, (%r13)
    00000203: 	movq	%rax, %rdi
    00000206: 	movq	0x10(%rsp), %rax
    0000020b: 	movq	%rax, 0x10(%r13)
.Ltmp1638:
    0000020f: 	movq	%r12, %rdx
    00000212: 	movq	%r15, %rsi
    00000215: 	callq	memcpy@PLT # Offset: 533
    0000021a: 	movq	0x10(%rsp), %r12
    0000021f: 	movq	(%r13), %rdi
    00000223: 	jmp	.Ltmp1636 # Offset: 547
    00000228: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1633:
    00000230: 	movq	0x18(%rsp), %rax
    00000235: 	subq	%fs:0x28, %rax
    0000023e: 	jne	.Ltmp1635 # Offset: 574
    00000240: 	movq	0x8(%rsp), %rax
    00000245: 	leaq	DATAat0x271d0(%rip), %rsi
    0000024c: 	movl	$0x1, %edi
    00000251: 	movq	(%rax), %rdx
    00000254: 	addq	$0x28, %rsp
    00000258: 	xorl	%eax, %eax
    0000025a: 	popq	%rbx
    0000025b: 	popq	%rbp
    0000025c: 	popq	%r12
    0000025e: 	popq	%r13
    00000260: 	popq	%r14
    00000262: 	popq	%r15
    00000264: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 612
    00000269: 	nopl	(%rax) # Size: 7
.Ltmp1626:
    00000270: 	movq	0x8(%rsp), %rsi
    00000275: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000027c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 636
    00000281: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000288: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000028f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000296: 	jne	.Ltmp1637 # Offset: 662
.Ltmp1631:
    0000029c: 	movq	-0x8(%rdx), %rax
    000002a0: 	addq	$0x200, %rax
    000002a6: 	jmp	.Ltmp1637 # Offset: 678
    000002ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1630:
    000002b0: 	testq	%r12, %r12
    000002b3: 	je	.Ltmp1636 # Offset: 691
    000002b9: 	jmp	.Ltmp1638 # Offset: 697
.Ltmp1635:
    000002be: 	callq	__stack_chk_fail@PLT # Offset: 702
.Ltmp1628:
    000002c3: 	leaq	DATAat0x27008(%rip), %rdi
    000002ca: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 714
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_reverse_copyI20BidirectionalPointerIiEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23test_reverse_copy_sizesI20BidirectionalPointerIiEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 219
  State       : disassembled
  Address     : 0x157d0
  Size        : 0x2cc
  MaxSize     : 0x2d0
  Offset      : 0x157d0
  Section     : .text
  Orc Section : .local.text._Z23test_reverse_copy_sizesI20BidirectionalPointerIiEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0218:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	leaq	DATAat0x271e0(%rip), %rsi
    00000010: 	pushq	%r14
    00000012: 	movq	%rdi, %r14
    00000015: 	movl	$0x1, %edi
    0000001a: 	pushq	%r13
    0000001c: 	pushq	%r12
    0000001e: 	pushq	%rbp
    0000001f: 	movq	%r8, %rbp
    00000022: 	pushq	%rbx
    00000023: 	movl	%edx, %ebx
    00000025: 	subq	$0x98, %rsp
    0000002c: 	movl	%edx, 0x48(%rsp)
    00000030: 	movq	%rcx, 0x10(%rsp)
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x88(%rsp)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	movl	%eax, 0x4c(%rsp)
    00000050: 	xorl	%eax, %eax
    00000052: 	callq	__printf_chk@PLT # Offset: 82
    00000057: 	xorl	%eax, %eax
    00000059: 	movl	$0x1, %edi
    0000005e: 	leaq	DATAat0x27210(%rip), %rsi
    00000065: 	callq	__printf_chk@PLT # Offset: 101
    0000006a: 	cmpl	$0x3, %ebx
    0000006d: 	jle	.Ltmp1639 # Offset: 109
    00000073: 	movslq	0x4c(%rsp), %rax
    00000078: 	xorl	%r12d, %r12d
    0000007b: 	movl	$0x4, %ebx
    00000080: 	leaq	0x70(%rsp), %r13
    00000085: 	movq	%rax, 0x18(%rsp)
    0000008a: 	leaq	0x60(%rsp), %rax
    0000008f: 	movq	%rax, 0x8(%rsp)
    00000094: 	leaq	0x58(%rsp), %rax
    00000099: 	movq	%rax, 0x40(%rsp)
    0000009e: 	jmp	.Ltmp1640 # Offset: 158
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1645:
    000000a8: 	movzbl	(%r9), %eax
    000000ac: 	movb	%al, 0x70(%rsp)
    000000b0: 	movq	%r13, %rax
.Ltmp1647:
    000000b3: 	movq	%r8, 0x68(%rsp)
    000000b8: 	movq	0x8(%rsp), %r9
    000000bd: 	movq	%r15, %rdx
    000000c0: 	movq	%r10, %rsi
    000000c3: 	movb	$0x0, (%rax,%r8)
    000000c8: 	movq	0x10(%rsp), %r8
    000000cd: 	movq	%r14, %rdi
    000000d0: 	callq	_Z17test_reverse_copyI20BidirectionalPointerIiEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 208
    000000d5: 	movq	0x60(%rsp), %rdi
    000000da: 	cmpq	%r13, %rdi
    000000dd: 	je	.Ltmp1641 # Offset: 221
    000000df: 	movq	0x70(%rsp), %rax
    000000e4: 	leaq	0x1(%rax), %rsi
    000000e8: 	callq	_ZdlPvm@PLT # Offset: 232
.Ltmp1641:
    000000ed: 	pxor	%xmm1, %xmm1
    000000f1: 	pxor	%xmm2, %xmm2
    000000f5: 	movq	(%rbp), %rcx
    000000f9: 	movl	%ebx, %r8d
    000000fc: 	cvtsi2sd	%ebx, %xmm2
    00000100: 	movq	results(%rip), %rax
    00000107: 	movl	%r12d, %edx
    0000010a: 	addl	%ebx, %ebx
    0000010c: 	leaq	DATAat0x27240(%rip), %rsi
    00000113: 	movl	$0x1, %edi
    00000118: 	addl	$0x1, %r12d
    0000011c: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000124: 	movsd	(%rax), %xmm0
    00000128: 	movl	$0x2, %eax
    0000012d: 	mulsd	%xmm2, %xmm1
    00000131: 	divsd	DATAat0x276b0(%rip), %xmm1
    00000139: 	divsd	%xmm0, %xmm1
    0000013d: 	callq	__printf_chk@PLT # Offset: 317
    00000142: 	movl	$0x0, current_test(%rip)
    0000014c: 	cmpl	%ebx, 0x48(%rsp)
    00000150: 	jl	.Ltmp1639 # Offset: 336
.Ltmp1640:
    00000156: 	movl	0x48(%rsp), %eax
    0000015a: 	movq	(%rbp), %r9
    0000015e: 	movq	%r13, 0x60(%rsp)
    00000163: 	movq	0x8(%rbp), %r8
    00000167: 	cltd
    00000168: 	idivl	%ebx
    0000016a: 	movl	$0x4, %edx
    0000016f: 	cltq
    00000171: 	imulq	0x18(%rsp), %rax
    00000177: 	cmpq	%rdx, %rax
    0000017a: 	cmovlq	%rdx, %rax
    0000017e: 	movl	$0x70000000, %edx
    00000183: 	cmpq	%rdx, %rax
    00000186: 	cmovgq	%rdx, %rax
    0000018a: 	addq	$0x1, %rax
    0000018e: 	andq	$-0x2, %rax
    00000192: 	movl	%eax, iterations(%rip)
    00000198: 	movslq	%ebx, %rax
    0000019b: 	shlq	$0x2, %rax
    0000019f: 	leaq	(%r14,%rax), %r10
    000001a3: 	leaq	(%r15,%rax), %rcx
    000001a7: 	movq	%r9, %rax
    000001aa: 	addq	%r8, %rax
    000001ad: 	je	.Ltmp1642 # Offset: 429
    000001af: 	testq	%r9, %r9
    000001b2: 	je	.Ltmp1643 # Offset: 434
.Ltmp1642:
    000001b8: 	movq	%r8, 0x58(%rsp)
    000001bd: 	cmpq	$0xf, %r8
    000001c1: 	ja	.Ltmp1644 # Offset: 449
    000001c3: 	cmpq	$0x1, %r8
    000001c7: 	je	.Ltmp1645 # Offset: 455
    000001cd: 	testq	%r8, %r8
    000001d0: 	jne	.Ltmp1646 # Offset: 464
    000001d6: 	movq	%r13, %rax
    000001d9: 	jmp	.Ltmp1647 # Offset: 473
    000001de: 	nop # Size: 2
.Ltmp1644:
    000001e0: 	movq	0x8(%rsp), %rdi
    000001e5: 	movq	0x40(%rsp), %rsi
    000001ea: 	xorl	%edx, %edx
    000001ec: 	movq	%r10, 0x38(%rsp)
    000001f1: 	movq	%rcx, 0x30(%rsp)
    000001f6: 	movq	%r8, 0x28(%rsp)
    000001fb: 	movq	%r9, 0x20(%rsp)
    00000200: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 512
    00000205: 	movq	0x20(%rsp), %r9
    0000020a: 	movq	0x28(%rsp), %r8
    0000020f: 	movq	%rax, 0x60(%rsp)
    00000214: 	movq	%rax, %rdi
    00000217: 	movq	0x58(%rsp), %rax
    0000021c: 	movq	0x30(%rsp), %rcx
    00000221: 	movq	0x38(%rsp), %r10
    00000226: 	movq	%rax, 0x70(%rsp)
.Ltmp1649:
    0000022b: 	movq	%r8, %rdx
    0000022e: 	movq	%r9, %rsi
    00000231: 	movq	%r10, 0x28(%rsp)
    00000236: 	movq	%rcx, 0x20(%rsp)
    0000023b: 	callq	memcpy@PLT # Offset: 571
    00000240: 	movq	0x58(%rsp), %r8
    00000245: 	movq	0x60(%rsp), %rax
    0000024a: 	movq	0x20(%rsp), %rcx
    0000024f: 	movq	0x28(%rsp), %r10
    00000254: 	jmp	.Ltmp1647 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp1639:
    00000260: 	movl	0x4c(%rsp), %eax
    00000264: 	movl	%eax, iterations(%rip)
    0000026a: 	movq	0x88(%rsp), %rax
    00000272: 	subq	%fs:0x28, %rax
    0000027b: 	jne	.Ltmp1648 # Offset: 635
    0000027d: 	addq	$0x98, %rsp
    00000284: 	popq	%rbx
    00000285: 	popq	%rbp
    00000286: 	popq	%r12
    00000288: 	popq	%r13
    0000028a: 	popq	%r14
    0000028c: 	popq	%r15
    0000028e: 	retq # Offset: 654
.Ltmp1643:
    0000028f: 	leaq	DATAat0x27008(%rip), %rdi
    00000296: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 662
.Ltmp1648:
    0000029b: 	callq	__stack_chk_fail@PLT # Offset: 667
.Ltmp1646:
    000002a0: 	movq	%r13, %rdi
    000002a3: 	jmp	.Ltmp1649 # Offset: 675
    000002a5: 	endbr64
    000002a9: 	movq	%rax, %rbp
    000002ac: 	movq	0x60(%rsp), %rdi
    000002b1: 	cmpq	%r13, %rdi
    000002b4: 	je	.Ltmp1650 # Offset: 692
    000002b6: 	movq	0x70(%rsp), %rax
    000002bb: 	leaq	0x1(%rax), %rsi
    000002bf: 	callq	_ZdlPvm@PLT # Offset: 703
.Ltmp1650:
    000002c4: 	movq	%rbp, %rdi
    000002c7: 	callq	_Unwind_Resume@PLT # Offset: 711
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_reverse_copy_sizesI20BidirectionalPointerIiEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12test_reverseI20BidirectionalPointerIhEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1(*2)" after disassembly {
  All names   : _Z12test_reverseI20BidirectionalPointerIhEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1
                _Z12test_reverseI20BidirectionalPointerIhEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/reverse_sequence.cpp/1
  Number      : 220
  State       : disassembled
  Address     : 0x15aa0
  Size        : 0x232
  MaxSize     : 0x240
  Offset      : 0x15aa0
  Section     : .text
  Orc Section : .local.text._Z12test_reverseI20BidirectionalPointerIhEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0219:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movq	%rsi, %r12
    0000000b: 	pushq	%rbp
    0000000c: 	movq	%rdi, %rbp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdx, %rbx
    00000013: 	subq	$0x18, %rsp
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0x8(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	callq	clock@PLT # Offset: 39
    0000002c: 	movq	%rax, start_time(%rip)
    00000033: 	movl	iterations(%rip), %eax
    00000039: 	testl	%eax, %eax
    0000003b: 	jle	.Ltmp1651 # Offset: 59
    0000003d: 	cmpq	%rbp, %r12
    00000040: 	je	.Ltmp1651 # Offset: 64
    00000042: 	xorl	%edi, %edi
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp1654:
    00000048: 	movq	%rbp, %rdx
    0000004b: 	movq	%r12, %rax
    0000004e: 	nop # Size: 2
.Ltmp1653:
    00000050: 	subq	$0x1, %rax
    00000054: 	cmpq	%rdx, %rax
    00000057: 	je	.Ltmp1652 # Offset: 87
    00000059: 	movzbl	(%rax), %esi
    0000005c: 	movzbl	(%rdx), %ecx
    0000005f: 	addq	$0x1, %rdx
    00000063: 	movb	%sil, -0x1(%rdx)
    00000067: 	movb	%cl, (%rax)
    00000069: 	cmpq	%rdx, %rax
    0000006c: 	jne	.Ltmp1653 # Offset: 108
.Ltmp1652:
    0000006e: 	movl	iterations(%rip), %eax
    00000074: 	addl	$0x1, %edi
    00000077: 	cmpl	%eax, %edi
    00000079: 	jl	.Ltmp1654 # Offset: 121
.Ltmp1651:
    0000007b: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000082: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    00000089: 	subq	$0x20, %rax
    0000008d: 	cmpq	%rax, %r14
    00000090: 	je	.Ltmp1655 # Offset: 144
    00000096: 	leaq	0x10(%r14), %rdi
    0000009a: 	movq	0x8(%rbx), %r13
    0000009e: 	movq	%rdi, (%r14)
    000000a1: 	movq	(%rbx), %r15
    000000a4: 	movq	%r15, %rax
    000000a7: 	addq	%r13, %rax
    000000aa: 	je	.Ltmp1656 # Offset: 170
    000000ac: 	testq	%r15, %r15
    000000af: 	je	.Ltmp1657 # Offset: 175
.Ltmp1656:
    000000b5: 	movq	%r13, (%rsp)
    000000b9: 	cmpq	$0xf, %r13
    000000bd: 	ja	.Ltmp1658 # Offset: 189
    000000c3: 	cmpq	$0x1, %r13
    000000c7: 	jne	.Ltmp1659 # Offset: 199
    000000cd: 	movzbl	(%r15), %eax
    000000d1: 	movb	%al, 0x10(%r14)
.Ltmp1665:
    000000d5: 	movq	%r13, 0x8(%r14)
    000000d9: 	movb	$0x0, (%rdi,%r13)
    000000de: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000e5: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000ec: 	addq	$0x20, %rax
    000000f0: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000f7: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000fe: 	je	.Ltmp1660 # Offset: 254
.Ltmp1666:
    00000104: 	movq	-0x20(%rax), %r13
    00000108: 	callq	clock@PLT # Offset: 264
    0000010d: 	pxor	%xmm0, %xmm0
    00000111: 	movq	%rax, end_time(%rip)
    00000118: 	movq	%r13, %rdi
    0000011b: 	subq	start_time(%rip), %rax
    00000122: 	cvtsi2sd	%rax, %xmm0
    00000127: 	divsd	DATAat0x276b0(%rip), %xmm0
    0000012f: 	callq	_Z13record_resultdPKc # Offset: 303
    00000134: 	leaq	0x1(%rbp), %rax
    00000138: 	jmp	.Ltmp1661 # Offset: 312
    0000013a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1663:
    00000140: 	movzbl	(%rax), %edx
    00000143: 	addq	$0x1, %rax
    00000147: 	cmpb	-0x2(%rax), %dl
    0000014a: 	jb	.Ltmp1662 # Offset: 330
.Ltmp1661:
    0000014c: 	cmpq	%r12, %rax
    0000014f: 	jne	.Ltmp1663 # Offset: 335
    00000151: 	movq	0x8(%rsp), %rax
    00000156: 	subq	%fs:0x28, %rax
    0000015f: 	jne	.Ltmp1664 # Offset: 351
    00000165: 	addq	$0x18, %rsp
    00000169: 	popq	%rbx
    0000016a: 	popq	%rbp
    0000016b: 	popq	%r12
    0000016d: 	popq	%r13
    0000016f: 	popq	%r14
    00000171: 	popq	%r15
    00000173: 	retq # Offset: 371
.Ltmp1658:
    00000174: 	movq	%r14, %rdi
    00000177: 	movq	%rsp, %rsi
    0000017a: 	xorl	%edx, %edx
    0000017c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 380
    00000181: 	movq	%rax, (%r14)
    00000184: 	movq	%rax, %rdi
    00000187: 	movq	(%rsp), %rax
    0000018b: 	movq	%rax, 0x10(%r14)
.Ltmp1667:
    0000018f: 	movq	%r13, %rdx
    00000192: 	movq	%r15, %rsi
    00000195: 	callq	memcpy@PLT # Offset: 405
    0000019a: 	movq	(%rsp), %r13
    0000019e: 	movq	(%r14), %rdi
    000001a1: 	jmp	.Ltmp1665 # Offset: 417
.Ltmp1662:
    000001a6: 	movq	0x8(%rsp), %rax
    000001ab: 	subq	%fs:0x28, %rax
    000001b4: 	jne	.Ltmp1664 # Offset: 436
    000001b6: 	movq	(%rbx), %rdx
    000001b9: 	addq	$0x18, %rsp
    000001bd: 	leaq	DATAat0x271d0(%rip), %rsi
    000001c4: 	xorl	%eax, %eax
    000001c6: 	popq	%rbx
    000001c7: 	movl	$0x1, %edi
    000001cc: 	popq	%rbp
    000001cd: 	popq	%r12
    000001cf: 	popq	%r13
    000001d1: 	popq	%r14
    000001d3: 	popq	%r15
    000001d5: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 469
.Ltmp1655:
    000001da: 	movq	%rbx, %rsi
    000001dd: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000001e4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 484
    000001e9: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000001f0: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001f7: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000001fe: 	jne	.Ltmp1666 # Offset: 510
.Ltmp1660:
    00000204: 	movq	-0x8(%rdx), %rax
    00000208: 	addq	$0x200, %rax
    0000020e: 	jmp	.Ltmp1666 # Offset: 526
.Ltmp1659:
    00000213: 	testq	%r13, %r13
    00000216: 	je	.Ltmp1665 # Offset: 534
    0000021c: 	jmp	.Ltmp1667 # Offset: 540
.Ltmp1664:
    00000221: 	callq	__stack_chk_fail@PLT # Offset: 545
.Ltmp1657:
    00000226: 	leaq	DATAat0x27008(%rip), %rdi
    0000022d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 557
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_reverseI20BidirectionalPointerIhEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1(*2)"

Binary Function "_Z17test_reverse_copyI20BidirectionalPointerIsEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 221
  State       : disassembled
  Address     : 0x15ce0
  Size        : 0x308
  MaxSize     : 0x310
  Offset      : 0x15ce0
  Section     : .text
  Orc Section : .local.text._Z17test_reverse_copyI20BidirectionalPointerIsEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0220:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rcx, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdx, %rbx
    0000001d: 	subq	$0x28, %rsp
    00000021: 	movq	%r9, 0x8(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x18(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rcx, %rdx
    00000039: 	je	.Ltmp1668 # Offset: 57
    0000003f: 	movq	%rdx, %rax
    00000042: 	leaq	-0x2(%rcx), %rdx
    00000046: 	subq	%rbx, %rdx
    00000049: 	movq	%rdx, %rcx
    0000004c: 	shrq	%rcx
    0000004f: 	leaq	0x1(%rcx), %rsi
    00000053: 	cmpq	$0xc, %rdx
    00000057: 	jbe	.Ltmp1669 # Offset: 87
    0000005d: 	movq	%rsi, %rdx
    00000060: 	movdqa	DATAat0x275b0(%rip), %xmm0
    00000068: 	shrq	$0x3, %rdx
    0000006c: 	shlq	$0x4, %rdx
    00000070: 	addq	%rbx, %rdx
    00000073: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1670:
    00000078: 	movups	%xmm0, (%rax)
    0000007b: 	addq	$0x10, %rax
    0000007f: 	cmpq	%rdx, %rax
    00000082: 	jne	.Ltmp1670 # Offset: 130
    00000084: 	movq	%rsi, %rdx
    00000087: 	andq	$-0x8, %rdx
    0000008b: 	leaq	(%rbx,%rdx,2), %rax
    0000008f: 	cmpq	%rdx, %rsi
    00000092: 	je	.Ltmp1668 # Offset: 146
.Ltmp1688:
    00000094: 	subq	%rdx, %rcx
    00000097: 	leaq	0x1(%rcx), %rsi
    0000009b: 	cmpq	$0x2, %rcx
    0000009f: 	jbe	.Ltmp1671 # Offset: 159
    000000a1: 	movq	DATAat0x275b0(%rip), %rcx
    000000a8: 	movq	%rcx, (%rbx,%rdx,2)
    000000ac: 	movq	%rsi, %rdx
    000000af: 	andq	$-0x4, %rdx
    000000b3: 	leaq	(%rax,%rdx,2), %rax
    000000b7: 	cmpq	%rdx, %rsi
    000000ba: 	je	.Ltmp1668 # Offset: 186
.Ltmp1671:
    000000bc: 	movl	$0x63, %esi
    000000c1: 	leaq	0x2(%rax), %rdx
    000000c5: 	movw	%si, (%rax)
    000000c8: 	cmpq	%rdx, %rbp
    000000cb: 	je	.Ltmp1668 # Offset: 203
    000000cd: 	movl	$0x63, %ecx
    000000d2: 	leaq	0x4(%rax), %rdx
    000000d6: 	movw	%cx, 0x2(%rax)
    000000da: 	cmpq	%rdx, %rbp
    000000dd: 	je	.Ltmp1668 # Offset: 221
    000000df: 	movl	$0x63, %edx
    000000e4: 	movw	%dx, 0x4(%rax)
.Ltmp1668:
    000000e8: 	callq	clock@PLT # Offset: 232
    000000ed: 	movl	iterations(%rip), %edi
    000000f3: 	xorl	%r14d, %r14d
    000000f6: 	movq	%rax, start_time(%rip)
    000000fd: 	testl	%edi, %edi
    000000ff: 	jle	.Ltmp1672 # Offset: 255
    00000101: 	nopl	(%rax) # Size: 7
.Ltmp1673:
    00000108: 	movq	%rbx, %rdx
    0000010b: 	movq	%r13, %rsi
    0000010e: 	movq	%r12, %rdi
    00000111: 	addl	$0x1, %r14d
    00000115: 	callq	*%r15 # Offset: 277
    00000118: 	cmpl	%r14d, iterations(%rip)
    0000011f: 	jg	.Ltmp1673 # Offset: 287
.Ltmp1672:
    00000121: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000128: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    0000012f: 	subq	$0x20, %rax
    00000133: 	cmpq	%rax, %r13
    00000136: 	je	.Ltmp1674 # Offset: 310
    0000013c: 	movq	0x8(%rsp), %rax
    00000141: 	leaq	0x10(%r13), %rdi
    00000145: 	movq	%rdi, (%r13)
    00000149: 	movq	(%rax), %r15
    0000014c: 	movq	0x8(%rax), %r12
    00000150: 	movq	%r15, %rax
    00000153: 	addq	%r12, %rax
    00000156: 	je	.Ltmp1675 # Offset: 342
    00000158: 	testq	%r15, %r15
    0000015b: 	je	.Ltmp1676 # Offset: 347
.Ltmp1675:
    00000161: 	movq	%r12, 0x10(%rsp)
    00000166: 	cmpq	$0xf, %r12
    0000016a: 	ja	.Ltmp1677 # Offset: 362
    00000170: 	cmpq	$0x1, %r12
    00000174: 	jne	.Ltmp1678 # Offset: 372
    0000017a: 	movzbl	(%r15), %eax
    0000017e: 	movb	%al, 0x10(%r13)
.Ltmp1684:
    00000182: 	movq	%r12, 0x8(%r13)
    00000186: 	movb	$0x0, (%rdi,%r12)
    0000018b: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000192: 	addq	$0x20, %rax
    00000196: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1686:
    0000019d: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001a4: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000001ab: 	je	.Ltmp1679 # Offset: 427
.Ltmp1685:
    000001b1: 	movq	-0x20(%rax), %r12
    000001b5: 	callq	clock@PLT # Offset: 437
    000001ba: 	pxor	%xmm0, %xmm0
    000001be: 	movq	%rax, end_time(%rip)
    000001c5: 	movq	%r12, %rdi
    000001c8: 	subq	start_time(%rip), %rax
    000001cf: 	cvtsi2sd	%rax, %xmm0
    000001d4: 	divsd	DATAat0x276b0(%rip), %xmm0
    000001dc: 	callq	_Z13record_resultdPKc # Offset: 476
    000001e1: 	leaq	0x2(%rbx), %rax
    000001e5: 	jmp	.Ltmp1680 # Offset: 485
    000001e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1682:
    000001f0: 	addq	$0x2, %rax
    000001f4: 	movzwl	-0x2(%rax), %ecx
    000001f8: 	cmpw	%cx, -0x2(%rdx)
    000001fc: 	jl	.Ltmp1681 # Offset: 508
.Ltmp1680:
    000001fe: 	movq	%rax, %rdx
    00000201: 	cmpq	%rax, %rbp
    00000204: 	jne	.Ltmp1682 # Offset: 516
    00000206: 	movq	0x18(%rsp), %rax
    0000020b: 	subq	%fs:0x28, %rax
    00000214: 	jne	.Ltmp1683 # Offset: 532
    0000021a: 	addq	$0x28, %rsp
    0000021e: 	popq	%rbx
    0000021f: 	popq	%rbp
    00000220: 	popq	%r12
    00000222: 	popq	%r13
    00000224: 	popq	%r14
    00000226: 	popq	%r15
    00000228: 	retq # Offset: 552
    00000229: 	nopl	(%rax) # Size: 7
.Ltmp1677:
    00000230: 	movq	%r13, %rdi
    00000233: 	leaq	0x10(%rsp), %rsi
    00000238: 	xorl	%edx, %edx
    0000023a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 570
    0000023f: 	movq	%rax, (%r13)
    00000243: 	movq	%rax, %rdi
    00000246: 	movq	0x10(%rsp), %rax
    0000024b: 	movq	%rax, 0x10(%r13)
.Ltmp1687:
    0000024f: 	movq	%r12, %rdx
    00000252: 	movq	%r15, %rsi
    00000255: 	callq	memcpy@PLT # Offset: 597
    0000025a: 	movq	0x10(%rsp), %r12
    0000025f: 	movq	(%r13), %rdi
    00000263: 	jmp	.Ltmp1684 # Offset: 611
    00000268: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1681:
    00000270: 	movq	0x18(%rsp), %rax
    00000275: 	subq	%fs:0x28, %rax
    0000027e: 	jne	.Ltmp1683 # Offset: 638
    00000284: 	movq	0x8(%rsp), %rax
    00000289: 	leaq	DATAat0x271d0(%rip), %rsi
    00000290: 	movl	$0x1, %edi
    00000295: 	movq	(%rax), %rdx
    00000298: 	addq	$0x28, %rsp
    0000029c: 	xorl	%eax, %eax
    0000029e: 	popq	%rbx
    0000029f: 	popq	%rbp
    000002a0: 	popq	%r12
    000002a2: 	popq	%r13
    000002a4: 	popq	%r14
    000002a6: 	popq	%r15
    000002a8: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 680
    000002ad: 	nopl	(%rax) # Size: 3
.Ltmp1679:
    000002b0: 	movq	-0x8(%rdx), %rax
    000002b4: 	addq	$0x200, %rax
    000002ba: 	jmp	.Ltmp1685 # Offset: 698
    000002bf: 	nop # Size: 1
.Ltmp1674:
    000002c0: 	movq	0x8(%rsp), %rsi
    000002c5: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000002cc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 716
    000002d1: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000002d8: 	jmp	.Ltmp1686 # Offset: 728
    000002dd: 	nopl	(%rax) # Size: 3
.Ltmp1678:
    000002e0: 	testq	%r12, %r12
    000002e3: 	je	.Ltmp1684 # Offset: 739
    000002e9: 	jmp	.Ltmp1687 # Offset: 745
    000002ee: 	nop # Size: 2
.Ltmp1669:
    000002f0: 	xorl	%edx, %edx
    000002f2: 	jmp	.Ltmp1688 # Offset: 754
.Ltmp1676:
    000002f7: 	leaq	DATAat0x27008(%rip), %rdi
    000002fe: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 766
.Ltmp1683:
    00000303: 	callq	__stack_chk_fail@PLT # Offset: 771
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_reverse_copyI20BidirectionalPointerIsEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23test_reverse_copy_sizesI20BidirectionalPointerIsEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 222
  State       : disassembled
  Address     : 0x15ff0
  Size        : 0x2cc
  MaxSize     : 0x2d0
  Offset      : 0x15ff0
  Section     : .text
  Orc Section : .local.text._Z23test_reverse_copy_sizesI20BidirectionalPointerIsEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0221:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	leaq	DATAat0x271e0(%rip), %rsi
    00000010: 	pushq	%r14
    00000012: 	movq	%rdi, %r14
    00000015: 	movl	$0x1, %edi
    0000001a: 	pushq	%r13
    0000001c: 	pushq	%r12
    0000001e: 	pushq	%rbp
    0000001f: 	movq	%r8, %rbp
    00000022: 	pushq	%rbx
    00000023: 	movl	%edx, %ebx
    00000025: 	subq	$0x98, %rsp
    0000002c: 	movl	%edx, 0x48(%rsp)
    00000030: 	movq	%rcx, 0x10(%rsp)
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x88(%rsp)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	movl	%eax, 0x4c(%rsp)
    00000050: 	xorl	%eax, %eax
    00000052: 	callq	__printf_chk@PLT # Offset: 82
    00000057: 	xorl	%eax, %eax
    00000059: 	movl	$0x1, %edi
    0000005e: 	leaq	DATAat0x27210(%rip), %rsi
    00000065: 	callq	__printf_chk@PLT # Offset: 101
    0000006a: 	cmpl	$0x3, %ebx
    0000006d: 	jle	.Ltmp1689 # Offset: 109
    00000073: 	movslq	0x4c(%rsp), %rax
    00000078: 	xorl	%r12d, %r12d
    0000007b: 	movl	$0x4, %ebx
    00000080: 	leaq	0x70(%rsp), %r13
    00000085: 	movq	%rax, 0x18(%rsp)
    0000008a: 	leaq	0x60(%rsp), %rax
    0000008f: 	movq	%rax, 0x8(%rsp)
    00000094: 	leaq	0x58(%rsp), %rax
    00000099: 	movq	%rax, 0x40(%rsp)
    0000009e: 	jmp	.Ltmp1690 # Offset: 158
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1695:
    000000a8: 	movzbl	(%r9), %eax
    000000ac: 	movb	%al, 0x70(%rsp)
    000000b0: 	movq	%r13, %rax
.Ltmp1697:
    000000b3: 	movq	%r8, 0x68(%rsp)
    000000b8: 	movq	0x8(%rsp), %r9
    000000bd: 	movq	%r15, %rdx
    000000c0: 	movq	%r10, %rsi
    000000c3: 	movb	$0x0, (%rax,%r8)
    000000c8: 	movq	0x10(%rsp), %r8
    000000cd: 	movq	%r14, %rdi
    000000d0: 	callq	_Z17test_reverse_copyI20BidirectionalPointerIsEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 208
    000000d5: 	movq	0x60(%rsp), %rdi
    000000da: 	cmpq	%r13, %rdi
    000000dd: 	je	.Ltmp1691 # Offset: 221
    000000df: 	movq	0x70(%rsp), %rax
    000000e4: 	leaq	0x1(%rax), %rsi
    000000e8: 	callq	_ZdlPvm@PLT # Offset: 232
.Ltmp1691:
    000000ed: 	pxor	%xmm1, %xmm1
    000000f1: 	pxor	%xmm2, %xmm2
    000000f5: 	movq	(%rbp), %rcx
    000000f9: 	movl	%ebx, %r8d
    000000fc: 	cvtsi2sd	%ebx, %xmm2
    00000100: 	movq	results(%rip), %rax
    00000107: 	movl	%r12d, %edx
    0000010a: 	addl	%ebx, %ebx
    0000010c: 	leaq	DATAat0x27240(%rip), %rsi
    00000113: 	movl	$0x1, %edi
    00000118: 	addl	$0x1, %r12d
    0000011c: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000124: 	movsd	(%rax), %xmm0
    00000128: 	movl	$0x2, %eax
    0000012d: 	mulsd	%xmm2, %xmm1
    00000131: 	divsd	DATAat0x276b0(%rip), %xmm1
    00000139: 	divsd	%xmm0, %xmm1
    0000013d: 	callq	__printf_chk@PLT # Offset: 317
    00000142: 	movl	$0x0, current_test(%rip)
    0000014c: 	cmpl	%ebx, 0x48(%rsp)
    00000150: 	jl	.Ltmp1689 # Offset: 336
.Ltmp1690:
    00000156: 	movl	0x48(%rsp), %eax
    0000015a: 	movq	(%rbp), %r9
    0000015e: 	movq	%r13, 0x60(%rsp)
    00000163: 	movq	0x8(%rbp), %r8
    00000167: 	cltd
    00000168: 	idivl	%ebx
    0000016a: 	movl	$0x4, %edx
    0000016f: 	cltq
    00000171: 	imulq	0x18(%rsp), %rax
    00000177: 	cmpq	%rdx, %rax
    0000017a: 	cmovlq	%rdx, %rax
    0000017e: 	movl	$0x70000000, %edx
    00000183: 	cmpq	%rdx, %rax
    00000186: 	cmovgq	%rdx, %rax
    0000018a: 	addq	$0x1, %rax
    0000018e: 	andq	$-0x2, %rax
    00000192: 	movl	%eax, iterations(%rip)
    00000198: 	movslq	%ebx, %rax
    0000019b: 	addq	%rax, %rax
    0000019e: 	leaq	(%r14,%rax), %r10
    000001a2: 	leaq	(%r15,%rax), %rcx
    000001a6: 	movq	%r9, %rax
    000001a9: 	addq	%r8, %rax
    000001ac: 	je	.Ltmp1692 # Offset: 428
    000001ae: 	testq	%r9, %r9
    000001b1: 	je	.Ltmp1693 # Offset: 433
.Ltmp1692:
    000001b7: 	movq	%r8, 0x58(%rsp)
    000001bc: 	cmpq	$0xf, %r8
    000001c0: 	ja	.Ltmp1694 # Offset: 448
    000001c2: 	cmpq	$0x1, %r8
    000001c6: 	je	.Ltmp1695 # Offset: 454
    000001cc: 	testq	%r8, %r8
    000001cf: 	jne	.Ltmp1696 # Offset: 463
    000001d5: 	movq	%r13, %rax
    000001d8: 	jmp	.Ltmp1697 # Offset: 472
    000001dd: 	nopl	(%rax) # Size: 3
.Ltmp1694:
    000001e0: 	movq	0x8(%rsp), %rdi
    000001e5: 	movq	0x40(%rsp), %rsi
    000001ea: 	xorl	%edx, %edx
    000001ec: 	movq	%r10, 0x38(%rsp)
    000001f1: 	movq	%rcx, 0x30(%rsp)
    000001f6: 	movq	%r8, 0x28(%rsp)
    000001fb: 	movq	%r9, 0x20(%rsp)
    00000200: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 512
    00000205: 	movq	0x20(%rsp), %r9
    0000020a: 	movq	0x28(%rsp), %r8
    0000020f: 	movq	%rax, 0x60(%rsp)
    00000214: 	movq	%rax, %rdi
    00000217: 	movq	0x58(%rsp), %rax
    0000021c: 	movq	0x30(%rsp), %rcx
    00000221: 	movq	0x38(%rsp), %r10
    00000226: 	movq	%rax, 0x70(%rsp)
.Ltmp1699:
    0000022b: 	movq	%r8, %rdx
    0000022e: 	movq	%r9, %rsi
    00000231: 	movq	%r10, 0x28(%rsp)
    00000236: 	movq	%rcx, 0x20(%rsp)
    0000023b: 	callq	memcpy@PLT # Offset: 571
    00000240: 	movq	0x58(%rsp), %r8
    00000245: 	movq	0x60(%rsp), %rax
    0000024a: 	movq	0x20(%rsp), %rcx
    0000024f: 	movq	0x28(%rsp), %r10
    00000254: 	jmp	.Ltmp1697 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp1689:
    00000260: 	movl	0x4c(%rsp), %eax
    00000264: 	movl	%eax, iterations(%rip)
    0000026a: 	movq	0x88(%rsp), %rax
    00000272: 	subq	%fs:0x28, %rax
    0000027b: 	jne	.Ltmp1698 # Offset: 635
    0000027d: 	addq	$0x98, %rsp
    00000284: 	popq	%rbx
    00000285: 	popq	%rbp
    00000286: 	popq	%r12
    00000288: 	popq	%r13
    0000028a: 	popq	%r14
    0000028c: 	popq	%r15
    0000028e: 	retq # Offset: 654
.Ltmp1693:
    0000028f: 	leaq	DATAat0x27008(%rip), %rdi
    00000296: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 662
.Ltmp1698:
    0000029b: 	callq	__stack_chk_fail@PLT # Offset: 667
.Ltmp1696:
    000002a0: 	movq	%r13, %rdi
    000002a3: 	jmp	.Ltmp1699 # Offset: 675
    000002a5: 	endbr64
    000002a9: 	movq	%rax, %rbp
    000002ac: 	movq	0x60(%rsp), %rdi
    000002b1: 	cmpq	%r13, %rdi
    000002b4: 	je	.Ltmp1700 # Offset: 692
    000002b6: 	movq	0x70(%rsp), %rax
    000002bb: 	leaq	0x1(%rax), %rsi
    000002bf: 	callq	_ZdlPvm@PLT # Offset: 703
.Ltmp1700:
    000002c4: 	movq	%rbp, %rdi
    000002c7: 	callq	_Unwind_Resume@PLT # Offset: 711
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_reverse_copy_sizesI20BidirectionalPointerIsEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_reverse_copyI20BidirectionalPointerIdEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 223
  State       : disassembled
  Address     : 0x162c0
  Size        : 0x2af
  MaxSize     : 0x2b0
  Offset      : 0x162c0
  Section     : .text
  Orc Section : .local.text._Z17test_reverse_copyI20BidirectionalPointerIdEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0222:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rcx, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdx, %rbx
    0000001d: 	subq	$0x28, %rsp
    00000021: 	movq	%r9, 0x8(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x18(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rcx, %rdx
    00000039: 	je	.Ltmp1701 # Offset: 57
    0000003b: 	movq	%rdx, %rax
    0000003e: 	movq	%rcx, %rdx
    00000041: 	subq	%rbx, %rdx
    00000044: 	leaq	-0x8(%rdx), %rcx
    00000048: 	shrq	$0x3, %rcx
    0000004c: 	addq	$0x1, %rcx
    00000050: 	cmpq	$0x8, %rdx
    00000054: 	je	.Ltmp1702 # Offset: 84
    00000056: 	movq	%rcx, %rdx
    00000059: 	movapd	DATAat0x275d0(%rip), %xmm0
    00000061: 	shrq	%rdx
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rbx, %rdx
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1703:
    00000070: 	movups	%xmm0, (%rax)
    00000073: 	addq	$0x10, %rax
    00000077: 	cmpq	%rdx, %rax
    0000007a: 	jne	.Ltmp1703 # Offset: 122
    0000007c: 	movq	%rcx, %rdx
    0000007f: 	andq	$-0x2, %rdx
    00000083: 	leaq	(%rbx,%rdx,8), %rax
    00000087: 	cmpq	%rcx, %rdx
    0000008a: 	je	.Ltmp1701 # Offset: 138
.Ltmp1702:
    0000008c: 	movq	DATAat0x275d0(%rip), %rcx
    00000093: 	movq	%rcx, (%rax)
.Ltmp1701:
    00000096: 	callq	clock@PLT # Offset: 150
    0000009b: 	xorl	%r14d, %r14d
    0000009e: 	movq	%rax, start_time(%rip)
    000000a5: 	movl	iterations(%rip), %eax
    000000ab: 	testl	%eax, %eax
    000000ad: 	jle	.Ltmp1704 # Offset: 173
    000000af: 	nop # Size: 1
.Ltmp1705:
    000000b0: 	movq	%rbx, %rdx
    000000b3: 	movq	%r13, %rsi
    000000b6: 	movq	%r12, %rdi
    000000b9: 	addl	$0x1, %r14d
    000000bd: 	callq	*%r15 # Offset: 189
    000000c0: 	cmpl	%r14d, iterations(%rip)
    000000c7: 	jg	.Ltmp1705 # Offset: 199
.Ltmp1704:
    000000c9: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000d0: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    000000d7: 	subq	$0x20, %rax
    000000db: 	cmpq	%rax, %r13
    000000de: 	je	.Ltmp1706 # Offset: 222
    000000e4: 	movq	0x8(%rsp), %rax
    000000e9: 	leaq	0x10(%r13), %rdi
    000000ed: 	movq	%rdi, (%r13)
    000000f1: 	movq	(%rax), %r15
    000000f4: 	movq	0x8(%rax), %r12
    000000f8: 	movq	%r15, %rax
    000000fb: 	addq	%r12, %rax
    000000fe: 	je	.Ltmp1707 # Offset: 254
    00000100: 	testq	%r15, %r15
    00000103: 	je	.Ltmp1708 # Offset: 259
.Ltmp1707:
    00000109: 	movq	%r12, 0x10(%rsp)
    0000010e: 	cmpq	$0xf, %r12
    00000112: 	ja	.Ltmp1709 # Offset: 274
    00000118: 	cmpq	$0x1, %r12
    0000011c: 	jne	.Ltmp1710 # Offset: 284
    00000122: 	movzbl	(%r15), %eax
    00000126: 	movb	%al, 0x10(%r13)
.Ltmp1716:
    0000012a: 	movq	%r12, 0x8(%r13)
    0000012e: 	movb	$0x0, (%rdi,%r12)
    00000133: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000013a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000141: 	addq	$0x20, %rax
    00000145: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000014c: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000153: 	je	.Ltmp1711 # Offset: 339
.Ltmp1717:
    00000159: 	movq	-0x20(%rax), %r12
    0000015d: 	callq	clock@PLT # Offset: 349
    00000162: 	pxor	%xmm0, %xmm0
    00000166: 	movq	%rax, end_time(%rip)
    0000016d: 	movq	%r12, %rdi
    00000170: 	subq	start_time(%rip), %rax
    00000177: 	cvtsi2sd	%rax, %xmm0
    0000017c: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000184: 	callq	_Z13record_resultdPKc # Offset: 388
    00000189: 	leaq	0x8(%rbx), %rax
    0000018d: 	jmp	.Ltmp1712 # Offset: 397
    0000018f: 	nop # Size: 1
.Ltmp1714:
    00000190: 	addq	$0x8, %rax
    00000194: 	movsd	-0x8(%rax), %xmm0
    00000199: 	comisd	-0x8(%rdx), %xmm0
    0000019e: 	ja	.Ltmp1713 # Offset: 414
.Ltmp1712:
    000001a0: 	movq	%rax, %rdx
    000001a3: 	cmpq	%rax, %rbp
    000001a6: 	jne	.Ltmp1714 # Offset: 422
    000001a8: 	movq	0x18(%rsp), %rax
    000001ad: 	subq	%fs:0x28, %rax
    000001b6: 	jne	.Ltmp1715 # Offset: 438
    000001bc: 	addq	$0x28, %rsp
    000001c0: 	popq	%rbx
    000001c1: 	popq	%rbp
    000001c2: 	popq	%r12
    000001c4: 	popq	%r13
    000001c6: 	popq	%r14
    000001c8: 	popq	%r15
    000001ca: 	retq # Offset: 458
    000001cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1709:
    000001d0: 	movq	%r13, %rdi
    000001d3: 	leaq	0x10(%rsp), %rsi
    000001d8: 	xorl	%edx, %edx
    000001da: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 474
    000001df: 	movq	%rax, (%r13)
    000001e3: 	movq	%rax, %rdi
    000001e6: 	movq	0x10(%rsp), %rax
    000001eb: 	movq	%rax, 0x10(%r13)
.Ltmp1718:
    000001ef: 	movq	%r12, %rdx
    000001f2: 	movq	%r15, %rsi
    000001f5: 	callq	memcpy@PLT # Offset: 501
    000001fa: 	movq	0x10(%rsp), %r12
    000001ff: 	movq	(%r13), %rdi
    00000203: 	jmp	.Ltmp1716 # Offset: 515
    00000208: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1713:
    00000210: 	movq	0x18(%rsp), %rax
    00000215: 	subq	%fs:0x28, %rax
    0000021e: 	jne	.Ltmp1715 # Offset: 542
    00000220: 	movq	0x8(%rsp), %rax
    00000225: 	leaq	DATAat0x271d0(%rip), %rsi
    0000022c: 	movl	$0x1, %edi
    00000231: 	movq	(%rax), %rdx
    00000234: 	addq	$0x28, %rsp
    00000238: 	xorl	%eax, %eax
    0000023a: 	popq	%rbx
    0000023b: 	popq	%rbp
    0000023c: 	popq	%r12
    0000023e: 	popq	%r13
    00000240: 	popq	%r14
    00000242: 	popq	%r15
    00000244: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 580
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp1706:
    00000250: 	movq	0x8(%rsp), %rsi
    00000255: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000025c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 604
    00000261: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000268: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000026f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000276: 	jne	.Ltmp1717 # Offset: 630
.Ltmp1711:
    0000027c: 	movq	-0x8(%rdx), %rax
    00000280: 	addq	$0x200, %rax
    00000286: 	jmp	.Ltmp1717 # Offset: 646
    0000028b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1710:
    00000290: 	testq	%r12, %r12
    00000293: 	je	.Ltmp1716 # Offset: 659
    00000299: 	jmp	.Ltmp1718 # Offset: 665
.Ltmp1715:
    0000029e: 	callq	__stack_chk_fail@PLT # Offset: 670
.Ltmp1708:
    000002a3: 	leaq	DATAat0x27008(%rip), %rdi
    000002aa: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 682
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_reverse_copyI20BidirectionalPointerIdEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23test_reverse_copy_sizesI20BidirectionalPointerIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 224
  State       : disassembled
  Address     : 0x16570
  Size        : 0x2cc
  MaxSize     : 0x2d0
  Offset      : 0x16570
  Section     : .text
  Orc Section : .local.text._Z23test_reverse_copy_sizesI20BidirectionalPointerIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0223:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	leaq	DATAat0x271e0(%rip), %rsi
    00000010: 	pushq	%r14
    00000012: 	movq	%rdi, %r14
    00000015: 	movl	$0x1, %edi
    0000001a: 	pushq	%r13
    0000001c: 	pushq	%r12
    0000001e: 	pushq	%rbp
    0000001f: 	movq	%r8, %rbp
    00000022: 	pushq	%rbx
    00000023: 	movl	%edx, %ebx
    00000025: 	subq	$0x98, %rsp
    0000002c: 	movl	%edx, 0x48(%rsp)
    00000030: 	movq	%rcx, 0x10(%rsp)
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x88(%rsp)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	movl	%eax, 0x4c(%rsp)
    00000050: 	xorl	%eax, %eax
    00000052: 	callq	__printf_chk@PLT # Offset: 82
    00000057: 	xorl	%eax, %eax
    00000059: 	movl	$0x1, %edi
    0000005e: 	leaq	DATAat0x27210(%rip), %rsi
    00000065: 	callq	__printf_chk@PLT # Offset: 101
    0000006a: 	cmpl	$0x3, %ebx
    0000006d: 	jle	.Ltmp1719 # Offset: 109
    00000073: 	movslq	0x4c(%rsp), %rax
    00000078: 	xorl	%r12d, %r12d
    0000007b: 	movl	$0x4, %ebx
    00000080: 	leaq	0x70(%rsp), %r13
    00000085: 	movq	%rax, 0x18(%rsp)
    0000008a: 	leaq	0x60(%rsp), %rax
    0000008f: 	movq	%rax, 0x8(%rsp)
    00000094: 	leaq	0x58(%rsp), %rax
    00000099: 	movq	%rax, 0x40(%rsp)
    0000009e: 	jmp	.Ltmp1720 # Offset: 158
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1725:
    000000a8: 	movzbl	(%r9), %eax
    000000ac: 	movb	%al, 0x70(%rsp)
    000000b0: 	movq	%r13, %rax
.Ltmp1727:
    000000b3: 	movq	%r8, 0x68(%rsp)
    000000b8: 	movq	0x8(%rsp), %r9
    000000bd: 	movq	%r15, %rdx
    000000c0: 	movq	%r10, %rsi
    000000c3: 	movb	$0x0, (%rax,%r8)
    000000c8: 	movq	0x10(%rsp), %r8
    000000cd: 	movq	%r14, %rdi
    000000d0: 	callq	_Z17test_reverse_copyI20BidirectionalPointerIdEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 208
    000000d5: 	movq	0x60(%rsp), %rdi
    000000da: 	cmpq	%r13, %rdi
    000000dd: 	je	.Ltmp1721 # Offset: 221
    000000df: 	movq	0x70(%rsp), %rax
    000000e4: 	leaq	0x1(%rax), %rsi
    000000e8: 	callq	_ZdlPvm@PLT # Offset: 232
.Ltmp1721:
    000000ed: 	pxor	%xmm1, %xmm1
    000000f1: 	pxor	%xmm2, %xmm2
    000000f5: 	movq	(%rbp), %rcx
    000000f9: 	movl	%ebx, %r8d
    000000fc: 	cvtsi2sd	%ebx, %xmm2
    00000100: 	movq	results(%rip), %rax
    00000107: 	movl	%r12d, %edx
    0000010a: 	addl	%ebx, %ebx
    0000010c: 	leaq	DATAat0x27240(%rip), %rsi
    00000113: 	movl	$0x1, %edi
    00000118: 	addl	$0x1, %r12d
    0000011c: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000124: 	movsd	(%rax), %xmm0
    00000128: 	movl	$0x2, %eax
    0000012d: 	mulsd	%xmm2, %xmm1
    00000131: 	divsd	DATAat0x276b0(%rip), %xmm1
    00000139: 	divsd	%xmm0, %xmm1
    0000013d: 	callq	__printf_chk@PLT # Offset: 317
    00000142: 	movl	$0x0, current_test(%rip)
    0000014c: 	cmpl	%ebx, 0x48(%rsp)
    00000150: 	jl	.Ltmp1719 # Offset: 336
.Ltmp1720:
    00000156: 	movl	0x48(%rsp), %eax
    0000015a: 	movq	(%rbp), %r9
    0000015e: 	movq	%r13, 0x60(%rsp)
    00000163: 	movq	0x8(%rbp), %r8
    00000167: 	cltd
    00000168: 	idivl	%ebx
    0000016a: 	movl	$0x4, %edx
    0000016f: 	cltq
    00000171: 	imulq	0x18(%rsp), %rax
    00000177: 	cmpq	%rdx, %rax
    0000017a: 	cmovlq	%rdx, %rax
    0000017e: 	movl	$0x70000000, %edx
    00000183: 	cmpq	%rdx, %rax
    00000186: 	cmovgq	%rdx, %rax
    0000018a: 	addq	$0x1, %rax
    0000018e: 	andq	$-0x2, %rax
    00000192: 	movl	%eax, iterations(%rip)
    00000198: 	movslq	%ebx, %rax
    0000019b: 	shlq	$0x3, %rax
    0000019f: 	leaq	(%r14,%rax), %r10
    000001a3: 	leaq	(%r15,%rax), %rcx
    000001a7: 	movq	%r9, %rax
    000001aa: 	addq	%r8, %rax
    000001ad: 	je	.Ltmp1722 # Offset: 429
    000001af: 	testq	%r9, %r9
    000001b2: 	je	.Ltmp1723 # Offset: 434
.Ltmp1722:
    000001b8: 	movq	%r8, 0x58(%rsp)
    000001bd: 	cmpq	$0xf, %r8
    000001c1: 	ja	.Ltmp1724 # Offset: 449
    000001c3: 	cmpq	$0x1, %r8
    000001c7: 	je	.Ltmp1725 # Offset: 455
    000001cd: 	testq	%r8, %r8
    000001d0: 	jne	.Ltmp1726 # Offset: 464
    000001d6: 	movq	%r13, %rax
    000001d9: 	jmp	.Ltmp1727 # Offset: 473
    000001de: 	nop # Size: 2
.Ltmp1724:
    000001e0: 	movq	0x8(%rsp), %rdi
    000001e5: 	movq	0x40(%rsp), %rsi
    000001ea: 	xorl	%edx, %edx
    000001ec: 	movq	%r10, 0x38(%rsp)
    000001f1: 	movq	%rcx, 0x30(%rsp)
    000001f6: 	movq	%r8, 0x28(%rsp)
    000001fb: 	movq	%r9, 0x20(%rsp)
    00000200: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 512
    00000205: 	movq	0x20(%rsp), %r9
    0000020a: 	movq	0x28(%rsp), %r8
    0000020f: 	movq	%rax, 0x60(%rsp)
    00000214: 	movq	%rax, %rdi
    00000217: 	movq	0x58(%rsp), %rax
    0000021c: 	movq	0x30(%rsp), %rcx
    00000221: 	movq	0x38(%rsp), %r10
    00000226: 	movq	%rax, 0x70(%rsp)
.Ltmp1729:
    0000022b: 	movq	%r8, %rdx
    0000022e: 	movq	%r9, %rsi
    00000231: 	movq	%r10, 0x28(%rsp)
    00000236: 	movq	%rcx, 0x20(%rsp)
    0000023b: 	callq	memcpy@PLT # Offset: 571
    00000240: 	movq	0x58(%rsp), %r8
    00000245: 	movq	0x60(%rsp), %rax
    0000024a: 	movq	0x20(%rsp), %rcx
    0000024f: 	movq	0x28(%rsp), %r10
    00000254: 	jmp	.Ltmp1727 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp1719:
    00000260: 	movl	0x4c(%rsp), %eax
    00000264: 	movl	%eax, iterations(%rip)
    0000026a: 	movq	0x88(%rsp), %rax
    00000272: 	subq	%fs:0x28, %rax
    0000027b: 	jne	.Ltmp1728 # Offset: 635
    0000027d: 	addq	$0x98, %rsp
    00000284: 	popq	%rbx
    00000285: 	popq	%rbp
    00000286: 	popq	%r12
    00000288: 	popq	%r13
    0000028a: 	popq	%r14
    0000028c: 	popq	%r15
    0000028e: 	retq # Offset: 654
.Ltmp1723:
    0000028f: 	leaq	DATAat0x27008(%rip), %rdi
    00000296: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 662
.Ltmp1728:
    0000029b: 	callq	__stack_chk_fail@PLT # Offset: 667
.Ltmp1726:
    000002a0: 	movq	%r13, %rdi
    000002a3: 	jmp	.Ltmp1729 # Offset: 675
    000002a5: 	endbr64
    000002a9: 	movq	%rax, %rbp
    000002ac: 	movq	0x60(%rsp), %rdi
    000002b1: 	cmpq	%r13, %rdi
    000002b4: 	je	.Ltmp1730 # Offset: 692
    000002b6: 	movq	0x70(%rsp), %rax
    000002bb: 	leaq	0x1(%rax), %rsi
    000002bf: 	callq	_ZdlPvm@PLT # Offset: 703
.Ltmp1730:
    000002c4: 	movq	%rbp, %rdi
    000002c7: 	callq	_Unwind_Resume@PLT # Offset: 711
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_reverse_copy_sizesI20BidirectionalPointerIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_reverse_copyI20BidirectionalPointerIfEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 225
  State       : disassembled
  Address     : 0x16840
  Size        : 0x2cf
  MaxSize     : 0x2d0
  Offset      : 0x16840
  Section     : .text
  Orc Section : .local.text._Z17test_reverse_copyI20BidirectionalPointerIfEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0224:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rcx, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdx, %rbx
    0000001d: 	subq	$0x28, %rsp
    00000021: 	movq	%r9, 0x8(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x18(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rcx, %rdx
    00000039: 	je	.Ltmp1731 # Offset: 57
    0000003b: 	movq	%rdx, %rax
    0000003e: 	leaq	-0x4(%rcx), %rdx
    00000042: 	subq	%rbx, %rdx
    00000045: 	movq	%rdx, %rcx
    00000048: 	shrq	$0x2, %rcx
    0000004c: 	addq	$0x1, %rcx
    00000050: 	cmpq	$0x8, %rdx
    00000054: 	jbe	.Ltmp1732 # Offset: 84
    00000056: 	movq	%rcx, %rdx
    00000059: 	movaps	DATAat0x27590(%rip), %xmm0
    00000060: 	shrq	$0x2, %rdx
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rbx, %rdx
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1733:
    00000070: 	movups	%xmm0, (%rax)
    00000073: 	addq	$0x10, %rax
    00000077: 	cmpq	%rdx, %rax
    0000007a: 	jne	.Ltmp1733 # Offset: 122
    0000007c: 	movq	%rcx, %rdx
    0000007f: 	andq	$-0x4, %rdx
    00000083: 	leaq	(%rbx,%rdx,4), %rax
    00000087: 	cmpq	%rdx, %rcx
    0000008a: 	je	.Ltmp1731 # Offset: 138
.Ltmp1732:
    0000008c: 	movss	DATAat0x27590(%rip), %xmm0
    00000094: 	leaq	0x4(%rax), %rdx
    00000098: 	movss	%xmm0, (%rax)
    0000009c: 	cmpq	%rdx, %rbp
    0000009f: 	je	.Ltmp1731 # Offset: 159
    000000a1: 	leaq	0x8(%rax), %rdx
    000000a5: 	movss	%xmm0, 0x4(%rax)
    000000aa: 	cmpq	%rdx, %rbp
    000000ad: 	je	.Ltmp1731 # Offset: 173
    000000af: 	movss	%xmm0, 0x8(%rax)
.Ltmp1731:
    000000b4: 	callq	clock@PLT # Offset: 180
    000000b9: 	xorl	%r14d, %r14d
    000000bc: 	movq	%rax, start_time(%rip)
    000000c3: 	movl	iterations(%rip), %eax
    000000c9: 	testl	%eax, %eax
    000000cb: 	jle	.Ltmp1734 # Offset: 203
    000000cd: 	nopl	(%rax) # Size: 3
.Ltmp1735:
    000000d0: 	movq	%rbx, %rdx
    000000d3: 	movq	%r13, %rsi
    000000d6: 	movq	%r12, %rdi
    000000d9: 	addl	$0x1, %r14d
    000000dd: 	callq	*%r15 # Offset: 221
    000000e0: 	cmpl	%r14d, iterations(%rip)
    000000e7: 	jg	.Ltmp1735 # Offset: 231
.Ltmp1734:
    000000e9: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000f0: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    000000f7: 	subq	$0x20, %rax
    000000fb: 	cmpq	%rax, %r13
    000000fe: 	je	.Ltmp1736 # Offset: 254
    00000104: 	movq	0x8(%rsp), %rax
    00000109: 	leaq	0x10(%r13), %rdi
    0000010d: 	movq	%rdi, (%r13)
    00000111: 	movq	(%rax), %r15
    00000114: 	movq	0x8(%rax), %r12
    00000118: 	movq	%r15, %rax
    0000011b: 	addq	%r12, %rax
    0000011e: 	je	.Ltmp1737 # Offset: 286
    00000120: 	testq	%r15, %r15
    00000123: 	je	.Ltmp1738 # Offset: 291
.Ltmp1737:
    00000129: 	movq	%r12, 0x10(%rsp)
    0000012e: 	cmpq	$0xf, %r12
    00000132: 	ja	.Ltmp1739 # Offset: 306
    00000138: 	cmpq	$0x1, %r12
    0000013c: 	jne	.Ltmp1740 # Offset: 316
    00000142: 	movzbl	(%r15), %eax
    00000146: 	movb	%al, 0x10(%r13)
.Ltmp1746:
    0000014a: 	movq	%r12, 0x8(%r13)
    0000014e: 	movb	$0x0, (%rdi,%r12)
    00000153: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000015a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000161: 	addq	$0x20, %rax
    00000165: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000016c: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000173: 	je	.Ltmp1741 # Offset: 371
.Ltmp1747:
    00000179: 	movq	-0x20(%rax), %r12
    0000017d: 	callq	clock@PLT # Offset: 381
    00000182: 	pxor	%xmm0, %xmm0
    00000186: 	movq	%rax, end_time(%rip)
    0000018d: 	movq	%r12, %rdi
    00000190: 	subq	start_time(%rip), %rax
    00000197: 	cvtsi2sd	%rax, %xmm0
    0000019c: 	divsd	DATAat0x276b0(%rip), %xmm0
    000001a4: 	callq	_Z13record_resultdPKc # Offset: 420
    000001a9: 	leaq	0x4(%rbx), %rax
    000001ad: 	jmp	.Ltmp1742 # Offset: 429
    000001af: 	nop # Size: 1
.Ltmp1744:
    000001b0: 	addq	$0x4, %rax
    000001b4: 	movss	-0x4(%rax), %xmm0
    000001b9: 	comiss	-0x4(%rdx), %xmm0
    000001bd: 	ja	.Ltmp1743 # Offset: 445
.Ltmp1742:
    000001bf: 	movq	%rax, %rdx
    000001c2: 	cmpq	%rax, %rbp
    000001c5: 	jne	.Ltmp1744 # Offset: 453
    000001c7: 	movq	0x18(%rsp), %rax
    000001cc: 	subq	%fs:0x28, %rax
    000001d5: 	jne	.Ltmp1745 # Offset: 469
    000001db: 	addq	$0x28, %rsp
    000001df: 	popq	%rbx
    000001e0: 	popq	%rbp
    000001e1: 	popq	%r12
    000001e3: 	popq	%r13
    000001e5: 	popq	%r14
    000001e7: 	popq	%r15
    000001e9: 	retq # Offset: 489
    000001ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1739:
    000001f0: 	movq	%r13, %rdi
    000001f3: 	leaq	0x10(%rsp), %rsi
    000001f8: 	xorl	%edx, %edx
    000001fa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 506
    000001ff: 	movq	%rax, (%r13)
    00000203: 	movq	%rax, %rdi
    00000206: 	movq	0x10(%rsp), %rax
    0000020b: 	movq	%rax, 0x10(%r13)
.Ltmp1748:
    0000020f: 	movq	%r12, %rdx
    00000212: 	movq	%r15, %rsi
    00000215: 	callq	memcpy@PLT # Offset: 533
    0000021a: 	movq	0x10(%rsp), %r12
    0000021f: 	movq	(%r13), %rdi
    00000223: 	jmp	.Ltmp1746 # Offset: 547
    00000228: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1743:
    00000230: 	movq	0x18(%rsp), %rax
    00000235: 	subq	%fs:0x28, %rax
    0000023e: 	jne	.Ltmp1745 # Offset: 574
    00000240: 	movq	0x8(%rsp), %rax
    00000245: 	leaq	DATAat0x271d0(%rip), %rsi
    0000024c: 	movl	$0x1, %edi
    00000251: 	movq	(%rax), %rdx
    00000254: 	addq	$0x28, %rsp
    00000258: 	xorl	%eax, %eax
    0000025a: 	popq	%rbx
    0000025b: 	popq	%rbp
    0000025c: 	popq	%r12
    0000025e: 	popq	%r13
    00000260: 	popq	%r14
    00000262: 	popq	%r15
    00000264: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 612
    00000269: 	nopl	(%rax) # Size: 7
.Ltmp1736:
    00000270: 	movq	0x8(%rsp), %rsi
    00000275: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000027c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 636
    00000281: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000288: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000028f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000296: 	jne	.Ltmp1747 # Offset: 662
.Ltmp1741:
    0000029c: 	movq	-0x8(%rdx), %rax
    000002a0: 	addq	$0x200, %rax
    000002a6: 	jmp	.Ltmp1747 # Offset: 678
    000002ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1740:
    000002b0: 	testq	%r12, %r12
    000002b3: 	je	.Ltmp1746 # Offset: 691
    000002b9: 	jmp	.Ltmp1748 # Offset: 697
.Ltmp1745:
    000002be: 	callq	__stack_chk_fail@PLT # Offset: 702
.Ltmp1738:
    000002c3: 	leaq	DATAat0x27008(%rip), %rdi
    000002ca: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 714
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_reverse_copyI20BidirectionalPointerIfEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23test_reverse_copy_sizesI20BidirectionalPointerIfEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 226
  State       : disassembled
  Address     : 0x16b10
  Size        : 0x2cc
  MaxSize     : 0x2d0
  Offset      : 0x16b10
  Section     : .text
  Orc Section : .local.text._Z23test_reverse_copy_sizesI20BidirectionalPointerIfEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0225:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	leaq	DATAat0x271e0(%rip), %rsi
    00000010: 	pushq	%r14
    00000012: 	movq	%rdi, %r14
    00000015: 	movl	$0x1, %edi
    0000001a: 	pushq	%r13
    0000001c: 	pushq	%r12
    0000001e: 	pushq	%rbp
    0000001f: 	movq	%r8, %rbp
    00000022: 	pushq	%rbx
    00000023: 	movl	%edx, %ebx
    00000025: 	subq	$0x98, %rsp
    0000002c: 	movl	%edx, 0x48(%rsp)
    00000030: 	movq	%rcx, 0x10(%rsp)
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x88(%rsp)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	movl	%eax, 0x4c(%rsp)
    00000050: 	xorl	%eax, %eax
    00000052: 	callq	__printf_chk@PLT # Offset: 82
    00000057: 	xorl	%eax, %eax
    00000059: 	movl	$0x1, %edi
    0000005e: 	leaq	DATAat0x27210(%rip), %rsi
    00000065: 	callq	__printf_chk@PLT # Offset: 101
    0000006a: 	cmpl	$0x3, %ebx
    0000006d: 	jle	.Ltmp1749 # Offset: 109
    00000073: 	movslq	0x4c(%rsp), %rax
    00000078: 	xorl	%r12d, %r12d
    0000007b: 	movl	$0x4, %ebx
    00000080: 	leaq	0x70(%rsp), %r13
    00000085: 	movq	%rax, 0x18(%rsp)
    0000008a: 	leaq	0x60(%rsp), %rax
    0000008f: 	movq	%rax, 0x8(%rsp)
    00000094: 	leaq	0x58(%rsp), %rax
    00000099: 	movq	%rax, 0x40(%rsp)
    0000009e: 	jmp	.Ltmp1750 # Offset: 158
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1755:
    000000a8: 	movzbl	(%r9), %eax
    000000ac: 	movb	%al, 0x70(%rsp)
    000000b0: 	movq	%r13, %rax
.Ltmp1757:
    000000b3: 	movq	%r8, 0x68(%rsp)
    000000b8: 	movq	0x8(%rsp), %r9
    000000bd: 	movq	%r15, %rdx
    000000c0: 	movq	%r10, %rsi
    000000c3: 	movb	$0x0, (%rax,%r8)
    000000c8: 	movq	0x10(%rsp), %r8
    000000cd: 	movq	%r14, %rdi
    000000d0: 	callq	_Z17test_reverse_copyI20BidirectionalPointerIfEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 208
    000000d5: 	movq	0x60(%rsp), %rdi
    000000da: 	cmpq	%r13, %rdi
    000000dd: 	je	.Ltmp1751 # Offset: 221
    000000df: 	movq	0x70(%rsp), %rax
    000000e4: 	leaq	0x1(%rax), %rsi
    000000e8: 	callq	_ZdlPvm@PLT # Offset: 232
.Ltmp1751:
    000000ed: 	pxor	%xmm1, %xmm1
    000000f1: 	pxor	%xmm2, %xmm2
    000000f5: 	movq	(%rbp), %rcx
    000000f9: 	movl	%ebx, %r8d
    000000fc: 	cvtsi2sd	%ebx, %xmm2
    00000100: 	movq	results(%rip), %rax
    00000107: 	movl	%r12d, %edx
    0000010a: 	addl	%ebx, %ebx
    0000010c: 	leaq	DATAat0x27240(%rip), %rsi
    00000113: 	movl	$0x1, %edi
    00000118: 	addl	$0x1, %r12d
    0000011c: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000124: 	movsd	(%rax), %xmm0
    00000128: 	movl	$0x2, %eax
    0000012d: 	mulsd	%xmm2, %xmm1
    00000131: 	divsd	DATAat0x276b0(%rip), %xmm1
    00000139: 	divsd	%xmm0, %xmm1
    0000013d: 	callq	__printf_chk@PLT # Offset: 317
    00000142: 	movl	$0x0, current_test(%rip)
    0000014c: 	cmpl	%ebx, 0x48(%rsp)
    00000150: 	jl	.Ltmp1749 # Offset: 336
.Ltmp1750:
    00000156: 	movl	0x48(%rsp), %eax
    0000015a: 	movq	(%rbp), %r9
    0000015e: 	movq	%r13, 0x60(%rsp)
    00000163: 	movq	0x8(%rbp), %r8
    00000167: 	cltd
    00000168: 	idivl	%ebx
    0000016a: 	movl	$0x4, %edx
    0000016f: 	cltq
    00000171: 	imulq	0x18(%rsp), %rax
    00000177: 	cmpq	%rdx, %rax
    0000017a: 	cmovlq	%rdx, %rax
    0000017e: 	movl	$0x70000000, %edx
    00000183: 	cmpq	%rdx, %rax
    00000186: 	cmovgq	%rdx, %rax
    0000018a: 	addq	$0x1, %rax
    0000018e: 	andq	$-0x2, %rax
    00000192: 	movl	%eax, iterations(%rip)
    00000198: 	movslq	%ebx, %rax
    0000019b: 	shlq	$0x2, %rax
    0000019f: 	leaq	(%r14,%rax), %r10
    000001a3: 	leaq	(%r15,%rax), %rcx
    000001a7: 	movq	%r9, %rax
    000001aa: 	addq	%r8, %rax
    000001ad: 	je	.Ltmp1752 # Offset: 429
    000001af: 	testq	%r9, %r9
    000001b2: 	je	.Ltmp1753 # Offset: 434
.Ltmp1752:
    000001b8: 	movq	%r8, 0x58(%rsp)
    000001bd: 	cmpq	$0xf, %r8
    000001c1: 	ja	.Ltmp1754 # Offset: 449
    000001c3: 	cmpq	$0x1, %r8
    000001c7: 	je	.Ltmp1755 # Offset: 455
    000001cd: 	testq	%r8, %r8
    000001d0: 	jne	.Ltmp1756 # Offset: 464
    000001d6: 	movq	%r13, %rax
    000001d9: 	jmp	.Ltmp1757 # Offset: 473
    000001de: 	nop # Size: 2
.Ltmp1754:
    000001e0: 	movq	0x8(%rsp), %rdi
    000001e5: 	movq	0x40(%rsp), %rsi
    000001ea: 	xorl	%edx, %edx
    000001ec: 	movq	%r10, 0x38(%rsp)
    000001f1: 	movq	%rcx, 0x30(%rsp)
    000001f6: 	movq	%r8, 0x28(%rsp)
    000001fb: 	movq	%r9, 0x20(%rsp)
    00000200: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 512
    00000205: 	movq	0x20(%rsp), %r9
    0000020a: 	movq	0x28(%rsp), %r8
    0000020f: 	movq	%rax, 0x60(%rsp)
    00000214: 	movq	%rax, %rdi
    00000217: 	movq	0x58(%rsp), %rax
    0000021c: 	movq	0x30(%rsp), %rcx
    00000221: 	movq	0x38(%rsp), %r10
    00000226: 	movq	%rax, 0x70(%rsp)
.Ltmp1759:
    0000022b: 	movq	%r8, %rdx
    0000022e: 	movq	%r9, %rsi
    00000231: 	movq	%r10, 0x28(%rsp)
    00000236: 	movq	%rcx, 0x20(%rsp)
    0000023b: 	callq	memcpy@PLT # Offset: 571
    00000240: 	movq	0x58(%rsp), %r8
    00000245: 	movq	0x60(%rsp), %rax
    0000024a: 	movq	0x20(%rsp), %rcx
    0000024f: 	movq	0x28(%rsp), %r10
    00000254: 	jmp	.Ltmp1757 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp1749:
    00000260: 	movl	0x4c(%rsp), %eax
    00000264: 	movl	%eax, iterations(%rip)
    0000026a: 	movq	0x88(%rsp), %rax
    00000272: 	subq	%fs:0x28, %rax
    0000027b: 	jne	.Ltmp1758 # Offset: 635
    0000027d: 	addq	$0x98, %rsp
    00000284: 	popq	%rbx
    00000285: 	popq	%rbp
    00000286: 	popq	%r12
    00000288: 	popq	%r13
    0000028a: 	popq	%r14
    0000028c: 	popq	%r15
    0000028e: 	retq # Offset: 654
.Ltmp1753:
    0000028f: 	leaq	DATAat0x27008(%rip), %rdi
    00000296: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 662
.Ltmp1758:
    0000029b: 	callq	__stack_chk_fail@PLT # Offset: 667
.Ltmp1756:
    000002a0: 	movq	%r13, %rdi
    000002a3: 	jmp	.Ltmp1759 # Offset: 675
    000002a5: 	endbr64
    000002a9: 	movq	%rax, %rbp
    000002ac: 	movq	0x60(%rsp), %rdi
    000002b1: 	cmpq	%r13, %rdi
    000002b4: 	je	.Ltmp1760 # Offset: 692
    000002b6: 	movq	0x70(%rsp), %rax
    000002bb: 	leaq	0x1(%rax), %rsi
    000002bf: 	callq	_ZdlPvm@PLT # Offset: 703
.Ltmp1760:
    000002c4: 	movq	%rbp, %rdi
    000002c7: 	callq	_Unwind_Resume@PLT # Offset: 711
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_reverse_copy_sizesI20BidirectionalPointerIfEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_reverse_copyI20BidirectionalPointerIsEPFS1_S1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 227
  State       : disassembled
  Address     : 0x16de0
  Size        : 0x308
  MaxSize     : 0x310
  Offset      : 0x16de0
  Section     : .text
  Orc Section : .local.text._Z17test_reverse_copyI20BidirectionalPointerIsEPFS1_S1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0226:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rcx, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdx, %rbx
    0000001d: 	subq	$0x28, %rsp
    00000021: 	movq	%r9, 0x8(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x18(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rcx, %rdx
    00000039: 	je	.Ltmp1761 # Offset: 57
    0000003f: 	movq	%rdx, %rax
    00000042: 	leaq	-0x2(%rcx), %rdx
    00000046: 	subq	%rbx, %rdx
    00000049: 	movq	%rdx, %rcx
    0000004c: 	shrq	%rcx
    0000004f: 	leaq	0x1(%rcx), %rsi
    00000053: 	cmpq	$0xc, %rdx
    00000057: 	jbe	.Ltmp1762 # Offset: 87
    0000005d: 	movq	%rsi, %rdx
    00000060: 	movdqa	DATAat0x275b0(%rip), %xmm0
    00000068: 	shrq	$0x3, %rdx
    0000006c: 	shlq	$0x4, %rdx
    00000070: 	addq	%rbx, %rdx
    00000073: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1763:
    00000078: 	movups	%xmm0, (%rax)
    0000007b: 	addq	$0x10, %rax
    0000007f: 	cmpq	%rdx, %rax
    00000082: 	jne	.Ltmp1763 # Offset: 130
    00000084: 	movq	%rsi, %rdx
    00000087: 	andq	$-0x8, %rdx
    0000008b: 	leaq	(%rbx,%rdx,2), %rax
    0000008f: 	cmpq	%rdx, %rsi
    00000092: 	je	.Ltmp1761 # Offset: 146
.Ltmp1781:
    00000094: 	subq	%rdx, %rcx
    00000097: 	leaq	0x1(%rcx), %rsi
    0000009b: 	cmpq	$0x2, %rcx
    0000009f: 	jbe	.Ltmp1764 # Offset: 159
    000000a1: 	movq	DATAat0x275b0(%rip), %rcx
    000000a8: 	movq	%rcx, (%rbx,%rdx,2)
    000000ac: 	movq	%rsi, %rdx
    000000af: 	andq	$-0x4, %rdx
    000000b3: 	leaq	(%rax,%rdx,2), %rax
    000000b7: 	cmpq	%rdx, %rsi
    000000ba: 	je	.Ltmp1761 # Offset: 186
.Ltmp1764:
    000000bc: 	movl	$0x63, %esi
    000000c1: 	leaq	0x2(%rax), %rdx
    000000c5: 	movw	%si, (%rax)
    000000c8: 	cmpq	%rdx, %rbp
    000000cb: 	je	.Ltmp1761 # Offset: 203
    000000cd: 	movl	$0x63, %ecx
    000000d2: 	leaq	0x4(%rax), %rdx
    000000d6: 	movw	%cx, 0x2(%rax)
    000000da: 	cmpq	%rdx, %rbp
    000000dd: 	je	.Ltmp1761 # Offset: 221
    000000df: 	movl	$0x63, %edx
    000000e4: 	movw	%dx, 0x4(%rax)
.Ltmp1761:
    000000e8: 	callq	clock@PLT # Offset: 232
    000000ed: 	movl	iterations(%rip), %edi
    000000f3: 	xorl	%r14d, %r14d
    000000f6: 	movq	%rax, start_time(%rip)
    000000fd: 	testl	%edi, %edi
    000000ff: 	jle	.Ltmp1765 # Offset: 255
    00000101: 	nopl	(%rax) # Size: 7
.Ltmp1766:
    00000108: 	movq	%rbx, %rdx
    0000010b: 	movq	%r13, %rsi
    0000010e: 	movq	%r12, %rdi
    00000111: 	addl	$0x1, %r14d
    00000115: 	callq	*%r15 # Offset: 277
    00000118: 	cmpl	%r14d, iterations(%rip)
    0000011f: 	jg	.Ltmp1766 # Offset: 287
.Ltmp1765:
    00000121: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000128: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    0000012f: 	subq	$0x20, %rax
    00000133: 	cmpq	%rax, %r13
    00000136: 	je	.Ltmp1767 # Offset: 310
    0000013c: 	movq	0x8(%rsp), %rax
    00000141: 	leaq	0x10(%r13), %rdi
    00000145: 	movq	%rdi, (%r13)
    00000149: 	movq	(%rax), %r15
    0000014c: 	movq	0x8(%rax), %r12
    00000150: 	movq	%r15, %rax
    00000153: 	addq	%r12, %rax
    00000156: 	je	.Ltmp1768 # Offset: 342
    00000158: 	testq	%r15, %r15
    0000015b: 	je	.Ltmp1769 # Offset: 347
.Ltmp1768:
    00000161: 	movq	%r12, 0x10(%rsp)
    00000166: 	cmpq	$0xf, %r12
    0000016a: 	ja	.Ltmp1770 # Offset: 362
    00000170: 	cmpq	$0x1, %r12
    00000174: 	jne	.Ltmp1771 # Offset: 372
    0000017a: 	movzbl	(%r15), %eax
    0000017e: 	movb	%al, 0x10(%r13)
.Ltmp1777:
    00000182: 	movq	%r12, 0x8(%r13)
    00000186: 	movb	$0x0, (%rdi,%r12)
    0000018b: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000192: 	addq	$0x20, %rax
    00000196: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1779:
    0000019d: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001a4: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000001ab: 	je	.Ltmp1772 # Offset: 427
.Ltmp1778:
    000001b1: 	movq	-0x20(%rax), %r12
    000001b5: 	callq	clock@PLT # Offset: 437
    000001ba: 	pxor	%xmm0, %xmm0
    000001be: 	movq	%rax, end_time(%rip)
    000001c5: 	movq	%r12, %rdi
    000001c8: 	subq	start_time(%rip), %rax
    000001cf: 	cvtsi2sd	%rax, %xmm0
    000001d4: 	divsd	DATAat0x276b0(%rip), %xmm0
    000001dc: 	callq	_Z13record_resultdPKc # Offset: 476
    000001e1: 	leaq	0x2(%rbx), %rax
    000001e5: 	jmp	.Ltmp1773 # Offset: 485
    000001e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1775:
    000001f0: 	addq	$0x2, %rax
    000001f4: 	movzwl	-0x2(%rax), %ecx
    000001f8: 	cmpw	%cx, -0x2(%rdx)
    000001fc: 	jl	.Ltmp1774 # Offset: 508
.Ltmp1773:
    000001fe: 	movq	%rax, %rdx
    00000201: 	cmpq	%rax, %rbp
    00000204: 	jne	.Ltmp1775 # Offset: 516
    00000206: 	movq	0x18(%rsp), %rax
    0000020b: 	subq	%fs:0x28, %rax
    00000214: 	jne	.Ltmp1776 # Offset: 532
    0000021a: 	addq	$0x28, %rsp
    0000021e: 	popq	%rbx
    0000021f: 	popq	%rbp
    00000220: 	popq	%r12
    00000222: 	popq	%r13
    00000224: 	popq	%r14
    00000226: 	popq	%r15
    00000228: 	retq # Offset: 552
    00000229: 	nopl	(%rax) # Size: 7
.Ltmp1770:
    00000230: 	movq	%r13, %rdi
    00000233: 	leaq	0x10(%rsp), %rsi
    00000238: 	xorl	%edx, %edx
    0000023a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 570
    0000023f: 	movq	%rax, (%r13)
    00000243: 	movq	%rax, %rdi
    00000246: 	movq	0x10(%rsp), %rax
    0000024b: 	movq	%rax, 0x10(%r13)
.Ltmp1780:
    0000024f: 	movq	%r12, %rdx
    00000252: 	movq	%r15, %rsi
    00000255: 	callq	memcpy@PLT # Offset: 597
    0000025a: 	movq	0x10(%rsp), %r12
    0000025f: 	movq	(%r13), %rdi
    00000263: 	jmp	.Ltmp1777 # Offset: 611
    00000268: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1774:
    00000270: 	movq	0x18(%rsp), %rax
    00000275: 	subq	%fs:0x28, %rax
    0000027e: 	jne	.Ltmp1776 # Offset: 638
    00000284: 	movq	0x8(%rsp), %rax
    00000289: 	leaq	DATAat0x271d0(%rip), %rsi
    00000290: 	movl	$0x1, %edi
    00000295: 	movq	(%rax), %rdx
    00000298: 	addq	$0x28, %rsp
    0000029c: 	xorl	%eax, %eax
    0000029e: 	popq	%rbx
    0000029f: 	popq	%rbp
    000002a0: 	popq	%r12
    000002a2: 	popq	%r13
    000002a4: 	popq	%r14
    000002a6: 	popq	%r15
    000002a8: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 680
    000002ad: 	nopl	(%rax) # Size: 3
.Ltmp1772:
    000002b0: 	movq	-0x8(%rdx), %rax
    000002b4: 	addq	$0x200, %rax
    000002ba: 	jmp	.Ltmp1778 # Offset: 698
    000002bf: 	nop # Size: 1
.Ltmp1767:
    000002c0: 	movq	0x8(%rsp), %rsi
    000002c5: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000002cc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 716
    000002d1: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000002d8: 	jmp	.Ltmp1779 # Offset: 728
    000002dd: 	nopl	(%rax) # Size: 3
.Ltmp1771:
    000002e0: 	testq	%r12, %r12
    000002e3: 	je	.Ltmp1777 # Offset: 739
    000002e9: 	jmp	.Ltmp1780 # Offset: 745
    000002ee: 	nop # Size: 2
.Ltmp1762:
    000002f0: 	xorl	%edx, %edx
    000002f2: 	jmp	.Ltmp1781 # Offset: 754
.Ltmp1769:
    000002f7: 	leaq	DATAat0x27008(%rip), %rdi
    000002fe: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 766
.Ltmp1776:
    00000303: 	callq	__stack_chk_fail@PLT # Offset: 771
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_reverse_copyI20BidirectionalPointerIsEPFS1_S1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23test_reverse_copy_sizesI20BidirectionalPointerIsEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 228
  State       : disassembled
  Address     : 0x170f0
  Size        : 0x2cc
  MaxSize     : 0x2d0
  Offset      : 0x170f0
  Section     : .text
  Orc Section : .local.text._Z23test_reverse_copy_sizesI20BidirectionalPointerIsEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0227:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	leaq	DATAat0x271e0(%rip), %rsi
    00000010: 	pushq	%r14
    00000012: 	movq	%rdi, %r14
    00000015: 	movl	$0x1, %edi
    0000001a: 	pushq	%r13
    0000001c: 	pushq	%r12
    0000001e: 	pushq	%rbp
    0000001f: 	movq	%r8, %rbp
    00000022: 	pushq	%rbx
    00000023: 	movl	%edx, %ebx
    00000025: 	subq	$0x98, %rsp
    0000002c: 	movl	%edx, 0x48(%rsp)
    00000030: 	movq	%rcx, 0x10(%rsp)
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x88(%rsp)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	movl	%eax, 0x4c(%rsp)
    00000050: 	xorl	%eax, %eax
    00000052: 	callq	__printf_chk@PLT # Offset: 82
    00000057: 	xorl	%eax, %eax
    00000059: 	movl	$0x1, %edi
    0000005e: 	leaq	DATAat0x27210(%rip), %rsi
    00000065: 	callq	__printf_chk@PLT # Offset: 101
    0000006a: 	cmpl	$0x3, %ebx
    0000006d: 	jle	.Ltmp1782 # Offset: 109
    00000073: 	movslq	0x4c(%rsp), %rax
    00000078: 	xorl	%r12d, %r12d
    0000007b: 	movl	$0x4, %ebx
    00000080: 	leaq	0x70(%rsp), %r13
    00000085: 	movq	%rax, 0x18(%rsp)
    0000008a: 	leaq	0x60(%rsp), %rax
    0000008f: 	movq	%rax, 0x8(%rsp)
    00000094: 	leaq	0x58(%rsp), %rax
    00000099: 	movq	%rax, 0x40(%rsp)
    0000009e: 	jmp	.Ltmp1783 # Offset: 158
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1788:
    000000a8: 	movzbl	(%r9), %eax
    000000ac: 	movb	%al, 0x70(%rsp)
    000000b0: 	movq	%r13, %rax
.Ltmp1790:
    000000b3: 	movq	%r8, 0x68(%rsp)
    000000b8: 	movq	0x8(%rsp), %r9
    000000bd: 	movq	%r15, %rdx
    000000c0: 	movq	%r10, %rsi
    000000c3: 	movb	$0x0, (%rax,%r8)
    000000c8: 	movq	0x10(%rsp), %r8
    000000cd: 	movq	%r14, %rdi
    000000d0: 	callq	_Z17test_reverse_copyI20BidirectionalPointerIsEPFS1_S1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 208
    000000d5: 	movq	0x60(%rsp), %rdi
    000000da: 	cmpq	%r13, %rdi
    000000dd: 	je	.Ltmp1784 # Offset: 221
    000000df: 	movq	0x70(%rsp), %rax
    000000e4: 	leaq	0x1(%rax), %rsi
    000000e8: 	callq	_ZdlPvm@PLT # Offset: 232
.Ltmp1784:
    000000ed: 	pxor	%xmm1, %xmm1
    000000f1: 	pxor	%xmm2, %xmm2
    000000f5: 	movq	(%rbp), %rcx
    000000f9: 	movl	%ebx, %r8d
    000000fc: 	cvtsi2sd	%ebx, %xmm2
    00000100: 	movq	results(%rip), %rax
    00000107: 	movl	%r12d, %edx
    0000010a: 	addl	%ebx, %ebx
    0000010c: 	leaq	DATAat0x27240(%rip), %rsi
    00000113: 	movl	$0x1, %edi
    00000118: 	addl	$0x1, %r12d
    0000011c: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000124: 	movsd	(%rax), %xmm0
    00000128: 	movl	$0x2, %eax
    0000012d: 	mulsd	%xmm2, %xmm1
    00000131: 	divsd	DATAat0x276b0(%rip), %xmm1
    00000139: 	divsd	%xmm0, %xmm1
    0000013d: 	callq	__printf_chk@PLT # Offset: 317
    00000142: 	movl	$0x0, current_test(%rip)
    0000014c: 	cmpl	%ebx, 0x48(%rsp)
    00000150: 	jl	.Ltmp1782 # Offset: 336
.Ltmp1783:
    00000156: 	movl	0x48(%rsp), %eax
    0000015a: 	movq	(%rbp), %r9
    0000015e: 	movq	%r13, 0x60(%rsp)
    00000163: 	movq	0x8(%rbp), %r8
    00000167: 	cltd
    00000168: 	idivl	%ebx
    0000016a: 	movl	$0x4, %edx
    0000016f: 	cltq
    00000171: 	imulq	0x18(%rsp), %rax
    00000177: 	cmpq	%rdx, %rax
    0000017a: 	cmovlq	%rdx, %rax
    0000017e: 	movl	$0x70000000, %edx
    00000183: 	cmpq	%rdx, %rax
    00000186: 	cmovgq	%rdx, %rax
    0000018a: 	addq	$0x1, %rax
    0000018e: 	andq	$-0x2, %rax
    00000192: 	movl	%eax, iterations(%rip)
    00000198: 	movslq	%ebx, %rax
    0000019b: 	addq	%rax, %rax
    0000019e: 	leaq	(%r14,%rax), %r10
    000001a2: 	leaq	(%r15,%rax), %rcx
    000001a6: 	movq	%r9, %rax
    000001a9: 	addq	%r8, %rax
    000001ac: 	je	.Ltmp1785 # Offset: 428
    000001ae: 	testq	%r9, %r9
    000001b1: 	je	.Ltmp1786 # Offset: 433
.Ltmp1785:
    000001b7: 	movq	%r8, 0x58(%rsp)
    000001bc: 	cmpq	$0xf, %r8
    000001c0: 	ja	.Ltmp1787 # Offset: 448
    000001c2: 	cmpq	$0x1, %r8
    000001c6: 	je	.Ltmp1788 # Offset: 454
    000001cc: 	testq	%r8, %r8
    000001cf: 	jne	.Ltmp1789 # Offset: 463
    000001d5: 	movq	%r13, %rax
    000001d8: 	jmp	.Ltmp1790 # Offset: 472
    000001dd: 	nopl	(%rax) # Size: 3
.Ltmp1787:
    000001e0: 	movq	0x8(%rsp), %rdi
    000001e5: 	movq	0x40(%rsp), %rsi
    000001ea: 	xorl	%edx, %edx
    000001ec: 	movq	%r10, 0x38(%rsp)
    000001f1: 	movq	%rcx, 0x30(%rsp)
    000001f6: 	movq	%r8, 0x28(%rsp)
    000001fb: 	movq	%r9, 0x20(%rsp)
    00000200: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 512
    00000205: 	movq	0x20(%rsp), %r9
    0000020a: 	movq	0x28(%rsp), %r8
    0000020f: 	movq	%rax, 0x60(%rsp)
    00000214: 	movq	%rax, %rdi
    00000217: 	movq	0x58(%rsp), %rax
    0000021c: 	movq	0x30(%rsp), %rcx
    00000221: 	movq	0x38(%rsp), %r10
    00000226: 	movq	%rax, 0x70(%rsp)
.Ltmp1792:
    0000022b: 	movq	%r8, %rdx
    0000022e: 	movq	%r9, %rsi
    00000231: 	movq	%r10, 0x28(%rsp)
    00000236: 	movq	%rcx, 0x20(%rsp)
    0000023b: 	callq	memcpy@PLT # Offset: 571
    00000240: 	movq	0x58(%rsp), %r8
    00000245: 	movq	0x60(%rsp), %rax
    0000024a: 	movq	0x20(%rsp), %rcx
    0000024f: 	movq	0x28(%rsp), %r10
    00000254: 	jmp	.Ltmp1790 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp1782:
    00000260: 	movl	0x4c(%rsp), %eax
    00000264: 	movl	%eax, iterations(%rip)
    0000026a: 	movq	0x88(%rsp), %rax
    00000272: 	subq	%fs:0x28, %rax
    0000027b: 	jne	.Ltmp1791 # Offset: 635
    0000027d: 	addq	$0x98, %rsp
    00000284: 	popq	%rbx
    00000285: 	popq	%rbp
    00000286: 	popq	%r12
    00000288: 	popq	%r13
    0000028a: 	popq	%r14
    0000028c: 	popq	%r15
    0000028e: 	retq # Offset: 654
.Ltmp1786:
    0000028f: 	leaq	DATAat0x27008(%rip), %rdi
    00000296: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 662
.Ltmp1791:
    0000029b: 	callq	__stack_chk_fail@PLT # Offset: 667
.Ltmp1789:
    000002a0: 	movq	%r13, %rdi
    000002a3: 	jmp	.Ltmp1792 # Offset: 675
    000002a5: 	endbr64
    000002a9: 	movq	%rax, %rbp
    000002ac: 	movq	0x60(%rsp), %rdi
    000002b1: 	cmpq	%r13, %rdi
    000002b4: 	je	.Ltmp1793 # Offset: 692
    000002b6: 	movq	0x70(%rsp), %rax
    000002bb: 	leaq	0x1(%rax), %rsi
    000002bf: 	callq	_ZdlPvm@PLT # Offset: 703
.Ltmp1793:
    000002c4: 	movq	%rbp, %rdi
    000002c7: 	callq	_Unwind_Resume@PLT # Offset: 711
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_reverse_copy_sizesI20BidirectionalPointerIsEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_reverse_copyI20BidirectionalPointerIfEPFS1_S1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 229
  State       : disassembled
  Address     : 0x173c0
  Size        : 0x2cf
  MaxSize     : 0x2d0
  Offset      : 0x173c0
  Section     : .text
  Orc Section : .local.text._Z17test_reverse_copyI20BidirectionalPointerIfEPFS1_S1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0228:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rcx, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdx, %rbx
    0000001d: 	subq	$0x28, %rsp
    00000021: 	movq	%r9, 0x8(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x18(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rcx, %rdx
    00000039: 	je	.Ltmp1794 # Offset: 57
    0000003b: 	movq	%rdx, %rax
    0000003e: 	leaq	-0x4(%rcx), %rdx
    00000042: 	subq	%rbx, %rdx
    00000045: 	movq	%rdx, %rcx
    00000048: 	shrq	$0x2, %rcx
    0000004c: 	addq	$0x1, %rcx
    00000050: 	cmpq	$0x8, %rdx
    00000054: 	jbe	.Ltmp1795 # Offset: 84
    00000056: 	movq	%rcx, %rdx
    00000059: 	movaps	DATAat0x27590(%rip), %xmm0
    00000060: 	shrq	$0x2, %rdx
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rbx, %rdx
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1796:
    00000070: 	movups	%xmm0, (%rax)
    00000073: 	addq	$0x10, %rax
    00000077: 	cmpq	%rdx, %rax
    0000007a: 	jne	.Ltmp1796 # Offset: 122
    0000007c: 	movq	%rcx, %rdx
    0000007f: 	andq	$-0x4, %rdx
    00000083: 	leaq	(%rbx,%rdx,4), %rax
    00000087: 	cmpq	%rdx, %rcx
    0000008a: 	je	.Ltmp1794 # Offset: 138
.Ltmp1795:
    0000008c: 	movss	DATAat0x27590(%rip), %xmm0
    00000094: 	leaq	0x4(%rax), %rdx
    00000098: 	movss	%xmm0, (%rax)
    0000009c: 	cmpq	%rdx, %rbp
    0000009f: 	je	.Ltmp1794 # Offset: 159
    000000a1: 	leaq	0x8(%rax), %rdx
    000000a5: 	movss	%xmm0, 0x4(%rax)
    000000aa: 	cmpq	%rdx, %rbp
    000000ad: 	je	.Ltmp1794 # Offset: 173
    000000af: 	movss	%xmm0, 0x8(%rax)
.Ltmp1794:
    000000b4: 	callq	clock@PLT # Offset: 180
    000000b9: 	xorl	%r14d, %r14d
    000000bc: 	movq	%rax, start_time(%rip)
    000000c3: 	movl	iterations(%rip), %eax
    000000c9: 	testl	%eax, %eax
    000000cb: 	jle	.Ltmp1797 # Offset: 203
    000000cd: 	nopl	(%rax) # Size: 3
.Ltmp1798:
    000000d0: 	movq	%rbx, %rdx
    000000d3: 	movq	%r13, %rsi
    000000d6: 	movq	%r12, %rdi
    000000d9: 	addl	$0x1, %r14d
    000000dd: 	callq	*%r15 # Offset: 221
    000000e0: 	cmpl	%r14d, iterations(%rip)
    000000e7: 	jg	.Ltmp1798 # Offset: 231
.Ltmp1797:
    000000e9: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000f0: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    000000f7: 	subq	$0x20, %rax
    000000fb: 	cmpq	%rax, %r13
    000000fe: 	je	.Ltmp1799 # Offset: 254
    00000104: 	movq	0x8(%rsp), %rax
    00000109: 	leaq	0x10(%r13), %rdi
    0000010d: 	movq	%rdi, (%r13)
    00000111: 	movq	(%rax), %r15
    00000114: 	movq	0x8(%rax), %r12
    00000118: 	movq	%r15, %rax
    0000011b: 	addq	%r12, %rax
    0000011e: 	je	.Ltmp1800 # Offset: 286
    00000120: 	testq	%r15, %r15
    00000123: 	je	.Ltmp1801 # Offset: 291
.Ltmp1800:
    00000129: 	movq	%r12, 0x10(%rsp)
    0000012e: 	cmpq	$0xf, %r12
    00000132: 	ja	.Ltmp1802 # Offset: 306
    00000138: 	cmpq	$0x1, %r12
    0000013c: 	jne	.Ltmp1803 # Offset: 316
    00000142: 	movzbl	(%r15), %eax
    00000146: 	movb	%al, 0x10(%r13)
.Ltmp1809:
    0000014a: 	movq	%r12, 0x8(%r13)
    0000014e: 	movb	$0x0, (%rdi,%r12)
    00000153: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000015a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000161: 	addq	$0x20, %rax
    00000165: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000016c: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000173: 	je	.Ltmp1804 # Offset: 371
.Ltmp1810:
    00000179: 	movq	-0x20(%rax), %r12
    0000017d: 	callq	clock@PLT # Offset: 381
    00000182: 	pxor	%xmm0, %xmm0
    00000186: 	movq	%rax, end_time(%rip)
    0000018d: 	movq	%r12, %rdi
    00000190: 	subq	start_time(%rip), %rax
    00000197: 	cvtsi2sd	%rax, %xmm0
    0000019c: 	divsd	DATAat0x276b0(%rip), %xmm0
    000001a4: 	callq	_Z13record_resultdPKc # Offset: 420
    000001a9: 	leaq	0x4(%rbx), %rax
    000001ad: 	jmp	.Ltmp1805 # Offset: 429
    000001af: 	nop # Size: 1
.Ltmp1807:
    000001b0: 	addq	$0x4, %rax
    000001b4: 	movss	-0x4(%rax), %xmm0
    000001b9: 	comiss	-0x4(%rdx), %xmm0
    000001bd: 	ja	.Ltmp1806 # Offset: 445
.Ltmp1805:
    000001bf: 	movq	%rax, %rdx
    000001c2: 	cmpq	%rax, %rbp
    000001c5: 	jne	.Ltmp1807 # Offset: 453
    000001c7: 	movq	0x18(%rsp), %rax
    000001cc: 	subq	%fs:0x28, %rax
    000001d5: 	jne	.Ltmp1808 # Offset: 469
    000001db: 	addq	$0x28, %rsp
    000001df: 	popq	%rbx
    000001e0: 	popq	%rbp
    000001e1: 	popq	%r12
    000001e3: 	popq	%r13
    000001e5: 	popq	%r14
    000001e7: 	popq	%r15
    000001e9: 	retq # Offset: 489
    000001ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1802:
    000001f0: 	movq	%r13, %rdi
    000001f3: 	leaq	0x10(%rsp), %rsi
    000001f8: 	xorl	%edx, %edx
    000001fa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 506
    000001ff: 	movq	%rax, (%r13)
    00000203: 	movq	%rax, %rdi
    00000206: 	movq	0x10(%rsp), %rax
    0000020b: 	movq	%rax, 0x10(%r13)
.Ltmp1811:
    0000020f: 	movq	%r12, %rdx
    00000212: 	movq	%r15, %rsi
    00000215: 	callq	memcpy@PLT # Offset: 533
    0000021a: 	movq	0x10(%rsp), %r12
    0000021f: 	movq	(%r13), %rdi
    00000223: 	jmp	.Ltmp1809 # Offset: 547
    00000228: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1806:
    00000230: 	movq	0x18(%rsp), %rax
    00000235: 	subq	%fs:0x28, %rax
    0000023e: 	jne	.Ltmp1808 # Offset: 574
    00000240: 	movq	0x8(%rsp), %rax
    00000245: 	leaq	DATAat0x271d0(%rip), %rsi
    0000024c: 	movl	$0x1, %edi
    00000251: 	movq	(%rax), %rdx
    00000254: 	addq	$0x28, %rsp
    00000258: 	xorl	%eax, %eax
    0000025a: 	popq	%rbx
    0000025b: 	popq	%rbp
    0000025c: 	popq	%r12
    0000025e: 	popq	%r13
    00000260: 	popq	%r14
    00000262: 	popq	%r15
    00000264: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 612
    00000269: 	nopl	(%rax) # Size: 7
.Ltmp1799:
    00000270: 	movq	0x8(%rsp), %rsi
    00000275: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000027c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 636
    00000281: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000288: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000028f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000296: 	jne	.Ltmp1810 # Offset: 662
.Ltmp1804:
    0000029c: 	movq	-0x8(%rdx), %rax
    000002a0: 	addq	$0x200, %rax
    000002a6: 	jmp	.Ltmp1810 # Offset: 678
    000002ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1803:
    000002b0: 	testq	%r12, %r12
    000002b3: 	je	.Ltmp1809 # Offset: 691
    000002b9: 	jmp	.Ltmp1811 # Offset: 697
.Ltmp1808:
    000002be: 	callq	__stack_chk_fail@PLT # Offset: 702
.Ltmp1801:
    000002c3: 	leaq	DATAat0x27008(%rip), %rdi
    000002ca: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 714
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_reverse_copyI20BidirectionalPointerIfEPFS1_S1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23test_reverse_copy_sizesI20BidirectionalPointerIfEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 230
  State       : disassembled
  Address     : 0x17690
  Size        : 0x2cc
  MaxSize     : 0x2d0
  Offset      : 0x17690
  Section     : .text
  Orc Section : .local.text._Z23test_reverse_copy_sizesI20BidirectionalPointerIfEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0229:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	leaq	DATAat0x271e0(%rip), %rsi
    00000010: 	pushq	%r14
    00000012: 	movq	%rdi, %r14
    00000015: 	movl	$0x1, %edi
    0000001a: 	pushq	%r13
    0000001c: 	pushq	%r12
    0000001e: 	pushq	%rbp
    0000001f: 	movq	%r8, %rbp
    00000022: 	pushq	%rbx
    00000023: 	movl	%edx, %ebx
    00000025: 	subq	$0x98, %rsp
    0000002c: 	movl	%edx, 0x48(%rsp)
    00000030: 	movq	%rcx, 0x10(%rsp)
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x88(%rsp)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	movl	%eax, 0x4c(%rsp)
    00000050: 	xorl	%eax, %eax
    00000052: 	callq	__printf_chk@PLT # Offset: 82
    00000057: 	xorl	%eax, %eax
    00000059: 	movl	$0x1, %edi
    0000005e: 	leaq	DATAat0x27210(%rip), %rsi
    00000065: 	callq	__printf_chk@PLT # Offset: 101
    0000006a: 	cmpl	$0x3, %ebx
    0000006d: 	jle	.Ltmp1812 # Offset: 109
    00000073: 	movslq	0x4c(%rsp), %rax
    00000078: 	xorl	%r12d, %r12d
    0000007b: 	movl	$0x4, %ebx
    00000080: 	leaq	0x70(%rsp), %r13
    00000085: 	movq	%rax, 0x18(%rsp)
    0000008a: 	leaq	0x60(%rsp), %rax
    0000008f: 	movq	%rax, 0x8(%rsp)
    00000094: 	leaq	0x58(%rsp), %rax
    00000099: 	movq	%rax, 0x40(%rsp)
    0000009e: 	jmp	.Ltmp1813 # Offset: 158
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1818:
    000000a8: 	movzbl	(%r9), %eax
    000000ac: 	movb	%al, 0x70(%rsp)
    000000b0: 	movq	%r13, %rax
.Ltmp1820:
    000000b3: 	movq	%r8, 0x68(%rsp)
    000000b8: 	movq	0x8(%rsp), %r9
    000000bd: 	movq	%r15, %rdx
    000000c0: 	movq	%r10, %rsi
    000000c3: 	movb	$0x0, (%rax,%r8)
    000000c8: 	movq	0x10(%rsp), %r8
    000000cd: 	movq	%r14, %rdi
    000000d0: 	callq	_Z17test_reverse_copyI20BidirectionalPointerIfEPFS1_S1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 208
    000000d5: 	movq	0x60(%rsp), %rdi
    000000da: 	cmpq	%r13, %rdi
    000000dd: 	je	.Ltmp1814 # Offset: 221
    000000df: 	movq	0x70(%rsp), %rax
    000000e4: 	leaq	0x1(%rax), %rsi
    000000e8: 	callq	_ZdlPvm@PLT # Offset: 232
.Ltmp1814:
    000000ed: 	pxor	%xmm1, %xmm1
    000000f1: 	pxor	%xmm2, %xmm2
    000000f5: 	movq	(%rbp), %rcx
    000000f9: 	movl	%ebx, %r8d
    000000fc: 	cvtsi2sd	%ebx, %xmm2
    00000100: 	movq	results(%rip), %rax
    00000107: 	movl	%r12d, %edx
    0000010a: 	addl	%ebx, %ebx
    0000010c: 	leaq	DATAat0x27240(%rip), %rsi
    00000113: 	movl	$0x1, %edi
    00000118: 	addl	$0x1, %r12d
    0000011c: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000124: 	movsd	(%rax), %xmm0
    00000128: 	movl	$0x2, %eax
    0000012d: 	mulsd	%xmm2, %xmm1
    00000131: 	divsd	DATAat0x276b0(%rip), %xmm1
    00000139: 	divsd	%xmm0, %xmm1
    0000013d: 	callq	__printf_chk@PLT # Offset: 317
    00000142: 	movl	$0x0, current_test(%rip)
    0000014c: 	cmpl	%ebx, 0x48(%rsp)
    00000150: 	jl	.Ltmp1812 # Offset: 336
.Ltmp1813:
    00000156: 	movl	0x48(%rsp), %eax
    0000015a: 	movq	(%rbp), %r9
    0000015e: 	movq	%r13, 0x60(%rsp)
    00000163: 	movq	0x8(%rbp), %r8
    00000167: 	cltd
    00000168: 	idivl	%ebx
    0000016a: 	movl	$0x4, %edx
    0000016f: 	cltq
    00000171: 	imulq	0x18(%rsp), %rax
    00000177: 	cmpq	%rdx, %rax
    0000017a: 	cmovlq	%rdx, %rax
    0000017e: 	movl	$0x70000000, %edx
    00000183: 	cmpq	%rdx, %rax
    00000186: 	cmovgq	%rdx, %rax
    0000018a: 	addq	$0x1, %rax
    0000018e: 	andq	$-0x2, %rax
    00000192: 	movl	%eax, iterations(%rip)
    00000198: 	movslq	%ebx, %rax
    0000019b: 	shlq	$0x2, %rax
    0000019f: 	leaq	(%r14,%rax), %r10
    000001a3: 	leaq	(%r15,%rax), %rcx
    000001a7: 	movq	%r9, %rax
    000001aa: 	addq	%r8, %rax
    000001ad: 	je	.Ltmp1815 # Offset: 429
    000001af: 	testq	%r9, %r9
    000001b2: 	je	.Ltmp1816 # Offset: 434
.Ltmp1815:
    000001b8: 	movq	%r8, 0x58(%rsp)
    000001bd: 	cmpq	$0xf, %r8
    000001c1: 	ja	.Ltmp1817 # Offset: 449
    000001c3: 	cmpq	$0x1, %r8
    000001c7: 	je	.Ltmp1818 # Offset: 455
    000001cd: 	testq	%r8, %r8
    000001d0: 	jne	.Ltmp1819 # Offset: 464
    000001d6: 	movq	%r13, %rax
    000001d9: 	jmp	.Ltmp1820 # Offset: 473
    000001de: 	nop # Size: 2
.Ltmp1817:
    000001e0: 	movq	0x8(%rsp), %rdi
    000001e5: 	movq	0x40(%rsp), %rsi
    000001ea: 	xorl	%edx, %edx
    000001ec: 	movq	%r10, 0x38(%rsp)
    000001f1: 	movq	%rcx, 0x30(%rsp)
    000001f6: 	movq	%r8, 0x28(%rsp)
    000001fb: 	movq	%r9, 0x20(%rsp)
    00000200: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 512
    00000205: 	movq	0x20(%rsp), %r9
    0000020a: 	movq	0x28(%rsp), %r8
    0000020f: 	movq	%rax, 0x60(%rsp)
    00000214: 	movq	%rax, %rdi
    00000217: 	movq	0x58(%rsp), %rax
    0000021c: 	movq	0x30(%rsp), %rcx
    00000221: 	movq	0x38(%rsp), %r10
    00000226: 	movq	%rax, 0x70(%rsp)
.Ltmp1822:
    0000022b: 	movq	%r8, %rdx
    0000022e: 	movq	%r9, %rsi
    00000231: 	movq	%r10, 0x28(%rsp)
    00000236: 	movq	%rcx, 0x20(%rsp)
    0000023b: 	callq	memcpy@PLT # Offset: 571
    00000240: 	movq	0x58(%rsp), %r8
    00000245: 	movq	0x60(%rsp), %rax
    0000024a: 	movq	0x20(%rsp), %rcx
    0000024f: 	movq	0x28(%rsp), %r10
    00000254: 	jmp	.Ltmp1820 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp1812:
    00000260: 	movl	0x4c(%rsp), %eax
    00000264: 	movl	%eax, iterations(%rip)
    0000026a: 	movq	0x88(%rsp), %rax
    00000272: 	subq	%fs:0x28, %rax
    0000027b: 	jne	.Ltmp1821 # Offset: 635
    0000027d: 	addq	$0x98, %rsp
    00000284: 	popq	%rbx
    00000285: 	popq	%rbp
    00000286: 	popq	%r12
    00000288: 	popq	%r13
    0000028a: 	popq	%r14
    0000028c: 	popq	%r15
    0000028e: 	retq # Offset: 654
.Ltmp1816:
    0000028f: 	leaq	DATAat0x27008(%rip), %rdi
    00000296: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 662
.Ltmp1821:
    0000029b: 	callq	__stack_chk_fail@PLT # Offset: 667
.Ltmp1819:
    000002a0: 	movq	%r13, %rdi
    000002a3: 	jmp	.Ltmp1822 # Offset: 675
    000002a5: 	endbr64
    000002a9: 	movq	%rax, %rbp
    000002ac: 	movq	0x60(%rsp), %rdi
    000002b1: 	cmpq	%r13, %rdi
    000002b4: 	je	.Ltmp1823 # Offset: 692
    000002b6: 	movq	0x70(%rsp), %rax
    000002bb: 	leaq	0x1(%rax), %rsi
    000002bf: 	callq	_ZdlPvm@PLT # Offset: 703
.Ltmp1823:
    000002c4: 	movq	%rbp, %rdi
    000002c7: 	callq	_Unwind_Resume@PLT # Offset: 711
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_reverse_copy_sizesI20BidirectionalPointerIfEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_reverse_copyI20BidirectionalPointerImEPFS1_S1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 231
  State       : disassembled
  Address     : 0x17960
  Size        : 0x2af
  MaxSize     : 0x2b0
  Offset      : 0x17960
  Section     : .text
  Orc Section : .local.text._Z17test_reverse_copyI20BidirectionalPointerImEPFS1_S1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0230:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rcx, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdx, %rbx
    0000001d: 	subq	$0x28, %rsp
    00000021: 	movq	%r9, 0x8(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x18(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rcx, %rdx
    00000039: 	je	.Ltmp1824 # Offset: 57
    0000003b: 	movq	%rdx, %rax
    0000003e: 	movq	%rcx, %rdx
    00000041: 	subq	%rbx, %rdx
    00000044: 	leaq	-0x8(%rdx), %rcx
    00000048: 	shrq	$0x3, %rcx
    0000004c: 	addq	$0x1, %rcx
    00000050: 	cmpq	$0x8, %rdx
    00000054: 	je	.Ltmp1825 # Offset: 84
    00000056: 	movq	%rcx, %rdx
    00000059: 	movdqa	DATAat0x275a0(%rip), %xmm0
    00000061: 	shrq	%rdx
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rbx, %rdx
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1826:
    00000070: 	movups	%xmm0, (%rax)
    00000073: 	addq	$0x10, %rax
    00000077: 	cmpq	%rdx, %rax
    0000007a: 	jne	.Ltmp1826 # Offset: 122
    0000007c: 	movq	%rcx, %rdx
    0000007f: 	andq	$-0x2, %rdx
    00000083: 	leaq	(%rbx,%rdx,8), %rax
    00000087: 	cmpq	%rcx, %rdx
    0000008a: 	je	.Ltmp1824 # Offset: 138
.Ltmp1825:
    0000008c: 	movq	$0x63, (%rax)
.Ltmp1824:
    00000093: 	callq	clock@PLT # Offset: 147
    00000098: 	xorl	%r14d, %r14d
    0000009b: 	movq	%rax, start_time(%rip)
    000000a2: 	movl	iterations(%rip), %eax
    000000a8: 	testl	%eax, %eax
    000000aa: 	jle	.Ltmp1827 # Offset: 170
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp1828:
    000000b0: 	movq	%rbx, %rdx
    000000b3: 	movq	%r13, %rsi
    000000b6: 	movq	%r12, %rdi
    000000b9: 	addl	$0x1, %r14d
    000000bd: 	callq	*%r15 # Offset: 189
    000000c0: 	cmpl	%r14d, iterations(%rip)
    000000c7: 	jg	.Ltmp1828 # Offset: 199
.Ltmp1827:
    000000c9: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000d0: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    000000d7: 	subq	$0x20, %rax
    000000db: 	cmpq	%rax, %r13
    000000de: 	je	.Ltmp1829 # Offset: 222
    000000e4: 	movq	0x8(%rsp), %rax
    000000e9: 	leaq	0x10(%r13), %rdi
    000000ed: 	movq	%rdi, (%r13)
    000000f1: 	movq	(%rax), %r15
    000000f4: 	movq	0x8(%rax), %r12
    000000f8: 	movq	%r15, %rax
    000000fb: 	addq	%r12, %rax
    000000fe: 	je	.Ltmp1830 # Offset: 254
    00000100: 	testq	%r15, %r15
    00000103: 	je	.Ltmp1831 # Offset: 259
.Ltmp1830:
    00000109: 	movq	%r12, 0x10(%rsp)
    0000010e: 	cmpq	$0xf, %r12
    00000112: 	ja	.Ltmp1832 # Offset: 274
    00000118: 	cmpq	$0x1, %r12
    0000011c: 	jne	.Ltmp1833 # Offset: 284
    00000122: 	movzbl	(%r15), %eax
    00000126: 	movb	%al, 0x10(%r13)
.Ltmp1839:
    0000012a: 	movq	%r12, 0x8(%r13)
    0000012e: 	movb	$0x0, (%rdi,%r12)
    00000133: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000013a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000141: 	addq	$0x20, %rax
    00000145: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000014c: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000153: 	je	.Ltmp1834 # Offset: 339
.Ltmp1840:
    00000159: 	movq	-0x20(%rax), %r12
    0000015d: 	callq	clock@PLT # Offset: 349
    00000162: 	pxor	%xmm0, %xmm0
    00000166: 	movq	%rax, end_time(%rip)
    0000016d: 	movq	%r12, %rdi
    00000170: 	subq	start_time(%rip), %rax
    00000177: 	cvtsi2sd	%rax, %xmm0
    0000017c: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000184: 	callq	_Z13record_resultdPKc # Offset: 388
    00000189: 	leaq	0x8(%rbx), %rax
    0000018d: 	jmp	.Ltmp1835 # Offset: 397
    0000018f: 	nop # Size: 1
.Ltmp1837:
    00000190: 	addq	$0x8, %rax
    00000194: 	movq	-0x8(%rax), %rcx
    00000198: 	cmpq	%rcx, -0x8(%rdx)
    0000019c: 	jb	.Ltmp1836 # Offset: 412
.Ltmp1835:
    0000019e: 	movq	%rax, %rdx
    000001a1: 	cmpq	%rax, %rbp
    000001a4: 	jne	.Ltmp1837 # Offset: 420
    000001a6: 	movq	0x18(%rsp), %rax
    000001ab: 	subq	%fs:0x28, %rax
    000001b4: 	jne	.Ltmp1838 # Offset: 436
    000001ba: 	addq	$0x28, %rsp
    000001be: 	popq	%rbx
    000001bf: 	popq	%rbp
    000001c0: 	popq	%r12
    000001c2: 	popq	%r13
    000001c4: 	popq	%r14
    000001c6: 	popq	%r15
    000001c8: 	retq # Offset: 456
    000001c9: 	nopl	(%rax) # Size: 7
.Ltmp1832:
    000001d0: 	movq	%r13, %rdi
    000001d3: 	leaq	0x10(%rsp), %rsi
    000001d8: 	xorl	%edx, %edx
    000001da: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 474
    000001df: 	movq	%rax, (%r13)
    000001e3: 	movq	%rax, %rdi
    000001e6: 	movq	0x10(%rsp), %rax
    000001eb: 	movq	%rax, 0x10(%r13)
.Ltmp1841:
    000001ef: 	movq	%r12, %rdx
    000001f2: 	movq	%r15, %rsi
    000001f5: 	callq	memcpy@PLT # Offset: 501
    000001fa: 	movq	0x10(%rsp), %r12
    000001ff: 	movq	(%r13), %rdi
    00000203: 	jmp	.Ltmp1839 # Offset: 515
    00000208: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1836:
    00000210: 	movq	0x18(%rsp), %rax
    00000215: 	subq	%fs:0x28, %rax
    0000021e: 	jne	.Ltmp1838 # Offset: 542
    00000220: 	movq	0x8(%rsp), %rax
    00000225: 	leaq	DATAat0x271d0(%rip), %rsi
    0000022c: 	movl	$0x1, %edi
    00000231: 	movq	(%rax), %rdx
    00000234: 	addq	$0x28, %rsp
    00000238: 	xorl	%eax, %eax
    0000023a: 	popq	%rbx
    0000023b: 	popq	%rbp
    0000023c: 	popq	%r12
    0000023e: 	popq	%r13
    00000240: 	popq	%r14
    00000242: 	popq	%r15
    00000244: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 580
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp1829:
    00000250: 	movq	0x8(%rsp), %rsi
    00000255: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000025c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 604
    00000261: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000268: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000026f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000276: 	jne	.Ltmp1840 # Offset: 630
.Ltmp1834:
    0000027c: 	movq	-0x8(%rdx), %rax
    00000280: 	addq	$0x200, %rax
    00000286: 	jmp	.Ltmp1840 # Offset: 646
    0000028b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1833:
    00000290: 	testq	%r12, %r12
    00000293: 	je	.Ltmp1839 # Offset: 659
    00000299: 	jmp	.Ltmp1841 # Offset: 665
.Ltmp1838:
    0000029e: 	callq	__stack_chk_fail@PLT # Offset: 670
.Ltmp1831:
    000002a3: 	leaq	DATAat0x27008(%rip), %rdi
    000002aa: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 682
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_reverse_copyI20BidirectionalPointerImEPFS1_S1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23test_reverse_copy_sizesI20BidirectionalPointerImEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 232
  State       : disassembled
  Address     : 0x17c10
  Size        : 0x2cc
  MaxSize     : 0x2d0
  Offset      : 0x17c10
  Section     : .text
  Orc Section : .local.text._Z23test_reverse_copy_sizesI20BidirectionalPointerImEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0231:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	leaq	DATAat0x271e0(%rip), %rsi
    00000010: 	pushq	%r14
    00000012: 	movq	%rdi, %r14
    00000015: 	movl	$0x1, %edi
    0000001a: 	pushq	%r13
    0000001c: 	pushq	%r12
    0000001e: 	pushq	%rbp
    0000001f: 	movq	%r8, %rbp
    00000022: 	pushq	%rbx
    00000023: 	movl	%edx, %ebx
    00000025: 	subq	$0x98, %rsp
    0000002c: 	movl	%edx, 0x48(%rsp)
    00000030: 	movq	%rcx, 0x10(%rsp)
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x88(%rsp)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	movl	%eax, 0x4c(%rsp)
    00000050: 	xorl	%eax, %eax
    00000052: 	callq	__printf_chk@PLT # Offset: 82
    00000057: 	xorl	%eax, %eax
    00000059: 	movl	$0x1, %edi
    0000005e: 	leaq	DATAat0x27210(%rip), %rsi
    00000065: 	callq	__printf_chk@PLT # Offset: 101
    0000006a: 	cmpl	$0x3, %ebx
    0000006d: 	jle	.Ltmp1842 # Offset: 109
    00000073: 	movslq	0x4c(%rsp), %rax
    00000078: 	xorl	%r12d, %r12d
    0000007b: 	movl	$0x4, %ebx
    00000080: 	leaq	0x70(%rsp), %r13
    00000085: 	movq	%rax, 0x18(%rsp)
    0000008a: 	leaq	0x60(%rsp), %rax
    0000008f: 	movq	%rax, 0x8(%rsp)
    00000094: 	leaq	0x58(%rsp), %rax
    00000099: 	movq	%rax, 0x40(%rsp)
    0000009e: 	jmp	.Ltmp1843 # Offset: 158
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1848:
    000000a8: 	movzbl	(%r9), %eax
    000000ac: 	movb	%al, 0x70(%rsp)
    000000b0: 	movq	%r13, %rax
.Ltmp1850:
    000000b3: 	movq	%r8, 0x68(%rsp)
    000000b8: 	movq	0x8(%rsp), %r9
    000000bd: 	movq	%r15, %rdx
    000000c0: 	movq	%r10, %rsi
    000000c3: 	movb	$0x0, (%rax,%r8)
    000000c8: 	movq	0x10(%rsp), %r8
    000000cd: 	movq	%r14, %rdi
    000000d0: 	callq	_Z17test_reverse_copyI20BidirectionalPointerImEPFS1_S1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 208
    000000d5: 	movq	0x60(%rsp), %rdi
    000000da: 	cmpq	%r13, %rdi
    000000dd: 	je	.Ltmp1844 # Offset: 221
    000000df: 	movq	0x70(%rsp), %rax
    000000e4: 	leaq	0x1(%rax), %rsi
    000000e8: 	callq	_ZdlPvm@PLT # Offset: 232
.Ltmp1844:
    000000ed: 	pxor	%xmm1, %xmm1
    000000f1: 	pxor	%xmm2, %xmm2
    000000f5: 	movq	(%rbp), %rcx
    000000f9: 	movl	%ebx, %r8d
    000000fc: 	cvtsi2sd	%ebx, %xmm2
    00000100: 	movq	results(%rip), %rax
    00000107: 	movl	%r12d, %edx
    0000010a: 	addl	%ebx, %ebx
    0000010c: 	leaq	DATAat0x27240(%rip), %rsi
    00000113: 	movl	$0x1, %edi
    00000118: 	addl	$0x1, %r12d
    0000011c: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000124: 	movsd	(%rax), %xmm0
    00000128: 	movl	$0x2, %eax
    0000012d: 	mulsd	%xmm2, %xmm1
    00000131: 	divsd	DATAat0x276b0(%rip), %xmm1
    00000139: 	divsd	%xmm0, %xmm1
    0000013d: 	callq	__printf_chk@PLT # Offset: 317
    00000142: 	movl	$0x0, current_test(%rip)
    0000014c: 	cmpl	%ebx, 0x48(%rsp)
    00000150: 	jl	.Ltmp1842 # Offset: 336
.Ltmp1843:
    00000156: 	movl	0x48(%rsp), %eax
    0000015a: 	movq	(%rbp), %r9
    0000015e: 	movq	%r13, 0x60(%rsp)
    00000163: 	movq	0x8(%rbp), %r8
    00000167: 	cltd
    00000168: 	idivl	%ebx
    0000016a: 	movl	$0x4, %edx
    0000016f: 	cltq
    00000171: 	imulq	0x18(%rsp), %rax
    00000177: 	cmpq	%rdx, %rax
    0000017a: 	cmovlq	%rdx, %rax
    0000017e: 	movl	$0x70000000, %edx
    00000183: 	cmpq	%rdx, %rax
    00000186: 	cmovgq	%rdx, %rax
    0000018a: 	addq	$0x1, %rax
    0000018e: 	andq	$-0x2, %rax
    00000192: 	movl	%eax, iterations(%rip)
    00000198: 	movslq	%ebx, %rax
    0000019b: 	shlq	$0x3, %rax
    0000019f: 	leaq	(%r14,%rax), %r10
    000001a3: 	leaq	(%r15,%rax), %rcx
    000001a7: 	movq	%r9, %rax
    000001aa: 	addq	%r8, %rax
    000001ad: 	je	.Ltmp1845 # Offset: 429
    000001af: 	testq	%r9, %r9
    000001b2: 	je	.Ltmp1846 # Offset: 434
.Ltmp1845:
    000001b8: 	movq	%r8, 0x58(%rsp)
    000001bd: 	cmpq	$0xf, %r8
    000001c1: 	ja	.Ltmp1847 # Offset: 449
    000001c3: 	cmpq	$0x1, %r8
    000001c7: 	je	.Ltmp1848 # Offset: 455
    000001cd: 	testq	%r8, %r8
    000001d0: 	jne	.Ltmp1849 # Offset: 464
    000001d6: 	movq	%r13, %rax
    000001d9: 	jmp	.Ltmp1850 # Offset: 473
    000001de: 	nop # Size: 2
.Ltmp1847:
    000001e0: 	movq	0x8(%rsp), %rdi
    000001e5: 	movq	0x40(%rsp), %rsi
    000001ea: 	xorl	%edx, %edx
    000001ec: 	movq	%r10, 0x38(%rsp)
    000001f1: 	movq	%rcx, 0x30(%rsp)
    000001f6: 	movq	%r8, 0x28(%rsp)
    000001fb: 	movq	%r9, 0x20(%rsp)
    00000200: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 512
    00000205: 	movq	0x20(%rsp), %r9
    0000020a: 	movq	0x28(%rsp), %r8
    0000020f: 	movq	%rax, 0x60(%rsp)
    00000214: 	movq	%rax, %rdi
    00000217: 	movq	0x58(%rsp), %rax
    0000021c: 	movq	0x30(%rsp), %rcx
    00000221: 	movq	0x38(%rsp), %r10
    00000226: 	movq	%rax, 0x70(%rsp)
.Ltmp1852:
    0000022b: 	movq	%r8, %rdx
    0000022e: 	movq	%r9, %rsi
    00000231: 	movq	%r10, 0x28(%rsp)
    00000236: 	movq	%rcx, 0x20(%rsp)
    0000023b: 	callq	memcpy@PLT # Offset: 571
    00000240: 	movq	0x58(%rsp), %r8
    00000245: 	movq	0x60(%rsp), %rax
    0000024a: 	movq	0x20(%rsp), %rcx
    0000024f: 	movq	0x28(%rsp), %r10
    00000254: 	jmp	.Ltmp1850 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp1842:
    00000260: 	movl	0x4c(%rsp), %eax
    00000264: 	movl	%eax, iterations(%rip)
    0000026a: 	movq	0x88(%rsp), %rax
    00000272: 	subq	%fs:0x28, %rax
    0000027b: 	jne	.Ltmp1851 # Offset: 635
    0000027d: 	addq	$0x98, %rsp
    00000284: 	popq	%rbx
    00000285: 	popq	%rbp
    00000286: 	popq	%r12
    00000288: 	popq	%r13
    0000028a: 	popq	%r14
    0000028c: 	popq	%r15
    0000028e: 	retq # Offset: 654
.Ltmp1846:
    0000028f: 	leaq	DATAat0x27008(%rip), %rdi
    00000296: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 662
.Ltmp1851:
    0000029b: 	callq	__stack_chk_fail@PLT # Offset: 667
.Ltmp1849:
    000002a0: 	movq	%r13, %rdi
    000002a3: 	jmp	.Ltmp1852 # Offset: 675
    000002a5: 	endbr64
    000002a9: 	movq	%rax, %rbp
    000002ac: 	movq	0x60(%rsp), %rdi
    000002b1: 	cmpq	%r13, %rdi
    000002b4: 	je	.Ltmp1853 # Offset: 692
    000002b6: 	movq	0x70(%rsp), %rax
    000002bb: 	leaq	0x1(%rax), %rsi
    000002bf: 	callq	_ZdlPvm@PLT # Offset: 703
.Ltmp1853:
    000002c4: 	movq	%rbp, %rdi
    000002c7: 	callq	_Unwind_Resume@PLT # Offset: 711
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_reverse_copy_sizesI20BidirectionalPointerImEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_reverse_copyI20BidirectionalPointerIhEPFS1_S1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z17test_reverse_copyI20BidirectionalPointerIhEPFS1_S1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z17test_reverse_copyI20BidirectionalPointerIhEPFS1_S1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/reverse_sequence.cpp/1
  Number      : 233
  State       : disassembled
  Address     : 0x17ee0
  Size        : 0x257
  MaxSize     : 0x260
  Offset      : 0x17ee0
  Section     : .text
  Orc Section : .local.text._Z17test_reverse_copyI20BidirectionalPointerIhEPFS1_S1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0232:
    00000000: 	pushq	%r15
    00000002: 	movq	%rsi, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%rdx, %r14
    0000000a: 	pushq	%r13
    0000000c: 	movq	%rdi, %r13
    0000000f: 	pushq	%r12
    00000011: 	movq	%rdx, %r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%r8, %rbp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rcx, %rbx
    0000001c: 	subq	$0x18, %rsp
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x8(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	cmpq	%rcx, %rdx
    00000033: 	je	.Ltmp1854 # Offset: 51
    00000035: 	movq	%rcx, %rdx
    00000038: 	movl	$0x63, %esi
    0000003d: 	movq	%r14, %rdi
    00000040: 	subq	%r14, %rdx
    00000043: 	callq	memset@PLT # Offset: 67
.Ltmp1854:
    00000048: 	callq	clock@PLT # Offset: 72
    0000004d: 	movq	%rax, start_time(%rip)
    00000054: 	movl	iterations(%rip), %eax
    0000005a: 	testl	%eax, %eax
    0000005c: 	jle	.Ltmp1855 # Offset: 92
    0000005e: 	cmpq	%r13, %r15
    00000061: 	je	.Ltmp1855 # Offset: 97
    00000063: 	leaq	(%r14,%r15), %rsi
    00000067: 	xorl	%edi, %edi
    00000069: 	leaq	-0x1(%r15), %r8
    0000006d: 	subq	%r13, %rsi
.Ltmp1857:
    00000070: 	movq	%r14, %rax
    00000073: 	movq	%r8, %rdx
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1856:
    00000080: 	movzbl	(%rdx), %ecx
    00000083: 	addq	$0x1, %rax
    00000087: 	subq	$0x1, %rdx
    0000008b: 	movb	%cl, -0x1(%rax)
    0000008e: 	cmpq	%rsi, %rax
    00000091: 	jne	.Ltmp1856 # Offset: 145
    00000093: 	addl	$0x1, %edi
    00000096: 	cmpl	iterations(%rip), %edi
    0000009c: 	jl	.Ltmp1857 # Offset: 156
.Ltmp1855:
    0000009e: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000a5: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    000000ac: 	subq	$0x20, %rax
    000000b0: 	cmpq	%rax, %r14
    000000b3: 	je	.Ltmp1858 # Offset: 179
    000000b9: 	leaq	0x10(%r14), %rdi
    000000bd: 	movq	0x8(%rbp), %r13
    000000c1: 	movq	%rdi, (%r14)
    000000c4: 	movq	(%rbp), %r15
    000000c8: 	movq	%r15, %rax
    000000cb: 	addq	%r13, %rax
    000000ce: 	je	.Ltmp1859 # Offset: 206
    000000d0: 	testq	%r15, %r15
    000000d3: 	je	.Ltmp1860 # Offset: 211
.Ltmp1859:
    000000d9: 	movq	%r13, (%rsp)
    000000dd: 	cmpq	$0xf, %r13
    000000e1: 	ja	.Ltmp1861 # Offset: 225
    000000e7: 	cmpq	$0x1, %r13
    000000eb: 	jne	.Ltmp1862 # Offset: 235
    000000f1: 	movzbl	(%r15), %eax
    000000f5: 	movb	%al, 0x10(%r14)
.Ltmp1868:
    000000f9: 	movq	%r13, 0x8(%r14)
    000000fd: 	movb	$0x0, (%rdi,%r13)
    00000102: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000109: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000110: 	addq	$0x20, %rax
    00000114: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000011b: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000122: 	je	.Ltmp1863 # Offset: 290
.Ltmp1869:
    00000128: 	movq	-0x20(%rax), %r13
    0000012c: 	subq	$0x1, %rbx
    00000130: 	callq	clock@PLT # Offset: 304
    00000135: 	pxor	%xmm0, %xmm0
    00000139: 	movq	%rax, end_time(%rip)
    00000140: 	movq	%r13, %rdi
    00000143: 	subq	start_time(%rip), %rax
    0000014a: 	cvtsi2sd	%rax, %xmm0
    0000014f: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000157: 	callq	_Z13record_resultdPKc # Offset: 343
    0000015c: 	jmp	.Ltmp1864 # Offset: 348
    0000015e: 	nop # Size: 2
.Ltmp1866:
    00000160: 	addq	$0x1, %r12
    00000164: 	movzbl	(%r12), %eax
    00000169: 	cmpb	%al, -0x1(%r12)
    0000016e: 	jb	.Ltmp1865 # Offset: 366
.Ltmp1864:
    00000170: 	cmpq	%rbx, %r12
    00000173: 	jne	.Ltmp1866 # Offset: 371
    00000175: 	movq	0x8(%rsp), %rax
    0000017a: 	subq	%fs:0x28, %rax
    00000183: 	jne	.Ltmp1867 # Offset: 387
    00000189: 	addq	$0x18, %rsp
    0000018d: 	popq	%rbx
    0000018e: 	popq	%rbp
    0000018f: 	popq	%r12
    00000191: 	popq	%r13
    00000193: 	popq	%r14
    00000195: 	popq	%r15
    00000197: 	retq # Offset: 407
.Ltmp1861:
    00000198: 	movq	%r14, %rdi
    0000019b: 	movq	%rsp, %rsi
    0000019e: 	xorl	%edx, %edx
    000001a0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 416
    000001a5: 	movq	%rax, (%r14)
    000001a8: 	movq	%rax, %rdi
    000001ab: 	movq	(%rsp), %rax
    000001af: 	movq	%rax, 0x10(%r14)
.Ltmp1870:
    000001b3: 	movq	%r13, %rdx
    000001b6: 	movq	%r15, %rsi
    000001b9: 	callq	memcpy@PLT # Offset: 441
    000001be: 	movq	(%rsp), %r13
    000001c2: 	movq	(%r14), %rdi
    000001c5: 	jmp	.Ltmp1868 # Offset: 453
.Ltmp1865:
    000001ca: 	movq	0x8(%rsp), %rax
    000001cf: 	subq	%fs:0x28, %rax
    000001d8: 	jne	.Ltmp1867 # Offset: 472
    000001da: 	movq	(%rbp), %rdx
    000001de: 	addq	$0x18, %rsp
    000001e2: 	leaq	DATAat0x271d0(%rip), %rsi
    000001e9: 	xorl	%eax, %eax
    000001eb: 	popq	%rbx
    000001ec: 	movl	$0x1, %edi
    000001f1: 	popq	%rbp
    000001f2: 	popq	%r12
    000001f4: 	popq	%r13
    000001f6: 	popq	%r14
    000001f8: 	popq	%r15
    000001fa: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 506
.Ltmp1858:
    000001ff: 	movq	%rbp, %rsi
    00000202: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000209: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 521
    0000020e: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000215: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000021c: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000223: 	jne	.Ltmp1869 # Offset: 547
.Ltmp1863:
    00000229: 	movq	-0x8(%rdx), %rax
    0000022d: 	addq	$0x200, %rax
    00000233: 	jmp	.Ltmp1869 # Offset: 563
.Ltmp1862:
    00000238: 	testq	%r13, %r13
    0000023b: 	je	.Ltmp1868 # Offset: 571
    00000241: 	jmp	.Ltmp1870 # Offset: 577
.Ltmp1867:
    00000246: 	callq	__stack_chk_fail@PLT # Offset: 582
.Ltmp1860:
    0000024b: 	leaq	DATAat0x27008(%rip), %rdi
    00000252: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 594
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_reverse_copyI20BidirectionalPointerIhEPFS1_S1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z17test_reverse_copyI20BidirectionalPointerIiEPFS1_S1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 234
  State       : disassembled
  Address     : 0x18140
  Size        : 0x2cf
  MaxSize     : 0x2d0
  Offset      : 0x18140
  Section     : .text
  Orc Section : .local.text._Z17test_reverse_copyI20BidirectionalPointerIiEPFS1_S1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0233:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rcx, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdx, %rbx
    0000001d: 	subq	$0x28, %rsp
    00000021: 	movq	%r9, 0x8(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x18(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rcx, %rdx
    00000039: 	je	.Ltmp1871 # Offset: 57
    0000003b: 	movq	%rdx, %rax
    0000003e: 	leaq	-0x4(%rcx), %rdx
    00000042: 	subq	%rbx, %rdx
    00000045: 	movq	%rdx, %rcx
    00000048: 	shrq	$0x2, %rcx
    0000004c: 	addq	$0x1, %rcx
    00000050: 	cmpq	$0x8, %rdx
    00000054: 	jbe	.Ltmp1872 # Offset: 84
    00000056: 	movq	%rcx, %rdx
    00000059: 	movdqa	DATAat0x275c0(%rip), %xmm0
    00000061: 	shrq	$0x2, %rdx
    00000065: 	shlq	$0x4, %rdx
    00000069: 	addq	%rbx, %rdx
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp1873:
    00000070: 	movups	%xmm0, (%rax)
    00000073: 	addq	$0x10, %rax
    00000077: 	cmpq	%rdx, %rax
    0000007a: 	jne	.Ltmp1873 # Offset: 122
    0000007c: 	movq	%rcx, %rdx
    0000007f: 	andq	$-0x4, %rdx
    00000083: 	leaq	(%rbx,%rdx,4), %rax
    00000087: 	cmpq	%rdx, %rcx
    0000008a: 	je	.Ltmp1871 # Offset: 138
.Ltmp1872:
    0000008c: 	leaq	0x4(%rax), %rdx
    00000090: 	movl	$0x63, (%rax)
    00000096: 	cmpq	%rdx, %rbp
    00000099: 	je	.Ltmp1871 # Offset: 153
    0000009b: 	leaq	0x8(%rax), %rdx
    0000009f: 	movl	$0x63, 0x4(%rax)
    000000a6: 	cmpq	%rdx, %rbp
    000000a9: 	je	.Ltmp1871 # Offset: 169
    000000ab: 	movl	$0x63, 0x8(%rax)
.Ltmp1871:
    000000b2: 	callq	clock@PLT # Offset: 178
    000000b7: 	xorl	%r14d, %r14d
    000000ba: 	movq	%rax, start_time(%rip)
    000000c1: 	movl	iterations(%rip), %eax
    000000c7: 	testl	%eax, %eax
    000000c9: 	jle	.Ltmp1874 # Offset: 201
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1875:
    000000d0: 	movq	%rbx, %rdx
    000000d3: 	movq	%r13, %rsi
    000000d6: 	movq	%r12, %rdi
    000000d9: 	addl	$0x1, %r14d
    000000dd: 	callq	*%r15 # Offset: 221
    000000e0: 	cmpl	%r14d, iterations(%rip)
    000000e7: 	jg	.Ltmp1875 # Offset: 231
.Ltmp1874:
    000000e9: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000f0: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    000000f7: 	subq	$0x20, %rax
    000000fb: 	cmpq	%rax, %r13
    000000fe: 	je	.Ltmp1876 # Offset: 254
    00000104: 	movq	0x8(%rsp), %rax
    00000109: 	leaq	0x10(%r13), %rdi
    0000010d: 	movq	%rdi, (%r13)
    00000111: 	movq	(%rax), %r15
    00000114: 	movq	0x8(%rax), %r12
    00000118: 	movq	%r15, %rax
    0000011b: 	addq	%r12, %rax
    0000011e: 	je	.Ltmp1877 # Offset: 286
    00000120: 	testq	%r15, %r15
    00000123: 	je	.Ltmp1878 # Offset: 291
.Ltmp1877:
    00000129: 	movq	%r12, 0x10(%rsp)
    0000012e: 	cmpq	$0xf, %r12
    00000132: 	ja	.Ltmp1879 # Offset: 306
    00000138: 	cmpq	$0x1, %r12
    0000013c: 	jne	.Ltmp1880 # Offset: 316
    00000142: 	movzbl	(%r15), %eax
    00000146: 	movb	%al, 0x10(%r13)
.Ltmp1886:
    0000014a: 	movq	%r12, 0x8(%r13)
    0000014e: 	movb	$0x0, (%rdi,%r12)
    00000153: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000015a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000161: 	addq	$0x20, %rax
    00000165: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000016c: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000173: 	je	.Ltmp1881 # Offset: 371
.Ltmp1887:
    00000179: 	movq	-0x20(%rax), %r12
    0000017d: 	callq	clock@PLT # Offset: 381
    00000182: 	pxor	%xmm0, %xmm0
    00000186: 	movq	%rax, end_time(%rip)
    0000018d: 	movq	%r12, %rdi
    00000190: 	subq	start_time(%rip), %rax
    00000197: 	cvtsi2sd	%rax, %xmm0
    0000019c: 	divsd	DATAat0x276b0(%rip), %xmm0
    000001a4: 	callq	_Z13record_resultdPKc # Offset: 420
    000001a9: 	leaq	0x4(%rbx), %rax
    000001ad: 	jmp	.Ltmp1882 # Offset: 429
    000001af: 	nop # Size: 1
.Ltmp1884:
    000001b0: 	addq	$0x4, %rax
    000001b4: 	movl	-0x4(%rax), %ecx
    000001b7: 	cmpl	%ecx, -0x4(%rdx)
    000001ba: 	jl	.Ltmp1883 # Offset: 442
.Ltmp1882:
    000001bc: 	movq	%rax, %rdx
    000001bf: 	cmpq	%rax, %rbp
    000001c2: 	jne	.Ltmp1884 # Offset: 450
    000001c4: 	movq	0x18(%rsp), %rax
    000001c9: 	subq	%fs:0x28, %rax
    000001d2: 	jne	.Ltmp1885 # Offset: 466
    000001d8: 	addq	$0x28, %rsp
    000001dc: 	popq	%rbx
    000001dd: 	popq	%rbp
    000001de: 	popq	%r12
    000001e0: 	popq	%r13
    000001e2: 	popq	%r14
    000001e4: 	popq	%r15
    000001e6: 	retq # Offset: 486
    000001e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1879:
    000001f0: 	movq	%r13, %rdi
    000001f3: 	leaq	0x10(%rsp), %rsi
    000001f8: 	xorl	%edx, %edx
    000001fa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 506
    000001ff: 	movq	%rax, (%r13)
    00000203: 	movq	%rax, %rdi
    00000206: 	movq	0x10(%rsp), %rax
    0000020b: 	movq	%rax, 0x10(%r13)
.Ltmp1888:
    0000020f: 	movq	%r12, %rdx
    00000212: 	movq	%r15, %rsi
    00000215: 	callq	memcpy@PLT # Offset: 533
    0000021a: 	movq	0x10(%rsp), %r12
    0000021f: 	movq	(%r13), %rdi
    00000223: 	jmp	.Ltmp1886 # Offset: 547
    00000228: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1883:
    00000230: 	movq	0x18(%rsp), %rax
    00000235: 	subq	%fs:0x28, %rax
    0000023e: 	jne	.Ltmp1885 # Offset: 574
    00000240: 	movq	0x8(%rsp), %rax
    00000245: 	leaq	DATAat0x271d0(%rip), %rsi
    0000024c: 	movl	$0x1, %edi
    00000251: 	movq	(%rax), %rdx
    00000254: 	addq	$0x28, %rsp
    00000258: 	xorl	%eax, %eax
    0000025a: 	popq	%rbx
    0000025b: 	popq	%rbp
    0000025c: 	popq	%r12
    0000025e: 	popq	%r13
    00000260: 	popq	%r14
    00000262: 	popq	%r15
    00000264: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 612
    00000269: 	nopl	(%rax) # Size: 7
.Ltmp1876:
    00000270: 	movq	0x8(%rsp), %rsi
    00000275: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000027c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 636
    00000281: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000288: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000028f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000296: 	jne	.Ltmp1887 # Offset: 662
.Ltmp1881:
    0000029c: 	movq	-0x8(%rdx), %rax
    000002a0: 	addq	$0x200, %rax
    000002a6: 	jmp	.Ltmp1887 # Offset: 678
    000002ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1880:
    000002b0: 	testq	%r12, %r12
    000002b3: 	je	.Ltmp1886 # Offset: 691
    000002b9: 	jmp	.Ltmp1888 # Offset: 697
.Ltmp1885:
    000002be: 	callq	__stack_chk_fail@PLT # Offset: 702
.Ltmp1878:
    000002c3: 	leaq	DATAat0x27008(%rip), %rdi
    000002ca: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 714
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_reverse_copyI20BidirectionalPointerIiEPFS1_S1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23test_reverse_copy_sizesI20BidirectionalPointerIiEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 235
  State       : disassembled
  Address     : 0x18410
  Size        : 0x2cc
  MaxSize     : 0x2d0
  Offset      : 0x18410
  Section     : .text
  Orc Section : .local.text._Z23test_reverse_copy_sizesI20BidirectionalPointerIiEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0234:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	leaq	DATAat0x271e0(%rip), %rsi
    00000010: 	pushq	%r14
    00000012: 	movq	%rdi, %r14
    00000015: 	movl	$0x1, %edi
    0000001a: 	pushq	%r13
    0000001c: 	pushq	%r12
    0000001e: 	pushq	%rbp
    0000001f: 	movq	%r8, %rbp
    00000022: 	pushq	%rbx
    00000023: 	movl	%edx, %ebx
    00000025: 	subq	$0x98, %rsp
    0000002c: 	movl	%edx, 0x48(%rsp)
    00000030: 	movq	%rcx, 0x10(%rsp)
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x88(%rsp)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	movl	%eax, 0x4c(%rsp)
    00000050: 	xorl	%eax, %eax
    00000052: 	callq	__printf_chk@PLT # Offset: 82
    00000057: 	xorl	%eax, %eax
    00000059: 	movl	$0x1, %edi
    0000005e: 	leaq	DATAat0x27210(%rip), %rsi
    00000065: 	callq	__printf_chk@PLT # Offset: 101
    0000006a: 	cmpl	$0x3, %ebx
    0000006d: 	jle	.Ltmp1889 # Offset: 109
    00000073: 	movslq	0x4c(%rsp), %rax
    00000078: 	xorl	%r12d, %r12d
    0000007b: 	movl	$0x4, %ebx
    00000080: 	leaq	0x70(%rsp), %r13
    00000085: 	movq	%rax, 0x18(%rsp)
    0000008a: 	leaq	0x60(%rsp), %rax
    0000008f: 	movq	%rax, 0x8(%rsp)
    00000094: 	leaq	0x58(%rsp), %rax
    00000099: 	movq	%rax, 0x40(%rsp)
    0000009e: 	jmp	.Ltmp1890 # Offset: 158
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1895:
    000000a8: 	movzbl	(%r9), %eax
    000000ac: 	movb	%al, 0x70(%rsp)
    000000b0: 	movq	%r13, %rax
.Ltmp1897:
    000000b3: 	movq	%r8, 0x68(%rsp)
    000000b8: 	movq	0x8(%rsp), %r9
    000000bd: 	movq	%r15, %rdx
    000000c0: 	movq	%r10, %rsi
    000000c3: 	movb	$0x0, (%rax,%r8)
    000000c8: 	movq	0x10(%rsp), %r8
    000000cd: 	movq	%r14, %rdi
    000000d0: 	callq	_Z17test_reverse_copyI20BidirectionalPointerIiEPFS1_S1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 208
    000000d5: 	movq	0x60(%rsp), %rdi
    000000da: 	cmpq	%r13, %rdi
    000000dd: 	je	.Ltmp1891 # Offset: 221
    000000df: 	movq	0x70(%rsp), %rax
    000000e4: 	leaq	0x1(%rax), %rsi
    000000e8: 	callq	_ZdlPvm@PLT # Offset: 232
.Ltmp1891:
    000000ed: 	pxor	%xmm1, %xmm1
    000000f1: 	pxor	%xmm2, %xmm2
    000000f5: 	movq	(%rbp), %rcx
    000000f9: 	movl	%ebx, %r8d
    000000fc: 	cvtsi2sd	%ebx, %xmm2
    00000100: 	movq	results(%rip), %rax
    00000107: 	movl	%r12d, %edx
    0000010a: 	addl	%ebx, %ebx
    0000010c: 	leaq	DATAat0x27240(%rip), %rsi
    00000113: 	movl	$0x1, %edi
    00000118: 	addl	$0x1, %r12d
    0000011c: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000124: 	movsd	(%rax), %xmm0
    00000128: 	movl	$0x2, %eax
    0000012d: 	mulsd	%xmm2, %xmm1
    00000131: 	divsd	DATAat0x276b0(%rip), %xmm1
    00000139: 	divsd	%xmm0, %xmm1
    0000013d: 	callq	__printf_chk@PLT # Offset: 317
    00000142: 	movl	$0x0, current_test(%rip)
    0000014c: 	cmpl	%ebx, 0x48(%rsp)
    00000150: 	jl	.Ltmp1889 # Offset: 336
.Ltmp1890:
    00000156: 	movl	0x48(%rsp), %eax
    0000015a: 	movq	(%rbp), %r9
    0000015e: 	movq	%r13, 0x60(%rsp)
    00000163: 	movq	0x8(%rbp), %r8
    00000167: 	cltd
    00000168: 	idivl	%ebx
    0000016a: 	movl	$0x4, %edx
    0000016f: 	cltq
    00000171: 	imulq	0x18(%rsp), %rax
    00000177: 	cmpq	%rdx, %rax
    0000017a: 	cmovlq	%rdx, %rax
    0000017e: 	movl	$0x70000000, %edx
    00000183: 	cmpq	%rdx, %rax
    00000186: 	cmovgq	%rdx, %rax
    0000018a: 	addq	$0x1, %rax
    0000018e: 	andq	$-0x2, %rax
    00000192: 	movl	%eax, iterations(%rip)
    00000198: 	movslq	%ebx, %rax
    0000019b: 	shlq	$0x2, %rax
    0000019f: 	leaq	(%r14,%rax), %r10
    000001a3: 	leaq	(%r15,%rax), %rcx
    000001a7: 	movq	%r9, %rax
    000001aa: 	addq	%r8, %rax
    000001ad: 	je	.Ltmp1892 # Offset: 429
    000001af: 	testq	%r9, %r9
    000001b2: 	je	.Ltmp1893 # Offset: 434
.Ltmp1892:
    000001b8: 	movq	%r8, 0x58(%rsp)
    000001bd: 	cmpq	$0xf, %r8
    000001c1: 	ja	.Ltmp1894 # Offset: 449
    000001c3: 	cmpq	$0x1, %r8
    000001c7: 	je	.Ltmp1895 # Offset: 455
    000001cd: 	testq	%r8, %r8
    000001d0: 	jne	.Ltmp1896 # Offset: 464
    000001d6: 	movq	%r13, %rax
    000001d9: 	jmp	.Ltmp1897 # Offset: 473
    000001de: 	nop # Size: 2
.Ltmp1894:
    000001e0: 	movq	0x8(%rsp), %rdi
    000001e5: 	movq	0x40(%rsp), %rsi
    000001ea: 	xorl	%edx, %edx
    000001ec: 	movq	%r10, 0x38(%rsp)
    000001f1: 	movq	%rcx, 0x30(%rsp)
    000001f6: 	movq	%r8, 0x28(%rsp)
    000001fb: 	movq	%r9, 0x20(%rsp)
    00000200: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 512
    00000205: 	movq	0x20(%rsp), %r9
    0000020a: 	movq	0x28(%rsp), %r8
    0000020f: 	movq	%rax, 0x60(%rsp)
    00000214: 	movq	%rax, %rdi
    00000217: 	movq	0x58(%rsp), %rax
    0000021c: 	movq	0x30(%rsp), %rcx
    00000221: 	movq	0x38(%rsp), %r10
    00000226: 	movq	%rax, 0x70(%rsp)
.Ltmp1899:
    0000022b: 	movq	%r8, %rdx
    0000022e: 	movq	%r9, %rsi
    00000231: 	movq	%r10, 0x28(%rsp)
    00000236: 	movq	%rcx, 0x20(%rsp)
    0000023b: 	callq	memcpy@PLT # Offset: 571
    00000240: 	movq	0x58(%rsp), %r8
    00000245: 	movq	0x60(%rsp), %rax
    0000024a: 	movq	0x20(%rsp), %rcx
    0000024f: 	movq	0x28(%rsp), %r10
    00000254: 	jmp	.Ltmp1897 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp1889:
    00000260: 	movl	0x4c(%rsp), %eax
    00000264: 	movl	%eax, iterations(%rip)
    0000026a: 	movq	0x88(%rsp), %rax
    00000272: 	subq	%fs:0x28, %rax
    0000027b: 	jne	.Ltmp1898 # Offset: 635
    0000027d: 	addq	$0x98, %rsp
    00000284: 	popq	%rbx
    00000285: 	popq	%rbp
    00000286: 	popq	%r12
    00000288: 	popq	%r13
    0000028a: 	popq	%r14
    0000028c: 	popq	%r15
    0000028e: 	retq # Offset: 654
.Ltmp1893:
    0000028f: 	leaq	DATAat0x27008(%rip), %rdi
    00000296: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 662
.Ltmp1898:
    0000029b: 	callq	__stack_chk_fail@PLT # Offset: 667
.Ltmp1896:
    000002a0: 	movq	%r13, %rdi
    000002a3: 	jmp	.Ltmp1899 # Offset: 675
    000002a5: 	endbr64
    000002a9: 	movq	%rax, %rbp
    000002ac: 	movq	0x60(%rsp), %rdi
    000002b1: 	cmpq	%r13, %rdi
    000002b4: 	je	.Ltmp1900 # Offset: 692
    000002b6: 	movq	0x70(%rsp), %rax
    000002bb: 	leaq	0x1(%rax), %rsi
    000002bf: 	callq	_ZdlPvm@PLT # Offset: 703
.Ltmp1900:
    000002c4: 	movq	%rbp, %rdi
    000002c7: 	callq	_Unwind_Resume@PLT # Offset: 711
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_reverse_copy_sizesI20BidirectionalPointerIiEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_reverse_copyI20BidirectionalPointerIdEPFS1_S1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 236
  State       : disassembled
  Address     : 0x186e0
  Size        : 0x2af
  MaxSize     : 0x2b0
  Offset      : 0x186e0
  Section     : .text
  Orc Section : .local.text._Z17test_reverse_copyI20BidirectionalPointerIdEPFS1_S1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0235:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rcx, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdx, %rbx
    0000001d: 	subq	$0x28, %rsp
    00000021: 	movq	%r9, 0x8(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x18(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rcx, %rdx
    00000039: 	je	.Ltmp1901 # Offset: 57
    0000003b: 	movq	%rdx, %rax
    0000003e: 	movq	%rcx, %rdx
    00000041: 	subq	%rbx, %rdx
    00000044: 	leaq	-0x8(%rdx), %rcx
    00000048: 	shrq	$0x3, %rcx
    0000004c: 	addq	$0x1, %rcx
    00000050: 	cmpq	$0x8, %rdx
    00000054: 	je	.Ltmp1902 # Offset: 84
    00000056: 	movq	%rcx, %rdx
    00000059: 	movapd	DATAat0x275d0(%rip), %xmm0
    00000061: 	shrq	%rdx
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rbx, %rdx
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1903:
    00000070: 	movups	%xmm0, (%rax)
    00000073: 	addq	$0x10, %rax
    00000077: 	cmpq	%rdx, %rax
    0000007a: 	jne	.Ltmp1903 # Offset: 122
    0000007c: 	movq	%rcx, %rdx
    0000007f: 	andq	$-0x2, %rdx
    00000083: 	leaq	(%rbx,%rdx,8), %rax
    00000087: 	cmpq	%rcx, %rdx
    0000008a: 	je	.Ltmp1901 # Offset: 138
.Ltmp1902:
    0000008c: 	movq	DATAat0x275d0(%rip), %rcx
    00000093: 	movq	%rcx, (%rax)
.Ltmp1901:
    00000096: 	callq	clock@PLT # Offset: 150
    0000009b: 	xorl	%r14d, %r14d
    0000009e: 	movq	%rax, start_time(%rip)
    000000a5: 	movl	iterations(%rip), %eax
    000000ab: 	testl	%eax, %eax
    000000ad: 	jle	.Ltmp1904 # Offset: 173
    000000af: 	nop # Size: 1
.Ltmp1905:
    000000b0: 	movq	%rbx, %rdx
    000000b3: 	movq	%r13, %rsi
    000000b6: 	movq	%r12, %rdi
    000000b9: 	addl	$0x1, %r14d
    000000bd: 	callq	*%r15 # Offset: 189
    000000c0: 	cmpl	%r14d, iterations(%rip)
    000000c7: 	jg	.Ltmp1905 # Offset: 199
.Ltmp1904:
    000000c9: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000d0: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    000000d7: 	subq	$0x20, %rax
    000000db: 	cmpq	%rax, %r13
    000000de: 	je	.Ltmp1906 # Offset: 222
    000000e4: 	movq	0x8(%rsp), %rax
    000000e9: 	leaq	0x10(%r13), %rdi
    000000ed: 	movq	%rdi, (%r13)
    000000f1: 	movq	(%rax), %r15
    000000f4: 	movq	0x8(%rax), %r12
    000000f8: 	movq	%r15, %rax
    000000fb: 	addq	%r12, %rax
    000000fe: 	je	.Ltmp1907 # Offset: 254
    00000100: 	testq	%r15, %r15
    00000103: 	je	.Ltmp1908 # Offset: 259
.Ltmp1907:
    00000109: 	movq	%r12, 0x10(%rsp)
    0000010e: 	cmpq	$0xf, %r12
    00000112: 	ja	.Ltmp1909 # Offset: 274
    00000118: 	cmpq	$0x1, %r12
    0000011c: 	jne	.Ltmp1910 # Offset: 284
    00000122: 	movzbl	(%r15), %eax
    00000126: 	movb	%al, 0x10(%r13)
.Ltmp1916:
    0000012a: 	movq	%r12, 0x8(%r13)
    0000012e: 	movb	$0x0, (%rdi,%r12)
    00000133: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000013a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000141: 	addq	$0x20, %rax
    00000145: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000014c: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000153: 	je	.Ltmp1911 # Offset: 339
.Ltmp1917:
    00000159: 	movq	-0x20(%rax), %r12
    0000015d: 	callq	clock@PLT # Offset: 349
    00000162: 	pxor	%xmm0, %xmm0
    00000166: 	movq	%rax, end_time(%rip)
    0000016d: 	movq	%r12, %rdi
    00000170: 	subq	start_time(%rip), %rax
    00000177: 	cvtsi2sd	%rax, %xmm0
    0000017c: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000184: 	callq	_Z13record_resultdPKc # Offset: 388
    00000189: 	leaq	0x8(%rbx), %rax
    0000018d: 	jmp	.Ltmp1912 # Offset: 397
    0000018f: 	nop # Size: 1
.Ltmp1914:
    00000190: 	addq	$0x8, %rax
    00000194: 	movsd	-0x8(%rax), %xmm0
    00000199: 	comisd	-0x8(%rdx), %xmm0
    0000019e: 	ja	.Ltmp1913 # Offset: 414
.Ltmp1912:
    000001a0: 	movq	%rax, %rdx
    000001a3: 	cmpq	%rax, %rbp
    000001a6: 	jne	.Ltmp1914 # Offset: 422
    000001a8: 	movq	0x18(%rsp), %rax
    000001ad: 	subq	%fs:0x28, %rax
    000001b6: 	jne	.Ltmp1915 # Offset: 438
    000001bc: 	addq	$0x28, %rsp
    000001c0: 	popq	%rbx
    000001c1: 	popq	%rbp
    000001c2: 	popq	%r12
    000001c4: 	popq	%r13
    000001c6: 	popq	%r14
    000001c8: 	popq	%r15
    000001ca: 	retq # Offset: 458
    000001cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1909:
    000001d0: 	movq	%r13, %rdi
    000001d3: 	leaq	0x10(%rsp), %rsi
    000001d8: 	xorl	%edx, %edx
    000001da: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 474
    000001df: 	movq	%rax, (%r13)
    000001e3: 	movq	%rax, %rdi
    000001e6: 	movq	0x10(%rsp), %rax
    000001eb: 	movq	%rax, 0x10(%r13)
.Ltmp1918:
    000001ef: 	movq	%r12, %rdx
    000001f2: 	movq	%r15, %rsi
    000001f5: 	callq	memcpy@PLT # Offset: 501
    000001fa: 	movq	0x10(%rsp), %r12
    000001ff: 	movq	(%r13), %rdi
    00000203: 	jmp	.Ltmp1916 # Offset: 515
    00000208: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1913:
    00000210: 	movq	0x18(%rsp), %rax
    00000215: 	subq	%fs:0x28, %rax
    0000021e: 	jne	.Ltmp1915 # Offset: 542
    00000220: 	movq	0x8(%rsp), %rax
    00000225: 	leaq	DATAat0x271d0(%rip), %rsi
    0000022c: 	movl	$0x1, %edi
    00000231: 	movq	(%rax), %rdx
    00000234: 	addq	$0x28, %rsp
    00000238: 	xorl	%eax, %eax
    0000023a: 	popq	%rbx
    0000023b: 	popq	%rbp
    0000023c: 	popq	%r12
    0000023e: 	popq	%r13
    00000240: 	popq	%r14
    00000242: 	popq	%r15
    00000244: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 580
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp1906:
    00000250: 	movq	0x8(%rsp), %rsi
    00000255: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000025c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 604
    00000261: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000268: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000026f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000276: 	jne	.Ltmp1917 # Offset: 630
.Ltmp1911:
    0000027c: 	movq	-0x8(%rdx), %rax
    00000280: 	addq	$0x200, %rax
    00000286: 	jmp	.Ltmp1917 # Offset: 646
    0000028b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1910:
    00000290: 	testq	%r12, %r12
    00000293: 	je	.Ltmp1916 # Offset: 659
    00000299: 	jmp	.Ltmp1918 # Offset: 665
.Ltmp1915:
    0000029e: 	callq	__stack_chk_fail@PLT # Offset: 670
.Ltmp1908:
    000002a3: 	leaq	DATAat0x27008(%rip), %rdi
    000002aa: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 682
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_reverse_copyI20BidirectionalPointerIdEPFS1_S1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z23test_reverse_copy_sizesI20BidirectionalPointerIdEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 237
  State       : disassembled
  Address     : 0x18990
  Size        : 0x2cc
  MaxSize     : 0x2d0
  Offset      : 0x18990
  Section     : .text
  Orc Section : .local.text._Z23test_reverse_copy_sizesI20BidirectionalPointerIdEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0236:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	leaq	DATAat0x271e0(%rip), %rsi
    00000010: 	pushq	%r14
    00000012: 	movq	%rdi, %r14
    00000015: 	movl	$0x1, %edi
    0000001a: 	pushq	%r13
    0000001c: 	pushq	%r12
    0000001e: 	pushq	%rbp
    0000001f: 	movq	%r8, %rbp
    00000022: 	pushq	%rbx
    00000023: 	movl	%edx, %ebx
    00000025: 	subq	$0x98, %rsp
    0000002c: 	movl	%edx, 0x48(%rsp)
    00000030: 	movq	%rcx, 0x10(%rsp)
    00000035: 	movq	%fs:0x28, %rax
    0000003e: 	movq	%rax, 0x88(%rsp)
    00000046: 	movl	iterations(%rip), %eax
    0000004c: 	movl	%eax, 0x4c(%rsp)
    00000050: 	xorl	%eax, %eax
    00000052: 	callq	__printf_chk@PLT # Offset: 82
    00000057: 	xorl	%eax, %eax
    00000059: 	movl	$0x1, %edi
    0000005e: 	leaq	DATAat0x27210(%rip), %rsi
    00000065: 	callq	__printf_chk@PLT # Offset: 101
    0000006a: 	cmpl	$0x3, %ebx
    0000006d: 	jle	.Ltmp1919 # Offset: 109
    00000073: 	movslq	0x4c(%rsp), %rax
    00000078: 	xorl	%r12d, %r12d
    0000007b: 	movl	$0x4, %ebx
    00000080: 	leaq	0x70(%rsp), %r13
    00000085: 	movq	%rax, 0x18(%rsp)
    0000008a: 	leaq	0x60(%rsp), %rax
    0000008f: 	movq	%rax, 0x8(%rsp)
    00000094: 	leaq	0x58(%rsp), %rax
    00000099: 	movq	%rax, 0x40(%rsp)
    0000009e: 	jmp	.Ltmp1920 # Offset: 158
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1925:
    000000a8: 	movzbl	(%r9), %eax
    000000ac: 	movb	%al, 0x70(%rsp)
    000000b0: 	movq	%r13, %rax
.Ltmp1927:
    000000b3: 	movq	%r8, 0x68(%rsp)
    000000b8: 	movq	0x8(%rsp), %r9
    000000bd: 	movq	%r15, %rdx
    000000c0: 	movq	%r10, %rsi
    000000c3: 	movb	$0x0, (%rax,%r8)
    000000c8: 	movq	0x10(%rsp), %r8
    000000cd: 	movq	%r14, %rdi
    000000d0: 	callq	_Z17test_reverse_copyI20BidirectionalPointerIdEPFS1_S1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 208
    000000d5: 	movq	0x60(%rsp), %rdi
    000000da: 	cmpq	%r13, %rdi
    000000dd: 	je	.Ltmp1921 # Offset: 221
    000000df: 	movq	0x70(%rsp), %rax
    000000e4: 	leaq	0x1(%rax), %rsi
    000000e8: 	callq	_ZdlPvm@PLT # Offset: 232
.Ltmp1921:
    000000ed: 	pxor	%xmm1, %xmm1
    000000f1: 	pxor	%xmm2, %xmm2
    000000f5: 	movq	(%rbp), %rcx
    000000f9: 	movl	%ebx, %r8d
    000000fc: 	cvtsi2sd	%ebx, %xmm2
    00000100: 	movq	results(%rip), %rax
    00000107: 	movl	%r12d, %edx
    0000010a: 	addl	%ebx, %ebx
    0000010c: 	leaq	DATAat0x27240(%rip), %rsi
    00000113: 	movl	$0x1, %edi
    00000118: 	addl	$0x1, %r12d
    0000011c: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000124: 	movsd	(%rax), %xmm0
    00000128: 	movl	$0x2, %eax
    0000012d: 	mulsd	%xmm2, %xmm1
    00000131: 	divsd	DATAat0x276b0(%rip), %xmm1
    00000139: 	divsd	%xmm0, %xmm1
    0000013d: 	callq	__printf_chk@PLT # Offset: 317
    00000142: 	movl	$0x0, current_test(%rip)
    0000014c: 	cmpl	%ebx, 0x48(%rsp)
    00000150: 	jl	.Ltmp1919 # Offset: 336
.Ltmp1920:
    00000156: 	movl	0x48(%rsp), %eax
    0000015a: 	movq	(%rbp), %r9
    0000015e: 	movq	%r13, 0x60(%rsp)
    00000163: 	movq	0x8(%rbp), %r8
    00000167: 	cltd
    00000168: 	idivl	%ebx
    0000016a: 	movl	$0x4, %edx
    0000016f: 	cltq
    00000171: 	imulq	0x18(%rsp), %rax
    00000177: 	cmpq	%rdx, %rax
    0000017a: 	cmovlq	%rdx, %rax
    0000017e: 	movl	$0x70000000, %edx
    00000183: 	cmpq	%rdx, %rax
    00000186: 	cmovgq	%rdx, %rax
    0000018a: 	addq	$0x1, %rax
    0000018e: 	andq	$-0x2, %rax
    00000192: 	movl	%eax, iterations(%rip)
    00000198: 	movslq	%ebx, %rax
    0000019b: 	shlq	$0x3, %rax
    0000019f: 	leaq	(%r14,%rax), %r10
    000001a3: 	leaq	(%r15,%rax), %rcx
    000001a7: 	movq	%r9, %rax
    000001aa: 	addq	%r8, %rax
    000001ad: 	je	.Ltmp1922 # Offset: 429
    000001af: 	testq	%r9, %r9
    000001b2: 	je	.Ltmp1923 # Offset: 434
.Ltmp1922:
    000001b8: 	movq	%r8, 0x58(%rsp)
    000001bd: 	cmpq	$0xf, %r8
    000001c1: 	ja	.Ltmp1924 # Offset: 449
    000001c3: 	cmpq	$0x1, %r8
    000001c7: 	je	.Ltmp1925 # Offset: 455
    000001cd: 	testq	%r8, %r8
    000001d0: 	jne	.Ltmp1926 # Offset: 464
    000001d6: 	movq	%r13, %rax
    000001d9: 	jmp	.Ltmp1927 # Offset: 473
    000001de: 	nop # Size: 2
.Ltmp1924:
    000001e0: 	movq	0x8(%rsp), %rdi
    000001e5: 	movq	0x40(%rsp), %rsi
    000001ea: 	xorl	%edx, %edx
    000001ec: 	movq	%r10, 0x38(%rsp)
    000001f1: 	movq	%rcx, 0x30(%rsp)
    000001f6: 	movq	%r8, 0x28(%rsp)
    000001fb: 	movq	%r9, 0x20(%rsp)
    00000200: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 512
    00000205: 	movq	0x20(%rsp), %r9
    0000020a: 	movq	0x28(%rsp), %r8
    0000020f: 	movq	%rax, 0x60(%rsp)
    00000214: 	movq	%rax, %rdi
    00000217: 	movq	0x58(%rsp), %rax
    0000021c: 	movq	0x30(%rsp), %rcx
    00000221: 	movq	0x38(%rsp), %r10
    00000226: 	movq	%rax, 0x70(%rsp)
.Ltmp1929:
    0000022b: 	movq	%r8, %rdx
    0000022e: 	movq	%r9, %rsi
    00000231: 	movq	%r10, 0x28(%rsp)
    00000236: 	movq	%rcx, 0x20(%rsp)
    0000023b: 	callq	memcpy@PLT # Offset: 571
    00000240: 	movq	0x58(%rsp), %r8
    00000245: 	movq	0x60(%rsp), %rax
    0000024a: 	movq	0x20(%rsp), %rcx
    0000024f: 	movq	0x28(%rsp), %r10
    00000254: 	jmp	.Ltmp1927 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp1919:
    00000260: 	movl	0x4c(%rsp), %eax
    00000264: 	movl	%eax, iterations(%rip)
    0000026a: 	movq	0x88(%rsp), %rax
    00000272: 	subq	%fs:0x28, %rax
    0000027b: 	jne	.Ltmp1928 # Offset: 635
    0000027d: 	addq	$0x98, %rsp
    00000284: 	popq	%rbx
    00000285: 	popq	%rbp
    00000286: 	popq	%r12
    00000288: 	popq	%r13
    0000028a: 	popq	%r14
    0000028c: 	popq	%r15
    0000028e: 	retq # Offset: 654
.Ltmp1923:
    0000028f: 	leaq	DATAat0x27008(%rip), %rdi
    00000296: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 662
.Ltmp1928:
    0000029b: 	callq	__stack_chk_fail@PLT # Offset: 667
.Ltmp1926:
    000002a0: 	movq	%r13, %rdi
    000002a3: 	jmp	.Ltmp1929 # Offset: 675
    000002a5: 	endbr64
    000002a9: 	movq	%rax, %rbp
    000002ac: 	movq	0x60(%rsp), %rdi
    000002b1: 	cmpq	%r13, %rdi
    000002b4: 	je	.Ltmp1930 # Offset: 692
    000002b6: 	movq	0x70(%rsp), %rax
    000002bb: 	leaq	0x1(%rax), %rsi
    000002bf: 	callq	_ZdlPvm@PLT # Offset: 703
.Ltmp1930:
    000002c4: 	movq	%rbp, %rdi
    000002c7: 	callq	_Unwind_Resume@PLT # Offset: 711
DWARF CFI Instructions:
    <empty>
End of Function "_Z23test_reverse_copy_sizesI20BidirectionalPointerIdEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12test_reverseIPhPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1(*2)" after disassembly {
  All names   : _Z12test_reverseIPhPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1
                _Z12test_reverseIPhPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/reverse_sequence.cpp/1
  Number      : 238
  State       : disassembled
  Address     : 0x18c60
  Size        : 0x254
  MaxSize     : 0x260
  Offset      : 0x18c60
  Section     : .text
  Orc Section : .local.text._Z12test_reverseIPhPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0237:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movq	%rsi, %r12
    0000000b: 	pushq	%rbp
    0000000c: 	movq	%rdx, %rbp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	subq	$0x18, %rsp
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0x8(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	callq	clock@PLT # Offset: 39
    0000002c: 	movq	%rax, start_time(%rip)
    00000033: 	movl	iterations(%rip), %eax
    00000039: 	testl	%eax, %eax
    0000003b: 	jle	.Ltmp1931 # Offset: 59
    0000003d: 	movq	%r12, %rax
    00000040: 	subq	%rbx, %rax
    00000043: 	movq	%rax, %rdi
    00000046: 	shrq	$0x3f, %rdi
    0000004a: 	addq	%rax, %rdi
    0000004d: 	sarq	%rdi
    00000050: 	cmpq	%r12, %rbx
    00000053: 	je	.Ltmp1931 # Offset: 83
    00000055: 	cmpq	$0x1, %rax
    00000059: 	jle	.Ltmp1931 # Offset: 89
    0000005b: 	xorl	%r8d, %r8d
    0000005e: 	leaq	-0x1(%r12), %r9
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1933:
    00000068: 	movq	%r9, %rdx
    0000006b: 	xorl	%eax, %eax
    0000006d: 	nopl	(%rax) # Size: 3
.Ltmp1932:
    00000070: 	movzbl	(%rdx), %esi
    00000073: 	movzbl	(%rbx,%rax), %ecx
    00000077: 	subq	$0x1, %rdx
    0000007b: 	movb	%sil, (%rbx,%rax)
    0000007f: 	addq	$0x1, %rax
    00000083: 	movb	%cl, 0x1(%rdx)
    00000086: 	cmpq	%rax, %rdi
    00000089: 	jg	.Ltmp1932 # Offset: 137
    0000008b: 	addl	$0x1, %r8d
    0000008f: 	cmpl	iterations(%rip), %r8d
    00000096: 	jl	.Ltmp1933 # Offset: 150
.Ltmp1931:
    00000098: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000009f: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    000000a6: 	subq	$0x20, %rax
    000000aa: 	cmpq	%rax, %r14
    000000ad: 	je	.Ltmp1934 # Offset: 173
    000000b3: 	leaq	0x10(%r14), %rdi
    000000b7: 	movq	0x8(%rbp), %r13
    000000bb: 	movq	%rdi, (%r14)
    000000be: 	movq	(%rbp), %r15
    000000c2: 	movq	%r15, %rax
    000000c5: 	addq	%r13, %rax
    000000c8: 	je	.Ltmp1935 # Offset: 200
    000000ca: 	testq	%r15, %r15
    000000cd: 	je	.Ltmp1936 # Offset: 205
.Ltmp1935:
    000000d3: 	movq	%r13, (%rsp)
    000000d7: 	cmpq	$0xf, %r13
    000000db: 	ja	.Ltmp1937 # Offset: 219
    000000e1: 	cmpq	$0x1, %r13
    000000e5: 	jne	.Ltmp1938 # Offset: 229
    000000eb: 	movzbl	(%r15), %eax
    000000ef: 	movb	%al, 0x10(%r14)
.Ltmp1944:
    000000f3: 	movq	%r13, 0x8(%r14)
    000000f7: 	movb	$0x0, (%rdi,%r13)
    000000fc: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000103: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000010a: 	addq	$0x20, %rax
    0000010e: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000115: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    0000011c: 	je	.Ltmp1939 # Offset: 284
.Ltmp1945:
    00000122: 	movq	-0x20(%rax), %r13
    00000126: 	addq	$0x1, %rbx
    0000012a: 	callq	clock@PLT # Offset: 298
    0000012f: 	pxor	%xmm0, %xmm0
    00000133: 	movq	%rax, end_time(%rip)
    0000013a: 	movq	%r13, %rdi
    0000013d: 	subq	start_time(%rip), %rax
    00000144: 	cvtsi2sd	%rax, %xmm0
    00000149: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000151: 	callq	_Z13record_resultdPKc # Offset: 337
    00000156: 	jmp	.Ltmp1940 # Offset: 342
    00000158: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1942:
    00000160: 	addq	$0x1, %rbx
    00000164: 	movzbl	-0x2(%rbx), %eax
    00000168: 	cmpb	%al, -0x1(%rbx)
    0000016b: 	jb	.Ltmp1941 # Offset: 363
.Ltmp1940:
    0000016d: 	cmpq	%rbx, %r12
    00000170: 	jne	.Ltmp1942 # Offset: 368
    00000172: 	movq	0x8(%rsp), %rax
    00000177: 	subq	%fs:0x28, %rax
    00000180: 	jne	.Ltmp1943 # Offset: 384
    00000186: 	addq	$0x18, %rsp
    0000018a: 	popq	%rbx
    0000018b: 	popq	%rbp
    0000018c: 	popq	%r12
    0000018e: 	popq	%r13
    00000190: 	popq	%r14
    00000192: 	popq	%r15
    00000194: 	retq # Offset: 404
.Ltmp1937:
    00000195: 	movq	%r14, %rdi
    00000198: 	movq	%rsp, %rsi
    0000019b: 	xorl	%edx, %edx
    0000019d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 413
    000001a2: 	movq	%rax, (%r14)
    000001a5: 	movq	%rax, %rdi
    000001a8: 	movq	(%rsp), %rax
    000001ac: 	movq	%rax, 0x10(%r14)
.Ltmp1946:
    000001b0: 	movq	%r13, %rdx
    000001b3: 	movq	%r15, %rsi
    000001b6: 	callq	memcpy@PLT # Offset: 438
    000001bb: 	movq	(%rsp), %r13
    000001bf: 	movq	(%r14), %rdi
    000001c2: 	jmp	.Ltmp1944 # Offset: 450
.Ltmp1941:
    000001c7: 	movq	0x8(%rsp), %rax
    000001cc: 	subq	%fs:0x28, %rax
    000001d5: 	jne	.Ltmp1943 # Offset: 469
    000001d7: 	movq	(%rbp), %rdx
    000001db: 	addq	$0x18, %rsp
    000001df: 	leaq	DATAat0x271d0(%rip), %rsi
    000001e6: 	xorl	%eax, %eax
    000001e8: 	popq	%rbx
    000001e9: 	movl	$0x1, %edi
    000001ee: 	popq	%rbp
    000001ef: 	popq	%r12
    000001f1: 	popq	%r13
    000001f3: 	popq	%r14
    000001f5: 	popq	%r15
    000001f7: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 503
.Ltmp1934:
    000001fc: 	movq	%rbp, %rsi
    000001ff: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000206: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 518
    0000020b: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000212: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000219: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000220: 	jne	.Ltmp1945 # Offset: 544
.Ltmp1939:
    00000226: 	movq	-0x8(%rdx), %rax
    0000022a: 	addq	$0x200, %rax
    00000230: 	jmp	.Ltmp1945 # Offset: 560
.Ltmp1938:
    00000235: 	testq	%r13, %r13
    00000238: 	je	.Ltmp1944 # Offset: 568
    0000023e: 	jmp	.Ltmp1946 # Offset: 574
.Ltmp1943:
    00000243: 	callq	__stack_chk_fail@PLT # Offset: 579
.Ltmp1936:
    00000248: 	leaq	DATAat0x27008(%rip), %rdi
    0000024f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 591
DWARF CFI Instructions:
    <empty>
End of Function "_Z12test_reverseIPhPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1(*2)"

Binary Function "_Z17test_reverse_copyI20BidirectionalPointerIhEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z17test_reverse_copyI20BidirectionalPointerIhEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z17test_reverse_copyI20BidirectionalPointerIhEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/reverse_sequence.cpp/1
  Number      : 239
  State       : disassembled
  Address     : 0x18ec0
  Size        : 0x25e
  MaxSize     : 0x260
  Offset      : 0x18ec0
  Section     : .text
  Orc Section : .local.text._Z17test_reverse_copyI20BidirectionalPointerIhEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0238:
    00000000: 	pushq	%r15
    00000002: 	movq	%rsi, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%rdx, %r14
    0000000a: 	pushq	%r13
    0000000c: 	movq	%rdx, %r13
    0000000f: 	pushq	%r12
    00000011: 	movq	%rdi, %r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%r8, %rbp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rcx, %rbx
    0000001c: 	subq	$0x18, %rsp
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x8(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	cmpq	%rcx, %rdx
    00000033: 	je	.Ltmp1947 # Offset: 51
    00000035: 	movq	%rcx, %rdx
    00000038: 	movl	$0x63, %esi
    0000003d: 	movq	%r14, %rdi
    00000040: 	subq	%r14, %rdx
    00000043: 	callq	memset@PLT # Offset: 67
.Ltmp1947:
    00000048: 	callq	clock@PLT # Offset: 72
    0000004d: 	movq	%rax, start_time(%rip)
    00000054: 	movl	iterations(%rip), %eax
    0000005a: 	testl	%eax, %eax
    0000005c: 	jle	.Ltmp1948 # Offset: 92
    0000005e: 	cmpq	%r12, %r15
    00000061: 	je	.Ltmp1948 # Offset: 97
    00000063: 	xorl	%esi, %esi
    00000065: 	leaq	-0x1(%r15), %rdi
    00000069: 	nopl	(%rax) # Size: 7
.Ltmp1950:
    00000070: 	movq	%rdi, %rax
    00000073: 	movq	%r14, %rdx
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1949:
    00000080: 	movzbl	(%rax), %ecx
    00000083: 	addq	$0x1, %rdx
    00000087: 	movb	%cl, -0x1(%rdx)
    0000008a: 	movq	%rax, %rcx
    0000008d: 	subq	$0x1, %rax
    00000091: 	cmpq	%rcx, %r12
    00000094: 	jne	.Ltmp1949 # Offset: 148
    00000096: 	addl	$0x1, %esi
    00000099: 	cmpl	iterations(%rip), %esi
    0000009f: 	jl	.Ltmp1950 # Offset: 159
.Ltmp1948:
    000000a1: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000a8: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    000000af: 	subq	$0x20, %rax
    000000b3: 	cmpq	%rax, %r14
    000000b6: 	je	.Ltmp1951 # Offset: 182
    000000bc: 	leaq	0x10(%r14), %rdi
    000000c0: 	movq	0x8(%rbp), %r12
    000000c4: 	movq	%rdi, (%r14)
    000000c7: 	movq	(%rbp), %r15
    000000cb: 	movq	%r15, %rax
    000000ce: 	addq	%r12, %rax
    000000d1: 	je	.Ltmp1952 # Offset: 209
    000000d3: 	testq	%r15, %r15
    000000d6: 	je	.Ltmp1953 # Offset: 214
.Ltmp1952:
    000000dc: 	movq	%r12, (%rsp)
    000000e0: 	cmpq	$0xf, %r12
    000000e4: 	ja	.Ltmp1954 # Offset: 228
    000000ea: 	cmpq	$0x1, %r12
    000000ee: 	jne	.Ltmp1955 # Offset: 238
    000000f4: 	movzbl	(%r15), %eax
    000000f8: 	movb	%al, 0x10(%r14)
.Ltmp1961:
    000000fc: 	movq	%r12, 0x8(%r14)
    00000100: 	movb	$0x0, (%rdi,%r12)
    00000105: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000010c: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000113: 	addq	$0x20, %rax
    00000117: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000011e: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000125: 	je	.Ltmp1956 # Offset: 293
.Ltmp1962:
    0000012b: 	movq	-0x20(%rax), %r12
    0000012f: 	subq	$0x1, %rbx
    00000133: 	callq	clock@PLT # Offset: 307
    00000138: 	pxor	%xmm0, %xmm0
    0000013c: 	movq	%rax, end_time(%rip)
    00000143: 	movq	%r12, %rdi
    00000146: 	subq	start_time(%rip), %rax
    0000014d: 	cvtsi2sd	%rax, %xmm0
    00000152: 	divsd	DATAat0x276b0(%rip), %xmm0
    0000015a: 	callq	_Z13record_resultdPKc # Offset: 346
    0000015f: 	jmp	.Ltmp1957 # Offset: 351
    00000161: 	nopl	(%rax) # Size: 7
.Ltmp1959:
    00000168: 	addq	$0x1, %r13
    0000016c: 	movzbl	(%r13), %eax
    00000171: 	cmpb	%al, -0x1(%r13)
    00000175: 	jb	.Ltmp1958 # Offset: 373
.Ltmp1957:
    00000177: 	cmpq	%rbx, %r13
    0000017a: 	jne	.Ltmp1959 # Offset: 378
    0000017c: 	movq	0x8(%rsp), %rax
    00000181: 	subq	%fs:0x28, %rax
    0000018a: 	jne	.Ltmp1960 # Offset: 394
    00000190: 	addq	$0x18, %rsp
    00000194: 	popq	%rbx
    00000195: 	popq	%rbp
    00000196: 	popq	%r12
    00000198: 	popq	%r13
    0000019a: 	popq	%r14
    0000019c: 	popq	%r15
    0000019e: 	retq # Offset: 414
.Ltmp1954:
    0000019f: 	movq	%r14, %rdi
    000001a2: 	movq	%rsp, %rsi
    000001a5: 	xorl	%edx, %edx
    000001a7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 423
    000001ac: 	movq	%rax, (%r14)
    000001af: 	movq	%rax, %rdi
    000001b2: 	movq	(%rsp), %rax
    000001b6: 	movq	%rax, 0x10(%r14)
.Ltmp1963:
    000001ba: 	movq	%r12, %rdx
    000001bd: 	movq	%r15, %rsi
    000001c0: 	callq	memcpy@PLT # Offset: 448
    000001c5: 	movq	(%rsp), %r12
    000001c9: 	movq	(%r14), %rdi
    000001cc: 	jmp	.Ltmp1961 # Offset: 460
.Ltmp1958:
    000001d1: 	movq	0x8(%rsp), %rax
    000001d6: 	subq	%fs:0x28, %rax
    000001df: 	jne	.Ltmp1960 # Offset: 479
    000001e1: 	movq	(%rbp), %rdx
    000001e5: 	addq	$0x18, %rsp
    000001e9: 	leaq	DATAat0x271d0(%rip), %rsi
    000001f0: 	xorl	%eax, %eax
    000001f2: 	popq	%rbx
    000001f3: 	movl	$0x1, %edi
    000001f8: 	popq	%rbp
    000001f9: 	popq	%r12
    000001fb: 	popq	%r13
    000001fd: 	popq	%r14
    000001ff: 	popq	%r15
    00000201: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 513
.Ltmp1951:
    00000206: 	movq	%rbp, %rsi
    00000209: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000210: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 528
    00000215: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000021c: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000223: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000022a: 	jne	.Ltmp1962 # Offset: 554
.Ltmp1956:
    00000230: 	movq	-0x8(%rdx), %rax
    00000234: 	addq	$0x200, %rax
    0000023a: 	jmp	.Ltmp1962 # Offset: 570
.Ltmp1955:
    0000023f: 	testq	%r12, %r12
    00000242: 	je	.Ltmp1961 # Offset: 578
    00000248: 	jmp	.Ltmp1963 # Offset: 584
.Ltmp1960:
    0000024d: 	callq	__stack_chk_fail@PLT # Offset: 589
.Ltmp1953:
    00000252: 	leaq	DATAat0x27008(%rip), %rdi
    00000259: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 601
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_reverse_copyI20BidirectionalPointerIhEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z17test_reverse_copyI20BidirectionalPointerIhEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1(*2)" after disassembly {
  All names   : _Z17test_reverse_copyI20BidirectionalPointerIhEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1
                _Z17test_reverse_copyI20BidirectionalPointerIhEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/reverse_sequence.cpp/1
  Number      : 240
  State       : disassembled
  Address     : 0x19120
  Size        : 0x25e
  MaxSize     : 0x260
  Offset      : 0x19120
  Section     : .text
  Orc Section : .local.text._Z17test_reverse_copyI20BidirectionalPointerIhEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0239:
    00000000: 	pushq	%r15
    00000002: 	movq	%rsi, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%rdx, %r14
    0000000a: 	pushq	%r13
    0000000c: 	movq	%rdx, %r13
    0000000f: 	pushq	%r12
    00000011: 	movq	%rdi, %r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%r8, %rbp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rcx, %rbx
    0000001c: 	subq	$0x18, %rsp
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x8(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	cmpq	%rcx, %rdx
    00000033: 	je	.Ltmp1964 # Offset: 51
    00000035: 	movq	%rcx, %rdx
    00000038: 	movl	$0x63, %esi
    0000003d: 	movq	%r14, %rdi
    00000040: 	subq	%r14, %rdx
    00000043: 	callq	memset@PLT # Offset: 67
.Ltmp1964:
    00000048: 	callq	clock@PLT # Offset: 72
    0000004d: 	movq	%rax, start_time(%rip)
    00000054: 	movl	iterations(%rip), %eax
    0000005a: 	testl	%eax, %eax
    0000005c: 	jle	.Ltmp1965 # Offset: 92
    0000005e: 	cmpq	%r12, %r15
    00000061: 	je	.Ltmp1965 # Offset: 97
    00000063: 	xorl	%esi, %esi
    00000065: 	leaq	-0x1(%r15), %rdi
    00000069: 	nopl	(%rax) # Size: 7
.Ltmp1967:
    00000070: 	movq	%rdi, %rax
    00000073: 	movq	%r14, %rdx
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1966:
    00000080: 	movzbl	(%rax), %ecx
    00000083: 	addq	$0x1, %rdx
    00000087: 	movb	%cl, -0x1(%rdx)
    0000008a: 	movq	%rax, %rcx
    0000008d: 	subq	$0x1, %rax
    00000091: 	cmpq	%rcx, %r12
    00000094: 	jne	.Ltmp1966 # Offset: 148
    00000096: 	addl	$0x1, %esi
    00000099: 	cmpl	iterations(%rip), %esi
    0000009f: 	jl	.Ltmp1967 # Offset: 159
.Ltmp1965:
    000000a1: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000a8: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    000000af: 	subq	$0x20, %rax
    000000b3: 	cmpq	%rax, %r14
    000000b6: 	je	.Ltmp1968 # Offset: 182
    000000bc: 	leaq	0x10(%r14), %rdi
    000000c0: 	movq	0x8(%rbp), %r12
    000000c4: 	movq	%rdi, (%r14)
    000000c7: 	movq	(%rbp), %r15
    000000cb: 	movq	%r15, %rax
    000000ce: 	addq	%r12, %rax
    000000d1: 	je	.Ltmp1969 # Offset: 209
    000000d3: 	testq	%r15, %r15
    000000d6: 	je	.Ltmp1970 # Offset: 214
.Ltmp1969:
    000000dc: 	movq	%r12, (%rsp)
    000000e0: 	cmpq	$0xf, %r12
    000000e4: 	ja	.Ltmp1971 # Offset: 228
    000000ea: 	cmpq	$0x1, %r12
    000000ee: 	jne	.Ltmp1972 # Offset: 238
    000000f4: 	movzbl	(%r15), %eax
    000000f8: 	movb	%al, 0x10(%r14)
.Ltmp1978:
    000000fc: 	movq	%r12, 0x8(%r14)
    00000100: 	movb	$0x0, (%rdi,%r12)
    00000105: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000010c: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000113: 	addq	$0x20, %rax
    00000117: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000011e: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000125: 	je	.Ltmp1973 # Offset: 293
.Ltmp1979:
    0000012b: 	movq	-0x20(%rax), %r12
    0000012f: 	subq	$0x1, %rbx
    00000133: 	callq	clock@PLT # Offset: 307
    00000138: 	pxor	%xmm0, %xmm0
    0000013c: 	movq	%rax, end_time(%rip)
    00000143: 	movq	%r12, %rdi
    00000146: 	subq	start_time(%rip), %rax
    0000014d: 	cvtsi2sd	%rax, %xmm0
    00000152: 	divsd	DATAat0x276b0(%rip), %xmm0
    0000015a: 	callq	_Z13record_resultdPKc # Offset: 346
    0000015f: 	jmp	.Ltmp1974 # Offset: 351
    00000161: 	nopl	(%rax) # Size: 7
.Ltmp1976:
    00000168: 	addq	$0x1, %r13
    0000016c: 	movzbl	(%r13), %eax
    00000171: 	cmpb	%al, -0x1(%r13)
    00000175: 	jb	.Ltmp1975 # Offset: 373
.Ltmp1974:
    00000177: 	cmpq	%rbx, %r13
    0000017a: 	jne	.Ltmp1976 # Offset: 378
    0000017c: 	movq	0x8(%rsp), %rax
    00000181: 	subq	%fs:0x28, %rax
    0000018a: 	jne	.Ltmp1977 # Offset: 394
    00000190: 	addq	$0x18, %rsp
    00000194: 	popq	%rbx
    00000195: 	popq	%rbp
    00000196: 	popq	%r12
    00000198: 	popq	%r13
    0000019a: 	popq	%r14
    0000019c: 	popq	%r15
    0000019e: 	retq # Offset: 414
.Ltmp1971:
    0000019f: 	movq	%r14, %rdi
    000001a2: 	movq	%rsp, %rsi
    000001a5: 	xorl	%edx, %edx
    000001a7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 423
    000001ac: 	movq	%rax, (%r14)
    000001af: 	movq	%rax, %rdi
    000001b2: 	movq	(%rsp), %rax
    000001b6: 	movq	%rax, 0x10(%r14)
.Ltmp1980:
    000001ba: 	movq	%r12, %rdx
    000001bd: 	movq	%r15, %rsi
    000001c0: 	callq	memcpy@PLT # Offset: 448
    000001c5: 	movq	(%rsp), %r12
    000001c9: 	movq	(%r14), %rdi
    000001cc: 	jmp	.Ltmp1978 # Offset: 460
.Ltmp1975:
    000001d1: 	movq	0x8(%rsp), %rax
    000001d6: 	subq	%fs:0x28, %rax
    000001df: 	jne	.Ltmp1977 # Offset: 479
    000001e1: 	movq	(%rbp), %rdx
    000001e5: 	addq	$0x18, %rsp
    000001e9: 	leaq	DATAat0x271d0(%rip), %rsi
    000001f0: 	xorl	%eax, %eax
    000001f2: 	popq	%rbx
    000001f3: 	movl	$0x1, %edi
    000001f8: 	popq	%rbp
    000001f9: 	popq	%r12
    000001fb: 	popq	%r13
    000001fd: 	popq	%r14
    000001ff: 	popq	%r15
    00000201: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 513
.Ltmp1968:
    00000206: 	movq	%rbp, %rsi
    00000209: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000210: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 528
    00000215: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000021c: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000223: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000022a: 	jne	.Ltmp1979 # Offset: 554
.Ltmp1973:
    00000230: 	movq	-0x8(%rdx), %rax
    00000234: 	addq	$0x200, %rax
    0000023a: 	jmp	.Ltmp1979 # Offset: 570
.Ltmp1972:
    0000023f: 	testq	%r12, %r12
    00000242: 	je	.Ltmp1978 # Offset: 578
    00000248: 	jmp	.Ltmp1980 # Offset: 584
.Ltmp1977:
    0000024d: 	callq	__stack_chk_fail@PLT # Offset: 589
.Ltmp1970:
    00000252: 	leaq	DATAat0x27008(%rip), %rdi
    00000259: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 601
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_reverse_copyI20BidirectionalPointerIhEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1(*2)"

Binary Function "_Z17test_reverse_copyIPhPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1(*2)" after disassembly {
  All names   : _Z17test_reverse_copyIPhPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1
                _Z17test_reverse_copyIPhPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/reverse_sequence.cpp/1
  Number      : 241
  State       : disassembled
  Address     : 0x19380
  Size        : 0x253
  MaxSize     : 0x260
  Offset      : 0x19380
  Section     : .text
  Orc Section : .local.text._Z17test_reverse_copyIPhPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0240:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rdi, %r14
    00000007: 	pushq	%r13
    00000009: 	movq	%rsi, %r13
    0000000c: 	pushq	%r12
    0000000e: 	movq	%r8, %r12
    00000011: 	pushq	%rbp
    00000012: 	movq	%rcx, %rbp
    00000015: 	pushq	%rbx
    00000016: 	movq	%rdx, %rbx
    00000019: 	subq	$0x18, %rsp
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	cmpq	%rdx, %rcx
    00000030: 	je	.Ltmp1981 # Offset: 48
    00000032: 	movq	%rcx, %rdx
    00000035: 	movl	$0x63, %esi
    0000003a: 	movq	%rbx, %rdi
    0000003d: 	subq	%rbx, %rdx
    00000040: 	callq	memset@PLT # Offset: 64
.Ltmp1981:
    00000045: 	callq	clock@PLT # Offset: 69
    0000004a: 	movq	%rax, start_time(%rip)
    00000051: 	movl	iterations(%rip), %eax
    00000057: 	testl	%eax, %eax
    00000059: 	jle	.Ltmp1982 # Offset: 89
    0000005b: 	movq	%r13, %rax
    0000005e: 	subq	%r14, %rax
    00000061: 	cmpq	%r13, %r14
    00000064: 	je	.Ltmp1982 # Offset: 100
    00000066: 	testq	%rax, %rax
    00000069: 	jle	.Ltmp1982 # Offset: 105
    0000006b: 	xorl	%edi, %edi
    0000006d: 	leaq	-0x1(%r13), %r8
    00000071: 	leaq	(%rbx,%rax), %rsi
    00000075: 	nopl	(%rax) # Size: 3
.Ltmp1984:
    00000078: 	movq	%r8, %rdx
    0000007b: 	movq	%rbx, %rax
    0000007e: 	nop # Size: 2
.Ltmp1983:
    00000080: 	movzbl	(%rdx), %ecx
    00000083: 	addq	$0x1, %rax
    00000087: 	subq	$0x1, %rdx
    0000008b: 	movb	%cl, -0x1(%rax)
    0000008e: 	cmpq	%rax, %rsi
    00000091: 	jne	.Ltmp1983 # Offset: 145
    00000093: 	addl	$0x1, %edi
    00000096: 	cmpl	iterations(%rip), %edi
    0000009c: 	jl	.Ltmp1984 # Offset: 156
.Ltmp1982:
    0000009e: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000a5: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    000000ac: 	subq	$0x20, %rax
    000000b0: 	cmpq	%rax, %r14
    000000b3: 	je	.Ltmp1985 # Offset: 179
    000000b9: 	leaq	0x10(%r14), %rdi
    000000bd: 	movq	0x8(%r12), %r13
    000000c2: 	movq	%rdi, (%r14)
    000000c5: 	movq	(%r12), %r15
    000000c9: 	movq	%r15, %rax
    000000cc: 	addq	%r13, %rax
    000000cf: 	je	.Ltmp1986 # Offset: 207
    000000d1: 	testq	%r15, %r15
    000000d4: 	je	.Ltmp1987 # Offset: 212
.Ltmp1986:
    000000da: 	movq	%r13, (%rsp)
    000000de: 	cmpq	$0xf, %r13
    000000e2: 	ja	.Ltmp1988 # Offset: 226
    000000e8: 	cmpq	$0x1, %r13
    000000ec: 	jne	.Ltmp1989 # Offset: 236
    000000f2: 	movzbl	(%r15), %eax
    000000f6: 	movb	%al, 0x10(%r14)
.Ltmp1995:
    000000fa: 	movq	%r13, 0x8(%r14)
    000000fe: 	movb	$0x0, (%rdi,%r13)
    00000103: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000010a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000111: 	addq	$0x20, %rax
    00000115: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000011c: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000123: 	je	.Ltmp1990 # Offset: 291
.Ltmp1996:
    00000129: 	movq	-0x20(%rax), %r13
    0000012d: 	subq	$0x1, %rbp
    00000131: 	callq	clock@PLT # Offset: 305
    00000136: 	pxor	%xmm0, %xmm0
    0000013a: 	movq	%rax, end_time(%rip)
    00000141: 	movq	%r13, %rdi
    00000144: 	subq	start_time(%rip), %rax
    0000014b: 	cvtsi2sd	%rax, %xmm0
    00000150: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000158: 	callq	_Z13record_resultdPKc # Offset: 344
    0000015d: 	jmp	.Ltmp1991 # Offset: 349
    0000015f: 	nop # Size: 1
.Ltmp1993:
    00000160: 	addq	$0x1, %rbx
    00000164: 	movzbl	(%rbx), %eax
    00000167: 	cmpb	%al, -0x1(%rbx)
    0000016a: 	jb	.Ltmp1992 # Offset: 362
.Ltmp1991:
    0000016c: 	cmpq	%rbp, %rbx
    0000016f: 	jne	.Ltmp1993 # Offset: 367
    00000171: 	movq	0x8(%rsp), %rax
    00000176: 	subq	%fs:0x28, %rax
    0000017f: 	jne	.Ltmp1994 # Offset: 383
    00000185: 	addq	$0x18, %rsp
    00000189: 	popq	%rbx
    0000018a: 	popq	%rbp
    0000018b: 	popq	%r12
    0000018d: 	popq	%r13
    0000018f: 	popq	%r14
    00000191: 	popq	%r15
    00000193: 	retq # Offset: 403
.Ltmp1988:
    00000194: 	movq	%r14, %rdi
    00000197: 	movq	%rsp, %rsi
    0000019a: 	xorl	%edx, %edx
    0000019c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 412
    000001a1: 	movq	%rax, (%r14)
    000001a4: 	movq	%rax, %rdi
    000001a7: 	movq	(%rsp), %rax
    000001ab: 	movq	%rax, 0x10(%r14)
.Ltmp1997:
    000001af: 	movq	%r13, %rdx
    000001b2: 	movq	%r15, %rsi
    000001b5: 	callq	memcpy@PLT # Offset: 437
    000001ba: 	movq	(%rsp), %r13
    000001be: 	movq	(%r14), %rdi
    000001c1: 	jmp	.Ltmp1995 # Offset: 449
.Ltmp1992:
    000001c6: 	movq	0x8(%rsp), %rax
    000001cb: 	subq	%fs:0x28, %rax
    000001d4: 	jne	.Ltmp1994 # Offset: 468
    000001d6: 	movq	(%r12), %rdx
    000001da: 	addq	$0x18, %rsp
    000001de: 	leaq	DATAat0x271d0(%rip), %rsi
    000001e5: 	xorl	%eax, %eax
    000001e7: 	popq	%rbx
    000001e8: 	movl	$0x1, %edi
    000001ed: 	popq	%rbp
    000001ee: 	popq	%r12
    000001f0: 	popq	%r13
    000001f2: 	popq	%r14
    000001f4: 	popq	%r15
    000001f6: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 502
.Ltmp1985:
    000001fb: 	movq	%r12, %rsi
    000001fe: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000205: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 517
    0000020a: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000211: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000218: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000021f: 	jne	.Ltmp1996 # Offset: 543
.Ltmp1990:
    00000225: 	movq	-0x8(%rdx), %rax
    00000229: 	addq	$0x200, %rax
    0000022f: 	jmp	.Ltmp1996 # Offset: 559
.Ltmp1989:
    00000234: 	testq	%r13, %r13
    00000237: 	je	.Ltmp1995 # Offset: 567
    0000023d: 	jmp	.Ltmp1997 # Offset: 573
.Ltmp1994:
    00000242: 	callq	__stack_chk_fail@PLT # Offset: 578
.Ltmp1987:
    00000247: 	leaq	DATAat0x27008(%rip), %rdi
    0000024e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 590
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_reverse_copyIPhPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1(*2)"

Binary Function "_Z11TestOneTypeIsEvv" after disassembly {
  Number      : 242
  State       : disassembled
  Address     : 0x195e0
  Size        : 0x2440
  MaxSize     : 0x2440
  Offset      : 0x195e0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIsEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0241:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x128, %rsp
    00000015: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm3
    0000001d: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm4
    00000025: 	movq	%fs:0x28, %rax
    0000002e: 	movq	%rax, 0x118(%rsp)
    00000036: 	movl	iterations(%rip), %eax
    0000003c: 	movq	"_ZL7gLabels/1"+56(%rip), %r14
    00000043: 	movl	$0x31746e69, 0xa0(%rsp)
    0000004e: 	movhlps	%xmm3, %xmm5
    00000051: 	movb	$0x74, 0xa6(%rsp)
    00000059: 	movq	%xmm4, %rbp
    0000005e: 	movq	%xmm5, %rbx
    00000063: 	movb	$0x0, 0xa7(%rsp)
    0000006b: 	leaq	0x8(%rbx), %r12
    0000006f: 	movaps	%xmm4, 0x20(%rsp)
    00000074: 	movq	$0x7, 0x98(%rsp)
    00000080: 	movaps	%xmm3, 0x30(%rsp)
    00000085: 	movl	%eax, 0x64(%rsp)
    00000089: 	leaq	0xa0(%rsp), %rax
    00000091: 	movq	%rax, 0x70(%rsp)
    00000096: 	movq	%rax, 0x90(%rsp)
    0000009e: 	movl	$0x5f36, %eax
    000000a3: 	movw	%ax, 0xa4(%rsp)
    000000ab: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000b2: 	movq	%xmm5, 0x40(%rsp)
    000000b8: 	movq	%rax, 0x8(%rsp)
    000000bd: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    000000c4: 	movq	%xmm3, 0x10(%rsp)
    000000ca: 	movq	%rax, 0x18(%rsp)
    000000cf: 	cmpq	%r12, %rax
    000000d2: 	jbe	.Ltmp1998 # Offset: 210
    000000d4: 	movq	%r12, %r13
    000000d7: 	movq	%rax, %r15
    000000da: 	movq	%xmm4, 0x48(%rsp)
.Ltmp2001:
    000000e0: 	movq	(%r13), %rbp
    000000e4: 	leaq	0x200(%rbp), %rbx
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2000:
    000000f0: 	movq	(%rbp), %rdi
    000000f4: 	leaq	0x10(%rbp), %rdx
    000000f8: 	cmpq	%rdx, %rdi
    000000fb: 	je	.Ltmp1999 # Offset: 251
    00000101: 	movq	0x10(%rbp), %rax
    00000105: 	addq	$0x20, %rbp
    00000109: 	leaq	0x1(%rax), %rsi
    0000010d: 	callq	_ZdlPvm@PLT # Offset: 269
    00000112: 	cmpq	%rbp, %rbx
    00000115: 	jne	.Ltmp2000 # Offset: 277
    00000117: 	addq	$0x8, %r13
    0000011b: 	cmpq	%r13, %r15
    0000011e: 	ja	.Ltmp2001 # Offset: 286
.Ltmp2154:
    00000120: 	movq	0x48(%rsp), %rbp
.Ltmp1998:
    00000125: 	movq	0x40(%rsp), %rbx
    0000012a: 	cmpq	%rbx, 0x18(%rsp)
    0000012f: 	jne	.Ltmp2002 # Offset: 303
    00000131: 	jmp	.Ltmp2003 # Offset: 305
    00000136: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2005:
    00000140: 	movq	(%rbp), %rdi
    00000144: 	leaq	0x10(%rbp), %rax
    00000148: 	cmpq	%rax, %rdi
    0000014b: 	je	.Ltmp2004 # Offset: 331
    0000014d: 	movq	0x10(%rbp), %rax
    00000151: 	leaq	0x1(%rax), %rsi
    00000155: 	callq	_ZdlPvm@PLT # Offset: 341
.Ltmp2004:
    0000015a: 	addq	$0x20, %rbp
.Ltmp2002:
    0000015e: 	cmpq	0x10(%rsp), %rbp
    00000163: 	jne	.Ltmp2005 # Offset: 355
    00000165: 	cmpq	%r14, 0x8(%rsp)
    0000016a: 	je	.Ltmp2006 # Offset: 362
.Ltmp2008:
    0000016c: 	movq	(%r14), %rdi
    0000016f: 	leaq	0x10(%r14), %rax
    00000173: 	cmpq	%rax, %rdi
    00000176: 	je	.Ltmp2007 # Offset: 374
    00000178: 	movq	0x10(%r14), %rax
    0000017c: 	leaq	0x1(%rax), %rsi
    00000180: 	callq	_ZdlPvm@PLT # Offset: 384
.Ltmp2007:
    00000185: 	addq	$0x20, %r14
    00000189: 	cmpq	%r14, 0x8(%rsp)
    0000018e: 	jne	.Ltmp2008 # Offset: 398
.Ltmp2006:
    00000190: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    00000197: 	leaq	0x8(%rax), %rbx
    0000019b: 	cmpq	%r12, %rbx
    0000019e: 	jbe	.Ltmp2009 # Offset: 414
.Ltmp2010:
    000001a0: 	movq	(%r12), %rdi
    000001a4: 	movl	$0x200, %esi
    000001a9: 	addq	$0x8, %r12
    000001ad: 	callq	_ZdlPvm@PLT # Offset: 429
    000001b2: 	cmpq	%r12, %rbx
    000001b5: 	ja	.Ltmp2010 # Offset: 437
.Ltmp2009:
    000001b7: 	movdqa	0x20(%rsp), %xmm5
    000001bd: 	movdqa	0x30(%rsp), %xmm6
    000001c3: 	movl	$0x4000000, %edi
    000001c8: 	movaps	%xmm5, "_ZL7gLabels/1"+48(%rip)
    000001cf: 	movaps	%xmm6, "_ZL7gLabels/1"+64(%rip)
    000001d6: 	callq	_Znam@PLT # Offset: 470
    000001db: 	movl	$0x4000000, %edi
    000001e0: 	movq	%rax, %rbp
    000001e3: 	callq	_Znam@PLT # Offset: 483
    000001e8: 	movq	%rax, 0x20(%rsp)
    000001ed: 	movslq	init_value(%rip), %rax
    000001f4: 	leaq	0x4000000(%rbp), %r13
    000001fb: 	pcmpeqd	%xmm4, %xmm4
    000001ff: 	movdqa	DATAat0x27600(%rip), %xmm6
    00000207: 	movdqa	DATAat0x27610(%rip), %xmm5
    0000020f: 	movdqa	DATAat0x275e0(%rip), %xmm8
    00000218: 	leaq	0x2000000(%rax), %rbx
    0000021f: 	addq	$0x1ffffff, %rax
    00000225: 	movq	%rax, %xmm7
    0000022a: 	movq	%rbx, %xmm3
    0000022f: 	movq	%rbp, %rax
    00000232: 	punpcklqdq	%xmm7, %xmm3
    00000236: 	movdqa	DATAat0x275f0(%rip), %xmm7
.Ltmp2011:
    0000023e: 	movdqa	%xmm3, %xmm1
    00000242: 	addq	$0x10, %rax
    00000246: 	paddq	%xmm8, %xmm3
    0000024b: 	movdqa	%xmm1, %xmm0
    0000024f: 	movdqa	%xmm1, %xmm2
    00000253: 	paddq	%xmm7, %xmm2
    00000257: 	paddq	%xmm4, %xmm0
    0000025b: 	shufps	$0x88, %xmm2, %xmm0
    0000025f: 	movdqa	%xmm1, %xmm2
    00000263: 	paddq	%xmm5, %xmm1
    00000267: 	paddq	%xmm6, %xmm2
    0000026b: 	shufps	$0x88, %xmm1, %xmm2
    0000026f: 	movdqa	%xmm0, %xmm1
    00000273: 	punpcklwd	%xmm2, %xmm0
    00000277: 	punpckhwd	%xmm2, %xmm1
    0000027b: 	movdqa	%xmm0, %xmm2
    0000027f: 	punpckhwd	%xmm1, %xmm2
    00000283: 	punpcklwd	%xmm1, %xmm0
    00000287: 	punpcklwd	%xmm2, %xmm0
    0000028b: 	movups	%xmm0, -0x10(%rax)
    0000028f: 	cmpq	%rax, %r13
    00000292: 	jne	.Ltmp2011 # Offset: 658
    00000294: 	movl	$0x32, %edx
    00000299: 	movq	%r13, %rsi
    0000029c: 	movq	%rbp, %rdi
    0000029f: 	movl	$0x2, %ebx
    000002a4: 	callq	"_ZSt16__introsort_loopIPslN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1" # Offset: 676
    000002a9: 	leaq	0x2(%rbp), %rax
    000002ad: 	leaq	0x20(%rbp), %r12
    000002b1: 	movq	%rax, 0x8(%rsp)
    000002b6: 	movq	%rax, %r14
    000002b9: 	jmp	.Ltmp2012 # Offset: 697
.Ltmp2015:
    000002bb: 	cmpq	%r14, %rbp
    000002be: 	je	.Ltmp2013 # Offset: 702
    000002c0: 	movq	%r14, %rdx
    000002c3: 	leaq	(%rbp,%rbx), %rdi
    000002c8: 	movq	%rbp, %rsi
    000002cb: 	subq	%rbp, %rdx
    000002ce: 	callq	memmove@PLT # Offset: 718
.Ltmp2013:
    000002d3: 	addq	$0x2, %r14
    000002d7: 	movw	%r15w, (%rbp)
    000002dc: 	cmpq	%r14, %r12
    000002df: 	je	.Ltmp2014 # Offset: 735
.Ltmp2012:
    000002e1: 	movzwl	(%r14), %r15d
    000002e5: 	cmpw	(%rbp), %r15w
    000002ea: 	jl	.Ltmp2015 # Offset: 746
    000002ec: 	movzwl	-0x2(%r14), %edx
    000002f1: 	leaq	-0x2(%r14), %rax
    000002f5: 	cmpw	%dx, %r15w
    000002f9: 	jge	.Ltmp2016 # Offset: 761
    000002ff: 	nop # Size: 1
.Ltmp2017:
    00000300: 	movw	%dx, 0x2(%rax)
    00000304: 	movq	%rax, %rcx
    00000307: 	movzwl	-0x2(%rax), %edx
    0000030b: 	subq	$0x2, %rax
    0000030f: 	cmpw	%dx, %r15w
    00000313: 	jl	.Ltmp2017 # Offset: 787
.Ltmp2191:
    00000315: 	addq	$0x2, %r14
    00000319: 	movw	%r15w, (%rcx)
    0000031d: 	cmpq	%r14, %r12
    00000320: 	jne	.Ltmp2012 # Offset: 800
.Ltmp2014:
    00000322: 	movzwl	(%r12), %ecx
    00000327: 	movzwl	-0x2(%r12), %edx
    0000032d: 	leaq	-0x2(%r12), %rax
    00000332: 	cmpw	%dx, %cx
    00000335: 	jge	.Ltmp2018 # Offset: 821
    0000033b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2019:
    00000340: 	movw	%dx, 0x2(%rax)
    00000344: 	movq	%rax, %rsi
    00000347: 	movzwl	-0x2(%rax), %edx
    0000034b: 	subq	$0x2, %rax
    0000034f: 	cmpw	%dx, %cx
    00000352: 	jl	.Ltmp2019 # Offset: 850
    00000354: 	addq	$0x2, %r12
    00000358: 	movw	%cx, (%rsi)
    0000035b: 	cmpq	%r12, %r13
    0000035e: 	jne	.Ltmp2014 # Offset: 862
.Ltmp2175:
    00000360: 	leaq	0x90(%rsp), %rax
    00000368: 	leaq	0xf0(%rsp), %r12
    00000370: 	leaq	DATAat0x27268(%rip), %r13
    00000377: 	leaq	0x3e80(%rbp), %rbx
    0000037e: 	movq	%rax, %rsi
    00000381: 	movq	%r12, %rdi
    00000384: 	movq	%r13, %rdx
    00000387: 	movq	%rbx, 0x48(%rsp)
    0000038c: 	movq	%rax, 0x18(%rsp)
    00000391: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 913
    00000396: 	movq	%r12, %rcx
    00000399: 	leaq	_ZSt7reverseI20BidirectionalPointerIsEEvT_S2_(%rip), %rdx
    000003a0: 	movq	%rbx, %rsi
    000003a3: 	movq	%rbp, %rdi
    000003a6: 	callq	_Z12test_reverseI20BidirectionalPointerIsEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 934
    000003ab: 	movq	0xf0(%rsp), %rdi
    000003b3: 	leaq	0x100(%rsp), %r15
    000003bb: 	cmpq	%r15, %rdi
    000003be: 	je	.Ltmp2020 # Offset: 958
    000003c0: 	movq	0x100(%rsp), %rax
    000003c8: 	leaq	0x1(%rax), %rsi
    000003cc: 	callq	_ZdlPvm@PLT # Offset: 972
.Ltmp2020:
    000003d1: 	movq	0x18(%rsp), %rsi
    000003d6: 	leaq	DATAat0x27284(%rip), %rdx
    000003dd: 	movq	%r12, %rdi
    000003e0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 992
    000003e5: 	movq	0x48(%rsp), %rsi
    000003ea: 	movq	%r12, %rcx
    000003ed: 	leaq	_Z17my_simple_reverseI20BidirectionalPointerIsEEvT_S2_(%rip), %rdx
    000003f4: 	movq	%rbp, %rdi
    000003f7: 	callq	_Z12test_reverseI20BidirectionalPointerIsEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1015
    000003fc: 	movq	0xf0(%rsp), %rdi
    00000404: 	cmpq	%r15, %rdi
    00000407: 	je	.Ltmp2021 # Offset: 1031
    00000409: 	movq	0x100(%rsp), %rax
    00000411: 	leaq	0x1(%rax), %rsi
    00000415: 	callq	_ZdlPvm@PLT # Offset: 1045
.Ltmp2021:
    0000041a: 	movq	0x18(%rsp), %rsi
    0000041f: 	leaq	DATAat0x272a2(%rip), %rdx
    00000426: 	movq	%r12, %rdi
    00000429: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1065
    0000042e: 	movq	0x48(%rsp), %rsi
    00000433: 	movq	%r12, %rcx
    00000436: 	leaq	_Z15my_fast_reverseI20BidirectionalPointerIsEEvT_S2_(%rip), %rdx
    0000043d: 	movq	%rbp, %rdi
    00000440: 	callq	_Z12test_reverseI20BidirectionalPointerIsEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1088
    00000445: 	movq	0xf0(%rsp), %rdi
    0000044d: 	cmpq	%r15, %rdi
    00000450: 	je	.Ltmp2022 # Offset: 1104
    00000452: 	movq	0x100(%rsp), %rax
    0000045a: 	leaq	0x1(%rax), %rsi
    0000045e: 	callq	_ZdlPvm@PLT # Offset: 1118
.Ltmp2022:
    00000463: 	movq	0x18(%rsp), %rsi
    00000468: 	leaq	DATAat0x272be(%rip), %rdx
    0000046f: 	movq	%r12, %rdi
    00000472: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1138
    00000477: 	movq	0x48(%rsp), %rsi
    0000047c: 	movq	%r12, %rcx
    0000047f: 	leaq	_ZSt7reverseIPsEvT_S1_(%rip), %rdx
    00000486: 	movq	%rbp, %rdi
    00000489: 	callq	_Z12test_reverseIPsPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1161
    0000048e: 	movq	0xf0(%rsp), %rdi
    00000496: 	cmpq	%r15, %rdi
    00000499: 	je	.Ltmp2023 # Offset: 1177
    0000049b: 	movq	0x100(%rsp), %rax
    000004a3: 	leaq	0x1(%rax), %rsi
    000004a7: 	callq	_ZdlPvm@PLT # Offset: 1191
.Ltmp2023:
    000004ac: 	movq	0x18(%rsp), %rsi
    000004b1: 	leaq	DATAat0x272da(%rip), %rdx
    000004b8: 	movq	%r12, %rdi
    000004bb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1211
    000004c0: 	movq	0x48(%rsp), %rsi
    000004c5: 	movq	%r12, %rcx
    000004c8: 	leaq	_Z17my_simple_reverseIPsEvT_S1_(%rip), %rdx
    000004cf: 	movq	%rbp, %rdi
    000004d2: 	callq	_Z12test_reverseIPsPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1234
    000004d7: 	movq	0xf0(%rsp), %rdi
    000004df: 	cmpq	%r15, %rdi
    000004e2: 	je	.Ltmp2024 # Offset: 1250
    000004e4: 	movq	0x100(%rsp), %rax
    000004ec: 	leaq	0x1(%rax), %rsi
    000004f0: 	callq	_ZdlPvm@PLT # Offset: 1264
.Ltmp2024:
    000004f5: 	movq	0x18(%rsp), %rsi
    000004fa: 	leaq	DATAat0x272f8(%rip), %rdx
    00000501: 	movq	%r12, %rdi
    00000504: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1284
    00000509: 	movq	0x48(%rsp), %rsi
    0000050e: 	movq	%r12, %rcx
    00000511: 	leaq	_Z15my_fast_reverseIPsEvT_S1_(%rip), %rdx
    00000518: 	movq	%rbp, %rdi
    0000051b: 	callq	_Z12test_reverseIPsPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1307
    00000520: 	movq	0xf0(%rsp), %rdi
    00000528: 	cmpq	%r15, %rdi
    0000052b: 	je	.Ltmp2025 # Offset: 1323
    0000052d: 	movq	0x100(%rsp), %rax
    00000535: 	leaq	0x1(%rax), %rsi
    00000539: 	callq	_ZdlPvm@PLT # Offset: 1337
.Ltmp2025:
    0000053e: 	movq	0x18(%rsp), %rsi
    00000543: 	leaq	DATAat0x27314(%rip), %rdx
    0000054a: 	movq	%r12, %rdi
    0000054d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1357
    00000552: 	movq	0x48(%rsp), %rsi
    00000557: 	movq	%r12, %rcx
    0000055a: 	leaq	_Z13fast_reverse2IPsEvT_S1_(%rip), %rdx
    00000561: 	movq	%rbp, %rdi
    00000564: 	callq	_Z12test_reverseIPsPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1380
    00000569: 	movq	0xf0(%rsp), %rdi
    00000571: 	cmpq	%r15, %rdi
    00000574: 	je	.Ltmp2026 # Offset: 1396
    00000576: 	movq	0x100(%rsp), %rax
    0000057e: 	leaq	0x1(%rax), %rsi
    00000582: 	callq	_ZdlPvm@PLT # Offset: 1410
.Ltmp2026:
    00000587: 	movq	0x18(%rsp), %rsi
    0000058c: 	leaq	DATAat0x27331(%rip), %rdx
    00000593: 	movq	%r12, %rdi
    00000596: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1430
    0000059b: 	movq	0x48(%rsp), %rsi
    000005a0: 	movq	%r12, %rcx
    000005a3: 	leaq	_Z13fast_reverse3IPsEvT_S1_(%rip), %rdx
    000005aa: 	movq	%rbp, %rdi
    000005ad: 	callq	_Z12test_reverseIPsPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1453
    000005b2: 	movq	0xf0(%rsp), %rdi
    000005ba: 	cmpq	%r15, %rdi
    000005bd: 	je	.Ltmp2027 # Offset: 1469
    000005bf: 	movq	0x100(%rsp), %rax
    000005c7: 	leaq	0x1(%rax), %rsi
    000005cb: 	callq	_ZdlPvm@PLT # Offset: 1483
.Ltmp2027:
    000005d0: 	movq	0x18(%rsp), %rsi
    000005d5: 	leaq	DATAat0x2734e(%rip), %rdx
    000005dc: 	movq	%r12, %rdi
    000005df: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1503
    000005e4: 	movq	0x48(%rsp), %rsi
    000005e9: 	movq	%r12, %rcx
    000005ec: 	leaq	_Z13fast_reverse4IPsEvT_S1_(%rip), %rdx
    000005f3: 	movq	%rbp, %rdi
    000005f6: 	callq	_Z12test_reverseIPsPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1526
    000005fb: 	movq	0xf0(%rsp), %rdi
    00000603: 	cmpq	%r15, %rdi
    00000606: 	je	.Ltmp2028 # Offset: 1542
    00000608: 	movq	0x100(%rsp), %rax
    00000610: 	leaq	0x1(%rax), %rsi
    00000614: 	callq	_ZdlPvm@PLT # Offset: 1556
.Ltmp2028:
    00000619: 	movq	0x18(%rsp), %r14
    0000061e: 	leaq	0xb0(%rsp), %rdi
    00000626: 	leaq	DATAat0x2736b(%rip), %rdx
    0000062d: 	movq	%r14, %rsi
    00000630: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1584
    00000635: 	movl	iterations(%rip), %edx
    0000063b: 	xorl	%r8d, %r8d
    0000063e: 	xorl	%ecx, %ecx
    00000640: 	movl	$0x1f40, %esi
    00000645: 	movq	0xb0(%rsp), %rdi
    0000064d: 	callq	_Z9summarizePKciiii # Offset: 1613
    00000652: 	movl	0x64(%rsp), %ebx
    00000656: 	movq	%r13, %rdx
    00000659: 	movq	%r14, %rsi
    0000065c: 	testl	%ebx, %ebx
    0000065e: 	leal	0x3fff(%rbx), %eax
    00000664: 	cmovnsl	%ebx, %eax
    00000667: 	sarl	$0xe, %eax
    0000066a: 	movl	%eax, 0x7c(%rsp)
    0000066e: 	movl	%eax, iterations(%rip)
    00000674: 	leaq	0xd0(%rsp), %rax
    0000067c: 	movq	%rax, %rdi
    0000067f: 	movq	%rax, 0x68(%rsp)
    00000684: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1668
    00000689: 	movl	iterations(%rip), %ebx
    0000068f: 	leaq	DATAat0x271e0(%rip), %rsi
    00000696: 	movl	$0x1, %edi
    0000069b: 	xorl	%eax, %eax
    0000069d: 	movl	%ebx, 0x58(%rsp)
    000006a1: 	callq	__printf_chk@PLT # Offset: 1697
    000006a6: 	leaq	DATAat0x27210(%rip), %rsi
    000006ad: 	movl	$0x1, %edi
    000006b2: 	xorl	%eax, %eax
    000006b4: 	callq	__printf_chk@PLT # Offset: 1716
    000006b9: 	movslq	%ebx, %rax
    000006bc: 	movl	$0x0, 0x30(%rsp)
    000006c4: 	movq	%rax, 0x50(%rsp)
    000006c9: 	movl	$0x4, 0x10(%rsp)
    000006d1: 	nopl	(%rax) # Size: 7
.Ltmp2048:
    000006d8: 	movl	0x10(%rsp), %ebx
    000006dc: 	movl	$0x2000000, %eax
    000006e1: 	movq	0xd0(%rsp), %r14
    000006e9: 	movq	%r15, 0xf0(%rsp)
    000006f1: 	cltd
    000006f2: 	movq	0xd8(%rsp), %r13
    000006fa: 	idivl	%ebx
    000006fc: 	movl	$0x4, %edx
    00000701: 	cltq
    00000703: 	imulq	0x50(%rsp), %rax
    00000709: 	cmpq	%rdx, %rax
    0000070c: 	cmovlq	%rdx, %rax
    00000710: 	movl	$0x70000000, %edx
    00000715: 	cmpq	%rdx, %rax
    00000718: 	cmovgq	%rdx, %rax
    0000071c: 	addq	$0x1, %rax
    00000720: 	andq	$-0x2, %rax
    00000724: 	movl	%eax, iterations(%rip)
    0000072a: 	movslq	%ebx, %rax
    0000072d: 	leaq	(%rbp,%rax,2), %rbx
    00000732: 	movq	%r14, %rax
    00000735: 	addq	%r13, %rax
    00000738: 	je	.Ltmp2029 # Offset: 1848
    0000073a: 	testq	%r14, %r14
    0000073d: 	je	.Ltmp2030 # Offset: 1853
.Ltmp2029:
    00000743: 	movq	%r13, 0x88(%rsp)
    0000074b: 	cmpq	$0xf, %r13
    0000074f: 	ja	.Ltmp2031 # Offset: 1871
    00000755: 	cmpq	$0x1, %r13
    00000759: 	jne	.Ltmp2032 # Offset: 1881
    0000075f: 	movzbl	(%r14), %eax
    00000763: 	movb	%al, 0x100(%rsp)
    0000076a: 	movq	%r15, %rax
.Ltmp2156:
    0000076d: 	movq	%r13, 0xf8(%rsp)
    00000775: 	movb	$0x0, (%rax,%r13)
    0000077a: 	callq	clock@PLT # Offset: 1914
    0000077f: 	movl	iterations(%rip), %r8d
    00000786: 	movq	%rax, start_time(%rip)
    0000078d: 	testl	%r8d, %r8d
    00000790: 	jle	.Ltmp2033 # Offset: 1936
    00000792: 	leaq	-0x2(%rbx), %r9
    00000796: 	cmpq	%r9, %rbp
    00000799: 	je	.Ltmp2033 # Offset: 1945
    0000079b: 	xorl	%edi, %edi
    0000079d: 	nopl	(%rax) # Size: 3
.Ltmp2037:
    000007a0: 	movq	%r9, %rdx
    000007a3: 	movq	%rbp, %rax
    000007a6: 	jmp	.Ltmp2034 # Offset: 1958
    000007a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2036:
    000007b0: 	subq	$0x2, %rdx
    000007b4: 	cmpq	%rdx, %rax
    000007b7: 	je	.Ltmp2035 # Offset: 1975
.Ltmp2034:
    000007b9: 	movzwl	(%rdx), %esi
    000007bc: 	movzwl	(%rax), %ecx
    000007bf: 	addq	$0x2, %rax
    000007c3: 	movw	%si, -0x2(%rax)
    000007c7: 	movw	%cx, (%rdx)
    000007ca: 	cmpq	%rdx, %rax
    000007cd: 	jne	.Ltmp2036 # Offset: 1997
.Ltmp2035:
    000007cf: 	addl	$0x1, %edi
    000007d2: 	cmpl	%r8d, %edi
    000007d5: 	jne	.Ltmp2037 # Offset: 2005
.Ltmp2033:
    000007d7: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000007de: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    000007e5: 	subq	$0x20, %rax
    000007e9: 	cmpq	%rax, %r14
    000007ec: 	je	.Ltmp2038 # Offset: 2028
    000007f2: 	leaq	0x10(%r14), %rdi
    000007f6: 	movq	0xf8(%rsp), %r13
    000007fe: 	movq	%rdi, (%r14)
    00000801: 	movq	0xf0(%rsp), %rax
    00000809: 	movq	%rax, %rcx
    0000080c: 	movq	%rax, 0x40(%rsp)
    00000811: 	addq	%r13, %rcx
    00000814: 	je	.Ltmp2039 # Offset: 2068
    00000816: 	testq	%rax, %rax
    00000819: 	je	.Ltmp2040 # Offset: 2073
.Ltmp2039:
    0000081f: 	movq	%r13, 0x88(%rsp)
    00000827: 	cmpq	$0xf, %r13
    0000082b: 	ja	.Ltmp2041 # Offset: 2091
    00000831: 	cmpq	$0x1, %r13
    00000835: 	jne	.Ltmp2042 # Offset: 2101
    0000083b: 	movq	0x40(%rsp), %rax
    00000840: 	movzbl	(%rax), %eax
    00000843: 	movb	%al, 0x10(%r14)
.Ltmp2171:
    00000847: 	movq	%r13, 0x8(%r14)
    0000084b: 	movb	$0x0, (%rdi,%r13)
    00000850: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000857: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000085e: 	addq	$0x20, %rax
    00000862: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000869: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000870: 	je	.Ltmp2043 # Offset: 2160
.Ltmp2164:
    00000876: 	movq	-0x20(%rax), %r13
    0000087a: 	callq	clock@PLT # Offset: 2170
    0000087f: 	pxor	%xmm0, %xmm0
    00000883: 	movq	%rax, end_time(%rip)
    0000088a: 	movq	%r13, %rdi
    0000088d: 	subq	start_time(%rip), %rax
    00000894: 	cvtsi2sd	%rax, %xmm0
    00000899: 	divsd	DATAat0x276b0(%rip), %xmm0
    000008a1: 	callq	_Z13record_resultdPKc # Offset: 2209
    000008a6: 	movq	0x8(%rsp), %rax
    000008ab: 	jmp	.Ltmp2044 # Offset: 2219
    000008ad: 	nopl	(%rax) # Size: 3
.Ltmp2046:
    000008b0: 	addq	$0x2, %rax
    000008b4: 	movzwl	-0x4(%rax), %edi
    000008b8: 	cmpw	%di, (%rdx)
    000008bb: 	jl	.Ltmp2045 # Offset: 2235
.Ltmp2044:
    000008c1: 	movq	%rax, %rdx
    000008c4: 	cmpq	%rax, %rbx
    000008c7: 	jne	.Ltmp2046 # Offset: 2247
.Ltmp2162:
    000008c9: 	movq	0xf0(%rsp), %rdi
    000008d1: 	cmpq	%r15, %rdi
    000008d4: 	je	.Ltmp2047 # Offset: 2260
    000008d6: 	movq	0x100(%rsp), %rax
    000008de: 	leaq	0x1(%rax), %rsi
    000008e2: 	callq	_ZdlPvm@PLT # Offset: 2274
.Ltmp2047:
    000008e7: 	movl	0x10(%rsp), %ebx
    000008eb: 	pxor	%xmm1, %xmm1
    000008ef: 	pxor	%xmm2, %xmm2
    000008f3: 	movq	results(%rip), %rax
    000008fa: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000902: 	movl	0x30(%rsp), %r14d
    00000907: 	movq	0xd0(%rsp), %rcx
    0000090f: 	leaq	DATAat0x27240(%rip), %rsi
    00000916: 	cvtsi2sd	%ebx, %xmm2
    0000091a: 	movsd	(%rax), %xmm0
    0000091e: 	movl	%ebx, %r8d
    00000921: 	movl	$0x1, %edi
    00000926: 	movl	%r14d, %edx
    00000929: 	movl	$0x2, %eax
    0000092e: 	mulsd	%xmm2, %xmm1
    00000932: 	divsd	DATAat0x276b0(%rip), %xmm1
    0000093a: 	divsd	%xmm0, %xmm1
    0000093e: 	callq	__printf_chk@PLT # Offset: 2366
    00000943: 	movl	$0x0, current_test(%rip)
    0000094d: 	addl	%ebx, %ebx
    0000094f: 	addl	$0x1, %r14d
    00000953: 	movl	%ebx, 0x10(%rsp)
    00000957: 	movl	%r14d, 0x30(%rsp)
    0000095c: 	cmpl	$0x18, %r14d
    00000960: 	jne	.Ltmp2048 # Offset: 2400
    00000966: 	movl	0x58(%rsp), %eax
    0000096a: 	movq	0xd0(%rsp), %rdi
    00000972: 	movl	%eax, iterations(%rip)
    00000978: 	leaq	0xe0(%rsp), %rax
    00000980: 	movq	%rax, 0x58(%rsp)
    00000985: 	cmpq	%rax, %rdi
    00000988: 	je	.Ltmp2049 # Offset: 2440
    0000098a: 	movq	0xe0(%rsp), %rax
    00000992: 	leaq	0x1(%rax), %rsi
    00000996: 	callq	_ZdlPvm@PLT # Offset: 2454
.Ltmp2049:
    0000099b: 	movq	0x18(%rsp), %rsi
    000009a0: 	movq	0x68(%rsp), %rdi
    000009a5: 	leaq	DATAat0x27284(%rip), %rdx
    000009ac: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2476
    000009b1: 	movl	iterations(%rip), %ebx
    000009b7: 	leaq	DATAat0x271e0(%rip), %rsi
    000009be: 	movl	$0x1, %edi
    000009c3: 	xorl	%eax, %eax
    000009c5: 	movl	%ebx, 0x78(%rsp)
    000009c9: 	callq	__printf_chk@PLT # Offset: 2505
    000009ce: 	leaq	DATAat0x27210(%rip), %rsi
    000009d5: 	movl	$0x1, %edi
    000009da: 	xorl	%eax, %eax
    000009dc: 	callq	__printf_chk@PLT # Offset: 2524
    000009e1: 	movslq	%ebx, %rax
    000009e4: 	movl	$0x0, 0x30(%rsp)
    000009ec: 	movq	%rax, 0x50(%rsp)
    000009f1: 	movl	$0x4, 0x10(%rsp)
    000009f9: 	nopl	(%rax) # Size: 7
.Ltmp2068:
    00000a00: 	movl	0x10(%rsp), %ebx
    00000a04: 	movl	$0x2000000, %eax
    00000a09: 	movq	0xd0(%rsp), %r14
    00000a11: 	movq	%r15, 0xf0(%rsp)
    00000a19: 	cltd
    00000a1a: 	movq	0xd8(%rsp), %r13
    00000a22: 	idivl	%ebx
    00000a24: 	movl	$0x4, %edx
    00000a29: 	cltq
    00000a2b: 	imulq	0x50(%rsp), %rax
    00000a31: 	cmpq	%rdx, %rax
    00000a34: 	cmovlq	%rdx, %rax
    00000a38: 	movl	$0x70000000, %edx
    00000a3d: 	cmpq	%rdx, %rax
    00000a40: 	cmovgq	%rdx, %rax
    00000a44: 	addq	$0x1, %rax
    00000a48: 	andq	$-0x2, %rax
    00000a4c: 	movl	%eax, iterations(%rip)
    00000a52: 	movslq	%ebx, %rax
    00000a55: 	leaq	(%rbp,%rax,2), %rbx
    00000a5a: 	movq	%r14, %rax
    00000a5d: 	addq	%r13, %rax
    00000a60: 	je	.Ltmp2050 # Offset: 2656
    00000a62: 	testq	%r14, %r14
    00000a65: 	je	.Ltmp2051 # Offset: 2661
.Ltmp2050:
    00000a6b: 	movq	%r13, 0x88(%rsp)
    00000a73: 	cmpq	$0xf, %r13
    00000a77: 	ja	.Ltmp2052 # Offset: 2679
    00000a7d: 	cmpq	$0x1, %r13
    00000a81: 	jne	.Ltmp2053 # Offset: 2689
    00000a87: 	movzbl	(%r14), %eax
    00000a8b: 	movb	%al, 0x100(%rsp)
    00000a92: 	movq	%r15, %rax
.Ltmp2158:
    00000a95: 	movq	%r13, 0xf8(%rsp)
    00000a9d: 	movb	$0x0, (%rax,%r13)
    00000aa2: 	callq	clock@PLT # Offset: 2722
    00000aa7: 	movl	iterations(%rip), %r8d
    00000aae: 	xorl	%edi, %edi
    00000ab0: 	movq	%rax, start_time(%rip)
    00000ab7: 	testl	%r8d, %r8d
    00000aba: 	jle	.Ltmp2054 # Offset: 2746
    00000abc: 	nopl	(%rax) # Size: 4
.Ltmp2057:
    00000ac0: 	movq	%rbp, %rdx
    00000ac3: 	movq	%rbx, %rax
    00000ac6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2056:
    00000ad0: 	subq	$0x2, %rax
    00000ad4: 	cmpq	%rdx, %rax
    00000ad7: 	je	.Ltmp2055 # Offset: 2775
    00000ad9: 	movzwl	(%rax), %esi
    00000adc: 	movzwl	(%rdx), %ecx
    00000adf: 	addq	$0x2, %rdx
    00000ae3: 	movw	%si, -0x2(%rdx)
    00000ae7: 	movw	%cx, (%rax)
    00000aea: 	cmpq	%rdx, %rax
    00000aed: 	jne	.Ltmp2056 # Offset: 2797
.Ltmp2055:
    00000aef: 	addl	$0x1, %edi
    00000af2: 	cmpl	%r8d, %edi
    00000af5: 	jne	.Ltmp2057 # Offset: 2805
.Ltmp2054:
    00000af7: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000afe: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    00000b05: 	subq	$0x20, %rax
    00000b09: 	cmpq	%rax, %r14
    00000b0c: 	je	.Ltmp2058 # Offset: 2828
    00000b12: 	leaq	0x10(%r14), %rdi
    00000b16: 	movq	0xf8(%rsp), %r13
    00000b1e: 	movq	%rdi, (%r14)
    00000b21: 	movq	0xf0(%rsp), %rax
    00000b29: 	movq	%rax, %rcx
    00000b2c: 	movq	%rax, 0x40(%rsp)
    00000b31: 	addq	%r13, %rcx
    00000b34: 	je	.Ltmp2059 # Offset: 2868
    00000b36: 	testq	%rax, %rax
    00000b39: 	je	.Ltmp2060 # Offset: 2873
.Ltmp2059:
    00000b3f: 	movq	%r13, 0x88(%rsp)
    00000b47: 	cmpq	$0xf, %r13
    00000b4b: 	ja	.Ltmp2061 # Offset: 2891
    00000b51: 	cmpq	$0x1, %r13
    00000b55: 	jne	.Ltmp2062 # Offset: 2901
    00000b5b: 	movq	0x40(%rsp), %rax
    00000b60: 	movzbl	(%rax), %eax
    00000b63: 	movb	%al, 0x10(%r14)
.Ltmp2172:
    00000b67: 	movq	%r13, 0x8(%r14)
    00000b6b: 	movb	$0x0, (%rdi,%r13)
    00000b70: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000b77: 	addq	$0x20, %rax
    00000b7b: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp2167:
    00000b82: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000b89: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000b90: 	je	.Ltmp2063 # Offset: 2960
.Ltmp2165:
    00000b96: 	movq	-0x20(%rax), %r13
    00000b9a: 	callq	clock@PLT # Offset: 2970
    00000b9f: 	pxor	%xmm0, %xmm0
    00000ba3: 	movq	%rax, end_time(%rip)
    00000baa: 	movq	%r13, %rdi
    00000bad: 	subq	start_time(%rip), %rax
    00000bb4: 	cvtsi2sd	%rax, %xmm0
    00000bb9: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000bc1: 	callq	_Z13record_resultdPKc # Offset: 3009
    00000bc6: 	movq	0x8(%rsp), %rax
    00000bcb: 	jmp	.Ltmp2064 # Offset: 3019
    00000bcd: 	nopl	(%rax) # Size: 3
.Ltmp2066:
    00000bd0: 	addq	$0x2, %rax
    00000bd4: 	movzwl	-0x4(%rax), %edi
    00000bd8: 	cmpw	%di, (%rdx)
    00000bdb: 	jl	.Ltmp2065 # Offset: 3035
.Ltmp2064:
    00000be1: 	movq	%rax, %rdx
    00000be4: 	cmpq	%rax, %rbx
    00000be7: 	jne	.Ltmp2066 # Offset: 3047
.Ltmp2159:
    00000be9: 	movq	0xf0(%rsp), %rdi
    00000bf1: 	cmpq	%r15, %rdi
    00000bf4: 	je	.Ltmp2067 # Offset: 3060
    00000bf6: 	movq	0x100(%rsp), %rax
    00000bfe: 	leaq	0x1(%rax), %rsi
    00000c02: 	callq	_ZdlPvm@PLT # Offset: 3074
.Ltmp2067:
    00000c07: 	movl	0x10(%rsp), %ebx
    00000c0b: 	pxor	%xmm1, %xmm1
    00000c0f: 	pxor	%xmm2, %xmm2
    00000c13: 	movq	results(%rip), %rax
    00000c1a: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000c22: 	movl	0x30(%rsp), %r14d
    00000c27: 	movq	0xd0(%rsp), %rcx
    00000c2f: 	leaq	DATAat0x27240(%rip), %rsi
    00000c36: 	cvtsi2sd	%ebx, %xmm2
    00000c3a: 	movsd	(%rax), %xmm0
    00000c3e: 	movl	%ebx, %r8d
    00000c41: 	movl	$0x1, %edi
    00000c46: 	movl	%r14d, %edx
    00000c49: 	movl	$0x2, %eax
    00000c4e: 	mulsd	%xmm2, %xmm1
    00000c52: 	divsd	DATAat0x276b0(%rip), %xmm1
    00000c5a: 	divsd	%xmm0, %xmm1
    00000c5e: 	callq	__printf_chk@PLT # Offset: 3166
    00000c63: 	movl	$0x0, current_test(%rip)
    00000c6d: 	addl	%ebx, %ebx
    00000c6f: 	addl	$0x1, %r14d
    00000c73: 	movl	%ebx, 0x10(%rsp)
    00000c77: 	movl	%r14d, 0x30(%rsp)
    00000c7c: 	cmpl	$0x18, %r14d
    00000c80: 	jne	.Ltmp2068 # Offset: 3200
    00000c86: 	movl	0x78(%rsp), %eax
    00000c8a: 	movq	0xd0(%rsp), %rdi
    00000c92: 	movl	%eax, iterations(%rip)
    00000c98: 	cmpq	0x58(%rsp), %rdi
    00000c9d: 	je	.Ltmp2069 # Offset: 3229
    00000c9f: 	movq	0xe0(%rsp), %rax
    00000ca7: 	leaq	0x1(%rax), %rsi
    00000cab: 	callq	_ZdlPvm@PLT # Offset: 3243
.Ltmp2069:
    00000cb0: 	movq	0x18(%rsp), %rsi
    00000cb5: 	movq	0x68(%rsp), %rdi
    00000cba: 	leaq	DATAat0x272a2(%rip), %rdx
    00000cc1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3265
    00000cc6: 	movl	iterations(%rip), %ebx
    00000ccc: 	leaq	DATAat0x271e0(%rip), %rsi
    00000cd3: 	movl	$0x1, %edi
    00000cd8: 	xorl	%eax, %eax
    00000cda: 	movl	%ebx, 0x78(%rsp)
    00000cde: 	callq	__printf_chk@PLT # Offset: 3294
    00000ce3: 	leaq	DATAat0x27210(%rip), %rsi
    00000cea: 	movl	$0x1, %edi
    00000cef: 	xorl	%eax, %eax
    00000cf1: 	callq	__printf_chk@PLT # Offset: 3313
    00000cf6: 	movslq	%ebx, %rax
    00000cf9: 	movl	$0x0, 0x30(%rsp)
    00000d01: 	movq	%rax, 0x50(%rsp)
    00000d06: 	movl	$0x4, 0x10(%rsp)
    00000d0e: 	nop # Size: 2
.Ltmp2088:
    00000d10: 	movl	0x10(%rsp), %ebx
    00000d14: 	movl	$0x2000000, %eax
    00000d19: 	movq	0xd0(%rsp), %r14
    00000d21: 	movq	%r15, 0xf0(%rsp)
    00000d29: 	cltd
    00000d2a: 	movq	0xd8(%rsp), %r13
    00000d32: 	idivl	%ebx
    00000d34: 	movl	$0x4, %edx
    00000d39: 	cltq
    00000d3b: 	imulq	0x50(%rsp), %rax
    00000d41: 	cmpq	%rdx, %rax
    00000d44: 	cmovlq	%rdx, %rax
    00000d48: 	movl	$0x70000000, %edx
    00000d4d: 	cmpq	%rdx, %rax
    00000d50: 	cmovgq	%rdx, %rax
    00000d54: 	addq	$0x1, %rax
    00000d58: 	andq	$-0x2, %rax
    00000d5c: 	movl	%eax, iterations(%rip)
    00000d62: 	movslq	%ebx, %rax
    00000d65: 	leaq	(%rbp,%rax,2), %rbx
    00000d6a: 	movq	%r14, %rax
    00000d6d: 	addq	%r13, %rax
    00000d70: 	je	.Ltmp2070 # Offset: 3440
    00000d72: 	testq	%r14, %r14
    00000d75: 	je	.Ltmp2071 # Offset: 3445
.Ltmp2070:
    00000d7b: 	movq	%r13, 0x88(%rsp)
    00000d83: 	cmpq	$0xf, %r13
    00000d87: 	ja	.Ltmp2072 # Offset: 3463
    00000d8d: 	cmpq	$0x1, %r13
    00000d91: 	jne	.Ltmp2073 # Offset: 3473
    00000d97: 	movzbl	(%r14), %eax
    00000d9b: 	movb	%al, 0x100(%rsp)
    00000da2: 	movq	%r15, %rax
.Ltmp2161:
    00000da5: 	movq	%r13, 0xf8(%rsp)
    00000dad: 	movb	$0x0, (%rax,%r13)
    00000db2: 	callq	clock@PLT # Offset: 3506
    00000db7: 	movl	iterations(%rip), %r8d
    00000dbe: 	xorl	%edi, %edi
    00000dc0: 	movq	%rax, start_time(%rip)
    00000dc7: 	testl	%r8d, %r8d
    00000dca: 	jle	.Ltmp2074 # Offset: 3530
    00000dcc: 	nopl	(%rax) # Size: 4
.Ltmp2077:
    00000dd0: 	movq	%rbp, %rdx
    00000dd3: 	movq	%rbx, %rax
    00000dd6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2076:
    00000de0: 	subq	$0x2, %rax
    00000de4: 	cmpq	%rdx, %rax
    00000de7: 	je	.Ltmp2075 # Offset: 3559
    00000de9: 	movzwl	(%rax), %esi
    00000dec: 	movzwl	(%rdx), %ecx
    00000def: 	addq	$0x2, %rdx
    00000df3: 	movw	%si, -0x2(%rdx)
    00000df7: 	movw	%cx, (%rax)
    00000dfa: 	cmpq	%rdx, %rax
    00000dfd: 	jne	.Ltmp2076 # Offset: 3581
.Ltmp2075:
    00000dff: 	addl	$0x1, %edi
    00000e02: 	cmpl	%r8d, %edi
    00000e05: 	jne	.Ltmp2077 # Offset: 3589
.Ltmp2074:
    00000e07: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000e0e: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    00000e15: 	subq	$0x20, %rax
    00000e19: 	cmpq	%rax, %r14
    00000e1c: 	je	.Ltmp2078 # Offset: 3612
    00000e22: 	leaq	0x10(%r14), %rdi
    00000e26: 	movq	0xf8(%rsp), %r13
    00000e2e: 	movq	%rdi, (%r14)
    00000e31: 	movq	0xf0(%rsp), %rax
    00000e39: 	movq	%rax, %rcx
    00000e3c: 	movq	%rax, 0x40(%rsp)
    00000e41: 	addq	%r13, %rcx
    00000e44: 	je	.Ltmp2079 # Offset: 3652
    00000e46: 	testq	%rax, %rax
    00000e49: 	je	.Ltmp2080 # Offset: 3657
.Ltmp2079:
    00000e4f: 	movq	%r13, 0x88(%rsp)
    00000e57: 	cmpq	$0xf, %r13
    00000e5b: 	ja	.Ltmp2081 # Offset: 3675
    00000e61: 	cmpq	$0x1, %r13
    00000e65: 	jne	.Ltmp2082 # Offset: 3685
    00000e6b: 	movq	0x40(%rsp), %rax
    00000e70: 	movzbl	(%rax), %eax
    00000e73: 	movb	%al, 0x10(%r14)
.Ltmp2169:
    00000e77: 	movq	%r13, 0x8(%r14)
    00000e7b: 	movb	$0x0, (%rdi,%r13)
    00000e80: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000e87: 	addq	$0x20, %rax
    00000e8b: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp2168:
    00000e92: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000e99: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000ea0: 	je	.Ltmp2083 # Offset: 3744
.Ltmp2166:
    00000ea6: 	movq	-0x20(%rax), %r13
    00000eaa: 	callq	clock@PLT # Offset: 3754
    00000eaf: 	pxor	%xmm0, %xmm0
    00000eb3: 	movq	%rax, end_time(%rip)
    00000eba: 	movq	%r13, %rdi
    00000ebd: 	subq	start_time(%rip), %rax
    00000ec4: 	cvtsi2sd	%rax, %xmm0
    00000ec9: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000ed1: 	callq	_Z13record_resultdPKc # Offset: 3793
    00000ed6: 	movq	0x8(%rsp), %rax
    00000edb: 	jmp	.Ltmp2084 # Offset: 3803
    00000edd: 	nopl	(%rax) # Size: 3
.Ltmp2086:
    00000ee0: 	addq	$0x2, %rax
    00000ee4: 	movzwl	-0x4(%rax), %edi
    00000ee8: 	cmpw	%di, (%rdx)
    00000eeb: 	jl	.Ltmp2085 # Offset: 3819
.Ltmp2084:
    00000ef1: 	movq	%rax, %rdx
    00000ef4: 	cmpq	%rax, %rbx
    00000ef7: 	jne	.Ltmp2086 # Offset: 3831
.Ltmp2163:
    00000ef9: 	movq	0xf0(%rsp), %rdi
    00000f01: 	cmpq	%r15, %rdi
    00000f04: 	je	.Ltmp2087 # Offset: 3844
    00000f06: 	movq	0x100(%rsp), %rax
    00000f0e: 	leaq	0x1(%rax), %rsi
    00000f12: 	callq	_ZdlPvm@PLT # Offset: 3858
.Ltmp2087:
    00000f17: 	movl	0x10(%rsp), %ebx
    00000f1b: 	pxor	%xmm1, %xmm1
    00000f1f: 	pxor	%xmm2, %xmm2
    00000f23: 	movq	results(%rip), %rax
    00000f2a: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000f32: 	movl	0x30(%rsp), %r14d
    00000f37: 	movq	0xd0(%rsp), %rcx
    00000f3f: 	leaq	DATAat0x27240(%rip), %rsi
    00000f46: 	cvtsi2sd	%ebx, %xmm2
    00000f4a: 	movsd	(%rax), %xmm0
    00000f4e: 	movl	%ebx, %r8d
    00000f51: 	movl	$0x1, %edi
    00000f56: 	movl	%r14d, %edx
    00000f59: 	movl	$0x2, %eax
    00000f5e: 	mulsd	%xmm2, %xmm1
    00000f62: 	divsd	DATAat0x276b0(%rip), %xmm1
    00000f6a: 	divsd	%xmm0, %xmm1
    00000f6e: 	callq	__printf_chk@PLT # Offset: 3950
    00000f73: 	movl	$0x0, current_test(%rip)
    00000f7d: 	addl	%ebx, %ebx
    00000f7f: 	addl	$0x1, %r14d
    00000f83: 	movl	%ebx, 0x10(%rsp)
    00000f87: 	movl	%r14d, 0x30(%rsp)
    00000f8c: 	cmpl	$0x18, %r14d
    00000f90: 	jne	.Ltmp2088 # Offset: 3984
    00000f96: 	movl	0x78(%rsp), %eax
    00000f9a: 	movq	0xd0(%rsp), %rdi
    00000fa2: 	movl	%eax, iterations(%rip)
    00000fa8: 	cmpq	0x58(%rsp), %rdi
    00000fad: 	je	.Ltmp2089 # Offset: 4013
    00000faf: 	movq	0xe0(%rsp), %rax
    00000fb7: 	leaq	0x1(%rax), %rsi
    00000fbb: 	callq	_ZdlPvm@PLT # Offset: 4027
.Ltmp2089:
    00000fc0: 	movq	0x18(%rsp), %rsi
    00000fc5: 	leaq	DATAat0x272be(%rip), %rdx
    00000fcc: 	movq	%r12, %rdi
    00000fcf: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4047
    00000fd4: 	movq	%r12, %rcx
    00000fd7: 	leaq	_ZSt7reverseIPsEvT_S1_(%rip), %rdx
    00000fde: 	movl	$0x2000000, %esi
    00000fe3: 	movq	%rbp, %rdi
    00000fe6: 	callq	_Z18test_reverse_sizesIPsPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4070
    00000feb: 	movq	0xf0(%rsp), %rdi
    00000ff3: 	cmpq	%r15, %rdi
    00000ff6: 	je	.Ltmp2090 # Offset: 4086
    00000ff8: 	movq	0x100(%rsp), %rax
    00001000: 	leaq	0x1(%rax), %rsi
    00001004: 	callq	_ZdlPvm@PLT # Offset: 4100
.Ltmp2090:
    00001009: 	movq	0x18(%rsp), %rsi
    0000100e: 	leaq	DATAat0x272da(%rip), %rdx
    00001015: 	movq	%r12, %rdi
    00001018: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4120
    0000101d: 	movq	%r12, %rcx
    00001020: 	leaq	_Z17my_simple_reverseIPsEvT_S1_(%rip), %rdx
    00001027: 	movl	$0x2000000, %esi
    0000102c: 	movq	%rbp, %rdi
    0000102f: 	callq	_Z18test_reverse_sizesIPsPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4143
    00001034: 	movq	0xf0(%rsp), %rdi
    0000103c: 	cmpq	%r15, %rdi
    0000103f: 	je	.Ltmp2091 # Offset: 4159
    00001041: 	movq	0x100(%rsp), %rax
    00001049: 	leaq	0x1(%rax), %rsi
    0000104d: 	callq	_ZdlPvm@PLT # Offset: 4173
.Ltmp2091:
    00001052: 	movq	0x18(%rsp), %rsi
    00001057: 	leaq	DATAat0x272f8(%rip), %rdx
    0000105e: 	movq	%r12, %rdi
    00001061: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4193
    00001066: 	movq	%r12, %rcx
    00001069: 	leaq	_Z15my_fast_reverseIPsEvT_S1_(%rip), %rdx
    00001070: 	movl	$0x2000000, %esi
    00001075: 	movq	%rbp, %rdi
    00001078: 	callq	_Z18test_reverse_sizesIPsPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4216
    0000107d: 	movq	0xf0(%rsp), %rdi
    00001085: 	cmpq	%r15, %rdi
    00001088: 	je	.Ltmp2092 # Offset: 4232
    0000108a: 	movq	0x100(%rsp), %rax
    00001092: 	leaq	0x1(%rax), %rsi
    00001096: 	callq	_ZdlPvm@PLT # Offset: 4246
.Ltmp2092:
    0000109b: 	movq	0x18(%rsp), %rsi
    000010a0: 	leaq	DATAat0x27314(%rip), %rdx
    000010a7: 	movq	%r12, %rdi
    000010aa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4266
    000010af: 	movq	%r12, %rcx
    000010b2: 	leaq	_Z13fast_reverse2IPsEvT_S1_(%rip), %rdx
    000010b9: 	movl	$0x2000000, %esi
    000010be: 	movq	%rbp, %rdi
    000010c1: 	callq	_Z18test_reverse_sizesIPsPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4289
    000010c6: 	movq	0xf0(%rsp), %rdi
    000010ce: 	cmpq	%r15, %rdi
    000010d1: 	je	.Ltmp2093 # Offset: 4305
    000010d3: 	movq	0x100(%rsp), %rax
    000010db: 	leaq	0x1(%rax), %rsi
    000010df: 	callq	_ZdlPvm@PLT # Offset: 4319
.Ltmp2093:
    000010e4: 	movq	0x18(%rsp), %rsi
    000010e9: 	leaq	DATAat0x27331(%rip), %rdx
    000010f0: 	movq	%r12, %rdi
    000010f3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4339
    000010f8: 	movq	%r12, %rcx
    000010fb: 	leaq	_Z13fast_reverse3IPsEvT_S1_(%rip), %rdx
    00001102: 	movl	$0x2000000, %esi
    00001107: 	movq	%rbp, %rdi
    0000110a: 	callq	_Z18test_reverse_sizesIPsPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4362
    0000110f: 	movq	0xf0(%rsp), %rdi
    00001117: 	cmpq	%r15, %rdi
    0000111a: 	je	.Ltmp2094 # Offset: 4378
    0000111c: 	movq	0x100(%rsp), %rax
    00001124: 	leaq	0x1(%rax), %rsi
    00001128: 	callq	_ZdlPvm@PLT # Offset: 4392
.Ltmp2094:
    0000112d: 	movq	0x18(%rsp), %rsi
    00001132: 	leaq	DATAat0x2734e(%rip), %rdx
    00001139: 	movq	%r12, %rdi
    0000113c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4412
    00001141: 	movq	%r12, %rcx
    00001144: 	leaq	_Z13fast_reverse4IPsEvT_S1_(%rip), %rdx
    0000114b: 	movl	$0x2000000, %esi
    00001150: 	movq	%rbp, %rdi
    00001153: 	callq	_Z18test_reverse_sizesIPsPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4435
    00001158: 	movq	0xf0(%rsp), %rdi
    00001160: 	cmpq	%r15, %rdi
    00001163: 	je	.Ltmp2095 # Offset: 4451
    00001165: 	movq	0x100(%rsp), %rax
    0000116d: 	leaq	0x1(%rax), %rsi
    00001171: 	callq	_ZdlPvm@PLT # Offset: 4465
.Ltmp2095:
    00001176: 	movl	0x64(%rsp), %eax
    0000117a: 	movq	0x18(%rsp), %rsi
    0000117f: 	leaq	DATAat0x27388(%rip), %rdx
    00001186: 	movq	%r12, %rdi
    00001189: 	movl	%eax, iterations(%rip)
    0000118f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4495
    00001194: 	movq	0x20(%rsp), %rax
    00001199: 	leaq	0x3e80(%rax), %r13
.Ltmp2096:
    000011a0: 	movdqa	DATAat0x275b0(%rip), %xmm4
    000011a8: 	addq	$0x10, %rax
    000011ac: 	movups	%xmm4, -0x10(%rax)
    000011b0: 	cmpq	%rax, %r13
    000011b3: 	jne	.Ltmp2096 # Offset: 4531
    000011b5: 	callq	clock@PLT # Offset: 4533
    000011ba: 	movl	iterations(%rip), %edi
    000011c0: 	xorl	%esi, %esi
    000011c2: 	movq	0x20(%rsp), %r8
    000011c7: 	movq	%rax, start_time(%rip)
    000011ce: 	leaq	0x3e78(%rbp), %rdx
    000011d5: 	testl	%edi, %edi
    000011d7: 	jle	.Ltmp2097 # Offset: 4567
    000011d9: 	nopl	(%rax) # Size: 7
.Ltmp2099:
    000011e0: 	movq	%rdx, %rcx
    000011e3: 	movq	%r8, %rax
    000011e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2098:
    000011f0: 	movq	(%rcx), %xmm0
    000011f4: 	addq	$0x8, %rax
    000011f8: 	subq	$0x8, %rcx
    000011fc: 	pshuflw	$0x1b, %xmm0, %xmm0
    00001201: 	movq	%xmm0, -0x8(%rax)
    00001206: 	cmpq	%rax, %r13
    00001209: 	jne	.Ltmp2098 # Offset: 4617
    0000120b: 	addl	$0x1, %esi
    0000120e: 	cmpl	%edi, %esi
    00001210: 	jne	.Ltmp2099 # Offset: 4624
.Ltmp2097:
    00001212: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001219: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00001220: 	subq	$0x20, %rax
    00001224: 	cmpq	%rax, %rdi
    00001227: 	je	.Ltmp2100 # Offset: 4647
    0000122d: 	leaq	0x10(%rdi), %rax
    00001231: 	movq	0xf8(%rsp), %rdx
    00001239: 	movq	%rax, (%rdi)
    0000123c: 	movq	0xf0(%rsp), %rsi
    00001244: 	addq	%rsi, %rdx
    00001247: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 4679
    0000124c: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001253: 	addq	$0x20, %rax
    00001257: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp2190:
    0000125e: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001265: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000126c: 	je	.Ltmp2101 # Offset: 4716
.Ltmp2189:
    00001272: 	movq	-0x20(%rax), %r14
    00001276: 	callq	clock@PLT # Offset: 4726
    0000127b: 	pxor	%xmm0, %xmm0
    0000127f: 	movq	%rax, end_time(%rip)
    00001286: 	movq	%r14, %rdi
    00001289: 	subq	start_time(%rip), %rax
    00001290: 	cvtsi2sd	%rax, %xmm0
    00001295: 	divsd	DATAat0x276b0(%rip), %xmm0
    0000129d: 	callq	_Z13record_resultdPKc # Offset: 4765
    000012a2: 	movq	0x20(%rsp), %rax
    000012a7: 	leaq	0x3e7e(%rax), %rbx
    000012ae: 	jmp	.Ltmp2102 # Offset: 4782
.Ltmp2104:
    000012b0: 	addq	$0x2, %rax
    000012b4: 	movzwl	(%rax), %edi
    000012b7: 	cmpw	%di, -0x2(%rax)
    000012bb: 	jl	.Ltmp2103 # Offset: 4795
.Ltmp2102:
    000012c1: 	cmpq	%rbx, %rax
    000012c4: 	jne	.Ltmp2104 # Offset: 4804
.Ltmp2188:
    000012c6: 	movq	0xf0(%rsp), %rdi
    000012ce: 	cmpq	%r15, %rdi
    000012d1: 	je	.Ltmp2105 # Offset: 4817
    000012d3: 	movq	0x100(%rsp), %rax
    000012db: 	leaq	0x1(%rax), %rsi
    000012df: 	callq	_ZdlPvm@PLT # Offset: 4831
.Ltmp2105:
    000012e4: 	movq	0x18(%rsp), %rsi
    000012e9: 	leaq	DATAat0x273b0(%rip), %rdx
    000012f0: 	movq	%r12, %rdi
    000012f3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4851
    000012f8: 	movq	0x20(%rsp), %rax
.Ltmp2106:
    000012fd: 	movdqa	DATAat0x275b0(%rip), %xmm5
    00001305: 	addq	$0x10, %rax
    00001309: 	movups	%xmm5, -0x10(%rax)
    0000130d: 	cmpq	%r13, %rax
    00001310: 	jne	.Ltmp2106 # Offset: 4880
    00001312: 	callq	clock@PLT # Offset: 4882
    00001317: 	movl	iterations(%rip), %edi
    0000131d: 	xorl	%esi, %esi
    0000131f: 	movq	0x20(%rsp), %r8
    00001324: 	movq	%rax, start_time(%rip)
    0000132b: 	leaq	0x3e78(%rbp), %rdx
    00001332: 	testl	%edi, %edi
    00001334: 	jle	.Ltmp2107 # Offset: 4916
    00001336: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2109:
    00001340: 	movq	%rdx, %rcx
    00001343: 	movq	%r8, %rax
    00001346: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2108:
    00001350: 	movq	(%rcx), %xmm0
    00001354: 	addq	$0x8, %rax
    00001358: 	subq	$0x8, %rcx
    0000135c: 	pshuflw	$0x1b, %xmm0, %xmm0
    00001361: 	movq	%xmm0, -0x8(%rax)
    00001366: 	cmpq	%r13, %rax
    00001369: 	jne	.Ltmp2108 # Offset: 4969
    0000136b: 	addl	$0x1, %esi
    0000136e: 	cmpl	%edi, %esi
    00001370: 	jne	.Ltmp2109 # Offset: 4976
.Ltmp2107:
    00001372: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001379: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00001380: 	subq	$0x20, %rax
    00001384: 	cmpq	%rax, %rdi
    00001387: 	je	.Ltmp2110 # Offset: 4999
    0000138d: 	leaq	0x10(%rdi), %rax
    00001391: 	movq	0xf8(%rsp), %rdx
    00001399: 	movq	%rax, (%rdi)
    0000139c: 	movq	0xf0(%rsp), %rsi
    000013a4: 	addq	%rsi, %rdx
    000013a7: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 5031
    000013ac: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000013b3: 	addq	$0x20, %rax
    000013b7: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp2187:
    000013be: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000013c5: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000013cc: 	je	.Ltmp2111 # Offset: 5068
.Ltmp2186:
    000013d2: 	movq	-0x20(%rax), %r14
    000013d6: 	callq	clock@PLT # Offset: 5078
    000013db: 	pxor	%xmm0, %xmm0
    000013df: 	movq	%rax, end_time(%rip)
    000013e6: 	movq	%r14, %rdi
    000013e9: 	subq	start_time(%rip), %rax
    000013f0: 	cvtsi2sd	%rax, %xmm0
    000013f5: 	divsd	DATAat0x276b0(%rip), %xmm0
    000013fd: 	callq	_Z13record_resultdPKc # Offset: 5117
    00001402: 	movq	0x20(%rsp), %rax
    00001407: 	jmp	.Ltmp2112 # Offset: 5127
    00001409: 	nopl	(%rax) # Size: 7
.Ltmp2114:
    00001410: 	addq	$0x2, %rax
    00001414: 	movzwl	(%rax), %edi
    00001417: 	cmpw	%di, -0x2(%rax)
    0000141b: 	jl	.Ltmp2113 # Offset: 5147
.Ltmp2112:
    00001421: 	cmpq	%rbx, %rax
    00001424: 	jne	.Ltmp2114 # Offset: 5156
.Ltmp2185:
    00001426: 	movq	0xf0(%rsp), %rdi
    0000142e: 	cmpq	%r15, %rdi
    00001431: 	je	.Ltmp2115 # Offset: 5169
    00001433: 	movq	0x100(%rsp), %rax
    0000143b: 	leaq	0x1(%rax), %rsi
    0000143f: 	callq	_ZdlPvm@PLT # Offset: 5183
.Ltmp2115:
    00001444: 	movq	0x18(%rsp), %rsi
    00001449: 	leaq	DATAat0x273d8(%rip), %rdx
    00001450: 	movq	%r12, %rdi
    00001453: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5203
    00001458: 	movq	0x20(%rsp), %rax
.Ltmp2116:
    0000145d: 	movdqa	DATAat0x275b0(%rip), %xmm6
    00001465: 	addq	$0x10, %rax
    00001469: 	movups	%xmm6, -0x10(%rax)
    0000146d: 	cmpq	%r13, %rax
    00001470: 	jne	.Ltmp2116 # Offset: 5232
    00001472: 	callq	clock@PLT # Offset: 5234
    00001477: 	movl	iterations(%rip), %edi
    0000147d: 	xorl	%esi, %esi
    0000147f: 	movq	0x20(%rsp), %r8
    00001484: 	movq	%rax, start_time(%rip)
    0000148b: 	leaq	0x3e78(%rbp), %rdx
    00001492: 	testl	%edi, %edi
    00001494: 	jle	.Ltmp2117 # Offset: 5268
    00001496: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2119:
    000014a0: 	movq	%rdx, %rcx
    000014a3: 	movq	%r8, %rax
    000014a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2118:
    000014b0: 	movq	(%rcx), %xmm0
    000014b4: 	addq	$0x8, %rax
    000014b8: 	subq	$0x8, %rcx
    000014bc: 	pshuflw	$0x1b, %xmm0, %xmm0
    000014c1: 	movq	%xmm0, -0x8(%rax)
    000014c6: 	cmpq	%r13, %rax
    000014c9: 	jne	.Ltmp2118 # Offset: 5321
    000014cb: 	addl	$0x1, %esi
    000014ce: 	cmpl	%edi, %esi
    000014d0: 	jne	.Ltmp2119 # Offset: 5328
.Ltmp2117:
    000014d2: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000014d9: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    000014e0: 	subq	$0x20, %rax
    000014e4: 	cmpq	%rax, %rdi
    000014e7: 	je	.Ltmp2120 # Offset: 5351
    000014ed: 	leaq	0x10(%rdi), %rax
    000014f1: 	movq	0xf8(%rsp), %rdx
    000014f9: 	movq	%rax, (%rdi)
    000014fc: 	movq	0xf0(%rsp), %rsi
    00001504: 	addq	%rsi, %rdx
    00001507: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 5383
    0000150c: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001513: 	addq	$0x20, %rax
    00001517: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp2184:
    0000151e: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001525: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000152c: 	je	.Ltmp2121 # Offset: 5420
.Ltmp2183:
    00001532: 	movq	-0x20(%rax), %r14
    00001536: 	callq	clock@PLT # Offset: 5430
    0000153b: 	pxor	%xmm0, %xmm0
    0000153f: 	movq	%rax, end_time(%rip)
    00001546: 	movq	%r14, %rdi
    00001549: 	subq	start_time(%rip), %rax
    00001550: 	cvtsi2sd	%rax, %xmm0
    00001555: 	divsd	DATAat0x276b0(%rip), %xmm0
    0000155d: 	callq	_Z13record_resultdPKc # Offset: 5469
    00001562: 	movq	0x20(%rsp), %rax
    00001567: 	jmp	.Ltmp2122 # Offset: 5479
    00001569: 	nopl	(%rax) # Size: 7
.Ltmp2124:
    00001570: 	addq	$0x2, %rax
    00001574: 	movzwl	(%rax), %edi
    00001577: 	cmpw	%di, -0x2(%rax)
    0000157b: 	jl	.Ltmp2123 # Offset: 5499
.Ltmp2122:
    00001581: 	cmpq	%rbx, %rax
    00001584: 	jne	.Ltmp2124 # Offset: 5508
.Ltmp2182:
    00001586: 	movq	0xf0(%rsp), %rdi
    0000158e: 	cmpq	%r15, %rdi
    00001591: 	je	.Ltmp2125 # Offset: 5521
    00001593: 	movq	0x100(%rsp), %rax
    0000159b: 	leaq	0x1(%rax), %rsi
    0000159f: 	callq	_ZdlPvm@PLT # Offset: 5535
.Ltmp2125:
    000015a4: 	movq	0x18(%rsp), %rsi
    000015a9: 	leaq	DATAat0x27400(%rip), %rdx
    000015b0: 	movq	%r12, %rdi
    000015b3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5555
    000015b8: 	movq	0x20(%rsp), %rax
.Ltmp2126:
    000015bd: 	movdqa	DATAat0x275b0(%rip), %xmm7
    000015c5: 	addq	$0x10, %rax
    000015c9: 	movups	%xmm7, -0x10(%rax)
    000015cd: 	cmpq	%r13, %rax
    000015d0: 	jne	.Ltmp2126 # Offset: 5584
    000015d2: 	callq	clock@PLT # Offset: 5586
    000015d7: 	movl	iterations(%rip), %edi
    000015dd: 	xorl	%esi, %esi
    000015df: 	movq	0x20(%rsp), %r8
    000015e4: 	movq	%rax, start_time(%rip)
    000015eb: 	leaq	0x3e78(%rbp), %rdx
    000015f2: 	testl	%edi, %edi
    000015f4: 	jle	.Ltmp2127 # Offset: 5620
    000015f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2129:
    00001600: 	movq	%rdx, %rcx
    00001603: 	movq	%r8, %rax
    00001606: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2128:
    00001610: 	movq	(%rcx), %xmm0
    00001614: 	addq	$0x8, %rax
    00001618: 	subq	$0x8, %rcx
    0000161c: 	pshuflw	$0x1b, %xmm0, %xmm0
    00001621: 	movq	%xmm0, -0x8(%rax)
    00001626: 	cmpq	%r13, %rax
    00001629: 	jne	.Ltmp2128 # Offset: 5673
    0000162b: 	addl	$0x1, %esi
    0000162e: 	cmpl	%edi, %esi
    00001630: 	jne	.Ltmp2129 # Offset: 5680
.Ltmp2127:
    00001632: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001639: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00001640: 	subq	$0x20, %rax
    00001644: 	cmpq	%rax, %rdi
    00001647: 	je	.Ltmp2130 # Offset: 5703
    0000164d: 	leaq	0x10(%rdi), %rax
    00001651: 	movq	0xf8(%rsp), %rdx
    00001659: 	movq	%rax, (%rdi)
    0000165c: 	movq	0xf0(%rsp), %rsi
    00001664: 	addq	%rsi, %rdx
    00001667: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 5735
    0000166c: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001673: 	addq	$0x20, %rax
    00001677: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp2181:
    0000167e: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001685: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000168c: 	je	.Ltmp2131 # Offset: 5772
.Ltmp2180:
    00001692: 	movq	-0x20(%rax), %r14
    00001696: 	callq	clock@PLT # Offset: 5782
    0000169b: 	pxor	%xmm0, %xmm0
    0000169f: 	movq	%rax, end_time(%rip)
    000016a6: 	movq	%r14, %rdi
    000016a9: 	subq	start_time(%rip), %rax
    000016b0: 	cvtsi2sd	%rax, %xmm0
    000016b5: 	divsd	DATAat0x276b0(%rip), %xmm0
    000016bd: 	callq	_Z13record_resultdPKc # Offset: 5821
    000016c2: 	movq	0x20(%rsp), %rax
    000016c7: 	jmp	.Ltmp2132 # Offset: 5831
    000016c9: 	nopl	(%rax) # Size: 7
.Ltmp2134:
    000016d0: 	addq	$0x2, %rax
    000016d4: 	movzwl	(%rax), %edi
    000016d7: 	cmpw	%di, -0x2(%rax)
    000016db: 	jl	.Ltmp2133 # Offset: 5851
.Ltmp2132:
    000016e1: 	cmpq	%rbx, %rax
    000016e4: 	jne	.Ltmp2134 # Offset: 5860
.Ltmp2179:
    000016e6: 	movq	0xf0(%rsp), %rdi
    000016ee: 	cmpq	%r15, %rdi
    000016f1: 	je	.Ltmp2135 # Offset: 5873
    000016f3: 	movq	0x100(%rsp), %rax
    000016fb: 	leaq	0x1(%rax), %rsi
    000016ff: 	callq	_ZdlPvm@PLT # Offset: 5887
.Ltmp2135:
    00001704: 	leaq	DATAat0x27428(%rip), %r14
    0000170b: 	movq	0x18(%rsp), %rsi
    00001710: 	movq	%r12, %rdi
    00001713: 	movq	%r14, %rdx
    00001716: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5910
    0000171b: 	movq	0x20(%rsp), %rdx
    00001720: 	movq	0x48(%rsp), %rsi
    00001725: 	movq	%r12, %r9
    00001728: 	movq	%r13, %rcx
    0000172b: 	leaq	_Z22my_simple_reverse_copyIPsS0_EvT_S1_T0_(%rip), %r8
    00001732: 	movq	%rbp, %rdi
    00001735: 	callq	_Z17test_reverse_copyIPsPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5941
    0000173a: 	movq	0xf0(%rsp), %rdi
    00001742: 	cmpq	%r15, %rdi
    00001745: 	je	.Ltmp2136 # Offset: 5957
    00001747: 	movq	0x100(%rsp), %rax
    0000174f: 	leaq	0x1(%rax), %rsi
    00001753: 	callq	_ZdlPvm@PLT # Offset: 5971
.Ltmp2136:
    00001758: 	movq	0x18(%rsp), %rsi
    0000175d: 	leaq	DATAat0x27450(%rip), %rdx
    00001764: 	movq	%r12, %rdi
    00001767: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5991
    0000176c: 	movq	0x20(%rsp), %rdx
    00001771: 	movq	0x48(%rsp), %rsi
    00001776: 	movq	%r12, %r9
    00001779: 	movq	%r13, %rcx
    0000177c: 	leaq	_Z20my_fast_reverse_copyIPsS0_EvT_S1_T0_(%rip), %r8
    00001783: 	movq	%rbp, %rdi
    00001786: 	callq	_Z17test_reverse_copyIPsPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6022
    0000178b: 	movq	0xf0(%rsp), %rdi
    00001793: 	cmpq	%r15, %rdi
    00001796: 	je	.Ltmp2137 # Offset: 6038
    00001798: 	movq	0x100(%rsp), %rax
    000017a0: 	leaq	0x1(%rax), %rsi
    000017a4: 	callq	_ZdlPvm@PLT # Offset: 6052
.Ltmp2137:
    000017a9: 	leaq	DATAat0x27478(%rip), %rbx
    000017b0: 	movq	0x18(%rsp), %rsi
    000017b5: 	movq	%r12, %rdi
    000017b8: 	movq	%rbx, %rdx
    000017bb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6075
    000017c0: 	movq	0x20(%rsp), %rdx
    000017c5: 	movq	0x48(%rsp), %rsi
    000017ca: 	movq	%r12, %r9
    000017cd: 	movq	%r13, %rcx
    000017d0: 	leaq	_Z18fast_reverse_copy2IPsS0_EvT_S1_T0_(%rip), %r8
    000017d7: 	movq	%rbp, %rdi
    000017da: 	callq	_Z17test_reverse_copyIPsPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6106
    000017df: 	movq	0xf0(%rsp), %rdi
    000017e7: 	cmpq	%r15, %rdi
    000017ea: 	je	.Ltmp2138 # Offset: 6122
    000017ec: 	movq	0x100(%rsp), %rax
    000017f4: 	leaq	0x1(%rax), %rsi
    000017f8: 	callq	_ZdlPvm@PLT # Offset: 6136
.Ltmp2138:
    000017fd: 	movq	0x18(%rsp), %rsi
    00001802: 	leaq	DATAat0x274a0(%rip), %rdx
    00001809: 	movq	%r12, %rdi
    0000180c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6156
    00001811: 	movq	0x20(%rsp), %rdx
    00001816: 	movq	0x48(%rsp), %rsi
    0000181b: 	movq	%r12, %r9
    0000181e: 	movq	%r13, %rcx
    00001821: 	leaq	_Z18fast_reverse_copy3IPsS0_EvT_S1_T0_(%rip), %r8
    00001828: 	movq	%rbp, %rdi
    0000182b: 	callq	_Z17test_reverse_copyIPsPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6187
    00001830: 	movq	0xf0(%rsp), %rdi
    00001838: 	cmpq	%r15, %rdi
    0000183b: 	je	.Ltmp2139 # Offset: 6203
    0000183d: 	movq	0x100(%rsp), %rax
    00001845: 	leaq	0x1(%rax), %rsi
    00001849: 	callq	_ZdlPvm@PLT # Offset: 6217
.Ltmp2139:
    0000184e: 	movq	0x18(%rsp), %rsi
    00001853: 	leaq	DATAat0x274c8(%rip), %rdx
    0000185a: 	movq	%r12, %rdi
    0000185d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6237
    00001862: 	movq	0x20(%rsp), %rdx
    00001867: 	movq	0x48(%rsp), %rsi
    0000186c: 	movq	%r12, %r9
    0000186f: 	movq	%r13, %rcx
    00001872: 	leaq	_Z18fast_reverse_copy4IPsS0_EvT_S1_T0_(%rip), %r8
    00001879: 	movq	%rbp, %rdi
    0000187c: 	callq	_Z17test_reverse_copyIPsPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6268
    00001881: 	movq	0xf0(%rsp), %rdi
    00001889: 	cmpq	%r15, %rdi
    0000188c: 	je	.Ltmp2140 # Offset: 6284
    0000188e: 	movq	0x100(%rsp), %rax
    00001896: 	leaq	0x1(%rax), %rsi
    0000189a: 	callq	_ZdlPvm@PLT # Offset: 6298
.Ltmp2140:
    0000189f: 	movq	0x18(%rsp), %r13
    000018a4: 	movq	0x68(%rsp), %rdi
    000018a9: 	leaq	DATAat0x27374(%rip), %rdx
    000018b0: 	movq	%r13, %rsi
    000018b3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6323
    000018b8: 	movl	iterations(%rip), %edx
    000018be: 	xorl	%r8d, %r8d
    000018c1: 	xorl	%ecx, %ecx
    000018c3: 	movl	$0x1f40, %esi
    000018c8: 	movq	0xd0(%rsp), %rdi
    000018d0: 	callq	_Z9summarizePKciiii # Offset: 6352
    000018d5: 	movl	0x7c(%rsp), %eax
    000018d9: 	leaq	DATAat0x27388(%rip), %rdx
    000018e0: 	movq	%r13, %rsi
    000018e3: 	movq	%r12, %rdi
    000018e6: 	movl	%eax, iterations(%rip)
    000018ec: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6380
    000018f1: 	movq	0x20(%rsp), %rsi
    000018f6: 	movq	%r12, %r8
    000018f9: 	movl	$0x2000000, %edx
    000018fe: 	movq	%rbp, %rdi
    00001901: 	leaq	_ZSt12reverse_copyI20BidirectionalPointerIsES1_ET0_T_S3_S2_(%rip), %rcx
    00001908: 	callq	_Z23test_reverse_copy_sizesI20BidirectionalPointerIsEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6408
    0000190d: 	movq	0xf0(%rsp), %rdi
    00001915: 	cmpq	%r15, %rdi
    00001918: 	je	.Ltmp2141 # Offset: 6424
    0000191a: 	movq	0x100(%rsp), %rax
    00001922: 	leaq	0x1(%rax), %rsi
    00001926: 	callq	_ZdlPvm@PLT # Offset: 6438
.Ltmp2141:
    0000192b: 	movq	0x18(%rsp), %rsi
    00001930: 	leaq	DATAat0x273b0(%rip), %rdx
    00001937: 	movq	%r12, %rdi
    0000193a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6458
    0000193f: 	movq	0x20(%rsp), %rsi
    00001944: 	movq	%r12, %r8
    00001947: 	movl	$0x2000000, %edx
    0000194c: 	movq	%rbp, %rdi
    0000194f: 	leaq	_Z22my_simple_reverse_copyI20BidirectionalPointerIsES1_EvT_S2_T0_(%rip), %rcx
    00001956: 	callq	_Z23test_reverse_copy_sizesI20BidirectionalPointerIsEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6486
    0000195b: 	movq	0xf0(%rsp), %rdi
    00001963: 	cmpq	%r15, %rdi
    00001966: 	je	.Ltmp2142 # Offset: 6502
    00001968: 	movq	0x100(%rsp), %rax
    00001970: 	leaq	0x1(%rax), %rsi
    00001974: 	callq	_ZdlPvm@PLT # Offset: 6516
.Ltmp2142:
    00001979: 	movq	0x18(%rsp), %rsi
    0000197e: 	leaq	DATAat0x273d8(%rip), %rdx
    00001985: 	movq	%r12, %rdi
    00001988: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6536
    0000198d: 	movq	0x20(%rsp), %rsi
    00001992: 	movq	%r12, %r8
    00001995: 	movl	$0x2000000, %edx
    0000199a: 	movq	%rbp, %rdi
    0000199d: 	leaq	_Z20my_fast_reverse_copyI20BidirectionalPointerIsES1_EvT_S2_T0_(%rip), %rcx
    000019a4: 	callq	_Z23test_reverse_copy_sizesI20BidirectionalPointerIsEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6564
    000019a9: 	movq	0xf0(%rsp), %rdi
    000019b1: 	cmpq	%r15, %rdi
    000019b4: 	je	.Ltmp2143 # Offset: 6580
    000019b6: 	movq	0x100(%rsp), %rax
    000019be: 	leaq	0x1(%rax), %rsi
    000019c2: 	callq	_ZdlPvm@PLT # Offset: 6594
.Ltmp2143:
    000019c7: 	movq	0x18(%rsp), %rsi
    000019cc: 	leaq	DATAat0x27400(%rip), %rdx
    000019d3: 	movq	%r12, %rdi
    000019d6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6614
    000019db: 	movq	0x20(%rsp), %rsi
    000019e0: 	movq	%r12, %r8
    000019e3: 	movl	$0x2000000, %edx
    000019e8: 	movq	%rbp, %rdi
    000019eb: 	leaq	_ZSt12reverse_copyIPsS0_ET0_T_S2_S1_(%rip), %rcx
    000019f2: 	callq	_Z23test_reverse_copy_sizesIPsPFS0_S0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6642
    000019f7: 	movq	0xf0(%rsp), %rdi
    000019ff: 	cmpq	%r15, %rdi
    00001a02: 	je	.Ltmp2144 # Offset: 6658
    00001a04: 	movq	0x100(%rsp), %rax
    00001a0c: 	leaq	0x1(%rax), %rsi
    00001a10: 	callq	_ZdlPvm@PLT # Offset: 6672
.Ltmp2144:
    00001a15: 	movq	0x18(%rsp), %rsi
    00001a1a: 	movq	%r14, %rdx
    00001a1d: 	movq	%r12, %rdi
    00001a20: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6688
    00001a25: 	movq	0x20(%rsp), %rsi
    00001a2a: 	movq	%r12, %r8
    00001a2d: 	movl	$0x2000000, %edx
    00001a32: 	movq	%rbp, %rdi
    00001a35: 	leaq	_Z22my_simple_reverse_copyIPsS0_EvT_S1_T0_(%rip), %rcx
    00001a3c: 	callq	_Z23test_reverse_copy_sizesIPsPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6716
    00001a41: 	movq	0xf0(%rsp), %rdi
    00001a49: 	cmpq	%r15, %rdi
    00001a4c: 	je	.Ltmp2145 # Offset: 6732
    00001a4e: 	movq	0x100(%rsp), %rax
    00001a56: 	leaq	0x1(%rax), %rsi
    00001a5a: 	callq	_ZdlPvm@PLT # Offset: 6746
.Ltmp2145:
    00001a5f: 	movq	0x18(%rsp), %rsi
    00001a64: 	leaq	DATAat0x27450(%rip), %rdx
    00001a6b: 	movq	%r12, %rdi
    00001a6e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6766
    00001a73: 	movq	0x20(%rsp), %rsi
    00001a78: 	movq	%r12, %r8
    00001a7b: 	movl	$0x2000000, %edx
    00001a80: 	movq	%rbp, %rdi
    00001a83: 	leaq	_Z20my_fast_reverse_copyIPsS0_EvT_S1_T0_(%rip), %rcx
    00001a8a: 	callq	_Z23test_reverse_copy_sizesIPsPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6794
    00001a8f: 	movq	0xf0(%rsp), %rdi
    00001a97: 	cmpq	%r15, %rdi
    00001a9a: 	je	.Ltmp2146 # Offset: 6810
    00001a9c: 	movq	0x100(%rsp), %rax
    00001aa4: 	leaq	0x1(%rax), %rsi
    00001aa8: 	callq	_ZdlPvm@PLT # Offset: 6824
.Ltmp2146:
    00001aad: 	movq	0x18(%rsp), %rsi
    00001ab2: 	movq	%rbx, %rdx
    00001ab5: 	movq	%r12, %rdi
    00001ab8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6840
    00001abd: 	movq	0x20(%rsp), %rsi
    00001ac2: 	movq	%r12, %r8
    00001ac5: 	movl	$0x2000000, %edx
    00001aca: 	movq	%rbp, %rdi
    00001acd: 	leaq	_Z18fast_reverse_copy2IPsS0_EvT_S1_T0_(%rip), %rcx
    00001ad4: 	callq	_Z23test_reverse_copy_sizesIPsPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6868
    00001ad9: 	movq	0xf0(%rsp), %rdi
    00001ae1: 	cmpq	%r15, %rdi
    00001ae4: 	je	.Ltmp2147 # Offset: 6884
    00001ae6: 	movq	0x100(%rsp), %rax
    00001aee: 	leaq	0x1(%rax), %rsi
    00001af2: 	callq	_ZdlPvm@PLT # Offset: 6898
.Ltmp2147:
    00001af7: 	movq	0x18(%rsp), %rsi
    00001afc: 	leaq	DATAat0x274a0(%rip), %rdx
    00001b03: 	movq	%r12, %rdi
    00001b06: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6918
    00001b0b: 	movq	0x20(%rsp), %rsi
    00001b10: 	movq	%r12, %r8
    00001b13: 	movl	$0x2000000, %edx
    00001b18: 	movq	%rbp, %rdi
    00001b1b: 	leaq	_Z18fast_reverse_copy3IPsS0_EvT_S1_T0_(%rip), %rcx
    00001b22: 	callq	_Z23test_reverse_copy_sizesIPsPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6946
    00001b27: 	movq	0xf0(%rsp), %rdi
    00001b2f: 	cmpq	%r15, %rdi
    00001b32: 	je	.Ltmp2148 # Offset: 6962
    00001b34: 	movq	0x100(%rsp), %rax
    00001b3c: 	leaq	0x1(%rax), %rsi
    00001b40: 	callq	_ZdlPvm@PLT # Offset: 6976
.Ltmp2148:
    00001b45: 	movq	0x18(%rsp), %rsi
    00001b4a: 	leaq	DATAat0x274c8(%rip), %rdx
    00001b51: 	movq	%r12, %rdi
    00001b54: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6996
    00001b59: 	movq	0x20(%rsp), %rsi
    00001b5e: 	movq	%r12, %r8
    00001b61: 	movl	$0x2000000, %edx
    00001b66: 	movq	%rbp, %rdi
    00001b69: 	leaq	_Z18fast_reverse_copy4IPsS0_EvT_S1_T0_(%rip), %rcx
    00001b70: 	callq	_Z23test_reverse_copy_sizesIPsPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7024
    00001b75: 	movq	0xf0(%rsp), %rdi
    00001b7d: 	cmpq	%r15, %rdi
    00001b80: 	je	.Ltmp2149 # Offset: 7040
    00001b82: 	movq	0x100(%rsp), %rax
    00001b8a: 	leaq	0x1(%rax), %rsi
    00001b8e: 	callq	_ZdlPvm@PLT # Offset: 7054
.Ltmp2149:
    00001b93: 	movl	0x64(%rsp), %eax
    00001b97: 	movq	0xd0(%rsp), %rdi
    00001b9f: 	movl	%eax, iterations(%rip)
    00001ba5: 	cmpq	0x58(%rsp), %rdi
    00001baa: 	je	.Ltmp2150 # Offset: 7082
    00001bac: 	movq	0xe0(%rsp), %rax
    00001bb4: 	leaq	0x1(%rax), %rsi
    00001bb8: 	callq	_ZdlPvm@PLT # Offset: 7096
.Ltmp2150:
    00001bbd: 	movq	0xb0(%rsp), %rdi
    00001bc5: 	leaq	0xc0(%rsp), %rax
    00001bcd: 	cmpq	%rax, %rdi
    00001bd0: 	je	.Ltmp2151 # Offset: 7120
    00001bd2: 	movq	0xc0(%rsp), %rax
    00001bda: 	leaq	0x1(%rax), %rsi
    00001bde: 	callq	_ZdlPvm@PLT # Offset: 7134
.Ltmp2151:
    00001be3: 	movq	0x20(%rsp), %rdi
    00001be8: 	movl	$0x2, %esi
    00001bed: 	callq	_ZdlPvm@PLT # Offset: 7149
    00001bf2: 	movq	%rbp, %rdi
    00001bf5: 	movl	$0x2, %esi
    00001bfa: 	callq	_ZdlPvm@PLT # Offset: 7162
    00001bff: 	movq	0x90(%rsp), %rdi
    00001c07: 	cmpq	0x70(%rsp), %rdi
    00001c0c: 	je	.Ltmp2152 # Offset: 7180
    00001c0e: 	movq	0xa0(%rsp), %rax
    00001c16: 	leaq	0x1(%rax), %rsi
    00001c1a: 	callq	_ZdlPvm@PLT # Offset: 7194
.Ltmp2152:
    00001c1f: 	movq	0x118(%rsp), %rax
    00001c27: 	subq	%fs:0x28, %rax
    00001c30: 	jne	.Ltmp2153 # Offset: 7216
    00001c36: 	addq	$0x128, %rsp
    00001c3d: 	popq	%rbx
    00001c3e: 	popq	%rbp
    00001c3f: 	popq	%r12
    00001c41: 	popq	%r13
    00001c43: 	popq	%r14
    00001c45: 	popq	%r15
    00001c47: 	retq # Offset: 7239
    00001c48: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1999:
    00001c50: 	addq	$0x20, %rbp
    00001c54: 	cmpq	%rbx, %rbp
    00001c57: 	jne	.Ltmp2000 # Offset: 7255
    00001c5d: 	addq	$0x8, %r13
    00001c61: 	cmpq	%r13, %r15
    00001c64: 	ja	.Ltmp2001 # Offset: 7268
    00001c6a: 	jmp	.Ltmp2154 # Offset: 7274
.Ltmp2032:
    00001c6f: 	testq	%r13, %r13
    00001c72: 	jne	.Ltmp2155 # Offset: 7282
    00001c78: 	movq	%r15, %rax
    00001c7b: 	jmp	.Ltmp2156 # Offset: 7291
.Ltmp2053:
    00001c80: 	testq	%r13, %r13
    00001c83: 	jne	.Ltmp2157 # Offset: 7299
    00001c89: 	movq	%r15, %rax
    00001c8c: 	jmp	.Ltmp2158 # Offset: 7308
.Ltmp2052:
    00001c91: 	leaq	0x88(%rsp), %rsi
    00001c99: 	xorl	%edx, %edx
    00001c9b: 	movq	%r12, %rdi
    00001c9e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7326
    00001ca3: 	movq	%rax, 0xf0(%rsp)
    00001cab: 	movq	%rax, %rdi
    00001cae: 	movq	0x88(%rsp), %rax
    00001cb6: 	movq	%rax, 0x100(%rsp)
.Ltmp2192:
    00001cbe: 	movq	%r13, %rdx
    00001cc1: 	movq	%r14, %rsi
    00001cc4: 	callq	memcpy@PLT # Offset: 7364
    00001cc9: 	movq	0x88(%rsp), %r13
    00001cd1: 	movq	0xf0(%rsp), %rax
    00001cd9: 	jmp	.Ltmp2158 # Offset: 7385
.Ltmp2065:
    00001cde: 	movq	0xf0(%rsp), %rdx
    00001ce6: 	leaq	DATAat0x271d0(%rip), %rsi
    00001ced: 	movl	$0x1, %edi
    00001cf2: 	xorl	%eax, %eax
    00001cf4: 	callq	__printf_chk@PLT # Offset: 7412
    00001cf9: 	jmp	.Ltmp2159 # Offset: 7417
.Ltmp2073:
    00001cfe: 	testq	%r13, %r13
    00001d01: 	jne	.Ltmp2160 # Offset: 7425
    00001d07: 	movq	%r15, %rax
    00001d0a: 	jmp	.Ltmp2161 # Offset: 7434
.Ltmp2031:
    00001d0f: 	leaq	0x88(%rsp), %rsi
    00001d17: 	xorl	%edx, %edx
    00001d19: 	movq	%r12, %rdi
    00001d1c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7452
    00001d21: 	movq	%rax, 0xf0(%rsp)
    00001d29: 	movq	%rax, %rdi
    00001d2c: 	movq	0x88(%rsp), %rax
    00001d34: 	movq	%rax, 0x100(%rsp)
.Ltmp2193:
    00001d3c: 	movq	%r13, %rdx
    00001d3f: 	movq	%r14, %rsi
    00001d42: 	callq	memcpy@PLT # Offset: 7490
    00001d47: 	movq	0x88(%rsp), %r13
    00001d4f: 	movq	0xf0(%rsp), %rax
    00001d57: 	jmp	.Ltmp2156 # Offset: 7511
.Ltmp2045:
    00001d5c: 	movq	0xf0(%rsp), %rdx
    00001d64: 	leaq	DATAat0x271d0(%rip), %rsi
    00001d6b: 	movl	$0x1, %edi
    00001d70: 	xorl	%eax, %eax
    00001d72: 	callq	__printf_chk@PLT # Offset: 7538
    00001d77: 	jmp	.Ltmp2162 # Offset: 7543
.Ltmp2085:
    00001d7c: 	movq	0xf0(%rsp), %rdx
    00001d84: 	leaq	DATAat0x271d0(%rip), %rsi
    00001d8b: 	movl	$0x1, %edi
    00001d90: 	xorl	%eax, %eax
    00001d92: 	callq	__printf_chk@PLT # Offset: 7570
    00001d97: 	jmp	.Ltmp2163 # Offset: 7575
.Ltmp2072:
    00001d9c: 	leaq	0x88(%rsp), %rsi
    00001da4: 	xorl	%edx, %edx
    00001da6: 	movq	%r12, %rdi
    00001da9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7593
    00001dae: 	movq	%rax, 0xf0(%rsp)
    00001db6: 	movq	%rax, %rdi
    00001db9: 	movq	0x88(%rsp), %rax
    00001dc1: 	movq	%rax, 0x100(%rsp)
.Ltmp2194:
    00001dc9: 	movq	%r13, %rdx
    00001dcc: 	movq	%r14, %rsi
    00001dcf: 	callq	memcpy@PLT # Offset: 7631
    00001dd4: 	movq	0x88(%rsp), %r13
    00001ddc: 	movq	0xf0(%rsp), %rax
    00001de4: 	jmp	.Ltmp2161 # Offset: 7652
.Ltmp2038:
    00001de9: 	movq	%r12, %rsi
    00001dec: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001df3: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7667
    00001df8: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001dff: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00001e06: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001e0d: 	jne	.Ltmp2164 # Offset: 7693
.Ltmp2043:
    00001e13: 	movq	-0x8(%rdx), %rax
    00001e17: 	addq	$0x200, %rax
    00001e1d: 	jmp	.Ltmp2164 # Offset: 7709
.Ltmp2063:
    00001e22: 	movq	-0x8(%rdx), %rax
    00001e26: 	addq	$0x200, %rax
    00001e2c: 	jmp	.Ltmp2165 # Offset: 7724
.Ltmp2083:
    00001e31: 	movq	-0x8(%rdx), %rax
    00001e35: 	addq	$0x200, %rax
    00001e3b: 	jmp	.Ltmp2166 # Offset: 7739
.Ltmp2058:
    00001e40: 	movq	%r12, %rsi
    00001e43: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001e4a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7754
    00001e4f: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001e56: 	jmp	.Ltmp2167 # Offset: 7766
.Ltmp2078:
    00001e5b: 	movq	%r12, %rsi
    00001e5e: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001e65: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7781
    00001e6a: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001e71: 	jmp	.Ltmp2168 # Offset: 7793
.Ltmp2082:
    00001e76: 	testq	%r13, %r13
    00001e79: 	je	.Ltmp2169 # Offset: 7801
    00001e7f: 	jmp	.Ltmp2170 # Offset: 7807
    00001e84: 	nopl	(%rax) # Size: 4
.Ltmp2041:
    00001e88: 	leaq	0x88(%rsp), %rsi
    00001e90: 	xorl	%edx, %edx
    00001e92: 	movq	%r14, %rdi
    00001e95: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7829
    00001e9a: 	movq	%rax, (%r14)
    00001e9d: 	movq	%rax, %rdi
    00001ea0: 	movq	0x88(%rsp), %rax
    00001ea8: 	movq	%rax, 0x10(%r14)
.Ltmp2174:
    00001eac: 	movq	0x40(%rsp), %rsi
    00001eb1: 	movq	%r13, %rdx
    00001eb4: 	callq	memcpy@PLT # Offset: 7860
    00001eb9: 	movq	0x88(%rsp), %r13
    00001ec1: 	movq	(%r14), %rdi
    00001ec4: 	jmp	.Ltmp2171 # Offset: 7876
.Ltmp2062:
    00001ec9: 	testq	%r13, %r13
    00001ecc: 	je	.Ltmp2172 # Offset: 7884
    00001ed2: 	jmp	.Ltmp2173 # Offset: 7890
    00001ed4: 	nopl	(%rax) # Size: 4
.Ltmp2042:
    00001ed8: 	testq	%r13, %r13
    00001edb: 	je	.Ltmp2171 # Offset: 7899
    00001ee1: 	jmp	.Ltmp2174 # Offset: 7905
    00001ee3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2081:
    00001ee8: 	leaq	0x88(%rsp), %rsi
    00001ef0: 	xorl	%edx, %edx
    00001ef2: 	movq	%r14, %rdi
    00001ef5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7925
    00001efa: 	movq	%rax, (%r14)
    00001efd: 	movq	%rax, %rdi
    00001f00: 	movq	0x88(%rsp), %rax
    00001f08: 	movq	%rax, 0x10(%r14)
.Ltmp2170:
    00001f0c: 	movq	0x40(%rsp), %rsi
    00001f11: 	movq	%r13, %rdx
    00001f14: 	callq	memcpy@PLT # Offset: 7956
    00001f19: 	movq	0x88(%rsp), %r13
    00001f21: 	movq	(%r14), %rdi
    00001f24: 	jmp	.Ltmp2169 # Offset: 7972
.Ltmp2061:
    00001f29: 	leaq	0x88(%rsp), %rsi
    00001f31: 	xorl	%edx, %edx
    00001f33: 	movq	%r14, %rdi
    00001f36: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7990
    00001f3b: 	movq	%rax, (%r14)
    00001f3e: 	movq	%rax, %rdi
    00001f41: 	movq	0x88(%rsp), %rax
    00001f49: 	movq	%rax, 0x10(%r14)
.Ltmp2173:
    00001f4d: 	movq	0x40(%rsp), %rsi
    00001f52: 	movq	%r13, %rdx
    00001f55: 	callq	memcpy@PLT # Offset: 8021
    00001f5a: 	movq	0x88(%rsp), %r13
    00001f62: 	movq	(%r14), %rdi
    00001f65: 	jmp	.Ltmp2172 # Offset: 8037
.Ltmp2018:
    00001f6a: 	movq	%r12, %rsi
    00001f6d: 	addq	$0x2, %r12
    00001f71: 	movw	%cx, (%rsi)
    00001f74: 	cmpq	%r12, %r13
    00001f77: 	jne	.Ltmp2014 # Offset: 8055
    00001f7d: 	jmp	.Ltmp2175 # Offset: 8061
.Ltmp2003:
    00001f82: 	cmpq	0x8(%rsp), %rbp
    00001f87: 	je	.Ltmp2006 # Offset: 8071
.Ltmp2178:
    00001f8d: 	movq	(%rbp), %rdi
    00001f91: 	leaq	0x10(%rbp), %rax
    00001f95: 	cmpq	%rax, %rdi
    00001f98: 	je	.Ltmp2176 # Offset: 8088
.Ltmp2177:
    00001f9a: 	movq	0x10(%rbp), %rax
    00001f9e: 	addq	$0x20, %rbp
    00001fa2: 	leaq	0x1(%rax), %rsi
    00001fa6: 	callq	_ZdlPvm@PLT # Offset: 8102
    00001fab: 	cmpq	%rbp, 0x8(%rsp)
    00001fb0: 	je	.Ltmp2006 # Offset: 8112
    00001fb6: 	movq	(%rbp), %rdi
    00001fba: 	leaq	0x10(%rbp), %rax
    00001fbe: 	cmpq	%rax, %rdi
    00001fc1: 	jne	.Ltmp2177 # Offset: 8129
.Ltmp2176:
    00001fc3: 	addq	$0x20, %rbp
    00001fc7: 	cmpq	%rbp, 0x8(%rsp)
    00001fcc: 	jne	.Ltmp2178 # Offset: 8140
    00001fce: 	jmp	.Ltmp2006 # Offset: 8142
.Ltmp2133:
    00001fd3: 	movq	0xf0(%rsp), %rdx
    00001fdb: 	leaq	DATAat0x271d0(%rip), %rsi
    00001fe2: 	movl	$0x1, %edi
    00001fe7: 	xorl	%eax, %eax
    00001fe9: 	callq	__printf_chk@PLT # Offset: 8169
    00001fee: 	jmp	.Ltmp2179 # Offset: 8174
.Ltmp2131:
    00001ff3: 	movq	-0x8(%rdx), %rax
    00001ff7: 	addq	$0x200, %rax
    00001ffd: 	jmp	.Ltmp2180 # Offset: 8189
.Ltmp2130:
    00002002: 	movq	%r12, %rsi
    00002005: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000200c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8204
    00002011: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002018: 	jmp	.Ltmp2181 # Offset: 8216
.Ltmp2123:
    0000201d: 	movq	0xf0(%rsp), %rdx
    00002025: 	leaq	DATAat0x271d0(%rip), %rsi
    0000202c: 	movl	$0x1, %edi
    00002031: 	xorl	%eax, %eax
    00002033: 	callq	__printf_chk@PLT # Offset: 8243
    00002038: 	jmp	.Ltmp2182 # Offset: 8248
.Ltmp2121:
    0000203d: 	movq	-0x8(%rdx), %rax
    00002041: 	addq	$0x200, %rax
    00002047: 	jmp	.Ltmp2183 # Offset: 8263
.Ltmp2120:
    0000204c: 	movq	%r12, %rsi
    0000204f: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002056: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8278
    0000205b: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002062: 	jmp	.Ltmp2184 # Offset: 8290
.Ltmp2113:
    00002067: 	movq	0xf0(%rsp), %rdx
    0000206f: 	leaq	DATAat0x271d0(%rip), %rsi
    00002076: 	movl	$0x1, %edi
    0000207b: 	xorl	%eax, %eax
    0000207d: 	callq	__printf_chk@PLT # Offset: 8317
    00002082: 	jmp	.Ltmp2185 # Offset: 8322
.Ltmp2111:
    00002087: 	movq	-0x8(%rdx), %rax
    0000208b: 	addq	$0x200, %rax
    00002091: 	jmp	.Ltmp2186 # Offset: 8337
.Ltmp2110:
    00002096: 	movq	%r12, %rsi
    00002099: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000020a0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8352
    000020a5: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000020ac: 	jmp	.Ltmp2187 # Offset: 8364
.Ltmp2103:
    000020b1: 	movq	0xf0(%rsp), %rdx
    000020b9: 	leaq	DATAat0x271d0(%rip), %rsi
    000020c0: 	movl	$0x1, %edi
    000020c5: 	xorl	%eax, %eax
    000020c7: 	callq	__printf_chk@PLT # Offset: 8391
    000020cc: 	jmp	.Ltmp2188 # Offset: 8396
.Ltmp2101:
    000020d1: 	movq	-0x8(%rdx), %rax
    000020d5: 	addq	$0x200, %rax
    000020db: 	jmp	.Ltmp2189 # Offset: 8411
.Ltmp2100:
    000020e0: 	movq	%r12, %rsi
    000020e3: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000020ea: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8426
    000020ef: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000020f6: 	jmp	.Ltmp2190 # Offset: 8438
.Ltmp2016:
    000020fb: 	movq	%r14, %rcx
    000020fe: 	jmp	.Ltmp2191 # Offset: 8446
.Ltmp2051:
    00002103: 	leaq	DATAat0x27008(%rip), %rdi
    0000210a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8458
.Ltmp2157:
    0000210f: 	movq	%r15, %rdi
    00002112: 	jmp	.Ltmp2192 # Offset: 8466
.Ltmp2155:
    00002117: 	movq	%r15, %rdi
    0000211a: 	jmp	.Ltmp2193 # Offset: 8474
.Ltmp2153:
    0000211f: 	callq	__stack_chk_fail@PLT # Offset: 8479
.Ltmp2040:
    00002124: 	leaq	DATAat0x27008(%rip), %rdi
    0000212b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8491
.Ltmp2030:
    00002130: 	leaq	DATAat0x27008(%rip), %rdi
    00002137: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8503
.Ltmp2160:
    0000213c: 	movq	%r15, %rdi
    0000213f: 	jmp	.Ltmp2194 # Offset: 8511
.Ltmp2080:
    00002144: 	leaq	DATAat0x27008(%rip), %rdi
    0000214b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8523
.Ltmp2071:
    00002150: 	leaq	DATAat0x27008(%rip), %rdi
    00002157: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8535
.Ltmp2060:
    0000215c: 	leaq	DATAat0x27008(%rip), %rdi
    00002163: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8547
    00002168: 	endbr64
.Ltmp2201:
    0000216c: 	movq	%rax, %rbx
    0000216f: 	jmp	.Ltmp2195 # Offset: 8559
    00002171: 	endbr64
    00002175: 	movq	%rax, %rbx
    00002178: 	jmp	.Ltmp2196 # Offset: 8568
.Ltmp2202:
    0000217a: 	movq	0xf0(%rsp), %rdi
    00002182: 	cmpq	%r15, %rdi
    00002185: 	je	.Ltmp2197 # Offset: 8581
.Ltmp2205:
    00002187: 	movq	0x100(%rsp), %rax
    0000218f: 	leaq	0x1(%rax), %rsi
    00002193: 	callq	_ZdlPvm@PLT # Offset: 8595
.Ltmp2197:
    00002198: 	movq	0x20(%rsp), %rdi
    0000219d: 	movl	$0x2, %esi
    000021a2: 	callq	_ZdlPvm@PLT # Offset: 8610
.Ltmp2196:
    000021a7: 	movq	%rbp, %rdi
    000021aa: 	movl	$0x2, %esi
    000021af: 	movq	%rbx, %rbp
    000021b2: 	callq	_ZdlPvm@PLT # Offset: 8626
.Ltmp2200:
    000021b7: 	movq	0x90(%rsp), %rdi
    000021bf: 	cmpq	0x70(%rsp), %rdi
    000021c4: 	je	.Ltmp2198 # Offset: 8644
    000021c6: 	movq	0xa0(%rsp), %rax
    000021ce: 	leaq	0x1(%rax), %rsi
    000021d2: 	callq	_ZdlPvm@PLT # Offset: 8658
.Ltmp2198:
    000021d7: 	movq	%rbp, %rdi
    000021da: 	callq	_Unwind_Resume@PLT # Offset: 8666
.Ltmp2195:
    000021df: 	movq	0xf0(%rsp), %rdi
    000021e7: 	cmpq	%r15, %rdi
    000021ea: 	je	.Ltmp2199 # Offset: 8682
    000021ec: 	movq	0x100(%rsp), %rax
    000021f4: 	leaq	0x1(%rax), %rsi
    000021f8: 	callq	_ZdlPvm@PLT # Offset: 8696
.Ltmp2199:
    000021fd: 	movq	0xb0(%rsp), %rdi
    00002205: 	leaq	0xc0(%rsp), %rax
    0000220d: 	cmpq	%rax, %rdi
    00002210: 	je	.Ltmp2197 # Offset: 8720
    00002212: 	movq	0xc0(%rsp), %rax
    0000221a: 	leaq	0x1(%rax), %rsi
    0000221e: 	callq	_ZdlPvm@PLT # Offset: 8734
    00002223: 	jmp	.Ltmp2197 # Offset: 8739
    00002228: 	endbr64
    0000222c: 	movq	%rax, %rbp
    0000222f: 	jmp	.Ltmp2200 # Offset: 8751
    00002231: 	endbr64
    00002235: 	jmp	.Ltmp2201 # Offset: 8757
    0000223a: 	endbr64
    0000223e: 	jmp	.Ltmp2201 # Offset: 8766
    00002243: 	endbr64
.Ltmp2204:
    00002247: 	movq	%rax, %rbx
    0000224a: 	jmp	.Ltmp2202 # Offset: 8778
    0000224f: 	endbr64
    00002253: 	movq	%rax, %rbx
    00002256: 	jmp	.Ltmp2203 # Offset: 8790
    00002258: 	endbr64
    0000225c: 	jmp	.Ltmp2204 # Offset: 8796
.Ltmp2203:
    0000225e: 	movq	0xf0(%rsp), %rdi
    00002266: 	leaq	0x100(%rsp), %rax
    0000226e: 	cmpq	%rax, %rdi
    00002271: 	jne	.Ltmp2205 # Offset: 8817
    00002277: 	jmp	.Ltmp2197 # Offset: 8823
    0000227c: 	endbr64
.Ltmp2212:
    00002280: 	movq	%rax, %rbx
    00002283: 	jmp	.Ltmp2206 # Offset: 8835
    00002285: 	endbr64
    00002289: 	jmp	.Ltmp2204 # Offset: 8841
    0000228b: 	endbr64
    0000228f: 	jmp	.Ltmp2204 # Offset: 8847
    00002291: 	endbr64
    00002295: 	jmp	.Ltmp2204 # Offset: 8853
.Ltmp2207:
    00002297: 	movq	0xf0(%rsp), %rdi
    0000229f: 	cmpq	%r15, %rdi
    000022a2: 	je	.Ltmp2206 # Offset: 8866
    000022a4: 	movq	0x100(%rsp), %rax
    000022ac: 	leaq	0x1(%rax), %rsi
    000022b0: 	callq	_ZdlPvm@PLT # Offset: 8880
.Ltmp2206:
    000022b5: 	movq	0xd0(%rsp), %rdi
    000022bd: 	cmpq	0x58(%rsp), %rdi
    000022c2: 	je	.Ltmp2199 # Offset: 8898
.Ltmp2210:
    000022c8: 	movq	0xe0(%rsp), %rax
    000022d0: 	leaq	0x1(%rax), %rsi
    000022d4: 	callq	_ZdlPvm@PLT # Offset: 8916
    000022d9: 	jmp	.Ltmp2199 # Offset: 8921
    000022de: 	endbr64
    000022e2: 	jmp	.Ltmp2201 # Offset: 8930
    000022e7: 	endbr64
    000022eb: 	jmp	.Ltmp2201 # Offset: 8939
    000022f0: 	endbr64
    000022f4: 	jmp	.Ltmp2201 # Offset: 8948
    000022f9: 	endbr64
    000022fd: 	jmp	.Ltmp2201 # Offset: 8957
    00002302: 	endbr64
.Ltmp2211:
    00002306: 	movq	%rax, %rbx
    00002309: 	jmp	.Ltmp2207 # Offset: 8969
    0000230b: 	endbr64
    0000230f: 	movq	%rax, %rbx
    00002312: 	jmp	.Ltmp2208 # Offset: 8978
    00002314: 	endbr64
    00002318: 	jmp	.Ltmp2204 # Offset: 8984
    0000231d: 	endbr64
    00002321: 	movq	%rax, %rbx
    00002324: 	jmp	.Ltmp2199 # Offset: 8996
    00002329: 	endbr64
    0000232d: 	jmp	.Ltmp2204 # Offset: 9005
.Ltmp2208:
    00002332: 	movq	0xf0(%rsp), %rdi
    0000233a: 	cmpq	%r15, %rdi
    0000233d: 	je	.Ltmp2209 # Offset: 9021
    0000233f: 	movq	0x100(%rsp), %rax
    00002347: 	leaq	0x1(%rax), %rsi
    0000234b: 	callq	_ZdlPvm@PLT # Offset: 9035
.Ltmp2209:
    00002350: 	movq	0xd0(%rsp), %rdi
    00002358: 	leaq	0xe0(%rsp), %rax
    00002360: 	cmpq	%rax, %rdi
    00002363: 	jne	.Ltmp2210 # Offset: 9059
    00002369: 	jmp	.Ltmp2199 # Offset: 9065
    0000236e: 	endbr64
    00002372: 	jmp	.Ltmp2204 # Offset: 9074
    00002377: 	endbr64
    0000237b: 	jmp	.Ltmp2201 # Offset: 9083
    00002380: 	endbr64
    00002384: 	movq	%rax, %rbx
    00002387: 	jmp	.Ltmp2197 # Offset: 9095
    0000238c: 	endbr64
    00002390: 	jmp	.Ltmp2211 # Offset: 9104
    00002395: 	endbr64
    00002399: 	jmp	.Ltmp2212 # Offset: 9113
    0000239e: 	endbr64
    000023a2: 	movq	%rax, %rbx
    000023a5: 	jmp	.Ltmp2209 # Offset: 9125
    000023a7: 	endbr64
    000023ab: 	jmp	.Ltmp2201 # Offset: 9131
    000023b0: 	endbr64
    000023b4: 	jmp	.Ltmp2211 # Offset: 9140
    000023b9: 	endbr64
    000023bd: 	jmp	.Ltmp2211 # Offset: 9149
    000023c2: 	endbr64
    000023c6: 	jmp	.Ltmp2211 # Offset: 9158
    000023cb: 	endbr64
    000023cf: 	jmp	.Ltmp2211 # Offset: 9167
    000023d4: 	endbr64
    000023d8: 	jmp	.Ltmp2211 # Offset: 9176
    000023dd: 	endbr64
    000023e1: 	jmp	.Ltmp2211 # Offset: 9185
    000023e6: 	endbr64
    000023ea: 	jmp	.Ltmp2212 # Offset: 9194
    000023ef: 	endbr64
    000023f3: 	jmp	.Ltmp2201 # Offset: 9203
    000023f8: 	endbr64
    000023fc: 	jmp	.Ltmp2201 # Offset: 9212
    00002401: 	endbr64
    00002405: 	jmp	.Ltmp2201 # Offset: 9221
    0000240a: 	endbr64
    0000240e: 	jmp	.Ltmp2211 # Offset: 9230
    00002413: 	endbr64
    00002417: 	jmp	.Ltmp2211 # Offset: 9239
    0000241c: 	endbr64
    00002420: 	jmp	.Ltmp2211 # Offset: 9248
    00002425: 	endbr64
    00002429: 	jmp	.Ltmp2201 # Offset: 9257
    0000242e: 	endbr64
    00002432: 	jmp	.Ltmp2201 # Offset: 9266
    00002437: 	endbr64
    0000243b: 	jmp	.Ltmp2201 # Offset: 9275
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIsEvv"

Binary Function "_Z11TestOneTypeIhEvv" after disassembly {
  Number      : 243
  State       : disassembled
  Address     : 0x1ba20
  Size        : 0x3109
  MaxSize     : 0x3110
  Offset      : 0x1ba20
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIhEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0242:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	$0x5f38, %edx
    0000000b: 	pushq	%r14
    0000000d: 	pushq	%r13
    0000000f: 	pushq	%r12
    00000011: 	pushq	%rbp
    00000012: 	pushq	%rbx
    00000013: 	subq	$0x138, %rsp
    0000001a: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm7
    00000022: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm6
    0000002a: 	movq	%fs:0x28, %rax
    00000033: 	movq	%rax, 0x128(%rsp)
    0000003b: 	movl	iterations(%rip), %eax
    00000041: 	movq	"_ZL7gLabels/1"+56(%rip), %r14
    00000048: 	movl	$0x746e6975, 0x90(%rsp)
    00000053: 	movaps	%xmm7, 0x20(%rsp)
    00000058: 	movq	%xmm7, %rbp
    0000005d: 	movhlps	%xmm6, %xmm7
    00000060: 	movq	%xmm7, %rcx
    00000065: 	movw	%dx, 0x94(%rsp)
    0000006d: 	leaq	0x8(%rcx), %r12
    00000071: 	movb	$0x74, 0x96(%rsp)
    00000079: 	movq	$0x7, 0x88(%rsp)
    00000085: 	movb	$0x0, 0x97(%rsp)
    0000008d: 	movl	%eax, 0x5c(%rsp)
    00000091: 	leaq	0x90(%rsp), %rax
    00000099: 	movq	%rax, 0x60(%rsp)
    0000009e: 	movq	%rax, 0x80(%rsp)
    000000a6: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000ad: 	movaps	%xmm6, 0x30(%rsp)
    000000b2: 	movq	%rax, 0x8(%rsp)
    000000b7: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    000000be: 	movq	%xmm7, 0x40(%rsp)
    000000c4: 	movq	%rax, 0x18(%rsp)
    000000c9: 	movq	%xmm6, 0x10(%rsp)
    000000cf: 	cmpq	%r12, %rax
    000000d2: 	jbe	.Ltmp2213 # Offset: 210
    000000d4: 	movq	%rbp, 0x48(%rsp)
    000000d9: 	movq	%r12, %r13
    000000dc: 	movq	%rax, %r15
    000000df: 	nop # Size: 1
.Ltmp2216:
    000000e0: 	movq	(%r13), %rbp
    000000e4: 	leaq	0x200(%rbp), %rbx
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2215:
    000000f0: 	movq	(%rbp), %rdi
    000000f4: 	leaq	0x10(%rbp), %rdx
    000000f8: 	cmpq	%rdx, %rdi
    000000fb: 	je	.Ltmp2214 # Offset: 251
    00000101: 	movq	0x10(%rbp), %rax
    00000105: 	addq	$0x20, %rbp
    00000109: 	leaq	0x1(%rax), %rsi
    0000010d: 	callq	_ZdlPvm@PLT # Offset: 269
    00000112: 	cmpq	%rbp, %rbx
    00000115: 	jne	.Ltmp2215 # Offset: 277
    00000117: 	addq	$0x8, %r13
    0000011b: 	cmpq	%r13, %r15
    0000011e: 	ja	.Ltmp2216 # Offset: 286
.Ltmp2253:
    00000120: 	movq	0x48(%rsp), %rbp
.Ltmp2213:
    00000125: 	movq	0x40(%rsp), %rcx
    0000012a: 	cmpq	%rcx, 0x18(%rsp)
    0000012f: 	jne	.Ltmp2217 # Offset: 303
    00000131: 	jmp	.Ltmp2218 # Offset: 305
    00000136: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2220:
    00000140: 	movq	(%rbp), %rdi
    00000144: 	leaq	0x10(%rbp), %rax
    00000148: 	cmpq	%rax, %rdi
    0000014b: 	je	.Ltmp2219 # Offset: 331
    0000014d: 	movq	0x10(%rbp), %rax
    00000151: 	leaq	0x1(%rax), %rsi
    00000155: 	callq	_ZdlPvm@PLT # Offset: 341
.Ltmp2219:
    0000015a: 	addq	$0x20, %rbp
.Ltmp2217:
    0000015e: 	cmpq	0x10(%rsp), %rbp
    00000163: 	jne	.Ltmp2220 # Offset: 355
    00000165: 	cmpq	%r14, 0x8(%rsp)
    0000016a: 	je	.Ltmp2221 # Offset: 362
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp2223:
    00000170: 	movq	(%r14), %rdi
    00000173: 	leaq	0x10(%r14), %rax
    00000177: 	cmpq	%rax, %rdi
    0000017a: 	je	.Ltmp2222 # Offset: 378
    0000017c: 	movq	0x10(%r14), %rax
    00000180: 	leaq	0x1(%rax), %rsi
    00000184: 	callq	_ZdlPvm@PLT # Offset: 388
.Ltmp2222:
    00000189: 	addq	$0x20, %r14
    0000018d: 	cmpq	%r14, 0x8(%rsp)
    00000192: 	jne	.Ltmp2223 # Offset: 402
.Ltmp2221:
    00000194: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    0000019b: 	leaq	0x8(%rax), %rbx
    0000019f: 	cmpq	%r12, %rbx
    000001a2: 	jbe	.Ltmp2224 # Offset: 418
    000001a4: 	nopl	(%rax) # Size: 4
.Ltmp2225:
    000001a8: 	movq	(%r12), %rdi
    000001ac: 	movl	$0x200, %esi
    000001b1: 	addq	$0x8, %r12
    000001b5: 	callq	_ZdlPvm@PLT # Offset: 437
    000001ba: 	cmpq	%r12, %rbx
    000001bd: 	ja	.Ltmp2225 # Offset: 445
.Ltmp2224:
    000001bf: 	movdqa	0x20(%rsp), %xmm7
    000001c5: 	movl	$0x4000000, %edi
    000001ca: 	movaps	%xmm7, "_ZL7gLabels/1"+48(%rip)
    000001d1: 	movdqa	0x30(%rsp), %xmm7
    000001d7: 	movaps	%xmm7, "_ZL7gLabels/1"+64(%rip)
    000001de: 	callq	_Znam@PLT # Offset: 478
    000001e3: 	movl	$0x4000000, %edi
    000001e8: 	movq	%rax, %r15
    000001eb: 	callq	_Znam@PLT # Offset: 491
    000001f0: 	movq	%rax, 0x18(%rsp)
    000001f5: 	movslq	init_value(%rip), %rax
    000001fc: 	leaq	0x4000000(%r15), %rbp
    00000203: 	pcmpeqd	%xmm4, %xmm4
    00000207: 	movdqa	DATAat0x27620(%rip), %xmm12
    00000210: 	movdqa	DATAat0x275f0(%rip), %xmm11
    00000219: 	leaq	0x4000000(%rax), %rcx
    00000220: 	addq	$0x3ffffff, %rax
    00000226: 	movdqa	DATAat0x27600(%rip), %xmm10
    0000022f: 	movdqa	DATAat0x27610(%rip), %xmm9
    00000238: 	movq	%rax, %xmm7
    0000023d: 	movq	%rcx, %xmm2
    00000242: 	movdqa	DATAat0x27630(%rip), %xmm8
    0000024b: 	movdqa	DATAat0x27650(%rip), %xmm6
    00000253: 	punpcklqdq	%xmm7, %xmm2
    00000257: 	movdqa	DATAat0x27660(%rip), %xmm5
    0000025f: 	movdqa	DATAat0x27640(%rip), %xmm7
    00000267: 	movq	%r15, %rax
    0000026a: 	movdqa	DATAat0x27670(%rip), %xmm3
    00000272: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2226:
    00000278: 	movdqa	%xmm2, %xmm1
    0000027c: 	addq	$0x10, %rax
    00000280: 	paddq	%xmm12, %xmm2
    00000285: 	movdqa	%xmm1, %xmm0
    00000289: 	movdqa	%xmm1, %xmm13
    0000028e: 	movdqa	%xmm1, %xmm14
    00000293: 	paddq	%xmm11, %xmm13
    00000298: 	paddq	%xmm4, %xmm0
    0000029c: 	shufps	$0x88, %xmm13, %xmm0
    000002a1: 	movdqa	%xmm1, %xmm13
    000002a6: 	paddq	%xmm9, %xmm14
    000002ab: 	paddq	%xmm10, %xmm13
    000002b0: 	shufps	$0x88, %xmm14, %xmm13
    000002b5: 	movdqa	%xmm0, %xmm14
    000002ba: 	punpcklwd	%xmm13, %xmm0
    000002bf: 	punpckhwd	%xmm13, %xmm14
    000002c4: 	movdqa	%xmm0, %xmm13
    000002c9: 	punpckhwd	%xmm14, %xmm13
    000002ce: 	punpcklwd	%xmm14, %xmm0
    000002d3: 	movdqa	%xmm1, %xmm14
    000002d8: 	punpcklwd	%xmm13, %xmm0
    000002dd: 	movdqa	%xmm1, %xmm13
    000002e2: 	paddq	%xmm7, %xmm14
    000002e7: 	paddq	%xmm8, %xmm13
    000002ec: 	pand	%xmm3, %xmm0
    000002f0: 	shufps	$0x88, %xmm14, %xmm13
    000002f5: 	movdqa	%xmm1, %xmm14
    000002fa: 	paddq	%xmm5, %xmm1
    000002fe: 	movdqa	%xmm13, %xmm15
    00000303: 	paddq	%xmm6, %xmm14
    00000308: 	shufps	$0x88, %xmm1, %xmm14
    0000030d: 	movdqa	%xmm13, %xmm1
    00000312: 	punpckhwd	%xmm14, %xmm15
    00000317: 	punpcklwd	%xmm14, %xmm1
    0000031c: 	movdqa	%xmm1, %xmm13
    00000321: 	punpcklwd	%xmm15, %xmm1
    00000326: 	punpckhwd	%xmm15, %xmm13
    0000032b: 	punpcklwd	%xmm13, %xmm1
    00000330: 	pand	%xmm3, %xmm1
    00000334: 	packuswb	%xmm1, %xmm0
    00000338: 	movups	%xmm0, -0x10(%rax)
    0000033c: 	cmpq	%rax, %rbp
    0000033f: 	jne	.Ltmp2226 # Offset: 831
    00000345: 	movl	$0x34, %edx
    0000034a: 	movq	%rbp, %rsi
    0000034d: 	leaq	0x10(%r15), %rbx
    00000351: 	movq	%r15, %rdi
    00000354: 	callq	"_ZSt16__introsort_loopIPhlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1" # Offset: 852
    00000359: 	leaq	0x1(%r15), %r12
    0000035d: 	movl	$0x1, %r14d
    00000363: 	jmp	.Ltmp2227 # Offset: 867
    00000365: 	nopl	(%rax) # Size: 3
.Ltmp2230:
    00000368: 	movq	%r12, %rdx
    0000036b: 	subq	%r15, %rdx
    0000036e: 	jne	.Ltmp2228 # Offset: 878
.Ltmp2401:
    00000374: 	addq	$0x1, %r12
    00000378: 	movb	%r13b, (%r15)
    0000037b: 	cmpq	%r12, %rbx
    0000037e: 	je	.Ltmp2229 # Offset: 894
.Ltmp2227:
    00000380: 	movzbl	(%r12), %r13d
    00000385: 	cmpb	(%r15), %r13b
    00000388: 	jb	.Ltmp2230 # Offset: 904
    0000038a: 	movzbl	-0x1(%r12), %edx
    00000390: 	leaq	-0x1(%r12), %rax
    00000395: 	cmpb	%dl, %r13b
    00000398: 	jae	.Ltmp2231 # Offset: 920
    0000039e: 	nop # Size: 2
.Ltmp2232:
    000003a0: 	movb	%dl, 0x1(%rax)
    000003a3: 	movq	%rax, %rcx
    000003a6: 	movzbl	-0x1(%rax), %edx
    000003aa: 	subq	$0x1, %rax
    000003ae: 	cmpb	%dl, %r13b
    000003b1: 	jb	.Ltmp2232 # Offset: 945
.Ltmp2411:
    000003b3: 	addq	$0x1, %r12
    000003b7: 	movb	%r13b, (%rcx)
    000003ba: 	cmpq	%r12, %rbx
    000003bd: 	jne	.Ltmp2227 # Offset: 957
    000003bf: 	nop # Size: 1
.Ltmp2229:
    000003c0: 	movzbl	(%rbx), %ecx
    000003c3: 	movzbl	-0x1(%rbx), %edx
    000003c7: 	leaq	-0x1(%rbx), %rax
    000003cb: 	cmpb	%dl, %cl
    000003cd: 	jae	.Ltmp2233 # Offset: 973
    000003d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2234:
    000003d8: 	movb	%dl, 0x1(%rax)
    000003db: 	movq	%rax, %rsi
    000003de: 	movzbl	-0x1(%rax), %edx
    000003e2: 	subq	$0x1, %rax
    000003e6: 	cmpb	%dl, %cl
    000003e8: 	jb	.Ltmp2234 # Offset: 1000
    000003ea: 	addq	$0x1, %rbx
    000003ee: 	movb	%cl, (%rsi)
    000003f0: 	cmpq	%rbx, %rbp
    000003f3: 	jne	.Ltmp2229 # Offset: 1011
.Ltmp2402:
    000003f5: 	leaq	0x100(%rsp), %rax
    000003fd: 	leaq	0x80(%rsp), %rcx
    00000405: 	leaq	DATAat0x27268(%rip), %r12
    0000040c: 	movq	%rcx, %rsi
    0000040f: 	movq	%rax, %rdi
    00000412: 	movq	%rax, %rbx
    00000415: 	leaq	0x1f40(%r15), %r14
    0000041c: 	movq	%r12, %rdx
    0000041f: 	movq	%rax, 0x10(%rsp)
    00000424: 	movq	%r14, 0x30(%rsp)
    00000429: 	movq	%rcx, 0x20(%rsp)
    0000042e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1070
    00000433: 	movq	%rbx, %rdx
    00000436: 	movq	%r14, %rsi
    00000439: 	movq	%r15, %rdi
    0000043c: 	callq	"_Z12test_reverseI20BidirectionalPointerIhEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1" # Offset: 1084
    00000441: 	movq	0x100(%rsp), %rdi
    00000449: 	leaq	0x110(%rsp), %rax
    00000451: 	movq	%rax, 0x8(%rsp)
    00000456: 	cmpq	%rax, %rdi
    00000459: 	je	.Ltmp2235 # Offset: 1113
    0000045b: 	movq	0x110(%rsp), %rax
    00000463: 	leaq	0x1(%rax), %rsi
    00000467: 	callq	_ZdlPvm@PLT # Offset: 1127
.Ltmp2235:
    0000046c: 	movq	0x10(%rsp), %rbx
    00000471: 	movq	0x20(%rsp), %rsi
    00000476: 	leaq	DATAat0x27284(%rip), %rdx
    0000047d: 	movq	%rbx, %rdi
    00000480: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1152
    00000485: 	movq	0x30(%rsp), %rsi
    0000048a: 	movq	%rbx, %rdx
    0000048d: 	movq	%r15, %rdi
    00000490: 	callq	"_Z12test_reverseI20BidirectionalPointerIhEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1" # Offset: 1168
    00000495: 	movq	0x100(%rsp), %rdi
    0000049d: 	cmpq	0x8(%rsp), %rdi
    000004a2: 	je	.Ltmp2236 # Offset: 1186
    000004a4: 	movq	0x110(%rsp), %rax
    000004ac: 	leaq	0x1(%rax), %rsi
    000004b0: 	callq	_ZdlPvm@PLT # Offset: 1200
.Ltmp2236:
    000004b5: 	movq	0x10(%rsp), %rbx
    000004ba: 	movq	0x20(%rsp), %rsi
    000004bf: 	leaq	DATAat0x272a2(%rip), %rdx
    000004c6: 	movq	%rbx, %rdi
    000004c9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1225
    000004ce: 	movq	0x30(%rsp), %rsi
    000004d3: 	movq	%rbx, %rdx
    000004d6: 	movq	%r15, %rdi
    000004d9: 	callq	"_Z12test_reverseI20BidirectionalPointerIhEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1241
    000004de: 	movq	0x100(%rsp), %rdi
    000004e6: 	cmpq	0x8(%rsp), %rdi
    000004eb: 	je	.Ltmp2237 # Offset: 1259
    000004ed: 	movq	0x110(%rsp), %rax
    000004f5: 	leaq	0x1(%rax), %rsi
    000004f9: 	callq	_ZdlPvm@PLT # Offset: 1273
.Ltmp2237:
    000004fe: 	movq	0x10(%rsp), %rbx
    00000503: 	movq	0x20(%rsp), %rsi
    00000508: 	leaq	DATAat0x272be(%rip), %rdx
    0000050f: 	movq	%rbx, %rdi
    00000512: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1298
    00000517: 	movq	0x30(%rsp), %rsi
    0000051c: 	movq	%rbx, %rdx
    0000051f: 	movq	%r15, %rdi
    00000522: 	callq	"_Z12test_reverseIPhPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1" # Offset: 1314
    00000527: 	movq	0x100(%rsp), %rdi
    0000052f: 	cmpq	0x8(%rsp), %rdi
    00000534: 	je	.Ltmp2238 # Offset: 1332
    00000536: 	movq	0x110(%rsp), %rax
    0000053e: 	leaq	0x1(%rax), %rsi
    00000542: 	callq	_ZdlPvm@PLT # Offset: 1346
.Ltmp2238:
    00000547: 	movq	0x10(%rsp), %rbx
    0000054c: 	movq	0x20(%rsp), %rsi
    00000551: 	leaq	DATAat0x272da(%rip), %rdx
    00000558: 	movq	%rbx, %rdi
    0000055b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1371
    00000560: 	movq	0x30(%rsp), %rsi
    00000565: 	movq	%rbx, %rdx
    00000568: 	movq	%r15, %rdi
    0000056b: 	callq	"_Z12test_reverseIPhPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1" # Offset: 1387
    00000570: 	movq	0x100(%rsp), %rdi
    00000578: 	cmpq	0x8(%rsp), %rdi
    0000057d: 	je	.Ltmp2239 # Offset: 1405
    0000057f: 	movq	0x110(%rsp), %rax
    00000587: 	leaq	0x1(%rax), %rsi
    0000058b: 	callq	_ZdlPvm@PLT # Offset: 1419
.Ltmp2239:
    00000590: 	movq	0x10(%rsp), %rbx
    00000595: 	movq	0x20(%rsp), %rsi
    0000059a: 	leaq	DATAat0x272f8(%rip), %rdx
    000005a1: 	movq	%rbx, %rdi
    000005a4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1444
    000005a9: 	movq	0x30(%rsp), %rsi
    000005ae: 	movq	%rbx, %rdx
    000005b1: 	movq	%r15, %rdi
    000005b4: 	callq	"_Z12test_reverseIPhPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1460
    000005b9: 	movq	0x100(%rsp), %rdi
    000005c1: 	cmpq	0x8(%rsp), %rdi
    000005c6: 	je	.Ltmp2240 # Offset: 1478
    000005c8: 	movq	0x110(%rsp), %rax
    000005d0: 	leaq	0x1(%rax), %rsi
    000005d4: 	callq	_ZdlPvm@PLT # Offset: 1492
.Ltmp2240:
    000005d9: 	movq	0x10(%rsp), %rbx
    000005de: 	movq	0x20(%rsp), %rsi
    000005e3: 	leaq	DATAat0x27314(%rip), %rdx
    000005ea: 	movq	%rbx, %rdi
    000005ed: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1517
    000005f2: 	movq	0x30(%rsp), %rsi
    000005f7: 	movq	%rbx, %rcx
    000005fa: 	leaq	_Z13fast_reverse2IPhEvT_S1_(%rip), %rdx
    00000601: 	movq	%r15, %rdi
    00000604: 	callq	_Z12test_reverseIPhPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1540
    00000609: 	movq	0x100(%rsp), %rdi
    00000611: 	cmpq	0x8(%rsp), %rdi
    00000616: 	je	.Ltmp2241 # Offset: 1558
    00000618: 	movq	0x110(%rsp), %rax
    00000620: 	leaq	0x1(%rax), %rsi
    00000624: 	callq	_ZdlPvm@PLT # Offset: 1572
.Ltmp2241:
    00000629: 	movq	0x10(%rsp), %rbx
    0000062e: 	movq	0x20(%rsp), %rsi
    00000633: 	leaq	DATAat0x27331(%rip), %rdx
    0000063a: 	movq	%rbx, %rdi
    0000063d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1597
    00000642: 	movq	0x30(%rsp), %rsi
    00000647: 	movq	%rbx, %rcx
    0000064a: 	leaq	_Z13fast_reverse3IPhEvT_S1_(%rip), %rdx
    00000651: 	movq	%r15, %rdi
    00000654: 	callq	_Z12test_reverseIPhPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1620
    00000659: 	movq	0x100(%rsp), %rdi
    00000661: 	cmpq	0x8(%rsp), %rdi
    00000666: 	je	.Ltmp2242 # Offset: 1638
    00000668: 	movq	0x110(%rsp), %rax
    00000670: 	leaq	0x1(%rax), %rsi
    00000674: 	callq	_ZdlPvm@PLT # Offset: 1652
.Ltmp2242:
    00000679: 	movq	0x10(%rsp), %rbx
    0000067e: 	movq	0x20(%rsp), %rsi
    00000683: 	leaq	DATAat0x2734e(%rip), %rdx
    0000068a: 	movq	%rbx, %rdi
    0000068d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1677
    00000692: 	movq	0x30(%rsp), %rsi
    00000697: 	movq	%rbx, %rcx
    0000069a: 	leaq	_Z13fast_reverse4IPhEvT_S1_(%rip), %rdx
    000006a1: 	movq	%r15, %rdi
    000006a4: 	callq	_Z12test_reverseIPhPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1700
    000006a9: 	movq	0x100(%rsp), %rdi
    000006b1: 	cmpq	0x8(%rsp), %rdi
    000006b6: 	je	.Ltmp2243 # Offset: 1718
    000006b8: 	movq	0x110(%rsp), %rax
    000006c0: 	leaq	0x1(%rax), %rsi
    000006c4: 	callq	_ZdlPvm@PLT # Offset: 1732
.Ltmp2243:
    000006c9: 	movq	0x20(%rsp), %rbx
    000006ce: 	leaq	0xa0(%rsp), %rdi
    000006d6: 	leaq	DATAat0x2736b(%rip), %rdx
    000006dd: 	movq	%rbx, %rsi
    000006e0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1760
    000006e5: 	movl	iterations(%rip), %edx
    000006eb: 	xorl	%r8d, %r8d
    000006ee: 	xorl	%ecx, %ecx
    000006f0: 	movl	$0x1f40, %esi
    000006f5: 	movq	0xa0(%rsp), %rdi
    000006fd: 	callq	_Z9summarizePKciiii # Offset: 1789
    00000702: 	movl	0x5c(%rsp), %ecx
    00000706: 	movq	%r12, %rdx
    00000709: 	movq	%rbx, %rsi
    0000070c: 	testl	%ecx, %ecx
    0000070e: 	leal	0x3fff(%rcx), %eax
    00000714: 	cmovnsl	%ecx, %eax
    00000717: 	sarl	$0xe, %eax
    0000071a: 	movl	%eax, 0x6c(%rsp)
    0000071e: 	movl	%eax, iterations(%rip)
    00000724: 	leaq	0xe0(%rsp), %rax
    0000072c: 	movq	%rax, %rdi
    0000072f: 	movq	%rax, 0x48(%rsp)
    00000734: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1844
    00000739: 	movl	iterations(%rip), %ebx
    0000073f: 	leaq	DATAat0x271e0(%rip), %rsi
    00000746: 	movl	$0x1, %edi
    0000074b: 	xorl	%eax, %eax
    0000074d: 	movl	%ebx, 0x68(%rsp)
    00000751: 	callq	__printf_chk@PLT # Offset: 1873
    00000756: 	leaq	DATAat0x27210(%rip), %rsi
    0000075d: 	movl	$0x1, %edi
    00000762: 	xorl	%eax, %eax
    00000764: 	callq	__printf_chk@PLT # Offset: 1892
    00000769: 	movslq	%ebx, %rax
    0000076c: 	xorl	%ebp, %ebp
    0000076e: 	movl	$0x4, %ebx
    00000773: 	movq	%rax, 0x40(%rsp)
    00000778: 	leaq	0x78(%rsp), %rax
    0000077d: 	movq	%rax, 0x50(%rsp)
    00000782: 	jmp	.Ltmp2244 # Offset: 1922
    00000787: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2250:
    00000790: 	movzbl	(%r14), %eax
    00000794: 	movb	%al, 0x110(%rsp)
    0000079b: 	movq	0x8(%rsp), %rax
.Ltmp2252:
    000007a0: 	movq	%r12, 0x108(%rsp)
    000007a8: 	movq	0x10(%rsp), %rdx
    000007ad: 	movq	%r13, %rsi
    000007b0: 	movq	%r15, %rdi
    000007b3: 	movb	$0x0, (%rax,%r12)
    000007b8: 	callq	"_Z12test_reverseI20BidirectionalPointerIhEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1" # Offset: 1976
    000007bd: 	movq	0x100(%rsp), %rdi
    000007c5: 	cmpq	0x8(%rsp), %rdi
    000007ca: 	je	.Ltmp2245 # Offset: 1994
    000007cc: 	movq	0x110(%rsp), %rax
    000007d4: 	leaq	0x1(%rax), %rsi
    000007d8: 	callq	_ZdlPvm@PLT # Offset: 2008
.Ltmp2245:
    000007dd: 	pxor	%xmm1, %xmm1
    000007e1: 	pxor	%xmm2, %xmm2
    000007e5: 	movl	%ebx, %r8d
    000007e8: 	movl	%ebp, %edx
    000007ea: 	cvtsi2sd	%ebx, %xmm2
    000007ee: 	movq	results(%rip), %rax
    000007f5: 	movq	0xe0(%rsp), %rcx
    000007fd: 	leaq	DATAat0x27240(%rip), %rsi
    00000804: 	cvtsi2sdl	iterations(%rip), %xmm1
    0000080c: 	movl	$0x1, %edi
    00000811: 	movsd	(%rax), %xmm0
    00000815: 	movl	$0x2, %eax
    0000081a: 	mulsd	%xmm2, %xmm1
    0000081e: 	divsd	DATAat0x276b0(%rip), %xmm1
    00000826: 	divsd	%xmm0, %xmm1
    0000082a: 	callq	__printf_chk@PLT # Offset: 2090
    0000082f: 	movl	$0x0, current_test(%rip)
    00000839: 	addl	$0x1, %ebp
    0000083c: 	addl	%ebx, %ebx
    0000083e: 	cmpl	$0x19, %ebp
    00000841: 	je	.Ltmp2246 # Offset: 2113
.Ltmp2244:
    00000847: 	movl	$0x4000000, %eax
    0000084c: 	movq	0xe0(%rsp), %r14
    00000854: 	movq	0xe8(%rsp), %r12
    0000085c: 	movslq	%ebx, %r13
    0000085f: 	cltd
    00000860: 	idivl	%ebx
    00000862: 	movl	$0x4, %edx
    00000867: 	cltq
    00000869: 	imulq	0x40(%rsp), %rax
    0000086f: 	cmpq	%rdx, %rax
    00000872: 	cmovlq	%rdx, %rax
    00000876: 	movl	$0x70000000, %edx
    0000087b: 	cmpq	%rdx, %rax
    0000087e: 	cmovgq	%rdx, %rax
    00000882: 	addq	%r15, %r13
    00000885: 	addq	$0x1, %rax
    00000889: 	andq	$-0x2, %rax
    0000088d: 	movl	%eax, iterations(%rip)
    00000893: 	movq	0x8(%rsp), %rax
    00000898: 	movq	%rax, 0x100(%rsp)
    000008a0: 	movq	%r14, %rax
    000008a3: 	addq	%r12, %rax
    000008a6: 	je	.Ltmp2247 # Offset: 2214
    000008a8: 	testq	%r14, %r14
    000008ab: 	je	.Ltmp2248 # Offset: 2219
.Ltmp2247:
    000008b1: 	movq	%r12, 0x78(%rsp)
    000008b6: 	cmpq	$0xf, %r12
    000008ba: 	ja	.Ltmp2249 # Offset: 2234
    000008bc: 	cmpq	$0x1, %r12
    000008c0: 	je	.Ltmp2250 # Offset: 2240
    000008c6: 	testq	%r12, %r12
    000008c9: 	jne	.Ltmp2251 # Offset: 2249
    000008cf: 	movq	0x8(%rsp), %rax
    000008d4: 	jmp	.Ltmp2252 # Offset: 2260
    000008d9: 	nopl	(%rax) # Size: 7
.Ltmp2214:
    000008e0: 	addq	$0x20, %rbp
    000008e4: 	cmpq	%rbx, %rbp
    000008e7: 	jne	.Ltmp2215 # Offset: 2279
    000008ed: 	addq	$0x8, %r13
    000008f1: 	cmpq	%r13, %r15
    000008f4: 	ja	.Ltmp2216 # Offset: 2292
    000008fa: 	jmp	.Ltmp2253 # Offset: 2298
    000008ff: 	nop # Size: 1
.Ltmp2249:
    00000900: 	movq	0x50(%rsp), %rsi
    00000905: 	movq	0x10(%rsp), %rdi
    0000090a: 	xorl	%edx, %edx
    0000090c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2316
    00000911: 	movq	%rax, 0x100(%rsp)
    00000919: 	movq	%rax, %rdi
    0000091c: 	movq	0x78(%rsp), %rax
    00000921: 	movq	%rax, 0x110(%rsp)
.Ltmp2412:
    00000929: 	movq	%r12, %rdx
    0000092c: 	movq	%r14, %rsi
    0000092f: 	callq	memcpy@PLT # Offset: 2351
    00000934: 	movq	0x78(%rsp), %r12
    00000939: 	movq	0x100(%rsp), %rax
    00000941: 	jmp	.Ltmp2252 # Offset: 2369
    00000946: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2246:
    00000950: 	movl	0x68(%rsp), %eax
    00000954: 	movq	0xe0(%rsp), %rdi
    0000095c: 	movl	%eax, iterations(%rip)
    00000962: 	leaq	0xf0(%rsp), %rax
    0000096a: 	movq	%rax, 0x40(%rsp)
    0000096f: 	cmpq	%rax, %rdi
    00000972: 	je	.Ltmp2254 # Offset: 2418
    00000974: 	movq	0xf0(%rsp), %rax
    0000097c: 	leaq	0x1(%rax), %rsi
    00000980: 	callq	_ZdlPvm@PLT # Offset: 2432
.Ltmp2254:
    00000985: 	movq	0x20(%rsp), %rsi
    0000098a: 	movq	0x48(%rsp), %rdi
    0000098f: 	leaq	DATAat0x27284(%rip), %rdx
    00000996: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2454
    0000099b: 	movl	iterations(%rip), %ebx
    000009a1: 	leaq	DATAat0x271e0(%rip), %rsi
    000009a8: 	movl	$0x1, %edi
    000009ad: 	xorl	%eax, %eax
    000009af: 	movl	%ebx, 0x68(%rsp)
    000009b3: 	callq	__printf_chk@PLT # Offset: 2483
    000009b8: 	leaq	DATAat0x27210(%rip), %rsi
    000009bf: 	movl	$0x1, %edi
    000009c4: 	xorl	%eax, %eax
    000009c6: 	callq	__printf_chk@PLT # Offset: 2502
    000009cb: 	movslq	%ebx, %rax
    000009ce: 	xorl	%ebp, %ebp
    000009d0: 	movl	$0x4, %ebx
    000009d5: 	movq	%rax, 0x50(%rsp)
    000009da: 	jmp	.Ltmp2255 # Offset: 2522
    000009df: 	nop # Size: 1
.Ltmp2261:
    000009e0: 	movzbl	(%r14), %eax
    000009e4: 	movb	%al, 0x110(%rsp)
    000009eb: 	movq	0x8(%rsp), %rax
.Ltmp2263:
    000009f0: 	movq	%r12, 0x108(%rsp)
    000009f8: 	movq	0x10(%rsp), %rdx
    000009fd: 	movq	%r13, %rsi
    00000a00: 	movq	%r15, %rdi
    00000a03: 	movb	$0x0, (%rax,%r12)
    00000a08: 	callq	"_Z12test_reverseI20BidirectionalPointerIhEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1" # Offset: 2568
    00000a0d: 	movq	0x100(%rsp), %rdi
    00000a15: 	cmpq	0x8(%rsp), %rdi
    00000a1a: 	je	.Ltmp2256 # Offset: 2586
    00000a1c: 	movq	0x110(%rsp), %rax
    00000a24: 	leaq	0x1(%rax), %rsi
    00000a28: 	callq	_ZdlPvm@PLT # Offset: 2600
.Ltmp2256:
    00000a2d: 	pxor	%xmm1, %xmm1
    00000a31: 	pxor	%xmm2, %xmm2
    00000a35: 	movl	%ebx, %r8d
    00000a38: 	movl	%ebp, %edx
    00000a3a: 	cvtsi2sd	%ebx, %xmm2
    00000a3e: 	movq	results(%rip), %rax
    00000a45: 	movq	0xe0(%rsp), %rcx
    00000a4d: 	leaq	DATAat0x27240(%rip), %rsi
    00000a54: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000a5c: 	movl	$0x1, %edi
    00000a61: 	movsd	(%rax), %xmm0
    00000a65: 	movl	$0x2, %eax
    00000a6a: 	mulsd	%xmm2, %xmm1
    00000a6e: 	divsd	DATAat0x276b0(%rip), %xmm1
    00000a76: 	divsd	%xmm0, %xmm1
    00000a7a: 	callq	__printf_chk@PLT # Offset: 2682
    00000a7f: 	movl	$0x0, current_test(%rip)
    00000a89: 	addl	$0x1, %ebp
    00000a8c: 	addl	%ebx, %ebx
    00000a8e: 	cmpl	$0x19, %ebp
    00000a91: 	je	.Ltmp2257 # Offset: 2705
.Ltmp2255:
    00000a97: 	movl	$0x4000000, %eax
    00000a9c: 	movq	0xe0(%rsp), %r14
    00000aa4: 	movq	0xe8(%rsp), %r12
    00000aac: 	movslq	%ebx, %r13
    00000aaf: 	cltd
    00000ab0: 	idivl	%ebx
    00000ab2: 	movl	$0x4, %edx
    00000ab7: 	cltq
    00000ab9: 	imulq	0x50(%rsp), %rax
    00000abf: 	cmpq	%rdx, %rax
    00000ac2: 	cmovlq	%rdx, %rax
    00000ac6: 	movl	$0x70000000, %edx
    00000acb: 	cmpq	%rdx, %rax
    00000ace: 	cmovgq	%rdx, %rax
    00000ad2: 	addq	%r15, %r13
    00000ad5: 	addq	$0x1, %rax
    00000ad9: 	andq	$-0x2, %rax
    00000add: 	movl	%eax, iterations(%rip)
    00000ae3: 	movq	0x8(%rsp), %rax
    00000ae8: 	movq	%rax, 0x100(%rsp)
    00000af0: 	movq	%r14, %rax
    00000af3: 	addq	%r12, %rax
    00000af6: 	je	.Ltmp2258 # Offset: 2806
    00000af8: 	testq	%r14, %r14
    00000afb: 	je	.Ltmp2259 # Offset: 2811
.Ltmp2258:
    00000b01: 	movq	%r12, 0x78(%rsp)
    00000b06: 	cmpq	$0xf, %r12
    00000b0a: 	ja	.Ltmp2260 # Offset: 2826
    00000b0c: 	cmpq	$0x1, %r12
    00000b10: 	je	.Ltmp2261 # Offset: 2832
    00000b16: 	testq	%r12, %r12
    00000b19: 	jne	.Ltmp2262 # Offset: 2841
    00000b1f: 	movq	0x8(%rsp), %rax
    00000b24: 	jmp	.Ltmp2263 # Offset: 2852
    00000b29: 	nopl	(%rax) # Size: 7
.Ltmp2260:
    00000b30: 	movq	0x10(%rsp), %rdi
    00000b35: 	leaq	0x78(%rsp), %rsi
    00000b3a: 	xorl	%edx, %edx
    00000b3c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2876
    00000b41: 	movq	%rax, 0x100(%rsp)
    00000b49: 	movq	%rax, %rdi
    00000b4c: 	movq	0x78(%rsp), %rax
    00000b51: 	movq	%rax, 0x110(%rsp)
.Ltmp2419:
    00000b59: 	movq	%r12, %rdx
    00000b5c: 	movq	%r14, %rsi
    00000b5f: 	callq	memcpy@PLT # Offset: 2911
    00000b64: 	movq	0x78(%rsp), %r12
    00000b69: 	movq	0x100(%rsp), %rax
    00000b71: 	jmp	.Ltmp2263 # Offset: 2929
    00000b76: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2257:
    00000b80: 	movl	0x68(%rsp), %eax
    00000b84: 	movq	0xe0(%rsp), %rdi
    00000b8c: 	movl	%eax, iterations(%rip)
    00000b92: 	cmpq	0x40(%rsp), %rdi
    00000b97: 	je	.Ltmp2264 # Offset: 2967
    00000b99: 	movq	0xf0(%rsp), %rax
    00000ba1: 	leaq	0x1(%rax), %rsi
    00000ba5: 	callq	_ZdlPvm@PLT # Offset: 2981
.Ltmp2264:
    00000baa: 	movq	0x20(%rsp), %rsi
    00000baf: 	movq	0x48(%rsp), %rdi
    00000bb4: 	leaq	DATAat0x272a2(%rip), %rdx
    00000bbb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3003
    00000bc0: 	movl	iterations(%rip), %ebx
    00000bc6: 	leaq	DATAat0x271e0(%rip), %rsi
    00000bcd: 	movl	$0x1, %edi
    00000bd2: 	xorl	%eax, %eax
    00000bd4: 	movl	%ebx, 0x68(%rsp)
    00000bd8: 	callq	__printf_chk@PLT # Offset: 3032
    00000bdd: 	leaq	DATAat0x27210(%rip), %rsi
    00000be4: 	movl	$0x1, %edi
    00000be9: 	xorl	%eax, %eax
    00000beb: 	callq	__printf_chk@PLT # Offset: 3051
    00000bf0: 	movslq	%ebx, %rax
    00000bf3: 	xorl	%ebp, %ebp
    00000bf5: 	movl	$0x4, %ebx
    00000bfa: 	movq	%rax, 0x50(%rsp)
    00000bff: 	jmp	.Ltmp2265 # Offset: 3071
    00000c04: 	nopl	(%rax) # Size: 4
.Ltmp2271:
    00000c08: 	movzbl	(%r14), %eax
    00000c0c: 	movb	%al, 0x110(%rsp)
    00000c13: 	movq	0x8(%rsp), %rax
.Ltmp2273:
    00000c18: 	movq	%r12, 0x108(%rsp)
    00000c20: 	movq	0x10(%rsp), %rdx
    00000c25: 	movq	%r13, %rsi
    00000c28: 	movq	%r15, %rdi
    00000c2b: 	movb	$0x0, (%rax,%r12)
    00000c30: 	callq	"_Z12test_reverseI20BidirectionalPointerIhEPFvS1_S1_EEvT_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3120
    00000c35: 	movq	0x100(%rsp), %rdi
    00000c3d: 	cmpq	0x8(%rsp), %rdi
    00000c42: 	je	.Ltmp2266 # Offset: 3138
    00000c44: 	movq	0x110(%rsp), %rax
    00000c4c: 	leaq	0x1(%rax), %rsi
    00000c50: 	callq	_ZdlPvm@PLT # Offset: 3152
.Ltmp2266:
    00000c55: 	pxor	%xmm1, %xmm1
    00000c59: 	pxor	%xmm2, %xmm2
    00000c5d: 	movl	%ebx, %r8d
    00000c60: 	movl	%ebp, %edx
    00000c62: 	cvtsi2sd	%ebx, %xmm2
    00000c66: 	movq	results(%rip), %rax
    00000c6d: 	movq	0xe0(%rsp), %rcx
    00000c75: 	leaq	DATAat0x27240(%rip), %rsi
    00000c7c: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000c84: 	movl	$0x1, %edi
    00000c89: 	movsd	(%rax), %xmm0
    00000c8d: 	movl	$0x2, %eax
    00000c92: 	mulsd	%xmm2, %xmm1
    00000c96: 	divsd	DATAat0x276b0(%rip), %xmm1
    00000c9e: 	divsd	%xmm0, %xmm1
    00000ca2: 	callq	__printf_chk@PLT # Offset: 3234
    00000ca7: 	movl	$0x0, current_test(%rip)
    00000cb1: 	addl	$0x1, %ebp
    00000cb4: 	addl	%ebx, %ebx
    00000cb6: 	cmpl	$0x19, %ebp
    00000cb9: 	je	.Ltmp2267 # Offset: 3257
.Ltmp2265:
    00000cbf: 	movl	$0x4000000, %eax
    00000cc4: 	movq	0xe0(%rsp), %r14
    00000ccc: 	movq	0xe8(%rsp), %r12
    00000cd4: 	movslq	%ebx, %r13
    00000cd7: 	cltd
    00000cd8: 	idivl	%ebx
    00000cda: 	movl	$0x4, %edx
    00000cdf: 	cltq
    00000ce1: 	imulq	0x50(%rsp), %rax
    00000ce7: 	cmpq	%rdx, %rax
    00000cea: 	cmovlq	%rdx, %rax
    00000cee: 	movl	$0x70000000, %edx
    00000cf3: 	cmpq	%rdx, %rax
    00000cf6: 	cmovgq	%rdx, %rax
    00000cfa: 	addq	%r15, %r13
    00000cfd: 	addq	$0x1, %rax
    00000d01: 	andq	$-0x2, %rax
    00000d05: 	movl	%eax, iterations(%rip)
    00000d0b: 	movq	0x8(%rsp), %rax
    00000d10: 	movq	%rax, 0x100(%rsp)
    00000d18: 	movq	%r14, %rax
    00000d1b: 	addq	%r12, %rax
    00000d1e: 	je	.Ltmp2268 # Offset: 3358
    00000d20: 	testq	%r14, %r14
    00000d23: 	je	.Ltmp2269 # Offset: 3363
.Ltmp2268:
    00000d29: 	movq	%r12, 0x78(%rsp)
    00000d2e: 	cmpq	$0xf, %r12
    00000d32: 	ja	.Ltmp2270 # Offset: 3378
    00000d34: 	cmpq	$0x1, %r12
    00000d38: 	je	.Ltmp2271 # Offset: 3384
    00000d3e: 	testq	%r12, %r12
    00000d41: 	jne	.Ltmp2272 # Offset: 3393
    00000d47: 	movq	0x8(%rsp), %rax
    00000d4c: 	jmp	.Ltmp2273 # Offset: 3404
    00000d51: 	nopl	(%rax) # Size: 7
.Ltmp2270:
    00000d58: 	movq	0x10(%rsp), %rdi
    00000d5d: 	leaq	0x78(%rsp), %rsi
    00000d62: 	xorl	%edx, %edx
    00000d64: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3428
    00000d69: 	movq	%rax, 0x100(%rsp)
    00000d71: 	movq	%rax, %rdi
    00000d74: 	movq	0x78(%rsp), %rax
    00000d79: 	movq	%rax, 0x110(%rsp)
.Ltmp2418:
    00000d81: 	movq	%r12, %rdx
    00000d84: 	movq	%r14, %rsi
    00000d87: 	callq	memcpy@PLT # Offset: 3463
    00000d8c: 	movq	0x78(%rsp), %r12
    00000d91: 	movq	0x100(%rsp), %rax
    00000d99: 	jmp	.Ltmp2273 # Offset: 3481
    00000d9e: 	nop # Size: 2
.Ltmp2267:
    00000da0: 	movl	0x68(%rsp), %eax
    00000da4: 	movq	0xe0(%rsp), %rdi
    00000dac: 	movl	%eax, iterations(%rip)
    00000db2: 	cmpq	0x40(%rsp), %rdi
    00000db7: 	je	.Ltmp2274 # Offset: 3511
    00000db9: 	movq	0xf0(%rsp), %rax
    00000dc1: 	leaq	0x1(%rax), %rsi
    00000dc5: 	callq	_ZdlPvm@PLT # Offset: 3525
.Ltmp2274:
    00000dca: 	movq	0x20(%rsp), %rsi
    00000dcf: 	movq	0x48(%rsp), %rdi
    00000dd4: 	leaq	DATAat0x272be(%rip), %rdx
    00000ddb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3547
    00000de0: 	movl	iterations(%rip), %ebx
    00000de6: 	leaq	DATAat0x271e0(%rip), %rsi
    00000ded: 	movl	$0x1, %edi
    00000df2: 	xorl	%eax, %eax
    00000df4: 	movl	%ebx, 0x68(%rsp)
    00000df8: 	callq	__printf_chk@PLT # Offset: 3576
    00000dfd: 	leaq	DATAat0x27210(%rip), %rsi
    00000e04: 	movl	$0x1, %edi
    00000e09: 	xorl	%eax, %eax
    00000e0b: 	callq	__printf_chk@PLT # Offset: 3595
    00000e10: 	movslq	%ebx, %rax
    00000e13: 	xorl	%ebp, %ebp
    00000e15: 	movl	$0x4, %ebx
    00000e1a: 	movq	%rax, 0x50(%rsp)
    00000e1f: 	jmp	.Ltmp2275 # Offset: 3615
    00000e24: 	nopl	(%rax) # Size: 4
.Ltmp2281:
    00000e28: 	movzbl	(%r14), %eax
    00000e2c: 	movb	%al, 0x110(%rsp)
    00000e33: 	movq	0x8(%rsp), %rax
.Ltmp2283:
    00000e38: 	movq	%r12, 0x108(%rsp)
    00000e40: 	movq	0x10(%rsp), %rdx
    00000e45: 	movq	%r13, %rsi
    00000e48: 	movq	%r15, %rdi
    00000e4b: 	movb	$0x0, (%rax,%r12)
    00000e50: 	callq	"_Z12test_reverseIPhPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1" # Offset: 3664
    00000e55: 	movq	0x100(%rsp), %rdi
    00000e5d: 	cmpq	0x8(%rsp), %rdi
    00000e62: 	je	.Ltmp2276 # Offset: 3682
    00000e64: 	movq	0x110(%rsp), %rax
    00000e6c: 	leaq	0x1(%rax), %rsi
    00000e70: 	callq	_ZdlPvm@PLT # Offset: 3696
.Ltmp2276:
    00000e75: 	pxor	%xmm1, %xmm1
    00000e79: 	pxor	%xmm2, %xmm2
    00000e7d: 	movl	%ebx, %r8d
    00000e80: 	movl	%ebp, %edx
    00000e82: 	cvtsi2sd	%ebx, %xmm2
    00000e86: 	movq	results(%rip), %rax
    00000e8d: 	movq	0xe0(%rsp), %rcx
    00000e95: 	leaq	DATAat0x27240(%rip), %rsi
    00000e9c: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000ea4: 	movl	$0x1, %edi
    00000ea9: 	movsd	(%rax), %xmm0
    00000ead: 	movl	$0x2, %eax
    00000eb2: 	mulsd	%xmm2, %xmm1
    00000eb6: 	divsd	DATAat0x276b0(%rip), %xmm1
    00000ebe: 	divsd	%xmm0, %xmm1
    00000ec2: 	callq	__printf_chk@PLT # Offset: 3778
    00000ec7: 	movl	$0x0, current_test(%rip)
    00000ed1: 	addl	$0x1, %ebp
    00000ed4: 	addl	%ebx, %ebx
    00000ed6: 	cmpl	$0x19, %ebp
    00000ed9: 	je	.Ltmp2277 # Offset: 3801
.Ltmp2275:
    00000edf: 	movl	$0x4000000, %eax
    00000ee4: 	movq	0xe0(%rsp), %r14
    00000eec: 	movq	0xe8(%rsp), %r12
    00000ef4: 	movslq	%ebx, %r13
    00000ef7: 	cltd
    00000ef8: 	idivl	%ebx
    00000efa: 	movl	$0x4, %edx
    00000eff: 	cltq
    00000f01: 	imulq	0x50(%rsp), %rax
    00000f07: 	cmpq	%rdx, %rax
    00000f0a: 	cmovlq	%rdx, %rax
    00000f0e: 	movl	$0x70000000, %edx
    00000f13: 	cmpq	%rdx, %rax
    00000f16: 	cmovgq	%rdx, %rax
    00000f1a: 	addq	%r15, %r13
    00000f1d: 	addq	$0x1, %rax
    00000f21: 	andq	$-0x2, %rax
    00000f25: 	movl	%eax, iterations(%rip)
    00000f2b: 	movq	0x8(%rsp), %rax
    00000f30: 	movq	%rax, 0x100(%rsp)
    00000f38: 	movq	%r14, %rax
    00000f3b: 	addq	%r12, %rax
    00000f3e: 	je	.Ltmp2278 # Offset: 3902
    00000f40: 	testq	%r14, %r14
    00000f43: 	je	.Ltmp2279 # Offset: 3907
.Ltmp2278:
    00000f49: 	movq	%r12, 0x78(%rsp)
    00000f4e: 	cmpq	$0xf, %r12
    00000f52: 	ja	.Ltmp2280 # Offset: 3922
    00000f54: 	cmpq	$0x1, %r12
    00000f58: 	je	.Ltmp2281 # Offset: 3928
    00000f5e: 	testq	%r12, %r12
    00000f61: 	jne	.Ltmp2282 # Offset: 3937
    00000f67: 	movq	0x8(%rsp), %rax
    00000f6c: 	jmp	.Ltmp2283 # Offset: 3948
    00000f71: 	nopl	(%rax) # Size: 7
.Ltmp2280:
    00000f78: 	movq	0x10(%rsp), %rdi
    00000f7d: 	leaq	0x78(%rsp), %rsi
    00000f82: 	xorl	%edx, %edx
    00000f84: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3972
    00000f89: 	movq	%rax, 0x100(%rsp)
    00000f91: 	movq	%rax, %rdi
    00000f94: 	movq	0x78(%rsp), %rax
    00000f99: 	movq	%rax, 0x110(%rsp)
.Ltmp2417:
    00000fa1: 	movq	%r12, %rdx
    00000fa4: 	movq	%r14, %rsi
    00000fa7: 	callq	memcpy@PLT # Offset: 4007
    00000fac: 	movq	0x78(%rsp), %r12
    00000fb1: 	movq	0x100(%rsp), %rax
    00000fb9: 	jmp	.Ltmp2283 # Offset: 4025
    00000fbe: 	nop # Size: 2
.Ltmp2277:
    00000fc0: 	movl	0x68(%rsp), %eax
    00000fc4: 	movq	0xe0(%rsp), %rdi
    00000fcc: 	movl	%eax, iterations(%rip)
    00000fd2: 	cmpq	0x40(%rsp), %rdi
    00000fd7: 	je	.Ltmp2284 # Offset: 4055
    00000fd9: 	movq	0xf0(%rsp), %rax
    00000fe1: 	leaq	0x1(%rax), %rsi
    00000fe5: 	callq	_ZdlPvm@PLT # Offset: 4069
.Ltmp2284:
    00000fea: 	movq	0x20(%rsp), %rsi
    00000fef: 	movq	0x48(%rsp), %rdi
    00000ff4: 	leaq	DATAat0x272da(%rip), %rdx
    00000ffb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4091
    00001000: 	movl	iterations(%rip), %ebx
    00001006: 	leaq	DATAat0x271e0(%rip), %rsi
    0000100d: 	movl	$0x1, %edi
    00001012: 	xorl	%eax, %eax
    00001014: 	movl	%ebx, 0x68(%rsp)
    00001018: 	callq	__printf_chk@PLT # Offset: 4120
    0000101d: 	leaq	DATAat0x27210(%rip), %rsi
    00001024: 	movl	$0x1, %edi
    00001029: 	xorl	%eax, %eax
    0000102b: 	callq	__printf_chk@PLT # Offset: 4139
    00001030: 	movslq	%ebx, %rax
    00001033: 	xorl	%ebp, %ebp
    00001035: 	movl	$0x4, %ebx
    0000103a: 	movq	%rax, 0x50(%rsp)
    0000103f: 	jmp	.Ltmp2285 # Offset: 4159
    00001044: 	nopl	(%rax) # Size: 4
.Ltmp2291:
    00001048: 	movzbl	(%r14), %eax
    0000104c: 	movb	%al, 0x110(%rsp)
    00001053: 	movq	0x8(%rsp), %rax
.Ltmp2293:
    00001058: 	movq	%r12, 0x108(%rsp)
    00001060: 	movq	0x10(%rsp), %rdx
    00001065: 	movq	%r13, %rsi
    00001068: 	movq	%r15, %rdi
    0000106b: 	movb	$0x0, (%rax,%r12)
    00001070: 	callq	"_Z12test_reverseIPhPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1" # Offset: 4208
    00001075: 	movq	0x100(%rsp), %rdi
    0000107d: 	cmpq	0x8(%rsp), %rdi
    00001082: 	je	.Ltmp2286 # Offset: 4226
    00001084: 	movq	0x110(%rsp), %rax
    0000108c: 	leaq	0x1(%rax), %rsi
    00001090: 	callq	_ZdlPvm@PLT # Offset: 4240
.Ltmp2286:
    00001095: 	pxor	%xmm1, %xmm1
    00001099: 	pxor	%xmm2, %xmm2
    0000109d: 	movl	%ebx, %r8d
    000010a0: 	movl	%ebp, %edx
    000010a2: 	cvtsi2sd	%ebx, %xmm2
    000010a6: 	movq	results(%rip), %rax
    000010ad: 	movq	0xe0(%rsp), %rcx
    000010b5: 	leaq	DATAat0x27240(%rip), %rsi
    000010bc: 	cvtsi2sdl	iterations(%rip), %xmm1
    000010c4: 	movl	$0x1, %edi
    000010c9: 	movsd	(%rax), %xmm0
    000010cd: 	movl	$0x2, %eax
    000010d2: 	mulsd	%xmm2, %xmm1
    000010d6: 	divsd	DATAat0x276b0(%rip), %xmm1
    000010de: 	divsd	%xmm0, %xmm1
    000010e2: 	callq	__printf_chk@PLT # Offset: 4322
    000010e7: 	movl	$0x0, current_test(%rip)
    000010f1: 	addl	$0x1, %ebp
    000010f4: 	addl	%ebx, %ebx
    000010f6: 	cmpl	$0x19, %ebp
    000010f9: 	je	.Ltmp2287 # Offset: 4345
.Ltmp2285:
    000010ff: 	movl	$0x4000000, %eax
    00001104: 	movq	0xe0(%rsp), %r14
    0000110c: 	movq	0xe8(%rsp), %r12
    00001114: 	movslq	%ebx, %r13
    00001117: 	cltd
    00001118: 	idivl	%ebx
    0000111a: 	movl	$0x4, %edx
    0000111f: 	cltq
    00001121: 	imulq	0x50(%rsp), %rax
    00001127: 	cmpq	%rdx, %rax
    0000112a: 	cmovlq	%rdx, %rax
    0000112e: 	movl	$0x70000000, %edx
    00001133: 	cmpq	%rdx, %rax
    00001136: 	cmovgq	%rdx, %rax
    0000113a: 	addq	%r15, %r13
    0000113d: 	addq	$0x1, %rax
    00001141: 	andq	$-0x2, %rax
    00001145: 	movl	%eax, iterations(%rip)
    0000114b: 	movq	0x8(%rsp), %rax
    00001150: 	movq	%rax, 0x100(%rsp)
    00001158: 	movq	%r14, %rax
    0000115b: 	addq	%r12, %rax
    0000115e: 	je	.Ltmp2288 # Offset: 4446
    00001160: 	testq	%r14, %r14
    00001163: 	je	.Ltmp2289 # Offset: 4451
.Ltmp2288:
    00001169: 	movq	%r12, 0x78(%rsp)
    0000116e: 	cmpq	$0xf, %r12
    00001172: 	ja	.Ltmp2290 # Offset: 4466
    00001174: 	cmpq	$0x1, %r12
    00001178: 	je	.Ltmp2291 # Offset: 4472
    0000117e: 	testq	%r12, %r12
    00001181: 	jne	.Ltmp2292 # Offset: 4481
    00001187: 	movq	0x8(%rsp), %rax
    0000118c: 	jmp	.Ltmp2293 # Offset: 4492
    00001191: 	nopl	(%rax) # Size: 7
.Ltmp2290:
    00001198: 	movq	0x10(%rsp), %rdi
    0000119d: 	leaq	0x78(%rsp), %rsi
    000011a2: 	xorl	%edx, %edx
    000011a4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4516
    000011a9: 	movq	%rax, 0x100(%rsp)
    000011b1: 	movq	%rax, %rdi
    000011b4: 	movq	0x78(%rsp), %rax
    000011b9: 	movq	%rax, 0x110(%rsp)
.Ltmp2416:
    000011c1: 	movq	%r12, %rdx
    000011c4: 	movq	%r14, %rsi
    000011c7: 	callq	memcpy@PLT # Offset: 4551
    000011cc: 	movq	0x78(%rsp), %r12
    000011d1: 	movq	0x100(%rsp), %rax
    000011d9: 	jmp	.Ltmp2293 # Offset: 4569
    000011de: 	nop # Size: 2
.Ltmp2287:
    000011e0: 	movl	0x68(%rsp), %eax
    000011e4: 	movq	0xe0(%rsp), %rdi
    000011ec: 	movl	%eax, iterations(%rip)
    000011f2: 	cmpq	0x40(%rsp), %rdi
    000011f7: 	je	.Ltmp2294 # Offset: 4599
    000011f9: 	movq	0xf0(%rsp), %rax
    00001201: 	leaq	0x1(%rax), %rsi
    00001205: 	callq	_ZdlPvm@PLT # Offset: 4613
.Ltmp2294:
    0000120a: 	movq	0x20(%rsp), %rsi
    0000120f: 	movq	0x48(%rsp), %rdi
    00001214: 	leaq	DATAat0x272f8(%rip), %rdx
    0000121b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4635
    00001220: 	movl	iterations(%rip), %ebx
    00001226: 	leaq	DATAat0x271e0(%rip), %rsi
    0000122d: 	movl	$0x1, %edi
    00001232: 	xorl	%eax, %eax
    00001234: 	movl	%ebx, 0x68(%rsp)
    00001238: 	callq	__printf_chk@PLT # Offset: 4664
    0000123d: 	leaq	DATAat0x27210(%rip), %rsi
    00001244: 	movl	$0x1, %edi
    00001249: 	xorl	%eax, %eax
    0000124b: 	callq	__printf_chk@PLT # Offset: 4683
    00001250: 	movslq	%ebx, %rax
    00001253: 	xorl	%ebp, %ebp
    00001255: 	movl	$0x4, %ebx
    0000125a: 	movq	%rax, 0x50(%rsp)
    0000125f: 	jmp	.Ltmp2295 # Offset: 4703
    00001264: 	nopl	(%rax) # Size: 4
.Ltmp2301:
    00001268: 	cmpq	$0x1, %r12
    0000126c: 	jne	.Ltmp2296 # Offset: 4716
    00001272: 	movzbl	(%r14), %eax
    00001276: 	movb	%al, 0x110(%rsp)
    0000127d: 	movq	0x8(%rsp), %rax
.Ltmp2302:
    00001282: 	movq	%r12, 0x108(%rsp)
    0000128a: 	movq	0x10(%rsp), %rdx
    0000128f: 	movq	%r13, %rsi
    00001292: 	movq	%r15, %rdi
    00001295: 	movb	$0x0, (%rax,%r12)
    0000129a: 	callq	"_Z12test_reverseIPhPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4762
    0000129f: 	movq	0x100(%rsp), %rdi
    000012a7: 	cmpq	0x8(%rsp), %rdi
    000012ac: 	je	.Ltmp2297 # Offset: 4780
    000012ae: 	movq	0x110(%rsp), %rax
    000012b6: 	leaq	0x1(%rax), %rsi
    000012ba: 	callq	_ZdlPvm@PLT # Offset: 4794
.Ltmp2297:
    000012bf: 	pxor	%xmm1, %xmm1
    000012c3: 	pxor	%xmm2, %xmm2
    000012c7: 	movl	%ebx, %r8d
    000012ca: 	movl	%ebp, %edx
    000012cc: 	cvtsi2sd	%ebx, %xmm2
    000012d0: 	movq	results(%rip), %rax
    000012d7: 	movq	0xe0(%rsp), %rcx
    000012df: 	leaq	DATAat0x27240(%rip), %rsi
    000012e6: 	cvtsi2sdl	iterations(%rip), %xmm1
    000012ee: 	movl	$0x1, %edi
    000012f3: 	movsd	(%rax), %xmm0
    000012f7: 	movl	$0x2, %eax
    000012fc: 	mulsd	%xmm2, %xmm1
    00001300: 	divsd	DATAat0x276b0(%rip), %xmm1
    00001308: 	divsd	%xmm0, %xmm1
    0000130c: 	callq	__printf_chk@PLT # Offset: 4876
    00001311: 	movl	$0x0, current_test(%rip)
    0000131b: 	addl	$0x1, %ebp
    0000131e: 	addl	%ebx, %ebx
    00001320: 	cmpl	$0x19, %ebp
    00001323: 	je	.Ltmp2298 # Offset: 4899
.Ltmp2295:
    00001329: 	movl	$0x4000000, %eax
    0000132e: 	movq	0xe0(%rsp), %r14
    00001336: 	movq	0xe8(%rsp), %r12
    0000133e: 	movslq	%ebx, %r13
    00001341: 	cltd
    00001342: 	idivl	%ebx
    00001344: 	movl	$0x4, %edx
    00001349: 	cltq
    0000134b: 	imulq	0x50(%rsp), %rax
    00001351: 	cmpq	%rdx, %rax
    00001354: 	cmovlq	%rdx, %rax
    00001358: 	movl	$0x70000000, %edx
    0000135d: 	cmpq	%rdx, %rax
    00001360: 	cmovgq	%rdx, %rax
    00001364: 	addq	%r15, %r13
    00001367: 	addq	$0x1, %rax
    0000136b: 	andq	$-0x2, %rax
    0000136f: 	movl	%eax, iterations(%rip)
    00001375: 	movq	0x8(%rsp), %rax
    0000137a: 	movq	%rax, 0x100(%rsp)
    00001382: 	movq	%r14, %rax
    00001385: 	addq	%r12, %rax
    00001388: 	je	.Ltmp2299 # Offset: 5000
    0000138a: 	testq	%r14, %r14
    0000138d: 	je	.Ltmp2300 # Offset: 5005
.Ltmp2299:
    00001393: 	movq	%r12, 0x78(%rsp)
    00001398: 	cmpq	$0xf, %r12
    0000139c: 	jbe	.Ltmp2301 # Offset: 5020
    000013a2: 	movq	0x10(%rsp), %rdi
    000013a7: 	leaq	0x78(%rsp), %rsi
    000013ac: 	xorl	%edx, %edx
    000013ae: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5038
    000013b3: 	movq	%rax, 0x100(%rsp)
    000013bb: 	movq	%rax, %rdi
    000013be: 	movq	0x78(%rsp), %rax
    000013c3: 	movq	%rax, 0x110(%rsp)
.Ltmp2420:
    000013cb: 	movq	%r12, %rdx
    000013ce: 	movq	%r14, %rsi
    000013d1: 	callq	memcpy@PLT # Offset: 5073
    000013d6: 	movq	0x78(%rsp), %r12
    000013db: 	movq	0x100(%rsp), %rax
    000013e3: 	jmp	.Ltmp2302 # Offset: 5091
    000013e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2296:
    000013f0: 	testq	%r12, %r12
    000013f3: 	jne	.Ltmp2303 # Offset: 5107
    000013f9: 	movq	0x8(%rsp), %rax
    000013fe: 	jmp	.Ltmp2302 # Offset: 5118
    00001403: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2298:
    00001408: 	movl	0x68(%rsp), %eax
    0000140c: 	movq	0xe0(%rsp), %rdi
    00001414: 	movl	%eax, iterations(%rip)
    0000141a: 	cmpq	0x40(%rsp), %rdi
    0000141f: 	je	.Ltmp2304 # Offset: 5151
    00001421: 	movq	0xf0(%rsp), %rax
    00001429: 	leaq	0x1(%rax), %rsi
    0000142d: 	callq	_ZdlPvm@PLT # Offset: 5165
.Ltmp2304:
    00001432: 	movq	0x10(%rsp), %rbx
    00001437: 	movq	0x20(%rsp), %rsi
    0000143c: 	leaq	DATAat0x27314(%rip), %rdx
    00001443: 	movq	%rbx, %rdi
    00001446: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5190
    0000144b: 	movq	%rbx, %rcx
    0000144e: 	leaq	_Z13fast_reverse2IPhEvT_S1_(%rip), %rdx
    00001455: 	movl	$0x4000000, %esi
    0000145a: 	movq	%r15, %rdi
    0000145d: 	callq	_Z18test_reverse_sizesIPhPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5213
    00001462: 	movq	0x100(%rsp), %rdi
    0000146a: 	cmpq	0x8(%rsp), %rdi
    0000146f: 	je	.Ltmp2305 # Offset: 5231
    00001471: 	movq	0x110(%rsp), %rax
    00001479: 	leaq	0x1(%rax), %rsi
    0000147d: 	callq	_ZdlPvm@PLT # Offset: 5245
.Ltmp2305:
    00001482: 	movq	0x10(%rsp), %rbx
    00001487: 	movq	0x20(%rsp), %rsi
    0000148c: 	leaq	DATAat0x27331(%rip), %rdx
    00001493: 	movq	%rbx, %rdi
    00001496: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5270
    0000149b: 	movq	%rbx, %rcx
    0000149e: 	leaq	_Z13fast_reverse3IPhEvT_S1_(%rip), %rdx
    000014a5: 	movl	$0x4000000, %esi
    000014aa: 	movq	%r15, %rdi
    000014ad: 	callq	_Z18test_reverse_sizesIPhPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5293
    000014b2: 	movq	0x100(%rsp), %rdi
    000014ba: 	cmpq	0x8(%rsp), %rdi
    000014bf: 	je	.Ltmp2306 # Offset: 5311
    000014c1: 	movq	0x110(%rsp), %rax
    000014c9: 	leaq	0x1(%rax), %rsi
    000014cd: 	callq	_ZdlPvm@PLT # Offset: 5325
.Ltmp2306:
    000014d2: 	movq	0x10(%rsp), %rbx
    000014d7: 	movq	0x20(%rsp), %rsi
    000014dc: 	leaq	DATAat0x2734e(%rip), %rdx
    000014e3: 	movq	%rbx, %rdi
    000014e6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5350
    000014eb: 	movq	%rbx, %rcx
    000014ee: 	leaq	_Z13fast_reverse4IPhEvT_S1_(%rip), %rdx
    000014f5: 	movl	$0x4000000, %esi
    000014fa: 	movq	%r15, %rdi
    000014fd: 	callq	_Z18test_reverse_sizesIPhPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5373
    00001502: 	movq	0x100(%rsp), %rdi
    0000150a: 	cmpq	0x8(%rsp), %rdi
    0000150f: 	je	.Ltmp2307 # Offset: 5391
    00001511: 	movq	0x110(%rsp), %rax
    00001519: 	leaq	0x1(%rax), %rsi
    0000151d: 	callq	_ZdlPvm@PLT # Offset: 5405
.Ltmp2307:
    00001522: 	movq	0x10(%rsp), %rbx
    00001527: 	movl	0x5c(%rsp), %eax
    0000152b: 	leaq	DATAat0x27388(%rip), %r13
    00001532: 	movq	0x20(%rsp), %rsi
    00001537: 	movq	%r13, %rdx
    0000153a: 	movq	%rbx, %rdi
    0000153d: 	movl	%eax, iterations(%rip)
    00001543: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5443
    00001548: 	movq	0x18(%rsp), %rdx
    0000154d: 	movq	0x30(%rsp), %rsi
    00001552: 	movq	%rbx, %r8
    00001555: 	movq	%r15, %rdi
    00001558: 	leaq	0x1f40(%rdx), %r12
    0000155f: 	movq	%r12, %rcx
    00001562: 	callq	"_Z17test_reverse_copyI20BidirectionalPointerIhEPFS1_S1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 5474
    00001567: 	movq	0x100(%rsp), %rdi
    0000156f: 	cmpq	0x8(%rsp), %rdi
    00001574: 	je	.Ltmp2308 # Offset: 5492
    00001576: 	movq	0x110(%rsp), %rax
    0000157e: 	leaq	0x1(%rax), %rsi
    00001582: 	callq	_ZdlPvm@PLT # Offset: 5506
.Ltmp2308:
    00001587: 	movq	0x10(%rsp), %rbx
    0000158c: 	movq	0x20(%rsp), %rsi
    00001591: 	leaq	DATAat0x273b0(%rip), %rdx
    00001598: 	movq	%rbx, %rdi
    0000159b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5531
    000015a0: 	movq	0x18(%rsp), %rdx
    000015a5: 	movq	0x30(%rsp), %rsi
    000015aa: 	movq	%rbx, %r8
    000015ad: 	movq	%r12, %rcx
    000015b0: 	movq	%r15, %rdi
    000015b3: 	callq	"_Z17test_reverse_copyI20BidirectionalPointerIhEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1" # Offset: 5555
    000015b8: 	movq	0x100(%rsp), %rdi
    000015c0: 	cmpq	0x8(%rsp), %rdi
    000015c5: 	je	.Ltmp2309 # Offset: 5573
    000015c7: 	movq	0x110(%rsp), %rax
    000015cf: 	leaq	0x1(%rax), %rsi
    000015d3: 	callq	_ZdlPvm@PLT # Offset: 5587
.Ltmp2309:
    000015d8: 	movq	0x10(%rsp), %rbx
    000015dd: 	movq	0x20(%rsp), %rsi
    000015e2: 	leaq	DATAat0x273d8(%rip), %rdx
    000015e9: 	movq	%rbx, %rdi
    000015ec: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5612
    000015f1: 	movq	0x18(%rsp), %rdx
    000015f6: 	movq	0x30(%rsp), %rsi
    000015fb: 	movq	%rbx, %r8
    000015fe: 	movq	%r12, %rcx
    00001601: 	movq	%r15, %rdi
    00001604: 	callq	"_Z17test_reverse_copyI20BidirectionalPointerIhEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 5636
    00001609: 	movq	0x100(%rsp), %rdi
    00001611: 	cmpq	0x8(%rsp), %rdi
    00001616: 	je	.Ltmp2310 # Offset: 5654
    00001618: 	movq	0x110(%rsp), %rax
    00001620: 	leaq	0x1(%rax), %rsi
    00001624: 	callq	_ZdlPvm@PLT # Offset: 5668
.Ltmp2310:
    00001629: 	movq	0x10(%rsp), %rbx
    0000162e: 	movq	0x20(%rsp), %rsi
    00001633: 	leaq	DATAat0x27400(%rip), %rdx
    0000163a: 	movq	%rbx, %rdi
    0000163d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5693
    00001642: 	movq	0x18(%rsp), %rdx
    00001647: 	movq	0x30(%rsp), %rsi
    0000164c: 	movq	%rbx, %r8
    0000164f: 	movq	%r12, %rcx
    00001652: 	movq	%r15, %rdi
    00001655: 	callq	"_Z17test_reverse_copyIPhPFS0_S0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 5717
    0000165a: 	movq	0x100(%rsp), %rdi
    00001662: 	cmpq	0x8(%rsp), %rdi
    00001667: 	je	.Ltmp2311 # Offset: 5735
    00001669: 	movq	0x110(%rsp), %rax
    00001671: 	leaq	0x1(%rax), %rsi
    00001675: 	callq	_ZdlPvm@PLT # Offset: 5749
.Ltmp2311:
    0000167a: 	movq	0x10(%rsp), %rbx
    0000167f: 	movq	0x20(%rsp), %rsi
    00001684: 	leaq	DATAat0x27428(%rip), %rdx
    0000168b: 	movq	%rbx, %rdi
    0000168e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5774
    00001693: 	movq	0x18(%rsp), %rdx
    00001698: 	movq	0x30(%rsp), %rsi
    0000169d: 	movq	%rbx, %r8
    000016a0: 	movq	%r12, %rcx
    000016a3: 	movq	%r15, %rdi
    000016a6: 	callq	"_Z17test_reverse_copyIPhPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1" # Offset: 5798
    000016ab: 	movq	0x100(%rsp), %rdi
    000016b3: 	cmpq	0x8(%rsp), %rdi
    000016b8: 	je	.Ltmp2312 # Offset: 5816
    000016ba: 	movq	0x110(%rsp), %rax
    000016c2: 	leaq	0x1(%rax), %rsi
    000016c6: 	callq	_ZdlPvm@PLT # Offset: 5830
.Ltmp2312:
    000016cb: 	movq	0x10(%rsp), %rbx
    000016d0: 	movq	0x20(%rsp), %rsi
    000016d5: 	leaq	DATAat0x27450(%rip), %rdx
    000016dc: 	movq	%rbx, %rdi
    000016df: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5855
    000016e4: 	movq	0x18(%rsp), %rdx
    000016e9: 	movq	0x30(%rsp), %rsi
    000016ee: 	movq	%rbx, %r8
    000016f1: 	movq	%r12, %rcx
    000016f4: 	movq	%r15, %rdi
    000016f7: 	callq	"_Z17test_reverse_copyIPhPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1" # Offset: 5879
    000016fc: 	movq	0x100(%rsp), %rdi
    00001704: 	cmpq	0x8(%rsp), %rdi
    00001709: 	je	.Ltmp2313 # Offset: 5897
    0000170b: 	movq	0x110(%rsp), %rax
    00001713: 	leaq	0x1(%rax), %rsi
    00001717: 	callq	_ZdlPvm@PLT # Offset: 5911
.Ltmp2313:
    0000171c: 	movq	0x20(%rsp), %rsi
    00001721: 	movq	0x10(%rsp), %rdi
    00001726: 	leaq	DATAat0x27478(%rip), %rdx
    0000172d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5933
    00001732: 	movabsq	$0x6363636363636363, %rax
    0000173c: 	movq	0x18(%rsp), %rcx
    00001741: 	leaq	0x8(%rcx), %r14
    00001745: 	movq	%rax, (%rcx)
    00001748: 	leaq	0x1f48(%rcx), %rbp
    0000174f: 	movq	%r14, %rdi
    00001752: 	movq	%rax, -0x10(%rbp)
    00001756: 	andq	$-0x8, %rdi
    0000175a: 	subq	%rdi, %rcx
    0000175d: 	addl	$0x1f40, %ecx
    00001763: 	shrl	$0x3, %ecx
    00001766: 	rep		stosq	%rax, %es:(%rdi)
    00001769: 	callq	clock@PLT # Offset: 5993
    0000176e: 	movl	iterations(%rip), %esi
    00001774: 	movq	%rax, start_time(%rip)
    0000177b: 	testl	%esi, %esi
    0000177d: 	jle	.Ltmp2314 # Offset: 6013
    00001783: 	movdqa	DATAat0x27500(%rip), %xmm4
    0000178b: 	movq	0x18(%rsp), %r8
    00001790: 	xorl	%ecx, %ecx
    00001792: 	leaq	0x1f30(%r15), %rdi
    00001799: 	movdqa	DATAat0x274f0(%rip), %xmm3
    000017a1: 	nopl	(%rax) # Size: 7
.Ltmp2316:
    000017a8: 	movq	%r8, %rax
    000017ab: 	movq	%rdi, %rdx
    000017ae: 	nop # Size: 2
.Ltmp2315:
    000017b0: 	movdqu	(%rdx), %xmm5
    000017b4: 	addq	$0x10, %rax
    000017b8: 	subq	$0x10, %rdx
    000017bc: 	pshufd	$0x1b, %xmm5, %xmm0
    000017c1: 	movdqa	%xmm0, %xmm1
    000017c5: 	movdqa	%xmm0, %xmm2
    000017c9: 	pslld	$0x8, %xmm1
    000017ce: 	psrld	$0x8, %xmm2
    000017d3: 	pand	%xmm3, %xmm2
    000017d7: 	pand	%xmm4, %xmm1
    000017db: 	pxor	%xmm2, %xmm1
    000017df: 	movdqa	%xmm0, %xmm2
    000017e3: 	psrld	$0x18, %xmm2
    000017e8: 	pslld	$0x18, %xmm0
    000017ed: 	pxor	%xmm2, %xmm0
    000017f1: 	pxor	%xmm1, %xmm0
    000017f5: 	movups	%xmm0, -0x10(%rax)
    000017f9: 	cmpq	%rax, %r12
    000017fc: 	jne	.Ltmp2315 # Offset: 6140
    000017fe: 	addl	$0x1, %ecx
    00001801: 	cmpl	%esi, %ecx
    00001803: 	jne	.Ltmp2316 # Offset: 6147
.Ltmp2314:
    00001805: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000180c: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00001813: 	subq	$0x20, %rax
    00001817: 	cmpq	%rax, %rdi
    0000181a: 	je	.Ltmp2317 # Offset: 6170
    00001820: 	leaq	0x10(%rdi), %rax
    00001824: 	movq	0x108(%rsp), %rdx
    0000182c: 	movq	%rax, (%rdi)
    0000182f: 	movq	0x100(%rsp), %rsi
    00001837: 	addq	%rsi, %rdx
    0000183a: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 6202
    0000183f: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001846: 	addq	$0x20, %rax
    0000184a: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp2410:
    00001851: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001858: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000185f: 	je	.Ltmp2318 # Offset: 6239
.Ltmp2409:
    00001865: 	movq	-0x20(%rax), %rbx
    00001869: 	callq	clock@PLT # Offset: 6249
    0000186e: 	pxor	%xmm0, %xmm0
    00001872: 	movq	%rax, end_time(%rip)
    00001879: 	movq	%rbx, %rdi
    0000187c: 	subq	start_time(%rip), %rax
    00001883: 	cvtsi2sd	%rax, %xmm0
    00001888: 	divsd	DATAat0x276b0(%rip), %xmm0
    00001890: 	callq	_Z13record_resultdPKc # Offset: 6288
    00001895: 	movq	0x18(%rsp), %rax
    0000189a: 	leaq	0x1f3f(%rax), %rbx
    000018a1: 	jmp	.Ltmp2319 # Offset: 6305
    000018a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2321:
    000018a8: 	addq	$0x1, %rax
    000018ac: 	movzbl	(%rax), %ecx
    000018af: 	cmpb	%cl, -0x1(%rax)
    000018b2: 	jb	.Ltmp2320 # Offset: 6322
.Ltmp2319:
    000018b8: 	cmpq	%rbx, %rax
    000018bb: 	jne	.Ltmp2321 # Offset: 6331
.Ltmp2404:
    000018bd: 	movq	0x100(%rsp), %rdi
    000018c5: 	cmpq	0x8(%rsp), %rdi
    000018ca: 	je	.Ltmp2322 # Offset: 6346
    000018cc: 	movq	0x110(%rsp), %rax
    000018d4: 	leaq	0x1(%rax), %rsi
    000018d8: 	callq	_ZdlPvm@PLT # Offset: 6360
.Ltmp2322:
    000018dd: 	movq	0x20(%rsp), %rsi
    000018e2: 	movq	0x10(%rsp), %rdi
    000018e7: 	leaq	DATAat0x274a0(%rip), %rdx
    000018ee: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6382
    000018f3: 	movq	0x18(%rsp), %rcx
    000018f8: 	movq	%r14, %rdi
    000018fb: 	movabsq	$0x6363636363636363, %rax
    00001905: 	andq	$-0x8, %rdi
    00001909: 	movq	%rax, (%rcx)
    0000190c: 	subq	%rdi, %rcx
    0000190f: 	addl	$0x1f40, %ecx
    00001915: 	movq	%rax, -0x10(%rbp)
    00001919: 	xorl	%ebp, %ebp
    0000191b: 	shrl	$0x3, %ecx
    0000191e: 	rep		stosq	%rax, %es:(%rdi)
    00001921: 	callq	clock@PLT # Offset: 6433
    00001926: 	movq	%rax, start_time(%rip)
    0000192d: 	movl	iterations(%rip), %eax
    00001933: 	testl	%eax, %eax
    00001935: 	jle	.Ltmp2323 # Offset: 6453
    00001937: 	movq	%rbx, 0x50(%rsp)
    0000193c: 	movq	0x30(%rsp), %r14
    00001941: 	movl	%ebp, %ebx
    00001943: 	movq	0x18(%rsp), %rbp
    00001948: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2324:
    00001950: 	movq	%rbp, %rdx
    00001953: 	movq	%r14, %rsi
    00001956: 	movq	%r15, %rdi
    00001959: 	addl	$0x1, %ebx
    0000195c: 	callq	_Z18fast_reverse_copy3IPhS0_EvT_S1_T0_ # Offset: 6492
    00001961: 	cmpl	iterations(%rip), %ebx
    00001967: 	jl	.Ltmp2324 # Offset: 6503
    00001969: 	movq	0x50(%rsp), %rbx
.Ltmp2323:
    0000196e: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001975: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    0000197c: 	subq	$0x20, %rax
    00001980: 	cmpq	%rax, %rdi
    00001983: 	je	.Ltmp2325 # Offset: 6531
    00001989: 	leaq	0x10(%rdi), %rax
    0000198d: 	movq	0x108(%rsp), %rdx
    00001995: 	movq	%rax, (%rdi)
    00001998: 	movq	0x100(%rsp), %rsi
    000019a0: 	addq	%rsi, %rdx
    000019a3: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 6563
    000019a8: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000019af: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000019b6: 	addq	$0x20, %rax
    000019ba: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000019c1: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000019c8: 	je	.Ltmp2326 # Offset: 6600
.Ltmp2405:
    000019ce: 	movq	-0x20(%rax), %rbp
    000019d2: 	callq	clock@PLT # Offset: 6610
    000019d7: 	pxor	%xmm0, %xmm0
    000019db: 	movq	%rax, end_time(%rip)
    000019e2: 	movq	%rbp, %rdi
    000019e5: 	subq	start_time(%rip), %rax
    000019ec: 	cvtsi2sd	%rax, %xmm0
    000019f1: 	divsd	DATAat0x276b0(%rip), %xmm0
    000019f9: 	callq	_Z13record_resultdPKc # Offset: 6649
    000019fe: 	movq	0x18(%rsp), %rax
    00001a03: 	jmp	.Ltmp2327 # Offset: 6659
    00001a05: 	nopl	(%rax) # Size: 3
.Ltmp2329:
    00001a08: 	addq	$0x1, %rax
    00001a0c: 	movzbl	(%rax), %ecx
    00001a0f: 	cmpb	%cl, -0x1(%rax)
    00001a12: 	jb	.Ltmp2328 # Offset: 6674
.Ltmp2327:
    00001a18: 	cmpq	%rbx, %rax
    00001a1b: 	jne	.Ltmp2329 # Offset: 6683
.Ltmp2403:
    00001a1d: 	movq	0x100(%rsp), %rdi
    00001a25: 	cmpq	0x8(%rsp), %rdi
    00001a2a: 	je	.Ltmp2330 # Offset: 6698
    00001a2c: 	movq	0x110(%rsp), %rax
    00001a34: 	leaq	0x1(%rax), %rsi
    00001a38: 	callq	_ZdlPvm@PLT # Offset: 6712
.Ltmp2330:
    00001a3d: 	movq	0x10(%rsp), %rbx
    00001a42: 	movq	0x20(%rsp), %rsi
    00001a47: 	leaq	DATAat0x274c8(%rip), %rdx
    00001a4e: 	movq	%rbx, %rdi
    00001a51: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6737
    00001a56: 	movq	0x18(%rsp), %rdx
    00001a5b: 	movq	0x30(%rsp), %rsi
    00001a60: 	movq	%rbx, %r8
    00001a63: 	movq	%r12, %rcx
    00001a66: 	movq	%r15, %rdi
    00001a69: 	callq	"_Z17test_reverse_copyIPhPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 6761
    00001a6e: 	movq	0x100(%rsp), %rdi
    00001a76: 	cmpq	0x8(%rsp), %rdi
    00001a7b: 	je	.Ltmp2331 # Offset: 6779
    00001a7d: 	movq	0x110(%rsp), %rax
    00001a85: 	leaq	0x1(%rax), %rsi
    00001a89: 	callq	_ZdlPvm@PLT # Offset: 6793
.Ltmp2331:
    00001a8e: 	movq	0x20(%rsp), %rbx
    00001a93: 	leaq	0xc0(%rsp), %rdi
    00001a9b: 	leaq	DATAat0x27374(%rip), %rdx
    00001aa2: 	movq	%rbx, %rsi
    00001aa5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6821
    00001aaa: 	movl	iterations(%rip), %edx
    00001ab0: 	xorl	%r8d, %r8d
    00001ab3: 	xorl	%ecx, %ecx
    00001ab5: 	movl	$0x1f40, %esi
    00001aba: 	movq	0xc0(%rsp), %rdi
    00001ac2: 	callq	_Z9summarizePKciiii # Offset: 6850
    00001ac7: 	movl	0x6c(%rsp), %eax
    00001acb: 	movq	0x48(%rsp), %rdi
    00001ad0: 	movq	%r13, %rdx
    00001ad3: 	movq	%rbx, %rsi
    00001ad6: 	movl	%eax, iterations(%rip)
    00001adc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6876
    00001ae1: 	movl	iterations(%rip), %ebx
    00001ae7: 	leaq	DATAat0x271e0(%rip), %rsi
    00001aee: 	movl	$0x1, %edi
    00001af3: 	xorl	%eax, %eax
    00001af5: 	movl	%ebx, 0x68(%rsp)
    00001af9: 	callq	__printf_chk@PLT # Offset: 6905
    00001afe: 	leaq	DATAat0x27210(%rip), %rsi
    00001b05: 	movl	$0x1, %edi
    00001b0a: 	xorl	%eax, %eax
    00001b0c: 	callq	__printf_chk@PLT # Offset: 6924
    00001b11: 	movslq	%ebx, %rax
    00001b14: 	xorl	%ebp, %ebp
    00001b16: 	movl	$0x4, %ebx
    00001b1b: 	movq	%rax, 0x50(%rsp)
    00001b20: 	jmp	.Ltmp2332 # Offset: 6944
    00001b25: 	nopl	(%rax) # Size: 3
.Ltmp2338:
    00001b28: 	movzbl	(%r14), %eax
    00001b2c: 	movb	%al, 0x110(%rsp)
    00001b33: 	movq	0x8(%rsp), %rax
.Ltmp2340:
    00001b38: 	movq	0x10(%rsp), %r8
    00001b3d: 	movq	0x18(%rsp), %rdx
    00001b42: 	movq	%r13, %rcx
    00001b45: 	movq	%r15, %rdi
    00001b48: 	movq	%r12, 0x108(%rsp)
    00001b50: 	movq	0x30(%rsp), %rsi
    00001b55: 	movb	$0x0, (%rax,%r12)
    00001b5a: 	callq	"_Z17test_reverse_copyI20BidirectionalPointerIhEPFS1_S1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7002
    00001b5f: 	movq	0x100(%rsp), %rdi
    00001b67: 	cmpq	0x8(%rsp), %rdi
    00001b6c: 	je	.Ltmp2333 # Offset: 7020
    00001b6e: 	movq	0x110(%rsp), %rax
    00001b76: 	leaq	0x1(%rax), %rsi
    00001b7a: 	callq	_ZdlPvm@PLT # Offset: 7034
.Ltmp2333:
    00001b7f: 	pxor	%xmm1, %xmm1
    00001b83: 	pxor	%xmm2, %xmm2
    00001b87: 	movl	%ebx, %r8d
    00001b8a: 	movl	%ebp, %edx
    00001b8c: 	cvtsi2sd	%ebx, %xmm2
    00001b90: 	movq	results(%rip), %rax
    00001b97: 	movq	0xe0(%rsp), %rcx
    00001b9f: 	leaq	DATAat0x27240(%rip), %rsi
    00001ba6: 	cvtsi2sdl	iterations(%rip), %xmm1
    00001bae: 	movl	$0x1, %edi
    00001bb3: 	movsd	(%rax), %xmm0
    00001bb7: 	movl	$0x2, %eax
    00001bbc: 	mulsd	%xmm2, %xmm1
    00001bc0: 	divsd	DATAat0x276b0(%rip), %xmm1
    00001bc8: 	divsd	%xmm0, %xmm1
    00001bcc: 	callq	__printf_chk@PLT # Offset: 7116
    00001bd1: 	movl	$0x0, current_test(%rip)
    00001bdb: 	addl	$0x1, %ebp
    00001bde: 	addl	%ebx, %ebx
    00001be0: 	cmpl	$0x19, %ebp
    00001be3: 	je	.Ltmp2334 # Offset: 7139
.Ltmp2332:
    00001be9: 	movl	$0x4000000, %eax
    00001bee: 	movslq	%ebx, %r13
    00001bf1: 	movq	0xe0(%rsp), %r14
    00001bf9: 	movq	0xe8(%rsp), %r12
    00001c01: 	cltd
    00001c02: 	idivl	%ebx
    00001c04: 	movl	$0x4, %edx
    00001c09: 	cltq
    00001c0b: 	imulq	0x50(%rsp), %rax
    00001c11: 	cmpq	%rdx, %rax
    00001c14: 	cmovlq	%rdx, %rax
    00001c18: 	movl	$0x70000000, %edx
    00001c1d: 	cmpq	%rdx, %rax
    00001c20: 	cmovgq	%rdx, %rax
    00001c24: 	addq	$0x1, %rax
    00001c28: 	andq	$-0x2, %rax
    00001c2c: 	movl	%eax, iterations(%rip)
    00001c32: 	leaq	(%r15,%r13), %rax
    00001c36: 	addq	0x18(%rsp), %r13
    00001c3b: 	movq	%rax, 0x30(%rsp)
    00001c40: 	movq	0x8(%rsp), %rax
    00001c45: 	movq	%rax, 0x100(%rsp)
    00001c4d: 	movq	%r14, %rax
    00001c50: 	addq	%r12, %rax
    00001c53: 	je	.Ltmp2335 # Offset: 7251
    00001c55: 	testq	%r14, %r14
    00001c58: 	je	.Ltmp2336 # Offset: 7256
.Ltmp2335:
    00001c5e: 	movq	%r12, 0x78(%rsp)
    00001c63: 	cmpq	$0xf, %r12
    00001c67: 	ja	.Ltmp2337 # Offset: 7271
    00001c69: 	cmpq	$0x1, %r12
    00001c6d: 	je	.Ltmp2338 # Offset: 7277
    00001c73: 	testq	%r12, %r12
    00001c76: 	jne	.Ltmp2339 # Offset: 7286
    00001c7c: 	movq	0x8(%rsp), %rax
    00001c81: 	jmp	.Ltmp2340 # Offset: 7297
    00001c86: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2337:
    00001c90: 	movq	0x10(%rsp), %rdi
    00001c95: 	leaq	0x78(%rsp), %rsi
    00001c9a: 	xorl	%edx, %edx
    00001c9c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7324
    00001ca1: 	movq	%rax, 0x100(%rsp)
    00001ca9: 	movq	%rax, %rdi
    00001cac: 	movq	0x78(%rsp), %rax
    00001cb1: 	movq	%rax, 0x110(%rsp)
.Ltmp2423:
    00001cb9: 	movq	%r12, %rdx
    00001cbc: 	movq	%r14, %rsi
    00001cbf: 	callq	memcpy@PLT # Offset: 7359
    00001cc4: 	movq	0x78(%rsp), %r12
    00001cc9: 	movq	0x100(%rsp), %rax
    00001cd1: 	jmp	.Ltmp2340 # Offset: 7377
    00001cd6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2334:
    00001ce0: 	movl	0x68(%rsp), %eax
    00001ce4: 	movq	0xe0(%rsp), %rdi
    00001cec: 	movl	%eax, iterations(%rip)
    00001cf2: 	cmpq	0x40(%rsp), %rdi
    00001cf7: 	je	.Ltmp2341 # Offset: 7415
    00001cf9: 	movq	0xf0(%rsp), %rax
    00001d01: 	leaq	0x1(%rax), %rsi
    00001d05: 	callq	_ZdlPvm@PLT # Offset: 7429
.Ltmp2341:
    00001d0a: 	movq	0x20(%rsp), %rsi
    00001d0f: 	movq	0x48(%rsp), %rdi
    00001d14: 	leaq	DATAat0x273b0(%rip), %rdx
    00001d1b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7451
    00001d20: 	movl	iterations(%rip), %ebx
    00001d26: 	leaq	DATAat0x271e0(%rip), %rsi
    00001d2d: 	movl	$0x1, %edi
    00001d32: 	xorl	%eax, %eax
    00001d34: 	movl	%ebx, 0x68(%rsp)
    00001d38: 	callq	__printf_chk@PLT # Offset: 7480
    00001d3d: 	leaq	DATAat0x27210(%rip), %rsi
    00001d44: 	movl	$0x1, %edi
    00001d49: 	xorl	%eax, %eax
    00001d4b: 	callq	__printf_chk@PLT # Offset: 7499
    00001d50: 	movslq	%ebx, %rax
    00001d53: 	xorl	%ebp, %ebp
    00001d55: 	movl	$0x4, %ebx
    00001d5a: 	movq	%rax, 0x50(%rsp)
    00001d5f: 	jmp	.Ltmp2342 # Offset: 7519
    00001d64: 	nopl	(%rax) # Size: 4
.Ltmp2348:
    00001d68: 	movzbl	(%r14), %eax
    00001d6c: 	movb	%al, 0x110(%rsp)
    00001d73: 	movq	0x8(%rsp), %rax
.Ltmp2350:
    00001d78: 	movq	0x10(%rsp), %r8
    00001d7d: 	movq	0x18(%rsp), %rdx
    00001d82: 	movq	%r13, %rcx
    00001d85: 	movq	%r15, %rdi
    00001d88: 	movq	%r12, 0x108(%rsp)
    00001d90: 	movq	0x30(%rsp), %rsi
    00001d95: 	movb	$0x0, (%rax,%r12)
    00001d9a: 	callq	"_Z17test_reverse_copyI20BidirectionalPointerIhEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1" # Offset: 7578
    00001d9f: 	movq	0x100(%rsp), %rdi
    00001da7: 	cmpq	0x8(%rsp), %rdi
    00001dac: 	je	.Ltmp2343 # Offset: 7596
    00001dae: 	movq	0x110(%rsp), %rax
    00001db6: 	leaq	0x1(%rax), %rsi
    00001dba: 	callq	_ZdlPvm@PLT # Offset: 7610
.Ltmp2343:
    00001dbf: 	pxor	%xmm1, %xmm1
    00001dc3: 	pxor	%xmm2, %xmm2
    00001dc7: 	movl	%ebx, %r8d
    00001dca: 	movl	%ebp, %edx
    00001dcc: 	cvtsi2sd	%ebx, %xmm2
    00001dd0: 	movq	results(%rip), %rax
    00001dd7: 	movq	0xe0(%rsp), %rcx
    00001ddf: 	leaq	DATAat0x27240(%rip), %rsi
    00001de6: 	cvtsi2sdl	iterations(%rip), %xmm1
    00001dee: 	movl	$0x1, %edi
    00001df3: 	movsd	(%rax), %xmm0
    00001df7: 	movl	$0x2, %eax
    00001dfc: 	mulsd	%xmm2, %xmm1
    00001e00: 	divsd	DATAat0x276b0(%rip), %xmm1
    00001e08: 	divsd	%xmm0, %xmm1
    00001e0c: 	callq	__printf_chk@PLT # Offset: 7692
    00001e11: 	movl	$0x0, current_test(%rip)
    00001e1b: 	addl	$0x1, %ebp
    00001e1e: 	addl	%ebx, %ebx
    00001e20: 	cmpl	$0x19, %ebp
    00001e23: 	je	.Ltmp2344 # Offset: 7715
.Ltmp2342:
    00001e29: 	movl	$0x4000000, %eax
    00001e2e: 	movslq	%ebx, %r13
    00001e31: 	movq	0xe0(%rsp), %r14
    00001e39: 	movq	0xe8(%rsp), %r12
    00001e41: 	cltd
    00001e42: 	idivl	%ebx
    00001e44: 	movl	$0x4, %edx
    00001e49: 	cltq
    00001e4b: 	imulq	0x50(%rsp), %rax
    00001e51: 	cmpq	%rdx, %rax
    00001e54: 	cmovlq	%rdx, %rax
    00001e58: 	movl	$0x70000000, %edx
    00001e5d: 	cmpq	%rdx, %rax
    00001e60: 	cmovgq	%rdx, %rax
    00001e64: 	addq	$0x1, %rax
    00001e68: 	andq	$-0x2, %rax
    00001e6c: 	movl	%eax, iterations(%rip)
    00001e72: 	leaq	(%r15,%r13), %rax
    00001e76: 	addq	0x18(%rsp), %r13
    00001e7b: 	movq	%rax, 0x30(%rsp)
    00001e80: 	movq	0x8(%rsp), %rax
    00001e85: 	movq	%rax, 0x100(%rsp)
    00001e8d: 	movq	%r14, %rax
    00001e90: 	addq	%r12, %rax
    00001e93: 	je	.Ltmp2345 # Offset: 7827
    00001e95: 	testq	%r14, %r14
    00001e98: 	je	.Ltmp2346 # Offset: 7832
.Ltmp2345:
    00001e9e: 	movq	%r12, 0x78(%rsp)
    00001ea3: 	cmpq	$0xf, %r12
    00001ea7: 	ja	.Ltmp2347 # Offset: 7847
    00001ea9: 	cmpq	$0x1, %r12
    00001ead: 	je	.Ltmp2348 # Offset: 7853
    00001eb3: 	testq	%r12, %r12
    00001eb6: 	jne	.Ltmp2349 # Offset: 7862
    00001ebc: 	movq	0x8(%rsp), %rax
    00001ec1: 	jmp	.Ltmp2350 # Offset: 7873
    00001ec6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2347:
    00001ed0: 	movq	0x10(%rsp), %rdi
    00001ed5: 	leaq	0x78(%rsp), %rsi
    00001eda: 	xorl	%edx, %edx
    00001edc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7900
    00001ee1: 	movq	%rax, 0x100(%rsp)
    00001ee9: 	movq	%rax, %rdi
    00001eec: 	movq	0x78(%rsp), %rax
    00001ef1: 	movq	%rax, 0x110(%rsp)
.Ltmp2422:
    00001ef9: 	movq	%r12, %rdx
    00001efc: 	movq	%r14, %rsi
    00001eff: 	callq	memcpy@PLT # Offset: 7935
    00001f04: 	movq	0x78(%rsp), %r12
    00001f09: 	movq	0x100(%rsp), %rax
    00001f11: 	jmp	.Ltmp2350 # Offset: 7953
    00001f16: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2344:
    00001f20: 	movl	0x68(%rsp), %eax
    00001f24: 	movq	0xe0(%rsp), %rdi
    00001f2c: 	movl	%eax, iterations(%rip)
    00001f32: 	cmpq	0x40(%rsp), %rdi
    00001f37: 	je	.Ltmp2351 # Offset: 7991
    00001f39: 	movq	0xf0(%rsp), %rax
    00001f41: 	leaq	0x1(%rax), %rsi
    00001f45: 	callq	_ZdlPvm@PLT # Offset: 8005
.Ltmp2351:
    00001f4a: 	movq	0x20(%rsp), %rsi
    00001f4f: 	movq	0x48(%rsp), %rdi
    00001f54: 	leaq	DATAat0x273d8(%rip), %rdx
    00001f5b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8027
    00001f60: 	movl	iterations(%rip), %ebx
    00001f66: 	leaq	DATAat0x271e0(%rip), %rsi
    00001f6d: 	movl	$0x1, %edi
    00001f72: 	xorl	%eax, %eax
    00001f74: 	movl	%ebx, 0x30(%rsp)
    00001f78: 	callq	__printf_chk@PLT # Offset: 8056
    00001f7d: 	leaq	DATAat0x27210(%rip), %rsi
    00001f84: 	movl	$0x1, %edi
    00001f89: 	xorl	%eax, %eax
    00001f8b: 	callq	__printf_chk@PLT # Offset: 8075
    00001f90: 	movslq	%ebx, %r14
    00001f93: 	xorl	%ebp, %ebp
    00001f95: 	movl	$0x4, %ebx
    00001f9a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2353:
    00001fa0: 	movl	$0x4000000, %eax
    00001fa5: 	movq	0xe0(%rsp), %rsi
    00001fad: 	movq	0x10(%rsp), %rdi
    00001fb2: 	movslq	%ebx, %r12
    00001fb5: 	cltd
    00001fb6: 	movq	0xe8(%rsp), %rcx
    00001fbe: 	leaq	(%r15,%r12), %r13
    00001fc2: 	idivl	%ebx
    00001fc4: 	movl	$0x4, %edx
    00001fc9: 	cltq
    00001fcb: 	imulq	%r14, %rax
    00001fcf: 	cmpq	%rdx, %rax
    00001fd2: 	cmovlq	%rdx, %rax
    00001fd6: 	movl	$0x70000000, %edx
    00001fdb: 	cmpq	%rdx, %rax
    00001fde: 	cmovgq	%rdx, %rax
    00001fe2: 	addq	%rsi, %rcx
    00001fe5: 	addq	0x18(%rsp), %r12
    00001fea: 	movq	%rcx, %rdx
    00001fed: 	addq	$0x1, %rax
    00001ff1: 	andq	$-0x2, %rax
    00001ff5: 	movl	%eax, iterations(%rip)
    00001ffb: 	movq	0x8(%rsp), %rax
    00002000: 	movq	%rax, 0x100(%rsp)
    00002008: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 8200
    0000200d: 	movq	0x10(%rsp), %r8
    00002012: 	movq	0x18(%rsp), %rdx
    00002017: 	movq	%r12, %rcx
    0000201a: 	movq	%r13, %rsi
    0000201d: 	movq	%r15, %rdi
    00002020: 	callq	"_Z17test_reverse_copyI20BidirectionalPointerIhEPFvS1_S1_S1_EEvT_S4_S4_S4_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 8224
    00002025: 	movq	0x100(%rsp), %rdi
    0000202d: 	cmpq	0x8(%rsp), %rdi
    00002032: 	je	.Ltmp2352 # Offset: 8242
    00002034: 	movq	0x110(%rsp), %rax
    0000203c: 	leaq	0x1(%rax), %rsi
    00002040: 	callq	_ZdlPvm@PLT # Offset: 8256
.Ltmp2352:
    00002045: 	pxor	%xmm1, %xmm1
    00002049: 	pxor	%xmm2, %xmm2
    0000204d: 	movl	%ebx, %r8d
    00002050: 	movl	%ebp, %edx
    00002052: 	cvtsi2sd	%ebx, %xmm2
    00002056: 	movq	results(%rip), %rax
    0000205d: 	movq	0xe0(%rsp), %rcx
    00002065: 	leaq	DATAat0x27240(%rip), %rsi
    0000206c: 	cvtsi2sdl	iterations(%rip), %xmm1
    00002074: 	movl	$0x1, %edi
    00002079: 	movsd	(%rax), %xmm0
    0000207d: 	movl	$0x2, %eax
    00002082: 	mulsd	%xmm2, %xmm1
    00002086: 	divsd	DATAat0x276b0(%rip), %xmm1
    0000208e: 	divsd	%xmm0, %xmm1
    00002092: 	callq	__printf_chk@PLT # Offset: 8338
    00002097: 	movl	$0x0, current_test(%rip)
    000020a1: 	addl	$0x1, %ebp
    000020a4: 	addl	%ebx, %ebx
    000020a6: 	cmpl	$0x19, %ebp
    000020a9: 	jne	.Ltmp2353 # Offset: 8361
    000020af: 	movl	0x30(%rsp), %eax
    000020b3: 	movq	0xe0(%rsp), %rdi
    000020bb: 	movl	%eax, iterations(%rip)
    000020c1: 	cmpq	0x40(%rsp), %rdi
    000020c6: 	je	.Ltmp2354 # Offset: 8390
    000020c8: 	movq	0xf0(%rsp), %rax
    000020d0: 	leaq	0x1(%rax), %rsi
    000020d4: 	callq	_ZdlPvm@PLT # Offset: 8404
.Ltmp2354:
    000020d9: 	movq	0x20(%rsp), %rsi
    000020de: 	movq	0x48(%rsp), %rdi
    000020e3: 	leaq	DATAat0x27400(%rip), %rdx
    000020ea: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8426
    000020ef: 	movl	iterations(%rip), %ebx
    000020f5: 	leaq	DATAat0x271e0(%rip), %rsi
    000020fc: 	movl	$0x1, %edi
    00002101: 	xorl	%eax, %eax
    00002103: 	movl	%ebx, 0x68(%rsp)
    00002107: 	callq	__printf_chk@PLT # Offset: 8455
    0000210c: 	leaq	DATAat0x27210(%rip), %rsi
    00002113: 	movl	$0x1, %edi
    00002118: 	xorl	%eax, %eax
    0000211a: 	callq	__printf_chk@PLT # Offset: 8474
    0000211f: 	movslq	%ebx, %rax
    00002122: 	xorl	%ebp, %ebp
    00002124: 	movl	$0x4, %ebx
    00002129: 	movq	%rax, 0x50(%rsp)
    0000212e: 	jmp	.Ltmp2355 # Offset: 8494
    00002133: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2361:
    00002138: 	cmpq	$0x1, %r12
    0000213c: 	jne	.Ltmp2356 # Offset: 8508
    00002142: 	movzbl	(%r14), %eax
    00002146: 	movb	%al, 0x110(%rsp)
    0000214d: 	movq	0x8(%rsp), %rax
.Ltmp2362:
    00002152: 	movq	0x10(%rsp), %r8
    00002157: 	movq	0x18(%rsp), %rdx
    0000215c: 	movq	%r13, %rcx
    0000215f: 	movq	%r15, %rdi
    00002162: 	movq	%r12, 0x108(%rsp)
    0000216a: 	movq	0x30(%rsp), %rsi
    0000216f: 	movb	$0x0, (%rax,%r12)
    00002174: 	callq	"_Z17test_reverse_copyIPhPFS0_S0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 8564
    00002179: 	movq	0x100(%rsp), %rdi
    00002181: 	cmpq	0x8(%rsp), %rdi
    00002186: 	je	.Ltmp2357 # Offset: 8582
    00002188: 	movq	0x110(%rsp), %rax
    00002190: 	leaq	0x1(%rax), %rsi
    00002194: 	callq	_ZdlPvm@PLT # Offset: 8596
.Ltmp2357:
    00002199: 	pxor	%xmm1, %xmm1
    0000219d: 	pxor	%xmm2, %xmm2
    000021a1: 	movl	%ebx, %r8d
    000021a4: 	movl	%ebp, %edx
    000021a6: 	cvtsi2sd	%ebx, %xmm2
    000021aa: 	movq	results(%rip), %rax
    000021b1: 	movq	0xe0(%rsp), %rcx
    000021b9: 	leaq	DATAat0x27240(%rip), %rsi
    000021c0: 	cvtsi2sdl	iterations(%rip), %xmm1
    000021c8: 	movl	$0x1, %edi
    000021cd: 	movsd	(%rax), %xmm0
    000021d1: 	movl	$0x2, %eax
    000021d6: 	mulsd	%xmm2, %xmm1
    000021da: 	divsd	DATAat0x276b0(%rip), %xmm1
    000021e2: 	divsd	%xmm0, %xmm1
    000021e6: 	callq	__printf_chk@PLT # Offset: 8678
    000021eb: 	movl	$0x0, current_test(%rip)
    000021f5: 	addl	$0x1, %ebp
    000021f8: 	addl	%ebx, %ebx
    000021fa: 	cmpl	$0x19, %ebp
    000021fd: 	je	.Ltmp2358 # Offset: 8701
.Ltmp2355:
    00002203: 	movl	$0x4000000, %eax
    00002208: 	movslq	%ebx, %r13
    0000220b: 	movq	0xe0(%rsp), %r14
    00002213: 	movq	0xe8(%rsp), %r12
    0000221b: 	cltd
    0000221c: 	idivl	%ebx
    0000221e: 	movl	$0x4, %edx
    00002223: 	cltq
    00002225: 	imulq	0x50(%rsp), %rax
    0000222b: 	cmpq	%rdx, %rax
    0000222e: 	cmovlq	%rdx, %rax
    00002232: 	movl	$0x70000000, %edx
    00002237: 	cmpq	%rdx, %rax
    0000223a: 	cmovgq	%rdx, %rax
    0000223e: 	addq	$0x1, %rax
    00002242: 	andq	$-0x2, %rax
    00002246: 	movl	%eax, iterations(%rip)
    0000224c: 	leaq	(%r15,%r13), %rax
    00002250: 	addq	0x18(%rsp), %r13
    00002255: 	movq	%rax, 0x30(%rsp)
    0000225a: 	movq	0x8(%rsp), %rax
    0000225f: 	movq	%rax, 0x100(%rsp)
    00002267: 	movq	%r14, %rax
    0000226a: 	addq	%r12, %rax
    0000226d: 	je	.Ltmp2359 # Offset: 8813
    0000226f: 	testq	%r14, %r14
    00002272: 	je	.Ltmp2360 # Offset: 8818
.Ltmp2359:
    00002278: 	movq	%r12, 0x78(%rsp)
    0000227d: 	cmpq	$0xf, %r12
    00002281: 	jbe	.Ltmp2361 # Offset: 8833
    00002287: 	movq	0x10(%rsp), %rdi
    0000228c: 	leaq	0x78(%rsp), %rsi
    00002291: 	xorl	%edx, %edx
    00002293: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8851
    00002298: 	movq	%rax, 0x100(%rsp)
    000022a0: 	movq	%rax, %rdi
    000022a3: 	movq	0x78(%rsp), %rax
    000022a8: 	movq	%rax, 0x110(%rsp)
.Ltmp2415:
    000022b0: 	movq	%r12, %rdx
    000022b3: 	movq	%r14, %rsi
    000022b6: 	callq	memcpy@PLT # Offset: 8886
    000022bb: 	movq	0x78(%rsp), %r12
    000022c0: 	movq	0x100(%rsp), %rax
    000022c8: 	jmp	.Ltmp2362 # Offset: 8904
    000022cd: 	nopl	(%rax) # Size: 3
.Ltmp2356:
    000022d0: 	testq	%r12, %r12
    000022d3: 	jne	.Ltmp2363 # Offset: 8915
    000022d9: 	movq	0x8(%rsp), %rax
    000022de: 	jmp	.Ltmp2362 # Offset: 8926
    000022e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2358:
    000022e8: 	movl	0x68(%rsp), %eax
    000022ec: 	movq	0xe0(%rsp), %rdi
    000022f4: 	movl	%eax, iterations(%rip)
    000022fa: 	cmpq	0x40(%rsp), %rdi
    000022ff: 	je	.Ltmp2364 # Offset: 8959
    00002301: 	movq	0xf0(%rsp), %rax
    00002309: 	leaq	0x1(%rax), %rsi
    0000230d: 	callq	_ZdlPvm@PLT # Offset: 8973
.Ltmp2364:
    00002312: 	movq	0x20(%rsp), %rsi
    00002317: 	movq	0x48(%rsp), %rdi
    0000231c: 	leaq	DATAat0x27428(%rip), %rdx
    00002323: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8995
    00002328: 	movl	iterations(%rip), %ebx
    0000232e: 	leaq	DATAat0x271e0(%rip), %rsi
    00002335: 	movl	$0x1, %edi
    0000233a: 	xorl	%eax, %eax
    0000233c: 	movl	%ebx, 0x68(%rsp)
    00002340: 	callq	__printf_chk@PLT # Offset: 9024
    00002345: 	leaq	DATAat0x27210(%rip), %rsi
    0000234c: 	movl	$0x1, %edi
    00002351: 	xorl	%eax, %eax
    00002353: 	callq	__printf_chk@PLT # Offset: 9043
    00002358: 	movslq	%ebx, %rax
    0000235b: 	xorl	%ebp, %ebp
    0000235d: 	movl	$0x4, %ebx
    00002362: 	movq	%rax, 0x50(%rsp)
    00002367: 	jmp	.Ltmp2365 # Offset: 9063
    0000236c: 	nopl	(%rax) # Size: 4
.Ltmp2371:
    00002370: 	cmpq	$0x1, %r12
    00002374: 	jne	.Ltmp2366 # Offset: 9076
    0000237a: 	movzbl	(%r14), %eax
    0000237e: 	movb	%al, 0x110(%rsp)
    00002385: 	movq	0x8(%rsp), %rax
.Ltmp2372:
    0000238a: 	movq	0x10(%rsp), %r8
    0000238f: 	movq	0x18(%rsp), %rdx
    00002394: 	movq	%r13, %rcx
    00002397: 	movq	%r15, %rdi
    0000239a: 	movq	%r12, 0x108(%rsp)
    000023a2: 	movq	0x30(%rsp), %rsi
    000023a7: 	movb	$0x0, (%rax,%r12)
    000023ac: 	callq	"_Z17test_reverse_copyIPhPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.2/1" # Offset: 9132
    000023b1: 	movq	0x100(%rsp), %rdi
    000023b9: 	cmpq	0x8(%rsp), %rdi
    000023be: 	je	.Ltmp2367 # Offset: 9150
    000023c0: 	movq	0x110(%rsp), %rax
    000023c8: 	leaq	0x1(%rax), %rsi
    000023cc: 	callq	_ZdlPvm@PLT # Offset: 9164
.Ltmp2367:
    000023d1: 	pxor	%xmm1, %xmm1
    000023d5: 	pxor	%xmm2, %xmm2
    000023d9: 	movl	%ebx, %r8d
    000023dc: 	movl	%ebp, %edx
    000023de: 	cvtsi2sd	%ebx, %xmm2
    000023e2: 	movq	results(%rip), %rax
    000023e9: 	movq	0xe0(%rsp), %rcx
    000023f1: 	leaq	DATAat0x27240(%rip), %rsi
    000023f8: 	cvtsi2sdl	iterations(%rip), %xmm1
    00002400: 	movl	$0x1, %edi
    00002405: 	movsd	(%rax), %xmm0
    00002409: 	movl	$0x2, %eax
    0000240e: 	mulsd	%xmm2, %xmm1
    00002412: 	divsd	DATAat0x276b0(%rip), %xmm1
    0000241a: 	divsd	%xmm0, %xmm1
    0000241e: 	callq	__printf_chk@PLT # Offset: 9246
    00002423: 	movl	$0x0, current_test(%rip)
    0000242d: 	addl	$0x1, %ebp
    00002430: 	addl	%ebx, %ebx
    00002432: 	cmpl	$0x19, %ebp
    00002435: 	je	.Ltmp2368 # Offset: 9269
.Ltmp2365:
    0000243b: 	movl	$0x4000000, %eax
    00002440: 	movslq	%ebx, %r13
    00002443: 	movq	0xe0(%rsp), %r14
    0000244b: 	movq	0xe8(%rsp), %r12
    00002453: 	cltd
    00002454: 	idivl	%ebx
    00002456: 	movl	$0x4, %edx
    0000245b: 	cltq
    0000245d: 	imulq	0x50(%rsp), %rax
    00002463: 	cmpq	%rdx, %rax
    00002466: 	cmovlq	%rdx, %rax
    0000246a: 	movl	$0x70000000, %edx
    0000246f: 	cmpq	%rdx, %rax
    00002472: 	cmovgq	%rdx, %rax
    00002476: 	addq	$0x1, %rax
    0000247a: 	andq	$-0x2, %rax
    0000247e: 	movl	%eax, iterations(%rip)
    00002484: 	leaq	(%r15,%r13), %rax
    00002488: 	addq	0x18(%rsp), %r13
    0000248d: 	movq	%rax, 0x30(%rsp)
    00002492: 	movq	0x8(%rsp), %rax
    00002497: 	movq	%rax, 0x100(%rsp)
    0000249f: 	movq	%r14, %rax
    000024a2: 	addq	%r12, %rax
    000024a5: 	je	.Ltmp2369 # Offset: 9381
    000024a7: 	testq	%r14, %r14
    000024aa: 	je	.Ltmp2370 # Offset: 9386
.Ltmp2369:
    000024b0: 	movq	%r12, 0x78(%rsp)
    000024b5: 	cmpq	$0xf, %r12
    000024b9: 	jbe	.Ltmp2371 # Offset: 9401
    000024bf: 	movq	0x10(%rsp), %rdi
    000024c4: 	leaq	0x78(%rsp), %rsi
    000024c9: 	xorl	%edx, %edx
    000024cb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9419
    000024d0: 	movq	%rax, 0x100(%rsp)
    000024d8: 	movq	%rax, %rdi
    000024db: 	movq	0x78(%rsp), %rax
    000024e0: 	movq	%rax, 0x110(%rsp)
.Ltmp2414:
    000024e8: 	movq	%r12, %rdx
    000024eb: 	movq	%r14, %rsi
    000024ee: 	callq	memcpy@PLT # Offset: 9454
    000024f3: 	movq	0x78(%rsp), %r12
    000024f8: 	movq	0x100(%rsp), %rax
    00002500: 	jmp	.Ltmp2372 # Offset: 9472
    00002505: 	nopl	(%rax) # Size: 3
.Ltmp2366:
    00002508: 	testq	%r12, %r12
    0000250b: 	jne	.Ltmp2373 # Offset: 9483
    00002511: 	movq	0x8(%rsp), %rax
    00002516: 	jmp	.Ltmp2372 # Offset: 9494
    0000251b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2368:
    00002520: 	movl	0x68(%rsp), %eax
    00002524: 	movq	0xe0(%rsp), %rdi
    0000252c: 	movl	%eax, iterations(%rip)
    00002532: 	cmpq	0x40(%rsp), %rdi
    00002537: 	je	.Ltmp2374 # Offset: 9527
    00002539: 	movq	0xf0(%rsp), %rax
    00002541: 	leaq	0x1(%rax), %rsi
    00002545: 	callq	_ZdlPvm@PLT # Offset: 9541
.Ltmp2374:
    0000254a: 	movq	0x20(%rsp), %rsi
    0000254f: 	movq	0x48(%rsp), %rdi
    00002554: 	leaq	DATAat0x27450(%rip), %rdx
    0000255b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9563
    00002560: 	movl	iterations(%rip), %ebx
    00002566: 	leaq	DATAat0x271e0(%rip), %rsi
    0000256d: 	movl	$0x1, %edi
    00002572: 	xorl	%eax, %eax
    00002574: 	movl	%ebx, 0x68(%rsp)
    00002578: 	callq	__printf_chk@PLT # Offset: 9592
    0000257d: 	leaq	DATAat0x27210(%rip), %rsi
    00002584: 	movl	$0x1, %edi
    00002589: 	xorl	%eax, %eax
    0000258b: 	callq	__printf_chk@PLT # Offset: 9611
    00002590: 	movslq	%ebx, %rax
    00002593: 	xorl	%ebp, %ebp
    00002595: 	movl	$0x4, %ebx
    0000259a: 	movq	%rax, 0x50(%rsp)
    0000259f: 	jmp	.Ltmp2375 # Offset: 9631
    000025a4: 	nopl	(%rax) # Size: 4
.Ltmp2381:
    000025a8: 	movzbl	(%r14), %eax
    000025ac: 	movb	%al, 0x110(%rsp)
    000025b3: 	movq	0x8(%rsp), %rax
.Ltmp2383:
    000025b8: 	movq	0x10(%rsp), %r8
    000025bd: 	movq	0x18(%rsp), %rdx
    000025c2: 	movq	%r13, %rcx
    000025c5: 	movq	%r15, %rdi
    000025c8: 	movq	%r12, 0x108(%rsp)
    000025d0: 	movq	0x30(%rsp), %rsi
    000025d5: 	movb	$0x0, (%rax,%r12)
    000025da: 	callq	"_Z17test_reverse_copyIPhPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.1/1" # Offset: 9690
    000025df: 	movq	0x100(%rsp), %rdi
    000025e7: 	cmpq	0x8(%rsp), %rdi
    000025ec: 	je	.Ltmp2376 # Offset: 9708
    000025ee: 	movq	0x110(%rsp), %rax
    000025f6: 	leaq	0x1(%rax), %rsi
    000025fa: 	callq	_ZdlPvm@PLT # Offset: 9722
.Ltmp2376:
    000025ff: 	pxor	%xmm1, %xmm1
    00002603: 	pxor	%xmm2, %xmm2
    00002607: 	movl	%ebx, %r8d
    0000260a: 	movl	%ebp, %edx
    0000260c: 	cvtsi2sd	%ebx, %xmm2
    00002610: 	movq	results(%rip), %rax
    00002617: 	movq	0xe0(%rsp), %rcx
    0000261f: 	leaq	DATAat0x27240(%rip), %rsi
    00002626: 	cvtsi2sdl	iterations(%rip), %xmm1
    0000262e: 	movl	$0x1, %edi
    00002633: 	movsd	(%rax), %xmm0
    00002637: 	movl	$0x2, %eax
    0000263c: 	mulsd	%xmm2, %xmm1
    00002640: 	divsd	DATAat0x276b0(%rip), %xmm1
    00002648: 	divsd	%xmm0, %xmm1
    0000264c: 	callq	__printf_chk@PLT # Offset: 9804
    00002651: 	movl	$0x0, current_test(%rip)
    0000265b: 	addl	$0x1, %ebp
    0000265e: 	addl	%ebx, %ebx
    00002660: 	cmpl	$0x19, %ebp
    00002663: 	je	.Ltmp2377 # Offset: 9827
.Ltmp2375:
    00002669: 	movl	$0x4000000, %eax
    0000266e: 	movslq	%ebx, %r13
    00002671: 	movq	0xe0(%rsp), %r14
    00002679: 	movq	0xe8(%rsp), %r12
    00002681: 	cltd
    00002682: 	idivl	%ebx
    00002684: 	movl	$0x4, %edx
    00002689: 	cltq
    0000268b: 	imulq	0x50(%rsp), %rax
    00002691: 	cmpq	%rdx, %rax
    00002694: 	cmovlq	%rdx, %rax
    00002698: 	movl	$0x70000000, %edx
    0000269d: 	cmpq	%rdx, %rax
    000026a0: 	cmovgq	%rdx, %rax
    000026a4: 	addq	$0x1, %rax
    000026a8: 	andq	$-0x2, %rax
    000026ac: 	movl	%eax, iterations(%rip)
    000026b2: 	leaq	(%r15,%r13), %rax
    000026b6: 	addq	0x18(%rsp), %r13
    000026bb: 	movq	%rax, 0x30(%rsp)
    000026c0: 	movq	0x8(%rsp), %rax
    000026c5: 	movq	%rax, 0x100(%rsp)
    000026cd: 	movq	%r14, %rax
    000026d0: 	addq	%r12, %rax
    000026d3: 	je	.Ltmp2378 # Offset: 9939
    000026d5: 	testq	%r14, %r14
    000026d8: 	je	.Ltmp2379 # Offset: 9944
.Ltmp2378:
    000026de: 	movq	%r12, 0x78(%rsp)
    000026e3: 	cmpq	$0xf, %r12
    000026e7: 	ja	.Ltmp2380 # Offset: 9959
    000026e9: 	cmpq	$0x1, %r12
    000026ed: 	je	.Ltmp2381 # Offset: 9965
    000026f3: 	testq	%r12, %r12
    000026f6: 	jne	.Ltmp2382 # Offset: 9974
    000026fc: 	movq	0x8(%rsp), %rax
    00002701: 	jmp	.Ltmp2383 # Offset: 9985
    00002706: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2380:
    00002710: 	movq	0x10(%rsp), %rdi
    00002715: 	leaq	0x78(%rsp), %rsi
    0000271a: 	xorl	%edx, %edx
    0000271c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 10012
    00002721: 	movq	%rax, 0x100(%rsp)
    00002729: 	movq	%rax, %rdi
    0000272c: 	movq	0x78(%rsp), %rax
    00002731: 	movq	%rax, 0x110(%rsp)
.Ltmp2413:
    00002739: 	movq	%r12, %rdx
    0000273c: 	movq	%r14, %rsi
    0000273f: 	callq	memcpy@PLT # Offset: 10047
    00002744: 	movq	0x78(%rsp), %r12
    00002749: 	movq	0x100(%rsp), %rax
    00002751: 	jmp	.Ltmp2383 # Offset: 10065
    00002756: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2377:
    00002760: 	movl	0x68(%rsp), %eax
    00002764: 	movq	0xe0(%rsp), %rdi
    0000276c: 	movl	%eax, iterations(%rip)
    00002772: 	cmpq	0x40(%rsp), %rdi
    00002777: 	je	.Ltmp2384 # Offset: 10103
    00002779: 	movq	0xf0(%rsp), %rax
    00002781: 	leaq	0x1(%rax), %rsi
    00002785: 	callq	_ZdlPvm@PLT # Offset: 10117
.Ltmp2384:
    0000278a: 	movq	0x10(%rsp), %rbx
    0000278f: 	movq	0x20(%rsp), %rsi
    00002794: 	leaq	DATAat0x27478(%rip), %rdx
    0000279b: 	movq	%rbx, %rdi
    0000279e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10142
    000027a3: 	movq	0x18(%rsp), %rsi
    000027a8: 	movq	%rbx, %r8
    000027ab: 	movl	$0x4000000, %edx
    000027b0: 	movq	%r15, %rdi
    000027b3: 	leaq	_Z18fast_reverse_copy2IPhS0_EvT_S1_T0_(%rip), %rcx
    000027ba: 	callq	_Z23test_reverse_copy_sizesIPhPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10170
    000027bf: 	movq	0x100(%rsp), %rdi
    000027c7: 	cmpq	0x8(%rsp), %rdi
    000027cc: 	je	.Ltmp2385 # Offset: 10188
    000027ce: 	movq	0x110(%rsp), %rax
    000027d6: 	leaq	0x1(%rax), %rsi
    000027da: 	callq	_ZdlPvm@PLT # Offset: 10202
.Ltmp2385:
    000027df: 	movq	0x10(%rsp), %rbx
    000027e4: 	movq	0x20(%rsp), %rsi
    000027e9: 	leaq	DATAat0x274a0(%rip), %rdx
    000027f0: 	movq	%rbx, %rdi
    000027f3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10227
    000027f8: 	movq	0x18(%rsp), %rsi
    000027fd: 	movq	%rbx, %r8
    00002800: 	movl	$0x4000000, %edx
    00002805: 	movq	%r15, %rdi
    00002808: 	leaq	_Z18fast_reverse_copy3IPhS0_EvT_S1_T0_(%rip), %rcx
    0000280f: 	callq	_Z23test_reverse_copy_sizesIPhPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10255
    00002814: 	movq	0x100(%rsp), %rdi
    0000281c: 	cmpq	0x8(%rsp), %rdi
    00002821: 	je	.Ltmp2386 # Offset: 10273
    00002823: 	movq	0x110(%rsp), %rax
    0000282b: 	leaq	0x1(%rax), %rsi
    0000282f: 	callq	_ZdlPvm@PLT # Offset: 10287
.Ltmp2386:
    00002834: 	movq	0x20(%rsp), %rsi
    00002839: 	movq	0x48(%rsp), %rdi
    0000283e: 	leaq	DATAat0x274c8(%rip), %rdx
    00002845: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10309
    0000284a: 	movl	iterations(%rip), %ebx
    00002850: 	leaq	DATAat0x271e0(%rip), %rsi
    00002857: 	movl	$0x1, %edi
    0000285c: 	xorl	%eax, %eax
    0000285e: 	movl	%ebx, 0x48(%rsp)
    00002862: 	callq	__printf_chk@PLT # Offset: 10338
    00002867: 	leaq	DATAat0x27210(%rip), %rsi
    0000286e: 	movl	$0x1, %edi
    00002873: 	xorl	%eax, %eax
    00002875: 	callq	__printf_chk@PLT # Offset: 10357
    0000287a: 	movslq	%ebx, %rax
    0000287d: 	xorl	%ebp, %ebp
    0000287f: 	movl	$0x4, %ebx
    00002884: 	movq	%rax, 0x30(%rsp)
    00002889: 	jmp	.Ltmp2387 # Offset: 10377
    0000288e: 	nop # Size: 2
.Ltmp2393:
    00002890: 	movzbl	(%r14), %eax
    00002894: 	movb	%al, 0x110(%rsp)
    0000289b: 	movq	0x8(%rsp), %rax
.Ltmp2395:
    000028a0: 	movq	0x10(%rsp), %r8
    000028a5: 	movq	0x18(%rsp), %rdx
    000028aa: 	movq	%r13, %rcx
    000028ad: 	movq	%r15, %rdi
    000028b0: 	movq	%r12, 0x108(%rsp)
    000028b8: 	movq	0x20(%rsp), %rsi
    000028bd: 	movb	$0x0, (%rax,%r12)
    000028c2: 	callq	"_Z17test_reverse_copyIPhPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 10434
    000028c7: 	movq	0x100(%rsp), %rdi
    000028cf: 	cmpq	0x8(%rsp), %rdi
    000028d4: 	je	.Ltmp2388 # Offset: 10452
    000028d6: 	movq	0x110(%rsp), %rax
    000028de: 	leaq	0x1(%rax), %rsi
    000028e2: 	callq	_ZdlPvm@PLT # Offset: 10466
.Ltmp2388:
    000028e7: 	pxor	%xmm1, %xmm1
    000028eb: 	pxor	%xmm2, %xmm2
    000028ef: 	movl	%ebx, %r8d
    000028f2: 	movl	%ebp, %edx
    000028f4: 	cvtsi2sd	%ebx, %xmm2
    000028f8: 	movq	results(%rip), %rax
    000028ff: 	movq	0xe0(%rsp), %rcx
    00002907: 	leaq	DATAat0x27240(%rip), %rsi
    0000290e: 	cvtsi2sdl	iterations(%rip), %xmm1
    00002916: 	movl	$0x1, %edi
    0000291b: 	movsd	(%rax), %xmm0
    0000291f: 	movl	$0x2, %eax
    00002924: 	mulsd	%xmm2, %xmm1
    00002928: 	divsd	DATAat0x276b0(%rip), %xmm1
    00002930: 	divsd	%xmm0, %xmm1
    00002934: 	callq	__printf_chk@PLT # Offset: 10548
    00002939: 	movl	$0x0, current_test(%rip)
    00002943: 	addl	$0x1, %ebp
    00002946: 	addl	%ebx, %ebx
    00002948: 	cmpl	$0x19, %ebp
    0000294b: 	je	.Ltmp2389 # Offset: 10571
.Ltmp2387:
    00002951: 	movl	$0x4000000, %eax
    00002956: 	movslq	%ebx, %r13
    00002959: 	movq	0xe0(%rsp), %r14
    00002961: 	movq	0xe8(%rsp), %r12
    00002969: 	cltd
    0000296a: 	idivl	%ebx
    0000296c: 	movl	$0x4, %edx
    00002971: 	cltq
    00002973: 	imulq	0x30(%rsp), %rax
    00002979: 	cmpq	%rdx, %rax
    0000297c: 	cmovlq	%rdx, %rax
    00002980: 	movl	$0x70000000, %edx
    00002985: 	cmpq	%rdx, %rax
    00002988: 	cmovgq	%rdx, %rax
    0000298c: 	addq	$0x1, %rax
    00002990: 	andq	$-0x2, %rax
    00002994: 	movl	%eax, iterations(%rip)
    0000299a: 	leaq	(%r15,%r13), %rax
    0000299e: 	addq	0x18(%rsp), %r13
    000029a3: 	movq	%rax, 0x20(%rsp)
    000029a8: 	movq	0x8(%rsp), %rax
    000029ad: 	movq	%rax, 0x100(%rsp)
    000029b5: 	movq	%r14, %rax
    000029b8: 	addq	%r12, %rax
    000029bb: 	je	.Ltmp2390 # Offset: 10683
    000029bd: 	testq	%r14, %r14
    000029c0: 	je	.Ltmp2391 # Offset: 10688
.Ltmp2390:
    000029c6: 	movq	%r12, 0x78(%rsp)
    000029cb: 	cmpq	$0xf, %r12
    000029cf: 	ja	.Ltmp2392 # Offset: 10703
    000029d1: 	cmpq	$0x1, %r12
    000029d5: 	je	.Ltmp2393 # Offset: 10709
    000029db: 	testq	%r12, %r12
    000029de: 	jne	.Ltmp2394 # Offset: 10718
    000029e4: 	movq	0x8(%rsp), %rax
    000029e9: 	jmp	.Ltmp2395 # Offset: 10729
    000029ee: 	nop # Size: 2
.Ltmp2392:
    000029f0: 	movq	0x10(%rsp), %rdi
    000029f5: 	leaq	0x78(%rsp), %rsi
    000029fa: 	xorl	%edx, %edx
    000029fc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 10748
    00002a01: 	movq	%rax, 0x100(%rsp)
    00002a09: 	movq	%rax, %rdi
    00002a0c: 	movq	0x78(%rsp), %rax
    00002a11: 	movq	%rax, 0x110(%rsp)
.Ltmp2421:
    00002a19: 	movq	%r12, %rdx
    00002a1c: 	movq	%r14, %rsi
    00002a1f: 	callq	memcpy@PLT # Offset: 10783
    00002a24: 	movq	0x78(%rsp), %r12
    00002a29: 	movq	0x100(%rsp), %rax
    00002a31: 	jmp	.Ltmp2395 # Offset: 10801
    00002a36: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2389:
    00002a40: 	movl	0x48(%rsp), %eax
    00002a44: 	movq	0xe0(%rsp), %rdi
    00002a4c: 	movl	%eax, iterations(%rip)
    00002a52: 	cmpq	0x40(%rsp), %rdi
    00002a57: 	je	.Ltmp2396 # Offset: 10839
    00002a59: 	movq	0xf0(%rsp), %rax
    00002a61: 	leaq	0x1(%rax), %rsi
    00002a65: 	callq	_ZdlPvm@PLT # Offset: 10853
.Ltmp2396:
    00002a6a: 	movl	0x5c(%rsp), %eax
    00002a6e: 	movq	0xc0(%rsp), %rdi
    00002a76: 	movl	%eax, iterations(%rip)
    00002a7c: 	leaq	0xd0(%rsp), %rax
    00002a84: 	cmpq	%rax, %rdi
    00002a87: 	je	.Ltmp2397 # Offset: 10887
    00002a89: 	movq	0xd0(%rsp), %rax
    00002a91: 	leaq	0x1(%rax), %rsi
    00002a95: 	callq	_ZdlPvm@PLT # Offset: 10901
.Ltmp2397:
    00002a9a: 	movq	0xa0(%rsp), %rdi
    00002aa2: 	leaq	0xb0(%rsp), %rax
    00002aaa: 	cmpq	%rax, %rdi
    00002aad: 	je	.Ltmp2398 # Offset: 10925
    00002aaf: 	movq	0xb0(%rsp), %rax
    00002ab7: 	leaq	0x1(%rax), %rsi
    00002abb: 	callq	_ZdlPvm@PLT # Offset: 10939
.Ltmp2398:
    00002ac0: 	movq	0x18(%rsp), %rdi
    00002ac5: 	movl	$0x1, %esi
    00002aca: 	callq	_ZdlPvm@PLT # Offset: 10954
    00002acf: 	movq	%r15, %rdi
    00002ad2: 	movl	$0x1, %esi
    00002ad7: 	callq	_ZdlPvm@PLT # Offset: 10967
    00002adc: 	movq	0x80(%rsp), %rdi
    00002ae4: 	cmpq	0x60(%rsp), %rdi
    00002ae9: 	je	.Ltmp2399 # Offset: 10985
    00002aeb: 	movq	0x90(%rsp), %rax
    00002af3: 	leaq	0x1(%rax), %rsi
    00002af7: 	callq	_ZdlPvm@PLT # Offset: 10999
.Ltmp2399:
    00002afc: 	movq	0x128(%rsp), %rax
    00002b04: 	subq	%fs:0x28, %rax
    00002b0d: 	jne	.Ltmp2400 # Offset: 11021
    00002b13: 	addq	$0x138, %rsp
    00002b1a: 	popq	%rbx
    00002b1b: 	popq	%rbp
    00002b1c: 	popq	%r12
    00002b1e: 	popq	%r13
    00002b20: 	popq	%r14
    00002b22: 	popq	%r15
    00002b24: 	retq # Offset: 11044
    00002b25: 	nopl	(%rax) # Size: 3
.Ltmp2228:
    00002b28: 	movq	%r14, %rdi
    00002b2b: 	movq	%r15, %rsi
    00002b2e: 	subq	%rdx, %rdi
    00002b31: 	addq	%r12, %rdi
    00002b34: 	callq	memmove@PLT # Offset: 11060
    00002b39: 	jmp	.Ltmp2401 # Offset: 11065
.Ltmp2233:
    00002b3e: 	movq	%rbx, %rsi
    00002b41: 	addq	$0x1, %rbx
    00002b45: 	movb	%cl, (%rsi)
    00002b47: 	cmpq	%rbx, %rbp
    00002b4a: 	jne	.Ltmp2229 # Offset: 11082
    00002b50: 	jmp	.Ltmp2402 # Offset: 11088
.Ltmp2328:
    00002b55: 	movq	0x100(%rsp), %rdx
    00002b5d: 	leaq	DATAat0x271d0(%rip), %rsi
    00002b64: 	movl	$0x1, %edi
    00002b69: 	xorl	%eax, %eax
    00002b6b: 	callq	__printf_chk@PLT # Offset: 11115
    00002b70: 	jmp	.Ltmp2403 # Offset: 11120
.Ltmp2320:
    00002b75: 	movq	0x100(%rsp), %rdx
    00002b7d: 	leaq	DATAat0x271d0(%rip), %rsi
    00002b84: 	movl	$0x1, %edi
    00002b89: 	xorl	%eax, %eax
    00002b8b: 	callq	__printf_chk@PLT # Offset: 11147
    00002b90: 	jmp	.Ltmp2404 # Offset: 11152
.Ltmp2325:
    00002b95: 	movq	0x10(%rsp), %rsi
    00002b9a: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002ba1: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 11169
    00002ba6: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002bad: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00002bb4: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002bbb: 	jne	.Ltmp2405 # Offset: 11195
.Ltmp2326:
    00002bc1: 	movq	-0x8(%rdx), %rax
    00002bc5: 	addq	$0x200, %rax
    00002bcb: 	jmp	.Ltmp2405 # Offset: 11211
.Ltmp2218:
    00002bd0: 	cmpq	0x8(%rsp), %rbp
    00002bd5: 	je	.Ltmp2221 # Offset: 11221
.Ltmp2408:
    00002bdb: 	movq	(%rbp), %rdi
    00002bdf: 	leaq	0x10(%rbp), %rax
    00002be3: 	cmpq	%rax, %rdi
    00002be6: 	je	.Ltmp2406 # Offset: 11238
.Ltmp2407:
    00002be8: 	movq	0x10(%rbp), %rax
    00002bec: 	addq	$0x20, %rbp
    00002bf0: 	leaq	0x1(%rax), %rsi
    00002bf4: 	callq	_ZdlPvm@PLT # Offset: 11252
    00002bf9: 	cmpq	%rbp, 0x8(%rsp)
    00002bfe: 	je	.Ltmp2221 # Offset: 11262
    00002c04: 	movq	(%rbp), %rdi
    00002c08: 	leaq	0x10(%rbp), %rax
    00002c0c: 	cmpq	%rax, %rdi
    00002c0f: 	jne	.Ltmp2407 # Offset: 11279
.Ltmp2406:
    00002c11: 	addq	$0x20, %rbp
    00002c15: 	cmpq	%rbp, 0x8(%rsp)
    00002c1a: 	jne	.Ltmp2408 # Offset: 11290
    00002c1c: 	jmp	.Ltmp2221 # Offset: 11292
.Ltmp2318:
    00002c21: 	movq	-0x8(%rdx), %rax
    00002c25: 	addq	$0x200, %rax
    00002c2b: 	jmp	.Ltmp2409 # Offset: 11307
.Ltmp2317:
    00002c30: 	movq	0x10(%rsp), %rsi
    00002c35: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002c3c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 11324
    00002c41: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002c48: 	jmp	.Ltmp2410 # Offset: 11336
.Ltmp2231:
    00002c4d: 	movq	%r12, %rcx
    00002c50: 	jmp	.Ltmp2411 # Offset: 11344
.Ltmp2336:
    00002c55: 	leaq	DATAat0x27008(%rip), %rdi
    00002c5c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 11356
.Ltmp2251:
    00002c61: 	movq	0x8(%rsp), %rdi
    00002c66: 	jmp	.Ltmp2412 # Offset: 11366
.Ltmp2248:
    00002c6b: 	leaq	DATAat0x27008(%rip), %rdi
    00002c72: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 11378
.Ltmp2382:
    00002c77: 	movq	0x8(%rsp), %rdi
    00002c7c: 	jmp	.Ltmp2413 # Offset: 11388
.Ltmp2379:
    00002c81: 	leaq	DATAat0x27008(%rip), %rdi
    00002c88: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 11400
.Ltmp2373:
    00002c8d: 	movq	0x8(%rsp), %rdi
    00002c92: 	jmp	.Ltmp2414 # Offset: 11410
.Ltmp2370:
    00002c97: 	leaq	DATAat0x27008(%rip), %rdi
    00002c9e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 11422
.Ltmp2363:
    00002ca3: 	movq	0x8(%rsp), %rdi
    00002ca8: 	jmp	.Ltmp2415 # Offset: 11432
.Ltmp2360:
    00002cad: 	leaq	DATAat0x27008(%rip), %rdi
    00002cb4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 11444
.Ltmp2292:
    00002cb9: 	movq	0x8(%rsp), %rdi
    00002cbe: 	jmp	.Ltmp2416 # Offset: 11454
.Ltmp2289:
    00002cc3: 	leaq	DATAat0x27008(%rip), %rdi
    00002cca: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 11466
.Ltmp2282:
    00002ccf: 	movq	0x8(%rsp), %rdi
    00002cd4: 	jmp	.Ltmp2417 # Offset: 11476
.Ltmp2279:
    00002cd9: 	leaq	DATAat0x27008(%rip), %rdi
    00002ce0: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 11488
.Ltmp2272:
    00002ce5: 	movq	0x8(%rsp), %rdi
    00002cea: 	jmp	.Ltmp2418 # Offset: 11498
.Ltmp2269:
    00002cef: 	leaq	DATAat0x27008(%rip), %rdi
    00002cf6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 11510
.Ltmp2262:
    00002cfb: 	movq	0x8(%rsp), %rdi
    00002d00: 	jmp	.Ltmp2419 # Offset: 11520
.Ltmp2259:
    00002d05: 	leaq	DATAat0x27008(%rip), %rdi
    00002d0c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 11532
.Ltmp2303:
    00002d11: 	movq	0x8(%rsp), %rdi
    00002d16: 	jmp	.Ltmp2420 # Offset: 11542
.Ltmp2300:
    00002d1b: 	leaq	DATAat0x27008(%rip), %rdi
    00002d22: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 11554
.Ltmp2400:
    00002d27: 	callq	__stack_chk_fail@PLT # Offset: 11559
.Ltmp2394:
    00002d2c: 	movq	0x8(%rsp), %rdi
    00002d31: 	jmp	.Ltmp2421 # Offset: 11569
.Ltmp2391:
    00002d36: 	leaq	DATAat0x27008(%rip), %rdi
    00002d3d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 11581
.Ltmp2349:
    00002d42: 	movq	0x8(%rsp), %rdi
    00002d47: 	jmp	.Ltmp2422 # Offset: 11591
.Ltmp2346:
    00002d4c: 	leaq	DATAat0x27008(%rip), %rdi
    00002d53: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 11603
.Ltmp2339:
    00002d58: 	movq	0x8(%rsp), %rdi
    00002d5d: 	jmp	.Ltmp2423 # Offset: 11613
    00002d62: 	endbr64
    00002d66: 	movq	%rax, %rbx
    00002d69: 	jmp	.Ltmp2424 # Offset: 11625
    00002d6b: 	endbr64
    00002d6f: 	movq	%rax, %rbx
    00002d72: 	jmp	.Ltmp2425 # Offset: 11634
.Ltmp2424:
    00002d74: 	movq	0x100(%rsp), %rdi
    00002d7c: 	leaq	0x110(%rsp), %rax
    00002d84: 	cmpq	%rax, %rdi
    00002d87: 	jne	.Ltmp2426 # Offset: 11655
.Ltmp2425:
    00002d89: 	movq	0x18(%rsp), %rdi
    00002d8e: 	movl	$0x1, %esi
    00002d93: 	callq	_ZdlPvm@PLT # Offset: 11667
.Ltmp2447:
    00002d98: 	movl	$0x1, %esi
    00002d9d: 	movq	%r15, %rdi
    00002da0: 	movq	%rbx, %rbp
    00002da3: 	callq	_ZdlPvm@PLT # Offset: 11683
.Ltmp2438:
    00002da8: 	movq	0x80(%rsp), %rdi
    00002db0: 	cmpq	0x60(%rsp), %rdi
    00002db5: 	je	.Ltmp2427 # Offset: 11701
    00002db7: 	movq	0x90(%rsp), %rax
    00002dbf: 	leaq	0x1(%rax), %rsi
    00002dc3: 	callq	_ZdlPvm@PLT # Offset: 11715
.Ltmp2427:
    00002dc8: 	movq	%rbp, %rdi
    00002dcb: 	callq	_Unwind_Resume@PLT # Offset: 11723
.Ltmp2431:
    00002dd0: 	movq	0x100(%rsp), %rdi
    00002dd8: 	cmpq	0x8(%rsp), %rdi
    00002ddd: 	je	.Ltmp2425 # Offset: 11741
.Ltmp2426:
    00002ddf: 	movq	0x110(%rsp), %rax
    00002de7: 	leaq	0x1(%rax), %rsi
    00002deb: 	callq	_ZdlPvm@PLT # Offset: 11755
    00002df0: 	jmp	.Ltmp2425 # Offset: 11760
    00002df2: 	endbr64
    00002df6: 	movq	%rax, %rbx
    00002df9: 	jmp	.Ltmp2428 # Offset: 11769
    00002dfb: 	endbr64
    00002dff: 	movq	%rax, %rbx
    00002e02: 	jmp	.Ltmp2429 # Offset: 11778
.Ltmp2428:
    00002e04: 	movq	0x100(%rsp), %rdi
    00002e0c: 	cmpq	0x8(%rsp), %rdi
    00002e11: 	je	.Ltmp2430 # Offset: 11793
    00002e13: 	movq	0x110(%rsp), %rax
    00002e1b: 	leaq	0x1(%rax), %rsi
    00002e1f: 	callq	_ZdlPvm@PLT # Offset: 11807
.Ltmp2430:
    00002e24: 	movq	0xe0(%rsp), %rdi
    00002e2c: 	leaq	0xf0(%rsp), %rax
    00002e34: 	cmpq	%rax, %rdi
    00002e37: 	je	.Ltmp2429 # Offset: 11831
.Ltmp2448:
    00002e39: 	movq	0xf0(%rsp), %rax
    00002e41: 	leaq	0x1(%rax), %rsi
    00002e45: 	callq	_ZdlPvm@PLT # Offset: 11845
.Ltmp2429:
    00002e4a: 	movq	0xa0(%rsp), %rdi
    00002e52: 	leaq	0xb0(%rsp), %rax
    00002e5a: 	cmpq	%rax, %rdi
    00002e5d: 	je	.Ltmp2425 # Offset: 11869
    00002e63: 	movq	0xb0(%rsp), %rax
    00002e6b: 	leaq	0x1(%rax), %rsi
    00002e6f: 	callq	_ZdlPvm@PLT # Offset: 11887
    00002e74: 	jmp	.Ltmp2425 # Offset: 11892
    00002e79: 	endbr64
.Ltmp2432:
    00002e7d: 	movq	%rax, %rbx
    00002e80: 	jmp	.Ltmp2431 # Offset: 11904
    00002e85: 	endbr64
    00002e89: 	jmp	.Ltmp2432 # Offset: 11913
    00002e8b: 	endbr64
    00002e8f: 	jmp	.Ltmp2432 # Offset: 11919
    00002e91: 	endbr64
    00002e95: 	jmp	.Ltmp2432 # Offset: 11925
    00002e97: 	endbr64
    00002e9b: 	jmp	.Ltmp2432 # Offset: 11931
    00002e9d: 	endbr64
    00002ea1: 	jmp	.Ltmp2432 # Offset: 11937
    00002ea3: 	endbr64
    00002ea7: 	jmp	.Ltmp2432 # Offset: 11943
    00002ea9: 	endbr64
    00002ead: 	movq	%rax, %rbx
    00002eb0: 	jmp	.Ltmp2430 # Offset: 11952
    00002eb5: 	endbr64
.Ltmp2439:
    00002eb9: 	movq	%rax, %rbx
    00002ebc: 	jmp	.Ltmp2433 # Offset: 11964
    00002ebe: 	endbr64
.Ltmp2441:
    00002ec2: 	movq	%rax, %rbx
    00002ec5: 	jmp	.Ltmp2434 # Offset: 11973
.Ltmp2433:
    00002ec7: 	movq	0x100(%rsp), %rdi
    00002ecf: 	cmpq	0x8(%rsp), %rdi
    00002ed4: 	je	.Ltmp2435 # Offset: 11988
    00002ed6: 	movq	0x110(%rsp), %rax
    00002ede: 	leaq	0x1(%rax), %rsi
    00002ee2: 	callq	_ZdlPvm@PLT # Offset: 12002
.Ltmp2435:
    00002ee7: 	movq	0xc0(%rsp), %rdi
    00002eef: 	leaq	0xd0(%rsp), %rax
    00002ef7: 	cmpq	%rax, %rdi
    00002efa: 	je	.Ltmp2429 # Offset: 12026
    00002f00: 	movq	0xd0(%rsp), %rax
    00002f08: 	leaq	0x1(%rax), %rsi
    00002f0c: 	callq	_ZdlPvm@PLT # Offset: 12044
    00002f11: 	jmp	.Ltmp2429 # Offset: 12049
.Ltmp2440:
    00002f16: 	movq	0x100(%rsp), %rdi
    00002f1e: 	cmpq	0x8(%rsp), %rdi
    00002f23: 	je	.Ltmp2434 # Offset: 12067
    00002f25: 	movq	0x110(%rsp), %rax
    00002f2d: 	leaq	0x1(%rax), %rsi
    00002f31: 	callq	_ZdlPvm@PLT # Offset: 12081
.Ltmp2434:
    00002f36: 	movq	0xe0(%rsp), %rdi
    00002f3e: 	cmpq	0x40(%rsp), %rdi
    00002f43: 	je	.Ltmp2435 # Offset: 12099
    00002f45: 	movq	0xf0(%rsp), %rax
    00002f4d: 	leaq	0x1(%rax), %rsi
    00002f51: 	callq	_ZdlPvm@PLT # Offset: 12113
    00002f56: 	jmp	.Ltmp2435 # Offset: 12118
    00002f58: 	endbr64
.Ltmp2437:
    00002f5c: 	movq	%rax, %rbx
    00002f5f: 	jmp	.Ltmp2436 # Offset: 12127
    00002f61: 	endbr64
    00002f65: 	jmp	.Ltmp2437 # Offset: 12133
    00002f67: 	endbr64
    00002f6b: 	jmp	.Ltmp2437 # Offset: 12139
    00002f6d: 	endbr64
    00002f71: 	movq	%rax, %rbp
    00002f74: 	jmp	.Ltmp2438 # Offset: 12148
.Ltmp2436:
    00002f79: 	movq	0x100(%rsp), %rdi
    00002f81: 	cmpq	0x8(%rsp), %rdi
    00002f86: 	je	.Ltmp2429 # Offset: 12166
    00002f8c: 	movq	0x110(%rsp), %rax
    00002f94: 	leaq	0x1(%rax), %rsi
    00002f98: 	callq	_ZdlPvm@PLT # Offset: 12184
    00002f9d: 	jmp	.Ltmp2429 # Offset: 12189
    00002fa2: 	endbr64
    00002fa6: 	jmp	.Ltmp2437 # Offset: 12198
    00002fa8: 	endbr64
    00002fac: 	jmp	.Ltmp2437 # Offset: 12204
    00002fae: 	endbr64
    00002fb2: 	jmp	.Ltmp2437 # Offset: 12210
    00002fb4: 	endbr64
    00002fb8: 	jmp	.Ltmp2437 # Offset: 12216
    00002fba: 	endbr64
    00002fbe: 	jmp	.Ltmp2439 # Offset: 12222
    00002fc3: 	endbr64
.Ltmp2442:
    00002fc7: 	movq	%rax, %rbx
    00002fca: 	jmp	.Ltmp2440 # Offset: 12234
    00002fcf: 	endbr64
    00002fd3: 	jmp	.Ltmp2441 # Offset: 12243
    00002fd8: 	endbr64
    00002fdc: 	jmp	.Ltmp2442 # Offset: 12252
    00002fde: 	endbr64
    00002fe2: 	jmp	.Ltmp2441 # Offset: 12258
    00002fe7: 	endbr64
    00002feb: 	jmp	.Ltmp2442 # Offset: 12267
    00002fed: 	endbr64
    00002ff1: 	jmp	.Ltmp2442 # Offset: 12273
    00002ff3: 	endbr64
    00002ff7: 	jmp	.Ltmp2441 # Offset: 12279
    00002ffc: 	endbr64
.Ltmp2444:
    00003000: 	movq	%rax, %rbx
    00003003: 	jmp	.Ltmp2443 # Offset: 12291
    00003005: 	endbr64
    00003009: 	jmp	.Ltmp2444 # Offset: 12297
    0000300b: 	endbr64
    0000300f: 	jmp	.Ltmp2444 # Offset: 12303
    00003011: 	endbr64
.Ltmp2446:
    00003015: 	movq	%rax, %rbx
    00003018: 	jmp	.Ltmp2445 # Offset: 12312
    0000301a: 	endbr64
    0000301e: 	jmp	.Ltmp2446 # Offset: 12318
    00003020: 	endbr64
    00003024: 	jmp	.Ltmp2437 # Offset: 12324
    00003029: 	endbr64
    0000302d: 	movq	%rax, %rbx
    00003030: 	jmp	.Ltmp2447 # Offset: 12336
    00003035: 	endbr64
    00003039: 	jmp	.Ltmp2441 # Offset: 12345
.Ltmp2443:
    0000303e: 	movq	0x100(%rsp), %rdi
    00003046: 	cmpq	0x8(%rsp), %rdi
    0000304b: 	je	.Ltmp2445 # Offset: 12363
    0000304d: 	movq	0x110(%rsp), %rax
    00003055: 	leaq	0x1(%rax), %rsi
    00003059: 	callq	_ZdlPvm@PLT # Offset: 12377
.Ltmp2445:
    0000305e: 	movq	0xe0(%rsp), %rdi
    00003066: 	cmpq	0x40(%rsp), %rdi
    0000306b: 	jne	.Ltmp2448 # Offset: 12395
    00003071: 	jmp	.Ltmp2429 # Offset: 12401
    00003076: 	endbr64
    0000307a: 	movq	%rax, %rbx
    0000307d: 	jmp	.Ltmp2435 # Offset: 12413
    00003082: 	endbr64
    00003086: 	jmp	.Ltmp2441 # Offset: 12422
    0000308b: 	endbr64
    0000308f: 	jmp	.Ltmp2437 # Offset: 12431
    00003094: 	endbr64
    00003098: 	jmp	.Ltmp2444 # Offset: 12440
    0000309d: 	endbr64
    000030a1: 	jmp	.Ltmp2446 # Offset: 12449
    000030a6: 	endbr64
    000030aa: 	jmp	.Ltmp2444 # Offset: 12458
    000030af: 	endbr64
    000030b3: 	jmp	.Ltmp2437 # Offset: 12467
    000030b8: 	endbr64
    000030bc: 	jmp	.Ltmp2437 # Offset: 12476
    000030c1: 	endbr64
    000030c5: 	jmp	.Ltmp2437 # Offset: 12485
    000030ca: 	endbr64
    000030ce: 	jmp	.Ltmp2442 # Offset: 12494
    000030d3: 	endbr64
    000030d7: 	jmp	.Ltmp2432 # Offset: 12503
    000030dc: 	endbr64
    000030e0: 	jmp	.Ltmp2442 # Offset: 12512
    000030e5: 	endbr64
    000030e9: 	jmp	.Ltmp2441 # Offset: 12521
    000030ee: 	endbr64
    000030f2: 	jmp	.Ltmp2442 # Offset: 12530
    000030f7: 	endbr64
    000030fb: 	jmp	.Ltmp2446 # Offset: 12539
    00003100: 	endbr64
    00003104: 	jmp	.Ltmp2446 # Offset: 12548
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIhEvv"

Binary Function "_Z11TestOneTypeIiEvv" after disassembly {
  Number      : 244
  State       : disassembled
  Address     : 0x1eb30
  Size        : 0x1e7d
  MaxSize     : 0x1e80
  Offset      : 0x1eb30
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIiEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0243:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x108, %rsp
    00000015: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm2
    0000001d: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm5
    00000025: 	movq	%fs:0x28, %rax
    0000002e: 	movq	%rax, 0xf8(%rsp)
    00000036: 	movl	iterations(%rip), %eax
    0000003c: 	movq	"_ZL7gLabels/1"+56(%rip), %r14
    00000043: 	movl	$0x33746e69, 0x80(%rsp)
    0000004e: 	movaps	%xmm2, 0x20(%rsp)
    00000053: 	movq	%xmm2, %rbp
    00000058: 	movhlps	%xmm5, %xmm2
    0000005b: 	movq	%xmm2, %rbx
    00000060: 	movb	$0x74, 0x86(%rsp)
    00000068: 	leaq	0x8(%rbx), %r12
    0000006c: 	movb	$0x0, 0x87(%rsp)
    00000074: 	movq	$0x7, 0x78(%rsp)
    0000007d: 	movaps	%xmm5, 0x40(%rsp)
    00000082: 	movl	%eax, 0x1c(%rsp)
    00000086: 	leaq	0x80(%rsp), %rax
    0000008e: 	movq	%rax, 0x38(%rsp)
    00000093: 	movq	%rax, 0x70(%rsp)
    00000098: 	movl	$0x5f32, %eax
    0000009d: 	movw	%ax, 0x84(%rsp)
    000000a5: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000ac: 	movq	%xmm2, 0x50(%rsp)
    000000b2: 	movq	%rax, 0x8(%rsp)
    000000b7: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    000000be: 	movq	%xmm5, 0x10(%rsp)
    000000c4: 	movq	%rax, 0x30(%rsp)
    000000c9: 	cmpq	%r12, %rax
    000000cc: 	jbe	.Ltmp2449 # Offset: 204
    000000ce: 	movq	%rbp, 0x58(%rsp)
    000000d3: 	movq	%r12, %r13
    000000d6: 	movq	%rax, %r15
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp2452:
    000000e0: 	movq	(%r13), %rbp
    000000e4: 	leaq	0x200(%rbp), %rbx
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2451:
    000000f0: 	movq	(%rbp), %rdi
    000000f4: 	leaq	0x10(%rbp), %rdx
    000000f8: 	cmpq	%rdx, %rdi
    000000fb: 	je	.Ltmp2450 # Offset: 251
    00000101: 	movq	0x10(%rbp), %rax
    00000105: 	addq	$0x20, %rbp
    00000109: 	leaq	0x1(%rax), %rsi
    0000010d: 	callq	_ZdlPvm@PLT # Offset: 269
    00000112: 	cmpq	%rbp, %rbx
    00000115: 	jne	.Ltmp2451 # Offset: 277
    00000117: 	addq	$0x8, %r13
    0000011b: 	cmpq	%r13, %r15
    0000011e: 	ja	.Ltmp2452 # Offset: 286
.Ltmp2592:
    00000120: 	movq	0x58(%rsp), %rbp
.Ltmp2449:
    00000125: 	movq	0x50(%rsp), %rbx
    0000012a: 	cmpq	%rbx, 0x30(%rsp)
    0000012f: 	jne	.Ltmp2453 # Offset: 303
    00000131: 	jmp	.Ltmp2454 # Offset: 305
    00000136: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2456:
    00000140: 	movq	(%rbp), %rdi
    00000144: 	leaq	0x10(%rbp), %rax
    00000148: 	cmpq	%rax, %rdi
    0000014b: 	je	.Ltmp2455 # Offset: 331
    0000014d: 	movq	0x10(%rbp), %rax
    00000151: 	leaq	0x1(%rax), %rsi
    00000155: 	callq	_ZdlPvm@PLT # Offset: 341
.Ltmp2455:
    0000015a: 	addq	$0x20, %rbp
.Ltmp2453:
    0000015e: 	cmpq	0x10(%rsp), %rbp
    00000163: 	jne	.Ltmp2456 # Offset: 355
    00000165: 	cmpq	%r14, 0x8(%rsp)
    0000016a: 	je	.Ltmp2457 # Offset: 362
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp2459:
    00000170: 	movq	(%r14), %rdi
    00000173: 	leaq	0x10(%r14), %rax
    00000177: 	cmpq	%rax, %rdi
    0000017a: 	je	.Ltmp2458 # Offset: 378
    0000017c: 	movq	0x10(%r14), %rax
    00000180: 	leaq	0x1(%rax), %rsi
    00000184: 	callq	_ZdlPvm@PLT # Offset: 388
.Ltmp2458:
    00000189: 	addq	$0x20, %r14
    0000018d: 	cmpq	%r14, 0x8(%rsp)
    00000192: 	jne	.Ltmp2459 # Offset: 402
.Ltmp2457:
    00000194: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    0000019b: 	leaq	0x8(%rax), %rbx
    0000019f: 	cmpq	%r12, %rbx
    000001a2: 	jbe	.Ltmp2460 # Offset: 418
    000001a4: 	nopl	(%rax) # Size: 4
.Ltmp2461:
    000001a8: 	movq	(%r12), %rdi
    000001ac: 	movl	$0x200, %esi
    000001b1: 	addq	$0x8, %r12
    000001b5: 	callq	_ZdlPvm@PLT # Offset: 437
    000001ba: 	cmpq	%r12, %rbx
    000001bd: 	ja	.Ltmp2461 # Offset: 445
.Ltmp2460:
    000001bf: 	movdqa	0x20(%rsp), %xmm1
    000001c5: 	movdqa	0x40(%rsp), %xmm5
    000001cb: 	movl	$0x4000000, %edi
    000001d0: 	movaps	%xmm1, "_ZL7gLabels/1"+48(%rip)
    000001d7: 	movaps	%xmm5, "_ZL7gLabels/1"+64(%rip)
    000001de: 	callq	_Znam@PLT # Offset: 478
    000001e3: 	movl	$0x4000000, %edi
    000001e8: 	movq	%rax, %rbp
    000001eb: 	callq	_Znam@PLT # Offset: 491
    000001f0: 	movq	%rax, %r15
    000001f3: 	movslq	init_value(%rip), %rax
    000001fa: 	movdqa	DATAat0x27680(%rip), %xmm5
    00000202: 	leaq	0x4000000(%rbp), %r13
    00000209: 	movdqa	DATAat0x275f0(%rip), %xmm4
    00000211: 	pcmpeqd	%xmm3, %xmm3
    00000215: 	leaq	0x1000000(%rax), %rbx
    0000021c: 	addq	$0xffffff, %rax
    00000222: 	movq	%rax, %xmm1
    00000227: 	movq	%rbx, %xmm2
    0000022c: 	movq	%rbp, %rax
    0000022f: 	punpcklqdq	%xmm1, %xmm2
    00000233: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2462:
    00000238: 	movdqa	%xmm2, %xmm0
    0000023c: 	addq	$0x10, %rax
    00000240: 	paddq	%xmm5, %xmm2
    00000244: 	movdqa	%xmm0, %xmm1
    00000248: 	paddq	%xmm4, %xmm0
    0000024c: 	paddq	%xmm3, %xmm1
    00000250: 	shufps	$0x88, %xmm0, %xmm1
    00000254: 	movups	%xmm1, -0x10(%rax)
    00000258: 	cmpq	%rax, %r13
    0000025b: 	jne	.Ltmp2462 # Offset: 603
    0000025d: 	movl	$0x30, %edx
    00000262: 	movq	%r13, %rsi
    00000265: 	leaq	0x40(%rbp), %r12
    00000269: 	movq	%rbp, %rdi
    0000026c: 	callq	"_ZSt16__introsort_loopIPilN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1" # Offset: 620
    00000271: 	leaq	0x4(%rbp), %rax
    00000275: 	movq	%rax, 0x20(%rsp)
    0000027a: 	movq	%rax, %r14
    0000027d: 	jmp	.Ltmp2463 # Offset: 637
    0000027f: 	nop # Size: 1
.Ltmp2466:
    00000280: 	cmpq	%r14, %rbp
    00000283: 	je	.Ltmp2464 # Offset: 643
    00000285: 	movq	%r14, %rdx
    00000288: 	movl	$0x4, %eax
    0000028d: 	movq	%rbp, %rsi
    00000290: 	subq	%rbp, %rdx
    00000293: 	leaq	(%rbp,%rax), %rdi
    00000298: 	callq	memmove@PLT # Offset: 664
.Ltmp2464:
    0000029d: 	addq	$0x4, %r14
    000002a1: 	movl	%ebx, (%rbp)
    000002a4: 	cmpq	%r14, %r12
    000002a7: 	je	.Ltmp2465 # Offset: 679
.Ltmp2463:
    000002a9: 	movl	(%r14), %ebx
    000002ac: 	cmpl	(%rbp), %ebx
    000002af: 	jl	.Ltmp2466 # Offset: 687
    000002b1: 	movl	-0x4(%r14), %edx
    000002b5: 	leaq	-0x4(%r14), %rax
    000002b9: 	cmpl	%edx, %ebx
    000002bb: 	jge	.Ltmp2467 # Offset: 699
    000002c1: 	nopl	(%rax) # Size: 7
.Ltmp2468:
    000002c8: 	movl	%edx, 0x4(%rax)
    000002cb: 	movq	%rax, %rcx
    000002ce: 	movl	-0x4(%rax), %edx
    000002d1: 	subq	$0x4, %rax
    000002d5: 	cmpl	%edx, %ebx
    000002d7: 	jl	.Ltmp2468 # Offset: 727
    000002d9: 	movl	%ebx, (%rcx)
.Ltmp2622:
    000002db: 	addq	$0x4, %r14
    000002df: 	cmpq	%r14, %r12
    000002e2: 	jne	.Ltmp2463 # Offset: 738
    000002e4: 	nopl	(%rax) # Size: 4
.Ltmp2465:
    000002e8: 	movl	(%r12), %ecx
    000002ec: 	movl	-0x4(%r12), %edx
    000002f1: 	leaq	-0x4(%r12), %rax
    000002f6: 	cmpl	%edx, %ecx
    000002f8: 	jge	.Ltmp2469 # Offset: 760
    000002fe: 	nop # Size: 2
.Ltmp2470:
    00000300: 	movl	%edx, 0x4(%rax)
    00000303: 	movq	%rax, %rsi
    00000306: 	movl	-0x4(%rax), %edx
    00000309: 	subq	$0x4, %rax
    0000030d: 	cmpl	%edx, %ecx
    0000030f: 	jl	.Ltmp2470 # Offset: 783
    00000311: 	addq	$0x4, %r12
    00000315: 	movl	%ecx, (%rsi)
    00000317: 	cmpq	%r12, %r13
    0000031a: 	jne	.Ltmp2465 # Offset: 794
.Ltmp2594:
    0000031c: 	leaq	0xd0(%rsp), %rbx
    00000324: 	leaq	0x70(%rsp), %r13
    00000329: 	leaq	0x7d00(%rbp), %rax
    00000330: 	leaq	DATAat0x27268(%rip), %rdx
    00000337: 	movq	%r13, %rsi
    0000033a: 	movq	%rbx, %rdi
    0000033d: 	movq	%rax, 0x10(%rsp)
    00000342: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 834
    00000347: 	callq	clock@PLT # Offset: 839
    0000034c: 	movl	iterations(%rip), %r10d
    00000353: 	xorl	%r9d, %r9d
    00000356: 	leaq	0x7cfc(%rbp), %rdi
    0000035d: 	movq	%rax, start_time(%rip)
    00000364: 	leaq	0x3e80(%rbp), %rcx
    0000036b: 	testl	%r10d, %r10d
    0000036e: 	jle	.Ltmp2471 # Offset: 878
.Ltmp2475:
    00000370: 	movq	%rbp, %rdx
    00000373: 	movq	%rdi, %rax
    00000376: 	jmp	.Ltmp2472 # Offset: 886
    00000378: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2474:
    00000380: 	subq	$0x4, %rax
    00000384: 	addq	$0x4, %rdx
    00000388: 	cmpq	%rdx, %rax
    0000038b: 	je	.Ltmp2473 # Offset: 907
.Ltmp2472:
    0000038d: 	movl	(%rdx), %esi
    0000038f: 	movl	(%rax), %r8d
    00000392: 	movl	%r8d, (%rdx)
    00000395: 	movl	%esi, (%rax)
    00000397: 	cmpq	%rcx, %rax
    0000039a: 	jne	.Ltmp2474 # Offset: 922
.Ltmp2473:
    0000039c: 	addl	$0x1, %r9d
    000003a0: 	cmpl	%r10d, %r9d
    000003a3: 	jne	.Ltmp2475 # Offset: 931
.Ltmp2471:
    000003a5: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000003ac: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    000003b3: 	subq	$0x20, %rax
    000003b7: 	cmpq	%rax, %r14
    000003ba: 	je	.Ltmp2476 # Offset: 954
    000003c0: 	leaq	0x10(%r14), %rdi
    000003c4: 	movq	0xd8(%rsp), %r12
    000003cc: 	movq	%rdi, (%r14)
    000003cf: 	movq	0xd0(%rsp), %rax
    000003d7: 	movq	%rax, %rcx
    000003da: 	movq	%rax, 0x8(%rsp)
    000003df: 	addq	%r12, %rcx
    000003e2: 	je	.Ltmp2477 # Offset: 994
    000003e4: 	testq	%rax, %rax
    000003e7: 	je	.Ltmp2478 # Offset: 999
.Ltmp2477:
    000003ed: 	movq	%r12, 0x68(%rsp)
    000003f2: 	cmpq	$0xf, %r12
    000003f6: 	ja	.Ltmp2479 # Offset: 1014
    000003fc: 	cmpq	$0x1, %r12
    00000400: 	jne	.Ltmp2480 # Offset: 1024
    00000406: 	movq	0x8(%rsp), %rax
    0000040b: 	movzbl	(%rax), %eax
    0000040e: 	movb	%al, 0x10(%r14)
.Ltmp2593:
    00000412: 	movq	%r12, 0x8(%r14)
    00000416: 	movb	$0x0, (%rdi,%r12)
    0000041b: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000422: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000429: 	addq	$0x20, %rax
    0000042d: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000434: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    0000043b: 	je	.Ltmp2481 # Offset: 1083
.Ltmp2608:
    00000441: 	movq	-0x20(%rax), %r12
    00000445: 	callq	clock@PLT # Offset: 1093
    0000044a: 	pxor	%xmm0, %xmm0
    0000044e: 	movq	%rax, end_time(%rip)
    00000455: 	movq	%r12, %rdi
    00000458: 	subq	start_time(%rip), %rax
    0000045f: 	cvtsi2sd	%rax, %xmm0
    00000464: 	divsd	DATAat0x276b0(%rip), %xmm0
    0000046c: 	callq	_Z13record_resultdPKc # Offset: 1132
    00000471: 	movq	0x20(%rsp), %rax
    00000476: 	movq	0x10(%rsp), %rcx
    0000047b: 	movq	%rax, %r12
    0000047e: 	jmp	.Ltmp2482 # Offset: 1150
.Ltmp2484:
    00000480: 	movl	(%rax), %edx
    00000482: 	addq	$0x4, %rax
    00000486: 	cmpl	-0x8(%rax), %edx
    00000489: 	jl	.Ltmp2483 # Offset: 1161
.Ltmp2482:
    0000048f: 	cmpq	%rax, %rcx
    00000492: 	jne	.Ltmp2484 # Offset: 1170
.Ltmp2602:
    00000494: 	movq	0xd0(%rsp), %rdi
    0000049c: 	leaq	0xe0(%rsp), %rax
    000004a4: 	movq	%rax, 0x8(%rsp)
    000004a9: 	cmpq	%rax, %rdi
    000004ac: 	je	.Ltmp2485 # Offset: 1196
    000004ae: 	movq	0xe0(%rsp), %rax
    000004b6: 	leaq	0x1(%rax), %rsi
    000004ba: 	callq	_ZdlPvm@PLT # Offset: 1210
.Ltmp2485:
    000004bf: 	leaq	DATAat0x27284(%rip), %rdx
    000004c6: 	movq	%r13, %rsi
    000004c9: 	movq	%rbx, %rdi
    000004cc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1228
    000004d1: 	callq	clock@PLT # Offset: 1233
    000004d6: 	movl	iterations(%rip), %r10d
    000004dd: 	xorl	%r9d, %r9d
    000004e0: 	leaq	0x7cfc(%rbp), %rdi
    000004e7: 	movq	%rax, start_time(%rip)
    000004ee: 	leaq	0x3e80(%rbp), %rcx
    000004f5: 	testl	%r10d, %r10d
    000004f8: 	jle	.Ltmp2486 # Offset: 1272
    000004fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2489:
    00000500: 	movq	%rdi, %rdx
    00000503: 	movq	%rbp, %rax
    00000506: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2488:
    00000510: 	cmpq	%rax, %rdx
    00000513: 	je	.Ltmp2487 # Offset: 1299
    00000515: 	movl	(%rdx), %r8d
    00000518: 	movl	(%rax), %esi
    0000051a: 	addq	$0x4, %rax
    0000051e: 	subq	$0x4, %rdx
    00000522: 	movl	%r8d, -0x4(%rax)
    00000526: 	movl	%esi, 0x4(%rdx)
    00000529: 	cmpq	%rcx, %rax
    0000052c: 	jne	.Ltmp2488 # Offset: 1324
.Ltmp2487:
    0000052e: 	addl	$0x1, %r9d
    00000532: 	cmpl	%r10d, %r9d
    00000535: 	jne	.Ltmp2489 # Offset: 1333
.Ltmp2486:
    00000537: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000053e: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    00000545: 	subq	$0x20, %rax
    00000549: 	cmpq	%rax, %r14
    0000054c: 	je	.Ltmp2490 # Offset: 1356
    00000552: 	leaq	0x10(%r14), %rdi
    00000556: 	movq	0xd8(%rsp), %rsi
    0000055e: 	movq	%rdi, (%r14)
    00000561: 	movq	0xd0(%rsp), %rcx
    00000569: 	movq	%rsi, 0x30(%rsp)
    0000056e: 	movq	%rcx, %rax
    00000571: 	movq	%rcx, 0x40(%rsp)
    00000576: 	addq	%rsi, %rax
    00000579: 	je	.Ltmp2491 # Offset: 1401
    0000057b: 	testq	%rcx, %rcx
    0000057e: 	je	.Ltmp2492 # Offset: 1406
.Ltmp2491:
    00000584: 	movq	0x30(%rsp), %rax
    00000589: 	movq	%rax, 0x68(%rsp)
    0000058e: 	cmpq	$0xf, %rax
    00000592: 	ja	.Ltmp2493 # Offset: 1426
    00000598: 	cmpq	$0x1, 0x30(%rsp)
    0000059e: 	jne	.Ltmp2494 # Offset: 1438
    000005a4: 	movq	0x40(%rsp), %rax
    000005a9: 	movzbl	(%rax), %eax
    000005ac: 	movb	%al, 0x10(%r14)
.Ltmp2620:
    000005b0: 	movq	0x30(%rsp), %rax
    000005b5: 	movq	%rax, 0x8(%r14)
    000005b9: 	movb	$0x0, (%rdi,%rax)
    000005bd: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000005c4: 	addq	$0x20, %rax
    000005c8: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp2609:
    000005cf: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000005d6: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000005dd: 	je	.Ltmp2495 # Offset: 1501
.Ltmp2605:
    000005e3: 	movq	-0x20(%rax), %r14
    000005e7: 	callq	clock@PLT # Offset: 1511
    000005ec: 	pxor	%xmm0, %xmm0
    000005f0: 	movq	%rax, end_time(%rip)
    000005f7: 	movq	%r14, %rdi
    000005fa: 	subq	start_time(%rip), %rax
    00000601: 	cvtsi2sd	%rax, %xmm0
    00000606: 	divsd	DATAat0x276b0(%rip), %xmm0
    0000060e: 	callq	_Z13record_resultdPKc # Offset: 1550
    00000613: 	movq	0x20(%rsp), %rax
    00000618: 	movq	0x10(%rsp), %rcx
    0000061d: 	jmp	.Ltmp2496 # Offset: 1565
    0000061f: 	nop # Size: 1
.Ltmp2498:
    00000620: 	movl	(%rax), %edx
    00000622: 	addq	$0x4, %rax
    00000626: 	cmpl	-0x8(%rax), %edx
    00000629: 	jl	.Ltmp2497 # Offset: 1577
.Ltmp2496:
    0000062f: 	cmpq	%rax, %rcx
    00000632: 	jne	.Ltmp2498 # Offset: 1586
.Ltmp2603:
    00000634: 	movq	0xd0(%rsp), %rdi
    0000063c: 	cmpq	0x8(%rsp), %rdi
    00000641: 	je	.Ltmp2499 # Offset: 1601
    00000643: 	movq	0xe0(%rsp), %rax
    0000064b: 	leaq	0x1(%rax), %rsi
    0000064f: 	callq	_ZdlPvm@PLT # Offset: 1615
.Ltmp2499:
    00000654: 	leaq	DATAat0x272a2(%rip), %rdx
    0000065b: 	movq	%r13, %rsi
    0000065e: 	movq	%rbx, %rdi
    00000661: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1633
    00000666: 	callq	clock@PLT # Offset: 1638
    0000066b: 	movl	iterations(%rip), %r10d
    00000672: 	xorl	%r9d, %r9d
    00000675: 	leaq	0x7cfc(%rbp), %rdi
    0000067c: 	movq	%rax, start_time(%rip)
    00000683: 	leaq	0x3e80(%rbp), %rcx
    0000068a: 	testl	%r10d, %r10d
    0000068d: 	jle	.Ltmp2500 # Offset: 1677
    0000068f: 	nop # Size: 1
.Ltmp2503:
    00000690: 	movq	%rdi, %rdx
    00000693: 	movq	%rbp, %rax
    00000696: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2502:
    000006a0: 	cmpq	%rax, %rdx
    000006a3: 	je	.Ltmp2501 # Offset: 1699
    000006a5: 	movl	(%rdx), %r8d
    000006a8: 	movl	(%rax), %esi
    000006aa: 	addq	$0x4, %rax
    000006ae: 	subq	$0x4, %rdx
    000006b2: 	movl	%r8d, -0x4(%rax)
    000006b6: 	movl	%esi, 0x4(%rdx)
    000006b9: 	cmpq	%rcx, %rax
    000006bc: 	jne	.Ltmp2502 # Offset: 1724
.Ltmp2501:
    000006be: 	addl	$0x1, %r9d
    000006c2: 	cmpl	%r10d, %r9d
    000006c5: 	jne	.Ltmp2503 # Offset: 1733
.Ltmp2500:
    000006c7: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000006ce: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    000006d5: 	subq	$0x20, %rax
    000006d9: 	cmpq	%rax, %r14
    000006dc: 	je	.Ltmp2504 # Offset: 1756
    000006e2: 	leaq	0x10(%r14), %rdi
    000006e6: 	movq	0xd8(%rsp), %rsi
    000006ee: 	movq	%rdi, (%r14)
    000006f1: 	movq	0xd0(%rsp), %rcx
    000006f9: 	movq	%rsi, 0x30(%rsp)
    000006fe: 	movq	%rcx, %rax
    00000701: 	movq	%rcx, 0x20(%rsp)
    00000706: 	addq	%rsi, %rax
    00000709: 	je	.Ltmp2505 # Offset: 1801
    0000070b: 	testq	%rcx, %rcx
    0000070e: 	je	.Ltmp2506 # Offset: 1806
.Ltmp2505:
    00000714: 	movq	0x30(%rsp), %rax
    00000719: 	movq	%rax, 0x68(%rsp)
    0000071e: 	cmpq	$0xf, %rax
    00000722: 	ja	.Ltmp2507 # Offset: 1826
    00000728: 	cmpq	$0x1, 0x30(%rsp)
    0000072e: 	jne	.Ltmp2508 # Offset: 1838
    00000734: 	movq	0x20(%rsp), %rax
    00000739: 	movzbl	(%rax), %eax
    0000073c: 	movb	%al, 0x10(%r14)
.Ltmp2617:
    00000740: 	movq	0x30(%rsp), %rax
    00000745: 	movq	%rax, 0x8(%r14)
    00000749: 	movb	$0x0, (%rdi,%rax)
    0000074d: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000754: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000075b: 	addq	$0x20, %rax
    0000075f: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000766: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    0000076d: 	je	.Ltmp2509 # Offset: 1901
.Ltmp2604:
    00000773: 	movq	-0x20(%rax), %r14
    00000777: 	callq	clock@PLT # Offset: 1911
    0000077c: 	pxor	%xmm0, %xmm0
    00000780: 	movq	%rax, end_time(%rip)
    00000787: 	movq	%r14, %rdi
    0000078a: 	subq	start_time(%rip), %rax
    00000791: 	cvtsi2sd	%rax, %xmm0
    00000796: 	divsd	DATAat0x276b0(%rip), %xmm0
    0000079e: 	callq	_Z13record_resultdPKc # Offset: 1950
    000007a3: 	movq	0x10(%rsp), %rdx
    000007a8: 	jmp	.Ltmp2510 # Offset: 1960
    000007aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2512:
    000007b0: 	movl	(%r12), %eax
    000007b4: 	addq	$0x4, %r12
    000007b8: 	cmpl	-0x8(%r12), %eax
    000007bd: 	jl	.Ltmp2511 # Offset: 1981
.Ltmp2510:
    000007c3: 	cmpq	%r12, %rdx
    000007c6: 	jne	.Ltmp2512 # Offset: 1990
.Ltmp2597:
    000007c8: 	movq	0xd0(%rsp), %rdi
    000007d0: 	cmpq	0x8(%rsp), %rdi
    000007d5: 	je	.Ltmp2513 # Offset: 2005
    000007d7: 	movq	0xe0(%rsp), %rax
    000007df: 	leaq	0x1(%rax), %rsi
    000007e3: 	callq	_ZdlPvm@PLT # Offset: 2019
.Ltmp2513:
    000007e8: 	leaq	DATAat0x272be(%rip), %rdx
    000007ef: 	movq	%r13, %rsi
    000007f2: 	movq	%rbx, %rdi
    000007f5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2037
    000007fa: 	movq	0x10(%rsp), %rsi
    000007ff: 	movq	%rbx, %rcx
    00000802: 	leaq	_ZSt7reverseIPiEvT_S1_(%rip), %rdx
    00000809: 	movq	%rbp, %rdi
    0000080c: 	callq	_Z12test_reverseIPiPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2060
    00000811: 	movq	0xd0(%rsp), %rdi
    00000819: 	cmpq	0x8(%rsp), %rdi
    0000081e: 	je	.Ltmp2514 # Offset: 2078
    00000820: 	movq	0xe0(%rsp), %rax
    00000828: 	leaq	0x1(%rax), %rsi
    0000082c: 	callq	_ZdlPvm@PLT # Offset: 2092
.Ltmp2514:
    00000831: 	leaq	DATAat0x272da(%rip), %rdx
    00000838: 	movq	%r13, %rsi
    0000083b: 	movq	%rbx, %rdi
    0000083e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2110
    00000843: 	movq	0x10(%rsp), %rsi
    00000848: 	movq	%rbx, %rcx
    0000084b: 	leaq	_Z17my_simple_reverseIPiEvT_S1_(%rip), %rdx
    00000852: 	movq	%rbp, %rdi
    00000855: 	callq	_Z12test_reverseIPiPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2133
    0000085a: 	movq	0xd0(%rsp), %rdi
    00000862: 	cmpq	0x8(%rsp), %rdi
    00000867: 	je	.Ltmp2515 # Offset: 2151
    00000869: 	movq	0xe0(%rsp), %rax
    00000871: 	leaq	0x1(%rax), %rsi
    00000875: 	callq	_ZdlPvm@PLT # Offset: 2165
.Ltmp2515:
    0000087a: 	leaq	DATAat0x272f8(%rip), %rdx
    00000881: 	movq	%r13, %rsi
    00000884: 	movq	%rbx, %rdi
    00000887: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2183
    0000088c: 	movq	0x10(%rsp), %rsi
    00000891: 	movq	%rbx, %rcx
    00000894: 	leaq	_Z15my_fast_reverseIPiEvT_S1_(%rip), %rdx
    0000089b: 	movq	%rbp, %rdi
    0000089e: 	callq	_Z12test_reverseIPiPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2206
    000008a3: 	movq	0xd0(%rsp), %rdi
    000008ab: 	cmpq	0x8(%rsp), %rdi
    000008b0: 	je	.Ltmp2516 # Offset: 2224
    000008b2: 	movq	0xe0(%rsp), %rax
    000008ba: 	leaq	0x1(%rax), %rsi
    000008be: 	callq	_ZdlPvm@PLT # Offset: 2238
.Ltmp2516:
    000008c3: 	leaq	DATAat0x27314(%rip), %rdx
    000008ca: 	movq	%r13, %rsi
    000008cd: 	movq	%rbx, %rdi
    000008d0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2256
    000008d5: 	movq	0x10(%rsp), %rsi
    000008da: 	movq	%rbx, %rcx
    000008dd: 	leaq	_Z13fast_reverse2IPiEvT_S1_(%rip), %rdx
    000008e4: 	movq	%rbp, %rdi
    000008e7: 	callq	_Z12test_reverseIPiPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2279
    000008ec: 	movq	0xd0(%rsp), %rdi
    000008f4: 	cmpq	0x8(%rsp), %rdi
    000008f9: 	je	.Ltmp2517 # Offset: 2297
    000008fb: 	movq	0xe0(%rsp), %rax
    00000903: 	leaq	0x1(%rax), %rsi
    00000907: 	callq	_ZdlPvm@PLT # Offset: 2311
.Ltmp2517:
    0000090c: 	leaq	DATAat0x27331(%rip), %rdx
    00000913: 	movq	%r13, %rsi
    00000916: 	movq	%rbx, %rdi
    00000919: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2329
    0000091e: 	movq	0x10(%rsp), %rsi
    00000923: 	movq	%rbx, %rcx
    00000926: 	leaq	_Z13fast_reverse3IPiEvT_S1_(%rip), %rdx
    0000092d: 	movq	%rbp, %rdi
    00000930: 	callq	_Z12test_reverseIPiPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2352
    00000935: 	movq	0xd0(%rsp), %rdi
    0000093d: 	cmpq	0x8(%rsp), %rdi
    00000942: 	je	.Ltmp2518 # Offset: 2370
    00000944: 	movq	0xe0(%rsp), %rax
    0000094c: 	leaq	0x1(%rax), %rsi
    00000950: 	callq	_ZdlPvm@PLT # Offset: 2384
.Ltmp2518:
    00000955: 	leaq	DATAat0x2734e(%rip), %rdx
    0000095c: 	movq	%r13, %rsi
    0000095f: 	movq	%rbx, %rdi
    00000962: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2402
    00000967: 	leaq	_Z13fast_reverse4IPiEvT_S1_(%rip), %r14
    0000096e: 	movq	0x10(%rsp), %rsi
    00000973: 	movq	%rbx, %rcx
    00000976: 	movq	%rbp, %rdi
    00000979: 	movq	%r14, %rdx
    0000097c: 	callq	_Z12test_reverseIPiPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2428
    00000981: 	movq	0xd0(%rsp), %rdi
    00000989: 	cmpq	0x8(%rsp), %rdi
    0000098e: 	je	.Ltmp2519 # Offset: 2446
    00000990: 	movq	0xe0(%rsp), %rax
    00000998: 	leaq	0x1(%rax), %rsi
    0000099c: 	callq	_ZdlPvm@PLT # Offset: 2460
.Ltmp2519:
    000009a1: 	leaq	0x90(%rsp), %rdi
    000009a9: 	leaq	DATAat0x2736b(%rip), %rdx
    000009b0: 	movq	%r13, %rsi
    000009b3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2483
    000009b8: 	movl	iterations(%rip), %edx
    000009be: 	xorl	%r8d, %r8d
    000009c1: 	xorl	%ecx, %ecx
    000009c3: 	movl	$0x1f40, %esi
    000009c8: 	movq	0x90(%rsp), %rdi
    000009d0: 	callq	_Z9summarizePKciiii # Offset: 2512
    000009d5: 	movl	0x1c(%rsp), %ecx
    000009d9: 	leaq	DATAat0x27268(%rip), %rdx
    000009e0: 	movq	%r13, %rsi
    000009e3: 	movq	%rbx, %rdi
    000009e6: 	testl	%ecx, %ecx
    000009e8: 	leal	0x3fff(%rcx), %eax
    000009ee: 	cmovnsl	%ecx, %eax
    000009f1: 	sarl	$0xe, %eax
    000009f4: 	movl	%eax, 0x30(%rsp)
    000009f8: 	movl	%eax, iterations(%rip)
    000009fe: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2558
    00000a03: 	movq	%rbx, %rcx
    00000a06: 	leaq	_ZSt7reverseI20BidirectionalPointerIiEEvT_S2_(%rip), %rdx
    00000a0d: 	movl	$0x1000000, %esi
    00000a12: 	movq	%rbp, %rdi
    00000a15: 	callq	_Z18test_reverse_sizesI20BidirectionalPointerIiEPFvS1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2581
    00000a1a: 	movq	0xd0(%rsp), %rdi
    00000a22: 	cmpq	0x8(%rsp), %rdi
    00000a27: 	je	.Ltmp2520 # Offset: 2599
    00000a29: 	movq	0xe0(%rsp), %rax
    00000a31: 	leaq	0x1(%rax), %rsi
    00000a35: 	callq	_ZdlPvm@PLT # Offset: 2613
.Ltmp2520:
    00000a3a: 	movq	0x8(%rsp), %rax
    00000a3f: 	movq	0x78(%rsp), %r12
    00000a44: 	movq	%rax, 0xd0(%rsp)
    00000a4c: 	movq	0x70(%rsp), %rax
    00000a51: 	movq	%rax, %rcx
    00000a54: 	movq	%rax, 0x20(%rsp)
    00000a59: 	addq	%r12, %rcx
    00000a5c: 	je	.Ltmp2521 # Offset: 2652
    00000a5e: 	testq	%rax, %rax
    00000a61: 	je	.Ltmp2522 # Offset: 2657
.Ltmp2521:
    00000a67: 	movq	%r12, 0x68(%rsp)
    00000a6c: 	cmpq	$0xf, %r12
    00000a70: 	ja	.Ltmp2523 # Offset: 2672
    00000a76: 	cmpq	$0x1, %r12
    00000a7a: 	jne	.Ltmp2524 # Offset: 2682
    00000a80: 	movq	0x20(%rsp), %rax
    00000a85: 	movzbl	(%rax), %eax
    00000a88: 	movb	%al, 0xe0(%rsp)
    00000a8f: 	movq	0x8(%rsp), %rax
.Ltmp2596:
    00000a94: 	movq	%r12, 0xd8(%rsp)
    00000a9c: 	movb	$0x0, (%rax,%r12)
    00000aa1: 	movabsq	$0x3fffffffffffffff, %rax
    00000aab: 	subq	0xd8(%rsp), %rax
    00000ab3: 	cmpq	$0x1c, %rax
    00000ab7: 	jbe	.Ltmp2525 # Offset: 2743
    00000abd: 	movl	$0x1d, %edx
    00000ac2: 	leaq	DATAat0x27284(%rip), %rsi
    00000ac9: 	movq	%rbx, %rdi
    00000acc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2764
    00000ad1: 	movq	%rbx, %rcx
    00000ad4: 	leaq	_Z17my_simple_reverseI20BidirectionalPointerIiEEvT_S2_(%rip), %rdx
    00000adb: 	movl	$0x1000000, %esi
    00000ae0: 	movq	%rbp, %rdi
    00000ae3: 	callq	_Z18test_reverse_sizesI20BidirectionalPointerIiEPFvS1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2787
    00000ae8: 	movq	0xd0(%rsp), %rdi
    00000af0: 	cmpq	0x8(%rsp), %rdi
    00000af5: 	je	.Ltmp2526 # Offset: 2805
    00000af7: 	movq	0xe0(%rsp), %rax
    00000aff: 	leaq	0x1(%rax), %rsi
    00000b03: 	callq	_ZdlPvm@PLT # Offset: 2819
.Ltmp2526:
    00000b08: 	leaq	DATAat0x272a2(%rip), %rdx
    00000b0f: 	movq	%r13, %rsi
    00000b12: 	movq	%rbx, %rdi
    00000b15: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2837
    00000b1a: 	movq	%rbx, %rcx
    00000b1d: 	leaq	_Z15my_fast_reverseI20BidirectionalPointerIiEEvT_S2_(%rip), %rdx
    00000b24: 	movl	$0x1000000, %esi
    00000b29: 	movq	%rbp, %rdi
    00000b2c: 	callq	_Z18test_reverse_sizesI20BidirectionalPointerIiEPFvS1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2860
    00000b31: 	movq	0xd0(%rsp), %rdi
    00000b39: 	cmpq	0x8(%rsp), %rdi
    00000b3e: 	je	.Ltmp2527 # Offset: 2878
    00000b40: 	movq	0xe0(%rsp), %rax
    00000b48: 	leaq	0x1(%rax), %rsi
    00000b4c: 	callq	_ZdlPvm@PLT # Offset: 2892
.Ltmp2527:
    00000b51: 	leaq	DATAat0x272be(%rip), %rdx
    00000b58: 	movq	%r13, %rsi
    00000b5b: 	movq	%rbx, %rdi
    00000b5e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2910
    00000b63: 	movq	%rbx, %rcx
    00000b66: 	leaq	_ZSt7reverseIPiEvT_S1_(%rip), %rdx
    00000b6d: 	movl	$0x1000000, %esi
    00000b72: 	movq	%rbp, %rdi
    00000b75: 	callq	_Z18test_reverse_sizesIPiPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2933
    00000b7a: 	movq	0xd0(%rsp), %rdi
    00000b82: 	cmpq	0x8(%rsp), %rdi
    00000b87: 	je	.Ltmp2528 # Offset: 2951
    00000b89: 	movq	0xe0(%rsp), %rax
    00000b91: 	leaq	0x1(%rax), %rsi
    00000b95: 	callq	_ZdlPvm@PLT # Offset: 2965
.Ltmp2528:
    00000b9a: 	leaq	DATAat0x272da(%rip), %rdx
    00000ba1: 	movq	%r13, %rsi
    00000ba4: 	movq	%rbx, %rdi
    00000ba7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2983
    00000bac: 	movq	%rbx, %rcx
    00000baf: 	leaq	_Z17my_simple_reverseIPiEvT_S1_(%rip), %rdx
    00000bb6: 	movl	$0x1000000, %esi
    00000bbb: 	movq	%rbp, %rdi
    00000bbe: 	callq	_Z18test_reverse_sizesIPiPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3006
    00000bc3: 	movq	0xd0(%rsp), %rdi
    00000bcb: 	cmpq	0x8(%rsp), %rdi
    00000bd0: 	je	.Ltmp2529 # Offset: 3024
    00000bd2: 	movq	0xe0(%rsp), %rax
    00000bda: 	leaq	0x1(%rax), %rsi
    00000bde: 	callq	_ZdlPvm@PLT # Offset: 3038
.Ltmp2529:
    00000be3: 	leaq	DATAat0x272f8(%rip), %rdx
    00000bea: 	movq	%r13, %rsi
    00000bed: 	movq	%rbx, %rdi
    00000bf0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3056
    00000bf5: 	movq	%rbx, %rcx
    00000bf8: 	leaq	_Z15my_fast_reverseIPiEvT_S1_(%rip), %rdx
    00000bff: 	movl	$0x1000000, %esi
    00000c04: 	movq	%rbp, %rdi
    00000c07: 	callq	_Z18test_reverse_sizesIPiPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3079
    00000c0c: 	movq	0xd0(%rsp), %rdi
    00000c14: 	cmpq	0x8(%rsp), %rdi
    00000c19: 	je	.Ltmp2530 # Offset: 3097
    00000c1b: 	movq	0xe0(%rsp), %rax
    00000c23: 	leaq	0x1(%rax), %rsi
    00000c27: 	callq	_ZdlPvm@PLT # Offset: 3111
.Ltmp2530:
    00000c2c: 	leaq	DATAat0x27314(%rip), %rdx
    00000c33: 	movq	%r13, %rsi
    00000c36: 	movq	%rbx, %rdi
    00000c39: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3129
    00000c3e: 	movq	%rbx, %rcx
    00000c41: 	leaq	_Z13fast_reverse2IPiEvT_S1_(%rip), %rdx
    00000c48: 	movl	$0x1000000, %esi
    00000c4d: 	movq	%rbp, %rdi
    00000c50: 	callq	_Z18test_reverse_sizesIPiPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3152
    00000c55: 	movq	0xd0(%rsp), %rdi
    00000c5d: 	cmpq	0x8(%rsp), %rdi
    00000c62: 	je	.Ltmp2531 # Offset: 3170
    00000c64: 	movq	0xe0(%rsp), %rax
    00000c6c: 	leaq	0x1(%rax), %rsi
    00000c70: 	callq	_ZdlPvm@PLT # Offset: 3184
.Ltmp2531:
    00000c75: 	leaq	DATAat0x27331(%rip), %rdx
    00000c7c: 	movq	%r13, %rsi
    00000c7f: 	movq	%rbx, %rdi
    00000c82: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3202
    00000c87: 	movq	%rbx, %rcx
    00000c8a: 	leaq	_Z13fast_reverse3IPiEvT_S1_(%rip), %rdx
    00000c91: 	movl	$0x1000000, %esi
    00000c96: 	movq	%rbp, %rdi
    00000c99: 	callq	_Z18test_reverse_sizesIPiPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3225
    00000c9e: 	movq	0xd0(%rsp), %rdi
    00000ca6: 	cmpq	0x8(%rsp), %rdi
    00000cab: 	je	.Ltmp2532 # Offset: 3243
    00000cad: 	movq	0xe0(%rsp), %rax
    00000cb5: 	leaq	0x1(%rax), %rsi
    00000cb9: 	callq	_ZdlPvm@PLT # Offset: 3257
.Ltmp2532:
    00000cbe: 	leaq	DATAat0x2734e(%rip), %rdx
    00000cc5: 	movq	%r13, %rsi
    00000cc8: 	movq	%rbx, %rdi
    00000ccb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3275
    00000cd0: 	movq	%rbx, %rcx
    00000cd3: 	movq	%r14, %rdx
    00000cd6: 	movl	$0x1000000, %esi
    00000cdb: 	movq	%rbp, %rdi
    00000cde: 	callq	_Z18test_reverse_sizesIPiPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3294
    00000ce3: 	movq	0xd0(%rsp), %rdi
    00000ceb: 	cmpq	0x8(%rsp), %rdi
    00000cf0: 	je	.Ltmp2533 # Offset: 3312
    00000cf2: 	movq	0xe0(%rsp), %rax
    00000cfa: 	leaq	0x1(%rax), %rsi
    00000cfe: 	callq	_ZdlPvm@PLT # Offset: 3326
.Ltmp2533:
    00000d03: 	movl	0x1c(%rsp), %eax
    00000d07: 	leaq	DATAat0x27388(%rip), %rdx
    00000d0e: 	movq	%r13, %rsi
    00000d11: 	movq	%rbx, %rdi
    00000d14: 	movl	%eax, iterations(%rip)
    00000d1a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3354
    00000d1f: 	leaq	0x7d00(%r15), %r12
    00000d26: 	movq	%r15, %rax
    00000d29: 	nopl	(%rax) # Size: 7
.Ltmp2534:
    00000d30: 	movdqa	DATAat0x275c0(%rip), %xmm5
    00000d38: 	addq	$0x10, %rax
    00000d3c: 	movups	%xmm5, -0x10(%rax)
    00000d40: 	cmpq	%rax, %r12
    00000d43: 	jne	.Ltmp2534 # Offset: 3395
    00000d45: 	callq	clock@PLT # Offset: 3397
    00000d4a: 	movl	iterations(%rip), %edi
    00000d50: 	xorl	%esi, %esi
    00000d52: 	leaq	0x7cf0(%rbp), %rcx
    00000d59: 	movq	%rax, start_time(%rip)
    00000d60: 	testl	%edi, %edi
    00000d62: 	jle	.Ltmp2535 # Offset: 3426
    00000d64: 	nopl	(%rax) # Size: 4
.Ltmp2537:
    00000d68: 	movq	%rcx, %rdx
    00000d6b: 	movq	%r15, %rax
    00000d6e: 	nop # Size: 2
.Ltmp2536:
    00000d70: 	movdqu	(%rdx), %xmm6
    00000d74: 	addq	$0x10, %rax
    00000d78: 	subq	$0x10, %rdx
    00000d7c: 	pshufd	$0x1b, %xmm6, %xmm0
    00000d81: 	movups	%xmm0, -0x10(%rax)
    00000d85: 	cmpq	%rax, %r12
    00000d88: 	jne	.Ltmp2536 # Offset: 3464
    00000d8a: 	addl	$0x1, %esi
    00000d8d: 	cmpl	%edi, %esi
    00000d8f: 	jne	.Ltmp2537 # Offset: 3471
.Ltmp2535:
    00000d91: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000d98: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000d9f: 	subq	$0x20, %rax
    00000da3: 	cmpq	%rax, %rdi
    00000da6: 	je	.Ltmp2538 # Offset: 3494
    00000dac: 	leaq	0x10(%rdi), %rax
    00000db0: 	movq	0xd8(%rsp), %rdx
    00000db8: 	movq	%rax, (%rdi)
    00000dbb: 	movq	0xd0(%rsp), %rsi
    00000dc3: 	addq	%rsi, %rdx
    00000dc6: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 3526
    00000dcb: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000dd2: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000dd9: 	addq	$0x20, %rax
    00000ddd: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000de4: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000deb: 	je	.Ltmp2539 # Offset: 3563
.Ltmp2611:
    00000df1: 	movq	-0x20(%rax), %r14
    00000df5: 	callq	clock@PLT # Offset: 3573
    00000dfa: 	pxor	%xmm0, %xmm0
    00000dfe: 	movq	%rax, end_time(%rip)
    00000e05: 	movq	%r14, %rdi
    00000e08: 	subq	start_time(%rip), %rax
    00000e0f: 	cvtsi2sd	%rax, %xmm0
    00000e14: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000e1c: 	callq	_Z13record_resultdPKc # Offset: 3612
    00000e21: 	leaq	0x7cfc(%r15), %r14
    00000e28: 	movq	%r15, %rax
    00000e2b: 	jmp	.Ltmp2540 # Offset: 3627
    00000e2d: 	nopl	(%rax) # Size: 3
.Ltmp2542:
    00000e30: 	addq	$0x4, %rax
    00000e34: 	movl	(%rax), %ecx
    00000e36: 	cmpl	%ecx, -0x4(%rax)
    00000e39: 	jl	.Ltmp2541 # Offset: 3641
.Ltmp2540:
    00000e3f: 	cmpq	%r14, %rax
    00000e42: 	jne	.Ltmp2542 # Offset: 3650
.Ltmp2599:
    00000e44: 	movq	0xd0(%rsp), %rdi
    00000e4c: 	cmpq	0x8(%rsp), %rdi
    00000e51: 	je	.Ltmp2543 # Offset: 3665
    00000e53: 	movq	0xe0(%rsp), %rax
    00000e5b: 	leaq	0x1(%rax), %rsi
    00000e5f: 	callq	_ZdlPvm@PLT # Offset: 3679
.Ltmp2543:
    00000e64: 	leaq	DATAat0x273b0(%rip), %rdx
    00000e6b: 	movq	%r13, %rsi
    00000e6e: 	movq	%rbx, %rdi
    00000e71: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3697
    00000e76: 	movq	%r15, %rax
    00000e79: 	nopl	(%rax) # Size: 7
.Ltmp2544:
    00000e80: 	movdqa	DATAat0x275c0(%rip), %xmm2
    00000e88: 	addq	$0x10, %rax
    00000e8c: 	movups	%xmm2, -0x10(%rax)
    00000e90: 	cmpq	%rax, %r12
    00000e93: 	jne	.Ltmp2544 # Offset: 3731
    00000e95: 	callq	clock@PLT # Offset: 3733
    00000e9a: 	movl	iterations(%rip), %edi
    00000ea0: 	xorl	%esi, %esi
    00000ea2: 	leaq	0x7cf0(%rbp), %rcx
    00000ea9: 	movq	%rax, start_time(%rip)
    00000eb0: 	testl	%edi, %edi
    00000eb2: 	jle	.Ltmp2545 # Offset: 3762
    00000eb4: 	nopl	(%rax) # Size: 4
.Ltmp2547:
    00000eb8: 	movq	%rcx, %rdx
    00000ebb: 	movq	%r15, %rax
    00000ebe: 	nop # Size: 2
.Ltmp2546:
    00000ec0: 	movdqu	(%rdx), %xmm7
    00000ec4: 	addq	$0x10, %rax
    00000ec8: 	subq	$0x10, %rdx
    00000ecc: 	pshufd	$0x1b, %xmm7, %xmm0
    00000ed1: 	movups	%xmm0, -0x10(%rax)
    00000ed5: 	cmpq	%r12, %rax
    00000ed8: 	jne	.Ltmp2546 # Offset: 3800
    00000eda: 	addl	$0x1, %esi
    00000edd: 	cmpl	%edi, %esi
    00000edf: 	jne	.Ltmp2547 # Offset: 3807
.Ltmp2545:
    00000ee1: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000ee8: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000eef: 	subq	$0x20, %rax
    00000ef3: 	cmpq	%rax, %rdi
    00000ef6: 	je	.Ltmp2548 # Offset: 3830
    00000efc: 	leaq	0x10(%rdi), %rax
    00000f00: 	movq	0xd8(%rsp), %rdx
    00000f08: 	movq	%rax, (%rdi)
    00000f0b: 	movq	0xd0(%rsp), %rsi
    00000f13: 	addq	%rsi, %rdx
    00000f16: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 3862
    00000f1b: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000f22: 	addq	$0x20, %rax
    00000f26: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp2607:
    00000f2d: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000f34: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000f3b: 	je	.Ltmp2549 # Offset: 3899
.Ltmp2606:
    00000f41: 	movq	-0x20(%rax), %rdi
    00000f45: 	movq	%rdi, 0x20(%rsp)
    00000f4a: 	callq	clock@PLT # Offset: 3914
    00000f4f: 	movq	0x20(%rsp), %rdi
    00000f54: 	pxor	%xmm0, %xmm0
    00000f58: 	movq	%rax, end_time(%rip)
    00000f5f: 	subq	start_time(%rip), %rax
    00000f66: 	cvtsi2sd	%rax, %xmm0
    00000f6b: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000f73: 	callq	_Z13record_resultdPKc # Offset: 3955
    00000f78: 	movq	%r15, %rax
    00000f7b: 	jmp	.Ltmp2550 # Offset: 3963
    00000f7d: 	nopl	(%rax) # Size: 3
.Ltmp2552:
    00000f80: 	addq	$0x4, %rax
    00000f84: 	movl	(%rax), %ecx
    00000f86: 	cmpl	%ecx, -0x4(%rax)
    00000f89: 	jl	.Ltmp2551 # Offset: 3977
.Ltmp2550:
    00000f8f: 	cmpq	%r14, %rax
    00000f92: 	jne	.Ltmp2552 # Offset: 3986
.Ltmp2600:
    00000f94: 	movq	0xd0(%rsp), %rdi
    00000f9c: 	cmpq	0x8(%rsp), %rdi
    00000fa1: 	je	.Ltmp2553 # Offset: 4001
    00000fa3: 	movq	0xe0(%rsp), %rax
    00000fab: 	leaq	0x1(%rax), %rsi
    00000faf: 	callq	_ZdlPvm@PLT # Offset: 4015
.Ltmp2553:
    00000fb4: 	leaq	DATAat0x273d8(%rip), %rdx
    00000fbb: 	movq	%r13, %rsi
    00000fbe: 	movq	%rbx, %rdi
    00000fc1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4033
    00000fc6: 	movq	%r15, %rax
    00000fc9: 	nopl	(%rax) # Size: 7
.Ltmp2554:
    00000fd0: 	movdqa	DATAat0x275c0(%rip), %xmm5
    00000fd8: 	addq	$0x10, %rax
    00000fdc: 	movups	%xmm5, -0x10(%rax)
    00000fe0: 	cmpq	%rax, %r12
    00000fe3: 	jne	.Ltmp2554 # Offset: 4067
    00000fe5: 	callq	clock@PLT # Offset: 4069
    00000fea: 	movl	iterations(%rip), %edi
    00000ff0: 	xorl	%esi, %esi
    00000ff2: 	leaq	0x7cf0(%rbp), %rcx
    00000ff9: 	movq	%rax, start_time(%rip)
    00001000: 	testl	%edi, %edi
    00001002: 	jle	.Ltmp2555 # Offset: 4098
    00001004: 	nopl	(%rax) # Size: 4
.Ltmp2557:
    00001008: 	movq	%rcx, %rdx
    0000100b: 	movq	%r15, %rax
    0000100e: 	nop # Size: 2
.Ltmp2556:
    00001010: 	movdqu	(%rdx), %xmm3
    00001014: 	addq	$0x10, %rax
    00001018: 	subq	$0x10, %rdx
    0000101c: 	pshufd	$0x1b, %xmm3, %xmm0
    00001021: 	movups	%xmm0, -0x10(%rax)
    00001025: 	cmpq	%r12, %rax
    00001028: 	jne	.Ltmp2556 # Offset: 4136
    0000102a: 	addl	$0x1, %esi
    0000102d: 	cmpl	%edi, %esi
    0000102f: 	jne	.Ltmp2557 # Offset: 4143
.Ltmp2555:
    00001031: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001038: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    0000103f: 	subq	$0x20, %rax
    00001043: 	cmpq	%rax, %rdi
    00001046: 	je	.Ltmp2558 # Offset: 4166
    0000104c: 	leaq	0x10(%rdi), %rax
    00001050: 	movq	0xd8(%rsp), %rdx
    00001058: 	movq	%rax, (%rdi)
    0000105b: 	movq	0xd0(%rsp), %rsi
    00001063: 	addq	%rsi, %rdx
    00001066: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 4198
    0000106b: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001072: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001079: 	addq	$0x20, %rax
    0000107d: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001084: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    0000108b: 	je	.Ltmp2559 # Offset: 4235
.Ltmp2610:
    00001091: 	movq	-0x20(%rax), %rdi
    00001095: 	movq	%rdi, 0x20(%rsp)
    0000109a: 	callq	clock@PLT # Offset: 4250
    0000109f: 	movq	0x20(%rsp), %rdi
    000010a4: 	pxor	%xmm0, %xmm0
    000010a8: 	movq	%rax, end_time(%rip)
    000010af: 	subq	start_time(%rip), %rax
    000010b6: 	cvtsi2sd	%rax, %xmm0
    000010bb: 	divsd	DATAat0x276b0(%rip), %xmm0
    000010c3: 	callq	_Z13record_resultdPKc # Offset: 4291
    000010c8: 	movq	%r15, %rax
    000010cb: 	jmp	.Ltmp2560 # Offset: 4299
    000010cd: 	nopl	(%rax) # Size: 3
.Ltmp2562:
    000010d0: 	addq	$0x4, %rax
    000010d4: 	movl	(%rax), %ecx
    000010d6: 	cmpl	%ecx, -0x4(%rax)
    000010d9: 	jl	.Ltmp2561 # Offset: 4313
.Ltmp2560:
    000010df: 	cmpq	%r14, %rax
    000010e2: 	jne	.Ltmp2562 # Offset: 4322
.Ltmp2598:
    000010e4: 	movq	0xd0(%rsp), %rdi
    000010ec: 	cmpq	0x8(%rsp), %rdi
    000010f1: 	je	.Ltmp2563 # Offset: 4337
    000010f3: 	movq	0xe0(%rsp), %rax
    000010fb: 	leaq	0x1(%rax), %rsi
    000010ff: 	callq	_ZdlPvm@PLT # Offset: 4351
.Ltmp2563:
    00001104: 	leaq	DATAat0x27400(%rip), %rdx
    0000110b: 	movq	%r13, %rsi
    0000110e: 	movq	%rbx, %rdi
    00001111: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4369
    00001116: 	movq	%r15, %rax
    00001119: 	nopl	(%rax) # Size: 7
.Ltmp2564:
    00001120: 	movdqa	DATAat0x275c0(%rip), %xmm2
    00001128: 	addq	$0x10, %rax
    0000112c: 	movups	%xmm2, -0x10(%rax)
    00001130: 	cmpq	%r12, %rax
    00001133: 	jne	.Ltmp2564 # Offset: 4403
    00001135: 	callq	clock@PLT # Offset: 4405
    0000113a: 	movl	iterations(%rip), %edi
    00001140: 	xorl	%esi, %esi
    00001142: 	leaq	0x7cf0(%rbp), %rcx
    00001149: 	movq	%rax, start_time(%rip)
    00001150: 	testl	%edi, %edi
    00001152: 	jle	.Ltmp2565 # Offset: 4434
    00001154: 	nopl	(%rax) # Size: 4
.Ltmp2567:
    00001158: 	movq	%rcx, %rdx
    0000115b: 	movq	%r15, %rax
    0000115e: 	nop # Size: 2
.Ltmp2566:
    00001160: 	movdqu	(%rdx), %xmm4
    00001164: 	addq	$0x10, %rax
    00001168: 	subq	$0x10, %rdx
    0000116c: 	pshufd	$0x1b, %xmm4, %xmm0
    00001171: 	movups	%xmm0, -0x10(%rax)
    00001175: 	cmpq	%r12, %rax
    00001178: 	jne	.Ltmp2566 # Offset: 4472
    0000117a: 	addl	$0x1, %esi
    0000117d: 	cmpl	%edi, %esi
    0000117f: 	jne	.Ltmp2567 # Offset: 4479
.Ltmp2565:
    00001181: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001188: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    0000118f: 	subq	$0x20, %rax
    00001193: 	cmpq	%rax, %rdi
    00001196: 	je	.Ltmp2568 # Offset: 4502
    0000119c: 	leaq	0x10(%rdi), %rax
    000011a0: 	movq	0xd8(%rsp), %rdx
    000011a8: 	movq	%rax, (%rdi)
    000011ab: 	movq	0xd0(%rsp), %rsi
    000011b3: 	addq	%rsi, %rdx
    000011b6: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 4534
    000011bb: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000011c2: 	addq	$0x20, %rax
    000011c6: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp2613:
    000011cd: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000011d4: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000011db: 	je	.Ltmp2569 # Offset: 4571
.Ltmp2612:
    000011e1: 	movq	-0x20(%rax), %rdi
    000011e5: 	movq	%rdi, 0x20(%rsp)
    000011ea: 	callq	clock@PLT # Offset: 4586
    000011ef: 	movq	0x20(%rsp), %rdi
    000011f4: 	pxor	%xmm0, %xmm0
    000011f8: 	movq	%rax, end_time(%rip)
    000011ff: 	subq	start_time(%rip), %rax
    00001206: 	cvtsi2sd	%rax, %xmm0
    0000120b: 	divsd	DATAat0x276b0(%rip), %xmm0
    00001213: 	callq	_Z13record_resultdPKc # Offset: 4627
    00001218: 	movq	%r15, %rax
    0000121b: 	jmp	.Ltmp2570 # Offset: 4635
    0000121d: 	nopl	(%rax) # Size: 3
.Ltmp2572:
    00001220: 	addq	$0x4, %rax
    00001224: 	movl	(%rax), %ecx
    00001226: 	cmpl	%ecx, -0x4(%rax)
    00001229: 	jl	.Ltmp2571 # Offset: 4649
.Ltmp2570:
    0000122f: 	cmpq	%r14, %rax
    00001232: 	jne	.Ltmp2572 # Offset: 4658
.Ltmp2601:
    00001234: 	movq	0xd0(%rsp), %rdi
    0000123c: 	cmpq	0x8(%rsp), %rdi
    00001241: 	je	.Ltmp2573 # Offset: 4673
    00001243: 	movq	0xe0(%rsp), %rax
    0000124b: 	leaq	0x1(%rax), %rsi
    0000124f: 	callq	_ZdlPvm@PLT # Offset: 4687
.Ltmp2573:
    00001254: 	leaq	DATAat0x27428(%rip), %rdx
    0000125b: 	movq	%r13, %rsi
    0000125e: 	movq	%rbx, %rdi
    00001261: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4705
    00001266: 	movq	0x10(%rsp), %rsi
    0000126b: 	movq	%rbx, %r9
    0000126e: 	movq	%r12, %rcx
    00001271: 	movq	%r15, %rdx
    00001274: 	leaq	_Z22my_simple_reverse_copyIPiS0_EvT_S1_T0_(%rip), %r8
    0000127b: 	movq	%rbp, %rdi
    0000127e: 	callq	_Z17test_reverse_copyIPiPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4734
    00001283: 	movq	0xd0(%rsp), %rdi
    0000128b: 	cmpq	0x8(%rsp), %rdi
    00001290: 	je	.Ltmp2574 # Offset: 4752
    00001292: 	movq	0xe0(%rsp), %rax
    0000129a: 	leaq	0x1(%rax), %rsi
    0000129e: 	callq	_ZdlPvm@PLT # Offset: 4766
.Ltmp2574:
    000012a3: 	leaq	DATAat0x27450(%rip), %rdx
    000012aa: 	movq	%r13, %rsi
    000012ad: 	movq	%rbx, %rdi
    000012b0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4784
    000012b5: 	movq	0x10(%rsp), %rsi
    000012ba: 	movq	%rbx, %r9
    000012bd: 	movq	%r12, %rcx
    000012c0: 	movq	%r15, %rdx
    000012c3: 	leaq	_Z20my_fast_reverse_copyIPiS0_EvT_S1_T0_(%rip), %r8
    000012ca: 	movq	%rbp, %rdi
    000012cd: 	callq	_Z17test_reverse_copyIPiPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4813
    000012d2: 	movq	0xd0(%rsp), %rdi
    000012da: 	cmpq	0x8(%rsp), %rdi
    000012df: 	je	.Ltmp2575 # Offset: 4831
    000012e1: 	movq	0xe0(%rsp), %rax
    000012e9: 	leaq	0x1(%rax), %rsi
    000012ed: 	callq	_ZdlPvm@PLT # Offset: 4845
.Ltmp2575:
    000012f2: 	leaq	DATAat0x27478(%rip), %rdx
    000012f9: 	movq	%r13, %rsi
    000012fc: 	movq	%rbx, %rdi
    000012ff: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4863
    00001304: 	movq	0x10(%rsp), %rsi
    00001309: 	movq	%rbx, %r9
    0000130c: 	movq	%r12, %rcx
    0000130f: 	movq	%r15, %rdx
    00001312: 	leaq	_Z18fast_reverse_copy2IPiS0_EvT_S1_T0_(%rip), %r8
    00001319: 	movq	%rbp, %rdi
    0000131c: 	callq	_Z17test_reverse_copyIPiPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4892
    00001321: 	movq	0xd0(%rsp), %rdi
    00001329: 	cmpq	0x8(%rsp), %rdi
    0000132e: 	je	.Ltmp2576 # Offset: 4910
    00001330: 	movq	0xe0(%rsp), %rax
    00001338: 	leaq	0x1(%rax), %rsi
    0000133c: 	callq	_ZdlPvm@PLT # Offset: 4924
.Ltmp2576:
    00001341: 	leaq	DATAat0x274a0(%rip), %rdx
    00001348: 	movq	%r13, %rsi
    0000134b: 	movq	%rbx, %rdi
    0000134e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4942
    00001353: 	movq	0x10(%rsp), %rsi
    00001358: 	movq	%rbx, %r9
    0000135b: 	movq	%r12, %rcx
    0000135e: 	movq	%r15, %rdx
    00001361: 	leaq	_Z18fast_reverse_copy3IPiS0_EvT_S1_T0_(%rip), %r8
    00001368: 	movq	%rbp, %rdi
    0000136b: 	callq	_Z17test_reverse_copyIPiPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4971
    00001370: 	movq	0xd0(%rsp), %rdi
    00001378: 	cmpq	0x8(%rsp), %rdi
    0000137d: 	je	.Ltmp2577 # Offset: 4989
    0000137f: 	movq	0xe0(%rsp), %rax
    00001387: 	leaq	0x1(%rax), %rsi
    0000138b: 	callq	_ZdlPvm@PLT # Offset: 5003
.Ltmp2577:
    00001390: 	leaq	DATAat0x274c8(%rip), %r14
    00001397: 	movq	%r13, %rsi
    0000139a: 	movq	%rbx, %rdi
    0000139d: 	movq	%r14, %rdx
    000013a0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5024
    000013a5: 	movq	0x10(%rsp), %rsi
    000013aa: 	movq	%rbx, %r9
    000013ad: 	movq	%r12, %rcx
    000013b0: 	movq	%r15, %rdx
    000013b3: 	leaq	_Z18fast_reverse_copy4IPiS0_EvT_S1_T0_(%rip), %r8
    000013ba: 	movq	%rbp, %rdi
    000013bd: 	callq	_Z17test_reverse_copyIPiPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5053
    000013c2: 	movq	0xd0(%rsp), %rdi
    000013ca: 	cmpq	0x8(%rsp), %rdi
    000013cf: 	je	.Ltmp2578 # Offset: 5071
    000013d1: 	movq	0xe0(%rsp), %rax
    000013d9: 	leaq	0x1(%rax), %rsi
    000013dd: 	callq	_ZdlPvm@PLT # Offset: 5085
.Ltmp2578:
    000013e2: 	leaq	0xb0(%rsp), %rdi
    000013ea: 	leaq	DATAat0x27374(%rip), %rdx
    000013f1: 	movq	%r13, %rsi
    000013f4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5108
    000013f9: 	movl	iterations(%rip), %edx
    000013ff: 	xorl	%r8d, %r8d
    00001402: 	xorl	%ecx, %ecx
    00001404: 	movl	$0x1f40, %esi
    00001409: 	movq	0xb0(%rsp), %rdi
    00001411: 	callq	_Z9summarizePKciiii # Offset: 5137
    00001416: 	movl	0x30(%rsp), %eax
    0000141a: 	leaq	DATAat0x27388(%rip), %rdx
    00001421: 	movq	%r13, %rsi
    00001424: 	movq	%rbx, %rdi
    00001427: 	movl	%eax, iterations(%rip)
    0000142d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5165
    00001432: 	movq	%rbx, %r8
    00001435: 	leaq	_ZSt12reverse_copyI20BidirectionalPointerIiES1_ET0_T_S3_S2_(%rip), %rcx
    0000143c: 	movq	%r15, %rsi
    0000143f: 	movq	%rbp, %rdi
    00001442: 	movl	$0x1000000, %edx
    00001447: 	callq	_Z23test_reverse_copy_sizesI20BidirectionalPointerIiEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5191
    0000144c: 	movq	0xd0(%rsp), %rdi
    00001454: 	cmpq	0x8(%rsp), %rdi
    00001459: 	je	.Ltmp2579 # Offset: 5209
    0000145b: 	movq	0xe0(%rsp), %rax
    00001463: 	leaq	0x1(%rax), %rsi
    00001467: 	callq	_ZdlPvm@PLT # Offset: 5223
.Ltmp2579:
    0000146c: 	leaq	DATAat0x273b0(%rip), %rdx
    00001473: 	movq	%r13, %rsi
    00001476: 	movq	%rbx, %rdi
    00001479: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5241
    0000147e: 	movq	%rbx, %r8
    00001481: 	leaq	_Z22my_simple_reverse_copyI20BidirectionalPointerIiES1_EvT_S2_T0_(%rip), %rcx
    00001488: 	movq	%r15, %rsi
    0000148b: 	movq	%rbp, %rdi
    0000148e: 	movl	$0x1000000, %edx
    00001493: 	callq	_Z23test_reverse_copy_sizesI20BidirectionalPointerIiEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5267
    00001498: 	movq	0xd0(%rsp), %rdi
    000014a0: 	cmpq	0x8(%rsp), %rdi
    000014a5: 	je	.Ltmp2580 # Offset: 5285
    000014a7: 	movq	0xe0(%rsp), %rax
    000014af: 	leaq	0x1(%rax), %rsi
    000014b3: 	callq	_ZdlPvm@PLT # Offset: 5299
.Ltmp2580:
    000014b8: 	leaq	DATAat0x273d8(%rip), %rdx
    000014bf: 	movq	%r13, %rsi
    000014c2: 	movq	%rbx, %rdi
    000014c5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5317
    000014ca: 	movq	%rbx, %r8
    000014cd: 	leaq	_Z20my_fast_reverse_copyI20BidirectionalPointerIiES1_EvT_S2_T0_(%rip), %rcx
    000014d4: 	movq	%r15, %rsi
    000014d7: 	movq	%rbp, %rdi
    000014da: 	movl	$0x1000000, %edx
    000014df: 	callq	_Z23test_reverse_copy_sizesI20BidirectionalPointerIiEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5343
    000014e4: 	movq	0xd0(%rsp), %rdi
    000014ec: 	cmpq	0x8(%rsp), %rdi
    000014f1: 	je	.Ltmp2581 # Offset: 5361
    000014f3: 	movq	0xe0(%rsp), %rax
    000014fb: 	leaq	0x1(%rax), %rsi
    000014ff: 	callq	_ZdlPvm@PLT # Offset: 5375
.Ltmp2581:
    00001504: 	leaq	DATAat0x27400(%rip), %rdx
    0000150b: 	movq	%r13, %rsi
    0000150e: 	movq	%rbx, %rdi
    00001511: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5393
    00001516: 	movq	%rbx, %r8
    00001519: 	leaq	_ZSt12reverse_copyIPiS0_ET0_T_S2_S1_(%rip), %rcx
    00001520: 	movq	%r15, %rsi
    00001523: 	movq	%rbp, %rdi
    00001526: 	movl	$0x1000000, %edx
    0000152b: 	callq	_Z23test_reverse_copy_sizesIPiPFS0_S0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5419
    00001530: 	movq	0xd0(%rsp), %rdi
    00001538: 	cmpq	0x8(%rsp), %rdi
    0000153d: 	je	.Ltmp2582 # Offset: 5437
    0000153f: 	movq	0xe0(%rsp), %rax
    00001547: 	leaq	0x1(%rax), %rsi
    0000154b: 	callq	_ZdlPvm@PLT # Offset: 5451
.Ltmp2582:
    00001550: 	leaq	DATAat0x27428(%rip), %rdx
    00001557: 	movq	%r13, %rsi
    0000155a: 	movq	%rbx, %rdi
    0000155d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5469
    00001562: 	movq	%rbx, %r8
    00001565: 	leaq	_Z22my_simple_reverse_copyIPiS0_EvT_S1_T0_(%rip), %rcx
    0000156c: 	movq	%r15, %rsi
    0000156f: 	movq	%rbp, %rdi
    00001572: 	movl	$0x1000000, %edx
    00001577: 	callq	_Z23test_reverse_copy_sizesIPiPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5495
    0000157c: 	movq	0xd0(%rsp), %rdi
    00001584: 	cmpq	0x8(%rsp), %rdi
    00001589: 	je	.Ltmp2583 # Offset: 5513
    0000158b: 	movq	0xe0(%rsp), %rax
    00001593: 	leaq	0x1(%rax), %rsi
    00001597: 	callq	_ZdlPvm@PLT # Offset: 5527
.Ltmp2583:
    0000159c: 	leaq	DATAat0x27450(%rip), %rdx
    000015a3: 	movq	%r13, %rsi
    000015a6: 	movq	%rbx, %rdi
    000015a9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5545
    000015ae: 	movq	%rbx, %r8
    000015b1: 	leaq	_Z20my_fast_reverse_copyIPiS0_EvT_S1_T0_(%rip), %rcx
    000015b8: 	movq	%r15, %rsi
    000015bb: 	movq	%rbp, %rdi
    000015be: 	movl	$0x1000000, %edx
    000015c3: 	callq	_Z23test_reverse_copy_sizesIPiPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5571
    000015c8: 	movq	0xd0(%rsp), %rdi
    000015d0: 	cmpq	0x8(%rsp), %rdi
    000015d5: 	je	.Ltmp2584 # Offset: 5589
    000015d7: 	movq	0xe0(%rsp), %rax
    000015df: 	leaq	0x1(%rax), %rsi
    000015e3: 	callq	_ZdlPvm@PLT # Offset: 5603
.Ltmp2584:
    000015e8: 	leaq	DATAat0x27478(%rip), %rdx
    000015ef: 	movq	%r13, %rsi
    000015f2: 	movq	%rbx, %rdi
    000015f5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5621
    000015fa: 	movq	%rbx, %r8
    000015fd: 	leaq	_Z18fast_reverse_copy2IPiS0_EvT_S1_T0_(%rip), %rcx
    00001604: 	movq	%r15, %rsi
    00001607: 	movq	%rbp, %rdi
    0000160a: 	movl	$0x1000000, %edx
    0000160f: 	callq	_Z23test_reverse_copy_sizesIPiPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5647
    00001614: 	movq	0xd0(%rsp), %rdi
    0000161c: 	cmpq	0x8(%rsp), %rdi
    00001621: 	je	.Ltmp2585 # Offset: 5665
    00001623: 	movq	0xe0(%rsp), %rax
    0000162b: 	leaq	0x1(%rax), %rsi
    0000162f: 	callq	_ZdlPvm@PLT # Offset: 5679
.Ltmp2585:
    00001634: 	leaq	DATAat0x274a0(%rip), %rdx
    0000163b: 	movq	%r13, %rsi
    0000163e: 	movq	%rbx, %rdi
    00001641: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5697
    00001646: 	movq	%rbx, %r8
    00001649: 	leaq	_Z18fast_reverse_copy3IPiS0_EvT_S1_T0_(%rip), %rcx
    00001650: 	movq	%r15, %rsi
    00001653: 	movq	%rbp, %rdi
    00001656: 	movl	$0x1000000, %edx
    0000165b: 	callq	_Z23test_reverse_copy_sizesIPiPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5723
    00001660: 	movq	0xd0(%rsp), %rdi
    00001668: 	cmpq	0x8(%rsp), %rdi
    0000166d: 	je	.Ltmp2586 # Offset: 5741
    0000166f: 	movq	0xe0(%rsp), %rax
    00001677: 	leaq	0x1(%rax), %rsi
    0000167b: 	callq	_ZdlPvm@PLT # Offset: 5755
.Ltmp2586:
    00001680: 	movq	%r14, %rdx
    00001683: 	movq	%r13, %rsi
    00001686: 	movq	%rbx, %rdi
    00001689: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5769
    0000168e: 	movq	%rbx, %r8
    00001691: 	leaq	_Z18fast_reverse_copy4IPiS0_EvT_S1_T0_(%rip), %rcx
    00001698: 	movq	%r15, %rsi
    0000169b: 	movq	%rbp, %rdi
    0000169e: 	movl	$0x1000000, %edx
    000016a3: 	callq	_Z23test_reverse_copy_sizesIPiPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5795
    000016a8: 	movq	0xd0(%rsp), %rdi
    000016b0: 	cmpq	0x8(%rsp), %rdi
    000016b5: 	je	.Ltmp2587 # Offset: 5813
    000016b7: 	movq	0xe0(%rsp), %rax
    000016bf: 	leaq	0x1(%rax), %rsi
    000016c3: 	callq	_ZdlPvm@PLT # Offset: 5827
.Ltmp2587:
    000016c8: 	movl	0x1c(%rsp), %eax
    000016cc: 	movq	0xb0(%rsp), %rdi
    000016d4: 	movl	%eax, iterations(%rip)
    000016da: 	leaq	0xc0(%rsp), %rax
    000016e2: 	cmpq	%rax, %rdi
    000016e5: 	je	.Ltmp2588 # Offset: 5861
    000016e7: 	movq	0xc0(%rsp), %rax
    000016ef: 	leaq	0x1(%rax), %rsi
    000016f3: 	callq	_ZdlPvm@PLT # Offset: 5875
.Ltmp2588:
    000016f8: 	movq	0x90(%rsp), %rdi
    00001700: 	leaq	0xa0(%rsp), %rax
    00001708: 	cmpq	%rax, %rdi
    0000170b: 	je	.Ltmp2589 # Offset: 5899
    0000170d: 	movq	0xa0(%rsp), %rax
    00001715: 	leaq	0x1(%rax), %rsi
    00001719: 	callq	_ZdlPvm@PLT # Offset: 5913
.Ltmp2589:
    0000171e: 	movl	$0x4, %esi
    00001723: 	movq	%r15, %rdi
    00001726: 	callq	_ZdlPvm@PLT # Offset: 5926
    0000172b: 	movq	%rbp, %rdi
    0000172e: 	movl	$0x4, %esi
    00001733: 	callq	_ZdlPvm@PLT # Offset: 5939
    00001738: 	movq	0x70(%rsp), %rdi
    0000173d: 	cmpq	0x38(%rsp), %rdi
    00001742: 	je	.Ltmp2590 # Offset: 5954
    00001744: 	movq	0x80(%rsp), %rax
    0000174c: 	leaq	0x1(%rax), %rsi
    00001750: 	callq	_ZdlPvm@PLT # Offset: 5968
.Ltmp2590:
    00001755: 	movq	0xf8(%rsp), %rax
    0000175d: 	subq	%fs:0x28, %rax
    00001766: 	jne	.Ltmp2591 # Offset: 5990
    0000176c: 	addq	$0x108, %rsp
    00001773: 	popq	%rbx
    00001774: 	popq	%rbp
    00001775: 	popq	%r12
    00001777: 	popq	%r13
    00001779: 	popq	%r14
    0000177b: 	popq	%r15
    0000177d: 	retq # Offset: 6013
    0000177e: 	nop # Size: 2
.Ltmp2450:
    00001780: 	addq	$0x20, %rbp
    00001784: 	cmpq	%rbx, %rbp
    00001787: 	jne	.Ltmp2451 # Offset: 6023
    0000178d: 	addq	$0x8, %r13
    00001791: 	cmpq	%r13, %r15
    00001794: 	ja	.Ltmp2452 # Offset: 6036
    0000179a: 	jmp	.Ltmp2592 # Offset: 6042
.Ltmp2479:
    0000179f: 	leaq	0x68(%rsp), %rsi
    000017a4: 	xorl	%edx, %edx
    000017a6: 	movq	%r14, %rdi
    000017a9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6057
    000017ae: 	movq	%rax, (%r14)
    000017b1: 	movq	%rax, %rdi
    000017b4: 	movq	0x68(%rsp), %rax
    000017b9: 	movq	%rax, 0x10(%r14)
.Ltmp2619:
    000017bd: 	movq	0x8(%rsp), %rsi
    000017c2: 	movq	%r12, %rdx
    000017c5: 	callq	memcpy@PLT # Offset: 6085
    000017ca: 	movq	0x68(%rsp), %r12
    000017cf: 	movq	(%r14), %rdi
    000017d2: 	jmp	.Ltmp2593 # Offset: 6098
.Ltmp2469:
    000017d7: 	movq	%r12, %rsi
    000017da: 	addq	$0x4, %r12
    000017de: 	movl	%ecx, (%rsi)
    000017e0: 	cmpq	%r12, %r13
    000017e3: 	jne	.Ltmp2465 # Offset: 6115
    000017e9: 	jmp	.Ltmp2594 # Offset: 6121
.Ltmp2524:
    000017ee: 	testq	%r12, %r12
    000017f1: 	jne	.Ltmp2595 # Offset: 6129
    000017f7: 	movq	0x8(%rsp), %rax
    000017fc: 	jmp	.Ltmp2596 # Offset: 6140
.Ltmp2523:
    00001801: 	leaq	0x68(%rsp), %rsi
    00001806: 	xorl	%edx, %edx
    00001808: 	movq	%rbx, %rdi
    0000180b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6155
    00001810: 	movq	%rax, 0xd0(%rsp)
    00001818: 	movq	%rax, %rdi
    0000181b: 	movq	0x68(%rsp), %rax
    00001820: 	movq	%rax, 0xe0(%rsp)
.Ltmp2623:
    00001828: 	movq	0x20(%rsp), %rsi
    0000182d: 	movq	%r12, %rdx
    00001830: 	callq	memcpy@PLT # Offset: 6192
    00001835: 	movq	0x68(%rsp), %r12
    0000183a: 	movq	0xd0(%rsp), %rax
    00001842: 	jmp	.Ltmp2596 # Offset: 6210
.Ltmp2511:
    00001847: 	movq	0xd0(%rsp), %rdx
    0000184f: 	leaq	DATAat0x271d0(%rip), %rsi
    00001856: 	movl	$0x1, %edi
    0000185b: 	xorl	%eax, %eax
    0000185d: 	callq	__printf_chk@PLT # Offset: 6237
    00001862: 	jmp	.Ltmp2597 # Offset: 6242
.Ltmp2561:
    00001867: 	movq	0xd0(%rsp), %rdx
    0000186f: 	leaq	DATAat0x271d0(%rip), %rsi
    00001876: 	movl	$0x1, %edi
    0000187b: 	xorl	%eax, %eax
    0000187d: 	callq	__printf_chk@PLT # Offset: 6269
    00001882: 	jmp	.Ltmp2598 # Offset: 6274
.Ltmp2541:
    00001887: 	movq	0xd0(%rsp), %rdx
    0000188f: 	leaq	DATAat0x271d0(%rip), %rsi
    00001896: 	movl	$0x1, %edi
    0000189b: 	xorl	%eax, %eax
    0000189d: 	callq	__printf_chk@PLT # Offset: 6301
    000018a2: 	jmp	.Ltmp2599 # Offset: 6306
.Ltmp2551:
    000018a7: 	movq	0xd0(%rsp), %rdx
    000018af: 	leaq	DATAat0x271d0(%rip), %rsi
    000018b6: 	movl	$0x1, %edi
    000018bb: 	xorl	%eax, %eax
    000018bd: 	callq	__printf_chk@PLT # Offset: 6333
    000018c2: 	jmp	.Ltmp2600 # Offset: 6338
.Ltmp2571:
    000018c7: 	movq	0xd0(%rsp), %rdx
    000018cf: 	leaq	DATAat0x271d0(%rip), %rsi
    000018d6: 	movl	$0x1, %edi
    000018db: 	xorl	%eax, %eax
    000018dd: 	callq	__printf_chk@PLT # Offset: 6365
    000018e2: 	jmp	.Ltmp2601 # Offset: 6370
.Ltmp2483:
    000018e7: 	movq	0xd0(%rsp), %rdx
    000018ef: 	leaq	DATAat0x271d0(%rip), %rsi
    000018f6: 	movl	$0x1, %edi
    000018fb: 	xorl	%eax, %eax
    000018fd: 	callq	__printf_chk@PLT # Offset: 6397
    00001902: 	jmp	.Ltmp2602 # Offset: 6402
.Ltmp2497:
    00001907: 	movq	0xd0(%rsp), %rdx
    0000190f: 	leaq	DATAat0x271d0(%rip), %rsi
    00001916: 	movl	$0x1, %edi
    0000191b: 	xorl	%eax, %eax
    0000191d: 	callq	__printf_chk@PLT # Offset: 6429
    00001922: 	jmp	.Ltmp2603 # Offset: 6434
.Ltmp2504:
    00001927: 	movq	%rbx, %rsi
    0000192a: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001931: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6449
    00001936: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000193d: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00001944: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000194b: 	jne	.Ltmp2604 # Offset: 6475
.Ltmp2509:
    00001951: 	movq	-0x8(%rdx), %rax
    00001955: 	addq	$0x200, %rax
    0000195b: 	jmp	.Ltmp2604 # Offset: 6491
.Ltmp2495:
    00001960: 	movq	-0x8(%rdx), %rax
    00001964: 	addq	$0x200, %rax
    0000196a: 	jmp	.Ltmp2605 # Offset: 6506
.Ltmp2549:
    0000196f: 	movq	-0x8(%rdx), %rax
    00001973: 	addq	$0x200, %rax
    00001979: 	jmp	.Ltmp2606 # Offset: 6521
.Ltmp2548:
    0000197e: 	movq	%rbx, %rsi
    00001981: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001988: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6536
    0000198d: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001994: 	jmp	.Ltmp2607 # Offset: 6548
.Ltmp2476:
    00001999: 	movq	%rbx, %rsi
    0000199c: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000019a3: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6563
    000019a8: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000019af: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000019b6: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000019bd: 	jne	.Ltmp2608 # Offset: 6589
.Ltmp2481:
    000019c3: 	movq	-0x8(%rdx), %rax
    000019c7: 	addq	$0x200, %rax
    000019cd: 	jmp	.Ltmp2608 # Offset: 6605
.Ltmp2490:
    000019d2: 	movq	%rbx, %rsi
    000019d5: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000019dc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6620
    000019e1: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000019e8: 	jmp	.Ltmp2609 # Offset: 6632
.Ltmp2558:
    000019ed: 	movq	%rbx, %rsi
    000019f0: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000019f7: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6647
    000019fc: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001a03: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001a0a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001a11: 	jne	.Ltmp2610 # Offset: 6673
.Ltmp2559:
    00001a17: 	movq	-0x8(%rdx), %rax
    00001a1b: 	addq	$0x200, %rax
    00001a21: 	jmp	.Ltmp2610 # Offset: 6689
.Ltmp2538:
    00001a26: 	movq	%rbx, %rsi
    00001a29: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001a30: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6704
    00001a35: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001a3c: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001a43: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001a4a: 	jne	.Ltmp2611 # Offset: 6730
.Ltmp2539:
    00001a50: 	movq	-0x8(%rdx), %rax
    00001a54: 	addq	$0x200, %rax
    00001a5a: 	jmp	.Ltmp2611 # Offset: 6746
.Ltmp2569:
    00001a5f: 	movq	-0x8(%rdx), %rax
    00001a63: 	addq	$0x200, %rax
    00001a69: 	jmp	.Ltmp2612 # Offset: 6761
.Ltmp2568:
    00001a6e: 	movq	%rbx, %rsi
    00001a71: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001a78: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6776
    00001a7d: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001a84: 	jmp	.Ltmp2613 # Offset: 6788
.Ltmp2454:
    00001a89: 	cmpq	0x8(%rsp), %rbp
    00001a8e: 	je	.Ltmp2457 # Offset: 6798
.Ltmp2616:
    00001a94: 	movq	(%rbp), %rdi
    00001a98: 	leaq	0x10(%rbp), %rax
    00001a9c: 	cmpq	%rax, %rdi
    00001a9f: 	je	.Ltmp2614 # Offset: 6815
.Ltmp2615:
    00001aa1: 	movq	0x10(%rbp), %rax
    00001aa5: 	addq	$0x20, %rbp
    00001aa9: 	leaq	0x1(%rax), %rsi
    00001aad: 	callq	_ZdlPvm@PLT # Offset: 6829
    00001ab2: 	cmpq	%rbp, 0x8(%rsp)
    00001ab7: 	je	.Ltmp2457 # Offset: 6839
    00001abd: 	movq	(%rbp), %rdi
    00001ac1: 	leaq	0x10(%rbp), %rax
    00001ac5: 	cmpq	%rax, %rdi
    00001ac8: 	jne	.Ltmp2615 # Offset: 6856
.Ltmp2614:
    00001aca: 	addq	$0x20, %rbp
    00001ace: 	cmpq	%rbp, 0x8(%rsp)
    00001ad3: 	jne	.Ltmp2616 # Offset: 6867
    00001ad5: 	jmp	.Ltmp2457 # Offset: 6869
.Ltmp2508:
    00001ada: 	cmpq	$0x0, 0x30(%rsp)
    00001ae0: 	je	.Ltmp2617 # Offset: 6880
    00001ae6: 	jmp	.Ltmp2618 # Offset: 6886
    00001ae8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2480:
    00001af0: 	testq	%r12, %r12
    00001af3: 	je	.Ltmp2593 # Offset: 6899
    00001af9: 	jmp	.Ltmp2619 # Offset: 6905
    00001afe: 	nop # Size: 2
.Ltmp2507:
    00001b00: 	leaq	0x68(%rsp), %rsi
    00001b05: 	xorl	%edx, %edx
    00001b07: 	movq	%r14, %rdi
    00001b0a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6922
    00001b0f: 	movq	%rax, (%r14)
    00001b12: 	movq	%rax, %rdi
    00001b15: 	movq	0x68(%rsp), %rax
    00001b1a: 	movq	%rax, 0x10(%r14)
.Ltmp2618:
    00001b1e: 	movq	0x30(%rsp), %rdx
    00001b23: 	movq	0x20(%rsp), %rsi
    00001b28: 	callq	memcpy@PLT # Offset: 6952
    00001b2d: 	movq	0x68(%rsp), %rax
    00001b32: 	movq	(%r14), %rdi
    00001b35: 	movq	%rax, 0x30(%rsp)
    00001b3a: 	jmp	.Ltmp2617 # Offset: 6970
.Ltmp2494:
    00001b3f: 	cmpq	$0x0, 0x30(%rsp)
    00001b45: 	je	.Ltmp2620 # Offset: 6981
    00001b4b: 	jmp	.Ltmp2621 # Offset: 6987
    00001b4d: 	nopl	(%rax) # Size: 3
.Ltmp2493:
    00001b50: 	leaq	0x68(%rsp), %rsi
    00001b55: 	xorl	%edx, %edx
    00001b57: 	movq	%r14, %rdi
    00001b5a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7002
    00001b5f: 	movq	%rax, (%r14)
    00001b62: 	movq	%rax, %rdi
    00001b65: 	movq	0x68(%rsp), %rax
    00001b6a: 	movq	%rax, 0x10(%r14)
.Ltmp2621:
    00001b6e: 	movq	0x30(%rsp), %rdx
    00001b73: 	movq	0x40(%rsp), %rsi
    00001b78: 	callq	memcpy@PLT # Offset: 7032
    00001b7d: 	movq	0x68(%rsp), %rax
    00001b82: 	movq	(%r14), %rdi
    00001b85: 	movq	%rax, 0x30(%rsp)
    00001b8a: 	jmp	.Ltmp2620 # Offset: 7050
.Ltmp2467:
    00001b8f: 	movq	%r14, %rcx
    00001b92: 	movl	%ebx, (%rcx)
    00001b94: 	jmp	.Ltmp2622 # Offset: 7060
.Ltmp2595:
    00001b99: 	movq	0x8(%rsp), %rdi
    00001b9e: 	jmp	.Ltmp2623 # Offset: 7070
.Ltmp2492:
    00001ba3: 	leaq	DATAat0x27008(%rip), %rdi
    00001baa: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7082
.Ltmp2506:
    00001baf: 	leaq	DATAat0x27008(%rip), %rdi
    00001bb6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7094
.Ltmp2522:
    00001bbb: 	leaq	DATAat0x27008(%rip), %rdi
    00001bc2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7106
.Ltmp2525:
    00001bc7: 	leaq	DATAat0x27184(%rip), %rdi
    00001bce: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7118
.Ltmp2591:
    00001bd3: 	callq	__stack_chk_fail@PLT # Offset: 7123
.Ltmp2478:
    00001bd8: 	leaq	DATAat0x27008(%rip), %rdi
    00001bdf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7135
    00001be4: 	endbr64
.Ltmp2625:
    00001be8: 	movq	%rax, %rbx
    00001beb: 	jmp	.Ltmp2624 # Offset: 7147
    00001bf0: 	endbr64
    00001bf4: 	jmp	.Ltmp2625 # Offset: 7156
    00001bf6: 	endbr64
.Ltmp2628:
    00001bfa: 	movq	%rax, %rbx
    00001bfd: 	jmp	.Ltmp2626 # Offset: 7165
    00001c02: 	endbr64
    00001c06: 	movq	%rax, %rbx
    00001c09: 	jmp	.Ltmp2627 # Offset: 7177
    00001c0b: 	endbr64
    00001c0f: 	jmp	.Ltmp2628 # Offset: 7183
    00001c11: 	endbr64
.Ltmp2630:
    00001c15: 	movq	%rax, %rbx
    00001c18: 	jmp	.Ltmp2629 # Offset: 7192
    00001c1a: 	endbr64
    00001c1e: 	jmp	.Ltmp2630 # Offset: 7198
    00001c20: 	endbr64
    00001c24: 	jmp	.Ltmp2630 # Offset: 7204
.Ltmp2629:
    00001c26: 	movq	0xd0(%rsp), %rdi
    00001c2e: 	cmpq	0x8(%rsp), %rdi
    00001c33: 	je	.Ltmp2627 # Offset: 7219
    00001c35: 	movq	0xe0(%rsp), %rax
    00001c3d: 	leaq	0x1(%rax), %rsi
    00001c41: 	callq	_ZdlPvm@PLT # Offset: 7233
.Ltmp2627:
    00001c46: 	movq	0xb0(%rsp), %rdi
    00001c4e: 	leaq	0xc0(%rsp), %rax
    00001c56: 	cmpq	%rax, %rdi
    00001c59: 	je	.Ltmp2631 # Offset: 7257
    00001c5b: 	movq	0xc0(%rsp), %rax
    00001c63: 	leaq	0x1(%rax), %rsi
    00001c67: 	callq	_ZdlPvm@PLT # Offset: 7271
.Ltmp2631:
    00001c6c: 	movq	0x90(%rsp), %rdi
    00001c74: 	leaq	0xa0(%rsp), %rax
    00001c7c: 	cmpq	%rax, %rdi
    00001c7f: 	jne	.Ltmp2632 # Offset: 7295
.Ltmp2634:
    00001c81: 	movl	$0x4, %esi
    00001c86: 	movq	%r15, %rdi
    00001c89: 	callq	_ZdlPvm@PLT # Offset: 7305
.Ltmp2635:
    00001c8e: 	movq	%rbp, %rdi
    00001c91: 	movl	$0x4, %esi
    00001c96: 	movq	%rbx, %rbp
    00001c99: 	callq	_ZdlPvm@PLT # Offset: 7321
.Ltmp2636:
    00001c9e: 	movq	0x70(%rsp), %rdi
    00001ca3: 	cmpq	0x38(%rsp), %rdi
    00001ca8: 	je	.Ltmp2633 # Offset: 7336
    00001caa: 	movq	0x80(%rsp), %rax
    00001cb2: 	leaq	0x1(%rax), %rsi
    00001cb6: 	callq	_ZdlPvm@PLT # Offset: 7350
.Ltmp2633:
    00001cbb: 	movq	%rbp, %rdi
    00001cbe: 	callq	_Unwind_Resume@PLT # Offset: 7358
.Ltmp2626:
    00001cc3: 	movq	0xd0(%rsp), %rdi
    00001ccb: 	cmpq	0x8(%rsp), %rdi
    00001cd0: 	je	.Ltmp2631 # Offset: 7376
    00001cd2: 	movq	0xe0(%rsp), %rax
    00001cda: 	leaq	0x1(%rax), %rsi
    00001cde: 	callq	_ZdlPvm@PLT # Offset: 7390
    00001ce3: 	jmp	.Ltmp2631 # Offset: 7395
.Ltmp2632:
    00001ce5: 	movq	0xa0(%rsp), %rax
    00001ced: 	leaq	0x1(%rax), %rsi
    00001cf1: 	callq	_ZdlPvm@PLT # Offset: 7409
    00001cf6: 	jmp	.Ltmp2634 # Offset: 7414
    00001cf8: 	endbr64
    00001cfc: 	jmp	.Ltmp2628 # Offset: 7420
    00001d01: 	endbr64
    00001d05: 	jmp	.Ltmp2628 # Offset: 7429
.Ltmp2624:
    00001d0a: 	movq	0xd0(%rsp), %rdi
    00001d12: 	cmpq	0x8(%rsp), %rdi
    00001d17: 	je	.Ltmp2634 # Offset: 7447
.Ltmp2638:
    00001d1d: 	movq	0xe0(%rsp), %rax
    00001d25: 	leaq	0x1(%rax), %rsi
    00001d29: 	callq	_ZdlPvm@PLT # Offset: 7465
    00001d2e: 	jmp	.Ltmp2634 # Offset: 7470
    00001d33: 	endbr64
    00001d37: 	jmp	.Ltmp2628 # Offset: 7479
    00001d3c: 	endbr64
    00001d40: 	jmp	.Ltmp2628 # Offset: 7488
    00001d45: 	endbr64
    00001d49: 	jmp	.Ltmp2628 # Offset: 7497
    00001d4e: 	endbr64
    00001d52: 	jmp	.Ltmp2628 # Offset: 7506
    00001d57: 	endbr64
    00001d5b: 	jmp	.Ltmp2628 # Offset: 7515
    00001d60: 	endbr64
    00001d64: 	jmp	.Ltmp2628 # Offset: 7524
    00001d69: 	endbr64
    00001d6d: 	jmp	.Ltmp2628 # Offset: 7533
    00001d72: 	endbr64
    00001d76: 	jmp	.Ltmp2628 # Offset: 7542
    00001d7b: 	endbr64
    00001d7f: 	jmp	.Ltmp2628 # Offset: 7551
    00001d84: 	endbr64
    00001d88: 	jmp	.Ltmp2628 # Offset: 7560
    00001d8d: 	endbr64
    00001d91: 	jmp	.Ltmp2628 # Offset: 7569
    00001d96: 	endbr64
    00001d9a: 	jmp	.Ltmp2628 # Offset: 7578
    00001d9f: 	endbr64
    00001da3: 	jmp	.Ltmp2628 # Offset: 7587
    00001da8: 	endbr64
    00001dac: 	jmp	.Ltmp2628 # Offset: 7596
    00001db1: 	endbr64
    00001db5: 	jmp	.Ltmp2630 # Offset: 7605
    00001dba: 	endbr64
    00001dbe: 	jmp	.Ltmp2630 # Offset: 7614
    00001dc3: 	endbr64
    00001dc7: 	jmp	.Ltmp2625 # Offset: 7623
    00001dcc: 	endbr64
    00001dd0: 	jmp	.Ltmp2625 # Offset: 7632
    00001dd5: 	endbr64
    00001dd9: 	jmp	.Ltmp2625 # Offset: 7641
    00001dde: 	endbr64
    00001de2: 	jmp	.Ltmp2625 # Offset: 7650
    00001de7: 	endbr64
    00001deb: 	jmp	.Ltmp2625 # Offset: 7659
    00001df0: 	endbr64
    00001df4: 	jmp	.Ltmp2625 # Offset: 7668
    00001df9: 	endbr64
    00001dfd: 	movq	%rax, %rbx
    00001e00: 	jmp	.Ltmp2631 # Offset: 7680
    00001e05: 	endbr64
    00001e09: 	jmp	.Ltmp2628 # Offset: 7689
    00001e0e: 	endbr64
    00001e12: 	movq	%rax, %rbx
    00001e15: 	jmp	.Ltmp2634 # Offset: 7701
    00001e1a: 	endbr64
    00001e1e: 	movq	%rax, %rbx
    00001e21: 	jmp	.Ltmp2635 # Offset: 7713
    00001e26: 	endbr64
    00001e2a: 	movq	%rax, %rbp
    00001e2d: 	jmp	.Ltmp2636 # Offset: 7725
    00001e32: 	endbr64
    00001e36: 	movq	%rax, %rbx
    00001e39: 	jmp	.Ltmp2637 # Offset: 7737
    00001e3b: 	endbr64
    00001e3f: 	jmp	.Ltmp2630 # Offset: 7743
    00001e44: 	endbr64
    00001e48: 	jmp	.Ltmp2630 # Offset: 7752
    00001e4d: 	endbr64
    00001e51: 	jmp	.Ltmp2630 # Offset: 7761
    00001e56: 	endbr64
    00001e5a: 	jmp	.Ltmp2630 # Offset: 7770
.Ltmp2637:
    00001e5f: 	movq	0xd0(%rsp), %rdi
    00001e67: 	leaq	0xe0(%rsp), %rax
    00001e6f: 	cmpq	%rax, %rdi
    00001e72: 	jne	.Ltmp2638 # Offset: 7794
    00001e78: 	jmp	.Ltmp2634 # Offset: 7800
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIiEvv"

Binary Function "_Z11TestOneTypeIdEvv" after disassembly {
  Number      : 245
  State       : disassembled
  Address     : 0x209b0
  Size        : 0x1d9e
  MaxSize     : 0x1da0
  Offset      : 0x209b0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIdEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0244:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x108, %rsp
    00000015: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm7
    0000001d: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm6
    00000025: 	movq	%fs:0x28, %rax
    0000002e: 	movq	%rax, 0xf8(%rsp)
    00000036: 	movl	iterations(%rip), %eax
    0000003c: 	movq	"_ZL7gLabels/1"+56(%rip), %r14
    00000043: 	movl	$0x62756f64, 0x80(%rsp)
    0000004e: 	movaps	%xmm7, 0x20(%rsp)
    00000053: 	movq	%xmm7, %rbp
    00000058: 	movhlps	%xmm6, %xmm7
    0000005b: 	movq	%xmm7, %rbx
    00000060: 	movb	$0x0, 0x86(%rsp)
    00000068: 	leaq	0x8(%rbx), %r12
    0000006c: 	movaps	%xmm6, 0x40(%rsp)
    00000071: 	movq	$0x6, 0x78(%rsp)
    0000007a: 	movq	%xmm7, 0x50(%rsp)
    00000080: 	movl	%eax, 0x1c(%rsp)
    00000084: 	leaq	0x80(%rsp), %rax
    0000008c: 	movq	%rax, 0x38(%rsp)
    00000091: 	movq	%rax, 0x70(%rsp)
    00000096: 	movl	$0x656c, %eax
    0000009b: 	movw	%ax, 0x84(%rsp)
    000000a3: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000aa: 	movq	%xmm6, 0x10(%rsp)
    000000b0: 	movq	%rax, 0x8(%rsp)
    000000b5: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    000000bc: 	movq	%rax, 0x30(%rsp)
    000000c1: 	cmpq	%r12, %rax
    000000c4: 	jbe	.Ltmp2639 # Offset: 196
    000000c6: 	movq	%rbp, 0x58(%rsp)
    000000cb: 	movq	%r12, %r13
    000000ce: 	movq	%rax, %r15
    000000d1: 	nopl	(%rax) # Size: 7
.Ltmp2642:
    000000d8: 	movq	(%r13), %rbp
    000000dc: 	leaq	0x200(%rbp), %rbx
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2641:
    000000e8: 	movq	(%rbp), %rdi
    000000ec: 	leaq	0x10(%rbp), %rdx
    000000f0: 	cmpq	%rdx, %rdi
    000000f3: 	je	.Ltmp2640 # Offset: 243
    000000f9: 	movq	0x10(%rbp), %rax
    000000fd: 	addq	$0x20, %rbp
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
    0000010a: 	cmpq	%rbp, %rbx
    0000010d: 	jne	.Ltmp2641 # Offset: 269
    0000010f: 	addq	$0x8, %r13
    00000113: 	cmpq	%r13, %r15
    00000116: 	ja	.Ltmp2642 # Offset: 278
.Ltmp2782:
    00000118: 	movq	0x58(%rsp), %rbp
.Ltmp2639:
    0000011d: 	movq	0x50(%rsp), %rbx
    00000122: 	cmpq	%rbx, 0x30(%rsp)
    00000127: 	jne	.Ltmp2643 # Offset: 295
    00000129: 	jmp	.Ltmp2644 # Offset: 297
    0000012e: 	nop # Size: 2
.Ltmp2646:
    00000130: 	movq	0x10(%rbp), %rax
    00000134: 	addq	$0x20, %rbp
    00000138: 	leaq	0x1(%rax), %rsi
    0000013c: 	callq	_ZdlPvm@PLT # Offset: 316
.Ltmp2643:
    00000141: 	cmpq	%rbp, 0x10(%rsp)
    00000146: 	je	.Ltmp2645 # Offset: 326
.Ltmp2647:
    00000148: 	movq	(%rbp), %rdi
    0000014c: 	leaq	0x10(%rbp), %rax
    00000150: 	cmpq	%rax, %rdi
    00000153: 	jne	.Ltmp2646 # Offset: 339
    00000155: 	addq	$0x20, %rbp
    00000159: 	cmpq	0x10(%rsp), %rbp
    0000015e: 	jne	.Ltmp2647 # Offset: 350
    00000160: 	cmpq	%r14, 0x8(%rsp)
    00000165: 	je	.Ltmp2648 # Offset: 357
    00000167: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2650:
    00000170: 	movq	(%r14), %rdi
    00000173: 	leaq	0x10(%r14), %rax
    00000177: 	cmpq	%rax, %rdi
    0000017a: 	je	.Ltmp2649 # Offset: 378
    0000017c: 	movq	0x10(%r14), %rax
    00000180: 	leaq	0x1(%rax), %rsi
    00000184: 	callq	_ZdlPvm@PLT # Offset: 388
.Ltmp2649:
    00000189: 	addq	$0x20, %r14
.Ltmp2645:
    0000018d: 	cmpq	%r14, 0x8(%rsp)
    00000192: 	jne	.Ltmp2650 # Offset: 402
.Ltmp2648:
    00000194: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    0000019b: 	leaq	0x8(%rax), %rbx
    0000019f: 	cmpq	%r12, %rbx
    000001a2: 	jbe	.Ltmp2651 # Offset: 418
    000001a4: 	nopl	(%rax) # Size: 4
.Ltmp2652:
    000001a8: 	movq	(%r12), %rdi
    000001ac: 	movl	$0x200, %esi
    000001b1: 	addq	$0x8, %r12
    000001b5: 	callq	_ZdlPvm@PLT # Offset: 437
    000001ba: 	cmpq	%r12, %rbx
    000001bd: 	ja	.Ltmp2652 # Offset: 445
.Ltmp2651:
    000001bf: 	movdqa	0x20(%rsp), %xmm7
    000001c5: 	movl	$0x4000000, %edi
    000001ca: 	movaps	%xmm7, "_ZL7gLabels/1"+48(%rip)
    000001d1: 	movdqa	0x40(%rsp), %xmm7
    000001d7: 	movaps	%xmm7, "_ZL7gLabels/1"+64(%rip)
    000001de: 	callq	_Znam@PLT # Offset: 478
    000001e3: 	movl	$0x4000000, %edi
    000001e8: 	movq	%rax, %rbp
    000001eb: 	callq	_Znam@PLT # Offset: 491
    000001f0: 	movq	%rax, %r15
    000001f3: 	movslq	init_value(%rip), %rax
    000001fa: 	leaq	0x4000000(%rbp), %r12
    00000201: 	movq	%rbp, %rdx
    00000204: 	addq	$0x800000, %rax
    0000020a: 	jmp	.Ltmp2653 # Offset: 522
    0000020c: 	nopl	(%rax) # Size: 4
.Ltmp2655:
    00000210: 	pxor	%xmm0, %xmm0
    00000214: 	cvtsi2sd	%rax, %xmm0
    00000219: 	movsd	%xmm0, -0x8(%rdx)
    0000021e: 	cmpq	%rdx, %r12
    00000221: 	je	.Ltmp2654 # Offset: 545
.Ltmp2653:
    00000223: 	addq	$0x8, %rdx
    00000227: 	subq	$0x1, %rax
    0000022b: 	jns	.Ltmp2655 # Offset: 555
    0000022d: 	movq	%rax, %rcx
    00000230: 	movq	%rax, %rsi
    00000233: 	pxor	%xmm0, %xmm0
    00000237: 	shrq	%rcx
    0000023a: 	andl	$0x1, %esi
    0000023d: 	orq	%rsi, %rcx
    00000240: 	cvtsi2sd	%rcx, %xmm0
    00000245: 	addsd	%xmm0, %xmm0
    00000249: 	movsd	%xmm0, -0x8(%rdx)
    0000024e: 	cmpq	%rdx, %r12
    00000251: 	jne	.Ltmp2653 # Offset: 593
.Ltmp2654:
    00000253: 	movl	$0x2e, %edx
    00000258: 	movq	%r12, %rsi
    0000025b: 	movq	%rbp, %rdi
    0000025e: 	movl	$0x8, %ebx
    00000263: 	callq	"_ZSt16__introsort_loopIPdlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1" # Offset: 611
    00000268: 	leaq	0x8(%rbp), %rax
    0000026c: 	leaq	0x80(%rbp), %r13
    00000273: 	movq	%rax, 0x20(%rsp)
    00000278: 	movq	%rax, %r14
    0000027b: 	jmp	.Ltmp2656 # Offset: 635
    0000027d: 	nopl	(%rax) # Size: 3
.Ltmp2659:
    00000280: 	cmpq	%r14, %rbp
    00000283: 	je	.Ltmp2657 # Offset: 643
    00000285: 	movq	%r14, %rdx
    00000288: 	leaq	(%rbp,%rbx), %rdi
    0000028d: 	movq	%rbp, %rsi
    00000290: 	movsd	%xmm1, 0x8(%rsp)
    00000296: 	subq	%rbp, %rdx
    00000299: 	callq	memmove@PLT # Offset: 665
    0000029e: 	movsd	0x8(%rsp), %xmm1
.Ltmp2657:
    000002a4: 	addq	$0x8, %r14
    000002a8: 	movsd	%xmm1, (%rbp)
    000002ad: 	cmpq	%r14, %r13
    000002b0: 	je	.Ltmp2658 # Offset: 688
.Ltmp2656:
    000002b2: 	movsd	(%r14), %xmm1
    000002b7: 	movsd	(%rbp), %xmm0
    000002bc: 	comisd	%xmm1, %xmm0
    000002c0: 	ja	.Ltmp2659 # Offset: 704
    000002c2: 	movsd	-0x8(%r14), %xmm0
    000002c8: 	leaq	-0x8(%r14), %rax
    000002cc: 	comisd	%xmm1, %xmm0
    000002d0: 	jbe	.Ltmp2660 # Offset: 720
    000002d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2661:
    000002e0: 	movsd	%xmm0, 0x8(%rax)
    000002e5: 	movq	%rax, %rdx
    000002e8: 	movsd	-0x8(%rax), %xmm0
    000002ed: 	subq	$0x8, %rax
    000002f1: 	comisd	%xmm1, %xmm0
    000002f5: 	ja	.Ltmp2661 # Offset: 757
.Ltmp2808:
    000002f7: 	addq	$0x8, %r14
    000002fb: 	movsd	%xmm1, (%rdx)
    000002ff: 	cmpq	%r14, %r13
    00000302: 	jne	.Ltmp2656 # Offset: 770
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp2658:
    00000308: 	movsd	(%r13), %xmm1
    0000030e: 	movsd	-0x8(%r13), %xmm0
    00000314: 	leaq	-0x8(%r13), %rax
    00000318: 	comisd	%xmm1, %xmm0
    0000031c: 	jbe	.Ltmp2662 # Offset: 796
    00000322: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2663:
    00000328: 	movsd	%xmm0, 0x8(%rax)
    0000032d: 	movq	%rax, %rdx
    00000330: 	movsd	-0x8(%rax), %xmm0
    00000335: 	subq	$0x8, %rax
    00000339: 	comisd	%xmm1, %xmm0
    0000033d: 	ja	.Ltmp2663 # Offset: 829
    0000033f: 	addq	$0x8, %r13
    00000343: 	movsd	%xmm1, (%rdx)
    00000347: 	cmpq	%r13, %r12
    0000034a: 	jne	.Ltmp2658 # Offset: 842
.Ltmp2784:
    0000034c: 	leaq	0xd0(%rsp), %rbx
    00000354: 	leaq	0x70(%rsp), %r13
    00000359: 	leaq	0xfa00(%rbp), %rax
    00000360: 	leaq	DATAat0x27268(%rip), %rdx
    00000367: 	movq	%r13, %rsi
    0000036a: 	movq	%rbx, %rdi
    0000036d: 	movq	%rax, 0x10(%rsp)
    00000372: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 882
    00000377: 	callq	clock@PLT # Offset: 887
    0000037c: 	movl	iterations(%rip), %r8d
    00000383: 	xorl	%edi, %edi
    00000385: 	leaq	0xf9f8(%rbp), %rsi
    0000038c: 	movq	%rax, start_time(%rip)
    00000393: 	leaq	0x7d00(%rbp), %rcx
    0000039a: 	testl	%r8d, %r8d
    0000039d: 	jle	.Ltmp2664 # Offset: 925
    0000039f: 	nop # Size: 1
.Ltmp2668:
    000003a0: 	movq	%rbp, %rdx
    000003a3: 	movq	%rsi, %rax
    000003a6: 	jmp	.Ltmp2665 # Offset: 934
    000003a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2667:
    000003b0: 	subq	$0x8, %rax
    000003b4: 	addq	$0x8, %rdx
    000003b8: 	cmpq	%rdx, %rax
    000003bb: 	je	.Ltmp2666 # Offset: 955
.Ltmp2665:
    000003bd: 	movsd	(%rdx), %xmm0
    000003c1: 	movsd	(%rax), %xmm1
    000003c5: 	movsd	%xmm1, (%rdx)
    000003c9: 	movsd	%xmm0, (%rax)
    000003cd: 	cmpq	%rcx, %rax
    000003d0: 	jne	.Ltmp2667 # Offset: 976
.Ltmp2666:
    000003d2: 	addl	$0x1, %edi
    000003d5: 	cmpl	%r8d, %edi
    000003d8: 	jne	.Ltmp2668 # Offset: 984
.Ltmp2664:
    000003da: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000003e1: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    000003e8: 	subq	$0x20, %rax
    000003ec: 	cmpq	%rax, %r14
    000003ef: 	je	.Ltmp2669 # Offset: 1007
    000003f5: 	leaq	0x10(%r14), %rdi
    000003f9: 	movq	0xd8(%rsp), %r12
    00000401: 	movq	%rdi, (%r14)
    00000404: 	movq	0xd0(%rsp), %rax
    0000040c: 	movq	%rax, %rcx
    0000040f: 	movq	%rax, 0x8(%rsp)
    00000414: 	addq	%r12, %rcx
    00000417: 	je	.Ltmp2670 # Offset: 1047
    00000419: 	testq	%rax, %rax
    0000041c: 	je	.Ltmp2671 # Offset: 1052
.Ltmp2670:
    00000422: 	movq	%r12, 0x68(%rsp)
    00000427: 	cmpq	$0xf, %r12
    0000042b: 	ja	.Ltmp2672 # Offset: 1067
    00000431: 	cmpq	$0x1, %r12
    00000435: 	jne	.Ltmp2673 # Offset: 1077
    0000043b: 	movq	0x8(%rsp), %rax
    00000440: 	movzbl	(%rax), %eax
    00000443: 	movb	%al, 0x10(%r14)
.Ltmp2783:
    00000447: 	movq	%r12, 0x8(%r14)
    0000044b: 	movb	$0x0, (%rdi,%r12)
    00000450: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000457: 	addq	$0x20, %rax
    0000045b: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp2798:
    00000462: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000469: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000470: 	je	.Ltmp2674 # Offset: 1136
.Ltmp2797:
    00000476: 	movq	-0x20(%rax), %r12
    0000047a: 	callq	clock@PLT # Offset: 1146
    0000047f: 	pxor	%xmm0, %xmm0
    00000483: 	movq	%rax, end_time(%rip)
    0000048a: 	movq	%r12, %rdi
    0000048d: 	subq	start_time(%rip), %rax
    00000494: 	cvtsi2sd	%rax, %xmm0
    00000499: 	divsd	DATAat0x276b0(%rip), %xmm0
    000004a1: 	callq	_Z13record_resultdPKc # Offset: 1185
    000004a6: 	movq	0x20(%rsp), %rax
    000004ab: 	movq	0x10(%rsp), %rdx
    000004b0: 	movq	%rax, %r12
    000004b3: 	jmp	.Ltmp2675 # Offset: 1203
    000004b5: 	nopl	(%rax) # Size: 3
.Ltmp2677:
    000004b8: 	movsd	(%rax), %xmm0
    000004bc: 	movsd	-0x8(%rax), %xmm1
    000004c1: 	addq	$0x8, %rax
    000004c5: 	comisd	%xmm0, %xmm1
    000004c9: 	ja	.Ltmp2676 # Offset: 1225
.Ltmp2675:
    000004cf: 	cmpq	%rax, %rdx
    000004d2: 	jne	.Ltmp2677 # Offset: 1234
.Ltmp2786:
    000004d4: 	movq	0xd0(%rsp), %rdi
    000004dc: 	leaq	0xe0(%rsp), %rax
    000004e4: 	movq	%rax, 0x8(%rsp)
    000004e9: 	cmpq	%rax, %rdi
    000004ec: 	je	.Ltmp2678 # Offset: 1260
    000004ee: 	movq	0xe0(%rsp), %rax
    000004f6: 	leaq	0x1(%rax), %rsi
    000004fa: 	callq	_ZdlPvm@PLT # Offset: 1274
.Ltmp2678:
    000004ff: 	leaq	DATAat0x27284(%rip), %rdx
    00000506: 	movq	%r13, %rsi
    00000509: 	movq	%rbx, %rdi
    0000050c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1292
    00000511: 	callq	clock@PLT # Offset: 1297
    00000516: 	movl	iterations(%rip), %r8d
    0000051d: 	xorl	%edi, %edi
    0000051f: 	leaq	0xf9f8(%rbp), %rsi
    00000526: 	movq	%rax, start_time(%rip)
    0000052d: 	leaq	0x7d00(%rbp), %rcx
    00000534: 	testl	%r8d, %r8d
    00000537: 	jle	.Ltmp2679 # Offset: 1335
    00000539: 	nopl	(%rax) # Size: 7
.Ltmp2682:
    00000540: 	movq	%rsi, %rdx
    00000543: 	movq	%rbp, %rax
    00000546: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2681:
    00000550: 	cmpq	%rax, %rdx
    00000553: 	je	.Ltmp2680 # Offset: 1363
    00000555: 	movsd	(%rdx), %xmm1
    00000559: 	movsd	(%rax), %xmm0
    0000055d: 	addq	$0x8, %rax
    00000561: 	subq	$0x8, %rdx
    00000565: 	movsd	%xmm1, -0x8(%rax)
    0000056a: 	movsd	%xmm0, 0x8(%rdx)
    0000056f: 	cmpq	%rcx, %rax
    00000572: 	jne	.Ltmp2681 # Offset: 1394
.Ltmp2680:
    00000574: 	addl	$0x1, %edi
    00000577: 	cmpl	%r8d, %edi
    0000057a: 	jne	.Ltmp2682 # Offset: 1402
.Ltmp2679:
    0000057c: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000583: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    0000058a: 	subq	$0x20, %rax
    0000058e: 	cmpq	%rax, %r14
    00000591: 	je	.Ltmp2683 # Offset: 1425
    00000597: 	leaq	0x10(%r14), %rdi
    0000059b: 	movq	0xd8(%rsp), %rsi
    000005a3: 	movq	%rdi, (%r14)
    000005a6: 	movq	0xd0(%rsp), %rcx
    000005ae: 	movq	%rsi, 0x30(%rsp)
    000005b3: 	movq	%rcx, %rax
    000005b6: 	movq	%rcx, 0x40(%rsp)
    000005bb: 	addq	%rsi, %rax
    000005be: 	je	.Ltmp2684 # Offset: 1470
    000005c0: 	testq	%rcx, %rcx
    000005c3: 	je	.Ltmp2685 # Offset: 1475
.Ltmp2684:
    000005c9: 	movq	0x30(%rsp), %rax
    000005ce: 	movq	%rax, 0x68(%rsp)
    000005d3: 	cmpq	$0xf, %rax
    000005d7: 	ja	.Ltmp2686 # Offset: 1495
    000005dd: 	cmpq	$0x1, 0x30(%rsp)
    000005e3: 	jne	.Ltmp2687 # Offset: 1507
    000005e9: 	movq	0x40(%rsp), %rax
    000005ee: 	movzbl	(%rax), %eax
    000005f1: 	movb	%al, 0x10(%r14)
.Ltmp2803:
    000005f5: 	movq	0x30(%rsp), %rax
    000005fa: 	movq	%rax, 0x8(%r14)
    000005fe: 	movb	$0x0, (%rdi,%rax)
    00000602: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000609: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000610: 	addq	$0x20, %rax
    00000614: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000061b: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000622: 	je	.Ltmp2688 # Offset: 1570
.Ltmp2796:
    00000628: 	movq	-0x20(%rax), %r14
    0000062c: 	callq	clock@PLT # Offset: 1580
    00000631: 	pxor	%xmm0, %xmm0
    00000635: 	movq	%rax, end_time(%rip)
    0000063c: 	movq	%r14, %rdi
    0000063f: 	subq	start_time(%rip), %rax
    00000646: 	cvtsi2sd	%rax, %xmm0
    0000064b: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000653: 	callq	_Z13record_resultdPKc # Offset: 1619
    00000658: 	movq	0x20(%rsp), %rax
    0000065d: 	movq	0x10(%rsp), %rdx
    00000662: 	jmp	.Ltmp2689 # Offset: 1634
    00000664: 	nopl	(%rax) # Size: 4
.Ltmp2691:
    00000668: 	movsd	(%rax), %xmm0
    0000066c: 	movsd	-0x8(%rax), %xmm1
    00000671: 	addq	$0x8, %rax
    00000675: 	comisd	%xmm0, %xmm1
    00000679: 	ja	.Ltmp2690 # Offset: 1657
.Ltmp2689:
    0000067f: 	cmpq	%rax, %rdx
    00000682: 	jne	.Ltmp2691 # Offset: 1666
.Ltmp2785:
    00000684: 	movq	0xd0(%rsp), %rdi
    0000068c: 	cmpq	0x8(%rsp), %rdi
    00000691: 	je	.Ltmp2692 # Offset: 1681
    00000693: 	movq	0xe0(%rsp), %rax
    0000069b: 	leaq	0x1(%rax), %rsi
    0000069f: 	callq	_ZdlPvm@PLT # Offset: 1695
.Ltmp2692:
    000006a4: 	leaq	DATAat0x272a2(%rip), %rdx
    000006ab: 	movq	%r13, %rsi
    000006ae: 	movq	%rbx, %rdi
    000006b1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1713
    000006b6: 	callq	clock@PLT # Offset: 1718
    000006bb: 	movl	iterations(%rip), %r8d
    000006c2: 	xorl	%edi, %edi
    000006c4: 	leaq	0xf9f8(%rbp), %rsi
    000006cb: 	movq	%rax, start_time(%rip)
    000006d2: 	leaq	0x7d00(%rbp), %rcx
    000006d9: 	testl	%r8d, %r8d
    000006dc: 	jle	.Ltmp2693 # Offset: 1756
    000006de: 	nop # Size: 2
.Ltmp2696:
    000006e0: 	movq	%rsi, %rdx
    000006e3: 	movq	%rbp, %rax
    000006e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2695:
    000006f0: 	cmpq	%rax, %rdx
    000006f3: 	je	.Ltmp2694 # Offset: 1779
    000006f5: 	movsd	(%rdx), %xmm1
    000006f9: 	movsd	(%rax), %xmm0
    000006fd: 	addq	$0x8, %rax
    00000701: 	subq	$0x8, %rdx
    00000705: 	movsd	%xmm1, -0x8(%rax)
    0000070a: 	movsd	%xmm0, 0x8(%rdx)
    0000070f: 	cmpq	%rcx, %rax
    00000712: 	jne	.Ltmp2695 # Offset: 1810
.Ltmp2694:
    00000714: 	addl	$0x1, %edi
    00000717: 	cmpl	%r8d, %edi
    0000071a: 	jne	.Ltmp2696 # Offset: 1818
.Ltmp2693:
    0000071c: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000723: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    0000072a: 	subq	$0x20, %rax
    0000072e: 	cmpq	%rax, %r14
    00000731: 	je	.Ltmp2697 # Offset: 1841
    00000737: 	leaq	0x10(%r14), %rdi
    0000073b: 	movq	0xd8(%rsp), %rsi
    00000743: 	movq	%rdi, (%r14)
    00000746: 	movq	0xd0(%rsp), %rcx
    0000074e: 	movq	%rsi, 0x30(%rsp)
    00000753: 	movq	%rcx, %rax
    00000756: 	movq	%rcx, 0x20(%rsp)
    0000075b: 	addq	%rsi, %rax
    0000075e: 	je	.Ltmp2698 # Offset: 1886
    00000760: 	testq	%rcx, %rcx
    00000763: 	je	.Ltmp2699 # Offset: 1891
.Ltmp2698:
    00000769: 	movq	0x30(%rsp), %rax
    0000076e: 	movq	%rax, 0x68(%rsp)
    00000773: 	cmpq	$0xf, %rax
    00000777: 	ja	.Ltmp2700 # Offset: 1911
    0000077d: 	cmpq	$0x1, 0x30(%rsp)
    00000783: 	jne	.Ltmp2701 # Offset: 1923
    00000789: 	movq	0x20(%rsp), %rax
    0000078e: 	movzbl	(%rax), %eax
    00000791: 	movb	%al, 0x10(%r14)
.Ltmp2805:
    00000795: 	movq	0x30(%rsp), %rax
    0000079a: 	movq	%rax, 0x8(%r14)
    0000079e: 	movb	$0x0, (%rdi,%rax)
    000007a2: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000007a9: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000007b0: 	addq	$0x20, %rax
    000007b4: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000007bb: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000007c2: 	je	.Ltmp2702 # Offset: 1986
.Ltmp2792:
    000007c8: 	movq	-0x20(%rax), %r14
    000007cc: 	callq	clock@PLT # Offset: 1996
    000007d1: 	pxor	%xmm0, %xmm0
    000007d5: 	movq	%rax, end_time(%rip)
    000007dc: 	movq	%r14, %rdi
    000007df: 	subq	start_time(%rip), %rax
    000007e6: 	cvtsi2sd	%rax, %xmm0
    000007eb: 	divsd	DATAat0x276b0(%rip), %xmm0
    000007f3: 	callq	_Z13record_resultdPKc # Offset: 2035
    000007f8: 	movq	0x10(%rsp), %rax
    000007fd: 	jmp	.Ltmp2703 # Offset: 2045
    000007ff: 	nop # Size: 1
.Ltmp2705:
    00000800: 	movsd	(%r12), %xmm0
    00000806: 	movsd	-0x8(%r12), %xmm1
    0000080d: 	addq	$0x8, %r12
    00000811: 	comisd	%xmm0, %xmm1
    00000815: 	ja	.Ltmp2704 # Offset: 2069
.Ltmp2703:
    0000081b: 	cmpq	%r12, %rax
    0000081e: 	jne	.Ltmp2705 # Offset: 2078
.Ltmp2791:
    00000820: 	movq	0xd0(%rsp), %rdi
    00000828: 	cmpq	0x8(%rsp), %rdi
    0000082d: 	je	.Ltmp2706 # Offset: 2093
    0000082f: 	movq	0xe0(%rsp), %rax
    00000837: 	leaq	0x1(%rax), %rsi
    0000083b: 	callq	_ZdlPvm@PLT # Offset: 2107
.Ltmp2706:
    00000840: 	leaq	DATAat0x272be(%rip), %rdx
    00000847: 	movq	%r13, %rsi
    0000084a: 	movq	%rbx, %rdi
    0000084d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2125
    00000852: 	movq	0x10(%rsp), %rsi
    00000857: 	movq	%rbx, %rcx
    0000085a: 	leaq	_ZSt7reverseIPdEvT_S1_(%rip), %rdx
    00000861: 	movq	%rbp, %rdi
    00000864: 	callq	_Z12test_reverseIPdPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2148
    00000869: 	movq	0xd0(%rsp), %rdi
    00000871: 	cmpq	0x8(%rsp), %rdi
    00000876: 	je	.Ltmp2707 # Offset: 2166
    00000878: 	movq	0xe0(%rsp), %rax
    00000880: 	leaq	0x1(%rax), %rsi
    00000884: 	callq	_ZdlPvm@PLT # Offset: 2180
.Ltmp2707:
    00000889: 	leaq	DATAat0x272da(%rip), %rdx
    00000890: 	movq	%r13, %rsi
    00000893: 	movq	%rbx, %rdi
    00000896: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2198
    0000089b: 	movq	0x10(%rsp), %rsi
    000008a0: 	movq	%rbx, %rcx
    000008a3: 	leaq	_Z17my_simple_reverseIPdEvT_S1_(%rip), %rdx
    000008aa: 	movq	%rbp, %rdi
    000008ad: 	callq	_Z12test_reverseIPdPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2221
    000008b2: 	movq	0xd0(%rsp), %rdi
    000008ba: 	cmpq	0x8(%rsp), %rdi
    000008bf: 	je	.Ltmp2708 # Offset: 2239
    000008c1: 	movq	0xe0(%rsp), %rax
    000008c9: 	leaq	0x1(%rax), %rsi
    000008cd: 	callq	_ZdlPvm@PLT # Offset: 2253
.Ltmp2708:
    000008d2: 	leaq	DATAat0x272f8(%rip), %rdx
    000008d9: 	movq	%r13, %rsi
    000008dc: 	movq	%rbx, %rdi
    000008df: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2271
    000008e4: 	movq	0x10(%rsp), %rsi
    000008e9: 	movq	%rbx, %rcx
    000008ec: 	leaq	_Z15my_fast_reverseIPdEvT_S1_(%rip), %rdx
    000008f3: 	movq	%rbp, %rdi
    000008f6: 	callq	_Z12test_reverseIPdPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2294
    000008fb: 	movq	0xd0(%rsp), %rdi
    00000903: 	cmpq	0x8(%rsp), %rdi
    00000908: 	je	.Ltmp2709 # Offset: 2312
    0000090a: 	movq	0xe0(%rsp), %rax
    00000912: 	leaq	0x1(%rax), %rsi
    00000916: 	callq	_ZdlPvm@PLT # Offset: 2326
.Ltmp2709:
    0000091b: 	leaq	DATAat0x27314(%rip), %rdx
    00000922: 	movq	%r13, %rsi
    00000925: 	movq	%rbx, %rdi
    00000928: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2344
    0000092d: 	movq	0x10(%rsp), %rsi
    00000932: 	movq	%rbx, %rcx
    00000935: 	leaq	_Z13fast_reverse2IPdEvT_S1_(%rip), %rdx
    0000093c: 	movq	%rbp, %rdi
    0000093f: 	callq	_Z12test_reverseIPdPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2367
    00000944: 	movq	0xd0(%rsp), %rdi
    0000094c: 	cmpq	0x8(%rsp), %rdi
    00000951: 	je	.Ltmp2710 # Offset: 2385
    00000953: 	movq	0xe0(%rsp), %rax
    0000095b: 	leaq	0x1(%rax), %rsi
    0000095f: 	callq	_ZdlPvm@PLT # Offset: 2399
.Ltmp2710:
    00000964: 	leaq	DATAat0x27331(%rip), %rdx
    0000096b: 	movq	%r13, %rsi
    0000096e: 	movq	%rbx, %rdi
    00000971: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2417
    00000976: 	movq	0x10(%rsp), %rsi
    0000097b: 	movq	%rbx, %rcx
    0000097e: 	leaq	_Z13fast_reverse3IPdEvT_S1_(%rip), %rdx
    00000985: 	movq	%rbp, %rdi
    00000988: 	callq	_Z12test_reverseIPdPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2440
    0000098d: 	movq	0xd0(%rsp), %rdi
    00000995: 	cmpq	0x8(%rsp), %rdi
    0000099a: 	je	.Ltmp2711 # Offset: 2458
    0000099c: 	movq	0xe0(%rsp), %rax
    000009a4: 	leaq	0x1(%rax), %rsi
    000009a8: 	callq	_ZdlPvm@PLT # Offset: 2472
.Ltmp2711:
    000009ad: 	leaq	DATAat0x2734e(%rip), %r12
    000009b4: 	movq	%r13, %rsi
    000009b7: 	movq	%rbx, %rdi
    000009ba: 	movq	%r12, %rdx
    000009bd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2493
    000009c2: 	leaq	_Z13fast_reverse4IPdEvT_S1_(%rip), %r14
    000009c9: 	movq	0x10(%rsp), %rsi
    000009ce: 	movq	%rbx, %rcx
    000009d1: 	movq	%rbp, %rdi
    000009d4: 	movq	%r14, %rdx
    000009d7: 	callq	_Z12test_reverseIPdPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2519
    000009dc: 	movq	0xd0(%rsp), %rdi
    000009e4: 	cmpq	0x8(%rsp), %rdi
    000009e9: 	je	.Ltmp2712 # Offset: 2537
    000009eb: 	movq	0xe0(%rsp), %rax
    000009f3: 	leaq	0x1(%rax), %rsi
    000009f7: 	callq	_ZdlPvm@PLT # Offset: 2551
.Ltmp2712:
    000009fc: 	leaq	0x90(%rsp), %rdi
    00000a04: 	leaq	DATAat0x2736b(%rip), %rdx
    00000a0b: 	movq	%r13, %rsi
    00000a0e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2574
    00000a13: 	movl	iterations(%rip), %edx
    00000a19: 	xorl	%r8d, %r8d
    00000a1c: 	xorl	%ecx, %ecx
    00000a1e: 	movl	$0x1f40, %esi
    00000a23: 	movq	0x90(%rsp), %rdi
    00000a2b: 	callq	_Z9summarizePKciiii # Offset: 2603
    00000a30: 	movl	0x1c(%rsp), %ecx
    00000a34: 	leaq	DATAat0x27268(%rip), %rdx
    00000a3b: 	movq	%r13, %rsi
    00000a3e: 	movq	%rbx, %rdi
    00000a41: 	testl	%ecx, %ecx
    00000a43: 	leal	0x3fff(%rcx), %eax
    00000a49: 	cmovnsl	%ecx, %eax
    00000a4c: 	sarl	$0xe, %eax
    00000a4f: 	movl	%eax, 0x30(%rsp)
    00000a53: 	movl	%eax, iterations(%rip)
    00000a59: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2649
    00000a5e: 	movq	%rbx, %rcx
    00000a61: 	leaq	_ZSt7reverseI20BidirectionalPointerIdEEvT_S2_(%rip), %rdx
    00000a68: 	movl	$0x800000, %esi
    00000a6d: 	movq	%rbp, %rdi
    00000a70: 	callq	_Z18test_reverse_sizesI20BidirectionalPointerIdEPFvS1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2672
    00000a75: 	movq	0xd0(%rsp), %rdi
    00000a7d: 	cmpq	0x8(%rsp), %rdi
    00000a82: 	je	.Ltmp2713 # Offset: 2690
    00000a84: 	movq	0xe0(%rsp), %rax
    00000a8c: 	leaq	0x1(%rax), %rsi
    00000a90: 	callq	_ZdlPvm@PLT # Offset: 2704
.Ltmp2713:
    00000a95: 	leaq	DATAat0x27284(%rip), %rdx
    00000a9c: 	movq	%r13, %rsi
    00000a9f: 	movq	%rbx, %rdi
    00000aa2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2722
    00000aa7: 	movq	%rbx, %rcx
    00000aaa: 	leaq	_Z17my_simple_reverseI20BidirectionalPointerIdEEvT_S2_(%rip), %rdx
    00000ab1: 	movl	$0x800000, %esi
    00000ab6: 	movq	%rbp, %rdi
    00000ab9: 	callq	_Z18test_reverse_sizesI20BidirectionalPointerIdEPFvS1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2745
    00000abe: 	movq	0xd0(%rsp), %rdi
    00000ac6: 	cmpq	0x8(%rsp), %rdi
    00000acb: 	je	.Ltmp2714 # Offset: 2763
    00000acd: 	movq	0xe0(%rsp), %rax
    00000ad5: 	leaq	0x1(%rax), %rsi
    00000ad9: 	callq	_ZdlPvm@PLT # Offset: 2777
.Ltmp2714:
    00000ade: 	leaq	DATAat0x272a2(%rip), %rdx
    00000ae5: 	movq	%r13, %rsi
    00000ae8: 	movq	%rbx, %rdi
    00000aeb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2795
    00000af0: 	movq	%rbx, %rcx
    00000af3: 	leaq	_Z15my_fast_reverseI20BidirectionalPointerIdEEvT_S2_(%rip), %rdx
    00000afa: 	movl	$0x800000, %esi
    00000aff: 	movq	%rbp, %rdi
    00000b02: 	callq	_Z18test_reverse_sizesI20BidirectionalPointerIdEPFvS1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2818
    00000b07: 	movq	0xd0(%rsp), %rdi
    00000b0f: 	cmpq	0x8(%rsp), %rdi
    00000b14: 	je	.Ltmp2715 # Offset: 2836
    00000b16: 	movq	0xe0(%rsp), %rax
    00000b1e: 	leaq	0x1(%rax), %rsi
    00000b22: 	callq	_ZdlPvm@PLT # Offset: 2850
.Ltmp2715:
    00000b27: 	leaq	DATAat0x272be(%rip), %rdx
    00000b2e: 	movq	%r13, %rsi
    00000b31: 	movq	%rbx, %rdi
    00000b34: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2868
    00000b39: 	movq	%rbx, %rcx
    00000b3c: 	leaq	_ZSt7reverseIPdEvT_S1_(%rip), %rdx
    00000b43: 	movl	$0x800000, %esi
    00000b48: 	movq	%rbp, %rdi
    00000b4b: 	callq	_Z18test_reverse_sizesIPdPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2891
    00000b50: 	movq	0xd0(%rsp), %rdi
    00000b58: 	cmpq	0x8(%rsp), %rdi
    00000b5d: 	je	.Ltmp2716 # Offset: 2909
    00000b5f: 	movq	0xe0(%rsp), %rax
    00000b67: 	leaq	0x1(%rax), %rsi
    00000b6b: 	callq	_ZdlPvm@PLT # Offset: 2923
.Ltmp2716:
    00000b70: 	leaq	DATAat0x272da(%rip), %rdx
    00000b77: 	movq	%r13, %rsi
    00000b7a: 	movq	%rbx, %rdi
    00000b7d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2941
    00000b82: 	movq	%rbx, %rcx
    00000b85: 	leaq	_Z17my_simple_reverseIPdEvT_S1_(%rip), %rdx
    00000b8c: 	movl	$0x800000, %esi
    00000b91: 	movq	%rbp, %rdi
    00000b94: 	callq	_Z18test_reverse_sizesIPdPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2964
    00000b99: 	movq	0xd0(%rsp), %rdi
    00000ba1: 	cmpq	0x8(%rsp), %rdi
    00000ba6: 	je	.Ltmp2717 # Offset: 2982
    00000ba8: 	movq	0xe0(%rsp), %rax
    00000bb0: 	leaq	0x1(%rax), %rsi
    00000bb4: 	callq	_ZdlPvm@PLT # Offset: 2996
.Ltmp2717:
    00000bb9: 	leaq	DATAat0x272f8(%rip), %rdx
    00000bc0: 	movq	%r13, %rsi
    00000bc3: 	movq	%rbx, %rdi
    00000bc6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3014
    00000bcb: 	movq	%rbx, %rcx
    00000bce: 	leaq	_Z15my_fast_reverseIPdEvT_S1_(%rip), %rdx
    00000bd5: 	movl	$0x800000, %esi
    00000bda: 	movq	%rbp, %rdi
    00000bdd: 	callq	_Z18test_reverse_sizesIPdPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3037
    00000be2: 	movq	0xd0(%rsp), %rdi
    00000bea: 	cmpq	0x8(%rsp), %rdi
    00000bef: 	je	.Ltmp2718 # Offset: 3055
    00000bf1: 	movq	0xe0(%rsp), %rax
    00000bf9: 	leaq	0x1(%rax), %rsi
    00000bfd: 	callq	_ZdlPvm@PLT # Offset: 3069
.Ltmp2718:
    00000c02: 	leaq	DATAat0x27314(%rip), %rdx
    00000c09: 	movq	%r13, %rsi
    00000c0c: 	movq	%rbx, %rdi
    00000c0f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3087
    00000c14: 	movq	%rbx, %rcx
    00000c17: 	leaq	_Z13fast_reverse2IPdEvT_S1_(%rip), %rdx
    00000c1e: 	movl	$0x800000, %esi
    00000c23: 	movq	%rbp, %rdi
    00000c26: 	callq	_Z18test_reverse_sizesIPdPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3110
    00000c2b: 	movq	0xd0(%rsp), %rdi
    00000c33: 	cmpq	0x8(%rsp), %rdi
    00000c38: 	je	.Ltmp2719 # Offset: 3128
    00000c3a: 	movq	0xe0(%rsp), %rax
    00000c42: 	leaq	0x1(%rax), %rsi
    00000c46: 	callq	_ZdlPvm@PLT # Offset: 3142
.Ltmp2719:
    00000c4b: 	leaq	DATAat0x27331(%rip), %rdx
    00000c52: 	movq	%r13, %rsi
    00000c55: 	movq	%rbx, %rdi
    00000c58: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3160
    00000c5d: 	movq	%rbx, %rcx
    00000c60: 	leaq	_Z13fast_reverse3IPdEvT_S1_(%rip), %rdx
    00000c67: 	movl	$0x800000, %esi
    00000c6c: 	movq	%rbp, %rdi
    00000c6f: 	callq	_Z18test_reverse_sizesIPdPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3183
    00000c74: 	movq	0xd0(%rsp), %rdi
    00000c7c: 	cmpq	0x8(%rsp), %rdi
    00000c81: 	je	.Ltmp2720 # Offset: 3201
    00000c83: 	movq	0xe0(%rsp), %rax
    00000c8b: 	leaq	0x1(%rax), %rsi
    00000c8f: 	callq	_ZdlPvm@PLT # Offset: 3215
.Ltmp2720:
    00000c94: 	movq	%r12, %rdx
    00000c97: 	movq	%r13, %rsi
    00000c9a: 	movq	%rbx, %rdi
    00000c9d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3229
    00000ca2: 	movq	%rbx, %rcx
    00000ca5: 	movq	%r14, %rdx
    00000ca8: 	movl	$0x800000, %esi
    00000cad: 	movq	%rbp, %rdi
    00000cb0: 	callq	_Z18test_reverse_sizesIPdPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3248
    00000cb5: 	movq	0xd0(%rsp), %rdi
    00000cbd: 	cmpq	0x8(%rsp), %rdi
    00000cc2: 	je	.Ltmp2721 # Offset: 3266
    00000cc4: 	movq	0xe0(%rsp), %rax
    00000ccc: 	leaq	0x1(%rax), %rsi
    00000cd0: 	callq	_ZdlPvm@PLT # Offset: 3280
.Ltmp2721:
    00000cd5: 	movl	0x1c(%rsp), %eax
    00000cd9: 	leaq	DATAat0x27388(%rip), %rdx
    00000ce0: 	movq	%r13, %rsi
    00000ce3: 	movq	%rbx, %rdi
    00000ce6: 	movl	%eax, iterations(%rip)
    00000cec: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3308
    00000cf1: 	leaq	0xfa00(%r15), %r12
    00000cf8: 	movq	%r15, %rax
    00000cfb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2722:
    00000d00: 	movapd	DATAat0x275d0(%rip), %xmm6
    00000d08: 	addq	$0x10, %rax
    00000d0c: 	movups	%xmm6, -0x10(%rax)
    00000d10: 	cmpq	%rax, %r12
    00000d13: 	jne	.Ltmp2722 # Offset: 3347
    00000d15: 	callq	clock@PLT # Offset: 3349
    00000d1a: 	movl	iterations(%rip), %edi
    00000d20: 	xorl	%esi, %esi
    00000d22: 	leaq	0xf9f0(%rbp), %rcx
    00000d29: 	movq	%rax, start_time(%rip)
    00000d30: 	testl	%edi, %edi
    00000d32: 	jle	.Ltmp2723 # Offset: 3378
    00000d34: 	nopl	(%rax) # Size: 4
.Ltmp2725:
    00000d38: 	movq	%rcx, %rdx
    00000d3b: 	movq	%r15, %rax
    00000d3e: 	nop # Size: 2
.Ltmp2724:
    00000d40: 	movupd	(%rdx), %xmm0
    00000d44: 	addq	$0x10, %rax
    00000d48: 	subq	$0x10, %rdx
    00000d4c: 	shufpd	$0x1, %xmm0, %xmm0
    00000d51: 	movups	%xmm0, -0x10(%rax)
    00000d55: 	cmpq	%rax, %r12
    00000d58: 	jne	.Ltmp2724 # Offset: 3416
    00000d5a: 	addl	$0x1, %esi
    00000d5d: 	cmpl	%edi, %esi
    00000d5f: 	jne	.Ltmp2725 # Offset: 3423
.Ltmp2723:
    00000d61: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000d68: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000d6f: 	subq	$0x20, %rax
    00000d73: 	cmpq	%rax, %rdi
    00000d76: 	je	.Ltmp2726 # Offset: 3446
    00000d7c: 	leaq	0x10(%rdi), %rax
    00000d80: 	movq	0xd8(%rsp), %rdx
    00000d88: 	movq	%rax, (%rdi)
    00000d8b: 	movq	0xd0(%rsp), %rsi
    00000d93: 	addq	%rsi, %rdx
    00000d96: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 3478
    00000d9b: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000da2: 	addq	$0x20, %rax
    00000da6: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp2795:
    00000dad: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000db4: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000dbb: 	je	.Ltmp2727 # Offset: 3515
.Ltmp2794:
    00000dc1: 	movq	-0x20(%rax), %r14
    00000dc5: 	callq	clock@PLT # Offset: 3525
    00000dca: 	pxor	%xmm0, %xmm0
    00000dce: 	movq	%rax, end_time(%rip)
    00000dd5: 	movq	%r14, %rdi
    00000dd8: 	subq	start_time(%rip), %rax
    00000ddf: 	cvtsi2sd	%rax, %xmm0
    00000de4: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000dec: 	callq	_Z13record_resultdPKc # Offset: 3564
    00000df1: 	leaq	0xf9f8(%r15), %r14
    00000df8: 	movq	%r15, %rax
    00000dfb: 	jmp	.Ltmp2728 # Offset: 3579
    00000dfd: 	nopl	(%rax) # Size: 3
.Ltmp2730:
    00000e00: 	addq	$0x8, %rax
    00000e04: 	movsd	(%rax), %xmm0
    00000e08: 	comisd	-0x8(%rax), %xmm0
    00000e0d: 	ja	.Ltmp2729 # Offset: 3597
.Ltmp2728:
    00000e13: 	cmpq	%r14, %rax
    00000e16: 	jne	.Ltmp2730 # Offset: 3606
.Ltmp2790:
    00000e18: 	movq	0xd0(%rsp), %rdi
    00000e20: 	cmpq	0x8(%rsp), %rdi
    00000e25: 	je	.Ltmp2731 # Offset: 3621
    00000e27: 	movq	0xe0(%rsp), %rax
    00000e2f: 	leaq	0x1(%rax), %rsi
    00000e33: 	callq	_ZdlPvm@PLT # Offset: 3635
.Ltmp2731:
    00000e38: 	leaq	DATAat0x273b0(%rip), %rdx
    00000e3f: 	movq	%r13, %rsi
    00000e42: 	movq	%rbx, %rdi
    00000e45: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3653
    00000e4a: 	movq	%r15, %rax
    00000e4d: 	nopl	(%rax) # Size: 3
.Ltmp2732:
    00000e50: 	movapd	DATAat0x275d0(%rip), %xmm7
    00000e58: 	addq	$0x10, %rax
    00000e5c: 	movups	%xmm7, -0x10(%rax)
    00000e60: 	cmpq	%rax, %r12
    00000e63: 	jne	.Ltmp2732 # Offset: 3683
    00000e65: 	callq	clock@PLT # Offset: 3685
    00000e6a: 	movl	iterations(%rip), %edi
    00000e70: 	xorl	%esi, %esi
    00000e72: 	leaq	0xf9f0(%rbp), %rcx
    00000e79: 	movq	%rax, start_time(%rip)
    00000e80: 	testl	%edi, %edi
    00000e82: 	jle	.Ltmp2733 # Offset: 3714
    00000e84: 	nopl	(%rax) # Size: 4
.Ltmp2735:
    00000e88: 	movq	%rcx, %rdx
    00000e8b: 	movq	%r15, %rax
    00000e8e: 	nop # Size: 2
.Ltmp2734:
    00000e90: 	movupd	(%rdx), %xmm0
    00000e94: 	addq	$0x10, %rax
    00000e98: 	subq	$0x10, %rdx
    00000e9c: 	shufpd	$0x1, %xmm0, %xmm0
    00000ea1: 	movups	%xmm0, -0x10(%rax)
    00000ea5: 	cmpq	%rax, %r12
    00000ea8: 	jne	.Ltmp2734 # Offset: 3752
    00000eaa: 	addl	$0x1, %esi
    00000ead: 	cmpl	%esi, %edi
    00000eaf: 	jne	.Ltmp2735 # Offset: 3759
.Ltmp2733:
    00000eb1: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000eb8: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000ebf: 	subq	$0x20, %rax
    00000ec3: 	cmpq	%rax, %rdi
    00000ec6: 	je	.Ltmp2736 # Offset: 3782
    00000ecc: 	leaq	0x10(%rdi), %rax
    00000ed0: 	movq	0xd8(%rsp), %rdx
    00000ed8: 	movq	%rax, (%rdi)
    00000edb: 	movq	0xd0(%rsp), %rsi
    00000ee3: 	addq	%rsi, %rdx
    00000ee6: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 3814
    00000eeb: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000ef2: 	addq	$0x20, %rax
    00000ef6: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp2802:
    00000efd: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000f04: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000f0b: 	je	.Ltmp2737 # Offset: 3851
.Ltmp2793:
    00000f11: 	movq	-0x20(%rax), %rdi
    00000f15: 	movq	%rdi, 0x20(%rsp)
    00000f1a: 	callq	clock@PLT # Offset: 3866
    00000f1f: 	movq	0x20(%rsp), %rdi
    00000f24: 	pxor	%xmm0, %xmm0
    00000f28: 	movq	%rax, end_time(%rip)
    00000f2f: 	subq	start_time(%rip), %rax
    00000f36: 	cvtsi2sd	%rax, %xmm0
    00000f3b: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000f43: 	callq	_Z13record_resultdPKc # Offset: 3907
    00000f48: 	movq	%r15, %rax
    00000f4b: 	jmp	.Ltmp2738 # Offset: 3915
    00000f4d: 	nopl	(%rax) # Size: 3
.Ltmp2740:
    00000f50: 	addq	$0x8, %rax
    00000f54: 	movsd	(%rax), %xmm0
    00000f58: 	comisd	-0x8(%rax), %xmm0
    00000f5d: 	ja	.Ltmp2739 # Offset: 3933
.Ltmp2738:
    00000f63: 	cmpq	%r14, %rax
    00000f66: 	jne	.Ltmp2740 # Offset: 3942
.Ltmp2788:
    00000f68: 	movq	0xd0(%rsp), %rdi
    00000f70: 	cmpq	0x8(%rsp), %rdi
    00000f75: 	je	.Ltmp2741 # Offset: 3957
    00000f77: 	movq	0xe0(%rsp), %rax
    00000f7f: 	leaq	0x1(%rax), %rsi
    00000f83: 	callq	_ZdlPvm@PLT # Offset: 3971
.Ltmp2741:
    00000f88: 	leaq	DATAat0x273d8(%rip), %rdx
    00000f8f: 	movq	%r13, %rsi
    00000f92: 	movq	%rbx, %rdi
    00000f95: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3989
    00000f9a: 	movq	%r15, %rax
    00000f9d: 	nopl	(%rax) # Size: 3
.Ltmp2742:
    00000fa0: 	movapd	DATAat0x275d0(%rip), %xmm6
    00000fa8: 	addq	$0x10, %rax
    00000fac: 	movups	%xmm6, -0x10(%rax)
    00000fb0: 	cmpq	%r12, %rax
    00000fb3: 	jne	.Ltmp2742 # Offset: 4019
    00000fb5: 	callq	clock@PLT # Offset: 4021
    00000fba: 	movl	iterations(%rip), %edi
    00000fc0: 	xorl	%esi, %esi
    00000fc2: 	leaq	0xf9f0(%rbp), %rcx
    00000fc9: 	movq	%rax, start_time(%rip)
    00000fd0: 	testl	%edi, %edi
    00000fd2: 	jle	.Ltmp2743 # Offset: 4050
    00000fd4: 	nopl	(%rax) # Size: 4
.Ltmp2745:
    00000fd8: 	movq	%rcx, %rdx
    00000fdb: 	movq	%r15, %rax
    00000fde: 	nop # Size: 2
.Ltmp2744:
    00000fe0: 	movupd	(%rdx), %xmm0
    00000fe4: 	addq	$0x10, %rax
    00000fe8: 	subq	$0x10, %rdx
    00000fec: 	shufpd	$0x1, %xmm0, %xmm0
    00000ff1: 	movups	%xmm0, -0x10(%rax)
    00000ff5: 	cmpq	%rax, %r12
    00000ff8: 	jne	.Ltmp2744 # Offset: 4088
    00000ffa: 	addl	$0x1, %esi
    00000ffd: 	cmpl	%edi, %esi
    00000fff: 	jne	.Ltmp2745 # Offset: 4095
.Ltmp2743:
    00001001: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001008: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    0000100f: 	subq	$0x20, %rax
    00001013: 	cmpq	%rax, %rdi
    00001016: 	je	.Ltmp2746 # Offset: 4118
    0000101c: 	leaq	0x10(%rdi), %rax
    00001020: 	movq	0xd8(%rsp), %rdx
    00001028: 	movq	%rax, (%rdi)
    0000102b: 	movq	0xd0(%rsp), %rsi
    00001033: 	addq	%rsi, %rdx
    00001036: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 4150
    0000103b: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001042: 	addq	$0x20, %rax
    00001046: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp2800:
    0000104d: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001054: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000105b: 	je	.Ltmp2747 # Offset: 4187
.Ltmp2799:
    00001061: 	movq	-0x20(%rax), %rdi
    00001065: 	movq	%rdi, 0x20(%rsp)
    0000106a: 	callq	clock@PLT # Offset: 4202
    0000106f: 	movq	0x20(%rsp), %rdi
    00001074: 	pxor	%xmm0, %xmm0
    00001078: 	movq	%rax, end_time(%rip)
    0000107f: 	subq	start_time(%rip), %rax
    00001086: 	cvtsi2sd	%rax, %xmm0
    0000108b: 	divsd	DATAat0x276b0(%rip), %xmm0
    00001093: 	callq	_Z13record_resultdPKc # Offset: 4243
    00001098: 	movq	%r15, %rax
    0000109b: 	jmp	.Ltmp2748 # Offset: 4251
    0000109d: 	nopl	(%rax) # Size: 3
.Ltmp2750:
    000010a0: 	addq	$0x8, %rax
    000010a4: 	movsd	(%rax), %xmm0
    000010a8: 	comisd	-0x8(%rax), %xmm0
    000010ad: 	ja	.Ltmp2749 # Offset: 4269
.Ltmp2748:
    000010b3: 	cmpq	%r14, %rax
    000010b6: 	jne	.Ltmp2750 # Offset: 4278
.Ltmp2789:
    000010b8: 	movq	0xd0(%rsp), %rdi
    000010c0: 	cmpq	0x8(%rsp), %rdi
    000010c5: 	je	.Ltmp2751 # Offset: 4293
    000010c7: 	movq	0xe0(%rsp), %rax
    000010cf: 	leaq	0x1(%rax), %rsi
    000010d3: 	callq	_ZdlPvm@PLT # Offset: 4307
.Ltmp2751:
    000010d8: 	leaq	DATAat0x27400(%rip), %rdx
    000010df: 	movq	%r13, %rsi
    000010e2: 	movq	%rbx, %rdi
    000010e5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4325
    000010ea: 	movq	%r15, %rax
    000010ed: 	nopl	(%rax) # Size: 3
.Ltmp2752:
    000010f0: 	movapd	DATAat0x275d0(%rip), %xmm7
    000010f8: 	addq	$0x10, %rax
    000010fc: 	movups	%xmm7, -0x10(%rax)
    00001100: 	cmpq	%r12, %rax
    00001103: 	jne	.Ltmp2752 # Offset: 4355
    00001105: 	callq	clock@PLT # Offset: 4357
    0000110a: 	movl	iterations(%rip), %edi
    00001110: 	xorl	%esi, %esi
    00001112: 	leaq	0xf9f0(%rbp), %rcx
    00001119: 	movq	%rax, start_time(%rip)
    00001120: 	testl	%edi, %edi
    00001122: 	jle	.Ltmp2753 # Offset: 4386
    00001124: 	nopl	(%rax) # Size: 4
.Ltmp2755:
    00001128: 	movq	%rcx, %rdx
    0000112b: 	movq	%r15, %rax
    0000112e: 	nop # Size: 2
.Ltmp2754:
    00001130: 	movupd	(%rdx), %xmm0
    00001134: 	addq	$0x10, %rax
    00001138: 	subq	$0x10, %rdx
    0000113c: 	shufpd	$0x1, %xmm0, %xmm0
    00001141: 	movups	%xmm0, -0x10(%rax)
    00001145: 	cmpq	%r12, %rax
    00001148: 	jne	.Ltmp2754 # Offset: 4424
    0000114a: 	addl	$0x1, %esi
    0000114d: 	cmpl	%edi, %esi
    0000114f: 	jne	.Ltmp2755 # Offset: 4431
.Ltmp2753:
    00001151: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001158: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    0000115f: 	subq	$0x20, %rax
    00001163: 	cmpq	%rax, %rdi
    00001166: 	je	.Ltmp2756 # Offset: 4454
    0000116c: 	leaq	0x10(%rdi), %rax
    00001170: 	movq	0xd8(%rsp), %rdx
    00001178: 	movq	%rax, (%rdi)
    0000117b: 	movq	0xd0(%rsp), %rsi
    00001183: 	addq	%rsi, %rdx
    00001186: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 4486
    0000118b: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001192: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001199: 	addq	$0x20, %rax
    0000119d: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000011a4: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000011ab: 	je	.Ltmp2757 # Offset: 4523
.Ltmp2801:
    000011b1: 	movq	-0x20(%rax), %rdi
    000011b5: 	movq	%rdi, 0x20(%rsp)
    000011ba: 	callq	clock@PLT # Offset: 4538
    000011bf: 	movq	0x20(%rsp), %rdi
    000011c4: 	pxor	%xmm0, %xmm0
    000011c8: 	movq	%rax, end_time(%rip)
    000011cf: 	subq	start_time(%rip), %rax
    000011d6: 	cvtsi2sd	%rax, %xmm0
    000011db: 	divsd	DATAat0x276b0(%rip), %xmm0
    000011e3: 	callq	_Z13record_resultdPKc # Offset: 4579
    000011e8: 	movq	%r15, %rax
    000011eb: 	jmp	.Ltmp2758 # Offset: 4587
    000011ed: 	nopl	(%rax) # Size: 3
.Ltmp2760:
    000011f0: 	addq	$0x8, %rax
    000011f4: 	movsd	(%rax), %xmm0
    000011f8: 	comisd	-0x8(%rax), %xmm0
    000011fd: 	ja	.Ltmp2759 # Offset: 4605
.Ltmp2758:
    00001203: 	cmpq	%r14, %rax
    00001206: 	jne	.Ltmp2760 # Offset: 4614
.Ltmp2787:
    00001208: 	movq	0xd0(%rsp), %rdi
    00001210: 	cmpq	0x8(%rsp), %rdi
    00001215: 	je	.Ltmp2761 # Offset: 4629
    00001217: 	movq	0xe0(%rsp), %rax
    0000121f: 	leaq	0x1(%rax), %rsi
    00001223: 	callq	_ZdlPvm@PLT # Offset: 4643
.Ltmp2761:
    00001228: 	leaq	DATAat0x27428(%rip), %rdx
    0000122f: 	movq	%r13, %rsi
    00001232: 	movq	%rbx, %rdi
    00001235: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4661
    0000123a: 	movq	0x10(%rsp), %rsi
    0000123f: 	movq	%rbx, %r9
    00001242: 	movq	%r12, %rcx
    00001245: 	movq	%r15, %rdx
    00001248: 	leaq	_Z22my_simple_reverse_copyIPdS0_EvT_S1_T0_(%rip), %r8
    0000124f: 	movq	%rbp, %rdi
    00001252: 	callq	_Z17test_reverse_copyIPdPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4690
    00001257: 	movq	0xd0(%rsp), %rdi
    0000125f: 	cmpq	0x8(%rsp), %rdi
    00001264: 	je	.Ltmp2762 # Offset: 4708
    00001266: 	movq	0xe0(%rsp), %rax
    0000126e: 	leaq	0x1(%rax), %rsi
    00001272: 	callq	_ZdlPvm@PLT # Offset: 4722
.Ltmp2762:
    00001277: 	leaq	DATAat0x27450(%rip), %rdx
    0000127e: 	movq	%r13, %rsi
    00001281: 	movq	%rbx, %rdi
    00001284: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4740
    00001289: 	movq	0x10(%rsp), %rsi
    0000128e: 	movq	%rbx, %r9
    00001291: 	movq	%r12, %rcx
    00001294: 	movq	%r15, %rdx
    00001297: 	leaq	_Z20my_fast_reverse_copyIPdS0_EvT_S1_T0_(%rip), %r8
    0000129e: 	movq	%rbp, %rdi
    000012a1: 	callq	_Z17test_reverse_copyIPdPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4769
    000012a6: 	movq	0xd0(%rsp), %rdi
    000012ae: 	cmpq	0x8(%rsp), %rdi
    000012b3: 	je	.Ltmp2763 # Offset: 4787
    000012b5: 	movq	0xe0(%rsp), %rax
    000012bd: 	leaq	0x1(%rax), %rsi
    000012c1: 	callq	_ZdlPvm@PLT # Offset: 4801
.Ltmp2763:
    000012c6: 	leaq	DATAat0x27478(%rip), %rdx
    000012cd: 	movq	%r13, %rsi
    000012d0: 	movq	%rbx, %rdi
    000012d3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4819
    000012d8: 	movq	0x10(%rsp), %rsi
    000012dd: 	movq	%rbx, %r9
    000012e0: 	movq	%r12, %rcx
    000012e3: 	movq	%r15, %rdx
    000012e6: 	leaq	_Z18fast_reverse_copy2IPdS0_EvT_S1_T0_(%rip), %r8
    000012ed: 	movq	%rbp, %rdi
    000012f0: 	callq	_Z17test_reverse_copyIPdPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4848
    000012f5: 	movq	0xd0(%rsp), %rdi
    000012fd: 	cmpq	0x8(%rsp), %rdi
    00001302: 	je	.Ltmp2764 # Offset: 4866
    00001304: 	movq	0xe0(%rsp), %rax
    0000130c: 	leaq	0x1(%rax), %rsi
    00001310: 	callq	_ZdlPvm@PLT # Offset: 4880
.Ltmp2764:
    00001315: 	leaq	DATAat0x274a0(%rip), %rdx
    0000131c: 	movq	%r13, %rsi
    0000131f: 	movq	%rbx, %rdi
    00001322: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4898
    00001327: 	movq	0x10(%rsp), %rsi
    0000132c: 	movq	%rbx, %r9
    0000132f: 	movq	%r12, %rcx
    00001332: 	movq	%r15, %rdx
    00001335: 	leaq	_Z18fast_reverse_copy3IPdS0_EvT_S1_T0_(%rip), %r8
    0000133c: 	movq	%rbp, %rdi
    0000133f: 	callq	_Z17test_reverse_copyIPdPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4927
    00001344: 	movq	0xd0(%rsp), %rdi
    0000134c: 	cmpq	0x8(%rsp), %rdi
    00001351: 	je	.Ltmp2765 # Offset: 4945
    00001353: 	movq	0xe0(%rsp), %rax
    0000135b: 	leaq	0x1(%rax), %rsi
    0000135f: 	callq	_ZdlPvm@PLT # Offset: 4959
.Ltmp2765:
    00001364: 	leaq	DATAat0x274c8(%rip), %r14
    0000136b: 	movq	%r13, %rsi
    0000136e: 	movq	%rbx, %rdi
    00001371: 	movq	%r14, %rdx
    00001374: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4980
    00001379: 	movq	0x10(%rsp), %rsi
    0000137e: 	movq	%rbx, %r9
    00001381: 	movq	%r12, %rcx
    00001384: 	movq	%r15, %rdx
    00001387: 	leaq	_Z18fast_reverse_copy4IPdS0_EvT_S1_T0_(%rip), %r8
    0000138e: 	movq	%rbp, %rdi
    00001391: 	callq	_Z17test_reverse_copyIPdPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5009
    00001396: 	movq	0xd0(%rsp), %rdi
    0000139e: 	cmpq	0x8(%rsp), %rdi
    000013a3: 	je	.Ltmp2766 # Offset: 5027
    000013a5: 	movq	0xe0(%rsp), %rax
    000013ad: 	leaq	0x1(%rax), %rsi
    000013b1: 	callq	_ZdlPvm@PLT # Offset: 5041
.Ltmp2766:
    000013b6: 	leaq	0xb0(%rsp), %rdi
    000013be: 	leaq	DATAat0x27374(%rip), %rdx
    000013c5: 	movq	%r13, %rsi
    000013c8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5064
    000013cd: 	movl	iterations(%rip), %edx
    000013d3: 	xorl	%r8d, %r8d
    000013d6: 	xorl	%ecx, %ecx
    000013d8: 	movl	$0x1f40, %esi
    000013dd: 	movq	0xb0(%rsp), %rdi
    000013e5: 	callq	_Z9summarizePKciiii # Offset: 5093
    000013ea: 	movl	0x30(%rsp), %eax
    000013ee: 	leaq	DATAat0x27388(%rip), %rdx
    000013f5: 	movq	%r13, %rsi
    000013f8: 	movq	%rbx, %rdi
    000013fb: 	movl	%eax, iterations(%rip)
    00001401: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5121
    00001406: 	movq	%rbx, %r8
    00001409: 	leaq	_ZSt12reverse_copyI20BidirectionalPointerIdES1_ET0_T_S3_S2_(%rip), %rcx
    00001410: 	movq	%r15, %rsi
    00001413: 	movq	%rbp, %rdi
    00001416: 	movl	$0x800000, %edx
    0000141b: 	callq	_Z23test_reverse_copy_sizesI20BidirectionalPointerIdEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5147
    00001420: 	movq	0xd0(%rsp), %rdi
    00001428: 	cmpq	0x8(%rsp), %rdi
    0000142d: 	je	.Ltmp2767 # Offset: 5165
    0000142f: 	movq	0xe0(%rsp), %rax
    00001437: 	leaq	0x1(%rax), %rsi
    0000143b: 	callq	_ZdlPvm@PLT # Offset: 5179
.Ltmp2767:
    00001440: 	leaq	DATAat0x273b0(%rip), %rdx
    00001447: 	movq	%r13, %rsi
    0000144a: 	movq	%rbx, %rdi
    0000144d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5197
    00001452: 	movq	%rbx, %r8
    00001455: 	leaq	_Z22my_simple_reverse_copyI20BidirectionalPointerIdES1_EvT_S2_T0_(%rip), %rcx
    0000145c: 	movq	%r15, %rsi
    0000145f: 	movq	%rbp, %rdi
    00001462: 	movl	$0x800000, %edx
    00001467: 	callq	_Z23test_reverse_copy_sizesI20BidirectionalPointerIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5223
    0000146c: 	movq	0xd0(%rsp), %rdi
    00001474: 	cmpq	0x8(%rsp), %rdi
    00001479: 	je	.Ltmp2768 # Offset: 5241
    0000147b: 	movq	0xe0(%rsp), %rax
    00001483: 	leaq	0x1(%rax), %rsi
    00001487: 	callq	_ZdlPvm@PLT # Offset: 5255
.Ltmp2768:
    0000148c: 	leaq	DATAat0x273d8(%rip), %rdx
    00001493: 	movq	%r13, %rsi
    00001496: 	movq	%rbx, %rdi
    00001499: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5273
    0000149e: 	movq	%rbx, %r8
    000014a1: 	leaq	_Z20my_fast_reverse_copyI20BidirectionalPointerIdES1_EvT_S2_T0_(%rip), %rcx
    000014a8: 	movq	%r15, %rsi
    000014ab: 	movq	%rbp, %rdi
    000014ae: 	movl	$0x800000, %edx
    000014b3: 	callq	_Z23test_reverse_copy_sizesI20BidirectionalPointerIdEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5299
    000014b8: 	movq	0xd0(%rsp), %rdi
    000014c0: 	cmpq	0x8(%rsp), %rdi
    000014c5: 	je	.Ltmp2769 # Offset: 5317
    000014c7: 	movq	0xe0(%rsp), %rax
    000014cf: 	leaq	0x1(%rax), %rsi
    000014d3: 	callq	_ZdlPvm@PLT # Offset: 5331
.Ltmp2769:
    000014d8: 	leaq	DATAat0x27400(%rip), %rdx
    000014df: 	movq	%r13, %rsi
    000014e2: 	movq	%rbx, %rdi
    000014e5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5349
    000014ea: 	movq	%rbx, %r8
    000014ed: 	leaq	_ZSt12reverse_copyIPdS0_ET0_T_S2_S1_(%rip), %rcx
    000014f4: 	movq	%r15, %rsi
    000014f7: 	movq	%rbp, %rdi
    000014fa: 	movl	$0x800000, %edx
    000014ff: 	callq	_Z23test_reverse_copy_sizesIPdPFS0_S0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5375
    00001504: 	movq	0xd0(%rsp), %rdi
    0000150c: 	cmpq	0x8(%rsp), %rdi
    00001511: 	je	.Ltmp2770 # Offset: 5393
    00001513: 	movq	0xe0(%rsp), %rax
    0000151b: 	leaq	0x1(%rax), %rsi
    0000151f: 	callq	_ZdlPvm@PLT # Offset: 5407
.Ltmp2770:
    00001524: 	leaq	DATAat0x27428(%rip), %rdx
    0000152b: 	movq	%r13, %rsi
    0000152e: 	movq	%rbx, %rdi
    00001531: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5425
    00001536: 	movq	%rbx, %r8
    00001539: 	leaq	_Z22my_simple_reverse_copyIPdS0_EvT_S1_T0_(%rip), %rcx
    00001540: 	movq	%r15, %rsi
    00001543: 	movq	%rbp, %rdi
    00001546: 	movl	$0x800000, %edx
    0000154b: 	callq	_Z23test_reverse_copy_sizesIPdPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5451
    00001550: 	movq	0xd0(%rsp), %rdi
    00001558: 	cmpq	0x8(%rsp), %rdi
    0000155d: 	je	.Ltmp2771 # Offset: 5469
    0000155f: 	movq	0xe0(%rsp), %rax
    00001567: 	leaq	0x1(%rax), %rsi
    0000156b: 	callq	_ZdlPvm@PLT # Offset: 5483
.Ltmp2771:
    00001570: 	leaq	DATAat0x27450(%rip), %rdx
    00001577: 	movq	%r13, %rsi
    0000157a: 	movq	%rbx, %rdi
    0000157d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5501
    00001582: 	movq	%rbx, %r8
    00001585: 	leaq	_Z20my_fast_reverse_copyIPdS0_EvT_S1_T0_(%rip), %rcx
    0000158c: 	movq	%r15, %rsi
    0000158f: 	movq	%rbp, %rdi
    00001592: 	movl	$0x800000, %edx
    00001597: 	callq	_Z23test_reverse_copy_sizesIPdPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5527
    0000159c: 	movq	0xd0(%rsp), %rdi
    000015a4: 	cmpq	0x8(%rsp), %rdi
    000015a9: 	je	.Ltmp2772 # Offset: 5545
    000015ab: 	movq	0xe0(%rsp), %rax
    000015b3: 	leaq	0x1(%rax), %rsi
    000015b7: 	callq	_ZdlPvm@PLT # Offset: 5559
.Ltmp2772:
    000015bc: 	leaq	DATAat0x27478(%rip), %rdx
    000015c3: 	movq	%r13, %rsi
    000015c6: 	movq	%rbx, %rdi
    000015c9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5577
    000015ce: 	movq	%rbx, %r8
    000015d1: 	leaq	_Z18fast_reverse_copy2IPdS0_EvT_S1_T0_(%rip), %rcx
    000015d8: 	movq	%r15, %rsi
    000015db: 	movq	%rbp, %rdi
    000015de: 	movl	$0x800000, %edx
    000015e3: 	callq	_Z23test_reverse_copy_sizesIPdPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5603
    000015e8: 	movq	0xd0(%rsp), %rdi
    000015f0: 	cmpq	0x8(%rsp), %rdi
    000015f5: 	je	.Ltmp2773 # Offset: 5621
    000015f7: 	movq	0xe0(%rsp), %rax
    000015ff: 	leaq	0x1(%rax), %rsi
    00001603: 	callq	_ZdlPvm@PLT # Offset: 5635
.Ltmp2773:
    00001608: 	leaq	DATAat0x274a0(%rip), %rdx
    0000160f: 	movq	%r13, %rsi
    00001612: 	movq	%rbx, %rdi
    00001615: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5653
    0000161a: 	movq	%rbx, %r8
    0000161d: 	leaq	_Z18fast_reverse_copy3IPdS0_EvT_S1_T0_(%rip), %rcx
    00001624: 	movq	%r15, %rsi
    00001627: 	movq	%rbp, %rdi
    0000162a: 	movl	$0x800000, %edx
    0000162f: 	callq	_Z23test_reverse_copy_sizesIPdPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5679
    00001634: 	movq	0xd0(%rsp), %rdi
    0000163c: 	cmpq	0x8(%rsp), %rdi
    00001641: 	je	.Ltmp2774 # Offset: 5697
    00001643: 	movq	0xe0(%rsp), %rax
    0000164b: 	leaq	0x1(%rax), %rsi
    0000164f: 	callq	_ZdlPvm@PLT # Offset: 5711
.Ltmp2774:
    00001654: 	movq	%r14, %rdx
    00001657: 	movq	%r13, %rsi
    0000165a: 	movq	%rbx, %rdi
    0000165d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5725
    00001662: 	movq	%rbx, %r8
    00001665: 	leaq	_Z18fast_reverse_copy4IPdS0_EvT_S1_T0_(%rip), %rcx
    0000166c: 	movq	%r15, %rsi
    0000166f: 	movq	%rbp, %rdi
    00001672: 	movl	$0x800000, %edx
    00001677: 	callq	_Z23test_reverse_copy_sizesIPdPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5751
    0000167c: 	movq	0xd0(%rsp), %rdi
    00001684: 	cmpq	0x8(%rsp), %rdi
    00001689: 	je	.Ltmp2775 # Offset: 5769
    0000168b: 	movq	0xe0(%rsp), %rax
    00001693: 	leaq	0x1(%rax), %rsi
    00001697: 	callq	_ZdlPvm@PLT # Offset: 5783
.Ltmp2775:
    0000169c: 	movl	0x1c(%rsp), %eax
    000016a0: 	movq	0xb0(%rsp), %rdi
    000016a8: 	movl	%eax, iterations(%rip)
    000016ae: 	leaq	0xc0(%rsp), %rax
    000016b6: 	cmpq	%rax, %rdi
    000016b9: 	je	.Ltmp2776 # Offset: 5817
    000016bb: 	movq	0xc0(%rsp), %rax
    000016c3: 	leaq	0x1(%rax), %rsi
    000016c7: 	callq	_ZdlPvm@PLT # Offset: 5831
.Ltmp2776:
    000016cc: 	movq	0x90(%rsp), %rdi
    000016d4: 	leaq	0xa0(%rsp), %rax
    000016dc: 	cmpq	%rax, %rdi
    000016df: 	je	.Ltmp2777 # Offset: 5855
    000016e1: 	movq	0xa0(%rsp), %rax
    000016e9: 	leaq	0x1(%rax), %rsi
    000016ed: 	callq	_ZdlPvm@PLT # Offset: 5869
.Ltmp2777:
    000016f2: 	movl	$0x8, %esi
    000016f7: 	movq	%r15, %rdi
    000016fa: 	callq	_ZdlPvm@PLT # Offset: 5882
    000016ff: 	movq	%rbp, %rdi
    00001702: 	movl	$0x8, %esi
    00001707: 	callq	_ZdlPvm@PLT # Offset: 5895
    0000170c: 	movq	0x70(%rsp), %rdi
    00001711: 	cmpq	0x38(%rsp), %rdi
    00001716: 	je	.Ltmp2778 # Offset: 5910
    00001718: 	movq	0x80(%rsp), %rax
    00001720: 	leaq	0x1(%rax), %rsi
    00001724: 	callq	_ZdlPvm@PLT # Offset: 5924
.Ltmp2778:
    00001729: 	movq	0xf8(%rsp), %rax
    00001731: 	subq	%fs:0x28, %rax
    0000173a: 	jne	.Ltmp2779 # Offset: 5946
    00001740: 	addq	$0x108, %rsp
    00001747: 	popq	%rbx
    00001748: 	popq	%rbp
    00001749: 	popq	%r12
    0000174b: 	popq	%r13
    0000174d: 	popq	%r14
    0000174f: 	popq	%r15
    00001751: 	retq # Offset: 5969
    00001752: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2780:
    00001758: 	addq	$0x20, %rbp
.Ltmp2644:
    0000175c: 	cmpq	%rbp, 0x8(%rsp)
    00001761: 	je	.Ltmp2648 # Offset: 5985
.Ltmp2781:
    00001767: 	movq	(%rbp), %rdi
    0000176b: 	leaq	0x10(%rbp), %rax
    0000176f: 	cmpq	%rax, %rdi
    00001772: 	je	.Ltmp2780 # Offset: 6002
    00001774: 	movq	0x10(%rbp), %rax
    00001778: 	addq	$0x20, %rbp
    0000177c: 	leaq	0x1(%rax), %rsi
    00001780: 	callq	_ZdlPvm@PLT # Offset: 6016
    00001785: 	cmpq	%rbp, 0x8(%rsp)
    0000178a: 	jne	.Ltmp2781 # Offset: 6026
    0000178c: 	jmp	.Ltmp2648 # Offset: 6028
    00001791: 	nopl	(%rax) # Size: 7
.Ltmp2640:
    00001798: 	addq	$0x20, %rbp
    0000179c: 	cmpq	%rbx, %rbp
    0000179f: 	jne	.Ltmp2641 # Offset: 6047
    000017a5: 	addq	$0x8, %r13
    000017a9: 	cmpq	%r13, %r15
    000017ac: 	ja	.Ltmp2642 # Offset: 6060
    000017b2: 	jmp	.Ltmp2782 # Offset: 6066
.Ltmp2672:
    000017b7: 	leaq	0x68(%rsp), %rsi
    000017bc: 	xorl	%edx, %edx
    000017be: 	movq	%r14, %rdi
    000017c1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6081
    000017c6: 	movq	%rax, (%r14)
    000017c9: 	movq	%rax, %rdi
    000017cc: 	movq	0x68(%rsp), %rax
    000017d1: 	movq	%rax, 0x10(%r14)
.Ltmp2807:
    000017d5: 	movq	0x8(%rsp), %rsi
    000017da: 	movq	%r12, %rdx
    000017dd: 	callq	memcpy@PLT # Offset: 6109
    000017e2: 	movq	0x68(%rsp), %r12
    000017e7: 	movq	(%r14), %rdi
    000017ea: 	jmp	.Ltmp2783 # Offset: 6122
.Ltmp2662:
    000017ef: 	movq	%r13, %rdx
    000017f2: 	addq	$0x8, %r13
    000017f6: 	movsd	%xmm1, (%rdx)
    000017fa: 	cmpq	%r13, %r12
    000017fd: 	jne	.Ltmp2658 # Offset: 6141
    00001803: 	jmp	.Ltmp2784 # Offset: 6147
.Ltmp2690:
    00001808: 	movq	0xd0(%rsp), %rdx
    00001810: 	leaq	DATAat0x271d0(%rip), %rsi
    00001817: 	movl	$0x1, %edi
    0000181c: 	xorl	%eax, %eax
    0000181e: 	callq	__printf_chk@PLT # Offset: 6174
    00001823: 	jmp	.Ltmp2785 # Offset: 6179
.Ltmp2676:
    00001828: 	movq	0xd0(%rsp), %rdx
    00001830: 	leaq	DATAat0x271d0(%rip), %rsi
    00001837: 	movl	$0x1, %edi
    0000183c: 	xorl	%eax, %eax
    0000183e: 	callq	__printf_chk@PLT # Offset: 6206
    00001843: 	jmp	.Ltmp2786 # Offset: 6211
.Ltmp2759:
    00001848: 	movq	0xd0(%rsp), %rdx
    00001850: 	leaq	DATAat0x271d0(%rip), %rsi
    00001857: 	movl	$0x1, %edi
    0000185c: 	xorl	%eax, %eax
    0000185e: 	callq	__printf_chk@PLT # Offset: 6238
    00001863: 	jmp	.Ltmp2787 # Offset: 6243
.Ltmp2739:
    00001868: 	movq	0xd0(%rsp), %rdx
    00001870: 	leaq	DATAat0x271d0(%rip), %rsi
    00001877: 	movl	$0x1, %edi
    0000187c: 	xorl	%eax, %eax
    0000187e: 	callq	__printf_chk@PLT # Offset: 6270
    00001883: 	jmp	.Ltmp2788 # Offset: 6275
.Ltmp2749:
    00001888: 	movq	0xd0(%rsp), %rdx
    00001890: 	leaq	DATAat0x271d0(%rip), %rsi
    00001897: 	movl	$0x1, %edi
    0000189c: 	xorl	%eax, %eax
    0000189e: 	callq	__printf_chk@PLT # Offset: 6302
    000018a3: 	jmp	.Ltmp2789 # Offset: 6307
.Ltmp2729:
    000018a8: 	movq	0xd0(%rsp), %rdx
    000018b0: 	leaq	DATAat0x271d0(%rip), %rsi
    000018b7: 	movl	$0x1, %edi
    000018bc: 	xorl	%eax, %eax
    000018be: 	callq	__printf_chk@PLT # Offset: 6334
    000018c3: 	jmp	.Ltmp2790 # Offset: 6339
.Ltmp2704:
    000018c8: 	movq	0xd0(%rsp), %rdx
    000018d0: 	leaq	DATAat0x271d0(%rip), %rsi
    000018d7: 	movl	$0x1, %edi
    000018dc: 	xorl	%eax, %eax
    000018de: 	callq	__printf_chk@PLT # Offset: 6366
    000018e3: 	jmp	.Ltmp2791 # Offset: 6371
.Ltmp2697:
    000018e8: 	movq	%rbx, %rsi
    000018eb: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000018f2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6386
    000018f7: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000018fe: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001905: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000190c: 	jne	.Ltmp2792 # Offset: 6412
.Ltmp2702:
    00001912: 	movq	-0x8(%rdx), %rax
    00001916: 	addq	$0x200, %rax
    0000191c: 	jmp	.Ltmp2792 # Offset: 6428
.Ltmp2737:
    00001921: 	movq	-0x8(%rdx), %rax
    00001925: 	addq	$0x200, %rax
    0000192b: 	jmp	.Ltmp2793 # Offset: 6443
.Ltmp2727:
    00001930: 	movq	-0x8(%rdx), %rax
    00001934: 	addq	$0x200, %rax
    0000193a: 	jmp	.Ltmp2794 # Offset: 6458
.Ltmp2726:
    0000193f: 	movq	%rbx, %rsi
    00001942: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001949: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6473
    0000194e: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001955: 	jmp	.Ltmp2795 # Offset: 6485
.Ltmp2683:
    0000195a: 	movq	%rbx, %rsi
    0000195d: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001964: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6500
    00001969: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001970: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001977: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000197e: 	jne	.Ltmp2796 # Offset: 6526
.Ltmp2688:
    00001984: 	movq	-0x8(%rdx), %rax
    00001988: 	addq	$0x200, %rax
    0000198e: 	jmp	.Ltmp2796 # Offset: 6542
.Ltmp2674:
    00001993: 	movq	-0x8(%rdx), %rax
    00001997: 	addq	$0x200, %rax
    0000199d: 	jmp	.Ltmp2797 # Offset: 6557
.Ltmp2669:
    000019a2: 	movq	%rbx, %rsi
    000019a5: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000019ac: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6572
    000019b1: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000019b8: 	jmp	.Ltmp2798 # Offset: 6584
.Ltmp2747:
    000019bd: 	movq	-0x8(%rdx), %rax
    000019c1: 	addq	$0x200, %rax
    000019c7: 	jmp	.Ltmp2799 # Offset: 6599
.Ltmp2746:
    000019cc: 	movq	%rbx, %rsi
    000019cf: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000019d6: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6614
    000019db: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000019e2: 	jmp	.Ltmp2800 # Offset: 6626
.Ltmp2756:
    000019e7: 	movq	%rbx, %rsi
    000019ea: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000019f1: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6641
    000019f6: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000019fd: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001a04: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001a0b: 	jne	.Ltmp2801 # Offset: 6667
.Ltmp2757:
    00001a11: 	movq	-0x8(%rdx), %rax
    00001a15: 	addq	$0x200, %rax
    00001a1b: 	jmp	.Ltmp2801 # Offset: 6683
.Ltmp2736:
    00001a20: 	movq	%rbx, %rsi
    00001a23: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001a2a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6698
    00001a2f: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001a36: 	jmp	.Ltmp2802 # Offset: 6710
.Ltmp2687:
    00001a3b: 	cmpq	$0x0, 0x30(%rsp)
    00001a41: 	je	.Ltmp2803 # Offset: 6721
    00001a47: 	jmp	.Ltmp2804 # Offset: 6727
    00001a49: 	nopl	(%rax) # Size: 7
.Ltmp2701:
    00001a50: 	cmpq	$0x0, 0x30(%rsp)
    00001a56: 	je	.Ltmp2805 # Offset: 6742
    00001a5c: 	jmp	.Ltmp2806 # Offset: 6748
    00001a5e: 	nop # Size: 2
.Ltmp2686:
    00001a60: 	leaq	0x68(%rsp), %rsi
    00001a65: 	xorl	%edx, %edx
    00001a67: 	movq	%r14, %rdi
    00001a6a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6762
    00001a6f: 	movq	%rax, (%r14)
    00001a72: 	movq	%rax, %rdi
    00001a75: 	movq	0x68(%rsp), %rax
    00001a7a: 	movq	%rax, 0x10(%r14)
.Ltmp2804:
    00001a7e: 	movq	0x30(%rsp), %rdx
    00001a83: 	movq	0x40(%rsp), %rsi
    00001a88: 	callq	memcpy@PLT # Offset: 6792
    00001a8d: 	movq	0x68(%rsp), %rax
    00001a92: 	movq	(%r14), %rdi
    00001a95: 	movq	%rax, 0x30(%rsp)
    00001a9a: 	jmp	.Ltmp2803 # Offset: 6810
.Ltmp2700:
    00001a9f: 	leaq	0x68(%rsp), %rsi
    00001aa4: 	xorl	%edx, %edx
    00001aa6: 	movq	%r14, %rdi
    00001aa9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6825
    00001aae: 	movq	%rax, (%r14)
    00001ab1: 	movq	%rax, %rdi
    00001ab4: 	movq	0x68(%rsp), %rax
    00001ab9: 	movq	%rax, 0x10(%r14)
.Ltmp2806:
    00001abd: 	movq	0x30(%rsp), %rdx
    00001ac2: 	movq	0x20(%rsp), %rsi
    00001ac7: 	callq	memcpy@PLT # Offset: 6855
    00001acc: 	movq	0x68(%rsp), %rax
    00001ad1: 	movq	(%r14), %rdi
    00001ad4: 	movq	%rax, 0x30(%rsp)
    00001ad9: 	jmp	.Ltmp2805 # Offset: 6873
.Ltmp2673:
    00001ade: 	testq	%r12, %r12
    00001ae1: 	je	.Ltmp2783 # Offset: 6881
    00001ae7: 	jmp	.Ltmp2807 # Offset: 6887
    00001aec: 	nopl	(%rax) # Size: 4
.Ltmp2660:
    00001af0: 	movq	%r14, %rdx
    00001af3: 	jmp	.Ltmp2808 # Offset: 6899
.Ltmp2671:
    00001af8: 	leaq	DATAat0x27008(%rip), %rdi
    00001aff: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6911
.Ltmp2685:
    00001b04: 	leaq	DATAat0x27008(%rip), %rdi
    00001b0b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6923
.Ltmp2699:
    00001b10: 	leaq	DATAat0x27008(%rip), %rdi
    00001b17: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6935
.Ltmp2779:
    00001b1c: 	callq	__stack_chk_fail@PLT # Offset: 6940
    00001b21: 	endbr64
.Ltmp2819:
    00001b25: 	movq	%rax, %rbx
    00001b28: 	jmp	.Ltmp2809 # Offset: 6952
    00001b2a: 	endbr64
.Ltmp2811:
    00001b2e: 	movq	%rax, %rbx
    00001b31: 	jmp	.Ltmp2810 # Offset: 6961
    00001b33: 	endbr64
    00001b37: 	jmp	.Ltmp2811 # Offset: 6967
    00001b39: 	endbr64
    00001b3d: 	jmp	.Ltmp2811 # Offset: 6973
    00001b3f: 	endbr64
    00001b43: 	jmp	.Ltmp2811 # Offset: 6979
    00001b45: 	endbr64
    00001b49: 	jmp	.Ltmp2811 # Offset: 6985
    00001b4b: 	endbr64
    00001b4f: 	jmp	.Ltmp2811 # Offset: 6991
    00001b51: 	endbr64
    00001b55: 	jmp	.Ltmp2811 # Offset: 6997
    00001b57: 	endbr64
    00001b5b: 	jmp	.Ltmp2811 # Offset: 7003
.Ltmp2809:
    00001b5d: 	movq	0xd0(%rsp), %rdi
    00001b65: 	cmpq	0x8(%rsp), %rdi
    00001b6a: 	jne	.Ltmp2812 # Offset: 7018
.Ltmp2815:
    00001b70: 	movl	$0x8, %esi
    00001b75: 	movq	%r15, %rdi
    00001b78: 	callq	_ZdlPvm@PLT # Offset: 7032
.Ltmp2820:
    00001b7d: 	movq	%rbp, %rdi
    00001b80: 	movl	$0x8, %esi
    00001b85: 	movq	%rbx, %rbp
    00001b88: 	callq	_ZdlPvm@PLT # Offset: 7048
.Ltmp2821:
    00001b8d: 	movq	0x70(%rsp), %rdi
    00001b92: 	cmpq	0x38(%rsp), %rdi
    00001b97: 	je	.Ltmp2813 # Offset: 7063
    00001b99: 	movq	0x80(%rsp), %rax
    00001ba1: 	leaq	0x1(%rax), %rsi
    00001ba5: 	callq	_ZdlPvm@PLT # Offset: 7077
.Ltmp2813:
    00001baa: 	movq	%rbp, %rdi
    00001bad: 	callq	_Unwind_Resume@PLT # Offset: 7085
.Ltmp2810:
    00001bb2: 	movq	0xd0(%rsp), %rdi
    00001bba: 	cmpq	0x8(%rsp), %rdi
    00001bbf: 	je	.Ltmp2814 # Offset: 7103
    00001bc1: 	movq	0xe0(%rsp), %rax
    00001bc9: 	leaq	0x1(%rax), %rsi
    00001bcd: 	callq	_ZdlPvm@PLT # Offset: 7117
.Ltmp2814:
    00001bd2: 	movq	0x90(%rsp), %rdi
    00001bda: 	leaq	0xa0(%rsp), %rax
    00001be2: 	cmpq	%rax, %rdi
    00001be5: 	je	.Ltmp2815 # Offset: 7141
    00001be7: 	movq	0xa0(%rsp), %rax
    00001bef: 	leaq	0x1(%rax), %rsi
    00001bf3: 	callq	_ZdlPvm@PLT # Offset: 7155
    00001bf8: 	jmp	.Ltmp2815 # Offset: 7160
.Ltmp2822:
    00001bfd: 	movq	0xd0(%rsp), %rdi
    00001c05: 	leaq	0xe0(%rsp), %rax
    00001c0d: 	cmpq	%rax, %rdi
    00001c10: 	je	.Ltmp2815 # Offset: 7184
.Ltmp2812:
    00001c16: 	movq	0xe0(%rsp), %rax
    00001c1e: 	leaq	0x1(%rax), %rsi
    00001c22: 	callq	_ZdlPvm@PLT # Offset: 7202
    00001c27: 	jmp	.Ltmp2815 # Offset: 7207
    00001c2c: 	endbr64
    00001c30: 	jmp	.Ltmp2811 # Offset: 7216
    00001c35: 	endbr64
    00001c39: 	jmp	.Ltmp2811 # Offset: 7225
    00001c3e: 	endbr64
    00001c42: 	jmp	.Ltmp2811 # Offset: 7234
    00001c47: 	endbr64
    00001c4b: 	jmp	.Ltmp2811 # Offset: 7243
    00001c50: 	endbr64
.Ltmp2817:
    00001c54: 	movq	%rax, %rbx
    00001c57: 	jmp	.Ltmp2816 # Offset: 7255
    00001c59: 	endbr64
    00001c5d: 	jmp	.Ltmp2817 # Offset: 7261
    00001c5f: 	endbr64
    00001c63: 	jmp	.Ltmp2817 # Offset: 7267
    00001c65: 	endbr64
    00001c69: 	jmp	.Ltmp2817 # Offset: 7273
.Ltmp2816:
    00001c6b: 	movq	0xd0(%rsp), %rdi
    00001c73: 	cmpq	0x8(%rsp), %rdi
    00001c78: 	je	.Ltmp2818 # Offset: 7288
    00001c7a: 	movq	0xe0(%rsp), %rax
    00001c82: 	leaq	0x1(%rax), %rsi
    00001c86: 	callq	_ZdlPvm@PLT # Offset: 7302
.Ltmp2818:
    00001c8b: 	movq	0xb0(%rsp), %rdi
    00001c93: 	leaq	0xc0(%rsp), %rax
    00001c9b: 	cmpq	%rax, %rdi
    00001c9e: 	je	.Ltmp2814 # Offset: 7326
    00001ca4: 	movq	0xc0(%rsp), %rax
    00001cac: 	leaq	0x1(%rax), %rsi
    00001cb0: 	callq	_ZdlPvm@PLT # Offset: 7344
    00001cb5: 	jmp	.Ltmp2814 # Offset: 7349
    00001cba: 	endbr64
    00001cbe: 	jmp	.Ltmp2819 # Offset: 7358
    00001cc3: 	endbr64
    00001cc7: 	jmp	.Ltmp2817 # Offset: 7367
    00001cc9: 	endbr64
    00001ccd: 	jmp	.Ltmp2811 # Offset: 7373
    00001cd2: 	endbr64
    00001cd6: 	movq	%rax, %rbx
    00001cd9: 	jmp	.Ltmp2818 # Offset: 7385
    00001cdb: 	endbr64
    00001cdf: 	jmp	.Ltmp2817 # Offset: 7391
    00001ce4: 	endbr64
    00001ce8: 	jmp	.Ltmp2817 # Offset: 7400
    00001ced: 	endbr64
    00001cf1: 	jmp	.Ltmp2817 # Offset: 7409
    00001cf6: 	endbr64
    00001cfa: 	jmp	.Ltmp2817 # Offset: 7418
    00001cff: 	endbr64
    00001d03: 	jmp	.Ltmp2811 # Offset: 7427
    00001d08: 	endbr64
    00001d0c: 	jmp	.Ltmp2811 # Offset: 7436
    00001d11: 	endbr64
    00001d15: 	jmp	.Ltmp2811 # Offset: 7445
    00001d1a: 	endbr64
    00001d1e: 	jmp	.Ltmp2811 # Offset: 7454
    00001d23: 	endbr64
    00001d27: 	jmp	.Ltmp2819 # Offset: 7463
    00001d2c: 	endbr64
    00001d30: 	jmp	.Ltmp2819 # Offset: 7472
    00001d35: 	endbr64
    00001d39: 	jmp	.Ltmp2819 # Offset: 7481
    00001d3e: 	endbr64
    00001d42: 	jmp	.Ltmp2819 # Offset: 7490
    00001d47: 	endbr64
    00001d4b: 	jmp	.Ltmp2819 # Offset: 7499
    00001d50: 	endbr64
    00001d54: 	jmp	.Ltmp2819 # Offset: 7508
    00001d59: 	endbr64
    00001d5d: 	movq	%rax, %rbx
    00001d60: 	jmp	.Ltmp2814 # Offset: 7520
    00001d65: 	endbr64
    00001d69: 	jmp	.Ltmp2811 # Offset: 7529
    00001d6e: 	endbr64
    00001d72: 	movq	%rax, %rbx
    00001d75: 	jmp	.Ltmp2815 # Offset: 7541
    00001d7a: 	endbr64
    00001d7e: 	movq	%rax, %rbx
    00001d81: 	jmp	.Ltmp2820 # Offset: 7553
    00001d86: 	endbr64
    00001d8a: 	movq	%rax, %rbp
    00001d8d: 	jmp	.Ltmp2821 # Offset: 7565
    00001d92: 	endbr64
    00001d96: 	movq	%rax, %rbx
    00001d99: 	jmp	.Ltmp2822 # Offset: 7577
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIdEvv"

Binary Function "_Z11TestOneTypeImEvv" after disassembly {
  Number      : 246
  State       : disassembled
  Address     : 0x22750
  Size        : 0x1e79
  MaxSize     : 0x1e80
  Offset      : 0x22750
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeImEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0245:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x108, %rsp
    00000015: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm1
    0000001d: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm3
    00000025: 	movq	%fs:0x28, %rax
    0000002e: 	movq	%rax, 0xf8(%rsp)
    00000036: 	movl	iterations(%rip), %eax
    0000003c: 	movq	"_ZL7gLabels/1"+56(%rip), %r14
    00000043: 	movq	$0x8, 0x78(%rsp)
    0000004c: 	movaps	%xmm1, 0x20(%rsp)
    00000051: 	movq	%xmm1, %rbp
    00000056: 	movhlps	%xmm3, %xmm1
    00000059: 	movq	%xmm1, %rbx
    0000005e: 	movb	$0x0, 0x88(%rsp)
    00000066: 	leaq	0x8(%rbx), %r12
    0000006a: 	movaps	%xmm3, 0x40(%rsp)
    0000006f: 	movq	%xmm1, 0x50(%rsp)
    00000075: 	movq	%xmm3, 0x10(%rsp)
    0000007b: 	movl	%eax, 0x1c(%rsp)
    0000007f: 	leaq	0x80(%rsp), %rax
    00000087: 	movq	%rax, 0x38(%rsp)
    0000008c: 	movq	%rax, 0x70(%rsp)
    00000091: 	movabsq	$0x745f3436746e6975, %rax
    0000009b: 	movq	%rax, 0x80(%rsp)
    000000a3: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000aa: 	movq	%rax, 0x8(%rsp)
    000000af: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    000000b6: 	movq	%rax, 0x30(%rsp)
    000000bb: 	cmpq	%r12, %rax
    000000be: 	jbe	.Ltmp2823 # Offset: 190
    000000c0: 	movq	%rbp, 0x58(%rsp)
    000000c5: 	movq	%r12, %r13
    000000c8: 	movq	%rax, %r15
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2826:
    000000d0: 	movq	(%r13), %rbp
    000000d4: 	leaq	0x200(%rbp), %rbx
    000000db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2825:
    000000e0: 	movq	(%rbp), %rdi
    000000e4: 	leaq	0x10(%rbp), %rdx
    000000e8: 	cmpq	%rdx, %rdi
    000000eb: 	je	.Ltmp2824 # Offset: 235
    000000f1: 	movq	0x10(%rbp), %rax
    000000f5: 	addq	$0x20, %rbp
    000000f9: 	leaq	0x1(%rax), %rsi
    000000fd: 	callq	_ZdlPvm@PLT # Offset: 253
    00000102: 	cmpq	%rbp, %rbx
    00000105: 	jne	.Ltmp2825 # Offset: 261
    00000107: 	addq	$0x8, %r13
    0000010b: 	cmpq	%r13, %r15
    0000010e: 	ja	.Ltmp2826 # Offset: 270
.Ltmp2966:
    00000110: 	movq	0x58(%rsp), %rbp
.Ltmp2823:
    00000115: 	movq	0x50(%rsp), %rbx
    0000011a: 	cmpq	%rbx, 0x30(%rsp)
    0000011f: 	je	.Ltmp2827 # Offset: 287
.Ltmp2831:
    00000125: 	cmpq	0x10(%rsp), %rbp
    0000012a: 	je	.Ltmp2828 # Offset: 298
    0000012c: 	movq	(%rbp), %rdi
    00000130: 	leaq	0x10(%rbp), %rax
    00000134: 	cmpq	%rax, %rdi
    00000137: 	je	.Ltmp2829 # Offset: 311
.Ltmp2830:
    00000139: 	movq	0x10(%rbp), %rax
    0000013d: 	addq	$0x20, %rbp
    00000141: 	leaq	0x1(%rax), %rsi
    00000145: 	callq	_ZdlPvm@PLT # Offset: 325
    0000014a: 	cmpq	%rbp, 0x10(%rsp)
    0000014f: 	je	.Ltmp2828 # Offset: 335
    00000151: 	movq	(%rbp), %rdi
    00000155: 	leaq	0x10(%rbp), %rax
    00000159: 	cmpq	%rax, %rdi
    0000015c: 	jne	.Ltmp2830 # Offset: 348
.Ltmp2829:
    0000015e: 	addq	$0x20, %rbp
    00000162: 	jmp	.Ltmp2831 # Offset: 354
    00000164: 	nopl	(%rax) # Size: 4
.Ltmp2833:
    00000168: 	movq	(%r14), %rdi
    0000016b: 	leaq	0x10(%r14), %rax
    0000016f: 	cmpq	%rax, %rdi
    00000172: 	je	.Ltmp2832 # Offset: 370
    00000174: 	movq	0x10(%r14), %rax
    00000178: 	leaq	0x1(%rax), %rsi
    0000017c: 	callq	_ZdlPvm@PLT # Offset: 380
.Ltmp2832:
    00000181: 	addq	$0x20, %r14
.Ltmp2828:
    00000185: 	cmpq	%r14, 0x8(%rsp)
    0000018a: 	jne	.Ltmp2833 # Offset: 394
.Ltmp2987:
    0000018c: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    00000193: 	leaq	0x8(%rax), %rbx
    00000197: 	cmpq	%r12, %rbx
    0000019a: 	jbe	.Ltmp2834 # Offset: 410
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp2835:
    000001a0: 	movq	(%r12), %rdi
    000001a4: 	movl	$0x200, %esi
    000001a9: 	addq	$0x8, %r12
    000001ad: 	callq	_ZdlPvm@PLT # Offset: 429
    000001b2: 	cmpq	%r12, %rbx
    000001b5: 	ja	.Ltmp2835 # Offset: 437
.Ltmp2834:
    000001b7: 	movdqa	0x20(%rsp), %xmm3
    000001bd: 	movdqa	0x40(%rsp), %xmm2
    000001c3: 	movl	$0x4000000, %edi
    000001c8: 	movaps	%xmm3, "_ZL7gLabels/1"+48(%rip)
    000001cf: 	movaps	%xmm2, "_ZL7gLabels/1"+64(%rip)
    000001d6: 	callq	_Znam@PLT # Offset: 470
    000001db: 	movl	$0x4000000, %edi
    000001e0: 	movq	%rax, %rbp
    000001e3: 	callq	_Znam@PLT # Offset: 483
    000001e8: 	movq	%rax, %r15
    000001eb: 	movslq	init_value(%rip), %rax
    000001f2: 	leaq	0x4000000(%rbp), %r13
    000001f9: 	pcmpeqd	%xmm2, %xmm2
    000001fd: 	leaq	0x800000(%rax), %rbx
    00000204: 	addq	$0x7fffff, %rax
    0000020a: 	movq	%rax, %xmm3
    0000020f: 	movq	%rbx, %xmm1
    00000214: 	movq	%rbp, %rax
    00000217: 	punpcklqdq	%xmm3, %xmm1
    0000021b: 	movdqa	DATAat0x27690(%rip), %xmm3
    00000223: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2836:
    00000228: 	movdqa	%xmm1, %xmm0
    0000022c: 	addq	$0x10, %rax
    00000230: 	paddq	%xmm3, %xmm1
    00000234: 	paddq	%xmm2, %xmm0
    00000238: 	movups	%xmm0, -0x10(%rax)
    0000023c: 	cmpq	%rax, %r13
    0000023f: 	jne	.Ltmp2836 # Offset: 575
    00000241: 	movl	$0x2e, %edx
    00000246: 	movq	%r13, %rsi
    00000249: 	movq	%rbp, %rdi
    0000024c: 	callq	"_ZSt16__introsort_loopIPmlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1" # Offset: 588
    00000251: 	leaq	0x8(%rbp), %rax
    00000255: 	leaq	0x80(%rbp), %r12
    0000025c: 	movq	%rax, 0x20(%rsp)
    00000261: 	movq	%rax, %r14
    00000264: 	jmp	.Ltmp2837 # Offset: 612
    00000266: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2840:
    00000270: 	cmpq	%r14, %rbp
    00000273: 	je	.Ltmp2838 # Offset: 627
    00000275: 	movq	%r14, %rdx
    00000278: 	movl	$0x8, %eax
    0000027d: 	movq	%rbp, %rsi
    00000280: 	subq	%rbp, %rdx
    00000283: 	leaq	(%rbp,%rax), %rdi
    00000288: 	callq	memmove@PLT # Offset: 648
.Ltmp2838:
    0000028d: 	addq	$0x8, %r14
    00000291: 	movq	%rbx, (%rbp)
    00000295: 	cmpq	%r14, %r12
    00000298: 	je	.Ltmp2839 # Offset: 664
.Ltmp2837:
    0000029a: 	movq	(%r14), %rbx
    0000029d: 	cmpq	(%rbp), %rbx
    000002a1: 	jb	.Ltmp2840 # Offset: 673
    000002a3: 	movq	-0x8(%r14), %rdx
    000002a7: 	leaq	-0x8(%r14), %rax
    000002ab: 	cmpq	%rdx, %rbx
    000002ae: 	jae	.Ltmp2841 # Offset: 686
    000002b4: 	nopl	(%rax) # Size: 4
.Ltmp2842:
    000002b8: 	movq	%rdx, 0x8(%rax)
    000002bc: 	movq	%rax, %rcx
    000002bf: 	movq	-0x8(%rax), %rdx
    000002c3: 	subq	$0x8, %rax
    000002c7: 	cmpq	%rdx, %rbx
    000002ca: 	jb	.Ltmp2842 # Offset: 714
.Ltmp2998:
    000002cc: 	addq	$0x8, %r14
    000002d0: 	movq	%rbx, (%rcx)
    000002d3: 	cmpq	%r14, %r12
    000002d6: 	jne	.Ltmp2837 # Offset: 726
    000002d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2839:
    000002e0: 	movq	(%r12), %rcx
    000002e4: 	movq	-0x8(%r12), %rdx
    000002e9: 	leaq	-0x8(%r12), %rax
    000002ee: 	cmpq	%rdx, %rcx
    000002f1: 	jae	.Ltmp2843 # Offset: 753
    000002f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2844:
    00000300: 	movq	%rdx, 0x8(%rax)
    00000304: 	movq	%rax, %rsi
    00000307: 	movq	-0x8(%rax), %rdx
    0000030b: 	subq	$0x8, %rax
    0000030f: 	cmpq	%rdx, %rcx
    00000312: 	jb	.Ltmp2844 # Offset: 786
    00000314: 	addq	$0x8, %r12
    00000318: 	movq	%rcx, (%rsi)
    0000031b: 	cmpq	%r12, %r13
    0000031e: 	jne	.Ltmp2839 # Offset: 798
.Ltmp2968:
    00000320: 	leaq	0xd0(%rsp), %rbx
    00000328: 	leaq	0x70(%rsp), %r13
    0000032d: 	leaq	0xfa00(%rbp), %rax
    00000334: 	leaq	DATAat0x27268(%rip), %rdx
    0000033b: 	movq	%r13, %rsi
    0000033e: 	movq	%rbx, %rdi
    00000341: 	movq	%rax, 0x10(%rsp)
    00000346: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 838
    0000034b: 	callq	clock@PLT # Offset: 843
    00000350: 	movl	iterations(%rip), %r10d
    00000357: 	xorl	%r9d, %r9d
    0000035a: 	leaq	0xf9f8(%rbp), %rdi
    00000361: 	movq	%rax, start_time(%rip)
    00000368: 	leaq	0x7d00(%rbp), %rcx
    0000036f: 	testl	%r10d, %r10d
    00000372: 	jle	.Ltmp2845 # Offset: 882
    00000374: 	nopl	(%rax) # Size: 4
.Ltmp2849:
    00000378: 	movq	%rbp, %rdx
    0000037b: 	movq	%rdi, %rax
    0000037e: 	jmp	.Ltmp2846 # Offset: 894
.Ltmp2848:
    00000380: 	subq	$0x8, %rax
    00000384: 	addq	$0x8, %rdx
    00000388: 	cmpq	%rdx, %rax
    0000038b: 	je	.Ltmp2847 # Offset: 907
.Ltmp2846:
    0000038d: 	movq	(%rdx), %rsi
    00000390: 	movq	(%rax), %r8
    00000393: 	movq	%r8, (%rdx)
    00000396: 	movq	%rsi, (%rax)
    00000399: 	cmpq	%rcx, %rax
    0000039c: 	jne	.Ltmp2848 # Offset: 924
.Ltmp2847:
    0000039e: 	addl	$0x1, %r9d
    000003a2: 	cmpl	%r10d, %r9d
    000003a5: 	jne	.Ltmp2849 # Offset: 933
.Ltmp2845:
    000003a7: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000003ae: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    000003b5: 	subq	$0x20, %rax
    000003b9: 	cmpq	%rax, %r14
    000003bc: 	je	.Ltmp2850 # Offset: 956
    000003c2: 	leaq	0x10(%r14), %rdi
    000003c6: 	movq	0xd8(%rsp), %r12
    000003ce: 	movq	%rdi, (%r14)
    000003d1: 	movq	0xd0(%rsp), %rax
    000003d9: 	movq	%rax, %rcx
    000003dc: 	movq	%rax, 0x8(%rsp)
    000003e1: 	addq	%r12, %rcx
    000003e4: 	je	.Ltmp2851 # Offset: 996
    000003e6: 	testq	%rax, %rax
    000003e9: 	je	.Ltmp2852 # Offset: 1001
.Ltmp2851:
    000003ef: 	movq	%r12, 0x68(%rsp)
    000003f4: 	cmpq	$0xf, %r12
    000003f8: 	ja	.Ltmp2853 # Offset: 1016
    000003fe: 	cmpq	$0x1, %r12
    00000402: 	jne	.Ltmp2854 # Offset: 1026
    00000408: 	movq	0x8(%rsp), %rax
    0000040d: 	movzbl	(%rax), %eax
    00000410: 	movb	%al, 0x10(%r14)
.Ltmp2967:
    00000414: 	movq	%r12, 0x8(%r14)
    00000418: 	movb	$0x0, (%rdi,%r12)
    0000041d: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000424: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000042b: 	addq	$0x20, %rax
    0000042f: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000436: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    0000043d: 	je	.Ltmp2855 # Offset: 1085
.Ltmp2980:
    00000443: 	movq	-0x20(%rax), %r12
    00000447: 	callq	clock@PLT # Offset: 1095
    0000044c: 	pxor	%xmm0, %xmm0
    00000450: 	movq	%rax, end_time(%rip)
    00000457: 	movq	%r12, %rdi
    0000045a: 	subq	start_time(%rip), %rax
    00000461: 	cvtsi2sd	%rax, %xmm0
    00000466: 	divsd	DATAat0x276b0(%rip), %xmm0
    0000046e: 	callq	_Z13record_resultdPKc # Offset: 1134
    00000473: 	movq	0x20(%rsp), %rax
    00000478: 	movq	0x10(%rsp), %rcx
    0000047d: 	movq	%rax, %r12
    00000480: 	jmp	.Ltmp2856 # Offset: 1152
    00000482: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2858:
    00000488: 	movq	(%rax), %rdx
    0000048b: 	addq	$0x8, %rax
    0000048f: 	cmpq	-0x10(%rax), %rdx
    00000493: 	jb	.Ltmp2857 # Offset: 1171
.Ltmp2856:
    00000499: 	cmpq	%rax, %rcx
    0000049c: 	jne	.Ltmp2858 # Offset: 1180
.Ltmp2971:
    0000049e: 	movq	0xd0(%rsp), %rdi
    000004a6: 	leaq	0xe0(%rsp), %rax
    000004ae: 	movq	%rax, 0x8(%rsp)
    000004b3: 	cmpq	%rax, %rdi
    000004b6: 	je	.Ltmp2859 # Offset: 1206
    000004b8: 	movq	0xe0(%rsp), %rax
    000004c0: 	leaq	0x1(%rax), %rsi
    000004c4: 	callq	_ZdlPvm@PLT # Offset: 1220
.Ltmp2859:
    000004c9: 	leaq	DATAat0x27284(%rip), %rdx
    000004d0: 	movq	%r13, %rsi
    000004d3: 	movq	%rbx, %rdi
    000004d6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1238
    000004db: 	callq	clock@PLT # Offset: 1243
    000004e0: 	movl	iterations(%rip), %r10d
    000004e7: 	xorl	%r9d, %r9d
    000004ea: 	leaq	0xf9f8(%rbp), %rdi
    000004f1: 	movq	%rax, start_time(%rip)
    000004f8: 	leaq	0x7d00(%rbp), %rcx
    000004ff: 	testl	%r10d, %r10d
    00000502: 	jle	.Ltmp2860 # Offset: 1282
    00000504: 	nopl	(%rax) # Size: 4
.Ltmp2863:
    00000508: 	movq	%rdi, %rdx
    0000050b: 	movq	%rbp, %rax
    0000050e: 	nop # Size: 2
.Ltmp2862:
    00000510: 	cmpq	%rax, %rdx
    00000513: 	je	.Ltmp2861 # Offset: 1299
    00000515: 	movq	(%rdx), %r8
    00000518: 	movq	(%rax), %rsi
    0000051b: 	addq	$0x8, %rax
    0000051f: 	subq	$0x8, %rdx
    00000523: 	movq	%r8, -0x8(%rax)
    00000527: 	movq	%rsi, 0x8(%rdx)
    0000052b: 	cmpq	%rcx, %rax
    0000052e: 	jne	.Ltmp2862 # Offset: 1326
.Ltmp2861:
    00000530: 	addl	$0x1, %r9d
    00000534: 	cmpl	%r10d, %r9d
    00000537: 	jne	.Ltmp2863 # Offset: 1335
.Ltmp2860:
    00000539: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000540: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    00000547: 	subq	$0x20, %rax
    0000054b: 	cmpq	%rax, %r14
    0000054e: 	je	.Ltmp2864 # Offset: 1358
    00000554: 	leaq	0x10(%r14), %rdi
    00000558: 	movq	0xd8(%rsp), %rsi
    00000560: 	movq	%rdi, (%r14)
    00000563: 	movq	0xd0(%rsp), %rcx
    0000056b: 	movq	%rsi, 0x30(%rsp)
    00000570: 	movq	%rcx, %rax
    00000573: 	movq	%rcx, 0x40(%rsp)
    00000578: 	addq	%rsi, %rax
    0000057b: 	je	.Ltmp2865 # Offset: 1403
    0000057d: 	testq	%rcx, %rcx
    00000580: 	je	.Ltmp2866 # Offset: 1408
.Ltmp2865:
    00000586: 	movq	0x30(%rsp), %rax
    0000058b: 	movq	%rax, 0x68(%rsp)
    00000590: 	cmpq	$0xf, %rax
    00000594: 	ja	.Ltmp2867 # Offset: 1428
    0000059a: 	cmpq	$0x1, 0x30(%rsp)
    000005a0: 	jne	.Ltmp2868 # Offset: 1440
    000005a6: 	movq	0x40(%rsp), %rax
    000005ab: 	movzbl	(%rax), %eax
    000005ae: 	movb	%al, 0x10(%r14)
.Ltmp2996:
    000005b2: 	movq	0x30(%rsp), %rax
    000005b7: 	movq	%rax, 0x8(%r14)
    000005bb: 	movb	$0x0, (%rdi,%rax)
    000005bf: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000005c6: 	addq	$0x20, %rax
    000005ca: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp2991:
    000005d1: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000005d8: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000005df: 	je	.Ltmp2869 # Offset: 1503
.Ltmp2983:
    000005e5: 	movq	-0x20(%rax), %r14
    000005e9: 	callq	clock@PLT # Offset: 1513
    000005ee: 	pxor	%xmm0, %xmm0
    000005f2: 	movq	%rax, end_time(%rip)
    000005f9: 	movq	%r14, %rdi
    000005fc: 	subq	start_time(%rip), %rax
    00000603: 	cvtsi2sd	%rax, %xmm0
    00000608: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000610: 	callq	_Z13record_resultdPKc # Offset: 1552
    00000615: 	movq	0x20(%rsp), %rax
    0000061a: 	movq	0x10(%rsp), %rcx
    0000061f: 	jmp	.Ltmp2870 # Offset: 1567
    00000621: 	nopl	(%rax) # Size: 7
.Ltmp2872:
    00000628: 	movq	(%rax), %rdx
    0000062b: 	addq	$0x8, %rax
    0000062f: 	cmpq	-0x10(%rax), %rdx
    00000633: 	jb	.Ltmp2871 # Offset: 1587
.Ltmp2870:
    00000639: 	cmpq	%rax, %rcx
    0000063c: 	jne	.Ltmp2872 # Offset: 1596
.Ltmp2972:
    0000063e: 	movq	0xd0(%rsp), %rdi
    00000646: 	cmpq	0x8(%rsp), %rdi
    0000064b: 	je	.Ltmp2873 # Offset: 1611
    0000064d: 	movq	0xe0(%rsp), %rax
    00000655: 	leaq	0x1(%rax), %rsi
    00000659: 	callq	_ZdlPvm@PLT # Offset: 1625
.Ltmp2873:
    0000065e: 	leaq	DATAat0x272a2(%rip), %rdx
    00000665: 	movq	%r13, %rsi
    00000668: 	movq	%rbx, %rdi
    0000066b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1643
    00000670: 	callq	clock@PLT # Offset: 1648
    00000675: 	movl	iterations(%rip), %r10d
    0000067c: 	xorl	%r9d, %r9d
    0000067f: 	leaq	0xf9f8(%rbp), %rdi
    00000686: 	movq	%rax, start_time(%rip)
    0000068d: 	leaq	0x7d00(%rbp), %rcx
    00000694: 	testl	%r10d, %r10d
    00000697: 	jle	.Ltmp2874 # Offset: 1687
    00000699: 	nopl	(%rax) # Size: 7
.Ltmp2877:
    000006a0: 	movq	%rdi, %rdx
    000006a3: 	movq	%rbp, %rax
    000006a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2876:
    000006b0: 	cmpq	%rax, %rdx
    000006b3: 	je	.Ltmp2875 # Offset: 1715
    000006b5: 	movq	(%rdx), %r8
    000006b8: 	movq	(%rax), %rsi
    000006bb: 	addq	$0x8, %rax
    000006bf: 	subq	$0x8, %rdx
    000006c3: 	movq	%r8, -0x8(%rax)
    000006c7: 	movq	%rsi, 0x8(%rdx)
    000006cb: 	cmpq	%rcx, %rax
    000006ce: 	jne	.Ltmp2876 # Offset: 1742
.Ltmp2875:
    000006d0: 	addl	$0x1, %r9d
    000006d4: 	cmpl	%r10d, %r9d
    000006d7: 	jne	.Ltmp2877 # Offset: 1751
.Ltmp2874:
    000006d9: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000006e0: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    000006e7: 	subq	$0x20, %rax
    000006eb: 	cmpq	%rax, %r14
    000006ee: 	je	.Ltmp2878 # Offset: 1774
    000006f4: 	leaq	0x10(%r14), %rdi
    000006f8: 	movq	0xd8(%rsp), %rsi
    00000700: 	movq	%rdi, (%r14)
    00000703: 	movq	0xd0(%rsp), %rcx
    0000070b: 	movq	%rsi, 0x30(%rsp)
    00000710: 	movq	%rcx, %rax
    00000713: 	movq	%rcx, 0x20(%rsp)
    00000718: 	addq	%rsi, %rax
    0000071b: 	je	.Ltmp2879 # Offset: 1819
    0000071d: 	testq	%rcx, %rcx
    00000720: 	je	.Ltmp2880 # Offset: 1824
.Ltmp2879:
    00000726: 	movq	0x30(%rsp), %rax
    0000072b: 	movq	%rax, 0x68(%rsp)
    00000730: 	cmpq	$0xf, %rax
    00000734: 	ja	.Ltmp2881 # Offset: 1844
    0000073a: 	cmpq	$0x1, 0x30(%rsp)
    00000740: 	jne	.Ltmp2882 # Offset: 1856
    00000746: 	movq	0x20(%rsp), %rax
    0000074b: 	movzbl	(%rax), %eax
    0000074e: 	movb	%al, 0x10(%r14)
.Ltmp2993:
    00000752: 	movq	0x30(%rsp), %rax
    00000757: 	movq	%rax, 0x8(%r14)
    0000075b: 	movb	$0x0, (%rdi,%rax)
    0000075f: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000766: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000076d: 	addq	$0x20, %rax
    00000771: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000778: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    0000077f: 	je	.Ltmp2883 # Offset: 1919
.Ltmp2982:
    00000785: 	movq	-0x20(%rax), %r14
    00000789: 	callq	clock@PLT # Offset: 1929
    0000078e: 	pxor	%xmm0, %xmm0
    00000792: 	movq	%rax, end_time(%rip)
    00000799: 	movq	%r14, %rdi
    0000079c: 	subq	start_time(%rip), %rax
    000007a3: 	cvtsi2sd	%rax, %xmm0
    000007a8: 	divsd	DATAat0x276b0(%rip), %xmm0
    000007b0: 	callq	_Z13record_resultdPKc # Offset: 1968
    000007b5: 	movq	0x10(%rsp), %rdx
    000007ba: 	jmp	.Ltmp2884 # Offset: 1978
    000007bc: 	nopl	(%rax) # Size: 4
.Ltmp2886:
    000007c0: 	movq	(%r12), %rax
    000007c4: 	addq	$0x8, %r12
    000007c8: 	cmpq	-0x10(%r12), %rax
    000007cd: 	jb	.Ltmp2885 # Offset: 1997
.Ltmp2884:
    000007d3: 	cmpq	%r12, %rdx
    000007d6: 	jne	.Ltmp2886 # Offset: 2006
.Ltmp2974:
    000007d8: 	movq	0xd0(%rsp), %rdi
    000007e0: 	cmpq	0x8(%rsp), %rdi
    000007e5: 	je	.Ltmp2887 # Offset: 2021
    000007e7: 	movq	0xe0(%rsp), %rax
    000007ef: 	leaq	0x1(%rax), %rsi
    000007f3: 	callq	_ZdlPvm@PLT # Offset: 2035
.Ltmp2887:
    000007f8: 	leaq	DATAat0x272be(%rip), %rdx
    000007ff: 	movq	%r13, %rsi
    00000802: 	movq	%rbx, %rdi
    00000805: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2053
    0000080a: 	movq	0x10(%rsp), %rsi
    0000080f: 	movq	%rbx, %rcx
    00000812: 	leaq	_ZSt7reverseIPmEvT_S1_(%rip), %rdx
    00000819: 	movq	%rbp, %rdi
    0000081c: 	callq	_Z12test_reverseIPmPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2076
    00000821: 	movq	0xd0(%rsp), %rdi
    00000829: 	cmpq	0x8(%rsp), %rdi
    0000082e: 	je	.Ltmp2888 # Offset: 2094
    00000830: 	movq	0xe0(%rsp), %rax
    00000838: 	leaq	0x1(%rax), %rsi
    0000083c: 	callq	_ZdlPvm@PLT # Offset: 2108
.Ltmp2888:
    00000841: 	leaq	DATAat0x272da(%rip), %rdx
    00000848: 	movq	%r13, %rsi
    0000084b: 	movq	%rbx, %rdi
    0000084e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2126
    00000853: 	movq	0x10(%rsp), %rsi
    00000858: 	movq	%rbx, %rcx
    0000085b: 	leaq	_Z17my_simple_reverseIPmEvT_S1_(%rip), %rdx
    00000862: 	movq	%rbp, %rdi
    00000865: 	callq	_Z12test_reverseIPmPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2149
    0000086a: 	movq	0xd0(%rsp), %rdi
    00000872: 	cmpq	0x8(%rsp), %rdi
    00000877: 	je	.Ltmp2889 # Offset: 2167
    00000879: 	movq	0xe0(%rsp), %rax
    00000881: 	leaq	0x1(%rax), %rsi
    00000885: 	callq	_ZdlPvm@PLT # Offset: 2181
.Ltmp2889:
    0000088a: 	leaq	DATAat0x272f8(%rip), %rdx
    00000891: 	movq	%r13, %rsi
    00000894: 	movq	%rbx, %rdi
    00000897: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2199
    0000089c: 	movq	0x10(%rsp), %rsi
    000008a1: 	movq	%rbx, %rcx
    000008a4: 	leaq	_Z15my_fast_reverseIPmEvT_S1_(%rip), %rdx
    000008ab: 	movq	%rbp, %rdi
    000008ae: 	callq	_Z12test_reverseIPmPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2222
    000008b3: 	movq	0xd0(%rsp), %rdi
    000008bb: 	cmpq	0x8(%rsp), %rdi
    000008c0: 	je	.Ltmp2890 # Offset: 2240
    000008c2: 	movq	0xe0(%rsp), %rax
    000008ca: 	leaq	0x1(%rax), %rsi
    000008ce: 	callq	_ZdlPvm@PLT # Offset: 2254
.Ltmp2890:
    000008d3: 	leaq	DATAat0x27314(%rip), %rdx
    000008da: 	movq	%r13, %rsi
    000008dd: 	movq	%rbx, %rdi
    000008e0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2272
    000008e5: 	movq	0x10(%rsp), %rsi
    000008ea: 	movq	%rbx, %rcx
    000008ed: 	leaq	_Z13fast_reverse2IPmEvT_S1_(%rip), %rdx
    000008f4: 	movq	%rbp, %rdi
    000008f7: 	callq	_Z12test_reverseIPmPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2295
    000008fc: 	movq	0xd0(%rsp), %rdi
    00000904: 	cmpq	0x8(%rsp), %rdi
    00000909: 	je	.Ltmp2891 # Offset: 2313
    0000090b: 	movq	0xe0(%rsp), %rax
    00000913: 	leaq	0x1(%rax), %rsi
    00000917: 	callq	_ZdlPvm@PLT # Offset: 2327
.Ltmp2891:
    0000091c: 	leaq	DATAat0x27331(%rip), %rdx
    00000923: 	movq	%r13, %rsi
    00000926: 	movq	%rbx, %rdi
    00000929: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2345
    0000092e: 	movq	0x10(%rsp), %rsi
    00000933: 	movq	%rbx, %rcx
    00000936: 	leaq	_Z13fast_reverse3IPmEvT_S1_(%rip), %rdx
    0000093d: 	movq	%rbp, %rdi
    00000940: 	callq	_Z12test_reverseIPmPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2368
    00000945: 	movq	0xd0(%rsp), %rdi
    0000094d: 	cmpq	0x8(%rsp), %rdi
    00000952: 	je	.Ltmp2892 # Offset: 2386
    00000954: 	movq	0xe0(%rsp), %rax
    0000095c: 	leaq	0x1(%rax), %rsi
    00000960: 	callq	_ZdlPvm@PLT # Offset: 2400
.Ltmp2892:
    00000965: 	leaq	DATAat0x2734e(%rip), %r12
    0000096c: 	movq	%r13, %rsi
    0000096f: 	movq	%rbx, %rdi
    00000972: 	movq	%r12, %rdx
    00000975: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2421
    0000097a: 	leaq	_Z13fast_reverse4IPmEvT_S1_(%rip), %r14
    00000981: 	movq	0x10(%rsp), %rsi
    00000986: 	movq	%rbx, %rcx
    00000989: 	movq	%rbp, %rdi
    0000098c: 	movq	%r14, %rdx
    0000098f: 	callq	_Z12test_reverseIPmPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2447
    00000994: 	movq	0xd0(%rsp), %rdi
    0000099c: 	cmpq	0x8(%rsp), %rdi
    000009a1: 	je	.Ltmp2893 # Offset: 2465
    000009a3: 	movq	0xe0(%rsp), %rax
    000009ab: 	leaq	0x1(%rax), %rsi
    000009af: 	callq	_ZdlPvm@PLT # Offset: 2479
.Ltmp2893:
    000009b4: 	leaq	0x90(%rsp), %rdi
    000009bc: 	leaq	DATAat0x2736b(%rip), %rdx
    000009c3: 	movq	%r13, %rsi
    000009c6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2502
    000009cb: 	movl	iterations(%rip), %edx
    000009d1: 	xorl	%r8d, %r8d
    000009d4: 	xorl	%ecx, %ecx
    000009d6: 	movl	$0x1f40, %esi
    000009db: 	movq	0x90(%rsp), %rdi
    000009e3: 	callq	_Z9summarizePKciiii # Offset: 2531
    000009e8: 	movl	0x1c(%rsp), %ecx
    000009ec: 	leaq	DATAat0x27268(%rip), %rdx
    000009f3: 	movq	%r13, %rsi
    000009f6: 	movq	%rbx, %rdi
    000009f9: 	testl	%ecx, %ecx
    000009fb: 	leal	0x3fff(%rcx), %eax
    00000a01: 	cmovnsl	%ecx, %eax
    00000a04: 	sarl	$0xe, %eax
    00000a07: 	movl	%eax, 0x30(%rsp)
    00000a0b: 	movl	%eax, iterations(%rip)
    00000a11: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2577
    00000a16: 	movq	%rbx, %rcx
    00000a19: 	leaq	_ZSt7reverseI20BidirectionalPointerImEEvT_S2_(%rip), %rdx
    00000a20: 	movl	$0x800000, %esi
    00000a25: 	movq	%rbp, %rdi
    00000a28: 	callq	_Z18test_reverse_sizesI20BidirectionalPointerImEPFvS1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2600
    00000a2d: 	movq	0xd0(%rsp), %rdi
    00000a35: 	cmpq	0x8(%rsp), %rdi
    00000a3a: 	je	.Ltmp2894 # Offset: 2618
    00000a3c: 	movq	0xe0(%rsp), %rax
    00000a44: 	leaq	0x1(%rax), %rsi
    00000a48: 	callq	_ZdlPvm@PLT # Offset: 2632
.Ltmp2894:
    00000a4d: 	leaq	DATAat0x27284(%rip), %rdx
    00000a54: 	movq	%r13, %rsi
    00000a57: 	movq	%rbx, %rdi
    00000a5a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2650
    00000a5f: 	movq	%rbx, %rcx
    00000a62: 	leaq	_Z17my_simple_reverseI20BidirectionalPointerImEEvT_S2_(%rip), %rdx
    00000a69: 	movl	$0x800000, %esi
    00000a6e: 	movq	%rbp, %rdi
    00000a71: 	callq	_Z18test_reverse_sizesI20BidirectionalPointerImEPFvS1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2673
    00000a76: 	movq	0xd0(%rsp), %rdi
    00000a7e: 	cmpq	0x8(%rsp), %rdi
    00000a83: 	je	.Ltmp2895 # Offset: 2691
    00000a85: 	movq	0xe0(%rsp), %rax
    00000a8d: 	leaq	0x1(%rax), %rsi
    00000a91: 	callq	_ZdlPvm@PLT # Offset: 2705
.Ltmp2895:
    00000a96: 	leaq	DATAat0x272a2(%rip), %rdx
    00000a9d: 	movq	%r13, %rsi
    00000aa0: 	movq	%rbx, %rdi
    00000aa3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2723
    00000aa8: 	movq	%rbx, %rcx
    00000aab: 	leaq	_Z15my_fast_reverseI20BidirectionalPointerImEEvT_S2_(%rip), %rdx
    00000ab2: 	movl	$0x800000, %esi
    00000ab7: 	movq	%rbp, %rdi
    00000aba: 	callq	_Z18test_reverse_sizesI20BidirectionalPointerImEPFvS1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2746
    00000abf: 	movq	0xd0(%rsp), %rdi
    00000ac7: 	cmpq	0x8(%rsp), %rdi
    00000acc: 	je	.Ltmp2896 # Offset: 2764
    00000ace: 	movq	0xe0(%rsp), %rax
    00000ad6: 	leaq	0x1(%rax), %rsi
    00000ada: 	callq	_ZdlPvm@PLT # Offset: 2778
.Ltmp2896:
    00000adf: 	leaq	DATAat0x272be(%rip), %rdx
    00000ae6: 	movq	%r13, %rsi
    00000ae9: 	movq	%rbx, %rdi
    00000aec: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2796
    00000af1: 	movq	%rbx, %rcx
    00000af4: 	leaq	_ZSt7reverseIPmEvT_S1_(%rip), %rdx
    00000afb: 	movl	$0x800000, %esi
    00000b00: 	movq	%rbp, %rdi
    00000b03: 	callq	_Z18test_reverse_sizesIPmPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2819
    00000b08: 	movq	0xd0(%rsp), %rdi
    00000b10: 	cmpq	0x8(%rsp), %rdi
    00000b15: 	je	.Ltmp2897 # Offset: 2837
    00000b17: 	movq	0xe0(%rsp), %rax
    00000b1f: 	leaq	0x1(%rax), %rsi
    00000b23: 	callq	_ZdlPvm@PLT # Offset: 2851
.Ltmp2897:
    00000b28: 	leaq	DATAat0x272da(%rip), %rdx
    00000b2f: 	movq	%r13, %rsi
    00000b32: 	movq	%rbx, %rdi
    00000b35: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2869
    00000b3a: 	movq	%rbx, %rcx
    00000b3d: 	leaq	_Z17my_simple_reverseIPmEvT_S1_(%rip), %rdx
    00000b44: 	movl	$0x800000, %esi
    00000b49: 	movq	%rbp, %rdi
    00000b4c: 	callq	_Z18test_reverse_sizesIPmPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2892
    00000b51: 	movq	0xd0(%rsp), %rdi
    00000b59: 	cmpq	0x8(%rsp), %rdi
    00000b5e: 	je	.Ltmp2898 # Offset: 2910
    00000b60: 	movq	0xe0(%rsp), %rax
    00000b68: 	leaq	0x1(%rax), %rsi
    00000b6c: 	callq	_ZdlPvm@PLT # Offset: 2924
.Ltmp2898:
    00000b71: 	leaq	DATAat0x272f8(%rip), %rdx
    00000b78: 	movq	%r13, %rsi
    00000b7b: 	movq	%rbx, %rdi
    00000b7e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2942
    00000b83: 	movq	%rbx, %rcx
    00000b86: 	leaq	_Z15my_fast_reverseIPmEvT_S1_(%rip), %rdx
    00000b8d: 	movl	$0x800000, %esi
    00000b92: 	movq	%rbp, %rdi
    00000b95: 	callq	_Z18test_reverse_sizesIPmPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2965
    00000b9a: 	movq	0xd0(%rsp), %rdi
    00000ba2: 	cmpq	0x8(%rsp), %rdi
    00000ba7: 	je	.Ltmp2899 # Offset: 2983
    00000ba9: 	movq	0xe0(%rsp), %rax
    00000bb1: 	leaq	0x1(%rax), %rsi
    00000bb5: 	callq	_ZdlPvm@PLT # Offset: 2997
.Ltmp2899:
    00000bba: 	leaq	DATAat0x27314(%rip), %rdx
    00000bc1: 	movq	%r13, %rsi
    00000bc4: 	movq	%rbx, %rdi
    00000bc7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3015
    00000bcc: 	movq	%rbx, %rcx
    00000bcf: 	leaq	_Z13fast_reverse2IPmEvT_S1_(%rip), %rdx
    00000bd6: 	movl	$0x800000, %esi
    00000bdb: 	movq	%rbp, %rdi
    00000bde: 	callq	_Z18test_reverse_sizesIPmPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3038
    00000be3: 	movq	0xd0(%rsp), %rdi
    00000beb: 	cmpq	0x8(%rsp), %rdi
    00000bf0: 	je	.Ltmp2900 # Offset: 3056
    00000bf2: 	movq	0xe0(%rsp), %rax
    00000bfa: 	leaq	0x1(%rax), %rsi
    00000bfe: 	callq	_ZdlPvm@PLT # Offset: 3070
.Ltmp2900:
    00000c03: 	leaq	DATAat0x27331(%rip), %rdx
    00000c0a: 	movq	%r13, %rsi
    00000c0d: 	movq	%rbx, %rdi
    00000c10: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3088
    00000c15: 	movq	%rbx, %rcx
    00000c18: 	leaq	_Z13fast_reverse3IPmEvT_S1_(%rip), %rdx
    00000c1f: 	movl	$0x800000, %esi
    00000c24: 	movq	%rbp, %rdi
    00000c27: 	callq	_Z18test_reverse_sizesIPmPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3111
    00000c2c: 	movq	0xd0(%rsp), %rdi
    00000c34: 	cmpq	0x8(%rsp), %rdi
    00000c39: 	je	.Ltmp2901 # Offset: 3129
    00000c3b: 	movq	0xe0(%rsp), %rax
    00000c43: 	leaq	0x1(%rax), %rsi
    00000c47: 	callq	_ZdlPvm@PLT # Offset: 3143
.Ltmp2901:
    00000c4c: 	movq	%r12, %rdx
    00000c4f: 	movq	%r13, %rsi
    00000c52: 	movq	%rbx, %rdi
    00000c55: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3157
    00000c5a: 	movq	%rbx, %rcx
    00000c5d: 	movq	%r14, %rdx
    00000c60: 	movl	$0x800000, %esi
    00000c65: 	movq	%rbp, %rdi
    00000c68: 	callq	_Z18test_reverse_sizesIPmPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3176
    00000c6d: 	movq	0xd0(%rsp), %rdi
    00000c75: 	cmpq	0x8(%rsp), %rdi
    00000c7a: 	je	.Ltmp2902 # Offset: 3194
    00000c7c: 	movq	0xe0(%rsp), %rax
    00000c84: 	leaq	0x1(%rax), %rsi
    00000c88: 	callq	_ZdlPvm@PLT # Offset: 3208
.Ltmp2902:
    00000c8d: 	movl	0x1c(%rsp), %eax
    00000c91: 	leaq	DATAat0x27388(%rip), %rdx
    00000c98: 	movq	%r13, %rsi
    00000c9b: 	movq	%rbx, %rdi
    00000c9e: 	movl	%eax, iterations(%rip)
    00000ca4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3236
    00000ca9: 	leaq	0xfa00(%r15), %r12
    00000cb0: 	movq	%r15, %rax
    00000cb3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2903:
    00000cb8: 	movdqa	DATAat0x275a0(%rip), %xmm2
    00000cc0: 	addq	$0x10, %rax
    00000cc4: 	movups	%xmm2, -0x10(%rax)
    00000cc8: 	cmpq	%rax, %r12
    00000ccb: 	jne	.Ltmp2903 # Offset: 3275
    00000ccd: 	callq	clock@PLT # Offset: 3277
    00000cd2: 	movl	iterations(%rip), %edi
    00000cd8: 	xorl	%esi, %esi
    00000cda: 	leaq	0xf9f0(%rbp), %rcx
    00000ce1: 	movq	%rax, start_time(%rip)
    00000ce8: 	testl	%edi, %edi
    00000cea: 	jle	.Ltmp2904 # Offset: 3306
    00000cec: 	nopl	(%rax) # Size: 4
.Ltmp2906:
    00000cf0: 	movq	%rcx, %rdx
    00000cf3: 	movq	%r15, %rax
    00000cf6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2905:
    00000d00: 	movdqu	(%rdx), %xmm0
    00000d04: 	addq	$0x10, %rax
    00000d08: 	subq	$0x10, %rdx
    00000d0c: 	shufpd	$0x1, %xmm0, %xmm0
    00000d11: 	movups	%xmm0, -0x10(%rax)
    00000d15: 	cmpq	%rax, %r12
    00000d18: 	jne	.Ltmp2905 # Offset: 3352
    00000d1a: 	addl	$0x1, %esi
    00000d1d: 	cmpl	%edi, %esi
    00000d1f: 	jne	.Ltmp2906 # Offset: 3359
.Ltmp2904:
    00000d21: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000d28: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000d2f: 	subq	$0x20, %rax
    00000d33: 	cmpq	%rax, %rdi
    00000d36: 	je	.Ltmp2907 # Offset: 3382
    00000d3c: 	leaq	0x10(%rdi), %rax
    00000d40: 	movq	0xd8(%rsp), %rdx
    00000d48: 	movq	%rax, (%rdi)
    00000d4b: 	movq	0xd0(%rsp), %rsi
    00000d53: 	addq	%rsi, %rdx
    00000d56: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 3414
    00000d5b: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000d62: 	addq	$0x20, %rax
    00000d66: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp2992:
    00000d6d: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000d74: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000d7b: 	je	.Ltmp2908 # Offset: 3451
.Ltmp2984:
    00000d81: 	movq	-0x20(%rax), %r14
    00000d85: 	callq	clock@PLT # Offset: 3461
    00000d8a: 	pxor	%xmm0, %xmm0
    00000d8e: 	movq	%rax, end_time(%rip)
    00000d95: 	movq	%r14, %rdi
    00000d98: 	subq	start_time(%rip), %rax
    00000d9f: 	cvtsi2sd	%rax, %xmm0
    00000da4: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000dac: 	callq	_Z13record_resultdPKc # Offset: 3500
    00000db1: 	leaq	0xf9f8(%r15), %r14
    00000db8: 	movq	%r15, %rax
    00000dbb: 	jmp	.Ltmp2909 # Offset: 3515
    00000dbd: 	nopl	(%rax) # Size: 3
.Ltmp2911:
    00000dc0: 	addq	$0x8, %rax
    00000dc4: 	movq	(%rax), %rcx
    00000dc7: 	cmpq	%rcx, -0x8(%rax)
    00000dcb: 	jb	.Ltmp2910 # Offset: 3531
.Ltmp2909:
    00000dd1: 	cmpq	%r14, %rax
    00000dd4: 	jne	.Ltmp2911 # Offset: 3540
.Ltmp2973:
    00000dd6: 	movq	0xd0(%rsp), %rdi
    00000dde: 	cmpq	0x8(%rsp), %rdi
    00000de3: 	je	.Ltmp2912 # Offset: 3555
    00000de5: 	movq	0xe0(%rsp), %rax
    00000ded: 	leaq	0x1(%rax), %rsi
    00000df1: 	callq	_ZdlPvm@PLT # Offset: 3569
.Ltmp2912:
    00000df6: 	leaq	DATAat0x273b0(%rip), %rdx
    00000dfd: 	movq	%r13, %rsi
    00000e00: 	movq	%rbx, %rdi
    00000e03: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3587
    00000e08: 	movq	%r15, %rax
    00000e0b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2913:
    00000e10: 	movdqa	DATAat0x275a0(%rip), %xmm3
    00000e18: 	addq	$0x10, %rax
    00000e1c: 	movups	%xmm3, -0x10(%rax)
    00000e20: 	cmpq	%rax, %r12
    00000e23: 	jne	.Ltmp2913 # Offset: 3619
    00000e25: 	callq	clock@PLT # Offset: 3621
    00000e2a: 	movl	iterations(%rip), %edi
    00000e30: 	xorl	%esi, %esi
    00000e32: 	leaq	0xf9f0(%rbp), %rcx
    00000e39: 	movq	%rax, start_time(%rip)
    00000e40: 	testl	%edi, %edi
    00000e42: 	jle	.Ltmp2914 # Offset: 3650
    00000e44: 	nopl	(%rax) # Size: 4
.Ltmp2916:
    00000e48: 	movq	%rcx, %rdx
    00000e4b: 	movq	%r15, %rax
    00000e4e: 	nop # Size: 2
.Ltmp2915:
    00000e50: 	movdqu	(%rdx), %xmm0
    00000e54: 	addq	$0x10, %rax
    00000e58: 	subq	$0x10, %rdx
    00000e5c: 	shufpd	$0x1, %xmm0, %xmm0
    00000e61: 	movups	%xmm0, -0x10(%rax)
    00000e65: 	cmpq	%r12, %rax
    00000e68: 	jne	.Ltmp2915 # Offset: 3688
    00000e6a: 	addl	$0x1, %esi
    00000e6d: 	cmpl	%edi, %esi
    00000e6f: 	jne	.Ltmp2916 # Offset: 3695
.Ltmp2914:
    00000e71: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000e78: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000e7f: 	subq	$0x20, %rax
    00000e83: 	cmpq	%rax, %rdi
    00000e86: 	je	.Ltmp2917 # Offset: 3718
    00000e8c: 	leaq	0x10(%rdi), %rax
    00000e90: 	movq	0xd8(%rsp), %rdx
    00000e98: 	movq	%rax, (%rdi)
    00000e9b: 	movq	0xd0(%rsp), %rsi
    00000ea3: 	addq	%rsi, %rdx
    00000ea6: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 3750
    00000eab: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000eb2: 	addq	$0x20, %rax
    00000eb6: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp2986:
    00000ebd: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000ec4: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000ecb: 	je	.Ltmp2918 # Offset: 3787
.Ltmp2985:
    00000ed1: 	movq	-0x20(%rax), %rdi
    00000ed5: 	movq	%rdi, 0x20(%rsp)
    00000eda: 	callq	clock@PLT # Offset: 3802
    00000edf: 	movq	0x20(%rsp), %rdi
    00000ee4: 	pxor	%xmm0, %xmm0
    00000ee8: 	movq	%rax, end_time(%rip)
    00000eef: 	subq	start_time(%rip), %rax
    00000ef6: 	cvtsi2sd	%rax, %xmm0
    00000efb: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000f03: 	callq	_Z13record_resultdPKc # Offset: 3843
    00000f08: 	movq	%r15, %rax
    00000f0b: 	jmp	.Ltmp2919 # Offset: 3851
    00000f0d: 	nopl	(%rax) # Size: 3
.Ltmp2921:
    00000f10: 	addq	$0x8, %rax
    00000f14: 	movq	(%rax), %rcx
    00000f17: 	cmpq	%rcx, -0x8(%rax)
    00000f1b: 	jb	.Ltmp2920 # Offset: 3867
.Ltmp2919:
    00000f21: 	cmpq	%r14, %rax
    00000f24: 	jne	.Ltmp2921 # Offset: 3876
.Ltmp2975:
    00000f26: 	movq	0xd0(%rsp), %rdi
    00000f2e: 	cmpq	0x8(%rsp), %rdi
    00000f33: 	je	.Ltmp2922 # Offset: 3891
    00000f35: 	movq	0xe0(%rsp), %rax
    00000f3d: 	leaq	0x1(%rax), %rsi
    00000f41: 	callq	_ZdlPvm@PLT # Offset: 3905
.Ltmp2922:
    00000f46: 	leaq	DATAat0x273d8(%rip), %rdx
    00000f4d: 	movq	%r13, %rsi
    00000f50: 	movq	%rbx, %rdi
    00000f53: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3923
    00000f58: 	movq	%r15, %rax
    00000f5b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2923:
    00000f60: 	movdqa	DATAat0x275a0(%rip), %xmm1
    00000f68: 	addq	$0x10, %rax
    00000f6c: 	movups	%xmm1, -0x10(%rax)
    00000f70: 	cmpq	%r12, %rax
    00000f73: 	jne	.Ltmp2923 # Offset: 3955
    00000f75: 	callq	clock@PLT # Offset: 3957
    00000f7a: 	movl	iterations(%rip), %edi
    00000f80: 	xorl	%esi, %esi
    00000f82: 	leaq	0xf9f0(%rbp), %rcx
    00000f89: 	movq	%rax, start_time(%rip)
    00000f90: 	testl	%edi, %edi
    00000f92: 	jle	.Ltmp2924 # Offset: 3986
    00000f94: 	nopl	(%rax) # Size: 4
.Ltmp2926:
    00000f98: 	movq	%rcx, %rdx
    00000f9b: 	movq	%r15, %rax
    00000f9e: 	nop # Size: 2
.Ltmp2925:
    00000fa0: 	movdqu	(%rdx), %xmm0
    00000fa4: 	addq	$0x10, %rax
    00000fa8: 	subq	$0x10, %rdx
    00000fac: 	shufpd	$0x1, %xmm0, %xmm0
    00000fb1: 	movups	%xmm0, -0x10(%rax)
    00000fb5: 	cmpq	%r12, %rax
    00000fb8: 	jne	.Ltmp2925 # Offset: 4024
    00000fba: 	addl	$0x1, %esi
    00000fbd: 	cmpl	%edi, %esi
    00000fbf: 	jne	.Ltmp2926 # Offset: 4031
.Ltmp2924:
    00000fc1: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000fc8: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000fcf: 	subq	$0x20, %rax
    00000fd3: 	cmpq	%rax, %rdi
    00000fd6: 	je	.Ltmp2927 # Offset: 4054
    00000fdc: 	leaq	0x10(%rdi), %rax
    00000fe0: 	movq	0xd8(%rsp), %rdx
    00000fe8: 	movq	%rax, (%rdi)
    00000feb: 	movq	0xd0(%rsp), %rsi
    00000ff3: 	addq	%rsi, %rdx
    00000ff6: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 4086
    00000ffb: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001002: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001009: 	addq	$0x20, %rax
    0000100d: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001014: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    0000101b: 	je	.Ltmp2928 # Offset: 4123
.Ltmp2981:
    00001021: 	movq	-0x20(%rax), %rdi
    00001025: 	movq	%rdi, 0x20(%rsp)
    0000102a: 	callq	clock@PLT # Offset: 4138
    0000102f: 	movq	0x20(%rsp), %rdi
    00001034: 	pxor	%xmm0, %xmm0
    00001038: 	movq	%rax, end_time(%rip)
    0000103f: 	subq	start_time(%rip), %rax
    00001046: 	cvtsi2sd	%rax, %xmm0
    0000104b: 	divsd	DATAat0x276b0(%rip), %xmm0
    00001053: 	callq	_Z13record_resultdPKc # Offset: 4179
    00001058: 	movq	%r15, %rax
    0000105b: 	jmp	.Ltmp2929 # Offset: 4187
    0000105d: 	nopl	(%rax) # Size: 3
.Ltmp2931:
    00001060: 	addq	$0x8, %rax
    00001064: 	movq	(%rax), %rcx
    00001067: 	cmpq	%rcx, -0x8(%rax)
    0000106b: 	jb	.Ltmp2930 # Offset: 4203
.Ltmp2929:
    00001071: 	cmpq	%r14, %rax
    00001074: 	jne	.Ltmp2931 # Offset: 4212
.Ltmp2976:
    00001076: 	movq	0xd0(%rsp), %rdi
    0000107e: 	cmpq	0x8(%rsp), %rdi
    00001083: 	je	.Ltmp2932 # Offset: 4227
    00001085: 	movq	0xe0(%rsp), %rax
    0000108d: 	leaq	0x1(%rax), %rsi
    00001091: 	callq	_ZdlPvm@PLT # Offset: 4241
.Ltmp2932:
    00001096: 	leaq	DATAat0x27400(%rip), %rdx
    0000109d: 	movq	%r13, %rsi
    000010a0: 	movq	%rbx, %rdi
    000010a3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4259
    000010a8: 	movq	%r15, %rax
    000010ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2933:
    000010b0: 	movdqa	DATAat0x275a0(%rip), %xmm2
    000010b8: 	addq	$0x10, %rax
    000010bc: 	movups	%xmm2, -0x10(%rax)
    000010c0: 	cmpq	%r12, %rax
    000010c3: 	jne	.Ltmp2933 # Offset: 4291
    000010c5: 	callq	clock@PLT # Offset: 4293
    000010ca: 	movl	iterations(%rip), %edi
    000010d0: 	xorl	%esi, %esi
    000010d2: 	leaq	0xf9f0(%rbp), %rcx
    000010d9: 	movq	%rax, start_time(%rip)
    000010e0: 	testl	%edi, %edi
    000010e2: 	jle	.Ltmp2934 # Offset: 4322
    000010e4: 	nopl	(%rax) # Size: 4
.Ltmp2936:
    000010e8: 	movq	%rcx, %rdx
    000010eb: 	movq	%r15, %rax
    000010ee: 	nop # Size: 2
.Ltmp2935:
    000010f0: 	movdqu	(%rdx), %xmm0
    000010f4: 	addq	$0x10, %rax
    000010f8: 	subq	$0x10, %rdx
    000010fc: 	shufpd	$0x1, %xmm0, %xmm0
    00001101: 	movups	%xmm0, -0x10(%rax)
    00001105: 	cmpq	%r12, %rax
    00001108: 	jne	.Ltmp2935 # Offset: 4360
    0000110a: 	addl	$0x1, %esi
    0000110d: 	cmpl	%edi, %esi
    0000110f: 	jne	.Ltmp2936 # Offset: 4367
.Ltmp2934:
    00001111: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001118: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    0000111f: 	subq	$0x20, %rax
    00001123: 	cmpq	%rax, %rdi
    00001126: 	je	.Ltmp2937 # Offset: 4390
    0000112c: 	leaq	0x10(%rdi), %rax
    00001130: 	movq	0xd8(%rsp), %rdx
    00001138: 	movq	%rax, (%rdi)
    0000113b: 	movq	0xd0(%rsp), %rsi
    00001143: 	addq	%rsi, %rdx
    00001146: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 4422
    0000114b: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001152: 	addq	$0x20, %rax
    00001156: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp2979:
    0000115d: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001164: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000116b: 	je	.Ltmp2938 # Offset: 4459
.Ltmp2978:
    00001171: 	movq	-0x20(%rax), %rdi
    00001175: 	movq	%rdi, 0x20(%rsp)
    0000117a: 	callq	clock@PLT # Offset: 4474
    0000117f: 	movq	0x20(%rsp), %rdi
    00001184: 	pxor	%xmm0, %xmm0
    00001188: 	movq	%rax, end_time(%rip)
    0000118f: 	subq	start_time(%rip), %rax
    00001196: 	cvtsi2sd	%rax, %xmm0
    0000119b: 	divsd	DATAat0x276b0(%rip), %xmm0
    000011a3: 	callq	_Z13record_resultdPKc # Offset: 4515
    000011a8: 	movq	%r15, %rax
    000011ab: 	jmp	.Ltmp2939 # Offset: 4523
    000011ad: 	nopl	(%rax) # Size: 3
.Ltmp2941:
    000011b0: 	addq	$0x8, %rax
    000011b4: 	movq	(%rax), %rcx
    000011b7: 	cmpq	%rcx, -0x8(%rax)
    000011bb: 	jb	.Ltmp2940 # Offset: 4539
.Ltmp2939:
    000011c1: 	cmpq	%r14, %rax
    000011c4: 	jne	.Ltmp2941 # Offset: 4548
.Ltmp2977:
    000011c6: 	movq	0xd0(%rsp), %rdi
    000011ce: 	cmpq	0x8(%rsp), %rdi
    000011d3: 	je	.Ltmp2942 # Offset: 4563
    000011d5: 	movq	0xe0(%rsp), %rax
    000011dd: 	leaq	0x1(%rax), %rsi
    000011e1: 	callq	_ZdlPvm@PLT # Offset: 4577
.Ltmp2942:
    000011e6: 	leaq	DATAat0x27428(%rip), %r14
    000011ed: 	movq	%r13, %rsi
    000011f0: 	movq	%rbx, %rdi
    000011f3: 	movq	%r14, %rdx
    000011f6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4598
    000011fb: 	movq	0x10(%rsp), %rsi
    00001200: 	movq	%rbx, %r9
    00001203: 	movq	%r12, %rcx
    00001206: 	movq	%r15, %rdx
    00001209: 	leaq	_Z22my_simple_reverse_copyIPmS0_EvT_S1_T0_(%rip), %r8
    00001210: 	movq	%rbp, %rdi
    00001213: 	callq	_Z17test_reverse_copyIPmPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4627
    00001218: 	movq	0xd0(%rsp), %rdi
    00001220: 	cmpq	0x8(%rsp), %rdi
    00001225: 	je	.Ltmp2943 # Offset: 4645
    00001227: 	movq	0xe0(%rsp), %rax
    0000122f: 	leaq	0x1(%rax), %rsi
    00001233: 	callq	_ZdlPvm@PLT # Offset: 4659
.Ltmp2943:
    00001238: 	leaq	DATAat0x27450(%rip), %rdx
    0000123f: 	movq	%r13, %rsi
    00001242: 	movq	%rbx, %rdi
    00001245: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4677
    0000124a: 	movq	0x10(%rsp), %rsi
    0000124f: 	movq	%rbx, %r9
    00001252: 	movq	%r12, %rcx
    00001255: 	movq	%r15, %rdx
    00001258: 	leaq	_Z20my_fast_reverse_copyIPmS0_EvT_S1_T0_(%rip), %r8
    0000125f: 	movq	%rbp, %rdi
    00001262: 	callq	_Z17test_reverse_copyIPmPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4706
    00001267: 	movq	0xd0(%rsp), %rdi
    0000126f: 	cmpq	0x8(%rsp), %rdi
    00001274: 	je	.Ltmp2944 # Offset: 4724
    00001276: 	movq	0xe0(%rsp), %rax
    0000127e: 	leaq	0x1(%rax), %rsi
    00001282: 	callq	_ZdlPvm@PLT # Offset: 4738
.Ltmp2944:
    00001287: 	leaq	DATAat0x27478(%rip), %rdx
    0000128e: 	movq	%r13, %rsi
    00001291: 	movq	%rbx, %rdi
    00001294: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4756
    00001299: 	movq	0x10(%rsp), %rsi
    0000129e: 	movq	%rbx, %r9
    000012a1: 	movq	%r12, %rcx
    000012a4: 	movq	%r15, %rdx
    000012a7: 	leaq	_Z18fast_reverse_copy2IPmS0_EvT_S1_T0_(%rip), %r8
    000012ae: 	movq	%rbp, %rdi
    000012b1: 	callq	_Z17test_reverse_copyIPmPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4785
    000012b6: 	movq	0xd0(%rsp), %rdi
    000012be: 	cmpq	0x8(%rsp), %rdi
    000012c3: 	je	.Ltmp2945 # Offset: 4803
    000012c5: 	movq	0xe0(%rsp), %rax
    000012cd: 	leaq	0x1(%rax), %rsi
    000012d1: 	callq	_ZdlPvm@PLT # Offset: 4817
.Ltmp2945:
    000012d6: 	leaq	DATAat0x274a0(%rip), %rdx
    000012dd: 	movq	%r13, %rsi
    000012e0: 	movq	%rbx, %rdi
    000012e3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4835
    000012e8: 	movq	0x10(%rsp), %rsi
    000012ed: 	movq	%rbx, %r9
    000012f0: 	movq	%r12, %rcx
    000012f3: 	movq	%r15, %rdx
    000012f6: 	leaq	_Z18fast_reverse_copy3IPmS0_EvT_S1_T0_(%rip), %r8
    000012fd: 	movq	%rbp, %rdi
    00001300: 	callq	_Z17test_reverse_copyIPmPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4864
    00001305: 	movq	0xd0(%rsp), %rdi
    0000130d: 	cmpq	0x8(%rsp), %rdi
    00001312: 	je	.Ltmp2946 # Offset: 4882
    00001314: 	movq	0xe0(%rsp), %rax
    0000131c: 	leaq	0x1(%rax), %rsi
    00001320: 	callq	_ZdlPvm@PLT # Offset: 4896
.Ltmp2946:
    00001325: 	leaq	DATAat0x274c8(%rip), %rdx
    0000132c: 	movq	%r13, %rsi
    0000132f: 	movq	%rbx, %rdi
    00001332: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4914
    00001337: 	movq	0x10(%rsp), %rsi
    0000133c: 	movq	%rbx, %r9
    0000133f: 	movq	%r12, %rcx
    00001342: 	movq	%r15, %rdx
    00001345: 	leaq	_Z18fast_reverse_copy4IPmS0_EvT_S1_T0_(%rip), %r8
    0000134c: 	movq	%rbp, %rdi
    0000134f: 	callq	_Z17test_reverse_copyIPmPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4943
    00001354: 	movq	0xd0(%rsp), %rdi
    0000135c: 	cmpq	0x8(%rsp), %rdi
    00001361: 	je	.Ltmp2947 # Offset: 4961
    00001363: 	movq	0xe0(%rsp), %rax
    0000136b: 	leaq	0x1(%rax), %rsi
    0000136f: 	callq	_ZdlPvm@PLT # Offset: 4975
.Ltmp2947:
    00001374: 	leaq	0xb0(%rsp), %rdi
    0000137c: 	leaq	DATAat0x27374(%rip), %rdx
    00001383: 	movq	%r13, %rsi
    00001386: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4998
    0000138b: 	movl	iterations(%rip), %edx
    00001391: 	xorl	%r8d, %r8d
    00001394: 	xorl	%ecx, %ecx
    00001396: 	movl	$0x1f40, %esi
    0000139b: 	movq	0xb0(%rsp), %rdi
    000013a3: 	callq	_Z9summarizePKciiii # Offset: 5027
    000013a8: 	movl	0x30(%rsp), %eax
    000013ac: 	leaq	DATAat0x27388(%rip), %rdx
    000013b3: 	movq	%r13, %rsi
    000013b6: 	movq	%rbx, %rdi
    000013b9: 	movl	%eax, iterations(%rip)
    000013bf: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5055
    000013c4: 	movq	%rbx, %r8
    000013c7: 	leaq	_ZSt12reverse_copyI20BidirectionalPointerImES1_ET0_T_S3_S2_(%rip), %rcx
    000013ce: 	movq	%r15, %rsi
    000013d1: 	movq	%rbp, %rdi
    000013d4: 	movl	$0x800000, %edx
    000013d9: 	callq	_Z23test_reverse_copy_sizesI20BidirectionalPointerImEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5081
    000013de: 	movq	0xd0(%rsp), %rdi
    000013e6: 	cmpq	0x8(%rsp), %rdi
    000013eb: 	je	.Ltmp2948 # Offset: 5099
    000013ed: 	movq	0xe0(%rsp), %rax
    000013f5: 	leaq	0x1(%rax), %rsi
    000013f9: 	callq	_ZdlPvm@PLT # Offset: 5113
.Ltmp2948:
    000013fe: 	leaq	DATAat0x273b0(%rip), %rdx
    00001405: 	movq	%r13, %rsi
    00001408: 	movq	%rbx, %rdi
    0000140b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5131
    00001410: 	movq	%rbx, %r8
    00001413: 	leaq	_Z22my_simple_reverse_copyI20BidirectionalPointerImES1_EvT_S2_T0_(%rip), %rcx
    0000141a: 	movq	%r15, %rsi
    0000141d: 	movq	%rbp, %rdi
    00001420: 	movl	$0x800000, %edx
    00001425: 	callq	_Z23test_reverse_copy_sizesI20BidirectionalPointerImEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5157
    0000142a: 	movq	0xd0(%rsp), %rdi
    00001432: 	cmpq	0x8(%rsp), %rdi
    00001437: 	je	.Ltmp2949 # Offset: 5175
    00001439: 	movq	0xe0(%rsp), %rax
    00001441: 	leaq	0x1(%rax), %rsi
    00001445: 	callq	_ZdlPvm@PLT # Offset: 5189
.Ltmp2949:
    0000144a: 	leaq	DATAat0x273d8(%rip), %rdx
    00001451: 	movq	%r13, %rsi
    00001454: 	movq	%rbx, %rdi
    00001457: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5207
    0000145c: 	movq	%rbx, %r8
    0000145f: 	leaq	_Z20my_fast_reverse_copyI20BidirectionalPointerImES1_EvT_S2_T0_(%rip), %rcx
    00001466: 	movq	%r15, %rsi
    00001469: 	movq	%rbp, %rdi
    0000146c: 	movl	$0x800000, %edx
    00001471: 	callq	_Z23test_reverse_copy_sizesI20BidirectionalPointerImEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5233
    00001476: 	movq	0xd0(%rsp), %rdi
    0000147e: 	cmpq	0x8(%rsp), %rdi
    00001483: 	je	.Ltmp2950 # Offset: 5251
    00001485: 	movq	0xe0(%rsp), %rax
    0000148d: 	leaq	0x1(%rax), %rsi
    00001491: 	callq	_ZdlPvm@PLT # Offset: 5265
.Ltmp2950:
    00001496: 	leaq	DATAat0x27400(%rip), %rdx
    0000149d: 	movq	%r13, %rsi
    000014a0: 	movq	%rbx, %rdi
    000014a3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5283
    000014a8: 	movq	%rbx, %r8
    000014ab: 	leaq	_ZSt12reverse_copyIPmS0_ET0_T_S2_S1_(%rip), %rcx
    000014b2: 	movq	%r15, %rsi
    000014b5: 	movq	%rbp, %rdi
    000014b8: 	movl	$0x800000, %edx
    000014bd: 	callq	_Z23test_reverse_copy_sizesIPmPFS0_S0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5309
    000014c2: 	movq	0xd0(%rsp), %rdi
    000014ca: 	cmpq	0x8(%rsp), %rdi
    000014cf: 	je	.Ltmp2951 # Offset: 5327
    000014d1: 	movq	0xe0(%rsp), %rax
    000014d9: 	leaq	0x1(%rax), %rsi
    000014dd: 	callq	_ZdlPvm@PLT # Offset: 5341
.Ltmp2951:
    000014e2: 	movq	%r14, %rdx
    000014e5: 	movq	%r13, %rsi
    000014e8: 	movq	%rbx, %rdi
    000014eb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5355
    000014f0: 	movq	%rbx, %r8
    000014f3: 	leaq	_Z22my_simple_reverse_copyIPmS0_EvT_S1_T0_(%rip), %rcx
    000014fa: 	movq	%r15, %rsi
    000014fd: 	movq	%rbp, %rdi
    00001500: 	movl	$0x800000, %edx
    00001505: 	callq	_Z23test_reverse_copy_sizesIPmPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5381
    0000150a: 	movq	0xd0(%rsp), %rdi
    00001512: 	cmpq	0x8(%rsp), %rdi
    00001517: 	je	.Ltmp2952 # Offset: 5399
    00001519: 	movq	0xe0(%rsp), %rax
    00001521: 	leaq	0x1(%rax), %rsi
    00001525: 	callq	_ZdlPvm@PLT # Offset: 5413
.Ltmp2952:
    0000152a: 	leaq	DATAat0x27450(%rip), %rdx
    00001531: 	movq	%r13, %rsi
    00001534: 	movq	%rbx, %rdi
    00001537: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5431
    0000153c: 	movq	%rbx, %r8
    0000153f: 	leaq	_Z20my_fast_reverse_copyIPmS0_EvT_S1_T0_(%rip), %rcx
    00001546: 	movq	%r15, %rsi
    00001549: 	movq	%rbp, %rdi
    0000154c: 	movl	$0x800000, %edx
    00001551: 	callq	_Z23test_reverse_copy_sizesIPmPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5457
    00001556: 	movq	0xd0(%rsp), %rdi
    0000155e: 	cmpq	0x8(%rsp), %rdi
    00001563: 	je	.Ltmp2953 # Offset: 5475
    00001565: 	movq	0xe0(%rsp), %rax
    0000156d: 	leaq	0x1(%rax), %rsi
    00001571: 	callq	_ZdlPvm@PLT # Offset: 5489
.Ltmp2953:
    00001576: 	movq	0x8(%rsp), %rax
    0000157b: 	movq	0x70(%rsp), %r14
    00001580: 	movq	0x78(%rsp), %r12
    00001585: 	movq	%rax, 0xd0(%rsp)
    0000158d: 	movq	%r14, %rax
    00001590: 	addq	%r12, %rax
    00001593: 	je	.Ltmp2954 # Offset: 5523
    00001595: 	testq	%r14, %r14
    00001598: 	je	.Ltmp2955 # Offset: 5528
.Ltmp2954:
    0000159e: 	movq	%r12, 0x68(%rsp)
    000015a3: 	cmpq	$0xf, %r12
    000015a7: 	ja	.Ltmp2956 # Offset: 5543
    000015ad: 	cmpq	$0x1, %r12
    000015b1: 	jne	.Ltmp2957 # Offset: 5553
    000015b7: 	movzbl	(%r14), %eax
    000015bb: 	movb	%al, 0xe0(%rsp)
    000015c2: 	movq	0x8(%rsp), %rax
.Ltmp2970:
    000015c7: 	movq	%r12, 0xd8(%rsp)
    000015cf: 	movb	$0x0, (%rax,%r12)
    000015d4: 	movabsq	$0x3fffffffffffffff, %rax
    000015de: 	subq	0xd8(%rsp), %rax
    000015e6: 	cmpq	$0x20, %rax
    000015ea: 	jbe	.Ltmp2958 # Offset: 5610
    000015f0: 	movl	$0x21, %edx
    000015f5: 	leaq	DATAat0x27478(%rip), %rsi
    000015fc: 	movq	%rbx, %rdi
    000015ff: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5631
    00001604: 	movq	%rbx, %r8
    00001607: 	leaq	_Z18fast_reverse_copy2IPmS0_EvT_S1_T0_(%rip), %rcx
    0000160e: 	movq	%r15, %rsi
    00001611: 	movq	%rbp, %rdi
    00001614: 	movl	$0x800000, %edx
    00001619: 	callq	_Z23test_reverse_copy_sizesIPmPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5657
    0000161e: 	movq	0xd0(%rsp), %rdi
    00001626: 	cmpq	0x8(%rsp), %rdi
    0000162b: 	je	.Ltmp2959 # Offset: 5675
    0000162d: 	movq	0xe0(%rsp), %rax
    00001635: 	leaq	0x1(%rax), %rsi
    00001639: 	callq	_ZdlPvm@PLT # Offset: 5689
.Ltmp2959:
    0000163e: 	leaq	DATAat0x274a0(%rip), %rdx
    00001645: 	movq	%r13, %rsi
    00001648: 	movq	%rbx, %rdi
    0000164b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5707
    00001650: 	movq	%rbx, %r8
    00001653: 	leaq	_Z18fast_reverse_copy3IPmS0_EvT_S1_T0_(%rip), %rcx
    0000165a: 	movq	%r15, %rsi
    0000165d: 	movq	%rbp, %rdi
    00001660: 	movl	$0x800000, %edx
    00001665: 	callq	_Z23test_reverse_copy_sizesIPmPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5733
    0000166a: 	movq	0xd0(%rsp), %rdi
    00001672: 	cmpq	0x8(%rsp), %rdi
    00001677: 	je	.Ltmp2960 # Offset: 5751
    00001679: 	movq	0xe0(%rsp), %rax
    00001681: 	leaq	0x1(%rax), %rsi
    00001685: 	callq	_ZdlPvm@PLT # Offset: 5765
.Ltmp2960:
    0000168a: 	leaq	DATAat0x274c8(%rip), %rdx
    00001691: 	movq	%r13, %rsi
    00001694: 	movq	%rbx, %rdi
    00001697: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5783
    0000169c: 	movq	%rbx, %r8
    0000169f: 	leaq	_Z18fast_reverse_copy4IPmS0_EvT_S1_T0_(%rip), %rcx
    000016a6: 	movq	%r15, %rsi
    000016a9: 	movq	%rbp, %rdi
    000016ac: 	movl	$0x800000, %edx
    000016b1: 	callq	_Z23test_reverse_copy_sizesIPmPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5809
    000016b6: 	movq	0xd0(%rsp), %rdi
    000016be: 	cmpq	0x8(%rsp), %rdi
    000016c3: 	je	.Ltmp2961 # Offset: 5827
    000016c5: 	movq	0xe0(%rsp), %rax
    000016cd: 	leaq	0x1(%rax), %rsi
    000016d1: 	callq	_ZdlPvm@PLT # Offset: 5841
.Ltmp2961:
    000016d6: 	movl	0x1c(%rsp), %eax
    000016da: 	movq	0xb0(%rsp), %rdi
    000016e2: 	movl	%eax, iterations(%rip)
    000016e8: 	leaq	0xc0(%rsp), %rax
    000016f0: 	cmpq	%rax, %rdi
    000016f3: 	je	.Ltmp2962 # Offset: 5875
    000016f5: 	movq	0xc0(%rsp), %rax
    000016fd: 	leaq	0x1(%rax), %rsi
    00001701: 	callq	_ZdlPvm@PLT # Offset: 5889
.Ltmp2962:
    00001706: 	movq	0x90(%rsp), %rdi
    0000170e: 	leaq	0xa0(%rsp), %rax
    00001716: 	cmpq	%rax, %rdi
    00001719: 	je	.Ltmp2963 # Offset: 5913
    0000171b: 	movq	0xa0(%rsp), %rax
    00001723: 	leaq	0x1(%rax), %rsi
    00001727: 	callq	_ZdlPvm@PLT # Offset: 5927
.Ltmp2963:
    0000172c: 	movl	$0x8, %esi
    00001731: 	movq	%r15, %rdi
    00001734: 	callq	_ZdlPvm@PLT # Offset: 5940
    00001739: 	movq	%rbp, %rdi
    0000173c: 	movl	$0x8, %esi
    00001741: 	callq	_ZdlPvm@PLT # Offset: 5953
    00001746: 	movq	0x70(%rsp), %rdi
    0000174b: 	cmpq	0x38(%rsp), %rdi
    00001750: 	je	.Ltmp2964 # Offset: 5968
    00001752: 	movq	0x80(%rsp), %rax
    0000175a: 	leaq	0x1(%rax), %rsi
    0000175e: 	callq	_ZdlPvm@PLT # Offset: 5982
.Ltmp2964:
    00001763: 	movq	0xf8(%rsp), %rax
    0000176b: 	subq	%fs:0x28, %rax
    00001774: 	jne	.Ltmp2965 # Offset: 6004
    0000177a: 	addq	$0x108, %rsp
    00001781: 	popq	%rbx
    00001782: 	popq	%rbp
    00001783: 	popq	%r12
    00001785: 	popq	%r13
    00001787: 	popq	%r14
    00001789: 	popq	%r15
    0000178b: 	retq # Offset: 6027
    0000178c: 	nopl	(%rax) # Size: 4
.Ltmp2824:
    00001790: 	addq	$0x20, %rbp
    00001794: 	cmpq	%rbx, %rbp
    00001797: 	jne	.Ltmp2825 # Offset: 6039
    0000179d: 	addq	$0x8, %r13
    000017a1: 	cmpq	%r13, %r15
    000017a4: 	ja	.Ltmp2826 # Offset: 6052
    000017aa: 	jmp	.Ltmp2966 # Offset: 6058
.Ltmp2853:
    000017af: 	leaq	0x68(%rsp), %rsi
    000017b4: 	xorl	%edx, %edx
    000017b6: 	movq	%r14, %rdi
    000017b9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6073
    000017be: 	movq	%rax, (%r14)
    000017c1: 	movq	%rax, %rdi
    000017c4: 	movq	0x68(%rsp), %rax
    000017c9: 	movq	%rax, 0x10(%r14)
.Ltmp2995:
    000017cd: 	movq	0x8(%rsp), %rsi
    000017d2: 	movq	%r12, %rdx
    000017d5: 	callq	memcpy@PLT # Offset: 6101
    000017da: 	movq	0x68(%rsp), %r12
    000017df: 	movq	(%r14), %rdi
    000017e2: 	jmp	.Ltmp2967 # Offset: 6114
.Ltmp2843:
    000017e7: 	movq	%r12, %rsi
    000017ea: 	addq	$0x8, %r12
    000017ee: 	movq	%rcx, (%rsi)
    000017f1: 	cmpq	%r12, %r13
    000017f4: 	jne	.Ltmp2839 # Offset: 6132
    000017fa: 	jmp	.Ltmp2968 # Offset: 6138
.Ltmp2957:
    000017ff: 	testq	%r12, %r12
    00001802: 	jne	.Ltmp2969 # Offset: 6146
    00001808: 	movq	0x8(%rsp), %rax
    0000180d: 	jmp	.Ltmp2970 # Offset: 6157
.Ltmp2956:
    00001812: 	leaq	0x68(%rsp), %rsi
    00001817: 	xorl	%edx, %edx
    00001819: 	movq	%rbx, %rdi
    0000181c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6172
    00001821: 	movq	%rax, 0xd0(%rsp)
    00001829: 	movq	%rax, %rdi
    0000182c: 	movq	0x68(%rsp), %rax
    00001831: 	movq	%rax, 0xe0(%rsp)
.Ltmp2999:
    00001839: 	movq	%r12, %rdx
    0000183c: 	movq	%r14, %rsi
    0000183f: 	callq	memcpy@PLT # Offset: 6207
    00001844: 	movq	0x68(%rsp), %r12
    00001849: 	movq	0xd0(%rsp), %rax
    00001851: 	jmp	.Ltmp2970 # Offset: 6225
.Ltmp2857:
    00001856: 	movq	0xd0(%rsp), %rdx
    0000185e: 	leaq	DATAat0x271d0(%rip), %rsi
    00001865: 	movl	$0x1, %edi
    0000186a: 	xorl	%eax, %eax
    0000186c: 	callq	__printf_chk@PLT # Offset: 6252
    00001871: 	jmp	.Ltmp2971 # Offset: 6257
.Ltmp2871:
    00001876: 	movq	0xd0(%rsp), %rdx
    0000187e: 	leaq	DATAat0x271d0(%rip), %rsi
    00001885: 	movl	$0x1, %edi
    0000188a: 	xorl	%eax, %eax
    0000188c: 	callq	__printf_chk@PLT # Offset: 6284
    00001891: 	jmp	.Ltmp2972 # Offset: 6289
.Ltmp2910:
    00001896: 	movq	0xd0(%rsp), %rdx
    0000189e: 	leaq	DATAat0x271d0(%rip), %rsi
    000018a5: 	movl	$0x1, %edi
    000018aa: 	xorl	%eax, %eax
    000018ac: 	callq	__printf_chk@PLT # Offset: 6316
    000018b1: 	jmp	.Ltmp2973 # Offset: 6321
.Ltmp2885:
    000018b6: 	movq	0xd0(%rsp), %rdx
    000018be: 	leaq	DATAat0x271d0(%rip), %rsi
    000018c5: 	movl	$0x1, %edi
    000018ca: 	xorl	%eax, %eax
    000018cc: 	callq	__printf_chk@PLT # Offset: 6348
    000018d1: 	jmp	.Ltmp2974 # Offset: 6353
.Ltmp2920:
    000018d6: 	movq	0xd0(%rsp), %rdx
    000018de: 	leaq	DATAat0x271d0(%rip), %rsi
    000018e5: 	movl	$0x1, %edi
    000018ea: 	xorl	%eax, %eax
    000018ec: 	callq	__printf_chk@PLT # Offset: 6380
    000018f1: 	jmp	.Ltmp2975 # Offset: 6385
.Ltmp2930:
    000018f6: 	movq	0xd0(%rsp), %rdx
    000018fe: 	leaq	DATAat0x271d0(%rip), %rsi
    00001905: 	movl	$0x1, %edi
    0000190a: 	xorl	%eax, %eax
    0000190c: 	callq	__printf_chk@PLT # Offset: 6412
    00001911: 	jmp	.Ltmp2976 # Offset: 6417
.Ltmp2940:
    00001916: 	movq	0xd0(%rsp), %rdx
    0000191e: 	leaq	DATAat0x271d0(%rip), %rsi
    00001925: 	movl	$0x1, %edi
    0000192a: 	xorl	%eax, %eax
    0000192c: 	callq	__printf_chk@PLT # Offset: 6444
    00001931: 	jmp	.Ltmp2977 # Offset: 6449
.Ltmp2938:
    00001936: 	movq	-0x8(%rdx), %rax
    0000193a: 	addq	$0x200, %rax
    00001940: 	jmp	.Ltmp2978 # Offset: 6464
.Ltmp2937:
    00001945: 	movq	%rbx, %rsi
    00001948: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000194f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6479
    00001954: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000195b: 	jmp	.Ltmp2979 # Offset: 6491
.Ltmp2850:
    00001960: 	movq	%rbx, %rsi
    00001963: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000196a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6506
    0000196f: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001976: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000197d: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001984: 	jne	.Ltmp2980 # Offset: 6532
.Ltmp2855:
    0000198a: 	movq	-0x8(%rdx), %rax
    0000198e: 	addq	$0x200, %rax
    00001994: 	jmp	.Ltmp2980 # Offset: 6548
.Ltmp2927:
    00001999: 	movq	%rbx, %rsi
    0000199c: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000019a3: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6563
    000019a8: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000019af: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000019b6: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000019bd: 	jne	.Ltmp2981 # Offset: 6589
.Ltmp2928:
    000019c3: 	movq	-0x8(%rdx), %rax
    000019c7: 	addq	$0x200, %rax
    000019cd: 	jmp	.Ltmp2981 # Offset: 6605
.Ltmp2878:
    000019d2: 	movq	%rbx, %rsi
    000019d5: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000019dc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6620
    000019e1: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000019e8: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000019ef: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000019f6: 	jne	.Ltmp2982 # Offset: 6646
.Ltmp2883:
    000019fc: 	movq	-0x8(%rdx), %rax
    00001a00: 	addq	$0x200, %rax
    00001a06: 	jmp	.Ltmp2982 # Offset: 6662
.Ltmp2869:
    00001a0b: 	movq	-0x8(%rdx), %rax
    00001a0f: 	addq	$0x200, %rax
    00001a15: 	jmp	.Ltmp2983 # Offset: 6677
.Ltmp2908:
    00001a1a: 	movq	-0x8(%rdx), %rax
    00001a1e: 	addq	$0x200, %rax
    00001a24: 	jmp	.Ltmp2984 # Offset: 6692
.Ltmp2918:
    00001a29: 	movq	-0x8(%rdx), %rax
    00001a2d: 	addq	$0x200, %rax
    00001a33: 	jmp	.Ltmp2985 # Offset: 6707
.Ltmp2917:
    00001a38: 	movq	%rbx, %rsi
    00001a3b: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001a42: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6722
    00001a47: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001a4e: 	jmp	.Ltmp2986 # Offset: 6734
.Ltmp2827:
    00001a53: 	cmpq	0x8(%rsp), %rbp
    00001a58: 	je	.Ltmp2987 # Offset: 6744
.Ltmp2990:
    00001a5e: 	movq	(%rbp), %rdi
    00001a62: 	leaq	0x10(%rbp), %rax
    00001a66: 	cmpq	%rax, %rdi
    00001a69: 	je	.Ltmp2988 # Offset: 6761
.Ltmp2989:
    00001a6b: 	movq	0x10(%rbp), %rax
    00001a6f: 	addq	$0x20, %rbp
    00001a73: 	leaq	0x1(%rax), %rsi
    00001a77: 	callq	_ZdlPvm@PLT # Offset: 6775
    00001a7c: 	cmpq	%rbp, 0x8(%rsp)
    00001a81: 	je	.Ltmp2987 # Offset: 6785
    00001a87: 	movq	(%rbp), %rdi
    00001a8b: 	leaq	0x10(%rbp), %rax
    00001a8f: 	cmpq	%rax, %rdi
    00001a92: 	jne	.Ltmp2989 # Offset: 6802
.Ltmp2988:
    00001a94: 	addq	$0x20, %rbp
    00001a98: 	cmpq	%rbp, 0x8(%rsp)
    00001a9d: 	jne	.Ltmp2990 # Offset: 6813
    00001a9f: 	jmp	.Ltmp2987 # Offset: 6815
.Ltmp2864:
    00001aa4: 	movq	%rbx, %rsi
    00001aa7: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001aae: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6830
    00001ab3: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001aba: 	jmp	.Ltmp2991 # Offset: 6842
.Ltmp2907:
    00001abf: 	movq	%rbx, %rsi
    00001ac2: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001ac9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6857
    00001ace: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001ad5: 	jmp	.Ltmp2992 # Offset: 6869
.Ltmp2882:
    00001ada: 	cmpq	$0x0, 0x30(%rsp)
    00001ae0: 	je	.Ltmp2993 # Offset: 6880
    00001ae6: 	jmp	.Ltmp2994 # Offset: 6886
    00001ae8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2854:
    00001af0: 	testq	%r12, %r12
    00001af3: 	je	.Ltmp2967 # Offset: 6899
    00001af9: 	jmp	.Ltmp2995 # Offset: 6905
    00001afe: 	nop # Size: 2
.Ltmp2881:
    00001b00: 	leaq	0x68(%rsp), %rsi
    00001b05: 	xorl	%edx, %edx
    00001b07: 	movq	%r14, %rdi
    00001b0a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6922
    00001b0f: 	movq	%rax, (%r14)
    00001b12: 	movq	%rax, %rdi
    00001b15: 	movq	0x68(%rsp), %rax
    00001b1a: 	movq	%rax, 0x10(%r14)
.Ltmp2994:
    00001b1e: 	movq	0x30(%rsp), %rdx
    00001b23: 	movq	0x20(%rsp), %rsi
    00001b28: 	callq	memcpy@PLT # Offset: 6952
    00001b2d: 	movq	0x68(%rsp), %rax
    00001b32: 	movq	(%r14), %rdi
    00001b35: 	movq	%rax, 0x30(%rsp)
    00001b3a: 	jmp	.Ltmp2993 # Offset: 6970
.Ltmp2868:
    00001b3f: 	cmpq	$0x0, 0x30(%rsp)
    00001b45: 	je	.Ltmp2996 # Offset: 6981
    00001b4b: 	jmp	.Ltmp2997 # Offset: 6987
    00001b4d: 	nopl	(%rax) # Size: 3
.Ltmp2867:
    00001b50: 	leaq	0x68(%rsp), %rsi
    00001b55: 	xorl	%edx, %edx
    00001b57: 	movq	%r14, %rdi
    00001b5a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7002
    00001b5f: 	movq	%rax, (%r14)
    00001b62: 	movq	%rax, %rdi
    00001b65: 	movq	0x68(%rsp), %rax
    00001b6a: 	movq	%rax, 0x10(%r14)
.Ltmp2997:
    00001b6e: 	movq	0x30(%rsp), %rdx
    00001b73: 	movq	0x40(%rsp), %rsi
    00001b78: 	callq	memcpy@PLT # Offset: 7032
    00001b7d: 	movq	0x68(%rsp), %rax
    00001b82: 	movq	(%r14), %rdi
    00001b85: 	movq	%rax, 0x30(%rsp)
    00001b8a: 	jmp	.Ltmp2996 # Offset: 7050
.Ltmp2841:
    00001b8f: 	movq	%r14, %rcx
    00001b92: 	jmp	.Ltmp2998 # Offset: 7058
.Ltmp2969:
    00001b97: 	movq	0x8(%rsp), %rdi
    00001b9c: 	jmp	.Ltmp2999 # Offset: 7068
.Ltmp2866:
    00001ba1: 	leaq	DATAat0x27008(%rip), %rdi
    00001ba8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7080
.Ltmp2880:
    00001bad: 	leaq	DATAat0x27008(%rip), %rdi
    00001bb4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7092
.Ltmp2955:
    00001bb9: 	leaq	DATAat0x27008(%rip), %rdi
    00001bc0: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7104
.Ltmp2958:
    00001bc5: 	leaq	DATAat0x27184(%rip), %rdi
    00001bcc: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7116
.Ltmp2965:
    00001bd1: 	callq	__stack_chk_fail@PLT # Offset: 7121
.Ltmp2852:
    00001bd6: 	leaq	DATAat0x27008(%rip), %rdi
    00001bdd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7133
    00001be2: 	endbr64
.Ltmp3001:
    00001be6: 	movq	%rax, %rbx
    00001be9: 	jmp	.Ltmp3000 # Offset: 7145
    00001beb: 	endbr64
    00001bef: 	jmp	.Ltmp3001 # Offset: 7151
    00001bf1: 	endbr64
.Ltmp3010:
    00001bf5: 	movq	%rax, %rbx
    00001bf8: 	jmp	.Ltmp3002 # Offset: 7160
    00001bfd: 	endbr64
.Ltmp3004:
    00001c01: 	movq	%rax, %rbx
    00001c04: 	jmp	.Ltmp3003 # Offset: 7172
    00001c09: 	endbr64
    00001c0d: 	jmp	.Ltmp3004 # Offset: 7181
    00001c0f: 	endbr64
    00001c13: 	jmp	.Ltmp3004 # Offset: 7187
    00001c15: 	endbr64
    00001c19: 	jmp	.Ltmp3004 # Offset: 7193
    00001c1b: 	endbr64
    00001c1f: 	jmp	.Ltmp3004 # Offset: 7199
    00001c21: 	endbr64
    00001c25: 	movq	%rax, %rbx
    00001c28: 	jmp	.Ltmp3005 # Offset: 7208
    00001c2d: 	endbr64
    00001c31: 	jmp	.Ltmp3004 # Offset: 7217
.Ltmp3000:
    00001c33: 	movq	0xd0(%rsp), %rdi
    00001c3b: 	cmpq	0x8(%rsp), %rdi
    00001c40: 	jne	.Ltmp3006 # Offset: 7232
.Ltmp3009:
    00001c42: 	movl	$0x8, %esi
    00001c47: 	movq	%r15, %rdi
    00001c4a: 	callq	_ZdlPvm@PLT # Offset: 7242
.Ltmp3012:
    00001c4f: 	movq	%rbp, %rdi
    00001c52: 	movl	$0x8, %esi
    00001c57: 	movq	%rbx, %rbp
    00001c5a: 	callq	_ZdlPvm@PLT # Offset: 7258
.Ltmp3011:
    00001c5f: 	movq	0x70(%rsp), %rdi
    00001c64: 	cmpq	0x38(%rsp), %rdi
    00001c69: 	je	.Ltmp3007 # Offset: 7273
    00001c6b: 	movq	0x80(%rsp), %rax
    00001c73: 	leaq	0x1(%rax), %rsi
    00001c77: 	callq	_ZdlPvm@PLT # Offset: 7287
.Ltmp3007:
    00001c7c: 	movq	%rbp, %rdi
    00001c7f: 	callq	_Unwind_Resume@PLT # Offset: 7295
.Ltmp3002:
    00001c84: 	movq	0xd0(%rsp), %rdi
    00001c8c: 	cmpq	0x8(%rsp), %rdi
    00001c91: 	je	.Ltmp3008 # Offset: 7313
    00001c97: 	movq	0xe0(%rsp), %rax
    00001c9f: 	leaq	0x1(%rax), %rsi
    00001ca3: 	callq	_ZdlPvm@PLT # Offset: 7331
    00001ca8: 	jmp	.Ltmp3008 # Offset: 7336
.Ltmp3013:
    00001caa: 	movq	0xd0(%rsp), %rdi
    00001cb2: 	leaq	0xe0(%rsp), %rax
    00001cba: 	cmpq	%rax, %rdi
    00001cbd: 	je	.Ltmp3009 # Offset: 7357
.Ltmp3006:
    00001cbf: 	movq	0xe0(%rsp), %rax
    00001cc7: 	leaq	0x1(%rax), %rsi
    00001ccb: 	callq	_ZdlPvm@PLT # Offset: 7371
    00001cd0: 	jmp	.Ltmp3009 # Offset: 7376
.Ltmp3003:
    00001cd5: 	movq	0xd0(%rsp), %rdi
    00001cdd: 	cmpq	0x8(%rsp), %rdi
    00001ce2: 	je	.Ltmp3005 # Offset: 7394
    00001ce4: 	movq	0xe0(%rsp), %rax
    00001cec: 	leaq	0x1(%rax), %rsi
    00001cf0: 	callq	_ZdlPvm@PLT # Offset: 7408
.Ltmp3005:
    00001cf5: 	movq	0xb0(%rsp), %rdi
    00001cfd: 	leaq	0xc0(%rsp), %rax
    00001d05: 	cmpq	%rax, %rdi
    00001d08: 	je	.Ltmp3008 # Offset: 7432
    00001d0a: 	movq	0xc0(%rsp), %rax
    00001d12: 	leaq	0x1(%rax), %rsi
    00001d16: 	callq	_ZdlPvm@PLT # Offset: 7446
.Ltmp3008:
    00001d1b: 	movq	0x90(%rsp), %rdi
    00001d23: 	leaq	0xa0(%rsp), %rax
    00001d2b: 	cmpq	%rax, %rdi
    00001d2e: 	je	.Ltmp3009 # Offset: 7470
    00001d34: 	movq	0xa0(%rsp), %rax
    00001d3c: 	leaq	0x1(%rax), %rsi
    00001d40: 	callq	_ZdlPvm@PLT # Offset: 7488
    00001d45: 	jmp	.Ltmp3009 # Offset: 7493
    00001d4a: 	endbr64
    00001d4e: 	jmp	.Ltmp3010 # Offset: 7502
    00001d53: 	endbr64
    00001d57: 	jmp	.Ltmp3010 # Offset: 7511
    00001d5c: 	endbr64
    00001d60: 	jmp	.Ltmp3010 # Offset: 7520
    00001d65: 	endbr64
    00001d69: 	jmp	.Ltmp3010 # Offset: 7529
    00001d6e: 	endbr64
    00001d72: 	jmp	.Ltmp3010 # Offset: 7538
    00001d77: 	endbr64
    00001d7b: 	jmp	.Ltmp3010 # Offset: 7547
    00001d80: 	endbr64
    00001d84: 	jmp	.Ltmp3010 # Offset: 7556
    00001d89: 	endbr64
    00001d8d: 	jmp	.Ltmp3010 # Offset: 7565
    00001d92: 	endbr64
    00001d96: 	jmp	.Ltmp3010 # Offset: 7574
    00001d9b: 	endbr64
    00001d9f: 	jmp	.Ltmp3010 # Offset: 7583
    00001da4: 	endbr64
    00001da8: 	jmp	.Ltmp3010 # Offset: 7592
    00001dad: 	endbr64
    00001db1: 	jmp	.Ltmp3010 # Offset: 7601
    00001db6: 	endbr64
    00001dba: 	jmp	.Ltmp3010 # Offset: 7610
    00001dbf: 	endbr64
    00001dc3: 	jmp	.Ltmp3010 # Offset: 7619
    00001dc8: 	endbr64
    00001dcc: 	jmp	.Ltmp3010 # Offset: 7628
    00001dd1: 	endbr64
    00001dd5: 	jmp	.Ltmp3010 # Offset: 7637
    00001dda: 	endbr64
    00001dde: 	jmp	.Ltmp3001 # Offset: 7646
    00001de3: 	endbr64
    00001de7: 	jmp	.Ltmp3001 # Offset: 7655
    00001dec: 	endbr64
    00001df0: 	jmp	.Ltmp3001 # Offset: 7664
    00001df5: 	endbr64
    00001df9: 	jmp	.Ltmp3001 # Offset: 7673
    00001dfe: 	endbr64
    00001e02: 	jmp	.Ltmp3001 # Offset: 7682
    00001e07: 	endbr64
    00001e0b: 	jmp	.Ltmp3001 # Offset: 7691
    00001e10: 	endbr64
    00001e14: 	movq	%rax, %rbx
    00001e17: 	jmp	.Ltmp3008 # Offset: 7703
    00001e1c: 	endbr64
    00001e20: 	jmp	.Ltmp3010 # Offset: 7712
    00001e25: 	endbr64
    00001e29: 	movq	%rax, %rbx
    00001e2c: 	jmp	.Ltmp3009 # Offset: 7724
    00001e31: 	endbr64
    00001e35: 	movq	%rax, %rbp
    00001e38: 	jmp	.Ltmp3011 # Offset: 7736
    00001e3d: 	endbr64
    00001e41: 	movq	%rax, %rbx
    00001e44: 	jmp	.Ltmp3012 # Offset: 7748
    00001e49: 	endbr64
    00001e4d: 	movq	%rax, %rbx
    00001e50: 	jmp	.Ltmp3013 # Offset: 7760
    00001e55: 	endbr64
    00001e59: 	jmp	.Ltmp3004 # Offset: 7769
    00001e5e: 	endbr64
    00001e62: 	jmp	.Ltmp3004 # Offset: 7778
    00001e67: 	endbr64
    00001e6b: 	jmp	.Ltmp3004 # Offset: 7787
    00001e70: 	endbr64
    00001e74: 	jmp	.Ltmp3004 # Offset: 7796
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeImEvv"

Binary Function "_Z11TestOneTypeIfEvv" after disassembly {
  Number      : 247
  State       : disassembled
  Address     : 0x245d0
  Size        : 0x1d9e
  MaxSize     : 0x1d9e
  Offset      : 0x245d0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIfEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0246:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x108, %rsp
    00000015: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm7
    0000001d: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm6
    00000025: 	movq	%fs:0x28, %rax
    0000002e: 	movq	%rax, 0xf8(%rsp)
    00000036: 	movl	iterations(%rip), %eax
    0000003c: 	movq	"_ZL7gLabels/1"+56(%rip), %r14
    00000043: 	movl	$0x616f6c66, 0x80(%rsp)
    0000004e: 	movaps	%xmm7, 0x20(%rsp)
    00000053: 	movq	%xmm7, %rbp
    00000058: 	movhlps	%xmm6, %xmm7
    0000005b: 	movq	%xmm7, %rbx
    00000060: 	movb	$0x74, 0x84(%rsp)
    00000068: 	leaq	0x8(%rbx), %r12
    0000006c: 	movb	$0x0, 0x85(%rsp)
    00000074: 	movq	$0x5, 0x78(%rsp)
    0000007d: 	movaps	%xmm6, 0x40(%rsp)
    00000082: 	movl	%eax, 0x1c(%rsp)
    00000086: 	leaq	0x80(%rsp), %rax
    0000008e: 	movq	%rax, 0x38(%rsp)
    00000093: 	movq	%rax, 0x70(%rsp)
    00000098: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000009f: 	movq	%xmm7, 0x50(%rsp)
    000000a5: 	movq	%rax, 0x8(%rsp)
    000000aa: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    000000b1: 	movq	%xmm6, 0x10(%rsp)
    000000b7: 	movq	%rax, 0x30(%rsp)
    000000bc: 	cmpq	%r12, %rax
    000000bf: 	jbe	.Ltmp3014 # Offset: 191
    000000c1: 	movq	%rbp, 0x58(%rsp)
    000000c6: 	movq	%r12, %r13
    000000c9: 	movq	%rax, %r15
    000000cc: 	nopl	(%rax) # Size: 4
.Ltmp3017:
    000000d0: 	movq	(%r13), %rbp
    000000d4: 	leaq	0x200(%rbp), %rbx
    000000db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3016:
    000000e0: 	movq	(%rbp), %rdi
    000000e4: 	leaq	0x10(%rbp), %rdx
    000000e8: 	cmpq	%rdx, %rdi
    000000eb: 	je	.Ltmp3015 # Offset: 235
    000000f1: 	movq	0x10(%rbp), %rax
    000000f5: 	addq	$0x20, %rbp
    000000f9: 	leaq	0x1(%rax), %rsi
    000000fd: 	callq	_ZdlPvm@PLT # Offset: 253
    00000102: 	cmpq	%rbp, %rbx
    00000105: 	jne	.Ltmp3016 # Offset: 261
    00000107: 	addq	$0x8, %r13
    0000010b: 	cmpq	%r13, %r15
    0000010e: 	ja	.Ltmp3017 # Offset: 270
.Ltmp3157:
    00000110: 	movq	0x58(%rsp), %rbp
.Ltmp3014:
    00000115: 	movq	0x50(%rsp), %rbx
    0000011a: 	cmpq	%rbx, 0x30(%rsp)
    0000011f: 	jne	.Ltmp3018 # Offset: 287
    00000121: 	jmp	.Ltmp3019 # Offset: 289
    00000126: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3021:
    00000130: 	movq	0x10(%rbp), %rax
    00000134: 	addq	$0x20, %rbp
    00000138: 	leaq	0x1(%rax), %rsi
    0000013c: 	callq	_ZdlPvm@PLT # Offset: 316
.Ltmp3018:
    00000141: 	cmpq	%rbp, 0x10(%rsp)
    00000146: 	je	.Ltmp3020 # Offset: 326
.Ltmp3022:
    00000148: 	movq	(%rbp), %rdi
    0000014c: 	leaq	0x10(%rbp), %rax
    00000150: 	cmpq	%rax, %rdi
    00000153: 	jne	.Ltmp3021 # Offset: 339
    00000155: 	addq	$0x20, %rbp
    00000159: 	cmpq	0x10(%rsp), %rbp
    0000015e: 	jne	.Ltmp3022 # Offset: 350
    00000160: 	cmpq	%r14, 0x8(%rsp)
    00000165: 	je	.Ltmp3023 # Offset: 357
    00000167: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3025:
    00000170: 	movq	(%r14), %rdi
    00000173: 	leaq	0x10(%r14), %rax
    00000177: 	cmpq	%rax, %rdi
    0000017a: 	je	.Ltmp3024 # Offset: 378
    0000017c: 	movq	0x10(%r14), %rax
    00000180: 	leaq	0x1(%rax), %rsi
    00000184: 	callq	_ZdlPvm@PLT # Offset: 388
.Ltmp3024:
    00000189: 	addq	$0x20, %r14
.Ltmp3020:
    0000018d: 	cmpq	%r14, 0x8(%rsp)
    00000192: 	jne	.Ltmp3025 # Offset: 402
.Ltmp3023:
    00000194: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    0000019b: 	leaq	0x8(%rax), %rbx
    0000019f: 	cmpq	%r12, %rbx
    000001a2: 	jbe	.Ltmp3026 # Offset: 418
    000001a4: 	nopl	(%rax) # Size: 4
.Ltmp3027:
    000001a8: 	movq	(%r12), %rdi
    000001ac: 	movl	$0x200, %esi
    000001b1: 	addq	$0x8, %r12
    000001b5: 	callq	_ZdlPvm@PLT # Offset: 437
    000001ba: 	cmpq	%r12, %rbx
    000001bd: 	ja	.Ltmp3027 # Offset: 445
.Ltmp3026:
    000001bf: 	movdqa	0x20(%rsp), %xmm7
    000001c5: 	movl	$0x4000000, %edi
    000001ca: 	movaps	%xmm7, "_ZL7gLabels/1"+48(%rip)
    000001d1: 	movdqa	0x40(%rsp), %xmm7
    000001d7: 	movaps	%xmm7, "_ZL7gLabels/1"+64(%rip)
    000001de: 	callq	_Znam@PLT # Offset: 478
    000001e3: 	movl	$0x4000000, %edi
    000001e8: 	movq	%rax, %rbp
    000001eb: 	callq	_Znam@PLT # Offset: 491
    000001f0: 	movq	%rax, %r15
    000001f3: 	movslq	init_value(%rip), %rax
    000001fa: 	leaq	0x4000000(%rbp), %r12
    00000201: 	movq	%rbp, %rdx
    00000204: 	addq	$0x1000000, %rax
    0000020a: 	jmp	.Ltmp3028 # Offset: 522
    0000020c: 	nopl	(%rax) # Size: 4
.Ltmp3030:
    00000210: 	pxor	%xmm0, %xmm0
    00000214: 	cvtsi2ss	%rax, %xmm0
    00000219: 	movss	%xmm0, -0x4(%rdx)
    0000021e: 	cmpq	%rdx, %r12
    00000221: 	je	.Ltmp3029 # Offset: 545
.Ltmp3028:
    00000223: 	addq	$0x4, %rdx
    00000227: 	subq	$0x1, %rax
    0000022b: 	jns	.Ltmp3030 # Offset: 555
    0000022d: 	movq	%rax, %rcx
    00000230: 	movq	%rax, %rsi
    00000233: 	pxor	%xmm0, %xmm0
    00000237: 	shrq	%rcx
    0000023a: 	andl	$0x1, %esi
    0000023d: 	orq	%rsi, %rcx
    00000240: 	cvtsi2ss	%rcx, %xmm0
    00000245: 	addss	%xmm0, %xmm0
    00000249: 	movss	%xmm0, -0x4(%rdx)
    0000024e: 	cmpq	%rdx, %r12
    00000251: 	jne	.Ltmp3028 # Offset: 593
.Ltmp3029:
    00000253: 	movl	$0x30, %edx
    00000258: 	movq	%r12, %rsi
    0000025b: 	movq	%rbp, %rdi
    0000025e: 	movl	$0x4, %ebx
    00000263: 	callq	"_ZSt16__introsort_loopIPflN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_T1_.isra.0/1" # Offset: 611
    00000268: 	leaq	0x4(%rbp), %rax
    0000026c: 	leaq	0x40(%rbp), %r13
    00000270: 	movq	%rax, 0x20(%rsp)
    00000275: 	movq	%rax, %r14
    00000278: 	jmp	.Ltmp3031 # Offset: 632
    0000027a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3034:
    00000280: 	cmpq	%r14, %rbp
    00000283: 	je	.Ltmp3032 # Offset: 643
    00000285: 	movq	%r14, %rdx
    00000288: 	leaq	(%rbp,%rbx), %rdi
    0000028d: 	movq	%rbp, %rsi
    00000290: 	movss	%xmm1, 0x8(%rsp)
    00000296: 	subq	%rbp, %rdx
    00000299: 	callq	memmove@PLT # Offset: 665
    0000029e: 	movss	0x8(%rsp), %xmm1
.Ltmp3032:
    000002a4: 	addq	$0x4, %r14
    000002a8: 	movss	%xmm1, (%rbp)
    000002ad: 	cmpq	%r14, %r13
    000002b0: 	je	.Ltmp3033 # Offset: 688
.Ltmp3031:
    000002b2: 	movss	(%r14), %xmm1
    000002b7: 	movss	(%rbp), %xmm0
    000002bc: 	comiss	%xmm1, %xmm0
    000002bf: 	ja	.Ltmp3034 # Offset: 703
    000002c1: 	movss	-0x4(%r14), %xmm0
    000002c7: 	leaq	-0x4(%r14), %rax
    000002cb: 	comiss	%xmm1, %xmm0
    000002ce: 	jbe	.Ltmp3035 # Offset: 718
    000002d4: 	nopl	(%rax) # Size: 4
.Ltmp3036:
    000002d8: 	movss	%xmm0, 0x4(%rax)
    000002dd: 	movq	%rax, %rdx
    000002e0: 	movss	-0x4(%rax), %xmm0
    000002e5: 	subq	$0x4, %rax
    000002e9: 	comiss	%xmm1, %xmm0
    000002ec: 	ja	.Ltmp3036 # Offset: 748
.Ltmp3183:
    000002ee: 	addq	$0x4, %r14
    000002f2: 	movss	%xmm1, (%rdx)
    000002f6: 	cmpq	%r14, %r13
    000002f9: 	jne	.Ltmp3031 # Offset: 761
    000002fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3033:
    00000300: 	movss	(%r13), %xmm1
    00000306: 	movss	-0x4(%r13), %xmm0
    0000030c: 	leaq	-0x4(%r13), %rax
    00000310: 	comiss	%xmm1, %xmm0
    00000313: 	jbe	.Ltmp3037 # Offset: 787
    00000319: 	nopl	(%rax) # Size: 7
.Ltmp3038:
    00000320: 	movss	%xmm0, 0x4(%rax)
    00000325: 	movq	%rax, %rdx
    00000328: 	movss	-0x4(%rax), %xmm0
    0000032d: 	subq	$0x4, %rax
    00000331: 	comiss	%xmm1, %xmm0
    00000334: 	ja	.Ltmp3038 # Offset: 820
    00000336: 	addq	$0x4, %r13
    0000033a: 	movss	%xmm1, (%rdx)
    0000033e: 	cmpq	%r13, %r12
    00000341: 	jne	.Ltmp3033 # Offset: 833
.Ltmp3159:
    00000343: 	leaq	0xd0(%rsp), %rbx
    0000034b: 	leaq	0x70(%rsp), %r13
    00000350: 	leaq	0x7d00(%rbp), %rax
    00000357: 	leaq	DATAat0x27268(%rip), %rdx
    0000035e: 	movq	%r13, %rsi
    00000361: 	movq	%rbx, %rdi
    00000364: 	movq	%rax, 0x10(%rsp)
    00000369: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 873
    0000036e: 	callq	clock@PLT # Offset: 878
    00000373: 	movl	iterations(%rip), %r8d
    0000037a: 	xorl	%edi, %edi
    0000037c: 	leaq	0x7cfc(%rbp), %rsi
    00000383: 	movq	%rax, start_time(%rip)
    0000038a: 	leaq	0x3e80(%rbp), %rcx
    00000391: 	testl	%r8d, %r8d
    00000394: 	jle	.Ltmp3039 # Offset: 916
    00000396: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3043:
    000003a0: 	movq	%rbp, %rdx
    000003a3: 	movq	%rsi, %rax
    000003a6: 	jmp	.Ltmp3040 # Offset: 934
    000003a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3042:
    000003b0: 	subq	$0x4, %rax
    000003b4: 	addq	$0x4, %rdx
    000003b8: 	cmpq	%rdx, %rax
    000003bb: 	je	.Ltmp3041 # Offset: 955
.Ltmp3040:
    000003bd: 	movss	(%rdx), %xmm0
    000003c1: 	movss	(%rax), %xmm1
    000003c5: 	movss	%xmm1, (%rdx)
    000003c9: 	movss	%xmm0, (%rax)
    000003cd: 	cmpq	%rcx, %rax
    000003d0: 	jne	.Ltmp3042 # Offset: 976
.Ltmp3041:
    000003d2: 	addl	$0x1, %edi
    000003d5: 	cmpl	%r8d, %edi
    000003d8: 	jne	.Ltmp3043 # Offset: 984
.Ltmp3039:
    000003da: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000003e1: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    000003e8: 	subq	$0x20, %rax
    000003ec: 	cmpq	%rax, %r14
    000003ef: 	je	.Ltmp3044 # Offset: 1007
    000003f5: 	leaq	0x10(%r14), %rdi
    000003f9: 	movq	0xd8(%rsp), %r12
    00000401: 	movq	%rdi, (%r14)
    00000404: 	movq	0xd0(%rsp), %rax
    0000040c: 	movq	%rax, %rcx
    0000040f: 	movq	%rax, 0x8(%rsp)
    00000414: 	addq	%r12, %rcx
    00000417: 	je	.Ltmp3045 # Offset: 1047
    00000419: 	testq	%rax, %rax
    0000041c: 	je	.Ltmp3046 # Offset: 1052
.Ltmp3045:
    00000422: 	movq	%r12, 0x68(%rsp)
    00000427: 	cmpq	$0xf, %r12
    0000042b: 	ja	.Ltmp3047 # Offset: 1067
    00000431: 	cmpq	$0x1, %r12
    00000435: 	jne	.Ltmp3048 # Offset: 1077
    0000043b: 	movq	0x8(%rsp), %rax
    00000440: 	movzbl	(%rax), %eax
    00000443: 	movb	%al, 0x10(%r14)
.Ltmp3158:
    00000447: 	movq	%r12, 0x8(%r14)
    0000044b: 	movb	$0x0, (%rdi,%r12)
    00000450: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000457: 	addq	$0x20, %rax
    0000045b: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp3173:
    00000462: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000469: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000470: 	je	.Ltmp3049 # Offset: 1136
.Ltmp3172:
    00000476: 	movq	-0x20(%rax), %r12
    0000047a: 	callq	clock@PLT # Offset: 1146
    0000047f: 	pxor	%xmm0, %xmm0
    00000483: 	movq	%rax, end_time(%rip)
    0000048a: 	movq	%r12, %rdi
    0000048d: 	subq	start_time(%rip), %rax
    00000494: 	cvtsi2sd	%rax, %xmm0
    00000499: 	divsd	DATAat0x276b0(%rip), %xmm0
    000004a1: 	callq	_Z13record_resultdPKc # Offset: 1185
    000004a6: 	movq	0x20(%rsp), %rax
    000004ab: 	movq	0x10(%rsp), %rdx
    000004b0: 	movq	%rax, %r12
    000004b3: 	jmp	.Ltmp3050 # Offset: 1203
    000004b5: 	nopl	(%rax) # Size: 3
.Ltmp3052:
    000004b8: 	movss	(%rax), %xmm0
    000004bc: 	movss	-0x4(%rax), %xmm1
    000004c1: 	addq	$0x4, %rax
    000004c5: 	comiss	%xmm0, %xmm1
    000004c8: 	ja	.Ltmp3051 # Offset: 1224
.Ltmp3050:
    000004ce: 	cmpq	%rax, %rdx
    000004d1: 	jne	.Ltmp3052 # Offset: 1233
.Ltmp3161:
    000004d3: 	movq	0xd0(%rsp), %rdi
    000004db: 	leaq	0xe0(%rsp), %rax
    000004e3: 	movq	%rax, 0x8(%rsp)
    000004e8: 	cmpq	%rax, %rdi
    000004eb: 	je	.Ltmp3053 # Offset: 1259
    000004ed: 	movq	0xe0(%rsp), %rax
    000004f5: 	leaq	0x1(%rax), %rsi
    000004f9: 	callq	_ZdlPvm@PLT # Offset: 1273
.Ltmp3053:
    000004fe: 	leaq	DATAat0x27284(%rip), %rdx
    00000505: 	movq	%r13, %rsi
    00000508: 	movq	%rbx, %rdi
    0000050b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1291
    00000510: 	callq	clock@PLT # Offset: 1296
    00000515: 	movl	iterations(%rip), %r8d
    0000051c: 	xorl	%edi, %edi
    0000051e: 	leaq	0x7cfc(%rbp), %rsi
    00000525: 	movq	%rax, start_time(%rip)
    0000052c: 	leaq	0x3e80(%rbp), %rcx
    00000533: 	testl	%r8d, %r8d
    00000536: 	jle	.Ltmp3054 # Offset: 1334
    00000538: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3057:
    00000540: 	movq	%rsi, %rdx
    00000543: 	movq	%rbp, %rax
    00000546: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3056:
    00000550: 	cmpq	%rax, %rdx
    00000553: 	je	.Ltmp3055 # Offset: 1363
    00000555: 	movss	(%rdx), %xmm1
    00000559: 	movss	(%rax), %xmm0
    0000055d: 	addq	$0x4, %rax
    00000561: 	subq	$0x4, %rdx
    00000565: 	movss	%xmm1, -0x4(%rax)
    0000056a: 	movss	%xmm0, 0x4(%rdx)
    0000056f: 	cmpq	%rcx, %rax
    00000572: 	jne	.Ltmp3056 # Offset: 1394
.Ltmp3055:
    00000574: 	addl	$0x1, %edi
    00000577: 	cmpl	%r8d, %edi
    0000057a: 	jne	.Ltmp3057 # Offset: 1402
.Ltmp3054:
    0000057c: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000583: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    0000058a: 	subq	$0x20, %rax
    0000058e: 	cmpq	%rax, %r14
    00000591: 	je	.Ltmp3058 # Offset: 1425
    00000597: 	leaq	0x10(%r14), %rdi
    0000059b: 	movq	0xd8(%rsp), %rsi
    000005a3: 	movq	%rdi, (%r14)
    000005a6: 	movq	0xd0(%rsp), %rcx
    000005ae: 	movq	%rsi, 0x30(%rsp)
    000005b3: 	movq	%rcx, %rax
    000005b6: 	movq	%rcx, 0x40(%rsp)
    000005bb: 	addq	%rsi, %rax
    000005be: 	je	.Ltmp3059 # Offset: 1470
    000005c0: 	testq	%rcx, %rcx
    000005c3: 	je	.Ltmp3060 # Offset: 1475
.Ltmp3059:
    000005c9: 	movq	0x30(%rsp), %rax
    000005ce: 	movq	%rax, 0x68(%rsp)
    000005d3: 	cmpq	$0xf, %rax
    000005d7: 	ja	.Ltmp3061 # Offset: 1495
    000005dd: 	cmpq	$0x1, 0x30(%rsp)
    000005e3: 	jne	.Ltmp3062 # Offset: 1507
    000005e9: 	movq	0x40(%rsp), %rax
    000005ee: 	movzbl	(%rax), %eax
    000005f1: 	movb	%al, 0x10(%r14)
.Ltmp3178:
    000005f5: 	movq	0x30(%rsp), %rax
    000005fa: 	movq	%rax, 0x8(%r14)
    000005fe: 	movb	$0x0, (%rdi,%rax)
    00000602: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000609: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000610: 	addq	$0x20, %rax
    00000614: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000061b: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000622: 	je	.Ltmp3063 # Offset: 1570
.Ltmp3171:
    00000628: 	movq	-0x20(%rax), %r14
    0000062c: 	callq	clock@PLT # Offset: 1580
    00000631: 	pxor	%xmm0, %xmm0
    00000635: 	movq	%rax, end_time(%rip)
    0000063c: 	movq	%r14, %rdi
    0000063f: 	subq	start_time(%rip), %rax
    00000646: 	cvtsi2sd	%rax, %xmm0
    0000064b: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000653: 	callq	_Z13record_resultdPKc # Offset: 1619
    00000658: 	movq	0x20(%rsp), %rax
    0000065d: 	movq	0x10(%rsp), %rdx
    00000662: 	jmp	.Ltmp3064 # Offset: 1634
    00000664: 	nopl	(%rax) # Size: 4
.Ltmp3066:
    00000668: 	movss	(%rax), %xmm0
    0000066c: 	movss	-0x4(%rax), %xmm1
    00000671: 	addq	$0x4, %rax
    00000675: 	comiss	%xmm0, %xmm1
    00000678: 	ja	.Ltmp3065 # Offset: 1656
.Ltmp3064:
    0000067e: 	cmpq	%rax, %rdx
    00000681: 	jne	.Ltmp3066 # Offset: 1665
.Ltmp3160:
    00000683: 	movq	0xd0(%rsp), %rdi
    0000068b: 	cmpq	0x8(%rsp), %rdi
    00000690: 	je	.Ltmp3067 # Offset: 1680
    00000692: 	movq	0xe0(%rsp), %rax
    0000069a: 	leaq	0x1(%rax), %rsi
    0000069e: 	callq	_ZdlPvm@PLT # Offset: 1694
.Ltmp3067:
    000006a3: 	leaq	DATAat0x272a2(%rip), %rdx
    000006aa: 	movq	%r13, %rsi
    000006ad: 	movq	%rbx, %rdi
    000006b0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1712
    000006b5: 	callq	clock@PLT # Offset: 1717
    000006ba: 	movl	iterations(%rip), %r8d
    000006c1: 	xorl	%edi, %edi
    000006c3: 	leaq	0x7cfc(%rbp), %rsi
    000006ca: 	movq	%rax, start_time(%rip)
    000006d1: 	leaq	0x3e80(%rbp), %rcx
    000006d8: 	testl	%r8d, %r8d
    000006db: 	jle	.Ltmp3068 # Offset: 1755
    000006dd: 	nopl	(%rax) # Size: 3
.Ltmp3071:
    000006e0: 	movq	%rsi, %rdx
    000006e3: 	movq	%rbp, %rax
    000006e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3070:
    000006f0: 	cmpq	%rax, %rdx
    000006f3: 	je	.Ltmp3069 # Offset: 1779
    000006f5: 	movss	(%rdx), %xmm1
    000006f9: 	movss	(%rax), %xmm0
    000006fd: 	addq	$0x4, %rax
    00000701: 	subq	$0x4, %rdx
    00000705: 	movss	%xmm1, -0x4(%rax)
    0000070a: 	movss	%xmm0, 0x4(%rdx)
    0000070f: 	cmpq	%rcx, %rax
    00000712: 	jne	.Ltmp3070 # Offset: 1810
.Ltmp3069:
    00000714: 	addl	$0x1, %edi
    00000717: 	cmpl	%r8d, %edi
    0000071a: 	jne	.Ltmp3071 # Offset: 1818
.Ltmp3068:
    0000071c: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000723: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    0000072a: 	subq	$0x20, %rax
    0000072e: 	cmpq	%rax, %r14
    00000731: 	je	.Ltmp3072 # Offset: 1841
    00000737: 	leaq	0x10(%r14), %rdi
    0000073b: 	movq	0xd8(%rsp), %rsi
    00000743: 	movq	%rdi, (%r14)
    00000746: 	movq	0xd0(%rsp), %rcx
    0000074e: 	movq	%rsi, 0x30(%rsp)
    00000753: 	movq	%rcx, %rax
    00000756: 	movq	%rcx, 0x20(%rsp)
    0000075b: 	addq	%rsi, %rax
    0000075e: 	je	.Ltmp3073 # Offset: 1886
    00000760: 	testq	%rcx, %rcx
    00000763: 	je	.Ltmp3074 # Offset: 1891
.Ltmp3073:
    00000769: 	movq	0x30(%rsp), %rax
    0000076e: 	movq	%rax, 0x68(%rsp)
    00000773: 	cmpq	$0xf, %rax
    00000777: 	ja	.Ltmp3075 # Offset: 1911
    0000077d: 	cmpq	$0x1, 0x30(%rsp)
    00000783: 	jne	.Ltmp3076 # Offset: 1923
    00000789: 	movq	0x20(%rsp), %rax
    0000078e: 	movzbl	(%rax), %eax
    00000791: 	movb	%al, 0x10(%r14)
.Ltmp3180:
    00000795: 	movq	0x30(%rsp), %rax
    0000079a: 	movq	%rax, 0x8(%r14)
    0000079e: 	movb	$0x0, (%rdi,%rax)
    000007a2: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000007a9: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000007b0: 	addq	$0x20, %rax
    000007b4: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000007bb: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000007c2: 	je	.Ltmp3077 # Offset: 1986
.Ltmp3167:
    000007c8: 	movq	-0x20(%rax), %r14
    000007cc: 	callq	clock@PLT # Offset: 1996
    000007d1: 	pxor	%xmm0, %xmm0
    000007d5: 	movq	%rax, end_time(%rip)
    000007dc: 	movq	%r14, %rdi
    000007df: 	subq	start_time(%rip), %rax
    000007e6: 	cvtsi2sd	%rax, %xmm0
    000007eb: 	divsd	DATAat0x276b0(%rip), %xmm0
    000007f3: 	callq	_Z13record_resultdPKc # Offset: 2035
    000007f8: 	movq	0x10(%rsp), %rax
    000007fd: 	jmp	.Ltmp3078 # Offset: 2045
    000007ff: 	nop # Size: 1
.Ltmp3080:
    00000800: 	movss	(%r12), %xmm0
    00000806: 	movss	-0x4(%r12), %xmm1
    0000080d: 	addq	$0x4, %r12
    00000811: 	comiss	%xmm0, %xmm1
    00000814: 	ja	.Ltmp3079 # Offset: 2068
.Ltmp3078:
    0000081a: 	cmpq	%r12, %rax
    0000081d: 	jne	.Ltmp3080 # Offset: 2077
.Ltmp3166:
    0000081f: 	movq	0xd0(%rsp), %rdi
    00000827: 	cmpq	0x8(%rsp), %rdi
    0000082c: 	je	.Ltmp3081 # Offset: 2092
    0000082e: 	movq	0xe0(%rsp), %rax
    00000836: 	leaq	0x1(%rax), %rsi
    0000083a: 	callq	_ZdlPvm@PLT # Offset: 2106
.Ltmp3081:
    0000083f: 	leaq	DATAat0x272be(%rip), %rdx
    00000846: 	movq	%r13, %rsi
    00000849: 	movq	%rbx, %rdi
    0000084c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2124
    00000851: 	movq	0x10(%rsp), %rsi
    00000856: 	movq	%rbx, %rcx
    00000859: 	leaq	_ZSt7reverseIPfEvT_S1_(%rip), %rdx
    00000860: 	movq	%rbp, %rdi
    00000863: 	callq	_Z12test_reverseIPfPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2147
    00000868: 	movq	0xd0(%rsp), %rdi
    00000870: 	cmpq	0x8(%rsp), %rdi
    00000875: 	je	.Ltmp3082 # Offset: 2165
    00000877: 	movq	0xe0(%rsp), %rax
    0000087f: 	leaq	0x1(%rax), %rsi
    00000883: 	callq	_ZdlPvm@PLT # Offset: 2179
.Ltmp3082:
    00000888: 	leaq	DATAat0x272da(%rip), %rdx
    0000088f: 	movq	%r13, %rsi
    00000892: 	movq	%rbx, %rdi
    00000895: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2197
    0000089a: 	movq	0x10(%rsp), %rsi
    0000089f: 	movq	%rbx, %rcx
    000008a2: 	leaq	_Z17my_simple_reverseIPfEvT_S1_(%rip), %rdx
    000008a9: 	movq	%rbp, %rdi
    000008ac: 	callq	_Z12test_reverseIPfPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2220
    000008b1: 	movq	0xd0(%rsp), %rdi
    000008b9: 	cmpq	0x8(%rsp), %rdi
    000008be: 	je	.Ltmp3083 # Offset: 2238
    000008c0: 	movq	0xe0(%rsp), %rax
    000008c8: 	leaq	0x1(%rax), %rsi
    000008cc: 	callq	_ZdlPvm@PLT # Offset: 2252
.Ltmp3083:
    000008d1: 	leaq	DATAat0x272f8(%rip), %rdx
    000008d8: 	movq	%r13, %rsi
    000008db: 	movq	%rbx, %rdi
    000008de: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2270
    000008e3: 	movq	0x10(%rsp), %rsi
    000008e8: 	movq	%rbx, %rcx
    000008eb: 	leaq	_Z15my_fast_reverseIPfEvT_S1_(%rip), %rdx
    000008f2: 	movq	%rbp, %rdi
    000008f5: 	callq	_Z12test_reverseIPfPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2293
    000008fa: 	movq	0xd0(%rsp), %rdi
    00000902: 	cmpq	0x8(%rsp), %rdi
    00000907: 	je	.Ltmp3084 # Offset: 2311
    00000909: 	movq	0xe0(%rsp), %rax
    00000911: 	leaq	0x1(%rax), %rsi
    00000915: 	callq	_ZdlPvm@PLT # Offset: 2325
.Ltmp3084:
    0000091a: 	leaq	DATAat0x27314(%rip), %rdx
    00000921: 	movq	%r13, %rsi
    00000924: 	movq	%rbx, %rdi
    00000927: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2343
    0000092c: 	movq	0x10(%rsp), %rsi
    00000931: 	movq	%rbx, %rcx
    00000934: 	leaq	_Z13fast_reverse2IPfEvT_S1_(%rip), %rdx
    0000093b: 	movq	%rbp, %rdi
    0000093e: 	callq	_Z12test_reverseIPfPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2366
    00000943: 	movq	0xd0(%rsp), %rdi
    0000094b: 	cmpq	0x8(%rsp), %rdi
    00000950: 	je	.Ltmp3085 # Offset: 2384
    00000952: 	movq	0xe0(%rsp), %rax
    0000095a: 	leaq	0x1(%rax), %rsi
    0000095e: 	callq	_ZdlPvm@PLT # Offset: 2398
.Ltmp3085:
    00000963: 	leaq	DATAat0x27331(%rip), %rdx
    0000096a: 	movq	%r13, %rsi
    0000096d: 	movq	%rbx, %rdi
    00000970: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2416
    00000975: 	movq	0x10(%rsp), %rsi
    0000097a: 	movq	%rbx, %rcx
    0000097d: 	leaq	_Z13fast_reverse3IPfEvT_S1_(%rip), %rdx
    00000984: 	movq	%rbp, %rdi
    00000987: 	callq	_Z12test_reverseIPfPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2439
    0000098c: 	movq	0xd0(%rsp), %rdi
    00000994: 	cmpq	0x8(%rsp), %rdi
    00000999: 	je	.Ltmp3086 # Offset: 2457
    0000099b: 	movq	0xe0(%rsp), %rax
    000009a3: 	leaq	0x1(%rax), %rsi
    000009a7: 	callq	_ZdlPvm@PLT # Offset: 2471
.Ltmp3086:
    000009ac: 	leaq	DATAat0x2734e(%rip), %r12
    000009b3: 	movq	%r13, %rsi
    000009b6: 	movq	%rbx, %rdi
    000009b9: 	movq	%r12, %rdx
    000009bc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2492
    000009c1: 	leaq	_Z13fast_reverse4IPfEvT_S1_(%rip), %r14
    000009c8: 	movq	0x10(%rsp), %rsi
    000009cd: 	movq	%rbx, %rcx
    000009d0: 	movq	%rbp, %rdi
    000009d3: 	movq	%r14, %rdx
    000009d6: 	callq	_Z12test_reverseIPfPFvS0_S0_EEvT_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2518
    000009db: 	movq	0xd0(%rsp), %rdi
    000009e3: 	cmpq	0x8(%rsp), %rdi
    000009e8: 	je	.Ltmp3087 # Offset: 2536
    000009ea: 	movq	0xe0(%rsp), %rax
    000009f2: 	leaq	0x1(%rax), %rsi
    000009f6: 	callq	_ZdlPvm@PLT # Offset: 2550
.Ltmp3087:
    000009fb: 	leaq	0x90(%rsp), %rdi
    00000a03: 	leaq	DATAat0x2736b(%rip), %rdx
    00000a0a: 	movq	%r13, %rsi
    00000a0d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2573
    00000a12: 	movl	iterations(%rip), %edx
    00000a18: 	xorl	%r8d, %r8d
    00000a1b: 	xorl	%ecx, %ecx
    00000a1d: 	movl	$0x1f40, %esi
    00000a22: 	movq	0x90(%rsp), %rdi
    00000a2a: 	callq	_Z9summarizePKciiii # Offset: 2602
    00000a2f: 	movl	0x1c(%rsp), %ecx
    00000a33: 	leaq	DATAat0x27268(%rip), %rdx
    00000a3a: 	movq	%r13, %rsi
    00000a3d: 	movq	%rbx, %rdi
    00000a40: 	testl	%ecx, %ecx
    00000a42: 	leal	0x3fff(%rcx), %eax
    00000a48: 	cmovnsl	%ecx, %eax
    00000a4b: 	sarl	$0xe, %eax
    00000a4e: 	movl	%eax, 0x30(%rsp)
    00000a52: 	movl	%eax, iterations(%rip)
    00000a58: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2648
    00000a5d: 	movq	%rbx, %rcx
    00000a60: 	leaq	_ZSt7reverseI20BidirectionalPointerIfEEvT_S2_(%rip), %rdx
    00000a67: 	movl	$0x1000000, %esi
    00000a6c: 	movq	%rbp, %rdi
    00000a6f: 	callq	_Z18test_reverse_sizesI20BidirectionalPointerIfEPFvS1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2671
    00000a74: 	movq	0xd0(%rsp), %rdi
    00000a7c: 	cmpq	0x8(%rsp), %rdi
    00000a81: 	je	.Ltmp3088 # Offset: 2689
    00000a83: 	movq	0xe0(%rsp), %rax
    00000a8b: 	leaq	0x1(%rax), %rsi
    00000a8f: 	callq	_ZdlPvm@PLT # Offset: 2703
.Ltmp3088:
    00000a94: 	leaq	DATAat0x27284(%rip), %rdx
    00000a9b: 	movq	%r13, %rsi
    00000a9e: 	movq	%rbx, %rdi
    00000aa1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2721
    00000aa6: 	movq	%rbx, %rcx
    00000aa9: 	leaq	_Z17my_simple_reverseI20BidirectionalPointerIfEEvT_S2_(%rip), %rdx
    00000ab0: 	movl	$0x1000000, %esi
    00000ab5: 	movq	%rbp, %rdi
    00000ab8: 	callq	_Z18test_reverse_sizesI20BidirectionalPointerIfEPFvS1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2744
    00000abd: 	movq	0xd0(%rsp), %rdi
    00000ac5: 	cmpq	0x8(%rsp), %rdi
    00000aca: 	je	.Ltmp3089 # Offset: 2762
    00000acc: 	movq	0xe0(%rsp), %rax
    00000ad4: 	leaq	0x1(%rax), %rsi
    00000ad8: 	callq	_ZdlPvm@PLT # Offset: 2776
.Ltmp3089:
    00000add: 	leaq	DATAat0x272a2(%rip), %rdx
    00000ae4: 	movq	%r13, %rsi
    00000ae7: 	movq	%rbx, %rdi
    00000aea: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2794
    00000aef: 	movq	%rbx, %rcx
    00000af2: 	leaq	_Z15my_fast_reverseI20BidirectionalPointerIfEEvT_S2_(%rip), %rdx
    00000af9: 	movl	$0x1000000, %esi
    00000afe: 	movq	%rbp, %rdi
    00000b01: 	callq	_Z18test_reverse_sizesI20BidirectionalPointerIfEPFvS1_S1_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2817
    00000b06: 	movq	0xd0(%rsp), %rdi
    00000b0e: 	cmpq	0x8(%rsp), %rdi
    00000b13: 	je	.Ltmp3090 # Offset: 2835
    00000b15: 	movq	0xe0(%rsp), %rax
    00000b1d: 	leaq	0x1(%rax), %rsi
    00000b21: 	callq	_ZdlPvm@PLT # Offset: 2849
.Ltmp3090:
    00000b26: 	leaq	DATAat0x272be(%rip), %rdx
    00000b2d: 	movq	%r13, %rsi
    00000b30: 	movq	%rbx, %rdi
    00000b33: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2867
    00000b38: 	movq	%rbx, %rcx
    00000b3b: 	leaq	_ZSt7reverseIPfEvT_S1_(%rip), %rdx
    00000b42: 	movl	$0x1000000, %esi
    00000b47: 	movq	%rbp, %rdi
    00000b4a: 	callq	_Z18test_reverse_sizesIPfPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2890
    00000b4f: 	movq	0xd0(%rsp), %rdi
    00000b57: 	cmpq	0x8(%rsp), %rdi
    00000b5c: 	je	.Ltmp3091 # Offset: 2908
    00000b5e: 	movq	0xe0(%rsp), %rax
    00000b66: 	leaq	0x1(%rax), %rsi
    00000b6a: 	callq	_ZdlPvm@PLT # Offset: 2922
.Ltmp3091:
    00000b6f: 	leaq	DATAat0x272da(%rip), %rdx
    00000b76: 	movq	%r13, %rsi
    00000b79: 	movq	%rbx, %rdi
    00000b7c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2940
    00000b81: 	movq	%rbx, %rcx
    00000b84: 	leaq	_Z17my_simple_reverseIPfEvT_S1_(%rip), %rdx
    00000b8b: 	movl	$0x1000000, %esi
    00000b90: 	movq	%rbp, %rdi
    00000b93: 	callq	_Z18test_reverse_sizesIPfPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2963
    00000b98: 	movq	0xd0(%rsp), %rdi
    00000ba0: 	cmpq	0x8(%rsp), %rdi
    00000ba5: 	je	.Ltmp3092 # Offset: 2981
    00000ba7: 	movq	0xe0(%rsp), %rax
    00000baf: 	leaq	0x1(%rax), %rsi
    00000bb3: 	callq	_ZdlPvm@PLT # Offset: 2995
.Ltmp3092:
    00000bb8: 	leaq	DATAat0x272f8(%rip), %rdx
    00000bbf: 	movq	%r13, %rsi
    00000bc2: 	movq	%rbx, %rdi
    00000bc5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3013
    00000bca: 	movq	%rbx, %rcx
    00000bcd: 	leaq	_Z15my_fast_reverseIPfEvT_S1_(%rip), %rdx
    00000bd4: 	movl	$0x1000000, %esi
    00000bd9: 	movq	%rbp, %rdi
    00000bdc: 	callq	_Z18test_reverse_sizesIPfPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3036
    00000be1: 	movq	0xd0(%rsp), %rdi
    00000be9: 	cmpq	0x8(%rsp), %rdi
    00000bee: 	je	.Ltmp3093 # Offset: 3054
    00000bf0: 	movq	0xe0(%rsp), %rax
    00000bf8: 	leaq	0x1(%rax), %rsi
    00000bfc: 	callq	_ZdlPvm@PLT # Offset: 3068
.Ltmp3093:
    00000c01: 	leaq	DATAat0x27314(%rip), %rdx
    00000c08: 	movq	%r13, %rsi
    00000c0b: 	movq	%rbx, %rdi
    00000c0e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3086
    00000c13: 	movq	%rbx, %rcx
    00000c16: 	leaq	_Z13fast_reverse2IPfEvT_S1_(%rip), %rdx
    00000c1d: 	movl	$0x1000000, %esi
    00000c22: 	movq	%rbp, %rdi
    00000c25: 	callq	_Z18test_reverse_sizesIPfPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3109
    00000c2a: 	movq	0xd0(%rsp), %rdi
    00000c32: 	cmpq	0x8(%rsp), %rdi
    00000c37: 	je	.Ltmp3094 # Offset: 3127
    00000c39: 	movq	0xe0(%rsp), %rax
    00000c41: 	leaq	0x1(%rax), %rsi
    00000c45: 	callq	_ZdlPvm@PLT # Offset: 3141
.Ltmp3094:
    00000c4a: 	leaq	DATAat0x27331(%rip), %rdx
    00000c51: 	movq	%r13, %rsi
    00000c54: 	movq	%rbx, %rdi
    00000c57: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3159
    00000c5c: 	movq	%rbx, %rcx
    00000c5f: 	leaq	_Z13fast_reverse3IPfEvT_S1_(%rip), %rdx
    00000c66: 	movl	$0x1000000, %esi
    00000c6b: 	movq	%rbp, %rdi
    00000c6e: 	callq	_Z18test_reverse_sizesIPfPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3182
    00000c73: 	movq	0xd0(%rsp), %rdi
    00000c7b: 	cmpq	0x8(%rsp), %rdi
    00000c80: 	je	.Ltmp3095 # Offset: 3200
    00000c82: 	movq	0xe0(%rsp), %rax
    00000c8a: 	leaq	0x1(%rax), %rsi
    00000c8e: 	callq	_ZdlPvm@PLT # Offset: 3214
.Ltmp3095:
    00000c93: 	movq	%r12, %rdx
    00000c96: 	movq	%r13, %rsi
    00000c99: 	movq	%rbx, %rdi
    00000c9c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3228
    00000ca1: 	movq	%rbx, %rcx
    00000ca4: 	movq	%r14, %rdx
    00000ca7: 	movl	$0x1000000, %esi
    00000cac: 	movq	%rbp, %rdi
    00000caf: 	callq	_Z18test_reverse_sizesIPfPFvS0_S0_EEvT_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3247
    00000cb4: 	movq	0xd0(%rsp), %rdi
    00000cbc: 	cmpq	0x8(%rsp), %rdi
    00000cc1: 	je	.Ltmp3096 # Offset: 3265
    00000cc3: 	movq	0xe0(%rsp), %rax
    00000ccb: 	leaq	0x1(%rax), %rsi
    00000ccf: 	callq	_ZdlPvm@PLT # Offset: 3279
.Ltmp3096:
    00000cd4: 	movl	0x1c(%rsp), %eax
    00000cd8: 	leaq	DATAat0x27388(%rip), %rdx
    00000cdf: 	movq	%r13, %rsi
    00000ce2: 	movq	%rbx, %rdi
    00000ce5: 	movl	%eax, iterations(%rip)
    00000ceb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3307
    00000cf0: 	leaq	0x7d00(%r15), %r12
    00000cf7: 	movq	%r15, %rax
    00000cfa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3097:
    00000d00: 	movaps	DATAat0x27590(%rip), %xmm6
    00000d07: 	addq	$0x10, %rax
    00000d0b: 	movups	%xmm6, -0x10(%rax)
    00000d0f: 	cmpq	%rax, %r12
    00000d12: 	jne	.Ltmp3097 # Offset: 3346
    00000d14: 	callq	clock@PLT # Offset: 3348
    00000d19: 	movl	iterations(%rip), %edi
    00000d1f: 	xorl	%esi, %esi
    00000d21: 	leaq	0x7cf0(%rbp), %rcx
    00000d28: 	movq	%rax, start_time(%rip)
    00000d2f: 	testl	%edi, %edi
    00000d31: 	jle	.Ltmp3098 # Offset: 3377
    00000d33: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3100:
    00000d38: 	movq	%rcx, %rdx
    00000d3b: 	movq	%r15, %rax
    00000d3e: 	nop # Size: 2
.Ltmp3099:
    00000d40: 	movups	(%rdx), %xmm0
    00000d43: 	addq	$0x10, %rax
    00000d47: 	subq	$0x10, %rdx
    00000d4b: 	shufps	$0x1b, %xmm0, %xmm0
    00000d4f: 	movups	%xmm0, -0x10(%rax)
    00000d53: 	cmpq	%rax, %r12
    00000d56: 	jne	.Ltmp3099 # Offset: 3414
    00000d58: 	addl	$0x1, %esi
    00000d5b: 	cmpl	%edi, %esi
    00000d5d: 	jne	.Ltmp3100 # Offset: 3421
.Ltmp3098:
    00000d5f: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000d66: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000d6d: 	subq	$0x20, %rax
    00000d71: 	cmpq	%rax, %rdi
    00000d74: 	je	.Ltmp3101 # Offset: 3444
    00000d7a: 	leaq	0x10(%rdi), %rax
    00000d7e: 	movq	0xd8(%rsp), %rdx
    00000d86: 	movq	%rax, (%rdi)
    00000d89: 	movq	0xd0(%rsp), %rsi
    00000d91: 	addq	%rsi, %rdx
    00000d94: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 3476
    00000d99: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000da0: 	addq	$0x20, %rax
    00000da4: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp3170:
    00000dab: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000db2: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000db9: 	je	.Ltmp3102 # Offset: 3513
.Ltmp3169:
    00000dbf: 	movq	-0x20(%rax), %r14
    00000dc3: 	callq	clock@PLT # Offset: 3523
    00000dc8: 	pxor	%xmm0, %xmm0
    00000dcc: 	movq	%rax, end_time(%rip)
    00000dd3: 	movq	%r14, %rdi
    00000dd6: 	subq	start_time(%rip), %rax
    00000ddd: 	cvtsi2sd	%rax, %xmm0
    00000de2: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000dea: 	callq	_Z13record_resultdPKc # Offset: 3562
    00000def: 	leaq	0x7cfc(%r15), %r14
    00000df6: 	movq	%r15, %rax
    00000df9: 	jmp	.Ltmp3103 # Offset: 3577
    00000dfb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3105:
    00000e00: 	addq	$0x4, %rax
    00000e04: 	movss	(%rax), %xmm0
    00000e08: 	comiss	-0x4(%rax), %xmm0
    00000e0c: 	ja	.Ltmp3104 # Offset: 3596
.Ltmp3103:
    00000e12: 	cmpq	%r14, %rax
    00000e15: 	jne	.Ltmp3105 # Offset: 3605
.Ltmp3165:
    00000e17: 	movq	0xd0(%rsp), %rdi
    00000e1f: 	cmpq	0x8(%rsp), %rdi
    00000e24: 	je	.Ltmp3106 # Offset: 3620
    00000e26: 	movq	0xe0(%rsp), %rax
    00000e2e: 	leaq	0x1(%rax), %rsi
    00000e32: 	callq	_ZdlPvm@PLT # Offset: 3634
.Ltmp3106:
    00000e37: 	leaq	DATAat0x273b0(%rip), %rdx
    00000e3e: 	movq	%r13, %rsi
    00000e41: 	movq	%rbx, %rdi
    00000e44: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3652
    00000e49: 	movq	%r15, %rax
    00000e4c: 	nopl	(%rax) # Size: 4
.Ltmp3107:
    00000e50: 	movaps	DATAat0x27590(%rip), %xmm7
    00000e57: 	addq	$0x10, %rax
    00000e5b: 	movups	%xmm7, -0x10(%rax)
    00000e5f: 	cmpq	%rax, %r12
    00000e62: 	jne	.Ltmp3107 # Offset: 3682
    00000e64: 	callq	clock@PLT # Offset: 3684
    00000e69: 	movl	iterations(%rip), %edi
    00000e6f: 	xorl	%esi, %esi
    00000e71: 	leaq	0x7cf0(%rbp), %rcx
    00000e78: 	movq	%rax, start_time(%rip)
    00000e7f: 	testl	%edi, %edi
    00000e81: 	jle	.Ltmp3108 # Offset: 3713
    00000e83: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3110:
    00000e88: 	movq	%rcx, %rdx
    00000e8b: 	movq	%r15, %rax
    00000e8e: 	nop # Size: 2
.Ltmp3109:
    00000e90: 	movups	(%rdx), %xmm0
    00000e93: 	addq	$0x10, %rax
    00000e97: 	subq	$0x10, %rdx
    00000e9b: 	shufps	$0x1b, %xmm0, %xmm0
    00000e9f: 	movups	%xmm0, -0x10(%rax)
    00000ea3: 	cmpq	%rax, %r12
    00000ea6: 	jne	.Ltmp3109 # Offset: 3750
    00000ea8: 	addl	$0x1, %esi
    00000eab: 	cmpl	%esi, %edi
    00000ead: 	jne	.Ltmp3110 # Offset: 3757
.Ltmp3108:
    00000eaf: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000eb6: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000ebd: 	subq	$0x20, %rax
    00000ec1: 	cmpq	%rax, %rdi
    00000ec4: 	je	.Ltmp3111 # Offset: 3780
    00000eca: 	leaq	0x10(%rdi), %rax
    00000ece: 	movq	0xd8(%rsp), %rdx
    00000ed6: 	movq	%rax, (%rdi)
    00000ed9: 	movq	0xd0(%rsp), %rsi
    00000ee1: 	addq	%rsi, %rdx
    00000ee4: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 3812
    00000ee9: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000ef0: 	addq	$0x20, %rax
    00000ef4: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp3177:
    00000efb: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000f02: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000f09: 	je	.Ltmp3112 # Offset: 3849
.Ltmp3168:
    00000f0f: 	movq	-0x20(%rax), %rdi
    00000f13: 	movq	%rdi, 0x20(%rsp)
    00000f18: 	callq	clock@PLT # Offset: 3864
    00000f1d: 	movq	0x20(%rsp), %rdi
    00000f22: 	pxor	%xmm0, %xmm0
    00000f26: 	movq	%rax, end_time(%rip)
    00000f2d: 	subq	start_time(%rip), %rax
    00000f34: 	cvtsi2sd	%rax, %xmm0
    00000f39: 	divsd	DATAat0x276b0(%rip), %xmm0
    00000f41: 	callq	_Z13record_resultdPKc # Offset: 3905
    00000f46: 	movq	%r15, %rax
    00000f49: 	jmp	.Ltmp3113 # Offset: 3913
    00000f4b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3115:
    00000f50: 	addq	$0x4, %rax
    00000f54: 	movss	(%rax), %xmm0
    00000f58: 	comiss	-0x4(%rax), %xmm0
    00000f5c: 	ja	.Ltmp3114 # Offset: 3932
.Ltmp3113:
    00000f62: 	cmpq	%r14, %rax
    00000f65: 	jne	.Ltmp3115 # Offset: 3941
.Ltmp3163:
    00000f67: 	movq	0xd0(%rsp), %rdi
    00000f6f: 	cmpq	0x8(%rsp), %rdi
    00000f74: 	je	.Ltmp3116 # Offset: 3956
    00000f76: 	movq	0xe0(%rsp), %rax
    00000f7e: 	leaq	0x1(%rax), %rsi
    00000f82: 	callq	_ZdlPvm@PLT # Offset: 3970
.Ltmp3116:
    00000f87: 	leaq	DATAat0x273d8(%rip), %rdx
    00000f8e: 	movq	%r13, %rsi
    00000f91: 	movq	%rbx, %rdi
    00000f94: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3988
    00000f99: 	movq	%r15, %rax
    00000f9c: 	nopl	(%rax) # Size: 4
.Ltmp3117:
    00000fa0: 	movaps	DATAat0x27590(%rip), %xmm6
    00000fa7: 	addq	$0x10, %rax
    00000fab: 	movups	%xmm6, -0x10(%rax)
    00000faf: 	cmpq	%r12, %rax
    00000fb2: 	jne	.Ltmp3117 # Offset: 4018
    00000fb4: 	callq	clock@PLT # Offset: 4020
    00000fb9: 	movl	iterations(%rip), %edi
    00000fbf: 	xorl	%esi, %esi
    00000fc1: 	leaq	0x7cf0(%rbp), %rcx
    00000fc8: 	movq	%rax, start_time(%rip)
    00000fcf: 	testl	%edi, %edi
    00000fd1: 	jle	.Ltmp3118 # Offset: 4049
    00000fd3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3120:
    00000fd8: 	movq	%rcx, %rdx
    00000fdb: 	movq	%r15, %rax
    00000fde: 	nop # Size: 2
.Ltmp3119:
    00000fe0: 	movups	(%rdx), %xmm0
    00000fe3: 	addq	$0x10, %rax
    00000fe7: 	subq	$0x10, %rdx
    00000feb: 	shufps	$0x1b, %xmm0, %xmm0
    00000fef: 	movups	%xmm0, -0x10(%rax)
    00000ff3: 	cmpq	%rax, %r12
    00000ff6: 	jne	.Ltmp3119 # Offset: 4086
    00000ff8: 	addl	$0x1, %esi
    00000ffb: 	cmpl	%edi, %esi
    00000ffd: 	jne	.Ltmp3120 # Offset: 4093
.Ltmp3118:
    00000fff: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001006: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    0000100d: 	subq	$0x20, %rax
    00001011: 	cmpq	%rax, %rdi
    00001014: 	je	.Ltmp3121 # Offset: 4116
    0000101a: 	leaq	0x10(%rdi), %rax
    0000101e: 	movq	0xd8(%rsp), %rdx
    00001026: 	movq	%rax, (%rdi)
    00001029: 	movq	0xd0(%rsp), %rsi
    00001031: 	addq	%rsi, %rdx
    00001034: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 4148
    00001039: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001040: 	addq	$0x20, %rax
    00001044: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp3175:
    0000104b: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001052: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001059: 	je	.Ltmp3122 # Offset: 4185
.Ltmp3174:
    0000105f: 	movq	-0x20(%rax), %rdi
    00001063: 	movq	%rdi, 0x20(%rsp)
    00001068: 	callq	clock@PLT # Offset: 4200
    0000106d: 	movq	0x20(%rsp), %rdi
    00001072: 	pxor	%xmm0, %xmm0
    00001076: 	movq	%rax, end_time(%rip)
    0000107d: 	subq	start_time(%rip), %rax
    00001084: 	cvtsi2sd	%rax, %xmm0
    00001089: 	divsd	DATAat0x276b0(%rip), %xmm0
    00001091: 	callq	_Z13record_resultdPKc # Offset: 4241
    00001096: 	movq	%r15, %rax
    00001099: 	jmp	.Ltmp3123 # Offset: 4249
    0000109b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3125:
    000010a0: 	addq	$0x4, %rax
    000010a4: 	movss	(%rax), %xmm0
    000010a8: 	comiss	-0x4(%rax), %xmm0
    000010ac: 	ja	.Ltmp3124 # Offset: 4268
.Ltmp3123:
    000010b2: 	cmpq	%r14, %rax
    000010b5: 	jne	.Ltmp3125 # Offset: 4277
.Ltmp3164:
    000010b7: 	movq	0xd0(%rsp), %rdi
    000010bf: 	cmpq	0x8(%rsp), %rdi
    000010c4: 	je	.Ltmp3126 # Offset: 4292
    000010c6: 	movq	0xe0(%rsp), %rax
    000010ce: 	leaq	0x1(%rax), %rsi
    000010d2: 	callq	_ZdlPvm@PLT # Offset: 4306
.Ltmp3126:
    000010d7: 	leaq	DATAat0x27400(%rip), %rdx
    000010de: 	movq	%r13, %rsi
    000010e1: 	movq	%rbx, %rdi
    000010e4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4324
    000010e9: 	movq	%r15, %rax
    000010ec: 	nopl	(%rax) # Size: 4
.Ltmp3127:
    000010f0: 	movaps	DATAat0x27590(%rip), %xmm7
    000010f7: 	addq	$0x10, %rax
    000010fb: 	movups	%xmm7, -0x10(%rax)
    000010ff: 	cmpq	%r12, %rax
    00001102: 	jne	.Ltmp3127 # Offset: 4354
    00001104: 	callq	clock@PLT # Offset: 4356
    00001109: 	movl	iterations(%rip), %edi
    0000110f: 	xorl	%esi, %esi
    00001111: 	leaq	0x7cf0(%rbp), %rcx
    00001118: 	movq	%rax, start_time(%rip)
    0000111f: 	testl	%edi, %edi
    00001121: 	jle	.Ltmp3128 # Offset: 4385
    00001123: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3130:
    00001128: 	movq	%rcx, %rdx
    0000112b: 	movq	%r15, %rax
    0000112e: 	nop # Size: 2
.Ltmp3129:
    00001130: 	movups	(%rdx), %xmm0
    00001133: 	addq	$0x10, %rax
    00001137: 	subq	$0x10, %rdx
    0000113b: 	shufps	$0x1b, %xmm0, %xmm0
    0000113f: 	movups	%xmm0, -0x10(%rax)
    00001143: 	cmpq	%r12, %rax
    00001146: 	jne	.Ltmp3129 # Offset: 4422
    00001148: 	addl	$0x1, %esi
    0000114b: 	cmpl	%edi, %esi
    0000114d: 	jne	.Ltmp3130 # Offset: 4429
.Ltmp3128:
    0000114f: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001156: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    0000115d: 	subq	$0x20, %rax
    00001161: 	cmpq	%rax, %rdi
    00001164: 	je	.Ltmp3131 # Offset: 4452
    0000116a: 	leaq	0x10(%rdi), %rax
    0000116e: 	movq	0xd8(%rsp), %rdx
    00001176: 	movq	%rax, (%rdi)
    00001179: 	movq	0xd0(%rsp), %rsi
    00001181: 	addq	%rsi, %rdx
    00001184: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 4484
    00001189: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001190: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001197: 	addq	$0x20, %rax
    0000119b: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000011a2: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000011a9: 	je	.Ltmp3132 # Offset: 4521
.Ltmp3176:
    000011af: 	movq	-0x20(%rax), %rdi
    000011b3: 	movq	%rdi, 0x20(%rsp)
    000011b8: 	callq	clock@PLT # Offset: 4536
    000011bd: 	movq	0x20(%rsp), %rdi
    000011c2: 	pxor	%xmm0, %xmm0
    000011c6: 	movq	%rax, end_time(%rip)
    000011cd: 	subq	start_time(%rip), %rax
    000011d4: 	cvtsi2sd	%rax, %xmm0
    000011d9: 	divsd	DATAat0x276b0(%rip), %xmm0
    000011e1: 	callq	_Z13record_resultdPKc # Offset: 4577
    000011e6: 	movq	%r15, %rax
    000011e9: 	jmp	.Ltmp3133 # Offset: 4585
    000011eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3135:
    000011f0: 	addq	$0x4, %rax
    000011f4: 	movss	(%rax), %xmm0
    000011f8: 	comiss	-0x4(%rax), %xmm0
    000011fc: 	ja	.Ltmp3134 # Offset: 4604
.Ltmp3133:
    00001202: 	cmpq	%r14, %rax
    00001205: 	jne	.Ltmp3135 # Offset: 4613
.Ltmp3162:
    00001207: 	movq	0xd0(%rsp), %rdi
    0000120f: 	cmpq	0x8(%rsp), %rdi
    00001214: 	je	.Ltmp3136 # Offset: 4628
    00001216: 	movq	0xe0(%rsp), %rax
    0000121e: 	leaq	0x1(%rax), %rsi
    00001222: 	callq	_ZdlPvm@PLT # Offset: 4642
.Ltmp3136:
    00001227: 	leaq	DATAat0x27428(%rip), %rdx
    0000122e: 	movq	%r13, %rsi
    00001231: 	movq	%rbx, %rdi
    00001234: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4660
    00001239: 	movq	0x10(%rsp), %rsi
    0000123e: 	movq	%rbx, %r9
    00001241: 	movq	%r12, %rcx
    00001244: 	movq	%r15, %rdx
    00001247: 	leaq	_Z22my_simple_reverse_copyIPfS0_EvT_S1_T0_(%rip), %r8
    0000124e: 	movq	%rbp, %rdi
    00001251: 	callq	_Z17test_reverse_copyIPfPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4689
    00001256: 	movq	0xd0(%rsp), %rdi
    0000125e: 	cmpq	0x8(%rsp), %rdi
    00001263: 	je	.Ltmp3137 # Offset: 4707
    00001265: 	movq	0xe0(%rsp), %rax
    0000126d: 	leaq	0x1(%rax), %rsi
    00001271: 	callq	_ZdlPvm@PLT # Offset: 4721
.Ltmp3137:
    00001276: 	leaq	DATAat0x27450(%rip), %rdx
    0000127d: 	movq	%r13, %rsi
    00001280: 	movq	%rbx, %rdi
    00001283: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4739
    00001288: 	movq	0x10(%rsp), %rsi
    0000128d: 	movq	%rbx, %r9
    00001290: 	movq	%r12, %rcx
    00001293: 	movq	%r15, %rdx
    00001296: 	leaq	_Z20my_fast_reverse_copyIPfS0_EvT_S1_T0_(%rip), %r8
    0000129d: 	movq	%rbp, %rdi
    000012a0: 	callq	_Z17test_reverse_copyIPfPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4768
    000012a5: 	movq	0xd0(%rsp), %rdi
    000012ad: 	cmpq	0x8(%rsp), %rdi
    000012b2: 	je	.Ltmp3138 # Offset: 4786
    000012b4: 	movq	0xe0(%rsp), %rax
    000012bc: 	leaq	0x1(%rax), %rsi
    000012c0: 	callq	_ZdlPvm@PLT # Offset: 4800
.Ltmp3138:
    000012c5: 	leaq	DATAat0x27478(%rip), %rdx
    000012cc: 	movq	%r13, %rsi
    000012cf: 	movq	%rbx, %rdi
    000012d2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4818
    000012d7: 	movq	0x10(%rsp), %rsi
    000012dc: 	movq	%rbx, %r9
    000012df: 	movq	%r12, %rcx
    000012e2: 	movq	%r15, %rdx
    000012e5: 	leaq	_Z18fast_reverse_copy2IPfS0_EvT_S1_T0_(%rip), %r8
    000012ec: 	movq	%rbp, %rdi
    000012ef: 	callq	_Z17test_reverse_copyIPfPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4847
    000012f4: 	movq	0xd0(%rsp), %rdi
    000012fc: 	cmpq	0x8(%rsp), %rdi
    00001301: 	je	.Ltmp3139 # Offset: 4865
    00001303: 	movq	0xe0(%rsp), %rax
    0000130b: 	leaq	0x1(%rax), %rsi
    0000130f: 	callq	_ZdlPvm@PLT # Offset: 4879
.Ltmp3139:
    00001314: 	leaq	DATAat0x274a0(%rip), %rdx
    0000131b: 	movq	%r13, %rsi
    0000131e: 	movq	%rbx, %rdi
    00001321: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4897
    00001326: 	movq	0x10(%rsp), %rsi
    0000132b: 	movq	%rbx, %r9
    0000132e: 	movq	%r12, %rcx
    00001331: 	movq	%r15, %rdx
    00001334: 	leaq	_Z18fast_reverse_copy3IPfS0_EvT_S1_T0_(%rip), %r8
    0000133b: 	movq	%rbp, %rdi
    0000133e: 	callq	_Z17test_reverse_copyIPfPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4926
    00001343: 	movq	0xd0(%rsp), %rdi
    0000134b: 	cmpq	0x8(%rsp), %rdi
    00001350: 	je	.Ltmp3140 # Offset: 4944
    00001352: 	movq	0xe0(%rsp), %rax
    0000135a: 	leaq	0x1(%rax), %rsi
    0000135e: 	callq	_ZdlPvm@PLT # Offset: 4958
.Ltmp3140:
    00001363: 	leaq	DATAat0x274c8(%rip), %r14
    0000136a: 	movq	%r13, %rsi
    0000136d: 	movq	%rbx, %rdi
    00001370: 	movq	%r14, %rdx
    00001373: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4979
    00001378: 	movq	0x10(%rsp), %rsi
    0000137d: 	movq	%rbx, %r9
    00001380: 	movq	%r12, %rcx
    00001383: 	movq	%r15, %rdx
    00001386: 	leaq	_Z18fast_reverse_copy4IPfS0_EvT_S1_T0_(%rip), %r8
    0000138d: 	movq	%rbp, %rdi
    00001390: 	callq	_Z17test_reverse_copyIPfPFvS0_S0_S0_EEvT_S3_S3_S3_T0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5008
    00001395: 	movq	0xd0(%rsp), %rdi
    0000139d: 	cmpq	0x8(%rsp), %rdi
    000013a2: 	je	.Ltmp3141 # Offset: 5026
    000013a4: 	movq	0xe0(%rsp), %rax
    000013ac: 	leaq	0x1(%rax), %rsi
    000013b0: 	callq	_ZdlPvm@PLT # Offset: 5040
.Ltmp3141:
    000013b5: 	leaq	0xb0(%rsp), %rdi
    000013bd: 	leaq	DATAat0x27374(%rip), %rdx
    000013c4: 	movq	%r13, %rsi
    000013c7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5063
    000013cc: 	movl	iterations(%rip), %edx
    000013d2: 	xorl	%r8d, %r8d
    000013d5: 	xorl	%ecx, %ecx
    000013d7: 	movl	$0x1f40, %esi
    000013dc: 	movq	0xb0(%rsp), %rdi
    000013e4: 	callq	_Z9summarizePKciiii # Offset: 5092
    000013e9: 	movl	0x30(%rsp), %eax
    000013ed: 	leaq	DATAat0x27388(%rip), %rdx
    000013f4: 	movq	%r13, %rsi
    000013f7: 	movq	%rbx, %rdi
    000013fa: 	movl	%eax, iterations(%rip)
    00001400: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5120
    00001405: 	movq	%rbx, %r8
    00001408: 	leaq	_ZSt12reverse_copyI20BidirectionalPointerIfES1_ET0_T_S3_S2_(%rip), %rcx
    0000140f: 	movq	%r15, %rsi
    00001412: 	movq	%rbp, %rdi
    00001415: 	movl	$0x1000000, %edx
    0000141a: 	callq	_Z23test_reverse_copy_sizesI20BidirectionalPointerIfEPFS1_S1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5146
    0000141f: 	movq	0xd0(%rsp), %rdi
    00001427: 	cmpq	0x8(%rsp), %rdi
    0000142c: 	je	.Ltmp3142 # Offset: 5164
    0000142e: 	movq	0xe0(%rsp), %rax
    00001436: 	leaq	0x1(%rax), %rsi
    0000143a: 	callq	_ZdlPvm@PLT # Offset: 5178
.Ltmp3142:
    0000143f: 	leaq	DATAat0x273b0(%rip), %rdx
    00001446: 	movq	%r13, %rsi
    00001449: 	movq	%rbx, %rdi
    0000144c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5196
    00001451: 	movq	%rbx, %r8
    00001454: 	leaq	_Z22my_simple_reverse_copyI20BidirectionalPointerIfES1_EvT_S2_T0_(%rip), %rcx
    0000145b: 	movq	%r15, %rsi
    0000145e: 	movq	%rbp, %rdi
    00001461: 	movl	$0x1000000, %edx
    00001466: 	callq	_Z23test_reverse_copy_sizesI20BidirectionalPointerIfEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5222
    0000146b: 	movq	0xd0(%rsp), %rdi
    00001473: 	cmpq	0x8(%rsp), %rdi
    00001478: 	je	.Ltmp3143 # Offset: 5240
    0000147a: 	movq	0xe0(%rsp), %rax
    00001482: 	leaq	0x1(%rax), %rsi
    00001486: 	callq	_ZdlPvm@PLT # Offset: 5254
.Ltmp3143:
    0000148b: 	leaq	DATAat0x273d8(%rip), %rdx
    00001492: 	movq	%r13, %rsi
    00001495: 	movq	%rbx, %rdi
    00001498: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5272
    0000149d: 	movq	%rbx, %r8
    000014a0: 	leaq	_Z20my_fast_reverse_copyI20BidirectionalPointerIfES1_EvT_S2_T0_(%rip), %rcx
    000014a7: 	movq	%r15, %rsi
    000014aa: 	movq	%rbp, %rdi
    000014ad: 	movl	$0x1000000, %edx
    000014b2: 	callq	_Z23test_reverse_copy_sizesI20BidirectionalPointerIfEPFvS1_S1_S1_EEvT_S4_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5298
    000014b7: 	movq	0xd0(%rsp), %rdi
    000014bf: 	cmpq	0x8(%rsp), %rdi
    000014c4: 	je	.Ltmp3144 # Offset: 5316
    000014c6: 	movq	0xe0(%rsp), %rax
    000014ce: 	leaq	0x1(%rax), %rsi
    000014d2: 	callq	_ZdlPvm@PLT # Offset: 5330
.Ltmp3144:
    000014d7: 	leaq	DATAat0x27400(%rip), %rdx
    000014de: 	movq	%r13, %rsi
    000014e1: 	movq	%rbx, %rdi
    000014e4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5348
    000014e9: 	movq	%rbx, %r8
    000014ec: 	leaq	_ZSt12reverse_copyIPfS0_ET0_T_S2_S1_(%rip), %rcx
    000014f3: 	movq	%r15, %rsi
    000014f6: 	movq	%rbp, %rdi
    000014f9: 	movl	$0x1000000, %edx
    000014fe: 	callq	_Z23test_reverse_copy_sizesIPfPFS0_S0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5374
    00001503: 	movq	0xd0(%rsp), %rdi
    0000150b: 	cmpq	0x8(%rsp), %rdi
    00001510: 	je	.Ltmp3145 # Offset: 5392
    00001512: 	movq	0xe0(%rsp), %rax
    0000151a: 	leaq	0x1(%rax), %rsi
    0000151e: 	callq	_ZdlPvm@PLT # Offset: 5406
.Ltmp3145:
    00001523: 	leaq	DATAat0x27428(%rip), %rdx
    0000152a: 	movq	%r13, %rsi
    0000152d: 	movq	%rbx, %rdi
    00001530: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5424
    00001535: 	movq	%rbx, %r8
    00001538: 	leaq	_Z22my_simple_reverse_copyIPfS0_EvT_S1_T0_(%rip), %rcx
    0000153f: 	movq	%r15, %rsi
    00001542: 	movq	%rbp, %rdi
    00001545: 	movl	$0x1000000, %edx
    0000154a: 	callq	_Z23test_reverse_copy_sizesIPfPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5450
    0000154f: 	movq	0xd0(%rsp), %rdi
    00001557: 	cmpq	0x8(%rsp), %rdi
    0000155c: 	je	.Ltmp3146 # Offset: 5468
    0000155e: 	movq	0xe0(%rsp), %rax
    00001566: 	leaq	0x1(%rax), %rsi
    0000156a: 	callq	_ZdlPvm@PLT # Offset: 5482
.Ltmp3146:
    0000156f: 	leaq	DATAat0x27450(%rip), %rdx
    00001576: 	movq	%r13, %rsi
    00001579: 	movq	%rbx, %rdi
    0000157c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5500
    00001581: 	movq	%rbx, %r8
    00001584: 	leaq	_Z20my_fast_reverse_copyIPfS0_EvT_S1_T0_(%rip), %rcx
    0000158b: 	movq	%r15, %rsi
    0000158e: 	movq	%rbp, %rdi
    00001591: 	movl	$0x1000000, %edx
    00001596: 	callq	_Z23test_reverse_copy_sizesIPfPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5526
    0000159b: 	movq	0xd0(%rsp), %rdi
    000015a3: 	cmpq	0x8(%rsp), %rdi
    000015a8: 	je	.Ltmp3147 # Offset: 5544
    000015aa: 	movq	0xe0(%rsp), %rax
    000015b2: 	leaq	0x1(%rax), %rsi
    000015b6: 	callq	_ZdlPvm@PLT # Offset: 5558
.Ltmp3147:
    000015bb: 	leaq	DATAat0x27478(%rip), %rdx
    000015c2: 	movq	%r13, %rsi
    000015c5: 	movq	%rbx, %rdi
    000015c8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5576
    000015cd: 	movq	%rbx, %r8
    000015d0: 	leaq	_Z18fast_reverse_copy2IPfS0_EvT_S1_T0_(%rip), %rcx
    000015d7: 	movq	%r15, %rsi
    000015da: 	movq	%rbp, %rdi
    000015dd: 	movl	$0x1000000, %edx
    000015e2: 	callq	_Z23test_reverse_copy_sizesIPfPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5602
    000015e7: 	movq	0xd0(%rsp), %rdi
    000015ef: 	cmpq	0x8(%rsp), %rdi
    000015f4: 	je	.Ltmp3148 # Offset: 5620
    000015f6: 	movq	0xe0(%rsp), %rax
    000015fe: 	leaq	0x1(%rax), %rsi
    00001602: 	callq	_ZdlPvm@PLT # Offset: 5634
.Ltmp3148:
    00001607: 	leaq	DATAat0x274a0(%rip), %rdx
    0000160e: 	movq	%r13, %rsi
    00001611: 	movq	%rbx, %rdi
    00001614: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5652
    00001619: 	movq	%rbx, %r8
    0000161c: 	leaq	_Z18fast_reverse_copy3IPfS0_EvT_S1_T0_(%rip), %rcx
    00001623: 	movq	%r15, %rsi
    00001626: 	movq	%rbp, %rdi
    00001629: 	movl	$0x1000000, %edx
    0000162e: 	callq	_Z23test_reverse_copy_sizesIPfPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5678
    00001633: 	movq	0xd0(%rsp), %rdi
    0000163b: 	cmpq	0x8(%rsp), %rdi
    00001640: 	je	.Ltmp3149 # Offset: 5696
    00001642: 	movq	0xe0(%rsp), %rax
    0000164a: 	leaq	0x1(%rax), %rsi
    0000164e: 	callq	_ZdlPvm@PLT # Offset: 5710
.Ltmp3149:
    00001653: 	movq	%r14, %rdx
    00001656: 	movq	%r13, %rsi
    00001659: 	movq	%rbx, %rdi
    0000165c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5724
    00001661: 	movq	%rbx, %r8
    00001664: 	leaq	_Z18fast_reverse_copy4IPfS0_EvT_S1_T0_(%rip), %rcx
    0000166b: 	movq	%r15, %rsi
    0000166e: 	movq	%rbp, %rdi
    00001671: 	movl	$0x1000000, %edx
    00001676: 	callq	_Z23test_reverse_copy_sizesIPfPFvS0_S0_S0_EEvT_S3_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5750
    0000167b: 	movq	0xd0(%rsp), %rdi
    00001683: 	cmpq	0x8(%rsp), %rdi
    00001688: 	je	.Ltmp3150 # Offset: 5768
    0000168a: 	movq	0xe0(%rsp), %rax
    00001692: 	leaq	0x1(%rax), %rsi
    00001696: 	callq	_ZdlPvm@PLT # Offset: 5782
.Ltmp3150:
    0000169b: 	movl	0x1c(%rsp), %eax
    0000169f: 	movq	0xb0(%rsp), %rdi
    000016a7: 	movl	%eax, iterations(%rip)
    000016ad: 	leaq	0xc0(%rsp), %rax
    000016b5: 	cmpq	%rax, %rdi
    000016b8: 	je	.Ltmp3151 # Offset: 5816
    000016ba: 	movq	0xc0(%rsp), %rax
    000016c2: 	leaq	0x1(%rax), %rsi
    000016c6: 	callq	_ZdlPvm@PLT # Offset: 5830
.Ltmp3151:
    000016cb: 	movq	0x90(%rsp), %rdi
    000016d3: 	leaq	0xa0(%rsp), %rax
    000016db: 	cmpq	%rax, %rdi
    000016de: 	je	.Ltmp3152 # Offset: 5854
    000016e0: 	movq	0xa0(%rsp), %rax
    000016e8: 	leaq	0x1(%rax), %rsi
    000016ec: 	callq	_ZdlPvm@PLT # Offset: 5868
.Ltmp3152:
    000016f1: 	movl	$0x4, %esi
    000016f6: 	movq	%r15, %rdi
    000016f9: 	callq	_ZdlPvm@PLT # Offset: 5881
    000016fe: 	movq	%rbp, %rdi
    00001701: 	movl	$0x4, %esi
    00001706: 	callq	_ZdlPvm@PLT # Offset: 5894
    0000170b: 	movq	0x70(%rsp), %rdi
    00001710: 	cmpq	0x38(%rsp), %rdi
    00001715: 	je	.Ltmp3153 # Offset: 5909
    00001717: 	movq	0x80(%rsp), %rax
    0000171f: 	leaq	0x1(%rax), %rsi
    00001723: 	callq	_ZdlPvm@PLT # Offset: 5923
.Ltmp3153:
    00001728: 	movq	0xf8(%rsp), %rax
    00001730: 	subq	%fs:0x28, %rax
    00001739: 	jne	.Ltmp3154 # Offset: 5945
    0000173f: 	addq	$0x108, %rsp
    00001746: 	popq	%rbx
    00001747: 	popq	%rbp
    00001748: 	popq	%r12
    0000174a: 	popq	%r13
    0000174c: 	popq	%r14
    0000174e: 	popq	%r15
    00001750: 	retq # Offset: 5968
    00001751: 	nopl	(%rax) # Size: 7
.Ltmp3155:
    00001758: 	addq	$0x20, %rbp
.Ltmp3019:
    0000175c: 	cmpq	%rbp, 0x8(%rsp)
    00001761: 	je	.Ltmp3023 # Offset: 5985
.Ltmp3156:
    00001767: 	movq	(%rbp), %rdi
    0000176b: 	leaq	0x10(%rbp), %rax
    0000176f: 	cmpq	%rax, %rdi
    00001772: 	je	.Ltmp3155 # Offset: 6002
    00001774: 	movq	0x10(%rbp), %rax
    00001778: 	addq	$0x20, %rbp
    0000177c: 	leaq	0x1(%rax), %rsi
    00001780: 	callq	_ZdlPvm@PLT # Offset: 6016
    00001785: 	cmpq	%rbp, 0x8(%rsp)
    0000178a: 	jne	.Ltmp3156 # Offset: 6026
    0000178c: 	jmp	.Ltmp3023 # Offset: 6028
    00001791: 	nopl	(%rax) # Size: 7
.Ltmp3015:
    00001798: 	addq	$0x20, %rbp
    0000179c: 	cmpq	%rbx, %rbp
    0000179f: 	jne	.Ltmp3016 # Offset: 6047
    000017a5: 	addq	$0x8, %r13
    000017a9: 	cmpq	%r13, %r15
    000017ac: 	ja	.Ltmp3017 # Offset: 6060
    000017b2: 	jmp	.Ltmp3157 # Offset: 6066
.Ltmp3047:
    000017b7: 	leaq	0x68(%rsp), %rsi
    000017bc: 	xorl	%edx, %edx
    000017be: 	movq	%r14, %rdi
    000017c1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6081
    000017c6: 	movq	%rax, (%r14)
    000017c9: 	movq	%rax, %rdi
    000017cc: 	movq	0x68(%rsp), %rax
    000017d1: 	movq	%rax, 0x10(%r14)
.Ltmp3182:
    000017d5: 	movq	0x8(%rsp), %rsi
    000017da: 	movq	%r12, %rdx
    000017dd: 	callq	memcpy@PLT # Offset: 6109
    000017e2: 	movq	0x68(%rsp), %r12
    000017e7: 	movq	(%r14), %rdi
    000017ea: 	jmp	.Ltmp3158 # Offset: 6122
.Ltmp3037:
    000017ef: 	movq	%r13, %rdx
    000017f2: 	addq	$0x4, %r13
    000017f6: 	movss	%xmm1, (%rdx)
    000017fa: 	cmpq	%r13, %r12
    000017fd: 	jne	.Ltmp3033 # Offset: 6141
    00001803: 	jmp	.Ltmp3159 # Offset: 6147
.Ltmp3065:
    00001808: 	movq	0xd0(%rsp), %rdx
    00001810: 	leaq	DATAat0x271d0(%rip), %rsi
    00001817: 	movl	$0x1, %edi
    0000181c: 	xorl	%eax, %eax
    0000181e: 	callq	__printf_chk@PLT # Offset: 6174
    00001823: 	jmp	.Ltmp3160 # Offset: 6179
.Ltmp3051:
    00001828: 	movq	0xd0(%rsp), %rdx
    00001830: 	leaq	DATAat0x271d0(%rip), %rsi
    00001837: 	movl	$0x1, %edi
    0000183c: 	xorl	%eax, %eax
    0000183e: 	callq	__printf_chk@PLT # Offset: 6206
    00001843: 	jmp	.Ltmp3161 # Offset: 6211
.Ltmp3134:
    00001848: 	movq	0xd0(%rsp), %rdx
    00001850: 	leaq	DATAat0x271d0(%rip), %rsi
    00001857: 	movl	$0x1, %edi
    0000185c: 	xorl	%eax, %eax
    0000185e: 	callq	__printf_chk@PLT # Offset: 6238
    00001863: 	jmp	.Ltmp3162 # Offset: 6243
.Ltmp3114:
    00001868: 	movq	0xd0(%rsp), %rdx
    00001870: 	leaq	DATAat0x271d0(%rip), %rsi
    00001877: 	movl	$0x1, %edi
    0000187c: 	xorl	%eax, %eax
    0000187e: 	callq	__printf_chk@PLT # Offset: 6270
    00001883: 	jmp	.Ltmp3163 # Offset: 6275
.Ltmp3124:
    00001888: 	movq	0xd0(%rsp), %rdx
    00001890: 	leaq	DATAat0x271d0(%rip), %rsi
    00001897: 	movl	$0x1, %edi
    0000189c: 	xorl	%eax, %eax
    0000189e: 	callq	__printf_chk@PLT # Offset: 6302
    000018a3: 	jmp	.Ltmp3164 # Offset: 6307
.Ltmp3104:
    000018a8: 	movq	0xd0(%rsp), %rdx
    000018b0: 	leaq	DATAat0x271d0(%rip), %rsi
    000018b7: 	movl	$0x1, %edi
    000018bc: 	xorl	%eax, %eax
    000018be: 	callq	__printf_chk@PLT # Offset: 6334
    000018c3: 	jmp	.Ltmp3165 # Offset: 6339
.Ltmp3079:
    000018c8: 	movq	0xd0(%rsp), %rdx
    000018d0: 	leaq	DATAat0x271d0(%rip), %rsi
    000018d7: 	movl	$0x1, %edi
    000018dc: 	xorl	%eax, %eax
    000018de: 	callq	__printf_chk@PLT # Offset: 6366
    000018e3: 	jmp	.Ltmp3166 # Offset: 6371
.Ltmp3072:
    000018e8: 	movq	%rbx, %rsi
    000018eb: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000018f2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6386
    000018f7: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000018fe: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001905: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000190c: 	jne	.Ltmp3167 # Offset: 6412
.Ltmp3077:
    00001912: 	movq	-0x8(%rdx), %rax
    00001916: 	addq	$0x200, %rax
    0000191c: 	jmp	.Ltmp3167 # Offset: 6428
.Ltmp3112:
    00001921: 	movq	-0x8(%rdx), %rax
    00001925: 	addq	$0x200, %rax
    0000192b: 	jmp	.Ltmp3168 # Offset: 6443
.Ltmp3102:
    00001930: 	movq	-0x8(%rdx), %rax
    00001934: 	addq	$0x200, %rax
    0000193a: 	jmp	.Ltmp3169 # Offset: 6458
.Ltmp3101:
    0000193f: 	movq	%rbx, %rsi
    00001942: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001949: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6473
    0000194e: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001955: 	jmp	.Ltmp3170 # Offset: 6485
.Ltmp3058:
    0000195a: 	movq	%rbx, %rsi
    0000195d: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001964: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6500
    00001969: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001970: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001977: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000197e: 	jne	.Ltmp3171 # Offset: 6526
.Ltmp3063:
    00001984: 	movq	-0x8(%rdx), %rax
    00001988: 	addq	$0x200, %rax
    0000198e: 	jmp	.Ltmp3171 # Offset: 6542
.Ltmp3049:
    00001993: 	movq	-0x8(%rdx), %rax
    00001997: 	addq	$0x200, %rax
    0000199d: 	jmp	.Ltmp3172 # Offset: 6557
.Ltmp3044:
    000019a2: 	movq	%rbx, %rsi
    000019a5: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000019ac: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6572
    000019b1: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000019b8: 	jmp	.Ltmp3173 # Offset: 6584
.Ltmp3122:
    000019bd: 	movq	-0x8(%rdx), %rax
    000019c1: 	addq	$0x200, %rax
    000019c7: 	jmp	.Ltmp3174 # Offset: 6599
.Ltmp3121:
    000019cc: 	movq	%rbx, %rsi
    000019cf: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000019d6: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6614
    000019db: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000019e2: 	jmp	.Ltmp3175 # Offset: 6626
.Ltmp3131:
    000019e7: 	movq	%rbx, %rsi
    000019ea: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000019f1: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6641
    000019f6: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000019fd: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001a04: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001a0b: 	jne	.Ltmp3176 # Offset: 6667
.Ltmp3132:
    00001a11: 	movq	-0x8(%rdx), %rax
    00001a15: 	addq	$0x200, %rax
    00001a1b: 	jmp	.Ltmp3176 # Offset: 6683
.Ltmp3111:
    00001a20: 	movq	%rbx, %rsi
    00001a23: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001a2a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6698
    00001a2f: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001a36: 	jmp	.Ltmp3177 # Offset: 6710
.Ltmp3062:
    00001a3b: 	cmpq	$0x0, 0x30(%rsp)
    00001a41: 	je	.Ltmp3178 # Offset: 6721
    00001a47: 	jmp	.Ltmp3179 # Offset: 6727
    00001a49: 	nopl	(%rax) # Size: 7
.Ltmp3076:
    00001a50: 	cmpq	$0x0, 0x30(%rsp)
    00001a56: 	je	.Ltmp3180 # Offset: 6742
    00001a5c: 	jmp	.Ltmp3181 # Offset: 6748
    00001a5e: 	nop # Size: 2
.Ltmp3061:
    00001a60: 	leaq	0x68(%rsp), %rsi
    00001a65: 	xorl	%edx, %edx
    00001a67: 	movq	%r14, %rdi
    00001a6a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6762
    00001a6f: 	movq	%rax, (%r14)
    00001a72: 	movq	%rax, %rdi
    00001a75: 	movq	0x68(%rsp), %rax
    00001a7a: 	movq	%rax, 0x10(%r14)
.Ltmp3179:
    00001a7e: 	movq	0x30(%rsp), %rdx
    00001a83: 	movq	0x40(%rsp), %rsi
    00001a88: 	callq	memcpy@PLT # Offset: 6792
    00001a8d: 	movq	0x68(%rsp), %rax
    00001a92: 	movq	(%r14), %rdi
    00001a95: 	movq	%rax, 0x30(%rsp)
    00001a9a: 	jmp	.Ltmp3178 # Offset: 6810
.Ltmp3075:
    00001a9f: 	leaq	0x68(%rsp), %rsi
    00001aa4: 	xorl	%edx, %edx
    00001aa6: 	movq	%r14, %rdi
    00001aa9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6825
    00001aae: 	movq	%rax, (%r14)
    00001ab1: 	movq	%rax, %rdi
    00001ab4: 	movq	0x68(%rsp), %rax
    00001ab9: 	movq	%rax, 0x10(%r14)
.Ltmp3181:
    00001abd: 	movq	0x30(%rsp), %rdx
    00001ac2: 	movq	0x20(%rsp), %rsi
    00001ac7: 	callq	memcpy@PLT # Offset: 6855
    00001acc: 	movq	0x68(%rsp), %rax
    00001ad1: 	movq	(%r14), %rdi
    00001ad4: 	movq	%rax, 0x30(%rsp)
    00001ad9: 	jmp	.Ltmp3180 # Offset: 6873
.Ltmp3048:
    00001ade: 	testq	%r12, %r12
    00001ae1: 	je	.Ltmp3158 # Offset: 6881
    00001ae7: 	jmp	.Ltmp3182 # Offset: 6887
    00001aec: 	nopl	(%rax) # Size: 4
.Ltmp3035:
    00001af0: 	movq	%r14, %rdx
    00001af3: 	jmp	.Ltmp3183 # Offset: 6899
.Ltmp3046:
    00001af8: 	leaq	DATAat0x27008(%rip), %rdi
    00001aff: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6911
.Ltmp3060:
    00001b04: 	leaq	DATAat0x27008(%rip), %rdi
    00001b0b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6923
.Ltmp3074:
    00001b10: 	leaq	DATAat0x27008(%rip), %rdi
    00001b17: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6935
.Ltmp3154:
    00001b1c: 	callq	__stack_chk_fail@PLT # Offset: 6940
    00001b21: 	endbr64
.Ltmp3194:
    00001b25: 	movq	%rax, %rbx
    00001b28: 	jmp	.Ltmp3184 # Offset: 6952
    00001b2a: 	endbr64
.Ltmp3186:
    00001b2e: 	movq	%rax, %rbx
    00001b31: 	jmp	.Ltmp3185 # Offset: 6961
    00001b33: 	endbr64
    00001b37: 	jmp	.Ltmp3186 # Offset: 6967
    00001b39: 	endbr64
    00001b3d: 	jmp	.Ltmp3186 # Offset: 6973
    00001b3f: 	endbr64
    00001b43: 	jmp	.Ltmp3186 # Offset: 6979
    00001b45: 	endbr64
    00001b49: 	jmp	.Ltmp3186 # Offset: 6985
    00001b4b: 	endbr64
    00001b4f: 	jmp	.Ltmp3186 # Offset: 6991
    00001b51: 	endbr64
    00001b55: 	jmp	.Ltmp3186 # Offset: 6997
    00001b57: 	endbr64
    00001b5b: 	jmp	.Ltmp3186 # Offset: 7003
.Ltmp3184:
    00001b5d: 	movq	0xd0(%rsp), %rdi
    00001b65: 	cmpq	0x8(%rsp), %rdi
    00001b6a: 	jne	.Ltmp3187 # Offset: 7018
.Ltmp3190:
    00001b70: 	movl	$0x4, %esi
    00001b75: 	movq	%r15, %rdi
    00001b78: 	callq	_ZdlPvm@PLT # Offset: 7032
.Ltmp3195:
    00001b7d: 	movq	%rbp, %rdi
    00001b80: 	movl	$0x4, %esi
    00001b85: 	movq	%rbx, %rbp
    00001b88: 	callq	_ZdlPvm@PLT # Offset: 7048
.Ltmp3196:
    00001b8d: 	movq	0x70(%rsp), %rdi
    00001b92: 	cmpq	0x38(%rsp), %rdi
    00001b97: 	je	.Ltmp3188 # Offset: 7063
    00001b99: 	movq	0x80(%rsp), %rax
    00001ba1: 	leaq	0x1(%rax), %rsi
    00001ba5: 	callq	_ZdlPvm@PLT # Offset: 7077
.Ltmp3188:
    00001baa: 	movq	%rbp, %rdi
    00001bad: 	callq	_Unwind_Resume@PLT # Offset: 7085
.Ltmp3185:
    00001bb2: 	movq	0xd0(%rsp), %rdi
    00001bba: 	cmpq	0x8(%rsp), %rdi
    00001bbf: 	je	.Ltmp3189 # Offset: 7103
    00001bc1: 	movq	0xe0(%rsp), %rax
    00001bc9: 	leaq	0x1(%rax), %rsi
    00001bcd: 	callq	_ZdlPvm@PLT # Offset: 7117
.Ltmp3189:
    00001bd2: 	movq	0x90(%rsp), %rdi
    00001bda: 	leaq	0xa0(%rsp), %rax
    00001be2: 	cmpq	%rax, %rdi
    00001be5: 	je	.Ltmp3190 # Offset: 7141
    00001be7: 	movq	0xa0(%rsp), %rax
    00001bef: 	leaq	0x1(%rax), %rsi
    00001bf3: 	callq	_ZdlPvm@PLT # Offset: 7155
    00001bf8: 	jmp	.Ltmp3190 # Offset: 7160
.Ltmp3197:
    00001bfd: 	movq	0xd0(%rsp), %rdi
    00001c05: 	leaq	0xe0(%rsp), %rax
    00001c0d: 	cmpq	%rax, %rdi
    00001c10: 	je	.Ltmp3190 # Offset: 7184
.Ltmp3187:
    00001c16: 	movq	0xe0(%rsp), %rax
    00001c1e: 	leaq	0x1(%rax), %rsi
    00001c22: 	callq	_ZdlPvm@PLT # Offset: 7202
    00001c27: 	jmp	.Ltmp3190 # Offset: 7207
    00001c2c: 	endbr64
    00001c30: 	jmp	.Ltmp3186 # Offset: 7216
    00001c35: 	endbr64
    00001c39: 	jmp	.Ltmp3186 # Offset: 7225
    00001c3e: 	endbr64
    00001c42: 	jmp	.Ltmp3186 # Offset: 7234
    00001c47: 	endbr64
    00001c4b: 	jmp	.Ltmp3186 # Offset: 7243
    00001c50: 	endbr64
.Ltmp3192:
    00001c54: 	movq	%rax, %rbx
    00001c57: 	jmp	.Ltmp3191 # Offset: 7255
    00001c59: 	endbr64
    00001c5d: 	jmp	.Ltmp3192 # Offset: 7261
    00001c5f: 	endbr64
    00001c63: 	jmp	.Ltmp3192 # Offset: 7267
    00001c65: 	endbr64
    00001c69: 	jmp	.Ltmp3192 # Offset: 7273
.Ltmp3191:
    00001c6b: 	movq	0xd0(%rsp), %rdi
    00001c73: 	cmpq	0x8(%rsp), %rdi
    00001c78: 	je	.Ltmp3193 # Offset: 7288
    00001c7a: 	movq	0xe0(%rsp), %rax
    00001c82: 	leaq	0x1(%rax), %rsi
    00001c86: 	callq	_ZdlPvm@PLT # Offset: 7302
.Ltmp3193:
    00001c8b: 	movq	0xb0(%rsp), %rdi
    00001c93: 	leaq	0xc0(%rsp), %rax
    00001c9b: 	cmpq	%rax, %rdi
    00001c9e: 	je	.Ltmp3189 # Offset: 7326
    00001ca4: 	movq	0xc0(%rsp), %rax
    00001cac: 	leaq	0x1(%rax), %rsi
    00001cb0: 	callq	_ZdlPvm@PLT # Offset: 7344
    00001cb5: 	jmp	.Ltmp3189 # Offset: 7349
    00001cba: 	endbr64
    00001cbe: 	jmp	.Ltmp3194 # Offset: 7358
    00001cc3: 	endbr64
    00001cc7: 	jmp	.Ltmp3192 # Offset: 7367
    00001cc9: 	endbr64
    00001ccd: 	jmp	.Ltmp3186 # Offset: 7373
    00001cd2: 	endbr64
    00001cd6: 	movq	%rax, %rbx
    00001cd9: 	jmp	.Ltmp3193 # Offset: 7385
    00001cdb: 	endbr64
    00001cdf: 	jmp	.Ltmp3192 # Offset: 7391
    00001ce4: 	endbr64
    00001ce8: 	jmp	.Ltmp3192 # Offset: 7400
    00001ced: 	endbr64
    00001cf1: 	jmp	.Ltmp3192 # Offset: 7409
    00001cf6: 	endbr64
    00001cfa: 	jmp	.Ltmp3192 # Offset: 7418
    00001cff: 	endbr64
    00001d03: 	jmp	.Ltmp3186 # Offset: 7427
    00001d08: 	endbr64
    00001d0c: 	jmp	.Ltmp3186 # Offset: 7436
    00001d11: 	endbr64
    00001d15: 	jmp	.Ltmp3186 # Offset: 7445
    00001d1a: 	endbr64
    00001d1e: 	jmp	.Ltmp3186 # Offset: 7454
    00001d23: 	endbr64
    00001d27: 	jmp	.Ltmp3194 # Offset: 7463
    00001d2c: 	endbr64
    00001d30: 	jmp	.Ltmp3194 # Offset: 7472
    00001d35: 	endbr64
    00001d39: 	jmp	.Ltmp3194 # Offset: 7481
    00001d3e: 	endbr64
    00001d42: 	jmp	.Ltmp3194 # Offset: 7490
    00001d47: 	endbr64
    00001d4b: 	jmp	.Ltmp3194 # Offset: 7499
    00001d50: 	endbr64
    00001d54: 	jmp	.Ltmp3194 # Offset: 7508
    00001d59: 	endbr64
    00001d5d: 	movq	%rax, %rbx
    00001d60: 	jmp	.Ltmp3189 # Offset: 7520
    00001d65: 	endbr64
    00001d69: 	jmp	.Ltmp3186 # Offset: 7529
    00001d6e: 	endbr64
    00001d72: 	movq	%rax, %rbx
    00001d75: 	jmp	.Ltmp3190 # Offset: 7541
    00001d7a: 	endbr64
    00001d7e: 	movq	%rax, %rbx
    00001d81: 	jmp	.Ltmp3195 # Offset: 7553
    00001d86: 	endbr64
    00001d8a: 	movq	%rax, %rbp
    00001d8d: 	jmp	.Ltmp3196 # Offset: 7565
    00001d92: 	endbr64
    00001d96: 	movq	%rax, %rbx
    00001d99: 	jmp	.Ltmp3197 # Offset: 7577
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIfEvv"

Binary Function "_fini" after disassembly {
  Number      : 248
  State       : disassembled
  Address     : 0x26370
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x26370
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0247:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 249 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 2092 instructions were shortened
BOLT-INFO: removed 744 empty blocks
BOLT-INFO: SCTC: patched 1 tail calls (1 forward) tail calls (0 backward) from a total of 1 while removing 0 double jumps and removing 1 basic blocks totalling 5 bytes of code. CTCs total execution count is 0 and the number of times CTCs are taken is 0
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 244 out of 277 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x20759c
